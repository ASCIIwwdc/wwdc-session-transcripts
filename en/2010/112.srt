1
00:00:06,310 --> 00:00:10,510
>> Wil Turner: Welcome to Integrating Ads with iAd.

2
00:00:10,510 --> 00:00:13,600
Today, we're going to give you an
overview of the iAd Objective-C framework.

3
00:00:13,600 --> 00:00:17,860
How to use is in your application and the
best practices you want to keep in mind.

4
00:00:17,860 --> 00:00:23,860
We also talked about the business
side of using iAd in your application.

5
00:00:23,860 --> 00:00:25,210
My name is Wil Turner.

6
00:00:25,210 --> 00:00:28,530
I am the iAd Framework Manager.

7
00:00:28,530 --> 00:00:33,810
So today's agenda, we're going to
start of with an advertising overview.

8
00:00:33,810 --> 00:00:36,060
The advertising industry, how it works.

9
00:00:36,060 --> 00:00:40,700
Then we will get in to the technical
side of the iAd framework.

10
00:00:40,700 --> 00:00:48,510
Putting the ads in your app, what we call the banner view
life cycle, how to support multiple interface orientations.

11
00:00:48,510 --> 00:00:51,410
So your apps already may support autorotation.

12
00:00:51,410 --> 00:00:52,880
You want the apps do the same thing.

13
00:00:52,880 --> 00:00:58,470
Then we'll talk about responding the actions
that the user chooses to go into the ad,

14
00:00:58,470 --> 00:01:01,800
is there something your app should do in response?

15
00:01:01,800 --> 00:01:07,280
And finally, we will finish with the business
side what it means to become a publisher.

16
00:01:07,280 --> 00:01:11,110
But first, a little recap of why iAd.

17
00:01:11,110 --> 00:01:14,540
We think with iAd we can reinvent mobile advertising.

18
00:01:14,540 --> 00:01:22,110
Right now the status quo of mobile advertising is
that things are somewhat interactive because it's web

19
00:01:22,110 --> 00:01:31,370
or some other kinds of dynamic content, but the ads usually
exit the application which is a really poor user experience.

20
00:01:31,370 --> 00:01:34,940
And then there's television which is on the
other side of things and it's fantastic.

21
00:01:34,940 --> 00:01:40,180
It can convey an emotion but there's not really
interactive side, there's a captive audience.

22
00:01:40,180 --> 00:01:47,840
With iAd rich media ads we think we can capture both
of these, both the emotional and the interactive.

23
00:01:47,840 --> 00:01:55,950
The best of both worlds will provide media through audio
and video and interaction through emotion and touch.

24
00:01:55,950 --> 00:01:59,690
The iAd rich media ads are built on HTML5.

25
00:01:59,690 --> 00:02:05,140
That means that audio and video are
first class citizens in the web content.

26
00:02:05,140 --> 00:02:10,370
They're not provided by plug-ins and they execute natively.

27
00:02:10,370 --> 00:02:15,230
We get interaction with CSS3 and
Multi-Touch which is only on the iPhone.

28
00:02:15,230 --> 00:02:22,850
So WebKit provides extensions in the browser that allow us
to do animated transitions and even keyframe animations.

29
00:02:22,850 --> 00:02:24,830
They are hardware accelerated.

30
00:02:24,830 --> 00:02:28,620
So no more JavaScript to animate
something across the screen.

31
00:02:28,620 --> 00:02:36,510
This is happening down on the graphics hardware and
the touches are exposed as DOM events by WebKit.

32
00:02:36,510 --> 00:02:42,120
Finally, we're going to deliver an optimal
user experience in the iAd rich media ads

33
00:02:42,120 --> 00:02:46,110
because the user will never leave the application.

34
00:02:46,110 --> 00:02:52,570
The background process we have is going to execute the
ads so it's not in your apps memory space but it's going

35
00:02:52,570 --> 00:02:58,020
to be presented on top of your application
and your Apple always remains foreground.

36
00:02:58,020 --> 00:03:02,030
The user dismisses the ads at any
time and is returned exactly

37
00:03:02,030 --> 00:03:05,060
to the point in your application where they left off.

38
00:03:05,060 --> 00:03:09,240
So this will change the game.

39
00:03:09,240 --> 00:03:14,420
Combining emotion and interactivity
and we don't leave the application.

40
00:03:14,420 --> 00:03:17,530
So, let's talk about advertising a little bit.

41
00:03:17,530 --> 00:03:21,270
There are several common roles in the advertising industry.

42
00:03:21,270 --> 00:03:22,920
It starts off with the advertisers.

43
00:03:22,920 --> 00:03:28,380
These are the people, the companies with products
and services that they're trying to advertise.

44
00:03:28,380 --> 00:03:34,850
The next piece in this chain are the ad agencies,
they help create the advertising campaigns.

45
00:03:34,850 --> 00:03:41,790
Now mobile and web advertising, we have this notion of an
ad network which aggregates the advertisements and campaigns

46
00:03:41,790 --> 00:03:47,080
from the ad agencies and distributes
them out to the publishers.

47
00:03:47,080 --> 00:03:54,370
So publishers is the term that harks back to the
origins of advertising which is in print media.

48
00:03:54,370 --> 00:04:01,020
Newspapers, journals, magazines, sold space to advertisers.

49
00:04:01,020 --> 00:04:03,350
And so we still use the term publishers today.

50
00:04:03,350 --> 00:04:07,510
And then finally, the advertisement reaches the consumer

51
00:04:07,510 --> 00:04:12,300
who hopefully either chooses to
make some purchase based on the ad.

52
00:04:12,300 --> 00:04:18,710
Today, we're really interested in two parts of
this chain, the publishers and the ad network.

53
00:04:18,710 --> 00:04:25,490
The publishers are you, the application developers,
because you are the people with space that you can sell.

54
00:04:25,490 --> 00:04:27,820
And the ad network is iAd.

55
00:04:27,820 --> 00:04:30,920
Advertising has two basic moving parts.

56
00:04:30,920 --> 00:04:37,000
There are banners which are a finite amount of space
that contain some kind of graphical called actions.

57
00:04:37,000 --> 00:04:41,950
When the user chooses to interact with the banner
it leads them into what we call the ad action

58
00:04:41,950 --> 00:04:45,300
which is some kind of web experience usually.

59
00:04:46,790 --> 00:04:51,100
There're also two common business models in advertising.

60
00:04:51,100 --> 00:04:53,610
The first is based on just viewing the banner.

61
00:04:53,610 --> 00:04:59,940
We call that an impression and advertisers
will purchase some number of units of viewings.

62
00:04:59,940 --> 00:05:04,960
So they call that a cost-per-mille because
they purchase these by the thousand.

63
00:05:04,960 --> 00:05:06,620
The other side is clicks.

64
00:05:06,620 --> 00:05:13,730
So they don't care about the user seen in the banner,
they want to pay when the user interacts with the banner

65
00:05:13,730 --> 00:05:18,290
which they consider maybe more
effective measure of how good the ad was.

66
00:05:18,290 --> 00:05:22,820
So that cost-per-click method is the other approach.

67
00:05:22,820 --> 00:05:25,390
The iAd business model is a hybrid approach.

68
00:05:25,390 --> 00:05:28,840
It combines cost-per-click and cost-per-mille.

69
00:05:28,840 --> 00:05:35,850
And so you're paid, you, the application developer when the
user views the banner in your app and also when they tap

70
00:05:35,850 --> 00:05:41,910
on the banner and the tap is weighted
so it's a higher revenue rate.

71
00:05:41,910 --> 00:05:45,060
So now, let's get in to the technical side of things.

72
00:05:45,060 --> 00:05:48,170
The iAd framework is an Objective-C framework.

73
00:05:48,170 --> 00:05:57,730
It's new in the iOS 4 and it makes it
easy to embed ads in your application.

74
00:05:57,730 --> 00:06:02,410
It also promotes high-quality, rich media ads.

75
00:06:02,410 --> 00:06:06,050
We are going to talk about implementing this today.

76
00:06:06,050 --> 00:06:07,570
There are four sections.

77
00:06:07,570 --> 00:06:11,290
The first is just putting the ads in your app.

78
00:06:11,290 --> 00:06:16,780
And, you know, maybe once you get that done you feel
like your finished but there's a little bit to it.

79
00:06:16,780 --> 00:06:19,070
The next thing is what we call a banner view life cycle.

80
00:06:19,070 --> 00:06:23,930
So what that means really is whether
the banner view that you put in your app

81
00:06:23,930 --> 00:06:28,240
at any given time has ad content in it or not.

82
00:06:28,240 --> 00:06:31,430
If you think about where ads come from,
they're kind of come over network.

83
00:06:31,430 --> 00:06:36,980
So if you're not connected to the
network, you might not get ads.

84
00:06:36,980 --> 00:06:42,140
Finally, we're going to talk about
supporting multiple interface orientations

85
00:06:42,140 --> 00:06:46,900
which is the autorotation part
and how to respond to actions.

86
00:06:46,900 --> 00:06:52,530
So when the user does to choose to interact
with the banner, what should your app do?

87
00:06:52,530 --> 00:06:56,510
Let's start off with putting ads in your app.

88
00:06:56,510 --> 00:06:59,810
So here's your app, you want ads.

89
00:06:59,810 --> 00:07:01,980
It's pretty simple really.

90
00:07:01,980 --> 00:07:08,150
You just make a little space and
add a banner view, you're done.

91
00:07:08,150 --> 00:07:10,390
The banner view is ADBannerView.

92
00:07:10,390 --> 00:07:12,900
It does all the heavy lifting for you.

93
00:07:12,900 --> 00:07:20,530
You added into a view hierarchy, maybe make one
or two configurations to it and you're done.

94
00:07:20,530 --> 00:07:22,280
It's a core class in iAd framework.

95
00:07:22,280 --> 00:07:27,040
In fact, it's the only class that
you'll see or interact with.

96
00:07:27,040 --> 00:07:28,650
It's just a view.

97
00:07:28,650 --> 00:07:30,780
Add it to your view hierarchy.

98
00:07:30,780 --> 00:07:35,230
It does require to be part of a
view controller's manage hierarchy.

99
00:07:35,230 --> 00:07:38,510
That has to do with how the ads present the action.

100
00:07:38,510 --> 00:07:40,870
We need to present this frontal view controller.

101
00:07:40,870 --> 00:07:44,220
So you can't just throw your banner
view into an empty window.

102
00:07:44,220 --> 00:07:55,450
And the banner view manages the retrieval and the display
of the advertisements which it gets from the iAd network.

103
00:07:55,450 --> 00:08:01,040
When the user interacts with the banner view, the
banner view takes care of how that interaction proceeds.

104
00:08:01,040 --> 00:08:03,660
Your App does very, very little.

105
00:08:03,660 --> 00:08:06,290
But what does it do?

106
00:08:06,290 --> 00:08:10,660
Well, it really comes down to placement.

107
00:08:10,660 --> 00:08:15,630
Placement is the most important decision
you'll make when you use ADBannerView.

108
00:08:15,630 --> 00:08:21,900
We're balancing attention between
providing a great user experience

109
00:08:21,900 --> 00:08:25,450
and effectively promoting the advertising materials.

110
00:08:25,450 --> 00:08:31,850
And as we've seen over the years in
the web space some people have, think--

111
00:08:31,850 --> 00:08:36,760
have decided that it's effective for banners
and ads to just kind of explode in your face

112
00:08:36,760 --> 00:08:41,830
and fly around the screen but that's
not a great user experience.

113
00:08:41,830 --> 00:08:44,190
That is a very annoying user experience.

114
00:08:44,190 --> 00:08:47,650
And as a result the user is really
unlikely to want to interact with that,

115
00:08:47,650 --> 00:08:50,570
they're going to be hunting for that close button.

116
00:08:50,570 --> 00:08:56,450
Instead, you want to place the banners where they're
visible, they're conspicuous, but they're out of the flow

117
00:08:56,450 --> 00:09:00,450
of what the application is supposed to do.

118
00:09:00,450 --> 00:09:09,010
So we've determined there are two really great places
to put banners, at the top of the screen or the bottom.

119
00:09:09,010 --> 00:09:15,900
That way your application maintains its integrity
as a unit and the banners are very visible.

120
00:09:15,900 --> 00:09:19,950
If the user wants to interact with them,
they have no trouble getting to it.

121
00:09:19,950 --> 00:09:26,800
It's not in such a great idea to put your banners into a
scroll view or table view because they're going to fly by,

122
00:09:26,800 --> 00:09:32,860
the users going to have minimal visibility, and
if they choose to interact it's a moving target.

123
00:09:32,860 --> 00:09:39,700
And if it's moving, they might interact with it
inadvertently and that's also not a good user experience.

124
00:09:39,700 --> 00:09:43,820
So to give you some insight into what this is like.

125
00:09:43,820 --> 00:09:45,780
We're going to take an existing application.

126
00:09:45,780 --> 00:09:55,750
SeismicXML is sample code in the developer reference
library and we're going to modify it so that it uses ads.

127
00:09:55,750 --> 00:09:59,960
The banner view-- this application
uses a UITableViewController.

128
00:09:59,960 --> 00:10:06,750
And we have to make a few modifications to it,
because we want the banner view to be a sibling

129
00:10:06,750 --> 00:10:09,280
of the table view not a subview of the table view.

130
00:10:09,280 --> 00:10:13,660
So that when we scroll in the table
view, the banner view stays where it is.

131
00:10:13,660 --> 00:10:17,820
So we're going to take things apart a
little bit, create a container view,

132
00:10:17,820 --> 00:10:22,240
add the table to that, and then
add the banner at the bottom.

133
00:10:24,950 --> 00:10:29,940
So now, Juan Carlos is going to take
you through a demo of doing exactly

134
00:10:29,940 --> 00:10:35,150
that so you can see just how a little work it
takes to get ADBannerView up in your application.

135
00:10:35,150 --> 00:10:35,390
[ Applause ]

136
00:10:35,390 --> 00:10:41,780
>> Juan Carlos Jimenez: As Wil said the application
we're going to be modifying today is called SeismicXML.

137
00:10:41,780 --> 00:10:47,750
Let me show you what it looks like so we can
talk about what we're going to be doing to it.

138
00:10:47,750 --> 00:10:53,700
As you can see, it consists of a table
view with data that comes from an RSS feed

139
00:10:53,700 --> 00:10:56,080
that comes from the US Geological Survey.

140
00:10:56,080 --> 00:10:58,090
Now, what we're going to be doing
to this application is we're going

141
00:10:58,090 --> 00:11:01,450
to add a banner view to the bottom of the screen right here.

142
00:11:01,450 --> 00:11:05,050
It's important to note that the banner
view will be a sibling to the table view.

143
00:11:05,050 --> 00:11:09,310
This way, if the user scrolls up or down the table
view, the banner view will remain at the bottom.

144
00:11:09,310 --> 00:11:11,670
So let's get started.

145
00:11:11,670 --> 00:11:21,140
The very first thing I want to do is I want
to add the iAd framework to the project.

146
00:11:21,140 --> 00:11:28,030
Next, I'll go into interface builder and I'm going to
add a general purpose view that acts as a container

147
00:11:28,030 --> 00:11:33,100
for both the existing banner-- the
existing table view and the new banner view.

148
00:11:33,100 --> 00:11:39,490
So I'll drag in the table view, make sure to resize
it, and leave enough room for the banner view

149
00:11:39,490 --> 00:11:43,650
which in this case takes up 50 pixels in height.

150
00:11:43,650 --> 00:11:48,510
Then, I'll drag in the banner view.

151
00:11:48,510 --> 00:11:53,020
I want to make sure that I set the auto
resize mask to let the banner view know

152
00:11:53,020 --> 00:11:55,340
that it's going to be placed at the bottom.

153
00:11:56,530 --> 00:12:03,820
And now-- I mean, before I go into more details
in the code, I want to talk about what I just did.

154
00:12:03,820 --> 00:12:10,210
Because I've changed the view hierarchy in such a way
that the root view in this hierarchy is a UIView instead

155
00:12:10,210 --> 00:12:15,070
of a table view, I'll need to change
my controller to reflect that change.

156
00:12:15,070 --> 00:12:18,020
So I'll change it into UIView controller.

157
00:12:18,020 --> 00:12:21,540
But at this point, I've lost the
reference to the table view.

158
00:12:21,540 --> 00:12:26,060
So we'll need to add a property
to reestablish that connection.

159
00:12:26,060 --> 00:12:34,140
I'll go into the implementation file and make sure that I
synthesize the property and that I release the table view.

160
00:12:34,140 --> 00:12:40,910
Now, I just have to go back into interface
builder and reestablish these connections.

161
00:12:40,910 --> 00:12:48,040
So first, I want to make sure that the controller
references the table view using the new property.

162
00:12:48,040 --> 00:12:56,010
Also, I want to make sure that the controller references
the container view using the original view outlet.

163
00:12:56,010 --> 00:13:02,490
At this point, if I run the application, you should
see a banner view appear at the bottom of the screen.

164
00:13:02,490 --> 00:13:06,040
In this case, this is a fully functioning test ad.

165
00:13:06,040 --> 00:13:09,620
And that's really all there's to it.

166
00:13:09,620 --> 00:13:10,620
So just to summarize.

167
00:13:10,620 --> 00:13:13,860
What we did, is we added the iAd framework to the project.

168
00:13:13,860 --> 00:13:20,190
We modified our view hierarchy to leave room for the
banner view and then we readjusted any other connections.

169
00:13:20,190 --> 00:13:21,680
It's that simple.

170
00:13:21,680 --> 00:13:23,950
Now, handing back off to Wil.

171
00:13:23,950 --> 00:13:27,750
[ Applause ]

172
00:13:27,750 --> 00:13:28,660
>> Wil Turner: That's pretty great.

173
00:13:28,660 --> 00:13:32,220
You just add a view and boom you're making money.

174
00:13:32,220 --> 00:13:41,280
[Laughter] So you may have noticed when that banner
view first appeared, it was an empty white frame.

175
00:13:41,280 --> 00:13:48,260
So that frame is something we provide that tells our
users that this is an ad provided by the iAd network.

176
00:13:48,260 --> 00:13:52,940
And that's how we build trust with them because they
realize that that frame means that if I tap on this,

177
00:13:52,940 --> 00:13:58,290
I'm not going to leave the application,
I'll be right where I was when I'm done.

178
00:13:58,290 --> 00:14:03,740
And you also notice that after
slight delay, the ad appeared.

179
00:14:03,740 --> 00:14:06,430
So that leaps us into the banner view life cycle.

180
00:14:06,430 --> 00:14:12,330
What this means is we have to manage
connectivity and inventory changes.

181
00:14:12,330 --> 00:14:13,950
That sounds kind of scary.

182
00:14:13,950 --> 00:14:16,070
Let's see what that means.

183
00:14:16,070 --> 00:14:22,720
So ADBannerView may not always have ad content in it.

184
00:14:22,720 --> 00:14:27,590
Content comes from the iAd server.

185
00:14:27,590 --> 00:14:34,250
Network conditions as you all know are dynamic
and the server inventory is also dynamic.

186
00:14:34,250 --> 00:14:42,480
It's constantly changing and things are targeted
by the advertisers to reach certain audiences.

187
00:14:42,480 --> 00:14:47,770
So the banner view has two basic life cycle states.

188
00:14:47,770 --> 00:14:50,560
It's either loaded or not loaded.

189
00:14:50,560 --> 00:14:56,550
And let's look at a little diagram
of what that might look like.

190
00:14:56,550 --> 00:14:58,300
You start off, you create the banner view.

191
00:14:58,300 --> 00:14:59,750
There's no content.

192
00:14:59,750 --> 00:15:02,430
It makes a call to the server, loads its content.

193
00:15:02,430 --> 00:15:06,760
And then we cycle content automatically.

194
00:15:06,760 --> 00:15:11,040
At some point you, may run into a network or inventory error

195
00:15:11,040 --> 00:15:15,420
and then it later resolves itself
and you start loading content again.

196
00:15:15,420 --> 00:15:17,490
And as we mentioned we cycle content.

197
00:15:17,490 --> 00:15:25,980
So you get that first ad and it's displayed and after
a certain period of time we load a new ad for the user.

198
00:15:25,980 --> 00:15:29,170
It's not something that you have control over.

199
00:15:29,170 --> 00:15:31,390
We just manage all that for your.

200
00:15:31,390 --> 00:15:33,680
So you really don't have to worry about the cycling.

201
00:15:33,680 --> 00:15:38,760
All you have to worry about is
the state of loaded or not loaded.

202
00:15:38,760 --> 00:15:44,150
So the way we manage this is we implement
the ADBannerViewDelegate protocol

203
00:15:44,150 --> 00:15:46,310
in one of your controller objects.

204
00:15:46,310 --> 00:15:52,310
Most likely, you'll implement it in the
view controller that owns the banner view.

205
00:15:52,310 --> 00:15:55,650
There are two callbacks that are
associated with the content life cycle.

206
00:15:55,650 --> 00:16:01,740
The first is bannerViewDidLoadAd and you'll
get that the first time it loads an ad

207
00:16:01,740 --> 00:16:04,140
and you'll get it every time we cycle a new ad in.

208
00:16:04,140 --> 00:16:07,890
And this just tells you that you've got ad content.

209
00:16:07,890 --> 00:16:13,690
On the other hand you'll get
bannerViewdidFailToRecieveAdWithError

210
00:16:13,690 --> 00:16:16,620
and that means you don't have content.

211
00:16:16,620 --> 00:16:19,600
So network issues.

212
00:16:19,600 --> 00:16:21,720
These are mobile devices.

213
00:16:21,720 --> 00:16:23,760
The user is always on the go.

214
00:16:23,760 --> 00:16:25,290
The network is changing.

215
00:16:25,290 --> 00:16:32,730
They may go into a subway tunnel, into a building
with no connection, they may be still driving

216
00:16:32,730 --> 00:16:38,210
between cell phone areas and switch off one tower
into the other and that interrupts the connection.

217
00:16:38,210 --> 00:16:42,790
Ads require a network connection so
we have to get the ads from remote

218
00:16:42,790 --> 00:16:46,670
and then while the ad is running,
it has to talk back to the server.

219
00:16:46,670 --> 00:16:53,980
So if there's a poor network connection or a change in
network connection, the flow of ads may be interrupted.

220
00:16:53,980 --> 00:16:55,870
The other issue is the inventory issue.

221
00:16:55,870 --> 00:17:04,290
So ads are targeted and the demographic
or your application or filters you've set

222
00:17:04,290 --> 00:17:08,580
up to exclude things and I'll talk about that later.

223
00:17:08,580 --> 00:17:13,620
But these-- all these impact how the ads
are targeted by the server and it's possible

224
00:17:13,620 --> 00:17:20,420
that at some times there will be
an appropriate ad for you app.

225
00:17:20,420 --> 00:17:23,260
So no ads.

226
00:17:23,260 --> 00:17:25,680
Errors? They're not really errors.

227
00:17:25,680 --> 00:17:32,890
Yes, we're using a callback mechanism that has the
word error in it to communicate this message to you.

228
00:17:32,890 --> 00:17:36,830
But really, these are just part
of normal operating conditions.

229
00:17:36,830 --> 00:17:43,360
It sort of like memory warnings on the iPhone and, you
know, memory pressures are constantly changing and you have

230
00:17:43,360 --> 00:17:46,890
to be ready to release things and
then load them backup on demand.

231
00:17:46,890 --> 00:17:50,420
It's just part of how things function on the device.

232
00:17:50,420 --> 00:17:54,040
So what matters is how you respond to them.

233
00:17:54,040 --> 00:17:57,980
And that's where you have control over things.

234
00:17:57,980 --> 00:18:03,400
So when availability changes, remember that space has value.

235
00:18:03,400 --> 00:18:09,350
The way we arrived at this point in the first place
is that somebody said, "Wow, I've got some space."

236
00:18:09,350 --> 00:18:13,800
And somebody else says, "Hey, I'd love
to put some information on that space."

237
00:18:13,800 --> 00:18:15,800
Well, let's do a deal.

238
00:18:15,800 --> 00:18:18,120
So space has value.

239
00:18:18,120 --> 00:18:23,700
If you don't have ads, then you
should put that space to good use.

240
00:18:23,700 --> 00:18:26,290
What does that mean?

241
00:18:26,290 --> 00:18:30,820
Well, there's a very simple pattern
that we encourage you to adopt.

242
00:18:30,820 --> 00:18:34,000
Create your banner views offscreen.

243
00:18:34,000 --> 00:18:40,520
Wait for the callback that says it's loaded and then animate
it into position and then if you get another callback

244
00:18:40,520 --> 00:18:45,390
that says there's an error, just hide the
banner view or move it offscreen again.

245
00:18:45,390 --> 00:18:48,010
Now, I say move it offscreen.

246
00:18:48,010 --> 00:18:51,970
Important to keep in mind that you
don't want to take it out of its window.

247
00:18:51,970 --> 00:18:56,480
Just adjust its frame so it's positioned
somewhere that's not onscreen.

248
00:18:56,480 --> 00:19:00,650
If you take it out of the window
completely, remove from super view,

249
00:19:00,650 --> 00:19:02,680
then we'll think that, "Oh, you're done with that.

250
00:19:02,680 --> 00:19:04,150
You don't' want to cycle ads anymore."

251
00:19:04,150 --> 00:19:09,160
Because we don't want to send ads down
if they're not going to be visible.

252
00:19:09,160 --> 00:19:14,100
So just move it offscreen but keep it in at super view.

253
00:19:14,100 --> 00:19:21,490
So, Juan Carlos is going to take SeismicXML again and he's
going to update it so that it implements this pattern.

254
00:19:21,490 --> 00:19:28,120
So that when we first launched the app and there's
no ad you won't see the space put to poor use.

255
00:19:28,120 --> 00:19:29,110
>> Juan Carlos Jimenez: OK.

256
00:19:29,110 --> 00:19:34,650
So now that we've covered the life cycle and the
two delegate methods, I'm going to modify SeismicXML

257
00:19:34,650 --> 00:19:40,240
so that it only shows the banner view when the
banner view has notified me that it's ready to go.

258
00:19:40,240 --> 00:19:45,930
So the first thing I'll do is I'll add the import--
I'll add an import for the iAd main header file

259
00:19:45,930 --> 00:19:49,910
and then a property to reference the banner view.

260
00:19:49,910 --> 00:19:53,080
Again, I'll go into the implementation file and make sure

261
00:19:53,080 --> 00:19:58,170
that I synthesize the banner view
and that I release it on the alloc.

262
00:19:58,170 --> 00:20:03,270
I also want to make sure that I reset the
delegate to make sure that I don't have a crasher

263
00:20:03,270 --> 00:20:09,670
because the banner view is notifying
my controller when it's released.

264
00:20:09,670 --> 00:20:13,540
So, I'll go back into interface
builder and make the connections.

265
00:20:13,540 --> 00:20:18,520
So I'll make sure that the controller
references the banner view using the new outlet

266
00:20:18,520 --> 00:20:24,470
and that the controller becomes the banner view's delegate.

267
00:20:24,470 --> 00:20:33,280
OK. So now I'm ready to add the two delegate
methods that Wil was just taking about.

268
00:20:33,280 --> 00:20:39,460
First, I'll tackle the delegate
method that handles errors first.

269
00:20:39,460 --> 00:20:46,990
Now, for this, I'll add another
method called moveBannerViewOffscreen.

270
00:20:46,990 --> 00:20:53,180
What I want this method to do is to calculate a
frame so that it browses the table view to take

271
00:20:53,180 --> 00:20:57,820
up all the space available in the container.

272
00:20:57,820 --> 00:21:03,710
Then, I'll make sure that I'll
calculate a frame for the banner view

273
00:21:03,710 --> 00:21:09,090
so that it sits offscreen, in this
case, below the table view.

274
00:21:09,090 --> 00:21:13,360
Finally, I want to set these two
frames under respective views.

275
00:21:13,360 --> 00:21:17,200
And that should be all I need to do for this method.

276
00:21:17,200 --> 00:21:23,100
All I need to do now is call it
from the delegate error callback.

277
00:21:23,100 --> 00:21:28,340
Now this only takes me a part of way there.

278
00:21:28,340 --> 00:21:33,190
At this point, I'm hiding the banner view only when that
the banner view has notified me that there's an error.

279
00:21:33,190 --> 00:21:37,400
I still want to make sure that I hide
the banner view before it's ready to go.

280
00:21:37,400 --> 00:21:41,970
So I'll make another call to this method from viewDidLoadAd.

281
00:21:44,980 --> 00:21:49,500
And now, I can look at the case in which the
banner view has notified me that it's ready to go.

282
00:21:49,500 --> 00:21:55,030
So, I'll create another method
called moveBannerViewOnscreen.

283
00:21:55,030 --> 00:21:57,760
In this case, I want to do the opposite thing.

284
00:21:57,760 --> 00:22:04,200
Here, I want to calculate a frame so that the banner
view is able to sit at the bottom of the screen,

285
00:22:04,200 --> 00:22:11,270
taking into account the size of the container
and the size of the banner view itself.

286
00:22:11,270 --> 00:22:17,430
Then, I'll calculate a frame for the table view to
shrink it so that it leaves room for the banner view.

287
00:22:17,430 --> 00:22:24,390
Again, taking into account the size of the
container and the size of the banner frame.

288
00:22:24,390 --> 00:22:29,890
Finally, I want to set these two frames on their views,
but this time I'm going to do it slightly differently.

289
00:22:29,890 --> 00:22:35,150
This time, I'm going to wrap those calls
in an animation block so that the--

290
00:22:35,150 --> 00:22:40,130
so that both views animate into their
new frames smoothly and at the same time.

291
00:22:40,130 --> 00:22:43,930
And that should be all I have to do for this method.

292
00:22:43,930 --> 00:22:53,660
So now, I just have to call it--
oops, and launch the application.

293
00:22:53,660 --> 00:22:59,040
At this point, the banner view should slide up
from the bottom of the screen when it's ready.

294
00:22:59,040 --> 00:23:00,620
That's all we need to do.

295
00:23:00,620 --> 00:23:06,210
So just to recap, what we did is we registered
our controller as a delegate of the banner view.

296
00:23:06,210 --> 00:23:11,590
Made sure that we also connected to the banner view and
then we responded to the delegate methods accordingly

297
00:23:11,590 --> 00:23:19,080
so that we can hide the banner view when it's encountered
an error and that we show it only when it's ready to go.

298
00:23:19,080 --> 00:23:20,510
Now, back to Wil.

299
00:23:20,510 --> 00:23:26,040
[ Applause ]

300
00:23:26,040 --> 00:23:34,090
>> Wil Turner: OK so, we put the ad in the application
and we've learned how to use this space wisely so that

301
00:23:34,090 --> 00:23:39,350
if there aren't actually ads visible,
we use the space for some other purpose.

302
00:23:39,350 --> 00:23:43,620
But if they are visible, then we show them to the user.

303
00:23:43,620 --> 00:23:52,920
So to recap quickly about ADBannerViewDelegate, we can use
the banner view delegate for managing the ad content state.

304
00:23:52,920 --> 00:23:56,990
It tells you when you've got ad content and when you don't.

305
00:23:56,990 --> 00:24:03,280
And we recommend that you move your banner
view on and off the screen accordingly.

306
00:24:03,280 --> 00:24:09,740
And as a note, before releasing the banner
view, you should set its delegate to nil.

307
00:24:09,740 --> 00:24:13,260
This is a pattern you may be familiar
with in your UIWebView.

308
00:24:13,260 --> 00:24:17,770
And the reason for it is that the
framework sometimes has to hold

309
00:24:17,770 --> 00:24:21,510
on to the banner view while it's off talking to the network.

310
00:24:21,510 --> 00:24:28,770
And if your controller object who is the
delegate, releases it and then itself goes away.

311
00:24:28,770 --> 00:24:33,640
By the time we're finished with the network activity,
we're still holding the banner view and we might try

312
00:24:33,640 --> 00:24:37,690
to access the delegate at that point
because we don't know that it's gone away.

313
00:24:37,690 --> 00:24:44,360
So just remember, always set the banner
view delegate to nil before you release it.

314
00:24:45,830 --> 00:24:51,990
So now let's talk about multiple interface orientations.

315
00:24:51,990 --> 00:24:55,200
This is really a question of ad content sizes.

316
00:24:55,200 --> 00:25:02,170
So everything we've seen so far today
has been in a portrait user interface.

317
00:25:02,170 --> 00:25:06,080
But there are several different
ad sizes that are supportive.

318
00:25:06,080 --> 00:25:10,310
And ADBannerView manages the actual view size.

319
00:25:10,310 --> 00:25:18,630
The ad designers build their ad
campaigns around fixed standard sizes.

320
00:25:18,630 --> 00:25:22,210
For portrait, we use 320 x 50.

321
00:25:22,210 --> 00:25:26,370
For landscape, we use 480 x 32.

322
00:25:26,370 --> 00:25:30,440
Both of these work out to be about
10 percent of the screen size.

323
00:25:30,440 --> 00:25:37,520
So when you're using the banner
view, the configuration you may need

324
00:25:37,520 --> 00:25:42,830
to do is tell it what kind of sizes it's going to be using.

325
00:25:42,830 --> 00:25:49,450
Now, if your UI is only portrait or
only landscape, this is very simple.

326
00:25:49,450 --> 00:25:52,780
But if you're supporting both, it's still very simple.

327
00:25:52,780 --> 00:26:00,410
So the banner view needs to know all possible sizes
that it would be asked to support because it's going

328
00:26:00,410 --> 00:26:06,460
to ask the ad server to provide it with
content that can support both orientations.

329
00:26:06,460 --> 00:26:16,510
So that if the user changes the device, you can make a
seamless transition from one content state to the other.

330
00:26:16,510 --> 00:26:22,810
So we have a property called requiredContentSizeIdentifiers
and this is a set.

331
00:26:22,810 --> 00:26:29,720
And we have some constants that name
the specific sizes that are supported.

332
00:26:29,720 --> 00:26:33,160
And in this set, you just add all
the ones that you want to support.

333
00:26:33,160 --> 00:26:42,390
So what you're seeing here is this has been set up for a
UI that is going to support both portrait and landscape.

334
00:26:42,390 --> 00:26:45,720
If it were only portrait then it
will just be a set with one object.

335
00:26:45,720 --> 00:26:50,570
And if it were only landscape,
again, just a set with one object.

336
00:26:50,570 --> 00:26:54,710
The other thing is the current content size.

337
00:26:54,710 --> 00:27:02,230
So you've told the banner view it might support both of
these sizes but which one should it be supporting right now?

338
00:27:02,230 --> 00:27:03,320
That's the question.

339
00:27:03,320 --> 00:27:07,380
So we have a property called currentContentSizeIdentifier.

340
00:27:07,380 --> 00:27:13,480
And you'll set this to be one or
the other of these constants.

341
00:27:13,480 --> 00:27:20,300
It's worth noting that if you set the current
content size to a size that isn't actually included

342
00:27:20,300 --> 00:27:26,970
in the required sizes, we'll throw an exception because
you've told us to do something that's not possible.

343
00:27:26,970 --> 00:27:34,810
So set it up in front, configure the required
sizes and then set the current content size.

344
00:27:34,810 --> 00:27:43,080
And when you autorotate, you'll change the
currentContentSizeIdentifier to the new orientation.

345
00:27:46,350 --> 00:27:51,950
So you see, when the application
rotates, the main part of the app resizes

346
00:27:51,950 --> 00:27:55,700
and then the banner also resizes simultaneously.

347
00:27:55,700 --> 00:28:05,160
So view controller provides us very useful callback to
its subclasses which is called willAutorotatetoInterphase.

348
00:28:05,160 --> 00:28:12,640
And what this does is this takes place inside the
animation block which handles that entire transition.

349
00:28:12,640 --> 00:28:19,200
So anything you do, modifying your views,
their properties, their sizes, their alpha,

350
00:28:19,200 --> 00:28:24,970
anything you do inside this becomes
part of that larger animation block.

351
00:28:24,970 --> 00:28:28,060
So these animations will happen in sync.

352
00:28:28,060 --> 00:28:32,320
So what we do is we just look at
what the new orientation will be.

353
00:28:32,320 --> 00:28:36,010
We say, well, OK, we're going into landscape.

354
00:28:36,010 --> 00:28:42,800
We need to set the currentContentSizeIdentifier
to landscape identifier or vice versa.

355
00:28:43,910 --> 00:28:50,880
So once again, we'll take up SeismicXML for the
last time I promise and we'll see what it looks

356
00:28:50,880 --> 00:28:59,730
like to take this portrait-only app and not only support
autorotation but support the ads with both interfaces.

357
00:28:59,730 --> 00:29:06,390
>> Juan Carlos Jimenez: All right so
like Wil said, what we want to do first,

358
00:29:06,390 --> 00:29:13,420
is we want to set the requiredContentSizeIdentifiers
over the banner view to a list that

359
00:29:13,420 --> 00:29:20,770
or a set that includes both sizes,
in this case, 320 x 50 and 480 x 32.

360
00:29:20,770 --> 00:29:24,200
At this point, the banner view should be ready to go fetch

361
00:29:24,200 --> 00:29:31,250
over the network exclusively ads
that match both of these sizes.

362
00:29:31,250 --> 00:29:34,990
Now, what we want to do is we want
to make sure that this application

363
00:29:34,990 --> 00:29:38,680
or this controller, accepts any rotations, any orientations.

364
00:29:38,680 --> 00:29:46,910
So I'll use this method here that you're probably already
familiar with to return yes for any orientation changes.

365
00:29:46,910 --> 00:29:52,050
And then I'll use the method that Wil was
mentioning earlier to make my decision based

366
00:29:52,050 --> 00:29:54,500
on the orientation in which we're moving.

367
00:29:54,500 --> 00:29:57,210
So in the case of portrait, I want to make sure

368
00:29:57,210 --> 00:30:05,360
that I set the banner view's currentContentSizeIdentifier
to the constant that ends with 320 x 50.

369
00:30:05,360 --> 00:30:08,770
Otherwise, I'll assume that the orientation is landscape.

370
00:30:08,770 --> 00:30:13,510
So I will set the currentContentSizeIdentifier to 480 x 32.

371
00:30:13,510 --> 00:30:17,840
At this time, I should be able to run the application

372
00:30:17,840 --> 00:30:22,500
and see the banner view resize
itself when the orientation changes.

373
00:30:22,500 --> 00:30:29,590
Now, notice that there is a little space here
between the table view and the banner view.

374
00:30:29,590 --> 00:30:35,080
I am willing to bet that this is because
I forgot something in interface builder,

375
00:30:36,550 --> 00:30:41,040
probably, the autoresize mask of the table view.

376
00:30:41,040 --> 00:30:43,610
And sure enough, here it is.

377
00:30:43,610 --> 00:30:48,620
The bottom margin of my table view
is set to be a fixed bottom margin.

378
00:30:48,620 --> 00:30:58,050
So I am just going to make that into flexible so that the
table view can resize freely once the orientation changes.

379
00:30:58,050 --> 00:31:00,570
So let's try this again.

380
00:31:00,570 --> 00:31:04,590
This time, by changing the orientation,
I should see the banner view

381
00:31:04,590 --> 00:31:08,900
and the table view be flushed next
to each other in the right position.

382
00:31:08,900 --> 00:31:11,780
And that's all, really, there is to it.

383
00:31:11,780 --> 00:31:15,380
So just to summarize, the two things
I need to do is I need to make sure

384
00:31:15,380 --> 00:31:21,470
that the banner view has its requiredContentSizeIdentifiers
to a list that includes the values

385
00:31:21,470 --> 00:31:25,400
that match all the orientations
that we are going to be displaying.

386
00:31:25,400 --> 00:31:31,320
And then finally, I want to respond to the orientation
changes by setting the currentContentSizeIdentifiers

387
00:31:31,320 --> 00:31:35,470
of the banner view to a value that matches the orientation.

388
00:31:35,470 --> 00:31:36,330
And that's it.

389
00:31:36,330 --> 00:31:38,510
Back to you, Wil.

390
00:31:38,510 --> 00:31:43,150
[ Applause ]

391
00:31:43,150 --> 00:31:43,690
>> Wil Turner: OK.

392
00:31:43,690 --> 00:31:50,680
So we've added the ads to your application,
we have dealt with the content life cycles,

393
00:31:50,680 --> 00:31:56,860
so we're always maximizing our use of space, and
now, we've learned how to support autorotation.

394
00:31:56,860 --> 00:32:05,740
So the final thing that we need to talk about from
the technical side is how to respond to the actions.

395
00:32:05,740 --> 00:32:11,280
This is really a state management
and resource consumption problem.

396
00:32:11,280 --> 00:32:14,680
Let's say problem, but it's really quite simple.

397
00:32:14,680 --> 00:32:21,600
So, in the ad action, this is where the
user enters the rich media ad experience,

398
00:32:21,600 --> 00:32:26,250
they tap the banner, and they enter the iAd.

399
00:32:26,250 --> 00:32:34,540
So if you've looked at the APIs during the developer seed,
you may have noticed that it looks like there is some kind

400
00:32:34,540 --> 00:32:39,690
of actions that can be supported that would--
actually, would take you out of the application.

401
00:32:39,690 --> 00:32:44,210
The API allows that flexibility, but
we're not using it at this point.

402
00:32:44,210 --> 00:32:48,290
So right now, all the ads will
still keep you in your application,

403
00:32:48,290 --> 00:32:52,140
and there will be the iAd-rich media experience.

404
00:32:52,140 --> 00:32:55,970
So let's recap what this do.

405
00:32:55,970 --> 00:33:01,740
They combine emotion and interactivity,
and they don't leave the application.

406
00:33:01,740 --> 00:33:06,920
So when the user returns, they are
right where they were when they started.

407
00:33:06,920 --> 00:33:12,040
So your job is just to reduce activity.

408
00:33:12,040 --> 00:33:17,400
These ads are running in a separate process,
so they're not polluting your memory space.

409
00:33:17,400 --> 00:33:27,580
But they may need resources if you are looking at a Nissan
Video, or playing an interactive HTML5 game inside the ad,

410
00:33:27,580 --> 00:33:31,550
you're going to require some hardware
resources, maybe some network resources.

411
00:33:31,550 --> 00:33:38,780
You do not want your application to be in contention with
the ad, because right now, the user is seeing the ad.

412
00:33:38,780 --> 00:33:42,820
The ad is on top, and while your app is still running,

413
00:33:42,820 --> 00:33:45,860
it does not need to be doing anything
because the user is not looking at it.

414
00:33:45,860 --> 00:33:48,910
So you want to reduce your activity.

415
00:33:48,910 --> 00:33:54,450
When the ad starts, you should
pause any media you are displaying.

416
00:33:54,450 --> 00:34:00,500
And after all, the user's watching media in your app, they
will probably prefer that you pause it so they can, it's--

417
00:34:00,500 --> 00:34:04,150
you know, when they come back, they
can pick up where they left off.

418
00:34:04,150 --> 00:34:08,680
If you are doing a big download, you should
pause that as well because that is going

419
00:34:08,680 --> 00:34:14,100
to really hamper the ad's ability to
get its resources from the network.

420
00:34:14,100 --> 00:34:20,240
And if you are doing graphic intensive work, you should
pause that as well, because that is going to heat up the CPU

421
00:34:20,240 --> 00:34:25,290
and then the ad performance is
not going to be as great either.

422
00:34:25,290 --> 00:34:28,170
You are also going to save off
some minimal state information.

423
00:34:28,170 --> 00:34:33,370
Now, this is not the kind of state information
you save when you are being backgrounded,

424
00:34:33,370 --> 00:34:37,420
or if your apps is exiting, it is lightweight state.

425
00:34:37,420 --> 00:34:47,680
So it is just what you would need to return to some exact
moment, given that your app will never stop running.

426
00:34:47,680 --> 00:34:53,600
When the action completes, you resume
all of the activities you paused.

427
00:34:53,600 --> 00:35:00,050
And based on the lightweight state that you
saved, you will know exactly what to restore.

428
00:35:00,050 --> 00:35:08,110
So once again, we go back to ADBannerViewDelegate to give
us some insight into this user interaction life cycle.

429
00:35:08,110 --> 00:35:17,500
When the user initiates the action, your delegate will
get this callback that says, bannerViewActionShouldBegin.

430
00:35:17,500 --> 00:35:23,960
And then you will notice the second part of the
method says, has this bit about willLeaveApplication.

431
00:35:23,960 --> 00:35:26,710
And that is going to be No, for now.

432
00:35:26,710 --> 00:35:32,600
You app returns a Boolean from this method,
because you do have the power to say, "No,

433
00:35:32,600 --> 00:35:37,140
I do not want to allow the action to begin."

434
00:35:37,140 --> 00:35:40,950
You should not do that, because you
are saying, "No, don't give me money."

435
00:35:40,950 --> 00:35:49,320
OK. Sure, it is possible that your app may be doing
some really mission critical thing at this instant

436
00:35:49,320 --> 00:35:57,870
that it cannot possibly allow the user to go into, and
maybe it is OK just this once to say no, but I doubt it.

437
00:35:57,870 --> 00:36:00,510
It is there, but I do not think you need it.

438
00:36:00,510 --> 00:36:07,580
OK. So inside this method we are going through, we are
going to pause all of the activities we talked about.

439
00:36:07,580 --> 00:36:13,360
Now, the other side, when the user comes back, you will get
this bannerViewActionDidFinish, and then you can resume.

440
00:36:13,360 --> 00:36:20,840
It is worth noting that all the UIApplication
life cycle messages still take place.

441
00:36:20,840 --> 00:36:27,280
So willResignActive, if the user hits the Lock
button, or sets the device down and it sleeps,

442
00:36:27,280 --> 00:36:32,310
didResumeActive, willEnterBackground, etcetera.

443
00:36:32,310 --> 00:36:39,080
All of those life cycle messages are still delivered,
both as notifications and to your application delegate.

444
00:36:39,080 --> 00:36:43,190
And that is where your heavier duty
state saving should take place.

445
00:36:43,190 --> 00:36:45,880
In the bannerViewDelegateMethods, it is very lightweight.

446
00:36:45,880 --> 00:36:53,500
So now, we are going take a different
application, and this is a media application.

447
00:36:53,500 --> 00:36:56,140
It is also from our sample code library.

448
00:36:56,140 --> 00:37:04,170
And Juan Carlos is going to show you
how to handle the action appropriately.

449
00:37:04,170 --> 00:37:05,190
>> Juan Carlos Jimenez: OK.

450
00:37:05,190 --> 00:37:11,720
So this application, like Wil said, is an existing
sample application called iPhone Multichannel Mixer Test.

451
00:37:11,720 --> 00:37:16,730
And I've modified it a little bit so that
includes a banner ad in its interface.

452
00:37:16,730 --> 00:37:18,360
So let me show what it looks like.

453
00:37:18,360 --> 00:37:25,080
Now, for the purposes of this demo, we will
just be looking at this Play Audio button.

454
00:37:25,080 --> 00:37:33,730
And just to explain what it does, it plays an
audio loop, toggles an audio loop on and off.

455
00:37:33,730 --> 00:37:39,750
Now, pretend that the user's interacting with this
application, and they decide to click on this button.

456
00:37:39,750 --> 00:37:42,550
But immediately after that, they see
the ad, and it catches their eye.

457
00:37:42,550 --> 00:37:46,310
And so, they decide to click on that.

458
00:37:46,310 --> 00:37:58,530
So I do not know if you could hear it, but as I
clicked on the ad, there was an audio loop playing.

459
00:37:58,530 --> 00:38:06,410
This is less than-- this a less-than-great user experience,
especially if the ad had its own audio with a play.

460
00:38:06,410 --> 00:38:10,520
So I will make the changes on this application
so that it handles this case more appropriately.

461
00:38:10,520 --> 00:38:17,810
I have added all the delegate methods that we've
covered so far, and I am going to be looking

462
00:38:17,810 --> 00:38:22,080
at the first one that-- of the ones that Wil just mentioned.

463
00:38:22,080 --> 00:38:30,120
In this case, what I want to do is I want to make sure that
I store the state of the application so that I can pause--

464
00:38:30,120 --> 00:38:33,390
so that I can resume when the ad comes back.

465
00:38:33,390 --> 00:38:37,000
So in this case, this state really
just consists of whether or not--

466
00:38:37,000 --> 00:38:42,540
a Boolean that tells me whether or not the
audio was playing before the ad loaded.

467
00:38:42,540 --> 00:38:48,480
Then I want to respond by pausing
any activity that was going on.

468
00:38:48,480 --> 00:38:52,000
In this case, I just want to stop the audio.

469
00:38:52,000 --> 00:38:54,190
And finally, I want to return yes.

470
00:38:54,190 --> 00:39:00,430
I do not want to deny the user the
request for interacting with the ad.

471
00:39:00,430 --> 00:39:07,160
And so now, when the user dismisses the ad, my controller
will receive the bannerViewActionDidFinish message.

472
00:39:07,160 --> 00:39:10,180
In this case, I want to do the opposite thing.

473
00:39:10,180 --> 00:39:18,850
The first thing I want to do is I want to look at the state
of things before the banner ad loaded-- or I'm sorry--

474
00:39:18,850 --> 00:39:22,320
before the ad actually went into full screen.

475
00:39:22,320 --> 00:39:29,150
And then respond accordingly by restoring any
activities that were going on at the time.

476
00:39:29,150 --> 00:39:32,210
In this case, I just want to start the audio playback again.

477
00:39:32,210 --> 00:39:39,130
So if I run the application now, I should be
able to go through the same steps I did before.

478
00:39:39,130 --> 00:39:43,510
But this time, the audio should pause once I go into the ad.

479
00:39:43,510 --> 00:39:48,480
[ Pause ]

480
00:39:48,480 --> 00:39:51,880
I do not know if you could hear,
but the audio is now paused.

481
00:39:51,880 --> 00:39:56,520
And if I click on the Dismiss button,
the audio should resume.

482
00:39:56,520 --> 00:40:02,320
And that is really all we need to do in this case.

483
00:40:02,320 --> 00:40:07,360
So just to summarize, what we did is we made
sure that implemented the two delegate methods,

484
00:40:07,360 --> 00:40:12,660
we stored the state before we went into
the ad, and then paused any activity.

485
00:40:14,250 --> 00:40:22,430
The converse when the ad is dismissed, we want to look
at the state and restore any activity that resulted

486
00:40:22,430 --> 00:40:26,180
in being paused before the ad loaded,
and that's all there's to it.

487
00:40:26,180 --> 00:40:27,170
Back to you, Wil.

488
00:40:27,170 --> 00:40:31,520
[ Applause ]

489
00:40:31,520 --> 00:40:36,190
>> Wil Turner: We had to work our imagination a little
bit there to hear the audio, but I think you could see it

490
00:40:36,190 --> 00:40:42,960
from the state of the button, that things were changing
as we went into the ad, and then being restored properly.

491
00:40:42,960 --> 00:40:49,340
So responding to actions, saving off some light
state information, and pausing your activity,

492
00:40:49,340 --> 00:40:55,520
reducing your resource consumption while the ad is running,
and then picking up where you left off when you return.

493
00:40:55,520 --> 00:41:04,300
So let's talk about everything we've looked at in
using the iAd framework, putting ads in your app.

494
00:41:04,300 --> 00:41:10,010
You just add the ADBannerView to a
view controller managed hierarchy.

495
00:41:10,010 --> 00:41:17,150
Deal with the BannerView life cycle by implementing
the ADBannerViewDelegate callbacks to know

496
00:41:17,150 --> 00:41:23,480
when you've loaded an ad, when you don't have an ad,
and move your BannerView on or off screen appropriately,

497
00:41:23,480 --> 00:41:26,030
so you're getting the best view set of your screen.

498
00:41:26,030 --> 00:41:33,800
We support multiple interface orientations,
we manage the size changes for you,

499
00:41:33,800 --> 00:41:40,360
you just tell us which current content size identifier
to use, and configure your BannerView in advance

500
00:41:40,360 --> 00:41:44,060
so that it's set up to review requesting
the right kind of ads.

501
00:41:44,060 --> 00:41:51,660
And finally, respond to actions by using the
other ADBannerViewDelegate methods which tell you

502
00:41:51,660 --> 00:41:56,670
that the user has entered an action, and
that the user has finished an action,

503
00:41:56,670 --> 00:42:02,330
and just pause your activity there,
and resume it when they're done.

504
00:42:02,330 --> 00:42:07,140
So let's switch our mental gears a little bit
and get into the business side a little bit.

505
00:42:07,140 --> 00:42:09,680
Publishing with iAd.

506
00:42:09,680 --> 00:42:16,010
So we talked about publishers earlier because
that's what you are, you're publishers.

507
00:42:16,010 --> 00:42:21,240
You have space that you're going to sell to the iAd network.

508
00:42:21,240 --> 00:42:23,380
It all starts in iTunes Connect.

509
00:42:23,380 --> 00:42:32,300
We've expanded the iTunes Connect portal to have a
new iAd specific portal, and this is where you'll sign

510
00:42:32,300 --> 00:42:39,300
up to be a publisher, and then you'll manage each
of your applications that's actually using ads.

511
00:42:39,300 --> 00:42:43,590
Becoming a publisher has two steps, and they're very simple.

512
00:42:43,590 --> 00:42:49,090
The first is agreeing to the Paid App agreement,
and many of you may have already done that.

513
00:42:49,090 --> 00:42:54,900
If you've only done free apps, the Paid App agreement
is what sets us up to be able to cut you a check.

514
00:42:54,900 --> 00:42:58,570
I think that's important.

515
00:42:58,570 --> 00:43:03,830
The other part is the iAd agreement, and this is
specific to using iAd network, and it's just terms

516
00:43:03,830 --> 00:43:08,080
and conditions associated with
displaying the ads in your application.

517
00:43:08,080 --> 00:43:15,340
And in the iTunes Connect, you'll be able to
make both-- sign both of these agreements.

518
00:43:15,340 --> 00:43:17,320
And once you've done that, you're a publisher.

519
00:43:17,320 --> 00:43:21,920
And the next step is to configure your applications.

520
00:43:21,920 --> 00:43:26,630
So, iTunes Connect is going to show
you all of your current applications.

521
00:43:26,630 --> 00:43:31,790
Some of your apps may be live on the store,
and some of them may be in production.

522
00:43:31,790 --> 00:43:39,550
And the interface lets you go in and see if they're seeing
test ads, which is what ad-app center development will see,

523
00:43:39,550 --> 00:43:46,230
and lets you see what the revenue generation
is like, and we'll talk about that a bit more.

524
00:43:46,230 --> 00:43:50,290
Now, for any given application to be able to host adds,

525
00:43:50,290 --> 00:43:53,560
there's a little bit of configuration
that you have to do upfront.

526
00:43:53,560 --> 00:43:59,040
You basically need to say, "I want this
application to be eligible for ads."

527
00:43:59,040 --> 00:44:02,590
and then you get to tell us what
the target audience is like.

528
00:44:02,590 --> 00:44:08,420
We just need to know if that target audience for your
app is under 17 or not, because there are certain ads

529
00:44:08,420 --> 00:44:11,370
that we want to make sure don't go to minors.

530
00:44:11,370 --> 00:44:14,370
The other thing you can do is what we call exclusions.

531
00:44:14,370 --> 00:44:20,340
So you might not want your closest
competitors advertised in your app.

532
00:44:20,340 --> 00:44:21,640
That might not be great.

533
00:44:21,640 --> 00:44:28,690
So we'll allow you to exclude advertisements
based on keywords and URL's,

534
00:44:28,690 --> 00:44:32,000
and you can add as many of these as you want.

535
00:44:32,000 --> 00:44:39,190
But keep in mind, every exclusion you add
will impact the inventory available to you.

536
00:44:39,190 --> 00:44:47,990
So you might not want your competitor's ads in your app, but
you want to make sure you're still eligible for some ads.

537
00:44:47,990 --> 00:44:51,180
So don't get too crazy with the exclusions.

538
00:44:53,050 --> 00:45:01,570
So summarizing, configuring applications tells about
your target audience and set up any exclusions you want.

539
00:45:01,570 --> 00:45:06,540
And finally, the best part of all is monitoring the revenue.

540
00:45:06,540 --> 00:45:10,790
Sit back and watch the money roll in.

541
00:45:10,790 --> 00:45:17,080
So our interface will show you, and these are
just some members that got mocked up for this.

542
00:45:17,080 --> 00:45:19,480
So don't necessarily rely on this.

543
00:45:19,480 --> 00:45:24,650
But our interface will allow you to see what kind
of revenue you generate over the last seven days,

544
00:45:24,650 --> 00:45:30,240
even on a day-to-day basis, how hot
the activity is in your application.

545
00:45:30,240 --> 00:45:33,850
And we also provide you with a figure called the ECPM.

546
00:45:33,850 --> 00:45:38,210
So if you remember, CPM, that was the cost-per-mille,

547
00:45:38,210 --> 00:45:43,270
and that was if we were just going based
on impressions, what you'd be making.

548
00:45:43,270 --> 00:45:48,380
And that's what the ECPM, it's the effective cost-per-mille.

549
00:45:48,380 --> 00:45:53,640
So if the business model were just a
cost-per-mille model, ECPM is what you'd be making.

550
00:45:53,640 --> 00:46:02,900
And you'll notice that the revenue is higher than the
ECPM, because we're paying you also for the clicks.

551
00:46:02,900 --> 00:46:10,030
So everything we've covered today, integrating
ads with iAd, it starts off with the iAd network

552
00:46:10,030 --> 00:46:15,630
which presents rich media, high quality
ads and a great user experience.

553
00:46:15,630 --> 00:46:18,590
Using the iAd framework is easy.

554
00:46:18,590 --> 00:46:26,850
You just add the banners in, configure them,
handle the action, and the content life cycles.

555
00:46:26,850 --> 00:46:30,480
And for the business side, we use iTunes
Connect, which you're already familiar with.

556
00:46:30,480 --> 00:46:32,570
We just added one more piece to it.

557
00:46:32,570 --> 00:46:38,280
You go in, you register, configure
your apps, and monitor the revenue.

558
00:46:38,280 --> 00:46:43,950
So for more information about iAd,
you can contact Mark Malone.

559
00:46:43,950 --> 00:46:47,720
He is our Integration Technologies Evangelist.

560
00:46:47,720 --> 00:46:49,330
And you can also go to our documentation.

561
00:46:49,330 --> 00:46:54,590
We've got some great documentation that talks
about the framework, some conceptual overview,

562
00:46:54,590 --> 00:46:59,050
we have documentation for the publisher's
side and the iTunes portal.

563
00:46:59,050 --> 00:47:03,530
And you can also go on our Developer Forums
because our engineers are active on the forums,

564
00:47:03,530 --> 00:47:06,230
and we have a great community there for answering questions.

565
00:47:06,230 --> 00:47:11,630
So if you run into trouble, that can be your first stop.

566
00:47:11,630 --> 00:47:13,930
We have some related sessions.

567
00:47:13,930 --> 00:47:21,770
Tomorrow, we're going to talk in two back-to-back sessions
about creating the actual content of the ads themselves,

568
00:47:21,770 --> 00:47:27,620
and we provide a JavaScript framework
called iAd JS which really makes it easy

569
00:47:27,620 --> 00:47:32,170
to create these incredibly interactive-rich ads.

570
00:47:32,170 --> 00:47:35,800
And there'll also be a session
tomorrow, if you have questions

571
00:47:35,800 --> 00:47:39,160
or need to get more familiar with the iTunes Connect portal.

572
00:47:39,160 --> 00:47:43,270
That takes you through a lot of
the aspects of using the portal.

573
00:47:43,270 --> 00:47:44,500
Thanks a lot everybody.

574
00:47:44,500 --> 00:47:48,810
[ Applause ]

