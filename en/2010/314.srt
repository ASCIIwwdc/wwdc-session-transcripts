1
00:00:07,010 --> 00:00:09,070
>> Chris Espinosa: Good afternoon
everybody, I'm Chris Espinosa.

2
00:00:09,070 --> 00:00:18,050
I'm the Manager of the Xcode Core Tools team and welcome to
Flight 314, Building and Distributing Your App with Xcode 4.

3
00:00:18,050 --> 00:00:20,740
Please place your luggage under the seat in front of you

4
00:00:20,740 --> 00:00:27,520
and during this short 1-hour flight,
we are going to talk about 3 things.

5
00:00:27,520 --> 00:00:34,490
First, I want to let you know that in Xcode 4, you
can load and build and run the same projects you have

6
00:00:34,490 --> 00:00:38,110
in Xcode 3 and then take them back to Xcode 3.

7
00:00:38,110 --> 00:00:42,820
So even with this developer preview that
you have today, you can try Xcode 4 now.

8
00:00:42,820 --> 00:00:45,040
It installs right next to Xcode 3.

9
00:00:45,040 --> 00:00:49,860
You can open up your Xcode 3 projects and
you can take them back to Xcode 3 safely.

10
00:00:49,860 --> 00:00:54,040
So we haven't changed the project file
format, we haven't changed the build system,

11
00:00:54,040 --> 00:00:57,420
so you can try the new workflow
out and new systems out safely.

12
00:00:57,420 --> 00:00:58,380
[ Applause ]

13
00:00:58,380 --> 00:01:09,560
The first thing we've tried to do with Xcode
is to make the simple things more obvious,

14
00:01:09,560 --> 00:01:15,690
things like setting build settings or setting the deployment
target of your application we're trying to put right

15
00:01:15,690 --> 00:01:21,170
up front so that things that you do commonly
and you need to do regularly are right up there.

16
00:01:21,170 --> 00:01:26,740
But we know projects get complex, so we've tried to
make sure that complex things are now manageable,

17
00:01:26,740 --> 00:01:32,180
and you'll see through this presentation today how
we've taken the complexity that is grown in Xcode

18
00:01:32,180 --> 00:01:39,290
and the complexity that grows in your projects and
given you some great tools to manage that complexity.

19
00:01:39,290 --> 00:01:44,140
The 2 most important ones that we're going to be going
through today, you saw little of these in the State

20
00:01:44,140 --> 00:01:50,730
of the Union on Monday, you saw some of them in the
introduction to Xcode 4 session yesterday, are schemes.

21
00:01:50,730 --> 00:01:53,990
Schemes help you simplify and cut through the matrix

22
00:01:53,990 --> 00:01:59,300
of your targets times your configurations
times your executables times your architectures

23
00:01:59,300 --> 00:02:05,690
and just designated this is what I do, this is what
I want to do all the time and have a one-click access

24
00:02:05,690 --> 00:02:10,870
to a small number of things that you
do regularly, very powerful construct.

25
00:02:10,870 --> 00:02:18,470
Second thing is workspaces: workspaces let you organize
work in multiple projects and associate projects together

26
00:02:18,470 --> 00:02:24,630
on an ad hoc basis or on a team basis
without having to change the project itself

27
00:02:24,630 --> 00:02:28,730
so you can have an archive project, you can throw
it into a workspace, do all sorts of things,

28
00:02:28,730 --> 00:02:31,610
do it in the workspace and then
it doesn't change the project.

29
00:02:31,610 --> 00:02:33,490
That lets you experiment safely.

30
00:02:33,490 --> 00:02:39,650
It lets you share work among people and it lets you
combine projects together in ways you couldn't do before.

31
00:02:39,650 --> 00:02:46,140
So what you are going to learn today is how to use the Xcode
4 user interface to construct and edit projects and targets.

32
00:02:46,140 --> 00:02:49,670
There are some new things we got for
project management and target management

33
00:02:49,670 --> 00:02:51,110
in Xcode 4 we're going to take you through.

34
00:02:51,110 --> 00:02:56,700
We're going to learn how to construct schemes,
to build, launch, and archive your applications,

35
00:02:56,700 --> 00:03:01,670
and how to build workspaces that relate
multiple projects together and share schemes

36
00:03:01,670 --> 00:03:04,940
that you create in them with other people on your team.

37
00:03:04,940 --> 00:03:06,240
So, let's get started.

38
00:03:06,240 --> 00:03:14,040
Before I go into what's new in Xcode 4, I have to give you
some common grounding on what I'm talking about in Xcode 3,

39
00:03:14,040 --> 00:03:17,470
some of the core words and concepts, mainly projects.

40
00:03:17,470 --> 00:03:18,810
A project is simply a bag.

41
00:03:18,810 --> 00:03:24,590
It's a bag of references to source files and header
files, some groups that are artificial constructs

42
00:03:24,590 --> 00:03:27,520
that organize the files in the user interface for you.

43
00:03:27,520 --> 00:03:33,110
And then these things called targets, you
never build a project, you build a target, OK?

44
00:03:33,110 --> 00:03:39,450
The target is the thing that contains the instruction
for turning your sources into your application,

45
00:03:39,450 --> 00:03:45,740
and they are the heart of Xcode, and we're going to
give you more and better access to targets in Xcode 4.

46
00:03:45,740 --> 00:03:50,800
In a target, there are references to the source files
in the project and the target contains build phases,

47
00:03:50,800 --> 00:03:56,800
and the build phases say first compile my
code, second link it, third copy my nib files,

48
00:03:56,800 --> 00:04:00,590
fourth package it all together and then copy it on to disks.

49
00:04:00,590 --> 00:04:04,570
Targets are the same in Xcode 4 as they are in Xcode 3.

50
00:04:04,570 --> 00:04:07,780
They may seem to you to be buried a level deeper,

51
00:04:07,780 --> 00:04:13,650
but that's because some more powerful
constructs are being layered on top of them.

52
00:04:13,650 --> 00:04:19,900
Now, one of the things that goes across
targets are things called build settings.

53
00:04:19,900 --> 00:04:28,920
Build settings control how each build phase operates,
how code files are compiled, how resources are copied,

54
00:04:28,920 --> 00:04:33,720
and build settings are combined into
these chunks called configurations.

55
00:04:33,720 --> 00:04:41,040
You have one configuration of build settings to debug
and you have a different clump of build settings,

56
00:04:41,040 --> 00:04:44,110
a different configuration, for releasing your code.

57
00:04:44,110 --> 00:04:48,180
And managing all of these, juggling all
the acts, it is really difficult sometimes

58
00:04:48,180 --> 00:04:52,230
because you have your debug configuration, your
release configuration, your application target,

59
00:04:52,230 --> 00:04:55,610
your framework target, your build all aggregate target.

60
00:04:55,610 --> 00:04:59,780
You have architectures for the Mac, you have
architectures for the iPhone and the iPad and iOS.

61
00:04:59,780 --> 00:05:07,590
It gets really complicated, there are 2 big changes
in the Xcode 4 user interface that let you manage

62
00:05:07,590 --> 00:05:09,270
that complexity, and we're going to show them to you.

63
00:05:09,270 --> 00:05:15,520
First is that what used to be the groups and
files tree has been split into several navigators

64
00:05:15,520 --> 00:05:22,740
and the main navigator is the project navigator, and
that's the one where you get at dragging and dropping

65
00:05:22,740 --> 00:05:25,680
and moving all of your files among groups.

66
00:05:25,680 --> 00:05:31,090
The second one is that instead of having all
these smart groups in that group in file tree,

67
00:05:31,090 --> 00:05:39,880
we've given project management and target management its
own full-sized editor, a tabbed editor that shows you all

68
00:05:39,880 --> 00:05:45,880
of the expanse of all of your options in your project in
the target in the full real estate of the editor instead

69
00:05:45,880 --> 00:05:49,570
of trying to cram it into a tiny little inspector.

70
00:05:49,570 --> 00:05:53,550
Or rather than talking about that, I think
the best way to do it is show it to you,

71
00:05:53,550 --> 00:05:56,510
so here is Rick Ballard to take you through the first demo.

72
00:05:56,510 --> 00:06:01,540
[ Applause ]

73
00:06:01,540 --> 00:06:02,990
>> Rick Ballard: Hi, I'm Rick Ballard.

74
00:06:02,990 --> 00:06:04,940
I'm an engineer on the Xcode team.

75
00:06:04,940 --> 00:06:11,310
Today, I'm going to demonstrate how easy it is to take your
existing projects that you have been working with in Xcode 3

76
00:06:11,310 --> 00:06:14,840
and dive right into working with them in Xcode 4.

77
00:06:14,840 --> 00:06:21,330
Today, I'm going to start with the popular open source
project called Colloquy, which is an IRC client for the Mac.

78
00:06:21,330 --> 00:06:25,950
And this is the same project that they
used to maintain their projects in Xcode 3.

79
00:06:25,950 --> 00:06:29,350
I'm going to go ahead and just open it right up in Xcode 4,

80
00:06:29,350 --> 00:06:35,310
it will load and you can see the Colloquy project is
represented in the upper left-hand corner with its groups

81
00:06:35,310 --> 00:06:38,780
and files underneath, just like in Xcode 3.

82
00:06:38,780 --> 00:06:42,920
Now you notice that this project
has some cross-project references.

83
00:06:42,920 --> 00:06:46,470
I can zoom in on this.

84
00:06:46,470 --> 00:06:51,070
In Xcode 3, cross-project references
would let you set up target dependencies

85
00:06:51,070 --> 00:06:54,370
between the targets across multiple projects.

86
00:06:54,370 --> 00:06:59,800
But to do anything beyond that, you would have to
open up each project separately in its own window,

87
00:06:59,800 --> 00:07:05,540
work with it pretty separately, and you couldn't search
across them or really do much with them at the same time.

88
00:07:05,540 --> 00:07:07,870
In Xcode 4, that's all changed.

89
00:07:07,870 --> 00:07:14,590
In Xcode 4, a cross-project reference gives you full
access to the contents of every project you can reach

90
00:07:14,590 --> 00:07:20,500
and you can edit, build, and work with all of the
contents of all your projects together just as easily

91
00:07:20,500 --> 00:07:23,970
as you can with the project that you will open.

92
00:07:23,970 --> 00:07:27,220
That includes searching across all your projects.

93
00:07:27,220 --> 00:07:32,160
It includes filtering across all
of your projects, very easy.

94
00:07:32,160 --> 00:07:39,080
Now in Xcode 3, if you want to work with the
settings of your project or one of your targets,

95
00:07:39,080 --> 00:07:43,390
you'd open up an inspector on that
project and work with its settings there.

96
00:07:43,390 --> 00:07:45,660
But in Xcode 4, we've got all the space.

97
00:07:45,660 --> 00:07:51,580
It's really easy, you just select your project and you get
a full-sized editor for that project in all the targets

98
00:07:51,580 --> 00:07:56,200
that it contains, just like any other kind of editor.

99
00:07:56,200 --> 00:07:59,860
[ Applause ]

100
00:07:59,860 --> 00:08:06,560
This is the Project Info tab, and this is where you'll find
some of the most common central settings for your project.

101
00:08:06,560 --> 00:08:11,190
You'll notice that we've added a slider here
for the deployment target of your product

102
00:08:11,190 --> 00:08:17,390
that lets you easily set the minimum operating
system version that your products will run on.

103
00:08:17,390 --> 00:08:20,850
We've also got a configuration section here.

104
00:08:20,850 --> 00:08:26,080
Now, if you've ever worked with Xcode configuration
settings files, you know that they can be incredibly useful

105
00:08:26,080 --> 00:08:32,660
for organizing and unifying build settings across
multiple targets, configurations, projects, et cetera.

106
00:08:32,660 --> 00:08:37,430
But sometimes, managing which target or project
has which configuration settings file set

107
00:08:37,430 --> 00:08:42,540
and which configuration can be a bit cumbersome and
you can make a mistake and leave one off somewhere.

108
00:08:42,540 --> 00:08:47,010
So, we decided we should make this a lot easier
in Xcode 4 and we give you central access

109
00:08:47,010 --> 00:08:51,650
to the configuration settings files of all the
targets in your project for this project right

110
00:08:51,650 --> 00:08:56,170
in one place across all your configurations.

111
00:08:56,170 --> 00:09:01,100
The Project Info tab is also where you'll
find localizations now so you can easily see

112
00:09:01,100 --> 00:09:06,350
which localizations your project is set up to support,
how many localized files you have for each localization,

113
00:09:06,350 --> 00:09:10,360
and you can easily add and remove new
localizations that you want to support.

114
00:09:10,360 --> 00:09:14,560
So we think that you'll find that centralizing everything

115
00:09:14,560 --> 00:09:17,970
in a project editor gives us a lot
more space and a lot more room to work.

116
00:09:17,970 --> 00:09:19,260
What about build settings?

117
00:09:19,260 --> 00:09:21,900
Well, let's take a look.

118
00:09:21,900 --> 00:09:24,700
If you've worked with build settings
much in Xcode 3 in the inspector,

119
00:09:24,700 --> 00:09:29,370
I think you'll find that our new build
settings editor gives you a lot more power

120
00:09:29,370 --> 00:09:31,370
and makes it a lot easier to work with your settings.

121
00:09:31,370 --> 00:09:34,500
Having all this space makes a big difference.

122
00:09:34,500 --> 00:09:37,150
So you normally start out in basic mode up here.

123
00:09:37,150 --> 00:09:40,400
You can see that there's a basic in all toggles.

124
00:09:40,400 --> 00:09:46,920
Basic shows you just the most commonly needed
frequently accessed settings for your project.

125
00:09:46,920 --> 00:09:50,410
You can easily navigate by category
just like you could in Xcode 3,

126
00:09:50,410 --> 00:09:56,640
and you can switch to see all build
settings if you need to, or you can filter.

127
00:09:56,640 --> 00:10:05,630
And if you want to know more about a setting,
you can select it, bring up Quick Help.

128
00:10:06,840 --> 00:10:11,230
Or if you want to work with a bunch of settings
quickly, you need to find out what everything is.

129
00:10:11,230 --> 00:10:16,470
You can open up the Inspectors and there's a
Quick Help inspector that will also tell you

130
00:10:16,470 --> 00:10:18,060
about the setting that you're looking at.

131
00:10:18,060 --> 00:10:21,500
So in this case, we're looking at the
compiler version, and it tells us what it is

132
00:10:21,500 --> 00:10:25,290
and what the underlying build setting reference,
which shows up as an environment variable

133
00:10:25,290 --> 00:10:29,760
in your Run Script phases, is to refer to the setting.

134
00:10:29,760 --> 00:10:34,090
Now you notice that just like in Xcode
3, we have build setting conditions.

135
00:10:34,090 --> 00:10:38,370
Here you can set a different value for
this build setting for each architecture

136
00:10:38,370 --> 00:10:41,290
that this project supports, if you so choose.

137
00:10:41,290 --> 00:10:46,560
But you may also notice that in Xcode 3, we have
this configuration pop-up for searching back

138
00:10:46,560 --> 00:10:50,150
and forth between release and debug,
and that's nowhere to be seen here.

139
00:10:50,150 --> 00:10:54,840
Well, sometimes it was a pain when you had to switch
back and forth to compare your build setting values

140
00:10:54,840 --> 00:11:00,890
and we decided, hey, configuration is just another
type of conditional, so let's make it a conditional.

141
00:11:00,890 --> 00:11:05,800
If I click the Plus button, I can see the
values for both my configurations side

142
00:11:05,800 --> 00:11:08,360
by side at the same time without any switching.

143
00:11:08,360 --> 00:11:08,740
[ Applause ]

144
00:11:08,740 --> 00:11:17,910
And you notice if I change the value for one of these
conditionals, it will go ahead and show me the value

145
00:11:17,910 --> 00:11:23,120
that will be used for each combination
of conditions in my project.

146
00:11:23,120 --> 00:11:28,900
So it makes it really easy to just glance over and
see what's going to be used under what circumstances.

147
00:11:28,900 --> 00:11:32,940
Now we've got a lot of space here, in
fact I can make it give me even more space

148
00:11:32,940 --> 00:11:35,090
by turning off the inspector navigator.

149
00:11:35,090 --> 00:11:37,310
What else could we do with that kind of space?

150
00:11:37,310 --> 00:11:41,780
Well, one thing that people like to do a lot is
compare the settings across through different targets,

151
00:11:41,780 --> 00:11:45,360
try and keep things in sync, make sure they
have the right things in the right places.

152
00:11:45,360 --> 00:11:50,400
So, you'll notice that if I just select multiple
targets here, I actually get a column for each target

153
00:11:50,400 --> 00:11:54,890
and I can easily compare setting
values right across all my targets.

154
00:11:54,890 --> 00:11:58,920
[ Applause ]

155
00:11:58,920 --> 00:12:00,650
I can make this even easier if I want.

156
00:12:00,650 --> 00:12:04,450
You probably are used to switching back and
forth between your project level settings

157
00:12:04,450 --> 00:12:07,960
and your target level settings and
making sure you know what set where.

158
00:12:07,960 --> 00:12:11,250
We've got this new levels mode, you
can toggle between combined and levels

159
00:12:11,250 --> 00:12:13,270
and we've been looking at combined so far.

160
00:12:13,270 --> 00:12:20,340
But if I switched to levels, it will show me the build
setting values for all levels in my project side by side.

161
00:12:20,340 --> 00:12:26,100
So in the right, I have the default settings that
are inherited, then the project level settings,

162
00:12:26,100 --> 00:12:28,540
and then the settings for both of
the targets that I have selected.

163
00:12:28,540 --> 00:12:33,850
You'll notice that there are these little
green boxes or instance setting values.

164
00:12:33,850 --> 00:12:39,240
The green box tells you at what level the actual
value that's going to be used for that setting came

165
00:12:39,240 --> 00:12:41,520
from so you can easily glance over and see

166
00:12:41,520 --> 00:12:45,330
where your setting values are currently set,
where they should be updated, et cetera.

167
00:12:45,330 --> 00:12:48,820
We think you'll find this much,
much easier and a real big help

168
00:12:48,820 --> 00:12:52,030
when you're managing complex projects
and lots of those settings.

169
00:12:52,030 --> 00:12:59,740
The project editor is also where you'll
find your build rules and your build phases.

170
00:12:59,740 --> 00:13:05,050
So build phases are the ordered set of steps
that will be executed when you build the target.

171
00:13:05,050 --> 00:13:09,990
In Xcode 4, we moved your target dependencies
into the build phases, so these are the targets

172
00:13:09,990 --> 00:13:15,960
that will be built first whenever you build this target,
and then there are other phases like compiling the sources

173
00:13:15,960 --> 00:13:21,040
of this target, linking with the libraries
that it links against, and in this case,

174
00:13:21,040 --> 00:13:25,560
a bunch of Copy Resources phases and Run Script phases.

175
00:13:25,560 --> 00:13:29,970
In Xcode 4, we've added the ability to
filter across all your build phases.

176
00:13:29,970 --> 00:13:31,650
This can be really, really helpful.

177
00:13:31,650 --> 00:13:38,200
If you search for something, it will show you
everywhere in a build phase that it finds a match.

178
00:13:38,200 --> 00:13:45,090
You'll notice too that whenever I go to add something
like say I go to add a new library, I get a really handy--

179
00:13:45,090 --> 00:13:51,550
give it one moment-- really handy sheet showing me all
of my available frameworks and libraries in this case,

180
00:13:51,550 --> 00:13:57,330
and I can filter and easily find what I'm looking for
and add it with a quick little button, very, very easy.

181
00:13:57,330 --> 00:14:04,950
Perhaps the most useful demonstration of why it's nice to
have all these extra space now comes with Run Script phases.

182
00:14:04,950 --> 00:14:07,610
In Xcode 3, you had to edit your
scripts in a little inspector,

183
00:14:07,610 --> 00:14:12,230
but in Xcode 4 we give you a full-size
source editor with syntax coloring

184
00:14:12,230 --> 00:14:16,070
and line numbers for editing your Run Script phases.

185
00:14:16,070 --> 00:14:18,120
[ Applause ]

186
00:14:18,120 --> 00:14:24,630
So we think you'll find this is all a big help when
you're configuring your projects and we hope you like it.

187
00:14:24,630 --> 00:14:25,880
Back to you, Chris.

188
00:14:25,880 --> 00:14:31,560
[ Applause ]

189
00:14:31,560 --> 00:14:33,290
>> Chris Espinosa: Thank you, Rick.

190
00:14:33,290 --> 00:14:40,070
We've taken great pains to try to improve some of the
things that were suboptimal about working with Xcode 3

191
00:14:40,070 --> 00:14:48,160
with multiple projects, with multiple targets, with multiple
build configurations, and the matrix that those provide

192
00:14:48,160 --> 00:14:54,050
without really changing the underlying conceptual
model, and we've got pretty far with that.

193
00:14:54,050 --> 00:14:59,170
But there is something else we need to
do, because working with a single project

194
00:14:59,170 --> 00:15:02,340
or dependent projects was just far too cumbersome.

195
00:15:02,340 --> 00:15:09,580
You had to go too many places and what people want is to
make an overall program that declares what they want to do

196
00:15:09,580 --> 00:15:12,030
with all these projects rather than going in fiddling

197
00:15:12,030 --> 00:15:17,140
with all the projects themselves,
and that's why we created schemes.

198
00:15:17,140 --> 00:15:20,970
The fundamental problem is that when you start a project,

199
00:15:20,970 --> 00:15:26,340
it seems so easy because you have one
target that builds your application.

200
00:15:26,340 --> 00:15:30,620
And then over time, you might add
a library that that project uses.

201
00:15:30,620 --> 00:15:37,110
And then maybe you have a helper application or some
other targets in your project, but it's still manageable.

202
00:15:37,110 --> 00:15:42,400
And of course, you usually just build the debug
configuration, and then of course you have

203
00:15:42,400 --> 00:15:48,070
to build a release configuration that's optimized and
has some special post processing in order to deploy it,

204
00:15:48,070 --> 00:15:52,150
and you're getting to get this proliferation and
this is why you have so many different windows

205
00:15:52,150 --> 00:15:54,430
to go through in so many different modes.

206
00:15:54,430 --> 00:15:59,950
Then of course, Apple invents another architecture
to port to and then another architecture to port to

207
00:15:59,950 --> 00:16:05,980
and another architecture to port to, and all of a
sudden we've got this unmanageable matrix of all

208
00:16:05,980 --> 00:16:10,430
of these combinations and then we go and give
you a completely different platform that you have

209
00:16:10,430 --> 00:16:14,990
to port the whole mess to, and this is beyond control.

210
00:16:14,990 --> 00:16:18,770
This was actually my feature slide
last year, now it's my bug slide.

211
00:16:18,770 --> 00:16:21,130
[ Laughter ]

212
00:16:21,130 --> 00:16:30,120
The feature we introduced last year was this thing called
the overview pop-up that let you pick your overriding SDK,

213
00:16:30,120 --> 00:16:36,650
your architecture, your target, your executable,
and your configuration all in the same pop-up.

214
00:16:36,650 --> 00:16:38,420
We thought that was a great idea.

215
00:16:38,420 --> 00:16:45,810
But what happened was that when you get so
many of these things, it just goes off the end.

216
00:16:45,810 --> 00:16:52,810
And frankly, the times when you're going to use
any particular configuration, it approaches zero.

217
00:16:52,810 --> 00:16:56,550
There are 2 or 3 of those combinations
that you're going to use all the time

218
00:16:56,550 --> 00:17:01,300
and the rest are either completely
nonfunctional or dangerous to use.

219
00:17:01,300 --> 00:17:08,690
So we wanted to give you the control to just pick
the things you need to do and put them in that menu.

220
00:17:08,690 --> 00:17:17,320
What happens with schemes is that you pick a combination
of targets and configurations and places you're going

221
00:17:17,320 --> 00:17:21,590
to run things, and you designate them
as scheme to put in the Schemes menu.

222
00:17:21,590 --> 00:17:29,630
So for example, if my build and debug cycle means I need
to build all of my targets for the i386 architecture

223
00:17:29,630 --> 00:17:33,680
in the debug configuration, I'll make one scheme for that.

224
00:17:33,680 --> 00:17:39,470
And then when I need to ship it, if I just need to
build my application target in my release configuration

225
00:17:39,470 --> 00:17:43,580
for all architectures, I'll make a second scheme for that.

226
00:17:43,580 --> 00:17:47,780
And then there are some variations on where I'm
actually going to run it, but that's all I need.

227
00:17:47,780 --> 00:17:54,440
I don't need a separate entry in the matrix for every access
and I don't need a separate entry for every combination.

228
00:17:54,440 --> 00:17:59,240
And even better, your first scheme
is free, we make it for you.

229
00:17:59,240 --> 00:18:08,750
When you open up an Xcode 3 project in Xcode 4,
Xcode 4 scans your project and looks for targets

230
00:18:08,750 --> 00:18:15,910
that have executables associated with them or
are not dependent, dependencies of other targets

231
00:18:15,910 --> 00:18:19,890
and they're therefore are top-level
entities that need to be built themselves.

232
00:18:19,890 --> 00:18:24,770
And we looked at all the combinations and
create schemes in the scheme menu for you.

233
00:18:24,770 --> 00:18:31,110
So we take each combination of a target and
executable or a top-level standalone target,

234
00:18:31,110 --> 00:18:36,100
and we put them into the Scheme menu
when you open the project in Xcode 4.

235
00:18:36,100 --> 00:18:43,270
Then, we look at the base SDK, the deployment
target, and the executables associated with it,

236
00:18:43,270 --> 00:18:46,360
and we create things called destinations.

237
00:18:46,360 --> 00:18:53,170
Destinations are the places that you build your product
for and the places where you're going to launch to.

238
00:18:53,170 --> 00:19:01,500
So for Mac OS X applications for example,
if you have i386 and x86 64 architectures,

239
00:19:01,500 --> 00:19:06,670
then we'll create separate destinations for
all of your schemes for each one of those,

240
00:19:06,670 --> 00:19:12,080
and then you can just switch back and forth between
Intel, Intel 64-bit and it will build and launch

241
00:19:12,080 --> 00:19:16,140
for that combination when you pick
that scheme from the Scheme menu.

242
00:19:16,140 --> 00:19:23,980
Similarly, if you're building iOS applications, we look
not only at the SDK and the architecture but we also look

243
00:19:23,980 --> 00:19:29,330
at whether you're building for the simulator
or for which particular device that happens

244
00:19:29,330 --> 00:19:32,070
to be plugged in that you're building for.

245
00:19:32,070 --> 00:19:38,400
So, in your Scheme menu, when you have devices configured,
you may see some destinations for your scheme that are

246
00:19:38,400 --> 00:19:43,910
for the simulator, and you may see some destinations
that are for a particular device that happens

247
00:19:43,910 --> 00:19:46,170
to be configured, provisioned, and connected.

248
00:19:46,170 --> 00:19:56,170
So the Scheme menu gives you all of the choices that all
those 5 axis of base-- the override SDK, the architecture,

249
00:19:56,170 --> 00:20:00,950
the target, the configuration and the executable down to

250
00:20:00,950 --> 00:20:07,050
which device you're going to launch
on, all in one short menu.

251
00:20:07,050 --> 00:20:16,420
Now, as Anders went through yesterday there are
three parts of every scheme: build, test, and launch.

252
00:20:16,420 --> 00:20:21,540
These are the three steps the scheme goes
through when you pick it from the Run menu

253
00:20:21,540 --> 00:20:25,680
or the Build menu or the Test menu or the Archive menu.

254
00:20:25,680 --> 00:20:29,140
For the Archive menu, there's a special
scheme called the Distribution Scheme,

255
00:20:29,140 --> 00:20:34,150
which instead of running your application,
copies it of somewhere so that you can upload it,

256
00:20:34,150 --> 00:20:38,350
store, or save it off for future reference.

257
00:20:38,350 --> 00:20:42,860
Now, in each part of the scheme, each part
of the scheme does something different.

258
00:20:42,860 --> 00:20:50,330
The build part does what happens when you build a
target in Xcode 3, it just goes through and performs all

259
00:20:50,330 --> 00:20:54,970
of the build phases of the targets
associated with that scheme.

260
00:20:54,970 --> 00:20:59,820
There's a new test action, which
will perform tests on your target.

261
00:20:59,820 --> 00:21:08,490
It's not fully fleshed out right now, but the intent
is that you can have build, built-in test or build,

262
00:21:08,490 --> 00:21:12,020
test and run, or test and run as separate action.

263
00:21:12,020 --> 00:21:16,620
So, if you want to just build all the time during
your build cycle and periodically decide the tests,

264
00:21:16,620 --> 00:21:22,620
you can do that by preconfiguring it in your scheme and
then just picking what you want to do from the menu.

265
00:21:22,620 --> 00:21:27,110
And then finally, the launch action
determines how you launch the executable,

266
00:21:27,110 --> 00:21:32,370
whether you launch it under the debugger, whether
you want break points turned on or off, et cetera.

267
00:21:33,710 --> 00:21:36,180
For distribution scheme, it's basically the same thing.

268
00:21:36,180 --> 00:21:42,240
Except instead of launching, what you get to do is to
determine which build products to copy, how to copy them,

269
00:21:42,240 --> 00:21:47,170
and where to copy them to, to save
them off for future reference.

270
00:21:47,170 --> 00:21:52,700
Now, if you want to create your own scheme,
you get a lot of control over what goes in it.

271
00:21:52,700 --> 00:21:56,790
You get to look at all of those axes and pick individually.

272
00:21:56,790 --> 00:22:02,560
So for example, if I got these configurations
by those targets and I'm building a new scheme,

273
00:22:02,560 --> 00:22:05,650
first thing I need to do is figure out what I want to build.

274
00:22:05,650 --> 00:22:13,550
So I pick my configuration, and then I pick which
targets I want to build and it'll build those targets

275
00:22:13,550 --> 00:22:18,760
and they'll build all the dependencies that
need to be built first before it builds those.

276
00:22:18,760 --> 00:22:25,830
And then I can designate for each of these whether I
want to make it build when I click Build or make it build

277
00:22:25,830 --> 00:22:29,940
when I click Build and Run, so I get my choice.

278
00:22:29,940 --> 00:22:35,320
Similarly for test actions, I designate which
configuration I want to build for my test--

279
00:22:35,320 --> 00:22:42,360
my test product, which targets I want to build for my test
product which usually involve like my unit test bundle

280
00:22:42,360 --> 00:22:50,610
for example, and then whether I want to build it all
the time or just build it for building and testing.

281
00:22:50,610 --> 00:22:56,320
Launch actions take the place of the
Executables inspector in Xcode 3.

282
00:22:56,320 --> 00:23:02,280
They let you set what your executable is, whether it's
a build product or some other application on your disk,

283
00:23:02,280 --> 00:23:07,880
which debugger you use, GDB or LLDB, whether
or not you want to launch it using instruments,

284
00:23:07,880 --> 00:23:12,330
whether you want to have breakpoints on
when you launch, what environment variables

285
00:23:12,330 --> 00:23:15,570
and command line arguments you
want to use to launch it with,

286
00:23:15,570 --> 00:23:18,500
but a couple of extra things, and these are very powerful.

287
00:23:18,500 --> 00:23:21,320
I strongly suggest you go in and look at these.

288
00:23:21,320 --> 00:23:26,160
It lets you, with checkboxes, turn on
certain memory management diagnostics

289
00:23:26,160 --> 00:23:28,370
like Guard Malloc to run automatically.

290
00:23:28,370 --> 00:23:33,660
You don't have to put in special environment
variables anymore, you just check the boxes.

291
00:23:33,660 --> 00:23:35,200
Second, it gives you--

292
00:23:35,200 --> 00:23:38,850
[ Applause ]

293
00:23:38,850 --> 00:23:41,400
Second, it gives you some advanced logging options

294
00:23:41,400 --> 00:23:46,840
for automatically logging things
from AppKit or UIKit as they occur.

295
00:23:46,840 --> 00:23:52,170
Now for distribution schemes, instead of a
launch action, you have an archive action.

296
00:23:52,170 --> 00:23:57,000
The archive action simply lets you designate what
you're going to archive and choose whether you want

297
00:23:57,000 --> 00:24:02,360
to archive simply your application build product
or a disk image with all of your build products

298
00:24:02,360 --> 00:24:05,850
from the build directory in the flat list.

299
00:24:05,850 --> 00:24:11,220
Now, when each action runs, you get
another chance to customize what goes

300
00:24:11,220 --> 00:24:15,510
on in the scheme by pre- and post-actions.

301
00:24:15,510 --> 00:24:18,110
Pre- and post-actions are basically two things.

302
00:24:18,110 --> 00:24:21,450
One, you can send an email message
or two, you can execute a script.

303
00:24:21,450 --> 00:24:28,560
And these let you do things when you build, when
you build and run, when you test, when you archive.

304
00:24:28,560 --> 00:24:34,120
Some things you might want to do is before you build,
you may have some frameworks that are in the ZIP file

305
00:24:34,120 --> 00:24:36,430
that you need to unzip before you build the first time.

306
00:24:36,430 --> 00:24:38,780
So, you might want to write a script for that.

307
00:24:38,780 --> 00:24:42,790
Or after you finish building, you may want to
go through and script out your private headers

308
00:24:42,790 --> 00:24:47,440
and do that in a post-action on your build.

309
00:24:47,440 --> 00:24:53,630
Before you launch, you may want to copy sample data into
some arena for your application to use and then clean

310
00:24:53,630 --> 00:24:57,270
up afterwards so you can do repetitive test runs.

311
00:24:57,270 --> 00:25:00,410
These are the kinds of things you may
want to do with pre- and post-actions.

312
00:25:00,410 --> 00:25:03,680
And to show you the power of schemes
is Chris Hanson.

313
00:25:03,680 --> 00:25:03,740
[ Applause ]

314
00:25:03,740 --> 00:25:05,390
>> Chris Hanson: Thank you, Chris.

315
00:25:05,390 --> 00:25:10,010
[ Applause ]

316
00:25:10,010 --> 00:25:14,680
I'm Chris Hanson and I'm also a
developer tools engineer working at Xcode

317
00:25:14,680 --> 00:25:18,210
and so aim to go over to our demo machine here.

318
00:25:20,440 --> 00:25:24,930
And let's take a look at schemes in Xcode 4.

319
00:25:24,930 --> 00:25:31,160
Now the very first thing I'm going to do
is edit my active scheme and make sure

320
00:25:31,160 --> 00:25:34,480
that when I'm building, I'm building for development.

321
00:25:34,480 --> 00:25:39,440
[ Pause ]

322
00:25:39,440 --> 00:25:46,920
I think I'll also open up the navigator
again and let's just select some code here.

323
00:25:49,290 --> 00:25:56,710
Now schemes let you build for a given purpose,
but we first get just our top-level targets.

324
00:25:56,710 --> 00:26:01,560
As Chris explained, turned into schemes
when we open an Xcode 3 project in Xcode 4.

325
00:26:01,560 --> 00:26:09,120
I'm just going to select the Colloquy
application here from our project and build.

326
00:26:09,120 --> 00:26:17,120
As you can see, I switched over to the log navigator
already-- or to the issue navigator immediately--

327
00:26:17,120 --> 00:26:25,790
and that's because in the preferences, we actually have a
new alerts panel but lets you set some actions to take place

328
00:26:25,790 --> 00:26:28,150
when different events occur like a build starts.

329
00:26:28,150 --> 00:26:31,100
So here, I just have it set to show the issue navigator.

330
00:26:31,100 --> 00:26:37,490
Because usually, when I build something, I want to
see immediately if I get any errors or warnings.

331
00:26:37,490 --> 00:26:43,290
Well, if I show the issues by file here
in the navigator, you can see that--

332
00:26:43,290 --> 00:26:48,430
even though my build succeeded I
have a few issues in this code.

333
00:26:48,430 --> 00:26:53,470
Now if I select one, of course the editor
will take me right to that line of code

334
00:26:53,470 --> 00:26:58,540
and we get a message bubble here,
describing exactly what goes on.

335
00:26:58,540 --> 00:27:03,450
We can also click add-on-- icon in the gutter,
just like in Xcode 3, to hide the message bubble.

336
00:27:03,450 --> 00:27:09,700
But of course, that doesn't actually
remove the issue it just hides it.

337
00:27:09,700 --> 00:27:16,490
Now, we can also explore issues by type so if you want
to handle all of the issues in your code of the same type

338
00:27:16,490 --> 00:27:25,730
at once, you can simply change how the navigator
is filtered and go one issue after the other

339
00:27:25,730 --> 00:27:28,320
through your code even across multiple files.

340
00:27:28,320 --> 00:27:33,180
But we don't have to use the navigator for that.

341
00:27:33,180 --> 00:27:39,920
Let's say we want to see just all of our code and
not worry about this list of things in the navigator.

342
00:27:39,920 --> 00:27:46,670
I can hide the navigator and instead use
this control up here, you zoom in on that,

343
00:27:46,670 --> 00:27:48,510
that we like to think of this a mini-navigator.

344
00:27:48,510 --> 00:27:50,440
We just click on it.

345
00:27:50,440 --> 00:27:55,960
We got a pop-up menu that shows the
two warnings that are in this file.

346
00:27:55,960 --> 00:27:57,670
I zoom out.

347
00:27:57,670 --> 00:28:00,300
We can switch between those warnings just by selecting them.

348
00:28:00,300 --> 00:28:04,830
But we also have a bunch of warnings in other files.

349
00:28:04,830 --> 00:28:12,350
Well, I can use these arrows here, to iterate through
the warnings and then when I finished the warnings

350
00:28:12,350 --> 00:28:16,410
on one file it'll take me to the next file.

351
00:28:16,410 --> 00:28:19,220
You can see I've gone already from AGRegex.m

352
00:28:19,220 --> 00:28:30,620
to AsyncSocket.m. We can also bring back the
navigator here and used its filtered field.

353
00:28:31,950 --> 00:28:37,100
Just like in other navigators, there's a
filter filled and you can filter on the text

354
00:28:37,100 --> 00:28:40,210
of the warning, the file names and so on.

355
00:28:40,210 --> 00:28:47,430
If I zoom out and I just want to see all of the warnings
involving semicolons, I can just start typing semicolon

356
00:28:47,430 --> 00:28:54,850
and I can see that there are a few semicolon
warnings so I could go through and just fixed these

357
00:28:54,850 --> 00:28:58,730
if the other warnings might be a
little bit more complex to handle.

358
00:29:00,120 --> 00:29:08,130
But really, if you just want to see you
code, Xcode won't get in between you anymore.

359
00:29:08,130 --> 00:29:16,910
I'm going to show the navigator again and we
don't just show issues in the issue navigator.

360
00:29:16,910 --> 00:29:20,460
We also have a log navigator that
lets you see all of the steps

361
00:29:20,460 --> 00:29:24,560
that have gone through-- that your build has gone through.

362
00:29:24,560 --> 00:29:27,160
Like the build window in Xcode 3.

363
00:29:27,160 --> 00:29:30,740
So this should be pretty familiar
to people who have used Xcode 3.

364
00:29:30,740 --> 00:29:39,650
And you can see if we show the assistant, if
we select a warning we're taken right there

365
00:29:39,650 --> 00:29:43,270
in the assistant editor in the bottom of the window.

366
00:29:43,270 --> 00:29:51,810
But what happens if we highlight something that doesn't
have-- oops, that doesn't have a file associated with it.

367
00:29:51,810 --> 00:30:00,210
Well, obviously, we don't have any assistant results but
we can still see a transcript of the command that generated

368
00:30:00,210 --> 00:30:04,040
that warning so we can see what might have been happening.

369
00:30:06,860 --> 00:30:14,170
We can also of course still filter using the buttons up here
to see only errors, you know, in case we don't really care

370
00:30:14,170 --> 00:30:21,610
about warnings or if we really want to see all of the things
that happened during the build, we can show all messages.

371
00:30:21,610 --> 00:30:27,040
And let me go back to the basic mode
here so we can really see everything.

372
00:30:27,040 --> 00:30:32,210
And you can see that Colloquy is
built it goes through a lot of steps.

373
00:30:33,260 --> 00:30:43,200
But we only have one entry in this log, if I hit command B
to build again, well, we switch back to the issue navigator

374
00:30:43,200 --> 00:30:51,600
because that's what I ask Xcode to do and then if I go back
to the log navigator we have two entries for how we built.

375
00:30:51,600 --> 00:30:59,280
You can see that this is the build that I did first and
now if I go to the second build I'm still showing all

376
00:30:59,280 --> 00:31:04,280
of the steps that Xcode went through and that's
because I have All selected in the filter bar here.

377
00:31:04,280 --> 00:31:10,810
If I just click Recent though, it will show that
this particular build went through a lot fewer steps

378
00:31:10,810 --> 00:31:14,330
and those steps generated a lot fewer warnings, too.

379
00:31:16,710 --> 00:31:22,520
So we preserved these logs across multiple builds so
you can see how your project is changing over time,

380
00:31:22,520 --> 00:31:28,220
not just in your own modifications to it but
what Xcode is actually deciding to build.

381
00:31:29,420 --> 00:31:39,450
As Chris was describing, you can customize Scheme menu to
only show the schemes that you really want to use regularly.

382
00:31:39,450 --> 00:31:44,910
Now, Xcode has gone through and created some
schemes for us based on top-level targets.

383
00:31:44,910 --> 00:31:48,230
But I don't necessarily want to see all of these.

384
00:31:48,230 --> 00:31:52,310
For example, I may not want to build
the Ruby support plug-in directly.

385
00:31:52,310 --> 00:31:55,090
I may never really want to work with that.

386
00:31:55,090 --> 00:32:08,400
So, I can just open up the Managed Schemes sheet,
click Show, and now it's no longer showing in the menu.

387
00:32:08,400 --> 00:32:11,960
It hasn't-- the lead of the scheme
know, I can still show that scheme

388
00:32:11,960 --> 00:32:15,460
and it also hasn't hidden it for
all of the users of this project.

389
00:32:15,460 --> 00:32:17,580
That's only gone in my user data.

390
00:32:17,580 --> 00:32:23,480
So different users can show different set of
schemes based on what they do with the project.

391
00:32:23,480 --> 00:32:29,260
[ Pause ]

392
00:32:29,260 --> 00:32:34,940
I'd also like to make sure that things are in the
order that I care about, so I can just reorder these.

393
00:32:34,940 --> 00:32:35,490
Let's see.

394
00:32:35,490 --> 00:32:39,950
I'm probably going to the regex testing
first, so I'm going to, of course,

395
00:32:39,950 --> 00:32:43,360
keep the Colloquy application at the top of the menu.

396
00:32:43,360 --> 00:32:48,120
But the regex tests up above it
and then show the Colloquy tests.

397
00:32:48,120 --> 00:32:52,480
And you can see the Scheme menu
reflects the changes that I made there.

398
00:32:52,480 --> 00:32:58,420
[ Pause ]

399
00:32:58,420 --> 00:33:04,060
>> Now, if I actually want to make changes to the Colloquy
applications scheme, I can just choose Edit Active Scheme

400
00:33:04,060 --> 00:33:12,050
from the scheme pop-up and I can see the stages
that the scheme goes through and also I can switch

401
00:33:12,050 --> 00:33:20,620
between the various schemes that this project knows
about and pick a destination for them that makes sense.

402
00:33:20,620 --> 00:33:28,050
So here, in the build stage, we can see that we're building
the development configuration and I've used the Plus button.

403
00:33:28,050 --> 00:33:35,650
Actually, if I just remove this, I can use the Plus
button to add any of the targets that my project knows

404
00:33:35,650 --> 00:33:42,890
about whether in project itself or in projects
that have references within it to the list

405
00:33:42,890 --> 00:33:46,880
of additional targets to build by the scheme.

406
00:33:46,880 --> 00:33:50,100
Now the launch target would be built by the scheme

407
00:33:50,100 --> 00:33:56,610
and this is actually the target whose
result is selected in the launch stage.

408
00:33:56,610 --> 00:34:02,080
But this other target here, well, I
just want to build it for testing.

409
00:34:02,080 --> 00:34:04,740
So I have that choice now.

410
00:34:04,740 --> 00:34:14,470
So what I'm going to build with command B, this target isn't
ever actually going to build, it's only when I chose test

411
00:34:14,470 --> 00:34:20,480
from the product menu that this
target is going to build as well.

412
00:34:20,480 --> 00:34:26,840
[ Pause ]

413
00:34:26,840 --> 00:34:34,950
Now if I choose Test, my build succeeded
pretty quickly, and if I look at the new build

414
00:34:34,950 --> 00:34:41,480
since I'm only showing recent changes, you
see that it also built the regex test target.

415
00:34:41,480 --> 00:34:46,040
[ Pause ]

416
00:34:46,040 --> 00:34:52,790
If I go back to the Edit Active Scheme sheet, I can
select the launch stage and here we have a choice

417
00:34:52,790 --> 00:34:58,830
of which debugger I want to use or
which performance tool I want to use.

418
00:34:58,830 --> 00:35:04,130
We can off course set the arguments to pass on launch
and the environment variables to pass on launch.

419
00:35:04,130 --> 00:35:11,640
And we can use the diagnostics pane to turn on some
memory and other logging and debugging diagnostics.

420
00:35:11,640 --> 00:35:15,480
For example, I've got Log dyld libraries turned on here,

421
00:35:15,480 --> 00:35:20,280
so I can see what libraries get loaded
at launch time by MyApplication.

422
00:35:20,280 --> 00:35:30,140
If I just choose Run Without Building,
you can see that we have the debugger here

423
00:35:30,140 --> 00:35:36,550
and my product-- my-- don't send, MyProject comes up.

424
00:35:36,550 --> 00:35:46,600
And if I show the debug area again,
there is a bunch of logging information

425
00:35:46,600 --> 00:35:51,230
from dyld saying exactly what libraries were reloaded.

426
00:35:51,230 --> 00:35:56,050
That means I didn't have to remember a cryptic dyld
environment variable, and the syntax for putting

427
00:35:56,050 --> 00:36:01,900
that in my launch scheme, all I
had to do was click a checkbox.

428
00:36:01,900 --> 00:36:09,380
But we're still in the log navigator and you can see
that debugging actually got us a new entry in the log.

429
00:36:09,380 --> 00:36:18,150
If I select it and zoom out, we can see all of the
log data that was generated by that application.

430
00:36:18,150 --> 00:36:25,100
So not only do you get transient log data
in the debugger area as your debugging,

431
00:36:25,100 --> 00:36:36,410
but it's also preserved right alongside your build
results so you can go back and take a look at it later.

432
00:36:36,410 --> 00:36:40,930
Now in addition to the launch schemes,
we also have distribution schemes.

433
00:36:40,930 --> 00:36:45,180
So let's say I actually want to build this
application, which is a Mac OS X application,

434
00:36:45,180 --> 00:36:48,750
package it up and post it on the web server.

435
00:36:48,750 --> 00:36:55,330
I would do that by creating a new scheme,
selecting the primary target that I want to build,

436
00:36:55,330 --> 00:36:58,120
which in this case will be Colloquy application again.

437
00:36:58,120 --> 00:37:02,270
I'm just going to name this scheme, build, and post,

438
00:37:02,270 --> 00:37:06,460
and then I'm going to make it a distribution
scheme instead of a launch scheme.

439
00:37:06,460 --> 00:37:20,470
I click OK and go to Edit Active scheme and now you can
see that the build stage is just like the build stage

440
00:37:20,470 --> 00:37:25,250
of my other scheme, although I think I
want to build for release not development,

441
00:37:25,250 --> 00:37:29,300
because I'm going to send this out to people.

442
00:37:29,300 --> 00:37:32,810
My test target is still only Colloquy.

443
00:37:32,810 --> 00:37:38,010
And now instead of a launch stage, we have an archive stage.

444
00:37:38,010 --> 00:37:41,610
And it's preset to generated a disk image.

445
00:37:41,610 --> 00:37:46,170
And you can select for a Mac OS X application
which kind of archive you want to create,

446
00:37:46,170 --> 00:37:50,230
whether it's a disk image or just an application archive.

447
00:37:50,230 --> 00:37:56,930
And you can see that we have a couple of checkboxes here for
other options like including the dSYM files in your archive.

448
00:37:56,930 --> 00:37:59,550
That's if you want to save this out for symbolication later.

449
00:37:59,550 --> 00:38:10,540
One other thing that you might want
to do with your archive scheme,

450
00:38:10,540 --> 00:38:16,750
your distribution scheme, is actually add a post-action.

451
00:38:16,750 --> 00:38:22,240
Let's say once you've built your
application and had an archive generated,

452
00:38:22,240 --> 00:38:26,640
you want to actually copy that
up using a CP to your web server.

453
00:38:26,640 --> 00:38:35,200
Well, you can just use the new Run Script action button
here, and you get an editor that has the full power

454
00:38:35,200 --> 00:38:45,580
of Xcode's text editor, including syntax coloring,
for shell scripts and any other form of script.

455
00:38:45,580 --> 00:38:52,940
And after I post to MyWebServer-- let's just
actually see what we're going to do here.

456
00:38:52,940 --> 00:39:04,560
Let's say I want to send email to my testers, and
you can add as many run script stages as you want.

457
00:39:04,560 --> 00:39:09,600
You can reorder them and you can delete them.

458
00:39:09,600 --> 00:39:14,960
[ Applause ]

459
00:39:14,960 --> 00:39:25,020
And when you actually build an archive to your application,
they'll show up in the organizer's Archives tab.

460
00:39:25,020 --> 00:39:30,020
Now, of course you don't have to do all
of these through the Xcode user interface.

461
00:39:30,020 --> 00:39:35,490
You can set this up through the Xcode
user interface and then we still support

462
00:39:35,490 --> 00:39:39,020
and have actually freely enhanced
the Xcode Build command line tool

463
00:39:39,020 --> 00:39:44,180
so you can run your configure--
your continuous integration machine.

464
00:39:44,180 --> 00:39:52,830
Actually, I need to run the one that's in Xcode 4 user bin.

465
00:39:53,840 --> 00:40:00,000
We install in Xcode 4 so as to not step
on your currently installed dev tools.

466
00:40:00,000 --> 00:40:08,660
If I just show Help here, you can see that we've
added workspace and scheme arguments to Xcode Build

467
00:40:08,660 --> 00:40:18,490
so you can tell Xcode Build to build a particular scheme
and let it take all of its configuration from that scheme.

468
00:40:18,490 --> 00:40:23,480
And that workspace argument is something
that Chris is going to tell you about next.

469
00:40:23,480 --> 00:40:30,980
[ Applause ]

470
00:40:32,750 --> 00:40:35,630
>> Chris Espinosa: Thank you, Chris.

471
00:40:35,630 --> 00:40:38,980
Boy, that was a ton of stuff to cover.

472
00:40:38,980 --> 00:40:40,380
You've saw some powerful stuff there.

473
00:40:40,380 --> 00:40:46,060
But there were two really important things that
you didn't emphasize that I want you to understand.

474
00:40:46,060 --> 00:40:55,300
I want to thank the Colloquy people for building a
relatively robust, fairly complex Xcode 3 project

475
00:40:55,300 --> 00:40:58,270
that it didn't open and run the first time in Xcode 4.

476
00:40:58,270 --> 00:41:04,980
All we had to do is upgrade it 3 generations of
compiler to build with LLVM 2.0 and it was great.

477
00:41:04,980 --> 00:41:11,590
But that's basically all we did to the open source
Colloquy project in order to get it opening,

478
00:41:11,590 --> 00:41:15,320
editing, building, and launching in Xcode 4.

479
00:41:15,320 --> 00:41:18,710
All we did was change the SDK in the compiler.

480
00:41:18,710 --> 00:41:25,420
A second thing is all of those changes Chris made
to customize his working environment to narrow

481
00:41:25,420 --> 00:41:32,890
down the combinations to make pre- and post-actions
on his launches to set up a special jig for testing.

482
00:41:32,890 --> 00:41:35,730
None of that touched that project.

483
00:41:35,730 --> 00:41:42,190
Those were all his changes and if he wants to, he can
just check the little shared box and share those changes

484
00:41:42,190 --> 00:41:48,290
with other people using Xcode 4 who have
access to his workspace or that project.

485
00:41:48,290 --> 00:41:50,380
Those are two really, really powerful things.

486
00:41:50,380 --> 00:41:56,450
One is that we work with large, complex
existing projects without changing and second is

487
00:41:56,450 --> 00:42:02,140
when you put Xcode 4 features in, that
doesn't affect the Xcode 3 projects.

488
00:42:02,140 --> 00:42:05,860
Those-- that's really going to help
adapt Xcode 4 in your organizations.

489
00:42:05,860 --> 00:42:08,580
Now notice I said workspace.

490
00:42:08,580 --> 00:42:10,490
You saw a little of this before.

491
00:42:10,490 --> 00:42:18,800
Workspace are perhaps long term the most powerful thing
we're adding to Xcode 4 and you're not going to see them

492
00:42:18,800 --> 00:42:24,140
by default because you just opened up a
project and all you see is that project.

493
00:42:24,140 --> 00:42:27,960
But really, it opens in a window that we call the workspace.

494
00:42:27,960 --> 00:42:32,010
The workspace can be very simple or very complex.

495
00:42:32,010 --> 00:42:34,690
So workspace is just the container.

496
00:42:34,690 --> 00:42:43,110
It can contain one file, multiple
files, a project, or multiple projects.

497
00:42:43,110 --> 00:42:45,210
Workspaces have certain attributes.

498
00:42:45,210 --> 00:42:53,030
It imposes consistent cross-project
standards on everything that's in it.

499
00:42:53,030 --> 00:42:58,460
For example, when you throw things into a
workspace, the workspace is indexed as one.

500
00:42:58,460 --> 00:43:07,760
So all of your navigation can happen fluidly between things
in that workspace and if multiple things that build there

501
00:43:07,760 --> 00:43:15,850
in that workspace they all build to the same location
and that location is independent of other workspaces,

502
00:43:15,850 --> 00:43:19,130
even other workspaces that contain the same project.

503
00:43:19,130 --> 00:43:25,430
And we've emphasized this a couple of times because a
lot of people here use the trunk and branch methodology

504
00:43:25,430 --> 00:43:31,680
of development where you have an SVN
repository or a repository for your trunk

505
00:43:31,680 --> 00:43:35,030
and then you fork off a branch and
then load the project from that.

506
00:43:35,030 --> 00:43:41,580
In Xcode 3, if you're set up for a common build
location, when you build trunk and then build branch,

507
00:43:41,580 --> 00:43:46,890
they're typically building into the same build folder and
they step on each other and that's awkward and difficult.

508
00:43:46,890 --> 00:43:53,690
With workspaces in Xcode 4, if you open each project
in its own workspace, they have their own independent,

509
00:43:53,690 --> 00:43:59,040
self-contained build folders and they will not conflict with
each other when you build the trunk and branch alternately.

510
00:43:59,040 --> 00:43:59,510
[ Applause ]

511
00:43:59,510 --> 00:44:06,720
Now what do you do to assemble the workspace?

512
00:44:06,720 --> 00:44:09,940
Like I said, the way you're going to build
workspaces and you won't even know it is just

513
00:44:09,940 --> 00:44:13,070
by double-clicking your Xcode project, so it'll just open.

514
00:44:13,070 --> 00:44:19,040
You can do it deliberately with a new menu and create
a new workspace and you get a blank empty window

515
00:44:19,040 --> 00:44:21,800
and you can just drag and drop files right into it.

516
00:44:21,800 --> 00:44:24,290
You can use it as a standalone text editor if you want.

517
00:44:24,290 --> 00:44:32,390
Just close both sides, collapse the toolbar, drag a text
file into it, there's your Xcode Text Editor right there.

518
00:44:32,390 --> 00:44:37,640
But if you want to drag and drop multiple project
files, it's going to ask you the normal kinds of things

519
00:44:37,640 --> 00:44:42,130
that Xcode asks you for the reference
style and whether to copy or not,

520
00:44:42,130 --> 00:44:48,050
and you can add new projects to
it with the New Project button.

521
00:44:48,050 --> 00:44:55,330
Once you get the workspace, the things you do in
that workspace can be private or can be shared.

522
00:44:55,330 --> 00:45:00,460
And the sharing depends on whether you make
your workspace available to other people either

523
00:45:00,460 --> 00:45:05,290
in a source code system or just by email or exporting it.

524
00:45:05,290 --> 00:45:11,950
So for example, if I've got a project
in my workspace and that workspace is

525
00:45:11,950 --> 00:45:15,730
in a common repository, and Chris checks it out.

526
00:45:15,730 --> 00:45:19,590
All of my schemes are private to me and
all of his schemes are private to him

527
00:45:19,590 --> 00:45:22,440
but I can go and designate some as being shared.

528
00:45:22,440 --> 00:45:24,230
And then he can see them.

529
00:45:24,230 --> 00:45:30,290
And then he can take some of his schemes and
designate them in shared and I can see them.

530
00:45:30,290 --> 00:45:34,900
So that's a powerful way to share things
among people but keeping your own workflow.

531
00:45:34,900 --> 00:45:41,200
For those of you who always wanted to take for example
custom executables from Xcode projects and be able

532
00:45:41,200 --> 00:45:46,090
to export them and share them with other
users, this is what you can do that with.

533
00:45:46,090 --> 00:45:52,980
You create a scheme, a launch scheme that tailors how you
launch, and you click the Shared button and everybody else

534
00:45:52,980 --> 00:45:59,460
who uses that workspace can see that executable:
similar for debugging, similar for testing.

535
00:45:59,460 --> 00:46:02,100
And to show you workspaces is, again, Rick Ballard.

536
00:46:02,100 --> 00:46:02,160
[ Applause ]

537
00:46:02,160 --> 00:46:13,300
>> Rick Ballard: So I'm going to start out
here and take you through a little bit of stuff

538
00:46:13,300 --> 00:46:17,170
that you've seen very briefly at
first but then off to something new.

539
00:46:17,170 --> 00:46:19,950
So we've got an existing application project here.

540
00:46:19,950 --> 00:46:26,030
And if I opened it, as Chris said, you'd automatically get
its own workspace for that project without even knowing it.

541
00:46:26,030 --> 00:46:32,130
But sometimes I want to be able to create a
manually managed workspace for several reasons.

542
00:46:32,130 --> 00:46:37,470
One of them is sharing, another one is this feature
called implicit dependencies which I'm going to show you.

543
00:46:37,470 --> 00:46:43,530
So I'm going to go ahead and start out creating a new
workspace and I can just do that from the new menu.

544
00:46:43,530 --> 00:46:48,160
Say new workspace and I choose why I
want to save it and give it a name.

545
00:46:48,160 --> 00:46:51,840
And I've got a new workspace.

546
00:46:51,840 --> 00:46:56,490
It's not very interesting yet, so
let's go ahead and add my application.

547
00:46:56,490 --> 00:46:59,050
Now I've got my application in here.

548
00:46:59,050 --> 00:47:03,250
You will notice the first time you open
the project or add it to a workspace.

549
00:47:03,250 --> 00:47:05,730
We automatically create a launch scheme for it.

550
00:47:05,730 --> 00:47:10,120
And I can go ahead and build and
my application should build clean.

551
00:47:10,120 --> 00:47:14,450
Oh, it's got a warning, but it builds.

552
00:47:14,450 --> 00:47:19,220
So one reason I might want to create this external
workspace is I've got a couple of things that I want to work

553
00:47:19,220 --> 00:47:24,220
on together and they're not directly related so
the projects don't actually reference each other.

554
00:47:24,220 --> 00:47:29,020
But when I'm working on one, I usually want to-- I at
least look at and maybe work on the other one, too.

555
00:47:29,020 --> 00:47:33,460
So in this case I've got my application,
but I also want to work on this new tool,

556
00:47:33,460 --> 00:47:38,330
so I can just say from the Plus button down
here or from the new menu, New Project.

557
00:47:38,330 --> 00:47:42,180
And create my new command line tool project.

558
00:47:42,180 --> 00:47:44,790
Choose where I want to save it on disk.

559
00:47:44,790 --> 00:47:49,870
I'll say this to my desktop and where in
the workspace structure I want it to put it.

560
00:47:49,870 --> 00:47:52,590
So I'll put it at the top level.

561
00:47:52,590 --> 00:47:56,170
Now, I've got both my projects
at the top level of my workspace

562
00:47:56,170 --> 00:47:59,840
and I can easily search across them and work with them both.

563
00:47:59,840 --> 00:48:04,600
Now if my coworkers want to work on the same 2 projects,
I might give them my workspace file or I might check it

564
00:48:04,600 --> 00:48:10,060
into STM or if it's just me that wants to work on these
together then I might have my own personal workspace

565
00:48:10,060 --> 00:48:13,890
and maybe sometimes use another
workspace that my team is sharing.

566
00:48:13,890 --> 00:48:18,260
Now you'll notice that my application here
links this framework called MyFramework.

567
00:48:18,260 --> 00:48:25,150
It's going to reference to it here and if I want to see the
actual linkage, I can select the project, select the target,

568
00:48:25,150 --> 00:48:30,430
go to the build phases and look at that link binaries
with libraries and yes, it links MyFramework.

569
00:48:30,430 --> 00:48:32,880
Well, MyFramework is this framework
I've got installed on disk

570
00:48:32,880 --> 00:48:35,820
and most of the time I just want
to use the installed version.

571
00:48:35,820 --> 00:48:41,380
But occasionally, I have a problem with it and I have the
source code to this framework so maybe I actually want

572
00:48:41,380 --> 00:48:45,880
to build it from source and run against my
debug version of that framework now and then.

573
00:48:45,880 --> 00:48:51,750
Well, you notice right now I have no dependencies on
this and in Xcode 3, the way I do this is add a reference

574
00:48:51,750 --> 00:48:55,950
to the MyFramework project and then
set up a manual target dependency.

575
00:48:55,950 --> 00:49:00,170
And then every time I build my
application, MyFramework would also build.

576
00:49:00,170 --> 00:49:04,820
But then when I want to go back to just building against the
installed version, I'd have to remove the target dependency,

577
00:49:04,820 --> 00:49:07,860
and every time I'm doing that, I'm editing the project.

578
00:49:07,860 --> 00:49:11,570
You know, I have to be careful not to check in that
dependency if other people don't want to work with it.

579
00:49:11,570 --> 00:49:16,590
So we decided, hey, wouldn't it be great if you
could take a workspace and instead of having to set

580
00:49:16,590 --> 00:49:20,760
up manual target dependencies for
things like this, just if MyFramework,

581
00:49:20,760 --> 00:49:25,010
the project is available, use it, and if not, don't use it.

582
00:49:25,010 --> 00:49:26,550
So that's what we did.

583
00:49:26,550 --> 00:49:34,520
If I go ahead and just drag in the MyFramework
project and build my application again,

584
00:49:37,390 --> 00:49:41,410
you can see that it actually built the MyFramework target

585
00:49:41,410 --> 00:49:45,520
without any explicit dependency
at all just because it was there.

586
00:49:45,520 --> 00:49:47,710
So that's implicit dependencies.

587
00:49:47,710 --> 00:49:50,920
When I'm done with MyFramework project then
I want to go back to using it from disk,

588
00:49:50,920 --> 00:49:55,460
I can just delete it from the workspace
and nobody will be any the wiser.

589
00:49:59,170 --> 00:50:04,520
So you may be thinking to yourself that's great, it builds
it automatically but surely when I go to run I'm going

590
00:50:04,520 --> 00:50:08,080
to have a problem because each project
builds into its build directory

591
00:50:08,080 --> 00:50:13,000
and the linker won't find the framework
at runtime; not in Xcode 4.

592
00:50:13,000 --> 00:50:20,720
In Xcode 4, every workspace automatically has its own
per workspace shared among itself build directory.

593
00:50:20,720 --> 00:50:26,650
So the build products from all MyProjects and
targets in this workspace go in one common location.

594
00:50:26,650 --> 00:50:33,170
This is really useful because each copy of the workspace
gets its own unique build directory and that means that say,

595
00:50:33,170 --> 00:50:37,530
I check at another copy of this workspace from
a different source control branch and go back

596
00:50:37,530 --> 00:50:42,320
and forth building this one, now building that one
maybe because I'm trying to track down a regression.

597
00:50:42,320 --> 00:50:47,000
Since each automatically gets its own build directory,
their build results won't conflict with each other

598
00:50:47,000 --> 00:50:50,430
and I don't have to clean and rebuild
every time I go back and forth.

599
00:50:50,430 --> 00:50:53,500
I just build in one, build in the other, and it just works.

600
00:50:53,500 --> 00:50:58,500
[ Applause ]

601
00:50:58,500 --> 00:51:03,220
If you want control over exactly where your build
products are going now, we definitely give that to you.

602
00:51:03,220 --> 00:51:06,660
If you go to the File Menu, there's
a Workspace Settings option

603
00:51:06,660 --> 00:51:09,510
or if you've open a project, it's called Project Settings.

604
00:51:09,510 --> 00:51:15,860
And when I bring this out, this brings me to a panel
that tells me all about where my stuff is going to go.

605
00:51:15,860 --> 00:51:18,650
The first thing you see here is the derived data location.

606
00:51:18,650 --> 00:51:24,930
Well your derived data from your workspace is the build
products and intermediates you produced and any logs

607
00:51:24,930 --> 00:51:28,380
from your builds and debug sessions and your index.

608
00:51:28,380 --> 00:51:32,070
And by default, we store all the stuff
in a folder underneath your home folder.

609
00:51:32,070 --> 00:51:36,560
But if you needed to go somewhere special you can do
that, say because you need to have everything good

610
00:51:36,560 --> 00:51:39,680
with secure source image for security reasons.

611
00:51:39,680 --> 00:51:43,380
Beyond that, by default, every workspace
gets its own unique build folder

612
00:51:43,380 --> 00:51:45,790
so that it doesn't conflict with another workspace.

613
00:51:45,790 --> 00:51:49,890
But if you want, you can set a
custom subfolder to use instead.

614
00:51:49,890 --> 00:51:54,400
If you set 2 workspaces to use the same custom
subfolder, they'll share their build products

615
00:51:54,400 --> 00:51:57,300
because they'll be building into the same place.

616
00:51:57,300 --> 00:52:04,550
Finally, if you do need to build into the classic
locations set by your build settings as in Xcode 3,

617
00:52:04,550 --> 00:52:08,190
you can choose builds going to locations
specified by projects and instead

618
00:52:08,190 --> 00:52:11,420
of getting the new derived data directory location builds,

619
00:52:11,420 --> 00:52:15,290
your build settings will dictate
exactly where your build products go.

620
00:52:15,290 --> 00:52:20,940
Now, if I click the arrow here, I can actually
go take a look at my derived data directory.

621
00:52:20,940 --> 00:52:26,860
And inside you'll notice that each of my
copies of my workspaces got their own folder.

622
00:52:26,860 --> 00:52:31,640
Inside that you'll see there's a build folder, an
index folder for my index, a folder for my logs.

623
00:52:31,640 --> 00:52:38,080
This file here called Info.text, which just gives the
path to the workspace that this folder corresponds to,

624
00:52:38,080 --> 00:52:41,590
which can be useful if you're trying to work backwards.

625
00:52:41,590 --> 00:52:45,670
And inside the build folder, you'll notice
that we now separate your build intermediates

626
00:52:45,670 --> 00:52:47,840
from your precompiled headers from your products cleanly.

627
00:52:47,840 --> 00:52:53,360
So this should make it easier to work with your
build products when you actually have to do that.

628
00:52:53,360 --> 00:52:58,000
Now as Chris mentioned, there is another kind of sharing
that we support in Xcode 4, and that's scheme sharing.

629
00:52:58,000 --> 00:53:00,520
And I want to show you just a little bit about that.

630
00:53:00,520 --> 00:53:04,060
If I go to the Managed Scheme sheet,
I'm given several options.

631
00:53:04,060 --> 00:53:10,300
First of all, I see all the schemes in my
workspace and I have a Shared checkbox.

632
00:53:10,300 --> 00:53:15,440
Well, by default, every scheme I create belongs just
to me and nobody else can see it so I'm not cluttering

633
00:53:15,440 --> 00:53:18,880
up their workspace and when I change
settings, I'm not affecting anyone else.

634
00:53:18,880 --> 00:53:23,710
But when I set up a scheme that everyone on my team wants
to use or I've got some setting that other people are going

635
00:53:23,710 --> 00:53:29,480
to want to use, I can just click the Shared checkbox and
now it will show up for everybody, everybody will co-own it,

636
00:53:29,480 --> 00:53:33,050
they can all edit it, it's just
a shared scheme at that point.

637
00:53:33,050 --> 00:53:37,290
Well what happens if my team adds a whole bunch
of shared shames and they're cluttering up my menu

638
00:53:37,290 --> 00:53:40,810
and I don't really care about these things
that most of my team members care about.

639
00:53:40,810 --> 00:53:44,930
Well, the Show checkbox that Chris
showed earlier let me easily say, hey,

640
00:53:44,930 --> 00:53:48,270
I want to leave the scheme alone
at shared but don't show it to me.

641
00:53:48,270 --> 00:53:53,200
And that Show checkbox is per user so I'm not
affecting anyone else when I say not to show it.

642
00:53:53,200 --> 00:53:54,810
[ Applause ]

643
00:53:54,810 --> 00:54:03,210
The last thing you'll notice here is the container column
and that lets me control exactly where each scheme is saved.

644
00:54:03,210 --> 00:54:05,600
These schemes are saved off in their own files.

645
00:54:05,600 --> 00:54:11,190
So changing your executable settings no longer affects
some big file that you're managing at resource control.

646
00:54:11,190 --> 00:54:17,090
Instead, each scheme gets its own file easy to manage in
source control and I can control whether I want a scheme

647
00:54:17,090 --> 00:54:22,240
to be saved in, say, the project that
it's associated with or the workspace.

648
00:54:22,240 --> 00:54:27,240
When I do that, that controls whether well, if I share
the workspace with somebody else, do they get my schemes?

649
00:54:27,240 --> 00:54:31,650
If I share just the projects but I'm keeping the
workspace for myself, do they get those schemes?

650
00:54:31,650 --> 00:54:35,340
I have full control over that with the Container pop-up.

651
00:54:35,340 --> 00:54:38,500
There is one more way to share
this which is very useful which is

652
00:54:38,500 --> 00:54:41,580
in the Gear menu there is Import and Export options.

653
00:54:41,580 --> 00:54:47,850
I can go ahead and export one of this and
just save the scheme file directly to disk.

654
00:54:47,850 --> 00:54:49,560
I'll save this one to my desktop.

655
00:54:49,560 --> 00:54:53,910
I could email that to a colleague and
he could turn around and say Import.

656
00:54:53,910 --> 00:54:59,210
Choose the scheme, import it, and
it shows right up in his project.

657
00:54:59,210 --> 00:55:01,390
[ Applause ]

658
00:55:01,390 --> 00:55:06,190
So we think that sharing is a lot easier in Xcode 4
and we hope that you find this stuff very, very useful.

659
00:55:06,190 --> 00:55:07,530
[ Applause ]

660
00:55:07,530 --> 00:55:10,150
>> Chris Espinosa: That's terrific.

661
00:55:13,460 --> 00:55:14,820
Thank you very much, Rick.

662
00:55:14,820 --> 00:55:17,980
Well, we are now approaching our destination.

663
00:55:17,980 --> 00:55:18,910
Thank you for attending.

664
00:55:18,910 --> 00:55:20,570
I want to sum up a couple of things for you.

665
00:55:20,570 --> 00:55:22,310
You saw a lot today.

666
00:55:22,310 --> 00:55:26,500
Come down to the lab tomorrow morning if
you need a recap of what this all means

667
00:55:26,500 --> 00:55:29,310
or to see some of these things in real life.

668
00:55:29,310 --> 00:55:35,490
Download the product from the hardwire connections
in the labs or in any of the public areas.

669
00:55:35,490 --> 00:55:40,310
I hope that when you download Xcode 4
and install it and open up your projects,

670
00:55:40,310 --> 00:55:43,930
you're going to start seeing 3 or 4 things.

671
00:55:43,930 --> 00:55:48,780
First is that your Xcode projects that
you have already open up in Xcode 4

672
00:55:48,780 --> 00:55:52,110
and you can edit and build them just like in Xcode 3.

673
00:55:52,110 --> 00:55:55,650
And then take those projects back
to Xcode 3 if you needed to.

674
00:55:55,650 --> 00:56:02,180
That you have a lot more room and clarity to edit those
projects in their build settings because we show you all

675
00:56:02,180 --> 00:56:07,780
of the configurations at once and all of the targets
and project at once instead of making you go to a lot

676
00:56:07,780 --> 00:56:11,320
of modal little inspectors to figure
out what's happening where.

677
00:56:11,320 --> 00:56:16,860
I'm hoping that what I personally get out of this
is that I never have to ask people are you looking

678
00:56:16,860 --> 00:56:20,810
at the target settings inspector or are you
looking at the project settings inspector,

679
00:56:20,810 --> 00:56:23,450
and then explain what I mean by that question.

680
00:56:23,450 --> 00:56:27,210
[ Applause ]

681
00:56:27,210 --> 00:56:32,570
And its sister question is, do you have all
configurations chosen or just one configuration chosen?

682
00:56:32,570 --> 00:56:34,640
Both of those problems go away.

683
00:56:34,640 --> 00:56:43,040
Third thing is that schemes are a really powerful way to
organize your work personally and to organize the work

684
00:56:43,040 --> 00:56:46,090
in your organization and share it in your organization.

685
00:56:46,090 --> 00:56:53,120
And you can control how you build with schemes without
having to make all of these edits in your project file

686
00:56:53,120 --> 00:56:58,110
that create trash in source code system
and create angst because I don't want

687
00:56:58,110 --> 00:57:03,230
to see those new aggregate targets you created
for your test jig and they make my menu too long.

688
00:57:03,230 --> 00:57:06,040
Those problems go away with Xcode 4.

689
00:57:06,040 --> 00:57:11,100
And finally, the free form association of product projects,

690
00:57:11,100 --> 00:57:15,850
the way that projects will implicitly
build implicitly depend on each other.

691
00:57:15,850 --> 00:57:21,750
The ability to search across multiple projects all the
time and get to the right answer in the right project.

692
00:57:21,750 --> 00:57:25,670
The ability to index and jump and navigate across projects.

693
00:57:25,670 --> 00:57:32,060
The ability to edit the build settings or the targets of all
of your projects you're working with in one window instead

694
00:57:32,060 --> 00:57:35,340
of having to open 7 project windows on your desktop.

695
00:57:35,340 --> 00:57:40,570
You'll find that those tremendously improve your
productivity when you're working with Xcode 4.

696
00:57:40,570 --> 00:57:44,440
For more information, Michael Jurewitz is our evangelist.

697
00:57:44,440 --> 00:57:47,360
He's here the rest of the week, which is not very long.

698
00:57:47,360 --> 00:57:53,980
Apple Developer Forums, there is a specific
developer forum for the Xcode 4 developer preview.

699
00:57:53,980 --> 00:57:58,630
It's all already quite active, get on
it, ask questions, read the questions

700
00:57:58,630 --> 00:58:02,810
and answers other people have answered,
read the release notes.

701
00:58:02,810 --> 00:58:06,710
There are 11 pages of release notes for this release.

702
00:58:06,710 --> 00:58:10,420
Go ahead. There's a lot of stuff
there and there's great documentation.

703
00:58:10,420 --> 00:58:13,990
There are only a couple of sessions
left talking about Xcode 4.

704
00:58:13,990 --> 00:58:19,060
Using Interface Builder with Xcode 4, in this
room immediately after, stay in your seats,

705
00:58:19,060 --> 00:58:21,930
it's going to be great, tons of great stuff.

706
00:58:21,930 --> 00:58:27,910
Tomorrow morning, Debugging with Xcode 4 and
LLDB, the great new things in our LLDB debugger.

707
00:58:27,910 --> 00:58:29,360
Thank you all very much for coming.

708
00:58:29,360 --> 00:58:41,110
[ Applause ]

