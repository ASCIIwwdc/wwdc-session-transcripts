WEBVTT

00:00:07.120 --> 00:00:13.760
>> Hello, good morning, my name's Dean, I'm sure you all
know me from face book because I have over 20 friends

00:00:13.760 --> 00:00:20.630
and so this morning we're going to talk about
iAd and I really wanted to give the session title

00:00:20.630 --> 00:00:27.810
or the session description for this topic as something
like not since the nostalgic betrayal of 1960s Manhattan

00:00:27.810 --> 00:00:32.440
in the hit show Madmen have people
been so interested in advertising.

00:00:32.440 --> 00:00:41.020
But as you know iAd is Apple's program to revolutionize
mobile advertising and when you set such a lofty standard

00:00:41.020 --> 00:00:45.790
as revolutionizing a well-established
industry they're pretty high goals so we have

00:00:45.790 --> 00:00:47.910
to take a look at what we really mean by that.

00:00:47.910 --> 00:00:52.440
So might have seen this graph before.

00:00:52.440 --> 00:00:57.310
We're trying to deliver on two fronts,
interaction or interactivity and emotion.

00:00:57.310 --> 00:01:02.800
So maybe you guys are familiar with web
advertising, web advertising can do some animation,

00:01:02.800 --> 00:01:09.120
it can be a little interactive but you don't
really get an emotional connection to it.

00:01:09.120 --> 00:01:12.890
Well, you do sometimes get an emotional connection but
it's normally the negative emotional connection you get

00:01:12.890 --> 00:01:17.210
if something's in your face and
popping up all over your screen.

00:01:17.210 --> 00:01:25.180
On the other hand this TV advertising, the TV advertising
because it uses video it can be really, really emotional,

00:01:25.180 --> 00:01:31.330
I mean I know like when I watch the FaceTime video
earlier in the week I found it really touching,

00:01:31.330 --> 00:01:33.770
and I'm like a super tough guy so that's [laughter]

00:01:33.770 --> 00:01:40.770
so I mean while it's emotional it
doesn't really give you an impactivity,

00:01:40.770 --> 00:01:45.160
you're sitting back on your couch a fair
way away from the screen where it's you know

00:01:45.160 --> 00:01:49.380
for iPhone devices you got the video in
your hand, you really want to be part of it,

00:01:49.380 --> 00:01:52.770
you've got this real close connection to it
and that's where we want to be with iAd we want

00:01:52.770 --> 00:01:56.870
to deliver really emotional content
with really high interactivity.

00:01:56.870 --> 00:02:06.880
Really what we want to do is allow you to make a
Super Bowl style ad, now what's a Super Bowl style ad,

00:02:06.880 --> 00:02:11.740
it's a kind of ad the way you might have only seen
once but you remember it days, or weeks or months later

00:02:11.740 --> 00:02:20.220
and it sounds really sort of crazy except like if I
mention the word 1984 to you a lot of people in this room,

00:02:20.220 --> 00:02:25.190
in this room because you're all nerds, going to
think of an ad which is really weird whereas a lot

00:02:25.190 --> 00:02:27.240
of other people are going to think about a book.

00:02:27.240 --> 00:02:31.430
But that's the type of ad we're going
for, something you really can remember.

00:02:31.430 --> 00:02:37.810
The user might only interact with it once but they're going
to sort of hold that with them for the rest of the week

00:02:37.810 --> 00:02:45.020
or for days until they decide to do what advertising is
suppose to do and hopefully you know go to get your product.

00:02:45.020 --> 00:02:48.420
Now just because you are actually trying to draw the user

00:02:48.420 --> 00:02:54.870
to your product doesn't mean you can't give them a
rewarding experience for example you might have an ad

00:02:54.870 --> 00:02:59.130
that has a little game with it, something they can
enjoy or you might give them wallpaper they can use

00:02:59.130 --> 00:03:04.410
in their background of their iPhone or you might recommend a
sound track to them, that's the type of thing we want to do,

00:03:04.410 --> 00:03:08.760
we're not just pushing product to the
users we're giving them a great experience,

00:03:08.760 --> 00:03:15.860
in fact iAds are sort of like mini-apps, Steve
described the Toy Story ad if you might have seen

00:03:15.860 --> 00:03:18.890
at the iPhone 4 event as sort of like a mini-universe.

00:03:18.890 --> 00:03:24.120
He was interacting with this ad, he was getting
wallpaper and playing games and listening to the sounds,

00:03:24.120 --> 00:03:30.430
introducing to the characters of the movie and that's the
type of experience we want so how are we going to do it.

00:03:30.430 --> 00:03:37.470
Well we've developed a framework called iAd JS,
it's a JavaScript framework and there's sort

00:03:37.470 --> 00:03:41.870
of two main reasons why we think you should
use it, first Apple has a lot of experience

00:03:41.870 --> 00:03:47.370
with developing application frameworks for the iPhone
and it's been really they've been really well-received,

00:03:47.370 --> 00:03:52.110
a good example is UIKit, I mean
there's great applications built with UIKit

00:03:52.110 --> 00:03:57.150
and we in fact iAd JS is very similar to UIKit,
it's written in...it's a JavaScript framework

00:03:57.150 --> 00:04:00.220
but it's really based around the same principals.

00:04:00.220 --> 00:04:09.160
Secondly performance really matters and because we know
exactly how the engine that's powering iAd's works we can

00:04:09.160 --> 00:04:13.470
make it so that iAD JS provides the most
performant content possible.

00:04:13.470 --> 00:04:21.600
So I mean I guess a lot of you probably seen web
frameworks on the phone and you load a page and they look

00:04:21.600 --> 00:04:26.910
like an iPhone application but when you come to interact
with them you know maybe scroll the further page

00:04:26.910 --> 00:04:30.910
and you sort of, finger trips because
the page doesn't scroll.

00:04:30.910 --> 00:04:35.580
It's like that's actually a really hard problem,
that's the reason why these frameworks don't operate.

00:04:35.580 --> 00:04:39.810
But we think we've solved that problem and we'll
show examples of what type of performance we've got.

00:04:39.810 --> 00:04:46.310
What does it really mean to you, what we want
you to do is write less code, less logic,

00:04:46.310 --> 00:04:51.960
less programming logic even though it's a JavaScript program
we actually want you to write fewer lines of JavaScript

00:04:51.960 --> 00:04:58.530
because you're developing in HTML we want you to use the
declarative format for most of your application if possible.

00:04:58.530 --> 00:05:01.370
Secondly we want it to be highly customizable

00:05:01.370 --> 00:05:10.040
so maybe some ads...when you're doing advertising the
brands they might have very, very similar ads in terms

00:05:10.040 --> 00:05:15.260
of the application or the ad they're building but they want
to differentiate as much as possible from their competitors

00:05:15.260 --> 00:05:18.120
so they want to make sure that whatever ad they can do,

00:05:18.120 --> 00:05:21.530
they can make it look exactly the way they
want to look at it and completely different.

00:05:21.530 --> 00:05:32.050
So, any of you have heard of HTML5, iAds are built
on HTML5 and what's really important about that is

00:05:32.050 --> 00:05:36.020
that while it's a buzz word, you know the buzz word,

00:05:36.020 --> 00:05:39.980
what it really means is even though your writing an
application it's not a second class citizen in any way,

00:05:39.980 --> 00:05:44.930
there's a whole bunch of frameworks you can use, you
can use databases, you can load data over the network,

00:05:44.930 --> 00:05:50.040
you've got animations, a whole bunch of stuff, these
are really real apps, they're just running inside HTML5.

00:05:50.040 --> 00:05:58.160
But more importantly in iAd you're developing for the WebKit
framework that's what we think is the best HTML5 engine,

00:05:58.160 --> 00:06:03.840
it's powering the Safari browser but if you're web
developers you know instantly if you're only developing

00:06:03.840 --> 00:06:08.110
for one platform and it's an awesome platform like
WebKit you don't have to worry about the hard stuff

00:06:08.110 --> 00:06:15.660
which is cross-browser compatibility and I'm sure that's the
biggest headache for when you're doing a reach application.

00:06:15.660 --> 00:06:22.090
So there's these two things, HTML5 and iAD JS and these are
basically the foundations of the technology we're trying

00:06:22.090 --> 00:06:24.770
to give you to make completely awesome ads.

00:06:24.770 --> 00:06:28.960
So let's give you a little interaction of what
we're going to do, this is a two part series,

00:06:28.960 --> 00:06:32.170
I'm the Magic Man, no I'm El Diablo, I can't remember.

00:06:32.170 --> 00:06:35.800
I'm going to build an ad, I'm going to dive
right into the code, we're going to show you it,

00:06:35.800 --> 00:06:40.360
you might not necessarily understand all the iAd
JS framework stuff we're going to do and that's

00:06:40.360 --> 00:06:46.140
because part two coming up next, the other half, the
Magic Man is going to dig into the framework elf

00:06:46.140 --> 00:06:51.320
and give you a really detailed look at all the
features and techniques that we've developed.

00:06:51.320 --> 00:06:59.110
So let's start with the demo, we want to show
you what type of ads we're talking about here.

00:06:59.110 --> 00:07:08.140
Okay, so I found this service called
Twitter, it was invented by Justin Bieber.

00:07:08.140 --> 00:07:13.420
I've written this...this is a native app and it
just aggregates Twitter based on particular topics

00:07:13.420 --> 00:07:17.660
so it shows you tweets say on sports
or entertainment or whatever.

00:07:17.660 --> 00:07:20.930
Now the interesting thing about this is the type of users

00:07:20.930 --> 00:07:26.390
that would use an application that's showing you twitter
feeds are probably the type of users that are interested

00:07:26.390 --> 00:07:31.740
in using Twitter elf, so it's a great
place to sort of market a Twitter application

00:07:31.740 --> 00:07:40.540
so let's...now you can see this is the application, it's
just got a table view of tweets and at bottom I've got an ad

00:07:40.540 --> 00:07:47.720
for an application you might have heard of it, it's
Birdhouse developed by the dynamic duo of Cameron and Adam,

00:07:47.720 --> 00:07:51.040
they gave me permission to write and iAd for their app.

00:07:51.040 --> 00:07:55.500
There's some animation, this is cycling through
images, the little birds bouncing around every now

00:07:55.500 --> 00:07:58.800
and then to sort of ...there we go saying "Hi, use me."

00:07:58.800 --> 00:08:05.530
So I'm going to tap on this ad.

00:08:05.530 --> 00:08:09.800
>> You care about your Twitter don't you;
sure you do because you're a thinker,

00:08:09.800 --> 00:08:11.840
a taste maker and a very important business person.

00:08:11.840 --> 00:08:14.290
Let me show you Birdhouse, joining me is
Birdhouse Senior Developer, Cameron Hunt.

00:08:14.290 --> 00:08:14.440
>> Hello.

00:08:14.440 --> 00:08:14.890
>> Say hello Cameron.

00:08:14.890 --> 00:08:15.040
>> Hello.

00:08:15.040 --> 00:08:16.510
>> Hold that thought I just had an idea.

00:08:16.510 --> 00:08:35.740
[ Music ]

00:08:35.740 --> 00:08:37.510
>> I'm sorry where were we.

00:08:37.510 --> 00:08:39.480
>> You were saying we're Birdhouse.

00:08:39.480 --> 00:08:44.140
>> Okay, so I stopped it there, I'd really
like to show you the whole ad, the whole video

00:08:44.140 --> 00:08:49.710
but you should go their web site and watch it especially
when FAQ guy comes at the end, it's great.

00:08:49.710 --> 00:08:56.830
But it raises an important point which is that I have to
go to their website to see this video to find this video

00:08:56.830 --> 00:09:02.770
and it's awesome and I don't use twitter but I thought wow
that video is awesome I want to buy this app but if it was

00:09:02.770 --> 00:09:06.740
in the context of a Twitter app elf you sort
of...one you don't have to go to the website,

00:09:06.740 --> 00:09:11.690
you're giving this great video that
sells the product directly to the users,

00:09:11.690 --> 00:09:14.310
directly to people who would potentially buy your app.

00:09:14.310 --> 00:09:22.050
So what are we going to talk about, first you
notice that when the app launched there's a banner,

00:09:22.050 --> 00:09:27.460
we're going to describe how you create a banner for
iAd, Next we're going to dive in and build the sort

00:09:27.460 --> 00:09:31.970
of mini-application that is the advertising unit.

00:09:31.970 --> 00:09:38.840
There's some enhancements that iAds provide allow you
to give the user more features or more functionality

00:09:38.840 --> 00:09:45.760
and lastly we're going to show you, if you do use iAd JS how
it can help you build custom code you can reuse elsewhere.

00:09:45.760 --> 00:09:50.780
So banners, so obviously you have to make a great banner

00:09:50.780 --> 00:09:54.520
because if you don't make a great banner the user
isn't going to tap on your ad and if they don't tap

00:09:54.520 --> 00:09:59.780
on your ad you don't get the engagement with them so it's
the first interaction with your product and you're going

00:09:59.780 --> 00:10:05.620
to make it special and especially because I find
applications themselves are really creative and exciting,

00:10:05.620 --> 00:10:11.550
you've got to almost compete with the application to
show...get some attention that the banner is there.

00:10:11.550 --> 00:10:18.440
But you sort of balance this...balance this
between being really annoying and being exciting,

00:10:18.440 --> 00:10:22.650
you don't want to annoy the user so they never click
on the banner, so let's have a look at the banner,

00:10:22.650 --> 00:10:29.010
so that was the application, the banner is just this, this
little bit down at the bottom and it comes in two parts.

00:10:29.010 --> 00:10:34.850
There's a frame and there's the content, now the frame
is the border that is provided by the iAd system,

00:10:34.850 --> 00:10:42.910
so every ad in the network gets this frame applied to it and
that gives the user some form of comfort that when they tap

00:10:42.910 --> 00:10:46.030
on this ad they're not going to be thrown our out
of their app, they're put into the iAd system.

00:10:46.030 --> 00:10:49.690
And then there's the creative content
which is drawn underneath.

00:10:49.690 --> 00:10:54.140
And this is the bit where you actually...this
is your framework,

00:10:54.140 --> 00:10:57.900
this is your canvas where you want to do your cool content.

00:10:57.900 --> 00:11:09.180
So banners, they come in two sizes, 350 x by 50 un
or points for portrait and 480 x 32 at the landscape,

00:11:09.180 --> 00:11:14.180
you can provide in your ad two different banners or multiple
banners in fact that are shown in rotation depending

00:11:14.180 --> 00:11:17.660
on what the orientation of the application you're in is.

00:11:17.660 --> 00:11:23.600
The iAd JS systems draws the frame as I mentioned,
the creative content is where you put your magic in.

00:11:23.600 --> 00:11:28.830
All it is, is a directory with HTML so you can really
do anything inside that directory but you can also

00:11:28.830 --> 00:11:33.400
if you want just provide a static image and you
can put that image at the size of the frame,

00:11:33.400 --> 00:11:39.030
another cool way to do it is you can provide an image
that's the width of a full screen and only a slice

00:11:39.030 --> 00:11:43.480
of that...you specify which slice is shown within the
banner and when the user taps on it the banner is sort

00:11:43.480 --> 00:11:47.790
of like ripped apart and the full screen image
comes up, so it's actually quite a cool effect

00:11:47.790 --> 00:11:50.920
but most people are probably going to want
to do HTML, because it's a great environment,

00:11:50.920 --> 00:11:55.660
you get to do animations or some kind of effects.

00:11:55.660 --> 00:12:01.170
Now if you're going to do animation the banners are
quite small so you want to use the best technology

00:12:01.170 --> 00:12:08.850
for doing your animations and CSS provides a good way to
do this because you don't necessarily want to use script

00:12:08.850 --> 00:12:15.390
because scripting libraries that do animation can be quite
large and you want to keep your banner as small as possible,

00:12:15.390 --> 00:12:19.730
especially avoiding large JavaScript libraries because
there's no real need to load in something really huge just

00:12:19.730 --> 00:12:22.510
to show a little banner at the bottom of an application.

00:12:22.510 --> 00:12:29.610
There's been plenty of sessions already during this talk
about how to use CSS effects to get this really nice,

00:12:29.610 --> 00:12:33.500
beautiful look on your web page so I
don't want to repeat anything here.

00:12:33.500 --> 00:12:37.390
There's one important thing to note, banners aren't
interactive, there's really only one interaction

00:12:37.390 --> 00:12:39.470
with the banner and that's the user taps on it.

00:12:39.470 --> 00:12:44.610
But you within the banner you don't actually
get told that that's happened, anything,

00:12:44.610 --> 00:12:50.340
you don't get any UI events you just have to provide
the animation or everything yourself through timers.

00:12:50.340 --> 00:12:55.730
Now again I want to go into detail of exactly how I made
that banner for Birdhouse but really it was just a directory

00:12:55.730 --> 00:13:01.660
with an HTML file and then a bunch of images and text and
all I did was arrange those images in a particular way,

00:13:01.660 --> 00:13:07.120
set the bird on top of the logo and then added a
little CSS animation so it bounced around and cycled

00:13:07.120 --> 00:13:13.380
through other images, it was actually very easy, all out
I think the banner was about 20K of code with the images.

00:13:13.380 --> 00:13:19.840
So that was pretty simple, constructing an engaging
banner, simple but it's important you've got to make sure

00:13:19.840 --> 00:13:22.800
that you make a great banner, get people interested.

00:13:22.800 --> 00:13:39.050
So let's build a real ad now, that's enough intro, let's
go back to the demo and in this case I've made an ad,

00:13:39.050 --> 00:13:48.740
now keeping with the bird theme, I thought okay I'm going
to make an ad for a realtor site that sells houses to bird

00:13:48.740 --> 00:13:54.180
or birdhouses, so you see I've tapped on
the banner and this application started.

00:13:54.180 --> 00:14:02.500
Now this is an interactive menu so I can tap here
and the menu pops up and down, maybe I want to say,

00:14:02.500 --> 00:14:06.930
let's show me...the first thing you want to
do is maybe show the houses that are around me

00:14:06.930 --> 00:14:12.560
so I've asked my current location which is going
to pop up soon and it's not really Cupertino,

00:14:12.560 --> 00:14:27.070
we're running in the simulator but here it's the map,
it's the full map system...oops...I can tap on the pins

00:14:27.070 --> 00:14:34.810
and I get the callouts, for now, a cheep buy,
they say that puns are the worst forms of humor.

00:14:34.810 --> 00:14:42.780
Look at other things, for example, I might want to
sell the user something so bird related products,

00:14:42.780 --> 00:14:50.510
the movies or whatever I can sell...like in app purchases I
can do in ad purchases direct the user directly to something

00:14:50.510 --> 00:14:59.100
on the iTunes Store and it downloads in the background or
maybe I want to say let's have a look at houses around here,

00:14:59.100 --> 00:15:04.550
this is interesting, this is an example of the
table view, this is done purely in JavaScript,

00:15:04.550 --> 00:15:07.090
there's no, there's no native code behind this.

00:15:07.090 --> 00:15:11.910
This is the example of something I said which is really hard
to do, other JavaScript frameworks haven't managed to do,

00:15:11.910 --> 00:15:17.750
we see we get the scroll bars and everything,
interesting thing this is zero lines

00:15:17.750 --> 00:15:21.360
of JavaScript to write this component inside your ad.

00:15:21.360 --> 00:15:26.150
And I'll show you later all you do, basically you
just put something in and mark it as a table view

00:15:26.150 --> 00:15:31.170
and there frameworks going to build all the
interactive video and event handling behind it.

00:15:31.170 --> 00:15:38.300
While were on that topic let's have a look at property,
now this is a cover flow of say trees in the area,

00:15:38.300 --> 00:15:45.540
now again this is all JavaScript, no native code, pretty
accurate representation of cover flow, you can even throw,

00:15:45.540 --> 00:15:51.280
if I could do, it's going to be hard to do on a simulator,
there's a particularly attractive house for a bird.

00:15:51.280 --> 00:15:57.640
And maybe here you pick a tree potential like you want
to save it to your photo gallery and then email it

00:15:57.640 --> 00:16:03.190
to your other half or something inside it, this
looks like a great tree for our vacation home.

00:16:03.190 --> 00:16:08.510
Lastly maybe we'll go to testimonial
from a satisfied customer.

00:16:08.510 --> 00:16:21.040
[ Bird sounds ]

00:16:21.040 --> 00:16:22.230
All right let's close out the ad.

00:16:22.230 --> 00:16:23.510
So.

00:16:23.510 --> 00:16:27.360
[ Applause ]

00:16:27.360 --> 00:16:29.750
Let's go ahead and try and build that ad.

00:16:29.750 --> 00:16:34.830
Before we do that we just want to describe
how contents are really working in iAd system.

00:16:34.830 --> 00:16:38.070
So most of you are familiar with the way web
content works and that you have a browser,

00:16:38.070 --> 00:16:40.550
you're the user, interacting with that browser.

00:16:40.550 --> 00:16:44.390
It's showing you web content and the
web content has come from the internet.

00:16:44.390 --> 00:16:51.170
In iAd it's a little bit different, you're still the
user I hope, instead of interacting with the browser,

00:16:51.170 --> 00:16:55.390
you're interacting with an an iOS native
application and that's showing you iAd content

00:16:55.390 --> 00:17:01.170
but that iAd content isn't actually being displayed by
your application it's being displayed by the iAd framework,

00:17:01.170 --> 00:17:05.190
this is something native developers use inside
their application, they put a banner view

00:17:05.190 --> 00:17:10.650
and the banner view handles all the loading an
unloading and cycling of banners from the iAd network

00:17:10.650 --> 00:17:13.690
and also displaying the full screen
advertisement when they click on it.

00:17:13.690 --> 00:17:19.840
Instead of coming from the internet the iAd content
actually comes from the iAd network so this is the system

00:17:19.840 --> 00:17:26.120
that Apple builds that serves the ad content but it
can also go off to the network and get it's own data,

00:17:26.120 --> 00:17:32.220
for example you might have an ad which is
promoting a movie and you can get the users location

00:17:32.220 --> 00:17:36.690
through the GL location API's and you know
down load a feed of what show times are

00:17:36.690 --> 00:17:38.720
around the user, what cinemas are around the user.

00:17:38.720 --> 00:17:46.150
What was that application I was using and this is really
important for you if you're a developer of an ad content,

00:17:46.150 --> 00:17:51.320
there's an app we built called iAd
Tester that is included on the package,

00:17:51.320 --> 00:17:55.730
I should mention that the iAd JS developer packages
are available from developer.apple.com and it comes

00:17:55.730 --> 00:18:00.800
with this application which allows you
to load ad content on to the device

00:18:00.800 --> 00:18:05.380
through iTunes the same way you do document sharing
normal on iTunes, like go to the applications tab,

00:18:05.380 --> 00:18:09.530
scroll down and you'll see the iAd
application and you can just drag zip files

00:18:09.530 --> 00:18:13.620
onto there they are expanded and
you can then run them on the device.

00:18:13.620 --> 00:18:16.540
This is an important introduction to how you would develop

00:18:16.540 --> 00:18:20.760
and ad because it's just web content you would
normally start with developing on the desktop

00:18:20.760 --> 00:18:25.060
because you've got this great Web Inspector which
has got more features that I can keep up with,

00:18:25.060 --> 00:18:28.540
I even learned some yesterday but this
way you want sort of develop an ad

00:18:28.540 --> 00:18:31.430
or use your existing tools for developing HTML content.

00:18:31.430 --> 00:18:35.100
The other one is you want to develop...you
want to at least test your add in Mobile Safari

00:18:35.100 --> 00:18:40.490
because then you can do the touch interaction,
see how it actually works on the device and lastly

00:18:40.490 --> 00:18:44.410
when you think it's ready you can use iAd Tester
which is giving you the full experience of the banner

00:18:44.410 --> 00:18:48.420
and the interaction with the little X that allows
the user to close it down running full screen.

00:18:48.420 --> 00:18:56.610
Now these applications...or these ads are mini-applications,
but in HTML5 so I sort of encourage you to look at them

00:18:56.610 --> 00:19:00.760
as more of an cinematic experience, now they
can provide function, Steve showed an example

00:19:00.760 --> 00:19:07.090
in the iPhone event a few months ago where he
used a Target ad, an ad for Target and he built

00:19:07.090 --> 00:19:10.810
up a shopping list during the ad and you could
email it to yourself so that when you went off

00:19:10.810 --> 00:19:17.100
to college you had all your furniture ready so but
really you want to give the user a great experience.

00:19:17.100 --> 00:19:22.910
Another thing to note is the application code or the HTML
code is not dynamic iAd network isn't a dynamic server

00:19:22.910 --> 00:19:27.250
and that you don't up load PHP or you don't have
some Rails application generating your ad,

00:19:27.250 --> 00:19:35.020
you've got to send the network static files, what that means
is that any customization or any features that you want

00:19:35.020 --> 00:19:42.630
to add to the ad are done inside JavaScript so that's why
again it means that these ads are really like mini-apps

00:19:42.630 --> 00:19:48.600
and to do mini-apps we need a framework which is
why we built iAd JS so let's get into the code.

00:19:48.600 --> 00:19:55.060
Now first up this is the index.html, this is the
file that the ad system loads when you tap on the banner.

00:19:55.060 --> 00:20:00.040
This b pretty normal, you've seen it before
if you've done web development for iPhone.

00:20:00.040 --> 00:20:04.170
The next one is where we start to
have fun; this is the iAd framework,

00:20:04.170 --> 00:20:07.530
from loading the style sheet and
the JavaScript for the iAd system.

00:20:07.530 --> 00:20:13.260
Now what this means is every ad actually has 
runtime packaged with it or if you're using iAd JS.

00:20:13.260 --> 00:20:18.370
The only thing this is, you know it's sort of a dynamic
system, you get to control exactly what the user gets

00:20:18.370 --> 00:20:22.100
and you can manipulate your ad to send
it the least amount of code possible.

00:20:22.100 --> 00:20:27.190
Next I'm going to load my actual
code, my application code and my CSS.

00:20:27.190 --> 00:20:32.880
Now I've just sent one file here but we'll get into reasons
later as to why you might want to split your application

00:20:32.880 --> 00:20:38.480
up into multiple files to help the application load
quicker so let's have a look at the main application.

00:20:38.480 --> 00:20:44.500
What every application needs a main function or some
entry point that's actually got to start the app.

00:20:44.500 --> 00:20:50.920
And we call it the ADRootControl, AD is
just a prefix that iAd JS classes have.

00:20:50.920 --> 00:20:56.390
If you're familiar with native programming you
understand the root view is sort of the main window

00:20:56.390 --> 00:20:59.930
of the application, in HTML it's the body of the document.

00:20:59.930 --> 00:21:05.330
So we've got this attachment to the root view and what an
application is going to do is manage what views which is

00:21:05.330 --> 00:21:10.860
like controls or buttons or content what views are
visible in the main window of the application at any time

00:21:10.860 --> 00:21:15.190
so it's going to cycle between
different things as the user navigates.

00:21:15.190 --> 00:21:21.140
Let's look at the code for that, you don't have to worry,
most of this code is in fact boilerplate that you can skip

00:21:21.140 --> 00:21:23.590
and as I said the next session
will get into it in more detail.

00:21:23.590 --> 00:21:28.170
What we're just going to do is look at it I declared
a global variable controller and that's going

00:21:28.170 --> 00:21:34.980
to be the main application, now I create an event
listener to the DOM content loaded function,

00:21:34.980 --> 00:21:42.690
what that means is I want this code to execute as soon
as the application is ready so as soon as all the content

00:21:42.690 --> 00:21:46.070
of the document is loaded it doesn't necessarily
mean that all the images have arrived,

00:21:46.070 --> 00:21:50.470
this is the first time I can execute code and I actually
want to create a new application controller object.

00:21:50.470 --> 00:21:56.450
So let's have a look at that, first off I
define it's superclass to be ADRootViewControl

00:21:56.450 --> 00:22:01.570
so I'm defining a class called application controller
that inher from ADRootViewController now you might know

00:22:01.570 --> 00:22:07.940
that JavaScript doesn't do inheritance, traditionally
iAd JS adds it's own inheritance model we get into later.

00:22:07.940 --> 00:22:11.560
Let's have a look at just the constructor, all I
really want to do at the moment is construct the menu,

00:22:11.560 --> 00:22:14.750
so I'm constructing a menu and then
I add that menu to the root view

00:22:14.750 --> 00:22:17.330
of the document or the root view of the application.

00:22:17.330 --> 00:22:23.050
Now I actually lied a bit when I was saying what a root view
controller does is manage views you don't really want to do

00:22:23.050 --> 00:22:27.770
that because it's not necessarily to
know...it is not necessary to know every view

00:22:27.770 --> 00:22:30.600
or every control that's in your application at any one time.

00:22:30.600 --> 00:22:36.480
What you really want to do is talk at a high level
to sort of managed objects or collections of objects

00:22:36.480 --> 00:22:40.060
and we call these view controllers and
again this is something you're familiar

00:22:40.060 --> 00:22:42.740
with if you've done iOS native development.

00:22:42.740 --> 00:22:47.080
An example is the menu, you don't need to know all
the buttons that are on the menu all you really need

00:22:47.080 --> 00:22:53.860
to know is what button was pressed so as the root...the main
function of your application just needs to say here's a menu

00:22:53.860 --> 00:22:57.850
and I trust that menu to do the right thing
and tell me when something has happened.

00:22:57.850 --> 00:23:01.900
So all you're really doing then is
managing what view controllers are visible.

00:23:01.900 --> 00:23:06.480
So what is a view controller, we're going to build a
view controller for the menu called miniview controller,

00:23:06.480 --> 00:23:11.980
We basically split it into three parts, so that the
logic, which is the JavaScript code behind the menu,

00:23:11.980 --> 00:23:17.260
there's the view, which is sort of the model and we
try and do that in HTML because we are programming HTML

00:23:17.260 --> 00:23:22.220
but it's nice that we can write declarative code
that says what the actual content of the menu is

00:23:22.220 --> 00:23:25.740
and then the third bit is styles, we want
to give that menu some kind of appearance.

00:23:25.740 --> 00:23:32.310
We split that into three files, as you expect it
is a JavaScript files an HTML file and a CSS file

00:23:32.310 --> 00:23:37.570
and the good thing is and I'll get to this
later by separating this way we can then reuse

00:23:37.570 --> 00:23:41.590
that logic behind the menu controller
with different views and different styles

00:23:41.590 --> 00:23:44.810
without having to change our JavaScript code.

00:23:44.810 --> 00:23:50.500
So let's have a look at exactly what was happening
here, this is the menu, it's sliding up- and downstream,

00:23:50.500 --> 00:23:54.510
it's really got two things, it's got a
toggle button that is in the top right corner

00:23:54.510 --> 00:23:58.690
that determines whether the menu is visible
or active or not and then we've got a set

00:23:58.690 --> 00:24:00.450
of buttons that respond to using actions.

00:24:00.450 --> 00:24:03.290
Let's build this menu.

00:24:03.290 --> 00:24:14.500
Pardon me, the first thing is two properties, there's two
main functions, two main API's to the menu controller,

00:24:14.500 --> 00:24:20.560
I'm going to define properties, the visible whether the menu
is actually active or not, it's a balloon and then we go

00:24:20.560 --> 00:24:24.290
to delegate and that's the object, the
other object in our application that's got

00:24:24.290 --> 00:24:27.980
to be told when the user clicks on a button.

00:24:27.980 --> 00:24:34.140
Now this configuration we do in iAd JS, we give the
menu an ID so that we can create multiple instances

00:24:34.140 --> 00:24:38.010
of these menus potentially and reference them by name.

00:24:38.010 --> 00:24:45.050
We also tell it what HTML snippet, we have a little file of
HTML that we load and it gets processed, we show that next

00:24:45.050 --> 00:24:49.110
and we say that it's, inherits
from the view controller class.

00:24:49.110 --> 00:24:55.740
Let's have a look at...oh, sorry, so the two really
important things you need, again forget about the rest

00:24:55.740 --> 00:25:01.390
of the boilerplate code there's really only two things,
whether the menu is visible or not and that allows us to,

00:25:01.390 --> 00:25:07.520
it's a synthesized property which allows it to say menu
visible true and iAd JS is actually going to run some code

00:25:07.520 --> 00:25:11.220
under the hood to do something when
that happens, we show that later.

00:25:11.220 --> 00:25:15.820
The other property is delegate which means I can
say to the delegate object a menu was touched

00:25:15.820 --> 00:25:18.130
when I know the user has tapped on a button.

00:25:18.130 --> 00:25:22.610
So let's have a look at the actual view
that we're loading into the application,

00:25:22.610 --> 00:25:27.680
so you can see in the screen shot it's really
five buttons...sorry there's two types of buttons,

00:25:27.680 --> 00:25:33.020
one is a toggle button and then in the top corner and
then there are five buttons that are actually the menu.

00:25:33.020 --> 00:25:39.690
Now there's some magic here we do, we don't...you could
create this menu purely in JavaScript if you wanted

00:25:39.690 --> 00:25:42.370
but we want to give you a declarative format to do it.

00:25:42.370 --> 00:25:50.070
So the snippet below, we put a magic class variable
on the HTML and that's ad-view and when iAd JS sees

00:25:50.070 --> 00:25:58.510
that class it starts processing that HTML in attaching some
JavaScript objects so that you can interact with it directly

00:25:58.510 --> 00:26:01.580
from code without having to look it up all the time.

00:26:01.580 --> 00:26:06.970
The other thing is we add buttons, AD button again, iAd
JS is looking for these and actually makes button objects

00:26:06.970 --> 00:26:11.410
out of them so it knows when the user has tapped on them.

00:26:11.410 --> 00:26:17.730
We give the buttons a title and then lastly we've got
another type of button which is the toggle button,

00:26:17.730 --> 00:26:22.100
so there's five buttons for the
menu and then one toggle button.

00:26:22.100 --> 00:26:29.170
The CSS is pretty easy, first thing I do is because
I have a menu, iAd JS has given me a container object

00:26:29.170 --> 00:26:33.500
for that menu automatically as I load the view into
the page, I want to make sure the view is always on top

00:26:33.500 --> 00:26:36.120
of every other element in the page
so I give it a Z index of 1.

00:26:36.120 --> 00:26:43.720
The rest of it is pretty simple but there is one thing that
is important, that interaction where the menu slides up

00:26:43.720 --> 00:26:47.320
and down I don't want to have to write JavaScript for
that I'm going to try to do it purely through CSS,

00:26:47.320 --> 00:26:53.080
so what I'm going to do is I'm going to start off with a
menu and it's got to transform, translate wide 550 pixels,

00:26:53.080 --> 00:26:58.170
what that means is while it would be normally on
the page I've moved it down 500 so that only the lip

00:26:58.170 --> 00:27:00.130
of it is peeking out from the bottom of the app.

00:27:00.130 --> 00:27:04.470
I also give it a transition to say
when I change that transform I want you

00:27:04.470 --> 00:27:07.920
to move over 400 milliseconds about half second.

00:27:07.920 --> 00:27:18.170
Now how do I actually get it to move, CSS is a great way
to design UIs because most UIs transitions between states

00:27:18.170 --> 00:27:25.110
of an application and CSS has class variables that allow
you to define your states declaratively so what I want

00:27:25.110 --> 00:27:30.220
to do is have that state for the application says
when my menu is visible when my menu isn't visible,

00:27:30.220 --> 00:27:34.000
I just add the class menu visible
when I want the menu to appear.

00:27:34.000 --> 00:27:39.410
Now I put it...this class in the body element because
when the menu is visible maybe other parts of the UI want

00:27:39.410 --> 00:27:44.570
to change as well so it's not really that the
menu has to know whether it's visible or not,

00:27:44.570 --> 00:27:48.420
I put it on the body so let's say that other views in
the background can hide themselves because they know

00:27:48.420 --> 00:27:51.300
that the menu is being displayed over the top of them.

00:27:51.300 --> 00:27:56.180
So when the menu is visible I'm giving it a
transform, translate Y, 0 pixels which brings it

00:27:56.180 --> 00:28:00.930
to where it normally should be right front and center in
the application and that will happen over 400 milliseconds.

00:28:00.930 --> 00:28:07.560
So that's the effect we're trying to go for.

00:28:07.560 --> 00:28:13.640
Now how did I actually add that class to the body,
remember I said that there was synthesized properties,

00:28:13.640 --> 00:28:19.210
so we have this, the menu object has a visible property
and when I set that visible property I'll actually want

00:28:19.210 --> 00:28:26.030
to run some code and iAd JS will look for a function
called setPropertyName, in this case setVisible

00:28:26.030 --> 00:28:33.380
that can give you a class implements this function that
code will be executed when the property is set so here I am

00:28:33.380 --> 00:28:38.490
and I just look at the value of
the visible that's coming in,

00:28:38.490 --> 00:28:44.160
I either add or move that class
name from the body of the document.

00:28:44.160 --> 00:28:47.530
Also I want to keep actually a copy
of the value that I'm setting in,

00:28:47.530 --> 00:28:51.060
in this case I assign it to the underscore invisible object.

00:28:51.060 --> 00:28:57.900
Now there's a function called contentViewDidLoad, this gets
executed when your view is ready to be displayed on screen

00:28:57.900 --> 00:29:03.980
or when it's ready to actually have the application
displayed on the screen if the application chooses to.

00:29:03.980 --> 00:29:10.280
There's really two things we want to do in our...in
this function for menus and that is and this is we want

00:29:10.280 --> 00:29:14.590
to add an event listener for the toggle button, so we
want to know when the user has tapped on the toggle button

00:29:14.590 --> 00:29:22.070
and this is pretty simple, we find the menu toggle button
by the query selective function and we add an event listener

00:29:22.070 --> 00:29:26.050
for the AD control TouchupInsideEvent,
we got some great names for events.

00:29:26.050 --> 00:29:31.260
So really what that does is abstract
the function which is when the user taps

00:29:31.260 --> 00:29:33.250
on something and releases their finger on something.

00:29:33.250 --> 00:29:38.790
Now if you've done some touch programming on iPhone
you'll know that it can be actually quite complicated

00:29:38.790 --> 00:29:44.300
to know exactly what things are being touched on when
the user moves and what elements are being released

00:29:44.300 --> 00:29:48.400
on so we've tried to abstract all that
for you so we just give you one function,

00:29:48.400 --> 00:29:55.020
we define this event that we've generated so that you just
write one line of code, you attach the event listener,

00:29:55.020 --> 00:30:00.690
I've given the menu controller itself as the
listener object because I want to get told,

00:30:00.690 --> 00:30:05.970
I don't want have to write a closure for this case, I
just want to get all my event processing in one function.

00:30:05.970 --> 00:30:08.480
Next I'm just going to iterate
the buttons that are in the menu

00:30:08.480 --> 00:30:11.500
and do the same thing add an event listener for user touch.

00:30:11.500 --> 00:30:18.160
In that handle, in that event this is, if you're
not familiar DOM events give you a feature

00:30:18.160 --> 00:30:23.980
where in most cases people would say add event listener,
event name and then give a little in line function

00:30:23.980 --> 00:30:26.480
or the name of a function or string that it will be called.

00:30:26.480 --> 00:30:33.350
You can also pass in an object and if you pass that object
the event system will look for a function called handleEvent

00:30:33.350 --> 00:30:39.010
on that object and it's a great way to collapse all your
event processing in your application to one function

00:30:39.010 --> 00:30:43.940
so here I'm getting an event type of ADO, I'll just check
that we got the right type of event and I want to do one

00:30:43.940 --> 00:30:48.390
of two things if I was tapping on one of the menu
items I'm going to tell my delegate that I was tapped

00:30:48.390 --> 00:30:54.370
or if it's a toggle button all I want to do is invert
the state of the visible variable and this is the thing

00:30:54.370 --> 00:30:58.400
that will actually execute that code we
said before which will swap the class

00:30:58.400 --> 00:31:02.060
in the body and do the animation automatically.

00:31:02.060 --> 00:31:08.830
Now the rest of the application is actually pretty easy,
we've got a menu controller, all we're doing now is tapping

00:31:08.830 --> 00:31:13.930
on those buttons and the application is just showing
another menu...another view controller depending

00:31:13.930 --> 00:31:15.240
on what the user taps on.

00:31:15.240 --> 00:31:21.920
So I've interacted with this one, we'll go back to the
menu, tap on something, another view controller is loaded

00:31:21.920 --> 00:31:25.650
so all we have to do is go through
and make view controllers for the rest

00:31:25.650 --> 00:31:28.110
of the screens of the views in your application.

00:31:28.110 --> 00:31:32.430
I'm not going to go into that because they're
really all the same as the menu controller.

00:31:32.430 --> 00:31:37.970
What I am going to show you is what happens how the
application is in fact going to swap between the views.

00:31:37.970 --> 00:31:44.090
So this is the delegate function in the main application
this is called when the user has tapped on a button

00:31:44.090 --> 00:31:47.610
and all I want to know is what
button was tapped on and therefore

00:31:47.610 --> 00:31:50.580
which view controller am I going
to display in my application.

00:31:50.580 --> 00:31:59.620
I just load the view controller and set it to be visible but
that was really the hard way, I know what you're thinking,

00:31:59.620 --> 00:32:05.650
I said at the start, I'm writing less code, this is a lot
of code in fact I didn't really need to show you anything

00:32:05.650 --> 00:32:09.340
because most applications they're just going
to be transitions between view controllers.

00:32:09.340 --> 00:32:15.590
So we thought well let's make this easy for the developer,
we actually add an attribute called AD transitions

00:32:15.590 --> 00:32:22.150
on your HTML element which means that you can
remove all that event listing and processing code

00:32:22.150 --> 00:32:25.540
and the framework itself will handle what views are visible.

00:32:25.540 --> 00:32:29.750
Let's have a look at how we did that if you
remember before we were just specifying buttons,

00:32:29.750 --> 00:32:35.850
this time I've added just this variable, what I mean
is when I click on this button which is the first item

00:32:35.850 --> 00:32:42.960
in the menu I want the application to transition
to the house view controller and it shows the page

00:32:42.960 --> 00:32:46.150
with the page table view of house prices.

00:32:46.150 --> 00:32:48.930
You're probably also wondering how I can read minds.

00:32:48.930 --> 00:32:57.300
So importantly first impressions count if
you were downloading this application tapping

00:32:57.300 --> 00:33:02.630
on the banner you don't want to have to download that whole
application, make the user wait for the whole application

00:33:02.630 --> 00:33:06.500
to come and all its images, this
will be a pretty bad experience.

00:33:06.500 --> 00:33:12.640
What you really want to do is sort of have some we call
it a preloader or it's really a bootstrap mechanism,

00:33:12.640 --> 00:33:16.250
you want to give the user something they can
interact with and they can gage with straight away,

00:33:16.250 --> 00:33:22.020
that might be some kind of animation but also it
could be say you know even a little game or something

00:33:22.020 --> 00:33:26.570
that iAd JS gives you a way to sort
of dynamically load classes at runtime

00:33:26.570 --> 00:33:33.470
and that's why we split the view controllers into separate
files because maybe we want to create the view controllers

00:33:33.470 --> 00:33:37.410
up front but we don't want to load the content
in which will trigger the loading of images,

00:33:37.410 --> 00:33:41.060
so up front we get this really great
interaction with the application

00:33:41.060 --> 00:33:46.160
and then while the user is seeing something
the content is downloading in the background.

00:33:46.160 --> 00:33:54.450
We actually provide another feature within iAd to do this,
your ad can provide a manifest file which is a list of files

00:33:54.450 --> 00:34:01.340
in your ad that are packaged into web application
and sent as one hit so it's always the first request

00:34:01.340 --> 00:34:08.370
in the ad interaction and then it's expanded on the client
and the rest of the content can come down as you need it.

00:34:08.370 --> 00:34:12.660
Okay so what have you learned, you should
structure your application around view controllers,

00:34:12.660 --> 00:34:17.960
very similar to the way you would develop a native app if
you're familiar with that, try and represent your sites

00:34:17.960 --> 00:34:24.880
as CSS because that allows you to do lots of
animation without having to do animation in JavaScript.

00:34:24.880 --> 00:34:29.010
Also preload your content if you can.

00:34:29.010 --> 00:34:33.530
So that was part two.

00:34:33.530 --> 00:34:40.340
Now part three we're going to add some bling.

00:34:40.340 --> 00:34:46.670
So when you play video on the iPhone in
Safari you know that it plays full screen

00:34:46.670 --> 00:34:53.590
and this gives you the default iPod's style playback
with the dumb button, scrub up, play, pause,

00:34:53.590 --> 00:35:00.310
whatever but earlier in the demo I showed the ad was
playing video in line which is actually very similar

00:35:00.310 --> 00:35:07.710
to the way iPad plays video, this isn't available
in iPhone but it is available in iAds and the reason

00:35:07.710 --> 00:35:13.430
for this is you might want to say create your own custom
controller or custom experience or have video playing

00:35:13.430 --> 00:35:17.650
in the background of an ad and layer HTML content above it.

00:35:17.650 --> 00:35:24.550
In the normal form you know the video takes over the whole
screen, you're basically completely immersed in the video.

00:35:24.550 --> 00:35:30.740
The way you do this is you add a WebKit plays inline
attribute to your video element, so within the iAd system

00:35:30.740 --> 00:35:35.660
if you say WebKit plays in line it will
actually give the iPad style experience

00:35:35.660 --> 00:35:39.650
and here I've added the controls actually because I want
to give the default controls but I could have left them off

00:35:39.650 --> 00:35:43.550
and provided some kind of control within JavaScript myself.

00:35:45.010 --> 00:35:54.050
Secondly, the window object within the browser or within
the content has got this AD object or AD property on it

00:35:54.050 --> 00:35:56.190
and this allows you to do some cool things.

00:35:56.190 --> 00:36:02.320
It allows you to set the user wallpaper if for example
you've got an image that you want to use it to allow to save

00:36:02.320 --> 00:36:08.020
into their photo gallery, it let's you display
maps, this is how you interact with the map system,

00:36:08.020 --> 00:36:12.010
purchase content directly from the iTunes Store.

00:36:12.010 --> 00:36:20.960
Steve showed shaky events so you get called when the
user has shaken the phone and also normally if you are

00:36:20.960 --> 00:36:25.420
building an ad, you might want to know what views
and what controls the user is most interested in

00:36:25.420 --> 00:36:32.460
and the ad object allows you to send notifications back
to the iAd system which is the aggregated enormously

00:36:32.460 --> 00:36:38.580
to show sort of like statistics of what parts
of your ad the user has interacted with.

00:36:38.580 --> 00:36:44.530
So let's look at saving images, it's actually really
easy, there's two functions, window.ad.setimageswallpaper

00:36:44.530 --> 00:36:51.370
and you give it a URL to an image, you give it a prompt
that the user has got to get when this function executes

00:36:51.370 --> 00:36:54.170
and even a listener object we'll
talk about that in a minute.

00:36:54.170 --> 00:36:59.010
What happens is when you execute that function, the
typical popup will slide over the whole screen

00:36:59.010 --> 00:37:04.100
and it will show you the prompt and allow the user to pinch
and zoom, place the wallpaper as they want and then set it

00:37:04.100 --> 00:37:07.030
to be the home screen or the lock screen or whatever.

00:37:07.030 --> 00:37:10.880
Similarly if they want to save the...if you
want the user to be able to save the image

00:37:10.880 --> 00:37:13.540
to their photo album maybe email it to their friends,

00:37:13.540 --> 00:37:17.970
there's writeImageToSavedPhotosAlbum
again you give it a URL and a listener.

00:37:17.970 --> 00:37:19.520
And what is the listener object.

00:37:19.520 --> 00:37:24.910
If you're not familiar with JavaScript, JavaScript
really only executes in one thread so you don't want

00:37:24.910 --> 00:37:28.610
to block your URL when something is happening.

00:37:28.610 --> 00:37:34.050
So this URL if you called this function it might not
be in your ad itself, it might be on the internet,

00:37:34.050 --> 00:37:40.060
you might be saying I want to user to save the URL, this
image from a remote site, you don't want the whole URL

00:37:40.060 --> 00:37:42.270
to block while that image is being downloaded.

00:37:42.270 --> 00:37:47.200
So JavaScript normally the functions are
asynchronous, you call this method and then later

00:37:47.200 --> 00:37:51.500
on when it actually executes you get to be
told about it so we have this listener object,

00:37:51.500 --> 00:37:59.570
this listener object has callback functions, four functions
here that get called when the function is actually executed.

00:37:59.570 --> 00:38:04.590
They're pretty obvious, you get succeed and
failed calls when users either save the wallpaper

00:38:04.590 --> 00:38:09.920
or save the photo albums so you pop up a
message to say thanks very much or whatever.

00:38:09.920 --> 00:38:16.600
Secondly using maps, so really maps
in ads is a new interface to MapKit,

00:38:16.600 --> 00:38:21.600
they're drawing above all content this is different
from other things, you can't over lay HTML above a map,

00:38:21.600 --> 00:38:25.960
it's really sort of like a plug in
that's being displayed above your ad,

00:38:25.960 --> 00:38:30.340
this is important for a few reasons we'll get into later.

00:38:30.340 --> 00:38:35.390
You can ad your own annotations, you can give
them custom pin images, any number of pin images,

00:38:35.390 --> 00:38:41.290
you can show where the user currently is, you get
notified when the user zooms to somewhere or pans

00:38:41.290 --> 00:38:47.760
or you can literally control the view that the user
is seeing and let them zoom to a particular spot.

00:38:47.760 --> 00:38:53.770
So let's create the map, now I mentioned they're
drawn above all content what this, really important,

00:38:53.770 --> 00:38:58.750
means is that you don't want the map to be, you don't
want it instantiate right away in your application

00:38:58.750 --> 00:39:04.600
because it will hide your ad, what you want to do
is create it within the viewDidAppear object,

00:39:04.600 --> 00:39:09.270
this is a function that's called
when you decide to display your view.

00:39:09.270 --> 00:39:16.490
I'm just going to create it here, it's pretty simple,
I add the listener so I'm attaching my I/O object

00:39:16.490 --> 00:39:24.000
as the object that's going to get called when the
user interacts with the map, I said it's to be hidden,

00:39:24.000 --> 00:39:29.420
faults which basically just draws it and I give
it an inset frame x y width height which describes

00:39:29.420 --> 00:39:34.280
where within the window of the ad
the map frame is going to be drawn.

00:39:34.280 --> 00:39:39.990
Then add some annotations which I will do in the next slide
and lastly I'm going to let the user decide where they are

00:39:39.990 --> 00:39:43.110
and you know you don't get access
to it, it's the same popup,

00:39:43.110 --> 00:39:47.280
you know do you allow this ad to see your current location.

00:39:47.280 --> 00:39:54.610
Now the annotations are pretty easy, obviously they
[got a lat, long, this is their position and the name of the description,

00:39:54.610 --> 00:39:59.490
now this is the title and subtitle of the callouts,
I'm going to use the taps on a pin as you might know,

00:39:59.490 --> 00:40:04.580
a little dialogue box pops up to give the title and
subtitle, in this case it's the name of the description,

00:40:04.580 --> 00:40:11.160
you pass into the map annotation class, you give each
annotation an ID and that's because when you tap on it later

00:40:11.160 --> 00:40:15.840
or maybe when you want to remove it you'll
know which pin it is you want to remove.

00:40:15.840 --> 00:40:21.420
You give it a callback function, if you could provide
a callback function can apply null or a function,

00:40:21.420 --> 00:40:23.230
when you use a taps on the pin, the callout will happen

00:40:23.230 --> 00:40:28.430
and the callout the callout will have a little disclosure
indicator for the function, that way you can do something

00:40:28.430 --> 00:40:33.500
like you know if you're showing stores, you know when
the user has tapped on the callout and maybe show

00:40:33.500 --> 00:40:38.760
like directions or more like information
or current inventory in the store.

00:40:38.760 --> 00:40:44.540
You also give it an image for the URL of the actual
pin or null if you just want to use the default one.

00:40:44.540 --> 00:40:51.580
Now the pinning image is slightly interesting, when you
put a pin image or when you use a pin image it's going

00:40:51.580 --> 00:40:55.560
to be centered directly above the
lat/long that you've provided.

00:40:55.560 --> 00:41:01.850
Now what this means is in an image such as this which
have blown up a pin the center of the image is in fact not

00:41:01.850 --> 00:41:07.770
where this sort of imaginary cartoon pin is actually
dropping into the ground so if I was centering

00:41:07.770 --> 00:41:12.620
over that point when the user is panning or zooming in it
would look like the actual location of where the bottom

00:41:12.620 --> 00:41:17.530
of the pin is, is moving around so I'm going to tell
the system as I create an annotation what the offset

00:41:17.530 --> 00:41:23.130
from the center of that image is to where I'm
sort of visually describing to the location,

00:41:23.130 --> 00:41:29.170
in this case I'm going 9 pixels left and 16
pixels down within the image coordinates.

00:41:29.170 --> 00:41:32.980
Lastly I used windows.mapadd.mapadannotation,

00:41:32.980 --> 00:41:38.500
adding that annotation I've just created
and that will drop it into the map.

00:41:38.500 --> 00:41:45.420
Lastly when I made the map visible when the view appeared
I want to get called just before the view is going

00:41:45.420 --> 00:41:50.500
to disappear and this is where I just set the map to be
hidden so I remove it from the view and then the rest

00:41:50.500 --> 00:41:54.860
of the view is removed as well and
the menu appears or is whatever.

00:41:54.860 --> 00:41:57.210
So purchase content from iTunes.

00:41:57.210 --> 00:42:06.610
There's four types of content you can purchase, iOS apps
such as Birdhouse, iBooks such as To Kill A Mockingbird,

00:42:06.610 --> 00:42:19.480
songs such as the Birds, Turn, Turn, Turn or movies such
as Twilight, it's cool, I've heard it's cool anyway.

00:42:19.480 --> 00:42:24.180
Three ways you can do this, firstly...sorry,
three steps you have to do to do this,

00:42:24.180 --> 00:42:28.370
firstly you have to register your content with
iTunes, you have to tell the iTunes system what it is

00:42:28.370 --> 00:42:35.730
that you're actually going to try and sell, next you
have to look up the items with iTunes to get information

00:42:35.730 --> 00:42:42.130
about that object and the reason for this is, the purchases
happening with the account on the phone , the users account

00:42:42.130 --> 00:42:48.580
and their account might be linked to a
different store, so it's got a different price,

00:42:48.580 --> 00:42:54.190
it has a different name depending on their location or what
store they're doing or it might not even be for sale in you

00:42:54.190 --> 00:43:02.350
if the user is say, you know, multiple items are not
available in every store depending on the geography.

00:43:02.350 --> 00:43:06.080
Lastly when we've got that we actually want to
initiate a purchase and when we tap on a Buy button

00:43:06.080 --> 00:43:11.050
that you've provided or something we've got to pop
up a dialogue to confirm, the user gets to confirm,

00:43:11.050 --> 00:43:17.930
it says do you want to purchase the awesome movie Twilight
for this much money and they sign in like they normally do

00:43:17.930 --> 00:43:21.150
and buy it, if it's an app it will
download the app in the background

00:43:21.150 --> 00:43:26.410
so when they exit the app they've got your app ready to run.

00:43:26.410 --> 00:43:30.350
So let's have a look at actually how we have to...we
have to find out how we sell something on iTunes,

00:43:30.350 --> 00:43:34.030
we have to know what object we've got to sell so we'll
look at this, the first thing you notice is I need

00:43:34.030 --> 00:43:40.910
to recharge my iTunes credit, second thing is
we've got this little Buy App button over here

00:43:40.910 --> 00:43:46.820
and there's this disclosure we click on that, this
context menu pops up and at this point you probably want

00:43:46.820 --> 00:43:51.210
to share this awesome app with your new friend
Dean on Facebook or you want to copy the link

00:43:51.210 --> 00:43:55.710
and let's see what we do when we copy the link,
we'll paste it into something so we can see it.

00:43:55.710 --> 00:44:00.760
If it's a movie you get this long complicated URL
and in there is an ID and that's the iTunes ID

00:44:00.760 --> 00:44:07.010
that you've actually going to use later when you
sell that application or the movie in this case

00:44:07.010 --> 00:44:08.550
on the iTunes Store so that's how we find the ID.

00:44:08.550 --> 00:44:16.080
If it's a song is slightly different and a little
tricky, in this case the song is sold by album,

00:44:16.080 --> 00:44:21.920
we can only sell songs directly in ads so
we need the ID that's at the of the URL,

00:44:21.920 --> 00:44:27.290
not the ID that's a little bit before that's
the ID of the album so we want the last one.

00:44:27.290 --> 00:44:32.960
This application is pretty similar to a
movie, you'll see your ID's in the behind.

00:44:32.960 --> 00:44:38.310
So what do we do, the first thing we want to do is I've got
this array of store items, as I said I need to register,

00:44:38.310 --> 00:44:44.190
I need to tell iTunes these are the things I'm going to
sell inside my ad, just call this function window.ad.store,

00:44:44.190 --> 00:44:50.380
register items for purchase, send in an array of
everything that I potentially need to sell, want to sell,

00:44:50.380 --> 00:44:56.530
next I'm going to iterate over all those items and say look
up the item, this is the state where we're asking iTunes

00:44:56.530 --> 00:45:02.660
to tell us about it so we can then sell it to the
user so I call look up item with ID, I give it an item

00:45:02.660 --> 00:45:07.270
and importantly I also give it a listener
because iTunes is going to send data back to us,

00:45:07.270 --> 00:45:12.480
we don't want to block waiting for that data to come
back we just want to do the look up and get told later.

00:45:12.480 --> 00:45:18.880
This is what's going to happen with this next function
is what happens when we actually get the result back,

00:45:18.880 --> 00:45:23.070
you either get told it was failed in which case
you might remove the Buy button from your ad

00:45:23.070 --> 00:45:29.980
or if it succeeded you want to get the data that
comes back has got an offer associated with it,

00:45:29.980 --> 00:45:35.060
that means that means that item is sort of valid
for a certain amount of time on the iTunes Store,

00:45:35.060 --> 00:45:39.050
you need to keep a reference to that so that...because
you use it later when you're purchasing and that data

00:45:39.050 --> 00:45:44.440
that comes back has something has something like maybe the
localized name and price that you can display to the user

00:45:44.440 --> 00:45:48.290
if you want, you need to keep track of the offer ID.

00:45:48.290 --> 00:45:55.150
Purchasing is really easy, window.ad.store, purchase item
with ID, we give it the ID of the stuff we want to purchase,

00:45:55.150 --> 00:46:00.610
we use the offer that we received back from
iTunes and again we pass in a listener object

00:46:00.610 --> 00:46:06.410
and we've got those two callback functions,
whether the store item purchase succeeded,

00:46:06.410 --> 00:46:09.810
thanks for buying my awesome app or
it failed please try again later.

00:46:09.810 --> 00:46:14.630
So that was the enhancements through iAd.

00:46:14.630 --> 00:46:22.780
The last bit I said earlier on that we wanted to build as
little code as possible and I had to customize something

00:46:22.780 --> 00:46:29.270
so I've just got some demos of taking the menu that we built
or we built at the start or the middle of this presentation

00:46:29.270 --> 00:46:34.220
and see what things we can do just changing
the style sheet alone, not changing the code.

00:46:34.220 --> 00:46:49.190
So this is the iAd Tester application, so I ran it and if
I've dragged content into iTunes it syncs across the device

00:46:49.190 --> 00:46:54.790
into iAd Tester to this button and it will ask me
to pick from ads that I've synced onto the device.

00:46:54.790 --> 00:46:57.910
In this case I'm just going to pick this one.

00:46:57.910 --> 00:47:03.840
This one is selling a fake product called the assimilator,
it's pretty similar to the code you had before,

00:47:03.840 --> 00:47:08.270
but it's more than that, it's the exact same
code that you saw in the Treetops Realty demo,

00:47:08.270 --> 00:47:14.900
it's pretty much the same effect, nothing really
interesting there, let's pick another version,

00:47:14.900 --> 00:47:21.440
in this case I only changed the CSS and
I've just changed the CSS for what happens

00:47:21.440 --> 00:47:25.740
when the body is visible, in this
case it's got this 3D effect.

00:47:25.740 --> 00:47:31.840
This allows you to customize the menu to be what
ever you want for your particular application,

00:47:31.840 --> 00:47:41.080
let's go a bit further...now in this case again same code
no JavaScript changes what I've done is added a slightly

00:47:41.080 --> 00:47:44.650
different transition but I've also
added to the CSS a little delay

00:47:44.650 --> 00:47:49.300
so that every button it's got a little
slight transition delay on it's application.

00:47:49.300 --> 00:47:54.390
Again zero code change other than one line of CSS.

00:48:00.030 --> 00:48:05.460
Now this time what I'm showing is that in fact you
can sort of apply it to a completely different view

00:48:05.460 --> 00:48:10.220
in this case the menu has animated back ground, so
I've got images that are animating in the background,

00:48:10.220 --> 00:48:16.290
there's two images, they're the same and they are sort
of scaling and rotating behind so giving me animation

00:48:16.290 --> 00:48:19.860
and again I've got this sort of
nice doors effect as I animate.

00:48:19.860 --> 00:48:24.880
This is pretty cool because that means you've just
taken that one little component and you can reuse it

00:48:24.880 --> 00:48:29.830
in multiple ads or applications to show...you
know get a completely different effect.

00:48:29.830 --> 00:48:35.040
The last one I actually do change the code but I don't
change the JavaScript code I'm just changing the HTML

00:48:35.040 --> 00:48:41.130
that I'm loading, now in this case it's something you
might have seen around, this time my menu is this wheel

00:48:41.130 --> 00:48:47.590
and for the Madman fans out there,
it's not a wheel, it's a carousel.

00:48:47.590 --> 00:48:55.260
So in this case all I've done in the HTML is instead of
saying I'm in AD View, I've said I'm an AD carousel view

00:48:55.260 --> 00:49:00.220
and iAd JS is building this carousel
with all the interactions and the throw

00:49:00.220 --> 00:49:06.510
and it tells you what buttons are done, Steve called this
an HTML Gizmo, I thought that was a cool name as well.

00:49:06.510 --> 00:49:12.300
[ Applause ]

00:49:12.300 --> 00:49:20.200
Okay, so what have you learned, iAds really are just HTML
apps or mini-apps, we've got this framework that allows you

00:49:20.200 --> 00:49:25.730
to build really rich performing
applications, we hope you use it.

00:49:25.730 --> 00:49:31.190
You can use your existing skills and tools to create
them, there's been a whole great track of this conference

00:49:31.190 --> 00:49:36.940
about doing awesome things with CSS and JavaScript and
using the Web Inspector and all this great functionality

00:49:36.940 --> 00:49:44.750
that Safari has provided to make awesome
applications, ads are just HTML applications.

00:49:44.750 --> 00:49:50.500
Importantly, you've got to make an awesome
banner because you've got to get the user in

00:49:50.500 --> 00:49:55.780
and again like I said iAd JS framework is
something we think is really great and you can use

00:49:55.780 --> 00:50:01.450
to create great applications and
of course there's other features.

00:50:01.450 --> 00:50:07.900
Just before I say this, so I've been at Apple for a
while and one of the things like I really appreciated it,

00:50:07.900 --> 00:50:13.980
I'm being serious for once is that we've created all these
technologies and it's fun for us to create technologies,

00:50:13.980 --> 00:50:19.670
do awesome things and like highly performing but we're some
of the nerds behind the scene, what's the best thing is

00:50:19.670 --> 00:50:26.000
when you give like the web community a tool
and they sort of like really surprise you

00:50:26.000 --> 00:50:32.990
and for a great example is blogs popping up about like cool
things you can do with HTML5 and I'm really looking forward

00:50:32.990 --> 00:50:39.340
to you guys getting this framework which you can download
and doing awesome stuff and really blowing our minds.

00:50:39.340 --> 00:50:46.510
So for more information you probably heard Vickie
Murley's name if you've been here during the week,

00:50:46.510 --> 00:50:52.710
she's our Safari's Technology Evangelist, there's
some...Apple has some corporate sites on the iAd framework

00:50:52.710 --> 00:50:59.590
and a developer site and that's where you can download
the framework and the iAd Tester and a few other things.

00:50:59.590 --> 00:51:06.610
There's documentation up on developer.apple.com and there's
Developer Forums which I'm sure you're all familiar with.

00:51:06.610 --> 00:51:12.860
So, this I said was part one coming up
next is part two right after the break.

00:51:12.860 --> 00:51:22.520
Earlier in the week there was a session on if you're an
app developer actually using iAd within your native app,

00:51:22.520 --> 00:51:28.680
that's going to be...tomorrow there's a repeat of delivering
audio and video which is really important to the iAd network

00:51:28.680 --> 00:51:34.420
and there was some other sessions earlier
in the week that you've probably missed

00:51:34.420 --> 00:51:42.650
that I'm sure HTML6 will have time travel so you'll be fine
there that has CSS effects and another important one was how

00:51:42.650 --> 00:51:45.410
to do touch events which is something
quite tricky on iPhone.

