WEBVTT

00:00:06.070 --> 00:00:09.420
>> Chris Parker: Welcome to Session
111, the iPad Development Overview.

00:00:09.420 --> 00:00:11.220
My name is Chris Parker.

00:00:11.220 --> 00:00:18.560
I work on UIKit and this is, basically, we are going to
talk about how to take an iPhone application all the way

00:00:18.560 --> 00:00:23.790
through to become a fully universal iPhone and iPad app.

00:00:23.790 --> 00:00:29.490
So you have probably spent a bunch of time working on
your application, getting it really well tuned to work

00:00:29.490 --> 00:00:36.060
on an iPhone 3GS. The screen size lends
itself to a particular style of application.

00:00:36.060 --> 00:00:42.410
It tends more toward the navbar
style information navigation system.

00:00:42.410 --> 00:00:43.300
You know, you push on something.

00:00:43.300 --> 00:00:48.560
You push another view controller, you sort of drill
down into your data and you drill back out of your data,

00:00:48.560 --> 00:00:54.540
and then we went and did something kind of crazy and came
out with this iPad thing which has a much larger screen,

00:00:54.540 --> 00:01:00.690
and it lends itself to a different set of
behaviors for navigating user's information.

00:01:00.690 --> 00:01:01.740
It has a much larger screen.

00:01:01.740 --> 00:01:04.790
Those are actually proportionally correct, right.

00:01:04.790 --> 00:01:09.770
So the iPad is, let us call it, you
know, sort of roughly 4 iPhones maybe.

00:01:09.770 --> 00:01:15.140
But it does change both the way the user will
interact with the information in your application,

00:01:15.140 --> 00:01:21.980
and some of the design considerations in trying
to share code for a universal application.

00:01:21.980 --> 00:01:27.420
We'll talk today about some of the new UI
considerations of going from the iPhone to the iPad.

00:01:27.420 --> 00:01:29.480
It comes down to things like the initial appearance.

00:01:29.480 --> 00:01:35.640
What does your application look like when it first
launches, covering some things about rotation, transitions,

00:01:35.640 --> 00:01:40.320
and managing sort of the information density and
presentation, and two of the things that we have introduced

00:01:40.320 --> 00:01:45.590
for that are PopoverController and SplitViewController,
and we'll go into some detail on those.

00:01:45.590 --> 00:01:48.720
The main thing that we're working on here is
going to be universal applications and the things

00:01:48.720 --> 00:01:51.590
that you'll do in order to write for multiple SDKs.

00:01:51.590 --> 00:01:53.620
So you'll make some changes in Xcode.

00:01:53.620 --> 00:01:57.860
There are some API things to take into consideration
and you may have to think about symbol availability.

00:01:57.860 --> 00:02:05.000
So when we talk about what symbols are available
across the SDKs, we'll get to that in a bit.

00:02:05.000 --> 00:02:06.720
What does need to change in your project?

00:02:06.720 --> 00:02:09.170
You'll need to make some Xcode project settings.

00:02:09.170 --> 00:02:12.670
So the Base SDK, the deployment target,
the targeted device family will all have

00:02:12.670 --> 00:02:14.480
to change and we'll see that in a minute.

00:02:14.480 --> 00:02:17.350
You'll probably have to refactor some code, right.

00:02:17.350 --> 00:02:22.430
It's very simple in some ways to wind up
with a design where you're taking advantage

00:02:22.430 --> 00:02:28.790
of the fact you know everything that's on a navigation
stack and sort of crawl up and down that stack

00:02:28.790 --> 00:02:30.300
to be able to find the view controller you want.

00:02:30.300 --> 00:02:34.970
We'll talk about refactoring your code to try and make
it easier to share things when you start using things

00:02:34.970 --> 00:02:40.820
like split view controllers, and the emphasis there
is going to be on controllers which send actions,

00:02:40.820 --> 00:02:43.310
and then you're also probably going
to need to change your resources just

00:02:43.310 --> 00:02:47.760
like with the iPhone OS and iOS 4, the iPhone 4.

00:02:47.760 --> 00:02:53.570
You know, your designer is probably going to have to help
you out with getting some new resources either things

00:02:53.570 --> 00:02:59.520
for a larger screen or new artwork
that fits the larger form factor.

00:02:59.520 --> 00:03:01.010
So let's start out.

00:03:01.010 --> 00:03:05.010
I just want to talk a little bit about
Popovers and Split View Controllers.

00:03:05.010 --> 00:03:09.230
A UIPopoverController is not a UIViewController.

00:03:09.230 --> 00:03:10.950
It's its own managing controller.

00:03:10.950 --> 00:03:14.480
It's going to host a content view controller.

00:03:14.480 --> 00:03:21.040
That content view controller has a view that it manages and
that content view controller, that is where you are going

00:03:21.040 --> 00:03:24.380
to get the viewWillAppear, viewDidAppear,
messages, and things like that.

00:03:24.380 --> 00:03:28.030
That popover controller is usually owned by some object.

00:03:28.030 --> 00:03:29.800
It might be your application delegate.

00:03:29.800 --> 00:03:31.790
It might be another view controller.

00:03:31.790 --> 00:03:39.080
You know, it is something that is going to manage
the popover lifetime itself and you create these just

00:03:39.080 --> 00:03:41.440
by calling initWithContentViewController.

00:03:41.440 --> 00:03:46.520
For those of you who are in the Cocoa Touch
section, this slide probably looks familiar.

00:03:46.520 --> 00:03:50.640
ContentViewController allows you to change
which content view controller is present.

00:03:50.640 --> 00:03:57.060
popoverContentSize allows you to change the popover content
size while it's up so you can animate size changes for that

00:03:57.060 --> 00:04:04.580
and the passthroughViews is a way you can use a list of
views that you'll pass this where the user can interact

00:04:04.580 --> 00:04:08.600
with those views while the popover is up.

00:04:08.600 --> 00:04:12.900
You present a popover controller
using presentPopoverFromRect:inView:

00:04:12.900 --> 00:04:14.530
permittedArrowDirections animation.

00:04:14.530 --> 00:04:20.060
That rect that you pass in is in the
coordinate system of the containing view.

00:04:20.060 --> 00:04:24.480
So if you find that the popover is suddenly showing up
in some funny location, you probably want to make sure

00:04:24.480 --> 00:04:29.510
that you've passed the correct thing and in a
lot of times, you'll be passing view bounds.

00:04:29.510 --> 00:04:32.920
If you pass view frame, you'll get
some really funny, funny results.

00:04:32.920 --> 00:04:36.760
PopoverArrowDirections allows you to
control where the thing gets laid out.

00:04:36.760 --> 00:04:43.280
There is an algorithm in UIKit where we try to maximize
the area of the popover controller you're displaying,

00:04:43.280 --> 00:04:46.080
and we'll figure out whether it
belongs on the left or the right,

00:04:46.080 --> 00:04:48.900
or the top or the bottom depending
on what the content size is.

00:04:48.900 --> 00:04:53.780
If you need to display this sort of bar button item,
we know that you can have the toolbars up on top

00:04:53.780 --> 00:04:59.480
of the UIViewControllers at the top of the view, so you may
want to be able to display a popover from bar button item.

00:04:59.480 --> 00:05:02.470
You do that just with presentPopoverFromBarButtonItem.

00:05:02.470 --> 00:05:05.840
When you dismiss these things, you
will call the dismissPopoverAnimated.

00:05:05.840 --> 00:05:09.250
We don't send the delegate methods
because those are for the user controls.

00:05:09.250 --> 00:05:18.390
The delegate methods are popoverShouldDismissPopover
and DidDismiss, and the should is really both I'm

00:05:18.390 --> 00:05:24.740
about to dismiss this notification and your opportunity
to decide whether or not you want to actually dismiss it.

00:05:24.740 --> 00:05:29.470
I have just a little bright red square here.

00:05:29.470 --> 00:05:33.930
That bright red square is actually
something that I can drag and it will return

00:05:33.930 --> 00:05:38.840
to its center point, and let me take a look at that.

00:05:38.840 --> 00:05:41.150
This is all of the code for that.

00:05:41.150 --> 00:05:47.950
It's called an anchored view and all I'm doing
here is using a pan gesture recognizer to find

00:05:47.950 --> 00:05:50.970
out where I've tapped in the view so I can drag it.

00:05:50.970 --> 00:05:56.680
And as the gesture recognizer moves
through its states, I'm-- when I state--

00:05:56.680 --> 00:06:00.920
when I get UIGestureRecognizerStateBegan for
the pan gesture recognizer, I am going ahead

00:06:00.920 --> 00:06:06.780
and just setting its translation
and view to its own anchor point.

00:06:06.780 --> 00:06:11.360
Its center, basically and this is just
set, it's sort of initializing the value,

00:06:11.360 --> 00:06:18.570
and then in UIGestureRecognizerStateChanged,
I just set this view center to the--

00:06:18.570 --> 00:06:23.750
the center here is the gesture recognizer,
translation view, self superview just basically says,

00:06:23.750 --> 00:06:29.960
set my center to a translation that corresponds to
the self superviews that I move along with the finger.

00:06:29.960 --> 00:06:36.570
You can do this in TouchHasBegun, TouchHasEnded,
TouchHasMoved, but you have to sort of compensate

00:06:36.570 --> 00:06:41.600
for the location of the point difference between
the center and where the touch went down.

00:06:41.600 --> 00:06:45.740
This is just sort of interesting
use of a pan gesture recognizer

00:06:45.740 --> 00:06:49.390
that Josh Shaffer suggested that is working out pretty well.

00:06:49.390 --> 00:06:56.350
So that is one of these anchored views here and these
3 buttons here, they all say pop on them are all set

00:06:56.350 --> 00:06:58.800
to just popup a straight popover controller.

00:06:58.800 --> 00:07:00.590
So if I could just take a quick look at that.

00:07:00.590 --> 00:07:09.080
This is the people picker from address book so I have
just taken a stack pop navigation controller and put it

00:07:09.080 --> 00:07:12.590
in to this popover, and as I click in different places,

00:07:12.590 --> 00:07:16.850
you will see that the arrow winds
up pointing in the right place.

00:07:16.850 --> 00:07:23.770
We make room for it depending on what's going on and right
now, I have all four of these on: up, down, left, and right.

00:07:23.770 --> 00:07:27.180
Those correspond to the directions
in which the arrow was pointing.

00:07:27.180 --> 00:07:30.920
If you look here for pop, right.

00:07:30.920 --> 00:07:36.980
I could have possibly put the popover up over the button,
but the algorithm is showing us that we can lay it

00:07:36.980 --> 00:07:40.850
out with just a few more pixels
all the way, top to bottom there,

00:07:40.850 --> 00:07:45.920
and we also take care of maintaining an
appropriate margin around the outside.

00:07:45.920 --> 00:07:49.920
So if you do set something that is really large or if your
view controller is very tall, we are going to shrink it.

00:07:49.920 --> 00:07:52.760
The content size is more a recommendation
than anything else,

00:07:52.760 --> 00:07:55.810
but for the most part, we're able to honor those sizes.

00:07:55.810 --> 00:08:00.340
If I turn these off so, for instance,
let's turn off left and right.

00:08:00.340 --> 00:08:02.970
Remember what happened when I tapped
in the sky at the bottom last time.

00:08:02.970 --> 00:08:08.600
The arrow was pointing left, but if I
tap on it now, it is going to point down

00:08:08.600 --> 00:08:10.270
and we actually move in to the target rect.

00:08:10.270 --> 00:08:15.500
The target rect in this case is-the rect that
I'm presenting from is this popover view.

00:08:15.500 --> 00:08:27.060
So when I do click around though, I can't grab this view
while the popover is up and that can be a possible problem.

00:08:27.060 --> 00:08:28.930
I'm just setting up here in the viewDidLoad.

00:08:28.930 --> 00:08:34.880
I just set up all of my little buttons and
everything, but down here in display popover,

00:08:34.880 --> 00:08:40.600
I have a line here that I'm going to erase the
comment from where I'm setting the passthrough views

00:08:40.600 --> 00:08:48.160
to this anchored view that I've set up in my
view controller, and now if I run this guy,

00:08:48.160 --> 00:08:56.570
what I find is that I can pop up any of these popovers
and, you know, while I am popped up if I tap some place,

00:08:56.570 --> 00:09:03.360
it dismisses except if I tap in this guy
here, and now I can drag that view out from

00:09:03.360 --> 00:09:05.500
under the popover, and see what is there.

00:09:05.500 --> 00:09:10.790
So you can imagine this might be a few that has content
in it like, for instance, the contents of a message,

00:09:10.790 --> 00:09:16.980
and you may be selecting something to try and
have the user take an action using the popover,

00:09:16.980 --> 00:09:18.450
but they can't really see what's going on underneath it.

00:09:18.450 --> 00:09:19.420
So they might want to draw it out.

00:09:19.420 --> 00:09:23.410
You can grab that and draw that view
out, and then when you let the mouse,

00:09:23.410 --> 00:09:27.560
when you release the touch, it will go back to the center.

00:09:27.560 --> 00:09:32.970
So those are sort of the basics of popovers.

00:09:32.970 --> 00:09:40.070
So for UISplitViewController, SplitViewController
is a full screen view element.

00:09:40.070 --> 00:09:45.470
It is itself a UIViewController subclass, right.

00:09:45.470 --> 00:09:48.300
So this means that all of its containing views,

00:09:48.300 --> 00:09:53.740
view controllers actually help change the
rotation behavior and things like that.

00:09:53.740 --> 00:09:55.900
So a SplitViewController has a delegate.

00:09:55.900 --> 00:10:01.200
It is going to inform that delegate about events
that happened as the device is rotating mainly.

00:10:01.200 --> 00:10:07.240
The object at index 0 is generally the master
view controller and the object at index 1,

00:10:07.240 --> 00:10:14.350
this is the view controller's property for split view
is generally going to be the detail view controller

00:10:14.350 --> 00:10:18.050
and in this case, our application delegate
will be the owner of the SplitViewController.

00:10:18.050 --> 00:10:20.280
This will be very common.

00:10:20.280 --> 00:10:24.810
SplitViewControllers are typically the top level item.

00:10:24.810 --> 00:10:27.390
You usually create these things from nibs, right.

00:10:27.390 --> 00:10:29.550
You'll have a nib set up for your iPad.

00:10:29.550 --> 00:10:35.560
You will drag out a SplitViewController into it and you
will get a full screen window that has everything in it.

00:10:35.560 --> 00:10:40.960
If you want to create one programmatically,
you can call alloc init and you can also get

00:10:40.960 --> 00:10:43.020
at the view controllers property and the delegate.

00:10:43.020 --> 00:10:48.880
And again, the delegate tells you about what's
happening when the SplitViewController rotates.

00:10:48.880 --> 00:10:53.860
So, I have downloaded this so we'll talk
about at the end of the talk but again,

00:10:53.860 --> 00:10:57.920
these 3 delegate methods are
splitVewController, willHideViewController,

00:10:57.920 --> 00:11:00.130
withBarButtonItem:forPopoverController.

00:11:00.130 --> 00:11:03.540
This is the landscape-to-portrait rotation, right.

00:11:03.540 --> 00:11:07.820
So when you go from landscape to portrait,
we're going to hide one of the view controllers,

00:11:07.820 --> 00:11:10.760
that guy on the left at object at index 0.

00:11:10.760 --> 00:11:16.750
And we're also going to give you a UIBarButtonItem
that you can put in your interface somewhere,

00:11:16.750 --> 00:11:21.280
typically in the toolbar that's at the top, and
that will be what the user taps on in order to bring

00:11:21.280 --> 00:11:27.890
down the popover controller that will have that
master view controller in it, pre-populate it.

00:11:27.890 --> 00:11:33.050
And the popover controller, you'll get a reference
of that so if you need to dismiss it you can.

00:11:33.050 --> 00:11:37.080
splitViewController:willShow
ViewController:invalidatingBarButtonItem,

00:11:37.080 --> 00:11:37.790
that is going the other way.

00:11:37.790 --> 00:11:44.130
That is going portrait to landscape and that means that the
view controller in the left side is about to become visible

00:11:44.130 --> 00:11:48.440
and that BarButtonItem we gave you before,
yeah, get rid of that, it's no good to you now.

00:11:48.440 --> 00:11:52.500
And splitViewController:popoverController:
willPresentViewController is

00:11:52.500 --> 00:11:58.120
where you basically get told the users tapped on the
button, we're about to present the popover controller.

00:11:58.120 --> 00:12:05.320
If you need to take other action when you're going to
present that then that's your opportunity to do so.

00:12:05.320 --> 00:12:08.470
So we're going to use the CoreData Books example.

00:12:08.470 --> 00:12:10.910
We have modified it slightly for this talk.

00:12:10.910 --> 00:12:15.660
This is if you type pretty quickly you will be able
to get to the URL here, but you can search for it

00:12:15.660 --> 00:12:21.090
on the sample code site as well and
we will have an updated version soon.

00:12:21.090 --> 00:12:28.640
But the CoreData Books sample looks like this.

00:12:28.640 --> 00:12:37.530
This is just a very basic application that
demos CoreData to manage a list of books.

00:12:37.530 --> 00:12:46.270
If we run this, here is our iPhone
Simulator here and we have a list of books.

00:12:46.270 --> 00:12:50.610
If I tap on a particular book I get a
view controller that gets pushed in.

00:12:50.610 --> 00:12:52.580
It is a full screen transition.

00:12:52.580 --> 00:12:57.530
You know, there is not much space on the iPhone
so we tend to write these kinds of interfaces.

00:12:57.530 --> 00:13:02.610
And then when we tap on an author card we get another
view controller that gets pushed in, all right,

00:13:02.610 --> 00:13:09.110
and the navigation controller is
keeping track of where I have been.

00:13:09.110 --> 00:13:20.720
So if we run this app actually in the 3.2 Simulator
we get a small version of the CoreData Books app.

00:13:20.720 --> 00:13:22.490
Actually, this is totally expected.

00:13:22.490 --> 00:13:28.500
We're running this in compatibility mode so when you
run an iPad, when you run an iPhone app on an iPad,

00:13:28.500 --> 00:13:33.640
we are going to go ahead and run that in a small
window and you know, you can interact with it

00:13:33.640 --> 00:13:37.360
and you still get the same full screen transitions.

00:13:37.360 --> 00:13:44.170
And then you can also zoom this up to 2x and you get the
bigger version but it's still essentially an iPhone app.

00:13:44.170 --> 00:13:50.820
We are not really taking advantage of any of the things
that even scaled up here at 2x of any of the things

00:13:50.820 --> 00:13:54.900
that really make it, the iPad a
really fantastic device to use.

00:13:54.900 --> 00:14:00.260
One of the things that we are going to have
to do is start converting this project, right.

00:14:00.260 --> 00:14:05.020
So, there as some Xcode project modifications we will need
to make, and there are some code refactoring we will do

00:14:05.020 --> 00:14:07.680
and then we are also going to have
to come up with some new resources.

00:14:07.680 --> 00:14:13.980
And the first thing we will do actually
here is work on converting the project.

00:14:13.980 --> 00:14:20.940
So if we take a look at the resources and we look at
our info plist, there are a number of things here.

00:14:20.940 --> 00:14:24.760
So we have the various keys that make up the info plist.

00:14:24.760 --> 00:14:32.250
This is how you tell the application as we launch, this
is how you tell UIKit the various things about your app.

00:14:32.250 --> 00:14:38.020
So this will include the main nib file base
name which in this case is called main window,

00:14:38.020 --> 00:14:41.660
and that corresponds this MainWindow.xib file here.

00:14:41.660 --> 00:14:47.170
The application requires whether or not it requires
the iPhone environment, that kind of thing.

00:14:47.170 --> 00:14:53.660
So, one of the things that we will do is
take a look at the raw keys and values.

00:14:53.660 --> 00:14:57.280
These are the actual info property list keys,

00:14:57.280 --> 00:15:00.480
and if you have been editing these things
for a while, it should be very familiar.

00:15:00.480 --> 00:15:05.990
The NSMainNibFile though is interesting
because if we pop up this menu here in Xcode,

00:15:05.990 --> 00:15:10.800
we see there is also NSMainNibFile~iPad
and NSMainNibFile~iPhone.

00:15:10.800 --> 00:15:15.070
And this is your opportunity to be
able to specify which nib you want

00:15:15.070 --> 00:15:18.010
to load depending on what device you are going to support.

00:15:18.010 --> 00:15:22.470
So to be able to pick a nib for
your iPad and nib for the iPhone

00:15:22.470 --> 00:15:25.810
and when the application fires
up, we will pick the right one.

00:15:25.810 --> 00:15:30.810
We could go changing this but there are
a lot of things we'd also have to change.

00:15:30.810 --> 00:15:37.040
So this is the CoreData Books project build
info here and actually we could look at it.

00:15:37.040 --> 00:15:39.440
Actually, let me look at the target
because that will be better.

00:15:39.440 --> 00:15:45.310
What we see is the Base SDK here is iPhone device 4.0.

00:15:45.310 --> 00:15:49.580
And the Base SDK when you are working with Xcode
for these things is basically the latest version

00:15:49.580 --> 00:15:52.520
of the operating system that you would like to run on.

00:15:52.520 --> 00:15:57.740
And if we go look for the deployment target,
we'll see the deployment target here is set

00:15:57.740 --> 00:16:00.960
for OS 3.2 which is good for our purposes.

00:16:00.960 --> 00:16:05.410
On a fresh project this might actually
have been set for iPhone OS 4.0.

00:16:05.410 --> 00:16:13.410
And then if we look at the targeted device
family, right now this is set for iPhone.

00:16:13.410 --> 00:16:18.160
And setting this for iPhone means it is only
ever going to run in the iPhone and if it runs

00:16:18.160 --> 00:16:20.340
on an iPad it will run in compatibility mode.

00:16:20.340 --> 00:16:23.370
And what we want to wind up doing
is setting that to be iPhone/iPad.

00:16:23.370 --> 00:16:28.090
Let us make sure that this is all set up here.

00:16:28.090 --> 00:16:34.470
And then rather than do all of this editing by
hand because the first time I did all of this

00:16:34.470 --> 00:16:37.590
by hand I managed to keep missing things.

00:16:37.590 --> 00:16:44.890
Xcode 3.2 has this nice feature where if we control click
on the target we can upgrade the current target for iPad.

00:16:44.890 --> 00:16:51.200
And look at the big sheet that drops down and it asks that
we can either upgrade the current target for universal app,

00:16:51.200 --> 00:16:55.750
runs on both iPhone or iPad, or we can
create a separate target for the iPad

00:16:55.750 --> 00:16:59.680
and the device specific iPhone target gets left as is.

00:16:59.680 --> 00:17:04.450
So you can either have 2 targets, 1 for
iPhone, 1 for iPad or 1 universal application.

00:17:04.450 --> 00:17:08.540
We are going to go ahead and choose 1 universal application.

00:17:08.540 --> 00:17:13.820
So, now a bunch of things happen sort of behind the scenes.

00:17:13.820 --> 00:17:20.370
The first is if we go look at our info plist we
will see that we now have a main nib file base name

00:17:20.370 --> 00:17:24.130
with main window in it and one that has MainWindow-iPad.

00:17:24.130 --> 00:17:29.150
And in fact, Xcode went ahead and
created a resources iPad group

00:17:29.150 --> 00:17:33.730
and in this group it is now also
thrown in a MainWindow-iPad.xib.

00:17:33.730 --> 00:17:41.840
And this MainWindow-iPad is basically just a
big version of our original MainWindow nib.

00:17:41.840 --> 00:17:44.990
So it has done a bunch of conversion for us.

00:17:44.990 --> 00:17:55.180
If I look at the Base SDK I should see-- yup,
sure enough iPhone OS, iPhone device 4.0.

00:17:55.180 --> 00:18:03.310
If I go ahead and look at targeted device family,
we will see iPhone and iPad and just underneath

00:18:03.310 --> 00:18:08.430
that the iPhone OS deployment target is iPhone OS 3.2.

00:18:08.430 --> 00:18:09.930
What happens if I run this?

00:18:09.930 --> 00:18:12.340
Here is the iPhone Simulator 4.

00:18:12.340 --> 00:18:17.320
That is not so bad, that is unsurprising.

00:18:17.320 --> 00:18:19.220
It is sort of the same application.

00:18:19.220 --> 00:18:29.290
Let us actually go ahead and run that in the
3.2 Simulator and we get a big iPhone app.

00:18:29.290 --> 00:18:33.870
But it is really big and some of it doesn't work.

00:18:33.870 --> 00:18:39.930
So you know, you click out here and you tap out here and you
can't do anything and you happen to get into the right spot

00:18:39.930 --> 00:18:43.810
and these big sloshing full screen transitions happen.

00:18:43.810 --> 00:18:45.740
Do not ship this.

00:18:45.740 --> 00:18:47.780
[ Laughter ]

00:18:47.780 --> 00:18:49.060
Don't do this.

00:18:49.060 --> 00:19:02.950
What we'll do instead is start the work of sort of moving
everything into a 4.0 and 3.2 combined application.

00:19:02.950 --> 00:19:11.750
So, one of the things that we need to do
is to refactor the application delegate

00:19:11.750 --> 00:19:15.250
to really effectively take advantage of the iPad.

00:19:15.250 --> 00:19:21.770
So when we created the new nibs, right, there is an
outlet inside the nib for your app delegate and you get

00:19:21.770 --> 00:19:24.890
to choose what the class of the application delegate is.

00:19:24.890 --> 00:19:30.850
But this system is going to choose a nib for
us based on what we have in our info plists.

00:19:30.850 --> 00:19:35.980
So depending on what we tell the nib to
use for the application delegate class,

00:19:35.980 --> 00:19:40.960
it will automatically pick either an
iPad-specific or an iPhone-specific app delegate.

00:19:40.960 --> 00:19:43.580
Oh, kind of cagey.

00:19:43.580 --> 00:19:47.840
The application delegate here for CoreData Books
has 5 things in it that are common pretty much

00:19:47.840 --> 00:19:51.280
to every single application we
write on an iPad or an iPhone.

00:19:51.280 --> 00:19:54.560
It has got the managedObjectModel,
it has got the ObjectContext,

00:19:54.560 --> 00:19:58.060
it has got the persistentStoreCoordinator,
the thing that does all the real saving.

00:19:58.060 --> 00:20:00.580
It has the applicationDocumentsDirectory which is

00:20:00.580 --> 00:20:07.110
where in this case we are putting the
CoreData database and it has a window.

00:20:07.110 --> 00:20:12.860
And also it's an outlet for navigation controller which is
great for the iPhone but it is not so great for the iPad

00:20:12.860 --> 00:20:17.140
because that means we'd only be able to connect to one
of those 2 things and we actually need both of them

00:20:17.140 --> 00:20:18.800
in order to write an effective application.

00:20:18.800 --> 00:20:22.050
So what we are going to do is actually
hoist all of that stuff

00:20:22.050 --> 00:20:27.550
up into a shared super class, an app delegate shared class.

00:20:27.550 --> 00:20:36.050
And then we will go ahead and have a separate
app delegate iPhone and app delegate iPad class

00:20:36.050 --> 00:20:39.610
and one of them will have an outlet
for the navigation controller.

00:20:39.610 --> 00:20:43.610
And in the other, we'll have an
outlet for the split view controller.

00:20:43.610 --> 00:20:48.240
And so now we have a class that gets automatically
chosen and instantiated for us at application launch

00:20:48.240 --> 00:20:53.160
and this is an opportunity to start dividing
some of the UILogic in your application, right.

00:20:53.160 --> 00:20:56.830
So we are going to move some of
that controller logic around.

00:20:56.830 --> 00:21:02.030
It is really hard to avoid some of
these tightly coupled designs, right.

00:21:02.030 --> 00:21:06.800
So on iPhone application, you have got the stack
view controllers on a navigation controller.

00:21:06.800 --> 00:21:10.030
Sometimes everybody winds up kind
of knowing about everybody else.

00:21:10.030 --> 00:21:14.690
And pretty soon you want to be able to reuse one of
these view controllers and you realize that reusing one

00:21:14.690 --> 00:21:17.840
of these view controllers means I also
have to figure out how to reuse all

00:21:17.840 --> 00:21:21.050
of those 6 other view controllers that it knows about.

00:21:21.050 --> 00:21:23.780
And now I can't quite share code as effectively.

00:21:23.780 --> 00:21:27.740
One of the things that we would like you to do is
think about intent, think about what is happening

00:21:27.740 --> 00:21:29.670
as the user maneuvers through your application.

00:21:29.670 --> 00:21:31.150
They are taking actions.

00:21:31.150 --> 00:21:34.210
You are going to admit those actions and
you are going to respond to those actions.

00:21:34.210 --> 00:21:41.110
So that target action paradigm that we used in UIKit and on
the desktop in the app kit is actually something interesting

00:21:41.110 --> 00:21:45.350
to consider here whenever you are looking at
refactoring your code or even just writing new code.

00:21:45.350 --> 00:21:51.280
And you really want to talk about trying to choose
your action receivers with some level of care, right.

00:21:51.280 --> 00:21:53.160
If I have to have peers that know about each other,

00:21:53.160 --> 00:21:56.400
sometimes that gets to be one of
those really tightly coupled designs.

00:21:56.400 --> 00:22:01.790
So you want to try and choose the closest object in
your hierarchy which knows about all the players.

00:22:01.790 --> 00:22:05.450
So, which in this case, we are going to use
our app delegate to manage some of this logic.

00:22:05.450 --> 00:22:09.420
But the responder chain will be another
appropriate hierarchy for that, right.

00:22:09.420 --> 00:22:13.630
So sort of 2 different parallel hierarchies, one has
to do with views and view controllers and one has

00:22:13.630 --> 00:22:17.120
to do with just who is the first responder.

00:22:17.120 --> 00:22:23.370
So in this instance, we are going to think
about using a view controller where when you tap

00:22:23.370 --> 00:22:29.820
on a particular book we send a show book message to the
iPhone app delegate and the delegate is the one that is

00:22:29.820 --> 00:22:35.320
in charge of creating a new detail view controller and then
filling that view controller in with the appropriate book,

00:22:35.320 --> 00:22:41.120
and then we go ahead and push that on
to the navigation controller stack.

00:22:41.120 --> 00:22:43.070
Okay, that works pretty well for a phone application.

00:22:43.070 --> 00:22:46.290
What does it look like for an iPad app?

00:22:46.290 --> 00:22:51.090
Well, we have got a split view controller
that is owned by the iPad app delegate.

00:22:51.090 --> 00:22:54.960
We go ahead and tap on a particular book.

00:22:54.960 --> 00:22:57.340
We send the same show book message to an app delegate.

00:22:57.340 --> 00:23:00.150
It just happens to be different
app delegate in this case, right.

00:23:00.150 --> 00:23:06.160
And then that app delegate turns around and sends set book
to the detail view controller that it knows is in place.

00:23:06.160 --> 00:23:11.590
So rather than creating a new one we just go ahead
and set that on the receiver in the view controller.

00:23:11.590 --> 00:23:17.500
So we are going to reuse this view controller and
rather than creating a new one and setting at each time.

00:23:17.500 --> 00:23:22.550
And let me show you a little bit about
what some of that refactoring looks like.

00:23:22.550 --> 00:23:26.630
So here we have our CoreData Books
that is running in the simulator.

00:23:26.630 --> 00:23:32.050
We have gone through, we have our resources,
iPad and if I take a look at the main window here

00:23:32.050 --> 00:23:35.050
for the iPad resources, we have the split view controller.

00:23:35.050 --> 00:23:37.830
The split view controller has a navigation controller in it.

00:23:37.830 --> 00:23:40.400
It also has a detailed view controller.

00:23:40.400 --> 00:23:43.970
That is the guy on the right, let us open that up.

00:23:43.970 --> 00:23:48.780
And you know, the navigation controller has
the normal nav bar and all that other business.

00:23:48.780 --> 00:23:56.470
And we have got the root view controller is our
root view controller class here, which is this guy.

00:23:56.470 --> 00:24:00.310
Sample code, sample code, sample code, but it is in charge

00:24:00.310 --> 00:24:03.700
of basically handling the viewDidLoad
business and things like that.

00:24:03.700 --> 00:24:11.760
And this actually is part way to
getting through the refactoring.

00:24:11.760 --> 00:24:18.560
If I run this though I have not really made any code
changes but we see that if I try to rotate this it works

00:24:18.560 --> 00:24:24.180
but I have got the view controllers so you
know, the guy on the left is not quite right

00:24:24.180 --> 00:24:28.890
because the Edit button is not going to function
properly the way we want given an iPad interface.

00:24:28.890 --> 00:24:33.760
This you know, well, I am still stuck in this.

00:24:33.760 --> 00:24:38.250
So there are still some work to do here
but if you get to this point you know,

00:24:38.250 --> 00:24:41.250
you are on your way, you are on your way.

00:24:41.250 --> 00:24:51.520
I am actually going to jump to our fully
recooked universal CoreData Books example.

00:24:51.520 --> 00:24:54.420
Nice high resolution large version here.

00:24:54.420 --> 00:24:59.870
It still does the full screen transitions,
and if we run the 3.2 version here.

00:25:02.600 --> 00:25:09.200
What we have is our rotation code here is all working.

00:25:09.200 --> 00:25:14.860
We have got the various larger
resources as we tap on things.

00:25:14.860 --> 00:25:21.590
We are only 1 tap away from the various
bits of information that we want to see.

00:25:21.590 --> 00:25:28.990
And we also have a little popover here
for the author information which is kind

00:25:28.990 --> 00:25:30.240
of appropriate for this kind of use, right.

00:25:30.240 --> 00:25:36.360
It is a little transient popover controller for
just displaying some information, getting rid of it

00:25:36.360 --> 00:25:42.140
but we don't have any full screen transitions kicking
around here, and I will show you how that works in a minute.

00:25:42.140 --> 00:25:45.350
Let's take a look at the info plist here.

00:25:45.350 --> 00:25:52.390
UI supported interface orientations here, one of them, the
fallback here is for UI interface orientation portrait.

00:25:52.390 --> 00:25:55.440
For the iPad version, we've got all 4 of them here

00:25:55.440 --> 00:26:00.120
and that's what allows the iPad version
to launch in all 4 orientations.

00:26:00.120 --> 00:26:06.270
Actually, what happens if I go ahead and delete that?

00:26:06.270 --> 00:26:12.910
If I actually delete that and then say
rotate the portrait, let's go home here.

00:26:12.910 --> 00:26:14.140
So that ends the process.

00:26:14.140 --> 00:26:22.290
If I build and run this again, suddenly the thing works
to portrait and shows up in this other orientation.

00:26:22.290 --> 00:26:26.750
You actually want your application to
show up in all possible orientations.

00:26:26.750 --> 00:26:34.320
So you want to make sure that your supported
interface orientations are all in your info plist.

00:26:34.320 --> 00:26:43.650
The other thing you will want to make sure you do is your
view controllers all have to implement the rotation code,

00:26:43.650 --> 00:26:46.130
shouldAutorotateToInterfaceOrientation.

00:26:46.130 --> 00:26:50.110
So remember when you are working with the
UISplitViewController, the split view controller is going

00:26:50.110 --> 00:26:53.780
to go ahead and ask its children whether or
not a particular orientation is supported.

00:26:53.780 --> 00:26:56.650
If it is supported, return yes.

00:26:56.650 --> 00:27:00.350
So for most of your iPad work you are
going to want to return yes all the time.

00:27:00.350 --> 00:27:03.170
SplitViewController willHideViewController withBarButtonItem.

00:27:03.170 --> 00:27:05.120
This is the delegate method I was talking about before.

00:27:05.120 --> 00:27:09.880
What you will do here is just grab the title,
grab the bar button item that we hand you,

00:27:09.880 --> 00:27:16.630
fill it in with the title you would like and go ahead and
make a copy of the toolbar items probably of the toolbar

00:27:16.630 --> 00:27:19.390
that is in the view controller, the detail view controller.

00:27:19.390 --> 00:27:23.310
Insert that object at index 0 and
that will be the first item.

00:27:23.310 --> 00:27:27.960
In our case, that view controller has a spacer
in there in order to separate things out.

00:27:27.960 --> 00:27:33.970
The set items for toolbar items animated yes, this
just goes ahead and puts that in a nice cross fade

00:27:33.970 --> 00:27:36.780
and then we release the toolbar items here.

00:27:36.780 --> 00:27:40.980
And we're also grabbing a reference
to the popover controller

00:27:40.980 --> 00:27:44.610
so that we can dismiss it if we need to ourselves.

00:27:44.610 --> 00:27:47.210
And we are going the other way, we are going to go ahead

00:27:47.210 --> 00:27:53.040
and this is a splitViewControllerwillShowView
ControllerinvalidatingBarButtonItem.

00:27:53.040 --> 00:27:59.700
We will grab the toolbar items here, that same
mutable copy with the object at index 0, there we go.

00:27:59.700 --> 00:28:04.840
And set the items, go ahead and
release it and that's what enables all

00:28:04.840 --> 00:28:08.740
of the button management in split view controllers.

00:28:08.740 --> 00:28:11.340
It is something you do have to handle
yourself because we just don't know

00:28:11.340 --> 00:28:14.690
where you want to put it based on your interface.

00:28:14.690 --> 00:28:24.840
And then if we look at the detail view controller
here, again we also have our popover controller

00:28:24.840 --> 00:28:34.530
and this guy just creates a popover controller and presents
it right from here it is authored text field bounds, right.

00:28:34.530 --> 00:28:39.680
If I pass author text field frame that
would make it again wind up in a funny spot.

00:28:39.680 --> 00:28:46.510
But all of this uses sort of the refactored model
of being able to send messages to the app delegate

00:28:46.510 --> 00:28:53.550
and have the app delegate do the work of
positioning all of the various bits of interface.

00:28:53.550 --> 00:28:55.670
So what changed?

00:28:55.670 --> 00:29:02.840
Well, in the Xcode project we changed the Base SDK and
the deployment target and the targeted device family.

00:29:03.890 --> 00:29:07.360
Actually, we didn't change it, we
let Xcode go ahead and change that.

00:29:07.360 --> 00:29:11.380
For the refactored code, we're hoisting a
bunch of stuff in the application delegates.

00:29:11.380 --> 00:29:13.990
We're using some of these actions sending controllers

00:29:13.990 --> 00:29:18.560
so that we're not actually having these tight
relationships between UIViewControllers, you know.

00:29:18.560 --> 00:29:23.310
Too many things knowing too much about each other,
there are some software design principles there.

00:29:23.310 --> 00:29:31.230
And we actually had a number of different resources
get changed to nibs, images, stuff like that.

00:29:31.230 --> 00:29:35.190
What didn't change?

00:29:35.190 --> 00:29:38.190
Well, I didn't touch a single line of
code that had to do with the model.

00:29:38.190 --> 00:29:40.830
And that is actually pretty significant.

00:29:40.830 --> 00:29:45.210
If you're writing a universal application, you probably
don't want to be messing around with the model especially

00:29:45.210 --> 00:29:49.570
if you're sharing the model between
the desktop and your devices.

00:29:49.570 --> 00:29:54.920
The model, we make a big deal in all of our
documentation and all of our design and we try

00:29:54.920 --> 00:29:59.700
to make our design principles follow this
with the model view controller paradigm.

00:29:59.700 --> 00:30:06.130
By not, you know, by having all of this logic
up in the controllers in the view hierarchy.

00:30:06.130 --> 00:30:10.410
We're really minimizing the amount of code, we're really
going to have to change in order to get our stuff to work.

00:30:10.410 --> 00:30:14.810
So if you have too much tight control, tight
knowledge between the model and your views or the model

00:30:14.810 --> 00:30:18.250
in the view controllers, that is going to be a problem too.

00:30:18.250 --> 00:30:22.180
Ken Kocienda is giving a great talk,
Model-View-Controller for iPhone OS,

00:30:22.180 --> 00:30:25.050
that's in Russian Hill tomorrow at 10:15.

00:30:25.050 --> 00:30:30.940
He is going to go over a lot of the things that you can do
using model view controller and some advanced techniques

00:30:30.940 --> 00:30:34.310
for managing how the different things work on iPhone.

00:30:34.310 --> 00:30:39.160
So it will be a great talk if you need to brush up on that
or if you want to know some things that are particular

00:30:39.160 --> 00:30:42.240
to designing your code and your software for the iPhone.

00:30:42.240 --> 00:30:50.390
When we're working with SDKs and symbols, we sometimes
wind up in situations where you want to use a symbol

00:30:50.390 --> 00:30:53.490
and it is not just available, or you want to
try and subclass something that does not exist.

00:30:53.490 --> 00:30:58.340
So here are actually 3 examples of some
symbols that are available on the iPad,

00:30:58.340 --> 00:31:01.930
on iPhone OS 3.2 and the iPhone on iOS 4.

00:31:01.930 --> 00:31:07.150
So UIPopoverController, these symbols
are present everywhere, right.

00:31:07.150 --> 00:31:11.320
But on iPhone OS 3.2 you can actually
use and create a popover controller.

00:31:11.320 --> 00:31:18.100
But if we find that you are running on iOS 4 you can
instantiate one but will actually throw an exception

00:31:18.100 --> 00:31:24.520
when that happens because the iPhone, the iOS
4 model on the iPhone, it is a smaller screen,

00:31:24.520 --> 00:31:29.550
the presentation doesn't lend itself particularly
well to popovers or split view controllers.

00:31:29.550 --> 00:31:35.930
And that is really not the way that the iPad really
can present your information to its best advantage.

00:31:35.930 --> 00:31:42.010
So UISplitViewControllers also, when you create one of those
we go ahead and throw an exception if you are on the phone.

00:31:42.010 --> 00:31:45.600
And gesture recognizer is actually usable in both places.

00:31:45.600 --> 00:31:48.890
So you know, if you have been carrying
a bunch of code to do all kinds

00:31:48.890 --> 00:31:52.360
of gesture recognition yourself,
you certainly can continue that.

00:31:52.360 --> 00:31:57.670
You can fold that into a UIGestureRecognizer subclass which
is actually a great way to do it because then you can work

00:31:57.670 --> 00:32:02.600
in conjunction with our UIGestureRecognizers.

00:32:02.600 --> 00:32:06.690
You also may want to know in line what the device idiom is.

00:32:06.690 --> 00:32:09.990
We have introduced some UI, API rather on UIDevice.

00:32:09.990 --> 00:32:13.920
UIDevice.h has this user interface idiom, enum.

00:32:13.920 --> 00:32:20.520
And the idiom is basically a way that we describe
what kind of user experience we're offering.

00:32:20.520 --> 00:32:23.490
And in this case it's 2 enums.

00:32:23.490 --> 00:32:28.380
The phone one includes iPod touches, right,
they're basically the same form factor.

00:32:28.380 --> 00:32:30.800
They have the same kind of screen, weight, et cetera.

00:32:30.800 --> 00:32:36.160
And the iPhone UIUserInterfaceIdiomPad.

00:32:36.160 --> 00:32:41.080
The way you typically use it is you could
just check to see, hey we're on an iPad,

00:32:41.080 --> 00:32:46.440
we have got the iPad user interface idiom, we'll
create a UIPopoverController and go ahead and use it.

00:32:46.440 --> 00:32:55.620
Or if we're not on an iPad, an idiom pad type device,
we'll go ahead and just create an author view controller

00:32:55.620 --> 00:32:59.990
and initialize it with an author and
push that on to the UI navigation stack.

00:32:59.990 --> 00:33:03.440
This is a different approach.

00:33:03.440 --> 00:33:07.050
Typically, you're, you know, probably
going to use the subclassing approach.

00:33:07.050 --> 00:33:08.110
It's a little bit more flexible.

00:33:08.110 --> 00:33:13.580
And if you find yourself sprinkling a bunch of if
user, UIUserInterfaceIdioms all the way around,

00:33:13.580 --> 00:33:17.050
that is probably a hint that you want to
think about hoisting some of that logic

00:33:17.050 --> 00:33:21.200
up into a shared controller with separate subclasses, right.

00:33:21.200 --> 00:33:26.230
This is a macro by the way.

00:33:26.230 --> 00:33:35.700
If you look in the UIDevice.h header the
UIUserInterfaceIdiom macro does a UIDevice response

00:33:35.700 --> 00:33:43.150
to selector for the access or for this idiom and then calls
that and it returns that answer, and if it doesn't respond

00:33:43.150 --> 00:33:47.870
to the selector, it goes ahead and just returns idiom phone.

00:33:47.870 --> 00:33:52.610
And that's actually a really good technique also
in terms of dealing with symbol availability.

00:33:52.610 --> 00:33:57.520
You're going to want to use NSClass from string to
find out if a particular class exists on a device.

00:33:57.520 --> 00:34:02.830
You're going to want to use response to selector
to figure out whether or not a particular instance,

00:34:02.830 --> 00:34:05.170
you can actually send that message to that instance.

00:34:05.170 --> 00:34:11.610
So there is a sense of being able to test
for capability and not for version, right.

00:34:11.610 --> 00:34:15.600
The interesting bit isn't the fact
that you're running on iPhone OS 3.2.

00:34:15.600 --> 00:34:21.360
The interesting bit is that the particular
facility you are looking for is available.

00:34:21.360 --> 00:34:24.940
So what do you guys need to do?

00:34:24.940 --> 00:34:31.760
Well, you'll need to do some refactoring probably,
and that refactoring is going to involve some

00:34:31.760 --> 00:34:35.320
of that hoisting of functionality up into superclasses.

00:34:35.320 --> 00:34:41.080
It's going to involve some maneuvering of code so that you
have got sort of don't repeat yourself thing going, right.

00:34:41.080 --> 00:34:44.670
Do not have multiple copies of the same code in one place.

00:34:44.670 --> 00:34:50.650
And really try and take advantage of some of the things
that the application loading system is doing for you

00:34:50.650 --> 00:34:55.300
and being able to change, choose nibs and things like that.

00:34:55.300 --> 00:34:58.000
You're going to want to change up your resources, right.

00:34:58.000 --> 00:35:06.670
A lot of the interface that we saw on the initial passes at
the universal version of the CoreData Books app, you know,

00:35:06.670 --> 00:35:11.300
there are full screen and it is a big table view
that spreads across the detail view controller.

00:35:11.300 --> 00:35:16.840
And what you really want is that nicer presentation
and you want to try and bring a lot of the information

00:35:16.840 --> 00:35:20.650
on the iPad a couple of taps closer to the user, right.

00:35:20.650 --> 00:35:24.070
If they had to keep drilling down even on
the iPad, there is probably something there

00:35:24.070 --> 00:35:27.580
about how you've got your data
organized that isn't quite optimal.

00:35:27.580 --> 00:35:31.840
And we do really encourage you
to write universal applications.

00:35:31.840 --> 00:35:37.420
If you offer a universal application to your
users as an upgrade from an existing application,

00:35:37.420 --> 00:35:39.160
a lot of that data is going to come along for free.

00:35:39.160 --> 00:35:43.220
The user's data will probably get just pulled
up when they upgrade to the new version.

00:35:43.220 --> 00:35:47.140
We also highlight universal applications
differently in the store, right.

00:35:47.140 --> 00:35:52.970
So when you search for an application in the
store, the universal applications are listed first.

00:35:52.970 --> 00:35:59.000
They also get a little plus indicator on their
price that says yes, this is universal application.

00:35:59.000 --> 00:36:07.500
So, we have got Mr. Bill Dudney is our
Application Frameworks Evangelist, so thank you.

00:36:07.500 --> 00:36:12.040
[ Applause ]

