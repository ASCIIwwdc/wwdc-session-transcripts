WEBVTT

00:00:06.310 --> 00:00:08.880
>> This is the Core OS Networking Session.

00:00:08.880 --> 00:00:09.740
I'm Brett Halle.

00:00:09.740 --> 00:00:16.410
I'm the Senior Director responsible for kernel
and networking technology for all of our products.

00:00:16.410 --> 00:00:21.410
And today we're going to talk a little bit about
what we've been doing in terms of networking

00:00:21.410 --> 00:00:31.860
for the various operating systems and I'm going to
start first by reminding people of how we got here.

00:00:31.860 --> 00:00:37.790
As us humans have been trying to communicate
for it seems like forever and we've tried just

00:00:37.790 --> 00:00:43.690
about everything we can to transfer
information back and forth.

00:00:43.690 --> 00:00:47.600
Back in the early 70's you may all remember of the days

00:00:47.600 --> 00:00:56.110
when really things got started
with Unix and systems of that time.

00:00:56.110 --> 00:01:03.480
Those of you who were back in that era might remember
for example a system called Plato which was probably one

00:01:03.480 --> 00:01:10.670
of the first network game experiences; I know I ever
had the opportunity to experience, it's pretty wild.

00:01:10.670 --> 00:01:19.380
But in the early gnarly days of networking BSD,
Unix and BSD Networking, it was interesting times,

00:01:19.380 --> 00:01:26.250
a very difficult challenge of getting everything
configured and set up but when it did it worked pretty well.

00:01:26.250 --> 00:01:28.880
And over the years we've evolved quite a bit.

00:01:28.880 --> 00:01:36.500
Obviously with the advent of the Mac, we brought
into play things like AppleTalk and LocalTalk,

00:01:36.500 --> 00:01:45.900
to try and bring the experience of networking to mere
humans; and along the years of course involved more

00:01:45.900 --> 00:01:51.660
and more capabilities with Ethernet and
Wi-Fi and the experience has been pretty good.

00:01:51.660 --> 00:01:55.750
But over the past few years, there's been an explosion.

00:01:55.750 --> 00:02:01.780
Obviously with the advent of the phone,
the iPhone and with the iPad the experience

00:02:01.780 --> 00:02:04.700
of networking has changed pretty dramatically.

00:02:04.700 --> 00:02:12.460
It's gone from being a world that is based
on very static to being very dynamic.

00:02:12.460 --> 00:02:20.720
Today we're going to talk about the Core OS Networking
which is the fundamental networking technology that all

00:02:20.720 --> 00:02:23.900
of our systems are built upon as part of Darwin.

00:02:23.900 --> 00:02:31.200
It obviously starts with Unix, BSD sockets and all the
things that you have come to know and love over the years;

00:02:31.200 --> 00:02:35.170
and on that we build quite a lot of other technology.

00:02:35.170 --> 00:02:44.590
CFNetwork, the Foundation classes and other application
services and frameworks, things like WebKit and services

00:02:44.590 --> 00:02:48.800
like that that all build on all
of this technology of the system.

00:02:48.800 --> 00:02:57.450
It all starts down at the core and Core OS as
part of the Darwin Foundation as where I represent.

00:02:57.450 --> 00:03:02.710
And we'll talk a lot about the technology
we've been adding to that core plumbing today.

00:03:02.710 --> 00:03:08.930
And it's important to note that this technology
that we have exists on all of the platforms;

00:03:08.930 --> 00:03:16.010
it's the same networking technology whether it
happens to be Mac OS X Snow Leopard or it happens

00:03:16.010 --> 00:03:20.370
to be iOS 4 it's all built on the same fundamental core

00:03:20.370 --> 00:03:26.150
and while there are some minor differences it's
built using the same both engineering teams

00:03:26.150 --> 00:03:30.730
and source code and technology.

00:03:30.730 --> 00:03:37.050
So we've added a number of things as part of iOS 4 you've
probably already noticed, but I wanted to remind you

00:03:37.050 --> 00:03:41.810
and introduce them to you if you
haven't experienced them yet.

00:03:41.810 --> 00:03:45.690
First and foremost is IPv6.

00:03:45.690 --> 00:03:55.080
So with iOS 4 we brought forward the capability of v6
and brought it in sync with the technology that we have

00:03:55.080 --> 00:03:59.710
in Snow Leopard; v6 you might wonder why is this important?

00:03:59.710 --> 00:04:07.400
Well I'm sure you of course all have heard that
we are running out of IPv4 addresses and next time

00:04:07.400 --> 00:04:12.220
when we meet a year from now I would
expect that we have just a little

00:04:12.220 --> 00:04:18.010
over a month left before we've
exhausted the available v4 addresses.

00:04:18.010 --> 00:04:28.830
But we've brought v6 onto the iOS 4 platform because we
believe it's an essential technology moving forward not only

00:04:28.830 --> 00:04:36.440
for being able to deal with the challenges of running out
of IP addresses, but the fact that is we move globally

00:04:36.440 --> 00:04:39.470
and we're dealing with different
challenges everywhere we go in the globe.

00:04:39.470 --> 00:04:47.260
Some places such as China and Japan are extremely
focused on moving forward to using v6 whereas here

00:04:47.260 --> 00:04:53.980
in the states we're lagging a little bit behind although
there's some great progress with folks like Comcast

00:04:53.980 --> 00:04:59.430
and others who are moving forward
to delivering v6 to the home.

00:04:59.430 --> 00:05:05.180
It should be noted if you haven't noticed already
that we've enabled v6 here at the conference.

00:05:05.180 --> 00:05:10.890
So if you happen to have the developer preview
or you're running Snow Leopard on your laptops,

00:05:10.890 --> 00:05:18.250
v6 is available over Wi-Fi and on your developer
preview for iOS 4, you can get a v6 address

00:05:18.250 --> 00:05:23.500
and we have v6 support all through the conference this week.

00:05:23.500 --> 00:05:30.810
But as part of iOS 4 we've brought
the stack from Snow Leopard 4 to iOS 4

00:05:30.810 --> 00:05:33.970
and we've also added some additional capabilities.

00:05:33.970 --> 00:05:40.780
For example, we've added the initial support
for DHEPv6, particularly the stateless support,

00:05:40.780 --> 00:05:48.150
meaning we don't get the IP address from DHEP but
because we take advantage of router advertisement,

00:05:48.150 --> 00:05:53.350
the capability that's kind of a fundamental
capability that exists as part of IPv6,

00:05:53.350 --> 00:05:58.720
but we get the other important information that's
necessary to get a good connection experience

00:05:58.720 --> 00:06:04.920
such as your DNS server address, search
domains and things of that nature.

00:06:04.920 --> 00:06:09.640
If you're writing to the upper layers
of the system to CFNetwork and above,

00:06:09.640 --> 00:06:15.290
chances are your apps are already ready
to go as far as IPv6 is concerned.

00:06:15.290 --> 00:06:25.800
Certainly v6 support is available and visible at the stack
level all through the socket interface, CFNetwork and above,

00:06:25.800 --> 00:06:29.570
and if you're using CFNetwork like
I said you're probably already done.

00:06:29.570 --> 00:06:38.160
All you need to do is test and make sure everything
works as you would expect and you should be good to go.

00:06:38.160 --> 00:06:45.440
However if you're not using CFNetwork, you may have some
work that you need to do and should certainly be aware

00:06:45.440 --> 00:06:50.250
and check your code, particularly if you've
got older source code that you're incorporating

00:06:50.250 --> 00:06:55.600
into your projects, potentially open source or other things.

00:06:55.600 --> 00:07:00.190
When you're writing for v6 after using the
lower levels, there's some things to keep

00:07:00.190 --> 00:07:05.060
in mind-number one write your code
to be address independent;

00:07:05.060 --> 00:07:09.250
you're going to be now getting different
responses from your DNS servers.

00:07:09.250 --> 00:07:17.290
It's very likely that you'll get some combination of
IPv4 and IPv6 addresses in response to DNS resolution.

00:07:17.290 --> 00:07:24.260
And if you're storing or displaying IP addresses, you need
to make sure that you're using the right data structures

00:07:24.260 --> 00:07:30.470
and that you are not making dependencies
on what an IP address looks like.

00:07:30.470 --> 00:07:35.080
And frankly you shouldn't really be needing
to display an IP address for the most

00:07:35.080 --> 00:07:37.650
of the users unless they're very sophisticated.

00:07:37.650 --> 00:07:45.750
But use the APIs that are available for independent
hostname lookups, getaddrinfo in particular,

00:07:45.750 --> 00:07:51.480
and again be prepared for dealing with a
combination of responses depending where you are at.

00:07:51.480 --> 00:07:59.970
Also make sure you're using the right data structures again
for storing your addresses; and if you're using a kind

00:07:59.970 --> 00:08:09.290
of a conventional allocate open a socket,
resolve your DNS name and then do a connection,

00:08:09.290 --> 00:08:14.740
you need to rethink that process because what
you need to do first is resolve your DNS name

00:08:14.740 --> 00:08:19.660
and from that you can determine whether or
not you're dealing with a v4 or v6 address,

00:08:19.660 --> 00:08:22.920
then open the appropriate socket
and then make the connection.

00:08:22.920 --> 00:08:27.810
And there's some appropriate APIs to use and some
good documentation that already exists as part

00:08:27.810 --> 00:08:32.720
of Mac OS X that can help you do this effectively.

00:08:32.720 --> 00:08:40.530
Also if your apps are listening on connections,
you want to be listening really only on v6 sockets

00:08:40.530 --> 00:08:46.180
because we do the necessary work to be
able to provide the v4 connection for you.

00:08:46.180 --> 00:08:47.650
So you don't need to listen on both.

00:08:47.650 --> 00:08:53.120
Listen on v6 only and you should get the right experience.

00:08:53.120 --> 00:09:03.560
The other thing is due to the nature of the legacy; that is,
BSD sockets interfaces and others, that there are functions

00:09:03.560 --> 00:09:08.070
and structures that are IPv4 specific
and you want to be avoiding those.

00:09:08.070 --> 00:09:13.390
Again, you need to start moving forward
taking advantage of the fact that v6 is here

00:09:13.390 --> 00:09:15.950
and it provides a lot of important capabilities.

00:09:15.950 --> 00:09:22.530
Not just the addressability challenges that we're facing
but frankly it's a much better experience as you're dealing

00:09:22.530 --> 00:09:28.180
with peer-to-peer connections; because you
can imagine for example in a room like this

00:09:28.180 --> 00:09:33.420
where there's quite a large number of you
allocating the four addresses for being able

00:09:33.420 --> 00:09:41.150
to do peer-to-peer connections can be a challenge and
chances are you'll exhaust even that addressability,

00:09:41.150 --> 00:09:47.680
whereas the v6 address provides
considerable more flexibility there.

00:09:47.680 --> 00:09:54.270
Another feature that we've enhanced for
iOS4 is our support for captive networks.

00:09:54.270 --> 00:10:01.000
We introduced this capability of supporting captive
networks in iOS 3 and what is a captive network?

00:10:01.000 --> 00:10:08.370
If you go to Starbucks or McDonald's or to the airport or
to a hotel, chances are you've dealt with the situation

00:10:08.370 --> 00:10:18.020
that when you go to the Wi-Fi they want you to either
click OK to agree to their use terms or you have to put

00:10:18.020 --> 00:10:23.470
in a user name and a password and credit card
information because it's some type of paid connection.

00:10:23.470 --> 00:10:25.450
This is a captive network.

00:10:25.450 --> 00:10:30.190
And what's interesting is that a few
years ago when these came into being,

00:10:30.190 --> 00:10:35.980
most of the experience from our users was most
likely a laptop, when their first experience

00:10:35.980 --> 00:10:39.600
when they opened their laptop was to go to a web browser.

00:10:39.600 --> 00:10:42.520
And when they tried to open their first page,

00:10:42.520 --> 00:10:48.330
they'd get this UI that would have them
enter user name and password or accept terms.

00:10:48.330 --> 00:10:52.440
Well the experience on these mobile
devices is extremely different.

00:10:52.440 --> 00:10:57.550
It's very likely that you'll be connecting to
something else other than your web browser first.

00:10:57.550 --> 00:11:04.440
The user is most likely going to be running your app
or checking stock ticker or news or something else,

00:11:04.440 --> 00:11:09.200
and the web browser is probably not something that's
going to be their first connection experience.

00:11:09.200 --> 00:11:17.240
And the captive network support that we put in place
detects when you have connected to a captive network

00:11:17.240 --> 00:11:24.760
so that what happens is at the point of detection, the UI
is brought up for the user regardless of where they are

00:11:24.760 --> 00:11:28.950
as opposed to requiring them to go to the web browser first.

00:11:28.950 --> 00:11:36.330
And it will automatically keep track of any user
info for log information or other information

00:11:36.330 --> 00:11:42.360
so that the next time they can connect to that network they
don't have to go through the experience again and again.

00:11:42.360 --> 00:11:49.990
In addition if you're dealing with carrier hotspots because
one of the things that we've seen is given the extreme load

00:11:49.990 --> 00:11:58.230
on the 3G networks, that the carriers are more and more
providing free Wi-Fi capability if you happen to be a user

00:11:58.230 --> 00:12:07.090
of their 3G service because they want to get the load off of
their 3G backend; that they provide free Wi-Fi and we detect

00:12:07.090 --> 00:12:11.110
when you're in those situations and
we automatically will connect you

00:12:11.110 --> 00:12:15.090
so then again the user gets the right experience.

00:12:15.090 --> 00:12:23.110
One of the things that's new for iOS 4 is that we
intentionally make the Wi-Fi interface unavailable

00:12:23.110 --> 00:12:27.500
or as a secondary interface while we go
through the process of authentication.

00:12:27.500 --> 00:12:34.190
During iOS 3 there could be situations where if your app was
up and running and trying to use the network that your app

00:12:34.190 --> 00:12:40.280
and our authentication process would actually
collide until the network was truly available.

00:12:40.280 --> 00:12:45.220
The Wi-Fi experience is usually you
go and you associate to the network

00:12:45.220 --> 00:12:49.830
and then our experience has been well then
you can start moving backwards back and forth.

00:12:49.830 --> 00:12:54.790
But the really is in a captive network that there's
one more step which is this authentication step

00:12:54.790 --> 00:13:01.950
and so what we've done now is make the Wi-Fi interface so
that it's not primary and available until we've gone through

00:13:01.950 --> 00:13:06.470
and made it non-captive and properly authenticated.

00:13:06.470 --> 00:13:11.460
We've also introduced some support for
our hotspot management applications.

00:13:11.460 --> 00:13:19.710
There's folks like Boingo and others who may need to
provide some advisory information to us to let us know

00:13:19.710 --> 00:13:27.860
that there are Wi-Fi hotspots or SS ID's that they
have an interest in that maybe we might not want to try

00:13:27.860 --> 00:13:30.980
and authenticate because they have
more information than we do.

00:13:30.980 --> 00:13:38.610
So we've introduced some initial support
in iOS 4 to make this process better.

00:13:38.610 --> 00:13:48.360
Another feature we've added in iOS 4 is SSL VPN and this
is a combination of some significant new OS level plumbing

00:13:48.360 --> 00:13:57.200
that we put in place to allow our partners, Cisco
and Juniper, to implement SSL VPN solutions.

00:13:57.200 --> 00:14:07.240
SSL VPN is interesting in that it's kind of the current
and moving forward wave of enterprise connection to deal

00:14:07.240 --> 00:14:13.350
with the complexities that we are facing with more complex
networks particularly when you're dealing with mats

00:14:13.350 --> 00:14:23.400
and double mats and other firewalls, IP sec and existing
or older forms of VPN connectivity may not be able

00:14:23.400 --> 00:14:29.220
to very easily connect and deal with
negotiating through those network channels.

00:14:29.220 --> 00:14:38.080
SSL VPN arose as a way to deal with these challenges to
use the one fairly consistently known path for being able

00:14:38.080 --> 00:14:42.010
to get a connection which is the SSL connection port.

00:14:42.010 --> 00:14:51.280
And so what Juniper, Cisco and others have done is create,
albeit proprietary, but solutions for being able to deal

00:14:51.280 --> 00:14:56.480
with these kinds of connections in all these
various situations particularly in mobile.

00:14:56.480 --> 00:15:05.850
So we've added a considerable amount of plumbing to iOS 4
to enable them to do that and they've implemented solutions

00:15:05.850 --> 00:15:09.220
for the platform that are available via the app store.

00:15:09.220 --> 00:15:14.730
But it's important to you as the developers to
know that now there are some even additional ways

00:15:14.730 --> 00:15:19.200
that your users may be connecting into secure environments.

00:15:19.200 --> 00:15:24.510
Probably one of the most significant changes
in iOS 4 is support for multitasking.

00:15:24.510 --> 00:15:31.910
And when you're dealing with networking in the multitasking
situation there's some things you need to be aware of.

00:15:31.910 --> 00:15:40.660
In particular when your app is backgrounded your network
sockets will persist for some arbitrary period of time;

00:15:40.660 --> 00:15:49.070
but if the system needs those resources back they
will be reclaimed and those sockets will be closed.

00:15:49.070 --> 00:15:54.390
Which means you need to deal with
situations in potentially failure conditions

00:15:54.390 --> 00:15:57.970
that you may not have anticipated previously.

00:15:57.970 --> 00:16:02.840
We encourage you to respond to going to
background notification because when you do

00:16:02.840 --> 00:16:07.100
that there are probably things you can do
to shut down connections or preserve state

00:16:07.100 --> 00:16:14.910
so that you get the right experience when
your user returns your app to the foreground.

00:16:14.910 --> 00:16:21.100
Probably the most important thing though is you
really need to deal with new forms of errors

00:16:21.100 --> 00:16:26.670
that you may not have been testing for before and
make sure that you respond to all the situations

00:16:26.670 --> 00:16:28.820
where you may be getting networking errors.

00:16:28.820 --> 00:16:33.350
This is one of these cases where reading the
documentation is going to be really important.

00:16:33.350 --> 00:16:39.760
There are also a couple of other sessions going on this
week that we strongly encourage you to go to be able

00:16:39.760 --> 00:16:42.040
to get more information on how to deal with things.

00:16:42.040 --> 00:16:49.210
Certainly documentation in these sessions can
help if you're developing VoiceOver IP solutions

00:16:49.210 --> 00:16:54.160
or background music demo service,
things like that play services.

00:16:54.160 --> 00:17:00.070
I encourage you to go to the adopting multitasking
on the iPhone OS Part 1 and Part 2 sessions,

00:17:00.070 --> 00:17:03.090
as well as simplifying network using Bonjour sessions.

00:17:03.090 --> 00:17:06.590
All these sessions will talk in a lot more detail

00:17:06.590 --> 00:17:11.090
about the challenges you'll face when
you're dealing with multitasking.

00:17:11.090 --> 00:17:17.860
As I mentioned early on these new devices
have really changed the experience

00:17:17.860 --> 00:17:22.090
that users have now as far as how they deal with networking.

00:17:22.090 --> 00:17:29.850
In the old days and it's kind of
humorous to think of it in those terms,

00:17:29.850 --> 00:17:37.710
most users' network experience was using the browser and
checking your e-mail and maybe a couple of other things;

00:17:37.710 --> 00:17:44.750
but the reality is, is that a huge number of applications
that are being developed now are network-enabled;

00:17:44.750 --> 00:17:51.150
and this is the experience our users want to have
when they have these devices, that's the advantage.

00:17:51.150 --> 00:17:56.080
They can move anywhere, they can get access
to information on the fly, it's really,

00:17:56.080 --> 00:18:01.850
really a cool thing for them to be able to expect.

00:18:01.850 --> 00:18:08.290
And what it means though for you as developers is
a real significant change in your mindset in terms

00:18:08.290 --> 00:18:10.430
of how you develop networking applications.

00:18:10.430 --> 00:18:17.150
The mobility is not the exception--
it's the reality, it's the norm.

00:18:17.150 --> 00:18:23.800
Things used to be simple, big computers
plugged into UPS's in the wall.

00:18:23.800 --> 00:18:32.050
If you are an old-timer like me, you know, an Ethernet
cable was a big coax cable that was connected to the back

00:18:32.050 --> 00:18:37.620
of the computer, probably there was an assistant
administrator involved for configuring everything,

00:18:37.620 --> 00:18:41.790
and your entire local networking environment
was under somebody's control.

00:18:41.790 --> 00:18:50.150
I'm sure you experienced yesterday that local networking
environments may not necessarily be easy to control anymore.

00:18:51.290 --> 00:18:53.370
Nothing is static anymore.

00:18:53.370 --> 00:18:58.420
And although networking when it was
originally designed assumed a lot

00:18:58.420 --> 00:19:04.160
of static-- pictures in terms of its design model.

00:19:04.160 --> 00:19:07.940
The reality is that this is no longer
the case and that everything is dynamic

00:19:07.940 --> 00:19:14.190
and you can assume anything will change-- signal strength,
cell availability, Wi-Fi ability, whether or not the public

00:19:14.190 --> 00:19:19.040
or private Wi-Fi environment, whether you're dealing with
VPN connectivity or whether or not you have a whole bunch

00:19:19.040 --> 00:19:26.130
of people in the audience who have brought their
own base stations just to make demos challenging.

00:19:26.130 --> 00:19:28.780
All of those things can come to play.

00:19:28.780 --> 00:19:32.640
From the user's perspective networking is scary.

00:19:32.640 --> 00:19:39.310
It feels a little like smoke signals,
they don't really know how it works,

00:19:39.310 --> 00:19:45.880
sometimes from our perspective it feels a
little like cans with string between them;

00:19:45.880 --> 00:19:51.290
but the reality is this experience usually
cannot even be as good as that because at least

00:19:51.290 --> 00:19:54.150
if you've got the string you know you've got a connection.

00:19:54.150 --> 00:20:01.030
What we need to do though, everybody in this room, is we
need to make sure that if you're a user that it really feels

00:20:01.030 --> 00:20:06.570
like it's a magical experience; that the right things happen
that they're not having to think about what's involved

00:20:06.570 --> 00:20:10.510
and all the challenges that are
involved with their network experience.

00:20:10.510 --> 00:20:15.980
So with that I want to talk a little bit about what I
call the Networking Top 10 the things that I encourage you

00:20:15.980 --> 00:20:19.790
to remember while you're writing the next great app.

00:20:19.790 --> 00:20:25.040
Starting with number 10. Don't assume the network is free.

00:20:25.040 --> 00:20:31.430
The reality is that usage is likely to be and
it appears from recent announcements from AT&T

00:20:31.430 --> 00:20:34.640
that it's very likely to be charged by time or amount.

00:20:34.640 --> 00:20:37.470
That you need to be aware that
the traffic that you're putting

00:20:37.470 --> 00:20:41.420
over this connection might be costing you user money.

00:20:41.420 --> 00:20:48.420
So if you can avoid unnecessary traffic, retransmitting
information, transmitting unnecessarily large things

00:20:48.420 --> 00:20:52.240
when doing the scaling down on the
device, that that's a wise thing to do.

00:20:52.240 --> 00:20:58.890
If you can make sure that you're dealing with potentially
data-appropriate information and can keep your connections

00:20:58.890 --> 00:21:02.710
down you'll cost the user considerably less.

00:21:02.710 --> 00:21:07.310
Certainly your 3G or Wi-Fi situation may be fee-based.

00:21:07.310 --> 00:21:12.580
If you're in a captive network they again might
be paying by byte, they might be paying by time;

00:21:12.580 --> 00:21:17.180
these are things that you need to consider and to make sure

00:21:17.180 --> 00:21:21.790
that you're not spending the user's
money when they're not looking.

00:21:21.790 --> 00:21:29.490
Obviously if you've dealt with 3G and you've gone overseas
and have turned on 3G data roaming for example and manage

00:21:29.490 --> 00:21:32.250
to get one of those bills, it's kind of scary.

00:21:32.250 --> 00:21:37.040
Nothing like a few thousand dollar bill when you
get back from your trip to wake you right up;

00:21:37.040 --> 00:21:43.000
so again we want to be very, very sensitive to
the fact that those things cost the users money.

00:21:43.000 --> 00:21:45.160
And again cache when you can.

00:21:45.160 --> 00:21:49.200
Number 9, robustly deal with network errors.

00:21:49.200 --> 00:21:54.490
The reality is in this environment, in a mobile environment,
you're going to be dealing with networking errors

00:21:54.490 --> 00:21:57.590
that you've probably never dealt with before.

00:21:57.590 --> 00:22:01.240
Connections will go down-- it's a guarantee.

00:22:01.240 --> 00:22:02.990
Just plan for it.

00:22:02.990 --> 00:22:09.360
Know that those things are going to happen, check for
error conditions in your networking code in all cases,

00:22:09.360 --> 00:22:12.950
and unfortunately it means a lot of
testing and in different environments.

00:22:12.950 --> 00:22:18.180
You need to make sure that you've tried
all the various flavors of Edge, of 3G,

00:22:18.180 --> 00:22:24.400
whether you've done the various flavors of Wi-Fi because
I don't know if you noticed yesterday in the keynote,

00:22:24.400 --> 00:22:27.800
one of the phones worked and the other didn't.

00:22:27.800 --> 00:22:38.380
You may not be aware but the older phones do not have n
capability where 80211n whereas the iPhone 4 does.

00:22:38.380 --> 00:22:41.880
And that's a situation where those
two phone environments were

00:22:41.880 --> 00:22:52.090
on an actually different Wi-Fi network bandwidth frequencies
and those things can impact what your experience will be.

00:22:52.090 --> 00:22:55.850
Certainly n will provide you greater
throughput capability but you need

00:22:55.850 --> 00:22:58.760
to make sure you've tested for all those variants.

00:22:58.760 --> 00:23:03.300
Packets are going to get dropped-- just the
nature of the beast in a mobile environment.

00:23:03.300 --> 00:23:06.170
And timeouts are going to occur.

00:23:06.170 --> 00:23:12.200
You in particular need to be much more aware
with iOS 4 of how to deal with backgrounding;

00:23:12.200 --> 00:23:19.030
make sure that you're dealing with it intelligently
and close things down when you can-- it makes sense.

00:23:19.030 --> 00:23:23.800
Number 8 networking is asynchronous by definition.

00:23:23.800 --> 00:23:31.560
It is the most asynchronous activity that will happen
on your system; and you need to write your code this way

00:23:31.560 --> 00:23:36.120
and unfortunately the number of apps that
I've experienced that put synchronous calls

00:23:36.120 --> 00:23:39.870
on the main thread is kind of frightening and sad.

00:23:39.870 --> 00:23:44.880
Do not, do not put synchronous calls on the main thread.

00:23:44.880 --> 00:23:52.310
If you are for example trying to get host by name on
the main thread and you happen to be in an environment

00:23:52.310 --> 00:23:57.530
where you've got a flaky connection, or the
DNS thing isn't responding very quickly,

00:23:57.530 --> 00:24:01.360
you've probably experienced that
your app is going to get shot.

00:24:01.360 --> 00:24:05.250
Frankly, as a developer I'm surprised
your user hasn't shot you.

00:24:05.250 --> 00:24:10.040
It's really a bad experience for the
app to go away for long periods of times

00:24:10.040 --> 00:24:13.270
and not be responsive or to just quit unexpectedly.

00:24:13.270 --> 00:24:19.110
And the reality is that because of the asynchronous
nature of networking, you don't want to be putting things

00:24:19.110 --> 00:24:23.310
in a situation where it's going
to block the user experience.

00:24:23.310 --> 00:24:27.030
Use event-driven APIs to give a better experience.

00:24:27.030 --> 00:24:32.610
Make sure you take advantage of things like Bonjour
and the Foundation APIs and with RunLoop event sources

00:24:32.610 --> 00:24:35.090
and other things to get the right experience.

00:24:35.090 --> 00:24:37.950
Put things on threads when it makes sense to do so.

00:24:37.950 --> 00:24:41.520
But most importantly keep it off
the main thread; don't block UI.

00:24:41.520 --> 00:24:49.090
But also realize that there are some calls in the
system that also return information asynchronously.

00:24:49.090 --> 00:24:55.800
If you're for example trying to do a peer-to-peer
connection or connecting to a local network using Bonjour,

00:24:55.800 --> 00:25:00.790
you will get data returned to you
of services available over time

00:25:00.790 --> 00:25:03.580
as they are discovered and are made available on network.

00:25:03.580 --> 00:25:10.150
And the user really expects that that's going to be the
case so you shouldn't just grab what you happen to get

00:25:10.150 --> 00:25:15.130
in just the few first seconds or two and only
show that information but realize that it's going

00:25:15.130 --> 00:25:18.390
to be updating potentially as their connection remains live.

00:25:18.390 --> 00:25:22.300
Your UI needs to reflect the reality
of this asynchronousity.

00:25:22.300 --> 00:25:26.630
Number 7-- link quality is completely variable.

00:25:26.630 --> 00:25:29.540
We again all experienced that yesterday.

00:25:29.540 --> 00:25:38.150
Wi-Fi, 3G and some things that I've certainly have
seen or will be seeing more of layered networks.

00:25:38.150 --> 00:25:42.170
Some airplanes for example today
are now providing Wi-Fi on board.

00:25:42.170 --> 00:25:48.090
But obviously you're not getting Wi-Fi back to a
cable, back to the ground, that would be amusing.

00:25:48.090 --> 00:25:55.120
The reality is that they're going through some satellite
connection or through some other secondary transport

00:25:55.120 --> 00:25:57.590
which is a lot worse than your initial connection.

00:25:57.590 --> 00:26:04.150
So you can't assume just because you've got a great
Wi-Fi connection all the bars are up and everything

00:26:04.150 --> 00:26:07.500
that that's going to be the speed of your communication.

00:26:07.500 --> 00:26:10.020
The reality is that you might be stocked behind someday.

00:26:10.020 --> 00:26:19.910
Turns out we happen to have some commuter buses that we use
frequently and there's Wi-Fi on the busses that's great,

00:26:19.910 --> 00:26:25.150
but they go through a 3G connection and so again
while it may look like it's all a great connection,

00:26:25.150 --> 00:26:32.140
you're dealing with potentially a lot of aggregated traffic
on a much slower link behind your initial connection.

00:26:32.140 --> 00:26:38.930
You need to expect changes in speed; you need to deal with
latency delays and other challenges and again packet loss.

00:26:38.930 --> 00:26:43.520
Number 6-- deal with no network conditions.

00:26:43.520 --> 00:26:48.940
There's going to be situations where your user's
in an environment where there is no network at all.

00:26:48.940 --> 00:26:54.480
My wife happens to be a teacher and every time I go
into her classroom I'm convinced I'm in a Faraday cage.

00:26:54.480 --> 00:26:58.840
There's absolutely no signal of any type for anything.

00:26:58.840 --> 00:27:04.250
And if I launch an application that happens to
use the network and I might not even realize

00:27:04.250 --> 00:27:09.160
that it's network enabled at first but because
it has some network behavior built into it,

00:27:09.160 --> 00:27:12.880
and the Apple all of a sudden doesn't
respond at all the way you would expect.

00:27:12.880 --> 00:27:21.740
One example of this is an app that might have a
synchronous, an asynchronous call on the main thread,

00:27:21.740 --> 00:27:24.870
and sitting there trying to resolve
DNS when I've got no network.

00:27:24.870 --> 00:27:28.750
Well, all of a sudden that app is effectively dead to me.

00:27:28.750 --> 00:27:34.890
You need to make sure that you deal with the fact
that the network may not be there when you launch,

00:27:34.890 --> 00:27:41.280
and more interestingly may disappear as the user walks
down the street or they move from one room to another.

00:27:41.280 --> 00:27:48.550
You need to deal with that and there's a few ways, good
examples that I've seen either caching information,

00:27:48.550 --> 00:27:54.190
but giving people reasonable feedback to know their network
isn't available they may not get quite the experience

00:27:54.190 --> 00:27:56.450
that they would hope for.

00:27:56.450 --> 00:27:59.740
Your app needs to behave intelligently,
it needs to be graceful.

00:27:59.740 --> 00:28:01.750
Again test for this.

00:28:01.750 --> 00:28:05.230
Number 5-- Assume the network is insecure.

00:28:05.230 --> 00:28:11.250
You may be in a public Wi-Fi environment, a
hotspot; you might be here at the conference.

00:28:11.250 --> 00:28:17.260
What's the chances are that you've actually connected
to a spoof network that somebody has actually created

00:28:17.260 --> 00:28:20.880
to look conveniently just like
the network that you're expecting.

00:28:20.880 --> 00:28:27.240
That's very possible and our users are certainly nowhere
near as sophisticated as you are and can easily get

00:28:27.240 --> 00:28:30.180
in an environment where they're
either in a public environment

00:28:30.180 --> 00:28:32.920
or somewhere where they might be in a spoof network.

00:28:32.920 --> 00:28:37.460
You need to be careful about the kind of
information that you're moving over the line.

00:28:37.460 --> 00:28:43.300
Again, it used to be you could assume if you were running
a certain class of application that would only be run

00:28:43.300 --> 00:28:49.440
in an enterprise environment and of course it was their
responsibility to make sure everything was secure.

00:28:49.440 --> 00:28:54.560
The world's different now and you're going to
be dealing with various forms of communications

00:28:54.560 --> 00:28:57.120
and connections and you need to be sensitive to it.

00:28:57.120 --> 00:28:59.370
Don't transmit user information in the clear.

00:28:59.370 --> 00:29:05.430
If you can, take advantage of things like
transport-level security (TLS) or other mechanisms

00:29:05.430 --> 00:29:08.560
for making sure that users information is protected.

00:29:08.560 --> 00:29:15.970
They're trusting that you're going to do the
right thing and again they're not network experts.

00:29:15.970 --> 00:29:21.440
Number 4-- Make sure you're IPv4/IPv6 agnostic.

00:29:21.440 --> 00:29:28.090
The reality is that v6 is here and if you have
an application that's global or you're dealing

00:29:28.090 --> 00:29:32.360
with different environments, you need to deal with v6 now.

00:29:32.360 --> 00:29:40.240
It's available on iOS 4 and certainly it had been available
on our desktop, laptop products for a number of years.

00:29:40.240 --> 00:29:46.640
It's here in our products for you to be able to take
advantage of and it's used throughout the world.

00:29:46.640 --> 00:29:51.700
Make sure you're not making any assumptions as to the kinds
of address types that you're using, don't assume things

00:29:51.700 --> 00:29:59.770
or before, be prepared for multiple DNS resolution
responses, and make sure that you check your open source

00:29:59.770 --> 00:30:03.260
and older source code for v6 compatibility.

00:30:03.260 --> 00:30:06.000
For whatever reason you can't completely support v6,

00:30:06.000 --> 00:30:13.360
at least make sure you're not doing anything
foolish so your app doesn't respond badly.

00:30:13.360 --> 00:30:18.850
Because we can certainly assume while v6 gets rolled out
more and more to the world, that it's probably a good chance

00:30:18.850 --> 00:30:23.770
that there'll be a combination of v4
and v6 connectivity that's available.

00:30:23.770 --> 00:30:26.670
You at least need to make sure you
deal with that well and make sure

00:30:26.670 --> 00:30:33.150
that if you do get v6 responses that
you again respond intelligently.

00:30:33.150 --> 00:30:37.390
Number 3-- Use Bonjour to advertise and find services.

00:30:37.390 --> 00:30:41.210
It's a dynamic world, nobody remembers an IP address

00:30:41.210 --> 00:30:47.990
and if you haven't experienced a v6 address
yet, I challenge you to memorize one.

00:30:47.990 --> 00:30:52.770
I certainly, for whatever reason been doing this many
years, I have a whole bunch of v4 addresses that seem

00:30:52.770 --> 00:30:58.160
to be permanently burned in my brain but there's no way in
the world I'm going to memorize one of these v6 addresses.

00:30:58.160 --> 00:31:01.430
And the reality is that the user
should never have to deal with this.

00:31:01.430 --> 00:31:07.260
So they should always be using obviously for Internet
related connectivity you would expect that they're going

00:31:07.260 --> 00:31:12.130
to be using DNS and various URLs
and such for their connections.

00:31:12.130 --> 00:31:18.280
But more importantly if you're creating a
peer-to-peer solution where you're sharing information

00:31:18.280 --> 00:31:24.540
over a local network, take advantage of the mechanisms
that we've built into the system; use Bonjour.

00:31:24.540 --> 00:31:28.950
You can advertise your services; you can browse and resolve.

00:31:28.950 --> 00:31:33.860
It provides all the plumbing and capability
to it to get a great peer-to-peer experience.

00:31:33.860 --> 00:31:40.840
And if you're using Bonjour you'll actually get the support
for being able to do Bluetooth connectivity for free.

00:31:40.840 --> 00:31:48.950
On the desktop OS it's worth noting that we also have some
additional capabilities if you are providing a service;

00:31:48.950 --> 00:31:54.840
for example, file sharing or some other service
that if you're running on top of Snow Leopard,

00:31:54.840 --> 00:31:58.280
that we provide this capability called sleep proxy support.

00:31:58.280 --> 00:32:04.260
What this means is in order to create
as truly a green environment as we can,

00:32:04.260 --> 00:32:11.040
we enable this ability so if you've got a service on a
desktop or laptop environment, a laptop that's plugged

00:32:11.040 --> 00:32:19.780
into the wall power wise, that that service will
be available even if the machine is put to sleep.

00:32:19.780 --> 00:32:24.790
Because what happens at the point of being put to sleep is
that any of that service information that you've registered

00:32:24.790 --> 00:32:29.430
with Bonjour gets sent to a sleep
proxy server that's on your network.

00:32:29.430 --> 00:32:36.440
The sleep proxy server can be an airport
base station, a time capsule, Apple TV,

00:32:36.440 --> 00:32:40.770
these are all devices that are always
on and can be in a situation to listen

00:32:40.770 --> 00:32:47.050
for those services even though your
desktop machine may be in full sleep mode.

00:32:47.050 --> 00:32:55.190
And what ends up happening is when the user connects to
that service; the sleep proxy intercepts that request

00:32:55.190 --> 00:32:58.890
and does the necessary wake on land
or wake on wireless to make sure

00:32:58.890 --> 00:33:03.890
that the actual service providing
system is woken up so they can respond.

00:33:03.890 --> 00:33:07.300
That way the device can go truly
into its lowest power state.

00:33:07.300 --> 00:33:16.650
But this is an important capability so if you're doing
for example, users doing iTunes sharing or file sharing

00:33:16.650 --> 00:33:22.730
or you're providing some service so that you can get
wireless connectivity when they come back into the house,

00:33:22.730 --> 00:33:27.070
the right thing will happen when using
Bonjour and with the sleep proxy.

00:33:27.070 --> 00:33:32.360
I encourage you to go to the Bonjour session
later this week to get more information.

00:33:32.360 --> 00:33:37.850
Number 2-- Power is important as performance.

00:33:37.850 --> 00:33:43.970
Obviously everyone wants their apps to be snappy and
responsive, that's the expectation that everybody has

00:33:43.970 --> 00:33:51.120
but power is critical in these environments; portability
means batteries and battery means a finite power resource.

00:33:51.120 --> 00:33:54.080
Don't power up the radios more than you need to.

00:33:54.080 --> 00:33:56.210
You're going "Gee, how do I power up the radio?"

00:33:56.210 --> 00:34:00.010
You power up the radio by creating network traffic.

00:34:00.010 --> 00:34:05.660
And so if you're doing network traffic, one of
the things we encourage you to do is be bursty.

00:34:05.660 --> 00:34:13.900
Someone said it's better to group your requests
and get a lot of communication done as a burst,

00:34:13.900 --> 00:34:17.000
than it is to dribble things out over time.

00:34:17.000 --> 00:34:22.120
Because as you dribble those connections or keep those
connections open and active over a long period of time,

00:34:22.120 --> 00:34:27.060
most likely you're keeping the radio active,
whether it be the Wi-Fi, the Bluetooth

00:34:27.060 --> 00:34:32.060
or the 3G and that means you're draining battery.

00:34:32.060 --> 00:34:37.080
The radios are probably one of the more significant
ways you can drain battery from these devices.

00:34:37.080 --> 00:34:43.190
This is why we've done what we've done in terms
of the background capability, the multitasking;

00:34:43.190 --> 00:34:50.220
because experience has been certainly as we've seen in
other platforms, that if you keep a lot of things active

00:34:50.220 --> 00:34:54.740
in the background that battery is getting
drained at a kind of a significant rate.

00:34:54.740 --> 00:35:00.170
So we've worked very hard to try and get the best
battery life experience that we can for users.

00:35:00.170 --> 00:35:05.170
We need your help to make sure that
that experience is as good as it can be.

00:35:05.170 --> 00:35:07.470
Take advantage of push notification.

00:35:07.470 --> 00:35:11.570
This is the one of the more equivalents
to the sleep proxy if you will.

00:35:11.570 --> 00:35:21.150
Allow the advice to go to its lowest state and get a
delayed notification to be able to deal with various events.

00:35:21.150 --> 00:35:23.350
Take advantage of push notifications when you can

00:35:23.350 --> 00:35:27.900
because that's one way you can avoid keeping
connections open more than you need to.

00:35:27.900 --> 00:35:35.540
And again on the desktop and Snow Leopard sleep
proxy support does a significant job in helping.

00:35:35.540 --> 00:35:41.720
And finally Number 1-- you've got to assume
that there's going to be change at any time.

00:35:41.720 --> 00:35:44.050
This is no longer a static world.

00:35:44.050 --> 00:35:49.210
Anything and everything as far as your
network behavior is concerned will change.

00:35:49.210 --> 00:35:55.030
Your available interfaces, it's very possible
that in one moment you've got a Wi-Fi connection,

00:35:55.030 --> 00:36:02.190
then it drops because of connectivity; they've gone
into an elevator but you've got 3G connection capability

00:36:02.190 --> 00:36:07.920
or any number of other combinations or
3G is down and all you can get to is Edge.

00:36:07.920 --> 00:36:12.960
There are a lot of things that may change in
terms of the network connectivity and experience.

00:36:12.960 --> 00:36:17.170
Your signal strength and quality can change
dramatically just in a matter of feet

00:36:17.170 --> 00:36:20.570
or sometimes just standing there
because of other interference, right?

00:36:20.570 --> 00:36:25.200
So make sure you're not leaving
connections open longer than you need to.

00:36:25.200 --> 00:36:33.830
The more you're prepared for this kind of change, the more
you're able to adapt to this and not be keeping a lots

00:36:33.830 --> 00:36:40.750
of things open and active, the less sensitive you're going
to be to these kinds of changes and the easier it's going

00:36:40.750 --> 00:36:42.690
to be to give a good experience to the users.

00:36:42.690 --> 00:36:47.110
So you want to think about obviously
what you're connecting is the key part

00:36:47.110 --> 00:36:50.730
of your value proposition you're going
to have to keep the connections open.

00:36:50.730 --> 00:36:56.000
But think about do you need to keep all these
connections all the time, are there more efficient ways

00:36:56.000 --> 00:36:59.300
to make these things so that you can deal with change?

00:36:59.300 --> 00:37:04.120
And if you are keeping them open what do you
do when there is a change in network state?

00:37:04.120 --> 00:37:08.540
Can you behind the scenes change
the connection to take advantage

00:37:08.540 --> 00:37:14.370
of whatever the now available interface
is so that the experience is a good one?

00:37:14.370 --> 00:37:18.730
The other thing to note is like I talked about
earlier, you've got to deal with situations

00:37:18.730 --> 00:37:26.370
where you may not have a network at all at some point,
but the network is likely to come back and this is

00:37:26.370 --> 00:37:30.440
where good networking behavior comes into play.

00:37:30.440 --> 00:37:34.560
Take advantage of the way the system
is architected to help you here.

00:37:34.560 --> 00:37:41.540
Use the reachability APIs for example, help provide
notifications when the network changes state.

00:37:41.540 --> 00:37:46.920
One other thing to note here though is the
reachability APIs are not a preflight check.

00:37:46.920 --> 00:37:52.000
You don't use the reachability APIs to say
can I make a connection to this service?

00:37:52.000 --> 00:37:58.620
No. Try and make the connection to the service
first; if it fails use the reachability APIs

00:37:58.620 --> 00:38:05.820
to give you change notifications and other feedback so
that you know when it might be a good time to try again

00:38:05.820 --> 00:38:09.780
or deal with some other change in network state.

00:38:09.780 --> 00:38:16.010
Change is probably our biggest challenge as network
developers; and this is one of the things that you're going

00:38:16.010 --> 00:38:20.630
to spend most of your time dealing with
whether you're testing or other things.

00:38:20.630 --> 00:38:28.120
You need to provide an environment that you're testing
in to anticipate all the various change conditions

00:38:28.120 --> 00:38:33.490
that you possibly can so the user is not the one
who is being the guinea pig in these situations.

00:38:33.490 --> 00:38:39.060
I didn't say it was easy but this is
important as far as a great experience.

00:38:39.060 --> 00:38:43.760
So with that I want to encourage you to go to a
number of sessions that are coming during this week.

00:38:43.760 --> 00:38:49.030
There's a lot more detail obviously than
I can provide here in this short session.

00:38:49.030 --> 00:38:55.030
So certainly for Bonjour, for peer-to-peer
capability, for finding services,

00:38:55.030 --> 00:38:59.280
please go to the Simplifying Network
Using Bonjour session on Wednesday.

00:38:59.280 --> 00:39:08.300
There are also a couple of sessions on Network Apps for
iPhone Part 1 and 2, Wednesday at 2 and Wednesday at 3:15.

00:39:08.300 --> 00:39:16.470
This will get you into the details around CFNetwork and
other APIs and services that are available on the platform.

00:39:16.470 --> 00:39:22.650
I also encourage you to go to a couple of sessions
later today if you're looking at multitasking.

00:39:22.650 --> 00:39:26.180
The Adopting Multitasking on iPhone OS, Part 1 and Part 2.

00:39:26.180 --> 00:39:33.220
Part 2 in particular I believe has a considerable amount
of detail around how to deal with some of the challenges

00:39:33.220 --> 00:39:40.220
of multitasking; and so I really encourage you to take
advantage of these sessions and of course documentation.

00:39:40.220 --> 00:39:46.500
So I think it's important to note the
world has changed over the past few years.

00:39:46.500 --> 00:39:53.750
The iPhone made a really dramatic change in the
user's expectations of how to deal with mobility;

00:39:53.750 --> 00:40:00.900
that networked applications really add enormous
value to our customers, your customers and ours.

00:40:00.900 --> 00:40:04.890
And the more you can do to give them
this connective experience, the better.

00:40:04.890 --> 00:40:09.620
But unfortunately it means for you there's a
lot of work to be done to make sure you deal

00:40:09.620 --> 00:40:11.680
with all the challenges that are involved.

00:40:11.680 --> 00:40:18.360
It's no longer as easy as it was a handful of years ago
when the environment that you were dealing with was static.

00:40:18.360 --> 00:40:24.880
I'm really looking forward to seeing the apps that
you guys produce, I've had the opportunity to play

00:40:24.880 --> 00:40:32.660
with a substantial number of apps that are out there today
that provide really great network experience for users.

00:40:32.660 --> 00:40:37.500
And I think as we move forward we're just
going to continue to see this explode.

00:40:37.500 --> 00:40:45.100
Out of the 225,000 apps that are currently up there we know
that a large number of them take advantage of networking.

00:40:45.100 --> 00:40:46.760
They may not be obvious to the user.

00:40:46.760 --> 00:40:51.310
Some of it is for games, keeping track
of the high score lists and things

00:40:51.310 --> 00:40:55.460
that they don't experience throughout
the connection and running and playing

00:40:55.460 --> 00:40:58.810
of the app, but they experience it at some point.

00:40:58.810 --> 00:41:05.200
Whether they experience it as the primary
capability of your application or the secondary one,

00:41:05.200 --> 00:41:09.680
the experience that you provide for them
is key and we're here to do what we can

00:41:09.680 --> 00:41:11.600
to help you make that experience as good as we can.

