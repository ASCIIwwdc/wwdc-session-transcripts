WEBVTT

00:00:06.030 --> 00:00:10.850
>> Marc Verstaen: So good morning Moscone.

00:00:10.850 --> 00:00:15.540
It is my pleasure to welcome you here this
morning and to take you through the second part

00:00:15.540 --> 00:00:19.160
of our journey that we started yesterday with Todd.

00:00:19.160 --> 00:00:25.630
We want to take you to a way to
master iPhone development with Xcode.

00:00:25.630 --> 00:00:32.410
It will be a journey that will be in three parts.

00:00:34.970 --> 00:00:43.360
That's interesting, I like that slide,
but, okay and so yesterday you went

00:00:43.360 --> 00:00:49.060
through developing, building, provisioning and distributing.

00:00:49.060 --> 00:00:51.900
Today you will go through project structure.

00:00:51.900 --> 00:00:55.900
It is very important to start with
the right foundation on your project.

00:00:55.900 --> 00:01:05.480
Then you will learn how to target older devices while
still benefiting from the features of newer versions.

00:01:05.480 --> 00:01:10.930
You will then go through device provisioning, I know it's
a very easy thing, but we can revisit it once in awhile.

00:01:10.930 --> 00:01:16.590
And then you will be taken to application life cycle.

00:01:16.590 --> 00:01:22.400
So I will first introduce Jacob who will
drive you through project structure.

00:01:22.400 --> 00:01:23.710
Thank you.

00:01:23.710 --> 00:01:29.230
[ Applause ]

00:01:29.230 --> 00:01:31.060
>> Jacob Xiao: Thanks Marc.

00:01:31.060 --> 00:01:34.820
I'd like to talk to you today about
how to set up your iPhone Apps project.

00:01:34.820 --> 00:01:38.630
I'm going to be talking about two things.

00:01:38.630 --> 00:01:44.620
One is, some important project setting that you like
to set up, that you should set up in your app project

00:01:44.620 --> 00:01:49.950
and the other is how to bring your
app to the iPhone and iPad.

00:01:49.950 --> 00:01:56.170
There's a lot of settings in Xcode and I know it can seem
kind of intimidating at first, but really there's only a few

00:01:56.170 --> 00:02:00.270
that you actually need to care about and I'm
going to show you how to set those up today

00:02:00.270 --> 00:02:04.970
so you can get down to the real programming work.

00:02:04.970 --> 00:02:07.580
First off is the Base SDK.

00:02:07.580 --> 00:02:12.230
The Base SDK determines which version of
the OS is used to build your application.

00:02:12.230 --> 00:02:17.230
And this is not the same as which
version of the OS your app can run on.

00:02:17.230 --> 00:02:19.880
I'll talk about that in just a minute.

00:02:19.880 --> 00:02:26.060
You should always set this to the latest
version of the SDK, so currently that's 4.0.

00:02:26.060 --> 00:02:34.720
Now the Deployment Target is the setting that
determines which versions of the OS your app can run on.

00:02:34.720 --> 00:02:39.950
So you just set this to the oldest
OS version that you want to support.

00:02:39.950 --> 00:02:45.810
So, if you like to run on 3.1 and
later, you just set it to 3.1.

00:02:45.810 --> 00:02:51.610
And this determines whether symbols that you
use in frameworks are strongly or weakly linked.

00:02:51.610 --> 00:02:56.730
And we'll talk in a little bit about how to safely
use those new features while still being able

00:02:56.730 --> 00:02:59.230
to support older OS versions.

00:02:59.230 --> 00:03:04.100
The Architecture setting is another
important, another important setting

00:03:04.100 --> 00:03:06.790
in your project, but this one's really easy.

00:03:06.790 --> 00:03:10.940
You can just set it to Standard and you'll
be able to run optimally on all devices.

00:03:10.940 --> 00:03:19.170
And this will go for armv6 and armv7 and
it's the default for newly created projects.

00:03:20.290 --> 00:03:24.160
Finally, there's the Targeted Device Family setting.

00:03:24.160 --> 00:03:28.560
And this determines which types
of devices your app can run on.

00:03:28.560 --> 00:03:32.530
You can set it to iPhone, iPad or both.

00:03:32.530 --> 00:03:36.630
And what you set this to is totally up to you.

00:03:36.630 --> 00:03:38.660
So let's have an example.

00:03:38.660 --> 00:03:43.680
Let's say you're setting up your app
and you want to set the Base SDK first.

00:03:43.680 --> 00:03:49.190
Since the latest version of the OS is
4.0, what should you set the Base SDK to?

00:03:49.190 --> 00:03:49.540
Anyone?

00:03:49.540 --> 00:03:50.870
>> 4.0.

00:03:50.870 --> 00:03:53.730
>> Jacob Xiao: 4.0, that's right.

00:03:53.730 --> 00:04:01.390
Then you should set the Deployment Target to
3.1 if you want to support OS 3.1 and forward.

00:04:01.390 --> 00:04:07.410
The Architectures, you should set to standard in all cases
and if you want a universal app, you can just set it,

00:04:07.410 --> 00:04:10.750
the Targeted Device Family to iPhone/iPad.

00:04:10.750 --> 00:04:18.100
Then you'll be able to use all of the new features
up to OS 4.0 and support all the way back to OS 3.1.

00:04:18.100 --> 00:04:23.700
And it's important to make sure you always test
on all of the OS versions that you support.

00:04:23.700 --> 00:04:30.570
Next, I'd like to talk about how to
bring your app to the iPhone and iPad.

00:04:30.570 --> 00:04:34.220
Universal apps are one way to do this and with this method,

00:04:34.220 --> 00:04:38.990
you have a single application that
runs on both device types.

00:04:38.990 --> 00:04:42.920
The alternative to this is multiple apps.

00:04:42.920 --> 00:04:47.940
Here you have two applications, one
for the iPhone and one for iPad.

00:04:47.940 --> 00:04:56.260
And when you're done, if you have an older
iPhone only project, you can actually use Xcode

00:04:56.260 --> 00:04:59.920
to automatically upgrade your project to run for iPad.

00:04:59.920 --> 00:05:07.100
Just click on, just select the iPhone
App Target in the Groups and Files table

00:05:07.100 --> 00:05:12.720
and then select the Upgrade Current
Target for iPad menu item.

00:05:12.720 --> 00:05:20.890
And this will give you the option of either upgrading
to a single Universal App or to Multiple separate apps.

00:05:20.890 --> 00:05:24.040
So what's the difference between these two approaches?

00:05:24.040 --> 00:05:31.030
With the single universal app you have 1 target
that builds 1 application that runs on both devices.

00:05:31.030 --> 00:05:37.780
Where as with multiple apps you have 2 targets that
create 2 applications, one for iPhone, one for iPad.

00:05:37.780 --> 00:05:41.240
And which one you choose is really more
of a marketing decision about how you want

00:05:41.240 --> 00:05:43.050
to deliver your product to your customers.

00:05:43.050 --> 00:05:47.140
So now I'd like to show you some of that.

00:05:47.140 --> 00:05:49.810
Okay, now let's get started.

00:05:49.810 --> 00:05:56.250
I'm going to open up this older project that
I created and for iPh, an iPhone application.

00:05:56.250 --> 00:06:04.140
Now, first off I'm going to build and run to see how
it looks, but unfortunately I'm getting an error now.

00:06:04.140 --> 00:06:11.590
It's not finding the SDK that's set as the Base SDK,
the iPhone 3.13 and this is probably a common error

00:06:11.590 --> 00:06:15.120
that you'll run into as you're
updating to newer SDK versions.

00:06:15.120 --> 00:06:20.450
The problem is, the Base SDK that's set is no
longer included in this version of the tools.

00:06:20.450 --> 00:06:22.230
Luckily, this is easy to fix.

00:06:22.230 --> 00:06:31.190
I'll just open up the project and go here to the
Base SDK and we'll set it to 4.0, the latest version.

00:06:31.190 --> 00:06:40.070
While I'm here, I'm also going to go down to the Deployment
section and change the Deployment Target to be 3.1

00:06:40.070 --> 00:06:44.990
and now I'll be able to run on anything back to OS 3.1.

00:06:44.990 --> 00:06:48.510
Okay, now let's try to Build and Run again in the simulator.

00:06:48.510 --> 00:06:57.310
[ Background noise ]

00:06:57.310 --> 00:07:00.430
Great. Now it's building and here's our application.

00:07:00.430 --> 00:07:05.860
I'm also going to see how it looks on the iPad simulator.

00:07:09.970 --> 00:07:15.130
Since this project hasn't been upgraded to run for iPad yet,

00:07:15.130 --> 00:07:20.440
it's just going to run in the iPhone compatibility
mode and that's not a great user experience.

00:07:20.440 --> 00:07:27.880
So let's go back, find our iPhone App
Target and then once that's selected,

00:07:27.880 --> 00:07:33.890
choose the Upgrade Current Target for iPad menu item.

00:07:33.890 --> 00:07:38.480
As you can see we get the option for
a Universal app or 2 separate apps.

00:07:38.480 --> 00:07:43.670
I'm going to go with the Universal app, though.

00:07:43.670 --> 00:07:46.880
And now you can see, it's created this resources group

00:07:46.880 --> 00:07:53.260
which contains an iPad version of
one of my original iPhone resources.

00:07:53.260 --> 00:08:04.560
It's also made some changes to the target, the most
important one is setting the targeted device version

00:08:04.560 --> 00:08:09.350
to iPhone/iPad, so that now it's a Universal app.

00:08:09.350 --> 00:08:14.680
And you can also see that the Architectures
is set to standard.

00:08:14.680 --> 00:08:17.660
Okay, let's run again for the iPad simulator.

00:08:17.660 --> 00:08:22.170
Great, now we have the full iPad experience.

00:08:22.170 --> 00:08:32.630
Okay, now to summarize what we just saw,
you should always use the latest Base SDK,

00:08:32.630 --> 00:08:37.910
you should set the Deployment Target to the earliest OS
version that you want to support and you should test on all

00:08:37.910 --> 00:08:40.350
of those versions that you are supporting.

00:08:40.350 --> 00:08:46.500
You should use the Standard Option for Architectures and
you should choose whether to bring your app to the iPhone

00:08:46.500 --> 00:08:51.200
and iPad either with Universal apps, a
Universal app or Multiple apps and you can do

00:08:51.200 --> 00:08:53.760
that with the Targeted Device Family setting.

00:08:53.760 --> 00:09:00.510
Now I would like to hand it over to Clark Cox to
talk about targeting multiple iPhone OS versions.

00:09:00.510 --> 00:09:05.180
[ Applause ]

00:09:05.180 --> 00:09:06.440
>> Clark Cox: Thank you Jacob.

00:09:06.440 --> 00:09:10.840
Now Jacob's already shown you how to
structure a project to take advantage

00:09:10.840 --> 00:09:14.520
of the ability to run on earlier device versions.

00:09:14.520 --> 00:09:19.170
Well, there's one thing left, your code.

00:09:19.170 --> 00:09:25.560
Every last major update we've provided has added
new functionality and new APIs, new classes,

00:09:25.560 --> 00:09:29.970
functions, symbols, to take advantage of that.

00:09:29.970 --> 00:09:34.420
Say for instance I wanted to use a
class that was newly introduced in 4.0.

00:09:34.420 --> 00:09:37.790
If I were only writing for 4.0 this is what I would do.

00:09:37.790 --> 00:09:40.980
I would just use the class directly as you would any other.

00:09:40.980 --> 00:09:46.600
However, this class doesn't exist before
4.0, so I need to test that first.

00:09:46.600 --> 00:09:53.050
I do that by calling NSClassFromString passing in the
class name, this will either return the class object

00:09:53.050 --> 00:09:56.170
that exists or it will return nil if it doesn't.

00:09:56.170 --> 00:10:01.010
If it's not nil, I can go ahead and use that variable
as I would, I would've used the class to begin with.

00:10:01.010 --> 00:10:04.910
Here, allocating and initializing an instance.

00:10:06.170 --> 00:10:12.150
Functionality is also added by, by adding
new methods to already existing classes.

00:10:12.150 --> 00:10:16.310
For instance, if you want to support
multitasking it's good, it's a good idea to test

00:10:16.310 --> 00:10:18.860
if the device you're on actually supports it.

00:10:18.860 --> 00:10:24.630
However, prior to 4.0, this method didn't exist.

00:10:24.630 --> 00:10:26.450
That's easy enough to remedy.

00:10:26.450 --> 00:10:32.210
We can test whether or not a particular object implements
a method by using the responds to selector method,

00:10:32.210 --> 00:10:34.630
passing in the selector of the method we want to call.

00:10:34.630 --> 00:10:37.900
In this case, is multitasking supported?

00:10:37.900 --> 00:10:43.830
If that returns yes, we can go
ahead and call it as we were before.

00:10:43.830 --> 00:10:48.500
Slightly less often, but it still happens,
functionality is added by adding a new function.

00:10:48.500 --> 00:10:55.940
In this case, this is a function that was added in
OS 3.2 for writing graphics directly to a PDF file.

00:10:55.940 --> 00:11:02.150
Now again, if I want to run on something prior
to 3.2, this function won't exist at run time.

00:11:02.150 --> 00:11:07.420
To get around that, I can just test that
the function's address is not equal to NULL.

00:11:07.420 --> 00:11:12.430
If it's not NULL, the function exists and I can call it.

00:11:12.430 --> 00:11:18.000
Similarly, there are also constant objects
such as string constants that are often used

00:11:18.000 --> 00:11:23.310
as notification names, keys in
the dictionaries and other uses.

00:11:23.310 --> 00:11:29.300
Again, just like with functions, I can test
that the address of this symbol is not null,

00:11:29.300 --> 00:11:32.440
if it's not null, I can use it just as before.

00:11:32.440 --> 00:11:40.320
It's very important, even though the simulator on the
device have gotten much closer in the, in these respects,

00:11:40.320 --> 00:11:42.830
to always test your code on an actual device.

00:11:42.830 --> 00:11:48.770
Now to do that we'll have to talk about device provisioning.

00:11:54.060 --> 00:12:00.090
There were new features added in in
4.0 for Automatic Device Provisioning.

00:12:00.090 --> 00:12:06.980
I'm going to tell you about how, how you can use that,
when it's appropriate to use that, when you can't use that.

00:12:06.980 --> 00:12:10.320
These include situations such as
Custom Provisioning Profiles

00:12:10.320 --> 00:12:14.510
that require custom app IDs and distribution profiles.

00:12:14.510 --> 00:12:20.370
I'll also talk to you about the Developer
Profile which was introduced in 3.2.

00:12:20.370 --> 00:12:27.460
The Automatic Provisioning feature added in 4.0, quite
simply, when you add a new device or you tell Xcode

00:12:27.460 --> 00:12:32.770
to synchronize with the portal, it will check
if you, if you have a Development Certificate,

00:12:32.770 --> 00:12:35.620
if you don't, it will submit the CSR for you.

00:12:35.620 --> 00:12:41.520
You don't have to go to Keychain Access, you don't have
to go to the portal, it does it all from within Xcode.

00:12:41.520 --> 00:12:48.950
Additionally, if you are an agent or an admin or a
single person on an individual team, it will go ahead

00:12:48.950 --> 00:12:51.090
and approve that CSR for you immediately.

00:12:51.090 --> 00:12:54.340
So, the certificate is ready for downloading.

00:12:54.340 --> 00:12:59.790
Additionally, when you add a device, we will
create what we call a Team Provisioning Profile.

00:12:59.790 --> 00:13:05.800
This is a profile that includes all of the devices on
your team, all of the signing certificates on your team

00:13:05.800 --> 00:13:09.760
and has a wild card app ID, so it
can be used by anyone on your team,

00:13:09.760 --> 00:13:14.450
for any of the devices with any bundle identifier.

00:13:14.450 --> 00:13:19.610
Finally, we download all of the provision
profiles for which you have a certificate,

00:13:19.610 --> 00:13:22.900
including the uni, the team provisioning profile.

00:13:22.900 --> 00:13:32.210
This automatic provision this automatic provisioning,
despite the fact that Xcode will download all

00:13:32.210 --> 00:13:38.540
of these profiles, cannot be used to create custom profiles,
for this you'll still need to go to the Program Portal.

00:13:38.540 --> 00:13:44.210
These include situations such as in app purchase, post
notifications, Game Center and keychain data sharing.

00:13:44.210 --> 00:13:49.380
All things where you need a specific, explicit
app ID, however, after they are created,

00:13:49.380 --> 00:13:51.910
they will still be downloaded automatically by Xcode.

00:13:51.910 --> 00:13:59.050
In 3.2, we introduced a new feature
we're calling the Developer Profile.

00:13:59.050 --> 00:14:03.100
This is a single file that includes
all of your certificates,

00:14:03.100 --> 00:14:07.890
all of your provision profiles,
packaged up by Xcode in a single file.

00:14:07.890 --> 00:14:13.960
You can then, after exporting this from one
working machine, you can then take it and import it

00:14:13.960 --> 00:14:17.200
on another machine to get set up immediately.

00:14:17.200 --> 00:14:20.680
This will copy all of your certificates,
including the private keys,

00:14:20.680 --> 00:14:23.050
all of your profiles and get you up and running.

00:14:23.050 --> 00:14:28.510
Now I'm going to show you a little of what's
involved in the Automatic Profile feature.

00:14:28.510 --> 00:14:37.070
[ Background noise ]

00:14:37.070 --> 00:14:43.680
Okay, I'm going to start by going to the Organizer, you see
I've got a device here, it's got no Provisioning profiles,

00:14:43.680 --> 00:14:49.650
got no profiles on my Mac and I have no certificates.

00:14:49.650 --> 00:14:57.780
I'm going to start by right clicking on this device
or Ctrl clicking on this device and I'm going

00:14:57.780 --> 00:14:59.590
to add the device to my Provisioning Portal.

00:14:59.590 --> 00:15:01.510
It's going to ask me for login

00:15:01.510 --> 00:15:08.480
[ logging in ]

00:15:08.480 --> 00:15:09.520
Okay, it's fetching information.

00:15:09.520 --> 00:15:12.580
It's found that I don't have a Signing Certificate yet.

00:15:12.580 --> 00:15:16.410
So I'm going to tell it Yes, submit the request.

00:15:16.410 --> 00:15:23.370
Since this is an individual team and I'm automatically an
admin or agent on it, it approved the request immediately

00:15:23.370 --> 00:15:30.630
and downloaded the certificates to my keychain as well
as downloading and installing the Team Profile as well

00:15:30.630 --> 00:15:34.490
as other profiles that had already been created.

00:15:35.980 --> 00:15:37.360
There's nothing else to do.

00:15:37.360 --> 00:15:40.760
That sets you up for building and running on a device.

00:15:40.760 --> 00:15:47.080
[ Applause ]

00:15:47.080 --> 00:15:53.560
And with that, I'll hand it off to Chris Skogen
to talk to you about Application Life Cycle.

00:15:57.330 --> 00:15:58.960
>> Chris Skogen: Thanks Clark.

00:16:01.370 --> 00:16:07.060
I'm going to talk to you guys about the last
piece of development for the iPhone and iPad.

00:16:07.060 --> 00:16:12.510
Typically in the past Xcode has kind of left
you out to dry after you've built your product.

00:16:12.510 --> 00:16:19.390
Once you've tested it, built it, debug it, you're left
to handle what to do with the product that you built.

00:16:19.390 --> 00:16:20.560
How do I submit it to the store?

00:16:20.560 --> 00:16:22.280
Well you would go to the Portal and submit it.

00:16:22.280 --> 00:16:23.650
How do I Beta test with it?

00:16:23.650 --> 00:16:29.380
Well you would have to maintain a directory of all the
different builds that you have and you'd have to make sure

00:16:29.380 --> 00:16:32.140
that you knew which ones were going out for Beta testing.

00:16:32.140 --> 00:16:36.560
Well, we're going to talk about some of the
new things that Xcode and the SDK can do

00:16:36.560 --> 00:16:40.700
to helps you manage building and distributing your product.

00:16:40.700 --> 00:16:45.080
The first one of these features is Build Time Validation.

00:16:45.080 --> 00:16:52.590
We've built in Xcode the capability to do offline validation
of your app before you even submit it to the store.

00:16:52.590 --> 00:16:58.540
You can actually do this as a Build setting
so you go into the project, click a check box,

00:16:58.540 --> 00:17:04.930
turn it on as a Build setting and every time you build, your
app will be checked for things that can be checked offline.

00:17:04.930 --> 00:17:10.470
This includes icons and proper Plists and things like that.

00:17:10.470 --> 00:17:14.820
The second feature we're going to
discuss will be Build and Archive.

00:17:14.820 --> 00:17:20.240
Build and Archive is a facility to save all of
your projects off to a little archive format

00:17:20.240 --> 00:17:26.430
where you can have the application that you've built and
the DSIM that was created when the application was built.

00:17:26.430 --> 00:17:28.700
It will maintain that going forward in time.

00:17:28.700 --> 00:17:35.680
Whenever you hit Build and Archive it will add another
archived application to that list and you can continue

00:17:35.680 --> 00:17:39.910
to distribute those and you have a history going back.

00:17:39.910 --> 00:17:43.460
The third thing that we're going to
discuss will be Online Validation.

00:17:43.460 --> 00:17:48.580
Instead of just submitting to the store to see what
will happen with your application on the store,

00:17:48.580 --> 00:17:52.980
you can actually submit for Validation from Xcode.

00:17:52.980 --> 00:17:56.770
Xcode will take your app, sign it, send it to the store.

00:17:56.770 --> 00:18:03.130
The store will do all of the automated validation that
the store will do, but your app will not be submitted.

00:18:03.130 --> 00:18:10.040
That way you can get regular feedback on you know, the
likelihood of success for your app by getting validation.

00:18:10.040 --> 00:18:14.940
Last, the fourth thing we're going to
talk about is submitting to the store.

00:18:14.940 --> 00:18:20.620
Xcode can now submit directly to the store, so
you don't have to do that through iTunes Connect.

00:18:20.620 --> 00:18:27.450
And we're going to discuss using Crash Logs after
you've distributed your app to your customers.

00:18:27.450 --> 00:18:30.130
Let's start with Build Time Validation.

00:18:30.130 --> 00:18:32.170
Like I said earlier, it is a Build setting.

00:18:32.170 --> 00:18:35.890
You can see it here, Validate Build Product.

00:18:35.890 --> 00:18:44.020
You turn it on and every time you build for a
device in Xcode, your app will be validated offline.

00:18:44.020 --> 00:18:49.010
It's not all of the tests that the store does but
it's everything that can be done on your machine.

00:18:49.010 --> 00:18:53.870
We recommend that you do this often,
early, as much as you can.

00:18:53.870 --> 00:19:04.710
Turn on the Build setting every time you build,
catch errors before you try to submit to the store.

00:19:04.710 --> 00:19:09.050
Build Time Validation will check icons,
it will check your plist structure

00:19:09.050 --> 00:19:16.840
and it will also check bundle ID amongst other things.

00:19:16.840 --> 00:19:22.170
Archived applications is a great feature
that we're pretty happy to have done.

00:19:22.170 --> 00:19:26.570
It will actually, like I said earlier,
will save all of the builds that you make,

00:19:26.570 --> 00:19:31.200
that you might want to distribute
either to Beta test or to the store.

00:19:31.200 --> 00:19:39.160
So, if you have a process of doing builds for Beta
testing or builds for your, your employees to try out,

00:19:39.160 --> 00:19:43.180
this is a great way to save them and
you can have an archive going back.

00:19:43.180 --> 00:19:48.560
This actually beats, beats just having
the SCM version or just the source code,

00:19:48.560 --> 00:19:51.080
because again, built products are always different.

00:19:51.080 --> 00:19:55.320
If you build the product, you get the
DSIM with it, you archive it, it's saved.

00:19:55.320 --> 00:19:58.320
You can always go back to that
exact build and that exact DSIM

00:19:58.320 --> 00:20:01.930
and that will be very important
later when we get to Crash Logs.

00:20:01.930 --> 00:20:05.720
It's a simple menu item.

00:20:05.720 --> 00:20:09.570
It's next to Build, it's Build and Archive.

00:20:09.570 --> 00:20:17.490
It preserves the out build exactly like it was, puts it in
a library so you can find it and you can keep it forever.

00:20:20.790 --> 00:20:25.150
Online Validation, the third piece of this puzzle.

00:20:25.150 --> 00:20:31.150
Online Validation is similar to submitting to the
store, it just does not actually submit to the store.

00:20:31.150 --> 00:20:37.040
When you choose Online Validation, you will need your
application to be already registered with iTunes Connect,

00:20:37.040 --> 00:20:40.380
the distribution profile will be
required, you'll have to choose that

00:20:40.380 --> 00:20:48.300
and it will run all the automated
app store review validation tests.

00:20:48.300 --> 00:20:50.970
Online Validation can detect some other errors.

00:20:50.970 --> 00:20:57.790
The Bundle version needs to be increased,
missing icon sizes, code signing and entitlements

00:20:57.790 --> 00:21:00.860
and we will suggest those fixes
after the process is complete.

00:21:00.860 --> 00:21:08.170
So when it comes back and says your code signing is
wrong or you're missing an icon, it will tell you,

00:21:08.170 --> 00:21:12.900
point you in the direction of how to fix it.

00:21:12.900 --> 00:21:17.150
Once you've done all that and you're getting
ready to actually upload it to the store,

00:21:17.150 --> 00:21:22.450
that submission in Xcode is almost exactly the
same as actually submitting for online validation.

00:21:22.450 --> 00:21:27.940
You just choose a bun, an archived application
from Xcode and you press Submit To Store.

00:21:27.940 --> 00:21:32.770
All of your marketing materials will still
have to be submitted via iTunes Connect

00:21:32.770 --> 00:21:38.790
but at least Xcode can handle the actual
application and everything that's needed for that.

00:21:38.790 --> 00:21:42.870
So now you've got your application
in the store, people are using it,

00:21:42.870 --> 00:21:46.310
you're starting to get reports that you have crashes.

00:21:46.310 --> 00:21:52.180
We actually are gathering crash reports from your
customer if they've opted in, in iTunes to have that done.

00:21:52.180 --> 00:21:57.110
Those crash reports will go up to the store and
they'll be available on your iTune Connect account

00:21:57.110 --> 00:22:00.620
so you can go get customers crash reports.

00:22:00.620 --> 00:22:04.930
It's not all of them but it is kind of an
aggregation of everything that will come in.

00:22:04.930 --> 00:22:08.260
You can also get crash reports directly from your users.

00:22:08.260 --> 00:22:12.230
The crash reports are captured by
iTunes and put on their local drive.

00:22:12.230 --> 00:22:19.390
Many of you probably have seen them, the user can
get those and mail them to you and you can use them.

00:22:19.390 --> 00:22:26.550
Now if you did build and archive and have the built
application with the DSIMs and you have a crash report

00:22:26.550 --> 00:22:33.330
in Xcode, you can symbolicate your, that crash
to the built version that the customer had.

00:22:33.330 --> 00:22:39.930
So ultimately the crash will come up and you can
see exactly in your source where it went down.

00:22:39.930 --> 00:22:42.510
So let's take a look at some of
these things and see how they look.

00:22:42.510 --> 00:22:50.100
[ Background noise ]

00:22:50.100 --> 00:22:54.400
I'm going to start up Xcode here.

00:22:54.400 --> 00:22:57.990
I've got my Picture Viewer application
that I've been working on.

00:23:01.350 --> 00:23:05.210
And we're going to be actually building it for a device.

00:23:05.210 --> 00:23:09.480
Now, first thing I want to do is I want to
do the Build Time Validation on this project.

00:23:09.480 --> 00:23:17.690
So, let's go into the Project Settings,
I'm going to type Validate,

00:23:17.690 --> 00:23:22.060
filter it down so I don't have to
look for it, Validate Built Product.

00:23:22.060 --> 00:23:31.330
Great. Save that, I'm going to clean
this project and go ahead and build.

00:23:31.330 --> 00:23:36.660
We'll see it going through its Build process and when it's
done, you'll see a couple of quick signs, like code signing

00:23:36.660 --> 00:23:38.900
and Validate Built Product there at the end.

00:23:38.900 --> 00:23:41.230
Now what I see is I see a warning.

00:23:41.230 --> 00:23:46.580
icon PNG, icon dimensions 57 x 57
don't meet the size requirements.

00:23:46.580 --> 00:23:49.840
Well, that's an easy fix, I still have the icon here.

00:23:49.840 --> 00:23:57.510
Let's check the plist, no entry for that icon on the
plist, well, alright, let's go ahead and fix that.

00:23:57.510 --> 00:24:05.430
[ Background noise ]

00:24:05.430 --> 00:24:10.670
Done. We'll save, now we'll go ahead and build.

00:24:10.670 --> 00:24:12.850
Complete, the warning's gone.

00:24:12.850 --> 00:24:16.130
That will find other things, but
again that's the Offline Validation.

00:24:16.130 --> 00:24:21.500
Does not contact the store and we
want you to do that early and often.

00:24:21.500 --> 00:24:26.170
So now we've gotten that far, so let's go
ahead and get ready for a Beta test run.

00:24:26.170 --> 00:24:29.040
I'm going to go ahead and hit Build and Archive.

00:24:29.040 --> 00:24:36.520
And it already built so at this point it takes the built
product in the DSIM and it creates an archive and you'll see

00:24:36.520 --> 00:24:42.640
in the organizer, there's a source item for Archived
Applications and I will see My Application Photo view.

00:24:42.640 --> 00:24:47.180
I can expand that and I can see the one I did right now.

00:24:47.180 --> 00:24:50.480
Let's go take a look at what this thing
actually looks like while we're here.

00:24:50.480 --> 00:24:59.010
I can reveal the archived application in
Finder and you'll see what is being done.

00:24:59.010 --> 00:25:05.280
Archived applications, we've got a little unique
identifier, followed by the Built application,

00:25:05.280 --> 00:25:11.660
the DSIM for that application and this plist is
just information for Xcode to identify the archives

00:25:11.660 --> 00:25:13.220
and display them for you in the organizer.

00:25:13.220 --> 00:25:16.280
So now we have our built product.

00:25:16.280 --> 00:25:20.830
I want to send that out to Beta testers, great.

00:25:20.830 --> 00:25:23.760
So I choose the Built Product, I go down to the bottom here,

00:25:23.760 --> 00:25:26.780
we have three buttons for the things
we've been talking about.

00:25:26.780 --> 00:25:28.890
One of them is Share Application.

00:25:28.890 --> 00:25:36.890
I'll push Share Application and at that point I'm prompted
to choose a Distribution Certificate signing identity.

00:25:36.890 --> 00:25:39.950
Like we said, I'm going to do this for Beta testers.

00:25:39.950 --> 00:25:43.580
So I'm going to choose my Ad Hoc Distribution Certificate.

00:25:46.230 --> 00:25:50.310
Once I've got that I can go ahead an email the application.

00:25:50.310 --> 00:25:56.670
Now Xcode will take my archived application and re-sign
it for the distribution certificate I just chose

00:25:56.670 --> 00:26:01.120
and in this case I hit Share Via Email
so it's going to put it in an email.

00:26:01.120 --> 00:26:05.960
Now, my Beta testers are also going to need the
provisioning profile for that so I'm just going to go ahead

00:26:05.960 --> 00:26:10.100
and drag that in there too and
sign this out to Beta testers.

00:26:10.100 --> 00:26:14.700
Now when your Beta tester gets that,
they install the Provisioning Profile

00:26:14.700 --> 00:26:19.410
and the app and they are up and running.

00:26:19.410 --> 00:26:24.510
So now we've sent that out to our Beta
testers and we got some feedback, oops,

00:26:24.510 --> 00:26:27.280
we got some feedback that there was some bugs in it.

00:26:27.280 --> 00:26:33.410
And let's imagine for the moment that in the process
of fixing the bugs, I also broke this icon again.

00:26:33.410 --> 00:26:39.060
SCM error, I screwed up a merge, I
lost that change, whatever happened.

00:26:39.060 --> 00:26:44.800
So I fixed my other bug in Xcode
that the Beta testers had found.

00:26:44.800 --> 00:26:55.060
And let's say I just went ahead and did
Build An Archive and I ignored this warning.

00:26:55.060 --> 00:26:59.400
I do have another archive here because it built
successfully, it was just a validation warning.

00:26:59.400 --> 00:27:08.760
4345 that's the one I just did, okay, so now I'm gong to
submit this application for Online Validation at the store.

00:27:08.760 --> 00:27:14.150
We're getting closer, we're done with our Beta test, the
bugs have been fixed, now let's see what the store says.

00:27:14.150 --> 00:27:26.520
So I'll put in my password, user name, again,
it's similar to what we saw for exporting

00:27:26.520 --> 00:27:29.060
or sharing an application with Beta testers.

00:27:29.060 --> 00:27:34.310
I'm prompted for a certificate to use, now when I'm
doing the store, either submitting or validating,

00:27:34.310 --> 00:27:39.530
I'm going to need to choose my iPhone distribution profile.

00:27:39.530 --> 00:27:42.320
And this application is the application that's on the store.

00:27:42.320 --> 00:27:47.730
The one that you registered with iTunes Connect, so
I'm going to tell it that I'm submitting an application

00:27:47.730 --> 00:27:53.250
for validation that is Picture Viewer and I'll validate it.

00:27:53.250 --> 00:27:57.310
And it's done and it comes back and Xcode tells me

00:27:57.310 --> 00:28:01.130
that Photo View has failed the
validation because of the following issue.

00:28:01.130 --> 00:28:03.070
You're missing the icon again.

00:28:03.070 --> 00:28:07.210
Okay, well that's an easy fix, we know how
to fix it, we'll go back through our process,

00:28:07.210 --> 00:28:12.010
add it to our info Plist and get it done.

00:28:12.010 --> 00:28:14.200
So let's do this one more time.

00:28:14.200 --> 00:28:21.660
Now we're going to take a look at another new feature
in sharing which is Enterprise App Deployment.

00:28:21.660 --> 00:28:23.510
Let me add this back in.

00:28:23.510 --> 00:28:31.130
[ Background noise ]

00:28:31.130 --> 00:28:36.080
Alright. So we've built our app successfully,
let's build an archive once again.

00:28:36.080 --> 00:28:43.160
So now you can see the value in this organizer as we're
going through builds that we're going to do things with.

00:28:43.160 --> 00:28:49.700
I'm actually saving them out and I can keep them for
a long time and go back and see which build I sent

00:28:49.700 --> 00:28:53.070
to the store, which build I sent out for Beta test.

00:28:53.070 --> 00:28:58.930
So let's choose the latest one and I'm going
to share the application and I'm going to do,

00:28:58.930 --> 00:29:04.790
I'm going to do my AdHoc distribution and I'm
going to distribute it for the Enterprise.

00:29:04.790 --> 00:29:09.930
Now, what it's going to ask me for is
a bunch of information that's needed

00:29:09.930 --> 00:29:12.440
for the manifest file to put on the web server.

00:29:12.440 --> 00:29:22.510
So this is the URL where it's going to, where's
it's going to be downloaded from and a title

00:29:22.510 --> 00:29:31.130
[ Background noise ]

00:29:31.130 --> 00:29:32.930
It's an awesome app.

00:29:32.930 --> 00:29:39.580
Then also the URL to the large image for
the app and a URL for the small image.

00:29:39.580 --> 00:29:45.400
And it's going to ask me where to put this
and I'm going to say put it on my desktop.

00:29:45.400 --> 00:29:54.110
Now this is everything you need
for Enterprise App Deployment.

00:29:54.110 --> 00:30:00.040
At this point, it builds it, it takes your built
application, again, signs it, puts it in a IPA

00:30:00.040 --> 00:30:04.730
and builds the Plist or the manifest file
that's used for Enterprise App Deployment.

00:30:04.730 --> 00:30:11.190
We can get rid of that.

00:30:11.190 --> 00:30:14.790
So that's kind of it for our quick tour of the features.

00:30:16.730 --> 00:30:22.970
I hope you guys all appreciate and see the value in some of
the Build and Archive features that we've put into the end

00:30:22.970 --> 00:30:28.150
of Xcode and we hope it helps you guys manage
your builds as you prepare them for the store

00:30:28.150 --> 00:30:35.580
and help you do good Beta testing and
in the end, get a fine selling product.

00:30:35.580 --> 00:30:37.900
So that's it for me, I'm going to give it back to Mark.

00:30:37.900 --> 00:30:38.970
Thanks a lot.

00:30:38.970 --> 00:30:44.540
[ Applause ]

00:30:44.540 --> 00:30:45.540
>> Marc Verstaen: Thank you Chris.

00:30:45.540 --> 00:30:54.190
So, I hope it's much clearer now and you are all ready
to ship and you know how to take advantage of Xcode

00:30:54.190 --> 00:30:59.040
to structure your project, to test
your app and to manage your life cycle.

00:30:59.040 --> 00:31:05.050
We do welcome your feedback so we intend
to have a Q & A session right now.

00:31:05.050 --> 00:31:09.000
Before we go to that I want to provide
you with a little bit more information,

00:31:09.000 --> 00:31:12.820
if you have any questions, contact
Michael, who is right there.

00:31:12.820 --> 00:31:18.650
You can go to the iPhone Dev Center, we have Developer
Forum that are very active and we do monitor all of them.

00:31:18.650 --> 00:31:19.790
Please go there.

00:31:19.790 --> 00:31:26.180
Apple developer forum, also of course,
we have a lot of really neat sessions.

00:31:26.180 --> 00:31:29.540
One is already done of course,
it's the part 1 of this thing.

00:31:29.540 --> 00:31:36.950
You can also attend sometime this afternoon,
How to Automate Your User Interface.

00:31:36.950 --> 00:31:38.660
I do encourage you to look into that.

00:31:38.660 --> 00:31:44.010
It's very important, it's very interesting, it's a
great feature to do automatic testing of your apps.

00:31:44.010 --> 00:31:50.810
You can also learn how to better use Interface
builder, great tool and of course the Introduction

00:31:50.810 --> 00:31:54.350
to Xcode 4 before you go to Acquisition With iTunes Connect.

