WEBVTT

00:00:06.060 --> 00:00:06.940
>> Good morning.

00:00:06.940 --> 00:00:08.460
My name is Adam Roben.

00:00:08.460 --> 00:00:12.990
I'm an engineer on the Safari and WebKit team and
I've been working on extensions in Safari for a while

00:00:12.990 --> 00:00:15.980
and I'm really excited to talk to you about them.

00:00:15.980 --> 00:00:19.500
So if you were at the Safari Internet and
Web State of the Union on Monday you heard

00:00:19.500 --> 00:00:24.270
about how Safari 5 includes support for
building extensions for new developers;

00:00:24.270 --> 00:00:29.480
and if you were in the last session just before this one you
heard a lot about what extensions were and what they can do

00:00:29.480 --> 00:00:31.420
and how you can get started building them.

00:00:31.420 --> 00:00:33.970
So let's start with a brief overview
of what we saw in the last session

00:00:33.970 --> 00:00:37.950
and then we'll move into the topics for this one.

00:00:37.950 --> 00:00:42.500
So over the last hour you heard about
how Safari is made up of multiple windows

00:00:42.500 --> 00:00:46.150
and each window can have multiple tabs
in it and each tab has a web page.

00:00:46.150 --> 00:00:52.760
And Safari's user interface also has bars and toolbar items
like the bookmarks bar and the back and forward buttons.

00:00:52.760 --> 00:00:55.820
So extensions can add into this experience in Safari.

00:00:55.820 --> 00:01:02.740
An extension can include in it other toolbar items that
can be added to Safari as well as context menu items

00:01:02.740 --> 00:01:09.130
that Safari will show, and one or more bars that
will be included in Safari's user interface.

00:01:09.130 --> 00:01:14.240
Also if you want to modify web pages with your extension
your extension can include content style sheets

00:01:14.240 --> 00:01:18.840
and content scripts that will be run in
the web pages that the user browses to.

00:01:18.840 --> 00:01:24.030
And finally your extension can include a global
page that's kind of the control unit that you use

00:01:24.030 --> 00:01:26.260
to tie all these pieces of your extension together.

00:01:26.260 --> 00:01:32.980
Now in the last session Tim also talked about how extensions
and Safari are both split into an application layer

00:01:32.980 --> 00:01:37.730
and a web content layer; and how there's a
separation of communication between these two

00:01:37.730 --> 00:01:40.720
that can be bridged using message passing.

00:01:40.720 --> 00:01:46.620
So Tim gave you an overview of all of these things and he
also went into a lot of detail on the application layer.

00:01:46.620 --> 00:01:52.300
Now we're going to mostly focus on the web content
layer and then how to tie the two together.

00:01:52.300 --> 00:01:58.300
So specifically, we're going to be talking about three
things; how to modify web pages behavior and appearance;

00:01:58.300 --> 00:02:04.100
how to add items to Safari's context menus and
how to publish new versions of your extensions

00:02:04.100 --> 00:02:07.350
so that your users can get the latest versions.

00:02:07.350 --> 00:02:12.390
So first we're going to talk about how to modify
web pages and maybe the best way to start by talking

00:02:12.390 --> 00:02:15.210
about it is with a demo to show you what's possible.

00:02:15.210 --> 00:02:17.410
So here we are at vimeo.com.

00:02:17.410 --> 00:02:23.330
The folks at Vimeo have made a great HTML5 video
player that's all built using standards technology.

00:02:23.330 --> 00:02:28.030
And if you were at the Delivering Audio and Video Using
Web Standards talk yesterday morning you learned a lot

00:02:28.030 --> 00:02:31.150
about how you can do this on a website as well.

00:02:31.150 --> 00:02:35.580
So I've made an extension that modifies
this website to add a new feature to it.

00:02:35.580 --> 00:02:40.870
So I'll install it here; I'll just double-click on the
extension and Safari will ask if I want to install it

00:02:40.870 --> 00:02:45.580
and now if I reload this page you'll see that we're
going to add a new button over here on the side.

00:02:45.580 --> 00:02:47.380
We have a new lights button here.

00:02:47.380 --> 00:02:53.650
And if I click on it, the rest of the page dims out
so that you can really focus on the video itself.

00:02:53.650 --> 00:02:58.100
So this is just one simple example
of what you can do with an extension.

00:02:58.100 --> 00:03:00.340
So let's talk about how this is possible.

00:03:00.340 --> 00:03:03.010
Again, we're going to be focusing on the web content layer.

00:03:03.010 --> 00:03:07.560
That's the layer that can actually interact with
web pages directly and so specifically we're talking

00:03:07.560 --> 00:03:11.560
about content style sheets and content scripts.

00:03:11.560 --> 00:03:16.900
Now as Tim told you in the last session content style
sheets are added to the web pages that the user browses to.

00:03:16.900 --> 00:03:19.450
If you're familiar with Safari's user style sheet preference

00:03:19.450 --> 00:03:23.870
in the Advanced preference pane you already
kind of have an idea of what these can do.

00:03:23.870 --> 00:03:28.900
A style sheet can be applied to a page to modify
the size of the text, the colors on the page

00:03:28.900 --> 00:03:31.810
or the images or to hide certain elements.

00:03:31.810 --> 00:03:38.030
Now the style sheets are called user style sheets and
that has a very specific meaning in the CSS specification.

00:03:38.030 --> 00:03:43.150
But all that you really need to know is if you want to
override rules that are already in the page with rules

00:03:43.150 --> 00:03:46.790
in your style sheet, you just need to
mark them with the !important keyword

00:03:46.790 --> 00:03:50.180
and that will overrule any rules that the page has.

00:03:50.180 --> 00:03:55.280
So there are two important differences
from Safari's user style sheet preference.

00:03:55.280 --> 00:04:00.380
You can have more than one content style sheet
where Safari can only have one user style sheet,

00:04:00.380 --> 00:04:06.550
and you can apply your style sheets to specific pages
while Safari's user style sheet is applied to all pages.

00:04:06.550 --> 00:04:09.450
And we'll be talking more about how to do that in a moment.

00:04:09.450 --> 00:04:12.490
Now content scripts are very similar
to content style sheets.

00:04:12.490 --> 00:04:14.050
They also run in the page.

00:04:14.050 --> 00:04:17.620
Content scripts can run at two specific
points while the page is loading.

00:04:17.620 --> 00:04:19.730
We call them "start" and "end".

00:04:19.730 --> 00:04:24.780
The start time is roughly equivalent to
when the DOMContentLoaded event is fired.

00:04:24.780 --> 00:04:30.390
This is right after the main document of your page
has finished loading and if DOM is available to you.

00:04:30.390 --> 00:04:36.100
But the sub resources of that page have not finished
loading yet so images on the page and sub-frames

00:04:36.100 --> 00:04:38.640
and scripts may not have finished at that point.

00:04:38.640 --> 00:04:43.080
Now the end time is roughly equivalent
to when the load event fires and that is

00:04:43.080 --> 00:04:47.210
after all those sub resources have finished.

00:04:47.210 --> 00:04:53.470
These content scripts have access to special APIs that
are only available to extensions, and the APIs are similar

00:04:53.470 --> 00:04:55.960
to the ones that are available in the application layer.

00:04:55.960 --> 00:05:02.730
But the content layer APIs are a little more limited
and this is to enhance the security of your extension.

00:05:02.730 --> 00:05:08.960
These content scripts are interacting directly with the
page and we want to provide a minimal interface so that

00:05:08.960 --> 00:05:13.720
if your extension is compromised the web
page won't really be able to cause any harm.

00:05:13.720 --> 00:05:18.950
Now just as in the application layer
all of these APIs are available

00:05:18.950 --> 00:05:23.110
through the Safari namespace object
so it's very easy to find them.

00:05:23.110 --> 00:05:29.980
And just as with content style sheets you can have more than
one content script and you can apply them to specific pages.

00:05:29.980 --> 00:05:35.010
So let's talk about how you would modify only
specific web pages instead of all web pages.

00:05:35.010 --> 00:05:40.530
Well they're really two settings that are important here--
one is the website access setting and one is the whitelist

00:05:40.530 --> 00:05:44.970
and blacklist and you can configure
both of these in the Extension Builder.

00:05:44.970 --> 00:05:49.600
Now both of these settings are based around
URLs so it might be a good idea to just talk

00:05:49.600 --> 00:05:53.310
about what a URL is as far as extensions are concerned.

00:05:53.310 --> 00:05:58.130
So here's an example URL; you've
all seen them before but as far

00:05:58.130 --> 00:06:01.950
as extensions care there are really
only three important parts to a URL.

00:06:01.950 --> 00:06:08.750
First on the left before the first colon is the
scheme in this case http; between the double slashes

00:06:08.750 --> 00:06:15.610
and the first slash after that is the host often
also called the domain, so here it's www.apple.com;

00:06:15.610 --> 00:06:25.590
and then from the first slash after the host to the end of
the URL is the path; so here it's /Safari/what-snew.html.

00:06:25.590 --> 00:06:30.350
Now you may know that URLs can also have other parts
such as user names and passwords and ports and queries

00:06:30.350 --> 00:06:37.380
and fragments, but as far as we are concerned in the
extension for setting what pages your extension is going

00:06:37.380 --> 00:06:40.450
to modify these three parts are all you need to worry about.

00:06:40.450 --> 00:06:44.700
So now that we've talked about what a
URL is let's talk about these settings.

00:06:44.700 --> 00:06:51.950
Website access is the top level setting that
affects what web pages your extension can run on.

00:06:51.950 --> 00:06:59.200
So it controls both where you content style sheets and
scripts are injected, and it also controls what websites

00:06:59.200 --> 00:07:02.560
and servers you can send XMLHttpRequests to.

00:07:02.560 --> 00:07:08.530
Tim mentioned in the last session how content scripts
are running in the security context of the webpage itself

00:07:08.530 --> 00:07:12.180
and so are subject to all the same
restrictions of that page which means

00:07:12.180 --> 00:07:16.800
that from a content script you can't
send an XMLHttpRequest to another server.

00:07:16.800 --> 00:07:21.710
But in the application layer we do allow that and
this website access setting is how you specify

00:07:21.710 --> 00:07:24.360
which servers you need to send those requests to.

00:07:24.360 --> 00:07:30.310
Now the website access setting only cares
about the host or the domain part of the URL.

00:07:30.310 --> 00:07:34.630
And we actually allow you to specify
patterns so let's take a look at what some

00:07:34.630 --> 00:07:37.430
of the potential patterns are that you could list.

00:07:37.430 --> 00:07:43.370
So this first one here is just the host or domain
that we had in that last URL www.apple.com;

00:07:43.370 --> 00:07:46.380
and this will match just that single host.

00:07:46.380 --> 00:07:53.120
Another one is apple.com and that will match
just apple.com; it won't match www.apple.com.

00:07:53.120 --> 00:07:59.430
But if you wanted to have your extension to be
able to access both www.apple.com and apple.com

00:07:59.430 --> 00:08:06.290
and maybe also trailers.apple.com and any other
subdomains that exist, you can write *.apple.com

00:08:06.290 --> 00:08:10.220
and this will match all of those hosts so
you don't have to list them separately.

00:08:10.220 --> 00:08:15.490
Now there's also one more part of the website access
setting which is the Include Secure Pages checkbox.

00:08:15.490 --> 00:08:23.310
If you have that checked, then you could access for example
the https version of www.apple.com and the http version.

00:08:23.310 --> 00:08:26.540
If you don't have it checked, you
won't have access to the https version.

00:08:26.540 --> 00:08:30.550
So the whitelist and blacklist is the other
setting that I mentioned and this controls just

00:08:30.550 --> 00:08:33.420
where your content scripts and style sheets are injected.

00:08:33.420 --> 00:08:36.650
And the control is more fine grained
than the website access level.

00:08:36.650 --> 00:08:43.470
You can actually target specific paths on a particular
domain instead of just targeting a whole domain.

00:08:43.470 --> 00:08:49.550
And for that you have to use something that we
call URL patterns so let's take a look at some.

00:08:49.550 --> 00:08:54.000
So here's a very simple URL pattern-- it's
just that same URL that we looked at before,

00:08:54.000 --> 00:08:57.630
and so this will match that particular
page and no other ones.

00:08:57.630 --> 00:09:03.400
But if you want to start matching more than a single
page you can start using stars to act as wild cards.

00:09:03.400 --> 00:09:05.240
So in this case we've replaced the "www."

00:09:05.240 --> 00:09:11.600
with "*." just like we did in the domain
pattern and so this will match this scheme

00:09:11.600 --> 00:09:16.300
and path on any apple.com or apple.com subdomain.

00:09:16.300 --> 00:09:20.280
So here are some examples-- it
will match it on www.apple.com;

00:09:20.280 --> 00:09:24.020
or on just apple.com or on any other subdomain.

00:09:24.020 --> 00:09:28.110
It can even be more than a single level of subdomains.

00:09:28.110 --> 00:09:31.280
So here's another example where we've put the * in the path.

00:09:31.280 --> 00:09:35.710
This will match sites that are only on www.apple.com

00:09:35.710 --> 00:09:39.490
but anything could come before the
"what-s new.html" part of the path.

00:09:39.490 --> 00:09:46.100
So this would match Safari's What's New page or iTunes'
What's New page or again you could even have multiple parts

00:09:46.100 --> 00:09:49.060
of the path in there that the * will stand in for.

00:09:49.060 --> 00:09:56.300
So a very common thing you might want to do is to match
any page on any subdomain of apple.com or any other server.

00:09:56.300 --> 00:09:59.290
And so this is the form that that pattern would take.

00:09:59.290 --> 00:10:05.920
We have *.apple.com as the host which will match
apple.com or any subdomain; and just /* as the path

00:10:05.920 --> 00:10:08.320
which will match any path on any of those hosts.

00:10:08.320 --> 00:10:13.780
And so all of the URL's that we've seen so far would match
this pattern and many others that I haven't gone over.

00:10:13.780 --> 00:10:18.060
Now I should also note that in all of
these examples I've used http as the scheme

00:10:18.060 --> 00:10:22.240
but you could also have https to match the secure versions.

00:10:22.240 --> 00:10:28.150
So let's look at now we could actually put together this
Lights Out Demo now that you've kind of learned the basics.

00:10:28.150 --> 00:10:32.040
So here we are back on Vimeo-- I'll turn
the lights back on and actually I'm going

00:10:32.040 --> 00:10:35.050
to uninstall the extension so that
we can start from scratch.

00:10:35.050 --> 00:10:40.930
So I'll go to Safari's preferences and
uninstall it and now we're back to a clean slate.

00:10:40.930 --> 00:10:45.770
If we reload Vimeo you'll be able to see that our
button is gone because we've uninstalled that extension.

00:10:45.770 --> 00:10:50.570
So before we actually build the extension I think it
might be good to look at the code so we get an idea

00:10:50.570 --> 00:10:52.500
of what this extension is actually doing.

00:10:52.500 --> 00:10:58.650
There are two main parts to it-- there's the button
that we add and then the overlay that dims out the page.

00:10:58.650 --> 00:11:01.280
And so let's take a look at the code for that.

00:11:01.280 --> 00:11:06.160
First we have a content style sheet
and this style is the overlay.

00:11:06.160 --> 00:11:11.520
Now we actually don't need to style the button at all
because Vimeo has set up their style sheets in a way

00:11:11.520 --> 00:11:17.760
that we could just take advantage of their built in
styles since they built their player using HTML and CSS.

00:11:17.760 --> 00:11:20.900
But here we have a rule that is for our overlay div.

00:11:20.900 --> 00:11:25.030
It's a fixed position div that covers
up the whole viewport and it starts

00:11:25.030 --> 00:11:27.420
out as transparent so that then we could fade it in.

00:11:27.420 --> 00:11:31.780
It has a black background color and we've
set a WebKit transition on it to give

00:11:31.780 --> 00:11:35.370
that nice fading effect instead of
having it just pop in immediately.

00:11:35.370 --> 00:11:40.460
Now we also have a z-index property here to put
it in front of all the elements on the page.

00:11:40.460 --> 00:11:45.570
But of course we want the video to be in front of
the overlay and so we also have a rule that we apply

00:11:45.570 --> 00:11:53.640
to the video that increases it's c-index so it isn't
in front of the overlay and doesn't get covered up.

00:11:53.640 --> 00:11:56.970
So here's the content script that
we actually run in the page.

00:11:56.970 --> 00:12:00.740
You'll notice that at the beginning of the
script we start running code immediately.

00:12:00.740 --> 00:12:04.330
We don't add any event listeners of wait
for a load event or anything like that;

00:12:04.330 --> 00:12:08.090
and that's because as I said you can
specify that your content script run

00:12:08.090 --> 00:12:11.200
at either the start or the end part of loading.

00:12:11.200 --> 00:12:16.270
And so this is an end script here and so we're running
when the load event has fired so we don't need to listen

00:12:16.270 --> 00:12:20.710
for the event explicitly-- Safari
will just run us at the right time.

00:12:20.710 --> 00:12:25.800
So as soon as the script is run we call the Add Lights
Button function and you can see that function here.

00:12:25.800 --> 00:12:31.330
It just is using normal down calls to create a
button element, to add an image into that element

00:12:31.330 --> 00:12:37.820
and then to add all of these into this side doc
element that's built into Vimeo's HTML5 player.

00:12:37.820 --> 00:12:42.350
You'll notice here that we're using
the Safari.extension.base URI API

00:12:42.350 --> 00:12:46.870
so that we can reference an image
that's actually inside our extension.

00:12:46.870 --> 00:12:51.270
So once this is in the page we also
set up a click event listener for it

00:12:51.270 --> 00:12:54.200
to call this toggle lights button
whenever the button is clicked.

00:12:54.200 --> 00:12:56.940
And toggle lights you'll see right down here is very simple.

00:12:56.940 --> 00:13:01.280
If the lights are on then we turn the lights
off; and if they are off then we turn them on.

00:13:01.280 --> 00:13:07.380
So the way that we turn the lights on and off, here's the
turn lights off function and we just create that overlay

00:13:07.380 --> 00:13:12.200
if we haven't created it before; we set
its opacity to be our maximum opacity value

00:13:12.200 --> 00:13:15.200
so it will fade it from transparent to opaque.

00:13:15.200 --> 00:13:20.880
And we also apply a class name to the video that's built
into the player so that we can add that c-index property

00:13:20.880 --> 00:13:23.450
to it to pull it in front of the overlay.

00:13:23.450 --> 00:13:27.770
You'll notice that the class attribute that
I've used here and the ID that we're using

00:13:27.770 --> 00:13:32.950
for the overlay itself are all prefixed based on my
extensions bundle identifier and that's a good way

00:13:32.950 --> 00:13:35.860
to isolate your rules from those in the page.

00:13:35.860 --> 00:13:40.090
So finally when we turn the lights off we just update
the image that we're using for the light button

00:13:40.090 --> 00:13:46.010
so I guess those nice rays coming out of the side;
and we set our global lights on variable to false.

00:13:46.010 --> 00:13:52.050
So turning the lights back on is very similar, we find the
overlay, we make it transparent, we switch the button back

00:13:52.050 --> 00:13:57.530
to the old image, and then we wait for the fading
animation to end by using the webkitTransitionEnd event

00:13:57.530 --> 00:14:02.280
and when that happens we remove the overlay from the
page entirely and remove that class name that we added

00:14:02.280 --> 00:14:06.560
to the video to put the page back in the
state that it was before we had done anything.

00:14:06.560 --> 00:14:09.760
And again just to show you that there
isn't any special magic going on here,

00:14:09.760 --> 00:14:12.040
here is that create overlay if needed function.

00:14:12.040 --> 00:14:17.800
It's just using normal DOM calls to create a div and to give
it our overlays ID so that it will get the right styles,

00:14:17.800 --> 00:14:22.460
and adding another click event listener so that the
lights will turn on when you click anywhere on it.

00:14:22.460 --> 00:14:28.060
So now that we've seen these, let's see how to actually put
it together into an extension using the Extension Builder.

00:14:28.060 --> 00:14:30.460
So I'll come up here to the Develop
Menu and go to the Extension Builder

00:14:30.460 --> 00:14:34.530
and I'll click on the + button to make a new extension.

00:14:34.530 --> 00:14:40.230
And we will call it Lights Out
and let's put it on the desktop.

00:14:40.230 --> 00:14:45.380
So here it is as Tim showed you the Extension
Builder fills in some things for you automatically.

00:14:45.380 --> 00:14:49.510
Now the first thing we have to do is set
that website access level that I mentioned.

00:14:49.510 --> 00:14:53.180
So it starts out as none meaning that
you can't access any web pages at all

00:14:53.180 --> 00:14:56.640
but we'll change it to some since we want to access Vimeo.

00:14:56.640 --> 00:15:00.220
So I'll add a new domain pattern and I'll do *.vimeo.com.

00:15:00.220 --> 00:15:06.140
So now we need to add some of these files to our extension.

00:15:06.140 --> 00:15:11.600
So I'll open up the extension folder here that the
Builder created for us and I'll find those files

00:15:11.600 --> 00:15:13.440
that I already prepared and they're right here.

00:15:13.440 --> 00:15:18.860
We just have the style sheet and the script they already
saw and then the two images for the light button.

00:15:18.860 --> 00:15:21.230
So let's add those to our extension.

00:15:21.230 --> 00:15:26.360
And the Builder will automatically detect that these have
been added so we just have to come back to the Builder

00:15:26.360 --> 00:15:34.690
and tell it about our end script which is right here
in the popup menu and the style sheet that we added.

00:15:34.690 --> 00:15:37.610
Now down below here we can specify whitelist and blacklist.

00:15:37.610 --> 00:15:40.720
But Safari actually makes this a little bit easier for you.

00:15:40.720 --> 00:15:46.370
If you want to access every web page on all the
sub-domains of vimeo.com, Safari will actually add

00:15:46.370 --> 00:15:51.600
that whitelist pattern for you-- the one
that I showed before that *.apple.com/*.

00:15:51.600 --> 00:15:55.500
It's done the same thing here for
*.vimeo.com based on the website access level.

00:15:55.500 --> 00:15:58.890
All right so let's install this and see what happens.

00:15:58.890 --> 00:16:05.400
So I'll click Install and we'll reload Vimeo and you can see
that the lights button has been added and if we click it,

00:16:07.570 --> 00:16:10.040
[Laughter] I guess it doesn't have
as much power as we thought.

00:16:10.040 --> 00:16:13.210
It only turned off the lights on the
page but it does seem to be working

00:16:13.210 --> 00:16:17.010
so you can see how the Extension Builder makes
it very easy to put these pieces together

00:16:17.010 --> 00:16:19.310
and get your extension working right away.

00:16:19.310 --> 00:16:24.020
So we've written this extension and it works pretty well
and we sent it out to our users and people are loving it.

00:16:24.020 --> 00:16:28.810
Well one thing that we've heard from some users is they
really don't like that exact shade of gray that we chose

00:16:28.810 --> 00:16:31.590
for that overlay and they'd really like to customize it.

00:16:31.590 --> 00:16:34.750
So an obvious way to do this would be
to add some settings to our extension.

00:16:34.750 --> 00:16:37.950
Tim showed how your extension can
have settings that are right

00:16:37.950 --> 00:16:42.450
in Safari's preferences just alongside all
the other preferences that Safari contains.

00:16:42.450 --> 00:16:45.050
So we'd like to do this for our extension.

00:16:45.050 --> 00:16:49.340
But as Tim also mentioned in the last sessions settings
are something that are up in the application layer

00:16:49.340 --> 00:16:52.580
and of course our content script
is down in the web content layer.

00:16:52.580 --> 00:16:56.810
And so we're going to need some way to get the
information about the settings from the application

00:16:56.810 --> 00:16:59.480
down into the content script and into the page.

00:16:59.480 --> 00:17:03.020
So the way to do this is through messages.

00:17:03.020 --> 00:17:07.100
Messages are implemented as events
in Safari and they're very simple.

00:17:07.100 --> 00:17:12.300
They really just have two parts; there's a name and
there's some optional data that comes along with it.

00:17:12.300 --> 00:17:13.560
So here is some examples.

00:17:13.560 --> 00:17:19.830
We could have a message where the name is "get-setting"
and the name of the data of that message is "opacity"

00:17:19.830 --> 00:17:25.490
to say what setting value we want to retrieve; or we
could have a message where the name is "show-bar".

00:17:25.490 --> 00:17:30.300
You know if you only had one bar in your extension you
might not need to say anything other than show that one bar

00:17:30.300 --> 00:17:33.070
that we have and so here we don't have any data.

00:17:33.070 --> 00:17:37.980
Here's another message called "send-xhr" and you
can see that we're sending an object as the data

00:17:37.980 --> 00:17:43.200
of the message telling it what server and
what method to use for this XMLHttpRequest.

00:17:43.200 --> 00:17:48.240
And again this is useful if you need to be
sending an XMLHtdpRequest to another server.

00:17:48.240 --> 00:17:52.160
The content script can't do that directly
but the application layer can do it for you

00:17:52.160 --> 00:17:54.320
and so this message will let that happen.

00:17:54.320 --> 00:17:58.100
So these messages are sent using two proxy objects.

00:17:58.100 --> 00:18:00.570
There's one to go in each direction
from the web content layer

00:18:00.570 --> 00:18:03.600
up to the application; and from the application back down.

00:18:03.600 --> 00:18:10.750
So going from the content back to the application you
would do it like this with safari.self.tab.dispatchMessage.

00:18:10.750 --> 00:18:15.060
Now this tab object while it looks like the
tabs that you see up in the application layer,

00:18:15.060 --> 00:18:22.590
it's actually just a tab proxy and mostly the only thing
that it can do is send a message up into the application.

00:18:22.590 --> 00:18:27.960
Going in the reverse is very similar; from the
application to content you'll find any tab object

00:18:27.960 --> 00:18:33.460
so here we're getting the active tab in the front
most browser window and you use its page property.

00:18:33.460 --> 00:18:37.170
Now this isn't the actual web page;
it's a page proxy and you can use it

00:18:37.170 --> 00:18:43.460
to send a message using dispatchMessage
again down to the real web page.

00:18:43.460 --> 00:18:47.490
So an illustration of what we're going to do
in our extension to implement these settings,

00:18:47.490 --> 00:18:52.040
when the page loads we need to find out the
current setting value so as soon as the user clicks

00:18:52.040 --> 00:18:55.320
on the light button the lights
will go out to the right level.

00:18:55.320 --> 00:19:00.030
And so to do that when the content script runs
it will send a message up to the application

00:19:00.030 --> 00:19:02.680
and in this case the global page is going to receive it.

00:19:02.680 --> 00:19:06.030
Now you could also send a message and have a bar receive it.

00:19:06.030 --> 00:19:11.810
So once the global page gets that message it's
going to retrieve the opacity value out of settings

00:19:11.810 --> 00:19:16.380
and make a new message and send it back down
to the script where the script will act on it.

00:19:16.380 --> 00:19:18.310
So let's see how to do that.

00:19:18.310 --> 00:19:23.210
So the first thing that we need to do is in that
content script we need to send that message up as soon

00:19:23.210 --> 00:19:26.010
as the page loads to find out the preference value.

00:19:26.010 --> 00:19:28.120
So let's go back to our content script and if you'll scroll

00:19:28.120 --> 00:19:31.270
down a little bit farther you'll see
that I've already written that code.

00:19:31.270 --> 00:19:36.370
So as soon as the script runs we'll send a
message that we're calling get maximum opacity

00:19:36.370 --> 00:19:42.110
and we also add an event listener for the message event
so we can receive messages back from the application.

00:19:42.110 --> 00:19:48.670
When we receive a message event we first check its name,
and if that name is the set maximum opacity message

00:19:48.670 --> 00:19:53.300
that we are expecting back, then we update
our maximum opacity global variable.

00:19:53.300 --> 00:19:56.260
And we also update the overlay in case it's already showing.

00:19:56.260 --> 00:20:00.080
These messages are sent asynchronously
and so it's possible although unlikely

00:20:00.080 --> 00:20:02.730
that the user could have already interacted with the page.

00:20:02.730 --> 00:20:04.620
So an update overlay was needed.

00:20:04.620 --> 00:20:07.640
Here we just have normal DOM calls
to find that overlay element

00:20:07.640 --> 00:20:11.720
and update its opacity value so it's all very simple.

00:20:11.720 --> 00:20:17.410
Now I mention that we are going to be using a global
page to receive these messages so let's look at that.

00:20:17.410 --> 00:20:24.050
This is our global page it's just a normal HTML page and
it adds an event listener for the message event to receive

00:20:24.050 --> 00:20:31.370
that message from the content, and when we get that message
it's that get maximum opacity message that we are expecting,

00:20:31.370 --> 00:20:36.140
then we send a message back down to that
content script and tell it the maximum opacity

00:20:36.140 --> 00:20:38.950
by retrieving out of the settings object.

00:20:38.950 --> 00:20:45.900
Now you'll notice that we're using event.target.page here
to send the message back down into the particular page

00:20:45.900 --> 00:20:52.020
that sent us the message; event.target is the
tab that contains the page that sent the message.

00:20:52.020 --> 00:20:56.950
So there's actually one other time that we would like to
be able to update the opacity of this overlay and that's

00:20:56.950 --> 00:21:01.110
if the user changes their preferences
while the overlay is already visible.

00:21:01.110 --> 00:21:02.890
And so there's actually a way to do that.

00:21:02.890 --> 00:21:06.690
Every time a preference changes we send
a change event to the settings object

00:21:06.690 --> 00:21:09.940
and so the global page listens for that event here.

00:21:09.940 --> 00:21:13.990
And when we get that change event the event
will have a couple of different properties on it

00:21:13.990 --> 00:21:15.690
that help us determine what has happened.

00:21:15.690 --> 00:21:17.850
So the first one is the key property.

00:21:17.850 --> 00:21:23.970
This tells you which setting actually changed so in this
case if it's our maximum opacity setting that we're going

00:21:23.970 --> 00:21:29.540
to loop over all of the windows that are open and all
the tabs in all of those windows and send a message

00:21:29.540 --> 00:21:33.250
down to each one of them telling
them about the new opacity value.

00:21:33.250 --> 00:21:37.170
And we'll just use that same set maximum
opacity message that we used before.

00:21:37.170 --> 00:21:40.760
And the way that we get that new value
is it's right here on the event--

00:21:40.760 --> 00:21:44.490
event.newvalue gives you the new value of the preference.

00:21:44.490 --> 00:21:48.680
So let's see how to put this together into our extension.

00:21:48.680 --> 00:21:54.710
We'll come back to the Extension Builder and really the
first thing that we need to do is to get this global page

00:21:54.710 --> 00:21:57.850
into our extension folder so the
Extension Builder can find it.

00:21:57.850 --> 00:22:05.660
So let's open up our extension and we'll copy
that global page over that I've already written.

00:22:05.660 --> 00:22:09.090
And so now that it's in our folder the
Builder will find it and if we open

00:22:09.090 --> 00:22:12.260
up this menu it says global.html
that's the one that we want.

00:22:12.260 --> 00:22:14.460
And now we also have to add the setting.

00:22:14.460 --> 00:22:19.130
If we were to go into Preferences right now,
you could see that we don't have any UI here

00:22:19.130 --> 00:22:23.440
for setting up what the opacity of that overlay is.

00:22:23.440 --> 00:22:28.160
So I'd like to add a slider so that users
can really tweak it to their exact liking.

00:22:28.160 --> 00:22:32.180
So we'll come down here to the bottom of the
Builder and click on the New Setting item button.

00:22:32.180 --> 00:22:36.270
And now the first thing we have to choose is the type;
you can see there are a lot of different controls here

00:22:36.270 --> 00:22:41.530
like text fields and checkboxes and popup
buttons but we're going to go with the slider.

00:22:41.530 --> 00:22:47.000
We'll give it a title which is what is shown in the
UI to the user so we'll call it Overlay Opacity.

00:22:47.000 --> 00:22:53.190
The key is the settings key that we use in the API to
retrieve the value so I'll call that Maximum Opacity;

00:22:53.190 --> 00:22:58.200
the default value we'll set to 0.8 which is the
same one that we had in our content script before;

00:22:58.200 --> 00:23:02.930
the minimum and maximum value, we'll have the
slider go from 0 to 1 because those are the values

00:23:02.930 --> 00:23:07.340
that the CSS opacity property accepts;
and then we'll set the set value to .01

00:23:07.340 --> 00:23:10.930
so users can really tweak to exactly the way they want.

00:23:10.930 --> 00:23:16.500
So now if I click reload and we
go back to Safari's preferences

00:23:16.500 --> 00:23:18.800
and click on our extension you can
see that we have a slider already.

00:23:18.800 --> 00:23:22.640
I didn't have to write any code; the
Extension Builder did it all for me.

00:23:22.640 --> 00:23:31.250
And if I reload Vimeo so that our content script will
be updated, if we turn off the lights and then come back

00:23:31.250 --> 00:23:34.110
to Preferences here we can actually slide that slider around

00:23:34.110 --> 00:23:37.760
and see the opacity changing live
because of that change event.

00:23:37.760 --> 00:23:41.530
[ Applause ]

00:23:41.530 --> 00:23:43.760
>> Adam Roben: So let's go over
what we've learned in this section.

00:23:43.760 --> 00:23:48.970
We talked about how to use injected content meaning
style sheets and scripts to modify web pages;

00:23:48.970 --> 00:23:55.870
how you can use URL patterns and domain patterns to specify
what web pages you modify; and how you can use messages

00:23:55.870 --> 00:24:00.000
to tie together the web content layer and
the application layer of your extension.

00:24:00.000 --> 00:24:06.800
So next up is adding context menu items and
again we're just going to start out with a demo.

00:24:06.800 --> 00:24:14.910
So I'm going to uninstall our Lights Out extension here and
install that same Twitter extension that Tim was showing you

00:24:14.910 --> 00:24:18.620
so I'll just double-click on it and choose to install it.

00:24:18.620 --> 00:24:21.820
So again we have that Twitter bar here
that Tim already showed you but I'll hide

00:24:21.820 --> 00:24:24.810
that for now because we don't actually need it.

00:24:24.810 --> 00:24:30.830
So the basic idea of this context menu item is that I
am a new Twitter user and I don't have a lot of content

00:24:30.830 --> 00:24:35.650
on my Twitter page yet and I would like to get some
so this extension has made it really easy for me.

00:24:35.650 --> 00:24:39.910
If I'm browsing around the web and find something
interesting that I really think people should know

00:24:39.910 --> 00:24:45.680
about like WebKit is an open source browser engine;
that sounds pretty important so I'll just right click

00:24:45.680 --> 00:24:49.700
on that text and you can see in the Context
Menu we have this new item that's been added

00:24:49.700 --> 00:24:52.970
by the extension that's called "Tweet This Text".

00:24:52.970 --> 00:24:59.670
And so if I click on that the extension will send that text
off to Twitter using Twitter's API and post it to my page.

00:24:59.670 --> 00:25:06.240
There it is and we even have a link back to the original
page so this makes it really easy to add new tweets.

00:25:06.240 --> 00:25:09.750
So let's talk a little bit about how
you could do this in your extension.

00:25:09.750 --> 00:25:15.120
So in order to add context menus in your extension
first you need to know how they work in Safari.

00:25:15.120 --> 00:25:20.910
So the idea is very simple when the user right clicks
on a web page, WebKit itself makes a context menu;

00:25:20.910 --> 00:25:25.440
but before that context menu is shown to the
user it's sends the context menu up to Safari

00:25:25.440 --> 00:25:27.720
and gives Safari a chance to customize it.

00:25:27.720 --> 00:25:35.100
And Safari in fact does this; it adds Safari-specific
context menu items such as open link in new tab.

00:25:35.100 --> 00:25:40.310
Now extensions do something very similar; in
fact the beginning of the process is identical.

00:25:40.310 --> 00:25:46.420
The user right clicks and WebKit creates a context menu,
it sends it off to Safari and Safari gets to customize it.

00:25:46.420 --> 00:25:51.520
But then before the context menu is shown to the
user, Safari gives the context menu to each extension

00:25:51.520 --> 00:25:54.950
that is installed and the extensions
can add their own items.

00:25:54.950 --> 00:26:00.160
So the context menu items before
we go any further are very simple.

00:26:00.160 --> 00:26:03.660
They're very similar to the toolbar items
that you saw in detail in Tim's talk.

00:26:03.660 --> 00:26:05.010
They are made up of four parts.

00:26:05.010 --> 00:26:10.500
There's an Identifier which is how you refer to the item in
your own code; there's a Title which is shown to the user

00:26:10.500 --> 00:26:16.680
in the context menu; there's a Command string which is just
a string that you use internally to represent the action

00:26:16.680 --> 00:26:20.960
that this context menu item performs;
and then they have a Disabled state.

00:26:20.960 --> 00:26:25.570
Now we never show disabled items to the
user they would just clutter up the menu

00:26:25.570 --> 00:26:29.240
and so if you have a disabled item it's
actually hidden from the menu entirely.

00:26:29.240 --> 00:26:35.160
So the way that you get to add your items
to the context menu before it is shown is

00:26:35.160 --> 00:26:37.120
by listening for the contextmenu event.

00:26:37.120 --> 00:26:39.390
This is sent up in the application layer.

00:26:39.390 --> 00:26:43.470
Specifically it's sent to the tab and so that's
the target of the event and then it bubbles

00:26:43.470 --> 00:26:46.350
up to the window and then to the application object.

00:26:46.350 --> 00:26:52.130
On this event is a context menu property and that
context menu is how you interact with the context menu

00:26:52.130 --> 00:26:54.810
that will be shown and it has a
few methods that you can use.

00:26:54.810 --> 00:27:00.630
There's appendContextMenuItem, insertContextMenuItem,
and there's a contextMenuItems array

00:27:00.630 --> 00:27:04.280
that gives you access to the items that you've added so far.

00:27:04.280 --> 00:27:07.270
Now this array will only include
the items that your extension adds.

00:27:07.270 --> 00:27:13.710
You won't be able to see WebKits' items or Safari's items
or items from other extensions, and this prevents extensions

00:27:13.710 --> 00:27:17.080
from interfering with each other or with
the default behavior of the browser.

00:27:17.080 --> 00:27:21.210
Now you can also specify these items in the Builder.

00:27:21.210 --> 00:27:25.870
If you find that you're adding the same item every time
it might be easier just to specify it once in the Builder

00:27:25.870 --> 00:27:31.340
and Safari will add it to the context menu for you
without you having to listen to the contextmenu event.

00:27:31.340 --> 00:27:35.490
Now the other events that come along with
context menu items are the "validate:"

00:27:35.490 --> 00:27:39.230
and "command:" events that you also use for toolbar items.

00:27:39.230 --> 00:27:43.150
Now the validate event is sent for
each item just before the menu is shown

00:27:43.150 --> 00:27:45.730
and this is your chance to disable or hide those items.

00:27:45.730 --> 00:27:49.810
This is particularly useful when you've
added those items in the Extension Builder.

00:27:49.810 --> 00:27:53.640
Safari will put them in the context menu for
you automatically but maybe you don't want

00:27:53.640 --> 00:27:58.130
to show them right now and so the validate event
is your chance to hide them before they're shown.

00:27:58.130 --> 00:28:03.790
And then the command event is sent when a particular item
is clicked and that will tell you which action to perform.

00:28:03.790 --> 00:28:07.570
So of course with context menu's the
real point is that they're contextual.

00:28:07.570 --> 00:28:13.350
What is in the menu and what happens when you click on it
depends on what the user right clicked in the first place.

00:28:13.350 --> 00:28:17.000
And so you need to find this out to
really provide a good contextual menu.

00:28:17.000 --> 00:28:19.800
Now of course as I said the contextmenu
event and the validate

00:28:19.800 --> 00:28:22.190
and command events are all sent up in the application.

00:28:22.190 --> 00:28:27.320
But the user is right clicking down into the right content
layer and so you need to find out what was clicked on.

00:28:27.320 --> 00:28:31.910
Now you could just do this using messages but
there's actually an easier way and a better way.

00:28:31.910 --> 00:28:38.400
The way to do it is in the content meaning a content script,
you can listen for the contextmenu event in the web page.

00:28:38.400 --> 00:28:41.830
This is something that's part of the
DOM, it's been in WebKit for a long time

00:28:41.830 --> 00:28:46.690
and in the past really the only useful thing you could do
in this case was to prevent a context menu from showing

00:28:46.690 --> 00:28:50.650
at all say if you had some custom
menus to show in your page.

00:28:50.650 --> 00:28:52.610
But with extensions you can do something new.

00:28:52.610 --> 00:28:59.500
We have an API on that tab proxy object,
safari.self.tab.setContextMenuEventUserInfo.

00:28:59.500 --> 00:29:05.520
And this is your way to associate some bit of
information with this particular contextmenu event.

00:29:05.520 --> 00:29:10.880
So after you've called this in the content script, then
up in the application when you receive that context menu

00:29:10.880 --> 00:29:16.570
or validate or command event, this UserInfo will be
available to you as a property on the event itself;

00:29:16.570 --> 00:29:22.630
and so you can use that context to determine whether to hide
or show a particular item or exactly what action to perform.

00:29:22.630 --> 00:29:25.170
So let's look at how we do this or to tweet this text item.

00:29:25.170 --> 00:29:29.950
So I'm going to go back to the Builder and I'm
actually going to add the Twitter extension

00:29:29.950 --> 00:29:34.670
which we've already written so instead of
choosing New Extension I'll choose Add Extension

00:29:34.670 --> 00:29:38.030
and I'll navigate to where we have it saved.

00:29:38.030 --> 00:29:41.620
And so now here it is in the Builder
just like you saw it from Tim.

00:29:41.620 --> 00:29:47.750
Now if we scroll down you'll see that under
Context Menu Items we've added an item here.

00:29:47.750 --> 00:29:53.360
So the name of it is "Tweet This Text" and the
identifier and command are also both "Tweet This Text".

00:29:53.360 --> 00:29:59.180
So Safari will add this item for us so now
let's look at the code that handles the item.

00:29:59.180 --> 00:30:03.300
First we have a contents script that
listens for that contextmenu event

00:30:03.300 --> 00:30:08.660
in that web page again this is the DOM contextmenu event;
not the one that we send up in the application layer.

00:30:08.660 --> 00:30:10.780
When we get that event we call

00:30:10.780 --> 00:30:18.300
that setContextMenuEventUserInfo API we pass the contentmenu
event and then we get the selected text on the page.

00:30:18.300 --> 00:30:23.280
Now if there's no text selected this will just be an
empty string and we'll be using that information shortly.

00:30:23.280 --> 00:30:29.000
So now up in the global page that's where we
listen for the validate and command events.

00:30:29.000 --> 00:30:31.230
You've already seen some of this code in Tim's demo

00:30:31.230 --> 00:30:34.900
so here's our command event listener
and here's our validate event listener.

00:30:34.900 --> 00:30:37.240
So first let's look at validation.

00:30:37.240 --> 00:30:43.870
Here we are in validate command now if the command that
we're validating is "Tweet This Text" command meaning

00:30:43.870 --> 00:30:48.570
that this is for that context menu item,
we choose to disable the item in some cases

00:30:48.570 --> 00:30:51.070
and remember disabling really means that it will be hidden.

00:30:51.070 --> 00:30:57.280
So the case where we disable it is when the user
info which is the selected text in the page is empty.

00:30:57.280 --> 00:31:02.180
When the length is zero we hide the item
because there's nothing to tweet in that case.

00:31:02.180 --> 00:31:06.980
Now when we receive a command event that
code is right up here in Perform Command.

00:31:06.980 --> 00:31:10.310
So we have another command that we use
for a toolbar item but here is the one

00:31:10.310 --> 00:31:13.880
for our context menu item-- again
it's just "Tweet This Text".

00:31:13.880 --> 00:31:20.430
So all that we do is take that same user info which is
the selected text, we surround it in some curly quotes

00:31:20.430 --> 00:31:26.880
and then we append the URL of the front most tab
which is where this context menu is being shown.

00:31:26.880 --> 00:31:29.700
And so that is the Tweet Text and all we do is sent that off

00:31:29.700 --> 00:31:34.260
to Twitter using their normal API
and a cross-domain XMLHttpRequest.

00:31:34.260 --> 00:31:38.330
And because in the Builder we've specified
that we need to be able to access--

00:31:38.330 --> 00:31:44.600
well in this case we've actually changed the access level to
all pages, so that will let us both send the XMLHttpRequest

00:31:44.600 --> 00:31:50.000
to Twitter and it will also let us show
the Context Menu on any page on any server.

00:31:50.000 --> 00:31:54.040
So that's all that it takes to put this
together-- it's very little code and very easy.

00:31:54.040 --> 00:31:59.720
So just a quick recap to add context menus into
Safari the best way to do it is to first listen

00:31:59.720 --> 00:32:04.010
for the contextmenu event in the web page
and that's your chance to provide context

00:32:04.010 --> 00:32:07.490
to your application so that it knows which items to add.

00:32:07.490 --> 00:32:13.410
Then you can listen for the contextmenu event up in the
application layer and that's your chance to add items.

00:32:13.410 --> 00:32:16.390
Now you can also add the items using the Extension Builder.

00:32:16.390 --> 00:32:22.350
Then the validate event is sent before the menu is
shown and that's your chance to disable or hide items;

00:32:22.350 --> 00:32:27.310
and the command event is when you should
perform the selected action that's sent

00:32:27.310 --> 00:32:29.810
when the user clicks on one of your items.

00:32:29.810 --> 00:32:32.830
So that's everything for context menus.

00:32:32.830 --> 00:32:35.490
Now let's talk about publishing updates.

00:32:35.490 --> 00:32:39.690
So say you've written this great extension and a lot
of people are using it and they all really like it

00:32:39.690 --> 00:32:43.020
and now you've made a better version
that you want people to install.

00:32:43.020 --> 00:32:44.690
So what are your options?

00:32:44.690 --> 00:32:50.210
Well you could of course post it on your web page and hope
that people go to your web page frequently enough and decide

00:32:50.210 --> 00:32:58.150
to install it; or if you are a really kind of naggy web
developer you could make a mailing list and send e-mails

00:32:58.150 --> 00:33:02.380
to all of your users and hope that they don't
filed as SPAM and hope people actually read them

00:33:02.380 --> 00:33:06.540
and don't hate you forever because of it;
or there's actually a better way and that's

00:33:06.540 --> 00:33:10.590
to have your updates listed right in Safari's preferences.

00:33:10.590 --> 00:33:15.490
Safari will automatically discover updates for the
extensions that are installed and present them to the user

00:33:15.490 --> 00:33:20.860
in this UI and the user can install them individually
or install them all at once or even check a checkbox

00:33:20.860 --> 00:33:25.440
to install all the updates automatically
as Safari discovers them.

00:33:25.440 --> 00:33:29.450
So this is an opt-in feature that you have
to opt-in to each extension that you write.

00:33:29.450 --> 00:33:34.000
And the way you do it is very simple it's
through a file that we call the update manifest.

00:33:34.000 --> 00:33:39.320
This is just a simple XML file that you host on your
web server and Safari downloads it periodically.

00:33:39.320 --> 00:33:43.280
And what the file contains is a list
of all the extensions that you develop.

00:33:43.280 --> 00:33:47.250
Now for each extension you just need
to list a little bit of information.

00:33:47.250 --> 00:33:51.790
First you need two different identifiers-- one of them
is the extension's bundle identifier that you enter

00:33:51.790 --> 00:33:57.620
into the Extension Builder, and the other is the identifier
that's associated with your developer certificate.

00:33:57.620 --> 00:34:01.790
These two identifiers together
uniquely identify your extension.

00:34:01.790 --> 00:34:03.420
Now next you need two version numbers.

00:34:03.420 --> 00:34:09.210
The first is the internal version number that Safari
uses to decide whether one version is newer than another.

00:34:09.210 --> 00:34:13.850
And the other is the display version that's
actually shown to the user in the UI.

00:34:13.850 --> 00:34:17.010
And then finally all you need to list is the URL

00:34:17.010 --> 00:34:20.290
where Safari can download this
particular version of your extension.

00:34:20.290 --> 00:34:26.340
So if you make this file and put it on your web server
Safari will download it periodically, and any versions

00:34:26.340 --> 00:34:30.890
or extensions that the user has installed that
are newer in the update manifest will be presented

00:34:30.890 --> 00:34:36.610
in Safari's preferences making it very easy
for users to discover and install your updates.

00:34:37.680 --> 00:34:43.640
So you've seen a lot of demos in the last session and
in this one that have shown you little bits of each part

00:34:43.640 --> 00:34:48.860
of the API, the extensions and how
to use them and implement them.

00:34:48.860 --> 00:34:53.640
But also in the State of the Union on Monday you saw
some great demos of some really awesome extensions

00:34:53.640 --> 00:34:55.490
that kind of pull all these topics together.

00:34:55.490 --> 00:34:58.590
And you might be wondering how can I write one of those.

00:34:58.590 --> 00:35:05.390
So to show you that we actually have Cabel Sasser here
from Panic to show you how Code of Notes was constructed.

00:35:05.390 --> 00:35:05.650
[ Applause ]

00:35:05.650 --> 00:35:17.960
>> Cabel Sasser: All right after listening to all these
super smart Safari people I think you guys know probably 90%

00:35:17.960 --> 00:35:20.120
of what you need to do to develop an extension.

00:35:20.120 --> 00:35:24.980
I'm going to talk a little bit about the remaining 10%,
the stuff that we learned through developing the code

00:35:24.980 --> 00:35:29.100
of notes extensions that we didn't expect, some
tips, some tricks, little things like that.

00:35:29.100 --> 00:35:35.320
Code of Notes is a website annotation tool which
provides a new toolbar in Safari and allows the user

00:35:35.320 --> 00:35:38.220
to basically scribble directly on a web page.

00:35:38.220 --> 00:35:42.620
We have a highlighter and we have
sticky notes and things like that.

00:35:42.620 --> 00:35:45.880
So this was kind of an interesting thing to build
and there are a lot of pieces going on here.

00:35:45.880 --> 00:35:52.890
First of all we have the toolbar item that we install;
we also have our custom toolbar which you can see here.

00:35:52.890 --> 00:35:58.330
And one thing that we did with that toolbar that's kind
of cool is that the bulk of that with the exception

00:35:58.330 --> 00:36:06.000
of the glyphs on the buttons it's all CSS style;
so those buttons are all border radius, gradients,

00:36:06.000 --> 00:36:12.370
so they can scale well and they're super flexible so I would
encourage you guys to use CSS styling as much as possible.

00:36:12.370 --> 00:36:13.690
Let's see if I can show you that actually.

00:36:13.690 --> 00:36:16.090
Here's what the bar looks like.

00:36:16.090 --> 00:36:20.010
If I zoom that up you see that
everything sort of scales appropriately;

00:36:20.010 --> 00:36:26.170
so that allowed us to really quickly develop this toolbar
without having to do a lot of graphics work in Photoshop.

00:36:26.170 --> 00:36:32.750
So we've got the bar; we've got a global HTML
page which I know has been already talked about;

00:36:32.750 --> 00:36:36.460
and then we've got some JavaScript
that we're injecting into every page.

00:36:36.460 --> 00:36:43.150
The global HTML page mostly controls
whether or not this bar should be displayed.

00:36:43.150 --> 00:36:49.330
One thing that we learned that was a surprise for us of
course we're injecting our JavaScript into every page

00:36:49.330 --> 00:36:52.610
because we never know when a user
is going to want to start drawing.

00:36:52.610 --> 00:36:58.070
So one thing we learned that a lot of
pages imbed a lot of iirames in their pages

00:36:58.070 --> 00:37:04.270
and your injected JavaScript will also be injected into all
of those iirames so we were seeing a lot of duplicate events

00:37:04.270 --> 00:37:10.070
and surprisingly weird stuff happening until we finally
realized that oh it's that little ad in the corner.

00:37:10.070 --> 00:37:14.190
So beware of that if you're injecting
JavaScript that it will go everywhere.

00:37:14.190 --> 00:37:21.440
And what we did as a suggestion from these guys we're
checking if window top equals window just to make sure

00:37:21.440 --> 00:37:25.830
that we're only injecting into the top most element.

00:37:25.830 --> 00:37:28.550
So how are we doing this drawing?

00:37:28.550 --> 00:37:33.170
Basically, when you activate this
tool, actually open the bar,

00:37:33.170 --> 00:37:38.090
there's a giant canvas element
transparent on top of the entire page.

00:37:38.090 --> 00:37:43.400
And the canvass is-- if you guys have ever
done any work with canvas it's basically--

00:37:43.400 --> 00:37:46.550
gives you drawing context and we're just drawing,

00:37:46.550 --> 00:37:49.420
we're capturing the mouse event and
we're scribbling on that canvas.

00:37:49.420 --> 00:37:55.360
Now one thing that's kind of interesting is
if we've got a canvass over that entire page,

00:37:55.360 --> 00:37:57.440
how are we allowing you to do this text tool?

00:37:57.440 --> 00:38:02.480
The text tool allows you to actually
edit the text on the page directly.

00:38:02.480 --> 00:38:08.330
If the canvas is covering everything you would think
that the pointer wouldn't be able to click through it

00:38:08.330 --> 00:38:11.220
to get those text events and edit the text.

00:38:11.220 --> 00:38:16.970
We're actually setting a CSS style
which is pointer-events: none.

00:38:16.970 --> 00:38:21.190
We set that on the canvas which basically means
that the pointer events have been passed through.

00:38:21.190 --> 00:38:25.840
The canvas no longer gets the pointer events so
that was a cool solution to a problem that kind

00:38:25.840 --> 00:38:28.070
of had us scratching our heads for a little bit.

00:38:28.070 --> 00:38:33.190
Now there's a couple of interesting things-- the sticky
notes that we're doing here are actually dragging

00:38:33.190 --> 00:38:40.720
around using the actual drag and drop events.

00:38:40.720 --> 00:38:46.910
We set the body to the drop zone so of course you
can drag them around, then things get really hairy

00:38:46.910 --> 00:38:55.240
with the notes button we've implemented; because what
happens here is we have our style of our postcard

00:38:55.240 --> 00:38:57.230
and we know what we want our text to look like.

00:38:57.230 --> 00:39:04.200
But the page that we're injecting this into might have
styles that override that; they might have body text set

00:39:04.200 --> 00:39:08.390
to a huge font, or do things that might
mess up the appearance of our postcard.

00:39:08.390 --> 00:39:14.280
So we have a crazy little trick where we walk through
all the style sheets and essentially disable them,

00:39:14.280 --> 00:39:19.340
but while we're walking through them we're also storing
them and making a note of them so that if a user were

00:39:19.340 --> 00:39:22.920
to hit cancel and wants to see
the page as it looked originally,

00:39:22.920 --> 00:39:26.490
we now reset all those styles back to what they were before.

00:39:26.490 --> 00:39:33.000
So an earlier version of this plug-in actually put the
postcard in a new tab and that was certainly a lot easier

00:39:33.000 --> 00:39:35.730
from a developer perspective because
we didn't have to do these tricks.

00:39:35.730 --> 00:39:41.930
But having it be in the window not opening a new tab is
much better; but just something to think about that you're

00:39:41.930 --> 00:39:47.340
in an environment where there are a lot of styles
and things to consider that might surprise you.

00:39:47.340 --> 00:39:50.880
Some people have asked me how we
are doing the screenshot thing--

00:39:50.880 --> 00:39:54.470
how we actually get an image of the tab and shrink it down.

00:39:54.470 --> 00:39:59.780
If you're looking for the documentation and you're
searching for screenshot, you probably won't find it.

00:39:59.780 --> 00:40:07.080
It's actually called visibleContentsAs DataURL and
what that does is take the image contents of the tab

00:40:07.080 --> 00:40:13.420
and basically give you a standard data URL, base64
encoded I believe, of a PNG version of the tab

00:40:13.420 --> 00:40:17.160
so look for that visibleContentsAsDataURL.

00:40:17.160 --> 00:40:25.040
And last but not least you've probably seen in the demo that
we do a little animation at the end that people seem to love

00:40:25.040 --> 00:40:28.660
where a stamp comes down here and everything flies off.

00:40:28.660 --> 00:40:35.450
I'm sure you've been hearing this a lot this week but it's
all CSS animation; it's all a class that we make called Fly

00:40:35.450 --> 00:40:41.760
Out that sets the WebKit transform and when the user hits
the button we just apply that class to that stamp image,

00:40:41.760 --> 00:40:45.090
it flies down on the page, it's off and it's running.

00:40:45.090 --> 00:40:52.200
So I think that covers most of the stuff that kind of
surprised us but we did do this in a short period of time

00:40:52.200 --> 00:40:57.670
and we're super happy with the results
and we think that when you guys dig in--

00:40:57.670 --> 00:41:01.840
like I said you've got 90% of what you need
and the remaining 10% is pretty easy to solve.

00:41:01.840 --> 00:41:03.780
So I look forward to seeing what you build.

00:41:03.780 --> 00:41:05.500
>> Adam Roben: Thanks Cabel that was really great.

00:41:05.500 --> 00:41:11.190
I should also mention that we're very excited to be hearing
from Cabel and the other guys at Panic and from all of you

00:41:11.190 --> 00:41:14.020
about what things about extensions you find surprising.

00:41:14.020 --> 00:41:17.920
Extensions are a developer-only feature at
the moment and so we're looking for a lot

00:41:17.920 --> 00:41:19.770
of feedback in ways that we can improve it.

00:41:19.770 --> 00:41:22.070
So let's go over a quick summary of what you've seen today.

00:41:22.070 --> 00:41:26.370
We've talked about how to modify web pages
using content style sheet and scripts;

00:41:26.370 --> 00:41:32.220
we've talked about how to add context menu items in Safari
using the Context Menu and validate and command events;

00:41:32.220 --> 00:41:35.920
and we've talked about how to publish
new versions of your extension by opting

00:41:35.920 --> 00:41:43.010
into Safari's autoupdate discovery mechanism by
posting an update manifest on your server and putting

00:41:43.010 --> 00:41:47.170
that update manifest's URL into the Builder
so it will be embedded into your extension.

00:41:47.170 --> 00:41:52.770
Now if you want to find out more information
about all of this you can contact Vicki Murley,

00:41:52.770 --> 00:41:58.300
our Safari Technologies Evangelist; you can also go to the
Safari Dev Center where you'll find a lot of documentation.

00:41:58.300 --> 00:42:03.930
That's also where you sign up for the free Safari
Developer Program and get your free signing certificate.

00:42:03.930 --> 00:42:09.830
And you can also use the Apple Development Forums and we
have Apple engineers looking through those forums and trying

00:42:09.830 --> 00:42:11.550
to answer people's questions all the time.

