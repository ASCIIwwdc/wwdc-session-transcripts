WEBVTT

00:00:07.280 --> 00:00:09.200
>> Kevin Cathey: Hello, everyone.

00:00:09.200 --> 00:00:10.210
Hello, WWDCers.

00:00:10.210 --> 00:00:10.860
How are you guys doing?

00:00:10.860 --> 00:00:12.180
Enjoying your conference so far?

00:00:12.180 --> 00:00:15.840
I'll take most silence as a good thing.

00:00:15.840 --> 00:00:19.590
All right, well, my name is Kevin, and I'm
one of the Interface Builder engineers.

00:00:19.590 --> 00:00:26.540
And today, I get the privilege of getting to show you guys
Interface Builder, which is now integrated into Xcode 4,

00:00:26.540 --> 00:00:32.600
and to show you why this integration is going to make
your lives as developers much easier by allowing you guys

00:00:32.600 --> 00:00:36.950
to create your applications faster
and simpler than ever before.

00:00:36.950 --> 00:00:39.320
So let me start out with a question.

00:00:39.320 --> 00:00:41.110
You can raise your hands on this one.

00:00:41.110 --> 00:00:47.210
How many of you would say that you're familiar,
even relatively, with Interface Builder?

00:00:47.210 --> 00:00:49.390
Awesome. There's a lot of hands out there.

00:00:49.390 --> 00:00:49.860
Well, great.

00:00:49.860 --> 00:00:52.040
Well, this session is for you guys.

00:00:52.040 --> 00:00:55.710
You guys are familiar with all these
different concepts of Interface Builder,

00:00:55.710 --> 00:00:57.610
but you might not know where they are in Xcode 4.

00:00:57.610 --> 00:01:00.490
And so it's going to be my job to show you them.

00:01:00.490 --> 00:01:03.910
Now, for those of you who didn't raise your
hands, don't run to the session next door.

00:01:03.910 --> 00:01:04.720
Stay here.

00:01:04.720 --> 00:01:05.920
We want a good turnout.

00:01:05.920 --> 00:01:08.220
This session is for you guys, too.

00:01:08.220 --> 00:01:11.910
Interface Builder in Xcode 4 is new for everyone.

00:01:11.910 --> 00:01:19.760
So as I walk through all the different features of Interface
Builder in Xcode 4, you guys will get to see how these apps,

00:01:19.760 --> 00:01:25.580
or how you build interfaces with Interface
Builder at the most fundamental level.

00:01:25.580 --> 00:01:30.270
So Interface Builder in Xcode 4.

00:01:30.270 --> 00:01:33.090
So how am I going to show you guys this integration today?

00:01:33.090 --> 00:01:37.020
Well, today's session is really going
to be about demos, two in particular.

00:01:37.020 --> 00:01:40.700
First, we're going to start by just
walking through Interface Builder.

00:01:40.700 --> 00:01:44.650
We're going to look at each piece, and you guys
can match what you know in Interface Builder 3

00:01:44.650 --> 00:01:48.720
with what you guys see on screen in Xcode 4.

00:01:48.720 --> 00:01:53.680
Then I want to talk, in particular,
about what it means to make connections

00:01:53.680 --> 00:01:56.980
between your interface and your source code in Xcode 4.

00:01:56.980 --> 00:02:00.290
And we have some exciting things to show you there.

00:02:00.290 --> 00:02:04.830
So with both of these demos, we're going to
be building an interface for an application.

00:02:04.830 --> 00:02:06.290
So I'm going to ask another question.

00:02:06.290 --> 00:02:08.220
This is quiz question number two.

00:02:08.220 --> 00:02:12.450
How many were at the Interface Builder
session yesterday where we were talking

00:02:12.450 --> 00:02:16.470
about iPhone applications given
by my colleagues, Rob and Barry?

00:02:16.470 --> 00:02:17.330
Anyone out there?

00:02:17.330 --> 00:02:18.700
A few hands.

00:02:18.700 --> 00:02:19.990
Well, if you weren't, don't worry.

00:02:19.990 --> 00:02:20.640
This is the app.

00:02:20.640 --> 00:02:22.100
It's really simple.

00:02:22.100 --> 00:02:25.200
We just have a table view with a bunch of recipes.

00:02:25.200 --> 00:02:28.450
And when you tap on one, it will show a detail.

00:02:28.450 --> 00:02:32.500
Our job is we're going to build that detail View Controller.

00:02:32.500 --> 00:02:34.520
Really, really simple.

00:02:34.520 --> 00:02:36.080
All right, does that sound good?

00:02:36.080 --> 00:02:40.690
Awesome. Well, let's get to work
looking at Interface Builder in Xcode 4.

00:02:40.690 --> 00:02:44.980
Okay, so I hope that you guys have
had a chance to look at Xcode 4.

00:02:44.980 --> 00:02:48.940
With this session, I'm not so much
going to cover every feature of Xcode 4.

00:02:48.940 --> 00:02:53.990
But rather, we're going to be looking, in
particular, at the Interface Builder editor.

00:02:53.990 --> 00:02:55.640
So feature number one.

00:02:55.640 --> 00:02:57.830
To open a NIB file, I just click it.

00:02:57.830 --> 00:03:00.180
And now we're working in Interface Builder.

00:03:00.180 --> 00:03:04.520
So for the sake of the demo, I'm just going
to go ahead and close the navigator area

00:03:04.520 --> 00:03:08.010
so that we can focus on Interface Builder.

00:03:08.010 --> 00:03:13.300
So Interface Builder's layout is pretty
standard with the rest of Xcode 4.

00:03:13.300 --> 00:03:16.550
On the left, we have areas that show structure.

00:03:16.550 --> 00:03:18.650
In the middle, our working area.

00:03:18.650 --> 00:03:26.450
And then on the right, we have our utilities area,
which includes our inspectors and our libraries.

00:03:26.450 --> 00:03:31.990
So we're going to start with this gray
strip over here, and we call it the Dock.

00:03:31.990 --> 00:03:36.490
The Dock represents the highest
level looking at your document.

00:03:36.490 --> 00:03:38.130
And it's the top-level objects.

00:03:38.130 --> 00:03:40.830
For those of you familiar with Interface Builder 3,

00:03:40.830 --> 00:03:45.710
this would be akin to the icon view
that was in the document window.

00:03:45.710 --> 00:03:50.050
But there's an important distinction, if
you look at this, and it's really subtle.

00:03:50.050 --> 00:03:51.430
It's this line.

00:03:51.430 --> 00:03:52.660
Now, what does this line mean?

00:03:52.660 --> 00:03:56.200
There are objects above it and objects below it.

00:03:56.200 --> 00:04:01.620
One of the things that we've tried to do with
Xcode is make it really clear which objects are

00:04:01.620 --> 00:04:04.750
in your NIB file and which objects aren't.

00:04:04.750 --> 00:04:11.570
Objects that are in your NIB file, for example, would
be like your views, your sliders, your text fields,

00:04:11.570 --> 00:04:16.400
those things that at runtime every time your
View Controller, for example, is instantiated,

00:04:16.400 --> 00:04:19.800
you get new copies of those objects every time.

00:04:19.800 --> 00:04:23.510
The second category of objects are those above the line.

00:04:23.510 --> 00:04:27.090
And these are objects that don't
actually exist in Interface Builder.

00:04:27.090 --> 00:04:29.720
Rather, they're just placeholders or proxies.

00:04:29.720 --> 00:04:34.040
At runtime, the actual values of
these objects will get filled in.

00:04:34.040 --> 00:04:37.580
So when you edit, for example, the
custom class on one of these objects,

00:04:37.580 --> 00:04:40.290
you're not actually changing the class of this object.

00:04:40.290 --> 00:04:45.580
But rather, just promising to Interface Builder that,
hey, at runtime, this object is going to be of this class.

00:04:45.580 --> 00:04:51.900
And I'll talk more about Files Owner
and Custom Classes later on in the talk.

00:04:51.900 --> 00:04:56.770
So the Dock is the springboard to
quickly open objects in your document.

00:04:56.770 --> 00:04:58.740
So I'm going to go ahead and open up this view.

00:04:58.740 --> 00:05:01.450
So I've got an empty view here right now.

00:05:01.450 --> 00:05:04.190
Well, I kind of want to add some stuff to it.

00:05:04.190 --> 00:05:10.210
So to do this, I'm going to go
over and use the Xcode 4 libraries.

00:05:10.210 --> 00:05:14.990
Again, if you're familiar with Interface
Builder 3, or some of our other developer tools,

00:05:14.990 --> 00:05:18.190
these libraries will already be familiar to you.

00:05:18.190 --> 00:05:22.820
However, you'll notice that we've made a few
nice improvements, just to simplify the libraries

00:05:22.820 --> 00:05:26.060
to make it easier for you to find what you're looking for.

00:05:26.060 --> 00:05:29.940
In all of our libraries, file templates,
code snippets and objects,

00:05:29.940 --> 00:05:33.710
we've organized the items in that library by flat form.

00:05:33.710 --> 00:05:42.620
You can see, for example, in file templates,
we separated out between iOS and Mac OS X.

00:05:42.620 --> 00:05:49.490
Sweet. With Interface Builder, we do the same thing, only we
go a step further and actually show you only the platforms

00:05:49.490 --> 00:05:51.870
that apply to the document that you're working with.

00:05:51.870 --> 00:05:55.960
So, for example, Cocoa Touch versus your own custom objects.

00:05:55.960 --> 00:05:56.600
Pretty simple.

00:05:56.600 --> 00:06:03.510
All right, so when I find the object that I want to
add to my document, I can get additional information

00:06:03.510 --> 00:06:08.980
about the object by clicking and just
sitting having it come up and show me detail.

00:06:08.980 --> 00:06:12.230
I can also bring it up immediately by hitting the spacebar.

00:06:12.230 --> 00:06:15.890
These little library detailed pop-ups
will give you additional information

00:06:15.890 --> 00:06:18.270
about how to use the objects in the library.

00:06:18.270 --> 00:06:20.820
And this pop-up is present in all of our libraries.

00:06:20.820 --> 00:06:28.620
File templates, code snippets, objects and in media to give
you additional detail about the item you have selected.

00:06:28.620 --> 00:06:33.580
Okay, so we're building our recipe detail View Controller.

00:06:33.580 --> 00:06:35.790
That's the NIB file that I have open right now.

00:06:35.790 --> 00:06:41.670
So the first thing I want to add is an image view, so we
can see a picture of what kind of food we will be cooking.

00:06:41.670 --> 00:06:45.440
So I'm just going to use the filter
field and search for image view.

00:06:45.440 --> 00:06:50.840
Now, when I add it, and then I'll just drag it out of the
library, and there's something I want to point out here.

00:06:50.840 --> 00:06:56.210
As I drag this object around, you can see it's
kind of changing appearances as I drag it around.

00:06:56.210 --> 00:07:00.320
What Interface Builder does is as you
are adding objects from the library,

00:07:00.320 --> 00:07:05.430
we will automatically customize the objects that
you're dragging, so that when you drop them,

00:07:05.430 --> 00:07:08.460
they fit the best in the place that you're dropping them in.

00:07:08.460 --> 00:07:09.980
So pay attention.

00:07:09.980 --> 00:07:14.700
As I drag it into my view, it resizes
to fill the whole thing.

00:07:14.700 --> 00:07:20.840
Now, this doesn't just work with sizing objects, but
also, for example, as some of you may have noticed,

00:07:20.840 --> 00:07:26.530
if I drag out like a bar button or
a bar button item into my interface,

00:07:26.530 --> 00:07:30.420
the style of that will automatically
change based upon where I'm dropping it.

00:07:30.420 --> 00:07:34.940
Something small, but it really helps you be productive.

00:07:34.940 --> 00:07:42.380
Okay, so I've just added something inside
of view already existing in my interface.

00:07:42.380 --> 00:07:46.330
But I kind of want to add a top-level object.

00:07:46.330 --> 00:07:48.170
So we're going to add a tab bar controller.

00:07:48.170 --> 00:07:53.650
I can just click it and drag it
out into my interface and drop it.

00:07:53.650 --> 00:07:55.250
Very easy.

00:07:55.250 --> 00:08:01.330
And for the first time with Xcode 4, I can
actually add multiple objects at the same time.

00:08:01.330 --> 00:08:05.820
So we want to add a slider that adjusts
the font size of the recipe steps.

00:08:05.820 --> 00:08:11.660
So if you're blind like me and need glasses, you can
actually adjust the font size when you're cooking.

00:08:11.660 --> 00:08:14.930
We also want to add the recipe
steps themselves as a TextView.

00:08:14.930 --> 00:08:19.950
And then finally, we all want to make money,
and making money from the stage is awesome,

00:08:19.950 --> 00:08:24.620
so I'm going to drag out these three objects;
an Add Banner View, TextView and Slider.

00:08:24.620 --> 00:08:28.800
You can see, Interface Builder allows me to
drag out all three objects at the same time,

00:08:28.800 --> 00:08:30.670
and I can just drop them right into place.

00:08:30.670 --> 00:08:38.680
So I've got quite a mess of objects right now in my design
canvas, so let me take a minute and talk about that.

00:08:38.680 --> 00:08:43.600
The design canvas in Interface Builder
for Xcode 4 is an infinite canvas.

00:08:43.600 --> 00:08:47.930
And I can arrange objects in that
canvas how I feel they make sense.

00:08:47.930 --> 00:08:54.250
So I can drag this object off here and say,
I want this over here and this down here.

00:08:54.250 --> 00:08:59.010
And this is a pretty big monitor, so you can't
really see the power of a scrollable canvas.

00:08:59.010 --> 00:09:01.640
But I can arrange these objects how I want them.

00:09:01.640 --> 00:09:07.870
With an infinite scrollable canvas, we're ensuring that
you can always see the interface that you're working on,

00:09:07.870 --> 00:09:13.500
regardless of its size and your monitor
size, which is a really big win.

00:09:13.500 --> 00:09:19.730
Also, with the design canvas, some more improvements that
we've made is something small, but I can resize objects

00:09:19.730 --> 00:09:24.700
from any side, which is nice if
you have particular-- thanks.

00:09:24.700 --> 00:09:30.050
And this is nice if you have particular
constraints that you haven't set up yet,

00:09:30.050 --> 00:09:34.300
but you just want to resize it real quick.

00:09:34.300 --> 00:09:39.690
Okay, so there's something else that has to
do with clutter, and just if you're like me,

00:09:39.690 --> 00:09:43.900
you might not always want graph paper, so we've
just allowed you to change your background color.

00:09:43.900 --> 00:09:47.460
So I can change it to checkers or white or gray.

00:09:47.460 --> 00:09:52.700
And we considered adding a marble color, but our HI
resident Genius didn't think that would make sense

00:09:52.700 --> 00:09:55.550
in this context, so we had to jackhammer that out.

00:09:55.550 --> 00:09:58.690
But anyway, you can change the
color to be whatever you want.

00:09:58.690 --> 00:10:01.610
And that's just something small and nice.

00:10:01.610 --> 00:10:08.510
So because Interface Builder is an editor
inside of Xcode 4, we also have the jump bar.

00:10:08.510 --> 00:10:14.170
And for Interface Builder, this is particularly great,
because I can see the entire structure of my document

00:10:14.170 --> 00:10:19.000
and make precise selections regardless of
what's visible or how things are layered.

00:10:19.000 --> 00:10:24.660
So I can go ahead and click on the jump bar, and you can
see the entire hierarchy of all those toppable objects,

00:10:24.660 --> 00:10:27.790
and I can even dig down inside of objects themselves.

00:10:27.790 --> 00:10:30.290
Now, it's really great if I select an object.

00:10:30.290 --> 00:10:33.420
You can see it's selected in the design canvas.

00:10:33.420 --> 00:10:39.440
And I can do the same thing with other objects,
which is just a nice way to do-- to jump around.

00:10:39.440 --> 00:10:44.040
You're going to hear me talk about a couple of different
messages about Xcode 4 throughout this session.

00:10:44.040 --> 00:10:50.210
One of them is we want, in Xcode 4, we want you to be
able to get to where you need to go as quick as possible.

00:10:50.210 --> 00:10:54.530
And we think the jump bar, especially in
Interface Builder, really fulfills that.

00:10:54.530 --> 00:11:01.540
All right, so I'm going to go ahead and close up
some of these views on screen to help with clutter.

00:11:01.540 --> 00:11:05.010
And just to be clear, when I'm clicking those Xs,
they're not deleting them, I'm just hiding them.

00:11:05.010 --> 00:11:10.200
And there's actually-- the Dock has a
little indication of which objects are open.

00:11:10.200 --> 00:11:13.930
And you can see there's no little dot next to those objects.

00:11:13.930 --> 00:11:19.750
Okay, so while the jump bar shows structure, there's another
place that shows structure in the Interface Builder editor

00:11:19.750 --> 00:11:23.620
as well, and that's called the document outline view.

00:11:23.620 --> 00:11:29.720
To open that up, I'm just going to bring my mouse
down to the bottom of the Dock, click on it,

00:11:29.720 --> 00:11:33.590
and now I have an outline view showing
me the structure of my document.

00:11:33.590 --> 00:11:39.140
Now, the first thing you're going to notice
right off the bat is we use the same distinction

00:11:39.140 --> 00:11:42.830
between placeholder objects and
objects, as we do in the Dock.

00:11:42.830 --> 00:11:46.730
Again, we want this to be really clear to
you, as you're working with your objects,

00:11:46.730 --> 00:11:50.400
which ones are in your NIB file and which ones aren't.

00:11:50.400 --> 00:11:57.660
Now, this outline view works just the same
as the outline view from Interface Builder 3.

00:11:57.660 --> 00:11:59.650
So I can drill down into objects.

00:11:59.650 --> 00:12:01.730
There's that image view that we created earlier.

00:12:01.730 --> 00:12:06.970
And here's the different pieces of my tab bar controller.

00:12:06.970 --> 00:12:10.880
If I click on one, you can see it selects
it in the design canvas, and it opens it up.

00:12:10.880 --> 00:12:14.420
Now, this is the same behavior as
the other navigators in Xcode 4.

00:12:14.420 --> 00:12:18.130
If you make selections, they open in the design area.

00:12:18.130 --> 00:12:22.750
You'll also notice, however, that
we also selected in the jump bar.

00:12:22.750 --> 00:12:29.180
So whether I select something in the jump bar or in
the outline view, the selection stays synchronized.

00:12:29.180 --> 00:12:33.570
With a unified selection pattern, you're
always able to see what you're working on.

00:12:33.570 --> 00:12:38.040
And this is the second big message that I
want to get across as you guys use Xcode 4.

00:12:38.040 --> 00:12:40.450
The first one was you can get to where you want to go.

00:12:40.450 --> 00:12:45.210
The second one is, once you've gotten there,
you can focus on what you're working on.

00:12:45.210 --> 00:12:52.270
So whether jump bar, outline view or design canvas,
we're always making sure you know what you have selected.

00:12:52.270 --> 00:12:57.090
And also because it's an outline view, I can
select multiple objects and drag them around.

00:12:57.090 --> 00:13:00.480
So I can drag these objects and add them to my view.

00:13:00.480 --> 00:13:01.690
And I can delete objects.

00:13:01.690 --> 00:13:06.500
I really didn't want to have this tab
bar controller, so I can just delete it.

00:13:06.500 --> 00:13:09.450
Now, before I move on, I want to give you guys a little tip.

00:13:09.450 --> 00:13:13.430
I'm going to give you guys a few little tips
and tricks as we go through this session.

00:13:13.430 --> 00:13:17.800
And the first one is, every object
in Interface Builder has a name.

00:13:17.800 --> 00:13:21.490
That is just inside of your NIB
file when you're working with it.

00:13:21.490 --> 00:13:28.080
To edit that label, I can use the outline view,
just click once, and now I can rename the object.

00:13:28.080 --> 00:13:33.680
Now, this is a small thing, but really nice when
you're working with a NIB file with multiple people.

00:13:33.680 --> 00:13:40.880
So you might have a bunch of controls, and you can label
them so that people who aren't as familiar with the project,

00:13:40.880 --> 00:13:45.600
when they come onto the project, can
see exactly what each control is for.

00:13:45.600 --> 00:13:50.980
So image view is not as descriptive as I want
it, so we're going to call this the recipe image.

00:13:50.980 --> 00:13:55.900
Horizontal slider, well, it is a slider,
but it's also my font size slider.

00:13:55.900 --> 00:14:01.810
And our TextView, yes, it's a TextView,
but it's also for my recipe steps.

00:14:01.810 --> 00:14:05.650
So that way, I can just know what I'm working on.

00:14:05.650 --> 00:14:13.140
Okay, I think I'm done working with the structure of
my document, so I can go ahead and close her on up.

00:14:13.140 --> 00:14:17.770
Okay, so once again, I have a mess of objects in my view.

00:14:17.770 --> 00:14:22.100
So let's go ahead and start arranging
objects and working with them within my view.

00:14:22.100 --> 00:14:24.290
Again, those of you who are familiar
with Interface Builder 3,

00:14:24.290 --> 00:14:29.250
this is going to act the same way as
you guys know and are familiar with.

00:14:29.250 --> 00:14:31.790
So I can select an object and resize it.

00:14:31.790 --> 00:14:37.190
Now, my colleague, Rob, told me to make it 105 pixels for
those images, so you see that little measuring indicator.

00:14:37.190 --> 00:14:38.780
I can see exactly how big to make it.

00:14:38.780 --> 00:14:42.070
And I can drag objects around.

00:14:42.070 --> 00:14:45.350
And what are those blue lines that keep showing up?

00:14:45.350 --> 00:14:52.170
Each of our platforms, Mac OS X and iOS
have a set of Human Interface Guidelines

00:14:52.170 --> 00:14:57.510
that determine how you guys should be laying out your
interfaces, and in particular, how far objects should be

00:14:57.510 --> 00:15:01.850
from each other, how far a UI slider should be
from a TextView, and how far a TextView should be

00:15:01.850 --> 00:15:05.580
from an add banner view, and different things like that.

00:15:05.580 --> 00:15:12.060
We've built these interface guidelines into
Interface Builder in the form of these guides.

00:15:12.060 --> 00:15:16.490
And we've also added additional guides that
you can snap your objects to align them,

00:15:16.490 --> 00:15:19.020
center align them, and other things like that.

00:15:19.020 --> 00:15:20.180
So that's what these blue guides are.

00:15:20.180 --> 00:15:27.030
And I'm going to go ahead and snap my money-making
tool down in the corner in the bottom of my view.

00:15:27.030 --> 00:15:30.530
And, of course, I can resize my TextView, as well.

00:15:30.530 --> 00:15:34.840
And you can see those guides popping up and
showing me exactly how far things should be

00:15:34.840 --> 00:15:36.950
from the sides and from other objects.

00:15:36.950 --> 00:15:39.550
And that way, you don't have to
worry about pixel perfection.

00:15:39.550 --> 00:15:45.120
Rather, we're handling the pixel perfection for
you, and your apps can look as best as they can.

00:15:45.120 --> 00:15:48.630
Where did my slider go?

00:15:48.630 --> 00:15:49.950
That's the question.

00:15:49.950 --> 00:15:52.570
And this is an excellent example
where we can use the jump bar

00:15:52.570 --> 00:15:55.690
to find something that is being hidden by something else.

00:15:55.690 --> 00:16:01.080
And thankfully, since I named it in the outline
view, I know exactly what this view is for.

00:16:01.080 --> 00:16:02.460
This is my font size slider.

00:16:02.460 --> 00:16:05.200
When I select it, you can see it's
hiding behind my TextView.

00:16:05.200 --> 00:16:10.960
I can either drag the object, or,
of course, I can use key commands.

00:16:10.960 --> 00:16:19.360
So we're just going to bring this
guy down, center him and resize him.

00:16:19.360 --> 00:16:22.960
Just make sure our TextView is also resized correctly.

00:16:22.960 --> 00:16:24.150
And awesome.

00:16:24.150 --> 00:16:29.810
Our interface is laid out, and we're
ready to go with the next step.

00:16:29.810 --> 00:16:35.940
So the next thing I want to talk about are actually changing
and modifying some of the attributes of our objects.

00:16:35.940 --> 00:16:39.960
And for this, we're going to use the
inspectors up in the right corner.

00:16:39.960 --> 00:16:44.300
Now, there are a couple of, a number of
Interface Builder specific inspectors,

00:16:44.300 --> 00:16:48.090
and they start with the third one, the Attributes Inspector.

00:16:48.090 --> 00:16:49.690
So I can click on it right now.

00:16:49.690 --> 00:16:50.880
I have my mouse over it.

00:16:50.880 --> 00:16:54.870
But I want to show you another little
tip and trick of using Xcode 4.

00:16:54.870 --> 00:17:00.500
All of our navigators, inspectors
and libraries have key equivalence

00:17:00.500 --> 00:17:04.000
that you can use to jump to the thing that you need.

00:17:04.000 --> 00:17:11.350
So the pattern is some sort of modifiers, and then a
number to indicate which sequentially, which navigator

00:17:11.350 --> 00:17:14.690
or inspector or library you're talking about.

00:17:14.690 --> 00:17:17.090
So our Attributes Inspector is the third one.

00:17:17.090 --> 00:17:28.810
And I'm going to hold down command and option and hit the
3, and it's going to jump right to my Attributes Inspector.

00:17:28.810 --> 00:17:32.760
So it's a great way to just navigate very quickly.

00:17:32.760 --> 00:17:39.000
Okay, so inspectors work the way
that you would expect them to work.

00:17:39.000 --> 00:17:41.800
But we've made a few improvements with Xcode 4.

00:17:41.800 --> 00:17:44.740
First of all, our inspectors are resizable.

00:17:44.740 --> 00:17:50.430
[ Applause ]

00:17:50.430 --> 00:17:55.210
In addition, if I have it smaller
and I'm working with this text field,

00:17:55.210 --> 00:17:58.140
we actually resize the text field
based upon how much text is in it.

00:17:58.140 --> 00:18:04.170
So you can see, as I type here and add more
text, this is a text field that resizes.

00:18:04.170 --> 00:18:06.530
It will automatically resize to fit my content.

00:18:06.530 --> 00:18:09.910
A really nice way to always be
seeing what you're working on.

00:18:09.910 --> 00:18:13.920
And, of course, I can change other
attributes like the text alignment.

00:18:13.920 --> 00:18:18.630
And as I make these changes, you can see they're
reflected immediately in the design surface.

00:18:18.630 --> 00:18:25.050
I can also change attributes that modify
the behavior of the object I'm working with.

00:18:25.050 --> 00:18:30.100
So, for example, I can turn on data detection for links.

00:18:30.100 --> 00:18:32.480
Now, something subtle just happened.

00:18:32.480 --> 00:18:36.120
And bonus points for the person
who can figure out what that was.

00:18:36.120 --> 00:18:37.260
Let me show you again.

00:18:37.260 --> 00:18:40.090
So I'm going to uncheck links and recheck it.

00:18:40.090 --> 00:18:41.510
Something really subtle just happened.

00:18:41.510 --> 00:18:42.740
Did anyone see it?

00:18:42.740 --> 00:18:43.770
>> [ Inaudible ]

00:18:43.770 --> 00:18:46.210
>> Ah, I heard it.

00:18:46.210 --> 00:18:48.160
This little warning icon appeared.

00:18:48.160 --> 00:18:50.620
What's up with that?

00:18:50.620 --> 00:18:57.390
It's very common for you, as developers, to be
targeting multiple versions of iOS or Mac OS X

00:18:57.390 --> 00:19:01.110
as you're developing the interfaces for your applications.

00:19:01.110 --> 00:19:06.850
Now, as you all know, we're constantly bringing out
new APIs for each interface element that only apply

00:19:06.850 --> 00:19:10.750
for certain versions of those operating systems.

00:19:10.750 --> 00:19:13.560
For Interface Builder, we always show those for you.

00:19:13.560 --> 00:19:19.220
So if you happen to be targeting let's say
iOS 3.0, and you're using iOS 4 features,

00:19:19.220 --> 00:19:22.700
Interface Builder will say, hey, that's not supported.

00:19:22.700 --> 00:19:27.090
This way, you can see in the editing tool
versus that runtime when things don't work.

00:19:27.090 --> 00:19:29.270
Now, I want to see exactly what this warning is.

00:19:29.270 --> 00:19:35.710
And so I can jump right to it by just clicking on the
warning icon, and it takes me right to the issues navigator.

00:19:35.710 --> 00:19:39.390
Again, we're trying to help you get to
where you need to go as quick as possible.

00:19:39.390 --> 00:19:44.240
So clicking on this and going to the issues navigator
doesn't just work for Interface Builder warnings,

00:19:44.240 --> 00:19:47.190
but it works for any sort of warnings or errors you have.

00:19:47.190 --> 00:19:50.240
So if you're working with your source
code and you build, you get an error,

00:19:50.240 --> 00:19:54.210
you can jump quickly to the issues navigator
just by clicking in the activity view.

00:19:54.210 --> 00:19:59.440
So the warning that I'm given is unsupported
configuration, data detection and editability.

00:19:59.440 --> 00:20:02.040
Oh, that's right, I forgot.

00:20:02.040 --> 00:20:05.960
UI text fields that are editable can't have data detection.

00:20:05.960 --> 00:20:07.210
I should have remembered that.

00:20:07.210 --> 00:20:08.590
But that's okay.

00:20:08.590 --> 00:20:13.100
If I just uncheck editable, you can see our issue goes away.

00:20:13.100 --> 00:20:14.760
And I'm going to go ahead and re-close that.

00:20:14.760 --> 00:20:22.110
So Interface Builder, because it's a part of Xcode 4, uses
the Xcode 4 issues infrastructure to present the issues

00:20:22.110 --> 00:20:29.490
that come up in your interface side by side with all
the other issues that are in your workspace or project.

00:20:29.490 --> 00:20:35.040
Okay, so these are pretty common
attributes that I'm setting,

00:20:35.040 --> 00:20:38.630
but there are a few special ones to Interface Builder.

00:20:38.630 --> 00:20:41.640
So if I have this image view selected,
I might want to make sure

00:20:41.640 --> 00:20:45.030
that I have the properties on this image view set correctly.

00:20:45.030 --> 00:20:51.240
So I want to add an image to this image view to
preview these to make sure I've got it all right.

00:20:51.240 --> 00:20:58.960
If I go in the inspector and right click in this comma
box, I can see a list of all the images in my project.

00:20:58.960 --> 00:21:04.290
Another place that I can see this
same data is in the Media Library.

00:21:04.290 --> 00:21:10.250
The Media Library will show me
all media resources in my project,

00:21:10.250 --> 00:21:14.200
and particularly which ones apply
to the editor that I'm working with.

00:21:14.200 --> 00:21:16.680
For Interface Builder, this is images.

00:21:16.680 --> 00:21:23.660
Now, I want to add a steak image, because I really like
steak, and I'm looking forward to enjoying one later today.

00:21:23.660 --> 00:21:29.710
And so I can search for my steak image and just
drag it on out and drop it in my image view.

00:21:29.710 --> 00:21:34.580
Now, I'm really glad I did that, because, as
you can see, the scaling isn't quite right.

00:21:34.580 --> 00:21:39.420
So I'm going to go up here to my
scale mode and go to aspect fill.

00:21:39.420 --> 00:21:46.570
So the Media Library presents you an opportunity to
add resources, either directly, to your interfaces,

00:21:46.570 --> 00:21:51.450
or inside of other objects that accept
resources, like image views and buttons.

00:21:51.450 --> 00:21:54.300
All right, so that's pretty much the Attributes Inspector.

00:21:54.300 --> 00:21:59.070
Let's move on to inspector number
two, which is the Size Inspector.

00:21:59.070 --> 00:22:03.090
The Size Inspector will show me different attributes

00:22:03.090 --> 00:22:07.950
about the geometric characteristics
of the object that I have selected.

00:22:07.950 --> 00:22:10.430
For example, size, position.

00:22:10.430 --> 00:22:18.070
With Xcode 4, we've added a little helpful menu in the Size
Inspector, so you can quickly do basic geometric operations.

00:22:18.070 --> 00:22:23.190
So, for example, I can fill the container
horizontally, and you can see that text field then takes

00:22:23.190 --> 00:22:26.570
up the whole space of my container horizontally.

00:22:26.570 --> 00:22:35.090
We've also brought over the same sort of controls that were
present in Interface Builder 3, like auto resizing rules.

00:22:35.090 --> 00:22:36.740
What are auto resizing rules?

00:22:36.740 --> 00:22:39.920
A lot of time, we have containers that have sub views.

00:22:39.920 --> 00:22:43.810
And in this case, we have that exact thing, we
have some containing view for our View Controller,

00:22:43.810 --> 00:22:47.190
then a bunch of sub views inside of them.

00:22:47.190 --> 00:22:53.010
Now, we can rotate the phone or we can rotate our iPad
or we can, you know, change the attributes about it

00:22:53.010 --> 00:22:57.570
and make this view smaller or larger, and as
the view changes its size, its containing view,

00:22:57.570 --> 00:23:01.950
we want all of our sub views to
change accordingly and automatically.

00:23:01.950 --> 00:23:04.600
To do this, we use auto resizing rules.

00:23:04.600 --> 00:23:06.620
Let me show you how they work in Interface Builder.

00:23:06.620 --> 00:23:12.080
With this control, I can see-- I can
actually set the auto resizing rules

00:23:12.080 --> 00:23:14.790
and see a preview of what they're going to be like.

00:23:14.790 --> 00:23:17.920
On the outside, we have these little
beams, and we call them anchors.

00:23:17.920 --> 00:23:23.680
And this simply means be a certain
number of pixels from one of the edges.

00:23:23.680 --> 00:23:28.010
So, for example, I want this TextView
to always be a certain number of pixels

00:23:28.010 --> 00:23:30.410
from the top and bottom, whatever I have laid out.

00:23:30.410 --> 00:23:33.610
I'm going to show you a third little tip and trick.

00:23:33.610 --> 00:23:41.530
One way that you can see exactly how many pixels you are
away from other objects is, if I hold down the option key,

00:23:41.530 --> 00:23:44.580
something is selected, and I move
my mouse over other objects,

00:23:44.580 --> 00:23:49.630
it will actually show me little indicators
of how far away I am from other objects.

00:23:49.630 --> 00:23:53.850
So this was present in Interface Builder
3, but it's even better in Xcode 4.

00:23:53.850 --> 00:23:57.690
And you can see that I'm, you know, a certain
number of points away from other objects.

00:23:57.690 --> 00:23:59.430
So this is what these anchors mean.

00:23:59.430 --> 00:24:01.670
It's just be that number of pixels away.

00:24:01.670 --> 00:24:07.720
So for the TextView, it would be, okay, be 113 from
the top and 80 from the bottom and 0 from the sides.

00:24:07.720 --> 00:24:17.150
These arrows, of course, indicate growing vertically
or horizontally as my superview changes its size.

00:24:17.150 --> 00:24:20.670
So we're going to want to change
these for all of our objects.

00:24:20.670 --> 00:24:24.810
So for the image view, I want it to
stay along the top and stay 105 pixels.

00:24:24.810 --> 00:24:29.030
And for the banner view, our moneymaker,
I want to keep it in the bottom there.

00:24:29.030 --> 00:24:32.910
And then our slider, we'll also want
to keep it in the bottom, as well.

00:24:34.390 --> 00:24:36.660
So I've edited my auto resizing rules.

00:24:36.660 --> 00:24:40.940
And one way I can preview them is to
launch my app and see what they look like.

00:24:40.940 --> 00:24:43.470
But I can actually preview them right in Interface Builder.

00:24:43.470 --> 00:24:46.440
And for this, I'm going to go back
to the Attributes Inspector

00:24:46.440 --> 00:24:52.830
and explain another set of attributes for our iOS objects.

00:24:52.830 --> 00:24:57.420
For top-level iOS views, we have a
property called simulated metrics.

00:24:57.420 --> 00:25:00.770
Now, what exactly is going on with these simulated metrics?

00:25:00.770 --> 00:25:05.970
It is often the case that we have a View
Controller that we're designing our view for.

00:25:05.970 --> 00:25:10.130
And that view is going to go inside of some other
View Controller, like a navigation controller,

00:25:10.130 --> 00:25:13.540
a tab bar controller, something along those lines.

00:25:13.540 --> 00:25:20.640
We can use the simulated metrics to see exactly what it's
going to look like inside of our containing superview.

00:25:20.640 --> 00:25:25.790
And it also will allow us to make--
also choose the exact right size for us.

00:25:25.790 --> 00:25:32.110
So you, as developers, don't have to know, well, the
tab bar is 52 pixels, and so I need to make my view 300,

00:25:32.110 --> 00:25:35.300
we just do that for you right inside of Interface Builder.

00:25:35.300 --> 00:25:39.270
So, for example, I can add in a top
bar, which is the navigation bar,

00:25:39.270 --> 00:25:41.500
and you can see that our view sizes accordingly.

00:25:41.500 --> 00:25:43.000
Well, how did it know to resize like that?

00:25:43.000 --> 00:25:43.710
It looks perfect.

00:25:43.710 --> 00:25:45.360
This is exactly what I want.

00:25:45.360 --> 00:25:50.460
And this is us previewing those auto-resizing
rules that we set in the Size Inspector.

00:25:50.460 --> 00:25:55.450
I can also preview those same auto-resizing
rules by switching the orientation.

00:25:55.450 --> 00:26:00.650
So I can switch from portrait to landscape and say,
ah, that's exactly what I want my interface to look

00:26:00.650 --> 00:26:04.270
like when I flip my phone into landscape mode.

00:26:04.270 --> 00:26:07.440
And we're going to put that back.

00:26:07.440 --> 00:26:11.520
All right, so that's the Attributes and the Size Inspector.

00:26:11.520 --> 00:26:17.460
The next inspector that would be present if we were using
a Mac OS X document would be the Bindings Inspector,

00:26:17.460 --> 00:26:20.790
where you can set the Cocoa bindings for a given object.

00:26:20.790 --> 00:26:23.890
If you're looking for more help on
that, there's plenty of documentation

00:26:23.890 --> 00:26:26.970
to take a look at, so you can get help with Cocoa bindings.

00:26:26.970 --> 00:26:31.760
Let me move onto the next inspector,
the Connections Inspector.

00:26:31.760 --> 00:26:35.770
The Connections Inspector will show me all of the different
connections that I've made to my different objects.

00:26:35.770 --> 00:26:38.210
And I can even make connections directly from here.

00:26:38.210 --> 00:26:41.570
And you can see that I have this
view owl that I made earlier.

00:26:41.570 --> 00:26:46.090
The last inspector is the Identity Inspector.

00:26:46.090 --> 00:26:51.430
The Identity Inspector will allow me to set
certain Interface Builder-specific properties,

00:26:51.430 --> 00:26:54.690
like that label I was telling you
about, and other things like that.

00:26:54.690 --> 00:26:58.820
But most importantly, it allows me
to set the custom class of an object.

00:26:58.820 --> 00:27:04.670
Now, this inspector works just as it did in Interface
Builder 3, with a little addition, this arrow.

00:27:04.670 --> 00:27:13.700
By clicking this arrow, I will be taking to the definition
of that class that was typed into the custom class field.

00:27:13.700 --> 00:27:16.760
So let me go back here.

00:27:16.760 --> 00:27:21.430
And this doesn't just work inside
of the Custom Class Inspector.

00:27:21.430 --> 00:27:24.900
But this works anywhere inside of Interface Builder.

00:27:24.900 --> 00:27:31.810
If I select, for example, UITextView, if I go under the
navigate menu, I can do jump to definition and jump right

00:27:31.810 --> 00:27:34.750
to the definition of the object that I have selected.

00:27:34.750 --> 00:27:39.340
[ Applause ]

00:27:39.340 --> 00:27:43.540
And, of course, this also works with my custom classes.

00:27:43.540 --> 00:27:47.290
So I have my recipe detail View
Controller that was created for me,

00:27:47.290 --> 00:27:51.160
set on the File's Owner, and I
can jump right to that, as well.

00:27:51.160 --> 00:27:56.050
All right, let's go back and keep
looking at some stuff here.

00:27:56.050 --> 00:27:57.810
So that's the Custom Class Inspector.

00:27:57.810 --> 00:28:00.880
Now, there's one more thing I want to
talk about in relation to custom classes,

00:28:00.880 --> 00:28:04.920
and that is what does setting the
custom class actually mean?

00:28:04.920 --> 00:28:06.950
Well, it has two meanings.

00:28:06.950 --> 00:28:11.660
Depending on whether or not the object is in
your NIB file or outside of it, your NIB file,

00:28:11.660 --> 00:28:17.750
like one of those placeholder objects, so let's start
with when it's a placeholder object like File's Owner.

00:28:17.750 --> 00:28:22.070
When you set the custom class on
an object like File's Owner, again,

00:28:22.070 --> 00:28:24.900
you're not actually changing the class of this object.

00:28:24.900 --> 00:28:28.120
At runtime, it's still going to
be whatever it happens to be.

00:28:28.120 --> 00:28:34.110
What you're doing, though, is you're indicating to Interface
Builder, and promising Interface Builder that at runtime,

00:28:34.110 --> 00:28:37.250
the File's Owner is going to be of this type.

00:28:37.250 --> 00:28:39.260
So why would you want to do that?

00:28:39.260 --> 00:28:41.560
And the main reason is for connections.

00:28:41.560 --> 00:28:48.730
With Interface Builder, knowing what class your objects are,
we can recommend actions and outlets to you automatically

00:28:48.730 --> 00:28:51.790
to make sure that you don't accidentally connect
something that you didn't mean to connect.

00:28:51.790 --> 00:28:54.220
So that's the first meaning.

00:28:54.220 --> 00:28:58.330
The second meaning that setting
a custom class has is for objects

00:28:58.330 --> 00:29:02.670
that are actually physically in
your Interface Builder document.

00:29:02.670 --> 00:29:09.530
So let's say that I have a slider, and
I set the custom class to Kevin slider.

00:29:09.530 --> 00:29:14.270
Because we're working with real objects in
Interface Builder, we don't actually have the code

00:29:14.270 --> 00:29:18.480
for Kevin slider that's running,
executing inside of Interface Builder,

00:29:18.480 --> 00:29:23.870
but we do have the actual system object,
UI slider, inside of Interface Builder.

00:29:23.870 --> 00:29:29.760
So when I save my document on the UI slider, it's going
to call encodeWithCoder, using the NS coding methods.

00:29:29.760 --> 00:29:34.760
So that's going to save the data for the
slider, things like the minimum position,

00:29:34.760 --> 00:29:38.850
the maximum and other things along those lines.

00:29:38.850 --> 00:29:43.500
But it's also going to save, along with
it, the string that represents the class

00:29:43.500 --> 00:29:46.580
that I typed into the Custom Class Inspector.

00:29:46.580 --> 00:29:53.390
In this case, it's going to say Kevin slider and put
that right next to the data for UI slider in the archive.

00:29:53.390 --> 00:29:58.900
At runtime, when I load up that NIB file,
it's going to say, hey, there's a slider,

00:29:58.900 --> 00:30:01.640
but hey, you've set it up to be Kevin slider.

00:30:01.640 --> 00:30:08.370
So instead of calling UI slider initWithCoder,
it's going to call Kevin slider initWithCoder.

00:30:08.370 --> 00:30:15.540
But because Kevin slider is a subclass of UI slider, we'll
get all of the customization that we made in our UI slider

00:30:15.540 --> 00:30:21.660
over in Interface Builder for free, load
it up into our own class of Kevin slider.

00:30:21.660 --> 00:30:25.280
So that's what setting the custom
class means for both placeholders.

00:30:25.280 --> 00:30:30.110
It's not changing the class, just you
indicating what type of class the object is,

00:30:30.110 --> 00:30:36.390
and then for objects in your interface, it's actually
changing the class, and at runtime, it will be that type.

00:30:36.390 --> 00:30:39.960
So that's what setting the custom class really does mean.

00:30:39.960 --> 00:30:44.110
All right, so those are the Interface
Builder specific inspectors.

00:30:44.110 --> 00:30:47.410
There are two more inspectors that
apply to Interface Builder.

00:30:47.410 --> 00:30:52.060
The first is the File Inspector, and this will show
you all the properties and attributes that are present

00:30:52.060 --> 00:30:54.810
in the rest of-- for all the other files in Xcode 4.

00:30:54.810 --> 00:31:01.250
But it will also show me a few Interface Builder-specific
properties, like development and deployment targets.

00:31:01.250 --> 00:31:07.420
And this is what I was talking about earlier, where
you might be targeting a certain version of iOS.

00:31:07.420 --> 00:31:12.410
And this is one place you can say that for Interface
Builder, to make sure that we present warnings for you

00:31:12.410 --> 00:31:18.100
when you're doing things that don't make sense for the
current target or current OS that you're targeting.

00:31:18.100 --> 00:31:20.400
And there's other things in here.

00:31:20.400 --> 00:31:24.900
If you want to know what those are,
please take a look at our documentation.

00:31:24.900 --> 00:31:28.260
The last inspector is the Quick Help Inspector.

00:31:28.260 --> 00:31:35.050
With Interface Builder as a part of Xcode 4, we can
bring you documentation right to your fingertips.

00:31:35.050 --> 00:31:39.590
No matter what object I have selected,
I can get documentation for that object.

00:31:39.590 --> 00:31:44.400
I can see where it's declared, an abstract on how to use it.

00:31:44.400 --> 00:31:50.970
I can even get sample code from right within Xcode to jump
to the object that I'm interested in and see how it's used.

00:31:50.970 --> 00:31:57.510
And I can jump right to the documentation just
by clicking on UITextView class reference.

00:31:57.510 --> 00:32:02.430
[ Applause ]

00:32:02.430 --> 00:32:06.480
So Quick Help is documentation at your fingertips.

00:32:06.480 --> 00:32:11.390
All right, so that's just a really brief,
high-level look at Interface Builder in Xcode 4.

00:32:11.390 --> 00:32:15.950
And now we're going to go back to
slides and talk about something else.

00:32:15.950 --> 00:32:20.210
So let's just recap one more time before I
jump into what's next what you guys just saw.

00:32:20.210 --> 00:32:25.290
So you can look at the structure of your Interface
Builder document through the Dock or the outline view

00:32:25.290 --> 00:32:29.190
or the jump bar and quickly jump to what you need to get to.

00:32:29.190 --> 00:32:36.360
The design canvas is an infinite scrolling canvas to allow
you to see the interface that you're working on all the time

00:32:36.360 --> 00:32:40.630
and arrange objects how you want to
arrange them in your working area.

00:32:40.630 --> 00:32:44.110
Our inspectors allow you to modify
attributes of the objects,

00:32:44.110 --> 00:32:47.890
and will also bring you documentation
right to your fingertips.

00:32:47.890 --> 00:32:53.910
And finally, you can use the objects and media tab
to add new Interface Builder objects and add media

00:32:53.910 --> 00:32:57.170
to existing objects or directly to your interfaces.

00:32:57.170 --> 00:33:00.540
All right, so that's a look at Interface Builder.

00:33:00.540 --> 00:33:04.070
The next thing I want to talk about is
what the integration of Interface Builder

00:33:04.070 --> 00:33:08.840
into Xcode means when it comes to making connections.

00:33:08.840 --> 00:33:14.450
With Interface Builder as a part of Xcode 4, we now
have unprecedented knowledge about your source code.

00:33:14.450 --> 00:33:17.790
And I think we've taken advantage of that with Xcode 4.

00:33:17.790 --> 00:33:22.560
Before I jump into that, though, I want to take
a second and talk about a particular object

00:33:22.560 --> 00:33:26.940
that often can be very challenging to get right.

00:33:26.940 --> 00:33:30.640
And once you understand this object, it's
kind of the lynchpin of Interface Builder.

00:33:30.640 --> 00:33:33.600
Once you get it, everything else just kind of clicks.

00:33:33.600 --> 00:33:37.040
So let's take our placeholders, and
we're going to look at File's Owner.

00:33:37.040 --> 00:33:43.790
What exactly is File's Owner and how
do you use it and take advantage of it?

00:33:43.790 --> 00:33:47.850
When you save your Interface Builder
document, you're just saving bytes

00:33:47.850 --> 00:33:50.870
to your hard drive, and you're running applications.

00:33:50.870 --> 00:33:55.350
Some object has to take the bytes of the
disc and actually create your interface

00:33:55.350 --> 00:33:59.720
and insert it into the rest of your object graph.

00:33:59.720 --> 00:34:02.850
Now, there are particular classes that
are very good at reading bytes off a disc

00:34:02.850 --> 00:34:06.030
and actually creating these objects and will use those.

00:34:06.030 --> 00:34:12.800
But the object that says, hey, go and actually
instantiate this NIB file is called the File's Owner.

00:34:12.800 --> 00:34:16.620
Because it creates the NIB file,
it's not actually in your NIB file.

00:34:16.620 --> 00:34:22.380
As I've been saying, it's a proxy object inside of
your Interface Builder document that you can reference.

00:34:22.380 --> 00:34:26.260
And at runtime, the actual instance gets filled in.

00:34:26.260 --> 00:34:31.840
Now, what's most often the case is that this
object is one of your custom controller classes.

00:34:31.840 --> 00:34:39.220
If you've got a subclass of UI View Controller, for
example, it would be your UI View Controller subclass.

00:34:39.220 --> 00:34:46.450
So as I said, there are classes that actually are
in charge of instantiating the actual NIB file.

00:34:46.450 --> 00:34:50.820
And it depends on which platform
you're on, which class you'll use.

00:34:50.820 --> 00:34:53.850
For example, on Mac OS X, you'll use NSNib.

00:34:53.850 --> 00:34:57.620
On iOS, there's a new class, as of iOS 4, called UINib.

00:34:57.620 --> 00:35:03.050
Now, both NSNib and UINib are special,
because what they'll do is automatic caching

00:35:03.050 --> 00:35:06.290
of Interface Builder documents as they're loaded in.

00:35:06.290 --> 00:35:12.420
So let's say, for example, you have a UI Table View
Controller and you have a custom cell and you want to load

00:35:12.420 --> 00:35:18.750
that cell into your table view and use
it as the cell for your table view.

00:35:18.750 --> 00:35:25.400
So one way to do this would be every single time you
dequeue a new cell, you call NSBundle, load NIB name,

00:35:25.400 --> 00:35:27.930
and you give it your NIB name, and you load in your cell.

00:35:27.930 --> 00:35:32.420
However, each time you call that, you're actually
going to the hard drive and instantiating

00:35:32.420 --> 00:35:34.690
that NIB file over and over and over again.

00:35:34.690 --> 00:35:37.930
With UINib, you go to the disc only when it needs to.

00:35:37.930 --> 00:35:42.810
And the rest of the time, it keeps that Interface
Builder document, that NIB file in memory.

00:35:42.810 --> 00:35:48.270
So as you ask for it over and over and over again, it's
actually only coming out of memory and not going to disc.

00:35:48.270 --> 00:35:52.100
Now, as my colleagues, Barry and
Rob, showed yesterday in their demo,

00:35:52.100 --> 00:35:56.220
this can have really, really drastic
increases in performance.

00:35:56.220 --> 00:36:03.250
And so we highly recommend that if you guys are loading
table view cells, for example, for a Table View Controller

00:36:03.250 --> 00:36:09.560
from a NIB file, the transition to using UINib,
as you'll see drastic performance increases,

00:36:09.560 --> 00:36:12.630
actually over two times, as good performance.

00:36:12.630 --> 00:36:16.260
And if you're on either platform, of
course, you can always use NSBundle.

00:36:16.260 --> 00:36:22.290
And there's different methods for each
platform to load your NIB file, as well.

00:36:22.290 --> 00:36:28.930
Each one of these classes has an instance method or a class
method for actually calling to instantiate a NIB file.

00:36:28.930 --> 00:36:30.390
And it takes an argument.

00:36:30.390 --> 00:36:32.810
And that argument is called owner.

00:36:32.810 --> 00:36:37.780
And this is the actual instance of the
File's Owner that's going to get filled in.

00:36:37.780 --> 00:36:40.780
So like I said, you have your UI View Controller subclass.

00:36:40.780 --> 00:36:44.510
And it's going to use UINib, for
example, to load that NIB file.

00:36:44.510 --> 00:36:49.490
And to set that File's Owner, it's going
to pass itself in as that owner argument.

00:36:49.490 --> 00:36:51.080
Let me show you an example.

00:36:51.080 --> 00:36:56.250
So here's my UI application running.

00:36:56.250 --> 00:37:00.140
And this is just after I've tapped it on the Home screen.

00:37:00.140 --> 00:37:03.920
And it's going to load in that main window NIB file,

00:37:03.920 --> 00:37:08.650
and it's going to do something along
the lines of NSBundle, load NIB name.

00:37:08.650 --> 00:37:13.500
And then you can see that owner argument,
it's going to pass itself in as the owner.

00:37:13.500 --> 00:37:15.920
So there's my NIB file.

00:37:15.920 --> 00:37:20.510
And the contents of that are going to
be my app delegate, my main window,

00:37:20.510 --> 00:37:23.680
and then some View Controller that
I'm going to add to my window.

00:37:23.680 --> 00:37:28.310
And then, of course, is that File's Owner proxy object.

00:37:28.310 --> 00:37:36.120
Now, we know that UIApplication has that delegate
outlet that is set for you in your main window NIB file.

00:37:36.120 --> 00:37:38.340
And I'm going to show you how that
gets connected at runtime.

00:37:38.340 --> 00:37:45.210
All right, so UIApplication is calling on
NSBundle, in this case, to load up that main window.

00:37:45.210 --> 00:37:50.290
So File's Owner becomes the application instance itself.

00:37:50.290 --> 00:37:57.030
And when it does that, UINib or the other NIB-loading
classes will then make those connections for you.

00:37:57.030 --> 00:38:01.890
So the connection that we made in Interface Builder
for the delegate, for our app delegate in main window,

00:38:01.890 --> 00:38:06.030
will get connected to the exact
object that I need to at runtime.

00:38:06.030 --> 00:38:10.810
And now you can see that our interface
is now grafted into our object graph.

00:38:10.810 --> 00:38:12.530
Well, let's look at a second example.

00:38:12.530 --> 00:38:17.440
So we have that Root View Controller, and we're going to
say, hey, View Controller, go add your view to our window.

00:38:17.440 --> 00:38:22.210
Again, the View Controller has a view,
a NIB file, has a view inside of it.

00:38:22.210 --> 00:38:27.360
And again, it's going to call something like NSBundle
or UINib, load NIB name to the name of the NIB,

00:38:27.360 --> 00:38:31.960
and then it's going to pass itself in as the owner, as well.

00:38:31.960 --> 00:38:34.950
You can see looking inside of the View Controller NIB file,

00:38:34.950 --> 00:38:39.900
we have that File's Owner placeholder
and the actual view itself.

00:38:39.900 --> 00:38:45.150
UI View Controllers and NS View Controllers have
an outlet called view that connects to the view

00:38:45.150 --> 00:38:47.900
that the View Controller is going to be in charge of.

00:38:47.900 --> 00:38:54.410
So when it gets loaded, you can see that the File's Owner is
the View Controller, and it makes the connection at runtime.

00:38:54.410 --> 00:38:59.390
And once again, our view is now in to our object graph.

00:38:59.390 --> 00:39:05.810
Because you have your code that's loading your
interface, and you're doing it through File's Owner,

00:39:05.810 --> 00:39:12.470
the File's Owner really becomes the conduit between
your interface and the rest of the object graph.

00:39:12.470 --> 00:39:17.640
An Interface Builder document by itself is
not connected with the rest of your objects.

00:39:17.640 --> 00:39:22.370
But through File's Owner and through
connections, you can access the objects that are

00:39:22.370 --> 00:39:25.180
in the rest of your object graph at runtime.

00:39:25.180 --> 00:39:29.110
And that's the role of the File's Owner.

00:39:29.110 --> 00:39:31.020
Okay, so now I want to do another demo.

00:39:31.020 --> 00:39:33.420
As I said, this session is demo-heavy.

00:39:33.420 --> 00:39:38.550
So for those of you that are familiar with Interface
Builder 3, you know that are three different ways

00:39:38.550 --> 00:39:41.600
of making connections within Interface Builder.

00:39:41.600 --> 00:39:45.760
First of all, you guys can use the Connection HUD,
which is that little panel that pops up that allows me

00:39:45.760 --> 00:39:50.380
to make connections, I can use the Connections
Inspector, which I've already shown.

00:39:50.380 --> 00:39:56.300
Or third of all, I can hit the control key and
drag directly between objects to make connections.

00:39:56.300 --> 00:40:02.150
With Xcode 4, all those same methods are available,
and we've made them just as easy as ever before.

00:40:02.150 --> 00:40:06.230
So I need to connect up all the
objects here in my interface,

00:40:06.230 --> 00:40:09.880
and I want to pick up this connect up this add banner view.

00:40:09.880 --> 00:40:14.470
So I'm going to go ahead and right click
on my File's Owner and show you method one

00:40:14.470 --> 00:40:17.540
of making connections using the Connections HUD.

00:40:17.540 --> 00:40:19.330
So there's my banner view outlet.

00:40:19.330 --> 00:40:24.120
I can just click and drag and connect it.

00:40:24.120 --> 00:40:28.130
Now, as I'm making this connection, you can
see it's not letting me select other objects

00:40:28.130 --> 00:40:29.510
that aren't add banner views.

00:40:29.510 --> 00:40:33.740
And so Interface Builder will do automatic
validation of where you're dropping to make sure

00:40:33.740 --> 00:40:40.040
that the connection makes sense given the type of the
outlet and the type of the object you're dropping onto.

00:40:40.040 --> 00:40:45.950
I can also select File's Owner and
go up to the Connections Inspector,

00:40:45.950 --> 00:40:48.680
and you can see I see the same things as the Connection HUD.

00:40:48.680 --> 00:40:55.790
I can also delete actions or delete outlets and actions, I
can see what they are, and, of course, I can remake them.

00:40:55.790 --> 00:41:01.300
So those are methods one and two of making
connections just as easy as in Interface Builder 3.

00:41:01.300 --> 00:41:08.030
I can also use control drag to drag directly
from an object to another object in my code.

00:41:08.030 --> 00:41:12.050
So I'm going to connect up to this font
size slider and hold down my control key

00:41:12.050 --> 00:41:18.280
and drag over to File's Owner,
and I can do change font size.

00:41:18.280 --> 00:41:23.160
Really, really easy to make connections
between objects in Interface Builder.

00:41:23.160 --> 00:41:24.710
Now, I posed this question earlier.

00:41:24.710 --> 00:41:26.270
Why do we make connections?

00:41:26.270 --> 00:41:31.160
And the answer is that we want to
connect our interface to our code.

00:41:31.160 --> 00:41:33.390
So I want to see my code.

00:41:33.390 --> 00:41:36.460
The Xcode Assistant is the right tool for this job.

00:41:36.460 --> 00:41:43.140
So I'm going to go ahead and open up to Xcode
Assistant by clicking the second editor right here.

00:41:43.140 --> 00:41:45.870
And now I'm using the Xcode Assistant.

00:41:45.870 --> 00:41:53.440
And you can see that my interface code, and the rest of my
code, is right next to the interface that I'm working with.

00:41:53.440 --> 00:42:00.660
Okay, so every different Xcode Assistant, whether you're
working with Source Code or Core Data or Interface Builder,

00:42:00.660 --> 00:42:04.710
there's a different set of categories
for related content that you can see.

00:42:04.710 --> 00:42:06.850
Let me explain what Interface Builders are.

00:42:06.850 --> 00:42:09.490
First of all is the top-level objects.

00:42:09.490 --> 00:42:15.820
The top-level objects will show me all of the classes for
my top-level objects, starting with the File's Owner, which,

00:42:15.820 --> 00:42:17.950
of course, is our recipe detail View Controller.

00:42:17.950 --> 00:42:22.510
But you can also see I have a UI view in there,
so it's showing me the UI view class, as well.

00:42:22.510 --> 00:42:27.890
Now, this particular category does
not track with my selection.

00:42:27.890 --> 00:42:33.440
As I select different objects, you can
see that it's not changing over here.

00:42:33.440 --> 00:42:37.740
And this is to make sure that you can always get
to the source code that you're most interested in.

00:42:37.740 --> 00:42:41.990
But there are particular categories
that do track with your selection.

00:42:41.990 --> 00:42:45.030
The first one is outlets.

00:42:45.030 --> 00:42:50.010
Outlets will show you all of the classes
of the objects that you have outlets to.

00:42:50.010 --> 00:42:52.590
Now, in this demo, we've made two outlets.

00:42:52.590 --> 00:42:54.750
We've made the connection to the add banner view.

00:42:54.750 --> 00:42:56.640
And, of course, the view for the View Controller.

00:42:56.640 --> 00:43:00.340
And so it's showing me both of those classes right there.

00:43:00.340 --> 00:43:04.380
The second category that tracks with
selection is, of course, the class itself.

00:43:04.380 --> 00:43:10.480
This is just a custom class or the original
class of the object that I have selected.

00:43:10.480 --> 00:43:15.670
And you can see, as I change the selection,
it's going to change the class for me.

00:43:15.670 --> 00:43:19.150
The third category is sent actions.

00:43:19.150 --> 00:43:25.230
And this will show me all of the
classes that I have sent actions to.

00:43:25.230 --> 00:43:30.020
We take it a step farther, though, and we not only
show you the class, but we actually show you the action

00:43:30.020 --> 00:43:34.140
that you've connected to directly in your source code.

00:43:34.140 --> 00:43:39.200
[ Applause ]

00:43:39.200 --> 00:43:41.960
The same thing works with outlets.

00:43:41.960 --> 00:43:47.640
If I select this add banner view, I can go up and
select the last category here, referencing outlets.

00:43:47.640 --> 00:43:55.690
And, again, it does not show me just the class that has
an outlet to me, but it actually shows me the outlet

00:43:55.690 --> 00:44:00.520
that I'm connected to selected right there in code.

00:44:01.750 --> 00:44:05.360
The last category is called Automatic.

00:44:05.360 --> 00:44:10.880
Automatic is another one of these
selection-tracking assistant modes.

00:44:10.880 --> 00:44:15.820
What this does is it picks the correct
related data that we think is most interesting

00:44:15.820 --> 00:44:19.260
or most relevant for the object that you have selected.

00:44:19.260 --> 00:44:21.830
So, for example, I have this add banner view selected.

00:44:21.830 --> 00:44:26.550
This recipe detail controller has an outlet
to me, so that's a great choice to show here.

00:44:26.550 --> 00:44:31.390
If I select the slider, it says, well, you have an action
that you're sending to it, so I'm going to show that.

00:44:31.390 --> 00:44:35.490
And then for other things like File's
Owner, it will just show me the class.

00:44:35.490 --> 00:44:41.240
So Automatic will help you see exactly what it most
pertinent for the object that you have selected.

00:44:41.240 --> 00:44:46.400
Now, as I said earlier, Xcode and
Interface Builder are integrated now.

00:44:46.400 --> 00:44:49.970
And so we have unprecedented knowledge
about your source code.

00:44:49.970 --> 00:44:53.110
So I can just go into my source
code right next to my interface,

00:44:53.110 --> 00:44:56.640
and I want to say, I want to add an outlet for that slider.

00:44:56.640 --> 00:45:00.920
So I can just go in here and type in UI slider.

00:45:00.920 --> 00:45:04.820
And this is my font size slider.

00:45:04.820 --> 00:45:16.860
I can save the file, go back to Interface Builder, and I can
just control drag from File's Owner and connect my slider.

00:45:16.860 --> 00:45:22.350
Very, very quick and easy with source code
right there and interface right next to it.

00:45:22.350 --> 00:45:27.770
But we've taken it a step farther, and we think
that we can make it even easier to make connections.

00:45:27.770 --> 00:45:32.130
Instead of having to think about which
objects to go through to make my connections,

00:45:32.130 --> 00:45:34.910
wouldn't it be great if I could just
connect right to my source code?

00:45:34.910 --> 00:45:36.900
It's right there.

00:45:36.900 --> 00:45:41.460
Well, I haven't yet connected my outlet for this UITextView.

00:45:41.460 --> 00:45:49.380
So I can make the outlet by holding the control key,
clicking on UITextView, dragging over into my source code

00:45:49.380 --> 00:45:54.510
and making the connection to my
recipe steps outlet in one fell swoop.

00:45:54.510 --> 00:46:00.690
[ Applause ]

00:46:00.690 --> 00:46:03.280
But I can make it even easier.

00:46:03.280 --> 00:46:08.750
I might not have made an outlet yet for this image
view, for example, with the tasty image of steak.

00:46:08.750 --> 00:46:13.410
So I'm going to hold down the control key and drag over.

00:46:13.410 --> 00:46:15.600
And you can see I've got an insertion indicator.

00:46:15.600 --> 00:46:17.740
I can insert an outlet right here.

00:46:17.740 --> 00:46:23.360
I can insert an instance variable outlet,
or I can even insert a property outlet.

00:46:23.360 --> 00:46:24.700
We're going to do that.

00:46:24.700 --> 00:46:30.220
When I let go, this little panel pops up, and you
can see that I can just type in the name right here.

00:46:30.220 --> 00:46:34.730
So this is going to be my recipe image view.

00:46:34.730 --> 00:46:35.590
Hit return.

00:46:35.590 --> 00:46:37.660
It inserts the code and makes the connection.

00:46:37.660 --> 00:46:38.260
[ Applause ]

00:46:38.260 --> 00:46:49.680
And we feel this is a really easy way to think
about your interface right next to your source code.

00:46:49.680 --> 00:46:50.930
It's the same thing.

00:46:50.930 --> 00:46:55.770
All right, now, let me be clear about one thing real quick.

00:46:55.770 --> 00:47:01.300
When you insert property outlets,
sometimes based upon the different settings

00:47:01.300 --> 00:47:04.130
in your project, you still need to do a few more steps.

00:47:04.130 --> 00:47:09.580
So, for example, I have an iOS project, and
I'm going to target, let's just say, 3.0.

00:47:09.580 --> 00:47:15.610
So I have properties, but I still need to synthesize
my property, and I need to clean up after myself.

00:47:15.610 --> 00:47:22.380
So I'm going to switch top-level objects over
to manual, and just switch to my implementation.

00:47:22.380 --> 00:47:29.130
So we're going to synthesize that image view I just added,
image view, and you can see it's auto completing for me.

00:47:29.130 --> 00:47:31.970
It helps to hit return.

00:47:31.970 --> 00:47:36.550
And then I can also clean up after myself.

00:47:36.550 --> 00:47:41.430
The recipe image view, release.

00:47:41.430 --> 00:47:45.930
Now, again, depending on the different settings of
your project, you might not have to do any work.

00:47:45.930 --> 00:47:51.180
For example, if you're on Mac OS X, running under
a garbage collection with the new non-fragile ABI,

00:47:51.180 --> 00:47:55.230
you don't have to synthesize or clean up after yourself.

00:47:55.230 --> 00:47:59.450
But for most cases, you'll at least have
to clean up after yourself in Dealloc.

00:47:59.450 --> 00:48:03.950
Or if you're targeting not iOS 4, and
you're not using the non-fragile ABI,

00:48:03.950 --> 00:48:08.100
you'll need to actually synthesize your property, as well.

00:48:08.100 --> 00:48:12.910
Okay, so I want to insert now one more thing to
do, and that's, as I change that font slider,

00:48:12.910 --> 00:48:17.580
I want to insert the code to change the font size.

00:48:17.580 --> 00:48:21.850
So driving the source code doesn't just work for .h files.

00:48:21.850 --> 00:48:23.590
It works for .m too.

00:48:23.590 --> 00:48:26.130
I can hit cold control, drag from the slider.

00:48:26.130 --> 00:48:29.320
Again, I've got an insertion indicator for my action.

00:48:29.320 --> 00:48:34.370
I let go and I'm going to say change font size.

00:48:34.370 --> 00:48:38.320
Hit return and we insert the code and
make the connection automatically.

00:48:38.320 --> 00:48:43.340
[ Applause ]

00:48:43.340 --> 00:48:47.000
And so now I'm ready to go ahead
and just start writing my code.

00:48:47.000 --> 00:48:50.340
And change font size.

00:48:50.340 --> 00:48:56.770
So it's very, very easy to have your source code open,
drag in and create outlets, switch over to implementation

00:48:56.770 --> 00:49:03.040
and drag in actions, and you're connected and ready
to go faster than you've ever been able to before.

00:49:03.040 --> 00:49:05.350
Okay, so let's recap what we just saw on this demo.

00:49:05.350 --> 00:49:10.250
The Xcode Assistant will show you your
source code right next to your interface.

00:49:10.250 --> 00:49:15.580
And based upon which category you have the Assistant
in, or which mode, you can see different types

00:49:15.580 --> 00:49:20.250
of related content based upon your selection or your
top-level objects, so that your source code, again,

00:49:20.250 --> 00:49:24.290
is not separated from your interface,
they're right there next to each other.

00:49:24.290 --> 00:49:30.890
We make connections to bridge objects and to
bridge between our source code and our interface.

00:49:30.890 --> 00:49:35.440
With new with Xcode 4, we've made it
easier than ever to connect interface

00:49:35.440 --> 00:49:39.910
to source code using the drag to source code method.

00:49:39.910 --> 00:49:46.330
You just hold down your control key, drag from an Interface
Builder object, and you can insert source code right there.

00:49:46.330 --> 00:49:53.860
All right, so today we've taken a look at
Interface Builder, now a part of Xcode 4,

00:49:53.860 --> 00:49:59.570
and gone pretty much across the entire app looking at
structures and inspectors and libraries and what's new.

00:49:59.570 --> 00:50:04.010
And, in particular, we've looked at what this
means for you guys in terms of making connections

00:50:04.010 --> 00:50:08.030
to source code and how easy it is now with Xcode 4.

00:50:08.030 --> 00:50:13.290
If you want more information, you can always
contact our Evangelist, Michael Jurewitz.

00:50:13.290 --> 00:50:18.000
You can also check out our Dev
Forums online at devforums.apple.com.

00:50:18.000 --> 00:50:20.040
And you can get all kinds of help on there.

00:50:20.040 --> 00:50:22.690
As engineers, we actually do look
at those, so we encourage you

00:50:22.690 --> 00:50:25.490
to post your questions, and we'll
be on there to answer those.

00:50:25.490 --> 00:50:29.410
For those of you watching the videos right now, hi.

00:50:29.410 --> 00:50:32.680
And you might want to check out some related sessions.

00:50:32.680 --> 00:50:39.410
There is one yesterday in the mission about designing
applications for iPhone and iPad using Interface Builder.

00:50:39.410 --> 00:50:41.030
I encourage you to check that out.

