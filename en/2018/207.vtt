WEBVTT

00:00:07.516 --> 00:00:16.500 A:middle
[ Music ]

00:00:21.516 --> 00:00:26.896 A:middle
[ Applause ]

00:00:27.396 --> 00:00:29.296 A:middle
&gt;&gt; Hello everyone.

00:00:29.296 --> 00:00:30.566 A:middle
My name is John Wilander.

00:00:30.566 --> 00:00:32.216 A:middle
I am an engineer on the Safari

00:00:32.216 --> 00:00:35.056 A:middle
and WebKit team and I'm here to

00:00:35.056 --> 00:00:37.006 A:middle
present to you today how to

00:00:37.006 --> 00:00:38.356 A:middle
secure web content.

00:00:38.846 --> 00:00:42.076 A:middle
Or, as I like to call it, take

00:00:42.076 --> 00:00:43.236 A:middle
the Swede's advice.

00:00:45.016 --> 00:00:46.476 A:middle
So, you might be asking

00:00:46.476 --> 00:00:48.796 A:middle
yourself, web content, that's a

00:00:48.796 --> 00:00:49.956 A:middle
pretty broad term.

00:00:50.296 --> 00:00:51.686 A:middle
Is this session really for me?

00:00:52.586 --> 00:00:53.846 A:middle
Yes, it is for you.

00:00:54.336 --> 00:00:57.176 A:middle
To start off, apps use tons of

00:00:57.176 --> 00:00:57.826 A:middle
web content.

00:00:58.286 --> 00:01:00.566 A:middle
It may be used for ads, login

00:00:58.286 --> 00:01:00.566 A:middle
It may be used for ads, login

00:01:00.566 --> 00:01:02.636 A:middle
flows, splash screens.

00:01:03.066 --> 00:01:04.325 A:middle
You might be using Safari View

00:01:04.325 --> 00:01:05.876 A:middle
Controller to-- for parts of

00:01:05.876 --> 00:01:06.236 A:middle
your app.

00:01:06.766 --> 00:01:08.146 A:middle
You might have whole parts of

00:01:08.146 --> 00:01:10.246 A:middle
your UI rendered in a web view.

00:01:11.146 --> 00:01:12.756 A:middle
You might also have companion

00:01:12.756 --> 00:01:14.306 A:middle
web apps that are supposed to be

00:01:14.306 --> 00:01:16.456 A:middle
rendered in a web browser and

00:01:16.456 --> 00:01:18.276 A:middle
that are sharing content or

00:01:18.696 --> 00:01:20.806 A:middle
providing a joint experience

00:01:20.806 --> 00:01:22.226 A:middle
across apps and web apps.

00:01:22.786 --> 00:01:24.506 A:middle
So, really, yes, the session is

00:01:24.506 --> 00:01:24.876 A:middle
for you.

00:01:25.586 --> 00:01:26.986 A:middle
And security is important.

00:01:27.656 --> 00:01:28.936 A:middle
You want to stay in business?

00:01:29.096 --> 00:01:30.096 A:middle
You want to provide the best

00:01:30.096 --> 00:01:31.026 A:middle
customer experience.

00:01:31.296 --> 00:01:32.536 A:middle
You want to be ahead of your

00:01:32.656 --> 00:01:33.346 A:middle
competition.

00:01:33.926 --> 00:01:35.476 A:middle
You want to get this right so

00:01:35.476 --> 00:01:37.176 A:middle
that when they don't they are

00:01:37.176 --> 00:01:38.746 A:middle
the ones to fall, you stay in

00:01:38.746 --> 00:01:39.086 A:middle
the market.

00:01:40.246 --> 00:01:41.806 A:middle
OK. What are we going to cover

00:01:41.806 --> 00:01:42.086 A:middle
today?

00:01:42.726 --> 00:01:44.986 A:middle
We're going to have a look at

00:01:45.236 --> 00:01:47.506 A:middle
first securing your transports.

00:01:47.756 --> 00:01:49.786 A:middle
This is just a brief mentioning

00:01:49.786 --> 00:01:51.936 A:middle
from me about basics that we

00:01:51.936 --> 00:01:53.536 A:middle
need to do before we do the

00:01:53.536 --> 00:01:53.876 A:middle
rest.

00:01:54.406 --> 00:01:55.136 A:middle
If you don't secure your

00:01:55.136 --> 00:01:56.786 A:middle
transports, most other bets are

00:01:56.786 --> 00:01:57.036 A:middle
off.

00:01:57.926 --> 00:01:59.106 A:middle
Then we'll go into a look at

00:01:59.336 --> 00:02:00.646 A:middle
cross-origin lockdown.

00:01:59.336 --> 00:02:00.646 A:middle
cross-origin lockdown.

00:02:01.146 --> 00:02:03.976 A:middle
This is basically me showing you

00:02:03.976 --> 00:02:05.426 A:middle
a bunch of technologies that are

00:02:05.426 --> 00:02:07.856 A:middle
available to you in WebKit and

00:02:07.856 --> 00:02:09.606 A:middle
in browser engines across the

00:02:09.606 --> 00:02:12.426 A:middle
line that can help you get into

00:02:12.726 --> 00:02:14.776 A:middle
more secure defaults for your

00:02:14.776 --> 00:02:15.476 A:middle
web content.

00:02:16.056 --> 00:02:17.396 A:middle
We would like to opt in for you,

00:02:17.396 --> 00:02:19.186 A:middle
but we can't test your sites for

00:02:19.186 --> 00:02:21.636 A:middle
you or your web content for you,

00:02:21.636 --> 00:02:23.346 A:middle
so we need you to opt in.

00:02:23.946 --> 00:02:25.686 A:middle
And then, as a motivation, if

00:02:25.686 --> 00:02:27.056 A:middle
you feel, well, why should I

00:02:27.056 --> 00:02:28.326 A:middle
care about these security

00:02:28.326 --> 00:02:30.226 A:middle
mechanisms, I'll actually show

00:02:30.226 --> 00:02:32.386 A:middle
you some attack scenarios and

00:02:32.386 --> 00:02:34.546 A:middle
map them back to the security

00:02:34.616 --> 00:02:36.026 A:middle
technologies so that you

00:02:36.026 --> 00:02:37.716 A:middle
understand where they come into

00:02:37.776 --> 00:02:39.746 A:middle
play and how they can defend

00:02:39.746 --> 00:02:40.596 A:middle
your web content.

00:02:41.266 --> 00:02:42.966 A:middle
So, let's head right in to

00:02:42.966 --> 00:02:44.476 A:middle
securing your transports.

00:02:45.096 --> 00:02:46.636 A:middle
This one should be familiar to

00:02:46.636 --> 00:02:46.876 A:middle
you.

00:02:47.486 --> 00:02:49.276 A:middle
So, this is about moving to

00:02:49.276 --> 00:02:51.196 A:middle
HTTPS and WSS.

00:02:52.286 --> 00:02:54.376 A:middle
WSS is for web sockets.

00:02:55.526 --> 00:02:58.306 A:middle
Now, just the fact that HTTP and

00:02:58.306 --> 00:03:00.386 A:middle
WS, the plain text equivalents,

00:02:58.306 --> 00:03:00.386 A:middle
WS, the plain text equivalents,

00:03:00.386 --> 00:03:02.916 A:middle
still exist is not an excuse to

00:03:02.986 --> 00:03:03.796 A:middle
keep using them.

00:03:04.296 --> 00:03:05.686 A:middle
You need to move to secure

00:03:05.686 --> 00:03:07.866 A:middle
transports because that's what's

00:03:08.016 --> 00:03:09.936 A:middle
going to ensure that the content

00:03:09.936 --> 00:03:11.396 A:middle
that you are rendering in a

00:03:11.396 --> 00:03:13.686 A:middle
browser or in your app comes

00:03:13.686 --> 00:03:15.606 A:middle
from the server you expect it to

00:03:15.606 --> 00:03:17.776 A:middle
come from and no one has fiddled

00:03:17.776 --> 00:03:19.036 A:middle
around with the content in

00:03:19.036 --> 00:03:19.696 A:middle
transport.

00:03:20.316 --> 00:03:22.876 A:middle
So, moving to HTTPS for your

00:03:22.876 --> 00:03:23.576 A:middle
main content.

00:03:23.946 --> 00:03:24.626 A:middle
There are a couple of

00:03:24.626 --> 00:03:26.156 A:middle
technologies that can help you

00:03:26.156 --> 00:03:26.636 A:middle
get there.

00:03:27.496 --> 00:03:28.756 A:middle
First on your to-do list--

00:03:29.176 --> 00:03:31.116 A:middle
except for just moving to HTTPS

00:03:31.256 --> 00:03:33.526 A:middle
in general-- is strict transport

00:03:33.526 --> 00:03:35.236 A:middle
security or HSTS.

00:03:35.236 --> 00:03:39.076 A:middle
This is an HTTP response header

00:03:39.076 --> 00:03:40.636 A:middle
you can send to the rendering

00:03:40.636 --> 00:03:43.136 A:middle
engine, such as WebKit, and tell

00:03:43.136 --> 00:03:45.666 A:middle
it, hey, my domain should always

00:03:45.666 --> 00:03:47.296 A:middle
be loaded over HTTPS.

00:03:47.816 --> 00:03:50.636 A:middle
If there's ever an HTTP request

00:03:50.636 --> 00:03:52.436 A:middle
from me, just automatically

00:03:52.436 --> 00:03:54.306 A:middle
upgrade it for me to HTTPS.

00:03:54.616 --> 00:03:56.066 A:middle
Never making plain text

00:03:56.206 --> 00:03:57.486 A:middle
connections to my server,

00:03:57.606 --> 00:03:57.996 A:middle
please.

00:03:59.216 --> 00:04:00.756 A:middle
And this is also a thing you can

00:03:59.216 --> 00:04:00.756 A:middle
And this is also a thing you can

00:04:00.756 --> 00:04:02.486 A:middle
tell the rendering engine for

00:04:02.486 --> 00:04:03.796 A:middle
how long it should remember

00:04:03.796 --> 00:04:04.106 A:middle
this.

00:04:04.336 --> 00:04:05.916 A:middle
So, typically at least half a

00:04:05.916 --> 00:04:06.956 A:middle
year ahead in time.

00:04:08.426 --> 00:04:09.846 A:middle
Now, you might also be loading

00:04:09.846 --> 00:04:11.546 A:middle
content off of other servers,

00:04:11.546 --> 00:04:12.966 A:middle
servers that are not under your

00:04:12.966 --> 00:04:14.536 A:middle
control, not your domain name.

00:04:15.216 --> 00:04:16.916 A:middle
There's also a header you can

00:04:16.916 --> 00:04:18.685 A:middle
send to the browser engine

00:04:18.685 --> 00:04:19.896 A:middle
called upgrade insecure

00:04:19.896 --> 00:04:23.036 A:middle
requests, also an HTTP response

00:04:23.036 --> 00:04:25.076 A:middle
header, which tells the browser,

00:04:25.076 --> 00:04:27.256 A:middle
hey, go ahead and upgrade all

00:04:27.256 --> 00:04:28.796 A:middle
those other links to content

00:04:28.826 --> 00:04:31.086 A:middle
too, even if it's not from my

00:04:31.086 --> 00:04:33.126 A:middle
server and even if they have not

00:04:33.126 --> 00:04:35.406 A:middle
set strict transport security.

00:04:36.356 --> 00:04:38.476 A:middle
So, those two things that will

00:04:38.556 --> 00:04:40.106 A:middle
automatically upgrade to secure

00:04:40.106 --> 00:04:40.836 A:middle
transports.

00:04:42.166 --> 00:04:43.516 A:middle
Another thing you need to do is

00:04:43.516 --> 00:04:45.206 A:middle
make sure that you mark your

00:04:45.266 --> 00:04:46.646 A:middle
cookies secure.

00:04:46.866 --> 00:04:48.346 A:middle
This is an attribute you add in

00:04:48.346 --> 00:04:49.486 A:middle
your set cookie header,

00:04:49.846 --> 00:04:51.606 A:middle
semi-colon secure.

00:04:52.226 --> 00:04:54.376 A:middle
This means that you're telling

00:04:54.476 --> 00:04:56.666 A:middle
the network stack this cookie

00:04:56.666 --> 00:04:58.716 A:middle
should only ever be sent over a

00:04:58.716 --> 00:04:59.716 A:middle
secure transport.

00:05:00.086 --> 00:05:01.686 A:middle
If there for some reason is a

00:05:01.766 --> 00:05:03.696 A:middle
plain text request for my server

00:05:03.936 --> 00:05:05.776 A:middle
or to my server, don't send the

00:05:05.776 --> 00:05:06.066 A:middle
cookie.

00:05:06.836 --> 00:05:08.336 A:middle
And, since you should be using

00:05:08.336 --> 00:05:10.186 A:middle
secure transports, all of your

00:05:10.186 --> 00:05:11.606 A:middle
cookies should be marked secure.

00:05:12.606 --> 00:05:14.846 A:middle
Final-- finally on your to-do

00:05:14.846 --> 00:05:16.316 A:middle
list here for secure transports

00:05:16.346 --> 00:05:17.886 A:middle
is specific for apps.

00:05:18.476 --> 00:05:19.566 A:middle
You might have heard about app

00:05:19.566 --> 00:05:21.246 A:middle
transport security or ATS.

00:05:21.246 --> 00:05:24.266 A:middle
It is the default behavior for

00:05:24.266 --> 00:05:26.116 A:middle
iOS apps, meaning that they

00:05:26.116 --> 00:05:27.996 A:middle
should be using only secure

00:05:27.996 --> 00:05:29.436 A:middle
transports for network traffic.

00:05:30.496 --> 00:05:32.156 A:middle
Now, there is an opt out you can

00:05:32.156 --> 00:05:33.836 A:middle
have in your info p list to say,

00:05:33.836 --> 00:05:35.606 A:middle
hey, you know, for web content,

00:05:35.686 --> 00:05:37.276 A:middle
I'd still like to do insecure

00:05:37.276 --> 00:05:37.956 A:middle
requests.

00:05:38.826 --> 00:05:39.536 A:middle
Don't do that.

00:05:40.136 --> 00:05:42.276 A:middle
You should be saying no in this

00:05:42.316 --> 00:05:44.096 A:middle
info p list and specifically for

00:05:44.096 --> 00:05:45.926 A:middle
arbitrary web content loads.

00:05:46.976 --> 00:05:48.396 A:middle
OK. Now we've secured the

00:05:48.396 --> 00:05:49.066 A:middle
transport.

00:05:49.386 --> 00:05:50.136 A:middle
Let's move on.

00:05:50.476 --> 00:05:51.226 A:middle
We're now going to look at

00:05:51.316 --> 00:05:52.786 A:middle
cross-origin lockdown.

00:05:53.716 --> 00:05:54.756 A:middle
The reason why I call it

00:05:54.756 --> 00:05:57.106 A:middle
lockdown is this is really you

00:05:57.106 --> 00:06:00.276 A:middle
opting into saner, safer, more

00:05:57.106 --> 00:06:00.276 A:middle
opting into saner, safer, more

00:06:00.276 --> 00:06:02.346 A:middle
secure defaults for your web

00:06:02.376 --> 00:06:02.906 A:middle
content.

00:06:03.286 --> 00:06:05.186 A:middle
We're locking it down to more or

00:06:05.186 --> 00:06:06.306 A:middle
less what it should have been

00:06:06.306 --> 00:06:08.446 A:middle
all along and then you open up

00:06:08.446 --> 00:06:10.096 A:middle
the specific things you want to

00:06:10.876 --> 00:06:10.946 A:middle
do.

00:06:11.806 --> 00:06:13.836 A:middle
So, let's move in and look at

00:06:13.836 --> 00:06:15.376 A:middle
what are cross-origin loads

00:06:15.376 --> 00:06:15.846 A:middle
anyway.

00:06:16.186 --> 00:06:17.336 A:middle
What are we going to lock down?

00:06:18.076 --> 00:06:20.106 A:middle
Well, web technologies have this

00:06:20.216 --> 00:06:21.956 A:middle
powerful feature where you can

00:06:22.066 --> 00:06:24.036 A:middle
weave together content from

00:06:24.096 --> 00:06:25.676 A:middle
different servers and different

00:06:25.676 --> 00:06:26.266 A:middle
origins.

00:06:27.126 --> 00:06:28.586 A:middle
Different domain names, if you

00:06:28.586 --> 00:06:29.036 A:middle
so will.

00:06:30.056 --> 00:06:32.136 A:middle
An example of this is images.

00:06:32.746 --> 00:06:34.356 A:middle
You can load images from any

00:06:34.356 --> 00:06:36.746 A:middle
server on the web into your web

00:06:36.746 --> 00:06:37.586 A:middle
content and that's a

00:06:37.586 --> 00:06:38.696 A:middle
cross-origin load.

00:06:39.546 --> 00:06:41.166 A:middle
You can also load scripts from

00:06:41.166 --> 00:06:42.066 A:middle
other servers.

00:06:42.766 --> 00:06:44.696 A:middle
Interestingly, those scripts

00:06:44.886 --> 00:06:46.556 A:middle
actually execute with the same

00:06:46.556 --> 00:06:48.746 A:middle
powers and privileges as your

00:06:48.746 --> 00:06:50.636 A:middle
own scripts, so you need to be

00:06:50.636 --> 00:06:52.246 A:middle
really careful what scripts you

00:06:52.246 --> 00:06:53.926 A:middle
load off of other servers.

00:06:54.356 --> 00:06:56.426 A:middle
They more or less own your web

00:06:56.426 --> 00:06:56.996 A:middle
content.

00:06:57.286 --> 00:06:58.406 A:middle
They are executing with the same

00:06:58.406 --> 00:06:59.136 A:middle
powers as you.

00:07:00.126 --> 00:07:01.636 A:middle
And, as a third example,

00:07:01.796 --> 00:07:02.536 A:middle
iframes.

00:07:02.786 --> 00:07:05.506 A:middle
You can embed full pages from

00:07:05.506 --> 00:07:06.416 A:middle
other servers.

00:07:06.806 --> 00:07:08.246 A:middle
Cross-origin, meaning from a

00:07:08.486 --> 00:07:09.436 A:middle
different domain name.

00:07:09.926 --> 00:07:11.146 A:middle
These are three examples of

00:07:11.206 --> 00:07:12.826 A:middle
cross-origin loads.

00:07:13.386 --> 00:07:15.616 A:middle
Now, we've had a security

00:07:15.616 --> 00:07:18.046 A:middle
mechanisms-- security mechanism

00:07:18.046 --> 00:07:20.096 A:middle
on the web for over 20 years

00:07:20.146 --> 00:07:21.606 A:middle
that has provided basic

00:07:21.656 --> 00:07:22.526 A:middle
protection for these

00:07:22.836 --> 00:07:24.496 A:middle
cross-origin loads and it's

00:07:24.496 --> 00:07:26.356 A:middle
called the same-origin policy.

00:07:27.046 --> 00:07:28.586 A:middle
And it differentiates-- here

00:07:28.586 --> 00:07:30.196 A:middle
you've got these examples with

00:07:30.196 --> 00:07:31.206 A:middle
real domain names.

00:07:31.556 --> 00:07:33.956 A:middle
So, you've got the example for

00:07:33.956 --> 00:07:37.096 A:middle
loading the image, you've got a

00:07:37.226 --> 00:07:39.336 A:middle
CDN where you loaded the script,

00:07:39.916 --> 00:07:41.226 A:middle
and you may have a social

00:07:41.226 --> 00:07:42.926 A:middle
widget, an iframe, coming from

00:07:42.926 --> 00:07:44.166 A:middle
social.example here.

00:07:44.896 --> 00:07:46.856 A:middle
And, just to mention, when I say

00:07:46.856 --> 00:07:49.076 A:middle
.example it's just me being sure

00:07:49.076 --> 00:07:50.176 A:middle
that I'm not talking about real

00:07:50.176 --> 00:07:51.026 A:middle
websites here.

00:07:51.406 --> 00:07:52.666 A:middle
If it's easier for you, you can

00:07:52.666 --> 00:07:54.396 A:middle
think of it as .com or .org.

00:07:55.566 --> 00:07:56.446 A:middle
Anyway, these are the

00:07:56.446 --> 00:07:58.306 A:middle
cross-origin loads and the

00:07:58.306 --> 00:08:01.236 A:middle
same-origin policy keeps track

00:07:58.306 --> 00:08:01.236 A:middle
same-origin policy keeps track

00:08:01.236 --> 00:08:02.836 A:middle
of where did I load this image

00:08:02.836 --> 00:08:04.096 A:middle
from or where did I load this

00:08:04.096 --> 00:08:05.586 A:middle
script from, where did I load

00:08:05.586 --> 00:08:07.446 A:middle
this iframe from, so that it can

00:08:07.446 --> 00:08:08.756 A:middle
provide basic protection.

00:08:09.326 --> 00:08:12.046 A:middle
That basic protection means that

00:08:12.046 --> 00:08:14.366 A:middle
your page in this example cannot

00:08:14.366 --> 00:08:16.426 A:middle
reach into that iframe from

00:08:16.426 --> 00:08:19.266 A:middle
social.example and read its

00:08:19.266 --> 00:08:21.126 A:middle
bytes, read its contents, or

00:08:21.246 --> 00:08:22.416 A:middle
write to its contents.

00:08:22.706 --> 00:08:24.106 A:middle
The same-origin policy is

00:08:24.106 --> 00:08:25.826 A:middle
guarding, saying this part of

00:08:25.826 --> 00:08:27.066 A:middle
the page actually came from a

00:08:27.066 --> 00:08:28.626 A:middle
different server, you're not

00:08:28.626 --> 00:08:29.866 A:middle
allowed to just go straight in

00:08:29.866 --> 00:08:31.996 A:middle
there and change things or read

00:08:31.996 --> 00:08:33.366 A:middle
what the user happened to enter

00:08:33.366 --> 00:08:34.905 A:middle
into that form, for instance.

00:08:35.496 --> 00:08:37.596 A:middle
An easier way to think of the

00:08:37.596 --> 00:08:38.905 A:middle
same-origin policy is just

00:08:39.275 --> 00:08:41.166 A:middle
matching two pages, two tabs in

00:08:41.166 --> 00:08:41.696 A:middle
a browser.

00:08:42.236 --> 00:08:43.596 A:middle
One tab shouldn't be able to

00:08:43.596 --> 00:08:45.546 A:middle
just go into another tab and see

00:08:45.546 --> 00:08:46.656 A:middle
what the user's doing over

00:08:46.656 --> 00:08:47.056 A:middle
there.

00:08:47.876 --> 00:08:49.176 A:middle
It's the same-origin policy

00:08:49.746 --> 00:08:51.886 A:middle
effectively doing its job there

00:08:53.426 --> 00:08:53.500 A:middle
too.

00:08:54.726 --> 00:08:55.756 A:middle
So, the lockdown.

00:08:55.846 --> 00:08:57.306 A:middle
How do we lock this down

00:08:57.306 --> 00:08:57.806 A:middle
properly?

00:08:58.116 --> 00:08:59.116 A:middle
We've got the same-origin

00:08:59.116 --> 00:09:00.806 A:middle
policy, but it's not good

00:08:59.116 --> 00:09:00.806 A:middle
policy, but it's not good

00:09:00.806 --> 00:09:01.176 A:middle
enough.

00:09:01.546 --> 00:09:03.506 A:middle
So, you need to opt in to some

00:09:03.506 --> 00:09:04.726 A:middle
more defaults.

00:09:05.106 --> 00:09:07.016 A:middle
Starting out with subresource

00:09:07.016 --> 00:09:08.716 A:middle
integrity-- I'll go through them

00:09:08.756 --> 00:09:09.956 A:middle
and I'll mention them here.

00:09:10.536 --> 00:09:12.256 A:middle
This is just a simple change in

00:09:12.256 --> 00:09:14.006 A:middle
the markup for your script tags.

00:09:15.126 --> 00:09:16.426 A:middle
The second part is content

00:09:16.426 --> 00:09:17.376 A:middle
security policy.

00:09:17.526 --> 00:09:19.056 A:middle
This is providing a full-on

00:09:19.056 --> 00:09:20.576 A:middle
security policy for your whole

00:09:20.576 --> 00:09:22.366 A:middle
page where you can say, hey, I

00:09:22.366 --> 00:09:23.596 A:middle
only want to load scripts from

00:09:23.596 --> 00:09:24.236 A:middle
over here.

00:09:24.546 --> 00:09:25.976 A:middle
I don't want to have any frames

00:09:25.976 --> 00:09:27.596 A:middle
from other servers, and so on.

00:09:27.696 --> 00:09:28.326 A:middle
We'll look at that.

00:09:29.076 --> 00:09:30.686 A:middle
And the third category here are

00:09:30.686 --> 00:09:32.496 A:middle
simple server configurations.

00:09:32.986 --> 00:09:35.076 A:middle
These are HTTP response headers

00:09:35.136 --> 00:09:36.666 A:middle
that you send out telling the

00:09:36.666 --> 00:09:38.856 A:middle
browser engine, hey, I want more

00:09:38.856 --> 00:09:40.466 A:middle
secure defaults, I don't want

00:09:40.466 --> 00:09:42.366 A:middle
these old legacy APIs that

00:09:42.366 --> 00:09:43.496 A:middle
you've been supporting because I

00:09:43.496 --> 00:09:44.206 A:middle
don't need them.

00:09:44.426 --> 00:09:45.176 A:middle
Please help me here.

00:09:45.756 --> 00:09:47.926 A:middle
So, let's dive into it and look

00:09:47.926 --> 00:09:49.566 A:middle
at subresource integrity.

00:09:50.696 --> 00:09:52.746 A:middle
Now, this is a perfectly

00:09:52.746 --> 00:09:54.416 A:middle
plausible way of loading that

00:09:54.416 --> 00:09:55.906 A:middle
framework from the CDN, your

00:09:56.366 --> 00:09:57.826 A:middle
content delivery network.

00:09:58.826 --> 00:10:01.916 A:middle
And that script tag is going to

00:09:58.826 --> 00:10:01.916 A:middle
And that script tag is going to

00:10:01.966 --> 00:10:03.926 A:middle
just contain the URL to fetch

00:10:03.926 --> 00:10:04.666 A:middle
that script, right?

00:10:05.446 --> 00:10:06.536 A:middle
As I mentioned, you're now

00:10:06.536 --> 00:10:09.686 A:middle
relying on that CDN to provide

00:10:09.686 --> 00:10:10.956 A:middle
you with the right script that's

00:10:10.956 --> 00:10:12.546 A:middle
going to make your web content

00:10:12.546 --> 00:10:13.806 A:middle
work the way it's supposed to.

00:10:14.846 --> 00:10:16.346 A:middle
But actually, if they decide to,

00:10:16.346 --> 00:10:17.966 A:middle
you know, bump the version or if

00:10:17.966 --> 00:10:19.066 A:middle
something goes wrong on that

00:10:19.066 --> 00:10:20.296 A:middle
server, they're serving you--

00:10:20.296 --> 00:10:21.256 A:middle
they're sending you the wrong

00:10:21.256 --> 00:10:23.606 A:middle
script, your web content may be

00:10:23.606 --> 00:10:24.016 A:middle
crippled.

00:10:24.646 --> 00:10:25.896 A:middle
It may-- something may go wrong.

00:10:25.896 --> 00:10:26.986 A:middle
It might not work the way it's

00:10:26.986 --> 00:10:27.576 A:middle
supposed to.

00:10:28.026 --> 00:10:29.646 A:middle
You know what script you're

00:10:29.646 --> 00:10:31.626 A:middle
expecting, but what you're

00:10:31.626 --> 00:10:32.716 A:middle
sending out when you're just

00:10:32.716 --> 00:10:34.186 A:middle
sending a script tag like this--

00:10:35.006 --> 00:10:36.756 A:middle
looking like this-- is just

00:10:36.756 --> 00:10:39.436 A:middle
telling the browser whatever you

00:10:39.436 --> 00:10:42.176 A:middle
get back in JavaScript, execute

00:10:42.176 --> 00:10:42.336 A:middle
it.

00:10:43.036 --> 00:10:45.056 A:middle
A much better way is to say, no,

00:10:45.376 --> 00:10:46.526 A:middle
I want to make sure it's the

00:10:46.526 --> 00:10:47.986 A:middle
script I expect.

00:10:48.546 --> 00:10:49.996 A:middle
And-- but you can use the

00:10:49.996 --> 00:10:51.976 A:middle
integrity attribute in your

00:10:51.976 --> 00:10:52.766 A:middle
script tags.

00:10:53.366 --> 00:10:54.916 A:middle
In there you provide a check

00:10:54.916 --> 00:10:56.496 A:middle
sum, in this case with the

00:10:56.496 --> 00:10:59.466 A:middle
algorithm sha256, saying this is

00:10:59.466 --> 00:11:01.316 A:middle
the check sum of the script I

00:10:59.466 --> 00:11:01.316 A:middle
the check sum of the script I

00:11:01.316 --> 00:11:04.176 A:middle
expect to get from my CDN, and

00:11:04.176 --> 00:11:05.816 A:middle
only if I get something that

00:11:05.816 --> 00:11:07.946 A:middle
matches this check sum, then you

00:11:07.946 --> 00:11:08.576 A:middle
execute it.

00:11:09.266 --> 00:11:11.036 A:middle
So, the browser engine will go

00:11:11.036 --> 00:11:13.556 A:middle
through and make sure to compare

00:11:13.556 --> 00:11:15.536 A:middle
that check sum before executing

00:11:15.536 --> 00:11:15.976 A:middle
the code.

00:11:17.196 --> 00:11:18.756 A:middle
Well, what happens if it doesn't

00:11:18.756 --> 00:11:19.186 A:middle
match?

00:11:19.246 --> 00:11:21.506 A:middle
What if they bumped the version

00:11:21.506 --> 00:11:22.606 A:middle
or something went wrong and I

00:11:22.606 --> 00:11:23.406 A:middle
got the wrong script?

00:11:24.096 --> 00:11:25.846 A:middle
Now my web content doesn't work

00:11:25.846 --> 00:11:26.216 A:middle
anymore.

00:11:26.666 --> 00:11:28.056 A:middle
Well, you add a check.

00:11:28.276 --> 00:11:29.906 A:middle
In this case, you've loaded or

00:11:29.906 --> 00:11:31.266 A:middle
tried to load a framework.

00:11:31.736 --> 00:11:33.336 A:middle
You checked did the framework

00:11:33.336 --> 00:11:35.376 A:middle
load OK, do I have that object

00:11:35.376 --> 00:11:36.266 A:middle
in my dom now.

00:11:36.856 --> 00:11:39.246 A:middle
If not, go load it from my own

00:11:39.246 --> 00:11:41.516 A:middle
server which I am in control of

00:11:41.516 --> 00:11:43.366 A:middle
and I don't make changes to

00:11:43.506 --> 00:11:44.126 A:middle
willy-nilly.

00:11:44.896 --> 00:11:47.496 A:middle
That may reduce performance, but

00:11:47.496 --> 00:11:49.266 A:middle
at least you have a still

00:11:49.266 --> 00:11:50.526 A:middle
functioning web content or

00:11:50.526 --> 00:11:50.986 A:middle
website.

00:11:51.986 --> 00:11:53.336 A:middle
OK. That's sub-resource

00:11:53.336 --> 00:11:53.886 A:middle
integrity.

00:11:54.336 --> 00:11:55.696 A:middle
Let's move on to content

00:11:55.696 --> 00:11:56.866 A:middle
security policy.

00:11:57.486 --> 00:11:59.186 A:middle
I mentioned this is like setting

00:11:59.186 --> 00:12:00.616 A:middle
a policy for your page, like

00:11:59.186 --> 00:12:00.616 A:middle
a policy for your page, like

00:12:00.616 --> 00:12:02.596 A:middle
what should be allowed here, and

00:12:02.626 --> 00:12:03.876 A:middle
I actually think of it as an

00:12:03.946 --> 00:12:05.176 A:middle
architecture policy.

00:12:05.176 --> 00:12:06.856 A:middle
If you're a software engineer,

00:12:07.336 --> 00:12:08.286 A:middle
you want to keep track of your

00:12:08.286 --> 00:12:09.326 A:middle
dependencies.

00:12:09.326 --> 00:12:10.736 A:middle
What am I allowed to do here?

00:12:10.736 --> 00:12:12.306 A:middle
Who-- what can I load and what

00:12:12.346 --> 00:12:13.106 A:middle
can't I load?

00:12:14.586 --> 00:12:16.576 A:middle
So, this is again an HTTP

00:12:16.576 --> 00:12:17.766 A:middle
response header.

00:12:18.116 --> 00:12:19.386 A:middle
So, when you're sending out a

00:12:19.446 --> 00:12:21.636 A:middle
page from your server, you add

00:12:21.726 --> 00:12:23.356 A:middle
this header to the response,

00:12:23.356 --> 00:12:24.936 A:middle
saying, hey, I'm going to run

00:12:24.936 --> 00:12:26.496 A:middle
with a content security policy.

00:12:26.826 --> 00:12:28.376 A:middle
I'm going to be in control of

00:12:28.376 --> 00:12:29.736 A:middle
the content on my page.

00:12:30.626 --> 00:12:32.476 A:middle
Then you start out by saying the

00:12:32.626 --> 00:12:35.286 A:middle
default source for loading any

00:12:35.286 --> 00:12:36.856 A:middle
kind of content from remote

00:12:36.856 --> 00:12:38.956 A:middle
servers is myself.

00:12:39.476 --> 00:12:41.796 A:middle
Only load from my server by

00:12:41.796 --> 00:12:42.306 A:middle
default.

00:12:42.976 --> 00:12:44.466 A:middle
Now you've locked it down

00:12:44.466 --> 00:12:46.866 A:middle
completely and if there is any

00:12:46.866 --> 00:12:48.456 A:middle
kind of content load in the page

00:12:48.456 --> 00:12:49.956 A:middle
trying to pull something in from

00:12:49.956 --> 00:12:51.816 A:middle
a server that's not yours, it

00:12:51.816 --> 00:12:53.576 A:middle
will just be denied because

00:12:53.576 --> 00:12:56.136 A:middle
WebKit will deny that because it

00:12:56.136 --> 00:12:58.146 A:middle
doesn't match the policy you've

00:12:58.146 --> 00:12:58.426 A:middle
set.

00:12:59.716 --> 00:13:00.636 A:middle
And, as you see, I made a

00:12:59.716 --> 00:13:00.636 A:middle
And, as you see, I made a

00:13:00.636 --> 00:13:01.206 A:middle
comment there.

00:13:01.206 --> 00:13:02.016 A:middle
No inline.

00:13:02.136 --> 00:13:03.876 A:middle
That is also part of the default

00:13:03.916 --> 00:13:04.526 A:middle
behavior.

00:13:04.776 --> 00:13:06.086 A:middle
Once you set it this way, you're

00:13:06.086 --> 00:13:08.496 A:middle
also saying no inline scripting.

00:13:08.726 --> 00:13:10.726 A:middle
Only load scripts from files.

00:13:11.276 --> 00:13:12.606 A:middle
That's why I keep thinking of it

00:13:12.606 --> 00:13:14.116 A:middle
as an architecture policy

00:13:14.366 --> 00:13:15.976 A:middle
because you're separating logic

00:13:15.976 --> 00:13:17.786 A:middle
into files, separating from

00:13:17.786 --> 00:13:21.246 A:middle
markup, and separating from

00:13:21.316 --> 00:13:23.516 A:middle
styling, which are also in

00:13:23.516 --> 00:13:23.946 A:middle
files.

00:13:24.166 --> 00:13:25.046 A:middle
CSS files.

00:13:26.066 --> 00:13:29.636 A:middle
OK. Now, you wanted to load that

00:13:29.636 --> 00:13:31.686 A:middle
script from cdn.example and if

00:13:31.686 --> 00:13:33.176 A:middle
you just go with a default

00:13:33.176 --> 00:13:35.186 A:middle
source self, then that's going

00:13:35.186 --> 00:13:35.976 A:middle
to be locked down.

00:13:35.976 --> 00:13:37.116 A:middle
Right? You can't do remote

00:13:37.116 --> 00:13:37.776 A:middle
script loading.

00:13:38.126 --> 00:13:39.776 A:middle
Well, there's a whitelisting

00:13:39.776 --> 00:13:41.036 A:middle
mechanism in the content

00:13:41.036 --> 00:13:41.856 A:middle
security policy.

00:13:42.396 --> 00:13:44.356 A:middle
You just say script source, hey,

00:13:44.566 --> 00:13:47.256 A:middle
let's open up for cdn.example

00:13:47.366 --> 00:13:48.566 A:middle
because I actually want to load

00:13:48.566 --> 00:13:49.246 A:middle
script from there.

00:13:49.786 --> 00:13:51.066 A:middle
Now you can load from your own

00:13:51.066 --> 00:13:53.716 A:middle
server and cdn.example, but

00:13:53.716 --> 00:13:54.466 A:middle
nowhere else.

00:13:55.866 --> 00:13:57.206 A:middle
Well, you might want to have

00:13:57.206 --> 00:14:00.326 A:middle
that social media plugin, little

00:13:57.206 --> 00:14:00.326 A:middle
that social media plugin, little

00:14:00.326 --> 00:14:02.006 A:middle
widget in there in an iframe,

00:14:02.406 --> 00:14:04.306 A:middle
well, you can add a frame source

00:14:04.306 --> 00:14:05.956 A:middle
directive saying I want to be

00:14:05.956 --> 00:14:07.366 A:middle
able to load iframes from

00:14:07.366 --> 00:14:10.036 A:middle
social.example, but no one else

00:14:10.036 --> 00:14:11.436 A:middle
gets to have an iframe on my

00:14:11.646 --> 00:14:12.076 A:middle
page.

00:14:12.596 --> 00:14:13.656 A:middle
Again, you're in control of

00:14:13.656 --> 00:14:13.946 A:middle
that.

00:14:14.626 --> 00:14:16.346 A:middle
And there's even a directive for

00:14:16.346 --> 00:14:18.376 A:middle
the reverse case when your

00:14:18.376 --> 00:14:19.946 A:middle
content is being loaded in an

00:14:20.006 --> 00:14:21.856 A:middle
iframe on someone else's page.

00:14:22.316 --> 00:14:24.766 A:middle
In this example, news.example is

00:14:24.766 --> 00:14:26.476 A:middle
loading your content in an

00:14:26.516 --> 00:14:27.066 A:middle
iframe.

00:14:27.516 --> 00:14:29.556 A:middle
You can send out the directive--

00:14:29.556 --> 00:14:30.576 A:middle
the last directive here in

00:14:30.576 --> 00:14:32.656 A:middle
content security policy frame

00:14:32.696 --> 00:14:33.626 A:middle
ancestors.

00:14:34.026 --> 00:14:35.516 A:middle
This is telling the browser,

00:14:35.516 --> 00:14:38.686 A:middle
hey, check whosever framing me

00:14:38.926 --> 00:14:40.666 A:middle
and all the way up to the top

00:14:40.666 --> 00:14:42.726 A:middle
page and they all have to be on

00:14:42.726 --> 00:14:44.666 A:middle
my list of what I allow.

00:14:45.116 --> 00:14:46.806 A:middle
So, in this case, your web

00:14:46.806 --> 00:14:48.926 A:middle
content has said news.example, I

00:14:48.926 --> 00:14:50.346 A:middle
have a business deal with them,

00:14:50.676 --> 00:14:51.816 A:middle
they're allowed to have my

00:14:51.816 --> 00:14:52.926 A:middle
content in an iframe.

00:14:54.126 --> 00:14:55.916 A:middle
OK. That's quite a lot, so let's

00:14:55.916 --> 00:14:58.026 A:middle
just review this line by line

00:14:58.026 --> 00:14:59.556 A:middle
quickly so we know what it's

00:14:59.556 --> 00:14:59.936 A:middle
saying.

00:15:00.396 --> 00:15:02.036 A:middle
Content security policy, you

00:15:02.036 --> 00:15:03.966 A:middle
start out default source self.

00:15:04.296 --> 00:15:05.506 A:middle
Lock everything down.

00:15:05.506 --> 00:15:06.616 A:middle
Everything that's going to be

00:15:06.616 --> 00:15:08.476 A:middle
loaded with a source attribute,

00:15:08.476 --> 00:15:10.586 A:middle
like loaded from a server, needs

00:15:10.586 --> 00:15:12.646 A:middle
to be from my origin, my domain.

00:15:13.476 --> 00:15:14.666 A:middle
Then you open up.

00:15:15.076 --> 00:15:17.346 A:middle
For script, you add what domain

00:15:17.346 --> 00:15:19.716 A:middle
names do I allow scripts from.

00:15:20.786 --> 00:15:23.366 A:middle
You say where do I allow myself

00:15:23.366 --> 00:15:24.746 A:middle
to load frames from.

00:15:25.436 --> 00:15:26.496 A:middle
You whitelist them.

00:15:26.696 --> 00:15:28.526 A:middle
And, finally, if you're ever

00:15:28.526 --> 00:15:30.156 A:middle
going to be in an iframe

00:15:30.156 --> 00:15:32.026 A:middle
yourself under someone else's

00:15:32.026 --> 00:15:33.996 A:middle
page, you put them in that white

00:15:33.996 --> 00:15:35.726 A:middle
list for frame ancestors.

00:15:36.926 --> 00:15:38.446 A:middle
OK. That's the content security

00:15:38.446 --> 00:15:38.986 A:middle
policy.

00:15:39.286 --> 00:15:42.256 A:middle
It has more knobs to turn and

00:15:42.256 --> 00:15:44.276 A:middle
we'll also see in a couple of

00:15:44.276 --> 00:15:46.346 A:middle
the attack scenarios a few

00:15:46.346 --> 00:15:47.646 A:middle
flavors of these things.

00:15:48.986 --> 00:15:49.476 A:middle
Moving on.

00:15:49.716 --> 00:15:50.786 A:middle
We're going to have a look at

00:15:50.846 --> 00:15:51.476 A:middle
cookies.

00:15:51.916 --> 00:15:53.616 A:middle
Cookies are-- they actually were

00:15:53.616 --> 00:15:56.456 A:middle
called magic cookies in the

00:15:56.536 --> 00:15:58.426 A:middle
beginning of the web, and they

00:15:58.426 --> 00:16:00.476 A:middle
really are magic in that we use

00:15:58.426 --> 00:16:00.476 A:middle
really are magic in that we use

00:16:00.476 --> 00:16:01.666 A:middle
them for so many things.

00:16:02.286 --> 00:16:03.746 A:middle
And perhaps the most sensitive

00:16:03.746 --> 00:16:05.636 A:middle
thing is they authenticate

00:16:05.636 --> 00:16:06.126 A:middle
users.

00:16:06.126 --> 00:16:08.196 A:middle
Once you have logged in with

00:16:08.196 --> 00:16:09.266 A:middle
your credentials, you get a

00:16:09.266 --> 00:16:11.296 A:middle
cookie that holds your session

00:16:11.666 --> 00:16:13.806 A:middle
and that cookie, if it's moved

00:16:13.806 --> 00:16:15.476 A:middle
or its stolen and moved to

00:16:15.476 --> 00:16:17.366 A:middle
another browser engine in many

00:16:17.366 --> 00:16:19.446 A:middle
cases can impersonate that user.

00:16:19.886 --> 00:16:21.096 A:middle
So, you really need to protect

00:16:21.096 --> 00:16:21.636 A:middle
your cookies.

00:16:22.156 --> 00:16:23.686 A:middle
As I already mentioned, you

00:16:23.686 --> 00:16:25.376 A:middle
should mark them all secure so

00:16:25.376 --> 00:16:26.796 A:middle
that they never leak in plain

00:16:26.796 --> 00:16:27.706 A:middle
text requests.

00:16:28.216 --> 00:16:29.396 A:middle
But there are more things to do,

00:16:29.396 --> 00:16:29.636 A:middle
right?

00:16:30.576 --> 00:16:33.776 A:middle
So, looking at Http Only

00:16:33.776 --> 00:16:34.436 A:middle
cookies.

00:16:34.706 --> 00:16:36.736 A:middle
This is fairly old technology.

00:16:37.316 --> 00:16:38.936 A:middle
I would guess this has been

00:16:38.936 --> 00:16:40.466 A:middle
around for at least 15 years,

00:16:40.466 --> 00:16:42.496 A:middle
the ability to say HTTP only.

00:16:42.696 --> 00:16:45.376 A:middle
You might be familiar with the

00:16:45.376 --> 00:16:47.236 A:middle
web API document.cookie.

00:16:47.876 --> 00:16:50.146 A:middle
This is a way for JavaScript to

00:16:50.496 --> 00:16:51.826 A:middle
read and write cookies.

00:16:53.016 --> 00:16:55.206 A:middle
JavaScript is powerful.

00:16:55.336 --> 00:16:56.606 A:middle
And, as I mentioned, if you load

00:16:56.606 --> 00:16:57.976 A:middle
JavaScript from other servers,

00:16:58.026 --> 00:16:59.896 A:middle
they have access to all of your

00:16:59.896 --> 00:17:01.886 A:middle
user's cookies through this API.

00:16:59.896 --> 00:17:01.886 A:middle
user's cookies through this API.

00:17:03.316 --> 00:17:05.106 A:middle
You should not be offering them

00:17:05.106 --> 00:17:06.136 A:middle
that much power.

00:17:06.246 --> 00:17:07.496 A:middle
Instead, you should protect your

00:17:07.496 --> 00:17:08.816 A:middle
cookies, especially your

00:17:08.816 --> 00:17:10.746 A:middle
authentication cookies that are

00:17:10.746 --> 00:17:12.736 A:middle
effectively a way to log in as a

00:17:12.736 --> 00:17:15.636 A:middle
user by marking them Http Only.

00:17:16.455 --> 00:17:18.526 A:middle
This means that-- this cookie--

00:17:18.526 --> 00:17:19.796 A:middle
and this is the set cookie

00:17:19.796 --> 00:17:21.036 A:middle
header you are seeing here where

00:17:21.036 --> 00:17:23.236 A:middle
we are sending HTTP only, which

00:17:23.236 --> 00:17:25.256 A:middle
means don't expose this cookie

00:17:25.506 --> 00:17:26.986 A:middle
in the document.cookie API.

00:17:27.836 --> 00:17:30.136 A:middle
So, JavaScript can now not see

00:17:30.136 --> 00:17:31.876 A:middle
this cookie and of course not

00:17:31.936 --> 00:17:33.486 A:middle
fiddle with it, steal it, or

00:17:33.486 --> 00:17:34.316 A:middle
manipulate it.

00:17:34.936 --> 00:17:36.126 A:middle
So, this is something you should

00:17:36.756 --> 00:17:38.016 A:middle
be doing.

00:17:38.186 --> 00:17:40.376 A:middle
We also have another thing, new

00:17:40.376 --> 00:17:42.086 A:middle
technology as of the betas,

00:17:42.416 --> 00:17:43.766 A:middle
SameSite cookies.

00:17:44.496 --> 00:17:45.916 A:middle
Again, you are setting this on

00:17:45.916 --> 00:17:47.486 A:middle
the set cookie header that you--

00:17:47.486 --> 00:17:49.096 A:middle
when you're setting the cookie

00:17:49.096 --> 00:17:49.696 A:middle
in the browser.

00:17:50.406 --> 00:17:52.216 A:middle
See here I've got the same site

00:17:52.216 --> 00:17:54.076 A:middle
attribute equals strict.

00:17:54.656 --> 00:17:56.356 A:middle
There's also a lax version of

00:17:56.356 --> 00:17:58.596 A:middle
this, but what this is basically

00:17:58.596 --> 00:18:00.436 A:middle
saying is this particular

00:17:58.596 --> 00:18:00.436 A:middle
saying is this particular

00:18:00.436 --> 00:18:02.976 A:middle
cookie, only send it when I am

00:18:02.976 --> 00:18:04.446 A:middle
the page owner, when I am the

00:18:04.446 --> 00:18:06.436 A:middle
main page, not when I'm

00:18:06.436 --> 00:18:06.946 A:middle
embedded.

00:18:07.406 --> 00:18:08.946 A:middle
When I own the whole user

00:18:08.946 --> 00:18:10.906 A:middle
experience, I have the whole web

00:18:10.906 --> 00:18:12.816 A:middle
view, then send this cookie.

00:18:13.836 --> 00:18:16.606 A:middle
So, in the embedded case, if

00:18:16.606 --> 00:18:18.016 A:middle
your web content is being

00:18:18.016 --> 00:18:19.386 A:middle
embedded by someone you don't

00:18:19.386 --> 00:18:21.726 A:middle
trust, the SameSite cookie will

00:18:21.726 --> 00:18:24.266 A:middle
not be sent and your server can

00:18:24.266 --> 00:18:24.946 A:middle
detect this.

00:18:25.036 --> 00:18:27.516 A:middle
Aha! I didn't get that SameSite

00:18:27.516 --> 00:18:29.576 A:middle
cookie, so either this user is

00:18:29.576 --> 00:18:31.086 A:middle
not logged in or I'm being

00:18:31.086 --> 00:18:32.796 A:middle
embedded and I'm not going to

00:18:32.796 --> 00:18:34.866 A:middle
allow this thing to happen were

00:18:34.866 --> 00:18:36.356 A:middle
that, for instance, a sensitive

00:18:36.356 --> 00:18:36.966 A:middle
transaction.

00:18:37.886 --> 00:18:40.376 A:middle
So, that's getting in control of

00:18:40.376 --> 00:18:41.076 A:middle
being embedded.

00:18:41.276 --> 00:18:42.826 A:middle
SameSite cookies.

00:18:43.696 --> 00:18:46.336 A:middle
OK. Cross-origin lockdown.

00:18:46.436 --> 00:18:47.206 A:middle
We're now going to look at

00:18:47.406 --> 00:18:49.446 A:middle
really brand new technology.

00:18:49.796 --> 00:18:51.706 A:middle
WebKit is first implementing

00:18:51.706 --> 00:18:53.726 A:middle
these two new response headers

00:18:54.236 --> 00:18:55.736 A:middle
and they're all about

00:18:55.736 --> 00:18:57.376 A:middle
restricting who gets to load

00:18:57.376 --> 00:18:58.296 A:middle
your resources.

00:18:58.716 --> 00:19:00.686 A:middle
Cross-origin resource policy.

00:18:58.716 --> 00:19:00.686 A:middle
Cross-origin resource policy.

00:19:02.306 --> 00:19:03.366 A:middle
We've already mentioned these

00:19:03.426 --> 00:19:05.446 A:middle
two types of content that are

00:19:05.446 --> 00:19:06.506 A:middle
allowed to be loaded

00:19:06.506 --> 00:19:08.496 A:middle
cross-origin, images, and

00:19:08.496 --> 00:19:09.016 A:middle
scripts.

00:19:09.696 --> 00:19:11.006 A:middle
And they've been around since

00:19:11.076 --> 00:19:13.006 A:middle
the origins of the web and

00:19:13.006 --> 00:19:14.206 A:middle
therefore there has never really

00:19:14.206 --> 00:19:17.046 A:middle
been a mechanism to say, hey, I

00:19:17.046 --> 00:19:18.586 A:middle
actually don't want any other

00:19:18.586 --> 00:19:20.796 A:middle
sites to load my scripts or load

00:19:20.796 --> 00:19:21.506 A:middle
my images.

00:19:22.396 --> 00:19:24.206 A:middle
Could I just only load them

00:19:24.206 --> 00:19:24.966 A:middle
myself please?

00:19:25.806 --> 00:19:27.106 A:middle
No, we've had this thing on the

00:19:27.106 --> 00:19:28.936 A:middle
web where anyone can load images

00:19:28.936 --> 00:19:30.166 A:middle
and scripts from any server.

00:19:31.236 --> 00:19:33.146 A:middle
And now we're providing you with

00:19:33.146 --> 00:19:35.206 A:middle
a control to tell the browser,

00:19:35.206 --> 00:19:36.326 A:middle
hey, I don't want that.

00:19:36.496 --> 00:19:38.376 A:middle
And it's called the cross-origin

00:19:38.376 --> 00:19:39.276 A:middle
resource policy.

00:19:39.966 --> 00:19:41.576 A:middle
In this particular example here,

00:19:41.626 --> 00:19:43.006 A:middle
I'm giving it the directive

00:19:43.236 --> 00:19:46.446 A:middle
same, meaning only my own site

00:19:46.966 --> 00:19:47.646 A:middle
can load this.

00:19:47.646 --> 00:19:49.856 A:middle
Only when my domain name is the

00:19:49.856 --> 00:19:52.446 A:middle
main page domain and I'm pulling

00:19:52.446 --> 00:19:54.386 A:middle
in this image, then load the

00:19:54.386 --> 00:19:55.726 A:middle
image into the web content

00:19:55.726 --> 00:19:56.136 A:middle
process.

00:19:56.426 --> 00:19:57.616 A:middle
Same thing for script here.

00:19:58.106 --> 00:19:59.776 A:middle
So, when someone else comes

00:19:59.776 --> 00:20:01.666 A:middle
along and tries to cross-origin

00:19:59.776 --> 00:20:01.666 A:middle
along and tries to cross-origin

00:20:01.666 --> 00:20:03.566 A:middle
load your image or your script

00:20:04.006 --> 00:20:05.346 A:middle
and you're sending this response

00:20:05.346 --> 00:20:07.426 A:middle
header, those things won't be

00:20:07.426 --> 00:20:07.776 A:middle
loaded.

00:20:09.346 --> 00:20:10.426 A:middle
So, that puts you in control.

00:20:10.636 --> 00:20:11.716 A:middle
And this is new technology.

00:20:12.786 --> 00:20:14.596 A:middle
Finally, in the cross-origin

00:20:14.596 --> 00:20:15.736 A:middle
lockdown, we've got the

00:20:15.736 --> 00:20:18.046 A:middle
cross-origin window policy.

00:20:18.566 --> 00:20:19.696 A:middle
Now we're really getting into

00:20:19.696 --> 00:20:21.726 A:middle
the weeds of old web APIs.

00:20:22.226 --> 00:20:24.426 A:middle
You might be familiar with the

00:20:24.456 --> 00:20:27.206 A:middle
ability to open someone else's

00:20:27.236 --> 00:20:28.626 A:middle
page-- or for that matter your

00:20:28.626 --> 00:20:30.246 A:middle
own page-- in a new window.

00:20:31.116 --> 00:20:32.736 A:middle
Not like a regular link

00:20:32.736 --> 00:20:34.536 A:middle
navigation you click and you may

00:20:34.536 --> 00:20:36.696 A:middle
open a new tab or navigate in

00:20:36.696 --> 00:20:38.106 A:middle
the same tab, instead you're

00:20:38.196 --> 00:20:39.826 A:middle
opening a full-on new window.

00:20:40.746 --> 00:20:42.356 A:middle
Back in the days, we even saw

00:20:42.356 --> 00:20:44.916 A:middle
this in a form of ugly pop-overs

00:20:44.916 --> 00:20:46.866 A:middle
or pop-ups and those kind of

00:20:46.866 --> 00:20:49.896 A:middle
things, but it's the old API

00:20:50.086 --> 00:20:51.016 A:middle
window.open.

00:20:51.616 --> 00:20:53.076 A:middle
And it has some weird things

00:20:53.076 --> 00:20:53.636 A:middle
going on.

00:20:54.776 --> 00:20:56.936 A:middle
So, if your content is opened by

00:20:56.936 --> 00:21:00.016 A:middle
someone else, it looks to you as

00:20:56.936 --> 00:21:00.016 A:middle
someone else, it looks to you as

00:21:00.016 --> 00:21:01.606 A:middle
if, whoa, the user just went to

00:21:01.606 --> 00:21:03.326 A:middle
my site, I got my SameSite

00:21:03.326 --> 00:21:04.936 A:middle
cookie, everything looks fine,

00:21:05.606 --> 00:21:07.676 A:middle
but the opener maintains a

00:21:07.676 --> 00:21:10.226 A:middle
handle and kind of owns your

00:21:10.226 --> 00:21:13.176 A:middle
window and has certain APIs to

00:21:13.176 --> 00:21:15.356 A:middle
control that window that the

00:21:15.356 --> 00:21:16.996 A:middle
opener can even navigate your

00:21:16.996 --> 00:21:18.736 A:middle
window outside of your control.

00:21:20.036 --> 00:21:22.346 A:middle
And with the new response header

00:21:22.346 --> 00:21:24.356 A:middle
cross-origin window policy, you

00:21:24.356 --> 00:21:27.076 A:middle
finally get to say no to this.

00:21:27.576 --> 00:21:30.326 A:middle
Most sites are not in the

00:21:30.326 --> 00:21:32.136 A:middle
practice of using this API and

00:21:32.136 --> 00:21:33.446 A:middle
this kind of communication where

00:21:33.446 --> 00:21:35.076 A:middle
the opener owns the window.

00:21:35.076 --> 00:21:36.766 A:middle
Like, it's a very rare thing to

00:21:36.766 --> 00:21:38.926 A:middle
see on the web, but it's there

00:21:38.926 --> 00:21:39.986 A:middle
and it works that way by

00:21:39.986 --> 00:21:40.426 A:middle
default.

00:21:40.886 --> 00:21:42.496 A:middle
By sending this header, in this

00:21:42.496 --> 00:21:44.966 A:middle
case deny, you're saying that

00:21:44.966 --> 00:21:47.076 A:middle
handle should not be there.

00:21:47.766 --> 00:21:49.436 A:middle
It's OK to open me, but you

00:21:49.436 --> 00:21:50.736 A:middle
don't get to control me from

00:21:50.736 --> 00:21:51.186 A:middle
that point.

00:21:51.986 --> 00:21:54.166 A:middle
There is also a way added in

00:21:54.166 --> 00:21:55.466 A:middle
this-- I'm not showing it here--

00:21:55.466 --> 00:21:57.066 A:middle
but you can say allow post

00:21:57.066 --> 00:21:57.616 A:middle
message.

00:21:58.016 --> 00:21:59.036 A:middle
You might want to be able to

00:21:59.106 --> 00:22:00.826 A:middle
talk between these two windows

00:21:59.106 --> 00:22:00.826 A:middle
talk between these two windows

00:22:01.086 --> 00:22:02.466 A:middle
without giving the opener

00:22:02.466 --> 00:22:04.566 A:middle
control of your window and then

00:22:04.566 --> 00:22:06.156 A:middle
you can say allow post message.

00:22:07.206 --> 00:22:08.896 A:middle
OK. That's also new technology

00:22:08.896 --> 00:22:10.126 A:middle
and now we've gone through the

00:22:10.126 --> 00:22:11.416 A:middle
cross-origin lockdown.

00:22:12.336 --> 00:22:15.516 A:middle
As you can see, that's not too

00:22:15.516 --> 00:22:15.946 A:middle
hard.

00:22:15.946 --> 00:22:18.326 A:middle
It's a set of response headers.

00:22:18.326 --> 00:22:19.836 A:middle
It's the content security policy

00:22:19.836 --> 00:22:22.096 A:middle
where you whitelist things, and

00:22:22.096 --> 00:22:24.066 A:middle
it's the integrity attribute for

00:22:24.066 --> 00:22:26.126 A:middle
script tags that's more or less

00:22:26.126 --> 00:22:27.116 A:middle
what we're talking about here.

00:22:27.666 --> 00:22:28.926 A:middle
I'll give you some motivation.

00:22:29.136 --> 00:22:29.926 A:middle
We're going to look at some

00:22:29.926 --> 00:22:30.976 A:middle
attack scenarios.

00:22:30.976 --> 00:22:32.806 A:middle
What are you defending against

00:22:32.806 --> 00:22:34.666 A:middle
and how to these security

00:22:34.666 --> 00:22:36.696 A:middle
technologies fit in with these

00:22:36.696 --> 00:22:37.256 A:middle
attacks?

00:22:37.256 --> 00:22:38.286 A:middle
We're going to look at

00:22:38.286 --> 00:22:39.406 A:middle
cross-origin attacks,

00:22:39.546 --> 00:22:41.396 A:middle
speculative execution attacks--

00:22:41.666 --> 00:22:43.586 A:middle
some people may have heard about

00:22:43.586 --> 00:22:45.046 A:middle
Spectre-- and we're going to

00:22:45.046 --> 00:22:46.596 A:middle
look at window control attacks.

00:22:47.136 --> 00:22:48.756 A:middle
Let's dive into the cross-origin

00:22:48.756 --> 00:22:49.086 A:middle
ones.

00:22:50.066 --> 00:22:51.046 A:middle
We're going to talk about

00:22:51.046 --> 00:22:52.596 A:middle
cross-site scripting, when

00:22:52.596 --> 00:22:53.566 A:middle
something goes bad with your

00:22:53.666 --> 00:22:53.936 A:middle
CDN.

00:22:53.936 --> 00:22:55.586 A:middle
And that one you kind of could

00:22:55.696 --> 00:22:56.756 A:middle
tell that I was going for,

00:22:56.756 --> 00:22:56.986 A:middle
right?

00:22:57.486 --> 00:22:58.576 A:middle
And cross-site request

00:22:58.576 --> 00:22:59.146 A:middle
forgeries.

00:23:00.676 --> 00:23:01.576 A:middle
Cross-site scripting.

00:23:01.806 --> 00:23:02.906 A:middle
Imagine you have built a

00:23:02.906 --> 00:23:03.876 A:middle
messaging app.

00:23:04.306 --> 00:23:06.346 A:middle
You have it as a native app with

00:23:06.346 --> 00:23:08.066 A:middle
a web view for rich formatting,

00:23:08.066 --> 00:23:09.706 A:middle
for instance, and you may have a

00:23:09.706 --> 00:23:11.646 A:middle
companion web app that one can

00:23:11.646 --> 00:23:13.346 A:middle
go or your users can go to in a

00:23:13.346 --> 00:23:15.216 A:middle
regular web browser, and you can

00:23:15.216 --> 00:23:16.906 A:middle
send messages to each other and

00:23:16.906 --> 00:23:18.676 A:middle
maybe with very rich formatting.

00:23:19.356 --> 00:23:20.756 A:middle
Most of your users are, of

00:23:20.756 --> 00:23:21.956 A:middle
course, nice.

00:23:22.176 --> 00:23:23.676 A:middle
Nice people sending each other

00:23:23.676 --> 00:23:24.476 A:middle
nice messages.

00:23:24.926 --> 00:23:26.256 A:middle
Some of them are angry sending

00:23:26.256 --> 00:23:28.206 A:middle
angry messages, but every now

00:23:28.206 --> 00:23:29.996 A:middle
and then comes along a malicious

00:23:29.996 --> 00:23:32.166 A:middle
user who might send a message

00:23:32.166 --> 00:23:33.076 A:middle
looking like this.

00:23:34.106 --> 00:23:36.066 A:middle
It starts out nice, hello, but

00:23:36.286 --> 00:23:37.586 A:middle
then it contains markup.

00:23:38.396 --> 00:23:40.476 A:middle
Now, if you have made a mistake

00:23:40.476 --> 00:23:42.226 A:middle
somewhere in the chain, in the

00:23:42.226 --> 00:23:43.936 A:middle
native apps web view or on the

00:23:43.936 --> 00:23:46.626 A:middle
website, where this will

00:23:46.626 --> 00:23:48.336 A:middle
actually be interpreted as real

00:23:48.336 --> 00:23:50.076 A:middle
markup instead of a message,

00:23:50.556 --> 00:23:52.766 A:middle
suddenly the attacker, the

00:23:52.766 --> 00:23:54.436 A:middle
malicious user here, is able to

00:23:54.556 --> 00:23:57.976 A:middle
run scripts in the recipient's

00:23:58.266 --> 00:23:59.036 A:middle
browser engine.

00:23:59.836 --> 00:24:01.136 A:middle
In this case, trying to steal

00:23:59.836 --> 00:24:01.136 A:middle
In this case, trying to steal

00:24:01.136 --> 00:24:02.326 A:middle
the cookies of that user.

00:24:02.776 --> 00:24:04.376 A:middle
But remember, the scripts are

00:24:04.376 --> 00:24:05.726 A:middle
running with full power.

00:24:05.726 --> 00:24:07.586 A:middle
They can take over your whole

00:24:07.716 --> 00:24:09.536 A:middle
UI, make requests on your-- on

00:24:09.536 --> 00:24:10.916 A:middle
the victim user's behalf.

00:24:11.916 --> 00:24:13.366 A:middle
Cross-site scripting, which this

00:24:13.366 --> 00:24:15.116 A:middle
is an example of, is a bad

00:24:15.196 --> 00:24:15.506 A:middle
thing.

00:24:15.506 --> 00:24:16.646 A:middle
You don't want it to happen to

00:24:16.646 --> 00:24:16.836 A:middle
you.

00:24:17.846 --> 00:24:19.976 A:middle
Luckily, you have marked your

00:24:19.976 --> 00:24:21.856 A:middle
authentication cookies Http

00:24:21.856 --> 00:24:22.616 A:middle
Only, right?

00:24:22.976 --> 00:24:25.626 A:middle
So, ha, they're not available to

00:24:25.626 --> 00:24:26.546 A:middle
that malicious script.

00:24:27.466 --> 00:24:29.306 A:middle
Now, Http Only cookies don't

00:24:29.306 --> 00:24:30.796 A:middle
protect you against cross-site

00:24:30.796 --> 00:24:31.256 A:middle
scripting.

00:24:31.566 --> 00:24:32.626 A:middle
That script is still running.

00:24:33.376 --> 00:24:35.886 A:middle
Http Only cookies protect your

00:24:35.886 --> 00:24:36.226 A:middle
cookies.

00:24:37.196 --> 00:24:38.216 A:middle
So, you need to do something

00:24:38.216 --> 00:24:39.926 A:middle
more and what did you do?

00:24:40.686 --> 00:24:41.926 A:middle
Content security policy.

00:24:42.656 --> 00:24:44.626 A:middle
You started out with default

00:24:44.626 --> 00:24:45.696 A:middle
source self, right?

00:24:46.036 --> 00:24:48.566 A:middle
Saying, eh, only I get to run

00:24:48.566 --> 00:24:49.986 A:middle
script on my page please.

00:24:50.716 --> 00:24:52.726 A:middle
And that means by default no

00:24:52.726 --> 00:24:55.416 A:middle
inline scripting and that whole

00:24:55.416 --> 00:24:57.466 A:middle
class of bugs just goes away.

00:24:58.956 --> 00:25:00.966 A:middle
Now there is no way to inject

00:24:58.956 --> 00:25:00.966 A:middle
Now there is no way to inject

00:25:00.966 --> 00:25:03.006 A:middle
script into your web pages and

00:25:03.006 --> 00:25:04.796 A:middle
make them execute because you

00:25:04.796 --> 00:25:06.326 A:middle
set the policy for the page.

00:25:08.326 --> 00:25:10.946 A:middle
OK. What could happen if your

00:25:10.946 --> 00:25:12.096 A:middle
CDN gets compromised?

00:25:12.526 --> 00:25:14.186 A:middle
This is bad and let's just hope

00:25:14.186 --> 00:25:15.986 A:middle
it doesn't happen, but it can

00:25:16.796 --> 00:25:17.266 A:middle
happen.

00:25:17.816 --> 00:25:19.216 A:middle
So, you're loading the framework

00:25:19.216 --> 00:25:22.486 A:middle
off of that CDN and you really

00:25:22.486 --> 00:25:24.056 A:middle
rely on this because it's

00:25:24.056 --> 00:25:25.406 A:middle
executing with the same powers

00:25:25.406 --> 00:25:26.516 A:middle
as your own scripts.

00:25:28.136 --> 00:25:30.016 A:middle
Now, what if they've been

00:25:30.016 --> 00:25:31.656 A:middle
compromised and are redirecting

00:25:31.656 --> 00:25:33.416 A:middle
that script request to

00:25:33.456 --> 00:25:35.286 A:middle
evil.example, loading attack

00:25:35.366 --> 00:25:35.666 A:middle
code.

00:25:36.526 --> 00:25:38.126 A:middle
Now suddenly you thought you got

00:25:38.126 --> 00:25:40.146 A:middle
a framework-- maybe they were

00:25:40.146 --> 00:25:41.406 A:middle
nice enough to bundle in the

00:25:41.406 --> 00:25:42.846 A:middle
framework, but they're also

00:25:42.846 --> 00:25:44.156 A:middle
doing some nasty things.

00:25:44.866 --> 00:25:46.836 A:middle
So, what did you do?

00:25:47.546 --> 00:25:49.426 A:middle
Well, you whitelisted script

00:25:49.426 --> 00:25:50.966 A:middle
source in your content security

00:25:50.966 --> 00:25:53.626 A:middle
policy, so the browser will just

00:25:53.626 --> 00:25:55.396 A:middle
refuse to execute any code

00:25:55.396 --> 00:25:56.736 A:middle
coming from evil.example.

00:25:58.246 --> 00:26:01.026 A:middle
OK. Oh, now the attacker needs

00:25:58.246 --> 00:26:01.026 A:middle
OK. Oh, now the attacker needs

00:26:01.026 --> 00:26:02.586 A:middle
to be a little bit more sneaky.

00:26:03.426 --> 00:26:05.066 A:middle
He or she is probably going to

00:26:05.126 --> 00:26:07.306 A:middle
change the script on the CDN

00:26:07.306 --> 00:26:08.796 A:middle
server instead of redirecting it

00:26:08.936 --> 00:26:10.666 A:middle
to the evil.example server.

00:26:11.206 --> 00:26:12.626 A:middle
So-- and it's on your white

00:26:12.626 --> 00:26:14.046 A:middle
list, so you're going to load

00:26:14.046 --> 00:26:15.036 A:middle
and execute that script.

00:26:16.056 --> 00:26:19.256 A:middle
But, you've got subresource

00:26:19.256 --> 00:26:20.566 A:middle
integrity to save you.

00:26:21.206 --> 00:26:22.576 A:middle
You are in control of the

00:26:22.576 --> 00:26:24.356 A:middle
integrity of that script coming

00:26:24.356 --> 00:26:26.126 A:middle
from a server that you don't own

00:26:26.806 --> 00:26:28.096 A:middle
and if it doesn't match the

00:26:28.196 --> 00:26:29.566 A:middle
check sum, you're going to load

00:26:29.566 --> 00:26:30.756 A:middle
it off of your own server

00:26:30.756 --> 00:26:31.206 A:middle
instead.

00:26:32.186 --> 00:26:33.926 A:middle
So, that attack is also foiled.

00:26:35.746 --> 00:26:37.566 A:middle
OK. That's compromised CDN.

00:26:37.756 --> 00:26:39.686 A:middle
Final of the cross-origin

00:26:39.686 --> 00:26:41.986 A:middle
attack, the cross-site request

00:26:41.986 --> 00:26:42.736 A:middle
forgeries.

00:26:43.316 --> 00:26:45.336 A:middle
This really ties into the last

00:26:45.336 --> 00:26:46.206 A:middle
word, forgeries.

00:26:46.206 --> 00:26:48.926 A:middle
These are-- this is the attacker

00:26:48.926 --> 00:26:50.936 A:middle
trying to forge a request to

00:26:50.936 --> 00:26:52.906 A:middle
look like something one of your

00:26:52.906 --> 00:26:55.156 A:middle
users is trying to do, where

00:26:55.156 --> 00:26:58.046 A:middle
they're actually not.

00:26:59.156 --> 00:27:00.786 A:middle
So, we're back at the messaging

00:26:59.156 --> 00:27:00.786 A:middle
So, we're back at the messaging

00:27:01.866 --> 00:27:04.106 A:middle
app and you have this forum

00:27:04.106 --> 00:27:05.586 A:middle
where the user is supposed to be

00:27:05.586 --> 00:27:06.596 A:middle
able to send messages.

00:27:06.596 --> 00:27:08.446 A:middle
And, frankly, when it comes down

00:27:08.446 --> 00:27:09.916 A:middle
to it, it's going to be HTTP

00:27:09.916 --> 00:27:10.476 A:middle
requests.

00:27:10.746 --> 00:27:12.956 A:middle
Probably in HTTP post when that

00:27:12.956 --> 00:27:14.236 A:middle
message comes into the server

00:27:14.236 --> 00:27:15.276 A:middle
and look at the cookies,

00:27:15.276 --> 00:27:16.946 A:middle
everything looks good, and then

00:27:16.946 --> 00:27:18.766 A:middle
you'll send that message off to

00:27:18.766 --> 00:27:19.776 A:middle
its recipient, right?

00:27:20.666 --> 00:27:21.956 A:middle
Well, now comes along the

00:27:21.956 --> 00:27:24.536 A:middle
malicious attacker that of

00:27:24.586 --> 00:27:26.756 A:middle
course has phished one of your

00:27:26.946 --> 00:27:29.866 A:middle
users, meaning sent a link and

00:27:29.866 --> 00:27:31.726 A:middle
lured that user onto the

00:27:31.726 --> 00:27:33.876 A:middle
attacker's site, evil.example,

00:27:34.526 --> 00:27:36.466 A:middle
and is showing some really,

00:27:36.466 --> 00:27:38.006 A:middle
really fascinating stats on

00:27:38.006 --> 00:27:38.586 A:middle
cats.

00:27:39.336 --> 00:27:41.176 A:middle
That makes the victim stay

00:27:41.176 --> 00:27:42.336 A:middle
around for a little while at

00:27:42.336 --> 00:27:42.566 A:middle
least.

00:27:42.566 --> 00:27:43.676 A:middle
I mean you've got to check these

00:27:43.676 --> 00:27:44.326 A:middle
stats out.

00:27:45.286 --> 00:27:47.176 A:middle
What the victim user doesn't

00:27:47.176 --> 00:27:49.326 A:middle
realize is that there's a hidden

00:27:49.486 --> 00:27:51.966 A:middle
resource load with your web

00:27:51.966 --> 00:27:55.156 A:middle
content sending a message on the

00:27:55.156 --> 00:27:57.576 A:middle
victim user's behalf-- which of

00:27:57.636 --> 00:27:59.226 A:middle
course automatically adds the

00:27:59.226 --> 00:28:01.036 A:middle
cookies, that's just how the web

00:27:59.226 --> 00:28:01.036 A:middle
cookies, that's just how the web

00:28:01.036 --> 00:28:01.556 A:middle
works, right?

00:28:01.556 --> 00:28:02.796 A:middle
If a request goes out on the

00:28:02.796 --> 00:28:04.866 A:middle
wire, cookies are added, and to

00:28:04.866 --> 00:28:07.086 A:middle
your servers this looks like I

00:28:07.086 --> 00:28:08.416 A:middle
guess this user wants to send

00:28:08.466 --> 00:28:09.216 A:middle
this message.

00:28:10.096 --> 00:28:11.916 A:middle
That could be spam, that could

00:28:11.916 --> 00:28:13.816 A:middle
be sending links for malicious

00:28:14.116 --> 00:28:14.796 A:middle
software.

00:28:15.206 --> 00:28:16.626 A:middle
It could be breaking up with a

00:28:16.626 --> 00:28:18.986 A:middle
partner-- ah, OK, they won't go

00:28:18.986 --> 00:28:20.526 A:middle
that far, but malicious

00:28:20.526 --> 00:28:21.606 A:middle
software, we'll stay there.

00:28:22.296 --> 00:28:25.176 A:middle
So, you don't want this to

00:28:25.176 --> 00:28:25.726 A:middle
happen.

00:28:25.936 --> 00:28:30.086 A:middle
Luckily, you have used same-site

00:28:30.146 --> 00:28:30.726 A:middle
cookies.

00:28:31.376 --> 00:28:33.006 A:middle
They will not be sent in the

00:28:33.006 --> 00:28:34.996 A:middle
embedded case, which means that

00:28:34.996 --> 00:28:37.756 A:middle
your server will detect I'm

00:28:37.756 --> 00:28:39.516 A:middle
being embedded here.

00:28:39.826 --> 00:28:42.016 A:middle
I don't allow the user to send

00:28:42.016 --> 00:28:44.246 A:middle
messages from an iframe under

00:28:44.246 --> 00:28:45.256 A:middle
some other page.

00:28:45.626 --> 00:28:47.656 A:middle
I need to own the UI when I do

00:28:47.656 --> 00:28:49.276 A:middle
this sensitive thing, such as

00:28:49.276 --> 00:28:51.146 A:middle
sending messages, I'm just going

00:28:51.146 --> 00:28:52.146 A:middle
to deny this request.

00:28:53.086 --> 00:28:54.096 A:middle
This, again, puts you in

00:28:54.096 --> 00:28:54.496 A:middle
control.

00:28:56.316 --> 00:28:58.326 A:middle
OK. We have now covered

00:28:58.326 --> 00:28:59.956 A:middle
cross-origin attacks and looked

00:28:59.956 --> 00:29:01.446 A:middle
at how some of those security

00:28:59.956 --> 00:29:01.446 A:middle
at how some of those security

00:29:01.446 --> 00:29:02.636 A:middle
mechanisms help us.

00:29:03.026 --> 00:29:04.046 A:middle
We're going to move on to

00:29:04.046 --> 00:29:06.166 A:middle
something that's really exotic

00:29:06.386 --> 00:29:08.846 A:middle
and new; Spectre attacks or

00:29:08.846 --> 00:29:10.956 A:middle
speculative execution attacks.

00:29:11.606 --> 00:29:16.776 A:middle
What I'm going to cover here is

00:29:16.946 --> 00:29:18.476 A:middle
what speculative execution is,

00:29:19.186 --> 00:29:20.846 A:middle
how it can be turned into an

00:29:20.846 --> 00:29:22.336 A:middle
attack, and then we'll look at

00:29:22.336 --> 00:29:24.636 A:middle
how to defend against it.

00:29:25.316 --> 00:29:27.486 A:middle
So, now we're deep down in a

00:29:27.676 --> 00:29:28.436 A:middle
CPU.

00:29:28.566 --> 00:29:31.246 A:middle
It's executing code.

00:29:31.646 --> 00:29:33.726 A:middle
It has reached a conditional.

00:29:34.276 --> 00:29:35.786 A:middle
It's going to do something

00:29:35.786 --> 00:29:36.476 A:middle
conditionally.

00:29:36.916 --> 00:29:38.756 A:middle
It's asking itself, hey, I've

00:29:38.756 --> 00:29:40.856 A:middle
got an array index here, x.

00:29:41.326 --> 00:29:42.806 A:middle
Is this index OK?

00:29:43.226 --> 00:29:45.096 A:middle
Is this in bounds or out of

00:29:45.096 --> 00:29:46.516 A:middle
bounds for my array read?

00:29:47.416 --> 00:29:50.046 A:middle
Because if it's out of bounds, I

00:29:50.046 --> 00:29:51.516 A:middle
should do some error handling

00:29:51.516 --> 00:29:53.446 A:middle
here, but if it's in bound I

00:29:53.446 --> 00:29:54.906 A:middle
should go ahead and load that

00:29:54.906 --> 00:29:55.756 A:middle
data in the array.

00:29:57.036 --> 00:30:00.326 A:middle
Now, modern CPUs learn over time

00:29:57.036 --> 00:30:00.326 A:middle
Now, modern CPUs learn over time

00:30:00.326 --> 00:30:02.156 A:middle
if they see the same code path

00:30:02.156 --> 00:30:05.346 A:middle
over and over again that, hey, x

00:30:05.346 --> 00:30:06.696 A:middle
is always in bound.

00:30:07.356 --> 00:30:09.126 A:middle
It's always OK to load this

00:30:09.126 --> 00:30:09.496 A:middle
array.

00:30:10.406 --> 00:30:11.586 A:middle
Why don't I go ahead and

00:30:11.586 --> 00:30:14.516 A:middle
speculatively do that, before I

00:30:14.516 --> 00:30:15.986 A:middle
know whether it's OK or not?

00:30:16.686 --> 00:30:17.816 A:middle
And this is how it works.

00:30:18.356 --> 00:30:20.496 A:middle
It does this code-- takes this

00:30:20.496 --> 00:30:22.946 A:middle
code path speculatively, loads

00:30:22.946 --> 00:30:25.066 A:middle
that data, and then when the

00:30:25.066 --> 00:30:26.676 A:middle
final answer comes in, in this

00:30:26.676 --> 00:30:28.896 A:middle
case, oops, no, this is one of

00:30:28.896 --> 00:30:30.536 A:middle
the rare cases where x was not

00:30:30.536 --> 00:30:31.606 A:middle
OK, you shouldn't have been

00:30:31.606 --> 00:30:33.886 A:middle
loading that data, it backs it

00:30:33.886 --> 00:30:36.906 A:middle
out and takes the right code

00:30:37.756 --> 00:30:37.896 A:middle
path.

00:30:38.066 --> 00:30:39.116 A:middle
How is this OK?

00:30:39.466 --> 00:30:41.116 A:middle
Well, it's OK because the

00:30:41.116 --> 00:30:42.626 A:middle
speculative path is not

00:30:42.676 --> 00:30:43.056 A:middle
committed.

00:30:43.056 --> 00:30:45.566 A:middle
It is only done in advance so

00:30:45.566 --> 00:30:46.806 A:middle
that we can take advantage of,

00:30:46.806 --> 00:30:48.896 A:middle
oh, I'm already done with all of

00:30:48.896 --> 00:30:50.786 A:middle
that work when the final answer

00:30:50.786 --> 00:30:52.086 A:middle
to the original question comes

00:30:52.086 --> 00:30:52.226 A:middle
in.

00:30:52.796 --> 00:30:53.866 A:middle
And that's speculative

00:30:53.866 --> 00:30:54.546 A:middle
execution.

00:30:55.626 --> 00:30:57.186 A:middle
How can this be turned into an

00:30:57.186 --> 00:30:57.666 A:middle
attack?

00:30:58.056 --> 00:31:00.876 A:middle
It turns out that cache effects

00:30:58.056 --> 00:31:00.876 A:middle
It turns out that cache effects

00:31:01.056 --> 00:31:02.496 A:middle
that are a result of the

00:31:02.496 --> 00:31:04.936 A:middle
speculative execution can be

00:31:04.936 --> 00:31:07.756 A:middle
monitored by malicious code and

00:31:07.756 --> 00:31:10.036 A:middle
then they can leak that data

00:31:10.036 --> 00:31:11.996 A:middle
read that was never supposed to

00:31:11.996 --> 00:31:12.416 A:middle
happen.

00:31:13.026 --> 00:31:14.606 A:middle
It was out of bounds, that load

00:31:14.606 --> 00:31:16.456 A:middle
should have not happened, but it

00:31:16.456 --> 00:31:18.996 A:middle
effects caches and by measuring

00:31:18.996 --> 00:31:21.116 A:middle
caches the-- an attacker can

00:31:21.116 --> 00:31:22.826 A:middle
leak that data that was not

00:31:22.826 --> 00:31:23.866 A:middle
supposed to be loaded.

00:31:25.086 --> 00:31:26.806 A:middle
OK. How does this map to web

00:31:26.876 --> 00:31:27.396 A:middle
content?

00:31:28.046 --> 00:31:29.986 A:middle
Remember the same-origin policy?

00:31:30.476 --> 00:31:31.636 A:middle
This thing that has been

00:31:31.636 --> 00:31:34.476 A:middle
protecting us for 20 years that

00:31:34.476 --> 00:31:36.676 A:middle
makes sure that the main frame

00:31:36.676 --> 00:31:37.996 A:middle
from one origin cannot reach

00:31:38.026 --> 00:31:39.756 A:middle
into and read the bytes of some

00:31:39.756 --> 00:31:41.496 A:middle
other frame, maybe your embedded

00:31:41.496 --> 00:31:41.916 A:middle
content.

00:31:43.206 --> 00:31:44.496 A:middle
With speculative execution

00:31:44.496 --> 00:31:46.416 A:middle
attacks, we can no longer rely

00:31:46.416 --> 00:31:47.656 A:middle
on the same-origin policy.

00:31:48.766 --> 00:31:50.196 A:middle
There is now an ability-- if you

00:31:50.196 --> 00:31:51.576 A:middle
can run scripts and you're in

00:31:51.576 --> 00:31:53.696 A:middle
the same process, the same web

00:31:53.696 --> 00:31:55.676 A:middle
content process as some other

00:31:55.676 --> 00:31:57.916 A:middle
content, you can read that

00:31:57.916 --> 00:31:59.336 A:middle
content through speculative

00:31:59.336 --> 00:32:00.276 A:middle
execution attacks.

00:31:59.336 --> 00:32:00.276 A:middle
execution attacks.

00:32:01.556 --> 00:32:03.726 A:middle
OK. This is a big challenge for

00:32:03.726 --> 00:32:04.406 A:middle
the web.

00:32:04.696 --> 00:32:05.866 A:middle
I can tell you, I've been

00:32:05.866 --> 00:32:07.026 A:middle
sitting in meetings with the

00:32:07.026 --> 00:32:08.086 A:middle
other browser vendors.

00:32:08.186 --> 00:32:10.676 A:middle
We are working super hard to try

00:32:10.676 --> 00:32:12.776 A:middle
to fix this by default for the

00:32:12.776 --> 00:32:15.076 A:middle
web, but we need your help.

00:32:15.796 --> 00:32:17.786 A:middle
If you can opt into a bunch of

00:32:17.826 --> 00:32:19.146 A:middle
things-- we've already looked at

00:32:19.256 --> 00:32:20.666 A:middle
the defense mechanisms, right?

00:32:20.926 --> 00:32:22.796 A:middle
If you can opt into these, you

00:32:22.796 --> 00:32:24.446 A:middle
can help us by telling us, hey,

00:32:24.786 --> 00:32:26.146 A:middle
I have sensitive content.

00:32:26.366 --> 00:32:27.696 A:middle
I'm willing to have better

00:32:27.696 --> 00:32:28.196 A:middle
defaults.

00:32:28.196 --> 00:32:29.276 A:middle
You don't have to support these

00:32:29.276 --> 00:32:30.826 A:middle
legacy APIs for me.

00:32:31.286 --> 00:32:32.536 A:middle
Then we can be much more

00:32:32.536 --> 00:32:34.006 A:middle
aggressive in fighting

00:32:34.006 --> 00:32:35.936 A:middle
speculative execution attacks on

00:32:35.936 --> 00:32:36.496 A:middle
your behalf.

00:32:37.456 --> 00:32:38.916 A:middle
So, let's look at how this maps.

00:32:39.666 --> 00:32:41.106 A:middle
The basic thing you're going to

00:32:41.106 --> 00:32:42.536 A:middle
try to do here to fight

00:32:42.536 --> 00:32:44.686 A:middle
speculative execution attacks is

00:32:44.686 --> 00:32:47.046 A:middle
making sure your web content

00:32:47.306 --> 00:32:49.176 A:middle
never ends up in the same web

00:32:49.176 --> 00:32:51.756 A:middle
content process as a frame from

00:32:51.756 --> 00:32:52.736 A:middle
evil.example.

00:32:53.316 --> 00:32:54.416 A:middle
If they have a frame

00:32:54.416 --> 00:32:56.626 A:middle
evil.example, they can execute

00:32:56.716 --> 00:32:58.186 A:middle
code in your-- in the same

00:32:58.186 --> 00:33:00.386 A:middle
process that your web content

00:32:58.186 --> 00:33:00.386 A:middle
process that your web content

00:33:00.386 --> 00:33:02.646 A:middle
resides in and read your bytes.

00:33:03.436 --> 00:33:04.746 A:middle
So, how do we make sure this

00:33:04.746 --> 00:33:05.326 A:middle
never happens?

00:33:06.286 --> 00:33:07.656 A:middle
OK. We've got these things.

00:33:07.936 --> 00:33:09.836 A:middle
First, WKWebView.

00:33:10.036 --> 00:33:11.406 A:middle
Now we're looking at apps using

00:33:11.406 --> 00:33:12.616 A:middle
WebKit as a framework.

00:33:13.616 --> 00:33:16.466 A:middle
I'm looking here at Safari,

00:33:16.756 --> 00:33:18.046 A:middle
which is an example of an app

00:33:18.046 --> 00:33:20.216 A:middle
that has been using WKWebView

00:33:20.326 --> 00:33:22.386 A:middle
and we sometimes refer to it as

00:33:22.386 --> 00:33:24.306 A:middle
Modern WebKit, has been using it

00:33:24.306 --> 00:33:25.596 A:middle
for many, many years.

00:33:25.986 --> 00:33:27.866 A:middle
And it provides excellent

00:33:28.096 --> 00:33:29.346 A:middle
advantages.

00:33:30.096 --> 00:33:32.336 A:middle
For instance, these three tabs,

00:33:32.536 --> 00:33:34.296 A:middle
the evil.example, your web

00:33:34.296 --> 00:33:36.696 A:middle
content, and webkit.org are all

00:33:36.696 --> 00:33:38.516 A:middle
rendered in separate web content

00:33:38.516 --> 00:33:39.096 A:middle
processes.

00:33:40.126 --> 00:33:42.896 A:middle
Further, WKWebView provides you

00:33:43.026 --> 00:33:44.726 A:middle
with a separate process for

00:33:44.726 --> 00:33:45.566 A:middle
networking.

00:33:45.816 --> 00:33:47.436 A:middle
This is where cookies get added

00:33:47.436 --> 00:33:51.136 A:middle
and HTTP headers are parsed and

00:33:51.316 --> 00:33:51.966 A:middle
et cetera.

00:33:54.306 --> 00:33:56.036 A:middle
Now, speculative execution

00:33:56.036 --> 00:33:58.346 A:middle
attacks all rely on being in the

00:33:58.346 --> 00:34:00.796 A:middle
same web content process and

00:33:58.346 --> 00:34:00.796 A:middle
same web content process and

00:34:00.796 --> 00:34:02.516 A:middle
doing the speculation thing to

00:34:02.516 --> 00:34:04.386 A:middle
try to read things that the

00:34:04.386 --> 00:34:06.246 A:middle
attacker wasn't supposed to be

00:34:06.246 --> 00:34:07.136 A:middle
able to read.

00:34:07.136 --> 00:34:08.496 A:middle
Well, if you have separated

00:34:08.496 --> 00:34:09.956 A:middle
things into different processes,

00:34:10.696 --> 00:34:12.036 A:middle
this attack doesn't work, right?

00:34:12.636 --> 00:34:13.956 A:middle
You cannot do speculative

00:34:14.025 --> 00:34:16.196 A:middle
execution attacks across process

00:34:16.196 --> 00:34:18.286 A:middle
boundaries, so this is already a

00:34:18.286 --> 00:34:20.626 A:middle
defense here and of course

00:34:20.626 --> 00:34:22.686 A:middle
that's super important that the

00:34:22.686 --> 00:34:24.886 A:middle
web content process cannot reach

00:34:24.916 --> 00:34:26.666 A:middle
into the network process and do

00:34:26.666 --> 00:34:28.096 A:middle
speculative execution attacks

00:34:28.096 --> 00:34:28.396 A:middle
there.

00:34:30.056 --> 00:34:32.076 A:middle
But if you are still using

00:34:32.076 --> 00:34:34.396 A:middle
UIWebView, which, by the way, we

00:34:34.396 --> 00:34:36.196 A:middle
are deprecating as of the betas,

00:34:37.306 --> 00:34:39.275 A:middle
you're not in a very good place.

00:34:40.485 --> 00:34:42.436 A:middle
Now, if you have evil.example

00:34:43.206 --> 00:34:44.686 A:middle
and you have your web content

00:34:45.315 --> 00:34:46.686 A:middle
and you've got the network stack

00:34:47.496 --> 00:34:48.826 A:middle
and then you put this all in

00:34:48.826 --> 00:34:51.946 A:middle
your app, from the view of a

00:34:51.946 --> 00:34:53.596 A:middle
speculative execution attack,

00:34:54.315 --> 00:34:55.505 A:middle
this all blends together.

00:34:56.306 --> 00:34:58.346 A:middle
It's all the same process space.

00:34:59.026 --> 00:35:00.666 A:middle
There are no guards for

00:34:59.026 --> 00:35:00.666 A:middle
There are no guards for

00:35:00.666 --> 00:35:02.896 A:middle
speculative execution attack in

00:35:02.896 --> 00:35:03.506 A:middle
this scenario.

00:35:04.286 --> 00:35:05.846 A:middle
You need to get off of

00:35:05.846 --> 00:35:06.666 A:middle
UIWebView.

00:35:07.466 --> 00:35:10.376 A:middle
If you move to WKWebView, you'll

00:35:10.376 --> 00:35:12.696 A:middle
instead get this.

00:35:12.896 --> 00:35:15.096 A:middle
Out of process, separated,

00:35:15.656 --> 00:35:16.856 A:middle
badness happening in the

00:35:16.856 --> 00:35:18.676 A:middle
evil.example content process

00:35:18.796 --> 00:35:19.856 A:middle
cannot affect the rest.

00:35:21.266 --> 00:35:23.306 A:middle
OK. We've moved to WKWebView.

00:35:23.656 --> 00:35:24.726 A:middle
Let's look at how content

00:35:24.726 --> 00:35:26.996 A:middle
security policy can help you.

00:35:27.406 --> 00:35:28.626 A:middle
You might have an embedded

00:35:28.626 --> 00:35:29.976 A:middle
social widget from

00:35:29.976 --> 00:35:33.166 A:middle
social.example, but then you

00:35:33.166 --> 00:35:34.696 A:middle
might have an injection attack,

00:35:34.696 --> 00:35:36.086 A:middle
maybe it's the messaging thing

00:35:36.086 --> 00:35:37.376 A:middle
again where someone can send

00:35:37.376 --> 00:35:38.716 A:middle
markup in a message and you

00:35:38.946 --> 00:35:40.546 A:middle
accidentally render it and they

00:35:40.546 --> 00:35:41.606 A:middle
pull in an iframe from

00:35:41.606 --> 00:35:42.516 A:middle
evil.example.

00:35:43.376 --> 00:35:45.816 A:middle
Well, you may also have an ad

00:35:45.816 --> 00:35:47.426 A:middle
there that you want to have

00:35:47.426 --> 00:35:48.676 A:middle
there and then the ad network

00:35:48.676 --> 00:35:50.286 A:middle
gets compromised and redirects

00:35:50.286 --> 00:35:51.626 A:middle
to evil.example and then pulls

00:35:51.626 --> 00:35:52.246 A:middle
in an iframe.

00:35:52.646 --> 00:35:53.996 A:middle
And, remember, you never want to

00:35:53.996 --> 00:35:55.426 A:middle
be in a web content process

00:35:55.786 --> 00:35:57.946 A:middle
together with a frame from

00:35:57.946 --> 00:35:58.876 A:middle
evil.example.

00:35:59.986 --> 00:36:00.866 A:middle
So, what have you done?

00:35:59.986 --> 00:36:00.866 A:middle
So, what have you done?

00:36:01.306 --> 00:36:02.616 A:middle
You have deployed content

00:36:02.616 --> 00:36:04.706 A:middle
security policy and you've

00:36:05.016 --> 00:36:07.746 A:middle
specified from where you allow

00:36:07.746 --> 00:36:10.316 A:middle
frames and please don't allow

00:36:10.316 --> 00:36:11.176 A:middle
evil.example.

00:36:12.386 --> 00:36:14.466 A:middle
This is how you protect

00:36:14.466 --> 00:36:16.666 A:middle
accidentally getting a frame in

00:36:16.666 --> 00:36:19.116 A:middle
your process from evil.example.

00:36:20.176 --> 00:36:22.286 A:middle
So, the reverse.

00:36:22.496 --> 00:36:24.796 A:middle
Can evil.example pull your web

00:36:24.796 --> 00:36:26.996 A:middle
content into the evil process?

00:36:27.876 --> 00:36:28.396 A:middle
Of course.

00:36:29.186 --> 00:36:30.446 A:middle
So, how do you protect against

00:36:30.446 --> 00:36:30.736 A:middle
that?

00:36:31.546 --> 00:36:32.646 A:middle
We are back at the content

00:36:32.646 --> 00:36:34.396 A:middle
security policy and now we see

00:36:34.606 --> 00:36:35.846 A:middle
frame ancestors.

00:36:36.016 --> 00:36:37.326 A:middle
And this is what I referred to

00:36:37.566 --> 00:36:38.896 A:middle
earlier with a slightly

00:36:38.896 --> 00:36:39.686 A:middle
different flavor.

00:36:40.086 --> 00:36:41.916 A:middle
You can actually say none and

00:36:41.916 --> 00:36:44.736 A:middle
this means never iframe me.

00:36:45.546 --> 00:36:47.206 A:middle
This content should never be in

00:36:47.206 --> 00:36:48.486 A:middle
an iframe from someone else.

00:36:49.006 --> 00:36:49.896 A:middle
This is my content.

00:36:50.256 --> 00:36:51.896 A:middle
Only I get to render this thing.

00:36:52.636 --> 00:36:54.756 A:middle
So, this-- if you place this,

00:36:55.236 --> 00:36:57.986 A:middle
that-- the evil.example page

00:36:57.986 --> 00:37:00.616 A:middle
cannot pull in your content in

00:36:57.986 --> 00:37:00.616 A:middle
cannot pull in your content in

00:37:00.616 --> 00:37:01.126 A:middle
an iframe.

00:37:01.446 --> 00:37:03.026 A:middle
And, of course, we do that

00:37:03.126 --> 00:37:05.386 A:middle
blocking in the network process.

00:37:05.816 --> 00:37:07.236 A:middle
That's important, right, because

00:37:07.426 --> 00:37:08.886 A:middle
a speculative execution attack

00:37:08.886 --> 00:37:10.116 A:middle
can only happen in the same

00:37:10.116 --> 00:37:12.056 A:middle
process space, so we cut it off

00:37:12.056 --> 00:37:13.336 A:middle
before it enters where

00:37:13.336 --> 00:37:15.186 A:middle
evil.example can execute

00:37:15.186 --> 00:37:15.716 A:middle
JavaScript.

00:37:17.336 --> 00:37:19.756 A:middle
OK. HttpOnly cookies, do they

00:37:19.756 --> 00:37:21.266 A:middle
really map to speculative

00:37:21.266 --> 00:37:22.226 A:middle
execution attacks?

00:37:22.666 --> 00:37:23.616 A:middle
Yes, they do.

00:37:23.886 --> 00:37:25.606 A:middle
They're even more important here

00:37:25.606 --> 00:37:27.356 A:middle
than to try to fight cross-site

00:37:27.356 --> 00:37:27.776 A:middle
scripting.

00:37:28.456 --> 00:37:31.426 A:middle
Why? Well, remember that old API

00:37:31.426 --> 00:37:33.616 A:middle
document.cookie is the way to

00:37:33.616 --> 00:37:35.236 A:middle
look at cookies from JavaScript?

00:37:36.076 --> 00:37:37.376 A:middle
Now that we don't-- we can't

00:37:37.376 --> 00:37:38.906 A:middle
rely on the same-origin policy

00:37:38.906 --> 00:37:41.646 A:middle
anymore, evil.example can reach

00:37:41.646 --> 00:37:43.636 A:middle
into an iframe from your content

00:37:43.636 --> 00:37:44.956 A:middle
and actually read the cookies.

00:37:45.816 --> 00:37:46.676 A:middle
Super bad.

00:37:47.196 --> 00:37:49.016 A:middle
But if you mark them HttpOnly,

00:37:49.516 --> 00:37:51.446 A:middle
WebKit will make sure to keep

00:37:51.546 --> 00:37:52.896 A:middle
them in the network process.

00:37:53.256 --> 00:37:54.456 A:middle
We don't need to move them into

00:37:54.456 --> 00:37:55.706 A:middle
the web content process because

00:37:55.706 --> 00:37:57.216 A:middle
they never need to be exposed in

00:37:57.216 --> 00:37:58.476 A:middle
the document.cookie API.

00:37:59.506 --> 00:38:00.836 A:middle
So, this automatically protects

00:37:59.506 --> 00:38:00.836 A:middle
So, this automatically protects

00:38:00.836 --> 00:38:02.596 A:middle
the cookies against speculative

00:38:02.596 --> 00:38:03.486 A:middle
execution attacks.

00:38:04.866 --> 00:38:06.406 A:middle
SameSite cookies.

00:38:06.576 --> 00:38:07.786 A:middle
This is basically giving your

00:38:07.786 --> 00:38:09.646 A:middle
server control of the embedded

00:38:09.696 --> 00:38:10.176 A:middle
case.

00:38:10.556 --> 00:38:12.306 A:middle
Again, evil.example has decide

00:38:12.306 --> 00:38:14.006 A:middle
to try to pull off a speculative

00:38:14.046 --> 00:38:15.266 A:middle
execution attack against your

00:38:15.266 --> 00:38:15.756 A:middle
content.

00:38:16.656 --> 00:38:17.936 A:middle
Loaded an iframe with your

00:38:17.936 --> 00:38:20.306 A:middle
content, but the SameSite cookie

00:38:20.306 --> 00:38:22.446 A:middle
doesn't get sent, so your server

00:38:22.446 --> 00:38:23.556 A:middle
will know that, hey, I'm being

00:38:23.556 --> 00:38:24.966 A:middle
embedded here.

00:38:24.966 --> 00:38:25.856 A:middle
I'm not going to allow this.

00:38:25.886 --> 00:38:27.696 A:middle
So, you're going to deny this

00:38:27.696 --> 00:38:28.706 A:middle
whole resource load.

00:38:29.196 --> 00:38:29.896 A:middle
Server side.

00:38:31.396 --> 00:38:33.016 A:middle
And that way not end up in

00:38:33.016 --> 00:38:34.796 A:middle
evil.example's process.

00:38:35.656 --> 00:38:37.786 A:middle
Finally, to fight these attacks,

00:38:38.016 --> 00:38:40.516 A:middle
cross-origin resource policy.

00:38:41.446 --> 00:38:42.806 A:middle
Now, this was the new header I

00:38:42.806 --> 00:38:44.026 A:middle
told you about where you can

00:38:44.316 --> 00:38:46.476 A:middle
tell the web browser engine

00:38:46.476 --> 00:38:48.626 A:middle
that, hey, images, scripts, and

00:38:48.626 --> 00:38:49.786 A:middle
other things from my server,

00:38:50.226 --> 00:38:51.736 A:middle
only I get to load them.

00:38:52.276 --> 00:38:53.576 A:middle
So, if you say-- send this

00:38:53.576 --> 00:38:55.226 A:middle
header for your images and your

00:38:55.226 --> 00:38:57.446 A:middle
scripts on your server, we will

00:38:57.446 --> 00:38:59.116 A:middle
make sure to block them from

00:38:59.116 --> 00:39:01.716 A:middle
being loaded by evil.example and

00:38:59.116 --> 00:39:01.716 A:middle
being loaded by evil.example and

00:39:01.716 --> 00:39:02.906 A:middle
we'll do that block in the

00:39:02.906 --> 00:39:03.866 A:middle
network process.

00:39:04.186 --> 00:39:06.336 A:middle
Again, giving you that process

00:39:06.336 --> 00:39:08.406 A:middle
separation so that a speculative

00:39:08.406 --> 00:39:09.946 A:middle
execution attack cannot read

00:39:09.946 --> 00:39:10.676 A:middle
your bytes.

00:39:12.686 --> 00:39:14.976 A:middle
OK. We have the final attack

00:39:14.976 --> 00:39:16.366 A:middle
category to have a look at and

00:39:16.366 --> 00:39:17.466 A:middle
this is a pretty brief one.

00:39:17.836 --> 00:39:19.246 A:middle
Window control attacks.

00:39:20.216 --> 00:39:21.906 A:middle
So, we're going to look

00:39:21.906 --> 00:39:23.626 A:middle
malicious window navigation,

00:39:23.786 --> 00:39:24.896 A:middle
sometimes referred to as

00:39:24.936 --> 00:39:26.466 A:middle
tabnapping, and then the

00:39:26.466 --> 00:39:26.806 A:middle
defense.

00:39:28.446 --> 00:39:29.466 A:middle
Again, we're back here at

00:39:29.466 --> 00:39:31.486 A:middle
evil.example and instead of

00:39:31.486 --> 00:39:33.506 A:middle
embedding your content, thus the

00:39:33.506 --> 00:39:36.106 A:middle
window.open opens your content

00:39:36.106 --> 00:39:37.876 A:middle
in a new window and you don't

00:39:37.876 --> 00:39:38.416 A:middle
get to know.

00:39:38.416 --> 00:39:39.986 A:middle
You don't get to decide, yeah,

00:39:39.986 --> 00:39:41.876 A:middle
OK, someone opened my web page.

00:39:42.066 --> 00:39:44.136 A:middle
And the SameSite cookie may be

00:39:44.136 --> 00:39:44.826 A:middle
sent here.

00:39:44.826 --> 00:39:46.086 A:middle
You might think everything's

00:39:46.086 --> 00:39:49.376 A:middle
good, but evil.example could

00:39:49.376 --> 00:39:52.416 A:middle
wait until your user loses focus

00:39:52.416 --> 00:39:54.856 A:middle
of that page of yours and then

00:39:54.856 --> 00:39:57.786 A:middle
use the handle to navigate it to

00:39:57.786 --> 00:40:00.516 A:middle
a fraud page that looks like

00:39:57.786 --> 00:40:00.516 A:middle
a fraud page that looks like

00:40:00.516 --> 00:40:02.646 A:middle
your page and asks the user to

00:40:02.646 --> 00:40:04.736 A:middle
please log in again, of course

00:40:04.736 --> 00:40:05.906 A:middle
stealing the credentials and

00:40:05.906 --> 00:40:07.036 A:middle
sending them off to the

00:40:07.036 --> 00:40:07.496 A:middle
attacker.

00:40:08.436 --> 00:40:09.416 A:middle
This is one of the things that

00:40:09.416 --> 00:40:10.756 A:middle
can happen if you leave the

00:40:10.756 --> 00:40:12.126 A:middle
control up to the opener.

00:40:13.206 --> 00:40:14.286 A:middle
Instead, you deploy the

00:40:14.286 --> 00:40:16.836 A:middle
cross-origin window policy, you

00:40:16.836 --> 00:40:19.466 A:middle
deny this thing, and there will

00:40:19.466 --> 00:40:21.556 A:middle
be no handler for the attacker

00:40:21.556 --> 00:40:23.846 A:middle
page to navigate your window

00:40:23.846 --> 00:40:24.126 A:middle
with.

00:40:24.666 --> 00:40:27.386 A:middle
So, that's the final defense in

00:40:27.386 --> 00:40:27.756 A:middle
attack.

00:40:28.496 --> 00:40:31.046 A:middle
It's time to take action.

00:40:31.366 --> 00:40:32.656 A:middle
We're going to review what we've

00:40:32.656 --> 00:40:34.516 A:middle
been looking at here, just so

00:40:34.516 --> 00:40:35.656 A:middle
that you know what you need to

00:40:35.656 --> 00:40:37.956 A:middle
go back to your office or your

00:40:37.956 --> 00:40:39.456 A:middle
home and start working on.

00:40:40.196 --> 00:40:42.926 A:middle
First, we have to secure these

00:40:42.926 --> 00:40:43.746 A:middle
transports.

00:40:44.066 --> 00:40:45.916 A:middle
Move to HTTPS and WSS.

00:40:47.206 --> 00:40:49.126 A:middle
You should have secure cookies.

00:40:49.546 --> 00:40:51.056 A:middle
You should also mark them

00:40:51.056 --> 00:40:51.916 A:middle
HttpOnly.

00:40:52.296 --> 00:40:53.966 A:middle
If you take the Swede's advice,

00:40:54.246 --> 00:40:55.486 A:middle
just make all of your cookies

00:40:55.486 --> 00:40:56.716 A:middle
HttpOnly and secure.

00:40:57.806 --> 00:40:59.706 A:middle
And you need to migrate off of

00:40:59.706 --> 00:41:01.636 A:middle
UIWebView to WKWebview.

00:40:59.706 --> 00:41:01.636 A:middle
UIWebView to WKWebview.

00:41:02.046 --> 00:41:03.076 A:middle
These are the basics.

00:41:03.786 --> 00:41:05.216 A:middle
Then we have the defense

00:41:05.216 --> 00:41:06.586 A:middle
mechanisms we've been going

00:41:06.586 --> 00:41:07.006 A:middle
through.

00:41:07.386 --> 00:41:09.386 A:middle
Content security policy will

00:41:09.386 --> 00:41:11.956 A:middle
help you here with cross-site

00:41:11.956 --> 00:41:13.236 A:middle
scripting and speculative

00:41:13.236 --> 00:41:14.276 A:middle
execution attacks.

00:41:16.266 --> 00:41:17.686 A:middle
HttpOnly cookies will provide

00:41:17.746 --> 00:41:19.706 A:middle
you with some kind of protection

00:41:19.706 --> 00:41:20.826 A:middle
against cross-site scripting,

00:41:20.906 --> 00:41:22.526 A:middle
meaning the scripts can't steal

00:41:22.526 --> 00:41:24.306 A:middle
the cookies, but it will

00:41:24.306 --> 00:41:26.026 A:middle
definitely help you against

00:41:26.026 --> 00:41:27.586 A:middle
speculative execution attacks

00:41:27.626 --> 00:41:29.616 A:middle
because HttpOnly cookies are

00:41:29.756 --> 00:41:31.236 A:middle
kept in the network process.

00:41:33.286 --> 00:41:34.446 A:middle
Subresource integrity.

00:41:34.876 --> 00:41:36.036 A:middle
This is the way you fight

00:41:36.436 --> 00:41:37.896 A:middle
against a compromised CDN.

00:41:38.306 --> 00:41:40.246 A:middle
Someone's executing code on your

00:41:40.246 --> 00:41:42.106 A:middle
page that you never wanted to be

00:41:42.106 --> 00:41:42.346 A:middle
there.

00:41:44.576 --> 00:41:47.176 A:middle
SameSite cookies, this is a way

00:41:47.176 --> 00:41:49.766 A:middle
to fight forged requests done

00:41:49.816 --> 00:41:51.936 A:middle
invisibly by some phishing page

00:41:52.026 --> 00:41:52.816 A:middle
to your server.

00:41:52.906 --> 00:41:54.456 A:middle
You will know that because the

00:41:54.456 --> 00:41:56.036 A:middle
SameSite cookie won't be sent

00:41:56.036 --> 00:41:57.496 A:middle
when you're embedded and so you

00:41:57.496 --> 00:41:59.336 A:middle
don't accept the request.

00:42:00.236 --> 00:42:01.376 A:middle
It also happens against

00:42:01.426 --> 00:42:02.946 A:middle
speculative execution attacks

00:42:03.236 --> 00:42:04.976 A:middle
because if an evil page is

00:42:04.976 --> 00:42:06.606 A:middle
trying to pull in your resources

00:42:06.606 --> 00:42:08.476 A:middle
to be able to leverage an attack

00:42:08.476 --> 00:42:10.616 A:middle
against them, again, SameSite

00:42:10.616 --> 00:42:11.976 A:middle
cookies won't be sent and you

00:42:11.976 --> 00:42:12.916 A:middle
can deny the load.

00:42:13.486 --> 00:42:15.506 A:middle
Then we get into these new

00:42:15.506 --> 00:42:17.206 A:middle
technologies, the cross-origin

00:42:17.206 --> 00:42:18.216 A:middle
resource policy.

00:42:18.786 --> 00:42:20.996 A:middle
This is the way you can say that

00:42:20.996 --> 00:42:23.366 A:middle
images, scripts, and other

00:42:23.366 --> 00:42:25.556 A:middle
cross-origin loads, deny them, I

00:42:25.556 --> 00:42:27.366 A:middle
only want to load this on my

00:42:27.366 --> 00:42:27.996 A:middle
page.

00:42:28.506 --> 00:42:29.786 A:middle
And, finally, controlling

00:42:29.786 --> 00:42:32.306 A:middle
windows is making sure that that

00:42:32.306 --> 00:42:34.686 A:middle
handle goes away if someone else

00:42:34.686 --> 00:42:36.556 A:middle
opens your web content in their

00:42:36.556 --> 00:42:37.136 A:middle
own window.

00:42:40.286 --> 00:42:41.786 A:middle
These are fairly easy to adopt,

00:42:42.246 --> 00:42:44.266 A:middle
especially for you.

00:42:44.386 --> 00:42:45.826 A:middle
You know your sites, you know

00:42:45.826 --> 00:42:47.106 A:middle
your web content, you know your

00:42:47.106 --> 00:42:48.176 A:middle
apps, you know how they're

00:42:48.176 --> 00:42:49.096 A:middle
supposed to work.

00:42:49.316 --> 00:42:50.586 A:middle
If we would just turn this on by

00:42:50.586 --> 00:42:51.906 A:middle
default for all of you, it would

00:42:51.906 --> 00:42:53.796 A:middle
probably break a few things, so

00:42:53.796 --> 00:42:56.246 A:middle
you need to opt into this.

00:42:56.326 --> 00:42:58.076 A:middle
And by opting in means you

00:42:58.076 --> 00:42:59.266 A:middle
should check that the security

00:42:59.266 --> 00:43:01.356 A:middle
works-- you can try to pull off

00:42:59.266 --> 00:43:01.356 A:middle
works-- you can try to pull off

00:43:01.356 --> 00:43:02.286 A:middle
an attack against your own

00:43:02.286 --> 00:43:03.486 A:middle
content, make sure that, yeah,

00:43:03.626 --> 00:43:05.006 A:middle
my content security policy is

00:43:05.006 --> 00:43:06.846 A:middle
defending me, good, and of

00:43:06.846 --> 00:43:07.736 A:middle
course test that the

00:43:07.736 --> 00:43:08.946 A:middle
functionality that should be

00:43:08.946 --> 00:43:09.706 A:middle
there is there.

00:43:11.826 --> 00:43:12.526 A:middle
We have a blog.

00:43:12.786 --> 00:43:14.286 A:middle
The WebKit project is an open

00:43:14.286 --> 00:43:15.016 A:middle
source project.

00:43:15.276 --> 00:43:16.576 A:middle
We have a blog where we talk

00:43:16.576 --> 00:43:17.856 A:middle
about these technologies and

00:43:17.856 --> 00:43:18.596 A:middle
other things.

00:43:18.966 --> 00:43:20.536 A:middle
This is where we'll update you

00:43:20.536 --> 00:43:22.056 A:middle
on those two last response

00:43:22.056 --> 00:43:22.446 A:middle
headers.

00:43:22.786 --> 00:43:24.626 A:middle
The cross-origin resource policy

00:43:24.626 --> 00:43:25.796 A:middle
and the cross-origin window

00:43:25.826 --> 00:43:26.296 A:middle
policy.

00:43:26.656 --> 00:43:28.156 A:middle
Because we're still discussing

00:43:28.156 --> 00:43:29.276 A:middle
those with the other browser

00:43:29.276 --> 00:43:30.786 A:middle
vendors, trying to make sure

00:43:30.786 --> 00:43:32.106 A:middle
that they're standard so that

00:43:32.436 --> 00:43:34.316 A:middle
the same response headers work

00:43:34.316 --> 00:43:35.756 A:middle
across all the browsers.

00:43:36.296 --> 00:43:37.896 A:middle
And so there might be slight

00:43:37.896 --> 00:43:40.656 A:middle
name changes or added attributes

00:43:40.656 --> 00:43:42.076 A:middle
that we still don't have here.

00:43:42.586 --> 00:43:44.736 A:middle
Also, it's so brand new that you

00:43:44.736 --> 00:43:46.016 A:middle
actually won't have access to

00:43:46.016 --> 00:43:48.166 A:middle
this until seed two or the

00:43:48.166 --> 00:43:48.936 A:middle
public seed.

00:43:49.476 --> 00:43:51.326 A:middle
We don't have full support for

00:43:51.326 --> 00:43:53.336 A:middle
these in the developer seed yet.

00:43:55.486 --> 00:43:56.496 A:middle
Quick shout out to these other

00:43:56.496 --> 00:43:56.946 A:middle
sessions.

00:43:57.096 --> 00:43:58.456 A:middle
Please come see us, including

00:43:58.456 --> 00:44:00.266 A:middle
me, at the Safari, WebKit, and

00:43:58.456 --> 00:44:00.266 A:middle
me, at the Safari, WebKit, and

00:44:00.266 --> 00:44:01.526 A:middle
Password AutoFill Lab tomorrow

00:44:01.526 --> 00:44:02.546 A:middle
at 2:00.

00:44:02.546 --> 00:44:04.256 A:middle
You can come there and discuss

00:44:04.256 --> 00:44:06.396 A:middle
with me or my co-workers how to

00:44:06.396 --> 00:44:07.766 A:middle
deploy these technologies and

00:44:07.766 --> 00:44:09.266 A:middle
make them work the best for you.

00:44:09.966 --> 00:44:11.116 A:middle
And there's also a session on

00:44:11.116 --> 00:44:13.336 A:middle
Friday that's more general on

00:44:13.336 --> 00:44:14.916 A:middle
what's new in Safari and WebKit.

00:44:16.366 --> 00:44:16.676 A:middle
Thank you.

00:44:17.516 --> 00:44:22.500 A:middle
[ Applause ]
