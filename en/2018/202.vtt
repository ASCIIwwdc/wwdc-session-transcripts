WEBVTT

00:00:06.516 --> 00:00:14.500 A:middle
[ Music ]

00:00:18.516 --> 00:00:24.456 A:middle
[ Applause ]

00:00:24.956 --> 00:00:25.896 A:middle
&gt;&gt; Alright, good morning.

00:00:26.406 --> 00:00:28.416 A:middle
Thanks so much for coming out

00:00:28.706 --> 00:00:30.316 A:middle
this morning to learn all about

00:00:30.516 --> 00:00:32.195 A:middle
what's new in Cocoa Touch.

00:00:33.456 --> 00:00:34.816 A:middle
Now normally, Eliza would join

00:00:34.816 --> 00:00:35.816 A:middle
me up here a little bit later

00:00:35.816 --> 00:00:37.556 A:middle
although this year actually

00:00:37.556 --> 00:00:38.446 A:middle
you're just going to be hearing

00:00:38.446 --> 00:00:38.846 A:middle
from me.

00:00:39.386 --> 00:00:41.036 A:middle
So, she'll be back in later

00:00:41.036 --> 00:00:41.216 A:middle
years.

00:00:41.216 --> 00:00:42.626 A:middle
Don't worry about it.

00:00:43.046 --> 00:00:44.236 A:middle
This morning we're going to talk

00:00:44.556 --> 00:00:46.046 A:middle
about things in three main

00:00:46.046 --> 00:00:46.596 A:middle
categories.

00:00:47.656 --> 00:00:48.466 A:middle
We're going to start with some

00:00:48.576 --> 00:00:50.436 A:middle
framework updates including

00:00:50.436 --> 00:00:51.956 A:middle
things like performance and

00:00:51.956 --> 00:00:52.556 A:middle
security.

00:00:52.556 --> 00:00:54.376 A:middle
Then we're going to talk about

00:00:54.416 --> 00:00:56.476 A:middle
some API enhancements across a

00:00:56.476 --> 00:00:57.876 A:middle
number of different existing

00:00:57.876 --> 00:01:00.056 A:middle
APIs in the SDK, including

00:00:57.876 --> 00:01:00.056 A:middle
APIs in the SDK, including

00:01:00.056 --> 00:01:01.566 A:middle
notifications and messages.

00:01:02.566 --> 00:01:04.025 A:middle
And then we're going to end with

00:01:04.156 --> 00:01:05.086 A:middle
Siri Shortcuts.

00:01:05.816 --> 00:01:07.126 A:middle
So let's get started with our

00:01:07.196 --> 00:01:08.936 A:middle
first topic: Performance

00:01:09.196 --> 00:01:09.776 A:middle
Updates.

00:01:11.106 --> 00:01:12.716 A:middle
Now we're going to talk about

00:01:12.716 --> 00:01:14.506 A:middle
performance across three main

00:01:14.506 --> 00:01:17.876 A:middle
areas: scrolling, memory, and

00:01:17.876 --> 00:01:18.546 A:middle
auto layout.

00:01:19.786 --> 00:01:21.726 A:middle
Now before we get in to it, it's

00:01:21.726 --> 00:01:23.106 A:middle
important to keep in mind one

00:01:23.106 --> 00:01:24.146 A:middle
little bit of background

00:01:24.146 --> 00:01:25.496 A:middle
information about scrolling.

00:01:27.796 --> 00:01:30.076 A:middle
Scrolling on iOS follows a

00:01:30.156 --> 00:01:31.836 A:middle
pretty common pattern in most

00:01:31.876 --> 00:01:32.236 A:middle
places.

00:01:32.876 --> 00:01:34.536 A:middle
We load content to be displayed

00:01:34.536 --> 00:01:36.336 A:middle
into the views and then we're

00:01:36.336 --> 00:01:38.096 A:middle
just moving that content around.

00:01:38.846 --> 00:01:39.666 A:middle
And while we're moving it

00:01:39.666 --> 00:01:41.546 A:middle
around, most of those frames are

00:01:41.546 --> 00:01:43.036 A:middle
really cheap to generate because

00:01:43.036 --> 00:01:44.376 A:middle
we don't have to load anything

00:01:44.376 --> 00:01:44.656 A:middle
new.

00:01:45.656 --> 00:01:47.226 A:middle
But every now and then, a new

00:01:47.226 --> 00:01:49.506 A:middle
view first becomes visible and

00:01:49.506 --> 00:01:51.096 A:middle
the one frame when that first

00:01:51.096 --> 00:01:53.206 A:middle
happens is quite a bit more

00:01:53.206 --> 00:01:54.816 A:middle
expensive to generate than those

00:01:54.816 --> 00:01:55.776 A:middle
other cheaper ones.

00:01:56.286 --> 00:01:58.656 A:middle
Now, of course, once that one

00:01:58.696 --> 00:02:00.476 A:middle
frame is loaded, we're just back

00:01:58.696 --> 00:02:00.476 A:middle
frame is loaded, we're just back

00:02:00.526 --> 00:02:02.246 A:middle
to moving content around, so the

00:02:02.246 --> 00:02:03.696 A:middle
amount of work we do on the CPU

00:02:03.696 --> 00:02:05.236 A:middle
goes back to being pretty small

00:02:05.236 --> 00:02:06.276 A:middle
for most of that other

00:02:06.276 --> 00:02:06.806 A:middle
scrolling.

00:02:07.386 --> 00:02:10.235 A:middle
So what's happening during that

00:02:10.295 --> 00:02:11.676 A:middle
really expensive frame that

00:02:11.676 --> 00:02:13.446 A:middle
causes that one to be more than

00:02:13.446 --> 00:02:14.116 A:middle
all the others?

00:02:14.776 --> 00:02:15.986 A:middle
Well, let's take a look from the

00:02:16.026 --> 00:02:18.096 A:middle
perspective UI Table View but

00:02:18.096 --> 00:02:19.276 A:middle
everything we look at here will

00:02:19.276 --> 00:02:20.326 A:middle
really be the same for UI

00:02:20.326 --> 00:02:22.066 A:middle
Collection View or really any of

00:02:22.066 --> 00:02:23.226 A:middle
your own custom views that you

00:02:23.226 --> 00:02:24.786 A:middle
may build that behave in similar

00:02:24.786 --> 00:02:25.156 A:middle
ways.

00:02:25.866 --> 00:02:28.706 A:middle
So the work in that expensive

00:02:28.756 --> 00:02:30.386 A:middle
frame probably starts in your

00:02:30.386 --> 00:02:32.296 A:middle
implementation of TableView,

00:02:32.396 --> 00:02:33.616 A:middle
cell For Row At index Path

00:02:33.676 --> 00:02:34.306 A:middle
delegate method.

00:02:34.906 --> 00:02:36.906 A:middle
Now the first thing we're going

00:02:36.906 --> 00:02:38.416 A:middle
to do in there is get the cell

00:02:38.416 --> 00:02:39.316 A:middle
that we want to display.

00:02:39.746 --> 00:02:40.786 A:middle
And so we're going to try and

00:02:40.856 --> 00:02:42.166 A:middle
dequeue it ideally from the

00:02:42.166 --> 00:02:44.666 A:middle
reuse queue although if one is

00:02:44.666 --> 00:02:45.966 A:middle
not available already in the

00:02:45.966 --> 00:02:46.936 A:middle
queue, we might actually have to

00:02:46.936 --> 00:02:48.326 A:middle
do some memory allocation in

00:02:48.326 --> 00:02:50.176 A:middle
order to get it ready.

00:02:51.036 --> 00:02:52.196 A:middle
Once we have the cell, we're

00:02:52.196 --> 00:02:53.446 A:middle
then going to populate it with

00:02:53.446 --> 00:02:54.316 A:middle
your model data.

00:02:54.916 --> 00:02:56.496 A:middle
Now how expensive that is will

00:02:56.496 --> 00:02:57.686 A:middle
vary depending on your

00:02:57.686 --> 00:02:59.496 A:middle
application but it can be

00:02:59.496 --> 00:03:01.476 A:middle
including a fairly large amount

00:02:59.496 --> 00:03:01.476 A:middle
including a fairly large amount

00:03:01.476 --> 00:03:02.856 A:middle
of expensive operations like

00:03:02.896 --> 00:03:05.416 A:middle
reading files, loading data out

00:03:05.416 --> 00:03:06.916 A:middle
of databases, or other things of

00:03:06.916 --> 00:03:07.516 A:middle
that nature.

00:03:07.936 --> 00:03:09.056 A:middle
So you'll definitely want to

00:03:09.056 --> 00:03:10.536 A:middle
look at the expense here in your

00:03:10.536 --> 00:03:13.396 A:middle
own apps but it tends to be this

00:03:13.396 --> 00:03:14.616 A:middle
is where a good portion of it

00:03:14.926 --> 00:03:15.686 A:middle
will exist.

00:03:17.276 --> 00:03:18.956 A:middle
Now, you may think looking here

00:03:18.956 --> 00:03:19.936 A:middle
that that's the end of the

00:03:19.936 --> 00:03:21.766 A:middle
expensive work but even once you

00:03:21.766 --> 00:03:23.006 A:middle
return from this method, there's

00:03:23.006 --> 00:03:24.316 A:middle
actually more work that has to

00:03:24.376 --> 00:03:25.956 A:middle
happen in order to get the cell

00:03:25.956 --> 00:03:27.086 A:middle
prepared to have it show up on

00:03:27.086 --> 00:03:27.506 A:middle
screen.

00:03:28.206 --> 00:03:29.786 A:middle
So, of course, next, we have to

00:03:29.786 --> 00:03:31.306 A:middle
lay out all of the content in

00:03:31.306 --> 00:03:31.836 A:middle
that cell.

00:03:32.336 --> 00:03:33.936 A:middle
We need to size all the views

00:03:33.936 --> 00:03:34.866 A:middle
and position them in the right

00:03:34.926 --> 00:03:35.686 A:middle
spot.

00:03:36.086 --> 00:03:37.276 A:middle
Now, this can actually be a

00:03:37.276 --> 00:03:38.476 A:middle
pretty substantial amount of the

00:03:38.476 --> 00:03:39.736 A:middle
total time that we're spending

00:03:39.736 --> 00:03:41.176 A:middle
because it can include other

00:03:41.176 --> 00:03:42.946 A:middle
expensive operations like

00:03:43.036 --> 00:03:44.666 A:middle
measuring text.

00:03:45.296 --> 00:03:46.886 A:middle
Once everything is properly

00:03:46.886 --> 00:03:48.666 A:middle
sized and positioned, then it's

00:03:48.666 --> 00:03:50.736 A:middle
time to generate any content

00:03:50.736 --> 00:03:52.276 A:middle
that would need to be drawn

00:03:52.276 --> 00:03:54.116 A:middle
using drawing calls and to do

00:03:54.116 --> 00:03:55.606 A:middle
that we have to call draw Rect

00:03:55.606 --> 00:03:57.246 A:middle
on all of the subviews within

00:03:57.246 --> 00:03:57.746 A:middle
that cell.

00:03:58.276 --> 00:03:59.816 A:middle
Again, this can be a pretty

00:03:59.816 --> 00:04:01.216 A:middle
large amount of the time because

00:03:59.816 --> 00:04:01.216 A:middle
large amount of the time because

00:04:01.216 --> 00:04:03.036 A:middle
we'll also be doing things like

00:04:03.036 --> 00:04:04.426 A:middle
drawing text.

00:04:05.536 --> 00:04:07.196 A:middle
So overall, there's a lot of

00:04:07.196 --> 00:04:08.506 A:middle
work that has to happen across

00:04:08.646 --> 00:04:11.436 A:middle
this whole piece of code and it

00:04:11.436 --> 00:04:12.826 A:middle
has to happen in a really short

00:04:12.826 --> 00:04:13.696 A:middle
period of time.

00:04:14.126 --> 00:04:15.656 A:middle
On our 60-hertz devices, you

00:04:15.656 --> 00:04:17.565 A:middle
have 16 milliseconds to complete

00:04:17.565 --> 00:04:19.046 A:middle
all this work in order to make

00:04:19.046 --> 00:04:20.726 A:middle
sure you don't drop any frames,

00:04:20.726 --> 00:04:22.296 A:middle
and maintain smooth scrolling.

00:04:23.056 --> 00:04:25.346 A:middle
On our 12-hertz iPads, on the

00:04:25.346 --> 00:04:27.836 A:middle
iPad Pro, you have only 8

00:04:27.836 --> 00:04:29.256 A:middle
milliseconds to complete all of

00:04:29.256 --> 00:04:29.696 A:middle
that work.

00:04:30.166 --> 00:04:31.736 A:middle
So, it really needs to be done

00:04:31.816 --> 00:04:32.956 A:middle
as quickly as possible.

00:04:34.226 --> 00:04:36.126 A:middle
Now, to help with that, in iOS

00:04:36.326 --> 00:04:37.796 A:middle
10, we introduced a cell

00:04:37.836 --> 00:04:40.096 A:middle
prefetching API and the idea

00:04:40.096 --> 00:04:42.186 A:middle
with the prefetch API is to take

00:04:42.256 --> 00:04:43.906 A:middle
some of this work, populating

00:04:43.906 --> 00:04:45.756 A:middle
your cell with model data, and

00:04:45.826 --> 00:04:47.086 A:middle
pull it out of this critical

00:04:47.086 --> 00:04:48.746 A:middle
section that's happening on

00:04:48.746 --> 00:04:50.916 A:middle
demand in that short window, do

00:04:50.916 --> 00:04:52.646 A:middle
it earlier, and do it on a

00:04:52.646 --> 00:04:53.796 A:middle
background thread so it can

00:04:53.796 --> 00:04:55.386 A:middle
happen asynchronously with some

00:04:55.386 --> 00:04:57.036 A:middle
of the other work, in particular

00:04:57.036 --> 00:04:58.656 A:middle
those cheaper scrolling frames

00:04:58.656 --> 00:04:59.286 A:middle
we talked about.

00:05:00.586 --> 00:05:02.296 A:middle
Now adopting this is really

00:05:02.296 --> 00:05:02.676 A:middle
easy.

00:05:03.076 --> 00:05:04.736 A:middle
It's just a UI Table View Data

00:05:04.736 --> 00:05:06.976 A:middle
Source Prefetching protocol and

00:05:06.976 --> 00:05:08.786 A:middle
it only has two methods, only

00:05:08.786 --> 00:05:09.766 A:middle
one of which is actually

00:05:09.766 --> 00:05:10.346 A:middle
required.

00:05:10.916 --> 00:05:12.196 A:middle
And the idea here is to move

00:05:12.236 --> 00:05:13.536 A:middle
some of that expensive work of

00:05:13.536 --> 00:05:14.956 A:middle
loading things from files or

00:05:14.956 --> 00:05:17.626 A:middle
reading your database into here

00:05:17.626 --> 00:05:18.766 A:middle
so that you don't have to do it

00:05:18.766 --> 00:05:19.416 A:middle
on demand.

00:05:19.636 --> 00:05:21.436 A:middle
You data is already prepared

00:05:21.596 --> 00:05:22.736 A:middle
when the cell is needed for

00:05:22.736 --> 00:05:22.956 A:middle
display.

00:05:23.126 --> 00:05:28.346 A:middle
So this in most cases can be a

00:05:28.406 --> 00:05:31.346 A:middle
really big win although while we

00:05:31.346 --> 00:05:32.606 A:middle
were looking at some of our own

00:05:32.606 --> 00:05:34.546 A:middle
apps in iOS 12, we actually

00:05:34.546 --> 00:05:36.456 A:middle
noticed a case where this was

00:05:36.516 --> 00:05:38.006 A:middle
causing an issue instead of

00:05:38.006 --> 00:05:38.546 A:middle
helping us.

00:05:39.146 --> 00:05:40.236 A:middle
So let's take a look at what

00:05:40.236 --> 00:05:42.846 A:middle
that looked like.

00:05:43.126 --> 00:05:45.476 A:middle
Now here's an example of a trace

00:05:45.476 --> 00:05:47.156 A:middle
that we took while scrolling on

00:05:47.156 --> 00:05:48.236 A:middle
an iPhone 6 Plus.

00:05:49.176 --> 00:05:50.986 A:middle
The vertical bars across the

00:05:51.046 --> 00:05:53.166 A:middle
top, those represent frames that

00:05:53.166 --> 00:05:54.166 A:middle
we want to display.

00:05:55.006 --> 00:05:56.506 A:middle
The alternating light and dark

00:05:56.586 --> 00:05:58.246 A:middle
blue colors represent frames

00:05:58.246 --> 00:05:59.896 A:middle
that we did swap to the display

00:05:59.936 --> 00:06:01.096 A:middle
as they were changing.

00:05:59.936 --> 00:06:01.096 A:middle
as they were changing.

00:06:01.096 --> 00:06:03.556 A:middle
And that double wide light blue

00:06:03.556 --> 00:06:05.806 A:middle
bar, that is a place where we

00:06:05.846 --> 00:06:08.386 A:middle
drew the same frame for two full

00:06:08.436 --> 00:06:09.196 A:middle
frame durations.

00:06:09.946 --> 00:06:11.306 A:middle
So for a customer looking at the

00:06:11.306 --> 00:06:12.556 A:middle
device while this was happening,

00:06:12.556 --> 00:06:14.156 A:middle
that looked like a dropped frame

00:06:14.246 --> 00:06:15.456 A:middle
or a scrolling hitch, which

00:06:15.456 --> 00:06:16.486 A:middle
obviously is what we're trying

00:06:16.486 --> 00:06:16.916 A:middle
to avoid.

00:06:18.276 --> 00:06:19.116 A:middle
So what was happening in this

00:06:19.146 --> 00:06:19.386 A:middle
case?

00:06:20.276 --> 00:06:22.296 A:middle
Well, here you can see that red

00:06:22.426 --> 00:06:23.996 A:middle
bar is representing the time

00:06:23.996 --> 00:06:24.716 A:middle
that we're spending in the

00:06:24.716 --> 00:06:26.126 A:middle
critical section we just talked

00:06:26.126 --> 00:06:27.656 A:middle
about, all the self-[inaudible]

00:06:27.746 --> 00:06:29.646 A:middle
index path, layout, and drawing.

00:06:30.206 --> 00:06:31.396 A:middle
And here, it's actually taking

00:06:31.396 --> 00:06:33.166 A:middle
longer than the 16 milliseconds

00:06:33.166 --> 00:06:34.206 A:middle
we had to draw the frame.

00:06:34.946 --> 00:06:36.456 A:middle
Now because the device can only

00:06:36.456 --> 00:06:39.216 A:middle
swap new frames onto the screen

00:06:39.216 --> 00:06:41.966 A:middle
at fixed positions in time, once

00:06:41.966 --> 00:06:43.376 A:middle
we miss that deadline, we ended

00:06:43.376 --> 00:06:45.196 A:middle
up displaying the same frame for

00:06:45.196 --> 00:06:46.776 A:middle
two full durations, which was

00:06:46.776 --> 00:06:47.526 A:middle
obviously not great.

00:06:48.206 --> 00:06:49.746 A:middle
So why did that happen here?

00:06:49.746 --> 00:06:50.696 A:middle
In this case, we're looking at

00:06:50.696 --> 00:06:52.136 A:middle
an app where we actually had

00:06:52.136 --> 00:06:53.706 A:middle
implemented the cell prefetching

00:06:53.706 --> 00:06:55.106 A:middle
method so our data should've

00:06:55.106 --> 00:06:55.606 A:middle
been ready.

00:06:55.806 --> 00:06:56.956 A:middle
Ideally, this could've been done

00:06:56.956 --> 00:06:57.466 A:middle
more quickly.

00:06:58.346 --> 00:06:59.256 A:middle
Well, if we look at a little

00:06:59.256 --> 00:07:00.286 A:middle
more of the trace, we can see

00:06:59.256 --> 00:07:00.286 A:middle
more of the trace, we can see

00:07:00.286 --> 00:07:01.066 A:middle
what was going on.

00:07:01.866 --> 00:07:03.326 A:middle
The cell prefetching API was

00:07:03.436 --> 00:07:05.536 A:middle
being called at the same time

00:07:05.536 --> 00:07:06.826 A:middle
that we were requesting the

00:07:06.826 --> 00:07:07.496 A:middle
current cell.

00:07:08.056 --> 00:07:09.326 A:middle
Now it wasn't being called for

00:07:09.326 --> 00:07:10.626 A:middle
the data for the current cell.

00:07:10.626 --> 00:07:11.706 A:middle
It was being called for data

00:07:11.706 --> 00:07:12.976 A:middle
that we might need in a future

00:07:12.976 --> 00:07:14.706 A:middle
cell, but it was getting run at

00:07:14.736 --> 00:07:15.606 A:middle
the same time.

00:07:15.976 --> 00:07:17.596 A:middle
And so there was now contention

00:07:17.596 --> 00:07:19.616 A:middle
for the CPU as we tried to both

00:07:19.616 --> 00:07:21.766 A:middle
load the current frame and also

00:07:21.766 --> 00:07:23.146 A:middle
load data for a future frame

00:07:23.146 --> 00:07:24.276 A:middle
that we don't actually need yet.

00:07:25.736 --> 00:07:27.006 A:middle
So because of that contention,

00:07:27.006 --> 00:07:28.846 A:middle
it actually caused both tasks to

00:07:28.846 --> 00:07:29.996 A:middle
take a little bit longer.

00:07:30.666 --> 00:07:33.126 A:middle
Now in iOS 12, we're much more

00:07:33.126 --> 00:07:35.226 A:middle
intelligent about scheduling

00:07:35.956 --> 00:07:37.166 A:middle
these background prefetch

00:07:37.166 --> 00:07:39.046 A:middle
operations so that rather than

00:07:39.096 --> 00:07:40.226 A:middle
happening concurrently and

00:07:40.286 --> 00:07:42.056 A:middle
causing some CPU contention,

00:07:42.386 --> 00:07:43.776 A:middle
they'll now happen serially,

00:07:44.136 --> 00:07:45.176 A:middle
shortening the time that you

00:07:45.176 --> 00:07:47.626 A:middle
need to take to load the current

00:07:47.626 --> 00:07:49.486 A:middle
cell and helping avoid dropped

00:07:49.486 --> 00:07:50.886 A:middle
frames in many cases.

00:07:52.516 --> 00:07:56.456 A:middle
[ Applause ]

00:07:56.956 --> 00:07:58.016 A:middle
So once we had that fixed, we

00:07:58.016 --> 00:08:00.086 A:middle
kept profiling our apps and we

00:07:58.016 --> 00:08:00.086 A:middle
kept profiling our apps and we

00:08:00.086 --> 00:08:01.846 A:middle
actually found another case

00:08:01.846 --> 00:08:02.756 A:middle
where there was a bit of a

00:08:02.756 --> 00:08:04.236 A:middle
surprising cause of some dropped

00:08:04.236 --> 00:08:04.676 A:middle
frames.

00:08:05.336 --> 00:08:07.316 A:middle
Now what we found was that when

00:08:07.316 --> 00:08:09.096 A:middle
the device was not under load,

00:08:09.396 --> 00:08:10.276 A:middle
there was no background

00:08:10.276 --> 00:08:12.016 A:middle
activity, all we were doing was

00:08:12.016 --> 00:08:13.056 A:middle
a little bit of scrolling in the

00:08:13.056 --> 00:08:13.726 A:middle
foreground app.

00:08:14.346 --> 00:08:15.916 A:middle
Counterintuitively, we could

00:08:15.916 --> 00:08:18.336 A:middle
actually drop more frames than

00:08:18.336 --> 00:08:19.896 A:middle
times when there was some small

00:08:19.896 --> 00:08:21.226 A:middle
amount of light background work

00:08:21.266 --> 00:08:21.766 A:middle
going on.

00:08:22.396 --> 00:08:23.536 A:middle
That didn't really make a lot of

00:08:23.536 --> 00:08:23.866 A:middle
sense.

00:08:24.366 --> 00:08:25.636 A:middle
And to understand why it was

00:08:25.636 --> 00:08:27.306 A:middle
happening, we had to drop down a

00:08:27.306 --> 00:08:29.126 A:middle
level and take a look at the

00:08:29.126 --> 00:08:31.736 A:middle
behavior of the CPU when it was

00:08:31.736 --> 00:08:33.096 A:middle
scheduling our workloads.

00:08:33.096 --> 00:08:34.876 A:middle
So let's take a look at another

00:08:34.876 --> 00:08:35.196 A:middle
trace.

00:08:36.306 --> 00:08:37.155 A:middle
Here, we've got the same

00:08:37.155 --> 00:08:37.836 A:middle
situation.

00:08:38.206 --> 00:08:39.836 A:middle
Double wide blue bar is causing

00:08:39.836 --> 00:08:42.096 A:middle
us to drop a frame or rather is

00:08:42.096 --> 00:08:42.746 A:middle
our dropped frame.

00:08:43.506 --> 00:08:45.326 A:middle
Now here we can see a graph of

00:08:45.326 --> 00:08:47.086 A:middle
our CPU's performance over time.

00:08:47.686 --> 00:08:49.176 A:middle
Now during most of those cheap

00:08:49.256 --> 00:08:50.876 A:middle
frames, our CPU performance is

00:08:50.876 --> 00:08:52.116 A:middle
staying pretty low.

00:08:52.366 --> 00:08:53.496 A:middle
There's no background work going

00:08:53.496 --> 00:08:53.806 A:middle
on.

00:08:53.806 --> 00:08:55.256 A:middle
All we're doing is scrolling

00:08:55.256 --> 00:08:56.896 A:middle
things and that's exactly what

00:08:56.896 --> 00:08:58.416 A:middle
you would want because when

00:08:58.416 --> 00:08:59.976 A:middle
we're not doing expensive work

00:08:59.976 --> 00:09:01.556 A:middle
for scrolling, you want to keep

00:08:59.976 --> 00:09:01.556 A:middle
for scrolling, you want to keep

00:09:01.606 --> 00:09:04.196 A:middle
the CPU as low as possible to

00:09:04.196 --> 00:09:05.186 A:middle
preserve battery life.

00:09:05.526 --> 00:09:06.246 A:middle
So that was great.

00:09:07.006 --> 00:09:08.566 A:middle
What wasn't great is that it

00:09:08.646 --> 00:09:10.176 A:middle
took a little bit of time before

00:09:10.176 --> 00:09:11.226 A:middle
it could ramp up.

00:09:11.426 --> 00:09:12.716 A:middle
You heard about this yesterday

00:09:12.816 --> 00:09:14.566 A:middle
in the keynote.

00:09:14.726 --> 00:09:17.396 A:middle
Now when it did finally ramp up,

00:09:17.396 --> 00:09:18.876 A:middle
it was already too late to have

00:09:18.876 --> 00:09:20.126 A:middle
completed the work to load the

00:09:20.126 --> 00:09:21.606 A:middle
cell that we needed to display

00:09:21.676 --> 00:09:23.326 A:middle
and so we ended up missing that

00:09:23.376 --> 00:09:24.016 A:middle
frame again.

00:09:24.806 --> 00:09:26.446 A:middle
Now because we own the full

00:09:26.446 --> 00:09:27.616 A:middle
software stack from top to

00:09:27.616 --> 00:09:29.976 A:middle
bottom, in iOS 12 we took all

00:09:29.976 --> 00:09:31.316 A:middle
the information we have in the

00:09:31.436 --> 00:09:33.606 A:middle
high-level UIKit framework about

00:09:33.676 --> 00:09:34.916 A:middle
what scrolling is happening and

00:09:34.916 --> 00:09:36.446 A:middle
when these critical sections are

00:09:36.446 --> 00:09:38.016 A:middle
occurring and pass that

00:09:38.016 --> 00:09:39.706 A:middle
information all the way down to

00:09:39.706 --> 00:09:41.296 A:middle
the low-level CPU performance

00:09:41.326 --> 00:09:42.996 A:middle
controller so that it can now

00:09:43.116 --> 00:09:45.116 A:middle
much more intelligently reason

00:09:45.336 --> 00:09:46.546 A:middle
about the work that's happening

00:09:46.756 --> 00:09:48.176 A:middle
and predict both when these

00:09:48.236 --> 00:09:50.346 A:middle
bursts will occur and how much

00:09:50.346 --> 00:09:51.926 A:middle
CPU performance will be required

00:09:52.006 --> 00:09:53.626 A:middle
to meet the deadline for the

00:09:53.626 --> 00:09:55.066 A:middle
historical demand that your app

00:09:55.066 --> 00:09:55.596 A:middle
has had.

00:09:56.486 --> 00:09:58.136 A:middle
So once that change happens,

00:09:58.716 --> 00:10:00.346 A:middle
where the load starts right

00:09:58.716 --> 00:10:00.346 A:middle
where the load starts right

00:10:00.346 --> 00:10:02.066 A:middle
here, we end up seeing that

00:10:02.066 --> 00:10:03.676 A:middle
we've ramped the CPU far more

00:10:03.676 --> 00:10:05.746 A:middle
frequently or, far more quickly,

00:10:05.806 --> 00:10:07.206 A:middle
to the exact amount of perform

00:10:07.206 --> 00:10:08.736 A:middle
it needs to make sure that we

00:10:08.736 --> 00:10:10.426 A:middle
hit that deadline and don't drop

00:10:10.476 --> 00:10:10.976 A:middle
frames.

00:10:12.286 --> 00:10:13.806 A:middle
This has caused a really great

00:10:13.806 --> 00:10:14.976 A:middle
improvement across many

00:10:14.976 --> 00:10:16.226 A:middle
different scrolling scenarios

00:10:16.226 --> 00:10:16.976 A:middle
around iOS.

00:10:20.956 --> 00:10:24.086 A:middle
So all of your applications will

00:10:24.086 --> 00:10:25.666 A:middle
get all of this enhancements,

00:10:25.666 --> 00:10:27.146 A:middle
both of them and a number of

00:10:27.146 --> 00:10:28.526 A:middle
others, for free with no

00:10:28.526 --> 00:10:29.686 A:middle
additional work on your part,

00:10:30.156 --> 00:10:31.266 A:middle
but there are a couple of things

00:10:31.266 --> 00:10:32.466 A:middle
that you can do to make sure

00:10:32.466 --> 00:10:33.666 A:middle
that you get the most out of

00:10:33.666 --> 00:10:34.136 A:middle
both of them.

00:10:34.996 --> 00:10:36.216 A:middle
So first of all, if you haven't

00:10:36.216 --> 00:10:37.666 A:middle
already adopted that tableView

00:10:37.666 --> 00:10:39.116 A:middle
cell prefetching API or the

00:10:39.116 --> 00:10:40.596 A:middle
Collection View one, definitely

00:10:40.596 --> 00:10:42.096 A:middle
look into that because having

00:10:42.096 --> 00:10:43.336 A:middle
your data ready is one of the

00:10:43.336 --> 00:10:44.596 A:middle
best things you can do to make

00:10:44.596 --> 00:10:46.076 A:middle
sure that loading cells is as

00:10:46.076 --> 00:10:46.836 A:middle
quick as possible.

00:10:47.406 --> 00:10:50.506 A:middle
Of course, it's also important

00:10:50.506 --> 00:10:51.856 A:middle
that you profile your full

00:10:51.856 --> 00:10:53.116 A:middle
critical sections of your cell

00:10:53.116 --> 00:10:55.186 A:middle
loading and reduce that demand

00:10:55.186 --> 00:10:56.076 A:middle
as much as you can.

00:10:56.076 --> 00:10:58.966 A:middle
iOS 12 will now try to match the

00:10:58.966 --> 00:11:00.416 A:middle
CPU performance to the needs of

00:10:58.966 --> 00:11:00.416 A:middle
CPU performance to the needs of

00:11:00.416 --> 00:11:01.546 A:middle
your application during this

00:11:01.616 --> 00:11:03.396 A:middle
period but the best thing that

00:11:03.396 --> 00:11:04.996 A:middle
you can do will always remain to

00:11:04.996 --> 00:11:06.016 A:middle
reduce the amount of work that

00:11:06.016 --> 00:11:07.646 A:middle
you have to do to make sure that

00:11:07.646 --> 00:11:09.076 A:middle
you give your customers a really

00:11:09.146 --> 00:11:10.336 A:middle
smooth scrolling experience.

00:11:11.676 --> 00:11:13.416 A:middle
So that's scrolling in iOS 12.

00:11:14.396 --> 00:11:16.056 A:middle
Next, let's turn our attention

00:11:16.096 --> 00:11:17.416 A:middle
to our next performance topic:

00:11:18.006 --> 00:11:18.416 A:middle
memory.

00:11:19.626 --> 00:11:21.166 A:middle
Now, you might wonder why memory

00:11:21.166 --> 00:11:22.206 A:middle
is showing up right here in the

00:11:22.206 --> 00:11:23.176 A:middle
middle of a performance

00:11:23.226 --> 00:11:25.726 A:middle
discussion, but I assure you

00:11:25.726 --> 00:11:26.966 A:middle
that that actually makes a lot

00:11:26.966 --> 00:11:28.746 A:middle
of sense and, in fact, the

00:11:28.746 --> 00:11:30.816 A:middle
reason is because memory really

00:11:30.816 --> 00:11:32.026 A:middle
is performance.

00:11:32.746 --> 00:11:34.106 A:middle
The more memory that your app is

00:11:34.196 --> 00:11:36.066 A:middle
going to use, the more that it

00:11:36.066 --> 00:11:37.386 A:middle
will have an impact on the

00:11:37.386 --> 00:11:38.896 A:middle
performance of your application.

00:11:39.626 --> 00:11:41.756 A:middle
So to understand why, let's take

00:11:41.756 --> 00:11:43.756 A:middle
a look at a really high-level

00:11:43.756 --> 00:11:45.326 A:middle
overview of what the overall

00:11:45.326 --> 00:11:46.996 A:middle
memory on the system might look

00:11:46.996 --> 00:11:48.296 A:middle
like in a common situation.

00:11:49.136 --> 00:11:50.576 A:middle
So, of course, you can see here,

00:11:50.576 --> 00:11:52.186 A:middle
a lot of the system's memory is

00:11:52.186 --> 00:11:54.536 A:middle
being used by other applications

00:11:54.536 --> 00:11:55.666 A:middle
and the system itself.

00:11:56.276 --> 00:11:57.706 A:middle
Your app is using some amount

00:11:57.736 --> 00:11:58.246 A:middle
for the moment.

00:11:58.676 --> 00:11:59.906 A:middle
And there's some that's being

00:11:59.906 --> 00:12:02.136 A:middle
kept free to service new

00:11:59.906 --> 00:12:02.136 A:middle
kept free to service new

00:12:02.136 --> 00:12:03.646 A:middle
allocation requests as they come

00:12:03.646 --> 00:12:03.876 A:middle
in.

00:12:04.546 --> 00:12:05.896 A:middle
Now, most of that memory is

00:12:05.896 --> 00:12:07.666 A:middle
probably not truly free.

00:12:07.666 --> 00:12:08.946 A:middle
It's likely including things

00:12:08.946 --> 00:12:11.006 A:middle
like caches or other things that

00:12:11.006 --> 00:12:12.426 A:middle
can be quickly thrown away to

00:12:12.426 --> 00:12:13.276 A:middle
make sure that the memory is

00:12:13.276 --> 00:12:15.276 A:middle
available to satisfy demand

00:12:15.486 --> 00:12:17.856 A:middle
right away but in general it's

00:12:17.856 --> 00:12:19.056 A:middle
probably actually being used for

00:12:19.056 --> 00:12:21.196 A:middle
something, but it is readily

00:12:21.196 --> 00:12:21.626 A:middle
available.

00:12:22.546 --> 00:12:23.556 A:middle
So let's look at what happens

00:12:23.556 --> 00:12:24.826 A:middle
when your application requests

00:12:24.826 --> 00:12:25.276 A:middle
some memory.

00:12:25.906 --> 00:12:26.716 A:middle
Maybe you'll make a small

00:12:26.716 --> 00:12:29.116 A:middle
request, something that can be

00:12:29.156 --> 00:12:30.376 A:middle
satisfied by the amount that's

00:12:30.486 --> 00:12:31.686 A:middle
currently available in that free

00:12:31.736 --> 00:12:31.956 A:middle
pool.

00:12:32.466 --> 00:12:33.516 A:middle
Well, if that's the case, it'll

00:12:33.516 --> 00:12:35.526 A:middle
be return right away to your app

00:12:35.526 --> 00:12:36.826 A:middle
and you can continue on with

00:12:36.826 --> 00:12:37.966 A:middle
your work.

00:12:39.256 --> 00:12:40.526 A:middle
Now, let's say, though, that

00:12:40.526 --> 00:12:42.136 A:middle
your application makes a larger

00:12:42.136 --> 00:12:44.326 A:middle
request, and maybe it doesn't

00:12:44.326 --> 00:12:45.756 A:middle
need it for a long period of

00:12:45.756 --> 00:12:47.186 A:middle
time, so you might not be real

00:12:47.186 --> 00:12:47.886 A:middle
worried about it.

00:12:48.246 --> 00:12:49.316 A:middle
Perhaps you're just going to

00:12:49.316 --> 00:12:50.866 A:middle
load an image off disc and

00:12:51.006 --> 00:12:52.656 A:middle
decompress it, perform some

00:12:52.656 --> 00:12:54.056 A:middle
quick operation on some of the

00:12:54.056 --> 00:12:55.536 A:middle
pixels and then throw it away.

00:12:55.876 --> 00:12:56.926 A:middle
So it seems like a quick

00:12:56.926 --> 00:12:57.976 A:middle
operation that you don't have to

00:12:57.976 --> 00:12:58.806 A:middle
worry too much about.

00:12:59.506 --> 00:13:00.406 A:middle
Well, we'll make that big

00:12:59.506 --> 00:13:00.406 A:middle
Well, we'll make that big

00:13:00.406 --> 00:13:02.826 A:middle
request and now that is more

00:13:02.826 --> 00:13:04.556 A:middle
memory that is currently easily

00:13:04.556 --> 00:13:05.916 A:middle
readily available to the system.

00:13:06.176 --> 00:13:07.596 A:middle
So it won't be able to satisfy

00:13:07.596 --> 00:13:09.156 A:middle
it immediately and we'll have to

00:13:09.156 --> 00:13:10.566 A:middle
go find that memory from

00:13:10.636 --> 00:13:11.216 A:middle
somewhere else.

00:13:12.206 --> 00:13:13.596 A:middle
And, in fact, the most likely

00:13:13.596 --> 00:13:15.436 A:middle
place to come from is from other

00:13:15.436 --> 00:13:17.966 A:middle
applications or things on the

00:13:18.536 --> 00:13:18.756 A:middle
system.

00:13:18.876 --> 00:13:20.156 A:middle
Now, that might not worry you

00:13:20.156 --> 00:13:21.106 A:middle
too much because you're trying

00:13:21.106 --> 00:13:22.106 A:middle
to get the memory for your app

00:13:22.106 --> 00:13:23.386 A:middle
right now, so you're not so

00:13:23.386 --> 00:13:24.376 A:middle
worried about what's happening

00:13:24.376 --> 00:13:24.906 A:middle
elsewhere.

00:13:25.536 --> 00:13:28.076 A:middle
But, of course, this will have

00:13:28.076 --> 00:13:29.356 A:middle
an impact on something else

00:13:29.436 --> 00:13:30.696 A:middle
later that your customers will

00:13:30.696 --> 00:13:32.066 A:middle
be expecting will be working,

00:13:32.636 --> 00:13:33.906 A:middle
but more importantly to you

00:13:33.906 --> 00:13:35.496 A:middle
right now, it will have an

00:13:35.496 --> 00:13:37.146 A:middle
impact on your app as well

00:13:37.146 --> 00:13:39.106 A:middle
because the system has to do

00:13:39.106 --> 00:13:40.906 A:middle
work to go get this memory for

00:13:40.906 --> 00:13:41.126 A:middle
you.

00:13:41.366 --> 00:13:42.666 A:middle
The fact that it's not readily

00:13:42.666 --> 00:13:44.776 A:middle
available means that the kernel

00:13:44.776 --> 00:13:46.936 A:middle
has to go find it and perform

00:13:46.936 --> 00:13:49.446 A:middle
operations on the CPU in order

00:13:49.446 --> 00:13:50.216 A:middle
to make it available.

00:13:50.726 --> 00:13:51.856 A:middle
And that time it's spending

00:13:51.856 --> 00:13:53.386 A:middle
getting that memory for you is

00:13:53.416 --> 00:13:54.796 A:middle
time that could be better spent

00:13:54.796 --> 00:13:56.086 A:middle
doing whatever your app does

00:13:56.156 --> 00:13:56.466 A:middle
best.

00:13:57.126 --> 00:13:58.656 A:middle
So finding ways to either chunk

00:13:58.686 --> 00:14:00.036 A:middle
these larger requests or just

00:13:58.686 --> 00:14:00.036 A:middle
these larger requests or just

00:14:00.036 --> 00:14:01.376 A:middle
reduce those overall peak

00:14:01.376 --> 00:14:03.376 A:middle
demands can actually have both a

00:14:03.496 --> 00:14:05.186 A:middle
big impact on the performance of

00:14:05.186 --> 00:14:07.236 A:middle
your app while you're using it

00:14:07.236 --> 00:14:08.816 A:middle
and also improve the customer

00:14:08.816 --> 00:14:10.366 A:middle
experience across other apps

00:14:10.426 --> 00:14:10.716 A:middle
later.

00:14:12.716 --> 00:14:14.006 A:middle
So there's many ways that you

00:14:14.006 --> 00:14:16.186 A:middle
can reduce the total memory

00:14:16.186 --> 00:14:17.806 A:middle
usage of your apps and starting

00:14:17.806 --> 00:14:19.146 A:middle
with a profile and instruments

00:14:19.146 --> 00:14:20.326 A:middle
is a great way to look at that.

00:14:20.746 --> 00:14:21.886 A:middle
But for this morning, we're just

00:14:21.886 --> 00:14:23.496 A:middle
going to take a look at one new

00:14:23.496 --> 00:14:25.306 A:middle
technique that iOS 12 brings

00:14:25.306 --> 00:14:26.666 A:middle
along that helps reduce the

00:14:26.666 --> 00:14:29.216 A:middle
memory usage of your apps and

00:14:29.216 --> 00:14:30.786 A:middle
that's Automatic Backing Stores.

00:14:31.856 --> 00:14:32.966 A:middle
So let's say we want to draw

00:14:32.966 --> 00:14:34.616 A:middle
this lazy prairie dog in

00:14:34.656 --> 00:14:36.356 A:middle
portrait mode on an iPhone X.

00:14:37.266 --> 00:14:38.826 A:middle
Now, how big is that going to

00:14:38.826 --> 00:14:38.893 A:middle
be?

00:14:39.436 --> 00:14:41.666 A:middle
Portrait mode on iPhone X, 375

00:14:41.736 --> 00:14:43.376 A:middle
points wide and, to preserve our

00:14:43.376 --> 00:14:45.346 A:middle
aspect ratio, it'll be 250

00:14:45.346 --> 00:14:46.176 A:middle
points tall.

00:14:46.706 --> 00:14:48.646 A:middle
So how much memory will that

00:14:48.646 --> 00:14:48.896 A:middle
use?

00:14:49.536 --> 00:14:54.956 A:middle
Well, 375 by 250 at 3x, with 64

00:14:54.956 --> 00:14:56.346 A:middle
bits per pixel because this is a

00:14:56.346 --> 00:14:58.226 A:middle
deep color device, is going to

00:14:58.226 --> 00:15:00.406 A:middle
be 2.2 megabytes of memory to

00:14:58.226 --> 00:15:00.406 A:middle
be 2.2 megabytes of memory to

00:15:00.406 --> 00:15:00.976 A:middle
draw a prairie dog.

00:15:02.096 --> 00:15:03.426 A:middle
That seems like a pretty decent

00:15:03.426 --> 00:15:05.186 A:middle
amount, but in this case that's

00:15:05.186 --> 00:15:06.586 A:middle
actually probably memory well

00:15:06.586 --> 00:15:06.966 A:middle
spent.

00:15:07.216 --> 00:15:08.306 A:middle
We're actually trying to

00:15:08.306 --> 00:15:10.226 A:middle
represent this full-fidelity

00:15:10.226 --> 00:15:11.816 A:middle
image and that's the amount of

00:15:11.816 --> 00:15:13.116 A:middle
memory that's needed to draw it

00:15:13.116 --> 00:15:13.736 A:middle
into this buffer.

00:15:14.086 --> 00:15:15.576 A:middle
So that's probably expected.

00:15:16.376 --> 00:15:17.736 A:middle
But now let's say that we were

00:15:17.736 --> 00:15:20.266 A:middle
going to draw a lower-fidelity

00:15:20.266 --> 00:15:21.316 A:middle
version of our prairie dog,

00:15:21.626 --> 00:15:22.606 A:middle
maybe something in black and

00:15:22.606 --> 00:15:23.416 A:middle
white that we were going to

00:15:23.416 --> 00:15:25.186 A:middle
sketch out with core graphics,

00:15:25.486 --> 00:15:26.556 A:middle
maybe it was drawn with an Apple

00:15:26.616 --> 00:15:27.666 A:middle
pencil on an iPad.

00:15:28.196 --> 00:15:29.096 A:middle
That might look something like

00:15:29.096 --> 00:15:29.456 A:middle
this.

00:15:30.496 --> 00:15:32.636 A:middle
So how much memory is our

00:15:32.866 --> 00:15:34.156 A:middle
low-fidelity prairie dog going

00:15:34.156 --> 00:15:34.606 A:middle
to use?

00:15:35.506 --> 00:15:37.556 A:middle
Well, it'll actually use the

00:15:37.556 --> 00:15:38.766 A:middle
exact same amount of memory.

00:15:39.266 --> 00:15:41.286 A:middle
Now here, that clearly is not as

00:15:41.286 --> 00:15:42.236 A:middle
good of a use of memory.

00:15:42.236 --> 00:15:43.306 A:middle
It's all grayscale.

00:15:43.796 --> 00:15:45.236 A:middle
All of that deep color

00:15:45.646 --> 00:15:47.436 A:middle
information is not even being

00:15:47.436 --> 00:15:48.736 A:middle
used in this image.

00:15:49.196 --> 00:15:50.416 A:middle
So hopefully we could do much

00:15:50.466 --> 00:15:53.456 A:middle
better and iOS 12 introduces

00:15:53.456 --> 00:15:54.906 A:middle
automatic backing store support

00:15:54.906 --> 00:15:57.456 A:middle
to help make that exactly be the

00:15:57.456 --> 00:15:57.686 A:middle
case.

00:15:58.766 --> 00:16:00.866 A:middle
So all of your views now that

00:15:58.766 --> 00:16:00.866 A:middle
So all of your views now that

00:16:00.866 --> 00:16:02.176 A:middle
implement draw Rect will have

00:16:02.296 --> 00:16:04.826 A:middle
their backing stores defined by

00:16:04.826 --> 00:16:06.126 A:middle
the depth of the content being

00:16:06.126 --> 00:16:06.986 A:middle
drawn into them.

00:16:07.376 --> 00:16:08.366 A:middle
So in this case where we're

00:16:08.366 --> 00:16:09.796 A:middle
using Core Graphics to sketch

00:16:09.796 --> 00:16:11.906 A:middle
out only grayscale content will

00:16:11.906 --> 00:16:13.396 A:middle
actually automatically use an

00:16:13.486 --> 00:16:15.186 A:middle
8-bit per pixel backing store

00:16:15.366 --> 00:16:17.156 A:middle
instead of a 64-bit per pixel

00:16:17.156 --> 00:16:17.436 A:middle
one.

00:16:17.946 --> 00:16:19.466 A:middle
This reduces the memory demand

00:16:19.466 --> 00:16:21.226 A:middle
for that drawn view by an order

00:16:21.226 --> 00:16:23.896 A:middle
of magnitude down to 275

00:16:24.146 --> 00:16:26.216 A:middle
kilobytes from 2.2 megabytes.

00:16:26.216 --> 00:16:28.806 A:middle
That's a really big improvement

00:16:28.806 --> 00:16:29.956 A:middle
across many different

00:16:29.956 --> 00:16:30.746 A:middle
applications, both yours and

00:16:30.816 --> 00:16:30.966 A:middle
ours.

00:16:31.516 --> 00:16:36.356 A:middle
[ Applause ]

00:16:36.856 --> 00:16:38.266 A:middle
So Automatic Backing Stores are

00:16:38.266 --> 00:16:40.206 A:middle
enabled by default for all apps

00:16:40.266 --> 00:16:41.646 A:middle
built with the iOS 12 SDK.

00:16:42.586 --> 00:16:44.806 A:middle
All implementations of draw Rect

00:16:44.806 --> 00:16:46.316 A:middle
on UIView will have this happen

00:16:46.396 --> 00:16:48.476 A:middle
automatically as well as all

00:16:48.476 --> 00:16:49.856 A:middle
content that you draw with UI

00:16:49.856 --> 00:16:51.406 A:middle
Graphics Image Renderer into

00:16:51.406 --> 00:16:52.316 A:middle
offscreen bitmaps.

00:16:53.156 --> 00:16:54.436 A:middle
Now in the case of UI Graphics

00:16:54.436 --> 00:16:55.856 A:middle
Image Renderer, we don't

00:16:55.856 --> 00:16:57.496 A:middle
necessarily know what you're

00:16:57.596 --> 00:16:58.896 A:middle
planning on doing with the image

00:16:58.896 --> 00:17:00.086 A:middle
that you get out at the end.

00:16:58.896 --> 00:17:00.086 A:middle
that you get out at the end.

00:17:00.606 --> 00:17:02.516 A:middle
So in cases where you actually

00:17:02.516 --> 00:17:03.866 A:middle
know that the automatic behavior

00:17:03.866 --> 00:17:05.675 A:middle
is not what you want, from Image

00:17:05.675 --> 00:17:07.146 A:middle
Renderer, you can specify the

00:17:07.146 --> 00:17:09.106 A:middle
specific backing store style

00:17:09.106 --> 00:17:10.636 A:middle
that you want, for example using

00:17:10.636 --> 00:17:12.386 A:middle
the new Range API to specify

00:17:12.715 --> 00:17:13.915 A:middle
specifically that you want an

00:17:13.915 --> 00:17:15.306 A:middle
extended-range image.

00:17:15.866 --> 00:17:17.626 A:middle
Now you can learn all about this

00:17:18.006 --> 00:17:20.306 A:middle
and many more techniques around

00:17:20.306 --> 00:17:22.205 A:middle
UI Image in the Images and

00:17:22.205 --> 00:17:23.796 A:middle
Graphics Best Practices Session

00:17:23.796 --> 00:17:24.455 A:middle
later this week.

00:17:24.915 --> 00:17:27.205 A:middle
So that's our second top for

00:17:27.205 --> 00:17:27.656 A:middle
performance.

00:17:28.425 --> 00:17:30.266 A:middle
Next, let's move on to Auto

00:17:30.266 --> 00:17:30.636 A:middle
Layout.

00:17:31.756 --> 00:17:34.766 A:middle
Now Auto Layout in iOS 10 has

00:17:34.986 --> 00:17:36.386 A:middle
some really great improvements.

00:17:36.866 --> 00:17:37.946 A:middle
The team has been working

00:17:37.946 --> 00:17:40.076 A:middle
incredibly hard to optimize Auto

00:17:40.076 --> 00:17:41.586 A:middle
Layout for your apps as much as

00:17:41.626 --> 00:17:42.076 A:middle
possible.

00:17:42.676 --> 00:17:44.726 A:middle
So you'll find that Auto Layout

00:17:44.726 --> 00:17:46.856 A:middle
is now faster by default in iOS

00:17:46.856 --> 00:17:47.146 A:middle
12.

00:17:47.556 --> 00:17:48.306 A:middle
We'll talk about a number of

00:17:48.306 --> 00:17:49.096 A:middle
ways that's the case.

00:17:49.996 --> 00:17:52.016 A:middle
But while they were profiling

00:17:52.016 --> 00:17:53.406 A:middle
and optimizing Auto Layout, they

00:17:53.406 --> 00:17:54.866 A:middle
also were looking across the

00:17:54.946 --> 00:17:56.476 A:middle
system at many of our own apps

00:17:56.476 --> 00:17:57.896 A:middle
and how they were using Auto

00:17:57.896 --> 00:17:59.686 A:middle
Layout and they found a number

00:17:59.686 --> 00:18:00.726 A:middle
of cases where there were some

00:17:59.686 --> 00:18:00.726 A:middle
of cases where there were some

00:18:00.726 --> 00:18:02.496 A:middle
common pitfalls that different

00:18:02.566 --> 00:18:03.546 A:middle
apps were falling in to.

00:18:04.026 --> 00:18:05.086 A:middle
So we'll show you some of the

00:18:05.156 --> 00:18:06.406 A:middle
simple best practices that you

00:18:06.406 --> 00:18:08.376 A:middle
can follow in order to optimize

00:18:08.376 --> 00:18:09.486 A:middle
your app layout as well.

00:18:10.796 --> 00:18:11.766 A:middle
So this morning, though, let's

00:18:11.816 --> 00:18:13.466 A:middle
look at how Auto Layout is

00:18:13.466 --> 00:18:16.306 A:middle
faster by default in iOS 12 by

00:18:16.386 --> 00:18:17.976 A:middle
looking at the asymptotic

00:18:18.016 --> 00:18:20.996 A:middle
behavior of Auto Layout as we

00:18:20.996 --> 00:18:23.336 A:middle
add more views in some common

00:18:23.446 --> 00:18:24.296 A:middle
user scenarios.

00:18:25.646 --> 00:18:26.346 A:middle
Now, we're looking at the

00:18:26.346 --> 00:18:28.196 A:middle
asymptotics because we really

00:18:28.196 --> 00:18:29.476 A:middle
want to look at what happens as

00:18:29.476 --> 00:18:31.056 A:middle
we dramatically increase the

00:18:31.056 --> 00:18:31.956 A:middle
number of views.

00:18:32.366 --> 00:18:33.776 A:middle
This can really make performance

00:18:33.776 --> 00:18:35.486 A:middle
issues show up quickly when we

00:18:35.486 --> 00:18:37.216 A:middle
go to a really like absurdly

00:18:37.216 --> 00:18:38.356 A:middle
large number of views.

00:18:38.866 --> 00:18:39.916 A:middle
That just helps us see it

00:18:39.916 --> 00:18:40.186 A:middle
though.

00:18:40.406 --> 00:18:41.776 A:middle
The optimizations really do

00:18:41.776 --> 00:18:43.316 A:middle
apply and make things faster

00:18:43.316 --> 00:18:44.906 A:middle
even for small numbers of views.

00:18:45.366 --> 00:18:46.506 A:middle
So let's start with a really

00:18:46.506 --> 00:18:48.366 A:middle
common pattern, the simplest

00:18:48.366 --> 00:18:50.246 A:middle
case really, Independent Sibling

00:18:50.246 --> 00:18:52.576 A:middle
Views inside of some container.

00:18:53.006 --> 00:18:54.156 A:middle
Now, these views are positioned

00:18:54.156 --> 00:18:55.386 A:middle
with constraints against the

00:18:55.386 --> 00:18:57.596 A:middle
container or other views but not

00:18:57.596 --> 00:18:58.536 A:middle
against each other.

00:18:58.666 --> 00:18:59.566 A:middle
They're independent of one

00:18:59.566 --> 00:18:59.876 A:middle
another.

00:19:00.636 --> 00:19:02.846 A:middle
Now in iOS 11, the cost of these

00:19:02.846 --> 00:19:04.446 A:middle
independent siblings, as you

00:19:04.446 --> 00:19:06.246 A:middle
continue to add more, grew

00:19:06.246 --> 00:19:06.816 A:middle
linearly.

00:19:07.526 --> 00:19:08.996 A:middle
So that's actually pretty great.

00:19:08.996 --> 00:19:10.536 A:middle
That's exactly what you'd expect

00:19:10.536 --> 00:19:11.906 A:middle
for a situation like this.

00:19:12.306 --> 00:19:13.706 A:middle
Basically, what we're saying is

00:19:13.706 --> 00:19:15.116 A:middle
that there's a fixed constant

00:19:15.116 --> 00:19:17.046 A:middle
cost for each additional new

00:19:17.046 --> 00:19:18.326 A:middle
view that you added into your

00:19:18.326 --> 00:19:19.876 A:middle
hierarchy that was positioned

00:19:19.876 --> 00:19:20.926 A:middle
independent of those other

00:19:20.926 --> 00:19:21.336 A:middle
views.

00:19:22.516 --> 00:19:23.406 A:middle
Now because that was already

00:19:23.506 --> 00:19:24.896 A:middle
growing with the exponentials

00:19:24.896 --> 00:19:26.746 A:middle
that we expected, that remains

00:19:26.746 --> 00:19:28.976 A:middle
the case in iOS 12; however, the

00:19:29.096 --> 00:19:30.966 A:middle
team has worked really hard to

00:19:30.966 --> 00:19:33.386 A:middle
reduce that constant cost to

00:19:33.386 --> 00:19:34.956 A:middle
make additional views as cheap

00:19:35.146 --> 00:19:36.076 A:middle
to add as possible.

00:19:37.376 --> 00:19:38.326 A:middle
So let's look at a more

00:19:38.326 --> 00:19:39.596 A:middle
interesting example next.

00:19:39.986 --> 00:19:41.156 A:middle
And in this case, we're going to

00:19:41.156 --> 00:19:42.236 A:middle
take a look at Dependent

00:19:42.236 --> 00:19:42.846 A:middle
Siblings.

00:19:43.326 --> 00:19:44.406 A:middle
So this is the case where you

00:19:44.406 --> 00:19:46.826 A:middle
have multiple child views and

00:19:46.826 --> 00:19:47.676 A:middle
they're now, they have

00:19:47.726 --> 00:19:49.296 A:middle
constraints between each other.

00:19:49.296 --> 00:19:51.146 A:middle
So their layout is dependent on

00:19:51.146 --> 00:19:51.616 A:middle
one another.

00:19:52.666 --> 00:19:54.536 A:middle
Now, unfortunately, in iOS 11,

00:19:54.896 --> 00:19:56.226 A:middle
you'll find that the asymptotics

00:19:56.226 --> 00:19:58.206 A:middle
here weren't quite as nice.

00:19:58.206 --> 00:19:59.416 A:middle
In fact, it was growing

00:19:59.496 --> 00:20:00.316 A:middle
exponentially.

00:19:59.496 --> 00:20:00.316 A:middle
exponentially.

00:20:00.686 --> 00:20:03.186 A:middle
So the more views that you

00:20:03.186 --> 00:20:04.786 A:middle
added, the surprisingly larger

00:20:04.786 --> 00:20:05.496 A:middle
cost you would find as you added

00:20:05.546 --> 00:20:05.976 A:middle
additional ones.

00:20:07.826 --> 00:20:09.146 A:middle
Now, the team worked really hard

00:20:09.146 --> 00:20:10.396 A:middle
to identify the source of this

00:20:10.396 --> 00:20:12.796 A:middle
exponential growth and fixed the

00:20:12.796 --> 00:20:14.436 A:middle
algorithm so that is no longer

00:20:14.436 --> 00:20:14.826 A:middle
the case.

00:20:15.386 --> 00:20:17.556 A:middle
So on iOS 12, these now grow

00:20:17.726 --> 00:20:17.976 A:middle
linearly.

00:20:18.516 --> 00:20:23.396 A:middle
[ Applause ]

00:20:23.896 --> 00:20:24.866 A:middle
And, of course, the team's also

00:20:24.866 --> 00:20:25.956 A:middle
been working to reduce those

00:20:25.956 --> 00:20:27.586 A:middle
constant costs for these cases

00:20:27.586 --> 00:20:28.016 A:middle
as well.

00:20:29.096 --> 00:20:30.096 A:middle
Now in addition to dependent

00:20:30.096 --> 00:20:31.366 A:middle
siblings, there's another common

00:20:31.366 --> 00:20:32.506 A:middle
type of layout that you'll find

00:20:32.506 --> 00:20:34.056 A:middle
and that's Nested Views, when

00:20:34.056 --> 00:20:35.656 A:middle
one view is inside of another

00:20:35.726 --> 00:20:36.966 A:middle
and there's constraints out to

00:20:36.966 --> 00:20:37.706 A:middle
those outer ones.

00:20:38.136 --> 00:20:39.506 A:middle
This is obviously also a pretty

00:20:39.586 --> 00:20:41.586 A:middle
common pattern in your apps and,

00:20:41.586 --> 00:20:42.866 A:middle
unfortunately, here as well in

00:20:42.956 --> 00:20:44.566 A:middle
iOS 11, we found some

00:20:44.566 --> 00:20:45.286 A:middle
exponential growth.

00:20:45.966 --> 00:20:47.456 A:middle
And again, great news.

00:20:47.456 --> 00:20:48.726 A:middle
The team has also made this

00:20:48.796 --> 00:20:49.836 A:middle
linear in iOS 12 as well.

00:20:50.516 --> 00:20:54.546 A:middle
[ Applause ]

00:20:55.046 --> 00:20:56.566 A:middle
So there's a number of really

00:20:56.566 --> 00:20:58.226 A:middle
great improvements across Auto

00:20:58.226 --> 00:21:00.256 A:middle
Layout in iOS 12 and you'll see

00:20:58.226 --> 00:21:00.256 A:middle
Layout in iOS 12 and you'll see

00:21:00.256 --> 00:21:01.346 A:middle
these improvements in your apps

00:21:01.346 --> 00:21:02.406 A:middle
as soon as you start running

00:21:02.406 --> 00:21:03.936 A:middle
them on iOS 12 yourselves.

00:21:04.646 --> 00:21:06.296 A:middle
To learn more about all of that,

00:21:06.956 --> 00:21:08.886 A:middle
get a better sense, develop a

00:21:08.976 --> 00:21:11.016 A:middle
good sense of how to get some

00:21:11.586 --> 00:21:13.346 A:middle
gut feel for the performance of

00:21:13.346 --> 00:21:15.446 A:middle
different layouts and here are

00:21:15.446 --> 00:21:16.846 A:middle
some of these topics I was

00:21:16.846 --> 00:21:17.936 A:middle
talking about that are common

00:21:18.046 --> 00:21:18.596 A:middle
pitfalls.

00:21:18.896 --> 00:21:19.996 A:middle
Definitely check out the High

00:21:19.996 --> 00:21:21.326 A:middle
Performance Auto Layout talk

00:21:21.436 --> 00:21:22.726 A:middle
later this week.

00:21:23.636 --> 00:21:26.156 A:middle
So for our final framework

00:21:26.156 --> 00:21:28.216 A:middle
update topic, let's turn to

00:21:28.216 --> 00:21:29.106 A:middle
Swiftification.

00:21:29.676 --> 00:21:32.906 A:middle
As you heard, iOS 12 introduces

00:21:32.986 --> 00:21:34.136 A:middle
Swift 4.2.

00:21:34.586 --> 00:21:36.116 A:middle
And for Swift 4.2 we really

00:21:36.116 --> 00:21:38.326 A:middle
wanted to make sure that UIKit

00:21:38.406 --> 00:21:40.596 A:middle
had a really great feel when

00:21:40.596 --> 00:21:42.676 A:middle
used in Swift across your app,

00:21:43.026 --> 00:21:44.376 A:middle
especially where it interacted

00:21:44.376 --> 00:21:45.726 A:middle
with other Swift Standard

00:21:45.726 --> 00:21:48.106 A:middle
Library or places that Swift had

00:21:48.106 --> 00:21:48.786 A:middle
common patterns.

00:21:49.606 --> 00:21:51.906 A:middle
So, we audited all of UIKit and

00:21:51.906 --> 00:21:53.376 A:middle
made sure that everything feels

00:21:53.376 --> 00:21:54.936 A:middle
like it fits really naturally.

00:21:55.636 --> 00:21:56.936 A:middle
Even better, we made sure that

00:21:56.936 --> 00:21:58.226 A:middle
all of the changes that we made

00:21:58.226 --> 00:22:00.096 A:middle
to UIKit are all automatically

00:21:58.226 --> 00:22:00.096 A:middle
to UIKit are all automatically

00:22:00.096 --> 00:22:01.706 A:middle
migratable so there's no

00:22:01.706 --> 00:22:02.546 A:middle
additional work that you should

00:22:02.546 --> 00:22:03.966 A:middle
have to do in order to get these

00:22:03.966 --> 00:22:04.536 A:middle
updates.

00:22:05.746 --> 00:22:07.536 A:middle
Now, these updates fall into

00:22:07.536 --> 00:22:08.766 A:middle
really three categories that

00:22:08.766 --> 00:22:09.736 A:middle
we'll talk about this morning,

00:22:10.016 --> 00:22:11.756 A:middle
although there's actually a ton

00:22:11.756 --> 00:22:13.856 A:middle
of improvements and consistency

00:22:13.856 --> 00:22:15.076 A:middle
improvements that you'll find as

00:22:15.076 --> 00:22:15.816 A:middle
you look at the SDK.

00:22:16.566 --> 00:22:17.326 A:middle
But today we'll talk about

00:22:17.326 --> 00:22:19.126 A:middle
nesting of types, constants, and

00:22:19.166 --> 00:22:19.586 A:middle
functions.

00:22:19.656 --> 00:22:22.176 A:middle
So let's first look at nesting

00:22:22.176 --> 00:22:22.636 A:middle
types.

00:22:23.516 --> 00:22:25.476 A:middle
Now in Swift 4, there were a

00:22:25.476 --> 00:22:26.776 A:middle
number of types that were in the

00:22:26.776 --> 00:22:28.766 A:middle
global name space, things like

00:22:28.806 --> 00:22:30.006 A:middle
UI Application State.

00:22:30.666 --> 00:22:32.916 A:middle
For types like this that have a

00:22:32.966 --> 00:22:35.096 A:middle
really strong use along with

00:22:35.096 --> 00:22:37.276 A:middle
another class, we've now nested

00:22:37.276 --> 00:22:38.016 A:middle
them within this class.

00:22:38.796 --> 00:22:39.746 A:middle
So we looked at all the

00:22:39.746 --> 00:22:42.156 A:middle
enumerations and other global

00:22:42.206 --> 00:22:43.796 A:middle
types of this sort and now have

00:22:43.796 --> 00:22:45.476 A:middle
moved them to be child types of

00:22:45.646 --> 00:22:46.576 A:middle
the relevant class.

00:22:46.906 --> 00:22:47.576 A:middle
So this becomes

00:22:47.576 --> 00:22:49.326 A:middle
UIApplication.State.

00:22:49.796 --> 00:22:51.536 A:middle
This sends a much stronger

00:22:51.536 --> 00:22:52.786 A:middle
message about the relationship

00:22:52.786 --> 00:22:54.216 A:middle
between these two and makes them

00:22:54.216 --> 00:22:55.276 A:middle
easier to find as well.

00:22:56.046 --> 00:22:57.546 A:middle
Now in comes cases this can also

00:22:57.546 --> 00:23:00.286 A:middle
help improve understandability

00:22:57.546 --> 00:23:00.286 A:middle
help improve understandability

00:23:00.286 --> 00:23:02.246 A:middle
and remove some confusion.

00:23:02.696 --> 00:23:03.546 A:middle
So in this case, let's look at

00:23:03.546 --> 00:23:05.016 A:middle
UI Tab Bar Item Positioning.

00:23:05.626 --> 00:23:06.216 A:middle
Now do you think that's

00:23:06.306 --> 00:23:09.086 A:middle
UITabBarItemPositioning or

00:23:09.226 --> 00:23:10.896 A:middle
UITabBarItem Positioning?

00:23:10.896 --> 00:23:12.586 A:middle
It could actually be either.

00:23:12.836 --> 00:23:13.906 A:middle
Those are both classes.

00:23:14.406 --> 00:23:16.546 A:middle
And in Swift 42, it is now

00:23:16.616 --> 00:23:17.726 A:middle
perfectly clear that it is, in

00:23:17.726 --> 00:23:20.066 A:middle
fact, UITabBar ItemPositioning.

00:23:20.646 --> 00:23:23.226 A:middle
So in addition to nested types,

00:23:23.546 --> 00:23:25.036 A:middle
we've also nested a bunch of

00:23:25.036 --> 00:23:25.666 A:middle
constants.

00:23:26.106 --> 00:23:27.486 A:middle
So if we look here at Swift 4,

00:23:27.486 --> 00:23:29.926 A:middle
we had NS notifications were all

00:23:29.926 --> 00:23:30.636 A:middle
in the global

00:23:30.706 --> 00:23:32.796 A:middle
NSNotification.Name namespace

00:23:33.206 --> 00:23:34.616 A:middle
and their associated user info

00:23:34.616 --> 00:23:35.956 A:middle
keys were actually just global

00:23:35.956 --> 00:23:37.206 A:middle
constants that were floating out

00:23:37.206 --> 00:23:37.386 A:middle
there.

00:23:38.026 --> 00:23:39.676 A:middle
So for consistency with AppKit

00:23:39.676 --> 00:23:41.146 A:middle
and to make it easier to find

00:23:41.146 --> 00:23:42.656 A:middle
and associate these types

00:23:42.706 --> 00:23:44.196 A:middle
together, they've now all been

00:23:44.196 --> 00:23:45.436 A:middle
nested under the class that

00:23:45.436 --> 00:23:46.026 A:middle
they're used with.

00:23:46.456 --> 00:23:47.426 A:middle
So something like did Change

00:23:47.426 --> 00:23:49.006 A:middle
Status Bar Orientation is now

00:23:49.316 --> 00:23:51.336 A:middle
under UI Application did Change

00:23:51.336 --> 00:23:52.346 A:middle
Status Bar Orientation

00:23:52.346 --> 00:23:54.106 A:middle
Notification and its user info

00:23:54.106 --> 00:23:55.436 A:middle
key moved along with it so that

00:23:55.436 --> 00:23:56.486 A:middle
they're all co-located.

00:23:57.126 --> 00:23:59.656 A:middle
Now we've also audited all of

00:23:59.656 --> 00:24:01.326 A:middle
the other global constants all

00:23:59.656 --> 00:24:01.326 A:middle
the other global constants all

00:24:01.326 --> 00:24:03.806 A:middle
throughout UIKit and nested all

00:24:03.806 --> 00:24:05.006 A:middle
of them in appropriate places.

00:24:05.346 --> 00:24:06.486 A:middle
So things like UI Float Range

00:24:06.486 --> 00:24:08.536 A:middle
Zero and UI Float Range Infinite

00:24:08.536 --> 00:24:10.216 A:middle
have not just become properties

00:24:10.216 --> 00:24:12.396 A:middle
on UI Float Range so they're

00:24:12.396 --> 00:24:14.326 A:middle
both easy to find and easier to

00:24:14.326 --> 00:24:14.786 A:middle
use.

00:24:15.096 --> 00:24:16.686 A:middle
In places to take a UI Float

00:24:16.686 --> 00:24:18.096 A:middle
Range, you can now just type

00:24:18.206 --> 00:24:20.386 A:middle
.zero or .infinite and, in fact,

00:24:20.616 --> 00:24:21.656 A:middle
because they're now properties,

00:24:21.906 --> 00:24:23.226 A:middle
Xcode can suggest them as

00:24:23.226 --> 00:24:24.866 A:middle
auto-completions for you in

00:24:24.866 --> 00:24:26.666 A:middle
places where they make sense.

00:24:27.776 --> 00:24:29.046 A:middle
Now in addition to constants,

00:24:29.046 --> 00:24:30.316 A:middle
we've also audited all of our

00:24:30.316 --> 00:24:31.056 A:middle
global functions.

00:24:31.536 --> 00:24:32.776 A:middle
So things like UI Edge Inserts

00:24:32.776 --> 00:24:36.206 A:middle
and UI Image had some global

00:24:36.206 --> 00:24:37.376 A:middle
functions for operating on

00:24:37.376 --> 00:24:38.076 A:middle
different types.

00:24:38.556 --> 00:24:40.326 A:middle
Now in Swift 4.2, these had

00:24:40.326 --> 00:24:42.676 A:middle
become methods on the

00:24:42.676 --> 00:24:43.796 A:middle
appropriate type.

00:24:44.576 --> 00:24:46.286 A:middle
So it's now really easy to inset

00:24:46.326 --> 00:24:48.196 A:middle
Rect or get png Data from an

00:24:48.196 --> 00:24:50.366 A:middle
image in a really natural Swift

00:24:50.366 --> 00:24:51.046 A:middle
feeling way.

00:24:52.516 --> 00:24:57.166 A:middle
[ Applause ]

00:24:57.666 --> 00:24:59.176 A:middle
Now, here was one other big

00:24:59.176 --> 00:25:00.286 A:middle
class of functions that I want

00:24:59.176 --> 00:25:00.286 A:middle
class of functions that I want

00:25:00.286 --> 00:25:01.236 A:middle
to mention this morning and that

00:25:01.236 --> 00:25:02.446 A:middle
was all of these string

00:25:02.446 --> 00:25:03.956 A:middle
conversion functions for all of

00:25:03.956 --> 00:25:05.306 A:middle
the many types in UIKit,

00:25:05.776 --> 00:25:07.206 A:middle
CGPoint, CGRect, CGSize,

00:25:07.346 --> 00:25:09.706 A:middle
CGVector, all of them, there's

00:25:09.706 --> 00:25:11.726 A:middle
quite a lot, both to and from

00:25:11.726 --> 00:25:12.106 A:middle
strings.

00:25:12.516 --> 00:25:14.676 A:middle
Now, when we looked at these and

00:25:14.676 --> 00:25:15.386 A:middle
tried to decide where they

00:25:15.386 --> 00:25:16.836 A:middle
should go, we realized that they

00:25:16.836 --> 00:25:18.596 A:middle
actually have two different use

00:25:18.596 --> 00:25:19.086 A:middle
cases.

00:25:19.386 --> 00:25:20.716 A:middle
One is for encoding and

00:25:20.716 --> 00:25:21.216 A:middle
decoding.

00:25:21.676 --> 00:25:22.586 A:middle
But the other is that they're

00:25:22.666 --> 00:25:24.276 A:middle
commonly used to print things

00:25:24.466 --> 00:25:25.296 A:middle
when you're just trying to get

00:25:25.296 --> 00:25:26.276 A:middle
some debug descriptions.

00:25:26.826 --> 00:25:28.586 A:middle
And those are two very different

00:25:28.586 --> 00:25:30.886 A:middle
uses but, in fact, Swift has

00:25:30.946 --> 00:25:32.466 A:middle
first-class support for both of

00:25:32.466 --> 00:25:33.166 A:middle
those cases.

00:25:33.626 --> 00:25:34.846 A:middle
And so we've made sure that all

00:25:34.846 --> 00:25:36.166 A:middle
of these types will work really

00:25:36.166 --> 00:25:37.436 A:middle
great with Swift's built-in

00:25:37.436 --> 00:25:38.156 A:middle
support for both.

00:25:38.776 --> 00:25:40.706 A:middle
So in Swift 4.2, all of these

00:25:40.786 --> 00:25:42.436 A:middle
types will conform to Codable so

00:25:42.706 --> 00:25:44.526 A:middle
that you can very easily do

00:25:44.526 --> 00:25:46.146 A:middle
things such as encode and decode

00:25:46.146 --> 00:25:47.616 A:middle
JSON for all of these different

00:25:47.616 --> 00:25:47.896 A:middle
types.

00:25:48.516 --> 00:25:53.656 A:middle
[ Applause ]

00:25:54.156 --> 00:25:55.236 A:middle
Of course, debug printing in

00:25:55.306 --> 00:25:56.766 A:middle
Swift is actually even easier

00:25:56.766 --> 00:25:58.296 A:middle
than in Objective-C because you

00:25:58.296 --> 00:26:00.106 A:middle
don't have to do any additional

00:25:58.296 --> 00:26:00.106 A:middle
don't have to do any additional

00:26:00.106 --> 00:26:00.706 A:middle
conversion.

00:26:01.276 --> 00:26:03.246 A:middle
The built-in introspection of

00:26:03.246 --> 00:26:04.356 A:middle
the types can allow you to print

00:26:04.356 --> 00:26:04.916 A:middle
them directly.

00:26:05.226 --> 00:26:06.396 A:middle
So in Swift 4.2, you just

00:26:06.396 --> 00:26:07.486 A:middle
actually pass these types

00:26:07.486 --> 00:26:08.726 A:middle
directly to your print functions

00:26:09.146 --> 00:26:10.416 A:middle
if you want to print them out

00:26:10.446 --> 00:26:12.056 A:middle
for debug purposes or log them.

00:26:12.916 --> 00:26:14.186 A:middle
And then finally, you may

00:26:14.186 --> 00:26:15.786 A:middle
already have some existing code

00:26:15.786 --> 00:26:17.196 A:middle
that was using the behavior of

00:26:17.196 --> 00:26:18.826 A:middle
the old string conversion

00:26:18.826 --> 00:26:20.986 A:middle
functions and need a compatible

00:26:20.986 --> 00:26:22.766 A:middle
functionality going forward.

00:26:23.366 --> 00:26:24.346 A:middle
And so for that we've actually

00:26:24.346 --> 00:26:25.476 A:middle
just renamed all of these and

00:26:25.476 --> 00:26:27.326 A:middle
moved them to be properties on

00:26:27.496 --> 00:26:28.126 A:middle
NSCoder.

00:26:28.526 --> 00:26:29.826 A:middle
This really helps to emphasize

00:26:29.826 --> 00:26:30.926 A:middle
the fact that the intent of

00:26:30.926 --> 00:26:32.516 A:middle
these methods was to be used for

00:26:32.516 --> 00:26:34.276 A:middle
encoding and decoding, so it's a

00:26:34.276 --> 00:26:35.476 A:middle
pretty natural fit for them to

00:26:35.476 --> 00:26:36.066 A:middle
go over there.

00:26:37.966 --> 00:26:39.476 A:middle
So these are just a few of the

00:26:39.476 --> 00:26:40.666 A:middle
consistency improvements that

00:26:40.666 --> 00:26:43.106 A:middle
you'll find across the iOS 12

00:26:43.806 --> 00:26:46.946 A:middle
SDK for Swift 4.2 but you'll

00:26:46.946 --> 00:26:48.056 A:middle
find many more as well.

00:26:49.476 --> 00:26:51.176 A:middle
Now speaking of encoding and

00:26:51.176 --> 00:26:54.246 A:middle
decoding, NS Secure Coding, in

00:26:55.096 --> 00:26:57.566 A:middle
iOS 12 there are now new secure

00:26:57.566 --> 00:26:59.456 A:middle
by default encoding and decoding

00:26:59.456 --> 00:26:59.856 A:middle
APIs.

00:27:01.246 --> 00:27:02.846 A:middle
Adopting NS Secure Coding for

00:27:02.846 --> 00:27:04.546 A:middle
all of your encoding needs on NS

00:27:04.586 --> 00:27:07.056 A:middle
Keyed Archiver is really key to

00:27:07.056 --> 00:27:08.186 A:middle
ensuring that you're protecting

00:27:08.186 --> 00:27:09.446 A:middle
your customers from both

00:27:09.446 --> 00:27:11.646 A:middle
malicious and corrupted data.

00:27:12.606 --> 00:27:13.876 A:middle
You'll also find that the older

00:27:13.876 --> 00:27:15.246 A:middle
insecure APIs are not

00:27:15.296 --> 00:27:15.856 A:middle
deprecated.

00:27:16.776 --> 00:27:18.396 A:middle
So you can learn all about that

00:27:18.396 --> 00:27:20.066 A:middle
and get much more detail on it

00:27:20.156 --> 00:27:21.346 A:middle
in the Data You Can Trust

00:27:21.346 --> 00:27:23.266 A:middle
Session on Thursday at 9:00 a.m.

00:27:23.826 --> 00:27:25.996 A:middle
And that's framework updates.

00:27:26.946 --> 00:27:28.496 A:middle
Next, let's turn our attention

00:27:28.586 --> 00:27:30.056 A:middle
to some enhancements to a number

00:27:30.056 --> 00:27:32.486 A:middle
of existing APIs and we'll start

00:27:32.486 --> 00:27:33.466 A:middle
with notifications.

00:27:34.256 --> 00:27:36.096 A:middle
Notifications has a number of

00:27:36.096 --> 00:27:37.756 A:middle
really great improvements in iOS

00:27:37.756 --> 00:27:39.296 A:middle
12 but we're going to focus on

00:27:39.296 --> 00:27:40.436 A:middle
just three this morning.

00:27:41.176 --> 00:27:42.496 A:middle
Interaction within custom

00:27:42.496 --> 00:27:44.376 A:middle
notifications, grouping of

00:27:44.376 --> 00:27:46.326 A:middle
notifications, and access to

00:27:46.326 --> 00:27:47.866 A:middle
your notification settings

00:27:47.866 --> 00:27:48.696 A:middle
within your own apps.

00:27:50.206 --> 00:27:51.606 A:middle
So let's start with interaction.

00:27:52.286 --> 00:27:54.866 A:middle
Now custom notifications have

00:27:54.936 --> 00:27:56.486 A:middle
for a while now allowed you to

00:27:56.486 --> 00:27:58.306 A:middle
define a predefined set of

00:27:58.466 --> 00:28:00.686 A:middle
actions for those notifications.

00:27:58.466 --> 00:28:00.686 A:middle
actions for those notifications.

00:28:01.246 --> 00:28:03.436 A:middle
In iOS 12, this set of actions

00:28:03.436 --> 00:28:04.756 A:middle
is now no longer static.

00:28:05.136 --> 00:28:05.856 A:middle
It can be defined

00:28:05.906 --> 00:28:07.506 A:middle
programmatically and you can

00:28:07.506 --> 00:28:09.406 A:middle
change them at runtime.

00:28:09.536 --> 00:28:11.916 A:middle
In addition to these actions,

00:28:12.296 --> 00:28:13.956 A:middle
and even better than that, the

00:28:13.956 --> 00:28:16.226 A:middle
notifications themselves can now

00:28:16.226 --> 00:28:17.616 A:middle
be made interactive.

00:28:18.156 --> 00:28:19.326 A:middle
So for example, here, you can

00:28:19.326 --> 00:28:21.286 A:middle
see Messages is now allowing you

00:28:21.366 --> 00:28:23.266 A:middle
to reply quickly to a message

00:28:23.466 --> 00:28:25.276 A:middle
inline directly in that

00:28:25.276 --> 00:28:26.046 A:middle
notification.

00:28:28.066 --> 00:28:29.266 A:middle
Now in addition to interaction,

00:28:29.596 --> 00:28:32.026 A:middle
iOS 12 now includes grouping of

00:28:32.026 --> 00:28:33.796 A:middle
notifications by default and the

00:28:33.796 --> 00:28:34.846 A:middle
default behavior will be to

00:28:34.886 --> 00:28:36.536 A:middle
group all the notifications for

00:28:36.536 --> 00:28:38.446 A:middle
a particular app into a single

00:28:38.446 --> 00:28:38.816 A:middle
group.

00:28:39.246 --> 00:28:40.606 A:middle
But, of course, your app may

00:28:40.606 --> 00:28:42.296 A:middle
have custom needs to have more

00:28:42.296 --> 00:28:44.256 A:middle
granular groupings so something

00:28:44.256 --> 00:28:46.036 A:middle
like iMessage will group all of

00:28:46.036 --> 00:28:47.296 A:middle
the messages from a particular

00:28:47.296 --> 00:28:49.046 A:middle
conversation together and

00:28:49.116 --> 00:28:50.556 A:middle
separate from all the rest of

00:28:50.596 --> 00:28:51.836 A:middle
the notifications for that app.

00:28:53.116 --> 00:28:54.536 A:middle
Now you can adopt this in your

00:28:54.536 --> 00:28:56.716 A:middle
app as well by just tagging your

00:28:56.716 --> 00:28:58.706 A:middle
notifications with a particular

00:28:58.806 --> 00:29:00.526 A:middle
thread identifier and then all

00:28:58.806 --> 00:29:00.526 A:middle
thread identifier and then all

00:29:00.526 --> 00:29:01.776 A:middle
the notifications for that

00:29:01.856 --> 00:29:03.976 A:middle
threat identifier will appear in

00:29:03.976 --> 00:29:04.586 A:middle
a single group.

00:29:05.106 --> 00:29:08.106 A:middle
Now the UI updates for

00:29:08.106 --> 00:29:10.746 A:middle
notifications in iOS 12 also

00:29:10.746 --> 00:29:13.246 A:middle
include some new ability for

00:29:13.246 --> 00:29:16.026 A:middle
users to customize the delivery

00:29:16.026 --> 00:29:17.526 A:middle
behavior of their notifications.

00:29:18.436 --> 00:29:19.836 A:middle
But, of course, your apps may

00:29:19.836 --> 00:29:21.436 A:middle
also include some existing, more

00:29:21.436 --> 00:29:22.996 A:middle
granular controls for

00:29:22.996 --> 00:29:24.966 A:middle
notification management within

00:29:24.966 --> 00:29:25.876 A:middle
your apps as well.

00:29:26.436 --> 00:29:28.316 A:middle
And iOS 12 introduces a new API

00:29:28.536 --> 00:29:29.686 A:middle
that makes it easy for your

00:29:29.686 --> 00:29:31.546 A:middle
customers to get directly deep

00:29:31.546 --> 00:29:33.336 A:middle
linked into your notification

00:29:33.336 --> 00:29:35.056 A:middle
settings UI exactly when they're

00:29:35.056 --> 00:29:36.486 A:middle
looking for those more granular

00:29:36.486 --> 00:29:37.096 A:middle
controls.

00:29:37.096 --> 00:29:39.836 A:middle
So you can learn more about all

00:29:39.836 --> 00:29:41.576 A:middle
of these notification things in

00:29:41.576 --> 00:29:43.266 A:middle
What's New in User Notifications

00:29:43.476 --> 00:29:45.076 A:middle
and Using Grouped Notifications

00:29:45.226 --> 00:29:45.866 A:middle
later this week.

00:29:46.906 --> 00:29:48.086 A:middle
That's notifications.

00:29:49.006 --> 00:29:52.516 A:middle
Next, let's talk about messages.

00:29:52.586 --> 00:29:54.856 A:middle
Now messages in iOS 12 includes

00:29:54.856 --> 00:29:56.336 A:middle
some really new and exciting

00:29:56.336 --> 00:29:57.396 A:middle
features in the camera.

00:29:58.166 --> 00:29:59.426 A:middle
And you can bring all of your

00:29:59.426 --> 00:30:01.126 A:middle
iMessage stickers directly into

00:29:59.426 --> 00:30:01.126 A:middle
iMessage stickers directly into

00:30:01.126 --> 00:30:02.316 A:middle
the camera as well.

00:30:02.916 --> 00:30:04.006 A:middle
If you're using the Xcode

00:30:04.046 --> 00:30:05.696 A:middle
sticker template, this will work

00:30:05.696 --> 00:30:07.196 A:middle
automatically by default with no

00:30:07.196 --> 00:30:07.976 A:middle
additional work on your behalf.

00:30:08.116 --> 00:30:11.776 A:middle
But if you're building a more

00:30:11.776 --> 00:30:14.336 A:middle
custom sticker experience using

00:30:14.376 --> 00:30:15.376 A:middle
the MS Messages App View

00:30:15.376 --> 00:30:17.726 A:middle
Controller, some small amount of

00:30:17.726 --> 00:30:18.846 A:middle
adoption is required.

00:30:18.846 --> 00:30:21.076 A:middle
Now there's a new MS Messages

00:30:21.116 --> 00:30:22.786 A:middle
Supported Presentation Contexts

00:30:22.786 --> 00:30:25.166 A:middle
API that you can add into your

00:30:25.166 --> 00:30:27.436 A:middle
user info plist and then specify

00:30:27.436 --> 00:30:28.786 A:middle
that you want to appear both in

00:30:28.786 --> 00:30:30.446 A:middle
the messages context and the

00:30:30.446 --> 00:30:31.326 A:middle
media context.

00:30:32.076 --> 00:30:33.506 A:middle
Once you've done that, your apps

00:30:33.506 --> 00:30:34.706 A:middle
will appear both in the App

00:30:34.706 --> 00:30:37.806 A:middle
Strip and also within the

00:30:37.806 --> 00:30:38.176 A:middle
camera.

00:30:39.046 --> 00:30:40.696 A:middle
Now if at runtime you need to

00:30:40.696 --> 00:30:41.956 A:middle
figure out which context you're

00:30:41.956 --> 00:30:43.596 A:middle
in so that for example you want

00:30:43.596 --> 00:30:45.076 A:middle
to customize the display of your

00:30:45.076 --> 00:30:46.646 A:middle
stickers a little bit, there's a

00:30:46.646 --> 00:30:48.036 A:middle
new API for that as well.

00:30:48.676 --> 00:30:51.316 A:middle
By checking the presentation

00:30:51.316 --> 00:30:52.586 A:middle
context, you can quickly see

00:30:52.586 --> 00:30:54.246 A:middle
whether you're in messages or in

00:30:55.176 --> 00:30:56.026 A:middle
the camera.

00:30:56.176 --> 00:30:57.526 A:middle
Now in addition to these

00:30:57.526 --> 00:30:59.716 A:middle
features, iOS 12 also brings a

00:30:59.716 --> 00:31:01.456 A:middle
new access for interaction to

00:30:59.716 --> 00:31:01.456 A:middle
new access for interaction to

00:31:01.456 --> 00:31:02.396 A:middle
your messages apps.

00:31:02.906 --> 00:31:05.746 A:middle
In compact mode, previously

00:31:05.906 --> 00:31:07.506 A:middle
swiping horizontally down in

00:31:07.506 --> 00:31:09.106 A:middle
your messages app would switch

00:31:09.156 --> 00:31:10.066 A:middle
between apps.

00:31:10.746 --> 00:31:13.146 A:middle
In iOS 12, these horizontal

00:31:13.206 --> 00:31:14.416 A:middle
swipes and interactions that

00:31:14.416 --> 00:31:15.576 A:middle
move horizontally are now

00:31:15.576 --> 00:31:17.136 A:middle
available for us by your apps

00:31:17.206 --> 00:31:19.106 A:middle
directly so they'll interact

00:31:19.206 --> 00:31:20.506 A:middle
with your apps rather than

00:31:20.506 --> 00:31:22.286 A:middle
switching to a different app.

00:31:23.106 --> 00:31:24.196 A:middle
And that's Messages.

00:31:25.096 --> 00:31:27.196 A:middle
Next, let's talk about automatic

00:31:27.246 --> 00:31:28.906 A:middle
passwords and security code

00:31:28.906 --> 00:31:29.526 A:middle
autofill.

00:31:30.596 --> 00:31:33.936 A:middle
Now iOS 11 introduced automatic

00:31:34.296 --> 00:31:37.326 A:middle
passwords or password entry into

00:31:37.326 --> 00:31:39.176 A:middle
your apps.

00:31:39.176 --> 00:31:40.796 A:middle
And in iOS 12, we're taking

00:31:40.796 --> 00:31:42.186 A:middle
these a whole step further.

00:31:42.786 --> 00:31:45.296 A:middle
But let's go back to the

00:31:45.296 --> 00:31:46.436 A:middle
beginning for a minute and talk

00:31:46.436 --> 00:31:48.586 A:middle
about the entire experience.

00:31:49.146 --> 00:31:51.996 A:middle
So for users that have passwords

00:31:51.996 --> 00:31:54.186 A:middle
stored in iCloud Keychain, since

00:31:54.266 --> 00:31:55.726 A:middle
iOS 11 it's now been possible to

00:31:55.726 --> 00:31:56.796 A:middle
have those automatically get

00:31:56.866 --> 00:31:58.556 A:middle
populated into your app in your

00:31:58.556 --> 00:31:59.406 A:middle
login flows.

00:32:00.146 --> 00:32:02.206 A:middle
Now in iOS 12, these passwords

00:32:02.206 --> 00:32:04.596 A:middle
can also be stored into iCloud

00:32:04.686 --> 00:32:06.506 A:middle
Keychain from your apps both

00:32:06.506 --> 00:32:09.006 A:middle
from your login window flows and

00:32:09.006 --> 00:32:10.926 A:middle
also from your password change

00:32:10.926 --> 00:32:12.086 A:middle
request UIs.

00:32:13.296 --> 00:32:14.666 A:middle
As soon as a user logs in,

00:32:14.956 --> 00:32:16.156 A:middle
they'll be prompted to save the

00:32:16.156 --> 00:32:17.626 A:middle
password to iCloud Keychain.

00:32:18.436 --> 00:32:20.226 A:middle
Now even better, iOS 12 can

00:32:20.226 --> 00:32:22.146 A:middle
automatically generate passwords

00:32:22.486 --> 00:32:25.026 A:middle
in your new account flows and in

00:32:25.026 --> 00:32:26.496 A:middle
your password change flows.

00:32:26.896 --> 00:32:28.536 A:middle
Adopting this is really easy.

00:32:28.896 --> 00:32:29.886 A:middle
You just make sure that you've

00:32:29.936 --> 00:32:31.996 A:middle
tagged your password fields with

00:32:32.116 --> 00:32:33.856 A:middle
either the password text content

00:32:33.856 --> 00:32:35.906 A:middle
type, if it's a login field, or

00:32:35.906 --> 00:32:37.726 A:middle
the new password text content

00:32:37.726 --> 00:32:39.146 A:middle
type if it's either a new

00:32:39.146 --> 00:32:40.416 A:middle
account or password change

00:32:40.416 --> 00:32:40.696 A:middle
field.

00:32:41.336 --> 00:32:45.226 A:middle
If your services have a specific

00:32:45.226 --> 00:32:47.166 A:middle
requirement on passwords for

00:32:47.166 --> 00:32:49.056 A:middle
example if they got required or

00:32:49.096 --> 00:32:51.226 A:middle
disallowed characters or if they

00:32:51.226 --> 00:32:53.146 A:middle
have other requirements such as

00:32:53.146 --> 00:32:55.026 A:middle
maximum number of consecutive

00:32:55.026 --> 00:32:56.586 A:middle
repeated characters, you can

00:32:56.586 --> 00:32:58.026 A:middle
specify these requirements as

00:32:58.026 --> 00:32:59.466 A:middle
well to make sure that the

00:32:59.466 --> 00:33:00.526 A:middle
automatically generated

00:32:59.466 --> 00:33:00.526 A:middle
automatically generated

00:33:00.526 --> 00:33:02.256 A:middle
passwords are fully compatible

00:33:02.256 --> 00:33:03.426 A:middle
with all of your requirements.

00:33:04.146 --> 00:33:06.946 A:middle
Now, the final bit of friction

00:33:06.946 --> 00:33:07.896 A:middle
during some of your login

00:33:07.896 --> 00:33:09.706 A:middle
experiences is when you have to

00:33:09.706 --> 00:33:10.716 A:middle
take that two-factor

00:33:10.716 --> 00:33:12.426 A:middle
authentication code, get it out

00:33:12.426 --> 00:33:14.066 A:middle
of a text message and into your

00:33:15.036 --> 00:33:15.226 A:middle
apps.

00:33:15.226 --> 00:33:17.496 A:middle
IOS 12 makes this really easy by

00:33:17.496 --> 00:33:19.046 A:middle
automatically identifying these

00:33:19.046 --> 00:33:21.216 A:middle
notifications, noting the

00:33:21.326 --> 00:33:23.176 A:middle
security code in them, and

00:33:23.176 --> 00:33:24.416 A:middle
suggesting it right in the Quick

00:33:24.416 --> 00:33:25.796 A:middle
Type candidate bar so that it's

00:33:25.836 --> 00:33:27.156 A:middle
really easy to get it right into

00:33:27.186 --> 00:33:27.656 A:middle
your app.

00:33:28.506 --> 00:33:29.466 A:middle
Now the only thing you have to

00:33:29.526 --> 00:33:30.726 A:middle
do to make sure this works in

00:33:30.726 --> 00:33:32.086 A:middle
your app is to be sure that

00:33:32.086 --> 00:33:34.126 A:middle
you're using standard iOS text

00:33:34.126 --> 00:33:37.126 A:middle
interaction APIs in order to

00:33:37.196 --> 00:33:40.786 A:middle
accept these passcodes.

00:33:40.866 --> 00:33:42.126 A:middle
With all of these new features,

00:33:42.316 --> 00:33:44.196 A:middle
iOS 12 is enabling a much more

00:33:44.286 --> 00:33:47.456 A:middle
secure future with unique,

00:33:47.686 --> 00:33:49.546 A:middle
strong passwords used for every

00:33:49.626 --> 00:33:51.426 A:middle
service that you never have to

00:33:51.426 --> 00:33:52.996 A:middle
memorize or type ever again.

00:33:52.996 --> 00:33:55.636 A:middle
You can learn all about this in

00:33:55.636 --> 00:33:57.036 A:middle
the Automatic Strong Passwords

00:33:57.176 --> 00:33:58.426 A:middle
and Security Code Autofill

00:33:58.426 --> 00:34:01.096 A:middle
Session later this week.

00:33:58.426 --> 00:34:01.096 A:middle
Session later this week.

00:34:01.576 --> 00:34:04.286 A:middle
Now, our final API enhancement

00:34:04.286 --> 00:34:05.826 A:middle
topic is actually a bit of a

00:34:05.826 --> 00:34:07.616 A:middle
review but now with a little bit

00:34:07.616 --> 00:34:08.366 A:middle
more context.

00:34:09.505 --> 00:34:11.356 A:middle
So in iOS 11, we introduced Safe

00:34:11.356 --> 00:34:12.176 A:middle
Area insets.

00:34:12.766 --> 00:34:14.666 A:middle
Safe Area insets are a really

00:34:14.775 --> 00:34:16.716 A:middle
great way to make sure that your

00:34:16.716 --> 00:34:19.446 A:middle
content is avoiding any overlap

00:34:19.596 --> 00:34:21.525 A:middle
from other parts of the user

00:34:21.525 --> 00:34:23.376 A:middle
interface such as bars on the

00:34:23.446 --> 00:34:24.576 A:middle
top and bottom of the screen.

00:34:25.906 --> 00:34:27.755 A:middle
This is really great on iPhones

00:34:27.755 --> 00:34:28.726 A:middle
where bars are pretty

00:34:28.726 --> 00:34:30.886 A:middle
straightforward, but it's really

00:34:30.976 --> 00:34:31.936 A:middle
powerful as well.

00:34:32.565 --> 00:34:34.005 A:middle
Safe Area insets give you that

00:34:34.076 --> 00:34:35.426 A:middle
safe area coordinate in the

00:34:35.426 --> 00:34:37.596 A:middle
local coordinate space of any

00:34:37.596 --> 00:34:39.795 A:middle
view in your application, so it

00:34:39.795 --> 00:34:41.266 A:middle
scales even the much more

00:34:41.266 --> 00:34:43.646 A:middle
complex interfaces, things like

00:34:43.646 --> 00:34:45.466 A:middle
iPad Split View which has

00:34:45.755 --> 00:34:48.346 A:middle
different height bars on the

00:34:48.346 --> 00:34:49.706 A:middle
master and detail side of the

00:34:49.706 --> 00:34:50.186 A:middle
Split View.

00:34:50.735 --> 00:34:54.116 A:middle
The Safe Area insets in any view

00:34:54.116 --> 00:34:55.326 A:middle
underneath these bars will be

00:34:55.326 --> 00:34:56.426 A:middle
appropriate for the amount that

00:34:56.426 --> 00:34:58.086 A:middle
they're overlapped by the bar on

00:34:58.126 --> 00:34:59.156 A:middle
their side of the split.

00:35:01.156 --> 00:35:02.606 A:middle
So this is really great on

00:35:02.606 --> 00:35:04.366 A:middle
devices with rectangular screens

00:35:04.866 --> 00:35:06.906 A:middle
but it also is really powerful

00:35:06.906 --> 00:35:07.946 A:middle
on devices that have

00:35:08.126 --> 00:35:09.636 A:middle
non-rectangular screens like

00:35:09.636 --> 00:35:10.286 A:middle
iPhone X.

00:35:11.676 --> 00:35:12.986 A:middle
Now, you can see here we've got

00:35:12.986 --> 00:35:14.916 A:middle
our larger bars at the top and

00:35:14.916 --> 00:35:16.236 A:middle
bottom than we have on devices

00:35:16.236 --> 00:35:17.066 A:middle
that have home buttons.

00:35:17.686 --> 00:35:18.616 A:middle
And the Safe Area insets

00:35:18.616 --> 00:35:19.956 A:middle
obviously have just grown to

00:35:19.956 --> 00:35:21.286 A:middle
accommodate that larger size.

00:35:21.946 --> 00:35:23.796 A:middle
Now, unique to iPhone X is that

00:35:23.846 --> 00:35:25.746 A:middle
there are Safe Area insets even

00:35:25.746 --> 00:35:27.226 A:middle
in cases where no bars are

00:35:27.296 --> 00:35:29.586 A:middle
present and this extends the

00:35:29.586 --> 00:35:31.806 A:middle
landscape mode too where it can

00:35:31.806 --> 00:35:32.826 A:middle
really help you make sure that

00:35:32.826 --> 00:35:34.596 A:middle
you've got a rectangular area at

00:35:34.596 --> 00:35:36.426 A:middle
all times that's safe to display

00:35:36.426 --> 00:35:38.606 A:middle
content and will never be

00:35:40.676 --> 00:35:40.846 A:middle
clipped.

00:35:41.036 --> 00:35:43.426 A:middle
So I want to thank you all for

00:35:43.426 --> 00:35:44.856 A:middle
those of you who have adopted

00:35:44.956 --> 00:35:46.256 A:middle
Safe Area insets and updated

00:35:46.256 --> 00:35:48.306 A:middle
your apps for iPhone X.

00:35:48.536 --> 00:35:49.806 A:middle
It's been a really great

00:35:49.806 --> 00:35:51.076 A:middle
experience over the last year

00:35:51.146 --> 00:35:52.326 A:middle
and I'm sure most of you have

00:35:52.326 --> 00:35:52.996 A:middle
already done that.

00:35:53.536 --> 00:35:55.206 A:middle
If you haven't, now is a really

00:35:55.206 --> 00:35:56.176 A:middle
great time to do so.

00:35:56.836 --> 00:35:57.986 A:middle
Your customers will always

00:35:57.986 --> 00:35:59.466 A:middle
prefer apps that are being kept

00:35:59.466 --> 00:36:01.716 A:middle
up to date and support for

00:35:59.466 --> 00:36:01.716 A:middle
up to date and support for

00:36:01.756 --> 00:36:03.256 A:middle
iPhone X is a really visible

00:36:03.256 --> 00:36:04.296 A:middle
indicator of that being the

00:36:04.296 --> 00:36:04.596 A:middle
case.

00:36:05.166 --> 00:36:06.606 A:middle
So if you haven't, definitely go

00:36:06.606 --> 00:36:07.126 A:middle
do it now.

00:36:07.126 --> 00:36:08.626 A:middle
And to help make sure you have

00:36:08.626 --> 00:36:10.136 A:middle
all the information necessary to

00:36:10.136 --> 00:36:11.576 A:middle
do that, you can check out the

00:36:11.576 --> 00:36:13.526 A:middle
UIKit Apps for Every Size and

00:36:13.526 --> 00:36:15.226 A:middle
Shape Session later this week

00:36:15.446 --> 00:36:16.616 A:middle
which will tell you both all

00:36:16.616 --> 00:36:18.486 A:middle
about Safe Area insets and all

00:36:18.486 --> 00:36:20.776 A:middle
of the other related inset APIs

00:36:20.776 --> 00:36:22.336 A:middle
all throughout UIKit making it

00:36:22.336 --> 00:36:23.616 A:middle
easy to make sure you have apps

00:36:23.676 --> 00:36:26.646 A:middle
that scale to every shape and

00:36:27.716 --> 00:36:27.836 A:middle
size.

00:36:28.086 --> 00:36:29.186 A:middle
So that's our framework updates

00:36:29.816 --> 00:36:31.686 A:middle
and our API enhancements.

00:36:31.986 --> 00:36:33.606 A:middle
Next, let's talk about Siri

00:36:33.606 --> 00:36:34.296 A:middle
Shortcuts.

00:36:34.986 --> 00:36:37.056 A:middle
So Siri Shortcuts is an exciting

00:36:37.056 --> 00:36:39.316 A:middle
new API in iOS 12.

00:36:41.516 --> 00:36:42.886 A:middle
Siri Shortcuts makes it easy to

00:36:42.886 --> 00:36:44.716 A:middle
get common actions out of your

00:36:45.416 --> 00:36:47.296 A:middle
app and make them accessible via

00:36:47.296 --> 00:36:48.096 A:middle
Siri.

00:36:49.526 --> 00:36:50.726 A:middle
Now, Siri Shortcuts can be

00:36:50.726 --> 00:36:52.646 A:middle
suggested proactively right on

00:36:52.646 --> 00:36:54.286 A:middle
the coversheet making it easy to

00:36:54.416 --> 00:36:55.466 A:middle
access actions that you would

00:36:55.466 --> 00:36:57.426 A:middle
want to access at the exact time

00:36:57.426 --> 00:36:58.656 A:middle
and place that you want to

00:36:59.426 --> 00:37:00.436 A:middle
access them.

00:36:59.426 --> 00:37:00.436 A:middle
access them.

00:37:00.606 --> 00:37:01.866 A:middle
Even better, they can also be

00:37:01.866 --> 00:37:03.456 A:middle
suggested right on the Siri

00:37:03.456 --> 00:37:05.126 A:middle
watch face on Apple Watch.

00:37:06.696 --> 00:37:08.246 A:middle
Now not only are Siri actions

00:37:08.276 --> 00:37:09.916 A:middle
suggested proactively but they

00:37:09.916 --> 00:37:11.236 A:middle
can also be set up to be

00:37:11.236 --> 00:37:13.146 A:middle
executed using a custom voice

00:37:13.226 --> 00:37:13.596 A:middle
phrase.

00:37:17.256 --> 00:37:19.296 A:middle
Now, adding Siri Action Support

00:37:19.296 --> 00:37:21.786 A:middle
to your apps is really easy.

00:37:21.786 --> 00:37:22.946 A:middle
You can use two APIs.

00:37:23.266 --> 00:37:24.826 A:middle
There's NS User Activity, which

00:37:24.826 --> 00:37:26.306 A:middle
you may already be using for

00:37:26.306 --> 00:37:28.916 A:middle
support for Handoff and

00:37:28.916 --> 00:37:29.886 A:middle
Spotlight integration, and

00:37:30.356 --> 00:37:32.016 A:middle
there's also support for Siri

00:37:32.016 --> 00:37:33.346 A:middle
Intents for more complex

00:37:33.396 --> 00:37:35.316 A:middle
scenarios where you have more

00:37:35.316 --> 00:37:36.246 A:middle
custom interactions.

00:37:36.816 --> 00:37:38.156 A:middle
So let's look first at NS User

00:37:38.156 --> 00:37:38.606 A:middle
Activity.

00:37:39.406 --> 00:37:40.466 A:middle
Now as I mentioned, NS User

00:37:40.466 --> 00:37:42.056 A:middle
Activity is a common API with

00:37:42.056 --> 00:37:43.856 A:middle
Handoff and Spotlight and this

00:37:43.856 --> 00:37:45.116 A:middle
could be a really great API to

00:37:45.116 --> 00:37:46.826 A:middle
use if your Siri Shortcuts

00:37:46.826 --> 00:37:48.416 A:middle
should get your customers back

00:37:48.466 --> 00:37:50.116 A:middle
to a specific place in your app,

00:37:50.316 --> 00:37:51.516 A:middle
for example loading a particular

00:37:51.516 --> 00:37:54.226 A:middle
message or document, the same as

00:37:54.226 --> 00:37:55.056 A:middle
you would do if you were trying

00:37:55.056 --> 00:37:55.986 A:middle
to hand that off to another

00:37:55.986 --> 00:37:56.516 A:middle
device.

00:37:57.176 --> 00:37:58.706 A:middle
If you're already doing this,

00:37:58.806 --> 00:38:00.336 A:middle
it's really easy to add support

00:37:58.806 --> 00:38:00.336 A:middle
it's really easy to add support

00:38:00.336 --> 00:38:01.256 A:middle
for Siri Shortcuts.

00:38:01.516 --> 00:38:02.696 A:middle
You just set Eligible for

00:38:02.696 --> 00:38:03.686 A:middle
Prediction to true.

00:38:04.096 --> 00:38:05.116 A:middle
And if you're not, this may

00:38:05.116 --> 00:38:06.596 A:middle
still be a great way if your

00:38:06.776 --> 00:38:07.816 A:middle
shortcut fits into one of these

00:38:07.816 --> 00:38:08.486 A:middle
categories.

00:38:09.836 --> 00:38:11.846 A:middle
Now, if your app has other more

00:38:11.846 --> 00:38:13.426 A:middle
custom needs or if you just want

00:38:13.426 --> 00:38:14.886 A:middle
a lot more control, you can

00:38:14.886 --> 00:38:16.856 A:middle
adopt the Siri Kit Intents API.

00:38:17.836 --> 00:38:18.986 A:middle
Now Siri Kit Intents provides a

00:38:18.986 --> 00:38:20.636 A:middle
number of predefined intents

00:38:20.796 --> 00:38:22.596 A:middle
that you can easily adopt on

00:38:22.596 --> 00:38:22.966 A:middle
your own.

00:38:23.036 --> 00:38:24.456 A:middle
These are the same as the Siri

00:38:24.456 --> 00:38:25.866 A:middle
Kit Intents in previous years.

00:38:26.666 --> 00:38:27.696 A:middle
Now if your apps have more

00:38:27.896 --> 00:38:29.396 A:middle
custom behaviors, though, you

00:38:29.396 --> 00:38:30.966 A:middle
can now in iOS 12 define your

00:38:30.966 --> 00:38:32.936 A:middle
own custom intents.

00:38:33.736 --> 00:38:35.176 A:middle
Custom intents can be really

00:38:35.216 --> 00:38:36.696 A:middle
flexible and they do anything

00:38:36.696 --> 00:38:37.336 A:middle
that you would want.

00:38:37.846 --> 00:38:38.956 A:middle
In this case here, I've created

00:38:38.956 --> 00:38:40.526 A:middle
one to help me create my WWDC

00:38:40.526 --> 00:38:41.296 A:middle
slides next year.

00:38:42.436 --> 00:38:43.436 A:middle
Now the categories that you

00:38:43.436 --> 00:38:45.066 A:middle
could put your intents in to are

00:38:45.066 --> 00:38:45.966 A:middle
pretty broad already.

00:38:46.236 --> 00:38:47.506 A:middle
So here I've used the Create

00:38:47.646 --> 00:38:48.236 A:middle
category.

00:38:48.766 --> 00:38:50.306 A:middle
But if your intents are even

00:38:50.306 --> 00:38:51.866 A:middle
more generic than that, there

00:38:51.866 --> 00:38:53.046 A:middle
are even more general ones

00:38:53.046 --> 00:38:54.886 A:middle
available such as General Do,

00:38:54.886 --> 00:38:56.336 A:middle
Run, and Go options.

00:38:57.776 --> 00:38:59.266 A:middle
Now once you've created your

00:38:59.266 --> 00:39:00.376 A:middle
intent, you also want to make it

00:38:59.266 --> 00:39:00.376 A:middle
intent, you also want to make it

00:39:00.376 --> 00:39:01.586 A:middle
really easy for your customers

00:39:01.586 --> 00:39:02.916 A:middle
to create these custom shortcuts

00:39:02.916 --> 00:39:03.426 A:middle
to get to them.

00:39:03.926 --> 00:39:05.526 A:middle
And so there's now an API from

00:39:05.526 --> 00:39:06.796 A:middle
right within your app you can

00:39:06.796 --> 00:39:08.396 A:middle
allow customers to create a

00:39:08.466 --> 00:39:09.466 A:middle
custom voice shortcut.

00:39:09.876 --> 00:39:10.816 A:middle
So here I've got a button that

00:39:10.816 --> 00:39:12.066 A:middle
will just bring up a new panel

00:39:12.326 --> 00:39:14.336 A:middle
enabling me to create a new

00:39:14.336 --> 00:39:15.956 A:middle
shortcut right within my app as

00:39:16.036 --> 00:39:17.346 A:middle
soon as I finished an operation.

00:39:17.936 --> 00:39:18.666 A:middle
So if you're doing something

00:39:18.666 --> 00:39:19.716 A:middle
like ordering a coffee in the

00:39:19.716 --> 00:39:21.326 A:middle
morning and you notice it's

00:39:22.086 --> 00:39:23.756 A:middle
something that might be done

00:39:23.756 --> 00:39:25.176 A:middle
again, this is a great

00:39:25.176 --> 00:39:27.186 A:middle
opportunity to offer to create a

00:39:27.266 --> 00:39:28.506 A:middle
Siri Shortcut to do that next

00:39:28.506 --> 00:39:28.736 A:middle
time.

00:39:29.616 --> 00:39:30.596 A:middle
Now even better, you can also

00:39:30.596 --> 00:39:32.066 A:middle
combine these shortcuts together

00:39:32.066 --> 00:39:34.236 A:middle
using the new Shortcuts app

00:39:34.236 --> 00:39:35.196 A:middle
available from the app store.

00:39:35.696 --> 00:39:37.176 A:middle
So you can learn all about this

00:39:37.176 --> 00:39:38.056 A:middle
and much more in the

00:39:38.056 --> 00:39:40.326 A:middle
Introduction to Siri Shortcuts,

00:39:40.856 --> 00:39:41.776 A:middle
Building for Voice Siri

00:39:41.776 --> 00:39:44.006 A:middle
Shortcuts, and Siri Shortcuts on

00:39:44.006 --> 00:39:45.326 A:middle
the Siri Watch Face Sessions

00:39:45.526 --> 00:39:45.976 A:middle
later this week.

00:39:46.136 --> 00:39:48.886 A:middle
So we've talked a lot this

00:39:48.886 --> 00:39:50.376 A:middle
morning about what's new in iOS

00:39:50.466 --> 00:39:52.796 A:middle
12, but there are also a number

00:39:52.796 --> 00:39:54.076 A:middle
of great sessions that are worth

00:39:54.076 --> 00:39:54.986 A:middle
mentioning that aren't

00:39:54.986 --> 00:39:56.286 A:middle
necessarily about what's new.

00:39:56.886 --> 00:39:58.386 A:middle
So if you're new to creating

00:39:58.386 --> 00:40:00.386 A:middle
apps for iOS, there's a really

00:39:58.386 --> 00:40:00.386 A:middle
apps for iOS, there's a really

00:40:00.386 --> 00:40:01.296 A:middle
great session you should check

00:40:01.296 --> 00:40:03.436 A:middle
out called I have This Idea For

00:40:03.436 --> 00:40:03.556 A:middle
an App.

00:40:03.796 --> 00:40:05.366 A:middle
So definitely check that out.

00:40:06.426 --> 00:40:07.516 A:middle
And if you already have an app,

00:40:07.516 --> 00:40:08.636 A:middle
and are just looking to add more

00:40:08.636 --> 00:40:10.106 A:middle
polish, there's a couple other

00:40:10.106 --> 00:40:11.776 A:middle
great sessions as well, A Tour

00:40:11.776 --> 00:40:13.646 A:middle
of UI Collection View and Adding

00:40:13.646 --> 00:40:14.996 A:middle
Delight to Your IOS App.

00:40:15.846 --> 00:40:17.516 A:middle
So thanks so much for coming out

00:40:17.516 --> 00:40:18.946 A:middle
this morning to hear what's new.

00:40:19.406 --> 00:40:20.266 A:middle
Look forward to seeing you in

00:40:20.266 --> 00:40:21.766 A:middle
the labs and I hope you have a

00:40:21.846 --> 00:40:22.336 A:middle
great week.

00:40:22.336 --> 00:40:22.576 A:middle
Thanks.

00:40:23.516 --> 00:40:30.570 A:middle
[ Applause ]
