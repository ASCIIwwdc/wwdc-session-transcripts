WEBVTT

00:00:07.516 --> 00:00:15.500 A:middle
[ Music ]

00:00:21.516 --> 00:00:29.106 A:middle
[ Applause ]

00:00:29.606 --> 00:00:30.276 A:middle
&gt;&gt; Good afternoon.

00:00:30.686 --> 00:00:31.776 A:middle
My name is Ali Ozer.

00:00:31.916 --> 00:00:33.346 A:middle
I, with my colleagues, Chris

00:00:33.346 --> 00:00:34.876 A:middle
Dreessen and Jesse Donaldson,

00:00:35.196 --> 00:00:36.206 A:middle
will be talking to you about

00:00:36.206 --> 00:00:37.986 A:middle
what's new in Cocoa in macOS

00:00:38.196 --> 00:00:38.596 A:middle
Mojave.

00:00:40.986 --> 00:00:42.286 A:middle
As you saw yesterday, we have

00:00:42.286 --> 00:00:43.696 A:middle
some amazing new features in

00:00:43.696 --> 00:00:44.456 A:middle
AppKit this year.

00:00:44.976 --> 00:00:45.936 A:middle
We'll be touching up on many

00:00:45.936 --> 00:00:47.826 A:middle
topics, among which are these.

00:00:48.286 --> 00:00:49.106 A:middle
We'll be talking about some of

00:00:49.106 --> 00:00:50.266 A:middle
the API refinements we've been

00:00:50.266 --> 00:00:50.606 A:middle
doing.

00:00:51.036 --> 00:00:52.476 A:middle
The amazing new Dark Mode, and

00:00:52.476 --> 00:00:54.496 A:middle
related features, some changes

00:00:54.496 --> 00:00:56.476 A:middle
in layer backing, and also

00:00:56.476 --> 00:00:57.616 A:middle
custom Quick Actions.

00:00:58.896 --> 00:00:59.776 A:middle
So, let's dive right in.

00:01:00.396 --> 00:01:01.986 A:middle
Now, as you know, we pride

00:01:01.986 --> 00:01:04.105 A:middle
ourselves on our API's, and our

00:01:04.105 --> 00:01:05.876 A:middle
goal always, is to have API's

00:01:05.876 --> 00:01:07.446 A:middle
that are capable, and

00:01:07.446 --> 00:01:08.686 A:middle
consistent, and powerful.

00:01:09.796 --> 00:01:10.756 A:middle
So, with that in mind, we

00:01:10.756 --> 00:01:12.806 A:middle
continue to do refinements that

00:01:12.806 --> 00:01:14.516 A:middle
improve both the Objective-C and

00:01:14.516 --> 00:01:16.086 A:middle
Swift exposure of our API's.

00:01:16.086 --> 00:01:18.436 A:middle
And, this is not just in AppKit

00:01:18.436 --> 00:01:20.306 A:middle
or Foundation, but also other

00:01:20.306 --> 00:01:21.906 A:middle
frameworks including UIKit, as

00:01:21.956 --> 00:01:23.166 A:middle
you might have heard in this

00:01:23.166 --> 00:01:24.596 A:middle
morning's "What's New in Cocoa

00:01:24.596 --> 00:01:24.966 A:middle
Touch."

00:01:26.226 --> 00:01:28.236 A:middle
Now, the API changes we're doing

00:01:28.236 --> 00:01:30.586 A:middle
are fully source compatible in

00:01:30.586 --> 00:01:32.646 A:middle
Objective-C, and we also expect

00:01:32.646 --> 00:01:34.466 A:middle
them to be 100% migratable in

00:01:34.466 --> 00:01:36.846 A:middle
Swift by the time we GM the SDK.

00:01:37.516 --> 00:01:38.756 A:middle
So, with that, let's look at

00:01:38.756 --> 00:01:39.906 A:middle
some of the API refinements

00:01:39.906 --> 00:01:40.886 A:middle
within this release.

00:01:41.416 --> 00:01:44.226 A:middle
First I'm going to talk about

00:01:44.656 --> 00:01:47.036 A:middle
some updates to string types.

00:01:48.296 --> 00:01:49.486 A:middle
Last release, we introduced

00:01:49.486 --> 00:01:51.016 A:middle
string enumeration types as a

00:01:51.016 --> 00:01:52.476 A:middle
way to collect groups of related

00:01:52.476 --> 00:01:53.616 A:middle
string constants together.

00:01:54.286 --> 00:01:55.696 A:middle
These helped make API's that

00:01:55.746 --> 00:01:56.876 A:middle
deal in these types much

00:01:56.876 --> 00:01:57.236 A:middle
clearer.

00:01:58.896 --> 00:02:00.116 A:middle
And, here are some examples.

00:01:58.896 --> 00:02:00.116 A:middle
And, here are some examples.

00:02:00.326 --> 00:02:02.326 A:middle
The first one is declared as NS

00:02:02.356 --> 00:02:03.286 A:middle
STRING ENUM.

00:02:03.596 --> 00:02:05.356 A:middle
This is used for string

00:02:05.356 --> 00:02:07.206 A:middle
enumerations, where we provide

00:02:07.206 --> 00:02:08.156 A:middle
some values out of the

00:02:08.156 --> 00:02:09.666 A:middle
frameworks with no ability to

00:02:09.666 --> 00:02:11.206 A:middle
extend them, so it's a fixed set

00:02:11.206 --> 00:02:12.016 A:middle
of values.

00:02:12.536 --> 00:02:14.556 A:middle
The next two here, NS EXTENSIBLE

00:02:14.556 --> 00:02:17.456 A:middle
STRING ENUM, this is used to

00:02:17.456 --> 00:02:19.416 A:middle
declare string enumerations

00:02:19.676 --> 00:02:20.646 A:middle
where we might provide some

00:02:20.646 --> 00:02:22.346 A:middle
values out of the box, but other

00:02:22.346 --> 00:02:23.936 A:middle
frameworks and applications can

00:02:23.936 --> 00:02:25.746 A:middle
also add to that set.

00:02:26.556 --> 00:02:28.176 A:middle
So, we've done two changes here.

00:02:28.526 --> 00:02:29.866 A:middle
First one is a simple one.

00:02:30.276 --> 00:02:31.896 A:middle
We've simply replaced NS STRING

00:02:31.896 --> 00:02:34.766 A:middle
ENUM and NS STRING EXTENSIBLE

00:02:34.766 --> 00:02:36.226 A:middle
ENUM with their typed variants.

00:02:36.226 --> 00:02:37.566 A:middle
This is effectively a no-op

00:02:37.566 --> 00:02:38.076 A:middle
change.

00:02:38.336 --> 00:02:39.376 A:middle
These are just more general

00:02:39.376 --> 00:02:40.866 A:middle
forms of the same declarations.

00:02:41.196 --> 00:02:43.056 A:middle
So, no changes in your code, or

00:02:43.056 --> 00:02:44.076 A:middle
call sites, or anything.

00:02:44.736 --> 00:02:46.216 A:middle
Now, the next one, NSImageName,

00:02:46.876 --> 00:02:49.066 A:middle
underwent a bigger change, a

00:02:49.066 --> 00:02:50.726 A:middle
more significant change, instead

00:02:50.726 --> 00:02:52.256 A:middle
of a string enumeration, it's

00:02:52.256 --> 00:02:54.226 A:middle
now declared as NS SWIFT BRIDGED

00:02:54.226 --> 00:02:56.316 A:middle
TYPEDEF, which is effectively a

00:02:56.316 --> 00:02:56.766 A:middle
typedef.

00:02:56.766 --> 00:02:58.456 A:middle
Now, here's what the Swift

00:02:58.456 --> 00:02:59.716 A:middle
exposure of this looks like.

00:03:00.926 --> 00:03:03.846 A:middle
In Swift 4, NSImage.Name came

00:03:03.846 --> 00:03:05.216 A:middle
across as a struct, which is the

00:03:05.216 --> 00:03:06.686 A:middle
way you would declare the string

00:03:06.686 --> 00:03:07.596 A:middle
enumerations.

00:03:07.926 --> 00:03:09.886 A:middle
In Swift 4.2, it's as a

00:03:09.886 --> 00:03:12.276 A:middle
typealias, a simple, good old,

00:03:12.366 --> 00:03:13.926 A:middle
garden variety typealias.

00:03:14.286 --> 00:03:14.936 A:middle
Much simpler.

00:03:16.046 --> 00:03:17.246 A:middle
So, the question is, why did we

00:03:17.246 --> 00:03:17.726 A:middle
do this?

00:03:18.136 --> 00:03:19.216 A:middle
Let's look at a call site

00:03:19.306 --> 00:03:19.826 A:middle
example.

00:03:22.056 --> 00:03:24.786 A:middle
Here in Swift 4 is how you would

00:03:24.826 --> 00:03:26.486 A:middle
take a string, and create an

00:03:26.486 --> 00:03:28.946 A:middle
NSImage with it, by using the

00:03:28.946 --> 00:03:29.606 A:middle
named method.

00:03:29.976 --> 00:03:31.686 A:middle
As you'll see here, you'll be

00:03:31.686 --> 00:03:32.986 A:middle
taking the string, and we're

00:03:32.986 --> 00:03:34.936 A:middle
converting it to an NSImage.Name

00:03:34.936 --> 00:03:36.126 A:middle
into the [inaudible] name before

00:03:36.126 --> 00:03:37.456 A:middle
we call NSImage named.

00:03:37.966 --> 00:03:38.796 A:middle
This does not feel

00:03:38.796 --> 00:03:40.526 A:middle
super-streamlined to have to

00:03:40.656 --> 00:03:42.316 A:middle
repeat NSImage.Name here.

00:03:42.956 --> 00:03:44.806 A:middle
Now, with changes in Swift 4.2,

00:03:45.296 --> 00:03:46.206 A:middle
this is all we have to write.

00:03:46.286 --> 00:03:47.536 A:middle
You do not have to convert to

00:03:47.536 --> 00:03:49.246 A:middle
the NSImage name, which is more

00:03:49.246 --> 00:03:50.736 A:middle
streamlined, a little cleaner,

00:03:50.846 --> 00:03:51.846 A:middle
less redundancy there.

00:03:52.426 --> 00:03:53.636 A:middle
So, we believe this typedef

00:03:53.636 --> 00:03:55.576 A:middle
approach is appropriate for

00:03:55.576 --> 00:03:55.976 A:middle
passed-through values.

00:03:56.516 --> 00:04:01.126 A:middle
[ Applause ]

00:03:56.516 --> 00:04:01.126 A:middle
[ Applause ]

00:04:01.626 --> 00:04:02.726 A:middle
Yes, we had heard from some of

00:04:02.726 --> 00:04:02.916 A:middle
you.

00:04:04.616 --> 00:04:05.856 A:middle
So, we believe this appropriate

00:04:05.856 --> 00:04:07.336 A:middle
for passed-through values, such

00:04:07.336 --> 00:04:08.636 A:middle
as resource names or

00:04:08.636 --> 00:04:09.396 A:middle
identifiers.

00:04:09.396 --> 00:04:11.756 A:middle
Basically, values that are not

00:04:11.756 --> 00:04:13.266 A:middle
interpreted by the framework but

00:04:13.266 --> 00:04:14.026 A:middle
are just used in a

00:04:14.026 --> 00:04:14.926 A:middle
passed-through fashion.

00:04:15.156 --> 00:04:16.886 A:middle
So, image name, color name,

00:04:16.886 --> 00:04:18.495 A:middle
window frame autosave names, and

00:04:18.495 --> 00:04:18.875 A:middle
so on.

00:04:18.875 --> 00:04:19.906 A:middle
So, these are the types that are

00:04:19.906 --> 00:04:21.136 A:middle
appropriate for this.

00:04:21.245 --> 00:04:23.386 A:middle
Now, note that you still have

00:04:23.386 --> 00:04:25.056 A:middle
the benefits of a specific API

00:04:25.096 --> 00:04:26.446 A:middle
declaration however with this

00:04:26.446 --> 00:04:27.046 A:middle
new approach.

00:04:27.386 --> 00:04:28.826 A:middle
Here's the declaration for

00:04:28.826 --> 00:04:30.146 A:middle
NSImage named method.

00:04:30.146 --> 00:04:31.226 A:middle
You'll note that the argument is

00:04:31.226 --> 00:04:33.656 A:middle
still NSImage.Name, as opposed

00:04:33.656 --> 00:04:34.166 A:middle
to a string.

00:04:34.166 --> 00:04:35.386 A:middle
So, we still have that come

00:04:35.386 --> 00:04:35.676 A:middle
through.

00:04:36.516 --> 00:04:37.526 A:middle
Now, here's the full list of

00:04:37.526 --> 00:04:37.926 A:middle
types.

00:04:37.926 --> 00:04:39.086 A:middle
We did this to NSAppKit.

00:04:39.136 --> 00:04:42.476 A:middle
Turns out a lot of types could

00:04:42.686 --> 00:04:43.656 A:middle
benefit from this.

00:04:45.356 --> 00:04:46.746 A:middle
It's not just this, it's also

00:04:46.746 --> 00:04:47.606 A:middle
this set as well.

00:04:47.706 --> 00:04:48.906 A:middle
So, a number of types have

00:04:49.176 --> 00:04:50.236 A:middle
changed in this fashion.

00:04:52.126 --> 00:04:54.546 A:middle
So, next, I'm going to talk

00:04:54.546 --> 00:04:55.816 A:middle
about common prefixes.

00:04:56.376 --> 00:04:57.446 A:middle
As you've seen in previous

00:04:57.446 --> 00:04:58.576 A:middle
years, over time, we've been

00:04:58.576 --> 00:05:00.866 A:middle
switching from common suffixes,

00:04:58.576 --> 00:05:00.866 A:middle
switching from common suffixes,

00:05:00.866 --> 00:05:02.436 A:middle
which is what we used to to many

00:05:02.436 --> 00:05:04.066 A:middle
years ago, to common prefixes in

00:05:04.066 --> 00:05:04.796 A:middle
Objective-C.

00:05:05.186 --> 00:05:07.466 A:middle
Using common prefixes enables

00:05:07.466 --> 00:05:08.936 A:middle
names to group together, and

00:05:08.936 --> 00:05:10.446 A:middle
become more easily discoverable,

00:05:10.686 --> 00:05:12.266 A:middle
and come across better in Swift.

00:05:13.586 --> 00:05:16.776 A:middle
So, let's look at an example.

00:05:16.846 --> 00:05:18.996 A:middle
Here is NSLineJoinStyle as it

00:05:18.996 --> 00:05:21.156 A:middle
appears in the 10.13 SDK.

00:05:21.156 --> 00:05:22.996 A:middle
And, here is how it appears in

00:05:22.996 --> 00:05:23.866 A:middle
10.14.

00:05:24.226 --> 00:05:25.866 A:middle
You'll note that enumeration

00:05:25.866 --> 00:05:26.786 A:middle
values such as

00:05:26.826 --> 00:05:28.516 A:middle
MiterLineJoinStyle now have

00:05:28.546 --> 00:05:30.316 A:middle
become LineJoinStyleMiter.

00:05:30.936 --> 00:05:32.486 A:middle
So, a common prefix.

00:05:33.116 --> 00:05:34.936 A:middle
The Swift exposure changes from

00:05:35.436 --> 00:05:37.986 A:middle
miterLineJoinStyle to just

00:05:38.176 --> 00:05:38.606 A:middle
miter.

00:05:38.886 --> 00:05:40.616 A:middle
So, it's-- you know, you don't

00:05:40.616 --> 00:05:41.756 A:middle
have to repeat the type any

00:05:41.756 --> 00:05:43.076 A:middle
more; it's pretty obvious in the

00:05:43.076 --> 00:05:44.506 A:middle
call site, so much cleaner.

00:05:44.846 --> 00:05:46.506 A:middle
And, so good it deserves a happy

00:05:46.506 --> 00:05:46.936 A:middle
emoji.

00:05:47.151 --> 00:05:49.151 A:middle
[ Scattered Applause ]

00:05:49.286 --> 00:05:49.876 A:middle
Thank you.

00:05:51.186 --> 00:05:53.246 A:middle
And, we did this to a number of

00:05:53.246 --> 00:05:54.366 A:middle
other types that we had not

00:05:54.756 --> 00:05:56.396 A:middle
done, applied this change to,

00:05:56.396 --> 00:05:57.956 A:middle
and here is that list of types.

00:06:00.496 --> 00:06:01.376 A:middle
Next, I want to talk about

00:06:01.376 --> 00:06:02.506 A:middle
formalized protocols.

00:06:03.446 --> 00:06:04.966 A:middle
In the olden days, we used to

00:06:04.966 --> 00:06:06.936 A:middle
use informal protocols, which

00:06:06.936 --> 00:06:08.176 A:middle
are basically categories on

00:06:08.246 --> 00:06:09.556 A:middle
NSObject to group related

00:06:09.596 --> 00:06:10.356 A:middle
methods together.

00:06:10.966 --> 00:06:11.906 A:middle
And, since then, we added

00:06:11.906 --> 00:06:13.056 A:middle
features such as optional

00:06:13.056 --> 00:06:14.846 A:middle
methods on protocols and so on,

00:06:14.846 --> 00:06:15.626 A:middle
and we've been switching to

00:06:15.626 --> 00:06:17.096 A:middle
formal protocols where possible.

00:06:17.716 --> 00:06:19.336 A:middle
And, I'll show you an example of

00:06:19.336 --> 00:06:20.996 A:middle
one of the ones we did this

00:06:20.996 --> 00:06:21.476 A:middle
release.

00:06:23.156 --> 00:06:24.056 A:middle
Here is the method

00:06:24.116 --> 00:06:26.106 A:middle
validateMenuItem, and it used to

00:06:26.106 --> 00:06:28.826 A:middle
be an informal protocol, a

00:06:28.826 --> 00:06:31.026 A:middle
categorization object in 10.13.

00:06:31.346 --> 00:06:32.526 A:middle
Now, it's a formal protocol,

00:06:32.526 --> 00:06:34.376 A:middle
called NSMenuItemValidation,

00:06:34.376 --> 00:06:35.216 A:middle
with .method in it.

00:06:35.706 --> 00:06:37.336 A:middle
The Swift exposure changes from

00:06:37.336 --> 00:06:39.866 A:middle
an extension NSObject to a

00:06:39.866 --> 00:06:41.016 A:middle
formal protocol, of course.

00:06:41.016 --> 00:06:42.886 A:middle
NSMenuItemValidation in Swift

00:06:42.886 --> 00:06:43.566 A:middle
4.2.

00:06:43.936 --> 00:06:44.986 A:middle
Of course, the benefits here are

00:06:44.986 --> 00:06:46.846 A:middle
that objects that do menu item

00:06:46.846 --> 00:06:48.416 A:middle
validation now have a way to

00:06:48.596 --> 00:06:49.956 A:middle
formally declare that they do

00:06:49.956 --> 00:06:51.036 A:middle
that by conforming to this

00:06:51.036 --> 00:06:51.506 A:middle
protocol.

00:06:52.096 --> 00:06:53.426 A:middle
Again, we like this so much, we

00:06:53.426 --> 00:06:54.526 A:middle
did it across a bunch of other

00:06:54.526 --> 00:06:55.246 A:middle
API's.

00:06:55.806 --> 00:06:57.656 A:middle
So, here's the full list of

00:06:57.656 --> 00:06:59.146 A:middle
formal protocols we added in

00:06:59.146 --> 00:06:59.586 A:middle
AppKit.

00:07:00.056 --> 00:07:01.136 A:middle
You'll notice things like color

00:07:01.136 --> 00:07:02.486 A:middle
changing, font changing,

00:07:02.646 --> 00:07:04.846 A:middle
NSEditor, NSEditorRegistration

00:07:05.176 --> 00:07:06.476 A:middle
combines the bindings-related

00:07:06.516 --> 00:07:07.816 A:middle
methods, and so on.

00:07:07.816 --> 00:07:09.236 A:middle
So, it's a good list of new,

00:07:09.236 --> 00:07:10.306 A:middle
formal protocols.

00:07:12.016 --> 00:07:13.066 A:middle
Next, I want to talk about

00:07:13.066 --> 00:07:14.876 A:middle
direct instance variable access.

00:07:15.826 --> 00:07:19.716 A:middle
Now, most-- in our API's almost

00:07:19.716 --> 00:07:21.096 A:middle
all of the instance variables

00:07:21.196 --> 00:07:22.136 A:middle
are private.

00:07:22.586 --> 00:07:24.346 A:middle
And, we've said so, but in a way

00:07:24.736 --> 00:07:25.826 A:middle
that they have been declared,

00:07:25.826 --> 00:07:27.156 A:middle
especially in some older AppKit

00:07:27.186 --> 00:07:29.466 A:middle
classes, subclasses were allowed

00:07:29.556 --> 00:07:31.256 A:middle
to touch the instance variables,

00:07:31.526 --> 00:07:32.896 A:middle
directly access those instance

00:07:32.896 --> 00:07:33.216 A:middle
variables.

00:07:33.716 --> 00:07:34.816 A:middle
Now, some of you may not even be

00:07:34.816 --> 00:07:36.286 A:middle
aware of this, so please don't

00:07:36.286 --> 00:07:37.356 A:middle
go ahead and start using them,

00:07:37.706 --> 00:07:39.576 A:middle
because this is probably an old

00:07:39.576 --> 00:07:40.956 A:middle
code, code I'm sure you didn't

00:07:40.956 --> 00:07:42.656 A:middle
write, but maybe inherited, that

00:07:42.656 --> 00:07:43.956 A:middle
may be using instance variables

00:07:43.956 --> 00:07:44.316 A:middle
directly.

00:07:44.766 --> 00:07:46.306 A:middle
So, for now, we are going to be

00:07:46.306 --> 00:07:47.666 A:middle
frowning upon this practice a

00:07:47.666 --> 00:07:49.656 A:middle
bit more vigorously by

00:07:50.006 --> 00:07:50.656 A:middle
deprecating it.

00:07:51.166 --> 00:07:52.446 A:middle
Now, you'll be-- code that

00:07:52.446 --> 00:07:53.756 A:middle
accesses instance variables

00:07:53.756 --> 00:07:55.436 A:middle
directly will get a warning, and

00:07:55.436 --> 00:07:57.106 A:middle
our intent is to break this in

00:07:57.106 --> 00:07:57.896 A:middle
future updates.

00:07:57.896 --> 00:07:59.446 A:middle
So, as you get the chance,

00:07:59.486 --> 00:08:00.596 A:middle
please go ahead and clean these

00:07:59.486 --> 00:08:00.596 A:middle
please go ahead and clean these

00:08:00.596 --> 00:08:01.186 A:middle
usages.

00:08:02.406 --> 00:08:04.346 A:middle
And, the fix is pretty

00:08:04.346 --> 00:08:05.086 A:middle
straightforward.

00:08:05.086 --> 00:08:06.196 A:middle
Instead of accessing the

00:08:06.196 --> 00:08:07.366 A:middle
instance variable directly,

00:08:07.686 --> 00:08:08.866 A:middle
please go ahead and call the

00:08:08.866 --> 00:08:10.006 A:middle
getter, or the property

00:08:10.006 --> 00:08:11.346 A:middle
accessed, or whatever there

00:08:11.346 --> 00:08:11.806 A:middle
might be.

00:08:11.986 --> 00:08:14.116 A:middle
And, if you have some reason to

00:08:14.116 --> 00:08:15.246 A:middle
access the instance variable,

00:08:15.246 --> 00:08:16.266 A:middle
and you don't see a way around

00:08:16.266 --> 00:08:17.496 A:middle
it, you might want to let us

00:08:17.496 --> 00:08:17.706 A:middle
know.

00:08:18.936 --> 00:08:20.216 A:middle
Now, speaking of deprecation,

00:08:20.576 --> 00:08:21.626 A:middle
we're doing one more thing

00:08:23.276 --> 00:08:25.326 A:middle
called formal soft deprecation.

00:08:25.976 --> 00:08:26.906 A:middle
So, over the years we have

00:08:26.906 --> 00:08:28.866 A:middle
deprecated a lot of API's, and

00:08:28.866 --> 00:08:29.986 A:middle
have replaced them with better

00:08:30.016 --> 00:08:30.416 A:middle
ones.

00:08:30.966 --> 00:08:32.275 A:middle
In cases where the deprecation

00:08:32.275 --> 00:08:33.976 A:middle
isn't urgent, we usually go

00:08:33.976 --> 00:08:35.346 A:middle
through an informal deprecation

00:08:35.346 --> 00:08:36.765 A:middle
phase, where we tell you the

00:08:36.765 --> 00:08:38.336 A:middle
API's deprecated, we release

00:08:38.336 --> 00:08:39.916 A:middle
note it, we comment it, and so

00:08:39.916 --> 00:08:41.426 A:middle
on, before we actually mark the

00:08:41.426 --> 00:08:42.456 A:middle
API's deprecated.

00:08:42.836 --> 00:08:44.116 A:middle
Usually to reduce disruption.

00:08:44.916 --> 00:08:46.016 A:middle
But now, we have a way to mark

00:08:46.016 --> 00:08:47.366 A:middle
API's as to be formally

00:08:47.366 --> 00:08:47.956 A:middle
deprecated.

00:08:48.566 --> 00:08:49.556 A:middle
Let me give you an example.

00:08:50.726 --> 00:08:51.626 A:middle
Here we have a symbol,

00:08:51.676 --> 00:08:54.356 A:middle
NSBoxOldStyle, which of course

00:08:54.356 --> 00:08:55.846 A:middle
happens to be a name that begs

00:08:55.846 --> 00:08:56.626 A:middle
to be deprecated.

00:08:57.186 --> 00:08:58.176 A:middle
And, you'll note that we've

00:08:58.206 --> 00:08:59.696 A:middle
marked it as deprecated.

00:09:00.316 --> 00:09:01.386 A:middle
And, the version number for the

00:09:01.386 --> 00:09:02.846 A:middle
deprecation is API TO BE

00:09:02.846 --> 00:09:03.416 A:middle
DEPRECATED.

00:09:04.836 --> 00:09:07.386 A:middle
So, what this does is, it tells

00:09:07.386 --> 00:09:09.186 A:middle
the compiler not to generate a

00:09:09.186 --> 00:09:10.706 A:middle
deprecation warning or an error,

00:09:11.206 --> 00:09:12.906 A:middle
however our intent is that if

00:09:12.906 --> 00:09:14.396 A:middle
you try to use the symbol in

00:09:14.426 --> 00:09:16.516 A:middle
Xcode, or new code, or in access

00:09:16.516 --> 00:09:18.026 A:middle
documentation, you will get a

00:09:18.026 --> 00:09:19.216 A:middle
warning that the symbol is

00:09:19.216 --> 00:09:20.216 A:middle
deprecated, and it will be

00:09:20.216 --> 00:09:21.356 A:middle
pointed at the replacement

00:09:21.356 --> 00:09:21.736 A:middle
symbol.

00:09:22.336 --> 00:09:23.546 A:middle
So, of course, comes across in

00:09:23.546 --> 00:09:24.466 A:middle
Swift as well.

00:09:24.556 --> 00:09:26.856 A:middle
As you can see here, one thing

00:09:26.856 --> 00:09:28.126 A:middle
to note, the version number

00:09:28.156 --> 00:09:29.016 A:middle
100,000.

00:09:29.706 --> 00:09:30.996 A:middle
This is not a pre-announcement,

00:09:30.996 --> 00:09:32.676 A:middle
or a leak of some far, future

00:09:32.676 --> 00:09:32.956 A:middle
SDK.

00:09:32.956 --> 00:09:34.996 A:middle
It's just that's a placeholder

00:09:34.996 --> 00:09:36.526 A:middle
number we're using for now to

00:09:36.526 --> 00:09:39.036 A:middle
indicate this feature.

00:09:40.196 --> 00:09:41.206 A:middle
Now, we use formal soft

00:09:41.206 --> 00:09:42.126 A:middle
deprecation in a few other

00:09:42.126 --> 00:09:42.806 A:middle
cases.

00:09:43.826 --> 00:09:45.286 A:middle
Earlier I showed you this.

00:09:46.146 --> 00:09:47.436 A:middle
And, I told you that we renamed

00:09:47.436 --> 00:09:49.076 A:middle
MiterLineJoinStyle to by

00:09:49.076 --> 00:09:50.126 A:middle
LineJoinStyleMiter.

00:09:50.956 --> 00:09:51.846 A:middle
And, I also said that

00:09:51.846 --> 00:09:53.786 A:middle
Objective-C source code was 100%

00:09:53.786 --> 00:09:54.326 A:middle
compatible.

00:09:54.826 --> 00:09:56.066 A:middle
So, you might be wondering,

00:09:56.066 --> 00:09:57.076 A:middle
well, what happened to that old

00:09:57.076 --> 00:09:58.336 A:middle
symbol that you renamed?

00:09:58.876 --> 00:10:00.066 A:middle
Well, we actually declared that

00:09:58.876 --> 00:10:00.066 A:middle
Well, we actually declared that

00:10:00.066 --> 00:10:02.596 A:middle
old symbol, as you see here, by

00:10:02.596 --> 00:10:03.496 A:middle
using this new API TO BE

00:10:03.496 --> 00:10:03.976 A:middle
DEPRECATED.

00:10:04.046 --> 00:10:06.896 A:middle
So, we declare it as deprecated,

00:10:07.016 --> 00:10:08.936 A:middle
as API TO BE DEPRECATED, meaning

00:10:08.936 --> 00:10:11.406 A:middle
any new attempts to use it will

00:10:11.406 --> 00:10:13.336 A:middle
get warnings, but existing uses

00:10:13.336 --> 00:10:14.806 A:middle
will be left alone, because we

00:10:14.806 --> 00:10:15.766 A:middle
really don't want to disrupt

00:10:16.236 --> 00:10:17.236 A:middle
uses of the symbol in

00:10:17.236 --> 00:10:21.346 A:middle
Objective-C source code.

00:10:21.446 --> 00:10:22.576 A:middle
Now, turns out there was a lot

00:10:22.576 --> 00:10:25.186 A:middle
of symbols that were waiting for

00:10:25.186 --> 00:10:27.546 A:middle
this facility, so a lot of API's

00:10:27.666 --> 00:10:29.006 A:middle
are marked with API TO BE

00:10:29.006 --> 00:10:29.626 A:middle
DEPRECATED.

00:10:29.966 --> 00:10:31.246 A:middle
A bunch of these are because we

00:10:31.246 --> 00:10:33.326 A:middle
did the common suffix to common

00:10:33.426 --> 00:10:35.046 A:middle
prefix naming, and some of the

00:10:35.046 --> 00:10:36.406 A:middle
others are symbols that we are

00:10:36.636 --> 00:10:38.156 A:middle
de-emphasizing deprecating,

00:10:38.636 --> 00:10:39.766 A:middle
because we're bringing new ones

00:10:39.766 --> 00:10:39.926 A:middle
in.

00:10:39.926 --> 00:10:40.936 A:middle
Especially in support of

00:10:40.936 --> 00:10:42.276 A:middle
features such as Dark Mode,

00:10:42.606 --> 00:10:43.586 A:middle
which you'll hear about later

00:10:43.586 --> 00:10:43.836 A:middle
today.

00:10:44.486 --> 00:10:46.996 A:middle
So, the last topic I want to

00:10:46.996 --> 00:10:48.326 A:middle
talk about is secure coding.

00:10:49.186 --> 00:10:50.116 A:middle
As you may be aware, we

00:10:50.116 --> 00:10:53.016 A:middle
introduced the concept of secure

00:10:53.016 --> 00:10:56.336 A:middle
coding back in 10.8 and iOS 6.

00:10:56.446 --> 00:10:59.196 A:middle
It basically allows class-- when

00:10:59.196 --> 00:11:00.366 A:middle
you are archiving, basically

00:10:59.196 --> 00:11:00.366 A:middle
you are archiving, basically

00:11:00.366 --> 00:11:01.286 A:middle
allows you to specify what

00:11:01.286 --> 00:11:03.226 A:middle
classes are expected, that way

00:11:03.226 --> 00:11:04.916 A:middle
it can be an explicit error if

00:11:04.916 --> 00:11:05.766 A:middle
those classes are not

00:11:05.766 --> 00:11:06.946 A:middle
encountered in the archive.

00:11:08.126 --> 00:11:09.106 A:middle
Now, the way we did secure

00:11:09.106 --> 00:11:13.626 A:middle
coding, the secure coding was an

00:11:13.626 --> 00:11:14.436 A:middle
optional feature.

00:11:14.906 --> 00:11:16.766 A:middle
But, we now have new API's that

00:11:16.766 --> 00:11:18.886 A:middle
enable both secure coding as a

00:11:18.886 --> 00:11:20.376 A:middle
default behavior, and as a

00:11:20.376 --> 00:11:21.866 A:middle
bonus, they enable error

00:11:21.866 --> 00:11:22.556 A:middle
returns.

00:11:23.076 --> 00:11:24.526 A:middle
Our archiver and unarchiver

00:11:24.526 --> 00:11:25.836 A:middle
API's worked with exceptions,

00:11:25.836 --> 00:11:27.016 A:middle
but of course we prefer error

00:11:27.016 --> 00:11:27.576 A:middle
returns.

00:11:27.576 --> 00:11:29.606 A:middle
And, the new API's enabled error

00:11:29.606 --> 00:11:31.006 A:middle
return behaviors by default.

00:11:32.296 --> 00:11:34.086 A:middle
So, I'll show you the API's

00:11:34.086 --> 00:11:35.616 A:middle
NSKeyedUnarchiver, since that's

00:11:35.616 --> 00:11:36.546 A:middle
the most interesting.

00:11:37.126 --> 00:11:38.506 A:middle
Here is an NSKeyedUnarchiver.

00:11:38.886 --> 00:11:39.896 A:middle
One new method is in it.

00:11:39.976 --> 00:11:40.866 A:middle
It simply creates a

00:11:40.866 --> 00:11:43.296 A:middle
keyedUnarchiver, securely, and

00:11:43.296 --> 00:11:44.876 A:middle
in a way will return errors.

00:11:45.736 --> 00:11:47.736 A:middle
Two other new methods are these

00:11:47.736 --> 00:11:49.296 A:middle
convenience API's,

00:11:49.296 --> 00:11:51.506 A:middle
unarchivedObject(ofClasses from,

00:11:51.756 --> 00:11:53.556 A:middle
and unarchivedObject(ofClass

00:11:53.646 --> 00:11:53.986 A:middle
from.

00:11:54.256 --> 00:11:56.086 A:middle
These basically unarchive a

00:11:56.086 --> 00:11:57.466 A:middle
single object and return it.

00:11:57.926 --> 00:11:59.046 A:middle
They do it securely, and they

00:11:59.046 --> 00:12:01.246 A:middle
will return an error if some

00:11:59.046 --> 00:12:01.246 A:middle
will return an error if some

00:12:01.246 --> 00:12:02.386 A:middle
problem's encountered.

00:12:02.946 --> 00:12:04.086 A:middle
Now, note the second method

00:12:04.086 --> 00:12:04.306 A:middle
here.

00:12:04.306 --> 00:12:05.526 A:middle
It's sort of decorated like a

00:12:06.116 --> 00:12:07.706 A:middle
crazy fancy peacock.

00:12:08.296 --> 00:12:12.006 A:middle
All that decoration enables

00:12:12.006 --> 00:12:13.596 A:middle
Swift to infer the return type

00:12:13.596 --> 00:12:14.666 A:middle
much better, which is of course

00:12:14.716 --> 00:12:16.066 A:middle
a trick Swift is really good at.

00:12:16.866 --> 00:12:18.166 A:middle
Now, note that all the way out

00:12:18.166 --> 00:12:20.156 A:middle
at this SDK this year, they do

00:12:20.156 --> 00:12:24.026 A:middle
work back to 10.13, and iOS 11.

00:12:24.196 --> 00:12:25.296 A:middle
So, you can start using them,

00:12:25.616 --> 00:12:26.606 A:middle
even with those deployment

00:12:26.636 --> 00:12:27.146 A:middle
targets.

00:12:28.886 --> 00:12:30.576 A:middle
These methods replace the

00:12:30.576 --> 00:12:32.056 A:middle
methods on this slide here.

00:12:32.886 --> 00:12:34.416 A:middle
Now, you'll note that these are

00:12:34.416 --> 00:12:36.596 A:middle
being deprecated in 10.14 and

00:12:36.596 --> 00:12:37.856 A:middle
also iOS 12.

00:12:38.586 --> 00:12:40.226 A:middle
Since these are not doing secure

00:12:40.226 --> 00:12:42.116 A:middle
coding, we are deprecating them

00:12:42.116 --> 00:12:43.486 A:middle
immediately, rather than going

00:12:43.486 --> 00:12:44.426 A:middle
through that formal soft

00:12:44.426 --> 00:12:45.826 A:middle
deprecation, because we really

00:12:45.826 --> 00:12:47.086 A:middle
encourage you, we really want

00:12:47.086 --> 00:12:48.146 A:middle
you to switch to the secure

00:12:48.146 --> 00:12:49.376 A:middle
coding if you haven't done so

00:12:49.636 --> 00:12:49.826 A:middle
yet.

00:12:51.426 --> 00:12:53.636 A:middle
Now, one more thing about secure

00:12:53.636 --> 00:12:54.856 A:middle
coding is a new value

00:12:54.856 --> 00:12:55.616 A:middle
transformer.

00:12:56.046 --> 00:12:56.676 A:middle
As you may know,

00:12:56.786 --> 00:12:58.316 A:middle
NSValueTransformer is a class

00:12:58.606 --> 00:12:59.446 A:middle
used for automatically

00:12:59.446 --> 00:13:00.906 A:middle
transforming values from one to

00:12:59.446 --> 00:13:00.906 A:middle
transforming values from one to

00:13:01.026 --> 00:13:01.526 A:middle
another.

00:13:02.076 --> 00:13:03.466 A:middle
These two valueTransformers

00:13:03.466 --> 00:13:05.416 A:middle
here-- unarchiveFromData and

00:13:05.416 --> 00:13:07.806 A:middle
keyedUnarchivedFromData-- the

00:13:07.806 --> 00:13:09.436 A:middle
first one does unkeyed

00:13:09.436 --> 00:13:10.426 A:middle
archiving, the second one does

00:13:10.426 --> 00:13:11.366 A:middle
keyed archiving, but not

00:13:11.366 --> 00:13:11.966 A:middle
securely.

00:13:12.436 --> 00:13:14.506 A:middle
And so, these are now not

00:13:14.756 --> 00:13:16.026 A:middle
working in the way we like, so

00:13:16.026 --> 00:13:17.396 A:middle
we're deprecating these two.

00:13:17.396 --> 00:13:18.616 A:middle
And, replacing them with this

00:13:18.616 --> 00:13:19.696 A:middle
new secure Unarchive

00:13:19.696 --> 00:13:21.156 A:middle
FromDataTransformerName, which

00:13:21.156 --> 00:13:22.526 A:middle
will do the unarchiving

00:13:22.526 --> 00:13:23.086 A:middle
securely.

00:13:23.316 --> 00:13:24.476 A:middle
So, we urge you to switch to

00:13:24.476 --> 00:13:25.386 A:middle
this one as well.

00:13:25.716 --> 00:13:28.696 A:middle
Now, on the secure coding front,

00:13:28.696 --> 00:13:29.666 A:middle
we've also gone ahead and

00:13:29.666 --> 00:13:30.806 A:middle
adopted secure coding in a

00:13:30.806 --> 00:13:32.036 A:middle
number of AppKit classes that

00:13:32.036 --> 00:13:32.716 A:middle
didn't do it yet.

00:13:33.646 --> 00:13:35.536 A:middle
Note here, NSAppearance, which

00:13:36.106 --> 00:13:38.186 A:middle
is a recent, relatively recent

00:13:38.186 --> 00:13:39.156 A:middle
class that is increasingly

00:13:39.156 --> 00:13:40.566 A:middle
becoming your friend, as you'll

00:13:40.566 --> 00:13:42.106 A:middle
see in later talks about Dark

00:13:42.106 --> 00:13:43.476 A:middle
Mode and other features we've

00:13:43.476 --> 00:13:44.246 A:middle
added in AppKit.

00:13:44.906 --> 00:13:46.246 A:middle
We've also added secure coding

00:13:46.246 --> 00:13:47.716 A:middle
to a few foundation API's that

00:13:47.746 --> 00:13:48.356 A:middle
did not have it.

00:13:48.756 --> 00:13:49.946 A:middle
And, here is that list.

00:13:51.136 --> 00:13:52.296 A:middle
Now, one more note on secure

00:13:52.296 --> 00:13:52.686 A:middle
coding.

00:13:53.016 --> 00:13:54.756 A:middle
We have a talk Thursday morning,

00:13:55.856 --> 00:13:58.196 A:middle
"Data You Can Trust," where

00:13:58.196 --> 00:13:59.666 A:middle
we'll talk about doing coding

00:14:00.166 --> 00:14:01.776 A:middle
and archiving and unarchiving in

00:14:01.776 --> 00:14:03.296 A:middle
a robust and secure fashion.

00:14:03.396 --> 00:14:05.146 A:middle
So, I invite you to attend that.

00:14:05.196 --> 00:14:07.716 A:middle
Thursday morning at 9.

00:14:07.916 --> 00:14:09.566 A:middle
So, at this point, the rest of

00:14:09.566 --> 00:14:10.756 A:middle
the talk is going to be about

00:14:10.756 --> 00:14:12.036 A:middle
the new features in AppKit and

00:14:12.036 --> 00:14:12.876 A:middle
related areas.

00:14:13.156 --> 00:14:14.466 A:middle
And, to kick that off I invite

00:14:14.506 --> 00:14:14.976 A:middle
Chris on stage.

00:14:15.516 --> 00:14:20.966 A:middle
[ Applause ]

00:14:21.466 --> 00:14:21.986 A:middle
&gt;&gt; Thanks, Ali.

00:14:22.596 --> 00:14:23.806 A:middle
So, Dark Mode is one of the most

00:14:23.806 --> 00:14:25.036 A:middle
exciting new features in macOS

00:14:25.036 --> 00:14:25.946 A:middle
10.14.

00:14:26.406 --> 00:14:27.386 A:middle
And, I'm sure you all saw

00:14:27.386 --> 00:14:28.796 A:middle
yesterday, I bet some of you are

00:14:28.796 --> 00:14:29.656 A:middle
running it right now.

00:14:29.656 --> 00:14:30.796 A:middle
But, let's go ahead and take a

00:14:30.796 --> 00:14:31.076 A:middle
look.

00:14:32.036 --> 00:14:34.666 A:middle
So, we have these great new sets

00:14:34.666 --> 00:14:35.556 A:middle
of system artwork.

00:14:36.126 --> 00:14:37.336 A:middle
It makes our system UI look

00:14:37.336 --> 00:14:37.616 A:middle
great.

00:14:37.616 --> 00:14:38.676 A:middle
It makes your application look

00:14:38.676 --> 00:14:38.936 A:middle
great.

00:14:39.156 --> 00:14:39.996 A:middle
It's going to make your user

00:14:39.996 --> 00:14:40.836 A:middle
content look great.

00:14:41.186 --> 00:14:42.436 A:middle
And, what we all want to know is

00:14:42.436 --> 00:14:44.586 A:middle
what we need to do to adopt

00:14:45.216 --> 00:14:45.326 A:middle
this.

00:14:45.526 --> 00:14:47.146 A:middle
So, the first step is really

00:14:47.146 --> 00:14:47.536 A:middle
simple.

00:14:47.906 --> 00:14:49.246 A:middle
We need to relink against the

00:14:49.246 --> 00:14:50.906 A:middle
macOS 10.14 SDK.

00:14:51.336 --> 00:14:52.146 A:middle
That's easy enough.

00:14:52.436 --> 00:14:53.496 A:middle
That might be enough for some of

00:14:53.496 --> 00:14:54.736 A:middle
us, too, but most of us are

00:14:54.736 --> 00:14:55.836 A:middle
going to need to do a little bit

00:14:55.836 --> 00:14:57.406 A:middle
more work to make an app that

00:14:57.406 --> 00:14:57.896 A:middle
looks great.

00:14:58.676 --> 00:14:59.656 A:middle
So, the next thing we're going

00:14:59.656 --> 00:15:01.176 A:middle
to want to do, is we're going to

00:14:59.656 --> 00:15:01.176 A:middle
to want to do, is we're going to

00:15:01.176 --> 00:15:02.406 A:middle
search our application for

00:15:02.406 --> 00:15:03.936 A:middle
places we've hardcoded color

00:15:03.936 --> 00:15:04.376 A:middle
values.

00:15:04.566 --> 00:15:05.266 A:middle
And, we're going to want to

00:15:05.266 --> 00:15:05.966 A:middle
replace them with an

00:15:05.966 --> 00:15:07.086 A:middle
appearance-sensitive color

00:15:07.086 --> 00:15:07.486 A:middle
instead.

00:15:08.696 --> 00:15:10.646 A:middle
For, most system UI elements,

00:15:10.906 --> 00:15:12.656 A:middle
AppKit actually offers a lot of

00:15:12.656 --> 00:15:14.226 A:middle
dynamic system colors that will

00:15:14.226 --> 00:15:15.106 A:middle
react with the current

00:15:15.106 --> 00:15:16.546 A:middle
appearance, and look great for

00:15:16.546 --> 00:15:18.166 A:middle
whatever UI element you're

00:15:18.166 --> 00:15:19.216 A:middle
trying to come across with.

00:15:19.476 --> 00:15:20.466 A:middle
And, to flesh out the list,

00:15:20.466 --> 00:15:22.156 A:middle
we've added even more in macOS

00:15:22.156 --> 00:15:23.006 A:middle
10.14.

00:15:24.186 --> 00:15:25.836 A:middle
But, in some cases you're not

00:15:25.836 --> 00:15:26.676 A:middle
trying to make a system UI

00:15:26.676 --> 00:15:28.026 A:middle
element, you're trying to make

00:15:28.026 --> 00:15:29.206 A:middle
some piece of your document

00:15:29.206 --> 00:15:30.596 A:middle
model that also looks great in

00:15:30.596 --> 00:15:31.156 A:middle
Dark Mode.

00:15:31.266 --> 00:15:32.836 A:middle
Now, you can do this by sorting

00:15:32.836 --> 00:15:34.806 A:middle
your colors in asset catalogs.

00:15:35.796 --> 00:15:37.276 A:middle
So, if you go to the color

00:15:37.276 --> 00:15:39.166 A:middle
editor in Xcode, you can

00:15:39.166 --> 00:15:40.416 A:middle
configure which appearances

00:15:40.676 --> 00:15:42.246 A:middle
you'd like to set up specific

00:15:42.246 --> 00:15:44.206 A:middle
colors for, using the sidebar on

00:15:44.206 --> 00:15:44.526 A:middle
the right.

00:15:45.046 --> 00:15:46.466 A:middle
In this case, we've picked

00:15:46.466 --> 00:15:47.986 A:middle
colors explicitly for the light

00:15:47.986 --> 00:15:49.266 A:middle
appearance, for the dark

00:15:49.266 --> 00:15:50.396 A:middle
appearance, and a general

00:15:50.396 --> 00:15:51.706 A:middle
fallback color for any other

00:15:51.706 --> 00:15:52.246 A:middle
appearances.

00:15:52.756 --> 00:15:56.296 A:middle
Similar to with colors, we're

00:15:56.296 --> 00:15:57.436 A:middle
going to want to go through our

00:15:57.436 --> 00:15:59.096 A:middle
UI's and find places we can use

00:15:59.156 --> 00:15:59.876 A:middle
template images.

00:16:00.406 --> 00:16:01.506 A:middle
Template images are great

00:16:01.546 --> 00:16:02.876 A:middle
because the image artwork will

00:16:02.876 --> 00:16:04.616 A:middle
be tinted with the right color

00:16:04.726 --> 00:16:05.776 A:middle
for whatever appearance we're

00:16:05.776 --> 00:16:06.086 A:middle
using.

00:16:06.526 --> 00:16:07.476 A:middle
And, you might have been skating

00:16:07.476 --> 00:16:08.676 A:middle
by with places in your app where

00:16:08.676 --> 00:16:10.046 A:middle
you included a dark gray piece

00:16:10.046 --> 00:16:11.576 A:middle
of artwork, or solid black

00:16:11.576 --> 00:16:12.826 A:middle
artwork, which looked fine in

00:16:12.826 --> 00:16:14.146 A:middle
light mode, and is going to look

00:16:14.146 --> 00:16:15.626 A:middle
absolutely wrong in Dark Mode.

00:16:16.206 --> 00:16:18.016 A:middle
So, you can make template images

00:16:18.066 --> 00:16:18.786 A:middle
programatically.

00:16:19.016 --> 00:16:20.566 A:middle
You can also set them up in your

00:16:20.566 --> 00:16:21.336 A:middle
asset catalog.

00:16:22.286 --> 00:16:23.526 A:middle
But, you don't need to limit

00:16:23.526 --> 00:16:24.816 A:middle
yourself to template images to

00:16:24.816 --> 00:16:25.706 A:middle
make your Dark Mode UI.

00:16:26.276 --> 00:16:27.826 A:middle
You can also specify colors--

00:16:28.156 --> 00:16:30.126 A:middle
or, sorry, images that look

00:16:30.126 --> 00:16:30.926 A:middle
different in Dark Mode.

00:16:30.926 --> 00:16:32.086 A:middle
In this case, for our planet

00:16:32.086 --> 00:16:33.756 A:middle
app, we decided that we wanted

00:16:33.756 --> 00:16:35.116 A:middle
nighttime view of North America

00:16:35.116 --> 00:16:36.736 A:middle
more in Dark Mode, but for other

00:16:36.736 --> 00:16:37.936 A:middle
appearances, we're going to use

00:16:37.936 --> 00:16:38.606 A:middle
a daytime view.

00:16:40.286 --> 00:16:43.746 A:middle
So, something that's really

00:16:43.746 --> 00:16:45.936 A:middle
great about Dark Mode is how we

00:16:45.936 --> 00:16:47.116 A:middle
handle desktop pictures.

00:16:47.226 --> 00:16:48.226 A:middle
And, let me show you what I mean

00:16:48.226 --> 00:16:48.676 A:middle
by this.

00:16:49.036 --> 00:16:50.896 A:middle
If you take a look at the system

00:16:50.896 --> 00:16:52.986 A:middle
preferences UI, it kind of looks

00:16:52.986 --> 00:16:54.106 A:middle
like it's just a dark gray at

00:16:54.106 --> 00:16:55.146 A:middle
first glance, but it's more

00:16:55.146 --> 00:16:56.086 A:middle
complicated than that.

00:16:56.796 --> 00:16:58.666 A:middle
If we look behind the window, we

00:16:58.666 --> 00:16:59.516 A:middle
can see that we have these

00:16:59.516 --> 00:17:00.706 A:middle
gorgeous sand dunes, and there's

00:16:59.516 --> 00:17:00.706 A:middle
gorgeous sand dunes, and there's

00:17:00.706 --> 00:17:02.326 A:middle
a lot of blues and light and

00:17:02.326 --> 00:17:03.156 A:middle
dark grays in there.

00:17:03.516 --> 00:17:04.715 A:middle
And, if we do the masked pick,

00:17:04.715 --> 00:17:05.876 A:middle
an average color for this

00:17:05.876 --> 00:17:07.546 A:middle
rectangle, we wind up with this

00:17:07.546 --> 00:17:09.276 A:middle
nice dark blue color instead.

00:17:10.266 --> 00:17:11.626 A:middle
So, when we construct our UI and

00:17:11.695 --> 00:17:12.955 A:middle
add back in this gray color,

00:17:13.136 --> 00:17:14.156 A:middle
it's not solid gray.

00:17:14.425 --> 00:17:15.506 A:middle
We're keeping that dark blue

00:17:15.506 --> 00:17:16.256 A:middle
color with us.

00:17:16.526 --> 00:17:18.086 A:middle
And, this permeates even when we

00:17:18.086 --> 00:17:19.526 A:middle
add back the individual controls

00:17:19.526 --> 00:17:20.036 A:middle
in the window.

00:17:20.036 --> 00:17:20.935 A:middle
They all have this nice

00:17:20.935 --> 00:17:22.136 A:middle
character from the desktop

00:17:22.136 --> 00:17:22.465 A:middle
picture.

00:17:23.425 --> 00:17:24.746 A:middle
So, let me show you what this

00:17:24.746 --> 00:17:25.506 A:middle
looks like with a different

00:17:25.506 --> 00:17:26.986 A:middle
desktop picture, in this case, a

00:17:26.986 --> 00:17:27.425 A:middle
flower.

00:17:28.036 --> 00:17:29.866 A:middle
You can see we have these much

00:17:29.866 --> 00:17:31.646 A:middle
brighter purples and greens in

00:17:31.646 --> 00:17:32.606 A:middle
this desktop picture.

00:17:32.886 --> 00:17:33.906 A:middle
And, that affects the system

00:17:33.906 --> 00:17:34.886 A:middle
preferences window here.

00:17:35.496 --> 00:17:36.556 A:middle
Likewise, if we used a red

00:17:36.556 --> 00:17:38.106 A:middle
flower instead, you can really

00:17:38.106 --> 00:17:39.546 A:middle
see in this case, how the System

00:17:39.546 --> 00:17:41.286 A:middle
Preferences window is taking

00:17:41.286 --> 00:17:42.826 A:middle
that wonderful warm character

00:17:42.826 --> 00:17:44.196 A:middle
from the desktop picture and

00:17:44.196 --> 00:17:45.536 A:middle
propagating it to all of the UI

00:17:45.626 --> 00:17:46.126 A:middle
elements.

00:17:47.106 --> 00:17:49.506 A:middle
So, a really common thing you

00:17:49.506 --> 00:17:50.786 A:middle
might be wondering with this is,

00:17:50.786 --> 00:17:52.176 A:middle
that sounds like a lot of work

00:17:52.176 --> 00:17:53.736 A:middle
to dynamically figure out where

00:17:53.736 --> 00:17:55.276 A:middle
a window is, what the average

00:17:55.276 --> 00:17:57.206 A:middle
color is, and you know, update

00:17:57.206 --> 00:17:57.646 A:middle
it live.

00:17:57.986 --> 00:17:59.626 A:middle
So, my first advice to you is

00:17:59.926 --> 00:18:01.536 A:middle
don't be daunted by this task.

00:17:59.926 --> 00:18:01.536 A:middle
don't be daunted by this task.

00:18:01.786 --> 00:18:03.026 A:middle
AppKit is going to help you.

00:18:04.336 --> 00:18:05.976 A:middle
So, there's some great classes

00:18:05.976 --> 00:18:06.826 A:middle
you're already familiar with

00:18:06.826 --> 00:18:07.886 A:middle
that are just going to do the

00:18:07.886 --> 00:18:09.056 A:middle
right thing out of the box.

00:18:09.376 --> 00:18:10.486 A:middle
And, it's Window, and it's

00:18:10.486 --> 00:18:11.806 A:middle
ScrollView, and it's TableView,

00:18:11.806 --> 00:18:12.546 A:middle
and it's CollectionView.

00:18:12.816 --> 00:18:14.266 A:middle
All of these will look great in

00:18:14.266 --> 00:18:15.716 A:middle
Dark Mode without any changes.

00:18:16.126 --> 00:18:16.876 A:middle
But, if you want to get your

00:18:16.876 --> 00:18:18.596 A:middle
hands on them, you can also

00:18:18.596 --> 00:18:20.466 A:middle
tweak these a little bit.

00:18:20.816 --> 00:18:21.926 A:middle
Each of these classes has a

00:18:21.926 --> 00:18:23.126 A:middle
background color property.

00:18:23.336 --> 00:18:24.706 A:middle
And, there's four very special

00:18:24.816 --> 00:18:26.386 A:middle
NS colors I want to mention, the

00:18:26.386 --> 00:18:27.806 A:middle
control background color, the

00:18:27.806 --> 00:18:29.336 A:middle
window background color, and the

00:18:29.336 --> 00:18:30.766 A:middle
underpage and text background

00:18:30.796 --> 00:18:31.126 A:middle
colors.

00:18:31.456 --> 00:18:32.676 A:middle
And these all, when used with

00:18:32.676 --> 00:18:34.586 A:middle
these classes, get that nice bit

00:18:34.586 --> 00:18:36.356 A:middle
of desktop picture infusion, and

00:18:36.356 --> 00:18:37.436 A:middle
all look slightly different

00:18:37.436 --> 00:18:38.566 A:middle
depending on the role of the UI

00:18:38.646 --> 00:18:39.406 A:middle
element you're trying to

00:18:39.406 --> 00:18:39.996 A:middle
construct.

00:18:41.176 --> 00:18:42.526 A:middle
One other class I really want to

00:18:42.526 --> 00:18:44.566 A:middle
call out for this purpose is the

00:18:44.566 --> 00:18:45.516 A:middle
NSBox class.

00:18:45.916 --> 00:18:47.386 A:middle
If you configure a box as a

00:18:47.386 --> 00:18:49.066 A:middle
custom style, you can use its

00:18:49.066 --> 00:18:50.626 A:middle
fill color property with one of

00:18:50.626 --> 00:18:51.826 A:middle
these special NS colors, or

00:18:51.826 --> 00:18:53.186 A:middle
really any other NS color, too.

00:18:53.666 --> 00:18:55.106 A:middle
But, that's significant, because

00:18:55.106 --> 00:18:56.466 A:middle
NSBox can be used to just add

00:18:56.466 --> 00:18:57.856 A:middle
wonderful color fills to pieces

00:18:57.856 --> 00:18:59.296 A:middle
of your UI, whereas these other

00:18:59.296 --> 00:19:00.546 A:middle
classes are a little bit more

00:18:59.296 --> 00:19:00.546 A:middle
classes are a little bit more

00:19:00.546 --> 00:19:01.296 A:middle
special case.

00:19:02.446 --> 00:19:04.656 A:middle
So, if you really want to get

00:19:04.656 --> 00:19:05.926 A:middle
into detail on this, there's

00:19:05.926 --> 00:19:07.336 A:middle
another AppKit class I want to

00:19:07.336 --> 00:19:08.186 A:middle
mention, which is

00:19:08.276 --> 00:19:09.356 A:middle
NSVisualEffectView.

00:19:09.956 --> 00:19:11.376 A:middle
And, NSVisualEffectView has this

00:19:11.376 --> 00:19:13.336 A:middle
material property that allows

00:19:13.336 --> 00:19:14.606 A:middle
you to determine how the visual

00:19:14.606 --> 00:19:15.256 A:middle
effect you use is going to

00:19:15.256 --> 00:19:16.576 A:middle
process the background behind

00:19:16.576 --> 00:19:17.746 A:middle
it, and what sort of blending

00:19:17.746 --> 00:19:19.146 A:middle
operations it's going to do.

00:19:19.366 --> 00:19:20.376 A:middle
And, we have a few of these to

00:19:20.376 --> 00:19:21.736 A:middle
describe where the

00:19:21.736 --> 00:19:23.426 A:middle
visualEffectView's being used in

00:19:23.426 --> 00:19:24.316 A:middle
your UI.

00:19:24.456 --> 00:19:26.546 A:middle
In macOS 10.14, we've added a

00:19:26.546 --> 00:19:27.226 A:middle
lot more.

00:19:27.476 --> 00:19:28.686 A:middle
So, pretty much whatever sort of

00:19:28.686 --> 00:19:30.016 A:middle
UI you're trying to construct,

00:19:30.016 --> 00:19:31.286 A:middle
we should have a material that's

00:19:31.286 --> 00:19:32.636 A:middle
appropriate for that use case.

00:19:33.376 --> 00:19:34.876 A:middle
In previous OS's, you'll note we

00:19:34.876 --> 00:19:36.116 A:middle
had some materials labeled

00:19:36.436 --> 00:19:38.026 A:middle
explicitly as light or dark.

00:19:38.276 --> 00:19:38.986 A:middle
And, you're going to want to

00:19:38.986 --> 00:19:40.156 A:middle
stay away from those, as they're

00:19:40.156 --> 00:19:41.726 A:middle
not going to look right across

00:19:41.726 --> 00:19:42.836 A:middle
our many new appearances.

00:19:43.426 --> 00:19:46.466 A:middle
So, that brings me to another

00:19:46.466 --> 00:19:47.986 A:middle
topic, which is accent colors.

00:19:48.686 --> 00:19:49.966 A:middle
If we go ahead and look at these

00:19:49.966 --> 00:19:51.296 A:middle
UI elements, we can see there's

00:19:51.296 --> 00:19:53.086 A:middle
this delightful splash of view,

00:19:53.086 --> 00:19:55.376 A:middle
of color, in a lot of these

00:19:55.376 --> 00:19:55.826 A:middle
elements.

00:19:56.336 --> 00:19:59.826 A:middle
And, in macOS 10.14, we've added

00:20:00.116 --> 00:20:01.226 A:middle
a number of new accent colors

00:20:01.226 --> 00:20:01.976 A:middle
for users to select.

00:20:02.096 --> 00:20:03.336 A:middle
And, all of these look

00:20:03.336 --> 00:20:04.056 A:middle
absolutely great.

00:20:04.876 --> 00:20:06.256 A:middle
But, if you're making your own

00:20:06.256 --> 00:20:07.536 A:middle
UI elements-- I'll pause for

00:20:07.536 --> 00:20:07.946 A:middle
applause.

00:20:08.516 --> 00:20:12.806 A:middle
[ Applause ]

00:20:13.306 --> 00:20:14.256 A:middle
Thank you, accent colors.

00:20:14.906 --> 00:20:16.146 A:middle
Anyway, if you're making your

00:20:16.146 --> 00:20:17.156 A:middle
own UI elements, you might be

00:20:17.156 --> 00:20:18.286 A:middle
trying to make this motif

00:20:18.286 --> 00:20:19.426 A:middle
yourself, and incorporate that

00:20:19.426 --> 00:20:20.196 A:middle
splash of color.

00:20:20.516 --> 00:20:21.856 A:middle
So, if you've done that in the

00:20:21.856 --> 00:20:23.366 A:middle
past, you've probably been using

00:20:23.366 --> 00:20:25.266 A:middle
the NSColor.currentControlTint

00:20:25.266 --> 00:20:26.296 A:middle
method, which returns this

00:20:26.296 --> 00:20:27.546 A:middle
enumeration saying whether the

00:20:27.546 --> 00:20:28.796 A:middle
system's running in aqua or

00:20:28.796 --> 00:20:29.476 A:middle
graphite mode.

00:20:29.886 --> 00:20:31.256 A:middle
So, we have way more colors than

00:20:31.256 --> 00:20:31.666 A:middle
that now.

00:20:31.896 --> 00:20:32.976 A:middle
That enumeration's not going to

00:20:32.976 --> 00:20:33.616 A:middle
do the job.

00:20:34.046 --> 00:20:36.386 A:middle
So, in macOS 10.14, we'd urge

00:20:36.386 --> 00:20:37.776 A:middle
you to instead, switch to the

00:20:37.776 --> 00:20:39.736 A:middle
controlAccentColor method on

00:20:39.776 --> 00:20:40.316 A:middle
NSColor.

00:20:41.416 --> 00:20:44.066 A:middle
So, NSColor doesn't stop helping

00:20:44.066 --> 00:20:45.196 A:middle
you with accent colors.

00:20:45.456 --> 00:20:46.436 A:middle
There's a number of other things

00:20:46.436 --> 00:20:46.836 A:middle
it does.

00:20:47.386 --> 00:20:48.686 A:middle
If you're making a UI element,

00:20:48.906 --> 00:20:50.116 A:middle
one of the common features

00:20:50.116 --> 00:20:51.556 A:middle
you're going to want to do is

00:20:51.646 --> 00:20:52.946 A:middle
adjusting the color of that UI

00:20:53.016 --> 00:20:54.176 A:middle
element to reflect user

00:20:54.176 --> 00:20:54.956 A:middle
interaction with it.

00:20:55.416 --> 00:20:56.956 A:middle
So, NSColor introduces a new

00:20:56.956 --> 00:20:58.716 A:middle
method called .withSystemEffect.

00:20:59.336 --> 00:21:00.396 A:middle
And, we've defined a number of

00:20:59.336 --> 00:21:00.396 A:middle
And, we've defined a number of

00:21:00.396 --> 00:21:01.686 A:middle
system effects for interaction,

00:21:01.686 --> 00:21:02.576 A:middle
like the pressed state or the

00:21:02.576 --> 00:21:04.036 A:middle
disabled state, and we'll go

00:21:04.036 --> 00:21:05.616 A:middle
ahead and apply a recipe to a

00:21:05.616 --> 00:21:07.066 A:middle
base color to produce a new

00:21:07.066 --> 00:21:08.736 A:middle
color that's appropriate for the

00:21:08.736 --> 00:21:10.176 A:middle
current appearance as well as a

00:21:10.176 --> 00:21:11.716 A:middle
sort of interaction being done

00:21:11.716 --> 00:21:12.406 A:middle
with that control.

00:21:12.956 --> 00:21:13.806 A:middle
So, this will save you the

00:21:13.806 --> 00:21:14.906 A:middle
trouble of having to develop a

00:21:14.906 --> 00:21:17.366 A:middle
formula yourself for modifying a

00:21:17.366 --> 00:21:18.506 A:middle
color for these states.

00:21:18.506 --> 00:21:19.636 A:middle
And, it'll also save you from

00:21:19.636 --> 00:21:20.676 A:middle
cases where you might have a

00:21:20.676 --> 00:21:22.266 A:middle
really long list of hard-coded

00:21:22.266 --> 00:21:23.136 A:middle
colors for different

00:21:23.136 --> 00:21:23.766 A:middle
interactions.

00:21:24.126 --> 00:21:25.846 A:middle
So, it's a great API to make use

00:21:25.846 --> 00:21:25.966 A:middle
of.

00:21:26.996 --> 00:21:29.576 A:middle
We're going to talk about color

00:21:29.576 --> 00:21:30.136 A:middle
for a bit more.

00:21:30.446 --> 00:21:31.926 A:middle
In this case, a new feature of

00:21:31.926 --> 00:21:34.086 A:middle
macOS 10.14, is what we call the

00:21:34.086 --> 00:21:34.966 A:middle
content tint color.

00:21:35.996 --> 00:21:36.906 A:middle
If you look at my mock

00:21:36.906 --> 00:21:38.706 A:middle
application here, you can see

00:21:38.706 --> 00:21:40.036 A:middle
it's mostly user content, it's

00:21:40.036 --> 00:21:40.816 A:middle
mostly text.

00:21:41.296 --> 00:21:42.426 A:middle
But, there's a few elements that

00:21:42.426 --> 00:21:44.316 A:middle
I want to call attention to.

00:21:45.336 --> 00:21:47.516 A:middle
These are things where the user

00:21:47.516 --> 00:21:48.596 A:middle
can click on them to perform

00:21:48.596 --> 00:21:49.146 A:middle
more actions.

00:21:49.476 --> 00:21:50.486 A:middle
And, I didn't want to use the

00:21:50.486 --> 00:21:52.276 A:middle
normal button borders because I

00:21:52.276 --> 00:21:53.536 A:middle
felt that, kind of, overwhelmed

00:21:53.536 --> 00:21:54.026 A:middle
the content.

00:21:54.586 --> 00:21:56.606 A:middle
But, in macOS 10.14, we're going

00:21:56.606 --> 00:21:57.686 A:middle
to let you tint borderless

00:21:57.686 --> 00:21:59.236 A:middle
buttons and image views to call

00:21:59.236 --> 00:22:00.386 A:middle
them out, so the user can still

00:21:59.236 --> 00:22:00.386 A:middle
them out, so the user can still

00:22:00.386 --> 00:22:02.066 A:middle
recognize these as clickable and

00:22:02.066 --> 00:22:02.616 A:middle
interactable.

00:22:03.846 --> 00:22:05.146 A:middle
So, that's really easy to do.

00:22:06.116 --> 00:22:08.586 A:middle
NSButton and NSImageView, both

00:22:08.586 --> 00:22:09.536 A:middle
have a new property called

00:22:09.536 --> 00:22:10.456 A:middle
contentTintColor.

00:22:10.816 --> 00:22:11.916 A:middle
You can set it to any color you

00:22:11.916 --> 00:22:13.236 A:middle
want, to those dynamic colors I

00:22:13.236 --> 00:22:14.276 A:middle
mentioned earlier are great

00:22:14.276 --> 00:22:14.856 A:middle
candidates.

00:22:15.776 --> 00:22:16.826 A:middle
You can also set these up in

00:22:16.826 --> 00:22:17.596 A:middle
Interface Builder.

00:22:17.926 --> 00:22:19.256 A:middle
So, this is what the UI looks

00:22:19.256 --> 00:22:20.436 A:middle
like for configuring buttons.

00:22:20.726 --> 00:22:21.986 A:middle
And, this is what it looks like

00:22:21.986 --> 00:22:23.106 A:middle
for configuring image views.

00:22:23.576 --> 00:22:25.066 A:middle
The tint option is here on the

00:22:25.066 --> 00:22:27.936 A:middle
right, in the sidebar.

00:22:28.396 --> 00:22:29.836 A:middle
So, we've covered a lot of great

00:22:29.836 --> 00:22:31.516 A:middle
stuff about what you can do with

00:22:31.516 --> 00:22:32.706 A:middle
the new appearance in macOS

00:22:32.706 --> 00:22:33.446 A:middle
10.14.

00:22:33.706 --> 00:22:35.146 A:middle
We have more sessions on it, but

00:22:35.146 --> 00:22:36.696 A:middle
they're in the WWDC app, if you

00:22:36.696 --> 00:22:37.666 A:middle
look at our latest sessions.

00:22:37.976 --> 00:22:40.376 A:middle
They're both absolutely great.

00:22:40.556 --> 00:22:41.406 A:middle
Which brings me to my next

00:22:41.406 --> 00:22:41.706 A:middle
topic.

00:22:42.896 --> 00:22:44.026 A:middle
No discussion of Cocoa is

00:22:44.026 --> 00:22:45.316 A:middle
complete without some talk of

00:22:45.316 --> 00:22:45.976 A:middle
layer backing.

00:22:47.436 --> 00:22:48.946 A:middle
So, I wanted to let you all know

00:22:49.096 --> 00:22:51.056 A:middle
that in macOS 10.14, when you

00:22:51.056 --> 00:22:52.046 A:middle
link against the new SDK,

00:22:52.046 --> 00:22:54.666 A:middle
AppKit's not going to use a

00:22:54.666 --> 00:22:56.066 A:middle
legacy window backing store any

00:22:56.066 --> 00:22:56.296 A:middle
more.

00:22:56.596 --> 00:22:58.016 A:middle
It's going to provide all of

00:22:58.016 --> 00:22:59.246 A:middle
this content to the window

00:22:59.246 --> 00:23:00.906 A:middle
server using core animation

00:22:59.246 --> 00:23:00.906 A:middle
server using core animation

00:23:00.906 --> 00:23:01.376 A:middle
layers.

00:23:02.106 --> 00:23:03.326 A:middle
And, a lot of you who do

00:23:03.326 --> 00:23:04.456 A:middle
development on iOS are going to

00:23:04.456 --> 00:23:05.476 A:middle
think this sounds really

00:23:05.476 --> 00:23:06.156 A:middle
familiar to me.

00:23:06.156 --> 00:23:07.476 A:middle
But, let's take a look at what

00:23:07.476 --> 00:23:08.416 A:middle
actually goes on here.

00:23:09.186 --> 00:23:11.256 A:middle
So, if we have a tree of views

00:23:11.256 --> 00:23:12.596 A:middle
like this, in UIKit, the

00:23:12.626 --> 00:23:13.936 A:middle
relationship between views and

00:23:13.936 --> 00:23:14.966 A:middle
layers is really simple.

00:23:15.306 --> 00:23:16.716 A:middle
Every view gets exactly one

00:23:16.716 --> 00:23:17.076 A:middle
layer.

00:23:17.516 --> 00:23:18.506 A:middle
And, the parent/child

00:23:18.506 --> 00:23:20.196 A:middle
relationship between views is

00:23:20.196 --> 00:23:21.676 A:middle
mirrored in the layer tree also.

00:23:22.686 --> 00:23:24.446 A:middle
But in AppKit, we create the

00:23:24.446 --> 00:23:26.696 A:middle
layer tree as a process of-- or

00:23:26.696 --> 00:23:28.106 A:middle
as a side effect of processing

00:23:28.416 --> 00:23:29.156 A:middle
the view hierarchy.

00:23:29.986 --> 00:23:31.856 A:middle
So, we can wind up in cases

00:23:31.856 --> 00:23:33.246 A:middle
where we might decide to take

00:23:33.246 --> 00:23:34.836 A:middle
many views, and use a single

00:23:34.836 --> 00:23:35.436 A:middle
layer for that.

00:23:35.806 --> 00:23:37.166 A:middle
And, that's great because it can

00:23:37.166 --> 00:23:38.036 A:middle
reduce system memory

00:23:38.036 --> 00:23:39.786 A:middle
consumption, and GPU memory

00:23:39.786 --> 00:23:41.736 A:middle
consumption, and also gives the

00:23:41.736 --> 00:23:43.276 A:middle
window server a little less load

00:23:43.276 --> 00:23:44.416 A:middle
to process when it's rendering

00:23:44.416 --> 00:23:44.946 A:middle
the screen.

00:23:45.456 --> 00:23:46.896 A:middle
Something I really want to point

00:23:46.896 --> 00:23:48.126 A:middle
out here, though, is that this

00:23:48.126 --> 00:23:49.276 A:middle
is dynamic based on the

00:23:49.276 --> 00:23:50.256 A:middle
configuration of the view

00:23:50.256 --> 00:23:51.276 A:middle
hierarchy.

00:23:51.376 --> 00:23:52.646 A:middle
So, it can change moment to

00:23:52.646 --> 00:23:52.966 A:middle
moment.

00:23:53.306 --> 00:23:55.196 A:middle
So, you really can't rely on

00:23:55.196 --> 00:23:56.506 A:middle
having this fixed parent/child

00:23:56.506 --> 00:23:58.006 A:middle
relationship between views and

00:23:58.006 --> 00:23:58.946 A:middle
layers like you might on iOS.

00:24:03.436 --> 00:24:05.126 A:middle
So, programmatically one of the

00:24:05.126 --> 00:24:06.776 A:middle
changes you no longer have to

00:24:06.776 --> 00:24:08.726 A:middle
care about here is that you

00:24:08.726 --> 00:24:09.946 A:middle
don't have to explicitly set

00:24:09.946 --> 00:24:11.436 A:middle
.wantsLayer on your views to use

00:24:11.436 --> 00:24:12.206 A:middle
layers anymore.

00:24:12.206 --> 00:24:13.386 A:middle
AppKit will take care of this

00:24:13.386 --> 00:24:14.846 A:middle
for you when you're deploying

00:24:14.846 --> 00:24:16.506 A:middle
against macOS 10.14.

00:24:16.936 --> 00:24:19.976 A:middle
If you're deploying against--

00:24:20.516 --> 00:24:24.566 A:middle
[ Applause ]

00:24:25.066 --> 00:24:27.576 A:middle
In fact, we generally encourage

00:24:27.576 --> 00:24:28.986 A:middle
you not to even use this

00:24:28.986 --> 00:24:30.596 A:middle
property, because if you set it

00:24:30.596 --> 00:24:32.056 A:middle
explicitly to true, we're going

00:24:32.056 --> 00:24:33.146 A:middle
to make sure your view gets its

00:24:33.146 --> 00:24:34.326 A:middle
own layer, and we're not going

00:24:34.326 --> 00:24:35.666 A:middle
to do the optimizations we can

00:24:35.666 --> 00:24:37.306 A:middle
do, where we render multiple

00:24:37.306 --> 00:24:38.476 A:middle
views into a single layer.

00:24:39.056 --> 00:24:40.406 A:middle
You might also need to still use

00:24:40.406 --> 00:24:41.176 A:middle
this if you're deploying to

00:24:41.176 --> 00:24:42.956 A:middle
earlier OS's, but usually you

00:24:42.956 --> 00:24:44.136 A:middle
can still get away with ignoring

00:24:45.446 --> 00:24:45.516 A:middle
it.

00:24:45.846 --> 00:24:46.826 A:middle
I wanted to talk about some

00:24:46.826 --> 00:24:48.546 A:middle
other patterns you might have in

00:24:48.636 --> 00:24:50.256 A:middle
NSView UI's you are making that

00:24:50.256 --> 00:24:51.076 A:middle
use CALayers.

00:24:51.456 --> 00:24:53.206 A:middle
So, one of the easiest ways to

00:24:53.206 --> 00:24:54.606 A:middle
draw a CALayer, is to just

00:24:54.606 --> 00:24:56.006 A:middle
override the draw method in the

00:24:56.006 --> 00:24:56.776 A:middle
CALayer class.

00:24:57.196 --> 00:24:58.916 A:middle
Or, implement a delegate method.

00:24:59.536 --> 00:25:00.966 A:middle
And, this is mostly fine, but

00:24:59.536 --> 00:25:00.966 A:middle
And, this is mostly fine, but

00:25:00.966 --> 00:25:02.306 A:middle
NSView actually gives you a lot

00:25:02.306 --> 00:25:03.636 A:middle
of functionality you probably

00:25:03.636 --> 00:25:04.796 A:middle
don't want to have to replicate

00:25:04.796 --> 00:25:05.276 A:middle
yourself.

00:25:05.836 --> 00:25:08.526 A:middle
If you use NSView's draw method,

00:25:08.706 --> 00:25:09.886 A:middle
it'll go ahead and take care of

00:25:09.886 --> 00:25:11.056 A:middle
things like making sure that the

00:25:11.056 --> 00:25:12.226 A:middle
appearance works correctly for

00:25:12.226 --> 00:25:13.056 A:middle
dynamic colors.

00:25:13.336 --> 00:25:14.586 A:middle
It'll manage the backing store

00:25:14.586 --> 00:25:15.476 A:middle
resolution for you.

00:25:15.876 --> 00:25:17.156 A:middle
And, it's really just as simple

00:25:17.156 --> 00:25:18.266 A:middle
as implementing the layer

00:25:18.266 --> 00:25:18.706 A:middle
methods.

00:25:18.986 --> 00:25:19.986 A:middle
So, I really encourage you to

00:25:19.986 --> 00:25:21.166 A:middle
override drawing at the view

00:25:21.166 --> 00:25:22.206 A:middle
level instead of the layer

00:25:22.206 --> 00:25:22.516 A:middle
level.

00:25:23.626 --> 00:25:25.576 A:middle
Sometimes you'll have cases

00:25:25.916 --> 00:25:27.606 A:middle
where you were implementing the

00:25:27.606 --> 00:25:29.016 A:middle
display method of CALayer

00:25:29.016 --> 00:25:30.216 A:middle
instead, and you're updating

00:25:30.216 --> 00:25:31.486 A:middle
layer properties directly,

00:25:31.716 --> 00:25:32.486 A:middle
because maybe it's more

00:25:32.486 --> 00:25:33.706 A:middle
efficient, or really expresses

00:25:33.706 --> 00:25:34.786 A:middle
what you're trying to accomplish

00:25:34.786 --> 00:25:35.136 A:middle
better.

00:25:35.446 --> 00:25:37.426 A:middle
You can still do that using the

00:25:37.426 --> 00:25:39.196 A:middle
NSView API by overriding the

00:25:39.196 --> 00:25:40.806 A:middle
update layer method, and you get

00:25:40.806 --> 00:25:42.106 A:middle
all the same benefits you do by

00:25:42.106 --> 00:25:43.446 A:middle
using the NSView draw rect

00:25:43.446 --> 00:25:43.786 A:middle
method.

00:25:44.556 --> 00:25:46.756 A:middle
A quirk I want to point out, is

00:25:46.756 --> 00:25:48.026 A:middle
you can implement both update

00:25:48.026 --> 00:25:49.646 A:middle
layer, and the draw methods on

00:25:49.686 --> 00:25:50.226 A:middle
NSView.

00:25:50.846 --> 00:25:52.256 A:middle
If you do this, when your view

00:25:52.256 --> 00:25:53.576 A:middle
has a single layer backing it,

00:25:53.576 --> 00:25:54.496 A:middle
we'll go ahead and use the

00:25:54.496 --> 00:25:55.546 A:middle
optimal layer version.

00:25:56.006 --> 00:25:57.296 A:middle
And, if you're being merged with

00:25:57.296 --> 00:25:58.546 A:middle
other views to save memory,

00:25:58.896 --> 00:25:59.976 A:middle
we'll go ahead and use the draw

00:25:59.976 --> 00:26:00.536 A:middle
rect version.

00:25:59.976 --> 00:26:00.536 A:middle
rect version.

00:26:00.746 --> 00:26:01.996 A:middle
And, we also use that for things

00:26:01.996 --> 00:26:02.556 A:middle
like printing.

00:26:02.616 --> 00:26:03.916 A:middle
So, it's fine to implement both

00:26:03.916 --> 00:26:04.296 A:middle
of these.

00:26:05.056 --> 00:26:06.386 A:middle
If you have a view that you

00:26:06.386 --> 00:26:07.726 A:middle
really can't express using the

00:26:07.806 --> 00:26:09.346 A:middle
CG drawing API's, or the AppKit

00:26:09.346 --> 00:26:11.336 A:middle
drawing API's, you can, in

00:26:11.336 --> 00:26:12.406 A:middle
addition to the update layer

00:26:12.406 --> 00:26:13.576 A:middle
method, override

00:26:13.576 --> 00:26:15.796 A:middle
wantsUpdateLayer, and if you

00:26:15.796 --> 00:26:16.906 A:middle
just return "true" from that, we

00:26:16.906 --> 00:26:18.186 A:middle
know that you need an explicit

00:26:18.186 --> 00:26:19.716 A:middle
layer to do what you want to

00:26:19.716 --> 00:26:20.216 A:middle
accomplish.

00:26:22.276 --> 00:26:24.626 A:middle
There's another way of taking

00:26:24.626 --> 00:26:26.476 A:middle
best advantage of AppKit and

00:26:26.476 --> 00:26:27.746 A:middle
core animations features here,

00:26:27.976 --> 00:26:29.236 A:middle
and that's just to build your

00:26:29.236 --> 00:26:30.206 A:middle
UI's out of a very simple

00:26:30.206 --> 00:26:33.096 A:middle
vocabulary of basic NSViews.

00:26:33.456 --> 00:26:35.166 A:middle
NSImageView, NSBox, and

00:26:35.166 --> 00:26:36.926 A:middle
NSTextField, these are all

00:26:36.926 --> 00:26:38.336 A:middle
really great building blocks to

00:26:38.336 --> 00:26:39.446 A:middle
make complicated UI's, and

00:26:39.666 --> 00:26:40.766 A:middle
they'll do the right thing no

00:26:40.766 --> 00:26:42.286 A:middle
matter what technologies we pick

00:26:42.286 --> 00:26:43.546 A:middle
to actually render to the

00:26:43.546 --> 00:26:43.966 A:middle
screen.

00:26:45.606 --> 00:26:46.546 A:middle
With our changes to layer

00:26:46.546 --> 00:26:48.376 A:middle
backing, there's a few patterns

00:26:48.376 --> 00:26:49.566 A:middle
I want to call out that aren't

00:26:49.566 --> 00:26:50.996 A:middle
going to work in macOS 10.14

00:26:50.996 --> 00:26:51.396 A:middle
anymore.

00:26:51.996 --> 00:26:53.616 A:middle
If you're using NSView lockFocus

00:26:53.616 --> 00:26:55.106 A:middle
and unlockFocus, or trying to

00:26:55.106 --> 00:26:56.566 A:middle
access the window's graphics

00:26:56.566 --> 00:26:59.046 A:middle
contents directly, there's a

00:26:59.046 --> 00:27:00.116 A:middle
better way of doing that.

00:26:59.046 --> 00:27:00.116 A:middle
better way of doing that.

00:27:00.116 --> 00:27:01.656 A:middle
You should just subclass NSView

00:27:01.656 --> 00:27:02.556 A:middle
and implement draw rect.

00:27:02.846 --> 00:27:04.786 A:middle
Both of those methods have been

00:27:04.786 --> 00:27:06.876 A:middle
kind of finicky for a while.

00:27:06.916 --> 00:27:07.836 A:middle
So, you'll be saving yourself

00:27:07.836 --> 00:27:08.326 A:middle
some trouble.

00:27:08.756 --> 00:27:09.716 A:middle
The other thing I want to point

00:27:09.716 --> 00:27:10.686 A:middle
out is I've actually written

00:27:10.686 --> 00:27:12.236 A:middle
these in Objective-C, which is a

00:27:12.236 --> 00:27:13.606 A:middle
little weird for a talk that's

00:27:13.606 --> 00:27:14.986 A:middle
mostly in Swift.

00:27:14.986 --> 00:27:16.486 A:middle
And, the really great news about

00:27:16.486 --> 00:27:18.146 A:middle
this is I've never actually seen

00:27:18.146 --> 00:27:19.676 A:middle
any Swift code using these.

00:27:20.276 --> 00:27:21.656 A:middle
The takeaway from that is I

00:27:21.656 --> 00:27:22.986 A:middle
really don't want any of you to

00:27:22.986 --> 00:27:24.456 A:middle
be the first to go ahead and

00:27:24.456 --> 00:27:25.056 A:middle
surprise me.

00:27:26.456 --> 00:27:29.816 A:middle
So, we have one more thing about

00:27:29.816 --> 00:27:31.086 A:middle
our changes with layer backing.

00:27:31.456 --> 00:27:33.326 A:middle
If you're using NSOpenGL classes

00:27:33.326 --> 00:27:34.726 A:middle
to render with OpenGL, and you

00:27:34.726 --> 00:27:37.106 A:middle
link against macOS 10.14, some

00:27:37.106 --> 00:27:38.466 A:middle
of our implementation details

00:27:38.466 --> 00:27:39.756 A:middle
for how we bind the OpenGL

00:27:39.756 --> 00:27:41.576 A:middle
system to our layers are a bit

00:27:41.576 --> 00:27:41.976 A:middle
different.

00:27:41.976 --> 00:27:43.146 A:middle
And, you may notice a few small

00:27:43.146 --> 00:27:43.816 A:middle
changes there.

00:27:44.576 --> 00:27:45.846 A:middle
But, more importantly, I want to

00:27:45.846 --> 00:27:48.206 A:middle
call out that as of macOS 10.14,

00:27:48.426 --> 00:27:49.756 A:middle
OpenGL on our platform is

00:27:49.806 --> 00:27:50.426 A:middle
deprecated.

00:27:51.016 --> 00:27:52.626 A:middle
If you've been using NSOpenGL

00:27:52.626 --> 00:27:54.286 A:middle
view, we really encourage you to

00:27:54.286 --> 00:27:55.846 A:middle
adopt MTKView instead.

00:27:55.956 --> 00:27:57.166 A:middle
And, there's a great session

00:27:57.166 --> 00:27:58.676 A:middle
coming up later today about

00:27:58.676 --> 00:27:59.986 A:middle
adopting Metal for OpenGL

00:27:59.986 --> 00:28:00.556 A:middle
developers.

00:27:59.986 --> 00:28:00.556 A:middle
developers.

00:28:03.286 --> 00:28:04.816 A:middle
There's one last change I want

00:28:04.816 --> 00:28:06.256 A:middle
to talk about, which is a change

00:28:06.256 --> 00:28:07.706 A:middle
we've made to font antialiasing.

00:28:08.526 --> 00:28:09.796 A:middle
If you go ahead and look at this

00:28:09.796 --> 00:28:11.386 A:middle
screen comparison, I have macOS

00:28:11.386 --> 00:28:13.546 A:middle
10.13 on the left, and macOS

00:28:13.546 --> 00:28:14.656 A:middle
10.14 on the right.

00:28:14.656 --> 00:28:16.036 A:middle
And, if you look at the text in

00:28:16.036 --> 00:28:17.616 A:middle
this window, it's basically

00:28:17.616 --> 00:28:18.186 A:middle
identical.

00:28:18.896 --> 00:28:21.416 A:middle
But, if we zoom in, all the way

00:28:21.416 --> 00:28:23.676 A:middle
to a 48X scale factor, we can

00:28:23.766 --> 00:28:26.246 A:middle
see that macOS 10.13 is using

00:28:26.246 --> 00:28:27.506 A:middle
this color-fringing effect for

00:28:27.506 --> 00:28:28.366 A:middle
its font rendering.

00:28:29.216 --> 00:28:32.836 A:middle
In macOS 10.14, we no longer use

00:28:32.836 --> 00:28:33.326 A:middle
that effect.

00:28:33.596 --> 00:28:34.796 A:middle
And, this means our text looks

00:28:34.796 --> 00:28:36.806 A:middle
great on a much wider variety of

00:28:36.806 --> 00:28:38.436 A:middle
panel technologies, as well as

00:28:38.436 --> 00:28:39.276 A:middle
scaling modes.

00:28:40.316 --> 00:28:42.166 A:middle
So, we have a bunch of other

00:28:42.166 --> 00:28:43.096 A:middle
great things to cover.

00:28:43.406 --> 00:28:44.226 A:middle
And, at this point I'd like to

00:28:44.226 --> 00:28:45.676 A:middle
invite Jesse onstage to go over

00:28:45.676 --> 00:28:45.956 A:middle
those.

00:28:46.516 --> 00:28:51.686 A:middle
[ Applause ]

00:28:52.186 --> 00:28:52.716 A:middle
&gt;&gt; Thanks, Chris.

00:28:53.116 --> 00:28:53.536 A:middle
Hi everyone.

00:28:53.536 --> 00:28:54.466 A:middle
It's great to see you here

00:28:54.466 --> 00:28:54.876 A:middle
today.

00:28:55.506 --> 00:28:56.746 A:middle
I have a bunch of topics to

00:28:56.746 --> 00:28:57.236 A:middle
cover.

00:28:57.236 --> 00:28:58.236 A:middle
And, I'd like to start with the

00:28:58.236 --> 00:28:59.546 A:middle
user notifications framework.

00:28:59.976 --> 00:29:01.506 A:middle
This has been available in iOS

00:28:59.976 --> 00:29:01.506 A:middle
This has been available in iOS

00:29:01.506 --> 00:29:02.806 A:middle
for some time now, and with

00:29:02.806 --> 00:29:04.846 A:middle
macOS Mojave, we're bringing it

00:29:04.846 --> 00:29:05.316 A:middle
to the Mac.

00:29:07.646 --> 00:29:09.546 A:middle
This allows for better control

00:29:09.546 --> 00:29:10.676 A:middle
of user notifications.

00:29:11.226 --> 00:29:12.126 A:middle
And, it also means that your

00:29:12.126 --> 00:29:13.246 A:middle
apps can interact with them the

00:29:13.296 --> 00:29:14.986 A:middle
same way that they do on iOS.

00:29:15.676 --> 00:29:17.576 A:middle
They should do that using the

00:29:17.576 --> 00:29:18.666 A:middle
NSApplication method,

00:29:18.886 --> 00:29:20.486 A:middle
registerForRemoteNotifications,

00:29:21.176 --> 00:29:21.976 A:middle
as well as the

00:29:21.976 --> 00:29:24.296 A:middle
requestAuthorization method on

00:29:24.476 --> 00:29:25.536 A:middle
userNotificationCenter.

00:29:27.306 --> 00:29:28.676 A:middle
As a part of this work, we're

00:29:28.676 --> 00:29:30.406 A:middle
also deprecating some existing

00:29:30.806 --> 00:29:32.786 A:middle
user notification-related API's.

00:29:32.826 --> 00:29:34.956 A:middle
Specifically, in NSApplication,

00:29:35.316 --> 00:29:36.126 A:middle
we're deprecating the

00:29:36.126 --> 00:29:37.296 A:middle
remoteNotificationType

00:29:37.386 --> 00:29:39.416 A:middle
OptionSet, as well as the

00:29:39.656 --> 00:29:41.276 A:middle
registerForRemoteNotifications

00:29:41.276 --> 00:29:41.776 A:middle
method and the

00:29:41.776 --> 00:29:43.566 A:middle
enabledRemoteNotificationTypes

00:29:44.186 --> 00:29:44.576 A:middle
property.

00:29:45.326 --> 00:29:46.686 A:middle
We're also deprecating all of

00:29:46.686 --> 00:29:47.846 A:middle
NSUserNotification.

00:29:49.256 --> 00:29:50.716 A:middle
So, as you rebuild with the new

00:29:50.876 --> 00:29:52.866 A:middle
SDK, you should try to update to

00:29:52.866 --> 00:29:53.846 A:middle
the user notifications

00:29:53.846 --> 00:29:54.256 A:middle
framework.

00:29:56.586 --> 00:29:57.796 A:middle
Next, I'd like to talk a little

00:29:57.796 --> 00:29:59.356 A:middle
bit about NSToolbar.

00:30:00.396 --> 00:30:01.556 A:middle
When you wanted to center an

00:30:01.556 --> 00:30:02.876 A:middle
item in the toolbar, you've

00:30:02.876 --> 00:30:05.226 A:middle
maybe been tempted to put a

00:30:05.226 --> 00:30:07.236 A:middle
flexible space on both sides of

00:30:07.236 --> 00:30:07.686 A:middle
your item.

00:30:07.686 --> 00:30:09.446 A:middle
And, this works, but it has some

00:30:09.446 --> 00:30:09.926 A:middle
drawbacks.

00:30:10.076 --> 00:30:11.706 A:middle
Notably, when you add extra

00:30:11.706 --> 00:30:13.106 A:middle
items to the toolbar, it'll push

00:30:13.106 --> 00:30:14.246 A:middle
your item off-center.

00:30:14.946 --> 00:30:16.716 A:middle
So, NSToolbar now exposes a new

00:30:16.716 --> 00:30:17.456 A:middle
property, the

00:30:17.516 --> 00:30:18.616 A:middle
centeredItemIdentifier.

00:30:19.406 --> 00:30:20.596 A:middle
You can set this to the

00:30:20.596 --> 00:30:21.906 A:middle
identifier of an item you'd like

00:30:21.906 --> 00:30:23.416 A:middle
to remain centered, and

00:30:23.456 --> 00:30:24.876 A:middle
NSToolbar will put it there.

00:30:25.486 --> 00:30:26.736 A:middle
It should stay there unless

00:30:26.736 --> 00:30:28.376 A:middle
other Toolbar items actually

00:30:28.376 --> 00:30:29.696 A:middle
force it to be out of place.

00:30:31.276 --> 00:30:32.326 A:middle
There's another change here

00:30:32.326 --> 00:30:35.426 A:middle
worth noting as well, which is

00:30:35.426 --> 00:30:38.616 A:middle
that auto layout is now used to

00:30:38.616 --> 00:30:40.036 A:middle
measure toolbar items when the

00:30:40.036 --> 00:30:41.816 A:middle
minimum and maximum sizes are

00:30:41.816 --> 00:30:42.616 A:middle
not specified.

00:30:44.846 --> 00:30:46.466 A:middle
This applies only to apps on the

00:30:46.466 --> 00:30:48.746 A:middle
10.14 SDK, but it means that you

00:30:48.746 --> 00:30:50.066 A:middle
can do things like change the

00:30:50.066 --> 00:30:52.046 A:middle
size of the button, and the

00:30:52.046 --> 00:30:52.976 A:middle
measurement will happen for you.

00:30:53.516 --> 00:30:59.546 A:middle
[ Applause ]

00:31:00.046 --> 00:31:01.546 A:middle
The centeredItemIdentifier

00:31:01.766 --> 00:31:03.306 A:middle
behavior is also available

00:31:03.306 --> 00:31:04.546 A:middle
through Interface Builder.

00:31:04.546 --> 00:31:05.916 A:middle
So, here's the inspector pane

00:31:05.916 --> 00:31:08.016 A:middle
for a Toolbar item.

00:31:08.016 --> 00:31:08.846 A:middle
You can see there's a new

00:31:08.846 --> 00:31:10.196 A:middle
checkbox at the bottom, "Is

00:31:10.196 --> 00:31:10.906 A:middle
Centered Item."

00:31:11.206 --> 00:31:12.766 A:middle
You can click this instead of

00:31:12.766 --> 00:31:13.836 A:middle
setting the property from your

00:31:13.836 --> 00:31:15.336 A:middle
code, and so there's no need to

00:31:15.336 --> 00:31:16.486 A:middle
fall back to the programmatic

00:31:16.486 --> 00:31:16.666 A:middle
API.

00:31:16.666 --> 00:31:18.366 A:middle
You can continue to do all your

00:31:18.366 --> 00:31:20.016 A:middle
UI work inside Interface

00:31:20.056 --> 00:31:20.306 A:middle
Builder.

00:31:21.916 --> 00:31:22.916 A:middle
And, speaking of Interface

00:31:22.916 --> 00:31:24.696 A:middle
Builder, I can't tell you how

00:31:24.696 --> 00:31:26.286 A:middle
excited I am about Interface

00:31:26.326 --> 00:31:27.826 A:middle
Builder's new support for

00:31:27.826 --> 00:31:29.436 A:middle
editing, NSGridViews.

00:31:30.726 --> 00:31:31.646 A:middle
If you're not familiar with

00:31:31.646 --> 00:31:33.066 A:middle
gridView, we introduced it a

00:31:33.066 --> 00:31:34.636 A:middle
couple of years ago, and it's a

00:31:34.636 --> 00:31:36.046 A:middle
layout primitive for rendering

00:31:36.046 --> 00:31:37.216 A:middle
your views in a grid-like

00:31:37.336 --> 00:31:37.656 A:middle
pattern.

00:31:38.136 --> 00:31:39.166 A:middle
This is an example from a

00:31:39.166 --> 00:31:40.276 A:middle
keychain access app.

00:31:40.276 --> 00:31:42.026 A:middle
And, you can imagine how many

00:31:42.026 --> 00:31:43.326 A:middle
little constraints would be

00:31:43.326 --> 00:31:45.116 A:middle
necessary to create this layout

00:31:45.146 --> 00:31:45.716 A:middle
by hand.

00:31:46.186 --> 00:31:47.206 A:middle
You could also build it with

00:31:47.326 --> 00:31:49.436 A:middle
stackViews, but NSGridView makes

00:31:49.436 --> 00:31:51.456 A:middle
the whole thing much easier, and

00:31:51.456 --> 00:31:52.936 A:middle
the new editing support in

00:31:52.936 --> 00:31:54.266 A:middle
Interface Builder is just

00:31:54.266 --> 00:31:54.826 A:middle
fantastic.

00:31:54.826 --> 00:31:56.066 A:middle
Let me show it to you.

00:31:57.396 --> 00:31:58.896 A:middle
So, here's some UI from a

00:31:58.896 --> 00:31:59.846 A:middle
storyboard file.

00:32:00.286 --> 00:32:01.846 A:middle
You can select these controls,

00:32:02.176 --> 00:32:03.766 A:middle
and embed them in a grid view.

00:32:03.766 --> 00:32:05.216 A:middle
And, once you've done that, you

00:32:05.216 --> 00:32:06.486 A:middle
can go through and adjust the

00:32:06.486 --> 00:32:07.826 A:middle
padding and the alignment of the

00:32:07.946 --> 00:32:09.586 A:middle
cells in order to achieve the

00:32:09.586 --> 00:32:10.646 A:middle
layout that you want.

00:32:11.876 --> 00:32:13.756 A:middle
The editing UI works a lot like

00:32:13.756 --> 00:32:14.916 A:middle
the numbered spreadsheet app.

00:32:15.256 --> 00:32:16.896 A:middle
So, you can drag and drop views

00:32:16.896 --> 00:32:17.596 A:middle
into cells.

00:32:17.706 --> 00:32:19.356 A:middle
You can select cells in rows and

00:32:19.356 --> 00:32:21.016 A:middle
columns, and adjust their

00:32:21.016 --> 00:32:21.586 A:middle
properties.

00:32:22.426 --> 00:32:23.836 A:middle
You can even merge cells, as you

00:32:23.836 --> 00:32:25.436 A:middle
see in the bottom two rows here.

00:32:26.506 --> 00:32:28.376 A:middle
Here's an example where we

00:32:28.456 --> 00:32:29.236 A:middle
select a column.

00:32:29.786 --> 00:32:31.466 A:middle
And, this is what the inspector

00:32:31.466 --> 00:32:32.866 A:middle
pane looks like, so you can see

00:32:32.866 --> 00:32:34.366 A:middle
you can adjust the placement of

00:32:34.366 --> 00:32:35.706 A:middle
the cells in that column.

00:32:36.066 --> 00:32:37.156 A:middle
You can adjust the leading and

00:32:37.186 --> 00:32:37.936 A:middle
trailing padding.

00:32:38.356 --> 00:32:39.546 A:middle
If we switch over to the Size

00:32:39.546 --> 00:32:41.336 A:middle
Inspector, you can specify an

00:32:41.336 --> 00:32:42.976 A:middle
explicit width for the column.

00:32:42.976 --> 00:32:44.206 A:middle
Or, if you don't do that, then

00:32:44.206 --> 00:32:45.216 A:middle
the column will be sized

00:32:45.216 --> 00:32:46.526 A:middle
automatically based on the

00:32:46.526 --> 00:32:46.946 A:middle
content.

00:32:49.036 --> 00:32:50.106 A:middle
And, one of the other really

00:32:50.106 --> 00:32:51.816 A:middle
nice things about this feature

00:32:52.606 --> 00:32:53.136 A:middle
is that it's

00:32:53.186 --> 00:32:54.216 A:middle
backwards-deployable.

00:32:54.426 --> 00:32:56.216 A:middle
GridViews authored in Interface

00:32:56.216 --> 00:32:58.456 A:middle
Builder can be used back to

00:32:58.456 --> 00:33:01.686 A:middle
macOS 10.13.4, or if you're not

00:32:58.456 --> 00:33:01.686 A:middle
macOS 10.13.4, or if you're not

00:33:01.686 --> 00:33:03.306 A:middle
using merged cells, you can

00:33:03.306 --> 00:33:04.256 A:middle
actually go all the way back to

00:33:04.336 --> 00:33:05.016 A:middle
10.12.

00:33:05.556 --> 00:33:07.616 A:middle
So, if you need to deploy your

00:33:07.616 --> 00:33:08.696 A:middle
app to an older version of

00:33:08.696 --> 00:33:10.776 A:middle
macOS, there's still no reason

00:33:10.776 --> 00:33:12.176 A:middle
to wait to use this great new

00:33:12.176 --> 00:33:12.796 A:middle
functionality.

00:33:15.186 --> 00:33:17.076 A:middle
The next topic I'd like to cover

00:33:17.126 --> 00:33:18.826 A:middle
is some changes to NSTextView.

00:33:20.176 --> 00:33:21.286 A:middle
First off,there's a few new

00:33:21.286 --> 00:33:22.046 A:middle
factory methods.

00:33:22.756 --> 00:33:24.466 A:middle
The first one here, fieldEditor

00:33:24.896 --> 00:33:27.756 A:middle
configures a textView to act as

00:33:27.756 --> 00:33:29.156 A:middle
the fieldEditor for an

00:33:29.216 --> 00:33:29.816 A:middle
NSTextField.

00:33:29.936 --> 00:33:32.716 A:middle
These all provide a much easier

00:33:32.716 --> 00:33:34.276 A:middle
way to configure textViews for

00:33:34.276 --> 00:33:35.226 A:middle
common use cases.

00:33:36.256 --> 00:33:38.666 A:middle
The latter three provide

00:33:38.746 --> 00:33:39.806 A:middle
textViews wrapped in

00:33:39.806 --> 00:33:40.366 A:middle
scrollViews.

00:33:40.946 --> 00:33:42.296 A:middle
This is by far the most common

00:33:42.296 --> 00:33:44.266 A:middle
use case for a textView, but if

00:33:44.266 --> 00:33:45.156 A:middle
you have to do additional

00:33:45.156 --> 00:33:46.406 A:middle
configuration on the textView,

00:33:46.406 --> 00:33:47.786 A:middle
it's important to remember to

00:33:47.786 --> 00:33:49.526 A:middle
look at the scrollView's

00:33:49.576 --> 00:33:50.146 A:middle
documentView.

00:33:51.426 --> 00:33:52.756 A:middle
These are also available through

00:33:52.756 --> 00:33:53.526 A:middle
Interface Builder.

00:33:53.526 --> 00:33:54.566 A:middle
So, again, there's no need to

00:33:54.566 --> 00:33:55.816 A:middle
fall back to the programmatic

00:33:55.816 --> 00:33:56.436 A:middle
API here.

00:33:57.366 --> 00:33:58.246 A:middle
So, let's see what they look

00:33:58.246 --> 00:33:58.446 A:middle
like.

00:33:59.356 --> 00:34:00.776 A:middle
Here's a sample window that

00:33:59.356 --> 00:34:00.776 A:middle
Here's a sample window that

00:34:00.776 --> 00:34:01.616 A:middle
shows all four.

00:34:02.236 --> 00:34:03.226 A:middle
TextViews are sometimes

00:34:03.226 --> 00:34:04.916 A:middle
misconfigured when clients need

00:34:04.916 --> 00:34:06.506 A:middle
to override the fieldEditor in a

00:34:06.576 --> 00:34:07.066 A:middle
textField.

00:34:07.236 --> 00:34:08.766 A:middle
And so, using a fieldEditor

00:34:08.766 --> 00:34:10.186 A:middle
factory method can help avoid

00:34:10.186 --> 00:34:10.856 A:middle
problems there.

00:34:11.815 --> 00:34:13.636 A:middle
The next one, scrollableTextView

00:34:14.346 --> 00:34:15.716 A:middle
should be used for textViews

00:34:15.815 --> 00:34:17.946 A:middle
that are for auxiliary text in

00:34:17.946 --> 00:34:19.726 A:middle
popovers and inspector panes.

00:34:19.726 --> 00:34:20.386 A:middle
Things like that.

00:34:20.386 --> 00:34:22.376 A:middle
And then, the bottom two are for

00:34:22.376 --> 00:34:23.876 A:middle
text that's main document

00:34:23.876 --> 00:34:24.266 A:middle
content.

00:34:24.456 --> 00:34:25.996 A:middle
The one on the left is for rich

00:34:25.996 --> 00:34:27.376 A:middle
text; the one on the right is

00:34:27.376 --> 00:34:28.025 A:middle
for plain text.

00:34:28.846 --> 00:34:29.846 A:middle
You might be wondering at this

00:34:29.926 --> 00:34:31.466 A:middle
point what the distinction is,

00:34:31.516 --> 00:34:32.666 A:middle
because they all look fairly

00:34:32.706 --> 00:34:33.106 A:middle
similar.

00:34:33.596 --> 00:34:34.696 A:middle
The main benefit is that you

00:34:34.696 --> 00:34:35.775 A:middle
don't need to worry about the

00:34:35.775 --> 00:34:36.755 A:middle
system configuration.

00:34:37.496 --> 00:34:38.936 A:middle
For example, if the system's in

00:34:38.936 --> 00:34:40.565 A:middle
Dark Mode, they begin to look

00:34:40.565 --> 00:34:41.326 A:middle
more distinct.

00:34:42.266 --> 00:34:44.746 A:middle
The rich text's textView retains

00:34:44.746 --> 00:34:46.045 A:middle
its white background, and the

00:34:46.045 --> 00:34:47.926 A:middle
plain text turns dark to match

00:34:48.016 --> 00:34:48.996 A:middle
the rest of the system for

00:34:48.996 --> 00:34:49.406 A:middle
example.

00:34:50.106 --> 00:34:51.396 A:middle
So, in general if you use these

00:34:51.396 --> 00:34:52.815 A:middle
factory methods, it'll help keep

00:34:52.815 --> 00:34:54.366 A:middle
your application consistent with

00:34:54.366 --> 00:34:55.775 A:middle
the specifications for the rest

00:34:55.775 --> 00:34:56.255 A:middle
of the system.

00:34:58.696 --> 00:34:59.876 A:middle
The other change to textView

00:34:59.876 --> 00:35:01.206 A:middle
that I'd like to talk about is a

00:34:59.876 --> 00:35:01.206 A:middle
that I'd like to talk about is a

00:35:01.206 --> 00:35:03.176 A:middle
new method for modifying the

00:35:03.256 --> 00:35:03.486 A:middle
text,

00:35:04.176 --> 00:35:05.686 A:middle
PerformValidatedReplacement.

00:35:06.276 --> 00:35:07.916 A:middle
The idea behind this method is

00:35:07.966 --> 00:35:09.186 A:middle
that it gives you a very easy

00:35:09.186 --> 00:35:10.866 A:middle
way to manipulate the text in

00:35:10.866 --> 00:35:12.936 A:middle
the textView, and it gives you

00:35:12.936 --> 00:35:14.516 A:middle
behavior as if the user had

00:35:14.516 --> 00:35:15.876 A:middle
performed the change themselves.

00:35:16.916 --> 00:35:17.936 A:middle
So, it performs all the

00:35:17.936 --> 00:35:19.656 A:middle
appropriate delegate methods, as

00:35:19.656 --> 00:35:20.286 A:middle
you'd expect.

00:35:20.696 --> 00:35:21.936 A:middle
But, the really interesting part

00:35:21.936 --> 00:35:23.716 A:middle
is that any attributes that are

00:35:23.716 --> 00:35:25.336 A:middle
not specified on the input

00:35:25.336 --> 00:35:27.196 A:middle
string are automatically filled

00:35:27.196 --> 00:35:28.506 A:middle
in using the textView's

00:35:28.616 --> 00:35:29.296 A:middle
typingAttributes.

00:35:30.466 --> 00:35:31.976 A:middle
So, let me give you an example.

00:35:32.506 --> 00:35:33.856 A:middle
Here's a window with some rich

00:35:33.856 --> 00:35:35.216 A:middle
text in it, and a little snippet

00:35:35.216 --> 00:35:36.196 A:middle
of code that calls

00:35:36.266 --> 00:35:38.346 A:middle
performValidatedReplacement to

00:35:38.346 --> 00:35:39.886 A:middle
insert the word "Developers" in

00:35:39.886 --> 00:35:40.196 A:middle
the middle.

00:35:41.266 --> 00:35:42.996 A:middle
If we run this, this is what we

00:35:42.996 --> 00:35:43.256 A:middle
get.

00:35:43.256 --> 00:35:45.226 A:middle
The word appears and it matches

00:35:45.226 --> 00:35:46.346 A:middle
the style of the surrounding

00:35:46.406 --> 00:35:48.126 A:middle
text, and we didn't have to

00:35:48.126 --> 00:35:49.436 A:middle
specify any attributes.

00:35:50.246 --> 00:35:51.896 A:middle
There's a subtlety here to be

00:35:51.896 --> 00:35:52.576 A:middle
aware of, though.

00:35:52.646 --> 00:35:55.236 A:middle
And, that's because the fallback

00:35:55.236 --> 00:35:56.376 A:middle
attributes come from the

00:35:56.446 --> 00:35:57.316 A:middle
typingAttributes.

00:35:57.426 --> 00:35:59.226 A:middle
So, if you start with some rich

00:35:59.336 --> 00:36:00.436 A:middle
text like this, and the

00:35:59.336 --> 00:36:00.436 A:middle
text like this, and the

00:36:00.436 --> 00:36:02.506 A:middle
insertion point is in the

00:36:02.506 --> 00:36:04.156 A:middle
lighter portion at the end, and

00:36:04.156 --> 00:36:06.496 A:middle
we run the same code; this is

00:36:06.496 --> 00:36:06.966 A:middle
the result.

00:36:07.896 --> 00:36:09.746 A:middle
The style attributes come from

00:36:09.746 --> 00:36:10.896 A:middle
the lighter portion at the end.

00:36:12.486 --> 00:36:14.036 A:middle
So, for this reason, you may

00:36:14.036 --> 00:36:15.316 A:middle
find that you need to set the

00:36:15.316 --> 00:36:16.896 A:middle
selective range for the range

00:36:16.896 --> 00:36:18.136 A:middle
you're about to replace before

00:36:18.136 --> 00:36:18.606 A:middle
you call

00:36:18.606 --> 00:36:19.956 A:middle
performValidatedReplacement.

00:36:22.896 --> 00:36:24.416 A:middle
If you do that, this is the

00:36:24.416 --> 00:36:25.216 A:middle
result that you get.

00:36:27.336 --> 00:36:28.966 A:middle
So, the next topic I'd like to

00:36:28.966 --> 00:36:30.436 A:middle
cover very briefly, is

00:36:30.466 --> 00:36:31.406 A:middle
continuity camera.

00:36:31.856 --> 00:36:33.346 A:middle
This is another fantastic

00:36:33.446 --> 00:36:35.376 A:middle
feature in macOS Mojave.

00:36:36.196 --> 00:36:37.216 A:middle
And, if you're just using the

00:36:37.216 --> 00:36:38.746 A:middle
standard framework classes like

00:36:38.746 --> 00:36:40.196 A:middle
NSTextView, there's nothing

00:36:40.196 --> 00:36:41.746 A:middle
special you need to do in order

00:36:41.746 --> 00:36:42.766 A:middle
to take advantage of it.

00:36:42.806 --> 00:36:43.606 A:middle
So, framework will handle

00:36:43.606 --> 00:36:44.336 A:middle
everything for you.

00:36:45.016 --> 00:36:45.996 A:middle
But, if you have a more

00:36:45.996 --> 00:36:49.136 A:middle
application-specific need for

00:36:49.306 --> 00:36:50.536 A:middle
this, it is possible to use it

00:36:50.536 --> 00:36:51.186 A:middle
more directly.

00:36:51.336 --> 00:36:52.296 A:middle
And then, it's important to

00:36:52.296 --> 00:36:53.806 A:middle
understand that it's implemented

00:36:53.806 --> 00:36:55.766 A:middle
using the existing services

00:36:55.766 --> 00:36:56.066 A:middle
API's.

00:36:56.726 --> 00:36:58.236 A:middle
So, all you need to do is tell a

00:36:58.236 --> 00:36:59.756 A:middle
framework that your responder

00:36:59.756 --> 00:37:01.306 A:middle
class is able to handle image

00:36:59.756 --> 00:37:01.306 A:middle
class is able to handle image

00:37:01.336 --> 00:37:01.606 A:middle
data.

00:37:01.926 --> 00:37:02.876 A:middle
And, you can do this by

00:37:02.876 --> 00:37:04.366 A:middle
implementing validRequestor.

00:37:05.166 --> 00:37:07.006 A:middle
If you want to try this out, I'd

00:37:07.006 --> 00:37:08.046 A:middle
encourage you to check out the

00:37:08.046 --> 00:37:09.866 A:middle
documentation for validRequestor

00:37:09.866 --> 00:37:11.126 A:middle
and some of the related methods.

00:37:13.686 --> 00:37:15.196 A:middle
Next, I'd like to talk about

00:37:15.326 --> 00:37:16.296 A:middle
custom Quick Actions.

00:37:16.436 --> 00:37:17.496 A:middle
You heard a little bit about

00:37:17.496 --> 00:37:19.716 A:middle
Quick Actions from the State of

00:37:19.716 --> 00:37:21.126 A:middle
the Union session yesterday.

00:37:21.126 --> 00:37:23.746 A:middle
And, they make it very easy to

00:37:24.466 --> 00:37:26.496 A:middle
perform simple actions like

00:37:26.496 --> 00:37:27.916 A:middle
opening a favorite app, for

00:37:27.916 --> 00:37:29.476 A:middle
complex ones like filtering

00:37:29.476 --> 00:37:33.076 A:middle
files, or invoking scripts.

00:37:33.326 --> 00:37:35.406 A:middle
You can build custom Quick

00:37:35.406 --> 00:37:38.936 A:middle
Actions using app extensions or

00:37:38.936 --> 00:37:40.296 A:middle
action bundles from Automator.

00:37:41.136 --> 00:37:42.116 A:middle
They're useful in so many

00:37:42.116 --> 00:37:43.926 A:middle
different places that there's a

00:37:43.926 --> 00:37:45.406 A:middle
variety of ways to invoke them.

00:37:45.406 --> 00:37:47.176 A:middle
But, my favorite by far is the

00:37:47.246 --> 00:37:47.676 A:middle
Touch Bar.

00:37:48.376 --> 00:37:49.816 A:middle
If you put your Quick Actions in

00:37:49.816 --> 00:37:51.036 A:middle
the Touch Bar, it just makes it

00:37:51.036 --> 00:37:52.246 A:middle
very easy to get to them,

00:37:52.536 --> 00:37:53.746 A:middle
wherever you are, whenever you

00:37:53.746 --> 00:37:54.186 A:middle
need them.

00:37:54.656 --> 00:37:55.786 A:middle
And, you can get this behavior

00:37:55.786 --> 00:37:56.816 A:middle
by looking in the keyboard

00:37:56.816 --> 00:37:58.326 A:middle
preferences panel, and

00:37:58.326 --> 00:37:59.846 A:middle
reconfiguring your Touch Bar to

00:37:59.846 --> 00:38:01.726 A:middle
either always show them, or to

00:37:59.846 --> 00:38:01.726 A:middle
either always show them, or to

00:38:01.726 --> 00:38:03.076 A:middle
flip to them when you hold down

00:38:03.076 --> 00:38:03.776 A:middle
the function key.

00:38:04.416 --> 00:38:05.736 A:middle
Or, you can customize your Touch

00:38:05.806 --> 00:38:07.796 A:middle
Bar and drag the workflows

00:38:07.796 --> 00:38:09.146 A:middle
button into your control script.

00:38:11.596 --> 00:38:12.706 A:middle
It's also worth noting that you

00:38:12.706 --> 00:38:13.876 A:middle
can go over to the Shortcuts

00:38:13.936 --> 00:38:15.926 A:middle
pane, and look under Services.

00:38:16.496 --> 00:38:18.096 A:middle
And, here you can turn them on

00:38:18.096 --> 00:38:19.346 A:middle
and off to control which ones

00:38:19.576 --> 00:38:21.416 A:middle
show up.

00:38:21.416 --> 00:38:22.366 A:middle
They don't only show up in the

00:38:22.366 --> 00:38:23.336 A:middle
Touch Bar, though, as I

00:38:23.336 --> 00:38:23.776 A:middle
mentioned.

00:38:23.776 --> 00:38:25.006 A:middle
So, here's a Finder window for

00:38:25.006 --> 00:38:25.576 A:middle
example.

00:38:25.636 --> 00:38:27.366 A:middle
And, the contextual menu has a

00:38:27.366 --> 00:38:29.106 A:middle
Quick Actions submenu where

00:38:29.186 --> 00:38:31.086 A:middle
you'll see them.

00:38:31.466 --> 00:38:33.386 A:middle
Finder's preview pane also has a

00:38:33.386 --> 00:38:34.436 A:middle
couple of Quick Actions at the

00:38:34.436 --> 00:38:36.026 A:middle
bottom, and then the full list

00:38:36.296 --> 00:38:37.406 A:middle
underneath the "More" button.

00:38:38.056 --> 00:38:39.456 A:middle
And, action bundles from

00:38:39.456 --> 00:38:41.046 A:middle
Automator will show up inside

00:38:41.046 --> 00:38:41.866 A:middle
the Services menu.

00:38:42.396 --> 00:38:44.036 A:middle
So, TrimLogs is one that I wrote

00:38:44.036 --> 00:38:45.556 A:middle
to filter my debug logs, for

00:38:45.556 --> 00:38:45.936 A:middle
example.

00:38:47.176 --> 00:38:48.776 A:middle
And, that brings me to the next

00:38:48.776 --> 00:38:50.176 A:middle
topic I'd like to talk about,

00:38:50.516 --> 00:38:52.166 A:middle
building action bundles, also

00:38:52.166 --> 00:38:53.816 A:middle
known as contextual workflows.

00:38:54.406 --> 00:38:55.636 A:middle
This is a new feature in

00:38:55.636 --> 00:38:56.216 A:middle
Automator.

00:38:56.516 --> 00:38:57.456 A:middle
When you go to Automator, and

00:38:57.456 --> 00:38:58.546 A:middle
create a new document, there's a

00:38:58.546 --> 00:38:59.886 A:middle
new option available now for

00:38:59.886 --> 00:39:01.006 A:middle
contextual workflows.

00:38:59.886 --> 00:39:01.006 A:middle
contextual workflows.

00:39:01.646 --> 00:39:02.896 A:middle
They look a lot like regular

00:39:02.896 --> 00:39:04.146 A:middle
workflows except there's a new

00:39:04.146 --> 00:39:06.306 A:middle
block at the top that allows you

00:39:06.306 --> 00:39:07.596 A:middle
to configure the input and

00:39:07.596 --> 00:39:09.586 A:middle
output as well as pick an icon

00:39:09.586 --> 00:39:10.116 A:middle
and the color.

00:39:11.716 --> 00:39:12.996 A:middle
So, let's go though a quick

00:39:12.996 --> 00:39:13.526 A:middle
example.

00:39:14.026 --> 00:39:15.516 A:middle
I often have a problem where

00:39:15.516 --> 00:39:16.886 A:middle
there's some file I want to open

00:39:16.886 --> 00:39:18.586 A:middle
in TextEdit, but I can't because

00:39:18.586 --> 00:39:19.646 A:middle
it doesn't have a file

00:39:19.646 --> 00:39:20.156 A:middle
extension.

00:39:20.616 --> 00:39:23.066 A:middle
This is super easy to fix with

00:39:23.066 --> 00:39:23.546 A:middle
Automator.

00:39:24.666 --> 00:39:25.816 A:middle
All you need to do is look

00:39:25.816 --> 00:39:27.676 A:middle
inside the library, and drag out

00:39:27.676 --> 00:39:29.396 A:middle
the Open Finder Items action.

00:39:30.096 --> 00:39:32.166 A:middle
You can configure it to open the

00:39:32.166 --> 00:39:33.656 A:middle
items with TextEdit instead of

00:39:33.656 --> 00:39:34.886 A:middle
with a default application.

00:39:35.646 --> 00:39:37.326 A:middle
Any file selected in the Finder

00:39:37.326 --> 00:39:38.736 A:middle
automatically become the input

00:39:38.736 --> 00:39:41.376 A:middle
to this action, and then if you

00:39:41.376 --> 00:39:43.926 A:middle
save it with some name, it will

00:39:43.926 --> 00:39:44.816 A:middle
automatically show up in the

00:39:44.876 --> 00:39:46.626 A:middle
Touch Bar, or in other contexts

00:39:46.876 --> 00:39:47.896 A:middle
where it's useful.

00:39:50.686 --> 00:39:54.216 A:middle
So, to summarize, we've talked

00:39:54.216 --> 00:39:55.906 A:middle
about a variety of new features,

00:39:56.176 --> 00:39:57.666 A:middle
and other changes that will make

00:39:57.666 --> 00:39:59.006 A:middle
your development experience

00:39:59.006 --> 00:40:00.596 A:middle
richer, and your applications

00:39:59.006 --> 00:40:00.596 A:middle
richer, and your applications

00:40:00.596 --> 00:40:00.976 A:middle
even more awesome.

00:40:01.046 --> 00:40:04.936 A:middle
Check out the new SDK and begin

00:40:05.416 --> 00:40:07.426 A:middle
implementing some of these

00:40:07.696 --> 00:40:08.866 A:middle
things in your applications.

00:40:10.046 --> 00:40:11.756 A:middle
They'll make your applications

00:40:11.756 --> 00:40:13.266 A:middle
shine, and your customers will

00:40:13.266 --> 00:40:14.356 A:middle
appreciate it.

00:40:15.046 --> 00:40:16.476 A:middle
For more information, you can

00:40:16.476 --> 00:40:17.436 A:middle
follow this URL.

00:40:17.436 --> 00:40:20.666 A:middle
And, also look inside the WWDC

00:40:20.666 --> 00:40:21.846 A:middle
app under this session.

00:40:22.156 --> 00:40:23.826 A:middle
All of the related sessions are

00:40:23.826 --> 00:40:24.306 A:middle
linked there.

00:40:24.396 --> 00:40:24.926 A:middle
Thank you very much.

00:40:25.516 --> 00:40:31.500 A:middle
[ Applause ]
