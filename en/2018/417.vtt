WEBVTT

00:00:07.516 --> 00:00:16.500 A:middle
[ Music ]

00:00:24.516 --> 00:00:31.936 A:middle
[ Applause ]

00:00:32.436 --> 00:00:32.826 A:middle
&gt;&gt; Hello.

00:00:33.346 --> 00:00:34.526 A:middle
Welcome to Testing Tips &amp;

00:00:34.526 --> 00:00:34.956 A:middle
Tricks.

00:00:36.096 --> 00:00:37.356 A:middle
My name is Brian Croom.

00:00:38.336 --> 00:00:40.066 A:middle
My colleague, Stuart, and I are

00:00:40.066 --> 00:00:41.376 A:middle
really excited to share some

00:00:41.376 --> 00:00:42.586 A:middle
great testing techniques with

00:00:42.586 --> 00:00:43.716 A:middle
you that we have been learning

00:00:43.716 --> 00:00:44.246 A:middle
recently.

00:00:44.836 --> 00:00:48.526 A:middle
As the conference was

00:00:48.526 --> 00:00:50.026 A:middle
approaching, we thought it would

00:00:50.026 --> 00:00:51.376 A:middle
be really cool to have an app

00:00:51.426 --> 00:00:53.266 A:middle
that we could use to find cool

00:00:53.266 --> 00:00:54.996 A:middle
things to see and do around the

00:00:54.996 --> 00:00:56.166 A:middle
area of the convention center.

00:00:56.756 --> 00:00:58.826 A:middle
We've been building this app,

00:00:59.306 --> 00:01:00.916 A:middle
giving it views for finding

00:00:59.306 --> 00:01:00.916 A:middle
giving it views for finding

00:01:00.916 --> 00:01:02.596 A:middle
various point of interest around

00:01:02.596 --> 00:01:04.586 A:middle
San Jose and listing how far

00:01:04.586 --> 00:01:05.385 A:middle
they are away from you.

00:01:05.385 --> 00:01:08.806 A:middle
Now, of course, we wanted to

00:01:08.806 --> 00:01:10.466 A:middle
make sure we had a really great

00:01:10.516 --> 00:01:12.636 A:middle
test suite for this app that we

00:01:12.636 --> 00:01:14.226 A:middle
could run to give us confidence

00:01:14.376 --> 00:01:15.416 A:middle
that our code was working

00:01:15.416 --> 00:01:17.476 A:middle
properly and would keep working

00:01:17.476 --> 00:01:18.616 A:middle
as we continue development.

00:01:19.196 --> 00:01:24.246 A:middle
Today, we want to share four

00:01:24.246 --> 00:01:25.636 A:middle
simple techniques with you that

00:01:25.636 --> 00:01:27.086 A:middle
we found really helpful while

00:01:27.086 --> 00:01:29.026 A:middle
writing tests for our app.

00:01:29.976 --> 00:01:32.076 A:middle
Some strategies for testing

00:01:32.076 --> 00:01:33.806 A:middle
networking code in your app,

00:01:34.616 --> 00:01:36.836 A:middle
some tips for tests dealing with

00:01:36.836 --> 00:01:38.516 A:middle
foundation notification objects,

00:01:38.936 --> 00:01:41.356 A:middle
ways to take advantage of

00:01:41.496 --> 00:01:43.176 A:middle
protocols when making mock

00:01:43.176 --> 00:01:46.026 A:middle
objects in your tests, and a few

00:01:46.026 --> 00:01:47.066 A:middle
techniques for keeping your

00:01:47.066 --> 00:01:48.556 A:middle
tests running really fast.

00:01:49.036 --> 00:01:53.346 A:middle
Let's start talking about

00:01:53.346 --> 00:01:53.926 A:middle
networking.

00:01:55.576 --> 00:01:57.066 A:middle
To allow for dynamic content

00:01:57.066 --> 00:01:58.856 A:middle
updates, we've been building our

00:01:58.856 --> 00:02:00.326 A:middle
app to load its data from a

00:01:58.856 --> 00:02:00.326 A:middle
app to load its data from a

00:02:00.326 --> 00:02:01.196 A:middle
remote web server.

00:02:02.506 --> 00:02:03.646 A:middle
Here are some things that we

00:02:03.646 --> 00:02:05.446 A:middle
found useful when writing tests

00:02:05.446 --> 00:02:06.236 A:middle
for networking code.

00:02:06.706 --> 00:02:10.856 A:middle
But first, quick, a recap from

00:02:10.856 --> 00:02:11.326 A:middle
last year.

00:02:12.376 --> 00:02:15.176 A:middle
At WWDC 2017's Engineering

00:02:15.176 --> 00:02:17.196 A:middle
Testability session, we

00:02:17.196 --> 00:02:19.546 A:middle
discussed the pyramid model as a

00:02:19.546 --> 00:02:20.906 A:middle
guide to how to structure a test

00:02:20.906 --> 00:02:23.676 A:middle
suite, balancing thoroughness,

00:02:23.676 --> 00:02:25.716 A:middle
understandability, and execution

00:02:25.716 --> 00:02:26.026 A:middle
speed.

00:02:28.376 --> 00:02:30.876 A:middle
In summary, an ideal test suite

00:02:31.016 --> 00:02:32.406 A:middle
tends to be composed of a large

00:02:32.436 --> 00:02:34.056 A:middle
percentage of focused unit

00:02:34.056 --> 00:02:36.006 A:middle
tests, exercising individual

00:02:36.006 --> 00:02:38.246 A:middle
classes and methods in your app.

00:02:39.416 --> 00:02:41.206 A:middle
These are characterized by being

00:02:41.266 --> 00:02:43.726 A:middle
simple to read, producing clear

00:02:43.726 --> 00:02:45.246 A:middle
failure messages when we detect

00:02:45.246 --> 00:02:47.826 A:middle
a problem, and by running very

00:02:47.826 --> 00:02:49.796 A:middle
quickly, often in the order of

00:02:49.796 --> 00:02:51.236 A:middle
hundreds or thousands of tests

00:02:51.286 --> 00:02:51.686 A:middle
per minute.

00:02:54.456 --> 00:02:55.976 A:middle
These are complemented by a

00:02:55.976 --> 00:02:58.056 A:middle
smaller number of medium-sized

00:02:58.056 --> 00:03:00.676 A:middle
integration tests that targeted

00:02:58.056 --> 00:03:00.676 A:middle
integration tests that targeted

00:03:00.676 --> 00:03:02.916 A:middle
discreet subsystem or cluster of

00:03:02.916 --> 00:03:05.176 A:middle
classes in your app, checking

00:03:05.176 --> 00:03:05.906 A:middle
that they worked together

00:03:05.906 --> 00:03:07.826 A:middle
properly, each taking no more

00:03:07.826 --> 00:03:08.926 A:middle
than a few seconds to run.

00:03:11.486 --> 00:03:13.176 A:middle
And the suite is topped off by a

00:03:13.176 --> 00:03:14.606 A:middle
handful of end-to-end system

00:03:14.606 --> 00:03:16.436 A:middle
tests, most often taking the

00:03:16.436 --> 00:03:19.016 A:middle
form of UI tests that exercise

00:03:19.016 --> 00:03:20.906 A:middle
the app in a way very similar to

00:03:20.906 --> 00:03:22.336 A:middle
how the end-user will do so on

00:03:22.336 --> 00:03:25.196 A:middle
their devices, checking that all

00:03:25.196 --> 00:03:26.036 A:middle
the pieces are hooked up

00:03:26.036 --> 00:03:28.486 A:middle
properly and interact well with

00:03:28.486 --> 00:03:30.006 A:middle
the underlying operating system

00:03:30.136 --> 00:03:31.476 A:middle
and external resources.

00:03:32.026 --> 00:03:34.946 A:middle
A test suite following this

00:03:34.946 --> 00:03:36.526 A:middle
model can provide a

00:03:36.526 --> 00:03:38.076 A:middle
comprehensive picture of how an

00:03:38.076 --> 00:03:39.266 A:middle
app code's base is functioning.

00:03:43.476 --> 00:03:45.056 A:middle
For testing the networking stack

00:03:45.056 --> 00:03:46.966 A:middle
in this app, we really wanted to

00:03:46.966 --> 00:03:48.346 A:middle
take the pyramid model to heart

00:03:48.956 --> 00:03:50.436 A:middle
and use it as a guide for how to

00:03:50.436 --> 00:03:52.026 A:middle
structure our test suite.

00:03:53.056 --> 00:03:54.626 A:middle
Here, we see the high-level data

00:03:54.626 --> 00:03:56.126 A:middle
flow involved in making a

00:03:56.126 --> 00:03:58.036 A:middle
network request in the app and

00:03:58.076 --> 00:03:59.146 A:middle
feeding the data into the UI.

00:04:02.406 --> 00:04:03.706 A:middle
In an early prototype of the

00:04:03.846 --> 00:04:05.476 A:middle
app, we had a method in our view

00:04:05.476 --> 00:04:06.946 A:middle
controller that was doing all of

00:04:06.946 --> 00:04:09.226 A:middle
this in a single place, and it

00:04:09.226 --> 00:04:10.036 A:middle
looked like this.

00:04:12.356 --> 00:04:13.906 A:middle
The method takes a parameter

00:04:13.906 --> 00:04:15.786 A:middle
with the user's location and

00:04:17.096 --> 00:04:19.416 A:middle
uses that to construct a URL for

00:04:19.416 --> 00:04:21.386 A:middle
a service API endpoint with a

00:04:21.386 --> 00:04:23.026 A:middle
location as query parameters.

00:04:25.856 --> 00:04:27.476 A:middle
Then it uses Foundation's

00:04:27.476 --> 00:04:29.906 A:middle
URLSession APIs to make a data

00:04:29.906 --> 00:04:32.076 A:middle
task for a get request to that

00:04:32.076 --> 00:04:32.356 A:middle
URL.

00:04:34.616 --> 00:04:37.226 A:middle
Then the server responds, it

00:04:37.226 --> 00:04:40.106 A:middle
would unwrap the data, decode it

00:04:40.106 --> 00:04:41.476 A:middle
using foundation's JSONDecoder

00:04:41.476 --> 00:04:44.146 A:middle
API, into an array of point of

00:04:44.146 --> 00:04:45.796 A:middle
interest values, which is a

00:04:45.796 --> 00:04:47.286 A:middle
struct that I declared elsewhere

00:04:47.286 --> 00:04:49.036 A:middle
and conforms the decodable

00:04:49.036 --> 00:04:49.536 A:middle
protocol.

00:04:49.536 --> 00:04:52.936 A:middle
And it stores that into a

00:04:52.936 --> 00:04:54.386 A:middle
property to drive a table view

00:04:54.386 --> 00:04:55.616 A:middle
[inaudible] implementation,

00:04:56.086 --> 00:04:56.976 A:middle
putting it onto the screen.

00:05:00.366 --> 00:05:01.806 A:middle
Now, it's pretty remarkable that

00:05:01.806 --> 00:05:03.516 A:middle
I was able to do all of this in

00:05:03.516 --> 00:05:05.086 A:middle
just about 15 lines of code,

00:05:05.796 --> 00:05:07.106 A:middle
leveraging the power of Swift

00:05:07.106 --> 00:05:10.296 A:middle
and Foundation, but, by putting

00:05:10.296 --> 00:05:11.586 A:middle
this together in the one method,

00:05:12.256 --> 00:05:12.646 A:middle
I [inaudible] the

00:05:12.676 --> 00:05:14.726 A:middle
maintainability and especially

00:05:14.766 --> 00:05:20.786 A:middle
the testability of this code.

00:05:20.986 --> 00:05:22.116 A:middle
Looking at the base of our

00:05:22.176 --> 00:05:23.956 A:middle
testing pyramid, what we really

00:05:23.956 --> 00:05:25.456 A:middle
want to be able to do here is

00:05:25.456 --> 00:05:27.376 A:middle
write focus unit tests for each

00:05:27.376 --> 00:05:28.436 A:middle
of these pieces of the flow.

00:05:29.066 --> 00:05:32.576 A:middle
Let's first consider the request

00:05:32.576 --> 00:05:34.216 A:middle
preparation and response parsing

00:05:34.216 --> 00:05:34.746 A:middle
steps.

00:05:38.516 --> 00:05:40.306 A:middle
In order to make this code more

00:05:40.306 --> 00:05:42.646 A:middle
testable, we started by pulling

00:05:42.646 --> 00:05:43.886 A:middle
it out of the view controller

00:05:44.506 --> 00:05:46.976 A:middle
and made two methods on this

00:05:46.976 --> 00:05:47.596 A:middle
dedicated

00:05:47.596 --> 00:05:50.386 A:middle
PointsOfInterestRequest type,

00:05:50.596 --> 00:05:52.466 A:middle
giving us two nicely decoupled

00:05:52.466 --> 00:05:54.306 A:middle
methods that each take some

00:05:54.306 --> 00:05:57.216 A:middle
values as input and transform

00:05:57.216 --> 00:05:58.576 A:middle
them into some output values

00:05:58.686 --> 00:06:00.536 A:middle
without any side effects.

00:05:58.686 --> 00:06:00.536 A:middle
without any side effects.

00:06:03.056 --> 00:06:04.166 A:middle
This makes it very

00:06:04.166 --> 00:06:06.176 A:middle
straightforward for us to write

00:06:06.176 --> 00:06:08.226 A:middle
a focused unit test for the

00:06:09.236 --> 00:06:09.346 A:middle
code.

00:06:09.556 --> 00:06:10.226 A:middle
Here we're testing the

00:06:10.226 --> 00:06:12.356 A:middle
makeRequest method just by

00:06:12.356 --> 00:06:13.306 A:middle
making a sample and put

00:06:13.336 --> 00:06:14.986 A:middle
location, passing it into the

00:06:14.986 --> 00:06:16.826 A:middle
method, and making some

00:06:16.826 --> 00:06:18.146 A:middle
assertions about its return

00:06:18.146 --> 00:06:18.330 A:middle
value.

00:06:22.056 --> 00:06:23.206 A:middle
Similarly, we can test the

00:06:23.206 --> 00:06:25.056 A:middle
response parsing by passing in

00:06:25.056 --> 00:06:26.806 A:middle
some mock JSON and making

00:06:26.806 --> 00:06:27.946 A:middle
assertions about the parsed

00:06:27.946 --> 00:06:28.906 A:middle
result.

00:06:31.236 --> 00:06:33.396 A:middle
One other thing to note about

00:06:33.396 --> 00:06:34.936 A:middle
this test is that I'm taking

00:06:34.936 --> 00:06:37.266 A:middle
advantage of XCTest support for

00:06:37.266 --> 00:06:38.766 A:middle
test methods marked as throws,

00:06:39.476 --> 00:06:41.256 A:middle
allowing me to use try in my

00:06:41.256 --> 00:06:43.066 A:middle
test code without needing an

00:06:43.066 --> 00:06:44.616 A:middle
explicit do catch block around

00:06:44.946 --> 00:06:45.000 A:middle
it.

00:06:49.346 --> 00:06:50.516 A:middle
Now, let's see the code for

00:06:50.516 --> 00:06:51.876 A:middle
interacting with URL session.

00:06:54.296 --> 00:06:55.886 A:middle
Here, again, we pull it out the

00:06:55.886 --> 00:06:58.716 A:middle
view controller, made a

00:06:58.716 --> 00:07:00.966 A:middle
APIRequest protocol with methods

00:06:58.716 --> 00:07:00.966 A:middle
APIRequest protocol with methods

00:07:01.016 --> 00:07:02.326 A:middle
matching the signature of the

00:07:02.326 --> 00:07:03.326 A:middle
methods from the request type

00:07:03.326 --> 00:07:04.036 A:middle
that we just saw.

00:07:04.186 --> 00:07:06.536 A:middle
And this is used by an

00:07:06.536 --> 00:07:08.156 A:middle
APIRequestLoader class.

00:07:09.576 --> 00:07:10.666 A:middle
That's initialized with a

00:07:10.666 --> 00:07:13.536 A:middle
request type and a urlSession

00:07:16.656 --> 00:07:16.906 A:middle
instance.

00:07:17.546 --> 00:07:19.546 A:middle
This class has a loadAPIRequest

00:07:19.546 --> 00:07:21.586 A:middle
method which uses that

00:07:21.586 --> 00:07:23.526 A:middle
apiRequest value to generate a

00:07:23.526 --> 00:07:24.316 A:middle
URL request.

00:07:25.446 --> 00:07:27.106 A:middle
Feed that into the urlSession,

00:07:27.456 --> 00:07:29.566 A:middle
and then use the apiRequest

00:07:29.566 --> 00:07:30.966 A:middle
again to parse in your response.

00:07:30.966 --> 00:07:36.316 A:middle
Now, we can continue write unit

00:07:36.316 --> 00:07:38.256 A:middle
test for this method, but right

00:07:38.256 --> 00:07:39.356 A:middle
now I actually want to move up

00:07:39.436 --> 00:07:41.026 A:middle
the pyramid and look at a

00:07:41.026 --> 00:07:42.876 A:middle
midlevel integration test that

00:07:42.876 --> 00:07:44.006 A:middle
covers several pieces of this

00:07:44.006 --> 00:07:44.496 A:middle
data flow.

00:07:46.756 --> 00:07:48.226 A:middle
Another thing that I really want

00:07:48.346 --> 00:07:50.446 A:middle
to also be able to test at this

00:07:50.446 --> 00:07:52.326 A:middle
layer of my suite is that my

00:07:52.326 --> 00:07:54.296 A:middle
interaction with the URLSession

00:07:54.296 --> 00:07:55.746 A:middle
APIs is correct.

00:07:56.756 --> 00:07:58.526 A:middle
It turns out that the foundation

00:07:58.526 --> 00:08:00.256 A:middle
URL loading system provides a

00:07:58.526 --> 00:08:00.256 A:middle
URL loading system provides a

00:08:00.256 --> 00:08:03.976 A:middle
great hook for doing this.

00:08:04.206 --> 00:08:06.406 A:middle
URLSession provides a high level

00:08:06.406 --> 00:08:07.956 A:middle
API for apps to use to perform

00:08:07.956 --> 00:08:08.946 A:middle
network requests.

00:08:10.206 --> 00:08:11.416 A:middle
[Inaudible] objects like

00:08:11.416 --> 00:08:12.836 A:middle
URLSession data tests that

00:08:12.836 --> 00:08:14.356 A:middle
represent an inflight request.

00:08:14.696 --> 00:08:17.086 A:middle
Behind the scenes though,

00:08:17.556 --> 00:08:18.936 A:middle
there's another lower-level API

00:08:19.446 --> 00:08:22.256 A:middle
URLProtocol which performs the

00:08:22.256 --> 00:08:23.436 A:middle
underlying work of opening

00:08:23.436 --> 00:08:25.266 A:middle
network connection, writing the

00:08:25.266 --> 00:08:26.826 A:middle
request, and reading back a

00:08:26.826 --> 00:08:27.466 A:middle
response.

00:08:29.486 --> 00:08:31.196 A:middle
URLProtocol is designed to be

00:08:31.196 --> 00:08:32.916 A:middle
subclassed giving an

00:08:32.916 --> 00:08:34.905 A:middle
extensibility point for the URL

00:08:34.905 --> 00:08:35.596 A:middle
loading system.

00:08:38.956 --> 00:08:40.716 A:middle
Foundation provides built-in

00:08:40.716 --> 00:08:43.226 A:middle
protocols subclasses for common

00:08:43.226 --> 00:08:44.145 A:middle
protocols like HTTPS.

00:08:44.145 --> 00:08:47.036 A:middle
But we can override these in our

00:08:47.036 --> 00:08:48.416 A:middle
tests by providing a mock

00:08:48.486 --> 00:08:50.456 A:middle
protocol that lets us make

00:08:50.456 --> 00:08:52.076 A:middle
assertions about requests that

00:08:52.076 --> 00:08:54.756 A:middle
are coming out and provide mock

00:08:54.756 --> 00:08:55.426 A:middle
responses.

00:08:59.346 --> 00:09:00.886 A:middle
URLProtocol communicates

00:08:59.346 --> 00:09:00.886 A:middle
URLProtocol communicates

00:09:00.886 --> 00:09:02.886 A:middle
progress back to the system via

00:09:02.886 --> 00:09:07.976 A:middle
the URLProtocolClient protocol.

00:09:08.056 --> 00:09:09.466 A:middle
We can use this in this way.

00:09:10.886 --> 00:09:12.726 A:middle
We make a MockURLProtocol class

00:09:12.776 --> 00:09:15.586 A:middle
in our test bundle, overriding

00:09:15.746 --> 00:09:18.046 A:middle
canInit request to indicate to

00:09:18.046 --> 00:09:19.336 A:middle
the system that we're interested

00:09:19.336 --> 00:09:20.756 A:middle
in any request that it offers

00:09:21.606 --> 00:09:21.706 A:middle
us.

00:09:23.596 --> 00:09:25.276 A:middle
Implement canonicalRequest for

00:09:25.276 --> 00:09:27.316 A:middle
request, but the start loading

00:09:27.316 --> 00:09:28.496 A:middle
and stop loading method's where

00:09:28.496 --> 00:09:29.786 A:middle
most of the action happens.

00:09:34.516 --> 00:09:36.126 A:middle
To give our tests a way to hook

00:09:36.126 --> 00:09:38.216 A:middle
into this URLProtocol, we'll

00:09:38.216 --> 00:09:39.376 A:middle
provide a closure property

00:09:39.606 --> 00:09:41.506 A:middle
requestHandler for the test to

00:09:41.646 --> 00:09:42.000 A:middle
set.

00:09:44.636 --> 00:09:47.106 A:middle
When a URLSession task begins,

00:09:47.136 --> 00:09:48.716 A:middle
the system will instantiate our

00:09:48.746 --> 00:09:51.156 A:middle
URLProtocol subclass, giving it

00:09:51.156 --> 00:09:53.606 A:middle
the URLRequest value and a

00:09:53.606 --> 00:09:55.206 A:middle
URLProtocol client instance.

00:09:56.996 --> 00:09:58.536 A:middle
Then it'll call our startLoading

00:09:58.536 --> 00:10:00.906 A:middle
method, where we'll take our

00:09:58.536 --> 00:10:00.906 A:middle
method, where we'll take our

00:10:00.906 --> 00:10:02.016 A:middle
requestHandler to the test

00:10:02.016 --> 00:10:04.546 A:middle
subsets and call it with a

00:10:04.546 --> 00:10:05.706 A:middle
URLRequest as a parameter.

00:10:07.296 --> 00:10:08.766 A:middle
We'll take what it returns and

00:10:08.766 --> 00:10:10.156 A:middle
pass it back to the system,

00:10:10.926 --> 00:10:12.746 A:middle
either as a URL response plus

00:10:12.806 --> 00:10:15.496 A:middle
data, or as an error.

00:10:15.666 --> 00:10:19.666 A:middle
If you want to do test request

00:10:19.666 --> 00:10:21.116 A:middle
cancellation, we could do

00:10:21.116 --> 00:10:22.476 A:middle
something similar in a

00:10:22.476 --> 00:10:23.626 A:middle
stopLoading method

00:10:23.626 --> 00:10:24.336 A:middle
implementation.

00:10:28.576 --> 00:10:30.406 A:middle
With the stub protocol in hand,

00:10:30.716 --> 00:10:33.346 A:middle
we can write our test.

00:10:33.476 --> 00:10:34.546 A:middle
We set up by making an

00:10:34.546 --> 00:10:36.126 A:middle
APIRequestLoader instance,

00:10:36.676 --> 00:10:38.026 A:middle
configure it with a request type

00:10:39.166 --> 00:10:40.786 A:middle
and a URLSession that's been

00:10:40.786 --> 00:10:41.836 A:middle
configured to use our

00:10:41.836 --> 00:10:42.546 A:middle
URLProtocol.

00:10:46.056 --> 00:10:48.346 A:middle
In the test body, we set a

00:10:48.346 --> 00:10:49.426 A:middle
requestHandler on the

00:10:49.426 --> 00:10:52.086 A:middle
MockURLProtocol, making

00:10:52.086 --> 00:10:53.696 A:middle
assertions about the request

00:10:53.696 --> 00:10:56.526 A:middle
that's going out, then providing

00:10:56.526 --> 00:10:57.326 A:middle
a stub response.

00:10:57.896 --> 00:11:01.676 A:middle
Then we can call loadAPIRequest,

00:10:57.896 --> 00:11:01.676 A:middle
Then we can call loadAPIRequest,

00:11:03.046 --> 00:11:04.156 A:middle
waiting for the completion block

00:11:04.156 --> 00:11:06.986 A:middle
to be called, making assertions

00:11:06.986 --> 00:11:08.156 A:middle
about the parsed response.

00:11:10.776 --> 00:11:12.396 A:middle
Couple of tests at this layer

00:11:12.396 --> 00:11:14.246 A:middle
can give us a lot of confidence

00:11:14.516 --> 00:11:15.396 A:middle
that our code is working

00:11:15.396 --> 00:11:17.246 A:middle
together well and, also, that

00:11:17.246 --> 00:11:18.406 A:middle
we're integrating properly with

00:11:18.406 --> 00:11:18.966 A:middle
the system.

00:11:19.786 --> 00:11:21.176 A:middle
For example, this test that we

00:11:21.176 --> 00:11:23.416 A:middle
just saw would have failed if I

00:11:23.416 --> 00:11:24.876 A:middle
had forgotten to call a resume

00:11:24.906 --> 00:11:25.766 A:middle
on my data task.

00:11:26.606 --> 00:11:27.476 A:middle
I'm sure I'm not the only one

00:11:27.476 --> 00:11:29.000 A:middle
who's made that mistake.

00:11:33.096 --> 00:11:34.976 A:middle
Finally, it can also be really

00:11:34.976 --> 00:11:36.836 A:middle
valuable to include some system

00:11:36.836 --> 00:11:38.506 A:middle
level end-to-end tests.

00:11:39.776 --> 00:11:41.346 A:middle
Actually test a UI testing can

00:11:41.346 --> 00:11:43.126 A:middle
be a great tool for this.

00:11:44.236 --> 00:11:45.816 A:middle
To learn more about UI testing,

00:11:46.296 --> 00:11:47.886 A:middle
refer to the UI testing in Xcode

00:11:47.886 --> 00:11:50.506 A:middle
session from WWDC 2015.

00:11:51.146 --> 00:11:55.576 A:middle
Now, a significant challenge

00:11:56.016 --> 00:11:57.176 A:middle
that you encounter when you

00:11:57.176 --> 00:11:59.016 A:middle
start to write true end-to-end

00:11:59.016 --> 00:12:01.036 A:middle
tests is that when something

00:11:59.016 --> 00:12:01.036 A:middle
tests is that when something

00:12:01.036 --> 00:12:01.986 A:middle
goes wrong when you get a test

00:12:01.986 --> 00:12:03.806 A:middle
failure, it can be really hard

00:12:03.806 --> 00:12:04.986 A:middle
to know where to start looking

00:12:04.986 --> 00:12:06.006 A:middle
for the source of the problem.

00:12:06.516 --> 00:12:08.876 A:middle
One thing that we were doing in

00:12:08.876 --> 00:12:09.876 A:middle
our test recently to help

00:12:09.876 --> 00:12:12.156 A:middle
mitigate this was to set up a

00:12:12.156 --> 00:12:13.606 A:middle
local instance of a mock server,

00:12:14.366 --> 00:12:15.806 A:middle
interrupting our UI tests to

00:12:15.806 --> 00:12:16.996 A:middle
make requests against that

00:12:17.366 --> 00:12:18.386 A:middle
instead of the real server.

00:12:19.736 --> 00:12:21.126 A:middle
This allowed our UI test to be

00:12:21.126 --> 00:12:22.696 A:middle
much more reliable, because we

00:12:22.696 --> 00:12:24.226 A:middle
had control over the data being

00:12:24.226 --> 00:12:26.066 A:middle
fed back into the app.

00:12:28.366 --> 00:12:30.106 A:middle
Now, while using a mock server

00:12:30.106 --> 00:12:31.106 A:middle
can be really useful in this

00:12:31.106 --> 00:12:33.156 A:middle
context, it is also good to have

00:12:33.156 --> 00:12:34.816 A:middle
some tests making requests

00:12:34.816 --> 00:12:35.706 A:middle
against the real server.

00:12:36.256 --> 00:12:40.056 A:middle
One cool technique for doing

00:12:40.056 --> 00:12:41.836 A:middle
this can be to have some tests

00:12:41.836 --> 00:12:43.656 A:middle
in the unit testing bundle that

00:12:43.656 --> 00:12:45.236 A:middle
call directly into your apps in

00:12:45.236 --> 00:12:47.686 A:middle
that work in Stack and use that

00:12:47.836 --> 00:12:48.966 A:middle
to direct requests against the

00:12:48.966 --> 00:12:49.566 A:middle
real server.

00:12:51.096 --> 00:12:52.596 A:middle
This provides a way of verifying

00:12:52.596 --> 00:12:54.316 A:middle
that the server is accepting

00:12:54.316 --> 00:12:55.716 A:middle
requests the way that your app

00:12:55.716 --> 00:12:57.986 A:middle
is making them and that you're

00:12:57.986 --> 00:12:58.956 A:middle
able to parse the server's

00:12:58.956 --> 00:13:01.566 A:middle
responses without having to deal

00:12:58.956 --> 00:13:01.566 A:middle
responses without having to deal

00:13:01.566 --> 00:13:02.736 A:middle
with the complications of

00:13:02.866 --> 00:13:04.326 A:middle
testing your UI at the same

00:13:04.916 --> 00:13:05.000 A:middle
time.

00:13:10.396 --> 00:13:12.596 A:middle
So, to wrap up, we've seen an

00:13:12.596 --> 00:13:14.476 A:middle
example of breaking code into

00:13:14.476 --> 00:13:16.306 A:middle
smaller, independent pieces to

00:13:16.306 --> 00:13:17.566 A:middle
facilitate unit testing.

00:13:18.156 --> 00:13:21.506 A:middle
We've seen how URLProtocol can

00:13:21.506 --> 00:13:23.426 A:middle
be used as a tool for mocking

00:13:23.426 --> 00:13:24.386 A:middle
network requests,

00:13:24.646 --> 00:13:27.426 A:middle
and we've discussed how the

00:13:27.426 --> 00:13:29.046 A:middle
power of the pyramid can be used

00:13:29.306 --> 00:13:30.336 A:middle
to help us structure a

00:13:30.336 --> 00:13:32.006 A:middle
well-balanced test suite that'll

00:13:32.006 --> 00:13:33.156 A:middle
give us good confidence in our

00:13:33.946 --> 00:13:34.046 A:middle
code.

00:13:35.186 --> 00:13:36.656 A:middle
Now, I want to call Stuart to

00:13:36.656 --> 00:13:38.176 A:middle
the stage to talk about some

00:13:38.236 --> 00:13:38.886 A:middle
more techniques.

00:13:40.516 --> 00:13:42.696 A:middle
[ Applause ]

00:13:43.196 --> 00:13:43.386 A:middle
&gt;&gt; Thanks.

00:13:46.616 --> 00:13:47.286 A:middle
Thanks, Brian.

00:13:48.186 --> 00:13:49.626 A:middle
So, the first area I'd like to

00:13:49.626 --> 00:13:51.016 A:middle
talk about is some best

00:13:51.056 --> 00:13:52.226 A:middle
practices for testing

00:13:52.226 --> 00:13:53.066 A:middle
notifications.

00:13:54.776 --> 00:13:57.036 A:middle
And to clarify, by notification

00:13:57.036 --> 00:13:58.276 A:middle
here, I'm talking about

00:13:58.426 --> 00:13:59.916 A:middle
foundation-level notifications

00:14:00.166 --> 00:14:01.686 A:middle
known as NSNotification and

00:14:01.686 --> 00:14:02.366 A:middle
Objective-C.

00:14:03.386 --> 00:14:04.926 A:middle
So, sometimes we need to test

00:14:04.926 --> 00:14:06.206 A:middle
that a subject observes a

00:14:06.206 --> 00:14:08.196 A:middle
notification, while other times

00:14:08.196 --> 00:14:09.356 A:middle
we need to test that a subject

00:14:09.406 --> 00:14:10.426 A:middle
posts a notification.

00:14:11.506 --> 00:14:13.326 A:middle
Notifications are a one-to-many

00:14:13.326 --> 00:14:14.936 A:middle
communication mechanism, and

00:14:14.936 --> 00:14:16.176 A:middle
that means that when a single

00:14:16.176 --> 00:14:18.216 A:middle
notification is posted, it may

00:14:18.216 --> 00:14:19.786 A:middle
be sent to multiple recipients

00:14:19.816 --> 00:14:21.516 A:middle
throughout your app or even in

00:14:21.516 --> 00:14:22.796 A:middle
the framework code running in

00:14:22.796 --> 00:14:23.766 A:middle
your app's process.

00:14:24.416 --> 00:14:25.726 A:middle
So, because of this, it's

00:14:25.726 --> 00:14:27.186 A:middle
important that we always test

00:14:27.366 --> 00:14:28.936 A:middle
notifications in an isolated

00:14:28.936 --> 00:14:32.996 A:middle
fashion to avoid unintended side

00:14:32.996 --> 00:14:34.566 A:middle
effects, since that can lead to

00:14:35.296 --> 00:14:36.786 A:middle
flaky, unreliable tests.

00:14:37.416 --> 00:14:38.766 A:middle
So, let's look at an example of

00:14:38.766 --> 00:14:39.966 A:middle
some code that has this problem.

00:14:41.356 --> 00:14:42.036 A:middle
Here, I have the

00:14:42.156 --> 00:14:42.856 A:middle
PointsOfInterest

00:14:42.856 --> 00:14:44.286 A:middle
TableViewController from the app

00:14:44.406 --> 00:14:45.286 A:middle
Brian and I are building.

00:14:46.186 --> 00:14:48.016 A:middle
It shows a list of nearby places

00:14:48.016 --> 00:14:50.026 A:middle
of interest in a table view, and

00:14:50.026 --> 00:14:51.246 A:middle
whenever the app's location

00:14:51.246 --> 00:14:52.986 A:middle
authorization changes, it may

00:14:52.986 --> 00:14:53.996 A:middle
need to reload its data.

00:14:54.486 --> 00:14:56.196 A:middle
So, it observes a notification

00:14:56.196 --> 00:14:57.896 A:middle
called authChanged from our

00:14:57.896 --> 00:14:59.536 A:middle
app's CurrentLocationProvider

00:14:59.536 --> 00:14:59.976 A:middle
class.

00:15:00.826 --> 00:15:01.506 A:middle
When it observes this

00:15:01.506 --> 00:15:03.336 A:middle
notification, it reloads its

00:15:03.336 --> 00:15:04.876 A:middle
data if necessary, and, then,

00:15:05.126 --> 00:15:06.416 A:middle
for the purpose of this example,

00:15:06.416 --> 00:15:07.346 A:middle
it sets a flag.

00:15:08.316 --> 00:15:10.376 A:middle
This way, our test code can

00:15:10.456 --> 00:15:11.846 A:middle
check that the flag to see if

00:15:11.846 --> 00:15:12.996 A:middle
the notification was actually

00:15:12.996 --> 00:15:13.406 A:middle
received.

00:15:13.876 --> 00:15:15.956 A:middle
We can see here that it's using

00:15:15.956 --> 00:15:17.526 A:middle
the default notification center

00:15:17.526 --> 00:15:18.456 A:middle
to add the observer.

00:15:19.916 --> 00:15:21.066 A:middle
Let's take a look at what a unit

00:15:21.066 --> 00:15:22.166 A:middle
test for this code might look

00:15:22.166 --> 00:15:22.436 A:middle
like.

00:15:23.476 --> 00:15:25.616 A:middle
Here in our test for this class,

00:15:25.836 --> 00:15:27.466 A:middle
we post the authChanged method

00:15:27.546 --> 00:15:29.066 A:middle
notification to simulate it, and

00:15:29.356 --> 00:15:30.516 A:middle
we post it to the default

00:15:30.516 --> 00:15:32.096 A:middle
NotificationCenter, the same one

00:15:32.096 --> 00:15:33.366 A:middle
that our view controller uses.

00:15:34.066 --> 00:15:36.166 A:middle
Now, this test works, but it may

00:15:36.166 --> 00:15:37.506 A:middle
have unknown side effects

00:15:37.506 --> 00:15:38.716 A:middle
elsewhere in our app's code.

00:15:39.506 --> 00:15:40.796 A:middle
It's common for some system

00:15:40.796 --> 00:15:42.406 A:middle
notifications like UI

00:15:42.406 --> 00:15:43.196 A:middle
applications

00:15:43.306 --> 00:15:44.496 A:middle
appDidFinishLaunching

00:15:44.496 --> 00:15:46.086 A:middle
notification to be observed by

00:15:46.086 --> 00:15:47.756 A:middle
many layers and to have unknown

00:15:47.756 --> 00:15:49.826 A:middle
side effects, or it could simply

00:15:49.826 --> 00:15:50.986 A:middle
slow down our tests.

00:15:51.636 --> 00:15:53.286 A:middle
So, we'd like to isolate this

00:15:53.286 --> 00:15:54.576 A:middle
code better to test this.

00:15:55.016 --> 00:15:57.996 A:middle
There's a technique we can use

00:15:57.996 --> 00:15:59.576 A:middle
to better isolate these tests.

00:16:00.326 --> 00:16:01.496 A:middle
To use it, we first have to

00:16:01.496 --> 00:16:02.186 A:middle
recognize that

00:16:02.186 --> 00:16:03.576 A:middle
NotificationCenter can have

00:16:03.576 --> 00:16:04.646 A:middle
multiple instances.

00:16:05.516 --> 00:16:08.106 A:middle
As you may note, it has a

00:16:08.256 --> 00:16:09.526 A:middle
default instance as a class

00:16:09.526 --> 00:16:10.766 A:middle
property, but it supports

00:16:10.766 --> 00:16:12.106 A:middle
creating additional instances

00:16:12.106 --> 00:16:13.536 A:middle
whenever necessary, and this is

00:16:13.536 --> 00:16:14.936 A:middle
going to be key to isolating our

00:16:14.936 --> 00:16:15.516 A:middle
tests.

00:16:16.436 --> 00:16:18.036 A:middle
So, to apply this technique, we

00:16:18.036 --> 00:16:19.386 A:middle
first have to create a new

00:16:19.386 --> 00:16:21.376 A:middle
NotificationCenter, pass it to

00:16:21.376 --> 00:16:23.366 A:middle
our subject and use it instead

00:16:23.366 --> 00:16:24.376 A:middle
of the default instance.

00:16:25.156 --> 00:16:26.636 A:middle
This is often referred to as

00:16:26.636 --> 00:16:27.546 A:middle
dependency injection.

00:16:28.486 --> 00:16:29.716 A:middle
So, let's take a look at using

00:16:29.716 --> 00:16:30.546 A:middle
this in our view controller.

00:16:31.936 --> 00:16:33.256 A:middle
Here, I have the original code

00:16:33.256 --> 00:16:34.476 A:middle
that uses the default

00:16:34.476 --> 00:16:36.096 A:middle
NotificationCenter, and I'll

00:16:36.096 --> 00:16:37.456 A:middle
modify it to use a separate

00:16:37.456 --> 00:16:38.006 A:middle
instance.

00:16:38.476 --> 00:16:40.136 A:middle
I've added a new

00:16:40.136 --> 00:16:42.046 A:middle
NotificationCenter property and

00:16:42.046 --> 00:16:43.316 A:middle
a parameter in the initializer

00:16:43.316 --> 00:16:43.896 A:middle
that sets it.

00:16:44.796 --> 00:16:45.756 A:middle
And, instead of adding an

00:16:45.756 --> 00:16:47.446 A:middle
observer to the default center,

00:16:47.446 --> 00:16:51.626 A:middle
it uses this new property.

00:16:51.876 --> 00:16:53.046 A:middle
I'll also add a default

00:16:53.046 --> 00:16:55.076 A:middle
parameter value of .default to

00:16:55.076 --> 00:16:57.056 A:middle
the initializer, and this avoids

00:16:57.056 --> 00:16:58.656 A:middle
breaking any existing code in my

00:16:58.656 --> 00:17:00.526 A:middle
app, since existing clients

00:16:58.656 --> 00:17:00.526 A:middle
app, since existing clients

00:17:00.596 --> 00:17:01.486 A:middle
won't need to pass the new

00:17:01.486 --> 00:17:03.366 A:middle
parameter, only our unit tests

00:17:03.366 --> 00:17:03.556 A:middle
will.

00:17:05.096 --> 00:17:07.076 A:middle
Now let's go back and update our

00:17:07.076 --> 00:17:07.616 A:middle
tests.

00:17:08.906 --> 00:17:10.046 A:middle
Here's the original test code,

00:17:10.935 --> 00:17:12.786 A:middle
and now I've modified it to use

00:17:12.786 --> 00:17:14.165 A:middle
a separate NotificationCenter.

00:17:17.455 --> 00:17:19.366 A:middle
So, this shows how we can test

00:17:19.366 --> 00:17:20.606 A:middle
that our subject observes a

00:17:20.606 --> 00:17:22.906 A:middle
notification, but how do we test

00:17:22.906 --> 00:17:23.776 A:middle
that our subject posts a

00:17:23.776 --> 00:17:24.415 A:middle
notification?

00:17:25.536 --> 00:17:27.026 A:middle
We'll use the same separate

00:17:27.185 --> 00:17:28.916 A:middle
NotificationCenter trick again,

00:17:29.186 --> 00:17:30.346 A:middle
but I'll also show how to make

00:17:30.346 --> 00:17:32.366 A:middle
use of built-in expectation APIs

00:17:32.366 --> 00:17:33.776 A:middle
to add a notification observer.

00:17:35.666 --> 00:17:36.746 A:middle
So, here's another section of

00:17:36.746 --> 00:17:38.096 A:middle
code from our app, the

00:17:38.096 --> 00:17:39.686 A:middle
CurrentLocationProvider class.

00:17:40.536 --> 00:17:41.706 A:middle
I'll talk more about this class

00:17:41.706 --> 00:17:44.106 A:middle
later, but notice that it has

00:17:44.106 --> 00:17:45.246 A:middle
this method for signaling to

00:17:45.246 --> 00:17:47.066 A:middle
other classes in my app that the

00:17:47.066 --> 00:17:48.776 A:middle
app's location authorization has

00:17:48.776 --> 00:17:49.896 A:middle
changed by posting a

00:17:49.896 --> 00:17:50.566 A:middle
notification.

00:17:51.976 --> 00:17:53.286 A:middle
As with our view controller,

00:17:53.376 --> 00:17:54.726 A:middle
it's currently hardcoding the

00:17:54.726 --> 00:17:56.066 A:middle
default NotificationCenter.

00:17:56.646 --> 00:17:59.836 A:middle
And here's a unit test I wrote

00:17:59.836 --> 00:18:00.716 A:middle
for this class.

00:17:59.836 --> 00:18:00.716 A:middle
for this class.

00:18:01.076 --> 00:18:02.396 A:middle
It verifies that it posts a

00:18:02.396 --> 00:18:03.556 A:middle
notification whenever the

00:18:03.556 --> 00:18:05.116 A:middle
NotifyAuthChanged method is

00:18:05.116 --> 00:18:07.496 A:middle
called, and we can see in the

00:18:07.496 --> 00:18:08.926 A:middle
middle section here that this

00:18:08.926 --> 00:18:10.896 A:middle
test uses the addObserver method

00:18:10.896 --> 00:18:12.006 A:middle
to create a block-based

00:18:12.006 --> 00:18:13.546 A:middle
observer, and then it removes

00:18:13.546 --> 00:18:14.496 A:middle
that observer inside of the

00:18:14.496 --> 00:18:14.826 A:middle
block.

00:18:16.106 --> 00:18:17.256 A:middle
Now, one improvement that I can

00:18:17.256 --> 00:18:18.896 A:middle
make to this test is to use the

00:18:18.896 --> 00:18:19.396 A:middle
built-in

00:18:19.506 --> 00:18:22.416 A:middle
XCTNSNotificationExpectation API

00:18:22.476 --> 00:18:23.936 A:middle
to handle creating this

00:18:24.056 --> 00:18:25.856 A:middle
NotificationCenter observer for

00:18:25.856 --> 00:18:26.126 A:middle
us.

00:18:26.646 --> 00:18:28.666 A:middle
And this is a nice improvement,

00:18:28.666 --> 00:18:30.336 A:middle
and it allows us to delete

00:18:30.336 --> 00:18:31.356 A:middle
several lines of code.

00:18:32.756 --> 00:18:33.896 A:middle
But it still has the problem we

00:18:33.896 --> 00:18:35.506 A:middle
saw before of using the default

00:18:35.506 --> 00:18:37.216 A:middle
NotificationCenter implicitly,

00:18:37.476 --> 00:18:39.966 A:middle
so let's go fix that.

00:18:40.156 --> 00:18:42.666 A:middle
Here's our original code, and

00:18:42.666 --> 00:18:43.966 A:middle
I'll apply the same technique we

00:18:43.966 --> 00:18:45.646 A:middle
saw earlier of taking a separate

00:18:45.646 --> 00:18:46.856 A:middle
NotificationCenter in our

00:18:46.856 --> 00:18:49.076 A:middle
initializer, storing it, and

00:18:49.076 --> 00:18:50.456 A:middle
using it instead of the default.

00:18:50.546 --> 00:18:55.036 A:middle
Going back to our test code now,

00:18:56.086 --> 00:18:57.596 A:middle
I'll modify it to pass a new

00:18:57.596 --> 00:18:58.696 A:middle
NotificationCenter to our

00:18:58.696 --> 00:19:01.186 A:middle
subject, but take a look at the

00:18:58.696 --> 00:19:01.186 A:middle
subject, but take a look at the

00:19:01.186 --> 00:19:02.146 A:middle
expectation now.

00:19:03.366 --> 00:19:04.586 A:middle
When our tests are expecting to

00:19:04.586 --> 00:19:06.196 A:middle
receive a notification to a

00:19:06.196 --> 00:19:08.436 A:middle
specific center, we can pass the

00:19:08.436 --> 00:19:10.156 A:middle
NotificationCenter parameter to

00:19:10.156 --> 00:19:10.956 A:middle
the initializer of the

00:19:10.956 --> 00:19:11.656 A:middle
expectation.

00:19:13.426 --> 00:19:15.576 A:middle
I'd also like to point out that

00:19:15.576 --> 00:19:18.086 A:middle
the timeout of this expectation

00:19:18.086 --> 00:19:19.736 A:middle
is 0, and that's because we

00:19:19.736 --> 00:19:21.006 A:middle
actually expect it to already

00:19:21.006 --> 00:19:22.306 A:middle
have been fulfilled by the time

00:19:22.306 --> 00:19:22.806 A:middle
we wait on it.

00:19:23.896 --> 00:19:25.216 A:middle
That's because the notification

00:19:25.216 --> 00:19:26.446 A:middle
should have already been posted

00:19:26.526 --> 00:19:27.236 A:middle
by the time the

00:19:27.236 --> 00:19:28.616 A:middle
NotifyAuthChanged method

00:19:28.616 --> 00:19:29.216 A:middle
returns.

00:19:30.356 --> 00:19:31.946 A:middle
So, using this pair of

00:19:31.946 --> 00:19:32.846 A:middle
techniques for testing

00:19:32.846 --> 00:19:34.746 A:middle
notifications we can ensure that

00:19:34.746 --> 00:19:35.756 A:middle
our tests remained fully

00:19:35.756 --> 00:19:37.856 A:middle
isolated, and we've made the

00:19:37.856 --> 00:19:39.426 A:middle
change without needing to modify

00:19:39.426 --> 00:19:40.616 A:middle
an existing code in our app,

00:19:40.956 --> 00:19:42.346 A:middle
since we specified that default

00:19:42.416 --> 00:19:46.976 A:middle
parameter value.

00:19:47.926 --> 00:19:49.216 A:middle
So, next, I'd like to talk about

00:19:49.216 --> 00:19:50.456 A:middle
a frequent challenge when

00:19:50.456 --> 00:19:52.466 A:middle
writing unit tests, interacting

00:19:52.466 --> 00:19:53.666 A:middle
with external classes.

00:19:55.566 --> 00:19:57.036 A:middle
So, while developing your app,

00:19:57.386 --> 00:19:58.376 A:middle
you've probably run into

00:19:58.376 --> 00:20:00.546 A:middle
situations where your class is

00:19:58.376 --> 00:20:00.546 A:middle
situations where your class is

00:20:00.546 --> 00:20:02.386 A:middle
talking to another class, either

00:20:02.386 --> 00:20:03.856 A:middle
elsewhere in your app or

00:20:03.856 --> 00:20:04.936 A:middle
provided by the SDK.

00:20:05.676 --> 00:20:07.316 A:middle
And you found it difficult to

00:20:07.316 --> 00:20:09.446 A:middle
write a test, because it's hard

00:20:09.446 --> 00:20:10.926 A:middle
or even impossible to create

00:20:10.926 --> 00:20:11.986 A:middle
that external class.

00:20:12.906 --> 00:20:14.546 A:middle
This happens a lot, especially

00:20:14.546 --> 00:20:16.076 A:middle
with APIs that aren't designed

00:20:16.076 --> 00:20:17.996 A:middle
to be created directly, and it's

00:20:17.996 --> 00:20:19.606 A:middle
even harder when those APIs have

00:20:19.956 --> 00:20:21.066 A:middle
delegate methods that you need

00:20:21.986 --> 00:20:22.846 A:middle
to test.

00:20:22.846 --> 00:20:24.056 A:middle
I'd like to show how we can use

00:20:24.136 --> 00:20:25.636 A:middle
protocols to solve this problem

00:20:26.026 --> 00:20:27.536 A:middle
by mocking interaction with

00:20:27.536 --> 00:20:29.566 A:middle
external classes but do so

00:20:29.636 --> 00:20:31.246 A:middle
without making our tests less

00:20:31.246 --> 00:20:31.686 A:middle
reliable.

00:20:33.856 --> 00:20:35.546 A:middle
In our app, we have a

00:20:35.686 --> 00:20:37.236 A:middle
CurrentLocationProvider class

00:20:37.236 --> 00:20:38.736 A:middle
that uses CoreLocation.

00:20:39.876 --> 00:20:41.546 A:middle
It creates a CLLocationManager

00:20:41.716 --> 00:20:42.776 A:middle
and configures it in its

00:20:42.776 --> 00:20:44.876 A:middle
initializer, setting its desired

00:20:44.876 --> 00:20:46.446 A:middle
accuracy property and setting

00:20:46.446 --> 00:20:47.356 A:middle
itself as the delegate.

00:20:47.816 --> 00:20:51.196 A:middle
Here's the meat of this class.

00:20:51.506 --> 00:20:52.206 A:middle
It's a method called

00:20:52.206 --> 00:20:53.456 A:middle
checkCurrentLocation.

00:20:54.196 --> 00:20:55.586 A:middle
It requests the current location

00:20:55.706 --> 00:20:56.926 A:middle
and takes a completion block

00:20:56.926 --> 00:20:58.006 A:middle
that returns whether that

00:20:58.006 --> 00:20:59.506 A:middle
location is a point of interest.

00:21:00.426 --> 00:21:01.836 A:middle
So, notice that we're calling

00:21:01.836 --> 00:21:03.456 A:middle
the request location method on

00:21:03.516 --> 00:21:04.716 A:middle
CLLocationManager, here.

00:21:04.716 --> 00:21:07.666 A:middle
When we call this, it'll attempt

00:21:07.666 --> 00:21:09.396 A:middle
to get the current location and

00:21:09.396 --> 00:21:10.556 A:middle
eventually call a delegate

00:21:10.556 --> 00:21:11.536 A:middle
method on our class.

00:21:12.156 --> 00:21:14.106 A:middle
So, let's go look at that

00:21:14.776 --> 00:21:15.186 A:middle
delegate method.

00:21:15.366 --> 00:21:16.946 A:middle
We use an extension to conform

00:21:16.946 --> 00:21:18.756 A:middle
to the CLLocationManagerDelegate

00:21:18.756 --> 00:21:20.256 A:middle
protocol here, and we call a

00:21:20.256 --> 00:21:21.416 A:middle
stored completion block.

00:21:22.486 --> 00:21:23.966 A:middle
Okay, so let's try writing a

00:21:23.966 --> 00:21:26.636 A:middle
unit test for this class.

00:21:26.806 --> 00:21:27.766 A:middle
Here's one that I tried to

00:21:27.766 --> 00:21:29.016 A:middle
write, and, if we read through

00:21:29.016 --> 00:21:30.886 A:middle
it, we can see that it starts by

00:21:30.886 --> 00:21:31.616 A:middle
creating a

00:21:31.616 --> 00:21:33.776 A:middle
CurrentLocationProvider and

00:21:33.776 --> 00:21:35.486 A:middle
checks that the desired accuracy

00:21:35.486 --> 00:21:37.006 A:middle
and whether the delegate is set.

00:21:37.506 --> 00:21:38.166 A:middle
So far, so good.

00:21:39.206 --> 00:21:40.466 A:middle
But then things get tricky.

00:21:41.356 --> 00:21:42.276 A:middle
We want to check the

00:21:42.276 --> 00:21:43.686 A:middle
checkCurrentLocation method,

00:21:44.136 --> 00:21:45.066 A:middle
since that's where our main

00:21:45.066 --> 00:21:47.036 A:middle
logic lives, but we have a

00:21:47.036 --> 00:21:47.466 A:middle
problem.

00:21:48.236 --> 00:21:49.656 A:middle
We don't have a way to know when

00:21:49.656 --> 00:21:51.136 A:middle
the request location method is

00:21:51.136 --> 00:21:52.976 A:middle
called, since that's a method on

00:21:53.076 --> 00:21:55.456 A:middle
CLLocationManager and not part

00:21:56.276 --> 00:21:57.396 A:middle
our code.

00:21:57.606 --> 00:21:58.486 A:middle
Another problem that we're

00:21:58.486 --> 00:21:59.856 A:middle
likely to encounter in this test

00:22:00.316 --> 00:22:02.006 A:middle
is that CoreLocation requires

00:22:02.006 --> 00:22:04.046 A:middle
user authorization, and that

00:22:04.046 --> 00:22:05.376 A:middle
shows a permission dialog on the

00:22:05.376 --> 00:22:06.846 A:middle
device if it hasn't been granted

00:22:06.846 --> 00:22:07.186 A:middle
before.

00:22:08.396 --> 00:22:10.016 A:middle
This causes our tests to rely on

00:22:10.016 --> 00:22:10.656 A:middle
device state.

00:22:10.656 --> 00:22:12.196 A:middle
It makes them harder to maintain

00:22:12.196 --> 00:22:13.636 A:middle
and, ultimately, more likely to

00:22:13.636 --> 00:22:13.976 A:middle
fail.

00:22:13.976 --> 00:22:16.826 A:middle
So, if you've had this problem

00:22:16.826 --> 00:22:19.136 A:middle
in the past, you may have

00:22:19.136 --> 00:22:20.496 A:middle
considered subclassing the

00:22:20.496 --> 00:22:22.476 A:middle
external class and overriding

00:22:22.476 --> 00:22:24.776 A:middle
any methods that you call on it.

00:22:24.856 --> 00:22:26.416 A:middle
For example, we could try

00:22:26.416 --> 00:22:28.496 A:middle
subclassing CLLocationManager

00:22:28.496 --> 00:22:29.996 A:middle
here and overriding the

00:22:29.996 --> 00:22:31.176 A:middle
RequestLocation method.

00:22:32.116 --> 00:22:34.016 A:middle
And that may work at first, but

00:22:34.016 --> 00:22:34.496 A:middle
it's risky.

00:22:35.626 --> 00:22:37.256 A:middle
Some classes from the SDK aren't

00:22:37.256 --> 00:22:38.766 A:middle
designed to be subclassed and

00:22:38.766 --> 00:22:39.566 A:middle
may behave differently.

00:22:40.706 --> 00:22:42.036 A:middle
Plus, we still have to call the

00:22:42.036 --> 00:22:43.496 A:middle
superclass' initializer, and

00:22:43.706 --> 00:22:44.746 A:middle
that's not code that we can

00:22:44.746 --> 00:22:45.166 A:middle
override.

00:22:46.296 --> 00:22:47.956 A:middle
But the main problem is that, if

00:22:47.956 --> 00:22:49.656 A:middle
I ever modify my code to call

00:22:49.656 --> 00:22:50.446 A:middle
another method on

00:22:50.546 --> 00:22:52.666 A:middle
CLLocationManager, I'll have to

00:22:52.666 --> 00:22:54.226 A:middle
remember to override that method

00:22:54.226 --> 00:22:55.956 A:middle
on my testing subclass as well.

00:22:57.086 --> 00:22:58.686 A:middle
If I rely on subclassing, the

00:22:58.686 --> 00:23:00.246 A:middle
compiler won't notify me that

00:22:58.686 --> 00:23:00.246 A:middle
compiler won't notify me that

00:23:00.246 --> 00:23:01.836 A:middle
I've started calling another

00:23:01.836 --> 00:23:03.466 A:middle
method, and it's easy to forget

00:23:03.466 --> 00:23:04.446 A:middle
and break my tests.

00:23:05.536 --> 00:23:06.666 A:middle
So, I don't recommend this

00:23:06.666 --> 00:23:09.116 A:middle
method, and instead to mock

00:23:09.116 --> 00:23:10.866 A:middle
external types using protocols.

00:23:11.556 --> 00:23:13.416 A:middle
So, let's walk through how to do

00:23:14.256 --> 00:23:14.366 A:middle
that.

00:23:14.566 --> 00:23:16.446 A:middle
Here's the original code, and

00:23:16.446 --> 00:23:18.196 A:middle
the first step is to define a

00:23:18.196 --> 00:23:18.766 A:middle
new protocol.

00:23:19.376 --> 00:23:21.396 A:middle
I've named my new protocol

00:23:21.396 --> 00:23:23.586 A:middle
LocationFetcher, and it includes

00:23:23.586 --> 00:23:25.076 A:middle
the exact set of methods and

00:23:25.076 --> 00:23:26.686 A:middle
properties that my code uses

00:23:26.686 --> 00:23:27.816 A:middle
from CLLocationManager.

00:23:29.036 --> 00:23:31.236 A:middle
The member names and types match

00:23:31.236 --> 00:23:32.976 A:middle
exactly, and that allows me to

00:23:32.976 --> 00:23:34.826 A:middle
create an empty extension on

00:23:34.976 --> 00:23:36.556 A:middle
CLLocationManager that conforms

00:23:36.556 --> 00:23:37.746 A:middle
to the protocol, since it

00:23:37.746 --> 00:23:38.456 A:middle
already meets all the

00:23:38.456 --> 00:23:39.096 A:middle
requirements.

00:23:41.056 --> 00:23:42.266 A:middle
I'll then rename the

00:23:42.266 --> 00:23:43.796 A:middle
LocationManager property to

00:23:43.796 --> 00:23:45.556 A:middle
LocationFetcher, and I'll change

00:23:45.556 --> 00:23:47.086 A:middle
its type to the LocationFetcher

00:23:47.086 --> 00:23:47.496 A:middle
protocol.

00:23:49.416 --> 00:23:51.056 A:middle
I'll also add a default

00:23:51.056 --> 00:23:51.956 A:middle
parameter value to the

00:23:51.956 --> 00:23:53.236 A:middle
initializer, just like I did

00:23:53.236 --> 00:23:54.946 A:middle
earlier, to avoid breaking any

00:23:54.946 --> 00:23:56.446 A:middle
existing app code.

00:23:58.176 --> 00:23:59.956 A:middle
I need to make one small change

00:23:59.956 --> 00:24:01.146 A:middle
to the checkCurrentLocation

00:23:59.956 --> 00:24:01.146 A:middle
to the checkCurrentLocation

00:24:01.146 --> 00:24:02.776 A:middle
method to use the renamed

00:24:02.826 --> 00:24:03.176 A:middle
property.

00:24:03.946 --> 00:24:06.596 A:middle
And, finally, let's look at that

00:24:06.636 --> 00:24:07.266 A:middle
delegate method.

00:24:08.246 --> 00:24:09.336 A:middle
This part is a little trickier

00:24:09.336 --> 00:24:11.046 A:middle
to handle, because the delegate

00:24:11.046 --> 00:24:12.816 A:middle
expects the manager parameter to

00:24:12.866 --> 00:24:15.376 A:middle
be a real CLLocationManager, and

00:24:15.376 --> 00:24:16.356 A:middle
not my new protocol.

00:24:16.986 --> 00:24:18.716 A:middle
So, things get a little more

00:24:18.716 --> 00:24:19.976 A:middle
complicated when delegates are

00:24:19.976 --> 00:24:21.866 A:middle
involved, but we can still apply

00:24:21.866 --> 00:24:22.606 A:middle
protocols here.

00:24:23.156 --> 00:24:25.716 A:middle
Let's take a look at how.

00:24:26.326 --> 00:24:27.976 A:middle
I'll go back to LocationFetcher

00:24:28.126 --> 00:24:29.436 A:middle
protocol that I defined earlier,

00:24:30.226 --> 00:24:31.456 A:middle
and I'll rename that delegate

00:24:31.586 --> 00:24:32.346 A:middle
property to

00:24:32.546 --> 00:24:33.886 A:middle
LocationFetcherDelegate.

00:24:34.666 --> 00:24:35.896 A:middle
And I'll change its type to a

00:24:35.896 --> 00:24:37.676 A:middle
new protocol whose interface is

00:24:37.676 --> 00:24:38.786 A:middle
nearly identical to

00:24:38.886 --> 00:24:41.226 A:middle
CLLocationManagerDelegate, but I

00:24:41.226 --> 00:24:42.826 A:middle
tweaked the method name, and I

00:24:42.826 --> 00:24:44.016 A:middle
changed the type of the first

00:24:44.016 --> 00:24:45.456 A:middle
parameter to LocationFetcher.

00:24:49.406 --> 00:24:50.486 A:middle
Now I need to implement the

00:24:50.486 --> 00:24:52.086 A:middle
LocationFetcherDelegate property

00:24:52.196 --> 00:24:54.436 A:middle
in my extension now, since it no

00:24:54.436 --> 00:24:55.446 A:middle
longer satisfies that

00:24:55.446 --> 00:24:55.876 A:middle
requirement.

00:24:56.796 --> 00:24:58.076 A:middle
And I'll implement the getter

00:24:58.076 --> 00:24:59.456 A:middle
and the setter to use force

00:24:59.456 --> 00:25:00.846 A:middle
casting to convert back and

00:24:59.456 --> 00:25:00.846 A:middle
casting to convert back and

00:25:00.846 --> 00:25:01.266 A:middle
forth to

00:25:01.266 --> 00:25:03.776 A:middle
CLLocationManagerDelegate, and

00:25:03.776 --> 00:25:04.826 A:middle
I'll explain why I'm using force

00:25:04.826 --> 00:25:08.146 A:middle
casting here in just a second.

00:25:08.266 --> 00:25:09.996 A:middle
Then in my class' initializer, I

00:25:09.996 --> 00:25:10.936 A:middle
need to replace the delegate

00:25:10.936 --> 00:25:11.596 A:middle
property with

00:25:11.596 --> 00:25:12.666 A:middle
locationFetcherDelegate.

00:25:13.156 --> 00:25:16.466 A:middle
And the last step is to change

00:25:16.466 --> 00:25:18.176 A:middle
the original extension to

00:25:18.176 --> 00:25:19.626 A:middle
conform to the new mock delegate

00:25:19.626 --> 00:25:21.556 A:middle
protocol, and that part's easy--

00:25:21.766 --> 00:25:23.156 A:middle
all I need to do is replace the

00:25:23.156 --> 00:25:24.976 A:middle
protocol and the method

00:25:24.976 --> 00:25:25.396 A:middle
signature.

00:25:26.576 --> 00:25:28.206 A:middle
But I actually still need to

00:25:28.206 --> 00:25:29.236 A:middle
conform to the old

00:25:29.376 --> 00:25:30.856 A:middle
CLLocationManagerDelegate

00:25:30.856 --> 00:25:33.086 A:middle
protocol too, and that's because

00:25:33.176 --> 00:25:34.656 A:middle
the real CLLocationManager

00:25:34.656 --> 00:25:35.996 A:middle
doesn't know about my mock

00:25:35.996 --> 00:25:36.716 A:middle
delegate protocol.

00:25:38.266 --> 00:25:39.796 A:middle
So, the trick here is to add

00:25:39.796 --> 00:25:41.106 A:middle
back the extension which

00:25:41.106 --> 00:25:42.376 A:middle
conforms to the real delegate

00:25:42.376 --> 00:25:43.926 A:middle
protocol but have it call the

00:25:43.926 --> 00:25:45.276 A:middle
equivalent locationFetcher

00:25:45.276 --> 00:25:46.326 A:middle
delegate method above.

00:25:47.716 --> 00:25:49.296 A:middle
And earlier, I mentioned that I

00:25:49.296 --> 00:25:50.516 A:middle
used force casting in the

00:25:50.516 --> 00:25:52.016 A:middle
delegate getter and setter, and

00:25:52.466 --> 00:25:53.756 A:middle
that's to ensure that my class

00:25:53.756 --> 00:25:54.846 A:middle
conforms to both of these

00:25:54.846 --> 00:25:56.166 A:middle
protocols and that I haven't

00:25:56.166 --> 00:26:01.336 A:middle
forgotten one or the other.

00:25:56.166 --> 00:26:01.336 A:middle
forgotten one or the other.

00:26:01.586 --> 00:26:03.376 A:middle
So, over in my unit tests, I'll

00:26:03.376 --> 00:26:05.046 A:middle
define a struct nested in my

00:26:05.046 --> 00:26:06.986 A:middle
test class for mocking, which

00:26:06.986 --> 00:26:08.366 A:middle
conforms to the locationFetcher

00:26:08.366 --> 00:26:09.696 A:middle
protocol and fill out its

00:26:09.696 --> 00:26:10.326 A:middle
requirements.

00:26:11.566 --> 00:26:12.846 A:middle
Notice, in its RequestLocation

00:26:12.846 --> 00:26:14.886 A:middle
method, it calls a block to get

00:26:14.886 --> 00:26:16.136 A:middle
a fake location that I can

00:26:16.136 --> 00:26:18.536 A:middle
customize in my tests, and then

00:26:18.536 --> 00:26:19.786 A:middle
it invokes the delegate method,

00:26:20.066 --> 00:26:21.416 A:middle
passing it that fake location.

00:26:22.026 --> 00:26:25.656 A:middle
Now that I have all the pieces I

00:26:25.656 --> 00:26:27.056 A:middle
need, I can write my test.

00:26:28.026 --> 00:26:29.516 A:middle
I create a MockLocationFetcher

00:26:29.516 --> 00:26:31.016 A:middle
struct and configure its

00:26:31.016 --> 00:26:32.676 A:middle
handleRequestLocation block to

00:26:32.676 --> 00:26:33.966 A:middle
provide a fake location.

00:26:35.306 --> 00:26:36.036 A:middle
Then I create my

00:26:36.036 --> 00:26:38.036 A:middle
CurrentLocationProvider, passing

00:26:38.036 --> 00:26:39.286 A:middle
it the MockLocationFetcher.

00:26:40.206 --> 00:26:41.156 A:middle
And, finally, I call

00:26:41.156 --> 00:26:42.676 A:middle
checkCurrentLocation with a

00:26:42.676 --> 00:26:43.366 A:middle
completion block.

00:26:44.286 --> 00:26:45.376 A:middle
Inside the completion block,

00:26:45.676 --> 00:26:46.806 A:middle
there's an assertion that checks

00:26:46.806 --> 00:26:48.076 A:middle
that the location actually is a

00:26:48.076 --> 00:26:51.156 A:middle
point of interest.

00:26:51.226 --> 00:26:51.976 A:middle
So, it works.

00:26:51.976 --> 00:26:53.666 A:middle
I can now mock my classes' usage

00:26:53.666 --> 00:26:55.426 A:middle
of CLLocationManager without

00:26:55.426 --> 00:26:56.536 A:middle
needing to create a real one.

00:26:57.246 --> 00:26:59.276 A:middle
So, here, I've shown how to use

00:26:59.396 --> 00:27:01.346 A:middle
protocols to mock interaction

00:26:59.396 --> 00:27:01.346 A:middle
protocols to mock interaction

00:27:01.346 --> 00:27:03.096 A:middle
with an external class and its

00:27:03.096 --> 00:27:03.476 A:middle
delegate.

00:27:03.476 --> 00:27:05.296 A:middle
Now, that was a lot of steps.

00:27:05.366 --> 00:27:07.756 A:middle
So, let's recap what we did.

00:27:08.856 --> 00:27:10.226 A:middle
First, we defined a new

00:27:10.226 --> 00:27:11.476 A:middle
protocol, representing the

00:27:11.476 --> 00:27:13.406 A:middle
interface of the external class.

00:27:14.356 --> 00:27:15.896 A:middle
This protocol needs to include

00:27:15.896 --> 00:27:17.156 A:middle
all the methods and properties

00:27:17.276 --> 00:27:18.636 A:middle
that we use on the external

00:27:18.636 --> 00:27:20.196 A:middle
class, and, often, their

00:27:20.196 --> 00:27:22.006 A:middle
declarations can match exactly.

00:27:22.666 --> 00:27:25.746 A:middle
Next, we created an extension on

00:27:25.746 --> 00:27:27.056 A:middle
the original external class,

00:27:27.216 --> 00:27:28.326 A:middle
which declares conformance to

00:27:28.326 --> 00:27:28.836 A:middle
the protocol.

00:27:30.176 --> 00:27:31.826 A:middle
Then we replaced all our usage

00:27:31.956 --> 00:27:33.336 A:middle
of the external class with our

00:27:33.336 --> 00:27:35.516 A:middle
new protocol, and we added an

00:27:35.516 --> 00:27:36.946 A:middle
initializer parameter so that we

00:27:36.946 --> 00:27:39.196 A:middle
could set this type in our

00:27:40.776 --> 00:27:40.946 A:middle
tests.

00:27:41.096 --> 00:27:42.706 A:middle
We also talked about how to mock

00:27:42.706 --> 00:27:44.206 A:middle
a delegate protocol, which is a

00:27:44.206 --> 00:27:45.656 A:middle
common pattern in the SDKs.

00:27:46.966 --> 00:27:47.856 A:middle
There were a few more steps

00:27:47.856 --> 00:27:49.076 A:middle
involved here, but here's what

00:27:49.076 --> 00:27:49.446 A:middle
we did.

00:27:50.966 --> 00:27:52.486 A:middle
First, we defined a mock

00:27:52.596 --> 00:27:54.146 A:middle
delegate protocol with similar

00:27:54.146 --> 00:27:55.366 A:middle
method signatures as the

00:27:55.366 --> 00:27:56.336 A:middle
protocol that we're mocking.

00:27:57.136 --> 00:27:58.986 A:middle
But we replaced the real type

00:27:59.236 --> 00:28:01.146 A:middle
with our mock protocol type.

00:27:59.236 --> 00:28:01.146 A:middle
with our mock protocol type.

00:28:01.756 --> 00:28:03.296 A:middle
Then, in our original mock

00:28:03.296 --> 00:28:04.616 A:middle
protocol, we renamed the

00:28:04.616 --> 00:28:06.256 A:middle
delegate property, and we

00:28:06.256 --> 00:28:07.046 A:middle
implemented that renamed

00:28:07.086 --> 00:28:08.136 A:middle
property on our extension.

00:28:09.566 --> 00:28:12.076 A:middle
So, although this approach may

00:28:12.076 --> 00:28:13.306 A:middle
require more code than an

00:28:13.306 --> 00:28:14.846 A:middle
alternative like subclassing,

00:28:15.546 --> 00:28:17.156 A:middle
it'll be more reliable and less

00:28:17.156 --> 00:28:18.496 A:middle
likely to break as I expand my

00:28:18.496 --> 00:28:21.006 A:middle
code over time, since this way

00:28:21.006 --> 00:28:22.326 A:middle
the compiler will enforce that

00:28:22.436 --> 00:28:24.526 A:middle
any new methods I call for my

00:28:24.526 --> 00:28:26.246 A:middle
code must be included in these

00:28:26.246 --> 00:28:27.000 A:middle
new protocols.

00:28:32.006 --> 00:28:33.836 A:middle
So, finally, I'd like to talk

00:28:33.836 --> 00:28:35.516 A:middle
about test execution speed.

00:28:35.956 --> 00:28:39.436 A:middle
When your tests take a long time

00:28:39.436 --> 00:28:41.206 A:middle
to run, you're less likely to

00:28:41.206 --> 00:28:42.916 A:middle
run them during development, or

00:28:42.916 --> 00:28:44.116 A:middle
you might be tempted to skip the

00:28:44.116 --> 00:28:45.036 A:middle
longest running ones.

00:28:45.486 --> 00:28:47.616 A:middle
Our test suite helps us catch

00:28:47.616 --> 00:28:49.166 A:middle
issues early, when fixing

00:28:49.166 --> 00:28:50.286 A:middle
regression is easiest.

00:28:50.736 --> 00:28:51.516 A:middle
So, we want to make sure our

00:28:51.516 --> 00:28:53.036 A:middle
tests always run as fast as

00:28:53.036 --> 00:28:53.526 A:middle
possible.

00:28:54.196 --> 00:28:55.826 A:middle
Now, you might have encountered

00:28:55.826 --> 00:28:57.176 A:middle
times in the past when you

00:28:57.176 --> 00:28:58.626 A:middle
needed to artificially wait or

00:28:58.626 --> 00:29:00.406 A:middle
sleep in your tests, because the

00:28:58.626 --> 00:29:00.406 A:middle
sleep in your tests, because the

00:29:00.406 --> 00:29:01.686 A:middle
code your testing is

00:29:01.686 --> 00:29:03.166 A:middle
asynchronous or uses a timer.

00:29:04.416 --> 00:29:05.886 A:middle
Delayed actions can be tricky,

00:29:05.886 --> 00:29:06.996 A:middle
so we want to be sure to include

00:29:06.996 --> 00:29:08.576 A:middle
them in our tests, but they can

00:29:08.886 --> 00:29:10.246 A:middle
also slow things down a lot if

00:29:10.246 --> 00:29:10.786 A:middle
we're not careful.

00:29:11.856 --> 00:29:13.066 A:middle
So, I'd like to talk about some

00:29:13.066 --> 00:29:13.936 A:middle
ways that we can avoid

00:29:13.936 --> 00:29:15.526 A:middle
artificial delays in our tests,

00:29:15.806 --> 00:29:16.506 A:middle
since they should never be

00:29:16.506 --> 00:29:17.036 A:middle
necessary.

00:29:17.636 --> 00:29:19.896 A:middle
Here's an example.

00:29:19.956 --> 00:29:21.946 A:middle
In the points of interest app

00:29:21.946 --> 00:29:23.526 A:middle
Brian and I are building, in the

00:29:23.526 --> 00:29:25.116 A:middle
main UI, we have a strip at the

00:29:25.116 --> 00:29:26.506 A:middle
bottom that shows the featured

00:29:26.506 --> 00:29:26.936 A:middle
place.

00:29:27.546 --> 00:29:28.606 A:middle
It basically loops through the

00:29:28.606 --> 00:29:30.706 A:middle
top places nearby, rotating to

00:29:30.706 --> 00:29:32.136 A:middle
show a new location every 10

00:29:32.136 --> 00:29:32.666 A:middle
seconds.

00:29:33.446 --> 00:29:34.906 A:middle
Now, there are several ways I

00:29:34.906 --> 00:29:36.426 A:middle
might implement this, but, here,

00:29:36.426 --> 00:29:37.996 A:middle
I'm using the timer API for

00:29:37.996 --> 00:29:38.616 A:middle
foundation.

00:29:38.616 --> 00:29:42.106 A:middle
Let's look at a unit test that I

00:29:42.106 --> 00:29:43.076 A:middle
might write for this class.

00:29:44.106 --> 00:29:44.696 A:middle
It creates a

00:29:44.696 --> 00:29:46.996 A:middle
FeaturedPlaceManager and stores

00:29:46.996 --> 00:29:49.186 A:middle
its current place before calling

00:29:49.226 --> 00:29:50.636 A:middle
the scheduleNextPlace method.

00:29:51.526 --> 00:29:53.376 A:middle
Then it runs the run loop for 11

00:29:53.376 --> 00:29:53.926 A:middle
seconds.

00:29:53.976 --> 00:29:55.676 A:middle
I added an extra second as a

00:29:55.676 --> 00:29:56.226 A:middle
grace period.

00:29:57.416 --> 00:29:58.456 A:middle
And, finally, it checks that the

00:29:58.456 --> 00:29:59.916 A:middle
currentPlace changed at the end.

00:30:01.046 --> 00:30:02.486 A:middle
Now, this isn't great, and it

00:30:02.486 --> 00:30:03.876 A:middle
takes a really long time to run.

00:30:05.026 --> 00:30:06.396 A:middle
To mitigate this, we could

00:30:06.396 --> 00:30:08.386 A:middle
expose a property in our code to

00:30:08.386 --> 00:30:09.736 A:middle
allow us to customize that

00:30:09.736 --> 00:30:10.976 A:middle
timeout to something shorter,

00:30:10.976 --> 00:30:12.056 A:middle
like 1 second.

00:30:12.976 --> 00:30:14.476 A:middle
And here's what that kind of a

00:30:14.476 --> 00:30:16.000 A:middle
code change might look like.

00:30:20.136 --> 00:30:22.026 A:middle
Now, with this approach, we can

00:30:22.026 --> 00:30:23.456 A:middle
reduce the delay in our tests

00:30:23.456 --> 00:30:24.326 A:middle
down to one second.

00:30:25.406 --> 00:30:26.566 A:middle
Now, this solution is better

00:30:26.566 --> 00:30:27.566 A:middle
than the one we had before.

00:30:27.876 --> 00:30:29.166 A:middle
Our tests will definitely run

00:30:29.166 --> 00:30:31.196 A:middle
faster, but it still isn't

00:30:31.196 --> 00:30:31.686 A:middle
ideal.

00:30:32.396 --> 00:30:34.216 A:middle
Our code still has a delay, it's

00:30:34.216 --> 00:30:34.726 A:middle
just shorter.

00:30:35.716 --> 00:30:36.996 A:middle
And the real problem is that the

00:30:36.996 --> 00:30:38.276 A:middle
code we're testing is still

00:30:38.346 --> 00:30:40.236 A:middle
timing dependent, which means

00:30:40.236 --> 00:30:41.576 A:middle
that, as we make the expected

00:30:41.576 --> 00:30:43.316 A:middle
delay shorter and shorter, our

00:30:43.316 --> 00:30:44.926 A:middle
tests may become less reliable,

00:30:45.376 --> 00:30:46.356 A:middle
since they'll be more dependent

00:30:46.356 --> 00:30:47.816 A:middle
on the CPU to schedule things

00:30:47.816 --> 00:30:48.376 A:middle
predictably.

00:30:48.556 --> 00:30:50.006 A:middle
And that's not always going to

00:30:50.006 --> 00:30:50.776 A:middle
be true, especially for

00:30:50.776 --> 00:30:51.686 A:middle
asynchronous code.

00:30:52.896 --> 00:30:53.866 A:middle
So, let's take a look at a

00:30:53.866 --> 00:30:54.606 A:middle
better approach.

00:30:56.296 --> 00:30:58.466 A:middle
I recommend first identifying

00:30:58.556 --> 00:30:59.606 A:middle
the delay mechanism.

00:31:00.156 --> 00:31:01.716 A:middle
In my example, it was a timer,

00:31:01.716 --> 00:31:03.466 A:middle
but you could also be using the

00:31:03.466 --> 00:31:04.826 A:middle
asyncAfter API from

00:31:04.826 --> 00:31:05.526 A:middle
DispatchQueue.

00:31:06.906 --> 00:31:08.256 A:middle
We want to mock this mechanism

00:31:08.256 --> 00:31:09.676 A:middle
in our tests so that we can

00:31:09.676 --> 00:31:10.806 A:middle
invoke the delayed action

00:31:10.806 --> 00:31:12.116 A:middle
immediately and bypass the

00:31:12.116 --> 00:31:12.406 A:middle
delay.

00:31:15.756 --> 00:31:17.356 A:middle
Here's our original code again,

00:31:17.856 --> 00:31:18.966 A:middle
and let's start by looking at

00:31:18.966 --> 00:31:20.496 A:middle
what this scheduledTimer method

00:31:20.496 --> 00:31:21.286 A:middle
actually does.

00:31:22.556 --> 00:31:23.776 A:middle
The scheduledTimer method

00:31:23.776 --> 00:31:25.586 A:middle
actually does two things for us.

00:31:26.306 --> 00:31:28.216 A:middle
It creates a timer, and then it

00:31:28.216 --> 00:31:29.756 A:middle
adds that timer to the current

00:31:29.756 --> 00:31:30.916 A:middle
run loop.

00:31:31.196 --> 00:31:32.326 A:middle
Now, this API can be really

00:31:32.326 --> 00:31:34.116 A:middle
convenient for creating a timer,

00:31:34.716 --> 00:31:35.526 A:middle
but it would help us to make

00:31:35.526 --> 00:31:36.816 A:middle
this code more testable if I

00:31:36.816 --> 00:31:38.016 A:middle
actually break these two steps

00:31:38.016 --> 00:31:38.386 A:middle
apart.

00:31:40.316 --> 00:31:41.756 A:middle
Here, I've transformed the

00:31:41.756 --> 00:31:43.056 A:middle
previous code from using

00:31:43.056 --> 00:31:45.056 A:middle
scheduledTimer to instead create

00:31:45.056 --> 00:31:46.906 A:middle
the timer first and then add it

00:31:46.936 --> 00:31:48.516 A:middle
to the current runLoop second,

00:31:48.516 --> 00:31:49.556 A:middle
which I have stored in a new

00:31:49.556 --> 00:31:49.996 A:middle
property.

00:31:50.626 --> 00:31:52.566 A:middle
Now, this code is equivalent to

00:31:52.566 --> 00:31:54.826 A:middle
what we had before, but, once we

00:31:54.826 --> 00:31:56.786 A:middle
break these two steps apart, we

00:31:56.786 --> 00:31:58.326 A:middle
can see that runLoop is just

00:31:58.326 --> 00:31:59.816 A:middle
another external class that this

00:31:59.816 --> 00:32:00.556 A:middle
class interacts with.

00:31:59.816 --> 00:32:00.556 A:middle
class interacts with.

00:32:01.386 --> 00:32:02.666 A:middle
So, we can apply the mocking

00:32:02.666 --> 00:32:03.826 A:middle
with protocols technique we

00:32:03.826 --> 00:32:04.896 A:middle
discussed earlier here.

00:32:06.176 --> 00:32:07.806 A:middle
To do that, we'll create a small

00:32:08.026 --> 00:32:09.296 A:middle
protocol, containing this

00:32:09.296 --> 00:32:10.156 A:middle
addTimer method.

00:32:10.816 --> 00:32:13.266 A:middle
I've called this new protocol

00:32:13.356 --> 00:32:15.376 A:middle
TimerScheduler, and it just has

00:32:15.406 --> 00:32:17.466 A:middle
that one addTimer method, which

00:32:17.466 --> 00:32:18.956 A:middle
matches the signature of the

00:32:18.956 --> 00:32:21.796 A:middle
runLoop API.

00:32:22.276 --> 00:32:23.836 A:middle
Now, back in my code, I need to

00:32:23.836 --> 00:32:25.326 A:middle
replace the runLoop with the

00:32:25.326 --> 00:32:26.746 A:middle
protocol that I just created.

00:32:27.296 --> 00:32:31.416 A:middle
And in my tests, I don't want to

00:32:31.416 --> 00:32:32.406 A:middle
use a real runLoop as my

00:32:32.406 --> 00:32:33.246 A:middle
TimerScheduler.

00:32:33.856 --> 00:32:35.306 A:middle
Instead, I want to create a mock

00:32:35.396 --> 00:32:36.996 A:middle
scheduler that passes the timer

00:32:37.086 --> 00:32:39.646 A:middle
to my tests.

00:32:39.686 --> 00:32:40.846 A:middle
I'll do this by creating a new

00:32:40.846 --> 00:32:42.666 A:middle
struct nested in my unit test

00:32:42.666 --> 00:32:44.626 A:middle
class called MockTimerScheduler,

00:32:44.926 --> 00:32:46.286 A:middle
conforming to the TimerScheduler

00:32:46.286 --> 00:32:46.716 A:middle
protocol.

00:32:47.976 --> 00:32:49.146 A:middle
It stores a block that will be

00:32:49.316 --> 00:32:50.756 A:middle
called whenever it's told to add

00:32:51.766 --> 00:32:53.766 A:middle
a timer.

00:32:53.766 --> 00:32:54.696 A:middle
And with all the pieces in

00:32:54.696 --> 00:32:56.406 A:middle
place, I can write my final unit

00:32:56.406 --> 00:32:56.776 A:middle
test.

00:32:57.796 --> 00:32:58.866 A:middle
First, I create a

00:32:58.866 --> 00:33:01.086 A:middle
MockTimerScheduler and configure

00:32:58.866 --> 00:33:01.086 A:middle
MockTimerScheduler and configure

00:33:01.086 --> 00:33:02.286 A:middle
its handleAddTimer block.

00:33:03.496 --> 00:33:04.796 A:middle
This block receives the timer.

00:33:04.846 --> 00:33:05.576 A:middle
Once it's added to the

00:33:05.576 --> 00:33:07.506 A:middle
scheduler, it records the

00:33:07.506 --> 00:33:09.336 A:middle
timer's delay, and then it

00:33:09.336 --> 00:33:11.696 A:middle
invokes the block by firing the

00:33:11.696 --> 00:33:13.226 A:middle
timer to bypass the delay.

00:33:14.756 --> 00:33:15.796 A:middle
Then, we create a

00:33:15.796 --> 00:33:17.386 A:middle
FeaturedPlaceManager and give it

00:33:17.386 --> 00:33:18.446 A:middle
our MockTimerScheduler.

00:33:19.966 --> 00:33:20.796 A:middle
And, finally, we call

00:33:20.796 --> 00:33:22.366 A:middle
scheduleNextPlace to start the

00:33:22.366 --> 00:33:25.286 A:middle
test, and, voila, our tests no

00:33:25.286 --> 00:33:26.276 A:middle
longer have any delay.

00:33:27.066 --> 00:33:28.466 A:middle
They execute super fast, and

00:33:28.626 --> 00:33:29.886 A:middle
they aren't timer dependent, so

00:33:29.886 --> 00:33:31.006 A:middle
it'll be more reliable.

00:33:32.236 --> 00:33:34.146 A:middle
And, as a bonus, I can now

00:33:34.146 --> 00:33:35.866 A:middle
verify the amount of timer delay

00:33:36.156 --> 00:33:37.206 A:middle
using this assertion at the

00:33:37.206 --> 00:33:37.566 A:middle
bottom.

00:33:38.116 --> 00:33:39.056 A:middle
And that's not something I was

00:33:39.056 --> 00:33:40.906 A:middle
able to do in the previous test.

00:33:42.636 --> 00:33:44.886 A:middle
So, like I said, the delay in

00:33:44.886 --> 00:33:46.116 A:middle
our code is fully eliminated

00:33:46.116 --> 00:33:46.976 A:middle
using this technique.

00:33:48.086 --> 00:33:49.306 A:middle
We think this was a great way to

00:33:49.306 --> 00:33:50.636 A:middle
test code that involves delayed

00:33:50.636 --> 00:33:52.786 A:middle
actions, but, for the fastest

00:33:52.786 --> 00:33:54.096 A:middle
overall execution speed in your

00:33:54.096 --> 00:33:56.076 A:middle
tests, it's still preferable to

00:33:56.076 --> 00:33:57.686 A:middle
structure the bulk of your tests

00:33:57.686 --> 00:33:59.136 A:middle
to be direct and not need to

00:33:59.136 --> 00:34:00.496 A:middle
mock delayed actions at all.

00:33:59.136 --> 00:34:00.496 A:middle
mock delayed actions at all.

00:34:01.556 --> 00:34:03.986 A:middle
For example, in our app, the

00:34:04.026 --> 00:34:05.446 A:middle
action being delayed was

00:34:05.446 --> 00:34:06.746 A:middle
changing to the next featured

00:34:06.746 --> 00:34:07.166 A:middle
place.

00:34:07.826 --> 00:34:09.916 A:middle
I probably only need one or two

00:34:10.016 --> 00:34:11.746 A:middle
tests that show that the timer

00:34:11.746 --> 00:34:12.676 A:middle
delay works properly.

00:34:13.106 --> 00:34:14.366 A:middle
And, for the rest of the class,

00:34:14.366 --> 00:34:16.206 A:middle
I can call the show next place

00:34:16.206 --> 00:34:17.735 A:middle
method directly and not need to

00:34:17.735 --> 00:34:22.416 A:middle
mock a timer scheduler at all.

00:34:22.626 --> 00:34:23.795 A:middle
While we're on the topic of text

00:34:23.795 --> 00:34:25.606 A:middle
execution speed, we had a couple

00:34:25.606 --> 00:34:26.335 A:middle
of other tips to share.

00:34:27.755 --> 00:34:29.116 A:middle
One area we've seen concerns the

00:34:29.116 --> 00:34:31.076 A:middle
use of NSPredicateExpectations.

00:34:31.896 --> 00:34:33.036 A:middle
We wanted to mention that these

00:34:33.036 --> 00:34:34.585 A:middle
are not nearly as performant as

00:34:34.585 --> 00:34:36.556 A:middle
other expectation classes, since

00:34:36.556 --> 00:34:37.846 A:middle
they rely on polar rather than

00:34:37.846 --> 00:34:39.696 A:middle
more direct callback mechanisms.

00:34:40.576 --> 00:34:42.286 A:middle
They're mainly used in UI tests,

00:34:42.565 --> 00:34:43.485 A:middle
where the conditions being

00:34:43.485 --> 00:34:45.005 A:middle
evaluated are happening in

00:34:45.005 --> 00:34:45.846 A:middle
another process.

00:34:46.436 --> 00:34:47.916 A:middle
So, in your unit tests, we

00:34:47.916 --> 00:34:48.985 A:middle
recommend more direct

00:34:48.985 --> 00:34:50.896 A:middle
mechanisms, such as regular

00:34:50.896 --> 00:34:52.166 A:middle
XCTestExpectations,

00:34:52.616 --> 00:34:54.016 A:middle
NSNotification, or

00:34:54.016 --> 00:34:55.295 A:middle
KVOExpectations.

00:34:57.756 --> 00:34:59.956 A:middle
Another testing speed tip is to

00:34:59.956 --> 00:35:01.346 A:middle
ensure that your app launches as

00:34:59.956 --> 00:35:01.346 A:middle
ensure that your app launches as

00:35:01.346 --> 00:35:02.256 A:middle
quickly as possible.

00:35:03.396 --> 00:35:04.796 A:middle
Now, most apps have to do some

00:35:04.796 --> 00:35:06.066 A:middle
amount of setup work at launch

00:35:06.066 --> 00:35:07.916 A:middle
time, and, although that work is

00:35:07.916 --> 00:35:09.236 A:middle
necessary for regular app

00:35:09.236 --> 00:35:11.576 A:middle
launches, when your app is being

00:35:11.576 --> 00:35:13.256 A:middle
launched as a test runner, a lot

00:35:13.256 --> 00:35:14.446 A:middle
of that work may be unnecessary.

00:35:15.296 --> 00:35:16.366 A:middle
Things like loading view

00:35:16.366 --> 00:35:18.216 A:middle
controllers, kicking off network

00:35:18.216 --> 00:35:20.296 A:middle
requests, or configuring

00:35:20.296 --> 00:35:21.976 A:middle
analytics packages-- these are

00:35:21.976 --> 00:35:23.096 A:middle
all examples of things that are

00:35:23.096 --> 00:35:24.586 A:middle
commonly unnecessary in unit

00:35:24.586 --> 00:35:25.516 A:middle
testing scenarios.

00:35:26.836 --> 00:35:28.656 A:middle
XCTest waits until your app

00:35:28.696 --> 00:35:30.186 A:middle
delegates did finish launching

00:35:30.186 --> 00:35:31.666 A:middle
method returns before beginning

00:35:31.666 --> 00:35:32.486 A:middle
to run tests.

00:35:33.126 --> 00:35:34.786 A:middle
So, if you profile and notice

00:35:34.816 --> 00:35:36.256 A:middle
that app launch is taking a long

00:35:36.256 --> 00:35:38.596 A:middle
time in your tests, then one tip

00:35:38.626 --> 00:35:39.866 A:middle
is to detect when your app is

00:35:39.866 --> 00:35:41.256 A:middle
launched as a test runner and

00:35:41.256 --> 00:35:41.856 A:middle
avoid this work.

00:35:42.516 --> 00:35:46.656 A:middle
One way to do this is to specify

00:35:46.656 --> 00:35:48.156 A:middle
a custom environment variable or

00:35:48.156 --> 00:35:48.776 A:middle
launch argument.

00:35:49.896 --> 00:35:51.606 A:middle
Open the scheme editor, go to

00:35:51.606 --> 00:35:52.876 A:middle
the test action on the left

00:35:52.876 --> 00:35:54.946 A:middle
side, then to the arguments tab,

00:35:55.346 --> 00:35:56.916 A:middle
and add either an environment

00:35:56.916 --> 00:35:58.276 A:middle
variable or a launch argument.

00:35:59.316 --> 00:36:00.806 A:middle
In this screenshot, I've added

00:35:59.316 --> 00:36:00.806 A:middle
In this screenshot, I've added

00:36:00.806 --> 00:36:02.226 A:middle
an environment variable named

00:36:02.306 --> 00:36:04.056 A:middle
IS-UNIT-TESTING set to 1.

00:36:06.096 --> 00:36:08.066 A:middle
Then, modify your app delegate's

00:36:08.216 --> 00:36:09.976 A:middle
appDidFinishLaunching code to

00:36:09.976 --> 00:36:11.266 A:middle
check for this condition, using

00:36:11.266 --> 00:36:12.406 A:middle
code similar to this.

00:36:13.606 --> 00:36:15.136 A:middle
Now, if you do this, be sure

00:36:15.136 --> 00:36:16.866 A:middle
that the code you skip truly is

00:36:16.866 --> 00:36:18.526 A:middle
nonessential for your unit test

00:36:18.526 --> 00:36:19.000 A:middle
to function.

00:36:23.106 --> 00:36:27.226 A:middle
So, to wrap up, Brian started by

00:36:27.226 --> 00:36:28.376 A:middle
reminding us about the testing

00:36:28.376 --> 00:36:29.976 A:middle
pyramid and how to have a

00:36:29.976 --> 00:36:31.226 A:middle
balanced testing strategy in

00:36:31.226 --> 00:36:32.846 A:middle
your app, showing several

00:36:32.846 --> 00:36:34.656 A:middle
practical techniques for testing

00:36:34.656 --> 00:36:35.666 A:middle
network operations.

00:36:36.956 --> 00:36:38.596 A:middle
Then, I talked about isolating

00:36:38.596 --> 00:36:40.886 A:middle
foundation notifications and

00:36:40.886 --> 00:36:42.056 A:middle
using dependency injection.

00:36:43.506 --> 00:36:44.906 A:middle
We offered a solution to one of

00:36:44.906 --> 00:36:46.326 A:middle
the most common challenges when

00:36:46.326 --> 00:36:48.196 A:middle
writing tests, interacting with

00:36:48.196 --> 00:36:50.306 A:middle
external classes, even if they

00:36:50.306 --> 00:36:51.056 A:middle
have a delegate.

00:36:52.356 --> 00:36:53.506 A:middle
And we shared some tips for

00:36:53.506 --> 00:36:55.036 A:middle
keeping your tests running fast

00:36:55.036 --> 00:36:56.666 A:middle
and avoiding artificial delays.

00:36:57.866 --> 00:36:58.836 A:middle
We really hope you'll find these

00:36:58.836 --> 00:37:00.126 A:middle
tests useful and look for ways

00:36:58.836 --> 00:37:00.126 A:middle
tests useful and look for ways

00:37:00.126 --> 00:37:01.136 A:middle
to apply them the next time

00:37:01.136 --> 00:37:02.626 A:middle
you're writing tests.

00:37:04.316 --> 00:37:05.936 A:middle
For more information, check out

00:37:05.936 --> 00:37:07.206 A:middle
our session webpage at this

00:37:07.206 --> 00:37:08.726 A:middle
link, and, in case you missed

00:37:08.726 --> 00:37:10.246 A:middle
it, we hope you'll check out

00:37:10.246 --> 00:37:11.276 A:middle
Wednesday's What's New in

00:37:11.276 --> 00:37:12.446 A:middle
Testing session on video.

00:37:13.516 --> 00:37:14.756 A:middle
Thanks so much, and I hope you

00:37:14.756 --> 00:37:15.726 A:middle
had a great WWDC.

00:37:16.516 --> 00:37:19.500 A:middle
[ Applause ]
