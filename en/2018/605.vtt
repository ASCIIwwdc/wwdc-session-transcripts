WEBVTT

00:00:07.516 --> 00:00:16.500 A:middle
[ Music ]

00:00:22.516 --> 00:00:29.036 A:middle
[ Applause ]

00:00:29.536 --> 00:00:30.556 A:middle
&gt;&gt; Hi, I'm Alex.

00:00:30.676 --> 00:00:31.886 A:middle
I work for a group at Apple

00:00:31.886 --> 00:00:33.206 A:middle
called Tools Foundation.

00:00:33.336 --> 00:00:34.576 A:middle
Normally we get to do fun stuff

00:00:34.576 --> 00:00:35.726 A:middle
like operating systems and

00:00:35.726 --> 00:00:36.286 A:middle
compilers.

00:00:36.826 --> 00:00:37.776 A:middle
But this year we got to do

00:00:37.776 --> 00:00:38.656 A:middle
something a little different.

00:00:38.986 --> 00:00:40.036 A:middle
We built a game called

00:00:40.036 --> 00:00:40.596 A:middle
SwiftShot.

00:00:41.116 --> 00:00:42.246 A:middle
Some of you may have seen it

00:00:42.246 --> 00:00:44.056 A:middle
earlier today and you might have

00:00:44.056 --> 00:00:45.116 A:middle
played it downstairs.

00:00:45.866 --> 00:00:48.036 A:middle
But the important part is that

00:00:48.386 --> 00:00:50.176 A:middle
SwiftShot is a showcase of some

00:00:50.176 --> 00:00:51.676 A:middle
of the new functionality in

00:00:51.676 --> 00:00:52.136 A:middle
ARKit.

00:00:52.906 --> 00:00:55.646 A:middle
ARKit 2 is now available on

00:00:55.646 --> 00:00:57.006 A:middle
hundreds of millions of devices,

00:00:57.376 --> 00:00:58.856 A:middle
providing a platform for

00:00:59.176 --> 00:01:00.756 A:middle
engaging AR experiences.


00:00:59.176 --> 00:01:00.756 A:middle
engaging AR experiences.

00:01:01.216 --> 00:01:02.576 A:middle
And you are able to reach the

00:01:02.576 --> 00:01:03.786 A:middle
widest possible audience with

00:01:03.786 --> 00:01:04.025 A:middle
that.

00:01:04.916 --> 00:01:06.756 A:middle
There is no special setup, just

00:01:06.756 --> 00:01:08.546 A:middle
point the device's camera at a

00:01:08.666 --> 00:01:09.916 A:middle
surface and start playing.

00:01:11.506 --> 00:01:13.896 A:middle
It's integrated into iOS.

00:01:14.666 --> 00:01:16.206 A:middle
First-party and third-party

00:01:16.206 --> 00:01:17.346 A:middle
engines like SceneKit and

00:01:17.346 --> 00:01:19.826 A:middle
SpriteKit as well as third-party

00:01:19.826 --> 00:01:22.396 A:middle
ones like Unreal and Unity have

00:01:22.476 --> 00:01:23.486 A:middle
a full integration at this

00:01:23.486 --> 00:01:24.000 A:middle
point.

00:01:28.536 --> 00:01:29.686 A:middle
A little agenda for you.

00:01:29.866 --> 00:01:30.976 A:middle
First we're going to talk some

00:01:31.376 --> 00:01:32.896 A:middle
game design principles for

00:01:32.896 --> 00:01:34.216 A:middle
augmented reality, a few of the

00:01:34.216 --> 00:01:35.666 A:middle
things we learned along the way.

00:01:36.886 --> 00:01:38.336 A:middle
We are going to go deep into the

00:01:38.336 --> 00:01:40.186 A:middle
internals of the game and in

00:01:40.186 --> 00:01:40.976 A:middle
particular, we are going to

00:01:40.976 --> 00:01:42.426 A:middle
cover WorldMap sharing which is

00:01:42.426 --> 00:01:43.676 A:middle
a new feature in ARKit 2.

00:01:43.676 --> 00:01:45.556 A:middle
And we will also talk about

00:01:45.556 --> 00:01:46.816 A:middle
networking and physics and how

00:01:46.816 --> 00:01:47.726 A:middle
we made that work.

00:01:48.726 --> 00:01:51.006 A:middle
First, let's, you know, take a

00:01:51.576 --> 00:01:54.426 A:middle
deep look at the game.

00:01:55.516 --> 00:02:29.500 A:middle
[ Music ]


00:01:55.516 --> 00:02:29.500 A:middle
[ Music ]

00:02:34.296 --> 00:02:35.496 A:middle
So, let's talk a little bit

00:02:35.496 --> 00:02:37.246 A:middle
about designing games for

00:02:37.246 --> 00:02:39.626 A:middle
augmented reality.

00:02:40.486 --> 00:02:42.656 A:middle
Above all else, gameplay comes

00:02:42.656 --> 00:02:42.976 A:middle
first.

00:02:42.976 --> 00:02:46.086 A:middle
You should ask yourself if you

00:02:46.086 --> 00:02:47.386 A:middle
are designing a game, would this

00:02:47.386 --> 00:02:50.116 A:middle
game be fun and enjoyable if it

00:02:50.116 --> 00:02:52.376 A:middle
were just 1970s graphics or

00:02:52.636 --> 00:02:55.466 A:middle
plain, flat-shaded grey cubes.

00:02:56.336 --> 00:02:58.166 A:middle
It is worth prototyping with

00:02:58.166 --> 00:03:00.996 A:middle
those kinds of artwork and get


00:02:58.166 --> 00:03:00.996 A:middle
those kinds of artwork and get

00:03:00.996 --> 00:03:02.026 A:middle
that gameplay down.

00:03:02.216 --> 00:03:03.416 A:middle
Because if it's fun with those

00:03:03.416 --> 00:03:05.136 A:middle
boring grey boxes, it's going to

00:03:05.136 --> 00:03:06.126 A:middle
be fun when you add all the

00:03:06.126 --> 00:03:07.246 A:middle
graphics and sound later.

00:03:08.446 --> 00:03:10.376 A:middle
You should spend time refining

00:03:10.376 --> 00:03:12.306 A:middle
that and don't convince yourself

00:03:12.306 --> 00:03:14.216 A:middle
that if I just add another 5%

00:03:14.216 --> 00:03:15.546 A:middle
better graphics, or that one

00:03:15.546 --> 00:03:16.776 A:middle
feature, that the game is

00:03:16.776 --> 00:03:17.746 A:middle
suddenly going to be fun.

00:03:18.496 --> 00:03:19.746 A:middle
Because, you know, there's a

00:03:19.746 --> 00:03:20.796 A:middle
wasteland of games out there

00:03:20.796 --> 00:03:22.316 A:middle
that were never fun from the

00:03:22.316 --> 00:03:22.756 A:middle
get-go.

00:03:22.926 --> 00:03:24.916 A:middle
So, try not to fool yourself.

00:03:25.396 --> 00:03:28.186 A:middle
Let's start with the gameplay.

00:03:31.476 --> 00:03:32.456 A:middle
Keep games short.

00:03:34.046 --> 00:03:35.476 A:middle
You are looking for a typical

00:03:35.476 --> 00:03:37.606 A:middle
mobile experience still - easy

00:03:37.606 --> 00:03:38.526 A:middle
in, easy out.

00:03:39.926 --> 00:03:43.196 A:middle
You want to keep a variety of

00:03:43.246 --> 00:03:44.906 A:middle
content so that it is fresh,

00:03:45.096 --> 00:03:46.836 A:middle
avoid mental fatigue on the part

00:03:46.866 --> 00:03:47.816 A:middle
of the player of repeating the

00:03:47.816 --> 00:03:51.776 A:middle
same thing over and over again.

00:03:51.846 --> 00:03:53.276 A:middle
One of the things we learned is

00:03:53.276 --> 00:03:54.726 A:middle
that spectating the game turned

00:03:54.726 --> 00:03:55.986 A:middle
out to be just as fun as playing

00:03:55.986 --> 00:03:56.076 A:middle
it.

00:03:56.546 --> 00:03:57.596 A:middle
Sitting there on the sidelines

00:03:57.596 --> 00:03:58.436 A:middle
and watching like it is a

00:03:58.436 --> 00:03:59.736 A:middle
sporting match going side to

00:03:59.736 --> 00:04:02.426 A:middle
side, that is just a really


00:03:59.736 --> 00:04:02.426 A:middle
side, that is just a really

00:04:02.426 --> 00:04:03.446 A:middle
enjoyable experience.

00:04:03.996 --> 00:04:04.866 A:middle
It's something to think about.

00:04:07.666 --> 00:04:09.536 A:middle
Games are a key form of social

00:04:09.536 --> 00:04:10.586 A:middle
and personal interaction.

00:04:12.336 --> 00:04:14.136 A:middle
Augmented reality can offer a

00:04:14.336 --> 00:04:16.716 A:middle
kind of personal touch that you

00:04:16.716 --> 00:04:18.646 A:middle
might have had before playing

00:04:18.646 --> 00:04:19.935 A:middle
like a traditional card game

00:04:19.935 --> 00:04:20.875 A:middle
around the table with older

00:04:20.875 --> 00:04:21.565 A:middle
relatives.

00:04:22.065 --> 00:04:24.696 A:middle
But now you have technology to

00:04:24.696 --> 00:04:25.516 A:middle
help along the way.

00:04:27.226 --> 00:04:31.146 A:middle
It isn't enough to just take a

00:04:31.146 --> 00:04:33.196 A:middle
3D game and put it on a table in

00:04:33.196 --> 00:04:33.616 A:middle
front of you.

00:04:34.406 --> 00:04:35.736 A:middle
With augmented reality, you know

00:04:35.736 --> 00:04:36.966 A:middle
how the device is positioned.

00:04:37.686 --> 00:04:39.416 A:middle
You also know a little bit about

00:04:39.416 --> 00:04:41.566 A:middle
the user's environment and you

00:04:41.566 --> 00:04:42.526 A:middle
should try to take advantage of

00:04:42.526 --> 00:04:43.676 A:middle
that in the game and make

00:04:43.676 --> 00:04:45.246 A:middle
experiences that are really for

00:04:45.246 --> 00:04:46.536 A:middle
augmented reality first.

00:04:51.036 --> 00:04:53.076 A:middle
Your device can be used as a

00:04:53.076 --> 00:04:54.956 A:middle
camera to look inward at an

00:04:54.956 --> 00:04:56.116 A:middle
object of focus.

00:04:56.916 --> 00:04:59.116 A:middle
In this case, this is a 3D

00:04:59.116 --> 00:05:00.686 A:middle
puzzle game where we're looking


00:04:59.116 --> 00:05:00.686 A:middle
puzzle game where we're looking

00:05:00.686 --> 00:05:01.986 A:middle
to repair a broken vase.

00:05:02.206 --> 00:05:03.186 A:middle
We can look all around it,

00:05:03.676 --> 00:05:04.706 A:middle
figure out what piece goes

00:05:04.706 --> 00:05:06.066 A:middle
where, and do our best on the

00:05:06.066 --> 00:05:06.566 A:middle
repairs.

00:05:07.626 --> 00:05:08.996 A:middle
In SwiftShot, we took a similar

00:05:08.996 --> 00:05:09.506 A:middle
concept.

00:05:10.036 --> 00:05:11.246 A:middle
The focus is the table you're

00:05:11.246 --> 00:05:12.876 A:middle
playing on and you can walk

00:05:12.876 --> 00:05:13.366 A:middle
around it.

00:05:14.006 --> 00:05:15.606 A:middle
But the table isn't just a

00:05:15.606 --> 00:05:16.866 A:middle
tracking surface for augmented

00:05:16.866 --> 00:05:17.226 A:middle
reality.

00:05:17.526 --> 00:05:18.346 A:middle
It's an integral part of the

00:05:18.346 --> 00:05:18.786 A:middle
gameplay.

00:05:19.706 --> 00:05:21.176 A:middle
The height of the table is

00:05:21.256 --> 00:05:23.666 A:middle
actually significant and as a

00:05:23.666 --> 00:05:24.886 A:middle
result, you'll see in the game

00:05:24.886 --> 00:05:26.396 A:middle
that there are slingshots at

00:05:26.396 --> 00:05:27.646 A:middle
different heights on tops of

00:05:27.646 --> 00:05:29.956 A:middle
stacks of blocks in order to

00:05:30.536 --> 00:05:32.196 A:middle
give you better shots or take

00:05:32.196 --> 00:05:33.686 A:middle
advantage of the player dodging

00:05:33.686 --> 00:05:36.976 A:middle
and weaving a little bit.

00:05:37.816 --> 00:05:39.006 A:middle
Another possible principle is

00:05:39.006 --> 00:05:40.296 A:middle
your device is a camera you use

00:05:40.296 --> 00:05:41.336 A:middle
to look around you.

00:05:41.906 --> 00:05:47.026 A:middle
In this case, we're looking for

00:05:47.256 --> 00:05:49.156 A:middle
unicorns hiding out in the

00:05:49.156 --> 00:05:50.266 A:middle
wilderness and we're taking

00:05:50.266 --> 00:05:50.896 A:middle
pictures of them.

00:05:53.046 --> 00:05:54.576 A:middle
It's just around you, not

00:05:55.136 --> 00:05:55.516 A:middle
inward.

00:05:56.736 --> 00:06:01.576 A:middle
The device can also be a portal


00:05:56.736 --> 00:06:01.576 A:middle
The device can also be a portal

00:06:01.576 --> 00:06:02.726 A:middle
into an alternate universe.

00:06:02.976 --> 00:06:04.056 A:middle
You don't need to see what the

00:06:04.056 --> 00:06:05.186 A:middle
camera sees directly.

00:06:06.376 --> 00:06:07.376 A:middle
The environment can be entirely

00:06:07.376 --> 00:06:07.976 A:middle
replaced.

00:06:08.556 --> 00:06:10.286 A:middle
Laws of physics can be bent or

00:06:10.456 --> 00:06:11.446 A:middle
completely changed.

00:06:12.326 --> 00:06:13.226 A:middle
Whatever you need to do to make

00:06:13.226 --> 00:06:13.636 A:middle
it fun.

00:06:14.226 --> 00:06:15.196 A:middle
In this case, we're able to see

00:06:15.196 --> 00:06:16.156 A:middle
the stars, even though it's

00:06:16.186 --> 00:06:16.796 A:middle
bright daylight.

00:06:17.946 --> 00:06:22.316 A:middle
Also, your device can be the

00:06:22.316 --> 00:06:23.966 A:middle
controller itself.

00:06:25.716 --> 00:06:27.296 A:middle
You're able to fuse yourself

00:06:27.296 --> 00:06:29.386 A:middle
with the virtual world using the

00:06:29.386 --> 00:06:30.376 A:middle
device as the controller.

00:06:30.956 --> 00:06:32.736 A:middle
In this example, we're sort of

00:06:32.736 --> 00:06:34.376 A:middle
magnetically levitating blocks

00:06:34.376 --> 00:06:35.556 A:middle
and placing them in the sorting

00:06:35.556 --> 00:06:35.886 A:middle
cube.

00:06:36.706 --> 00:06:37.526 A:middle
That's the focus of the

00:06:37.526 --> 00:06:38.586 A:middle
interaction in SwiftShot.

00:06:39.796 --> 00:06:40.996 A:middle
You want to encourage slow

00:06:40.996 --> 00:06:41.996 A:middle
movement of the device.

00:06:42.966 --> 00:06:44.106 A:middle
That gives the best images to

00:06:44.106 --> 00:06:45.426 A:middle
the camera without motion blur

00:06:45.696 --> 00:06:46.686 A:middle
and it can do the best job at

00:06:46.686 --> 00:06:47.136 A:middle
tracking.

00:06:48.186 --> 00:06:50.256 A:middle
And despite how thin and light

00:06:50.256 --> 00:06:52.386 A:middle
these devices are, waving them

00:06:52.386 --> 00:06:53.676 A:middle
all around at arm's length turns

00:06:53.676 --> 00:06:54.616 A:middle
out to be a little bit tiring.

00:06:54.786 --> 00:06:55.886 A:middle
So, you're looking for slow and

00:06:55.886 --> 00:06:56.876 A:middle
deliberate movements.

00:06:57.146 --> 00:07:00.696 A:middle
You want to encourage the player


00:06:57.146 --> 00:07:00.696 A:middle
You want to encourage the player

00:07:00.696 --> 00:07:02.516 A:middle
to move around the play field In

00:07:02.636 --> 00:07:05.006 A:middle
this case, our shot of the enemy

00:07:05.136 --> 00:07:06.856 A:middle
slingshot is blocked by those

00:07:06.856 --> 00:07:07.366 A:middle
blocks.

00:07:08.026 --> 00:07:09.276 A:middle
So, we have to move over to

00:07:09.276 --> 00:07:11.156 A:middle
another slingshot to clear the

00:07:11.156 --> 00:07:12.000 A:middle
obstruction.

00:07:19.326 --> 00:07:20.646 A:middle
Control feedback is important

00:07:20.646 --> 00:07:21.136 A:middle
for immersion.

00:07:22.146 --> 00:07:24.826 A:middle
In SwiftShot, we give feedback

00:07:24.826 --> 00:07:26.506 A:middle
using both audio and haptics.

00:07:27.576 --> 00:07:29.716 A:middle
There's a variety of dynamic

00:07:29.756 --> 00:07:31.396 A:middle
behavior in the stretching band

00:07:31.396 --> 00:07:35.056 A:middle
sound and haptics on the phones

00:07:35.056 --> 00:07:36.316 A:middle
to give you that feel that

00:07:36.316 --> 00:07:36.826 A:middle
you're doing it.

00:07:37.406 --> 00:07:38.876 A:middle
We'll talk a lot more later

00:07:38.876 --> 00:07:40.036 A:middle
about the dynamic audio.

00:07:42.956 --> 00:07:44.196 A:middle
So, next I'd like to bring up

00:07:44.196 --> 00:07:46.096 A:middle
David Paschich, who will go deep

00:07:46.096 --> 00:07:47.376 A:middle
into the details of SwiftShot.

00:07:47.786 --> 00:07:48.666 A:middle
Thank you.

00:07:50.286 --> 00:07:50.486 A:middle
David?

00:07:53.756 --> 00:07:55.086 A:middle
&gt;&gt; Thank you Alex, and hello,

00:07:55.086 --> 00:07:55.536 A:middle
everybody.

00:07:55.536 --> 00:07:58.256 A:middle
I just want to echo what Alex

00:07:58.256 --> 00:07:58.546 A:middle
said.

00:07:58.546 --> 00:08:00.056 A:middle
The response that we've seen


00:07:58.546 --> 00:08:00.056 A:middle
The response that we've seen

00:08:00.056 --> 00:08:01.136 A:middle
from people here at the show to

00:08:01.136 --> 00:08:02.596 A:middle
SwiftShot has been really

00:08:02.596 --> 00:08:04.196 A:middle
amazing and it's been gratifying

00:08:04.196 --> 00:08:05.496 A:middle
to see some people already

00:08:05.846 --> 00:08:07.106 A:middle
downloading it, building it and

00:08:07.106 --> 00:08:08.266 A:middle
altering it from the sample

00:08:08.266 --> 00:08:08.606 A:middle
code.

00:08:08.606 --> 00:08:09.746 A:middle
So, I thank you for that.

00:08:09.746 --> 00:08:10.966 A:middle
We're really excited about that.

00:08:10.966 --> 00:08:13.476 A:middle
I want to talk by talking first

00:08:13.476 --> 00:08:15.246 A:middle
about the technologies we used

00:08:15.246 --> 00:08:16.126 A:middle
in building SwiftShot.

00:08:16.516 --> 00:08:18.736 A:middle
The first and foremost is ARKit,

00:08:19.166 --> 00:08:20.766 A:middle
which lets us render the content

00:08:20.916 --> 00:08:22.416 A:middle
into the physical world around

00:08:22.416 --> 00:08:23.656 A:middle
the players, immersing them in

00:08:23.656 --> 00:08:24.396 A:middle
the experience.

00:08:26.336 --> 00:08:28.636 A:middle
We use SceneKit to manage and

00:08:28.636 --> 00:08:30.096 A:middle
draw that content, using

00:08:30.096 --> 00:08:31.896 A:middle
advanced 3D rendering and

00:08:31.896 --> 00:08:33.106 A:middle
realistic physics for fun

00:08:33.106 --> 00:08:33.466 A:middle
gameplay.

00:08:35.186 --> 00:08:36.686 A:middle
Metal lets us harness the power

00:08:36.686 --> 00:08:39.686 A:middle
of the GPU devices.

00:08:39.686 --> 00:08:41.655 A:middle
It came into play both within

00:08:41.655 --> 00:08:43.256 A:middle
SceneKit for the shading and

00:08:43.256 --> 00:08:45.346 A:middle
rendering and also for the flag

00:08:45.346 --> 00:08:46.346 A:middle
simulation, which I'll talk

00:08:46.346 --> 00:08:48.166 A:middle
about a little later on.

00:08:48.856 --> 00:08:50.406 A:middle
GameplayKit provides an entity

00:08:50.406 --> 00:08:52.046 A:middle
component architecture for our

00:08:52.046 --> 00:08:52.666 A:middle
game object.

00:08:52.786 --> 00:08:54.526 A:middle
It let us easily share behaviors

00:08:54.526 --> 00:08:57.506 A:middle
between objects in the game.

00:08:57.716 --> 00:08:59.566 A:middle
Multi-peer connectivity provides

00:08:59.566 --> 00:09:01.676 A:middle
the networking layer, including


00:08:59.566 --> 00:09:01.676 A:middle
the networking layer, including

00:09:01.676 --> 00:09:03.426 A:middle
discovery of nearby devices and

00:09:03.426 --> 00:09:05.716 A:middle
synchronization, and encryption

00:09:05.716 --> 00:09:05.976 A:middle
as well.

00:09:07.396 --> 00:09:09.206 A:middle
AV Foundation controls both the

00:09:09.206 --> 00:09:11.056 A:middle
music for atmosphere and the

00:09:11.056 --> 00:09:13.186 A:middle
sound effects for the devices,

00:09:13.186 --> 00:09:14.236 A:middle
really giving you that immersive

00:09:14.236 --> 00:09:14.846 A:middle
experience.

00:09:16.026 --> 00:09:17.706 A:middle
And lastly, we built the entire

00:09:17.706 --> 00:09:18.806 A:middle
application in Swift.

00:09:19.426 --> 00:09:22.216 A:middle
Swift's type safety, performance

00:09:22.696 --> 00:09:25.196 A:middle
and advanced features like

00:09:25.196 --> 00:09:27.366 A:middle
protocol extensions let us focus

00:09:27.366 --> 00:09:28.756 A:middle
more on the gameplay and worry

00:09:28.756 --> 00:09:30.196 A:middle
less about crashes and

00:09:30.196 --> 00:09:31.536 A:middle
mismatched interfaces between

00:09:31.536 --> 00:09:32.136 A:middle
code layers.

00:09:32.626 --> 00:09:36.716 A:middle
Those are the iOS technologies

00:09:36.716 --> 00:09:37.176 A:middle
we use.

00:09:37.576 --> 00:09:39.026 A:middle
I'll talk about how we use those

00:09:39.026 --> 00:09:40.406 A:middle
as we implemented several of the

00:09:40.406 --> 00:09:41.266 A:middle
features of the game.

00:09:41.836 --> 00:09:43.206 A:middle
Establishing the shared

00:09:43.206 --> 00:09:43.996 A:middle
coordinate space.

00:09:44.796 --> 00:09:45.366 A:middle
Networking.

00:09:46.096 --> 00:09:48.546 A:middle
Physics. Asset important and

00:09:48.546 --> 00:09:48.896 A:middle
management.

00:09:49.696 --> 00:09:50.656 A:middle
Flag simulation.

00:09:51.086 --> 00:09:52.006 A:middle
And the dynamic audio.

00:09:52.006 --> 00:09:56.226 A:middle
We'll start by talking about

00:09:56.226 --> 00:09:57.556 A:middle
setting up a shared coordinate

00:09:57.556 --> 00:09:58.036 A:middle
space.

00:09:58.376 --> 00:10:00.926 A:middle
The key in the experience is


00:09:58.376 --> 00:10:00.926 A:middle
The key in the experience is

00:10:00.926 --> 00:10:02.196 A:middle
having the player see the same

00:10:02.196 --> 00:10:03.636 A:middle
object in the same places on

00:10:03.636 --> 00:10:04.406 A:middle
both devices.

00:10:04.876 --> 00:10:06.186 A:middle
To do that, we have to have a

00:10:06.186 --> 00:10:07.216 A:middle
shared coordinate space,

00:10:07.796 --> 00:10:09.386 A:middle
allowing them to talk about

00:10:09.386 --> 00:10:10.896 A:middle
locations in the world in the

00:10:10.896 --> 00:10:12.000 A:middle
same way.

00:10:14.046 --> 00:10:15.076 A:middle
ARKit provides a number of

00:10:15.076 --> 00:10:16.406 A:middle
features you can use to set this

00:10:16.406 --> 00:10:16.606 A:middle
up.

00:10:17.126 --> 00:10:20.056 A:middle
In iOS 11.3, we introduced image

00:10:20.056 --> 00:10:21.596 A:middle
recognition, allowing your apps

00:10:21.596 --> 00:10:22.926 A:middle
to recognize images in the world

00:10:22.926 --> 00:10:23.366 A:middle
around you.

00:10:24.796 --> 00:10:27.036 A:middle
Now in iOS 12, we're adding two

00:10:27.036 --> 00:10:28.926 A:middle
additional technologies - object

00:10:28.926 --> 00:10:30.966 A:middle
detection and world map sharing.

00:10:32.356 --> 00:10:34.046 A:middle
Both image detection and object

00:10:34.046 --> 00:10:35.896 A:middle
detection let you add content to

00:10:35.896 --> 00:10:37.116 A:middle
things the user sees in the real

00:10:37.116 --> 00:10:38.836 A:middle
world but they require you to

00:10:38.836 --> 00:10:40.106 A:middle
have pre-recorded those objects

00:10:40.106 --> 00:10:41.086 A:middle
for later recognition.

00:10:41.696 --> 00:10:42.656 A:middle
You saw that in the keynote

00:10:42.656 --> 00:10:43.616 A:middle
during the Lego demo,

00:10:43.866 --> 00:10:45.196 A:middle
recognizing built models and

00:10:45.196 --> 00:10:45.936 A:middle
adding content.

00:10:46.446 --> 00:10:48.966 A:middle
For this game, we wanted to

00:10:48.966 --> 00:10:50.316 A:middle
enable users to play anywhere

00:10:50.316 --> 00:10:51.556 A:middle
with a table such as a café,

00:10:51.556 --> 00:10:52.816 A:middle
their kitchen and so forth.

00:10:53.166 --> 00:10:54.286 A:middle
WorldMap sharing is how we did

00:10:55.186 --> 00:10:55.306 A:middle
that.

00:10:55.716 --> 00:10:56.556 A:middle
You can also apply this

00:10:56.556 --> 00:10:57.566 A:middle
technique to applications

00:10:57.566 --> 00:10:59.086 A:middle
besides games, like a fixed

00:10:59.086 --> 00:11:00.236 A:middle
installation in a retail


00:10:59.086 --> 00:11:00.236 A:middle
installation in a retail

00:11:00.236 --> 00:11:01.636 A:middle
environment or a museum.

00:11:02.486 --> 00:11:04.856 A:middle
In the game room downstairs, we

00:11:04.856 --> 00:11:06.326 A:middle
use iBeacons so devices know

00:11:06.326 --> 00:11:09.436 A:middle
which table they're next to and

00:11:09.436 --> 00:11:10.666 A:middle
can load the correct WorldMap

00:11:10.986 --> 00:11:11.636 A:middle
for that area.

00:11:12.236 --> 00:11:13.436 A:middle
That really makes the experience

00:11:13.436 --> 00:11:13.786 A:middle
magical.

00:11:14.326 --> 00:11:17.946 A:middle
One of the features of SwiftShot

00:11:17.996 --> 00:11:18.866 A:middle
you may have used if you built

00:11:18.866 --> 00:11:20.476 A:middle
your app yourself is the ability

00:11:20.476 --> 00:11:23.036 A:middle
to, ability for players to place

00:11:23.036 --> 00:11:23.956 A:middle
the game board in the virtual

00:11:23.956 --> 00:11:24.326 A:middle
world.

00:11:24.706 --> 00:11:26.136 A:middle
At the tables downstairs, we're

00:11:26.136 --> 00:11:27.326 A:middle
using preloaded maps.

00:11:27.456 --> 00:11:28.766 A:middle
But here's an example of

00:11:28.766 --> 00:11:30.046 A:middle
building your own board and

00:11:30.046 --> 00:11:31.866 A:middle
placing it in the virtual world.

00:11:32.716 --> 00:11:34.986 A:middle
This is how that works.

00:11:36.046 --> 00:11:37.316 A:middle
As you saw in the video, you

00:11:37.316 --> 00:11:38.836 A:middle
start by scanning the surface,

00:11:38.916 --> 00:11:40.366 A:middle
letting ARKit build up a map of

00:11:40.366 --> 00:11:40.766 A:middle
the area.

00:11:41.376 --> 00:11:43.916 A:middle
You can then serialize that map

00:11:43.916 --> 00:11:45.726 A:middle
out as data and transfer it to

00:11:45.726 --> 00:11:46.436 A:middle
another device.

00:11:47.716 --> 00:11:49.236 A:middle
The target device then loads the

00:11:49.236 --> 00:11:51.386 A:middle
map into ARKit and uses it to

00:11:51.386 --> 00:11:52.816 A:middle
recognize the same surface.

00:11:53.346 --> 00:11:54.396 A:middle
At that point, we now have a

00:11:54.396 --> 00:11:55.626 A:middle
shared reference point in the

00:11:55.626 --> 00:11:57.926 A:middle
real world, and both devices can

00:11:57.926 --> 00:11:58.986 A:middle
render the game board into the

00:11:58.986 --> 00:12:00.446 A:middle
same place in that world.


00:11:58.986 --> 00:12:00.446 A:middle
same place in that world.

00:12:02.576 --> 00:12:03.566 A:middle
The first step in the

00:12:03.566 --> 00:12:05.036 A:middle
implementation is getting the

00:12:05.036 --> 00:12:06.386 A:middle
World Map from the ARSession on

00:12:06.386 --> 00:12:07.236 A:middle
the first device.

00:12:08.186 --> 00:12:09.786 A:middle
That's the call to a new API in

00:12:09.876 --> 00:12:11.776 A:middle
iOS 12 in ARSession,

00:12:11.956 --> 00:12:12.836 A:middle
getCurrentWorldMap.

00:12:13.376 --> 00:12:15.006 A:middle
It builds an ARWorldMap object

00:12:15.196 --> 00:12:16.236 A:middle
from the session's current

00:12:16.236 --> 00:12:17.196 A:middle
understanding of the world

00:12:17.196 --> 00:12:19.036 A:middle
around you and then returns it

00:12:19.036 --> 00:12:20.226 A:middle
in an asynchronous callback.

00:12:20.976 --> 00:12:23.876 A:middle
We then use NSKeyedArchiver to

00:12:23.876 --> 00:12:25.116 A:middle
serialize that out to a data

00:12:25.116 --> 00:12:25.666 A:middle
object.

00:12:26.396 --> 00:12:27.846 A:middle
You can then save the data or

00:12:27.846 --> 00:12:28.746 A:middle
send it over the network.

00:12:31.316 --> 00:12:32.906 A:middle
Once you have that data object,

00:12:33.546 --> 00:12:34.616 A:middle
you next have to decide how to

00:12:34.616 --> 00:12:35.636 A:middle
get it from one device to

00:12:35.636 --> 00:12:35.956 A:middle
another.

00:12:36.456 --> 00:12:38.286 A:middle
For ad hoc gaming like you saw

00:12:38.376 --> 00:12:40.286 A:middle
in the videoing, SwiftShot uses

00:12:40.286 --> 00:12:41.086 A:middle
a peer-to-peer network

00:12:41.086 --> 00:12:42.466 A:middle
connection which we'll get into

00:12:42.466 --> 00:12:43.436 A:middle
more detail on shortly.

00:12:43.976 --> 00:12:45.716 A:middle
When the second device joins the

00:12:45.716 --> 00:12:47.376 A:middle
network session, the first

00:12:47.376 --> 00:12:48.776 A:middle
device serialized the WorldMap

00:12:48.776 --> 00:12:50.076 A:middle
and sent it over the network.

00:12:50.826 --> 00:12:52.126 A:middle
This is great for casual gaming

00:12:52.126 --> 00:12:53.696 A:middle
situations, allowing users to

00:12:53.696 --> 00:12:55.346 A:middle
set up anywhere they can find a

00:12:55.346 --> 00:12:56.756 A:middle
surface to play on.

00:12:58.536 --> 00:12:59.596 A:middle
For the gaming tables

00:12:59.596 --> 00:13:00.886 A:middle
downstairs, we used a different


00:12:59.596 --> 00:13:00.886 A:middle
downstairs, we used a different

00:13:00.886 --> 00:13:01.306 A:middle
approach.

00:13:01.676 --> 00:13:03.316 A:middle
We spent some time during setup

00:13:03.316 --> 00:13:04.966 A:middle
for the conference recording

00:13:04.966 --> 00:13:05.966 A:middle
WorldMaps for each of the

00:13:05.966 --> 00:13:07.776 A:middle
tables, ensuring that we could

00:13:07.776 --> 00:13:09.186 A:middle
localize that shared coordinate

00:13:09.186 --> 00:13:10.486 A:middle
space from multiple angles.

00:13:11.236 --> 00:13:12.456 A:middle
Each table has its own unique

00:13:12.456 --> 00:13:13.856 A:middle
characteristics as well as

00:13:13.856 --> 00:13:15.386 A:middle
slightly different lighting and

00:13:15.386 --> 00:13:15.826 A:middle
positioning.

00:13:16.286 --> 00:13:18.586 A:middle
We then saved the files to local

00:13:18.586 --> 00:13:19.726 A:middle
sstorage on each device.

00:13:20.666 --> 00:13:21.946 A:middle
Since the devices in use are

00:13:21.946 --> 00:13:23.116 A:middle
managed by our conference team,

00:13:23.346 --> 00:13:24.616 A:middle
we're able to use mobile device

00:13:24.616 --> 00:13:26.116 A:middle
management to make sure that the

00:13:26.116 --> 00:13:27.626 A:middle
same files are present on every

00:13:27.626 --> 00:13:29.026 A:middle
device in the game.

00:13:29.846 --> 00:13:33.676 A:middle
To make the solution even more

00:13:33.676 --> 00:13:35.506 A:middle
seamless, you can use iBeacons

00:13:35.646 --> 00:13:36.256 A:middle
on each table.

00:13:36.746 --> 00:13:38.826 A:middle
By correlating the identifier of

00:13:38.826 --> 00:13:39.866 A:middle
the iBeacon with particular

00:13:39.866 --> 00:13:41.796 A:middle
WorldMaps, each instance of the

00:13:41.796 --> 00:13:43.316 A:middle
SwiftShot application can load

00:13:43.316 --> 00:13:44.076 A:middle
the correct WorldMap

00:13:44.076 --> 00:13:44.676 A:middle
automatically.

00:13:45.266 --> 00:13:46.386 A:middle
Now, if you're building a

00:13:46.386 --> 00:13:48.626 A:middle
consumer application, you can

00:13:48.626 --> 00:13:50.736 A:middle
also use things like iOS's

00:13:50.736 --> 00:13:53.516 A:middle
on-demand resources or your own

00:13:53.516 --> 00:13:55.236 A:middle
cloud-sharing solution to share

00:13:55.236 --> 00:13:56.606 A:middle
WorldMaps between devices.

00:13:57.196 --> 00:13:58.276 A:middle
This would allow you to for

00:13:58.276 --> 00:13:59.806 A:middle
instance select the correct

00:13:59.806 --> 00:14:01.566 A:middle
WorldMap for a particular retail


00:13:59.806 --> 00:14:01.566 A:middle
WorldMap for a particular retail

00:14:01.566 --> 00:14:02.996 A:middle
location somewhere out in the

00:14:02.996 --> 00:14:03.246 A:middle
world.

00:14:04.326 --> 00:14:05.086 A:middle
There's really a lot

00:14:05.086 --> 00:14:06.866 A:middle
possibilities here to tailor

00:14:06.866 --> 00:14:08.146 A:middle
users' experience and really

00:14:08.146 --> 00:14:08.836 A:middle
build something great.

00:14:09.336 --> 00:14:12.746 A:middle
So, those are a couple of the

00:14:12.746 --> 00:14:14.426 A:middle
ways to get that WorldMap data

00:14:14.576 --> 00:14:15.726 A:middle
from one device to another.

00:14:16.386 --> 00:14:17.746 A:middle
Let's talk about how you then

00:14:17.746 --> 00:14:19.106 A:middle
load it on the second device.

00:14:19.386 --> 00:14:20.796 A:middle
In this case, we use

00:14:20.846 --> 00:14:24.336 A:middle
NSKeyUnarchiveder to blow up

00:14:24.336 --> 00:14:25.746 A:middle
that WorldMap again from the

00:14:25.746 --> 00:14:26.956 A:middle
data that we received.

00:14:27.836 --> 00:14:29.926 A:middle
We then build an ARWorldTracking

00:14:29.926 --> 00:14:31.696 A:middle
configuration and add the

00:14:31.696 --> 00:14:33.456 A:middle
WorldMap to that configuration

00:14:33.456 --> 00:14:35.236 A:middle
object, setting up the way we

00:14:35.236 --> 00:14:35.386 A:middle
want.

00:14:36.246 --> 00:14:38.606 A:middle
And then lastly, we ask the

00:14:38.606 --> 00:14:39.646 A:middle
ARSession to run that

00:14:39.646 --> 00:14:41.736 A:middle
configuration, resetting any

00:14:41.736 --> 00:14:45.116 A:middle
existing anchors and tracking.

00:14:45.116 --> 00:14:47.016 A:middle
ARKit on the target device then

00:14:47.016 --> 00:14:48.366 A:middle
starts scanning the world around

00:14:48.366 --> 00:14:50.366 A:middle
you, correlating those feature

00:14:50.366 --> 00:14:52.706 A:middle
points from the original map

00:14:52.706 --> 00:14:53.776 A:middle
with those that it sees there.

00:14:54.166 --> 00:14:55.396 A:middle
Once it's able to do that,

00:14:55.656 --> 00:14:56.456 A:middle
you've got that shared

00:14:56.456 --> 00:14:57.276 A:middle
coordinate space.

00:14:57.696 --> 00:14:59.966 A:middle
Both devices have 000 in the

00:14:59.966 --> 00:15:01.096 A:middle
same place in the real world.


00:14:59.966 --> 00:15:01.096 A:middle
same place in the real world.

00:15:01.396 --> 00:15:05.446 A:middle
So, a quick word about privacy

00:15:05.446 --> 00:15:06.196 A:middle
with WorldMaps.

00:15:06.826 --> 00:15:07.916 A:middle
In the process of recording the

00:15:07.916 --> 00:15:09.926 A:middle
WorldMap, we take into account

00:15:10.076 --> 00:15:11.226 A:middle
features of the world around

00:15:11.226 --> 00:15:12.386 A:middle
you, physical arrangements of

00:15:12.386 --> 00:15:13.616 A:middle
objects and so forth.

00:15:15.016 --> 00:15:16.746 A:middle
While it does include geographic

00:15:16.746 --> 00:15:18.036 A:middle
information like latitude and

00:15:18.036 --> 00:15:19.366 A:middle
longitude and thus your

00:15:19.366 --> 00:15:20.756 A:middle
application doesn't need to ask

00:15:20.756 --> 00:15:22.296 A:middle
for location permission to use

00:15:22.296 --> 00:15:25.046 A:middle
ARKit, it may include personally

00:15:25.046 --> 00:15:26.726 A:middle
identifiable information about

00:15:26.726 --> 00:15:27.736 A:middle
the user's environment.

00:15:28.686 --> 00:15:29.976 A:middle
So, we recommend that you treat

00:15:30.046 --> 00:15:32.086 A:middle
a serialized WorldMap the same

00:15:32.156 --> 00:15:33.266 A:middle
way that you would any other

00:15:33.266 --> 00:15:35.866 A:middle
user-created private data.

00:15:36.156 --> 00:15:38.686 A:middle
This means that you want to make

00:15:38.686 --> 00:15:39.846 A:middle
sure that you're encrypting it

00:15:40.616 --> 00:15:41.976 A:middle
both at rest and when moving

00:15:41.976 --> 00:15:42.746 A:middle
across the network.

00:15:43.666 --> 00:15:44.676 A:middle
You may also want to let your

00:15:44.676 --> 00:15:46.406 A:middle
users know if you're planning to

00:15:46.636 --> 00:15:48.156 A:middle
save that WorldMap information

00:15:48.156 --> 00:15:49.586 A:middle
for an extended period of time,

00:15:49.896 --> 00:15:51.316 A:middle
past a single session of your

00:15:51.316 --> 00:15:51.856 A:middle
application.

00:15:53.296 --> 00:15:54.766 A:middle
In SwiftShot, we're able to take

00:15:54.766 --> 00:15:56.806 A:middle
advantage of iOS's built-in

00:15:56.986 --> 00:15:59.596 A:middle
encryption for encrypting the

00:15:59.596 --> 00:16:00.606 A:middle
data while at rest.


00:15:59.596 --> 00:16:00.606 A:middle
data while at rest.

00:16:01.376 --> 00:16:03.496 A:middle
I'll talk next about how we did

00:16:03.496 --> 00:16:05.246 A:middle
the networking for encryption,

00:16:05.546 --> 00:16:06.526 A:middle
on the networking.

00:16:07.066 --> 00:16:10.496 A:middle
Now, in addition to setting up

00:16:10.496 --> 00:16:12.616 A:middle
shared coordinate space for

00:16:12.616 --> 00:16:14.006 A:middle
SwiftShot, we needed to tell the

00:16:14.006 --> 00:16:15.416 A:middle
other device where the user has

00:16:15.416 --> 00:16:16.716 A:middle
chosen to locate the board.

00:16:17.236 --> 00:16:19.266 A:middle
We use an ARAnchor to do this.

00:16:19.676 --> 00:16:21.666 A:middle
When you create an ARAnchor, you

00:16:21.666 --> 00:16:23.536 A:middle
provide a name as well as

00:16:23.536 --> 00:16:24.736 A:middle
position and rotation

00:16:24.736 --> 00:16:26.386 A:middle
information as a 4 x 4

00:16:26.386 --> 00:16:26.836 A:middle
transform.

00:16:27.306 --> 00:16:30.236 A:middle
ARKit can then include the

00:16:30.236 --> 00:16:32.176 A:middle
Anchor in the ARWorldMap we

00:16:32.176 --> 00:16:34.386 A:middle
generate and serialize out, and

00:16:34.386 --> 00:16:35.476 A:middle
then, so we can transfer that

00:16:35.476 --> 00:16:36.936 A:middle
board information to the other

00:16:36.936 --> 00:16:37.496 A:middle
device.

00:16:38.106 --> 00:16:40.906 A:middle
Now, the system ARAnchor class

00:16:40.906 --> 00:16:42.576 A:middle
just has the name and the

00:16:42.576 --> 00:16:43.836 A:middle
orientation we created.

00:16:44.196 --> 00:16:45.656 A:middle
We can look up the anchor that

00:16:45.656 --> 00:16:46.846 A:middle
we're interested in by name on

00:16:46.846 --> 00:16:47.406 A:middle
the other side.

00:16:48.036 --> 00:16:49.286 A:middle
For our application though, we

00:16:49.286 --> 00:16:50.596 A:middle
need to include some additional

00:16:50.596 --> 00:16:51.946 A:middle
information for the other

00:16:51.946 --> 00:16:53.946 A:middle
device, and that's the size that

00:16:53.996 --> 00:16:55.976 A:middle
the user chose for that board,

00:16:56.306 --> 00:16:57.456 A:middle
deciding whether they're playing

00:16:57.456 --> 00:16:59.356 A:middle
on a, you know, a small table

00:16:59.356 --> 00:17:00.936 A:middle
top and surface, or they want to


00:16:59.356 --> 00:17:00.936 A:middle
top and surface, or they want to

00:17:00.936 --> 00:17:02.576 A:middle
blow the board up to be the size

00:17:02.576 --> 00:17:03.646 A:middle
of a basketball court.

00:17:04.106 --> 00:17:07.656 A:middle
We thought about, you know,

00:17:07.656 --> 00:17:08.646 A:middle
adding that to our network

00:17:08.646 --> 00:17:10.435 A:middle
protocol alongside the WorldMap,

00:17:10.826 --> 00:17:11.536 A:middle
but then we came up with a

00:17:11.536 --> 00:17:12.126 A:middle
better solution.

00:17:13.415 --> 00:17:15.455 A:middle
We created a custom subclass of

00:17:15.455 --> 00:17:16.836 A:middle
ARAnchor that we called board

00:17:16.836 --> 00:17:18.546 A:middle
anchor and added that

00:17:18.546 --> 00:17:20.165 A:middle
information to that class, the

00:17:20.165 --> 00:17:20.935 A:middle
size of the board.

00:17:22.236 --> 00:17:24.796 A:middle
We then made sure that we

00:17:24.796 --> 00:17:27.026 A:middle
implemented the NSCoding

00:17:27.026 --> 00:17:28.546 A:middle
required classes or override

00:17:28.546 --> 00:17:30.546 A:middle
them to include that information

00:17:30.866 --> 00:17:32.486 A:middle
when the object is serialized

00:17:32.486 --> 00:17:32.696 A:middle
out.

00:17:33.376 --> 00:17:35.076 A:middle
Now, the information is included

00:17:35.076 --> 00:17:36.476 A:middle
directly within the WorldMap

00:17:36.836 --> 00:17:38.066 A:middle
when we transfer it over to the

00:17:38.066 --> 00:17:38.776 A:middle
other device.

00:17:39.146 --> 00:17:40.166 A:middle
It makes it very easy and

00:17:40.166 --> 00:17:40.766 A:middle
straightforward.

00:17:42.116 --> 00:17:43.236 A:middle
One thing to keep in mind, and

00:17:43.236 --> 00:17:44.986 A:middle
this bit us for a little bit.

00:17:45.476 --> 00:17:47.996 A:middle
When you use Swift to make a

00:17:47.996 --> 00:17:50.036 A:middle
subclass like this, when you

00:17:50.036 --> 00:17:52.136 A:middle
serialize it out, the name of

00:17:52.136 --> 00:17:53.416 A:middle
the module or the name of your

00:17:53.416 --> 00:17:54.856 A:middle
application is included in the

00:17:54.856 --> 00:17:55.356 A:middle
class name.

00:17:56.016 --> 00:17:57.296 A:middle
This is something to be aware of

00:17:57.336 --> 00:17:58.406 A:middle
if you're planning to move

00:17:58.406 --> 00:17:59.786 A:middle
WorldMaps between different

00:17:59.786 --> 00:18:00.556 A:middle
applications.


00:17:59.786 --> 00:18:00.556 A:middle
applications.

00:18:01.016 --> 00:18:02.556 A:middle
NSKeyedArchiver can help you

00:18:02.666 --> 00:18:03.906 A:middle
accommodate that.

00:18:04.676 --> 00:18:06.306 A:middle
So, that's WorldMap sharing.

00:18:06.756 --> 00:18:08.976 A:middle
It's a new feature in iOS 12.

00:18:09.136 --> 00:18:10.156 A:middle
We're really looking forward to

00:18:10.156 --> 00:18:11.716 A:middle
seeing what everyone can build

00:18:12.376 --> 00:18:14.336 A:middle
with that.

00:18:14.536 --> 00:18:15.376 A:middle
Next, let's talk about the

00:18:15.376 --> 00:18:17.466 A:middle
networking we built into the

00:18:17.826 --> 00:18:17.936 A:middle
game.

00:18:17.936 --> 00:18:19.566 A:middle
We used iOS's multi-peer

00:18:19.566 --> 00:18:21.236 A:middle
connectivity API which has been

00:18:21.236 --> 00:18:22.906 A:middle
in the system since iOS 7 in

00:18:22.906 --> 00:18:23.746 A:middle
order to do this.

00:18:24.636 --> 00:18:25.856 A:middle
Multi-peer connectivity.

00:18:26.106 --> 00:18:27.146 A:middle
Allows us to set up a

00:18:27.146 --> 00:18:28.626 A:middle
peer-to-peer session on a local

00:18:28.626 --> 00:18:30.776 A:middle
network, allowing devices in the

00:18:30.776 --> 00:18:32.246 A:middle
session to communicate without

00:18:32.246 --> 00:18:33.206 A:middle
going through a dedicated

00:18:33.206 --> 00:18:33.516 A:middle
server.

00:18:34.506 --> 00:18:35.616 A:middle
Now, in our application, we

00:18:35.616 --> 00:18:37.126 A:middle
designate one of the devices as

00:18:37.126 --> 00:18:39.026 A:middle
the server but that's something

00:18:39.026 --> 00:18:40.286 A:middle
that we did for our application.

00:18:40.286 --> 00:18:41.146 A:middle
It's not inherent in the

00:18:41.146 --> 00:18:41.516 A:middle
protocol.

00:18:43.046 --> 00:18:44.346 A:middle
Encryption and authentication

00:18:44.346 --> 00:18:45.536 A:middle
are built into multi-peer

00:18:45.536 --> 00:18:46.146 A:middle
connectivity.

00:18:46.866 --> 00:18:48.006 A:middle
In our case, we didn't use

00:18:48.006 --> 00:18:49.436 A:middle
authentication because we wanted

00:18:49.436 --> 00:18:50.506 A:middle
a very quick in-and-out

00:18:50.506 --> 00:18:52.336 A:middle
experience but we did use

00:18:52.396 --> 00:18:52.966 A:middle
encryption.

00:18:53.516 --> 00:18:54.596 A:middle
We found that turning on

00:18:54.596 --> 00:18:56.276 A:middle
encryption really provided no

00:18:56.276 --> 00:18:58.016 A:middle
performance penalty, so there's

00:18:58.376 --> 00:19:00.936 A:middle
either in network data size or


00:18:58.376 --> 00:19:00.936 A:middle
either in network data size or

00:19:00.936 --> 00:19:01.536 A:middle
computation.

00:19:01.646 --> 00:19:02.666 A:middle
So there's really no reason not

00:19:02.666 --> 00:19:04.306 A:middle
to use it.

00:19:05.126 --> 00:19:06.616 A:middle
Multi-peer connectivity also

00:19:06.616 --> 00:19:08.596 A:middle
provides APIs for advertisements

00:19:08.696 --> 00:19:09.316 A:middle
and discovery.

00:19:09.846 --> 00:19:11.256 A:middle
We use this to broadcast

00:19:11.256 --> 00:19:12.476 A:middle
available games and allow

00:19:12.536 --> 00:19:13.596 A:middle
players to select a game to

00:19:14.226 --> 00:19:14.316 A:middle
join.

00:19:14.956 --> 00:19:16.056 A:middle
So, here's how we get that

00:19:16.056 --> 00:19:16.616 A:middle
session set up.

00:19:17.486 --> 00:19:19.116 A:middle
First, on one device, the user

00:19:19.116 --> 00:19:20.906 A:middle
decides to set themselves up as

00:19:20.906 --> 00:19:21.936 A:middle
hosts for the application.

00:19:23.356 --> 00:19:24.746 A:middle
They scan the world, place the

00:19:24.746 --> 00:19:27.456 A:middle
gameboard within that world, and

00:19:27.456 --> 00:19:29.026 A:middle
then the device starts a new

00:19:29.026 --> 00:19:30.516 A:middle
session, a multi-peer

00:19:30.516 --> 00:19:31.966 A:middle
connectivity session, and starts

00:19:31.966 --> 00:19:33.486 A:middle
advertising it to other devices

00:19:33.486 --> 00:19:34.806 A:middle
on the local network.

00:19:35.476 --> 00:19:37.866 A:middle
A user on the other device sees

00:19:37.866 --> 00:19:39.036 A:middle
a list of available games.

00:19:39.546 --> 00:19:41.856 A:middle
When he selects one, his device

00:19:41.856 --> 00:19:42.916 A:middle
sends a request to join the

00:19:42.916 --> 00:19:43.716 A:middle
existing session.

00:19:45.276 --> 00:19:47.186 A:middle
Once the first device accepts

00:19:47.186 --> 00:19:48.346 A:middle
the request, multi-peer

00:19:48.346 --> 00:19:49.686 A:middle
connectivity sets up a true

00:19:49.686 --> 00:19:50.526 A:middle
peer-to-peer network.

00:19:51.086 --> 00:19:53.226 A:middle
Any device in the network can

00:19:53.226 --> 00:19:54.266 A:middle
send a message to any other

00:19:54.266 --> 00:19:55.126 A:middle
device in the network.

00:19:55.976 --> 00:19:58.246 A:middle
In SwiftShot, we designate the

00:19:58.246 --> 00:19:59.576 A:middle
device that started the session

00:19:59.576 --> 00:20:00.796 A:middle
as the source of truth for the


00:19:59.576 --> 00:20:00.796 A:middle
as the source of truth for the

00:20:00.796 --> 00:20:01.336 A:middle
game state.

00:20:01.736 --> 00:20:03.226 A:middle
But again, that's the decision

00:20:03.226 --> 00:20:04.166 A:middle
we layered on top of the

00:20:04.166 --> 00:20:05.636 A:middle
networking protocol; it's not

00:20:05.636 --> 00:20:06.566 A:middle
inherent in multi-peer

00:20:06.566 --> 00:20:07.116 A:middle
connectivity.

00:20:07.536 --> 00:20:11.696 A:middle
Once the session is set up,

00:20:11.696 --> 00:20:13.366 A:middle
multi-peer connectivity lets us

00:20:13.366 --> 00:20:15.006 A:middle
send data between peers in three

00:20:15.006 --> 00:20:15.416 A:middle
ways.

00:20:15.946 --> 00:20:17.096 A:middle
As data packets.

00:20:17.716 --> 00:20:19.906 A:middle
As resources, file URLs on the

00:20:19.906 --> 00:20:20.636 A:middle
local storage.

00:20:21.096 --> 00:20:21.946 A:middle
And as streams.

00:20:22.716 --> 00:20:23.986 A:middle
Data objects can be sent,

00:20:23.986 --> 00:20:25.216 A:middle
broadcast to all peers in the

00:20:25.216 --> 00:20:27.366 A:middle
network whereas resources and

00:20:27.366 --> 00:20:28.766 A:middle
streams are device to device.

00:20:29.026 --> 00:20:32.196 A:middle
In SwiftShot, we use the data

00:20:32.196 --> 00:20:33.816 A:middle
packets primarily as a way to

00:20:33.816 --> 00:20:35.676 A:middle
share game events and also the

00:20:35.676 --> 00:20:36.256 A:middle
physics state.

00:20:36.566 --> 00:20:38.886 A:middle
We'll talk about that later on.

00:20:38.886 --> 00:20:40.206 A:middle
And then we used the resources

00:20:40.206 --> 00:20:41.186 A:middle
to transfer the WorldMap.

00:20:41.186 --> 00:20:43.146 A:middle
It ended up we didn't need

00:20:43.146 --> 00:20:44.176 A:middle
streams for our application.

00:20:44.656 --> 00:20:47.456 A:middle
Under the covers, multi-peer

00:20:47.456 --> 00:20:49.326 A:middle
connectivity relies on UDP for

00:20:49.326 --> 00:20:50.736 A:middle
the transfer between devices.

00:20:51.366 --> 00:20:53.726 A:middle
This gives a low latency for,

00:20:53.896 --> 00:20:55.156 A:middle
great for applications like

00:20:55.156 --> 00:20:55.506 A:middle
games.

00:20:56.536 --> 00:20:57.926 A:middle
Now, UDP inherently doesn't

00:20:57.926 --> 00:20:59.436 A:middle
guarantee delivery, so

00:20:59.436 --> 00:21:00.886 A:middle
multi-peer connectivity lets you


00:20:59.436 --> 00:21:00.886 A:middle
multi-peer connectivity lets you

00:21:00.886 --> 00:21:02.786 A:middle
make that decision and specify

00:21:02.786 --> 00:21:04.206 A:middle
whether a particular data packet

00:21:04.206 --> 00:21:06.016 A:middle
is to be sent reliably or

00:21:06.016 --> 00:21:06.626 A:middle
unreliably.

00:21:07.556 --> 00:21:08.716 A:middle
If you choose reliably,

00:21:09.246 --> 00:21:10.606 A:middle
multi-peer connectivity takes

00:21:10.606 --> 00:21:12.046 A:middle
care of the retries for you, so

00:21:12.176 --> 00:21:13.316 A:middle
you don't have to worry about

00:21:13.346 --> 00:21:15.876 A:middle
that in your code.

00:21:15.876 --> 00:21:17.426 A:middle
Even when you're broadcasting to

00:21:17.426 --> 00:21:18.676 A:middle
all members of the session.

00:21:18.676 --> 00:21:22.686 A:middle
Now that we have a networking

00:21:22.686 --> 00:21:24.106 A:middle
layer, we need to build our

00:21:24.106 --> 00:21:25.446 A:middle
application protocol on top of

00:21:26.166 --> 00:21:26.236 A:middle
it.

00:21:26.456 --> 00:21:28.456 A:middle
SwiftEnums with associated types

00:21:28.736 --> 00:21:29.756 A:middle
make this very easy.

00:21:30.736 --> 00:21:32.416 A:middle
Each case has a data structure

00:21:32.416 --> 00:21:34.356 A:middle
around it, ensuring type safety

00:21:34.606 --> 00:21:35.896 A:middle
as information moves around the

00:21:35.896 --> 00:21:36.266 A:middle
system.

00:21:37.496 --> 00:21:39.056 A:middle
Some of those can be further

00:21:39.056 --> 00:21:39.496 A:middle
enums.

00:21:39.866 --> 00:21:40.766 A:middle
So, for instance, in this

00:21:40.766 --> 00:21:42.446 A:middle
example, gameAction includes

00:21:42.446 --> 00:21:43.806 A:middle
things like a player grabbed a

00:21:43.806 --> 00:21:44.386 A:middle
catapult.

00:21:44.386 --> 00:21:46.076 A:middle
A projectile launched, and so

00:21:46.076 --> 00:21:46.386 A:middle
forth.

00:21:47.166 --> 00:21:48.966 A:middle
The PhysicsSyncData is a strut

00:21:49.096 --> 00:21:50.476 A:middle
and we'll talk more about how we

00:21:50.476 --> 00:21:52.336 A:middle
encoded that later on.

00:21:53.316 --> 00:21:55.046 A:middle
Again, Swift makes this very

00:21:55.046 --> 00:21:55.276 A:middle
easy.

00:21:55.576 --> 00:21:57.206 A:middle
For struts, if all the members

00:21:57.206 --> 00:21:59.136 A:middle
of the struct are codable, then

00:21:59.136 --> 00:22:00.756 A:middle
all you need to do is mark that


00:21:59.136 --> 00:22:00.756 A:middle
all you need to do is mark that

00:22:00.756 --> 00:22:02.406 A:middle
struct as codable and the Swift

00:22:02.406 --> 00:22:03.646 A:middle
compiler takes care of the rest,

00:22:04.096 --> 00:22:05.286 A:middle
building all the infrastructure

00:22:05.286 --> 00:22:06.596 A:middle
needed for the serialization.

00:22:07.006 --> 00:22:09.706 A:middle
Swift doesn't do that for enums

00:22:09.936 --> 00:22:11.456 A:middle
and so we ended up implementing

00:22:11.456 --> 00:22:14.226 A:middle
that ourselves, implementing the

00:22:14.226 --> 00:22:16.806 A:middle
init and then coding method from

00:22:16.806 --> 00:22:18.766 A:middle
the codable protocol to make

00:22:19.196 --> 00:22:20.716 A:middle
that work.

00:22:20.906 --> 00:22:22.596 A:middle
Serialization then is very easy.

00:22:22.806 --> 00:22:23.926 A:middle
Just build a property listing

00:22:23.926 --> 00:22:25.426 A:middle
coder and have it encode the

00:22:25.426 --> 00:22:26.146 A:middle
object out for you.

00:22:26.786 --> 00:22:28.986 A:middle
We can then send a data packet

00:22:29.246 --> 00:22:30.056 A:middle
within the multi-peer

00:22:30.056 --> 00:22:30.986 A:middle
connectivity session.

00:22:32.026 --> 00:22:33.466 A:middle
Now, a reasonable question here

00:22:33.466 --> 00:22:35.206 A:middle
might be how's this going to do

00:22:35.206 --> 00:22:37.166 A:middle
in size and performance?

00:22:38.626 --> 00:22:39.956 A:middle
Property-- binary property lists

00:22:39.956 --> 00:22:41.116 A:middle
are pretty compact and the

00:22:41.116 --> 00:22:42.506 A:middle
encoder's pretty fast.

00:22:43.496 --> 00:22:45.466 A:middle
But sometimes, you know, the

00:22:45.466 --> 00:22:47.216 A:middle
soft implementation in many ways

00:22:47.216 --> 00:22:49.256 A:middle
is optimized for developer time,

00:22:49.356 --> 00:22:50.406 A:middle
which is sometimes your most

00:22:50.406 --> 00:22:51.756 A:middle
precious resource on a project.

00:22:52.646 --> 00:22:55.146 A:middle
Now, we ran up against some of

00:22:55.146 --> 00:22:56.426 A:middle
those limitations as we started

00:22:56.426 --> 00:22:57.836 A:middle
to build the next feature, and

00:22:57.836 --> 00:22:59.026 A:middle
we'll talk about how we overcame

00:22:59.746 --> 00:22:59.866 A:middle
this.


00:23:01.576 --> 00:23:03.046 A:middle
So, let's talk next about the

00:23:03.046 --> 00:23:04.326 A:middle
physics simulation in the game.

00:23:04.616 --> 00:23:06.106 A:middle
For a game like SwiftShot,

00:23:06.726 --> 00:23:08.156 A:middle
physics is really key to create

00:23:08.156 --> 00:23:10.206 A:middle
a fun interaction that comes

00:23:10.206 --> 00:23:11.296 A:middle
from the realistic interaction

00:23:11.296 --> 00:23:12.316 A:middle
between objects and the game.

00:23:12.816 --> 00:23:14.146 A:middle
It's a really great experience

00:23:14.146 --> 00:23:16.106 A:middle
to take that shot and bounce it

00:23:16.106 --> 00:23:17.556 A:middle
off an object in a game and take

00:23:17.556 --> 00:23:18.526 A:middle
out the opponent's slingshot.

00:23:19.346 --> 00:23:20.676 A:middle
And that really comes from the

00:23:20.676 --> 00:23:21.466 A:middle
physics simulation.

00:23:23.716 --> 00:23:25.066 A:middle
We use SceneKit's built-in

00:23:25.066 --> 00:23:25.656 A:middle
physics engine.

00:23:25.986 --> 00:23:26.886 A:middle
It's integrated with the

00:23:26.886 --> 00:23:28.336 A:middle
rendering engine, updating

00:23:28.386 --> 00:23:29.476 A:middle
positions of the object and

00:23:29.526 --> 00:23:30.996 A:middle
scene automatically, and

00:23:30.996 --> 00:23:32.676 A:middle
informing us of collisions using

00:23:32.676 --> 00:23:33.196 A:middle
delegation.

00:23:34.616 --> 00:23:35.966 A:middle
In our implementation, we

00:23:35.966 --> 00:23:37.286 A:middle
decided that the best approach

00:23:37.356 --> 00:23:39.426 A:middle
was for one device in the

00:23:39.426 --> 00:23:40.516 A:middle
session to act as a source of

00:23:40.546 --> 00:23:41.576 A:middle
truth or server.

00:23:42.296 --> 00:23:44.306 A:middle
It sends periodic updates about

00:23:44.306 --> 00:23:45.846 A:middle
the physics state to the other

00:23:45.846 --> 00:23:47.596 A:middle
devices in the network using

00:23:47.596 --> 00:23:49.026 A:middle
that multi-peer connectivity

00:23:49.296 --> 00:23:50.876 A:middle
broadcast method.

00:23:52.706 --> 00:23:55.716 A:middle
Now, the other devices also have

00:23:55.756 --> 00:23:56.986 A:middle
the physics simulation on.

00:23:57.736 --> 00:23:58.856 A:middle
That's because we don't send

00:23:58.856 --> 00:24:00.436 A:middle
information about every object


00:23:58.856 --> 00:24:00.436 A:middle
information about every object

00:24:00.436 --> 00:24:02.246 A:middle
in the game, only those objects

00:24:02.246 --> 00:24:03.156 A:middle
that are relevant to the

00:24:03.156 --> 00:24:04.606 A:middle
gameplay such as the box,

00:24:04.606 --> 00:24:06.066 A:middle
projectile and catapult.

00:24:06.666 --> 00:24:09.216 A:middle
Things like simulating the

00:24:09.216 --> 00:24:10.286 A:middle
swinging of the rope and the

00:24:10.286 --> 00:24:13.136 A:middle
sling, particles and so forth,

00:24:13.656 --> 00:24:15.446 A:middle
those are just done locally on

00:24:15.446 --> 00:24:16.726 A:middle
each device since it's not

00:24:16.726 --> 00:24:18.166 A:middle
critical to the game that they

00:24:18.166 --> 00:24:19.166 A:middle
be in the same place on every

00:24:19.166 --> 00:24:19.646 A:middle
device.

00:24:20.526 --> 00:24:24.886 A:middle
Now, one of the things that we

00:24:24.886 --> 00:24:26.016 A:middle
discovered was when we were

00:24:26.016 --> 00:24:28.366 A:middle
doing this was that the physics

00:24:28.366 --> 00:24:29.336 A:middle
engine responded very

00:24:29.336 --> 00:24:30.466 A:middle
differently depending on the

00:24:30.466 --> 00:24:31.616 A:middle
scale of the objects.

00:24:32.246 --> 00:24:33.966 A:middle
And so the physics simulation

00:24:33.966 --> 00:24:35.466 A:middle
thinks the objects are about 10

00:24:35.466 --> 00:24:36.876 A:middle
times the size as you would see

00:24:36.876 --> 00:24:37.676 A:middle
them in the real world.

00:24:38.316 --> 00:24:39.386 A:middle
We found that gave the best

00:24:39.466 --> 00:24:41.756 A:middle
gameplay experience and the best

00:24:41.756 --> 00:24:42.336 A:middle
performance.

00:24:42.936 --> 00:24:44.516 A:middle
We had to tweak some of the laws

00:24:44.516 --> 00:24:45.766 A:middle
of physics to make that look

00:24:45.766 --> 00:24:47.216 A:middle
right but, you know, when you're

00:24:47.216 --> 00:24:48.616 A:middle
building a game, if it looks

00:24:48.616 --> 00:24:49.966 A:middle
right and feels right and it's

00:24:49.966 --> 00:24:53.616 A:middle
fun, then it is right.

00:24:53.856 --> 00:24:55.426 A:middle
Now, to share that physics state

00:24:55.586 --> 00:24:56.546 A:middle
and make sure everything looked

00:24:56.546 --> 00:24:57.996 A:middle
right, we need to share four

00:24:57.996 --> 00:24:59.056 A:middle
pieces of information.

00:24:59.646 --> 00:25:00.336 A:middle
The position.


00:24:59.646 --> 00:25:00.336 A:middle
The position.

00:25:01.956 --> 00:25:03.026 A:middle
The velocity.

00:25:04.356 --> 00:25:05.856 A:middle
The angular velocity.

00:25:05.856 --> 00:25:07.486 A:middle
And the orientation.

00:25:07.936 --> 00:25:09.566 A:middle
That's a lot of information

00:25:09.566 --> 00:25:10.666 A:middle
about every object in the game,

00:25:11.056 --> 00:25:12.846 A:middle
so it was vital that we minimize

00:25:12.846 --> 00:25:13.886 A:middle
the number of bits actually

00:25:13.886 --> 00:25:14.256 A:middle
used.

00:25:15.006 --> 00:25:16.266 A:middle
I'll walk you through that using

00:25:16.266 --> 00:25:18.946 A:middle
position as an example.

00:25:18.946 --> 00:25:20.556 A:middle
SceneKit represents position as

00:25:20.556 --> 00:25:21.926 A:middle
a vector of three floating point

00:25:21.926 --> 00:25:22.406 A:middle
values.

00:25:22.766 --> 00:25:24.996 A:middle
This is the native format and

00:25:24.996 --> 00:25:26.646 A:middle
gives the best performance for

00:25:26.646 --> 00:25:27.896 A:middle
calculations at run time.

00:25:28.346 --> 00:25:31.416 A:middle
However, there are really more

00:25:31.416 --> 00:25:33.416 A:middle
bits than necessary to specify

00:25:33.416 --> 00:25:34.366 A:middle
the object's location.

00:25:35.226 --> 00:25:37.256 A:middle
A 30-bit float has 8-bits of

00:25:37.256 --> 00:25:38.686 A:middle
exponent and 23 bits of

00:25:38.686 --> 00:25:39.256 A:middle
mantissa.

00:25:39.366 --> 00:25:41.386 A:middle
For a range of plus or minus 10

00:25:41.386 --> 00:25:42.656 A:middle
to the 38th meters.

00:25:42.976 --> 00:25:44.566 A:middle
It's way more than we need for

00:25:44.566 --> 00:25:47.166 A:middle
this game.

00:25:47.366 --> 00:25:48.506 A:middle
So, because the physics

00:25:48.506 --> 00:25:50.026 A:middle
simulation thinks our table is

00:25:50.126 --> 00:25:52.486 A:middle
28 meters long, we said you

00:25:52.486 --> 00:25:54.006 A:middle
know, 80 meters is going to give

00:25:54.006 --> 00:25:55.506 A:middle
us plenty of buffer space around

00:25:55.506 --> 00:25:56.506 A:middle
that on either side.

00:25:57.816 --> 00:25:59.876 A:middle
When we're coding that then,


00:26:00.876 --> 00:26:02.856 A:middle
we're able to eliminate the sign

00:26:02.856 --> 00:26:05.666 A:middle
bit by normalizing that between

00:26:05.666 --> 00:26:07.206 A:middle
0 and 80 meters, even though our

00:26:07.206 --> 00:26:08.356 A:middle
origin is at the center of the

00:26:08.356 --> 00:26:08.646 A:middle
table.

00:26:09.446 --> 00:26:10.556 A:middle
Now all values are positive.

00:26:11.196 --> 00:26:13.966 A:middle
We then scale that value to be

00:26:13.966 --> 00:26:15.096 A:middle
in a range of 0 to 1.

00:26:15.696 --> 00:26:16.636 A:middle
That way we don't need the

00:26:16.636 --> 00:26:17.866 A:middle
exponent information that's

00:26:17.866 --> 00:26:20.626 A:middle
inherent in the protocol.

00:26:21.176 --> 00:26:24.366 A:middle
And then lastly, we take that

00:26:24.366 --> 00:26:25.786 A:middle
and we scale it to the number of

00:26:25.786 --> 00:26:29.136 A:middle
bits available so that all 1s is

00:26:29.266 --> 00:26:31.876 A:middle
a floating point 1 and all 0s is

00:26:31.876 --> 00:26:32.806 A:middle
the floating point 0.

00:26:34.126 --> 00:26:35.356 A:middle
This gave us millimeter scale

00:26:35.356 --> 00:26:37.376 A:middle
precision which, as we

00:26:37.376 --> 00:26:39.296 A:middle
discovered, was really enough to

00:26:39.296 --> 00:26:40.716 A:middle
achieve that smooth synchronous

00:26:40.906 --> 00:26:43.296 A:middle
appearance in the game.

00:26:43.436 --> 00:26:44.816 A:middle
Now, we did a similar technique

00:26:44.816 --> 00:26:46.026 A:middle
for all the other values that

00:26:46.026 --> 00:26:46.546 A:middle
you saw.

00:26:46.716 --> 00:26:48.526 A:middle
The velocity, angular velocity

00:26:48.666 --> 00:26:49.466 A:middle
and orientation.

00:26:50.336 --> 00:26:52.326 A:middle
Tailing the ranges and the

00:26:52.326 --> 00:26:53.906 A:middle
number of bits for each to

00:26:53.906 --> 00:26:54.806 A:middle
really make sure that we

00:26:55.226 --> 00:26:56.526 A:middle
transmit the information using

00:26:56.526 --> 00:26:57.436 A:middle
the minimal amount of data.

00:26:58.096 --> 00:27:00.356 A:middle
Overall, we reduce the number of


00:26:58.096 --> 00:27:00.356 A:middle
Overall, we reduce the number of

00:27:00.356 --> 00:27:02.126 A:middle
bits for each object by more

00:27:02.916 --> 00:27:04.706 A:middle
than half.

00:27:04.706 --> 00:27:05.656 A:middle
Now, even though we've

00:27:05.706 --> 00:27:08.106 A:middle
compressed the numbers, property

00:27:08.106 --> 00:27:09.616 A:middle
lists still have a fair amount

00:27:09.616 --> 00:27:11.526 A:middle
of overhead for the metadata

00:27:11.526 --> 00:27:13.466 A:middle
around it, sending each field by

00:27:13.466 --> 00:27:13.686 A:middle
name.

00:27:14.796 --> 00:27:16.226 A:middle
We said there's no reason for

00:27:16.226 --> 00:27:16.436 A:middle
that.

00:27:16.866 --> 00:27:17.886 A:middle
We all know what these objects

00:27:17.886 --> 00:27:18.106 A:middle
are.

00:27:18.106 --> 00:27:19.786 A:middle
That's not information we need.

00:27:20.446 --> 00:27:24.456 A:middle
So, to do this, we implemented a

00:27:24.456 --> 00:27:26.386 A:middle
new serialization strategy which

00:27:26.386 --> 00:27:27.136 A:middle
we call a BitStream.

00:27:28.416 --> 00:27:29.826 A:middle
BitStreams are designed to pack

00:27:29.876 --> 00:27:31.066 A:middle
the information into as few

00:27:31.066 --> 00:27:32.926 A:middle
bytes as possible by providing

00:27:32.926 --> 00:27:34.216 A:middle
fast serialization and

00:27:34.216 --> 00:27:34.986 A:middle
deserialization.

00:27:34.986 --> 00:27:36.966 A:middle
Now, our implementation is

00:27:36.996 --> 00:27:38.716 A:middle
purpose-built for communicating

00:27:38.716 --> 00:27:40.956 A:middle
binary data with low latency in

00:27:40.956 --> 00:27:42.056 A:middle
an application like this.

00:27:42.916 --> 00:27:44.706 A:middle
Strategies like this wouldn't

00:27:44.706 --> 00:27:47.036 A:middle
work well for data that needs to

00:27:47.036 --> 00:27:48.946 A:middle
persist or data that, where you

00:27:48.946 --> 00:27:50.256 A:middle
need to keep track of the schema

00:27:50.476 --> 00:27:51.626 A:middle
and watch it changing over time.

00:27:52.526 --> 00:27:54.376 A:middle
But for an ephemeral application

00:27:54.376 --> 00:27:55.576 A:middle
like this, it was just the

00:27:55.986 --> 00:27:56.096 A:middle
thing.

00:27:57.896 --> 00:27:59.316 A:middle
To help implement this, we

00:27:59.316 --> 00:28:01.606 A:middle
created two protocols, BitStream


00:27:59.316 --> 00:28:01.606 A:middle
created two protocols, BitStream

00:28:01.606 --> 00:28:03.216 A:middle
Encodable and BitStream

00:28:03.216 --> 00:28:03.796 A:middle
Decodable.

00:28:04.576 --> 00:28:05.616 A:middle
Combine those and you get

00:28:05.616 --> 00:28:06.376 A:middle
BitStream Codable.

00:28:07.266 --> 00:28:09.186 A:middle
Then we took that and marked all

00:28:09.186 --> 00:28:10.416 A:middle
the objects that we needed to

00:28:10.416 --> 00:28:12.176 A:middle
serialize, using that protocol,

00:28:12.176 --> 00:28:12.926 A:middle
helping us to get the

00:28:12.926 --> 00:28:13.576 A:middle
implementation.

00:28:14.106 --> 00:28:16.006 A:middle
That includes both our own data

00:28:16.006 --> 00:28:17.266 A:middle
objects and the object we use

00:28:17.266 --> 00:28:19.916 A:middle
from the system such as the simD

00:28:20.226 --> 00:28:22.886 A:middle
floating point vector type.

00:28:24.936 --> 00:28:26.556 A:middle
So, here's the implementation of

00:28:26.556 --> 00:28:27.856 A:middle
compressing floats.

00:28:28.526 --> 00:28:30.006 A:middle
The compressors, configured with

00:28:30.006 --> 00:28:31.436 A:middle
the minimum and maximum range,

00:28:31.656 --> 00:28:32.866 A:middle
and the number of bits we wanted

00:28:32.866 --> 00:28:33.326 A:middle
to use.

00:28:34.646 --> 00:28:36.786 A:middle
It clamps the value to the range

00:28:37.036 --> 00:28:37.996 A:middle
and then converts it to an

00:28:37.996 --> 00:28:40.396 A:middle
integer value for encoding using

00:28:40.396 --> 00:28:42.326 A:middle
the specified number of bits.

00:28:42.836 --> 00:28:44.326 A:middle
Each component for each object

00:28:44.326 --> 00:28:45.406 A:middle
in the scene is compressed in

00:28:45.406 --> 00:28:45.716 A:middle
this way.

00:28:46.616 --> 00:28:48.316 A:middle
We also use an additional bit at

00:28:48.316 --> 00:28:49.766 A:middle
the front to tell if an object

00:28:49.766 --> 00:28:51.306 A:middle
has moved since the last update.

00:28:52.026 --> 00:28:53.716 A:middle
If it hasn't moved, we don't

00:28:53.716 --> 00:28:54.716 A:middle
resend that information.

00:28:56.696 --> 00:28:58.746 A:middle
So, let's go back to our action

00:28:58.746 --> 00:28:59.716 A:middle
enum, with the three different

00:28:59.716 --> 00:29:00.816 A:middle
actions to talk about how we


00:28:59.716 --> 00:29:00.816 A:middle
actions to talk about how we

00:29:00.816 --> 00:29:03.726 A:middle
apply BitStream to do this.

00:29:03.866 --> 00:29:05.886 A:middle
For regular codable, if you're

00:29:05.886 --> 00:29:07.636 A:middle
doing your own serialization,

00:29:07.636 --> 00:29:09.606 A:middle
you specify encoding keys for

00:29:09.606 --> 00:29:10.896 A:middle
enums for the different cases in

00:29:10.896 --> 00:29:11.246 A:middle
the enum.

00:29:12.106 --> 00:29:13.766 A:middle
For BitStream, we used integer

00:29:13.766 --> 00:29:15.496 A:middle
values for this rather than

00:29:15.706 --> 00:29:16.746 A:middle
string values.

00:29:17.296 --> 00:29:19.926 A:middle
And then in our encoding method,

00:29:20.426 --> 00:29:22.486 A:middle
we're able to then append that

00:29:22.486 --> 00:29:24.326 A:middle
value first followed by the data

00:29:24.326 --> 00:29:26.346 A:middle
structure associated with that

00:29:26.536 --> 00:29:27.426 A:middle
case of the enum.

00:29:27.916 --> 00:29:29.416 A:middle
Now, if you look at this code

00:29:29.416 --> 00:29:30.706 A:middle
though, there's kind of a pit

00:29:30.706 --> 00:29:31.096 A:middle
fall here.

00:29:31.836 --> 00:29:33.646 A:middle
We know that this one has, this

00:29:33.766 --> 00:29:36.466 A:middle
case has three different cases.

00:29:37.256 --> 00:29:38.746 A:middle
And so we only need two bits to

00:29:38.746 --> 00:29:39.766 A:middle
encode it.

00:29:40.376 --> 00:29:42.326 A:middle
But what happens when we add

00:29:42.506 --> 00:29:44.236 A:middle
another case, 4 bits with 4

00:29:44.236 --> 00:29:45.366 A:middle
cases, we'll still find.

00:29:45.806 --> 00:29:47.506 A:middle
We add that fifth case and now

00:29:47.506 --> 00:29:49.676 A:middle
we need to go through and change

00:29:49.676 --> 00:29:51.416 A:middle
that so that every time we do

00:29:51.416 --> 00:29:52.716 A:middle
this, we're using three bits

00:29:52.716 --> 00:29:53.336 A:middle
instead of two.

00:29:54.086 --> 00:29:55.486 A:middle
Now, that's kind of tedious.

00:29:55.486 --> 00:29:56.266 A:middle
This code's a little bit

00:29:56.266 --> 00:29:58.286 A:middle
repetitive and, you know,

00:29:58.416 --> 00:29:59.366 A:middle
there's stuff that could go

00:29:59.366 --> 00:29:59.726 A:middle
wrong there.

00:29:59.726 --> 00:30:00.996 A:middle
We really, if we don't remember


00:29:59.726 --> 00:30:00.996 A:middle
We really, if we don't remember

00:30:00.996 --> 00:30:01.866 A:middle
this, we're just going to end up

00:30:01.866 --> 00:30:02.576 A:middle
in a bad place.

00:30:03.836 --> 00:30:05.706 A:middle
So, we took a look at this and

00:30:05.706 --> 00:30:07.116 A:middle
figured out that there was a way

00:30:07.116 --> 00:30:10.896 A:middle
that Swift can help us do this.

00:30:11.096 --> 00:30:12.406 A:middle
So, we used a new feature in

00:30:12.406 --> 00:30:14.956 A:middle
Swift 4.2, which is case

00:30:14.956 --> 00:30:15.386 A:middle
iterable.

00:30:16.336 --> 00:30:19.386 A:middle
We added that protocol

00:30:19.816 --> 00:30:21.606 A:middle
compliance to our enum type.

00:30:22.536 --> 00:30:24.696 A:middle
When you do that, Swift adds a

00:30:24.696 --> 00:30:26.596 A:middle
new static member of the type

00:30:26.886 --> 00:30:28.336 A:middle
called all cases, containing

00:30:28.336 --> 00:30:29.856 A:middle
each of the cases in the enum.

00:30:30.676 --> 00:30:32.216 A:middle
That lets us automatically get a

00:30:32.216 --> 00:30:33.826 A:middle
count of the number of cases.

00:30:34.976 --> 00:30:36.436 A:middle
We then added another extension,

00:30:36.816 --> 00:30:37.706 A:middle
this time on the raw

00:30:37.706 --> 00:30:39.426 A:middle
representable type which all

00:30:39.426 --> 00:30:41.146 A:middle
enums with number types like

00:30:41.146 --> 00:30:42.466 A:middle
that conform to.

00:30:43.106 --> 00:30:44.726 A:middle
Where it's case iterable and

00:30:44.726 --> 00:30:45.736 A:middle
where that number is affixed

00:30:45.736 --> 00:30:46.256 A:middle
with integer.

00:30:47.036 --> 00:30:47.876 A:middle
And to this, we get to

00:30:47.876 --> 00:30:49.616 A:middle
automatically take those number

00:30:49.616 --> 00:30:51.176 A:middle
of cases and figure out how many

00:30:51.176 --> 00:30:53.246 A:middle
bits it takes to represent all

00:30:53.246 --> 00:30:56.176 A:middle
those cases on the wire.

00:30:56.376 --> 00:30:58.386 A:middle
Lastly, we added a generic

00:30:58.386 --> 00:31:00.606 A:middle
method on the writable BitStream


00:30:58.386 --> 00:31:00.606 A:middle
method on the writable BitStream

00:31:00.606 --> 00:31:02.526 A:middle
type allowing us to encode that

00:31:02.526 --> 00:31:02.756 A:middle
enum.

00:31:03.436 --> 00:31:04.696 A:middle
It appends things of that type

00:31:04.696 --> 00:31:06.306 A:middle
and it uses that new static

00:31:06.306 --> 00:31:07.656 A:middle
property to figure out the

00:31:07.656 --> 00:31:09.306 A:middle
number of bits that are needed

00:31:09.966 --> 00:31:11.536 A:middle
to use.

00:31:11.736 --> 00:31:13.336 A:middle
Now, our encode method is much

00:31:13.336 --> 00:31:13.716 A:middle
simpler.

00:31:14.246 --> 00:31:16.566 A:middle
We just used append enum on the

00:31:16.566 --> 00:31:18.086 A:middle
proper coding key for each and

00:31:18.086 --> 00:31:19.256 A:middle
Swift takes care of the rest.

00:31:19.576 --> 00:31:21.186 A:middle
When we add more cases to the

00:31:21.186 --> 00:31:22.996 A:middle
enum, the BitField expands

00:31:22.996 --> 00:31:23.576 A:middle
automatically.

00:31:24.016 --> 00:31:25.656 A:middle
If we remove cases, it contracts

00:31:25.656 --> 00:31:26.266 A:middle
automatically.

00:31:26.546 --> 00:31:28.246 A:middle
We don't have to worry about it.

00:31:31.356 --> 00:31:32.676 A:middle
So, how much faster and more

00:31:32.676 --> 00:31:34.466 A:middle
compact is BitStreamCodable?

00:31:35.066 --> 00:31:36.976 A:middle
We ran some tests using XE test

00:31:36.976 --> 00:31:38.286 A:middle
support for performance testing

00:31:38.706 --> 00:31:40.106 A:middle
using a representative message

00:31:40.106 --> 00:31:41.356 A:middle
in which we send information

00:31:41.356 --> 00:31:42.366 A:middle
about object movement.

00:31:43.716 --> 00:31:44.826 A:middle
The results were pretty

00:31:44.826 --> 00:31:46.666 A:middle
impressive - 1/10 the size,

00:31:46.666 --> 00:31:48.436 A:middle
twice as fast to code, 10 times

00:31:48.436 --> 00:31:49.276 A:middle
as fast to decode.

00:31:50.196 --> 00:31:51.536 A:middle
Now when we talk about going

00:31:51.536 --> 00:31:53.906 A:middle
from 75 microseconds down to 6

00:31:53.906 --> 00:31:55.246 A:middle
microseconds, that seems like

00:31:55.246 --> 00:31:56.056 A:middle
small potatoes.

00:31:56.186 --> 00:31:58.206 A:middle
But there's around 200 objects

00:31:58.206 --> 00:31:59.436 A:middle
in the game and we want to do

00:31:59.436 --> 00:32:00.626 A:middle
this very frequently to make


00:31:59.436 --> 00:32:00.626 A:middle
this very frequently to make

00:32:00.626 --> 00:32:02.046 A:middle
sure the game remains smooth for

00:32:02.046 --> 00:32:02.946 A:middle
all participants.

00:32:03.546 --> 00:32:04.926 A:middle
By using this encoding format,

00:32:05.066 --> 00:32:06.466 A:middle
we were able to do those physics

00:32:06.466 --> 00:32:09.266 A:middle
updates at 60 fps, ensuring that

00:32:09.266 --> 00:32:10.416 A:middle
you get a smooth experience for

00:32:10.416 --> 00:32:12.746 A:middle
everyone in the game.

00:32:13.456 --> 00:32:15.326 A:middle
Now, I've talked about this.

00:32:15.326 --> 00:32:16.826 A:middle
We did some things with codable

00:32:16.826 --> 00:32:17.896 A:middle
and some things with BitStream

00:32:17.896 --> 00:32:19.606 A:middle
Codable that, you could have a

00:32:19.606 --> 00:32:20.556 A:middle
problem there because we're

00:32:20.556 --> 00:32:21.586 A:middle
encoding things two different

00:32:21.586 --> 00:32:21.886 A:middle
ways.

00:32:22.306 --> 00:32:23.246 A:middle
And that means now we need to

00:32:23.246 --> 00:32:24.176 A:middle
have two different code paths

00:32:24.176 --> 00:32:24.956 A:middle
through our application.

00:32:26.146 --> 00:32:27.736 A:middle
Swift helps us out again and

00:32:27.736 --> 00:32:28.476 A:middle
lets us figure out how to

00:32:28.476 --> 00:32:29.626 A:middle
combine them.

00:32:30.166 --> 00:32:32.156 A:middle
We then added constrained

00:32:32.156 --> 00:32:34.416 A:middle
extensions so that anything that

00:32:34.416 --> 00:32:36.346 A:middle
is codable in BitStream Codable,

00:32:36.666 --> 00:32:37.646 A:middle
we provide default

00:32:37.646 --> 00:32:39.346 A:middle
implementation of the BitStream

00:32:39.346 --> 00:32:39.766 A:middle
encoding.

00:32:39.766 --> 00:32:42.816 A:middle
And then we just go ahead and

00:32:42.816 --> 00:32:45.166 A:middle
use a binary [inaudible] encoder

00:32:45.876 --> 00:32:47.506 A:middle
to encode the data and stuff it

00:32:47.506 --> 00:32:48.056 A:middle
into BitStream.

00:32:48.866 --> 00:32:51.576 A:middle
And then anything, any struct

00:32:51.576 --> 00:32:52.766 A:middle
that is codable, we just add

00:32:52.766 --> 00:32:53.896 A:middle
that by marking it BitStream

00:32:53.896 --> 00:32:54.226 A:middle
Codable.

00:32:54.956 --> 00:32:56.796 A:middle
Now, this implementation then is

00:32:56.796 --> 00:32:58.596 A:middle
not as fast and compact as if we

00:32:58.596 --> 00:32:59.936 A:middle
went forward and made everything

00:32:59.936 --> 00:33:01.156 A:middle
BitStream Codable directly.


00:32:59.936 --> 00:33:01.156 A:middle
BitStream Codable directly.

00:33:01.876 --> 00:33:02.976 A:middle
But we discovered we didn't need

00:33:02.976 --> 00:33:04.206 A:middle
to do that for every object in

00:33:04.206 --> 00:33:05.746 A:middle
the game, only the most frequent

00:33:05.746 --> 00:33:06.306 A:middle
messages.

00:33:06.906 --> 00:33:08.396 A:middle
This let us really move quickly

00:33:08.396 --> 00:33:10.586 A:middle
and keep better rna on the game.

00:33:11.716 --> 00:33:13.216 A:middle
So, that's how we did the

00:33:13.216 --> 00:33:13.936 A:middle
physics.

00:33:14.266 --> 00:33:15.606 A:middle
Next I want to talk about how we

00:33:15.696 --> 00:33:16.686 A:middle
dealt with the assets on the

00:33:16.686 --> 00:33:17.576 A:middle
game levels and this is the

00:33:17.576 --> 00:33:18.586 A:middle
question that a lot of people

00:33:18.586 --> 00:33:19.916 A:middle
asked us downstairs.

00:33:20.646 --> 00:33:23.016 A:middle
You know, the assets include the

00:33:23.016 --> 00:33:24.576 A:middle
3D modules, the textures, the

00:33:24.576 --> 00:33:25.696 A:middle
animations and so forth.

00:33:26.136 --> 00:33:27.356 A:middle
So, we have some text angle

00:33:27.356 --> 00:33:28.876 A:middle
artists here in Apple and they

00:33:28.876 --> 00:33:30.246 A:middle
used some commercial tools to

00:33:30.246 --> 00:33:31.546 A:middle
build the visuals for the games.

00:33:31.546 --> 00:33:32.886 A:middle
The blocks, the catapults and so

00:33:32.886 --> 00:33:33.236 A:middle
forth.

00:33:34.086 --> 00:33:36.416 A:middle
They then exported those assets

00:33:36.416 --> 00:33:37.926 A:middle
in the common DAE file format.

00:33:38.286 --> 00:33:39.156 A:middle
We're looking forward to the

00:33:39.156 --> 00:33:40.876 A:middle
commercial tools supporting USDZ

00:33:41.276 --> 00:33:42.096 A:middle
but for this game they weren't

00:33:42.096 --> 00:33:42.626 A:middle
quite there yet.

00:33:43.126 --> 00:33:45.616 A:middle
We then built a command line

00:33:45.616 --> 00:33:47.576 A:middle
tool in Swift that converts the

00:33:47.576 --> 00:33:49.986 A:middle
object from DAE into SceneKit

00:33:49.986 --> 00:33:52.196 A:middle
files using the SceneKit API.

00:33:53.166 --> 00:33:54.346 A:middle
Because SceneKit provides the

00:33:54.346 --> 00:33:56.856 A:middle
same APIs on both iOS and macOS,

00:33:57.336 --> 00:33:58.976 A:middle
we're able to run this tool as

00:33:58.976 --> 00:34:00.306 A:middle
part of our build process on


00:33:58.976 --> 00:34:00.306 A:middle
part of our build process on

00:34:00.306 --> 00:34:02.336 A:middle
macOS and include the SceneKit

00:34:02.336 --> 00:34:04.016 A:middle
files directly in our iOS build

00:34:04.016 --> 00:34:04.776 A:middle
in the application.

00:34:06.496 --> 00:34:08.315 A:middle
We structured the data so that

00:34:08.315 --> 00:34:10.346 A:middle
each individual type of block is

00:34:10.346 --> 00:34:12.646 A:middle
its own file and then for each

00:34:12.646 --> 00:34:14.106 A:middle
levels, we combine those blocks

00:34:14.106 --> 00:34:14.466 A:middle
together.

00:34:15.476 --> 00:34:17.186 A:middle
This let us iterate on the

00:34:17.186 --> 00:34:18.636 A:middle
appearance and physics behavior

00:34:18.636 --> 00:34:20.396 A:middle
of each individual block and

00:34:20.396 --> 00:34:21.896 A:middle
then pull them all together for

00:34:21.896 --> 00:34:23.295 A:middle
those levels and iterate on

00:34:23.295 --> 00:34:24.036 A:middle
gameplay design.

00:34:24.346 --> 00:34:25.335 A:middle
Try out some of the different

00:34:25.335 --> 00:34:26.306 A:middle
levels that you'll see if you

00:34:26.306 --> 00:34:27.466 A:middle
look in the source code to the

00:34:27.466 --> 00:34:28.025 A:middle
application.

00:34:30.116 --> 00:34:32.275 A:middle
To optimize, further optimize

00:34:32.275 --> 00:34:33.576 A:middle
for different distances,

00:34:33.926 --> 00:34:35.206 A:middle
SceneKit supports varying the

00:34:35.206 --> 00:34:37.116 A:middle
assets used based on the level

00:34:37.116 --> 00:34:37.946 A:middle
of detail required.

00:34:39.116 --> 00:34:40.806 A:middle
Nearby objects use more polygons

00:34:40.806 --> 00:34:42.446 A:middle
and more detailed textures while

00:34:42.446 --> 00:34:43.735 A:middle
far away objects use fewer

00:34:43.735 --> 00:34:45.005 A:middle
polygons and less detailed

00:34:45.005 --> 00:34:45.466 A:middle
textures.

00:34:46.005 --> 00:34:47.216 A:middle
This really optimizes the

00:34:47.216 --> 00:34:50.996 A:middle
rendering of the scene.

00:34:51.156 --> 00:34:52.806 A:middle
However, we still want the

00:34:52.806 --> 00:34:54.096 A:middle
gameplay to stay consistent.

00:34:54.466 --> 00:34:55.876 A:middle
And so we specified the physics

00:34:55.876 --> 00:34:56.775 A:middle
body separately.

00:34:57.886 --> 00:34:58.966 A:middle
SceneKit provides a number of

00:34:58.966 --> 00:35:00.556 A:middle
built-in physics body types such


00:34:58.966 --> 00:35:00.556 A:middle
built-in physics body types such

00:35:00.556 --> 00:35:02.556 A:middle
as cube, sphere, cylinder.

00:35:03.356 --> 00:35:04.796 A:middle
And if you use those, you really

00:35:04.796 --> 00:35:05.946 A:middle
get the best performance.

00:35:06.676 --> 00:35:08.136 A:middle
If you don't specify one,

00:35:08.576 --> 00:35:09.966 A:middle
SceneKit will build a convex

00:35:09.966 --> 00:35:11.826 A:middle
hull automatically for you and

00:35:11.826 --> 00:35:12.516 A:middle
that works.

00:35:12.946 --> 00:35:14.366 A:middle
But it is a lower, can be a

00:35:14.366 --> 00:35:16.796 A:middle
lower performance implementation

00:35:17.276 --> 00:35:19.376 A:middle
by adding these objects where

00:35:19.376 --> 00:35:20.306 A:middle
they were available and where

00:35:20.306 --> 00:35:21.996 A:middle
they made sense, we really sped

00:35:21.996 --> 00:35:25.786 A:middle
up the performance of the game.

00:35:25.826 --> 00:35:26.996 A:middle
So, here's some examples of the

00:35:26.996 --> 00:35:29.356 A:middle
physics finished product.

00:35:29.356 --> 00:35:30.466 A:middle
First one is one of the blocks

00:35:30.466 --> 00:35:30.996 A:middle
from the game.

00:35:30.996 --> 00:35:32.356 A:middle
In this case, a cylinder with

00:35:32.356 --> 00:35:33.686 A:middle
textures for a great wood grain

00:35:33.686 --> 00:35:33.876 A:middle
look.

00:35:35.116 --> 00:35:36.456 A:middle
Next is the slingshot with the

00:35:36.456 --> 00:35:37.136 A:middle
sling head idle.

00:35:37.946 --> 00:35:39.016 A:middle
We add the [inaudible] colors at

00:35:39.016 --> 00:35:40.856 A:middle
RunTime using shaders and built

00:35:40.856 --> 00:35:42.086 A:middle
some custom animation for the

00:35:42.086 --> 00:35:43.326 A:middle
sling's motion during gameplay.

00:35:44.946 --> 00:35:46.416 A:middle
Lastly, we included some extra

00:35:46.416 --> 00:35:47.736 A:middle
assets that didn't get included

00:35:47.736 --> 00:35:48.286 A:middle
in the gameplay.

00:35:48.776 --> 00:35:50.036 A:middle
Even though we had to sacrifice

00:35:50.036 --> 00:35:51.416 A:middle
them, we want you to have them

00:35:51.416 --> 00:35:53.006 A:middle
and use them in your own sample

00:35:53.546 --> 00:35:53.646 A:middle
code.

00:35:55.876 --> 00:35:57.606 A:middle
So, one of the other fun things

00:35:57.606 --> 00:35:58.916 A:middle
we included is this flag

00:35:58.916 --> 00:35:59.406 A:middle
animation.

00:35:59.696 --> 00:36:00.956 A:middle
It really improves the immersion


00:35:59.696 --> 00:36:00.956 A:middle
It really improves the immersion

00:36:00.956 --> 00:36:01.866 A:middle
in the game environment.

00:36:02.626 --> 00:36:04.076 A:middle
We wanted a realistic wind

00:36:04.076 --> 00:36:04.896 A:middle
effect on this.

00:36:05.156 --> 00:36:06.296 A:middle
Now, we could've used a cloth

00:36:06.386 --> 00:36:07.656 A:middle
simulation out of the physics

00:36:07.656 --> 00:36:07.976 A:middle
engine.

00:36:09.506 --> 00:36:11.026 A:middle
But instead, we decided to use

00:36:11.026 --> 00:36:12.846 A:middle
the GPU and do it with Metal.

00:36:14.736 --> 00:36:16.626 A:middle
We started with a SceneKit asset

00:36:16.626 --> 00:36:17.976 A:middle
built by our technical artist.

00:36:18.516 --> 00:36:19.566 A:middle
To get the Apple logo on the

00:36:19.566 --> 00:36:21.946 A:middle
flag, we applied a texture at

00:36:21.946 --> 00:36:22.336 A:middle
RunTime.

00:36:23.716 --> 00:36:25.026 A:middle
Then we built a Swift class

00:36:25.026 --> 00:36:26.136 A:middle
around the Metal device.

00:36:26.806 --> 00:36:28.506 A:middle
Swift code builds a metal

00:36:28.506 --> 00:36:29.746 A:middle
command queue and inserts

00:36:29.746 --> 00:36:31.126 A:middle
information from the state of

00:36:31.126 --> 00:36:32.736 A:middle
the game, such as the direction

00:36:32.736 --> 00:36:34.466 A:middle
the wind is blowing.

00:36:34.586 --> 00:36:35.706 A:middle
That command queue is running a

00:36:35.706 --> 00:36:37.016 A:middle
custom Metal compute shader.

00:36:37.826 --> 00:36:39.046 A:middle
That comes from a legacy code

00:36:39.046 --> 00:36:39.816 A:middle
built in C.

00:36:40.176 --> 00:36:41.536 A:middle
But because Metal is based on

00:36:41.536 --> 00:36:43.916 A:middle
modern C++, it was a very easy

00:36:43.916 --> 00:36:44.726 A:middle
conversion to make.

00:36:45.826 --> 00:36:47.486 A:middle
We then also run another compute

00:36:47.486 --> 00:36:49.226 A:middle
shader to compute normal for the

00:36:49.226 --> 00:36:50.966 A:middle
surface, so we can get a great,

00:36:50.966 --> 00:36:53.426 A:middle
smooth flag look without a huge

00:36:53.426 --> 00:36:54.716 A:middle
number of polygons in the scene.

00:36:55.196 --> 00:36:56.646 A:middle
And it really makes the flag

00:36:56.646 --> 00:36:57.156 A:middle
look amazing.

00:36:58.296 --> 00:37:00.586 A:middle
Each frame, the shader updates


00:36:58.296 --> 00:37:00.586 A:middle
Each frame, the shader updates

00:37:00.586 --> 00:37:02.056 A:middle
the geometry of the match to its

00:37:02.056 --> 00:37:02.586 A:middle
new position.

00:37:03.296 --> 00:37:04.776 A:middle
By taking advantage of the GPU

00:37:04.776 --> 00:37:06.316 A:middle
in this way, we get a great

00:37:06.316 --> 00:37:08.936 A:middle
effect without it impacting the

00:37:08.936 --> 00:37:09.646 A:middle
main CPU.

00:37:12.056 --> 00:37:13.936 A:middle
So, lastly I'd like to talk

00:37:13.936 --> 00:37:15.186 A:middle
about the audio implementation

00:37:15.186 --> 00:37:15.746 A:middle
in SwiftShot.

00:37:16.586 --> 00:37:18.156 A:middle
Audio can make any game even

00:37:18.156 --> 00:37:19.726 A:middle
more immersive and engaging.

00:37:20.756 --> 00:37:22.096 A:middle
We knew we wanted to provide

00:37:22.096 --> 00:37:23.346 A:middle
realistic sound effects

00:37:23.536 --> 00:37:25.006 A:middle
positioned properly in the world

00:37:25.286 --> 00:37:26.366 A:middle
for that really immersive

00:37:26.366 --> 00:37:26.896 A:middle
experience.

00:37:26.896 --> 00:37:28.046 A:middle
And giving the user great

00:37:28.046 --> 00:37:28.866 A:middle
feedback on how they're

00:37:28.866 --> 00:37:29.816 A:middle
interacting with that world.

00:37:30.926 --> 00:37:31.946 A:middle
We also wanted to make sure it

00:37:31.946 --> 00:37:33.626 A:middle
was fast and pay attention to

00:37:33.626 --> 00:37:35.096 A:middle
how much adding the audio would

00:37:35.176 --> 00:37:37.046 A:middle
add to the size of our app.

00:37:37.046 --> 00:37:38.356 A:middle
So, we came up with what we

00:37:38.356 --> 00:37:39.256 A:middle
think is a great solution.

00:37:40.336 --> 00:37:42.156 A:middle
We created a few representative

00:37:42.156 --> 00:37:44.036 A:middle
sound samples using some toys we

00:37:44.036 --> 00:37:45.626 A:middle
borrowed from children of people

00:37:45.626 --> 00:37:47.406 A:middle
on the team.

00:37:47.406 --> 00:37:49.246 A:middle
We then recorded those and used

00:37:49.246 --> 00:37:51.656 A:middle
those to combine them into an AU

00:37:51.656 --> 00:37:53.516 A:middle
preset file and use those to

00:37:53.516 --> 00:37:55.256 A:middle
build a custom Midi instrument

00:37:55.496 --> 00:37:57.506 A:middle
in AV Foundation using AV Audio

00:37:57.506 --> 00:37:58.636 A:middle
Unit Midi Instrument.

00:37:59.486 --> 00:38:00.746 A:middle
That made it easy to quickly


00:37:59.486 --> 00:38:00.746 A:middle
That made it easy to quickly

00:38:00.746 --> 00:38:01.796 A:middle
play the right sound at the

00:38:01.796 --> 00:38:03.146 A:middle
right time in response to user

00:38:03.146 --> 00:38:04.266 A:middle
inputs and collisions in the

00:38:04.266 --> 00:38:04.486 A:middle
game.

00:38:05.016 --> 00:38:08.046 A:middle
We didn't just play the sounds

00:38:08.046 --> 00:38:08.536 A:middle
as is.

00:38:09.186 --> 00:38:10.316 A:middle
To give good feedback to the

00:38:10.316 --> 00:38:11.316 A:middle
user, we pull back on the

00:38:11.316 --> 00:38:11.806 A:middle
slingshot.

00:38:12.146 --> 00:38:13.776 A:middle
We vary the sound in a couple of

00:38:13.776 --> 00:38:14.146 A:middle
ways.

00:38:14.856 --> 00:38:16.536 A:middle
We change the pitch based on how

00:38:16.536 --> 00:38:17.866 A:middle
far back they've pulled the

00:38:17.866 --> 00:38:18.396 A:middle
slingshot.

00:38:19.456 --> 00:38:23.546 A:middle
And we vary the volume based on

00:38:23.546 --> 00:38:24.796 A:middle
the speed as you pull back.

00:38:24.796 --> 00:38:26.406 A:middle
And we do that at RunTime by

00:38:26.406 --> 00:38:27.546 A:middle
selecting the right Midi note

00:38:27.546 --> 00:38:29.656 A:middle
and then using some additional

00:38:29.656 --> 00:38:30.946 A:middle
Midi commands to alter that

00:38:30.946 --> 00:38:31.876 A:middle
sound before we play it.

00:38:32.386 --> 00:38:33.746 A:middle
So, let's take a listen and this

00:38:33.746 --> 00:38:35.000 A:middle
is, we'll play it.

00:38:38.516 --> 00:38:53.246 A:middle
[ Sound effects ]

00:38:53.746 --> 00:38:55.896 A:middle
Now, we also wanted to make sure

00:38:55.896 --> 00:38:56.816 A:middle
that when you're using the

00:38:56.816 --> 00:38:59.086 A:middle
slingshot, we also give users

00:38:59.496 --> 00:39:01.496 A:middle
some audio feedback as to


00:38:59.496 --> 00:39:01.496 A:middle
some audio feedback as to

00:39:01.496 --> 00:39:02.486 A:middle
whether or not they're within

00:39:02.486 --> 00:39:03.646 A:middle
range of the slingshot and

00:39:03.646 --> 00:39:04.616 A:middle
whether or not they've grabbed

00:39:04.616 --> 00:39:04.846 A:middle
that.

00:39:04.846 --> 00:39:05.976 A:middle
And those are the little beeps

00:39:05.976 --> 00:39:06.716 A:middle
you heard at the start.

00:39:07.456 --> 00:39:08.906 A:middle
Because those are UI feedback

00:39:08.906 --> 00:39:11.056 A:middle
for the users, those sounds only

00:39:11.056 --> 00:39:12.466 A:middle
come out of the device that the

00:39:12.466 --> 00:39:13.896 A:middle
user is using to interact with

00:39:13.896 --> 00:39:14.466 A:middle
the slingshot.

00:39:14.936 --> 00:39:16.406 A:middle
However, we also want everybody

00:39:16.406 --> 00:39:18.466 A:middle
else in the game to know what's

00:39:18.466 --> 00:39:19.576 A:middle
going on with the slingshot,

00:39:19.576 --> 00:39:20.586 A:middle
whether someone else is pulling

00:39:20.586 --> 00:39:21.646 A:middle
something or something like

00:39:21.646 --> 00:39:21.886 A:middle
that.

00:39:22.076 --> 00:39:22.946 A:middle
But we want one of those to be

00:39:22.946 --> 00:39:23.416 A:middle
quieter.

00:39:23.856 --> 00:39:25.896 A:middle
So, we use positional audio so

00:39:25.896 --> 00:39:27.176 A:middle
that if my opponent across the

00:39:27.176 --> 00:39:27.916 A:middle
table is pulling their

00:39:27.916 --> 00:39:29.556 A:middle
slingshot, I still hear that

00:39:29.556 --> 00:39:30.766 A:middle
sound from my device but it's

00:39:30.766 --> 00:39:32.296 A:middle
quieter and positioned correctly

00:39:32.296 --> 00:39:32.666 A:middle
in the world.

00:39:34.926 --> 00:39:36.526 A:middle
For colliding blocks, we took a

00:39:37.046 --> 00:39:38.176 A:middle
similar approach but slightly

00:39:38.176 --> 00:39:38.526 A:middle
different.

00:39:39.146 --> 00:39:40.886 A:middle
We really wanted a cacophonous

00:39:41.076 --> 00:39:41.496 A:middle
effect.

00:39:41.996 --> 00:39:45.066 A:middle
And the blocks are generally not

00:39:45.066 --> 00:39:46.936 A:middle
near any one player so again,

00:39:47.006 --> 00:39:48.416 A:middle
using the positional support

00:39:48.596 --> 00:39:50.356 A:middle
from SceneKit really made this

00:39:50.396 --> 00:39:50.946 A:middle
sound great.

00:39:52.106 --> 00:39:53.156 A:middle
Each device makes sounds

00:39:53.156 --> 00:39:55.256 A:middle
separately without worrying

00:39:55.256 --> 00:39:56.386 A:middle
about synchronizing across

00:39:56.386 --> 00:39:57.926 A:middle
devices because we want it to be

00:39:58.036 --> 00:39:59.386 A:middle
cacophonous, blocks smashing

00:39:59.386 --> 00:39:59.656 A:middle
about.


00:40:00.486 --> 00:40:02.206 A:middle
Again, we use a custom Midi

00:40:02.206 --> 00:40:03.676 A:middle
instrument to take a small

00:40:03.676 --> 00:40:04.996 A:middle
number of sounds and vary them.

00:40:05.376 --> 00:40:06.636 A:middle
In this case, varying the attack

00:40:06.636 --> 00:40:08.226 A:middle
rate based on the strength of

00:40:08.226 --> 00:40:09.636 A:middle
the collision impulse coming

00:40:09.636 --> 00:40:10.656 A:middle
from the SceneKit physics

00:40:10.656 --> 00:40:10.886 A:middle
engine.

00:40:13.316 --> 00:40:15.086 A:middle
These sounds again are localized

00:40:15.086 --> 00:40:16.386 A:middle
in 3D coordinates based on the

00:40:16.386 --> 00:40:17.806 A:middle
device's position in the scene.

00:40:17.976 --> 00:40:19.176 A:middle
So, collisions in the far end of

00:40:19.176 --> 00:40:20.586 A:middle
the table are quieter than those

00:40:20.586 --> 00:40:20.996 A:middle
at your end.

00:40:21.616 --> 00:40:24.000 A:middle
Let's take a listen to this.

00:40:25.516 --> 00:40:37.886 A:middle
[ Sound effects ]

00:40:38.386 --> 00:40:39.136 A:middle
One more shot.

00:40:39.676 --> 00:40:41.116 A:middle
There we go.

00:40:42.496 --> 00:40:42.676 A:middle
Right.

00:40:43.266 --> 00:40:47.366 A:middle
So we wanted to share one more

00:40:47.366 --> 00:40:48.426 A:middle
little trick that we discovered

00:40:48.426 --> 00:40:50.836 A:middle
as we were working on this.

00:40:50.836 --> 00:40:51.956 A:middle
In the process of setting up the

00:40:51.956 --> 00:40:53.206 A:middle
sounds, we discovered that we

00:40:53.206 --> 00:40:54.686 A:middle
needed to have a script run at

00:40:54.686 --> 00:40:56.376 A:middle
RunTime to do some file name

00:40:56.376 --> 00:40:57.746 A:middle
path conversions on the property

00:40:57.746 --> 00:40:59.246 A:middle
list for the DAU preset.

00:40:59.926 --> 00:41:01.076 A:middle
We found that we're able to


00:40:59.926 --> 00:41:01.076 A:middle
We found that we're able to

00:41:01.076 --> 00:41:03.056 A:middle
build that tool using Swift but

00:41:03.056 --> 00:41:04.336 A:middle
set it up as a command line

00:41:04.336 --> 00:41:04.596 A:middle
tool.

00:41:05.196 --> 00:41:06.706 A:middle
Do you notice at the top of

00:41:06.706 --> 00:41:07.996 A:middle
this, the traditional Unix

00:41:07.996 --> 00:41:09.566 A:middle
shebang-style statement at the

00:41:09.566 --> 00:41:10.266 A:middle
top of the script.

00:41:10.706 --> 00:41:13.156 A:middle
That tells your shell to fire up

00:41:13.156 --> 00:41:15.436 A:middle
Swift to run this.

00:41:15.536 --> 00:41:17.076 A:middle
By doing this, we can then treat

00:41:17.076 --> 00:41:18.526 A:middle
Swift as a scripting language.

00:41:19.976 --> 00:41:21.226 A:middle
You can develop one of these by

00:41:21.226 --> 00:41:23.316 A:middle
using a Swift playground to work

00:41:23.316 --> 00:41:24.726 A:middle
with your code interactively and

00:41:24.726 --> 00:41:25.696 A:middle
make sure that you've gotten it

00:41:25.696 --> 00:41:25.866 A:middle
right.

00:41:26.966 --> 00:41:28.556 A:middle
Once it's ready, just save it

00:41:28.556 --> 00:41:30.286 A:middle
out to a file, add the shebang

00:41:30.286 --> 00:41:31.906 A:middle
line to the top and make the

00:41:31.906 --> 00:41:33.886 A:middle
file executable in the file

00:41:33.886 --> 00:41:34.236 A:middle
system.

00:41:35.246 --> 00:41:36.546 A:middle
Now you've got a command line

00:41:36.546 --> 00:41:38.736 A:middle
tool that you can use either,

00:41:38.736 --> 00:41:39.496 A:middle
you know, outside the

00:41:39.496 --> 00:41:41.876 A:middle
application or in Xcode using a

00:41:41.876 --> 00:41:42.666 A:middle
RunScript phase.

00:41:43.486 --> 00:41:45.866 A:middle
It's very easy and it really

00:41:45.866 --> 00:41:47.216 A:middle
gives you access to all the

00:41:47.216 --> 00:41:48.056 A:middle
system frameworks.

00:41:48.316 --> 00:41:49.456 A:middle
In this case, we're able to edit

00:41:49.456 --> 00:41:50.386 A:middle
the P list directly.

00:41:51.036 --> 00:41:52.076 A:middle
It's a really great technique

00:41:52.076 --> 00:41:53.586 A:middle
and we hope that you'll be able

00:41:53.586 --> 00:41:54.986 A:middle
to take advantage of it.

00:41:57.116 --> 00:41:59.016 A:middle
So, today I hope you've seen how

00:41:59.096 --> 00:42:00.226 A:middle
AR provides really new


00:41:59.096 --> 00:42:00.226 A:middle
AR provides really new

00:42:00.226 --> 00:42:01.626 A:middle
opportunities for engaging games

00:42:01.626 --> 00:42:02.706 A:middle
and other experiences.

00:42:03.746 --> 00:42:04.986 A:middle
We encourage you to design with

00:42:04.986 --> 00:42:06.006 A:middle
AR in mind from the start.

00:42:06.346 --> 00:42:07.866 A:middle
And remember that for games, the

00:42:07.866 --> 00:42:08.606 A:middle
play is the thing.

00:42:08.776 --> 00:42:10.856 A:middle
You can't sprinkle fun on top at

00:42:10.976 --> 00:42:12.000 A:middle
the end.

00:42:13.146 --> 00:42:14.056 A:middle
We really hope that you'll

00:42:14.056 --> 00:42:15.966 A:middle
download the SwiftShot available

00:42:15.966 --> 00:42:17.456 A:middle
as sample code and use it to

00:42:17.456 --> 00:42:18.696 A:middle
guide you as you build your own

00:42:18.696 --> 00:42:20.316 A:middle
apps and we're planning to

00:42:20.316 --> 00:42:21.826 A:middle
update that with each subsequent

00:42:21.826 --> 00:42:23.976 A:middle
seed of iOS 12 as we go to the

00:42:23.976 --> 00:42:24.306 A:middle
release.

00:42:24.906 --> 00:42:27.316 A:middle
And finally, if you haven't had

00:42:27.316 --> 00:42:28.636 A:middle
a chance yet, we hope you'll

00:42:28.636 --> 00:42:29.596 A:middle
play SwiftShot with us

00:42:29.786 --> 00:42:32.326 A:middle
downstairs in the game room.

00:42:32.456 --> 00:42:34.136 A:middle
For more information, there's an

00:42:34.136 --> 00:42:35.536 A:middle
ARKit lab immediately after this

00:42:35.536 --> 00:42:36.656 A:middle
session and the get together

00:42:36.656 --> 00:42:37.176 A:middle
this evening.

00:42:37.836 --> 00:42:39.406 A:middle
I'm also happy to announce that

00:42:39.406 --> 00:42:40.196 A:middle
for those of you here at the

00:42:40.196 --> 00:42:41.536 A:middle
conference, we're going to have

00:42:41.536 --> 00:42:42.696 A:middle
a SwiftShot tournament this

00:42:42.696 --> 00:42:44.566 A:middle
Friday from noon to 2, so we

00:42:44.566 --> 00:42:45.586 A:middle
hope you'll join us for that.

00:42:46.496 --> 00:42:47.186 A:middle
Thank you very much.

00:42:48.338 --> 00:42:50.338 A:middle
[ Applause ]
