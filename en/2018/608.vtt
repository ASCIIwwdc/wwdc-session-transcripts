WEBVTT

00:00:07.516 --> 00:00:15.500 A:middle
[ Music ]

00:00:21.516 --> 00:00:26.116 A:middle
[ Applause ]

00:00:26.616 --> 00:00:27.566 A:middle
&gt;&gt; Hello, everybody.

00:00:27.926 --> 00:00:28.396 A:middle
Welcome.

00:00:29.436 --> 00:00:30.756 A:middle
I'm really excited to be here

00:00:30.756 --> 00:00:31.066 A:middle
today.

00:00:31.606 --> 00:00:32.716 A:middle
So let's get started.

00:00:34.046 --> 00:00:35.946 A:middle
Shaders are important part of

00:00:35.946 --> 00:00:37.906 A:middle
graphics, and they help you

00:00:37.956 --> 00:00:39.896 A:middle
create great-looking games and

00:00:41.036 --> 00:00:41.166 A:middle
apps.

00:00:41.506 --> 00:00:42.996 A:middle
Given the massively parallel

00:00:42.996 --> 00:00:45.026 A:middle
execution environment, working

00:00:45.026 --> 00:00:46.306 A:middle
with shaders is not easy.

00:00:47.076 --> 00:00:48.076 A:middle
There are a number of things

00:00:48.076 --> 00:00:49.556 A:middle
that can go wrong during

00:00:49.556 --> 00:00:51.886 A:middle
development, and even when you

00:00:51.886 --> 00:00:53.236 A:middle
get it right, they have to

00:00:53.296 --> 00:00:54.406 A:middle
perform really fast.

00:00:55.446 --> 00:00:57.426 A:middle
My name is Alp and today I am

00:00:57.626 --> 00:00:59.426 A:middle
going to show you great tools

00:00:59.426 --> 00:01:02.126 A:middle
and workflows to help you debug

00:00:59.426 --> 00:01:02.126 A:middle
and workflows to help you debug

00:01:02.296 --> 00:01:04.105 A:middle
and profile Metal shaders.

00:01:04.626 --> 00:01:07.526 A:middle
Let's talk about Metal first.

00:01:08.836 --> 00:01:10.426 A:middle
Metal is not just about the

00:01:10.426 --> 00:01:12.206 A:middle
framework and the language.

00:01:12.626 --> 00:01:15.556 A:middle
We have Metal kits, Metal

00:01:15.556 --> 00:01:17.956 A:middle
Performance shaders, and we have

00:01:17.956 --> 00:01:19.166 A:middle
great tools to make your

00:01:19.166 --> 00:01:20.946 A:middle
development process efficient

00:01:20.946 --> 00:01:21.376 A:middle
and easy.

00:01:22.426 --> 00:01:24.956 A:middle
With Metal system trace, fully

00:01:24.956 --> 00:01:26.776 A:middle
integrated into instruments, you

00:01:26.776 --> 00:01:29.306 A:middle
get visibility into how your CPU

00:01:29.306 --> 00:01:31.646 A:middle
and GPU work in parallel and the

00:01:31.646 --> 00:01:33.066 A:middle
runtime performance of your app.

00:01:34.496 --> 00:01:36.346 A:middle
It's a great first tool to start

00:01:36.346 --> 00:01:37.696 A:middle
profiling your apps, and seeing

00:01:37.696 --> 00:01:38.436 A:middle
your bottlenecks.

00:01:38.986 --> 00:01:42.196 A:middle
But today, my focus is going to

00:01:42.196 --> 00:01:44.106 A:middle
be on Metal frame debugger.

00:01:46.596 --> 00:01:48.516 A:middle
Metal frame debugger lets you

00:01:48.516 --> 00:01:51.116 A:middle
capture Metal work with a frame

00:01:51.116 --> 00:01:53.096 A:middle
of a game, or computer upload,

00:01:53.636 --> 00:01:55.366 A:middle
and step through your course.

00:01:56.996 --> 00:01:59.556 A:middle
Inspect state and resources.

00:02:00.656 --> 00:02:03.806 A:middle
And it provides great profiling

00:02:03.806 --> 00:02:05.336 A:middle
features, giving you access to

00:02:05.336 --> 00:02:06.466 A:middle
GPU counters and pipeline

00:02:06.466 --> 00:02:07.186 A:middle
statistics.

00:02:07.706 --> 00:02:09.746 A:middle
It is fully integrated into

00:02:09.746 --> 00:02:12.586 A:middle
Xcode, providing you one place

00:02:13.006 --> 00:02:15.296 A:middle
to debug and profile your Metal

00:02:15.296 --> 00:02:15.866 A:middle
workloads.

00:02:16.356 --> 00:02:19.436 A:middle
And this year, we have some

00:02:19.706 --> 00:02:21.916 A:middle
great additions to Metal frame

00:02:21.916 --> 00:02:22.196 A:middle
debugger.

00:02:23.006 --> 00:02:25.266 A:middle
With the dependency viewer, now

00:02:25.266 --> 00:02:26.756 A:middle
you get visibility into how your

00:02:26.756 --> 00:02:28.926 A:middle
encoders are working together

00:02:28.926 --> 00:02:31.026 A:middle
and connected through the use of

00:02:31.026 --> 00:02:32.096 A:middle
resources.

00:02:33.026 --> 00:02:35.076 A:middle
It's a great tool to navigate

00:02:35.076 --> 00:02:36.336 A:middle
your workload and just

00:02:36.336 --> 00:02:37.296 A:middle
understand how your [inaudible]

00:02:37.536 --> 00:02:40.136 A:middle
are working together to create

00:02:40.506 --> 00:02:42.356 A:middle
that frame.

00:02:42.356 --> 00:02:44.536 A:middle
Tomorrow at 10:00 a.m., we have

00:02:44.736 --> 00:02:45.876 A:middle
Metal Game Performance

00:02:45.876 --> 00:02:47.846 A:middle
Optimization talk, and part of

00:02:47.846 --> 00:02:48.966 A:middle
it, we will be covering the

00:02:48.966 --> 00:02:49.656 A:middle
dependency viewer.

00:02:50.656 --> 00:02:53.126 A:middle
But today I will be focusing on

00:02:53.756 --> 00:02:55.806 A:middle
geometry viewer, shader

00:02:55.806 --> 00:02:57.486 A:middle
debugger, and enhanced shaded

00:02:57.486 --> 00:02:57.936 A:middle
profiler.

00:02:58.576 --> 00:03:00.216 A:middle
And I will be showing you

00:02:58.576 --> 00:03:00.216 A:middle
And I will be showing you

00:03:00.216 --> 00:03:02.086 A:middle
workloads that will help you in

00:03:02.086 --> 00:03:04.066 A:middle
your day-to-day shaded elements.

00:03:04.516 --> 00:03:06.736 A:middle
So, let's start with the

00:03:06.736 --> 00:03:07.336 A:middle
geometry viewer.

00:03:11.786 --> 00:03:14.226 A:middle
Vertex Stage is the first stage

00:03:14.226 --> 00:03:15.286 A:middle
of the graphics pipeline.

00:03:16.196 --> 00:03:18.126 A:middle
And when you get it wrong, it

00:03:18.126 --> 00:03:19.526 A:middle
can mess up your entire scene.

00:03:20.016 --> 00:03:22.416 A:middle
So it is important to rule out

00:03:22.926 --> 00:03:25.346 A:middle
some of the vertex issues before

00:03:25.346 --> 00:03:26.656 A:middle
moving on to debugging your

00:03:26.656 --> 00:03:27.216 A:middle
shaders.

00:03:27.756 --> 00:03:31.556 A:middle
In Vertex Stage, there are

00:03:31.616 --> 00:03:33.446 A:middle
several things to check.

00:03:33.636 --> 00:03:35.906 A:middle
Mainly, your vertex inputs, your

00:03:35.906 --> 00:03:37.596 A:middle
indices, and your vertex

00:03:37.596 --> 00:03:38.076 A:middle
outputs.

00:03:39.116 --> 00:03:41.256 A:middle
Last year, with Xcode 9, we

00:03:41.256 --> 00:03:43.226 A:middle
introduced input attribute view

00:03:43.226 --> 00:03:45.096 A:middle
where we can see all this data

00:03:45.266 --> 00:03:47.166 A:middle
combined in a table view format.

00:03:48.146 --> 00:03:50.036 A:middle
But it is still hard to debug

00:03:50.546 --> 00:03:54.006 A:middle
such visual data without really

00:03:54.006 --> 00:03:55.356 A:middle
correlating back to 3D.

00:03:56.296 --> 00:03:58.966 A:middle
So that's why this year we

00:03:58.966 --> 00:04:01.006 A:middle
combined all this data and

00:03:58.966 --> 00:04:01.006 A:middle
combined all this data and

00:04:01.006 --> 00:04:02.896 A:middle
created one place you can

00:04:02.896 --> 00:04:04.526 A:middle
visualize and inspect it.

00:04:05.196 --> 00:04:06.986 A:middle
Now, I would like to introduce

00:04:06.986 --> 00:04:11.000 A:middle
you to geometry viewer.

00:04:12.516 --> 00:04:15.616 A:middle
[ Applause ]

00:04:16.116 --> 00:04:17.886 A:middle
&gt;&gt; Geometry viewer is a new tool

00:04:17.886 --> 00:04:19.166 A:middle
that visualizes the

00:04:19.166 --> 00:04:21.146 A:middle
post-transform vertex data in 3D

00:04:21.146 --> 00:04:22.896 A:middle
so that you can actually see

00:04:22.896 --> 00:04:24.116 A:middle
what your vertex output is.

00:04:25.106 --> 00:04:27.126 A:middle
Alongside, it provides you your

00:04:27.126 --> 00:04:29.876 A:middle
data input indices and output,

00:04:30.236 --> 00:04:31.136 A:middle
so that you can actually

00:04:31.136 --> 00:04:32.706 A:middle
correlate that back to 3D.

00:04:33.956 --> 00:04:35.526 A:middle
It is available per-draw call

00:04:35.886 --> 00:04:37.266 A:middle
just like your attachments and

00:04:37.266 --> 00:04:39.176 A:middle
bond resources, so you'll have

00:04:39.466 --> 00:04:41.996 A:middle
one place to investigate all

00:04:41.996 --> 00:04:42.996 A:middle
your vertex issues.

00:04:44.506 --> 00:04:47.336 A:middle
Now, let's take a look at three

00:04:47.336 --> 00:04:49.226 A:middle
common vertex problems, and

00:04:49.226 --> 00:04:50.516 A:middle
let's see how you can use

00:04:50.516 --> 00:04:52.306 A:middle
geometry viewer to tackle them.

00:04:52.886 --> 00:04:56.256 A:middle
So this is the first problem,

00:04:56.706 --> 00:04:58.506 A:middle
and I am going to draw call,

00:04:58.506 --> 00:05:00.496 A:middle
drawing the tree, and as you can

00:04:58.506 --> 00:05:00.496 A:middle
drawing the tree, and as you can

00:05:00.496 --> 00:05:03.236 A:middle
see, some of the vertices of the

00:05:03.236 --> 00:05:05.876 A:middle
triangle is off screen, causing

00:05:05.876 --> 00:05:06.956 A:middle
this triangle to get skewed.

00:05:07.916 --> 00:05:09.246 A:middle
Just using the geometry viewer,

00:05:09.596 --> 00:05:10.676 A:middle
you can click on the visibly

00:05:10.676 --> 00:05:11.296 A:middle
wrong triangle.

00:05:12.076 --> 00:05:13.966 A:middle
And just using the viewer below,

00:05:14.396 --> 00:05:17.466 A:middle
you can see all the data that

00:05:17.596 --> 00:05:20.516 A:middle
these vertices are taking in and

00:05:20.516 --> 00:05:21.096 A:middle
outputting.

00:05:24.796 --> 00:05:27.906 A:middle
And in our second case, I'm on

00:05:27.906 --> 00:05:29.736 A:middle
the same draw [inaudible] but

00:05:29.736 --> 00:05:31.386 A:middle
this time, the tree is

00:05:31.386 --> 00:05:33.386 A:middle
completely missing.

00:05:33.386 --> 00:05:34.636 A:middle
Just using the geometry viewer

00:05:34.776 --> 00:05:38.456 A:middle
and the free fly camera, you can

00:05:38.586 --> 00:05:40.426 A:middle
see that the tree is drawn

00:05:40.426 --> 00:05:41.596 A:middle
completely outside of the

00:05:41.596 --> 00:05:42.086 A:middle
Frustum.

00:05:43.536 --> 00:05:45.006 A:middle
So it makes sense that it is not

00:05:45.006 --> 00:05:45.816 A:middle
rendered on screen.

00:05:46.716 --> 00:05:48.526 A:middle
So it is really easy to use

00:05:48.526 --> 00:05:50.706 A:middle
geometry viewer to detect cases

00:05:50.706 --> 00:05:53.416 A:middle
like this, and on to our last

00:05:54.526 --> 00:05:56.296 A:middle
case, sometimes it's not even

00:05:56.296 --> 00:05:57.946 A:middle
possible to form triangles to

00:05:58.176 --> 00:05:59.156 A:middle
visualize in 3D.

00:05:59.726 --> 00:06:01.576 A:middle
And these are tricky to debug.

00:05:59.726 --> 00:06:01.576 A:middle
And these are tricky to debug.

00:06:01.716 --> 00:06:04.476 A:middle
You might have degenerated

00:06:04.476 --> 00:06:05.946 A:middle
triangles, where you have

00:06:05.946 --> 00:06:07.716 A:middle
multiple of your vertices going

00:06:07.716 --> 00:06:08.656 A:middle
into the same location.

00:06:09.296 --> 00:06:11.146 A:middle
Or you might have infinites and

00:06:11.146 --> 00:06:12.666 A:middle
[inaudible] in your vertex

00:06:12.666 --> 00:06:14.086 A:middle
output position, which is

00:06:14.086 --> 00:06:15.716 A:middle
undefined behavior for GPU.

00:06:16.736 --> 00:06:18.906 A:middle
Thankfully, geometry viewer

00:06:19.196 --> 00:06:21.126 A:middle
detects these cases and provides

00:06:21.126 --> 00:06:22.566 A:middle
an issue button for you.

00:06:22.916 --> 00:06:28.766 A:middle
With a single click to that, you

00:06:28.766 --> 00:06:30.316 A:middle
can get a list of issues it

00:06:30.316 --> 00:06:30.736 A:middle
finds.

00:06:31.356 --> 00:06:34.036 A:middle
In this case, it found several

00:06:34.036 --> 00:06:35.466 A:middle
degenerate triangles.

00:06:36.476 --> 00:06:38.466 A:middle
Clicking one, you can directly

00:06:38.466 --> 00:06:39.126 A:middle
see the data.

00:06:40.126 --> 00:06:42.046 A:middle
And just looking at this data, I

00:06:42.046 --> 00:06:44.036 A:middle
can clearly tell that two of my

00:06:44.036 --> 00:06:46.286 A:middle
vertices are going to the

00:06:46.286 --> 00:06:48.206 A:middle
origin, so it's a degenerate

00:06:48.206 --> 00:06:48.556 A:middle
triangle.

00:06:50.366 --> 00:06:52.526 A:middle
And so as you've seen in all

00:06:52.526 --> 00:06:55.186 A:middle
these examples, geometry viewer

00:06:55.216 --> 00:06:57.666 A:middle
is a powerful tool to quickly

00:06:57.666 --> 00:06:59.016 A:middle
investigate all your

00:06:59.016 --> 00:07:01.186 A:middle
geometry-related issues, and if

00:06:59.016 --> 00:07:01.186 A:middle
geometry-related issues, and if

00:07:01.186 --> 00:07:02.486 A:middle
the problem is in your inputs,

00:07:03.036 --> 00:07:04.556 A:middle
then you have to go back and

00:07:04.696 --> 00:07:05.286 A:middle
check your model.

00:07:05.766 --> 00:07:07.246 A:middle
But if the problem is in your

00:07:07.246 --> 00:07:09.646 A:middle
output, then you have to debug

00:07:09.646 --> 00:07:10.426 A:middle
vertex shaders.

00:07:11.336 --> 00:07:12.776 A:middle
Which brings us to our next

00:07:13.166 --> 00:07:13.326 A:middle
topic.

00:07:15.976 --> 00:07:18.076 A:middle
Debugging shaders, using the new

00:07:18.076 --> 00:07:18.686 A:middle
Shader Debugger.

00:07:20.196 --> 00:07:21.496 A:middle
Shaders are hard to debug.

00:07:22.556 --> 00:07:24.386 A:middle
They have math-heavy code, with

00:07:24.386 --> 00:07:25.736 A:middle
lots of vector operations.

00:07:26.446 --> 00:07:28.556 A:middle
And they are highly parallel.

00:07:28.776 --> 00:07:30.196 A:middle
The shader code you are writing

00:07:30.526 --> 00:07:32.716 A:middle
gets executed millions of times,

00:07:32.806 --> 00:07:33.736 A:middle
every single frame.

00:07:33.736 --> 00:07:37.706 A:middle
Here is the scene from Unity's

00:07:37.706 --> 00:07:39.016 A:middle
Book of the Dead demo, that

00:07:39.016 --> 00:07:41.056 A:middle
we've seen in the keynote and

00:07:41.056 --> 00:07:42.306 A:middle
State of the Union earlier this

00:07:42.306 --> 00:07:42.466 A:middle
week.

00:07:43.296 --> 00:07:45.486 A:middle
In a single frame of this scene

00:07:46.426 --> 00:07:48.246 A:middle
makes 10 million vertexing

00:07:48.246 --> 00:07:51.196 A:middle
locations, and rendering into 60

00:07:51.196 --> 00:07:53.196 A:middle
million triangles, every single

00:07:53.196 --> 00:07:54.236 A:middle
frame, in all the different

00:07:54.236 --> 00:07:54.776 A:middle
passes.

00:07:55.866 --> 00:07:57.696 A:middle
So when you have a problem with

00:07:57.696 --> 00:07:59.356 A:middle
your shaders, it's not going to

00:07:59.356 --> 00:08:00.846 A:middle
be easy to find where the

00:07:59.356 --> 00:08:00.846 A:middle
be easy to find where the

00:08:00.846 --> 00:08:02.766 A:middle
problem is, which shader it is,

00:08:02.766 --> 00:08:04.256 A:middle
and what part of the shader

00:08:04.256 --> 00:08:04.556 A:middle
code.

00:08:05.496 --> 00:08:07.426 A:middle
So to help you debugging your

00:08:07.426 --> 00:08:10.146 A:middle
shaders, now I'm really excited

00:08:10.236 --> 00:08:12.156 A:middle
to introduce to you the new

00:08:12.156 --> 00:08:14.736 A:middle
Shader Debugger [applause].

00:08:20.986 --> 00:08:23.106 A:middle
Shader Debugger is a new tool

00:08:23.306 --> 00:08:25.276 A:middle
for debugging all Metal shaders,

00:08:25.946 --> 00:08:27.666 A:middle
providing you rich visualization

00:08:27.666 --> 00:08:29.606 A:middle
across thousands of threads at

00:08:29.646 --> 00:08:33.456 A:middle
once, and it shows you the real

00:08:33.456 --> 00:08:35.046 A:middle
data from GPU, not from

00:08:35.046 --> 00:08:35.596 A:middle
emulator.

00:08:36.285 --> 00:08:39.546 A:middle
It provides you flexible way of

00:08:39.546 --> 00:08:40.946 A:middle
setting, so that you can follow

00:08:40.946 --> 00:08:42.716 A:middle
your execution easily, without

00:08:42.716 --> 00:08:44.015 A:middle
needing to have breakpoints at

00:08:44.015 --> 00:08:44.285 A:middle
all.

00:08:45.726 --> 00:08:47.836 A:middle
And it is fully integrated into

00:08:47.836 --> 00:08:49.456 A:middle
Metal frame debugger, so that

00:08:49.716 --> 00:08:51.766 A:middle
you have everything you need to

00:08:51.766 --> 00:08:52.846 A:middle
debug your shaders.

00:08:53.776 --> 00:08:55.896 A:middle
Now, I would like to bring my

00:08:55.896 --> 00:08:57.966 A:middle
colleague, Xavier, to the stage,

00:08:58.246 --> 00:08:59.846 A:middle
to show you Shader Profiler in

00:09:00.266 --> 00:09:00.706 A:middle
action.

00:09:01.046 --> 00:09:01.330 A:middle
Xavier?

00:09:02.516 --> 00:09:05.076 A:middle
[ Applause ]

00:09:05.576 --> 00:09:06.536 A:middle
&gt;&gt; Thank you, Alp, and good

00:09:07.066 --> 00:09:08.936 A:middle
afternoon everyone.

00:09:09.046 --> 00:09:10.606 A:middle
For today's demo, I wanted to

00:09:10.606 --> 00:09:11.976 A:middle
create a cool-looking water

00:09:11.976 --> 00:09:14.326 A:middle
simulation, but as you can see,

00:09:14.666 --> 00:09:15.516 A:middle
there are some geometry

00:09:15.516 --> 00:09:16.156 A:middle
problems.

00:09:17.036 --> 00:09:18.646 A:middle
My name is Xavier, and I am

00:09:18.646 --> 00:09:20.226 A:middle
really excited to show you how

00:09:20.226 --> 00:09:21.806 A:middle
to use the new Shader Debugger

00:09:21.946 --> 00:09:22.906 A:middle
and geometry view ware to

00:09:23.226 --> 00:09:24.646 A:middle
identify and fix geometry

00:09:24.646 --> 00:09:25.016 A:middle
issues.

00:09:25.016 --> 00:09:27.966 A:middle
So we are going to start by

00:09:27.966 --> 00:09:28.836 A:middle
taking our friend capture.

00:09:28.836 --> 00:09:31.066 A:middle
You can easily do this by

00:09:31.066 --> 00:09:32.566 A:middle
clicking on the UP cutter button

00:09:32.676 --> 00:09:33.786 A:middle
here in the debug bar.

00:09:34.316 --> 00:09:38.426 A:middle
Now that we have captured our

00:09:38.426 --> 00:09:39.946 A:middle
frame, we can start debugging

00:09:39.946 --> 00:09:40.516 A:middle
our issue.

00:09:40.986 --> 00:09:44.006 A:middle
Since we are having geometry

00:09:44.006 --> 00:09:45.526 A:middle
problems, we are going to use

00:09:45.526 --> 00:09:46.686 A:middle
the new Geometry Viewer.

00:09:49.396 --> 00:09:51.406 A:middle
The Geometry Viewer allows you

00:09:51.406 --> 00:09:53.006 A:middle
to navigate and inspect the

00:09:53.006 --> 00:09:54.806 A:middle
geometry of your draw call.

00:09:56.516 --> 00:09:58.306 A:middle
The water surface should be

00:09:58.306 --> 00:10:00.456 A:middle
smooth, but as we can see, there

00:09:58.306 --> 00:10:00.456 A:middle
smooth, but as we can see, there

00:10:00.576 --> 00:10:01.596 A:middle
is a steep cliff.

00:10:02.416 --> 00:10:03.696 A:middle
So let's pick one of the

00:10:03.696 --> 00:10:04.966 A:middle
triangles that looks wrong.

00:10:04.966 --> 00:10:06.276 A:middle
For example, this one.

00:10:06.686 --> 00:10:08.596 A:middle
And now, let's select the broken

00:10:08.656 --> 00:10:10.576 A:middle
vertex that is the one here at

00:10:10.576 --> 00:10:11.126 A:middle
the bottom.

00:10:11.476 --> 00:10:13.686 A:middle
You can easily do this, by using

00:10:13.686 --> 00:10:14.456 A:middle
this table here.

00:10:14.456 --> 00:10:17.816 A:middle
So now that we have found our

00:10:17.816 --> 00:10:20.316 A:middle
broken vertex, let's take the

00:10:20.316 --> 00:10:21.346 A:middle
input positions.

00:10:21.636 --> 00:10:24.666 A:middle
As we can see here, all of the

00:10:24.666 --> 00:10:26.496 A:middle
input positions are very similar

00:10:26.496 --> 00:10:27.846 A:middle
for all of the vertices of this

00:10:27.906 --> 00:10:30.316 A:middle
triangle, and in fact, the white

00:10:30.316 --> 00:10:32.126 A:middle
coordinate is exactly the same.

00:10:32.546 --> 00:10:34.616 A:middle
So this looks correct, and it

00:10:34.616 --> 00:10:35.346 A:middle
was inspected.

00:10:35.766 --> 00:10:39.216 A:middle
Seeing the input is correct, but

00:10:39.216 --> 00:10:40.556 A:middle
as we can see here, in the 3D

00:10:40.556 --> 00:10:43.076 A:middle
view, the output is wrong, then

00:10:43.076 --> 00:10:44.566 A:middle
the problem has been our vertex

00:10:44.566 --> 00:10:44.946 A:middle
shader.

00:10:45.616 --> 00:10:46.686 A:middle
So let's use the new Shader

00:10:46.686 --> 00:10:48.176 A:middle
Debugger to debug and fix this

00:10:48.176 --> 00:10:51.016 A:middle
issue, just by clicking on the

00:10:51.016 --> 00:10:52.556 A:middle
Debug button that you can find

00:10:52.556 --> 00:10:54.046 A:middle
here in the bottom right corner.

00:10:54.556 --> 00:10:58.946 A:middle
And just like that, we are now

00:10:58.946 --> 00:10:59.896 A:middle
in the Shader Debugger.

00:11:00.026 --> 00:11:01.196 A:middle
It is that easy.

00:11:05.496 --> 00:11:06.916 A:middle
The first thing that you will

00:11:06.916 --> 00:11:08.926 A:middle
notice in the Shader Debugger is

00:11:08.926 --> 00:11:10.796 A:middle
that alongside your source code,

00:11:11.136 --> 00:11:12.126 A:middle
you have access to all the

00:11:12.126 --> 00:11:14.066 A:middle
variables that were modified on

00:11:14.066 --> 00:11:16.426 A:middle
its line, and if you want more

00:11:16.426 --> 00:11:17.926 A:middle
details about your variables,

00:11:18.276 --> 00:11:19.716 A:middle
you can just open the detail

00:11:19.716 --> 00:11:21.956 A:middle
views by clicking in this detail

00:11:21.956 --> 00:11:23.006 A:middle
view button here.

00:11:24.836 --> 00:11:27.366 A:middle
The detail view will show you in

00:11:27.366 --> 00:11:29.186 A:middle
language of source code the full

00:11:29.186 --> 00:11:30.276 A:middle
value of the variable.

00:11:30.826 --> 00:11:33.136 A:middle
And not just that, but also the

00:11:33.136 --> 00:11:35.036 A:middle
value of the variable across all

00:11:35.036 --> 00:11:36.316 A:middle
the vertices of the triangle

00:11:36.316 --> 00:11:37.216 A:middle
that you are debugging.

00:11:37.216 --> 00:11:42.646 A:middle
Here in the Debug Navigator, you

00:11:42.646 --> 00:11:43.856 A:middle
have access to the [inaudible]

00:11:43.856 --> 00:11:46.106 A:middle
history, which shows you what

00:11:46.106 --> 00:11:47.636 A:middle
your shader did from the very

00:11:47.636 --> 00:11:50.816 A:middle
beginning to the very end, and

00:11:51.166 --> 00:11:53.126 A:middle
as you can see, it's really easy

00:11:53.176 --> 00:11:54.686 A:middle
to step through your code by

00:11:54.686 --> 00:11:55.806 A:middle
just using the arrow keys.

00:11:57.916 --> 00:11:59.566 A:middle
As you may have noticed, as I

00:11:59.566 --> 00:12:01.726 A:middle
navigate through the navigator,

00:11:59.566 --> 00:12:01.726 A:middle
navigate through the navigator,

00:12:02.056 --> 00:12:03.406 A:middle
its position in the source code

00:12:03.406 --> 00:12:04.226 A:middle
is highlighted.

00:12:04.796 --> 00:12:06.056 A:middle
And this works in both

00:12:06.056 --> 00:12:06.756 A:middle
directions.

00:12:07.056 --> 00:12:08.556 A:middle
You can select one line in your

00:12:08.556 --> 00:12:10.136 A:middle
source code and its position in

00:12:10.136 --> 00:12:11.336 A:middle
the Debug Navigator will be

00:12:11.336 --> 00:12:11.876 A:middle
selected.

00:12:12.396 --> 00:12:15.466 A:middle
And at any point, you have

00:12:15.466 --> 00:12:17.096 A:middle
access to all the variables that

00:12:17.096 --> 00:12:18.686 A:middle
are alive in a scope by just

00:12:18.686 --> 00:12:20.216 A:middle
taking the variables view, here

00:12:20.216 --> 00:12:20.836 A:middle
at the bottom.

00:12:20.836 --> 00:12:24.806 A:middle
So now that we are more familiar

00:12:24.806 --> 00:12:26.096 A:middle
with the Shader Debugger, let's

00:12:26.216 --> 00:12:27.276 A:middle
debug our issue.

00:12:30.436 --> 00:12:32.686 A:middle
The water is calculated by

00:12:32.716 --> 00:12:34.356 A:middle
generating a displacement vector

00:12:34.446 --> 00:12:36.056 A:middle
that is later added to our final

00:12:36.056 --> 00:12:36.676 A:middle
position.

00:12:37.566 --> 00:12:38.826 A:middle
So let's get more information

00:12:38.826 --> 00:12:39.986 A:middle
about this displacement vector

00:12:39.986 --> 00:12:41.776 A:middle
just by opening this detail

00:12:42.266 --> 00:12:42.366 A:middle
view.

00:12:46.536 --> 00:12:48.616 A:middle
As we can see here in the detail

00:12:48.856 --> 00:12:51.206 A:middle
view, the right coordinate for

00:12:51.206 --> 00:12:52.576 A:middle
the vertex that we are debugging

00:12:52.686 --> 00:12:54.116 A:middle
is a big, negative number,

00:12:54.416 --> 00:12:55.816 A:middle
compared to its more positive

00:12:55.816 --> 00:12:57.386 A:middle
one in the other vertices that

00:12:57.386 --> 00:12:57.976 A:middle
were correct.

00:12:58.256 --> 00:13:00.416 A:middle
Then the issue must be in how we

00:12:58.256 --> 00:13:00.416 A:middle
Then the issue must be in how we

00:13:00.416 --> 00:13:01.336 A:middle
are calculating this

00:13:01.336 --> 00:13:02.116 A:middle
displacement vector.

00:13:02.116 --> 00:13:05.556 A:middle
So let's use the debug navigator

00:13:05.806 --> 00:13:07.046 A:middle
to go through the function and

00:13:07.046 --> 00:13:09.000 A:middle
investigate what is happening.

00:13:17.086 --> 00:13:18.236 A:middle
And here, without even having to

00:13:18.236 --> 00:13:19.906 A:middle
read the code, we can already

00:13:19.906 --> 00:13:21.076 A:middle
tell that there is something

00:13:21.076 --> 00:13:21.696 A:middle
going wrong.

00:13:22.156 --> 00:13:24.176 A:middle
One of our variables has a value

00:13:24.176 --> 00:13:25.966 A:middle
that is not a number, and this

00:13:25.966 --> 00:13:27.706 A:middle
is likely corrupt in further

00:13:27.706 --> 00:13:28.136 A:middle
math.

00:13:28.666 --> 00:13:30.276 A:middle
So let's check why this is

00:13:30.276 --> 00:13:30.826 A:middle
happening.

00:13:31.356 --> 00:13:32.846 A:middle
If we check here in the

00:13:32.846 --> 00:13:34.796 A:middle
debugger, it turns out that we

00:13:34.796 --> 00:13:37.096 A:middle
are doing this operation on this

00:13:37.096 --> 00:13:38.826 A:middle
negative number, and this is

00:13:38.826 --> 00:13:40.036 A:middle
what is causing the [inaudible].

00:13:40.806 --> 00:13:42.316 A:middle
So now that we have found the

00:13:42.316 --> 00:13:43.956 A:middle
cause of our issue, let me

00:13:43.956 --> 00:13:45.396 A:middle
quickly fix this just by

00:13:45.396 --> 00:13:47.176 A:middle
swapping those two lines, so

00:13:47.176 --> 00:13:48.966 A:middle
that we don't do operation on a

00:13:48.966 --> 00:13:49.786 A:middle
negative number.

00:13:50.526 --> 00:13:53.826 A:middle
And now that we have done our

00:13:54.026 --> 00:13:55.686 A:middle
changes to the shader, let's try

00:13:55.686 --> 00:13:56.946 A:middle
out those changes just by

00:13:56.946 --> 00:13:58.166 A:middle
clicking in the reload changes

00:13:58.166 --> 00:14:03.466 A:middle
button, here in the debug bar.

00:13:58.166 --> 00:14:03.466 A:middle
button, here in the debug bar.

00:14:03.666 --> 00:14:05.696 A:middle
Reloading the shaders will run

00:14:05.756 --> 00:14:06.976 A:middle
your full [inaudible] using the

00:14:06.976 --> 00:14:08.566 A:middle
new shaders, so that you can

00:14:08.566 --> 00:14:10.096 A:middle
check the results right away.

00:14:11.356 --> 00:14:14.236 A:middle
And as we can see here now our

00:14:14.236 --> 00:14:15.916 A:middle
water surface is smooth.

00:14:17.266 --> 00:14:18.876 A:middle
But let's check it in action,

00:14:19.166 --> 00:14:20.686 A:middle
just by clicking on the continue

00:14:20.686 --> 00:14:27.706 A:middle
button here in the debug bar.

00:14:27.706 --> 00:14:28.656 A:middle
And, as we can see [applause

00:14:29.446 --> 00:14:31.016 A:middle
begins] now our water simulation

00:14:31.096 --> 00:14:31.826 A:middle
is correct.

00:14:34.456 --> 00:14:36.306 A:middle
In this ex-- in this demo, we

00:14:36.306 --> 00:14:37.896 A:middle
have seen how to take a frame

00:14:37.896 --> 00:14:39.846 A:middle
cocktail, how to use the new

00:14:39.846 --> 00:14:41.606 A:middle
geometry viewer to find broken

00:14:41.606 --> 00:14:43.506 A:middle
vertices, and how to use the new

00:14:43.506 --> 00:14:45.636 A:middle
Shader Debugger to debug and fix

00:14:45.636 --> 00:14:46.696 A:middle
your vertex shaders.

00:14:46.966 --> 00:14:47.976 A:middle
Thank you, and back to Alp.

00:14:48.516 --> 00:14:57.016 A:middle
[ Applause ]

00:14:57.516 --> 00:14:58.226 A:middle
&gt;&gt; Pretty cool, huh?

00:14:58.636 --> 00:15:00.426 A:middle
Thank you, Xavier.

00:14:58.636 --> 00:15:00.426 A:middle
Thank you, Xavier.

00:15:01.646 --> 00:15:02.836 A:middle
Now that you have seen Shader

00:15:02.836 --> 00:15:04.676 A:middle
Debugger in action, let's take a

00:15:04.676 --> 00:15:06.666 A:middle
closer look at how you can use

00:15:06.666 --> 00:15:08.266 A:middle
this tool for your debugging

00:15:08.266 --> 00:15:08.636 A:middle
needs.

00:15:09.246 --> 00:15:10.476 A:middle
First things first, though.

00:15:11.326 --> 00:15:13.196 A:middle
Let's talk about how you can get

00:15:13.196 --> 00:15:16.656 A:middle
into the Shader Debugger.

00:15:16.696 --> 00:15:18.736 A:middle
Here I already captured a frame,

00:15:18.896 --> 00:15:20.316 A:middle
and am on the last roll call,

00:15:20.776 --> 00:15:23.176 A:middle
and then you will have draw or

00:15:23.176 --> 00:15:25.486 A:middle
dispatch call selected, the

00:15:25.746 --> 00:15:27.606 A:middle
debug shader button on the debug

00:15:27.666 --> 00:15:29.706 A:middle
bar will be enabled for your

00:15:30.126 --> 00:15:31.266 A:middle
easy access to the Shader

00:15:31.266 --> 00:15:31.576 A:middle
Debugger.

00:15:32.636 --> 00:15:34.416 A:middle
Clicking that will show a view

00:15:34.646 --> 00:15:35.676 A:middle
for you to select the thread

00:15:35.706 --> 00:15:36.506 A:middle
you're interested in.

00:15:37.906 --> 00:15:39.246 A:middle
And selecting threads means

00:15:39.336 --> 00:15:41.166 A:middle
different things depending on

00:15:41.166 --> 00:15:42.126 A:middle
the type of shader you are

00:15:42.126 --> 00:15:42.636 A:middle
debugging.

00:15:43.726 --> 00:15:45.996 A:middle
For fragment shader, you will be

00:15:46.196 --> 00:15:47.956 A:middle
using the pixel inspector to

00:15:47.956 --> 00:15:49.496 A:middle
select the pixel you want to

00:15:49.566 --> 00:15:49.976 A:middle
debug.

00:15:50.966 --> 00:15:53.176 A:middle
For vertex shader, you will be

00:15:53.176 --> 00:15:54.596 A:middle
using the geometry viewer we

00:15:54.596 --> 00:15:56.446 A:middle
have just seen to select the

00:15:56.446 --> 00:15:57.636 A:middle
vertex you want to focus on.

00:15:58.166 --> 00:16:01.236 A:middle
And for compute, you will be

00:15:58.166 --> 00:16:01.236 A:middle
And for compute, you will be

00:16:01.236 --> 00:16:03.286 A:middle
using the controls to select the

00:16:03.286 --> 00:16:04.516 A:middle
thread you are interested in.

00:16:05.176 --> 00:16:07.166 A:middle
And then, just click the debug

00:16:07.166 --> 00:16:08.906 A:middle
button, and that's it.

00:16:09.596 --> 00:16:10.556 A:middle
You are in the Shader Debugger.

00:16:11.556 --> 00:16:12.696 A:middle
And whilst you're in the Shader

00:16:12.696 --> 00:16:14.666 A:middle
Debugger, it is so easy to

00:16:14.666 --> 00:16:16.006 A:middle
inspect any variable you are

00:16:16.006 --> 00:16:16.686 A:middle
interested in.

00:16:17.846 --> 00:16:18.706 A:middle
You just need to go to the

00:16:18.706 --> 00:16:19.936 A:middle
source line you have the

00:16:19.936 --> 00:16:21.716 A:middle
variable, and that is all you

00:16:21.716 --> 00:16:22.836 A:middle
have to do.

00:16:22.996 --> 00:16:24.256 A:middle
You don't need any break points,

00:16:24.546 --> 00:16:25.436 A:middle
you don't need to step through

00:16:25.436 --> 00:16:25.926 A:middle
your code.

00:16:26.566 --> 00:16:28.356 A:middle
The values of the modified

00:16:28.356 --> 00:16:30.376 A:middle
variables in the line are going

00:16:30.376 --> 00:16:31.716 A:middle
to be available on the side bar.

00:16:32.946 --> 00:16:34.406 A:middle
And as you have seen in the

00:16:34.406 --> 00:16:35.836 A:middle
demo, we highlight [inaudible]

00:16:35.956 --> 00:16:38.976 A:middle
and infinite values in there, so

00:16:38.976 --> 00:16:40.576 A:middle
that it's really easy to spot

00:16:40.576 --> 00:16:41.466 A:middle
common mistakes.

00:16:42.636 --> 00:16:43.806 A:middle
You can just use the button on

00:16:43.806 --> 00:16:45.826 A:middle
the side bar to enable the

00:16:45.826 --> 00:16:47.816 A:middle
detail views, and get full

00:16:47.816 --> 00:16:49.486 A:middle
details about your variables.

00:16:49.946 --> 00:16:53.356 A:middle
This is pretty handy, especially

00:16:53.356 --> 00:16:54.696 A:middle
if you want to inspect the

00:16:54.696 --> 00:16:56.196 A:middle
complex [inaudible] and want to

00:16:56.196 --> 00:16:57.786 A:middle
dive into different components.

00:16:59.396 --> 00:17:02.136 A:middle
Or you can just hover on any

00:16:59.396 --> 00:17:02.136 A:middle
Or you can just hover on any

00:17:02.136 --> 00:17:03.346 A:middle
variable you have in your source

00:17:03.346 --> 00:17:05.776 A:middle
code, and you will instantly see

00:17:05.776 --> 00:17:07.316 A:middle
the value of the variable at

00:17:07.316 --> 00:17:07.866 A:middle
that point.

00:17:08.685 --> 00:17:11.256 A:middle
And this is partially useful if

00:17:11.526 --> 00:17:13.366 A:middle
you are sampling from a texture,

00:17:13.526 --> 00:17:15.726 A:middle
like in this example, and you

00:17:15.726 --> 00:17:17.715 A:middle
want to quickly check whether

00:17:17.715 --> 00:17:20.506 A:middle
this is the right texture.

00:17:20.626 --> 00:17:23.016 A:middle
And just like in CPU debuggers,

00:17:23.705 --> 00:17:24.626 A:middle
you have access to your

00:17:24.626 --> 00:17:26.796 A:middle
variables view, showing you all

00:17:26.796 --> 00:17:29.876 A:middle
your variables in scope.

00:17:30.046 --> 00:17:32.496 A:middle
So inspecting variables is a

00:17:32.496 --> 00:17:33.656 A:middle
core part of debugging your

00:17:33.656 --> 00:17:35.856 A:middle
shaders, but that is only half

00:17:35.856 --> 00:17:36.396 A:middle
of the story.

00:17:37.096 --> 00:17:38.696 A:middle
You also want to know what is

00:17:38.726 --> 00:17:40.376 A:middle
the order of your code getting

00:17:40.376 --> 00:17:40.996 A:middle
executed?

00:17:41.536 --> 00:17:42.896 A:middle
And Shader Debugger makes this

00:17:42.896 --> 00:17:43.866 A:middle
really easy as well.

00:17:44.486 --> 00:17:46.876 A:middle
When you get into Shader

00:17:46.876 --> 00:17:48.356 A:middle
Debugger, in the Debug

00:17:48.356 --> 00:17:50.386 A:middle
Navigator, you will see all your

00:17:50.386 --> 00:17:52.316 A:middle
source line execute by your

00:17:52.316 --> 00:17:53.546 A:middle
shader for your selected

00:17:53.546 --> 00:17:53.946 A:middle
threads.

00:17:55.906 --> 00:17:58.276 A:middle
And you can select any line you

00:17:58.276 --> 00:17:59.596 A:middle
want and directly navigate to

00:17:59.596 --> 00:17:59.856 A:middle
that.

00:18:00.866 --> 00:18:03.156 A:middle
This also provides a unique

00:18:03.156 --> 00:18:04.486 A:middle
stepping experience where you

00:18:04.486 --> 00:18:06.656 A:middle
can just use your cursor keys to

00:18:06.656 --> 00:18:08.326 A:middle
step through your code.

00:18:09.206 --> 00:18:10.776 A:middle
Functions are groups in the

00:18:10.776 --> 00:18:12.306 A:middle
navigator, so that you can just

00:18:12.306 --> 00:18:17.166 A:middle
expand them and step into them.

00:18:17.166 --> 00:18:18.676 A:middle
This also enables backward

00:18:18.746 --> 00:18:21.046 A:middle
debugging, which is a really

00:18:21.046 --> 00:18:22.976 A:middle
powerful way of debugging your

00:18:22.976 --> 00:18:23.526 A:middle
shaders.

00:18:23.866 --> 00:18:25.326 A:middle
Just find the variable that has

00:18:25.326 --> 00:18:27.476 A:middle
the wrong value, and just work

00:18:27.476 --> 00:18:29.266 A:middle
your way backward to see where

00:18:29.336 --> 00:18:33.396 A:middle
it got wrong, and why.

00:18:33.596 --> 00:18:35.026 A:middle
Also you can use the filtering.

00:18:35.946 --> 00:18:37.686 A:middle
Filtering is a great way to

00:18:37.686 --> 00:18:41.576 A:middle
focus, and you can filter for

00:18:41.576 --> 00:18:42.716 A:middle
anything you are interested in

00:18:42.746 --> 00:18:43.506 A:middle
your shader code.

00:18:44.396 --> 00:18:46.336 A:middle
Filter will be matching with

00:18:46.486 --> 00:18:48.876 A:middle
function calls, variables,

00:18:49.296 --> 00:18:50.046 A:middle
resources.

00:18:50.996 --> 00:18:53.676 A:middle
And your shader code might span

00:18:53.676 --> 00:18:55.936 A:middle
across many different files, but

00:18:55.936 --> 00:18:58.046 A:middle
if you use filter, it will only

00:18:58.046 --> 00:18:59.686 A:middle
match with what your shader

00:18:59.686 --> 00:19:01.996 A:middle
executed, so it's a really great

00:18:59.686 --> 00:19:01.996 A:middle
executed, so it's a really great

00:19:01.996 --> 00:19:05.966 A:middle
way to focus.

00:19:06.166 --> 00:19:08.286 A:middle
So far, what we have seen is

00:19:08.406 --> 00:19:09.686 A:middle
great for debugging a single

00:19:09.686 --> 00:19:12.286 A:middle
thread, but what about other

00:19:12.286 --> 00:19:12.706 A:middle
threads?

00:19:14.346 --> 00:19:16.156 A:middle
Shader Debugger also gives you

00:19:16.156 --> 00:19:18.276 A:middle
access to other threads based on

00:19:18.276 --> 00:19:20.596 A:middle
the initial thread you selected.

00:19:21.866 --> 00:19:23.926 A:middle
What this means is, for vertex,

00:19:24.456 --> 00:19:25.886 A:middle
you'll get the primitive of your

00:19:25.886 --> 00:19:27.846 A:middle
selected vertex.

00:19:28.156 --> 00:19:30.056 A:middle
For fragment, you'll get direct

00:19:30.056 --> 00:19:31.576 A:middle
angle area, and on your selected

00:19:31.576 --> 00:19:31.996 A:middle
pixel.

00:19:33.436 --> 00:19:35.316 A:middle
For compute, you'll be getting

00:19:35.316 --> 00:19:36.596 A:middle
the full thread group of your

00:19:36.596 --> 00:19:38.326 A:middle
selected compute thread, so that

00:19:38.326 --> 00:19:39.836 A:middle
you have access to all variables

00:19:40.106 --> 00:19:42.146 A:middle
interacting with the thread

00:19:42.636 --> 00:19:43.696 A:middle
group memory.

00:19:43.936 --> 00:19:46.476 A:middle
Now, let's look at how accessing

00:19:46.476 --> 00:19:48.966 A:middle
other threads can help you debug

00:19:48.966 --> 00:19:49.786 A:middle
fragment shaders.

00:19:50.336 --> 00:19:54.766 A:middle
So while your code executes

00:19:55.106 --> 00:19:56.606 A:middle
millions of different pixels,

00:19:57.576 --> 00:20:00.196 A:middle
seeing a single variable for a

00:19:57.576 --> 00:20:00.196 A:middle
seeing a single variable for a

00:20:00.196 --> 00:20:02.056 A:middle
single pixel may not help you in

00:20:02.056 --> 00:20:02.716 A:middle
all the cases.

00:20:03.546 --> 00:20:05.136 A:middle
Here, I have an example, I'm

00:20:05.506 --> 00:20:08.016 A:middle
calculating a gradient, and I

00:20:08.016 --> 00:20:09.156 A:middle
can't see the single gradient

00:20:09.156 --> 00:20:09.476 A:middle
value.

00:20:09.796 --> 00:20:11.546 A:middle
But I can't really tell whether

00:20:11.546 --> 00:20:13.256 A:middle
this gradient value is good for

00:20:13.256 --> 00:20:14.776 A:middle
my pixels, or bad for my pixels.

00:20:15.756 --> 00:20:18.306 A:middle
With a single click, to bring up

00:20:18.336 --> 00:20:21.106 A:middle
the detail views, I can see this

00:20:21.106 --> 00:20:23.136 A:middle
gradient value across thousands

00:20:23.136 --> 00:20:25.036 A:middle
of other pixels around my pixel,

00:20:25.316 --> 00:20:27.596 A:middle
and now I can tell this gradient

00:20:27.596 --> 00:20:29.296 A:middle
is not correct because I can

00:20:29.296 --> 00:20:31.236 A:middle
clearly see it's not smooth.

00:20:32.216 --> 00:20:34.146 A:middle
As you've seen, detail views

00:20:34.176 --> 00:20:35.716 A:middle
help you understand your shader,

00:20:36.536 --> 00:20:39.456 A:middle
and identify good and bad values

00:20:39.456 --> 00:20:40.376 A:middle
for your shaders.

00:20:40.916 --> 00:20:44.506 A:middle
You can quickly hover into any

00:20:44.506 --> 00:20:47.116 A:middle
other pixel to instantly see the

00:20:47.116 --> 00:20:48.776 A:middle
value of that variable for that

00:20:48.776 --> 00:20:49.196 A:middle
pixel.

00:20:49.796 --> 00:20:54.036 A:middle
And you can also use this view

00:20:54.286 --> 00:20:56.926 A:middle
to switch threads.

00:20:57.036 --> 00:20:58.826 A:middle
Switching threads is great for

00:20:58.826 --> 00:21:00.596 A:middle
comparing cases where you can

00:20:58.826 --> 00:21:00.596 A:middle
comparing cases where you can

00:21:00.596 --> 00:21:02.566 A:middle
clearly see good and bad pixels.

00:21:03.006 --> 00:21:04.456 A:middle
You can quickly switch between

00:21:04.456 --> 00:21:06.676 A:middle
them and see what the back pixel

00:21:06.676 --> 00:21:07.116 A:middle
is doing.

00:21:08.666 --> 00:21:10.526 A:middle
Once we switch threads, we

00:21:10.526 --> 00:21:12.306 A:middle
update the execution history and

00:21:12.306 --> 00:21:14.456 A:middle
the variable views, so that you

00:21:14.456 --> 00:21:15.806 A:middle
can fully debug your

00:21:15.806 --> 00:21:17.606 A:middle
newly-selected threads.

00:21:19.096 --> 00:21:20.596 A:middle
This gets even better.

00:21:21.716 --> 00:21:23.276 A:middle
Detail views also help you

00:21:23.276 --> 00:21:24.836 A:middle
understand your divergence.

00:21:26.256 --> 00:21:29.706 A:middle
So whenever you enable detail

00:21:29.706 --> 00:21:31.716 A:middle
view, the mask on the right-hand

00:21:31.716 --> 00:21:34.716 A:middle
side will always show you what

00:21:34.786 --> 00:21:36.556 A:middle
other threads executed the same

00:21:36.556 --> 00:21:37.226 A:middle
line of code.

00:21:38.686 --> 00:21:40.456 A:middle
In this example, it's

00:21:40.556 --> 00:21:43.776 A:middle
conditional, and just looking at

00:21:43.776 --> 00:21:45.416 A:middle
the mask, I can clearly tell

00:21:45.416 --> 00:21:47.796 A:middle
that roughly half of my threads

00:21:48.086 --> 00:21:49.786 A:middle
executed inside this-- if

00:21:49.786 --> 00:21:51.786 A:middle
conditional, in a diagonal

00:21:51.786 --> 00:21:52.046 A:middle
shape.

00:21:53.556 --> 00:21:57.276 A:middle
So now, to show you how you can

00:21:57.276 --> 00:21:59.196 A:middle
use detail views to fix problems

00:21:59.196 --> 00:22:00.946 A:middle
in fragment shaders, I would

00:21:59.196 --> 00:22:00.946 A:middle
in fragment shaders, I would

00:22:00.946 --> 00:22:02.916 A:middle
like to invite Xavier back to

00:22:02.916 --> 00:22:03.366 A:middle
the stage.

00:22:03.746 --> 00:22:04.136 A:middle
Xavier?

00:22:05.516 --> 00:22:08.596 A:middle
[ Applause ]

00:22:09.096 --> 00:22:09.476 A:middle
&gt;&gt; Thank you, Alp.

00:22:10.136 --> 00:22:11.486 A:middle
After fixing our geometric

00:22:11.486 --> 00:22:13.086 A:middle
problems in the first demo, I

00:22:13.316 --> 00:22:15.096 A:middle
added highlights as a process

00:22:15.096 --> 00:22:15.606 A:middle
and effect.

00:22:16.176 --> 00:22:17.376 A:middle
But the results were not as

00:22:17.376 --> 00:22:17.986 A:middle
suspected.

00:22:18.646 --> 00:22:19.936 A:middle
So I took a frame capture to

00:22:19.936 --> 00:22:20.706 A:middle
debug the issue.

00:22:25.756 --> 00:22:27.506 A:middle
It was here in the [inaudible]

00:22:27.506 --> 00:22:30.016 A:middle
view, we can see that our

00:22:30.096 --> 00:22:31.356 A:middle
highlights are actually

00:22:31.356 --> 00:22:33.076 A:middle
generating dark areas in the

00:22:33.076 --> 00:22:33.886 A:middle
bottom parts.

00:22:34.336 --> 00:22:36.246 A:middle
So let's use the Shader Debugger

00:22:36.346 --> 00:22:37.526 A:middle
to debug and fix this issue.

00:22:38.756 --> 00:22:40.746 A:middle
By not pressing, I'm bringing up

00:22:40.886 --> 00:22:42.796 A:middle
the pixel inspector, which

00:22:42.796 --> 00:22:44.246 A:middle
allows you to select the pixel

00:22:44.246 --> 00:22:45.096 A:middle
that you want to debug.

00:22:45.776 --> 00:22:47.736 A:middle
So here, we are going to select

00:22:47.736 --> 00:22:49.576 A:middle
one of the pixels, for example

00:22:49.576 --> 00:22:51.446 A:middle
this one, and to start the

00:22:51.446 --> 00:22:52.876 A:middle
Shader Debugger, you have to

00:22:52.876 --> 00:22:54.636 A:middle
click the debug button here on

00:22:54.636 --> 00:22:55.566 A:middle
the bottom right corner.

00:22:58.216 --> 00:22:59.556 A:middle
And now, we are debugging the

00:22:59.556 --> 00:23:00.296 A:middle
frame and shader.

00:22:59.556 --> 00:23:00.296 A:middle
frame and shader.

00:23:05.416 --> 00:23:07.656 A:middle
As we can see here, the

00:23:07.726 --> 00:23:09.186 A:middle
highlights are generated in

00:23:09.186 --> 00:23:10.416 A:middle
three different steps.

00:23:10.976 --> 00:23:12.346 A:middle
So let's use the detailed views

00:23:12.346 --> 00:23:13.646 A:middle
to quickly understand what is

00:23:13.646 --> 00:23:14.126 A:middle
happening.

00:23:14.516 --> 00:23:16.466 A:middle
Let's start at the beginning on

00:23:16.466 --> 00:23:17.416 A:middle
this close first one.

00:23:17.876 --> 00:23:21.676 A:middle
As we can see here, we are just

00:23:21.676 --> 00:23:23.336 A:middle
sampling from our original

00:23:23.336 --> 00:23:25.576 A:middle
color, and this looks correct.

00:23:25.986 --> 00:23:29.056 A:middle
So let's see what is next.

00:23:29.176 --> 00:23:30.596 A:middle
Here, we are accumulating

00:23:30.676 --> 00:23:31.716 A:middle
highlights in one of the

00:23:31.716 --> 00:23:33.696 A:middle
directions, so let's take the

00:23:33.696 --> 00:23:35.246 A:middle
results by opening the detailed

00:23:35.246 --> 00:23:35.436 A:middle
view.

00:23:35.926 --> 00:23:39.246 A:middle
And as we can see here in the

00:23:39.246 --> 00:23:41.116 A:middle
detailed view, there is already

00:23:41.116 --> 00:23:42.776 A:middle
dark area in the bottom part,

00:23:42.896 --> 00:23:45.556 A:middle
right here, so then the problem

00:23:45.556 --> 00:23:46.696 A:middle
must be in how we are

00:23:46.696 --> 00:23:48.066 A:middle
accumulating those highlights.

00:23:48.726 --> 00:23:51.016 A:middle
As you can see, detailed views

00:23:51.016 --> 00:23:52.136 A:middle
are a powerful tool to

00:23:52.376 --> 00:23:53.816 A:middle
understand your shader without

00:23:53.816 --> 00:23:55.186 A:middle
even having to read the code.

00:23:56.396 --> 00:23:58.376 A:middle
So let's use the Debug Navigator

00:23:58.476 --> 00:24:00.056 A:middle
to go to that first one and

00:23:58.476 --> 00:24:00.056 A:middle
to go to that first one and

00:24:00.056 --> 00:24:01.396 A:middle
investigate what is happening.

00:24:01.866 --> 00:24:06.386 A:middle
As we can see here, this

00:24:06.386 --> 00:24:08.106 A:middle
function is mainly a loop that

00:24:08.106 --> 00:24:09.316 A:middle
iterates a few times,

00:24:09.456 --> 00:24:11.256 A:middle
accumulating samples from

00:24:13.036 --> 00:24:13.326 A:middle
[inaudible] map.

00:24:13.326 --> 00:24:14.946 A:middle
Loops are highlighted just in

00:24:14.946 --> 00:24:16.976 A:middle
the Shader Debugger, which means

00:24:16.976 --> 00:24:18.666 A:middle
that you can navigate through

00:24:18.666 --> 00:24:20.426 A:middle
your iterations using the Debug

00:24:20.426 --> 00:24:22.396 A:middle
Navigator, and you will get,

00:24:22.696 --> 00:24:24.086 A:middle
alongside with your source code,

00:24:24.316 --> 00:24:25.766 A:middle
the value of the variables at

00:24:25.766 --> 00:24:27.266 A:middle
each one of the iterations.

00:24:27.796 --> 00:24:31.596 A:middle
If we focus here, we can see

00:24:31.596 --> 00:24:32.786 A:middle
that as I navigate through the

00:24:32.786 --> 00:24:34.606 A:middle
different iterations, the values

00:24:34.606 --> 00:24:35.046 A:middle
change.

00:24:37.016 --> 00:24:39.656 A:middle
But what is really powerful is

00:24:39.656 --> 00:24:40.956 A:middle
combining this with detailed

00:24:40.956 --> 00:24:41.466 A:middle
views.

00:24:42.186 --> 00:24:44.196 A:middle
So here, we are going to bring

00:24:44.196 --> 00:24:45.566 A:middle
up the detailed view for final

00:24:45.566 --> 00:24:47.226 A:middle
color, that this is where we are

00:24:47.226 --> 00:24:48.666 A:middle
accumulating our highlights.

00:24:51.536 --> 00:24:53.556 A:middle
And now let's iterate using the

00:24:53.556 --> 00:24:54.476 A:middle
Debug Navigator.

00:24:55.326 --> 00:24:57.906 A:middle
As we can see, as I iterate, we

00:24:58.056 --> 00:24:59.346 A:middle
are starting to accumulate

00:24:59.346 --> 00:25:00.946 A:middle
highlights in our final color.

00:24:59.346 --> 00:25:00.946 A:middle
highlights in our final color.

00:25:01.536 --> 00:25:03.296 A:middle
But as I continue iterating

00:25:03.296 --> 00:25:05.106 A:middle
toward the end of the loop, we

00:25:05.106 --> 00:25:06.626 A:middle
are actually seeing this, there

00:25:06.626 --> 00:25:07.236 A:middle
is a pattern.

00:25:07.766 --> 00:25:09.986 A:middle
So let's investigate why this is

00:25:09.986 --> 00:25:10.506 A:middle
happening.

00:25:14.116 --> 00:25:15.806 A:middle
As we see here in the Debugger,

00:25:16.156 --> 00:25:18.176 A:middle
we can actually see that our

00:25:18.176 --> 00:25:19.116 A:middle
weight is negative.

00:25:19.626 --> 00:25:21.076 A:middle
And this is what is causing the

00:25:21.076 --> 00:25:23.206 A:middle
color to be distracted rather

00:25:23.206 --> 00:25:25.146 A:middle
than accumulated in our final

00:25:25.146 --> 00:25:25.346 A:middle
color.

00:25:26.436 --> 00:25:28.286 A:middle
So now that we have found the

00:25:28.476 --> 00:25:30.056 A:middle
cause of our issue, let me

00:25:30.056 --> 00:25:31.586 A:middle
quickly fix this.

00:25:34.616 --> 00:25:36.296 A:middle
And now, let's check the

00:25:36.296 --> 00:25:38.036 A:middle
results, just by checking in the

00:25:38.036 --> 00:25:39.716 A:middle
reload changes button, here in

00:25:39.716 --> 00:25:42.776 A:middle
the debug bar.

00:25:42.776 --> 00:25:44.946 A:middle
And as we can see here, now

00:25:45.036 --> 00:25:46.366 A:middle
there is no more other carriers,

00:25:46.656 --> 00:25:48.496 A:middle
but let's see it in action, just

00:25:48.496 --> 00:25:49.566 A:middle
by clicking on the Continue

00:25:49.566 --> 00:25:50.036 A:middle
button.

00:25:54.556 --> 00:25:56.686 A:middle
And indeed, now our highlight

00:25:56.686 --> 00:25:57.346 A:middle
looks correct.

00:25:58.066 --> 00:26:00.146 A:middle
This is just an example of how

00:25:58.066 --> 00:26:00.146 A:middle
This is just an example of how

00:26:00.146 --> 00:26:01.516 A:middle
you can use the Shader Debugger

00:26:01.516 --> 00:26:03.896 A:middle
and its powerful detailed views

00:26:04.086 --> 00:26:05.376 A:middle
to debug [inaudible] Shaders.

00:26:05.896 --> 00:26:06.426 A:middle
Thank you.

00:26:06.426 --> 00:26:07.466 A:middle
And back to Alp.

00:26:08.516 --> 00:26:11.646 A:middle
[ Applause ]

00:26:12.146 --> 00:26:12.766 A:middle
&gt;&gt; Thank you, Xavier.

00:26:14.316 --> 00:26:16.316 A:middle
Now that you have seen

00:26:16.316 --> 00:26:17.196 A:middle
everything about Shader

00:26:17.196 --> 00:26:19.996 A:middle
Debugger, let's recap what we've

00:26:19.996 --> 00:26:22.526 A:middle
talked about so far.

00:26:22.716 --> 00:26:25.036 A:middle
Shader Debugger is specifically

00:26:25.036 --> 00:26:26.496 A:middle
designed for debugging Metal

00:26:26.496 --> 00:26:28.736 A:middle
shaders, taking into account of

00:26:28.736 --> 00:26:30.236 A:middle
the highly parallel nature of

00:26:30.236 --> 00:26:33.666 A:middle
GPUs, and as you've seen, it's

00:26:33.666 --> 00:26:36.066 A:middle
great for fixing bugs with the

00:26:36.066 --> 00:26:37.796 A:middle
highlights to nans and

00:26:37.796 --> 00:26:40.456 A:middle
infinites, it is so easy to spot

00:26:40.456 --> 00:26:43.036 A:middle
common mistakes, and also it's

00:26:43.036 --> 00:26:44.706 A:middle
great for understanding your

00:26:44.706 --> 00:26:45.136 A:middle
shader.

00:26:45.976 --> 00:26:47.426 A:middle
With the detailed views, you

00:26:47.426 --> 00:26:48.836 A:middle
don't even need to read the code

00:26:49.116 --> 00:26:50.296 A:middle
to understand what your shader

00:26:50.296 --> 00:26:50.726 A:middle
is doing.

00:26:51.756 --> 00:26:53.996 A:middle
And also it provides excellent

00:26:53.996 --> 00:26:55.476 A:middle
environment to develop your

00:26:55.476 --> 00:26:56.066 A:middle
shaders in.

00:26:56.766 --> 00:26:58.016 A:middle
Just get into Shader Debugger

00:26:58.306 --> 00:27:01.356 A:middle
and start editing, and read out

00:26:58.306 --> 00:27:01.356 A:middle
and start editing, and read out

00:27:01.476 --> 00:27:02.916 A:middle
to quickly iterate all your

00:27:02.916 --> 00:27:03.426 A:middle
results.

00:27:03.916 --> 00:27:07.486 A:middle
Shader Debugger supports iOS,

00:27:07.806 --> 00:27:10.336 A:middle
Mac, OS and tvOS with the recent

00:27:10.336 --> 00:27:10.726 A:middle
hardware.

00:27:12.066 --> 00:27:14.456 A:middle
And it is yours to enjoy with

00:27:14.956 --> 00:27:15.660 A:middle
Xcode 10.

00:27:17.516 --> 00:27:21.546 A:middle
[ Applause ]

00:27:22.046 --> 00:27:23.286 A:middle
&gt;&gt; And now that we've seen how

00:27:23.286 --> 00:27:24.866 A:middle
you can use geometric viewer and

00:27:24.866 --> 00:27:26.726 A:middle
the Shader Debugger to debug

00:27:26.726 --> 00:27:28.896 A:middle
your shader problems, now let's

00:27:28.896 --> 00:27:30.836 A:middle
focus on how we can make your

00:27:30.836 --> 00:27:32.426 A:middle
shaders run faster.

00:27:36.276 --> 00:27:39.796 A:middle
So optimizing your use of GPU is

00:27:39.796 --> 00:27:42.266 A:middle
important, because you want your

00:27:42.406 --> 00:27:44.196 A:middle
apps to run fast, and consume

00:27:44.196 --> 00:27:46.166 A:middle
less battery for a great user

00:27:46.166 --> 00:27:46.866 A:middle
experience.

00:27:47.416 --> 00:27:49.556 A:middle
But before starting to optimize,

00:27:50.016 --> 00:27:52.836 A:middle
it is important to know what to

00:27:53.406 --> 00:27:53.876 A:middle
optimize.

00:27:54.236 --> 00:27:56.366 A:middle
If you are GPU bound, typical

00:27:56.366 --> 00:27:57.576 A:middle
Metal workload has many

00:27:57.576 --> 00:27:58.406 A:middle
different passes.

00:27:59.106 --> 00:28:01.236 A:middle
And knowing which pass to focus

00:27:59.106 --> 00:28:01.236 A:middle
And knowing which pass to focus

00:28:01.236 --> 00:28:02.846 A:middle
on is quite important.

00:28:03.646 --> 00:28:05.876 A:middle
The good news is we have great

00:28:05.876 --> 00:28:07.756 A:middle
profiling tools built into Metal

00:28:07.756 --> 00:28:09.886 A:middle
frame debugger to help you with

00:28:11.236 --> 00:28:11.386 A:middle
this.

00:28:11.576 --> 00:28:13.636 A:middle
GPU counters gives you high

00:28:13.636 --> 00:28:14.736 A:middle
level performance [inaudible] of

00:28:14.736 --> 00:28:15.476 A:middle
your app.

00:28:16.406 --> 00:28:17.846 A:middle
That you can see, time

00:28:17.946 --> 00:28:19.946 A:middle
[inaudible] or draw call, and

00:28:19.946 --> 00:28:21.896 A:middle
also providing you different

00:28:21.896 --> 00:28:23.786 A:middle
counters showing bottlenecks.

00:28:25.066 --> 00:28:26.686 A:middle
And from here, once you know

00:28:26.856 --> 00:28:28.616 A:middle
your expansive pass, you can

00:28:28.616 --> 00:28:29.526 A:middle
just move to pipeline

00:28:29.526 --> 00:28:30.276 A:middle
statistics.

00:28:31.076 --> 00:28:33.446 A:middle
And here you get great compile

00:28:33.646 --> 00:28:36.486 A:middle
for your shaders, giving you the

00:28:36.486 --> 00:28:38.926 A:middle
type of instructions you have.

00:28:39.676 --> 00:28:42.566 A:middle
And using the Shader Profiler,

00:28:42.986 --> 00:28:44.846 A:middle
you get visibility into timings

00:28:44.896 --> 00:28:47.136 A:middle
for draw call or per-pipeline

00:28:48.366 --> 00:28:48.536 A:middle
states.

00:28:48.826 --> 00:28:51.896 A:middle
So today, I'll be focusing on

00:28:51.986 --> 00:28:53.736 A:middle
Shader Profiler, and I will show

00:28:53.736 --> 00:28:55.296 A:middle
you work flows that will help

00:28:55.296 --> 00:28:57.016 A:middle
you optimize your shaders.

00:28:57.516 --> 00:29:02.176 A:middle
So once you are in the Metal

00:28:57.516 --> 00:29:02.176 A:middle
So once you are in the Metal

00:29:02.176 --> 00:29:04.306 A:middle
frame debugger, going to read by

00:29:04.306 --> 00:29:06.156 A:middle
performance navigator, you will

00:29:06.156 --> 00:29:07.826 A:middle
see all your pipeline states

00:29:08.226 --> 00:29:09.976 A:middle
sorted by the time it takes to

00:29:09.976 --> 00:29:10.666 A:middle
execute them.

00:29:11.446 --> 00:29:13.806 A:middle
This is a great place to see all

00:29:13.806 --> 00:29:15.786 A:middle
your expansive pipelines that we

00:29:15.786 --> 00:29:16.786 A:middle
are optimizing.

00:29:18.036 --> 00:29:19.766 A:middle
And here, you also have access

00:29:19.766 --> 00:29:21.366 A:middle
to your draw-calls, using these

00:29:21.366 --> 00:29:23.016 A:middle
pipeline states, so that you can

00:29:23.016 --> 00:29:24.836 A:middle
directly navigate to one and see

00:29:24.836 --> 00:29:25.656 A:middle
what it is drawing.

00:29:26.166 --> 00:29:29.486 A:middle
And if you're in iOS or tvOS,

00:29:30.466 --> 00:29:31.806 A:middle
just going to the Shader Source,

00:29:32.076 --> 00:29:32.966 A:middle
you'll get the per line

00:29:32.966 --> 00:29:33.976 A:middle
execution cost.

00:29:34.846 --> 00:29:36.286 A:middle
This is a great place to see

00:29:36.626 --> 00:29:38.806 A:middle
where you are spending the most

00:29:38.806 --> 00:29:40.456 A:middle
time in your shaders, per line

00:29:40.456 --> 00:29:40.966 A:middle
basis.

00:29:41.996 --> 00:29:44.056 A:middle
And once you are in your shader

00:29:44.056 --> 00:29:46.046 A:middle
source, you can just start

00:29:46.046 --> 00:29:48.086 A:middle
editing your code, and reload to

00:29:48.086 --> 00:29:50.326 A:middle
see if it makes any difference

00:29:50.796 --> 00:29:51.776 A:middle
in timing.

00:29:52.816 --> 00:29:54.726 A:middle
Or you can just get into Shader

00:29:54.726 --> 00:29:55.096 A:middle
Debugger.

00:29:56.136 --> 00:29:57.736 A:middle
This is a great workflow if you

00:29:57.736 --> 00:29:58.586 A:middle
are trying to optimize an

00:29:58.586 --> 00:30:00.676 A:middle
algorithm or when I just get

00:29:58.586 --> 00:30:00.676 A:middle
algorithm or when I just get

00:30:00.676 --> 00:30:02.166 A:middle
through this control flow, and

00:30:02.166 --> 00:30:04.046 A:middle
when I understand whether you

00:30:05.676 --> 00:30:06.196 A:middle
can.

00:30:06.196 --> 00:30:08.906 A:middle
So Shader Profiler helps you a

00:30:08.906 --> 00:30:10.596 A:middle
lot trying to optimize your

00:30:10.596 --> 00:30:13.336 A:middle
shaders, but we made this even

00:30:13.336 --> 00:30:17.330 A:middle
better for A11.

00:30:18.096 --> 00:30:19.286 A:middle
Now, A11 [inaudible] being the

00:30:19.606 --> 00:30:21.366 A:middle
completely [inaudible] design

00:30:21.366 --> 00:30:23.486 A:middle
GPU, now we have hardware

00:30:23.486 --> 00:30:24.826 A:middle
support to give you even more

00:30:24.826 --> 00:30:26.366 A:middle
insight in what your shaders are

00:30:27.696 --> 00:30:27.816 A:middle
doing.

00:30:28.046 --> 00:30:30.126 A:middle
Now with A11, you get this

00:30:30.126 --> 00:30:32.596 A:middle
chart, per line, showing you the

00:30:32.686 --> 00:30:34.196 A:middle
cost breakdown of the executed

00:30:34.196 --> 00:30:34.496 A:middle
line.

00:30:35.096 --> 00:30:37.106 A:middle
So Shader consists different

00:30:37.106 --> 00:30:39.706 A:middle
execution units, and if you are

00:30:39.706 --> 00:30:41.526 A:middle
using one of them heavily, you

00:30:41.526 --> 00:30:42.716 A:middle
might be bottlenecked by that.

00:30:43.936 --> 00:30:46.096 A:middle
So seeing ALU and memory

00:30:46.096 --> 00:30:48.456 A:middle
breakdown gives you visibility

00:30:48.926 --> 00:30:50.776 A:middle
into like time spent in

00:30:50.776 --> 00:30:51.996 A:middle
different execution units.

00:30:53.516 --> 00:30:55.196 A:middle
We did a lot of work for how

00:30:55.196 --> 00:30:56.516 A:middle
precision instructions to be

00:30:56.516 --> 00:30:57.876 A:middle
much more efficient in A11.

00:30:58.366 --> 00:31:00.136 A:middle
So using health, overflows,

00:30:58.366 --> 00:31:00.136 A:middle
So using health, overflows,

00:31:00.186 --> 00:31:02.026 A:middle
might bring significant things

00:31:02.346 --> 00:31:03.296 A:middle
on your GP budget.

00:31:03.526 --> 00:31:07.596 A:middle
And another category now you

00:31:07.596 --> 00:31:08.786 A:middle
have visibility into is

00:31:08.886 --> 00:31:10.786 A:middle
synchronization, which is an

00:31:10.786 --> 00:31:12.006 A:middle
important category to look at

00:31:12.006 --> 00:31:13.696 A:middle
because you want your Shader

00:31:13.696 --> 00:31:16.246 A:middle
core to be busy doing work, not

00:31:16.246 --> 00:31:17.396 A:middle
waiting for synchronization.

00:31:18.266 --> 00:31:20.776 A:middle
And in your shader code, if you

00:31:20.776 --> 00:31:21.826 A:middle
are reading from texture,

00:31:21.826 --> 00:31:24.616 A:middle
buffers, or using atomics or

00:31:24.616 --> 00:31:26.886 A:middle
barriers, you might have stalls

00:31:27.046 --> 00:31:28.286 A:middle
waiting for synchronization.

00:31:29.576 --> 00:31:32.196 A:middle
And also now we provide you

00:31:32.196 --> 00:31:34.066 A:middle
ability to see cost of in-line

00:31:34.066 --> 00:31:35.706 A:middle
functions, you are calling from

00:31:35.706 --> 00:31:36.396 A:middle
your shaders.

00:31:36.946 --> 00:31:39.286 A:middle
This way you can directly

00:31:39.286 --> 00:31:40.646 A:middle
navigate to your most expensive

00:31:40.646 --> 00:31:42.706 A:middle
function, and start optimizing

00:31:46.326 --> 00:31:47.000 A:middle
that [applause].

00:31:48.886 --> 00:31:51.166 A:middle
&gt;&gt; Welcome to the Apple designed

00:31:51.166 --> 00:31:52.566 A:middle
A11 bionic chip.

00:31:53.056 --> 00:31:54.786 A:middle
We can provide better profiling

00:31:54.786 --> 00:31:55.666 A:middle
data than ever.

00:31:56.346 --> 00:31:58.256 A:middle
This year, we are introducing

00:31:58.256 --> 00:32:00.456 A:middle
per line timing information and

00:31:58.256 --> 00:32:00.456 A:middle
per line timing information and

00:32:00.456 --> 00:32:02.386 A:middle
instruction categories, even in

00:32:02.386 --> 00:32:03.326 A:middle
inline functions.

00:32:03.966 --> 00:32:05.546 A:middle
My name is Max, and I am going

00:32:05.546 --> 00:32:07.686 A:middle
to help you max out your Shader

00:32:09.796 --> 00:32:12.500 A:middle
performance [applause].

00:32:13.776 --> 00:32:15.846 A:middle
So I've captured the same water

00:32:15.846 --> 00:32:17.946 A:middle
simulation again, but this time,

00:32:18.206 --> 00:32:19.636 A:middle
on my iPhone.

00:32:20.636 --> 00:32:23.736 A:middle
Let's begin by change to view

00:32:23.736 --> 00:32:25.046 A:middle
frame by performance.

00:32:25.566 --> 00:32:28.216 A:middle
We now see a list of pipelines

00:32:28.216 --> 00:32:30.066 A:middle
being used in our frame, ordered

00:32:30.106 --> 00:32:32.546 A:middle
by time, and we can easily see

00:32:32.866 --> 00:32:34.066 A:middle
that the noise pipeline is

00:32:34.116 --> 00:32:35.526 A:middle
taking a significant amount of

00:32:35.526 --> 00:32:35.876 A:middle
time.

00:32:37.046 --> 00:32:39.716 A:middle
Disclosing this, we can see that

00:32:39.716 --> 00:32:41.226 A:middle
we spent nearly all the time in

00:32:41.226 --> 00:32:42.176 A:middle
our fragment Shader.

00:32:42.736 --> 00:32:44.456 A:middle
But this year, we can go deeper.

00:32:45.096 --> 00:32:48.896 A:middle
We can see the time we are

00:32:48.896 --> 00:32:51.046 A:middle
spending each inside of each of

00:32:51.046 --> 00:32:52.656 A:middle
the functions that this shader

00:32:52.656 --> 00:32:53.306 A:middle
is calling.

00:32:53.816 --> 00:32:56.766 A:middle
Just clicking here goes to the

00:32:56.766 --> 00:32:58.126 A:middle
source code file, and directly

00:32:58.126 --> 00:32:59.256 A:middle
jumps to the right line.

00:32:59.506 --> 00:33:00.736 A:middle
And that is the start of our

00:32:59.506 --> 00:33:00.736 A:middle
And that is the start of our

00:33:00.736 --> 00:33:01.536 A:middle
investigation.

00:33:04.256 --> 00:33:07.306 A:middle
So what we see here right now on

00:33:07.306 --> 00:33:08.716 A:middle
the right-hand side is a

00:33:08.716 --> 00:33:10.446 A:middle
percentage of time we are

00:33:10.446 --> 00:33:11.666 A:middle
spending inside of this

00:33:11.666 --> 00:33:14.196 A:middle
function, and further down the

00:33:14.196 --> 00:33:16.326 A:middle
percentage of time we spend in

00:33:16.326 --> 00:33:17.846 A:middle
each file-- each line.

00:33:19.186 --> 00:33:20.916 A:middle
Be aware the Shader Profiler

00:33:20.916 --> 00:33:23.386 A:middle
works on optimized code, so the

00:33:23.386 --> 00:33:24.786 A:middle
compiler can reorder the

00:33:24.786 --> 00:33:26.946 A:middle
instructions and there may be no

00:33:26.946 --> 00:33:28.416 A:middle
timing information for some

00:33:28.416 --> 00:33:28.786 A:middle
lines.

00:33:29.536 --> 00:33:32.366 A:middle
Next to the timing information,

00:33:32.866 --> 00:33:33.766 A:middle
we have the instruction

00:33:33.766 --> 00:33:34.386 A:middle
categories.

00:33:34.526 --> 00:33:37.346 A:middle
Let's take a look.

00:33:37.606 --> 00:33:39.626 A:middle
We can see that we spend time in

00:33:39.626 --> 00:33:41.986 A:middle
ALU doing math operations, we

00:33:41.986 --> 00:33:43.346 A:middle
are reading from memory, from

00:33:43.346 --> 00:33:45.696 A:middle
textures, but what raises my

00:33:45.696 --> 00:33:46.986 A:middle
concern is the time we are

00:33:46.986 --> 00:33:48.536 A:middle
spending in synchronization,

00:33:48.936 --> 00:33:50.656 A:middle
specifically, waiting on memory

00:33:50.656 --> 00:33:50.966 A:middle
here.

00:33:51.586 --> 00:33:53.316 A:middle
That means our GPU could not

00:33:53.316 --> 00:33:55.336 A:middle
read data fast enough, and it

00:33:55.336 --> 00:33:57.216 A:middle
could not hide this latency by

00:33:57.216 --> 00:33:58.866 A:middle
doing ALU work in other threads.

00:34:00.236 --> 00:34:01.806 A:middle
So let's figure out why.

00:34:02.326 --> 00:34:06.696 A:middle
Just following the performance

00:34:06.696 --> 00:34:08.456 A:middle
numbers, we will arrive at this

00:34:08.456 --> 00:34:11.196 A:middle
line, where we spent over 50% of

00:34:11.196 --> 00:34:13.235 A:middle
our entire shader time.

00:34:14.016 --> 00:34:15.176 A:middle
Taking a look into the

00:34:15.176 --> 00:34:17.275 A:middle
instruction categories again, we

00:34:17.275 --> 00:34:18.755 A:middle
can see that we spend a

00:34:18.755 --> 00:34:20.376 A:middle
significant amount in

00:34:20.376 --> 00:34:21.286 A:middle
synchronization.

00:34:21.866 --> 00:34:22.346 A:middle
But why?

00:34:26.176 --> 00:34:28.166 A:middle
We are using a color value here

00:34:28.936 --> 00:34:30.255 A:middle
that we have read from a color

00:34:30.255 --> 00:34:32.766 A:middle
texture here using an offset.

00:34:34.356 --> 00:34:36.045 A:middle
This offset was read from a

00:34:36.045 --> 00:34:37.085 A:middle
noise texture here.

00:34:37.406 --> 00:34:39.466 A:middle
So we have a dependent texture

00:34:39.466 --> 00:34:39.786 A:middle
read.

00:34:39.906 --> 00:34:42.545 A:middle
The GPU could not process until

00:34:42.545 --> 00:34:43.786 A:middle
data from the texture read

00:34:43.876 --> 00:34:44.706 A:middle
became available.

00:34:45.106 --> 00:34:47.396 A:middle
So what can we do about this?

00:34:47.846 --> 00:34:50.596 A:middle
Well, instead of reading from a

00:34:50.596 --> 00:34:52.536 A:middle
noise texture, we could just

00:34:52.536 --> 00:34:54.166 A:middle
simply calculate a noise value

00:34:54.166 --> 00:34:55.025 A:middle
in our GPU.

00:34:55.886 --> 00:34:59.136 A:middle
Let me do that.

00:34:59.266 --> 00:35:01.226 A:middle
Now, let me update my Shader.

00:34:59.266 --> 00:35:01.226 A:middle
Now, let me update my Shader.

00:35:02.126 --> 00:35:03.806 A:middle
The Shader is now sent to the

00:35:03.806 --> 00:35:06.286 A:middle
device as we compiled, and then

00:35:06.286 --> 00:35:09.106 A:middle
the entire frame is rerun and

00:35:09.106 --> 00:35:11.106 A:middle
reprofiled, because changing a

00:35:11.106 --> 00:35:12.896 A:middle
single Shader or pipeline might

00:35:12.896 --> 00:35:14.566 A:middle
influence your entire GPU

00:35:14.566 --> 00:35:15.006 A:middle
timing.

00:35:16.496 --> 00:35:18.096 A:middle
Once that is done, let's take a

00:35:18.836 --> 00:35:18.926 A:middle
look.

00:35:20.336 --> 00:35:22.606 A:middle
We can see that we now spend

00:35:22.796 --> 00:35:24.376 A:middle
just three milliseconds in the

00:35:24.376 --> 00:35:26.166 A:middle
shader from down over to 20.

00:35:26.846 --> 00:35:28.656 A:middle
But let's also take a look into

00:35:28.656 --> 00:35:29.866 A:middle
the instruction categories.

00:35:30.586 --> 00:35:35.496 A:middle
Here we can see that we nearly

00:35:35.496 --> 00:35:37.206 A:middle
eliminated the entire time in

00:35:37.206 --> 00:35:39.116 A:middle
synchronization, and we keep our

00:35:39.116 --> 00:35:41.256 A:middle
GPU busy doing work for us.

00:35:42.526 --> 00:35:44.396 A:middle
So, as a summary, when you

00:35:44.396 --> 00:35:45.506 A:middle
detect the bottleneck in your

00:35:45.506 --> 00:35:47.516 A:middle
shader, the per line timing

00:35:47.516 --> 00:35:49.706 A:middle
information tells you exactly

00:35:49.706 --> 00:35:51.226 A:middle
where your problem is, and the

00:35:51.226 --> 00:35:53.396 A:middle
instruction categories help you

00:35:53.396 --> 00:35:54.516 A:middle
to understand why.

00:35:55.316 --> 00:35:56.146 A:middle
That's it for me.

00:35:56.626 --> 00:35:57.576 A:middle
Back to my colleague, Alp.

00:35:58.516 --> 00:36:04.216 A:middle
[ Applause ]

00:35:58.516 --> 00:36:04.216 A:middle
[ Applause ]

00:36:04.716 --> 00:36:06.006 A:middle
&gt;&gt; Thank you, Max.

00:36:06.006 --> 00:36:08.596 A:middle
And before closing, I would like

00:36:08.596 --> 00:36:10.786 A:middle
to talk about one last thing to

00:36:10.786 --> 00:36:12.546 A:middle
make it easier for you to work

00:36:12.546 --> 00:36:14.466 A:middle
with these new great tools.

00:36:15.696 --> 00:36:18.596 A:middle
Hopefully all of you are already

00:36:18.596 --> 00:36:20.016 A:middle
compiling your Shaders offline,

00:36:20.166 --> 00:36:21.226 A:middle
so that you are not paying the

00:36:21.226 --> 00:36:22.596 A:middle
runtime cost of online

00:36:22.596 --> 00:36:23.126 A:middle
completion.

00:36:23.936 --> 00:36:25.576 A:middle
And if you are compiling your

00:36:25.576 --> 00:36:27.236 A:middle
shaders offline, now we have a

00:36:27.236 --> 00:36:29.956 A:middle
new compiler option to save

00:36:29.956 --> 00:36:31.496 A:middle
Shader sources into the built

00:36:31.496 --> 00:36:33.196 A:middle
Metal [inaudible] so that you

00:36:33.196 --> 00:36:34.156 A:middle
have access to your shader

00:36:34.156 --> 00:36:35.696 A:middle
sources from anywhere using

00:36:35.696 --> 00:36:36.316 A:middle
these tools.

00:36:37.306 --> 00:36:38.916 A:middle
If you are compiling your

00:36:38.916 --> 00:36:41.406 A:middle
shaders using Xcode Project, you

00:36:41.406 --> 00:36:42.826 A:middle
can just go to Build Settings,

00:36:42.826 --> 00:36:43.906 A:middle
and Enable this option.

00:36:44.736 --> 00:36:46.756 A:middle
Or if you are compiling using

00:36:46.756 --> 00:36:48.876 A:middle
command line, you can just pass

00:36:49.106 --> 00:36:50.776 A:middle
dash MO option to the Metal

00:36:50.776 --> 00:36:51.356 A:middle
compilers.

00:36:52.356 --> 00:36:53.996 A:middle
But please remember to only

00:36:53.996 --> 00:36:56.186 A:middle
enable this in debug builds so

00:36:56.186 --> 00:36:58.296 A:middle
that you don't mistakenly ship

00:36:58.296 --> 00:37:00.126 A:middle
your shader sources alongside

00:36:58.296 --> 00:37:00.126 A:middle
your shader sources alongside

00:37:00.126 --> 00:37:00.526 A:middle
your app.

00:37:00.946 --> 00:37:02.256 A:middle
All right.

00:37:03.316 --> 00:37:06.226 A:middle
Let's recap what we talked about

00:37:07.596 --> 00:37:07.726 A:middle
today.

00:37:07.916 --> 00:37:09.056 A:middle
We started with geometric

00:37:09.056 --> 00:37:11.866 A:middle
viewer, providing you one place

00:37:11.866 --> 00:37:13.686 A:middle
to investigate all your vertex

00:37:13.686 --> 00:37:16.266 A:middle
related issues, and debugging

00:37:16.266 --> 00:37:18.376 A:middle
visual problems, please remember

00:37:18.376 --> 00:37:19.646 A:middle
to check with geometric viewer

00:37:19.646 --> 00:37:21.276 A:middle
first, and make sure that your

00:37:21.276 --> 00:37:23.216 A:middle
geometry is right before moving

00:37:23.216 --> 00:37:24.736 A:middle
on to debugging your shaders.

00:37:25.476 --> 00:37:27.906 A:middle
And then we have seen shader

00:37:27.906 --> 00:37:30.096 A:middle
debuggers, powerful tools to

00:37:30.096 --> 00:37:31.986 A:middle
debug all your Metal shaders.

00:37:32.656 --> 00:37:33.816 A:middle
Great for fixing bugs,

00:37:34.786 --> 00:37:36.546 A:middle
understanding your shaders, and

00:37:36.546 --> 00:37:37.876 A:middle
just developing your shaders.

00:37:38.376 --> 00:37:40.956 A:middle
And within [inaudible] profiler,

00:37:41.486 --> 00:37:43.286 A:middle
now you get even more visibility

00:37:43.416 --> 00:37:45.706 A:middle
into what your GPU is doing with

00:37:45.706 --> 00:37:48.746 A:middle
the power of A11 bionic chip.

00:37:49.696 --> 00:37:51.786 A:middle
For more information, please

00:37:51.926 --> 00:37:52.526 A:middle
check the link.

00:37:53.606 --> 00:37:55.486 A:middle
Tomorrow at 10:00 a.m., we have

00:37:55.486 --> 00:37:57.326 A:middle
a great talk on Metal game

00:37:57.326 --> 00:37:59.226 A:middle
performance optimization, where

00:37:59.226 --> 00:38:00.976 A:middle
we will be talking about common

00:37:59.226 --> 00:38:00.976 A:middle
we will be talking about common

00:38:00.976 --> 00:38:02.376 A:middle
performance problems that we

00:38:02.376 --> 00:38:04.506 A:middle
found in games and tools

00:38:04.506 --> 00:38:06.266 A:middle
available for you to detect and

00:38:06.266 --> 00:38:06.636 A:middle
fix them.

00:38:06.946 --> 00:38:07.236 A:middle
Thank you [applause].
