WEBVTT

00:00:07.516 --> 00:00:15.500 A:middle
[ Music ]

00:00:18.046 --> 00:00:19.436 A:middle
&gt;&gt; Hello, and thanks for tuning

00:00:19.436 --> 00:00:19.736 A:middle
in.

00:00:20.276 --> 00:00:22.486 A:middle
My name is Anil Katti and I'm an

00:00:22.486 --> 00:00:24.216 A:middle
AVFoundation Engineer at Apple.

00:00:25.286 --> 00:00:27.316 A:middle
Today, I'm going to present some

00:00:27.316 --> 00:00:29.156 A:middle
best practices and recommended

00:00:29.156 --> 00:00:30.886 A:middle
patterns for adopting

00:00:30.886 --> 00:00:32.226 A:middle
AVContentKeySession API.

00:00:33.756 --> 00:00:36.126 A:middle
AVContentKeySession is an

00:00:36.126 --> 00:00:38.386 A:middle
AVFoundation API that enables

00:00:38.386 --> 00:00:39.946 A:middle
delivery of FairPlay Streaming

00:00:39.946 --> 00:00:41.836 A:middle
keys on Apple platforms.

00:00:43.836 --> 00:00:45.366 A:middle
So, here's what I'll cover in

00:00:45.366 --> 00:00:45.986 A:middle
the session.

00:00:46.476 --> 00:00:47.876 A:middle
I'll start with an overview of

00:00:47.876 --> 00:00:49.456 A:middle
FairPlay streaming and

00:00:49.456 --> 00:00:50.546 A:middle
AVContentKeySession.

00:00:50.906 --> 00:00:52.856 A:middle
I'll then present some ways you

00:00:52.856 --> 00:00:55.216 A:middle
can optimize playback using

00:00:55.216 --> 00:00:56.206 A:middle
AVContentKeySession.

00:00:56.926 --> 00:00:58.436 A:middle
I'll, also, cover some common

00:00:58.436 --> 00:00:59.936 A:middle
pitfalls around FairPlay

00:00:59.936 --> 00:01:01.846 A:middle
Streaming key delivery and

00:00:59.936 --> 00:01:01.846 A:middle
Streaming key delivery and

00:01:01.846 --> 00:01:04.376 A:middle
answer a few frequently asked

00:01:04.376 --> 00:01:06.146 A:middle
questions from developers, along

00:01:06.146 --> 00:01:06.476 A:middle
the way.

00:01:07.776 --> 00:01:09.546 A:middle
So, let's get started.

00:01:10.696 --> 00:01:11.846 A:middle
FairPlay Streaming was

00:01:11.846 --> 00:01:14.306 A:middle
introduced back in 2015 to help

00:01:14.446 --> 00:01:16.416 A:middle
protect HLS streams delivered to

00:01:16.416 --> 00:01:17.196 A:middle
our platforms.

00:01:18.216 --> 00:01:20.026 A:middle
FairPlay Streaming specification

00:01:20.156 --> 00:01:22.586 A:middle
specifies a set of steps an app

00:01:22.586 --> 00:01:24.316 A:middle
needs to follow in order to

00:01:24.316 --> 00:01:25.716 A:middle
securely deliver content

00:01:25.716 --> 00:01:27.706 A:middle
decryption keys so the platform

00:01:27.706 --> 00:01:29.476 A:middle
could decrypt and play back

00:01:29.606 --> 00:01:30.596 A:middle
encrypted media.

00:01:32.616 --> 00:01:33.806 A:middle
While delivering FairPlay

00:01:33.806 --> 00:01:36.506 A:middle
Streaming keys your app works as

00:01:36.506 --> 00:01:38.306 A:middle
a liaison between the platform

00:01:38.656 --> 00:01:39.996 A:middle
and your key server.

00:01:41.206 --> 00:01:43.096 A:middle
When it receives an on-demand

00:01:43.096 --> 00:01:44.836 A:middle
key loading request from

00:01:44.836 --> 00:01:46.886 A:middle
AVFoundation it, in turn,

00:01:46.996 --> 00:01:48.976 A:middle
requests for an Encrypted Key

00:01:48.976 --> 00:01:51.756 A:middle
Request, also known as SPC.

00:01:52.176 --> 00:01:54.576 A:middle
The SPC is then sent to the key

00:01:54.576 --> 00:01:57.996 A:middle
server, which responds back with

00:01:58.116 --> 00:02:00.496 A:middle
an Encrypted Key Response, also

00:01:58.116 --> 00:02:00.496 A:middle
an Encrypted Key Response, also

00:02:00.496 --> 00:02:01.996 A:middle
known as CKC.

00:02:02.486 --> 00:02:05.046 A:middle
Finally, the app provided CKC

00:02:05.046 --> 00:02:07.426 A:middle
back to AVFoundation so it could

00:02:07.826 --> 00:02:09.726 A:middle
start decryption and playback.

00:02:11.286 --> 00:02:13.886 A:middle
Until recently, apps used the

00:02:13.886 --> 00:02:16.136 A:middle
generic AVFoundation API called

00:02:16.136 --> 00:02:18.036 A:middle
AVAssetResourceLoader to deliver

00:02:18.036 --> 00:02:19.166 A:middle
content decryption keys.

00:02:20.676 --> 00:02:23.126 A:middle
But last year we introduced the

00:02:23.126 --> 00:02:25.336 A:middle
new AVFoundation Class called

00:02:25.336 --> 00:02:27.036 A:middle
AVContentKeySession that was

00:02:27.036 --> 00:02:28.436 A:middle
designed specifically around

00:02:28.436 --> 00:02:29.586 A:middle
content decryption keys.

00:02:31.776 --> 00:02:33.836 A:middle
We had two goals in mind for

00:02:33.836 --> 00:02:35.036 A:middle
AVContentKeySession.

00:02:35.826 --> 00:02:38.076 A:middle
One, to simplify key loading

00:02:38.076 --> 00:02:40.356 A:middle
process and provide applications

00:02:40.356 --> 00:02:42.086 A:middle
better control over the life

00:02:42.086 --> 00:02:43.226 A:middle
cycle of content decryption

00:02:43.226 --> 00:02:43.686 A:middle
keys.

00:02:43.936 --> 00:02:47.406 A:middle
And two, serve as a home for new

00:02:47.406 --> 00:02:48.866 A:middle
content protection features.

00:02:51.076 --> 00:02:53.006 A:middle
AVContentKeySession adoption has

00:02:53.006 --> 00:02:54.196 A:middle
been great, so far.

00:02:54.556 --> 00:02:56.266 A:middle
And already, a majority of

00:02:56.266 --> 00:02:57.546 A:middle
FairPlay Streaming keys

00:02:58.016 --> 00:03:00.336 A:middle
delivered on our platforms come

00:02:58.016 --> 00:03:00.336 A:middle
delivered on our platforms come

00:03:00.336 --> 00:03:01.676 A:middle
through AVContentKeySession.

00:03:03.156 --> 00:03:05.286 A:middle
The API has helped developers

00:03:05.286 --> 00:03:06.856 A:middle
optimize key delivery in their

00:03:06.856 --> 00:03:07.726 A:middle
applications.

00:03:08.876 --> 00:03:10.436 A:middle
I will present some ways you

00:03:10.436 --> 00:03:11.876 A:middle
could get more out of the API.

00:03:11.876 --> 00:03:14.206 A:middle
But before that, let's see what

00:03:14.206 --> 00:03:15.256 A:middle
makes AVContentKeySession

00:03:15.256 --> 00:03:15.816 A:middle
different.

00:03:17.456 --> 00:03:19.656 A:middle
With AVAssetResourceLoader

00:03:19.656 --> 00:03:22.266 A:middle
applications could load keys

00:03:22.266 --> 00:03:24.426 A:middle
only when AVFoundation requires

00:03:24.426 --> 00:03:26.766 A:middle
one and sends an on-demand key

00:03:26.766 --> 00:03:27.626 A:middle
loading request.

00:03:28.956 --> 00:03:30.786 A:middle
This, typically, happens when

00:03:30.786 --> 00:03:31.816 A:middle
AVFoundation downloads

00:03:31.816 --> 00:03:33.506 A:middle
playlists, parses them, and then

00:03:33.506 --> 00:03:35.346 A:middle
finds out that the content is

00:03:35.986 --> 00:03:36.736 A:middle
encrypted.

00:03:36.736 --> 00:03:38.206 A:middle
Further, AVFoundation could send

00:03:38.206 --> 00:03:39.886 A:middle
these key loading requests at

00:03:39.886 --> 00:03:41.306 A:middle
any point during playback.

00:03:41.926 --> 00:03:44.106 A:middle
For example, AVFoundation sends

00:03:44.366 --> 00:03:45.996 A:middle
new key loading requests if it's

00:03:46.086 --> 00:03:49.466 A:middle
switched to a radian that uses a

00:03:49.466 --> 00:03:50.616 A:middle
different key in the middle of

00:03:50.616 --> 00:03:51.306 A:middle
the playback.

00:03:52.476 --> 00:03:53.596 A:middle
AVContentKeySession,

00:03:53.596 --> 00:03:55.056 A:middle
essentially, changes that model.

00:03:56.246 --> 00:03:58.086 A:middle
It decouples key loading from

00:03:58.086 --> 00:04:00.026 A:middle
media loading or playback and

00:03:58.086 --> 00:04:00.026 A:middle
media loading or playback and

00:04:00.026 --> 00:04:02.066 A:middle
gives applications more control

00:04:02.146 --> 00:04:03.816 A:middle
over the timing of key loading.

00:04:04.996 --> 00:04:06.756 A:middle
AVContentKeySession allows

00:04:06.756 --> 00:04:08.776 A:middle
applications to initiate key

00:04:08.776 --> 00:04:10.516 A:middle
loading on their own at any

00:04:10.516 --> 00:04:11.246 A:middle
point in time.

00:04:12.246 --> 00:04:13.986 A:middle
This opens up new use cases,

00:04:14.546 --> 00:04:16.136 A:middle
allows applications to optimize

00:04:16.136 --> 00:04:17.966 A:middle
key delivery, and improve

00:04:17.966 --> 00:04:19.276 A:middle
different aspects of playback

00:04:19.276 --> 00:04:19.956 A:middle
experience.

00:04:22.416 --> 00:04:24.646 A:middle
Playback startup is one such

00:04:24.646 --> 00:04:26.066 A:middle
thing AVContentKeySession could

00:04:26.066 --> 00:04:26.906 A:middle
help improve.

00:04:28.706 --> 00:04:30.076 A:middle
Instead of waiting for

00:04:30.076 --> 00:04:32.426 A:middle
AVFoundation to send on demand

00:04:32.426 --> 00:04:33.526 A:middle
key loading requests.

00:04:33.526 --> 00:04:36.096 A:middle
After requesting playback, you

00:04:36.096 --> 00:04:38.816 A:middle
could use AVContentKeySession to

00:04:38.816 --> 00:04:41.256 A:middle
proactively load keys that you

00:04:41.256 --> 00:04:42.736 A:middle
predict might be required in the

00:04:42.736 --> 00:04:44.596 A:middle
near future based on user

00:04:44.596 --> 00:04:45.196 A:middle
actions.

00:04:46.736 --> 00:04:48.236 A:middle
You could do all this, even

00:04:48.236 --> 00:04:49.536 A:middle
before a user picks something to

00:04:49.536 --> 00:04:49.896 A:middle
play.

00:04:51.196 --> 00:04:52.976 A:middle
We call this key preloading or

00:04:52.976 --> 00:04:53.896 A:middle
prewarming.

00:04:55.416 --> 00:04:58.016 A:middle
Further, if you have assets that

00:04:58.016 --> 00:04:59.606 A:middle
use multiple keys across

00:04:59.606 --> 00:05:01.156 A:middle
different radians, you could

00:04:59.606 --> 00:05:01.156 A:middle
different radians, you could

00:05:01.156 --> 00:05:03.256 A:middle
batch up all key requests before

00:05:03.356 --> 00:05:04.756 A:middle
even talking to your key server.

00:05:05.906 --> 00:05:08.036 A:middle
This reduces some load on the

00:05:08.036 --> 00:05:10.126 A:middle
key server, and also, eliminates

00:05:10.126 --> 00:05:11.556 A:middle
round trips for each keys.

00:05:14.636 --> 00:05:16.136 A:middle
You could initiate key loading

00:05:16.136 --> 00:05:17.166 A:middle
process by calling

00:05:17.166 --> 00:05:18.786 A:middle
processContentKeyRequest method

00:05:18.996 --> 00:05:20.796 A:middle
on an AVContentKeySession

00:05:20.796 --> 00:05:21.356 A:middle
instance.

00:05:22.716 --> 00:05:24.126 A:middle
Once you call this method

00:05:24.306 --> 00:05:26.566 A:middle
AVContentKeySession will send

00:05:26.566 --> 00:05:28.056 A:middle
you an AVContentKeyRequest

00:05:28.056 --> 00:05:29.936 A:middle
object by invoking the delegate

00:05:29.936 --> 00:05:30.436 A:middle
callback.

00:05:31.436 --> 00:05:33.676 A:middle
AVContentKeySession allows you

00:05:33.676 --> 00:05:35.166 A:middle
to perform FairPlay Streaming

00:05:35.166 --> 00:05:37.676 A:middle
specific operations like request

00:05:37.676 --> 00:05:39.736 A:middle
encrypted key requests and

00:05:39.736 --> 00:05:41.306 A:middle
respond with encrypted key

00:05:41.306 --> 00:05:41.886 A:middle
response.

00:05:44.566 --> 00:05:46.706 A:middle
Okay. So, now let's say you have

00:05:46.706 --> 00:05:47.826 A:middle
successfully preloaded a

00:05:47.826 --> 00:05:48.626 A:middle
particular key.

00:05:49.366 --> 00:05:51.006 A:middle
Is it possible that the key is

00:05:51.006 --> 00:05:52.316 A:middle
requested again after the

00:05:52.316 --> 00:05:53.256 A:middle
playback starts?

00:05:54.146 --> 00:05:55.436 A:middle
Yes, that's possible.

00:05:56.326 --> 00:05:58.386 A:middle
The app could receive an

00:05:58.386 --> 00:06:00.656 A:middle
on-demand key loading request if

00:05:58.386 --> 00:06:00.656 A:middle
on-demand key loading request if

00:06:00.656 --> 00:06:01.966 A:middle
the playback route changes, for

00:06:01.966 --> 00:06:02.526 A:middle
instance.

00:06:03.736 --> 00:06:05.836 A:middle
Keep in mind that the user could

00:06:05.836 --> 00:06:07.596 A:middle
decide to AirPlay the content to

00:06:07.596 --> 00:06:10.356 A:middle
an Apple TV or plug in a

00:06:10.356 --> 00:06:11.856 A:middle
Lightning to Digital AV adapter.

00:06:12.326 --> 00:06:14.546 A:middle
And in these cases, we need new

00:06:14.836 --> 00:06:16.016 A:middle
keys for decryption.

00:06:17.856 --> 00:06:20.116 A:middle
So, the app should always be

00:06:20.116 --> 00:06:22.776 A:middle
prepared to answer on-demand key

00:06:22.776 --> 00:06:24.656 A:middle
loading requests, even when it

00:06:24.656 --> 00:06:25.606 A:middle
preloads keys.

00:06:28.636 --> 00:06:30.226 A:middle
Here's another frequently asked

00:06:30.226 --> 00:06:31.386 A:middle
question around this topic.

00:06:32.086 --> 00:06:33.776 A:middle
How could the app preload all

00:06:33.776 --> 00:06:36.206 A:middle
keys that might be required

00:06:36.206 --> 00:06:37.026 A:middle
during playback?

00:06:38.336 --> 00:06:40.366 A:middle
Well, in order to preload a key,

00:06:40.686 --> 00:06:42.046 A:middle
you need the corresponding key

00:06:42.046 --> 00:06:42.746 A:middle
identifier.

00:06:43.286 --> 00:06:45.266 A:middle
The one that's specified in

00:06:45.266 --> 00:06:46.766 A:middle
EXT-X-KEY tag in the HLS

00:06:46.766 --> 00:06:47.676 A:middle
playlist.

00:06:49.236 --> 00:06:51.436 A:middle
We recommend that you obtain all

00:06:51.436 --> 00:06:54.286 A:middle
key identifiers and asset

00:06:54.576 --> 00:06:55.806 A:middle
[inaudible] from your server in

00:06:55.806 --> 00:06:56.846 A:middle
an out-of-band fashion.

00:06:58.196 --> 00:07:00.626 A:middle
Another option is to include all

00:06:58.196 --> 00:07:00.626 A:middle
Another option is to include all

00:07:00.626 --> 00:07:02.566 A:middle
key identifiers in the master

00:07:02.566 --> 00:07:05.106 A:middle
playlist as session keys while

00:07:05.106 --> 00:07:06.996 A:middle
authoring the content and use

00:07:06.996 --> 00:07:08.496 A:middle
preloads eligible content keys

00:07:08.496 --> 00:07:09.746 A:middle
property on

00:07:09.746 --> 00:07:10.676 A:middle
AVAssetResourceLoader.

00:07:12.126 --> 00:07:14.206 A:middle
At this point I would like to

00:07:14.206 --> 00:07:15.486 A:middle
point out that we have a

00:07:15.486 --> 00:07:17.446 A:middle
dedicated session about

00:07:17.446 --> 00:07:19.006 A:middle
optimizing HLS performance in

00:07:19.006 --> 00:07:20.506 A:middle
general, not just key delivery.

00:07:21.706 --> 00:07:24.816 A:middle
You should definitely check that

00:07:25.396 --> 00:07:25.606 A:middle
out.

00:07:26.526 --> 00:07:27.936 A:middle
Moving on from preloading,

00:07:28.156 --> 00:07:29.956 A:middle
AVContentKeySession could also

00:07:29.956 --> 00:07:31.916 A:middle
help you scale your live

00:07:31.916 --> 00:07:32.426 A:middle
offering.

00:07:33.176 --> 00:07:34.226 A:middle
Are you wondering how?

00:07:35.226 --> 00:07:36.796 A:middle
Well, you could use

00:07:36.796 --> 00:07:38.536 A:middle
AVContentKeySession to disperse

00:07:38.536 --> 00:07:40.386 A:middle
key loading requests from

00:07:40.386 --> 00:07:41.896 A:middle
clients that are streaming your

00:07:41.896 --> 00:07:42.686 A:middle
live content.

00:07:44.036 --> 00:07:46.346 A:middle
Typically, live streams rotate

00:07:46.806 --> 00:07:49.026 A:middle
keys periodically in order to

00:07:49.026 --> 00:07:50.516 A:middle
add an extra layer of protection

00:07:50.516 --> 00:07:51.456 A:middle
for the content.

00:07:51.886 --> 00:07:55.126 A:middle
It is easy to imagine that these

00:07:55.126 --> 00:07:56.676 A:middle
keys appear at the exact same

00:07:56.676 --> 00:07:58.616 A:middle
time when clients refresh live

00:07:58.616 --> 00:07:59.296 A:middle
playlists.

00:07:59.666 --> 00:08:02.026 A:middle
When that happens, millions of

00:07:59.666 --> 00:08:02.026 A:middle
When that happens, millions of

00:08:02.056 --> 00:08:04.086 A:middle
clients request keys, all at

00:08:04.086 --> 00:08:06.306 A:middle
once, resulting in huge impulse

00:08:06.306 --> 00:08:07.446 A:middle
load on the key server.

00:08:08.816 --> 00:08:11.056 A:middle
When you disperse this key

00:08:11.056 --> 00:08:12.846 A:middle
request event across a small

00:08:12.846 --> 00:08:14.996 A:middle
time window before they appear

00:08:15.156 --> 00:08:16.936 A:middle
and before the EXT-X-KEY tag

00:08:16.936 --> 00:08:18.796 A:middle
appears in the playlist, you're,

00:08:18.796 --> 00:08:20.266 A:middle
basically, load balancing

00:08:20.266 --> 00:08:21.466 A:middle
requests reaching your key

00:08:21.466 --> 00:08:21.866 A:middle
server.

00:08:24.446 --> 00:08:25.966 A:middle
We covered this use case in

00:08:25.966 --> 00:08:28.096 A:middle
detail with sample code during

00:08:28.096 --> 00:08:30.336 A:middle
last year's session on HLS.

00:08:30.816 --> 00:08:32.086 A:middle
So, do check out the sessions

00:08:32.086 --> 00:08:33.256 A:middle
were recording on

00:08:33.256 --> 00:08:36.476 A:middle
developerapple.com or WWDC app.

00:08:38.535 --> 00:08:40.046 A:middle
Apart from allowing you to

00:08:40.046 --> 00:08:42.015 A:middle
manage and deliver content

00:08:42.015 --> 00:08:43.025 A:middle
decryption keys

00:08:43.326 --> 00:08:45.516 A:middle
AVContentKeySession also serves

00:08:45.516 --> 00:08:47.796 A:middle
as a home for new FairPlay

00:08:47.796 --> 00:08:48.966 A:middle
Streaming content protection

00:08:48.966 --> 00:08:49.626 A:middle
features.

00:08:50.676 --> 00:08:52.296 A:middle
We released one such feature

00:08:52.296 --> 00:08:52.896 A:middle
last year.

00:08:53.966 --> 00:08:55.646 A:middle
We call it Offline Rentals.

00:08:56.606 --> 00:08:58.466 A:middle
Offline Rentals is a FairPlay

00:08:58.466 --> 00:09:00.346 A:middle
Streaming feature that allows

00:08:58.466 --> 00:09:00.346 A:middle
Streaming feature that allows

00:09:00.346 --> 00:09:02.646 A:middle
you to specify two expiration

00:09:02.646 --> 00:09:04.566 A:middle
durations on persistent keys;

00:09:05.176 --> 00:09:07.126 A:middle
storage and playback duration.

00:09:08.956 --> 00:09:11.046 A:middle
Storage duration specifies for

00:09:11.046 --> 00:09:13.196 A:middle
how long you wish the key to be

00:09:13.196 --> 00:09:15.336 A:middle
valid while it is sitting in

00:09:15.336 --> 00:09:16.006 A:middle
your storage.

00:09:16.506 --> 00:09:18.446 A:middle
That is, before being used for

00:09:18.446 --> 00:09:19.016 A:middle
playback.

00:09:19.456 --> 00:09:22.686 A:middle
It is, typically, large, like 30

00:09:22.686 --> 00:09:23.076 A:middle
days.

00:09:24.436 --> 00:09:25.966 A:middle
Playback duration, on the other

00:09:25.966 --> 00:09:28.896 A:middle
hand, specifies how long you

00:09:28.896 --> 00:09:31.176 A:middle
with the key to be valid after

00:09:31.176 --> 00:09:32.346 A:middle
it was used for playback.

00:09:32.906 --> 00:09:34.216 A:middle
It is, typically, shorter than

00:09:34.216 --> 00:09:35.116 A:middle
storage duration.

00:09:35.496 --> 00:09:36.786 A:middle
For example, 24 hours.

00:09:38.696 --> 00:09:40.396 A:middle
This feature allows you to

00:09:40.396 --> 00:09:42.006 A:middle
specify such expiration

00:09:42.006 --> 00:09:43.826 A:middle
durations when you create

00:09:44.086 --> 00:09:45.946 A:middle
persistent keys and the platform

00:09:45.946 --> 00:09:47.406 A:middle
ensures that the two expiration

00:09:47.406 --> 00:09:49.556 A:middle
durations are enforced, even

00:09:49.556 --> 00:09:50.706 A:middle
when the device is offline.

00:09:51.936 --> 00:09:53.806 A:middle
So, you might be wondering how

00:09:53.806 --> 00:09:55.396 A:middle
and where can you specify these

00:09:55.396 --> 00:09:56.716 A:middle
two expiration durations.

00:09:58.136 --> 00:10:00.396 A:middle
FairPlay introduced a new TLLV

00:09:58.136 --> 00:10:00.396 A:middle
FairPlay introduced a new TLLV

00:10:00.396 --> 00:10:02.526 A:middle
called Offline Key TLLV for this

00:10:02.526 --> 00:10:03.076 A:middle
purpose.

00:10:04.046 --> 00:10:06.176 A:middle
This has to be signaled in the

00:10:06.176 --> 00:10:07.386 A:middle
CKC that is used while

00:10:07.386 --> 00:10:08.936 A:middle
requesting persistent key.

00:10:11.966 --> 00:10:14.026 A:middle
In terms of code, you generate a

00:10:14.026 --> 00:10:16.216 A:middle
persistent key by calling this

00:10:16.216 --> 00:10:17.286 A:middle
method on

00:10:17.286 --> 00:10:18.776 A:middle
AVPersistableContentKeyRequest

00:10:18.776 --> 00:10:19.196 A:middle
Object.

00:10:20.376 --> 00:10:22.126 A:middle
This returns a persistent key

00:10:22.126 --> 00:10:24.246 A:middle
data blob that you should save

00:10:24.246 --> 00:10:26.666 A:middle
in your app storage and use it

00:10:26.836 --> 00:10:28.256 A:middle
to answer future key loading

00:10:28.256 --> 00:10:29.406 A:middle
requests.

00:10:30.606 --> 00:10:32.166 A:middle
Note that this key is valid

00:10:32.526 --> 00:10:33.776 A:middle
until the end of storage

00:10:33.776 --> 00:10:35.306 A:middle
duration, 30 days from our

00:10:35.306 --> 00:10:35.816 A:middle
example.

00:10:37.426 --> 00:10:39.456 A:middle
So, when you use this key to

00:10:39.456 --> 00:10:41.046 A:middle
start the playback for the first

00:10:41.046 --> 00:10:43.486 A:middle
time you might receive an

00:10:43.516 --> 00:10:46.316 A:middle
updated persistent key through a

00:10:46.316 --> 00:10:47.606 A:middle
new delegate callback.

00:10:49.476 --> 00:10:50.556 A:middle
When the delegate callback is

00:10:50.556 --> 00:10:52.446 A:middle
involved you should discard the

00:10:52.446 --> 00:10:54.696 A:middle
original persistent key and save

00:10:54.696 --> 00:10:56.206 A:middle
this updated persistent key in

00:10:56.206 --> 00:10:57.246 A:middle
your app storage.

00:10:58.926 --> 00:11:01.436 A:middle
You should use this to answer

00:10:58.926 --> 00:11:01.436 A:middle
You should use this to answer

00:11:01.436 --> 00:11:02.946 A:middle
future key loading requests.

00:11:03.386 --> 00:11:05.856 A:middle
Note that this updated

00:11:05.856 --> 00:11:07.966 A:middle
persistent key is valid until

00:11:07.966 --> 00:11:10.146 A:middle
the end of playback duration, 24

00:11:10.146 --> 00:11:11.116 A:middle
hours from our example.

00:11:13.536 --> 00:11:16.276 A:middle
So, with that, let's shift gears

00:11:16.276 --> 00:11:17.926 A:middle
and talk about error handling,

00:11:17.926 --> 00:11:18.246 A:middle
now.

00:11:19.696 --> 00:11:21.236 A:middle
Error handling is one of the

00:11:21.236 --> 00:11:23.386 A:middle
most important topics from the

00:11:23.386 --> 00:11:25.036 A:middle
perspective of improving

00:11:25.036 --> 00:11:26.256 A:middle
playback experience.

00:11:27.976 --> 00:11:29.556 A:middle
Successfully loading keys

00:11:29.596 --> 00:11:31.406 A:middle
involves a number of steps and

00:11:31.406 --> 00:11:32.996 A:middle
something is bound to fail at

00:11:32.996 --> 00:11:34.096 A:middle
some point or another.

00:11:35.116 --> 00:11:36.686 A:middle
So, when something fails the

00:11:36.686 --> 00:11:38.176 A:middle
first thing you should do is

00:11:38.176 --> 00:11:39.706 A:middle
report the failure back to

00:11:39.706 --> 00:11:41.226 A:middle
AVFoundation using

00:11:41.226 --> 00:11:42.596 A:middle
AVContentKeyRequest or

00:11:42.596 --> 00:11:44.216 A:middle
AVAssetResourceLoadingRequest.

00:11:45.546 --> 00:11:47.296 A:middle
Some errors are fatal and some

00:11:47.296 --> 00:11:47.766 A:middle
are not.

00:11:48.086 --> 00:11:49.436 A:middle
You should help platform make

00:11:49.436 --> 00:11:50.146 A:middle
that decision.

00:11:51.356 --> 00:11:52.976 A:middle
Another thing you should do is

00:11:52.976 --> 00:11:54.976 A:middle
monitor error logs and access

00:11:54.976 --> 00:11:56.666 A:middle
logs, investigate the root

00:11:56.666 --> 00:11:57.006 A:middle
cause.

00:11:57.006 --> 00:11:58.746 A:middle
And try to mitigate errors so

00:11:58.746 --> 00:12:00.446 A:middle
your users can get the best

00:11:58.746 --> 00:12:00.446 A:middle
your users can get the best

00:12:00.446 --> 00:12:01.696 A:middle
experience they deserve on our

00:12:01.696 --> 00:12:02.436 A:middle
platforms.

00:12:04.516 --> 00:12:05.576 A:middle
If you haven't already, you

00:12:05.576 --> 00:12:07.376 A:middle
should also check out one of our

00:12:07.376 --> 00:12:08.836 A:middle
recorded sessions from last year

00:12:08.836 --> 00:12:10.306 A:middle
to learn more about error

00:12:10.306 --> 00:12:11.356 A:middle
handling, in general.

00:12:14.876 --> 00:12:16.486 A:middle
Over the years we've seen

00:12:16.486 --> 00:12:17.746 A:middle
developers fall into a few

00:12:17.746 --> 00:12:18.906 A:middle
pitfalls around FairPlay

00:12:18.906 --> 00:12:19.916 A:middle
Streaming key delivery.

00:12:20.916 --> 00:12:23.126 A:middle
We have seen apps that hold on

00:12:23.126 --> 00:12:24.706 A:middle
to key responses for too long.

00:12:24.706 --> 00:12:27.616 A:middle
When AVFoundation sends you a

00:12:27.616 --> 00:12:29.226 A:middle
key loading request you should

00:12:29.226 --> 00:12:31.186 A:middle
provide a response as soon as

00:12:31.186 --> 00:12:31.656 A:middle
possible.

00:12:32.676 --> 00:12:34.456 A:middle
Delays in key delivery could

00:12:34.456 --> 00:12:36.486 A:middle
result in playback timing out.

00:12:37.116 --> 00:12:38.696 A:middle
By the way, you should be able

00:12:38.696 --> 00:12:40.956 A:middle
to identify and debug timeouts

00:12:41.246 --> 00:12:43.206 A:middle
by surveying your playerItems

00:12:43.206 --> 00:12:44.046 A:middle
accessLogs.

00:12:46.416 --> 00:12:48.506 A:middle
Another pitfall is around HDCP

00:12:48.506 --> 00:12:49.256 A:middle
enforcement.

00:12:50.266 --> 00:12:51.876 A:middle
It is important to keep in mind

00:12:52.076 --> 00:12:54.146 A:middle
that HDCP requirement for your

00:12:54.206 --> 00:12:56.576 A:middle
assets is signaled inside

00:12:56.576 --> 00:12:58.756 A:middle
encrypted key response from your

00:12:58.756 --> 00:12:59.416 A:middle
key server.

00:13:01.376 --> 00:13:03.986 A:middle
If you wish to enforce different

00:13:03.986 --> 00:13:05.306 A:middle
HDCP levels for different

00:13:05.306 --> 00:13:06.876 A:middle
radians, you should specify

00:13:06.876 --> 00:13:08.256 A:middle
different key identifiers for

00:13:08.256 --> 00:13:09.106 A:middle
those radians.

00:13:09.426 --> 00:13:11.396 A:middle
And provide appropriate key

00:13:11.396 --> 00:13:12.836 A:middle
responses from your key server.

00:13:15.576 --> 00:13:17.576 A:middle
Lastly, you should be careful

00:13:17.576 --> 00:13:19.086 A:middle
while responding to key loading

00:13:19.086 --> 00:13:20.956 A:middle
requests with persistent keys

00:13:21.766 --> 00:13:24.036 A:middle
because persistent keys are tied

00:13:24.036 --> 00:13:24.966 A:middle
to the device they were

00:13:24.966 --> 00:13:25.836 A:middle
generated on.

00:13:26.516 --> 00:13:28.966 A:middle
For example, you should not use

00:13:29.186 --> 00:13:30.606 A:middle
a persistent key to respond to a

00:13:30.606 --> 00:13:32.546 A:middle
key loading request from an

00:13:32.546 --> 00:13:33.366 A:middle
AirPlay session.

00:13:34.866 --> 00:13:36.426 A:middle
Doing so will result in playback

00:13:36.426 --> 00:13:36.886 A:middle
failure.

00:13:38.756 --> 00:13:41.406 A:middle
We made some API changes in iOS

00:13:41.406 --> 00:13:44.126 A:middle
11.2 to help you avoid and catch

00:13:44.126 --> 00:13:45.956 A:middle
such issues sooner, rather than

00:13:45.956 --> 00:13:46.346 A:middle
later.

00:13:46.896 --> 00:13:48.316 A:middle
Let me walk you through some

00:13:48.316 --> 00:13:49.616 A:middle
code snippets to explain.

00:13:52.196 --> 00:13:53.076 A:middle
If you are using

00:13:53.076 --> 00:13:54.406 A:middle
AVContentKeySession to deliver

00:13:54.406 --> 00:13:56.926 A:middle
keys, now you won't even be able

00:13:56.926 --> 00:13:58.856 A:middle
to RequestPersistableContentKey

00:13:58.856 --> 00:14:00.636 A:middle
request object if the

00:13:58.856 --> 00:14:00.636 A:middle
request object if the

00:14:00.636 --> 00:14:02.586 A:middle
AVContentKeyRequest cannot

00:14:02.586 --> 00:14:04.386 A:middle
accept the persistent key as a

00:14:04.386 --> 00:14:04.886 A:middle
response.

00:14:07.036 --> 00:14:08.126 A:middle
So, when requesting a

00:14:08.126 --> 00:14:10.226 A:middle
PersistableContentKeyRequest

00:14:10.306 --> 00:14:11.836 A:middle
field you should respond with an

00:14:11.836 --> 00:14:13.206 A:middle
online FairPlay Streaming key

00:14:13.206 --> 00:14:14.236 A:middle
from your key server.

00:14:16.886 --> 00:14:17.976 A:middle
If you are using

00:14:17.976 --> 00:14:19.956 A:middle
AVAssetResourceLoader, before

00:14:19.956 --> 00:14:21.326 A:middle
responding with a persistent key

00:14:21.326 --> 00:14:23.266 A:middle
data blob you should check if

00:14:23.266 --> 00:14:24.886 A:middle
persistent key is listed as one

00:14:24.886 --> 00:14:27.226 A:middle
of the accepted content types in

00:14:27.226 --> 00:14:28.276 A:middle
the newly introduced

00:14:28.586 --> 00:14:30.126 A:middle
allowedContentTypes property.

00:14:31.736 --> 00:14:33.226 A:middle
So, I hope this provided some

00:14:33.226 --> 00:14:35.346 A:middle
overview of AVContentKeySession

00:14:35.346 --> 00:14:36.836 A:middle
and clarified a few questions

00:14:36.836 --> 00:14:37.666 A:middle
you might have had.

00:14:38.176 --> 00:14:40.276 A:middle
To summarize, we covered what

00:14:40.276 --> 00:14:41.576 A:middle
makes AVContentKeySession

00:14:41.576 --> 00:14:42.216 A:middle
different.

00:14:42.676 --> 00:14:44.856 A:middle
We saw how this API could be

00:14:44.856 --> 00:14:46.986 A:middle
used to improve playback startup

00:14:47.286 --> 00:14:48.866 A:middle
and scale live streaming.

00:14:50.016 --> 00:14:51.166 A:middle
We spoke a little bit about

00:14:51.166 --> 00:14:52.966 A:middle
Offline Rentals, what it really

00:14:52.966 --> 00:14:54.826 A:middle
is, and how to do it the right

00:14:54.826 --> 00:14:55.126 A:middle
way.

00:14:56.236 --> 00:14:58.336 A:middle
We, finally, highlighted best

00:14:58.336 --> 00:15:00.116 A:middle
practices around handling errors

00:14:58.336 --> 00:15:00.116 A:middle
practices around handling errors

00:15:00.116 --> 00:15:01.226 A:middle
while delivering FairPlay

00:15:01.226 --> 00:15:03.376 A:middle
Streaming keys and common

00:15:03.376 --> 00:15:04.526 A:middle
pitfalls that you should be

00:15:04.526 --> 00:15:06.986 A:middle
aware of.

00:15:08.356 --> 00:15:09.636 A:middle
Thank you, for listening.

00:15:09.986 --> 00:15:10.686 A:middle
And please, visit

00:15:10.686 --> 00:15:12.496 A:middle
developer.apple.com for more

00:15:12.496 --> 00:15:13.836 A:middle
information about this session

00:15:13.896 --> 00:15:15.186 A:middle
and other related sessions.

00:15:15.626 --> 00:15:15.976 A:middle
Thanks.
