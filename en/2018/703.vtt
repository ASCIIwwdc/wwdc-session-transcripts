WEBVTT

00:00:06.516 --> 00:00:14.500 A:middle
[ Music ]

00:00:20.516 --> 00:00:29.046 A:middle
[ Applause ]

00:00:29.546 --> 00:00:31.956 A:middle
&gt;&gt; Hello. Welcome everyone.

00:00:32.436 --> 00:00:33.796 A:middle
My name is Gaurav.

00:00:33.796 --> 00:00:34.936 A:middle
And today we are going to talk

00:00:34.936 --> 00:00:36.436 A:middle
about machine learning.

00:00:37.096 --> 00:00:40.146 A:middle
Last year, we launched Core ML.

00:00:40.146 --> 00:00:41.986 A:middle
And the response from

00:00:41.986 --> 00:00:44.906 A:middle
developers, from you guys have

00:00:44.906 --> 00:00:45.766 A:middle
been tremendous.

00:00:46.566 --> 00:00:48.456 A:middle
We are just amazed by the apps

00:00:48.606 --> 00:00:50.436 A:middle
you have made, the [inaudible]

00:00:50.436 --> 00:00:51.126 A:middle
phenomenal.

00:00:52.196 --> 00:00:53.596 A:middle
So let me first begin by saying

00:00:53.596 --> 00:00:54.086 A:middle
thank you.

00:00:54.676 --> 00:00:56.186 A:middle
Thank you for embracing Core ML.

00:00:56.666 --> 00:00:58.376 A:middle
And we are -- we love seeing so

00:00:58.376 --> 00:01:01.396 A:middle
many of you using it and giving

00:00:58.376 --> 00:01:01.396 A:middle
many of you using it and giving

00:01:01.396 --> 00:01:03.306 A:middle
intelligent features to our

00:01:03.306 --> 00:01:03.596 A:middle
users.

00:01:04.406 --> 00:01:05.556 A:middle
We are in this together.

00:01:05.876 --> 00:01:06.226 A:middle
Thank you.

00:01:07.041 --> 00:01:09.041 A:middle
[ Applause ]

00:01:09.066 --> 00:01:11.556 A:middle
It's an applause for the

00:01:11.556 --> 00:01:12.376 A:middle
devlopers.

00:01:13.236 --> 00:01:16.506 A:middle
Okay. So if you recall, Core ML

00:01:16.506 --> 00:01:18.026 A:middle
gives you an easy way to

00:01:18.026 --> 00:01:19.526 A:middle
integrate an ML model in the

00:01:19.526 --> 00:01:19.856 A:middle
app.

00:01:21.336 --> 00:01:22.586 A:middle
The idea is very simple.

00:01:23.006 --> 00:01:25.066 A:middle
You get an ML model, you drag

00:01:25.066 --> 00:01:27.746 A:middle
and drop in Xcode, and with just

00:01:27.816 --> 00:01:29.806 A:middle
three lines of code, you can run

00:01:30.366 --> 00:01:32.776 A:middle
state-of-the-art ML model with

00:01:32.776 --> 00:01:34.206 A:middle
millions of parameters and

00:01:34.206 --> 00:01:36.376 A:middle
billions of calculations in real

00:01:36.436 --> 00:01:36.716 A:middle
time.

00:01:36.916 --> 00:01:37.736 A:middle
It's just amazing.

00:01:39.076 --> 00:01:40.856 A:middle
And you give -- your users get

00:01:40.916 --> 00:01:42.606 A:middle
real time machine learning as

00:01:42.606 --> 00:01:44.576 A:middle
well as privacy-friendly machine

00:01:44.576 --> 00:01:44.806 A:middle
learning.

00:01:46.066 --> 00:01:47.466 A:middle
All you have to do is to drag

00:01:47.466 --> 00:01:49.766 A:middle
and drop an ML model in Xcode

00:01:50.126 --> 00:01:51.546 A:middle
and Core ML takes care of the

00:01:51.546 --> 00:01:51.756 A:middle
rest.

00:01:51.856 --> 00:01:55.986 A:middle
I think the big question remains

00:01:55.986 --> 00:01:57.776 A:middle
is where do I get these models

00:01:58.626 --> 00:01:58.746 A:middle
from?

00:01:59.936 --> 00:02:01.726 A:middle
So last year, we provided you

00:01:59.936 --> 00:02:01.726 A:middle
So last year, we provided you

00:02:01.726 --> 00:02:02.486 A:middle
two options.

00:02:03.116 --> 00:02:05.086 A:middle
The first one was you could

00:02:05.086 --> 00:02:06.896 A:middle
download some of these models,

00:02:06.896 --> 00:02:09.416 A:middle
popular models from our website

00:02:10.166 --> 00:02:13.146 A:middle
but, more importantly, we also

00:02:13.146 --> 00:02:15.326 A:middle
released Core ML tools.

00:02:15.896 --> 00:02:18.086 A:middle
Core ML tools allow you to tap

00:02:18.316 --> 00:02:19.486 A:middle
the work which is done by

00:02:19.576 --> 00:02:22.496 A:middle
amazing ML community.

00:02:23.776 --> 00:02:25.986 A:middle
So the idea is, again, simple.

00:02:26.446 --> 00:02:27.316 A:middle
You choose your favorite

00:02:27.316 --> 00:02:29.226 A:middle
learning library, train your

00:02:29.226 --> 00:02:31.326 A:middle
model in that training library,

00:02:31.526 --> 00:02:33.426 A:middle
convert it into Core ML from

00:02:33.426 --> 00:02:35.776 A:middle
that and then just integrate it

00:02:35.776 --> 00:02:36.426 A:middle
into your app.

00:02:36.426 --> 00:02:40.256 A:middle
When we released Core ML, we

00:02:40.256 --> 00:02:42.346 A:middle
released with only five or six

00:02:42.406 --> 00:02:43.656 A:middle
training libraries support for

00:02:43.656 --> 00:02:47.726 A:middle
five or six training library but

00:02:47.726 --> 00:02:48.996 A:middle
within a year, we have support

00:02:48.996 --> 00:02:52.026 A:middle
for all the famous training

00:02:52.026 --> 00:02:52.976 A:middle
libraries out there.

00:02:53.966 --> 00:02:55.586 A:middle
We are enhancing our tools to

00:02:55.586 --> 00:02:56.756 A:middle
even allow you more

00:02:56.756 --> 00:02:57.826 A:middle
customization.

00:02:58.266 --> 00:02:59.436 A:middle
And we are going to talk about

00:02:59.436 --> 00:03:01.846 A:middle
more about Core ML tools in

00:02:59.436 --> 00:03:01.846 A:middle
more about Core ML tools in

00:03:01.846 --> 00:03:02.786 A:middle
tomorrow's session.

00:03:03.246 --> 00:03:07.586 A:middle
Another thing we did towards the

00:03:07.586 --> 00:03:08.946 A:middle
end of the year, we released

00:03:08.946 --> 00:03:10.686 A:middle
Turi Create, our open source

00:03:10.686 --> 00:03:11.816 A:middle
machine learning library.

00:03:11.926 --> 00:03:13.706 A:middle
We are going to talk about Turi

00:03:13.706 --> 00:03:15.556 A:middle
Create in tomorrow's session.

00:03:16.086 --> 00:03:18.666 A:middle
But this year, we want to give

00:03:18.666 --> 00:03:19.636 A:middle
you something even more.

00:03:20.046 --> 00:03:22.186 A:middle
We want to continue our journey.

00:03:22.876 --> 00:03:24.226 A:middle
We want to give you something

00:03:24.226 --> 00:03:27.126 A:middle
native, something Swifty,

00:03:28.056 --> 00:03:29.276 A:middle
something that harnesses the

00:03:29.276 --> 00:03:32.216 A:middle
power of our Xcode, something

00:03:32.216 --> 00:03:33.726 A:middle
that puts the focus on you, our

00:03:33.726 --> 00:03:35.916 A:middle
developers, something that just

00:03:35.916 --> 00:03:37.396 A:middle
demystify machine learning for

00:03:37.396 --> 00:03:37.566 A:middle
you.

00:03:38.306 --> 00:03:40.736 A:middle
Hence, we are introducing Create

00:03:40.736 --> 00:03:40.956 A:middle
ML --

00:03:41.516 --> 00:03:47.636 A:middle
[ Applause ]

00:03:48.136 --> 00:03:50.026 A:middle
Our machine learning framework

00:03:50.716 --> 00:03:52.016 A:middle
in Swift.

00:03:52.226 --> 00:03:55.096 A:middle
So Create ML completes the

00:03:55.096 --> 00:03:56.616 A:middle
left-hand side of the equation.

00:03:57.616 --> 00:03:59.836 A:middle
The idea is you make a model in

00:03:59.836 --> 00:04:01.946 A:middle
Create ML and you run it in Core

00:03:59.836 --> 00:04:01.946 A:middle
Create ML and you run it in Core

00:04:01.996 --> 00:04:02.216 A:middle
ML.

00:04:02.796 --> 00:04:04.496 A:middle
You do complete end-to-end

00:04:04.496 --> 00:04:06.956 A:middle
machine learning in Swift, our

00:04:06.956 --> 00:04:07.776 A:middle
favorite language.

00:04:08.346 --> 00:04:09.366 A:middle
So you are not dealing with

00:04:09.366 --> 00:04:10.606 A:middle
language oddities where you are

00:04:10.606 --> 00:04:12.166 A:middle
training in one language and

00:04:12.166 --> 00:04:13.386 A:middle
then running in, for instance,

00:04:13.386 --> 00:04:14.446 A:middle
another language.

00:04:16.296 --> 00:04:19.736 A:middle
Create ML is simple and very

00:04:19.736 --> 00:04:20.565 A:middle
powerful.

00:04:20.565 --> 00:04:21.966 A:middle
It is tailored to your app.

00:04:22.546 --> 00:04:23.996 A:middle
It leverages core Apple

00:04:23.996 --> 00:04:27.146 A:middle
technologies, and you do

00:04:27.146 --> 00:04:29.566 A:middle
everything on your Mac.

00:04:31.156 --> 00:04:32.876 A:middle
So for this year we are going to

00:04:32.876 --> 00:04:34.336 A:middle
focus on three very important

00:04:34.336 --> 00:04:35.036 A:middle
use cases.

00:04:35.416 --> 00:04:38.696 A:middle
The first one is images, second

00:04:38.696 --> 00:04:40.946 A:middle
is text, and the third one is

00:04:41.096 --> 00:04:41.646 A:middle
tabular data.

00:04:42.886 --> 00:04:45.226 A:middle
These are the top use cases that

00:04:45.226 --> 00:04:47.346 A:middle
we believe will benefit you.

00:04:47.606 --> 00:04:50.946 A:middle
So you can do things like custom

00:04:50.946 --> 00:04:52.206 A:middle
image classifier.

00:04:52.676 --> 00:04:54.426 A:middle
Idea is that you make your own

00:04:54.426 --> 00:04:55.696 A:middle
image classifier that can

00:04:55.696 --> 00:04:57.606 A:middle
recognize product from your

00:04:57.636 --> 00:04:58.316 A:middle
product catalog.

00:04:59.536 --> 00:05:00.846 A:middle
You can do things like text

00:04:59.536 --> 00:05:00.846 A:middle
You can do things like text

00:05:00.986 --> 00:05:02.586 A:middle
classifier so you can make your

00:05:02.586 --> 00:05:04.266 A:middle
own sentiment analysis, topic

00:05:04.266 --> 00:05:05.766 A:middle
analysis, domain analysis.

00:05:06.456 --> 00:05:09.616 A:middle
And you can also do classical

00:05:09.656 --> 00:05:12.636 A:middle
regression and classification on

00:05:12.636 --> 00:05:13.246 A:middle
tabular data.

00:05:13.626 --> 00:05:15.316 A:middle
For example, let's just say you

00:05:15.316 --> 00:05:16.726 A:middle
want to predict the wine quality

00:05:16.726 --> 00:05:18.916 A:middle
using its chemical composition.

00:05:19.746 --> 00:05:21.066 A:middle
The possibilities are endless,

00:05:21.066 --> 00:05:23.286 A:middle
and we are going to discuss them

00:05:23.286 --> 00:05:24.966 A:middle
in detail in the next 30

00:05:24.966 --> 00:05:25.216 A:middle
minutes.

00:05:27.976 --> 00:05:30.216 A:middle
However, before we do, let's

00:05:30.216 --> 00:05:31.656 A:middle
take a look at common workflow.

00:05:31.656 --> 00:05:35.246 A:middle
First, let's just say you are

00:05:35.576 --> 00:05:37.526 A:middle
trying to enable an experience

00:05:37.526 --> 00:05:39.726 A:middle
in your app, make sure that

00:05:39.726 --> 00:05:40.826 A:middle
machine learning is the right

00:05:40.876 --> 00:05:41.606 A:middle
thing to do there.

00:05:41.866 --> 00:05:42.986 A:middle
So don't just blindly apply

00:05:42.986 --> 00:05:43.676 A:middle
machine learning.

00:05:44.056 --> 00:05:45.156 A:middle
Make sure machine learning is

00:05:45.156 --> 00:05:46.496 A:middle
the right thing to do there and

00:05:46.496 --> 00:05:47.996 A:middle
define a machine learning

00:05:49.696 --> 00:05:49.926 A:middle
problem.

00:05:50.076 --> 00:05:52.006 A:middle
Second, collect data.

00:05:53.326 --> 00:05:55.446 A:middle
Make sure this data reflects the

00:05:55.446 --> 00:05:57.766 A:middle
real usage of your app.

00:05:58.566 --> 00:05:59.686 A:middle
So, for example, if you're

00:05:59.686 --> 00:06:01.916 A:middle
making a custom image classifier

00:05:59.686 --> 00:06:01.916 A:middle
making a custom image classifier

00:06:02.546 --> 00:06:04.066 A:middle
that is going to be used by

00:06:04.066 --> 00:06:06.486 A:middle
users on their iPhone, so

00:06:06.486 --> 00:06:07.946 A:middle
collect pictures from your

00:06:07.946 --> 00:06:08.236 A:middle
iPhone.

00:06:08.676 --> 00:06:10.246 A:middle
Do not collect -- collect less

00:06:10.366 --> 00:06:12.566 A:middle
screenshots but have more iPhone

00:06:13.106 --> 00:06:13.326 A:middle
pictures.

00:06:14.536 --> 00:06:17.606 A:middle
Then you train your model.

00:06:18.396 --> 00:06:21.276 A:middle
Finally, an important step here

00:06:21.276 --> 00:06:22.756 A:middle
is to evaluate this model.

00:06:23.366 --> 00:06:25.686 A:middle
The model evaluation is done on

00:06:25.686 --> 00:06:27.996 A:middle
a separate handout set.

00:06:29.286 --> 00:06:31.556 A:middle
If you're happy, you write out

00:06:31.606 --> 00:06:32.376 A:middle
the ML model.

00:06:33.726 --> 00:06:35.416 A:middle
But let's just say the results

00:06:35.416 --> 00:06:36.216 A:middle
are not good.

00:06:36.216 --> 00:06:37.246 A:middle
You should either retrain your

00:06:37.246 --> 00:06:39.416 A:middle
model with different parameters

00:06:39.686 --> 00:06:41.676 A:middle
or you collect more data.

00:06:43.456 --> 00:06:45.356 A:middle
Create ML actually helps you

00:06:45.356 --> 00:06:47.736 A:middle
across all four stages of this

00:06:47.736 --> 00:06:48.176 A:middle
workflow.

00:06:48.796 --> 00:06:52.886 A:middle
We have powerful in-built data

00:06:52.886 --> 00:06:53.846 A:middle
[inaudible] utilities, data

00:06:53.946 --> 00:06:55.816 A:middle
source and data table that we

00:06:55.816 --> 00:06:57.196 A:middle
will talk in the remainder of

00:06:57.196 --> 00:06:58.036 A:middle
the presentation.

00:06:58.466 --> 00:07:01.546 A:middle
You can actually train your

00:06:58.466 --> 00:07:01.546 A:middle
You can actually train your

00:07:01.546 --> 00:07:02.776 A:middle
model using only one line of

00:07:02.866 --> 00:07:03.196 A:middle
code.

00:07:04.416 --> 00:07:06.196 A:middle
And the training is done

00:07:06.196 --> 00:07:07.386 A:middle
hardware optimized.

00:07:08.096 --> 00:07:11.796 A:middle
There are built-in evaluation

00:07:11.796 --> 00:07:12.976 A:middle
metrics, so you don't have to

00:07:12.976 --> 00:07:14.236 A:middle
write your own precision and

00:07:14.236 --> 00:07:15.576 A:middle
recall and confusion metrics

00:07:15.576 --> 00:07:16.316 A:middle
calculation.

00:07:16.646 --> 00:07:19.926 A:middle
Use them. And finally, when

00:07:19.926 --> 00:07:22.376 A:middle
you're happy, just write out the

00:07:22.376 --> 00:07:22.716 A:middle
model.

00:07:23.366 --> 00:07:25.936 A:middle
Now we will take a deeper look

00:07:25.936 --> 00:07:28.506 A:middle
in all three use cases: images,

00:07:29.006 --> 00:07:32.646 A:middle
text, and tabular data.

00:07:32.986 --> 00:07:34.466 A:middle
So let's start with images.

00:07:34.466 --> 00:07:36.056 A:middle
And to do that, I will invite

00:07:36.056 --> 00:07:38.036 A:middle
Lizi Ottens, Senior Engineer in

00:07:38.036 --> 00:07:38.766 A:middle
Machine Learning team.

00:07:38.926 --> 00:07:39.266 A:middle
Thank you.

00:07:40.516 --> 00:07:44.996 A:middle
[ Applause ]

00:07:45.496 --> 00:07:49.516 A:middle
&gt;&gt; Thank you, Gaurav.

00:07:50.106 --> 00:07:51.716 A:middle
Since enabling image-based

00:07:51.716 --> 00:07:53.866 A:middle
experiences are some of the most

00:07:53.866 --> 00:07:55.906 A:middle
powerful and interactive ones

00:07:55.906 --> 00:07:56.806 A:middle
that you can add to your apps,

00:07:57.526 --> 00:07:59.346 A:middle
today we'll take a look at how

00:07:59.346 --> 00:08:00.886 A:middle
to train custom image

00:07:59.346 --> 00:08:00.886 A:middle
to train custom image

00:08:00.886 --> 00:08:02.156 A:middle
classification models.

00:08:03.316 --> 00:08:04.686 A:middle
Image classification is the

00:08:04.686 --> 00:08:06.626 A:middle
problem of identifying what

00:08:06.626 --> 00:08:08.546 A:middle
label out of a set of categories

00:08:08.546 --> 00:08:10.336 A:middle
you'd like to apply to an image.

00:08:11.646 --> 00:08:12.486 A:middle
Depending on the type of

00:08:12.486 --> 00:08:14.216 A:middle
training data, you can target

00:08:14.216 --> 00:08:16.676 A:middle
domain specific use cases to

00:08:16.676 --> 00:08:18.666 A:middle
enable in your apps.

00:08:19.346 --> 00:08:21.236 A:middle
The first step is to collect

00:08:21.416 --> 00:08:21.876 A:middle
training data.

00:08:23.826 --> 00:08:25.286 A:middle
In doing so, we'll take a look

00:08:25.536 --> 00:08:27.586 A:middle
at a fruit classifier and see

00:08:27.586 --> 00:08:28.286 A:middle
how you would do so.

00:08:29.596 --> 00:08:31.756 A:middle
First, you'd want to gather many

00:08:31.756 --> 00:08:33.306 A:middle
varied types of images that

00:08:33.306 --> 00:08:34.756 A:middle
reflect the true data that

00:08:34.756 --> 00:08:36.296 A:middle
you'll end up seeing and then

00:08:36.296 --> 00:08:37.796 A:middle
label them.

00:08:37.796 --> 00:08:38.726 A:middle
First, you can do this as a

00:08:38.726 --> 00:08:41.775 A:middle
dictionary with the string label

00:08:42.066 --> 00:08:43.256 A:middle
corresponding to arrays of

00:08:43.256 --> 00:08:43.726 A:middle
images.

00:08:44.376 --> 00:08:46.466 A:middle
Or what we've noticed is many

00:08:46.506 --> 00:08:48.226 A:middle
popular data sets are organized

00:08:48.316 --> 00:08:49.636 A:middle
in hierarchical directory

00:08:49.636 --> 00:08:51.706 A:middle
structures such that the label

00:08:52.356 --> 00:08:53.726 A:middle
is the name of the folder that

00:08:53.726 --> 00:08:55.006 A:middle
contains all images within it.

00:08:56.726 --> 00:08:57.556 A:middle
There are also other data

00:08:57.806 --> 00:09:00.116 A:middle
sources such as single folders

00:08:57.806 --> 00:09:00.116 A:middle
sources such as single folders

00:09:00.286 --> 00:09:01.836 A:middle
that contain labeled filenames.

00:09:02.296 --> 00:09:04.186 A:middle
And in the Create ML API, we've

00:09:04.186 --> 00:09:05.876 A:middle
provided conveniences to extract

00:09:06.156 --> 00:09:06.776 A:middle
these structures.

00:09:09.126 --> 00:09:11.256 A:middle
Now training is the more complex

00:09:11.396 --> 00:09:12.246 A:middle
part of the equation.

00:09:12.686 --> 00:09:14.756 A:middle
So once you have your data, this

00:09:14.806 --> 00:09:15.596 A:middle
is what you will get next.

00:09:17.036 --> 00:09:18.946 A:middle
And what you can do is you can

00:09:19.046 --> 00:09:20.576 A:middle
start training a very complex

00:09:20.646 --> 00:09:22.776 A:middle
model from scratch on your input

00:09:22.776 --> 00:09:23.176 A:middle
images.

00:09:23.936 --> 00:09:25.516 A:middle
And for this you need lots and

00:09:25.516 --> 00:09:26.326 A:middle
lots of label data.

00:09:26.976 --> 00:09:28.546 A:middle
You need big compute and you

00:09:28.546 --> 00:09:29.446 A:middle
need a lot of patience.

00:09:30.396 --> 00:09:31.626 A:middle
But another well-established

00:09:31.696 --> 00:09:33.376 A:middle
technique in the industry is

00:09:33.376 --> 00:09:34.086 A:middle
transfer learning.

00:09:34.966 --> 00:09:36.936 A:middle
And since Apple has lots of

00:09:36.936 --> 00:09:38.796 A:middle
experience in training complex

00:09:38.906 --> 00:09:40.236 A:middle
machine learning models, we

00:09:40.236 --> 00:09:41.386 A:middle
already have one in the

00:09:41.426 --> 00:09:43.036 A:middle
operating system that you can

00:09:43.036 --> 00:09:43.826 A:middle
take advantage of.

00:09:44.336 --> 00:09:46.056 A:middle
So what we do is we apply

00:09:46.056 --> 00:09:47.616 A:middle
transfer learning on top of this

00:09:47.686 --> 00:09:49.346 A:middle
model that already exists in the

00:09:49.346 --> 00:09:50.806 A:middle
OS, and we augment it,

00:09:51.256 --> 00:09:52.836 A:middle
retraining the last few layers

00:09:53.166 --> 00:09:55.046 A:middle
to your specific data so you no

00:09:55.046 --> 00:09:57.126 A:middle
longer need millions of images.

00:09:57.476 --> 00:09:59.736 A:middle
You can train a good classifier

00:09:59.936 --> 00:10:01.116 A:middle
using the amount of data that

00:09:59.936 --> 00:10:01.116 A:middle
using the amount of data that

00:10:01.166 --> 00:10:01.446 A:middle
you have.

00:10:03.576 --> 00:10:05.426 A:middle
This results in faster training

00:10:05.516 --> 00:10:05.656 A:middle
times.

00:10:06.176 --> 00:10:07.306 A:middle
And for developers that we've

00:10:07.346 --> 00:10:08.936 A:middle
worked with, we've seen them go

00:10:09.596 --> 00:10:12.996 A:middle
from hours of training down to

00:10:12.996 --> 00:10:14.576 A:middle
minutes for thousands of images

00:10:15.056 --> 00:10:16.756 A:middle
or for small data sets, even

00:10:16.826 --> 00:10:17.166 A:middle
seconds.

00:10:19.886 --> 00:10:21.126 A:middle
This also results in much

00:10:21.296 --> 00:10:23.026 A:middle
smaller models going from

00:10:23.026 --> 00:10:25.156 A:middle
hundreds of megabytes down to

00:10:25.606 --> 00:10:26.756 A:middle
just a few megabytes for

00:10:26.756 --> 00:10:28.426 A:middle
thousands of images or even

00:10:28.426 --> 00:10:28.896 A:middle
kilobytes.

00:10:32.076 --> 00:10:34.416 A:middle
The goal of Create ML is to

00:10:34.416 --> 00:10:35.966 A:middle
abstract much of this and make

00:10:35.966 --> 00:10:37.646 A:middle
it simple and easy to use.

00:10:38.286 --> 00:10:39.786 A:middle
But to prove it, let's take a

00:10:39.786 --> 00:10:40.396 A:middle
look at a demo.

00:10:47.396 --> 00:10:49.356 A:middle
First, to set up the problem, I

00:10:49.446 --> 00:10:51.066 A:middle
started by running an app that's

00:10:51.126 --> 00:10:52.546 A:middle
using a state-of-the-art image

00:10:52.626 --> 00:10:54.286 A:middle
classification model that's

00:10:54.286 --> 00:10:55.166 A:middle
already in the industry.

00:10:56.326 --> 00:10:57.486 A:middle
This one, though, is quite

00:10:57.526 --> 00:10:57.766 A:middle
large.

00:10:57.766 --> 00:10:59.446 A:middle
It's 100 megabytes in our app.

00:11:00.676 --> 00:11:03.066 A:middle
And if we run it, we have some

00:11:03.116 --> 00:11:07.016 A:middle
fruits but it's not quite what I

00:11:07.016 --> 00:11:07.756 A:middle
was looking for.

00:11:08.626 --> 00:11:10.256 A:middle
I'd really like it if, instead,

00:11:11.356 --> 00:11:12.626 A:middle
we could classify these

00:11:12.686 --> 00:11:13.316 A:middle
particular ones.

00:11:14.376 --> 00:11:15.796 A:middle
So what we can do is we can

00:11:15.886 --> 00:11:19.346 A:middle
switch to a new playground and

00:11:19.346 --> 00:11:21.536 A:middle
import CreateMLUI and walk

00:11:21.536 --> 00:11:24.166 A:middle
through how to do this using the

00:11:24.166 --> 00:11:25.016 A:middle
UI for it.

00:11:26.166 --> 00:11:27.276 A:middle
We can define a builder.

00:11:28.796 --> 00:11:29.576 A:middle
Initialize it.

00:11:29.576 --> 00:11:31.226 A:middle
And to enable drag-and-drop

00:11:31.276 --> 00:11:32.766 A:middle
training, we can show the

00:11:32.766 --> 00:11:34.186 A:middle
builder in the live view.

00:11:38.426 --> 00:11:40.696 A:middle
This brings up a prompt in the

00:11:40.696 --> 00:11:42.476 A:middle
live view to drag in images to

00:11:42.646 --> 00:11:43.306 A:middle
begin training.

00:11:44.886 --> 00:11:47.176 A:middle
And here I set aside some photos

00:11:47.176 --> 00:11:47.866 A:middle
of fruits.

00:11:48.746 --> 00:11:50.236 A:middle
Here's some blueberries and

00:11:50.236 --> 00:11:50.676 A:middle
other types.

00:11:51.746 --> 00:11:53.396 A:middle
And you can drag them in and

00:11:53.476 --> 00:11:54.626 A:middle
automatically an image

00:11:54.626 --> 00:11:56.366 A:middle
classifier model begins training

00:11:56.576 --> 00:11:57.056 A:middle
on the Mac.

00:11:57.916 --> 00:11:59.616 A:middle
All of this is accelerated by

00:11:59.616 --> 00:12:01.806 A:middle
the GPU on however many

00:11:59.616 --> 00:12:01.806 A:middle
the GPU on however many

00:12:01.806 --> 00:12:03.336 A:middle
categories you end up training

00:12:03.336 --> 00:12:03.516 A:middle
on.

00:12:04.736 --> 00:12:06.036 A:middle
It automatically tells you what

00:12:06.036 --> 00:12:07.566 A:middle
the accuracy is on the training

00:12:07.566 --> 00:12:09.526 A:middle
data set, but what's more

00:12:09.526 --> 00:12:11.316 A:middle
helpful is to try this on new

00:12:11.316 --> 00:12:13.076 A:middle
images that the model hasn't

00:12:13.076 --> 00:12:15.006 A:middle
seen before to predict how it

00:12:15.006 --> 00:12:17.076 A:middle
will do on real use cases.

00:12:17.806 --> 00:12:18.846 A:middle
So I can drag in this other

00:12:18.906 --> 00:12:20.696 A:middle
folder containing unseen images.

00:12:21.786 --> 00:12:23.376 A:middle
And now the model is evaluating

00:12:23.376 --> 00:12:24.846 A:middle
all these new types of fruits.

00:12:25.246 --> 00:12:26.896 A:middle
And if you scroll, you can see

00:12:26.896 --> 00:12:28.566 A:middle
what the true label is of each

00:12:28.606 --> 00:12:30.296 A:middle
type as well as with the

00:12:30.346 --> 00:12:31.756 A:middle
predicted one was by the model.

00:12:34.376 --> 00:12:36.406 A:middle
And if you're happy with this

00:12:36.406 --> 00:12:38.216 A:middle
accuracy, what you can do is you

00:12:38.216 --> 00:12:39.976 A:middle
can take the model and drag it

00:12:39.976 --> 00:12:40.406 A:middle
into your app.

00:12:44.786 --> 00:12:45.496 A:middle
I'll add it here.

00:12:45.806 --> 00:12:48.036 A:middle
And if we take a look, this

00:12:48.076 --> 00:12:49.836 A:middle
model is 83 kilobytes.

00:12:50.396 --> 00:12:52.656 A:middle
It's a huge savings down from

00:12:52.766 --> 00:12:53.206 A:middle
hundreds.

00:12:54.516 --> 00:12:59.736 A:middle
[ Applause ]

00:13:00.236 --> 00:13:01.696 A:middle
So we can delete the old model

00:13:01.696 --> 00:13:02.686 A:middle
that we were using before.

00:13:02.686 --> 00:13:04.786 A:middle
And in the view controller, we

00:13:04.786 --> 00:13:06.286 A:middle
can initialize this new one,

00:13:06.986 --> 00:13:07.806 A:middle
ImageClassifier.

00:13:10.536 --> 00:13:11.676 A:middle
We can then re-run the app,

00:13:13.146 --> 00:13:17.866 A:middle
bring up the simulator, and see

00:13:17.866 --> 00:13:18.946 A:middle
how it does on some of those

00:13:19.026 --> 00:13:19.356 A:middle
fruits.

00:13:24.026 --> 00:13:25.436 A:middle
On the raspberry, it can now

00:13:25.436 --> 00:13:27.366 A:middle
correctly predict it since we

00:13:27.366 --> 00:13:28.806 A:middle
trained the model to recognize

00:13:29.276 --> 00:13:29.826 A:middle
raspberries.

00:13:30.686 --> 00:13:31.736 A:middle
We can even see if it can

00:13:31.736 --> 00:13:32.986 A:middle
distinguish from strawberries

00:13:33.396 --> 00:13:34.126 A:middle
and it can now.

00:13:37.956 --> 00:13:39.236 A:middle
But there are other workflows

00:13:39.286 --> 00:13:39.826 A:middle
you can use.

00:13:40.636 --> 00:13:41.516 A:middle
Perhaps you want to do this

00:13:41.606 --> 00:13:43.356 A:middle
programmatically or perhaps you

00:13:43.356 --> 00:13:44.056 A:middle
want to automate it.

00:13:45.116 --> 00:13:46.486 A:middle
We can also walk through how to

00:13:46.486 --> 00:13:48.096 A:middle
use Create ML to do so.

00:13:48.866 --> 00:13:54.246 A:middle
So now we can switch to another

00:13:54.296 --> 00:13:57.316 A:middle
playground and import Create ML.

00:13:57.866 --> 00:13:59.566 A:middle
Since we'll be using URLs, we

00:13:59.566 --> 00:14:01.386 A:middle
also can import foundation.

00:13:59.566 --> 00:14:01.386 A:middle
also can import foundation.

00:14:03.686 --> 00:14:05.406 A:middle
And since, on our desktop, we

00:14:05.406 --> 00:14:06.826 A:middle
still have these folders of

00:14:06.826 --> 00:14:09.776 A:middle
fruits, we can say where they

00:14:09.776 --> 00:14:14.586 A:middle
are and also say where the

00:14:14.586 --> 00:14:15.466 A:middle
testing fruits are.

00:14:15.466 --> 00:14:17.526 A:middle
And then the next step is to

00:14:17.526 --> 00:14:18.636 A:middle
actually train the model.

00:14:19.426 --> 00:14:22.376 A:middle
So we can define a model, and we

00:14:22.376 --> 00:14:23.716 A:middle
can initialize an image

00:14:23.716 --> 00:14:24.386 A:middle
classifier.

00:14:25.206 --> 00:14:26.726 A:middle
And now if we take a look at

00:14:26.726 --> 00:14:28.166 A:middle
what auto complete shows to us,

00:14:28.296 --> 00:14:29.826 A:middle
we can see we can provide

00:14:29.826 --> 00:14:31.006 A:middle
training data in the form of a

00:14:31.006 --> 00:14:33.016 A:middle
dictionary of labels to arrays

00:14:33.086 --> 00:14:36.056 A:middle
of images or we can use a data

00:14:36.166 --> 00:14:38.616 A:middle
source or even specify model

00:14:38.666 --> 00:14:39.846 A:middle
training parameters if we want

00:14:39.906 --> 00:14:40.046 A:middle
to.

00:14:41.456 --> 00:14:42.466 A:middle
Let's use a data source.

00:14:42.466 --> 00:14:44.226 A:middle
And we'll use label directories

00:14:44.296 --> 00:14:45.366 A:middle
since that's how our data is

00:14:45.366 --> 00:14:47.576 A:middle
organized and specify the

00:14:47.576 --> 00:14:48.436 A:middle
training directory.

00:14:50.526 --> 00:14:51.556 A:middle
And since we're running in the

00:14:51.556 --> 00:14:52.946 A:middle
new [inaudible] mode of Xcode

00:14:52.976 --> 00:14:54.226 A:middle
playground, I just need to hit

00:14:54.226 --> 00:14:56.726 A:middle
shift enter and the model begins

00:14:56.726 --> 00:14:57.796 A:middle
training right away.

00:14:59.216 --> 00:15:00.576 A:middle
You can even pull up the console

00:14:59.216 --> 00:15:00.576 A:middle
You can even pull up the console

00:15:01.556 --> 00:15:04.006 A:middle
and see output of one, its

00:15:04.006 --> 00:15:06.036 A:middle
extracting features and how many

00:15:06.036 --> 00:15:07.256 A:middle
iterations it's running through.

00:15:08.566 --> 00:15:10.126 A:middle
Afterwards, you can also open

00:15:10.126 --> 00:15:12.066 A:middle
quick looks and see the name of

00:15:12.066 --> 00:15:13.866 A:middle
the model and how many instances

00:15:13.866 --> 00:15:14.546 A:middle
it's trained on.

00:15:16.216 --> 00:15:18.076 A:middle
Now we might want to evaluate on

00:15:18.076 --> 00:15:19.286 A:middle
the testing data that we've set

00:15:19.376 --> 00:15:19.686 A:middle
aside.

00:15:20.666 --> 00:15:22.926 A:middle
So what we can do is we can call

00:15:22.926 --> 00:15:25.116 A:middle
evaluation on another data

00:15:25.306 --> 00:15:26.626 A:middle
source since that folder is

00:15:26.626 --> 00:15:27.636 A:middle
organized the same way,

00:15:28.036 --> 00:15:29.596 A:middle
specifying the URL of the

00:15:29.646 --> 00:15:30.206 A:middle
testing data.

00:15:30.986 --> 00:15:33.246 A:middle
You can hit shift enter and now

00:15:33.246 --> 00:15:35.196 A:middle
the model is evaluating testing

00:15:35.196 --> 00:15:35.456 A:middle
images.

00:15:36.196 --> 00:15:37.816 A:middle
Once it's complete, we can also

00:15:37.816 --> 00:15:39.326 A:middle
look at the quick look and see

00:15:39.326 --> 00:15:40.956 A:middle
how many examples it evaluated

00:15:40.956 --> 00:15:42.636 A:middle
on as well as how many classes

00:15:42.726 --> 00:15:44.166 A:middle
were in that folder altogether

00:15:44.596 --> 00:15:45.366 A:middle
and the accuracy.

00:15:46.886 --> 00:15:48.326 A:middle
If we're happy with that, we can

00:15:48.376 --> 00:15:48.816 A:middle
write it out.

00:15:58.606 --> 00:15:59.716 A:middle
And say that I want to write it

00:15:59.826 --> 00:16:00.996 A:middle
to the desktop with the name

00:15:59.826 --> 00:16:00.996 A:middle
to the desktop with the name

00:16:01.206 --> 00:16:02.706 A:middle
fruit classifier ML model.

00:16:04.846 --> 00:16:06.296 A:middle
Once I do, you can see this new

00:16:06.296 --> 00:16:07.676 A:middle
model appears on the desktop.

00:16:08.586 --> 00:16:09.876 A:middle
We can double-click it and take

00:16:09.876 --> 00:16:12.046 A:middle
a look and see it's exactly the

00:16:12.126 --> 00:16:12.466 A:middle
same.

00:16:12.696 --> 00:16:14.256 A:middle
This is also 83 kilobytes.

00:16:17.036 --> 00:16:18.316 A:middle
Furthermore, we can integrate it

00:16:18.376 --> 00:16:19.666 A:middle
back into our app the same way.

00:16:21.206 --> 00:16:21.596 A:middle
Let's recap.

00:16:22.516 --> 00:16:31.506 A:middle
[ Applause ]

00:16:32.006 --> 00:16:33.536 A:middle
We saw two ways of training

00:16:33.536 --> 00:16:35.126 A:middle
image classifier models in

00:16:35.126 --> 00:16:35.516 A:middle
Create ML.

00:16:36.276 --> 00:16:38.406 A:middle
One was with the UI which makes

00:16:38.406 --> 00:16:40.446 A:middle
it super simple to drag-and-drop

00:16:40.656 --> 00:16:41.626 A:middle
your training data and

00:16:41.626 --> 00:16:43.956 A:middle
evaluation data to produce an ML

00:16:43.956 --> 00:16:44.276 A:middle
model.

00:16:45.396 --> 00:16:47.126 A:middle
The other way was with the

00:16:47.126 --> 00:16:47.866 A:middle
Create ML API.

00:16:48.676 --> 00:16:49.726 A:middle
If we walk through some of this

00:16:49.726 --> 00:16:51.406 A:middle
code, we can see the first thing

00:16:51.406 --> 00:16:53.396 A:middle
we had to do was import Create

00:16:53.396 --> 00:16:53.486 A:middle
ML.

00:16:54.456 --> 00:16:56.066 A:middle
The next was to specify where

00:16:56.066 --> 00:16:57.486 A:middle
our training and testing data

00:16:57.486 --> 00:16:59.666 A:middle
was and then actually begin

00:16:59.666 --> 00:17:01.396 A:middle
training the model by specifying

00:16:59.666 --> 00:17:01.396 A:middle
training the model by specifying

00:17:01.496 --> 00:17:02.726 A:middle
how our training data was laid

00:17:02.726 --> 00:17:02.926 A:middle
out.

00:17:04.205 --> 00:17:05.346 A:middle
We can then evaluate on the

00:17:05.415 --> 00:17:07.996 A:middle
testing data and finally save ML

00:17:07.996 --> 00:17:08.306 A:middle
model.

00:17:11.576 --> 00:17:12.596 A:middle
If you want to automate this,

00:17:13.006 --> 00:17:14.215 A:middle
you can also turn these into

00:17:14.326 --> 00:17:16.106 A:middle
scripts, which is a very popular

00:17:16.106 --> 00:17:17.836 A:middle
way of saving what you've done

00:17:17.836 --> 00:17:19.215 A:middle
and re-running it whenever.

00:17:21.746 --> 00:17:22.896 A:middle
You can then change permissions

00:17:22.896 --> 00:17:24.766 A:middle
on the file and run them like

00:17:24.866 --> 00:17:25.086 A:middle
so.

00:17:26.056 --> 00:17:27.806 A:middle
Or for other workflows, you can

00:17:27.806 --> 00:17:29.996 A:middle
always use Swift command line

00:17:29.996 --> 00:17:30.126 A:middle
[inaudible].

00:17:30.126 --> 00:17:33.246 A:middle
So we've seen today how to train

00:17:33.246 --> 00:17:34.496 A:middle
image classification models

00:17:35.016 --> 00:17:36.176 A:middle
using a few different workflows.

00:17:36.176 --> 00:17:38.496 A:middle
But next, I'd like to pass it

00:17:38.496 --> 00:17:40.576 A:middle
off to Tao to talk about natural

00:17:40.576 --> 00:17:40.976 A:middle
language.

00:17:41.476 --> 00:17:41.766 A:middle
Thank you.

00:17:42.516 --> 00:17:49.876 A:middle
[ Applause ]

00:17:50.376 --> 00:17:53.546 A:middle
&gt;&gt; Thank you, Lizi.

00:17:54.636 --> 00:17:55.336 A:middle
Hello everyone.

00:17:55.526 --> 00:17:56.466 A:middle
My name is Tao.

00:17:56.466 --> 00:17:58.416 A:middle
I'm an engineer here at Apple

00:17:58.686 --> 00:18:00.086 A:middle
working on the Core ML team.

00:17:58.686 --> 00:18:00.086 A:middle
working on the Core ML team.

00:18:00.996 --> 00:18:03.166 A:middle
You just saw how easy and

00:18:03.166 --> 00:18:04.676 A:middle
intuitive to train an image

00:18:04.676 --> 00:18:07.036 A:middle
classifier with just a few lines

00:18:07.036 --> 00:18:07.616 A:middle
of code.

00:18:08.246 --> 00:18:10.146 A:middle
Now I'm going to show you the

00:18:10.146 --> 00:18:11.876 A:middle
same can be done for natural

00:18:11.876 --> 00:18:12.406 A:middle
language.

00:18:12.956 --> 00:18:15.926 A:middle
In this year's release, we're

00:18:15.926 --> 00:18:17.476 A:middle
going to support two natural

00:18:17.476 --> 00:18:19.826 A:middle
language tasks: text

00:18:19.826 --> 00:18:21.866 A:middle
classification and word tagging.

00:18:23.096 --> 00:18:25.046 A:middle
Today, I'm going to focus on

00:18:25.046 --> 00:18:26.516 A:middle
text classification.

00:18:26.836 --> 00:18:28.216 A:middle
For details on word tagging,

00:18:28.796 --> 00:18:30.136 A:middle
please join the natural language

00:18:30.136 --> 00:18:31.796 A:middle
session that happens tomorrow.

00:18:32.656 --> 00:18:34.446 A:middle
Text classification can be used

00:18:34.696 --> 00:18:35.846 A:middle
in a few machine learning

00:18:35.926 --> 00:18:36.606 A:middle
applications.

00:18:37.816 --> 00:18:39.886 A:middle
For example, sentiment analysis.

00:18:40.756 --> 00:18:42.526 A:middle
The energy of developers is

00:18:42.526 --> 00:18:43.516 A:middle
amazing.

00:18:43.826 --> 00:18:44.906 A:middle
That's a positive note.

00:18:45.336 --> 00:18:46.776 A:middle
You want your app to know it.

00:18:47.516 --> 00:18:50.166 A:middle
[ Applause ]

00:18:50.666 --> 00:18:51.656 A:middle
Spam analysis.

00:18:52.336 --> 00:18:54.006 A:middle
If you saw this message in your

00:18:54.006 --> 00:18:55.846 A:middle
mailbox, you know it's very

00:18:55.846 --> 00:18:57.616 A:middle
likely it's spam.

00:18:57.766 --> 00:19:00.056 A:middle
So you want your app to know

00:18:57.766 --> 00:19:00.056 A:middle
So you want your app to know

00:19:00.526 --> 00:19:02.086 A:middle
that as well.

00:19:02.086 --> 00:19:03.076 A:middle
Topic analysis.

00:19:03.736 --> 00:19:05.696 A:middle
The Warriors just had an amazing

00:19:05.696 --> 00:19:06.636 A:middle
comeback win.

00:19:07.166 --> 00:19:08.686 A:middle
That's a sport post.

00:19:08.906 --> 00:19:10.406 A:middle
You want your app to be able to

00:19:10.406 --> 00:19:11.186 A:middle
classify that.

00:19:12.406 --> 00:19:14.876 A:middle
So to train such a classifier,

00:19:14.876 --> 00:19:16.226 A:middle
the first thing you do is to

00:19:16.226 --> 00:19:17.436 A:middle
collect some training data.

00:19:18.326 --> 00:19:21.076 A:middle
With Create ML, we support a few

00:19:21.076 --> 00:19:22.256 A:middle
different ways for you to

00:19:22.256 --> 00:19:23.686 A:middle
organize your training data.

00:19:24.326 --> 00:19:26.776 A:middle
For example, label directories.

00:19:27.486 --> 00:19:28.796 A:middle
Here you have two folders.

00:19:29.116 --> 00:19:30.856 A:middle
One named positive, the other

00:19:30.856 --> 00:19:32.196 A:middle
one named negative.

00:19:32.836 --> 00:19:34.526 A:middle
Within each folder, you have a

00:19:34.526 --> 00:19:37.026 A:middle
number of articles with just raw

00:19:37.026 --> 00:19:40.046 A:middle
text whose truth label is simply

00:19:40.046 --> 00:19:41.616 A:middle
the name of the folder.

00:19:43.096 --> 00:19:45.056 A:middle
Alternatively, you can prepare

00:19:45.056 --> 00:19:46.456 A:middle
your training data using simple

00:19:46.456 --> 00:19:48.866 A:middle
CSV where you prepare your raw

00:19:48.866 --> 00:19:50.766 A:middle
text and the truth label

00:19:50.966 --> 00:19:51.916 A:middle
separated by comma.

00:19:52.926 --> 00:19:54.926 A:middle
We also support JSON formatting

00:19:54.926 --> 00:19:56.856 A:middle
the training data and know that

00:19:57.236 --> 00:19:58.426 A:middle
we just talk about the training

00:19:58.426 --> 00:20:00.326 A:middle
data organization and you can

00:19:58.426 --> 00:20:00.326 A:middle
data organization and you can

00:20:00.366 --> 00:20:02.056 A:middle
actually organize your test data

00:20:02.056 --> 00:20:03.326 A:middle
in the exact same way.

00:20:06.376 --> 00:20:08.296 A:middle
Now with your training data and

00:20:08.296 --> 00:20:10.196 A:middle
test data ready, what other

00:20:10.196 --> 00:20:12.246 A:middle
steps involve to train such a

00:20:12.246 --> 00:20:13.196 A:middle
text classifier?

00:20:16.046 --> 00:20:17.806 A:middle
A typical workflow would look

00:20:17.806 --> 00:20:18.576 A:middle
something like this.

00:20:20.046 --> 00:20:21.396 A:middle
You start with your raw text.

00:20:22.286 --> 00:20:24.206 A:middle
You do a language identification

00:20:24.206 --> 00:20:25.536 A:middle
to figure out which language it

00:20:25.536 --> 00:20:25.906 A:middle
is in.

00:20:27.286 --> 00:20:28.916 A:middle
You convert that into tokens.

00:20:30.306 --> 00:20:31.756 A:middle
And then you convert that into

00:20:31.756 --> 00:20:34.946 A:middle
some feature values and then you

00:20:34.946 --> 00:20:36.216 A:middle
can apply a machine learning

00:20:36.216 --> 00:20:38.536 A:middle
model that gives you some

00:20:38.536 --> 00:20:40.116 A:middle
predictive value that you have

00:20:40.116 --> 00:20:42.066 A:middle
to map to some desired label.

00:20:42.066 --> 00:20:44.126 A:middle
And then you can compare that

00:20:44.126 --> 00:20:46.256 A:middle
label to your truth label and

00:20:46.346 --> 00:20:49.206 A:middle
start iterating on it.

00:20:49.466 --> 00:20:51.926 A:middle
With Create ML, though, we took

00:20:51.926 --> 00:20:54.666 A:middle
away all these complexities so

00:20:54.666 --> 00:20:56.696 A:middle
that all you need to do is to

00:20:56.696 --> 00:20:58.896 A:middle
prepare raw text with their

00:20:58.896 --> 00:21:01.226 A:middle
truth label and start training

00:20:58.896 --> 00:21:01.226 A:middle
truth label and start training

00:21:01.686 --> 00:21:02.566 A:middle
immediately.

00:21:03.516 --> 00:21:09.356 A:middle
[ Applause ]

00:21:09.856 --> 00:21:11.686 A:middle
Now let me give you a concrete

00:21:11.686 --> 00:21:13.256 A:middle
example like how you can train

00:21:13.256 --> 00:21:15.406 A:middle
such a classifier and use it.

00:21:16.186 --> 00:21:18.396 A:middle
For example, we have this simple

00:21:18.536 --> 00:21:21.106 A:middle
app called Stay Positive whose

00:21:21.196 --> 00:21:23.566 A:middle
purpose is to encourage positive

00:21:23.626 --> 00:21:24.016 A:middle
post.

00:21:24.656 --> 00:21:27.246 A:middle
If a user entered I hate

00:21:27.246 --> 00:21:29.326 A:middle
traffic, the background turns

00:21:29.326 --> 00:21:31.506 A:middle
red and it will disable the post

00:21:31.506 --> 00:21:31.856 A:middle
button.

00:21:32.706 --> 00:21:37.206 A:middle
I love driving my car at five

00:21:37.206 --> 00:21:40.006 A:middle
mile per hour just chilling in

00:21:40.736 --> 00:21:41.416 A:middle
traffic.

00:21:41.626 --> 00:21:42.736 A:middle
That's a positive post.

00:21:42.946 --> 00:21:44.646 A:middle
We encourage you to post it.

00:21:46.116 --> 00:21:47.876 A:middle
Just imagine what our Internet

00:21:47.876 --> 00:21:49.486 A:middle
would look like with this app

00:21:49.836 --> 00:21:51.406 A:middle
running on everybody's phone?

00:21:52.516 --> 00:21:56.396 A:middle
[ Applause ]

00:21:56.896 --> 00:21:58.336 A:middle
Now, in order to do that, let me

00:21:58.336 --> 00:21:59.296 A:middle
give you a live demo.

00:22:07.016 --> 00:22:09.966 A:middle
So to train such a classifier,

00:22:09.966 --> 00:22:11.506 A:middle
the first thing I do is collect

00:22:11.506 --> 00:22:12.206 A:middle
some training data.

00:22:12.916 --> 00:22:17.736 A:middle
On my desktop, I have a train

00:22:17.736 --> 00:22:19.436 A:middle
folder and also a test folder.

00:22:20.126 --> 00:22:21.616 A:middle
In train folder, we have two

00:22:21.616 --> 00:22:22.156 A:middle
folders.

00:22:22.316 --> 00:22:23.816 A:middle
One is named positive, the other

00:22:23.816 --> 00:22:26.246 A:middle
one negative, and there are a

00:22:26.246 --> 00:22:28.106 A:middle
number of articles in each

00:22:28.106 --> 00:22:28.446 A:middle
folder.

00:22:29.526 --> 00:22:31.486 A:middle
And test folder is organized in

00:22:31.486 --> 00:22:32.686 A:middle
a very similar way.

00:22:33.436 --> 00:22:38.116 A:middle
So the first thing I do is to

00:22:38.116 --> 00:22:41.196 A:middle
import Create ML.

00:22:41.446 --> 00:22:43.846 A:middle
Now I need to tell the

00:22:43.846 --> 00:22:45.206 A:middle
[inaudible] where to find my

00:22:45.206 --> 00:22:46.666 A:middle
training data.

00:22:47.436 --> 00:22:50.056 A:middle
For that, I'm simply using a URL

00:22:50.056 --> 00:22:53.056 A:middle
capability and then I can start

00:22:53.056 --> 00:22:54.656 A:middle
training my model using the

00:22:54.656 --> 00:22:56.576 A:middle
label directories that Lizi just

00:22:56.576 --> 00:22:57.206 A:middle
showed you.

00:22:57.556 --> 00:23:00.756 A:middle
Look. The training has started.

00:22:57.556 --> 00:23:00.756 A:middle
Look. The training has started.

00:23:02.406 --> 00:23:03.656 A:middle
As you can see on the bottom

00:23:03.656 --> 00:23:05.166 A:middle
there, there is some progress

00:23:05.166 --> 00:23:06.726 A:middle
report for you to check.

00:23:06.926 --> 00:23:08.746 A:middle
Looks like training has

00:23:10.056 --> 00:23:10.276 A:middle
finished.

00:23:10.406 --> 00:23:12.566 A:middle
Now you can check some basic

00:23:12.566 --> 00:23:13.696 A:middle
performance numbers on this

00:23:13.696 --> 00:23:14.256 A:middle
model.

00:23:14.496 --> 00:23:15.096 A:middle
For example,

00:23:15.966 --> 00:23:19.226 A:middle
model.trainingMetrics that shows

00:23:19.226 --> 00:23:20.516 A:middle
you this model has been trained

00:23:20.516 --> 00:23:23.226 A:middle
on over 2000 examples and

00:23:23.226 --> 00:23:24.786 A:middle
accuracy is 100%.

00:23:25.286 --> 00:23:29.796 A:middle
But how does it perform on some

00:23:29.846 --> 00:23:30.556 A:middle
unseen data?

00:23:31.446 --> 00:23:33.336 A:middle
So I'm going to do the same to

00:23:33.366 --> 00:23:37.126 A:middle
define test data and then

00:23:38.376 --> 00:23:42.086 A:middle
evaluate that model on the test

00:23:43.316 --> 00:23:43.456 A:middle
data.

00:23:43.626 --> 00:23:46.336 A:middle
As you can see, we have 77 test

00:23:46.516 --> 00:23:49.036 A:middle
examples, and we are achieving

00:23:49.446 --> 00:23:52.966 A:middle
over 94% accuracy, which is very

00:23:52.966 --> 00:23:53.616 A:middle
good.

00:23:54.556 --> 00:23:56.076 A:middle
I'm sure you want to iterate on

00:23:56.076 --> 00:23:57.296 A:middle
that if you want to see like

00:23:57.296 --> 00:23:59.906 A:middle
even a higher number, but this

00:23:59.906 --> 00:24:01.936 A:middle
number is pretty good enough for

00:23:59.906 --> 00:24:01.936 A:middle
number is pretty good enough for

00:24:01.936 --> 00:24:04.276 A:middle
my app so let me just test it

00:24:04.276 --> 00:24:04.456 A:middle
out.

00:24:05.306 --> 00:24:07.686 A:middle
So to save out the model, what I

00:24:07.686 --> 00:24:10.446 A:middle
need to do is define a URL where

00:24:10.446 --> 00:24:14.496 A:middle
it's saving to and then write

00:24:14.496 --> 00:24:16.176 A:middle
out a model to my desktop.

00:24:16.736 --> 00:24:19.086 A:middle
Looks, that model has been

00:24:19.246 --> 00:24:20.306 A:middle
saved.

00:24:22.236 --> 00:24:23.906 A:middle
So now I need to switch back to

00:24:23.906 --> 00:24:24.386 A:middle
my app.

00:24:25.326 --> 00:24:27.266 A:middle
Just drag and drop it.

00:24:27.836 --> 00:24:29.396 A:middle
There you go.

00:24:33.636 --> 00:24:36.756 A:middle
Now I can start use it.

00:24:37.276 --> 00:24:39.686 A:middle
I will do let model equal to

00:24:39.686 --> 00:24:42.176 A:middle
textClassifier which should auto

00:24:42.176 --> 00:24:42.566 A:middle
complete.

00:24:43.426 --> 00:24:45.236 A:middle
And then I'm going to insert

00:24:45.236 --> 00:24:47.236 A:middle
some basic inference code.

00:24:47.776 --> 00:24:50.716 A:middle
In this inference code, as you

00:24:50.716 --> 00:24:52.576 A:middle
see, the first line I do is

00:24:52.696 --> 00:24:54.826 A:middle
using model.prediction to get

00:24:54.826 --> 00:24:55.386 A:middle
prediction.

00:24:55.386 --> 00:24:56.806 A:middle
And then in order to hook up

00:24:56.806 --> 00:24:58.586 A:middle
with this simple app UI, I just

00:24:58.586 --> 00:25:00.026 A:middle
convert that into some double

00:24:58.586 --> 00:25:00.026 A:middle
convert that into some double

00:25:00.026 --> 00:25:00.456 A:middle
value.

00:25:01.146 --> 00:25:03.566 A:middle
Let's give it a try.

00:25:16.456 --> 00:25:18.026 A:middle
Yeah. Let's try some example we

00:25:18.026 --> 00:25:18.766 A:middle
have showed you.

00:25:19.676 --> 00:25:23.566 A:middle
I hate traffic.

00:25:24.666 --> 00:25:27.196 A:middle
Negative. I love driving my car

00:25:27.936 --> 00:25:30.856 A:middle
at five mile per hour just

00:25:30.856 --> 00:25:32.666 A:middle
chilling in traffic.

00:25:33.416 --> 00:25:35.866 A:middle
Positive. Let's try something

00:25:35.866 --> 00:25:37.686 A:middle
different that'll be fun.

00:25:38.706 --> 00:25:41.486 A:middle
Machine learning is hard.

00:25:41.686 --> 00:25:45.436 A:middle
Create ML makes it so easy.

00:25:46.536 --> 00:25:47.076 A:middle
Positive.

00:25:48.516 --> 00:25:53.166 A:middle
[ Applause ]

00:25:53.666 --> 00:25:55.046 A:middle
So that's how you train your

00:25:55.046 --> 00:25:57.776 A:middle
customized text classifier and

00:25:57.776 --> 00:25:59.926 A:middle
drag it into your app to use it.

00:26:04.796 --> 00:26:06.406 A:middle
Here's a recap.

00:26:07.836 --> 00:26:09.726 A:middle
So to train such a classifier,

00:26:09.866 --> 00:26:11.266 A:middle
the first thing you do is to

00:26:11.266 --> 00:26:12.246 A:middle
specify your data.

00:26:13.216 --> 00:26:14.686 A:middle
You specify your training data

00:26:14.686 --> 00:26:18.136 A:middle
as well as your test data and

00:26:18.136 --> 00:26:19.586 A:middle
then you can create your model

00:26:19.586 --> 00:26:20.836 A:middle
on the training data.

00:26:22.146 --> 00:26:24.646 A:middle
To evaluate its performance, you

00:26:24.646 --> 00:26:26.246 A:middle
evaluate a model on the test

00:26:26.246 --> 00:26:26.466 A:middle
data.

00:26:27.786 --> 00:26:30.136 A:middle
Finally, to use your model in

00:26:30.136 --> 00:26:32.716 A:middle
your app, you simply save it out

00:26:32.716 --> 00:26:35.336 A:middle
using this write API.

00:26:38.176 --> 00:26:41.586 A:middle
To summarize, with just a few

00:26:41.586 --> 00:26:43.676 A:middle
lines of code, you can train

00:26:43.676 --> 00:26:45.986 A:middle
your customized text classifier

00:26:47.136 --> 00:26:48.526 A:middle
simple intuitive.

00:26:49.046 --> 00:26:52.196 A:middle
With that, I'd like to hand back

00:26:52.196 --> 00:26:53.586 A:middle
to Gaurav who is going to talk

00:26:53.586 --> 00:26:54.696 A:middle
about tabular data.

00:26:55.256 --> 00:26:55.626 A:middle
Thank you.

00:26:56.516 --> 00:27:00.986 A:middle
[ Applause ]

00:26:56.516 --> 00:27:00.986 A:middle
[ Applause ]

00:27:01.486 --> 00:27:04.576 A:middle
&gt;&gt; Thank you, Tao.

00:27:04.826 --> 00:27:07.136 A:middle
Besides images and text, another

00:27:07.136 --> 00:27:08.776 A:middle
common source of data that

00:27:08.776 --> 00:27:10.106 A:middle
occurs very frequently when

00:27:10.106 --> 00:27:11.136 A:middle
you're solving a machine

00:27:11.136 --> 00:27:12.556 A:middle
learning problem is tabular

00:27:12.556 --> 00:27:12.706 A:middle
data.

00:27:13.986 --> 00:27:15.526 A:middle
What I mean by tabular data, I

00:27:15.526 --> 00:27:17.446 A:middle
mean the data is in special

00:27:17.446 --> 00:27:19.206 A:middle
format or in a table format.

00:27:19.686 --> 00:27:21.126 A:middle
This kind of data occurs fairly

00:27:21.126 --> 00:27:21.716 A:middle
frequently.

00:27:22.766 --> 00:27:24.356 A:middle
For example, let's just say

00:27:24.356 --> 00:27:25.706 A:middle
you're trying to predict house

00:27:25.796 --> 00:27:27.326 A:middle
prices using number of beds,

00:27:27.406 --> 00:27:28.716 A:middle
number of baths, or square

00:27:28.786 --> 00:27:29.196 A:middle
footage.

00:27:29.836 --> 00:27:31.366 A:middle
Generally the data is arranged

00:27:31.446 --> 00:27:32.446 A:middle
in a tabular format.

00:27:32.446 --> 00:27:35.656 A:middle
You want to predict the quality

00:27:35.656 --> 00:27:36.996 A:middle
of wine using its chemical

00:27:36.996 --> 00:27:37.996 A:middle
compositions.

00:27:38.316 --> 00:27:39.336 A:middle
Chances are data will be

00:27:39.336 --> 00:27:40.456 A:middle
arranged in table format.

00:27:41.066 --> 00:27:42.426 A:middle
Or something even simple like

00:27:42.486 --> 00:27:44.116 A:middle
where to hop, which bar to hop

00:27:44.116 --> 00:27:46.396 A:middle
tonight using happy hour or its

00:27:46.516 --> 00:27:48.516 A:middle
price, the data will be in

00:27:48.776 --> 00:27:50.066 A:middle
tabular format.

00:27:51.696 --> 00:27:55.076 A:middle
To handle the data which is in

00:27:55.076 --> 00:27:56.756 A:middle
tabular format, we actually

00:27:56.936 --> 00:27:59.846 A:middle
introduce a new data structure

00:27:59.846 --> 00:28:01.686 A:middle
which we call as MLDataTable.

00:27:59.846 --> 00:28:01.686 A:middle
which we call as MLDataTable.

00:28:02.496 --> 00:28:04.876 A:middle
MLDataTable is based on

00:28:04.876 --> 00:28:06.866 A:middle
[inaudible] technology that we

00:28:06.866 --> 00:28:08.546 A:middle
will discuss in detail tomorrow.

00:28:09.036 --> 00:28:11.136 A:middle
There's something interesting

00:28:11.136 --> 00:28:12.286 A:middle
about these data tables.

00:28:13.876 --> 00:28:15.056 A:middle
The rows contains the

00:28:15.056 --> 00:28:17.266 A:middle
observations or examples.

00:28:17.356 --> 00:28:18.946 A:middle
So here, house number two has

00:28:19.056 --> 00:28:21.236 A:middle
four bed, three bath, and 500K

00:28:21.316 --> 00:28:21.666 A:middle
price.

00:28:22.336 --> 00:28:25.006 A:middle
The columns contains what we

00:28:25.006 --> 00:28:25.876 A:middle
call as features.

00:28:26.306 --> 00:28:27.636 A:middle
So the beds are features, baths

00:28:28.636 --> 00:28:30.426 A:middle
are features, square feet,

00:28:30.966 --> 00:28:31.886 A:middle
etcetera are features.

00:28:33.206 --> 00:28:34.966 A:middle
There is one special column that

00:28:35.016 --> 00:28:37.446 A:middle
we want to predict, in this case

00:28:37.586 --> 00:28:41.246 A:middle
price, and this column is known

00:28:41.246 --> 00:28:43.286 A:middle
as target or response variable.

00:28:44.046 --> 00:28:45.546 A:middle
The whole idea behind tabular

00:28:45.546 --> 00:28:47.136 A:middle
data is that we want to predict

00:28:47.136 --> 00:28:49.456 A:middle
target variable as a function of

00:28:49.646 --> 00:28:51.846 A:middle
one or many of these features.

00:28:51.896 --> 00:28:57.086 A:middle
So what are the common sources

00:28:57.086 --> 00:28:57.756 A:middle
that we support?

00:28:57.756 --> 00:28:59.926 A:middle
Well, CSV, JSON as well as you

00:28:59.926 --> 00:29:02.306 A:middle
can actually have code.

00:28:59.926 --> 00:29:02.306 A:middle
can actually have code.

00:29:02.786 --> 00:29:04.666 A:middle
So let's talk a little bit more

00:29:05.436 --> 00:29:07.886 A:middle
about MLDataTable.

00:29:08.396 --> 00:29:11.946 A:middle
First, you can read data simply

00:29:11.946 --> 00:29:14.346 A:middle
by using CSV.

00:29:14.826 --> 00:29:17.536 A:middle
What is more important that you

00:29:17.536 --> 00:29:19.636 A:middle
can access the column using a

00:29:19.636 --> 00:29:20.806 A:middle
subscript notation.

00:29:20.996 --> 00:29:22.426 A:middle
So all you do is house or the

00:29:22.496 --> 00:29:23.926 A:middle
price and you get an entire

00:29:23.926 --> 00:29:27.296 A:middle
column of price.

00:29:27.476 --> 00:29:28.856 A:middle
You can add two columns,

00:29:28.856 --> 00:29:30.356 A:middle
subtract two column, multiply

00:29:30.356 --> 00:29:31.886 A:middle
two column, divide two columns.

00:29:32.686 --> 00:29:35.376 A:middle
And the way you do it is in very

00:29:35.376 --> 00:29:36.696 A:middle
natural looking syntax.

00:29:36.696 --> 00:29:37.956 A:middle
So you just simply say house or

00:29:37.956 --> 00:29:39.296 A:middle
the price divided by house or

00:29:39.296 --> 00:29:41.356 A:middle
the square foot to get price per

00:29:41.356 --> 00:29:41.896 A:middle
square foot.

00:29:43.136 --> 00:29:45.196 A:middle
Behind the scenes, this

00:29:45.226 --> 00:29:46.936 A:middle
calculation is done using

00:29:46.936 --> 00:29:49.106 A:middle
[inaudible] evaluation and

00:29:49.106 --> 00:29:50.196 A:middle
through vector operations.

00:29:50.956 --> 00:29:53.716 A:middle
It can also do some of the other

00:29:53.716 --> 00:29:54.576 A:middle
interesting things.

00:29:54.686 --> 00:29:56.596 A:middle
For example, you can split data

00:29:56.596 --> 00:29:58.616 A:middle
table in training as well as you

00:29:58.696 --> 00:29:59.946 A:middle
can even do filtering.

00:30:00.746 --> 00:30:02.146 A:middle
So for example, if you're only

00:30:02.146 --> 00:30:04.406 A:middle
interested in large houses, you

00:30:04.406 --> 00:30:05.956 A:middle
can create an indicator variable

00:30:05.956 --> 00:30:06.896 A:middle
and filter it out.

00:30:08.116 --> 00:30:09.846 A:middle
There a lot of operations that

00:30:09.846 --> 00:30:11.656 A:middle
data table support.

00:30:11.656 --> 00:30:13.686 A:middle
I urge you to try it out in

00:30:13.686 --> 00:30:14.626 A:middle
Xcode playground.

00:30:14.766 --> 00:30:15.196 A:middle
They're fun.

00:30:15.196 --> 00:30:19.406 A:middle
Now once you have data in data

00:30:19.406 --> 00:30:20.706 A:middle
table, you would like to do the

00:30:20.746 --> 00:30:21.426 A:middle
training on it.

00:30:22.846 --> 00:30:24.416 A:middle
Create ML supports a large

00:30:24.416 --> 00:30:25.766 A:middle
number of algorithms such as

00:30:25.766 --> 00:30:29.006 A:middle
Boosted Tree Regression, Random

00:30:29.006 --> 00:30:30.146 A:middle
Forest, etcetera.

00:30:31.256 --> 00:30:33.526 A:middle
And all of these algorithms are

00:30:33.526 --> 00:30:34.506 A:middle
represented by their class.

00:30:34.506 --> 00:30:37.936 A:middle
In order to train your model,

00:30:37.936 --> 00:30:39.356 A:middle
you only have to write one line

00:30:39.356 --> 00:30:39.816 A:middle
of code.

00:30:40.246 --> 00:30:41.786 A:middle
Basically, you tell what is the

00:30:41.826 --> 00:30:44.036 A:middle
target and where you're getting

00:30:44.036 --> 00:30:45.466 A:middle
the data and which is the

00:30:45.466 --> 00:30:46.886 A:middle
algorithm you are instantiating.

00:30:47.456 --> 00:30:49.006 A:middle
So in this case, let's just say

00:30:49.006 --> 00:30:49.846 A:middle
you are running Linear

00:30:49.846 --> 00:30:52.586 A:middle
Regression or Regularized Linear

00:30:52.586 --> 00:30:53.816 A:middle
Regression, you just actually

00:30:53.816 --> 00:30:56.676 A:middle
tell it that the data is house

00:30:56.676 --> 00:30:57.876 A:middle
data and the column is price.

00:30:58.666 --> 00:31:03.016 A:middle
If you do Boosted Tree

00:30:58.666 --> 00:31:03.016 A:middle
If you do Boosted Tree

00:31:03.016 --> 00:31:04.746 A:middle
Regression, just replace Linear

00:31:04.746 --> 00:31:06.046 A:middle
Regression with Boosted Tree and

00:31:06.046 --> 00:31:06.676 A:middle
you're all set.

00:31:07.676 --> 00:31:09.946 A:middle
Now Random Forest like that.

00:31:11.316 --> 00:31:14.346 A:middle
Plus we also provide a high

00:31:14.346 --> 00:31:16.186 A:middle
level abstraction MLRegressor

00:31:16.526 --> 00:31:18.066 A:middle
that automatically runs all

00:31:18.066 --> 00:31:19.706 A:middle
these algorithms and choose the

00:31:19.706 --> 00:31:20.666 A:middle
best one for you.

00:31:21.516 --> 00:31:27.196 A:middle
[ Applause ]

00:31:27.696 --> 00:31:28.866 A:middle
This is in line with our

00:31:28.866 --> 00:31:30.606 A:middle
philosophy that you should focus

00:31:30.606 --> 00:31:30.876 A:middle
on task.

00:31:30.876 --> 00:31:32.476 A:middle
So the task is to predict the

00:31:32.536 --> 00:31:32.916 A:middle
price.

00:31:32.916 --> 00:31:34.146 A:middle
You should not focus about

00:31:34.516 --> 00:31:35.656 A:middle
nitty-gritty details of the

00:31:35.656 --> 00:31:36.286 A:middle
algorithm.

00:31:37.056 --> 00:31:38.776 A:middle
Having said that, in case you're

00:31:38.776 --> 00:31:40.876 A:middle
an expert, you can actually use

00:31:40.876 --> 00:31:42.316 A:middle
Boosted Tree and change its

00:31:42.316 --> 00:31:43.506 A:middle
parameters also.

00:31:48.156 --> 00:31:50.446 A:middle
So a complete end-to-end would

00:31:50.446 --> 00:31:51.126 A:middle
look like this.

00:31:52.016 --> 00:31:54.396 A:middle
It follows exactly the same

00:31:54.396 --> 00:31:56.196 A:middle
pattern as image and text.

00:31:56.586 --> 00:31:59.956 A:middle
First, you specify the data.

00:32:00.276 --> 00:32:02.616 A:middle
Second, you just create your

00:32:03.646 --> 00:32:04.096 A:middle
model.

00:32:04.546 --> 00:32:05.966 A:middle
Third, you evaluate the model.

00:32:07.346 --> 00:32:09.126 A:middle
And once you're happy, you save

00:32:09.126 --> 00:32:09.386 A:middle
it out.

00:32:10.536 --> 00:32:13.856 A:middle
So tabular data, image data, or

00:32:14.086 --> 00:32:15.746 A:middle
text data, they all follow the

00:32:15.806 --> 00:32:17.206 A:middle
same pattern.

00:32:19.876 --> 00:32:21.466 A:middle
So let's just take a quick

00:32:21.466 --> 00:32:23.856 A:middle
summary of what we saw in this

00:32:23.946 --> 00:32:24.356 A:middle
session.

00:32:27.676 --> 00:32:30.466 A:middle
So Create ML is our ML framework

00:32:30.466 --> 00:32:30.896 A:middle
insert.

00:32:30.896 --> 00:32:33.156 A:middle
It's very simple to use and it

00:32:33.156 --> 00:32:34.876 A:middle
is very powerful and it

00:32:34.876 --> 00:32:35.836 A:middle
leverages core Apple

00:32:35.836 --> 00:32:36.836 A:middle
technologies.

00:32:36.836 --> 00:32:38.226 A:middle
You do end-to-end machine

00:32:38.226 --> 00:32:40.686 A:middle
learning in Swift on your Mac.

00:32:43.256 --> 00:32:45.116 A:middle
We also discussed about our

00:32:45.176 --> 00:32:46.036 A:middle
workflow.

00:32:46.976 --> 00:32:49.146 A:middle
Once again, you start from an

00:32:49.146 --> 00:32:49.896 A:middle
experience.

00:32:50.576 --> 00:32:51.576 A:middle
What is the experience you're

00:32:51.576 --> 00:32:52.366 A:middle
trying to enable?

00:32:53.716 --> 00:32:55.196 A:middle
Then define the problem.

00:32:55.946 --> 00:32:57.176 A:middle
Then collect the data.

00:32:57.456 --> 00:32:58.846 A:middle
Make sure this data is

00:32:58.896 --> 00:33:00.456 A:middle
reflective of the real-world

00:32:58.896 --> 00:33:00.456 A:middle
reflective of the real-world

00:33:00.456 --> 00:33:02.776 A:middle
usage of your scenario.

00:33:03.606 --> 00:33:05.156 A:middle
Then you train the model.

00:33:05.536 --> 00:33:07.186 A:middle
And finally evaluate it.

00:33:08.016 --> 00:33:10.406 A:middle
And once you are happy, you just

00:33:10.476 --> 00:33:14.366 A:middle
save it out.

00:33:14.636 --> 00:33:17.046 A:middle
Create ML is in Swift.

00:33:17.406 --> 00:33:18.986 A:middle
And it's available on macOS

00:33:18.986 --> 00:33:19.496 A:middle
Mojave.

00:33:22.836 --> 00:33:24.396 A:middle
You can use it in Xcode

00:33:24.396 --> 00:33:28.206 A:middle
Playground, Swift Scripts and

00:33:28.206 --> 00:33:29.076 A:middle
[inaudible].

00:33:29.076 --> 00:33:30.536 A:middle
So please try it out.

00:33:32.326 --> 00:33:33.776 A:middle
We would love to hear from you.

00:33:33.776 --> 00:33:35.546 A:middle
We are here to receive your

00:33:35.546 --> 00:33:37.946 A:middle
feedback, and we hope that you

00:33:37.946 --> 00:33:38.956 A:middle
will love it as much as we do.

00:33:41.456 --> 00:33:43.146 A:middle
We will be in the machine

00:33:43.146 --> 00:33:44.656 A:middle
learning get together as well as

00:33:44.656 --> 00:33:45.146 A:middle
the labs.

00:33:45.296 --> 00:33:46.276 A:middle
So there is -- tomorrow there is

00:33:46.276 --> 00:33:46.946 A:middle
a get together.

00:33:47.376 --> 00:33:49.046 A:middle
We will be in labs also, so

00:33:49.046 --> 00:33:50.236 A:middle
please give us your feedback.

00:33:51.346 --> 00:33:52.866 A:middle
There are also related sessions

00:33:52.866 --> 00:33:53.986 A:middle
in the WWDC App.

00:33:54.146 --> 00:33:56.626 A:middle
We have Core ML session tomorrow

00:33:56.626 --> 00:34:00.346 A:middle
morning and ML session tomorrow

00:33:56.626 --> 00:34:00.346 A:middle
morning and ML session tomorrow

00:34:00.346 --> 00:34:03.516 A:middle
afternoon, Vision sessions on

00:34:05.216 --> 00:34:05.606 A:middle
Thursday.

00:34:05.606 --> 00:34:08.186 A:middle
And we have labs on Wednesday

00:34:08.186 --> 00:34:08.795 A:middle
and Friday.

00:34:09.466 --> 00:34:09.786 A:middle
Thank you.

00:34:10.516 --> 00:34:20.370 A:middle
[ Applause ]
