WEBVTT

00:00:07.516 --> 00:00:17.516 A:middle
[ Music ]

00:00:18.516 --> 00:00:25.006 A:middle
[ Applause ]

00:00:25.506 --> 00:00:27.126 A:middle
&gt;&gt; Good afternoon, welcome to

00:00:27.126 --> 00:00:29.406 A:middle
Optimizing App Assets, my name

00:00:29.406 --> 00:00:30.996 A:middle
is Will, engineer on the Cocoa

00:00:30.996 --> 00:00:33.156 A:middle
Frameworks group and today make

00:00:33.426 --> 00:00:35.266 A:middle
my coworker Patrick and I are

00:00:35.266 --> 00:00:36.176 A:middle
going to go through some of the

00:00:36.176 --> 00:00:38.056 A:middle
best practices for optimizing

00:00:38.056 --> 00:00:39.296 A:middle
assets in your application.

00:00:41.516 --> 00:00:43.726 A:middle
In this day and age, many apps

00:00:43.726 --> 00:00:45.816 A:middle
and games offer great user

00:00:45.816 --> 00:00:47.526 A:middle
experience by incorporating high

00:00:47.526 --> 00:00:49.126 A:middle
fidelity artwork and other type

00:00:49.126 --> 00:00:50.506 A:middle
of assets in their application.

00:00:50.966 --> 00:00:52.616 A:middle
And by doing so they're able to

00:00:52.616 --> 00:00:53.786 A:middle
attract a large number of

00:00:53.786 --> 00:00:55.586 A:middle
audience, as well as they're

00:00:55.586 --> 00:00:56.266 A:middle
engaging.

00:00:56.816 --> 00:00:58.296 A:middle
We want this to be true for all

00:00:58.296 --> 00:01:00.196 A:middle
of your apps as well and that is

00:00:58.296 --> 00:01:00.196 A:middle
of your apps as well and that is

00:01:00.196 --> 00:01:02.336 A:middle
why we're here today to showcase

00:01:02.336 --> 00:01:03.496 A:middle
some of the best practices with

00:01:03.496 --> 00:01:05.266 A:middle
Asset Catalog and also more

00:01:05.266 --> 00:01:06.926 A:middle
importantly, on how you can

00:01:06.926 --> 00:01:08.876 A:middle
better deploy the assets in your

00:01:08.876 --> 00:01:10.496 A:middle
application to your users and

00:01:10.536 --> 00:01:11.726 A:middle
how to translate that to the

00:01:11.726 --> 00:01:13.056 A:middle
overall user experience.

00:01:15.386 --> 00:01:17.546 A:middle
And throughout this talk we're

00:01:17.546 --> 00:01:19.106 A:middle
going to touch on a variety of

00:01:19.106 --> 00:01:21.046 A:middle
different aspects through the

00:01:21.046 --> 00:01:22.906 A:middle
traditional, design, develop,

00:01:22.946 --> 00:01:24.156 A:middle
and deployment workflow.

00:01:25.026 --> 00:01:26.676 A:middle
But first I'd like to spend a

00:01:26.676 --> 00:01:28.696 A:middle
little bit of time to talk about

00:01:28.696 --> 00:01:31.106 A:middle
a topic and that is image

00:01:31.106 --> 00:01:31.686 A:middle
compression.

00:01:34.706 --> 00:01:35.936 A:middle
Image compression is at the

00:01:35.996 --> 00:01:37.106 A:middle
heart of the Asset Catalog

00:01:37.106 --> 00:01:40.776 A:middle
editor and is the last step in

00:01:40.776 --> 00:01:41.966 A:middle
the Asset Catalog compilation

00:01:41.966 --> 00:01:42.516 A:middle
pipeline.

00:01:43.106 --> 00:01:44.886 A:middle
And is greatly related to some

00:01:44.886 --> 00:01:46.346 A:middle
of the other optimizations that

00:01:46.346 --> 00:01:47.536 A:middle
happen throughout the pipeline.

00:01:49.476 --> 00:01:51.896 A:middle
By default Asset Catalog offers

00:01:52.086 --> 00:01:54.356 A:middle
a variety of different types of

00:01:54.386 --> 00:01:56.706 A:middle
compression types and is also by

00:01:56.706 --> 00:01:58.346 A:middle
default able to select the most

00:01:58.346 --> 00:01:59.826 A:middle
optimal compression type for

00:01:59.826 --> 00:02:01.296 A:middle
getting any given image or

00:01:59.826 --> 00:02:01.296 A:middle
getting any given image or

00:02:01.296 --> 00:02:02.006 A:middle
texture asset.

00:02:03.616 --> 00:02:04.906 A:middle
While that may be sufficient for

00:02:04.906 --> 00:02:07.036 A:middle
most projects, it's still a good

00:02:07.036 --> 00:02:08.886 A:middle
idea to understand what are some

00:02:08.886 --> 00:02:10.936 A:middle
of the options offered and more

00:02:10.936 --> 00:02:12.766 A:middle
importantly, to understand what

00:02:12.766 --> 00:02:14.536 A:middle
are their trade-offs, as well as

00:02:14.536 --> 00:02:15.676 A:middle
what are the implications on

00:02:15.676 --> 00:02:16.266 A:middle
your project.

00:02:19.526 --> 00:02:20.726 A:middle
Now before I dive into the

00:02:20.726 --> 00:02:22.536 A:middle
specifics of any image

00:02:22.536 --> 00:02:24.396 A:middle
compression, I'd like to talk a

00:02:24.396 --> 00:02:25.586 A:middle
little bit about another

00:02:25.696 --> 00:02:27.946 A:middle
optimization in Asset Catalog

00:02:28.616 --> 00:02:30.186 A:middle
that has a huge implication on

00:02:30.186 --> 00:02:31.256 A:middle
all of the compression that we

00:02:31.256 --> 00:02:33.426 A:middle
do, and it's called automatic

00:02:33.426 --> 00:02:34.196 A:middle
image packing.

00:02:38.116 --> 00:02:39.506 A:middle
Traditionally, before the

00:02:39.506 --> 00:02:41.896 A:middle
inception of Asset Catalog, one

00:02:41.896 --> 00:02:43.606 A:middle
way to deploy assets in your

00:02:43.606 --> 00:02:45.126 A:middle
application is just to dump a

00:02:45.126 --> 00:02:46.686 A:middle
bunch of image files in the

00:02:46.686 --> 00:02:47.596 A:middle
application [inaudible] of your

00:02:47.596 --> 00:02:48.076 A:middle
project.

00:02:49.486 --> 00:02:51.206 A:middle
It's important to be aware that

00:02:51.206 --> 00:02:52.626 A:middle
there are many drawbacks, as

00:02:52.626 --> 00:02:54.416 A:middle
well as trade-offs when doing

00:02:54.416 --> 00:02:55.136 A:middle
this approach.

00:02:56.216 --> 00:02:58.956 A:middle
There are two sides of downsize

00:02:58.986 --> 00:03:00.126 A:middle
that you have to be aware of.

00:02:58.986 --> 00:03:00.126 A:middle
that you have to be aware of.

00:03:00.986 --> 00:03:01.966 A:middle
The first comes from the

00:03:01.966 --> 00:03:03.476 A:middle
additional disk storage that

00:03:03.476 --> 00:03:05.656 A:middle
comes with doing so.

00:03:07.046 --> 00:03:08.876 A:middle
Traditional image container

00:03:08.876 --> 00:03:11.796 A:middle
formats uses extra space to

00:03:11.796 --> 00:03:13.376 A:middle
store metadata, as well as other

00:03:13.376 --> 00:03:15.516 A:middle
attributes associated with the

00:03:15.516 --> 00:03:16.396 A:middle
underlying image.

00:03:17.766 --> 00:03:18.876 A:middle
Now if your application has a

00:03:18.876 --> 00:03:21.006 A:middle
huge number of assets, and if

00:03:21.006 --> 00:03:23.366 A:middle
they have similar metadata, the

00:03:23.366 --> 00:03:25.016 A:middle
same information gets duplicated

00:03:25.016 --> 00:03:26.796 A:middle
over and over on disk for no

00:03:26.796 --> 00:03:27.466 A:middle
real benefit.

00:03:28.936 --> 00:03:31.276 A:middle
Additionally, if most of your

00:03:31.276 --> 00:03:33.636 A:middle
assets are fairly small then you

00:03:33.636 --> 00:03:35.026 A:middle
do not get the full benefit of

00:03:35.076 --> 00:03:36.236 A:middle
most image compression.

00:03:38.346 --> 00:03:40.486 A:middle
The other type of drawback comes

00:03:40.486 --> 00:03:41.726 A:middle
mainly from the organizational

00:03:41.726 --> 00:03:43.086 A:middle
overhead that you have to pay

00:03:43.086 --> 00:03:43.396 A:middle
for.

00:03:43.766 --> 00:03:45.826 A:middle
It is very hard work with a

00:03:45.826 --> 00:03:47.626 A:middle
large cache of loose image files

00:03:48.666 --> 00:03:50.636 A:middle
and it's also much harder to

00:03:50.636 --> 00:03:52.096 A:middle
interact with them from the

00:03:52.096 --> 00:03:53.986 A:middle
NSImage and UIImage family of

00:03:53.986 --> 00:03:54.476 A:middle
APIs.

00:03:55.966 --> 00:03:57.526 A:middle
Last but not least, you also

00:03:57.526 --> 00:03:58.176 A:middle
have to deal with the

00:03:58.176 --> 00:04:00.416 A:middle
inconsistency in image format,

00:03:58.176 --> 00:04:00.416 A:middle
inconsistency in image format,

00:04:00.746 --> 00:04:02.796 A:middle
as well as other image

00:04:02.796 --> 00:04:03.656 A:middle
attributes as well.

00:04:04.126 --> 00:04:06.256 A:middle
For example, in your artwork

00:04:06.256 --> 00:04:07.956 A:middle
collection you can have a mix of

00:04:07.956 --> 00:04:09.696 A:middle
images but some of them support

00:04:09.696 --> 00:04:11.316 A:middle
transparency while the others do

00:04:11.316 --> 00:04:11.656 A:middle
not.

00:04:13.026 --> 00:04:14.226 A:middle
The same applies to other

00:04:14.226 --> 00:04:16.076 A:middle
attributes, such as color space

00:04:16.076 --> 00:04:17.586 A:middle
and color gamut.

00:04:19.255 --> 00:04:20.805 A:middle
As the catalog is able to

00:04:20.805 --> 00:04:22.616 A:middle
address all these problems by

00:04:22.616 --> 00:04:24.396 A:middle
identifying images that share a

00:04:24.396 --> 00:04:26.316 A:middle
similar color spectrum profile

00:04:26.856 --> 00:04:28.636 A:middle
and group them together to

00:04:28.636 --> 00:04:30.336 A:middle
generate larger image atlases.

00:04:31.236 --> 00:04:32.726 A:middle
This way you do not have to

00:04:32.726 --> 00:04:34.536 A:middle
store the same metadata over and

00:04:34.536 --> 00:04:36.026 A:middle
over for all of your image

00:04:36.026 --> 00:04:36.426 A:middle
artwork.

00:04:37.396 --> 00:04:39.506 A:middle
And you also benefit better from

00:04:39.506 --> 00:04:40.636 A:middle
all the underlying image

00:04:40.636 --> 00:04:41.126 A:middle
compression.

00:04:42.916 --> 00:04:44.866 A:middle
Now let's take a look at a

00:04:44.866 --> 00:04:45.816 A:middle
real-world example.

00:04:48.716 --> 00:04:49.786 A:middle
Here on the left-hand side of

00:04:49.786 --> 00:04:51.366 A:middle
the screen there are a dozen

00:04:51.366 --> 00:04:52.096 A:middle
image artwork.

00:04:53.146 --> 00:04:54.436 A:middle
These may look familiar to you

00:04:54.796 --> 00:04:55.936 A:middle
and that is because they are

00:04:55.936 --> 00:04:57.406 A:middle
taken directly from one of our

00:04:57.406 --> 00:04:57.966 A:middle
platforms.

00:04:59.456 --> 00:05:00.866 A:middle
Now these image artwork are all

00:04:59.456 --> 00:05:00.866 A:middle
Now these image artwork are all

00:05:00.866 --> 00:05:03.276 A:middle
fairly small, but still the

00:05:03.276 --> 00:05:06.146 A:middle
overall size add up to over 50

00:05:06.146 --> 00:05:06.756 A:middle
kilobytes.

00:05:10.096 --> 00:05:11.786 A:middle
This automatic image packing

00:05:12.636 --> 00:05:13.786 A:middle
Asset Catalog is able to

00:05:13.786 --> 00:05:15.386 A:middle
identify that all of these image

00:05:15.386 --> 00:05:17.426 A:middle
artwork share very similar color

00:05:17.426 --> 00:05:19.606 A:middle
spectrum and if so it'll group

00:05:19.656 --> 00:05:21.526 A:middle
them together to generate one

00:05:21.526 --> 00:05:23.476 A:middle
single larger image atlas.

00:05:25.066 --> 00:05:28.956 A:middle
This way the overall disk size

00:05:29.056 --> 00:05:31.666 A:middle
gets reduced to only 20% of the

00:05:31.666 --> 00:05:32.566 A:middle
original size.

00:05:32.976 --> 00:05:34.966 A:middle
That is an 80% size reduction

00:05:34.966 --> 00:05:36.496 A:middle
saving and that is huge.

00:05:38.156 --> 00:05:40.086 A:middle
It's also important to be aware

00:05:40.086 --> 00:05:41.456 A:middle
of these optimization scales

00:05:41.456 --> 00:05:42.036 A:middle
very well.

00:05:42.646 --> 00:05:44.576 A:middle
The larger the amount of our

00:05:44.666 --> 00:05:46.926 A:middle
asset in your application, the

00:05:46.926 --> 00:05:47.936 A:middle
more benefit you're going to get

00:05:47.936 --> 00:05:48.976 A:middle
out of this optimization.

00:05:52.356 --> 00:05:53.786 A:middle
So that's automatic image

00:05:53.786 --> 00:05:54.126 A:middle
packing.

00:05:56.666 --> 00:05:57.496 A:middle
Now let's talk a little bit

00:05:57.496 --> 00:05:58.976 A:middle
about lossy compression.

00:06:01.486 --> 00:06:03.606 A:middle
Lossy compression is all about

00:06:03.676 --> 00:06:05.476 A:middle
trading minor losses in vision

00:06:05.476 --> 00:06:08.146 A:middle
fidelity for the large savings

00:06:08.216 --> 00:06:09.406 A:middle
that you gain from the

00:06:09.406 --> 00:06:10.406 A:middle
underlying compression.

00:06:10.926 --> 00:06:12.336 A:middle
So it's really important to

00:06:12.336 --> 00:06:13.916 A:middle
understand what are the

00:06:13.916 --> 00:06:15.316 A:middle
scenarios in your application

00:06:15.556 --> 00:06:16.956 A:middle
where lossy compression is most

00:06:16.956 --> 00:06:17.716 A:middle
applicable to.

00:06:19.666 --> 00:06:21.916 A:middle
Typically we recommend you use

00:06:21.966 --> 00:06:24.036 A:middle
lossy compression for image

00:06:24.036 --> 00:06:25.296 A:middle
artwork that have fairly short

00:06:25.296 --> 00:06:26.296 A:middle
on-screen duration.

00:06:27.196 --> 00:06:28.726 A:middle
For example, that will be

00:06:28.726 --> 00:06:29.916 A:middle
artwork that is shown on the

00:06:29.916 --> 00:06:30.816 A:middle
splash screen of your

00:06:30.816 --> 00:06:32.656 A:middle
application or through

00:06:32.656 --> 00:06:34.106 A:middle
animations and effects.

00:06:36.206 --> 00:06:37.636 A:middle
Now it wouldn't be exciting for

00:06:37.636 --> 00:06:38.756 A:middle
me to just stand here to talk

00:06:38.756 --> 00:06:40.766 A:middle
about lossy compression without

00:06:40.766 --> 00:06:41.656 A:middle
introducing a new lossy

00:06:41.656 --> 00:06:42.626 A:middle
compression in the Asset

00:06:42.626 --> 00:06:43.096 A:middle
Catalog.

00:06:43.656 --> 00:06:45.386 A:middle
So I'm very happy to announce

00:06:45.386 --> 00:06:47.586 A:middle
that this year we're extending

00:06:47.826 --> 00:06:50.266 A:middle
support of high-efficiency image

00:06:50.266 --> 00:06:52.206 A:middle
file format in Asset Catalog.

00:06:54.606 --> 00:06:55.556 A:middle
If you followed our

00:06:55.556 --> 00:06:56.796 A:middle
announcements from last year,

00:06:57.446 --> 00:06:58.716 A:middle
you know that we introduced

00:06:58.716 --> 00:07:00.236 A:middle
high-efficiency file image

00:06:58.716 --> 00:07:00.236 A:middle
high-efficiency file image

00:07:00.236 --> 00:07:02.636 A:middle
format on all of our platforms,

00:07:02.956 --> 00:07:04.826 A:middle
as well as in the Asset Catalog

00:07:04.826 --> 00:07:05.246 A:middle
editor.

00:07:06.616 --> 00:07:08.216 A:middle
This year we're taking it one

00:07:08.216 --> 00:07:09.876 A:middle
step further, we're making

00:07:09.876 --> 00:07:11.276 A:middle
high-efficiency image file

00:07:11.276 --> 00:07:12.846 A:middle
format with default lossy

00:07:12.846 --> 00:07:13.956 A:middle
compression in Asset Catalog.

00:07:18.516 --> 00:07:21.566 A:middle
[ Applause ]

00:07:22.066 --> 00:07:22.856 A:middle
Thank you.

00:07:23.846 --> 00:07:25.836 A:middle
Now let's have a quick recap of

00:07:25.836 --> 00:07:26.816 A:middle
some of the benefits that we get

00:07:26.816 --> 00:07:28.636 A:middle
from high-efficiency image file

00:07:28.636 --> 00:07:29.026 A:middle
format.

00:07:30.066 --> 00:07:32.076 A:middle
The most important thing to know

00:07:32.076 --> 00:07:33.396 A:middle
that it's able to offer much

00:07:33.446 --> 00:07:35.776 A:middle
better compression ratio than

00:07:35.936 --> 00:07:36.976 A:middle
compared to some of the existing

00:07:36.976 --> 00:07:38.356 A:middle
lossy compression that we

00:07:38.356 --> 00:07:39.056 A:middle
already offer.

00:07:40.066 --> 00:07:41.246 A:middle
One that you may be already

00:07:41.296 --> 00:07:43.566 A:middle
familiar with is JPEG.

00:07:45.286 --> 00:07:46.706 A:middle
There are many benefits that

00:07:46.736 --> 00:07:48.046 A:middle
come with this high-efficiency

00:07:48.506 --> 00:07:50.146 A:middle
image file format, such as

00:07:50.146 --> 00:07:51.766 A:middle
support for transparency out of

00:07:51.766 --> 00:07:52.186 A:middle
the box.

00:07:54.006 --> 00:07:55.726 A:middle
And more importantly, it's

00:07:55.726 --> 00:07:57.836 A:middle
important to be aware that Asset

00:07:57.836 --> 00:07:59.266 A:middle
Catalog is able to automatically

00:07:59.356 --> 00:08:01.246 A:middle
convert image files from other

00:07:59.356 --> 00:08:01.246 A:middle
convert image files from other

00:08:01.246 --> 00:08:03.676 A:middle
formats to high-efficiency image

00:08:03.676 --> 00:08:05.686 A:middle
file formats, which means that

00:08:05.846 --> 00:08:07.916 A:middle
as long as your image assets are

00:08:07.916 --> 00:08:09.396 A:middle
tagged to this lossy compression

00:08:09.826 --> 00:08:12.606 A:middle
there are no extra required, no

00:08:12.606 --> 00:08:14.186 A:middle
extra action required on your

00:08:14.186 --> 00:08:14.476 A:middle
end.

00:08:14.676 --> 00:08:16.486 A:middle
This all happens automatically

00:08:17.066 --> 00:08:18.346 A:middle
in the Asset Catalog compilation

00:08:18.346 --> 00:08:18.806 A:middle
pipeline.

00:08:20.136 --> 00:08:22.636 A:middle
For more in-depth information on

00:08:22.636 --> 00:08:23.766 A:middle
high-efficiency image file

00:08:23.766 --> 00:08:26.086 A:middle
format, I suggest you refer to

00:08:26.086 --> 00:08:26.956 A:middle
our session from last year.

00:08:32.046 --> 00:08:33.535 A:middle
Now let's shift our focus to

00:08:33.535 --> 00:08:34.515 A:middle
lossless compression.

00:08:35.775 --> 00:08:37.035 A:middle
Lossless compression is the

00:08:37.035 --> 00:08:39.066 A:middle
default compression type and

00:08:39.066 --> 00:08:40.826 A:middle
it's used for the majority of

00:08:40.826 --> 00:08:41.856 A:middle
application assets.

00:08:43.256 --> 00:08:44.376 A:middle
Therefore, it is really

00:08:44.376 --> 00:08:45.856 A:middle
important to understand how you

00:08:45.856 --> 00:08:47.406 A:middle
can get the most benefit out of

00:08:47.466 --> 00:08:47.976 A:middle
lossy compression.

00:08:51.716 --> 00:08:54.236 A:middle
Typically image artwork can be

00:08:54.236 --> 00:08:55.786 A:middle
categorized into two groups

00:08:55.956 --> 00:08:57.256 A:middle
based on their color spectrum

00:08:57.256 --> 00:09:00.046 A:middle
profile, and they each benefit

00:08:57.256 --> 00:09:00.046 A:middle
profile, and they each benefit

00:09:00.116 --> 00:09:02.706 A:middle
differently from any lossless

00:09:02.706 --> 00:09:03.296 A:middle
compression.

00:09:04.366 --> 00:09:05.336 A:middle
Let's take a look at that.

00:09:08.326 --> 00:09:09.786 A:middle
The first category of images are

00:09:09.786 --> 00:09:12.006 A:middle
commonly referred as simple

00:09:12.006 --> 00:09:12.476 A:middle
artwork.

00:09:13.766 --> 00:09:15.366 A:middle
And they're referred this way

00:09:16.586 --> 00:09:17.686 A:middle
because they have a fairly

00:09:17.686 --> 00:09:19.546 A:middle
narrow color spectrum and a

00:09:19.546 --> 00:09:21.226 A:middle
fairly small number of discrete

00:09:21.306 --> 00:09:24.536 A:middle
color values and that is because

00:09:24.536 --> 00:09:26.066 A:middle
of the simplistic designs.

00:09:26.496 --> 00:09:27.776 A:middle
And they're best represented as

00:09:27.776 --> 00:09:29.046 A:middle
many application icons.

00:09:29.776 --> 00:09:32.806 A:middle
On the other hand, the other

00:09:32.806 --> 00:09:34.656 A:middle
type of image artwork are

00:09:34.886 --> 00:09:36.186 A:middle
referred as complex artwork.

00:09:38.026 --> 00:09:39.606 A:middle
Again, both these types of image

00:09:39.606 --> 00:09:41.756 A:middle
assets benefit differently from

00:09:41.756 --> 00:09:42.666 A:middle
lossless compression.

00:09:43.386 --> 00:09:44.766 A:middle
And generally speaking, any

00:09:44.766 --> 00:09:46.366 A:middle
lossless compression will do

00:09:46.366 --> 00:09:47.956 A:middle
really great to either one of

00:09:47.956 --> 00:09:49.156 A:middle
them because they're optimized

00:09:49.156 --> 00:09:49.506 A:middle
for it.

00:09:51.156 --> 00:09:52.676 A:middle
We realize that both of these

00:09:52.826 --> 00:09:54.786 A:middle
are really important in many

00:09:54.886 --> 00:09:55.356 A:middle
projects.

00:09:55.746 --> 00:09:57.926 A:middle
And we also want to have all of

00:09:57.926 --> 00:09:59.886 A:middle
your assets to be deployed

00:09:59.886 --> 00:10:00.886 A:middle
through the best lossless

00:09:59.886 --> 00:10:00.886 A:middle
through the best lossless

00:10:00.886 --> 00:10:01.956 A:middle
compression possible.

00:10:03.286 --> 00:10:04.606 A:middle
So I'm very happy to announce

00:10:04.606 --> 00:10:06.576 A:middle
this year we're introducing a

00:10:06.576 --> 00:10:08.646 A:middle
new lossless compression in

00:10:08.646 --> 00:10:11.996 A:middle
Asset Catalog and it's called

00:10:12.066 --> 00:10:13.576 A:middle
Apple Deep Pixel Image

00:10:13.576 --> 00:10:13.976 A:middle
Compression.

00:10:17.516 --> 00:10:21.806 A:middle
[ Applause ]

00:10:22.306 --> 00:10:22.886 A:middle
Thank you again.

00:10:24.046 --> 00:10:26.286 A:middle
Apple Deep Pixel Image

00:10:26.286 --> 00:10:28.116 A:middle
Compression is a flexible

00:10:28.116 --> 00:10:30.366 A:middle
compression that is adapted to

00:10:30.366 --> 00:10:31.546 A:middle
the image color spectrum.

00:10:32.726 --> 00:10:33.686 A:middle
What that means is that it's

00:10:33.686 --> 00:10:35.076 A:middle
able to select the most optimal

00:10:35.076 --> 00:10:36.906 A:middle
compression algorithm based on

00:10:36.906 --> 00:10:37.686 A:middle
the color spectrum

00:10:37.686 --> 00:10:40.166 A:middle
characteristics of any image

00:10:40.446 --> 00:10:40.896 A:middle
artwork.

00:10:42.566 --> 00:10:44.106 A:middle
This year not only we're

00:10:44.106 --> 00:10:46.006 A:middle
extending this new compression

00:10:46.346 --> 00:10:48.126 A:middle
to all of you guys, we're also

00:10:48.126 --> 00:10:49.506 A:middle
enabling it on all of our

00:10:49.616 --> 00:10:51.056 A:middle
platforms, as well as first

00:10:51.056 --> 00:10:51.746 A:middle
party apps.

00:10:52.616 --> 00:10:55.036 A:middle
And by doing so we're able to

00:10:55.036 --> 00:10:57.746 A:middle
observe on average 20% size

00:10:57.746 --> 00:10:59.586 A:middle
reduction across all of our

00:11:00.136 --> 00:11:02.556 A:middle
built projects, which is a

00:11:02.556 --> 00:11:02.976 A:middle
pretty big deal.

00:11:03.516 --> 00:11:08.566 A:middle
[ Applause ]

00:11:09.066 --> 00:11:11.976 A:middle
Now let's look at some numbers.

00:11:15.186 --> 00:11:16.656 A:middle
Here's a chart that shows you

00:11:16.846 --> 00:11:18.586 A:middle
the overall size of all the

00:11:18.586 --> 00:11:20.896 A:middle
Asset Catalogs from some of our

00:11:20.896 --> 00:11:22.486 A:middle
select platforms.

00:11:23.066 --> 00:11:25.316 A:middle
And it is immediately obvious

00:11:25.616 --> 00:11:27.606 A:middle
that we're able to see about up

00:11:27.716 --> 00:11:30.086 A:middle
to 20% size reductions across

00:11:30.086 --> 00:11:30.956 A:middle
all of our platforms.

00:11:36.046 --> 00:11:37.206 A:middle
When it comes to lossless

00:11:37.206 --> 00:11:39.216 A:middle
compression, compression ratio

00:11:39.216 --> 00:11:40.426 A:middle
is only half the story.

00:11:41.556 --> 00:11:42.386 A:middle
Because of the fact that

00:11:42.386 --> 00:11:44.336 A:middle
lossless compression is used for

00:11:44.336 --> 00:11:46.086 A:middle
the majority of your application

00:11:46.086 --> 00:11:48.496 A:middle
artwork, decode time is just

00:11:48.496 --> 00:11:49.456 A:middle
important as well.

00:11:50.796 --> 00:11:51.886 A:middle
Apple Deep Pixel Image

00:11:51.916 --> 00:11:54.056 A:middle
Compression is also able to

00:11:54.056 --> 00:11:56.656 A:middle
offer up to 20% improvement in

00:11:56.656 --> 00:11:56.966 A:middle
decode time.

00:12:03.046 --> 00:12:04.076 A:middle
So that was lossless

00:12:04.076 --> 00:12:04.626 A:middle
compression.

00:12:06.016 --> 00:12:07.976 A:middle
Now I'd like to shift gears to

00:12:07.976 --> 00:12:10.346 A:middle
touch on two separate but

00:12:10.456 --> 00:12:13.256 A:middle
strongly connected subjects that

00:12:13.326 --> 00:12:15.056 A:middle
have a huge implication on all

00:12:15.056 --> 00:12:16.176 A:middle
the optimizations and

00:12:16.256 --> 00:12:17.706 A:middle
compressions that I just talked

00:12:17.706 --> 00:12:20.746 A:middle
about, and their deployment and

00:12:20.746 --> 00:12:20.956 A:middle
App Thinning.

00:12:25.606 --> 00:12:27.376 A:middle
Here's a quick recap of what App

00:12:27.376 --> 00:12:27.996 A:middle
Thinning is.

00:12:28.396 --> 00:12:29.966 A:middle
App thinning is a process that

00:12:29.966 --> 00:12:31.466 A:middle
takes place in the App Store

00:12:31.836 --> 00:12:33.306 A:middle
that generates all variants of

00:12:33.306 --> 00:12:35.046 A:middle
your project targeting all the

00:12:35.046 --> 00:12:36.926 A:middle
device models, as well as

00:12:37.526 --> 00:12:38.916 A:middle
versions of your deployment

00:12:38.916 --> 00:12:39.226 A:middle
target.

00:12:41.336 --> 00:12:42.656 A:middle
When we take advantage of App

00:12:42.656 --> 00:12:46.216 A:middle
Thinning is to have the

00:12:46.216 --> 00:12:47.216 A:middle
deployment target of your

00:12:47.216 --> 00:12:49.496 A:middle
application to a version that is

00:12:49.496 --> 00:12:51.806 A:middle
lower than the latest version of

00:12:51.806 --> 00:12:52.926 A:middle
the platform you're targeting.

00:12:53.886 --> 00:12:55.756 A:middle
This way you'll be able to reach

00:12:55.786 --> 00:12:56.726 A:middle
more audience.

00:12:57.346 --> 00:13:00.926 A:middle
App thinning is able to take

00:12:57.346 --> 00:13:00.926 A:middle
App thinning is able to take

00:13:00.926 --> 00:13:02.676 A:middle
care of generating all the

00:13:02.676 --> 00:13:04.596 A:middle
variants of your project and

00:13:04.596 --> 00:13:06.786 A:middle
deploy the most optimal one

00:13:06.786 --> 00:13:08.896 A:middle
across all of your user base.

00:13:10.716 --> 00:13:12.196 A:middle
This year if you build your

00:13:12.196 --> 00:13:14.116 A:middle
project with Xcode 10 and the

00:13:14.116 --> 00:13:17.016 A:middle
iOS 12 family of SDKs, your

00:13:17.016 --> 00:13:18.546 A:middle
project is automatically going

00:13:18.546 --> 00:13:19.606 A:middle
to benefit from all the

00:13:19.606 --> 00:13:20.896 A:middle
optimizations and new

00:13:20.896 --> 00:13:22.186 A:middle
compressions that I just talked

00:13:22.186 --> 00:13:22.556 A:middle
about.

00:13:24.336 --> 00:13:27.456 A:middle
However, if you back deploy your

00:13:27.456 --> 00:13:28.566 A:middle
application to an earlier

00:13:28.566 --> 00:13:33.026 A:middle
version the new optimizations

00:13:33.326 --> 00:13:34.216 A:middle
are not preserved.

00:13:35.836 --> 00:13:37.156 A:middle
And that is because App Thinning

00:13:37.726 --> 00:13:39.116 A:middle
has to generate variants that

00:13:39.116 --> 00:13:40.456 A:middle
are compatible to the earlier

00:13:40.456 --> 00:13:41.986 A:middle
versions of the targeted

00:13:41.986 --> 00:13:42.466 A:middle
platform.

00:13:44.056 --> 00:13:47.396 A:middle
This isn't ideal and more

00:13:47.396 --> 00:13:48.826 A:middle
importantly, we really want all

00:13:48.826 --> 00:13:50.986 A:middle
of your assets to be deployed in

00:13:50.986 --> 00:13:52.156 A:middle
the most optimal manner.

00:13:52.886 --> 00:13:54.546 A:middle
So I'm happy to announce this

00:13:54.546 --> 00:13:56.646 A:middle
year we're introducing a new

00:13:56.646 --> 00:13:59.176 A:middle
version of App Thinning, called

00:13:59.176 --> 00:13:59.926 A:middle
OS Variant Thinning.

00:14:02.496 --> 00:14:05.936 A:middle
With OS Variant Thinning your

00:14:05.936 --> 00:14:07.846 A:middle
application can still target

00:14:08.806 --> 00:14:09.846 A:middle
those that are on earlier

00:14:09.846 --> 00:14:11.116 A:middle
versions of your target

00:14:11.116 --> 00:14:13.736 A:middle
platform, say in this case from

00:14:13.736 --> 00:14:15.356 A:middle
iOS 9 all the way to iOS 11.

00:14:17.246 --> 00:14:18.216 A:middle
And for those that are running

00:14:18.216 --> 00:14:20.936 A:middle
on the latest version of iOS, OS

00:14:20.936 --> 00:14:22.276 A:middle
Variant Thinning is able to

00:14:22.276 --> 00:14:23.536 A:middle
generate a special variant of

00:14:23.536 --> 00:14:25.226 A:middle
your project that has all the

00:14:25.226 --> 00:14:26.826 A:middle
latest optimizations and

00:14:26.826 --> 00:14:27.696 A:middle
compression types.

00:14:28.786 --> 00:14:31.206 A:middle
This way everybody is able to

00:14:31.206 --> 00:14:33.166 A:middle
get the most effective version

00:14:33.166 --> 00:14:34.856 A:middle
of your project and everybody's

00:14:34.856 --> 00:14:34.976 A:middle
happy.

00:14:39.516 --> 00:14:43.416 A:middle
[ Applause ]

00:14:43.916 --> 00:14:45.006 A:middle
So that was App Thinning and

00:14:45.006 --> 00:14:45.896 A:middle
backward deployment.

00:14:47.506 --> 00:14:48.586 A:middle
Now I'd like to walk you through

00:14:48.586 --> 00:14:50.246 A:middle
an example of how you can

00:14:50.246 --> 00:14:52.486 A:middle
exercise the same App Thinning

00:14:52.486 --> 00:14:54.416 A:middle
expert workflow locally within

00:14:54.446 --> 00:14:54.986 A:middle
Xcode.

00:14:56.246 --> 00:14:58.226 A:middle
It is a fairly simple process,

00:14:59.146 --> 00:15:00.436 A:middle
all you have to do is go to

00:14:59.146 --> 00:15:00.436 A:middle
all you have to do is go to

00:15:00.506 --> 00:15:02.816 A:middle
Xcode archive button.

00:15:04.136 --> 00:15:05.746 A:middle
This will simply instruct Xcode

00:15:05.966 --> 00:15:08.576 A:middle
to generate all variants of your

00:15:09.376 --> 00:15:09.616 A:middle
project.

00:15:10.436 --> 00:15:12.536 A:middle
Once that is done simply click

00:15:12.536 --> 00:15:15.106 A:middle
on the Organizer button and that

00:15:15.106 --> 00:15:17.106 A:middle
will bring up a window that

00:15:17.106 --> 00:15:18.496 A:middle
shows all the variants generated

00:15:18.656 --> 00:15:19.356 A:middle
for your project.

00:15:22.256 --> 00:15:23.936 A:middle
And here's a window for the

00:15:23.936 --> 00:15:25.836 A:middle
garage band project that we took

00:15:25.986 --> 00:15:27.546 A:middle
to perform this exercise.

00:15:29.196 --> 00:15:30.556 A:middle
The first thing that Xcode is

00:15:30.556 --> 00:15:32.626 A:middle
going to ask is to select a type

00:15:32.626 --> 00:15:34.976 A:middle
of distribution method that you

00:15:34.976 --> 00:15:36.196 A:middle
can distribute all the variants

00:15:36.196 --> 00:15:37.176 A:middle
that it just generated.

00:15:38.596 --> 00:15:39.676 A:middle
For the purpose of this

00:15:39.746 --> 00:15:42.086 A:middle
exercise, simply select Ad Hoc

00:15:42.386 --> 00:15:43.016 A:middle
Distribution.

00:15:46.406 --> 00:15:49.086 A:middle
And on the next window, in the

00:15:49.086 --> 00:15:51.656 A:middle
App Thinning field, simply

00:15:51.656 --> 00:15:54.406 A:middle
select all compatible device

00:15:54.406 --> 00:15:54.956 A:middle
variants.

00:15:56.196 --> 00:15:58.446 A:middle
This will instruct Xcode to

00:15:58.446 --> 00:16:01.316 A:middle
export all the variants that are

00:15:58.446 --> 00:16:01.316 A:middle
export all the variants that are

00:16:01.316 --> 00:16:02.966 A:middle
targeting all the supported

00:16:03.926 --> 00:16:06.056 A:middle
device types.

00:16:06.536 --> 00:16:08.786 A:middle
Once this is done Xcode is able

00:16:08.786 --> 00:16:11.126 A:middle
to synthesize a report that

00:16:11.126 --> 00:16:12.446 A:middle
summarizes all the variants that

00:16:12.446 --> 00:16:13.276 A:middle
it just generated.

00:16:14.536 --> 00:16:15.486 A:middle
And there are a few key data

00:16:15.486 --> 00:16:16.816 A:middle
points that you can extract from

00:16:16.816 --> 00:16:18.476 A:middle
the report to help you better

00:16:18.476 --> 00:16:19.686 A:middle
understand the deployment of

00:16:19.716 --> 00:16:21.946 A:middle
your project and again help to

00:16:21.946 --> 00:16:24.106 A:middle
answer a few key questions such

00:16:24.106 --> 00:16:25.616 A:middle
as how many variants are

00:16:25.616 --> 00:16:28.016 A:middle
generated from my project, what

00:16:28.016 --> 00:16:30.526 A:middle
do their sizes look like, and

00:16:30.526 --> 00:16:32.336 A:middle
are there any rooms left for the

00:16:32.336 --> 00:16:34.026 A:middle
optimization and fine-tuning for

00:16:34.026 --> 00:16:35.186 A:middle
any particular variant.

00:16:35.836 --> 00:16:39.036 A:middle
And it turns out that actually

00:16:39.036 --> 00:16:40.686 A:middle
half the numbers generated for

00:16:40.686 --> 00:16:42.386 A:middle
the garage project that it just

00:16:42.386 --> 00:16:44.806 A:middle
exported and let's take a look

00:16:44.806 --> 00:16:45.666 A:middle
at that.

00:16:47.556 --> 00:16:50.576 A:middle
So here on this chart it's going

00:16:50.766 --> 00:16:53.216 A:middle
to show you the sizes of all the

00:16:53.216 --> 00:16:55.226 A:middle
variants generated for a select

00:16:55.336 --> 00:16:56.636 A:middle
set of device models.

00:16:58.056 --> 00:16:59.776 A:middle
And these are the sizes

00:16:59.776 --> 00:17:01.876 A:middle
generated for the iOS 11 and

00:16:59.776 --> 00:17:01.876 A:middle
generated for the iOS 11 and

00:17:01.876 --> 00:17:03.126 A:middle
earlier versions of the

00:17:03.126 --> 00:17:03.626 A:middle
variants.

00:17:05.156 --> 00:17:07.175 A:middle
Now because garage band is a

00:17:07.175 --> 00:17:08.856 A:middle
fairly large project, with tens

00:17:08.856 --> 00:17:10.316 A:middle
of thousands of image artwork

00:17:11.165 --> 00:17:12.376 A:middle
the sizes of the generated

00:17:12.445 --> 00:17:15.516 A:middle
variants range from 90 to over

00:17:15.516 --> 00:17:16.396 A:middle
100 megabytes.

00:17:19.586 --> 00:17:21.415 A:middle
And here are the numbers for the

00:17:21.415 --> 00:17:22.536 A:middle
iOS 12 variants.

00:17:23.826 --> 00:17:25.675 A:middle
And again from this graph it is

00:17:25.866 --> 00:17:27.516 A:middle
immediately obvious that we're

00:17:27.516 --> 00:17:29.896 A:middle
getting about from 10 to 20%

00:17:29.896 --> 00:17:31.976 A:middle
saving sizes in size reductions.

00:17:32.756 --> 00:17:34.556 A:middle
Now if this number looks

00:17:34.556 --> 00:17:36.786 A:middle
familiar to you by now all of

00:17:36.786 --> 00:17:38.786 A:middle
these optimizations are from all

00:17:38.786 --> 00:17:39.896 A:middle
the optimizations and

00:17:39.896 --> 00:17:40.746 A:middle
compressions that I just talked

00:17:40.746 --> 00:17:40.966 A:middle
about.

00:17:46.396 --> 00:17:47.666 A:middle
So that is image compression.

00:17:48.886 --> 00:17:50.046 A:middle
Now I'd like to hand it to my

00:17:50.046 --> 00:17:51.896 A:middle
colleague Patrick to talk about

00:17:52.556 --> 00:17:53.916 A:middle
design and production of your

00:17:53.916 --> 00:17:54.846 A:middle
application asset.

00:17:55.516 --> 00:17:58.766 A:middle
[ Applause ]

00:17:59.266 --> 00:17:59.826 A:middle
&gt;&gt; Thank you Will.

00:18:02.506 --> 00:18:03.766 A:middle
So that's great, so you just

00:18:03.766 --> 00:18:05.486 A:middle
heard about some amazing ways

00:18:05.486 --> 00:18:07.106 A:middle
that you can get your assets

00:18:07.106 --> 00:18:08.606 A:middle
improved just by using Asset

00:18:08.606 --> 00:18:09.746 A:middle
Catalogs in Xcode.

00:18:09.746 --> 00:18:11.866 A:middle
I'm going to talk a little bit

00:18:12.136 --> 00:18:13.296 A:middle
more about a few other things

00:18:13.296 --> 00:18:14.166 A:middle
that you can do with just a

00:18:14.166 --> 00:18:15.116 A:middle
little bit of effort in Asset

00:18:15.116 --> 00:18:17.366 A:middle
Catalogs to really optimize your

00:18:17.486 --> 00:18:18.726 A:middle
application's assets.

00:18:19.436 --> 00:18:21.966 A:middle
So and I'd like to begin with

00:18:22.096 --> 00:18:23.496 A:middle
design and production because

00:18:23.496 --> 00:18:24.826 A:middle
this is really where it all

00:18:24.826 --> 00:18:25.326 A:middle
begins.

00:18:28.376 --> 00:18:29.986 A:middle
So assets as you know they come

00:18:29.986 --> 00:18:31.446 A:middle
from many tools, many different

00:18:31.446 --> 00:18:32.726 A:middle
workflows, many different

00:18:32.726 --> 00:18:34.516 A:middle
sources but they have one thing

00:18:34.516 --> 00:18:35.806 A:middle
in common, they ultimately all

00:18:35.806 --> 00:18:37.206 A:middle
came from humans at some point.

00:18:38.146 --> 00:18:39.446 A:middle
And it really pays to be

00:18:39.446 --> 00:18:41.056 A:middle
organized in terms of

00:18:41.056 --> 00:18:43.086 A:middle
understanding that process of

00:18:43.086 --> 00:18:44.376 A:middle
how those assets come into your

00:18:44.376 --> 00:18:46.386 A:middle
software workflow and to pay

00:18:46.386 --> 00:18:47.086 A:middle
attention to some of those

00:18:47.086 --> 00:18:48.306 A:middle
details that can really pay big

00:18:48.306 --> 00:18:50.376 A:middle
dividends in your application

00:18:50.376 --> 00:18:50.886 A:middle
efficacy.

00:18:51.636 --> 00:18:54.796 A:middle
So the topic I'd like to talk

00:18:54.796 --> 00:18:56.746 A:middle
about first is color management,

00:18:56.886 --> 00:18:58.606 A:middle
often overlooked but still quite

00:18:58.606 --> 00:18:59.116 A:middle
essential.

00:19:01.256 --> 00:19:03.886 A:middle
So on disk an image asset is

00:19:03.926 --> 00:19:05.296 A:middle
just a bunch of boring bytes

00:19:05.946 --> 00:19:07.126 A:middle
right, it doesn't really mean

00:19:07.126 --> 00:19:09.846 A:middle
anything until you apply color

00:19:09.846 --> 00:19:10.126 A:middle
to it.

00:19:10.206 --> 00:19:11.276 A:middle
How does it get the color, how

00:19:11.276 --> 00:19:12.756 A:middle
does the system even know what

00:19:12.756 --> 00:19:13.656 A:middle
each of the numbers on those

00:19:13.656 --> 00:19:14.476 A:middle
bytes means?

00:19:14.546 --> 00:19:15.926 A:middle
Well the answer is it comes from

00:19:15.926 --> 00:19:17.836 A:middle
the color profile, that is what

00:19:17.836 --> 00:19:19.816 A:middle
actually gives each one of those

00:19:19.816 --> 00:19:21.746 A:middle
color [inaudible] a value and an

00:19:21.746 --> 00:19:23.206 A:middle
absolute colorimetric value, it

00:19:23.206 --> 00:19:24.776 A:middle
tells the system how it should

00:19:24.776 --> 00:19:25.006 A:middle
look.

00:19:25.866 --> 00:19:27.086 A:middle
As such, I want to emphasize

00:19:27.086 --> 00:19:27.996 A:middle
that it's really important to

00:19:27.996 --> 00:19:29.376 A:middle
maintain those color profiles in

00:19:29.376 --> 00:19:31.016 A:middle
your assets as source artifacts.

00:19:31.536 --> 00:19:33.016 A:middle
These are vital pieces of

00:19:33.016 --> 00:19:34.956 A:middle
metadata that keep the designer

00:19:34.956 --> 00:19:37.706 A:middle
intent intact on how that asset

00:19:37.706 --> 00:19:38.256 A:middle
was delivered.

00:19:38.696 --> 00:19:40.966 A:middle
And resist the temptation to

00:19:40.966 --> 00:19:42.476 A:middle
strip those profiles out because

00:19:42.476 --> 00:19:43.616 A:middle
you think they're just extra

00:19:43.616 --> 00:19:45.266 A:middle
metadata that you know take up a

00:19:45.266 --> 00:19:45.946 A:middle
bunch of payload.

00:19:45.946 --> 00:19:47.216 A:middle
These are source artifacts that

00:19:47.216 --> 00:19:48.166 A:middle
are checking into your project,

00:19:48.386 --> 00:19:49.706 A:middle
let the tools worry about

00:19:49.706 --> 00:19:51.066 A:middle
optimization for deployment.

00:19:53.526 --> 00:19:55.496 A:middle
So why is any of this color

00:19:55.496 --> 00:19:55.966 A:middle
stuff important?

00:19:56.106 --> 00:19:58.236 A:middle
Well the answer is our devices

00:19:58.236 --> 00:19:59.866 A:middle
have a broad range of displays

00:20:00.276 --> 00:20:01.496 A:middle
with different characteristics

00:20:01.706 --> 00:20:03.006 A:middle
and something needs to make sure

00:20:03.006 --> 00:20:04.146 A:middle
that the actual colors in your

00:20:04.146 --> 00:20:05.556 A:middle
assets match appropriately and

00:20:05.556 --> 00:20:06.406 A:middle
look appropriate and get

00:20:06.406 --> 00:20:08.086 A:middle
reproduced appropriately on all

00:20:08.086 --> 00:20:09.186 A:middle
those different displays, that's

00:20:09.186 --> 00:20:11.146 A:middle
the job of color management.

00:20:11.776 --> 00:20:13.586 A:middle
This is a computational process,

00:20:14.236 --> 00:20:15.946 A:middle
it can be done either on a CPU

00:20:15.946 --> 00:20:18.226 A:middle
or at times on a GPU, but it is

00:20:18.226 --> 00:20:18.786 A:middle
some work.

00:20:20.146 --> 00:20:22.406 A:middle
Now Asset Catalogs come into

00:20:22.406 --> 00:20:24.006 A:middle
play here because what they will

00:20:24.006 --> 00:20:25.536 A:middle
do is at build time in the

00:20:25.536 --> 00:20:27.416 A:middle
compilation process they will

00:20:27.416 --> 00:20:29.116 A:middle
perform this color matching for

00:20:29.116 --> 00:20:29.236 A:middle
you.

00:20:29.906 --> 00:20:31.116 A:middle
And this is really great because

00:20:31.116 --> 00:20:32.916 A:middle
it means that computation is not

00:20:32.916 --> 00:20:34.056 A:middle
happening on device when it

00:20:34.056 --> 00:20:34.986 A:middle
really doesn't have to.

00:20:35.856 --> 00:20:37.746 A:middle
And your assets are ready to go

00:20:37.746 --> 00:20:39.076 A:middle
on device and ready to be loaded

00:20:39.076 --> 00:20:39.986 A:middle
and ready to be displayed

00:20:39.986 --> 00:20:41.236 A:middle
without any further ado.

00:20:42.176 --> 00:20:43.566 A:middle
And as a bonus this extra

00:20:43.566 --> 00:20:44.806 A:middle
processing we do to do this

00:20:44.806 --> 00:20:46.066 A:middle
color management at build time

00:20:46.426 --> 00:20:48.276 A:middle
eliminates the profile payload

00:20:48.276 --> 00:20:49.246 A:middle
that you might've intended to

00:20:49.246 --> 00:20:51.086 A:middle
strip earlier and replaces it

00:20:51.086 --> 00:20:52.516 A:middle
with an ultra-efficient way of

00:20:52.516 --> 00:20:54.846 A:middle
annotating exactly what color

00:20:54.846 --> 00:20:56.316 A:middle
space we now have and the pixels

00:20:56.316 --> 00:20:59.416 A:middle
on disk, so that's color

00:20:59.416 --> 00:20:59.896 A:middle
management.

00:21:00.306 --> 00:21:02.346 A:middle
A related topic I'd like to talk

00:21:02.346 --> 00:21:03.886 A:middle
about here is working space.

00:21:05.316 --> 00:21:06.816 A:middle
Now by working space I'm really

00:21:06.816 --> 00:21:08.506 A:middle
referring to the environment in

00:21:08.506 --> 00:21:09.746 A:middle
which these assets actually got

00:21:09.746 --> 00:21:10.826 A:middle
originated in the first place,

00:21:10.826 --> 00:21:13.226 A:middle
this is the designer or maybe as

00:21:13.226 --> 00:21:14.796 A:middle
an engineer are working on some

00:21:14.796 --> 00:21:16.276 A:middle
artwork yourself, you're working

00:21:16.276 --> 00:21:17.596 A:middle
in a design tool, you're

00:21:17.596 --> 00:21:18.586 A:middle
creating content.

00:21:19.106 --> 00:21:21.476 A:middle
It's important in these contexts

00:21:21.476 --> 00:21:23.076 A:middle
to use consistent color settings

00:21:23.076 --> 00:21:24.196 A:middle
for all the design files that

00:21:24.196 --> 00:21:25.206 A:middle
you have for your project.

00:21:25.666 --> 00:21:27.346 A:middle
This actually is a good practice

00:21:27.346 --> 00:21:28.606 A:middle
and it actually has positive

00:21:28.606 --> 00:21:30.086 A:middle
technical benefits because it

00:21:30.086 --> 00:21:32.296 A:middle
ensures a consistency between

00:21:32.466 --> 00:21:35.176 A:middle
how you organize everything

00:21:35.176 --> 00:21:37.956 A:middle
across your application.

00:21:38.726 --> 00:21:40.836 A:middle
There are two specific formats

00:21:40.926 --> 00:21:42.576 A:middle
that are most talked about and

00:21:42.576 --> 00:21:44.726 A:middle
most recommended for creating

00:21:44.726 --> 00:21:45.686 A:middle
working design files.

00:21:46.136 --> 00:21:49.046 A:middle
sRGB 8 bits is by far the most

00:21:49.046 --> 00:21:50.506 A:middle
common, a very popular choice

00:21:50.506 --> 00:21:51.406 A:middle
and it has broadest

00:21:51.406 --> 00:21:52.686 A:middle
applicability across all of our

00:21:52.686 --> 00:21:55.166 A:middle
devices and your content types

00:21:55.166 --> 00:21:55.386 A:middle
really.

00:21:56.216 --> 00:21:58.136 A:middle
However, if you're working on a

00:21:58.136 --> 00:22:00.006 A:middle
really killer take it up to the

00:21:58.136 --> 00:22:00.006 A:middle
really killer take it up to the

00:22:00.006 --> 00:22:01.566 A:middle
next notch vibrant design like

00:22:01.616 --> 00:22:03.236 A:middle
this wonderful flower icon here

00:22:03.236 --> 00:22:05.206 A:middle
for example you may want to take

00:22:05.206 --> 00:22:06.466 A:middle
advantage of the wide color

00:22:06.466 --> 00:22:08.306 A:middle
characteristics, capabilities of

00:22:08.306 --> 00:22:11.716 A:middle
some of our devices and use the

00:22:11.716 --> 00:22:14.406 A:middle
wide color, use a generated wide

00:22:14.406 --> 00:22:15.006 A:middle
color asset.

00:22:15.006 --> 00:22:16.466 A:middle
For this we recommend you use

00:22:16.506 --> 00:22:18.096 A:middle
Display P3 as your working

00:22:18.096 --> 00:22:20.456 A:middle
profile and 16 bits per channel

00:22:20.456 --> 00:22:21.496 A:middle
to make sure you don't lose

00:22:21.496 --> 00:22:23.766 A:middle
anything in executing that

00:22:23.766 --> 00:22:24.166 A:middle
design.

00:22:25.206 --> 00:22:27.186 A:middle
Now Xcode and the platforms,

00:22:27.186 --> 00:22:28.536 A:middle
runtime platforms have a wide

00:22:28.536 --> 00:22:30.246 A:middle
range of processing and

00:22:30.246 --> 00:22:31.606 A:middle
management options to handle

00:22:31.606 --> 00:22:33.346 A:middle
this wide color asset.

00:22:34.126 --> 00:22:35.156 A:middle
I'm not going to go into too

00:22:35.156 --> 00:22:36.786 A:middle
much depth here, but I encourage

00:22:36.786 --> 00:22:38.706 A:middle
you to refer to and look at the

00:22:38.706 --> 00:22:40.226 A:middle
Working with Wide Color session

00:22:40.226 --> 00:22:42.366 A:middle
that I did two years ago where I

00:22:42.366 --> 00:22:43.576 A:middle
went into some depth on these

00:22:43.576 --> 00:22:44.526 A:middle
topics and it gives you some

00:22:44.526 --> 00:22:45.556 A:middle
more background for this.

00:22:45.976 --> 00:22:48.536 A:middle
Also, new since last year

00:22:48.536 --> 00:22:50.496 A:middle
there's a great treatment of

00:22:50.496 --> 00:22:52.046 A:middle
working with P3 assets up on the

00:22:52.046 --> 00:22:54.066 A:middle
iOS Design Resources section of

00:22:54.066 --> 00:22:55.916 A:middle
the developer.apple.com website.

00:22:58.506 --> 00:23:00.106 A:middle
Okay now let's get into some

00:22:58.506 --> 00:23:00.106 A:middle
Okay now let's get into some

00:23:00.106 --> 00:23:03.496 A:middle
actual software art here.

00:23:03.496 --> 00:23:08.396 A:middle
Okay so you may have, your UI

00:23:08.396 --> 00:23:10.296 A:middle
typically has to adapt to a lot

00:23:10.296 --> 00:23:11.436 A:middle
of different presentations and

00:23:11.436 --> 00:23:14.026 A:middle
layouts, this can commonly call

00:23:14.026 --> 00:23:15.706 A:middle
for artwork that actually needs

00:23:15.756 --> 00:23:18.576 A:middle
to stretch and grow to adapt to

00:23:18.576 --> 00:23:19.546 A:middle
those layout changes.

00:23:20.076 --> 00:23:21.126 A:middle
How do you accomplish this with

00:23:21.126 --> 00:23:21.616 A:middle
artwork?

00:23:22.506 --> 00:23:24.396 A:middle
Well the most common approach is

00:23:24.396 --> 00:23:25.976 A:middle
to identify a stretchable

00:23:25.976 --> 00:23:27.176 A:middle
portion of the image and the

00:23:27.176 --> 00:23:28.266 A:middle
unstretchable portions of the

00:23:28.266 --> 00:23:28.556 A:middle
image.

00:23:29.056 --> 00:23:29.986 A:middle
Why is there a difference?

00:23:29.986 --> 00:23:31.576 A:middle
Well considering, this is a

00:23:31.726 --> 00:23:33.136 A:middle
crude example here on the slide,

00:23:33.136 --> 00:23:34.146 A:middle
but imagine that we had a

00:23:34.146 --> 00:23:35.686 A:middle
beautiful shape to the overall

00:23:35.686 --> 00:23:36.946 A:middle
asset and like round corners

00:23:36.946 --> 00:23:37.856 A:middle
that you wanted to preserve at

00:23:37.856 --> 00:23:39.576 A:middle
all possible sizes like a frame.

00:23:40.276 --> 00:23:41.126 A:middle
You want to make sure that you

00:23:41.126 --> 00:23:42.486 A:middle
don't stretch those pieces, the

00:23:42.486 --> 00:23:44.126 A:middle
blue pieces in this slide but

00:23:44.126 --> 00:23:45.396 A:middle
you can stretch the yellow

00:23:45.396 --> 00:23:45.786 A:middle
pieces.

00:23:46.496 --> 00:23:48.286 A:middle
So traditionally the way this is

00:23:48.286 --> 00:23:50.236 A:middle
done is with the modern design

00:23:50.236 --> 00:23:52.066 A:middle
tools is to slice all these

00:23:52.256 --> 00:23:54.276 A:middle
items up, identify all these

00:23:54.276 --> 00:23:55.556 A:middle
regions, and distribute them as

00:23:55.556 --> 00:23:56.716 A:middle
individual assets.

00:23:57.096 --> 00:23:58.746 A:middle
Then the programmer would

00:23:58.746 --> 00:24:00.426 A:middle
reassemble these in the final

00:23:58.746 --> 00:24:00.426 A:middle
reassemble these in the final

00:24:00.426 --> 00:24:02.126 A:middle
design size using a draw 3 or a

00:24:02.126 --> 00:24:03.786 A:middle
nine-part API for example.

00:24:04.886 --> 00:24:07.046 A:middle
Now this works fine and has been

00:24:07.046 --> 00:24:08.066 A:middle
a tried and true practice for

00:24:08.066 --> 00:24:09.976 A:middle
many years, but it does have a

00:24:09.976 --> 00:24:10.586 A:middle
downside.

00:24:10.986 --> 00:24:12.616 A:middle
Reassembling those images at a

00:24:12.616 --> 00:24:13.996 A:middle
final size is a pretty CPU

00:24:13.996 --> 00:24:16.096 A:middle
intensive task and it can be a

00:24:16.096 --> 00:24:17.996 A:middle
bit complex and inefficient and

00:24:17.996 --> 00:24:21.176 A:middle
it's not really a good fit for

00:24:21.176 --> 00:24:23.306 A:middle
modern GPU UI pipeline like core

00:24:23.306 --> 00:24:24.126 A:middle
animation.

00:24:25.946 --> 00:24:26.926 A:middle
What's a better approach?

00:24:27.706 --> 00:24:29.156 A:middle
A better approach is to take a

00:24:29.216 --> 00:24:31.556 A:middle
single image and just provide

00:24:31.556 --> 00:24:33.666 A:middle
the stretching metadata for it

00:24:33.666 --> 00:24:34.716 A:middle
that identifies what the

00:24:34.716 --> 00:24:35.916 A:middle
stretchable portion is.

00:24:36.996 --> 00:24:38.426 A:middle
And that really enables the most

00:24:38.426 --> 00:24:40.226 A:middle
optimal smooth GPU animation of

00:24:40.226 --> 00:24:41.286 A:middle
that resizable image.

00:24:42.006 --> 00:24:44.026 A:middle
And I'm happy to tell you that

00:24:44.026 --> 00:24:45.716 A:middle
Asset Catalogs makes this really

00:24:45.716 --> 00:24:48.256 A:middle
easy to do and it's called the

00:24:48.256 --> 00:24:49.306 A:middle
Show Slicing editor.

00:24:50.636 --> 00:24:51.896 A:middle
It's really easy to work with,

00:24:52.186 --> 00:24:53.576 A:middle
you just click the Start Slicing

00:24:53.576 --> 00:24:55.646 A:middle
button and then you start

00:24:55.646 --> 00:24:57.836 A:middle
manipulating the dividing lines

00:24:57.836 --> 00:24:59.126 A:middle
here which actually lets you

00:24:59.126 --> 00:25:00.456 A:middle
identify the stretchable

00:24:59.126 --> 00:25:00.456 A:middle
identify the stretchable

00:25:00.456 --> 00:25:02.526 A:middle
portions of the image and the

00:25:02.526 --> 00:25:03.526 A:middle
unstretchable portions of the

00:25:03.526 --> 00:25:03.806 A:middle
image.

00:25:04.066 --> 00:25:05.616 A:middle
In this example the left and

00:25:05.616 --> 00:25:06.786 A:middle
right end caps and then that

00:25:06.876 --> 00:25:08.646 A:middle
middle slice that's orange is

00:25:08.646 --> 00:25:09.596 A:middle
the one that's the stretchable

00:25:09.596 --> 00:25:09.956 A:middle
piece.

00:25:10.696 --> 00:25:13.696 A:middle
Now you may notice there's a big

00:25:13.896 --> 00:25:15.446 A:middle
piece of this image that has got

00:25:15.446 --> 00:25:17.366 A:middle
this white shading over it, what

00:25:17.366 --> 00:25:18.086 A:middle
is that all about?

00:25:18.086 --> 00:25:19.736 A:middle
Well that's actually a really

00:25:19.736 --> 00:25:21.986 A:middle
interesting thing, that part of

00:25:21.986 --> 00:25:24.086 A:middle
the asset is not actually going

00:25:24.086 --> 00:25:26.106 A:middle
to be needed anymore because we

00:25:26.106 --> 00:25:27.556 A:middle
can represent any possible size

00:25:27.556 --> 00:25:28.886 A:middle
with the three remaining pieces.

00:25:29.506 --> 00:25:31.126 A:middle
Okay why is this important?

00:25:31.966 --> 00:25:33.596 A:middle
Well the nice thing is now that

00:25:33.596 --> 00:25:35.876 A:middle
Xcode knows this at build time

00:25:35.876 --> 00:25:37.866 A:middle
we can actually just take the

00:25:37.866 --> 00:25:39.066 A:middle
pieces we need and leave the

00:25:39.066 --> 00:25:40.056 A:middle
rest behind.

00:25:40.756 --> 00:25:42.306 A:middle
So that large section we don't

00:25:42.306 --> 00:25:43.126 A:middle
have to include that in the

00:25:43.126 --> 00:25:44.836 A:middle
bytes on disk that we actually

00:25:44.836 --> 00:25:46.746 A:middle
ship in your app, that's great.

00:25:47.276 --> 00:25:49.616 A:middle
And it also means that it has a

00:25:49.616 --> 00:25:50.936 A:middle
secondary benefit and this is a

00:25:50.936 --> 00:25:52.376 A:middle
more subtle one, but I really

00:25:52.376 --> 00:25:52.856 A:middle
like this.

00:25:53.366 --> 00:25:54.556 A:middle
It means that you can tell your

00:25:54.556 --> 00:25:56.376 A:middle
designer to feel totally

00:25:56.376 --> 00:25:57.956 A:middle
comfortable delivering assets at

00:25:57.956 --> 00:26:00.066 A:middle
sort of their natural size and

00:25:57.956 --> 00:26:00.066 A:middle
sort of their natural size and

00:26:00.066 --> 00:26:00.946 A:middle
don't have to worry about

00:26:01.006 --> 00:26:02.136 A:middle
pre-optimizing them to be the

00:26:02.136 --> 00:26:03.846 A:middle
smallest possible things so that

00:26:03.946 --> 00:26:05.966 A:middle
it's efficiently deployed right.

00:26:06.236 --> 00:26:07.346 A:middle
That shouldn't be the concern of

00:26:07.346 --> 00:26:08.256 A:middle
the designer it's actually much

00:26:08.256 --> 00:26:08.996 A:middle
more meaningful over the

00:26:08.996 --> 00:26:10.876 A:middle
long-term to put something in

00:26:10.876 --> 00:26:12.196 A:middle
the source code that's easy to

00:26:12.196 --> 00:26:13.946 A:middle
look at and obvious what it is

00:26:14.326 --> 00:26:15.836 A:middle
and let the tools worry about

00:26:15.836 --> 00:26:16.946 A:middle
these deployment details.

00:26:18.046 --> 00:26:20.066 A:middle
So in addition to the graphical

00:26:20.066 --> 00:26:21.506 A:middle
inspector and graphical way of

00:26:21.506 --> 00:26:22.556 A:middle
identifying the stretchable

00:26:22.556 --> 00:26:24.076 A:middle
portion there is of course also

00:26:24.076 --> 00:26:25.636 A:middle
the Show Slicing Inspector which

00:26:25.636 --> 00:26:27.006 A:middle
where you can have fine control

00:26:27.376 --> 00:26:29.396 A:middle
over these edge insets and also

00:26:29.786 --> 00:26:31.696 A:middle
control the behavior of the

00:26:31.696 --> 00:26:33.286 A:middle
centerpiece when it stretches or

00:26:33.286 --> 00:26:33.846 A:middle
tiles.

00:26:36.206 --> 00:26:38.106 A:middle
All this of course adds up to

00:26:38.106 --> 00:26:39.376 A:middle
keeping the stretching metadata

00:26:39.376 --> 00:26:41.166 A:middle
close to the artwork which will

00:26:41.166 --> 00:26:42.976 A:middle
then yield enormous benefits the

00:26:42.976 --> 00:26:44.446 A:middle
next time, which inevitably

00:26:44.446 --> 00:26:46.026 A:middle
happens, the designer comes up

00:26:46.026 --> 00:26:47.086 A:middle
with a new update to your

00:26:47.086 --> 00:26:47.536 A:middle
design.

00:26:48.196 --> 00:26:49.716 A:middle
Now you can update everything in

00:26:49.716 --> 00:26:50.866 A:middle
one place and don't have to

00:26:50.866 --> 00:26:52.286 A:middle
remember the five or six places

00:26:52.286 --> 00:26:53.406 A:middle
in code where you might have a

00:26:53.406 --> 00:26:54.736 A:middle
hang code of the edge insets

00:26:54.776 --> 00:26:57.196 A:middle
previously, now it's all tied

00:26:57.196 --> 00:26:58.336 A:middle
together in one place.

00:26:58.706 --> 00:27:00.976 A:middle
Thank you.

00:26:58.706 --> 00:27:00.976 A:middle
Thank you.

00:27:01.516 --> 00:27:04.576 A:middle
[ Applause ]

00:27:05.076 --> 00:27:06.166 A:middle
Okay next up I'd like to talk

00:27:06.166 --> 00:27:07.166 A:middle
about vector assets.

00:27:08.046 --> 00:27:10.866 A:middle
So because our displays on all

00:27:10.866 --> 00:27:12.586 A:middle
of our products have a variety

00:27:12.586 --> 00:27:13.656 A:middle
of different resolutions you're

00:27:13.656 --> 00:27:15.016 A:middle
probably very used to delivering

00:27:15.016 --> 00:27:17.156 A:middle
1x, 2x, 3x depending on what

00:27:17.266 --> 00:27:18.196 A:middle
platform you're targeting,

00:27:18.656 --> 00:27:19.526 A:middle
distinct assets.

00:27:19.956 --> 00:27:21.326 A:middle
And that's fine and works really

00:27:21.326 --> 00:27:23.646 A:middle
well, but it's kind of a mess to

00:27:23.646 --> 00:27:25.196 A:middle
have to deliver three or two or

00:27:25.196 --> 00:27:26.486 A:middle
three assets every time for a

00:27:26.486 --> 00:27:28.516 A:middle
single design for no other

00:27:28.516 --> 00:27:29.526 A:middle
reason than just resolution.

00:27:30.886 --> 00:27:32.296 A:middle
What if you can actually get

00:27:32.296 --> 00:27:33.816 A:middle
away with this with just one

00:27:33.816 --> 00:27:34.106 A:middle
asset?

00:27:34.106 --> 00:27:35.196 A:middle
Well you can and we've been

00:27:35.196 --> 00:27:36.396 A:middle
supporting vector assets in

00:27:36.396 --> 00:27:37.556 A:middle
Asset Catalogs for a number of

00:27:37.556 --> 00:27:39.236 A:middle
years now in the PDF format.

00:27:39.886 --> 00:27:42.806 A:middle
And with Xcode Asset Catalogs

00:27:43.746 --> 00:27:45.876 A:middle
you can actually supply a PDF

00:27:45.956 --> 00:27:48.656 A:middle
and Xcode will generate and

00:27:48.656 --> 00:27:50.926 A:middle
rasterize that PDF into all of

00:27:50.926 --> 00:27:52.496 A:middle
the applicable scale factors

00:27:53.286 --> 00:27:54.426 A:middle
that your app is currently

00:27:54.426 --> 00:27:55.796 A:middle
targeting depending on platform.

00:27:56.486 --> 00:27:58.196 A:middle
And that's really great because

00:27:58.196 --> 00:27:59.596 A:middle
it means you don't have to worry

00:27:59.596 --> 00:28:02.086 A:middle
about paying any cost at runtime

00:27:59.596 --> 00:28:02.086 A:middle
about paying any cost at runtime

00:28:02.086 --> 00:28:03.086 A:middle
on device to render an

00:28:03.086 --> 00:28:04.086 A:middle
arbitrary, potentially

00:28:04.086 --> 00:28:06.626 A:middle
arbitrarily complex PDF vector

00:28:06.626 --> 00:28:06.916 A:middle
asset.

00:28:08.096 --> 00:28:09.216 A:middle
So it gives you some peace of

00:28:09.216 --> 00:28:10.366 A:middle
mind about using vectors.

00:28:11.486 --> 00:28:13.556 A:middle
Now you may have a scenario

00:28:13.556 --> 00:28:15.026 A:middle
where actually you want to

00:28:15.026 --> 00:28:16.836 A:middle
present your assets in some

00:28:16.946 --> 00:28:18.916 A:middle
circumstances at a different

00:28:18.916 --> 00:28:20.956 A:middle
size or scale than the most

00:28:20.956 --> 00:28:22.166 A:middle
common natural size that the

00:28:22.166 --> 00:28:23.086 A:middle
asset was designed for.

00:28:23.776 --> 00:28:26.836 A:middle
Well new since last year in iOS

00:28:26.836 --> 00:28:29.146 A:middle
11 and Xcode 9 we now allow you

00:28:29.146 --> 00:28:31.496 A:middle
to preserve the vector data so

00:28:31.496 --> 00:28:35.256 A:middle
that when that image is put into

00:28:35.256 --> 00:28:37.216 A:middle
an image view that is larger

00:28:37.216 --> 00:28:38.356 A:middle
than the natural size of that

00:28:38.356 --> 00:28:39.766 A:middle
asset it'll go ahead and find

00:28:39.766 --> 00:28:41.456 A:middle
that original PDF vector data,

00:28:41.846 --> 00:28:43.656 A:middle
which by the way we've linked it

00:28:43.656 --> 00:28:44.746 A:middle
out and cleaned of any

00:28:44.746 --> 00:28:46.426 A:middle
extraneous metadata and profiles

00:28:46.426 --> 00:28:47.526 A:middle
as well so it's nice and tight

00:28:47.526 --> 00:28:49.186 A:middle
and it's slim as possible.

00:28:49.896 --> 00:28:51.316 A:middle
And we'll go ahead and

00:28:51.316 --> 00:28:52.706 A:middle
re-rasterize that at runtime but

00:28:52.706 --> 00:28:53.966 A:middle
only if you're going beyond the

00:28:53.966 --> 00:28:55.096 A:middle
natural size, otherwise we'll

00:28:55.096 --> 00:28:57.216 A:middle
use that optimized prerendered

00:28:57.216 --> 00:28:57.596 A:middle
bitmap.

00:28:58.426 --> 00:28:59.836 A:middle
So this is great because it

00:28:59.836 --> 00:29:00.866 A:middle
means your app might be able to

00:28:59.836 --> 00:29:00.866 A:middle
means your app might be able to

00:29:00.866 --> 00:29:02.616 A:middle
more flexibly respond to dynamic

00:29:02.646 --> 00:29:06.216 A:middle
type and automatically your

00:29:06.216 --> 00:29:07.366 A:middle
images will look more crisply

00:29:07.366 --> 00:29:09.776 A:middle
when you resize your UIImage

00:29:09.776 --> 00:29:09.966 A:middle
view.

00:29:12.356 --> 00:29:13.616 A:middle
That's vector assets.

00:29:15.136 --> 00:29:16.766 A:middle
Okay next, I'd like to talk a

00:29:16.766 --> 00:29:21.726 A:middle
bit about designing for 2x, 2x

00:29:21.726 --> 00:29:24.376 A:middle
commonly known as retina is the

00:29:24.376 --> 00:29:26.266 A:middle
most popular and common display

00:29:26.266 --> 00:29:27.796 A:middle
density that your apps are

00:29:27.796 --> 00:29:30.606 A:middle
probably being experienced on.

00:29:31.076 --> 00:29:33.566 A:middle
And it's great right, it was a

00:29:33.566 --> 00:29:34.976 A:middle
huge step forward, however,

00:29:35.626 --> 00:29:38.686 A:middle
there are still cases where you

00:29:38.686 --> 00:29:42.156 A:middle
can have designs where a stroke

00:29:42.156 --> 00:29:43.616 A:middle
or an edge might land on a

00:29:43.616 --> 00:29:45.196 A:middle
fractional pixel boundary and

00:29:45.196 --> 00:29:46.236 A:middle
result in a fuzzy edge.

00:29:46.236 --> 00:29:48.386 A:middle
It's still not high-resolution

00:29:48.386 --> 00:29:49.256 A:middle
enough that you won't notice a

00:29:49.256 --> 00:29:50.376 A:middle
difference between a sharp edge

00:29:50.376 --> 00:29:51.046 A:middle
and a fuzzy edge.

00:29:52.256 --> 00:29:53.576 A:middle
And this can still be a

00:29:53.576 --> 00:29:56.326 A:middle
challenge in designing assets at

00:29:56.326 --> 00:29:56.786 A:middle
times.

00:29:58.376 --> 00:30:00.426 A:middle
Well what are some techniques

00:29:58.376 --> 00:30:00.426 A:middle
Well what are some techniques

00:30:00.426 --> 00:30:01.736 A:middle
that can be used to address

00:30:01.736 --> 00:30:01.976 A:middle
this?

00:30:03.816 --> 00:30:06.106 A:middle
One common design technique is

00:30:06.106 --> 00:30:07.396 A:middle
to turn on point boundary

00:30:07.396 --> 00:30:08.796 A:middle
snapping in your vector design

00:30:08.796 --> 00:30:11.806 A:middle
tool, set up a grid at one-point

00:30:11.806 --> 00:30:13.496 A:middle
intervals and turn on snapping

00:30:13.496 --> 00:30:15.106 A:middle
so that when you adjust your

00:30:15.106 --> 00:30:16.496 A:middle
shape or your control points

00:30:16.496 --> 00:30:17.366 A:middle
that you know that they can

00:30:17.366 --> 00:30:18.876 A:middle
snap, when they snap to a

00:30:18.876 --> 00:30:19.726 A:middle
boundary you know that that's

00:30:19.726 --> 00:30:23.416 A:middle
going to be a pixel boundary and

00:30:23.416 --> 00:30:23.916 A:middle
that's great.

00:30:24.836 --> 00:30:26.506 A:middle
But there's still some cases

00:30:26.506 --> 00:30:27.866 A:middle
that you might have with a

00:30:27.866 --> 00:30:29.626 A:middle
design where some of the edges

00:30:29.626 --> 00:30:31.476 A:middle
are still perhaps landing

00:30:31.606 --> 00:30:34.596 A:middle
somewhere in between one and two

00:30:34.596 --> 00:30:35.546 A:middle
and you're not sure, but you'd

00:30:35.546 --> 00:30:37.086 A:middle
really like to know, especially

00:30:37.086 --> 00:30:38.476 A:middle
on a retina 2x device what's

00:30:38.476 --> 00:30:39.876 A:middle
going to happen there and can I

00:30:39.876 --> 00:30:42.216 A:middle
optimize further for the actual

00:30:42.216 --> 00:30:42.846 A:middle
display density.

00:30:43.466 --> 00:30:44.976 A:middle
Well what you can do is you can

00:30:44.976 --> 00:30:46.456 A:middle
actually use a 2x grid, make

00:30:46.456 --> 00:30:48.206 A:middle
your asset twice as nominally

00:30:48.206 --> 00:30:49.636 A:middle
big in your vector design tool

00:30:50.126 --> 00:30:52.216 A:middle
and make that grid now be a

00:30:52.216 --> 00:30:54.566 A:middle
one-pixel grid where every two

00:30:54.566 --> 00:30:56.206 A:middle
points, every two units is going

00:30:56.206 --> 00:30:57.416 A:middle
to be one point for retina.

00:30:58.676 --> 00:31:01.066 A:middle
And then adjust your assets and

00:30:58.676 --> 00:31:01.066 A:middle
And then adjust your assets and

00:31:01.066 --> 00:31:03.556 A:middle
use the point snapping to adjust

00:31:03.556 --> 00:31:05.336 A:middle
your strokes and edges to fit

00:31:05.406 --> 00:31:05.656 A:middle
there.

00:31:06.256 --> 00:31:08.686 A:middle
Okay that's great, now what do

00:31:08.686 --> 00:31:09.556 A:middle
you do with this thing once

00:31:09.556 --> 00:31:10.996 A:middle
you've got it, it's too big

00:31:10.996 --> 00:31:11.716 A:middle
right, it doesn't work?

00:31:12.286 --> 00:31:14.496 A:middle
Yes it does, all you have to do

00:31:14.496 --> 00:31:16.196 A:middle
is just drop it into the 2x slot

00:31:16.476 --> 00:31:18.936 A:middle
in the Asset Catalog scales bins

00:31:19.316 --> 00:31:20.716 A:middle
and that will automatically

00:31:20.716 --> 00:31:22.686 A:middle
enable Xcode to process that

00:31:22.686 --> 00:31:24.266 A:middle
artwork, realize it's actually a

00:31:24.266 --> 00:31:25.956 A:middle
2x piece of artwork, it's

00:31:25.956 --> 00:31:27.246 A:middle
slightly too big, one point is

00:31:27.246 --> 00:31:29.256 A:middle
not equal to two pixels of

00:31:29.256 --> 00:31:30.816 A:middle
retina, but rather the other way

00:31:30.816 --> 00:31:31.146 A:middle
around.

00:31:31.386 --> 00:31:32.746 A:middle
We'll do all the math, we'll

00:31:32.746 --> 00:31:34.776 A:middle
render all the right rasterized

00:31:34.776 --> 00:31:35.826 A:middle
bitmaps for all the other scale

00:31:35.826 --> 00:31:37.926 A:middle
factors and handle that for you.

00:31:37.926 --> 00:31:40.106 A:middle
Freeing the designer to use that

00:31:40.106 --> 00:31:41.626 A:middle
2x grid which can be rather

00:31:41.626 --> 00:31:41.986 A:middle
helpful.

00:31:43.746 --> 00:31:45.656 A:middle
Of course, if the automatic

00:31:45.656 --> 00:31:46.506 A:middle
scaling that we do is

00:31:46.506 --> 00:31:47.726 A:middle
insufficient or still presents

00:31:47.796 --> 00:31:50.756 A:middle
problems in some areas, you can

00:31:50.756 --> 00:31:52.276 A:middle
have ultimate control of your

00:31:52.276 --> 00:31:54.366 A:middle
results as always by dropping in

00:31:54.366 --> 00:31:55.696 A:middle
hinted bitmaps into the

00:31:55.696 --> 00:31:56.956 A:middle
appropriate scale factor bins

00:31:57.116 --> 00:31:58.586 A:middle
and we'll go ahead and use that

00:31:58.586 --> 00:31:59.726 A:middle
and prefer that over the

00:31:59.976 --> 00:32:02.656 A:middle
generated PDF rasterizations.

00:31:59.976 --> 00:32:02.656 A:middle
generated PDF rasterizations.

00:32:04.916 --> 00:32:07.656 A:middle
Okay so that's a bit about

00:32:07.656 --> 00:32:08.856 A:middle
design and production ends of

00:32:08.856 --> 00:32:10.646 A:middle
things, now let's talk about

00:32:10.736 --> 00:32:11.986 A:middle
cataloging and sort of the

00:32:11.986 --> 00:32:13.906 A:middle
organizational aspects once

00:32:13.906 --> 00:32:15.086 A:middle
you're in Xcode.

00:32:16.026 --> 00:32:17.746 A:middle
So those of you who have played

00:32:17.746 --> 00:32:19.446 A:middle
around a little bit with Xcode

00:32:19.446 --> 00:32:20.576 A:middle
Asset Catalogs it can be a bit

00:32:20.576 --> 00:32:22.276 A:middle
overwhelming to see how many

00:32:22.276 --> 00:32:23.626 A:middle
things there are in front of you

00:32:23.626 --> 00:32:25.286 A:middle
there and what you're supposed

00:32:25.286 --> 00:32:26.556 A:middle
to use and how many options

00:32:26.556 --> 00:32:26.806 A:middle
there are.

00:32:27.366 --> 00:32:29.236 A:middle
Well I'm here to tell you, you

00:32:29.576 --> 00:32:31.766 A:middle
really should only use what

00:32:31.766 --> 00:32:33.836 A:middle
makes sense, what makes sense

00:32:33.836 --> 00:32:36.226 A:middle
for your project and what makes

00:32:36.226 --> 00:32:37.346 A:middle
sense for the content that

00:32:37.346 --> 00:32:37.966 A:middle
you're working with.

00:32:38.476 --> 00:32:39.786 A:middle
There's a lot of options here

00:32:39.786 --> 00:32:41.176 A:middle
and we've made a very powerful

00:32:41.176 --> 00:32:42.976 A:middle
engine and organizational scheme

00:32:42.976 --> 00:32:43.576 A:middle
here that has lots of

00:32:43.576 --> 00:32:44.976 A:middle
capabilities, but you really

00:32:44.976 --> 00:32:46.296 A:middle
need to fit it to the need that

00:32:46.296 --> 00:32:47.976 A:middle
you have and use the simple,

00:32:47.976 --> 00:32:49.196 A:middle
start with simple first and then

00:32:49.196 --> 00:32:49.776 A:middle
go from there.

00:32:50.136 --> 00:32:53.906 A:middle
So I'd like to talk about two

00:32:53.966 --> 00:32:55.316 A:middle
organizational techniques that

00:32:55.346 --> 00:32:57.396 A:middle
can help in this area.

00:32:58.216 --> 00:33:00.966 A:middle
The first is bundles, now why

00:32:58.216 --> 00:33:00.966 A:middle
The first is bundles, now why

00:33:00.966 --> 00:33:02.166 A:middle
would I be talking about bundles

00:33:02.166 --> 00:33:03.326 A:middle
in an asset talk that seems

00:33:03.326 --> 00:33:04.146 A:middle
rather incongruous?

00:33:04.146 --> 00:33:05.326 A:middle
Well I'm really trying to

00:33:05.326 --> 00:33:08.696 A:middle
address large projects.

00:33:09.186 --> 00:33:11.096 A:middle
So if you have a large project

00:33:11.526 --> 00:33:13.426 A:middle
where there are perhaps multiple

00:33:13.426 --> 00:33:14.756 A:middle
frameworks involved, maybe you

00:33:14.756 --> 00:33:16.186 A:middle
even work with multiple teams.

00:33:17.066 --> 00:33:19.106 A:middle
Dealing with assets can

00:33:19.106 --> 00:33:20.406 A:middle
sometimes be a pain if you have

00:33:20.576 --> 00:33:21.776 A:middle
to pour them all into the main

00:33:21.776 --> 00:33:23.406 A:middle
app bundle and have to manage

00:33:23.406 --> 00:33:25.086 A:middle
them all there and make sure

00:33:25.086 --> 00:33:27.946 A:middle
names don't conflict and

00:33:28.626 --> 00:33:30.026 A:middle
appropriately sourced to the

00:33:30.026 --> 00:33:30.836 A:middle
relevant parts of your

00:33:30.836 --> 00:33:31.306 A:middle
application.

00:33:31.886 --> 00:33:33.136 A:middle
One of the ways you can solve

00:33:33.136 --> 00:33:34.516 A:middle
this problem is by building

00:33:34.516 --> 00:33:36.056 A:middle
those assets into multiple

00:33:36.056 --> 00:33:38.096 A:middle
bundles because Xcode will

00:33:38.096 --> 00:33:39.536 A:middle
always generate a unique Asset

00:33:39.536 --> 00:33:40.966 A:middle
Catalog deployment artifact per

00:33:40.966 --> 00:33:41.816 A:middle
bundle or target.

00:33:42.626 --> 00:33:43.996 A:middle
So for example, consider

00:33:43.996 --> 00:33:46.036 A:middle
creating an artwork only bundle

00:33:46.286 --> 00:33:47.516 A:middle
as an example and this can be

00:33:47.516 --> 00:33:49.716 A:middle
for a good reuse strategy for

00:33:49.716 --> 00:33:50.786 A:middle
example to have a single

00:33:50.786 --> 00:33:52.836 A:middle
consolidated component that

00:33:52.836 --> 00:33:54.426 A:middle
contains all your artwork, that

00:33:54.426 --> 00:33:56.826 A:middle
has a consistent namespace, that

00:33:56.986 --> 00:33:59.456 A:middle
can provide images to the rest

00:33:59.456 --> 00:34:00.556 A:middle
-- to the other components of

00:33:59.456 --> 00:34:00.556 A:middle
-- to the other components of

00:34:00.556 --> 00:34:01.406 A:middle
your application.

00:34:02.756 --> 00:34:04.616 A:middle
How do you retrieve these?

00:34:04.946 --> 00:34:07.976 A:middle
It's simple, you just use the

00:34:08.036 --> 00:34:10.235 A:middle
image constructors like UIImage

00:34:10.235 --> 00:34:12.025 A:middle
named in bundle compatible with

00:34:12.025 --> 00:34:13.596 A:middle
trait collection that gives the

00:34:13.596 --> 00:34:14.576 A:middle
bundle argument.

00:34:14.576 --> 00:34:15.866 A:middle
On the macOS side of course

00:34:15.866 --> 00:34:17.226 A:middle
there's the NS bundle category

00:34:17.505 --> 00:34:18.436 A:middle
image for resource.

00:34:19.726 --> 00:34:21.806 A:middle
And keep in mind, that each of

00:34:21.806 --> 00:34:23.295 A:middle
these bundles provide a unique

00:34:23.295 --> 00:34:25.795 A:middle
namespace, so within them the

00:34:25.795 --> 00:34:27.536 A:middle
names have to be unique.

00:34:27.536 --> 00:34:29.946 A:middle
But across bundles you feel free

00:34:29.946 --> 00:34:31.626 A:middle
to use any naming convention you

00:34:31.626 --> 00:34:31.866 A:middle
like.

00:34:34.255 --> 00:34:36.235 A:middle
So speaking of namespaces,

00:34:36.235 --> 00:34:37.496 A:middle
there's another feature I'd like

00:34:37.496 --> 00:34:39.496 A:middle
to call attention to and another

00:34:39.556 --> 00:34:41.016 A:middle
challenge with large projects.

00:34:41.366 --> 00:34:43.815 A:middle
Now in this case the problem I'm

00:34:43.815 --> 00:34:46.156 A:middle
addressing is large collections

00:34:46.585 --> 00:34:47.446 A:middle
where they might have some

00:34:47.446 --> 00:34:49.806 A:middle
structure in them right.

00:34:50.286 --> 00:34:52.266 A:middle
So let's imagine you have an app

00:34:52.266 --> 00:34:53.775 A:middle
that deals with 50 different

00:34:53.775 --> 00:34:55.216 A:middle
rooms, each one of those rooms

00:34:55.216 --> 00:34:56.585 A:middle
has a table and a chair in it

00:34:56.585 --> 00:34:57.656 A:middle
and there's assets for each of

00:34:57.656 --> 00:34:57.976 A:middle
those.

00:34:58.216 --> 00:34:59.326 A:middle
In your code you'd really like

00:34:59.326 --> 00:35:00.516 A:middle
to refer to them as table and

00:34:59.326 --> 00:35:00.516 A:middle
to refer to them as table and

00:35:00.516 --> 00:35:01.516 A:middle
chair, that seems like the most

00:35:01.516 --> 00:35:02.886 A:middle
natural thing but unfortunately

00:35:02.886 --> 00:35:03.976 A:middle
there's 50 of them what are you

00:35:03.976 --> 00:35:05.076 A:middle
going to do.

00:35:05.336 --> 00:35:06.616 A:middle
One alternative is to just

00:35:06.616 --> 00:35:08.616 A:middle
generate a naming convention of

00:35:08.616 --> 00:35:09.856 A:middle
some form and figure out how to

00:35:09.856 --> 00:35:11.776 A:middle
demux that in your code, that's

00:35:11.816 --> 00:35:12.326 A:middle
not ideal.

00:35:13.186 --> 00:35:14.696 A:middle
One solution that Asset Catalogs

00:35:14.696 --> 00:35:16.726 A:middle
can offer is to use the provide

00:35:16.726 --> 00:35:18.236 A:middle
namespace option.

00:35:19.116 --> 00:35:21.376 A:middle
By checking this box after

00:35:21.506 --> 00:35:23.186 A:middle
organizing your artwork into a

00:35:23.186 --> 00:35:25.666 A:middle
folder, we will automatically

00:35:25.666 --> 00:35:28.126 A:middle
prepend the folder name into

00:35:29.456 --> 00:35:32.096 A:middle
each image's record in the Asset

00:35:32.096 --> 00:35:34.406 A:middle
Catalog, which you then use to

00:35:34.406 --> 00:35:34.856 A:middle
retrieve it.

00:35:35.486 --> 00:35:36.816 A:middle
This can be a nice way to

00:35:36.816 --> 00:35:38.596 A:middle
organize large structure

00:35:38.596 --> 00:35:39.616 A:middle
collections of assets.

00:35:40.776 --> 00:35:44.076 A:middle
Okay so we talked about

00:35:44.076 --> 00:35:46.786 A:middle
cataloging, now let's talk about

00:35:46.786 --> 00:35:47.806 A:middle
some exciting stuff around

00:35:47.806 --> 00:35:49.806 A:middle
deployment which is really where

00:35:49.806 --> 00:35:51.316 A:middle
the exciting stuff starts to

00:35:52.106 --> 00:35:53.636 A:middle
kick in.

00:35:53.846 --> 00:35:55.136 A:middle
So Will talked about App

00:35:55.136 --> 00:35:56.926 A:middle
Thinning, I'd like to give some

00:35:56.926 --> 00:35:58.226 A:middle
overall perspective on what we

00:35:58.226 --> 00:35:59.596 A:middle
try to do with Asset Catalogs in

00:35:59.596 --> 00:36:00.036 A:middle
App Thinning.

00:35:59.596 --> 00:36:00.036 A:middle
App Thinning.

00:36:00.506 --> 00:36:01.886 A:middle
So overall what you're trying to

00:36:01.886 --> 00:36:03.806 A:middle
do is you're providing all the

00:36:03.806 --> 00:36:04.796 A:middle
content variants for your

00:36:04.796 --> 00:36:06.136 A:middle
application, you're adapting

00:36:06.136 --> 00:36:07.836 A:middle
your content to the needs of the

00:36:07.836 --> 00:36:09.236 A:middle
various devices your app runs

00:36:09.236 --> 00:36:09.366 A:middle
on.

00:36:09.366 --> 00:36:10.996 A:middle
The most common technique for

00:36:10.996 --> 00:36:12.446 A:middle
doing this is you know split

00:36:12.446 --> 00:36:14.566 A:middle
across product family iPad or

00:36:14.566 --> 00:36:18.856 A:middle
iPhone, tv or watch or different

00:36:18.856 --> 00:36:21.146 A:middle
resolutions, 3x and 2x.

00:36:21.886 --> 00:36:23.056 A:middle
You provide all those content

00:36:23.056 --> 00:36:24.306 A:middle
variants to effectively adapt

00:36:24.306 --> 00:36:25.936 A:middle
your content and then App

00:36:25.936 --> 00:36:27.096 A:middle
Thinning is responsible for

00:36:27.096 --> 00:36:28.776 A:middle
making sure that we just select

00:36:28.776 --> 00:36:30.346 A:middle
the right subset of that content

00:36:30.346 --> 00:36:31.176 A:middle
that's appropriate for the

00:36:31.176 --> 00:36:32.586 A:middle
device that your customer is

00:36:32.586 --> 00:36:35.076 A:middle
running the application on.

00:36:36.476 --> 00:36:37.566 A:middle
Well I'd like to talk about a

00:36:37.886 --> 00:36:39.176 A:middle
different way you can approach

00:36:39.176 --> 00:36:40.306 A:middle
the same sort of content

00:36:40.306 --> 00:36:42.176 A:middle
adaptation and that is

00:36:42.176 --> 00:36:43.266 A:middle
performance classes.

00:36:43.266 --> 00:36:44.266 A:middle
It's a different way of looking

00:36:44.266 --> 00:36:45.346 A:middle
at the exact same problem.

00:36:46.136 --> 00:36:48.356 A:middle
What if the entire product mix

00:36:48.956 --> 00:36:50.506 A:middle
the way your application saw

00:36:50.506 --> 00:36:53.516 A:middle
that continuum was instead

00:36:53.586 --> 00:36:54.836 A:middle
segmented by performance

00:36:54.836 --> 00:36:56.826 A:middle
capability, not by other

00:36:56.826 --> 00:36:58.096 A:middle
characteristics?

00:36:58.886 --> 00:36:59.786 A:middle
Well this is what you can do

00:36:59.786 --> 00:37:00.736 A:middle
with Asset Catalogs.

00:36:59.786 --> 00:37:00.736 A:middle
with Asset Catalogs.

00:37:01.536 --> 00:37:03.246 A:middle
There's such a broad range of

00:37:03.246 --> 00:37:04.736 A:middle
hardware capabilities between

00:37:04.736 --> 00:37:06.406 A:middle
the supported devices that we

00:37:06.406 --> 00:37:07.816 A:middle
have, even if you go back a few

00:37:07.816 --> 00:37:09.906 A:middle
iOS, I mean all the way from say

00:37:09.906 --> 00:37:11.586 A:middle
an iPhone 5 up to the latest

00:37:11.586 --> 00:37:13.636 A:middle
iPhone 10, that's a huge range

00:37:13.636 --> 00:37:14.796 A:middle
of performance capability.

00:37:15.706 --> 00:37:16.716 A:middle
Wouldn't it be nice to take

00:37:16.716 --> 00:37:19.246 A:middle
advantage of that and avoid the

00:37:19.326 --> 00:37:21.296 A:middle
needing to constrain your app to

00:37:21.296 --> 00:37:22.996 A:middle
the least capable device that

00:37:22.996 --> 00:37:24.006 A:middle
your application needs to

00:37:24.006 --> 00:37:24.436 A:middle
support?

00:37:25.166 --> 00:37:26.766 A:middle
That's the goal here to be able

00:37:26.766 --> 00:37:28.986 A:middle
to have your cake and eat it too

00:37:29.016 --> 00:37:30.536 A:middle
and to do that you can solve it

00:37:30.536 --> 00:37:31.796 A:middle
with adaptive resources.

00:37:32.176 --> 00:37:33.316 A:middle
I'm going to tell you how now.

00:37:34.636 --> 00:37:36.616 A:middle
So there are two main ways that

00:37:36.616 --> 00:37:37.616 A:middle
we divide the performance

00:37:37.616 --> 00:37:38.116 A:middle
continuum.

00:37:38.116 --> 00:37:39.756 A:middle
The first is memory classes and

00:37:39.756 --> 00:37:40.736 A:middle
this is perhaps the most

00:37:40.736 --> 00:37:41.416 A:middle
important one.

00:37:41.776 --> 00:37:43.556 A:middle
We have four memory tiers, 1 GB

00:37:43.556 --> 00:37:45.526 A:middle
through 4 GB and that

00:37:45.526 --> 00:37:46.836 A:middle
corresponds to the installed

00:37:46.836 --> 00:37:48.956 A:middle
memory on the various devices

00:37:48.956 --> 00:37:50.026 A:middle
and again this is across our

00:37:50.026 --> 00:37:51.536 A:middle
entire product mix, it doesn't

00:37:51.536 --> 00:37:53.266 A:middle
matter what it is, it's in one

00:37:53.266 --> 00:37:53.786 A:middle
of these bins.

00:37:55.686 --> 00:37:59.086 A:middle
The second access of collection

00:37:59.436 --> 00:38:00.956 A:middle
is graphics classes.

00:37:59.436 --> 00:38:00.956 A:middle
is graphics classes.

00:38:00.956 --> 00:38:02.826 A:middle
Now these actually correspond to

00:38:02.826 --> 00:38:03.586 A:middle
two things.

00:38:04.056 --> 00:38:06.536 A:middle
One, they correspond to Metal

00:38:06.536 --> 00:38:08.176 A:middle
feature family sets, which if

00:38:08.176 --> 00:38:09.066 A:middle
you're a Metal programmer you

00:38:09.066 --> 00:38:10.056 A:middle
may be familiar with, this is

00:38:10.056 --> 00:38:11.326 A:middle
the GPU family concept.

00:38:11.886 --> 00:38:13.116 A:middle
But they actually correspond

00:38:13.116 --> 00:38:15.096 A:middle
also exactly with a particular

00:38:15.396 --> 00:38:17.216 A:middle
processor revision in your

00:38:17.216 --> 00:38:17.656 A:middle
device.

00:38:18.326 --> 00:38:20.506 A:middle
So Metal 1 corresponds to Apple

00:38:20.616 --> 00:38:22.766 A:middle
A7 all the way through Metal 4

00:38:22.766 --> 00:38:24.236 A:middle
which is the Apple A11

00:38:24.236 --> 00:38:24.806 A:middle
processor.

00:38:25.376 --> 00:38:27.536 A:middle
And we allow you to catalog and

00:38:27.536 --> 00:38:29.526 A:middle
route assets to each of these

00:38:29.526 --> 00:38:31.506 A:middle
particular graphics classes.

00:38:33.006 --> 00:38:34.356 A:middle
That can be pretty powerful by

00:38:34.356 --> 00:38:36.186 A:middle
itself either one of those, but

00:38:36.336 --> 00:38:38.046 A:middle
where it gets really interesting

00:38:38.046 --> 00:38:40.756 A:middle
is when you can combine these

00:38:40.756 --> 00:38:42.436 A:middle
two traits together to form a

00:38:42.436 --> 00:38:44.416 A:middle
full capability matrix that you

00:38:44.416 --> 00:38:46.346 A:middle
can really finally calibrate how

00:38:46.346 --> 00:38:47.906 A:middle
you want to adapt your assets to

00:38:48.176 --> 00:38:49.616 A:middle
this hardware landscape.

00:38:52.086 --> 00:38:53.146 A:middle
Now how does this work?

00:38:54.036 --> 00:38:56.326 A:middle
I'd like to explain this to you

00:38:56.326 --> 00:38:57.566 A:middle
by walking through a simple

00:38:57.566 --> 00:38:58.886 A:middle
example and this is really key

00:38:58.886 --> 00:39:00.206 A:middle
to understand how we do things,

00:38:58.886 --> 00:39:00.206 A:middle
to understand how we do things,

00:39:00.206 --> 00:39:01.656 A:middle
it helps you understand how you

00:39:01.656 --> 00:39:02.576 A:middle
might be able to use it.

00:39:03.206 --> 00:39:04.746 A:middle
So in this example, we've

00:39:04.856 --> 00:39:05.906 A:middle
provided three specialized

00:39:05.906 --> 00:39:07.426 A:middle
assets, one any any which is

00:39:07.426 --> 00:39:09.276 A:middle
just the backstop for the lower

00:39:09.276 --> 00:39:11.026 A:middle
capability devices.

00:39:11.266 --> 00:39:12.296 A:middle
And then we provide two

00:39:12.296 --> 00:39:14.506 A:middle
optimized assets, one for 3 GB

00:39:14.506 --> 00:39:16.376 A:middle
devices with Metal 3 or better

00:39:16.836 --> 00:39:19.036 A:middle
and one for 2 GB devices with

00:39:19.036 --> 00:39:19.546 A:middle
Metal 4.

00:39:20.486 --> 00:39:22.866 A:middle
So let's imagine that I'm

00:39:22.866 --> 00:39:24.046 A:middle
selecting the asset from the

00:39:24.046 --> 00:39:25.806 A:middle
context or the viewpoint of an

00:39:25.926 --> 00:39:27.006 A:middle
iPhone 8 Plus.

00:39:27.386 --> 00:39:29.686 A:middle
So I'm 4 GB, Metal 4, that's

00:39:29.686 --> 00:39:31.656 A:middle
where I'm starting and I'm

00:39:31.656 --> 00:39:33.696 A:middle
searching, I'm finding nothing

00:39:33.726 --> 00:39:35.046 A:middle
in 4 GB memory tier.

00:39:36.136 --> 00:39:38.926 A:middle
So next, I'm going to go drop

00:39:38.926 --> 00:39:40.726 A:middle
down a memory tier and look for

00:39:40.726 --> 00:39:42.236 A:middle
anything that can be found in 3

00:39:42.236 --> 00:39:42.996 A:middle
GB memory tier.

00:39:44.486 --> 00:39:46.586 A:middle
I do that and I find this asset

00:39:46.586 --> 00:39:49.306 A:middle
here and I'm going to select

00:39:49.306 --> 00:39:49.506 A:middle
that.

00:39:49.746 --> 00:39:52.316 A:middle
Now what's important here is

00:39:52.316 --> 00:39:54.336 A:middle
that I have selected this asset

00:39:54.556 --> 00:39:56.936 A:middle
at 3 gigabyte Metal 3 even

00:39:56.936 --> 00:39:58.436 A:middle
though there is an asset that

00:39:58.436 --> 00:40:00.206 A:middle
actually matches exactly to my

00:39:58.436 --> 00:40:00.206 A:middle
actually matches exactly to my

00:40:00.206 --> 00:40:00.976 A:middle
GPU class.

00:40:01.566 --> 00:40:04.736 A:middle
But because we prefer and scan

00:40:04.736 --> 00:40:05.796 A:middle
through things in memory

00:40:05.796 --> 00:40:07.176 A:middle
priority order before we do

00:40:07.176 --> 00:40:08.376 A:middle
graphics classes, we're going to

00:40:08.376 --> 00:40:09.126 A:middle
select this first.

00:40:09.126 --> 00:40:10.366 A:middle
This is really important because

00:40:10.366 --> 00:40:11.966 A:middle
we have decided that memory is

00:40:11.966 --> 00:40:13.126 A:middle
really the most important way

00:40:13.126 --> 00:40:14.086 A:middle
that you can characterize the

00:40:14.086 --> 00:40:15.436 A:middle
overall performance of a device,

00:40:15.726 --> 00:40:17.516 A:middle
so we're going to prefer that as

00:40:17.516 --> 00:40:19.026 A:middle
we go through the selection

00:40:19.026 --> 00:40:19.526 A:middle
matrix.

00:40:21.586 --> 00:40:23.046 A:middle
Okay that's how it works, how do

00:40:23.046 --> 00:40:24.006 A:middle
you think about using it.

00:40:24.916 --> 00:40:26.616 A:middle
Memory really represents the

00:40:26.616 --> 00:40:28.346 A:middle
overall headroom of your device

00:40:28.776 --> 00:40:30.336 A:middle
and is really the best aggregate

00:40:30.336 --> 00:40:31.796 A:middle
indicator of capability.

00:40:31.796 --> 00:40:33.006 A:middle
So it's a really good choice to

00:40:33.006 --> 00:40:34.426 A:middle
use with larger or richer

00:40:34.426 --> 00:40:35.896 A:middle
assets, more detailed stuff,

00:40:35.896 --> 00:40:37.256 A:middle
things that are bigger on disk,

00:40:37.576 --> 00:40:38.306 A:middle
things that are going to take a

00:40:38.306 --> 00:40:39.196 A:middle
little more memory when they're

00:40:39.196 --> 00:40:41.416 A:middle
expanded in in memory for

00:40:41.416 --> 00:40:41.836 A:middle
rendering.

00:40:42.486 --> 00:40:44.046 A:middle
Just a richer user experience is

00:40:44.046 --> 00:40:45.076 A:middle
usually associated with higher

00:40:45.076 --> 00:40:45.336 A:middle
memory.

00:40:45.826 --> 00:40:47.116 A:middle
Now higher graphics is a little

00:40:47.116 --> 00:40:48.946 A:middle
more subtle since that tracks

00:40:48.946 --> 00:40:50.566 A:middle
the raw processing capability,

00:40:50.566 --> 00:40:52.626 A:middle
both CPU and GPU, of the device

00:40:52.846 --> 00:40:54.166 A:middle
so it's better for more complex

00:40:54.166 --> 00:40:54.646 A:middle
assets.

00:40:55.436 --> 00:40:57.696 A:middle
Maybe you use a shader that

00:40:57.696 --> 00:40:58.526 A:middle
takes advantage of certain

00:40:58.526 --> 00:40:59.536 A:middle
features that are only available

00:40:59.536 --> 00:41:01.326 A:middle
on certain GPUs or not or you

00:40:59.536 --> 00:41:01.326 A:middle
on certain GPUs or not or you

00:41:01.396 --> 00:41:02.986 A:middle
put an asset that requires a

00:41:02.986 --> 00:41:05.106 A:middle
little more processing than

00:41:05.106 --> 00:41:05.526 A:middle
others.

00:41:06.136 --> 00:41:08.006 A:middle
I'd like to give two simple

00:41:08.006 --> 00:41:10.386 A:middle
examples as food for thought on

00:41:10.386 --> 00:41:11.056 A:middle
how this could work.

00:41:11.306 --> 00:41:14.076 A:middle
And the way I'm going to give

00:41:14.076 --> 00:41:15.576 A:middle
the example is by talking about

00:41:15.576 --> 00:41:16.386 A:middle
NSDataAsset.

00:41:16.936 --> 00:41:19.116 A:middle
NSDataAsset is a very simple

00:41:19.116 --> 00:41:20.216 A:middle
piece of Asset Catalog but it

00:41:20.216 --> 00:41:21.076 A:middle
can be very powerful.

00:41:21.306 --> 00:41:23.006 A:middle
All it is is a way to provide a

00:41:23.006 --> 00:41:24.306 A:middle
flexible container that you can

00:41:24.306 --> 00:41:26.256 A:middle
put in your Asset Catalog with

00:41:26.256 --> 00:41:27.786 A:middle
content variants around

00:41:27.876 --> 00:41:29.036 A:middle
arbitrary files.

00:41:29.336 --> 00:41:30.446 A:middle
This doesn't have to be an

00:41:30.446 --> 00:41:31.196 A:middle
image, it doesn't have to be a

00:41:31.196 --> 00:41:32.366 A:middle
very specific format, this can

00:41:32.366 --> 00:41:32.976 A:middle
be anything.

00:41:33.596 --> 00:41:36.226 A:middle
But you can use this with Asset

00:41:36.226 --> 00:41:37.666 A:middle
Catalogs in App Thinning to

00:41:37.696 --> 00:41:39.676 A:middle
route arbitrary data to these

00:41:39.676 --> 00:41:40.806 A:middle
different performance classes.

00:41:40.876 --> 00:41:42.706 A:middle
So that's an example, consider a

00:41:42.706 --> 00:41:44.636 A:middle
cut scene video in a game.

00:41:45.676 --> 00:41:47.126 A:middle
So you might provide, have a

00:41:47.126 --> 00:41:49.096 A:middle
nice video that you put in sort

00:41:49.096 --> 00:41:49.856 A:middle
of the mid-tier of the

00:41:49.856 --> 00:41:52.246 A:middle
performance spectrum and then

00:41:52.246 --> 00:41:53.416 A:middle
you might have a really awesome

00:41:53.416 --> 00:41:55.456 A:middle
high resolution, maybe it's even

00:41:55.456 --> 00:41:57.246 A:middle
HDR who knows video that you put

00:41:57.246 --> 00:41:59.396 A:middle
in the really capable quadrants

00:41:59.396 --> 00:42:00.776 A:middle
of that capability spectrum.

00:41:59.396 --> 00:42:00.776 A:middle
of that capability spectrum.

00:42:01.076 --> 00:42:03.426 A:middle
And then on the lower end you

00:42:03.426 --> 00:42:05.226 A:middle
put a still image or a very

00:42:05.226 --> 00:42:06.846 A:middle
simple image sequence that's not

00:42:06.846 --> 00:42:08.016 A:middle
going to take any time or

00:42:08.016 --> 00:42:09.316 A:middle
excessive resources on those

00:42:09.316 --> 00:42:10.906 A:middle
devices and still give those

00:42:10.906 --> 00:42:11.866 A:middle
customers running those older

00:42:11.866 --> 00:42:13.616 A:middle
devices a nice and responsive

00:42:13.616 --> 00:42:14.436 A:middle
user experience.

00:42:16.076 --> 00:42:17.176 A:middle
So that's one example.

00:42:17.176 --> 00:42:18.566 A:middle
Another more intriguing example

00:42:18.566 --> 00:42:20.656 A:middle
is plist, well why I put a plist

00:42:20.656 --> 00:42:21.546 A:middle
in an Asset Catalog, it seems

00:42:21.546 --> 00:42:22.536 A:middle
like there's much better ways to

00:42:22.536 --> 00:42:24.156 A:middle
deploy plists than Asset

00:42:24.156 --> 00:42:24.546 A:middle
Catalogs.

00:42:24.546 --> 00:42:26.096 A:middle
Well when you use it in

00:42:26.096 --> 00:42:28.226 A:middle
conjunction with NSDataAsset for

00:42:28.226 --> 00:42:29.386 A:middle
example you could consider using

00:42:29.386 --> 00:42:31.146 A:middle
a plist to tune your application

00:42:32.246 --> 00:42:33.396 A:middle
with different configuration

00:42:33.396 --> 00:42:35.196 A:middle
parameters that scale according

00:42:35.196 --> 00:42:36.566 A:middle
to the performance class that

00:42:36.566 --> 00:42:39.086 A:middle
you cataloged that plist in, in

00:42:39.086 --> 00:42:40.026 A:middle
your NSDataAsset.

00:42:40.446 --> 00:42:42.266 A:middle
So for example if you have an

00:42:42.266 --> 00:42:45.596 A:middle
app that renders a crowd for

00:42:45.596 --> 00:42:47.246 A:middle
example you could set the size

00:42:47.246 --> 00:42:48.266 A:middle
of the crowd based on the

00:42:48.266 --> 00:42:49.566 A:middle
capability of the underlying

00:42:49.566 --> 00:42:52.226 A:middle
hardware and your code would

00:42:52.226 --> 00:42:53.906 A:middle
automatically be self-tuned

00:42:53.906 --> 00:42:55.436 A:middle
based on what device it's

00:42:55.436 --> 00:42:56.476 A:middle
actually running on at the

00:42:56.476 --> 00:42:56.816 A:middle
moment.

00:42:57.756 --> 00:42:58.856 A:middle
So that's an interesting idea

00:42:58.856 --> 00:43:00.056 A:middle
about how to use performance

00:42:58.856 --> 00:43:00.056 A:middle
about how to use performance

00:43:00.056 --> 00:43:00.566 A:middle
classes.

00:43:02.956 --> 00:43:04.086 A:middle
Next, I'd like to talk about

00:43:04.086 --> 00:43:05.276 A:middle
Sprite atlases.

00:43:06.126 --> 00:43:08.326 A:middle
So Sprite atlases were

00:43:08.356 --> 00:43:09.906 A:middle
introduced a few years ago in

00:43:09.906 --> 00:43:11.476 A:middle
support of SpriteKit

00:43:11.616 --> 00:43:13.956 A:middle
applications in SpriteKit games.

00:43:15.336 --> 00:43:17.406 A:middle
Now, but I'm not going to talk

00:43:17.406 --> 00:43:18.466 A:middle
about them in the context of

00:43:18.466 --> 00:43:20.996 A:middle
SpriteKit based games, I'm going

00:43:20.996 --> 00:43:22.186 A:middle
to talk about them in the

00:43:22.186 --> 00:43:23.586 A:middle
context of regular applications.

00:43:25.466 --> 00:43:27.456 A:middle
Now they have some attributes

00:43:27.456 --> 00:43:28.796 A:middle
that are very similar to what

00:43:28.796 --> 00:43:30.056 A:middle
Will talked about with automatic

00:43:30.056 --> 00:43:31.936 A:middle
image packing, you're taking all

00:43:31.936 --> 00:43:33.006 A:middle
of the related images in that

00:43:33.006 --> 00:43:34.276 A:middle
Sprite atlas and packing them

00:43:34.276 --> 00:43:35.486 A:middle
into a single unit, they get

00:43:35.486 --> 00:43:37.476 A:middle
loaded at once, and then all the

00:43:37.476 --> 00:43:38.716 A:middle
images that you reference that

00:43:38.716 --> 00:43:40.076 A:middle
are contained within that atlas

00:43:40.326 --> 00:43:41.886 A:middle
are just lightweight references

00:43:42.076 --> 00:43:44.096 A:middle
to locations within that atlas.

00:43:45.486 --> 00:43:46.186 A:middle
So that's great.

00:43:46.676 --> 00:43:49.716 A:middle
But the key thing is that you

00:43:49.716 --> 00:43:51.096 A:middle
don't really need to use

00:43:51.186 --> 00:43:52.616 A:middle
SpriteKit to access these, you

00:43:52.616 --> 00:43:53.826 A:middle
can just use this as a grouping

00:43:53.826 --> 00:43:54.946 A:middle
mechanism because the one

00:43:54.946 --> 00:43:56.146 A:middle
difference that Sprite atlases

00:43:56.146 --> 00:43:57.216 A:middle
have over automatic image

00:43:57.216 --> 00:43:58.586 A:middle
packing is you get to control

00:43:58.586 --> 00:44:00.486 A:middle
the grouping and you to assign a

00:43:58.586 --> 00:44:00.486 A:middle
the grouping and you to assign a

00:44:00.486 --> 00:44:01.206 A:middle
name to it.

00:44:01.206 --> 00:44:02.396 A:middle
So you can deal with it, you can

00:44:02.396 --> 00:44:03.456 A:middle
have a little bit of control and

00:44:03.456 --> 00:44:04.916 A:middle
sort of organize things that

00:44:04.916 --> 00:44:05.146 A:middle
way.

00:44:06.166 --> 00:44:07.866 A:middle
But you can still access the

00:44:07.866 --> 00:44:09.246 A:middle
images contained within using

00:44:09.246 --> 00:44:11.216 A:middle
the standard UIImage and NSImage

00:44:11.546 --> 00:44:13.586 A:middle
APIs, and the names within that.

00:44:13.996 --> 00:44:15.706 A:middle
In addition, there is an

00:44:15.706 --> 00:44:16.916 A:middle
intriguing way that you can use

00:44:16.916 --> 00:44:18.346 A:middle
SpriteKit framework even though

00:44:18.346 --> 00:44:19.606 A:middle
you're not building a SpriteKit

00:44:19.606 --> 00:44:21.786 A:middle
application by taking advantage

00:44:21.786 --> 00:44:23.416 A:middle
of the SKTextureAtlas preload

00:44:23.416 --> 00:44:25.416 A:middle
texture atlas named API if you

00:44:25.416 --> 00:44:27.086 A:middle
have a case where you have a

00:44:27.086 --> 00:44:28.436 A:middle
large number of images that have

00:44:28.436 --> 00:44:30.786 A:middle
to be loaded fairly quickly and

00:44:30.786 --> 00:44:31.906 A:middle
have to be used right away.

00:44:32.246 --> 00:44:33.646 A:middle
So what this API will do is

00:44:33.646 --> 00:44:35.656 A:middle
it'll preload or load from disk,

00:44:35.696 --> 00:44:38.636 A:middle
decode, get ready and warmed up

00:44:38.696 --> 00:44:40.426 A:middle
in memory asynchronously with a

00:44:40.426 --> 00:44:43.286 A:middle
callback completion handler for

00:44:43.286 --> 00:44:44.546 A:middle
a set of named atlases.

00:44:44.816 --> 00:44:46.796 A:middle
So this is great, but I will

00:44:46.796 --> 00:44:48.606 A:middle
caution you, do not use this API

00:44:48.666 --> 00:44:51.586 A:middle
indiscriminately because it does

00:44:51.586 --> 00:44:52.916 A:middle
exactly what it says it's going

00:44:52.916 --> 00:44:55.376 A:middle
to do and that means it's going

00:44:55.376 --> 00:44:57.436 A:middle
to potentially consume a large

00:44:57.436 --> 00:45:00.016 A:middle
amount of I/O and memory to load

00:44:57.436 --> 00:45:00.016 A:middle
amount of I/O and memory to load

00:45:00.016 --> 00:45:00.866 A:middle
all those images.

00:45:01.006 --> 00:45:02.286 A:middle
So please be sure that you're

00:45:02.286 --> 00:45:03.996 A:middle
about to use them right away and

00:45:03.996 --> 00:45:04.956 A:middle
that it's the right choice,

00:45:05.376 --> 00:45:07.296 A:middle
otherwise a jetsam awaits you.

00:45:09.836 --> 00:45:12.316 A:middle
So another powerful thing about

00:45:12.316 --> 00:45:14.976 A:middle
Sprite atlases is that any image

00:45:14.976 --> 00:45:17.426 A:middle
within the Sprite atlas has all

00:45:17.426 --> 00:45:18.776 A:middle
of the regular features of any

00:45:18.776 --> 00:45:20.076 A:middle
other normal image set within

00:45:20.236 --> 00:45:21.766 A:middle
code Asset Catalogs, including

00:45:21.766 --> 00:45:23.856 A:middle
all the cataloging features, all

00:45:23.856 --> 00:45:26.066 A:middle
the compression settings, and

00:45:26.426 --> 00:45:27.706 A:middle
all the App Thinning features.

00:45:27.846 --> 00:45:28.756 A:middle
We will take care to

00:45:28.806 --> 00:45:30.546 A:middle
automatically split and collate

00:45:30.546 --> 00:45:31.456 A:middle
all of the images that you

00:45:31.456 --> 00:45:33.746 A:middle
provide appropriately, split

00:45:33.746 --> 00:45:34.966 A:middle
them by pixel formats, by

00:45:34.966 --> 00:45:36.186 A:middle
different device traits, and

00:45:36.186 --> 00:45:37.156 A:middle
different compression types.

00:45:37.426 --> 00:45:38.376 A:middle
And make sure everything gets

00:45:38.426 --> 00:45:39.456 A:middle
baked appropriately and then

00:45:39.456 --> 00:45:40.636 A:middle
thinned appropriately so that

00:45:40.636 --> 00:45:42.086 A:middle
the data gets routed to the

00:45:42.086 --> 00:45:46.796 A:middle
right device in the right way.

00:45:47.006 --> 00:45:48.076 A:middle
So those are some interesting

00:45:48.076 --> 00:45:49.746 A:middle
details about deployment, we're

00:45:49.746 --> 00:45:50.686 A:middle
in the homestretch here.

00:45:51.396 --> 00:45:52.846 A:middle
So I'd like to remind you of the

00:45:52.846 --> 00:45:53.636 A:middle
important things about

00:45:53.636 --> 00:45:54.926 A:middle
optimizing app assets here.

00:45:54.926 --> 00:45:56.666 A:middle
First and foremost, I think

00:45:57.216 --> 00:45:58.926 A:middle
Xcode Asset Catalogs are really

00:45:58.926 --> 00:46:00.146 A:middle
the best choice for managing the

00:45:58.926 --> 00:46:00.146 A:middle
the best choice for managing the

00:46:00.146 --> 00:46:01.096 A:middle
image resources in your

00:46:01.096 --> 00:46:01.756 A:middle
application.

00:46:02.156 --> 00:46:04.536 A:middle
This year you get 10 to 20% less

00:46:04.896 --> 00:46:07.096 A:middle
space on disk just by using our

00:46:07.096 --> 00:46:08.276 A:middle
new compression algorithms.

00:46:08.836 --> 00:46:10.566 A:middle
No matter what deployment target

00:46:10.566 --> 00:46:12.876 A:middle
you have, your iOS 12 customers

00:46:12.926 --> 00:46:14.966 A:middle
will get those benefits thanks

00:46:14.966 --> 00:46:15.906 A:middle
to the improvements in App

00:46:15.906 --> 00:46:18.006 A:middle
Thinning, which now optimizes

00:46:18.006 --> 00:46:19.936 A:middle
for the latest OS going forward.

00:46:20.816 --> 00:46:22.356 A:middle
And we have a bunch of

00:46:22.356 --> 00:46:23.666 A:middle
cataloging features that you can

00:46:23.666 --> 00:46:25.456 A:middle
use to adapt the resources of

00:46:25.456 --> 00:46:27.226 A:middle
your app to the devices your

00:46:27.226 --> 00:46:28.136 A:middle
customers use.

00:46:28.526 --> 00:46:32.106 A:middle
For more information please look

00:46:32.106 --> 00:46:36.386 A:middle
at this link and hope you all

00:46:36.386 --> 00:46:36.936 A:middle
had a nice day.

00:46:37.666 --> 00:46:37.976 A:middle
Thank you.

00:46:38.516 --> 00:46:41.500 A:middle
[ Applause ]
