WEBVTT

00:00:07.516 --> 00:00:16.516 A:middle
[ Music ]

00:00:17.516 --> 00:00:24.516 A:middle
[ Applause ]

00:00:25.016 --> 00:00:26.496 A:middle
&gt;&gt; Good morning, everyone, and

00:00:26.496 --> 00:00:28.386 A:middle
welcome to New Ways to Work with

00:00:28.386 --> 00:00:28.826 A:middle
Workouts.

00:00:29.426 --> 00:00:30.476 A:middle
My name is Niharika [phonetic].

00:00:30.686 --> 00:00:31.976 A:middle
I'm an engineer on the Fitness

00:00:31.976 --> 00:00:33.766 A:middle
team here at Apple, and today

00:00:33.766 --> 00:00:34.746 A:middle
I'm going to be joined by my

00:00:34.746 --> 00:00:36.346 A:middle
colleague Karim, an engineer on

00:00:36.346 --> 00:00:37.046 A:middle
the Health team.

00:00:37.616 --> 00:00:39.506 A:middle
And we are so excited to share

00:00:39.506 --> 00:00:40.546 A:middle
with all of you some of the

00:00:40.546 --> 00:00:41.756 A:middle
brand-new features and

00:00:41.756 --> 00:00:42.996 A:middle
capabilities that have been

00:00:43.066 --> 00:00:45.416 A:middle
added to HealthKit in iOS 12 and

00:00:45.416 --> 00:00:46.186 A:middle
watchOS 5.

00:00:49.216 --> 00:00:51.076 A:middle
Apple Watch was released 3 years

00:00:51.076 --> 00:00:52.356 A:middle
ago now, and since the

00:00:52.356 --> 00:00:54.126 A:middle
beginning, our users have loved

00:00:54.126 --> 00:00:55.426 A:middle
engaging with its health and

00:00:55.426 --> 00:00:56.166 A:middle
fitness features.

00:00:56.646 --> 00:00:57.576 A:middle
They've loved closing their

00:00:57.656 --> 00:00:59.406 A:middle
rings and earning achievements,

00:00:59.406 --> 00:01:01.076 A:middle
sharing with their friends, but

00:00:59.406 --> 00:01:01.076 A:middle
sharing with their friends, but

00:01:01.076 --> 00:01:02.666 A:middle
they've especially loved to do

00:01:02.666 --> 00:01:03.206 A:middle
workouts.

00:01:04.215 --> 00:01:05.806 A:middle
And the watch has really become

00:01:06.006 --> 00:01:07.526 A:middle
just the beginning of what is a

00:01:07.526 --> 00:01:09.416 A:middle
vibrant, evolving ecosystem, and

00:01:09.806 --> 00:01:11.826 A:middle
that is thanks to contributions

00:01:11.916 --> 00:01:13.606 A:middle
from developers like all of you.

00:01:15.006 --> 00:01:16.586 A:middle
In just the last quarter of

00:01:16.586 --> 00:01:18.996 A:middle
2017, there were over 200

00:01:18.996 --> 00:01:21.216 A:middle
million downloads of apps in the

00:01:21.216 --> 00:01:22.736 A:middle
Health and Fitness category on

00:01:22.796 --> 00:01:24.746 A:middle
the App Store, and that number

00:01:24.746 --> 00:01:25.896 A:middle
itself is incredible.

00:01:26.206 --> 00:01:27.906 A:middle
Two hundred million is so, so

00:01:27.906 --> 00:01:28.286 A:middle
cool.

00:01:28.786 --> 00:01:29.866 A:middle
But more than that, it's a

00:01:29.866 --> 00:01:31.226 A:middle
testament to 2 things.

00:01:31.516 --> 00:01:33.456 A:middle
Number 1, it's a testament to

00:01:33.456 --> 00:01:35.206 A:middle
the dedication all of you have

00:01:35.206 --> 00:01:36.896 A:middle
shown in getting these great

00:01:36.896 --> 00:01:38.246 A:middle
user experiences out there.

00:01:38.696 --> 00:01:40.256 A:middle
But number 2, it's a sign that

00:01:40.256 --> 00:01:41.276 A:middle
people really care.

00:01:41.626 --> 00:01:43.216 A:middle
People are engaged in the space,

00:01:43.256 --> 00:01:44.976 A:middle
and they are so excited about

00:01:44.976 --> 00:01:46.366 A:middle
what all of you are putting out

00:01:46.406 --> 00:01:46.756 A:middle
there.

00:01:48.246 --> 00:01:49.116 A:middle
And at the heart of this

00:01:49.116 --> 00:01:50.976 A:middle
ecosystem are these 2 apps,

00:01:50.976 --> 00:01:52.406 A:middle
Activity and Health.

00:01:52.936 --> 00:01:54.586 A:middle
Activity is a home for you to

00:01:54.586 --> 00:01:56.136 A:middle
visualize just that -- your

00:01:56.136 --> 00:01:56.736 A:middle
activity data.

00:01:57.226 --> 00:01:58.506 A:middle
You can see your workouts.

00:01:58.506 --> 00:02:00.306 A:middle
You can see calories, exercise

00:01:58.506 --> 00:02:00.306 A:middle
You can see calories, exercise

00:02:00.306 --> 00:02:00.646 A:middle
minutes.

00:02:01.326 --> 00:02:02.786 A:middle
And Health is all of that and

00:02:02.786 --> 00:02:03.156 A:middle
more.

00:02:03.826 --> 00:02:05.666 A:middle
And of course, at the heart of

00:02:05.666 --> 00:02:06.956 A:middle
all of that, which is the reason

00:02:06.956 --> 00:02:08.716 A:middle
we're here today, is HealthKit.

00:02:10.186 --> 00:02:12.286 A:middle
And so we have a ton of exciting

00:02:12.286 --> 00:02:13.976 A:middle
things to talk about today, but

00:02:13.976 --> 00:02:15.346 A:middle
before we get started with any

00:02:15.346 --> 00:02:16.566 A:middle
of that, we have to talk about

00:02:16.566 --> 00:02:17.946 A:middle
something extremely important,

00:02:18.196 --> 00:02:19.676 A:middle
and that is privacy and

00:02:19.676 --> 00:02:21.796 A:middle
authorization, because data is

00:02:21.796 --> 00:02:23.446 A:middle
sensitive, especially health

00:02:23.496 --> 00:02:25.146 A:middle
data, and it is so important to

00:02:25.146 --> 00:02:26.426 A:middle
make sure that you have a

00:02:26.426 --> 00:02:28.516 A:middle
comprehensive privacy story when

00:02:28.516 --> 00:02:30.676 A:middle
working with your apps.

00:02:30.776 --> 00:02:32.836 A:middle
Next, Karim is going to share

00:02:32.836 --> 00:02:34.366 A:middle
our brand-new workout features,

00:02:34.726 --> 00:02:36.026 A:middle
which have made it easier than

00:02:36.026 --> 00:02:38.146 A:middle
ever before to develop a robust

00:02:38.146 --> 00:02:39.026 A:middle
workout app.

00:02:39.296 --> 00:02:41.216 A:middle
And lastly, I'm so excited to

00:02:41.216 --> 00:02:42.656 A:middle
share our new Quantity series

00:02:42.716 --> 00:02:44.646 A:middle
API, which is a brand-new way to

00:02:44.646 --> 00:02:46.256 A:middle
both store and relate

00:02:46.336 --> 00:02:47.346 A:middle
high-frequency data.

00:02:48.726 --> 00:02:49.716 A:middle
So let's get started.

00:02:52.536 --> 00:02:53.946 A:middle
Like I mentioned, privacy and

00:02:53.946 --> 00:02:55.636 A:middle
authorization has to come at the

00:02:55.636 --> 00:02:57.596 A:middle
beginning of any development

00:02:57.596 --> 00:02:57.886 A:middle
story.

00:02:57.886 --> 00:02:59.656 A:middle
And at Apple, we think about

00:02:59.656 --> 00:03:02.796 A:middle
privacy in 1 simple way: Privacy

00:02:59.656 --> 00:03:02.796 A:middle
privacy in 1 simple way: Privacy

00:03:03.016 --> 00:03:03.916 A:middle
is about people.

00:03:04.696 --> 00:03:06.276 A:middle
And HealthKit is designed with

00:03:06.276 --> 00:03:06.986 A:middle
this in mind.

00:03:07.146 --> 00:03:08.856 A:middle
HealthKit is designed to put

00:03:08.856 --> 00:03:10.756 A:middle
users in control of their data.

00:03:11.176 --> 00:03:13.296 A:middle
Users have the ability to grant

00:03:13.296 --> 00:03:14.796 A:middle
access as well as revoke

00:03:14.796 --> 00:03:15.676 A:middle
whenever they want.

00:03:16.266 --> 00:03:17.986 A:middle
And as developers, all of you

00:03:17.986 --> 00:03:19.406 A:middle
are the last link of that

00:03:19.406 --> 00:03:20.856 A:middle
puzzle, and we want to make sure

00:03:21.136 --> 00:03:23.136 A:middle
we are giving you the tools to

00:03:23.136 --> 00:03:24.696 A:middle
make sure that your users'

00:03:24.696 --> 00:03:25.676 A:middle
privacy is respected.

00:03:25.676 --> 00:03:28.786 A:middle
And we think about this in a few

00:03:28.786 --> 00:03:29.596 A:middle
simple rules.

00:03:29.796 --> 00:03:31.676 A:middle
Number 1 is this idea of

00:03:31.726 --> 00:03:33.076 A:middle
proportional collection, and

00:03:33.476 --> 00:03:34.836 A:middle
this is the idea that you should

00:03:34.836 --> 00:03:37.356 A:middle
only be collecting data relative

00:03:37.356 --> 00:03:38.536 A:middle
to what your app needs.

00:03:38.876 --> 00:03:40.246 A:middle
And this isn't a fixed set of

00:03:40.246 --> 00:03:40.506 A:middle
data.

00:03:40.506 --> 00:03:42.566 A:middle
At the beginning, this amount

00:03:42.566 --> 00:03:43.406 A:middle
might be small.

00:03:43.406 --> 00:03:45.196 A:middle
As your use cases, as your

00:03:45.196 --> 00:03:46.916 A:middle
features grow, the amount of

00:03:46.916 --> 00:03:48.076 A:middle
data you need to collect might

00:03:48.076 --> 00:03:50.126 A:middle
be more, but it is so important

00:03:50.126 --> 00:03:51.656 A:middle
that you only collect what you

00:03:51.656 --> 00:03:53.276 A:middle
need at a specific time.

00:03:54.266 --> 00:03:56.006 A:middle
And second is the idea that

00:03:56.006 --> 00:03:57.736 A:middle
HealthKit authorization can

00:03:57.736 --> 00:03:58.326 A:middle
change.

00:03:58.596 --> 00:03:59.996 A:middle
And this one's a little nuanced.

00:04:00.306 --> 00:04:02.526 A:middle
For example, if a user resets

00:04:02.566 --> 00:04:04.036 A:middle
their location and privacy data,

00:04:04.416 --> 00:04:05.606 A:middle
their location and privacy

00:04:05.606 --> 00:04:08.066 A:middle
setting, it is so important for

00:04:08.066 --> 00:04:09.566 A:middle
you to make sure you're honoring

00:04:09.566 --> 00:04:10.436 A:middle
that, and it is your

00:04:10.436 --> 00:04:12.076 A:middle
responsibility to make sure you

00:04:12.076 --> 00:04:12.516 A:middle
do that.

00:04:13.016 --> 00:04:14.346 A:middle
And the best way to do this is

00:04:14.346 --> 00:04:15.746 A:middle
to treat HealthKit as the source

00:04:15.746 --> 00:04:18.576 A:middle
of truth because HealthKit will

00:04:18.576 --> 00:04:20.236 A:middle
update to reflect that

00:04:20.236 --> 00:04:21.946 A:middle
authorization status, and it is

00:04:21.986 --> 00:04:23.126 A:middle
so important to make sure you

00:04:23.126 --> 00:04:25.096 A:middle
don't cache any of that and make

00:04:25.096 --> 00:04:26.356 A:middle
sure you're always turning to

00:04:26.356 --> 00:04:28.336 A:middle
HealthKit to ask what data you

00:04:28.336 --> 00:04:29.126 A:middle
have access to.

00:04:29.786 --> 00:04:31.486 A:middle
And these 2 ideas can be

00:04:31.596 --> 00:04:33.546 A:middle
distilled into 3 simple rules.

00:04:34.546 --> 00:04:35.506 A:middle
And when we're thinking about

00:04:35.506 --> 00:04:36.816 A:middle
privacy and authorization, you

00:04:36.816 --> 00:04:38.246 A:middle
should ask for only what you

00:04:38.246 --> 00:04:40.636 A:middle
need, only when you need it, and

00:04:40.636 --> 00:04:43.066 A:middle
every single time you need it.

00:04:44.006 --> 00:04:46.596 A:middle
And in code, this is just as

00:04:46.596 --> 00:04:47.066 A:middle
simple.

00:04:47.736 --> 00:04:49.306 A:middle
Let's say I'm creating a workout

00:04:49.306 --> 00:04:50.336 A:middle
app, and I'm just getting

00:04:50.336 --> 00:04:51.876 A:middle
started, and, of course, I need

00:04:51.876 --> 00:04:53.036 A:middle
to start with privacy and

00:04:53.036 --> 00:04:53.776 A:middle
authorization.

00:04:54.326 --> 00:04:55.536 A:middle
First, since I'm creating a

00:04:55.536 --> 00:04:57.276 A:middle
workout app, I want to share the

00:04:57.276 --> 00:04:59.866 A:middle
workout type, so I explicitly

00:04:59.866 --> 00:05:01.186 A:middle
declare that I'm going to be

00:04:59.866 --> 00:05:01.186 A:middle
declare that I'm going to be

00:05:01.186 --> 00:05:02.156 A:middle
sharing the workout type.

00:05:03.006 --> 00:05:04.376 A:middle
Next, since I'm just getting

00:05:04.376 --> 00:05:05.946 A:middle
started, I only have a few

00:05:05.946 --> 00:05:07.586 A:middle
things that I'm trying to track.

00:05:07.586 --> 00:05:08.666 A:middle
I want to be able to track my

00:05:08.666 --> 00:05:10.876 A:middle
user's heart rate, calories, as

00:05:10.876 --> 00:05:12.246 A:middle
well as distance walking and

00:05:12.246 --> 00:05:12.586 A:middle
running.

00:05:12.836 --> 00:05:14.036 A:middle
And this is all I need right

00:05:14.036 --> 00:05:16.326 A:middle
now, and so that's all I'm going

00:05:16.326 --> 00:05:17.856 A:middle
to ask for.

00:05:18.076 --> 00:05:19.856 A:middle
And lastly, on my healthStore, I

00:05:19.856 --> 00:05:21.526 A:middle
request authorization for just

00:05:21.526 --> 00:05:21.836 A:middle
that.

00:05:21.916 --> 00:05:23.396 A:middle
I request my types to share and

00:05:23.396 --> 00:05:24.366 A:middle
my types to read.

00:05:24.816 --> 00:05:26.586 A:middle
And with these 3 simple steps,

00:05:26.646 --> 00:05:27.946 A:middle
we can really make sure that we

00:05:27.946 --> 00:05:29.896 A:middle
are taking the steps necessary

00:05:29.936 --> 00:05:31.466 A:middle
to respect our user's privacy.

00:05:32.066 --> 00:05:35.436 A:middle
And privacy is so important

00:05:35.436 --> 00:05:36.966 A:middle
because great apps have great

00:05:36.966 --> 00:05:38.586 A:middle
privacy, and it's so important

00:05:38.586 --> 00:05:39.956 A:middle
that you give attention to this

00:05:39.956 --> 00:05:41.206 A:middle
at the beginning of any

00:05:41.206 --> 00:05:42.116 A:middle
development process.

00:05:42.666 --> 00:05:44.006 A:middle
And now that we have access to

00:05:44.006 --> 00:05:46.476 A:middle
our users' data, I'm so excited

00:05:46.476 --> 00:05:47.726 A:middle
to introduce Karim [phonetic] to

00:05:47.726 --> 00:05:49.136 A:middle
tell you all about the brand-new

00:05:49.136 --> 00:05:50.036 A:middle
workout features.

00:05:51.516 --> 00:05:56.096 A:middle
[ Applause ]

00:05:56.596 --> 00:05:57.946 A:middle
&gt;&gt; Hello, everyone.

00:05:58.576 --> 00:06:00.466 A:middle
Thank you so much for joining us

00:05:58.576 --> 00:06:00.466 A:middle
Thank you so much for joining us

00:06:00.466 --> 00:06:00.736 A:middle
today.

00:06:01.306 --> 00:06:03.256 A:middle
I am really excited to tell you

00:06:03.386 --> 00:06:05.246 A:middle
all about the new workout API.

00:06:06.526 --> 00:06:08.036 A:middle
If you're new to HealthKit,

00:06:08.526 --> 00:06:10.876 A:middle
you'll see just how easy it is

00:06:11.146 --> 00:06:12.896 A:middle
to create a full-featured

00:06:12.896 --> 00:06:14.536 A:middle
workout app from scratch.

00:06:15.356 --> 00:06:16.856 A:middle
If, on the other hand, you have

00:06:17.156 --> 00:06:18.486 A:middle
a workout app on the App Store,

00:06:19.036 --> 00:06:20.746 A:middle
we'll show you all of the great

00:06:20.746 --> 00:06:22.796 A:middle
new features of the API that

00:06:22.796 --> 00:06:24.226 A:middle
your app can benefit from.

00:06:25.076 --> 00:06:26.496 A:middle
So let's dive in.

00:06:26.966 --> 00:06:29.766 A:middle
First, I would like to take a

00:06:29.766 --> 00:06:32.556 A:middle
look at the general workout app

00:06:32.906 --> 00:06:33.556 A:middle
life cycle.

00:06:34.196 --> 00:06:35.616 A:middle
So let's say we're building a

00:06:35.766 --> 00:06:37.926 A:middle
workout app to track our users'

00:06:37.926 --> 00:06:41.606 A:middle
activity, and the first step is

00:06:41.606 --> 00:06:43.506 A:middle
to set up the app.

00:06:44.246 --> 00:06:46.146 A:middle
So at this state here, we know

00:06:46.146 --> 00:06:48.086 A:middle
that the user wants to perform a

00:06:48.086 --> 00:06:50.586 A:middle
workout, the type of activity,

00:06:51.046 --> 00:06:52.546 A:middle
and we need to make sure that

00:06:52.546 --> 00:06:54.556 A:middle
our UI is ready for that.

00:06:55.916 --> 00:06:58.596 A:middle
Once the setup is done, we can

00:06:58.596 --> 00:07:00.506 A:middle
go ahead and start the workout.

00:06:58.596 --> 00:07:00.506 A:middle
go ahead and start the workout.

00:07:01.776 --> 00:07:03.766 A:middle
So after this point, the user

00:07:03.766 --> 00:07:06.086 A:middle
will be actively working out.

00:07:06.826 --> 00:07:08.796 A:middle
And then, of course, after some

00:07:08.796 --> 00:07:12.046 A:middle
time, the user will want to end

00:07:12.046 --> 00:07:12.616 A:middle
the workout.

00:07:13.436 --> 00:07:15.666 A:middle
And from there, we can save this

00:07:15.666 --> 00:07:17.216 A:middle
workout and all of its

00:07:17.216 --> 00:07:19.316 A:middle
associated data in HealthKit.

00:07:20.596 --> 00:07:23.766 A:middle
So this is the general life

00:07:23.766 --> 00:07:25.616 A:middle
cycle of a workout app.

00:07:26.356 --> 00:07:29.116 A:middle
Now, let's see what happens when

00:07:29.116 --> 00:07:30.086 A:middle
the user is active.

00:07:30.746 --> 00:07:34.236 A:middle
With your user interface at the

00:07:34.236 --> 00:07:36.826 A:middle
center, one of the tasks that

00:07:36.826 --> 00:07:39.266 A:middle
you want to accomplish is to

00:07:39.376 --> 00:07:41.736 A:middle
collect data that is relevant to

00:07:41.736 --> 00:07:44.096 A:middle
the workout and displayed in

00:07:44.096 --> 00:07:45.376 A:middle
your user interface.

00:07:46.396 --> 00:07:47.926 A:middle
And you also want to make sure

00:07:47.926 --> 00:07:50.116 A:middle
that the user can control the

00:07:50.116 --> 00:07:52.606 A:middle
state of the session so that the

00:07:52.706 --> 00:07:54.656 A:middle
user can pause or resume the

00:07:54.656 --> 00:07:55.116 A:middle
workout.

00:07:55.576 --> 00:07:59.626 A:middle
And if you're familiar with

00:07:59.626 --> 00:08:01.726 A:middle
HealthKit, you might know about

00:07:59.626 --> 00:08:01.726 A:middle
HealthKit, you might know about

00:08:01.916 --> 00:08:04.866 A:middle
HKWorkoutSession on watchOS.

00:08:06.156 --> 00:08:09.126 A:middle
HKWorkoutSession allows you to

00:08:09.126 --> 00:08:11.966 A:middle
handle a few of these steps in

00:08:11.966 --> 00:08:12.686 A:middle
the life cycle.

00:08:13.256 --> 00:08:16.646 A:middle
It will prepare the device's

00:08:16.646 --> 00:08:19.546 A:middle
sensors for data collection set

00:08:19.916 --> 00:08:21.586 A:middle
so that you can accurately

00:08:21.646 --> 00:08:24.126 A:middle
collect data that's relevant to

00:08:24.126 --> 00:08:25.906 A:middle
the workout like calories and

00:08:25.906 --> 00:08:26.966 A:middle
heart rate.

00:08:27.646 --> 00:08:29.476 A:middle
It will also allow your

00:08:29.476 --> 00:08:31.166 A:middle
application to run in the

00:08:31.166 --> 00:08:34.746 A:middle
background when the workout is

00:08:36.366 --> 00:08:36.515 A:middle
active.

00:08:36.716 --> 00:08:39.316 A:middle
You'll be, also be able to use

00:08:39.316 --> 00:08:41.196 A:middle
HKWorkoutSession to control the

00:08:41.196 --> 00:08:43.056 A:middle
state of this, the workout.

00:08:44.436 --> 00:08:45.996 A:middle
And finally, you can also

00:08:46.376 --> 00:08:48.756 A:middle
generate events like swimming

00:08:48.756 --> 00:08:49.906 A:middle
laps in segments.

00:08:50.446 --> 00:08:53.396 A:middle
But of course, this is not

00:08:53.396 --> 00:08:57.426 A:middle
enough, and you also need to

00:08:57.756 --> 00:09:00.236 A:middle
collect data that is relevant to

00:08:57.756 --> 00:09:00.236 A:middle
collect data that is relevant to

00:09:00.236 --> 00:09:02.306 A:middle
the workout that's generated by

00:09:02.306 --> 00:09:04.826 A:middle
the device and be able to save

00:09:04.826 --> 00:09:06.136 A:middle
it all in HealthKit.

00:09:07.096 --> 00:09:09.816 A:middle
And to do just that, I'm really

00:09:09.816 --> 00:09:12.256 A:middle
happy to introduce a new class,

00:09:12.746 --> 00:09:14.206 A:middle
HKWorkoutBuilder.

00:09:15.316 --> 00:09:16.746 A:middle
The workout builder is your

00:09:16.746 --> 00:09:19.896 A:middle
one-stop shop to collecting data

00:09:19.896 --> 00:09:21.816 A:middle
and saving it in HealthKit.

00:09:22.366 --> 00:09:25.476 A:middle
So the builder will create and

00:09:25.476 --> 00:09:28.826 A:middle
save an HKWorkout object, which

00:09:28.826 --> 00:09:30.776 A:middle
is a representation of a workout

00:09:30.776 --> 00:09:31.346 A:middle
in HealthKit.

00:09:33.406 --> 00:09:35.676 A:middle
You can then add samples,

00:09:36.036 --> 00:09:39.186 A:middle
events, and also custom metadata

00:09:39.326 --> 00:09:41.346 A:middle
to the builder while building

00:09:41.346 --> 00:09:41.836 A:middle
the workout.

00:09:42.316 --> 00:09:45.656 A:middle
And if you're on watchOS, you

00:09:45.656 --> 00:09:47.316 A:middle
can use its subclass,

00:09:47.756 --> 00:09:49.436 A:middle
HKLiveWorkoutBuilder.

00:09:50.836 --> 00:09:53.806 A:middle
So it's watchOS only, and

00:09:54.326 --> 00:09:56.116 A:middle
because it's a subclass of the

00:09:56.116 --> 00:09:58.096 A:middle
workout builder, it has all of

00:09:58.146 --> 00:09:59.306 A:middle
the great benefits of the

00:09:59.306 --> 00:10:02.126 A:middle
builder, but because it's on

00:09:59.306 --> 00:10:02.126 A:middle
builder, but because it's on

00:10:02.126 --> 00:10:04.226 A:middle
watchOS and it works closely

00:10:04.226 --> 00:10:06.676 A:middle
with HKWorkoutSession, it has

00:10:06.736 --> 00:10:08.106 A:middle
all of these really cool

00:10:08.106 --> 00:10:10.956 A:middle
features like automatic sample

00:10:11.026 --> 00:10:12.786 A:middle
and event collection, which

00:10:12.786 --> 00:10:13.776 A:middle
we'll talk about later.

00:10:15.736 --> 00:10:18.006 A:middle
So let's go back to the workout

00:10:18.006 --> 00:10:21.136 A:middle
app life cycle, and we'll see

00:10:21.136 --> 00:10:23.206 A:middle
how we can now set up and start

00:10:23.206 --> 00:10:25.186 A:middle
the workout using the new

00:10:25.276 --> 00:10:25.986 A:middle
workout builder.

00:10:29.456 --> 00:10:31.936 A:middle
So first, we need to create a

00:10:31.936 --> 00:10:32.736 A:middle
workout builder.

00:10:33.736 --> 00:10:34.956 A:middle
And to do that, we use the

00:10:34.956 --> 00:10:37.356 A:middle
initializer, and we have to pass

00:10:37.356 --> 00:10:39.526 A:middle
a healthStore object, a

00:10:39.606 --> 00:10:41.666 A:middle
configuration which contains

00:10:41.666 --> 00:10:43.646 A:middle
information like the workout

00:10:43.646 --> 00:10:45.656 A:middle
type, whether it's indoor or

00:10:45.656 --> 00:10:47.796 A:middle
outdoor, and other information.

00:10:48.616 --> 00:10:51.156 A:middle
And finally, an optional device

00:10:51.726 --> 00:10:53.546 A:middle
if the data comes from an

00:10:53.546 --> 00:10:54.906 A:middle
external device, for example.

00:10:56.336 --> 00:10:58.946 A:middle
Once my builder is created, all

00:10:58.946 --> 00:10:59.996 A:middle
I need to do is call

00:10:59.996 --> 00:11:02.706 A:middle
beginCollection and pass a start

00:10:59.996 --> 00:11:02.706 A:middle
beginCollection and pass a start

00:11:02.706 --> 00:11:02.926 A:middle
date.

00:11:04.076 --> 00:11:04.896 A:middle
It's that simple.

00:11:06.426 --> 00:11:09.046 A:middle
If you are on watchOS, you can

00:11:09.046 --> 00:11:10.676 A:middle
use the live workout builder.

00:11:11.056 --> 00:11:13.266 A:middle
And so first, you need to create

00:11:13.266 --> 00:11:15.946 A:middle
a workout session by passing the

00:11:15.946 --> 00:11:16.766 A:middle
healthStore and

00:11:16.766 --> 00:11:19.386 A:middle
workoutConfiguration, and then

00:11:19.756 --> 00:11:21.576 A:middle
you do not create the builder

00:11:21.576 --> 00:11:23.386 A:middle
yourself, but you retrieve it

00:11:23.386 --> 00:11:25.876 A:middle
directly from the session by

00:11:25.876 --> 00:11:26.626 A:middle
using this call.

00:11:27.836 --> 00:11:29.156 A:middle
Once we have the session and

00:11:29.156 --> 00:11:30.936 A:middle
builder, we can go ahead and

00:11:30.936 --> 00:11:32.146 A:middle
start them up.

00:11:32.736 --> 00:11:35.006 A:middle
And so it's as easy as calling

00:11:35.006 --> 00:11:37.466 A:middle
startActivity on the session and

00:11:37.776 --> 00:11:39.416 A:middle
beginCollection on the builder

00:11:39.916 --> 00:11:41.236 A:middle
by passing a start date.

00:11:41.726 --> 00:11:45.376 A:middle
So this is how you set up and

00:11:45.376 --> 00:11:47.496 A:middle
start a workout using the

00:11:47.496 --> 00:11:47.876 A:middle
builder.

00:11:48.886 --> 00:11:49.996 A:middle
Now, let's see how we can

00:11:50.376 --> 00:11:53.666 A:middle
collect data displayed directly

00:11:53.666 --> 00:11:56.576 A:middle
in our user interface and be

00:11:56.576 --> 00:11:58.116 A:middle
able to control the state of the

00:11:58.116 --> 00:12:00.036 A:middle
workout when the user requests

00:11:58.116 --> 00:12:00.036 A:middle
workout when the user requests

00:12:00.536 --> 00:12:00.626 A:middle
it.

00:12:02.956 --> 00:12:05.766 A:middle
So to collect data, if we want

00:12:05.766 --> 00:12:08.526 A:middle
to add samples that are relevant

00:12:08.526 --> 00:12:11.096 A:middle
to the workout, like calories,

00:12:11.096 --> 00:12:14.536 A:middle
or distance, or heart rate, we

00:12:14.536 --> 00:12:16.606 A:middle
can do that using a very simple

00:12:16.636 --> 00:12:19.666 A:middle
call, builder.add, and give it

00:12:19.666 --> 00:12:21.516 A:middle
an array of HKSamples.

00:12:22.116 --> 00:12:25.656 A:middle
If we have events that we want

00:12:25.656 --> 00:12:27.606 A:middle
to add to the workout, it's very

00:12:27.606 --> 00:12:28.036 A:middle
similar.

00:12:29.126 --> 00:12:30.416 A:middle
We just call builder

00:12:30.576 --> 00:12:32.046 A:middle
.addWorkoutEvents.

00:12:33.476 --> 00:12:36.306 A:middle
For metadata, you guessed it.

00:12:36.856 --> 00:12:38.756 A:middle
With the dictionary of metadata,

00:12:39.006 --> 00:12:41.376 A:middle
we just call builder.addMetadata

00:12:41.576 --> 00:12:43.806 A:middle
and pass the dictionary.

00:12:44.466 --> 00:12:48.526 A:middle
But on Apple Watch, because the

00:12:48.526 --> 00:12:51.536 A:middle
device is on your wrist and has

00:12:51.606 --> 00:12:53.796 A:middle
all this wide range of sensors,

00:12:54.216 --> 00:12:55.976 A:middle
you can actually generate data

00:12:56.056 --> 00:12:58.776 A:middle
like calories and distance.

00:12:59.166 --> 00:13:01.026 A:middle
And wouldn't it be cool if we

00:12:59.166 --> 00:13:01.026 A:middle
And wouldn't it be cool if we

00:13:01.056 --> 00:13:03.106 A:middle
could have all of this data

00:13:03.876 --> 00:13:05.896 A:middle
automatically collected by the

00:13:05.896 --> 00:13:06.306 A:middle
builder?

00:13:07.336 --> 00:13:10.706 A:middle
Starting with watchOS 5, we now

00:13:10.706 --> 00:13:13.856 A:middle
have automatic data collection,

00:13:14.246 --> 00:13:15.776 A:middle
and it all starts with

00:13:15.776 --> 00:13:17.856 A:middle
HKLiveWorkoutDataSource.

00:13:18.406 --> 00:13:22.086 A:middle
So the data source will collect

00:13:22.806 --> 00:13:25.346 A:middle
samples that are relevant to the

00:13:25.346 --> 00:13:27.136 A:middle
workout currently running.

00:13:29.226 --> 00:13:32.756 A:middle
You do, however, have the option

00:13:33.316 --> 00:13:34.676 A:middle
which types you want to collect,

00:13:34.776 --> 00:13:37.996 A:middle
so you can add or remove types

00:13:37.996 --> 00:13:38.556 A:middle
as you wish.

00:13:39.266 --> 00:13:40.596 A:middle
And this is how it works.

00:13:41.456 --> 00:13:43.796 A:middle
First, we create a data source.

00:13:45.056 --> 00:13:46.896 A:middle
And here, I pass the healthStore

00:13:47.386 --> 00:13:48.586 A:middle
as well as the

00:13:48.586 --> 00:13:49.836 A:middle
workoutConfiguration.

00:13:50.346 --> 00:13:51.246 A:middle
And since I'm passing the

00:13:51.246 --> 00:13:52.636 A:middle
configuration that contains

00:13:52.636 --> 00:13:54.696 A:middle
information about the activity

00:13:54.696 --> 00:13:56.816 A:middle
type, the data source will be

00:13:56.816 --> 00:13:59.806 A:middle
able to infer which types should

00:13:59.806 --> 00:14:03.136 A:middle
be collected for this workout.

00:13:59.806 --> 00:14:03.136 A:middle
be collected for this workout.

00:14:03.236 --> 00:14:05.486 A:middle
Next, I simply need to set the

00:14:05.486 --> 00:14:07.676 A:middle
data source on the live workout

00:14:07.676 --> 00:14:07.956 A:middle
builder.

00:14:09.546 --> 00:14:11.616 A:middle
And optionally, you can add or

00:14:11.616 --> 00:14:13.576 A:middle
remove types that are being

00:14:13.576 --> 00:14:14.036 A:middle
collected.

00:14:14.746 --> 00:14:16.636 A:middle
So let's say I want to add the

00:14:16.636 --> 00:14:17.016 A:middle
type.

00:14:17.686 --> 00:14:20.206 A:middle
I can specify which type I want

00:14:20.206 --> 00:14:22.096 A:middle
to add here as well as an

00:14:22.166 --> 00:14:24.056 A:middle
optional predicate if I want to

00:14:24.056 --> 00:14:26.046 A:middle
further limit which types are

00:14:26.046 --> 00:14:26.756 A:middle
being collected.

00:14:27.786 --> 00:14:29.516 A:middle
And finally, we just call

00:14:29.996 --> 00:14:30.856 A:middle
dataSource.

00:14:31.036 --> 00:14:34.566 A:middle
collectStatistics for and pass

00:14:34.616 --> 00:14:36.586 A:middle
the type as well as the

00:14:36.586 --> 00:14:37.676 A:middle
optionalPredicate.

00:14:37.966 --> 00:14:41.816 A:middle
So now that we have data being

00:14:41.866 --> 00:14:44.186 A:middle
collected, let's see how we can

00:14:44.726 --> 00:14:47.026 A:middle
display it directly in our user

00:14:47.026 --> 00:14:47.686 A:middle
interface.

00:14:48.246 --> 00:14:52.916 A:middle
So every time new data comes in

00:14:53.866 --> 00:14:55.486 A:middle
the builder's delegate method,

00:14:55.926 --> 00:14:58.346 A:middle
workout builder did collect data

00:14:58.346 --> 00:14:59.966 A:middle
of collected types will be

00:14:59.966 --> 00:15:00.356 A:middle
called.

00:14:59.966 --> 00:15:00.356 A:middle
called.

00:15:01.086 --> 00:15:03.296 A:middle
And so here, if, for example,

00:15:03.296 --> 00:15:04.866 A:middle
I'm interested in the heart rate

00:15:04.866 --> 00:15:07.346 A:middle
type, I will make sure that it's

00:15:07.346 --> 00:15:08.876 A:middle
one of the collected types.

00:15:09.046 --> 00:15:11.956 A:middle
And then, I simply make use of

00:15:11.956 --> 00:15:14.196 A:middle
the builder's statistics for

00:15:14.286 --> 00:15:16.426 A:middle
quantity type method, which

00:15:16.426 --> 00:15:19.086 A:middle
gives me an HKStatistics object

00:15:19.706 --> 00:15:21.366 A:middle
that will contain information,

00:15:21.396 --> 00:15:23.426 A:middle
in this case, like minimum,

00:15:23.726 --> 00:15:25.816 A:middle
maximum, average, as well as

00:15:25.816 --> 00:15:28.246 A:middle
most recent value for the heart

00:15:28.246 --> 00:15:30.216 A:middle
rate that's recorded throughout

00:15:30.216 --> 00:15:30.776 A:middle
this workout.

00:15:31.886 --> 00:15:33.576 A:middle
From there, I can simply update

00:15:33.576 --> 00:15:34.526 A:middle
my user interface.

00:15:35.086 --> 00:15:37.896 A:middle
One thing that's also very

00:15:37.976 --> 00:15:40.296 A:middle
common in workout apps is to

00:15:40.956 --> 00:15:43.296 A:middle
have an elapsed timer.

00:15:43.886 --> 00:15:46.756 A:middle
And so, of course, we start the

00:15:46.756 --> 00:15:48.006 A:middle
timer at the beginning of the

00:15:48.006 --> 00:15:49.936 A:middle
workout, but that's not enough

00:15:50.026 --> 00:15:52.596 A:middle
because pause or resume events

00:15:52.966 --> 00:15:54.866 A:middle
will affect duration of the

00:15:54.866 --> 00:15:55.286 A:middle
workout.

00:15:56.226 --> 00:15:58.486 A:middle
So every time new events are

00:15:58.486 --> 00:16:00.436 A:middle
added to the builder, the

00:15:58.486 --> 00:16:00.436 A:middle
added to the builder, the

00:16:00.436 --> 00:16:01.756 A:middle
builder's delegate method

00:16:02.226 --> 00:16:04.806 A:middle
workoutBuilderDid CollectEvents

00:16:04.806 --> 00:16:05.436 A:middle
will be called.

00:16:05.846 --> 00:16:08.186 A:middle
And from here, you can simply

00:16:08.186 --> 00:16:10.326 A:middle
use the builder's elapsedTime

00:16:10.326 --> 00:16:12.386 A:middle
property, which will give you

00:16:12.736 --> 00:16:14.546 A:middle
the current elapsed time for the

00:16:14.546 --> 00:16:14.986 A:middle
workout.

00:16:16.166 --> 00:16:19.536 A:middle
It's that easy.

00:16:19.736 --> 00:16:21.616 A:middle
Next, let's see how we can

00:16:21.616 --> 00:16:22.846 A:middle
control the state of the

00:16:22.846 --> 00:16:23.296 A:middle
workout.

00:16:24.916 --> 00:16:28.396 A:middle
So first, I'd like to talk about

00:16:28.506 --> 00:16:30.566 A:middle
all of the different states that

00:16:30.566 --> 00:16:32.136 A:middle
the workout session can be in.

00:16:32.746 --> 00:16:34.976 A:middle
And the first one is Not

00:16:34.976 --> 00:16:35.456 A:middle
Started.

00:16:36.366 --> 00:16:37.576 A:middle
So here, the workout has not

00:16:37.576 --> 00:16:41.356 A:middle
started yet, and we're not yet,

00:16:41.796 --> 00:16:44.056 A:middle
the user is not performing the

00:16:44.056 --> 00:16:44.496 A:middle
workout.

00:16:44.496 --> 00:16:47.136 A:middle
So after that, we'll be moving

00:16:47.456 --> 00:16:48.746 A:middle
to the Prepared state.

00:16:49.246 --> 00:16:52.146 A:middle
And so the Prepared state will

00:16:52.676 --> 00:16:54.506 A:middle
put the system in Session Mode,

00:16:54.916 --> 00:16:56.386 A:middle
which means that your

00:16:56.386 --> 00:16:58.026 A:middle
application will have background

00:16:58.026 --> 00:17:00.056 A:middle
running, the sensors will also

00:16:58.026 --> 00:17:00.056 A:middle
running, the sensors will also

00:17:00.056 --> 00:17:02.086 A:middle
be ready to track the activity,

00:17:02.886 --> 00:17:04.695 A:middle
but the workout has not started

00:17:04.695 --> 00:17:04.866 A:middle
yet.

00:17:06.156 --> 00:17:08.236 A:middle
So if you, for example, have a

00:17:08.236 --> 00:17:10.435 A:middle
countdown in your app before a

00:17:10.435 --> 00:17:12.576 A:middle
workout, you can move the

00:17:12.576 --> 00:17:14.195 A:middle
session to the Prepared state

00:17:14.195 --> 00:17:16.016 A:middle
before that to make sure that

00:17:16.316 --> 00:17:17.925 A:middle
the device is ready to start

00:17:17.925 --> 00:17:18.776 A:middle
tracking the activity.

00:17:19.296 --> 00:17:22.236 A:middle
After that, we can move to the

00:17:22.236 --> 00:17:22.996 A:middle
Running state.

00:17:23.346 --> 00:17:26.366 A:middle
And here, the user is actively

00:17:26.366 --> 00:17:26.876 A:middle
working out.

00:17:27.386 --> 00:17:29.406 A:middle
And of course, the user can move

00:17:29.406 --> 00:17:31.946 A:middle
to the Paused, back to Running,

00:17:32.516 --> 00:17:33.766 A:middle
and back and forth between these

00:17:33.766 --> 00:17:37.596 A:middle
2 until the workout is Stopped.

00:17:38.236 --> 00:17:42.016 A:middle
So here, the device is still in

00:17:42.016 --> 00:17:43.616 A:middle
Session Mode, which means that

00:17:43.616 --> 00:17:45.716 A:middle
your app is still running in the

00:17:45.716 --> 00:17:47.706 A:middle
background, so that gives you

00:17:47.706 --> 00:17:49.486 A:middle
some extra time that, if you

00:17:49.486 --> 00:17:51.066 A:middle
needed to save the workout.

00:17:51.576 --> 00:17:54.846 A:middle
After that, we can simply end

00:17:54.846 --> 00:17:55.366 A:middle
the workout.

00:17:56.056 --> 00:17:58.656 A:middle
And from there, the system will

00:17:58.716 --> 00:17:59.606 A:middle
exit Session Mode.

00:18:00.146 --> 00:18:03.126 A:middle
And to be able to move between

00:18:03.126 --> 00:18:05.356 A:middle
all these states, you simply

00:18:05.356 --> 00:18:08.166 A:middle
need to use these calls directly

00:18:08.166 --> 00:18:09.256 A:middle
on the workout session.

00:18:14.886 --> 00:18:16.916 A:middle
So that's how we can collect

00:18:16.966 --> 00:18:18.926 A:middle
data displayed in our user

00:18:18.926 --> 00:18:21.286 A:middle
interface as well as control the

00:18:21.286 --> 00:18:22.356 A:middle
state of the session.

00:18:23.296 --> 00:18:25.256 A:middle
Let's see now how we can end the

00:18:25.256 --> 00:18:26.786 A:middle
workout and save it in

00:18:26.786 --> 00:18:27.176 A:middle
HealthKit.

00:18:27.726 --> 00:18:32.066 A:middle
So to end the workout, you first

00:18:32.066 --> 00:18:35.366 A:middle
call session.end, and then you

00:18:35.366 --> 00:18:37.066 A:middle
also call builder.

00:18:37.336 --> 00:18:39.256 A:middle
endCollection and pass the

00:18:39.256 --> 00:18:40.246 A:middle
workout's end date.

00:18:41.206 --> 00:18:43.066 A:middle
At this point, no data is going

00:18:43.066 --> 00:18:44.746 A:middle
to be collected for this

00:18:44.966 --> 00:18:45.356 A:middle
workout.

00:18:45.906 --> 00:18:48.546 A:middle
And then, if you want to save

00:18:48.546 --> 00:18:50.176 A:middle
the workout in HealthKit, you

00:18:50.176 --> 00:18:51.336 A:middle
just call builder.

00:18:52.366 --> 00:18:54.706 A:middle
finishWorkout, and you will get

00:18:54.706 --> 00:18:56.946 A:middle
back a workout object in the

00:18:56.946 --> 00:18:58.576 A:middle
completion handler that's

00:18:58.626 --> 00:19:00.586 A:middle
already saved in HealthKit with

00:18:58.626 --> 00:19:00.586 A:middle
already saved in HealthKit with

00:19:00.686 --> 00:19:02.886 A:middle
all of its associated data.

00:19:04.396 --> 00:19:06.746 A:middle
So that's how you now build a

00:19:06.746 --> 00:19:08.986 A:middle
workout app using the new API.

00:19:10.006 --> 00:19:12.336 A:middle
And now, I'd like to show you

00:19:12.336 --> 00:19:14.436 A:middle
how this all works in a demo

00:19:15.096 --> 00:19:16.406 A:middle
where we will be building a

00:19:16.406 --> 00:19:18.026 A:middle
workout app for Apple Watch.

00:19:19.516 --> 00:19:25.500 A:middle
[ Applause ]

00:19:30.346 --> 00:19:32.336 A:middle
So I'm actually currently

00:19:32.336 --> 00:19:34.786 A:middle
building a workout app that will

00:19:34.786 --> 00:19:37.056 A:middle
allow my users to track running

00:19:37.056 --> 00:19:37.776 A:middle
workouts.

00:19:38.466 --> 00:19:40.096 A:middle
And it's a very simple app.

00:19:40.636 --> 00:19:42.536 A:middle
I have a big Run button here.

00:19:43.096 --> 00:19:45.436 A:middle
When I tap on it, I'm presented

00:19:45.436 --> 00:19:47.866 A:middle
with this user interface that

00:19:47.866 --> 00:19:49.976 A:middle
will show an elapsed time of

00:19:49.976 --> 00:19:51.486 A:middle
their workout as well as some

00:19:51.486 --> 00:19:53.816 A:middle
metrics, like calorie burned,

00:19:54.496 --> 00:19:56.746 A:middle
the most recent heart rate, as

00:19:56.746 --> 00:19:59.416 A:middle
well as the distance that's run

00:19:59.586 --> 00:20:00.156 A:middle
in the workout.

00:19:59.586 --> 00:20:00.156 A:middle
in the workout.

00:20:00.706 --> 00:20:02.586 A:middle
Of course, my user will have the

00:20:02.586 --> 00:20:04.686 A:middle
option to control the state of

00:20:04.686 --> 00:20:06.526 A:middle
the workout, so my user can

00:20:06.596 --> 00:20:08.666 A:middle
pause, resume, and end the

00:20:08.666 --> 00:20:09.036 A:middle
workout.

00:20:11.716 --> 00:20:14.326 A:middle
So I already went ahead and

00:20:14.326 --> 00:20:16.066 A:middle
implemented the user interface.

00:20:16.446 --> 00:20:18.626 A:middle
So all that's left for me now is

00:20:18.656 --> 00:20:20.646 A:middle
to use the new workout API and

00:20:20.986 --> 00:20:22.366 A:middle
make my app functional.

00:20:22.916 --> 00:20:25.706 A:middle
And the first thing that we need

00:20:25.706 --> 00:20:27.796 A:middle
to do here is make sure that the

00:20:27.866 --> 00:20:29.596 A:middle
project is properly set up.

00:20:30.486 --> 00:20:31.786 A:middle
And so to do that, I'm going to

00:20:31.786 --> 00:20:32.886 A:middle
head over to my Project

00:20:32.886 --> 00:20:35.596 A:middle
Settings, go to the Capabilities

00:20:35.596 --> 00:20:37.916 A:middle
tab, and here just make sure

00:20:37.916 --> 00:20:40.376 A:middle
that the HealthKit Capability is

00:20:40.416 --> 00:20:40.906 A:middle
turned on.

00:20:42.126 --> 00:20:43.716 A:middle
And you should also do the same

00:20:44.006 --> 00:20:46.026 A:middle
for your WatchKit app extension.

00:20:46.336 --> 00:20:48.236 A:middle
So again, make sure that the

00:20:48.236 --> 00:20:50.196 A:middle
HealthKit Capability is turned

00:20:50.196 --> 00:20:50.366 A:middle
on.

00:20:51.356 --> 00:20:53.646 A:middle
Once I did that, we should also

00:20:53.646 --> 00:20:56.566 A:middle
add the 2 purpose strings in the

00:20:56.566 --> 00:20:59.246 A:middle
info.plist file that will tell

00:20:59.246 --> 00:21:01.966 A:middle
my users why I need access to

00:20:59.246 --> 00:21:01.966 A:middle
my users why I need access to

00:21:01.966 --> 00:21:02.656 A:middle
their health data.

00:21:03.766 --> 00:21:06.226 A:middle
And so here, the first string is

00:21:06.646 --> 00:21:08.566 A:middle
"health share user description"

00:21:09.316 --> 00:21:11.726 A:middle
that tells my users why I would

00:21:11.726 --> 00:21:13.816 A:middle
like to save data in HealthKit

00:21:14.436 --> 00:21:16.686 A:middle
as well as help update usage

00:21:16.726 --> 00:21:17.316 A:middle
description.

00:21:17.316 --> 00:21:19.336 A:middle
That will tell them why I need

00:21:19.616 --> 00:21:23.106 A:middle
to read data in HealthKit.

00:21:23.196 --> 00:21:25.376 A:middle
Once that's done, I can now

00:21:25.666 --> 00:21:27.226 A:middle
start using the new workout API.

00:21:27.946 --> 00:21:30.096 A:middle
And of course, the first step

00:21:30.096 --> 00:21:31.686 A:middle
before being able to use the API

00:21:32.636 --> 00:21:34.576 A:middle
is to make sure that I request

00:21:34.916 --> 00:21:37.006 A:middle
authorization for the data that

00:21:37.006 --> 00:21:37.386 A:middle
I need.

00:21:38.286 --> 00:21:40.196 A:middle
And so, of course, every app is

00:21:40.226 --> 00:21:40.616 A:middle
different.

00:21:41.266 --> 00:21:43.266 A:middle
And in my case, if we go back to

00:21:43.266 --> 00:21:47.636 A:middle
my application, I will be saving

00:21:47.636 --> 00:21:48.686 A:middle
a workout here.

00:21:48.686 --> 00:21:50.796 A:middle
So that's one of the types that

00:21:50.796 --> 00:21:53.636 A:middle
I will be needing access to.

00:21:53.826 --> 00:21:55.626 A:middle
And I also need to be able to

00:21:55.686 --> 00:21:57.626 A:middle
read calories, heart rate, as

00:21:57.626 --> 00:21:58.586 A:middle
well as distance.

00:21:59.336 --> 00:22:00.026 A:middle
So let's do that.

00:21:59.336 --> 00:22:00.026 A:middle
So let's do that.

00:22:01.436 --> 00:22:03.136 A:middle
And of course, we need to make

00:22:03.136 --> 00:22:04.806 A:middle
sure that we always ask for

00:22:04.806 --> 00:22:06.476 A:middle
authorization when we need it.

00:22:07.216 --> 00:22:09.516 A:middle
In my case here, I want to do

00:22:09.516 --> 00:22:11.586 A:middle
that every time the user is

00:22:11.586 --> 00:22:14.196 A:middle
presented with this UI so that I

00:22:14.196 --> 00:22:15.416 A:middle
can make sure that I have the

00:22:15.416 --> 00:22:17.346 A:middle
authorization before starting a

00:22:17.346 --> 00:22:17.736 A:middle
workout.

00:22:19.076 --> 00:22:20.896 A:middle
So this view here is backed by

00:22:20.896 --> 00:22:24.006 A:middle
my workoutStartView Watchkit

00:22:24.006 --> 00:22:25.746 A:middle
interface controller, and I'm

00:22:25.746 --> 00:22:27.506 A:middle
going to go ahead and implement

00:22:28.046 --> 00:22:29.726 A:middle
the authorization in the

00:22:29.726 --> 00:22:31.506 A:middle
didAppear method.

00:22:33.636 --> 00:22:36.156 A:middle
So first, my typesToShare here

00:22:36.156 --> 00:22:37.746 A:middle
is workout because I want to be

00:22:37.746 --> 00:22:39.616 A:middle
able to save a workout at the

00:22:39.616 --> 00:22:39.846 A:middle
end.

00:22:42.376 --> 00:22:44.296 A:middle
Next, I would like to read

00:22:44.486 --> 00:22:47.206 A:middle
heartRate, activeEnergyBurned,

00:22:47.846 --> 00:22:48.726 A:middle
as well as

00:22:48.906 --> 00:22:50.106 A:middle
distanceWalkingRunning.

00:22:50.626 --> 00:22:53.256 A:middle
Once I have my typesToShare and

00:22:53.256 --> 00:22:55.836 A:middle
typesToRead, I just need to call

00:22:56.216 --> 00:22:57.966 A:middle
requestAuthorization on the

00:22:57.966 --> 00:23:01.796 A:middle
healthStore and pass the types.

00:22:57.966 --> 00:23:01.796 A:middle
healthStore and pass the types.

00:23:01.976 --> 00:23:03.216 A:middle
So let's go ahead and run this

00:23:03.216 --> 00:23:04.826 A:middle
code now and see what happens.

00:23:05.926 --> 00:23:08.436 A:middle
And because the watch screen is

00:23:08.436 --> 00:23:10.936 A:middle
small, the user will be

00:23:11.516 --> 00:23:13.316 A:middle
presented with an authorization

00:23:13.316 --> 00:23:14.796 A:middle
sheet on the phone.

00:23:15.786 --> 00:23:17.396 A:middle
So you need to make sure to also

00:23:17.716 --> 00:23:19.666 A:middle
handle authorization on your

00:23:19.666 --> 00:23:20.946 A:middle
iPhone app.

00:23:22.536 --> 00:23:24.076 A:middle
Going to go ahead and dismiss

00:23:24.076 --> 00:23:24.846 A:middle
this view here.

00:23:25.436 --> 00:23:27.696 A:middle
And so let's open my iPhone app.

00:23:28.306 --> 00:23:30.726 A:middle
And here, I'm presented with an

00:23:30.726 --> 00:23:32.946 A:middle
authorization sheet where I can

00:23:33.516 --> 00:23:35.716 A:middle
decide if I want to grant this

00:23:35.716 --> 00:23:37.046 A:middle
application access or not.

00:23:37.826 --> 00:23:39.006 A:middle
For the purpose of this demo,

00:23:39.006 --> 00:23:39.956 A:middle
I'm going to turn all the

00:23:39.956 --> 00:23:42.746 A:middle
categories on and tap Allow.

00:23:44.176 --> 00:23:45.856 A:middle
And that's how we have now

00:23:45.946 --> 00:23:47.396 A:middle
granted the authorization to my

00:23:47.396 --> 00:23:48.016 A:middle
application.

00:23:49.326 --> 00:23:51.746 A:middle
Next, we can now finally get

00:23:51.746 --> 00:23:54.096 A:middle
started with the workout API.

00:23:54.426 --> 00:23:56.386 A:middle
So when I tap on this button

00:23:56.386 --> 00:23:59.306 A:middle
here, this view will be passed,

00:23:59.746 --> 00:24:01.426 A:middle
all the workoutConfiguration

00:23:59.746 --> 00:24:01.426 A:middle
all the workoutConfiguration

00:24:01.426 --> 00:24:03.726 A:middle
object that contains information

00:24:03.726 --> 00:24:04.496 A:middle
about the workout.

00:24:05.046 --> 00:24:06.326 A:middle
In this instance here, it's a

00:24:06.326 --> 00:24:07.046 A:middle
running workout.

00:24:07.796 --> 00:24:09.496 A:middle
And from there, I can go ahead

00:24:09.966 --> 00:24:11.046 A:middle
and set up my workout.

00:24:12.096 --> 00:24:13.666 A:middle
So this view here is backed by

00:24:13.666 --> 00:24:16.476 A:middle
my workout session, WatchKit

00:24:16.476 --> 00:24:18.276 A:middle
interface controller, and I'm

00:24:18.276 --> 00:24:20.066 A:middle
going to go do the setup in the

00:24:20.066 --> 00:24:20.866 A:middle
awake method.

00:24:21.586 --> 00:24:24.196 A:middle
So first, I'm going to create

00:24:24.196 --> 00:24:26.296 A:middle
the HKWorkoutSession as well as

00:24:26.296 --> 00:24:27.836 A:middle
the HKLiveWorkoutBuilder.

00:24:29.996 --> 00:24:32.756 A:middle
So we create the session using

00:24:33.106 --> 00:24:35.556 A:middle
its initializer, and we pass the

00:24:35.556 --> 00:24:36.936 A:middle
workout configuration to it.

00:24:37.836 --> 00:24:39.756 A:middle
From there, we simply retrieve

00:24:40.536 --> 00:24:43.406 A:middle
the builder directly from the

00:24:44.056 --> 00:24:44.276 A:middle
session.

00:24:44.386 --> 00:24:46.766 A:middle
Creating a session might fail if

00:24:46.766 --> 00:24:48.156 A:middle
the workout configuration is

00:24:48.156 --> 00:24:50.646 A:middle
invalid, so that's why I wrap my

00:24:50.706 --> 00:24:52.806 A:middle
code here in a do-catch block

00:24:53.276 --> 00:24:55.356 A:middle
and dismiss if I have any

00:24:55.356 --> 00:24:55.896 A:middle
failures.

00:24:56.366 --> 00:25:00.156 A:middle
Next, let's set up the session

00:24:56.366 --> 00:25:00.156 A:middle
Next, let's set up the session

00:25:00.196 --> 00:25:00.706 A:middle
and builder.

00:25:01.526 --> 00:25:04.646 A:middle
So in this case, I want my

00:25:04.826 --> 00:25:06.336 A:middle
interface controller to be the

00:25:06.336 --> 00:25:08.846 A:middle
delegate of both the session and

00:25:08.846 --> 00:25:09.346 A:middle
the builder.

00:25:09.656 --> 00:25:11.326 A:middle
And because I also want to

00:25:11.386 --> 00:25:13.286 A:middle
collect samples generated by the

00:25:13.286 --> 00:25:15.666 A:middle
device, I'm going to use here a

00:25:15.666 --> 00:25:18.366 A:middle
live data source and pass it a

00:25:18.366 --> 00:25:20.676 A:middle
workout configuration so that

00:25:20.676 --> 00:25:22.576 A:middle
the types are automatically

00:25:22.656 --> 00:25:24.166 A:middle
inferred for me.

00:25:25.636 --> 00:25:28.986 A:middle
Finally, I simply start the

00:25:28.986 --> 00:25:31.166 A:middle
session as well as the builder.

00:25:31.436 --> 00:25:35.256 A:middle
So now that my workout is

00:25:35.256 --> 00:25:37.206 A:middle
started, the first thing that I

00:25:37.206 --> 00:25:39.526 A:middle
need to do is to start my

00:25:39.526 --> 00:25:40.996 A:middle
elapsedTime timer.

00:25:40.996 --> 00:25:43.026 A:middle
And so I'm going to do that here

00:25:43.506 --> 00:25:45.226 A:middle
in the callback of the

00:25:45.226 --> 00:25:46.286 A:middle
beingCollectionCall.

00:25:46.906 --> 00:25:51.356 A:middle
I have a method here that will

00:25:51.586 --> 00:25:52.196 A:middle
do that for me.

00:25:52.926 --> 00:25:55.716 A:middle
And of course, because pause and

00:25:55.716 --> 00:25:57.726 A:middle
resume events can also affect

00:25:58.586 --> 00:26:00.626 A:middle
the duration, I'm going to have

00:25:58.586 --> 00:26:00.626 A:middle
the duration, I'm going to have

00:26:00.676 --> 00:26:02.666 A:middle
this call in the builder's

00:26:02.756 --> 00:26:07.776 A:middle
didCollectEvent call as well.

00:26:07.946 --> 00:26:08.916 A:middle
Now, let's implement this

00:26:08.916 --> 00:26:09.206 A:middle
method.

00:26:10.596 --> 00:26:13.246 A:middle
So in my UI, I'm using a

00:26:13.246 --> 00:26:14.826 A:middle
WatchKit interface timer.

00:26:15.386 --> 00:26:16.586 A:middle
If you're not familiar with this

00:26:16.586 --> 00:26:19.916 A:middle
object, this object needs a date

00:26:19.986 --> 00:26:22.166 A:middle
in the past from which it will

00:26:22.166 --> 00:26:23.186 A:middle
start counting from.

00:26:23.786 --> 00:26:24.956 A:middle
So I'm going to go ahead and

00:26:24.956 --> 00:26:27.696 A:middle
create my date object using the

00:26:27.696 --> 00:26:29.676 A:middle
builder's elapsedTime property.

00:26:30.726 --> 00:26:31.906 A:middle
And because I want the date to

00:26:31.906 --> 00:26:33.496 A:middle
be in the past, I'm going to

00:26:33.796 --> 00:26:35.306 A:middle
make sure that I have a minus

00:26:35.306 --> 00:26:36.956 A:middle
sign here.

00:26:37.096 --> 00:26:39.186 A:middle
Next, I simply dispatch on the

00:26:39.186 --> 00:26:41.476 A:middle
main queue because I'm doing UI

00:26:41.476 --> 00:26:43.516 A:middle
work, and then I just set the

00:26:43.516 --> 00:26:46.606 A:middle
date on the timer.

00:26:46.606 --> 00:26:47.826 A:middle
I also need to make sure that

00:26:47.826 --> 00:26:50.376 A:middle
the timer is only running when

00:26:51.046 --> 00:26:53.076 A:middle
the session is running as well.

00:26:53.726 --> 00:26:54.456 A:middle
So let's do that.

00:26:55.376 --> 00:26:57.506 A:middle
First, I grab the session state,

00:26:58.126 --> 00:26:59.916 A:middle
and then, again, I dispatch on

00:26:59.916 --> 00:27:00.556 A:middle
the main queue.

00:26:59.916 --> 00:27:00.556 A:middle
the main queue.

00:27:00.796 --> 00:27:02.606 A:middle
And if the session is running,

00:27:03.076 --> 00:27:04.256 A:middle
I'm going to start the timer.

00:27:04.966 --> 00:27:06.116 A:middle
And if it's not, I'm going to

00:27:06.116 --> 00:27:07.336 A:middle
call Stop on the timer.

00:27:08.696 --> 00:27:09.966 A:middle
And that's all you need to do to

00:27:09.966 --> 00:27:12.176 A:middle
get the timer tracking the

00:27:12.176 --> 00:27:13.786 A:middle
elapsed time.

00:27:13.986 --> 00:27:15.826 A:middle
Next, let's make sure that our

00:27:15.826 --> 00:27:17.566 A:middle
metrics displayed in the UI are

00:27:18.016 --> 00:27:19.036 A:middle
also accurate.

00:27:19.986 --> 00:27:22.246 A:middle
So every time new samples are

00:27:22.246 --> 00:27:24.976 A:middle
collected by the builder, this

00:27:25.016 --> 00:27:26.746 A:middle
method here will be called.

00:27:27.506 --> 00:27:29.366 A:middle
And so here, I'm just going to

00:27:29.366 --> 00:27:31.016 A:middle
go and iterate over the

00:27:31.046 --> 00:27:31.946 A:middle
collectedTypes.

00:27:36.396 --> 00:27:39.016 A:middle
And, in my case, all of the data

00:27:39.016 --> 00:27:41.006 A:middle
that I'm interested in is

00:27:41.236 --> 00:27:42.336 A:middle
quantity samples.

00:27:42.416 --> 00:27:44.236 A:middle
So I'm going to make sure that I

00:27:44.236 --> 00:27:45.476 A:middle
only handle those.

00:27:46.006 --> 00:27:49.276 A:middle
And from there, we can make use

00:27:49.276 --> 00:27:53.226 A:middle
of the new builder's method,

00:27:53.636 --> 00:27:55.886 A:middle
builder.statistics, for quantity

00:27:55.886 --> 00:27:57.566 A:middle
types, which will give me an

00:27:57.566 --> 00:27:59.856 A:middle
HKStatistics object that

00:27:59.886 --> 00:28:01.336 A:middle
contains information like

00:27:59.886 --> 00:28:01.336 A:middle
contains information like

00:28:01.336 --> 00:28:04.046 A:middle
minimum, maximum, average, and

00:28:04.046 --> 00:28:05.876 A:middle
most recent values for each

00:28:06.726 --> 00:28:06.826 A:middle
type.

00:28:07.656 --> 00:28:09.716 A:middle
So I grab the statistics object

00:28:09.756 --> 00:28:12.986 A:middle
here, and from there, I have a

00:28:12.986 --> 00:28:13.916 A:middle
method that I already

00:28:13.916 --> 00:28:15.886 A:middle
implemented that will give me

00:28:15.986 --> 00:28:17.976 A:middle
the user interface label for

00:28:17.976 --> 00:28:19.556 A:middle
this particular quantity type.

00:28:20.696 --> 00:28:22.156 A:middle
And from there, it just update

00:28:22.536 --> 00:28:24.716 A:middle
my label using the statistics

00:28:24.716 --> 00:28:25.106 A:middle
object.

00:28:25.776 --> 00:28:29.046 A:middle
Next, let's make sure that we

00:28:29.046 --> 00:28:30.886 A:middle
can control the state when the

00:28:30.886 --> 00:28:32.526 A:middle
user requests it.

00:28:33.216 --> 00:28:35.876 A:middle
So every time my user will tap

00:28:35.926 --> 00:28:37.376 A:middle
the Pause button, this method

00:28:37.376 --> 00:28:38.386 A:middle
here will be called.

00:28:39.066 --> 00:28:40.486 A:middle
And from there, I simply need to

00:28:40.486 --> 00:28:42.646 A:middle
call session.pause.

00:28:43.956 --> 00:28:45.716 A:middle
For resume, it's very similar.

00:28:46.346 --> 00:28:48.626 A:middle
I'm going to do session.resume.

00:28:49.176 --> 00:28:52.376 A:middle
And finally, to end the workout,

00:28:53.176 --> 00:28:55.126 A:middle
we're going to call session.end

00:28:56.006 --> 00:28:58.936 A:middle
and then builder.endCollection

00:28:59.076 --> 00:29:00.726 A:middle
and pass the workout's end date.

00:28:59.076 --> 00:29:00.726 A:middle
and pass the workout's end date.

00:29:01.836 --> 00:29:03.496 A:middle
And from there, we're just going

00:29:03.496 --> 00:29:05.276 A:middle
to call finishWorkout to

00:29:05.276 --> 00:29:07.266 A:middle
actually save the workout and

00:29:07.326 --> 00:29:08.826 A:middle
all of its associated data in

00:29:08.826 --> 00:29:09.236 A:middle
HealthKit.

00:29:10.336 --> 00:29:11.476 A:middle
And then, we just dismissed it

00:29:11.476 --> 00:29:11.656 A:middle
here.

00:29:12.486 --> 00:29:13.856 A:middle
So let's go ahead and run this

00:29:13.856 --> 00:29:16.506 A:middle
code and see what happens now.

00:29:24.076 --> 00:29:25.456 A:middle
So I'm going to go ahead and

00:29:25.456 --> 00:29:27.116 A:middle
start my workout here.

00:29:28.326 --> 00:29:31.086 A:middle
And as we see now, I have my

00:29:31.086 --> 00:29:32.796 A:middle
timer updating.

00:29:33.226 --> 00:29:35.536 A:middle
I have data directly collected

00:29:35.536 --> 00:29:37.676 A:middle
by the builder and displayed

00:29:37.826 --> 00:29:39.416 A:middle
right in my user interface.

00:29:40.236 --> 00:29:42.886 A:middle
And of course, I can also react

00:29:42.886 --> 00:29:45.116 A:middle
to the state changes, so going

00:29:45.576 --> 00:29:47.616 A:middle
to go ahead and pause the

00:29:47.616 --> 00:29:48.176 A:middle
workout.

00:29:49.436 --> 00:29:50.606 A:middle
My timer has paused.

00:29:51.116 --> 00:29:52.396 A:middle
Data collection as well.

00:29:53.086 --> 00:29:54.606 A:middle
I can resume.

00:29:55.186 --> 00:29:58.996 A:middle
And just like that, with a few

00:29:58.996 --> 00:30:00.866 A:middle
lines of code, I now have a

00:29:58.996 --> 00:30:00.866 A:middle
lines of code, I now have a

00:30:01.016 --> 00:30:02.576 A:middle
fully functional workout app.

00:30:03.516 --> 00:30:08.616 A:middle
[ Applause ]

00:30:09.116 --> 00:30:11.416 A:middle
So I'm going to stop the workout

00:30:12.086 --> 00:30:16.346 A:middle
now, and let's see what we have

00:30:16.436 --> 00:30:18.986 A:middle
just saved in the health app on

00:30:19.266 --> 00:30:19.766 A:middle
the iPhone.

00:30:20.366 --> 00:30:25.196 A:middle
So this is my workout here that

00:30:25.196 --> 00:30:27.576 A:middle
I have just saved, and we have

00:30:27.576 --> 00:30:30.316 A:middle
now a very rich representation

00:30:30.826 --> 00:30:32.846 A:middle
of this workout saved directly

00:30:32.846 --> 00:30:33.376 A:middle
in HealthKit.

00:30:33.996 --> 00:30:36.286 A:middle
I have the device details as

00:30:36.286 --> 00:30:37.916 A:middle
well as all of the samples that

00:30:37.916 --> 00:30:39.476 A:middle
were associated, like heart

00:30:39.476 --> 00:30:42.066 A:middle
rate, distance, and active

00:30:42.066 --> 00:30:44.546 A:middle
energy, and, also, the workout

00:30:44.636 --> 00:30:46.816 A:middle
events that were generated when

00:30:46.816 --> 00:30:48.256 A:middle
I paused and resumed the

00:30:48.256 --> 00:30:48.666 A:middle
session.

00:30:57.386 --> 00:30:59.676 A:middle
And that's how easy it is now to

00:30:59.676 --> 00:31:02.056 A:middle
build a full-featured workout

00:30:59.676 --> 00:31:02.056 A:middle
build a full-featured workout

00:31:02.056 --> 00:31:03.596 A:middle
app on Apple Watch.

00:31:05.516 --> 00:31:09.776 A:middle
[ Applause ]

00:31:10.276 --> 00:31:12.876 A:middle
But of course, sometimes things

00:31:12.906 --> 00:31:14.156 A:middle
don't go as planned.

00:31:14.906 --> 00:31:17.366 A:middle
Let's say I'm running my first

00:31:17.366 --> 00:31:19.416 A:middle
marathon and I'm really excited

00:31:19.416 --> 00:31:21.526 A:middle
about it and using my favorite

00:31:21.526 --> 00:31:23.106 A:middle
workout app to track this

00:31:23.106 --> 00:31:25.776 A:middle
marathon, but I only realize at

00:31:25.836 --> 00:31:28.336 A:middle
the end that the app actually

00:31:28.336 --> 00:31:30.126 A:middle
crashed sometime in the middle,

00:31:30.596 --> 00:31:32.876 A:middle
making me lose all of this data.

00:31:33.146 --> 00:31:35.496 A:middle
Well, with watchOS 5, we are

00:31:35.496 --> 00:31:37.426 A:middle
introducing workout recovery

00:31:38.086 --> 00:31:39.626 A:middle
that will solve that problem for

00:31:40.396 --> 00:31:40.463 A:middle
you.

00:31:41.516 --> 00:31:44.156 A:middle
[ Applause ]

00:31:44.656 --> 00:31:46.336 A:middle
If your application happens to

00:31:46.336 --> 00:31:48.496 A:middle
crash during an active workout,

00:31:49.286 --> 00:31:51.056 A:middle
we will automatically relaunch

00:31:51.056 --> 00:31:52.966 A:middle
it and give it a chance to

00:31:52.966 --> 00:31:53.986 A:middle
recover the workout.

00:31:55.376 --> 00:31:57.116 A:middle
The workout session as well as

00:31:57.116 --> 00:32:00.046 A:middle
the builder will be recovered in

00:31:57.116 --> 00:32:00.046 A:middle
the builder will be recovered in

00:32:00.046 --> 00:32:01.826 A:middle
their previous state, so you

00:32:01.826 --> 00:32:04.166 A:middle
should not call startActivity or

00:32:04.166 --> 00:32:07.736 A:middle
beginCollection on the builder.

00:32:07.876 --> 00:32:09.706 A:middle
If you are using a data source

00:32:09.816 --> 00:32:12.046 A:middle
to automatically collect data,

00:32:12.516 --> 00:32:14.056 A:middle
you do need to set it up again,

00:32:14.636 --> 00:32:18.586 A:middle
and this is how it works.

00:32:18.746 --> 00:32:20.736 A:middle
If your app is relaunched after

00:32:20.736 --> 00:32:23.386 A:middle
a crash, we will be calling the

00:32:23.386 --> 00:32:25.166 A:middle
WatchKit extension delegate

00:32:25.166 --> 00:32:27.136 A:middle
method, handleActive

00:32:27.136 --> 00:32:27.936 A:middle
WorkoutRecovery.

00:32:29.036 --> 00:32:30.806 A:middle
From there, you simply need to

00:32:31.096 --> 00:32:33.876 A:middle
create a healthStore object and

00:32:33.876 --> 00:32:37.456 A:middle
then call recoverActive Workout

00:32:37.456 --> 00:32:39.896 A:middle
Session, and you will get back a

00:32:39.896 --> 00:32:41.496 A:middle
session in the completion

00:32:41.496 --> 00:32:41.836 A:middle
handler.

00:32:42.876 --> 00:32:43.576 A:middle
It's that simple.

00:32:44.206 --> 00:32:49.066 A:middle
So this is our new workout API.

00:32:49.276 --> 00:32:52.606 A:middle
It makes it easier than ever to

00:32:52.606 --> 00:32:54.136 A:middle
build great workout apps.

00:32:54.996 --> 00:32:57.246 A:middle
We also have a new Quantity

00:32:57.246 --> 00:32:57.956 A:middle
series API.

00:32:58.616 --> 00:33:00.156 A:middle
And for that, I'd like to hand

00:32:58.616 --> 00:33:00.156 A:middle
And for that, I'd like to hand

00:33:00.156 --> 00:33:01.576 A:middle
it back to my colleague Niharika

00:33:02.076 --> 00:33:03.126 A:middle
to tell you more about it.

00:33:04.516 --> 00:33:08.006 A:middle
[ Applause ]

00:33:08.506 --> 00:33:10.146 A:middle
&gt;&gt; Isn't that incredible?

00:33:10.336 --> 00:33:12.056 A:middle
In less than 10 minutes, Karim

00:33:12.056 --> 00:33:13.246 A:middle
was able to build a fully

00:33:13.246 --> 00:33:14.436 A:middle
functional workout app.

00:33:14.666 --> 00:33:16.196 A:middle
And this is so important

00:33:16.226 --> 00:33:17.176 A:middle
because, like I mentioned

00:33:17.176 --> 00:33:19.476 A:middle
earlier, our users love doing

00:33:19.476 --> 00:33:19.946 A:middle
workouts.

00:33:21.146 --> 00:33:22.696 A:middle
And with these workouts come a

00:33:22.696 --> 00:33:23.466 A:middle
lot of data.

00:33:23.466 --> 00:33:25.286 A:middle
Let's say I'm interested in

00:33:25.286 --> 00:33:26.976 A:middle
making a soccer app.

00:33:26.976 --> 00:33:28.406 A:middle
I really want to understand

00:33:28.406 --> 00:33:30.186 A:middle
exactly how my users are moving,

00:33:30.376 --> 00:33:31.996 A:middle
and I want to track the distance

00:33:31.996 --> 00:33:33.866 A:middle
they're moving as they go side

00:33:33.866 --> 00:33:36.166 A:middle
to side, across the field during

00:33:36.166 --> 00:33:37.386 A:middle
the duration of a workout.

00:33:37.716 --> 00:33:39.616 A:middle
And what happens when we start

00:33:39.616 --> 00:33:41.396 A:middle
the workout is that samples

00:33:41.396 --> 00:33:42.216 A:middle
start coming in.

00:33:42.856 --> 00:33:45.246 A:middle
My user first goes 2.25.

00:33:45.736 --> 00:33:47.386 A:middle
They then go 1.6.

00:33:47.856 --> 00:33:48.866 A:middle
They go a little more.

00:33:49.186 --> 00:33:50.586 A:middle
And then, they finish it off.

00:33:50.986 --> 00:33:52.786 A:middle
And in the past, each one of

00:33:52.786 --> 00:33:54.416 A:middle
these distances would be stored

00:33:54.416 --> 00:33:56.596 A:middle
as 1 individual HKQuantity

00:33:56.596 --> 00:33:56.976 A:middle
sample.

00:33:57.636 --> 00:33:59.196 A:middle
Each one would be independent,

00:33:59.196 --> 00:34:00.016 A:middle
and they would be stored

00:33:59.196 --> 00:34:00.016 A:middle
and they would be stored

00:34:00.016 --> 00:34:00.576 A:middle
separately.

00:34:01.366 --> 00:34:02.766 A:middle
And so we thought that, wouldn't

00:34:02.766 --> 00:34:03.856 A:middle
it be great if you could

00:34:03.856 --> 00:34:05.976 A:middle
actually just have 1 sample that

00:34:05.976 --> 00:34:08.166 A:middle
tracks that cumulative total but

00:34:08.166 --> 00:34:09.545 A:middle
is still backed by those

00:34:09.596 --> 00:34:11.356 A:middle
individual quantities behind it?

00:34:11.416 --> 00:34:13.876 A:middle
And that's why we've introduced

00:34:13.876 --> 00:34:14.585 A:middle
HKCumulative

00:34:14.585 --> 00:34:16.456 A:middle
QuantitySeriesSample, which is a

00:34:16.456 --> 00:34:17.906 A:middle
brand new sample type that

00:34:17.906 --> 00:34:19.516 A:middle
allows you to more efficiently

00:34:19.516 --> 00:34:21.106 A:middle
store high-frequency data, and

00:34:21.666 --> 00:34:23.005 A:middle
it's great for 2 reasons.

00:34:23.196 --> 00:34:25.116 A:middle
Number 1, you only have to store

00:34:25.116 --> 00:34:26.775 A:middle
1 sample that is backed by

00:34:26.775 --> 00:34:28.416 A:middle
multiple quantities, and so

00:34:28.416 --> 00:34:29.876 A:middle
you're more efficiently storing

00:34:30.176 --> 00:34:31.556 A:middle
the high-frequency data that

00:34:31.735 --> 00:34:33.346 A:middle
comes from things like workouts.

00:34:33.775 --> 00:34:36.076 A:middle
And number 2, you now have a

00:34:36.076 --> 00:34:38.286 A:middle
sense of connection between the

00:34:38.286 --> 00:34:39.536 A:middle
quantities that make up a

00:34:39.536 --> 00:34:40.025 A:middle
sample.

00:34:40.936 --> 00:34:43.016 A:middle
So our new quantity series

00:34:43.016 --> 00:34:44.196 A:middle
sample is a subclass of

00:34:44.196 --> 00:34:45.996 A:middle
HKQuantitySample, which some of

00:34:45.996 --> 00:34:47.716 A:middle
you may already be familiar

00:34:47.716 --> 00:34:47.956 A:middle
with.

00:34:48.246 --> 00:34:49.656 A:middle
And if you've interacted with

00:34:49.656 --> 00:34:51.426 A:middle
HKQuantitySample before, our new

00:34:51.426 --> 00:34:53.386 A:middle
sample type will be very much

00:34:53.436 --> 00:34:53.906 A:middle
the same.

00:34:55.335 --> 00:34:56.626 A:middle
So why would you want to use

00:34:56.686 --> 00:34:56.886 A:middle
this?

00:34:57.836 --> 00:34:59.106 A:middle
Let's say you're interested in

00:34:59.106 --> 00:35:00.316 A:middle
data visualization.

00:34:59.106 --> 00:35:00.316 A:middle
data visualization.

00:35:00.366 --> 00:35:02.086 A:middle
Your app requires complex

00:35:02.086 --> 00:35:04.026 A:middle
charting or graphs, and you're

00:35:04.026 --> 00:35:05.426 A:middle
trying to really visualize the

00:35:05.426 --> 00:35:06.886 A:middle
data that your users have in a

00:35:06.886 --> 00:35:07.616 A:middle
beautiful way.

00:35:08.426 --> 00:35:09.826 A:middle
We actually suggest that you

00:35:09.826 --> 00:35:11.026 A:middle
continue using our

00:35:11.026 --> 00:35:13.226 A:middle
HKStatisticsQuery or our

00:35:13.226 --> 00:35:15.046 A:middle
HKStatistics CollectionQuery.

00:35:15.046 --> 00:35:16.526 A:middle
And that's because those are

00:35:16.526 --> 00:35:18.886 A:middle
preexisting queries that do just

00:35:18.886 --> 00:35:19.186 A:middle
this.

00:35:19.336 --> 00:35:20.796 A:middle
You have access to really

00:35:20.906 --> 00:35:23.266 A:middle
fine-grained, rich data, and

00:35:23.266 --> 00:35:24.866 A:middle
these queries will already get

00:35:24.936 --> 00:35:26.916 A:middle
the fine-grained data on our new

00:35:26.916 --> 00:35:28.586 A:middle
series samples, so you won't

00:35:28.586 --> 00:35:30.366 A:middle
have to do any extra work to get

00:35:30.426 --> 00:35:31.136 A:middle
those details.

00:35:32.466 --> 00:35:33.606 A:middle
If, for example, you're

00:35:33.606 --> 00:35:35.646 A:middle
interested in data analysis, you

00:35:35.646 --> 00:35:37.156 A:middle
want to go 1 step deeper.

00:35:37.246 --> 00:35:38.456 A:middle
You want to understand the

00:35:38.456 --> 00:35:40.096 A:middle
actual quantities that make up a

00:35:40.096 --> 00:35:40.576 A:middle
sample.

00:35:41.426 --> 00:35:44.046 A:middle
We suggest you use our new

00:35:44.046 --> 00:35:45.276 A:middle
series sample query.

00:35:45.986 --> 00:35:47.736 A:middle
And lastly, if you're like me

00:35:47.736 --> 00:35:48.906 A:middle
and have a soccer app [laughs]

00:35:48.906 --> 00:35:50.866 A:middle
or any app that has really

00:35:50.866 --> 00:35:52.396 A:middle
high-frequency data collection,

00:35:53.126 --> 00:35:54.666 A:middle
we suggest that you use our new

00:35:54.666 --> 00:35:56.226 A:middle
Quantity series sample builder,

00:35:56.486 --> 00:35:57.746 A:middle
which is a brand-new way for you

00:35:57.746 --> 00:35:59.096 A:middle
to actually be able to create

00:35:59.146 --> 00:36:00.556 A:middle
those new cumulative Quantity

00:35:59.146 --> 00:36:00.556 A:middle
those new cumulative Quantity

00:36:00.556 --> 00:36:02.326 A:middle
series samples and store that

00:36:02.326 --> 00:36:04.416 A:middle
data in a more efficient way.

00:36:05.696 --> 00:36:07.216 A:middle
So let's start with our sample

00:36:07.246 --> 00:36:07.606 A:middle
query.

00:36:07.856 --> 00:36:09.526 A:middle
Like I mentioned, this is a way

00:36:09.526 --> 00:36:11.386 A:middle
for you to be able to really

00:36:11.386 --> 00:36:13.436 A:middle
look deeper and understand the

00:36:13.436 --> 00:36:15.506 A:middle
individual HK quantities that

00:36:15.506 --> 00:36:16.976 A:middle
make up a Quantity series

00:36:16.976 --> 00:36:17.386 A:middle
sample.

00:36:18.606 --> 00:36:20.096 A:middle
And in code, we, of course,

00:36:20.096 --> 00:36:21.556 A:middle
first want to start with

00:36:21.616 --> 00:36:22.616 A:middle
figuring out where we're going

00:36:22.616 --> 00:36:23.876 A:middle
to store our new quantities.

00:36:23.936 --> 00:36:25.276 A:middle
In my case, I'm going to store

00:36:25.276 --> 00:36:26.366 A:middle
it in an array of quantities.

00:36:26.956 --> 00:36:29.696 A:middle
We next want to initialize our

00:36:29.696 --> 00:36:30.176 A:middle
query.

00:36:30.556 --> 00:36:32.276 A:middle
We initialize it with the sample

00:36:32.276 --> 00:36:33.226 A:middle
that we're interested in.

00:36:33.486 --> 00:36:35.236 A:middle
And in our completion handler is

00:36:35.236 --> 00:36:36.426 A:middle
where the bulk of the work

00:36:36.426 --> 00:36:36.926 A:middle
happens.

00:36:37.406 --> 00:36:39.526 A:middle
In my case, I have a method

00:36:39.526 --> 00:36:41.026 A:middle
called analyzeQuantity which is

00:36:41.026 --> 00:36:42.156 A:middle
going to do the work that I'm

00:36:42.156 --> 00:36:43.756 A:middle
interested in with the quantity.

00:36:43.756 --> 00:36:45.656 A:middle
In my case, that's adding it to

00:36:45.656 --> 00:36:46.636 A:middle
the array of quantities that I

00:36:46.636 --> 00:36:47.456 A:middle
declared earlier.

00:36:48.356 --> 00:36:50.116 A:middle
And lastly, we execute our

00:36:50.116 --> 00:36:50.636 A:middle
query.

00:36:51.226 --> 00:36:52.416 A:middle
It's really that simple.

00:36:53.036 --> 00:36:54.336 A:middle
For those of you familiar with

00:36:54.336 --> 00:36:55.636 A:middle
some of our other queries, this

00:36:55.806 --> 00:36:57.456 A:middle
behaves in a very similar way.

00:36:59.546 --> 00:37:01.376 A:middle
Next, we have our Quantity

00:36:59.546 --> 00:37:01.376 A:middle
Next, we have our Quantity

00:37:01.376 --> 00:37:03.116 A:middle
series sample builder, which,

00:37:03.116 --> 00:37:04.396 A:middle
like I mentioned, is really

00:37:04.396 --> 00:37:06.036 A:middle
great for apps that do have

00:37:06.106 --> 00:37:07.706 A:middle
high-frequency data ingestion

00:37:08.106 --> 00:37:09.526 A:middle
because it's a more efficient

00:37:09.526 --> 00:37:10.986 A:middle
way to store that data but also

00:37:10.986 --> 00:37:12.906 A:middle
allows you to kind of create

00:37:13.096 --> 00:37:14.326 A:middle
connections between that.

00:37:15.166 --> 00:37:16.906 A:middle
So first, we, of course, want to

00:37:16.906 --> 00:37:19.326 A:middle
start with creating our sample

00:37:19.326 --> 00:37:19.666 A:middle
builder.

00:37:19.946 --> 00:37:20.676 A:middle
We initialize with the

00:37:20.776 --> 00:37:22.346 A:middle
healthStore and we initialize it

00:37:22.346 --> 00:37:23.686 A:middle
with the quantityType that we're

00:37:23.686 --> 00:37:24.376 A:middle
interested in.

00:37:25.126 --> 00:37:27.346 A:middle
Next, for whatever cadence

00:37:27.346 --> 00:37:28.756 A:middle
you're interested in inserting

00:37:28.756 --> 00:37:30.036 A:middle
samples, you do that.

00:37:30.506 --> 00:37:32.006 A:middle
Let's use my soccer app as an

00:37:32.006 --> 00:37:32.576 A:middle
example.

00:37:33.026 --> 00:37:34.616 A:middle
I am super interested in the

00:37:34.616 --> 00:37:36.476 A:middle
actual distances that my users

00:37:36.476 --> 00:37:37.726 A:middle
are moving, so I'm going to

00:37:37.726 --> 00:37:39.996 A:middle
declare the meter unit as the

00:37:39.996 --> 00:37:41.316 A:middle
quantity that I'm interested in,

00:37:41.576 --> 00:37:43.236 A:middle
and I insert that into my

00:37:43.236 --> 00:37:44.056 A:middle
seriesBuilder.

00:37:44.816 --> 00:37:48.506 A:middle
And at the end, we call finish

00:37:48.826 --> 00:37:50.606 A:middle
on my series, and we're actually

00:37:50.606 --> 00:37:52.426 A:middle
going to get the new Quantity

00:37:52.426 --> 00:37:54.106 A:middle
series sample and be able to

00:37:54.106 --> 00:37:55.376 A:middle
have stored that in a more

00:37:55.376 --> 00:37:56.066 A:middle
efficient way.

00:37:56.636 --> 00:37:57.986 A:middle
And so we're really, really

00:37:57.986 --> 00:37:59.596 A:middle
excited for you to start

00:37:59.596 --> 00:38:00.946 A:middle
implemented our new Quantity

00:37:59.596 --> 00:38:00.946 A:middle
implemented our new Quantity

00:38:01.036 --> 00:38:02.746 A:middle
series APIs in your apps because

00:38:02.746 --> 00:38:04.376 A:middle
it's a brand-new way to store

00:38:04.376 --> 00:38:06.086 A:middle
your data more efficiently, and

00:38:06.086 --> 00:38:07.726 A:middle
its ability to be able to relate

00:38:07.726 --> 00:38:09.536 A:middle
data together really allows for

00:38:09.536 --> 00:38:10.866 A:middle
some interesting analysis.

00:38:14.206 --> 00:38:16.576 A:middle
So we have talked about a lot of

00:38:16.576 --> 00:38:18.466 A:middle
interesting things, and we think

00:38:18.466 --> 00:38:19.876 A:middle
that the best way to think about

00:38:19.876 --> 00:38:21.436 A:middle
them is actually as parts of a

00:38:21.436 --> 00:38:23.246 A:middle
whole because together they

00:38:23.246 --> 00:38:24.996 A:middle
really make up a way for you to

00:38:24.996 --> 00:38:26.666 A:middle
respect your users' user

00:38:26.666 --> 00:38:28.666 A:middle
experience from start to finish.

00:38:29.296 --> 00:38:31.396 A:middle
Of course, we have to start with

00:38:31.396 --> 00:38:32.716 A:middle
respecting user privacy.

00:38:32.986 --> 00:38:35.496 A:middle
Our users are giving access to

00:38:35.496 --> 00:38:36.496 A:middle
one of their most sensitive

00:38:36.496 --> 00:38:38.706 A:middle
data, and it is so important for

00:38:38.706 --> 00:38:39.756 A:middle
us to make sure that we're

00:38:39.756 --> 00:38:41.046 A:middle
treating it with the respect

00:38:41.046 --> 00:38:41.746 A:middle
that it deserves.

00:38:42.616 --> 00:38:44.836 A:middle
Next, with the brand-new workout

00:38:44.836 --> 00:38:46.466 A:middle
features Karim mentioned, we're

00:38:46.466 --> 00:38:48.076 A:middle
able to create seamless user

00:38:48.076 --> 00:38:48.806 A:middle
experiences.

00:38:49.216 --> 00:38:50.626 A:middle
With things like workout crash

00:38:50.626 --> 00:38:52.376 A:middle
recovery, we're able to really

00:38:52.376 --> 00:38:54.106 A:middle
deliver an experience to our

00:38:54.106 --> 00:38:55.636 A:middle
users that they expect.

00:38:56.326 --> 00:38:58.426 A:middle
And lastly, by implementing our

00:38:58.426 --> 00:39:00.456 A:middle
new Quantity series APIs, you're

00:38:58.426 --> 00:39:00.456 A:middle
new Quantity series APIs, you're

00:39:00.456 --> 00:39:01.726 A:middle
respecting the device's

00:39:01.726 --> 00:39:03.386 A:middle
capabilities and really making

00:39:03.386 --> 00:39:05.246 A:middle
sure that, from start to finish,

00:39:05.586 --> 00:39:06.956 A:middle
you are giving your users the

00:39:06.956 --> 00:39:08.306 A:middle
best experience possible.

00:39:08.866 --> 00:39:10.246 A:middle
And as the health and fitness

00:39:10.246 --> 00:39:11.966 A:middle
space and as workout apps just

00:39:11.966 --> 00:39:13.916 A:middle
keep growing and users keep

00:39:13.916 --> 00:39:15.506 A:middle
using them more, we're so

00:39:15.506 --> 00:39:17.016 A:middle
excited to see how these steps

00:39:17.016 --> 00:39:18.526 A:middle
come together to create really

00:39:18.526 --> 00:39:19.776 A:middle
incredible experiences.

00:39:21.326 --> 00:39:22.796 A:middle
So for more information, please

00:39:22.796 --> 00:39:23.576 A:middle
check out our developer

00:39:23.576 --> 00:39:25.236 A:middle
documentation, but we'd actually

00:39:25.236 --> 00:39:26.656 A:middle
love to see you in person today.

00:39:26.686 --> 00:39:28.416 A:middle
We're going to be at a lab today

00:39:28.416 --> 00:39:30.546 A:middle
from 1 to 3 as well as our

00:39:30.616 --> 00:39:31.786 A:middle
Health, Fitness, and Research

00:39:31.786 --> 00:39:33.196 A:middle
Get-Together later this evening,

00:39:33.196 --> 00:39:34.406 A:middle
and we'd love to answer any of

00:39:34.406 --> 00:39:35.886 A:middle
your questions, and hear your

00:39:35.886 --> 00:39:38.026 A:middle
stories, and meet you in person.

00:39:38.116 --> 00:39:39.816 A:middle
We also want to mention that we

00:39:39.816 --> 00:39:41.166 A:middle
have a brand-new features in

00:39:41.166 --> 00:39:43.146 A:middle
HealthKit, and we'd love for you

00:39:43.146 --> 00:39:44.436 A:middle
all to check out their talk,

00:39:44.436 --> 00:39:45.606 A:middle
Accessing Health Records with

00:39:45.606 --> 00:39:46.056 A:middle
HealthKit.

00:39:47.306 --> 00:39:48.256 A:middle
So thank you so much.

00:39:48.256 --> 00:39:49.746 A:middle
We're so excited to see what you

00:39:49.746 --> 00:39:50.486 A:middle
all do with this.

00:39:50.996 --> 00:39:51.516 A:middle
Thank you.

00:39:52.516 --> 00:39:58.840 A:middle
[ Applause ]
