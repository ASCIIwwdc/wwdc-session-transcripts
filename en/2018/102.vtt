WEBVTT

00:00:07.516 --> 00:00:14.500 A:middle
[ Music ]

00:00:18.316 --> 00:00:21.796 A:middle
&gt;&gt; Ladies and gentlemen, please

00:00:21.796 --> 00:00:22.946 A:middle
welcome Vice President of

00:00:22.946 --> 00:00:23.426 A:middle
Software, Sebastian

00:00:23.426 --> 00:00:23.976 A:middle
Marineau-Mes.

00:00:24.516 --> 00:00:31.796 A:middle
[ Applause ]

00:00:32.296 --> 00:00:34.136 A:middle
&gt;&gt; Good afternoon, everyone.

00:00:34.606 --> 00:00:36.046 A:middle
Welcome to the afternoon session

00:00:36.046 --> 00:00:38.416 A:middle
of WWDC 2018.

00:00:39.166 --> 00:00:40.906 A:middle
Now, we had a really, really

00:00:40.906 --> 00:00:42.226 A:middle
great session this morning.

00:00:42.446 --> 00:00:43.476 A:middle
I think you all enjoyed the

00:00:43.476 --> 00:00:44.446 A:middle
keynote?

00:00:44.546 --> 00:00:45.456 A:middle
Lots of great things were

00:00:45.456 --> 00:00:46.086 A:middle
presented.

00:00:46.086 --> 00:00:48.166 A:middle
And I think you saw that 2018 is

00:00:48.166 --> 00:00:49.736 A:middle
a year with a strong focus on

00:00:49.736 --> 00:00:51.516 A:middle
the fundamentals across our

00:00:51.516 --> 00:00:53.586 A:middle
entire ecosystem where we pushed

00:00:53.586 --> 00:00:55.446 A:middle
the boundaries in key technology

00:00:55.446 --> 00:00:55.816 A:middle
areas.

00:00:56.636 --> 00:00:57.976 A:middle
We're introducing numerous APIs

00:00:57.976 --> 00:01:00.326 A:middle
and capabilities that enable new

00:00:57.976 --> 00:01:00.326 A:middle
and capabilities that enable new

00:01:00.326 --> 00:01:02.356 A:middle
experiences covering a broad

00:01:02.356 --> 00:01:03.466 A:middle
spectrum that ranges from

00:01:03.466 --> 00:01:05.056 A:middle
machine learning, augmented

00:01:05.056 --> 00:01:06.566 A:middle
reality, high performance

00:01:06.566 --> 00:01:08.446 A:middle
graphics and of course, new

00:01:08.446 --> 00:01:09.236 A:middle
development tools.

00:01:10.146 --> 00:01:11.686 A:middle
Now, many of the improvements in

00:01:11.686 --> 00:01:13.456 A:middle
the APIs apply to all of our

00:01:13.456 --> 00:01:15.396 A:middle
operating systems so they all

00:01:15.396 --> 00:01:16.736 A:middle
move forward together.

00:01:17.116 --> 00:01:18.856 A:middle
And iCloud provides the fabric

00:01:18.856 --> 00:01:20.496 A:middle
that enables a unified and

00:01:20.496 --> 00:01:23.056 A:middle
consistent experience across all

00:01:23.056 --> 00:01:23.836 A:middle
of our devices.

00:01:24.956 --> 00:01:27.166 A:middle
In iOS 12, we've seen a huge

00:01:27.166 --> 00:01:28.126 A:middle
number of incredible new

00:01:28.126 --> 00:01:29.706 A:middle
features including these great

00:01:29.706 --> 00:01:31.476 A:middle
new capabilities in AR, the

00:01:31.476 --> 00:01:32.906 A:middle
camera effects in Messages,

00:01:33.276 --> 00:01:35.756 A:middle
multi-way FaceTime, usage data

00:01:35.976 --> 00:01:38.136 A:middle
with Screen Time, richer photos

00:01:38.136 --> 00:01:40.366 A:middle
and of course, a great focus on

00:01:40.366 --> 00:01:40.946 A:middle
performance.

00:01:41.906 --> 00:01:44.186 A:middle
And with macOS, we're really

00:01:44.186 --> 00:01:46.266 A:middle
excited to introduce Dark Mode,

00:01:46.556 --> 00:01:48.246 A:middle
New Finder on desktop features,

00:01:48.736 --> 00:01:51.246 A:middle
new apps like news and stocks, a

00:01:51.246 --> 00:01:53.306 A:middle
redesigned Mac App Store, and a

00:01:53.306 --> 00:01:55.146 A:middle
strong focus on security and

00:01:55.146 --> 00:01:58.406 A:middle
privacy, watchOS 5 brings

00:01:58.496 --> 00:01:59.876 A:middle
customizable interactive

00:01:59.876 --> 00:02:02.166 A:middle
notifications, support for your

00:01:59.876 --> 00:02:02.166 A:middle
notifications, support for your

00:02:02.166 --> 00:02:03.906 A:middle
app content and shortcuts on the

00:02:04.006 --> 00:02:05.966 A:middle
Siri Watch face, background

00:02:05.966 --> 00:02:08.356 A:middle
audio mode and improved workout

00:02:08.356 --> 00:02:08.626 A:middle
API.

00:02:08.626 --> 00:02:12.526 A:middle
And in tvOS, we're adding Dolby

00:02:12.526 --> 00:02:14.276 A:middle
Atmos support so that video apps

00:02:14.276 --> 00:02:16.016 A:middle
can deliver immersive audio

00:02:16.016 --> 00:02:16.736 A:middle
experiences.

00:02:16.736 --> 00:02:17.706 A:middle
We heard that this morning,

00:02:17.706 --> 00:02:18.386 A:middle
really amazing.

00:02:18.886 --> 00:02:20.636 A:middle
Secure password sharing from iOS

00:02:20.636 --> 00:02:22.596 A:middle
devices so it makes it really

00:02:22.596 --> 00:02:23.686 A:middle
easy to slide into through Apple

00:02:23.686 --> 00:02:26.376 A:middle
TV apps, VPP support and

00:02:26.376 --> 00:02:28.416 A:middle
enhancements to UIKit and TV ML

00:02:28.416 --> 00:02:30.816 A:middle
Kit to make it even easier for

00:02:30.816 --> 00:02:32.136 A:middle
you to build native apps that

00:02:32.136 --> 00:02:33.296 A:middle
look and feel great.

00:02:34.526 --> 00:02:36.526 A:middle
Now our great products are

00:02:36.526 --> 00:02:38.156 A:middle
platforms and all of your apps

00:02:38.466 --> 00:02:39.676 A:middle
truly impact the world.

00:02:39.676 --> 00:02:40.866 A:middle
And when you think of the

00:02:40.866 --> 00:02:42.196 A:middle
breadth and the scale of our

00:02:42.196 --> 00:02:44.126 A:middle
ecosystem, it really makes us an

00:02:44.126 --> 00:02:45.866 A:middle
essential part of our users'

00:02:45.866 --> 00:02:46.166 A:middle
life.

00:02:47.016 --> 00:02:48.386 A:middle
Be it helping them explore their

00:02:48.386 --> 00:02:50.516 A:middle
creativity, connecting with the

00:02:50.516 --> 00:02:52.956 A:middle
people they care most about or

00:02:52.956 --> 00:02:54.276 A:middle
transforming the way that

00:02:54.276 --> 00:02:56.656 A:middle
healthcare is delivered, we

00:02:56.656 --> 00:02:58.536 A:middle
together focus on what's most

00:02:58.536 --> 00:03:00.416 A:middle
important to our users and we

00:02:58.536 --> 00:03:00.416 A:middle
important to our users and we

00:03:00.416 --> 00:03:02.396 A:middle
deliver these great experiences.

00:03:03.586 --> 00:03:04.966 A:middle
Now we think technology is most

00:03:05.016 --> 00:03:06.646 A:middle
powerful when it empowers

00:03:06.936 --> 00:03:07.576 A:middle
everyone.

00:03:08.506 --> 00:03:10.116 A:middle
And so we work to make every

00:03:10.116 --> 00:03:12.636 A:middle
Apple product accessible from

00:03:12.636 --> 00:03:13.456 A:middle
the very start.

00:03:14.176 --> 00:03:15.826 A:middle
We provide great capabilities

00:03:16.226 --> 00:03:18.026 A:middle
that make our platforms and all

00:03:18.026 --> 00:03:19.816 A:middle
of your apps accessible and we

00:03:19.816 --> 00:03:21.166 A:middle
want to encourage you to take,

00:03:21.166 --> 00:03:22.496 A:middle
keep taking advantage of these

00:03:22.866 --> 00:03:24.316 A:middle
because it's really important to

00:03:24.316 --> 00:03:24.996 A:middle
those users.

00:03:26.416 --> 00:03:28.166 A:middle
Now, our users also entrust us

00:03:28.166 --> 00:03:29.786 A:middle
with their most precious data.

00:03:30.216 --> 00:03:31.676 A:middle
And so at Apple, we think deeply

00:03:31.676 --> 00:03:33.096 A:middle
about privacy and security.

00:03:33.566 --> 00:03:35.216 A:middle
And I'd like to invite Katie up

00:03:35.216 --> 00:03:36.756 A:middle
on stage to tell you more about

00:03:36.756 --> 00:03:36.846 A:middle
this.

00:03:36.846 --> 00:03:36.976 A:middle
Katie?

00:03:37.516 --> 00:03:45.096 A:middle
[ Applause ]

00:03:45.596 --> 00:03:46.246 A:middle
&gt;&gt; Thanks, Sebastian.

00:03:46.246 --> 00:03:49.176 A:middle
When we think about privacy, we

00:03:49.176 --> 00:03:51.066 A:middle
think about how to build privacy

00:03:51.066 --> 00:03:52.236 A:middle
into all their products and

00:03:52.236 --> 00:03:52.646 A:middle
services.

00:03:52.646 --> 00:03:54.376 A:middle
And there could be a lot of

00:03:54.376 --> 00:03:55.586 A:middle
details to think about.

00:03:55.906 --> 00:03:57.006 A:middle
But it's important to think of

00:03:57.006 --> 00:03:58.836 A:middle
the big picture, trust.

00:03:58.836 --> 00:04:01.776 A:middle
Now it's up to all of us to

00:03:58.836 --> 00:04:01.776 A:middle
Now it's up to all of us to

00:04:01.776 --> 00:04:03.306 A:middle
ensure that users can protect,

00:04:03.306 --> 00:04:06.306 A:middle
can trust us to protect their

00:04:06.306 --> 00:04:07.426 A:middle
most sensitive data.

00:04:08.056 --> 00:04:09.946 A:middle
From financial data to

00:04:09.946 --> 00:04:12.446 A:middle
communications to location and

00:04:12.446 --> 00:04:15.556 A:middle
photos, trust is crucial as

00:04:15.556 --> 00:04:17.476 A:middle
technology becomes more and more

00:04:17.476 --> 00:04:19.516 A:middle
integrated into our lives.

00:04:20.016 --> 00:04:21.526 A:middle
So how can you build trust with

00:04:21.526 --> 00:04:22.146 A:middle
your users?

00:04:22.946 --> 00:04:25.366 A:middle
We focus on four key pillars and

00:04:25.366 --> 00:04:26.606 A:middle
let me show you an example of

00:04:26.606 --> 00:04:26.996 A:middle
each.

00:04:28.286 --> 00:04:30.136 A:middle
Now, we don't require users to

00:04:30.206 --> 00:04:32.186 A:middle
sign into Maps but instead we

00:04:32.186 --> 00:04:34.296 A:middle
use rotating random identifiers

00:04:34.676 --> 00:04:36.016 A:middle
that can't be tied to an Apple

00:04:36.016 --> 00:04:38.366 A:middle
ID to enable relevant results.

00:04:39.636 --> 00:04:41.926 A:middle
We use on-device intelligence to

00:04:41.926 --> 00:04:43.906 A:middle
enable powerful features like

00:04:43.906 --> 00:04:46.046 A:middle
search and memories in photos

00:04:46.576 --> 00:04:49.466 A:middle
without analyzing photos in the

00:04:50.016 --> 00:04:50.146 A:middle
cloud.

00:04:50.326 --> 00:04:52.846 A:middle
We designed Face ID so all Face

00:04:53.006 --> 00:04:55.106 A:middle
ID data is encrypted, protected

00:04:55.106 --> 00:04:56.886 A:middle
by the Secure Enclave and

00:04:56.886 --> 00:04:58.226 A:middle
doesn't ever leave your device.

00:04:59.636 --> 00:05:01.266 A:middle
And when we collect users' data

00:04:59.636 --> 00:05:01.266 A:middle
And when we collect users' data

00:05:01.816 --> 00:05:03.076 A:middle
or allow a third party to

00:05:03.076 --> 00:05:05.186 A:middle
collect data like photos, we

00:05:05.186 --> 00:05:06.376 A:middle
make sure we do so with the

00:05:06.376 --> 00:05:07.046 A:middle
user's consent.

00:05:07.176 --> 00:05:09.886 A:middle
So let's dive a little bit

00:05:09.886 --> 00:05:11.466 A:middle
deeper into transparency and

00:05:11.466 --> 00:05:12.266 A:middle
control.

00:05:12.916 --> 00:05:14.386 A:middle
You have all seen these alerts

00:05:14.386 --> 00:05:16.026 A:middle
when you request access to

00:05:16.026 --> 00:05:18.036 A:middle
location or photos.

00:05:18.036 --> 00:05:20.506 A:middle
And this alert includes a

00:05:20.506 --> 00:05:21.326 A:middle
purpose string.

00:05:21.596 --> 00:05:23.606 A:middle
Now this is what you provide in

00:05:23.606 --> 00:05:25.236 A:middle
order to explain why you're

00:05:25.236 --> 00:05:27.446 A:middle
requesting data and how you will

00:05:27.516 --> 00:05:28.366 A:middle
use that data.

00:05:29.316 --> 00:05:31.036 A:middle
Now a good string includes a

00:05:31.036 --> 00:05:32.966 A:middle
clear explanation of what

00:05:32.966 --> 00:05:36.566 A:middle
features it will enable and what

00:05:36.566 --> 00:05:38.236 A:middle
functionality it will improve.

00:05:39.636 --> 00:05:42.186 A:middle
Now, the more specific you are

00:05:42.186 --> 00:05:44.206 A:middle
with your users, the more likely

00:05:44.206 --> 00:05:45.936 A:middle
they are to grant you access.

00:05:47.516 --> 00:05:48.876 A:middle
We think it's critically

00:05:48.876 --> 00:05:51.276 A:middle
important to understand and for

00:05:51.276 --> 00:05:53.016 A:middle
users to understand how their

00:05:53.016 --> 00:05:53.966 A:middle
data will be used.

00:05:54.636 --> 00:05:56.756 A:middle
So app review is paying closer

00:05:56.756 --> 00:05:58.146 A:middle
attention to these purpose

00:05:58.146 --> 00:05:58.426 A:middle
strings.

00:05:59.106 --> 00:06:01.176 A:middle
So if you have a purpose string

00:05:59.106 --> 00:06:01.176 A:middle
So if you have a purpose string

00:06:01.176 --> 00:06:03.256 A:middle
like this, which you know, it's

00:06:03.256 --> 00:06:05.686 A:middle
clearly not valid, you may get

00:06:05.686 --> 00:06:06.666 A:middle
dinged by app review.

00:06:06.666 --> 00:06:10.736 A:middle
Now this string technically

00:06:10.736 --> 00:06:12.326 A:middle
explains how data will be used.

00:06:12.976 --> 00:06:15.656 A:middle
But it lacks detail so it's

00:06:15.656 --> 00:06:17.566 A:middle
really hard for your user to

00:06:17.566 --> 00:06:20.286 A:middle
make a decision.

00:06:20.356 --> 00:06:22.806 A:middle
Now some users may have concerns

00:06:22.806 --> 00:06:24.326 A:middle
about granting your app

00:06:24.586 --> 00:06:27.366 A:middle
microphone access but it may be

00:06:27.366 --> 00:06:29.436 A:middle
key to your app's functionality.

00:06:30.116 --> 00:06:31.706 A:middle
So that's why it's important to

00:06:31.706 --> 00:06:33.386 A:middle
have a clear purpose string like

00:06:33.436 --> 00:06:35.876 A:middle
this one that explains exactly

00:06:35.876 --> 00:06:38.456 A:middle
how you are going to use the

00:06:39.356 --> 00:06:39.496 A:middle
data.

00:06:39.646 --> 00:06:41.476 A:middle
Now great features don't have to

00:06:41.476 --> 00:06:42.946 A:middle
be at the expense of privacy.

00:06:43.436 --> 00:06:45.506 A:middle
But instead can support them by

00:06:45.506 --> 00:06:47.276 A:middle
making it clear to users how

00:06:47.276 --> 00:06:48.176 A:middle
you're going to protect their

00:06:48.176 --> 00:06:48.976 A:middle
data and how it's being used.

00:06:54.276 --> 00:06:55.766 A:middle
Now, we care deeply about

00:06:55.846 --> 00:06:56.426 A:middle
security.

00:06:56.846 --> 00:06:58.436 A:middle
And in order to protect all the

00:06:58.506 --> 00:07:00.706 A:middle
sensitive data that resides on

00:06:58.506 --> 00:07:00.706 A:middle
sensitive data that resides on

00:07:00.706 --> 00:07:03.176 A:middle
the device in apps and in the

00:07:03.176 --> 00:07:05.166 A:middle
cloud, we think about security

00:07:05.166 --> 00:07:06.076 A:middle
holistically.

00:07:06.806 --> 00:07:09.336 A:middle
And we provide technologies to

00:07:09.336 --> 00:07:11.556 A:middle
make it easy for you to build

00:07:11.616 --> 00:07:12.976 A:middle
secure apps.

00:07:13.076 --> 00:07:14.606 A:middle
Here's a few examples of the

00:07:14.606 --> 00:07:16.016 A:middle
technologies that we provide.

00:07:17.336 --> 00:07:20.876 A:middle
On iOS, we automatically encrypt

00:07:20.876 --> 00:07:22.316 A:middle
app data by default.

00:07:23.416 --> 00:07:25.736 A:middle
Over the network, App Transport

00:07:25.736 --> 00:07:27.506 A:middle
Security means you never have to

00:07:27.506 --> 00:07:29.186 A:middle
patch client networking

00:07:29.186 --> 00:07:29.816 A:middle
libraries again.

00:07:31.516 --> 00:07:33.506 A:middle
Now in CloudKit in the cloud,

00:07:33.506 --> 00:07:35.836 A:middle
CloudKit securely stores and

00:07:35.936 --> 00:07:37.856 A:middle
syncs data across devices.

00:07:39.186 --> 00:07:40.736 A:middle
Letting you focus on building a

00:07:40.736 --> 00:07:42.546 A:middle
great experience for your users

00:07:42.866 --> 00:07:44.186 A:middle
without having to worry about

00:07:44.186 --> 00:07:46.446 A:middle
managing account state or your

00:07:46.446 --> 00:07:47.326 A:middle
cloud credentials.

00:07:48.076 --> 00:07:50.456 A:middle
And it enables you to take the

00:07:50.456 --> 00:07:51.876 A:middle
best, advantage the best

00:07:51.876 --> 00:07:54.026 A:middle
in-class security including

00:07:54.026 --> 00:07:55.726 A:middle
built-in two-factor

00:07:55.726 --> 00:07:56.466 A:middle
authentication.

00:07:57.256 --> 00:07:59.076 A:middle
Since its launch three years

00:07:59.076 --> 00:08:01.546 A:middle
ago, more than two-thirds of

00:07:59.076 --> 00:08:01.546 A:middle
ago, more than two-thirds of

00:08:01.546 --> 00:08:03.766 A:middle
Apple ID accounts have adopted

00:08:03.766 --> 00:08:05.536 A:middle
two-factor authentication.

00:08:06.506 --> 00:08:08.956 A:middle
This is a huge success compared

00:08:08.956 --> 00:08:10.206 A:middle
to the rest of the industry

00:08:10.576 --> 00:08:13.196 A:middle
where we see less than 10% of

00:08:13.196 --> 00:08:15.086 A:middle
accounts protected by two-factor

00:08:15.086 --> 00:08:15.796 A:middle
authentication.

00:08:16.686 --> 00:08:18.396 A:middle
But this is very important to

00:08:18.396 --> 00:08:18.556 A:middle
us.

00:08:19.206 --> 00:08:21.866 A:middle
And we work continuously to make

00:08:21.866 --> 00:08:24.126 A:middle
our users' accounts more secure

00:08:24.686 --> 00:08:26.396 A:middle
so you're the only person who

00:08:26.396 --> 00:08:28.906 A:middle
can access your account even if

00:08:28.906 --> 00:08:30.006 A:middle
someone else knows your

00:08:30.006 --> 00:08:30.566 A:middle
password.

00:08:31.146 --> 00:08:35.216 A:middle
And new in iOS 12, we're making

00:08:35.216 --> 00:08:36.836 A:middle
using passwords more convenient

00:08:37.015 --> 00:08:39.356 A:middle
and more secure for you and your

00:08:39.356 --> 00:08:39.826 A:middle
users.

00:08:41.416 --> 00:08:42.956 A:middle
We all know that a secure

00:08:42.956 --> 00:08:44.646 A:middle
password is critically important

00:08:44.976 --> 00:08:47.236 A:middle
to keeping your information and

00:08:47.236 --> 00:08:48.546 A:middle
your identity secure.

00:08:49.926 --> 00:08:51.936 A:middle
But they can be hard to remember

00:08:51.936 --> 00:08:54.586 A:middle
and it's tempting to use weak or

00:08:54.586 --> 00:08:55.656 A:middle
reuse passwords.

00:08:56.416 --> 00:08:57.886 A:middle
And this creates problems for

00:08:57.886 --> 00:08:59.506 A:middle
you as a developer as well.

00:09:00.606 --> 00:09:03.236 A:middle
Now, users may abandon account

00:09:03.306 --> 00:09:05.076 A:middle
sign up and you have to deal

00:09:05.076 --> 00:09:06.386 A:middle
with password reset requests.

00:09:07.536 --> 00:09:09.276 A:middle
But worst of all, is the

00:09:09.276 --> 00:09:10.736 A:middle
potential for compromised

00:09:10.736 --> 00:09:13.026 A:middle
accounts due to weak passwords.

00:09:13.766 --> 00:09:18.036 A:middle
So we have a solution -- iOS 12

00:09:18.036 --> 00:09:19.926 A:middle
makes it easy for you and your

00:09:19.926 --> 00:09:21.696 A:middle
users to always use a strong

00:09:21.976 --> 00:09:24.116 A:middle
unique password by creating,

00:09:24.406 --> 00:09:26.006 A:middle
storing and AutoFilling the

00:09:26.006 --> 00:09:26.606 A:middle
password.

00:09:27.426 --> 00:09:29.826 A:middle
But the really great thing is it

00:09:30.076 --> 00:09:31.816 A:middle
will also work automatically in

00:09:31.816 --> 00:09:34.066 A:middle
your iOS app too so they always

00:09:34.066 --> 00:09:35.936 A:middle
get a strong password no matter

00:09:35.936 --> 00:09:38.016 A:middle
where they create an account and

00:09:38.016 --> 00:09:39.386 A:middle
it syncs to all of their

00:09:39.386 --> 00:09:39.766 A:middle
devices.

00:09:39.766 --> 00:09:42.586 A:middle
Now it couldn't be easier to

00:09:42.586 --> 00:09:43.896 A:middle
offer automatic strong

00:09:43.896 --> 00:09:44.396 A:middle
passwords.

00:09:45.066 --> 00:09:46.206 A:middle
In fact, you may not need to

00:09:46.206 --> 00:09:47.536 A:middle
make any changes within your

00:09:48.626 --> 00:09:48.696 A:middle
app.

00:09:48.696 --> 00:09:51.396 A:middle
So to ensure it just works, you

00:09:51.396 --> 00:09:53.126 A:middle
need to associate your app with

00:09:53.126 --> 00:09:53.736 A:middle
the domain.

00:09:54.416 --> 00:09:55.786 A:middle
You may have already done this

00:09:56.196 --> 00:09:57.686 A:middle
if you have adopted universal

00:09:57.686 --> 00:09:57.966 A:middle
links.

00:09:59.326 --> 00:10:00.316 A:middle
Then you need to label your user

00:09:59.326 --> 00:10:00.316 A:middle
Then you need to label your user

00:10:00.316 --> 00:10:00.976 A:middle
name and password fields.

00:10:01.056 --> 00:10:04.056 A:middle
And if the passwords don't meet

00:10:04.056 --> 00:10:06.786 A:middle
your app requirements, now you

00:10:06.786 --> 00:10:10.016 A:middle
can even customize them.

00:10:10.216 --> 00:10:11.886 A:middle
We've also made it easier for

00:10:11.886 --> 00:10:13.256 A:middle
your users to get to their

00:10:13.256 --> 00:10:13.866 A:middle
passwords.

00:10:14.796 --> 00:10:16.596 A:middle
They can just ask Siri and once

00:10:16.596 --> 00:10:17.806 A:middle
they've authenticated, they're

00:10:17.996 --> 00:10:19.476 A:middle
taken right to their password

00:10:19.476 --> 00:10:19.666 A:middle
list.

00:10:21.126 --> 00:10:23.256 A:middle
And on top of that, to help

00:10:23.256 --> 00:10:25.486 A:middle
clear up old password since,

00:10:26.216 --> 00:10:27.556 A:middle
we're making it really easy to

00:10:27.556 --> 00:10:29.826 A:middle
tell if any of your passwords

00:10:29.826 --> 00:10:31.516 A:middle
have been reused across your

00:10:31.516 --> 00:10:32.456 A:middle
existing accounts.

00:10:33.176 --> 00:10:35.846 A:middle
Your iPhone would flag these

00:10:35.876 --> 00:10:37.456 A:middle
passwords and take you right to

00:10:37.456 --> 00:10:39.136 A:middle
the website where you'll be able

00:10:39.136 --> 00:10:40.766 A:middle
to replace it with a strong

00:10:40.766 --> 00:10:41.326 A:middle
password.

00:10:44.076 --> 00:10:45.796 A:middle
We're also make it easier to

00:10:45.796 --> 00:10:47.076 A:middle
deal with those one-time

00:10:47.076 --> 00:10:49.326 A:middle
passcodes that are texted to you

00:10:49.616 --> 00:10:51.486 A:middle
and your users much more

00:10:51.486 --> 00:10:52.106 A:middle
convenient.

00:10:53.646 --> 00:10:54.886 A:middle
They'll automatically appear

00:10:54.886 --> 00:10:57.176 A:middle
right in the click tap bar and

00:10:57.176 --> 00:10:58.736 A:middle
you can fill them in with just a

00:10:58.736 --> 00:10:58.856 A:middle
tap.

00:10:59.516 --> 00:11:05.876 A:middle
[ Applause ]

00:10:59.516 --> 00:11:05.876 A:middle
[ Applause ]

00:11:06.376 --> 00:11:08.026 A:middle
We're also creating a new

00:11:08.026 --> 00:11:10.306 A:middle
extension point for third-party

00:11:10.306 --> 00:11:12.586 A:middle
password managers to enable them

00:11:12.586 --> 00:11:15.116 A:middle
to supply passwords for AutoFill

00:11:15.116 --> 00:11:15.966 A:middle
and apps in Safari.

00:11:16.516 --> 00:11:22.646 A:middle
[ Applause ]

00:11:23.146 --> 00:11:24.906 A:middle
Now these features work across

00:11:24.906 --> 00:11:27.896 A:middle
iOS, the Mac and even Apple TV

00:11:28.176 --> 00:11:30.616 A:middle
for a great experience across

00:11:30.616 --> 00:11:33.376 A:middle
your Apple devices.

00:11:33.586 --> 00:11:35.566 A:middle
We care deeply about privacy and

00:11:35.566 --> 00:11:36.146 A:middle
security.

00:11:36.146 --> 00:11:38.266 A:middle
And they're foundational to all

00:11:38.266 --> 00:11:38.906 A:middle
of our products.

00:11:39.566 --> 00:11:42.686 A:middle
So we provide the ability for

00:11:42.686 --> 00:11:44.696 A:middle
you to build on this foundation

00:11:45.076 --> 00:11:47.726 A:middle
to protect, secure and earn your

00:11:47.726 --> 00:11:48.536 A:middle
users' trust.

00:11:49.156 --> 00:11:50.346 A:middle
And now, handing it back to

00:11:50.606 --> 00:11:50.976 A:middle
Sebastian.

00:11:51.516 --> 00:11:57.976 A:middle
[ Applause ]

00:11:58.476 --> 00:11:59.266 A:middle
&gt;&gt; Thank you, Katie.

00:11:59.586 --> 00:12:00.856 A:middle
Isn't -- aren't these new

00:11:59.586 --> 00:12:00.856 A:middle
Isn't -- aren't these new

00:12:00.856 --> 00:12:02.436 A:middle
password features amazing?

00:12:02.736 --> 00:12:03.676 A:middle
Really, really great.

00:12:03.676 --> 00:12:04.326 A:middle
That was great.

00:12:04.456 --> 00:12:05.046 A:middle
Thank you.

00:12:06.096 --> 00:12:07.996 A:middle
Now, ultimately, we also promise

00:12:07.996 --> 00:12:10.076 A:middle
our users great experiences.

00:12:10.256 --> 00:12:11.606 A:middle
And we usually think about great

00:12:11.606 --> 00:12:14.326 A:middle
experiences as being great

00:12:14.326 --> 00:12:15.336 A:middle
innovative features.

00:12:16.556 --> 00:12:17.926 A:middle
But equally important is not to

00:12:17.926 --> 00:12:19.556 A:middle
compromise that delight with

00:12:19.556 --> 00:12:21.576 A:middle
unpredictable and slow software.

00:12:22.436 --> 00:12:23.796 A:middle
This is top of mind for the

00:12:23.796 --> 00:12:24.956 A:middle
Apple Engineering Team.

00:12:25.586 --> 00:12:27.326 A:middle
We develop tools and practices

00:12:27.326 --> 00:12:28.396 A:middle
that help us with this.

00:12:28.396 --> 00:12:30.576 A:middle
And then we work to bring these

00:12:30.636 --> 00:12:32.396 A:middle
same tools to all of you so that

00:12:32.396 --> 00:12:33.676 A:middle
you can apply them through

00:12:33.676 --> 00:12:34.376 A:middle
applications.

00:12:35.306 --> 00:12:36.586 A:middle
Available to you are a number of

00:12:36.586 --> 00:12:38.956 A:middle
tools and techniques to help you

00:12:38.956 --> 00:12:40.196 A:middle
make your code more reliable and

00:12:40.196 --> 00:12:40.976 A:middle
robust.

00:12:41.326 --> 00:12:42.356 A:middle
It's important for your app to

00:12:42.356 --> 00:12:43.066 A:middle
be predictable.

00:12:43.596 --> 00:12:45.006 A:middle
And of course, making your app

00:12:45.006 --> 00:12:46.406 A:middle
run fast is critical.

00:12:46.406 --> 00:12:47.746 A:middle
And for that, we have a number

00:12:47.746 --> 00:12:49.136 A:middle
of performance tools at your

00:12:49.136 --> 00:12:49.706 A:middle
disposal.

00:12:50.586 --> 00:12:51.696 A:middle
Now we understand that

00:12:51.696 --> 00:12:53.656 A:middle
optimizing performance across

00:12:53.686 --> 00:12:55.416 A:middle
complex systems and applications

00:12:55.686 --> 00:12:56.456 A:middle
is challenging.

00:12:56.986 --> 00:12:59.006 A:middle
And this year, we worked a lot

00:12:59.006 --> 00:12:59.696 A:middle
on this.

00:12:59.986 --> 00:13:01.086 A:middle
We've developed a lot of new

00:12:59.986 --> 00:13:01.086 A:middle
We've developed a lot of new

00:13:01.086 --> 00:13:02.806 A:middle
tools and techniques and want to

00:13:02.806 --> 00:13:03.936 A:middle
bring you some of these powerful

00:13:03.936 --> 00:13:04.736 A:middle
new capabilities.

00:13:05.496 --> 00:13:07.696 A:middle
So in Xcode 10, we've extended

00:13:07.696 --> 00:13:09.276 A:middle
instruments capabilities and

00:13:09.496 --> 00:13:10.856 A:middle
enabled you to take it even

00:13:10.856 --> 00:13:12.216 A:middle
further with your own custom

00:13:12.216 --> 00:13:13.466 A:middle
tools and work flows.

00:13:14.286 --> 00:13:15.706 A:middle
Now this all starts from a

00:13:15.706 --> 00:13:16.806 A:middle
legacy API.

00:13:17.106 --> 00:13:18.246 A:middle
Some of you may know this and

00:13:18.246 --> 00:13:19.196 A:middle
have used it.

00:13:19.616 --> 00:13:21.126 A:middle
I know I'm guilty of it --

00:13:21.596 --> 00:13:23.286 A:middle
printf, it's like the Swiss Army

00:13:23.286 --> 00:13:24.316 A:middle
knife of APIs.

00:13:24.316 --> 00:13:25.816 A:middle
We use it to debug and trace

00:13:25.816 --> 00:13:27.276 A:middle
through our code but we all know

00:13:27.276 --> 00:13:28.166 A:middle
that it's slow.

00:13:28.676 --> 00:13:30.156 A:middle
And so two years ago, we brought

00:13:30.156 --> 00:13:32.546 A:middle
you this new API called os log.

00:13:32.906 --> 00:13:34.266 A:middle
It's an efficient and performant

00:13:34.266 --> 00:13:36.266 A:middle
API that captures logs and

00:13:36.266 --> 00:13:38.006 A:middle
tracepoints across all levels of

00:13:38.006 --> 00:13:38.626 A:middle
the system.

00:13:39.076 --> 00:13:41.366 A:middle
It's fast and lightweight and if

00:13:41.366 --> 00:13:42.836 A:middle
you've not adopted it already,

00:13:42.836 --> 00:13:43.436 A:middle
you really should.

00:13:43.436 --> 00:13:43.926 A:middle
It's great.

00:13:44.566 --> 00:13:45.796 A:middle
And our newest addition this

00:13:45.796 --> 00:13:47.466 A:middle
year builds on top of os log and

00:13:47.466 --> 00:13:49.336 A:middle
it's called os signpost.

00:13:50.016 --> 00:13:51.326 A:middle
It's a powerful technique that

00:13:51.376 --> 00:13:53.656 A:middle
provides rich, contextual data

00:13:53.656 --> 00:13:55.776 A:middle
for your application in a format

00:13:55.776 --> 00:13:57.606 A:middle
that instruments can interpret.

00:13:57.606 --> 00:13:59.996 A:middle
So you could use signpost to

00:13:59.996 --> 00:14:01.816 A:middle
trace through your code and you

00:13:59.996 --> 00:14:01.816 A:middle
trace through your code and you

00:14:01.816 --> 00:14:03.786 A:middle
can also use it to bookend

00:14:03.936 --> 00:14:05.476 A:middle
critical sections of your

00:14:05.476 --> 00:14:05.986 A:middle
functions.

00:14:06.586 --> 00:14:08.226 A:middle
And once you have the data, the

00:14:08.226 --> 00:14:09.986 A:middle
real power comes in the built-in

00:14:10.306 --> 00:14:11.276 A:middle
custom instruments

00:14:11.446 --> 00:14:12.266 A:middle
visualization.

00:14:13.256 --> 00:14:14.756 A:middle
Now, we have this new Custom

00:14:14.756 --> 00:14:16.656 A:middle
Instruments support and the best

00:14:16.656 --> 00:14:18.086 A:middle
way to convey the full power of

00:14:18.086 --> 00:14:19.556 A:middle
this, I think, is through demo

00:14:19.846 --> 00:14:21.236 A:middle
so Ken will show us what our

00:14:21.236 --> 00:14:21.886 A:middle
tools can do.

00:14:21.886 --> 00:14:21.976 A:middle
Ken?

00:14:22.516 --> 00:14:28.066 A:middle
[ Applause ]

00:14:28.566 --> 00:14:29.536 A:middle
&gt;&gt; Thank you, Sebastian.

00:14:30.176 --> 00:14:31.416 A:middle
So I'm working on my Solar

00:14:31.416 --> 00:14:33.086 A:middle
System Exploration app here.

00:14:33.656 --> 00:14:35.186 A:middle
And I've noticed I've got a

00:14:35.186 --> 00:14:36.376 A:middle
little bit of a performance

00:14:36.416 --> 00:14:36.746 A:middle
problem.

00:14:36.996 --> 00:14:38.506 A:middle
So every time the app goes to

00:14:38.506 --> 00:14:39.646 A:middle
update its data, you know, when

00:14:39.646 --> 00:14:40.846 A:middle
it launches or when I press

00:14:41.126 --> 00:14:43.106 A:middle
command R like that, you can see

00:14:43.106 --> 00:14:45.306 A:middle
the UI, it gets really choppy.

00:14:45.756 --> 00:14:46.576 A:middle
The planets, they kind of

00:14:46.576 --> 00:14:47.766 A:middle
stutter as they move around

00:14:47.766 --> 00:14:48.486 A:middle
their orbits.

00:14:48.936 --> 00:14:49.786 A:middle
And then once the update

00:14:49.786 --> 00:14:51.586 A:middle
completes, well, it's pretty

00:14:51.586 --> 00:14:52.006 A:middle
smooth.

00:14:52.556 --> 00:14:53.556 A:middle
So I want to figure out what's

00:14:53.556 --> 00:14:54.126 A:middle
going on here.

00:14:55.166 --> 00:14:56.996 A:middle
Now back over in my code,

00:14:57.906 --> 00:15:00.426 A:middle
PlanetUpdateService.swift --

00:14:57.906 --> 00:15:00.426 A:middle
PlanetUpdateService.swift --

00:15:00.426 --> 00:15:02.106 A:middle
this is the file that handles

00:15:02.106 --> 00:15:03.056 A:middle
that planetary update.

00:15:03.056 --> 00:15:05.096 A:middle
So I want to add some logs, some

00:15:05.176 --> 00:15:06.926 A:middle
signposts to help me understand

00:15:06.926 --> 00:15:08.266 A:middle
what's going on in my code.

00:15:08.266 --> 00:15:10.696 A:middle
So I'm going to start by adding

00:15:10.746 --> 00:15:11.506 A:middle
a log handle.

00:15:11.676 --> 00:15:13.566 A:middle
So I'm going to use the new

00:15:13.566 --> 00:15:17.296 A:middle
pointsOfInterest category.

00:15:17.396 --> 00:15:19.536 A:middle
Now this is a special new

00:15:19.536 --> 00:15:20.166 A:middle
category.

00:15:20.676 --> 00:15:22.276 A:middle
Anything that I log with it is

00:15:22.346 --> 00:15:23.636 A:middle
automatically going to show up

00:15:23.636 --> 00:15:24.846 A:middle
right inside instruments.

00:15:25.426 --> 00:15:27.256 A:middle
Now, the first thing I want to

00:15:27.256 --> 00:15:29.956 A:middle
see is when we kick off this

00:15:30.036 --> 00:15:30.596 A:middle
update.

00:15:30.596 --> 00:15:32.276 A:middle
And that happens in this method.

00:15:32.276 --> 00:15:33.756 A:middle
So I'm going to add my first log

00:15:33.756 --> 00:15:34.906 A:middle
statement here.

00:15:34.906 --> 00:15:36.186 A:middle
I'm going to say requesting

00:15:36.186 --> 00:15:37.846 A:middle
planet data so that we could see

00:15:37.846 --> 00:15:38.176 A:middle
that.

00:15:39.296 --> 00:15:40.656 A:middle
And then what I really want to

00:15:40.656 --> 00:15:43.156 A:middle
know is how long is it taking to

00:15:43.156 --> 00:15:45.706 A:middle
process and parse all the data

00:15:45.776 --> 00:15:46.666 A:middle
that I'm doing here?

00:15:47.476 --> 00:15:49.646 A:middle
So right here is where that

00:15:49.646 --> 00:15:50.336 A:middle
happens.

00:15:50.796 --> 00:15:52.476 A:middle
And to help me visualize this,

00:15:52.476 --> 00:15:53.196 A:middle
I'm going to add a couple of

00:15:53.196 --> 00:15:53.906 A:middle
signposts.

00:15:54.476 --> 00:15:55.866 A:middle
So the first signpost is going

00:15:56.666 --> 00:15:58.946 A:middle
to be a begin-type signpost

00:15:58.946 --> 00:16:00.666 A:middle
here, just before I start doing

00:15:58.946 --> 00:16:00.666 A:middle
here, just before I start doing

00:16:00.666 --> 00:16:00.966 A:middle
the work.

00:16:00.966 --> 00:16:02.526 A:middle
Then I'm going to add another

00:16:02.526 --> 00:16:05.206 A:middle
signpost right here after I

00:16:05.206 --> 00:16:06.226 A:middle
finish doing the work.

00:16:06.456 --> 00:16:08.166 A:middle
That's an end-type signpost.

00:16:08.166 --> 00:16:09.056 A:middle
So this is going to create a

00:16:09.056 --> 00:16:09.986 A:middle
time interval for me,

00:16:10.706 --> 00:16:11.646 A:middle
automatically calculate the

00:16:11.646 --> 00:16:13.436 A:middle
delta and surface that right up

00:16:13.436 --> 00:16:14.196 A:middle
through instruments.

00:16:15.056 --> 00:16:16.626 A:middle
So let's profile this in

00:16:16.626 --> 00:16:17.956 A:middle
Instruments and see what kind of

00:16:17.956 --> 00:16:18.486 A:middle
data we get.

00:16:19.296 --> 00:16:21.236 A:middle
So I go to Product, select

00:16:21.386 --> 00:16:22.546 A:middle
Profile.

00:16:22.806 --> 00:16:24.086 A:middle
Xcode's going to build my app,

00:16:24.876 --> 00:16:26.456 A:middle
launch Instruments and then

00:16:26.486 --> 00:16:27.816 A:middle
we'll start to see, well, we'll

00:16:27.816 --> 00:16:29.446 A:middle
start seeing data stream in

00:16:29.976 --> 00:16:30.066 A:middle
here.

00:16:30.486 --> 00:16:31.506 A:middle
Now right here, you can see the

00:16:31.506 --> 00:16:32.536 A:middle
pointsOfInterest track.

00:16:33.156 --> 00:16:34.596 A:middle
So everything that I was logging

00:16:34.596 --> 00:16:35.376 A:middle
with the pointsOfInterest

00:16:35.376 --> 00:16:37.236 A:middle
category, that shows up here so

00:16:37.236 --> 00:16:38.026 A:middle
this is my data.

00:16:38.756 --> 00:16:39.566 A:middle
I want to zoom in.

00:16:39.566 --> 00:16:40.816 A:middle
So I'm going to hold on Option

00:16:40.816 --> 00:16:42.026 A:middle
and click and drag so we can get

00:16:42.026 --> 00:16:43.016 A:middle
a closer look.

00:16:43.746 --> 00:16:45.086 A:middle
And we can see this little flag

00:16:45.086 --> 00:16:46.226 A:middle
right here that says requesting

00:16:46.226 --> 00:16:46.766 A:middle
planet data.

00:16:47.326 --> 00:16:48.876 A:middle
So that's a result of the first

00:16:48.876 --> 00:16:50.136 A:middle
log I added in my code.

00:16:51.056 --> 00:16:52.506 A:middle
Then these blue bars right here,

00:16:52.996 --> 00:16:54.746 A:middle
this is where I'm processing and

00:16:54.746 --> 00:16:55.376 A:middle
parsing data.

00:16:55.626 --> 00:16:56.866 A:middle
So those are the results of the

00:16:56.866 --> 00:16:58.126 A:middle
signpost I added.

00:16:58.906 --> 00:17:00.406 A:middle
Now, as I look at this, I think

00:16:58.906 --> 00:17:00.406 A:middle
Now, as I look at this, I think

00:17:00.406 --> 00:17:02.126 A:middle
I see what the problem might be

00:17:02.126 --> 00:17:02.626 A:middle
right away.

00:17:02.886 --> 00:17:04.256 A:middle
So every time I go to process

00:17:04.306 --> 00:17:05.756 A:middle
data and parse it here, I can

00:17:05.756 --> 00:17:07.336 A:middle
see a corresponding spike in the

00:17:07.336 --> 00:17:08.846 A:middle
CPU use on the main thread.

00:17:08.846 --> 00:17:11.096 A:middle
And to me, that is a bright red

00:17:11.096 --> 00:17:13.376 A:middle
flag that I'm probably parsing

00:17:13.376 --> 00:17:14.886 A:middle
and processing this on the main

00:17:14.886 --> 00:17:15.126 A:middle
thread.

00:17:15.746 --> 00:17:17.326 A:middle
Not a recipe for a smooth UI.

00:17:18.066 --> 00:17:19.876 A:middle
So with just a log statement, a

00:17:19.876 --> 00:17:21.256 A:middle
couple of signposts, you could

00:17:21.256 --> 00:17:22.366 A:middle
see I can start to get some

00:17:22.366 --> 00:17:23.876 A:middle
really great insight into the

00:17:23.876 --> 00:17:26.236 A:middle
performance of my app.

00:17:26.486 --> 00:17:28.465 A:middle
Now the new tools, they let you

00:17:28.465 --> 00:17:29.866 A:middle
do way more than that.

00:17:30.286 --> 00:17:32.516 A:middle
So with Xcode 10, there's a new

00:17:32.516 --> 00:17:34.366 A:middle
template that lets you create a

00:17:34.546 --> 00:17:36.506 A:middle
fully customized Instruments

00:17:36.686 --> 00:17:37.296 A:middle
package.

00:17:37.786 --> 00:17:38.836 A:middle
Now, one of my team mates, he's

00:17:38.836 --> 00:17:40.286 A:middle
gone ahead and built one based

00:17:40.286 --> 00:17:41.686 A:middle
on some network, some signposts

00:17:41.686 --> 00:17:43.386 A:middle
that he added to our networking

00:17:43.596 --> 00:17:44.006 A:middle
framework.

00:17:44.456 --> 00:17:45.516 A:middle
And I've got the latest version

00:17:45.516 --> 00:17:46.796 A:middle
he sent me here in my downloads.

00:17:47.236 --> 00:17:50.056 A:middle
So let me open that up and when

00:17:50.056 --> 00:17:51.576 A:middle
I do, Instruments offers to

00:17:51.576 --> 00:17:52.446 A:middle
install it for me.

00:17:53.036 --> 00:17:54.376 A:middle
So I'll say install.

00:17:54.786 --> 00:17:56.056 A:middle
And now you'll see, I've got a

00:17:56.056 --> 00:17:56.756 A:middle
new template.

00:17:56.756 --> 00:17:57.636 A:middle
Here are my templates.

00:17:57.636 --> 00:17:58.696 A:middle
These are called Solar Systems.

00:17:58.696 --> 00:17:59.866 A:middle
I'm going to double click that.

00:17:59.866 --> 00:18:02.516 A:middle
And then we'll start recording

00:17:59.866 --> 00:18:02.516 A:middle
And then we'll start recording

00:18:02.516 --> 00:18:03.126 A:middle
data again.

00:18:04.136 --> 00:18:05.826 A:middle
Now, just like before, I have

00:18:05.826 --> 00:18:07.136 A:middle
the pointsOfInterest tracked so

00:18:07.136 --> 00:18:08.126 A:middle
that is on the data that I

00:18:08.126 --> 00:18:08.896 A:middle
wanted to see.

00:18:09.436 --> 00:18:11.356 A:middle
But now, I've got much more

00:18:11.356 --> 00:18:13.096 A:middle
detailed information about the

00:18:13.096 --> 00:18:14.486 A:middle
networking request that I'm

00:18:14.486 --> 00:18:15.076 A:middle
making here.

00:18:15.536 --> 00:18:16.506 A:middle
So again, let me zoom in so we

00:18:16.506 --> 00:18:16.976 A:middle
can get a closer look.

00:18:22.406 --> 00:18:24.136 A:middle
Now, this custom Instruments

00:18:24.466 --> 00:18:26.536 A:middle
package here is giving me a

00:18:26.536 --> 00:18:28.706 A:middle
great visualization into how I'm

00:18:28.706 --> 00:18:30.566 A:middle
using this framework.

00:18:31.016 --> 00:18:32.426 A:middle
So it's showing me things like

00:18:32.626 --> 00:18:34.226 A:middle
for example here, how many

00:18:34.226 --> 00:18:35.746 A:middle
network requests am I making on

00:18:35.746 --> 00:18:37.506 A:middle
average every 10th of a second.

00:18:38.226 --> 00:18:39.456 A:middle
Then down here, this track is

00:18:39.456 --> 00:18:41.256 A:middle
showing me detailed information

00:18:41.256 --> 00:18:43.096 A:middle
about each and every network

00:18:43.096 --> 00:18:43.536 A:middle
request.

00:18:43.796 --> 00:18:44.726 A:middle
How long did it take?

00:18:45.026 --> 00:18:46.326 A:middle
It's even highlighting duplicate

00:18:46.326 --> 00:18:47.396 A:middle
requests in red.

00:18:47.756 --> 00:18:48.766 A:middle
So these are places where I'm

00:18:48.946 --> 00:18:50.386 A:middle
asking for the exact same data

00:18:50.386 --> 00:18:51.816 A:middle
more than once.

00:18:51.816 --> 00:18:53.066 A:middle
It looks like I'm doing that

00:18:53.146 --> 00:18:55.186 A:middle
maybe even more than 50% of the

00:18:55.186 --> 00:18:55.406 A:middle
time.

00:18:55.666 --> 00:18:56.836 A:middle
So I'm just leaving a ton of

00:18:56.836 --> 00:18:58.056 A:middle
performance on the table and

00:18:58.536 --> 00:18:59.816 A:middle
it's exactly these kinds of

00:18:59.816 --> 00:19:01.796 A:middle
insights that I need to help me

00:18:59.816 --> 00:19:01.796 A:middle
insights that I need to help me

00:19:01.796 --> 00:19:03.516 A:middle
use this framework more

00:19:03.516 --> 00:19:04.086 A:middle
effectively.

00:19:04.766 --> 00:19:07.126 A:middle
So signposts, Custom Instruments

00:19:07.126 --> 00:19:09.146 A:middle
packages, two really great new

00:19:09.146 --> 00:19:10.926 A:middle
ways for you to visualize your

00:19:10.926 --> 00:19:12.516 A:middle
data right in Instruments.

00:19:12.856 --> 00:19:13.566 A:middle
And that's a look at the new

00:19:13.566 --> 00:19:14.316 A:middle
performance tools.

00:19:14.476 --> 00:19:14.976 A:middle
Sebastian?

00:19:15.516 --> 00:19:19.546 A:middle
[ Applause ]

00:19:20.046 --> 00:19:20.356 A:middle
&gt;&gt; All right.

00:19:20.706 --> 00:19:21.476 A:middle
Thank you, Ken.

00:19:21.476 --> 00:19:23.116 A:middle
That's a really, really amazing

00:19:23.116 --> 00:19:23.866 A:middle
demo.

00:19:23.866 --> 00:19:25.276 A:middle
Really great tools that all of

00:19:25.276 --> 00:19:27.046 A:middle
you can use to make your apps

00:19:27.556 --> 00:19:28.856 A:middle
run even faster.

00:19:29.796 --> 00:19:32.396 A:middle
Now, to recap, we just reviewed

00:19:32.396 --> 00:19:33.886 A:middle
a lot of great tools and best

00:19:33.886 --> 00:19:35.726 A:middle
practices that we can use to

00:19:35.726 --> 00:19:37.626 A:middle
ensure that we delight our users

00:19:37.896 --> 00:19:38.746 A:middle
and keep their trust.

00:19:39.656 --> 00:19:41.676 A:middle
Now, I'd like to turn our

00:19:41.676 --> 00:19:42.976 A:middle
attention to the Mac.

00:19:43.186 --> 00:19:46.516 A:middle
OS X was launched 17 years ago

00:19:46.516 --> 00:19:48.336 A:middle
and we've constantly pushed the

00:19:48.336 --> 00:19:49.366 A:middle
platform forward.

00:19:50.016 --> 00:19:53.346 A:middle
64-bit support in Leopard, MacOS

00:19:53.346 --> 00:19:54.386 A:middle
Mountain Lion introduced

00:19:54.386 --> 00:19:56.246 A:middle
Gatekeeper, a key step forward

00:19:56.246 --> 00:19:56.976 A:middle
in Mac security.

00:19:57.046 --> 00:19:59.296 A:middle
And one of our key missions is

00:19:59.296 --> 00:20:00.626 A:middle
to always push the Mac forward

00:19:59.296 --> 00:20:00.626 A:middle
to always push the Mac forward

00:20:00.626 --> 00:20:02.546 A:middle
by extending its capabilities to

00:20:02.546 --> 00:20:03.766 A:middle
take advantage of the latest

00:20:03.766 --> 00:20:04.436 A:middle
technologies.

00:20:05.146 --> 00:20:06.236 A:middle
But as we push the platform

00:20:06.236 --> 00:20:08.096 A:middle
forward, we sometimes have to

00:20:08.096 --> 00:20:09.866 A:middle
deprecate legacy functionality

00:20:10.166 --> 00:20:11.886 A:middle
to ensure that we're not holding

00:20:11.886 --> 00:20:12.376 A:middle
it back.

00:20:13.476 --> 00:20:14.986 A:middle
Last year, we announced that

00:20:14.986 --> 00:20:16.976 A:middle
High Sierra was the last MacOS

00:20:16.976 --> 00:20:19.046 A:middle
release to fully support 32-bit

00:20:19.046 --> 00:20:20.766 A:middle
apps without compromise.

00:20:21.586 --> 00:20:23.276 A:middle
And this year, we're announcing

00:20:23.276 --> 00:20:25.326 A:middle
that MacOS Mojave is the last

00:20:25.326 --> 00:20:27.756 A:middle
release to support 32-bit at

00:20:27.756 --> 00:20:28.076 A:middle
all.

00:20:29.346 --> 00:20:30.946 A:middle
So as we remove 32-bit support

00:20:30.946 --> 00:20:33.286 A:middle
next year, these 32-bit only

00:20:33.356 --> 00:20:35.256 A:middle
frameworks will also be removed

00:20:35.256 --> 00:20:36.726 A:middle
such as the QuickTime framework

00:20:37.036 --> 00:20:38.796 A:middle
and the Apple Java framework.

00:20:39.336 --> 00:20:42.746 A:middle
Next, let's look at security on

00:20:42.746 --> 00:20:43.126 A:middle
the Mac.

00:20:43.696 --> 00:20:45.186 A:middle
Gatekeeper has done a great job

00:20:45.186 --> 00:20:46.576 A:middle
at avoiding large-scale malware

00:20:46.576 --> 00:20:48.456 A:middle
attacks and this year, we want

00:20:48.456 --> 00:20:49.786 A:middle
to push it even further.

00:20:50.666 --> 00:20:52.086 A:middle
We're extending user consent,

00:20:52.436 --> 00:20:54.176 A:middle
enhancing run time security and

00:20:54.176 --> 00:20:55.586 A:middle
we're launching a new Notary

00:20:55.646 --> 00:20:56.006 A:middle
Service.

00:20:56.246 --> 00:20:57.536 A:middle
So let's look at these in more

00:20:57.536 --> 00:20:57.966 A:middle
detail.

00:20:59.296 --> 00:21:00.986 A:middle
As you heard this morning, we're

00:20:59.296 --> 00:21:00.986 A:middle
As you heard this morning, we're

00:21:00.986 --> 00:21:02.086 A:middle
extending the protections

00:21:02.086 --> 00:21:03.986 A:middle
afforded to sensitive system

00:21:03.986 --> 00:21:04.666 A:middle
resources.

00:21:05.976 --> 00:21:06.816 A:middle
We've added camera and

00:21:06.816 --> 00:21:08.676 A:middle
microphone and we now require

00:21:08.676 --> 00:21:10.936 A:middle
user consent for API and direct

00:21:10.936 --> 00:21:12.626 A:middle
access to all these resources.

00:21:13.606 --> 00:21:14.706 A:middle
What does it mean in practice?

00:21:15.636 --> 00:21:16.376 A:middle
Well, it means that your

00:21:16.376 --> 00:21:17.846 A:middle
application has to gracefully

00:21:17.846 --> 00:21:19.466 A:middle
handle those calls potentially

00:21:19.466 --> 00:21:22.156 A:middle
blocking or failing as the user

00:21:22.156 --> 00:21:22.986 A:middle
provides consent.

00:21:24.796 --> 00:21:26.076 A:middle
It's also a really great idea,

00:21:26.076 --> 00:21:27.456 A:middle
as Katie has pointed out, to

00:21:27.456 --> 00:21:28.546 A:middle
provide meaningful purpose

00:21:28.546 --> 00:21:30.316 A:middle
strings so when the user is

00:21:30.316 --> 00:21:31.226 A:middle
faced with one of these

00:21:31.266 --> 00:21:33.326 A:middle
dialogues, they understand why

00:21:33.326 --> 00:21:34.756 A:middle
your app needs access.

00:21:35.396 --> 00:21:37.996 A:middle
We're also going further in

00:21:37.996 --> 00:21:39.806 A:middle
protecting sensitive user data.

00:21:40.456 --> 00:21:42.036 A:middle
And only specialized apps like

00:21:42.036 --> 00:21:44.106 A:middle
backup tools require access to

00:21:44.106 --> 00:21:45.006 A:middle
this kind of data.

00:21:45.416 --> 00:21:46.396 A:middle
And so we'll protect these

00:21:46.396 --> 00:21:48.336 A:middle
locations by requiring user

00:21:48.336 --> 00:21:50.666 A:middle
consent directly in the security

00:21:50.666 --> 00:21:53.776 A:middle
and privacy preference pane.

00:21:53.946 --> 00:21:55.236 A:middle
Next, we're introducing

00:21:55.236 --> 00:21:56.616 A:middle
enhancements to run time

00:21:56.616 --> 00:21:57.246 A:middle
protections.

00:21:58.086 --> 00:21:58.876 A:middle
Now, a number of you have

00:21:58.876 --> 00:22:01.036 A:middle
requested a way to extend the

00:21:58.876 --> 00:22:01.036 A:middle
requested a way to extend the

00:22:01.146 --> 00:22:02.846 A:middle
zip protections to your own

00:22:02.846 --> 00:22:03.146 A:middle
apps.

00:22:03.886 --> 00:22:05.896 A:middle
And our new enhanced run times,

00:22:05.936 --> 00:22:07.446 A:middle
there's a new security baseline

00:22:07.736 --> 00:22:09.466 A:middle
that requires risky capabilities

00:22:09.826 --> 00:22:10.726 A:middle
to be opted in.

00:22:11.376 --> 00:22:12.456 A:middle
So beyond strong code

00:22:12.456 --> 00:22:14.656 A:middle
validation, if for example also

00:22:14.656 --> 00:22:16.056 A:middle
protects your apps from code

00:22:16.056 --> 00:22:16.606 A:middle
injection.

00:22:17.526 --> 00:22:18.826 A:middle
The enhanced run time is fully

00:22:18.826 --> 00:22:19.906 A:middle
backwards compatible.

00:22:20.146 --> 00:22:21.816 A:middle
It's opt in through a simple

00:22:21.896 --> 00:22:23.176 A:middle
switch in Xcode.

00:22:24.636 --> 00:22:25.876 A:middle
And finally, we're introducing

00:22:25.876 --> 00:22:28.446 A:middle
the concept of notarized apps.

00:22:28.996 --> 00:22:30.416 A:middle
This is an extension to the

00:22:30.416 --> 00:22:32.036 A:middle
Developer ID program for apps

00:22:32.036 --> 00:22:33.706 A:middle
that are distributed outside of

00:22:33.706 --> 00:22:34.596 A:middle
the Mac App Store.

00:22:34.596 --> 00:22:35.896 A:middle
And it has two main goals.

00:22:36.406 --> 00:22:38.266 A:middle
The first is to detect malware

00:22:38.266 --> 00:22:40.356 A:middle
even faster than today before it

00:22:40.356 --> 00:22:41.746 A:middle
gets distributed to our users.

00:22:42.346 --> 00:22:43.736 A:middle
And second, provide a

00:22:43.826 --> 00:22:45.026 A:middle
finer-grained revocation

00:22:45.026 --> 00:22:46.846 A:middle
capability so that we can revoke

00:22:46.846 --> 00:22:48.256 A:middle
a specific version of a

00:22:48.256 --> 00:22:50.246 A:middle
compromised app as opposed to

00:22:50.246 --> 00:22:52.326 A:middle
revoking the entire signing

00:22:52.326 --> 00:22:52.946 A:middle
certificate.

00:22:53.786 --> 00:22:54.816 A:middle
Now here's how it works.

00:22:55.316 --> 00:22:56.846 A:middle
You develop the bug and build

00:22:56.846 --> 00:22:57.866 A:middle
your app as before.

00:22:57.866 --> 00:22:59.126 A:middle
And you sign it with your

00:22:59.126 --> 00:23:00.426 A:middle
Developer ID Certificate.

00:22:59.126 --> 00:23:00.426 A:middle
Developer ID Certificate.

00:23:01.096 --> 00:23:02.356 A:middle
But before distributing it to

00:23:02.356 --> 00:23:04.156 A:middle
your users, you submit to the

00:23:04.156 --> 00:23:05.626 A:middle
Developer ID Notary Service.

00:23:06.336 --> 00:23:08.336 A:middle
Once notarized, you distribute

00:23:08.526 --> 00:23:09.556 A:middle
the app through your existing

00:23:09.556 --> 00:23:09.986 A:middle
channel.

00:23:11.186 --> 00:23:13.266 A:middle
Once your user runs the app on

00:23:13.266 --> 00:23:15.536 A:middle
their system, MacOS Mojave will

00:23:15.536 --> 00:23:16.826 A:middle
check with the Notary Service to

00:23:16.826 --> 00:23:18.006 A:middle
make sure the app is properly

00:23:18.006 --> 00:23:20.556 A:middle
notarized and is not known to be

00:23:20.556 --> 00:23:21.056 A:middle
malicious.

00:23:22.106 --> 00:23:24.336 A:middle
Now, the service is not app

00:23:24.336 --> 00:23:25.026 A:middle
review.

00:23:25.026 --> 00:23:26.186 A:middle
There are no new guidelines

00:23:26.186 --> 00:23:27.926 A:middle
being imposed on Developer ID

00:23:27.926 --> 00:23:29.496 A:middle
apps as a result of the Notary

00:23:29.556 --> 00:23:29.906 A:middle
Service.

00:23:30.256 --> 00:23:32.216 A:middle
It is used exclusively to

00:23:32.216 --> 00:23:34.156 A:middle
analyze apps for security

00:23:34.156 --> 00:23:34.726 A:middle
purposes.

00:23:35.996 --> 00:23:37.796 A:middle
A future version of MacOS will

00:23:37.796 --> 00:23:40.316 A:middle
require all Developer ID apps to

00:23:40.316 --> 00:23:41.546 A:middle
be notarized by the service

00:23:41.546 --> 00:23:43.136 A:middle
before they can be installed so

00:23:43.216 --> 00:23:44.356 A:middle
we want you to get ready.

00:23:44.356 --> 00:23:46.616 A:middle
It's available in beta today.

00:23:46.616 --> 00:23:48.596 A:middle
We encourage you to try it out

00:23:48.596 --> 00:23:49.876 A:middle
and give us feedback.

00:23:50.996 --> 00:23:52.136 A:middle
And those are the enhancements

00:23:52.186 --> 00:23:54.846 A:middle
to Gatekeeper in MacOS Mojave.

00:23:55.276 --> 00:23:56.796 A:middle
Let's now switch gears and talk

00:23:56.796 --> 00:23:58.626 A:middle
about the MacOS user experience.

00:23:59.056 --> 00:24:00.496 A:middle
And to do that, I'd like to

00:23:59.056 --> 00:24:00.496 A:middle
And to do that, I'd like to

00:24:00.496 --> 00:24:01.746 A:middle
invite Kristen up on stage.

00:24:01.746 --> 00:24:01.976 A:middle
Kristen?

00:24:02.516 --> 00:24:05.546 A:middle
[ Applause ]

00:24:06.046 --> 00:24:06.906 A:middle
&gt;&gt; Thank you, Sebastian.

00:24:06.906 --> 00:24:07.766 A:middle
I'm excited to be here.

00:24:08.556 --> 00:24:09.806 A:middle
We have a lot of great features

00:24:09.806 --> 00:24:11.546 A:middle
in MacOS Mojave including

00:24:11.546 --> 00:24:12.656 A:middle
improvements to Finder,

00:24:12.896 --> 00:24:14.836 A:middle
SnapShots and desktops docs.

00:24:15.116 --> 00:24:17.046 A:middle
I'd like to focus on one in

00:24:17.046 --> 00:24:18.166 A:middle
particular that you, as

00:24:18.166 --> 00:24:19.466 A:middle
developers, can take advantage

00:24:19.466 --> 00:24:19.536 A:middle
of.

00:24:19.536 --> 00:24:20.956 A:middle
And that's Quick Actions.

00:24:21.646 --> 00:24:26.746 A:middle
With Finder Quick Actions, we've

00:24:26.746 --> 00:24:28.296 A:middle
embedded the tools you need

00:24:28.296 --> 00:24:29.826 A:middle
right where you need them in the

00:24:29.826 --> 00:24:30.846 A:middle
Finder preview pane.

00:24:31.826 --> 00:24:33.766 A:middle
You can perform common actions

00:24:33.826 --> 00:24:35.166 A:middle
on your files without ever

00:24:35.166 --> 00:24:35.866 A:middle
leaving Finder.

00:24:36.586 --> 00:24:38.646 A:middle
And there's different actions

00:24:38.646 --> 00:24:39.626 A:middle
for different file types.

00:24:39.626 --> 00:24:41.456 A:middle
As you can see here with video

00:24:41.456 --> 00:24:46.366 A:middle
and here, with a PDF.

00:24:47.416 --> 00:24:48.506 A:middle
And it's not just built-in

00:24:48.576 --> 00:24:48.876 A:middle
actions.

00:24:49.326 --> 00:24:51.296 A:middle
We know pro users especially

00:24:51.296 --> 00:24:52.196 A:middle
like to create their own.

00:24:52.776 --> 00:24:54.766 A:middle
And those actions are shown here

00:24:54.976 --> 00:24:57.356 A:middle
in Finder as well.

00:24:57.536 --> 00:24:58.856 A:middle
New developers will be able to

00:24:58.856 --> 00:25:00.496 A:middle
provide custom actions from your

00:24:58.856 --> 00:25:00.496 A:middle
provide custom actions from your

00:25:00.496 --> 00:25:01.936 A:middle
applications using app

00:25:01.936 --> 00:25:02.636 A:middle
extensions.

00:25:03.466 --> 00:25:05.366 A:middle
And as an end-user, you can also

00:25:05.366 --> 00:25:07.376 A:middle
combine shell scripts,

00:25:07.376 --> 00:25:09.146 A:middle
AppleScripts and Automator

00:25:09.146 --> 00:25:11.496 A:middle
Actions in Automator to create

00:25:11.496 --> 00:25:12.186 A:middle
an action bundle.

00:25:12.246 --> 00:25:14.816 A:middle
And these action bundles will be

00:25:14.816 --> 00:25:17.046 A:middle
shown here in Finder as well

00:25:17.046 --> 00:25:18.726 A:middle
based on file type.

00:25:19.456 --> 00:25:20.986 A:middle
These Custom Actions get some

00:25:20.986 --> 00:25:23.216 A:middle
prime real estate in Finder and

00:25:23.216 --> 00:25:24.726 A:middle
even more so in Touch Bar.

00:25:25.176 --> 00:25:26.346 A:middle
Touch Bar is great when

00:25:26.346 --> 00:25:26.996 A:middle
customized.

00:25:27.346 --> 00:25:28.686 A:middle
And you can customize Touch Bar

00:25:28.686 --> 00:25:29.906 A:middle
to show these actions all the

00:25:29.906 --> 00:25:31.576 A:middle
time or on the tap of a button.

00:25:33.006 --> 00:25:35.546 A:middle
Moving on, in the keynote this

00:25:35.626 --> 00:25:37.566 A:middle
morning, you got a sneak peek at

00:25:37.566 --> 00:25:39.286 A:middle
another technology we are really

00:25:39.286 --> 00:25:39.906 A:middle
excited about.

00:25:39.906 --> 00:25:42.796 A:middle
An easy way to bring iOS apps to

00:25:43.856 --> 00:25:44.626 A:middle
the Mac.

00:25:44.896 --> 00:25:46.076 A:middle
We are in the midst of

00:25:46.076 --> 00:25:48.016 A:middle
developing this technology in

00:25:48.016 --> 00:25:49.426 A:middle
the context of these four apps,

00:25:49.976 --> 00:25:52.166 A:middle
News, Stocks, Voice Memos and

00:25:52.166 --> 00:25:52.486 A:middle
Home.

00:25:53.216 --> 00:25:57.076 A:middle
These apps utilize UIKit and

00:25:57.336 --> 00:25:59.376 A:middle
this is a new way to delivery

00:25:59.376 --> 00:26:01.746 A:middle
great Mac apps.

00:25:59.376 --> 00:26:01.746 A:middle
great Mac apps.

00:26:01.746 --> 00:26:03.396 A:middle
Of course, AppKit is our primary

00:26:03.396 --> 00:26:04.846 A:middle
native framework and it takes

00:26:04.846 --> 00:26:06.846 A:middle
full advantage of all the Mac

00:26:06.846 --> 00:26:07.596 A:middle
has to offer.

00:26:07.936 --> 00:26:09.156 A:middle
And in no way are we

00:26:09.156 --> 00:26:11.066 A:middle
de-emphasizing that.

00:26:11.066 --> 00:26:12.286 A:middle
However, we note that a lot of

00:26:12.286 --> 00:26:14.186 A:middle
you have iOS apps and you don't

00:26:14.186 --> 00:26:15.396 A:middle
have a native Mac experience.

00:26:15.396 --> 00:26:17.306 A:middle
And for these cases, we want you

00:26:17.306 --> 00:26:18.476 A:middle
to -- we want to give you an

00:26:18.476 --> 00:26:20.436 A:middle
easy way to bring your apps to

00:26:20.436 --> 00:26:21.226 A:middle
the Mac as well.

00:26:22.346 --> 00:26:24.206 A:middle
So how are we doing this?

00:26:25.216 --> 00:26:27.016 A:middle
These UIKit apps are running in

00:26:27.016 --> 00:26:28.576 A:middle
a native environment on top of a

00:26:28.576 --> 00:26:29.026 A:middle
native stack.

00:26:29.196 --> 00:26:30.856 A:middle
And if you look closely, you'll

00:26:30.856 --> 00:26:32.446 A:middle
see that the stack below the

00:26:32.446 --> 00:26:34.206 A:middle
UIKit app has a lot in common

00:26:34.206 --> 00:26:35.416 A:middle
with the stack below the AppKit

00:26:35.536 --> 00:26:35.976 A:middle
app.

00:26:35.976 --> 00:26:37.616 A:middle
In fact, these environments were

00:26:37.616 --> 00:26:39.336 A:middle
built on a common foundation

00:26:39.596 --> 00:26:40.816 A:middle
which in some cases has drifted

00:26:40.816 --> 00:26:41.676 A:middle
apart over time.

00:26:42.826 --> 00:26:44.696 A:middle
So we're taking this opportunity

00:26:44.846 --> 00:26:46.466 A:middle
to rationalize the substrate

00:26:47.136 --> 00:26:48.546 A:middle
which is great news for you

00:26:48.546 --> 00:26:49.886 A:middle
developers independent of this

00:26:49.886 --> 00:26:51.186 A:middle
technology because it makes it

00:26:51.186 --> 00:26:52.556 A:middle
easier for you to write portable

00:26:52.556 --> 00:26:52.836 A:middle
code.

00:26:53.466 --> 00:26:56.336 A:middle
These apps get all the typical

00:26:56.336 --> 00:26:59.026 A:middle
Mac features and I'd like to

00:26:59.026 --> 00:26:59.976 A:middle
show that to you now.

00:27:14.046 --> 00:27:15.466 A:middle
You've seen the new Stocks app

00:27:15.946 --> 00:27:17.306 A:middle
for iPad.

00:27:17.846 --> 00:27:19.426 A:middle
I'm running a Mac version of

00:27:19.426 --> 00:27:20.486 A:middle
this app built from the same

00:27:20.486 --> 00:27:20.906 A:middle
sources.

00:27:22.046 --> 00:27:23.356 A:middle
Mouse events are mapped to UI

00:27:23.356 --> 00:27:25.336 A:middle
events so I can click on a

00:27:25.336 --> 00:27:27.116 A:middle
ticker symbol in the watchlist

00:27:27.586 --> 00:27:28.636 A:middle
to see more information.

00:27:29.306 --> 00:27:30.896 A:middle
I can move my mouse over the

00:27:30.896 --> 00:27:32.366 A:middle
interactive chart to see the

00:27:32.366 --> 00:27:34.056 A:middle
price at a point in time and I

00:27:34.056 --> 00:27:35.416 A:middle
can click and drag to see the

00:27:35.416 --> 00:27:36.926 A:middle
price change over a period of

00:27:36.926 --> 00:27:37.086 A:middle
time.

00:27:37.736 --> 00:27:39.406 A:middle
I'm going to click on an article

00:27:39.406 --> 00:27:40.626 A:middle
to open it right here in app.

00:27:40.626 --> 00:27:42.666 A:middle
Now since this is a Mac window,

00:27:42.666 --> 00:27:44.766 A:middle
I can resize it as I would like

00:27:45.266 --> 00:27:46.386 A:middle
and I can also take it full

00:27:46.386 --> 00:27:46.686 A:middle
screen.

00:27:46.766 --> 00:27:49.816 A:middle
I can navigate using two-finger

00:27:49.816 --> 00:27:51.466 A:middle
scroll which is another example

00:27:51.466 --> 00:27:52.296 A:middle
of event mapping.

00:27:52.516 --> 00:27:54.216 A:middle
And if I want to copy some text,

00:27:54.216 --> 00:27:57.126 A:middle
I can select it, pick it up and

00:27:57.126 --> 00:28:02.066 A:middle
drag it and drop it in my Notes

00:27:57.126 --> 00:28:02.066 A:middle
drag it and drop it in my Notes

00:28:02.376 --> 00:28:02.686 A:middle
app.

00:28:03.016 --> 00:28:04.426 A:middle
Now in this Note, I have a link

00:28:04.586 --> 00:28:06.406 A:middle
to a news article so I'm going

00:28:06.406 --> 00:28:07.826 A:middle
to click that to open it

00:28:07.826 --> 00:28:09.736 A:middle
directly in News.

00:28:10.126 --> 00:28:12.666 A:middle
And we've populated the menu

00:28:12.786 --> 00:28:15.826 A:middle
with items for this application.

00:28:16.126 --> 00:28:17.286 A:middle
So for example, I can go to the

00:28:17.286 --> 00:28:19.036 A:middle
file menu and I can follow this

00:28:19.076 --> 00:28:19.446 A:middle
channel.

00:28:20.316 --> 00:28:22.406 A:middle
And notice how ESPN appears

00:28:22.406 --> 00:28:23.666 A:middle
directly in my transition

00:28:23.666 --> 00:28:24.096 A:middle
sidebar.

00:28:24.916 --> 00:28:26.366 A:middle
Another Mac touch can be seen in

00:28:26.366 --> 00:28:28.136 A:middle
the toolbar here where there's a

00:28:28.136 --> 00:28:29.606 A:middle
red color contribution coming

00:28:29.606 --> 00:28:31.206 A:middle
from the content underneath it.

00:28:31.886 --> 00:28:33.256 A:middle
Now we have controls for the

00:28:33.256 --> 00:28:34.996 A:middle
window in the toolbar including

00:28:34.996 --> 00:28:36.906 A:middle
the share button so I can click

00:28:36.906 --> 00:28:38.266 A:middle
on the share button to show this

00:28:38.266 --> 00:28:39.396 A:middle
article with a friend.

00:28:40.176 --> 00:28:44.186 A:middle
So that's a quick look at UIKit

00:28:44.526 --> 00:28:44.966 A:middle
apps on the Mac.

00:28:45.516 --> 00:28:50.636 A:middle
[ Applause ]

00:28:51.136 --> 00:28:51.676 A:middle
Now, thank you.

00:28:53.376 --> 00:28:54.686 A:middle
We are continuing to develop

00:28:54.716 --> 00:28:56.266 A:middle
this technology and we are

00:28:56.266 --> 00:28:57.756 A:middle
working to fully vet it before

00:28:57.756 --> 00:28:59.316 A:middle
making it available to you and

00:28:59.316 --> 00:29:00.856 A:middle
your applications which we are

00:28:59.316 --> 00:29:00.856 A:middle
your applications which we are

00:29:00.856 --> 00:29:02.886 A:middle
planning to do next year.

00:29:04.496 --> 00:29:09.216 A:middle
Next, Dark Mode -- you've seen

00:29:09.406 --> 00:29:12.196 A:middle
that Dark Mode is a big thing

00:29:12.196 --> 00:29:13.966 A:middle
for MacOS Mojave and we think it

00:29:13.966 --> 00:29:14.576 A:middle
looks stunning.

00:29:14.576 --> 00:29:15.956 A:middle
Let's take a quick tour.

00:29:20.076 --> 00:29:21.276 A:middle
The window background is dark

00:29:21.566 --> 00:29:23.786 A:middle
making the content pop.

00:29:24.346 --> 00:29:26.216 A:middle
The sidebar is translucent and

00:29:26.456 --> 00:29:28.556 A:middle
the content is blended vibrantly

00:29:28.976 --> 00:29:31.456 A:middle
which preserves contrast with

00:29:31.486 --> 00:29:32.816 A:middle
whatever may be underneath the

00:29:32.816 --> 00:29:33.076 A:middle
window.

00:29:33.076 --> 00:29:36.506 A:middle
And in a few cases, we found it

00:29:36.506 --> 00:29:38.356 A:middle
valuable to change the icons

00:29:38.356 --> 00:29:40.136 A:middle
slightly so you can see a slight

00:29:40.186 --> 00:29:42.236 A:middle
darkening of this photo icon and

00:29:42.236 --> 00:29:44.126 A:middle
a new dark trash can.

00:29:45.136 --> 00:29:46.346 A:middle
But there's something very

00:29:46.346 --> 00:29:46.946 A:middle
subtle here.

00:29:47.756 --> 00:29:49.176 A:middle
The window background is

00:29:49.176 --> 00:29:50.536 A:middle
actually picking up a slight

00:29:50.536 --> 00:29:52.096 A:middle
hint of color from the desktop.

00:29:53.716 --> 00:29:55.316 A:middle
To show you what I mean, here is

00:29:55.316 --> 00:29:57.296 A:middle
a window on top of two very

00:29:57.296 --> 00:29:57.976 A:middle
different desktop pictures.

00:29:59.736 --> 00:30:01.446 A:middle
On the left side, there's a

00:29:59.736 --> 00:30:01.446 A:middle
On the left side, there's a

00:30:01.446 --> 00:30:02.976 A:middle
slight blue tint in the window

00:30:03.066 --> 00:30:04.746 A:middle
from that slightly blue desktop

00:30:04.776 --> 00:30:05.166 A:middle
picture.

00:30:05.666 --> 00:30:07.346 A:middle
And on the right side, there's a

00:30:07.346 --> 00:30:08.516 A:middle
slight orange tint from the

00:30:08.516 --> 00:30:09.956 A:middle
predominantly orange desktop

00:30:09.996 --> 00:30:10.366 A:middle
picture.

00:30:10.996 --> 00:30:12.406 A:middle
This is not translucency.

00:30:12.406 --> 00:30:13.596 A:middle
We're actually picking up our

00:30:13.596 --> 00:30:14.776 A:middle
average color from the desktop

00:30:14.816 --> 00:30:16.446 A:middle
and blending it into an opaque

00:30:16.496 --> 00:30:16.966 A:middle
background.

00:30:16.966 --> 00:30:18.536 A:middle
And we do this so that your

00:30:18.536 --> 00:30:20.056 A:middle
window looks harmonious with a

00:30:20.056 --> 00:30:21.436 A:middle
variety of desktop pictures.

00:30:21.436 --> 00:30:24.946 A:middle
Let's look at what you need to

00:30:24.946 --> 00:30:26.796 A:middle
do in your apps to support Dark

00:30:26.796 --> 00:30:26.986 A:middle
Mode.

00:30:28.656 --> 00:30:30.516 A:middle
Because we want to make sure to

00:30:30.516 --> 00:30:31.806 A:middle
preserve compatibility with your

00:30:31.806 --> 00:30:32.986 A:middle
applications, we are not

00:30:33.396 --> 00:30:34.836 A:middle
automatically opting you in.

00:30:35.106 --> 00:30:36.426 A:middle
You need to build against the

00:30:36.426 --> 00:30:38.726 A:middle
MacOS Mojave STKit.

00:30:40.046 --> 00:30:42.026 A:middle
For example, this is how Keynote

00:30:42.026 --> 00:30:43.906 A:middle
looked when we first ran it

00:30:44.046 --> 00:30:46.096 A:middle
after building on Mojave.

00:30:47.026 --> 00:30:48.696 A:middle
It got a dark toolbar but it

00:30:48.696 --> 00:30:50.326 A:middle
didn't otherwise adopt to Dark

00:30:50.386 --> 00:30:51.756 A:middle
Mode the way we wished.

00:30:53.146 --> 00:30:54.506 A:middle
The [inaudible] part is drawing

00:30:54.506 --> 00:30:55.606 A:middle
too light of a background.

00:30:56.396 --> 00:30:58.866 A:middle
The toolbar controls are faint

00:30:58.866 --> 00:31:00.696 A:middle
and hard to read.

00:30:58.866 --> 00:31:00.696 A:middle
and hard to read.

00:31:01.096 --> 00:31:02.546 A:middle
The sidebar is the wrong

00:31:02.546 --> 00:31:04.426 A:middle
material so it's too

00:31:04.426 --> 00:31:05.016 A:middle
translucent.

00:31:05.016 --> 00:31:11.246 A:middle
And in the selected segment in

00:31:11.246 --> 00:31:12.906 A:middle
control, we have a white glyph

00:31:13.086 --> 00:31:14.056 A:middle
on a white background.

00:31:15.626 --> 00:31:17.266 A:middle
The good news is these issues

00:31:17.266 --> 00:31:20.426 A:middle
were all easy to fix.

00:31:20.776 --> 00:31:22.426 A:middle
We have simple API that support

00:31:22.426 --> 00:31:23.426 A:middle
all the needs of Dark Mode.

00:31:23.426 --> 00:31:25.536 A:middle
And in fact, most of these have

00:31:25.536 --> 00:31:26.846 A:middle
existed for years and we just

00:31:26.846 --> 00:31:29.916 A:middle
had to augment them a tiny bit.

00:31:29.916 --> 00:31:30.576 A:middle
There's NSColor.

00:31:32.246 --> 00:31:34.376 A:middle
There's Container Views with

00:31:34.376 --> 00:31:35.796 A:middle
background color properties.

00:31:36.926 --> 00:31:38.456 A:middle
There's Visual Effect View in

00:31:38.456 --> 00:31:39.036 A:middle
materials.

00:31:40.606 --> 00:31:42.366 A:middle
There's Template Images and a

00:31:42.366 --> 00:31:44.236 A:middle
new way to colorize your

00:31:44.236 --> 00:31:44.476 A:middle
content.

00:31:46.316 --> 00:31:48.456 A:middle
So we updated Keynote with these

00:31:48.456 --> 00:31:50.476 A:middle
APIs and this is the result.

00:31:51.196 --> 00:31:51.976 A:middle
It looks great.

00:31:54.696 --> 00:31:55.906 A:middle
These were pretty simple

00:31:55.906 --> 00:31:56.416 A:middle
changes.

00:31:56.666 --> 00:31:58.436 A:middle
We invite you to try this today.

00:31:59.006 --> 00:32:00.236 A:middle
If you're already following the

00:31:59.006 --> 00:32:00.236 A:middle
If you're already following the

00:32:00.236 --> 00:32:02.076 A:middle
best practices of using asset

00:32:02.076 --> 00:32:03.596 A:middle
catalogs in system colors, you

00:32:03.596 --> 00:32:05.136 A:middle
could be pleasantly surprised at

00:32:05.186 --> 00:32:06.646 A:middle
how close you already are.

00:32:07.306 --> 00:32:08.556 A:middle
And since these techniques are

00:32:08.556 --> 00:32:10.486 A:middle
available on previous releases,

00:32:10.756 --> 00:32:12.146 A:middle
you can adopt and easily

00:32:12.146 --> 00:32:12.866 A:middle
back-deploy.

00:32:13.706 --> 00:32:14.976 A:middle
It, of course, depends on how

00:32:14.976 --> 00:32:16.456 A:middle
many custom controls you have in

00:32:16.456 --> 00:32:18.256 A:middle
your applications but for a few

00:32:18.256 --> 00:32:20.356 A:middle
of our apps, it was as little as

00:32:20.356 --> 00:32:21.786 A:middle
a day of work.

00:32:22.006 --> 00:32:23.346 A:middle
We give you some useful tools

00:32:23.346 --> 00:32:24.096 A:middle
for it as well.

00:32:24.096 --> 00:32:26.536 A:middle
Well, I'd like to welcome

00:32:26.656 --> 00:32:28.306 A:middle
Matthew to the stage to show you

00:32:28.306 --> 00:32:30.296 A:middle
how Xcode 10 supports adoption

00:32:30.296 --> 00:32:31.976 A:middle
of Dark Mode and much more.

00:32:32.516 --> 00:32:38.726 A:middle
[ Applause ]

00:32:39.226 --> 00:32:39.916 A:middle
&gt;&gt; Thank you, Kristen.

00:32:40.676 --> 00:32:42.166 A:middle
Our Xcode release this year is

00:32:42.166 --> 00:32:43.486 A:middle
focused on the productivity.

00:32:44.156 --> 00:32:45.116 A:middle
Work flow improvements,

00:32:45.266 --> 00:32:47.236 A:middle
performance improvements and new

00:32:47.236 --> 00:32:49.106 A:middle
feature support in all of our

00:32:50.246 --> 00:32:50.586 A:middle
STKits.

00:32:50.586 --> 00:32:51.906 A:middle
And of course, when running on

00:32:51.906 --> 00:32:54.566 A:middle
MacOS Mojave, Xcode has a whole

00:32:54.566 --> 00:32:55.556 A:middle
new look and feel.

00:32:56.006 --> 00:32:57.956 A:middle
So let's start by taking a sneak

00:32:57.956 --> 00:32:59.676 A:middle
peek at how Xcode can make your

00:32:59.676 --> 00:33:01.786 A:middle
Mac apps look great in Dark Mode

00:32:59.676 --> 00:33:01.786 A:middle
Mac apps look great in Dark Mode

00:33:01.836 --> 00:33:01.976 A:middle
too.

00:33:06.046 --> 00:33:07.946 A:middle
So here we are back in our solar

00:33:07.946 --> 00:33:08.826 A:middle
system application.

00:33:09.576 --> 00:33:10.886 A:middle
We've been converting it over to

00:33:10.886 --> 00:33:12.006 A:middle
Dark Mode and we've made great

00:33:12.006 --> 00:33:12.896 A:middle
progress so far.

00:33:13.356 --> 00:33:15.036 A:middle
There's a couple of items left I

00:33:15.036 --> 00:33:15.936 A:middle
need to finish here.

00:33:16.716 --> 00:33:17.786 A:middle
There's a darker version of this

00:33:17.786 --> 00:33:19.326 A:middle
globe my designers have provided

00:33:19.326 --> 00:33:19.746 A:middle
to us.

00:33:20.036 --> 00:33:21.806 A:middle
And there's these two hard-coded

00:33:22.006 --> 00:33:23.786 A:middle
boxes that have colors that I

00:33:23.786 --> 00:33:24.466 A:middle
need to change.

00:33:25.286 --> 00:33:27.006 A:middle
Xcode's asset catalogs makes

00:33:27.056 --> 00:33:27.546 A:middle
this easy.

00:33:28.166 --> 00:33:29.866 A:middle
Let's start with this image.

00:33:31.026 --> 00:33:32.406 A:middle
I'll change over to the tab with

00:33:32.406 --> 00:33:34.066 A:middle
my assets and we can see, I've

00:33:34.066 --> 00:33:35.946 A:middle
already defined dark variance

00:33:35.996 --> 00:33:37.116 A:middle
for all of my colors.

00:33:38.496 --> 00:33:39.896 A:middle
I'll select the group with all

00:33:39.896 --> 00:33:41.576 A:middle
of my images and here's the

00:33:41.686 --> 00:33:43.026 A:middle
planet image I'd like to add a

00:33:43.026 --> 00:33:43.926 A:middle
dark variant for.

00:33:44.796 --> 00:33:45.276 A:middle
That's easy.

00:33:46.126 --> 00:33:46.796 A:middle
I'll select it.

00:33:47.426 --> 00:33:49.416 A:middle
Go in the Inspector and add a

00:33:49.416 --> 00:33:50.096 A:middle
dark variant.

00:33:50.586 --> 00:33:52.246 A:middle
And my designers have sent me

00:33:52.246 --> 00:33:53.596 A:middle
the assets here so I can just

00:33:53.596 --> 00:33:54.606 A:middle
pull them out of my downloads

00:33:54.606 --> 00:33:56.676 A:middle
folder and put them into the

00:33:56.676 --> 00:33:57.146 A:middle
catalog.

00:33:58.176 --> 00:33:58.866 A:middle
That's it.

00:33:59.536 --> 00:34:00.786 A:middle
You'll see when I go back to my

00:33:59.536 --> 00:34:00.786 A:middle
You'll see when I go back to my

00:34:00.786 --> 00:34:02.346 A:middle
interface now, the globe is

00:34:02.346 --> 00:34:03.886 A:middle
updated to match the appearance

00:34:04.206 --> 00:34:05.386 A:middle
of the interface builder canvas.

00:34:07.176 --> 00:34:08.886 A:middle
Now, I've already specified all

00:34:08.886 --> 00:34:10.096 A:middle
the color variants that I need.

00:34:10.666 --> 00:34:12.246 A:middle
So to update these boxes, I'll

00:34:12.246 --> 00:34:14.126 A:middle
just select both of them, go to

00:34:14.126 --> 00:34:15.666 A:middle
the Inspector and change the

00:34:15.666 --> 00:34:17.556 A:middle
fill color to one of my catalog

00:34:17.556 --> 00:34:17.966 A:middle
colors.

00:34:18.596 --> 00:34:19.846 A:middle
We'll take the badge background

00:34:19.926 --> 00:34:20.136 A:middle
color.

00:34:21.356 --> 00:34:22.846 A:middle
Great, so now my interface is

00:34:22.846 --> 00:34:23.466 A:middle
looking pretty good.

00:34:24.485 --> 00:34:26.255 A:middle
Now when designing interfaces, I

00:34:26.255 --> 00:34:27.545 A:middle
often like to check the other

00:34:27.545 --> 00:34:29.466 A:middle
appearance as I'm going along to

00:34:29.466 --> 00:34:30.565 A:middle
evaluate my progress.

00:34:31.326 --> 00:34:32.335 A:middle
Interface Builder makes this

00:34:32.335 --> 00:34:32.795 A:middle
easy.

00:34:33.835 --> 00:34:34.896 A:middle
Down the bottom here, there's a

00:34:34.896 --> 00:34:36.516 A:middle
new appearance bar that allows

00:34:36.516 --> 00:34:37.886 A:middle
me to toggle between

00:34:37.886 --> 00:34:38.576 A:middle
appearances.

00:34:39.356 --> 00:34:40.255 A:middle
I'll just select the appearance

00:34:40.255 --> 00:34:41.485 A:middle
on the left and now I'm seeing

00:34:41.485 --> 00:34:42.766 A:middle
my application in the light

00:34:42.826 --> 00:34:43.565 A:middle
appearance as well.

00:34:44.266 --> 00:34:45.636 A:middle
So I can easily evaluate my

00:34:45.676 --> 00:34:46.076 A:middle
progress.

00:34:46.906 --> 00:34:49.466 A:middle
Let's run our application and

00:34:49.466 --> 00:34:50.136 A:middle
see how we've done.

00:34:51.295 --> 00:34:52.536 A:middle
We'll update our assets and

00:34:52.536 --> 00:34:53.766 A:middle
we'll launch our application.

00:34:54.505 --> 00:34:55.916 A:middle
And we'll see here that the

00:34:55.916 --> 00:34:57.106 A:middle
application launches.

00:34:58.046 --> 00:34:59.356 A:middle
And great, it's looking pretty

00:34:59.356 --> 00:34:59.606 A:middle
good.

00:35:00.226 --> 00:35:02.406 A:middle
Now the application launched in

00:35:02.406 --> 00:35:03.856 A:middle
the dark mode to match my

00:35:03.936 --> 00:35:04.226 A:middle
system.

00:35:04.916 --> 00:35:06.466 A:middle
But while I'm developing, I can

00:35:06.466 --> 00:35:07.556 A:middle
change the appearance.

00:35:08.486 --> 00:35:09.866 A:middle
Down here in the debug bar is a

00:35:09.866 --> 00:35:11.516 A:middle
new appearance toggle that's

00:35:11.516 --> 00:35:13.476 A:middle
also in Touch Bar, and it gives

00:35:13.476 --> 00:35:14.446 A:middle
me access to all the

00:35:14.446 --> 00:35:15.146 A:middle
appearances.

00:35:15.666 --> 00:35:17.366 A:middle
I can select the light mode, the

00:35:17.366 --> 00:35:19.566 A:middle
dark mode, even high-contrast

00:35:19.566 --> 00:35:21.196 A:middle
modes to evaluate accessibility.

00:35:21.966 --> 00:35:23.766 A:middle
So I'll select the light mode.

00:35:23.766 --> 00:35:25.816 A:middle
We'll load those assets, and

00:35:25.816 --> 00:35:27.046 A:middle
there's my application in light

00:35:27.046 --> 00:35:27.446 A:middle
mode as well.

00:35:28.436 --> 00:35:30.496 A:middle
So very simply, with asset

00:35:30.496 --> 00:35:32.186 A:middle
catalogs, interface builder, and

00:35:32.186 --> 00:35:33.946 A:middle
our debugging tools, it's really

00:35:33.946 --> 00:35:35.176 A:middle
easy to make your apps look

00:35:35.176 --> 00:35:36.566 A:middle
great in Dark Mode, too.

00:35:37.516 --> 00:35:45.566 A:middle
[ Applause ]

00:35:46.066 --> 00:35:47.796 A:middle
Now I know many of you have

00:35:47.796 --> 00:35:49.456 A:middle
wanted a dark mode appearance in

00:35:49.566 --> 00:35:50.646 A:middle
Xcode for a long time.

00:35:51.396 --> 00:35:52.616 A:middle
It's been one of our most

00:35:52.616 --> 00:35:54.076 A:middle
popular requests.

00:35:54.076 --> 00:35:55.296 A:middle
In fact, just a couple weeks

00:35:55.296 --> 00:35:56.686 A:middle
ago, there was a posting in the

00:35:56.686 --> 00:35:58.596 A:middle
App Store about this feature.

00:35:58.856 --> 00:36:00.436 A:middle
It was from a user name Ronnie

00:35:58.856 --> 00:36:00.436 A:middle
It was from a user name Ronnie

00:36:00.436 --> 00:36:02.456 A:middle
Bo Bonnie.

00:36:02.456 --> 00:36:03.436 A:middle
This is true -- I'm not making

00:36:03.436 --> 00:36:04.216 A:middle
this up.

00:36:04.556 --> 00:36:05.556 A:middle
But I just wanted to take a

00:36:05.556 --> 00:36:07.436 A:middle
moment and say Ronnie, if you

00:36:07.436 --> 00:36:09.536 A:middle
are out there, no charge.

00:36:10.516 --> 00:36:12.516 A:middle
[ Laughter ]

00:36:13.516 --> 00:36:15.866 A:middle
[ Applause ]

00:36:16.366 --> 00:36:17.586 A:middle
Now we also have some other

00:36:17.586 --> 00:36:18.906 A:middle
improvements to our design tools

00:36:18.906 --> 00:36:19.666 A:middle
to share with you today.

00:36:21.286 --> 00:36:23.256 A:middle
Form-based UIs like preferences

00:36:23.256 --> 00:36:25.326 A:middle
and inspectors are common in Mac

00:36:25.776 --> 00:36:25.996 A:middle
apps.

00:36:26.036 --> 00:36:27.816 A:middle
And Cocoa's NSGridView is the

00:36:27.816 --> 00:36:29.366 A:middle
perfect system for laying them

00:36:30.296 --> 00:36:30.396 A:middle
out.

00:36:30.516 --> 00:36:31.766 A:middle
So we're bringing the power of

00:36:31.876 --> 00:36:33.656 A:middle
NSGridView right into Interface

00:36:33.656 --> 00:36:35.496 A:middle
Builder where you can now design

00:36:35.496 --> 00:36:37.166 A:middle
your column- and row-based UIs

00:36:37.506 --> 00:36:39.126 A:middle
just like working with tables in

00:36:39.126 --> 00:36:39.606 A:middle
a spreadsheet.

00:36:40.636 --> 00:36:41.676 A:middle
Drag-and-drop content [applause]

00:36:42.206 --> 00:36:42.696 A:middle
-- yes.

00:36:44.786 --> 00:36:48.696 A:middle
Yeah, you can clap for that.

00:36:48.806 --> 00:36:49.756 A:middle
Spreadsheets can be cool.

00:36:49.756 --> 00:36:52.866 A:middle
You can drag-and-drop content,

00:36:52.906 --> 00:36:54.476 A:middle
use contextual actions, and you

00:36:54.476 --> 00:36:56.296 A:middle
get system access to things like

00:36:56.356 --> 00:36:57.436 A:middle
right-to-left layout.

00:36:58.456 --> 00:36:59.476 A:middle
Now when designing your

00:36:59.476 --> 00:37:01.166 A:middle
interfaces, the library is an

00:36:59.476 --> 00:37:01.166 A:middle
interfaces, the library is an

00:37:01.266 --> 00:37:02.796 A:middle
important tool, and we have a

00:37:02.796 --> 00:37:04.046 A:middle
whole new workflow for you

00:37:04.676 --> 00:37:05.956 A:middle
because the library is now

00:37:06.126 --> 00:37:07.466 A:middle
separate from the inspectors.

00:37:08.246 --> 00:37:09.596 A:middle
You can now take the library and

00:37:09.596 --> 00:37:10.906 A:middle
reposition it wherever you want.

00:37:11.556 --> 00:37:13.196 A:middle
you can adjust the size to match

00:37:13.196 --> 00:37:13.666 A:middle
your layout.

00:37:14.286 --> 00:37:15.846 A:middle
And you can keep the library up

00:37:15.846 --> 00:37:17.276 A:middle
while working or have it

00:37:17.276 --> 00:37:18.746 A:middle
automatically dismiss when you

00:37:18.746 --> 00:37:18.966 A:middle
are done.

00:37:19.516 --> 00:37:25.066 A:middle
[ Applause ]

00:37:25.566 --> 00:37:26.896 A:middle
And the library works great with

00:37:26.896 --> 00:37:28.176 A:middle
all of our content types,

00:37:28.246 --> 00:37:29.946 A:middle
including media and code

00:37:31.056 --> 00:37:31.596 A:middle
snippets.

00:37:31.596 --> 00:37:32.746 A:middle
And finally, with our design

00:37:32.746 --> 00:37:33.876 A:middle
tools, you'll notice they're

00:37:33.876 --> 00:37:35.636 A:middle
just snappier, with faster

00:37:35.636 --> 00:37:37.536 A:middle
document loading and more

00:37:37.536 --> 00:37:39.436 A:middle
responsive canvas interactions.

00:37:40.666 --> 00:37:42.056 A:middle
Now we've also spent time

00:37:42.056 --> 00:37:43.706 A:middle
focusing on our source editing

00:37:43.756 --> 00:37:46.716 A:middle
tools, keeping them fast, fluid,

00:37:46.716 --> 00:37:47.286 A:middle
and informative.

00:37:47.286 --> 00:37:49.706 A:middle
We started with performance,

00:37:49.706 --> 00:37:50.626 A:middle
where you'll now see the editor

00:37:50.626 --> 00:37:52.246 A:middle
loads large documents much

00:37:52.306 --> 00:37:54.166 A:middle
faster, all while keeping smooth

00:37:54.166 --> 00:37:55.996 A:middle
scrolling at 60 frames a second.

00:37:57.016 --> 00:37:58.596 A:middle
Next, we double down on

00:37:58.666 --> 00:38:00.516 A:middle
stability in SourceKit and

00:37:58.666 --> 00:38:00.516 A:middle
stability in SourceKit and

00:38:00.516 --> 00:38:01.856 A:middle
enhance the robustness of our

00:38:01.856 --> 00:38:02.736 A:middle
language integration.

00:38:03.146 --> 00:38:04.966 A:middle
So now more of your colorful

00:38:04.966 --> 00:38:06.296 A:middle
comments will stay inside of the

00:38:06.296 --> 00:38:07.876 A:middle
editor rather than being about

00:38:07.876 --> 00:38:07.966 A:middle
it.

00:38:09.516 --> 00:38:15.786 A:middle
[ Applause ]

00:38:16.286 --> 00:38:17.766 A:middle
Co-completion and navigation are

00:38:17.826 --> 00:38:19.646 A:middle
two essential workflows, and

00:38:19.646 --> 00:38:20.686 A:middle
we've improved on both.

00:38:21.596 --> 00:38:23.106 A:middle
Co-completion now provides more

00:38:23.106 --> 00:38:24.896 A:middle
targeted results and limits

00:38:24.896 --> 00:38:26.496 A:middle
completions to high-confidence

00:38:26.536 --> 00:38:27.076 A:middle
matches.

00:38:28.046 --> 00:38:29.466 A:middle
And when navigating, with jump

00:38:29.466 --> 00:38:31.496 A:middle
to definition, the destination

00:38:31.496 --> 00:38:32.956 A:middle
list will now provide contextual

00:38:32.956 --> 00:38:34.676 A:middle
details like file and line

00:38:34.676 --> 00:38:36.276 A:middle
information to help you easily

00:38:36.276 --> 00:38:37.576 A:middle
get to where you need to go.

00:38:38.516 --> 00:38:43.166 A:middle
[ Applause ]

00:38:43.666 --> 00:38:44.576 A:middle
And you'll see the same

00:38:44.576 --> 00:38:46.096 A:middle
contextual information in the

00:38:46.096 --> 00:38:48.136 A:middle
new callers option in the action

00:38:48.136 --> 00:38:49.976 A:middle
menu, which is a seamless way to

00:38:49.976 --> 00:38:51.646 A:middle
move throughout your projects.

00:38:52.456 --> 00:38:54.756 A:middle
Now last year, we introduced

00:38:54.756 --> 00:38:56.436 A:middle
refactoring for all languages,

00:38:56.506 --> 00:38:57.156 A:middle
including Swift.

00:38:57.156 --> 00:38:59.286 A:middle
And you, the Swift community,

00:38:59.486 --> 00:39:01.126 A:middle
embraced the opportunity and

00:38:59.486 --> 00:39:01.126 A:middle
embraced the opportunity and

00:39:01.126 --> 00:39:02.536 A:middle
added a number of new actions.

00:39:03.936 --> 00:39:05.606 A:middle
These actions all streamline

00:39:05.606 --> 00:39:07.526 A:middle
common programming scenarios and

00:39:07.526 --> 00:39:08.956 A:middle
are built right into Xcode now,

00:39:09.446 --> 00:39:10.336 A:middle
just a click away.

00:39:11.766 --> 00:39:13.526 A:middle
Now refactoring is just one of

00:39:13.526 --> 00:39:15.266 A:middle
many ways you can modify the

00:39:15.356 --> 00:39:16.196 A:middle
source in your project.

00:39:16.846 --> 00:39:17.876 A:middle
And to make it easier to keep

00:39:17.876 --> 00:39:19.806 A:middle
track of your changes, we're

00:39:19.806 --> 00:39:21.326 A:middle
introducing a source control

00:39:21.326 --> 00:39:22.056 A:middle
change bar.

00:39:23.336 --> 00:39:24.706 A:middle
The change bar is on the left

00:39:24.706 --> 00:39:25.896 A:middle
side of the editor and

00:39:25.896 --> 00:39:27.326 A:middle
highlights lines of code which

00:39:27.326 --> 00:39:28.856 A:middle
have changed since your last

00:39:28.856 --> 00:39:29.156 A:middle
checkout.

00:39:29.946 --> 00:39:31.896 A:middle
The style and color of the

00:39:31.896 --> 00:39:33.576 A:middle
indicator reveal the type of

00:39:33.576 --> 00:39:35.326 A:middle
change, making it easy for you

00:39:35.326 --> 00:39:37.046 A:middle
to see at a glance changes you

00:39:37.046 --> 00:39:38.516 A:middle
have made, your team members

00:39:38.516 --> 00:39:40.176 A:middle
have made, and those which might

00:39:40.226 --> 00:39:41.016 A:middle
be in conflict.

00:39:41.836 --> 00:39:44.466 A:middle
Now this feature is -- yes.

00:39:45.516 --> 00:39:49.586 A:middle
[ Applause ]

00:39:50.086 --> 00:39:51.256 A:middle
I agree. I think this feature is

00:39:51.296 --> 00:39:51.796 A:middle
pretty awesome.

00:39:51.796 --> 00:39:52.706 A:middle
And I'd actually like to show it

00:39:52.706 --> 00:39:53.966 A:middle
to you in a demo now.

00:39:55.886 --> 00:39:57.336 A:middle
So we're going to go back to our

00:39:57.336 --> 00:39:59.686 A:middle
solar system application, and I

00:39:59.686 --> 00:40:00.906 A:middle
have some changes I'd like to

00:39:59.686 --> 00:40:00.906 A:middle
have some changes I'd like to

00:40:00.906 --> 00:40:03.236 A:middle
make in one of our source files.

00:40:03.346 --> 00:40:04.756 A:middle
It's our scene view controller

00:40:04.756 --> 00:40:04.946 A:middle
here.

00:40:05.676 --> 00:40:07.166 A:middle
So I'll scroll down in the

00:40:07.166 --> 00:40:08.446 A:middle
editor to the place I'd like to

00:40:08.446 --> 00:40:09.206 A:middle
make changes.

00:40:09.816 --> 00:40:10.996 A:middle
And here we can see on the left

00:40:11.076 --> 00:40:12.716 A:middle
-- just to the left of the line

00:40:12.716 --> 00:40:14.896 A:middle
numbers -- the source control

00:40:14.896 --> 00:40:16.206 A:middle
change bar is indicating there's

00:40:16.206 --> 00:40:17.826 A:middle
some upstream changes a team

00:40:17.826 --> 00:40:18.436 A:middle
member has made.

00:40:19.106 --> 00:40:20.346 A:middle
In fact, if I had already made

00:40:20.346 --> 00:40:21.576 A:middle
the changes to this line, you'd

00:40:21.616 --> 00:40:22.926 A:middle
see the indicator turns red,

00:40:23.276 --> 00:40:24.346 A:middle
highlighting a conflict.

00:40:24.976 --> 00:40:26.626 A:middle
If I put my cursor over the

00:40:26.626 --> 00:40:27.596 A:middle
indicator, you'll see it

00:40:27.666 --> 00:40:28.996 A:middle
highlights the ranges of

00:40:29.036 --> 00:40:30.356 A:middle
characters which have changed

00:40:30.356 --> 00:40:31.166 A:middle
and are in conflict.

00:40:32.106 --> 00:40:33.976 A:middle
And if I click on the indicator,

00:40:34.146 --> 00:40:35.776 A:middle
it brings up an action menu with

00:40:35.776 --> 00:40:36.726 A:middle
both a description of the

00:40:36.726 --> 00:40:38.546 A:middle
changes and some actions I can

00:40:38.546 --> 00:40:40.986 A:middle
take I see my team member has

00:40:40.986 --> 00:40:42.376 A:middle
added more descriptive comments

00:40:42.376 --> 00:40:42.556 A:middle
here.

00:40:43.316 --> 00:40:44.896 A:middle
I think we'll take his change,

00:40:45.246 --> 00:40:46.576 A:middle
so I'll use the action menu to

00:40:46.576 --> 00:40:48.946 A:middle
discard my change, and go up

00:40:48.946 --> 00:40:50.546 A:middle
under the source control menu to

00:40:50.606 --> 00:40:51.656 A:middle
pull his changes in.

00:40:53.046 --> 00:40:55.146 A:middle
So here's his changes -- very

00:40:55.146 --> 00:40:56.216 A:middle
descriptive comments.

00:40:56.916 --> 00:40:58.276 A:middle
I can scroll to the bottom of

00:40:58.276 --> 00:40:59.036 A:middle
the editor, see if there's

00:40:59.036 --> 00:41:00.666 A:middle
anything else I'd like to look

00:40:59.036 --> 00:41:00.666 A:middle
anything else I'd like to look

00:41:00.666 --> 00:41:01.096 A:middle
at here.

00:41:01.976 --> 00:41:02.976 A:middle
Here's another new feature of

00:41:02.976 --> 00:41:04.696 A:middle
Xcode 10 -- our editor supports

00:41:04.726 --> 00:41:05.376 A:middle
overscroll now.

00:41:06.516 --> 00:41:11.976 A:middle
[ Applause ]

00:41:12.476 --> 00:41:13.706 A:middle
So going back to the lines of

00:41:13.746 --> 00:41:15.226 A:middle
code I'd like to change, I'd

00:41:15.226 --> 00:41:16.616 A:middle
like to convert these hard-coded

00:41:16.656 --> 00:41:18.716 A:middle
functions into properties that

00:41:18.716 --> 00:41:19.996 A:middle
pull the colors from the asset

00:41:20.026 --> 00:41:20.406 A:middle
catalog.

00:41:21.376 --> 00:41:22.416 A:middle
Now there are three of them that

00:41:22.416 --> 00:41:23.636 A:middle
I'd like to change, and they're

00:41:23.636 --> 00:41:25.546 A:middle
a bit spread out now because of

00:41:25.546 --> 00:41:26.336 A:middle
all these comments.

00:41:27.076 --> 00:41:29.066 A:middle
Well, no matter, with Xcode 10,

00:41:29.066 --> 00:41:30.196 A:middle
we've improved code folding.

00:41:31.066 --> 00:41:32.356 A:middle
Basically, you can now code fold

00:41:32.356 --> 00:41:33.206 A:middle
anything you want.

00:41:33.686 --> 00:41:34.856 A:middle
And we've brought back the code

00:41:34.856 --> 00:41:35.636 A:middle
folding ribbon.

00:41:35.756 --> 00:41:36.716 A:middle
So just to the right of the line

00:41:36.716 --> 00:41:37.966 A:middle
numbers, I can click --

00:41:38.516 --> 00:41:42.546 A:middle
[ Applause ]

00:41:43.046 --> 00:41:43.876 A:middle
-- to collapse the code away.

00:41:44.326 --> 00:41:45.446 A:middle
And we have this nice, svelte

00:41:45.506 --> 00:41:47.046 A:middle
presentation of the collapsing

00:41:47.856 --> 00:41:47.923 A:middle
now.

00:41:48.546 --> 00:41:50.206 A:middle
Now this is the first function

00:41:50.206 --> 00:41:51.686 A:middle
I'd like to change, and I see

00:41:51.686 --> 00:41:52.916 A:middle
that all of these functions are

00:41:52.916 --> 00:41:54.256 A:middle
very similar, and it would be

00:41:54.256 --> 00:41:55.326 A:middle
great if I could make all of

00:41:55.326 --> 00:41:56.836 A:middle
these changes all at the same

00:41:56.836 --> 00:41:57.176 A:middle
time.

00:41:58.226 --> 00:41:59.456 A:middle
Well, I can do that now, too,

00:41:59.796 --> 00:42:01.146 A:middle
with multi-cursor editing.

00:41:59.796 --> 00:42:01.146 A:middle
with multi-cursor editing.

00:42:02.016 --> 00:42:07.626 A:middle
[ Applause ]

00:42:08.126 --> 00:42:09.326 A:middle
The key to multi-cursor editing

00:42:09.326 --> 00:42:11.306 A:middle
is two fingers, control and

00:42:11.306 --> 00:42:11.506 A:middle
shift.

00:42:11.956 --> 00:42:13.806 A:middle
So I'll hold down those two keys

00:42:13.836 --> 00:42:15.086 A:middle
and just click at the beginning

00:42:15.086 --> 00:42:16.456 A:middle
of each of the other functions.

00:42:17.326 --> 00:42:18.766 A:middle
We'll use range selection, and

00:42:18.766 --> 00:42:20.166 A:middle
we'll just change that to VAR.

00:42:20.606 --> 00:42:22.246 A:middle
We'll change those into colons.

00:42:22.736 --> 00:42:24.786 A:middle
And we're pretty good so far.

00:42:25.896 --> 00:42:27.726 A:middle
Now I happen to know that I've

00:42:27.726 --> 00:42:29.356 A:middle
named my colors in the catalog

00:42:29.546 --> 00:42:31.096 A:middle
the same name as my properties

00:42:31.146 --> 00:42:31.426 A:middle
here.

00:42:32.006 --> 00:42:33.606 A:middle
So we'll just select those names

00:42:33.606 --> 00:42:34.236 A:middle
and copy them.

00:42:34.926 --> 00:42:35.716 A:middle
And now let's go to the

00:42:35.716 --> 00:42:37.136 A:middle
implementation and change that.

00:42:37.836 --> 00:42:39.256 A:middle
So we'll drop three more

00:42:39.256 --> 00:42:41.196 A:middle
cursors, and we'll just select

00:42:41.196 --> 00:42:43.506 A:middle
all of this, type in named,

00:42:43.506 --> 00:42:45.876 A:middle
paste in those colors, and we've

00:42:45.876 --> 00:42:46.766 A:middle
made all those changes.

00:42:46.766 --> 00:42:47.916 A:middle
It's like three times faster.

00:42:48.516 --> 00:42:55.016 A:middle
[ Applause ]

00:42:55.516 --> 00:42:56.876 A:middle
Now multi-cursor editing also

00:42:56.876 --> 00:42:58.526 A:middle
works great with column

00:42:58.526 --> 00:42:59.066 A:middle
selection.

00:42:59.626 --> 00:43:01.206 A:middle
So here I have all of my

00:42:59.626 --> 00:43:01.206 A:middle
So here I have all of my

00:43:01.206 --> 00:43:02.516 A:middle
IBOutlets defined with week.

00:43:03.006 --> 00:43:04.666 A:middle
If I hold down the option key

00:43:05.066 --> 00:43:06.766 A:middle
and I select all of these in

00:43:06.766 --> 00:43:08.806 A:middle
here [cheering] -- oh, yeah.

00:43:09.226 --> 00:43:10.266 A:middle
Oh, yeah, so let's just convert

00:43:10.266 --> 00:43:12.346 A:middle
those into [applause] unowned.

00:43:12.966 --> 00:43:13.896 A:middle
And just like that, I can make

00:43:13.896 --> 00:43:15.316 A:middle
my changes, and then use the

00:43:15.316 --> 00:43:16.516 A:middle
source control bar to make sure

00:43:16.516 --> 00:43:17.786 A:middle
that I got the changes I want.

00:43:18.546 --> 00:43:19.916 A:middle
So those are some of the great

00:43:19.916 --> 00:43:21.156 A:middle
new editing features you'll find

00:43:21.486 --> 00:43:22.846 A:middle
in Xcode 10.

00:43:23.516 --> 00:43:30.246 A:middle
[ Applause ]

00:43:30.746 --> 00:43:32.066 A:middle
So additions like the source

00:43:32.066 --> 00:43:33.246 A:middle
control change bar and

00:43:33.246 --> 00:43:35.106 A:middle
multi-cursor editing alongside

00:43:35.106 --> 00:43:36.356 A:middle
performance and stability

00:43:36.356 --> 00:43:36.946 A:middle
improvements.

00:43:37.276 --> 00:43:39.156 A:middle
Xcode 10 continues to raise the

00:43:39.156 --> 00:43:40.776 A:middle
bar on our source editing

00:43:40.776 --> 00:43:41.366 A:middle
experience.

00:43:41.906 --> 00:43:43.846 A:middle
Now in addition to the source

00:43:43.846 --> 00:43:45.456 A:middle
control change bar, we are also

00:43:45.456 --> 00:43:46.956 A:middle
extending our source control

00:43:46.956 --> 00:43:47.456 A:middle
integration.

00:43:47.456 --> 00:43:50.426 A:middle
We started first by unifying our

00:43:50.426 --> 00:43:52.286 A:middle
conflict resolution system with

00:43:52.286 --> 00:43:54.106 A:middle
Git, making the results more

00:43:54.106 --> 00:43:56.266 A:middle
accurate, more predictable, and

00:43:56.316 --> 00:43:57.316 A:middle
significantly faster.

00:43:58.466 --> 00:44:00.376 A:middle
Next, we've enhanced the pull

00:43:58.466 --> 00:44:00.376 A:middle
Next, we've enhanced the pull

00:44:00.376 --> 00:44:02.146 A:middle
action to support rebase.

00:44:02.446 --> 00:44:03.896 A:middle
So you can replay changes

00:44:03.896 --> 00:44:04.656 A:middle
between branches [applause] --

00:44:04.656 --> 00:44:05.976 A:middle
yes, it's okay to clap for that.

00:44:06.516 --> 00:44:08.896 A:middle
[ Applause ]

00:44:09.396 --> 00:44:10.726 A:middle
You can replay changes easily

00:44:10.726 --> 00:44:12.106 A:middle
between branches without the

00:44:12.106 --> 00:44:13.346 A:middle
unnecessary merge commits.

00:44:13.976 --> 00:44:15.786 A:middle
And to keep your connections

00:44:15.786 --> 00:44:17.116 A:middle
secure, Xcode will help you

00:44:17.116 --> 00:44:19.836 A:middle
create SSH keys and upload them

00:44:19.836 --> 00:44:21.326 A:middle
directly to your service

00:44:21.326 --> 00:44:21.786 A:middle
accounts.

00:44:22.516 --> 00:44:26.516 A:middle
[ Applause ]

00:44:27.016 --> 00:44:27.866 A:middle
And this is the perfect

00:44:27.866 --> 00:44:29.006 A:middle
accompaniment for our service

00:44:29.086 --> 00:44:30.466 A:middle
integrations, because in

00:44:30.466 --> 00:44:32.196 A:middle
addition to GitHub, we're adding

00:44:32.376 --> 00:44:33.916 A:middle
two new services this year,

00:44:34.676 --> 00:44:35.616 A:middle
support for Atlassian's

00:44:35.676 --> 00:44:37.166 A:middle
Bitbucket cloud and Bitbucket

00:44:37.256 --> 00:44:37.566 A:middle
server --

00:44:38.516 --> 00:44:42.246 A:middle
[ Applause ]

00:44:42.746 --> 00:44:44.766 A:middle
-- and support for GitLab.com

00:44:45.096 --> 00:44:45.846 A:middle
and self-hosting.

00:44:46.516 --> 00:44:49.816 A:middle
[ Applause ]

00:44:50.316 --> 00:44:51.366 A:middle
There's a lot of source control

00:44:51.406 --> 00:44:51.836 A:middle
love here.

00:44:52.606 --> 00:44:54.366 A:middle
And both of these work great

00:44:54.496 --> 00:44:55.786 A:middle
because their web interfaces

00:44:55.786 --> 00:44:57.636 A:middle
will check out directly into

00:44:57.636 --> 00:44:57.976 A:middle
Xcode.

00:44:59.386 --> 00:45:01.006 A:middle
Now as Sebastian mentioned

00:44:59.386 --> 00:45:01.006 A:middle
Now as Sebastian mentioned

00:45:01.006 --> 00:45:02.626 A:middle
earlier, we are passionate about

00:45:02.626 --> 00:45:04.186 A:middle
giving you great tools to debug

00:45:04.476 --> 00:45:05.696 A:middle
and optimize your apps.

00:45:06.056 --> 00:45:07.556 A:middle
And this year, we focused on the

00:45:07.556 --> 00:45:09.346 A:middle
usability and performance of our

00:45:09.346 --> 00:45:09.536 A:middle
tools.

00:45:09.536 --> 00:45:12.456 A:middle
We started with LLDB, our

00:45:12.456 --> 00:45:13.536 A:middle
lower-level debugger.

00:45:13.966 --> 00:45:15.656 A:middle
Which now has faster startup and

00:45:15.656 --> 00:45:16.966 A:middle
more precise access to your

00:45:16.966 --> 00:45:19.146 A:middle
variables in the console and

00:45:19.146 --> 00:45:20.186 A:middle
Xcode's variables view.

00:45:21.676 --> 00:45:23.176 A:middle
Next, we've made downloading

00:45:23.176 --> 00:45:25.246 A:middle
debug symbols five-times faster.

00:45:25.246 --> 00:45:26.496 A:middle
So now it's more like seconds

00:45:26.496 --> 00:45:26.976 A:middle
rather than minutes.

00:45:27.516 --> 00:45:33.146 A:middle
[ Applause ]

00:45:33.646 --> 00:45:34.646 A:middle
We've enhanced our memory

00:45:34.646 --> 00:45:35.966 A:middle
debugging tools to have faster

00:45:35.966 --> 00:45:37.106 A:middle
loading, and saving of

00:45:37.106 --> 00:45:39.176 A:middle
documents, and a new compact

00:45:39.176 --> 00:45:40.646 A:middle
layout to help you visualize

00:45:40.646 --> 00:45:42.286 A:middle
even more of your application at

00:45:42.326 --> 00:45:42.746 A:middle
once.

00:45:43.886 --> 00:45:45.456 A:middle
And earlier this spring, we

00:45:45.456 --> 00:45:47.386 A:middle
introduced energy diagnostic

00:45:47.386 --> 00:45:47.936 A:middle
reports.

00:45:48.416 --> 00:45:49.826 A:middle
They're like crash logs, but for

00:45:49.826 --> 00:45:50.606 A:middle
energy usage.

00:45:51.266 --> 00:45:52.796 A:middle
These reports are automatically

00:45:52.836 --> 00:45:54.656 A:middle
collected on iOS for test flight

00:45:54.656 --> 00:45:57.086 A:middle
in App Store apps and surface

00:45:57.086 --> 00:45:59.106 A:middle
details for foreground and

00:45:59.106 --> 00:46:00.016 A:middle
background usage.

00:45:59.106 --> 00:46:00.016 A:middle
background usage.

00:46:01.086 --> 00:46:02.576 A:middle
These reports show up in the

00:46:02.576 --> 00:46:04.326 A:middle
organizer and include stack

00:46:04.326 --> 00:46:05.916 A:middle
frames to illustrate the issue.

00:46:06.896 --> 00:46:08.196 A:middle
And just like with crash logs,

00:46:08.196 --> 00:46:09.876 A:middle
you can open these reports in

00:46:09.876 --> 00:46:11.446 A:middle
your project to navigate your

00:46:11.446 --> 00:46:13.306 A:middle
code and find and fix the

00:46:13.306 --> 00:46:13.756 A:middle
issues.

00:46:15.006 --> 00:46:16.646 A:middle
Oh, and to go alongside these,

00:46:16.646 --> 00:46:17.776 A:middle
we also have some improvements

00:46:17.896 --> 00:46:19.456 A:middle
in testing.

00:46:19.806 --> 00:46:21.346 A:middle
Earlier this spring, we enhanced

00:46:21.386 --> 00:46:23.116 A:middle
code coverage, adding a command

00:46:23.116 --> 00:46:24.466 A:middle
line tool to access coverage

00:46:24.466 --> 00:46:26.456 A:middle
data, and giving you the ability

00:46:26.456 --> 00:46:28.476 A:middle
to select individual targets to

00:46:28.476 --> 00:46:29.396 A:middle
collect coverage for.

00:46:30.286 --> 00:46:31.436 A:middle
This means your coverage reports

00:46:31.436 --> 00:46:33.176 A:middle
can now be actively focused on

00:46:33.176 --> 00:46:34.766 A:middle
the areas you are coding and

00:46:34.766 --> 00:46:35.106 A:middle
testing.

00:46:36.266 --> 00:46:38.106 A:middle
In addition to these, we're

00:46:38.106 --> 00:46:40.216 A:middle
adding two new testing workflows

00:46:40.216 --> 00:46:41.676 A:middle
this year -- actually, three.

00:46:42.466 --> 00:46:44.226 A:middle
The first is that you can now

00:46:44.226 --> 00:46:45.976 A:middle
automatically include or exclude

00:46:45.976 --> 00:46:47.986 A:middle
new tests in your test bundles.

00:46:48.616 --> 00:46:50.486 A:middle
Next, you can randomize the

00:46:50.486 --> 00:46:51.626 A:middle
order that your tests are

00:46:51.626 --> 00:46:53.306 A:middle
executed in to minimize

00:46:53.306 --> 00:46:54.506 A:middle
accidental dependencies.

00:46:55.536 --> 00:46:56.726 A:middle
And our biggest change for this

00:46:56.726 --> 00:46:58.496 A:middle
year is you can now execute your

00:46:58.496 --> 00:47:00.626 A:middle
tests in parallel inside of

00:46:58.496 --> 00:47:00.626 A:middle
tests in parallel inside of

00:47:00.626 --> 00:47:00.906 A:middle
Xcode.

00:47:01.516 --> 00:47:07.066 A:middle
[ Applause ]

00:47:07.566 --> 00:47:09.236 A:middle
Now last year, you could use

00:47:09.236 --> 00:47:11.056 A:middle
Xcodebuild to test on many

00:47:11.056 --> 00:47:13.366 A:middle
devices in parallel, sending all

00:47:13.366 --> 00:47:15.056 A:middle
the same tests to each device.

00:47:15.056 --> 00:47:17.126 A:middle
Now this is perfect for use with

00:47:17.126 --> 00:47:18.476 A:middle
continuous integration where you

00:47:18.476 --> 00:47:19.536 A:middle
want the broadest scale of

00:47:19.536 --> 00:47:19.886 A:middle
testing.

00:47:20.956 --> 00:47:22.146 A:middle
When you're working in Xcode,

00:47:22.326 --> 00:47:23.386 A:middle
you're more often focused on a

00:47:23.546 --> 00:47:24.556 A:middle
single configuration.

00:47:24.966 --> 00:47:25.916 A:middle
And once you're testing, to

00:47:25.916 --> 00:47:27.586 A:middle
finish as quickly as possible.

00:47:28.696 --> 00:47:30.406 A:middle
This is the configuration Xcode

00:47:30.406 --> 00:47:33.376 A:middle
10 dramatically improves with

00:47:33.376 --> 00:47:34.016 A:middle
parallel testing.

00:47:35.126 --> 00:47:36.536 A:middle
Behind the scenes, Xcode will

00:47:36.536 --> 00:47:38.706 A:middle
create copies of your Mac app or

00:47:38.826 --> 00:47:40.906 A:middle
clones of your iOS simulator and

00:47:41.156 --> 00:47:42.866 A:middle
then fan your tests suites out

00:47:42.866 --> 00:47:43.106 A:middle
to them.

00:47:44.496 --> 00:47:45.756 A:middle
This means you continue to test

00:47:45.826 --> 00:47:47.716 A:middle
a single configuration, but your

00:47:47.716 --> 00:47:49.526 A:middle
tests finish in a fraction of

00:47:49.526 --> 00:47:49.856 A:middle
the time.

00:47:51.096 --> 00:47:51.926 A:middle
And parallel testing

00:47:51.966 --> 00:47:53.286 A:middle
automatically scales to the

00:47:53.286 --> 00:47:55.106 A:middle
capacity of your machine, which

00:47:55.106 --> 00:47:57.316 A:middle
means on an iMac Pro, it can be

00:47:57.316 --> 00:47:57.876 A:middle
pretty awesome.

00:47:59.796 --> 00:48:00.846 A:middle
How awesome, you might ask?

00:47:59.796 --> 00:48:00.846 A:middle
How awesome, you might ask?

00:48:01.266 --> 00:48:02.776 A:middle
Well, let's see in another demo.

00:48:03.506 --> 00:48:06.386 A:middle
So we're going to go back to our

00:48:06.386 --> 00:48:07.586 A:middle
solar system project one more

00:48:07.586 --> 00:48:07.896 A:middle
time.

00:48:08.956 --> 00:48:11.986 A:middle
And here we see the testing log

00:48:12.056 --> 00:48:13.396 A:middle
for our Mac tests that we ran

00:48:13.396 --> 00:48:13.826 A:middle
before.

00:48:14.406 --> 00:48:15.866 A:middle
Took about 14 seconds.

00:48:16.986 --> 00:48:18.016 A:middle
Let's run it with parallel

00:48:18.016 --> 00:48:19.206 A:middle
testing now.

00:48:19.416 --> 00:48:20.276 A:middle
I'll click and hold on the

00:48:20.276 --> 00:48:21.936 A:middle
toolbar and select the test

00:48:21.936 --> 00:48:22.416 A:middle
action.

00:48:23.016 --> 00:48:23.916 A:middle
And we'll bring up the scheme

00:48:23.916 --> 00:48:24.216 A:middle
sheet.

00:48:25.696 --> 00:48:27.266 A:middle
In the options, I'll just click

00:48:27.316 --> 00:48:29.246 A:middle
execute in parallel and click

00:48:29.246 --> 00:48:31.236 A:middle
test, and we're going to build

00:48:31.236 --> 00:48:32.386 A:middle
our tests for parallelization.

00:48:32.386 --> 00:48:33.676 A:middle
And if you watch the doc in the

00:48:33.676 --> 00:48:35.246 A:middle
lower right, you'll see that we

00:48:35.246 --> 00:48:37.076 A:middle
launch the tests, we now launch

00:48:37.076 --> 00:48:38.596 A:middle
many different processes -- this

00:48:38.596 --> 00:48:39.786 A:middle
is one for each of our test

00:48:39.866 --> 00:48:41.246 A:middle
suites -- and collect the

00:48:41.246 --> 00:48:41.746 A:middle
results.

00:48:42.996 --> 00:48:44.116 A:middle
And if we look at our testing

00:48:44.116 --> 00:48:45.966 A:middle
log, it finished almost four

00:48:45.966 --> 00:48:46.646 A:middle
times faster.

00:48:47.516 --> 00:48:53.676 A:middle
[ Applause ]

00:48:54.176 --> 00:48:55.376 A:middle
So where parallel testing works

00:48:55.376 --> 00:48:57.376 A:middle
great for unit tests, it works

00:48:57.486 --> 00:48:58.546 A:middle
awesomely for UI tests.

00:48:59.786 --> 00:49:01.986 A:middle
So I will select the iOS version

00:48:59.786 --> 00:49:01.986 A:middle
So I will select the iOS version

00:49:01.986 --> 00:49:04.316 A:middle
of our application, and we'll

00:49:04.316 --> 00:49:04.936 A:middle
kick off testing.

00:49:05.526 --> 00:49:06.936 A:middle
So behind the scenes, we're

00:49:06.936 --> 00:49:08.156 A:middle
going to go and clone the active

00:49:08.156 --> 00:49:10.236 A:middle
simulator, and then set up a

00:49:10.236 --> 00:49:11.686 A:middle
number of debug sessions for

00:49:11.686 --> 00:49:13.126 A:middle
each one of these, and then

00:49:13.126 --> 00:49:14.816 A:middle
switch over to a space with all

00:49:14.816 --> 00:49:15.776 A:middle
of those simulators running.

00:49:16.676 --> 00:49:17.846 A:middle
So you'll see we'll install

00:49:17.846 --> 00:49:19.456 A:middle
different test suites on each of

00:49:19.456 --> 00:49:20.916 A:middle
these simulators and kick off a

00:49:20.916 --> 00:49:22.696 A:middle
different set of tests on each.

00:49:23.556 --> 00:49:25.386 A:middle
So I can run all of my same

00:49:25.386 --> 00:49:27.756 A:middle
tests faster on all these

00:49:27.756 --> 00:49:28.986 A:middle
devices, which gives me the

00:49:28.986 --> 00:49:30.716 A:middle
ability to add more tests and

00:49:30.716 --> 00:49:31.706 A:middle
make a much better app.

00:49:32.556 --> 00:49:34.316 A:middle
This is ludicrously awesome

00:49:34.316 --> 00:49:36.796 A:middle
parallel testing in Xcode 10.

00:49:37.516 --> 00:49:46.216 A:middle
[ Applause ]

00:49:46.716 --> 00:49:47.976 A:middle
Last year, we introduced a

00:49:48.026 --> 00:49:49.646 A:middle
preview of our new build system

00:49:49.826 --> 00:49:50.626 A:middle
written in Swift.

00:49:51.516 --> 00:49:52.466 A:middle
Many of you tried it out with

00:49:52.466 --> 00:49:54.186 A:middle
your projects and provided great

00:49:54.426 --> 00:49:54.716 A:middle
feedback.

00:49:55.446 --> 00:49:56.546 A:middle
And so I'm happy to say our

00:49:56.546 --> 00:49:58.156 A:middle
modern build system is now on

00:49:58.456 --> 00:49:59.306 A:middle
for all projects.

00:50:00.006 --> 00:50:01.116 A:middle
In addition to greater

00:50:01.116 --> 00:50:03.656 A:middle
reliability and stability, we

00:50:03.656 --> 00:50:05.316 A:middle
also focused on overall build

00:50:05.316 --> 00:50:05.916 A:middle
performance.

00:50:06.796 --> 00:50:07.936 A:middle
You'll find the build system now

00:50:07.936 --> 00:50:09.906 A:middle
has faster rebuilds, better task

00:50:10.136 --> 00:50:11.976 A:middle
parallelization, and uses less

00:50:11.976 --> 00:50:12.266 A:middle
memory.

00:50:13.126 --> 00:50:14.436 A:middle
And the build system now

00:50:14.436 --> 00:50:16.476 A:middle
includes new richer diagnostics

00:50:16.646 --> 00:50:17.946 A:middle
to help you tune your project

00:50:17.986 --> 00:50:19.516 A:middle
configuration to achieve the

00:50:19.516 --> 00:50:21.026 A:middle
best build performance.

00:50:21.446 --> 00:50:23.746 A:middle
Now staying on build performance

00:50:23.746 --> 00:50:24.956 A:middle
for a second, I'd like to talk

00:50:24.956 --> 00:50:26.466 A:middle
up another core component of our

00:50:26.466 --> 00:50:29.396 A:middle
release, Swift 4.2.

00:50:29.766 --> 00:50:31.156 A:middle
Over the last year, we have made

00:50:31.156 --> 00:50:33.016 A:middle
steady improvements to compile

00:50:33.086 --> 00:50:34.786 A:middle
times with Swift projects.

00:50:35.936 --> 00:50:37.126 A:middle
We've sampled a number of open

00:50:37.126 --> 00:50:39.526 A:middle
source iOS applications, and

00:50:39.526 --> 00:50:40.666 A:middle
compared to our previous

00:50:40.666 --> 00:50:42.776 A:middle
release, debug build performance

00:50:42.776 --> 00:50:45.356 A:middle
with Xcode 10 is often twice as

00:50:46.636 --> 00:50:46.996 A:middle
fast.

00:50:46.996 --> 00:50:49.566 A:middle
And for release builds, code

00:50:49.566 --> 00:50:52.316 A:middle
size is up to 30% smaller using

00:50:52.316 --> 00:50:54.306 A:middle
the new size optimization, which

00:50:54.306 --> 00:50:55.906 A:middle
is a great win for cellular

00:50:55.906 --> 00:50:56.436 A:middle
downloads.

00:50:57.976 --> 00:51:00.056 A:middle
Now in addition to these, Swift

00:50:57.976 --> 00:51:00.056 A:middle
Now in addition to these, Swift

00:51:00.056 --> 00:51:02.306 A:middle
also adds a number of additions

00:51:02.306 --> 00:51:04.036 A:middle
and runtime language

00:51:04.036 --> 00:51:04.576 A:middle
improvements.

00:51:05.326 --> 00:51:06.126 A:middle
Some of these are

00:51:06.126 --> 00:51:07.506 A:middle
tongue-twisting APIs like

00:51:07.566 --> 00:51:08.646 A:middle
synthesized hashtable

00:51:08.646 --> 00:51:09.276 A:middle
conformance.

00:51:10.786 --> 00:51:12.436 A:middle
A perfect place to try out these

00:51:12.436 --> 00:51:14.906 A:middle
APIs is in Xcode Playgrounds

00:51:15.596 --> 00:51:16.976 A:middle
because Xcode Playgrounds now

00:51:16.976 --> 00:51:18.676 A:middle
include new [inaudible]-like

00:51:18.676 --> 00:51:20.506 A:middle
interaction that allows you to

00:51:20.506 --> 00:51:21.996 A:middle
evaluate new lines of code

00:51:22.316 --> 00:51:23.726 A:middle
without restarting the

00:51:23.726 --> 00:51:24.486 A:middle
Playground session.

00:51:26.516 --> 00:51:30.186 A:middle
[ Applause ]

00:51:30.686 --> 00:51:31.756 A:middle
Here's a Playground of our solar

00:51:31.756 --> 00:51:32.346 A:middle
system view.

00:51:32.346 --> 00:51:34.216 A:middle
And the new lines of code added

00:51:34.506 --> 00:51:36.466 A:middle
to move to the next planet are

00:51:36.466 --> 00:51:38.616 A:middle
evaluated and return results all

00:51:38.616 --> 00:51:39.386 A:middle
while the Playground continues

00:51:39.386 --> 00:51:39.536 A:middle
to run.

00:51:42.046 --> 00:51:43.896 A:middle
So all of these additions to the

00:51:43.896 --> 00:51:45.546 A:middle
runtime language and tools

00:51:45.786 --> 00:51:47.646 A:middle
continue Swift's great momentum

00:51:48.046 --> 00:51:49.206 A:middle
as part of Xcode 10.

00:51:49.206 --> 00:51:52.036 A:middle
And we also have another release

00:51:52.036 --> 00:51:52.796 A:middle
coming up for you in the

00:51:52.796 --> 00:51:55.646 A:middle
language, Swift 5.

00:51:55.986 --> 00:51:57.806 A:middle
The focus of Swift 5 is greater

00:51:57.806 --> 00:51:59.856 A:middle
adoption by delivering Swift as

00:51:59.886 --> 00:52:01.166 A:middle
part of the OS.

00:51:59.886 --> 00:52:01.166 A:middle
part of the OS.

00:52:01.796 --> 00:52:03.216 A:middle
Apps will no longer need to

00:52:03.216 --> 00:52:04.946 A:middle
include the Swift runtime when

00:52:04.946 --> 00:52:06.336 A:middle
delivering on our newer OS

00:52:06.336 --> 00:52:08.046 A:middle
releases, resulting in smaller

00:52:08.086 --> 00:52:09.636 A:middle
downloads [applause] and faster

00:52:09.636 --> 00:52:09.846 A:middle
launches.

00:52:10.516 --> 00:52:15.586 A:middle
[ Applause ]

00:52:16.086 --> 00:52:17.216 A:middle
We're very excited about this,

00:52:17.216 --> 00:52:18.666 A:middle
too, and we have made great

00:52:18.706 --> 00:52:19.976 A:middle
progress toward this goal.

00:52:20.396 --> 00:52:21.626 A:middle
And you'll see it in a release

00:52:21.696 --> 00:52:23.956 A:middle
coming early next year.

00:52:24.536 --> 00:52:27.996 A:middle
So Xcode 10 includes a number of

00:52:27.996 --> 00:52:29.566 A:middle
great productivity improvements,

00:52:29.886 --> 00:52:31.626 A:middle
alongside deep investments in

00:52:31.626 --> 00:52:33.496 A:middle
performance, robustness, and

00:52:33.496 --> 00:52:35.846 A:middle
stability throughout our tools.

00:52:36.436 --> 00:52:37.736 A:middle
And all of this to help you do

00:52:37.736 --> 00:52:39.596 A:middle
your best work now faster than

00:52:40.406 --> 00:52:40.586 A:middle
ever.

00:52:40.626 --> 00:52:42.246 A:middle
And that is Xcode 10.

00:52:43.516 --> 00:52:50.656 A:middle
[ Applause ]

00:52:51.156 --> 00:52:52.576 A:middle
Next, I'd like to invite up John

00:52:52.576 --> 00:52:54.236 A:middle
to tell you what's new in

00:52:54.236 --> 00:52:54.816 A:middle
Machine Learning.

00:52:55.356 --> 00:52:55.636 A:middle
John?

00:52:56.321 --> 00:52:58.321 A:middle
[ Applause ]

00:52:58.626 --> 00:52:59.306 A:middle
&gt;&gt; Thank you, Matthew.

00:53:02.286 --> 00:53:03.236 A:middle
Machine Learning is at the

00:53:03.236 --> 00:53:04.556 A:middle
foundation of our operating

00:53:04.556 --> 00:53:06.076 A:middle
systems and many of our

00:53:06.076 --> 00:53:06.736 A:middle
applications.

00:53:07.276 --> 00:53:09.206 A:middle
But our goal has been to provide

00:53:09.346 --> 00:53:12.476 A:middle
simple and easy-to-use API to

00:53:12.476 --> 00:53:14.206 A:middle
make Machine Learning accessible

00:53:14.206 --> 00:53:14.826 A:middle
to everyone.

00:53:15.726 --> 00:53:17.356 A:middle
And you've all done a fantastic

00:53:17.356 --> 00:53:19.606 A:middle
job brining so many innovative

00:53:19.606 --> 00:53:20.936 A:middle
features and intelligence to

00:53:20.936 --> 00:53:21.886 A:middle
your applications.

00:53:22.456 --> 00:53:26.426 A:middle
Last year we introduced Core ML

00:53:26.926 --> 00:53:29.196 A:middle
with its base performance

00:53:29.196 --> 00:53:31.096 A:middle
frameworks as well as Vision and

00:53:31.096 --> 00:53:32.396 A:middle
Natural Language at a high

00:53:32.396 --> 00:53:32.946 A:middle
level.

00:53:33.306 --> 00:53:34.506 A:middle
And I'd like to start by showing

00:53:34.506 --> 00:53:35.336 A:middle
you some improvements we're

00:53:35.336 --> 00:53:37.286 A:middle
making with Vision and Natural

00:53:37.286 --> 00:53:37.706 A:middle
Language.

00:53:38.776 --> 00:53:42.826 A:middle
If we take Vision and, of

00:53:42.826 --> 00:53:43.906 A:middle
course, a photo that we want to

00:53:43.906 --> 00:53:46.436 A:middle
have depth, we now have APIs

00:53:46.436 --> 00:53:47.996 A:middle
that support object detection

00:53:48.546 --> 00:53:50.126 A:middle
and bounding boxes like this

00:53:50.186 --> 00:53:51.306 A:middle
sign being held in the picture.

00:53:52.546 --> 00:53:55.396 A:middle
We can do face detect, facial

00:53:55.396 --> 00:53:56.446 A:middle
landmark detection.

00:53:57.546 --> 00:53:59.846 A:middle
And also, barcode like this QR

00:53:59.846 --> 00:54:01.636 A:middle
code can be detected in your

00:53:59.846 --> 00:54:01.636 A:middle
code can be detected in your

00:54:01.636 --> 00:54:01.886 A:middle
image.

00:54:03.276 --> 00:54:05.476 A:middle
Now in addition to the APIs we

00:54:05.536 --> 00:54:06.906 A:middle
previously provided for depth,

00:54:07.576 --> 00:54:08.876 A:middle
we now support people

00:54:08.876 --> 00:54:10.936 A:middle
segmentation, so you can remove

00:54:10.936 --> 00:54:12.576 A:middle
a person from a photo and

00:54:12.636 --> 00:54:13.296 A:middle
separate them from the

00:54:13.296 --> 00:54:15.736 A:middle
background or substitute in the

00:54:15.736 --> 00:54:16.536 A:middle
background for something a

00:54:16.536 --> 00:54:17.926 A:middle
little different.

00:54:19.926 --> 00:54:21.586 A:middle
For Natural Language, we have a

00:54:21.586 --> 00:54:23.836 A:middle
brand-new, easy-to-use,

00:54:23.836 --> 00:54:24.796 A:middle
Swift-focused API.

00:54:26.876 --> 00:54:28.696 A:middle
So you can take simple sentences

00:54:28.696 --> 00:54:30.846 A:middle
like this one and automatically

00:54:30.846 --> 00:54:32.226 A:middle
identify it as the English

00:54:32.226 --> 00:54:32.676 A:middle
language.

00:54:34.226 --> 00:54:35.596 A:middle
You can tokenize the sentence

00:54:37.116 --> 00:54:38.346 A:middle
and convert it into its speech

00:54:38.386 --> 00:54:40.086 A:middle
parts all with simple API.

00:54:40.336 --> 00:54:43.416 A:middle
And as one other option, you can

00:54:43.416 --> 00:54:45.256 A:middle
do named-entity recognition.

00:54:46.046 --> 00:54:47.596 A:middle
Here, determining that the

00:54:47.596 --> 00:54:49.096 A:middle
sentence is talking about Apple

00:54:49.096 --> 00:54:50.096 A:middle
as the organization and a

00:54:50.096 --> 00:54:51.506 A:middle
location in San Jose.

00:54:51.506 --> 00:54:54.726 A:middle
Now you might think this is easy

00:54:54.726 --> 00:54:56.666 A:middle
in languages like English, but

00:54:56.666 --> 00:54:59.106 A:middle
we support many more, including

00:54:59.516 --> 00:55:01.866 A:middle
French, German, Japanese, and

00:54:59.516 --> 00:55:01.866 A:middle
French, German, Japanese, and

00:55:01.866 --> 00:55:03.186 A:middle
this Simplified Chinese example.

00:55:03.186 --> 00:55:07.836 A:middle
now let's look at Core ML.

00:55:08.456 --> 00:55:09.876 A:middle
This is our foundation of our

00:55:09.876 --> 00:55:11.106 A:middle
Machine Learning technologies.

00:55:12.676 --> 00:55:13.986 A:middle
And just one year ago, we

00:55:13.986 --> 00:55:15.146 A:middle
introduced Core ML here.

00:55:15.866 --> 00:55:17.016 A:middle
And since then, we've got

00:55:17.016 --> 00:55:18.876 A:middle
adoption of every major Machine

00:55:18.876 --> 00:55:20.466 A:middle
Learning training framework and

00:55:20.466 --> 00:55:20.876 A:middle
format.

00:55:21.716 --> 00:55:23.126 A:middle
This is just incredible to have

00:55:23.126 --> 00:55:24.366 A:middle
achieved in only one year.

00:55:24.366 --> 00:55:26.576 A:middle
But we didn't want to stop

00:55:26.576 --> 00:55:26.796 A:middle
there.

00:55:28.266 --> 00:55:29.936 A:middle
We're introducing Core ML 2.

00:55:29.936 --> 00:55:33.026 A:middle
And we focused on making the

00:55:33.026 --> 00:55:35.376 A:middle
models execute faster, those

00:55:35.376 --> 00:55:37.546 A:middle
models smaller, and making it

00:55:37.616 --> 00:55:38.736 A:middle
far more customizable.

00:55:39.956 --> 00:55:40.866 A:middle
And we know these are the

00:55:40.906 --> 00:55:41.806 A:middle
features that were most

00:55:41.806 --> 00:55:43.576 A:middle
recommended -- requested.

00:55:43.576 --> 00:55:46.676 A:middle
To look at performance

00:55:46.676 --> 00:55:48.336 A:middle
improvements, we've added a new

00:55:48.336 --> 00:55:48.906 A:middle
batch API.

00:55:49.896 --> 00:55:52.356 A:middle
Where previously you needed to

00:55:52.356 --> 00:55:53.786 A:middle
do inference on each image,

00:55:54.196 --> 00:55:55.836 A:middle
passing them between the CPU and

00:55:55.836 --> 00:55:58.526 A:middle
GPU, you can now bundle those

00:55:58.526 --> 00:56:00.196 A:middle
inference requests together and

00:55:58.526 --> 00:56:00.196 A:middle
inference requests together and

00:56:00.196 --> 00:56:02.566 A:middle
exploit the full performance of

00:56:02.696 --> 00:56:04.066 A:middle
the CPU and GPU.

00:56:05.076 --> 00:56:06.486 A:middle
Through this technique and

00:56:06.486 --> 00:56:07.866 A:middle
enhancements to the Metal

00:56:07.866 --> 00:56:09.036 A:middle
Performance Shaders underneath,

00:56:09.756 --> 00:56:11.866 A:middle
we now have up to 30%

00:56:11.866 --> 00:56:13.596 A:middle
performance improvement on large

00:56:13.596 --> 00:56:14.846 A:middle
networks like Resnet.

00:56:15.536 --> 00:56:16.826 A:middle
But if you're using a smaller

00:56:16.826 --> 00:56:17.806 A:middle
network like the kind you're

00:56:17.806 --> 00:56:20.316 A:middle
going to be using on iOS, we see

00:56:20.316 --> 00:56:21.796 A:middle
up to four times improvement

00:56:21.876 --> 00:56:22.906 A:middle
when running with MobileNet.

00:56:23.646 --> 00:56:25.536 A:middle
Now we didn't stop there.

00:56:26.566 --> 00:56:27.806 A:middle
We wanted to look at making the

00:56:27.806 --> 00:56:29.706 A:middle
model smaller, so we now support

00:56:29.706 --> 00:56:30.386 A:middle
quantization.

00:56:30.886 --> 00:56:32.806 A:middle
So we can take a model that

00:56:32.806 --> 00:56:35.856 A:middle
previously had shipped in 4.3 --

00:56:36.626 --> 00:56:37.866 A:middle
such as this example again from

00:56:37.866 --> 00:56:40.216 A:middle
MobileNet -- and reduce it down

00:56:40.216 --> 00:56:42.756 A:middle
to Int 8, and take its size from

00:56:42.756 --> 00:56:44.566 A:middle
17 megabytes to less than 5.

00:56:45.546 --> 00:56:46.926 A:middle
This is a huge saving for the

00:56:46.926 --> 00:56:48.126 A:middle
models that you bundle with your

00:56:48.126 --> 00:56:48.636 A:middle
applications.

00:56:48.636 --> 00:56:53.676 A:middle
Now you can do further reduction

00:56:54.066 --> 00:56:55.566 A:middle
through features like table

00:56:55.566 --> 00:56:56.646 A:middle
lookup quantization.

00:56:56.726 --> 00:56:58.616 A:middle
And we support many other

00:56:58.616 --> 00:57:01.146 A:middle
features, including support for

00:56:58.616 --> 00:57:01.146 A:middle
features, including support for

00:57:01.146 --> 00:57:03.396 A:middle
custom models now and, a very

00:57:03.396 --> 00:57:04.886 A:middle
popular feature, flexible

00:57:04.886 --> 00:57:05.366 A:middle
shapes.

00:57:05.656 --> 00:57:06.826 A:middle
So you no longer need to ship a

00:57:06.826 --> 00:57:08.376 A:middle
model for each shape that you

00:57:08.376 --> 00:57:09.266 A:middle
want to do inference on.

00:57:09.586 --> 00:57:11.396 A:middle
You ship one model, and our

00:57:11.396 --> 00:57:13.076 A:middle
simple API takes care of

00:57:13.076 --> 00:57:17.076 A:middle
everything for you.

00:57:17.296 --> 00:57:18.936 A:middle
now let's talk about Create ML,

00:57:19.006 --> 00:57:21.776 A:middle
our brand-new, easy-to-use

00:57:21.776 --> 00:57:22.896 A:middle
machine learning training

00:57:22.896 --> 00:57:23.336 A:middle
framework.

00:57:24.096 --> 00:57:25.926 A:middle
It brings together the power of

00:57:25.926 --> 00:57:28.276 A:middle
Machine Learning, Swift, and

00:57:28.276 --> 00:57:29.716 A:middle
Xcode, and Xcode Playgrounds.

00:57:31.536 --> 00:57:33.166 A:middle
No more downloading packages

00:57:33.166 --> 00:57:34.206 A:middle
from the Internet and going

00:57:34.206 --> 00:57:35.256 A:middle
through long, complicated

00:57:35.256 --> 00:57:36.616 A:middle
tutorials to portray a model.

00:57:38.406 --> 00:57:39.636 A:middle
We support feature-level

00:57:39.636 --> 00:57:41.586 A:middle
training such as image

00:57:41.586 --> 00:57:42.676 A:middle
classification and natural

00:57:42.676 --> 00:57:43.076 A:middle
language.

00:57:44.256 --> 00:57:45.736 A:middle
And if you do want to go deeper

00:57:45.736 --> 00:57:47.336 A:middle
in machine learning, we support

00:57:47.336 --> 00:57:49.226 A:middle
traditional types of algorithms

00:57:49.276 --> 00:57:50.576 A:middle
such as linear regression and

00:57:50.576 --> 00:57:52.336 A:middle
boosted trees as well as

00:57:52.336 --> 00:57:53.516 A:middle
traditional data processing.

00:57:53.666 --> 00:57:56.106 A:middle
But we think people will want to

00:57:56.106 --> 00:57:57.906 A:middle
use these feature type of

00:57:57.906 --> 00:57:59.476 A:middle
training far more, so let's look

00:57:59.476 --> 00:58:00.596 A:middle
at those examples.

00:57:59.476 --> 00:58:00.596 A:middle
at those examples.

00:58:01.986 --> 00:58:05.106 A:middle
For Natural Language, you can

00:58:05.106 --> 00:58:06.976 A:middle
now have your own custom Natural

00:58:06.976 --> 00:58:08.816 A:middle
Language model that does text

00:58:08.816 --> 00:58:10.646 A:middle
classification, word tagging,

00:58:10.996 --> 00:58:12.096 A:middle
and of course, we support

00:58:12.096 --> 00:58:12.886 A:middle
multiple languages.

00:58:12.886 --> 00:58:16.576 A:middle
So you could train a model with

00:58:16.576 --> 00:58:18.236 A:middle
very small datasets to do

00:58:18.236 --> 00:58:20.536 A:middle
sentiment analysis such as these

00:58:20.536 --> 00:58:22.636 A:middle
reviews for a movie where you

00:58:22.636 --> 00:58:23.766 A:middle
just train with positive and

00:58:23.766 --> 00:58:25.046 A:middle
negative in strings, and you

00:58:25.046 --> 00:58:26.766 A:middle
build your own custom image --

00:58:26.796 --> 00:58:27.796 A:middle
custom text classifier.

00:58:28.846 --> 00:58:31.786 A:middle
And then you could do the same

00:58:32.266 --> 00:58:34.196 A:middle
for domain analysis, being able

00:58:34.196 --> 00:58:36.226 A:middle
to train a model to understand

00:58:36.226 --> 00:58:37.286 A:middle
whether you're talking about a

00:58:37.286 --> 00:58:38.886 A:middle
hotel or a restaurant in a given

00:58:38.886 --> 00:58:39.316 A:middle
sentence.

00:58:40.026 --> 00:58:43.636 A:middle
Now we think, by far, image

00:58:43.636 --> 00:58:44.986 A:middle
classification will be the most

00:58:45.036 --> 00:58:46.126 A:middle
popular kind of training that

00:58:46.126 --> 00:58:49.256 A:middle
people want to do, and so we've

00:58:49.256 --> 00:58:50.616 A:middle
put a real focus on this.

00:58:51.646 --> 00:58:52.896 A:middle
Traditionally, if you were

00:58:52.896 --> 00:58:55.466 A:middle
training a very large model with

00:58:55.466 --> 00:58:56.526 A:middle
what might only be a small

00:58:56.526 --> 00:58:58.086 A:middle
dataset because as a developer

00:58:58.086 --> 00:58:59.246 A:middle
that's all you have access to,

00:58:59.426 --> 00:59:01.096 A:middle
your model wouldn't train well,

00:58:59.426 --> 00:59:01.096 A:middle
your model wouldn't train well,

00:59:01.096 --> 00:59:02.456 A:middle
and it over-fed, and you get

00:59:02.456 --> 00:59:03.236 A:middle
poor predictions.

00:59:03.846 --> 00:59:06.506 A:middle
Now Apple has extensive

00:59:06.506 --> 00:59:08.646 A:middle
experience in training very

00:59:08.646 --> 00:59:10.696 A:middle
large models with datasets of

00:59:10.746 --> 00:59:12.316 A:middle
photos say in the -- with many

00:59:12.316 --> 00:59:12.856 A:middle
millions.

00:59:13.236 --> 00:59:14.786 A:middle
And we want to bring all that

00:59:14.786 --> 00:59:16.416 A:middle
experience to all of you.

00:59:16.746 --> 00:59:19.136 A:middle
And through a technique called

00:59:19.136 --> 00:59:21.896 A:middle
transfer learning, you can train

00:59:22.156 --> 00:59:23.316 A:middle
your own custom image

00:59:23.316 --> 00:59:23.896 A:middle
classifier.

00:59:25.206 --> 00:59:27.506 A:middle
So we'll bundle our model into

00:59:27.506 --> 00:59:28.956 A:middle
our OS, so there's no need for

00:59:28.956 --> 00:59:29.666 A:middle
you to ship that.

00:59:30.096 --> 00:59:32.116 A:middle
You take your data, and use

00:59:32.116 --> 00:59:33.336 A:middle
transfer learning with Create

00:59:33.336 --> 00:59:35.366 A:middle
ML, and augment our model.

00:59:36.706 --> 00:59:38.076 A:middle
That means you only need to ship

00:59:38.136 --> 00:59:39.166 A:middle
the part of the model that

00:59:39.166 --> 00:59:41.636 A:middle
you've augmented, bringing a

00:59:41.636 --> 00:59:42.816 A:middle
huge saving to your

00:59:42.816 --> 00:59:43.516 A:middle
applications.

00:59:44.926 --> 00:59:45.926 A:middle
So we've worked with a number of

00:59:45.926 --> 00:59:47.626 A:middle
developers who already have

00:59:47.626 --> 00:59:48.606 A:middle
models in the around

00:59:48.606 --> 00:59:50.396 A:middle
100-megabyte range, just to add

00:59:50.396 --> 00:59:51.976 A:middle
one intelligent feature to their

00:59:51.976 --> 00:59:52.526 A:middle
application.

00:59:53.376 --> 00:59:54.506 A:middle
And now, through transfer

00:59:54.506 --> 00:59:55.886 A:middle
learning, they can take that

00:59:55.886 --> 00:59:57.266 A:middle
model size down to three

00:59:57.266 --> 00:59:57.726 A:middle
megabytes.

00:59:58.516 --> 01:00:05.856 A:middle
[ Applause ]

00:59:58.516 --> 01:00:05.856 A:middle
[ Applause ]

01:00:06.356 --> 01:00:08.296 A:middle
Now this is far cooler to see if

01:00:08.296 --> 01:00:09.716 A:middle
you see how it's all done inside

01:00:09.716 --> 01:00:11.726 A:middle
Xcode and Xcode Playgrounds, so

01:00:11.726 --> 01:00:13.166 A:middle
I'd like to invite Lizzie up to

01:00:13.166 --> 01:00:14.186 A:middle
give you a demo of that now.

01:00:14.856 --> 01:00:16.856 A:middle
[ Applause ]

01:00:17.196 --> 01:00:17.406 A:middle
Lizzie?

01:00:18.746 --> 01:00:19.276 A:middle
&gt;&gt; Thank you, John.

01:00:20.196 --> 01:00:21.506 A:middle
Let's take a look at how to

01:00:21.506 --> 01:00:23.456 A:middle
create an app to classify

01:00:23.456 --> 01:00:24.936 A:middle
different types of flowers.

01:00:25.686 --> 01:00:26.986 A:middle
Now I've started by using a

01:00:27.136 --> 01:00:28.146 A:middle
state-of-the-art image

01:00:28.146 --> 01:00:29.516 A:middle
classifier model called

01:00:29.516 --> 01:00:31.726 A:middle
Inception B3, but there are two

01:00:31.726 --> 01:00:33.076 A:middle
problems with this approach.

01:00:33.506 --> 01:00:35.486 A:middle
One, this model is quite large.

01:00:35.486 --> 01:00:37.846 A:middle
It's taking up 100 megabytes in

01:00:37.846 --> 01:00:39.076 A:middle
our app.

01:00:39.076 --> 01:00:40.916 A:middle
And the second is even though

01:00:40.916 --> 01:00:42.986 A:middle
this model has support for 1000

01:00:43.046 --> 01:00:44.976 A:middle
classifications, it can't

01:00:45.136 --> 01:00:47.396 A:middle
correctly classify a rose.

01:00:48.076 --> 01:00:49.826 A:middle
Now normally what I'd have to do

01:00:49.826 --> 01:00:51.276 A:middle
is switch to a new development

01:00:51.276 --> 01:00:52.936 A:middle
environment, download an open

01:00:52.996 --> 01:00:54.466 A:middle
source machine learning library

01:00:54.466 --> 01:00:56.216 A:middle
and spend hours training a new

01:00:56.216 --> 01:00:56.586 A:middle
model.

01:00:57.376 --> 01:00:59.686 A:middle
But now with the power of Create

01:00:59.796 --> 01:01:02.656 A:middle
ML, you can do this in minutes

01:00:59.796 --> 01:01:02.656 A:middle
ML, you can do this in minutes

01:01:02.896 --> 01:01:04.826 A:middle
and in Xcode.

01:01:04.826 --> 01:01:05.866 A:middle
Now I'll switch to a new

01:01:05.866 --> 01:01:08.026 A:middle
Playground and import Create ML

01:01:08.026 --> 01:01:08.226 A:middle
UI.

01:01:09.506 --> 01:01:11.296 A:middle
The next step is to define a

01:01:11.296 --> 01:01:14.066 A:middle
builder that can build image

01:01:14.066 --> 01:01:15.006 A:middle
classifier models.

01:01:16.256 --> 01:01:18.066 A:middle
Then to enable drag-and-drop

01:01:18.066 --> 01:01:20.166 A:middle
interaction with this model, we

01:01:20.166 --> 01:01:21.796 A:middle
can show the builder in the live

01:01:21.856 --> 01:01:22.136 A:middle
view.

01:01:22.736 --> 01:01:24.286 A:middle
And see, on the side we get a

01:01:24.326 --> 01:01:26.146 A:middle
prompt to drag in images to

01:01:26.146 --> 01:01:26.886 A:middle
begin training.

01:01:28.366 --> 01:01:30.936 A:middle
Now over on my desktop, I happen

01:01:30.936 --> 01:01:32.506 A:middle
to have a bunch of different

01:01:32.506 --> 01:01:35.096 A:middle
images of flowers organized into

01:01:35.096 --> 01:01:36.676 A:middle
folders with the name of the

01:01:36.676 --> 01:01:37.776 A:middle
particular one that they are.

01:01:38.596 --> 01:01:39.686 A:middle
So we have some daisies,

01:01:40.026 --> 01:01:43.226 A:middle
hibiscuses, and of course, some

01:01:43.226 --> 01:01:43.656 A:middle
roses.

01:01:45.416 --> 01:01:46.566 A:middle
Now what I'll do is I'll take

01:01:46.566 --> 01:01:48.316 A:middle
this folder and drag it into the

01:01:48.316 --> 01:01:48.636 A:middle
UI.

01:01:49.466 --> 01:01:50.936 A:middle
And instantly, an image

01:01:50.936 --> 01:01:52.816 A:middle
classifier model begins training

01:01:52.896 --> 01:01:55.026 A:middle
on the Mac, accelerated by the

01:01:55.156 --> 01:01:55.646 A:middle
GPU.

01:01:55.726 --> 01:01:58.156 A:middle
And right away, I can see what

01:01:58.156 --> 01:01:59.336 A:middle
the accuracy was on this

01:01:59.366 --> 01:02:00.116 A:middle
training dataset.

01:01:59.366 --> 01:02:00.116 A:middle
training dataset.

01:02:00.546 --> 01:02:01.856 A:middle
But what I'd really like to know

01:02:01.856 --> 01:02:03.586 A:middle
is how it performs on new types

01:02:03.636 --> 01:02:05.186 A:middle
of flowers that it hasn't seen.

01:02:05.316 --> 01:02:07.156 A:middle
And I've set some of those aside

01:02:07.206 --> 01:02:09.146 A:middle
here, and I can just drag them

01:02:09.246 --> 01:02:10.796 A:middle
in to let the model begin

01:02:10.796 --> 01:02:12.346 A:middle
evaluating on these new ones.

01:02:13.076 --> 01:02:15.266 A:middle
And if I scroll, you can see

01:02:15.456 --> 01:02:16.996 A:middle
what the actual label was for

01:02:16.996 --> 01:02:18.556 A:middle
each type of flower and what the

01:02:18.556 --> 01:02:19.436 A:middle
model predicted.

01:02:20.676 --> 01:02:24.006 A:middle
Now 95% is pretty decent on this

01:02:24.056 --> 01:02:24.486 A:middle
dataset.

01:02:25.236 --> 01:02:26.886 A:middle
So what I'd like to do is add it

01:02:26.886 --> 01:02:27.986 A:middle
into my app.

01:02:27.986 --> 01:02:29.456 A:middle
And you can do so just by

01:02:29.456 --> 01:02:31.406 A:middle
dragging and dropping it.

01:02:34.096 --> 01:02:34.736 A:middle
I'll then add it.

01:02:34.856 --> 01:02:36.616 A:middle
And if we take a look at this

01:02:36.616 --> 01:02:38.926 A:middle
new model, we can see it's only

01:02:39.116 --> 01:02:40.016 A:middle
50 kilobytes.

01:02:40.566 --> 01:02:41.866 A:middle
That's a huge savings.

01:02:42.396 --> 01:02:44.226 A:middle
So I'll go ahead and delete --

01:02:45.516 --> 01:02:52.046 A:middle
[ Applause ]

01:02:52.546 --> 01:02:53.966 A:middle
-- I'll delete the 100-megabyte

01:02:53.966 --> 01:02:55.496 A:middle
model and initialize the new

01:02:55.496 --> 01:02:56.966 A:middle
image classifier.

01:02:58.986 --> 01:03:01.976 A:middle
Now if I rerun the app, it's

01:02:58.986 --> 01:03:01.976 A:middle
Now if I rerun the app, it's

01:03:02.046 --> 01:03:04.196 A:middle
bundling this new model into the

01:03:04.346 --> 01:03:05.026 A:middle
application.

01:03:05.696 --> 01:03:07.276 A:middle
We can go ahead and test it to

01:03:07.346 --> 01:03:08.806 A:middle
see if it can correctly predict

01:03:09.176 --> 01:03:10.626 A:middle
on the images that we've trained

01:03:10.626 --> 01:03:13.116 A:middle
it on, or new images of the same

01:03:13.116 --> 01:03:13.806 A:middle
types of flowers.

01:03:14.376 --> 01:03:16.146 A:middle
And indeed, it can correctly

01:03:16.146 --> 01:03:17.416 A:middle
classify a rose.

01:03:18.366 --> 01:03:19.546 A:middle
Let's try it on a hibiscus.

01:03:19.546 --> 01:03:22.006 A:middle
And it can correctly predict on

01:03:22.006 --> 01:03:23.346 A:middle
those, too, since we've trained

01:03:23.346 --> 01:03:24.896 A:middle
it and incorporated it into our

01:03:25.636 --> 01:03:25.703 A:middle
app.

01:03:25.996 --> 01:03:27.366 A:middle
So as you've seen, we've been

01:03:27.366 --> 01:03:29.536 A:middle
able to train our own classifier

01:03:29.536 --> 01:03:31.676 A:middle
models using Create ML in a

01:03:31.786 --> 01:03:33.056 A:middle
fraction of the amount of time

01:03:33.286 --> 01:03:34.886 A:middle
to produce models a fraction of

01:03:34.886 --> 01:03:37.536 A:middle
the size, all using Swift and

01:03:37.726 --> 01:03:38.036 A:middle
Xcode.

01:03:38.816 --> 01:03:39.746 A:middle
Back over to you, John.

01:03:40.516 --> 01:03:43.296 A:middle
[ Applause ]

01:03:43.796 --> 01:03:44.146 A:middle
&gt;&gt; Thanks, Lizzie.

01:03:47.296 --> 01:03:49.106 A:middle
Isn't that cool, a custom image

01:03:49.106 --> 01:03:50.496 A:middle
classifier trained with three

01:03:50.496 --> 01:03:52.776 A:middle
lines of Swift, in seconds,

01:03:53.066 --> 01:03:57.176 A:middle
right there on a Mac?

01:03:57.386 --> 01:03:59.836 A:middle
So we've looked at new Vision

01:03:59.836 --> 01:04:01.446 A:middle
and Natural Language APIs and

01:03:59.836 --> 01:04:01.446 A:middle
and Natural Language APIs and

01:04:01.446 --> 01:04:02.626 A:middle
the enhancements we've made

01:04:02.626 --> 01:04:05.196 A:middle
there; our improvements with

01:04:05.196 --> 01:04:06.866 A:middle
Core ML 2 with smaller, faster

01:04:06.866 --> 01:04:08.486 A:middle
models and even more

01:04:08.486 --> 01:04:10.526 A:middle
customization; and Create ML,

01:04:10.526 --> 01:04:12.546 A:middle
our brand-new machine learning

01:04:12.546 --> 01:04:16.546 A:middle
training framework for the Mac.

01:04:16.756 --> 01:04:17.746 A:middle
Now I'd like to talk about

01:04:17.746 --> 01:04:19.016 A:middle
another area of intelligence

01:04:19.066 --> 01:04:20.046 A:middle
that we've built into the OS,

01:04:20.046 --> 01:04:23.296 A:middle
and that's shortcuts, a powerful

01:04:23.296 --> 01:04:25.106 A:middle
new way for you to expose key

01:04:25.106 --> 01:04:26.196 A:middle
capabilities of your

01:04:26.196 --> 01:04:27.776 A:middle
applications through Siri.

01:04:27.866 --> 01:04:31.176 A:middle
And you can even expose these

01:04:31.176 --> 01:04:34.196 A:middle
key capabilities using voice

01:04:34.196 --> 01:04:34.646 A:middle
commands.

01:04:36.316 --> 01:04:38.606 A:middle
Previously, sections of the OS

01:04:38.606 --> 01:04:40.536 A:middle
that had suggested features and

01:04:40.536 --> 01:04:42.846 A:middle
actions for Apple's software are

01:04:42.846 --> 01:04:44.306 A:middle
now accessible to you through

01:04:44.306 --> 01:04:44.856 A:middle
shortcuts.

01:04:46.266 --> 01:04:47.906 A:middle
We do all this prediction on

01:04:47.906 --> 01:04:49.576 A:middle
device using machine learning

01:04:49.856 --> 01:04:50.976 A:middle
that preserves your users'

01:04:51.036 --> 01:04:51.486 A:middle
privacy.

01:04:53.456 --> 01:04:54.666 A:middle
So you're probably asking how do

01:04:54.666 --> 01:04:55.526 A:middle
you adopt shortcuts?

01:04:56.666 --> 01:04:57.956 A:middle
Well, many of you have already

01:04:57.956 --> 01:05:00.306 A:middle
adopted NSUserActivity for

01:04:57.956 --> 01:05:00.306 A:middle
adopted NSUserActivity for

01:05:00.356 --> 01:05:01.936 A:middle
features such as Spotlight

01:05:01.936 --> 01:05:03.096 A:middle
search and Handoff.

01:05:03.256 --> 01:05:05.976 A:middle
And if you have -- and it's as

01:05:06.026 --> 01:05:07.496 A:middle
simple as adding this one line

01:05:07.496 --> 01:05:09.206 A:middle
of code making them eligible to

01:05:09.206 --> 01:05:10.796 A:middle
prediction for the system.

01:05:11.016 --> 01:05:12.496 A:middle
[ Applause ]

01:05:12.496 --> 01:05:13.436 A:middle
Yeah, one line of code.

01:05:13.436 --> 01:05:18.016 A:middle
But if you want the full, rich

01:05:18.046 --> 01:05:20.376 A:middle
experience of shortcuts, then

01:05:20.376 --> 01:05:21.826 A:middle
you want to adopt the new Siri

01:05:21.826 --> 01:05:22.756 A:middle
kit Intense API.

01:05:23.996 --> 01:05:26.406 A:middle
That allows rich, inline

01:05:28.046 --> 01:05:29.606 A:middle
capabilities of your application

01:05:29.606 --> 01:05:32.106 A:middle
to be exposed in Siri, custom

01:05:32.106 --> 01:05:33.726 A:middle
voice triggers and responses,

01:05:34.126 --> 01:05:35.866 A:middle
and more importantly, more

01:05:35.906 --> 01:05:37.776 A:middle
targeted predictions of when

01:05:37.776 --> 01:05:39.736 A:middle
those shortcuts will be

01:05:39.866 --> 01:05:41.226 A:middle
interesting to your users in the

01:05:41.226 --> 01:05:41.616 A:middle
future.

01:05:42.786 --> 01:05:45.856 A:middle
Now a great shortcut is one that

01:05:45.856 --> 01:05:47.276 A:middle
accelerates engagement with your

01:05:47.276 --> 01:05:48.996 A:middle
application, and increases

01:05:48.996 --> 01:05:49.886 A:middle
engagement, too.

01:05:50.656 --> 01:05:52.106 A:middle
It's one that's likely to be

01:05:52.566 --> 01:05:53.826 A:middle
repeated more often.

01:05:54.686 --> 01:05:56.566 A:middle
So in the TeamSnap example you

01:05:56.566 --> 01:05:58.426 A:middle
want to be able to check your

01:05:58.456 --> 01:06:00.656 A:middle
kid's soccer game schedule every

01:05:58.456 --> 01:06:00.656 A:middle
kid's soccer game schedule every

01:06:00.656 --> 01:06:01.536 A:middle
Saturday morning.

01:06:02.526 --> 01:06:03.796 A:middle
And ideally, it's one that can

01:06:03.796 --> 01:06:05.976 A:middle
be engaged right there in the

01:06:06.046 --> 01:06:08.196 A:middle
Siri UI and handled without the

01:06:08.196 --> 01:06:09.336 A:middle
need to punch out to your app.

01:06:09.336 --> 01:06:11.296 A:middle
But you do have the option if

01:06:11.376 --> 01:06:12.276 A:middle
that's something that you want

01:06:12.276 --> 01:06:13.826 A:middle
to do.

01:06:14.176 --> 01:06:15.806 A:middle
Now when creating a shortcut,

01:06:16.046 --> 01:06:17.336 A:middle
you need to do three simple

01:06:17.336 --> 01:06:17.686 A:middle
things.

01:06:18.336 --> 01:06:19.636 A:middle
You obviously need to define the

01:06:19.636 --> 01:06:21.066 A:middle
shortcut and do it for those

01:06:21.066 --> 01:06:22.246 A:middle
actions that really are

01:06:22.246 --> 01:06:23.366 A:middle
interesting to the users.

01:06:24.516 --> 01:06:25.716 A:middle
You need to donate when those

01:06:25.716 --> 01:06:27.446 A:middle
shortcuts occur, even if that's

01:06:27.446 --> 01:06:29.346 A:middle
in your application, because we

01:06:29.346 --> 01:06:30.496 A:middle
need that signal to be able to

01:06:30.496 --> 01:06:31.796 A:middle
predict those shortcuts in the

01:06:31.796 --> 01:06:32.106 A:middle
future.

01:06:32.106 --> 01:06:34.196 A:middle
And of course, you want to

01:06:34.196 --> 01:06:35.406 A:middle
handle those shortcuts when they

01:06:35.406 --> 01:06:35.566 A:middle
occur.

01:06:35.566 --> 01:06:38.676 A:middle
Now if you've done all this, you

01:06:38.676 --> 01:06:40.436 A:middle
get something pretty cool in

01:06:40.436 --> 01:06:41.916 A:middle
that you can interact with your

01:06:41.916 --> 01:06:43.496 A:middle
shortcut directly from home pod.

01:06:44.246 --> 01:06:45.626 A:middle
So now without picking up your

01:06:45.626 --> 01:06:47.166 A:middle
phone, you can just ask Siri

01:06:47.166 --> 01:06:48.816 A:middle
from your home pod for your

01:06:48.816 --> 01:06:50.656 A:middle
kid's soccer roster, and it will

01:06:50.656 --> 01:06:53.426 A:middle
respond using the app.

01:06:53.696 --> 01:06:55.766 A:middle
Now if you also want your

01:06:55.766 --> 01:06:57.096 A:middle
shortcuts to be exposed through

01:06:57.096 --> 01:06:59.016 A:middle
the Siri Watch Face, you can

01:06:59.016 --> 01:07:00.756 A:middle
just adopt this new Relevant

01:06:59.016 --> 01:07:00.756 A:middle
just adopt this new Relevant

01:07:00.756 --> 01:07:01.046 A:middle
API.

01:07:02.066 --> 01:07:06.026 A:middle
So that's shortcuts, a powerful

01:07:06.026 --> 01:07:08.056 A:middle
new way to expose key

01:07:08.056 --> 01:07:09.606 A:middle
capabilities of your application

01:07:09.846 --> 01:07:11.526 A:middle
and increase engagement through

01:07:11.526 --> 01:07:12.016 A:middle
Siri.

01:07:13.686 --> 01:07:15.246 A:middle
Now I'd like to hand it over to

01:07:15.246 --> 01:07:16.626 A:middle
Jeremy to talk to you about

01:07:16.656 --> 01:07:17.676 A:middle
what's new in Metal.

01:07:17.866 --> 01:07:18.046 A:middle
Jeremy?

01:07:19.516 --> 01:07:22.816 A:middle
[ Applause ]

01:07:23.316 --> 01:07:23.816 A:middle
&gt;&gt; Thanks, John.

01:07:24.646 --> 01:07:26.526 A:middle
So Metal is Apple's modern,

01:07:26.526 --> 01:07:27.616 A:middle
high-performance,

01:07:27.856 --> 01:07:29.056 A:middle
high-efficiency programming

01:07:29.056 --> 01:07:30.646 A:middle
interface to the awesome power

01:07:30.646 --> 01:07:32.626 A:middle
of the GPU at the heart of each

01:07:32.626 --> 01:07:33.636 A:middle
of Apple's platforms.

01:07:34.076 --> 01:07:35.716 A:middle
It accelerates both advanced 3D

01:07:35.716 --> 01:07:37.526 A:middle
graphics and general purpose

01:07:37.526 --> 01:07:38.976 A:middle
data parallel computations.

01:07:39.756 --> 01:07:41.306 A:middle
And since we introduced Metal in

01:07:41.306 --> 01:07:43.416 A:middle
2014, we've seen it used for

01:07:43.416 --> 01:07:44.916 A:middle
everything from smooth,

01:07:44.916 --> 01:07:47.246 A:middle
high-performance UI to modern 3D

01:07:47.246 --> 01:07:49.266 A:middle
games, advanced computational

01:07:49.266 --> 01:07:51.396 A:middle
photography, and the latest in

01:07:51.396 --> 01:07:53.256 A:middle
AR and VR experiences.

01:07:53.936 --> 01:07:54.866 A:middle
And when we introduced our

01:07:54.866 --> 01:07:56.926 A:middle
latest iPhones last fall, we

01:07:56.926 --> 01:07:58.506 A:middle
were incredibly excited to

01:07:58.506 --> 01:08:00.096 A:middle
reveal the next chapter in the

01:07:58.506 --> 01:08:00.096 A:middle
reveal the next chapter in the

01:08:00.096 --> 01:08:02.556 A:middle
Metal story with the A11 Bionic

01:08:02.846 --> 01:08:05.176 A:middle
chip where Apple harnessed many

01:08:05.176 --> 01:08:07.166 A:middle
years of deep expertise in

01:08:07.276 --> 01:08:09.246 A:middle
hardware and software design to

01:08:09.246 --> 01:08:11.586 A:middle
bring the Apple-designed GPU,

01:08:11.766 --> 01:08:14.246 A:middle
optimized for Metal 2 with such

01:08:14.286 --> 01:08:15.776 A:middle
innovative new features as tile

01:08:15.776 --> 01:08:17.076 A:middle
shading and image blocks, and

01:08:17.076 --> 01:08:18.305 A:middle
advancing the state of the art

01:08:18.305 --> 01:08:20.046 A:middle
of GPU programming with both

01:08:20.046 --> 01:08:21.765 A:middle
faster performance and lower

01:08:21.765 --> 01:08:22.106 A:middle
power.

01:08:22.106 --> 01:08:24.406 A:middle
Now your applications can use

01:08:24.406 --> 01:08:26.106 A:middle
Metal directly for 3D graphics

01:08:26.106 --> 01:08:27.386 A:middle
and GPU Compute.

01:08:27.555 --> 01:08:29.136 A:middle
And Metal powers many of Apple's

01:08:29.136 --> 01:08:31.126 A:middle
system frameworks for graphics,

01:08:31.345 --> 01:08:33.015 A:middle
media, and data processing.

01:08:33.015 --> 01:08:34.765 A:middle
Let me give you just one

01:08:34.765 --> 01:08:35.256 A:middle
example.

01:08:35.256 --> 01:08:37.716 A:middle
Our iOS camera framework uses

01:08:37.716 --> 01:08:38.886 A:middle
Metal to calculate depth

01:08:38.886 --> 01:08:41.196 A:middle
information, identify people in

01:08:41.196 --> 01:08:42.676 A:middle
photos, and generate this

01:08:42.716 --> 01:08:44.145 A:middle
depth-of-field effect in this

01:08:44.145 --> 01:08:45.395 A:middle
gorgeous portrait image.

01:08:46.176 --> 01:08:47.786 A:middle
And developers like Epic Games

01:08:47.786 --> 01:08:49.216 A:middle
are using Metal's broad support

01:08:49.216 --> 01:08:50.805 A:middle
across all of our platforms to

01:08:50.805 --> 01:08:52.026 A:middle
bring their smash-hit game

01:08:52.106 --> 01:08:54.836 A:middle
Fortnight to iPhone, iPad, and

01:08:54.836 --> 01:08:55.116 A:middle
Mac.

01:08:56.486 --> 01:08:58.796 A:middle
AMB's metal-accelerated radion

01:08:58.796 --> 01:08:59.395 A:middle
[assumed spelling] pro-ender

01:08:59.395 --> 01:09:01.805 A:middle
plugins, are now driving high

01:08:59.395 --> 01:09:01.805 A:middle
plugins, are now driving high

01:09:01.805 --> 01:09:03.946 A:middle
performance, 3D contact creation

01:09:03.946 --> 01:09:05.566 A:middle
and professional editing in

01:09:05.566 --> 01:09:08.086 A:middle
Maxon Cinema4D and Autodesk

01:09:08.086 --> 01:09:08.876 A:middle
Maya.

01:09:09.466 --> 01:09:11.526 A:middle
And apps like Gravity Sketch are

01:09:11.526 --> 01:09:13.256 A:middle
using Metal to power the next

01:09:13.256 --> 01:09:14.946 A:middle
generations of artists in

01:09:14.946 --> 01:09:16.196 A:middle
immersive professional VR

01:09:16.196 --> 01:09:17.106 A:middle
editing.

01:09:18.696 --> 01:09:20.055 A:middle
Metal's machine learning

01:09:20.055 --> 01:09:21.816 A:middle
acceleration empowers iOS apps

01:09:21.816 --> 01:09:23.386 A:middle
like BeCasso to transform your

01:09:23.386 --> 01:09:25.826 A:middle
photos into beautiful paintings.

01:09:26.225 --> 01:09:27.506 A:middle
And drives automatic,

01:09:27.616 --> 01:09:29.515 A:middle
intelligent image editing in

01:09:29.515 --> 01:09:31.435 A:middle
Pixelmator Pro for macOS.

01:09:32.225 --> 01:09:33.055 A:middle
And those are just a few

01:09:33.055 --> 01:09:34.996 A:middle
examples as the developer

01:09:34.996 --> 01:09:37.446 A:middle
adoption of metal has been truly

01:09:37.446 --> 01:09:38.486 A:middle
astounding, with more than

01:09:38.546 --> 01:09:40.626 A:middle
400,000 apps now using the Metal

01:09:40.626 --> 01:09:40.886 A:middle
API.

01:09:42.395 --> 01:09:44.316 A:middle
And all systems running an iOS

01:09:44.376 --> 01:09:46.536 A:middle
12 and macOS Mojave support

01:09:46.536 --> 01:09:48.185 A:middle
Metal, which includes all iOS

01:09:48.185 --> 01:09:49.716 A:middle
devices and all Macs released in

01:09:49.716 --> 01:09:51.296 A:middle
at least the last five years,

01:09:52.326 --> 01:09:53.856 A:middle
which means there are now well

01:09:53.856 --> 01:09:56.326 A:middle
over 1 billion Metal systems for

01:09:56.326 --> 01:09:56.976 A:middle
your applications and games.

01:09:57.106 --> 01:10:00.886 A:middle
So with Metal's deep and broad

01:09:57.106 --> 01:10:00.886 A:middle
So with Metal's deep and broad

01:10:00.886 --> 01:10:02.416 A:middle
support across all of Apple's

01:10:02.416 --> 01:10:04.626 A:middle
desktop and mobile platforms, we

01:10:04.626 --> 01:10:06.106 A:middle
are now deprecating the legacy

01:10:06.106 --> 01:10:08.476 A:middle
OpenGL and OpenCL GPU framework,

01:10:08.476 --> 01:10:10.686 A:middle
starting in macOS Mojave, iOS

01:10:10.686 --> 01:10:12.026 A:middle
12, and tvOS 12.

01:10:12.116 --> 01:10:14.786 A:middle
Now apps using these legacy APIs

01:10:14.786 --> 01:10:15.916 A:middle
will still continue to work in

01:10:15.916 --> 01:10:17.256 A:middle
these releases, but deprecation

01:10:17.256 --> 01:10:18.766 A:middle
is a first step as we wind down

01:10:18.766 --> 01:10:19.966 A:middle
legacy technologies.

01:10:20.096 --> 01:10:21.156 A:middle
So if you've not already done

01:10:21.156 --> 01:10:22.256 A:middle
so, you should begin

01:10:22.256 --> 01:10:23.336 A:middle
transitioning your apps to

01:10:23.336 --> 01:10:23.676 A:middle
Metal.

01:10:23.676 --> 01:10:24.806 A:middle
And we'll communicate more

01:10:24.806 --> 01:10:27.186 A:middle
details about this transition in

01:10:27.186 --> 01:10:27.786 A:middle
the near future.

01:10:28.716 --> 01:10:29.906 A:middle
Now as you bring your apps to

01:10:29.906 --> 01:10:30.966 A:middle
metal, we are here to help.

01:10:31.296 --> 01:10:33.016 A:middle
The Metal API is dramatically

01:10:33.016 --> 01:10:34.726 A:middle
easier to use and much more

01:10:34.726 --> 01:10:35.856 A:middle
approachable than these other

01:10:35.856 --> 01:10:37.246 A:middle
GPU programming APIs.

01:10:37.496 --> 01:10:38.856 A:middle
It contains a familiar, yet

01:10:38.856 --> 01:10:40.766 A:middle
powerful, C++ GPU shading

01:10:40.766 --> 01:10:41.186 A:middle
language.

01:10:41.436 --> 01:10:43.126 A:middle
And we provide a full suite of

01:10:43.126 --> 01:10:44.426 A:middle
advanced debugging and

01:10:44.426 --> 01:10:46.666 A:middle
performance profiling tools for

01:10:46.666 --> 01:10:48.346 A:middle
using Metal, all built right

01:10:48.346 --> 01:10:49.076 A:middle
into Xcode.

01:10:49.076 --> 01:10:51.286 A:middle
We have GPU performance counters

01:10:51.286 --> 01:10:52.456 A:middle
with advanced profiling to

01:10:52.456 --> 01:10:53.746 A:middle
identify your most expensive

01:10:53.746 --> 01:10:55.506 A:middle
lines of shader code and a

01:10:55.506 --> 01:10:57.476 A:middle
visual API debugger for

01:10:57.476 --> 01:10:58.646 A:middle
navigating your Metal function

01:10:58.646 --> 01:11:00.666 A:middle
calls, a Metal System Trace to

01:10:58.646 --> 01:11:00.666 A:middle
calls, a Metal System Trace to

01:11:00.666 --> 01:11:02.226 A:middle
put your Metal commands in the

01:11:02.226 --> 01:11:03.506 A:middle
context of everything else

01:11:03.506 --> 01:11:04.506 A:middle
happening on the system.

01:11:04.996 --> 01:11:05.976 A:middle
And we're really excited to

01:11:05.976 --> 01:11:07.476 A:middle
announce two new powerful tools

01:11:07.516 --> 01:11:08.956 A:middle
this year, a new Metal

01:11:08.956 --> 01:11:10.586 A:middle
Dependency Viewer where you can

01:11:10.586 --> 01:11:11.776 A:middle
investigate your complex,

01:11:11.776 --> 01:11:13.326 A:middle
multipass rendering and command

01:11:13.326 --> 01:11:15.526 A:middle
encoders, and an all-new,

01:11:15.526 --> 01:11:17.666 A:middle
interactive GPU source code

01:11:17.666 --> 01:11:19.306 A:middle
shader debugger where you can

01:11:19.306 --> 01:11:20.806 A:middle
actually explore your Metal code

01:11:20.806 --> 01:11:22.966 A:middle
right down to the pixel level.

01:11:24.036 --> 01:11:25.046 A:middle
Now you have to see these new

01:11:25.046 --> 01:11:26.596 A:middle
tools in action, so I'd like to

01:11:26.596 --> 01:11:27.976 A:middle
invite Seth to give you a

01:11:27.976 --> 01:11:28.756 A:middle
demonstration.

01:11:29.346 --> 01:11:29.556 A:middle
Seth?

01:11:30.516 --> 01:11:35.466 A:middle
[ Applause ]

01:11:35.966 --> 01:11:36.496 A:middle
&gt;&gt; Thank you, John.

01:11:37.416 --> 01:11:39.556 A:middle
Xcode's GP debugger is the tool

01:11:39.556 --> 01:11:40.566 A:middle
for developing your Metal

01:11:40.566 --> 01:11:41.216 A:middle
applications.

01:11:41.576 --> 01:11:43.306 A:middle
In the Debug Navigator on the

01:11:43.306 --> 01:11:44.646 A:middle
left, you can see all the Metal

01:11:44.646 --> 01:11:45.926 A:middle
API codes and [inaudible] codes

01:11:46.126 --> 01:11:46.906 A:middle
used in your frame.

01:11:46.906 --> 01:11:48.956 A:middle
And on the right, you can see

01:11:48.956 --> 01:11:51.036 A:middle
the results of the selected

01:11:51.036 --> 01:11:51.406 A:middle
[inaudible].

01:11:51.406 --> 01:11:53.186 A:middle
The main editor shows you the --

01:11:53.186 --> 01:11:54.656 A:middle
all the buffers, textures, and

01:11:54.656 --> 01:11:56.196 A:middle
other resources that were used

01:11:56.196 --> 01:11:57.316 A:middle
for that [inaudible].

01:11:57.576 --> 01:11:59.086 A:middle
Well, new in Xcode 10, we're

01:11:59.086 --> 01:12:00.096 A:middle
introducing the Dependency

01:11:59.086 --> 01:12:00.096 A:middle
introducing the Dependency

01:12:00.096 --> 01:12:01.556 A:middle
Viewer, a powerful way to

01:12:01.556 --> 01:12:04.236 A:middle
understand how complex render

01:12:04.236 --> 01:12:05.856 A:middle
passes combine to form your

01:12:05.856 --> 01:12:06.166 A:middle
scene.

01:12:07.706 --> 01:12:09.136 A:middle
This gives you a blueprint of

01:12:09.136 --> 01:12:12.296 A:middle
your frame in explaining and

01:12:12.296 --> 01:12:14.276 A:middle
understanding how the complex

01:12:14.276 --> 01:12:15.666 A:middle
render graphs at one application

01:12:15.746 --> 01:12:17.696 A:middle
such as Unity's breathtaking

01:12:17.696 --> 01:12:18.776 A:middle
"Book of the Dead" demo shown

01:12:18.776 --> 01:12:19.406 A:middle
here.

01:12:20.016 --> 01:12:23.556 A:middle
I can zoom out to see more

01:12:24.496 --> 01:12:24.656 A:middle
detail.

01:12:24.816 --> 01:12:26.486 A:middle
Earlier render passes are shown

01:12:26.486 --> 01:12:28.696 A:middle
at the top, with the later

01:12:28.696 --> 01:12:29.856 A:middle
render passes shown at the

01:12:29.856 --> 01:12:30.426 A:middle
bottom.

01:12:31.296 --> 01:12:32.206 A:middle
The lines indicate the

01:12:32.206 --> 01:12:34.176 A:middle
dependencies between passes,

01:12:34.876 --> 01:12:36.136 A:middle
with those for the selected pass

01:12:36.376 --> 01:12:37.426 A:middle
highlighted in blue.

01:12:38.306 --> 01:12:40.096 A:middle
As you can see, with more than

01:12:40.096 --> 01:12:41.616 A:middle
100 render passes, there's

01:12:41.616 --> 01:12:42.896 A:middle
clearly a lot going on in this

01:12:42.896 --> 01:12:43.146 A:middle
scene.

01:12:44.496 --> 01:12:46.516 A:middle
Now as good as this scene looks,

01:12:47.026 --> 01:12:48.276 A:middle
there's always room for more

01:12:48.276 --> 01:12:48.756 A:middle
flair.

01:12:49.256 --> 01:12:50.736 A:middle
So I did an additional render

01:12:50.736 --> 01:12:52.076 A:middle
pass, the lens flare.

01:12:52.076 --> 01:12:54.336 A:middle
But as you can see, something

01:12:54.336 --> 01:12:55.806 A:middle
didn't [inaudible] quite right

01:12:55.806 --> 01:12:57.156 A:middle
-- far, far to green.

01:12:58.176 --> 01:13:03.376 A:middle
Well, let's zoom in, select a

01:12:58.176 --> 01:13:03.376 A:middle
Well, let's zoom in, select a

01:13:03.416 --> 01:13:06.186 A:middle
pixel, and launch the new Shader

01:13:06.186 --> 01:13:08.566 A:middle
Debugger, a powerful interactive

01:13:08.566 --> 01:13:09.956 A:middle
tool to let you visually debug

01:13:09.956 --> 01:13:10.476 A:middle
shaders [inaudible].

01:13:11.206 --> 01:13:14.676 A:middle
In the main editor, I can see my

01:13:14.676 --> 01:13:15.156 A:middle
source code.

01:13:15.816 --> 01:13:17.396 A:middle
And in the sidebar to its right,

01:13:17.526 --> 01:13:19.126 A:middle
I can see variables touched by

01:13:19.256 --> 01:13:21.176 A:middle
each line of code.

01:13:21.176 --> 01:13:22.806 A:middle
Additionally, I can expand any

01:13:22.806 --> 01:13:24.526 A:middle
of these to see more details in

01:13:24.526 --> 01:13:25.316 A:middle
line.

01:13:26.146 --> 01:13:27.876 A:middle
These two views visualize the

01:13:27.876 --> 01:13:29.486 A:middle
area around the selected pixel,

01:13:30.316 --> 01:13:31.906 A:middle
corresponding to the highlighted

01:13:31.906 --> 01:13:34.496 A:middle
region in the frame attachment.

01:13:36.016 --> 01:13:37.986 A:middle
The view on the left visualizes

01:13:37.986 --> 01:13:39.336 A:middle
the variable value.

01:13:39.336 --> 01:13:41.576 A:middle
And the one on the right, the

01:13:41.726 --> 01:13:44.276 A:middle
pixel -- the execution mask.

01:13:44.336 --> 01:13:45.946 A:middle
This indicates which pixels

01:13:45.996 --> 01:13:48.156 A:middle
executed this line of code.

01:13:48.326 --> 01:13:49.766 A:middle
This is an incredibly powerful

01:13:49.826 --> 01:13:52.256 A:middle
way to debug the massively

01:13:52.256 --> 01:13:53.296 A:middle
[inaudible] execution of shaders

01:13:53.396 --> 01:13:53.756 A:middle
on the GPU.

01:13:53.756 --> 01:13:57.586 A:middle
Now you can see here that the

01:13:57.586 --> 01:13:59.016 A:middle
shape of the execution mask

01:13:59.516 --> 01:14:00.596 A:middle
matches that of the visual

01:13:59.516 --> 01:14:00.596 A:middle
matches that of the visual

01:14:00.596 --> 01:14:02.296 A:middle
aberration, telling me that the

01:14:02.296 --> 01:14:04.656 A:middle
issue exists on this line of

01:14:05.206 --> 01:14:05.426 A:middle
code.

01:14:05.426 --> 01:14:06.386 A:middle
Well, now that I know where the

01:14:06.386 --> 01:14:07.806 A:middle
issue is, I can see what I've

01:14:07.806 --> 01:14:09.456 A:middle
done wrong, using the vector

01:14:09.456 --> 01:14:10.606 A:middle
length of the lens flare rather

01:14:10.606 --> 01:14:12.356 A:middle
than the color of the lens

01:14:12.356 --> 01:14:12.556 A:middle
flare.

01:14:12.556 --> 01:14:13.976 A:middle
That will be easy to fix.

01:14:17.286 --> 01:14:18.916 A:middle
I can now hit the update shaders

01:14:18.916 --> 01:14:20.576 A:middle
button to quickly apply the fix,

01:14:20.716 --> 01:14:22.386 A:middle
recompiling the shader and

01:14:22.386 --> 01:14:23.836 A:middle
deploying it to the GPU.

01:14:24.026 --> 01:14:26.876 A:middle
And here we can see that my lens

01:14:26.876 --> 01:14:28.266 A:middle
flare is fixed, and the scene

01:14:28.266 --> 01:14:28.776 A:middle
looks cool.

01:14:29.516 --> 01:14:36.246 A:middle
[ Applause ]

01:14:36.746 --> 01:14:37.936 A:middle
So that's the new Dependency

01:14:37.936 --> 01:14:39.946 A:middle
Viewer and GP Shader Debugger in

01:14:39.946 --> 01:14:41.626 A:middle
Xcode 10, giving you powerful

01:14:41.626 --> 01:14:42.856 A:middle
new tools to build your Metal

01:14:42.856 --> 01:14:43.416 A:middle
applications.

01:14:44.066 --> 01:14:44.446 A:middle
Jeremy?

01:14:45.276 --> 01:14:47.496 A:middle
&gt;&gt; All right, [applause] thank

01:14:47.496 --> 01:14:47.776 A:middle
you, Seth.

01:14:50.806 --> 01:14:52.036 A:middle
So in addition to these amazing

01:14:52.036 --> 01:14:53.396 A:middle
new tools, we're continuing to

01:14:53.396 --> 01:14:55.266 A:middle
advance Metal with a fantastic

01:14:55.266 --> 01:14:57.276 A:middle
set of new features in iOS 12

01:14:57.276 --> 01:14:58.606 A:middle
and macOS Mojave.

01:14:58.606 --> 01:14:59.866 A:middle
Now I'm going to highlight just

01:14:59.866 --> 01:15:00.856 A:middle
three of them today --

01:14:59.866 --> 01:15:00.856 A:middle
three of them today --

01:15:01.526 --> 01:15:03.096 A:middle
GPU-driven command encoding,

01:15:03.416 --> 01:15:04.556 A:middle
machine learning training

01:15:04.556 --> 01:15:06.576 A:middle
acceleration, and ray tracing.

01:15:07.496 --> 01:15:09.016 A:middle
So first, GPU-driven command

01:15:09.016 --> 01:15:09.466 A:middle
encoding.

01:15:09.676 --> 01:15:11.606 A:middle
Now historically, your app would

01:15:11.606 --> 01:15:13.536 A:middle
encode its GPU commands using

01:15:13.536 --> 01:15:14.936 A:middle
the CPU and then subsequently

01:15:14.936 --> 01:15:16.206 A:middle
execute those commands on the

01:15:16.206 --> 01:15:16.686 A:middle
GPU.

01:15:17.086 --> 01:15:18.196 A:middle
And while Metal enabled this

01:15:18.196 --> 01:15:20.326 A:middle
encoding to be very fast, it

01:15:20.326 --> 01:15:21.426 A:middle
could still become bottlenecked

01:15:21.456 --> 01:15:23.086 A:middle
by the synchronization between

01:15:23.086 --> 01:15:24.246 A:middle
the CPU and the GPU.

01:15:24.746 --> 01:15:26.506 A:middle
Well, now in iOS 12 and macOS

01:15:26.506 --> 01:15:28.026 A:middle
Mojave, you can actually encode

01:15:28.026 --> 01:15:29.836 A:middle
those commands right on the GPU

01:15:29.836 --> 01:15:32.046 A:middle
itself, freeing up precious CPU

01:15:32.046 --> 01:15:34.076 A:middle
time for other use by your games

01:15:34.076 --> 01:15:34.806 A:middle
and apps.

01:15:35.276 --> 01:15:36.746 A:middle
And because you issue these

01:15:36.746 --> 01:15:38.476 A:middle
commands right on the GPU using

01:15:38.476 --> 01:15:39.886 A:middle
a compute shader, you can

01:15:39.886 --> 01:15:41.016 A:middle
actually officially construct

01:15:41.016 --> 01:15:42.386 A:middle
massive numbers of commands in

01:15:42.386 --> 01:15:44.076 A:middle
parallel as well, unlocking

01:15:44.076 --> 01:15:45.666 A:middle
completely new levels of

01:15:45.666 --> 01:15:47.176 A:middle
rendering performance and

01:15:47.176 --> 01:15:47.976 A:middle
sophistication.

01:15:48.966 --> 01:15:50.876 A:middle
Next, I'd like to share the

01:15:50.876 --> 01:15:52.526 A:middle
latest advances in Metal's

01:15:52.716 --> 01:15:54.036 A:middle
support for machine learning.

01:15:54.396 --> 01:15:57.186 A:middle
In iOS 12 and macOS Mojave, we

01:15:57.186 --> 01:15:58.496 A:middle
have augmented our existing

01:15:58.496 --> 01:15:59.936 A:middle
library of Metal performance

01:15:59.936 --> 01:16:01.876 A:middle
shaders with an enormous array

01:15:59.936 --> 01:16:01.876 A:middle
shaders with an enormous array

01:16:01.876 --> 01:16:03.566 A:middle
of all-new compute kernels,

01:16:03.966 --> 01:16:05.626 A:middle
optimized to support machine

01:16:05.626 --> 01:16:07.196 A:middle
learning training right on the

01:16:07.196 --> 01:16:09.326 A:middle
local GPU on your iOS and Mac

01:16:09.366 --> 01:16:09.926 A:middle
devices.

01:16:10.246 --> 01:16:11.646 A:middle
And the performance improvements

01:16:11.646 --> 01:16:12.776 A:middle
we are seeing from these new

01:16:12.776 --> 01:16:14.076 A:middle
Metal performance shaders on

01:16:14.076 --> 01:16:15.706 A:middle
training are truly stunning,

01:16:15.706 --> 01:16:17.116 A:middle
with an order of magnitude

01:16:17.166 --> 01:16:18.456 A:middle
faster training times.

01:16:19.376 --> 01:16:20.846 A:middle
We're also really excited to

01:16:20.846 --> 01:16:21.826 A:middle
announce we've been working with

01:16:21.866 --> 01:16:22.796 A:middle
Google to bring Metal

01:16:22.796 --> 01:16:24.676 A:middle
acceleration to TensorFlow later

01:16:24.676 --> 01:16:25.966 A:middle
this year, and the early

01:16:25.966 --> 01:16:27.226 A:middle
performance results are showing

01:16:27.226 --> 01:16:29.406 A:middle
an astonishing improvement of 20

01:16:29.406 --> 01:16:30.436 A:middle
times the previous

01:16:30.436 --> 01:16:31.236 A:middle
implementation.

01:16:32.316 --> 01:16:33.936 A:middle
[Applause] Yeah, it's awesome.

01:16:34.516 --> 01:16:36.756 A:middle
[ Applause ]

01:16:37.256 --> 01:16:38.796 A:middle
And last, ray tracing.

01:16:38.796 --> 01:16:39.866 A:middle
Now this is a time-honored

01:16:39.866 --> 01:16:41.746 A:middle
technique to achieve incredibly

01:16:41.806 --> 01:16:44.076 A:middle
realistic scenes, often used for

01:16:44.076 --> 01:16:45.646 A:middle
high-end rendering and 3D

01:16:45.646 --> 01:16:46.336 A:middle
product design.

01:16:46.716 --> 01:16:48.116 A:middle
However, it traditionally had to

01:16:48.116 --> 01:16:49.466 A:middle
be done offline because it was

01:16:49.466 --> 01:16:51.206 A:middle
so computationally expensive.

01:16:51.346 --> 01:16:54.346 A:middle
Now let me describe why very

01:16:54.346 --> 01:16:54.796 A:middle
quickly.

01:16:55.126 --> 01:16:56.196 A:middle
First, you would need to

01:16:56.196 --> 01:16:58.036 A:middle
mathematically model the rays

01:16:58.036 --> 01:16:58.966 A:middle
from a light source as they

01:16:58.966 --> 01:17:00.636 A:middle
bounce off of objects through

01:16:58.966 --> 01:17:00.636 A:middle
bounce off of objects through

01:17:00.636 --> 01:17:02.676 A:middle
the scene, toward the screen,

01:17:02.676 --> 01:17:03.686 A:middle
and into your eye.

01:17:04.326 --> 01:17:05.756 A:middle
And to achieve higher and higher

01:17:05.756 --> 01:17:07.126 A:middle
resolutions, you would need to

01:17:07.126 --> 01:17:09.796 A:middle
add more, and more, and more

01:17:10.866 --> 01:17:14.206 A:middle
rays until you could reach the

01:17:14.206 --> 01:17:15.486 A:middle
desired resolution.

01:17:15.486 --> 01:17:17.626 A:middle
And this simple 1k-by-1k image

01:17:17.626 --> 01:17:19.206 A:middle
would take nearly 6 million rays

01:17:19.206 --> 01:17:19.776 A:middle
to generate.

01:17:20.756 --> 01:17:22.066 A:middle
Now each of those rays also must

01:17:22.066 --> 01:17:23.256 A:middle
be processed with at least two

01:17:23.256 --> 01:17:24.856 A:middle
sets of expensive mathematical

01:17:24.856 --> 01:17:25.726 A:middle
calculations.

01:17:26.136 --> 01:17:27.496 A:middle
First, you had to determine if a

01:17:27.496 --> 01:17:28.606 A:middle
given ray intersects a

01:17:28.606 --> 01:17:29.746 A:middle
particular triangle in your

01:17:29.746 --> 01:17:30.226 A:middle
scene.

01:17:30.576 --> 01:17:31.966 A:middle
And second, you must apply a

01:17:31.966 --> 01:17:33.266 A:middle
material-specific shader

01:17:33.266 --> 01:17:35.106 A:middle
necessary to generate the pixel.

01:17:35.986 --> 01:17:37.166 A:middle
Now originally, both of these

01:17:37.166 --> 01:17:38.716 A:middle
operations would have been

01:17:38.716 --> 01:17:39.696 A:middle
performed by the CPU.

01:17:39.936 --> 01:17:41.656 A:middle
But while the GPU can easily

01:17:41.656 --> 01:17:43.336 A:middle
handle the pixel shading, the

01:17:43.336 --> 01:17:45.036 A:middle
ray-triangle intersection itself

01:17:45.036 --> 01:17:46.506 A:middle
could remain an expensive CPU

01:17:46.506 --> 01:17:47.716 A:middle
bottleneck, and it would be

01:17:47.716 --> 01:17:49.026 A:middle
incredibly difficult to move

01:17:49.026 --> 01:17:50.386 A:middle
this to the GPU efficiently.

01:17:51.546 --> 01:17:52.876 A:middle
But the new Metal Ray-Triangle

01:17:52.876 --> 01:17:54.526 A:middle
Intersector solves this problem

01:17:54.526 --> 01:17:55.016 A:middle
for you.

01:17:55.276 --> 01:17:56.726 A:middle
And with this new API, you get a

01:17:56.726 --> 01:17:58.306 A:middle
dramatic increase in performance

01:17:58.306 --> 01:18:00.106 A:middle
of up to 10x in a very

01:17:58.306 --> 01:18:00.106 A:middle
of up to 10x in a very

01:18:00.106 --> 01:18:01.336 A:middle
simple-to-use package, all

01:18:01.336 --> 01:18:03.336 A:middle
pre-optimized for use with our

01:18:03.516 --> 01:18:05.376 A:middle
iOS and macOS GPUs.

01:18:06.186 --> 01:18:07.956 A:middle
And it really is that simple,

01:18:07.956 --> 01:18:09.216 A:middle
just a few lines of code.

01:18:09.216 --> 01:18:12.216 A:middle
And the ray tracing, like many

01:18:12.216 --> 01:18:13.896 A:middle
GPU compute operations, is

01:18:13.896 --> 01:18:15.086 A:middle
exactly the kind of operation

01:18:15.086 --> 01:18:16.376 A:middle
that can efficiently scale with

01:18:16.376 --> 01:18:18.356 A:middle
the available GPU horsepower.

01:18:18.356 --> 01:18:20.066 A:middle
So we can actually get even more

01:18:20.066 --> 01:18:21.936 A:middle
performance by using Metal 2

01:18:21.936 --> 01:18:23.216 A:middle
support for external GPUs.

01:18:23.216 --> 01:18:25.266 A:middle
Now you really have to see this

01:18:25.266 --> 01:18:25.806 A:middle
in action.

01:18:25.976 --> 01:18:27.076 A:middle
And I'd like to invite Rav to

01:18:27.076 --> 01:18:28.366 A:middle
give a quick demonstration.

01:18:28.666 --> 01:18:29.406 A:middle
Rav?

01:18:30.516 --> 01:18:34.016 A:middle
[ Applause ]

01:18:34.516 --> 01:18:35.106 A:middle
&gt;&gt; Thank you, Jeremy.

01:18:35.806 --> 01:18:37.716 A:middle
All right, let's bring up this

01:18:37.716 --> 01:18:39.296 A:middle
ray trace rendering of the

01:18:39.476 --> 01:18:41.316 A:middle
Amazon Lumberyard Bistro scene

01:18:41.626 --> 01:18:43.536 A:middle
using the CPU to perform the

01:18:43.536 --> 01:18:44.956 A:middle
intersection calculations.

01:18:45.516 --> 01:18:47.186 A:middle
And this implementation is

01:18:47.316 --> 01:18:49.496 A:middle
optimized to run on all 10 cores

01:18:49.496 --> 01:18:50.686 A:middle
in our iMac Pro.

01:18:51.776 --> 01:18:52.786 A:middle
We've also added a little

01:18:52.786 --> 01:18:54.296 A:middle
benchmark mode that times how

01:18:54.296 --> 01:18:56.116 A:middle
long it takes to do 80

01:18:56.116 --> 01:18:57.596 A:middle
iterations of our ray-tracing

01:18:57.596 --> 01:18:58.116 A:middle
algorithm.

01:18:59.016 --> 01:19:01.016 A:middle
And for context, that requires

01:18:59.016 --> 01:19:01.016 A:middle
And for context, that requires

01:19:01.016 --> 01:19:03.206 A:middle
performing over 6 billion

01:19:03.206 --> 01:19:04.066 A:middle
intersection tests.

01:19:04.736 --> 01:19:05.676 A:middle
And as you can see, we need

01:19:05.676 --> 01:19:08.916 A:middle
about 12 seconds to do that on

01:19:08.916 --> 01:19:09.566 A:middle
the CPU.

01:19:09.626 --> 01:19:12.556 A:middle
So let's compare that to using

01:19:12.556 --> 01:19:14.286 A:middle
the new ray -- the new Metal

01:19:14.286 --> 01:19:15.796 A:middle
Ray-Triangle Intersector on the

01:19:15.796 --> 01:19:17.506 A:middle
built-in GPU in the iMac Pro.

01:19:17.686 --> 01:19:19.816 A:middle
And you can immediately see that

01:19:19.816 --> 01:19:21.546 A:middle
it's much faster, and we only

01:19:21.546 --> 01:19:23.926 A:middle
need about 1.3 seconds to do the

01:19:23.926 --> 01:19:24.606 A:middle
same amount of work.

01:19:24.986 --> 01:19:26.106 A:middle
It's so good, I'm going to do it

01:19:26.106 --> 01:19:26.256 A:middle
again.

01:19:26.256 --> 01:19:26.646 A:middle
Here we go.

01:19:28.436 --> 01:19:29.266 A:middle
And it's done.

01:19:30.046 --> 01:19:32.306 A:middle
So getting an almost 10-times

01:19:32.336 --> 01:19:33.886 A:middle
performance increase is

01:19:33.886 --> 01:19:34.836 A:middle
fantastic.

01:19:35.356 --> 01:19:36.336 A:middle
But of course, we didn't just

01:19:36.336 --> 01:19:36.816 A:middle
stop there.

01:19:36.816 --> 01:19:39.296 A:middle
As Jeremy noted, ray tracing is

01:19:39.296 --> 01:19:40.916 A:middle
well-suited for parallelization

01:19:40.916 --> 01:19:43.336 A:middle
across multiple GPUs, so I can

01:19:43.336 --> 01:19:44.976 A:middle
enable an external GPU that I

01:19:44.976 --> 01:19:46.556 A:middle
previously attached to this iMac

01:19:46.626 --> 01:19:49.556 A:middle
Pro and get the render time cut

01:19:49.556 --> 01:19:50.006 A:middle
in half.

01:19:50.176 --> 01:19:52.316 A:middle
So you'll note the green line

01:19:52.316 --> 01:19:53.676 A:middle
that we've added to help

01:19:53.796 --> 01:19:55.106 A:middle
visualize how we're splitting

01:19:55.106 --> 01:19:56.326 A:middle
this workload across the two

01:19:56.326 --> 01:19:59.026 A:middle
GPUs, with each GPU rendering

01:19:59.026 --> 01:20:00.776 A:middle
half the frame in this case.

01:19:59.026 --> 01:20:00.776 A:middle
half the frame in this case.

01:20:01.416 --> 01:20:02.946 A:middle
So this is a great improvement,

01:20:03.456 --> 01:20:05.006 A:middle
but as Jeremy says, you can

01:20:05.006 --> 01:20:06.626 A:middle
never have too many GPUs.

01:20:07.186 --> 01:20:09.266 A:middle
So let's add another two for a

01:20:09.266 --> 01:20:11.766 A:middle
total of four GPUs now rendering

01:20:11.766 --> 01:20:12.306 A:middle
the scene.

01:20:12.756 --> 01:20:15.496 A:middle
So that's over 40 teraflops of

01:20:15.496 --> 01:20:17.836 A:middle
compute capability with our iMac

01:20:17.936 --> 01:20:20.286 A:middle
Pro, and we're rendering the

01:20:20.446 --> 01:20:22.616 A:middle
scene 30 times faster than the

01:20:22.726 --> 01:20:23.186 A:middle
CPU.

01:20:23.616 --> 01:20:25.156 A:middle
We think that's pretty amazing,

01:20:25.196 --> 01:20:25.466 A:middle
yep.

01:20:27.516 --> 01:20:34.266 A:middle
[ Applause ]

01:20:34.766 --> 01:20:35.896 A:middle
And since ray tracing is so

01:20:35.896 --> 01:20:37.076 A:middle
great for rendering shadows, I'm

01:20:37.076 --> 01:20:38.376 A:middle
just going to turn off a couple

01:20:38.376 --> 01:20:40.276 A:middle
lights here to get them to pop.

01:20:40.276 --> 01:20:41.826 A:middle
And you can really appreciate

01:20:41.916 --> 01:20:43.226 A:middle
how much faster the image

01:20:43.226 --> 01:20:44.856 A:middle
converges on the GPUs.

01:20:45.526 --> 01:20:48.126 A:middle
So the new Metal Ray-Triangle

01:20:48.156 --> 01:20:49.916 A:middle
Intersector and external GPU

01:20:49.916 --> 01:20:52.566 A:middle
support on macOS we believe is

01:20:52.566 --> 01:20:53.926 A:middle
going to enable some great new

01:20:53.926 --> 01:20:55.496 A:middle
workflows on apps that are

01:20:55.496 --> 01:20:57.116 A:middle
taking advantage of ray tracing

01:20:57.116 --> 01:20:57.566 A:middle
techniques.

01:20:58.116 --> 01:20:58.406 A:middle
Thank you.

01:20:58.856 --> 01:20:59.486 A:middle
Back to you, Jeremy [applause].

01:21:02.196 --> 01:21:03.886 A:middle
&gt;&gt; All right, that is really

01:21:04.046 --> 01:21:04.306 A:middle
stunning.

01:21:04.406 --> 01:21:04.936 A:middle
Thanks, Rav.

01:21:06.066 --> 01:21:08.116 A:middle
So that's Metal 2 in iOS 12 and

01:21:08.116 --> 01:21:10.466 A:middle
macOS Mojave, an easy-to-use,

01:21:10.466 --> 01:21:12.216 A:middle
unified 3D graphics and GPU

01:21:12.216 --> 01:21:14.466 A:middle
compute API with broad support

01:21:14.466 --> 01:21:16.046 A:middle
across all of Apple's products,

01:21:16.146 --> 01:21:18.926 A:middle
including the A11 Bionic and the

01:21:18.926 --> 01:21:20.186 A:middle
Apple-designed GPU.

01:21:21.086 --> 01:21:22.716 A:middle
GPU developer tools integrated

01:21:22.716 --> 01:21:24.206 A:middle
right into Xcode and all-new

01:21:24.206 --> 01:21:25.606 A:middle
features to support the latest

01:21:25.606 --> 01:21:27.016 A:middle
advancements in machine learning

01:21:27.016 --> 01:21:28.966 A:middle
training and ray tracing.

01:21:29.376 --> 01:21:30.546 A:middle
There's never been a better time

01:21:30.546 --> 01:21:31.686 A:middle
to move your app to Metal, and

01:21:31.686 --> 01:21:32.826 A:middle
we can't wait to see what you'll

01:21:32.856 --> 01:21:33.656 A:middle
create next.

01:21:33.856 --> 01:21:34.196 A:middle
Thank you.

01:21:35.276 --> 01:21:37.126 A:middle
And now, I would like to hand it

01:21:37.126 --> 01:21:38.786 A:middle
over to Mike Rockwell to talk

01:21:38.786 --> 01:21:40.486 A:middle
about what's the latest news in

01:21:40.486 --> 01:21:40.676 A:middle
AR?

01:21:40.676 --> 01:21:40.876 A:middle
Thanks.

01:21:41.516 --> 01:21:43.706 A:middle
[ Applause ]

01:21:44.206 --> 01:21:44.926 A:middle
&gt;&gt; Thanks, Jeremy.

01:21:47.936 --> 01:21:49.786 A:middle
So last year has been an amazing

01:21:49.786 --> 01:21:51.306 A:middle
year for AR at Apple.

01:21:51.896 --> 01:21:53.876 A:middle
With the debut of ARKit at last

01:21:53.876 --> 01:21:57.866 A:middle
WWDC, iOS became the world's

01:21:57.866 --> 01:22:01.186 A:middle
largest AR platform by a lot.

01:21:57.866 --> 01:22:01.186 A:middle
largest AR platform by a lot.

01:22:01.696 --> 01:22:03.146 A:middle
There are hundreds of millions

01:22:03.296 --> 01:22:06.576 A:middle
of AR-enabled iOS devices, and

01:22:06.576 --> 01:22:08.006 A:middle
that number is growing rapidly.

01:22:09.066 --> 01:22:09.966 A:middle
As Craig showed you this

01:22:09.966 --> 01:22:12.336 A:middle
morning, with iOS 12, we're

01:22:12.336 --> 01:22:14.446 A:middle
taking things further by making

01:22:14.446 --> 01:22:16.386 A:middle
AR ubiquitous across the

01:22:16.386 --> 01:22:17.326 A:middle
operating system.

01:22:18.126 --> 01:22:20.696 A:middle
We can now experience AR content

01:22:20.696 --> 01:22:22.946 A:middle
via the new QuickLook Viewer in

01:22:22.946 --> 01:22:26.116 A:middle
Messages, News, Safari, and

01:22:26.116 --> 01:22:26.606 A:middle
more.

01:22:27.456 --> 01:22:29.516 A:middle
To do that, we had to work on

01:22:29.516 --> 01:22:31.246 A:middle
and create a file format that we

01:22:31.296 --> 01:22:32.996 A:middle
optimized for AR.

01:22:32.996 --> 01:22:35.066 A:middle
And we worked with Pixar and

01:22:35.066 --> 01:22:37.836 A:middle
Adobe to create a new mobile AR

01:22:37.836 --> 01:22:39.886 A:middle
format called USDZ.

01:22:40.176 --> 01:22:41.776 A:middle
It's based on the universal

01:22:41.776 --> 01:22:43.616 A:middle
scene description format that's

01:22:43.616 --> 01:22:45.256 A:middle
used across the industry for

01:22:45.256 --> 01:22:46.786 A:middle
professional content creation.

01:22:47.286 --> 01:22:48.726 A:middle
It's optimized for mobile

01:22:48.726 --> 01:22:50.916 A:middle
devices, and it supports Rich 3D

01:22:50.916 --> 01:22:52.416 A:middle
assets and animation.

01:22:53.576 --> 01:22:56.946 A:middle
It's incredibly easy to use

01:22:57.256 --> 01:22:57.596 A:middle
USDZ.

01:22:58.016 --> 01:22:59.526 A:middle
On the web, it just takes a

01:22:59.526 --> 01:23:01.596 A:middle
couple of lines of HTML, and

01:22:59.526 --> 01:23:01.596 A:middle
couple of lines of HTML, and

01:23:01.596 --> 01:23:03.976 A:middle
it's also natively supported in

01:23:03.976 --> 01:23:06.196 A:middle
SceneKit using Model I/O, so you

01:23:06.196 --> 01:23:07.346 A:middle
can easily use it in your

01:23:07.346 --> 01:23:08.236 A:middle
applications.

01:23:09.596 --> 01:23:11.266 A:middle
We've also been working closely

01:23:11.266 --> 01:23:12.736 A:middle
with industry leaders in content

01:23:12.736 --> 01:23:14.116 A:middle
creation tools to provide native

01:23:14.116 --> 01:23:15.366 A:middle
support for USDZ.

01:23:16.406 --> 01:23:17.986 A:middle
And as you heard this morning,

01:23:17.986 --> 01:23:18.986 A:middle
Abhay said this morning that he

01:23:18.986 --> 01:23:20.726 A:middle
had a sneak peek for you about

01:23:20.726 --> 01:23:21.836 A:middle
what they're doing at Adobe.

01:23:21.836 --> 01:23:22.886 A:middle
So I'd like to invite him to the

01:23:22.886 --> 01:23:24.416 A:middle
stage to give that to you right

01:23:24.416 --> 01:23:24.666 A:middle
now.

01:23:25.226 --> 01:23:25.676 A:middle
Abhay?

01:23:26.516 --> 01:23:29.546 A:middle
[ Applause ]

01:23:30.046 --> 01:23:30.516 A:middle
&gt;&gt; Thanks, Mike.

01:23:32.996 --> 01:23:34.226 A:middle
It's great to be back onstage.

01:23:35.276 --> 01:23:36.186 A:middle
So as you heard in this

01:23:36.186 --> 01:23:38.116 A:middle
morning's keynote, Adobe's

01:23:38.116 --> 01:23:40.866 A:middle
Creative Cloud and ARKit will be

01:23:40.866 --> 01:23:42.806 A:middle
able to reimagine and blend the

01:23:42.806 --> 01:23:44.236 A:middle
digital and the physical worlds.

01:23:45.176 --> 01:23:47.496 A:middle
Now this will require a complete

01:23:47.496 --> 01:23:49.566 A:middle
reimagination of new design

01:23:49.566 --> 01:23:50.656 A:middle
interaction models.

01:23:52.086 --> 01:23:54.506 A:middle
So earlier today, we announced a

01:23:54.506 --> 01:23:56.546 A:middle
new system for creating AR

01:23:56.546 --> 01:23:58.986 A:middle
experiences called Project Aero

01:23:59.646 --> 01:24:02.286 A:middle
that infused ARKit with the

01:23:59.646 --> 01:24:02.286 A:middle
that infused ARKit with the

01:24:02.286 --> 01:24:03.916 A:middle
power of familiar Creative Cloud

01:24:03.916 --> 01:24:06.196 A:middle
applications like Photoshop and

01:24:06.196 --> 01:24:06.736 A:middle
Dimension.

01:24:07.646 --> 01:24:09.136 A:middle
So in fact, for the first time,

01:24:09.536 --> 01:24:11.816 A:middle
with Creative Cloud and iOS, you

01:24:11.816 --> 01:24:13.076 A:middle
will now have a

01:24:13.236 --> 01:24:14.606 A:middle
what-you-see-is-what-you-get

01:24:14.606 --> 01:24:16.066 A:middle
editing in AR.

01:24:16.066 --> 01:24:20.626 A:middle
So as you think about this --

01:24:20.626 --> 01:24:21.956 A:middle
and we looked at it -- ARKit is

01:24:21.956 --> 01:24:23.586 A:middle
absolutely the leading platform

01:24:23.586 --> 01:24:24.046 A:middle
for AR.

01:24:24.206 --> 01:24:26.236 A:middle
And so we're really excited to

01:24:26.236 --> 01:24:28.576 A:middle
partner closely with Apple as we

01:24:28.576 --> 01:24:31.216 A:middle
go jointly explore and push the

01:24:31.216 --> 01:24:32.936 A:middle
boundaries of immersive design.

01:24:33.526 --> 01:24:36.086 A:middle
But to fully realize the

01:24:36.086 --> 01:24:38.226 A:middle
potential of AR, you really have

01:24:38.226 --> 01:24:39.326 A:middle
to work across the entire

01:24:39.326 --> 01:24:40.066 A:middle
ecosystem.

01:24:40.416 --> 01:24:42.056 A:middle
And so today, we are also

01:24:42.056 --> 01:24:43.956 A:middle
announcing that Adobe will

01:24:43.956 --> 01:24:46.396 A:middle
natively support USDZ format,

01:24:46.646 --> 01:24:50.996 A:middle
along with Apple and Pixar

01:24:50.996 --> 01:24:51.063 A:middle
[applause].

01:24:51.063 --> 01:24:54.466 A:middle
Now AR is a unique medium in

01:24:54.466 --> 01:24:56.056 A:middle
that it allows interactive

01:24:56.106 --> 01:24:58.396 A:middle
content to go extend well beyond

01:24:58.396 --> 01:25:00.036 A:middle
the screen, where physical

01:24:58.396 --> 01:25:00.036 A:middle
the screen, where physical

01:25:00.036 --> 01:25:02.106 A:middle
spaces around us literally

01:25:02.106 --> 01:25:03.666 A:middle
become a creative canvas.

01:25:04.106 --> 01:25:05.506 A:middle
So let's take a look.

01:25:07.516 --> 01:26:23.516 A:middle
[ Music ]

01:25:07.516 --> 01:26:23.516 A:middle
[ Music ]

01:26:24.016 --> 01:26:25.046 A:middle
[ Applause ]

01:26:25.046 --> 01:26:25.596 A:middle
That's pretty cool.

01:26:29.816 --> 01:26:32.876 A:middle
So at its core, Project Aero is

01:26:32.926 --> 01:26:34.456 A:middle
part of Adobe's vision and

01:26:34.456 --> 01:26:36.686 A:middle
mission to truly democratize

01:26:36.836 --> 01:26:38.376 A:middle
creation of immersive content.

01:26:39.186 --> 01:26:40.266 A:middle
As you hopefully saw in that

01:26:40.266 --> 01:26:42.906 A:middle
video, creators and developers

01:26:42.906 --> 01:26:44.266 A:middle
will be able to collaborate

01:26:44.266 --> 01:26:46.566 A:middle
seamlessly to deliver a wide

01:26:46.566 --> 01:26:48.866 A:middle
range of AR experiences using

01:26:49.526 --> 01:26:50.906 A:middle
these tools.

01:26:51.056 --> 01:26:53.356 A:middle
Stay tuned for more updates on

01:26:53.356 --> 01:26:55.136 A:middle
Project Aero at our upcoming

01:26:55.136 --> 01:26:56.526 A:middle
conference, AdobeMax.

01:26:57.286 --> 01:26:58.576 A:middle
Personally, I couldn't be more

01:26:58.576 --> 01:26:59.806 A:middle
excited about our partnership

01:26:59.806 --> 01:27:02.246 A:middle
with Apple, as we go together

01:26:59.806 --> 01:27:02.246 A:middle
with Apple, as we go together

01:27:02.246 --> 01:27:04.476 A:middle
jointly explore the limits of

01:27:04.476 --> 01:27:06.556 A:middle
this emerging and powerful new

01:27:06.556 --> 01:27:07.616 A:middle
storytelling medium.

01:27:07.706 --> 01:27:08.476 A:middle
Thank you.

01:27:08.526 --> 01:27:08.976 A:middle
Back to you, Mike.

01:27:09.516 --> 01:27:12.166 A:middle
[ Applause ]

01:27:12.666 --> 01:27:13.226 A:middle
&gt;&gt; Thanks, Abhay.

01:27:14.546 --> 01:27:15.516 A:middle
Isn't that awesome?

01:27:15.736 --> 01:27:16.776 A:middle
Amazing stuff.

01:27:17.386 --> 01:27:20.096 A:middle
Of course, the foundation of AR

01:27:20.096 --> 01:27:21.316 A:middle
at Apple is ARKit.

01:27:21.966 --> 01:27:23.676 A:middle
With robust device position

01:27:23.676 --> 01:27:25.626 A:middle
localization, accurate lighting

01:27:25.626 --> 01:27:27.986 A:middle
and size estimation, ARKit has

01:27:27.986 --> 01:27:29.956 A:middle
made it easy to create AR

01:27:29.956 --> 01:27:30.606 A:middle
applications.

01:27:31.616 --> 01:27:32.946 A:middle
The iPhone X has provided

01:27:32.946 --> 01:27:34.616 A:middle
groundbreaking face tracking

01:27:34.806 --> 01:27:36.196 A:middle
that used to require custom

01:27:36.196 --> 01:27:36.746 A:middle
hardware.

01:27:38.116 --> 01:27:39.806 A:middle
After the initial release, we

01:27:39.806 --> 01:27:41.306 A:middle
quickly followed up with ARKit

01:27:41.306 --> 01:27:43.866 A:middle
1.5, adding 2D image triggers, a

01:27:43.866 --> 01:27:45.206 A:middle
high-resolution background

01:27:45.206 --> 01:27:46.856 A:middle
camera, and the ability to

01:27:46.856 --> 01:27:49.216 A:middle
suspend and resume tracking so

01:27:49.216 --> 01:27:50.096 A:middle
that you don't have to restart

01:27:50.096 --> 01:27:51.696 A:middle
an AR session if you get a phone

01:27:51.696 --> 01:27:52.006 A:middle
call.

01:27:52.746 --> 01:27:54.366 A:middle
Well, I'm incredibly excited to

01:27:54.366 --> 01:27:56.576 A:middle
tell you about our next big jump

01:27:56.576 --> 01:28:00.706 A:middle
forward, ARKit 2.

01:27:56.576 --> 01:28:00.706 A:middle
forward, ARKit 2.

01:28:00.706 --> 01:28:03.076 A:middle
ARKit 2 delivers a big set of

01:28:03.076 --> 01:28:06.116 A:middle
advances, including improved

01:28:06.116 --> 01:28:07.946 A:middle
face tracking, with a new

01:28:07.946 --> 01:28:11.106 A:middle
ability to track your gaze and

01:28:11.176 --> 01:28:11.826 A:middle
tongue.

01:28:12.386 --> 01:28:13.786 A:middle
These highly-requested features

01:28:13.786 --> 01:28:14.766 A:middle
allow you to take facial

01:28:14.766 --> 01:28:16.176 A:middle
animation to a new level of

01:28:16.176 --> 01:28:16.726 A:middle
realism.

01:28:17.566 --> 01:28:18.846 A:middle
Turns out that the first thing

01:28:18.846 --> 01:28:20.706 A:middle
kids do when they play with

01:28:20.706 --> 01:28:21.986 A:middle
animojis is stick their tongue

01:28:21.986 --> 01:28:22.226 A:middle
out.

01:28:22.226 --> 01:28:23.276 A:middle
And I think a lot of you do,

01:28:23.276 --> 01:28:23.536 A:middle
too.

01:28:23.536 --> 01:28:24.716 A:middle
That's why we had to put that in

01:28:24.716 --> 01:28:24.886 A:middle
there.

01:28:28.366 --> 01:28:29.956 A:middle
To more accurately integrate

01:28:29.956 --> 01:28:31.636 A:middle
objects into a scene, we've

01:28:31.636 --> 01:28:33.346 A:middle
added environment texturing.

01:28:33.726 --> 01:28:36.206 A:middle
ARKit creates textures based on

01:28:36.206 --> 01:28:37.986 A:middle
what the camera sees in the real

01:28:37.986 --> 01:28:40.116 A:middle
world -- notice that the globe

01:28:40.116 --> 01:28:41.346 A:middle
is reflecting the real picture

01:28:41.346 --> 01:28:42.466 A:middle
on the table below.

01:28:43.046 --> 01:28:44.966 A:middle
But what about what the camera

01:28:44.966 --> 01:28:45.706 A:middle
can't see?

01:28:46.346 --> 01:28:47.896 A:middle
While using machine learning, we

01:28:47.896 --> 01:28:49.286 A:middle
trained a neural network on

01:28:49.456 --> 01:28:50.646 A:middle
thousands of typical

01:28:50.646 --> 01:28:51.356 A:middle
environments.

01:28:51.786 --> 01:28:53.826 A:middle
And this enables ARKit to

01:28:53.826 --> 01:28:55.286 A:middle
hallucinate the rest of the

01:28:55.286 --> 01:28:55.876 A:middle
scene.

01:28:56.406 --> 01:28:57.336 A:middle
This means that you'll get

01:28:57.416 --> 01:28:58.906 A:middle
plausible reflections of things

01:28:58.906 --> 01:28:59.846 A:middle
like overhead lighting -- you

01:28:59.846 --> 01:29:01.026 A:middle
can see that in the globe --

01:28:59.846 --> 01:29:01.026 A:middle
can see that in the globe --

01:29:01.236 --> 01:29:02.676 A:middle
even though it's never seen the

01:29:02.676 --> 01:29:04.036 A:middle
lighting in the environment at

01:29:04.036 --> 01:29:04.346 A:middle
all.

01:29:06.706 --> 01:29:09.016 A:middle
We've extended the 2D image

01:29:09.016 --> 01:29:11.486 A:middle
detection to provide support for

01:29:11.486 --> 01:29:13.206 A:middle
those -- tracking those images

01:29:13.256 --> 01:29:14.446 A:middle
in three dimensions.

01:29:15.166 --> 01:29:17.246 A:middle
So you can now have 3D objects

01:29:17.306 --> 01:29:18.606 A:middle
that stick to images in the real

01:29:18.606 --> 01:29:19.996 A:middle
world when they're moved around

01:29:20.366 --> 01:29:23.876 A:middle
-- and not only in 2D, but also

01:29:24.236 --> 01:29:24.856 A:middle
in 3D.

01:29:27.516 --> 01:29:33.336 A:middle
[ Applause ]

01:29:33.836 --> 01:29:37.306 A:middle
ARKit can now detect 3D objects.

01:29:37.796 --> 01:29:39.896 A:middle
You can scan objects via an API,

01:29:40.426 --> 01:29:42.416 A:middle
or a simple developer tool we

01:29:42.416 --> 01:29:46.596 A:middle
provide, and then later, these

01:29:46.596 --> 01:29:48.606 A:middle
maps can be used to recognize

01:29:48.606 --> 01:29:49.786 A:middle
those objects and their

01:29:49.786 --> 01:29:51.756 A:middle
locations and trigger a

01:29:51.756 --> 01:29:53.286 A:middle
contextually-relevant AR

01:29:53.286 --> 01:29:53.976 A:middle
experience.

01:29:56.516 --> 01:29:59.206 A:middle
[ Applause ]

01:29:59.706 --> 01:30:01.566 A:middle
An incredibly important feature

01:29:59.706 --> 01:30:01.566 A:middle
An incredibly important feature

01:30:01.566 --> 01:30:03.576 A:middle
of ARKit 2 is support for

01:30:03.576 --> 01:30:04.936 A:middle
persistent experiences.

01:30:05.356 --> 01:30:06.356 A:middle
You can see here in the video

01:30:06.356 --> 01:30:07.866 A:middle
that we've mapped an environment

01:30:07.866 --> 01:30:09.386 A:middle
and then placed a 3D object.

01:30:10.276 --> 01:30:12.416 A:middle
This map can be saved and then

01:30:12.416 --> 01:30:14.196 A:middle
later used to recognize the

01:30:14.196 --> 01:30:16.066 A:middle
space and relocalize to that

01:30:16.066 --> 01:30:18.776 A:middle
same coordinate system -- and

01:30:18.806 --> 01:30:20.736 A:middle
not only on that device.

01:30:20.936 --> 01:30:22.206 A:middle
You can share these maps to

01:30:22.296 --> 01:30:23.856 A:middle
other devices to allow them to

01:30:23.856 --> 01:30:25.706 A:middle
have the exact same experience.

01:30:26.396 --> 01:30:27.936 A:middle
This makes it possible to create

01:30:27.936 --> 01:30:29.686 A:middle
apps that provide persistent

01:30:29.686 --> 01:30:31.586 A:middle
experiences you can go back to

01:30:31.586 --> 01:30:32.446 A:middle
again and again.

01:30:33.366 --> 01:30:34.836 A:middle
You could, for example, have an

01:30:34.836 --> 01:30:36.416 A:middle
augmented reality pinboard in

01:30:36.416 --> 01:30:37.836 A:middle
your home with pictures and

01:30:37.836 --> 01:30:38.266 A:middle
artwork.

01:30:38.856 --> 01:30:41.096 A:middle
And you can share these maps

01:30:41.096 --> 01:30:42.376 A:middle
without having to go to the

01:30:42.376 --> 01:30:42.726 A:middle
cloud.

01:30:43.186 --> 01:30:45.046 A:middle
These can be done peer-to-peer

01:30:45.226 --> 01:30:48.416 A:middle
locally on your devices.

01:30:49.206 --> 01:30:50.596 A:middle
One other thing that we've done

01:30:50.596 --> 01:30:51.916 A:middle
is we've allowed you to have the

01:30:51.916 --> 01:30:54.316 A:middle
ability to share these maps in

01:30:54.316 --> 01:30:55.006 A:middle
real time.

01:30:55.866 --> 01:30:57.596 A:middle
And this lets you create

01:30:57.926 --> 01:31:00.036 A:middle
multiplayer AR games.

01:30:57.926 --> 01:31:00.036 A:middle
multiplayer AR games.

01:31:00.746 --> 01:31:02.376 A:middle
So to experiment with this, we

01:31:02.376 --> 01:31:04.126 A:middle
created a new game called

01:31:04.126 --> 01:31:04.816 A:middle
SwiftShot.

01:31:05.226 --> 01:31:07.076 A:middle
And I'll show you the video that

01:31:07.076 --> 01:31:08.556 A:middle
-- of it that we did.

01:31:09.516 --> 01:31:45.186 A:middle
[ Music ]

01:31:45.686 --> 01:31:47.286 A:middle
So SwiftShot is a blast to play,

01:31:47.286 --> 01:31:48.546 A:middle
and we actually have it here at

01:31:48.546 --> 01:31:49.006 A:middle
the show.

01:31:49.006 --> 01:31:49.806 A:middle
If you haven't had a chance to

01:31:49.806 --> 01:31:51.416 A:middle
go by, we have an AR game area.

01:31:51.606 --> 01:31:53.636 A:middle
We wanted to share it with you,

01:31:53.636 --> 01:31:54.806 A:middle
so we've actually made the full

01:31:54.806 --> 01:31:56.396 A:middle
source code available for you to

01:31:56.396 --> 01:31:58.926 A:middle
download under an open license.

01:31:58.926 --> 01:32:00.496 A:middle
You can play with it and modify

01:31:58.926 --> 01:32:00.496 A:middle
You can play with it and modify

01:32:00.496 --> 01:32:01.256 A:middle
it as you like.

01:32:01.256 --> 01:32:02.056 A:middle
We can't wait to see the

01:32:02.056 --> 01:32:03.086 A:middle
creative things you'll do with

01:32:03.086 --> 01:32:03.646 A:middle
SwiftShot.

01:32:05.046 --> 01:32:08.376 A:middle
So that is ARKit 2, improved

01:32:08.376 --> 01:32:10.616 A:middle
face tracking, environment

01:32:10.616 --> 01:32:13.186 A:middle
texturing, image detection and

01:32:13.186 --> 01:32:15.696 A:middle
tracking, 3D object detection,

01:32:16.146 --> 01:32:18.566 A:middle
and persistent experiences as

01:32:18.566 --> 01:32:20.726 A:middle
well as multi-user experiences.

01:32:21.786 --> 01:32:23.926 A:middle
That combined with USDZ across

01:32:23.956 --> 01:32:26.106 A:middle
the operating system makes iOS

01:32:26.106 --> 01:32:28.766 A:middle
12 by far the most powerful

01:32:28.766 --> 01:32:29.926 A:middle
platform for AR.

01:32:30.326 --> 01:32:31.756 A:middle
And we're really excited to be

01:32:31.756 --> 01:32:33.216 A:middle
giving that to you today, and

01:32:33.216 --> 01:32:34.496 A:middle
can't wait to see what you'll do

01:32:34.496 --> 01:32:34.706 A:middle
with it.

01:32:35.426 --> 01:32:36.546 A:middle
So with that, I'll hand it back

01:32:36.546 --> 01:32:37.176 A:middle
to Sebastian.

01:32:37.416 --> 01:32:37.786 A:middle
Thank you.

01:32:38.516 --> 01:32:42.726 A:middle
[ Applause ]

01:32:43.226 --> 01:32:43.996 A:middle
&gt;&gt; Thank you, Mike.

01:32:45.156 --> 01:32:47.946 A:middle
Wow, I think we've seen a ton of

01:32:47.946 --> 01:32:49.556 A:middle
exciting new technologies today,

01:32:49.556 --> 01:32:50.636 A:middle
and I hope you're really,

01:32:50.636 --> 01:32:51.976 A:middle
really, really excited about

01:32:51.976 --> 01:32:52.216 A:middle
this.

01:32:53.076 --> 01:32:54.716 A:middle
We make it easy to leverage

01:32:54.716 --> 01:32:56.406 A:middle
machine learning, build great

01:32:56.406 --> 01:32:58.456 A:middle
new experiences with ARKit,

01:32:58.456 --> 01:32:59.666 A:middle
high-performance graphics with

01:32:59.716 --> 01:33:01.546 A:middle
Metal, a huge step forward on

01:32:59.716 --> 01:33:01.546 A:middle
Metal, a huge step forward on

01:33:01.546 --> 01:33:02.946 A:middle
the Mac with Dark Mode.

01:33:02.946 --> 01:33:04.156 A:middle
I know you all love this.

01:33:04.156 --> 01:33:05.916 A:middle
And it's all backed by great

01:33:05.916 --> 01:33:07.136 A:middle
advances in our development

01:33:07.136 --> 01:33:09.366 A:middle
tools that are really critical

01:33:09.366 --> 01:33:10.526 A:middle
to make the most of these

01:33:10.696 --> 01:33:12.236 A:middle
super-powerful technologies.

01:33:12.916 --> 01:33:15.026 A:middle
And we've also covered how we,

01:33:15.066 --> 01:33:17.156 A:middle
together, can focus on what's

01:33:17.156 --> 01:33:18.966 A:middle
most important to our users.

01:33:20.056 --> 01:33:21.286 A:middle
All these great technologies and

01:33:21.286 --> 01:33:23.216 A:middle
tools are available today as a

01:33:23.216 --> 01:33:25.296 A:middle
developer preview from the WWDC

01:33:25.376 --> 01:33:26.716 A:middle
attendee portal.

01:33:26.716 --> 01:33:27.786 A:middle
Who here has started downloading

01:33:27.786 --> 01:33:27.986 A:middle
them?

01:33:29.286 --> 01:33:29.826 A:middle
Few people?

01:33:29.826 --> 01:33:31.276 A:middle
Okay, you've got to hurry up.

01:33:31.526 --> 01:33:32.666 A:middle
Distribution is limited.

01:33:34.966 --> 01:33:36.556 A:middle
Please make sure to download it

01:33:36.556 --> 01:33:37.456 A:middle
right away.

01:33:37.816 --> 01:33:39.836 A:middle
And also, make the most of your

01:33:39.836 --> 01:33:40.146 A:middle
week.

01:33:40.146 --> 01:33:41.636 A:middle
There are more than 100 sessions

01:33:41.736 --> 01:33:42.906 A:middle
here at the conference that go

01:33:42.906 --> 01:33:44.636 A:middle
deep in all of these topics.

01:33:45.126 --> 01:33:46.336 A:middle
Really, really great sessions.

01:33:46.706 --> 01:33:48.106 A:middle
We also recommend that you make

01:33:48.106 --> 01:33:49.976 A:middle
good use of all of the labs that

01:33:49.976 --> 01:33:51.276 A:middle
we have, because you can get

01:33:51.276 --> 01:33:52.456 A:middle
help from the many Apple

01:33:52.456 --> 01:33:53.986 A:middle
engineers that are here onsite

01:33:54.266 --> 01:33:56.306 A:middle
to answer all of your questions.

01:33:57.206 --> 01:33:58.826 A:middle
So with that, I hope you have a

01:33:58.826 --> 01:33:59.906 A:middle
great conference, and I'm

01:33:59.906 --> 01:34:00.986 A:middle
looking forward to seeing you

01:33:59.906 --> 01:34:00.986 A:middle
looking forward to seeing you

01:34:00.986 --> 01:34:01.996 A:middle
around this week.

01:34:02.166 --> 01:34:02.586 A:middle
Thank you.

01:34:03.508 --> 01:34:05.508 A:middle
[ Applause ]
