WEBVTT

00:00:07.516 --> 00:00:16.500 A:middle
[ Music ]

00:00:19.296 --> 00:00:20.086 A:middle
&gt;&gt; Hi everyone.

00:00:20.226 --> 00:00:21.616 A:middle
My name is Jeremy and I'm an

00:00:21.616 --> 00:00:23.366 A:middle
engineer on the tvOS team.

00:00:23.866 --> 00:00:25.066 A:middle
Today I'm really excited to

00:00:25.066 --> 00:00:26.586 A:middle
speak with you about what's new

00:00:26.586 --> 00:00:28.436 A:middle
in TVMLKit that we've added in

00:00:28.436 --> 00:00:29.236 A:middle
tvOS 12.

00:00:29.776 --> 00:00:32.706 A:middle
For the uninitiated, TVMLKit is

00:00:32.706 --> 00:00:34.366 A:middle
Apple's high level framework for

00:00:34.366 --> 00:00:35.816 A:middle
quickly building content based

00:00:35.816 --> 00:00:37.506 A:middle
applications on tvOS.

00:00:38.016 --> 00:00:39.826 A:middle
Out of the box, it is compliant

00:00:39.826 --> 00:00:40.836 A:middle
with our human interface

00:00:40.836 --> 00:00:41.416 A:middle
guidelines.

00:00:41.766 --> 00:00:42.996 A:middle
So your applications look

00:00:42.996 --> 00:00:44.776 A:middle
beautiful and feel correct.

00:00:45.536 --> 00:00:47.406 A:middle
It uses JavaScript to drive

00:00:47.406 --> 00:00:49.526 A:middle
application logic and a special

00:00:49.526 --> 00:00:51.226 A:middle
XML based markup language which

00:00:51.226 --> 00:00:53.876 A:middle
you define that renders into

00:00:53.876 --> 00:00:55.326 A:middle
user interfaces on the screen.

00:00:57.226 --> 00:00:59.346 A:middle
In fact, some of the apps you're

00:00:59.346 --> 00:01:01.996 A:middle
familiar with and use today are

00:00:59.346 --> 00:01:01.996 A:middle
familiar with and use today are

00:01:01.996 --> 00:01:03.216 A:middle
built using TVMLKit.

00:01:04.146 --> 00:01:04.976 A:middle
Along with that, there are

00:01:04.976 --> 00:01:06.336 A:middle
thousands more in the app store

00:01:06.336 --> 00:01:07.046 A:middle
that you write.

00:01:09.006 --> 00:01:10.706 A:middle
So let's get started with the

00:01:10.706 --> 00:01:12.006 A:middle
enhancements we've made to

00:01:12.006 --> 00:01:14.046 A:middle
TVMLKit, beginning with three

00:01:14.306 --> 00:01:15.336 A:middle
things we want to talk about

00:01:15.336 --> 00:01:15.606 A:middle
today.

00:01:16.336 --> 00:01:18.176 A:middle
First, we have some enhancements

00:01:18.176 --> 00:01:20.006 A:middle
to Web Inspector that allow you

00:01:20.006 --> 00:01:21.186 A:middle
to further debug your

00:01:21.186 --> 00:01:22.816 A:middle
applications and introspect them

00:01:23.116 --> 00:01:24.446 A:middle
at a deeper level.

00:01:26.056 --> 00:01:27.476 A:middle
Since last year, we've added a

00:01:27.476 --> 00:01:28.716 A:middle
bunch of features and

00:01:28.716 --> 00:01:29.986 A:middle
enhancements to the framework

00:01:30.196 --> 00:01:31.306 A:middle
and I'm going to discuss three

00:01:31.306 --> 00:01:32.676 A:middle
of them with you today.

00:01:32.676 --> 00:01:34.936 A:middle
We're going to talk about new

00:01:34.936 --> 00:01:37.006 A:middle
Web Inspector enhancements for

00:01:37.006 --> 00:01:39.506 A:middle
better debugging, new data

00:01:39.506 --> 00:01:41.176 A:middle
binding constructs that are

00:01:41.176 --> 00:01:42.416 A:middle
added to make it more powerful,

00:01:43.026 --> 00:01:44.436 A:middle
and finally, a new way to

00:01:44.436 --> 00:01:45.716 A:middle
customize the playback

00:01:45.716 --> 00:01:47.196 A:middle
experience on TVMLKit.

00:01:47.786 --> 00:01:49.956 A:middle
Let's get started with Web

00:01:49.956 --> 00:01:50.446 A:middle
Inspector.

00:01:50.876 --> 00:01:53.156 A:middle
tvOS 11 introduced more support

00:01:53.156 --> 00:01:54.466 A:middle
for Web Inspector that allow

00:01:54.466 --> 00:01:56.156 A:middle
better introspection into your

00:01:56.156 --> 00:01:57.236 A:middle
TVMLKit apps.

00:01:57.966 --> 00:01:59.506 A:middle
Since then, we've enhanced this

00:01:59.506 --> 00:02:01.976 A:middle
support even further.

00:01:59.506 --> 00:02:01.976 A:middle
support even further.

00:02:02.476 --> 00:02:05.596 A:middle
In tvOS 11.3, in addition to

00:02:05.596 --> 00:02:06.996 A:middle
showing install event listeners

00:02:06.996 --> 00:02:08.616 A:middle
on an element, you can now

00:02:08.616 --> 00:02:09.886 A:middle
temporarily disable them.

00:02:10.985 --> 00:02:13.166 A:middle
This vastly helps with debugging

00:02:13.166 --> 00:02:14.456 A:middle
as you can now toggle the event

00:02:14.456 --> 00:02:16.166 A:middle
handlers off and on at whim.

00:02:20.436 --> 00:02:22.476 A:middle
In the network tab, joining at

00:02:22.476 --> 00:02:23.516 A:middle
[inaudible] in document

00:02:23.516 --> 00:02:25.416 A:middle
resources are image resources.

00:02:25.806 --> 00:02:27.206 A:middle
This allows you to see the

00:02:27.206 --> 00:02:29.336 A:middle
images that are being loaded as

00:02:29.336 --> 00:02:30.576 A:middle
well as information about how

00:02:30.576 --> 00:02:32.116 A:middle
long it took and where time was

00:02:32.116 --> 00:02:32.436 A:middle
spent.

00:02:32.946 --> 00:02:35.806 A:middle
If you are interested in seeing

00:02:35.806 --> 00:02:37.076 A:middle
the actual image that comes off

00:02:37.076 --> 00:02:38.646 A:middle
the wire, this is now also an

00:02:38.646 --> 00:02:39.676 A:middle
option you have at your

00:02:39.676 --> 00:02:40.236 A:middle
disposal.

00:02:40.746 --> 00:02:42.206 A:middle
However, please note that this

00:02:42.206 --> 00:02:43.386 A:middle
only works after you've

00:02:43.386 --> 00:02:45.206 A:middle
connected the Web Inspector.

00:02:45.806 --> 00:02:47.026 A:middle
It does not show what has

00:02:47.026 --> 00:02:47.876 A:middle
already been loaded.

00:02:49.636 --> 00:02:51.496 A:middle
Finally, my most favorite

00:02:51.496 --> 00:02:53.086 A:middle
feature of all, the inspect

00:02:53.086 --> 00:02:53.396 A:middle
button.

00:02:54.176 --> 00:02:55.596 A:middle
Clicking this will show you the

00:02:55.596 --> 00:02:56.916 A:middle
approximately element that

00:02:56.916 --> 00:02:58.026 A:middle
represents the view that's

00:02:58.026 --> 00:02:59.186 A:middle
currently in focus.

00:03:00.946 --> 00:03:02.576 A:middle
If your elementary is collapsed,

00:03:03.036 --> 00:03:05.156 A:middle
Web Inspector will expand it to

00:03:05.156 --> 00:03:06.876 A:middle
the exact element and highlight

00:03:06.876 --> 00:03:07.016 A:middle
it.

00:03:09.596 --> 00:03:11.966 A:middle
To use Web Inspector, either

00:03:11.966 --> 00:03:13.636 A:middle
download the latest version of

00:03:13.636 --> 00:03:15.616 A:middle
macOS and install it, or use

00:03:15.616 --> 00:03:16.966 A:middle
Safari technology preview.

00:03:17.796 --> 00:03:19.176 A:middle
More information about how to

00:03:19.176 --> 00:03:21.406 A:middle
use Web Inspector can be seen in

00:03:21.406 --> 00:03:23.296 A:middle
our talk given last year using

00:03:23.296 --> 00:03:24.876 A:middle
Web Inspector with tvOS apps.

00:03:28.516 --> 00:03:30.256 A:middle
With that, let's talk about data

00:03:30.256 --> 00:03:30.636 A:middle
binding.

00:03:33.696 --> 00:03:35.176 A:middle
And before we jump into the new

00:03:35.176 --> 00:03:36.646 A:middle
features of data binding itself,

00:03:36.766 --> 00:03:37.976 A:middle
let me give you an overview of

00:03:37.976 --> 00:03:38.566 A:middle
what it is.

00:03:39.236 --> 00:03:40.576 A:middle
Data binding helps you easily

00:03:40.576 --> 00:03:42.746 A:middle
transform your data to user

00:03:42.746 --> 00:03:44.346 A:middle
interface elements through

00:03:44.346 --> 00:03:45.766 A:middle
expressions in your template

00:03:45.766 --> 00:03:46.166 A:middle
markup.

00:03:47.356 --> 00:03:48.876 A:middle
This is really good because it

00:03:48.876 --> 00:03:50.706 A:middle
allows you to decouple your data

00:03:50.906 --> 00:03:52.066 A:middle
and your lot -- and your layout

00:03:52.066 --> 00:03:53.796 A:middle
logic as well as your

00:03:53.796 --> 00:03:55.116 A:middle
application logic itself.

00:03:57.526 --> 00:03:58.776 A:middle
Because of this, data bound

00:03:58.776 --> 00:04:00.126 A:middle
templates can reduce the amount

00:03:58.776 --> 00:04:00.126 A:middle
templates can reduce the amount

00:04:00.126 --> 00:04:01.366 A:middle
of JavaScript code you actually

00:04:01.366 --> 00:04:02.566 A:middle
have to write to convert your

00:04:02.566 --> 00:04:04.556 A:middle
data to TVML documents, since

00:04:04.556 --> 00:04:06.116 A:middle
the framework does this on your

00:04:06.776 --> 00:04:07.016 A:middle
behalf.

00:04:07.016 --> 00:04:08.566 A:middle
In fact, by authoring your

00:04:08.566 --> 00:04:10.646 A:middle
documents on your behalf, it is

00:04:10.646 --> 00:04:11.716 A:middle
able to do it in the most

00:04:11.716 --> 00:04:13.236 A:middle
performing way so you don't have

00:04:13.236 --> 00:04:14.666 A:middle
to worry about the right APIs to

00:04:14.666 --> 00:04:15.076 A:middle
use.

00:04:16.456 --> 00:04:17.926 A:middle
Let's look at a practical

00:04:17.926 --> 00:04:19.266 A:middle
example to explain this.

00:04:19.856 --> 00:04:21.026 A:middle
Say you want to generate a

00:04:21.026 --> 00:04:22.936 A:middle
banner with a title and a

00:04:22.936 --> 00:04:23.596 A:middle
description.

00:04:24.136 --> 00:04:25.316 A:middle
And this is how you would

00:04:25.386 --> 00:04:26.706 A:middle
typically do it without data

00:04:26.706 --> 00:04:28.546 A:middle
binding itself.

00:04:30.996 --> 00:04:32.386 A:middle
First, you will fetch the

00:04:32.386 --> 00:04:33.666 A:middle
relevant data that's supposed to

00:04:33.666 --> 00:04:35.146 A:middle
be shown to the user in this

00:04:35.146 --> 00:04:36.856 A:middle
case, a title and a description.

00:04:38.656 --> 00:04:40.596 A:middle
And upon fetching, you pass it

00:04:40.596 --> 00:04:42.406 A:middle
onto a part of the JavaScript

00:04:42.406 --> 00:04:43.666 A:middle
code you've already written that

00:04:43.666 --> 00:04:45.126 A:middle
processes this data and

00:04:45.126 --> 00:04:46.786 A:middle
generates the actual final

00:04:46.976 --> 00:04:47.766 A:middle
document itself.

00:04:49.306 --> 00:04:52.336 A:middle
Now, with data bindings, you can

00:04:52.336 --> 00:04:53.666 A:middle
take out JavaScript processing

00:04:53.666 --> 00:04:55.526 A:middle
step and provide binding

00:04:55.526 --> 00:04:57.206 A:middle
specifications in your template

00:04:57.206 --> 00:04:58.956 A:middle
itself, and TVMLKit will

00:04:58.956 --> 00:05:00.556 A:middle
populate the final document on

00:04:58.956 --> 00:05:00.556 A:middle
populate the final document on

00:05:00.556 --> 00:05:01.876 A:middle
your behalf as directed.

00:05:02.786 --> 00:05:04.616 A:middle
Effectively, your application

00:05:04.616 --> 00:05:05.676 A:middle
just needs to worry about

00:05:05.676 --> 00:05:08.186 A:middle
fetching and massaging data, and

00:05:08.186 --> 00:05:09.186 A:middle
not worry about dom [phonetic]

00:05:09.186 --> 00:05:09.866 A:middle
editing at all.

00:05:11.076 --> 00:05:12.316 A:middle
In a nutshell, that's how data

00:05:12.316 --> 00:05:13.936 A:middle
binding works and helps reduce

00:05:13.936 --> 00:05:14.906 A:middle
the amount of code you write.

00:05:17.516 --> 00:05:19.336 A:middle
Last year, we introduced the

00:05:19.336 --> 00:05:20.626 A:middle
concept of data binding with

00:05:20.626 --> 00:05:22.356 A:middle
some core concepts that include

00:05:22.636 --> 00:05:23.896 A:middle
binding of attributes of an

00:05:23.896 --> 00:05:25.896 A:middle
element, binding the text

00:05:25.896 --> 00:05:28.146 A:middle
content of an element, and of

00:05:28.146 --> 00:05:29.516 A:middle
course, binding items of a

00:05:29.516 --> 00:05:31.546 A:middle
section in either a shelf, grid,

00:05:31.816 --> 00:05:32.456 A:middle
or list.

00:05:33.266 --> 00:05:35.016 A:middle
Let's quickly recap on these

00:05:35.016 --> 00:05:36.796 A:middle
concepts with another example.

00:05:39.756 --> 00:05:40.946 A:middle
The corresponding data bound

00:05:40.946 --> 00:05:42.316 A:middle
template representation of this

00:05:42.316 --> 00:05:43.666 A:middle
image element would contain a

00:05:43.666 --> 00:05:45.046 A:middle
binding expression with the 'at'

00:05:45.046 --> 00:05:46.336 A:middle
symbol, followed by the

00:05:46.336 --> 00:05:47.796 A:middle
attribute name and the property

00:05:47.796 --> 00:05:49.806 A:middle
you want to bind it to.

00:05:50.236 --> 00:05:52.466 A:middle
Next, let's seek the example of

00:05:52.466 --> 00:05:54.076 A:middle
generating text content of an

00:05:54.076 --> 00:05:54.456 A:middle
element.

00:05:55.946 --> 00:05:57.406 A:middle
Like in this case, a title

00:05:57.406 --> 00:05:58.856 A:middle
element that has corresponding

00:05:58.856 --> 00:06:00.486 A:middle
data of what it should actually

00:05:58.856 --> 00:06:00.486 A:middle
data of what it should actually

00:06:00.486 --> 00:06:01.126 A:middle
be filled with.

00:06:03.356 --> 00:06:04.646 A:middle
The data bound template

00:06:04.646 --> 00:06:05.976 A:middle
representation for this title

00:06:05.976 --> 00:06:07.386 A:middle
element will contain a text

00:06:07.386 --> 00:06:09.216 A:middle
content binding and the property

00:06:09.216 --> 00:06:09.836 A:middle
it maps to.

00:06:13.186 --> 00:06:14.386 A:middle
Finally let's talk a little bit

00:06:14.386 --> 00:06:15.376 A:middle
about items binding.

00:06:15.836 --> 00:06:17.356 A:middle
It is a slightly different

00:06:17.356 --> 00:06:19.256 A:middle
binding and involves a group of

00:06:19.256 --> 00:06:20.886 A:middle
data pieces you want to show.

00:06:21.586 --> 00:06:23.156 A:middle
It also only works with sections

00:06:23.156 --> 00:06:24.696 A:middle
on a shelf, list, or grid.

00:06:26.656 --> 00:06:27.796 A:middle
In this example, we have some

00:06:27.796 --> 00:06:30.146 A:middle
data with the tree list items as

00:06:30.146 --> 00:06:30.736 A:middle
an array.

00:06:31.236 --> 00:06:32.636 A:middle
And the final representation

00:06:32.636 --> 00:06:34.836 A:middle
should be a section of tree list

00:06:34.836 --> 00:06:35.656 A:middle
item lockups.

00:06:37.246 --> 00:06:38.416 A:middle
The corresponding data bound

00:06:38.416 --> 00:06:39.586 A:middle
template for this section will

00:06:39.586 --> 00:06:41.696 A:middle
contain two things; an item's

00:06:41.696 --> 00:06:43.366 A:middle
binding and the property it maps

00:06:43.366 --> 00:06:46.336 A:middle
to, and also a prototype to

00:06:46.336 --> 00:06:48.016 A:middle
convert each data object

00:06:48.136 --> 00:06:49.006 A:middle
contained in the array.

00:06:49.636 --> 00:06:51.296 A:middle
In this case, it would be a data

00:06:51.296 --> 00:06:52.826 A:middle
bound template representation of

00:06:52.826 --> 00:06:53.836 A:middle
a list item lockup.

00:06:55.976 --> 00:06:57.236 A:middle
So that's the tree binding

00:06:57.236 --> 00:06:58.666 A:middle
constructs we've introduced in

00:06:58.666 --> 00:06:59.556 A:middle
tvOS 11.

00:06:59.736 --> 00:07:01.366 A:middle
For more information, please

00:06:59.736 --> 00:07:01.366 A:middle
For more information, please

00:07:01.366 --> 00:07:02.736 A:middle
look at our talk, Advances in

00:07:02.736 --> 00:07:05.116 A:middle
TVMLKit from last year's WWDC.

00:07:08.246 --> 00:07:10.706 A:middle
This year, we've extended that

00:07:10.706 --> 00:07:11.436 A:middle
vocabulary.

00:07:11.996 --> 00:07:13.366 A:middle
To begin, we've added a more

00:07:13.366 --> 00:07:14.896 A:middle
generic way of binding child

00:07:14.896 --> 00:07:17.076 A:middle
elements of an element using the

00:07:17.076 --> 00:07:17.876 A:middle
children binding.

00:07:19.406 --> 00:07:20.986 A:middle
And to help better organize your

00:07:20.986 --> 00:07:22.526 A:middle
DOM, we've added a couple of

00:07:22.526 --> 00:07:24.186 A:middle
special elements, namely

00:07:24.186 --> 00:07:25.276 A:middle
fragment and rules.

00:07:25.836 --> 00:07:27.446 A:middle
We'll go into this in detail,

00:07:27.446 --> 00:07:29.076 A:middle
starting with children binding.

00:07:32.246 --> 00:07:33.526 A:middle
Children binding is a more

00:07:33.526 --> 00:07:35.106 A:middle
generic form of items binding.

00:07:35.996 --> 00:07:37.966 A:middle
Items binding is optimized for

00:07:37.966 --> 00:07:39.936 A:middle
use cases where you have a

00:07:39.936 --> 00:07:42.046 A:middle
section of a shelf, grid, or

00:07:42.276 --> 00:07:44.316 A:middle
list in order to work

00:07:44.316 --> 00:07:45.486 A:middle
efficiently with large data

00:07:45.486 --> 00:07:45.836 A:middle
sets.

00:07:46.826 --> 00:07:48.146 A:middle
They can be used outside these

00:07:48.146 --> 00:07:48.706 A:middle
elements.

00:07:49.686 --> 00:07:51.046 A:middle
For everything else, use

00:07:51.046 --> 00:07:51.766 A:middle
children's binding.

00:07:54.116 --> 00:07:55.436 A:middle
And it's because of a very

00:07:55.436 --> 00:07:56.136 A:middle
simple reason.

00:07:56.206 --> 00:07:57.976 A:middle
It works by generating children

00:07:57.976 --> 00:07:59.736 A:middle
of a target element itself.

00:08:02.356 --> 00:08:03.946 A:middle
And it behaves the same way as

00:08:03.946 --> 00:08:04.986 A:middle
items binding does.

00:08:05.566 --> 00:08:06.686 A:middle
You require the use of

00:08:06.686 --> 00:08:09.086 A:middle
prototypes to define the

00:08:09.186 --> 00:08:10.356 A:middle
elements that data should be

00:08:10.356 --> 00:08:13.526 A:middle
converted into and this will be

00:08:13.526 --> 00:08:15.536 A:middle
used as a template when

00:08:15.536 --> 00:08:16.976 A:middle
generating the final DOM itself.

00:08:20.346 --> 00:08:21.596 A:middle
Let's take an example to explain

00:08:21.596 --> 00:08:22.286 A:middle
how this works.

00:08:23.256 --> 00:08:24.766 A:middle
I am going back to the same

00:08:24.766 --> 00:08:26.536 A:middle
example of tree items in an

00:08:26.536 --> 00:08:26.916 A:middle
array.

00:08:27.536 --> 00:08:28.916 A:middle
We have this very same piece of

00:08:28.916 --> 00:08:30.736 A:middle
data but in this particular

00:08:30.736 --> 00:08:32.546 A:middle
situation, we have three

00:08:32.546 --> 00:08:33.655 A:middle
different menu items.

00:08:34.346 --> 00:08:36.086 A:middle
And this would be used in a menu

00:08:36.086 --> 00:08:36.326 A:middle
bar.

00:08:37.676 --> 00:08:39.246 A:middle
This is the final representation

00:08:39.246 --> 00:08:40.466 A:middle
we expect to see.

00:08:40.836 --> 00:08:42.796 A:middle
Basically a menu bar tree, menu

00:08:42.796 --> 00:08:43.635 A:middle
bar items.

00:08:46.026 --> 00:08:47.846 A:middle
And this is a very simple way to

00:08:47.846 --> 00:08:50.876 A:middle
specify the template for it.

00:08:50.876 --> 00:08:52.686 A:middle
As you can see, it's similar to

00:08:52.686 --> 00:08:54.236 A:middle
how you would do items binding.

00:08:54.756 --> 00:08:56.196 A:middle
It has prototypes that's used to

00:08:56.196 --> 00:08:58.386 A:middle
map data to elements and it has

00:08:58.386 --> 00:08:59.516 A:middle
a binding expression.

00:09:00.526 --> 00:09:01.616 A:middle
The only difference is that the

00:09:01.616 --> 00:09:03.186 A:middle
element is expressed on

00:09:03.416 --> 00:09:04.416 A:middle
[inaudible] section.

00:09:05.036 --> 00:09:06.546 A:middle
Children binding works with any

00:09:06.716 --> 00:09:07.066 A:middle
element.

00:09:10.166 --> 00:09:11.636 A:middle
Now this works really well as

00:09:11.636 --> 00:09:13.196 A:middle
long as you want to generate all

00:09:13.196 --> 00:09:14.716 A:middle
the child elements itself.

00:09:15.456 --> 00:09:16.656 A:middle
There might be cases where you

00:09:16.656 --> 00:09:18.326 A:middle
want to only generate some of

00:09:18.326 --> 00:09:19.016 A:middle
those children.

00:09:19.146 --> 00:09:20.996 A:middle
Take, for example, an auto

00:09:20.996 --> 00:09:22.886 A:middle
streaming app with a now playing

00:09:22.886 --> 00:09:23.476 A:middle
menu item.

00:09:24.186 --> 00:09:25.406 A:middle
The now playing menu item is a

00:09:25.406 --> 00:09:27.386 A:middle
special menu item that should

00:09:27.386 --> 00:09:29.686 A:middle
always be in the menu bar but

00:09:29.686 --> 00:09:32.016 A:middle
would only appear if background

00:09:32.016 --> 00:09:33.896 A:middle
audio is currently playing.

00:09:36.716 --> 00:09:38.376 A:middle
However in this case, we still

00:09:38.376 --> 00:09:39.556 A:middle
want the menu bar items to be

00:09:39.556 --> 00:09:40.186 A:middle
data bound.

00:09:40.986 --> 00:09:42.996 A:middle
In order for this work, we need

00:09:42.996 --> 00:09:44.386 A:middle
to compartmentalize the data

00:09:44.386 --> 00:09:46.326 A:middle
driven and non-data driven parts

00:09:46.326 --> 00:09:47.006 A:middle
of the menu bar.

00:09:47.626 --> 00:09:49.136 A:middle
And that's where fragments comes

00:09:49.136 --> 00:09:51.776 A:middle
into play.

00:09:51.966 --> 00:09:52.946 A:middle
So what are fragments?

00:09:54.376 --> 00:09:56.066 A:middle
Fragments are invisible elements

00:09:56.216 --> 00:09:57.436 A:middle
that the renderer doesn't see

00:09:58.216 --> 00:09:59.746 A:middle
and it helps you organize your

00:09:59.746 --> 00:10:00.056 A:middle
DOM.

00:09:59.746 --> 00:10:00.056 A:middle
DOM.

00:10:01.366 --> 00:10:02.796 A:middle
But what's special about

00:10:02.796 --> 00:10:04.666 A:middle
fragments are that its children

00:10:04.756 --> 00:10:05.346 A:middle
are visible.

00:10:08.176 --> 00:10:10.586 A:middle
And because it is an element and

00:10:10.586 --> 00:10:12.086 A:middle
children binding works with any

00:10:12.086 --> 00:10:14.526 A:middle
element, the fragments itself

00:10:14.526 --> 00:10:15.816 A:middle
works with children binding.

00:10:18.576 --> 00:10:19.926 A:middle
So let's go back to our data in

00:10:19.926 --> 00:10:21.486 A:middle
the final form we want and we

00:10:21.486 --> 00:10:22.696 A:middle
have something like this.

00:10:23.126 --> 00:10:24.626 A:middle
You have the menu bar items.

00:10:25.436 --> 00:10:27.046 A:middle
Nice to encapsulate in a

00:10:27.046 --> 00:10:29.336 A:middle
fragment and this is great

00:10:29.336 --> 00:10:30.406 A:middle
because it allows us to do

00:10:30.406 --> 00:10:31.676 A:middle
children binding like so.

00:10:34.806 --> 00:10:36.896 A:middle
Now all we have done is moved

00:10:36.896 --> 00:10:38.456 A:middle
the data around [inaudible] into

00:10:38.456 --> 00:10:39.986 A:middle
fragment while keeping the menu

00:10:39.986 --> 00:10:41.766 A:middle
bar intact with the now playing

00:10:41.766 --> 00:10:42.356 A:middle
menu item.

00:10:42.656 --> 00:10:44.336 A:middle
And because the renderer only

00:10:44.336 --> 00:10:45.756 A:middle
sees the children of the

00:10:45.756 --> 00:10:48.076 A:middle
fragment, this still renders as

00:10:48.076 --> 00:10:49.536 A:middle
a properly formed menu bar.

00:10:52.576 --> 00:10:53.946 A:middle
On the very subject of data

00:10:53.946 --> 00:10:56.416 A:middle
itself, that you can use to map

00:10:56.536 --> 00:10:58.496 A:middle
to user interface elements, this

00:10:58.496 --> 00:11:00.376 A:middle
is another likely scenario where

00:10:58.496 --> 00:11:00.376 A:middle
is another likely scenario where

00:11:00.376 --> 00:11:02.406 A:middle
you have data that some do not

00:11:02.406 --> 00:11:04.196 A:middle
change, and some change all the

00:11:04.196 --> 00:11:04.516 A:middle
time.

00:11:05.606 --> 00:11:07.296 A:middle
For example in this particular

00:11:07.296 --> 00:11:10.186 A:middle
piece of data itself, it is for

00:11:10.186 --> 00:11:12.366 A:middle
a video that has a poster image,

00:11:12.496 --> 00:11:14.906 A:middle
a title, and a playback

00:11:14.906 --> 00:11:15.496 A:middle
progress.

00:11:17.726 --> 00:11:19.316 A:middle
In some situations, we want to

00:11:19.316 --> 00:11:21.236 A:middle
show different user interfaces

00:11:21.236 --> 00:11:22.356 A:middle
based on that information

00:11:22.356 --> 00:11:22.716 A:middle
itself.

00:11:23.176 --> 00:11:25.576 A:middle
In the case where playback

00:11:25.576 --> 00:11:27.596 A:middle
progress hasn't started, it's

00:11:27.596 --> 00:11:29.796 A:middle
naturally zero and we are

00:11:29.796 --> 00:11:31.596 A:middle
interested in showing the poster

00:11:31.596 --> 00:11:33.836 A:middle
image and the title for the

00:11:33.836 --> 00:11:34.576 A:middle
video itself.

00:11:36.086 --> 00:11:37.766 A:middle
But when we start watching the

00:11:37.766 --> 00:11:39.326 A:middle
video, progress will naturally

00:11:39.326 --> 00:11:40.226 A:middle
be greater than zero.

00:11:41.126 --> 00:11:42.256 A:middle
For that, we want to show the

00:11:42.256 --> 00:11:43.606 A:middle
same thing that never change,

00:11:44.526 --> 00:11:45.836 A:middle
the poster image and its title.

00:11:47.076 --> 00:11:48.586 A:middle
However to make things obvious

00:11:48.586 --> 00:11:50.736 A:middle
this video's being played back,

00:11:51.376 --> 00:11:52.626 A:middle
we want to show a progress bar

00:11:52.626 --> 00:11:53.506 A:middle
that's filled through the

00:11:53.506 --> 00:11:55.216 A:middle
playback progress' percentage

00:11:55.216 --> 00:11:55.646 A:middle
itself.

00:11:57.546 --> 00:11:58.886 A:middle
In the very same vein, we have

00:11:58.886 --> 00:12:00.526 A:middle
now two use cases where data is

00:11:58.886 --> 00:12:00.526 A:middle
now two use cases where data is

00:12:00.526 --> 00:12:02.556 A:middle
different and we also want to

00:12:02.556 --> 00:12:04.016 A:middle
show two different looks of what

00:12:04.016 --> 00:12:04.416 A:middle
it is.

00:12:05.146 --> 00:12:06.756 A:middle
In the first case, we -- all we

00:12:06.756 --> 00:12:08.366 A:middle
have is an image and a title in

00:12:08.366 --> 00:12:08.816 A:middle
the lock up.

00:12:09.926 --> 00:12:11.556 A:middle
And in the second case, we have

00:12:11.556 --> 00:12:13.256 A:middle
the addition of an overlay and a

00:12:13.256 --> 00:12:13.896 A:middle
progress bar.

00:12:17.046 --> 00:12:17.916 A:middle
Typically you would have

00:12:17.916 --> 00:12:19.456 A:middle
application logic that outputs

00:12:19.496 --> 00:12:21.126 A:middle
different x amount based on that

00:12:21.126 --> 00:12:24.016 A:middle
data itself but with rules, you

00:12:24.016 --> 00:12:25.356 A:middle
can have a single statically

00:12:25.356 --> 00:12:27.076 A:middle
defined template that would give

00:12:27.076 --> 00:12:28.606 A:middle
you either representations of

00:12:28.636 --> 00:12:29.526 A:middle
the final document.

00:12:31.126 --> 00:12:32.096 A:middle
So what are the rules?

00:12:32.446 --> 00:12:35.236 A:middle
Well, rules used data states to

00:12:35.236 --> 00:12:38.186 A:middle
redefine your final document

00:12:38.416 --> 00:12:40.166 A:middle
which, in turns, refines your

00:12:40.666 --> 00:12:40.756 A:middle
UI.

00:12:41.806 --> 00:12:43.296 A:middle
It is an invisible element.

00:12:43.516 --> 00:12:44.746 A:middle
So the renderer doesn't see it

00:12:45.246 --> 00:12:46.736 A:middle
but it affects how the document

00:12:46.736 --> 00:12:47.236 A:middle
is authored.

00:12:49.296 --> 00:12:50.716 A:middle
Any operations within those

00:12:50.716 --> 00:12:53.616 A:middle
rules happen on sibling elements

00:12:53.726 --> 00:12:55.476 A:middle
that the rules are a part of.

00:12:56.476 --> 00:12:57.756 A:middle
And the best way to show this to

00:12:57.756 --> 00:12:59.396 A:middle
you is in another example of how

00:12:59.396 --> 00:13:00.286 A:middle
this can be setup.

00:12:59.396 --> 00:13:00.286 A:middle
this can be setup.

00:13:02.836 --> 00:13:04.286 A:middle
So let's look at the rules that

00:13:04.476 --> 00:13:06.756 A:middle
we would use to structure the

00:13:06.756 --> 00:13:08.106 A:middle
very prototype that we want --

00:13:08.106 --> 00:13:10.036 A:middle
that we've shown as an example.

00:13:10.536 --> 00:13:11.976 A:middle
We will start by defining the

00:13:11.976 --> 00:13:13.386 A:middle
prototype as the lowest common

00:13:13.386 --> 00:13:15.116 A:middle
denominator of what our user

00:13:15.116 --> 00:13:16.446 A:middle
interface should look like.

00:13:17.276 --> 00:13:18.916 A:middle
And in this case, we have an

00:13:18.916 --> 00:13:20.016 A:middle
image and a title.

00:13:21.716 --> 00:13:23.196 A:middle
However, you would notice that

00:13:23.196 --> 00:13:25.216 A:middle
we also have a place holder for

00:13:25.216 --> 00:13:25.896 A:middle
the progress bar.

00:13:26.566 --> 00:13:28.056 A:middle
Placeholders are also special

00:13:28.056 --> 00:13:29.426 A:middle
elements that are invisible to

00:13:29.426 --> 00:13:31.096 A:middle
the renderer and in this case,

00:13:31.366 --> 00:13:32.876 A:middle
would be used by the rules as a

00:13:32.876 --> 00:13:34.686 A:middle
target for replacement when data

00:13:34.686 --> 00:13:35.426 A:middle
states match.

00:13:36.886 --> 00:13:39.026 A:middle
Now let's fill in our rules.

00:13:40.136 --> 00:13:41.466 A:middle
A group of rules that act on

00:13:41.466 --> 00:13:42.466 A:middle
sibling elements are

00:13:42.466 --> 00:13:43.976 A:middle
encapsulated in the rules tag.

00:13:47.606 --> 00:13:48.926 A:middle
Individual rules that match a

00:13:48.926 --> 00:13:51.426 A:middle
data state are encapsulated as

00:13:51.516 --> 00:13:54.186 A:middle
specialized elements, and

00:13:54.606 --> 00:13:56.776 A:middle
specialized elements become

00:13:56.806 --> 00:13:58.576 A:middle
active when it matches certain

00:13:58.576 --> 00:13:59.166 A:middle
data states.

00:14:00.396 --> 00:14:01.696 A:middle
And the way that that's matched

00:14:01.826 --> 00:14:03.766 A:middle
is based on a query in the state

00:14:03.766 --> 00:14:04.526 A:middle
attribute itself.

00:14:07.266 --> 00:14:09.186 A:middle
When data state matches, the

00:14:09.186 --> 00:14:10.876 A:middle
children of the special element

00:14:10.876 --> 00:14:12.696 A:middle
-- specialized element are the

00:14:12.696 --> 00:14:14.346 A:middle
list of operations that act on

00:14:14.346 --> 00:14:16.146 A:middle
the sibling elements of rules.

00:14:16.556 --> 00:14:18.606 A:middle
In this case, we want the

00:14:18.606 --> 00:14:19.996 A:middle
placeholder to be replaced with

00:14:19.996 --> 00:14:21.456 A:middle
an overlay element and its

00:14:21.456 --> 00:14:21.846 A:middle
children.

00:14:25.956 --> 00:14:27.666 A:middle
TVMLKit matches the elements to

00:14:27.666 --> 00:14:29.106 A:middle
be replaced by looking at the

00:14:29.106 --> 00:14:30.936 A:middle
tag attribute on any element.

00:14:31.676 --> 00:14:33.456 A:middle
It effectively does replacement

00:14:33.676 --> 00:14:35.356 A:middle
by first matching on that tag

00:14:35.776 --> 00:14:37.046 A:middle
and then comparing the element

00:14:37.046 --> 00:14:37.256 A:middle
name.

00:14:38.146 --> 00:14:39.236 A:middle
If the element name is

00:14:39.236 --> 00:14:40.726 A:middle
different, it would replace that

00:14:40.726 --> 00:14:42.786 A:middle
element hole and in this case,

00:14:43.086 --> 00:14:44.776 A:middle
placeholder becomes an overlay.

00:14:45.736 --> 00:14:47.236 A:middle
However, if the element name

00:14:47.236 --> 00:14:49.046 A:middle
matches, whatever that's new

00:14:49.386 --> 00:14:50.576 A:middle
would be appended to what's

00:14:50.576 --> 00:14:51.476 A:middle
already existing.

00:14:53.426 --> 00:14:55.586 A:middle
And so we have a single template

00:14:55.586 --> 00:14:56.986 A:middle
with rules that will generate

00:14:56.986 --> 00:14:58.806 A:middle
two different output based on

00:14:58.806 --> 00:14:59.946 A:middle
the state of the data that's

00:14:59.946 --> 00:15:00.416 A:middle
provided.

00:14:59.946 --> 00:15:00.416 A:middle
provided.

00:15:02.136 --> 00:15:04.016 A:middle
Effectively you can move your

00:15:04.016 --> 00:15:05.606 A:middle
application logic to deal with

00:15:05.606 --> 00:15:07.276 A:middle
how things are displayed into a

00:15:07.276 --> 00:15:08.916 A:middle
statically specific template

00:15:09.596 --> 00:15:11.216 A:middle
that exists within the context

00:15:11.586 --> 00:15:12.926 A:middle
of elements that's transformed

00:15:13.106 --> 00:15:14.196 A:middle
into user interfaces.

00:15:15.556 --> 00:15:16.846 A:middle
Now let's switch gears and talk

00:15:16.876 --> 00:15:18.506 A:middle
about playback in TVMLKit.

00:15:19.296 --> 00:15:20.896 A:middle
TVMLKit has long provided

00:15:20.966 --> 00:15:22.486 A:middle
extension points where you need

00:15:22.486 --> 00:15:24.226 A:middle
more customization of your user

00:15:24.226 --> 00:15:26.326 A:middle
interfaces, be it individual

00:15:26.326 --> 00:15:28.226 A:middle
views or even whole templates.

00:15:29.126 --> 00:15:31.276 A:middle
In tvOS 12, we are extending

00:15:31.276 --> 00:15:32.586 A:middle
this to our playback pipeline,

00:15:32.976 --> 00:15:34.586 A:middle
giving you control over playback

00:15:34.726 --> 00:15:36.586 A:middle
as well as its associated user

00:15:36.766 --> 00:15:37.416 A:middle
experience.

00:15:41.046 --> 00:15:43.976 A:middle
This experience works with all

00:15:44.046 --> 00:15:45.176 A:middle
the different playback styles we

00:15:45.176 --> 00:15:47.786 A:middle
have, whether it is embedded or

00:15:47.866 --> 00:15:48.656 A:middle
in a full screen.

00:15:51.676 --> 00:15:53.106 A:middle
You do this by providing a

00:15:53.106 --> 00:15:55.006 A:middle
TVPlayer object and its

00:15:55.006 --> 00:15:56.936 A:middle
associated user interface as a

00:15:56.936 --> 00:15:57.916 A:middle
UIViewController.

00:16:01.156 --> 00:16:03.016 A:middle
These have close analogues to

00:16:03.016 --> 00:16:04.486 A:middle
our JavaScript APIs.

00:16:04.626 --> 00:16:06.256 A:middle
So that would be less confusion

00:16:06.406 --> 00:16:07.696 A:middle
in talking to your JavaScript

00:16:07.696 --> 00:16:08.276 A:middle
developers.

00:16:09.556 --> 00:16:11.856 A:middle
And finally there's a limited

00:16:11.856 --> 00:16:13.066 A:middle
JavaScript Bridge that's

00:16:13.066 --> 00:16:13.736 A:middle
exposed.

00:16:13.736 --> 00:16:15.206 A:middle
It allows communications between

00:16:15.336 --> 00:16:17.456 A:middle
your native code and JavaScript

00:16:17.456 --> 00:16:17.866 A:middle
itself.

00:16:20.536 --> 00:16:23.916 A:middle
Let's talk about TVPlayer and

00:16:23.916 --> 00:16:25.736 A:middle
that's the base where you can

00:16:25.736 --> 00:16:26.926 A:middle
get your customized playback

00:16:26.926 --> 00:16:27.766 A:middle
experience working.

00:16:28.996 --> 00:16:32.466 A:middle
TVPlayer is a public AVPlayer

00:16:32.466 --> 00:16:33.886 A:middle
adaptor to the Playback

00:16:33.886 --> 00:16:34.336 A:middle
Pipeline.

00:16:35.396 --> 00:16:36.916 A:middle
What this means is that TVPlayer

00:16:36.916 --> 00:16:38.506 A:middle
effectively translates regular

00:16:38.506 --> 00:16:40.506 A:middle
AVPlayer callbacks into what

00:16:40.506 --> 00:16:41.746 A:middle
JavaScript expects.

00:16:45.316 --> 00:16:47.306 A:middle
TVPlayer is also the object that

00:16:47.306 --> 00:16:48.726 A:middle
you can use to dispatch custom

00:16:48.726 --> 00:16:51.276 A:middle
events to JavaScript and by

00:16:51.276 --> 00:16:52.526 A:middle
default, it already handles

00:16:52.576 --> 00:16:54.806 A:middle
everything that AVPlayer has as

00:16:54.806 --> 00:16:55.536 A:middle
playback events.

00:16:55.656 --> 00:16:57.586 A:middle
So anything extra is on you to

00:16:57.586 --> 00:16:57.976 A:middle
dispatch.

00:17:02.046 --> 00:17:03.616 A:middle
Changes that JavaScript makes to

00:17:03.616 --> 00:17:05.306 A:middle
the player are KVO observable.

00:17:05.496 --> 00:17:06.656 A:middle
So you know when things are

00:17:06.656 --> 00:17:07.695 A:middle
changed by your JavaScript

00:17:07.695 --> 00:17:08.306 A:middle
developers.

00:17:09.705 --> 00:17:11.526 A:middle
Finally the TVPlayer object

00:17:11.806 --> 00:17:13.506 A:middle
plays media in a sequential

00:17:13.506 --> 00:17:15.546 A:middle
fashion from the very first

00:17:15.546 --> 00:17:16.746 A:middle
[inaudible] item all the way to

00:17:16.746 --> 00:17:17.976 A:middle
the very last in its playlist.

00:17:20.945 --> 00:17:22.175 A:middle
Whenever a player is needed,

00:17:22.576 --> 00:17:24.256 A:middle
TVApplicationControllerDelegate

00:17:24.256 --> 00:17:25.945 A:middle
will ask for a TVPlayer and you

00:17:25.945 --> 00:17:27.506 A:middle
will have to return an instance

00:17:27.566 --> 00:17:29.646 A:middle
in order to participate in the

00:17:29.646 --> 00:17:30.496 A:middle
Playback Pipeline.

00:17:34.076 --> 00:17:35.066 A:middle
The next step of the Playback

00:17:35.066 --> 00:17:36.406 A:middle
Pipeline is to actually show

00:17:36.406 --> 00:17:37.826 A:middle
Playback on the screen itself in

00:17:37.826 --> 00:17:39.236 A:middle
the form of a user interface.

00:17:39.736 --> 00:17:42.066 A:middle
This can happen anytime whether

00:17:42.066 --> 00:17:44.116 A:middle
it's full screen playback or

00:17:44.116 --> 00:17:44.936 A:middle
embedded playback.

00:17:45.426 --> 00:17:47.016 A:middle
It is entirely up to you to

00:17:47.016 --> 00:17:48.406 A:middle
create your own user interface.

00:17:49.186 --> 00:17:51.826 A:middle
When TVMLKit needs a user

00:17:51.826 --> 00:17:53.646 A:middle
interfact, the TVInterface

00:17:53.646 --> 00:17:54.316 A:middle
[inaudible] will ask its

00:17:54.316 --> 00:17:55.616 A:middle
delegate for a view controller.

00:17:56.246 --> 00:17:58.046 A:middle
It will also pass it a reference

00:17:58.046 --> 00:18:00.336 A:middle
to TVPlayer that is responsible

00:17:58.046 --> 00:18:00.336 A:middle
to TVPlayer that is responsible

00:18:00.336 --> 00:18:01.806 A:middle
for playing media in that view.

00:18:04.726 --> 00:18:05.476 A:middle
With everything, there are

00:18:05.476 --> 00:18:07.226 A:middle
several caveats to using

00:18:07.666 --> 00:18:10.086 A:middle
TVPlayer and its associated user

00:18:10.086 --> 00:18:10.596 A:middle
interface.

00:18:12.266 --> 00:18:13.246 A:middle
The very first thing is you

00:18:13.246 --> 00:18:14.476 A:middle
should handle any 'should'

00:18:14.476 --> 00:18:15.266 A:middle
events yourself.

00:18:16.026 --> 00:18:17.156 A:middle
These are usually tied to

00:18:17.156 --> 00:18:19.246 A:middle
interstitials and since that's

00:18:19.246 --> 00:18:20.786 A:middle
largely user interface, this

00:18:20.786 --> 00:18:22.656 A:middle
should be handled by the native

00:18:22.656 --> 00:18:23.446 A:middle
code that you write.

00:18:25.676 --> 00:18:27.266 A:middle
If you use FairPlay encryption

00:18:27.266 --> 00:18:29.836 A:middle
for your video playback, you

00:18:29.836 --> 00:18:32.456 A:middle
need to use AVContentKeySession

00:18:32.456 --> 00:18:33.486 A:middle
for secure key loading.

00:18:34.006 --> 00:18:36.326 A:middle
For more information about

00:18:36.326 --> 00:18:38.406 A:middle
AVContentKeySession, look at our

00:18:38.406 --> 00:18:39.866 A:middle
talks from last year, Advances

00:18:39.866 --> 00:18:42.166 A:middle
in HTTP Live Streaming, and a

00:18:42.166 --> 00:18:43.086 A:middle
talk from this year about

00:18:43.086 --> 00:18:44.646 A:middle
AVContentKeySession Best

00:18:44.646 --> 00:18:45.206 A:middle
Practices.

00:18:47.456 --> 00:18:49.826 A:middle
Finally, if your JavaScript

00:18:49.826 --> 00:18:51.586 A:middle
developers use overlay and

00:18:51.586 --> 00:18:53.526 A:middle
interactive overlays, this will

00:18:53.526 --> 00:18:54.856 A:middle
not work out of the box.

00:18:55.556 --> 00:18:56.896 A:middle
They are user interfaces and

00:18:56.896 --> 00:18:57.856 A:middle
because you are building your

00:18:57.856 --> 00:18:59.396 A:middle
own, you will have to handle it

00:18:59.446 --> 00:18:59.896 A:middle
yourself.

00:19:04.206 --> 00:19:06.166 A:middle
In summary, the changes we've

00:19:06.166 --> 00:19:09.746 A:middle
made to TVMLKit and tvOS 12 are

00:19:10.176 --> 00:19:11.876 A:middle
the following two: One is the

00:19:11.876 --> 00:19:13.256 A:middle
data binding is now even more

00:19:13.256 --> 00:19:15.406 A:middle
powerful, enabling you to build

00:19:15.406 --> 00:19:17.306 A:middle
data driven templates in any

00:19:17.306 --> 00:19:17.676 A:middle
form.

00:19:18.316 --> 00:19:19.556 A:middle
We highly encourage you to check

00:19:19.556 --> 00:19:19.936 A:middle
this out.

00:19:21.376 --> 00:19:22.986 A:middle
And finally, if you've been long

00:19:22.986 --> 00:19:24.716 A:middle
waiting to customize the

00:19:24.716 --> 00:19:26.146 A:middle
playback experience itself, you

00:19:26.146 --> 00:19:27.886 A:middle
can do it today by implementing

00:19:27.886 --> 00:19:28.806 A:middle
your own native playback

00:19:28.806 --> 00:19:29.356 A:middle
experience.

00:19:31.246 --> 00:19:32.566 A:middle
For more information about this

00:19:32.566 --> 00:19:34.406 A:middle
talk, please look at the

00:19:34.406 --> 00:19:35.226 A:middle
following url.

00:19:37.286 --> 00:19:38.946 A:middle
And thank you for attending WWDC

00:19:38.946 --> 00:19:40.326 A:middle
2018.

00:19:41.166 --> 00:19:41.506 A:middle
Thank you.
