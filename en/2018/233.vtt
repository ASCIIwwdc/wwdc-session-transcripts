WEBVTT

00:00:07.016 --> 00:00:15.500 A:middle
[ Music ]

00:00:19.566 --> 00:00:20.666 A:middle
&gt;&gt; Hey guys!

00:00:21.436 --> 00:00:21.976 A:middle
&gt;&gt; Good afternoon.

00:00:27.796 --> 00:00:29.846 A:middle
Welcome to Adding Delight to

00:00:29.846 --> 00:00:30.556 A:middle
your iOS App.

00:00:31.686 --> 00:00:32.426 A:middle
My name's Ben.

00:00:32.586 --> 00:00:33.946 A:middle
&gt;&gt; And, my name is Peter.

00:00:34.036 --> 00:00:35.296 A:middle
And, we're going to show you six

00:00:35.326 --> 00:00:37.046 A:middle
pro tips to make it magic.

00:00:38.016 --> 00:00:39.216 A:middle
&gt;&gt; We're going to start with

00:00:39.216 --> 00:00:40.666 A:middle
external display support,

00:00:41.536 --> 00:00:42.926 A:middle
bringing your app's experiences

00:00:42.926 --> 00:00:43.876 A:middle
to the big screen.

00:00:45.756 --> 00:00:47.316 A:middle
&gt;&gt; Next, we're going to go

00:00:47.316 --> 00:00:49.196 A:middle
through a brand-new programming

00:00:49.196 --> 00:00:50.396 A:middle
pattern for you, called

00:00:50.396 --> 00:00:51.186 A:middle
layout-driven UI.

00:00:52.206 --> 00:00:53.836 A:middle
&gt;&gt; Then, we're going to show you

00:00:53.986 --> 00:00:55.376 A:middle
how to get your customers to

00:00:55.376 --> 00:00:56.766 A:middle
your delightful experiences as

00:00:56.766 --> 00:00:58.226 A:middle
fast as possible, with

00:00:58.226 --> 00:00:59.466 A:middle
laser-fast launches.

00:01:00.346 --> 00:01:01.596 A:middle
&gt;&gt; We're going to focus hard on

00:01:01.596 --> 00:01:03.106 A:middle
smooth scrolling, and keeping

00:01:03.106 --> 00:01:04.536 A:middle
things feeling great.

00:01:05.676 --> 00:01:06.966 A:middle
&gt;&gt; Continuity is one of the most

00:01:06.966 --> 00:01:08.546 A:middle
magical experiences on iOS.

00:01:08.546 --> 00:01:09.656 A:middle
And, we're going to show you

00:01:09.656 --> 00:01:11.066 A:middle
just how easy it is to adopt

00:01:11.166 --> 00:01:12.766 A:middle
Handoff in your applications.

00:01:13.706 --> 00:01:15.066 A:middle
&gt;&gt; And, finally, we're going to

00:01:15.066 --> 00:01:16.906 A:middle
teach you some Matrix-level

00:01:16.906 --> 00:01:18.566 A:middle
debugging skills, in debugging

00:01:18.666 --> 00:01:19.316 A:middle
like a pro.

00:01:20.306 --> 00:01:21.426 A:middle
&gt;&gt; We have a lot to cover, so

00:01:21.426 --> 00:01:21.966 A:middle
let's get started.

00:01:28.276 --> 00:01:31.166 A:middle
iOS devices are defined by their

00:01:31.166 --> 00:01:33.416 A:middle
stunning, integrated displays.

00:01:34.046 --> 00:01:36.846 A:middle
And, you can bring your app's

00:01:36.846 --> 00:01:39.176 A:middle
experience even further, by

00:01:39.176 --> 00:01:41.026 A:middle
adding support for an external

00:01:41.026 --> 00:01:41.446 A:middle
display.

00:01:42.016 --> 00:01:45.196 A:middle
We've built a demo app to help

00:01:45.196 --> 00:01:45.926 A:middle
illustrate this.

00:01:47.236 --> 00:01:49.546 A:middle
Built right into iOS, is Display

00:01:49.546 --> 00:01:51.236 A:middle
Mirroring, which replicates the

00:01:51.236 --> 00:01:53.776 A:middle
entire system UI on the external

00:01:54.136 --> 00:01:55.016 A:middle
connected display.

00:01:56.196 --> 00:01:58.046 A:middle
Here's our demo app.

00:01:58.046 --> 00:01:59.076 A:middle
As you can see, it's a simple

00:01:59.076 --> 00:01:59.786 A:middle
photo viewer.

00:02:00.346 --> 00:02:01.256 A:middle
When you tap on a photo

00:02:01.256 --> 00:02:03.626 A:middle
thumbnail, the photo slides in,

00:02:03.706 --> 00:02:04.586 A:middle
and it's full screen.

00:02:05.496 --> 00:02:07.556 A:middle
And, this entire experience is

00:02:07.556 --> 00:02:09.166 A:middle
replicated on the external

00:02:09.166 --> 00:02:09.566 A:middle
display.

00:02:10.166 --> 00:02:12.646 A:middle
To take full advantage of the

00:02:12.646 --> 00:02:14.606 A:middle
size of the external display, we

00:02:14.606 --> 00:02:15.716 A:middle
can rotate the iPhone to

00:02:15.716 --> 00:02:17.146 A:middle
landscape to fill it up.

00:02:17.146 --> 00:02:20.916 A:middle
And, this is great, with no work

00:02:20.916 --> 00:02:22.506 A:middle
on our part, we were able to get

00:02:22.506 --> 00:02:23.276 A:middle
this experience.

00:02:23.746 --> 00:02:27.136 A:middle
But, we can do better than this.

00:02:28.506 --> 00:02:30.316 A:middle
Built right into iOS, are APIs

00:02:30.316 --> 00:02:32.036 A:middle
that allow you to create an

00:02:32.036 --> 00:02:34.576 A:middle
entirely custom, second user

00:02:34.576 --> 00:02:36.446 A:middle
interface on this externally

00:02:36.446 --> 00:02:36.976 A:middle
connected display.

00:02:39.296 --> 00:02:40.766 A:middle
Let's take a look at a couple of

00:02:40.766 --> 00:02:43.246 A:middle
examples of apps that have done

00:02:45.296 --> 00:02:45.396 A:middle
this.

00:02:45.606 --> 00:02:47.386 A:middle
Keynote is a great example.

00:02:48.206 --> 00:02:49.856 A:middle
On the external display, you

00:02:49.856 --> 00:02:51.996 A:middle
remain focused on the primary

00:02:51.996 --> 00:02:52.796 A:middle
slide at hand.

00:02:53.786 --> 00:02:55.106 A:middle
But, on the integrated iPhone

00:02:55.106 --> 00:02:56.836 A:middle
display, you can see presenter

00:02:56.836 --> 00:02:59.166 A:middle
notes, and the next slide, tools

00:02:59.166 --> 00:03:01.026 A:middle
essential to any presentation.

00:02:59.166 --> 00:03:01.026 A:middle
essential to any presentation.

00:03:01.536 --> 00:03:04.126 A:middle
Or, maybe you have a game.

00:03:05.496 --> 00:03:06.816 A:middle
But, typically you'd have soft,

00:03:06.816 --> 00:03:07.986 A:middle
overlaid controls.

00:03:08.966 --> 00:03:09.746 A:middle
Well, you could create an

00:03:09.746 --> 00:03:11.756 A:middle
entirely custom interface to

00:03:11.756 --> 00:03:14.106 A:middle
control your game, and put that

00:03:14.106 --> 00:03:17.546 A:middle
on the iOS device's display, and

00:03:17.546 --> 00:03:19.376 A:middle
have your full, unobstructed and

00:03:19.376 --> 00:03:21.326 A:middle
immersive gaming experience on

00:03:21.326 --> 00:03:22.276 A:middle
the external display.

00:03:22.806 --> 00:03:27.536 A:middle
When designing your applications

00:03:27.606 --> 00:03:30.016 A:middle
for an external display, there

00:03:30.016 --> 00:03:31.066 A:middle
are some key things that you

00:03:31.066 --> 00:03:32.506 A:middle
should think about.

00:03:33.556 --> 00:03:35.386 A:middle
Aside from the obvious size

00:03:35.386 --> 00:03:38.106 A:middle
differences, your iPhone is

00:03:38.186 --> 00:03:38.736 A:middle
personal.

00:03:39.496 --> 00:03:40.626 A:middle
And so, you should consider the

00:03:40.626 --> 00:03:41.616 A:middle
kind of information that you

00:03:41.616 --> 00:03:43.696 A:middle
show on this display as private.

00:03:44.156 --> 00:03:46.896 A:middle
Whereas, the external display

00:03:47.166 --> 00:03:49.056 A:middle
will typically be situated in an

00:03:49.056 --> 00:03:50.586 A:middle
environment where many people

00:03:50.586 --> 00:03:52.696 A:middle
can see it, such as a TV in a

00:03:52.696 --> 00:03:54.806 A:middle
living room, or a projection

00:03:54.806 --> 00:03:55.946 A:middle
system in a conference hall.

00:03:57.666 --> 00:03:58.706 A:middle
So, you should assume that the

00:03:58.706 --> 00:04:00.066 A:middle
information shown on this

00:03:58.706 --> 00:04:00.066 A:middle
information shown on this

00:04:00.066 --> 00:04:02.126 A:middle
display is public.

00:04:02.956 --> 00:04:04.416 A:middle
&gt;&gt; Additionally, while the

00:04:04.416 --> 00:04:06.186 A:middle
displays built into iPhone and

00:04:06.276 --> 00:04:08.406 A:middle
iPad are interactive, the

00:04:08.406 --> 00:04:10.096 A:middle
external display is not.

00:04:10.246 --> 00:04:12.656 A:middle
So, you should avoid showing UI

00:04:12.656 --> 00:04:14.326 A:middle
elements, or other interactable

00:04:14.326 --> 00:04:15.856 A:middle
controls on the external

00:04:15.856 --> 00:04:16.276 A:middle
display.

00:04:16.856 --> 00:04:19.526 A:middle
&gt;&gt; So, let's apply this kind of

00:04:19.606 --> 00:04:21.685 A:middle
thinking to our demo app, and

00:04:21.685 --> 00:04:24.086 A:middle
see what we can come up with.

00:04:24.266 --> 00:04:26.316 A:middle
Here's our optimized version for

00:04:26.316 --> 00:04:27.206 A:middle
the external display.

00:04:28.516 --> 00:04:29.636 A:middle
As you can see, we're now

00:04:29.636 --> 00:04:32.356 A:middle
showing the selected photo full

00:04:32.356 --> 00:04:34.326 A:middle
size on the external display.

00:04:34.326 --> 00:04:36.886 A:middle
And, on the integrated display,

00:04:37.316 --> 00:04:38.206 A:middle
we're showing just the

00:04:38.256 --> 00:04:39.816 A:middle
thumbnails, and a new selection

00:04:39.816 --> 00:04:41.896 A:middle
indicator to show the photo that

00:04:41.896 --> 00:04:43.086 A:middle
is currently being shown full

00:04:43.086 --> 00:04:43.496 A:middle
screen.

00:04:45.096 --> 00:04:46.886 A:middle
While simple, this is a really

00:04:46.926 --> 00:04:49.386 A:middle
powerful use of this design.

00:04:50.616 --> 00:04:52.166 A:middle
To show you how we built this

00:04:52.166 --> 00:04:53.736 A:middle
into our demo app, we're going

00:04:53.736 --> 00:04:54.886 A:middle
to cover three topics.

00:04:56.176 --> 00:04:58.716 A:middle
Connectivity, behavior, and

00:04:58.716 --> 00:04:59.886 A:middle
connection transitions.

00:05:01.256 --> 00:05:02.566 A:middle
Let's start with connectivity.

00:05:03.506 --> 00:05:05.146 A:middle
How do you know if you have an

00:05:05.146 --> 00:05:06.446 A:middle
external display connected?

00:05:07.836 --> 00:05:10.236 A:middle
UIScreen has a class variable,

00:05:10.236 --> 00:05:12.076 A:middle
screens, which contains a list

00:05:12.076 --> 00:05:13.576 A:middle
of all the connected displays,

00:05:13.576 --> 00:05:15.226 A:middle
including the device, built into

00:05:15.226 --> 00:05:15.506 A:middle
the iPhone.

00:05:15.556 --> 00:05:18.256 A:middle
So, if there's more than one

00:05:18.376 --> 00:05:20.596 A:middle
element in this array, you know

00:05:20.596 --> 00:05:21.946 A:middle
you have an external display

00:05:21.946 --> 00:05:22.526 A:middle
connected.

00:05:24.296 --> 00:05:26.446 A:middle
Additionally, because the

00:05:26.446 --> 00:05:27.556 A:middle
external display can be

00:05:27.556 --> 00:05:29.366 A:middle
connected and disconnected at

00:05:29.486 --> 00:05:31.986 A:middle
will, UIKit will post

00:05:31.986 --> 00:05:33.666 A:middle
notifications to help you know

00:05:33.666 --> 00:05:34.476 A:middle
when this happens.

00:05:34.476 --> 00:05:36.576 A:middle
So, you should listen for the

00:05:36.576 --> 00:05:37.356 A:middle
UIScreen

00:05:37.616 --> 00:05:39.676 A:middle
.didConnectNotification, and the

00:05:39.676 --> 00:05:40.296 A:middle
UIScreen

00:05:40.296 --> 00:05:41.846 A:middle
.didDisconnectNotifications.

00:05:42.446 --> 00:05:43.976 A:middle
And, bring up and tear down your

00:05:43.976 --> 00:05:44.566 A:middle
UI accordingly.

00:05:46.216 --> 00:05:47.346 A:middle
Peter, can you show our

00:05:47.346 --> 00:05:48.836 A:middle
developers just how easy it is

00:05:48.836 --> 00:05:49.856 A:middle
to set up a second user

00:05:49.856 --> 00:05:50.286 A:middle
interface?

00:05:50.856 --> 00:05:52.416 A:middle
&gt;&gt; Ben, I'd be happy to.

00:05:52.836 --> 00:05:54.476 A:middle
Let's jump into our code for our

00:05:54.476 --> 00:05:56.466 A:middle
UIScreen connection callback.

00:05:57.776 --> 00:05:59.626 A:middle
Here, we'll set a local variable

00:05:59.786 --> 00:06:01.086 A:middle
to the last screen in the

00:05:59.786 --> 00:06:01.086 A:middle
to the last screen in the

00:06:01.086 --> 00:06:01.826 A:middle
screens array.

00:06:02.416 --> 00:06:03.506 A:middle
We know that this is the

00:06:03.506 --> 00:06:05.186 A:middle
external screen, because we're

00:06:05.186 --> 00:06:05.686 A:middle
inside of our

00:06:05.686 --> 00:06:07.696 A:middle
didConnectNotification callback.

00:06:08.626 --> 00:06:10.926 A:middle
Next, we'll make a new UI window

00:06:10.926 --> 00:06:12.186 A:middle
to show on this external

00:06:12.186 --> 00:06:12.676 A:middle
display.

00:06:12.676 --> 00:06:14.936 A:middle
And, we'll assign its screen

00:06:14.936 --> 00:06:16.786 A:middle
property to the screen.

00:06:17.266 --> 00:06:18.436 A:middle
Next, we're going to want to

00:06:18.436 --> 00:06:19.906 A:middle
make sure we set up this window.

00:06:20.356 --> 00:06:21.456 A:middle
We factored this into a

00:06:21.456 --> 00:06:23.146 A:middle
function, but all we're doing

00:06:23.146 --> 00:06:24.276 A:middle
here is making a root view

00:06:24.276 --> 00:06:25.786 A:middle
controller, and sticking it on

00:06:25.786 --> 00:06:27.856 A:middle
the window, the same way we'd do

00:06:27.856 --> 00:06:29.146 A:middle
for the onboard display.

00:06:29.896 --> 00:06:31.416 A:middle
And, finally, we're going to

00:06:31.416 --> 00:06:33.436 A:middle
mark this window as not hidden

00:06:33.566 --> 00:06:34.816 A:middle
to show it on the external

00:06:34.816 --> 00:06:35.236 A:middle
screen.

00:06:36.316 --> 00:06:37.386 A:middle
So, that's connection.

00:06:37.756 --> 00:06:38.476 A:middle
Now, let's look at

00:06:38.476 --> 00:06:39.956 A:middle
disconnection, which is even

00:06:39.956 --> 00:06:40.496 A:middle
easier.

00:06:41.326 --> 00:06:42.536 A:middle
So, here we are inside of our

00:06:42.536 --> 00:06:43.436 A:middle
UIScreen

00:06:43.506 --> 00:06:45.226 A:middle
.didDisconnectNotification

00:06:45.226 --> 00:06:47.066 A:middle
handler, and all we have to do

00:06:47.066 --> 00:06:49.486 A:middle
here is hide the window, and nil

00:06:49.486 --> 00:06:50.826 A:middle
out our local reference to it,

00:06:50.976 --> 00:06:52.366 A:middle
to free up any resources.

00:06:52.366 --> 00:06:53.296 A:middle
And, that's it.

00:06:53.296 --> 00:06:54.636 A:middle
We've implemented screen

00:06:54.636 --> 00:06:56.266 A:middle
connection and disconnection in

00:06:56.266 --> 00:06:56.596 A:middle
our app.

00:06:57.236 --> 00:06:58.256 A:middle
&gt;&gt; Wow, Peter, that was really

00:06:58.256 --> 00:06:58.696 A:middle
easy.

00:07:00.376 --> 00:07:01.476 A:middle
The next thing you're going to

00:07:01.476 --> 00:07:03.386 A:middle
want to think about is changing

00:07:03.386 --> 00:07:04.686 A:middle
your app's default behavior for

00:07:05.186 --> 00:07:06.616 A:middle
when it has an external display

00:07:06.616 --> 00:07:07.106 A:middle
connected.

00:07:07.106 --> 00:07:10.276 A:middle
Let's look at an example of some

00:07:10.276 --> 00:07:12.266 A:middle
code from our demo app.

00:07:13.256 --> 00:07:14.466 A:middle
This is the code that's called

00:07:14.496 --> 00:07:16.216 A:middle
when we tap on a photo in your

00:07:16.216 --> 00:07:16.806 A:middle
collection view.

00:07:17.326 --> 00:07:19.436 A:middle
When we're in single display

00:07:19.436 --> 00:07:21.236 A:middle
mode, we create our

00:07:21.236 --> 00:07:23.186 A:middle
photoViewController and push it

00:07:23.296 --> 00:07:24.396 A:middle
onto our navigation stack.

00:07:25.576 --> 00:07:26.766 A:middle
But, when we have an external

00:07:26.766 --> 00:07:28.596 A:middle
display connected, we're already

00:07:28.596 --> 00:07:29.966 A:middle
showing that photoViewController

00:07:30.026 --> 00:07:31.886 A:middle
full screen in that second UI,

00:07:32.576 --> 00:07:34.466 A:middle
so we just tell it to present

00:07:34.466 --> 00:07:35.066 A:middle
that photo.

00:07:35.746 --> 00:07:37.046 A:middle
Really easy.

00:07:37.836 --> 00:07:39.356 A:middle
The third thing you should think

00:07:39.356 --> 00:07:40.976 A:middle
about when designing for an

00:07:40.976 --> 00:07:43.616 A:middle
external display is you should

00:07:43.616 --> 00:07:45.476 A:middle
handle connection changes with

00:07:45.476 --> 00:07:46.556 A:middle
graceful transitions.

00:07:47.046 --> 00:07:50.366 A:middle
Let's go back to our demo app to

00:07:50.366 --> 00:07:51.006 A:middle
illustrate this.

00:07:52.846 --> 00:07:54.776 A:middle
Here you can see our demo app is

00:07:54.856 --> 00:07:56.056 A:middle
currently showing a photo full

00:07:56.056 --> 00:07:56.446 A:middle
size.

00:07:57.056 --> 00:07:58.436 A:middle
And, we haven't yet connected

00:07:58.436 --> 00:07:59.496 A:middle
the external display yet.

00:08:00.796 --> 00:08:01.736 A:middle
Watch what happens when we plug

00:08:01.736 --> 00:08:01.976 A:middle
it in.

00:08:06.416 --> 00:08:08.216 A:middle
What happened here, is we popped

00:08:08.216 --> 00:08:09.406 A:middle
our viewController back to the

00:08:09.406 --> 00:08:10.546 A:middle
thumbnail view while

00:08:10.656 --> 00:08:12.616 A:middle
simultaneously showing that

00:08:12.616 --> 00:08:14.546 A:middle
previously selected photo full

00:08:14.546 --> 00:08:16.286 A:middle
size on the external display.

00:08:16.286 --> 00:08:19.846 A:middle
And, it's these graceful

00:08:19.846 --> 00:08:21.466 A:middle
transitions that really help

00:08:21.466 --> 00:08:23.546 A:middle
preserve the context, and help

00:08:23.546 --> 00:08:24.926 A:middle
your customers understand where

00:08:24.926 --> 00:08:26.136 A:middle
they are in your app's flow.

00:08:26.676 --> 00:08:29.416 A:middle
So, that's external display

00:08:29.416 --> 00:08:29.916 A:middle
support.

00:08:30.416 --> 00:08:31.846 A:middle
It's really easy to set up.

00:08:32.635 --> 00:08:33.736 A:middle
Just consider the different

00:08:33.736 --> 00:08:35.316 A:middle
display contexts when designing

00:08:35.316 --> 00:08:37.395 A:middle
your application, and be sure to

00:08:37.395 --> 00:08:38.426 A:middle
handle connection changes

00:08:38.426 --> 00:08:38.996 A:middle
gracefully.

00:08:40.226 --> 00:08:41.976 A:middle
To learn more about this, check

00:08:41.976 --> 00:08:44.596 A:middle
out this talk from WWDC 2011.

00:08:44.596 --> 00:08:44.876 A:middle
Thank you.

00:08:45.516 --> 00:08:51.256 A:middle
[ Applause ]

00:08:51.756 --> 00:08:53.586 A:middle
&gt;&gt; Layout-driven UI is a

00:08:53.716 --> 00:08:55.726 A:middle
powerful way to write your app

00:08:56.096 --> 00:08:57.376 A:middle
to make it easier to add

00:08:57.376 --> 00:09:00.176 A:middle
features, and easier to debug.

00:08:57.376 --> 00:09:00.176 A:middle
features, and easier to debug.

00:09:01.436 --> 00:09:03.486 A:middle
Layout-driven UI helps us deal

00:09:03.486 --> 00:09:04.996 A:middle
with the number one cause of

00:09:04.996 --> 00:09:07.786 A:middle
issues in iOS apps, and that's

00:09:08.086 --> 00:09:10.026 A:middle
managing UI complexity.

00:09:10.816 --> 00:09:12.226 A:middle
I'm sure you've been here

00:09:12.226 --> 00:09:12.726 A:middle
before.

00:09:12.816 --> 00:09:13.656 A:middle
I know I have.

00:09:14.416 --> 00:09:16.016 A:middle
You add some code, and a gesture

00:09:16.016 --> 00:09:16.636 A:middle
callback.

00:09:17.246 --> 00:09:18.986 A:middle
You add even more UI update code

00:09:19.016 --> 00:09:20.446 A:middle
in a notification callback.

00:09:20.686 --> 00:09:22.376 A:middle
And, more when you get a value

00:09:22.376 --> 00:09:24.376 A:middle
trigger from a UI control.

00:09:25.076 --> 00:09:26.806 A:middle
And, suddenly your app is in

00:09:26.806 --> 00:09:28.176 A:middle
this weird, and hard to

00:09:28.176 --> 00:09:29.206 A:middle
understand state.

00:09:29.986 --> 00:09:30.956 A:middle
And, you have to follow these

00:09:30.956 --> 00:09:32.636 A:middle
strange orders to reproduce

00:09:32.636 --> 00:09:33.966 A:middle
these unusual bugs.

00:09:34.566 --> 00:09:36.026 A:middle
And, as you add more features to

00:09:36.026 --> 00:09:38.186 A:middle
your app, the problem gets worse

00:09:38.256 --> 00:09:38.806 A:middle
and worse.

00:09:40.256 --> 00:09:42.286 A:middle
If we instead follow a simple

00:09:42.286 --> 00:09:44.106 A:middle
recipe, and push these UI

00:09:44.106 --> 00:09:47.706 A:middle
updates into layout, we can get

00:09:47.706 --> 00:09:49.066 A:middle
rid of these bugs, and make it

00:09:49.066 --> 00:09:50.506 A:middle
much easier to add features.

00:09:51.426 --> 00:09:53.226 A:middle
Let's walk through the recipe

00:09:53.476 --> 00:09:54.876 A:middle
for adding layout-driven UI to

00:09:55.146 --> 00:09:56.146 A:middle
your app.

00:09:57.276 --> 00:09:58.576 A:middle
&gt;&gt; The first thing you should

00:09:58.576 --> 00:10:00.586 A:middle
do, is you need to identify and

00:09:58.576 --> 00:10:00.586 A:middle
do, is you need to identify and

00:10:00.696 --> 00:10:02.386 A:middle
track all of the state that

00:10:02.546 --> 00:10:03.596 A:middle
affects your UI.

00:10:05.196 --> 00:10:07.356 A:middle
Then, every time that states

00:10:07.356 --> 00:10:09.116 A:middle
changes, you should dirty the

00:10:09.116 --> 00:10:10.476 A:middle
layout system by calling

00:10:10.556 --> 00:10:11.466 A:middle
setNeedsLayout.

00:10:12.696 --> 00:10:15.496 A:middle
Finally, you'll want to update

00:10:15.496 --> 00:10:17.176 A:middle
your UI with this state in

00:10:17.176 --> 00:10:18.006 A:middle
layoutSubviews.

00:10:18.936 --> 00:10:19.826 A:middle
And, that's it.

00:10:20.746 --> 00:10:21.706 A:middle
&gt;&gt; So, what I love about this

00:10:21.706 --> 00:10:23.596 A:middle
recipe is just how easy it is to

00:10:23.596 --> 00:10:24.036 A:middle
follow.

00:10:24.576 --> 00:10:27.276 A:middle
And, if we apply layout-driven

00:10:27.276 --> 00:10:29.216 A:middle
UI to our app holistically,

00:10:30.376 --> 00:10:32.106 A:middle
while considering the three core

00:10:32.106 --> 00:10:33.486 A:middle
components of an iOS app,

00:10:34.196 --> 00:10:36.226 A:middle
layout, animations, and

00:10:36.226 --> 00:10:38.646 A:middle
gestures, you'll find that our

00:10:38.646 --> 00:10:40.226 A:middle
implementation of all three of

00:10:40.226 --> 00:10:43.256 A:middle
these works harmoniously, in a

00:10:43.256 --> 00:10:44.516 A:middle
really awesome way.

00:10:45.956 --> 00:10:47.496 A:middle
Let's start with layout.

00:10:49.556 --> 00:10:51.586 A:middle
Layout is the process by which

00:10:51.586 --> 00:10:53.026 A:middle
you position your application's

00:10:53.026 --> 00:10:54.476 A:middle
content onscreen.

00:10:55.576 --> 00:10:57.056 A:middle
But, we're also recommending

00:10:57.056 --> 00:10:59.446 A:middle
that you do all other UI updates

00:10:59.636 --> 00:11:00.186 A:middle
in layout.

00:10:59.636 --> 00:11:00.186 A:middle
in layout.

00:11:00.836 --> 00:11:02.606 A:middle
Let's look at a simple sample

00:11:02.606 --> 00:11:03.996 A:middle
app that we wrote to highlight

00:11:03.996 --> 00:11:04.366 A:middle
this.

00:11:04.986 --> 00:11:06.066 A:middle
Ben, can you take us through

00:11:06.066 --> 00:11:06.456 A:middle
this app?

00:11:07.326 --> 00:11:07.836 A:middle
&gt;&gt; Sure, Peter.

00:11:09.166 --> 00:11:10.226 A:middle
So, there's a really simple

00:11:10.226 --> 00:11:11.776 A:middle
sample app, with this cool guy

00:11:11.776 --> 00:11:12.206 A:middle
in the middle.

00:11:12.986 --> 00:11:14.046 A:middle
He shows when we're feeling

00:11:14.046 --> 00:11:14.356 A:middle
cool.

00:11:15.046 --> 00:11:16.496 A:middle
When we're not, he hides away.

00:11:17.806 --> 00:11:18.976 A:middle
But, we're feeling quite cool

00:11:18.976 --> 00:11:19.616 A:middle
right now, Peter.

00:11:19.776 --> 00:11:20.666 A:middle
So, let's bring him back in.

00:11:21.816 --> 00:11:23.716 A:middle
&gt;&gt; Great. So, while this is a

00:11:23.716 --> 00:11:25.666 A:middle
simple example, it's really

00:11:25.666 --> 00:11:27.006 A:middle
important to walk through, so we

00:11:27.006 --> 00:11:28.636 A:middle
can understand how layout-driven

00:11:28.636 --> 00:11:29.476 A:middle
UI works.

00:11:29.756 --> 00:11:31.996 A:middle
So, let's go through a skeleton

00:11:31.996 --> 00:11:34.146 A:middle
of this app, and follow through

00:11:34.326 --> 00:11:36.256 A:middle
the layout-driven UI recipe that

00:11:36.256 --> 00:11:37.306 A:middle
Ben showed us earlier.

00:11:38.276 --> 00:11:40.016 A:middle
So, here we've got our managing

00:11:40.016 --> 00:11:42.046 A:middle
view that hosts this cool guy

00:11:42.046 --> 00:11:43.846 A:middle
view, in our coolView, which I

00:11:43.846 --> 00:11:45.056 A:middle
wrote ahead of time.

00:11:45.946 --> 00:11:47.296 A:middle
So, Ben, what's the first step

00:11:47.296 --> 00:11:47.966 A:middle
in our recipe?

00:11:48.646 --> 00:11:50.126 A:middle
&gt;&gt; Well, we need to identify and

00:11:50.126 --> 00:11:52.386 A:middle
track that state that affects

00:11:52.386 --> 00:11:52.766 A:middle
our UI.

00:11:53.726 --> 00:11:55.116 A:middle
&gt;&gt; So, remember what Ben said.

00:11:55.456 --> 00:11:56.856 A:middle
The cool guy is there when we're

00:11:56.986 --> 00:11:57.986 A:middle
feeling cool.

00:11:57.986 --> 00:11:59.656 A:middle
And, he's not there when we're

00:11:59.656 --> 00:11:59.936 A:middle
not.

00:12:00.816 --> 00:12:01.526 A:middle
So, I guess we'll have a

00:12:01.526 --> 00:12:03.256 A:middle
variable called feelingCool.

00:12:03.976 --> 00:12:06.206 A:middle
OK. Ben, what's the second step

00:12:06.206 --> 00:12:06.846 A:middle
in the recipe?

00:12:07.536 --> 00:12:08.906 A:middle
&gt;&gt; Well, now, every time this

00:12:08.906 --> 00:12:10.626 A:middle
state changes, we need to dirty

00:12:10.626 --> 00:12:12.066 A:middle
the layout system by calling

00:12:12.066 --> 00:12:12.876 A:middle
setNeedsLayout.

00:12:13.696 --> 00:12:15.336 A:middle
But, we need to make sure that

00:12:15.336 --> 00:12:16.586 A:middle
every time this state changes

00:12:16.586 --> 00:12:17.196 A:middle
this happens.

00:12:17.196 --> 00:12:18.646 A:middle
And, this state could change

00:12:19.256 --> 00:12:20.426 A:middle
from various places in our

00:12:20.426 --> 00:12:21.076 A:middle
application.

00:12:21.666 --> 00:12:23.016 A:middle
So, Peter, how can we ensure

00:12:23.016 --> 00:12:24.196 A:middle
that we're always dirtying the

00:12:24.196 --> 00:12:25.066 A:middle
layout system when there's

00:12:25.066 --> 00:12:25.446 A:middle
changes?

00:12:25.906 --> 00:12:27.226 A:middle
&gt;&gt; I'm happy you asked, because

00:12:27.226 --> 00:12:28.386 A:middle
I think I've got a good idea for

00:12:28.386 --> 00:12:28.756 A:middle
this.

00:12:29.356 --> 00:12:30.506 A:middle
We can use a feature called

00:12:30.506 --> 00:12:32.456 A:middle
Swift property observers.

00:12:33.326 --> 00:12:35.526 A:middle
These let us run code before or

00:12:35.526 --> 00:12:37.106 A:middle
after a property is set.

00:12:37.106 --> 00:12:39.366 A:middle
So, we can use the didSet

00:12:39.396 --> 00:12:41.146 A:middle
property observer to call

00:12:41.146 --> 00:12:42.046 A:middle
setNeedsLayout.

00:12:42.576 --> 00:12:44.286 A:middle
This is a really excellent use

00:12:44.286 --> 00:12:45.776 A:middle
of Swift property observers in

00:12:45.776 --> 00:12:47.276 A:middle
your app.

00:12:47.336 --> 00:12:49.076 A:middle
OK. So, we're almost done.

00:12:49.496 --> 00:12:50.766 A:middle
Ben, what's the last step in the

00:12:50.766 --> 00:12:51.286 A:middle
recipe?

00:12:51.766 --> 00:12:53.056 A:middle
&gt;&gt; Well now, Peter, using this

00:12:53.056 --> 00:12:54.986 A:middle
state, we need to update our UI

00:12:55.226 --> 00:12:56.236 A:middle
in layoutSubviews.

00:12:57.396 --> 00:12:58.676 A:middle
&gt;&gt; OK, easy.

00:12:59.336 --> 00:13:00.876 A:middle
We'll override layoutSubviews,

00:12:59.336 --> 00:13:00.876 A:middle
We'll override layoutSubviews,

00:13:00.986 --> 00:13:02.756 A:middle
and we'll updated the isHidden

00:13:02.756 --> 00:13:04.306 A:middle
property of our cool guy view

00:13:04.666 --> 00:13:05.766 A:middle
based on the value of

00:13:05.766 --> 00:13:06.496 A:middle
feelingCool.

00:13:07.136 --> 00:13:07.926 A:middle
And, that's it.

00:13:08.236 --> 00:13:09.576 A:middle
That's all you need to do to add

00:13:09.576 --> 00:13:10.986 A:middle
layout-driven UI to your app.

00:13:11.616 --> 00:13:13.016 A:middle
Now, while this works really

00:13:13.016 --> 00:13:14.996 A:middle
well for this simple example, it

00:13:14.996 --> 00:13:16.746 A:middle
works well for some more complex

00:13:16.746 --> 00:13:17.436 A:middle
ones earlier.

00:13:18.336 --> 00:13:19.816 A:middle
Ben and I were up really late

00:13:19.816 --> 00:13:21.326 A:middle
last night playing this new

00:13:21.816 --> 00:13:23.766 A:middle
macOS The Gathering trading card

00:13:23.766 --> 00:13:25.016 A:middle
game, which is sweeping the

00:13:25.016 --> 00:13:25.806 A:middle
Apple campus.

00:13:27.066 --> 00:13:28.406 A:middle
We built this fun little deck

00:13:28.456 --> 00:13:29.896 A:middle
builder app to help us win the

00:13:29.896 --> 00:13:31.076 A:middle
tournament next weekend, which

00:13:31.076 --> 00:13:32.266 A:middle
we're really going to do.

00:13:32.946 --> 00:13:34.266 A:middle
It lets you pick up and drag

00:13:34.266 --> 00:13:35.596 A:middle
these cards around, and you can

00:13:35.596 --> 00:13:36.856 A:middle
fling them into this little deck

00:13:36.856 --> 00:13:37.146 A:middle
area.

00:13:37.146 --> 00:13:39.176 A:middle
And, it's really fast, and fun,

00:13:39.176 --> 00:13:39.646 A:middle
and fluid.

00:13:39.826 --> 00:13:41.256 A:middle
We can pick up two cards at the

00:13:41.256 --> 00:13:41.896 A:middle
same time.

00:13:42.496 --> 00:13:44.156 A:middle
I think with this app we can

00:13:44.156 --> 00:13:45.216 A:middle
really show you how

00:13:45.216 --> 00:13:47.306 A:middle
layout-driven UI works, and

00:13:47.306 --> 00:13:48.636 A:middle
importantly, we can beat Ben's

00:13:48.636 --> 00:13:50.556 A:middle
officemate next weekend.

00:13:51.486 --> 00:13:53.066 A:middle
So, let's walk through the other

00:13:53.066 --> 00:13:55.636 A:middle
two core aspects of an iOS app,

00:13:55.636 --> 00:13:56.526 A:middle
and how we can apply

00:13:56.526 --> 00:13:57.846 A:middle
layout-driven UI to them,

00:13:58.306 --> 00:14:00.096 A:middle
starting with animations.

00:13:58.306 --> 00:14:00.096 A:middle
starting with animations.

00:14:01.556 --> 00:14:03.546 A:middle
&gt;&gt; Animations are the hallmark

00:14:03.626 --> 00:14:05.486 A:middle
of any great iOS experience.

00:14:06.546 --> 00:14:08.116 A:middle
The life-like motion of your

00:14:08.116 --> 00:14:10.716 A:middle
user interface truly makes your

00:14:11.376 --> 00:14:12.486 A:middle
apps feel alive.

00:14:12.486 --> 00:14:14.156 A:middle
UIKit has some great API

00:14:14.296 --> 00:14:15.756 A:middle
available to help you create

00:14:15.756 --> 00:14:17.746 A:middle
these delightful animations.

00:14:18.636 --> 00:14:20.716 A:middle
The UIViewPropertyAnimator API

00:14:21.096 --> 00:14:23.246 A:middle
is a really powerful tool, and

00:14:23.246 --> 00:14:24.776 A:middle
it was turbocharged last year

00:14:24.776 --> 00:14:26.006 A:middle
with a bunch of new features.

00:14:27.036 --> 00:14:28.126 A:middle
To learn all about how to use

00:14:28.126 --> 00:14:29.406 A:middle
it, check out Advanced

00:14:29.406 --> 00:14:32.086 A:middle
Animations from UIKit from WWDC

00:14:32.086 --> 00:14:33.246 A:middle
2017.

00:14:34.866 --> 00:14:36.496 A:middle
In addition to this, the tried

00:14:36.496 --> 00:14:38.536 A:middle
and true UIView closure API is

00:14:38.536 --> 00:14:39.876 A:middle
also a great way to make these

00:14:39.876 --> 00:14:40.436 A:middle
animations.

00:14:42.356 --> 00:14:43.326 A:middle
&gt;&gt; So, great.

00:14:43.976 --> 00:14:46.286 A:middle
We can use UIViewAnimations with

00:14:46.286 --> 00:14:48.096 A:middle
our layout-driven UI-based app.

00:14:49.086 --> 00:14:50.816 A:middle
One thing to keep in mind, is

00:14:50.816 --> 00:14:51.756 A:middle
we're always going to want to

00:14:51.756 --> 00:14:53.666 A:middle
use the beginFromCurrentState

00:14:53.806 --> 00:14:54.726 A:middle
animation option.

00:14:55.876 --> 00:14:57.746 A:middle
This tells UIKit to take the

00:14:57.746 --> 00:14:59.486 A:middle
current onscreen position of

00:14:59.486 --> 00:15:01.106 A:middle
your view, even if it's

00:14:59.486 --> 00:15:01.106 A:middle
your view, even if it's

00:15:01.106 --> 00:15:02.946 A:middle
mid-animation, when doing

00:15:02.946 --> 00:15:03.576 A:middle
animation.

00:15:04.256 --> 00:15:06.116 A:middle
And so, this lets us do these

00:15:06.116 --> 00:15:07.926 A:middle
really wonderful, interruptible

00:15:07.926 --> 00:15:09.156 A:middle
interactive animations.

00:15:09.906 --> 00:15:11.636 A:middle
Let's look at an example in our

00:15:11.636 --> 00:15:13.266 A:middle
macOS The Gathering trading card

00:15:13.266 --> 00:15:15.166 A:middle
game app.

00:15:15.416 --> 00:15:17.036 A:middle
So, here we've got a variable

00:15:17.036 --> 00:15:18.846 A:middle
that tracks what cards are in

00:15:18.846 --> 00:15:19.406 A:middle
our deck.

00:15:19.946 --> 00:15:21.386 A:middle
And, using those Swift property

00:15:21.386 --> 00:15:22.406 A:middle
observers we talked about

00:15:22.406 --> 00:15:24.236 A:middle
earlier, we're dirtying the

00:15:24.236 --> 00:15:25.666 A:middle
layout system every time this

00:15:25.666 --> 00:15:27.066 A:middle
changes by calling

00:15:27.066 --> 00:15:27.896 A:middle
setNeedsLayout.

00:15:28.346 --> 00:15:32.326 A:middle
Next, when we want to put a card

00:15:32.326 --> 00:15:34.106 A:middle
in the deck, all we have to do

00:15:34.456 --> 00:15:36.346 A:middle
is add that card to this array,

00:15:36.616 --> 00:15:38.746 A:middle
which will dirty our layout, and

00:15:38.746 --> 00:15:40.546 A:middle
then inside of an animation

00:15:40.546 --> 00:15:41.546 A:middle
block, using this

00:15:41.546 --> 00:15:43.746 A:middle
beginFromCurrentState option, we

00:15:43.746 --> 00:15:45.276 A:middle
call layoutIfNeeded.

00:15:46.146 --> 00:15:47.816 A:middle
This will trigger a call to our

00:15:47.816 --> 00:15:49.576 A:middle
code in layoutSubviews, which

00:15:49.576 --> 00:15:50.746 A:middle
will move all of our views

00:15:50.746 --> 00:15:52.606 A:middle
around, play the appropriate

00:15:52.606 --> 00:15:54.056 A:middle
animation state transitions.

00:15:54.316 --> 00:15:55.836 A:middle
And, what's really excellent

00:15:55.836 --> 00:15:57.056 A:middle
about this, that I really want

00:15:57.056 --> 00:15:58.746 A:middle
to highlight here, is notice how

00:15:58.746 --> 00:16:00.516 A:middle
we didn't add any special case

00:15:58.746 --> 00:16:00.516 A:middle
we didn't add any special case

00:16:00.516 --> 00:16:01.506 A:middle
for these animations.

00:16:02.186 --> 00:16:03.296 A:middle
We just kind of got this

00:16:03.296 --> 00:16:05.516 A:middle
animated layout for free by

00:16:05.516 --> 00:16:07.466 A:middle
doing our layout inside of an

00:16:07.466 --> 00:16:08.326 A:middle
animation block.

00:16:09.266 --> 00:16:10.756 A:middle
This is really, really awesome.

00:16:11.526 --> 00:16:12.946 A:middle
So, that's how we can add

00:16:12.946 --> 00:16:14.356 A:middle
animations to our layout-driven

00:16:14.356 --> 00:16:15.426 A:middle
UI app.

00:16:16.176 --> 00:16:17.856 A:middle
Finally, let's take about the

00:16:18.006 --> 00:16:20.136 A:middle
third core aspect of an iOS app,

00:16:20.306 --> 00:16:21.536 A:middle
and that's gestures.

00:16:22.166 --> 00:16:24.026 A:middle
And, of course, we can't talk

00:16:24.026 --> 00:16:25.516 A:middle
about gestures without talking

00:16:25.516 --> 00:16:27.386 A:middle
about UIGestureRecognizer,

00:16:27.876 --> 00:16:29.916 A:middle
UIKit's awesome API for adding

00:16:29.916 --> 00:16:31.386 A:middle
gestural interactions to your

00:16:33.266 --> 00:16:33.346 A:middle
app.

00:16:33.616 --> 00:16:35.186 A:middle
&gt;&gt; UIKit provides a number of

00:16:35.226 --> 00:16:36.976 A:middle
great concrete subclasses of

00:16:36.976 --> 00:16:38.086 A:middle
UIgestureRecognizer.

00:16:38.936 --> 00:16:40.646 A:middle
Everything from pans to pinches

00:16:40.646 --> 00:16:41.876 A:middle
to swipes to rotation.

00:16:42.486 --> 00:16:43.496 A:middle
You should be able to create the

00:16:43.496 --> 00:16:44.686 A:middle
kind of interactions you want,

00:16:44.686 --> 00:16:45.346 A:middle
using these.

00:16:45.856 --> 00:16:47.266 A:middle
And, they're highly customizable

00:16:47.266 --> 00:16:47.656 A:middle
as well.

00:16:49.026 --> 00:16:50.366 A:middle
If you want something really

00:16:50.506 --> 00:16:52.366 A:middle
crazy, you can always subclass

00:16:52.366 --> 00:16:53.696 A:middle
UIGestureRecognizer yourself as

00:16:53.696 --> 00:16:53.936 A:middle
well.

00:16:55.876 --> 00:16:57.206 A:middle
&gt;&gt; When looking between the

00:16:57.206 --> 00:16:57.746 A:middle
built-in

00:16:57.746 --> 00:17:00.206 A:middle
UIKitGestureRecognizers, it's

00:16:57.746 --> 00:17:00.206 A:middle
UIKitGestureRecognizers, it's

00:17:00.206 --> 00:17:01.386 A:middle
important to understand the

00:17:01.386 --> 00:17:03.356 A:middle
difference between discrete and

00:17:03.356 --> 00:17:04.726 A:middle
continuous gestures.

00:17:06.006 --> 00:17:07.796 A:middle
Discrete gestures tell you that

00:17:07.796 --> 00:17:08.736 A:middle
an event happened.

00:17:09.626 --> 00:17:10.826 A:middle
They start in the Possible

00:17:10.826 --> 00:17:13.026 A:middle
state, and then they don't pass

00:17:13.026 --> 00:17:14.945 A:middle
go, they don't collect $200.

00:17:15.096 --> 00:17:16.496 A:middle
They move immediately into the

00:17:16.496 --> 00:17:17.366 A:middle
Recognized state.

00:17:18.536 --> 00:17:20.556 A:middle
These are really useful for fire

00:17:20.556 --> 00:17:21.896 A:middle
and forget interactions in your

00:17:21.896 --> 00:17:24.366 A:middle
app, but won't tell you at every

00:17:24.366 --> 00:17:25.925 A:middle
phase during the interaction.

00:17:26.455 --> 00:17:28.656 A:middle
&gt;&gt; The other type of gestures

00:17:28.656 --> 00:17:30.116 A:middle
are continuous gestures.

00:17:30.686 --> 00:17:31.806 A:middle
These provide a much greater

00:17:31.806 --> 00:17:33.096 A:middle
level of fidelity to you.

00:17:34.336 --> 00:17:35.586 A:middle
Like discrete gestures, they

00:17:35.586 --> 00:17:37.036 A:middle
start out in the Possible state,

00:17:37.816 --> 00:17:38.666 A:middle
but as they begin to be

00:17:38.666 --> 00:17:40.326 A:middle
recognized, they move to the

00:17:40.326 --> 00:17:41.096 A:middle
Began state.

00:17:41.586 --> 00:17:44.236 A:middle
As they track, they enter the

00:17:44.296 --> 00:17:45.196 A:middle
Changed state.

00:17:45.716 --> 00:17:46.506 A:middle
And, at this point you're

00:17:46.506 --> 00:17:48.026 A:middle
receiving a continuous stream of

00:17:48.026 --> 00:17:49.716 A:middle
events as the gesture moves

00:17:49.716 --> 00:17:49.976 A:middle
around.

00:17:51.216 --> 00:17:52.766 A:middle
Finally, when the gesture is

00:17:53.176 --> 00:17:55.126 A:middle
complete, it moves to the Ended

00:17:55.126 --> 00:17:55.446 A:middle
state.

00:17:57.356 --> 00:17:58.976 A:middle
One of our favorite types of

00:17:58.976 --> 00:18:00.436 A:middle
continuous gestures is the

00:17:58.976 --> 00:18:00.436 A:middle
continuous gestures is the

00:18:00.466 --> 00:18:01.966 A:middle
UIPanGestureRecognizer.

00:18:02.786 --> 00:18:03.776 A:middle
And, there are two great

00:18:03.916 --> 00:18:05.766 A:middle
functions available to help you

00:18:05.766 --> 00:18:06.656 A:middle
get the most out of it.

00:18:08.136 --> 00:18:09.786 A:middle
translationInView will tell you

00:18:09.786 --> 00:18:11.396 A:middle
where the gesture is tracking,

00:18:11.656 --> 00:18:12.956 A:middle
relative to your views.

00:18:13.456 --> 00:18:16.126 A:middle
And, velocityInView will tell

00:18:16.126 --> 00:18:17.466 A:middle
you how fast your gesture is

00:18:17.466 --> 00:18:17.866 A:middle
moving.

00:18:18.366 --> 00:18:20.026 A:middle
And, this is really powerful for

00:18:20.026 --> 00:18:21.596 A:middle
handing off velocity between a

00:18:21.596 --> 00:18:23.166 A:middle
gesture and a subsequent

00:18:23.166 --> 00:18:23.706 A:middle
animation.

00:18:25.256 --> 00:18:26.686 A:middle
To learn all about how to build

00:18:26.686 --> 00:18:28.416 A:middle
really great gesture

00:18:28.416 --> 00:18:30.046 A:middle
interactions using these, check

00:18:30.046 --> 00:18:31.386 A:middle
out Building Interruptible and

00:18:31.386 --> 00:18:33.256 A:middle
Responsive Interactions from

00:18:33.256 --> 00:18:34.866 A:middle
WWDC 2014.

00:18:36.326 --> 00:18:37.536 A:middle
&gt;&gt; So, I also love

00:18:37.586 --> 00:18:39.266 A:middle
UIPanGestureRecognizer.

00:18:39.656 --> 00:18:40.896 A:middle
And, we used it to help build

00:18:40.896 --> 00:18:42.886 A:middle
that card dragging behavior you

00:18:42.886 --> 00:18:43.576 A:middle
saw earlier.

00:18:44.436 --> 00:18:45.716 A:middle
Let's look at how we did this

00:18:45.816 --> 00:18:46.886 A:middle
using layout-driven UI.

00:18:48.856 --> 00:18:50.916 A:middle
Again, we have a local variable,

00:18:51.026 --> 00:18:53.996 A:middle
which tracks the offsets for

00:18:53.996 --> 00:18:55.486 A:middle
each of our cards that the

00:18:55.486 --> 00:18:56.546 A:middle
gesture has applied.

00:18:57.366 --> 00:18:59.136 A:middle
And again notice every time this

00:18:59.136 --> 00:19:00.616 A:middle
variable changes, we're

00:18:59.136 --> 00:19:00.616 A:middle
variable changes, we're

00:19:00.616 --> 00:19:02.916 A:middle
triggering setNeedsLayout, using

00:19:02.916 --> 00:19:03.876 A:middle
one of Swift's property

00:19:03.876 --> 00:19:04.466 A:middle
observers.

00:19:06.306 --> 00:19:07.696 A:middle
Next, inside of our

00:19:07.766 --> 00:19:09.636 A:middle
panGestureRecognizer callback

00:19:09.636 --> 00:19:11.226 A:middle
function, we're just going to

00:19:11.226 --> 00:19:12.936 A:middle
grab the current translation and

00:19:12.936 --> 00:19:15.096 A:middle
view out of the gesture, and

00:19:15.186 --> 00:19:17.356 A:middle
associate this gesture to one of

00:19:17.356 --> 00:19:18.016 A:middle
our cards.

00:19:18.916 --> 00:19:21.776 A:middle
We'll then increment the offset

00:19:21.916 --> 00:19:23.336 A:middle
for this card in this

00:19:23.336 --> 00:19:23.916 A:middle
dictionary.

00:19:25.276 --> 00:19:27.876 A:middle
And finally, in layoutSubviews,

00:19:28.546 --> 00:19:30.086 A:middle
we'll make sure to update the

00:19:30.086 --> 00:19:32.676 A:middle
position of our card views based

00:19:32.676 --> 00:19:34.336 A:middle
on their offsets from this

00:19:34.336 --> 00:19:34.866 A:middle
dictionary.

00:19:36.076 --> 00:19:37.926 A:middle
Notice again how we're not

00:19:37.926 --> 00:19:39.866 A:middle
really doing anything special,

00:19:40.266 --> 00:19:41.546 A:middle
other than -- besides the

00:19:41.546 --> 00:19:42.806 A:middle
traditional layout-driven UI

00:19:42.806 --> 00:19:43.356 A:middle
case.

00:19:44.196 --> 00:19:45.816 A:middle
We just have this piece of state

00:19:46.016 --> 00:19:47.296 A:middle
that happens to be driven by a

00:19:47.296 --> 00:19:49.266 A:middle
gesture, and we're responding to

00:19:49.266 --> 00:19:50.476 A:middle
it in layoutSubviews.

00:19:51.616 --> 00:19:53.406 A:middle
In fact, if you follow this

00:19:53.406 --> 00:19:54.886 A:middle
pattern throughout your app,

00:19:55.476 --> 00:19:56.496 A:middle
you'll find that it makes a lot

00:19:56.496 --> 00:19:57.646 A:middle
of these types of interactions

00:19:57.786 --> 00:19:59.266 A:middle
much easier to adopt.

00:20:00.586 --> 00:20:02.216 A:middle
So that's layout-driven UI.

00:20:02.816 --> 00:20:03.916 A:middle
Remember the recipe.

00:20:04.396 --> 00:20:06.826 A:middle
Find and track all of that state

00:20:06.826 --> 00:20:07.906 A:middle
that affects your UI.

00:20:08.236 --> 00:20:09.386 A:middle
And, use Swift property

00:20:09.386 --> 00:20:10.746 A:middle
observers to trigger

00:20:10.746 --> 00:20:12.726 A:middle
setNeedsLayout whenever this

00:20:12.726 --> 00:20:13.636 A:middle
state changes.

00:20:14.666 --> 00:20:16.426 A:middle
Finally, in your implementation

00:20:16.426 --> 00:20:18.786 A:middle
of layoutSubviews, make sure to

00:20:18.786 --> 00:20:21.216 A:middle
update your view state based on

00:20:21.216 --> 00:20:22.746 A:middle
this state that you tracked.

00:20:22.746 --> 00:20:22.926 A:middle
Thank you.

00:20:23.516 --> 00:20:28.716 A:middle
[ Applause ]

00:20:29.216 --> 00:20:31.276 A:middle
&gt;&gt; The iOS experience is all

00:20:31.276 --> 00:20:32.626 A:middle
about being responsive.

00:20:33.706 --> 00:20:35.036 A:middle
And, you want to get your

00:20:35.036 --> 00:20:36.776 A:middle
customers to your delightful

00:20:36.776 --> 00:20:39.046 A:middle
experiences as quickly as

00:20:39.086 --> 00:20:39.546 A:middle
possible.

00:20:40.736 --> 00:20:43.276 A:middle
There is one step between them

00:20:43.276 --> 00:20:45.406 A:middle
tapping on your icon, and being

00:20:45.406 --> 00:20:45.936 A:middle
delighted.

00:20:47.036 --> 00:20:49.196 A:middle
And, that one step is your

00:20:49.196 --> 00:20:50.606 A:middle
launch time.

00:20:52.256 --> 00:20:54.986 A:middle
To help you optimize this, we're

00:20:54.986 --> 00:20:56.206 A:middle
going to take you through the

00:20:56.206 --> 00:20:58.516 A:middle
five high-level components that

00:20:58.516 --> 00:21:00.876 A:middle
make up the anatomy of a launch.

00:20:58.516 --> 00:21:00.876 A:middle
make up the anatomy of a launch.

00:21:02.536 --> 00:21:03.986 A:middle
Starting with number one,

00:21:04.716 --> 00:21:05.656 A:middle
process forking.

00:21:07.096 --> 00:21:08.486 A:middle
Peter, what can we do in this

00:21:08.486 --> 00:21:09.256 A:middle
phase of the launch?

00:21:10.196 --> 00:21:12.066 A:middle
&gt;&gt; Well, for process forking,

00:21:12.066 --> 00:21:13.396 A:middle
it's really complicated.

00:21:13.796 --> 00:21:14.576 A:middle
You're going to want to read the

00:21:14.576 --> 00:21:17.166 A:middle
Man pages for fork and exec, and

00:21:17.166 --> 00:21:19.056 A:middle
familiarize yourself with POSIX

00:21:19.056 --> 00:21:19.796 A:middle
fundamentals.

00:21:20.076 --> 00:21:21.226 A:middle
No, no, I'm just kidding.

00:21:21.266 --> 00:21:23.456 A:middle
iOS will take care of process

00:21:23.456 --> 00:21:24.236 A:middle
forking for you.

00:21:24.776 --> 00:21:26.726 A:middle
&gt;&gt; We'll deal with number one

00:21:26.726 --> 00:21:27.096 A:middle
for you.

00:21:27.156 --> 00:21:27.976 A:middle
Let's look at number two.

00:21:28.516 --> 00:21:30.816 A:middle
[ Audience Laughter ]

00:21:31.316 --> 00:21:32.416 A:middle
Dynamic linking.

00:21:32.886 --> 00:21:36.666 A:middle
At this phase, we're allocating

00:21:36.666 --> 00:21:38.236 A:middle
memory to begin executing your

00:21:38.236 --> 00:21:38.876 A:middle
application.

00:21:39.926 --> 00:21:41.096 A:middle
We're linking libraries and

00:21:41.096 --> 00:21:41.766 A:middle
frameworks.

00:21:42.676 --> 00:21:43.896 A:middle
We're initializing Swift,

00:21:43.896 --> 00:21:45.476 A:middle
Objective-C, and Foundation.

00:21:46.446 --> 00:21:47.626 A:middle
And, we're doing static object

00:21:47.626 --> 00:21:48.746 A:middle
initialization as well.

00:21:49.286 --> 00:21:51.636 A:middle
And, typically we see this can

00:21:51.636 --> 00:21:54.686 A:middle
take 40 to 50% of the typical

00:21:54.686 --> 00:21:56.466 A:middle
launch time of an app.

00:21:57.016 --> 00:21:58.606 A:middle
And, one key thing to remember

00:21:58.956 --> 00:22:00.476 A:middle
is at this point, none of your

00:21:58.956 --> 00:22:00.476 A:middle
is at this point, none of your

00:22:00.476 --> 00:22:01.146 A:middle
code has run.

00:22:01.706 --> 00:22:03.496 A:middle
So, it's vital that you

00:22:03.496 --> 00:22:05.396 A:middle
understand how to optimize this.

00:22:06.306 --> 00:22:07.186 A:middle
Peter, do you have any great

00:22:07.186 --> 00:22:08.266 A:middle
advice for our developers?

00:22:08.916 --> 00:22:10.206 A:middle
&gt;&gt; I'm happy you asked, Ben.

00:22:10.626 --> 00:22:11.886 A:middle
It's important that you take

00:22:11.886 --> 00:22:14.076 A:middle
great care when optimizing the

00:22:14.076 --> 00:22:15.366 A:middle
linking phase of your app's

00:22:15.366 --> 00:22:15.896 A:middle
launch time.

00:22:16.236 --> 00:22:18.256 A:middle
Because it takes up such a large

00:22:18.256 --> 00:22:21.326 A:middle
amount of your launch time.

00:22:21.546 --> 00:22:23.016 A:middle
My first piece of advice for you

00:22:23.326 --> 00:22:25.066 A:middle
is to avoid code duplication

00:22:25.156 --> 00:22:26.316 A:middle
wherever possible.

00:22:26.546 --> 00:22:29.386 A:middle
If you have redundant functions,

00:22:29.576 --> 00:22:31.846 A:middle
objects, or structs, remove them

00:22:31.846 --> 00:22:32.376 A:middle
from your app.

00:22:32.746 --> 00:22:33.976 A:middle
Don't repeat yourself.

00:22:35.266 --> 00:22:36.716 A:middle
Next, you're going to want to

00:22:36.716 --> 00:22:38.456 A:middle
limit your use of third-party

00:22:38.456 --> 00:22:39.156 A:middle
libraries.

00:22:40.066 --> 00:22:42.056 A:middle
iOS first-party libraries are

00:22:42.056 --> 00:22:44.536 A:middle
cached, and may already be in

00:22:44.536 --> 00:22:46.036 A:middle
active memory if another

00:22:46.036 --> 00:22:47.376 A:middle
application is using them.

00:22:48.466 --> 00:22:50.006 A:middle
But, third-party libraries are

00:22:50.006 --> 00:22:50.856 A:middle
not cached.

00:22:51.256 --> 00:22:52.726 A:middle
Even if another app is using the

00:22:52.726 --> 00:22:54.326 A:middle
same version of a library as

00:22:54.326 --> 00:22:56.246 A:middle
you, we'll still have to pull in

00:22:56.246 --> 00:22:58.026 A:middle
the framework if your app uses

00:22:58.026 --> 00:22:58.166 A:middle
it.

00:22:58.386 --> 00:23:00.166 A:middle
So, you should really limit your

00:22:58.386 --> 00:23:00.166 A:middle
So, you should really limit your

00:23:00.166 --> 00:23:01.226 A:middle
use of these third-party

00:23:01.226 --> 00:23:02.906 A:middle
libraries as much as possible.

00:23:04.006 --> 00:23:05.546 A:middle
And, finally, you're going to

00:23:05.546 --> 00:23:06.926 A:middle
want to avoid static

00:23:06.926 --> 00:23:09.586 A:middle
initializers, and having any

00:23:09.586 --> 00:23:11.076 A:middle
behavior in methods like plus

00:23:11.076 --> 00:23:12.966 A:middle
initialize, and plus load.

00:23:13.426 --> 00:23:15.116 A:middle
Because these have to run before

00:23:15.116 --> 00:23:16.706 A:middle
your app can do any meaningful

00:23:16.706 --> 00:23:17.026 A:middle
work.

00:23:18.556 --> 00:23:19.566 A:middle
&gt;&gt; To learn more about this

00:23:19.566 --> 00:23:21.366 A:middle
vital part of your launch time,

00:23:21.856 --> 00:23:23.316 A:middle
check out App Start-up Time:

00:23:23.366 --> 00:23:25.116 A:middle
Past, Present, and Future from

00:23:25.116 --> 00:23:27.376 A:middle
WWDC 2017.

00:23:28.436 --> 00:23:30.786 A:middle
The next phase of your launch is

00:23:30.786 --> 00:23:31.976 A:middle
your UI Construction.

00:23:32.916 --> 00:23:34.796 A:middle
At this point, you're preparing

00:23:34.796 --> 00:23:36.366 A:middle
your UI, building up your

00:23:36.366 --> 00:23:37.076 A:middle
viewControllers.

00:23:37.516 --> 00:23:40.136 A:middle
The system is doing state

00:23:40.136 --> 00:23:41.596 A:middle
restoration, and loading in your

00:23:41.596 --> 00:23:42.256 A:middle
preferences.

00:23:42.856 --> 00:23:45.026 A:middle
And, you're loading in the data

00:23:45.026 --> 00:23:46.746 A:middle
that you need for your app to

00:23:46.746 --> 00:23:47.626 A:middle
become responsive.

00:23:48.186 --> 00:23:50.996 A:middle
So, Peter, what can we do at

00:23:50.996 --> 00:23:52.026 A:middle
this phase of the launch to

00:23:52.026 --> 00:23:52.536 A:middle
optimize?

00:23:53.636 --> 00:23:54.896 A:middle
&gt;&gt; You'll want to optimize the

00:23:54.896 --> 00:23:56.686 A:middle
UI construction phase to be as

00:23:56.686 --> 00:23:58.276 A:middle
fast as possible for your app.

00:23:59.376 --> 00:24:01.226 A:middle
This means returning as quickly

00:23:59.376 --> 00:24:01.226 A:middle
This means returning as quickly

00:24:01.226 --> 00:24:02.726 A:middle
as possible from the UI

00:24:02.826 --> 00:24:05.076 A:middle
application activation methods.

00:24:05.576 --> 00:24:06.726 A:middle
WillFinishLaunching,

00:24:07.156 --> 00:24:08.606 A:middle
didFinishLaunching, and

00:24:08.606 --> 00:24:09.686 A:middle
didBecomeActive.

00:24:10.096 --> 00:24:11.696 A:middle
Because UIKit waits for you to

00:24:11.696 --> 00:24:13.036 A:middle
return from these functions

00:24:13.356 --> 00:24:15.006 A:middle
before we can mark your app as

00:24:15.006 --> 00:24:15.506 A:middle
active.

00:24:17.096 --> 00:24:18.656 A:middle
Next, you're going to want to

00:24:18.656 --> 00:24:21.436 A:middle
avoid any file system writes

00:24:21.436 --> 00:24:22.886 A:middle
during your application launch,

00:24:23.566 --> 00:24:24.836 A:middle
as these are blocking, and

00:24:24.836 --> 00:24:25.906 A:middle
require a sys call.

00:24:26.916 --> 00:24:28.206 A:middle
Hand in hand with these, you're

00:24:28.206 --> 00:24:29.516 A:middle
going to want to avoid very

00:24:29.516 --> 00:24:31.856 A:middle
large reads during app launch as

00:24:31.856 --> 00:24:32.226 A:middle
well.

00:24:33.076 --> 00:24:35.066 A:middle
Instead, consider streaming in

00:24:35.066 --> 00:24:36.926 A:middle
only the data you absolutely

00:24:36.926 --> 00:24:37.916 A:middle
need right now.

00:24:39.176 --> 00:24:41.106 A:middle
And, finally I encourage you to

00:24:41.106 --> 00:24:42.546 A:middle
check your database hygiene.

00:24:42.776 --> 00:24:44.076 A:middle
It's always a good idea to stay

00:24:44.076 --> 00:24:44.496 A:middle
clean.

00:24:45.486 --> 00:24:47.006 A:middle
If you're using a library like

00:24:47.006 --> 00:24:49.546 A:middle
CoreData, consider optimizing

00:24:49.546 --> 00:24:51.586 A:middle
your schema, to make it as fast

00:24:51.586 --> 00:24:52.216 A:middle
as possible.

00:24:52.886 --> 00:24:53.936 A:middle
And, if you're rolling your own

00:24:53.936 --> 00:24:56.006 A:middle
solution with SQLite, or similar

00:24:56.006 --> 00:24:58.126 A:middle
technology, consider vacuuming

00:24:58.126 --> 00:25:00.026 A:middle
your database at a periodic

00:24:58.126 --> 00:25:00.026 A:middle
your database at a periodic

00:25:00.026 --> 00:25:00.396 A:middle
interval.

00:25:00.706 --> 00:25:02.476 A:middle
For example, every time your app

00:25:02.476 --> 00:25:03.106 A:middle
gets updated.

00:25:04.326 --> 00:25:04.826 A:middle
&gt;&gt; Thanks, Peter.

00:25:06.216 --> 00:25:08.066 A:middle
The next phase of the launch is

00:25:08.066 --> 00:25:09.276 A:middle
when we create your very first

00:25:09.276 --> 00:25:09.586 A:middle
frame.

00:25:10.216 --> 00:25:13.286 A:middle
At this point, core animation is

00:25:13.316 --> 00:25:14.266 A:middle
doing all the rendering

00:25:14.266 --> 00:25:15.526 A:middle
necessary to get that frame

00:25:15.526 --> 00:25:15.776 A:middle
ready.

00:25:17.146 --> 00:25:18.376 A:middle
It's doing text drawing.

00:25:18.626 --> 00:25:19.666 A:middle
And, we're loading and

00:25:19.666 --> 00:25:21.026 A:middle
decompressing any images that

00:25:21.026 --> 00:25:23.186 A:middle
need to be shown in your UI.

00:25:23.186 --> 00:25:25.536 A:middle
So, Peter, do you have any more

00:25:25.536 --> 00:25:27.356 A:middle
sage advice for this phase of

00:25:27.356 --> 00:25:27.806 A:middle
the launch?

00:25:28.776 --> 00:25:29.516 A:middle
&gt;&gt; Oh, do I.

00:25:29.926 --> 00:25:31.416 A:middle
When preparing your first frame,

00:25:31.416 --> 00:25:32.996 A:middle
it's really important that you

00:25:32.996 --> 00:25:35.196 A:middle
take great care to only prepare

00:25:35.196 --> 00:25:36.256 A:middle
the user interface that you

00:25:36.256 --> 00:25:37.896 A:middle
absolutely need during launch

00:25:37.896 --> 00:25:38.196 A:middle
time.

00:25:38.896 --> 00:25:41.106 A:middle
If your user hasn't navigated to

00:25:41.106 --> 00:25:42.486 A:middle
a particular section of your

00:25:42.486 --> 00:25:44.186 A:middle
app, avoid loading it.

00:25:44.386 --> 00:25:46.286 A:middle
And, instead, pull it in lazily

00:25:46.416 --> 00:25:47.616 A:middle
when you absolutely need it.

00:25:48.426 --> 00:25:51.036 A:middle
Also, you should avoid hiding

00:25:51.036 --> 00:25:52.616 A:middle
views and layers that should not

00:25:52.616 --> 00:25:53.936 A:middle
be visible when we first

00:25:53.936 --> 00:25:54.846 A:middle
navigate to your app.

00:25:56.106 --> 00:25:57.296 A:middle
Even when views and layers are

00:25:57.296 --> 00:25:59.456 A:middle
hidden, they still have a cost.

00:25:59.656 --> 00:26:00.866 A:middle
So, only bring in the views and

00:25:59.656 --> 00:26:00.866 A:middle
So, only bring in the views and

00:26:00.866 --> 00:26:02.576 A:middle
layers that you absolutely need

00:26:02.806 --> 00:26:03.726 A:middle
for your first frame.

00:26:05.456 --> 00:26:07.016 A:middle
&gt;&gt; The final phase of your

00:26:07.016 --> 00:26:09.636 A:middle
launch is what we call extended

00:26:09.636 --> 00:26:10.536 A:middle
launch actions.

00:26:12.156 --> 00:26:13.716 A:middle
These are tasks that you have

00:26:13.716 --> 00:26:15.656 A:middle
potentially deferred from your

00:26:15.656 --> 00:26:17.286 A:middle
launch path to help you get

00:26:17.286 --> 00:26:18.266 A:middle
responsive faster.

00:26:19.736 --> 00:26:20.586 A:middle
So, while your app may be

00:26:20.586 --> 00:26:22.766 A:middle
responsive at this point, it may

00:26:22.766 --> 00:26:24.016 A:middle
not be very usable yet.

00:26:24.446 --> 00:26:26.936 A:middle
This phase is really all about

00:26:26.986 --> 00:26:28.786 A:middle
prioritizing what to do next.

00:26:29.506 --> 00:26:30.596 A:middle
Bring in the content that needs

00:26:30.596 --> 00:26:31.676 A:middle
to be onscreen right now.

00:26:33.036 --> 00:26:34.026 A:middle
And also, if you're loading

00:26:34.026 --> 00:26:36.536 A:middle
content from a remote server, be

00:26:36.536 --> 00:26:38.156 A:middle
sure to consider that you may be

00:26:38.156 --> 00:26:39.066 A:middle
in challenging network

00:26:39.066 --> 00:26:39.566 A:middle
conditions.

00:26:40.096 --> 00:26:42.836 A:middle
And, have a placeholder UI ready

00:26:42.836 --> 00:26:43.806 A:middle
to go if necessary.

00:26:44.356 --> 00:26:47.326 A:middle
So, those are the five

00:26:47.326 --> 00:26:49.016 A:middle
high-level components that make

00:26:49.016 --> 00:26:50.836 A:middle
up the anatomy of a launch.

00:26:51.376 --> 00:26:53.776 A:middle
We've one more thing for you

00:26:55.436 --> 00:26:56.486 A:middle
today.

00:26:56.766 --> 00:26:59.116 A:middle
ABM. A: Always.

00:26:59.226 --> 00:27:01.216 A:middle
B: Be. M: Measuring.

00:26:59.226 --> 00:27:01.216 A:middle
B: Be. M: Measuring.

00:27:01.676 --> 00:27:03.516 A:middle
&gt;&gt; Coffee is for quick apps.

00:27:04.466 --> 00:27:05.516 A:middle
&gt;&gt; It's essential that you

00:27:05.516 --> 00:27:07.316 A:middle
understand where your launch

00:27:07.316 --> 00:27:07.966 A:middle
time is going.

00:27:08.636 --> 00:27:10.156 A:middle
So, measure it regularly using

00:27:10.156 --> 00:27:11.076 A:middle
the Time Profiler.

00:27:12.126 --> 00:27:13.326 A:middle
Any time you change code in the

00:27:13.326 --> 00:27:14.566 A:middle
path -- in your launch path,

00:27:14.566 --> 00:27:16.636 A:middle
you'll want to remeasure.

00:27:17.286 --> 00:27:18.936 A:middle
And, take statistical averages.

00:27:19.166 --> 00:27:20.856 A:middle
Don't depend on a single profile

00:27:21.156 --> 00:27:23.896 A:middle
to check your launch time.

00:27:24.086 --> 00:27:25.536 A:middle
So, laser-fast launches.

00:27:26.076 --> 00:27:27.406 A:middle
Get responsive fast.

00:27:27.706 --> 00:27:28.976 A:middle
Use only what you need.

00:27:29.476 --> 00:27:31.226 A:middle
And, measure, measure, measure.

00:27:31.506 --> 00:27:31.686 A:middle
Thank you.

00:27:32.516 --> 00:27:38.826 A:middle
[ Applause ]

00:27:39.326 --> 00:27:41.986 A:middle
&gt;&gt; Scrolling is a key part of

00:27:41.986 --> 00:27:44.466 A:middle
the iOS user experience, and a

00:27:44.566 --> 00:27:46.246 A:middle
huge part of the experience

00:27:46.296 --> 00:27:48.956 A:middle
inside your apps.

00:27:48.956 --> 00:27:51.086 A:middle
iPhone and iPad are magical

00:27:51.086 --> 00:27:52.806 A:middle
sheets of glass that can

00:27:52.806 --> 00:27:54.916 A:middle
transform into anything your app

00:27:54.916 --> 00:27:55.806 A:middle
would like them to be.

00:27:57.096 --> 00:27:58.896 A:middle
So, it's important that you work

00:27:58.986 --> 00:28:00.536 A:middle
to help preserve this illusion

00:27:58.986 --> 00:28:00.536 A:middle
to help preserve this illusion

00:28:00.536 --> 00:28:02.416 A:middle
of your app's content sliding on

00:28:02.416 --> 00:28:03.826 A:middle
this magic sheet of glass.

00:28:05.116 --> 00:28:06.776 A:middle
At Apple, we've got a phrase

00:28:06.776 --> 00:28:07.956 A:middle
that we like to say, that your

00:28:07.956 --> 00:28:09.736 A:middle
app should feel smooth like

00:28:09.736 --> 00:28:10.046 A:middle
butter.

00:28:10.896 --> 00:28:13.446 A:middle
But, from time to time, you have

00:28:13.446 --> 00:28:15.226 A:middle
some hitches and stutters that

00:28:15.226 --> 00:28:16.936 A:middle
make it feel less like butter,

00:28:17.606 --> 00:28:18.926 A:middle
and more like peanut butter.

00:28:20.296 --> 00:28:21.426 A:middle
And, you've seen this before.

00:28:21.426 --> 00:28:22.786 A:middle
Your app feels choppy or

00:28:22.786 --> 00:28:23.316 A:middle
stuttery.

00:28:24.786 --> 00:28:26.726 A:middle
Ben, what are some causes of the

00:28:26.726 --> 00:28:28.256 A:middle
slow behavior in apps?

00:28:29.186 --> 00:28:30.656 A:middle
&gt;&gt; Well, Peter, this slow

00:28:30.656 --> 00:28:31.866 A:middle
behavior that you're describing

00:28:32.076 --> 00:28:34.166 A:middle
is really that we're dropping

00:28:34.166 --> 00:28:34.646 A:middle
frames.

00:28:35.316 --> 00:28:36.476 A:middle
And so, we need to understand

00:28:36.476 --> 00:28:37.466 A:middle
why that might be happening.

00:28:37.466 --> 00:28:39.216 A:middle
And, there are two key areas

00:28:39.416 --> 00:28:40.316 A:middle
where this can happen.

00:28:41.046 --> 00:28:42.386 A:middle
The first is you could be doing

00:28:42.426 --> 00:28:43.666 A:middle
too much computation.

00:28:44.716 --> 00:28:46.366 A:middle
And, the second is you could be

00:28:46.366 --> 00:28:48.196 A:middle
doing too much complex graphics

00:28:48.196 --> 00:28:48.836 A:middle
compositing.

00:28:50.236 --> 00:28:51.416 A:middle
Let's look at each of these in

00:28:51.416 --> 00:28:53.766 A:middle
turn, starting with computation.

00:28:55.056 --> 00:28:56.346 A:middle
How do you know if you're doing

00:28:56.346 --> 00:28:57.286 A:middle
too much computation?

00:28:58.656 --> 00:29:00.656 A:middle
Well, the Time Profiler, built

00:28:58.656 --> 00:29:00.656 A:middle
Well, the Time Profiler, built

00:29:00.656 --> 00:29:01.816 A:middle
into Instruments, is the

00:29:01.816 --> 00:29:02.796 A:middle
ultimate tool for this.

00:29:04.036 --> 00:29:05.586 A:middle
It can give you down to the line

00:29:05.916 --> 00:29:07.686 A:middle
measurements for just how much

00:29:07.796 --> 00:29:09.366 A:middle
CPU time your code is using.

00:29:10.236 --> 00:29:12.226 A:middle
It's a really powerful tool, and

00:29:12.226 --> 00:29:13.336 A:middle
we encourage you to go and check

00:29:13.336 --> 00:29:14.876 A:middle
out Using the Time Profiler in

00:29:14.876 --> 00:29:17.556 A:middle
Instruments from WWDC 2016.

00:29:18.936 --> 00:29:20.176 A:middle
&gt;&gt; So, once you've identified

00:29:20.176 --> 00:29:21.956 A:middle
these hot spots, using the Time

00:29:21.956 --> 00:29:23.916 A:middle
Profiler tool, we've got some

00:29:23.916 --> 00:29:25.716 A:middle
great tips for you to optimize

00:29:25.716 --> 00:29:25.896 A:middle
them.

00:29:27.306 --> 00:29:28.476 A:middle
The first is to use

00:29:28.476 --> 00:29:30.686 A:middle
UICollectionView and UITableView

00:29:30.686 --> 00:29:31.496 A:middle
prefetching.

00:29:32.296 --> 00:29:33.656 A:middle
These are pieces of API that

00:29:33.656 --> 00:29:35.456 A:middle
will tell you while the user is

00:29:35.456 --> 00:29:36.976 A:middle
scrolling towards particular

00:29:36.976 --> 00:29:38.816 A:middle
cells, and can give you an

00:29:38.816 --> 00:29:40.386 A:middle
opportunity to preload that

00:29:40.386 --> 00:29:40.696 A:middle
data.

00:29:41.676 --> 00:29:43.396 A:middle
There was a wonderful talk given

00:29:43.396 --> 00:29:45.096 A:middle
by two very handsome presenters

00:29:45.096 --> 00:29:47.136 A:middle
on this in 2016 that I encourage

00:29:47.136 --> 00:29:47.636 A:middle
you to watch.

00:29:49.216 --> 00:29:51.146 A:middle
The next tip that I have for

00:29:51.146 --> 00:29:53.226 A:middle
you, is to push as much work as

00:29:53.226 --> 00:29:55.226 A:middle
possible off of the main queue

00:29:55.436 --> 00:29:56.876 A:middle
and onto background queues,

00:29:57.166 --> 00:29:58.446 A:middle
freeing up the main queue to

00:29:58.636 --> 00:30:00.606 A:middle
update your UI and handle user

00:29:58.636 --> 00:30:00.606 A:middle
update your UI and handle user

00:30:00.606 --> 00:30:00.946 A:middle
input.

00:30:01.046 --> 00:30:04.136 A:middle
Ben, what kind of work can we

00:30:04.136 --> 00:30:05.156 A:middle
push off the main queue?

00:30:06.186 --> 00:30:06.956 A:middle
&gt;&gt; Well, there's some usual

00:30:06.956 --> 00:30:08.086 A:middle
stuff that you might expect,

00:30:08.736 --> 00:30:10.696 A:middle
like network and file system

00:30:10.696 --> 00:30:11.216 A:middle
access.

00:30:11.566 --> 00:30:12.606 A:middle
These should never be running on

00:30:12.606 --> 00:30:13.156 A:middle
the main thread.

00:30:13.456 --> 00:30:15.116 A:middle
But, maybe some other stuff that

00:30:15.116 --> 00:30:16.836 A:middle
you might not expect, like image

00:30:16.836 --> 00:30:17.866 A:middle
drawing and text sizing.

00:30:18.996 --> 00:30:20.916 A:middle
UIGraphicsImageRenderer, and its

00:30:20.916 --> 00:30:22.826 A:middle
distributed string, both have

00:30:22.976 --> 00:30:24.456 A:middle
functions available that are

00:30:24.456 --> 00:30:25.606 A:middle
safe to use on a background

00:30:25.606 --> 00:30:27.216 A:middle
thread, that might just help you

00:30:27.216 --> 00:30:29.546 A:middle
move some of that complex

00:30:29.576 --> 00:30:31.236 A:middle
computation off of your main

00:30:31.236 --> 00:30:31.506 A:middle
queue.

00:30:32.776 --> 00:30:34.406 A:middle
&gt;&gt; Wow, Ben, those are great

00:30:34.406 --> 00:30:34.756 A:middle
tips.

00:30:34.756 --> 00:30:35.946 A:middle
I never would have thought to do

00:30:35.946 --> 00:30:37.376 A:middle
that off of the main queue.

00:30:38.246 --> 00:30:40.396 A:middle
So, let's say I've run the Time

00:30:40.396 --> 00:30:40.996 A:middle
Profiler.

00:30:41.316 --> 00:30:42.896 A:middle
I've used prefetching, just like

00:30:42.896 --> 00:30:44.046 A:middle
those guys told me to.

00:30:44.226 --> 00:30:45.466 A:middle
And, I've pushed as much work as

00:30:45.466 --> 00:30:46.836 A:middle
possible off of the main queue,

00:30:47.816 --> 00:30:49.296 A:middle
but my app is still slow.

00:30:50.016 --> 00:30:51.516 A:middle
Surely this isn't my problem,

00:30:51.516 --> 00:30:51.986 A:middle
right Ben?

00:30:53.056 --> 00:30:54.226 A:middle
&gt;&gt; Well, Peter, we may not be

00:30:54.226 --> 00:30:55.576 A:middle
out of the woods just yet.

00:30:56.416 --> 00:30:57.976 A:middle
While we may have optimized our

00:30:57.976 --> 00:31:00.276 A:middle
computation, we could still be

00:30:57.976 --> 00:31:00.276 A:middle
computation, we could still be

00:31:00.276 --> 00:31:01.666 A:middle
having problems with our

00:31:01.666 --> 00:31:02.486 A:middle
graphics system.

00:31:04.946 --> 00:31:06.156 A:middle
Fortunately, there's another

00:31:06.156 --> 00:31:07.346 A:middle
great tool available here.

00:31:07.936 --> 00:31:11.286 A:middle
The Core Animation instrument is

00:31:11.286 --> 00:31:12.986 A:middle
a really powerful way to see

00:31:12.986 --> 00:31:14.306 A:middle
exactly what your frame rate is

00:31:14.346 --> 00:31:14.656 A:middle
doing.

00:31:15.296 --> 00:31:16.686 A:middle
And, also at the same time,

00:31:16.936 --> 00:31:18.636 A:middle
looking at your GPU utilization.

00:31:20.076 --> 00:31:21.506 A:middle
It's another really powerful

00:31:21.506 --> 00:31:21.866 A:middle
tool.

00:31:22.156 --> 00:31:23.276 A:middle
And, to learn all about how to

00:31:23.276 --> 00:31:24.846 A:middle
use it, check out Advanced

00:31:24.846 --> 00:31:26.306 A:middle
Graphics and Animations for iOS

00:31:26.306 --> 00:31:30.636 A:middle
Apps from WWDC 2014.

00:31:30.746 --> 00:31:31.956 A:middle
&gt;&gt; Once you've identified that

00:31:31.956 --> 00:31:33.816 A:middle
your app is graphics-bound,

00:31:34.146 --> 00:31:35.776 A:middle
we've got some great low-hanging

00:31:35.776 --> 00:31:37.096 A:middle
fruit for you to investigate.

00:31:38.396 --> 00:31:39.396 A:middle
Usually, you have a

00:31:39.396 --> 00:31:40.886 A:middle
graphics-bound app due to

00:31:40.886 --> 00:31:42.986 A:middle
overuse of one of two things:

00:31:43.696 --> 00:31:45.826 A:middle
visual effects, or masking and

00:31:45.826 --> 00:31:46.276 A:middle
clipping.

00:31:47.186 --> 00:31:49.226 A:middle
Visual effects, like blur and

00:31:49.226 --> 00:31:51.476 A:middle
vibrancy, are expensive, and so

00:31:51.476 --> 00:31:52.876 A:middle
you should use them tastefully

00:31:53.056 --> 00:31:53.936 A:middle
within your apps.

00:31:54.896 --> 00:31:56.766 A:middle
You should also definitely avoid

00:31:56.906 --> 00:31:58.686 A:middle
things like blurs on blurs on

00:31:58.686 --> 00:32:00.616 A:middle
blurs, as this will cause the

00:31:58.686 --> 00:32:00.616 A:middle
blurs, as this will cause the

00:32:00.616 --> 00:32:02.576 A:middle
GPU to work in overdrive,

00:32:02.726 --> 00:32:03.746 A:middle
slowing down your app.

00:32:04.756 --> 00:32:07.196 A:middle
Also, you should avoid masking

00:32:07.196 --> 00:32:09.116 A:middle
and clipping wherever possible.

00:32:10.056 --> 00:32:11.926 A:middle
Instead, if you can achieve the

00:32:11.926 --> 00:32:14.636 A:middle
same visual appearance by just

00:32:14.636 --> 00:32:16.576 A:middle
placing opaque content on top of

00:32:16.576 --> 00:32:18.186 A:middle
your views, then I would

00:32:18.186 --> 00:32:19.286 A:middle
encourage you to too that,

00:32:19.536 --> 00:32:20.706 A:middle
instead of using the masked

00:32:20.706 --> 00:32:23.126 A:middle
view, or masked property of

00:32:23.166 --> 00:32:24.406 A:middle
UIViewer CA Layer.

00:32:25.496 --> 00:32:27.046 A:middle
So, that's how we can optimize

00:32:27.206 --> 00:32:28.756 A:middle
smooth scrolling performance.

00:32:29.366 --> 00:32:30.656 A:middle
Make sure to run the Time

00:32:30.656 --> 00:32:32.216 A:middle
Profiler, and Core Animation

00:32:32.216 --> 00:32:33.786 A:middle
instruments on your apps.

00:32:35.066 --> 00:32:36.756 A:middle
Use prefetching, and push as

00:32:36.756 --> 00:32:38.326 A:middle
much work as possible off of the

00:32:38.326 --> 00:32:38.986 A:middle
main queue.

00:32:39.526 --> 00:32:42.866 A:middle
And, try to use visual effects,

00:32:42.866 --> 00:32:44.086 A:middle
and masking and clipping

00:32:44.366 --> 00:32:45.046 A:middle
sparingly.

00:32:46.006 --> 00:32:47.766 A:middle
For even more information about

00:32:47.766 --> 00:32:49.656 A:middle
profiling, check out this great

00:32:49.656 --> 00:32:51.726 A:middle
talk from WWDC 2015.

00:32:51.726 --> 00:32:51.956 A:middle
Thank you.

00:32:52.516 --> 00:32:56.306 A:middle
[ Applause ]

00:32:56.806 --> 00:32:58.446 A:middle
&gt;&gt; Continuity is one of the most

00:32:58.446 --> 00:33:00.486 A:middle
magical experiences across Apple

00:32:58.446 --> 00:33:00.486 A:middle
magical experiences across Apple

00:33:00.486 --> 00:33:01.096 A:middle
platforms.

00:33:02.356 --> 00:33:04.676 A:middle
And, Handoff is a fantastic way

00:33:04.676 --> 00:33:06.486 A:middle
to truly delight your customers.

00:33:07.746 --> 00:33:10.096 A:middle
The ability to take a task from

00:33:10.096 --> 00:33:12.476 A:middle
one device, and seamlessly

00:33:12.476 --> 00:33:14.516 A:middle
transition it to another device

00:33:15.306 --> 00:33:16.976 A:middle
is an absolutely awesome

00:33:16.976 --> 00:33:17.546 A:middle
experience.

00:33:19.096 --> 00:33:20.836 A:middle
Handoff works between iOS,

00:33:21.306 --> 00:33:22.596 A:middle
macOS, and watchOS.

00:33:23.736 --> 00:33:24.906 A:middle
It doesn't require an internet

00:33:24.906 --> 00:33:26.006 A:middle
connection because it uses

00:33:26.046 --> 00:33:27.806 A:middle
peer-to-peer connectivity, and

00:33:28.436 --> 00:33:30.626 A:middle
best of all for all of you, is

00:33:30.626 --> 00:33:32.606 A:middle
it's really easy to set up.

00:33:33.396 --> 00:33:35.016 A:middle
So, how should you think about

00:33:35.016 --> 00:33:36.136 A:middle
using Handoff in your

00:33:36.136 --> 00:33:36.706 A:middle
applications?

00:33:38.106 --> 00:33:39.116 A:middle
Well, let's go through a few

00:33:39.116 --> 00:33:41.346 A:middle
examples of how we do it in some

00:33:41.346 --> 00:33:42.776 A:middle
of our Apple apps.

00:33:43.466 --> 00:33:45.506 A:middle
Let's say I get a message from

00:33:45.506 --> 00:33:47.926 A:middle
my handsome co-presenter, and I

00:33:47.926 --> 00:33:49.726 A:middle
want to reply on my iPhone X

00:33:49.726 --> 00:33:50.946 A:middle
with a humorous animoji.

00:33:52.286 --> 00:33:53.636 A:middle
Well, I can get right back into

00:33:53.636 --> 00:33:55.356 A:middle
that conversation, right from

00:33:55.356 --> 00:33:57.986 A:middle
the App Switcher on iOS.

00:33:58.876 --> 00:34:00.316 A:middle
&gt;&gt; Or, if I'm editing a document

00:33:58.876 --> 00:34:00.316 A:middle
&gt;&gt; Or, if I'm editing a document

00:34:00.316 --> 00:34:03.496 A:middle
in Pages on my Mac, and I have

00:34:03.496 --> 00:34:04.726 A:middle
to run, and I want to hand it

00:34:04.726 --> 00:34:06.956 A:middle
off to my iPad, I can do so by

00:34:06.956 --> 00:34:10.056 A:middle
tapping the icon in the Dock.

00:34:10.206 --> 00:34:11.626 A:middle
&gt;&gt; Or, again, if I'm casually

00:34:11.626 --> 00:34:14.366 A:middle
browsing photos on my watch, and

00:34:14.366 --> 00:34:16.436 A:middle
I find one from a previous WWDC,

00:34:16.436 --> 00:34:17.485 A:middle
and I just want to go and look

00:34:17.485 --> 00:34:18.755 A:middle
at all the photos in that album,

00:34:19.585 --> 00:34:21.085 A:middle
I can get right back into my

00:34:21.085 --> 00:34:22.456 A:middle
Photo library on my iPhone,

00:34:22.656 --> 00:34:23.906 A:middle
without having to go search for

00:34:23.906 --> 00:34:24.786 A:middle
that one photo.

00:34:26.176 --> 00:34:28.266 A:middle
Handoff is really powerful, and

00:34:28.266 --> 00:34:29.706 A:middle
it can save your customers so

00:34:29.706 --> 00:34:31.306 A:middle
much time when moving from

00:34:31.306 --> 00:34:32.116 A:middle
device to device.

00:34:32.815 --> 00:34:35.346 A:middle
So, we're going to show you just

00:34:35.346 --> 00:34:36.556 A:middle
how easy it is to adopt.

00:34:36.856 --> 00:34:38.565 A:middle
And, it's all built on top of

00:34:38.565 --> 00:34:40.936 A:middle
the NSUserActivity API.

00:34:41.806 --> 00:34:44.266 A:middle
NSUserActivity represents a

00:34:44.266 --> 00:34:46.335 A:middle
current state or activity that

00:34:46.335 --> 00:34:47.255 A:middle
you're currently doing.

00:34:47.806 --> 00:34:49.126 A:middle
In this case, we're composing an

00:34:49.126 --> 00:34:49.416 A:middle
email.

00:34:52.636 --> 00:34:54.616 A:middle
When this activity is created,

00:34:55.085 --> 00:34:56.726 A:middle
all of the nearby devices that

00:34:56.726 --> 00:34:58.186 A:middle
are signed into the same iCloud

00:34:58.186 --> 00:35:01.006 A:middle
account all show that Handoff is

00:34:58.186 --> 00:35:01.006 A:middle
account all show that Handoff is

00:35:01.006 --> 00:35:01.476 A:middle
available.

00:35:02.586 --> 00:35:04.106 A:middle
On the Mac, you'll see an icon

00:35:04.346 --> 00:35:06.516 A:middle
down in the Dock.

00:35:06.746 --> 00:35:08.706 A:middle
When you click on this Mail

00:35:08.706 --> 00:35:10.216 A:middle
icon, the activity will be

00:35:10.216 --> 00:35:13.366 A:middle
transferred over to the Mac, and

00:35:13.366 --> 00:35:14.906 A:middle
Mail can launch and continue

00:35:14.906 --> 00:35:15.956 A:middle
exactly where you left off.

00:35:18.416 --> 00:35:19.686 A:middle
So, let's look at the code

00:35:19.686 --> 00:35:21.926 A:middle
necessary to set this up.

00:35:24.416 --> 00:35:26.236 A:middle
On the originating device, you

00:35:26.236 --> 00:35:27.386 A:middle
start by creating your

00:35:27.426 --> 00:35:29.076 A:middle
NSUserActivity with a given

00:35:29.166 --> 00:35:29.356 A:middle
type.

00:35:30.536 --> 00:35:31.546 A:middle
And, this type represents the

00:35:31.546 --> 00:35:33.456 A:middle
kind of activity that your user

00:35:33.456 --> 00:35:34.366 A:middle
is currently doing.

00:35:34.906 --> 00:35:37.906 A:middle
You then set a title, and set

00:35:37.906 --> 00:35:39.636 A:middle
isEligibleForHandoff to true.

00:35:40.996 --> 00:35:42.186 A:middle
And you then want to populate

00:35:42.186 --> 00:35:43.606 A:middle
your userInfo dictionary.

00:35:44.576 --> 00:35:45.636 A:middle
And, you need to fill this with

00:35:45.686 --> 00:35:47.736 A:middle
all the information necessary to

00:35:47.736 --> 00:35:48.996 A:middle
be able to continue the

00:35:48.996 --> 00:35:49.636 A:middle
activity.

00:35:50.806 --> 00:35:52.356 A:middle
In this case, our example is a

00:35:52.356 --> 00:35:53.876 A:middle
video, and we're including a

00:35:53.876 --> 00:35:55.766 A:middle
video ID, and a current play

00:35:55.836 --> 00:35:55.976 A:middle
time.

00:35:58.266 --> 00:35:59.966 A:middle
Finally, you'll want to set this

00:35:59.966 --> 00:36:00.816 A:middle
activity to your

00:35:59.966 --> 00:36:00.816 A:middle
activity to your

00:36:00.816 --> 00:36:02.376 A:middle
viewController's userActivity

00:36:02.376 --> 00:36:02.876 A:middle
property.

00:36:04.016 --> 00:36:05.276 A:middle
This will cause it to become the

00:36:05.276 --> 00:36:06.836 A:middle
current activity, whenever that

00:36:06.836 --> 00:36:08.056 A:middle
viewController is presented.

00:36:09.526 --> 00:36:10.326 A:middle
And, that's all you need to do

00:36:10.326 --> 00:36:11.356 A:middle
on the originating device.

00:36:12.946 --> 00:36:14.776 A:middle
On the continuing device, first

00:36:14.776 --> 00:36:15.886 A:middle
of all, your app needs to

00:36:15.886 --> 00:36:18.096 A:middle
declare support for the type of

00:36:18.096 --> 00:36:19.316 A:middle
activity that you created.

00:36:20.186 --> 00:36:21.606 A:middle
Then, you need to implement two

00:36:21.846 --> 00:36:23.656 A:middle
UIApplicationDelegate callbacks.

00:36:24.736 --> 00:36:25.926 A:middle
The first is application

00:36:25.926 --> 00:36:26.796 A:middle
willContinueUser

00:36:26.796 --> 00:36:27.616 A:middle
ActivityWithType.

00:36:27.956 --> 00:36:29.646 A:middle
And, this is called as soon as

00:36:29.646 --> 00:36:32.086 A:middle
you click or tap on the icon to

00:36:32.086 --> 00:36:33.216 A:middle
initiate the handoff.

00:36:34.356 --> 00:36:36.016 A:middle
At this point, we don't have the

00:36:36.016 --> 00:36:37.616 A:middle
NSUserActivity object ready yet,

00:36:38.376 --> 00:36:39.436 A:middle
but you know the kind of

00:36:39.436 --> 00:36:40.306 A:middle
activity that's going to be

00:36:40.306 --> 00:36:42.136 A:middle
continued, so you can begin

00:36:42.136 --> 00:36:43.916 A:middle
preparing your UI.

00:36:44.506 --> 00:36:46.316 A:middle
Very shortly after, you'll

00:36:46.316 --> 00:36:46.696 A:middle
receive

00:36:46.696 --> 00:36:48.716 A:middle
applicationContinueRestoration

00:36:48.716 --> 00:36:50.876 A:middle
handler, which will contain the

00:36:50.876 --> 00:36:52.016 A:middle
fully reconstructed

00:36:52.016 --> 00:36:53.296 A:middle
NSUserActivity object.

00:36:53.706 --> 00:36:56.496 A:middle
From that point, you can set up

00:36:56.496 --> 00:36:58.766 A:middle
and continue the experience

00:36:58.766 --> 00:36:59.526 A:middle
right on that device.

00:37:01.006 --> 00:37:01.896 A:middle
&gt;&gt; If you've got more

00:37:01.896 --> 00:37:03.376 A:middle
information than can fit in a

00:37:03.376 --> 00:37:05.206 A:middle
userInfo dictionary, there's

00:37:05.206 --> 00:37:07.006 A:middle
great feature of NSUserActivity

00:37:07.006 --> 00:37:08.506 A:middle
that you can use, called

00:37:08.506 --> 00:37:10.006 A:middle
continuation streams.

00:37:10.776 --> 00:37:12.366 A:middle
All you have to do is set the

00:37:12.366 --> 00:37:14.126 A:middle
supportsContinuationStreams

00:37:14.126 --> 00:37:15.356 A:middle
property to true.

00:37:16.276 --> 00:37:18.706 A:middle
Then, on the continuing device,

00:37:19.206 --> 00:37:19.836 A:middle
you'll call the

00:37:19.836 --> 00:37:22.986 A:middle
getContinuationStreams method on

00:37:22.986 --> 00:37:24.836 A:middle
the NSUserActivity, which will

00:37:24.836 --> 00:37:26.466 A:middle
provide you with an input and an

00:37:26.466 --> 00:37:27.386 A:middle
output stream.

00:37:28.506 --> 00:37:30.196 A:middle
Back on the originating device,

00:37:30.796 --> 00:37:32.586 A:middle
the NSUserActivity's delegate

00:37:32.586 --> 00:37:33.846 A:middle
will receive a callback

00:37:34.076 --> 00:37:35.586 A:middle
providing it with input and

00:37:35.586 --> 00:37:36.836 A:middle
output streams as well.

00:37:37.856 --> 00:37:39.526 A:middle
And, through these channels, you

00:37:39.526 --> 00:37:40.556 A:middle
can do bi-directional

00:37:40.556 --> 00:37:42.276 A:middle
communication between the

00:37:42.276 --> 00:37:44.076 A:middle
originating and the continuing

00:37:44.076 --> 00:37:44.566 A:middle
device.

00:37:45.236 --> 00:37:46.006 A:middle
But, you're going to want to

00:37:46.006 --> 00:37:47.906 A:middle
finish this as fast as possible,

00:37:47.906 --> 00:37:49.736 A:middle
because the user may be moving

00:37:49.736 --> 00:37:51.286 A:middle
the devices apart to leave.

00:37:52.536 --> 00:37:54.276 A:middle
For more about streams, check

00:37:54.276 --> 00:37:55.886 A:middle
out the Stream Programming Guide

00:37:55.886 --> 00:37:57.376 A:middle
on developer.apple.com.

00:37:57.896 --> 00:38:00.176 A:middle
&gt;&gt; Now, this is great for moving

00:37:57.896 --> 00:38:00.176 A:middle
&gt;&gt; Now, this is great for moving

00:38:00.176 --> 00:38:01.096 A:middle
things that wouldn't be

00:38:01.096 --> 00:38:01.976 A:middle
appropriate to put in the

00:38:01.976 --> 00:38:03.986 A:middle
userInfo dictionary, like images

00:38:03.986 --> 00:38:05.856 A:middle
or video content, such as in our

00:38:05.856 --> 00:38:07.336 A:middle
email handoff example earlier.

00:38:08.376 --> 00:38:09.816 A:middle
But, for document-based apps,

00:38:10.326 --> 00:38:11.676 A:middle
the handoff story is even

00:38:11.726 --> 00:38:12.216 A:middle
easier.

00:38:13.166 --> 00:38:14.216 A:middle
Because you get much of this

00:38:14.216 --> 00:38:15.146 A:middle
behavior for free.

00:38:16.296 --> 00:38:17.846 A:middle
UIDocument and NSDocument

00:38:17.846 --> 00:38:19.066 A:middle
automatically create

00:38:19.196 --> 00:38:20.976 A:middle
NSUserActivity objects to

00:38:20.976 --> 00:38:22.446 A:middle
represent the document that is

00:38:22.446 --> 00:38:23.546 A:middle
currently being edited.

00:38:24.086 --> 00:38:26.846 A:middle
And, this works great for all

00:38:26.846 --> 00:38:29.746 A:middle
documents stored in iCloud.

00:38:30.006 --> 00:38:31.096 A:middle
All you have to do in your

00:38:31.096 --> 00:38:32.726 A:middle
applications is configure your

00:38:32.726 --> 00:38:33.836 A:middle
info.plist accordingly.

00:38:34.426 --> 00:38:37.416 A:middle
In addition to app-to-app

00:38:37.416 --> 00:38:39.856 A:middle
handoff, we also support

00:38:39.856 --> 00:38:41.776 A:middle
app-to-web browser handoff.

00:38:43.146 --> 00:38:44.476 A:middle
If you have a great web

00:38:44.476 --> 00:38:46.516 A:middle
experience to go alongside your

00:38:46.516 --> 00:38:49.226 A:middle
native app experience, and the

00:38:49.226 --> 00:38:50.596 A:middle
continuing device doesn't have

00:38:50.596 --> 00:38:52.856 A:middle
your native app installed, you

00:38:52.856 --> 00:38:54.906 A:middle
can handoff to Safari, and

00:38:54.906 --> 00:38:56.496 A:middle
continue the activity right in

00:38:56.526 --> 00:38:58.696 A:middle
the web browser.

00:38:58.856 --> 00:39:00.846 A:middle
&gt;&gt; Handoff also supports web

00:38:58.856 --> 00:39:00.846 A:middle
&gt;&gt; Handoff also supports web

00:39:00.846 --> 00:39:02.606 A:middle
browser-to-app handoffs.

00:39:03.576 --> 00:39:05.206 A:middle
You need to configure a list of

00:39:05.206 --> 00:39:06.766 A:middle
approved app IDs on your web

00:39:06.766 --> 00:39:08.756 A:middle
server, and then you need to add

00:39:08.756 --> 00:39:10.576 A:middle
an associated domain entitlement

00:39:11.066 --> 00:39:12.106 A:middle
in your iOS app.

00:39:12.646 --> 00:39:13.986 A:middle
And then, the user can

00:39:13.986 --> 00:39:15.516 A:middle
seamlessly continue from your

00:39:15.516 --> 00:39:17.616 A:middle
web experience to your app on

00:39:17.616 --> 00:39:18.126 A:middle
iOS.

00:39:18.876 --> 00:39:20.616 A:middle
For even more about this, check

00:39:20.616 --> 00:39:22.706 A:middle
out this great Handoff talk from

00:39:22.706 --> 00:39:23.726 A:middle
2014.

00:39:24.246 --> 00:39:26.796 A:middle
&gt;&gt; So, that's Handoff.

00:39:27.566 --> 00:39:28.896 A:middle
Go out and implement it in your

00:39:28.896 --> 00:39:29.706 A:middle
applications.

00:39:29.936 --> 00:39:32.256 A:middle
Truly delight your users, and as

00:39:32.256 --> 00:39:33.756 A:middle
an added bonus, the

00:39:33.756 --> 00:39:35.806 A:middle
NSUserActivity API is used all

00:39:35.806 --> 00:39:37.146 A:middle
over the system experiences.

00:39:37.296 --> 00:39:38.656 A:middle
In things like Spotlight search,

00:39:38.796 --> 00:39:40.116 A:middle
and the new Siri Shortcuts

00:39:40.116 --> 00:39:40.426 A:middle
feature.

00:39:41.826 --> 00:39:43.376 A:middle
For more about these, check out

00:39:43.376 --> 00:39:44.676 A:middle
these talks, from previous

00:39:44.676 --> 00:39:44.916 A:middle
WWDCs.

00:39:44.916 --> 00:39:45.446 A:middle
Thank you.

00:39:46.516 --> 00:39:52.500 A:middle
[ Applause ]

00:39:56.866 --> 00:39:58.936 A:middle
&gt;&gt; You write amazing apps and

00:39:58.936 --> 00:39:59.846 A:middle
experiences.

00:40:00.956 --> 00:40:02.996 A:middle
But, from time to time, you have

00:40:03.076 --> 00:40:04.006 A:middle
problems that you need to

00:40:04.006 --> 00:40:04.706 A:middle
investigate.

00:40:05.466 --> 00:40:07.286 A:middle
And, for that, we're going to

00:40:07.286 --> 00:40:09.256 A:middle
teach you some Matrix-level

00:40:09.256 --> 00:40:10.176 A:middle
debugging skills.

00:40:10.566 --> 00:40:12.866 A:middle
But first, a word of warning.

00:40:14.236 --> 00:40:15.986 A:middle
Before we give you this red

00:40:15.986 --> 00:40:17.616 A:middle
pill, and show you just how deep

00:40:17.616 --> 00:40:19.836 A:middle
the rabbit hole goes, I want to

00:40:19.836 --> 00:40:21.056 A:middle
let you know that the methods

00:40:21.056 --> 00:40:22.246 A:middle
that we're going to show you in

00:40:22.246 --> 00:40:23.976 A:middle
this section are great for

00:40:23.976 --> 00:40:25.866 A:middle
debugging, but must not be

00:40:25.866 --> 00:40:27.116 A:middle
submitted to the App Store.

00:40:27.946 --> 00:40:29.726 A:middle
If you do, your application will

00:40:29.726 --> 00:40:31.046 A:middle
be rejected, and you'll have a

00:40:31.046 --> 00:40:31.606 A:middle
bad day.

00:40:32.476 --> 00:40:34.056 A:middle
So, with that warning, let's get

00:40:34.056 --> 00:40:34.516 A:middle
started.

00:40:35.036 --> 00:40:37.276 A:middle
We're going to start with a

00:40:37.276 --> 00:40:38.576 A:middle
detective mindset.

00:40:38.966 --> 00:40:40.836 A:middle
How you should approach problems

00:40:40.836 --> 00:40:41.946 A:middle
that you find in your program.

00:40:42.976 --> 00:40:44.366 A:middle
Next, we're going to talk to you

00:40:44.366 --> 00:40:45.886 A:middle
about how to debug issues with

00:40:45.886 --> 00:40:47.466 A:middle
your views and view controllers.

00:40:48.306 --> 00:40:49.406 A:middle
We're going to teach you about

00:40:49.406 --> 00:40:51.436 A:middle
LLDB, and how you can use it to

00:40:51.436 --> 00:40:53.066 A:middle
identify state issues in your

00:40:53.066 --> 00:40:53.386 A:middle
app.

00:40:54.336 --> 00:40:55.516 A:middle
And finally, we're going to look

00:40:55.516 --> 00:40:56.906 A:middle
at some techniques for some

00:40:56.906 --> 00:40:58.716 A:middle
great memory issues that you

00:40:58.716 --> 00:41:00.356 A:middle
might run into that make you

00:40:58.716 --> 00:41:00.356 A:middle
might run into that make you

00:41:00.356 --> 00:41:01.646 A:middle
feel less than great.

00:41:01.996 --> 00:41:04.326 A:middle
So, let's start with a detective

00:41:04.326 --> 00:41:04.956 A:middle
mindset.

00:41:05.896 --> 00:41:07.716 A:middle
When you're looking at a problem

00:41:07.716 --> 00:41:09.286 A:middle
in your program, you want to

00:41:09.286 --> 00:41:10.566 A:middle
make sure to verify your

00:41:10.566 --> 00:41:11.266 A:middle
assumptions.

00:41:11.656 --> 00:41:13.206 A:middle
What do you expect your program

00:41:13.206 --> 00:41:13.866 A:middle
to be doing?

00:41:14.006 --> 00:41:15.356 A:middle
And then, verify that it's

00:41:15.356 --> 00:41:16.336 A:middle
actually doing that.

00:41:17.086 --> 00:41:18.686 A:middle
This can be a great step, when

00:41:18.686 --> 00:41:20.056 A:middle
you start to debug issues in

00:41:20.056 --> 00:41:20.476 A:middle
your app.

00:41:21.996 --> 00:41:23.516 A:middle
Once you're pretty sure which of

00:41:23.516 --> 00:41:24.656 A:middle
your assumptions is being

00:41:24.656 --> 00:41:27.956 A:middle
violated, you can start by

00:41:27.956 --> 00:41:29.196 A:middle
looking for clues.

00:41:30.126 --> 00:41:31.316 A:middle
You'll use the tools that we'll

00:41:31.316 --> 00:41:33.196 A:middle
show you during this section to

00:41:33.196 --> 00:41:34.956 A:middle
poke and prod at your objects

00:41:34.956 --> 00:41:35.676 A:middle
and structs.

00:41:36.736 --> 00:41:38.126 A:middle
And then, you're going to want

00:41:38.126 --> 00:41:40.156 A:middle
to test your hunches, by

00:41:40.156 --> 00:41:42.176 A:middle
changing state in your app, and

00:41:42.176 --> 00:41:43.256 A:middle
verifying that you found the

00:41:43.256 --> 00:41:43.656 A:middle
issue.

00:41:44.816 --> 00:41:46.416 A:middle
Let's start with a sample bug

00:41:46.576 --> 00:41:47.666 A:middle
that's a real bug.

00:41:47.726 --> 00:41:50.406 A:middle
One of the great things that I

00:41:50.406 --> 00:41:51.596 A:middle
get the privilege of working on

00:41:51.596 --> 00:41:53.466 A:middle
here at Apple, is the screenshot

00:41:53.466 --> 00:41:53.846 A:middle
editor.

00:41:54.896 --> 00:41:56.456 A:middle
Recently, we were debugging an

00:41:56.456 --> 00:41:58.576 A:middle
issue, where my screenshot pen

00:41:58.576 --> 00:42:00.346 A:middle
tools were missing, which is

00:41:58.576 --> 00:42:00.346 A:middle
tools were missing, which is

00:42:00.346 --> 00:42:00.986 A:middle
pretty bad.

00:42:01.546 --> 00:42:04.656 A:middle
Ben, are there any tools we can

00:42:04.656 --> 00:42:06.276 A:middle
use to help diagnose this issue?

00:42:07.246 --> 00:42:07.826 A:middle
&gt;&gt; Absolutely.

00:42:08.556 --> 00:42:10.566 A:middle
Built right into Xcode, is the

00:42:10.566 --> 00:42:11.466 A:middle
View Debugger.

00:42:12.476 --> 00:42:13.726 A:middle
You can launch it by simply

00:42:13.726 --> 00:42:14.696 A:middle
clicking on this icon in the

00:42:14.696 --> 00:42:15.526 A:middle
bottom toolbar.

00:42:16.606 --> 00:42:18.526 A:middle
And, Xcode will show you a 3D

00:42:18.526 --> 00:42:20.136 A:middle
representation of your entire

00:42:20.136 --> 00:42:20.986 A:middle
view hierarchy.

00:42:21.516 --> 00:42:24.596 A:middle
As you can see here, our pencil

00:42:24.596 --> 00:42:26.506 A:middle
controls are still there, but

00:42:26.506 --> 00:42:27.956 A:middle
they're being occluded by this

00:42:27.956 --> 00:42:29.406 A:middle
full screen view in front of it.

00:42:30.686 --> 00:42:31.576 A:middle
So, we need to go and look at

00:42:31.626 --> 00:42:32.736 A:middle
where we're building this UI,

00:42:32.846 --> 00:42:33.736 A:middle
and see what's happening with

00:42:33.736 --> 00:42:34.526 A:middle
the ordering there, Peter, I

00:42:34.526 --> 00:42:34.786 A:middle
think.

00:42:36.036 --> 00:42:36.726 A:middle
&gt;&gt; That's great.

00:42:36.936 --> 00:42:38.396 A:middle
The Xcode View Debugger is a

00:42:38.396 --> 00:42:40.046 A:middle
wonderful tool for debugging

00:42:40.046 --> 00:42:41.616 A:middle
view issues in your app.

00:42:42.806 --> 00:42:44.216 A:middle
There are even more tools that

00:42:44.216 --> 00:42:46.536 A:middle
you can use to help out with

00:42:47.776 --> 00:42:47.876 A:middle
this.

00:42:48.096 --> 00:42:50.036 A:middle
UIView recursiveDescription,

00:42:50.696 --> 00:42:52.826 A:middle
UIView parentDescription, and

00:42:53.096 --> 00:42:54.156 A:middle
the class method

00:42:54.156 --> 00:42:56.196 A:middle
UIViewController printHierarchy

00:42:56.796 --> 00:42:58.566 A:middle
are great tools for debugging

00:42:58.566 --> 00:42:59.856 A:middle
view and view controller issues

00:43:00.036 --> 00:43:01.796 A:middle
in your app.

00:43:01.956 --> 00:43:03.966 A:middle
Again, they're also great things

00:43:03.966 --> 00:43:05.326 A:middle
to not include when you submit

00:43:05.326 --> 00:43:06.006 A:middle
to the App Store.

00:43:07.436 --> 00:43:08.716 A:middle
It's important to note that

00:43:08.716 --> 00:43:10.646 A:middle
these are Objective-C selectors.

00:43:11.146 --> 00:43:12.466 A:middle
So, before using them, you'll

00:43:12.466 --> 00:43:14.316 A:middle
want to put your debugger into

00:43:14.316 --> 00:43:16.706 A:middle
Objective-C mode, using this

00:43:16.706 --> 00:43:17.166 A:middle
command.

00:43:18.276 --> 00:43:19.826 A:middle
We're going to walk through each

00:43:19.826 --> 00:43:20.996 A:middle
of these debugging methods,

00:43:21.146 --> 00:43:22.976 A:middle
step-by-step, and how they can

00:43:22.976 --> 00:43:25.366 A:middle
help you, starting with UIView

00:43:25.526 --> 00:43:27.196 A:middle
recursiveDescription.

00:43:28.616 --> 00:43:29.526 A:middle
&gt;&gt; So, UIView

00:43:29.526 --> 00:43:31.796 A:middle
recursiveDescription will print

00:43:31.826 --> 00:43:34.136 A:middle
the view hierarchy of the

00:43:34.136 --> 00:43:35.156 A:middle
receiver -- the subview

00:43:35.156 --> 00:43:35.606 A:middle
hierarchy.

00:43:36.096 --> 00:43:37.996 A:middle
And, some associated properties

00:43:38.196 --> 00:43:39.256 A:middle
to help you understand the

00:43:39.256 --> 00:43:40.216 A:middle
layout attributes.

00:43:40.706 --> 00:43:42.896 A:middle
Let's take a look at an example.

00:43:43.696 --> 00:43:44.536 A:middle
We have another bug in our

00:43:44.536 --> 00:43:46.086 A:middle
screenshots UI with a missing

00:43:46.086 --> 00:43:46.386 A:middle
view.

00:43:47.686 --> 00:43:48.276 A:middle
So, we're going to call

00:43:48.276 --> 00:43:49.926 A:middle
recursiveDescription on our

00:43:49.926 --> 00:43:51.516 A:middle
viewController's view.

00:43:52.086 --> 00:43:55.086 A:middle
Now, this might look like a wall

00:43:55.086 --> 00:43:56.346 A:middle
of debug text, and that's

00:43:56.346 --> 00:43:57.166 A:middle
because it is.

00:43:57.626 --> 00:43:59.916 A:middle
But, we know what we're looking

00:43:59.916 --> 00:44:00.196 A:middle
for.

00:43:59.916 --> 00:44:00.196 A:middle
for.

00:44:00.196 --> 00:44:02.206 A:middle
Our screenshots view is there.

00:44:02.206 --> 00:44:03.256 A:middle
We can see it.

00:44:03.506 --> 00:44:05.606 A:middle
And, on inspection, we can see

00:44:05.606 --> 00:44:06.656 A:middle
that it is currently hidden.

00:44:07.226 --> 00:44:09.266 A:middle
So, we need to go and look at

00:44:09.266 --> 00:44:10.786 A:middle
everywhere we're setting the

00:44:10.786 --> 00:44:11.876 A:middle
hidden property on this view,

00:44:11.876 --> 00:44:13.366 A:middle
and really understand why it's

00:44:14.086 --> 00:44:15.406 A:middle
not showing.

00:44:16.236 --> 00:44:16.736 A:middle
In addition to

00:44:16.736 --> 00:44:18.626 A:middle
recursiveDescription, UIView

00:44:18.626 --> 00:44:20.166 A:middle
also has parentDescription,

00:44:20.476 --> 00:44:21.666 A:middle
which will walk up the view

00:44:21.666 --> 00:44:24.046 A:middle
hierarchy to the parent views,

00:44:24.946 --> 00:44:26.486 A:middle
until it reaches no -- to a nil

00:44:26.486 --> 00:44:26.866 A:middle
parent.

00:44:27.536 --> 00:44:28.626 A:middle
It'll print the same kind of

00:44:28.626 --> 00:44:29.536 A:middle
debugging information.

00:44:31.856 --> 00:44:33.476 A:middle
&gt;&gt; RecursiveDescription and

00:44:33.476 --> 00:44:35.206 A:middle
parentDescription are great for

00:44:35.206 --> 00:44:36.326 A:middle
UIView issues.

00:44:36.946 --> 00:44:38.066 A:middle
But, sometimes you have a

00:44:38.066 --> 00:44:40.016 A:middle
problem with UIViewControllers.

00:44:40.246 --> 00:44:41.736 A:middle
And, for that you can use the

00:44:41.736 --> 00:44:43.026 A:middle
great class method,

00:44:43.406 --> 00:44:45.686 A:middle
UIViewController printHierarchy.

00:44:47.026 --> 00:44:48.536 A:middle
Recently we had a bug in our

00:44:48.536 --> 00:44:50.286 A:middle
screenshot editor, where one of

00:44:50.286 --> 00:44:51.676 A:middle
our viewControllers had not yet

00:44:51.676 --> 00:44:53.296 A:middle
received the viewDidAppear

00:44:53.296 --> 00:44:53.846 A:middle
message.

00:44:54.266 --> 00:44:55.366 A:middle
And so, it hadn't set up its

00:44:55.366 --> 00:44:56.256 A:middle
state appropriately.

00:44:57.316 --> 00:44:58.916 A:middle
By running UIViewController

00:44:58.986 --> 00:45:01.136 A:middle
printHierarchy, we can get an

00:44:58.986 --> 00:45:01.136 A:middle
printHierarchy, we can get an

00:45:01.136 --> 00:45:02.746 A:middle
output of all of our presenting

00:45:02.746 --> 00:45:04.826 A:middle
viewControllers, our presented

00:45:04.826 --> 00:45:06.926 A:middle
viewControllers, our

00:45:06.976 --> 00:45:08.246 A:middle
parentViewControllers and

00:45:08.246 --> 00:45:10.466 A:middle
childViewControllers, and even

00:45:10.466 --> 00:45:11.966 A:middle
our presentationControllers.

00:45:12.306 --> 00:45:13.616 A:middle
It's Controllerpalooza.

00:45:14.436 --> 00:45:16.466 A:middle
So, let's run printHierarchy in

00:45:16.466 --> 00:45:17.296 A:middle
our screenshot UI.

00:45:19.176 --> 00:45:20.906 A:middle
Here we can see our

00:45:20.906 --> 00:45:22.136 A:middle
viewController hierarchy.

00:45:22.476 --> 00:45:23.506 A:middle
And, when we inspect the

00:45:23.506 --> 00:45:24.716 A:middle
viewController that we're having

00:45:24.716 --> 00:45:26.476 A:middle
the problem with, we can see

00:45:26.476 --> 00:45:28.096 A:middle
that it's stuck in the appearing

00:45:28.096 --> 00:45:28.486 A:middle
state.

00:45:29.366 --> 00:45:30.936 A:middle
So, we had missed a callback.

00:45:31.136 --> 00:45:32.666 A:middle
And so, we need to look into our

00:45:32.666 --> 00:45:34.256 A:middle
app to where we're calling this

00:45:34.286 --> 00:45:35.986 A:middle
callback, and then we found the

00:45:35.986 --> 00:45:36.396 A:middle
issue.

00:45:37.516 --> 00:45:38.136 A:middle
So, great.

00:45:38.576 --> 00:45:39.956 A:middle
Using these methods, you can

00:45:39.956 --> 00:45:41.926 A:middle
identify view and viewController

00:45:41.926 --> 00:45:42.476 A:middle
issues.

00:45:43.156 --> 00:45:44.366 A:middle
But, sometimes you have a more

00:45:44.366 --> 00:45:46.156 A:middle
fundamental issue with your app.

00:45:46.976 --> 00:45:48.716 A:middle
And, for that we can use some

00:45:48.716 --> 00:45:50.326 A:middle
great state debugging tips that

00:45:50.326 --> 00:45:50.986 A:middle
we have for you.

00:45:52.016 --> 00:45:55.066 A:middle
LLDB's expression command can

00:45:55.066 --> 00:45:56.766 A:middle
let you run arbitrary code in

00:45:56.766 --> 00:45:57.296 A:middle
the debugger.

00:45:58.066 --> 00:45:58.786 A:middle
Think about that.

00:45:58.786 --> 00:46:00.676 A:middle
Any code that you can run in the

00:45:58.786 --> 00:46:00.676 A:middle
Any code that you can run in the

00:46:00.676 --> 00:46:02.376 A:middle
source editor, you can write

00:46:02.376 --> 00:46:03.986 A:middle
right in the debugger, and run

00:46:04.216 --> 00:46:05.696 A:middle
while your program is running.

00:46:06.406 --> 00:46:08.446 A:middle
This is so useful for debugging.

00:46:09.166 --> 00:46:10.416 A:middle
You can call functions on your

00:46:10.416 --> 00:46:12.496 A:middle
structs, get properties on your

00:46:12.496 --> 00:46:14.816 A:middle
objects, and better diagnose

00:46:14.926 --> 00:46:16.146 A:middle
what your program is doing.

00:46:17.176 --> 00:46:18.726 A:middle
For even more about debugging,

00:46:19.136 --> 00:46:20.856 A:middle
check out this great talk on how

00:46:20.856 --> 00:46:23.286 A:middle
to debug with LLDB from 2012,

00:46:23.866 --> 00:46:25.776 A:middle
and how to debug with Swift from

00:46:25.776 --> 00:46:26.826 A:middle
2014.

00:46:27.796 --> 00:46:29.376 A:middle
There's some great functions

00:46:29.376 --> 00:46:31.346 A:middle
that you can run inside of LLDB

00:46:31.346 --> 00:46:33.006 A:middle
with the expression command,

00:46:33.116 --> 00:46:34.236 A:middle
that we're going to teach you.

00:46:34.486 --> 00:46:35.976 A:middle
And, the first one, is dump.

00:46:36.516 --> 00:46:40.906 A:middle
[ Laughter ]

00:46:41.406 --> 00:46:43.446 A:middle
&gt;&gt; Dump will print all of your

00:46:43.446 --> 00:46:45.866 A:middle
Swift objects and structs

00:46:46.286 --> 00:46:46.816 A:middle
properties.

00:46:48.246 --> 00:46:49.656 A:middle
Let's go through another bug

00:46:50.066 --> 00:46:51.536 A:middle
that we have in some of our

00:46:51.536 --> 00:46:52.106 A:middle
custom UI.

00:46:53.686 --> 00:46:55.076 A:middle
We have a view with a number of

00:46:55.156 --> 00:46:57.906 A:middle
subviews, including some labels,

00:46:57.906 --> 00:46:58.676 A:middle
and an imageView.

00:46:59.026 --> 00:47:00.566 A:middle
And, right now one of our labels

00:46:59.026 --> 00:47:00.566 A:middle
And, right now one of our labels

00:47:00.566 --> 00:47:01.046 A:middle
is missing.

00:47:02.276 --> 00:47:03.286 A:middle
So, we're going to run dump on

00:47:03.286 --> 00:47:05.636 A:middle
our parent view, and take a look

00:47:05.636 --> 00:47:06.396 A:middle
at what's going on here.

00:47:07.906 --> 00:47:08.796 A:middle
So, we've found our missing

00:47:08.796 --> 00:47:09.246 A:middle
label.

00:47:09.246 --> 00:47:12.046 A:middle
It is here, but it's -- if we

00:47:12.046 --> 00:47:13.076 A:middle
bring up and look at the

00:47:13.116 --> 00:47:14.906 A:middle
imageView that's alongside it,

00:47:15.756 --> 00:47:18.236 A:middle
we notice that the frame of

00:47:18.236 --> 00:47:19.896 A:middle
these two things, they both have

00:47:19.896 --> 00:47:20.926 A:middle
the same origin.

00:47:22.126 --> 00:47:22.916 A:middle
So, what's likely happening

00:47:22.916 --> 00:47:24.366 A:middle
here, is that the label is

00:47:24.366 --> 00:47:26.226 A:middle
obstructed by the imageView.

00:47:27.296 --> 00:47:28.086 A:middle
So, we need to go and look at

00:47:28.086 --> 00:47:29.826 A:middle
our layout code again, I think.

00:47:30.576 --> 00:47:34.136 A:middle
In addition to dump for Swift

00:47:34.136 --> 00:47:36.406 A:middle
objects, if you still have some

00:47:36.406 --> 00:47:37.816 A:middle
Objective-C code lying around,

00:47:38.606 --> 00:47:40.306 A:middle
NSObject also has the

00:47:40.366 --> 00:47:41.546 A:middle
ivarDescription method.

00:47:42.856 --> 00:47:44.146 A:middle
This will print all of the

00:47:44.146 --> 00:47:45.676 A:middle
instance variables of your

00:47:45.676 --> 00:47:46.806 A:middle
Objective-C objects.

00:47:48.546 --> 00:47:49.986 A:middle
We have another bug in our

00:47:49.986 --> 00:47:51.716 A:middle
screenshot's code, where our

00:47:51.716 --> 00:47:53.176 A:middle
crop handles aren't working for

00:47:53.176 --> 00:47:53.626 A:middle
some reason.

00:47:54.116 --> 00:47:57.786 A:middle
If we call ivarDescription on

00:47:57.786 --> 00:47:59.926 A:middle
our screenshot's view, we can

00:47:59.926 --> 00:48:02.826 A:middle
see by looking closely, that our

00:47:59.926 --> 00:48:02.826 A:middle
see by looking closely, that our

00:48:02.826 --> 00:48:06.156 A:middle
cropEnabled ivar is currently

00:48:06.776 --> 00:48:07.686 A:middle
set to no.

00:48:07.766 --> 00:48:09.156 A:middle
So, we have a good place to

00:48:09.306 --> 00:48:10.536 A:middle
start investigating this bug.

00:48:11.876 --> 00:48:12.596 A:middle
&gt;&gt; That's great.

00:48:13.296 --> 00:48:15.756 A:middle
Using dump and ivarDescription

00:48:15.876 --> 00:48:17.436 A:middle
are great ways to diagnose

00:48:17.466 --> 00:48:20.016 A:middle
problems with your app.

00:48:20.246 --> 00:48:22.226 A:middle
Another wonderful debugging tip

00:48:22.226 --> 00:48:23.426 A:middle
and trick that we have for you

00:48:23.726 --> 00:48:24.726 A:middle
is breakpoints.

00:48:25.726 --> 00:48:27.366 A:middle
Breakpoints let you pause the

00:48:27.366 --> 00:48:28.966 A:middle
program at arbitrary states of

00:48:28.966 --> 00:48:31.526 A:middle
execution, and run commands.

00:48:32.546 --> 00:48:34.916 A:middle
And, using the LLDB command

00:48:34.916 --> 00:48:37.396 A:middle
line, or the Xcode UI, you can

00:48:37.396 --> 00:48:39.296 A:middle
even add conditions before these

00:48:39.296 --> 00:48:40.976 A:middle
breakpoints are run, and

00:48:40.976 --> 00:48:42.586 A:middle
commands to run every time the

00:48:42.586 --> 00:48:43.486 A:middle
breakpoint is hit.

00:48:44.676 --> 00:48:46.086 A:middle
Breakpoints are an essential

00:48:46.086 --> 00:48:47.586 A:middle
part of your debugging workflow.

00:48:48.126 --> 00:48:49.476 A:middle
And, you can use the expression

00:48:49.476 --> 00:48:51.246 A:middle
command, and dump, and

00:48:51.246 --> 00:48:52.956 A:middle
ivarDescription, with the

00:48:52.956 --> 00:48:54.136 A:middle
breakpoints that you set up in

00:48:54.136 --> 00:48:54.496 A:middle
Xcode.

00:48:54.956 --> 00:48:56.736 A:middle
I really encourage you to use

00:48:56.736 --> 00:48:58.166 A:middle
breakpoints next time you're

00:48:58.166 --> 00:48:59.586 A:middle
debugging an issue with your

00:49:00.296 --> 00:49:00.386 A:middle
app.

00:49:01.296 --> 00:49:02.846 A:middle
But, sometimes we don't have an

00:49:02.846 --> 00:49:03.736 A:middle
issue with views or

00:49:03.736 --> 00:49:04.706 A:middle
viewControllers.

00:49:05.316 --> 00:49:06.656 A:middle
We don't have an issue with

00:49:06.656 --> 00:49:09.126 A:middle
state, instead we have a really

00:49:09.126 --> 00:49:11.036 A:middle
hairy memory management issue.

00:49:12.246 --> 00:49:13.626 A:middle
Ben, are there any tools we can

00:49:13.626 --> 00:49:14.316 A:middle
use for this?

00:49:15.416 --> 00:49:16.196 A:middle
&gt;&gt; Well, I'm glad you asked

00:49:16.196 --> 00:49:17.826 A:middle
Peter, because yes, there is

00:49:17.826 --> 00:49:19.456 A:middle
another great tool built into

00:49:19.456 --> 00:49:19.886 A:middle
Xcode.

00:49:20.486 --> 00:49:21.746 A:middle
The Xcode memory debugger.

00:49:22.346 --> 00:49:24.776 A:middle
This tool will help you

00:49:24.776 --> 00:49:26.396 A:middle
visualize exactly how your

00:49:26.396 --> 00:49:27.806 A:middle
application is using memory.

00:49:29.296 --> 00:49:30.796 A:middle
Peter and I were debugging an

00:49:30.796 --> 00:49:31.666 A:middle
issue the other day, where we

00:49:31.666 --> 00:49:32.916 A:middle
had a leaking viewController.

00:49:33.816 --> 00:49:35.046 A:middle
And, we could see that here that

00:49:35.046 --> 00:49:36.516 A:middle
it's being held onto by a block.

00:49:37.846 --> 00:49:39.106 A:middle
By enabling Malloc stack

00:49:39.106 --> 00:49:40.616 A:middle
logging, we were able to see the

00:49:40.616 --> 00:49:42.966 A:middle
full backtrace of exactly when

00:49:42.966 --> 00:49:44.066 A:middle
this block was allocated.

00:49:44.626 --> 00:49:47.486 A:middle
By zooming in, we can see that

00:49:47.486 --> 00:49:49.026 A:middle
this block was actually created

00:49:49.266 --> 00:49:50.356 A:middle
by that viewController.

00:49:51.406 --> 00:49:52.666 A:middle
And so, that block is holding

00:49:52.666 --> 00:49:53.696 A:middle
onto that viewController.

00:49:54.116 --> 00:49:55.246 A:middle
But that viewController is also

00:49:55.246 --> 00:49:56.076 A:middle
holding onto the block.

00:49:57.236 --> 00:49:58.316 A:middle
And, there's our retain cycle.

00:49:59.616 --> 00:49:59.976 A:middle
&gt;&gt; Wow.

00:50:00.086 --> 00:50:01.966 A:middle
Great! The Xcode memory graph

00:50:01.966 --> 00:50:03.766 A:middle
debugger is such a great tool

00:50:03.766 --> 00:50:05.606 A:middle
for diagnosing issues like this

00:50:05.736 --> 00:50:06.276 A:middle
in your app.

00:50:07.156 --> 00:50:08.656 A:middle
For even more, check out the

00:50:08.656 --> 00:50:10.426 A:middle
Debugging with Xcode 9 talk from

00:50:10.426 --> 00:50:11.656 A:middle
2017.

00:50:12.176 --> 00:50:14.756 A:middle
So, that's how you can debug

00:50:14.756 --> 00:50:16.256 A:middle
your app like a pro.

00:50:18.496 --> 00:50:20.426 A:middle
Make sure to think like a

00:50:20.426 --> 00:50:22.356 A:middle
detective whenever you encounter

00:50:22.356 --> 00:50:23.746 A:middle
problems with your program.

00:50:25.166 --> 00:50:27.776 A:middle
Use the Xcode view debugger, and

00:50:27.776 --> 00:50:29.896 A:middle
memory graph debugger to dive

00:50:29.896 --> 00:50:31.796 A:middle
deep on view- and memory-related

00:50:31.796 --> 00:50:32.326 A:middle
issues.

00:50:33.026 --> 00:50:36.066 A:middle
And, use LLDB's expression

00:50:36.586 --> 00:50:39.216 A:middle
command with dump, and all the

00:50:39.216 --> 00:50:40.596 A:middle
other great debugging methods we

00:50:40.596 --> 00:50:41.446 A:middle
talked about here.

00:50:44.316 --> 00:50:44.976 A:middle
Thank you.

00:50:45.516 --> 00:50:51.846 A:middle
[ Applause ]

00:50:52.346 --> 00:50:54.356 A:middle
&gt;&gt; So, we've covered six really

00:50:54.356 --> 00:50:55.716 A:middle
exciting topics this morning,

00:50:56.306 --> 00:50:56.946 A:middle
this afternoon.

00:50:56.946 --> 00:50:59.836 A:middle
But, we've barely scratched the

00:50:59.836 --> 00:51:00.436 A:middle
surface.

00:50:59.836 --> 00:51:00.436 A:middle
surface.

00:51:00.966 --> 00:51:02.036 A:middle
We encourage you to go out and

00:51:02.036 --> 00:51:03.036 A:middle
check out the talks that we

00:51:03.036 --> 00:51:03.886 A:middle
referenced throughout this

00:51:03.886 --> 00:51:05.916 A:middle
presentation, and add even more

00:51:05.916 --> 00:51:07.566 A:middle
delight to your applications.

00:51:08.536 --> 00:51:10.156 A:middle
&gt;&gt; For more information, check

00:51:10.156 --> 00:51:11.456 A:middle
out our page on the developer

00:51:11.456 --> 00:51:13.156 A:middle
portal, and thank you.

00:51:13.156 --> 00:51:14.036 A:middle
We hope you had a great

00:51:14.036 --> 00:51:14.606 A:middle
conference.

00:51:14.756 --> 00:51:15.336 A:middle
&gt;&gt; Thank you.
