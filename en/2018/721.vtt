WEBVTT

00:00:07.516 --> 00:00:15.500 A:middle
[ Music ]

00:00:18.046 --> 00:00:19.216 A:middle
&gt;&gt; Hello, and welcome to the

00:00:19.216 --> 00:00:20.916 A:middle
session on implementing AutoFill

00:00:20.916 --> 00:00:22.386 A:middle
Credential Provider Extensions.

00:00:23.846 --> 00:00:25.246 A:middle
In this video, I'll first give

00:00:25.246 --> 00:00:26.506 A:middle
an overview of the Password

00:00:26.506 --> 00:00:28.006 A:middle
AutoFill feature and how it is

00:00:28.006 --> 00:00:29.186 A:middle
improved in iOS 12.

00:00:30.386 --> 00:00:31.986 A:middle
After that I'll go into detail

00:00:31.986 --> 00:00:33.546 A:middle
about how Password Manager apps

00:00:33.606 --> 00:00:34.786 A:middle
can now integrate with Password

00:00:34.786 --> 00:00:37.056 A:middle
AutoFill using new APIs in iOS

00:00:37.056 --> 00:00:37.326 A:middle
12.

00:00:38.846 --> 00:00:39.886 A:middle
And along the way, I will

00:00:39.886 --> 00:00:41.256 A:middle
recommend a few best practices

00:00:41.256 --> 00:00:42.746 A:middle
to take as you adopt these new

00:00:42.746 --> 00:00:43.866 A:middle
APIs.

00:00:45.556 --> 00:00:47.486 A:middle
First, let's talk about Password

00:00:47.486 --> 00:00:47.906 A:middle
AutoFill.

00:00:50.696 --> 00:00:52.596 A:middle
iOS 11 brought two major

00:00:52.596 --> 00:00:53.506 A:middle
improvements to Password

00:00:53.506 --> 00:00:53.946 A:middle
AutoFill.

00:00:54.776 --> 00:00:56.186 A:middle
First, the most relevant

00:00:56.186 --> 00:00:57.266 A:middle
credentials were displayed

00:00:57.266 --> 00:00:58.416 A:middle
directly on the QuickType bar,

00:00:58.706 --> 00:00:59.876 A:middle
so they're only one tap away,

00:01:00.786 --> 00:01:02.466 A:middle
and second, iOS 11 brought

00:01:02.466 --> 00:01:04.025 A:middle
password AutoFill to apps.

00:01:04.506 --> 00:01:05.836 A:middle
This makes it super convenient

00:01:05.916 --> 00:01:07.166 A:middle
to use credentials from iCloud

00:01:07.166 --> 00:01:08.826 A:middle
keychain, whether they're needed

00:01:08.826 --> 00:01:10.846 A:middle
on the web or in apps, like the

00:01:10.846 --> 00:01:12.006 A:middle
shiny app you just saw.

00:01:13.996 --> 00:01:17.046 A:middle
And new in iOS and tvOS 12, you

00:01:17.046 --> 00:01:18.426 A:middle
can also use password AutoFill

00:01:18.526 --> 00:01:20.306 A:middle
in Apple TV apps by selecting

00:01:20.306 --> 00:01:21.716 A:middle
credentials to fill from an iOS

00:01:21.716 --> 00:01:23.476 A:middle
device.

00:01:23.476 --> 00:01:24.456 A:middle
These features are great for

00:01:24.456 --> 00:01:26.006 A:middle
users of iCloud keychain, but

00:01:26.006 --> 00:01:27.186 A:middle
some users rely on other

00:01:27.186 --> 00:01:28.406 A:middle
password manager apps to store

00:01:28.406 --> 00:01:29.116 A:middle
their credentials.

00:01:30.656 --> 00:01:32.136 A:middle
To make it just as convenient

00:01:32.136 --> 00:01:33.346 A:middle
for these users to access their

00:01:33.346 --> 00:01:35.736 A:middle
safe credentials, iOS 12 allows

00:01:35.736 --> 00:01:37.036 A:middle
password manager apps to

00:01:37.036 --> 00:01:38.446 A:middle
participate in AutoFill for the

00:01:38.446 --> 00:01:39.656 A:middle
same experience as iCloud

00:01:39.656 --> 00:01:40.046 A:middle
Keychain.

00:01:41.736 --> 00:01:44.346 A:middle
In iOS 12, there is a new UI for

00:01:44.346 --> 00:01:45.676 A:middle
password AutoFill settings,

00:01:45.926 --> 00:01:47.476 A:middle
which allows users to select an

00:01:47.476 --> 00:01:48.776 A:middle
app to provide credentials to

00:01:48.776 --> 00:01:51.126 A:middle
AutoFill, in addition to or

00:01:51.126 --> 00:01:52.406 A:middle
instead of iCloud Keychain.

00:01:52.586 --> 00:01:56.006 A:middle
Using the QuickType bar, the

00:01:56.936 --> 00:01:58.146 A:middle
user can bring up a list of

00:01:58.146 --> 00:01:59.266 A:middle
their credentials saved in the

00:01:59.266 --> 00:02:00.036 A:middle
password manager.

00:01:59.266 --> 00:02:00.036 A:middle
password manager.

00:02:00.876 --> 00:02:02.146 A:middle
This UI is provided by an

00:02:02.146 --> 00:02:03.296 A:middle
extension bundled with the

00:02:03.296 --> 00:02:04.146 A:middle
password manager app.

00:02:04.146 --> 00:02:06.656 A:middle
When a credential is selected,

00:02:06.976 --> 00:02:07.986 A:middle
the extension hands it back to

00:02:07.986 --> 00:02:10.515 A:middle
AutoFill, and the username and

00:02:10.515 --> 00:02:11.686 A:middle
password are filled in the app.

00:02:12.326 --> 00:02:15.126 A:middle
Of course, this also works with

00:02:15.126 --> 00:02:16.356 A:middle
the QuickType bar suggestions as

00:02:16.356 --> 00:02:16.626 A:middle
well.

00:02:17.186 --> 00:02:18.386 A:middle
AutoFill can now surface the

00:02:18.386 --> 00:02:19.796 A:middle
best credentials as defined by

00:02:19.796 --> 00:02:21.396 A:middle
the app, so they're accessible

00:02:21.646 --> 00:02:22.416 A:middle
with just one tap.

00:02:23.956 --> 00:02:25.486 A:middle
When using these credentials,

00:02:25.606 --> 00:02:27.016 A:middle
the app extension can optionally

00:02:27.016 --> 00:02:28.596 A:middle
show its own UI to authenticate

00:02:28.596 --> 00:02:29.666 A:middle
the user before filling the

00:02:29.666 --> 00:02:30.106 A:middle
credential.

00:02:33.116 --> 00:02:34.796 A:middle
This integration makes logging

00:02:34.796 --> 00:02:36.506 A:middle
into apps even easier for users

00:02:36.506 --> 00:02:38.076 A:middle
of password manager apps, as

00:02:38.076 --> 00:02:39.066 A:middle
they no longer need to switch

00:02:39.066 --> 00:02:40.436 A:middle
apps to copy their credentials.

00:02:41.846 --> 00:02:43.216 A:middle
It also makes Password AutoFill

00:02:43.216 --> 00:02:44.426 A:middle
available in more apps.

00:02:44.836 --> 00:02:46.346 A:middle
Any app that supports AutoFill

00:02:46.346 --> 00:02:47.826 A:middle
from iCloud Keychain will now

00:02:47.826 --> 00:02:49.336 A:middle
work with Password Manager apps,

00:02:49.336 --> 00:02:50.346 A:middle
without any additional work.

00:02:50.826 --> 00:02:54.726 A:middle
With that overview, let's dive

00:02:54.726 --> 00:02:55.926 A:middle
into how you can implement these

00:02:55.926 --> 00:02:57.336 A:middle
capabilities in your password

00:02:57.336 --> 00:02:57.926 A:middle
manager app.

00:02:58.576 --> 00:02:59.666 A:middle
There are four main steps I'll

00:02:59.666 --> 00:02:59.946 A:middle
cover.

00:03:02.336 --> 00:03:04.006 A:middle
First, you'll need to configure

00:03:04.006 --> 00:03:05.426 A:middle
your project to take advantage

00:03:05.426 --> 00:03:06.536 A:middle
of some new APIs.

00:03:07.226 --> 00:03:08.106 A:middle
This involves adding a

00:03:08.106 --> 00:03:09.706 A:middle
capability to your app and an

00:03:09.706 --> 00:03:11.006 A:middle
extension to your project.

00:03:11.526 --> 00:03:13.116 A:middle
AutoFill will use this extension

00:03:13.116 --> 00:03:14.136 A:middle
when it needs to consult your

00:03:14.136 --> 00:03:16.636 A:middle
app or show its UI across the

00:03:17.696 --> 00:03:18.006 A:middle
system.

00:03:18.036 --> 00:03:19.566 A:middle
Next, your extension will need

00:03:19.566 --> 00:03:20.786 A:middle
to support showing the user a

00:03:20.786 --> 00:03:21.896 A:middle
list of their credentials to

00:03:21.896 --> 00:03:23.256 A:middle
choose from when they open your

00:03:23.256 --> 00:03:24.346 A:middle
extension from the QuickType

00:03:24.346 --> 00:03:24.536 A:middle
bar.

00:03:26.736 --> 00:03:28.626 A:middle
After that, if you want AutoFill

00:03:28.626 --> 00:03:29.746 A:middle
to show your app's credentials

00:03:29.746 --> 00:03:31.226 A:middle
in the QuickType bar, you will

00:03:31.226 --> 00:03:32.466 A:middle
need to add support for this by

00:03:32.466 --> 00:03:33.566 A:middle
telling the system about the

00:03:33.566 --> 00:03:34.656 A:middle
credentials you want to show,

00:03:35.116 --> 00:03:36.536 A:middle
and implementing another API in

00:03:36.536 --> 00:03:37.856 A:middle
your extension to respond to

00:03:37.856 --> 00:03:38.746 A:middle
users selecting those

00:03:38.746 --> 00:03:39.326 A:middle
credentials.

00:03:40.856 --> 00:03:42.236 A:middle
And finally, you may want to

00:03:42.236 --> 00:03:43.536 A:middle
take advantage of an API that

00:03:43.536 --> 00:03:44.886 A:middle
will allow you to present your

00:03:44.886 --> 00:03:46.806 A:middle
extension's UI when users enable

00:03:46.806 --> 00:03:47.876 A:middle
your Password Manager in

00:03:47.876 --> 00:03:48.356 A:middle
Settings.

00:03:49.096 --> 00:03:50.096 A:middle
Let's talk about these steps in

00:03:50.096 --> 00:03:50.546 A:middle
more detail.

00:03:53.016 --> 00:03:54.646 A:middle
First, you will need to make a

00:03:54.646 --> 00:03:55.826 A:middle
few changes to your project.

00:03:56.456 --> 00:03:57.506 A:middle
This starts with enabling

00:03:57.506 --> 00:03:59.356 A:middle
AutoFill Credential Provider in

00:03:59.356 --> 00:04:00.556 A:middle
your app's capabilities.

00:03:59.356 --> 00:04:00.556 A:middle
your app's capabilities.

00:04:01.316 --> 00:04:02.716 A:middle
This adds a required entitlement

00:04:02.716 --> 00:04:04.116 A:middle
to your app, and links it to the

00:04:04.116 --> 00:04:05.696 A:middle
new authentication services

00:04:05.696 --> 00:04:07.716 A:middle
framework, which provides the

00:04:07.716 --> 00:04:08.936 A:middle
APIs for Password Autofill

00:04:08.936 --> 00:04:09.416 A:middle
integration.

00:04:09.826 --> 00:04:13.936 A:middle
Next, you will need to add an

00:04:13.936 --> 00:04:15.316 A:middle
AutoFill Credential Provider

00:04:15.316 --> 00:04:16.456 A:middle
Extension target to your

00:04:16.456 --> 00:04:16.946 A:middle
project.

00:04:17.676 --> 00:04:19.296 A:middle
Xcode 10 includes a new template

00:04:19.296 --> 00:04:20.116 A:middle
for this extension.

00:04:20.656 --> 00:04:23.666 A:middle
The template will create a view

00:04:23.666 --> 00:04:24.706 A:middle
controller class for you.

00:04:25.136 --> 00:04:26.876 A:middle
A subclass of AS credential

00:04:26.876 --> 00:04:27.986 A:middle
provider view controller.

00:04:29.076 --> 00:04:30.326 A:middle
When AutoFill needs to invoke

00:04:30.326 --> 00:04:31.766 A:middle
your extension, it will create

00:04:31.766 --> 00:04:33.336 A:middle
an instance of this class and

00:04:33.336 --> 00:04:34.366 A:middle
call certain methods on it,

00:04:34.766 --> 00:04:35.606 A:middle
which your subclass will

00:04:35.606 --> 00:04:36.026 A:middle
override.

00:04:37.756 --> 00:04:38.996 A:middle
So once you've configured your

00:04:38.996 --> 00:04:41.146 A:middle
project, the first thing to

00:04:41.146 --> 00:04:42.626 A:middle
implement in your extension is

00:04:42.626 --> 00:04:43.756 A:middle
the list of credentials that the

00:04:43.756 --> 00:04:44.726 A:middle
user can bring up from the

00:04:44.726 --> 00:04:45.286 A:middle
QuickType bar.

00:04:45.566 --> 00:04:46.866 A:middle
Here is how this works.

00:04:47.446 --> 00:04:50.616 A:middle
When the user is signing into an

00:04:50.736 --> 00:04:51.926 A:middle
app, they can use the QuickType

00:04:51.926 --> 00:04:53.076 A:middle
bar to bring up your credential

00:04:53.076 --> 00:04:53.376 A:middle
list.

00:04:54.026 --> 00:04:56.306 A:middle
At this point, AutoFill will

00:04:56.306 --> 00:04:57.776 A:middle
launch your app extension and

00:04:57.776 --> 00:04:58.946 A:middle
let it know where the user is

00:04:58.946 --> 00:05:00.566 A:middle
logging in, so you can suggest

00:04:58.946 --> 00:05:00.566 A:middle
logging in, so you can suggest

00:05:00.566 --> 00:05:01.926 A:middle
the most relevant credentials.

00:05:03.816 --> 00:05:05.436 A:middle
AutoFill will do this by

00:05:05.436 --> 00:05:06.736 A:middle
preparing a list of AS

00:05:06.736 --> 00:05:08.086 A:middle
credentials service identifier

00:05:08.086 --> 00:05:09.446 A:middle
objects, representing the

00:05:09.446 --> 00:05:10.716 A:middle
service the user is currently

00:05:10.716 --> 00:05:11.146 A:middle
using.

00:05:11.976 --> 00:05:12.956 A:middle
Your extension may receive

00:05:12.956 --> 00:05:14.636 A:middle
multiple service identifiers, if

00:05:14.636 --> 00:05:16.086 A:middle
AutoFill can determine multiple

00:05:16.086 --> 00:05:17.386 A:middle
better [inaudible] to use in the

00:05:17.386 --> 00:05:18.236 A:middle
current context.

00:05:19.956 --> 00:05:21.866 A:middle
In apps, service identifiers are

00:05:21.866 --> 00:05:23.216 A:middle
based on the app's associated

00:05:23.216 --> 00:05:23.836 A:middle
domains.

00:05:24.406 --> 00:05:25.976 A:middle
Apps that have adopted universal

00:05:25.976 --> 00:05:27.876 A:middle
links hand-off or shared web

00:05:27.876 --> 00:05:29.346 A:middle
credentials will have associated

00:05:29.346 --> 00:05:29.856 A:middle
domains.

00:05:31.006 --> 00:05:32.606 A:middle
For example, the Shiny app is

00:05:32.606 --> 00:05:33.456 A:middle
associated with

00:05:33.456 --> 00:05:36.386 A:middle
shiny.example.com, so AutoFill

00:05:36.386 --> 00:05:37.586 A:middle
will provide your extension a

00:05:37.586 --> 00:05:39.086 A:middle
service identifier of type

00:05:39.086 --> 00:05:41.436 A:middle
domain for shiny.example.com.

00:05:42.866 --> 00:05:44.286 A:middle
In Safari, the service

00:05:44.286 --> 00:05:46.056 A:middle
identifiers are based on the URL

00:05:46.086 --> 00:05:47.336 A:middle
of the current page the user is

00:05:47.336 --> 00:05:47.966 A:middle
logging into.

00:05:51.316 --> 00:05:52.976 A:middle
AutoFill will send the service

00:05:52.976 --> 00:05:54.786 A:middle
identifiers to your extension by

00:05:54.786 --> 00:05:56.186 A:middle
calling the prepared credential

00:05:56.186 --> 00:05:57.796 A:middle
list for service identifiers

00:05:57.796 --> 00:05:59.266 A:middle
method on your view controller.

00:06:00.286 --> 00:06:02.066 A:middle
Here, your extension should set

00:06:02.066 --> 00:06:03.526 A:middle
up its UI for displaying the

00:06:03.526 --> 00:06:05.466 A:middle
user's credentials, and it can

00:06:05.466 --> 00:06:06.546 A:middle
use the provided service

00:06:06.546 --> 00:06:08.156 A:middle
identifiers to prioritize the

00:06:08.156 --> 00:06:09.166 A:middle
most relevant ones.

00:06:09.926 --> 00:06:11.326 A:middle
From here, two things can

00:06:11.326 --> 00:06:11.636 A:middle
happen.

00:06:12.196 --> 00:06:15.286 A:middle
If the user chooses to dismiss

00:06:15.286 --> 00:06:16.656 A:middle
your extension, you tell the

00:06:16.656 --> 00:06:18.306 A:middle
system about this by calling

00:06:18.436 --> 00:06:20.456 A:middle
Cancel Request With Error on

00:06:20.456 --> 00:06:21.586 A:middle
your view controller's extension

00:06:21.586 --> 00:06:23.906 A:middle
context, and AutoFill will

00:06:23.906 --> 00:06:24.886 A:middle
dismiss your extension.

00:06:28.976 --> 00:06:30.886 A:middle
Otherwise, if the user selects a

00:06:30.886 --> 00:06:32.086 A:middle
credential they want to use,

00:06:32.506 --> 00:06:33.976 A:middle
your extension creates an AS

00:06:33.976 --> 00:06:35.736 A:middle
password credential object based

00:06:35.736 --> 00:06:37.596 A:middle
on the user's selection and then

00:06:37.596 --> 00:06:39.286 A:middle
hands it to AutoFill by calling

00:06:39.286 --> 00:06:40.596 A:middle
the complete request with

00:06:40.596 --> 00:06:42.106 A:middle
selected credential method on

00:06:42.106 --> 00:06:43.206 A:middle
the extension context.

00:06:44.046 --> 00:06:45.526 A:middle
And AutoFill will use that

00:06:45.526 --> 00:06:47.236 A:middle
credential to fill the username

00:06:47.316 --> 00:06:49.126 A:middle
and password in the app.

00:06:51.656 --> 00:06:53.036 A:middle
There are a few best practices

00:06:53.036 --> 00:06:53.986 A:middle
the credential list should

00:06:53.986 --> 00:06:55.276 A:middle
adhere to for the best user

00:06:55.276 --> 00:06:55.926 A:middle
experience.

00:06:56.946 --> 00:06:58.426 A:middle
First of all, be sure to include

00:06:58.426 --> 00:06:59.856 A:middle
a button in your UI to cancel

00:06:59.856 --> 00:07:00.456 A:middle
the request.

00:06:59.856 --> 00:07:00.456 A:middle
the request.

00:07:01.446 --> 00:07:02.616 A:middle
The user may change their mind

00:07:02.616 --> 00:07:03.986 A:middle
about signing into the service,

00:07:03.986 --> 00:07:05.136 A:middle
or realize they don't have a

00:07:05.136 --> 00:07:06.746 A:middle
credential saved, so you should

00:07:06.746 --> 00:07:08.096 A:middle
support letting the user dismiss

00:07:08.096 --> 00:07:09.466 A:middle
your extension without selecting

00:07:09.466 --> 00:07:09.956 A:middle
a credential.

00:07:12.856 --> 00:07:14.746 A:middle
Also, your credential list UI

00:07:14.746 --> 00:07:16.006 A:middle
should make it possible to see

00:07:16.006 --> 00:07:17.646 A:middle
all credentials, whether or not

00:07:17.676 --> 00:07:18.536 A:middle
they match the service

00:07:18.536 --> 00:07:19.216 A:middle
identifiers.

00:07:19.896 --> 00:07:21.486 A:middle
In some cases, the user may need

00:07:21.486 --> 00:07:22.526 A:middle
to choose a credential from a

00:07:22.526 --> 00:07:23.246 A:middle
different domain.

00:07:24.226 --> 00:07:25.516 A:middle
Allowing the user to access

00:07:25.516 --> 00:07:26.776 A:middle
their entire set of credentials

00:07:26.776 --> 00:07:28.256 A:middle
from the list, ensures your

00:07:28.256 --> 00:07:29.696 A:middle
extension is always useful.

00:07:31.916 --> 00:07:33.576 A:middle
And user authentication is

00:07:33.576 --> 00:07:35.096 A:middle
completely up to your extension.

00:07:35.406 --> 00:07:36.796 A:middle
If you need to authenticate the

00:07:36.796 --> 00:07:38.236 A:middle
user, you should do so when the

00:07:38.236 --> 00:07:39.426 A:middle
credential list is presented.

00:07:39.856 --> 00:07:43.396 A:middle
And that is how you can

00:07:43.396 --> 00:07:44.596 A:middle
implement a credential list in

00:07:44.596 --> 00:07:45.936 A:middle
your extension so your app's

00:07:45.936 --> 00:07:47.576 A:middle
credentials are available to use

00:07:47.576 --> 00:07:48.466 A:middle
when signing in anywhere.

00:07:49.076 --> 00:07:51.566 A:middle
Now we will make this even more

00:07:51.566 --> 00:07:53.206 A:middle
convenient by allowing AutoFill

00:07:53.206 --> 00:07:54.396 A:middle
to surface these credentials

00:07:54.486 --> 00:07:55.566 A:middle
directly on the QuickType bar.

00:07:56.116 --> 00:07:58.346 A:middle
I'll start with an overview of

00:07:58.346 --> 00:07:59.516 A:middle
how this process works,

00:07:59.776 --> 00:08:01.116 A:middle
describing the roles played by

00:07:59.776 --> 00:08:01.116 A:middle
describing the roles played by

00:08:01.116 --> 00:08:03.176 A:middle
your code, the system, and the

00:08:03.176 --> 00:08:04.536 A:middle
app where the user is signing

00:08:05.056 --> 00:08:05.123 A:middle
in.

00:08:07.376 --> 00:08:09.186 A:middle
To start with, your app needs to

00:08:09.186 --> 00:08:10.876 A:middle
let AutoFill know ahead of time

00:08:11.126 --> 00:08:12.356 A:middle
what credentials it wants to

00:08:12.356 --> 00:08:13.606 A:middle
make available for the QuickType

00:08:13.606 --> 00:08:13.816 A:middle
bar.

00:08:15.126 --> 00:08:16.266 A:middle
Your app provides AutoFill a

00:08:16.266 --> 00:08:17.996 A:middle
list of credential identities.

00:08:18.336 --> 00:08:19.846 A:middle
The credential identity includes

00:08:19.846 --> 00:08:21.106 A:middle
information about a credential,

00:08:21.406 --> 00:08:22.746 A:middle
such as the username and the

00:08:22.746 --> 00:08:24.616 A:middle
service, but not the password.

00:08:25.106 --> 00:08:28.116 A:middle
When the user begins signing

00:08:28.116 --> 00:08:29.886 A:middle
into an app, the app talks to

00:08:29.886 --> 00:08:31.356 A:middle
AutoFill, and lets it know when

00:08:31.356 --> 00:08:32.756 A:middle
a username or password field is

00:08:32.756 --> 00:08:33.356 A:middle
focused.

00:08:34.645 --> 00:08:35.946 A:middle
AutoFill then looks for

00:08:35.946 --> 00:08:36.796 A:middle
appropriate credential

00:08:36.796 --> 00:08:38.046 A:middle
identities to suggest for the

00:08:38.046 --> 00:08:38.265 A:middle
app.

00:08:38.905 --> 00:08:39.866 A:middle
It does this by searching

00:08:39.866 --> 00:08:40.616 A:middle
through the credential

00:08:40.616 --> 00:08:41.635 A:middle
identities that your app has

00:08:41.635 --> 00:08:43.076 A:middle
already provided, so your

00:08:43.076 --> 00:08:44.176 A:middle
extension doesn't need to be

00:08:44.176 --> 00:08:44.706 A:middle
launched yet.

00:08:45.996 --> 00:08:46.856 A:middle
If there are any matching

00:08:46.856 --> 00:08:47.726 A:middle
credential identities to

00:08:47.726 --> 00:08:49.886 A:middle
suggest, AutoFill displays them

00:08:49.886 --> 00:08:50.616 A:middle
on the QuickType bar.

00:08:51.726 --> 00:08:53.096 A:middle
These suggestions are rendered

00:08:53.096 --> 00:08:54.666 A:middle
privately by the system, so the

00:08:54.666 --> 00:08:56.246 A:middle
app isn't yet able to determine

00:08:56.246 --> 00:08:57.466 A:middle
what credentials the user has

00:08:57.466 --> 00:08:58.946 A:middle
saved for the app.

00:09:01.356 --> 00:09:02.746 A:middle
When the user selects one of the

00:09:02.746 --> 00:09:05.106 A:middle
suggestions, AutoFill launches

00:09:05.106 --> 00:09:06.496 A:middle
your app extension to ask it for

00:09:06.496 --> 00:09:07.846 A:middle
the full credential, including

00:09:07.846 --> 00:09:08.346 A:middle
the password.

00:09:08.836 --> 00:09:11.516 A:middle
It will tell your extension

00:09:11.596 --> 00:09:12.736 A:middle
which credential identity the

00:09:12.736 --> 00:09:16.216 A:middle
user chose, then your extension

00:09:16.216 --> 00:09:17.556 A:middle
looks up the password belonging

00:09:17.556 --> 00:09:18.926 A:middle
to the selected credential in

00:09:18.926 --> 00:09:20.316 A:middle
your app's password database.

00:09:21.256 --> 00:09:22.736 A:middle
At this point, the extension has

00:09:22.736 --> 00:09:24.426 A:middle
the option to present its own UI

00:09:24.546 --> 00:09:25.806 A:middle
before returning the password.

00:09:26.726 --> 00:09:27.826 A:middle
This is useful for password

00:09:27.826 --> 00:09:29.246 A:middle
manager apps that ask the user

00:09:29.246 --> 00:09:31.126 A:middle
to enter a master password, or

00:09:31.126 --> 00:09:32.016 A:middle
perform another type of

00:09:32.016 --> 00:09:34.266 A:middle
authentication specific to the

00:09:36.556 --> 00:09:36.626 A:middle
app.

00:09:36.886 --> 00:09:37.976 A:middle
Once your extension has the

00:09:37.976 --> 00:09:39.906 A:middle
password, it packages it in an

00:09:39.906 --> 00:09:41.536 A:middle
AS password credential and hands

00:09:41.536 --> 00:09:42.796 A:middle
it to AutoFill by completing the

00:09:42.796 --> 00:09:43.736 A:middle
extension request.

00:09:44.226 --> 00:09:47.426 A:middle
If the extension didn't show its

00:09:47.426 --> 00:09:49.476 A:middle
own UI, AutoFill will perform

00:09:49.476 --> 00:09:50.826 A:middle
appropriate authentication for

00:09:50.826 --> 00:09:51.296 A:middle
the user.

00:09:52.116 --> 00:09:53.346 A:middle
Depending on the device and the

00:09:53.346 --> 00:09:55.116 A:middle
user's preference, this may be

00:09:55.116 --> 00:09:57.356 A:middle
Face ID, Touch ID, Device

00:09:57.356 --> 00:09:58.666 A:middle
Passcode, or None.

00:09:59.236 --> 00:10:02.726 A:middle
If that authentication is

00:09:59.236 --> 00:10:02.726 A:middle
If that authentication is

00:10:02.726 --> 00:10:04.686 A:middle
successful, AutoFill will fill

00:10:04.686 --> 00:10:05.856 A:middle
the username and the password in

00:10:05.856 --> 00:10:05.976 A:middle
the app.

00:10:06.336 --> 00:10:08.676 A:middle
There is a lot going on here, so

00:10:08.806 --> 00:10:09.596 A:middle
I'm going to walk through the

00:10:09.596 --> 00:10:10.666 A:middle
steps you need to take as a

00:10:10.666 --> 00:10:11.856 A:middle
developer to support this

00:10:11.856 --> 00:10:12.286 A:middle
workflow.

00:10:12.816 --> 00:10:16.096 A:middle
The three things you need to do

00:10:16.346 --> 00:10:17.656 A:middle
are provide AutoFill with the

00:10:17.656 --> 00:10:18.866 A:middle
credential identities you want

00:10:18.866 --> 00:10:19.966 A:middle
it to suggest to the user.

00:10:20.926 --> 00:10:21.836 A:middle
Implement support in your

00:10:21.836 --> 00:10:22.736 A:middle
extension to provide the

00:10:22.736 --> 00:10:24.196 A:middle
passwords when those suggestions

00:10:24.196 --> 00:10:26.266 A:middle
are selected, and display custom

00:10:26.266 --> 00:10:27.666 A:middle
UI in your extension to

00:10:27.666 --> 00:10:28.866 A:middle
authenticate the user before

00:10:28.866 --> 00:10:30.446 A:middle
returning the credential, if

00:10:30.446 --> 00:10:31.546 A:middle
your UX requires it.

00:10:32.546 --> 00:10:33.736 A:middle
Once again, this step is

00:10:33.736 --> 00:10:34.196 A:middle
optional.

00:10:34.776 --> 00:10:36.036 A:middle
If you don't show custom UI for

00:10:36.036 --> 00:10:37.716 A:middle
authentication, AutoFill will

00:10:37.716 --> 00:10:38.646 A:middle
perform appropriate

00:10:38.646 --> 00:10:39.746 A:middle
authentication for you.

00:10:42.936 --> 00:10:44.296 A:middle
Credential identities are

00:10:44.296 --> 00:10:46.246 A:middle
represented by instances of AS

00:10:46.246 --> 00:10:47.606 A:middle
Password Credential Identity.

00:10:48.336 --> 00:10:49.526 A:middle
This class contains all the

00:10:49.526 --> 00:10:50.816 A:middle
information about a credential

00:10:50.816 --> 00:10:52.126 A:middle
that AutoFill needs to know in

00:10:52.126 --> 00:10:53.246 A:middle
order to determine where to

00:10:53.246 --> 00:10:53.746 A:middle
offer it.

00:10:54.676 --> 00:10:55.636 A:middle
This includes a service

00:10:55.636 --> 00:10:57.526 A:middle
identifier, which tells AutoFill

00:10:57.526 --> 00:10:59.036 A:middle
which apps or websites to

00:10:59.036 --> 00:11:00.336 A:middle
suggest the credential on.

00:10:59.036 --> 00:11:00.336 A:middle
suggest the credential on.

00:11:01.496 --> 00:11:03.086 A:middle
The username of the credential,

00:11:03.626 --> 00:11:06.646 A:middle
and optional record identifier

00:11:06.646 --> 00:11:07.906 A:middle
string that you can use to

00:11:07.906 --> 00:11:09.086 A:middle
correlate this identity to a

00:11:09.086 --> 00:11:10.176 A:middle
record in your app's own

00:11:10.176 --> 00:11:13.446 A:middle
database, and a rank parameter.

00:11:14.336 --> 00:11:15.776 A:middle
If the user has more credentials

00:11:15.776 --> 00:11:17.166 A:middle
for a particular service than

00:11:17.166 --> 00:11:19.006 A:middle
the QuickType bar can show, you

00:11:19.006 --> 00:11:20.196 A:middle
can use the rank parameter to

00:11:20.196 --> 00:11:21.156 A:middle
mark certain credential

00:11:21.156 --> 00:11:22.626 A:middle
identities as higher or lower

00:11:22.626 --> 00:11:23.206 A:middle
priority.

00:11:24.436 --> 00:11:25.556 A:middle
Credential identities having a

00:11:25.656 --> 00:11:26.826 A:middle
higher rank value will be

00:11:26.826 --> 00:11:27.956 A:middle
ordered before credential

00:11:27.956 --> 00:11:29.466 A:middle
identities with lower ranks.

00:11:32.476 --> 00:11:34.316 A:middle
These credential identities get

00:11:34.316 --> 00:11:35.696 A:middle
saved to the Credential Identity

00:11:35.696 --> 00:11:37.426 A:middle
Store, which is the database

00:11:37.426 --> 00:11:38.896 A:middle
inside your app's container that

00:11:38.896 --> 00:11:40.606 A:middle
you can modify using the AS

00:11:40.606 --> 00:11:42.296 A:middle
Credential Identity Store class.

00:11:43.356 --> 00:11:44.846 A:middle
AutoFill suggests credentials to

00:11:44.846 --> 00:11:46.276 A:middle
the user by searching through

00:11:46.276 --> 00:11:47.456 A:middle
your app's Credential Identity

00:11:47.456 --> 00:11:47.736 A:middle
Store.

00:11:48.316 --> 00:11:51.836 A:middle
The Credential Identity Store is

00:11:51.836 --> 00:11:53.196 A:middle
secured with complete unless

00:11:53.196 --> 00:11:55.026 A:middle
open data protection, so no

00:11:55.026 --> 00:11:56.446 A:middle
operations can start while the

00:11:56.446 --> 00:11:57.266 A:middle
device is locked.

00:11:58.246 --> 00:11:59.416 A:middle
The system never syncs the

00:11:59.416 --> 00:12:00.616 A:middle
Credential Identity Store to the

00:11:59.416 --> 00:12:00.616 A:middle
Credential Identity Store to the

00:12:00.616 --> 00:12:02.516 A:middle
Cloud or includes it in backups,

00:12:02.736 --> 00:12:04.746 A:middle
so this information never leaves

00:12:05.276 --> 00:12:06.000 A:middle
the device.

00:12:07.826 --> 00:12:09.246 A:middle
Each app has its own Credential

00:12:09.246 --> 00:12:11.216 A:middle
Identity Store, and only the app

00:12:11.216 --> 00:12:12.736 A:middle
and its extensions can modify

00:12:13.366 --> 00:12:13.436 A:middle
it.

00:12:14.066 --> 00:12:15.336 A:middle
The store is only read by

00:12:15.336 --> 00:12:17.246 A:middle
AutoFill for determining which

00:12:17.246 --> 00:12:19.286 A:middle
credentials to suggest to users.

00:12:19.836 --> 00:12:23.316 A:middle
And the Credential Identity

00:12:23.316 --> 00:12:25.046 A:middle
Store can only be modified while

00:12:25.046 --> 00:12:26.226 A:middle
your app's extension has been

00:12:26.226 --> 00:12:27.296 A:middle
enabled by the user.

00:12:28.506 --> 00:12:29.716 A:middle
If your extension is disabled,

00:12:29.866 --> 00:12:31.036 A:middle
attempts to update the store

00:12:31.036 --> 00:12:31.616 A:middle
will fail.

00:12:32.106 --> 00:12:33.386 A:middle
And if the user disables your

00:12:33.386 --> 00:12:34.806 A:middle
extension or deletes your app,

00:12:35.146 --> 00:12:36.296 A:middle
the Credential Identity Store

00:12:36.296 --> 00:12:37.026 A:middle
will be deleted.

00:12:37.476 --> 00:12:41.276 A:middle
Your app should update its

00:12:41.276 --> 00:12:42.706 A:middle
Credential Identity Store when

00:12:42.706 --> 00:12:43.856 A:middle
it has new information about

00:12:43.856 --> 00:12:45.076 A:middle
what credentials it can offer.

00:12:46.316 --> 00:12:47.896 A:middle
As an example, let's say your

00:12:47.896 --> 00:12:49.616 A:middle
app uses an online service to

00:12:49.616 --> 00:12:50.916 A:middle
store the user's credentials.

00:12:51.456 --> 00:12:54.156 A:middle
When the user signs in, your app

00:12:54.156 --> 00:12:55.006 A:middle
would start retrieving the

00:12:55.006 --> 00:12:56.026 A:middle
user's credentials.

00:12:56.486 --> 00:12:58.356 A:middle
At this time, you would update

00:12:58.356 --> 00:12:59.186 A:middle
the list of credential

00:12:59.186 --> 00:13:00.796 A:middle
identities in the store, so the

00:12:59.186 --> 00:13:00.796 A:middle
identities in the store, so the

00:13:00.796 --> 00:13:02.066 A:middle
newly-fetched credentials could

00:13:02.066 --> 00:13:03.226 A:middle
be suggested on the QuickType

00:13:03.226 --> 00:13:03.406 A:middle
bar.

00:13:03.926 --> 00:13:08.506 A:middle
As the user adds, removes, or

00:13:08.506 --> 00:13:10.326 A:middle
modifies their credentials, your

00:13:10.326 --> 00:13:11.446 A:middle
app updates the Credential

00:13:11.446 --> 00:13:13.556 A:middle
Identity Store so it continues

00:13:13.556 --> 00:13:15.006 A:middle
to accurately reflect this set

00:13:15.006 --> 00:13:16.296 A:middle
of credentials that your app can

00:13:16.296 --> 00:13:16.716 A:middle
provide.

00:13:18.516 --> 00:13:20.046 A:middle
These updates might be because

00:13:20.046 --> 00:13:21.466 A:middle
the user locally makes changes

00:13:21.536 --> 00:13:23.426 A:middle
within your app, or perhaps

00:13:23.426 --> 00:13:24.096 A:middle
because your app is

00:13:24.096 --> 00:13:25.566 A:middle
synchronizing changes from other

00:13:25.566 --> 00:13:27.056 A:middle
devices signed into the online

00:13:27.056 --> 00:13:27.606 A:middle
service.

00:13:29.746 --> 00:13:31.616 A:middle
Then, if the user were to sign

00:13:31.616 --> 00:13:33.096 A:middle
out of the online service on the

00:13:33.096 --> 00:13:34.926 A:middle
current device, your app would

00:13:34.926 --> 00:13:36.016 A:middle
remove all the credential

00:13:36.016 --> 00:13:37.696 A:middle
identities from the store, so

00:13:37.696 --> 00:13:39.136 A:middle
the user doesn't continue to see

00:13:39.136 --> 00:13:40.036 A:middle
suggestions for these

00:13:40.036 --> 00:13:40.606 A:middle
credentials.

00:13:44.086 --> 00:13:46.136 A:middle
In your code, you use the AS

00:13:46.136 --> 00:13:47.826 A:middle
Credential Identity Store Class

00:13:47.826 --> 00:13:48.976 A:middle
to interact with the Credential

00:13:48.976 --> 00:13:51.686 A:middle
Identity Store.

00:13:51.686 --> 00:13:53.246 A:middle
Using the Replace Credential

00:13:53.246 --> 00:13:55.286 A:middle
Identities With and Remove All

00:13:55.286 --> 00:13:56.946 A:middle
Credential Identities methods,

00:13:57.716 --> 00:13:59.116 A:middle
you can replace or clear the

00:13:59.116 --> 00:14:00.516 A:middle
list of credential identities

00:13:59.116 --> 00:14:00.516 A:middle
list of credential identities

00:14:00.516 --> 00:14:01.676 A:middle
that AutoFill will consider

00:14:01.676 --> 00:14:02.246 A:middle
suggesting.

00:14:04.556 --> 00:14:06.026 A:middle
When individual changes are

00:14:06.026 --> 00:14:07.826 A:middle
made, these saved credential

00:14:07.826 --> 00:14:09.496 A:middle
identities or removed credential

00:14:09.496 --> 00:14:11.666 A:middle
identities methods allow you to

00:14:11.666 --> 00:14:13.846 A:middle
add, update or remove credential

00:14:13.846 --> 00:14:15.386 A:middle
identities without completely

00:14:15.386 --> 00:14:16.596 A:middle
replacing the contents of the

00:14:16.596 --> 00:14:16.906 A:middle
store.

00:14:20.426 --> 00:14:21.486 A:middle
One important aspect of the

00:14:21.486 --> 00:14:23.426 A:middle
system to understand is that the

00:14:23.426 --> 00:14:25.036 A:middle
Credential Identity Store may be

00:14:25.036 --> 00:14:26.506 A:middle
deleted at times that your app

00:14:26.506 --> 00:14:27.516 A:middle
won't be able to predict.

00:14:28.076 --> 00:14:31.276 A:middle
As a few examples, if the user

00:14:31.276 --> 00:14:32.596 A:middle
disables your extension for

00:14:32.596 --> 00:14:34.336 A:middle
AutoFill, then later re-enables

00:14:34.336 --> 00:14:36.026 A:middle
it, the system will have cleared

00:14:36.026 --> 00:14:36.386 A:middle
the store.

00:14:37.296 --> 00:14:38.696 A:middle
If the system determines that

00:14:38.696 --> 00:14:39.996 A:middle
your app provides credential

00:14:39.996 --> 00:14:41.546 A:middle
identities, but consistently

00:14:41.546 --> 00:14:43.076 A:middle
fails to provide the passwords

00:14:43.076 --> 00:14:44.276 A:middle
when the user selects these

00:14:44.276 --> 00:14:46.076 A:middle
credentials, the credential

00:14:46.076 --> 00:14:47.976 A:middle
identity store may be deleted to

00:14:47.976 --> 00:14:49.116 A:middle
prevent the user from seeing

00:14:49.116 --> 00:14:49.926 A:middle
these stale credential

00:14:49.926 --> 00:14:50.646 A:middle
suggestions.

00:14:51.076 --> 00:14:54.756 A:middle
If the user restores their

00:14:54.756 --> 00:14:56.176 A:middle
device from a backup where they

00:14:56.176 --> 00:14:57.116 A:middle
were using your credential

00:14:57.116 --> 00:14:59.056 A:middle
provider extension, the store

00:14:59.056 --> 00:15:00.306 A:middle
won't contain any credential

00:14:59.056 --> 00:15:00.306 A:middle
won't contain any credential

00:15:00.306 --> 00:15:01.736 A:middle
identities since it wasn't

00:15:01.736 --> 00:15:02.596 A:middle
included in the backup.

00:15:02.596 --> 00:15:04.546 A:middle
Your app should be able to

00:15:04.546 --> 00:15:06.516 A:middle
handle these cases, and AS

00:15:06.596 --> 00:15:08.316 A:middle
Credential Identity Store can

00:15:08.316 --> 00:15:09.576 A:middle
help you detect these cases, so

00:15:09.706 --> 00:15:10.726 A:middle
you can take the appropriate

00:15:10.726 --> 00:15:12.006 A:middle
action when you need to update

00:15:12.006 --> 00:15:12.376 A:middle
the store.

00:15:15.776 --> 00:15:17.336 A:middle
You can use the Get State method

00:15:17.446 --> 00:15:18.666 A:middle
to ask the system about the

00:15:18.666 --> 00:15:20.006 A:middle
state of your app's Credential

00:15:20.006 --> 00:15:21.846 A:middle
Identity Store, return it as an

00:15:21.846 --> 00:15:23.356 A:middle
AS Credential Identity Store

00:15:23.356 --> 00:15:24.176 A:middle
State Object.

00:15:25.876 --> 00:15:27.566 A:middle
The first thing it tells you is

00:15:27.566 --> 00:15:28.926 A:middle
whether or not the user has your

00:15:28.926 --> 00:15:30.016 A:middle
app extension enabled.

00:15:30.726 --> 00:15:31.816 A:middle
You should check this before

00:15:31.816 --> 00:15:32.686 A:middle
attempting to update the

00:15:32.686 --> 00:15:33.746 A:middle
credential identity store.

00:15:34.256 --> 00:15:35.606 A:middle
If your extension is disabled,

00:15:35.736 --> 00:15:36.816 A:middle
there is no point in trying to

00:15:36.816 --> 00:15:38.136 A:middle
save or remove credential

00:15:38.136 --> 00:15:38.716 A:middle
identities.

00:15:42.116 --> 00:15:44.306 A:middle
The State also has a Supports

00:15:44.306 --> 00:15:45.606 A:middle
Incremental Updates Property,

00:15:46.026 --> 00:15:47.136 A:middle
which you can use to determine

00:15:47.136 --> 00:15:48.626 A:middle
if the Identity Store is intact

00:15:48.626 --> 00:15:49.576 A:middle
since the last time you've

00:15:49.576 --> 00:15:51.636 A:middle
updated it.

00:15:51.636 --> 00:15:52.746 A:middle
If you previously saved any

00:15:52.746 --> 00:15:53.756 A:middle
credential identities to the

00:15:53.756 --> 00:15:55.826 A:middle
store, this will return true,

00:15:56.436 --> 00:15:57.646 A:middle
indicating you should use the

00:15:57.646 --> 00:15:59.146 A:middle
incremental Save Credential

00:15:59.146 --> 00:16:00.696 A:middle
Identities and Remove Credential

00:15:59.146 --> 00:16:00.696 A:middle
Identities and Remove Credential

00:16:00.696 --> 00:16:03.386 A:middle
Identities methods.

00:16:03.386 --> 00:16:04.916 A:middle
Otherwise, if the Store hasn't

00:16:04.916 --> 00:16:06.656 A:middle
been written to yet, perhaps

00:16:06.656 --> 00:16:07.746 A:middle
because your app was just

00:16:07.786 --> 00:16:08.996 A:middle
disabled and re-enabled,

00:16:10.026 --> 00:16:11.446 A:middle
Supports Incremental Updates

00:16:11.446 --> 00:16:12.546 A:middle
will return false.

00:16:12.736 --> 00:16:13.706 A:middle
And you should populate the

00:16:13.706 --> 00:16:15.176 A:middle
Identity Store by providing the

00:16:15.176 --> 00:16:16.176 A:middle
full list of credential

00:16:16.176 --> 00:16:18.046 A:middle
identities using the Replace

00:16:18.046 --> 00:16:19.366 A:middle
Credential Identities With

00:16:19.626 --> 00:16:19.996 A:middle
method.

00:16:22.306 --> 00:16:23.466 A:middle
Once your app starts saving

00:16:23.466 --> 00:16:24.626 A:middle
credential identities to the

00:16:24.626 --> 00:16:26.716 A:middle
store, AutoFill can start

00:16:26.716 --> 00:16:27.546 A:middle
suggesting your app's

00:16:27.546 --> 00:16:28.576 A:middle
credentials in the QuickType

00:16:28.576 --> 00:16:28.776 A:middle
bar.

00:16:29.916 --> 00:16:31.556 A:middle
Next, you'll need to add support

00:16:31.556 --> 00:16:32.816 A:middle
in your extension to provide the

00:16:32.816 --> 00:16:33.976 A:middle
password when one of these

00:16:33.976 --> 00:16:35.246 A:middle
credential suggestions is

00:16:35.246 --> 00:16:35.756 A:middle
selected.

00:16:37.836 --> 00:16:39.846 A:middle
When this happens, AutoFill will

00:16:39.846 --> 00:16:41.376 A:middle
first launch your extension and

00:16:41.376 --> 00:16:42.866 A:middle
ask it for the password without

00:16:42.866 --> 00:16:44.166 A:middle
presenting your UI on screen.

00:16:44.346 --> 00:16:46.886 A:middle
When it does this, AutoFill will

00:16:46.886 --> 00:16:48.596 A:middle
call the Provide Credential

00:16:48.626 --> 00:16:50.306 A:middle
Without User Interaction For

00:16:50.536 --> 00:16:51.896 A:middle
method on your view controller,

00:16:52.616 --> 00:16:53.846 A:middle
providing an AS Password

00:16:53.846 --> 00:16:54.776 A:middle
Credential Identity,

00:16:55.026 --> 00:16:56.026 A:middle
representing the credential

00:16:56.026 --> 00:16:56.526 A:middle
being filled.

00:16:57.136 --> 00:16:59.766 A:middle
In this method, you will look up

00:16:59.766 --> 00:17:00.956 A:middle
the associated password

00:16:59.766 --> 00:17:00.956 A:middle
the associated password

00:17:00.956 --> 00:17:01.786 A:middle
belonging to the given

00:17:01.786 --> 00:17:03.346 A:middle
credential and hand it back to

00:17:03.346 --> 00:17:05.106 A:middle
AutoFill using the Complete

00:17:05.106 --> 00:17:06.646 A:middle
Request With Selected Credential

00:17:06.646 --> 00:17:07.026 A:middle
method.

00:17:07.536 --> 00:17:11.016 A:middle
If your extension wants to have

00:17:11.016 --> 00:17:12.526 A:middle
its UI presented at this point,

00:17:13.195 --> 00:17:14.546 A:middle
cancel the extension request

00:17:14.705 --> 00:17:15.986 A:middle
with the User Interaction

00:17:15.986 --> 00:17:18.016 A:middle
Required error code in the

00:17:18.016 --> 00:17:19.846 A:middle
domain AS Extension Error

00:17:19.846 --> 00:17:20.236 A:middle
Domain.

00:17:22.116 --> 00:17:23.836 A:middle
The system will then call the

00:17:23.836 --> 00:17:25.746 A:middle
Prepare Interface To Provide

00:17:25.746 --> 00:17:27.386 A:middle
Credential For method on your

00:17:27.386 --> 00:17:28.966 A:middle
view controller, and present its

00:17:28.966 --> 00:17:29.286 A:middle
UI.

00:17:30.436 --> 00:17:31.966 A:middle
In this method, your extension

00:17:31.966 --> 00:17:33.786 A:middle
sets up its UI for its workflow

00:17:33.786 --> 00:17:34.726 A:middle
to provide the password.

00:17:35.796 --> 00:17:37.236 A:middle
When the password is eventually

00:17:37.236 --> 00:17:39.006 A:middle
available, you return the

00:17:39.006 --> 00:17:40.916 A:middle
credential to AutoFill, also

00:17:40.916 --> 00:17:42.356 A:middle
using the Complete Request With

00:17:42.356 --> 00:17:43.586 A:middle
Selected Credential method.

00:17:44.806 --> 00:17:46.346 A:middle
Once again, if your Extensions

00:17:46.346 --> 00:17:48.746 A:middle
UI was presented, AutoFill won't

00:17:48.746 --> 00:17:50.076 A:middle
perform any authentication

00:17:50.076 --> 00:17:51.166 A:middle
before filling the returned

00:17:51.166 --> 00:17:51.676 A:middle
credential.

00:17:52.266 --> 00:17:53.486 A:middle
It is up to your extension to

00:17:53.486 --> 00:17:54.236 A:middle
decide what type of

00:17:54.236 --> 00:17:55.546 A:middle
authentication is needed.

00:17:59.016 --> 00:18:00.436 A:middle
The most important thing to keep

00:17:59.016 --> 00:18:00.436 A:middle
The most important thing to keep

00:18:00.436 --> 00:18:01.526 A:middle
in mind when implementing this

00:18:01.526 --> 00:18:02.896 A:middle
functionality is that your

00:18:02.896 --> 00:18:04.346 A:middle
extension needs to respond to

00:18:04.346 --> 00:18:05.846 A:middle
the initial non-UI request

00:18:05.846 --> 00:18:07.376 A:middle
quickly, regardless of the

00:18:07.376 --> 00:18:07.896 A:middle
results.

00:18:09.316 --> 00:18:11.066 A:middle
Your UI hasn't been presented

00:18:11.066 --> 00:18:12.816 A:middle
yet, so it's not obvious to the

00:18:12.816 --> 00:18:14.086 A:middle
user that your extension is

00:18:14.086 --> 00:18:15.056 A:middle
working in the background.

00:18:16.076 --> 00:18:17.226 A:middle
If it takes a long time to

00:18:17.226 --> 00:18:18.776 A:middle
return the password, the user

00:18:18.776 --> 00:18:20.676 A:middle
may perceive the system, your

00:18:20.676 --> 00:18:22.246 A:middle
app, or the service they're

00:18:22.246 --> 00:18:23.846 A:middle
using as being unresponsive.

00:18:24.796 --> 00:18:25.786 A:middle
This would be a poor user

00:18:25.786 --> 00:18:26.426 A:middle
experience.

00:18:26.946 --> 00:18:29.436 A:middle
And this is so important.

00:18:29.776 --> 00:18:31.396 A:middle
If a few seconds pass, and your

00:18:31.396 --> 00:18:32.556 A:middle
extension hasn't returned the

00:18:32.556 --> 00:18:34.586 A:middle
password, requested to show its

00:18:34.586 --> 00:18:36.356 A:middle
UI, or canceled with another

00:18:36.356 --> 00:18:38.116 A:middle
error, AutoFill will cancel the

00:18:38.116 --> 00:18:39.336 A:middle
extension without filling the

00:18:39.336 --> 00:18:39.776 A:middle
credential.

00:18:41.616 --> 00:18:43.486 A:middle
However, this timeout doesn't

00:18:43.486 --> 00:18:45.376 A:middle
happen for debug builds, or when

00:18:45.376 --> 00:18:47.066 A:middle
running on the simulator, so you

00:18:47.066 --> 00:18:48.226 A:middle
can take your time to debug the

00:18:48.226 --> 00:18:49.556 A:middle
extension without the system

00:18:49.556 --> 00:18:49.996 A:middle
interrupting.

00:18:54.236 --> 00:18:55.746 A:middle
When you're implementing support

00:18:55.746 --> 00:18:56.736 A:middle
for displaying your app's

00:18:56.736 --> 00:18:57.726 A:middle
credentials on the QuickType

00:18:57.726 --> 00:18:59.346 A:middle
bar, it's essential that you

00:18:59.346 --> 00:19:00.406 A:middle
keep the Credential Identity

00:18:59.346 --> 00:19:00.406 A:middle
keep the Credential Identity

00:19:00.406 --> 00:19:02.226 A:middle
Store up to date, and in sync

00:19:02.226 --> 00:19:03.156 A:middle
with the credentials your app

00:19:03.156 --> 00:19:03.756 A:middle
knows about.

00:19:04.856 --> 00:19:06.276 A:middle
If the store becomes out of sync

00:19:06.276 --> 00:19:07.996 A:middle
with your app's data, the user

00:19:07.996 --> 00:19:09.166 A:middle
might not see newly added

00:19:09.166 --> 00:19:10.156 A:middle
credentials on the QuickType

00:19:10.156 --> 00:19:12.166 A:middle
bar, or may continue to see

00:19:12.166 --> 00:19:13.436 A:middle
credentials on the QuickType bar

00:19:13.606 --> 00:19:14.816 A:middle
even after they've been deleted

00:19:14.816 --> 00:19:15.286 A:middle
from your app.

00:19:16.686 --> 00:19:18.046 A:middle
You should take advantage of AS

00:19:18.046 --> 00:19:19.416 A:middle
Credential Identity Store's

00:19:19.616 --> 00:19:21.186 A:middle
incremental update APIs.

00:19:21.906 --> 00:19:23.346 A:middle
Replacing the entire list of

00:19:23.346 --> 00:19:25.266 A:middle
credential identities every time

00:19:25.266 --> 00:19:26.986 A:middle
any credential has changed, may

00:19:26.986 --> 00:19:28.286 A:middle
become expensive the more

00:19:28.286 --> 00:19:29.466 A:middle
credential identities you need

00:19:29.466 --> 00:19:29.966 A:middle
to update.

00:19:31.016 --> 00:19:32.506 A:middle
It's better for performance to

00:19:32.506 --> 00:19:33.666 A:middle
incrementally save new

00:19:33.666 --> 00:19:35.396 A:middle
credential identities or remove

00:19:35.396 --> 00:19:36.986 A:middle
deleted ones as those changes

00:19:36.986 --> 00:19:39.076 A:middle
are made, rather than re-writing

00:19:39.076 --> 00:19:39.866 A:middle
the entire store.

00:19:42.316 --> 00:19:43.916 A:middle
Keep in mind, when your

00:19:43.916 --> 00:19:45.266 A:middle
extension is being called, the

00:19:45.336 --> 00:19:46.496 A:middle
user is in the middle of using

00:19:46.496 --> 00:19:47.106 A:middle
another app.

00:19:47.816 --> 00:19:49.046 A:middle
Keep the interactions and your

00:19:49.046 --> 00:19:50.886 A:middle
UI to a minimum, and only

00:19:50.886 --> 00:19:52.306 A:middle
include what the user needs in

00:19:52.306 --> 00:19:53.546 A:middle
order to user their passwords.

00:19:56.496 --> 00:19:57.666 A:middle
If loading your password

00:19:57.666 --> 00:19:59.086 A:middle
database involves expensive

00:19:59.086 --> 00:20:01.206 A:middle
setup, avoid redoing the setup

00:19:59.086 --> 00:20:01.206 A:middle
setup, avoid redoing the setup

00:20:01.206 --> 00:20:02.676 A:middle
in the view load method of your

00:20:02.676 --> 00:20:04.016 A:middle
view controller, and tearing it

00:20:04.016 --> 00:20:04.596 A:middle
down later.

00:20:05.416 --> 00:20:06.836 A:middle
The system may reuse your app

00:20:06.836 --> 00:20:08.446 A:middle
extensions process if the user

00:20:08.446 --> 00:20:09.806 A:middle
sequentially signs into multiple

00:20:09.806 --> 00:20:11.386 A:middle
services using your extension.

00:20:12.686 --> 00:20:13.886 A:middle
Consider using a singleton

00:20:13.886 --> 00:20:15.766 A:middle
pattern, so any work done in one

00:20:15.766 --> 00:20:17.596 A:middle
invocation of your extension can

00:20:17.596 --> 00:20:19.276 A:middle
be reused the next time if it

00:20:19.276 --> 00:20:20.296 A:middle
doesn't need to be repeated.

00:20:20.836 --> 00:20:24.836 A:middle
And that wraps up how you can

00:20:24.836 --> 00:20:26.096 A:middle
display credentials from your

00:20:26.096 --> 00:20:29.206 A:middle
app in the QuickType bar.

00:20:29.376 --> 00:20:31.056 A:middle
Finally, I'll discuss one more

00:20:31.056 --> 00:20:32.726 A:middle
API your extension may find

00:20:32.726 --> 00:20:33.056 A:middle
useful.

00:20:34.106 --> 00:20:35.426 A:middle
When the user enables your app

00:20:35.426 --> 00:20:37.006 A:middle
extension for Password AutoFill,

00:20:37.276 --> 00:20:38.296 A:middle
you may have some setup that

00:20:38.296 --> 00:20:39.796 A:middle
needs to be done before the user

00:20:39.796 --> 00:20:41.096 A:middle
can get the best experience.

00:20:41.676 --> 00:20:43.186 A:middle
For starters, if you support

00:20:43.186 --> 00:20:44.046 A:middle
showing credentials in the

00:20:44.046 --> 00:20:45.726 A:middle
QuickType bar, your app or

00:20:45.726 --> 00:20:47.026 A:middle
extension will need to provide

00:20:47.026 --> 00:20:48.126 A:middle
its credential identities to

00:20:48.126 --> 00:20:49.086 A:middle
AutoFill first.

00:20:50.116 --> 00:20:51.166 A:middle
But it may also be useful to

00:20:51.166 --> 00:20:52.296 A:middle
show other settings at this

00:20:52.296 --> 00:20:54.226 A:middle
point, perhaps to offer the user

00:20:54.226 --> 00:20:55.416 A:middle
the ability to sign in to an

00:20:55.416 --> 00:20:56.736 A:middle
online service to retrieve the

00:20:56.736 --> 00:20:58.016 A:middle
passwords if they haven't

00:20:58.016 --> 00:20:58.396 A:middle
already.

00:21:00.286 --> 00:21:02.156 A:middle
Authentication services provides

00:21:02.156 --> 00:21:03.366 A:middle
an API to support these work

00:21:03.366 --> 00:21:03.816 A:middle
flows.

00:21:04.476 --> 00:21:05.516 A:middle
When these are enabled to your

00:21:05.516 --> 00:21:07.396 A:middle
extension, settings can launch

00:21:07.396 --> 00:21:08.726 A:middle
your extension and present its

00:21:08.726 --> 00:21:10.216 A:middle
UI, so you can let users

00:21:10.216 --> 00:21:11.386 A:middle
configure it.

00:21:13.096 --> 00:21:15.646 A:middle
To opt into this behavior, open

00:21:15.646 --> 00:21:17.076 A:middle
the Info Property List for your

00:21:17.076 --> 00:21:19.176 A:middle
app extension and add a new key

00:21:19.276 --> 00:21:21.096 A:middle
under NS extension attributes.

00:21:21.156 --> 00:21:23.716 A:middle
AS Credential Provider Extension

00:21:23.716 --> 00:21:26.186 A:middle
shows configuration UI with the

00:21:26.186 --> 00:21:27.496 A:middle
bullion value of yes.

00:21:28.426 --> 00:21:29.666 A:middle
This is how the system will know

00:21:29.666 --> 00:21:30.956 A:middle
to launch your extension when

00:21:30.956 --> 00:21:31.496 A:middle
its enabled.

00:21:33.896 --> 00:21:36.276 A:middle
Then, implement the Prepare

00:21:36.276 --> 00:21:37.546 A:middle
Interface For Extension

00:21:37.546 --> 00:21:38.906 A:middle
Configuration method in your

00:21:38.906 --> 00:21:40.466 A:middle
view controller, and set up the

00:21:40.466 --> 00:21:41.776 A:middle
appropriate UI for when your

00:21:41.776 --> 00:21:43.026 A:middle
extension is first enabled.

00:21:43.606 --> 00:21:47.146 A:middle
When your extension is done,

00:21:47.726 --> 00:21:49.076 A:middle
call the Complete Extension

00:21:49.076 --> 00:21:50.906 A:middle
Configuration Request method on

00:21:50.906 --> 00:21:52.616 A:middle
your extension context, and

00:21:52.616 --> 00:21:54.256 A:middle
settings will dismiss your UI.

00:21:54.336 --> 00:21:57.036 A:middle
At this point, your extension is

00:21:57.036 --> 00:21:57.456 A:middle
enabled.

00:21:57.906 --> 00:21:58.936 A:middle
It has provided credential

00:21:58.936 --> 00:22:00.236 A:middle
identities for AutoFill to

00:21:58.936 --> 00:22:00.236 A:middle
identities for AutoFill to

00:22:00.236 --> 00:22:01.486 A:middle
suggest for the QuickType bar.

00:22:02.136 --> 00:22:03.356 A:middle
It can provide the passwords

00:22:03.356 --> 00:22:04.326 A:middle
when those suggestions are

00:22:04.326 --> 00:22:06.316 A:middle
chosen, and it can show the user

00:22:06.316 --> 00:22:07.666 A:middle
a list of all their credentials.

00:22:08.236 --> 00:22:09.496 A:middle
You're now done integrating your

00:22:09.496 --> 00:22:10.926 A:middle
app with Password AutoFill and

00:22:10.926 --> 00:22:11.906 A:middle
the users can enjoy the

00:22:11.906 --> 00:22:13.166 A:middle
convenience of AutoFilling

00:22:13.166 --> 00:22:14.576 A:middle
Passwords saved into your app

00:22:14.806 --> 00:22:15.646 A:middle
wherever they're needed.

00:22:18.276 --> 00:22:19.636 A:middle
There are just a few more

00:22:19.676 --> 00:22:20.906 A:middle
general best practices to

00:22:20.906 --> 00:22:22.156 A:middle
consider while developing your

00:22:22.156 --> 00:22:22.706 A:middle
extension.

00:22:23.256 --> 00:22:27.496 A:middle
As discussed before, your

00:22:27.496 --> 00:22:28.856 A:middle
principal view controller may be

00:22:28.856 --> 00:22:30.396 A:middle
responsible for showing the UI

00:22:30.396 --> 00:22:31.256 A:middle
for a diverse set of

00:22:31.256 --> 00:22:32.076 A:middle
functionalities.

00:22:32.866 --> 00:22:34.156 A:middle
To achieve this, we recommend

00:22:34.156 --> 00:22:35.536 A:middle
using separate view controllers

00:22:35.536 --> 00:22:36.876 A:middle
managed by your principal view

00:22:36.876 --> 00:22:37.376 A:middle
controller.

00:22:38.596 --> 00:22:40.286 A:middle
For example, you may want to

00:22:40.286 --> 00:22:41.756 A:middle
have one view controller class

00:22:41.756 --> 00:22:42.786 A:middle
for displaying the credential

00:22:42.786 --> 00:22:43.146 A:middle
list.

00:22:43.456 --> 00:22:44.896 A:middle
And another for authenticating

00:22:44.896 --> 00:22:45.886 A:middle
the user when filling

00:22:45.886 --> 00:22:46.546 A:middle
credentials.

00:22:47.056 --> 00:22:48.996 A:middle
You can either present these

00:22:48.996 --> 00:22:50.066 A:middle
view controllers from your

00:22:50.066 --> 00:22:51.826 A:middle
principal view controller, or

00:22:51.826 --> 00:22:53.306 A:middle
use view controller containment

00:22:53.376 --> 00:22:54.366 A:middle
to embed their views.

00:22:54.506 --> 00:22:56.496 A:middle
And if you prepare your

00:22:56.496 --> 00:22:57.746 A:middle
interface by presenting view

00:22:57.746 --> 00:22:59.366 A:middle
controllers, the presentation

00:22:59.366 --> 00:23:00.206 A:middle
should be done without

00:22:59.366 --> 00:23:00.206 A:middle
should be done without

00:23:00.206 --> 00:23:01.736 A:middle
animation, since the

00:23:01.736 --> 00:23:03.086 A:middle
presentation of your principal

00:23:03.086 --> 00:23:04.296 A:middle
view controller is already

00:23:04.296 --> 00:23:04.766 A:middle
animated.

00:23:05.356 --> 00:23:09.766 A:middle
In general, extensions should be

00:23:09.766 --> 00:23:10.826 A:middle
lightweight and ready to

00:23:10.826 --> 00:23:12.416 A:middle
terminate when they're done, and

00:23:12.416 --> 00:23:13.396 A:middle
this includes AutoFill

00:23:13.396 --> 00:23:14.896 A:middle
Credential Provider Extensions.

00:23:16.046 --> 00:23:17.226 A:middle
Your extension will be invoked

00:23:17.226 --> 00:23:18.846 A:middle
to perform one particular task,

00:23:18.996 --> 00:23:20.126 A:middle
and you shouldn't include any

00:23:20.126 --> 00:23:21.966 A:middle
unnecessary work flows or user

00:23:21.966 --> 00:23:23.216 A:middle
interactions beyond what is

00:23:23.216 --> 00:23:23.536 A:middle
needed.

00:23:25.116 --> 00:23:26.666 A:middle
Be aware that the system may

00:23:26.666 --> 00:23:27.866 A:middle
terminate or suspend your

00:23:27.866 --> 00:23:29.526 A:middle
extension for various reasons at

00:23:29.526 --> 00:23:30.026 A:middle
any time.

00:23:30.026 --> 00:23:32.256 A:middle
For example, the system will

00:23:32.256 --> 00:23:33.566 A:middle
terminate AutoFill Credential

00:23:33.566 --> 00:23:34.866 A:middle
Provider Extensions while

00:23:34.866 --> 00:23:36.166 A:middle
they're in use if the user

00:23:36.166 --> 00:23:37.016 A:middle
switches apps.

00:23:38.656 --> 00:23:39.936 A:middle
And your extension will have a

00:23:39.936 --> 00:23:41.206 A:middle
separate sign box from your main

00:23:41.206 --> 00:23:42.616 A:middle
app, but it will still need to

00:23:42.616 --> 00:23:44.066 A:middle
share data, such as the user's

00:23:44.066 --> 00:23:44.726 A:middle
credentials.

00:23:45.586 --> 00:23:47.106 A:middle
Use App Groups or Shared

00:23:47.106 --> 00:23:48.746 A:middle
Keychains to share data between

00:23:48.746 --> 00:23:50.146 A:middle
your app and its extensions.

00:23:51.316 --> 00:23:52.616 A:middle
For a review about extension

00:23:52.616 --> 00:23:54.596 A:middle
development in general, refer to

00:23:54.596 --> 00:23:56.426 A:middle
the Creating Extensions for iOS

00:23:56.506 --> 00:23:58.856 A:middle
and OS X part two session from

00:23:58.856 --> 00:24:00.436 A:middle
WWDC 2014.

00:23:58.856 --> 00:24:00.436 A:middle
WWDC 2014.

00:24:03.036 --> 00:24:05.246 A:middle
Finally, you can use Safari if

00:24:05.246 --> 00:24:06.046 A:middle
you need to debug your

00:24:06.046 --> 00:24:07.386 A:middle
credential provider extension

00:24:07.576 --> 00:24:08.456 A:middle
while testing filling

00:24:08.456 --> 00:24:09.096 A:middle
credentials.

00:24:10.396 --> 00:24:12.416 A:middle
To do this, first activate the

00:24:12.416 --> 00:24:13.966 A:middle
extension scheme, select a

00:24:13.966 --> 00:24:15.476 A:middle
target, and select Run.

00:24:17.556 --> 00:24:19.526 A:middle
When you do this, Xcode will ask

00:24:19.526 --> 00:24:20.896 A:middle
you to choose an app to host the

00:24:20.896 --> 00:24:21.476 A:middle
extension.

00:24:22.136 --> 00:24:23.886 A:middle
Choose Safari from the list, and

00:24:23.886 --> 00:24:25.266 A:middle
click the Run button.

00:24:26.766 --> 00:24:28.386 A:middle
Safari will then open, and you

00:24:28.386 --> 00:24:29.946 A:middle
can navigate to a sign-in page

00:24:29.946 --> 00:24:30.926 A:middle
where you want to test your

00:24:30.926 --> 00:24:31.496 A:middle
extension.

00:24:32.376 --> 00:24:33.496 A:middle
When you open your credential

00:24:33.496 --> 00:24:34.936 A:middle
list, or select a credential

00:24:34.936 --> 00:24:36.416 A:middle
from the QuickType bar, your

00:24:36.546 --> 00:24:38.076 A:middle
extension will be launched, and

00:24:38.076 --> 00:24:39.376 A:middle
Xcode will attach the debugger

00:24:39.376 --> 00:24:40.916 A:middle
to it, so you can begin your

00:24:40.916 --> 00:24:41.576 A:middle
debug session.

00:24:44.506 --> 00:24:46.106 A:middle
For debugging your extension in

00:24:46.106 --> 00:24:48.316 A:middle
the other cases, use the Attach

00:24:48.316 --> 00:24:50.436 A:middle
to Process Item in Xcode's debug

00:24:50.436 --> 00:24:51.806 A:middle
menu to start attaching the

00:24:51.806 --> 00:24:52.206 A:middle
debugger.

00:24:53.426 --> 00:24:54.626 A:middle
You can then manually open

00:24:54.626 --> 00:24:55.676 A:middle
Settings to enable your

00:24:55.676 --> 00:24:56.746 A:middle
extension if you want to test

00:24:56.746 --> 00:24:58.806 A:middle
the settings UI, or you can open

00:24:58.806 --> 00:25:00.326 A:middle
any app's login screen if you'd

00:24:58.806 --> 00:25:00.326 A:middle
any app's login screen if you'd

00:25:00.326 --> 00:25:01.636 A:middle
like to debug AutoFill there.

00:25:05.376 --> 00:25:07.686 A:middle
In summary, iOS 12 enables

00:25:07.686 --> 00:25:08.836 A:middle
Password Manager apps to

00:25:08.836 --> 00:25:09.606 A:middle
integrate with Password

00:25:09.606 --> 00:25:10.056 A:middle
AutoFill.

00:25:11.146 --> 00:25:12.626 A:middle
Using APIs from the New

00:25:12.626 --> 00:25:13.736 A:middle
Authentication Services

00:25:13.736 --> 00:25:15.426 A:middle
framework, your credential

00:25:15.426 --> 00:25:16.896 A:middle
provider extension can show the

00:25:16.896 --> 00:25:17.666 A:middle
user a list of their

00:25:17.666 --> 00:25:18.296 A:middle
credentials.

00:25:18.916 --> 00:25:19.746 A:middle
Show credentials on the

00:25:19.746 --> 00:25:21.696 A:middle
QuickType bar, and optionally

00:25:21.696 --> 00:25:22.976 A:middle
provide a way for the user to

00:25:22.976 --> 00:25:24.346 A:middle
configure the extension from

00:25:24.346 --> 00:25:24.856 A:middle
settings.

00:25:27.416 --> 00:25:29.156 A:middle
For more information, refer to

00:25:29.156 --> 00:25:30.486 A:middle
the Apple Developer Page for

00:25:30.486 --> 00:25:31.006 A:middle
this session.

00:25:32.066 --> 00:25:32.996 A:middle
To learn more about the other

00:25:32.996 --> 00:25:33.916 A:middle
improvements to password

00:25:33.916 --> 00:25:36.226 A:middle
management in iOS 12, see the

00:25:36.226 --> 00:25:37.796 A:middle
Automatic Strong Passwords and

00:25:37.796 --> 00:25:39.276 A:middle
Security Code AutoFill session.

00:25:40.156 --> 00:25:41.226 A:middle
And if you'd like to learn more

00:25:41.226 --> 00:25:42.216 A:middle
about the Password AutoFill

00:25:42.216 --> 00:25:44.276 A:middle
feature and associated domains,

00:25:44.736 --> 00:25:46.156 A:middle
see the Introducing Password

00:25:46.156 --> 00:25:48.166 A:middle
AutoFill for Apps session from

00:25:48.166 --> 00:25:49.866 A:middle
WWDC 2017.
