WEBVTT

00:00:07.516 --> 00:00:15.500 A:middle
[ Music ]

00:00:20.456 --> 00:00:22.206 A:middle
&gt;&gt; Hello. Good morning,

00:00:22.426 --> 00:00:22.976 A:middle
everyone.

00:00:23.516 --> 00:00:27.016 A:middle
[ Applause ]

00:00:27.516 --> 00:00:28.696 A:middle
And welcome to this year's

00:00:28.696 --> 00:00:30.586 A:middle
session on HTP Light Streaming.

00:00:31.486 --> 00:00:32.786 A:middle
My name is Emil Andriescu.

00:00:33.476 --> 00:00:35.286 A:middle
Today's talk is about measuring

00:00:35.286 --> 00:00:37.516 A:middle
and optimizing HLS performance.

00:00:38.516 --> 00:00:40.226 A:middle
First, let's reflect for a

00:00:40.226 --> 00:00:42.936 A:middle
second on why we should care and

00:00:42.936 --> 00:00:44.126 A:middle
why it is essential for

00:00:44.126 --> 00:00:44.796 A:middle
application.

00:00:45.336 --> 00:00:48.646 A:middle
Let's pretend it's Saturday

00:00:48.646 --> 00:00:50.276 A:middle
night, you're in your favorite

00:00:50.276 --> 00:00:52.076 A:middle
spot on the couch, you've

00:00:52.076 --> 00:00:53.676 A:middle
skillfully browsed through all

00:00:53.676 --> 00:00:55.446 A:middle
the reviews, title is set,

00:00:55.886 --> 00:00:58.046 A:middle
popcorn is ready, and you

00:00:58.046 --> 00:01:00.936 A:middle
eagerly tap play when this

00:00:58.046 --> 00:01:00.936 A:middle
eagerly tap play when this

00:01:00.936 --> 00:01:01.526 A:middle
happens.

00:01:02.916 --> 00:01:05.336 A:middle
Faced with this mysteriously and

00:01:05.336 --> 00:01:07.376 A:middle
never-ending animation, you ask

00:01:07.376 --> 00:01:09.096 A:middle
yourself, what could be worse.

00:01:10.506 --> 00:01:12.296 A:middle
Let's face it, you know it, it's

00:01:12.296 --> 00:01:13.136 A:middle
a playback error.

00:01:13.706 --> 00:01:17.846 A:middle
But what do customers really

00:01:17.906 --> 00:01:20.306 A:middle
expect from HTP Light Streaming?

00:01:21.016 --> 00:01:22.126 A:middle
Well, they expect

00:01:22.256 --> 00:01:24.176 A:middle
high-definition image, high

00:01:24.176 --> 00:01:26.506 A:middle
fidelity sound, and instant

00:01:26.506 --> 00:01:28.256 A:middle
media response when they tap

00:01:28.376 --> 00:01:28.686 A:middle
play.

00:01:29.466 --> 00:01:31.096 A:middle
Yet, streaming applications over

00:01:31.096 --> 00:01:32.836 A:middle
the internet are always at the

00:01:32.836 --> 00:01:34.706 A:middle
mercy of the network, so how do

00:01:34.706 --> 00:01:35.616 A:middle
we reconcile?

00:01:36.696 --> 00:01:38.656 A:middle
Well, HTP Light Streaming was

00:01:38.656 --> 00:01:40.176 A:middle
designed to address this, that

00:01:40.176 --> 00:01:42.246 A:middle
is to provide the best possible

00:01:42.516 --> 00:01:43.786 A:middle
uninterrupted streaming

00:01:43.786 --> 00:01:46.166 A:middle
experience in an unpredictable

00:01:46.166 --> 00:01:47.156 A:middle
network environment.

00:01:47.156 --> 00:01:48.406 A:middle
So why are we here?

00:01:48.666 --> 00:01:49.576 A:middle
Well, there's more.

00:01:50.006 --> 00:01:52.696 A:middle
Over time, HLS has evolved into

00:01:52.696 --> 00:01:54.336 A:middle
a more dynamic ecosystem,

00:01:54.546 --> 00:01:56.566 A:middle
supporting new offering features

00:01:56.566 --> 00:01:58.376 A:middle
such as I-frame playback, new

00:01:58.376 --> 00:02:00.276 A:middle
media formats, and of course new

00:01:58.376 --> 00:02:00.276 A:middle
media formats, and of course new

00:02:00.276 --> 00:02:00.896 A:middle
codecs.

00:02:01.336 --> 00:02:03.316 A:middle
At the same time, we're

00:02:03.316 --> 00:02:05.896 A:middle
constantly adding powerful iOS,

00:02:06.046 --> 00:02:08.985 A:middle
tvOS, and macOS APIs such as you

00:02:09.316 --> 00:02:12.236 A:middle
can tune and adjust playback to

00:02:12.236 --> 00:02:13.946 A:middle
your target audience and provide

00:02:13.946 --> 00:02:15.786 A:middle
a much richer user experience.

00:02:16.876 --> 00:02:18.686 A:middle
Delivery patterns and transport

00:02:18.726 --> 00:02:20.136 A:middle
protocols, they are also

00:02:20.136 --> 00:02:22.186 A:middle
evolving, so it is important to

00:02:22.186 --> 00:02:23.776 A:middle
look at your server side

00:02:23.776 --> 00:02:26.046 A:middle
performance in connection to how

00:02:26.046 --> 00:02:27.506 A:middle
content is being consumed,

00:02:27.776 --> 00:02:29.916 A:middle
either on a mobile device or in

00:02:29.916 --> 00:02:33.996 A:middle
the living room.

00:02:34.216 --> 00:02:36.266 A:middle
Given all these options, how can

00:02:36.266 --> 00:02:37.616 A:middle
you be sure that you are

00:02:37.616 --> 00:02:39.616 A:middle
providing the best possible user

00:02:39.616 --> 00:02:41.016 A:middle
experience to your audience?

00:02:41.016 --> 00:02:43.256 A:middle
Well, the first step is to

00:02:43.256 --> 00:02:45.376 A:middle
understand and quantify the user

00:02:45.376 --> 00:02:47.296 A:middle
experience in conjunction to

00:02:47.296 --> 00:02:48.796 A:middle
changes that you make to your

00:02:49.056 --> 00:02:50.506 A:middle
content, application, or

00:02:50.506 --> 00:02:51.056 A:middle
delivery.

00:02:52.176 --> 00:02:53.866 A:middle
This is an area where we believe

00:02:53.866 --> 00:02:55.456 A:middle
it is imperative to measure

00:02:55.906 --> 00:02:57.416 A:middle
rather than to guess which

00:02:57.416 --> 00:02:58.996 A:middle
configuration is optimal.

00:03:00.246 --> 00:03:01.416 A:middle
What is this session about?

00:03:02.176 --> 00:03:03.846 A:middle
First, we want to establish a

00:03:03.846 --> 00:03:05.456 A:middle
common language for discussing

00:03:05.456 --> 00:03:06.946 A:middle
streaming quality of service.

00:03:07.636 --> 00:03:09.436 A:middle
Second, we want to discuss how

00:03:09.436 --> 00:03:11.156 A:middle
to objectively measure your

00:03:11.156 --> 00:03:12.096 A:middle
application streaming

00:03:12.096 --> 00:03:12.836 A:middle
performance.

00:03:13.766 --> 00:03:15.266 A:middle
Third, we want to help you

00:03:15.266 --> 00:03:17.796 A:middle
identify and solve some of the

00:03:17.796 --> 00:03:19.746 A:middle
problems that impair streaming

00:03:19.746 --> 00:03:20.906 A:middle
quality of service.

00:03:22.416 --> 00:03:24.196 A:middle
And finally, we want to get

00:03:24.196 --> 00:03:25.606 A:middle
those master playlists right.

00:03:25.976 --> 00:03:27.486 A:middle
This is because many of the

00:03:27.616 --> 00:03:29.376 A:middle
problems and issues that we see

00:03:29.596 --> 00:03:31.056 A:middle
with streaming quality are

00:03:31.056 --> 00:03:33.226 A:middle
actually rooted in the authoring

00:03:33.256 --> 00:03:34.626 A:middle
of the master playlist.

00:03:35.446 --> 00:03:37.216 A:middle
Before going into detail, let's

00:03:37.216 --> 00:03:38.916 A:middle
begin with a brief overview of

00:03:38.916 --> 00:03:40.246 A:middle
an HLS playback session.

00:03:41.216 --> 00:03:42.736 A:middle
As you'd expect, it begins with

00:03:42.736 --> 00:03:43.766 A:middle
the download of a master

00:03:43.766 --> 00:03:44.426 A:middle
playlist.

00:03:44.896 --> 00:03:47.396 A:middle
Once the playlist is passed by

00:03:47.396 --> 00:03:49.356 A:middle
AV Player, it knows what content

00:03:49.356 --> 00:03:50.176 A:middle
it refers to.

00:03:50.416 --> 00:03:51.496 A:middle
In this case, we have two

00:03:51.496 --> 00:03:53.356 A:middle
bitrates, 1 megabit and 2

00:03:53.356 --> 00:03:53.836 A:middle
megabit.

00:03:53.836 --> 00:03:55.546 A:middle
AV Player will pick one of

00:03:55.546 --> 00:03:57.406 A:middle
these, will go ahead and

00:03:57.406 --> 00:03:58.846 A:middle
download a media playlist

00:03:58.846 --> 00:03:59.816 A:middle
together with additional

00:03:59.816 --> 00:04:01.806 A:middle
artifacts such as keys, and then

00:03:59.816 --> 00:04:01.806 A:middle
artifacts such as keys, and then

00:04:01.806 --> 00:04:03.026 A:middle
continue to download media

00:04:03.026 --> 00:04:05.216 A:middle
segments until the buffer level

00:04:05.216 --> 00:04:06.596 A:middle
is sufficient for playback.

00:04:07.106 --> 00:04:10.446 A:middle
When that happens, the AV Player

00:04:10.446 --> 00:04:11.916 A:middle
item will communicate a

00:04:11.916 --> 00:04:14.516 A:middle
prediction of playability by

00:04:14.516 --> 00:04:16.176 A:middle
setting the is playback likely

00:04:16.176 --> 00:04:17.766 A:middle
to keep up property to true.

00:04:18.406 --> 00:04:20.466 A:middle
If you've preset the AV Player

00:04:20.546 --> 00:04:22.125 A:middle
Rate to 1, so you're using the

00:04:22.125 --> 00:04:24.026 A:middle
Autoplay feature of a AV Player,

00:04:24.026 --> 00:04:26.426 A:middle
the player will go ahead and

00:04:26.426 --> 00:04:27.886 A:middle
start playback immediately.

00:04:28.476 --> 00:04:29.946 A:middle
We call this Time Interval

00:04:29.946 --> 00:04:30.786 A:middle
Startup Time.

00:04:31.666 --> 00:04:33.426 A:middle
From this point on, the wall

00:04:33.426 --> 00:04:35.516 A:middle
clock, also known as real time,

00:04:35.866 --> 00:04:37.516 A:middle
and the player item time base

00:04:37.516 --> 00:04:39.076 A:middle
will advance at the same speed,

00:04:39.436 --> 00:04:41.396 A:middle
with one condition, which is

00:04:41.396 --> 00:04:43.786 A:middle
that content must arrive at an

00:04:43.786 --> 00:04:46.056 A:middle
equivalent or faster rate than

00:04:46.056 --> 00:04:47.296 A:middle
that which AV Player is

00:04:47.296 --> 00:04:47.926 A:middle
consuming.

00:04:48.586 --> 00:04:49.916 A:middle
If that's not the case, AV

00:04:49.966 --> 00:04:52.036 A:middle
Player will try and switch down

00:04:52.036 --> 00:04:53.336 A:middle
to the 1 megabit here.

00:04:53.766 --> 00:04:55.426 A:middle
If network still cannot keep up

00:04:55.426 --> 00:04:57.446 A:middle
with real time at 1 megabit,

00:04:57.726 --> 00:04:59.276 A:middle
well the buffer will eventually

00:04:59.276 --> 00:05:01.566 A:middle
run dry, and AV Player has no

00:04:59.276 --> 00:05:01.566 A:middle
run dry, and AV Player has no

00:05:01.566 --> 00:05:03.006 A:middle
choice here, it needs to stop

00:05:03.006 --> 00:05:04.526 A:middle
playback, event which we call a

00:05:04.526 --> 00:05:04.926 A:middle
stall.

00:05:05.816 --> 00:05:07.246 A:middle
The player will remain in this

00:05:07.246 --> 00:05:09.196 A:middle
state not only until data starts

00:05:09.196 --> 00:05:10.776 A:middle
flowing again, but up until

00:05:10.776 --> 00:05:11.996 A:middle
there's a sufficient level of

00:05:11.996 --> 00:05:13.796 A:middle
buffer for the player item to

00:05:13.796 --> 00:05:15.346 A:middle
trigger another positive

00:05:15.416 --> 00:05:16.516 A:middle
playability prediction.

00:05:17.286 --> 00:05:18.596 A:middle
After that, playback can

00:05:18.596 --> 00:05:19.576 A:middle
continue normally.

00:05:20.666 --> 00:05:22.166 A:middle
Now let's discuss about

00:05:22.456 --> 00:05:24.176 A:middle
quantifying the user experience

00:05:24.176 --> 00:05:25.116 A:middle
for such a session.

00:05:26.216 --> 00:05:27.926 A:middle
We do that by defining a set of

00:05:27.926 --> 00:05:29.526 A:middle
Key Performance Indicators or

00:05:29.526 --> 00:05:30.396 A:middle
KPIs.

00:05:31.056 --> 00:05:32.596 A:middle
We picked five of them that we

00:05:32.596 --> 00:05:34.166 A:middle
believe are most representative

00:05:34.196 --> 00:05:35.556 A:middle
for HTP Light Streaming.

00:05:36.946 --> 00:05:38.776 A:middle
One question you may ask is how

00:05:38.776 --> 00:05:40.436 A:middle
much time do my users spend

00:05:40.836 --> 00:05:42.996 A:middle
waiting for playback to start.

00:05:42.996 --> 00:05:44.256 A:middle
Is it one second?

00:05:44.256 --> 00:05:46.646 A:middle
Is it five seconds or maybe 30

00:05:46.646 --> 00:05:47.166 A:middle
seconds?

00:05:47.486 --> 00:05:49.036 A:middle
This is an essential point in

00:05:49.036 --> 00:05:50.486 A:middle
terms of user experience.

00:05:51.336 --> 00:05:53.906 A:middle
Further, playback stalls, like

00:05:53.906 --> 00:05:55.616 A:middle
the one we just saw, they are

00:05:55.616 --> 00:05:56.966 A:middle
disruptive to the user.

00:05:57.076 --> 00:05:59.156 A:middle
We care both about how often

00:05:59.156 --> 00:06:00.936 A:middle
they occur, but maybe more

00:05:59.156 --> 00:06:00.936 A:middle
they occur, but maybe more

00:06:00.936 --> 00:06:02.646 A:middle
importantly, how long does it

00:06:02.676 --> 00:06:04.126 A:middle
take to recover from a stall?

00:06:05.126 --> 00:06:07.466 A:middle
Yet, the best strategy without

00:06:07.466 --> 00:06:09.126 A:middle
knowledge of the future to not

00:06:09.126 --> 00:06:11.136 A:middle
stall is to deliver content at

00:06:11.136 --> 00:06:12.666 A:middle
the lowest available bitrate.

00:06:13.106 --> 00:06:14.386 A:middle
But of course that's not what we

00:06:14.386 --> 00:06:14.666 A:middle
want.

00:06:14.666 --> 00:06:16.076 A:middle
We want to deliver the best

00:06:16.076 --> 00:06:18.206 A:middle
audio and video quality while

00:06:18.206 --> 00:06:19.356 A:middle
still not stalling.

00:06:19.686 --> 00:06:21.116 A:middle
So there's a clear tradeoff

00:06:21.116 --> 00:06:23.136 A:middle
between risk of stalling and

00:06:23.136 --> 00:06:24.526 A:middle
media quality, right.

00:06:24.626 --> 00:06:26.606 A:middle
For that, we need another

00:06:26.606 --> 00:06:28.566 A:middle
measure of the overall media

00:06:28.566 --> 00:06:29.776 A:middle
quality for a session.

00:06:30.736 --> 00:06:32.976 A:middle
And finally, playback errors.

00:06:32.976 --> 00:06:33.806 A:middle
We talked about that.

00:06:34.166 --> 00:06:35.366 A:middle
They are more disruptive than

00:06:35.366 --> 00:06:36.166 A:middle
stalls, right.

00:06:36.826 --> 00:06:39.806 A:middle
What can we do to track playback

00:06:39.806 --> 00:06:40.276 A:middle
errors?

00:06:41.196 --> 00:06:41.586 A:middle
Okay.

00:06:41.736 --> 00:06:42.866 A:middle
Let's begin with startup time.

00:06:43.676 --> 00:06:45.526 A:middle
There are multiple APIs that you

00:06:45.526 --> 00:06:47.506 A:middle
can use to obtain or compute

00:06:47.506 --> 00:06:48.296 A:middle
startup time.

00:06:48.666 --> 00:06:50.786 A:middle
First, don't use the AV Player

00:06:51.046 --> 00:06:52.476 A:middle
status changing to ready to

00:06:52.476 --> 00:06:52.836 A:middle
play.

00:06:52.836 --> 00:06:53.796 A:middle
That doesn't tell you that

00:06:53.836 --> 00:06:56.256 A:middle
playback is going to start.

00:06:56.446 --> 00:06:58.086 A:middle
However, if you are using

00:06:58.086 --> 00:06:59.346 A:middle
Autoplay, so you're setting the

00:06:59.346 --> 00:07:00.726 A:middle
rate, the player's rate in

00:06:59.346 --> 00:07:00.726 A:middle
rate, the player's rate in

00:07:00.726 --> 00:07:02.716 A:middle
advance, you can use the AV

00:07:02.716 --> 00:07:04.506 A:middle
Player item status changing to

00:07:04.506 --> 00:07:06.606 A:middle
ready to play or the AV Player

00:07:06.606 --> 00:07:08.536 A:middle
item is playback likely to keep

00:07:08.536 --> 00:07:09.516 A:middle
out changing to true.

00:07:09.516 --> 00:07:11.026 A:middle
These are observable properties.

00:07:12.176 --> 00:07:13.836 A:middle
When that happens, you know that

00:07:13.886 --> 00:07:15.876 A:middle
playback is about to start, but

00:07:15.876 --> 00:07:16.916 A:middle
there might be a few

00:07:17.076 --> 00:07:18.716 A:middle
milliseconds before playback

00:07:18.716 --> 00:07:19.616 A:middle
actually starts.

00:07:19.876 --> 00:07:21.346 A:middle
So what we recommend is to

00:07:21.346 --> 00:07:23.766 A:middle
either use the AV Player time

00:07:23.766 --> 00:07:25.056 A:middle
control status changing to

00:07:25.056 --> 00:07:26.836 A:middle
playing or to track the player

00:07:26.836 --> 00:07:28.376 A:middle
item time base, and there's a

00:07:28.376 --> 00:07:29.696 A:middle
notification that allows you to

00:07:29.696 --> 00:07:30.086 A:middle
do that.

00:07:30.596 --> 00:07:34.526 A:middle
AV Player relies on heuristics

00:07:34.526 --> 00:07:36.696 A:middle
to avoid stalls, but we know it,

00:07:36.696 --> 00:07:38.026 A:middle
sometimes they're unavoidable.

00:07:38.846 --> 00:07:40.946 A:middle
You can monitor as stalls occur

00:07:40.946 --> 00:07:42.556 A:middle
by registering to the AV Player

00:07:42.556 --> 00:07:43.946 A:middle
item playback stall

00:07:43.946 --> 00:07:44.736 A:middle
notification.

00:07:45.136 --> 00:07:46.816 A:middle
The suggestion here is to count

00:07:46.876 --> 00:07:48.126 A:middle
the occurrence of stalls.

00:07:48.736 --> 00:07:49.776 A:middle
Of course, if you want to

00:07:49.776 --> 00:07:52.346 A:middle
compare and aggregate stall

00:07:52.346 --> 00:07:54.466 A:middle
behavior across sessions of

00:07:54.466 --> 00:07:56.016 A:middle
different duration, then you

00:07:56.016 --> 00:07:57.096 A:middle
need to normalize this.

00:07:57.096 --> 00:07:57.826 A:middle
How do you do that?

00:07:58.296 --> 00:08:00.056 A:middle
Well, we recommend that you use

00:07:58.296 --> 00:08:00.056 A:middle
Well, we recommend that you use

00:08:00.296 --> 00:08:01.996 A:middle
the total duration watched and

00:08:01.996 --> 00:08:04.636 A:middle
compute the stall rate in terms

00:08:04.636 --> 00:08:07.476 A:middle
of stalls per unit of time

00:08:07.476 --> 00:08:08.986 A:middle
watched, such as stalls per

00:08:08.986 --> 00:08:09.326 A:middle
hour.

00:08:09.926 --> 00:08:13.976 A:middle
A stall of 30 seconds is much

00:08:13.976 --> 00:08:16.296 A:middle
worse to the user than a stall

00:08:16.296 --> 00:08:17.206 A:middle
of one second.

00:08:17.436 --> 00:08:19.296 A:middle
This is why we also care about

00:08:19.506 --> 00:08:20.806 A:middle
rebuffering time or stall

00:08:20.806 --> 00:08:21.356 A:middle
duration.

00:08:22.276 --> 00:08:23.716 A:middle
By measuring the time interval

00:08:23.716 --> 00:08:25.026 A:middle
between playback stalled

00:08:25.026 --> 00:08:26.956 A:middle
notification and when the player

00:08:26.956 --> 00:08:28.566 A:middle
item time base changes back to

00:08:28.566 --> 00:08:31.306 A:middle
1, you can compute an accurate

00:08:31.306 --> 00:08:32.206 A:middle
stall duration.

00:08:32.936 --> 00:08:34.956 A:middle
Again, the total duration can be

00:08:34.956 --> 00:08:37.206 A:middle
normalized using the duration

00:08:37.206 --> 00:08:38.746 A:middle
watched of the session.

00:08:39.025 --> 00:08:40.106 A:middle
Well, you might be wondering at

00:08:40.106 --> 00:08:41.356 A:middle
this point, how do I compute the

00:08:41.356 --> 00:08:43.006 A:middle
duration watched of a session?

00:08:43.395 --> 00:08:44.826 A:middle
And the answer is, through the

00:08:44.826 --> 00:08:45.636 A:middle
Access Log.

00:08:45.636 --> 00:08:46.596 A:middle
Let's see how we do that.

00:08:47.686 --> 00:08:49.866 A:middle
So this is a snippet of code.

00:08:50.806 --> 00:08:52.396 A:middle
First, we get a reference to the

00:08:52.396 --> 00:08:54.126 A:middle
Access Log from the player item.

00:08:55.096 --> 00:08:57.386 A:middle
We iterate through the events in

00:08:57.386 --> 00:08:59.316 A:middle
the Access Log, and we simply

00:08:59.316 --> 00:09:02.156 A:middle
sum up each events duration

00:08:59.316 --> 00:09:02.156 A:middle
sum up each events duration

00:09:02.156 --> 00:09:02.456 A:middle
watch.

00:09:02.456 --> 00:09:03.056 A:middle
And there you have it.

00:09:03.056 --> 00:09:04.466 A:middle
We computed a total duration

00:09:04.466 --> 00:09:05.406 A:middle
watch for a session.

00:09:05.936 --> 00:09:07.416 A:middle
And now you may be wondering,

00:09:07.416 --> 00:09:08.576 A:middle
well what is this event?

00:09:08.576 --> 00:09:09.946 A:middle
What is an event in the access

00:09:09.946 --> 00:09:10.456 A:middle
log mean?

00:09:10.726 --> 00:09:12.206 A:middle
Well, for that let's look at how

00:09:12.206 --> 00:09:14.486 A:middle
AV Player Item Access Log works.

00:09:15.306 --> 00:09:16.976 A:middle
So the AV Player Item Access Log

00:09:16.976 --> 00:09:18.356 A:middle
provides a history of your

00:09:18.356 --> 00:09:18.876 A:middle
session.

00:09:19.476 --> 00:09:21.196 A:middle
It is initially null, but as

00:09:21.196 --> 00:09:23.476 A:middle
playback occurs, you're going to

00:09:23.476 --> 00:09:25.476 A:middle
receive an AV Player Item New

00:09:25.476 --> 00:09:27.086 A:middle
Access Log Entry notification,

00:09:27.086 --> 00:09:28.746 A:middle
and by that time, you'll have an

00:09:28.746 --> 00:09:29.396 A:middle
Access Log.

00:09:29.916 --> 00:09:30.946 A:middle
You'll see that events in the

00:09:30.946 --> 00:09:33.136 A:middle
Access Log contain information

00:09:33.856 --> 00:09:36.426 A:middle
on various areas such as the

00:09:36.426 --> 00:09:38.436 A:middle
current variant URL, the current

00:09:38.436 --> 00:09:41.326 A:middle
bitrate, duration watch, number

00:09:41.326 --> 00:09:42.466 A:middle
of stalls, and so on.

00:09:43.296 --> 00:09:45.636 A:middle
These values are initially by

00:09:45.636 --> 00:09:47.076 A:middle
convention initialized to a

00:09:47.786 --> 00:09:49.326 A:middle
negative value or null.

00:09:49.906 --> 00:09:52.316 A:middle
As playback occurs, they are

00:09:52.316 --> 00:09:53.706 A:middle
updated with actual measurement

00:09:53.706 --> 00:09:55.756 A:middle
data and the actual variant URL

00:09:55.756 --> 00:09:56.406 A:middle
that you're playing.

00:09:56.406 --> 00:09:59.016 A:middle
There are two cases in which we

00:09:59.016 --> 00:10:00.576 A:middle
will add new events to the

00:09:59.016 --> 00:10:00.576 A:middle
will add new events to the

00:10:00.576 --> 00:10:02.886 A:middle
Access Log, and that is variant

00:10:02.886 --> 00:10:04.916 A:middle
switch, like in this case, or a

00:10:04.916 --> 00:10:05.806 A:middle
playback seek.

00:10:06.256 --> 00:10:08.056 A:middle
But before a new event is added,

00:10:08.126 --> 00:10:10.036 A:middle
the old one becomes immutable,

00:10:10.416 --> 00:10:11.926 A:middle
and then we add the new event.

00:10:12.226 --> 00:10:13.606 A:middle
Now, keep in mind that while

00:10:13.606 --> 00:10:16.066 A:middle
these values here are constantly

00:10:16.066 --> 00:10:17.876 A:middle
updating as playback occurs, so

00:10:17.876 --> 00:10:20.286 A:middle
the values in the last event,

00:10:21.436 --> 00:10:22.586 A:middle
they are not observable

00:10:22.586 --> 00:10:22.976 A:middle
properties.

00:10:25.116 --> 00:10:26.966 A:middle
We also mentioned that we care

00:10:26.966 --> 00:10:29.466 A:middle
about media quality.

00:10:29.956 --> 00:10:31.566 A:middle
How do we compute that?

00:10:33.376 --> 00:10:35.326 A:middle
A way to measure if the user is

00:10:35.326 --> 00:10:36.966 A:middle
presented with the best possible

00:10:36.966 --> 00:10:38.346 A:middle
media quality is of course to

00:10:38.346 --> 00:10:39.686 A:middle
look at the video bitrate being

00:10:39.686 --> 00:10:40.136 A:middle
served.

00:10:40.636 --> 00:10:42.646 A:middle
Here we don't really care about

00:10:42.646 --> 00:10:44.416 A:middle
the startup time or the stall

00:10:44.416 --> 00:10:46.026 A:middle
duration, so let's remove those.

00:10:46.396 --> 00:10:47.646 A:middle
So we're left with the playback

00:10:47.646 --> 00:10:47.946 A:middle
state.

00:10:48.446 --> 00:10:50.066 A:middle
In this example, we see that we

00:10:50.066 --> 00:10:52.426 A:middle
played for a longer time on the

00:10:52.426 --> 00:10:55.536 A:middle
2 megabit variant and less time

00:10:55.576 --> 00:10:56.476 A:middle
at 1 megabit.

00:10:57.016 --> 00:10:59.166 A:middle
By time weighting each bitrate,

00:10:59.466 --> 00:11:01.326 A:middle
we can obtain a single value of

00:10:59.466 --> 00:11:01.326 A:middle
we can obtain a single value of

00:11:01.326 --> 00:11:02.766 A:middle
video quality that we can

00:11:02.766 --> 00:11:04.956 A:middle
compare across sessions.

00:11:06.046 --> 00:11:07.226 A:middle
We call this measure a

00:11:07.226 --> 00:11:09.206 A:middle
Time-Weighted Indicated Bitrate,

00:11:09.586 --> 00:11:11.706 A:middle
and computing it is just as

00:11:11.836 --> 00:11:13.656 A:middle
simple as with the total

00:11:13.656 --> 00:11:14.266 A:middle
duration.

00:11:15.116 --> 00:11:17.496 A:middle
Once again, we get a reference

00:11:17.496 --> 00:11:19.176 A:middle
to the Player Items Access Log.

00:11:19.546 --> 00:11:21.076 A:middle
We iterate through the events in

00:11:21.076 --> 00:11:21.526 A:middle
the log.

00:11:21.846 --> 00:11:23.526 A:middle
We compute the time weight of

00:11:23.526 --> 00:11:25.026 A:middle
each event with respect to the

00:11:25.026 --> 00:11:26.936 A:middle
total duration watch we computed

00:11:26.936 --> 00:11:29.396 A:middle
earlier, and finally, we sum up

00:11:29.586 --> 00:11:31.126 A:middle
the weighted bitrate value.

00:11:31.526 --> 00:11:33.036 A:middle
Now keep in mind that some of

00:11:33.036 --> 00:11:35.546 A:middle
these properties may not be

00:11:35.546 --> 00:11:36.516 A:middle
initialized, so do the

00:11:36.516 --> 00:11:39.206 A:middle
appropriate checks in your code.

00:11:41.076 --> 00:11:42.656 A:middle
Another event which you must

00:11:42.656 --> 00:11:44.286 A:middle
absolutely track is of course

00:11:44.376 --> 00:11:45.306 A:middle
playback failure.

00:11:45.866 --> 00:11:47.526 A:middle
To do that, you observe the AV

00:11:47.526 --> 00:11:48.796 A:middle
Player item status.

00:11:49.646 --> 00:11:51.256 A:middle
If the value ever changes to

00:11:51.256 --> 00:11:52.986 A:middle
false, it means AV Player

00:11:52.986 --> 00:11:54.376 A:middle
encountered an unrecoverable

00:11:54.376 --> 00:11:54.746 A:middle
error.

00:11:55.666 --> 00:11:56.926 A:middle
A good way to transform this

00:11:56.926 --> 00:11:58.576 A:middle
observation into a KPI?

00:11:59.736 --> 00:12:02.856 A:middle
Well, one way to do it is to

00:11:59.736 --> 00:12:02.856 A:middle
Well, one way to do it is to

00:12:03.026 --> 00:12:04.636 A:middle
look at the percentage of failed

00:12:04.636 --> 00:12:06.526 A:middle
sessions with respect to total

00:12:06.526 --> 00:12:07.436 A:middle
sessions, but there might be

00:12:07.436 --> 00:12:08.206 A:middle
other ways to do it.

00:12:08.856 --> 00:12:10.636 A:middle
One thing I want to stress here

00:12:10.636 --> 00:12:12.596 A:middle
is that not all errors in your

00:12:12.596 --> 00:12:14.246 A:middle
stream may be fatal.

00:12:14.376 --> 00:12:16.316 A:middle
Some may impact media quality

00:12:16.536 --> 00:12:18.066 A:middle
while some might not even be

00:12:18.066 --> 00:12:19.386 A:middle
perceivable by the user.

00:12:19.676 --> 00:12:21.046 A:middle
But nonetheless, if there are

00:12:21.046 --> 00:12:23.806 A:middle
errors, they convey that there

00:12:23.806 --> 00:12:25.656 A:middle
is an issue with your stream.

00:12:25.876 --> 00:12:29.286 A:middle
So how do I get more insights on

00:12:29.286 --> 00:12:30.176 A:middle
the stream, right, what

00:12:30.176 --> 00:12:30.626 A:middle
happened?

00:12:31.176 --> 00:12:32.986 A:middle
And the answer is from the

00:12:32.986 --> 00:12:34.586 A:middle
Player Item Error Log.

00:12:35.436 --> 00:12:37.046 A:middle
The AV Player Item Error Log.

00:12:37.156 --> 00:12:38.756 A:middle
The Error Log conveys failures

00:12:38.756 --> 00:12:40.186 A:middle
with varying degrees of user

00:12:40.186 --> 00:12:40.636 A:middle
impact.

00:12:41.136 --> 00:12:43.626 A:middle
It works in a similar fashion as

00:12:43.836 --> 00:12:45.446 A:middle
the Access Log except that

00:12:45.446 --> 00:12:47.426 A:middle
events represent error rather

00:12:47.426 --> 00:12:48.806 A:middle
than player access states.

00:12:49.936 --> 00:12:52.766 A:middle
They cover various areas, such

00:12:52.766 --> 00:12:54.586 A:middle
as delivery issues, network

00:12:54.586 --> 00:12:56.416 A:middle
issues, content authoring

00:12:56.416 --> 00:12:57.476 A:middle
errors, and so on.

00:12:57.666 --> 00:12:59.476 A:middle
For instance, they can give you

00:12:59.476 --> 00:13:01.076 A:middle
an insight on why a stall

00:12:59.476 --> 00:13:01.076 A:middle
an insight on why a stall

00:13:01.076 --> 00:13:03.296 A:middle
occurred, such as no response

00:13:03.296 --> 00:13:04.766 A:middle
for a media file for about ten

00:13:04.766 --> 00:13:05.286 A:middle
seconds.

00:13:05.886 --> 00:13:09.126 A:middle
So we talked about startup time

00:13:09.126 --> 00:13:10.456 A:middle
that you can track for every

00:13:10.456 --> 00:13:11.006 A:middle
session.

00:13:11.646 --> 00:13:12.876 A:middle
We encourage you to take a look

00:13:12.876 --> 00:13:14.256 A:middle
at the distribution of startup

00:13:14.286 --> 00:13:15.666 A:middle
times for your application.

00:13:16.346 --> 00:13:18.086 A:middle
We also talked about stall

00:13:18.086 --> 00:13:19.906 A:middle
occurrence and stall duration.

00:13:20.926 --> 00:13:22.356 A:middle
We mentioned that Time-Weighted

00:13:22.436 --> 00:13:23.816 A:middle
Indicated Bitrate is a good

00:13:23.816 --> 00:13:25.716 A:middle
indication of experienced media

00:13:25.716 --> 00:13:27.946 A:middle
quality across a session, and

00:13:27.946 --> 00:13:29.526 A:middle
finally, you probably want to

00:13:29.526 --> 00:13:30.916 A:middle
keep the percentage of failed

00:13:30.916 --> 00:13:32.806 A:middle
sessions as low as possible.

00:13:36.716 --> 00:13:39.066 A:middle
Keep in mind that not all KPIs

00:13:39.066 --> 00:13:41.606 A:middle
are comparable across sessions.

00:13:42.246 --> 00:13:44.256 A:middle
One example of that is that AV

00:13:44.256 --> 00:13:46.476 A:middle
Player foundation uses the AV

00:13:46.476 --> 00:13:48.696 A:middle
Player layer size on the screen

00:13:48.916 --> 00:13:50.606 A:middle
to evaluate illegible variants

00:13:50.606 --> 00:13:51.116 A:middle
for HLS.

00:13:51.686 --> 00:13:53.246 A:middle
So for instance, if you've got

00:13:53.336 --> 00:13:55.556 A:middle
10 ATP content, it will probably

00:13:55.556 --> 00:13:57.486 A:middle
not be displayed on a 200 pixel

00:13:57.486 --> 00:13:58.856 A:middle
view, but it doesn't mean the

00:13:58.856 --> 00:14:01.046 A:middle
user experienced poor image

00:13:58.856 --> 00:14:01.046 A:middle
user experienced poor image

00:14:01.046 --> 00:14:01.486 A:middle
quality.

00:14:02.026 --> 00:14:03.826 A:middle
What to do then?

00:14:03.966 --> 00:14:05.366 A:middle
We recommend that you gather

00:14:05.366 --> 00:14:07.276 A:middle
additional context information

00:14:07.346 --> 00:14:08.296 A:middle
along with your streaming

00:14:08.296 --> 00:14:08.886 A:middle
metrics.

00:14:09.466 --> 00:14:10.876 A:middle
This will allow you to later

00:14:10.926 --> 00:14:12.556 A:middle
partition your playback sessions

00:14:12.776 --> 00:14:14.296 A:middle
in classes that make sense for

00:14:14.296 --> 00:14:15.106 A:middle
your application.

00:14:16.396 --> 00:14:18.726 A:middle
Sample code for this section is

00:14:18.726 --> 00:14:20.306 A:middle
available on the Apple developer

00:14:20.306 --> 00:14:21.786 A:middle
website as part of the HLS

00:14:21.786 --> 00:14:23.136 A:middle
catalogue sample.

00:14:24.276 --> 00:14:26.776 A:middle
Now, please let me welcome

00:14:26.776 --> 00:14:28.026 A:middle
Zhenheng Li, who will talk to

00:14:28.026 --> 00:14:29.186 A:middle
you about ways to improve HLS

00:14:29.186 --> 00:14:29.636 A:middle
performance.

00:14:29.636 --> 00:14:29.976 A:middle
Thank you.

00:14:30.516 --> 00:14:34.666 A:middle
[ Applause ]

00:14:35.166 --> 00:14:35.866 A:middle
&gt;&gt; Thank you, Emil.

00:14:43.076 --> 00:14:43.626 A:middle
Hello, everyone.

00:14:43.736 --> 00:14:44.816 A:middle
My name is Zhenheng.

00:14:45.376 --> 00:14:50.236 A:middle
We have discussed all the KPIs

00:14:50.556 --> 00:14:52.636 A:middle
that our users care the most.

00:14:53.256 --> 00:14:55.166 A:middle
In this part of talk, let's

00:14:55.246 --> 00:14:57.076 A:middle
focus on ways to improve these

00:14:57.076 --> 00:14:57.416 A:middle
APIs.

00:14:57.456 --> 00:14:59.826 A:middle
We will look deeper in three

00:14:59.826 --> 00:15:00.376 A:middle
areas.

00:14:59.826 --> 00:15:00.376 A:middle
areas.

00:15:00.976 --> 00:15:03.646 A:middle
One, how to reduce the startup

00:15:03.746 --> 00:15:04.036 A:middle
time.

00:15:05.136 --> 00:15:07.486 A:middle
Two, how to investigate and

00:15:07.486 --> 00:15:08.346 A:middle
avoid stalls.

00:15:09.186 --> 00:15:11.736 A:middle
Three, how to investigate and

00:15:11.736 --> 00:15:12.906 A:middle
avoid errors.

00:15:13.506 --> 00:15:14.276 A:middle
Let's get started.

00:15:15.756 --> 00:15:17.616 A:middle
So what can delay start of

00:15:17.676 --> 00:15:18.166 A:middle
playback?

00:15:19.006 --> 00:15:20.596 A:middle
Here is an example of the

00:15:20.596 --> 00:15:23.056 A:middle
operations from the user clicks

00:15:23.056 --> 00:15:25.186 A:middle
play until the video start to

00:15:25.186 --> 00:15:25.536 A:middle
play back.

00:15:27.096 --> 00:15:28.606 A:middle
The application create every

00:15:28.606 --> 00:15:31.026 A:middle
asset and start inspection of

00:15:31.026 --> 00:15:33.756 A:middle
the asset to find out durations

00:15:34.146 --> 00:15:36.646 A:middle
and awardable media options of

00:15:36.646 --> 00:15:37.226 A:middle
the asset.

00:15:38.106 --> 00:15:40.016 A:middle
It takes a few round trip

00:15:40.516 --> 00:15:42.526 A:middle
between the device and the

00:15:42.526 --> 00:15:44.946 A:middle
content server to download the

00:15:45.136 --> 00:15:47.096 A:middle
master playlist and [inaudible]

00:15:47.236 --> 00:15:47.656 A:middle
playlist.

00:15:48.606 --> 00:15:50.756 A:middle
After that, the application

00:15:50.756 --> 00:15:53.256 A:middle
create AV Player and AV Player

00:15:53.256 --> 00:15:53.696 A:middle
Item.

00:15:54.646 --> 00:15:55.426 A:middle
Buffering starts.

00:15:56.966 --> 00:15:59.096 A:middle
Oftentime, buffering is

00:15:59.096 --> 00:16:01.136 A:middle
interrupted, content is

00:15:59.096 --> 00:16:01.136 A:middle
interrupted, content is

00:16:01.136 --> 00:16:01.716 A:middle
encrypted.

00:16:02.606 --> 00:16:04.386 A:middle
It takes a few round trips

00:16:04.436 --> 00:16:06.216 A:middle
between the device and

00:16:06.216 --> 00:16:07.846 A:middle
[inaudible] to fetch the

00:16:07.846 --> 00:16:08.776 A:middle
decryption keys.

00:16:09.576 --> 00:16:11.256 A:middle
Once the keys are fetched,

00:16:12.876 --> 00:16:14.306 A:middle
buffering resumes.

00:16:15.046 --> 00:16:17.336 A:middle
However, it may be interrupted

00:16:17.336 --> 00:16:17.756 A:middle
again.

00:16:18.346 --> 00:16:20.846 A:middle
Let's say the application offers

00:16:20.936 --> 00:16:22.986 A:middle
a feature, resumes from the

00:16:22.986 --> 00:16:24.506 A:middle
previously watched point.

00:16:25.546 --> 00:16:27.816 A:middle
Application sets a sic time, a

00:16:27.816 --> 00:16:28.876 A:middle
set [inaudible] time on the

00:16:28.916 --> 00:16:31.116 A:middle
player on behalf of the user.

00:16:32.096 --> 00:16:34.366 A:middle
Every player discard the

00:16:34.366 --> 00:16:36.396 A:middle
existing buffer and start

00:16:36.396 --> 00:16:37.966 A:middle
download from a new location.

00:16:38.656 --> 00:16:39.856 A:middle
Segment 100.

00:16:41.776 --> 00:16:43.516 A:middle
Again, it maybe interrupted.

00:16:44.026 --> 00:16:47.246 A:middle
Users has a language preference

00:16:47.326 --> 00:16:49.356 A:middle
setting in the application.

00:16:50.186 --> 00:16:52.316 A:middle
She or he prefers Spanish audio.

00:16:53.226 --> 00:16:55.596 A:middle
Thus, application sets media

00:16:55.596 --> 00:16:56.966 A:middle
selection on the player item,

00:16:57.996 --> 00:16:59.656 A:middle
existing audio buffer being

00:16:59.656 --> 00:17:01.906 A:middle
discarded, player start

00:16:59.656 --> 00:17:01.906 A:middle
discarded, player start

00:17:01.906 --> 00:17:04.046 A:middle
downloading from a different

00:17:04.425 --> 00:17:05.266 A:middle
language variant.

00:17:05.266 --> 00:17:08.736 A:middle
In a few seconds later, player

00:17:08.736 --> 00:17:11.965 A:middle
item notifies playback is like

00:17:11.996 --> 00:17:14.306 A:middle
to keep up, application sets a

00:17:14.306 --> 00:17:14.626 A:middle
rate.

00:17:15.376 --> 00:17:17.106 A:middle
Playback starts, and it

00:17:17.106 --> 00:17:17.746 A:middle
continues.

00:17:18.465 --> 00:17:20.856 A:middle
All this time, user is waiting.

00:17:22.165 --> 00:17:25.746 A:middle
So as we can see, it does take a

00:17:25.746 --> 00:17:28.266 A:middle
few time-consuming operations to

00:17:28.266 --> 00:17:30.686 A:middle
start up, run a trip between the

00:17:31.076 --> 00:17:33.436 A:middle
device and the content server

00:17:33.896 --> 00:17:34.796 A:middle
and the key servers.

00:17:35.326 --> 00:17:37.726 A:middle
Round trip times between AV

00:17:37.726 --> 00:17:39.556 A:middle
Player and applications,

00:17:40.156 --> 00:17:42.236 A:middle
oftentimes these two sit at

00:17:42.236 --> 00:17:43.266 A:middle
different processes.

00:17:44.446 --> 00:17:46.176 A:middle
So how the application measures

00:17:46.516 --> 00:17:48.506 A:middle
the time cost and startup time?

00:17:49.536 --> 00:17:52.776 A:middle
It may measure the time spent

00:17:52.776 --> 00:17:55.426 A:middle
between the API calls and the

00:17:55.426 --> 00:17:56.936 A:middle
player and the Player Item

00:17:57.156 --> 00:17:58.916 A:middle
status change notifications.

00:17:59.516 --> 00:18:02.836 A:middle
Every player item also offers

00:17:59.516 --> 00:18:02.836 A:middle
Every player item also offers

00:18:02.936 --> 00:18:05.546 A:middle
startup time in the Access Log.

00:18:06.146 --> 00:18:09.416 A:middle
This time is measured by the AV

00:18:09.456 --> 00:18:11.986 A:middle
Player item, represents the time

00:18:11.986 --> 00:18:13.476 A:middle
for buffering only.

00:18:14.506 --> 00:18:15.816 A:middle
It's measured from the start

00:18:15.816 --> 00:18:17.896 A:middle
media downloading until the

00:18:17.896 --> 00:18:19.976 A:middle
first playback is selected to

00:18:19.976 --> 00:18:20.376 A:middle
keep up.

00:18:21.676 --> 00:18:23.366 A:middle
So our user wants the video to

00:18:23.366 --> 00:18:26.326 A:middle
start fast, in at most a few

00:18:26.326 --> 00:18:26.876 A:middle
seconds.

00:18:27.366 --> 00:18:29.546 A:middle
There are ways to achieve that.

00:18:30.236 --> 00:18:33.606 A:middle
One option, we can move some

00:18:33.606 --> 00:18:36.006 A:middle
operations to a different stage

00:18:36.826 --> 00:18:39.886 A:middle
before the user clicks play.

00:18:40.676 --> 00:18:43.776 A:middle
For example, AV Asset creation

00:18:44.556 --> 00:18:46.266 A:middle
and inspection can be moved out.

00:18:46.966 --> 00:18:50.376 A:middle
Key fetching can be moved out.

00:18:51.756 --> 00:18:54.456 A:middle
Thus, when the users starts a

00:18:54.456 --> 00:18:57.766 A:middle
video playback, there is less

00:18:57.766 --> 00:18:58.616 A:middle
waiting time.

00:18:59.296 --> 00:19:00.886 A:middle
So where do we move those

00:18:59.296 --> 00:19:00.886 A:middle
So where do we move those

00:19:00.886 --> 00:19:01.866 A:middle
operations to?

00:19:03.916 --> 00:19:06.156 A:middle
While your user is viewing the

00:19:06.156 --> 00:19:09.286 A:middle
video catalogue or video info,

00:19:09.776 --> 00:19:11.336 A:middle
it's a good time to create an

00:19:12.356 --> 00:19:15.026 A:middle
inspect AV Asset before the user

00:19:15.026 --> 00:19:17.696 A:middle
decides to play.

00:19:17.916 --> 00:19:19.926 A:middle
Now, last year we had introduced

00:19:19.926 --> 00:19:21.446 A:middle
AV Content Key Session API.

00:19:22.346 --> 00:19:25.646 A:middle
This new API decouples the media

00:19:25.646 --> 00:19:27.056 A:middle
load from key fetching.

00:19:27.596 --> 00:19:29.836 A:middle
It gives the application total

00:19:29.836 --> 00:19:31.326 A:middle
control on key management.

00:19:31.926 --> 00:19:35.336 A:middle
It offers ways to optimize key

00:19:35.336 --> 00:19:37.416 A:middle
fetching, such as bundling up

00:19:37.416 --> 00:19:39.316 A:middle
multiple key requests back to

00:19:39.816 --> 00:19:40.686 A:middle
the key server.

00:19:41.566 --> 00:19:43.346 A:middle
If you happen to adopt AV

00:19:43.346 --> 00:19:45.906 A:middle
Content Key Session, spending a

00:19:45.906 --> 00:19:47.686 A:middle
few hours of engineering hours,

00:19:48.566 --> 00:19:50.886 A:middle
your user will notice a faster

00:19:50.886 --> 00:19:52.356 A:middle
startup time.

00:19:53.476 --> 00:19:56.136 A:middle
So we have moved the AV Asset

00:19:56.186 --> 00:19:58.436 A:middle
creation and key fetching out of

00:19:58.436 --> 00:19:59.316 A:middle
startup time.

00:19:59.896 --> 00:20:03.256 A:middle
Now what's left is mainly the AV

00:19:59.896 --> 00:20:03.256 A:middle
Now what's left is mainly the AV

00:20:03.306 --> 00:20:05.906 A:middle
Player Item buffering time and

00:20:05.906 --> 00:20:08.576 A:middle
the communication time from AV

00:20:08.576 --> 00:20:10.286 A:middle
Player and your application.

00:20:11.356 --> 00:20:14.686 A:middle
Oftentime, app may be able to

00:20:14.906 --> 00:20:18.266 A:middle
avoid buffering, such as due to

00:20:19.176 --> 00:20:19.846 A:middle
[inaudible] or due to media

00:20:19.846 --> 00:20:20.346 A:middle
options.

00:20:20.906 --> 00:20:24.036 A:middle
We can even try to reduce the

00:20:24.036 --> 00:20:26.736 A:middle
round trip time between the

00:20:26.736 --> 00:20:28.136 A:middle
player and the application.

00:20:29.186 --> 00:20:30.946 A:middle
Thus the startup is further

00:20:30.946 --> 00:20:31.646 A:middle
reduced.

00:20:33.056 --> 00:20:33.806 A:middle
Let's take a look.

00:20:34.386 --> 00:20:38.386 A:middle
When you create AV Player Item,

00:20:38.996 --> 00:20:42.246 A:middle
if you know where your user is

00:20:42.246 --> 00:20:44.016 A:middle
intending to start the playback,

00:20:45.056 --> 00:20:46.716 A:middle
set the current time on player

00:20:46.716 --> 00:20:47.176 A:middle
item.

00:20:47.846 --> 00:20:49.106 A:middle
If you know what are the media

00:20:49.106 --> 00:20:51.476 A:middle
options such as which language

00:20:51.476 --> 00:20:53.966 A:middle
to download for playback, set

00:20:53.966 --> 00:20:56.956 A:middle
that as well before you set the

00:20:56.956 --> 00:20:58.906 A:middle
AV Player item onto the player.

00:20:59.806 --> 00:21:01.456 A:middle
Same with the AV plyer.

00:20:59.806 --> 00:21:01.456 A:middle
Same with the AV plyer.

00:21:02.006 --> 00:21:03.946 A:middle
As soon as the user click play,

00:21:05.106 --> 00:21:07.336 A:middle
set rate before the start

00:21:07.336 --> 00:21:11.056 A:middle
downloading for the AV Player

00:21:11.116 --> 00:21:11.406 A:middle
Item.

00:21:12.086 --> 00:21:13.496 A:middle
Thus, the playback will start

00:21:13.496 --> 00:21:16.586 A:middle
automatically as soon as Player

00:21:16.586 --> 00:21:18.176 A:middle
Item has enough to play back.

00:21:19.016 --> 00:21:22.386 A:middle
In summary, set up AV Player

00:21:22.646 --> 00:21:23.366 A:middle
before buffering.

00:21:24.486 --> 00:21:27.476 A:middle
Set AV Player rate before

00:21:28.366 --> 00:21:31.076 A:middle
setting the player item onto the

00:21:31.146 --> 00:21:31.646 A:middle
player.

00:21:31.696 --> 00:21:36.096 A:middle
A lot of application offers a

00:21:36.096 --> 00:21:38.626 A:middle
feature to allow the user choose

00:21:39.176 --> 00:21:41.696 A:middle
multiple videos and play one

00:21:41.746 --> 00:21:43.936 A:middle
after another, such as binge

00:21:43.936 --> 00:21:45.576 A:middle
watching TV episodes.

00:21:46.756 --> 00:21:48.636 A:middle
We have seen implementation such

00:21:48.636 --> 00:21:50.986 A:middle
as one player and one player

00:21:50.986 --> 00:21:52.266 A:middle
item per video.

00:21:52.846 --> 00:21:54.616 A:middle
There's always a startup

00:21:54.746 --> 00:21:56.616 A:middle
buffering time for each new

00:21:56.616 --> 00:21:57.036 A:middle
video.

00:21:57.706 --> 00:21:59.686 A:middle
You may reduce that buffering

00:22:00.236 --> 00:22:02.956 A:middle
time for the new video by AV

00:22:02.956 --> 00:22:03.936 A:middle
Queue Player.

00:22:05.576 --> 00:22:07.916 A:middle
Create multiple player items,

00:22:08.426 --> 00:22:10.356 A:middle
include them all on the play

00:22:10.356 --> 00:22:10.706 A:middle
queue.

00:22:11.256 --> 00:22:14.356 A:middle
While the player is playing the

00:22:14.356 --> 00:22:17.796 A:middle
current item, when the media

00:22:17.796 --> 00:22:19.186 A:middle
download finishes for the

00:22:19.186 --> 00:22:22.246 A:middle
current item, player will start

00:22:22.246 --> 00:22:23.626 A:middle
downloading for the next one

00:22:24.226 --> 00:22:25.546 A:middle
while the current one is still

00:22:25.546 --> 00:22:26.016 A:middle
playing.

00:22:27.346 --> 00:22:30.666 A:middle
Thus, the next player item will

00:22:30.666 --> 00:22:32.656 A:middle
start playback as soon as

00:22:32.706 --> 00:22:34.916 A:middle
current event play to the end.

00:22:35.526 --> 00:22:39.446 A:middle
So do use AV Queue Player to

00:22:39.446 --> 00:22:42.086 A:middle
play multiple items and enqueue

00:22:42.086 --> 00:22:44.256 A:middle
second AV Player Item well in

00:22:44.256 --> 00:22:44.826 A:middle
advance.

00:22:47.406 --> 00:22:48.266 A:middle
So what's left now?

00:22:49.516 --> 00:22:50.266 A:middle
Buffering time.

00:22:51.446 --> 00:22:54.316 A:middle
First, what determine network

00:22:54.316 --> 00:22:55.086 A:middle
buffering time.

00:22:55.696 --> 00:22:56.566 A:middle
Four factors.

00:22:57.796 --> 00:23:00.886 A:middle
The choice of your variant, the

00:22:57.796 --> 00:23:00.886 A:middle
The choice of your variant, the

00:23:01.136 --> 00:23:04.556 A:middle
content bitrate, your playlist

00:23:04.556 --> 00:23:06.696 A:middle
target duration, and of course,

00:23:06.696 --> 00:23:09.276 A:middle
last, the network bandwidth.

00:23:09.806 --> 00:23:13.706 A:middle
Let's take a look a few examples

00:23:13.706 --> 00:23:14.776 A:middle
of buffering time.

00:23:16.286 --> 00:23:18.476 A:middle
First, it's a simple master

00:23:18.476 --> 00:23:19.016 A:middle
playlist.

00:23:19.396 --> 00:23:22.236 A:middle
It specifies an ATP video at

00:23:22.236 --> 00:23:24.386 A:middle
about 5 mbps.

00:23:24.386 --> 00:23:26.656 A:middle
Let's assume the network

00:23:26.656 --> 00:23:28.986 A:middle
bandwidth is around 6 mbps.

00:23:28.986 --> 00:23:31.436 A:middle
Our target duration is 10

00:23:31.436 --> 00:23:31.896 A:middle
seconds.

00:23:32.886 --> 00:23:35.116 A:middle
In most of the cases, player

00:23:35.186 --> 00:23:38.556 A:middle
item buffers one segment before

00:23:39.446 --> 00:23:41.216 A:middle
it notifies playback it like to

00:23:41.216 --> 00:23:42.526 A:middle
keep up.

00:23:42.636 --> 00:23:46.336 A:middle
However, the same master

00:23:46.336 --> 00:23:48.816 A:middle
playlist, almost the same

00:23:48.816 --> 00:23:51.676 A:middle
network condition, the user may

00:23:51.676 --> 00:23:54.246 A:middle
observe slower startup.

00:23:55.996 --> 00:23:58.216 A:middle
The reason is, remember, the

00:23:58.216 --> 00:24:00.256 A:middle
network bandwidths change, and

00:23:58.216 --> 00:24:00.256 A:middle
network bandwidths change, and

00:24:00.256 --> 00:24:02.366 A:middle
the content bitrate also change.

00:24:02.776 --> 00:24:04.506 A:middle
In this case, there are a few

00:24:04.506 --> 00:24:05.686 A:middle
segments take longer to

00:24:05.686 --> 00:24:06.176 A:middle
download.

00:24:06.566 --> 00:24:08.106 A:middle
Thus, it takes longer to start.

00:24:09.086 --> 00:24:11.946 A:middle
To solve this problem, offering

00:24:13.286 --> 00:24:14.916 A:middle
a variant with lower bitrate may

00:24:14.916 --> 00:24:15.236 A:middle
help.

00:24:16.896 --> 00:24:19.936 A:middle
Player may decide to switch down

00:24:20.426 --> 00:24:23.586 A:middle
and start up sooner.

00:24:24.336 --> 00:24:26.056 A:middle
When all other information is

00:24:26.056 --> 00:24:29.026 A:middle
absent, the first listed variant

00:24:29.026 --> 00:24:30.946 A:middle
will be your startup variant.

00:24:31.586 --> 00:24:34.636 A:middle
So in this example, same two

00:24:35.006 --> 00:24:35.536 A:middle
variants.

00:24:36.216 --> 00:24:37.466 A:middle
The lower bitrate is listed

00:24:37.506 --> 00:24:39.496 A:middle
first with same network

00:24:39.496 --> 00:24:40.106 A:middle
condition.

00:24:40.636 --> 00:24:43.666 A:middle
Player will start faster, start

00:24:45.196 --> 00:24:47.446 A:middle
up faster and also switch up

00:24:47.766 --> 00:24:50.086 A:middle
pretty quickly given the network

00:24:50.086 --> 00:24:52.196 A:middle
bandwidth is sufficient for

00:24:52.196 --> 00:24:52.646 A:middle
playback.

00:24:53.936 --> 00:24:58.466 A:middle
In summary, to reduce network

00:24:58.466 --> 00:25:00.306 A:middle
buffering time, make a wise

00:24:58.466 --> 00:25:00.306 A:middle
buffering time, make a wise

00:25:00.306 --> 00:25:01.736 A:middle
choice of initial variant.

00:25:02.936 --> 00:25:04.516 A:middle
Lower content bitrate means

00:25:05.266 --> 00:25:07.676 A:middle
shorter buffering time, but it

00:25:07.676 --> 00:25:09.826 A:middle
is a tradeoff of video quality.

00:25:11.406 --> 00:25:13.486 A:middle
If you are offering multiple

00:25:13.486 --> 00:25:16.366 A:middle
media formats such as HDR and

00:25:16.496 --> 00:25:19.646 A:middle
SDR videos or stereo audio and

00:25:19.646 --> 00:25:22.976 A:middle
multiple-channel audios, make

00:25:22.976 --> 00:25:26.276 A:middle
sure the initial variant for

00:25:26.316 --> 00:25:29.246 A:middle
each media format are on similar

00:25:29.246 --> 00:25:32.216 A:middle
level of bitrate so your user

00:25:32.216 --> 00:25:33.706 A:middle
will have a similar experience

00:25:34.066 --> 00:25:36.166 A:middle
regardless what kind of viewing

00:25:36.166 --> 00:25:37.826 A:middle
setup they have.

00:25:38.536 --> 00:25:41.926 A:middle
That's all about reduce startup

00:25:41.926 --> 00:25:42.216 A:middle
time.

00:25:42.746 --> 00:25:43.926 A:middle
Our video has started.

00:25:45.556 --> 00:25:47.566 A:middle
Next, let's talk about stalls.

00:25:48.526 --> 00:25:51.186 A:middle
To be really clear, stalls can

00:25:51.186 --> 00:25:53.396 A:middle
happen, especially when the

00:25:53.396 --> 00:25:55.456 A:middle
network bandwidth is really low.

00:25:56.176 --> 00:25:58.116 A:middle
So in this part of talk, let's

00:25:58.116 --> 00:25:59.796 A:middle
focus on how to investigate

00:25:59.906 --> 00:26:03.096 A:middle
stalls and how to improve or

00:25:59.906 --> 00:26:03.096 A:middle
stalls and how to improve or

00:26:03.096 --> 00:26:03.636 A:middle
avoid stalls.

00:26:04.196 --> 00:26:08.346 A:middle
How the application investigate

00:26:08.346 --> 00:26:08.696 A:middle
stalls.

00:26:09.246 --> 00:26:10.366 A:middle
The application should be

00:26:10.366 --> 00:26:12.616 A:middle
listening to the stall

00:26:12.616 --> 00:26:14.416 A:middle
notification at all time.

00:26:16.296 --> 00:26:17.786 A:middle
And the application should be

00:26:17.786 --> 00:26:20.286 A:middle
also checking the AV Player

00:26:20.286 --> 00:26:23.096 A:middle
status such as is playback

00:26:23.456 --> 00:26:27.546 A:middle
likely to keep up.

00:26:27.546 --> 00:26:30.106 A:middle
AV Player Item also offers Error

00:26:30.106 --> 00:26:32.006 A:middle
Log and Access Logs.

00:26:32.576 --> 00:26:33.666 A:middle
The application should be

00:26:33.906 --> 00:26:37.846 A:middle
listening to an exam those logs

00:26:37.846 --> 00:26:38.996 A:middle
when the stall happens.

00:26:39.546 --> 00:26:43.016 A:middle
Next, let's take a look two

00:26:43.016 --> 00:26:43.896 A:middle
stall examples.

00:26:44.716 --> 00:26:47.206 A:middle
First, stall notification has

00:26:47.206 --> 00:26:48.476 A:middle
been received by the

00:26:48.476 --> 00:26:49.096 A:middle
application.

00:26:49.616 --> 00:26:51.956 A:middle
The application should have

00:26:52.076 --> 00:26:54.116 A:middle
received the Error Log as well.

00:26:55.126 --> 00:26:58.236 A:middle
The error comments give you

00:26:58.396 --> 00:27:00.456 A:middle
detailed information on what has

00:26:58.396 --> 00:27:00.456 A:middle
detailed information on what has

00:27:00.456 --> 00:27:00.886 A:middle
happened.

00:27:01.456 --> 00:27:03.266 A:middle
In this case, it says media file

00:27:03.266 --> 00:27:05.206 A:middle
not received in 15 seconds.

00:27:06.406 --> 00:27:09.056 A:middle
Application checks Access Log to

00:27:09.056 --> 00:27:12.286 A:middle
find out what the AV Player was

00:27:12.346 --> 00:27:14.086 A:middle
playing at the moment when the

00:27:14.086 --> 00:27:14.856 A:middle
stall happened.

00:27:15.846 --> 00:27:17.886 A:middle
It tells you detailed

00:27:17.886 --> 00:27:20.046 A:middle
information such as the player

00:27:20.046 --> 00:27:22.746 A:middle
was playing what content and

00:27:22.746 --> 00:27:23.186 A:middle
such URI.

00:27:24.506 --> 00:27:26.036 A:middle
The indicated bitrate is the

00:27:26.036 --> 00:27:27.046 A:middle
content bitrate.

00:27:27.416 --> 00:27:30.656 A:middle
In this case, 36 mbps, and that

00:27:30.656 --> 00:27:31.756 A:middle
is a [inaudible] content.

00:27:32.606 --> 00:27:35.166 A:middle
An observed bitrate is the

00:27:35.356 --> 00:27:36.766 A:middle
current network bandwidth.

00:27:37.066 --> 00:27:39.616 A:middle
In this case is 2.8 mbps.

00:27:40.236 --> 00:27:43.126 A:middle
It's obviously due to the

00:27:43.126 --> 00:27:45.276 A:middle
network bandwidth can't catch up

00:27:45.316 --> 00:27:47.286 A:middle
with the content bitrate.

00:27:47.916 --> 00:27:50.536 A:middle
So to deal with variable

00:27:50.536 --> 00:27:53.686 A:middle
networks, remember to provide a

00:27:53.686 --> 00:27:54.706 A:middle
full set of bitrate.

00:27:55.226 --> 00:27:57.436 A:middle
Remember some of your users may

00:27:57.436 --> 00:27:58.966 A:middle
have a slower network

00:27:58.966 --> 00:28:01.336 A:middle
connection, or your user may be

00:27:58.966 --> 00:28:01.336 A:middle
connection, or your user may be

00:28:01.336 --> 00:28:03.306 A:middle
on the go, such as on cellular

00:28:03.596 --> 00:28:04.886 A:middle
while viewing the video.

00:28:05.746 --> 00:28:07.236 A:middle
If you're offering multiple

00:28:07.236 --> 00:28:09.846 A:middle
video, multiple media formats,

00:28:10.616 --> 00:28:12.216 A:middle
each codec combination needs

00:28:12.216 --> 00:28:15.826 A:middle
it's own set of tiers.

00:28:16.806 --> 00:28:20.166 A:middle
Not all stalls are due to

00:28:20.166 --> 00:28:21.096 A:middle
network condition.

00:28:22.356 --> 00:28:23.416 A:middle
Let's look at this one.

00:28:24.536 --> 00:28:26.986 A:middle
Stall happened, Error Log tells

00:28:26.986 --> 00:28:28.486 A:middle
you a different story this time.

00:28:29.786 --> 00:28:32.756 A:middle
It says playlist file unchanged

00:28:32.756 --> 00:28:34.956 A:middle
for two consecutive reads.

00:28:35.976 --> 00:28:37.976 A:middle
If you check the Access Log at

00:28:37.976 --> 00:28:40.566 A:middle
the time, player was playing

00:28:40.566 --> 00:28:40.986 A:middle
live.

00:28:42.336 --> 00:28:43.816 A:middle
They indicated the bitrate is

00:28:43.816 --> 00:28:44.456 A:middle
rather low.

00:28:44.996 --> 00:28:48.296 A:middle
The content is about 400K, and

00:28:48.296 --> 00:28:51.116 A:middle
the network bandwidth is 3.7

00:28:51.116 --> 00:28:51.546 A:middle
mbps.

00:28:51.956 --> 00:28:53.646 A:middle
This look like a content

00:28:53.646 --> 00:28:54.586 A:middle
delivery issue.

00:28:57.016 --> 00:28:59.156 A:middle
So to reduce or to avoid stalls

00:28:59.156 --> 00:29:01.696 A:middle
due to content delivery, content

00:28:59.156 --> 00:29:01.696 A:middle
due to content delivery, content

00:29:01.696 --> 00:29:04.626 A:middle
server and CDN must deliver

00:29:04.626 --> 00:29:07.166 A:middle
media files, segments, keys

00:29:07.166 --> 00:29:08.246 A:middle
without any delay.

00:29:09.196 --> 00:29:11.776 A:middle
Update live playlist at least

00:29:11.776 --> 00:29:13.046 A:middle
every target duration.

00:29:13.566 --> 00:29:15.446 A:middle
The CDN [inaudible] must be

00:29:15.666 --> 00:29:17.576 A:middle
configured to deliver most

00:29:17.576 --> 00:29:21.506 A:middle
recent playlist to avoid stale

00:29:22.136 --> 00:29:22.416 A:middle
playlists.

00:29:22.466 --> 00:29:24.146 A:middle
Synchronized discontinuity

00:29:24.446 --> 00:29:25.516 A:middle
sequence number between

00:29:25.516 --> 00:29:26.086 A:middle
playlist.

00:29:27.996 --> 00:29:29.466 A:middle
Indicate server-side failure

00:29:29.466 --> 00:29:32.736 A:middle
clearly using right HTTP status

00:29:32.736 --> 00:29:33.096 A:middle
code.

00:29:35.416 --> 00:29:36.856 A:middle
That's all about stall.

00:29:37.336 --> 00:29:38.026 A:middle
What about error?

00:29:39.206 --> 00:29:42.066 A:middle
How do we investigate errors?

00:29:42.066 --> 00:29:44.746 A:middle
There are a few ways.

00:29:45.906 --> 00:29:49.346 A:middle
We have Error Log and Access Log

00:29:49.346 --> 00:29:51.226 A:middle
from AV Player Item.

00:29:52.186 --> 00:29:55.486 A:middle
We also have error property from

00:29:55.486 --> 00:29:57.196 A:middle
every player and player item

00:29:57.516 --> 00:29:59.756 A:middle
that the application can

00:30:00.326 --> 00:30:00.506 A:middle
observe.

00:30:02.016 --> 00:30:04.066 A:middle
In addition, we have some media

00:30:04.066 --> 00:30:06.176 A:middle
validation tools for you to

00:30:06.486 --> 00:30:08.926 A:middle
detect the content issue.

00:30:09.536 --> 00:30:11.076 A:middle
Let's look at them one by one.

00:30:11.686 --> 00:30:15.086 A:middle
AV Player Item Error Log, they

00:30:15.086 --> 00:30:17.116 A:middle
have talked a little bit about

00:30:17.116 --> 00:30:17.696 A:middle
[inaudible] in this one.

00:30:19.146 --> 00:30:21.056 A:middle
This type of Error Log is an

00:30:21.056 --> 00:30:22.906 A:middle
indication that there is a

00:30:22.906 --> 00:30:24.756 A:middle
problem with network or content

00:30:24.756 --> 00:30:25.186 A:middle
format.

00:30:25.746 --> 00:30:27.656 A:middle
However, they are not always

00:30:27.656 --> 00:30:28.136 A:middle
fatal.

00:30:28.726 --> 00:30:31.666 A:middle
When the error is indicated,

00:30:31.856 --> 00:30:33.406 A:middle
playback may be perfectly fine

00:30:33.626 --> 00:30:34.446 A:middle
at that moment.

00:30:36.516 --> 00:30:38.126 A:middle
However, the application showed

00:30:38.126 --> 00:30:40.356 A:middle
the check in the error comments

00:30:40.706 --> 00:30:42.796 A:middle
to find out details, such as

00:30:42.796 --> 00:30:43.306 A:middle
this one.

00:30:44.366 --> 00:30:46.486 A:middle
We have seen it before, media

00:30:46.486 --> 00:30:48.766 A:middle
file not received in 15 seconds.

00:30:49.476 --> 00:30:51.286 A:middle
So it's an indication that your

00:30:51.286 --> 00:30:54.286 A:middle
user may have observed or will

00:30:54.286 --> 00:30:55.096 A:middle
observe stalls.

00:30:56.916 --> 00:31:00.206 A:middle
Now next one is HTTP error, it

00:30:56.916 --> 00:31:00.206 A:middle
Now next one is HTTP error, it

00:31:00.206 --> 00:31:01.336 A:middle
says file not found.

00:31:01.916 --> 00:31:03.716 A:middle
This an indication of a content

00:31:03.716 --> 00:31:04.566 A:middle
delivery issue.

00:31:05.376 --> 00:31:07.696 A:middle
The user may observe audio loss,

00:31:07.916 --> 00:31:13.926 A:middle
video loss, or both.

00:31:13.926 --> 00:31:15.516 A:middle
[inaudible] specified bandwidth

00:31:15.516 --> 00:31:16.206 A:middle
for variant.

00:31:16.576 --> 00:31:17.836 A:middle
Now this is an interesting one.

00:31:18.096 --> 00:31:19.416 A:middle
It's an indication of a stall

00:31:19.416 --> 00:31:19.856 A:middle
risk.

00:31:20.236 --> 00:31:22.546 A:middle
However, the playback may be

00:31:22.616 --> 00:31:24.656 A:middle
perfectly fine when the error is

00:31:24.656 --> 00:31:25.296 A:middle
indicated.

00:31:25.836 --> 00:31:28.336 A:middle
It means some of the segments

00:31:28.336 --> 00:31:30.466 A:middle
bitrate is higher than what is

00:31:30.466 --> 00:31:32.006 A:middle
specified in the master

00:31:32.046 --> 00:31:32.556 A:middle
playlist.

00:31:32.996 --> 00:31:36.276 A:middle
Last example, crypto format

00:31:37.046 --> 00:31:39.196 A:middle
error, unsupported crypto

00:31:39.196 --> 00:31:39.626 A:middle
format.

00:31:40.026 --> 00:31:42.316 A:middle
This may be an indication of a

00:31:42.316 --> 00:31:43.926 A:middle
failure, a playback failure.

00:31:44.816 --> 00:31:47.926 A:middle
All this error message and a few

00:31:47.926 --> 00:31:49.556 A:middle
more that are not talked about

00:31:49.556 --> 00:31:52.006 A:middle
here are very helpful when we

00:31:52.006 --> 00:31:54.586 A:middle
have AV Player and Player Item

00:31:54.586 --> 00:31:54.966 A:middle
errors.

00:31:55.816 --> 00:31:57.046 A:middle
Let's take a look.

00:31:59.016 --> 00:32:00.476 A:middle
The application should be

00:31:59.016 --> 00:32:00.476 A:middle
The application should be

00:32:01.076 --> 00:32:03.476 A:middle
observing AV Player Item status

00:32:04.006 --> 00:32:05.576 A:middle
and AV Player Item error

00:32:05.576 --> 00:32:07.716 A:middle
property to find out this type

00:32:07.716 --> 00:32:08.086 A:middle
of error.

00:32:09.146 --> 00:32:10.816 A:middle
These errors are fatal errors.

00:32:11.916 --> 00:32:13.056 A:middle
When the error indicated

00:32:13.406 --> 00:32:15.106 A:middle
playback has been terminated

00:32:15.106 --> 00:32:17.586 A:middle
already, so what should we do?

00:32:18.306 --> 00:32:19.626 A:middle
How do we find out the cause?

00:32:20.206 --> 00:32:22.016 A:middle
Here is example.

00:32:22.806 --> 00:32:24.576 A:middle
The application is observing

00:32:24.986 --> 00:32:27.706 A:middle
player item status when the

00:32:27.706 --> 00:32:29.346 A:middle
status changed to failed.

00:32:30.286 --> 00:32:32.936 A:middle
Application go off to check the

00:32:32.936 --> 00:32:35.636 A:middle
AV Player error properties as

00:32:35.636 --> 00:32:37.766 A:middle
well as the Error Log from the

00:32:37.766 --> 00:32:39.416 A:middle
AV Player Item.

00:32:41.376 --> 00:32:45.766 A:middle
Here is the error property from

00:32:45.766 --> 00:32:46.716 A:middle
the player item.

00:32:47.146 --> 00:32:48.446 A:middle
It provides some useful

00:32:48.446 --> 00:32:49.056 A:middle
information.

00:32:50.206 --> 00:32:52.296 A:middle
Error code from AV foundation

00:32:52.296 --> 00:32:53.026 A:middle
error domain.

00:32:53.746 --> 00:32:56.536 A:middle
It also provides some hint, go

00:32:56.536 --> 00:32:59.246 A:middle
off and check the Error Log from

00:32:59.246 --> 00:33:00.516 A:middle
AV Player Item.

00:32:59.246 --> 00:33:00.516 A:middle
AV Player Item.

00:33:01.526 --> 00:33:05.446 A:middle
So corresponding AV Player Error

00:33:05.446 --> 00:33:07.766 A:middle
Log gives you much more details.

00:33:08.506 --> 00:33:10.706 A:middle
It tells you on this data and

00:33:10.706 --> 00:33:13.786 A:middle
the time and what URI with what

00:33:13.786 --> 00:33:14.396 A:middle
type of error.

00:33:14.396 --> 00:33:16.546 A:middle
So in this case, it's

00:33:16.546 --> 00:33:18.066 A:middle
unsupported crypto format.

00:33:19.056 --> 00:33:22.226 A:middle
It also tells you what type of

00:33:22.566 --> 00:33:24.496 A:middle
network interface the device was

00:33:24.606 --> 00:33:29.356 A:middle
on when the error happens.

00:33:29.606 --> 00:33:31.776 A:middle
Next type of error, HDCP.

00:33:33.006 --> 00:33:34.796 A:middle
If you are offering content that

00:33:34.796 --> 00:33:38.086 A:middle
requires HDCP protection, your

00:33:38.086 --> 00:33:39.666 A:middle
application should be observing

00:33:39.666 --> 00:33:42.336 A:middle
this long property name,

00:33:42.736 --> 00:33:43.186 A:middle
property.

00:33:43.736 --> 00:33:45.776 A:middle
It's output obscured due to

00:33:46.076 --> 00:33:47.366 A:middle
insufficient external

00:33:47.366 --> 00:33:48.066 A:middle
protection.

00:33:49.236 --> 00:33:50.566 A:middle
The value of this property

00:33:50.566 --> 00:33:52.406 A:middle
changes to two means three

00:33:52.406 --> 00:33:52.726 A:middle
things.

00:33:54.166 --> 00:33:57.386 A:middle
Current item requires external

00:33:57.386 --> 00:33:57.996 A:middle
protection.

00:33:58.726 --> 00:34:00.566 A:middle
Device does not meet the

00:33:58.726 --> 00:34:00.566 A:middle
Device does not meet the

00:34:00.916 --> 00:34:01.696 A:middle
protection level.

00:34:02.326 --> 00:34:04.506 A:middle
User will observe or is already

00:34:04.506 --> 00:34:06.566 A:middle
observing video loss, like

00:34:06.566 --> 00:34:07.866 A:middle
through [inaudible] for example.

00:34:08.866 --> 00:34:13.255 A:middle
To avoid this issue, your master

00:34:13.255 --> 00:34:16.565 A:middle
playlist should offer at least

00:34:16.565 --> 00:34:19.226 A:middle
one variant that does not

00:34:19.226 --> 00:34:21.926 A:middle
require HDCP for fallback.

00:34:22.626 --> 00:34:24.656 A:middle
Remember, not all your users has

00:34:24.876 --> 00:34:27.326 A:middle
the viewing setup that is HDCP

00:34:27.326 --> 00:34:28.065 A:middle
capable.

00:34:28.996 --> 00:34:31.436 A:middle
App user interface should

00:34:31.436 --> 00:34:33.706 A:middle
reflect the property change to

00:34:33.706 --> 00:34:35.116 A:middle
timely hint the user.

00:34:36.496 --> 00:34:38.766 A:middle
A lot of playback issues are

00:34:38.766 --> 00:34:40.616 A:middle
introduced by content authoring

00:34:41.176 --> 00:34:43.396 A:middle
such as audio and video out of

00:34:43.396 --> 00:34:46.166 A:middle
syncope or glitches while

00:34:46.376 --> 00:34:46.916 A:middle
[inaudible] switching.

00:34:48.085 --> 00:34:49.076 A:middle
In addition to the error

00:34:49.076 --> 00:34:50.815 A:middle
investigation and handling that

00:34:50.815 --> 00:34:53.146 A:middle
we have talked about, we would

00:34:53.146 --> 00:34:55.755 A:middle
encourage you to use our media

00:34:55.755 --> 00:34:58.656 A:middle
stream validator too, which is

00:34:58.656 --> 00:35:00.596 A:middle
available on the developer

00:34:58.656 --> 00:35:00.596 A:middle
available on the developer

00:35:00.596 --> 00:35:01.256 A:middle
website.

00:35:02.026 --> 00:35:03.316 A:middle
That's all I want to talk about

00:35:03.316 --> 00:35:03.826 A:middle
it today.

00:35:04.606 --> 00:35:06.226 A:middle
Now let's welcome my colleague,

00:35:06.266 --> 00:35:08.806 A:middle
Eryk Vershen, to talk about how

00:35:10.136 --> 00:35:12.006 A:middle
to author the master playlist

00:35:12.676 --> 00:35:13.266 A:middle
the correct way.

00:35:13.796 --> 00:35:14.166 A:middle
Thank you.

00:35:15.516 --> 00:35:18.500 A:middle
[ Applause ]

00:35:25.046 --> 00:35:25.976 A:middle
&gt;&gt; Thanks, Zhenheng.

00:35:26.346 --> 00:35:27.336 A:middle
My name's Eryk Vershen.

00:35:27.336 --> 00:35:28.956 A:middle
I'm an engineer working on HLS

00:35:28.956 --> 00:35:29.566 A:middle
Tools.

00:35:29.566 --> 00:35:31.596 A:middle
We've spoken about how to

00:35:31.596 --> 00:35:33.606 A:middle
measure your performance and

00:35:33.826 --> 00:35:35.406 A:middle
also how to address many of

00:35:35.406 --> 00:35:36.236 A:middle
those concerns.

00:35:36.746 --> 00:35:38.166 A:middle
However, one of the key elements

00:35:38.786 --> 00:35:40.436 A:middle
to successful and error-free

00:35:40.436 --> 00:35:42.656 A:middle
playback experience is to ensure

00:35:42.656 --> 00:35:44.636 A:middle
that your master playlist is

00:35:44.636 --> 00:35:45.566 A:middle
authored correctly.

00:35:46.246 --> 00:35:47.826 A:middle
The master playlist is what

00:35:47.826 --> 00:35:49.216 A:middle
allows the player to make

00:35:49.216 --> 00:35:51.426 A:middle
intelligent decisions both

00:35:51.476 --> 00:35:53.226 A:middle
before and during playback.

00:35:53.756 --> 00:35:55.196 A:middle
So getting it right is critical.

00:35:56.466 --> 00:35:57.176 A:middle
There we go.

00:35:57.176 --> 00:35:57.846 A:middle
That's my advice.

00:35:58.046 --> 00:35:59.246 A:middle
No, I'm just kidding.

00:35:59.646 --> 00:36:01.066 A:middle
I think I need to give you a

00:35:59.646 --> 00:36:01.066 A:middle
I think I need to give you a

00:36:01.066 --> 00:36:02.356 A:middle
little more background to

00:36:02.356 --> 00:36:03.476 A:middle
understand what Roger meant.

00:36:04.426 --> 00:36:06.086 A:middle
We want you to put all of the

00:36:06.086 --> 00:36:07.706 A:middle
encoding options you have into

00:36:07.756 --> 00:36:09.666 A:middle
your master playlist and to

00:36:09.666 --> 00:36:11.256 A:middle
describe them as completely as

00:36:11.256 --> 00:36:11.796 A:middle
possible.

00:36:12.556 --> 00:36:13.676 A:middle
Let's pretend you're asking me

00:36:13.676 --> 00:36:14.296 A:middle
questions.

00:36:14.846 --> 00:36:17.876 A:middle
This is the crucial question and

00:36:17.876 --> 00:36:18.976 A:middle
the main thing you have to get

00:36:18.976 --> 00:36:19.296 A:middle
right.

00:36:20.316 --> 00:36:22.866 A:middle
Now, first you have to remember

00:36:22.866 --> 00:36:24.396 A:middle
that just because a master

00:36:24.396 --> 00:36:26.486 A:middle
playlist works doesn't mean it's

00:36:26.486 --> 00:36:26.826 A:middle
right.

00:36:27.446 --> 00:36:28.686 A:middle
I've actually seen master

00:36:28.686 --> 00:36:30.026 A:middle
playlists that look remarkably

00:36:30.026 --> 00:36:30.596 A:middle
like this.

00:36:30.996 --> 00:36:32.576 A:middle
This is technically legal, and

00:36:32.576 --> 00:36:33.756 A:middle
it's next to useless.

00:36:34.356 --> 00:36:36.456 A:middle
I say, okay, well how about this

00:36:36.456 --> 00:36:36.616 A:middle
one?

00:36:36.616 --> 00:36:37.956 A:middle
It has a few more variants.

00:36:38.816 --> 00:36:40.146 A:middle
Well, it's a little bit better,

00:36:40.146 --> 00:36:41.386 A:middle
but it's still terrible.

00:36:41.856 --> 00:36:42.836 A:middle
Can we even play this?

00:36:42.836 --> 00:36:43.986 A:middle
What codec is it using?

00:36:44.266 --> 00:36:45.156 A:middle
Is it HDR?

00:36:45.156 --> 00:36:46.166 A:middle
Is it 60 fps?

00:36:46.916 --> 00:36:48.316 A:middle
You need to tell us everything.

00:36:48.316 --> 00:36:49.636 A:middle
We want you to tell us

00:36:49.636 --> 00:36:50.096 A:middle
everything.

00:36:50.716 --> 00:36:52.256 A:middle
For example, average bandwidth.

00:36:52.536 --> 00:36:54.486 A:middle
Average bandwidth enables us to

00:36:54.486 --> 00:36:56.396 A:middle
make better decisions about

00:36:56.396 --> 00:36:57.616 A:middle
which variant to switch to.

00:36:58.446 --> 00:36:59.396 A:middle
It's a better predictor or

00:36:59.396 --> 00:37:00.626 A:middle
whether we'll be able to keep up

00:36:59.396 --> 00:37:00.626 A:middle
whether we'll be able to keep up

00:37:00.626 --> 00:37:01.306 A:middle
with a stream.

00:37:02.276 --> 00:37:04.276 A:middle
Codecs is what enables us to

00:37:04.276 --> 00:37:06.416 A:middle
filter out things that we can't

00:37:06.416 --> 00:37:08.806 A:middle
play, and resolution allows us

00:37:08.806 --> 00:37:10.156 A:middle
to make good decisions about

00:37:10.156 --> 00:37:11.236 A:middle
which variant to choose.

00:37:12.086 --> 00:37:13.806 A:middle
Remember, we don't read the

00:37:13.806 --> 00:37:15.776 A:middle
media playlists or the media

00:37:15.776 --> 00:37:17.436 A:middle
segments until we have to.

00:37:17.816 --> 00:37:19.246 A:middle
So you need to tell us things

00:37:19.466 --> 00:37:20.846 A:middle
ahead of time in your master

00:37:20.846 --> 00:37:21.406 A:middle
playlist.

00:37:22.616 --> 00:37:25.406 A:middle
So here's a sample of a simple

00:37:25.406 --> 00:37:26.266 A:middle
master playlist.

00:37:26.766 --> 00:37:28.306 A:middle
This playlist allows the player

00:37:28.306 --> 00:37:30.266 A:middle
to adapt to bandwidth changes

00:37:30.266 --> 00:37:31.876 A:middle
and make good choices about

00:37:31.876 --> 00:37:32.816 A:middle
which variant to use.

00:37:33.756 --> 00:37:36.436 A:middle
Now, everything that we've done

00:37:36.436 --> 00:37:38.066 A:middle
here is invisible to the user.

00:37:38.066 --> 00:37:39.576 A:middle
It just makes the stream play

00:37:39.576 --> 00:37:39.896 A:middle
better.

00:37:41.156 --> 00:37:41.506 A:middle
Okay.

00:37:41.986 --> 00:37:43.516 A:middle
Let's look at a common problem.

00:37:43.516 --> 00:37:45.546 A:middle
Your stream plays, but you're

00:37:45.546 --> 00:37:46.876 A:middle
not seeing any images in fast

00:37:46.876 --> 00:37:48.186 A:middle
forward, or your not seeing a

00:37:48.186 --> 00:37:49.496 A:middle
thumbnail in the scrubber bar.

00:37:50.826 --> 00:37:52.376 A:middle
Here's the Apple TV scrubber

00:37:52.376 --> 00:37:52.656 A:middle
bar.

00:37:53.616 --> 00:37:54.506 A:middle
You can see how long your

00:37:54.506 --> 00:37:55.356 A:middle
content is.

00:37:55.596 --> 00:37:56.586 A:middle
You can see where you are in the

00:37:56.586 --> 00:37:57.826 A:middle
content, where you want to go.

00:37:58.756 --> 00:37:59.976 A:middle
Now, in order to get that

00:37:59.976 --> 00:38:02.126 A:middle
thumbnail image, you need to

00:37:59.976 --> 00:38:02.126 A:middle
thumbnail image, you need to

00:38:02.126 --> 00:38:04.316 A:middle
give us an I-frame playlist, and

00:38:04.356 --> 00:38:06.226 A:middle
the I-frame playlist is also

00:38:06.506 --> 00:38:09.166 A:middle
what allows us to provide images

00:38:09.206 --> 00:38:10.646 A:middle
in fast forward and reverse

00:38:10.646 --> 00:38:13.156 A:middle
playback on your iPad or your

00:38:13.156 --> 00:38:13.526 A:middle
iPhone.

00:38:14.046 --> 00:38:15.616 A:middle
Now in order to talk about

00:38:15.616 --> 00:38:17.526 A:middle
I-frame playlist, we first need

00:38:17.616 --> 00:38:18.986 A:middle
to talk just for a moment about

00:38:18.986 --> 00:38:19.716 A:middle
normal video.

00:38:20.516 --> 00:38:22.286 A:middle
Now, here's a way of visualizing

00:38:22.866 --> 00:38:24.406 A:middle
regular video segments in HLS.

00:38:25.076 --> 00:38:26.796 A:middle
Each segment has content for a

00:38:26.796 --> 00:38:28.136 A:middle
number of frames, so it has a

00:38:28.136 --> 00:38:30.266 A:middle
duration in frames, and it has a

00:38:30.266 --> 00:38:31.776 A:middle
particular average bitrate, and

00:38:31.776 --> 00:38:34.346 A:middle
that bitrate varies from segment

00:38:34.866 --> 00:38:36.176 A:middle
to segment.

00:38:36.516 --> 00:38:38.586 A:middle
Now, because of compression

00:38:38.586 --> 00:38:40.096 A:middle
techniques, most frames in a

00:38:40.096 --> 00:38:41.326 A:middle
video can only be decoded

00:38:41.326 --> 00:38:42.756 A:middle
relative to other frames.

00:38:43.676 --> 00:38:45.436 A:middle
But I-frames, the I stands for

00:38:45.436 --> 00:38:47.056 A:middle
intercoded frames, these are

00:38:47.056 --> 00:38:48.536 A:middle
frames that are independently

00:38:48.536 --> 00:38:49.876 A:middle
decodable, and they're the base

00:38:49.876 --> 00:38:51.056 A:middle
frames that allow everything

00:38:51.056 --> 00:38:52.126 A:middle
else to be decoded.

00:38:52.996 --> 00:38:54.846 A:middle
Now, as I've shown you here, you

00:38:54.846 --> 00:38:56.716 A:middle
might have more than one I-frame

00:38:56.716 --> 00:38:58.696 A:middle
in a single segment, and the

00:38:58.696 --> 00:39:02.836 A:middle
I-frames need not be in a, occur

00:38:58.696 --> 00:39:02.836 A:middle
I-frames need not be in a, occur

00:39:02.836 --> 00:39:03.826 A:middle
at regular intervals.

00:39:05.676 --> 00:39:07.366 A:middle
An I-frame playlist is a

00:39:07.366 --> 00:39:09.036 A:middle
playlist which just points to

00:39:09.036 --> 00:39:10.806 A:middle
the I-frame content, that is

00:39:10.806 --> 00:39:12.276 A:middle
only the I-frame data will be

00:39:12.276 --> 00:39:12.926 A:middle
downloaded.

00:39:13.236 --> 00:39:14.786 A:middle
And when we talk about the

00:39:14.786 --> 00:39:16.016 A:middle
duration of an I-frame, we

00:39:16.016 --> 00:39:17.536 A:middle
always mean the time from that

00:39:17.536 --> 00:39:19.626 A:middle
I-frame till the next I-frame.

00:39:20.456 --> 00:39:21.596 A:middle
Now, this particular set of

00:39:21.596 --> 00:39:23.956 A:middle
I-frames, I've shown as

00:39:23.956 --> 00:39:24.976 A:middle
extracted from my normal

00:39:24.976 --> 00:39:26.986 A:middle
content, but you can also make

00:39:26.986 --> 00:39:28.156 A:middle
what we call a high-density

00:39:28.156 --> 00:39:29.066 A:middle
I-frame playlist.

00:39:29.996 --> 00:39:31.376 A:middle
This isn't something just

00:39:31.376 --> 00:39:32.396 A:middle
extracted from your normal

00:39:32.396 --> 00:39:32.886 A:middle
content.

00:39:32.886 --> 00:39:33.696 A:middle
Instead, you make it

00:39:33.946 --> 00:39:35.696 A:middle
deliberately with more evenly

00:39:35.696 --> 00:39:36.846 A:middle
spaced I-frames.

00:39:37.516 --> 00:39:38.556 A:middle
This will allow us to work

00:39:38.556 --> 00:39:38.756 A:middle
better.

00:39:38.756 --> 00:39:40.716 A:middle
It allows us to give a much

00:39:40.716 --> 00:39:42.336 A:middle
smoother result when you're fast

00:39:42.336 --> 00:39:42.736 A:middle
forwarding.

00:39:44.376 --> 00:39:45.576 A:middle
Now, here I'm showing you a

00:39:45.576 --> 00:39:47.096 A:middle
master playlist without I-frame

00:39:47.096 --> 00:39:47.866 A:middle
playlist added.

00:39:49.236 --> 00:39:51.956 A:middle
Now, notice that the I-frame

00:39:51.956 --> 00:39:53.816 A:middle
playlist has almost exactly the

00:39:53.816 --> 00:39:55.766 A:middle
same tags as the normal

00:39:55.766 --> 00:39:56.336 A:middle
playlist.

00:39:56.946 --> 00:39:58.656 A:middle
The only difference is the

00:39:58.656 --> 00:39:59.906 A:middle
I-frame playlist does not

00:39:59.906 --> 00:40:01.786 A:middle
support the frame rate attribute

00:39:59.906 --> 00:40:01.786 A:middle
support the frame rate attribute

00:40:02.096 --> 00:40:02.886 A:middle
because it doesn't make any

00:40:02.886 --> 00:40:04.136 A:middle
sense in that context.

00:40:04.986 --> 00:40:06.166 A:middle
Now, a good test for your

00:40:06.166 --> 00:40:07.936 A:middle
I-frame playlist is to try and

00:40:07.936 --> 00:40:08.746 A:middle
play it directly.

00:40:09.346 --> 00:40:11.376 A:middle
That is, take the URI of your

00:40:11.376 --> 00:40:13.116 A:middle
I-frame playlist and paste it

00:40:13.116 --> 00:40:13.846 A:middle
into Safari.

00:40:14.316 --> 00:40:16.496 A:middle
It should play at 1X speed, and

00:40:16.496 --> 00:40:18.136 A:middle
you should see the I-frames

00:40:18.136 --> 00:40:20.916 A:middle
displayed one after another in a

00:40:20.916 --> 00:40:22.216 A:middle
slowly changing sequence.

00:40:23.596 --> 00:40:24.886 A:middle
Now also I want to point out the

00:40:24.886 --> 00:40:26.266 A:middle
difference in the bitrate.

00:40:27.036 --> 00:40:28.516 A:middle
Notice that the I-frame bitrate

00:40:28.516 --> 00:40:30.266 A:middle
is much lower than the normal

00:40:30.266 --> 00:40:30.796 A:middle
bitrate.

00:40:30.936 --> 00:40:33.806 A:middle
That should always be the case.

00:40:34.256 --> 00:40:36.326 A:middle
Now, speaking of bitrates, we've

00:40:36.616 --> 00:40:39.366 A:middle
defined how to compute the peak

00:40:39.436 --> 00:40:40.766 A:middle
bitrate in the HLS

00:40:40.766 --> 00:40:41.616 A:middle
specification.

00:40:42.396 --> 00:40:43.976 A:middle
Make sure you do it that way.

00:40:43.976 --> 00:40:44.986 A:middle
Otherwise, you may get that

00:40:45.086 --> 00:40:46.616 A:middle
segment exceeds playlist,

00:40:46.616 --> 00:40:49.066 A:middle
exceeds specified bandwidth

00:40:49.066 --> 00:40:49.436 A:middle
error.

00:40:50.026 --> 00:40:52.306 A:middle
Now, we're going to move away

00:40:52.306 --> 00:40:54.316 A:middle
from video and talk about audio

00:40:54.316 --> 00:40:54.986 A:middle
for a little bit.

00:40:55.426 --> 00:40:57.046 A:middle
Now the most common question is

00:40:57.046 --> 00:40:57.936 A:middle
how do I support multiple

00:40:57.936 --> 00:40:58.606 A:middle
languages?

00:40:59.306 --> 00:41:00.646 A:middle
Here's what the interface looks

00:40:59.306 --> 00:41:00.646 A:middle
Here's what the interface looks

00:41:00.646 --> 00:41:00.986 A:middle
like.

00:41:01.296 --> 00:41:03.846 A:middle
I've got a list of languages,

00:41:03.846 --> 00:41:05.146 A:middle
and the user can select one.

00:41:06.336 --> 00:41:08.786 A:middle
And here's a sample playlist.

00:41:09.036 --> 00:41:10.746 A:middle
Now, notice what we did is we've

00:41:10.746 --> 00:41:13.836 A:middle
added an audio tag, sorry, an

00:41:13.836 --> 00:41:17.356 A:middle
audio attribute onto each of our

00:41:17.356 --> 00:41:19.976 A:middle
video variants, and we've added

00:41:19.976 --> 00:41:21.966 A:middle
a group, the media tags with

00:41:21.966 --> 00:41:22.716 A:middle
group ID's.

00:41:23.126 --> 00:41:27.646 A:middle
The group ID is simply a tag

00:41:27.646 --> 00:41:30.496 A:middle
that allows you to associate the

00:41:30.596 --> 00:41:32.296 A:middle
audio renditions with the video

00:41:32.296 --> 00:41:32.876 A:middle
variants.

00:41:33.546 --> 00:41:34.996 A:middle
So notice there are a number of

00:41:34.996 --> 00:41:37.266 A:middle
differences between the two

00:41:37.266 --> 00:41:38.316 A:middle
audio renditions.

00:41:38.846 --> 00:41:40.266 A:middle
Just as with your variants, we

00:41:40.266 --> 00:41:42.196 A:middle
want you to tell us as much as

00:41:42.196 --> 00:41:43.726 A:middle
you can about your media.

00:41:44.626 --> 00:41:46.216 A:middle
Now, there are two attributes

00:41:46.216 --> 00:41:47.396 A:middle
that people tend to have trouble

00:41:47.396 --> 00:41:49.446 A:middle
with on the media tags, and

00:41:49.446 --> 00:41:51.096 A:middle
that's Default and Autoselect.

00:41:52.306 --> 00:41:52.706 A:middle
Okay.

00:41:53.196 --> 00:41:56.376 A:middle
So Autoselect says that the

00:41:56.376 --> 00:41:57.426 A:middle
media selection code in the

00:41:57.426 --> 00:42:00.576 A:middle
player is allowed to choose this

00:41:57.426 --> 00:42:00.576 A:middle
player is allowed to choose this

00:42:00.576 --> 00:42:02.596 A:middle
rendition without any special

00:42:02.596 --> 00:42:03.586 A:middle
input from the user.

00:42:04.316 --> 00:42:05.836 A:middle
Most of the time, you want

00:42:05.836 --> 00:42:07.436 A:middle
Autoselect set to yes.

00:42:08.506 --> 00:42:10.066 A:middle
If you don't set this, the

00:42:10.066 --> 00:42:11.156 A:middle
user's going to have to make an

00:42:11.156 --> 00:42:13.036 A:middle
explicit choice to get that

00:42:13.036 --> 00:42:13.546 A:middle
rendition.

00:42:15.276 --> 00:42:17.496 A:middle
The default on the other hand is

00:42:17.496 --> 00:42:19.496 A:middle
what to pick when the user has

00:42:19.496 --> 00:42:20.916 A:middle
not given a preferred language.

00:42:22.216 --> 00:42:23.406 A:middle
Generally this should be the

00:42:23.406 --> 00:42:25.566 A:middle
original language of your video,

00:42:26.066 --> 00:42:27.186 A:middle
and the default must be

00:42:27.186 --> 00:42:28.986 A:middle
autoselectable because the

00:42:28.986 --> 00:42:30.436 A:middle
system has to do the choosing.

00:42:31.136 --> 00:42:33.696 A:middle
Now, this default has nothing to

00:42:33.696 --> 00:42:34.936 A:middle
do with the default video

00:42:34.936 --> 00:42:35.326 A:middle
variant.

00:42:35.326 --> 00:42:37.346 A:middle
This is the default within the

00:42:37.346 --> 00:42:38.426 A:middle
group of renditions.

00:42:39.916 --> 00:42:41.676 A:middle
So, okay, great.

00:42:41.676 --> 00:42:43.166 A:middle
I've got multiple language, but

00:42:43.166 --> 00:42:44.496 A:middle
I'd really like to have some

00:42:44.566 --> 00:42:45.496 A:middle
multichannel audio.

00:42:45.496 --> 00:42:47.186 A:middle
I've got 5.1.

00:42:48.126 --> 00:42:48.816 A:middle
Okay.

00:42:48.816 --> 00:42:50.086 A:middle
Well the first thing to remember

00:42:50.086 --> 00:42:52.126 A:middle
is not all devices can play

00:42:52.126 --> 00:42:53.156 A:middle
multichannel audio.

00:42:53.516 --> 00:42:56.606 A:middle
So you want to also provide the

00:42:56.606 --> 00:42:58.236 A:middle
user with a stereo option.

00:42:58.826 --> 00:43:00.066 A:middle
And you should think of this

00:42:58.826 --> 00:43:00.066 A:middle
And you should think of this

00:43:00.066 --> 00:43:01.676 A:middle
always as filling out a matrix.

00:43:02.256 --> 00:43:04.516 A:middle
You need to have every format

00:43:04.676 --> 00:43:05.796 A:middle
having every language.

00:43:07.456 --> 00:43:10.296 A:middle
You may say, well, I don't have

00:43:10.296 --> 00:43:12.706 A:middle
a multichannel original for my

00:43:13.276 --> 00:43:14.076 A:middle
French.

00:43:14.076 --> 00:43:16.206 A:middle
I don't have a 5.1 French.

00:43:16.396 --> 00:43:17.616 A:middle
In that case what you should do

00:43:17.616 --> 00:43:19.936 A:middle
is put stereo, your stereo

00:43:19.936 --> 00:43:22.546 A:middle
content in that group instead.

00:43:23.786 --> 00:43:25.396 A:middle
You need to have something in

00:43:25.396 --> 00:43:26.906 A:middle
every slot of this matrix.

00:43:27.586 --> 00:43:30.756 A:middle
So let's see a sample playlist

00:43:30.756 --> 00:43:31.116 A:middle
again.

00:43:31.256 --> 00:43:34.666 A:middle
This one is just like the

00:43:34.666 --> 00:43:36.626 A:middle
previous example except I've

00:43:36.626 --> 00:43:38.256 A:middle
changed the group ID, and

00:43:38.256 --> 00:43:39.566 A:middle
remember that's perfectly fine

00:43:39.566 --> 00:43:41.426 A:middle
because the group ID just serves

00:43:41.426 --> 00:43:43.686 A:middle
to connect the audio renditions

00:43:43.686 --> 00:43:44.806 A:middle
with the video variants.

00:43:45.406 --> 00:43:48.356 A:middle
Now, here we had the

00:43:48.356 --> 00:43:50.396 A:middle
multichannel group, and then

00:43:50.396 --> 00:43:52.956 A:middle
I've set this up with French as

00:43:52.956 --> 00:43:54.366 A:middle
stereo, so you can see how

00:43:54.366 --> 00:43:54.986 A:middle
that's done.

00:43:55.566 --> 00:43:58.146 A:middle
What you need to do is make sure

00:43:58.146 --> 00:44:00.306 A:middle
that the codecs tag indicates

00:43:58.146 --> 00:44:00.306 A:middle
that the codecs tag indicates

00:44:00.716 --> 00:44:04.096 A:middle
all the different codecs that

00:44:04.096 --> 00:44:06.226 A:middle
can occur within that rendition

00:44:07.516 --> 00:44:07.766 A:middle
group.

00:44:08.086 --> 00:44:09.126 A:middle
Now, notice that we had to

00:44:09.126 --> 00:44:11.506 A:middle
duplicate our video variant.

00:44:12.196 --> 00:44:13.986 A:middle
So now we've got two entries,

00:44:13.986 --> 00:44:16.186 A:middle
one pointing to one audio group,

00:44:16.536 --> 00:44:17.416 A:middle
and the other pointing to the

00:44:17.416 --> 00:44:18.256 A:middle
other audio group.

00:44:18.476 --> 00:44:19.286 A:middle
And you'll see this kind of

00:44:19.286 --> 00:44:21.106 A:middle
duplication again in later

00:44:21.106 --> 00:44:21.596 A:middle
slides.

00:44:22.936 --> 00:44:25.856 A:middle
Well let's say rather than 5.1,

00:44:25.856 --> 00:44:27.566 A:middle
I've got several audio bitrates.

00:44:27.566 --> 00:44:30.616 A:middle
I've got some high bitrate

00:44:30.616 --> 00:44:32.176 A:middle
audio, and I know I need to

00:44:32.176 --> 00:44:35.476 A:middle
provide a low bitrate for some

00:44:35.786 --> 00:44:36.326 A:middle
users.

00:44:36.996 --> 00:44:38.566 A:middle
So in terms of the renditions,

00:44:38.736 --> 00:44:40.386 A:middle
this is similar to what we had

00:44:40.816 --> 00:44:41.386 A:middle
before.

00:44:41.596 --> 00:44:42.636 A:middle
We still got a matrix.

00:44:42.636 --> 00:44:43.676 A:middle
We want to fill it out with

00:44:44.046 --> 00:44:45.506 A:middle
every language for every

00:44:45.506 --> 00:44:45.996 A:middle
bitrate.

00:44:47.126 --> 00:44:48.606 A:middle
And since these are both AAC,

00:44:48.606 --> 00:44:49.566 A:middle
they're considered the same

00:44:49.566 --> 00:44:50.266 A:middle
format.

00:44:50.706 --> 00:44:52.426 A:middle
So if I also want to have

00:44:52.886 --> 00:44:55.556 A:middle
another format, all I do is

00:44:55.556 --> 00:44:56.606 A:middle
extend that matrix.

00:44:57.096 --> 00:44:58.306 A:middle
Now, I want to mention that I've

00:44:58.306 --> 00:44:59.256 A:middle
been saying language for

00:44:59.256 --> 00:45:00.296 A:middle
convenience, but you should

00:44:59.256 --> 00:45:00.296 A:middle
convenience, but you should

00:45:00.296 --> 00:45:01.876 A:middle
remember that it's the name

00:45:01.876 --> 00:45:03.906 A:middle
attribute which is the unique

00:45:04.466 --> 00:45:05.956 A:middle
attribute, not the language

00:45:06.086 --> 00:45:06.616 A:middle
attribute.

00:45:07.056 --> 00:45:09.286 A:middle
Now, in this playlist I'm not

00:45:09.286 --> 00:45:10.346 A:middle
going to show you the media

00:45:10.346 --> 00:45:10.726 A:middle
tags.

00:45:10.726 --> 00:45:11.776 A:middle
I'm just going to show you the

00:45:11.776 --> 00:45:13.276 A:middle
video variants with their audio

00:45:13.276 --> 00:45:13.876 A:middle
group names.

00:45:14.416 --> 00:45:16.426 A:middle
Now you want your low bitrate

00:45:16.426 --> 00:45:18.006 A:middle
video associated with your low

00:45:18.006 --> 00:45:19.726 A:middle
bitrate audio, and you want you

00:45:19.726 --> 00:45:21.476 A:middle
high bitrate video associated

00:45:21.476 --> 00:45:22.936 A:middle
with your high bitrate audio.

00:45:23.986 --> 00:45:25.506 A:middle
And you'll always want to split

00:45:25.506 --> 00:45:26.346 A:middle
this up like this.

00:45:27.036 --> 00:45:29.316 A:middle
Don't do a situation where you

00:45:29.316 --> 00:45:30.556 A:middle
have a complete set of video

00:45:30.556 --> 00:45:31.866 A:middle
variants associated with your

00:45:31.866 --> 00:45:33.716 A:middle
low bitrate audio and a complete

00:45:33.716 --> 00:45:35.016 A:middle
set of variants associated with

00:45:35.016 --> 00:45:36.156 A:middle
your high bitrate audio.

00:45:36.156 --> 00:45:37.786 A:middle
Because if you do that, you can

00:45:37.786 --> 00:45:39.876 A:middle
be at a high video bitrate and

00:45:39.876 --> 00:45:41.816 A:middle
be bouncing between high and low

00:45:41.816 --> 00:45:42.726 A:middle
audio bitrates.

00:45:43.236 --> 00:45:48.506 A:middle
Now, here I've added in the AC3

00:45:48.586 --> 00:45:49.376 A:middle
content.

00:45:50.006 --> 00:45:51.876 A:middle
Notice that again we had to

00:45:51.876 --> 00:45:54.446 A:middle
duplicate our video variant

00:45:54.446 --> 00:45:56.176 A:middle
entries, but they point to the

00:45:56.176 --> 00:45:57.346 A:middle
same video playlist.

00:45:58.196 --> 00:45:59.926 A:middle
Now, notice also that the

00:45:59.926 --> 00:46:01.996 A:middle
bitrate on the video variants

00:45:59.926 --> 00:46:01.996 A:middle
bitrate on the video variants

00:46:01.996 --> 00:46:02.536 A:middle
changes.

00:46:02.826 --> 00:46:03.926 A:middle
Remember that's because the

00:46:03.926 --> 00:46:06.486 A:middle
video, I'm sorry, the bitrate

00:46:06.486 --> 00:46:07.496 A:middle
associated with the video

00:46:07.496 --> 00:46:08.966 A:middle
variant is the bitrate of the

00:46:08.966 --> 00:46:11.136 A:middle
video itself plus any associated

00:46:11.136 --> 00:46:11.806 A:middle
renditions.

00:46:12.406 --> 00:46:16.056 A:middle
Now, let's go back to the video

00:46:16.056 --> 00:46:18.406 A:middle
for just a second because I want

00:46:18.406 --> 00:46:19.896 A:middle
to have multiple video formats.

00:46:19.896 --> 00:46:22.756 A:middle
I like to have HEVC, so I can

00:46:23.186 --> 00:46:25.366 A:middle
have better quality at the same

00:46:25.366 --> 00:46:26.816 A:middle
bitrate or I'd like to have

00:46:26.816 --> 00:46:28.196 A:middle
Dolby Vision so I can have some

00:46:28.196 --> 00:46:29.266 A:middle
HDR content.

00:46:29.806 --> 00:46:33.326 A:middle
Again, we're kind of filling out

00:46:33.326 --> 00:46:33.936 A:middle
a matrix.

00:46:34.116 --> 00:46:35.556 A:middle
In this case, no matter which

00:46:35.556 --> 00:46:37.886 A:middle
video format we choose, we want

00:46:37.886 --> 00:46:39.406 A:middle
to end up with a reasonable set

00:46:39.496 --> 00:46:40.136 A:middle
of variants.

00:46:40.626 --> 00:46:42.576 A:middle
So the rows here are tiers based

00:46:42.576 --> 00:46:46.006 A:middle
on quality, and we want to fill

00:46:46.006 --> 00:46:47.906 A:middle
out the matrix with a variant in

00:46:47.906 --> 00:46:49.466 A:middle
each tier in each format.

00:46:50.846 --> 00:46:52.956 A:middle
Now, we don't have to

00:46:52.956 --> 00:46:55.576 A:middle
necessarily fill out the higher

00:46:55.576 --> 00:46:57.496 A:middle
portions of the tiers on our

00:46:57.496 --> 00:46:58.686 A:middle
older formats.

00:46:58.686 --> 00:46:59.586 A:middle
You can skimp a little bit

00:46:59.586 --> 00:46:59.906 A:middle
there.

00:47:00.336 --> 00:47:02.876 A:middle
But similar to audio, not every

00:47:02.876 --> 00:47:04.586 A:middle
device supports things like

00:47:04.586 --> 00:47:06.516 A:middle
Dolby Vision, so you want to

00:47:06.516 --> 00:47:09.916 A:middle
provide an H.264 variant as a

00:47:09.916 --> 00:47:10.476 A:middle
fallback.

00:47:11.476 --> 00:47:12.586 A:middle
The main thing to remember is

00:47:12.586 --> 00:47:13.806 A:middle
that in each column you want to

00:47:13.806 --> 00:47:15.476 A:middle
have the bitrate form a nice

00:47:15.476 --> 00:47:16.066 A:middle
progression.

00:47:16.616 --> 00:47:19.266 A:middle
Now, this playlist has gotten a

00:47:19.266 --> 00:47:20.876 A:middle
little too big to show on one

00:47:20.876 --> 00:47:21.946 A:middle
slide, so I'm going to split it

00:47:21.946 --> 00:47:22.806 A:middle
over three slides.

00:47:23.276 --> 00:47:25.196 A:middle
This one shows you the H.264

00:47:25.196 --> 00:47:25.686 A:middle
variant.

00:47:26.336 --> 00:47:29.466 A:middle
On this slide, we have the HEVC

00:47:29.466 --> 00:47:29.946 A:middle
variant.

00:47:30.026 --> 00:47:31.906 A:middle
Now, notice everything has a

00:47:31.906 --> 00:47:34.206 A:middle
different video playlist that

00:47:34.206 --> 00:47:36.046 A:middle
it's pointing to, and here's our

00:47:36.046 --> 00:47:37.926 A:middle
Dolby Vision variant, and notice

00:47:37.926 --> 00:47:40.016 A:middle
that everything here has had the

00:47:40.016 --> 00:47:40.956 A:middle
same audio group.

00:47:41.336 --> 00:47:42.976 A:middle
So, again, if we wanted to have

00:47:42.976 --> 00:47:45.216 A:middle
multiple audio formats, we would

00:47:45.216 --> 00:47:47.146 A:middle
need to replicate the video

00:47:47.146 --> 00:47:49.466 A:middle
variants for each audio format.

00:47:49.796 --> 00:47:51.326 A:middle
And again this wouldn't increase

00:47:51.326 --> 00:47:52.516 A:middle
the number of video playlists we

00:47:52.516 --> 00:47:53.206 A:middle
had to have.

00:47:53.646 --> 00:47:54.566 A:middle
It would just increase the

00:47:54.566 --> 00:47:56.046 A:middle
number of entries that we had in

00:47:56.046 --> 00:47:56.666 A:middle
the playlist.

00:47:57.696 --> 00:47:57.836 A:middle
Okay.

00:47:58.086 --> 00:48:00.016 A:middle
We're almost done.

00:47:58.086 --> 00:48:00.016 A:middle
We're almost done.

00:48:00.436 --> 00:48:02.366 A:middle
Our last bit is about subtitles

00:48:02.366 --> 00:48:03.316 A:middle
and closed captions.

00:48:03.316 --> 00:48:05.946 A:middle
Now, you can probably guess how

00:48:05.946 --> 00:48:06.536 A:middle
this works.

00:48:07.316 --> 00:48:09.676 A:middle
Our variants need to point at

00:48:10.206 --> 00:48:12.316 A:middle
the subtitle and closed caption

00:48:12.446 --> 00:48:13.616 A:middle
groups that we're using.

00:48:14.096 --> 00:48:15.946 A:middle
So we need to add an attribute

00:48:15.946 --> 00:48:18.686 A:middle
to our video variant, and we

00:48:18.686 --> 00:48:20.166 A:middle
need to describe the renditions.

00:48:20.826 --> 00:48:22.496 A:middle
Now, notice that the closed

00:48:22.496 --> 00:48:24.146 A:middle
caption rendition does not have

00:48:24.146 --> 00:48:25.456 A:middle
a URI attribute.

00:48:26.526 --> 00:48:28.456 A:middle
That tells the system that the

00:48:28.456 --> 00:48:30.396 A:middle
closed caption data is found

00:48:30.616 --> 00:48:33.516 A:middle
within the video content, not in

00:48:33.516 --> 00:48:34.396 A:middle
a separate playlist.

00:48:34.946 --> 00:48:38.216 A:middle
So, there you go, the right

00:48:38.216 --> 00:48:38.816 A:middle
thing to do is to give us

00:48:38.816 --> 00:48:39.456 A:middle
everything you've got.

00:48:39.616 --> 00:48:41.166 A:middle
See, now you understand better

00:48:41.166 --> 00:48:41.666 A:middle
what I meant.

00:48:42.476 --> 00:48:42.756 A:middle
Okay.

00:48:42.756 --> 00:48:44.836 A:middle
I'd like to quickly summarize

00:48:44.836 --> 00:48:46.186 A:middle
the talk we've given today.

00:48:47.036 --> 00:48:48.236 A:middle
Emil talked about key

00:48:48.236 --> 00:48:49.976 A:middle
performance indicators, about

00:48:49.976 --> 00:48:51.406 A:middle
how to get or compute the values

00:48:51.406 --> 00:48:52.156 A:middle
and what they mean.

00:48:52.776 --> 00:48:55.246 A:middle
And Zhenheng talked about ways

00:48:55.246 --> 00:48:57.476 A:middle
to reduce startup time and how

00:48:57.476 --> 00:49:00.426 A:middle
to go about resolving stalls and

00:48:57.476 --> 00:49:00.426 A:middle
to go about resolving stalls and

00:49:00.426 --> 00:49:01.206 A:middle
other errors.

00:49:01.336 --> 00:49:02.896 A:middle
And I've talked about how to do

00:49:02.896 --> 00:49:03.756 A:middle
master playlists.

00:49:04.216 --> 00:49:06.156 A:middle
I'd like to briefly mention the

00:49:06.156 --> 00:49:07.586 A:middle
HLS validation tools.

00:49:08.266 --> 00:49:10.466 A:middle
They do identify many issues

00:49:10.466 --> 00:49:12.316 A:middle
with master and media playlists,

00:49:12.566 --> 00:49:14.246 A:middle
and it's worth your time to use

00:49:14.246 --> 00:49:14.446 A:middle
them.

00:49:15.616 --> 00:49:17.816 A:middle
As always, you can get more

00:49:17.816 --> 00:49:20.316 A:middle
information from the WWDC app or

00:49:20.366 --> 00:49:21.496 A:middle
the developer website.

00:49:21.946 --> 00:49:22.906 A:middle
That's all we have today.

00:49:23.136 --> 00:49:23.956 A:middle
Thanks very much for your

00:49:23.956 --> 00:49:24.706 A:middle
attention and time.

00:49:25.508 --> 00:49:27.508 A:middle
[ Applause ]
