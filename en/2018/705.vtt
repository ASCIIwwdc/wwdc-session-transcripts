WEBVTT

00:00:07.516 --> 00:00:15.500 A:middle
[ Music ]

00:00:23.106 --> 00:00:23.726 A:middle
&gt;&gt; Good afternoon.

00:00:24.516 --> 00:00:29.956 A:middle
[ Applause ]

00:00:30.456 --> 00:00:31.466 A:middle
My name is Pete Hare and I'm an

00:00:31.466 --> 00:00:32.846 A:middle
engineering manager on the App

00:00:32.846 --> 00:00:33.776 A:middle
Store team here at Apple.

00:00:34.286 --> 00:00:35.836 A:middle
We're here to discuss the best

00:00:35.836 --> 00:00:37.176 A:middle
ways to build your app and

00:00:37.176 --> 00:00:39.026 A:middle
server infrastructure to support

00:00:39.026 --> 00:00:39.806 A:middle
the subscriptions.

00:00:40.286 --> 00:00:41.446 A:middle
I'm going to go over a few

00:00:41.446 --> 00:00:42.206 A:middle
topics here today.

00:00:42.796 --> 00:00:43.956 A:middle
Firstly, we'll discuss the best

00:00:43.956 --> 00:00:45.226 A:middle
ways to actually build your app

00:00:45.306 --> 00:00:46.276 A:middle
and server architecture.

00:00:47.106 --> 00:00:48.066 A:middle
We've got some tips and tricks

00:00:48.066 --> 00:00:49.716 A:middle
around how to enhance the in-app

00:00:49.716 --> 00:00:50.776 A:middle
experience for your user.

00:00:52.186 --> 00:00:53.226 A:middle
My colleague Michael will get up

00:00:53.226 --> 00:00:54.806 A:middle
and talk a bit about reducing

00:00:54.856 --> 00:00:55.596 A:middle
subscriber churn.

00:00:55.596 --> 00:00:57.886 A:middle
And then finally, we've got some

00:00:57.886 --> 00:00:58.896 A:middle
new announcements around

00:00:58.896 --> 00:01:00.226 A:middle
analytics and reporting tools


00:00:58.896 --> 00:01:00.226 A:middle
analytics and reporting tools

00:01:00.266 --> 00:01:01.036 A:middle
available to you.

00:01:02.246 --> 00:01:03.456 A:middle
But first up let's talk a bit

00:01:03.456 --> 00:01:04.906 A:middle
about how to build your app and

00:01:04.906 --> 00:01:05.856 A:middle
server infrastructure.

00:01:07.406 --> 00:01:08.456 A:middle
Let's start off by asking a

00:01:08.516 --> 00:01:10.776 A:middle
simple question, what is a

00:01:10.776 --> 00:01:11.286 A:middle
subscription?

00:01:12.626 --> 00:01:14.216 A:middle
Well a subscription gives a user

00:01:14.366 --> 00:01:15.406 A:middle
access to your content or

00:01:15.406 --> 00:01:17.026 A:middle
service by them repeatedly

00:01:17.026 --> 00:01:18.476 A:middle
paying you some amount of money.

00:01:19.176 --> 00:01:19.926 A:middle
When you look at this at the

00:01:19.926 --> 00:01:21.596 A:middle
engineering layer a subscription

00:01:21.596 --> 00:01:22.946 A:middle
is really just a set of

00:01:22.946 --> 00:01:24.666 A:middle
repeating transactions each of

00:01:24.666 --> 00:01:26.796 A:middle
which unlock some subscription

00:01:26.866 --> 00:01:27.266 A:middle
period.

00:01:28.576 --> 00:01:30.276 A:middle
To use subscriptions in your app

00:01:30.646 --> 00:01:31.366 A:middle
there's a couple of things that

00:01:31.366 --> 00:01:32.696 A:middle
you need to do as a developer to

00:01:32.696 --> 00:01:33.516 A:middle
be able to handle these

00:01:33.516 --> 00:01:34.766 A:middle
transactions as they come in.

00:01:35.436 --> 00:01:36.216 A:middle
Let's go through each of these

00:01:36.216 --> 00:01:36.566 A:middle
steps.

00:01:36.566 --> 00:01:39.156 A:middle
Firstly, it starts off with your

00:01:39.156 --> 00:01:40.616 A:middle
app receiving a transaction.

00:01:42.056 --> 00:01:42.866 A:middle
Once your app has received a

00:01:42.866 --> 00:01:44.166 A:middle
transaction you need to go ahead

00:01:44.166 --> 00:01:45.226 A:middle
and verify that it's an

00:01:45.226 --> 00:01:46.646 A:middle
authentic transaction, that

00:01:46.646 --> 00:01:48.186 A:middle
money really has changed hands.

00:01:49.466 --> 00:01:51.376 A:middle
Then it's up to you to update

00:01:51.376 --> 00:01:52.466 A:middle
and maintain that user's

00:01:52.466 --> 00:01:54.196 A:middle
subscription state for ongoing

00:01:54.196 --> 00:01:55.766 A:middle
access to your service.

00:01:56.656 --> 00:01:57.786 A:middle
So let's go into each of these

00:01:57.786 --> 00:01:58.656 A:middle
in a little more detail.

00:01:58.656 --> 00:02:00.306 A:middle
Firstly, let's talk a bit about


00:01:58.656 --> 00:02:00.306 A:middle
Firstly, let's talk a bit about

00:02:00.306 --> 00:02:01.826 A:middle
receiving that transaction in

00:02:01.826 --> 00:02:02.726 A:middle
your app.

00:02:03.756 --> 00:02:05.376 A:middle
Now whether it's the initial

00:02:05.426 --> 00:02:06.966 A:middle
purchase of a subscription or a

00:02:06.966 --> 00:02:08.306 A:middle
renewal transaction for a

00:02:08.306 --> 00:02:10.916 A:middle
prescription your app is set up

00:02:10.916 --> 00:02:12.166 A:middle
to handle subscriptions and

00:02:12.166 --> 00:02:13.376 A:middle
transactions using the StoreKit

00:02:13.426 --> 00:02:13.766 A:middle
framework.

00:02:14.766 --> 00:02:15.636 A:middle
Now when you are set up to

00:02:15.636 --> 00:02:16.676 A:middle
handle transactions using

00:02:16.676 --> 00:02:18.696 A:middle
StoreKit the App Store will make

00:02:18.696 --> 00:02:20.276 A:middle
these charges on a user's credit

00:02:20.276 --> 00:02:21.216 A:middle
card in the background.

00:02:21.726 --> 00:02:23.226 A:middle
And anytime a transaction occurs

00:02:23.226 --> 00:02:24.836 A:middle
it informs your app of these

00:02:24.836 --> 00:02:26.286 A:middle
transactions via a thing called

00:02:26.346 --> 00:02:26.466 A:middle
the

00:02:26.516 --> 00:02:28.196 A:middle
SKPaymentTransactionsObserver.

00:02:28.906 --> 00:02:31.496 A:middle
This transaction observer object

00:02:31.496 --> 00:02:32.866 A:middle
is really the central piece of

00:02:32.866 --> 00:02:34.456 A:middle
in-app purchases when it comes

00:02:34.456 --> 00:02:35.626 A:middle
to your application.

00:02:35.836 --> 00:02:37.156 A:middle
It's actually just a protocol in

00:02:37.156 --> 00:02:38.556 A:middle
StoreKit, it looks like this and

00:02:38.556 --> 00:02:39.836 A:middle
you can set it on any object.

00:02:40.336 --> 00:02:41.206 A:middle
In this example we're just

00:02:41.206 --> 00:02:42.266 A:middle
setting it on the AppDelegate

00:02:42.266 --> 00:02:44.636 A:middle
itself, but the really important

00:02:44.636 --> 00:02:45.376 A:middle
thing is that you add a

00:02:45.466 --> 00:02:46.706 A:middle
Transaction Observer to the

00:02:46.706 --> 00:02:48.106 A:middle
default payment queue as early

00:02:48.106 --> 00:02:49.586 A:middle
on in the application lifecycle

00:02:49.586 --> 00:02:50.106 A:middle
as possible.

00:02:51.516 --> 00:02:52.586 A:middle
Once you've got a Transaction

00:02:53.026 --> 00:02:54.066 A:middle
Observer registered on the

00:02:54.066 --> 00:02:55.086 A:middle
default payment queue you're

00:02:55.086 --> 00:02:56.156 A:middle
ready to start receiving

00:02:56.156 --> 00:02:57.906 A:middle
transactions as they occur in

00:02:58.836 --> 00:02:59.946 A:middle
the background.

00:02:59.946 --> 00:03:01.296 A:middle
You receive transactions on a


00:02:59.946 --> 00:03:01.296 A:middle
You receive transactions on a

00:03:01.296 --> 00:03:02.466 A:middle
callback in the Transaction

00:03:02.466 --> 00:03:03.056 A:middle
Observed called

00:03:03.126 --> 00:03:05.316 A:middle
updatedTransactions and it's

00:03:05.316 --> 00:03:06.976 A:middle
here that StoreKit will inform

00:03:06.976 --> 00:03:08.196 A:middle
your app of a set of

00:03:08.196 --> 00:03:09.706 A:middle
transactions for you to process.

00:03:09.996 --> 00:03:11.126 A:middle
They can come in various

00:03:11.126 --> 00:03:11.986 A:middle
different states that we're not

00:03:11.986 --> 00:03:13.106 A:middle
going to go completely into in

00:03:13.106 --> 00:03:14.556 A:middle
this talk, but keep an eye out

00:03:14.556 --> 00:03:15.606 A:middle
for a transaction in the

00:03:15.726 --> 00:03:16.546 A:middle
purchased state.

00:03:17.266 --> 00:03:18.126 A:middle
That's a transaction that

00:03:18.126 --> 00:03:19.996 A:middle
StoreKit is telling your app is

00:03:19.996 --> 00:03:21.436 A:middle
ready for verification and

00:03:21.436 --> 00:03:21.766 A:middle
unlocking.

00:03:21.766 --> 00:03:25.726 A:middle
Once you've got a transaction

00:03:25.726 --> 00:03:26.606 A:middle
the purchase state you're ready

00:03:26.606 --> 00:03:27.826 A:middle
to go with that next step, which

00:03:27.826 --> 00:03:29.356 A:middle
is to verify that it is an

00:03:29.356 --> 00:03:30.366 A:middle
authentic transaction.

00:03:30.906 --> 00:03:33.826 A:middle
So when it comes to checking for

00:03:33.826 --> 00:03:34.936 A:middle
authenticity how can you know

00:03:34.936 --> 00:03:36.086 A:middle
that money really has changed

00:03:37.016 --> 00:03:37.176 A:middle
hands?

00:03:37.696 --> 00:03:38.826 A:middle
You use a thing called the App

00:03:38.826 --> 00:03:39.396 A:middle
Store receipt.

00:03:40.526 --> 00:03:41.446 A:middle
The App Store receipt is just

00:03:41.446 --> 00:03:42.716 A:middle
like a receipt you'd get in a

00:03:42.716 --> 00:03:43.896 A:middle
department store, it's a proof

00:03:43.896 --> 00:03:45.066 A:middle
of purchase that a user has

00:03:45.296 --> 00:03:46.436 A:middle
bought something that they say

00:03:46.436 --> 00:03:46.836 A:middle
they've bought.

00:03:46.836 --> 00:03:48.726 A:middle
In this case it's a trusted

00:03:48.726 --> 00:03:50.146 A:middle
record of the initial app

00:03:50.196 --> 00:03:51.266 A:middle
download and any in-app

00:03:51.346 --> 00:03:52.796 A:middle
purchases that have occurred for

00:03:52.796 --> 00:03:53.166 A:middle
this app.

00:03:54.606 --> 00:03:55.706 A:middle
This is a digital document, it's

00:03:55.706 --> 00:03:57.286 A:middle
stored on the user's device, we

00:03:57.286 --> 00:03:58.756 A:middle
provide an API for you to access

00:03:58.756 --> 00:04:00.576 A:middle
it and it's put there by the App


00:03:58.756 --> 00:04:00.576 A:middle
it and it's put there by the App

00:04:00.576 --> 00:04:00.846 A:middle
Store.

00:04:02.376 --> 00:04:04.216 A:middle
We also sign this document using

00:04:04.436 --> 00:04:05.376 A:middle
certificates so that you can

00:04:05.376 --> 00:04:06.866 A:middle
check to make sure that it is an

00:04:06.866 --> 00:04:07.836 A:middle
authentic document that's

00:04:08.226 --> 00:04:09.356 A:middle
actually issued by Apple.

00:04:10.576 --> 00:04:12.096 A:middle
And finally, the document is for

00:04:12.096 --> 00:04:13.976 A:middle
your app on that device only.

00:04:14.166 --> 00:04:14.946 A:middle
So if you've worked with

00:04:14.946 --> 00:04:16.586 A:middle
subscriptions before you'll

00:04:16.586 --> 00:04:18.096 A:middle
notice that maybe one user with

00:04:18.096 --> 00:04:20.366 A:middle
multiple devices has receipts

00:04:20.366 --> 00:04:21.346 A:middle
that look slightly different on

00:04:21.346 --> 00:04:21.946 A:middle
each device.

00:04:21.946 --> 00:04:24.836 A:middle
When it comes to actually

00:04:24.836 --> 00:04:26.276 A:middle
verifying this transaction that

00:04:26.276 --> 00:04:27.636 A:middle
your app's been told about the

00:04:27.636 --> 00:04:28.506 A:middle
first step that you need to do

00:04:28.506 --> 00:04:29.556 A:middle
is to actually verify that the

00:04:29.616 --> 00:04:30.916 A:middle
document in question, the App

00:04:30.916 --> 00:04:32.106 A:middle
Store receipt, is authentic.

00:04:32.476 --> 00:04:33.106 A:middle
So how do you do that?

00:04:33.656 --> 00:04:36.206 A:middle
You can do this in two ways.

00:04:36.206 --> 00:04:37.406 A:middle
Firstly, you can use on-device

00:04:37.406 --> 00:04:39.296 A:middle
validation and this is where

00:04:39.536 --> 00:04:40.806 A:middle
directly on the user's device

00:04:40.806 --> 00:04:41.846 A:middle
you can use a series of checks

00:04:41.916 --> 00:04:43.556 A:middle
to check the certificates used

00:04:43.556 --> 00:04:45.216 A:middle
to sign this app and verify that

00:04:45.216 --> 00:04:45.766 A:middle
it's authentic.

00:04:46.286 --> 00:04:47.536 A:middle
Or you can use the technique

00:04:47.536 --> 00:04:48.296 A:middle
called server-to-server

00:04:48.296 --> 00:04:48.836 A:middle
validation.

00:04:49.746 --> 00:04:50.776 A:middle
This second technique is where

00:04:50.776 --> 00:04:52.486 A:middle
you take that binary encoded

00:04:52.486 --> 00:04:54.276 A:middle
receipt data, send it up to your

00:04:54.276 --> 00:04:55.676 A:middle
own server, and then from your

00:04:55.676 --> 00:04:57.066 A:middle
server over to the App Store for

00:04:57.106 --> 00:04:57.606 A:middle
processing.

00:04:57.606 --> 00:04:59.066 A:middle
And the App Store will actually

00:04:59.066 --> 00:05:00.196 A:middle
do those checks for you.


00:04:59.066 --> 00:05:00.196 A:middle
do those checks for you.

00:05:00.776 --> 00:05:03.136 A:middle
You can use either of these

00:05:03.136 --> 00:05:04.646 A:middle
techniques, but whichever one

00:05:04.646 --> 00:05:05.816 A:middle
you choose it's important not to

00:05:05.816 --> 00:05:07.256 A:middle
use online validation directly

00:05:07.256 --> 00:05:08.826 A:middle
from the user's device, this is

00:05:08.826 --> 00:05:10.076 A:middle
not a secure way of actually

00:05:10.306 --> 00:05:11.656 A:middle
validating this document is

00:05:11.656 --> 00:05:12.096 A:middle
authentic.

00:05:13.096 --> 00:05:14.256 A:middle
But let's compare each of these

00:05:14.256 --> 00:05:15.396 A:middle
two approaches in a little more

00:05:15.396 --> 00:05:16.536 A:middle
detail, especially around

00:05:16.536 --> 00:05:17.736 A:middle
subscription management and

00:05:17.736 --> 00:05:19.166 A:middle
order renewable subscriptions.

00:05:20.466 --> 00:05:21.466 A:middle
Both of these techniques give

00:05:21.466 --> 00:05:23.086 A:middle
you a way to validate that this

00:05:23.136 --> 00:05:24.206 A:middle
is an authentic document.

00:05:25.636 --> 00:05:26.696 A:middle
They also give you access to the

00:05:26.696 --> 00:05:27.766 A:middle
contents of the receipt, any

00:05:27.766 --> 00:05:29.356 A:middle
transactions that have occurred

00:05:29.356 --> 00:05:30.416 A:middle
for this particular user.

00:05:31.436 --> 00:05:32.306 A:middle
But when it comes to auto

00:05:32.306 --> 00:05:33.426 A:middle
renewable subscriptions there's

00:05:33.456 --> 00:05:34.716 A:middle
a few key advantages that

00:05:34.786 --> 00:05:35.836 A:middle
server-to-server receipt

00:05:35.836 --> 00:05:37.096 A:middle
validation actually gives you

00:05:37.376 --> 00:05:38.396 A:middle
over on-device receipt

00:05:38.396 --> 00:05:38.886 A:middle
validation.

00:05:39.496 --> 00:05:40.496 A:middle
Firstly, we include some

00:05:40.496 --> 00:05:41.686 A:middle
additional subscription

00:05:41.686 --> 00:05:43.676 A:middle
information in the response to

00:05:43.966 --> 00:05:44.976 A:middle
that validation check.

00:05:45.406 --> 00:05:46.786 A:middle
You can use this, Michael will

00:05:46.786 --> 00:05:47.526 A:middle
talk about a little later in

00:05:47.526 --> 00:05:47.886 A:middle
this talk.

00:05:47.886 --> 00:05:51.126 A:middle
Your server is always on to

00:05:51.126 --> 00:05:51.906 A:middle
handle those renewal

00:05:51.906 --> 00:05:53.206 A:middle
transactions in the background.

00:05:53.206 --> 00:05:54.166 A:middle
This is really important if

00:05:54.166 --> 00:05:55.476 A:middle
you've got a service with maybe

00:05:55.476 --> 00:05:56.416 A:middle
multiple platforms.

00:05:56.946 --> 00:05:59.676 A:middle
Your server is not susceptible

00:05:59.716 --> 00:06:01.106 A:middle
to a device clock change.


00:05:59.716 --> 00:06:01.106 A:middle
to a device clock change.

00:06:01.786 --> 00:06:02.996 A:middle
If you're using on-device

00:06:02.996 --> 00:06:03.946 A:middle
receipt validation for

00:06:03.946 --> 00:06:05.246 A:middle
subscription management on the

00:06:05.246 --> 00:06:06.256 A:middle
user's device there's actually

00:06:06.256 --> 00:06:07.306 A:middle
nothing stopping the user from

00:06:07.536 --> 00:06:08.656 A:middle
winding their clock back and

00:06:08.886 --> 00:06:10.216 A:middle
putting themselves into a valid

00:06:10.216 --> 00:06:11.336 A:middle
subscription period, maybe a

00:06:11.426 --> 00:06:12.996 A:middle
free trial that they've actually

00:06:12.996 --> 00:06:14.206 A:middle
lapsed their subscription from.

00:06:14.796 --> 00:06:17.396 A:middle
And finally, it's just a little

00:06:17.466 --> 00:06:17.756 A:middle
simpler.

00:06:18.616 --> 00:06:19.986 A:middle
The server-to-server validation

00:06:19.986 --> 00:06:21.046 A:middle
you're dealing with JSON API,

00:06:21.046 --> 00:06:23.506 A:middle
you don't have to build OpenSSL

00:06:23.506 --> 00:06:24.956 A:middle
or use ASN.1 decoding.

00:06:24.956 --> 00:06:26.526 A:middle
So with all these things in mind

00:06:26.526 --> 00:06:27.556 A:middle
we're really encouraging more

00:06:27.556 --> 00:06:28.516 A:middle
and more people to actually

00:06:28.516 --> 00:06:29.636 A:middle
adopt server-to-server

00:06:29.636 --> 00:06:30.896 A:middle
validation when it comes to

00:06:30.896 --> 00:06:32.486 A:middle
maintaining an auto renewable

00:06:32.486 --> 00:06:33.346 A:middle
subscription state.

00:06:34.526 --> 00:06:36.436 A:middle
If you've got a simple utility

00:06:36.436 --> 00:06:37.506 A:middle
app that doesn't need any kind

00:06:37.506 --> 00:06:38.976 A:middle
of networking you can still use

00:06:38.976 --> 00:06:40.186 A:middle
on-device validation for

00:06:40.376 --> 00:06:41.316 A:middle
subscription management.

00:06:41.646 --> 00:06:42.246 A:middle
And if you're interested in

00:06:42.246 --> 00:06:43.446 A:middle
finding more about that I'd

00:06:43.446 --> 00:06:44.556 A:middle
invite you to check out the

00:06:44.556 --> 00:06:45.736 A:middle
video from last year's events

00:06:45.836 --> 00:06:47.126 A:middle
StoreKit Talk where we went into

00:06:47.126 --> 00:06:48.466 A:middle
more detail about on-device

00:06:48.466 --> 00:06:49.246 A:middle
receipt validation.

00:06:50.306 --> 00:06:51.336 A:middle
But for the purposes of this

00:06:51.336 --> 00:06:52.356 A:middle
talk we're really going to focus

00:06:52.356 --> 00:06:53.616 A:middle
more on the server to server

00:06:53.616 --> 00:06:55.186 A:middle
techniques outlined here.

00:06:56.256 --> 00:06:57.496 A:middle
So let's go back to our example

00:06:57.496 --> 00:06:58.326 A:middle
and see how we can use

00:06:58.326 --> 00:06:59.536 A:middle
server-to-server validation for

00:06:59.536 --> 00:07:00.386 A:middle
this transaction that we're


00:06:59.536 --> 00:07:00.386 A:middle
this transaction that we're

00:07:00.426 --> 00:07:00.886 A:middle
processing.

00:07:01.886 --> 00:07:02.956 A:middle
Back here in our Transaction

00:07:02.956 --> 00:07:04.676 A:middle
Observer you can access that

00:07:04.676 --> 00:07:05.946 A:middle
binary receipt data using the

00:07:05.946 --> 00:07:08.486 A:middle
App Store receipt URL API on the

00:07:08.486 --> 00:07:09.066 A:middle
main bundle.

00:07:09.956 --> 00:07:11.046 A:middle
Once you have this URL you can

00:07:11.136 --> 00:07:13.146 A:middle
pull out the binary data located

00:07:13.146 --> 00:07:14.976 A:middle
at that spot on the file system

00:07:15.016 --> 00:07:16.286 A:middle
and you can pull out that

00:07:16.286 --> 00:07:18.066 A:middle
receiptData and base64Encode and

00:07:18.066 --> 00:07:19.406 A:middle
this will give you a nice string

00:07:19.406 --> 00:07:20.576 A:middle
that you can send up to your own

00:07:20.576 --> 00:07:21.586 A:middle
server for processing.

00:07:21.786 --> 00:07:23.386 A:middle
You might provide some in-app

00:07:23.386 --> 00:07:25.156 A:middle
networking API for the current

00:07:25.836 --> 00:07:25.986 A:middle
user.

00:07:26.916 --> 00:07:28.306 A:middle
When you're sending that data up

00:07:28.306 --> 00:07:29.486 A:middle
to your server for processing

00:07:29.486 --> 00:07:30.866 A:middle
firstly you'll do this securely

00:07:30.866 --> 00:07:31.296 A:middle
obviously.

00:07:31.676 --> 00:07:32.616 A:middle
You can send it up to maybe a

00:07:32.616 --> 00:07:34.146 A:middle
process transaction endpoint on

00:07:34.146 --> 00:07:34.586 A:middle
your server.

00:07:35.476 --> 00:07:36.816 A:middle
In this endpoint you might have

00:07:36.816 --> 00:07:38.546 A:middle
a user ID associated with the

00:07:38.546 --> 00:07:40.166 A:middle
current user for an account on

00:07:40.166 --> 00:07:40.736 A:middle
your own system.

00:07:41.786 --> 00:07:42.946 A:middle
You can send this receipt data

00:07:42.946 --> 00:07:44.566 A:middle
up to your server and then once

00:07:44.566 --> 00:07:45.566 A:middle
you get that on your server you

00:07:45.566 --> 00:07:46.506 A:middle
can establish a secure

00:07:46.506 --> 00:07:47.896 A:middle
connection to the App Store's

00:07:47.896 --> 00:07:49.526 A:middle
verify receipt endpoint.

00:07:50.036 --> 00:07:51.376 A:middle
And you can send over that

00:07:51.376 --> 00:07:52.856 A:middle
receipt data to the App Store.

00:07:52.856 --> 00:07:55.546 A:middle
Here you can include a password

00:07:55.546 --> 00:07:56.666 A:middle
field, this is just a shared

00:07:56.666 --> 00:07:58.526 A:middle
secret between your app and the

00:07:58.526 --> 00:07:59.006 A:middle
App Store.

00:07:59.006 --> 00:08:00.176 A:middle
You can set this up in App Store


00:07:59.006 --> 00:08:00.176 A:middle
You can set this up in App Store

00:08:00.176 --> 00:08:01.416 A:middle
Connect and store it on your

00:08:01.416 --> 00:08:01.696 A:middle
server.

00:08:03.086 --> 00:08:04.206 A:middle
And when you send this receipt

00:08:04.206 --> 00:08:05.556 A:middle
data to the verify receipt

00:08:05.556 --> 00:08:06.946 A:middle
endpoint the verify receipt

00:08:06.946 --> 00:08:08.406 A:middle
endpoint will respond with JSON

00:08:08.406 --> 00:08:10.546 A:middle
payload that looks a little like

00:08:11.496 --> 00:08:11.596 A:middle
this.

00:08:11.816 --> 00:08:13.336 A:middle
The first thing to check when

00:08:13.336 --> 00:08:14.326 A:middle
you're verifying that this

00:08:14.326 --> 00:08:15.666 A:middle
transaction is authentic is this

00:08:15.836 --> 00:08:16.476 A:middle
status field.

00:08:17.236 --> 00:08:18.476 A:middle
This is an indication that Apple

00:08:18.476 --> 00:08:19.706 A:middle
has actually issued this

00:08:19.706 --> 00:08:20.876 A:middle
document in the first place.

00:08:21.766 --> 00:08:22.886 A:middle
Once you've verified that the

00:08:22.886 --> 00:08:24.486 A:middle
status is zero like this you can

00:08:24.486 --> 00:08:25.346 A:middle
check the contents of the

00:08:25.346 --> 00:08:27.676 A:middle
receipt portion of this payload.

00:08:27.986 --> 00:08:29.236 A:middle
This is the decoded version of

00:08:29.236 --> 00:08:30.496 A:middle
that binary data that you just

00:08:30.556 --> 00:08:32.385 A:middle
sent to verify receipt endpoint.

00:08:32.385 --> 00:08:33.645 A:middle
So in here you can do things

00:08:33.645 --> 00:08:35.336 A:middle
like verify that the bundle ID

00:08:35.336 --> 00:08:37.426 A:middle
in this receipt matches your

00:08:37.426 --> 00:08:38.246 A:middle
app's bundle ID.

00:08:39.076 --> 00:08:40.446 A:middle
And then you can inspect the

00:08:40.446 --> 00:08:42.326 A:middle
in-app array, this contains a

00:08:42.326 --> 00:08:43.556 A:middle
list of transactions for this

00:08:43.556 --> 00:08:45.156 A:middle
particular user for your app.

00:08:45.156 --> 00:08:46.596 A:middle
And you can verify that the

00:08:46.596 --> 00:08:49.356 A:middle
product ID associated with this

00:08:49.356 --> 00:08:50.846 A:middle
receipt is the one associated

00:08:50.846 --> 00:08:51.296 A:middle
with your app.

00:08:52.566 --> 00:08:53.886 A:middle
So assuming that these all match

00:08:54.476 --> 00:08:55.856 A:middle
you're determining that this

00:08:55.856 --> 00:08:57.326 A:middle
receipt entitles this particular

00:08:57.326 --> 00:08:58.676 A:middle
user to your subscription

00:08:58.676 --> 00:08:59.986 A:middle
product you're ready to go ahead

00:08:59.986 --> 00:09:01.096 A:middle
now with that third step,


00:08:59.986 --> 00:09:01.096 A:middle
now with that third step,

00:09:01.756 --> 00:09:02.806 A:middle
updating the user's subscription

00:09:02.806 --> 00:09:02.926 A:middle
state.

00:09:07.516 --> 00:09:08.476 A:middle
Now in the same way that each

00:09:08.476 --> 00:09:10.166 A:middle
subscription period starts with

00:09:10.166 --> 00:09:12.206 A:middle
a transaction it also ends with

00:09:12.206 --> 00:09:13.086 A:middle
an expiry date.

00:09:14.116 --> 00:09:15.516 A:middle
And the response from verify

00:09:15.516 --> 00:09:17.456 A:middle
receipt tells us each of these

00:09:17.456 --> 00:09:18.796 A:middle
expiry dates for each

00:09:18.876 --> 00:09:19.476 A:middle
transaction.

00:09:19.536 --> 00:09:21.426 A:middle
So looking back at this response

00:09:21.426 --> 00:09:22.776 A:middle
from verify receipt you'll

00:09:22.776 --> 00:09:24.086 A:middle
notice that there's this expires

00:09:24.116 --> 00:09:25.766 A:middle
date field in the transaction

00:09:25.766 --> 00:09:26.476 A:middle
and the response.

00:09:27.746 --> 00:09:29.036 A:middle
Let's bring up the user table

00:09:29.036 --> 00:09:30.266 A:middle
now that you might be saving

00:09:30.266 --> 00:09:31.356 A:middle
this data on your server.

00:09:33.026 --> 00:09:34.346 A:middle
You can take this expires date

00:09:34.346 --> 00:09:35.526 A:middle
from this transaction and

00:09:35.526 --> 00:09:36.776 A:middle
actually populate this into a

00:09:36.776 --> 00:09:38.276 A:middle
field on your own server, maybe

00:09:38.276 --> 00:09:39.766 A:middle
the latest expires date field

00:09:39.796 --> 00:09:40.686 A:middle
for this particular user.

00:09:40.976 --> 00:09:42.446 A:middle
And this field is going to

00:09:42.446 --> 00:09:44.206 A:middle
become the new source of truth

00:09:44.206 --> 00:09:45.326 A:middle
on your server for whether or

00:09:45.326 --> 00:09:46.976 A:middle
not this user is a subscriber.

00:09:48.386 --> 00:09:49.026 A:middle
While you're here you should

00:09:49.026 --> 00:09:50.606 A:middle
also keep track of this other

00:09:50.606 --> 00:09:51.936 A:middle
field, original transaction ID,

00:09:51.936 --> 00:09:53.736 A:middle
and you can save that in the

00:09:53.736 --> 00:09:54.556 A:middle
field called original

00:09:54.556 --> 00:09:55.846 A:middle
transaction ID against this

00:09:55.886 --> 00:09:56.866 A:middle
current user as well.

00:09:56.986 --> 00:09:57.966 A:middle
Well come back to this one in

00:09:57.966 --> 00:09:58.636 A:middle
just a moment as to why that's

00:09:58.636 --> 00:09:58.976 A:middle
important.


00:10:00.096 --> 00:10:02.496 A:middle
But once you've saved these two

00:10:02.496 --> 00:10:04.036 A:middle
bits of information against this

00:10:04.136 --> 00:10:05.136 A:middle
current user on your server

00:10:05.426 --> 00:10:06.146 A:middle
you're ready to go ahead with

00:10:06.146 --> 00:10:07.636 A:middle
the last step, which is to tell

00:10:07.636 --> 00:10:09.276 A:middle
the device that this transaction

00:10:09.276 --> 00:10:10.066 A:middle
has actually passed your

00:10:10.066 --> 00:10:11.146 A:middle
verification checks.

00:10:11.946 --> 00:10:13.016 A:middle
And then when your device gets

00:10:13.046 --> 00:10:14.756 A:middle
this callback it can call Finish

00:10:14.756 --> 00:10:16.256 A:middle
Transaction back down in your

00:10:16.256 --> 00:10:17.146 A:middle
Transaction Observer.

00:10:18.276 --> 00:10:19.456 A:middle
This is a really important step

00:10:19.456 --> 00:10:20.106 A:middle
because finishing the

00:10:20.106 --> 00:10:21.146 A:middle
transactional will actually

00:10:21.146 --> 00:10:22.606 A:middle
clear it out of your payment

00:10:22.606 --> 00:10:22.866 A:middle
queue.

00:10:22.866 --> 00:10:23.816 A:middle
And if you don't call Finish

00:10:23.816 --> 00:10:25.626 A:middle
Transaction it might reappear

00:10:25.626 --> 00:10:26.516 A:middle
there the next time the app

00:10:26.756 --> 00:10:27.876 A:middle
launches for processing.

00:10:27.946 --> 00:10:28.886 A:middle
So make sure you finish every

00:10:28.886 --> 00:10:31.506 A:middle
transaction that begins in

00:10:32.516 --> 00:10:32.756 A:middle
StoreKit.

00:10:32.856 --> 00:10:33.396 A:middle
Once you've finished the

00:10:33.396 --> 00:10:35.136 A:middle
transaction you've got an

00:10:35.136 --> 00:10:36.236 A:middle
updated subscription state in

00:10:36.236 --> 00:10:37.226 A:middle
your server, the user is now

00:10:37.336 --> 00:10:38.896 A:middle
free to enjoy that subscription

00:10:38.896 --> 00:10:40.136 A:middle
period on your service.

00:10:43.176 --> 00:10:44.106 A:middle
Now let's take another look at

00:10:44.106 --> 00:10:45.486 A:middle
that user table I mentioned that

00:10:45.486 --> 00:10:46.506 A:middle
you're storing on your server.

00:10:47.846 --> 00:10:48.966 A:middle
Each user who purchases a

00:10:48.966 --> 00:10:50.396 A:middle
subscription using this setup

00:10:50.396 --> 00:10:51.556 A:middle
will be assigned a unique

00:10:51.726 --> 00:10:53.286 A:middle
original transaction ID, that's

00:10:53.286 --> 00:10:55.046 A:middle
that field that you saved from

00:10:55.046 --> 00:10:56.216 A:middle
the transaction response.

00:10:56.896 --> 00:10:58.186 A:middle
And this identifier essentially

00:10:58.186 --> 00:10:59.716 A:middle
becomes that user's subscription

00:10:59.946 --> 00:11:00.106 A:middle
ID.


00:10:59.946 --> 00:11:00.106 A:middle
ID.

00:11:01.256 --> 00:11:02.206 A:middle
And it's important because it

00:11:02.206 --> 00:11:03.436 A:middle
shows up in all subsequent

00:11:03.436 --> 00:11:04.786 A:middle
renewal transactions.

00:11:05.136 --> 00:11:06.456 A:middle
Let's take a look at how this

00:11:06.456 --> 00:11:06.796 A:middle
works.

00:11:07.206 --> 00:11:07.746 A:middle
So let's say that you're

00:11:07.746 --> 00:11:09.366 A:middle
verifying a renewal transaction,

00:11:09.676 --> 00:11:10.646 A:middle
this happens in just the same

00:11:10.646 --> 00:11:11.466 A:middle
way you might use the same

00:11:11.466 --> 00:11:12.996 A:middle
process transaction endpoint on

00:11:12.996 --> 00:11:13.546 A:middle
your own server.

00:11:14.716 --> 00:11:16.236 A:middle
When you do those techniques of

00:11:16.236 --> 00:11:18.186 A:middle
verifying the transactions a

00:11:18.186 --> 00:11:19.736 A:middle
valid one, and you get up to

00:11:19.736 --> 00:11:20.806 A:middle
that stage of updating the

00:11:20.806 --> 00:11:22.766 A:middle
user's subscription state you'll

00:11:22.766 --> 00:11:23.686 A:middle
observe here that there's now

00:11:23.686 --> 00:11:25.216 A:middle
multiple transactions since this

00:11:25.216 --> 00:11:26.556 A:middle
is a renewal transaction.

00:11:27.976 --> 00:11:29.766 A:middle
Now according to your existing

00:11:29.766 --> 00:11:31.576 A:middle
server-side logic this latest

00:11:31.576 --> 00:11:32.836 A:middle
expires date is now a date in

00:11:32.836 --> 00:11:34.296 A:middle
the past, so the user is not

00:11:34.396 --> 00:11:35.516 A:middle
currently a subscriber and you

00:11:35.516 --> 00:11:36.726 A:middle
need to figure out are they

00:11:36.726 --> 00:11:38.306 A:middle
still a subscriber based on the

00:11:38.306 --> 00:11:39.206 A:middle
data in this receipt.

00:11:40.126 --> 00:11:41.926 A:middle
So how can you use this receipt

00:11:41.926 --> 00:11:43.656 A:middle
data and make that deduction?

00:11:43.886 --> 00:11:46.026 A:middle
Well for discovering whether or

00:11:46.026 --> 00:11:47.176 A:middle
not the user has an active

00:11:47.176 --> 00:11:48.366 A:middle
subscription you can pull out

00:11:48.366 --> 00:11:50.406 A:middle
the transactions associated with

00:11:50.406 --> 00:11:52.106 A:middle
that original transaction ID.

00:11:53.346 --> 00:11:54.536 A:middle
And then you can find the

00:11:54.536 --> 00:11:55.776 A:middle
transaction that has the latest

00:11:55.806 --> 00:11:56.606 A:middle
expires date.

00:11:57.226 --> 00:11:58.476 A:middle
Now if you find a date in the

00:11:58.476 --> 00:12:00.226 A:middle
past that's an indication that


00:11:58.476 --> 00:12:00.226 A:middle
past that's an indication that

00:12:00.226 --> 00:12:01.266 A:middle
this user is no longer a

00:12:01.266 --> 00:12:02.176 A:middle
subscriber anymore.

00:12:02.206 --> 00:12:03.616 A:middle
But if you find a date in the

00:12:03.616 --> 00:12:05.186 A:middle
future that's an indication that

00:12:05.186 --> 00:12:06.346 A:middle
this user is in a valid

00:12:06.346 --> 00:12:07.246 A:middle
subscription period.

00:12:08.396 --> 00:12:09.816 A:middle
So let's look at how this works

00:12:09.816 --> 00:12:11.696 A:middle
in the example that we're going

00:12:13.056 --> 00:12:13.156 A:middle
through.

00:12:13.366 --> 00:12:14.836 A:middle
Grab that original transaction

00:12:14.836 --> 00:12:16.986 A:middle
ID associated with this user and

00:12:16.986 --> 00:12:18.536 A:middle
pull out all the transactions

00:12:18.536 --> 00:12:19.336 A:middle
associated with this

00:12:19.336 --> 00:12:19.836 A:middle
subscription.

00:12:20.776 --> 00:12:22.256 A:middle
Then sort those transactions by

00:12:22.256 --> 00:12:24.066 A:middle
that expires date field and grab

00:12:24.066 --> 00:12:25.026 A:middle
the one that has the latest

00:12:25.026 --> 00:12:25.786 A:middle
expires date.

00:12:26.176 --> 00:12:27.516 A:middle
Now you can take that expires

00:12:27.556 --> 00:12:29.436 A:middle
date and update that latest

00:12:29.436 --> 00:12:30.926 A:middle
expires date field associated

00:12:30.926 --> 00:12:31.396 A:middle
with this user.

00:12:31.396 --> 00:12:33.346 A:middle
And when you do that you're

00:12:33.346 --> 00:12:34.486 A:middle
effectively extending that

00:12:34.486 --> 00:12:36.326 A:middle
user's subscription by another

00:12:36.456 --> 00:12:37.626 A:middle
length of time and your

00:12:37.626 --> 00:12:38.956 A:middle
server-side logic now knows that

00:12:38.956 --> 00:12:39.806 A:middle
the user is in a valid

00:12:39.806 --> 00:12:40.576 A:middle
subscription window.

00:12:41.866 --> 00:12:42.696 A:middle
Of course when you're dealing

00:12:42.696 --> 00:12:43.826 A:middle
with renewal transactions like

00:12:43.826 --> 00:12:44.806 A:middle
this that have come through

00:12:44.806 --> 00:12:45.876 A:middle
StoreKit you still need to

00:12:45.876 --> 00:12:47.626 A:middle
inform the device that it passed

00:12:47.706 --> 00:12:48.886 A:middle
those validation checks.

00:12:49.486 --> 00:12:50.646 A:middle
And have your device, your app

00:12:51.086 --> 00:12:52.446 A:middle
call Finish Transaction back

00:12:52.446 --> 00:12:52.976 A:middle
down in StoreKit again.

00:12:57.376 --> 00:12:58.576 A:middle
So let's say you have this set

00:12:58.576 --> 00:12:59.646 A:middle
up and working correctly.


00:13:00.566 --> 00:13:01.456 A:middle
The App Store is charging the

00:13:01.456 --> 00:13:02.276 A:middle
user's credit card in the

00:13:02.276 --> 00:13:03.626 A:middle
background and you're using

00:13:03.626 --> 00:13:05.046 A:middle
StoreKit to process these

00:13:05.046 --> 00:13:06.436 A:middle
transactions as they come in

00:13:06.836 --> 00:13:07.306 A:middle
through the app.

00:13:07.306 --> 00:13:09.086 A:middle
And then your server is updating

00:13:09.086 --> 00:13:10.566 A:middle
and maintaining this latest

00:13:10.566 --> 00:13:12.106 A:middle
expires date field on your

00:13:12.106 --> 00:13:12.436 A:middle
server.

00:13:12.436 --> 00:13:13.706 A:middle
So you've got that server-side

00:13:13.976 --> 00:13:15.176 A:middle
source of truth as to whether or

00:13:15.176 --> 00:13:16.466 A:middle
not a user is subscribed.

00:13:17.746 --> 00:13:18.906 A:middle
Let's now introduce a slightly

00:13:18.906 --> 00:13:20.056 A:middle
more complex example though to

00:13:20.056 --> 00:13:21.236 A:middle
the mix, which is maybe that you

00:13:21.236 --> 00:13:22.236 A:middle
offer your service through a

00:13:22.236 --> 00:13:23.196 A:middle
website as well.

00:13:24.276 --> 00:13:25.956 A:middle
Now when the user accesses your

00:13:25.956 --> 00:13:26.956 A:middle
subscription service through a

00:13:26.956 --> 00:13:29.006 A:middle
website you know based on that

00:13:29.006 --> 00:13:30.156 A:middle
latest expires date field that

00:13:30.156 --> 00:13:31.216 A:middle
the user is a subscriber.

00:13:32.606 --> 00:13:34.006 A:middle
But as much as we'd like to

00:13:34.076 --> 00:13:35.296 A:middle
think that people use our apps

00:13:35.356 --> 00:13:37.296 A:middle
all the time let's say that the

00:13:37.296 --> 00:13:38.266 A:middle
user doesn't use your app for a

00:13:38.266 --> 00:13:39.006 A:middle
number of days.

00:13:39.546 --> 00:13:40.426 A:middle
And then during this time the

00:13:40.426 --> 00:13:41.606 A:middle
App Store actually successfully

00:13:41.606 --> 00:13:43.696 A:middle
renews a user's subscription in

00:13:43.696 --> 00:13:44.226 A:middle
the background.

00:13:45.226 --> 00:13:46.526 A:middle
When the user tries to access

00:13:46.696 --> 00:13:47.496 A:middle
your servers through your

00:13:47.496 --> 00:13:49.716 A:middle
website that latest expires date

00:13:49.716 --> 00:13:50.776 A:middle
is now out of date because your

00:13:50.776 --> 00:13:52.036 A:middle
server hasn't learned about that

00:13:52.036 --> 00:13:52.756 A:middle
new transaction.

00:13:52.826 --> 00:13:54.606 A:middle
So how can your server know

00:13:54.606 --> 00:13:56.036 A:middle
about this transaction that's

00:13:56.036 --> 00:13:59.926 A:middle
occurred on the App Store?


00:14:00.146 --> 00:14:01.116 A:middle
You use a technique for this

00:14:01.116 --> 00:14:02.556 A:middle
called status polling, this

00:14:02.556 --> 00:14:03.886 A:middle
allows you to discover these

00:14:03.886 --> 00:14:05.306 A:middle
transactions directly from your

00:14:05.306 --> 00:14:05.616 A:middle
server.

00:14:06.496 --> 00:14:07.566 A:middle
In order to get set up to be

00:14:07.566 --> 00:14:09.116 A:middle
able to status poll from your

00:14:09.226 --> 00:14:11.316 A:middle
server you just save a latest

00:14:11.316 --> 00:14:12.796 A:middle
version of that encoded receipt

00:14:12.796 --> 00:14:14.796 A:middle
data that you send up associated

00:14:14.796 --> 00:14:15.386 A:middle
with each user.

00:14:16.196 --> 00:14:17.196 A:middle
And what you can do is you can

00:14:17.256 --> 00:14:19.166 A:middle
treat that encoded data just

00:14:19.166 --> 00:14:19.786 A:middle
like a token.

00:14:20.636 --> 00:14:21.666 A:middle
The reason why it can treat it

00:14:21.666 --> 00:14:22.886 A:middle
like a token is every time you

00:14:22.886 --> 00:14:25.216 A:middle
send up that encoded receipt

00:14:25.216 --> 00:14:26.386 A:middle
data to the verify receipt

00:14:26.386 --> 00:14:28.046 A:middle
endpoint the verify receipt

00:14:28.046 --> 00:14:29.536 A:middle
endpoint doesn't just respond

00:14:29.536 --> 00:14:31.256 A:middle
with a decoded version of that

00:14:31.736 --> 00:14:32.986 A:middle
receipt data, it also includes

00:14:32.986 --> 00:14:34.506 A:middle
any new transactions that have

00:14:34.506 --> 00:14:36.166 A:middle
occurred for this particular

00:14:36.166 --> 00:14:37.166 A:middle
user's subscription.

00:14:37.696 --> 00:14:38.816 A:middle
It's located in a field called

00:14:38.816 --> 00:14:40.916 A:middle
the latest receipt info field in

00:14:40.916 --> 00:14:42.106 A:middle
that JSON response.

00:14:42.806 --> 00:14:44.036 A:middle
And you can use that info to

00:14:44.036 --> 00:14:45.406 A:middle
unlock those new subscription

00:14:45.406 --> 00:14:46.956 A:middle
periods for this particular user

00:14:46.956 --> 00:14:48.436 A:middle
without the app having to launch

00:14:48.436 --> 00:14:48.776 A:middle
at all.

00:14:50.046 --> 00:14:50.916 A:middle
Let's see how this works.

00:14:50.916 --> 00:14:52.156 A:middle
So when you're verifying

00:14:52.156 --> 00:14:53.436 A:middle
transactions just like we saw

00:14:53.436 --> 00:14:54.796 A:middle
before you're sending up that

00:14:54.796 --> 00:14:55.396 A:middle
receipt data.

00:14:56.676 --> 00:14:57.976 A:middle
Now once you've determined that

00:14:57.976 --> 00:14:59.966 A:middle
this transaction in question has

00:14:59.966 --> 00:15:01.456 A:middle
passed those same checks that


00:14:59.966 --> 00:15:01.456 A:middle
passed those same checks that

00:15:01.456 --> 00:15:03.156 A:middle
you did before you can take that

00:15:03.156 --> 00:15:05.186 A:middle
receipt data and store that in a

00:15:05.186 --> 00:15:06.686 A:middle
field called latest receipt data

00:15:06.836 --> 00:15:08.086 A:middle
against the current user.

00:15:09.496 --> 00:15:10.426 A:middle
And now that you have that

00:15:10.426 --> 00:15:11.846 A:middle
latest receipt data stored,

00:15:12.276 --> 00:15:13.956 A:middle
that's a base64Encode string

00:15:14.216 --> 00:15:14.706 A:middle
with the user.

00:15:15.326 --> 00:15:16.296 A:middle
When it comes time to answer

00:15:16.296 --> 00:15:18.156 A:middle
that question, does my user have

00:15:18.156 --> 00:15:19.136 A:middle
an active subscription you can

00:15:19.136 --> 00:15:20.416 A:middle
just take that latest receipt

00:15:20.416 --> 00:15:22.216 A:middle
data from your server directly

00:15:22.216 --> 00:15:23.596 A:middle
and send it to the verify

00:15:23.596 --> 00:15:24.366 A:middle
receipt endpoint.

00:15:25.276 --> 00:15:26.416 A:middle
You can also include here an

00:15:26.416 --> 00:15:28.186 A:middle
optional flag that's the exclude

00:15:28.186 --> 00:15:30.096 A:middle
old transactions flag, this is

00:15:30.096 --> 00:15:31.256 A:middle
just telling verify receipt that

00:15:31.256 --> 00:15:32.026 A:middle
you don't even want to know

00:15:32.026 --> 00:15:33.316 A:middle
about that decoded version of

00:15:33.316 --> 00:15:34.396 A:middle
the receipt you just want to

00:15:34.396 --> 00:15:35.416 A:middle
find out about any new

00:15:35.416 --> 00:15:36.076 A:middle
transactions.

00:15:37.376 --> 00:15:39.456 A:middle
Verify receipt will respond with

00:15:39.456 --> 00:15:41.326 A:middle
that particular object, the

00:15:41.326 --> 00:15:42.646 A:middle
latest receipt info object.

00:15:43.026 --> 00:15:44.506 A:middle
And inside this object is those

00:15:44.506 --> 00:15:45.736 A:middle
new transactions that have

00:15:45.736 --> 00:15:47.316 A:middle
occurred before this receipt

00:15:47.316 --> 00:15:48.296 A:middle
data was actually generated.

00:15:48.296 --> 00:15:50.306 A:middle
And you can take the expires

00:15:50.336 --> 00:15:52.126 A:middle
date directly from the response

00:15:52.796 --> 00:15:53.936 A:middle
of the latest receipt info

00:15:53.936 --> 00:15:56.556 A:middle
object and update it against the

00:15:56.556 --> 00:15:58.266 A:middle
current user, again extending

00:15:58.266 --> 00:15:59.586 A:middle
them access to that next

00:15:59.586 --> 00:16:00.386 A:middle
subscription window.


00:15:59.586 --> 00:16:00.386 A:middle
subscription window.

00:16:00.756 --> 00:16:02.376 A:middle
And so the user who is on your

00:16:02.376 --> 00:16:03.796 A:middle
website trying to access your

00:16:03.796 --> 00:16:05.666 A:middle
content can now access that next

00:16:05.666 --> 00:16:06.956 A:middle
subscription period all without

00:16:06.956 --> 00:16:08.636 A:middle
the app having to launch with

00:16:08.636 --> 00:16:09.646 A:middle
that new transaction.

00:16:10.276 --> 00:16:12.546 A:middle
If you are using this technique

00:16:12.546 --> 00:16:13.466 A:middle
though status polling it's

00:16:13.466 --> 00:16:14.546 A:middle
important to remember one thing

00:16:14.546 --> 00:16:15.456 A:middle
and that's that when your app

00:16:15.566 --> 00:16:16.946 A:middle
does come back online again

00:16:17.256 --> 00:16:19.076 A:middle
transactions will still appear

00:16:19.316 --> 00:16:20.576 A:middle
through StoreKit in the updated

00:16:20.576 --> 00:16:21.556 A:middle
transactions callback.

00:16:21.556 --> 00:16:22.866 A:middle
And you still should handle

00:16:22.866 --> 00:16:24.966 A:middle
these transactions passing them

00:16:24.966 --> 00:16:25.596 A:middle
up to your server for

00:16:25.686 --> 00:16:27.316 A:middle
verification and finishing them

00:16:27.316 --> 00:16:28.546 A:middle
back down on the user's device

00:16:28.546 --> 00:16:29.676 A:middle
again, even if your server

00:16:29.676 --> 00:16:31.316 A:middle
already knows about them through

00:16:31.426 --> 00:16:33.386 A:middle
a status poll.

00:16:33.586 --> 00:16:34.536 A:middle
We'd encourage you to use that

00:16:34.536 --> 00:16:35.916 A:middle
as an opportunity just to send

00:16:35.916 --> 00:16:37.736 A:middle
up that new latest receipt data

00:16:37.736 --> 00:16:39.146 A:middle
for storage against the current

00:16:39.146 --> 00:16:39.936 A:middle
user on the server.

00:16:44.316 --> 00:16:45.646 A:middle
Now status polling works great

00:16:46.096 --> 00:16:47.116 A:middle
when the user's credit card is

00:16:47.116 --> 00:16:49.206 A:middle
able to be charged, but what if

00:16:50.086 --> 00:16:51.266 A:middle
some subscription period the

00:16:51.266 --> 00:16:52.766 A:middle
user's credit card has some kind

00:16:52.766 --> 00:16:54.036 A:middle
of billing issue and the App

00:16:54.036 --> 00:16:55.246 A:middle
Store isn't able to charge it

00:16:55.776 --> 00:16:57.016 A:middle
for the next subscription

00:16:57.016 --> 00:16:57.366 A:middle
period.

00:16:57.996 --> 00:16:59.346 A:middle
Is this user destined to remain

00:16:59.346 --> 00:17:00.756 A:middle
unsubscribed involuntarily?


00:16:59.346 --> 00:17:00.756 A:middle
unsubscribed involuntarily?

00:17:01.516 --> 00:17:01.936 A:middle
Not at all.

00:17:03.226 --> 00:17:04.445 A:middle
When reacting to billing issues

00:17:04.445 --> 00:17:05.606 A:middle
like this you can do three

00:17:05.685 --> 00:17:06.476 A:middle
simple steps.

00:17:06.476 --> 00:17:08.136 A:middle
Firstly, you can observe that

00:17:08.136 --> 00:17:09.296 A:middle
there's been no renewal

00:17:09.296 --> 00:17:10.796 A:middle
transaction for this particular

00:17:10.796 --> 00:17:12.455 A:middle
user, their subscription has now

00:17:12.455 --> 00:17:12.796 A:middle
lapsed.

00:17:13.816 --> 00:17:15.766 A:middle
Secondly, you can direct that

00:17:15.766 --> 00:17:17.256 A:middle
particular user to go and update

00:17:17.256 --> 00:17:18.546 A:middle
their billing info.

00:17:19.925 --> 00:17:21.955 A:middle
And then the third step, when a

00:17:21.955 --> 00:17:23.546 A:middle
renewal transaction occurs

00:17:23.876 --> 00:17:25.526 A:middle
unblock that user immediately

00:17:25.756 --> 00:17:26.516 A:middle
after it happens.

00:17:27.286 --> 00:17:28.376 A:middle
Now, steps one and two are

00:17:28.826 --> 00:17:29.826 A:middle
pretty straightforward using the

00:17:29.826 --> 00:17:30.996 A:middle
status polling techniques that

00:17:30.996 --> 00:17:32.286 A:middle
we just went through, but step

00:17:32.286 --> 00:17:34.006 A:middle
number three here uses a feature

00:17:34.006 --> 00:17:35.086 A:middle
that we actually launched last

00:17:35.086 --> 00:17:36.566 A:middle
year server-to-server

00:17:36.566 --> 00:17:37.406 A:middle
notifications.

00:17:38.426 --> 00:17:39.526 A:middle
Let's walk through this example,

00:17:39.526 --> 00:17:40.976 A:middle
let's say that one subscription

00:17:40.976 --> 00:17:42.496 A:middle
period the App Store has an

00:17:42.496 --> 00:17:43.966 A:middle
error when trying to charge this

00:17:43.966 --> 00:17:44.696 A:middle
user's credit card.

00:17:45.356 --> 00:17:47.696 A:middle
And then you find out about the

00:17:47.696 --> 00:17:48.706 A:middle
fact that there is no new

00:17:48.806 --> 00:17:49.886 A:middle
renewal transaction for this

00:17:49.886 --> 00:17:50.936 A:middle
user through a status poll.

00:17:52.136 --> 00:17:53.786 A:middle
Your server correctly makes the

00:17:54.326 --> 00:17:55.416 A:middle
calculation that this user is

00:17:55.416 --> 00:17:56.866 A:middle
not a subscriber anymore and so

00:17:56.866 --> 00:17:57.916 A:middle
when the user comes along to

00:17:57.916 --> 00:17:59.046 A:middle
access your service through the

00:17:59.046 --> 00:18:00.396 A:middle
website you give them some


00:17:59.046 --> 00:18:00.396 A:middle
website you give them some

00:18:00.396 --> 00:18:01.866 A:middle
appropriate error message about

00:18:01.866 --> 00:18:02.806 A:middle
the fact that their subscription

00:18:03.106 --> 00:18:03.986 A:middle
wasn't able to be renewed.

00:18:04.666 --> 00:18:05.726 A:middle
And you can direct that user to

00:18:05.726 --> 00:18:07.526 A:middle
go and update their billing info

00:18:07.636 --> 00:18:08.456 A:middle
in the App Store.

00:18:09.476 --> 00:18:10.826 A:middle
Now when the user does update

00:18:10.826 --> 00:18:11.746 A:middle
their billing info, maybe they

00:18:11.746 --> 00:18:12.966 A:middle
just need to update an expiry

00:18:12.966 --> 00:18:14.676 A:middle
date or something, two things

00:18:14.676 --> 00:18:14.986 A:middle
happen.

00:18:15.916 --> 00:18:17.176 A:middle
Firstly, the App Store will

00:18:17.176 --> 00:18:18.866 A:middle
actually immediately charge that

00:18:18.866 --> 00:18:20.286 A:middle
user's credit card and make a

00:18:20.286 --> 00:18:21.276 A:middle
successful transaction.

00:18:21.806 --> 00:18:22.866 A:middle
And when the App Store does do

00:18:22.866 --> 00:18:24.446 A:middle
this the second part of what it

00:18:24.446 --> 00:18:26.016 A:middle
does is it sends your server a

00:18:26.016 --> 00:18:28.956 A:middle
direct HTTP post upon the

00:18:28.956 --> 00:18:29.786 A:middle
successful renewal.

00:18:29.786 --> 00:18:31.576 A:middle
And then the payload of this

00:18:31.636 --> 00:18:33.876 A:middle
post includes the new

00:18:33.876 --> 00:18:35.016 A:middle
transaction info for the

00:18:35.016 --> 00:18:36.026 A:middle
transaction that's just

00:18:36.026 --> 00:18:36.266 A:middle
occurred.

00:18:37.046 --> 00:18:37.906 A:middle
You can use that original

00:18:37.906 --> 00:18:39.546 A:middle
transaction ID field located in

00:18:39.546 --> 00:18:41.426 A:middle
the payload to locate which user

00:18:41.426 --> 00:18:42.506 A:middle
this notification is for.

00:18:43.346 --> 00:18:44.736 A:middle
Once you find out which user

00:18:44.736 --> 00:18:45.746 A:middle
you're talking about, well you

00:18:45.746 --> 00:18:47.376 A:middle
can grab that latest expires

00:18:47.376 --> 00:18:49.006 A:middle
date and update it for this new

00:18:49.006 --> 00:18:51.166 A:middle
user giving them access again to

00:18:51.166 --> 00:18:52.366 A:middle
that next subscription period.

00:18:52.366 --> 00:18:54.586 A:middle
And then the user who's probably

00:18:54.586 --> 00:18:55.756 A:middle
still sitting on your website

00:18:55.756 --> 00:18:57.056 A:middle
trying to get access to your

00:18:57.056 --> 00:18:59.326 A:middle
content will be able to

00:18:59.326 --> 00:19:01.116 A:middle
immediately be unlocked since


00:18:59.326 --> 00:19:01.116 A:middle
immediately be unlocked since

00:19:01.116 --> 00:19:02.886 A:middle
your server received that push

00:19:03.016 --> 00:19:05.716 A:middle
straight from the App Store.

00:19:05.956 --> 00:19:07.416 A:middle
It's really important to unlock

00:19:07.416 --> 00:19:09.076 A:middle
users in a speedy manner when

00:19:09.076 --> 00:19:09.866 A:middle
this sort of thing happens,

00:19:09.866 --> 00:19:10.916 A:middle
especially when they go to all

00:19:10.916 --> 00:19:12.066 A:middle
that effort for updating their

00:19:12.066 --> 00:19:13.866 A:middle
credit card info manually and

00:19:13.866 --> 00:19:14.846 A:middle
waiting for access to the

00:19:14.846 --> 00:19:15.326 A:middle
servers.

00:19:15.626 --> 00:19:16.436 A:middle
But there's one thing to note

00:19:16.436 --> 00:19:17.656 A:middle
here and that's the notification

00:19:17.656 --> 00:19:19.386 A:middle
is only sent if the subscription

00:19:19.386 --> 00:19:20.846 A:middle
actually lapsed like we just

00:19:20.846 --> 00:19:21.166 A:middle
saw.

00:19:22.026 --> 00:19:23.476 A:middle
To discover successful renewal

00:19:23.476 --> 00:19:24.936 A:middle
transactions you still need to

00:19:24.936 --> 00:19:26.036 A:middle
rely on status polling

00:19:26.036 --> 00:19:27.256 A:middle
techniques we just outlined

00:19:27.256 --> 00:19:27.626 A:middle
before.

00:19:28.616 --> 00:19:30.016 A:middle
But it's really easy to set up

00:19:30.016 --> 00:19:30.926 A:middle
to use server-to-server

00:19:30.926 --> 00:19:31.646 A:middle
notifications.

00:19:31.876 --> 00:19:34.096 A:middle
All you do is enter a URL in App

00:19:34.096 --> 00:19:34.506 A:middle
Store Connect.

00:19:35.306 --> 00:19:36.426 A:middle
This is just an endpoint on your

00:19:36.426 --> 00:19:38.146 A:middle
own server and if you enter it

00:19:38.146 --> 00:19:39.746 A:middle
into App Store Connect the App

00:19:39.746 --> 00:19:40.736 A:middle
Store will begin to send your

00:19:40.736 --> 00:19:42.936 A:middle
server HTTPS posts for these

00:19:43.026 --> 00:19:44.056 A:middle
status change events.

00:19:44.466 --> 00:19:45.926 A:middle
And as we saw included in the

00:19:45.926 --> 00:19:47.336 A:middle
post is that latest transaction

00:19:47.376 --> 00:19:49.276 A:middle
info for the transaction that

00:19:49.276 --> 00:19:49.566 A:middle
triggered it.

00:19:50.666 --> 00:19:51.866 A:middle
You do make sure your server is

00:19:51.866 --> 00:19:53.896 A:middle
ATS in order to receive these,

00:19:54.096 --> 00:19:55.186 A:middle
but it's a really simple step

00:19:55.186 --> 00:19:56.656 A:middle
that you can do to give a bunch

00:19:56.656 --> 00:19:57.526 A:middle
of users a much better

00:19:57.526 --> 00:19:57.976 A:middle
experience.


00:20:02.096 --> 00:20:04.276 A:middle
So those are some tips and

00:20:04.276 --> 00:20:05.606 A:middle
tricks around how to build your

00:20:05.606 --> 00:20:07.086 A:middle
app and server architecture.

00:20:07.086 --> 00:20:08.666 A:middle
Let's talk about three tips that

00:20:08.666 --> 00:20:09.926 A:middle
you can use in your in-app

00:20:09.926 --> 00:20:11.526 A:middle
experience to really enhance the

00:20:11.526 --> 00:20:12.456 A:middle
user's experience.

00:20:13.526 --> 00:20:14.906 A:middle
Firstly, we made the assumption

00:20:14.946 --> 00:20:16.726 A:middle
earlier that the user was signed

00:20:16.726 --> 00:20:17.946 A:middle
in to an account on your own

00:20:17.946 --> 00:20:18.556 A:middle
service.

00:20:19.776 --> 00:20:21.666 A:middle
In order to keep track of each

00:20:21.666 --> 00:20:22.896 A:middle
subscription ID you need this

00:20:22.936 --> 00:20:24.736 A:middle
particular user table located on

00:20:24.736 --> 00:20:25.146 A:middle
your server.

00:20:25.746 --> 00:20:26.646 A:middle
Now when it comes to actually

00:20:26.646 --> 00:20:28.156 A:middle
creating accounts we think it's

00:20:28.196 --> 00:20:29.696 A:middle
best to offer in-app purchase

00:20:29.886 --> 00:20:31.606 A:middle
before an account creation step.

00:20:32.666 --> 00:20:33.156 A:middle
Why is that?

00:20:33.156 --> 00:20:34.576 A:middle
Well as the user it's a much

00:20:34.576 --> 00:20:35.576 A:middle
better experience, you can just

00:20:35.716 --> 00:20:36.996 A:middle
open the app for the first time

00:20:36.996 --> 00:20:38.256 A:middle
and buy the subscription

00:20:38.256 --> 00:20:39.326 A:middle
immediately getting access to

00:20:39.326 --> 00:20:40.106 A:middle
the content you're after.

00:20:40.106 --> 00:20:41.746 A:middle
For you it's better because you

00:20:41.746 --> 00:20:43.056 A:middle
get higher conversion rates,

00:20:43.296 --> 00:20:44.196 A:middle
users don't have to go through

00:20:44.236 --> 00:20:45.726 A:middle
funnels of entering emails and

00:20:45.936 --> 00:20:47.086 A:middle
passwords to be able to get

00:20:47.086 --> 00:20:48.066 A:middle
access to giving you money.

00:20:49.316 --> 00:20:50.396 A:middle
Now you can use the techniques

00:20:50.426 --> 00:20:51.836 A:middle
that we just went through by

00:20:51.836 --> 00:20:53.406 A:middle
using an anonymous account in

00:20:53.406 --> 00:20:54.116 A:middle
these instances.

00:20:55.646 --> 00:20:58.156 A:middle
And you can rely on the original

00:20:58.156 --> 00:20:59.636 A:middle
transaction ID if you need to

00:20:59.636 --> 00:21:01.206 A:middle
associate multiple devices.


00:20:59.636 --> 00:21:01.206 A:middle
associate multiple devices.

00:21:02.506 --> 00:21:03.476 A:middle
If you're using anonymous

00:21:03.476 --> 00:21:04.906 A:middle
accounts like this, when it

00:21:04.906 --> 00:21:06.546 A:middle
comes time down the road to

00:21:06.546 --> 00:21:08.126 A:middle
actually give the user an

00:21:08.126 --> 00:21:09.476 A:middle
account creation flow, you can

00:21:09.476 --> 00:21:10.716 A:middle
just simply take them through a

00:21:10.716 --> 00:21:12.176 A:middle
deanonymization step where you

00:21:12.176 --> 00:21:13.956 A:middle
update those email fields and

00:21:13.956 --> 00:21:14.896 A:middle
maybe other personally

00:21:14.896 --> 00:21:16.056 A:middle
identifiable fields.

00:21:16.606 --> 00:21:19.266 A:middle
So that's tip number one.

00:21:19.266 --> 00:21:20.856 A:middle
Tip number two is around selling

00:21:20.856 --> 00:21:21.966 A:middle
your in-app purchase.

00:21:22.296 --> 00:21:23.146 A:middle
When it comes to selling your

00:21:23.146 --> 00:21:24.836 A:middle
subscription, you can use a

00:21:24.926 --> 00:21:25.946 A:middle
feature that we launched last

00:21:25.946 --> 00:21:26.966 A:middle
year Introductory Pricing.

00:21:27.916 --> 00:21:28.946 A:middle
Now there's an important step

00:21:28.946 --> 00:21:30.656 A:middle
with Introductory Pricing which

00:21:30.656 --> 00:21:31.826 A:middle
is that you need to know at

00:21:31.826 --> 00:21:33.166 A:middle
runtime whether or not a user is

00:21:33.166 --> 00:21:34.576 A:middle
actually eligible for an

00:21:34.576 --> 00:21:35.466 A:middle
introductory price.

00:21:35.686 --> 00:21:36.696 A:middle
And the reason you need to know

00:21:36.696 --> 00:21:38.106 A:middle
this is you have to know which

00:21:38.216 --> 00:21:39.636 A:middle
price to render to your user,

00:21:40.096 --> 00:21:41.016 A:middle
whether to render the normal

00:21:41.016 --> 00:21:42.236 A:middle
StoreKit price or the

00:21:42.236 --> 00:21:43.716 A:middle
introductory offer that you want

00:21:43.716 --> 00:21:44.786 A:middle
to offer a user to get them in

00:21:44.786 --> 00:21:45.136 A:middle
the door.

00:21:46.386 --> 00:21:47.576 A:middle
Now you can set yourself up to

00:21:47.576 --> 00:21:48.816 A:middle
actually know this ahead of time

00:21:48.816 --> 00:21:50.176 A:middle
by monitoring the transactions

00:21:50.176 --> 00:21:51.456 A:middle
that are occurring in the

00:21:51.456 --> 00:21:52.626 A:middle
background as they come in.

00:21:53.516 --> 00:21:54.456 A:middle
Let's see how this works.

00:21:54.456 --> 00:21:55.896 A:middle
When you're verifying

00:21:55.896 --> 00:21:57.126 A:middle
transactions like we just saw

00:21:57.126 --> 00:21:58.336 A:middle
earlier keep an eye out for

00:21:58.336 --> 00:21:59.076 A:middle
these two fields.

00:21:59.736 --> 00:22:01.356 A:middle
The is trial period field and


00:21:59.736 --> 00:22:01.356 A:middle
The is trial period field and

00:22:01.516 --> 00:22:03.466 A:middle
the is in intro offer period

00:22:03.726 --> 00:22:03.976 A:middle
field.

00:22:04.556 --> 00:22:05.826 A:middle
If either of these fields are

00:22:05.826 --> 00:22:07.556 A:middle
true that's an indication that

00:22:07.606 --> 00:22:09.446 A:middle
an introductory offer or a free

00:22:09.446 --> 00:22:10.576 A:middle
trial was used for this

00:22:10.616 --> 00:22:11.626 A:middle
particular transaction.

00:22:12.536 --> 00:22:13.686 A:middle
And if it was you should keep

00:22:13.686 --> 00:22:15.506 A:middle
track of the product ID in

00:22:15.506 --> 00:22:17.436 A:middle
question against this current

00:22:17.436 --> 00:22:17.646 A:middle
user.

00:22:17.646 --> 00:22:18.806 A:middle
You might store them in a field

00:22:18.806 --> 00:22:20.566 A:middle
called consumedProductDiscounts.

00:22:21.676 --> 00:22:23.106 A:middle
Now if you're keeping track of

00:22:23.106 --> 00:22:24.756 A:middle
which products were used with

00:22:24.756 --> 00:22:26.216 A:middle
introductory offers, when it

00:22:26.216 --> 00:22:27.856 A:middle
comes time to render the price

00:22:27.856 --> 00:22:29.416 A:middle
of some new subscription product

00:22:29.416 --> 00:22:30.986 A:middle
that you want to show your user

00:22:31.916 --> 00:22:32.816 A:middle
this is how you can do it.

00:22:33.136 --> 00:22:34.266 A:middle
You can take those consumed

00:22:34.316 --> 00:22:36.156 A:middle
product discounts saved against

00:22:36.156 --> 00:22:38.136 A:middle
the current user and execute an

00:22:38.136 --> 00:22:39.426 A:middle
SKProductsRequest with them.

00:22:39.926 --> 00:22:41.046 A:middle
And the reason why is that the

00:22:41.096 --> 00:22:42.676 A:middle
response from SKProductRequest

00:22:42.676 --> 00:22:44.386 A:middle
now in iOS 12 includes the

00:22:44.386 --> 00:22:46.476 A:middle
subscription group identifier so

00:22:46.476 --> 00:22:47.536 A:middle
you know which subscription

00:22:47.536 --> 00:22:48.866 A:middle
group this particular product is

00:22:48.896 --> 00:22:49.136 A:middle
from.

00:22:49.986 --> 00:22:51.406 A:middle
And now armed with this

00:22:51.406 --> 00:22:52.586 A:middle
subscription group identifier

00:22:52.586 --> 00:22:54.096 A:middle
you can keep track of that in a

00:22:54.166 --> 00:22:56.516 A:middle
set of consumed group discounts

00:22:56.676 --> 00:22:57.556 A:middle
for this particular user.

00:22:57.826 --> 00:22:59.016 A:middle
So you know which subscription

00:22:59.016 --> 00:23:01.056 A:middle
groups this user has used offers


00:22:59.016 --> 00:23:01.056 A:middle
groups this user has used offers

00:23:01.106 --> 00:23:01.356 A:middle
for.

00:23:02.866 --> 00:23:03.776 A:middle
Now when you want to render the

00:23:03.776 --> 00:23:05.306 A:middle
price string of say product A it

00:23:06.136 --> 00:23:07.196 A:middle
becomes a simpler check.

00:23:07.606 --> 00:23:08.976 A:middle
You can check to see if this

00:23:08.976 --> 00:23:10.616 A:middle
user's list of consumed group

00:23:10.616 --> 00:23:12.316 A:middle
discounts contains the group

00:23:12.316 --> 00:23:13.346 A:middle
identifier for the one you want

00:23:13.346 --> 00:23:14.196 A:middle
to sell them, in this case

00:23:14.266 --> 00:23:14.646 A:middle
product A.

00:23:14.646 --> 00:23:17.196 A:middle
And if it does, that's an

00:23:17.196 --> 00:23:18.406 A:middle
indication that this user has

00:23:18.406 --> 00:23:19.576 A:middle
actually used an introductory

00:23:19.576 --> 00:23:20.876 A:middle
offer here before, so you can

00:23:20.876 --> 00:23:22.666 A:middle
render the normal price string

00:23:22.856 --> 00:23:23.676 A:middle
to this particular user.

00:23:24.286 --> 00:23:25.776 A:middle
But if not, they're still

00:23:25.776 --> 00:23:27.016 A:middle
eligible for that introductory

00:23:27.016 --> 00:23:28.156 A:middle
offer so you can use that

00:23:28.156 --> 00:23:29.976 A:middle
introductory price located on

00:23:29.976 --> 00:23:31.036 A:middle
the SKProductObject.

00:23:31.566 --> 00:23:33.666 A:middle
Now when rendering the price

00:23:33.666 --> 00:23:35.306 A:middle
string nothing's really changed

00:23:35.306 --> 00:23:37.206 A:middle
here it's the same techniques

00:23:37.206 --> 00:23:38.366 A:middle
that you use for rendering any

00:23:38.366 --> 00:23:39.676 A:middle
in-app purchase and I'm not

00:23:39.676 --> 00:23:40.546 A:middle
going to go into too much more

00:23:40.546 --> 00:23:41.776 A:middle
detail here, but I'd encourage

00:23:41.776 --> 00:23:42.746 A:middle
you to check out the video of

00:23:42.746 --> 00:23:44.086 A:middle
the session just before this one

00:23:44.316 --> 00:23:45.036 A:middle
where they talked about

00:23:45.036 --> 00:23:46.356 A:middle
rendering these price strings a

00:23:46.356 --> 00:23:47.276 A:middle
little more dynamically.

00:23:48.176 --> 00:23:49.106 A:middle
For more information about

00:23:49.186 --> 00:23:50.376 A:middle
setting up introductory offers

00:23:50.376 --> 00:23:51.536 A:middle
I'd also recommend you go to the

00:23:51.536 --> 00:23:52.616 A:middle
What's New in App Store Connect

00:23:52.616 --> 00:23:54.586 A:middle
session on Wednesday at 5 p.m.

00:23:54.586 --> 00:23:55.166 A:middle
in hall three.

00:23:55.766 --> 00:23:58.296 A:middle
So that's tip number two around

00:23:58.296 --> 00:23:59.056 A:middle
introductory pricing.

00:23:59.056 --> 00:24:00.616 A:middle
The third tip here is around


00:23:59.056 --> 00:24:00.616 A:middle
The third tip here is around

00:24:00.616 --> 00:24:01.626 A:middle
subscription management.

00:24:03.046 --> 00:24:04.406 A:middle
You can offer the user upgrades

00:24:04.406 --> 00:24:05.376 A:middle
and downgrades between

00:24:05.376 --> 00:24:07.286 A:middle
subscription tiers right in your

00:24:07.286 --> 00:24:07.676 A:middle
app's UI.

00:24:08.516 --> 00:24:09.656 A:middle
And to do this you can actually

00:24:09.656 --> 00:24:10.796 A:middle
treat it just like selling an

00:24:10.796 --> 00:24:11.686 A:middle
initial subscription.

00:24:12.326 --> 00:24:14.646 A:middle
Now if the subscription you're

00:24:14.646 --> 00:24:15.996 A:middle
selling the user is part of the

00:24:15.996 --> 00:24:17.456 A:middle
same subscription group, so it's

00:24:17.456 --> 00:24:18.786 A:middle
a different tier than the one

00:24:18.786 --> 00:24:19.846 A:middle
the user has already subscribed

00:24:19.916 --> 00:24:22.656 A:middle
to you can basically just create

00:24:22.746 --> 00:24:23.966 A:middle
an SKPayment just like you would

00:24:23.966 --> 00:24:24.906 A:middle
if you were selling them an

00:24:24.906 --> 00:24:25.706 A:middle
initial subscription.

00:24:26.026 --> 00:24:27.306 A:middle
And when you do this StoreKit

00:24:27.306 --> 00:24:28.336 A:middle
actually handles the fact that

00:24:28.336 --> 00:24:29.786 A:middle
it's an upgrade or downgrade for

00:24:29.786 --> 00:24:29.966 A:middle
you.

00:24:30.636 --> 00:24:31.846 A:middle
So you don't have to worry about

00:24:31.846 --> 00:24:32.866 A:middle
that user being subscribed

00:24:32.866 --> 00:24:33.276 A:middle
twice.

00:24:34.346 --> 00:24:35.576 A:middle
Now if you don't want to provide

00:24:35.576 --> 00:24:37.246 A:middle
your own UI for upgrades and

00:24:37.246 --> 00:24:38.626 A:middle
downgrades in your app you can

00:24:38.626 --> 00:24:39.976 A:middle
also just provide a link out to

00:24:39.976 --> 00:24:41.436 A:middle
the App Store subscription

00:24:41.436 --> 00:24:42.106 A:middle
management screen.

00:24:42.106 --> 00:24:43.356 A:middle
We provide a link for you to be

00:24:43.356 --> 00:24:44.356 A:middle
able to get to this screen

00:24:44.476 --> 00:24:46.276 A:middle
directly from your app and here

00:24:46.276 --> 00:24:47.676 A:middle
the user can upgrade, downgrade

00:24:47.676 --> 00:24:48.486 A:middle
or even cancel their

00:24:48.486 --> 00:24:49.006 A:middle
subscription.

00:24:50.276 --> 00:24:51.546 A:middle
Now your app is often the first

00:24:51.636 --> 00:24:52.676 A:middle
place a user will go for

00:24:52.676 --> 00:24:53.786 A:middle
subscription management, to be

00:24:53.786 --> 00:24:54.856 A:middle
able to upgrade, downgrade or

00:24:54.856 --> 00:24:55.226 A:middle
cancel.

00:24:55.226 --> 00:24:56.296 A:middle
So it's a really good idea to

00:24:56.296 --> 00:24:57.836 A:middle
give some kind of link maybe in

00:24:57.836 --> 00:24:59.486 A:middle
your app's settings for a user

00:24:59.486 --> 00:25:00.426 A:middle
to be able to do this.


00:24:59.486 --> 00:25:00.426 A:middle
to be able to do this.

00:25:01.286 --> 00:25:02.416 A:middle
To actually get to this screen

00:25:02.416 --> 00:25:03.546 A:middle
there's a link available on our

00:25:03.546 --> 00:25:04.676 A:middle
In-App Purchase Programming

00:25:04.676 --> 00:25:06.746 A:middle
Guide and here it is if you

00:25:06.746 --> 00:25:07.666 A:middle
enjoy writing down links.

00:25:09.106 --> 00:25:10.016 A:middle
So these are some simple

00:25:10.016 --> 00:25:11.716 A:middle
techniques you can implement in

00:25:11.716 --> 00:25:12.686 A:middle
your app to give a user a

00:25:12.686 --> 00:25:14.126 A:middle
pleasant experience using

00:25:14.126 --> 00:25:14.766 A:middle
subscriptions.

00:25:14.766 --> 00:25:15.706 A:middle
Next, I'm going to hand it over

00:25:15.706 --> 00:25:16.896 A:middle
to my colleague Michael who's

00:25:16.896 --> 00:25:17.836 A:middle
going to go over some great

00:25:17.836 --> 00:25:19.206 A:middle
techniques for reducing your

00:25:19.206 --> 00:25:19.826 A:middle
subscriber churn.

00:25:19.826 --> 00:25:19.976 A:middle
Thanks.

00:25:20.516 --> 00:25:26.500 A:middle
[ Applause ]

00:25:30.046 --> 00:25:31.136 A:middle
&gt;&gt; Good afternoon, my name is

00:25:31.136 --> 00:25:32.226 A:middle
Michael Gargas and I'm a

00:25:32.276 --> 00:25:33.606 A:middle
technical advocate on the App

00:25:33.606 --> 00:25:34.526 A:middle
Store operations team.

00:25:35.496 --> 00:25:36.716 A:middle
Today I want to talk about

00:25:36.766 --> 00:25:38.586 A:middle
reducing subscriber churn inside

00:25:38.586 --> 00:25:40.336 A:middle
your applications by using some

00:25:40.336 --> 00:25:41.796 A:middle
of the tactics and methods that

00:25:41.796 --> 00:25:43.426 A:middle
Pete just walked you through.

00:25:44.536 --> 00:25:46.176 A:middle
Today we'll cover involuntary

00:25:46.176 --> 00:25:48.006 A:middle
churn and voluntary churn, the

00:25:48.006 --> 00:25:49.116 A:middle
two types of churn you'll see

00:25:49.116 --> 00:25:50.046 A:middle
inside of your subscription

00:25:50.046 --> 00:25:51.986 A:middle
applications, as well as some

00:25:51.986 --> 00:25:53.116 A:middle
ways to win back those

00:25:53.116 --> 00:25:54.496 A:middle
subscribers that you potentially

00:25:54.496 --> 00:25:56.566 A:middle
may have lost or will lose.

00:25:57.436 --> 00:25:59.536 A:middle
First, let's talk about

00:25:59.536 --> 00:26:00.326 A:middle
involuntary churn.


00:25:59.536 --> 00:26:00.326 A:middle
involuntary churn.

00:26:01.446 --> 00:26:03.326 A:middle
Involuntary churn is the loss of

00:26:03.326 --> 00:26:04.756 A:middle
a subscriber due to a failed

00:26:04.756 --> 00:26:07.466 A:middle
payment or billing issue on the

00:26:08.176 --> 00:26:08.496 A:middle
platform.

00:26:08.496 --> 00:26:10.206 A:middle
Now last year at Dub Dub DC we

00:26:10.396 --> 00:26:11.836 A:middle
walked you through what we're

00:26:11.836 --> 00:26:13.186 A:middle
doing in order to minimize

00:26:13.186 --> 00:26:14.826 A:middle
involuntary churn inside of your

00:26:14.826 --> 00:26:15.486 A:middle
applications.

00:26:16.306 --> 00:26:17.726 A:middle
We announced our updated Billing

00:26:17.726 --> 00:26:19.756 A:middle
Retry service where we expanded

00:26:19.756 --> 00:26:21.596 A:middle
our retry duration from 24 hours

00:26:21.596 --> 00:26:22.996 A:middle
to up to 60 days.

00:26:24.046 --> 00:26:25.646 A:middle
We also implemented new retry

00:26:25.646 --> 00:26:27.476 A:middle
strategies and we tuned them

00:26:27.746 --> 00:26:29.346 A:middle
over time to recover more and

00:26:29.346 --> 00:26:30.606 A:middle
more of your subscriptions.

00:26:31.166 --> 00:26:34.666 A:middle
A date to remember is July 13th,

00:26:34.666 --> 00:26:37.146 A:middle
2017 because this is the day

00:26:37.316 --> 00:26:39.096 A:middle
that Apple actively started

00:26:39.566 --> 00:26:40.816 A:middle
recovering subscriptions for

00:26:40.816 --> 00:26:40.996 A:middle
you.

00:26:41.596 --> 00:26:45.186 A:middle
If we look at the performance of

00:26:45.186 --> 00:26:47.106 A:middle
Billing Retry since launch we

00:26:47.106 --> 00:26:48.456 A:middle
can see that our recovery rate

00:26:48.906 --> 00:26:49.786 A:middle
has more than doubled.

00:26:49.786 --> 00:26:52.706 A:middle
And when we look at involuntary

00:26:52.706 --> 00:26:54.946 A:middle
churn we've cut this by over 2%

00:26:54.946 --> 00:26:55.956 A:middle
platform-wide.

00:26:56.516 --> 00:27:02.546 A:middle
[ Applause ]


00:26:56.516 --> 00:27:02.546 A:middle
[ Applause ]

00:27:03.046 --> 00:27:04.276 A:middle
Now if we look at how our tuning

00:27:04.516 --> 00:27:05.876 A:middle
has impacted the recovery of

00:27:05.876 --> 00:27:07.966 A:middle
subscriptions we can see that

00:27:08.006 --> 00:27:09.636 A:middle
quarter over quarter we've been

00:27:09.636 --> 00:27:11.416 A:middle
able to continue to recover more

00:27:11.416 --> 00:27:13.146 A:middle
and more of your subscriptions.

00:27:13.706 --> 00:27:17.456 A:middle
Now the net result of this has

00:27:17.456 --> 00:27:19.766 A:middle
been 12 million of your

00:27:19.766 --> 00:27:21.076 A:middle
subscriptions recovered since

00:27:21.116 --> 00:27:21.966 A:middle
the launch of Billing Retry.

00:27:22.516 --> 00:27:26.636 A:middle
[ Applause ]

00:27:27.136 --> 00:27:28.436 A:middle
So that's what Apple's doing to

00:27:28.436 --> 00:27:29.756 A:middle
minimize involuntary churn for

00:27:29.756 --> 00:27:29.986 A:middle
you.

00:27:30.846 --> 00:27:31.986 A:middle
But there's also some tactics

00:27:32.056 --> 00:27:33.526 A:middle
that you as a developer can do

00:27:33.606 --> 00:27:35.046 A:middle
to minimize voluntary churn

00:27:35.366 --> 00:27:36.636 A:middle
inside of your subscription

00:27:36.636 --> 00:27:37.216 A:middle
applications.

00:27:38.386 --> 00:27:39.626 A:middle
You can leverage some of the

00:27:39.686 --> 00:27:41.136 A:middle
subscription specific receipt

00:27:41.176 --> 00:27:42.236 A:middle
fields that Pete mentioned

00:27:42.236 --> 00:27:42.596 A:middle
earlier.

00:27:43.516 --> 00:27:44.926 A:middle
You can implement grace periods

00:27:45.066 --> 00:27:47.436 A:middle
and during that time you can

00:27:47.586 --> 00:27:49.236 A:middle
deploy some effective customer

00:27:49.236 --> 00:27:49.716 A:middle
messaging.

00:27:51.106 --> 00:27:52.216 A:middle
So let's take a look at an

00:27:52.216 --> 00:27:53.226 A:middle
example subscription.

00:27:54.356 --> 00:27:55.656 A:middle
Here we can see that our

00:27:55.656 --> 00:27:57.406 A:middle
subscriber was set to renew on

00:27:57.406 --> 00:28:00.206 A:middle
April 26th, however, they


00:27:57.406 --> 00:28:00.206 A:middle
April 26th, however, they

00:28:00.206 --> 00:28:01.266 A:middle
encountered a billing issue.

00:28:02.506 --> 00:28:04.196 A:middle
So in order to let you know that

00:28:04.196 --> 00:28:06.126 A:middle
Apple is actively attempting to

00:28:06.126 --> 00:28:07.756 A:middle
collect funds from that user via

00:28:07.756 --> 00:28:10.066 A:middle
the Billing Retry service we are

00:28:10.066 --> 00:28:11.166 A:middle
going to surface a field in the

00:28:11.166 --> 00:28:14.346 A:middle
JSON response aptly titled is in

00:28:14.346 --> 00:28:15.346 A:middle
billing retry period.

00:28:16.046 --> 00:28:18.226 A:middle
A value of one signifying that

00:28:18.226 --> 00:28:19.316 A:middle
we're attempting to collect

00:28:19.316 --> 00:28:20.756 A:middle
funds for that subscriber.

00:28:21.436 --> 00:28:24.576 A:middle
If we go back to our example of

00:28:24.576 --> 00:28:25.836 A:middle
subscription you can see that

00:28:25.836 --> 00:28:27.126 A:middle
this has been added to JSON

00:28:27.126 --> 00:28:27.576 A:middle
response.

00:28:27.576 --> 00:28:29.716 A:middle
And when you see this in

00:28:29.716 --> 00:28:30.986 A:middle
conjunction with the expires

00:28:30.986 --> 00:28:32.946 A:middle
date this is your signal as a

00:28:32.946 --> 00:28:34.826 A:middle
developer to implement what we

00:28:34.826 --> 00:28:37.206 A:middle
call a grace period.

00:28:37.306 --> 00:28:38.416 A:middle
You may ask yourself what is a

00:28:38.416 --> 00:28:38.976 A:middle
grace period.

00:28:42.416 --> 00:28:44.116 A:middle
A grace period is free

00:28:44.176 --> 00:28:46.016 A:middle
subscription access while in a

00:28:46.016 --> 00:28:47.756 A:middle
billing retry state, however

00:28:47.906 --> 00:28:49.456 A:middle
it's before you have lost that

00:28:49.456 --> 00:28:50.586 A:middle
subscriber, before they've

00:28:50.586 --> 00:28:51.386 A:middle
churned out.

00:28:52.066 --> 00:28:53.426 A:middle
The goal of the grace period is

00:28:53.426 --> 00:28:54.486 A:middle
to improve recovery.

00:28:54.486 --> 00:28:56.826 A:middle
So let's take a look at how we

00:28:56.826 --> 00:28:58.176 A:middle
can do that leveraging some of

00:28:58.176 --> 00:28:59.286 A:middle
the information in the receipt

00:28:59.286 --> 00:28:59.676 A:middle
response.


00:29:00.876 --> 00:29:02.116 A:middle
If we flip back to our example

00:29:02.116 --> 00:29:04.076 A:middle
subscription you can see that

00:29:04.076 --> 00:29:05.206 A:middle
our subscriber is in a billing

00:29:05.206 --> 00:29:06.956 A:middle
retry state and was set to renew

00:29:07.006 --> 00:29:08.026 A:middle
on April 26th.

00:29:09.246 --> 00:29:10.576 A:middle
Here we want to add some

00:29:10.646 --> 00:29:12.036 A:middle
server-side logic to use that

00:29:12.036 --> 00:29:14.296 A:middle
expires date field and the is in

00:29:14.296 --> 00:29:16.446 A:middle
billing retry period in order to

00:29:16.446 --> 00:29:18.026 A:middle
add a period of time, in this

00:29:18.026 --> 00:29:20.326 A:middle
example three days where that

00:29:20.326 --> 00:29:21.516 A:middle
user will continue to have

00:29:21.516 --> 00:29:23.086 A:middle
access to the service and

00:29:23.086 --> 00:29:25.346 A:middle
technically stay subscribed.

00:29:26.796 --> 00:29:27.966 A:middle
Now why would you do this?

00:29:28.436 --> 00:29:30.666 A:middle
Well it's an opportune time to

00:29:30.666 --> 00:29:32.236 A:middle
deploy some effective customer

00:29:32.236 --> 00:29:33.986 A:middle
messaging to contextually

00:29:33.986 --> 00:29:34.866 A:middle
communicate with your

00:29:34.866 --> 00:29:36.626 A:middle
subscribers and let them know

00:29:36.626 --> 00:29:37.956 A:middle
that there may be an issue with

00:29:37.956 --> 00:29:38.716 A:middle
their subscription.

00:29:39.836 --> 00:29:41.016 A:middle
You may want to do things like

00:29:41.166 --> 00:29:42.856 A:middle
ask them to update their payment

00:29:42.856 --> 00:29:45.336 A:middle
method or have them restate the

00:29:45.336 --> 00:29:46.526 A:middle
value proposition of the

00:29:46.526 --> 00:29:47.646 A:middle
subscription offering that

00:29:47.646 --> 00:29:48.456 A:middle
they're subscribed to.

00:29:49.336 --> 00:29:50.826 A:middle
And during this time you can

00:29:50.826 --> 00:29:52.376 A:middle
offer limited service as well,

00:29:52.676 --> 00:29:54.166 A:middle
such as a browse but not watch

00:29:54.166 --> 00:29:55.606 A:middle
experience in an entertainment

00:29:56.236 --> 00:29:56.326 A:middle
app.

00:29:57.956 --> 00:29:59.446 A:middle
Here we can see Peak, a

00:29:59.496 --> 00:30:00.586 A:middle
subscription developer on the


00:29:59.496 --> 00:30:00.586 A:middle
subscription developer on the

00:30:00.586 --> 00:30:00.886 A:middle
App Store.

00:30:02.496 --> 00:30:03.846 A:middle
Peak is leveraging the Billing

00:30:03.846 --> 00:30:05.886 A:middle
Retry status fields in order to

00:30:05.926 --> 00:30:07.506 A:middle
surface a contextual message to

00:30:07.506 --> 00:30:09.236 A:middle
their subscribers letting them

00:30:09.236 --> 00:30:10.386 A:middle
know that there's been an issue

00:30:10.386 --> 00:30:11.256 A:middle
with their subscription.

00:30:12.476 --> 00:30:14.416 A:middle
When engaged upon they're taken

00:30:14.416 --> 00:30:16.026 A:middle
to an additional screen which

00:30:16.026 --> 00:30:17.626 A:middle
clearly states what the issue is

00:30:18.126 --> 00:30:19.806 A:middle
and how they can resolve it.

00:30:21.116 --> 00:30:22.886 A:middle
But it would be really effective

00:30:23.116 --> 00:30:24.506 A:middle
if from this screen you could

00:30:24.506 --> 00:30:26.166 A:middle
drive that user or subscriber

00:30:26.426 --> 00:30:27.876 A:middle
directly to our systems to

00:30:27.876 --> 00:30:29.046 A:middle
update their payment details.

00:30:29.606 --> 00:30:32.056 A:middle
So I'm excited today to announce

00:30:32.056 --> 00:30:33.806 A:middle
that we have two new URLs coming

00:30:33.806 --> 00:30:35.396 A:middle
shortly after Dub Dub DC this

00:30:35.396 --> 00:30:37.346 A:middle
year, one to drive users

00:30:37.346 --> 00:30:38.616 A:middle
directly to update their billing

00:30:38.616 --> 00:30:40.166 A:middle
information and the others to

00:30:40.166 --> 00:30:41.016 A:middle
take them to manage their

00:30:41.016 --> 00:30:42.836 A:middle
subscriptions as Pete alluded to

00:30:42.836 --> 00:30:44.536 A:middle
earlier for upgrades, downgrades

00:30:44.536 --> 00:30:44.976 A:middle
and crossgrades.

00:30:45.516 --> 00:30:48.500 A:middle
[ Applause ]

00:30:51.106 --> 00:30:52.306 A:middle
With that being said, a lot of

00:30:52.306 --> 00:30:54.016 A:middle
developers will ask well when

00:30:54.106 --> 00:30:55.386 A:middle
are we seeing our users be

00:30:55.386 --> 00:30:55.826 A:middle
recovered.

00:30:56.906 --> 00:30:58.446 A:middle
And on average we see the

00:30:58.446 --> 00:30:59.876 A:middle
majority of users recovered

00:30:59.876 --> 00:31:01.536 A:middle
within the first seven days of


00:30:59.876 --> 00:31:01.536 A:middle
within the first seven days of

00:31:01.536 --> 00:31:03.016 A:middle
entering a Billing Retry state

00:31:03.016 --> 00:31:03.656 A:middle
on the platform.

00:31:03.656 --> 00:31:07.406 A:middle
This might be a time to offer a

00:31:07.406 --> 00:31:09.466 A:middle
full access grace period because

00:31:09.466 --> 00:31:10.416 A:middle
we see a lot of users

00:31:10.516 --> 00:31:12.626 A:middle
self-recovering during this

00:31:13.696 --> 00:31:13.806 A:middle
time.

00:31:14.026 --> 00:31:15.176 A:middle
You may want to deploy that

00:31:15.176 --> 00:31:16.496 A:middle
customer messaging towards the

00:31:16.496 --> 00:31:18.006 A:middle
tail end of this to bring in

00:31:18.006 --> 00:31:19.066 A:middle
some of those subscribers that

00:31:19.066 --> 00:31:20.196 A:middle
might've taken longer to come

00:31:20.196 --> 00:31:20.976 A:middle
back into your application.

00:31:25.156 --> 00:31:26.406 A:middle
Let's flip back to our example

00:31:26.516 --> 00:31:26.916 A:middle
subscription.

00:31:27.356 --> 00:31:28.756 A:middle
What happens if this is

00:31:28.756 --> 00:31:30.016 A:middle
effective and we're able to

00:31:30.016 --> 00:31:31.096 A:middle
recover these customers?

00:31:31.606 --> 00:31:34.236 A:middle
When a retry attempt is

00:31:34.236 --> 00:31:36.726 A:middle
successful the date of the retry

00:31:36.726 --> 00:31:38.276 A:middle
or recovery becomes the new

00:31:38.276 --> 00:31:39.646 A:middle
subscription anniversary date

00:31:39.646 --> 00:31:41.306 A:middle
moving forward and this will be

00:31:41.306 --> 00:31:43.196 A:middle
reflected in JSON response when

00:31:43.196 --> 00:31:44.376 A:middle
validating that successful

00:31:44.376 --> 00:31:46.466 A:middle
transaction and finishing it.

00:31:47.676 --> 00:31:48.846 A:middle
But we're not going to stop

00:31:48.846 --> 00:31:50.756 A:middle
there we're also going to deploy

00:31:50.756 --> 00:31:51.646 A:middle
our server-to-server

00:31:51.646 --> 00:31:53.266 A:middle
notifications so that you can

00:31:53.266 --> 00:31:55.226 A:middle
immediately unlock access on all

00:31:55.226 --> 00:31:57.206 A:middle
platforms and close the loop

00:31:57.206 --> 00:31:58.566 A:middle
with your customer letting them

00:31:58.566 --> 00:32:00.116 A:middle
know hey you're all set.


00:31:58.566 --> 00:32:00.116 A:middle
know hey you're all set.

00:32:00.606 --> 00:32:03.886 A:middle
So that's involuntary churn

00:32:04.216 --> 00:32:05.196 A:middle
where the customer didn't

00:32:05.196 --> 00:32:06.306 A:middle
technically make a choice to

00:32:06.306 --> 00:32:07.456 A:middle
unsubscribe from your

00:32:07.456 --> 00:32:07.926 A:middle
application.

00:32:08.486 --> 00:32:10.906 A:middle
But what is voluntary churn?

00:32:12.086 --> 00:32:14.256 A:middle
Voluntary churn is the loss of a

00:32:14.256 --> 00:32:16.326 A:middle
subscriber due to customer

00:32:16.326 --> 00:32:18.916 A:middle
choice, either cancellation or

00:32:18.916 --> 00:32:19.676 A:middle
refund requests.

00:32:20.776 --> 00:32:23.176 A:middle
To be clear, this user actively

00:32:23.176 --> 00:32:24.466 A:middle
made the choice to leave your

00:32:24.516 --> 00:32:25.346 A:middle
subscription offering.

00:32:26.876 --> 00:32:28.446 A:middle
So what can you do as a

00:32:28.446 --> 00:32:30.576 A:middle
developer to minimize voluntary

00:32:30.576 --> 00:32:31.426 A:middle
churn inside of your

00:32:31.426 --> 00:32:31.946 A:middle
applications?

00:32:33.366 --> 00:32:34.476 A:middle
Well Pete walked you through how

00:32:34.476 --> 00:32:35.766 A:middle
to status poll earlier and you

00:32:35.766 --> 00:32:37.096 A:middle
can implement that to get some

00:32:37.256 --> 00:32:39.016 A:middle
key subscription details about

00:32:39.016 --> 00:32:41.296 A:middle
your users and when you get that

00:32:41.296 --> 00:32:42.726 A:middle
information you can use it to

00:32:42.726 --> 00:32:44.476 A:middle
offer attractive alternative

00:32:44.526 --> 00:32:45.936 A:middle
subscription offerings to

00:32:45.936 --> 00:32:46.976 A:middle
potentially save that user.

00:32:51.156 --> 00:32:52.556 A:middle
So let's talk a little bit more

00:32:52.556 --> 00:32:53.536 A:middle
about status polling.

00:32:54.086 --> 00:32:55.976 A:middle
With the release of

00:32:55.976 --> 00:32:57.346 A:middle
server-to-server notifications

00:32:57.816 --> 00:32:59.336 A:middle
there's really only two key

00:32:59.336 --> 00:33:00.606 A:middle
reasons that you still need to


00:32:59.336 --> 00:33:00.606 A:middle
reasons that you still need to

00:33:00.706 --> 00:33:01.906 A:middle
status poll.

00:33:02.936 --> 00:33:05.396 A:middle
The first is understanding will

00:33:05.396 --> 00:33:07.076 A:middle
my subscriber churn in the

00:33:07.076 --> 00:33:08.556 A:middle
subsequent subscription period

00:33:09.576 --> 00:33:11.156 A:middle
and the second being has my

00:33:11.156 --> 00:33:12.026 A:middle
subscriber renewed.

00:33:12.576 --> 00:33:16.276 A:middle
We often get asked when should I

00:33:16.276 --> 00:33:17.736 A:middle
status poll as a developer, when

00:33:17.736 --> 00:33:18.776 A:middle
should I try to catch those

00:33:18.776 --> 00:33:20.896 A:middle
users and see their subscription

00:33:20.896 --> 00:33:21.526 A:middle
state changes.

00:33:23.276 --> 00:33:24.966 A:middle
The most effective times that we

00:33:25.036 --> 00:33:27.066 A:middle
see are doing that status poll

00:33:27.066 --> 00:33:28.416 A:middle
at the beginning or end of a

00:33:28.486 --> 00:33:29.346 A:middle
subscription period.

00:33:30.156 --> 00:33:31.646 A:middle
By deploying this responsibly

00:33:32.396 --> 00:33:33.316 A:middle
you're most likely going to

00:33:33.346 --> 00:33:35.656 A:middle
catch most users that may want

00:33:35.656 --> 00:33:37.016 A:middle
to voluntarily churn from your

00:33:37.016 --> 00:33:37.836 A:middle
subscription offering.

00:33:40.596 --> 00:33:42.256 A:middle
But when you status poll you'll

00:33:42.256 --> 00:33:43.456 A:middle
also get access to some

00:33:43.456 --> 00:33:45.086 A:middle
additional subscriber status

00:33:45.086 --> 00:33:45.406 A:middle
fields.

00:33:45.886 --> 00:33:47.906 A:middle
And you may want to take those

00:33:47.906 --> 00:33:49.886 A:middle
fields and save the decoded JSON

00:33:49.886 --> 00:33:51.316 A:middle
response from the verify receipt

00:33:51.346 --> 00:33:53.566 A:middle
call in the user tables on your

00:33:53.566 --> 00:33:54.086 A:middle
databases.

00:33:55.496 --> 00:33:57.146 A:middle
Or alternatively, you can parse

00:33:57.146 --> 00:33:59.456 A:middle
out specific fields such as the

00:33:59.456 --> 00:34:00.906 A:middle
Billing Retry Status in order to


00:33:59.456 --> 00:34:00.906 A:middle
Billing Retry Status in order to

00:34:00.906 --> 00:34:02.856 A:middle
segment your customers and maybe

00:34:02.856 --> 00:34:03.996 A:middle
understand those that are in a

00:34:03.996 --> 00:34:05.976 A:middle
retry state and those that are

00:34:06.566 --> 00:34:06.666 A:middle
not.

00:34:07.656 --> 00:34:09.436 A:middle
But the signal to understand if

00:34:09.436 --> 00:34:10.666 A:middle
a customer will voluntarily

00:34:10.666 --> 00:34:12.466 A:middle
churn is shown via a field

00:34:13.386 --> 00:34:17.065 A:middle
called auto renew status.

00:34:17.216 --> 00:34:18.846 A:middle
Auto renew status will let you

00:34:18.846 --> 00:34:20.295 A:middle
know with a value of one that

00:34:20.295 --> 00:34:22.045 A:middle
that subscriber will return in

00:34:22.045 --> 00:34:23.176 A:middle
the subsequent subscription

00:34:23.176 --> 00:34:25.396 A:middle
period and a value of zero

00:34:25.596 --> 00:34:26.755 A:middle
letting you know that they will

00:34:26.755 --> 00:34:28.426 A:middle
voluntarily churn at their next

00:34:28.426 --> 00:34:29.596 A:middle
subscription anniversary date.

00:34:30.106 --> 00:34:32.676 A:middle
Let's see what this would look

00:34:32.676 --> 00:34:33.416 A:middle
like in our example

00:34:33.416 --> 00:34:33.985 A:middle
subscription.

00:34:35.436 --> 00:34:36.835 A:middle
Here we have a subscriber

00:34:37.315 --> 00:34:39.266 A:middle
purchased on March 26th and

00:34:40.376 --> 00:34:42.226 A:middle
they've made the choice to

00:34:42.226 --> 00:34:43.505 A:middle
disable auto renew via the

00:34:43.505 --> 00:34:44.686 A:middle
manage subscription setting

00:34:44.686 --> 00:34:45.005 A:middle
screen.

00:34:45.606 --> 00:34:48.856 A:middle
Now coincidentally, we status

00:34:48.856 --> 00:34:49.936 A:middle
polled shortly after this

00:34:49.936 --> 00:34:52.176 A:middle
happened and we were able to see

00:34:52.636 --> 00:34:54.416 A:middle
via the receipt response that

00:34:54.416 --> 00:34:55.516 A:middle
the auto renew status has

00:34:55.516 --> 00:34:56.326 A:middle
changed to zero.

00:34:57.016 --> 00:34:59.806 A:middle
It's at this point that you can

00:34:59.806 --> 00:35:01.386 A:middle
update your user tables on your


00:34:59.806 --> 00:35:01.386 A:middle
update your user tables on your

00:35:01.386 --> 00:35:03.676 A:middle
database or on your server and

00:35:03.726 --> 00:35:04.876 A:middle
segment that customer as a

00:35:04.876 --> 00:35:06.716 A:middle
potential voluntary churning

00:35:06.766 --> 00:35:07.146 A:middle
customer.

00:35:07.716 --> 00:35:11.096 A:middle
If we go back to the example

00:35:11.136 --> 00:35:12.816 A:middle
subscription we've status

00:35:12.816 --> 00:35:15.426 A:middle
polled, we've captured this

00:35:15.476 --> 00:35:16.976 A:middle
customer might leave, so what

00:35:16.976 --> 00:35:17.476 A:middle
should we do?

00:35:18.726 --> 00:35:19.926 A:middle
As a developer this is your

00:35:19.926 --> 00:35:21.196 A:middle
opportunity to present an

00:35:21.196 --> 00:35:22.646 A:middle
attractive downgrade offer

00:35:22.646 --> 00:35:23.666 A:middle
potentially in the same

00:35:23.666 --> 00:35:24.686 A:middle
subscription group.

00:35:25.536 --> 00:35:27.476 A:middle
Here we can see Peak trying to

00:35:27.646 --> 00:35:29.006 A:middle
save that user by potentially

00:35:29.006 --> 00:35:30.756 A:middle
having them take a lesser term

00:35:30.756 --> 00:35:32.606 A:middle
or a lesser price subscription

00:35:32.826 --> 00:35:34.286 A:middle
of a different duration or maybe

00:35:34.286 --> 00:35:35.056 A:middle
a different offering.

00:35:35.716 --> 00:35:39.806 A:middle
If that subscriber decides to

00:35:39.806 --> 00:35:41.616 A:middle
engage with this the same way

00:35:41.616 --> 00:35:42.676 A:middle
that Pete showed you by

00:35:42.746 --> 00:35:43.766 A:middle
surfacing upgrades and

00:35:43.766 --> 00:35:44.626 A:middle
downgrades within your

00:35:44.626 --> 00:35:47.036 A:middle
applications we want to let you

00:35:47.036 --> 00:35:48.946 A:middle
know what product they will

00:35:48.946 --> 00:35:50.326 A:middle
renew on in the subsequent

00:35:50.326 --> 00:35:50.636 A:middle
period.

00:35:51.256 --> 00:35:54.266 A:middle
We do this via the auto renew

00:35:54.306 --> 00:35:55.906 A:middle
product ID field in the JSON

00:35:55.906 --> 00:35:56.286 A:middle
response.

00:35:57.236 --> 00:35:58.996 A:middle
So this differs from product ID

00:35:59.096 --> 00:36:00.696 A:middle
in that this is what the next


00:35:59.096 --> 00:36:00.696 A:middle
in that this is what the next

00:36:00.696 --> 00:36:02.256 A:middle
offering will be after that

00:36:02.296 --> 00:36:03.116 A:middle
subscriber renews.

00:36:03.276 --> 00:36:07.546 A:middle
Here we can see in the example

00:36:07.546 --> 00:36:09.986 A:middle
subscription our subscriber has

00:36:09.986 --> 00:36:11.276 A:middle
elected to downgrade instead of

00:36:11.276 --> 00:36:11.706 A:middle
churn out.

00:36:12.956 --> 00:36:13.966 A:middle
We've changed the auto renew

00:36:13.966 --> 00:36:16.566 A:middle
status to one and we've added

00:36:16.566 --> 00:36:18.406 A:middle
auto renew product ID.

00:36:19.346 --> 00:36:21.276 A:middle
It would also be beneficial to

00:36:21.276 --> 00:36:22.346 A:middle
be notified of this change

00:36:22.346 --> 00:36:24.976 A:middle
immediately, so for this we'll

00:36:24.976 --> 00:36:26.316 A:middle
also send a server-to-server

00:36:26.316 --> 00:36:27.896 A:middle
notification letting you know

00:36:27.996 --> 00:36:30.296 A:middle
that your subscriber did change

00:36:30.296 --> 00:36:31.176 A:middle
their renewal preference.

00:36:31.666 --> 00:36:34.846 A:middle
This is useful if you want to

00:36:34.846 --> 00:36:36.366 A:middle
maybe state the differing

00:36:36.456 --> 00:36:38.156 A:middle
service levels between what

00:36:38.156 --> 00:36:39.406 A:middle
they're currently subscribed to

00:36:39.646 --> 00:36:40.686 A:middle
and what they will have in the

00:36:40.686 --> 00:36:41.516 A:middle
subsequent period.

00:36:42.126 --> 00:36:46.016 A:middle
Now it's impossible to run a

00:36:46.016 --> 00:36:47.946 A:middle
100% retention subscription

00:36:47.946 --> 00:36:49.736 A:middle
business, so it's important to

00:36:49.736 --> 00:36:50.586 A:middle
understand how you could

00:36:50.646 --> 00:36:52.786 A:middle
possibly win back some of those

00:36:52.786 --> 00:36:54.416 A:middle
subscribers that you might have

00:36:54.666 --> 00:36:54.806 A:middle
lost.

00:36:56.416 --> 00:36:58.226 A:middle
A win back is reengaging

00:36:58.276 --> 00:36:59.506 A:middle
subscribers after they've

00:36:59.506 --> 00:37:01.236 A:middle
churned by showing them


00:36:59.506 --> 00:37:01.236 A:middle
churned by showing them

00:37:01.236 --> 00:37:03.386 A:middle
resubscription offers or

00:37:03.386 --> 00:37:04.566 A:middle
potentially surveying them to

00:37:04.566 --> 00:37:06.236 A:middle
understand why they've left.

00:37:06.856 --> 00:37:09.166 A:middle
If we look at our example

00:37:09.166 --> 00:37:10.846 A:middle
subscription let's see what a

00:37:10.846 --> 00:37:12.116 A:middle
voluntary cancellation would

00:37:12.116 --> 00:37:13.236 A:middle
look like and how we can

00:37:13.236 --> 00:37:14.656 A:middle
leverage that inside of our app.

00:37:16.066 --> 00:37:18.596 A:middle
Here our user has elected to

00:37:18.596 --> 00:37:19.736 A:middle
cancel via AppleCare.

00:37:20.946 --> 00:37:22.856 A:middle
In order to let you know we're

00:37:22.856 --> 00:37:24.156 A:middle
going to surface a cancellation

00:37:24.156 --> 00:37:25.626 A:middle
date field in the JSON response.

00:37:26.586 --> 00:37:27.416 A:middle
This is your signal to

00:37:27.416 --> 00:37:29.286 A:middle
understand this customer has

00:37:29.356 --> 00:37:31.126 A:middle
contacted AppleCare and either

00:37:31.156 --> 00:37:32.756 A:middle
canceled or requested a refund.

00:37:33.766 --> 00:37:36.056 A:middle
But as a developer you would

00:37:36.056 --> 00:37:37.206 A:middle
want to know this information

00:37:37.266 --> 00:37:37.816 A:middle
immediately.

00:37:38.986 --> 00:37:40.136 A:middle
For this we'll deploy a

00:37:40.136 --> 00:37:41.506 A:middle
server-to-server notification.

00:37:42.836 --> 00:37:43.996 A:middle
This is important because you'll

00:37:43.996 --> 00:37:45.366 A:middle
immediately want to shut off

00:37:45.366 --> 00:37:47.096 A:middle
access to those users on all

00:37:47.096 --> 00:37:49.376 A:middle
platforms and potentially

00:37:49.446 --> 00:37:50.536 A:middle
prompting them to see

00:37:50.536 --> 00:37:52.036 A:middle
alternative subscription offers.

00:37:52.586 --> 00:37:55.926 A:middle
Now after this user has churned

00:37:56.276 --> 00:37:57.766 A:middle
it would be important to easily

00:37:57.836 --> 00:37:59.066 A:middle
segment between those that have

00:37:59.066 --> 00:38:00.306 A:middle
voluntarily chosen to


00:37:59.066 --> 00:38:00.306 A:middle
voluntarily chosen to

00:38:00.336 --> 00:38:02.836 A:middle
unsubscribe and those that have

00:38:02.896 --> 00:38:04.506 A:middle
involuntarily been unsubscribed

00:38:04.506 --> 00:38:05.436 A:middle
due to a payment issue or

00:38:05.436 --> 00:38:06.046 A:middle
billing issue.

00:38:07.056 --> 00:38:09.196 A:middle
So for that we have the field

00:38:09.226 --> 00:38:11.256 A:middle
expiration intent in the JSON

00:38:11.256 --> 00:38:11.646 A:middle
response.

00:38:12.696 --> 00:38:14.436 A:middle
Now to be clear, this will only

00:38:14.436 --> 00:38:16.266 A:middle
show up after the subscription

00:38:16.426 --> 00:38:16.926 A:middle
has lapsed.

00:38:18.016 --> 00:38:19.236 A:middle
And we really want to focus on

00:38:19.286 --> 00:38:22.146 A:middle
two key values, the first being

00:38:22.146 --> 00:38:23.826 A:middle
value one which signifies

00:38:23.866 --> 00:38:26.296 A:middle
voluntary churn, the second

00:38:27.556 --> 00:38:28.996 A:middle
signifying involuntary churn

00:38:29.886 --> 00:38:32.896 A:middle
with a value of two.

00:38:33.146 --> 00:38:34.486 A:middle
If we flip back to our example

00:38:34.486 --> 00:38:36.106 A:middle
subscription where our customer

00:38:36.106 --> 00:38:37.906 A:middle
canceled via AppleCare you can

00:38:37.956 --> 00:38:38.816 A:middle
see that we've added the

00:38:38.846 --> 00:38:40.496 A:middle
expiration intent field to the

00:38:40.496 --> 00:38:42.156 A:middle
receipt response with a value of

00:38:42.156 --> 00:38:42.416 A:middle
one.

00:38:42.416 --> 00:38:47.496 A:middle
So what do you do as a developer

00:38:47.496 --> 00:38:48.756 A:middle
when you see your subscribers in

00:38:48.756 --> 00:38:50.006 A:middle
this state after they've already

00:38:50.006 --> 00:38:51.686 A:middle
churned and you've segmented

00:38:51.686 --> 00:38:52.486 A:middle
between those that have

00:38:52.486 --> 00:38:54.266 A:middle
voluntarily and involuntarily

00:38:54.266 --> 00:38:54.566 A:middle
churned?

00:38:55.066 --> 00:38:58.536 A:middle
Well for voluntary you may want

00:38:58.536 --> 00:39:00.256 A:middle
to survey those subscribers who


00:38:58.536 --> 00:39:00.256 A:middle
to survey those subscribers who

00:39:00.256 --> 00:39:01.506 A:middle
have opted into an account on

00:39:01.506 --> 00:39:02.056 A:middle
your system.

00:39:02.586 --> 00:39:04.006 A:middle
You can ask them maybe why the

00:39:04.076 --> 00:39:05.366 A:middle
service wasn't appropriate for

00:39:05.366 --> 00:39:07.186 A:middle
them and what you can do to

00:39:07.296 --> 00:39:08.556 A:middle
tailor it moving forward to

00:39:08.556 --> 00:39:09.786 A:middle
provide a better experience for

00:39:09.786 --> 00:39:11.246 A:middle
them or other users.

00:39:12.536 --> 00:39:13.926 A:middle
Additionally, you can always

00:39:13.926 --> 00:39:14.916 A:middle
just show alternative

00:39:14.966 --> 00:39:15.816 A:middle
subscription products

00:39:16.326 --> 00:39:17.426 A:middle
potentially within the same

00:39:17.426 --> 00:39:18.566 A:middle
group because if they

00:39:18.566 --> 00:39:19.926 A:middle
re-subscribe you want to

00:39:19.926 --> 00:39:21.236 A:middle
continue accruing your time

00:39:21.236 --> 00:39:22.916 A:middle
towards that 85/15 revenue

00:39:22.916 --> 00:39:23.166 A:middle
share.

00:39:23.166 --> 00:39:27.136 A:middle
Here we can see Peak when a user

00:39:27.136 --> 00:39:29.646 A:middle
has voluntarily churned being

00:39:29.646 --> 00:39:31.516 A:middle
shown a resubscription offer, in

00:39:31.516 --> 00:39:32.976 A:middle
this case a 60% discount.

00:39:37.046 --> 00:39:38.386 A:middle
For involuntary churn since the

00:39:38.386 --> 00:39:39.896 A:middle
user did not actively make the

00:39:39.896 --> 00:39:41.446 A:middle
choice to unsubscribe it's

00:39:41.446 --> 00:39:42.446 A:middle
appropriate to just show the

00:39:42.506 --> 00:39:43.906 A:middle
same or alternative subscription

00:39:43.906 --> 00:39:44.296 A:middle
products.

00:39:45.316 --> 00:39:46.296 A:middle
You may want to leave some

00:39:46.296 --> 00:39:47.576 A:middle
persistent messaging if that

00:39:47.576 --> 00:39:48.716 A:middle
user is logged in inside the

00:39:48.716 --> 00:39:50.476 A:middle
application experience letting

00:39:50.476 --> 00:39:51.676 A:middle
them know that they have lapsed,

00:39:52.026 --> 00:39:53.016 A:middle
but that they can always come

00:39:53.016 --> 00:39:53.226 A:middle
back.

00:39:54.486 --> 00:39:55.926 A:middle
And you may also want to deploy

00:39:55.926 --> 00:39:57.016 A:middle
a limited subscription

00:39:57.016 --> 00:39:59.176 A:middle
experience, such as a browse but

00:39:59.176 --> 00:40:00.536 A:middle
not watch experience in an


00:39:59.176 --> 00:40:00.536 A:middle
not watch experience in an

00:40:00.536 --> 00:40:00.976 A:middle
entertainment app.

00:40:01.066 --> 00:40:04.956 A:middle
Here we can see Tinder, when

00:40:04.956 --> 00:40:07.176 A:middle
users interact with pro level or

00:40:07.176 --> 00:40:08.816 A:middle
subscription level features they

00:40:08.816 --> 00:40:10.476 A:middle
are continually prompted to

00:40:10.476 --> 00:40:11.746 A:middle
subscribe.

00:40:12.616 --> 00:40:14.656 A:middle
So in summary, if you take

00:40:14.656 --> 00:40:15.906 A:middle
anything away from this section

00:40:15.906 --> 00:40:17.136 A:middle
on reducing subscriber churn

00:40:17.706 --> 00:40:18.386 A:middle
it's that you should be

00:40:18.386 --> 00:40:19.896 A:middle
leveraging these subscription

00:40:19.896 --> 00:40:21.476 A:middle
receipt fields effectively.

00:40:22.016 --> 00:40:25.116 A:middle
You can then implement status

00:40:25.116 --> 00:40:26.646 A:middle
polling to understand when your

00:40:26.646 --> 00:40:27.776 A:middle
subscribers may voluntarily

00:40:27.776 --> 00:40:27.976 A:middle
churn.

00:40:32.546 --> 00:40:33.606 A:middle
You can then use that status

00:40:33.676 --> 00:40:35.196 A:middle
polling to deploy some targeted

00:40:35.196 --> 00:40:36.106 A:middle
and effective customer

00:40:36.106 --> 00:40:36.676 A:middle
messaging.

00:40:37.266 --> 00:40:40.816 A:middle
And then to close it out,

00:40:40.976 --> 00:40:42.116 A:middle
presenting contextual

00:40:42.166 --> 00:40:43.316 A:middle
subscription offers to these

00:40:43.316 --> 00:40:45.106 A:middle
users to hopefully win them back

00:40:45.386 --> 00:40:46.536 A:middle
or prevent them from churning in

00:40:46.536 --> 00:40:47.666 A:middle
the first place.

00:40:48.996 --> 00:40:50.586 A:middle
So with that I'd like to hand it

00:40:50.586 --> 00:40:51.696 A:middle
back to my colleague Pete to

00:40:51.696 --> 00:40:53.026 A:middle
discuss analytics and reporting.

00:40:53.396 --> 00:40:53.696 A:middle
Thank you.

00:40:54.516 --> 00:40:58.500 A:middle
[ Applause ]


00:41:03.046 --> 00:41:03.436 A:middle
&gt;&gt; Thanks Michael.

00:41:04.636 --> 00:41:05.546 A:middle
If you haven't implemented

00:41:05.546 --> 00:41:06.946 A:middle
handling of these JSON fields

00:41:06.946 --> 00:41:08.506 A:middle
yet we highly recommend you try

00:41:08.506 --> 00:41:09.546 A:middle
it and watch the great effect it

00:41:09.546 --> 00:41:10.856 A:middle
has on your retention rates.

00:41:11.496 --> 00:41:12.666 A:middle
It's not often as engineers we

00:41:12.666 --> 00:41:13.616 A:middle
get the chance to make such

00:41:13.736 --> 00:41:15.136 A:middle
simple architectural tweaks that

00:41:15.136 --> 00:41:17.226 A:middle
can have such a big effect on a

00:41:17.226 --> 00:41:18.826 A:middle
business' revenue, so take a

00:41:18.826 --> 00:41:18.996 A:middle
look.

00:41:20.066 --> 00:41:21.266 A:middle
Now we've got some great new

00:41:21.266 --> 00:41:22.536 A:middle
updates today in the areas of

00:41:22.536 --> 00:41:23.606 A:middle
analytics and reporting.

00:41:24.756 --> 00:41:26.526 A:middle
Located in App Store Connect the

00:41:26.526 --> 00:41:27.736 A:middle
sales and trends section

00:41:27.736 --> 00:41:29.126 A:middle
contains a huge amount of useful

00:41:29.126 --> 00:41:29.686 A:middle
information.

00:41:30.146 --> 00:41:31.156 A:middle
Now you can get even more

00:41:31.156 --> 00:41:32.096 A:middle
insight into your app's

00:41:32.146 --> 00:41:32.726 A:middle
performance.

00:41:33.416 --> 00:41:34.886 A:middle
This existing subscription

00:41:34.886 --> 00:41:36.766 A:middle
summary dashboard now includes

00:41:36.766 --> 00:41:38.126 A:middle
monitoring for subscriptions

00:41:38.126 --> 00:41:39.526 A:middle
that are in those Billing Retry

00:41:39.526 --> 00:41:40.076 A:middle
windows.

00:41:41.256 --> 00:41:42.456 A:middle
This is great for gaining

00:41:42.456 --> 00:41:43.686 A:middle
insight into your subscriber

00:41:43.686 --> 00:41:44.826 A:middle
behavior and to determine the

00:41:44.826 --> 00:41:46.106 A:middle
most effective amount of time to

00:41:46.106 --> 00:41:47.396 A:middle
offer those grace periods for

00:41:47.396 --> 00:41:49.306 A:middle
like Michael just talked about.

00:41:50.196 --> 00:41:52.116 A:middle
This year we're also introducing

00:41:52.116 --> 00:41:53.666 A:middle
a brand-new dashboard for

00:41:53.666 --> 00:41:54.726 A:middle
subscription retention.

00:41:55.906 --> 00:41:57.226 A:middle
This page offers a glance at how

00:41:57.226 --> 00:41:58.266 A:middle
your introductory prices are

00:41:58.266 --> 00:41:59.966 A:middle
going, as well as how many of

00:41:59.966 --> 00:42:01.376 A:middle
the users are subscribed to the


00:41:59.966 --> 00:42:01.376 A:middle
the users are subscribed to the

00:42:01.376 --> 00:42:02.496 A:middle
higher proceeds rate, that's

00:42:02.496 --> 00:42:04.596 A:middle
that 85 to 15% split you get

00:42:04.796 --> 00:42:05.936 A:middle
when a user has been subscribed

00:42:05.976 --> 00:42:06.356 A:middle
for a year.

00:42:07.156 --> 00:42:09.046 A:middle
The dashboard includes new

00:42:09.046 --> 00:42:11.216 A:middle
graphs to help you quickly

00:42:11.216 --> 00:42:12.446 A:middle
identify which subscription

00:42:12.446 --> 00:42:13.466 A:middle
cohorts are the highest

00:42:13.506 --> 00:42:15.456 A:middle
performing and you can monitor

00:42:15.726 --> 00:42:17.106 A:middle
your subscription performance

00:42:17.106 --> 00:42:18.876 A:middle
over time and compare your app's

00:42:18.926 --> 00:42:20.566 A:middle
performance across different

00:42:20.566 --> 00:42:21.196 A:middle
territories.

00:42:22.386 --> 00:42:23.576 A:middle
Now all this new information is

00:42:23.576 --> 00:42:25.366 A:middle
not just available inside the

00:42:25.366 --> 00:42:26.706 A:middle
App Store Connect report, but

00:42:26.996 --> 00:42:27.916 A:middle
it's now available through the

00:42:27.916 --> 00:42:29.316 A:middle
new App Store Connect API.

00:42:30.796 --> 00:42:31.806 A:middle
The report data here is

00:42:31.806 --> 00:42:33.406 A:middle
available to you daily and you

00:42:33.406 --> 00:42:36.096 A:middle
can script your own setups to

00:42:36.096 --> 00:42:37.216 A:middle
import this maybe into your own

00:42:37.216 --> 00:42:38.496 A:middle
data warehouses for further

00:42:38.526 --> 00:42:39.216 A:middle
analysis.

00:42:39.926 --> 00:42:41.136 A:middle
We're not going to go into any

00:42:41.136 --> 00:42:42.036 A:middle
more information on the App

00:42:42.036 --> 00:42:43.186 A:middle
Store Connect API here, but I

00:42:43.186 --> 00:42:44.336 A:middle
really recommend you check out

00:42:44.336 --> 00:42:45.576 A:middle
the automating App Store Connect

00:42:45.636 --> 00:42:47.266 A:middle
session in the hall three on

00:42:47.266 --> 00:42:49.006 A:middle
Thursday at 3 p.m., there's some

00:42:49.006 --> 00:42:50.506 A:middle
really exciting enhancements in

00:42:50.506 --> 00:42:51.456 A:middle
the area of automation.

00:42:52.086 --> 00:42:54.036 A:middle
Now we've talked a bit about

00:42:54.036 --> 00:42:55.356 A:middle
what you can get from receipts

00:42:55.356 --> 00:42:56.326 A:middle
and what you can get from these

00:42:56.466 --> 00:42:57.886 A:middle
App Store Connect reports.

00:42:57.886 --> 00:42:59.976 A:middle
So as a bit of a summary, App

00:42:59.976 --> 00:43:01.696 A:middle
Store receipts are useful for


00:42:59.976 --> 00:43:01.696 A:middle
Store receipts are useful for

00:43:01.696 --> 00:43:02.856 A:middle
validating those StoreKit

00:43:02.856 --> 00:43:04.416 A:middle
transactions and updating user

00:43:04.416 --> 00:43:05.856 A:middle
subscription states, maintaining

00:43:05.856 --> 00:43:06.706 A:middle
the state on your server.

00:43:07.396 --> 00:43:08.426 A:middle
And you can also use them to

00:43:08.426 --> 00:43:10.206 A:middle
understand individual subscriber

00:43:10.206 --> 00:43:11.266 A:middle
behavior just like Michael

00:43:11.266 --> 00:43:11.696 A:middle
showed you.

00:43:11.696 --> 00:43:14.576 A:middle
For App Store Connect reports

00:43:14.926 --> 00:43:15.846 A:middle
it's for a slightly different

00:43:15.846 --> 00:43:16.606 A:middle
reason, they're better at that

00:43:16.606 --> 00:43:18.626 A:middle
macrolevel analysis, maybe

00:43:18.626 --> 00:43:19.746 A:middle
understanding subscription

00:43:19.746 --> 00:43:21.516 A:middle
pathways of users of your app

00:43:21.516 --> 00:43:23.046 A:middle
and maybe most importantly,

00:43:23.046 --> 00:43:24.366 A:middle
understanding how much money is

00:43:24.366 --> 00:43:25.496 A:middle
going to get deposited into your

00:43:25.496 --> 00:43:26.616 A:middle
bank account for your

00:43:26.616 --> 00:43:27.356 A:middle
subscriptions.

00:43:27.926 --> 00:43:30.586 A:middle
Now we've covered a lot of

00:43:30.586 --> 00:43:32.086 A:middle
topics here today, but as a bit

00:43:32.086 --> 00:43:33.606 A:middle
of a summary remember that

00:43:33.606 --> 00:43:35.016 A:middle
server-side state management

00:43:35.016 --> 00:43:36.836 A:middle
offers you much more flexibility

00:43:37.236 --> 00:43:38.476 A:middle
when it comes to managing

00:43:38.476 --> 00:43:39.266 A:middle
subscriptions.

00:43:40.746 --> 00:43:42.116 A:middle
If you haven't done it yet add

00:43:42.116 --> 00:43:43.396 A:middle
that URL to receive

00:43:43.396 --> 00:43:44.576 A:middle
notifications from the App

00:43:44.576 --> 00:43:44.886 A:middle
Store.

00:43:46.386 --> 00:43:47.136 A:middle
Consider offering an

00:43:47.136 --> 00:43:48.316 A:middle
introductory price in your app,

00:43:48.316 --> 00:43:49.596 A:middle
it's a great way to get users in

00:43:49.596 --> 00:43:50.536 A:middle
the door to your own

00:43:50.536 --> 00:43:51.166 A:middle
subscriptions.

00:43:52.696 --> 00:43:54.186 A:middle
Add some simple messaging to

00:43:54.186 --> 00:43:55.766 A:middle
reduce subscriber churn, using

00:43:55.766 --> 00:43:56.906 A:middle
those fields that Michael walked

00:43:56.906 --> 00:43:57.296 A:middle
us through.

00:43:57.876 --> 00:43:59.556 A:middle
And for users that have actually

00:43:59.556 --> 00:44:01.756 A:middle
lapsed offer some alternative


00:43:59.556 --> 00:44:01.756 A:middle
lapsed offer some alternative

00:44:01.756 --> 00:44:02.906 A:middle
subscription options maybe to

00:44:02.906 --> 00:44:03.436 A:middle
win them back.

00:44:04.796 --> 00:44:05.926 A:middle
Finally, remember to check out

00:44:05.926 --> 00:44:06.886 A:middle
these new reporting tools

00:44:06.886 --> 00:44:09.126 A:middle
available in App Store Connect.

00:44:09.756 --> 00:44:11.506 A:middle
For more information on this

00:44:11.506 --> 00:44:12.656 A:middle
session and for the video, this

00:44:12.656 --> 00:44:14.166 A:middle
has been session 705.

00:44:14.596 --> 00:44:15.346 A:middle
We're also going to be in the

00:44:15.346 --> 00:44:16.796 A:middle
labs this week right after this

00:44:17.376 --> 00:44:19.006 A:middle
and also on Thursday at 9 a.m.

00:44:19.006 --> 00:44:19.856 A:middle
we'll have engineers from the

00:44:19.856 --> 00:44:21.786 A:middle
StoreKit team and for App Store

00:44:21.786 --> 00:44:22.886 A:middle
Connect ready to answer any

00:44:22.886 --> 00:44:23.786 A:middle
questions that you might have

00:44:23.786 --> 00:44:25.216 A:middle
about engineering subscriptions.

00:44:25.626 --> 00:44:25.976 A:middle
Thanks a lot.

00:44:26.516 --> 00:44:31.500 A:middle
[ Applause ]
