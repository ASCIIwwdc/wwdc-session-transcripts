WEBVTT

00:00:06.516 --> 00:00:15.500 A:middle
[ Music ]

00:00:19.516 --> 00:00:26.386 A:middle
[ Applause ]

00:00:26.886 --> 00:00:27.716 A:middle
&gt;&gt; Good morning, ladies and

00:00:27.716 --> 00:00:28.196 A:middle
gentlemen.

00:00:28.986 --> 00:00:29.986 A:middle
How many of you are here for the

00:00:29.986 --> 00:00:31.706 A:middle
first time at WWDC?

00:00:33.666 --> 00:00:34.806 A:middle
That's fantastic.

00:00:34.806 --> 00:00:36.536 A:middle
It's great to see so many new

00:00:36.536 --> 00:00:37.336 A:middle
faces every year.

00:00:38.046 --> 00:00:39.146 A:middle
My name is Stuart Cheshire.

00:00:39.266 --> 00:00:40.326 A:middle
And we're going to be talking

00:00:40.326 --> 00:00:41.166 A:middle
about networking.

00:00:42.176 --> 00:00:44.106 A:middle
I'm going to start by covering

00:00:44.106 --> 00:00:45.946 A:middle
some topics that affect the

00:00:45.946 --> 00:00:47.296 A:middle
performance of your app.

00:00:47.886 --> 00:00:48.806 A:middle
There's hardly an app that

00:00:48.806 --> 00:00:50.776 A:middle
exists today that doesn't make

00:00:50.776 --> 00:00:51.766 A:middle
use of networking.

00:00:52.246 --> 00:00:54.026 A:middle
And getting the best performance

00:00:54.026 --> 00:00:55.176 A:middle
out of the network is really

00:00:55.176 --> 00:00:55.856 A:middle
important.

00:00:56.386 --> 00:00:57.236 A:middle
We're going to cover some

00:00:57.236 --> 00:00:58.806 A:middle
technologies here that help you

00:00:58.806 --> 00:00:59.896 A:middle
get the best performance.

00:01:00.936 --> 00:01:03.116 A:middle
We're also going to cover some

00:01:03.226 --> 00:01:05.296 A:middle
tips and tricks and guidance

00:01:05.716 --> 00:01:07.656 A:middle
about how to make the best use

00:01:07.696 --> 00:01:10.176 A:middle
of Apple's APIs, a little bit of

00:01:10.176 --> 00:01:12.346 A:middle
news about new technologies on

00:01:12.346 --> 00:01:14.716 A:middle
the horizon, and then my

00:01:14.716 --> 00:01:16.556 A:middle
colleague Jiten will go into

00:01:16.556 --> 00:01:18.106 A:middle
detail on URLSession.

00:01:21.066 --> 00:01:23.956 A:middle
Let's start off with a state of

00:01:23.956 --> 00:01:24.796 A:middle
the Internet update.

00:01:25.416 --> 00:01:27.666 A:middle
Earlier this year, we hit a

00:01:27.666 --> 00:01:30.476 A:middle
total of 4 billion people using

00:01:30.476 --> 00:01:30.966 A:middle
the Internet.

00:01:31.256 --> 00:01:32.466 A:middle
That's more than half of the

00:01:32.526 --> 00:01:33.626 A:middle
world's population.

00:01:34.166 --> 00:01:35.876 A:middle
And we're used to Internet usage

00:01:35.876 --> 00:01:36.846 A:middle
doubling and doubling.

00:01:37.696 --> 00:01:39.286 A:middle
Clearly when we passed halfway,

00:01:39.776 --> 00:01:40.606 A:middle
the number of people on the

00:01:40.606 --> 00:01:42.766 A:middle
Internet can't keep doubling, so

00:01:43.096 --> 00:01:45.316 A:middle
that growth is slowing down but

00:01:45.316 --> 00:01:46.306 A:middle
that doesn't mean Internet

00:01:46.396 --> 00:01:47.576 A:middle
growth is slowing down.

00:01:48.426 --> 00:01:49.626 A:middle
There's a lot of growth in

00:01:49.626 --> 00:01:50.426 A:middle
machine-to-machine

00:01:50.426 --> 00:01:51.996 A:middle
communications, Internet of

00:01:51.996 --> 00:01:53.536 A:middle
Things, Smart Homes.

00:01:54.256 --> 00:01:55.546 A:middle
There's still a lot of growth in

00:01:55.546 --> 00:01:57.046 A:middle
places like India and China.

00:01:58.276 --> 00:01:59.826 A:middle
And there is a lot of people who

00:01:59.826 --> 00:02:01.256 A:middle
have never owned a desktop

00:01:59.826 --> 00:02:01.256 A:middle
have never owned a desktop

00:02:01.296 --> 00:02:03.646 A:middle
computer who may never own a

00:02:03.646 --> 00:02:04.596 A:middle
desktop computer.

00:02:05.016 --> 00:02:06.926 A:middle
Their primary computing and

00:02:06.926 --> 00:02:08.675 A:middle
communication device is their

00:02:08.675 --> 00:02:09.356 A:middle
Smartphone.

00:02:09.895 --> 00:02:12.356 A:middle
And a lot of those Smartphones

00:02:12.396 --> 00:02:14.166 A:middle
are still using 2G networks.

00:02:15.066 --> 00:02:17.486 A:middle
I'm sure most of us in this room

00:02:17.486 --> 00:02:20.166 A:middle
are fortunate enough to live in

00:02:20.166 --> 00:02:21.916 A:middle
places and work in places where

00:02:21.916 --> 00:02:23.406 A:middle
we build our apps where we have

00:02:23.406 --> 00:02:24.946 A:middle
fast LTE networks.

00:02:25.396 --> 00:02:27.266 A:middle
And that can be a handicap

00:02:27.736 --> 00:02:31.076 A:middle
because if you build your app so

00:02:31.076 --> 00:02:33.896 A:middle
it works well in LTE, it may

00:02:33.896 --> 00:02:35.996 A:middle
perform very, very badly on 2G.

00:02:36.916 --> 00:02:37.956 A:middle
One of your competitors,

00:02:37.956 --> 00:02:39.106 A:middle
somewhere else in the world, who

00:02:39.106 --> 00:02:40.476 A:middle
builds an app that works great

00:02:40.476 --> 00:02:42.716 A:middle
on 2G is going to be fantastic

00:02:42.716 --> 00:02:43.366 A:middle
on LTE.

00:02:43.976 --> 00:02:46.436 A:middle
So we have a tool to help

00:02:46.436 --> 00:02:48.946 A:middle
everybody mimic some of the

00:02:48.946 --> 00:02:50.766 A:middle
properties of these slower

00:02:50.766 --> 00:02:52.476 A:middle
networks and that's Network Link

00:02:52.476 --> 00:02:53.056 A:middle
Conditioner.

00:02:54.016 --> 00:02:55.266 A:middle
You should build your app

00:02:55.446 --> 00:02:57.026 A:middle
running Network Link Conditioner

00:02:57.026 --> 00:02:57.946 A:middle
right from the start.

00:02:58.206 --> 00:02:59.476 A:middle
Don't think you can add in

00:02:59.476 --> 00:03:02.046 A:middle
performance at the end because

00:02:59.476 --> 00:03:02.046 A:middle
performance at the end because

00:03:02.046 --> 00:03:02.716 A:middle
it's too late.

00:03:03.456 --> 00:03:05.176 A:middle
Always, always, always run and

00:03:05.176 --> 00:03:06.646 A:middle
test your app using Network Link

00:03:06.646 --> 00:03:08.266 A:middle
Conditioner and that way if you

00:03:08.266 --> 00:03:10.266 A:middle
make a programming mistake that

00:03:10.266 --> 00:03:11.276 A:middle
has horrible performance

00:03:11.276 --> 00:03:12.726 A:middle
implications, you see it right

00:03:12.726 --> 00:03:13.916 A:middle
away and you can fix it right

00:03:13.916 --> 00:03:14.186 A:middle
away.

00:03:15.476 --> 00:03:16.986 A:middle
Use tools like Wireshark and

00:03:16.986 --> 00:03:19.036 A:middle
tcptrace to understand the

00:03:19.036 --> 00:03:20.336 A:middle
network performance of your app.

00:03:20.906 --> 00:03:21.746 A:middle
It's a lot like using

00:03:21.746 --> 00:03:23.046 A:middle
Instruments to look at memory

00:03:23.046 --> 00:03:24.166 A:middle
and CPU usage.

00:03:25.056 --> 00:03:26.866 A:middle
If you haven't seen tcptrace, it

00:03:26.866 --> 00:03:28.186 A:middle
is a wonderful tool that

00:03:28.186 --> 00:03:29.976 A:middle
produces graphs like this that

00:03:29.976 --> 00:03:31.476 A:middle
let you see at a glance what's

00:03:31.476 --> 00:03:32.486 A:middle
going on, on the network.

00:03:33.356 --> 00:03:34.566 A:middle
If you want to learn more about

00:03:34.566 --> 00:03:35.866 A:middle
that, check out the video from

00:03:35.866 --> 00:03:38.546 A:middle
three years ago.

00:03:39.456 --> 00:03:41.566 A:middle
IPv6 usage continues to grow.

00:03:42.426 --> 00:03:43.816 A:middle
Why is that important?

00:03:43.986 --> 00:03:46.006 A:middle
It's important because IPv6 is

00:03:46.356 --> 00:03:47.946 A:middle
shown to have better performance

00:03:47.946 --> 00:03:48.846 A:middle
than IPv4.

00:03:48.906 --> 00:03:50.286 A:middle
And if you care about

00:03:50.286 --> 00:03:51.796 A:middle
performance, you want to make

00:03:51.796 --> 00:03:53.596 A:middle
sure not just your app but the

00:03:53.596 --> 00:03:55.236 A:middle
service your app is talking to

00:03:55.426 --> 00:03:56.836 A:middle
support Native IPv6.

00:03:57.716 --> 00:03:59.156 A:middle
Some places in the world are

00:03:59.156 --> 00:04:00.546 A:middle
doing better in this respect

00:03:59.156 --> 00:04:00.546 A:middle
doing better in this respect

00:04:00.546 --> 00:04:01.086 A:middle
than others.

00:04:01.906 --> 00:04:04.006 A:middle
In the US, we're now up to 87%

00:04:04.006 --> 00:04:05.686 A:middle
of mobile carriers offering

00:04:05.686 --> 00:04:05.996 A:middle
IPv6.

00:04:06.036 --> 00:04:08.456 A:middle
Other places like India are

00:04:08.456 --> 00:04:09.546 A:middle
doing pretty well too.

00:04:10.256 --> 00:04:11.416 A:middle
And let's focus a bit more on

00:04:11.416 --> 00:04:11.696 A:middle
India.

00:04:12.596 --> 00:04:14.596 A:middle
Here is some data that the

00:04:14.596 --> 00:04:15.766 A:middle
networking team at Apple

00:04:15.766 --> 00:04:18.326 A:middle
gathered earlier this year about

00:04:18.466 --> 00:04:21.086 A:middle
net TCP connection setup time

00:04:21.516 --> 00:04:24.566 A:middle
and ongoing round-trip delay on

00:04:25.256 --> 00:04:26.606 A:middle
cellular networks in India.

00:04:27.266 --> 00:04:28.756 A:middle
The blue line is IPv6.

00:04:29.486 --> 00:04:31.416 A:middle
And if we, for example, look at

00:04:31.416 --> 00:04:33.946 A:middle
the 75th percentile, we can say

00:04:34.226 --> 00:04:39.316 A:middle
75% of TCP connections over v6

00:04:39.376 --> 00:04:40.986 A:middle
are set up in less than 150

00:04:40.986 --> 00:04:41.746 A:middle
milliseconds.

00:04:42.446 --> 00:04:44.576 A:middle
The comparable number for IPv4

00:04:44.576 --> 00:04:46.796 A:middle
is worse than 325.

00:04:47.336 --> 00:04:48.636 A:middle
It's more than twice as slow.

00:04:49.036 --> 00:04:50.976 A:middle
So if you want fast, responsive

00:04:50.976 --> 00:04:53.526 A:middle
applications for your users, get

00:04:53.526 --> 00:04:55.166 A:middle
on IPv6 if you're not already.

00:04:56.926 --> 00:04:58.516 A:middle
Another technology that improves

00:04:58.566 --> 00:05:00.526 A:middle
performance by reducing packet

00:04:58.566 --> 00:05:00.526 A:middle
performance by reducing packet

00:05:00.526 --> 00:05:02.286 A:middle
loss and retransmission is

00:05:02.286 --> 00:05:03.266 A:middle
Explicit Congestion

00:05:03.266 --> 00:05:04.026 A:middle
Notification.

00:05:04.836 --> 00:05:06.056 A:middle
We've had this enabled by

00:05:06.056 --> 00:05:08.026 A:middle
default in macOS and iOS for

00:05:08.026 --> 00:05:09.496 A:middle
some years now so you don't need

00:05:09.496 --> 00:05:10.306 A:middle
to do anything on your

00:05:10.306 --> 00:05:12.376 A:middle
application to take advantage of

00:05:12.376 --> 00:05:12.726 A:middle
this.

00:05:13.706 --> 00:05:14.936 A:middle
Do make sure your service

00:05:15.016 --> 00:05:16.506 A:middle
supports ECN.

00:05:17.296 --> 00:05:20.026 A:middle
In a survey we did of the Alexa

00:05:20.026 --> 00:05:22.076 A:middle
top million websites, we found

00:05:22.076 --> 00:05:24.276 A:middle
last month we're now up to 77%

00:05:24.276 --> 00:05:25.316 A:middle
of the Alexa top million

00:05:25.316 --> 00:05:27.226 A:middle
services supporting ECN, which

00:05:27.226 --> 00:05:28.666 A:middle
is a big improvement compared to

00:05:28.666 --> 00:05:32.206 A:middle
a few years ago.

00:05:32.936 --> 00:05:34.936 A:middle
Another technology that helps

00:05:34.936 --> 00:05:36.506 A:middle
improve performance and

00:05:36.506 --> 00:05:37.766 A:middle
resilience of your connections

00:05:37.766 --> 00:05:39.016 A:middle
is Multipath TCP.

00:05:39.796 --> 00:05:41.336 A:middle
Quite often, the user may make a

00:05:41.336 --> 00:05:43.426 A:middle
connection in their office on

00:05:43.426 --> 00:05:45.676 A:middle
Wi-Fi and then they walk outside

00:05:46.436 --> 00:05:47.896 A:middle
and they lose the Wi-Fi signal.

00:05:47.896 --> 00:05:49.516 A:middle
Now with traditional TCP, the

00:05:49.516 --> 00:05:50.666 A:middle
connection is broken.

00:05:50.666 --> 00:05:51.506 A:middle
You have to reconnect.

00:05:51.506 --> 00:05:52.516 A:middle
You have to start again.

00:05:53.176 --> 00:05:55.356 A:middle
Multipath TCP makes its packet

00:05:55.356 --> 00:05:56.716 A:middle
routing decisions on a per

00:05:56.716 --> 00:05:58.636 A:middle
packet basis not per connection,

00:05:59.236 --> 00:06:01.976 A:middle
so it can switch that connection

00:05:59.236 --> 00:06:01.976 A:middle
so it can switch that connection

00:06:01.976 --> 00:06:03.846 A:middle
live to a different interface.

00:06:05.876 --> 00:06:08.416 A:middle
We talked last year about how to

00:06:08.416 --> 00:06:09.876 A:middle
enable this in your application.

00:06:10.016 --> 00:06:11.706 A:middle
And, of course, check with your

00:06:11.706 --> 00:06:13.076 A:middle
server operators to make sure

00:06:13.076 --> 00:06:14.106 A:middle
your servers are supporting

00:06:14.106 --> 00:06:14.976 A:middle
Multipath too.

00:06:16.146 --> 00:06:18.246 A:middle
We recently did a survey of the

00:06:18.246 --> 00:06:20.196 A:middle
mobile carriers that Apple works

00:06:20.196 --> 00:06:22.036 A:middle
with around the world and right

00:06:22.036 --> 00:06:25.706 A:middle
now 78% of their networks work

00:06:26.726 --> 00:06:28.226 A:middle
with Multipath TCP.

00:06:28.696 --> 00:06:30.496 A:middle
Only 22% of carriers are still

00:06:30.496 --> 00:06:32.016 A:middle
blocking Multipath connections.

00:06:32.536 --> 00:06:37.456 A:middle
TCP Fast Open is a technology

00:06:37.706 --> 00:06:39.536 A:middle
that lets you avoid the normal

00:06:39.536 --> 00:06:41.446 A:middle
round-trip delay of the TCP

00:06:41.446 --> 00:06:42.426 A:middle
connection set up.

00:06:42.906 --> 00:06:46.216 A:middle
TCP Fast Open lets you put your

00:06:46.216 --> 00:06:48.766 A:middle
initial data in with the TCP

00:06:48.766 --> 00:06:50.706 A:middle
connection set up packets.

00:06:52.546 --> 00:06:53.856 A:middle
You can check out more details

00:06:53.856 --> 00:06:55.096 A:middle
of that from our video from

00:06:55.096 --> 00:06:55.976 A:middle
three years ago.

00:06:56.476 --> 00:06:57.856 A:middle
And check with your server

00:06:57.856 --> 00:06:59.286 A:middle
operators to make sure that your

00:06:59.286 --> 00:07:03.256 A:middle
servers support TCP Fast Open.

00:06:59.286 --> 00:07:03.256 A:middle
servers support TCP Fast Open.

00:07:03.476 --> 00:07:05.586 A:middle
Now moving on to some new news.

00:07:06.216 --> 00:07:09.176 A:middle
There is a technology that many

00:07:09.176 --> 00:07:10.776 A:middle
of you will have heard of called

00:07:10.836 --> 00:07:11.106 A:middle
Quick.

00:07:11.986 --> 00:07:13.326 A:middle
Quick is a new transport

00:07:13.326 --> 00:07:15.856 A:middle
protocol, the first serious

00:07:15.856 --> 00:07:17.516 A:middle
candidate in 30 years for a

00:07:17.516 --> 00:07:19.246 A:middle
successor to replace TCP.

00:07:19.796 --> 00:07:21.576 A:middle
It started off as an experiment

00:07:21.676 --> 00:07:23.086 A:middle
by some engineers at Google.

00:07:23.566 --> 00:07:24.716 A:middle
That experiment proved

00:07:24.716 --> 00:07:25.366 A:middle
successful.

00:07:25.366 --> 00:07:27.626 A:middle
It has now been adopted as an

00:07:27.696 --> 00:07:29.876 A:middle
IETF work in group item for

00:07:29.876 --> 00:07:30.766 A:middle
standardization.

00:07:31.966 --> 00:07:33.256 A:middle
Apple engineers are

00:07:33.256 --> 00:07:34.446 A:middle
participating in that.

00:07:34.446 --> 00:07:35.816 A:middle
In fact, we have engineers right

00:07:35.816 --> 00:07:37.786 A:middle
now at the Quick meeting taking

00:07:37.786 --> 00:07:38.596 A:middle
place in Sweden.

00:07:39.996 --> 00:07:41.916 A:middle
This is not yet ready for prime

00:07:41.916 --> 00:07:42.286 A:middle
time.

00:07:42.286 --> 00:07:43.506 A:middle
The standard is not finished,

00:07:44.016 --> 00:07:45.416 A:middle
but Apple is working on it.

00:07:45.416 --> 00:07:47.146 A:middle
As soon as it is ready, you can

00:07:47.146 --> 00:07:48.306 A:middle
expect to see Apple API

00:07:48.436 --> 00:07:50.916 A:middle
supporting that.

00:07:51.266 --> 00:07:52.256 A:middle
Continuing in the theme of

00:07:52.306 --> 00:07:55.406 A:middle
performance, we observed some

00:07:55.406 --> 00:07:56.656 A:middle
behavior that's very common.

00:07:57.356 --> 00:07:59.336 A:middle
Lots and lots of websites and

00:07:59.336 --> 00:08:01.036 A:middle
Internet services use pretty

00:07:59.336 --> 00:08:01.036 A:middle
Internet services use pretty

00:08:01.036 --> 00:08:03.666 A:middle
short lifetimes on their DNS

00:08:03.666 --> 00:08:04.266 A:middle
records.

00:08:04.666 --> 00:08:06.596 A:middle
And they do this because if a

00:08:06.596 --> 00:08:08.736 A:middle
data center goes down, they want

00:08:08.736 --> 00:08:10.496 A:middle
to be able to update the DNS and

00:08:10.496 --> 00:08:12.686 A:middle
very rapidly direct traffic to a

00:08:12.686 --> 00:08:13.666 A:middle
different data center.

00:08:15.266 --> 00:08:16.636 A:middle
The problem with this approach

00:08:17.076 --> 00:08:19.166 A:middle
is you're paying a performance

00:08:19.166 --> 00:08:20.736 A:middle
cost for something that almost

00:08:20.736 --> 00:08:21.506 A:middle
never happens.

00:08:21.596 --> 00:08:23.816 A:middle
Data centers very rarely go

00:08:23.816 --> 00:08:24.186 A:middle
down.

00:08:25.066 --> 00:08:27.316 A:middle
And what this means is every

00:08:27.316 --> 00:08:29.276 A:middle
time a DNS address record is

00:08:29.276 --> 00:08:31.096 A:middle
expired, your client has to

00:08:31.096 --> 00:08:32.736 A:middle
spend another round-trip delay

00:08:33.046 --> 00:08:35.496 A:middle
waiting for the response from

00:08:35.496 --> 00:08:37.306 A:middle
the DNS server, which is the

00:08:37.306 --> 00:08:38.606 A:middle
same as what it knew already

00:08:38.606 --> 00:08:39.155 A:middle
last time.

00:08:39.756 --> 00:08:42.736 A:middle
So thinking about this, we

00:08:42.736 --> 00:08:44.826 A:middle
realized and optimization we

00:08:44.826 --> 00:08:45.216 A:middle
could do.

00:08:45.866 --> 00:08:47.856 A:middle
If you pass the flag to opt into

00:08:47.856 --> 00:08:50.866 A:middle
this new behavior, then when you

00:08:50.866 --> 00:08:52.846 A:middle
do a DNS query, if we have a

00:08:52.846 --> 00:08:54.446 A:middle
stale, expired answer in the

00:08:54.446 --> 00:08:56.956 A:middle
cache, we will give that to you

00:08:57.056 --> 00:08:59.286 A:middle
immediately while in parallel,

00:08:59.286 --> 00:09:00.876 A:middle
at the same time, doing the

00:08:59.286 --> 00:09:00.876 A:middle
at the same time, doing the

00:09:00.876 --> 00:09:02.816 A:middle
normal DNS query we would have

00:09:02.816 --> 00:09:03.476 A:middle
done anyway.

00:09:04.576 --> 00:09:05.796 A:middle
If the answer comes back the

00:09:05.796 --> 00:09:07.636 A:middle
same, as we predict it will

00:09:07.636 --> 00:09:09.586 A:middle
almost always, everything is

00:09:09.586 --> 00:09:11.136 A:middle
fine, you just saved a

00:09:11.136 --> 00:09:12.516 A:middle
round-trip time and got your

00:09:12.516 --> 00:09:13.766 A:middle
connection started faster.

00:09:14.426 --> 00:09:15.856 A:middle
If the answer comes back as a

00:09:15.856 --> 00:09:18.156 A:middle
different address, we will then

00:09:18.156 --> 00:09:19.356 A:middle
give another asynchronous

00:09:19.356 --> 00:09:21.416 A:middle
notification to your client that

00:09:21.416 --> 00:09:22.666 A:middle
there's a new address available

00:09:22.696 --> 00:09:23.926 A:middle
which it should also try.

00:09:24.706 --> 00:09:26.096 A:middle
And to make use of this, you

00:09:26.096 --> 00:09:27.446 A:middle
have to use it in conjunction

00:09:27.446 --> 00:09:28.946 A:middle
with Happy Eyeballs algorithm.

00:09:29.436 --> 00:09:30.996 A:middle
That means your racing multiple

00:09:30.996 --> 00:09:32.126 A:middle
connections in parallel.

00:09:32.996 --> 00:09:33.976 A:middle
You're trying IPv4, IPv6,

00:09:34.006 --> 00:09:36.886 A:middle
multiple addresses, multiple

00:09:36.886 --> 00:09:37.756 A:middle
interfaces.

00:09:38.566 --> 00:09:39.846 A:middle
If that sounds like a lot of

00:09:39.846 --> 00:09:41.356 A:middle
work and it's hard to get right,

00:09:41.516 --> 00:09:42.606 A:middle
you're absolutely correct.

00:09:42.606 --> 00:09:43.496 A:middle
It is a lot of work.

00:09:44.096 --> 00:09:46.246 A:middle
Stay after the break and we will

00:09:46.246 --> 00:09:48.686 A:middle
tell you about some new APIs

00:09:48.966 --> 00:09:50.406 A:middle
that let you take advantage of

00:09:50.406 --> 00:09:51.666 A:middle
this without doing all the hard

00:09:51.666 --> 00:09:52.346 A:middle
work yourself.

00:09:54.526 --> 00:09:56.056 A:middle
Now moving on to some guidance.

00:09:56.726 --> 00:09:58.836 A:middle
We have seen a common pattern

00:09:59.246 --> 00:10:02.296 A:middle
that many developers use

00:09:59.246 --> 00:10:02.296 A:middle
that many developers use

00:10:02.446 --> 00:10:04.426 A:middle
SCNetworkReachability as a

00:10:04.556 --> 00:10:05.326 A:middle
preflight check.

00:10:06.396 --> 00:10:07.686 A:middle
They want to predict the future.

00:10:07.916 --> 00:10:09.076 A:middle
They want to know whether the

00:10:09.076 --> 00:10:10.936 A:middle
next network operation they do

00:10:10.936 --> 00:10:12.096 A:middle
will succeed or fail.

00:10:12.626 --> 00:10:14.956 A:middle
And, unfortunately, predicting

00:10:14.956 --> 00:10:16.116 A:middle
the future is always a hard

00:10:16.116 --> 00:10:16.666 A:middle
thing to do.

00:10:17.216 --> 00:10:18.786 A:middle
You may have connectivity now

00:10:19.476 --> 00:10:20.966 A:middle
but two seconds from now the

00:10:21.026 --> 00:10:22.366 A:middle
user has walked out of the

00:10:22.366 --> 00:10:23.696 A:middle
building and you've lost the

00:10:23.696 --> 00:10:24.496 A:middle
Wi-Fi signal.

00:10:24.886 --> 00:10:27.656 A:middle
So there is no way to guarantee

00:10:27.656 --> 00:10:29.026 A:middle
whether a future operation will

00:10:29.026 --> 00:10:29.566 A:middle
succeed.

00:10:30.486 --> 00:10:32.356 A:middle
And we see this pattern where

00:10:32.356 --> 00:10:32.826 A:middle
they check.

00:10:33.166 --> 00:10:34.326 A:middle
The preflight says yes.

00:10:34.406 --> 00:10:35.006 A:middle
They try it.

00:10:35.056 --> 00:10:35.686 A:middle
They fail.

00:10:36.126 --> 00:10:36.836 A:middle
They go back.

00:10:36.836 --> 00:10:37.716 A:middle
They check again.

00:10:38.526 --> 00:10:41.016 A:middle
This also is a lot of work, a

00:10:41.016 --> 00:10:42.546 A:middle
lot of [inaudible], a lot of

00:10:42.546 --> 00:10:44.026 A:middle
difficult things to get right

00:10:44.606 --> 00:10:46.426 A:middle
including networks with proxies.

00:10:47.606 --> 00:10:48.776 A:middle
We can handle that for you.

00:10:50.506 --> 00:10:53.746 A:middle
The better way to do this is

00:10:53.746 --> 00:10:56.006 A:middle
just make a connection using the

00:10:56.006 --> 00:10:58.616 A:middle
waitsForConnectivity option.

00:10:58.816 --> 00:11:00.326 A:middle
You can learn more about that

00:10:58.816 --> 00:11:00.326 A:middle
You can learn more about that

00:11:00.326 --> 00:11:01.526 A:middle
watching last year's video.

00:11:01.966 --> 00:11:03.956 A:middle
What this means is if you want a

00:11:03.956 --> 00:11:05.566 A:middle
connection, you tell the system

00:11:05.566 --> 00:11:06.566 A:middle
I want a connection.

00:11:06.806 --> 00:11:09.006 A:middle
Now if you can, later if not.

00:11:09.326 --> 00:11:10.976 A:middle
If the device is in airplane

00:11:10.976 --> 00:11:12.396 A:middle
mode, then when it's out of

00:11:12.396 --> 00:11:13.566 A:middle
airplane mode your connection

00:11:13.566 --> 00:11:14.216 A:middle
will succeed.

00:11:14.686 --> 00:11:16.266 A:middle
That is much easier than

00:11:16.266 --> 00:11:17.396 A:middle
building the retry loop

00:11:17.396 --> 00:11:17.866 A:middle
yourself.

00:11:18.876 --> 00:11:20.466 A:middle
There is one case we've seen

00:11:20.466 --> 00:11:22.456 A:middle
with developers which does make

00:11:22.456 --> 00:11:24.516 A:middle
sense which is if you're going

00:11:24.516 --> 00:11:26.046 A:middle
to have the user answer a lot of

00:11:26.046 --> 00:11:27.876 A:middle
information in a form, you may

00:11:27.876 --> 00:11:29.146 A:middle
not want to waste the user's

00:11:29.146 --> 00:11:31.186 A:middle
time if you have good reason to

00:11:31.186 --> 00:11:33.096 A:middle
believe that may later fail.

00:11:34.126 --> 00:11:35.736 A:middle
If that is the use case you care

00:11:35.736 --> 00:11:37.366 A:middle
about, stay after the break

00:11:37.606 --> 00:11:39.076 A:middle
because we have a new way to do

00:11:39.076 --> 00:11:43.166 A:middle
that that's much better.

00:11:43.356 --> 00:11:45.436 A:middle
Security remains important, as

00:11:45.536 --> 00:11:46.286 A:middle
always.

00:11:47.316 --> 00:11:49.696 A:middle
After ten years of using TLS

00:11:49.736 --> 00:11:52.256 A:middle
1.2, the Internet is now ready

00:11:52.256 --> 00:11:53.886 A:middle
to move to its successor, TLS

00:11:53.886 --> 00:11:54.646 A:middle
1.3.

00:11:55.286 --> 00:11:56.406 A:middle
It has a number of improved

00:11:56.406 --> 00:11:57.566 A:middle
security features.

00:11:58.146 --> 00:12:00.066 A:middle
It has reduced connection setup

00:11:58.146 --> 00:12:00.066 A:middle
It has reduced connection setup

00:12:00.106 --> 00:12:02.576 A:middle
time, similar to TCP Fast Open.

00:12:03.496 --> 00:12:05.536 A:middle
That standard is now final.

00:12:05.716 --> 00:12:07.506 A:middle
The final draft was approved for

00:12:07.506 --> 00:12:09.286 A:middle
publication by the Internet

00:12:09.286 --> 00:12:10.616 A:middle
Engineering Steering Group

00:12:10.906 --> 00:12:11.726 A:middle
earlier this year.

00:12:12.586 --> 00:12:14.766 A:middle
We are waiting for the actual

00:12:14.766 --> 00:12:16.366 A:middle
published document to come out

00:12:16.366 --> 00:12:17.406 A:middle
of the RFC Editor.

00:12:17.836 --> 00:12:19.416 A:middle
And when that does, we'll be

00:12:19.416 --> 00:12:22.246 A:middle
turning on TLS 1.3 by default.

00:12:23.326 --> 00:12:25.026 A:middle
Right now in your seed, it's not

00:12:25.026 --> 00:12:25.976 A:middle
turned on by default.

00:12:27.166 --> 00:12:28.426 A:middle
You can use the instructions

00:12:28.426 --> 00:12:32.636 A:middle
here on iOS or macOS to enable

00:12:32.896 --> 00:12:35.726 A:middle
TLS 13 in your applications.

00:12:36.016 --> 00:12:37.386 A:middle
And we encourage you to do this

00:12:37.386 --> 00:12:39.696 A:middle
right away because later this

00:12:39.696 --> 00:12:41.926 A:middle
year when TLS 1.3 is turned on

00:12:41.926 --> 00:12:43.796 A:middle
by default, you don't risk

00:12:43.796 --> 00:12:45.166 A:middle
problems with your service not

00:12:45.166 --> 00:12:45.936 A:middle
being compatible.

00:12:46.236 --> 00:12:48.346 A:middle
So test them right now to make

00:12:48.346 --> 00:12:49.896 A:middle
sure everything will go smoothly

00:12:50.166 --> 00:12:51.346 A:middle
when the switchover happens

00:12:51.346 --> 00:12:51.946 A:middle
later this year.

00:12:56.046 --> 00:12:57.446 A:middle
Another element of security

00:12:57.446 --> 00:12:58.956 A:middle
that's new is certificate

00:12:58.956 --> 00:12:59.676 A:middle
transparency.

00:12:59.676 --> 00:13:02.116 A:middle
You've probably heard cases

00:12:59.676 --> 00:13:02.116 A:middle
You've probably heard cases

00:13:02.366 --> 00:13:05.666 A:middle
where certificate authorities,

00:13:06.036 --> 00:13:07.026 A:middle
either through malice or

00:13:07.026 --> 00:13:08.986 A:middle
incompetence, issue rogue

00:13:08.986 --> 00:13:10.646 A:middle
certificates to entities that

00:13:10.646 --> 00:13:11.196 A:middle
they should not.

00:13:12.556 --> 00:13:14.046 A:middle
The solution to this is

00:13:14.046 --> 00:13:15.546 A:middle
something called certificate

00:13:15.546 --> 00:13:16.766 A:middle
transparency logs.

00:13:17.556 --> 00:13:19.426 A:middle
Every legitimate certificate

00:13:19.426 --> 00:13:22.326 A:middle
authority now issues a public

00:13:22.926 --> 00:13:24.766 A:middle
statement of every certificate

00:13:24.766 --> 00:13:25.516 A:middle
it issues.

00:13:25.596 --> 00:13:27.076 A:middle
And those are recorded in public

00:13:27.076 --> 00:13:29.296 A:middle
logs for anybody to inspect.

00:13:30.236 --> 00:13:31.836 A:middle
And this means that if a rogue

00:13:32.406 --> 00:13:34.436 A:middle
certificate authority issues a

00:13:34.436 --> 00:13:36.596 A:middle
bogus certificate, if it

00:13:36.596 --> 00:13:37.786 A:middle
publishes it, they'll

00:13:37.786 --> 00:13:40.656 A:middle
immediately get caught.

00:13:40.656 --> 00:13:41.856 A:middle
And if they don't publish it,

00:13:42.186 --> 00:13:43.486 A:middle
they'll be caught by the client.

00:13:44.966 --> 00:13:46.596 A:middle
This is the setup you're

00:13:46.596 --> 00:13:47.966 A:middle
probably familiar with.

00:13:48.436 --> 00:13:50.356 A:middle
The new entity here is the log.

00:13:51.186 --> 00:13:52.736 A:middle
When a certificate authority

00:13:52.936 --> 00:13:54.786 A:middle
issues a certificate to a

00:13:54.786 --> 00:13:57.616 A:middle
server, it also records that

00:13:57.616 --> 00:13:59.896 A:middle
with the log and the log gives

00:13:59.896 --> 00:14:01.776 A:middle
the server a signed affidavit

00:13:59.896 --> 00:14:01.776 A:middle
the server a signed affidavit

00:14:02.146 --> 00:14:03.656 A:middle
that its certificate has been

00:14:03.656 --> 00:14:04.646 A:middle
publicly recorded.

00:14:04.926 --> 00:14:06.076 A:middle
And then when the client

00:14:06.166 --> 00:14:08.066 A:middle
connects, the server can give

00:14:08.066 --> 00:14:09.096 A:middle
all that information to the

00:14:09.096 --> 00:14:11.046 A:middle
client and the client can verify

00:14:11.046 --> 00:14:12.256 A:middle
that not only is this a signed

00:14:12.256 --> 00:14:14.236 A:middle
certificate, it is a publicly

00:14:14.236 --> 00:14:15.786 A:middle
logged signed certificate.

00:14:16.916 --> 00:14:18.156 A:middle
Now suppose we have a rogue

00:14:18.156 --> 00:14:20.226 A:middle
certificate authority that

00:14:20.326 --> 00:14:22.286 A:middle
doesn't publicly expose the

00:14:22.286 --> 00:14:23.836 A:middle
rogue certificates it's issuing.

00:14:24.726 --> 00:14:26.426 A:middle
The client will reject that

00:14:26.426 --> 00:14:27.916 A:middle
because it doesn't have the

00:14:27.916 --> 00:14:30.386 A:middle
affidavit to attest to it being

00:14:30.476 --> 00:14:31.826 A:middle
recorded in a public log.

00:14:33.006 --> 00:14:34.286 A:middle
Starting later this year, we

00:14:34.596 --> 00:14:35.896 A:middle
will be enforcing this.

00:14:37.456 --> 00:14:39.806 A:middle
All newly issued TLS

00:14:39.806 --> 00:14:41.726 A:middle
certificates must include the

00:14:41.726 --> 00:14:43.236 A:middle
verification that they are

00:14:43.236 --> 00:14:44.096 A:middle
publicly logged.

00:14:44.486 --> 00:14:46.036 A:middle
And if they're not, then the

00:14:46.036 --> 00:14:47.056 A:middle
client will reject it.

00:14:47.536 --> 00:14:49.686 A:middle
Your apps don't need to make any

00:14:49.686 --> 00:14:51.926 A:middle
changes, but if you have

00:14:51.926 --> 00:14:53.006 A:middle
tailored certificates for your

00:14:53.006 --> 00:14:54.996 A:middle
servers, make sure that your

00:14:54.996 --> 00:14:56.686 A:middle
certificate authority is

00:14:56.686 --> 00:14:58.186 A:middle
recording them in the public

00:14:58.306 --> 00:14:59.906 A:middle
certificate transparency logs.

00:15:00.486 --> 00:15:03.686 A:middle
Now we have a bit of news for

00:15:04.246 --> 00:15:05.286 A:middle
hardware developers.

00:15:06.286 --> 00:15:08.396 A:middle
The Bonjour Conformance Test is

00:15:08.396 --> 00:15:10.776 A:middle
a tool that lets you verify that

00:15:10.776 --> 00:15:12.386 A:middle
your hardware devices implement

00:15:12.386 --> 00:15:13.376 A:middle
Bonjour correctly.

00:15:14.466 --> 00:15:15.946 A:middle
You need to run this test if you

00:15:15.946 --> 00:15:17.086 A:middle
want to use the Bonjour

00:15:17.086 --> 00:15:18.796 A:middle
trademark name and logo on your

00:15:18.796 --> 00:15:19.376 A:middle
packaging.

00:15:20.256 --> 00:15:21.796 A:middle
You need to run this test if you

00:15:21.796 --> 00:15:23.826 A:middle
want to bundle the Bonjour for

00:15:23.866 --> 00:15:26.366 A:middle
Windows installer with a Windows

00:15:26.366 --> 00:15:27.086 A:middle
application.

00:15:27.696 --> 00:15:28.896 A:middle
And if you want to use the

00:15:28.896 --> 00:15:30.736 A:middle
AirPrint, AirPlay, CarPlay,

00:15:30.736 --> 00:15:32.506 A:middle
HomeKit logos on your packaging,

00:15:33.046 --> 00:15:34.356 A:middle
passing the Bonjour Conformance

00:15:34.356 --> 00:15:36.136 A:middle
Test is a part of the logo

00:15:36.136 --> 00:15:37.976 A:middle
licensing process because

00:15:37.976 --> 00:15:39.916 A:middle
reliable Bonjour is an essential

00:15:39.916 --> 00:15:41.006 A:middle
part of those products.

00:15:41.926 --> 00:15:44.056 A:middle
But more importantly, the value

00:15:44.056 --> 00:15:44.966 A:middle
of running the Bonjour

00:15:44.966 --> 00:15:46.996 A:middle
Conformance Test is it helps you

00:15:46.996 --> 00:15:48.136 A:middle
improve the quality of your

00:15:48.136 --> 00:15:50.096 A:middle
products and that makes them

00:15:50.096 --> 00:15:51.856 A:middle
more reliable which makes your

00:15:51.856 --> 00:15:53.996 A:middle
customers happy which makes your

00:15:53.996 --> 00:15:55.536 A:middle
customers not return the product

00:15:55.536 --> 00:15:57.026 A:middle
to the store because they can't

00:15:57.026 --> 00:15:57.756 A:middle
make it work.

00:15:58.226 --> 00:15:59.926 A:middle
And that's what your customers

00:15:59.926 --> 00:16:00.196 A:middle
want.

00:15:59.926 --> 00:16:00.196 A:middle
want.

00:16:00.296 --> 00:16:01.066 A:middle
That's what you want.

00:16:01.146 --> 00:16:01.996 A:middle
And that's what we want.

00:16:02.046 --> 00:16:04.426 A:middle
We want happy customers having a

00:16:04.426 --> 00:16:05.606 A:middle
wonderful time with products

00:16:05.606 --> 00:16:06.436 A:middle
that work reliably.

00:16:06.436 --> 00:16:11.556 A:middle
Now I want to cover API choices.

00:16:12.596 --> 00:16:15.156 A:middle
Thirty years ago we had BSD

00:16:15.156 --> 00:16:15.776 A:middle
Sockets.

00:16:16.396 --> 00:16:18.296 A:middle
And it was a great API 30 years

00:16:18.296 --> 00:16:18.616 A:middle
ago.

00:16:19.046 --> 00:16:21.616 A:middle
But 30 years ago we didn't have

00:16:22.426 --> 00:16:24.476 A:middle
mobile computers in our pockets.

00:16:24.546 --> 00:16:25.576 A:middle
We didn't have wireless

00:16:25.576 --> 00:16:26.216 A:middle
networking.

00:16:26.216 --> 00:16:29.126 A:middle
We didn't have IPv6.

00:16:29.326 --> 00:16:31.026 A:middle
We didn't have many computers

00:16:31.026 --> 00:16:32.066 A:middle
with more than one network

00:16:32.066 --> 00:16:32.746 A:middle
interface.

00:16:32.896 --> 00:16:34.936 A:middle
If you had an Ethernet port on

00:16:34.936 --> 00:16:36.176 A:middle
your computer, that was a fancy

00:16:36.176 --> 00:16:36.716 A:middle
computer.

00:16:37.376 --> 00:16:40.236 A:middle
Now 4 billion people around the

00:16:40.236 --> 00:16:42.806 A:middle
world have a multi-homed IPv6

00:16:43.136 --> 00:16:44.566 A:middle
wireless battery-powered

00:16:44.566 --> 00:16:46.226 A:middle
computing device that does power

00:16:46.226 --> 00:16:47.456 A:middle
management and goes to sleep to

00:16:47.456 --> 00:16:48.116 A:middle
save energy.

00:16:48.496 --> 00:16:49.716 A:middle
The world has become a lot more

00:16:49.716 --> 00:16:50.376 A:middle
complicated.

00:16:52.056 --> 00:16:53.246 A:middle
Many of you may be using

00:16:53.246 --> 00:16:55.326 A:middle
third-party libraries which are

00:16:55.376 --> 00:16:56.356 A:middle
built on that Sockets

00:16:56.356 --> 00:16:57.016 A:middle
foundation.

00:16:57.686 --> 00:16:59.996 A:middle
Many more of you may be using

00:16:59.996 --> 00:17:00.816 A:middle
URLSession.

00:16:59.996 --> 00:17:00.816 A:middle
URLSession.

00:17:01.306 --> 00:17:03.006 A:middle
And you may have assumed that

00:17:03.006 --> 00:17:05.626 A:middle
URLSession is also just a wrap

00:17:05.626 --> 00:17:06.556 A:middle
around Sockets.

00:17:07.906 --> 00:17:09.526 A:middle
Well, not quite.

00:17:11.006 --> 00:17:13.046 A:middle
URLSession is actually built

00:17:13.326 --> 00:17:15.445 A:middle
using Apple's user space

00:17:15.656 --> 00:17:17.386 A:middle
networking code network

00:17:17.386 --> 00:17:17.856 A:middle
framework.

00:17:18.346 --> 00:17:21.306 A:middle
And starting now, in iOS 12, we

00:17:21.306 --> 00:17:23.976 A:middle
are exposing that same API that

00:17:23.976 --> 00:17:26.056 A:middle
URLSession uses so that your

00:17:26.056 --> 00:17:29.316 A:middle
apps can directly use that for

00:17:29.486 --> 00:17:31.986 A:middle
making TCP connections and other

00:17:31.986 --> 00:17:33.266 A:middle
appropriate use cases.

00:17:33.526 --> 00:17:35.266 A:middle
If you're doing things with URLs

00:17:35.266 --> 00:17:37.356 A:middle
and HTTP GETs, URLSession is

00:17:37.356 --> 00:17:38.716 A:middle
still your API of choice.

00:17:39.056 --> 00:17:41.116 A:middle
But for the things URLSession

00:17:41.116 --> 00:17:43.316 A:middle
doesn't cover, we now expose

00:17:43.316 --> 00:17:45.766 A:middle
network framework so your apps

00:17:45.766 --> 00:17:46.896 A:middle
can use that directly.

00:17:47.876 --> 00:17:49.816 A:middle
And if you're the developer of

00:17:49.816 --> 00:17:50.896 A:middle
one of these third-party

00:17:50.896 --> 00:17:51.866 A:middle
libraries, which are very

00:17:51.866 --> 00:17:54.156 A:middle
popular that are built on BSD

00:17:54.156 --> 00:17:56.606 A:middle
Sockets, we encourage you to

00:17:56.606 --> 00:17:58.716 A:middle
look at the network framework

00:17:58.716 --> 00:17:59.216 A:middle
APIs.

00:17:59.596 --> 00:18:02.016 A:middle
Move your library over to these

00:17:59.596 --> 00:18:02.016 A:middle
Move your library over to these

00:18:02.016 --> 00:18:04.326 A:middle
improved high-performance APIs,

00:18:04.926 --> 00:18:07.036 A:middle
and give us feedback about how

00:18:07.036 --> 00:18:07.886 A:middle
that goes for you.

00:18:08.866 --> 00:18:11.086 A:middle
So to summarize, we really

00:18:11.086 --> 00:18:13.786 A:middle
strongly recommend here and now

00:18:14.076 --> 00:18:17.646 A:middle
in 2018 that you avoid using BSD

00:18:17.646 --> 00:18:18.296 A:middle
Sockets.

00:18:18.686 --> 00:18:20.756 A:middle
Avoid using libraries that are

00:18:20.756 --> 00:18:22.706 A:middle
nothing but wrappers around BSD

00:18:22.706 --> 00:18:23.316 A:middle
Sockets.

00:18:23.766 --> 00:18:25.146 A:middle
And if you are one of the

00:18:25.146 --> 00:18:27.146 A:middle
authors of those libraries using

00:18:27.146 --> 00:18:29.456 A:middle
these older APIs, look at

00:18:29.456 --> 00:18:30.116 A:middle
switching over.

00:18:30.116 --> 00:18:32.056 A:middle
Come and meet us in the labs

00:18:32.106 --> 00:18:34.106 A:middle
this afternoon and tomorrow and

00:18:34.236 --> 00:18:36.246 A:middle
give us your feedback about what

00:18:36.246 --> 00:18:37.816 A:middle
it takes to move your libraries

00:18:38.046 --> 00:18:39.076 A:middle
to new APIs.

00:18:40.076 --> 00:18:41.316 A:middle
And with that, I would like to

00:18:41.316 --> 00:18:43.106 A:middle
invite my colleagues Jiten to

00:18:43.106 --> 00:18:44.996 A:middle
come up on stage and give you

00:18:45.166 --> 00:18:46.816 A:middle
more details about URLSession.

00:18:47.516 --> 00:18:51.976 A:middle
[ Applause ]

00:18:52.476 --> 00:18:53.086 A:middle
&gt;&gt; Thank you, Stuart.

00:18:53.686 --> 00:18:55.176 A:middle
Good morning everyone.

00:18:55.726 --> 00:18:57.416 A:middle
My name is Jiten Mehta.

00:18:57.416 --> 00:18:58.706 A:middle
And I'm an engineer on the CF

00:18:58.706 --> 00:18:59.316 A:middle
network team.

00:19:00.266 --> 00:19:01.326 A:middle
Today I'll be talking to you

00:19:01.326 --> 00:19:02.666 A:middle
about some networking best

00:19:02.666 --> 00:19:03.956 A:middle
practices for your apps.

00:19:05.396 --> 00:19:07.076 A:middle
Networking is an essential part

00:19:07.076 --> 00:19:08.386 A:middle
of every application.

00:19:09.346 --> 00:19:10.616 A:middle
Each year, you guys do a great

00:19:10.616 --> 00:19:12.276 A:middle
job of adding awesome features

00:19:12.276 --> 00:19:12.986 A:middle
to your apps.

00:19:13.406 --> 00:19:14.976 A:middle
And today I'll be talking to you

00:19:15.136 --> 00:19:16.706 A:middle
about some simple networking

00:19:16.706 --> 00:19:19.086 A:middle
details, details that can help

00:19:19.086 --> 00:19:20.236 A:middle
make your apps successful.

00:19:20.796 --> 00:19:24.836 A:middle
Our agenda for today is going to

00:19:24.836 --> 00:19:27.296 A:middle
cover four categories: reducing

00:19:27.296 --> 00:19:29.926 A:middle
latency, maximizing throughput,

00:19:31.036 --> 00:19:33.396 A:middle
increasing responsiveness, and

00:19:33.396 --> 00:19:34.876 A:middle
making better use of system

00:19:34.876 --> 00:19:35.596 A:middle
resources.

00:19:36.806 --> 00:19:38.506 A:middle
Before that, let's quickly

00:19:38.506 --> 00:19:40.386 A:middle
review URLSession, the API

00:19:40.386 --> 00:19:40.976 A:middle
you've been using.

00:19:45.526 --> 00:19:47.956 A:middle
URLSession is the recommended

00:19:48.106 --> 00:19:50.306 A:middle
high-level networking API

00:19:50.686 --> 00:19:52.216 A:middle
available on all Apple

00:19:52.216 --> 00:19:52.976 A:middle
platforms.

00:19:54.426 --> 00:19:56.766 A:middle
URLSession has first-class

00:19:56.766 --> 00:20:00.746 A:middle
support for HTTP/2 and HTTP/1.1.

00:19:56.766 --> 00:20:00.746 A:middle
support for HTTP/2 and HTTP/1.1.

00:20:02.056 --> 00:20:04.136 A:middle
If your app does not use HTTP,

00:20:04.136 --> 00:20:05.966 A:middle
we have support for

00:20:06.066 --> 00:20:09.226 A:middle
URLSessionStreamTask, an API

00:20:09.226 --> 00:20:11.056 A:middle
that allows you to make secure

00:20:11.056 --> 00:20:12.946 A:middle
TCP connections to a server over

00:20:13.256 --> 00:20:14.786 A:middle
which you can build your

00:20:14.786 --> 00:20:15.796 A:middle
arbitrary protocol.

00:20:17.136 --> 00:20:18.656 A:middle
That's URLSession.

00:20:19.716 --> 00:20:20.866 A:middle
Let's move on to our first

00:20:20.866 --> 00:20:23.926 A:middle
agenda item: reducing latency.

00:20:25.296 --> 00:20:26.246 A:middle
Let's suppose you and your

00:20:26.246 --> 00:20:28.096 A:middle
friends go to a restaurant where

00:20:28.226 --> 00:20:29.706 A:middle
the waiter walks up to you and

00:20:29.706 --> 00:20:31.296 A:middle
you say, "Can I get a glass of

00:20:31.296 --> 00:20:31.866 A:middle
water please?"

00:20:32.746 --> 00:20:34.576 A:middle
The waiter say, "Sure," walks

00:20:34.576 --> 00:20:35.896 A:middle
away, fetches you a glass of

00:20:35.896 --> 00:20:36.196 A:middle
water.

00:20:37.016 --> 00:20:38.366 A:middle
Your friend then says, "Can I

00:20:38.366 --> 00:20:39.406 A:middle
get a glass of water too?"

00:20:40.066 --> 00:20:41.386 A:middle
The waiter says, "Sure," walks

00:20:41.386 --> 00:20:42.886 A:middle
away, and fetches your friend a

00:20:42.886 --> 00:20:43.876 A:middle
glass of water.

00:20:44.526 --> 00:20:45.576 A:middle
Wouldn't it be faster if the

00:20:45.576 --> 00:20:46.836 A:middle
waiter took everyone's order at

00:20:46.836 --> 00:20:48.556 A:middle
the same time and reduce the

00:20:48.556 --> 00:20:49.486 A:middle
number of round trips?

00:20:50.816 --> 00:20:52.286 A:middle
The idea to reduce latency is

00:20:52.286 --> 00:20:52.746 A:middle
simple.

00:20:53.536 --> 00:20:54.966 A:middle
To reduce the number of back and

00:20:54.966 --> 00:20:56.116 A:middle
forths when you fetch a

00:20:56.116 --> 00:20:56.696 A:middle
resource.

00:20:57.626 --> 00:20:59.896 A:middle
Let's see how your apps can do

00:21:01.836 --> 00:21:01.936 A:middle
this.

00:21:02.136 --> 00:21:03.796 A:middle
First, let's look at some issues

00:21:03.796 --> 00:21:05.446 A:middle
with HTTP/1.1.

00:21:06.896 --> 00:21:07.846 A:middle
Your app wants to fetch a

00:21:07.846 --> 00:21:10.486 A:middle
resource, you can create a

00:21:10.486 --> 00:21:13.196 A:middle
URLSession task and call resume.

00:21:14.146 --> 00:21:16.626 A:middle
URLSession will create a new

00:21:16.626 --> 00:21:17.976 A:middle
connection for you, which

00:21:17.976 --> 00:21:21.136 A:middle
involves DNS, TCP and TLS.

00:21:22.626 --> 00:21:23.826 A:middle
Once the connection to the

00:21:23.826 --> 00:21:25.606 A:middle
server is established, we will

00:21:25.606 --> 00:21:26.656 A:middle
send out your request.

00:21:27.256 --> 00:21:30.046 A:middle
We will then wait to get a

00:21:30.046 --> 00:21:32.446 A:middle
response from the server.

00:21:32.656 --> 00:21:34.176 A:middle
This is the network idle time

00:21:34.356 --> 00:21:35.666 A:middle
when your app is not doing any

00:21:35.666 --> 00:21:37.096 A:middle
kind of networking, waiting to

00:21:37.096 --> 00:21:40.486 A:middle
get a response from the server.

00:21:40.596 --> 00:21:42.616 A:middle
Once we get a response, we will

00:21:42.616 --> 00:21:44.376 A:middle
call your completion block or

00:21:44.376 --> 00:21:46.156 A:middle
message your delegate indicating

00:21:46.156 --> 00:21:47.366 A:middle
that the load has finished.

00:21:47.946 --> 00:21:50.446 A:middle
Let's suppose in the middle of

00:21:50.446 --> 00:21:51.676 A:middle
this load your app wants to

00:21:51.676 --> 00:21:53.086 A:middle
fetch another resource from the

00:21:53.086 --> 00:21:53.756 A:middle
same server.

00:21:54.376 --> 00:21:56.346 A:middle
You can create another

00:21:56.406 --> 00:21:58.776 A:middle
URLSession task called resume

00:21:59.346 --> 00:22:01.766 A:middle
and URLSession will create a new

00:21:59.346 --> 00:22:01.766 A:middle
and URLSession will create a new

00:22:01.766 --> 00:22:03.126 A:middle
connection to fetch this

00:22:03.126 --> 00:22:04.726 A:middle
resource since it does not have

00:22:04.726 --> 00:22:06.006 A:middle
an idle connection in its

00:22:06.006 --> 00:22:06.676 A:middle
connection pool.

00:22:08.136 --> 00:22:09.336 A:middle
If your app wants to fetch yet

00:22:09.336 --> 00:22:10.576 A:middle
another resource from the same

00:22:10.576 --> 00:22:12.616 A:middle
server, you can create another

00:22:12.616 --> 00:22:14.726 A:middle
URLSession task and call resume

00:22:15.126 --> 00:22:16.196 A:middle
and we will create another

00:22:16.196 --> 00:22:17.236 A:middle
connection to fetch the

00:22:17.236 --> 00:22:17.856 A:middle
resource.

00:22:18.376 --> 00:22:21.236 A:middle
In this example, I've shown you

00:22:21.236 --> 00:22:22.616 A:middle
that we've created three

00:22:22.616 --> 00:22:24.236 A:middle
different connections to fetch

00:22:24.306 --> 00:22:25.866 A:middle
these resources from the same

00:22:25.866 --> 00:22:26.356 A:middle
server.

00:22:27.726 --> 00:22:29.246 A:middle
If you notice, we've spent a lot

00:22:29.246 --> 00:22:31.076 A:middle
of time opening new connections.

00:22:31.606 --> 00:22:33.466 A:middle
Let's see how this would look

00:22:33.466 --> 00:22:34.926 A:middle
like if you used a single

00:22:34.926 --> 00:22:35.716 A:middle
connection instead.

00:22:38.416 --> 00:22:39.896 A:middle
This is a single connection

00:22:39.896 --> 00:22:40.306 A:middle
case.

00:22:41.006 --> 00:22:42.436 A:middle
We saved a lot of time by not

00:22:42.436 --> 00:22:44.366 A:middle
opening new connections, but

00:22:44.366 --> 00:22:45.456 A:middle
there is another problem here.

00:22:46.636 --> 00:22:48.406 A:middle
The request number two which is

00:22:48.406 --> 00:22:50.416 A:middle
the green request has to wait

00:22:50.586 --> 00:22:52.316 A:middle
until response number one is

00:22:52.316 --> 00:22:53.056 A:middle
fully received.

00:22:54.216 --> 00:22:55.596 A:middle
The same problem applies to

00:22:55.596 --> 00:22:57.196 A:middle
request number three which is

00:22:57.196 --> 00:22:59.016 A:middle
the orange request which has to

00:22:59.016 --> 00:23:01.116 A:middle
wait until response number two

00:22:59.016 --> 00:23:01.116 A:middle
wait until response number two

00:23:01.356 --> 00:23:02.286 A:middle
is fully received.

00:23:03.436 --> 00:23:05.666 A:middle
This problem is known as HTTP

00:23:05.666 --> 00:23:06.746 A:middle
head-of-line blocking.

00:23:08.096 --> 00:23:10.406 A:middle
Consider moving to HTTP/2.

00:23:11.676 --> 00:23:14.126 A:middle
HTTP/2 uses a single connection,

00:23:14.496 --> 00:23:16.166 A:middle
and it also solves the HTTP

00:23:16.166 --> 00:23:17.866 A:middle
head-of-line blocking problem.

00:23:18.396 --> 00:23:21.956 A:middle
HTTP/2 multiplexes multiple

00:23:21.956 --> 00:23:24.156 A:middle
streams over a single connection

00:23:24.696 --> 00:23:26.756 A:middle
allowing you to receive parallel

00:23:26.756 --> 00:23:28.576 A:middle
responses in an [inaudible]

00:23:28.576 --> 00:23:29.136 A:middle
fashion.

00:23:29.666 --> 00:23:32.456 A:middle
Let's analyze this example a

00:23:32.456 --> 00:23:34.966 A:middle
little more to see how HTTP/2

00:23:35.026 --> 00:23:37.166 A:middle
performs better than HTTP/1.1.

00:23:39.456 --> 00:23:41.406 A:middle
Pay attention to the times when

00:23:41.406 --> 00:23:42.656 A:middle
your app wants to fetch a

00:23:42.656 --> 00:23:44.806 A:middle
resource and the time when the

00:23:44.806 --> 00:23:45.966 A:middle
request is sent out.

00:23:47.206 --> 00:23:50.156 A:middle
In the HTTP/1.1 case, there is a

00:23:50.156 --> 00:23:52.306 A:middle
significant delay between the

00:23:52.306 --> 00:23:53.676 A:middle
time when your app desires a

00:23:53.676 --> 00:23:55.126 A:middle
resource and the time the

00:23:55.126 --> 00:23:56.106 A:middle
request is sent out.

00:23:57.336 --> 00:24:00.336 A:middle
HTTP/2 can significantly reduce

00:23:57.336 --> 00:24:00.336 A:middle
HTTP/2 can significantly reduce

00:24:00.336 --> 00:24:02.916 A:middle
this delay and allows us to send

00:24:02.916 --> 00:24:04.636 A:middle
the request almost immediately

00:24:04.636 --> 00:24:06.256 A:middle
when the app desires the

00:24:06.256 --> 00:24:06.866 A:middle
resource.

00:24:07.306 --> 00:24:11.976 A:middle
Also pay attention to these gray

00:24:11.976 --> 00:24:12.576 A:middle
boxes.

00:24:13.446 --> 00:24:14.946 A:middle
If you recall, this is the

00:24:14.946 --> 00:24:17.016 A:middle
network idle time when your app

00:24:17.016 --> 00:24:18.546 A:middle
is not doing any networking,

00:24:18.836 --> 00:24:20.426 A:middle
waiting to get a response from

00:24:20.506 --> 00:24:21.476 A:middle
the server.

00:24:22.736 --> 00:24:25.606 A:middle
HTTP/2 can significantly reduce

00:24:25.656 --> 00:24:27.876 A:middle
this network idle time allowing

00:24:27.876 --> 00:24:29.376 A:middle
you to better utilize the

00:24:29.376 --> 00:24:31.936 A:middle
bandwidth and load the resources

00:24:31.936 --> 00:24:32.596 A:middle
much faster.

00:24:35.476 --> 00:24:37.236 A:middle
We just discussed many benefits

00:24:37.236 --> 00:24:40.186 A:middle
of using HTTP/2 over HTTP/1.1,

00:24:40.636 --> 00:24:41.726 A:middle
but let's quickly summarize

00:24:41.726 --> 00:24:41.926 A:middle
them.

00:24:43.166 --> 00:24:45.086 A:middle
HTTP/2 solves the head-of-line

00:24:45.086 --> 00:24:46.456 A:middle
blocking problem at the HTTP

00:24:46.456 --> 00:24:47.146 A:middle
layer.

00:24:47.476 --> 00:24:49.696 A:middle
And it also allows you to better

00:24:49.696 --> 00:24:50.686 A:middle
utilize the bandwidth.

00:24:52.286 --> 00:24:54.786 A:middle
If your apps use URLSession, you

00:24:54.786 --> 00:24:55.826 A:middle
don't need to make any

00:24:55.826 --> 00:24:57.016 A:middle
client-side changes.

00:24:57.926 --> 00:25:00.556 A:middle
Simply enable HTTP/2 on your

00:24:57.926 --> 00:25:00.556 A:middle
Simply enable HTTP/2 on your

00:25:00.556 --> 00:25:01.646 A:middle
servers and you will see these

00:25:01.646 --> 00:25:02.246 A:middle
benefits.

00:25:03.736 --> 00:25:06.246 A:middle
By adopting HTTP/2, you can also

00:25:06.246 --> 00:25:07.996 A:middle
get some server-side savings

00:25:08.466 --> 00:25:10.296 A:middle
because devices running your

00:25:10.296 --> 00:25:12.026 A:middle
apps will now make fewer

00:25:12.026 --> 00:25:15.066 A:middle
connections to the servers.

00:25:15.166 --> 00:25:17.286 A:middle
This year, we have something new

00:25:17.386 --> 00:25:19.346 A:middle
in URLSession that is going to

00:25:19.346 --> 00:25:23.946 A:middle
add to the advantages of HTTP/2.

00:25:24.196 --> 00:25:26.496 A:middle
Introducing HTTP/2 Connection

00:25:26.496 --> 00:25:28.106 A:middle
Coalescing for URLSession.

00:25:28.586 --> 00:25:32.376 A:middle
HTTP/2 Connection Coalescing is

00:25:32.376 --> 00:25:33.846 A:middle
going to increase connection to

00:25:33.846 --> 00:25:35.036 A:middle
use even more.

00:25:36.556 --> 00:25:39.226 A:middle
Since your apps are not going to

00:25:39.226 --> 00:25:40.886 A:middle
be opening new connections, they

00:25:40.886 --> 00:25:43.656 A:middle
will become more responsive to

00:25:43.656 --> 00:25:44.276 A:middle
your users.

00:25:45.636 --> 00:25:46.906 A:middle
Starting with the [inaudible],

00:25:46.906 --> 00:25:50.866 A:middle
HTTP/2 Connection Coalescing is

00:25:50.866 --> 00:25:52.246 A:middle
going to be automatically done

00:25:52.246 --> 00:25:54.186 A:middle
on for all your apps using

00:25:54.186 --> 00:25:55.026 A:middle
URLSession.

00:25:56.296 --> 00:25:57.976 A:middle
Now let's see how Connection

00:25:57.976 --> 00:25:59.676 A:middle
Coalescing decides to reuse

00:25:59.676 --> 00:26:00.356 A:middle
connections.

00:25:59.676 --> 00:26:00.356 A:middle
connections.

00:26:00.886 --> 00:26:05.516 A:middle
Let's suppose you have an app

00:26:05.516 --> 00:26:06.806 A:middle
and that app wants to fetch a

00:26:06.806 --> 00:26:09.586 A:middle
resource from menu.example.com.

00:26:10.746 --> 00:26:12.526 A:middle
We open a connection with the

00:26:12.606 --> 00:26:13.836 A:middle
server, and the server presents

00:26:13.836 --> 00:26:14.806 A:middle
us with the certificate.

00:26:16.076 --> 00:26:17.126 A:middle
If your app wants to fetch

00:26:17.126 --> 00:26:18.206 A:middle
another resource from

00:26:18.446 --> 00:26:21.026 A:middle
delivery.example.com, we open

00:26:21.026 --> 00:26:22.486 A:middle
another connection and the

00:26:22.486 --> 00:26:23.556 A:middle
server presents us with another

00:26:23.556 --> 00:26:24.066 A:middle
certificate.

00:26:25.436 --> 00:26:27.526 A:middle
This is the old behavior where

00:26:27.646 --> 00:26:29.556 A:middle
URLSession would create two

00:26:29.556 --> 00:26:31.366 A:middle
connections to fetch these

00:26:31.366 --> 00:26:32.896 A:middle
resources from the given host

00:26:32.896 --> 00:26:33.236 A:middle
names.

00:26:33.726 --> 00:26:36.836 A:middle
But if you look closely, the

00:26:36.936 --> 00:26:39.016 A:middle
first certificate presented to

00:26:39.016 --> 00:26:41.596 A:middle
us covers all the subdomains

00:26:41.796 --> 00:26:44.606 A:middle
under example.com which means

00:26:44.946 --> 00:26:48.536 A:middle
delivery.example.com is covered

00:26:48.566 --> 00:26:50.316 A:middle
by this first certificate.

00:26:50.356 --> 00:26:51.506 A:middle
Also notice that

00:26:51.716 --> 00:26:54.146 A:middle
delivery.example.com, it results

00:26:54.146 --> 00:26:55.906 A:middle
to the same IP address as the

00:26:55.906 --> 00:26:56.886 A:middle
first connection.

00:26:57.426 --> 00:27:00.406 A:middle
At this point, it's safe for us

00:26:57.426 --> 00:27:00.406 A:middle
At this point, it's safe for us

00:27:00.406 --> 00:27:01.486 A:middle
to assume we're talking to the

00:27:01.486 --> 00:27:03.796 A:middle
same endpoint and reuse the

00:27:03.796 --> 00:27:05.726 A:middle
connection instead of opening a

00:27:05.726 --> 00:27:07.346 A:middle
new one when we want to fetch

00:27:07.346 --> 00:27:08.406 A:middle
the second resource.

00:27:09.126 --> 00:27:10.506 A:middle
This saves us time by not

00:27:10.506 --> 00:27:11.936 A:middle
opening a new connection and

00:27:11.936 --> 00:27:13.316 A:middle
makes the load much faster.

00:27:13.896 --> 00:27:16.086 A:middle
HTTP/2 [inaudible] HTTP/2

00:27:16.086 --> 00:27:20.276 A:middle
Connection Coalescing new in iOS

00:27:20.306 --> 00:27:22.156 A:middle
12 and macOS Mojave.

00:27:23.416 --> 00:27:26.296 A:middle
Now let's see how using fewer

00:27:26.386 --> 00:27:28.716 A:middle
URLSession objects can help

00:27:28.716 --> 00:27:29.826 A:middle
reduce latency.

00:27:30.356 --> 00:27:34.656 A:middle
All the benefits of connections

00:27:34.656 --> 00:27:36.876 A:middle
we use that we just discussed in

00:27:36.876 --> 00:27:38.876 A:middle
the previous slides are

00:27:38.876 --> 00:27:41.306 A:middle
applicable only if you use the

00:27:41.306 --> 00:27:43.546 A:middle
same URLSession object to create

00:27:43.546 --> 00:27:44.916 A:middle
your tasks.

00:27:47.016 --> 00:27:48.876 A:middle
It's also important to know that

00:27:48.936 --> 00:27:51.586 A:middle
every URLSession object has a

00:27:51.586 --> 00:27:53.206 A:middle
connection pool and when you

00:27:53.206 --> 00:27:54.506 A:middle
create multiple of these

00:27:54.506 --> 00:27:56.106 A:middle
URLSession objects, you don't

00:27:56.106 --> 00:27:57.606 A:middle
get any benefit of connection to

00:27:57.606 --> 00:27:58.026 A:middle
use.

00:27:59.066 --> 00:28:01.306 A:middle
It's also important to note that

00:27:59.066 --> 00:28:01.306 A:middle
It's also important to note that

00:28:01.356 --> 00:28:02.726 A:middle
the URLSession objects are

00:28:02.726 --> 00:28:04.846 A:middle
fairly expensive to create and

00:28:04.846 --> 00:28:06.206 A:middle
have a non-trivial memory

00:28:06.206 --> 00:28:06.676 A:middle
footprint.

00:28:08.036 --> 00:28:09.776 A:middle
As we have in the past, we

00:28:09.816 --> 00:28:11.726 A:middle
continue to advise you to use

00:28:11.726 --> 00:28:13.466 A:middle
fewer URLSession objects.

00:28:13.986 --> 00:28:17.496 A:middle
Let's move on to our next topic

00:28:17.496 --> 00:28:19.416 A:middle
for the day: maximizing

00:28:19.416 --> 00:28:19.796 A:middle
throughput.

00:28:19.796 --> 00:28:22.596 A:middle
Coming back to our restaurant

00:28:22.596 --> 00:28:23.156 A:middle
example.

00:28:23.986 --> 00:28:25.956 A:middle
The waiter checks up on you and

00:28:25.956 --> 00:28:27.766 A:middle
you say, "Can I get an order of

00:28:28.196 --> 00:28:30.206 A:middle
grilled chicken tossed in creamy

00:28:30.206 --> 00:28:32.006 A:middle
tomato onion gravy made with a

00:28:32.006 --> 00:28:32.646 A:middle
lot of butter?"

00:28:33.906 --> 00:28:34.846 A:middle
Now that's a mouthful.

00:28:35.656 --> 00:28:36.596 A:middle
Wouldn't it be easier if you

00:28:36.596 --> 00:28:38.016 A:middle
just said, "Can I get butter

00:28:38.016 --> 00:28:38.356 A:middle
chicken?"

00:28:39.936 --> 00:28:41.556 A:middle
The idea to maximize throughput

00:28:41.556 --> 00:28:43.216 A:middle
is the same where you reduce the

00:28:43.216 --> 00:28:44.296 A:middle
number of bytes that you

00:28:44.296 --> 00:28:45.766 A:middle
transmit when you want to fetch

00:28:45.816 --> 00:28:46.536 A:middle
a resource.

00:28:47.306 --> 00:28:48.686 A:middle
Let's see how your apps can do

00:28:48.686 --> 00:28:49.036 A:middle
this.

00:28:49.116 --> 00:28:52.796 A:middle
Let's look at a couple of ways

00:28:52.796 --> 00:28:55.086 A:middle
to reduce the request size.

00:28:55.956 --> 00:28:58.246 A:middle
Pay attention to HTTP cookies.

00:28:59.076 --> 00:29:01.646 A:middle
They are not free and have a

00:28:59.076 --> 00:29:01.646 A:middle
They are not free and have a

00:29:01.646 --> 00:29:03.216 A:middle
non-trivial cost in storing and

00:29:03.216 --> 00:29:03.846 A:middle
looking them up.

00:29:05.256 --> 00:29:06.836 A:middle
Cookies are attached to all the

00:29:06.836 --> 00:29:08.676 A:middle
requests that match the domain

00:29:08.676 --> 00:29:09.946 A:middle
and path attribute.

00:29:10.506 --> 00:29:11.856 A:middle
And it can quickly increase your

00:29:11.856 --> 00:29:12.636 A:middle
request size.

00:29:13.996 --> 00:29:15.946 A:middle
Please use the domain and path

00:29:15.946 --> 00:29:17.966 A:middle
attribute wisely to make sure

00:29:17.966 --> 00:29:19.826 A:middle
cookies required by the servers

00:29:19.896 --> 00:29:21.306 A:middle
are attached to your requests.

00:29:22.526 --> 00:29:23.756 A:middle
Use of smaller cookies when

00:29:23.756 --> 00:29:25.336 A:middle
possible, and delete these

00:29:25.336 --> 00:29:26.606 A:middle
cookies when you no longer need

00:29:26.606 --> 00:29:26.846 A:middle
them.

00:29:28.226 --> 00:29:29.896 A:middle
Try to save some state on the

00:29:29.896 --> 00:29:31.686 A:middle
server so you can reduce the

00:29:31.686 --> 00:29:33.246 A:middle
number of client-side cookies.

00:29:33.716 --> 00:29:36.856 A:middle
Also consider moving to HTTP/2

00:29:37.326 --> 00:29:38.766 A:middle
to get benefits of header

00:29:38.766 --> 00:29:39.356 A:middle
compression.

00:29:39.906 --> 00:29:42.476 A:middle
Let's talk a little more about

00:29:42.476 --> 00:29:43.176 A:middle
compression.

00:29:43.706 --> 00:29:48.646 A:middle
HTTP compression, also known as

00:29:48.646 --> 00:29:51.126 A:middle
content and coding, is simply

00:29:51.176 --> 00:29:53.026 A:middle
compressing the data that is

00:29:53.026 --> 00:29:54.616 A:middle
shuttled between the client and

00:29:54.726 --> 00:29:56.096 A:middle
the server.

00:29:56.096 --> 00:29:57.666 A:middle
This allows us to better utilize

00:29:57.696 --> 00:29:58.276 A:middle
the bandwidth.

00:29:59.706 --> 00:30:02.046 A:middle
The algorithms that URLSession

00:29:59.706 --> 00:30:02.046 A:middle
The algorithms that URLSession

00:30:02.246 --> 00:30:05.196 A:middle
supports and recommends are Gzip

00:30:05.196 --> 00:30:05.796 A:middle
and Brotli.

00:30:07.226 --> 00:30:09.756 A:middle
Gzip is widely supported and is

00:30:09.756 --> 00:30:10.706 A:middle
relatively fast.

00:30:11.906 --> 00:30:13.616 A:middle
Brotli support was introduced

00:30:13.616 --> 00:30:16.686 A:middle
last year in iOS 11 and macOS

00:30:16.686 --> 00:30:17.356 A:middle
High Sierra.

00:30:18.626 --> 00:30:20.076 A:middle
Brotli is optimized for

00:30:20.076 --> 00:30:22.136 A:middle
structured text and HTML.

00:30:22.136 --> 00:30:24.356 A:middle
And it has the best compression

00:30:24.356 --> 00:30:26.726 A:middle
ratio on short data.

00:30:27.416 --> 00:30:29.196 A:middle
Please enable compression on

00:30:29.196 --> 00:30:30.726 A:middle
your servers if you haven't done

00:30:30.726 --> 00:30:31.476 A:middle
so already.

00:30:32.016 --> 00:30:34.986 A:middle
Let's move on to our next topic

00:30:34.986 --> 00:30:37.096 A:middle
for the day: increasing

00:30:37.096 --> 00:30:37.926 A:middle
responsiveness.

00:30:39.146 --> 00:30:40.566 A:middle
Coming back to our restaurant

00:30:40.566 --> 00:30:40.926 A:middle
example.

00:30:40.926 --> 00:30:42.906 A:middle
Here you are here in San Jose

00:30:42.906 --> 00:30:44.656 A:middle
for WWDC, and you decide to meet

00:30:44.656 --> 00:30:45.986 A:middle
up with some old friends.

00:30:46.116 --> 00:30:48.086 A:middle
You and your friends are sitting

00:30:48.086 --> 00:30:49.056 A:middle
at the restaurant table.

00:30:49.636 --> 00:30:51.456 A:middle
Your drinks are here, but you

00:30:51.456 --> 00:30:52.746 A:middle
would like some more time to

00:30:52.746 --> 00:30:53.866 A:middle
catch up with your friends

00:30:53.966 --> 00:30:55.216 A:middle
before the food comes out.

00:30:56.216 --> 00:30:57.346 A:middle
You can simply tell the waiter,

00:30:58.076 --> 00:30:58.956 A:middle
"Can you please bring out our

00:30:58.956 --> 00:30:59.926 A:middle
food after some time?

00:30:59.926 --> 00:31:01.216 A:middle
We are in no rush."

00:30:59.926 --> 00:31:01.216 A:middle
We are in no rush."

00:31:02.226 --> 00:31:03.646 A:middle
The same concept can be applied

00:31:03.646 --> 00:31:05.366 A:middle
to responsiveness where you mark

00:31:05.366 --> 00:31:06.866 A:middle
your tasks with priority

00:31:07.096 --> 00:31:08.456 A:middle
depending on the other tasks

00:31:08.506 --> 00:31:09.166 A:middle
that you're doing.

00:31:10.106 --> 00:31:11.306 A:middle
Let's see how your apps can

00:31:11.306 --> 00:31:12.186 A:middle
benefit from this.

00:31:12.566 --> 00:31:16.936 A:middle
You might be familiar with these

00:31:16.936 --> 00:31:19.756 A:middle
five QoS classes associated with

00:31:19.756 --> 00:31:22.026 A:middle
dispatch queues and NSOperation

00:31:22.026 --> 00:31:22.666 A:middle
objects.

00:31:23.616 --> 00:31:24.976 A:middle
Data [inaudible] the CPU

00:31:24.976 --> 00:31:26.096 A:middle
scheduling policy.

00:31:27.656 --> 00:31:31.156 A:middle
URLSession is QoS-aware which

00:31:31.156 --> 00:31:33.356 A:middle
means it will capture the QoS

00:31:33.426 --> 00:31:35.176 A:middle
off the queue on which you call

00:31:35.176 --> 00:31:36.146 A:middle
task.resume.

00:31:37.156 --> 00:31:38.646 A:middle
And all the messages that it

00:31:38.646 --> 00:31:40.296 A:middle
sends to your delegates will

00:31:40.296 --> 00:31:41.086 A:middle
respect this QoS.

00:31:41.086 --> 00:31:44.196 A:middle
Let's take an example.

00:31:45.246 --> 00:31:46.986 A:middle
If your app wants to fetch some

00:31:46.986 --> 00:31:48.786 A:middle
data which is not time critical,

00:31:49.406 --> 00:31:51.476 A:middle
consider resuming that task on a

00:31:51.476 --> 00:31:53.356 A:middle
queue which has background QoS

00:31:54.026 --> 00:31:56.056 A:middle
to make sure this task does not

00:31:56.056 --> 00:31:58.066 A:middle
contend for CPU with other

00:31:58.066 --> 00:31:59.436 A:middle
higher priority work that your

00:31:59.436 --> 00:32:04.016 A:middle
app might be doing.

00:31:59.436 --> 00:32:04.016 A:middle
app might be doing.

00:32:04.186 --> 00:32:06.086 A:middle
Network service type is the

00:32:06.086 --> 00:32:08.156 A:middle
property on the URLSession

00:32:08.226 --> 00:32:10.946 A:middle
configuration object that allows

00:32:10.946 --> 00:32:12.916 A:middle
you to classify your network

00:32:12.916 --> 00:32:15.596 A:middle
traffic that helps the system

00:32:15.596 --> 00:32:17.376 A:middle
prioritize the data leaving the

00:32:17.376 --> 00:32:17.926 A:middle
device.

00:32:19.276 --> 00:32:21.236 A:middle
This year, we have a new network

00:32:21.236 --> 00:32:22.276 A:middle
service type, the

00:32:22.276 --> 00:32:23.346 A:middle
responsiveData.

00:32:24.656 --> 00:32:26.676 A:middle
ResponsiveData is slightly

00:32:26.676 --> 00:32:28.596 A:middle
higher than the default type but

00:32:28.596 --> 00:32:30.416 A:middle
should be used judiciously.

00:32:31.446 --> 00:32:32.906 A:middle
An example where you might want

00:32:32.906 --> 00:32:35.606 A:middle
to use responsiveData is if you

00:32:35.606 --> 00:32:37.856 A:middle
have a shopping app and you are

00:32:37.856 --> 00:32:38.786 A:middle
on the checkout page.

00:32:39.586 --> 00:32:40.816 A:middle
You might want to mark your

00:32:40.886 --> 00:32:42.346 A:middle
payment request with the

00:32:42.346 --> 00:32:44.376 A:middle
responsiveData to make sure you

00:32:44.376 --> 00:32:45.986 A:middle
get a good response from the

00:32:46.496 --> 00:32:46.636 A:middle
server.

00:32:48.096 --> 00:32:49.766 A:middle
Traffic marked with the network

00:32:49.766 --> 00:32:51.676 A:middle
service type property will

00:32:51.676 --> 00:32:53.986 A:middle
maintain this tag across all the

00:32:53.986 --> 00:32:56.386 A:middle
hops when on a Cisco Fast Lane

00:32:56.386 --> 00:32:56.886 A:middle
network.

00:32:58.026 --> 00:32:59.516 A:middle
For more information on this

00:32:59.516 --> 00:33:02.226 A:middle
API, please view the WWDC

00:32:59.516 --> 00:33:02.226 A:middle
API, please view the WWDC

00:33:02.226 --> 00:33:08.086 A:middle
session from the year 2016.

00:33:08.086 --> 00:33:09.736 A:middle
Last year, we introduced the

00:33:09.736 --> 00:33:11.556 A:middle
URLSession Adaptable

00:33:11.556 --> 00:33:12.896 A:middle
Connectivity API

00:33:13.376 --> 00:33:14.596 A:middle
waitsForConnectivity.

00:33:15.976 --> 00:33:18.106 A:middle
waitsForConnectivity will simply

00:33:18.106 --> 00:33:20.736 A:middle
wait instead of failing the load

00:33:21.176 --> 00:33:22.616 A:middle
when your task does not have

00:33:22.666 --> 00:33:23.246 A:middle
connectivity.

00:33:24.606 --> 00:33:26.006 A:middle
In the past, you've been using

00:33:26.006 --> 00:33:28.016 A:middle
STNeworkReachability to do a

00:33:28.016 --> 00:33:29.726 A:middle
preflight check before you send

00:33:29.726 --> 00:33:30.426 A:middle
out your request.

00:33:31.126 --> 00:33:32.486 A:middle
But as Stuart pointed out a few

00:33:32.486 --> 00:33:34.296 A:middle
slides ago, there is a race

00:33:34.296 --> 00:33:36.026 A:middle
condition where the system might

00:33:36.026 --> 00:33:37.046 A:middle
tell you that you have

00:33:37.046 --> 00:33:39.186 A:middle
connectivity to a server but by

00:33:39.186 --> 00:33:40.406 A:middle
the time you create and send

00:33:40.406 --> 00:33:41.946 A:middle
your request, you've lost your

00:33:41.946 --> 00:33:43.336 A:middle
chance and you're no longer

00:33:43.336 --> 00:33:45.826 A:middle
connected to the server.

00:33:45.826 --> 00:33:46.776 A:middle
We recommend using

00:33:46.776 --> 00:33:48.406 A:middle
waitsForConnectivity which will

00:33:48.406 --> 00:33:50.316 A:middle
simply send out your request as

00:33:50.316 --> 00:33:51.436 A:middle
soon as a connection to the

00:33:51.436 --> 00:33:52.496 A:middle
server is available.

00:33:53.946 --> 00:33:55.816 A:middle
Optionally, you can implement

00:33:56.036 --> 00:33:58.066 A:middle
the taskIsWaitigForConnectivity

00:33:58.066 --> 00:33:59.786 A:middle
delegate method which gets

00:33:59.786 --> 00:34:01.116 A:middle
called when your task does not

00:33:59.786 --> 00:34:01.116 A:middle
called when your task does not

00:34:01.116 --> 00:34:01.896 A:middle
have connectivity.

00:34:03.286 --> 00:34:04.876 A:middle
This can be helpful to present

00:34:04.876 --> 00:34:06.426 A:middle
the user with a different flow

00:34:06.686 --> 00:34:09.016 A:middle
or an offline UI for better user

00:34:09.016 --> 00:34:09.766 A:middle
experience.

00:34:11.376 --> 00:34:13.085 A:middle
For more information on this

00:34:13.085 --> 00:34:15.396 A:middle
API, please view the WWDC

00:34:15.396 --> 00:34:16.576 A:middle
session from last year where

00:34:16.766 --> 00:34:18.246 A:middle
this API was introduced.

00:34:18.246 --> 00:34:21.716 A:middle
Now let's move on to our last

00:34:21.716 --> 00:34:23.676 A:middle
topic for the day: making better

00:34:23.676 --> 00:34:25.496 A:middle
use of system resources.

00:34:26.606 --> 00:34:27.596 A:middle
Coming back to our restaurant

00:34:27.596 --> 00:34:28.045 A:middle
example.

00:34:28.496 --> 00:34:30.896 A:middle
You like the food at this place

00:34:31.036 --> 00:34:32.505 A:middle
so much that you decide to come

00:34:32.505 --> 00:34:33.755 A:middle
here for dinner the next day.

00:34:35.025 --> 00:34:36.366 A:middle
The restaurant has a delivery

00:34:36.366 --> 00:34:38.255 A:middle
service where you can place your

00:34:38.255 --> 00:34:40.166 A:middle
order today and they will

00:34:40.166 --> 00:34:41.275 A:middle
deliver the food to your house

00:34:41.275 --> 00:34:41.896 A:middle
the next day.

00:34:42.735 --> 00:34:44.616 A:middle
This not only saves you the time

00:34:44.616 --> 00:34:46.376 A:middle
and effort to go and pick up

00:34:46.376 --> 00:34:48.366 A:middle
your food but it also helps the

00:34:48.366 --> 00:34:50.056 A:middle
restaurant prioritize their work

00:34:50.226 --> 00:34:51.295 A:middle
based on your deadline.

00:34:52.496 --> 00:34:54.366 A:middle
Let's see how your apps can make

00:34:54.366 --> 00:34:56.266 A:middle
better use of system resources

00:34:56.266 --> 00:34:57.326 A:middle
to be more efficient.

00:35:00.056 --> 00:35:02.206 A:middle
Background sessions have upload

00:35:02.206 --> 00:35:03.456 A:middle
and download tasks.

00:35:04.456 --> 00:35:06.156 A:middle
These tasks use system

00:35:06.156 --> 00:35:08.046 A:middle
intelligence to decide when to

00:35:08.046 --> 00:35:09.876 A:middle
start and when to stop a

00:35:09.876 --> 00:35:11.926 A:middle
download based on various

00:35:11.926 --> 00:35:14.486 A:middle
factors like battery, CPU,

00:35:14.716 --> 00:35:15.726 A:middle
Wi-Fi, etcetera.

00:35:17.616 --> 00:35:19.276 A:middle
If your app wants to fetch a

00:35:19.276 --> 00:35:21.416 A:middle
large file, consider using

00:35:21.416 --> 00:35:22.346 A:middle
background sessions.

00:35:23.736 --> 00:35:26.036 A:middle
These tasks run out of process

00:35:26.836 --> 00:35:28.276 A:middle
which means your download will

00:35:28.276 --> 00:35:30.676 A:middle
continue even when your app is

00:35:30.676 --> 00:35:31.766 A:middle
in a suspended state.

00:35:33.036 --> 00:35:34.476 A:middle
For more information on

00:35:34.476 --> 00:35:36.246 A:middle
background sessions, please view

00:35:36.246 --> 00:35:38.096 A:middle
the WWDC session from the year

00:35:38.156 --> 00:35:42.676 A:middle
2014.

00:35:42.796 --> 00:35:44.216 A:middle
Caching is a great way of

00:35:44.276 --> 00:35:46.576 A:middle
reducing latency but it's

00:35:46.576 --> 00:35:48.526 A:middle
important to note that caching

00:35:48.526 --> 00:35:50.076 A:middle
might result in disk IO.

00:35:51.366 --> 00:35:52.816 A:middle
In the real world, we've seen

00:35:52.816 --> 00:35:54.596 A:middle
some apps write several

00:35:54.596 --> 00:35:56.746 A:middle
gigabytes of data to disk each

00:35:56.746 --> 00:35:58.656 A:middle
day which can cause severe flash

00:35:58.656 --> 00:35:59.706 A:middle
storage degradation.

00:36:01.076 --> 00:36:02.286 A:middle
Please don't cache unique

00:36:02.286 --> 00:36:02.746 A:middle
content.

00:36:04.196 --> 00:36:05.166 A:middle
Let's take an example.

00:36:06.096 --> 00:36:08.246 A:middle
Let's suppose you have an app, a

00:36:08.246 --> 00:36:09.856 A:middle
dating app, and you are

00:36:09.856 --> 00:36:11.076 A:middle
responsible for the networking

00:36:11.076 --> 00:36:13.086 A:middle
code of the app.

00:36:13.086 --> 00:36:15.136 A:middle
This app loads user profiles

00:36:15.486 --> 00:36:17.356 A:middle
with high-resolution images.

00:36:18.516 --> 00:36:20.206 A:middle
It might be wasteful to cache

00:36:20.206 --> 00:36:21.826 A:middle
these high-resolution images

00:36:22.346 --> 00:36:23.636 A:middle
because the user might swipe

00:36:23.666 --> 00:36:25.286 A:middle
left, move on to the next

00:36:25.286 --> 00:36:27.236 A:middle
profile, which means that the

00:36:27.236 --> 00:36:28.786 A:middle
images that you just cached are

00:36:28.846 --> 00:36:30.026 A:middle
probably not going to be

00:36:30.026 --> 00:36:30.756 A:middle
requested again.

00:36:32.076 --> 00:36:33.446 A:middle
Please consider making

00:36:33.476 --> 00:36:35.396 A:middle
client-side changes by adopting

00:36:35.396 --> 00:36:37.296 A:middle
the willChacheResponse delegate

00:36:37.296 --> 00:36:39.596 A:middle
method to decide what resources

00:36:39.596 --> 00:36:40.396 A:middle
should be cached.

00:36:41.886 --> 00:36:43.896 A:middle
If you own the servers, please

00:36:43.896 --> 00:36:45.436 A:middle
consider using cache control

00:36:45.436 --> 00:36:48.016 A:middle
headers to decide what resources

00:36:48.016 --> 00:36:48.826 A:middle
should be cacheable.

00:36:49.346 --> 00:36:53.006 A:middle
Let's quickly go over some of

00:36:53.006 --> 00:36:54.246 A:middle
the key points that we discussed

00:36:54.246 --> 00:36:54.506 A:middle
today.

00:36:55.346 --> 00:36:57.286 A:middle
Number one, order all your food

00:36:57.286 --> 00:36:58.316 A:middle
at the same time when you go to

00:36:58.316 --> 00:36:58.836 A:middle
a restaurant.

00:36:59.166 --> 00:37:00.766 A:middle
I'm just kidding.

00:36:59.166 --> 00:37:00.766 A:middle
I'm just kidding.

00:37:01.666 --> 00:37:03.976 A:middle
Move to HTTP/2 today to get wins

00:37:03.976 --> 00:37:05.326 A:middle
like header compression,

00:37:05.546 --> 00:37:07.116 A:middle
connection coalescing and no

00:37:07.116 --> 00:37:07.986 A:middle
head-of-line blocking.

00:37:08.506 --> 00:37:12.596 A:middle
Use fewer URLSession objects to

00:37:12.596 --> 00:37:14.346 A:middle
reduce latency by reusing

00:37:14.346 --> 00:37:15.076 A:middle
connections.

00:37:15.826 --> 00:37:17.816 A:middle
This also reduces the memory

00:37:17.816 --> 00:37:19.666 A:middle
footprint so it's better use of

00:37:19.666 --> 00:37:20.726 A:middle
system resources.

00:37:21.176 --> 00:37:23.936 A:middle
Reduce the request size to

00:37:24.236 --> 00:37:25.456 A:middle
maximize throughput.

00:37:27.316 --> 00:37:29.736 A:middle
Pay attention to QoS to increase

00:37:29.736 --> 00:37:31.386 A:middle
the responsiveness of your apps.

00:37:32.216 --> 00:37:34.146 A:middle
And finally use background

00:37:34.146 --> 00:37:35.896 A:middle
sessions when you can to make

00:37:35.896 --> 00:37:37.856 A:middle
better use of system resources.

00:37:39.536 --> 00:37:40.936 A:middle
For more information on this

00:37:40.936 --> 00:37:42.296 A:middle
session, please visit this

00:37:42.296 --> 00:37:42.726 A:middle
website.

00:37:43.766 --> 00:37:45.006 A:middle
Now we'll have a short break.

00:37:45.696 --> 00:37:46.796 A:middle
And after the break, we'll

00:37:46.796 --> 00:37:47.856 A:middle
introduce you to network

00:37:47.856 --> 00:37:49.856 A:middle
framework, a modern alternative

00:37:49.856 --> 00:37:50.556 A:middle
to Sockets.

00:37:51.246 --> 00:37:52.596 A:middle
I would love to see you all at

00:37:52.596 --> 00:37:54.426 A:middle
the networking labs which are

00:37:54.426 --> 00:37:55.366 A:middle
going to be held today and

00:37:55.366 --> 00:37:55.856 A:middle
tomorrow.

00:37:57.236 --> 00:37:58.546 A:middle
Thank you all for being here.

00:37:58.546 --> 00:38:00.326 A:middle
And I hope everyone has a great

00:37:58.546 --> 00:38:00.326 A:middle
And I hope everyone has a great

00:38:00.326 --> 00:38:01.306 A:middle
rest of the conference.

00:38:02.508 --> 00:38:04.508 A:middle
[ Applause ]
