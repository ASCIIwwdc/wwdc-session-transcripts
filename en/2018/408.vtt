WEBVTT

00:00:08.516 --> 00:00:15.500 A:middle
[ Music ]

00:00:25.516 --> 00:00:29.596 A:middle
[ Applause ]

00:00:30.096 --> 00:00:31.336 A:middle
&gt;&gt; Hello, and good morning

00:00:31.336 --> 00:00:31.906 A:middle
everybody.

00:00:31.906 --> 00:00:32.896 A:middle
I'm glad you could all make it

00:00:32.896 --> 00:00:33.536 A:middle
out this morning.

00:00:34.026 --> 00:00:35.316 A:middle
My name is David Owens.

00:00:35.446 --> 00:00:37.006 A:middle
And I'm an engineer on the Xcode

00:00:37.006 --> 00:00:37.346 A:middle
team.

00:00:37.706 --> 00:00:39.566 A:middle
And today, with my colleague

00:00:39.566 --> 00:00:41.026 A:middle
Jordan Rose, who's an engineer

00:00:41.026 --> 00:00:42.556 A:middle
on the Swift team, we're going

00:00:42.556 --> 00:00:44.406 A:middle
to be talking to you about

00:00:44.406 --> 00:00:46.136 A:middle
building faster in Xcode.

00:00:47.056 --> 00:00:48.626 A:middle
Now, depending on your projects,

00:00:48.686 --> 00:00:49.826 A:middle
their configurations, and their

00:00:49.826 --> 00:00:51.516 A:middle
complexities, there's going to

00:00:51.516 --> 00:00:52.106 A:middle
be a different set of

00:00:52.106 --> 00:00:53.646 A:middle
opportunities that you're going

00:00:53.646 --> 00:00:55.396 A:middle
to be able to take to improve,

00:00:55.536 --> 00:00:57.496 A:middle
or in some cases, significantly

00:00:57.496 --> 00:00:58.936 A:middle
improve the way in which your

00:00:58.936 --> 00:00:59.736 A:middle
builds perform.

00:01:00.996 --> 00:01:02.696 A:middle
So today, when we talk about

00:01:02.696 --> 00:01:04.036 A:middle
building faster in Xcode, we're

00:01:04.646 --> 00:01:05.856 A:middle
going to be looking at it in two

00:01:05.856 --> 00:01:06.786 A:middle
different perspectives.

00:01:07.356 --> 00:01:10.166 A:middle
The first is going to be around

00:01:10.166 --> 00:01:12.056 A:middle
increasing your overall build

00:01:12.056 --> 00:01:12.636 A:middle
efficiency.

00:01:12.636 --> 00:01:15.356 A:middle
And the second, it'll be about

00:01:15.356 --> 00:01:16.696 A:middle
reducing the amount of work that

00:01:16.696 --> 00:01:18.306 A:middle
you do on your builds, and

00:01:18.306 --> 00:01:19.656 A:middle
especially your incremental

00:01:19.656 --> 00:01:20.116 A:middle
builds.

00:01:21.756 --> 00:01:22.966 A:middle
Now, I'm going to be walking you

00:01:22.966 --> 00:01:23.556 A:middle
through some of the

00:01:23.556 --> 00:01:25.326 A:middle
project-level items, including

00:01:25.326 --> 00:01:26.626 A:middle
how to parallelize your build

00:01:26.696 --> 00:01:27.296 A:middle
process.

00:01:27.846 --> 00:01:29.146 A:middle
How to declare and configure

00:01:29.146 --> 00:01:30.506 A:middle
your run script phases.

00:01:31.256 --> 00:01:32.306 A:middle
And I'll be walking you through

00:01:32.606 --> 00:01:34.266 A:middle
some new functionality in Xcode

00:01:34.266 --> 00:01:34.596 A:middle
10

00:01:34.916 --> 00:01:36.016 A:middle
around measuring your build

00:01:38.256 --> 00:01:38.386 A:middle
times.

00:01:38.566 --> 00:01:39.446 A:middle
Now, Jordan is going to be

00:01:39.446 --> 00:01:40.556 A:middle
walking us through some of the

00:01:40.626 --> 00:01:41.716 A:middle
source-level improvements that

00:01:41.716 --> 00:01:43.056 A:middle
we can make to our projects,

00:01:43.516 --> 00:01:44.636 A:middle
including understanding our

00:01:44.636 --> 00:01:45.756 A:middle
dependence using Swift.

00:01:46.486 --> 00:01:47.926 A:middle
Dealing with complex expressions

00:01:47.926 --> 00:01:48.486 A:middle
in Swift.

00:01:49.436 --> 00:01:50.416 A:middle
And how to limit your

00:01:50.416 --> 00:01:52.436 A:middle
Objective-C to Swift interfaces.

00:01:54.016 --> 00:01:55.126 A:middle
So let's talk about

00:01:55.126 --> 00:01:56.056 A:middle
parallelizing your build.

00:01:56.676 --> 00:01:58.816 A:middle
Now, Xcode configures your

00:01:58.816 --> 00:02:00.086 A:middle
projects through the use of

00:01:58.816 --> 00:02:00.086 A:middle
projects through the use of

00:02:00.086 --> 00:02:00.736 A:middle
targets.

00:02:01.606 --> 00:02:04.016 A:middle
And targets specify the output

00:02:04.016 --> 00:02:04.976 A:middle
or the product that you would

00:02:04.976 --> 00:02:05.566 A:middle
like to build.

00:02:06.226 --> 00:02:07.916 A:middle
Some examples are iOS app,

00:02:08.756 --> 00:02:10.545 A:middle
framework, and unit tests.

00:02:11.276 --> 00:02:12.776 A:middle
Now, there's another piece of

00:02:12.776 --> 00:02:13.846 A:middle
information, that's the

00:02:13.846 --> 00:02:15.046 A:middle
dependency between these

00:02:15.046 --> 00:02:15.696 A:middle
targets.

00:02:16.226 --> 00:02:17.886 A:middle
And Xcode provides us two ways

00:02:18.326 --> 00:02:19.526 A:middle
to define our dependencies.

00:02:19.816 --> 00:02:21.556 A:middle
There's an explicit means, which

00:02:21.556 --> 00:02:22.396 A:middle
we do through the target

00:02:22.396 --> 00:02:23.436 A:middle
dependencies phase.

00:02:24.046 --> 00:02:25.276 A:middle
And there's an implicit means,

00:02:25.336 --> 00:02:26.586 A:middle
which is primarily done through

00:02:26.586 --> 00:02:28.116 A:middle
the linked binary with libraries

00:02:28.116 --> 00:02:28.526 A:middle
phase.

00:02:28.926 --> 00:02:29.806 A:middle
And we'll be taking a look at

00:02:29.806 --> 00:02:32.026 A:middle
those more in depth in just a

00:02:32.026 --> 00:02:32.696 A:middle
few moments.

00:02:33.426 --> 00:02:34.546 A:middle
Now, throughout this section I

00:02:34.546 --> 00:02:35.956 A:middle
want to use a sample project to

00:02:35.956 --> 00:02:36.996 A:middle
ground our discussion.

00:02:37.686 --> 00:02:38.656 A:middle
And so we're going to take a

00:02:38.656 --> 00:02:40.006 A:middle
look at a dependency graph for

00:02:40.006 --> 00:02:40.686 A:middle
that project.

00:02:41.706 --> 00:02:43.736 A:middle
Now, a dependency graph is

00:02:43.796 --> 00:02:45.416 A:middle
simply a listing of all of the

00:02:45.416 --> 00:02:46.006 A:middle
targets.

00:02:46.146 --> 00:02:47.206 A:middle
And this case we're going to

00:02:47.206 --> 00:02:48.236 A:middle
have five targets that we're

00:02:48.236 --> 00:02:48.896 A:middle
going to be building.

00:02:50.226 --> 00:02:51.336 A:middle
And it has that dependency

00:02:51.336 --> 00:02:52.906 A:middle
information between those

00:02:52.906 --> 00:02:53.466 A:middle
targets.

00:02:54.376 --> 00:02:55.966 A:middle
And based on these two pieces of

00:02:55.966 --> 00:02:58.696 A:middle
information Xcode can derive our

00:02:58.696 --> 00:02:59.226 A:middle
build order.

00:02:59.226 --> 00:03:01.696 A:middle
Now, let's take a look at what

00:02:59.226 --> 00:03:01.696 A:middle
Now, let's take a look at what

00:03:01.696 --> 00:03:02.966 A:middle
this looks like on a timeline

00:03:02.966 --> 00:03:03.246 A:middle
graph.

00:03:03.306 --> 00:03:08.086 A:middle
So as we can see, each of these

00:03:08.086 --> 00:03:09.486 A:middle
targets are building in in

00:03:09.486 --> 00:03:10.876 A:middle
order, sequentially.

00:03:11.396 --> 00:03:12.796 A:middle
And they each have to wait until

00:03:12.796 --> 00:03:13.946 A:middle
the previous target is done

00:03:13.946 --> 00:03:14.386 A:middle
building.

00:03:14.786 --> 00:03:16.366 A:middle
Now, there's nothing wrong with

00:03:16.366 --> 00:03:17.946 A:middle
this build timeline, per se.

00:03:18.356 --> 00:03:20.436 A:middle
But it does represent a waste of

00:03:20.436 --> 00:03:22.026 A:middle
potential hardware utilization,

00:03:22.376 --> 00:03:23.146 A:middle
especially if you have a

00:03:23.146 --> 00:03:24.326 A:middle
multi-core or a mini-core

00:03:24.326 --> 00:03:25.846 A:middle
machine like an iMac Pro.

00:03:26.726 --> 00:03:28.356 A:middle
And what that means to you is a

00:03:28.356 --> 00:03:29.616 A:middle
waste of time as a developer.

00:03:30.346 --> 00:03:32.416 A:middle
So instead, we want to move to

00:03:32.416 --> 00:03:34.466 A:middle
something that looks more like

00:03:37.476 --> 00:03:37.576 A:middle
this.

00:03:37.786 --> 00:03:38.846 A:middle
Now, there's a couple things --

00:03:38.846 --> 00:03:39.876 A:middle
or a few things I want to note

00:03:39.876 --> 00:03:40.456 A:middle
about this.

00:03:40.926 --> 00:03:42.726 A:middle
First, the amount of work that

00:03:42.726 --> 00:03:43.936 A:middle
we actually did in building our

00:03:43.936 --> 00:03:45.286 A:middle
project, it did not change.

00:03:46.696 --> 00:03:48.806 A:middle
However, the time to build did

00:03:48.806 --> 00:03:49.456 A:middle
decrease.

00:03:50.126 --> 00:03:51.396 A:middle
And in this case, it actually

00:03:51.396 --> 00:03:52.426 A:middle
decreased by a fairly

00:03:52.426 --> 00:03:53.486 A:middle
significant margin.

00:03:53.946 --> 00:03:56.196 A:middle
And we were able to decrease our

00:03:56.196 --> 00:03:57.666 A:middle
build time by making better

00:03:57.726 --> 00:03:59.466 A:middle
utilization of the hardware that

00:03:59.466 --> 00:04:02.736 A:middle
we have available to us.

00:03:59.466 --> 00:04:02.736 A:middle
we have available to us.

00:04:02.946 --> 00:04:04.736 A:middle
So, if parallelization -- or

00:04:04.736 --> 00:04:07.366 A:middle
parallelization is such a good

00:04:07.366 --> 00:04:09.036 A:middle
thing, why don't we just create

00:04:09.036 --> 00:04:10.126 A:middle
a build graph that looks like

00:04:10.126 --> 00:04:10.326 A:middle
this?

00:04:10.536 --> 00:04:11.796 A:middle
We just build everything at once

00:04:11.796 --> 00:04:13.016 A:middle
up front in our build timeline.

00:04:14.156 --> 00:04:16.276 A:middle
Well, in the best case, you're

00:04:16.276 --> 00:04:17.516 A:middle
going to deterministic build

00:04:17.856 --> 00:04:18.875 A:middle
errors.

00:04:19.096 --> 00:04:20.596 A:middle
And this because that dependency

00:04:20.596 --> 00:04:22.076 A:middle
information is actually a vital

00:04:22.076 --> 00:04:23.326 A:middle
part of your project

00:04:23.326 --> 00:04:24.136 A:middle
configuration.

00:04:24.796 --> 00:04:25.916 A:middle
And when it's set up like this,

00:04:26.636 --> 00:04:28.306 A:middle
you're trying to build, for

00:04:28.306 --> 00:04:29.956 A:middle
example, your game target before

00:04:29.956 --> 00:04:31.196 A:middle
you've built your dependencies.

00:04:31.456 --> 00:04:32.526 A:middle
So, this is not a good state to

00:04:32.526 --> 00:04:32.816 A:middle
be in.

00:04:34.176 --> 00:04:35.216 A:middle
So, how do we get there?

00:04:35.876 --> 00:04:37.906 A:middle
How do we get from the long,

00:04:37.906 --> 00:04:39.896 A:middle
serialized build timeline to the

00:04:39.896 --> 00:04:43.486 A:middle
better parallelized build time?

00:04:44.356 --> 00:04:45.586 A:middle
Well first, we need to make sure

00:04:45.586 --> 00:04:48.206 A:middle
that Xcode is actually set up

00:04:48.206 --> 00:04:49.446 A:middle
and configured to allow our

00:04:49.446 --> 00:04:51.076 A:middle
targets to be built in parallel.

00:04:51.126 --> 00:04:52.516 A:middle
And we do that through the

00:04:52.516 --> 00:04:53.056 A:middle
Scheme Editor.

00:04:53.796 --> 00:04:54.876 A:middle
You can get to the Scheme Editor

00:04:54.876 --> 00:04:56.226 A:middle
by opening the Scheme Chooser

00:04:57.176 --> 00:04:58.366 A:middle
and selecting Edit Scheme.

00:04:58.836 --> 00:05:00.696 A:middle
And specifically, you'll need to

00:04:58.836 --> 00:05:00.696 A:middle
And specifically, you'll need to

00:05:00.696 --> 00:05:01.826 A:middle
look at the Build Action.

00:05:02.936 --> 00:05:05.046 A:middle
And in there, the Build Options.

00:05:05.366 --> 00:05:06.866 A:middle
Now, there are two listed here.

00:05:07.196 --> 00:05:08.866 A:middle
The first is Parallelize Build.

00:05:08.986 --> 00:05:10.916 A:middle
And the second is Find Implicit

00:05:10.916 --> 00:05:11.656 A:middle
Dependencies.

00:05:12.426 --> 00:05:13.856 A:middle
You'll want to check Parallelize

00:05:13.926 --> 00:05:14.146 A:middle
Build.

00:05:14.706 --> 00:05:16.176 A:middle
This will allow Xcode to use the

00:05:16.176 --> 00:05:17.656 A:middle
dependency information across

00:05:17.656 --> 00:05:19.296 A:middle
your targets so that it can

00:05:19.296 --> 00:05:20.846 A:middle
attempt to build your targets in

00:05:20.846 --> 00:05:21.376 A:middle
parallel.

00:05:21.956 --> 00:05:24.646 A:middle
So let's look at how your

00:05:24.936 --> 00:05:25.996 A:middle
dependencies are actually

00:05:25.996 --> 00:05:27.116 A:middle
configured within Xcode.

00:05:28.286 --> 00:05:29.406 A:middle
This is done through the Build

00:05:29.406 --> 00:05:30.036 A:middle
Phase Editor.

00:05:30.586 --> 00:05:31.496 A:middle
And you can get to the Build

00:05:31.496 --> 00:05:33.616 A:middle
Phase Editor by going to your

00:05:33.616 --> 00:05:35.566 A:middle
Project Navigator and selecting

00:05:35.566 --> 00:05:36.116 A:middle
your project.

00:05:36.636 --> 00:05:37.806 A:middle
In this case we're looking at

00:05:37.806 --> 00:05:39.556 A:middle
the Game Target -- or the Game

00:05:39.556 --> 00:05:39.916 A:middle
Project.

00:05:40.326 --> 00:05:43.296 A:middle
Next, you want to click on Build

00:05:43.296 --> 00:05:43.816 A:middle
Phases.

00:05:44.916 --> 00:05:46.036 A:middle
So, let's take a look at the

00:05:46.036 --> 00:05:46.626 A:middle
Game Target.

00:05:46.866 --> 00:05:47.946 A:middle
This is the Build Phase Editor

00:05:47.946 --> 00:05:48.806 A:middle
for our Game Target.

00:05:48.886 --> 00:05:50.156 A:middle
And we're going to look at how

00:05:50.156 --> 00:05:51.536 A:middle
its dependencies are configured.

00:05:52.056 --> 00:05:52.826 A:middle
And I want to call your

00:05:52.826 --> 00:05:54.916 A:middle
attention first to the Link

00:05:55.186 --> 00:05:57.166 A:middle
Binary with Libraries phase.

00:05:57.836 --> 00:05:59.446 A:middle
Now, this is the phase of your

00:05:59.446 --> 00:06:00.746 A:middle
build process where you define

00:05:59.446 --> 00:06:00.746 A:middle
build process where you define

00:06:00.746 --> 00:06:01.866 A:middle
all of the items that you would

00:06:01.916 --> 00:06:03.566 A:middle
like to link with your target.

00:06:04.676 --> 00:06:06.046 A:middle
In this case I have two items.

00:06:06.046 --> 00:06:08.346 A:middle
I have Physics and Utilities.

00:06:08.716 --> 00:06:11.526 A:middle
Now, these are targets within

00:06:11.526 --> 00:06:12.856 A:middle
our project and our workspace.

00:06:13.086 --> 00:06:14.696 A:middle
So Xcode can create an implicit

00:06:14.696 --> 00:06:16.716 A:middle
dependency on those targets.

00:06:17.766 --> 00:06:19.356 A:middle
If you're using other linking

00:06:19.356 --> 00:06:22.156 A:middle
features such as Autolink or the

00:06:22.216 --> 00:06:23.756 A:middle
other LD Build Flags build

00:06:23.786 --> 00:06:25.416 A:middle
setting, those are not going to

00:06:25.416 --> 00:06:27.256 A:middle
be made available to you here

00:06:27.256 --> 00:06:27.846 A:middle
implicitly.

00:06:28.166 --> 00:06:29.236 A:middle
So you either have to make an

00:06:29.236 --> 00:06:30.636 A:middle
explicit dependency in this

00:06:30.686 --> 00:06:33.756 A:middle
build phase, or in the Target

00:06:33.756 --> 00:06:34.996 A:middle
Dependencies build phase.

00:06:35.396 --> 00:06:37.806 A:middle
So you can see here that we have

00:06:37.806 --> 00:06:38.686 A:middle
another item here called

00:06:38.686 --> 00:06:39.206 A:middle
Shaders.

00:06:39.616 --> 00:06:42.106 A:middle
And Shaders is something that is

00:06:42.106 --> 00:06:43.926 A:middle
not used at link time, but

00:06:43.926 --> 00:06:45.776 A:middle
instead it's used by another

00:06:45.776 --> 00:06:47.126 A:middle
build phase within our current

00:06:47.126 --> 00:06:47.456 A:middle
target.

00:06:48.096 --> 00:06:49.316 A:middle
So it's important that we let

00:06:49.316 --> 00:06:50.926 A:middle
Xcode know that this is a

00:06:50.926 --> 00:06:52.256 A:middle
dependency and that we need to

00:06:52.256 --> 00:06:54.506 A:middle
wait for the Shaders to finish

00:06:54.566 --> 00:06:57.046 A:middle
its compilation and build before

00:06:57.046 --> 00:06:57.886 A:middle
we can actually build the

00:06:57.886 --> 00:06:58.876 A:middle
current target we're on.

00:06:59.406 --> 00:07:02.336 A:middle
Now, this target actually exists

00:06:59.406 --> 00:07:02.336 A:middle
Now, this target actually exists

00:07:02.336 --> 00:07:03.256 A:middle
in a different project.

00:07:03.846 --> 00:07:05.626 A:middle
And if you would like to make a

00:07:05.626 --> 00:07:06.826 A:middle
reference to that project you

00:07:06.826 --> 00:07:08.376 A:middle
can do so by dragging the

00:07:08.376 --> 00:07:10.266 A:middle
project as a child of the

00:07:10.266 --> 00:07:11.346 A:middle
current project you're working

00:07:11.346 --> 00:07:11.526 A:middle
in.

00:07:11.526 --> 00:07:13.776 A:middle
So I want to walk through the

00:07:13.776 --> 00:07:14.806 A:middle
rest of the dependencies of our

00:07:14.806 --> 00:07:15.276 A:middle
project.

00:07:16.576 --> 00:07:17.916 A:middle
Our Shaders target has a

00:07:17.916 --> 00:07:19.196 A:middle
dependency on our Utilities

00:07:19.196 --> 00:07:19.506 A:middle
target.

00:07:20.886 --> 00:07:22.196 A:middle
Our Utilities target has a

00:07:22.196 --> 00:07:23.806 A:middle
dependency on our Physics

00:07:23.806 --> 00:07:24.106 A:middle
target.

00:07:25.146 --> 00:07:27.206 A:middle
And lastly, our Tests have a

00:07:27.206 --> 00:07:30.516 A:middle
dependency on our Shaders and

00:07:30.516 --> 00:07:31.676 A:middle
our Utilities targets.

00:07:32.616 --> 00:07:33.206 A:middle
So now that we have an

00:07:33.206 --> 00:07:34.296 A:middle
understanding of the

00:07:34.296 --> 00:07:35.806 A:middle
configuration of our project,

00:07:35.806 --> 00:07:37.266 A:middle
let's look at the steps that are

00:07:37.266 --> 00:07:38.996 A:middle
necessary to turn this

00:07:38.996 --> 00:07:41.106 A:middle
serialized build process into

00:07:41.446 --> 00:07:43.106 A:middle
one that we can build more in

00:07:43.106 --> 00:07:43.556 A:middle
parallel.

00:07:44.136 --> 00:07:45.286 A:middle
And we're going to start by

00:07:45.286 --> 00:07:46.136 A:middle
looking at our test

00:07:46.136 --> 00:07:46.746 A:middle
dependencies.

00:07:48.876 --> 00:07:50.566 A:middle
Now, I've broken down the

00:07:50.566 --> 00:07:51.556 A:middle
dependencies into three

00:07:51.556 --> 00:07:52.366 A:middle
different classes of

00:07:52.366 --> 00:07:53.556 A:middle
dependencies that I want to talk

00:07:53.556 --> 00:07:53.896 A:middle
about.

00:07:54.466 --> 00:07:55.866 A:middle
This first dependency is the

00:07:55.866 --> 00:07:57.366 A:middle
dependency that I call the "Do

00:07:57.366 --> 00:07:58.646 A:middle
Everything" dependency.

00:07:59.316 --> 00:08:00.566 A:middle
Right? It should a little bit

00:07:59.316 --> 00:08:00.566 A:middle
Right? It should a little bit

00:08:00.566 --> 00:08:01.946 A:middle
clear here that this test is

00:08:02.036 --> 00:08:03.686 A:middle
testing way too many components.

00:08:04.056 --> 00:08:05.096 A:middle
It's testing our Game.

00:08:05.516 --> 00:08:06.596 A:middle
It's testing our Shaders.

00:08:07.236 --> 00:08:08.606 A:middle
And it's testing our Utilities.

00:08:10.056 --> 00:08:11.866 A:middle
Now in this case, it'd be better

00:08:11.866 --> 00:08:13.426 A:middle
to simply break up our tests so

00:08:13.426 --> 00:08:14.366 A:middle
that it's testing each

00:08:14.366 --> 00:08:15.356 A:middle
individual component.

00:08:15.356 --> 00:08:17.586 A:middle
And we're going to see by doing

00:08:17.586 --> 00:08:18.686 A:middle
this, we're going to introduce

00:08:18.686 --> 00:08:20.416 A:middle
our first bit of parallelism

00:08:20.466 --> 00:08:21.766 A:middle
into our build process.

00:08:23.306 --> 00:08:25.246 A:middle
Right? Our test target, which

00:08:25.246 --> 00:08:26.676 A:middle
was built in all three can now

00:08:26.736 --> 00:08:27.926 A:middle
build just the component that

00:08:27.926 --> 00:08:28.956 A:middle
it's looking for in the Game

00:08:28.956 --> 00:08:29.466 A:middle
tests.

00:08:30.436 --> 00:08:31.896 A:middle
And then our Shaders tests and

00:08:31.896 --> 00:08:33.816 A:middle
our Utilities tests can be moved

00:08:33.816 --> 00:08:34.996 A:middle
to be built in parallel with our

00:08:34.996 --> 00:08:35.775 A:middle
other targets.

00:08:36.066 --> 00:08:37.236 A:middle
And they can be built as soon as

00:08:37.236 --> 00:08:38.395 A:middle
their respective components are

00:08:38.395 --> 00:08:40.456 A:middle
done, Shaders and Utilities.

00:08:42.285 --> 00:08:44.626 A:middle
Now, the next type of dependency

00:08:44.626 --> 00:08:46.696 A:middle
I want to look at is the

00:08:46.696 --> 00:08:48.526 A:middle
dependency that I call the "Nosy

00:08:48.526 --> 00:08:49.126 A:middle
Neighbors."

00:08:49.706 --> 00:08:51.596 A:middle
This is the dependency that

00:08:51.596 --> 00:08:53.426 A:middle
needs to exist.

00:08:53.586 --> 00:08:54.806 A:middle
It's look at another target.

00:08:55.136 --> 00:08:56.636 A:middle
But it only needs a little bit

00:08:56.636 --> 00:08:57.226 A:middle
of that target.

00:08:57.946 --> 00:08:59.276 A:middle
But instead it's getting

00:08:59.276 --> 00:09:00.146 A:middle
everything that's in that

00:08:59.276 --> 00:09:00.146 A:middle
everything that's in that

00:09:00.146 --> 00:09:00.426 A:middle
target.

00:09:01.226 --> 00:09:02.386 A:middle
So if we look at our game, it

00:09:02.806 --> 00:09:04.506 A:middle
has a dependency on Physics,

00:09:04.676 --> 00:09:05.696 A:middle
Shaders, and Utilities.

00:09:06.046 --> 00:09:06.906 A:middle
This is actually okay.

00:09:08.196 --> 00:09:09.936 A:middle
The suspect one is the

00:09:09.936 --> 00:09:11.306 A:middle
dependency between our Shaders

00:09:11.306 --> 00:09:13.026 A:middle
target and our Utilities target.

00:09:13.786 --> 00:09:15.436 A:middle
Now, our Shaders target produces

00:09:15.436 --> 00:09:16.936 A:middle
a meta library, which is

00:09:16.936 --> 00:09:18.556 A:middle
essentially just a bundle of GPU

00:09:18.556 --> 00:09:19.596 A:middle
code that's going to run on our

00:09:19.596 --> 00:09:20.256 A:middle
graphics card.

00:09:21.376 --> 00:09:23.286 A:middle
And our Utilities target just

00:09:23.286 --> 00:09:24.696 A:middle
produces a normal frame, which

00:09:24.696 --> 00:09:25.666 A:middle
is just CPU code.

00:09:25.936 --> 00:09:26.906 A:middle
So there's already a little bit

00:09:26.906 --> 00:09:28.946 A:middle
of a suspect dependency here.

00:09:29.506 --> 00:09:30.926 A:middle
When we dig into it we see that

00:09:30.926 --> 00:09:32.796 A:middle
the utilities target actually

00:09:32.796 --> 00:09:34.466 A:middle
has a build phase in it that's

00:09:34.466 --> 00:09:36.316 A:middle
generating some information

00:09:36.316 --> 00:09:37.566 A:middle
that's used by both targets.

00:09:37.826 --> 00:09:38.726 A:middle
Which is totally fine.

00:09:39.276 --> 00:09:40.466 A:middle
It's just that Shaders doesn't

00:09:40.466 --> 00:09:42.016 A:middle
need anything else from the

00:09:42.016 --> 00:09:42.796 A:middle
Utilities target.

00:09:43.306 --> 00:09:46.016 A:middle
So it's best to break out that

00:09:46.016 --> 00:09:47.356 A:middle
into its own target.

00:09:48.226 --> 00:09:49.666 A:middle
And we're going to see that this

00:09:49.666 --> 00:09:50.866 A:middle
small incremental change

00:09:50.866 --> 00:09:52.196 A:middle
actually has a large and

00:09:52.196 --> 00:09:53.666 A:middle
significant impact on our

00:09:53.666 --> 00:09:54.746 A:middle
overall build timeline.

00:09:56.826 --> 00:09:58.446 A:middle
So the new green box that just

00:09:58.446 --> 00:09:59.896 A:middle
moved in is our new code target.

00:10:00.186 --> 00:10:01.476 A:middle
So we were able to shrink our

00:10:01.476 --> 00:10:03.426 A:middle
utilities target down because we

00:10:03.426 --> 00:10:05.346 A:middle
moved that work into Code Gen.

00:10:06.076 --> 00:10:07.426 A:middle
And since Code Gen has no other

00:10:07.426 --> 00:10:09.336 A:middle
dependencies, it can move to the

00:10:09.336 --> 00:10:11.176 A:middle
very front of our build process.

00:10:11.506 --> 00:10:13.056 A:middle
It can also be built in parallel

00:10:13.346 --> 00:10:14.516 A:middle
with our Physics target, which

00:10:14.516 --> 00:10:15.686 A:middle
is the red box on the bottom.

00:10:17.146 --> 00:10:18.756 A:middle
And lastly, because Shaders no

00:10:18.756 --> 00:10:20.436 A:middle
longer depends on Utilities, it

00:10:20.436 --> 00:10:21.616 A:middle
doesn't have to wait for both

00:10:21.616 --> 00:10:24.686 A:middle
Utilities and the Physics target

00:10:24.936 --> 00:10:25.396 A:middle
to be built.

00:10:25.686 --> 00:10:26.896 A:middle
And instead it can be built as

00:10:26.896 --> 00:10:29.046 A:middle
soon as that Code Gen target is

00:10:30.456 --> 00:10:30.566 A:middle
done.

00:10:30.766 --> 00:10:31.986 A:middle
Now, the last dependency I want

00:10:31.986 --> 00:10:33.476 A:middle
to talk to you about are the

00:10:33.476 --> 00:10:34.926 A:middle
ones that I call the "Forgotten

00:10:34.926 --> 00:10:35.336 A:middle
Ones."

00:10:35.826 --> 00:10:37.906 A:middle
Throughout the evolution or the

00:10:37.906 --> 00:10:40.376 A:middle
lifecycle of our products and

00:10:40.376 --> 00:10:42.956 A:middle
our code, we tend to move code

00:10:42.956 --> 00:10:44.106 A:middle
around and delete things.

00:10:44.106 --> 00:10:45.046 A:middle
And we get things like dead

00:10:45.096 --> 00:10:45.356 A:middle
code.

00:10:45.766 --> 00:10:47.056 A:middle
Well, we get the same thing that

00:10:47.056 --> 00:10:48.326 A:middle
happens with our dependencies.

00:10:48.706 --> 00:10:49.816 A:middle
Sometimes we simply forget to

00:10:49.816 --> 00:10:50.376 A:middle
clean them up.

00:10:51.386 --> 00:10:52.506 A:middle
And so in these cases, it's

00:10:52.926 --> 00:10:54.306 A:middle
actually safe to just remove

00:10:54.306 --> 00:10:54.976 A:middle
that dependency.

00:10:56.456 --> 00:10:58.276 A:middle
And this last change tightens up

00:10:58.276 --> 00:11:00.396 A:middle
or build graph even further by

00:10:58.276 --> 00:11:00.396 A:middle
or build graph even further by

00:11:00.396 --> 00:11:03.156 A:middle
allowing the Utilities target to

00:11:03.156 --> 00:11:04.716 A:middle
be built right after the Code

00:11:04.716 --> 00:11:06.146 A:middle
Gen target instead of having to

00:11:06.146 --> 00:11:07.196 A:middle
wait for all of the Physics

00:11:07.196 --> 00:11:11.156 A:middle
target to be done.

00:11:11.346 --> 00:11:13.746 A:middle
Now, previously in Xcode, when

00:11:13.746 --> 00:11:15.046 A:middle
you built targets that have a

00:11:15.046 --> 00:11:16.396 A:middle
dependency on another target,

00:11:16.396 --> 00:11:18.326 A:middle
you have to wait for the

00:11:18.326 --> 00:11:19.646 A:middle
dependent target to finish its

00:11:19.646 --> 00:11:21.236 A:middle
entire build process.

00:11:21.756 --> 00:11:23.096 A:middle
Well, we have a new feature in

00:11:23.096 --> 00:11:24.916 A:middle
Xcode 10 that allows us to

00:11:24.916 --> 00:11:27.046 A:middle
introduce some parallelism into

00:11:27.046 --> 00:11:28.086 A:middle
your build for free.

00:11:28.596 --> 00:11:32.226 A:middle
And we do this by starting the

00:11:32.226 --> 00:11:34.626 A:middle
compilation of your target as

00:11:34.626 --> 00:11:36.596 A:middle
soon as the build phases that go

00:11:36.596 --> 00:11:38.666 A:middle
into its dependencies that

00:11:38.706 --> 00:11:40.206 A:middle
satisfy our compilation are

00:11:40.206 --> 00:11:40.636 A:middle
complete.

00:11:41.696 --> 00:11:42.926 A:middle
So things like linking can now

00:11:42.926 --> 00:11:43.746 A:middle
be done in parallel.

00:11:45.936 --> 00:11:47.486 A:middle
Now, if you have run script

00:11:47.486 --> 00:11:49.266 A:middle
phases, this is one of those

00:11:49.316 --> 00:11:50.896 A:middle
build phases that your target is

00:11:50.996 --> 00:11:53.216 A:middle
going to have to wait on to

00:11:53.216 --> 00:11:54.796 A:middle
finish in order before it can

00:11:54.796 --> 00:11:56.436 A:middle
start taking advantage of some

00:11:56.806 --> 00:11:58.476 A:middle
of these new parallelization

00:11:58.476 --> 00:11:58.886 A:middle
benefits.

00:11:58.956 --> 00:12:01.476 A:middle
So let's talk about run script

00:11:58.956 --> 00:12:01.476 A:middle
So let's talk about run script

00:12:01.476 --> 00:12:01.976 A:middle
phases.

00:12:02.776 --> 00:12:04.116 A:middle
Run script phases allow you to

00:12:04.116 --> 00:12:05.636 A:middle
customize your build process to

00:12:05.636 --> 00:12:06.496 A:middle
meet your needs.

00:12:07.066 --> 00:12:08.436 A:middle
And so with this flexibility

00:12:08.826 --> 00:12:10.436 A:middle
comes some responsibility for

00:12:10.436 --> 00:12:11.906 A:middle
you as a developer as well.

00:12:12.316 --> 00:12:13.206 A:middle
And so we want to walk you

00:12:13.206 --> 00:12:14.266 A:middle
through the configuration

00:12:14.266 --> 00:12:15.856 A:middle
process and make sure that you

00:12:15.856 --> 00:12:17.196 A:middle
have your run script phases set

00:12:17.196 --> 00:12:18.866 A:middle
up and configured well so that

00:12:18.866 --> 00:12:19.856 A:middle
your builds behave.

00:12:22.116 --> 00:12:24.446 A:middle
Now, this is your Script Phase

00:12:24.446 --> 00:12:24.786 A:middle
Editor.

00:12:25.226 --> 00:12:26.566 A:middle
It can also be found within your

00:12:26.566 --> 00:12:27.356 A:middle
Build Phase Editor.

00:12:27.356 --> 00:12:28.766 A:middle
Now I want to call your

00:12:28.766 --> 00:12:31.406 A:middle
attention to first the script

00:12:31.696 --> 00:12:32.176 A:middle
body here.

00:12:32.786 --> 00:12:33.916 A:middle
You can either put your entire

00:12:33.916 --> 00:12:34.916 A:middle
script contents here.

00:12:34.916 --> 00:12:36.176 A:middle
Or you can do what I've done and

00:12:36.176 --> 00:12:37.456 A:middle
reference another script that's

00:12:37.456 --> 00:12:38.286 A:middle
within your project.

00:12:39.666 --> 00:12:40.876 A:middle
Now, throughout the entirety of

00:12:40.876 --> 00:12:42.806 A:middle
your run script phase, there are

00:12:42.806 --> 00:12:43.996 A:middle
a set of build settings that are

00:12:43.996 --> 00:12:44.746 A:middle
available to you.

00:12:44.906 --> 00:12:45.926 A:middle
And I'm making use of one of

00:12:45.926 --> 00:12:47.266 A:middle
those right now, which is the

00:12:47.266 --> 00:12:47.746 A:middle
source group.

00:12:48.956 --> 00:12:50.506 A:middle
This gives you a convenient way

00:12:50.506 --> 00:12:52.646 A:middle
to not have to provide absolute

00:12:52.646 --> 00:12:54.336 A:middle
paths or try to do some relative

00:12:54.336 --> 00:12:55.956 A:middle
path hacks to get your stuff to

00:12:55.956 --> 00:12:56.116 A:middle
work.

00:12:57.436 --> 00:12:59.676 A:middle
The next section are you input

00:12:59.676 --> 00:13:00.136 A:middle
files.

00:12:59.676 --> 00:13:00.136 A:middle
files.

00:13:00.836 --> 00:13:02.286 A:middle
Now, these are very important

00:13:02.286 --> 00:13:03.536 A:middle
for your run script phase.

00:13:03.896 --> 00:13:05.356 A:middle
As this is one of the key pieces

00:13:05.356 --> 00:13:07.126 A:middle
of information that the Xcode

00:13:07.126 --> 00:13:08.386 A:middle
Build System will use to

00:13:08.386 --> 00:13:09.606 A:middle
determine if your run scripts

00:13:09.606 --> 00:13:12.146 A:middle
should actually run or not.

00:13:12.146 --> 00:13:13.946 A:middle
So this should include any file

00:13:13.946 --> 00:13:15.986 A:middle
that your run script phase, the

00:13:16.026 --> 00:13:17.426 A:middle
script content, is actually

00:13:17.426 --> 00:13:18.986 A:middle
going to read or look at during

00:13:18.986 --> 00:13:19.646 A:middle
its process.

00:13:21.096 --> 00:13:23.306 A:middle
Now, some of you may have a lot

00:13:23.876 --> 00:13:25.316 A:middle
of inputs into your run script

00:13:25.316 --> 00:13:25.676 A:middle
phase.

00:13:25.816 --> 00:13:27.086 A:middle
And so this task might seem a

00:13:27.086 --> 00:13:27.906 A:middle
little bit daunting.

00:13:28.506 --> 00:13:31.046 A:middle
And so new in Xcode 10 we have

00:13:31.046 --> 00:13:32.666 A:middle
the ability for you -- or we've

00:13:32.666 --> 00:13:33.776 A:middle
provided you the ability to

00:13:33.776 --> 00:13:34.966 A:middle
maintain this list in an

00:13:34.966 --> 00:13:37.426 A:middle
external file, something we call

00:13:37.426 --> 00:13:38.236 A:middle
a File List.

00:13:39.626 --> 00:13:41.056 A:middle
Now, a file list is a simple

00:13:41.256 --> 00:13:42.996 A:middle
text file that has all of its

00:13:42.996 --> 00:13:44.826 A:middle
inputs listed on its own line.

00:13:46.226 --> 00:13:47.246 A:middle
You get access to all of the

00:13:47.246 --> 00:13:48.866 A:middle
same build settings that were

00:13:48.866 --> 00:13:49.946 A:middle
available to you throughout the

00:13:49.946 --> 00:13:51.026 A:middle
context of your run script

00:13:51.026 --> 00:13:51.456 A:middle
phase.

00:13:52.656 --> 00:13:53.806 A:middle
The important thing to note

00:13:53.806 --> 00:13:54.796 A:middle
here, though, is that these

00:13:54.796 --> 00:13:56.376 A:middle
files cannot be modified or

00:13:56.376 --> 00:13:57.606 A:middle
generated throughout your build

00:13:57.646 --> 00:13:58.306 A:middle
process.

00:13:58.766 --> 00:14:00.796 A:middle
They are read when your build

00:13:58.766 --> 00:14:00.796 A:middle
They are read when your build

00:14:00.796 --> 00:14:01.666 A:middle
process starts.

00:14:02.086 --> 00:14:03.376 A:middle
And all that information is used

00:14:03.376 --> 00:14:03.576 A:middle
then.

00:14:03.576 --> 00:14:07.216 A:middle
Next I want to talk to you about

00:14:07.216 --> 00:14:08.266 A:middle
your output files.

00:14:08.516 --> 00:14:09.596 A:middle
Your output files are another

00:14:09.596 --> 00:14:10.886 A:middle
key piece of information that's

00:14:10.886 --> 00:14:11.816 A:middle
used throughout your build

00:14:11.866 --> 00:14:12.396 A:middle
process.

00:14:13.016 --> 00:14:14.086 A:middle
And Xcode will use this

00:14:14.086 --> 00:14:15.926 A:middle
information to determine if your

00:14:15.926 --> 00:14:17.436 A:middle
run script phase actually needs

00:14:17.436 --> 00:14:17.786 A:middle
to run.

00:14:17.886 --> 00:14:20.616 A:middle
And of course, we have support

00:14:20.616 --> 00:14:23.026 A:middle
for output files -- or file

00:14:23.026 --> 00:14:24.166 A:middle
lists for your output files as

00:14:24.166 --> 00:14:24.376 A:middle
well.

00:14:25.336 --> 00:14:27.066 A:middle
So I want to recap for you when

00:14:27.066 --> 00:14:28.186 A:middle
your run script phase is

00:14:28.186 --> 00:14:28.726 A:middle
actually run.

00:14:29.856 --> 00:14:31.186 A:middle
If you have no input files

00:14:31.186 --> 00:14:33.896 A:middle
declared, the Xcode build system

00:14:34.076 --> 00:14:35.186 A:middle
will need to run to your run

00:14:35.186 --> 00:14:36.566 A:middle
script phase on every single

00:14:36.566 --> 00:14:36.896 A:middle
build.

00:14:37.556 --> 00:14:38.936 A:middle
So this is one of key reasons

00:14:38.936 --> 00:14:40.106 A:middle
it's important to declare your

00:14:40.106 --> 00:14:40.626 A:middle
inputs.

00:14:42.006 --> 00:14:43.476 A:middle
Now if any of your input files

00:14:43.476 --> 00:14:45.396 A:middle
change, including the contents

00:14:45.396 --> 00:14:47.996 A:middle
of your file lists or any of the

00:14:47.996 --> 00:14:49.506 A:middle
inputs that the file lists point

00:14:49.506 --> 00:14:51.376 A:middle
to, Xcode will know that it

00:14:51.376 --> 00:14:52.596 A:middle
needs to rerun your run script

00:14:52.596 --> 00:14:53.196 A:middle
phase for you.

00:14:53.696 --> 00:14:56.216 A:middle
And finally, if any of your

00:14:56.216 --> 00:14:58.426 A:middle
output files are missing, the

00:14:58.426 --> 00:14:59.876 A:middle
Xcode build system will run your

00:14:59.876 --> 00:15:01.116 A:middle
run script phase to give you the

00:14:59.876 --> 00:15:01.116 A:middle
run script phase to give you the

00:15:01.116 --> 00:15:03.126 A:middle
opportunity to generate those

00:15:03.366 --> 00:15:04.606 A:middle
missing output files.

00:15:05.836 --> 00:15:08.446 A:middle
Now also new in Xcode 10, we

00:15:08.446 --> 00:15:10.466 A:middle
have documentation for the run

00:15:10.466 --> 00:15:11.396 A:middle
script phases.

00:15:12.516 --> 00:15:16.916 A:middle
[ Applause ]

00:15:17.416 --> 00:15:18.746 A:middle
So, it goes through more detail

00:15:18.746 --> 00:15:19.966 A:middle
of what I just explained and it

00:15:19.966 --> 00:15:20.726 A:middle
tells you about all of the

00:15:20.726 --> 00:15:21.886 A:middle
additional build settings that

00:15:21.886 --> 00:15:22.956 A:middle
are made available to you,

00:15:23.256 --> 00:15:24.546 A:middle
including how you can use those

00:15:24.736 --> 00:15:26.146 A:middle
file lists within your own

00:15:26.146 --> 00:15:26.906 A:middle
script content.

00:15:28.216 --> 00:15:29.636 A:middle
Now, when setting up your run

00:15:29.636 --> 00:15:30.896 A:middle
script phases and declaring all

00:15:30.896 --> 00:15:32.166 A:middle
of these new dependencies, and

00:15:32.166 --> 00:15:34.046 A:middle
including when you modify the

00:15:34.046 --> 00:15:35.316 A:middle
dependencies in your targets,

00:15:35.866 --> 00:15:37.596 A:middle
you may run into a dependency

00:15:37.596 --> 00:15:37.986 A:middle
cycle.

00:15:38.636 --> 00:15:40.386 A:middle
And a dependency cycle is simply

00:15:40.516 --> 00:15:42.036 A:middle
an interdependency graph

00:15:42.036 --> 00:15:43.226 A:middle
somewhere there is a loop that's

00:15:43.226 --> 00:15:43.706 A:middle
created.

00:15:44.836 --> 00:15:46.346 A:middle
Well, new in Xcode 10 we have

00:15:46.346 --> 00:15:48.586 A:middle
better diagnostics to detect

00:15:48.586 --> 00:15:49.836 A:middle
these cycles and will give you

00:15:49.836 --> 00:15:51.546 A:middle
an error, including the ability

00:15:51.546 --> 00:15:53.046 A:middle
for you to expand this box to

00:15:53.046 --> 00:15:54.406 A:middle
get all of the inputs that the

00:15:54.406 --> 00:15:56.076 A:middle
Xcode build system knows that

00:15:56.076 --> 00:15:57.516 A:middle
went into creating the cycle.

00:15:58.916 --> 00:16:01.016 A:middle
So, cycles are bad for a couple

00:15:58.916 --> 00:16:01.016 A:middle
So, cycles are bad for a couple

00:16:01.746 --> 00:16:02.636 A:middle
of reasons.

00:16:02.716 --> 00:16:04.516 A:middle
One, they represent a

00:16:04.516 --> 00:16:05.956 A:middle
configuration issue within your

00:16:05.956 --> 00:16:06.386 A:middle
project.

00:16:07.306 --> 00:16:08.846 A:middle
And two, they can be the source

00:16:08.846 --> 00:16:10.176 A:middle
of spurious rebuilds within your

00:16:10.176 --> 00:16:10.676 A:middle
project.

00:16:11.126 --> 00:16:12.346 A:middle
Or of getting out-of-date

00:16:12.346 --> 00:16:13.346 A:middle
information in your build

00:16:13.386 --> 00:16:13.956 A:middle
process.

00:16:15.176 --> 00:16:17.236 A:middle
So we also have updated health

00:16:17.286 --> 00:16:19.156 A:middle
topics on dependency cycles,

00:16:20.026 --> 00:16:22.356 A:middle
including some specific sections

00:16:22.356 --> 00:16:26.086 A:middle
that we call out of the most

00:16:26.086 --> 00:16:28.236 A:middle
likely dependency cycles that

00:16:28.236 --> 00:16:29.626 A:middle
you run into, and ways that you

00:16:29.626 --> 00:16:30.276 A:middle
can fix those.

00:16:30.796 --> 00:16:34.636 A:middle
So, the last thing I want to

00:16:34.636 --> 00:16:35.966 A:middle
talk to you about today, is

00:16:35.966 --> 00:16:37.256 A:middle
measuring your build time.

00:16:37.516 --> 00:16:39.406 A:middle
We have two new pieces of

00:16:39.406 --> 00:16:40.666 A:middle
functionality in Xcode 10 for

00:16:40.666 --> 00:16:40.976 A:middle
this.

00:16:42.436 --> 00:16:45.026 A:middle
The first is we have introduced

00:16:45.126 --> 00:16:47.016 A:middle
in-line task times to give you

00:16:47.016 --> 00:16:48.226 A:middle
the duration that each of your

00:16:48.226 --> 00:16:49.586 A:middle
tasks has taken to run.

00:16:49.586 --> 00:16:52.796 A:middle
Now, I want to point out

00:16:52.796 --> 00:16:54.156 A:middle
something about your build logs.

00:16:54.586 --> 00:16:55.886 A:middle
There's a filter bar across the

00:16:55.886 --> 00:16:56.236 A:middle
top.

00:16:57.166 --> 00:16:58.956 A:middle
And specifically, the All the

00:16:58.956 --> 00:17:00.866 A:middle
Recent filters.

00:16:58.956 --> 00:17:00.866 A:middle
Recent filters.

00:17:02.236 --> 00:17:03.306 A:middle
When you have "All" selected,

00:17:03.306 --> 00:17:04.626 A:middle
it's going to show you all of

00:17:04.626 --> 00:17:05.866 A:middle
the tasks that went into

00:17:05.866 --> 00:17:07.586 A:middle
creating your entire final

00:17:07.586 --> 00:17:08.506 A:middle
product outputs.

00:17:09.396 --> 00:17:10.435 A:middle
Which is usually not what you

00:17:10.435 --> 00:17:11.116 A:middle
want to look at.

00:17:11.546 --> 00:17:12.455 A:middle
What you want to look at,

00:17:12.455 --> 00:17:13.616 A:middle
especially when you're trying to

00:17:13.616 --> 00:17:15.486 A:middle
diagnose issues in your

00:17:15.486 --> 00:17:16.965 A:middle
incremental builds, is the

00:17:16.965 --> 00:17:17.586 A:middle
Recent tab.

00:17:18.506 --> 00:17:20.646 A:middle
That's going to show you all of

00:17:20.646 --> 00:17:22.096 A:middle
the build paths that went into

00:17:22.266 --> 00:17:23.886 A:middle
the previous build operation.

00:17:26.536 --> 00:17:29.056 A:middle
Now, another new feature in

00:17:29.056 --> 00:17:31.236 A:middle
Xcode 10 is a timing summary.

00:17:31.526 --> 00:17:32.616 A:middle
And you can get to this timing

00:17:32.616 --> 00:17:34.326 A:middle
summary by going to the Product

00:17:34.326 --> 00:17:36.066 A:middle
menu, selecting Perform with

00:17:36.066 --> 00:17:38.196 A:middle
Action, and Build with Timing

00:17:38.196 --> 00:17:38.576 A:middle
Summary.

00:17:39.796 --> 00:17:40.736 A:middle
When you do that, you're going

00:17:40.736 --> 00:17:42.046 A:middle
to get a new log section out at

00:17:42.046 --> 00:17:43.046 A:middle
the end of your build log.

00:17:43.116 --> 00:17:47.606 A:middle
And if we focus in, you're going

00:17:47.606 --> 00:17:48.346 A:middle
to see that it's going to give

00:17:48.346 --> 00:17:50.026 A:middle
you an aggregate timing of all

00:17:50.026 --> 00:17:51.866 A:middle
of the tasks that went into your

00:17:51.866 --> 00:17:53.116 A:middle
last build operation.

00:17:53.916 --> 00:17:54.786 A:middle
So this is another important

00:17:54.786 --> 00:17:56.586 A:middle
reason to look at the Recent

00:17:56.736 --> 00:17:57.376 A:middle
filter tab.

00:17:57.856 --> 00:18:00.196 A:middle
And there's one specifically I

00:17:57.856 --> 00:18:00.196 A:middle
And there's one specifically I

00:18:00.196 --> 00:18:01.936 A:middle
want to point to, the Phase

00:18:01.936 --> 00:18:03.086 A:middle
Script Execution.

00:18:03.836 --> 00:18:05.196 A:middle
So, you can see in our last

00:18:05.196 --> 00:18:06.966 A:middle
build that we just did, we had a

00:18:06.966 --> 00:18:07.886 A:middle
shell script that ran.

00:18:07.886 --> 00:18:08.816 A:middle
There was only one of them.

00:18:08.816 --> 00:18:09.676 A:middle
It says one task.

00:18:10.276 --> 00:18:11.726 A:middle
And it's taken 5 seconds.

00:18:12.496 --> 00:18:14.266 A:middle
If you're seeing these on every

00:18:14.266 --> 00:18:15.476 A:middle
single one of your incremental

00:18:15.476 --> 00:18:17.126 A:middle
builds, this is a good

00:18:17.126 --> 00:18:18.506 A:middle
indication that you have

00:18:18.506 --> 00:18:19.796 A:middle
something misconfigured in your

00:18:19.796 --> 00:18:20.556 A:middle
run script phase.

00:18:20.996 --> 00:18:21.836 A:middle
And that's something you might

00:18:21.836 --> 00:18:23.726 A:middle
want to address to help decrease

00:18:23.726 --> 00:18:24.986 A:middle
your overall build times.

00:18:28.456 --> 00:18:29.906 A:middle
Now, this build timing summary

00:18:30.256 --> 00:18:32.526 A:middle
is also available to you from

00:18:32.616 --> 00:18:34.796 A:middle
the Command line by passing in

00:18:35.096 --> 00:18:36.536 A:middle
the Show Build Timing Summary

00:18:36.536 --> 00:18:37.456 A:middle
flag.

00:18:39.566 --> 00:18:40.976 A:middle
And so now I want to bring up

00:18:40.976 --> 00:18:42.186 A:middle
Jordan, who's going to talk to

00:18:42.186 --> 00:18:42.926 A:middle
you about some of the

00:18:42.926 --> 00:18:44.166 A:middle
source-level improvements that

00:18:44.166 --> 00:18:45.186 A:middle
you can make to your project.

00:18:46.516 --> 00:18:51.966 A:middle
[ Applause ]

00:18:52.466 --> 00:18:53.176 A:middle
&gt;&gt; Thanks, David.

00:18:53.996 --> 00:18:54.456 A:middle
All right.

00:18:54.456 --> 00:18:56.066 A:middle
So we've gone over a bunch of

00:18:56.066 --> 00:18:57.936 A:middle
ways where you can improve your

00:18:57.936 --> 00:18:59.906 A:middle
Xcode projects just by doing one

00:18:59.906 --> 00:19:00.886 A:middle
small change.

00:18:59.906 --> 00:19:00.886 A:middle
small change.

00:19:01.266 --> 00:19:02.116 A:middle
And before we get to the

00:19:02.116 --> 00:19:03.346 A:middle
source-level and file-level

00:19:03.346 --> 00:19:05.256 A:middle
topics, I want to talk about one

00:19:05.256 --> 00:19:07.016 A:middle
more that's new in Xcode 10.

00:19:07.016 --> 00:19:10.656 A:middle
And it's a particular workaround

00:19:10.656 --> 00:19:11.626 A:middle
that we know that some of you

00:19:11.626 --> 00:19:13.096 A:middle
have been using on your projects

00:19:13.346 --> 00:19:14.666 A:middle
to make them build faster if

00:19:14.666 --> 00:19:15.976 A:middle
they have a lot of Swift files.

00:19:17.696 --> 00:19:18.936 A:middle
You've already heard about this.

00:19:19.636 --> 00:19:21.026 A:middle
It's the Whole Module setting

00:19:21.026 --> 00:19:22.186 A:middle
being used in a debug

00:19:22.186 --> 00:19:23.166 A:middle
configuration.

00:19:23.966 --> 00:19:25.266 A:middle
So, in previous versions of

00:19:25.266 --> 00:19:27.236 A:middle
Xcode, for some projects,

00:19:27.236 --> 00:19:28.446 A:middle
turning on the Whole Module

00:19:28.446 --> 00:19:30.646 A:middle
Compilation mode, even for debug

00:19:30.706 --> 00:19:32.496 A:middle
builds, produced a faster

00:19:32.496 --> 00:19:34.886 A:middle
overall build than when used in

00:19:34.886 --> 00:19:36.336 A:middle
Default Incremental Modes.

00:19:37.326 --> 00:19:39.186 A:middle
And, this did improve build

00:19:39.246 --> 00:19:40.846 A:middle
times because it was able to

00:19:40.846 --> 00:19:42.656 A:middle
share -- Swift's compiler was

00:19:42.656 --> 00:19:44.546 A:middle
able to share work across files

00:19:44.916 --> 00:19:46.026 A:middle
in a way that the Incremental

00:19:46.026 --> 00:19:46.846 A:middle
Mode was not.

00:19:47.386 --> 00:19:48.576 A:middle
But it also meant that you were

00:19:48.576 --> 00:19:49.806 A:middle
giving up your incremental

00:19:49.806 --> 00:19:51.286 A:middle
builds and would rebuild the

00:19:51.286 --> 00:19:52.826 A:middle
entire target's worth of Swift

00:19:52.826 --> 00:19:54.446 A:middle
files every time.

00:19:55.346 --> 00:19:57.266 A:middle
So in Xcode 10 we've improved

00:19:57.266 --> 00:19:58.926 A:middle
the incremental build to have

00:19:58.926 --> 00:20:00.546 A:middle
some of that same work sharing

00:19:58.926 --> 00:20:00.546 A:middle
some of that same work sharing

00:20:00.546 --> 00:20:01.416 A:middle
across files.

00:20:01.416 --> 00:20:02.986 A:middle
So you should no longer need to

00:20:02.986 --> 00:20:04.646 A:middle
use Whole Module mode to get

00:20:04.646 --> 00:20:06.660 A:middle
good build times.

00:20:08.516 --> 00:20:11.376 A:middle
[ Applause ]

00:20:11.876 --> 00:20:13.066 A:middle
So, if you've done this in your

00:20:13.066 --> 00:20:14.846 A:middle
project, then you should go back

00:20:14.846 --> 00:20:15.966 A:middle
to your Build Settings Editor

00:20:16.176 --> 00:20:17.246 A:middle
and select the debug

00:20:17.246 --> 00:20:18.426 A:middle
configuration under the

00:20:18.426 --> 00:20:19.866 A:middle
Compilation Mode build setting

00:20:20.316 --> 00:20:21.466 A:middle
and hit Delete.

00:20:22.186 --> 00:20:23.606 A:middle
That will get it back to Xcode's

00:20:23.606 --> 00:20:24.926 A:middle
default setting of an

00:20:24.926 --> 00:20:25.716 A:middle
incremental build.

00:20:25.846 --> 00:20:27.916 A:middle
I'm not going to talk much more

00:20:27.916 --> 00:20:29.236 A:middle
about this because you already

00:20:29.236 --> 00:20:29.826 A:middle
heard about it.

00:20:30.096 --> 00:20:31.066 A:middle
We mentioned it in the "What's

00:20:31.066 --> 00:20:32.596 A:middle
New in Swift" talk on Tuesday.

00:20:33.056 --> 00:20:35.206 A:middle
And if you do want to know more,

00:20:35.336 --> 00:20:36.786 A:middle
we'll cover this and other

00:20:36.786 --> 00:20:37.956 A:middle
topics about your build in

00:20:37.956 --> 00:20:39.496 A:middle
greater depth in tomorrow's

00:20:39.496 --> 00:20:40.966 A:middle
session "Behind the Scenes of

00:20:40.966 --> 00:20:42.266 A:middle
the Xcode Build Process."

00:20:42.266 --> 00:20:46.606 A:middle
So we have a lot of topics that

00:20:46.606 --> 00:20:47.346 A:middle
we're trying to get through

00:20:47.346 --> 00:20:47.786 A:middle
today.

00:20:47.786 --> 00:20:49.376 A:middle
And David's already covered half

00:20:49.376 --> 00:20:49.766 A:middle
of them.

00:20:50.006 --> 00:20:51.346 A:middle
I'm going to talk about the

00:20:51.346 --> 00:20:53.156 A:middle
remaining three dealing with

00:20:53.156 --> 00:20:54.806 A:middle
complex expressions at the top

00:20:54.806 --> 00:20:55.606 A:middle
of that list.

00:20:56.506 --> 00:20:58.186 A:middle
And the reason for this is

00:20:58.186 --> 00:20:59.126 A:middle
because it's the best one that

00:20:59.126 --> 00:21:01.966 A:middle
exemplifies a key takeaway for

00:20:59.126 --> 00:21:01.966 A:middle
exemplifies a key takeaway for

00:21:01.966 --> 00:21:03.066 A:middle
both of our sections.

00:21:03.866 --> 00:21:05.206 A:middle
When a build is taking a long

00:21:05.206 --> 00:21:07.266 A:middle
time, there's often a key piece

00:21:07.266 --> 00:21:08.556 A:middle
of information that you can

00:21:08.556 --> 00:21:11.076 A:middle
provide to Xcode to improve the

00:21:11.076 --> 00:21:11.896 A:middle
situation.

00:21:13.036 --> 00:21:13.946 A:middle
And so we're going to look at

00:21:13.946 --> 00:21:16.006 A:middle
that first in the context of

00:21:16.006 --> 00:21:17.446 A:middle
complex Swift expressions.

00:21:18.066 --> 00:21:21.546 A:middle
So here's an example of some

00:21:21.546 --> 00:21:22.836 A:middle
code from my latest project.

00:21:23.966 --> 00:21:26.406 A:middle
And the problem with this struct

00:21:26.966 --> 00:21:28.666 A:middle
is that I use it all over the

00:21:28.666 --> 00:21:29.206 A:middle
place.

00:21:30.076 --> 00:21:31.496 A:middle
And it's perfectly fine to have

00:21:31.496 --> 00:21:31.926 A:middle
a struct.

00:21:32.166 --> 00:21:33.016 A:middle
It's perfectly fine to have a

00:21:33.016 --> 00:21:34.136 A:middle
struct with a property.

00:21:34.136 --> 00:21:35.346 A:middle
And it's fine to have a struct

00:21:35.596 --> 00:21:37.496 A:middle
with a property with an inferred

00:21:37.496 --> 00:21:37.826 A:middle
type.

00:21:38.516 --> 00:21:39.696 A:middle
But the expression that we're

00:21:39.696 --> 00:21:41.806 A:middle
inferring that type from here is

00:21:41.806 --> 00:21:43.236 A:middle
a little bit complicated.

00:21:43.416 --> 00:21:44.986 A:middle
It's not something simple like

00:21:45.256 --> 00:21:47.146 A:middle
-- Oh, I took out a build from

00:21:47.146 --> 00:21:47.806 A:middle
my slides.

00:21:48.126 --> 00:21:50.096 A:middle
So I've given away the answer

00:21:50.096 --> 00:21:50.426 A:middle
here.

00:21:50.586 --> 00:21:53.316 A:middle
If this were something like 0.0,

00:21:53.816 --> 00:21:55.506 A:middle
then this inference of double

00:21:55.506 --> 00:21:56.736 A:middle
here wouldn't really have been

00:21:56.736 --> 00:21:57.636 A:middle
necessary.

00:21:58.126 --> 00:21:59.696 A:middle
But since we've got this big,

00:21:59.696 --> 00:22:01.256 A:middle
complicated expression involving

00:21:59.696 --> 00:22:01.256 A:middle
complicated expression involving

00:22:01.256 --> 00:22:03.236 A:middle
reduced and the power function

00:22:03.236 --> 00:22:06.586 A:middle
from the system frameworks, you

00:22:06.586 --> 00:22:08.026 A:middle
might not have even guessed that

00:22:08.026 --> 00:22:09.566 A:middle
"double" was inferred type of

00:22:09.566 --> 00:22:10.296 A:middle
this property.

00:22:11.066 --> 00:22:12.126 A:middle
And so by providing this

00:22:12.126 --> 00:22:14.076 A:middle
information here, you've saved

00:22:14.076 --> 00:22:15.406 A:middle
work that the compiler would

00:22:15.406 --> 00:22:17.796 A:middle
have to do in every file that

00:22:17.826 --> 00:22:18.876 A:middle
uses this struct.

00:22:19.626 --> 00:22:21.636 A:middle
And you've also saved work that

00:22:21.636 --> 00:22:23.046 A:middle
your coworkers would have to do

00:22:23.336 --> 00:22:25.086 A:middle
to figure out what really is the

00:22:25.086 --> 00:22:26.086 A:middle
type of that big number

00:22:26.086 --> 00:22:26.576 A:middle
property.

00:22:27.156 --> 00:22:30.166 A:middle
So a lot of times you can get

00:22:30.166 --> 00:22:31.226 A:middle
this extra key piece of

00:22:31.226 --> 00:22:32.596 A:middle
information that will help your

00:22:32.596 --> 00:22:34.786 A:middle
build times is also an example

00:22:34.786 --> 00:22:36.036 A:middle
of a good software engineering

00:22:36.036 --> 00:22:36.666 A:middle
practice.

00:22:37.806 --> 00:22:38.846 A:middle
Let's take a look at another

00:22:38.846 --> 00:22:40.516 A:middle
example involving closures.

00:22:41.536 --> 00:22:43.286 A:middle
This time I'm trying to define a

00:22:43.286 --> 00:22:44.936 A:middle
function that will return the

00:22:44.936 --> 00:22:47.156 A:middle
sum of the non-optional values

00:22:47.156 --> 00:22:48.186 A:middle
of its arguments.

00:22:48.926 --> 00:22:50.156 A:middle
And if all three arguments are

00:22:50.156 --> 00:22:51.826 A:middle
nil, it will return nil.

00:22:53.136 --> 00:22:54.696 A:middle
And I'm trying to use one of

00:22:54.696 --> 00:22:56.726 A:middle
Swift's cool features where if

00:22:56.726 --> 00:22:58.526 A:middle
you have a closure with a single

00:22:58.526 --> 00:23:00.646 A:middle
expression in its body, then the

00:22:58.526 --> 00:23:00.646 A:middle
expression in its body, then the

00:23:00.646 --> 00:23:02.026 A:middle
compiler will use that

00:23:02.026 --> 00:23:03.986 A:middle
expression to help determine the

00:23:03.986 --> 00:23:04.976 A:middle
type of the closure.

00:23:05.786 --> 00:23:06.926 A:middle
Sometimes this is really

00:23:06.926 --> 00:23:07.506 A:middle
convenient.

00:23:08.086 --> 00:23:10.126 A:middle
Other times it can lead to code

00:23:10.126 --> 00:23:10.976 A:middle
like this.

00:23:12.506 --> 00:23:13.916 A:middle
That's pretty ugly.

00:23:13.916 --> 00:23:14.846 A:middle
I don't think I'm going to get

00:23:14.846 --> 00:23:16.046 A:middle
past code review with that one.

00:23:17.276 --> 00:23:18.796 A:middle
We've got some nested turnery

00:23:18.796 --> 00:23:20.876 A:middle
operators and some explicit

00:23:20.876 --> 00:23:22.316 A:middle
comparisons against nil.

00:23:22.406 --> 00:23:23.886 A:middle
And then a force and wrap to go

00:23:23.886 --> 00:23:24.636 A:middle
with it.

00:23:24.636 --> 00:23:26.046 A:middle
I don't really think this is

00:23:26.046 --> 00:23:26.676 A:middle
going to fly.

00:23:27.316 --> 00:23:28.686 A:middle
And it's got another problem,

00:23:28.686 --> 00:23:29.086 A:middle
too.

00:23:29.626 --> 00:23:31.136 A:middle
Because this expression is

00:23:31.136 --> 00:23:32.976 A:middle
getting so large, with so many

00:23:32.976 --> 00:23:35.316 A:middle
independent pieces, the Swift

00:23:35.316 --> 00:23:36.996 A:middle
compiler will report that it's

00:23:36.996 --> 00:23:38.656 A:middle
not able to compile this in a

00:23:38.656 --> 00:23:39.906 A:middle
reasonable amount of time.

00:23:40.966 --> 00:23:42.186 A:middle
Now, this is the ultimate in

00:23:42.186 --> 00:23:43.646 A:middle
slow builds when even the

00:23:43.646 --> 00:23:44.646 A:middle
compiler gives up.

00:23:45.776 --> 00:23:46.826 A:middle
And really, it's telling me

00:23:46.826 --> 00:23:48.046 A:middle
something about this code.

00:23:48.876 --> 00:23:50.906 A:middle
So, my first option here would

00:23:50.906 --> 00:23:52.026 A:middle
be to do the same thing as the

00:23:52.026 --> 00:23:53.786 A:middle
previous example and provide

00:23:53.786 --> 00:23:54.806 A:middle
additional types.

00:23:55.186 --> 00:23:56.586 A:middle
With a closure, you can do that

00:23:56.586 --> 00:23:57.906 A:middle
just before the In Key word.

00:23:59.156 --> 00:24:01.446 A:middle
But, this may not be the best

00:23:59.156 --> 00:24:01.446 A:middle
But, this may not be the best

00:24:01.446 --> 00:24:02.706 A:middle
solution for this particular

00:24:02.706 --> 00:24:03.256 A:middle
problem.

00:24:03.536 --> 00:24:04.676 A:middle
So let's go back to what we had

00:24:04.676 --> 00:24:05.116 A:middle
before.

00:24:06.686 --> 00:24:08.416 A:middle
Recall that I said that I'm

00:24:08.416 --> 00:24:09.646 A:middle
trying to write a single

00:24:09.646 --> 00:24:11.596 A:middle
expression here so that it can

00:24:11.596 --> 00:24:13.026 A:middle
be used to help determine the

00:24:13.026 --> 00:24:13.996 A:middle
type of the closure.

00:24:15.176 --> 00:24:16.846 A:middle
But in this case, that's not

00:24:16.846 --> 00:24:17.856 A:middle
really necessary.

00:24:18.716 --> 00:24:20.316 A:middle
We already know from the call to

00:24:20.316 --> 00:24:22.366 A:middle
Reduce what this closure has to

00:24:22.366 --> 00:24:22.916 A:middle
be.

00:24:23.266 --> 00:24:24.716 A:middle
Reduce is being called on an

00:24:24.716 --> 00:24:26.156 A:middle
array of optional integers.

00:24:26.766 --> 00:24:28.736 A:middle
And the result type has to match

00:24:28.776 --> 00:24:30.126 A:middle
the return type of the function.

00:24:31.076 --> 00:24:33.186 A:middle
So we already know that this

00:24:33.486 --> 00:24:35.576 A:middle
callback for Reduce is going to

00:24:35.576 --> 00:24:37.106 A:middle
be operating just on optional

00:24:37.106 --> 00:24:37.746 A:middle
integers.

00:24:38.336 --> 00:24:40.136 A:middle
That means there's no need to

00:24:40.136 --> 00:24:41.576 A:middle
put a single expression in that

00:24:41.576 --> 00:24:42.046 A:middle
closure.

00:24:42.436 --> 00:24:44.626 A:middle
And it's perfectly okay to break

00:24:44.626 --> 00:24:46.146 A:middle
it up into separate, more

00:24:46.146 --> 00:24:47.146 A:middle
readable statements.

00:24:48.556 --> 00:24:49.966 A:middle
So here's a direct translation

00:24:49.966 --> 00:24:51.306 A:middle
of the code that I had before.

00:24:52.616 --> 00:24:53.936 A:middle
But I also have the freedom now

00:24:54.326 --> 00:24:55.206 A:middle
to make it something more

00:24:55.206 --> 00:24:55.776 A:middle
Swifty.

00:24:56.196 --> 00:24:57.806 A:middle
This is a lot more readable.

00:24:58.076 --> 00:24:59.346 A:middle
A lot more maintainable.

00:24:59.686 --> 00:25:01.226 A:middle
And it compiles in a quick,

00:24:59.686 --> 00:25:01.226 A:middle
And it compiles in a quick,

00:25:01.296 --> 00:25:02.596 A:middle
reasonable amount of time.

00:25:03.106 --> 00:25:06.336 A:middle
Now, the last example I'm going

00:25:06.336 --> 00:25:07.856 A:middle
to show in this section is

00:25:07.856 --> 00:25:09.236 A:middle
something that won't apply quite

00:25:09.236 --> 00:25:10.786 A:middle
as broadly as the previous two.

00:25:11.396 --> 00:25:13.256 A:middle
It's about this type Any Object.

00:25:14.766 --> 00:25:17.516 A:middle
Now, Any Object is a convenient

00:25:17.516 --> 00:25:20.026 A:middle
type that describes any class

00:25:20.026 --> 00:25:20.646 A:middle
instance.

00:25:20.736 --> 00:25:22.226 A:middle
So not a struct or an enum.

00:25:22.326 --> 00:25:23.416 A:middle
Definitely a class.

00:25:23.526 --> 00:25:24.666 A:middle
But we don't know which one.

00:25:25.726 --> 00:25:27.076 A:middle
But it also has an additional

00:25:27.076 --> 00:25:28.736 A:middle
feature carried over from

00:25:28.736 --> 00:25:30.376 A:middle
Objective-C's ID type.

00:25:31.206 --> 00:25:33.146 A:middle
And that's this method call

00:25:33.146 --> 00:25:33.886 A:middle
syntax.

00:25:34.106 --> 00:25:36.066 A:middle
If you try to call a method or

00:25:36.066 --> 00:25:38.096 A:middle
access a property on a value of

00:25:38.156 --> 00:25:40.936 A:middle
type Any Object, Swift will

00:25:40.936 --> 00:25:42.816 A:middle
allow you to do so, as long as

00:25:42.816 --> 00:25:45.146 A:middle
that method is visible somewhere

00:25:45.146 --> 00:25:47.106 A:middle
in your project and exposed to

00:25:47.106 --> 00:25:48.416 A:middle
the Objective-C runtime.

00:25:49.416 --> 00:25:50.956 A:middle
However, this does come at a

00:25:50.956 --> 00:25:51.576 A:middle
cost.

00:25:52.346 --> 00:25:53.976 A:middle
Because the compiler doesn't

00:25:53.976 --> 00:25:55.306 A:middle
know which method you're going

00:25:55.306 --> 00:25:57.616 A:middle
to call, it has to go search out

00:25:57.616 --> 00:25:59.516 A:middle
any possible implementations

00:25:59.756 --> 00:26:00.986 A:middle
throughout your project and the

00:25:59.756 --> 00:26:00.986 A:middle
throughout your project and the

00:26:00.986 --> 00:26:03.516 A:middle
frameworks you import and assume

00:26:03.516 --> 00:26:04.576 A:middle
that they might be the one

00:26:04.576 --> 00:26:05.746 A:middle
that's going to be used.

00:26:06.756 --> 00:26:08.316 A:middle
It has to do this because if

00:26:08.316 --> 00:26:09.706 A:middle
none of them match, it needs to

00:26:09.706 --> 00:26:10.776 A:middle
present you with an error.

00:26:12.586 --> 00:26:14.966 A:middle
So instead, we can do something

00:26:14.966 --> 00:26:16.706 A:middle
much better and much more,

00:26:16.706 --> 00:26:18.616 A:middle
again, declarative of our

00:26:18.616 --> 00:26:19.106 A:middle
intent.

00:26:19.626 --> 00:26:21.096 A:middle
We can define a protocol.

00:26:21.866 --> 00:26:22.696 A:middle
Now, this can be done in the

00:26:22.696 --> 00:26:24.876 A:middle
same file, or a different file,

00:26:25.426 --> 00:26:27.236 A:middle
but the important part is that

00:26:27.236 --> 00:26:28.616 A:middle
once we change this delegate

00:26:28.616 --> 00:26:30.546 A:middle
property to use our protocol

00:26:30.626 --> 00:26:32.756 A:middle
instead of Any Object, the

00:26:32.756 --> 00:26:34.806 A:middle
compiler knows exactly which

00:26:34.806 --> 00:26:35.826 A:middle
method it's calling.

00:26:37.186 --> 00:26:38.276 A:middle
And now you also have the

00:26:38.276 --> 00:26:39.546 A:middle
opportunity for all of your

00:26:39.546 --> 00:26:41.846 A:middle
implementing types to be checked

00:26:42.026 --> 00:26:43.336 A:middle
that they implement the method

00:26:43.386 --> 00:26:43.866 A:middle
correctly.

00:26:46.496 --> 00:26:48.186 A:middle
So, we've talked about several

00:26:48.186 --> 00:26:50.576 A:middle
techniques here for decreasing

00:26:50.576 --> 00:26:51.856 A:middle
the amount of work the compiler

00:26:51.856 --> 00:26:53.816 A:middle
does once it's already decided

00:26:53.816 --> 00:26:55.136 A:middle
to recompile a file.

00:26:56.106 --> 00:26:58.486 A:middle
But what about not recompiling

00:26:58.486 --> 00:26:59.556 A:middle
the file at all?

00:26:59.956 --> 00:27:01.696 A:middle
What makes the compiler choose

00:26:59.956 --> 00:27:01.696 A:middle
What makes the compiler choose

00:27:01.926 --> 00:27:03.186 A:middle
whether a file needs to be

00:27:03.186 --> 00:27:03.906 A:middle
recompiled?

00:27:04.636 --> 00:27:06.536 A:middle
For that, we need to understand

00:27:06.536 --> 00:27:07.836 A:middle
Swift's dependency model.

00:27:09.496 --> 00:27:12.326 A:middle
Now, Swift's dependency model is

00:27:12.356 --> 00:27:13.686 A:middle
based around files.

00:27:14.056 --> 00:27:15.366 A:middle
And it's a little bit tricky

00:27:15.466 --> 00:27:17.186 A:middle
because in Swift there are no

00:27:17.186 --> 00:27:17.926 A:middle
header files.

00:27:18.546 --> 00:27:20.236 A:middle
We just see everything that's

00:27:20.796 --> 00:27:22.626 A:middle
defined somewhere in our target

00:27:22.706 --> 00:27:23.286 A:middle
by default.

00:27:24.256 --> 00:27:25.486 A:middle
In this case, I'm declaring a

00:27:25.486 --> 00:27:26.936 A:middle
struct point in the file on the

00:27:26.936 --> 00:27:27.316 A:middle
left.

00:27:27.866 --> 00:27:29.176 A:middle
And if I bring in a file on the

00:27:29.176 --> 00:27:31.106 A:middle
right, the compiler knows that

00:27:31.106 --> 00:27:32.916 A:middle
I'm referring to that first

00:27:32.916 --> 00:27:33.656 A:middle
declaration.

00:27:34.316 --> 00:27:35.766 A:middle
The same is true for the use of

00:27:35.766 --> 00:27:37.466 A:middle
the X and Y properties in that

00:27:37.466 --> 00:27:41.216 A:middle
file on the right.

00:27:41.416 --> 00:27:43.286 A:middle
Now, this file-based dependency

00:27:43.286 --> 00:27:44.776 A:middle
means that if I change the file

00:27:44.776 --> 00:27:47.846 A:middle
on the left, both files will

00:27:47.846 --> 00:27:49.086 A:middle
need to be recompiled.

00:27:50.306 --> 00:27:51.686 A:middle
And that's important because

00:27:51.686 --> 00:27:52.886 A:middle
we're actually trying to call

00:27:52.886 --> 00:27:53.816 A:middle
this initializer.

00:27:54.016 --> 00:27:55.326 A:middle
And we want to make sure that

00:27:55.326 --> 00:27:56.486 A:middle
we're calling it correctly.

00:27:57.036 --> 00:28:00.306 A:middle
The compiler is smart enough to

00:27:57.036 --> 00:28:00.306 A:middle
The compiler is smart enough to

00:28:00.306 --> 00:28:01.976 A:middle
know that when you make change

00:28:01.976 --> 00:28:04.136 A:middle
within a function body, in this

00:28:04.166 --> 00:28:05.586 A:middle
case making the assertion more

00:28:05.586 --> 00:28:09.056 A:middle
appropriate, that only that file

00:28:09.056 --> 00:28:10.316 A:middle
will need to be recompiled.

00:28:11.136 --> 00:28:13.446 A:middle
Other files won't have to change

00:28:13.616 --> 00:28:15.556 A:middle
how they use the API's from the

00:28:15.586 --> 00:28:16.196 A:middle
first file.

00:28:16.646 --> 00:28:20.206 A:middle
However, it does need to be

00:28:20.206 --> 00:28:20.946 A:middle
conservative.

00:28:21.096 --> 00:28:22.916 A:middle
And so if I add a separate type

00:28:22.916 --> 00:28:25.326 A:middle
to this file, a human can tell

00:28:25.326 --> 00:28:26.706 A:middle
that this path segment struct

00:28:26.906 --> 00:28:28.336 A:middle
won't affect the file on the

00:28:28.336 --> 00:28:28.636 A:middle
right.

00:28:29.256 --> 00:28:30.596 A:middle
But the compiler will still be

00:28:30.596 --> 00:28:31.876 A:middle
conservative and rebuild them

00:28:31.876 --> 00:28:32.186 A:middle
both.

00:28:32.726 --> 00:28:36.116 A:middle
Let's see how this applies to

00:28:36.116 --> 00:28:37.456 A:middle
the game example that David was

00:28:37.456 --> 00:28:38.216 A:middle
using earlier.

00:28:39.246 --> 00:28:40.576 A:middle
So here we have the app target

00:28:40.576 --> 00:28:41.856 A:middle
and the Utilities framework.

00:28:41.856 --> 00:28:42.766 A:middle
And I'm showing some of the

00:28:42.766 --> 00:28:44.016 A:middle
Swift files that are in each

00:28:44.016 --> 00:28:44.426 A:middle
target.

00:28:45.586 --> 00:28:47.096 A:middle
So if I change a file in the App

00:28:47.096 --> 00:28:50.636 A:middle
target, well, we know already

00:28:50.636 --> 00:28:51.616 A:middle
that that file needs to be

00:28:51.616 --> 00:28:52.286 A:middle
recompiled.

00:28:52.436 --> 00:28:53.606 A:middle
And of course, anything that

00:28:53.606 --> 00:28:55.146 A:middle
depends on that file will also

00:28:55.146 --> 00:28:56.236 A:middle
need to be recompiled.

00:28:57.026 --> 00:28:58.316 A:middle
But there's no chance that

00:28:58.316 --> 00:28:59.716 A:middle
anything within the utilities

00:28:59.756 --> 00:29:01.376 A:middle
target will be recompiled.

00:28:59.756 --> 00:29:01.376 A:middle
target will be recompiled.

00:29:02.276 --> 00:29:03.326 A:middle
It's in a separate target.

00:29:03.326 --> 00:29:05.576 A:middle
It has an explicit dependency.

00:29:05.676 --> 00:29:07.426 A:middle
And it doesn't have implicit

00:29:07.426 --> 00:29:09.406 A:middle
visibility between those two

00:29:09.406 --> 00:29:12.456 A:middle
sets of files.

00:29:12.626 --> 00:29:15.286 A:middle
Now, similarly, if I change

00:29:15.286 --> 00:29:16.376 A:middle
something in the framework

00:29:16.376 --> 00:29:17.896 A:middle
target, then I would need to

00:29:17.896 --> 00:29:20.246 A:middle
recompile that file and anything

00:29:20.246 --> 00:29:21.416 A:middle
else in the utilities framework

00:29:21.416 --> 00:29:22.236 A:middle
that depends on it.

00:29:23.156 --> 00:29:24.696 A:middle
However, these dependencies are

00:29:24.696 --> 00:29:25.776 A:middle
more coarse-grained.

00:29:26.236 --> 00:29:28.296 A:middle
And so Xcode will also recompile

00:29:28.296 --> 00:29:29.906 A:middle
everything that's in the Game

00:29:29.906 --> 00:29:32.136 A:middle
target as well, unless the

00:29:32.136 --> 00:29:34.016 A:middle
changes are entirely confined to

00:29:34.016 --> 00:29:34.846 A:middle
function bodies.

00:29:35.436 --> 00:29:38.996 A:middle
So to recap those rules, the

00:29:38.996 --> 00:29:39.906 A:middle
compiler needs to be

00:29:39.906 --> 00:29:40.746 A:middle
conservative.

00:29:41.056 --> 00:29:42.506 A:middle
Even if a human can tell that a

00:29:42.506 --> 00:29:43.656 A:middle
change doesn't affect other

00:29:43.656 --> 00:29:45.506 A:middle
files, that doesn't necessarily

00:29:45.506 --> 00:29:46.936 A:middle
mean that the compiler can.

00:29:47.716 --> 00:29:49.486 A:middle
However, one change that the

00:29:49.486 --> 00:29:51.136 A:middle
compiler does know how to handle

00:29:51.536 --> 00:29:52.696 A:middle
is function bodies.

00:29:52.936 --> 00:29:54.196 A:middle
It knows that this doesn't

00:29:54.196 --> 00:29:55.576 A:middle
affect the file's interface.

00:29:55.896 --> 00:29:57.776 A:middle
And therefore, will not require

00:29:57.776 --> 00:29:59.406 A:middle
other files to be recompiled.

00:30:02.406 --> 00:30:04.146 A:middle
This per-file dependency basis

00:30:04.146 --> 00:30:06.006 A:middle
happens within a module, which

00:30:06.006 --> 00:30:08.386 A:middle
is where Swift declarations are

00:30:08.386 --> 00:30:09.606 A:middle
implicitly visible to one

00:30:09.606 --> 00:30:10.026 A:middle
another.

00:30:10.876 --> 00:30:11.666 A:middle
When you're dealing with

00:30:11.666 --> 00:30:13.756 A:middle
cross-module dependencies via

00:30:13.756 --> 00:30:15.006 A:middle
your imports or your bridging

00:30:15.006 --> 00:30:16.736 A:middle
header, these are dependencies

00:30:16.736 --> 00:30:17.846 A:middle
on the entire target.

00:30:18.386 --> 00:30:21.836 A:middle
So this is all good information

00:30:21.836 --> 00:30:24.266 A:middle
about Swift dependencies, and

00:30:24.266 --> 00:30:25.546 A:middle
Swift targets.

00:30:25.856 --> 00:30:27.336 A:middle
But I know a lot of you out here

00:30:27.546 --> 00:30:29.256 A:middle
have mixed Objective-C and Swift

00:30:29.256 --> 00:30:29.766 A:middle
targets.

00:30:29.976 --> 00:30:31.336 A:middle
And so the last section is going

00:30:31.336 --> 00:30:33.276 A:middle
to be focused on that, on how to

00:30:33.276 --> 00:30:34.696 A:middle
reduce the interface between the

00:30:34.696 --> 00:30:36.306 A:middle
Swift and the Objective-C code

00:30:36.726 --> 00:30:37.756 A:middle
in a mixed-source app.

00:30:38.976 --> 00:30:40.506 A:middle
And to do this, we're going to

00:30:40.506 --> 00:30:42.236 A:middle
have to talk about the parts of

00:30:42.236 --> 00:30:42.966 A:middle
a mixed-source app.

00:30:44.096 --> 00:30:44.996 A:middle
And this diagram's going to get

00:30:44.996 --> 00:30:46.286 A:middle
a little complicated, so bear

00:30:46.286 --> 00:30:46.796 A:middle
with me.

00:30:46.796 --> 00:30:48.356 A:middle
And if you're watching on video,

00:30:48.406 --> 00:30:49.216 A:middle
you may need to pause and

00:30:49.216 --> 00:30:49.626 A:middle
restart.

00:30:50.386 --> 00:30:51.106 A:middle
Feel free.

00:30:52.406 --> 00:30:54.306 A:middle
We start off with the headers

00:30:54.676 --> 00:30:56.256 A:middle
that describe your Objective-C

00:30:56.256 --> 00:30:56.926 A:middle
interface.

00:30:57.646 --> 00:30:58.756 A:middle
This is the parts of your app

00:30:58.796 --> 00:31:00.136 A:middle
that are written in Objective-C

00:30:58.796 --> 00:31:00.136 A:middle
that are written in Objective-C

00:31:00.296 --> 00:31:01.496 A:middle
that you may want to expose to

00:31:01.496 --> 00:31:01.896 A:middle
Swift.

00:31:02.376 --> 00:31:03.966 A:middle
Or perhaps you're just declaring

00:31:03.966 --> 00:31:05.656 A:middle
headers for other Objective-C

00:31:05.656 --> 00:31:07.046 A:middle
parts of your app.

00:31:08.246 --> 00:31:09.416 A:middle
Then we have the bridging

00:31:09.416 --> 00:31:09.796 A:middle
header.

00:31:10.236 --> 00:31:11.696 A:middle
This is the header that collects

00:31:11.696 --> 00:31:13.416 A:middle
all of the information that you

00:31:13.416 --> 00:31:15.566 A:middle
want to expose to the Swift part

00:31:15.566 --> 00:31:16.886 A:middle
of your app.

00:31:17.766 --> 00:31:19.656 A:middle
This is a build setting in Xcode

00:31:19.786 --> 00:31:21.076 A:middle
that controls which header is

00:31:21.076 --> 00:31:21.616 A:middle
used.

00:31:21.836 --> 00:31:23.756 A:middle
And once it's set, the Swift

00:31:23.756 --> 00:31:25.846 A:middle
compiler will know to expose

00:31:25.846 --> 00:31:27.906 A:middle
those Objective-C interfaces to

00:31:27.906 --> 00:31:28.736 A:middle
your Swift code.

00:31:30.216 --> 00:31:32.196 A:middle
The Swift compiler will then

00:31:32.196 --> 00:31:34.616 A:middle
produce a generated header,

00:31:35.036 --> 00:31:36.266 A:middle
which does the same thing in

00:31:36.266 --> 00:31:36.796 A:middle
reverse.

00:31:37.246 --> 00:31:39.026 A:middle
It describes which parts of your

00:31:39.026 --> 00:31:41.526 A:middle
Swift code will be exposed to

00:31:41.526 --> 00:31:42.496 A:middle
Objective-C.

00:31:43.796 --> 00:31:45.656 A:middle
That can then be used in your

00:31:45.656 --> 00:31:47.046 A:middle
Objective-C implementation

00:31:47.046 --> 00:31:49.976 A:middle
files, which probably also use

00:31:49.976 --> 00:31:50.926 A:middle
some of those headers from the

00:31:50.926 --> 00:31:51.436 A:middle
first step.

00:31:51.956 --> 00:31:53.896 A:middle
And then of course, you might

00:31:53.896 --> 00:31:55.946 A:middle
have Objective-C code that is

00:31:55.946 --> 00:31:57.566 A:middle
not dependent on any of the

00:31:57.566 --> 00:31:58.246 A:middle
Swift code.

00:31:58.846 --> 00:32:00.106 A:middle
But that's less interesting for

00:31:58.846 --> 00:32:00.106 A:middle
But that's less interesting for

00:32:00.106 --> 00:32:01.596 A:middle
this part of the talk.

00:32:02.316 --> 00:32:03.486 A:middle
So, I'll step through that from

00:32:03.486 --> 00:32:04.626 A:middle
left to right again.

00:32:05.836 --> 00:32:07.746 A:middle
We have the Objective-C headers.

00:32:08.996 --> 00:32:10.706 A:middle
The bridging header for getting

00:32:10.706 --> 00:32:11.766 A:middle
some of that information into

00:32:11.766 --> 00:32:12.176 A:middle
Swift.

00:32:13.296 --> 00:32:14.906 A:middle
Your Swift implementation files.

00:32:15.976 --> 00:32:17.556 A:middle
A generated header for

00:32:17.556 --> 00:32:19.076 A:middle
presenting that information back

00:32:19.076 --> 00:32:20.176 A:middle
to Objective-C.

00:32:20.686 --> 00:32:21.966 A:middle
And then finally, your

00:32:21.966 --> 00:32:23.426 A:middle
Objective-C implementation

00:32:23.426 --> 00:32:24.036 A:middle
files.

00:32:24.506 --> 00:32:28.536 A:middle
And in a diagram like this, all

00:32:28.536 --> 00:32:30.456 A:middle
of these arrows represent

00:32:30.456 --> 00:32:31.396 A:middle
dependencies.

00:32:31.476 --> 00:32:32.876 A:middle
Not dependencies on a target

00:32:32.876 --> 00:32:34.966 A:middle
level, but within on a

00:32:35.186 --> 00:32:36.996 A:middle
file-by-file level within a

00:32:36.996 --> 00:32:37.516 A:middle
target.

00:32:38.336 --> 00:32:40.216 A:middle
And so, what we want to do is

00:32:40.216 --> 00:32:41.556 A:middle
focus on the generated header

00:32:41.556 --> 00:32:43.046 A:middle
and the bridging header, because

00:32:43.046 --> 00:32:44.546 A:middle
if we can shrink the content in

00:32:44.546 --> 00:32:46.916 A:middle
these headers, then we know that

00:32:46.916 --> 00:32:48.326 A:middle
there's fewer chances for things

00:32:48.326 --> 00:32:49.056 A:middle
to change.

00:32:49.366 --> 00:32:51.096 A:middle
And therefore, less need to

00:32:51.096 --> 00:32:51.596 A:middle
rebuild.

00:32:52.206 --> 00:32:54.116 A:middle
So let's take a look.

00:32:54.916 --> 00:32:56.486 A:middle
For the generated header, your

00:32:56.486 --> 00:32:57.906 A:middle
strongest tool is going to be

00:32:57.906 --> 00:32:58.866 A:middle
the private key word.

00:32:59.486 --> 00:33:01.086 A:middle
So in this example, I have a

00:32:59.486 --> 00:33:01.086 A:middle
So in this example, I have a

00:33:01.086 --> 00:33:02.126 A:middle
view controller that I'm

00:33:02.126 --> 00:33:03.036 A:middle
defining in Swift.

00:33:03.316 --> 00:33:04.476 A:middle
And it has an it an IBOutlet

00:33:04.516 --> 00:33:06.636 A:middle
property and an IBAction method.

00:33:07.606 --> 00:33:09.526 A:middle
By default, these will be

00:33:09.526 --> 00:33:11.966 A:middle
exposed in your generated header

00:33:12.426 --> 00:33:14.166 A:middle
because they're methods and

00:33:14.166 --> 00:33:15.356 A:middle
properties exposed to

00:33:15.356 --> 00:33:16.596 A:middle
Objective-C.

00:33:17.226 --> 00:33:18.426 A:middle
And they're not declared as

00:33:18.426 --> 00:33:18.876 A:middle
private.

00:33:20.276 --> 00:33:22.216 A:middle
But most of the time you don't

00:33:22.216 --> 00:33:23.756 A:middle
need to expose these to any

00:33:23.756 --> 00:33:24.986 A:middle
other files in your project.

00:33:25.376 --> 00:33:26.276 A:middle
They're just for interacting

00:33:26.276 --> 00:33:27.206 A:middle
with Interface Builder.

00:33:28.286 --> 00:33:30.326 A:middle
And so, in this case, I can mark

00:33:30.366 --> 00:33:32.636 A:middle
these private and watch as the

00:33:32.676 --> 00:33:34.396 A:middle
property and method vanish from

00:33:34.466 --> 00:33:35.396 A:middle
the generated header.

00:33:37.216 --> 00:33:39.606 A:middle
Another example of this is when

00:33:39.606 --> 00:33:41.746 A:middle
dealing with methods exposed to

00:33:41.746 --> 00:33:43.526 A:middle
Objective-C for use with

00:33:43.526 --> 00:33:45.106 A:middle
Objective-C runtime features

00:33:45.106 --> 00:33:46.126 A:middle
like #selector.

00:33:46.786 --> 00:33:47.886 A:middle
In this case, I'm using

00:33:47.886 --> 00:33:49.476 A:middle
foundations Notification Center

00:33:49.476 --> 00:33:51.646 A:middle
API, which takes a selector to

00:33:51.646 --> 00:33:53.166 A:middle
use as a callback when the

00:33:53.166 --> 00:33:54.326 A:middle
notification is sent.

00:33:55.896 --> 00:33:58.026 A:middle
Once again, the only requirement

00:33:58.086 --> 00:33:59.086 A:middle
here is that the method is

00:33:59.086 --> 00:34:00.816 A:middle
exposed to Objective-C.

00:33:59.086 --> 00:34:00.816 A:middle
exposed to Objective-C.

00:34:00.916 --> 00:34:02.056 A:middle
It doesn't actually need to be

00:34:02.056 --> 00:34:03.786 A:middle
used from any other files in my

00:34:03.786 --> 00:34:06.046 A:middle
project, Swift or Objective-C.

00:34:06.486 --> 00:34:09.286 A:middle
So I can mark it private.

00:34:10.106 --> 00:34:11.775 A:middle
And once again have that

00:34:11.775 --> 00:34:13.326 A:middle
reduction in the shape of my

00:34:13.326 --> 00:34:14.176 A:middle
generated header.

00:34:14.815 --> 00:34:17.255 A:middle
In cases like this, there's

00:34:17.255 --> 00:34:19.246 A:middle
often another option as well.

00:34:19.596 --> 00:34:20.585 A:middle
And that's to switch to

00:34:20.585 --> 00:34:21.896 A:middle
block-based API's.

00:34:22.775 --> 00:34:24.166 A:middle
In many cases, this can even

00:34:24.166 --> 00:34:25.866 A:middle
clear up your code because you

00:34:25.866 --> 00:34:27.536 A:middle
can implicitly capture state

00:34:27.666 --> 00:34:28.485 A:middle
from the function that's

00:34:28.485 --> 00:34:30.016 A:middle
registering for the notification

00:34:30.396 --> 00:34:31.516 A:middle
rather than having to carry it

00:34:31.516 --> 00:34:33.065 A:middle
along as some kind of context

00:34:33.065 --> 00:34:33.456 A:middle
object.

00:34:34.076 --> 00:34:37.286 A:middle
Now, the last tip for reducing

00:34:37.286 --> 00:34:38.485 A:middle
the contents of your generated

00:34:38.485 --> 00:34:41.235 A:middle
header is actually a very old

00:34:41.235 --> 00:34:41.576 A:middle
one.

00:34:41.815 --> 00:34:43.255 A:middle
You can migrate to Swift 4.

00:34:44.366 --> 00:34:45.646 A:middle
And you've already heard that

00:34:45.646 --> 00:34:46.706 A:middle
you're going to have to do that

00:34:46.706 --> 00:34:47.216 A:middle
this year.

00:34:47.596 --> 00:34:49.076 A:middle
That Xcode 10 will be the last

00:34:49.076 --> 00:34:51.795 A:middle
set of releases where Swift 3

00:34:51.795 --> 00:34:52.886 A:middle
mode is supported.

00:34:53.976 --> 00:34:56.386 A:middle
And so, this is something you'll

00:34:56.386 --> 00:34:57.946 A:middle
be doing anyway.

00:34:57.976 --> 00:34:59.166 A:middle
Edit. Convert.

00:34:59.316 --> 00:35:01.076 A:middle
To Current Swift Syntax.

00:34:59.316 --> 00:35:01.076 A:middle
To Current Swift Syntax.

00:35:02.496 --> 00:35:04.126 A:middle
However, when you do this

00:35:04.396 --> 00:35:06.906 A:middle
migration, you may have actually

00:35:06.906 --> 00:35:09.936 A:middle
selected to keep the Swift 3

00:35:09.936 --> 00:35:11.446 A:middle
compatibility mode for a

00:35:11.446 --> 00:35:12.576 A:middle
particular build setting.

00:35:12.696 --> 00:35:14.776 A:middle
And that's the Swift 3 @objc

00:35:14.776 --> 00:35:15.406 A:middle
imprints.

00:35:16.196 --> 00:35:17.086 A:middle
This is an option when you

00:35:17.086 --> 00:35:19.316 A:middle
migrate to Swift 4 to keep on a

00:35:19.316 --> 00:35:22.176 A:middle
rule from Swift 3 which exposes

00:35:22.176 --> 00:35:23.686 A:middle
internal methods and properties

00:35:23.736 --> 00:35:26.416 A:middle
to Objective-C automatically on

00:35:26.416 --> 00:35:30.096 A:middle
any subclass of NS Object.

00:35:30.236 --> 00:35:31.626 A:middle
Now, if you are writing in Swift

00:35:31.666 --> 00:35:33.416 A:middle
3, you may be relying on this

00:35:33.416 --> 00:35:33.846 A:middle
feature.

00:35:34.196 --> 00:35:35.936 A:middle
But there's a lot of cases where

00:35:36.086 --> 00:35:37.626 A:middle
you were not actually depending

00:35:37.626 --> 00:35:38.806 A:middle
on this in any way.

00:35:39.446 --> 00:35:40.586 A:middle
Not in the runtime sense.

00:35:40.746 --> 00:35:42.226 A:middle
And definitely not at compile

00:35:42.226 --> 00:35:42.616 A:middle
time.

00:35:43.666 --> 00:35:45.466 A:middle
So, once you get to the point

00:35:45.816 --> 00:35:47.256 A:middle
where you've explicitly marked

00:35:47.256 --> 00:35:48.176 A:middle
all of your Objective-C

00:35:48.176 --> 00:35:51.506 A:middle
dependencies as either @objc or

00:35:52.016 --> 00:35:54.116 A:middle
IBOutlet, IBAction, whatever, as

00:35:54.116 --> 00:35:56.096 A:middle
appropriate, then you can also

00:35:56.096 --> 00:35:57.826 A:middle
select this build setting and

00:35:57.826 --> 00:35:59.186 A:middle
hit Delete to get it back to the

00:35:59.186 --> 00:36:01.176 A:middle
default mode where the OB-C

00:35:59.186 --> 00:36:01.176 A:middle
default mode where the OB-C

00:36:01.176 --> 00:36:02.866 A:middle
attribute will only be inferred

00:36:03.566 --> 00:36:05.316 A:middle
for methods and properties that

00:36:05.316 --> 00:36:08.176 A:middle
satisfy protocol requirements or

00:36:08.176 --> 00:36:09.716 A:middle
those that override methods that

00:36:09.716 --> 00:36:10.806 A:middle
come from Objective-C.

00:36:11.306 --> 00:36:14.576 A:middle
So we've talked a lot about the

00:36:14.576 --> 00:36:15.856 A:middle
generated header and what you

00:36:15.856 --> 00:36:17.026 A:middle
can do to your Swift code.

00:36:17.416 --> 00:36:19.306 A:middle
But you have Objective-C code as

00:36:19.306 --> 00:36:19.816 A:middle
well.

00:36:20.066 --> 00:36:21.386 A:middle
And the Objective-C code,

00:36:21.386 --> 00:36:23.596 A:middle
likewise, causes rebuilds.

00:36:24.656 --> 00:36:25.846 A:middle
And so a bridging header looks

00:36:25.846 --> 00:36:27.186 A:middle
something like this, usually.

00:36:27.186 --> 00:36:28.556 A:middle
It's got a bunch of other

00:36:28.556 --> 00:36:29.996 A:middle
headers in the project that

00:36:29.996 --> 00:36:30.976 A:middle
you're trying to expose to

00:36:30.976 --> 00:36:31.386 A:middle
Swift.

00:36:32.616 --> 00:36:34.016 A:middle
And we can zoom in on one of

00:36:34.016 --> 00:36:34.886 A:middle
these headers here, the

00:36:34.886 --> 00:36:37.436 A:middle
MyViewController header and see

00:36:37.436 --> 00:36:38.716 A:middle
that it's a perfectly normal

00:36:38.716 --> 00:36:39.526 A:middle
declaration of a view

00:36:39.526 --> 00:36:40.086 A:middle
controller.

00:36:40.616 --> 00:36:42.476 A:middle
But also that it itself includes

00:36:42.476 --> 00:36:43.196 A:middle
another header.

00:36:44.376 --> 00:36:46.006 A:middle
What that means is that if any

00:36:46.006 --> 00:36:48.126 A:middle
of these headers change, the

00:36:48.126 --> 00:36:49.886 A:middle
Swift code in your target has to

00:36:49.886 --> 00:36:51.866 A:middle
be recompiled because it might

00:36:51.866 --> 00:36:52.856 A:middle
depend on something that

00:36:52.856 --> 00:36:53.356 A:middle
changed.

00:36:54.616 --> 00:36:56.206 A:middle
This is suboptimal.

00:36:56.466 --> 00:36:59.886 A:middle
And now we can notice that in

00:36:59.886 --> 00:37:01.656 A:middle
this example, the only reason

00:36:59.886 --> 00:37:01.656 A:middle
this example, the only reason

00:37:01.656 --> 00:37:03.096 A:middle
we're importing the MyNetwork

00:37:03.096 --> 00:37:04.986 A:middle
Manager header is to declare

00:37:04.986 --> 00:37:06.436 A:middle
this property, this network

00:37:06.436 --> 00:37:07.606 A:middle
manager property on the view

00:37:07.606 --> 00:37:08.176 A:middle
controller.

00:37:09.576 --> 00:37:11.986 A:middle
And it's possible that that

00:37:11.986 --> 00:37:14.036 A:middle
property is never actually used

00:37:14.036 --> 00:37:14.816 A:middle
from Swift.

00:37:15.436 --> 00:37:17.876 A:middle
In which case, it's unnecessary

00:37:17.876 --> 00:37:19.376 A:middle
for us to be declaring it here.

00:37:20.346 --> 00:37:21.976 A:middle
So what you can do is use

00:37:21.976 --> 00:37:23.886 A:middle
categories, Objective-C's

00:37:23.886 --> 00:37:25.486 A:middle
equivalent of extensions, to

00:37:25.486 --> 00:37:26.866 A:middle
break up this interface.

00:37:27.606 --> 00:37:28.566 A:middle
So I'm going to define a new

00:37:28.566 --> 00:37:30.186 A:middle
file here, MyViewController

00:37:30.186 --> 00:37:32.526 A:middle
Internal, and use the special

00:37:32.526 --> 00:37:34.586 A:middle
nameless category syntax that

00:37:34.586 --> 00:37:36.116 A:middle
allows me to declare additional

00:37:36.116 --> 00:37:37.896 A:middle
properties while still taking

00:37:37.896 --> 00:37:39.346 A:middle
advantage of the property

00:37:39.346 --> 00:37:41.276 A:middle
synthesis feature in my main Add

00:37:41.276 --> 00:37:42.326 A:middle
Implementation block.

00:37:42.436 --> 00:37:47.066 A:middle
Now I can just move the import

00:37:47.066 --> 00:37:48.066 A:middle
and the property down to the

00:37:48.066 --> 00:37:48.696 A:middle
category.

00:37:49.426 --> 00:37:50.066 A:middle
And voila!

00:37:50.796 --> 00:37:52.316 A:middle
The headers that are being

00:37:52.316 --> 00:37:54.636 A:middle
imported into Swift have gotten

00:37:54.636 --> 00:37:56.536 A:middle
much smaller and are much less

00:37:56.536 --> 00:37:58.246 A:middle
likely to change now and cause

00:37:58.246 --> 00:37:59.506 A:middle
an unnecessary rebuild.

00:38:00.476 --> 00:38:01.566 A:middle
And there's one more note.

00:38:02.636 --> 00:38:04.206 A:middle
This file here that I defined,

00:38:04.796 --> 00:38:06.626 A:middle
well, it's possible that nothing

00:38:06.626 --> 00:38:08.256 A:middle
else in my Objective-C code

00:38:08.256 --> 00:38:09.586 A:middle
needs to access this property,

00:38:09.656 --> 00:38:09.966 A:middle
either.

00:38:11.156 --> 00:38:12.796 A:middle
In which case, there's no need

00:38:12.796 --> 00:38:13.786 A:middle
for a separate file.

00:38:14.266 --> 00:38:16.256 A:middle
I can put this category directly

00:38:16.256 --> 00:38:17.176 A:middle
into my .m.

00:38:18.356 --> 00:38:19.676 A:middle
There's nothing wrong with doing

00:38:19.676 --> 00:38:19.946 A:middle
this.

00:38:20.056 --> 00:38:21.316 A:middle
Everything will work fine.

00:38:21.646 --> 00:38:23.076 A:middle
And as I said before, property

00:38:23.076 --> 00:38:24.736 A:middle
synthesis will still work for

00:38:24.736 --> 00:38:26.046 A:middle
the network manager property.

00:38:26.536 --> 00:38:28.976 A:middle
So what have we seen?

00:38:29.946 --> 00:38:32.636 A:middle
We used private and block-based

00:38:32.636 --> 00:38:34.456 A:middle
API's, and turning off that

00:38:34.456 --> 00:38:35.906 A:middle
Build setting to shrink the

00:38:35.906 --> 00:38:37.276 A:middle
contents of the generated

00:38:37.276 --> 00:38:37.586 A:middle
header.

00:38:38.786 --> 00:38:40.826 A:middle
And, we've broken out separate

00:38:40.826 --> 00:38:42.736 A:middle
contents from the Objective-C

00:38:42.736 --> 00:38:44.266 A:middle
headers that we declared, which

00:38:44.266 --> 00:38:45.536 A:middle
shrink the contents of the

00:38:45.576 --> 00:38:46.306 A:middle
bridging header.

00:38:47.096 --> 00:38:49.076 A:middle
Less content means less work

00:38:49.076 --> 00:38:49.996 A:middle
done on each build.

00:38:50.336 --> 00:38:51.856 A:middle
And it also means fewer

00:38:51.856 --> 00:38:53.916 A:middle
opportunities for changes, which

00:38:53.916 --> 00:38:55.406 A:middle
means fewer chances for

00:38:55.406 --> 00:38:56.026 A:middle
rebuilds.

00:38:56.686 --> 00:38:57.936 A:middle
We win on both counts.

00:38:59.126 --> 00:39:01.066 A:middle
So let's wrap things up.

00:38:59.126 --> 00:39:01.066 A:middle
So let's wrap things up.

00:39:02.316 --> 00:39:04.646 A:middle
David and I talked a lot about

00:39:04.946 --> 00:39:06.486 A:middle
quite a few different topics, of

00:39:06.486 --> 00:39:07.556 A:middle
ways that you can get more

00:39:07.556 --> 00:39:09.186 A:middle
information from Xcode and that

00:39:09.186 --> 00:39:10.906 A:middle
you can provide more information

00:39:11.196 --> 00:39:13.596 A:middle
to Xcode in ways that can speed

00:39:13.596 --> 00:39:14.256 A:middle
up your builds.

00:39:14.646 --> 00:39:16.266 A:middle
And this covers both increasing

00:39:16.266 --> 00:39:17.366 A:middle
the build efficiency when you're

00:39:17.366 --> 00:39:19.426 A:middle
doing a build and reducing the

00:39:19.426 --> 00:39:21.116 A:middle
work that you have to do at all

00:39:21.256 --> 00:39:21.956 A:middle
in a rebuild.

00:39:23.416 --> 00:39:25.266 A:middle
So, we went through this kind of

00:39:25.266 --> 00:39:25.436 A:middle
fast.

00:39:25.616 --> 00:39:26.816 A:middle
So if you want to see it again,

00:39:26.816 --> 00:39:27.956 A:middle
check out the video page.

00:39:27.956 --> 00:39:29.486 A:middle
And you can also come find us in

00:39:29.486 --> 00:39:31.746 A:middle
the labs at noon today and

00:39:31.746 --> 00:39:33.326 A:middle
tomorrow in the afternoon.

00:39:33.326 --> 00:39:33.936 A:middle
Thank you very much.

00:39:34.086 --> 00:39:35.336 A:middle
Enjoy the rest of the

00:39:35.336 --> 00:39:36.426 A:middle
conference.

00:39:37.176 --> 00:39:39.500 A:middle
[ Applause ]
