WEBVTT

00:00:07.016 --> 00:00:15.500 A:middle
[ Music ]

00:00:21.516 --> 00:00:26.616 A:middle
[ Applause ]

00:00:27.116 --> 00:00:29.286 A:middle
&gt;&gt; Hi, welcome to Getting to

00:00:29.286 --> 00:00:30.706 A:middle
Know Swift Package Manager.

00:00:31.476 --> 00:00:32.386 A:middle
I'm Rick Ballard.

00:00:32.856 --> 00:00:34.476 A:middle
With me today is Boris Buegling.

00:00:34.726 --> 00:00:35.946 A:middle
And we're very excited to tell

00:00:35.946 --> 00:00:37.356 A:middle
you all about Swift's Package

00:00:37.356 --> 00:00:38.926 A:middle
Manager, or as we call it

00:00:38.926 --> 00:00:40.236 A:middle
sometimes SwiftPM.

00:00:40.236 --> 00:00:43.156 A:middle
We're going to focus today on

00:00:43.156 --> 00:00:44.516 A:middle
the open source project.

00:00:44.716 --> 00:00:46.126 A:middle
And not on Apple's other

00:00:46.126 --> 00:00:47.056 A:middle
developer tools.

00:00:47.266 --> 00:00:48.646 A:middle
But we've got plenty to tell you

00:00:48.646 --> 00:00:49.466 A:middle
about here today.

00:00:50.906 --> 00:00:52.346 A:middle
The Swift Package Manager makes

00:00:52.346 --> 00:00:54.226 A:middle
it easier to develop and

00:00:54.226 --> 00:00:55.926 A:middle
distribute source code in the

00:00:55.926 --> 00:00:56.986 A:middle
Swift ecosystem.

00:00:57.656 --> 00:00:58.576 A:middle
Today we're going to talk about

00:00:58.576 --> 00:01:00.946 A:middle
its goals, some of its design,

00:00:58.576 --> 00:01:00.946 A:middle
its goals, some of its design,

00:01:00.946 --> 00:01:02.396 A:middle
and a little bit about where we

00:01:02.396 --> 00:01:03.876 A:middle
can go from here.

00:01:05.275 --> 00:01:06.836 A:middle
We'll start by telling you a

00:01:06.836 --> 00:01:08.526 A:middle
little bit about why we decided

00:01:08.526 --> 00:01:10.126 A:middle
to create a new Package Manager

00:01:10.196 --> 00:01:11.586 A:middle
as part of the Swift project.

00:01:12.426 --> 00:01:13.486 A:middle
We'll show you little bit about

00:01:13.486 --> 00:01:14.186 A:middle
how to use it.

00:01:14.186 --> 00:01:16.276 A:middle
And then dive into its design

00:01:16.276 --> 00:01:17.146 A:middle
and features.

00:01:18.356 --> 00:01:19.396 A:middle
We'll tell you a little bit

00:01:19.396 --> 00:01:20.596 A:middle
about where we can go in the

00:01:20.596 --> 00:01:22.706 A:middle
future and close out by

00:01:22.706 --> 00:01:24.586 A:middle
describing SwiftPM's open source

00:01:24.666 --> 00:01:26.246 A:middle
process and how you can get

00:01:26.246 --> 00:01:27.646 A:middle
involved if you're interested.

00:01:28.796 --> 00:01:30.186 A:middle
I'm sure most of you are

00:01:30.186 --> 00:01:31.486 A:middle
familiar with package managers

00:01:31.986 --> 00:01:33.506 A:middle
they're a great way to share and

00:01:33.506 --> 00:01:34.276 A:middle
reuse code.

00:01:34.276 --> 00:01:36.146 A:middle
But why did we decide to create

00:01:36.146 --> 00:01:37.946 A:middle
a new one for Swift?

00:01:39.576 --> 00:01:41.356 A:middle
First of all, Swift is a

00:01:41.356 --> 00:01:42.646 A:middle
cross-platform language.

00:01:42.906 --> 00:01:43.836 A:middle
So we wanted a great

00:01:43.836 --> 00:01:45.446 A:middle
cross-platform tool for building

00:01:45.446 --> 00:01:46.096 A:middle
your Swift code.

00:01:46.996 --> 00:01:48.376 A:middle
This makes it easy to configure

00:01:48.376 --> 00:01:49.866 A:middle
your code in a consistent way

00:01:49.866 --> 00:01:51.596 A:middle
and run it on all of Swift's

00:01:51.666 --> 00:01:52.936 A:middle
supported platforms.

00:01:53.696 --> 00:01:55.386 A:middle
SwiftPM includes its own

00:01:55.386 --> 00:01:57.166 A:middle
complete build system, allowing

00:01:57.166 --> 00:01:58.856 A:middle
you to configure your software,

00:01:59.176 --> 00:02:01.786 A:middle
build it, test it, and even run

00:01:59.176 --> 00:02:01.786 A:middle
build it, test it, and even run

00:02:01.786 --> 00:02:02.976 A:middle
it from one tool.

00:02:07.556 --> 00:02:08.916 A:middle
We also wanted to make it as

00:02:08.916 --> 00:02:10.485 A:middle
easy as possible for you to

00:02:10.485 --> 00:02:12.856 A:middle
share your Swift libraries with

00:02:12.856 --> 00:02:14.836 A:middle
anyone wherever they are by

00:02:15.116 --> 00:02:16.676 A:middle
providing a canonical package

00:02:16.676 --> 00:02:18.976 A:middle
manager in the Swift project, we

00:02:18.976 --> 00:02:20.626 A:middle
hope to define a common standard

00:02:20.686 --> 00:02:21.516 A:middle
for the way that you can

00:02:21.516 --> 00:02:22.706 A:middle
distribute your libraries.

00:02:23.466 --> 00:02:24.676 A:middle
This makes it easy to grow the

00:02:24.676 --> 00:02:26.506 A:middle
Swift ecosystem and make Swift

00:02:26.546 --> 00:02:27.546 A:middle
better for everyone.

00:02:28.006 --> 00:02:31.426 A:middle
Many of you may have great ideas

00:02:31.626 --> 00:02:32.846 A:middle
for features that you'd like to

00:02:32.846 --> 00:02:33.206 A:middle
add.

00:02:33.626 --> 00:02:34.756 A:middle
But we'd like to be careful

00:02:34.756 --> 00:02:36.276 A:middle
about what is added to the core

00:02:36.276 --> 00:02:37.966 A:middle
libraries so we can maintain a

00:02:37.966 --> 00:02:39.426 A:middle
careful and curated API.

00:02:40.486 --> 00:02:41.966 A:middle
A great package manager makes it

00:02:41.966 --> 00:02:43.446 A:middle
easy to distribute these ideas

00:02:43.866 --> 00:02:45.976 A:middle
as packages instead of having to

00:02:45.976 --> 00:02:47.866 A:middle
put them into the core library.

00:02:48.576 --> 00:02:50.386 A:middle
The best ideas can organically

00:02:50.386 --> 00:02:52.156 A:middle
gain traction with the community

00:02:52.156 --> 00:02:53.486 A:middle
over time and become

00:02:53.486 --> 00:02:55.066 A:middle
increasingly standardized.

00:02:56.516 --> 00:02:58.486 A:middle
Finally, by building a package

00:02:58.486 --> 00:03:00.496 A:middle
manager alongside Swift, we're

00:02:58.486 --> 00:03:00.496 A:middle
manager alongside Swift, we're

00:03:00.496 --> 00:03:01.746 A:middle
able to take advantage of

00:03:01.746 --> 00:03:03.676 A:middle
Swift's power and philosophy.

00:03:04.716 --> 00:03:06.406 A:middle
SwiftPM is itself written in

00:03:06.406 --> 00:03:08.376 A:middle
Swift and it's even a Swift

00:03:08.376 --> 00:03:08.896 A:middle
package.

00:03:09.656 --> 00:03:10.836 A:middle
Beyond that, we have the

00:03:10.836 --> 00:03:13.116 A:middle
opportunity to work closely with

00:03:13.156 --> 00:03:14.676 A:middle
the Swift language and core

00:03:14.676 --> 00:03:16.806 A:middle
library projects to build great

00:03:16.806 --> 00:03:18.076 A:middle
package manager features that

00:03:18.076 --> 00:03:19.576 A:middle
will help your Swift code sing.

00:03:21.006 --> 00:03:23.106 A:middle
SwiftPM is part of the Swift

00:03:23.106 --> 00:03:25.306 A:middle
open source project, and has its

00:03:25.306 --> 00:03:27.936 A:middle
own presence on Swift.org, and

00:03:28.036 --> 00:03:28.636 A:middle
on GitHub.

00:03:29.596 --> 00:03:30.636 A:middle
The Swift Package Manager

00:03:30.636 --> 00:03:32.886 A:middle
section of Swift.org is a great

00:03:32.886 --> 00:03:34.286 A:middle
place to go to get started.

00:03:35.596 --> 00:03:37.456 A:middle
When you're ready to try it out

00:03:37.456 --> 00:03:38.836 A:middle
you can find it included in

00:03:38.836 --> 00:03:40.696 A:middle
every Swift toolchain, also

00:03:40.696 --> 00:03:42.426 A:middle
downloadable from Swift.org.

00:03:43.106 --> 00:03:44.946 A:middle
And of course, it's included in

00:03:44.946 --> 00:03:46.856 A:middle
every release of Xcode alongside

00:03:46.856 --> 00:03:47.746 A:middle
the Swift tools.

00:03:49.166 --> 00:03:50.386 A:middle
So, to start telling you a

00:03:50.386 --> 00:03:51.716 A:middle
little bit about how to use it,

00:03:52.166 --> 00:03:53.186 A:middle
I'd like to invite Boris

00:03:53.186 --> 00:03:54.546 A:middle
Buegling up to show you the

00:03:54.546 --> 00:03:54.976 A:middle
basics.

00:03:55.516 --> 00:04:02.500 A:middle
[ Applause ]

00:03:55.516 --> 00:04:02.500 A:middle
[ Applause ]

00:04:07.076 --> 00:04:08.376 A:middle
&gt;&gt; Thanks, Rick.

00:04:08.376 --> 00:04:09.796 A:middle
Let's take a look at how to use

00:04:09.796 --> 00:04:10.366 A:middle
SwiftPM.

00:04:12.736 --> 00:04:15.096 A:middle
SwiftPM consists of four command

00:04:15.096 --> 00:04:16.976 A:middle
line tools, and at the top level

00:04:16.976 --> 00:04:17.666 A:middle
Swift Command.

00:04:18.466 --> 00:04:20.136 A:middle
Swift Build, to build your

00:04:20.136 --> 00:04:20.726 A:middle
package.

00:04:21.065 --> 00:04:23.066 A:middle
Swift Run to run its executable

00:04:23.066 --> 00:04:23.676 A:middle
products.

00:04:24.096 --> 00:04:26.466 A:middle
Swift Test to run tests.

00:04:26.986 --> 00:04:29.326 A:middle
And Swift Package to run various

00:04:29.326 --> 00:04:31.956 A:middle
non-build operations on the

00:04:32.996 --> 00:04:33.176 A:middle
package.

00:04:33.316 --> 00:04:34.756 A:middle
Packages are stored in git

00:04:34.756 --> 00:04:35.566 A:middle
repositories.

00:04:35.986 --> 00:04:37.876 A:middle
And diversions are represented

00:04:37.916 --> 00:04:38.756 A:middle
by git tags.

00:04:41.656 --> 00:04:43.496 A:middle
Next, I'm going to show you a

00:04:43.496 --> 00:04:45.866 A:middle
demo of how easy it is to create

00:04:45.866 --> 00:04:47.416 A:middle
your own first Swift Package.

00:04:51.136 --> 00:04:54.026 A:middle
We start in terminal, and we

00:04:54.026 --> 00:04:56.246 A:middle
create a new directory, called

00:04:56.246 --> 00:04:56.886 A:middle
helloworld.

00:04:57.806 --> 00:04:58.926 A:middle
This will also be the name of

00:04:58.926 --> 00:04:59.656 A:middle
our package.

00:05:00.386 --> 00:05:02.706 A:middle
Switch to that directory and we

00:05:02.706 --> 00:05:06.656 A:middle
will run Swift Package init with

00:05:06.656 --> 00:05:08.046 A:middle
the type executable.

00:05:08.576 --> 00:05:12.166 A:middle
With this, SwiftPM creates a

00:05:12.166 --> 00:05:13.716 A:middle
basic package and structure for

00:05:13.716 --> 00:05:14.006 A:middle
us.

00:05:15.096 --> 00:05:18.306 A:middle
Let's open finder to look at it

00:05:18.306 --> 00:05:19.556 A:middle
a little bit more closely.

00:05:29.046 --> 00:05:30.426 A:middle
We have the Package.swift

00:05:30.426 --> 00:05:32.046 A:middle
manifest file, which describes

00:05:32.076 --> 00:05:33.356 A:middle
the structure of the package.

00:05:33.746 --> 00:05:34.656 A:middle
We get a basic README.

00:05:34.656 --> 00:05:38.026 A:middle
You have the Sources directory

00:05:39.086 --> 00:05:40.266 A:middle
with a subfolder for our

00:05:40.266 --> 00:05:41.176 A:middle
helloworld target.

00:05:41.836 --> 00:05:43.736 A:middle
And the main.swift file for our

00:05:43.736 --> 00:05:44.306 A:middle
executable.

00:05:44.986 --> 00:05:46.286 A:middle
You also get a test directory,

00:05:46.486 --> 00:05:47.946 A:middle
where we could later put some

00:05:47.946 --> 00:05:48.476 A:middle
unit tests.

00:05:49.186 --> 00:05:52.146 A:middle
Let's switch back to terminal.

00:05:52.816 --> 00:05:58.296 A:middle
And we will type swift run to

00:05:58.296 --> 00:06:00.126 A:middle
build and run this package.

00:05:58.296 --> 00:06:00.126 A:middle
build and run this package.

00:06:00.466 --> 00:06:03.066 A:middle
This compiles the package, links

00:06:03.066 --> 00:06:05.056 A:middle
executable, and we see

00:06:05.056 --> 00:06:06.266 A:middle
helloworld is the output.

00:06:06.766 --> 00:06:09.366 A:middle
Next, I'm going to switch to

00:06:09.366 --> 00:06:10.766 A:middle
another terminal window, where

00:06:10.766 --> 00:06:12.076 A:middle
I've prepared a more complex

00:06:12.136 --> 00:06:12.566 A:middle
package.

00:06:12.706 --> 00:06:13.656 A:middle
We will use this in the

00:06:13.656 --> 00:06:16.926 A:middle
following to discuss the basic

00:06:17.116 --> 00:06:18.276 A:middle
concepts of SwiftPM.

00:06:19.026 --> 00:06:22.106 A:middle
But, first, let's also just run

00:06:22.106 --> 00:06:23.346 A:middle
it to see what it does.

00:06:24.236 --> 00:06:25.986 A:middle
So, you can see, it outputs

00:06:25.986 --> 00:06:27.546 A:middle
randomly generated playing cards

00:06:27.986 --> 00:06:28.666 A:middle
to the terminal.

00:06:35.076 --> 00:06:36.666 A:middle
Now, we can switch back to the

00:06:36.666 --> 00:06:39.816 A:middle
slides to talk about SwiftPM's

00:06:39.866 --> 00:06:40.816 A:middle
basic concepts.

00:06:47.436 --> 00:06:49.186 A:middle
A package consists of three

00:06:49.186 --> 00:06:51.006 A:middle
major parts; dependencies,

00:06:52.576 --> 00:06:57.206 A:middle
targets and products.

00:06:57.736 --> 00:06:59.666 A:middle
And we'll look into each of

00:06:59.666 --> 00:07:01.356 A:middle
these in more detail in the

00:06:59.666 --> 00:07:01.356 A:middle
these in more detail in the

00:07:01.356 --> 00:07:01.876 A:middle
following.

00:07:04.036 --> 00:07:05.836 A:middle
Dependencies are those Swift

00:07:05.836 --> 00:07:08.336 A:middle
packages that you can use when

00:07:08.336 --> 00:07:09.476 A:middle
developing your features.

00:07:10.146 --> 00:07:14.346 A:middle
Each dependency provides one or

00:07:14.346 --> 00:07:16.736 A:middle
more products such as libraries

00:07:17.256 --> 00:07:18.466 A:middle
that your package can use.

00:07:19.046 --> 00:07:21.816 A:middle
Let's take a look at how

00:07:21.816 --> 00:07:23.286 A:middle
dependencies look in the package

00:07:23.286 --> 00:07:26.216 A:middle
of Swift manifest file.

00:07:26.426 --> 00:07:27.816 A:middle
Each dependency has a source

00:07:27.816 --> 00:07:31.486 A:middle
location and it is versioned.

00:07:35.576 --> 00:07:37.436 A:middle
Targets are the basic building

00:07:37.436 --> 00:07:38.646 A:middle
blocks of packages.

00:07:39.786 --> 00:07:42.076 A:middle
A target describes how to build

00:07:42.076 --> 00:07:44.736 A:middle
a set of source files into

00:07:45.156 --> 00:07:47.606 A:middle
either a module or a test suite.

00:07:49.956 --> 00:07:51.856 A:middle
Targets can depend on other

00:07:51.856 --> 00:07:54.736 A:middle
targets of the same package and

00:07:56.456 --> 00:07:58.716 A:middle
on products exported from other

00:07:58.716 --> 00:08:00.106 A:middle
packages, declared as

00:07:58.716 --> 00:08:00.106 A:middle
packages, declared as

00:08:00.106 --> 00:08:00.776 A:middle
dependencies.

00:08:02.976 --> 00:08:04.656 A:middle
Products are executable to

00:08:04.656 --> 00:08:08.396 A:middle
libraries and products are

00:08:08.396 --> 00:08:09.476 A:middle
assembled from the build

00:08:09.476 --> 00:08:11.506 A:middle
artifacts of one or more target.

00:08:13.996 --> 00:08:16.166 A:middle
Packages provide libraries for

00:08:16.166 --> 00:08:18.426 A:middle
other packages by defining

00:08:18.426 --> 00:08:18.836 A:middle
products.

00:08:19.726 --> 00:08:22.536 A:middle
By default, you do not have to

00:08:22.536 --> 00:08:23.946 A:middle
declare the type of library

00:08:23.946 --> 00:08:26.726 A:middle
explicitly, but SwiftPM will

00:08:26.726 --> 00:08:28.906 A:middle
choose it for you based on its

00:08:28.906 --> 00:08:29.356 A:middle
use.

00:08:30.446 --> 00:08:32.346 A:middle
If needed, you can explicitly

00:08:32.346 --> 00:08:34.586 A:middle
declare a library a static or

00:08:34.586 --> 00:08:34.976 A:middle
dynamic.

00:08:35.586 --> 00:08:38.496 A:middle
Let's take a look how our

00:08:38.496 --> 00:08:40.756 A:middle
targets are configured in the

00:08:41.746 --> 00:08:42.066 A:middle
manifest.

00:08:42.066 --> 00:08:43.466 A:middle
In our example, we have three

00:08:43.466 --> 00:08:43.996 A:middle
targets.

00:08:45.916 --> 00:08:47.866 A:middle
The first is called libdealer,

00:08:48.046 --> 00:08:49.186 A:middle
and it contains the

00:08:49.496 --> 00:08:50.886 A:middle
implementation of our main

00:08:50.886 --> 00:08:51.646 A:middle
functionality.

00:08:52.496 --> 00:08:53.906 A:middle
And it has one dependency, the

00:08:53.906 --> 00:08:55.036 A:middle
deck of playing cards product

00:08:55.946 --> 00:08:58.266 A:middle
which comes from the dependency

00:08:58.266 --> 00:08:59.096 A:middle
we declared earlier.

00:09:00.896 --> 00:09:03.206 A:middle
Second target, dealer depends on

00:09:03.206 --> 00:09:04.946 A:middle
that to provide the command line

00:09:04.946 --> 00:09:06.536 A:middle
tool that we just run earlier.

00:09:07.096 --> 00:09:10.756 A:middle
And finally, we also have a test

00:09:10.756 --> 00:09:12.126 A:middle
target that depends on the two

00:09:12.126 --> 00:09:13.696 A:middle
other targets and this is where

00:09:13.696 --> 00:09:14.366 A:middle
we can unit test our

00:09:14.366 --> 00:09:14.956 A:middle
functionality.

00:09:20.026 --> 00:09:21.436 A:middle
In our example package, we have

00:09:21.436 --> 00:09:23.206 A:middle
also configured two products.

00:09:24.646 --> 00:09:26.676 A:middle
The first is a library product

00:09:27.206 --> 00:09:28.616 A:middle
corresponding to the libdealer

00:09:28.616 --> 00:09:29.026 A:middle
target.

00:09:30.066 --> 00:09:31.806 A:middle
And this provides our

00:09:31.806 --> 00:09:33.736 A:middle
implementation as a library for

00:09:33.736 --> 00:09:34.746 A:middle
external consumption.

00:09:35.186 --> 00:09:39.016 A:middle
Second, we have an executable

00:09:39.016 --> 00:09:41.166 A:middle
target depending on the dealer

00:09:41.166 --> 00:09:43.916 A:middle
target which provides an

00:09:43.916 --> 00:09:45.526 A:middle
executable for command line use.

00:09:50.496 --> 00:09:52.686 A:middle
To complete this section, I will

00:09:52.686 --> 00:09:53.886 A:middle
show you how we can use a

00:09:53.886 --> 00:09:55.596 A:middle
package to add a new feature to

00:09:55.596 --> 00:09:56.306 A:middle
the example.

00:09:59.836 --> 00:10:01.216 A:middle
This, we switch to a new

00:09:59.836 --> 00:10:01.216 A:middle
This, we switch to a new

00:10:01.216 --> 00:10:03.686 A:middle
terminal window and we open up

00:10:04.116 --> 00:10:05.806 A:middle
the package.swift manifest file.

00:10:05.806 --> 00:10:10.636 A:middle
We want to add a new dependency.

00:10:10.896 --> 00:10:15.156 A:middle
In this case, this is actually

00:10:15.156 --> 00:10:16.136 A:middle
SwiftPM itself.

00:10:16.216 --> 00:10:19.296 A:middle
As Rick told you, it is itself,

00:10:19.346 --> 00:10:20.426 A:middle
its own Swift Package.

00:10:20.856 --> 00:10:22.446 A:middle
It doesn't provide a stable API,

00:10:22.606 --> 00:10:23.686 A:middle
though, that is why we're

00:10:23.686 --> 00:10:25.166 A:middle
depending on an exact version

00:10:25.166 --> 00:10:25.486 A:middle
number.

00:10:27.516 --> 00:10:30.146 A:middle
We also want to depend on one of

00:10:30.146 --> 00:10:32.086 A:middle
its products in the libdealer

00:10:32.086 --> 00:10:32.476 A:middle
target.

00:10:33.016 --> 00:10:34.206 A:middle
It is called utility.

00:10:34.546 --> 00:10:37.716 A:middle
And among other things, it has a

00:10:37.716 --> 00:10:40.146 A:middle
class called terminal

00:10:40.146 --> 00:10:42.026 A:middle
controller, which provides us

00:10:42.216 --> 00:10:43.866 A:middle
with the possibility to color

00:10:43.996 --> 00:10:46.326 A:middle
the terminal output.

00:10:46.476 --> 00:10:48.056 A:middle
Note however, that this is no

00:10:48.056 --> 00:10:49.986 A:middle
official Apple API, we're just

00:10:49.986 --> 00:10:51.196 A:middle
using it for the demo.

00:10:51.756 --> 00:10:54.476 A:middle
Let's switch back to the

00:10:54.476 --> 00:10:54.906 A:middle
terminal.

00:10:57.136 --> 00:10:59.576 A:middle
I already changed the code to

00:10:59.576 --> 00:11:01.156 A:middle
make use of the new dependency

00:10:59.576 --> 00:11:01.156 A:middle
make use of the new dependency

00:11:02.016 --> 00:11:03.496 A:middle
before this demo.

00:11:03.876 --> 00:11:06.716 A:middle
So, we can just run it to see

00:11:06.716 --> 00:11:07.226 A:middle
the result.

00:11:07.716 --> 00:11:09.926 A:middle
And as you can see, we have the

00:11:09.926 --> 00:11:11.346 A:middle
same output, but now it's a

00:11:11.346 --> 00:11:12.946 A:middle
little bit more fun with some

00:11:12.946 --> 00:11:13.346 A:middle
colors.

00:11:19.096 --> 00:11:20.856 A:middle
I want to show you one last demo

00:11:22.656 --> 00:11:24.746 A:middle
which is how SwiftPM can run

00:11:24.746 --> 00:11:24.986 A:middle
tests.

00:11:25.526 --> 00:11:27.606 A:middle
For this, we're using the Swift

00:11:27.606 --> 00:11:28.566 A:middle
Neo package.

00:11:29.096 --> 00:11:30.636 A:middle
A networking library that Apple

00:11:31.006 --> 00:11:32.286 A:middle
open source earlier in the

00:11:32.286 --> 00:11:32.686 A:middle
spring.

00:11:33.236 --> 00:11:37.986 A:middle
We will run Swift Test with a

00:11:38.226 --> 00:11:39.366 A:middle
parallel option.

00:11:40.806 --> 00:11:42.006 A:middle
This allows us to run tests in

00:11:42.006 --> 00:11:42.576 A:middle
parallel.

00:11:42.656 --> 00:11:44.186 A:middle
So, you get your test results

00:11:44.186 --> 00:11:44.656 A:middle
faster.

00:11:45.216 --> 00:11:46.586 A:middle
And we also pass the filter

00:11:46.586 --> 00:11:47.036 A:middle
option.

00:11:49.396 --> 00:11:51.156 A:middle
This allows you to run a subset

00:11:51.156 --> 00:11:53.186 A:middle
of tests to you can iterate on a

00:11:53.186 --> 00:11:53.926 A:middle
single future.

00:11:57.736 --> 00:12:00.356 A:middle
This will now again compile our

00:11:57.736 --> 00:12:00.356 A:middle
This will now again compile our

00:12:01.166 --> 00:12:04.186 A:middle
package and run the tests in

00:12:04.186 --> 00:12:05.236 A:middle
just a few seconds.

00:12:09.136 --> 00:12:10.716 A:middle
And as you can see, we get a

00:12:10.716 --> 00:12:13.236 A:middle
nice progress bar and the tests

00:12:13.286 --> 00:12:14.536 A:middle
finish really fast, because we

00:12:14.536 --> 00:12:15.636 A:middle
were running them in parallel.

00:12:18.026 --> 00:12:19.566 A:middle
Let's switch back to the slides

00:12:19.566 --> 00:12:19.836 A:middle
again.

00:12:26.536 --> 00:12:27.776 A:middle
Next, I'm going to talk to you

00:12:27.776 --> 00:12:29.456 A:middle
about the design of the Swift

00:12:29.456 --> 00:12:29.936 A:middle
Package Manager.

00:12:36.216 --> 00:12:37.986 A:middle
SwiftPM follows Swift's

00:12:37.986 --> 00:12:38.606 A:middle
philosophy.

00:12:38.986 --> 00:12:40.706 A:middle
It is fast, safe, and

00:12:40.706 --> 00:12:41.146 A:middle
expressive.

00:12:41.816 --> 00:12:44.736 A:middle
It is safe due to its isolated

00:12:44.736 --> 00:12:46.426 A:middle
build environment and the fact

00:12:46.426 --> 00:12:48.046 A:middle
the builds cannot run arbitrary

00:12:48.046 --> 00:12:48.546 A:middle
commands.

00:12:49.256 --> 00:12:52.116 A:middle
It is fast due to using a build

00:12:52.116 --> 00:12:53.896 A:middle
engine that is scalable to large

00:12:53.896 --> 00:12:54.886 A:middle
dependency graphs.

00:12:55.416 --> 00:12:58.526 A:middle
And it's expressive due to using

00:12:58.636 --> 00:12:59.926 A:middle
the Swift language for the

00:12:59.926 --> 00:13:00.716 A:middle
package manifest.

00:12:59.926 --> 00:13:00.716 A:middle
package manifest.

00:13:01.426 --> 00:13:04.136 A:middle
And this also allows you to use

00:13:04.136 --> 00:13:05.376 A:middle
a programming language you're

00:13:05.376 --> 00:13:06.346 A:middle
already familiar with.

00:13:06.956 --> 00:13:11.346 A:middle
For the rest of the section, I

00:13:11.346 --> 00:13:12.436 A:middle
will take you on a journey

00:13:12.436 --> 00:13:13.726 A:middle
through the different steps you

00:13:13.726 --> 00:13:15.046 A:middle
will encounter when creating

00:13:15.046 --> 00:13:16.136 A:middle
your own Swift packages.

00:13:16.766 --> 00:13:18.736 A:middle
We will start with

00:13:18.736 --> 00:13:19.576 A:middle
configuration.

00:13:23.096 --> 00:13:25.126 A:middle
As we saw earlier, SwiftPM's

00:13:25.126 --> 00:13:26.796 A:middle
manifest is based on Swift.

00:13:27.336 --> 00:13:28.906 A:middle
Using Swift makes it easy to

00:13:28.906 --> 00:13:31.116 A:middle
understand because there is no

00:13:31.116 --> 00:13:32.136 A:middle
new language to learn.

00:13:32.736 --> 00:13:34.646 A:middle
We follow Swift's API design

00:13:34.646 --> 00:13:36.876 A:middle
guidelines to make it even more

00:13:36.876 --> 00:13:37.416 A:middle
familiar.

00:13:38.216 --> 00:13:40.216 A:middle
And, it allows us to take

00:13:40.216 --> 00:13:42.216 A:middle
advantage of existing tooling

00:13:42.276 --> 00:13:47.086 A:middle
written for Swift, but when

00:13:47.086 --> 00:13:48.586 A:middle
writing your own manifest, you

00:13:48.586 --> 00:13:50.076 A:middle
should still prefer declarative

00:13:50.076 --> 00:13:51.946 A:middle
syntax and avoid side effects.

00:13:53.236 --> 00:13:54.586 A:middle
Because SwiftPM makes no

00:13:54.586 --> 00:13:56.766 A:middle
guarantees about when or how

00:13:56.766 --> 00:13:58.746 A:middle
often your source code is being

00:13:58.746 --> 00:13:59.406 A:middle
evaluated.

00:14:00.316 --> 00:14:01.836 A:middle
On the left-hand side here, you

00:14:01.836 --> 00:14:03.846 A:middle
see an example that is not

00:14:03.846 --> 00:14:04.686 A:middle
really declarative.

00:14:05.416 --> 00:14:06.886 A:middle
We cannot see the name that is

00:14:06.886 --> 00:14:09.656 A:middle
being generated and it's used in

00:14:09.656 --> 00:14:10.956 A:middle
a couple of times across the

00:14:10.956 --> 00:14:11.526 A:middle
package.

00:14:12.076 --> 00:14:14.726 A:middle
In contrast, on the right-hand

00:14:14.726 --> 00:14:15.736 A:middle
side, we have a fully

00:14:15.736 --> 00:14:17.486 A:middle
declarative manifest by using

00:14:17.486 --> 00:14:18.406 A:middle
string constants.

00:14:18.666 --> 00:14:20.356 A:middle
It is easy to understand and see

00:14:20.746 --> 00:14:21.726 A:middle
what the targets are.

00:14:23.556 --> 00:14:25.526 A:middle
So, as you can see, not using

00:14:25.526 --> 00:14:27.086 A:middle
declarative syntax also makes

00:14:27.086 --> 00:14:28.056 A:middle
your manifest harder to

00:14:28.056 --> 00:14:29.596 A:middle
understand for you and your

00:14:29.596 --> 00:14:29.976 A:middle
users.

00:14:33.146 --> 00:14:35.226 A:middle
Source files organized on disks

00:14:35.296 --> 00:14:36.786 A:middle
in folders named after each

00:14:36.786 --> 00:14:38.806 A:middle
target in the package.

00:14:39.426 --> 00:14:40.846 A:middle
This makes it easy to get

00:14:40.846 --> 00:14:43.216 A:middle
started and allows packages to

00:14:43.246 --> 00:14:46.336 A:middle
adopt a common structure, so

00:14:46.516 --> 00:14:47.466 A:middle
that you can navigate them

00:14:47.466 --> 00:14:47.796 A:middle
quickly.

00:14:50.856 --> 00:14:52.496 A:middle
Package Managers and other build

00:14:52.496 --> 00:14:54.506 A:middle
tools often have attention

00:14:55.036 --> 00:14:56.696 A:middle
between what is explicitly

00:14:56.696 --> 00:14:58.636 A:middle
configured by the user and the

00:14:58.636 --> 00:15:00.256 A:middle
conventions that are imposed by

00:14:58.636 --> 00:15:00.256 A:middle
conventions that are imposed by

00:15:00.256 --> 00:15:00.976 A:middle
the Package Manager.

00:15:06.046 --> 00:15:07.586 A:middle
As I told you earlier, the

00:15:07.586 --> 00:15:09.126 A:middle
source file is automatically

00:15:09.126 --> 00:15:10.616 A:middle
picked up from convention base

00:15:10.616 --> 00:15:12.746 A:middle
locations on disk, so that you

00:15:12.746 --> 00:15:14.286 A:middle
can very easily add or remove

00:15:14.286 --> 00:15:15.936 A:middle
source files without having to

00:15:16.006 --> 00:15:17.316 A:middle
edit the package manifest.

00:15:19.496 --> 00:15:21.096 A:middle
Products and targets, however,

00:15:21.656 --> 00:15:23.326 A:middle
are worth explicitly configuring

00:15:23.326 --> 00:15:26.376 A:middle
to make it easier to understand

00:15:26.376 --> 00:15:28.436 A:middle
the package and what it defines

00:15:28.676 --> 00:15:29.736 A:middle
without needing to cross

00:15:29.736 --> 00:15:31.206 A:middle
reference with the layout on

00:15:31.206 --> 00:15:31.506 A:middle
disk.

00:15:32.816 --> 00:15:33.876 A:middle
It also makes it easy for

00:15:33.876 --> 00:15:36.346 A:middle
clients to see what a package

00:15:36.346 --> 00:15:38.406 A:middle
provides just by looking at the

00:15:38.406 --> 00:15:38.846 A:middle
manifest.

00:15:42.236 --> 00:15:44.756 A:middle
SwiftPM also supports building

00:15:44.756 --> 00:15:45.926 A:middle
source code for other program

00:15:45.926 --> 00:15:47.766 A:middle
manager languages, such as C,

00:15:47.766 --> 00:15:49.456 A:middle
C++, and Objective-C.

00:15:50.156 --> 00:15:51.496 A:middle
This allows integration with

00:15:51.496 --> 00:15:52.276 A:middle
existing code.

00:15:53.456 --> 00:15:54.826 A:middle
Note however that we do not

00:15:54.826 --> 00:15:56.516 A:middle
support mixing those languages

00:15:56.946 --> 00:15:58.646 A:middle
with Swift in the same target.

00:15:59.086 --> 00:16:03.266 A:middle
Next, we're going to look at

00:15:59.086 --> 00:16:03.266 A:middle
Next, we're going to look at

00:16:03.366 --> 00:16:04.646 A:middle
dependencies and versioning.

00:16:07.916 --> 00:16:10.006 A:middle
To make sure your packages can

00:16:10.006 --> 00:16:12.116 A:middle
benefit from bug fixes without

00:16:12.116 --> 00:16:14.136 A:middle
constant churn, Swift packages

00:16:14.356 --> 00:16:15.856 A:middle
should adhere to semantic

00:16:15.856 --> 00:16:16.306 A:middle
versioning.

00:16:17.606 --> 00:16:19.186 A:middle
This is a commonly used standard

00:16:19.346 --> 00:16:20.656 A:middle
which assign specific semantic

00:16:20.656 --> 00:16:22.246 A:middle
meaning to each of a version

00:16:22.246 --> 00:16:23.246 A:middle
number's components.

00:16:25.376 --> 00:16:27.236 A:middle
The major version signifies

00:16:27.276 --> 00:16:29.996 A:middle
breaking changes which required

00:16:30.146 --> 00:16:31.936 A:middle
clients to update their code.

00:16:33.196 --> 00:16:34.756 A:middle
Examples for the changes could

00:16:34.756 --> 00:16:36.516 A:middle
be deleting an existing type,

00:16:36.996 --> 00:16:38.566 A:middle
deleting a message, or changing

00:16:38.566 --> 00:16:39.236 A:middle
its signature.

00:16:40.166 --> 00:16:42.066 A:middle
But they also include backwards

00:16:42.066 --> 00:16:45.296 A:middle
incompatible bug fixes, or major

00:16:45.296 --> 00:16:48.366 A:middle
changes to the behavior of

00:16:48.366 --> 00:16:50.066 A:middle
existing API.

00:16:50.896 --> 00:16:52.406 A:middle
The minor version should be

00:16:52.406 --> 00:16:53.946 A:middle
updated if functionality is

00:16:53.946 --> 00:16:55.646 A:middle
added in a backwards compatible

00:16:55.646 --> 00:16:56.006 A:middle
manner.

00:16:57.046 --> 00:16:58.456 A:middle
Examples for this is adding a

00:16:58.456 --> 00:17:00.106 A:middle
new method or type.

00:16:58.456 --> 00:17:00.106 A:middle
new method or type.

00:17:00.996 --> 00:17:02.896 A:middle
And finally, the patch version

00:17:02.896 --> 00:17:04.465 A:middle
should be increased when you're

00:17:04.465 --> 00:17:06.165 A:middle
making backwards compatible bug

00:17:06.226 --> 00:17:06.736 A:middle
fixes.

00:17:08.276 --> 00:17:10.776 A:middle
This allows clients to benefit

00:17:10.776 --> 00:17:13.536 A:middle
from bug fixes without risking

00:17:13.536 --> 00:17:17.695 A:middle
breaking the source code.

00:17:17.816 --> 00:17:19.536 A:middle
SwiftPM needs to determine the

00:17:19.536 --> 00:17:21.296 A:middle
exact versions of all packages

00:17:21.296 --> 00:17:23.246 A:middle
in the package graph before it

00:17:23.246 --> 00:17:24.056 A:middle
is ready to build.

00:17:24.705 --> 00:17:26.526 A:middle
We do this with a process called

00:17:26.526 --> 00:17:27.756 A:middle
dependency resolution.

00:17:28.716 --> 00:17:30.796 A:middle
As part of this, SwiftPM looks

00:17:30.796 --> 00:17:32.376 A:middle
at all the requirements

00:17:33.456 --> 00:17:36.206 A:middle
specified for packages and finds

00:17:36.346 --> 00:17:37.516 A:middle
the latest version that is

00:17:37.516 --> 00:17:40.146 A:middle
compatible with all of them.

00:17:40.216 --> 00:17:41.396 A:middle
Let's take a closer look at what

00:17:41.396 --> 00:17:42.926 A:middle
SwiftPM is doing in the process

00:17:42.926 --> 00:17:44.836 A:middle
using the demo I showed you

00:17:44.836 --> 00:17:45.306 A:middle
before.

00:17:47.136 --> 00:17:49.676 A:middle
The dealer package from the demo

00:17:49.676 --> 00:17:51.066 A:middle
has two direct dependencies.

00:17:51.476 --> 00:17:53.796 A:middle
One, is SwiftPM itself, and the

00:17:53.796 --> 00:17:55.206 A:middle
other one is deck of playing

00:17:57.956 --> 00:17:58.136 A:middle
cards.

00:17:58.276 --> 00:17:59.666 A:middle
SwiftPM will resolve the

00:17:59.666 --> 00:18:00.796 A:middle
versions of these direct

00:17:59.666 --> 00:18:00.796 A:middle
versions of these direct

00:18:00.796 --> 00:18:01.456 A:middle
dependencies.

00:18:02.366 --> 00:18:03.666 A:middle
For the first one, this is

00:18:03.666 --> 00:18:05.086 A:middle
straightforward because we

00:18:05.086 --> 00:18:06.536 A:middle
specified an exact version,

00:18:07.886 --> 00:18:09.336 A:middle
beginning exactly that tag.

00:18:10.446 --> 00:18:11.886 A:middle
For the second one, we're using

00:18:11.886 --> 00:18:12.866 A:middle
the from syntax.

00:18:13.286 --> 00:18:14.986 A:middle
That means we're getting updates

00:18:14.986 --> 00:18:17.106 A:middle
to the minor or patch

00:18:17.106 --> 00:18:17.826 A:middle
components.

00:18:18.356 --> 00:18:21.766 A:middle
In this case, we're ending up

00:18:21.896 --> 00:18:24.046 A:middle
with a tag 3.1.4.

00:18:24.596 --> 00:18:28.566 A:middle
The whole process is recursive.

00:18:29.206 --> 00:18:30.876 A:middle
So next SwiftPM will look at the

00:18:30.876 --> 00:18:32.546 A:middle
transitive dependencies of all

00:18:32.546 --> 00:18:33.296 A:middle
diary points.

00:18:33.726 --> 00:18:34.716 A:middle
So, PM has no further

00:18:34.716 --> 00:18:36.656 A:middle
dependencies, so there's nothing

00:18:36.656 --> 00:18:37.146 A:middle
to do there.

00:18:37.706 --> 00:18:39.686 A:middle
But a deck of playing cards

00:18:39.796 --> 00:18:41.236 A:middle
depends on the Fisher-Yates and

00:18:41.236 --> 00:18:42.346 A:middle
playing card packages.

00:18:42.916 --> 00:18:47.426 A:middle
Next, SwiftPM has to resolve the

00:18:47.426 --> 00:18:48.776 A:middle
versions of these packages

00:18:48.776 --> 00:18:49.176 A:middle
again.

00:18:49.576 --> 00:18:50.976 A:middle
For the Fisher-Yates package,

00:18:51.066 --> 00:18:52.966 A:middle
this works the same way as

00:18:52.966 --> 00:18:54.546 A:middle
before because we are also using

00:18:54.546 --> 00:18:55.576 A:middle
the from syntax.

00:18:56.666 --> 00:18:57.906 A:middle
In this case, we're ending up

00:18:57.906 --> 00:18:59.626 A:middle
with a tag, 2.2.5.

00:19:00.146 --> 00:19:02.716 A:middle
For the playing card package,

00:19:02.986 --> 00:19:04.326 A:middle
we're using up to the next minor

00:19:04.326 --> 00:19:04.976 A:middle
syntax.

00:19:05.446 --> 00:19:06.866 A:middle
This means, we're getting only

00:19:06.866 --> 00:19:08.316 A:middle
updates to the patch component.

00:19:09.566 --> 00:19:10.466 A:middle
You might want to use that

00:19:10.466 --> 00:19:11.786 A:middle
syntax if you want to be more

00:19:11.786 --> 00:19:13.416 A:middle
conservative as a dependency and

00:19:13.416 --> 00:19:14.576 A:middle
only take bug fixes.

00:19:15.216 --> 00:19:17.786 A:middle
In this case, we're ending up

00:19:17.786 --> 00:19:21.916 A:middle
with a tag 3.0.2.

00:19:22.066 --> 00:19:23.626 A:middle
Finally, when looking at a

00:19:23.626 --> 00:19:26.486 A:middle
target, SwiftPM has to match up

00:19:26.576 --> 00:19:28.456 A:middle
its required products with the

00:19:28.456 --> 00:19:30.606 A:middle
packages that we resolved.

00:19:31.186 --> 00:19:32.556 A:middle
For this, we're looking at the

00:19:32.556 --> 00:19:34.996 A:middle
dealer target from the demo, and

00:19:34.996 --> 00:19:36.696 A:middle
as you can see, the utility

00:19:36.696 --> 00:19:39.176 A:middle
product is provided by the

00:19:39.176 --> 00:19:40.346 A:middle
SwiftPM package.

00:19:41.476 --> 00:19:43.116 A:middle
And the rest of the packages

00:19:43.786 --> 00:19:45.186 A:middle
provide the other products.

00:19:45.646 --> 00:19:50.156 A:middle
After dependency resolution, the

00:19:50.156 --> 00:19:52.106 A:middle
resolves are recorded in a file

00:19:52.106 --> 00:19:53.236 A:middle
called package.resolved.

00:19:53.816 --> 00:19:56.106 A:middle
the purpose of this file is so

00:19:56.106 --> 00:19:57.556 A:middle
that you can share the resolve

00:19:57.606 --> 00:19:59.086 A:middle
versions with other members of

00:19:59.086 --> 00:20:01.076 A:middle
your team, or your continuous

00:19:59.086 --> 00:20:01.076 A:middle
your team, or your continuous

00:20:01.576 --> 00:20:03.496 A:middle
integration infrastructure, so

00:20:03.496 --> 00:20:04.676 A:middle
that you get dependable build

00:20:04.676 --> 00:20:05.896 A:middle
results, and you can

00:20:05.896 --> 00:20:07.436 A:middle
deliberately choose when you

00:20:07.436 --> 00:20:10.976 A:middle
want to update a dependency.

00:20:11.046 --> 00:20:12.536 A:middle
You do so by running Swift

00:20:12.536 --> 00:20:13.716 A:middle
Package Update, when you're

00:20:13.716 --> 00:20:14.406 A:middle
ready to update.

00:20:15.366 --> 00:20:17.466 A:middle
Note also, that this is your

00:20:17.466 --> 00:20:19.896 A:middle
top-level package that contains

00:20:19.936 --> 00:20:21.286 A:middle
package.resolved.

00:20:22.176 --> 00:20:23.126 A:middle
If one of the transitive

00:20:23.126 --> 00:20:24.626 A:middle
dependencies contains a

00:20:24.626 --> 00:20:26.606 A:middle
package.resolve file, it will be

00:20:26.606 --> 00:20:27.876 A:middle
ignored for dependency

00:20:27.876 --> 00:20:28.506 A:middle
resolution.

00:20:30.776 --> 00:20:32.206 A:middle
Next, let's take a look at

00:20:32.206 --> 00:20:36.796 A:middle
building your package.

00:20:36.796 --> 00:20:38.446 A:middle
SwiftPM uses llbuild as its

00:20:38.446 --> 00:20:39.846 A:middle
underlying build engine.

00:20:40.526 --> 00:20:42.146 A:middle
llbuild is a set of libraries

00:20:42.146 --> 00:20:43.156 A:middle
for building build systems.

00:20:43.726 --> 00:20:45.146 A:middle
And it's built around a general

00:20:45.146 --> 00:20:47.176 A:middle
purpose and reusable build

00:20:47.176 --> 00:20:47.546 A:middle
engine.

00:20:47.956 --> 00:20:49.836 A:middle
This provides us with ability to

00:20:49.836 --> 00:20:51.396 A:middle
do fast as well as correct

00:20:51.396 --> 00:20:52.206 A:middle
incremental builds.

00:20:53.056 --> 00:20:54.926 A:middle
And is also used by Xcode's new

00:20:54.926 --> 00:20:55.536 A:middle
build system.

00:20:56.096 --> 00:20:59.606 A:middle
It is also the part of the Swift

00:20:59.606 --> 00:21:00.606 A:middle
open source project.

00:20:59.606 --> 00:21:00.606 A:middle
open source project.

00:21:02.796 --> 00:21:04.806 A:middle
Developing software in isolation

00:21:04.876 --> 00:21:06.266 A:middle
with all dependencies explicitly

00:21:06.266 --> 00:21:10.686 A:middle
declared ensures that even

00:21:10.686 --> 00:21:11.776 A:middle
packages with complex

00:21:11.776 --> 00:21:13.476 A:middle
requirements can be reliably

00:21:13.476 --> 00:21:15.036 A:middle
built and used in different

00:21:15.036 --> 00:21:15.736 A:middle
environments.

00:21:17.016 --> 00:21:18.376 A:middle
Instead of installing packages

00:21:18.376 --> 00:21:19.596 A:middle
globally into the system,

00:21:19.786 --> 00:21:21.506 A:middle
SwiftPM only allows you to use

00:21:21.506 --> 00:21:23.366 A:middle
packages that you explicitly

00:21:23.366 --> 00:21:23.956 A:middle
depend on.

00:21:25.166 --> 00:21:26.176 A:middle
We also leverage build

00:21:26.176 --> 00:21:29.116 A:middle
sandboxing so that nothing can

00:21:29.116 --> 00:21:30.526 A:middle
write to arbitrary locations on

00:21:30.526 --> 00:21:31.786 A:middle
the file system during the

00:21:31.786 --> 00:21:32.106 A:middle
build.

00:21:33.546 --> 00:21:36.216 A:middle
SwiftPM does not allow executing

00:21:36.216 --> 00:21:37.676 A:middle
arbitrary commands, or shell

00:21:37.676 --> 00:21:39.056 A:middle
scripts, as part of the build.

00:21:40.246 --> 00:21:41.326 A:middle
This allows us to fully

00:21:41.326 --> 00:21:44.016 A:middle
understand your build graph and

00:21:44.396 --> 00:21:46.396 A:middle
all of its inputs and outputs to

00:21:46.396 --> 00:21:48.516 A:middle
do fast, as well as correct,

00:21:48.566 --> 00:21:49.366 A:middle
incremental builds.

00:21:50.166 --> 00:21:52.486 A:middle
Because we have a view of all

00:21:52.486 --> 00:21:53.326 A:middle
your dependencies.

00:21:53.946 --> 00:21:56.726 A:middle
As I showed you in the demo

00:21:56.726 --> 00:21:59.016 A:middle
before, SwiftPM also supports

00:21:59.046 --> 00:21:59.496 A:middle
testing.

00:22:00.076 --> 00:22:01.386 A:middle
This is based on the XCTest

00:22:01.386 --> 00:22:02.716 A:middle
framework that you're already

00:22:02.716 --> 00:22:03.306 A:middle
familiar with.

00:22:03.916 --> 00:22:07.136 A:middle
We support parallel testing, so

00:22:07.136 --> 00:22:08.026 A:middle
that you can get your test

00:22:08.026 --> 00:22:08.876 A:middle
results faster.

00:22:10.036 --> 00:22:12.766 A:middle
And we support test filtering so

00:22:12.766 --> 00:22:13.856 A:middle
that you can run a subset of

00:22:13.886 --> 00:22:15.566 A:middle
tests and iterate on a single

00:22:15.566 --> 00:22:15.936 A:middle
feature.

00:22:16.496 --> 00:22:20.816 A:middle
As we're evolving SwiftPM, we're

00:22:20.816 --> 00:22:21.726 A:middle
thinking about workflow

00:22:21.726 --> 00:22:23.776 A:middle
features, especially so that you

00:22:23.776 --> 00:22:25.116 A:middle
can do all of your development

00:22:25.116 --> 00:22:27.526 A:middle
on the command line.

00:22:27.716 --> 00:22:29.376 A:middle
One such feature is edit mode,

00:22:30.246 --> 00:22:31.476 A:middle
which allows overwriting all

00:22:31.476 --> 00:22:32.876 A:middle
transitive occurrences of a

00:22:32.876 --> 00:22:34.986 A:middle
specific package, with a locally

00:22:34.986 --> 00:22:37.186 A:middle
checked out copy so that

00:22:37.386 --> 00:22:40.626 A:middle
temporary edits can be made, and

00:22:40.626 --> 00:22:41.766 A:middle
changes to transitive

00:22:41.766 --> 00:22:43.326 A:middle
dependencies can be tested

00:22:43.806 --> 00:22:44.996 A:middle
without having to forward all

00:22:44.996 --> 00:22:46.836 A:middle
packages in the graph upfront.

00:22:51.036 --> 00:22:53.396 A:middle
Branch dependencies allow

00:22:53.396 --> 00:22:54.826 A:middle
depending on packages without

00:22:54.826 --> 00:22:56.346 A:middle
strict versioning requirements.

00:22:56.626 --> 00:22:58.146 A:middle
This is useful when you're

00:22:58.146 --> 00:22:59.496 A:middle
developing multiple packages

00:22:59.666 --> 00:23:00.076 A:middle
together.

00:22:59.666 --> 00:23:00.076 A:middle
together.

00:23:01.276 --> 00:23:02.396 A:middle
This is a development only

00:23:02.396 --> 00:23:04.816 A:middle
feature, so you have to change

00:23:04.816 --> 00:23:06.446 A:middle
to certain version dependencies

00:23:06.706 --> 00:23:10.786 A:middle
before you publish a tag.

00:23:10.986 --> 00:23:12.636 A:middle
Local packages allow you to use

00:23:12.636 --> 00:23:14.526 A:middle
packages directly from the file

00:23:14.526 --> 00:23:16.536 A:middle
system, instead of from a git

00:23:16.536 --> 00:23:17.296 A:middle
repository.

00:23:17.806 --> 00:23:19.056 A:middle
This is useful to make it

00:23:19.056 --> 00:23:22.876 A:middle
possible to bring up multiple

00:23:22.876 --> 00:23:24.306 A:middle
packages during the initial

00:23:24.306 --> 00:23:24.816 A:middle
creation.

00:23:27.936 --> 00:23:29.566 A:middle
So, last topic, I want to talk

00:23:29.566 --> 00:23:30.996 A:middle
to you about adopting new

00:23:30.996 --> 00:23:32.426 A:middle
versions of SwiftPM and the

00:23:32.426 --> 00:23:33.176 A:middle
Swift language.

00:23:33.746 --> 00:23:37.766 A:middle
Each new version of Swift can

00:23:37.766 --> 00:23:39.156 A:middle
bring a new version of the

00:23:39.156 --> 00:23:40.866 A:middle
package.swift manifest API.

00:23:41.796 --> 00:23:43.146 A:middle
The previous API is still

00:23:43.146 --> 00:23:45.876 A:middle
available, so that you can take

00:23:45.876 --> 00:23:47.366 A:middle
advantage of new source tools

00:23:47.556 --> 00:23:48.716 A:middle
without having to update your

00:23:48.716 --> 00:23:51.226 A:middle
package or losing access to

00:23:51.226 --> 00:23:52.316 A:middle
existing packages.

00:23:53.576 --> 00:23:55.156 A:middle
New API can be adopted

00:23:55.626 --> 00:23:57.676 A:middle
independently of changing to a

00:23:57.676 --> 00:23:59.466 A:middle
new Swift language version for

00:23:59.466 --> 00:24:00.546 A:middle
your packages' source code.

00:23:59.466 --> 00:24:00.546 A:middle
your packages' source code.

00:24:01.146 --> 00:24:05.546 A:middle
To specify which version of the

00:24:05.546 --> 00:24:08.006 A:middle
API is being used, we're using

00:24:08.006 --> 00:24:09.476 A:middle
the Swift Tools Version command

00:24:10.526 --> 00:24:12.036 A:middle
at the top of the package.swift

00:24:12.066 --> 00:24:12.846 A:middle
manifest file.

00:24:13.446 --> 00:24:15.306 A:middle
This specifies the minimum

00:24:15.306 --> 00:24:16.476 A:middle
required version of the Swift

00:24:16.476 --> 00:24:19.266 A:middle
tools that is needed to process

00:24:19.266 --> 00:24:20.226 A:middle
the given manifest.

00:24:20.686 --> 00:24:24.056 A:middle
Each package can also declare

00:24:24.176 --> 00:24:25.356 A:middle
which versions of the Swift

00:24:25.356 --> 00:24:27.936 A:middle
language it uses for compiling

00:24:27.936 --> 00:24:28.646 A:middle
its source code.

00:24:29.536 --> 00:24:31.186 A:middle
This is a list, so you can

00:24:31.186 --> 00:24:32.436 A:middle
choose to support multiple

00:24:32.436 --> 00:24:34.216 A:middle
versions of Swift with the same

00:24:34.216 --> 00:24:35.566 A:middle
version of your package, by

00:24:35.566 --> 00:24:36.846 A:middle
using compiler directives.

00:24:37.816 --> 00:24:39.256 A:middle
A package graph can be a

00:24:39.256 --> 00:24:40.796 A:middle
mix-and-match of packages with

00:24:40.796 --> 00:24:41.826 A:middle
different language versions.

00:24:44.456 --> 00:24:45.866 A:middle
I told you a lot about how

00:24:45.866 --> 00:24:48.136 A:middle
SwiftPM works today, next I'd

00:24:48.136 --> 00:24:49.516 A:middle
like to invite Rick back up to

00:24:49.516 --> 00:24:51.746 A:middle
the stage to tell you where we

00:24:51.746 --> 00:24:52.476 A:middle
can go from here.

00:24:53.516 --> 00:24:58.626 A:middle
[ Applause ]

00:24:59.126 --> 00:24:59.946 A:middle
&gt;&gt; Thanks, Boris.

00:25:01.286 --> 00:25:02.416 A:middle
So, Boris has shown you what you

00:25:02.416 --> 00:25:04.856 A:middle
can do today, but there's a lot

00:25:04.856 --> 00:25:06.136 A:middle
more potential out there.

00:25:06.586 --> 00:25:08.426 A:middle
SwiftPM is still a young project

00:25:08.426 --> 00:25:09.716 A:middle
with lots of room to grow.

00:25:11.216 --> 00:25:13.396 A:middle
Swift uses an open evolution

00:25:13.396 --> 00:25:14.986 A:middle
process which means that anyone,

00:25:15.206 --> 00:25:17.116 A:middle
including you, can contribute

00:25:17.116 --> 00:25:17.956 A:middle
your ideas.

00:25:18.926 --> 00:25:19.796 A:middle
If you're looking for some

00:25:19.796 --> 00:25:21.596 A:middle
inspiration, we'd like to share

00:25:21.596 --> 00:25:23.736 A:middle
some of our ideas, but none of

00:25:23.736 --> 00:25:25.136 A:middle
this is a plan of record.

00:25:25.946 --> 00:25:27.086 A:middle
We're sharing these ideas so

00:25:27.086 --> 00:25:28.586 A:middle
that you can see the potential

00:25:28.586 --> 00:25:29.956 A:middle
of the Swift Package Manager.

00:25:30.276 --> 00:25:32.276 A:middle
And we welcome you to provide

00:25:32.276 --> 00:25:33.926 A:middle
your feedback, comments, and

00:25:33.926 --> 00:25:35.906 A:middle
your own ideas as we evolve is

00:25:36.066 --> 00:25:36.706 A:middle
this product.

00:25:38.216 --> 00:25:39.636 A:middle
The ideas I'm going to cover

00:25:39.806 --> 00:25:41.266 A:middle
today break down into four

00:25:41.266 --> 00:25:42.106 A:middle
different themes.

00:25:43.256 --> 00:25:44.396 A:middle
Letting the Swift Package

00:25:44.396 --> 00:25:45.806 A:middle
Manager integrate with other

00:25:45.806 --> 00:25:47.176 A:middle
tools that may want to sit on

00:25:47.176 --> 00:25:47.756 A:middle
top of it.

00:25:47.756 --> 00:25:50.366 A:middle
Helping you publish new versions

00:25:50.366 --> 00:25:52.136 A:middle
of your package and deploy their

00:25:52.136 --> 00:25:52.756 A:middle
products.

00:25:53.726 --> 00:25:55.806 A:middle
Supporting more complex packages

00:25:55.886 --> 00:25:57.136 A:middle
than SwiftPM is able to build

00:25:57.136 --> 00:25:57.606 A:middle
today.

00:25:57.606 --> 00:25:59.606 A:middle
And finally, some forward

00:25:59.606 --> 00:26:01.066 A:middle
looking thoughts on package

00:25:59.606 --> 00:26:01.066 A:middle
looking thoughts on package

00:26:01.096 --> 00:26:02.646 A:middle
discovery and trust.

00:26:02.986 --> 00:26:05.896 A:middle
While the SwiftPM command line

00:26:05.896 --> 00:26:07.726 A:middle
experience is important, we want

00:26:07.726 --> 00:26:09.036 A:middle
to make sure that SwiftPM can

00:26:09.036 --> 00:26:11.026 A:middle
integrate with other tools, such

00:26:11.026 --> 00:26:12.386 A:middle
as development environments,

00:26:12.676 --> 00:26:14.316 A:middle
automation, and more.

00:26:15.706 --> 00:26:16.846 A:middle
We've already laid the

00:26:16.846 --> 00:26:18.096 A:middle
groundwork for this with

00:26:18.096 --> 00:26:19.776 A:middle
SwiftPM's library-based

00:26:19.776 --> 00:26:20.466 A:middle
architecture.

00:26:21.356 --> 00:26:22.726 A:middle
SwiftPM doesn't have a stable

00:26:22.726 --> 00:26:25.076 A:middle
API today, but for tools that

00:26:25.076 --> 00:26:26.296 A:middle
are willing to keep up with the

00:26:26.296 --> 00:26:28.186 A:middle
SwiftPM changes, it's available

00:26:28.186 --> 00:26:30.226 A:middle
for adoption and additions

00:26:30.226 --> 00:26:30.686 A:middle
today.

00:26:32.256 --> 00:26:33.646 A:middle
If you're looking to build

00:26:33.646 --> 00:26:35.156 A:middle
support for SwiftPM into your

00:26:35.156 --> 00:26:36.956 A:middle
developer tools, we welcome your

00:26:36.956 --> 00:26:38.446 A:middle
contributions and discussion.

00:26:38.856 --> 00:26:40.786 A:middle
We want to make SwiftPM part of

00:26:40.786 --> 00:26:42.256 A:middle
a thriving ecosystem of

00:26:42.256 --> 00:26:43.196 A:middle
developer tools.

00:26:43.476 --> 00:26:46.666 A:middle
One thing we've seen requested

00:26:46.666 --> 00:26:48.596 A:middle
recently on the Swift forums is

00:26:48.596 --> 00:26:50.406 A:middle
a way for people to edit their

00:26:50.406 --> 00:26:52.276 A:middle
package.swift manifest from

00:26:52.276 --> 00:26:53.946 A:middle
automated tools, instead of

00:26:53.946 --> 00:26:55.796 A:middle
making their users always edit

00:26:55.796 --> 00:26:56.966 A:middle
the source code directly.

00:26:57.746 --> 00:26:59.166 A:middle
We think that it's possible for

00:26:59.166 --> 00:27:00.536 A:middle
SwiftPM to support this,

00:26:59.166 --> 00:27:00.536 A:middle
SwiftPM to support this,

00:27:00.876 --> 00:27:03.196 A:middle
probably by using libSyntax.

00:27:04.056 --> 00:27:05.926 A:middle
libSyntax is a library being

00:27:05.926 --> 00:27:07.296 A:middle
developed in the Swift open

00:27:07.296 --> 00:27:08.856 A:middle
source project that makes it

00:27:08.856 --> 00:27:11.256 A:middle
easier for you to understand and

00:27:11.256 --> 00:27:13.536 A:middle
manipulate Swift syntax from

00:27:13.536 --> 00:27:14.336 A:middle
other tools.

00:27:15.476 --> 00:27:17.546 A:middle
Boris told you earlier that you

00:27:17.546 --> 00:27:19.556 A:middle
should prefer declarative syntax

00:27:19.636 --> 00:27:21.236 A:middle
for your package.swift manifest,

00:27:21.526 --> 00:27:22.986 A:middle
and this is another reason why.

00:27:22.986 --> 00:27:25.006 A:middle
That will make it much easier

00:27:25.006 --> 00:27:26.526 A:middle
for SwiftPM to understand your

00:27:26.526 --> 00:27:28.076 A:middle
manifest, so that it can make

00:27:28.076 --> 00:27:29.706 A:middle
automatic changes, such as

00:27:29.706 --> 00:27:31.106 A:middle
adding new dependencies or

00:27:31.106 --> 00:27:32.486 A:middle
targets as shown here.

00:27:32.996 --> 00:27:36.286 A:middle
So, there's a lot of room for

00:27:36.286 --> 00:27:37.906 A:middle
SwiftPM also to add new

00:27:37.906 --> 00:27:39.016 A:middle
functionality to help you

00:27:39.016 --> 00:27:40.176 A:middle
publish new versions of your

00:27:40.176 --> 00:27:41.876 A:middle
packages and deploy their

00:27:41.876 --> 00:27:42.596 A:middle
products.

00:27:43.916 --> 00:27:45.776 A:middle
Today, when you want to publish

00:27:45.776 --> 00:27:46.996 A:middle
a new version of your package,

00:27:47.346 --> 00:27:49.056 A:middle
you tag it manually with git.

00:27:49.056 --> 00:27:51.286 A:middle
And if you want to inspect your

00:27:51.286 --> 00:27:52.976 A:middle
published tags, you use git

00:27:52.976 --> 00:27:54.096 A:middle
directly for that as well.

00:27:55.356 --> 00:27:56.986 A:middle
We could add new functionality

00:27:57.146 --> 00:27:58.956 A:middle
to automate this process and

00:27:58.956 --> 00:28:00.786 A:middle
perform additional housekeeping,

00:27:58.956 --> 00:28:00.786 A:middle
perform additional housekeeping,

00:28:00.786 --> 00:28:02.676 A:middle
validation, and other auxiliary

00:28:02.676 --> 00:28:04.466 A:middle
tasks you might want as part of

00:28:04.466 --> 00:28:05.506 A:middle
a streamlined publishing

00:28:05.506 --> 00:28:06.046 A:middle
workflow.

00:28:07.796 --> 00:28:09.726 A:middle
One especially useful feature we

00:28:09.726 --> 00:28:11.206 A:middle
could add here would be

00:28:11.316 --> 00:28:12.686 A:middle
assistance with maintaining

00:28:12.686 --> 00:28:14.056 A:middle
correct semantic versioning.

00:28:14.696 --> 00:28:17.176 A:middle
We could have SwiftPM analyze

00:28:17.176 --> 00:28:18.776 A:middle
the API differences in the new

00:28:18.776 --> 00:28:20.226 A:middle
version of your package and

00:28:20.226 --> 00:28:21.736 A:middle
detect when you've made a change

00:28:21.886 --> 00:28:22.976 A:middle
that is not compatible at

00:28:22.976 --> 00:28:24.656 A:middle
compile time, so that it can

00:28:24.656 --> 00:28:26.186 A:middle
suggest updating the major

00:28:26.186 --> 00:28:27.726 A:middle
version of your package.

00:28:30.916 --> 00:28:32.326 A:middle
Another thing we could do is

00:28:32.326 --> 00:28:34.286 A:middle
make it easier to deploy the

00:28:34.286 --> 00:28:36.156 A:middle
products of your packages from

00:28:36.156 --> 00:28:36.516 A:middle
SwiftPM.

00:28:36.516 --> 00:28:39.606 A:middle
You may want to customize the

00:28:39.606 --> 00:28:41.636 A:middle
linkage with libraries, or the

00:28:41.636 --> 00:28:43.586 A:middle
product layout for your specific

00:28:43.626 --> 00:28:45.086 A:middle
deployment environment, whether

00:28:45.086 --> 00:28:46.526 A:middle
local or on a server.

00:28:47.326 --> 00:28:48.886 A:middle
Or, maybe you want to include

00:28:48.886 --> 00:28:50.696 A:middle
version information about what

00:28:50.696 --> 00:28:52.516 A:middle
packages were built into the

00:28:52.516 --> 00:28:53.006 A:middle
product.

00:28:54.076 --> 00:28:55.736 A:middle
Or, you otherwise want to use

00:28:55.736 --> 00:28:57.316 A:middle
the context that SwiftPM has

00:28:57.366 --> 00:28:59.226 A:middle
about your packages somewhere in

00:28:59.226 --> 00:28:59.816 A:middle
your product.

00:29:00.516 --> 00:29:02.106 A:middle
SwiftPM could add new commands

00:29:02.106 --> 00:29:03.666 A:middle
to support all of these needs.

00:29:05.836 --> 00:29:07.196 A:middle
There's a lot that you can build

00:29:07.196 --> 00:29:09.266 A:middle
with SwiftPM today, but we also

00:29:09.266 --> 00:29:10.736 A:middle
want to be able to support more

00:29:10.736 --> 00:29:12.276 A:middle
complex packages with more

00:29:12.276 --> 00:29:13.486 A:middle
sophisticated needs.

00:29:14.916 --> 00:29:16.356 A:middle
The biggest gap we have right

00:29:16.356 --> 00:29:17.906 A:middle
now, is probably support for

00:29:17.906 --> 00:29:18.646 A:middle
resources.

00:29:18.836 --> 00:29:20.836 A:middle
If you have any images, data

00:29:20.836 --> 00:29:22.726 A:middle
files, or other assets, SwiftPM

00:29:22.726 --> 00:29:24.386 A:middle
currently provides no way to

00:29:24.386 --> 00:29:25.426 A:middle
bundle these up you're your

00:29:25.426 --> 00:29:25.966 A:middle
products.

00:29:27.096 --> 00:29:28.626 A:middle
The foundation core library,

00:29:28.626 --> 00:29:30.716 A:middle
actually just added API this

00:29:30.716 --> 00:29:33.276 A:middle
spring for doing resources in a

00:29:33.276 --> 00:29:35.586 A:middle
cross-platform manner so SwiftPM

00:29:35.586 --> 00:29:37.316 A:middle
could adopt this API if we want

00:29:37.316 --> 00:29:38.046 A:middle
to build this feature.

00:29:39.896 --> 00:29:41.736 A:middle
We know that some users also

00:29:41.736 --> 00:29:43.496 A:middle
want support for specifying

00:29:43.496 --> 00:29:45.446 A:middle
compiler flags, linker flags,

00:29:45.746 --> 00:29:47.026 A:middle
and other properties that

00:29:47.026 --> 00:29:48.686 A:middle
SwiftPM doesn't support today.

00:29:48.796 --> 00:29:51.216 A:middle
It would be really great for us

00:29:51.216 --> 00:29:52.946 A:middle
to add a robust build settings

00:29:52.946 --> 00:29:55.136 A:middle
model, potentially including

00:29:55.136 --> 00:29:56.386 A:middle
things like conditional

00:29:56.386 --> 00:29:58.776 A:middle
settings, or fine-grain control

00:29:58.776 --> 00:30:00.146 A:middle
over what parts of the package

00:29:58.776 --> 00:30:00.146 A:middle
over what parts of the package

00:30:00.216 --> 00:30:01.526 A:middle
get which setting values.

00:30:03.636 --> 00:30:04.866 A:middle
Boris also talked to you earlier

00:30:04.866 --> 00:30:06.786 A:middle
about SwiftPM build isolation,

00:30:06.786 --> 00:30:08.026 A:middle
and why it's important.

00:30:09.206 --> 00:30:10.456 A:middle
We don't let you run arbitrary

00:30:10.456 --> 00:30:11.206 A:middle
shell scripts.

00:30:11.626 --> 00:30:13.696 A:middle
But many users may want some

00:30:13.696 --> 00:30:14.906 A:middle
level of customization for their

00:30:14.906 --> 00:30:16.416 A:middle
build, either because they want

00:30:16.416 --> 00:30:18.216 A:middle
to support custom languages, or

00:30:18.216 --> 00:30:19.976 A:middle
processors, they want to run

00:30:19.976 --> 00:30:21.026 A:middle
their own documentation

00:30:21.026 --> 00:30:22.686 A:middle
generator implementor, or they

00:30:22.686 --> 00:30:24.166 A:middle
have other steps that they need

00:30:24.166 --> 00:30:25.826 A:middle
to bring to the build process.

00:30:26.776 --> 00:30:27.926 A:middle
We think that SwiftPM could

00:30:27.926 --> 00:30:29.836 A:middle
support this safely, possibly

00:30:29.836 --> 00:30:32.196 A:middle
even through real tools packages

00:30:32.196 --> 00:30:33.506 A:middle
that bring new tools into your

00:30:33.506 --> 00:30:34.366 A:middle
build process.

00:30:34.956 --> 00:30:36.226 A:middle
The important thing we need to

00:30:36.226 --> 00:30:37.746 A:middle
make sure here, if we do such a

00:30:37.746 --> 00:30:39.706 A:middle
feature, is that any new tool

00:30:39.706 --> 00:30:40.716 A:middle
that's brought into the build

00:30:40.716 --> 00:30:42.306 A:middle
process have to correctly

00:30:42.306 --> 00:30:44.196 A:middle
declare their input and output

00:30:44.246 --> 00:30:46.166 A:middle
dependencies, so SwiftPM can

00:30:46.166 --> 00:30:48.286 A:middle
continue to maintain correct

00:30:48.366 --> 00:30:50.476 A:middle
incremental, and parallelizable

00:30:50.476 --> 00:30:50.946 A:middle
builds.

00:30:53.596 --> 00:30:54.876 A:middle
Finally, I want to talk a little

00:30:54.876 --> 00:30:56.446 A:middle
bit about some forward-looking

00:30:56.446 --> 00:30:58.306 A:middle
thoughts on package discovery,

00:30:58.556 --> 00:31:00.406 A:middle
trust, and management.

00:30:58.556 --> 00:31:00.406 A:middle
trust, and management.

00:31:00.906 --> 00:31:04.026 A:middle
Git itself supports, the

00:31:04.026 --> 00:31:05.226 A:middle
protocols that get supports,

00:31:05.546 --> 00:31:07.116 A:middle
provides security mechanisms

00:31:07.116 --> 00:31:08.786 A:middle
like TLS to make sure that

00:31:08.786 --> 00:31:10.056 A:middle
you're actually talking to the

00:31:10.056 --> 00:31:11.446 A:middle
remote repository that you think

00:31:11.446 --> 00:31:11.826 A:middle
you are.

00:31:12.356 --> 00:31:14.036 A:middle
But a malicious actor could

00:31:14.036 --> 00:31:15.496 A:middle
still compromise remote

00:31:15.496 --> 00:31:17.296 A:middle
repository and put malicious

00:31:17.326 --> 00:31:18.876 A:middle
content in.

00:31:19.166 --> 00:31:20.186 A:middle
This is actually something

00:31:20.186 --> 00:31:21.536 A:middle
anytime you're using third-party

00:31:21.536 --> 00:31:22.996 A:middle
code, you should be aware of

00:31:22.996 --> 00:31:24.006 A:middle
these sorts of risks.

00:31:24.376 --> 00:31:25.706 A:middle
But the Swift Package Manager

00:31:25.856 --> 00:31:27.776 A:middle
provides a great opportunity for

00:31:27.776 --> 00:31:29.686 A:middle
us to build security features to

00:31:29.686 --> 00:31:30.996 A:middle
make sure that you're actually

00:31:30.996 --> 00:31:32.366 A:middle
getting the package content that

00:31:32.366 --> 00:31:33.016 A:middle
you expected.

00:31:35.456 --> 00:31:37.546 A:middle
SwiftPM also prevents your

00:31:37.546 --> 00:31:39.026 A:middle
package.swift manifest

00:31:39.026 --> 00:31:41.206 A:middle
evaluation in your build from

00:31:41.206 --> 00:31:42.876 A:middle
escaping and writing things out

00:31:42.876 --> 00:31:44.266 A:middle
into your file system or

00:31:44.266 --> 00:31:45.316 A:middle
accessing the network.

00:31:45.756 --> 00:31:47.686 A:middle
We're using macOS' sandboxing

00:31:47.686 --> 00:31:49.066 A:middle
technology for this today.

00:31:49.066 --> 00:31:49.786 A:middle
And it's great.

00:31:50.096 --> 00:31:51.166 A:middle
But we'd like to bring this kind

00:31:51.166 --> 00:31:52.666 A:middle
of security to other platforms

00:31:52.666 --> 00:31:53.126 A:middle
as well.

00:31:55.596 --> 00:31:56.966 A:middle
Many users may want to be able

00:31:56.966 --> 00:31:58.566 A:middle
to fork their packages easily,

00:31:58.916 --> 00:32:00.346 A:middle
either because they want to make

00:31:58.916 --> 00:32:00.346 A:middle
either because they want to make

00:32:00.346 --> 00:32:02.086 A:middle
a private customization to one

00:32:02.086 --> 00:32:03.456 A:middle
of the packages in their graph.

00:32:04.046 --> 00:32:05.416 A:middle
Or, even because they just want

00:32:05.416 --> 00:32:08.006 A:middle
to override the origin URL of

00:32:08.006 --> 00:32:09.016 A:middle
where they're getting each of

00:32:09.016 --> 00:32:10.406 A:middle
those packages from, so that

00:32:10.406 --> 00:32:12.516 A:middle
they can point at a private

00:32:12.516 --> 00:32:14.846 A:middle
mirror that they control and not

00:32:14.876 --> 00:32:16.616 A:middle
depend on the original package

00:32:16.676 --> 00:32:20.116 A:middle
always being there.

00:32:20.286 --> 00:32:21.636 A:middle
Ultimately, I'd like some day

00:32:21.636 --> 00:32:23.096 A:middle
for us to have a real index for

00:32:23.096 --> 00:32:23.966 A:middle
Swift packages.

00:32:24.636 --> 00:32:25.846 A:middle
In addition to providing a

00:32:25.846 --> 00:32:27.936 A:middle
standardized namespace and

00:32:27.936 --> 00:32:29.476 A:middle
making it easier to discover new

00:32:29.476 --> 00:32:31.696 A:middle
packages, we could even support

00:32:31.696 --> 00:32:33.926 A:middle
things like quality metrics for

00:32:33.926 --> 00:32:34.416 A:middle
a package.

00:32:34.416 --> 00:32:35.656 A:middle
Like what is its automated test

00:32:35.656 --> 00:32:36.146 A:middle
coverage?

00:32:36.636 --> 00:32:38.466 A:middle
Or ways for you to evaluate the

00:32:38.466 --> 00:32:40.246 A:middle
trustworthiness of a new package

00:32:40.246 --> 00:32:40.966 A:middle
that you're considering

00:32:40.966 --> 00:32:41.476 A:middle
adopting.

00:32:41.976 --> 00:32:45.106 A:middle
So, I've gone over a lot here.

00:32:45.306 --> 00:32:46.296 A:middle
But these are just some of the

00:32:46.296 --> 00:32:47.236 A:middle
possibilities.

00:32:47.616 --> 00:32:49.256 A:middle
Ultimately for those of you, who

00:32:49.256 --> 00:32:51.066 A:middle
are interested, we're interested

00:32:51.066 --> 00:32:52.846 A:middle
in your feedback, ideas, and

00:32:52.846 --> 00:32:54.606 A:middle
contributions to help make Swift

00:32:54.606 --> 00:32:56.126 A:middle
Package Manager the best tool

00:32:56.126 --> 00:32:57.236 A:middle
that it can be for the developer

00:32:57.236 --> 00:32:57.756 A:middle
community.

00:32:58.686 --> 00:33:00.726 A:middle
So, to talk about how you can do

00:32:58.686 --> 00:33:00.726 A:middle
So, to talk about how you can do

00:33:00.726 --> 00:33:02.146 A:middle
that if you'd like to, I'd like

00:33:02.146 --> 00:33:03.486 A:middle
to talk about Swift's open

00:33:03.486 --> 00:33:04.476 A:middle
source process.

00:33:05.756 --> 00:33:07.506 A:middle
As I said earlier, the Package

00:33:07.506 --> 00:33:09.126 A:middle
Manager is part of the Swift

00:33:09.126 --> 00:33:10.306 A:middle
open source project.

00:33:10.926 --> 00:33:12.686 A:middle
And Swift.org is also a great

00:33:12.686 --> 00:33:14.306 A:middle
place to go if you want to learn

00:33:14.306 --> 00:33:15.816 A:middle
about the community and the

00:33:15.816 --> 00:33:16.536 A:middle
process.

00:33:18.306 --> 00:33:20.786 A:middle
SwiftPM uses the Swift language

00:33:20.856 --> 00:33:23.176 A:middle
evolution process which means

00:33:23.176 --> 00:33:25.696 A:middle
anyone can submit a proposal for

00:33:25.696 --> 00:33:28.336 A:middle
major new features or changes to

00:33:28.476 --> 00:33:29.616 A:middle
the Swift Package Manager.

00:33:31.156 --> 00:33:32.826 A:middle
Before you go off and draft a

00:33:32.826 --> 00:33:34.396 A:middle
whole formal proposal though, I

00:33:34.466 --> 00:33:36.036 A:middle
recommend that you swing by the

00:33:36.036 --> 00:33:37.676 A:middle
Package Manager section of the

00:33:37.676 --> 00:33:39.636 A:middle
Swift forums and socialize your

00:33:39.636 --> 00:33:40.726 A:middle
idea with the community.

00:33:41.246 --> 00:33:42.456 A:middle
You may get a lot of feedback

00:33:42.526 --> 00:33:44.256 A:middle
that helps make your idea even

00:33:44.256 --> 00:33:44.576 A:middle
better.

00:33:45.156 --> 00:33:47.916 A:middle
If you're interested in dipping

00:33:47.916 --> 00:33:48.936 A:middle
your toe in the water with a

00:33:48.936 --> 00:33:50.756 A:middle
smaller contribution the Swift

00:33:50.756 --> 00:33:52.786 A:middle
bug tracker at bugs.swift.org

00:33:52.786 --> 00:33:54.856 A:middle
has plenty of ideas.

00:33:54.856 --> 00:33:55.966 A:middle
In particular, you may want to

00:33:55.966 --> 00:33:57.756 A:middle
look for bugs tagged with this

00:33:57.756 --> 00:33:58.756 A:middle
starter bug tag.

00:33:59.266 --> 00:34:00.656 A:middle
And since, as I said, SwiftPM is

00:33:59.266 --> 00:34:00.656 A:middle
And since, as I said, SwiftPM is

00:34:00.656 --> 00:34:02.226 A:middle
written in Swift, you may find

00:34:02.436 --> 00:34:03.606 A:middle
it's actually pretty easy to

00:34:03.606 --> 00:34:04.886 A:middle
dive in and take a look.

00:34:05.346 --> 00:34:07.836 A:middle
Of course, if you find bugs when

00:34:07.836 --> 00:34:09.306 A:middle
you're using SwiftPM, we

00:34:09.306 --> 00:34:10.746 A:middle
encourage you to go file them on

00:34:10.746 --> 00:34:12.525 A:middle
bugs.swift.org as well, where

00:34:12.525 --> 00:34:14.396 A:middle
you can track how we handle

00:34:16.456 --> 00:34:16.556 A:middle
them.

00:34:16.755 --> 00:34:18.166 A:middle
SwiftPM gets to take advantage

00:34:18.166 --> 00:34:19.656 A:middle
of the same great continuous

00:34:19.656 --> 00:34:20.926 A:middle
integration infrastructure that

00:34:20.926 --> 00:34:21.956 A:middle
the Swift project has.

00:34:22.356 --> 00:34:23.516 A:middle
Which means that poll requests

00:34:23.516 --> 00:34:25.126 A:middle
can be automatically built and

00:34:25.126 --> 00:34:26.646 A:middle
had their tests run before their

00:34:26.646 --> 00:34:27.116 A:middle
merged.

00:34:27.766 --> 00:34:29.206 A:middle
Because the SwiftPM code base

00:34:29.206 --> 00:34:30.815 A:middle
itself has great test coverage,

00:34:31.116 --> 00:34:31.775 A:middle
we found that this

00:34:31.775 --> 00:34:33.206 A:middle
infrastructure is really useful

00:34:33.206 --> 00:34:33.755 A:middle
for us.

00:34:35.356 --> 00:34:36.806 A:middle
When you're ready to try out the

00:34:36.806 --> 00:34:38.686 A:middle
latest changes, you can download

00:34:38.686 --> 00:34:40.436 A:middle
the Trunk Snapshot Toolchains

00:34:40.536 --> 00:34:41.775 A:middle
that are updated on a regular

00:34:41.775 --> 00:34:44.156 A:middle
basis available on Swift.org.

00:34:46.456 --> 00:34:47.866 A:middle
We've been really happy with the

00:34:47.866 --> 00:34:49.306 A:middle
growth of the SwiftPM community

00:34:49.306 --> 00:34:49.746 A:middle
so far.

00:34:49.956 --> 00:34:51.876 A:middle
We've had over 180 people

00:34:51.876 --> 00:34:53.626 A:middle
contribute, either with bug

00:34:53.626 --> 00:34:55.146 A:middle
features or new features.

00:34:55.636 --> 00:34:57.276 A:middle
And the Swift Package ecosystem

00:34:57.276 --> 00:34:58.446 A:middle
is growing at a healthy rate as

00:34:58.446 --> 00:35:00.216 A:middle
well, often with cross-platform

00:34:58.446 --> 00:35:00.216 A:middle
well, often with cross-platform

00:35:00.216 --> 00:35:01.736 A:middle
packages, and many public

00:35:01.736 --> 00:35:03.236 A:middle
packages available on GitHub.

00:35:04.086 --> 00:35:05.296 A:middle
What this means is that you can

00:35:05.296 --> 00:35:06.666 A:middle
focus on what makes your product

00:35:06.666 --> 00:35:08.406 A:middle
special and let package

00:35:08.406 --> 00:35:10.086 A:middle
dependencies handle the rest.

00:35:10.086 --> 00:35:12.346 A:middle
There are a couple things that I

00:35:12.346 --> 00:35:13.966 A:middle
recommend you try SwiftPM out

00:35:14.116 --> 00:35:15.456 A:middle
for today, even though it has a

00:35:15.456 --> 00:35:16.326 A:middle
lot of room to grow in the

00:35:16.326 --> 00:35:16.766 A:middle
future.

00:35:17.136 --> 00:35:19.126 A:middle
Those two things are command

00:35:19.126 --> 00:35:21.656 A:middle
line utilities and libraries and

00:35:21.656 --> 00:35:23.116 A:middle
for developing with Swift on the

00:35:23.116 --> 00:35:23.616 A:middle
server.

00:35:24.796 --> 00:35:26.216 A:middle
The server-side Swift community

00:35:26.216 --> 00:35:27.926 A:middle
has been making extensive use of

00:35:27.926 --> 00:35:29.156 A:middle
the Swift package manager.

00:35:29.626 --> 00:35:30.956 A:middle
And server-side Swift has been

00:35:30.956 --> 00:35:32.696 A:middle
growing well itself with many

00:35:32.696 --> 00:35:33.916 A:middle
frameworks now available for

00:35:33.916 --> 00:35:35.116 A:middle
doing web and backend

00:35:35.116 --> 00:35:35.646 A:middle
development.

00:35:36.296 --> 00:35:37.886 A:middle
If you would like to take a look

00:35:37.886 --> 00:35:39.006 A:middle
at this approach, I think you'll

00:35:39.006 --> 00:35:40.326 A:middle
find that Swift is a great

00:35:40.326 --> 00:35:41.426 A:middle
language to do this kind of

00:35:41.426 --> 00:35:42.736 A:middle
cross-platform development on.

00:35:44.076 --> 00:35:45.686 A:middle
But you could also go ahead and

00:35:45.686 --> 00:35:47.096 A:middle
use SwiftPM for creating

00:35:47.096 --> 00:35:48.366 A:middle
command-line utilities and

00:35:48.366 --> 00:35:50.116 A:middle
libraries today, whatever makes

00:35:50.116 --> 00:35:50.796 A:middle
sense for you.

00:35:51.386 --> 00:35:53.406 A:middle
Ultimately getting started is as

00:35:53.406 --> 00:35:54.856 A:middle
easy as opening a terminal

00:35:54.856 --> 00:35:56.656 A:middle
window and running Swift package

00:35:56.656 --> 00:35:57.006 A:middle
init.

00:35:57.776 --> 00:35:58.746 A:middle
So, the next time you're

00:35:58.746 --> 00:36:00.186 A:middle
thinking about trying something

00:35:58.746 --> 00:36:00.186 A:middle
thinking about trying something

00:36:00.186 --> 00:36:01.686 A:middle
new, I encourage you to give it

00:36:01.686 --> 00:36:02.136 A:middle
a try.

00:36:03.046 --> 00:36:04.176 A:middle
And if you're interested in

00:36:04.176 --> 00:36:05.946 A:middle
contributing, swing by the Swift

00:36:05.946 --> 00:36:07.786 A:middle
forums and start a conversation.

00:36:08.796 --> 00:36:09.986 A:middle
If you'd like to come chat with

00:36:09.986 --> 00:36:11.876 A:middle
us, you can find us in the labs

00:36:11.876 --> 00:36:15.326 A:middle
tomorrow at 3 p.m. Ultimately,

00:36:15.326 --> 00:36:16.626 A:middle
I'm really excited about where

00:36:16.626 --> 00:36:17.906 A:middle
we can go from here and what

00:36:17.906 --> 00:36:19.366 A:middle
this developer community can do

00:36:19.366 --> 00:36:19.826 A:middle
together.

00:36:20.586 --> 00:36:21.886 A:middle
Your contributions will help us

00:36:21.916 --> 00:36:23.626 A:middle
design a package manager that

00:36:23.626 --> 00:36:24.996 A:middle
will be great for the whole

00:36:24.996 --> 00:36:25.796 A:middle
Swift community.

00:36:26.796 --> 00:36:27.226 A:middle
Thank you.

00:36:27.306 --> 00:36:28.916 A:middle
Enjoy the rest of WWDC.

00:36:29.516 --> 00:36:33.500 A:middle
[ Applause ]
