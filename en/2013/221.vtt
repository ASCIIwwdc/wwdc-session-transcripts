WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:05.111 A:middle
[ Silence ]

00:00:05.611 --> 00:00:10.216 A:middle
[ Applause ]

00:00:10.716 --> 00:00:15.346 A:middle
&gt;&gt; Good afternoon.

00:00:17.206 --> 00:00:19.326 A:middle
Welcome to this WWDC session

00:00:19.326 --> 00:00:21.996 A:middle
on Advanced Techniques
with UIKit Dynamics.

00:00:23.096 --> 00:00:27.916 A:middle
We have a lot of content for
you today, many lines of code.

00:00:29.606 --> 00:00:30.416 A:middle
So let's get started.

00:00:32.125 --> 00:00:35.606 A:middle
We're going to start with a
very quick recap of dynamics,

00:00:36.156 --> 00:00:41.366 A:middle
architecture, and we're
going to explore more of this

00:00:41.496 --> 00:00:43.116 A:middle
"combining behaviors" idea.

00:00:44.076 --> 00:00:46.406 A:middle
And we're going to
talk briefly again

00:00:46.406 --> 00:00:49.716 A:middle
about dynamic items,
custom dynamic items.

00:00:49.716 --> 00:00:52.256 A:middle
And we have a quick example

00:00:52.256 --> 00:00:54.946 A:middle
about collection
view and dynamics.

00:00:55.506 --> 00:01:01.916 A:middle
And we will end with great
demo and architecture

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:02.016 --> 00:01:05.316 A:middle
about using view
controllers with dynamics.

00:01:06.476 --> 00:01:09.006 A:middle
So UIKit Dynamics.

00:01:09.506 --> 00:01:12.536 A:middle
It's a physics inspired
animation

00:01:12.536 --> 00:01:13.866 A:middle
and interaction system.

00:01:15.826 --> 00:01:19.396 A:middle
Made to be composable,
combinable, reusable.

00:01:19.396 --> 00:01:24.676 A:middle
We try to use Dynamics in
a way which is declarative.

00:01:25.546 --> 00:01:29.206 A:middle
You tell us what the
intent of the interaction is

00:01:29.526 --> 00:01:33.626 A:middle
and we will try to combine the
effect of all new behaviors

00:01:33.626 --> 00:01:35.166 A:middle
to animate things on screen.

00:01:35.696 --> 00:01:40.556 A:middle
Let me stress that this
does not, in anyway,

00:01:40.556 --> 00:01:43.986 A:middle
replace what we have to
day with Core Animation,

00:01:44.366 --> 00:01:46.796 A:middle
UIView animation,
or motion effects.

00:01:47.296 --> 00:01:52.526 A:middle
It is just a new tool for rich,
real-world like interactions.

00:01:54.056 --> 00:01:59.656 A:middle
So the base Dynamics
architecture,

00:01:59.656 --> 00:02:04.306 A:middle
we have this DynamicAnimator
which gives us this context

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:04.586 --> 00:02:08.616 A:middle
in which we associate
various behaviors

00:02:08.916 --> 00:02:13.166 A:middle
and we associate dynamic
items which are usually views

00:02:13.166 --> 00:02:15.446 A:middle
or collection view
layout attributes.

00:02:16.236 --> 00:02:20.086 A:middle
And the key thing here
is, an item might be part

00:02:20.156 --> 00:02:22.466 A:middle
of different behaviors
and we're going

00:02:22.466 --> 00:02:24.316 A:middle
to combine all these effects.

00:02:24.976 --> 00:02:27.736 A:middle
So let's talk about
UIDynamicAnimator.

00:02:29.796 --> 00:02:35.706 A:middle
So its main job is to track
behaviors and animated items.

00:02:36.476 --> 00:02:40.566 A:middle
And it wraps the underlying
physics engine we run for you.

00:02:41.106 --> 00:02:46.596 A:middle
What's interesting is, we try to
actually optimize that engine.

00:02:46.596 --> 00:02:51.286 A:middle
So if we detect that the system
is at rest, we just stop.

00:02:51.916 --> 00:02:56.606 A:middle
If you change anything like
changing the parameter on one

00:02:56.606 --> 00:02:59.166 A:middle
of your behaviors, we
start the system again.

00:02:59.726 --> 00:03:01.496 A:middle
And you can actually
be notified.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:02.476 --> 00:03:05.526 A:middle
We have a
UIDynamicAnimatorDelegate,

00:03:06.206 --> 00:03:10.246 A:middle
so you can implement methods
so you can know if we are

00:03:10.246 --> 00:03:14.076 A:middle
about to pause or
resume that system.

00:03:16.886 --> 00:03:19.996 A:middle
You can use a DynamicAnimator
in three modes basically,

00:03:19.996 --> 00:03:22.606 A:middle
with views which
is the common case.

00:03:22.726 --> 00:03:25.386 A:middle
In collection views--
collection view layout exactly,

00:03:25.956 --> 00:03:28.636 A:middle
and you can implement
your own dynamic item

00:03:28.766 --> 00:03:30.956 A:middle
to participate in dynamics.

00:03:31.366 --> 00:03:35.216 A:middle
So let's talk about
combining behaviors.

00:03:38.056 --> 00:03:42.016 A:middle
Combining behaviors
is interesting:

00:03:42.016 --> 00:03:46.406 A:middle
the underlying model physics
is in itself quite good

00:03:46.406 --> 00:03:49.986 A:middle
about combining things, combine
two forces and you get a force.

00:03:50.556 --> 00:03:55.516 A:middle
And we build on that,
we have this base class

00:03:55.516 --> 00:03:58.916 A:middle
UIDynamicBehavior
that you can subclass.

00:03:59.786 --> 00:04:04.666 A:middle
And one of few things we have
in this class is the ability

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:04.666 --> 00:04:06.836 A:middle
to add child behaviors,

00:04:07.516 --> 00:04:09.276 A:middle
which means that you
can use this class

00:04:10.136 --> 00:04:13.096 A:middle
to construct your own
high-level behaviors.

00:04:13.606 --> 00:04:20.255 A:middle
What's interesting here, if
you attach behavior directly

00:04:20.255 --> 00:04:26.126 A:middle
to the animator, or if you add
a child behavior to a behavior

00:04:26.646 --> 00:04:28.846 A:middle
and add this behavior
to the animator,

00:04:29.716 --> 00:04:30.666 A:middle
there is no difference.

00:04:31.116 --> 00:04:37.256 A:middle
There is no CPU cost or
any runtime difference

00:04:37.256 --> 00:04:38.486 A:middle
between these two approaches.

00:04:38.746 --> 00:04:42.176 A:middle
So there is no cost for
building your abstractions.

00:04:42.676 --> 00:04:46.586 A:middle
[ Pause ]

00:04:47.086 --> 00:04:49.886 A:middle
You can compose your
behaviors statically

00:04:50.206 --> 00:04:54.306 A:middle
like by defining your own
class, adding child behaviors

00:04:54.486 --> 00:04:59.706 A:middle
and then never changing these
behaviors again or dynamically

00:04:59.706 --> 00:05:02.066 A:middle
by adding and removing children

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:02.506 --> 00:05:04.826 A:middle
for a behavior or
from the animator.

00:05:05.716 --> 00:05:09.816 A:middle
So let's see a quick
example of that.

00:05:09.966 --> 00:05:11.826 A:middle
Let's say that I want to drag

00:05:12.806 --> 00:05:19.516 A:middle
with this real-world effect a
view and when my gesture ends,

00:05:20.706 --> 00:05:21.906 A:middle
I want to apply gravity

00:05:21.906 --> 00:05:24.816 A:middle
to get this bouncy
effect I love so much.

00:05:25.446 --> 00:05:28.866 A:middle
The initial setup was just
with a collision behavior

00:05:29.146 --> 00:05:32.406 A:middle
and that view added
to this behavior.

00:05:32.756 --> 00:05:38.236 A:middle
But when my gesture actually
begins, what I want to do is

00:05:38.236 --> 00:05:41.436 A:middle
to create a new behavior,
an attachment behavior,

00:05:42.076 --> 00:05:45.846 A:middle
add that to the animator.

00:05:46.366 --> 00:05:50.456 A:middle
And when I update-- when
my gesture is updated,

00:05:50.456 --> 00:05:56.356 A:middle
I just need to change
that attachment point

00:05:56.626 --> 00:06:00.196 A:middle
in my UIAttachmentBehavior
and it's going

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:00.196 --> 00:06:02.526 A:middle
to drag the view
as I would expect.

00:06:03.706 --> 00:06:10.026 A:middle
When I end this gesture,
what I just need to do is

00:06:10.026 --> 00:06:11.546 A:middle
to remove the attachment
behavior

00:06:12.346 --> 00:06:16.956 A:middle
and at the same time add the
same view to a gravity behavior.

00:06:18.036 --> 00:06:20.496 A:middle
A collision behavior is
still here, so we are going

00:06:20.496 --> 00:06:23.566 A:middle
to add this fall
and bounce effect.

00:06:24.266 --> 00:06:30.876 A:middle
That's a really interesting
concept and you can build a lot

00:06:30.876 --> 00:06:35.146 A:middle
of completely different
effects by combining behaviors.

00:06:36.136 --> 00:06:40.166 A:middle
For instance, that example I
was using in the first session,

00:06:40.686 --> 00:06:44.296 A:middle
a bounce effect is just gravity
and collision at the same time.

00:06:45.266 --> 00:06:47.566 A:middle
If I want to drag a
view and then at the end

00:06:47.566 --> 00:06:50.436 A:middle
of the gesture snap it
somewhere else in the screen,

00:06:51.306 --> 00:06:55.566 A:middle
I can use an attachment behavior
first and then a snap behavior.

00:06:55.566 --> 00:07:01.396 A:middle
Something like the Lock
Screen in iOS 7 can be built

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:01.396 --> 00:07:05.126 A:middle
as a combination of
collision, gravity,

00:07:05.506 --> 00:07:08.186 A:middle
attachment, and push behavior.

00:07:08.986 --> 00:07:10.986 A:middle
But you can imagine
many other things

00:07:12.256 --> 00:07:16.546 A:middle
like a magnet-like behavior
that you could build

00:07:16.546 --> 00:07:20.186 A:middle
from multiple UIPushBehaviors.

00:07:21.866 --> 00:07:24.886 A:middle
So I'd like to show
you a very quick demo

00:07:26.506 --> 00:07:32.276 A:middle
of the different feel
you can get by changing,

00:07:32.936 --> 00:07:34.806 A:middle
removing, and adding behaviors.

00:07:39.636 --> 00:07:47.686 A:middle
So a very interesting thing here
is the top right animator label

00:07:48.476 --> 00:07:51.146 A:middle
is turning green when
the animator is active.

00:07:51.606 --> 00:07:55.286 A:middle
I basically just implemented
this UIDynamicAnimatorDelegate

00:07:55.286 --> 00:07:58.466 A:middle
so we will know when the
animator actually stops

00:07:58.986 --> 00:07:59.766 A:middle
and starts again.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:01.286 --> 00:08:03.936 A:middle
So I can just drag that view,

00:08:04.546 --> 00:08:06.846 A:middle
there is no other
behaviors, just collisions.

00:08:07.626 --> 00:08:09.716 A:middle
So let's add gravity.

00:08:10.816 --> 00:08:16.676 A:middle
So now, when I actually move
this view, the effect is,

00:08:16.676 --> 00:08:18.776 A:middle
of course, completely different.

00:08:19.706 --> 00:08:23.756 A:middle
It's moving a little
bit too much,

00:08:23.756 --> 00:08:25.906 A:middle
motion sickness is not
something that I would

00:08:25.906 --> 00:08:27.406 A:middle
like to have in this demo.

00:08:27.996 --> 00:08:32.206 A:middle
So we're going to add
a UIDynamicItemBehavior

00:08:32.206 --> 00:08:36.246 A:middle
which is a way to set up
some low-level properties.

00:08:36.576 --> 00:08:40.645 A:middle
I'm going to set up
resistance which a way

00:08:40.645 --> 00:08:43.696 A:middle
to apply damping on velocity.

00:08:43.696 --> 00:08:46.296 A:middle
So the feel is completely
different.

00:08:47.346 --> 00:08:52.046 A:middle
I could add a force
behavior going to the right,

00:08:52.436 --> 00:08:56.906 A:middle
an immediate instantaneous
impulse behavior

00:08:59.346 --> 00:09:02.176 A:middle
and keep my attachment behavior.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:02.176 --> 00:09:04.826 A:middle
So I see that this force on the
view that's trying to move it

00:09:04.826 --> 00:09:07.106 A:middle
to the right, so
let's stop that.

00:09:09.576 --> 00:09:14.356 A:middle
And the other thing is I
could also change those

00:09:14.356 --> 00:09:18.946 A:middle
that are low-level property on
this view like the elasticity

00:09:19.846 --> 00:09:21.806 A:middle
which is the restitution
on collision.

00:09:22.596 --> 00:09:26.476 A:middle
So we have a view which
is obviously really happy

00:09:28.336 --> 00:09:28.846 A:middle
[laughter] to be here.

00:09:29.496 --> 00:09:32.246 A:middle
So let's just turn
off collisions

00:09:32.526 --> 00:09:43.376 A:middle
and that's the end of this demo.

00:09:43.376 --> 00:09:43.443 A:middle
[ Applause ]

00:09:43.443 --> 00:09:48.166 A:middle
And each action was just
really add or remove behavior.

00:09:48.356 --> 00:09:49.696 A:middle
So what do that means?

00:09:50.866 --> 00:09:54.666 A:middle
It means that the
effect you want is really

00:09:54.666 --> 00:09:56.646 A:middle
about building a behavior tree.

00:09:57.956 --> 00:10:03.296 A:middle
And the behavior tree can be
using predefined behaviors

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:03.296 --> 00:10:04.886 A:middle
like a collision behavior.

00:10:05.366 --> 00:10:09.136 A:middle
But maybe your own behavior
is like a magnet-like behavior

00:10:09.136 --> 00:10:13.786 A:middle
or a drag behavior which
are going to be built on top

00:10:14.646 --> 00:10:16.396 A:middle
of these predefined behaviors.

00:10:16.876 --> 00:10:21.856 A:middle
And then you need to associate
items to these behaviors,

00:10:22.666 --> 00:10:24.416 A:middle
and that is something
that you can do

00:10:24.416 --> 00:10:27.716 A:middle
at your high-level
behavior API level.

00:10:28.336 --> 00:10:33.536 A:middle
You could directly add the same
items to predefined behaviors

00:10:33.846 --> 00:10:39.676 A:middle
or only add just one to
something just for a while

00:10:40.516 --> 00:10:41.916 A:middle
when I want to drag this item.

00:10:44.266 --> 00:10:45.726 A:middle
How do you build
your own behavior?

00:10:47.676 --> 00:10:50.136 A:middle
You just have to subclass
UIDynamicBehavior.

00:10:53.466 --> 00:10:56.736 A:middle
And let's say I want
to implement, again,

00:10:57.236 --> 00:10:58.916 A:middle
this BouncyFallBehavior.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.056 --> 00:11:03.036 A:middle
I'm going to define
initWithItem initializer.

00:11:03.036 --> 00:11:05.906 A:middle
How do I implement that?

00:11:06.556 --> 00:11:08.706 A:middle
The first thing I need is

00:11:08.706 --> 00:11:13.006 A:middle
to actually create
the sub-behaviors

00:11:13.746 --> 00:11:15.236 A:middle
for my high-level behavior,

00:11:15.236 --> 00:11:17.066 A:middle
so I need gravity
and collisions here.

00:11:17.826 --> 00:11:22.886 A:middle
If needed, I will configure
this collision behavior.

00:11:23.456 --> 00:11:30.396 A:middle
And the last thing is adding
these two behaviors I just

00:11:30.396 --> 00:11:33.596 A:middle
created as children to myself.

00:11:35.536 --> 00:11:37.046 A:middle
And that's it.

00:11:38.196 --> 00:11:42.576 A:middle
When I need to use my high-level
behavior, I am just going

00:11:42.576 --> 00:11:46.636 A:middle
to actually add alloc
init that new behavior

00:11:47.206 --> 00:11:49.486 A:middle
and add it to my animator.

00:11:49.986 --> 00:11:53.826 A:middle
[ Pause ]

00:11:54.326 --> 00:11:56.426 A:middle
So something which is useful

00:11:56.426 --> 00:11:58.546 A:middle
when you're building
your own behavior is

00:11:59.146 --> 00:12:00.826 A:middle
to think in terms of API.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:02.306 --> 00:12:04.486 A:middle
What is the API you
want to define

00:12:05.316 --> 00:12:08.536 A:middle
on such an interaction behavior?

00:12:09.116 --> 00:12:11.886 A:middle
It could be something really
simple like initWithItems,

00:12:12.376 --> 00:12:13.956 A:middle
like what we did
just a minute ago,

00:12:14.466 --> 00:12:17.116 A:middle
and we'll see another
example in this session

00:12:17.606 --> 00:12:21.296 A:middle
when you can actually
define a more complex API.

00:12:21.826 --> 00:12:25.446 A:middle
It's useful to think about
how that is going to integrate

00:12:25.446 --> 00:12:27.656 A:middle
with your existing
application flow,

00:12:28.286 --> 00:12:31.286 A:middle
like if you already
have a gesture,

00:12:31.536 --> 00:12:32.456 A:middle
it's always a good thing

00:12:32.456 --> 00:12:35.006 A:middle
to match the ending
gesture velocity

00:12:35.006 --> 00:12:37.686 A:middle
with the system you're
creating in dynamics.

00:12:38.686 --> 00:12:43.226 A:middle
And if you need that,
it's not always the case,

00:12:43.226 --> 00:12:47.066 A:middle
but if you need that, you
can define per step actions.

00:12:47.496 --> 00:12:52.726 A:middle
It's just a block, you can
define on UIDynamicBehavior

00:12:53.526 --> 00:12:59.306 A:middle
and we're going to invoke that
block with each simulation step.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.186 --> 00:13:02.776 A:middle
So that's interesting when
you want to, for instance,

00:13:03.176 --> 00:13:08.136 A:middle
change the force based
on an item position,

00:13:08.906 --> 00:13:10.636 A:middle
to implement magnets
for instance.

00:13:11.266 --> 00:13:13.156 A:middle
Of course, because
we are running

00:13:13.156 --> 00:13:17.226 A:middle
that with each simulation
pick, you have to be careful

00:13:17.256 --> 00:13:20.806 A:middle
about what we do-- what
you do in this block.

00:13:22.376 --> 00:13:27.976 A:middle
There is one catch about
combining behaviors,

00:13:29.056 --> 00:13:33.476 A:middle
it's this UIDynamicItemBehavior
class you can use

00:13:33.526 --> 00:13:36.936 A:middle
to setup properties
to your items.

00:13:37.406 --> 00:13:42.126 A:middle
With UIDynamicItemBehavior, you
can change density, damping,

00:13:42.126 --> 00:13:46.096 A:middle
you can block rotation, you can
change friction or elasticity,

00:13:46.096 --> 00:13:49.206 A:middle
and I was using that
in my previous demo.

00:13:49.876 --> 00:13:52.466 A:middle
And there is no problem

00:13:52.466 --> 00:13:57.046 A:middle
about combining many
UIDynamicItemBehavior,

00:13:57.636 --> 00:13:59.116 A:middle
especially if you are using--

00:13:59.556 --> 00:14:02.986 A:middle
if you're configuring
distinct properties in each,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:03.196 --> 00:14:05.766 A:middle
because that's not going
to conflict, right?

00:14:06.656 --> 00:14:10.546 A:middle
If you do want to
change the same property

00:14:11.446 --> 00:14:13.516 A:middle
in different
UIDynamicItemBehavior,

00:14:14.456 --> 00:14:15.396 A:middle
that's still possible,

00:14:16.606 --> 00:14:19.376 A:middle
but we have to decide
which one we pick.

00:14:20.366 --> 00:14:21.666 A:middle
And the last one wins.

00:14:23.336 --> 00:14:25.526 A:middle
We actually have quite
a precise definition

00:14:25.526 --> 00:14:27.346 A:middle
of what the last one is.

00:14:29.066 --> 00:14:32.276 A:middle
It's a pre-order depth first
walk of the behavior tree.

00:14:33.196 --> 00:14:39.626 A:middle
Get it? Let's check that
rule on an example, right?

00:14:40.446 --> 00:14:42.326 A:middle
So here is my behavior tree.

00:14:43.946 --> 00:14:47.186 A:middle
I have a few behaviors
I don't care about

00:14:47.596 --> 00:14:51.716 A:middle
and three UIDynamicItemBehaviors
configuring elasticity

00:14:52.196 --> 00:14:58.126 A:middle
and friction, but the question
is what are the actual venues

00:14:59.836 --> 00:15:01.586 A:middle
in my dynamic item?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:02.936 --> 00:15:05.926 A:middle
So let's walk the behavior tree.

00:15:07.076 --> 00:15:08.616 A:middle
We start with default.

00:15:10.106 --> 00:15:12.926 A:middle
So first behavior is not
a dynamic item behavior,

00:15:13.456 --> 00:15:14.136 A:middle
so we don't care.

00:15:15.466 --> 00:15:17.006 A:middle
That one, we don't care.

00:15:18.166 --> 00:15:19.036 A:middle
That one is interesting,

00:15:19.036 --> 00:15:22.466 A:middle
that's the first
UIDynamicItemBehavior we have

00:15:22.676 --> 00:15:24.226 A:middle
in this tree walk.

00:15:24.616 --> 00:15:26.986 A:middle
Elasticity is 0.5.

00:15:27.476 --> 00:15:31.466 A:middle
That is new-- the new elasticity
value for that dynamic item.

00:15:33.436 --> 00:15:36.576 A:middle
Next behavior, we continue.

00:15:37.146 --> 00:15:40.926 A:middle
That's another dynamic item
behavior, defining friction,

00:15:40.926 --> 00:15:43.016 A:middle
so that's not the same
property so that's OK.

00:15:43.726 --> 00:15:46.256 A:middle
We just set the friction
to be 0.2.

00:15:47.436 --> 00:15:52.666 A:middle
And then, the last dynamic item
behavior we have is setting

00:15:52.666 --> 00:15:54.826 A:middle
elasticity to 0.3.

00:15:55.176 --> 00:15:57.126 A:middle
That is the end value.

00:15:58.866 --> 00:16:03.206 A:middle
Then now, let's actually
remove this one.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:03.816 --> 00:16:08.106 A:middle
In this case, we
are basically going

00:16:08.106 --> 00:16:13.956 A:middle
to reevaluate the behavior tree
and friction is back to default.

00:16:15.286 --> 00:16:20.696 A:middle
Let's add at the exact same
place a UIDynamicItemBehavior

00:16:21.426 --> 00:16:23.526 A:middle
changing again the
same property.

00:16:24.526 --> 00:16:29.006 A:middle
The new value is
actually still 0.3.

00:16:29.696 --> 00:16:34.246 A:middle
So that's the last, it's the
most recent behavior I added,

00:16:34.906 --> 00:16:37.796 A:middle
but that's not the last
in this behavior tree

00:16:38.066 --> 00:16:39.346 A:middle
with my definition.

00:16:40.056 --> 00:16:45.746 A:middle
So that is how you can combine
behaviors in a very define way.

00:16:46.286 --> 00:16:59.486 A:middle
Dynamic Items, so that's a
protocol and that's a way

00:16:59.486 --> 00:17:03.606 A:middle
to integrate in Dynamics things
that are not necessary views

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:03.916 --> 00:17:05.715 A:middle
or collection view
layout attributes.

00:17:07.925 --> 00:17:11.546 A:middle
It basically defines
what we need in UIKit

00:17:12.276 --> 00:17:18.556 A:middle
to animate something, so
that's a position, a size,

00:17:19.705 --> 00:17:23.796 A:middle
and a rotation, knowing
that UIView

00:17:23.796 --> 00:17:28.876 A:middle
on UICollectionView obviously
implement already something

00:17:28.876 --> 00:17:29.506 A:middle
like that.

00:17:30.046 --> 00:17:34.706 A:middle
And we only care
about 2D rotation.

00:17:35.356 --> 00:17:38.146 A:middle
The engine we run
is a 2D engine.

00:17:40.496 --> 00:17:46.296 A:middle
So when you are defining
your own UIDynamicItem,

00:17:47.416 --> 00:17:51.616 A:middle
the first time this item
is added to a behavior,

00:17:52.346 --> 00:17:54.876 A:middle
and that behavior is
added to the animator,

00:17:55.846 --> 00:17:58.396 A:middle
we would get these
values, because we need

00:17:58.396 --> 00:18:01.936 A:middle
to inject an initial
state in the engine.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:02.446 --> 00:18:06.296 A:middle
Then we're going to
run the simulation

00:18:06.296 --> 00:18:08.616 A:middle
and each simulation tick,

00:18:08.616 --> 00:18:13.956 A:middle
we're going to write
position and rotation.

00:18:15.046 --> 00:18:18.906 A:middle
We don't change the size
of the dynamic item.

00:18:21.036 --> 00:18:23.496 A:middle
If you're implementing
that protocol, of course,

00:18:24.656 --> 00:18:31.206 A:middle
we might write position and
angle on each simulation tick.

00:18:31.586 --> 00:18:37.036 A:middle
So, again, that is two methods
where you should be careful

00:18:37.036 --> 00:18:39.476 A:middle
about your performance.

00:18:45.126 --> 00:18:49.036 A:middle
One consequence of
that is we won't care

00:18:49.036 --> 00:18:52.556 A:middle
about any external
change to this value

00:18:53.466 --> 00:18:55.966 A:middle
after we basically
grab the initial state.

00:18:57.586 --> 00:19:02.816 A:middle
So one interesting question
is how do you change the size

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:03.286 --> 00:19:04.216 A:middle
of something after the effect?

00:19:05.296 --> 00:19:09.736 A:middle
We don't change views,
items, bodies in the engine,

00:19:09.736 --> 00:19:13.186 A:middle
so you have two ways to
change the size of an item,

00:19:13.276 --> 00:19:19.196 A:middle
remove it from dynamics,
and add it again later

00:19:19.196 --> 00:19:21.376 A:middle
if you want, or cheat.

00:19:23.176 --> 00:19:27.056 A:middle
For instance, if what you're
animating is a view of something

00:19:27.056 --> 00:19:31.066 A:middle
on the screen, you can define a
subview, apply a scale transform

00:19:31.066 --> 00:19:36.526 A:middle
or change the size of the
subview or something like that.

00:19:38.186 --> 00:19:41.366 A:middle
Again, we need an initial state,

00:19:41.876 --> 00:19:44.996 A:middle
we need to correct the initial
state, so we need a size

00:19:46.376 --> 00:19:48.036 A:middle
and we need reasonable position.

00:19:48.426 --> 00:19:51.626 A:middle
As I said, MAXFLOAT is
not a reasonable position.

00:19:54.016 --> 00:19:55.176 A:middle
What can you do with that?

00:19:55.666 --> 00:20:00.006 A:middle
One interesting use case for
dynamic items is to sanitize

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.006 --> 00:20:03.076 A:middle
or change the value we sent.

00:20:05.076 --> 00:20:06.886 A:middle
You can use a single
dynamic item

00:20:07.056 --> 00:20:11.036 A:middle
to actually animate the same
way many different things.

00:20:11.576 --> 00:20:16.826 A:middle
You can map position
or rotation,

00:20:16.826 --> 00:20:20.616 A:middle
which are the only two values
we compute to something else,

00:20:20.936 --> 00:20:25.586 A:middle
like mapping to scale
transform or instead

00:20:25.586 --> 00:20:30.326 A:middle
of animating a rotation,
animating a 3D effect.

00:20:31.646 --> 00:20:37.556 A:middle
So if you need to animate
something which is not a view

00:20:38.356 --> 00:20:40.126 A:middle
or a collection view
layout attribute,

00:20:40.866 --> 00:20:44.836 A:middle
do not define a view
hierarchy on the side just

00:20:44.836 --> 00:20:46.266 A:middle
to be able to use dynamics.

00:20:47.056 --> 00:20:48.526 A:middle
Use a dynamic item.

00:20:50.656 --> 00:20:55.246 A:middle
So let me introduce a really
stupid example of dynamic item

00:20:56.146 --> 00:20:58.456 A:middle
which doesn't display
anything on screen, well,

00:20:59.216 --> 00:21:01.116 A:middle
depends on what you
call screen actually.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:03.596 --> 00:21:05.416 A:middle
You could just log
what we compute.

00:21:06.156 --> 00:21:07.586 A:middle
You could keep everything
in a dictionary.

00:21:07.586 --> 00:21:10.056 A:middle
You can do whatever
you want with that.

00:21:12.806 --> 00:21:15.996 A:middle
Let's talk about
collection view.

00:21:16.556 --> 00:21:21.356 A:middle
In collection view,
you can use Dynamics

00:21:21.356 --> 00:21:23.706 A:middle
in three different ways.

00:21:24.746 --> 00:21:27.956 A:middle
You can decide to use Dynamics
for very specific animations

00:21:28.496 --> 00:21:30.836 A:middle
like when you're
selecting a cell

00:21:31.536 --> 00:21:33.986 A:middle
and you want a very
specific effect

00:21:34.376 --> 00:21:35.796 A:middle
for that selection for instance.

00:21:36.196 --> 00:21:41.216 A:middle
In that case, you just need
to create a dynamic animator

00:21:41.896 --> 00:21:47.566 A:middle
as this animation or interaction
and just remove it after that.

00:21:48.946 --> 00:21:53.676 A:middle
The other thing you can do is
to animate a subset of a layout

00:21:54.036 --> 00:21:57.056 A:middle
like you have a few cells,
you want to drag these cells

00:21:57.856 --> 00:21:58.886 A:middle
and after that, you're done.

00:21:59.896 --> 00:22:03.126 A:middle
So you can combine animated
and non-animated cells.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:04.256 --> 00:22:10.746 A:middle
You can build an entire layout
with Dynamics that works for,

00:22:12.006 --> 00:22:14.566 A:middle
well, non-huge data source.

00:22:15.906 --> 00:22:18.806 A:middle
Problem is, in dynamics,
what is off screen

00:22:19.296 --> 00:22:22.116 A:middle
in the system might
impact what is on screen.

00:22:22.446 --> 00:22:25.526 A:middle
So even if you just
generate cells on screen

00:22:25.526 --> 00:22:28.066 A:middle
for what is visible,
you might need

00:22:28.116 --> 00:22:32.026 A:middle
to simulate the entire system.

00:22:32.321 --> 00:22:34.321 A:middle
[ Pause ]

00:22:34.616 --> 00:22:38.156 A:middle
Again, you need to provide some
initial state for your items

00:22:38.966 --> 00:22:43.766 A:middle
and you have many ways to
do that, you can compute

00:22:43.996 --> 00:22:46.896 A:middle
that initial state,
create layout attributes

00:22:46.896 --> 00:22:50.156 A:middle
for that state, and
feed that to dynamics.

00:22:51.056 --> 00:22:53.306 A:middle
You can subclass
an existing layout.

00:22:53.396 --> 00:22:55.816 A:middle
And in the ScrollView
session this morning,

00:22:56.126 --> 00:22:59.736 A:middle
Josh and Eliza showed you how
to actually build a Messages

00:22:59.736 --> 00:23:02.746 A:middle
like effect with that technique.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:04.256 --> 00:23:11.196 A:middle
Or you can create and
add new items on the fly.

00:23:11.306 --> 00:23:13.906 A:middle
The key here is to
create the animator

00:23:13.906 --> 00:23:18.576 A:middle
with your collection layout
instance, add behaviors

00:23:18.986 --> 00:23:22.806 A:middle
and add collection view layout
attributes to these behaviors.

00:23:23.486 --> 00:23:25.966 A:middle
We are then going
to change position

00:23:25.966 --> 00:23:27.716 A:middle
and rotation on these instances.

00:23:28.256 --> 00:23:34.026 A:middle
We have some predefined,
some convenient support

00:23:34.026 --> 00:23:36.736 A:middle
for dynamics-- for
collection view in dynamics.

00:23:39.276 --> 00:23:43.546 A:middle
We take care of invalidating
the layout if anything changed

00:23:43.546 --> 00:23:48.206 A:middle
in the system and we also
pause and resume the animator

00:23:48.206 --> 00:23:51.376 A:middle
if your layout is no
longer the current layout

00:23:51.376 --> 00:23:53.366 A:middle
for the collection view
because in collection view,

00:23:53.366 --> 00:23:54.496 A:middle
you can switch layouts.

00:23:54.966 --> 00:23:59.536 A:middle
We also provide convenience
method

00:23:59.536 --> 00:24:05.006 A:middle
for implementing your layout so
you can ask the animator itself

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:05.496 --> 00:24:08.296 A:middle
for layout attribute
for cell at index path

00:24:09.206 --> 00:24:13.036 A:middle
for supplementary views
and for decoration view.

00:24:13.516 --> 00:24:17.306 A:middle
So we know that's a
layout so we help you

00:24:17.306 --> 00:24:19.926 A:middle
in implementing this
method in your layout.

00:24:20.006 --> 00:24:21.276 A:middle
You can ask the animator.

00:24:22.146 --> 00:24:28.396 A:middle
We have, for layout updates, the
usual collection view methods,

00:24:29.056 --> 00:24:34.286 A:middle
so prepareLayout is usually when
you can instantiate an animator

00:24:34.966 --> 00:24:39.756 A:middle
or create your initial
state and prepare for update

00:24:39.756 --> 00:24:41.146 A:middle
which is another layout method,

00:24:41.146 --> 00:24:45.406 A:middle
you can add new items
to your behaviors.

00:24:46.766 --> 00:24:49.476 A:middle
And there is this very important
method in collection view

00:24:49.976 --> 00:24:54.006 A:middle
which is layoutAttributesInRect
which possibly basically defines

00:24:54.006 --> 00:24:55.846 A:middle
where the cells are going to be.

00:24:56.416 --> 00:24:57.696 A:middle
And to implement this method,

00:24:58.446 --> 00:25:02.226 A:middle
we have itemsInRect
in the animator.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:02.936 --> 00:25:03.736 A:middle
So that's really easy.

00:25:03.736 --> 00:25:05.056 A:middle
You can ask the animator,

00:25:05.236 --> 00:25:09.406 A:middle
"Give me all the items you're
tracking in this rect."

00:25:11.236 --> 00:25:16.896 A:middle
Then you can combine these
items with maybe attributes

00:25:16.936 --> 00:25:18.576 A:middle
which are not animated.

00:25:19.136 --> 00:25:27.406 A:middle
Again, the way you design your
system will have a direct impact

00:25:27.406 --> 00:25:32.346 A:middle
on the number of
cells you can animate.

00:25:33.486 --> 00:25:37.156 A:middle
I would like to show
you an example

00:25:37.156 --> 00:25:44.016 A:middle
of collection view using
dynamic for a specific effect.

00:25:44.156 --> 00:25:45.256 A:middle
That's actually an example

00:25:45.326 --> 00:25:47.556 A:middle
from the collection
view sessions last year

00:25:48.096 --> 00:25:50.966 A:middle
when I was dragging
a cell in a layout.

00:25:50.966 --> 00:25:54.756 A:middle
So we are going to do
that the Dynamics way.

00:25:56.016 --> 00:25:57.426 A:middle
So I select a few cells.

00:25:58.546 --> 00:26:05.826 A:middle
So the effect is maybe
a little bit too much

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:06.506 --> 00:26:08.526 A:middle
but you get the idea.

00:26:08.906 --> 00:26:11.916 A:middle
So we have these cells
connected to springs

00:26:12.286 --> 00:26:13.556 A:middle
and reacting to the gesture.

00:26:15.416 --> 00:26:21.246 A:middle
And when I end my gesture,
I just clear the animator.

00:26:21.246 --> 00:26:22.746 A:middle
[ Applause ]

00:26:22.746 --> 00:26:29.316 A:middle
How complex is that?

00:26:30.306 --> 00:26:31.136 A:middle
Quite simple.

00:26:31.546 --> 00:26:33.296 A:middle
You just need to
decompose this program.

00:26:34.036 --> 00:26:36.096 A:middle
Why do I need to animate that?

00:26:37.696 --> 00:26:39.406 A:middle
The way I did it, perhaps,

00:26:40.166 --> 00:26:41.966 A:middle
there are many solutions
to this problem.

00:26:42.756 --> 00:26:47.826 A:middle
I started with a base behavior,
a single cell that I want

00:26:47.826 --> 00:26:49.766 A:middle
to drag around with
a spring effect,

00:26:53.166 --> 00:26:57.886 A:middle
and the way I defined my
behavior is four springs

00:26:58.616 --> 00:27:03.156 A:middle
attached to a plane or
rectangle and attached

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:03.386 --> 00:27:04.406 A:middle
to the center of this view.

00:27:05.216 --> 00:27:08.506 A:middle
So I'm going to move these four
points to get the spring effect.

00:27:11.166 --> 00:27:14.696 A:middle
Then I need to be able to
drag many items, right?

00:27:15.426 --> 00:27:20.126 A:middle
So I'm going to define my
high-level drag behavior

00:27:21.126 --> 00:27:25.286 A:middle
and I'm going to do the exact
same trick for all cells.

00:27:26.096 --> 00:27:30.486 A:middle
Then I need a layout
and I'm going

00:27:30.486 --> 00:27:35.786 A:middle
to define a flow layout
subclass because the basic mode

00:27:35.896 --> 00:27:37.796 A:middle
of my layout is just
to display a grid.

00:27:37.796 --> 00:27:41.746 A:middle
It only changes when
I interact with it.

00:27:42.916 --> 00:27:48.516 A:middle
So I need three classes,
a DraggableLayout

00:27:48.576 --> 00:27:50.866 A:middle
which is a
UIColelctionViewFlowLayout.

00:27:51.006 --> 00:27:55.766 A:middle
I'm going to define a
simple API on this layout

00:27:56.146 --> 00:27:59.336 A:middle
so I can easily connect that
to a gesture recognizer,

00:27:59.456 --> 00:28:03.486 A:middle
I can start the interaction
with an array

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:03.486 --> 00:28:04.966 A:middle
of index paths from a point.

00:28:05.376 --> 00:28:09.786 A:middle
I can update that location and
I can stop the interaction.

00:28:10.376 --> 00:28:16.096 A:middle
My high-level behavior is going
to be quite similar for the API.

00:28:16.096 --> 00:28:19.396 A:middle
I'm going to create a
drag behavior with a set

00:28:19.396 --> 00:28:24.246 A:middle
of dynamic items--
and from a point,

00:28:24.296 --> 00:28:27.396 A:middle
and a way to change
that location.

00:28:28.146 --> 00:28:32.046 A:middle
And my low-level behavior
is going to be defined

00:28:32.046 --> 00:28:36.506 A:middle
with just one item I want to
animate, a point and a way

00:28:36.506 --> 00:28:40.256 A:middle
to update the location
of this cell.

00:28:40.436 --> 00:28:42.306 A:middle
So let's see how I
implemented that.

00:28:42.306 --> 00:28:45.276 A:middle
Let's start with a
low-level behavior.

00:28:45.736 --> 00:28:49.456 A:middle
RectangleAttachmentBehavior,
I configured that as an item

00:28:50.326 --> 00:28:54.266 A:middle
at a given point and
then it's just a matter

00:28:54.266 --> 00:28:57.426 A:middle
of creating four
attachment behavior,

00:28:57.826 --> 00:28:58.876 A:middle
so I have this four points,

00:28:58.936 --> 00:29:02.386 A:middle
I just create a spring
AttachmentBehavior

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:02.626 --> 00:29:07.036 A:middle
for each point and I add
these as children behaviors.

00:29:07.346 --> 00:29:13.126 A:middle
When I want to update
the location,

00:29:14.066 --> 00:29:16.486 A:middle
I just need to compute
again these four points

00:29:17.046 --> 00:29:18.866 A:middle
and update the attachment point

00:29:18.866 --> 00:29:22.556 A:middle
for my four attachment
behaviors.

00:29:23.146 --> 00:29:29.106 A:middle
So that's my first low-level
behavior using four predefined

00:29:29.266 --> 00:29:30.566 A:middle
attachment behaviors.

00:29:31.096 --> 00:29:33.046 A:middle
The high-level behavior,

00:29:33.396 --> 00:29:38.316 A:middle
drag behavior is actually very
simple, it's all in this slide.

00:29:39.726 --> 00:29:40.396 A:middle
So what do I need?

00:29:40.756 --> 00:29:45.026 A:middle
I need to pass the dynamic items
I want to animate, that point.

00:29:45.416 --> 00:29:50.026 A:middle
I'm going to create attachments,
my low-level attachments,

00:29:50.296 --> 00:29:51.606 A:middle
RectangleAttachmentBehavior.

00:29:52.956 --> 00:29:59.906 A:middle
I add this as child behaviors
and to update the drag location,

00:29:59.966 --> 00:30:02.386 A:middle
I'm just going to basically
tell my low-level behavior

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:02.916 --> 00:30:04.356 A:middle
to update to this point.

00:30:04.356 --> 00:30:07.966 A:middle
So that's it for my
high-level behavior.

00:30:09.586 --> 00:30:10.466 A:middle
No more layouts.

00:30:11.756 --> 00:30:15.136 A:middle
The interaction code is
quite simple actually.

00:30:15.766 --> 00:30:18.186 A:middle
I need to track these
index paths.

00:30:18.686 --> 00:30:20.096 A:middle
I want to create an animator.

00:30:21.646 --> 00:30:24.306 A:middle
Then for each of
these attributes,

00:30:24.366 --> 00:30:26.566 A:middle
I'm going to need
that initial state.

00:30:26.566 --> 00:30:31.986 A:middle
So I'm going to ask flow layout
which is the super class.

00:30:32.166 --> 00:30:34.166 A:middle
I changed zIndex because
I'm dragging this.

00:30:34.166 --> 00:30:35.686 A:middle
I want this cell on top

00:30:36.776 --> 00:30:39.426 A:middle
and I create my high-level
drag behavior.

00:30:40.916 --> 00:30:44.686 A:middle
I add this behavior
to the animator.

00:30:44.686 --> 00:30:46.106 A:middle
Updating the location

00:30:46.156 --> 00:30:48.676 A:middle
and removing everything
is extremely simple.

00:30:49.516 --> 00:30:53.206 A:middle
We just update the point
or clear the animator.

00:30:55.996 --> 00:31:01.116 A:middle
The layout implementation
itself, "Why do I need to define

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:01.116 --> 00:31:04.736 A:middle
which cells are in this
layout for a given rect?"

00:31:06.106 --> 00:31:07.896 A:middle
Some cells might
not be animated.

00:31:08.446 --> 00:31:13.206 A:middle
So I start by asking the super
class, "Give me all the cells."

00:31:15.156 --> 00:31:21.406 A:middle
Next, I want to remove the
cells I'm actually animating.

00:31:23.906 --> 00:31:29.166 A:middle
And then, I need to add the
cells I'm actually tracking,

00:31:29.166 --> 00:31:31.056 A:middle
the layout attributes
I'm actually tracking,

00:31:31.906 --> 00:31:32.696 A:middle
from the animator.

00:31:33.946 --> 00:31:38.306 A:middle
So I use this animator
itemsInRect method,

00:31:39.076 --> 00:31:42.346 A:middle
and I just have to return
all these attributes.

00:31:42.696 --> 00:31:46.636 A:middle
And that's it, that's the entire
code for this small example.

00:31:48.496 --> 00:31:54.286 A:middle
Now, for some more exciting
stuff, UIKit Dynamics

00:31:54.286 --> 00:31:55.556 A:middle
and UIViewController Transition,

00:31:55.556 --> 00:32:00.316 A:middle
I'd like to ask Bruce
Nilo to show you that.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:00.316 --> 00:32:02.116 A:middle
[ Applause ]

00:32:02.116 --> 00:32:02.746 A:middle
&gt;&gt; Thank you.

00:32:04.006 --> 00:32:06.566 A:middle
Thank you all.

00:32:09.436 --> 00:32:10.496 A:middle
Thank you, Olivier.

00:32:10.496 --> 00:32:14.196 A:middle
My name is Bruce Nilo,
and this stage is huge,

00:32:14.196 --> 00:32:15.426 A:middle
I've never been on it before.

00:32:16.036 --> 00:32:18.906 A:middle
So I don't know how
many of you have been

00:32:19.016 --> 00:32:20.296 A:middle
at this morning's talk.

00:32:20.296 --> 00:32:21.496 A:middle
I'd like to get a good sense

00:32:21.496 --> 00:32:23.836 A:middle
about custom view
controller transitions.

00:32:25.246 --> 00:32:26.336 A:middle
Oh, a lot of you, OK.

00:32:27.216 --> 00:32:30.266 A:middle
So I'm going to kind of
breeze through a quick review

00:32:30.406 --> 00:32:33.106 A:middle
of what custom view controller
transitions are all about.

00:32:33.106 --> 00:32:35.966 A:middle
And then, what we're going
to talk about is we're going

00:32:35.966 --> 00:32:37.966 A:middle
to kind of build a
little bit on what--

00:32:37.966 --> 00:32:40.436 A:middle
always discussing about
how to create kind

00:32:40.436 --> 00:32:41.766 A:middle
of compound behaviors.

00:32:42.106 --> 00:32:44.356 A:middle
But these compound
behaviors that we're going

00:32:44.356 --> 00:32:45.956 A:middle
to create are going
to conform to some

00:32:45.956 --> 00:32:48.866 A:middle
of these new transitioning
protocols that we've defined,

00:32:49.416 --> 00:32:51.086 A:middle
and are going to be used

00:32:51.086 --> 00:32:53.286 A:middle
to actually implement
some custom view

00:32:53.286 --> 00:32:54.286 A:middle
controller transitions.

00:32:54.286 --> 00:32:55.816 A:middle
And we're going to
walk through a couple

00:32:55.816 --> 00:32:58.126 A:middle
of examples showing
two different types,

00:32:58.836 --> 00:32:59.776 A:middle
and you'll get a sense

00:32:59.776 --> 00:33:02.146 A:middle
of how these different things
compose with one another.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:02.146 --> 00:33:05.996 A:middle
So let's do the quick review.

00:33:06.956 --> 00:33:11.316 A:middle
First of all, the basic idea
is that there's a few delegates

00:33:11.316 --> 00:33:15.896 A:middle
that you create and set on
your view controller directly

00:33:16.036 --> 00:33:19.396 A:middle
if you're doing a present or a
dismiss view controller call,

00:33:19.876 --> 00:33:22.726 A:middle
or you can implement
some new methods

00:33:22.726 --> 00:33:24.276 A:middle
on Navigation Controller
Delegate

00:33:24.276 --> 00:33:25.706 A:middle
or Tab Bar Controller Delegate.

00:33:26.556 --> 00:33:30.416 A:middle
And at the appropriate time
when you are either pushing

00:33:30.416 --> 00:33:33.466 A:middle
or popping or presenting or
dismissing, we're going to ask

00:33:33.566 --> 00:33:36.576 A:middle
that delegate to vend
an animation controller

00:33:37.336 --> 00:33:38.886 A:middle
or an interaction controller.

00:33:40.266 --> 00:33:43.836 A:middle
So the methods that
those objects

00:33:43.836 --> 00:33:47.746 A:middle
that your delegate vends need
to implement are various few.

00:33:48.876 --> 00:33:51.796 A:middle
The main one for the animation
controller is funny enough,

00:33:52.526 --> 00:33:53.476 A:middle
animateTransition.

00:33:53.986 --> 00:33:58.996 A:middle
And for interactive transition,
it's startInteractiveTransition,

00:33:59.416 --> 00:34:00.946 A:middle
kind of pretty simple.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:01.796 --> 00:34:04.366 A:middle
These two methods are passed

00:34:04.436 --> 00:34:08.275 A:middle
in a special object called the
ContextTransitioning object

00:34:08.275 --> 00:34:10.206 A:middle
which defines the
characteristics

00:34:10.206 --> 00:34:11.016 A:middle
of the transition.

00:34:11.656 --> 00:34:15.735 A:middle
It defines where views
start, where they end.

00:34:16.126 --> 00:34:20.126 A:middle
It also is a little bit active
and that we define some methods

00:34:20.126 --> 00:34:22.176 A:middle
that need to be called at
certain points in time.

00:34:22.436 --> 00:34:24.255 A:middle
So basically, the declaration

00:34:24.255 --> 00:34:25.835 A:middle
of the protocol looks
something like this.

00:34:25.835 --> 00:34:26.985 A:middle
There is a container view.

00:34:27.356 --> 00:34:29.815 A:middle
That's the view in
which the tran--

00:34:29.886 --> 00:34:32.696 A:middle
the animation takes
place for the transition.

00:34:33.755 --> 00:34:35.596 A:middle
There are some methods
to query to find

00:34:35.596 --> 00:34:37.496 A:middle
out where I'm supposed
to end up.

00:34:38.406 --> 00:34:42.045 A:middle
And then, there are those action
methods that are on the context.

00:34:42.045 --> 00:34:45.775 A:middle
And for interactive transitions,
there is a few of them.

00:34:45.775 --> 00:34:47.755 A:middle
There is
updateInteractiveTransition

00:34:47.755 --> 00:34:50.786 A:middle
with a present, and then
there's either Finish or Cancel.

00:34:51.906 --> 00:34:56.295 A:middle
And finally, when the transition
is all over, and this is true

00:34:56.295 --> 00:34:59.996 A:middle
for both interactive transitions
as well as just regular,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:00.136 --> 00:35:01.986 A:middle
straight up animated
transitions,

00:35:02.446 --> 00:35:05.476 A:middle
you must call a special method
called completeTransition

00:35:05.816 --> 00:35:07.876 A:middle
indicating whether
canceled or not.

00:35:08.436 --> 00:35:12.976 A:middle
And this basically patches
up any data structures

00:35:12.976 --> 00:35:14.596 A:middle
and puts things into
a consistent state

00:35:14.596 --> 00:35:16.176 A:middle
so your application
can move forward.

00:35:17.406 --> 00:35:19.516 A:middle
It moves as a little bit to talk

00:35:19.516 --> 00:35:21.686 A:middle
about the different
states involved

00:35:21.686 --> 00:35:23.116 A:middle
in an interactive transition.

00:35:23.536 --> 00:35:26.126 A:middle
I've kind of broken it
into a few sections.

00:35:26.126 --> 00:35:28.986 A:middle
The first four kind of
where you go from nothing,

00:35:28.986 --> 00:35:31.806 A:middle
you're in no particular
transition mode

00:35:32.226 --> 00:35:33.986 A:middle
to the interactive mode.

00:35:34.586 --> 00:35:37.756 A:middle
And you might consider this,
if you're doing a pop gesture,

00:35:37.756 --> 00:35:39.926 A:middle
it's as your finger is down

00:35:39.926 --> 00:35:42.506 A:middle
and you're dragging
across the screen.

00:35:43.136 --> 00:35:44.966 A:middle
When you release
that, your finger,

00:35:44.966 --> 00:35:46.316 A:middle
the transition isn't over yet.

00:35:46.706 --> 00:35:48.086 A:middle
It still needs to do something.

00:35:48.086 --> 00:35:49.426 A:middle
It's either going to animate off

00:35:49.426 --> 00:35:51.126 A:middle
or animate back to
where you started.

00:35:51.456 --> 00:35:54.336 A:middle
And the decision of which
direction you're going

00:35:54.336 --> 00:35:56.576 A:middle
in is really up to
you in your code.

00:35:56.976 --> 00:35:59.966 A:middle
And so you can either cancel
the transition or continue it.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:00.726 --> 00:36:03.786 A:middle
And once you do, you then
animate it to completion

00:36:03.956 --> 00:36:05.716 A:middle
and call the completeTransition
method.

00:36:05.836 --> 00:36:09.476 A:middle
So it's really kind of that
simple and if you are interested

00:36:09.476 --> 00:36:13.366 A:middle
in more details, you can look at
the video of this morning's talk

00:36:13.526 --> 00:36:17.906 A:middle
and there are also some
docs available for that.

00:36:18.076 --> 00:36:22.816 A:middle
So, two examples that
we're going to go through.

00:36:23.036 --> 00:36:27.076 A:middle
One is a-- for lack of a better
word, a drop in and out dialog.

00:36:27.156 --> 00:36:30.326 A:middle
It's kind of a dialog which
will-- you will present.

00:36:30.326 --> 00:36:33.336 A:middle
It will be a custom view
controller presentation.

00:36:33.336 --> 00:36:34.966 A:middle
It will drop on screen.

00:36:34.966 --> 00:36:36.386 A:middle
It's not going to
be interactive.

00:36:36.386 --> 00:36:38.066 A:middle
But what is it going
to demonstrate?

00:36:38.066 --> 00:36:39.876 A:middle
It's going to demonstrate
using kind

00:36:39.876 --> 00:36:42.646 A:middle
of a two-stage dynamic
simulation where we're going

00:36:42.646 --> 00:36:45.806 A:middle
to use the action methods
and the DidPause methods

00:36:45.806 --> 00:36:49.326 A:middle
and so forth to change
the Dynamics of the system

00:36:49.326 --> 00:36:51.086 A:middle
as the transition evolves.

00:36:52.356 --> 00:36:56.686 A:middle
The second demo that I'd
like to deconstruct is kind

00:36:56.686 --> 00:36:59.106 A:middle
of just a simple drop shade
transition where I'm going

00:36:59.106 --> 00:37:02.616 A:middle
to pull down from the top
of the screen and I'm going

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:02.616 --> 00:37:04.786 A:middle
to release it and either it's
going to bounce up to the top

00:37:04.786 --> 00:37:06.346 A:middle
or bounce down to the bottom.

00:37:06.876 --> 00:37:10.546 A:middle
And the Dynamics there is
fairly straightforward,

00:37:10.746 --> 00:37:14.446 A:middle
but it's interesting to see
how the interaction mode

00:37:14.446 --> 00:37:18.036 A:middle
of the transition leverages the
dynamic system and vice versa.

00:37:18.936 --> 00:37:21.996 A:middle
So let's talk about the drop
in and drop out dialog a bit.

00:37:23.106 --> 00:37:26.146 A:middle
So, it's a dynamic
behavior that conforms

00:37:26.146 --> 00:37:28.056 A:middle
to the animated transitioning
protocol

00:37:28.556 --> 00:37:30.436 A:middle
and it demonstrates a couple
of interesting things.

00:37:30.436 --> 00:37:33.886 A:middle
It demonstrates the action
block which Olivier referred to.

00:37:33.886 --> 00:37:37.246 A:middle
This is called on every
step of the simulation,

00:37:37.346 --> 00:37:38.516 A:middle
of the physics simulation.

00:37:40.056 --> 00:37:42.616 A:middle
We're going to implement
a collision behavior,

00:37:42.616 --> 00:37:44.896 A:middle
but we're also going to
specify the collision delegate

00:37:45.086 --> 00:37:47.726 A:middle
because we want to know when
we've hit a certain boundary.

00:37:48.816 --> 00:37:51.196 A:middle
And finally, and this
is kind of interesting,

00:37:51.196 --> 00:37:54.506 A:middle
we're going to implement the
dynamic animator delegate.

00:37:55.006 --> 00:37:58.446 A:middle
And in particular, we're
interested in DidPause callback.

00:37:59.006 --> 00:38:01.926 A:middle
And we're also interested in the
dynamic animator's elapsed time.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:02.046 --> 00:38:05.106 A:middle
Now, the reason for this is that
when you're doing a transition,

00:38:05.896 --> 00:38:08.256 A:middle
typically, transitions take
a finite amount of time.

00:38:08.576 --> 00:38:11.226 A:middle
You don't want them to take,
you know, I don't know,

00:38:11.226 --> 00:38:14.226 A:middle
30 seconds to converge and go.

00:38:14.226 --> 00:38:17.706 A:middle
So you might want to put a bound
on it and make sure you're done

00:38:17.706 --> 00:38:20.326 A:middle
in two seconds or one and
a half seconds or whatever.

00:38:20.326 --> 00:38:22.716 A:middle
And so typically, when
you build these systems,

00:38:22.716 --> 00:38:24.906 A:middle
you're kind of iteratively
trying to figure

00:38:24.906 --> 00:38:26.236 A:middle
out how does it look, right?

00:38:26.236 --> 00:38:28.306 A:middle
But you want to actually ensure

00:38:28.306 --> 00:38:30.206 A:middle
that the transition takes
a certain amount of time.

00:38:30.936 --> 00:38:34.606 A:middle
And you can do that by
looking at the elapsed time

00:38:34.606 --> 00:38:37.606 A:middle
of the dynamic animator and
checking in the DidPause

00:38:37.606 --> 00:38:38.476 A:middle
and the action methods.

00:38:38.476 --> 00:38:39.666 A:middle
And we're going to
demonstrate that.

00:38:40.206 --> 00:38:41.776 A:middle
So I'm going to show
a quick demo

00:38:41.906 --> 00:38:43.306 A:middle
of the drop in and out dialog.

00:38:44.036 --> 00:38:47.276 A:middle
So this is kind of a demo that
shows all kinds of transitions,

00:38:47.276 --> 00:38:49.586 A:middle
but I'm going to show
you the drop dialog.

00:38:50.696 --> 00:38:52.786 A:middle
Now, this thing comes
in as little dialog.

00:38:52.786 --> 00:38:54.606 A:middle
What's interesting about
this is, first of all,

00:38:55.066 --> 00:38:58.086 A:middle
this is on a phone and we're
doing a present view controller

00:38:58.086 --> 00:39:01.626 A:middle
and guess what, I can see the
presenting view controller.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:02.036 --> 00:39:04.296 A:middle
You couldn't do this
really on the phone before.

00:39:04.296 --> 00:39:07.656 A:middle
So now, you can implement
your kind of faux form sheets

00:39:07.656 --> 00:39:10.276 A:middle
or foe popovers right
on a phone.

00:39:11.176 --> 00:39:13.066 A:middle
But you'll notice that
bounce that came in.

00:39:13.376 --> 00:39:16.546 A:middle
So it comes in with a bounce
and I'd also like to show

00:39:16.546 --> 00:39:20.776 A:middle
that when we created that dialog
view, before it animated in,

00:39:21.316 --> 00:39:26.426 A:middle
we did something that I'm
not sure if we can see it.

00:39:26.826 --> 00:39:30.026 A:middle
Well, what is supposed
to be shown here is some

00:39:30.026 --> 00:39:34.216 A:middle
of that parallax where we
layer these dialog views.

00:39:34.546 --> 00:39:38.396 A:middle
And there's new API which
is available, I believed,

00:39:38.396 --> 00:39:41.366 A:middle
in the seed that we delivered
called UIMotionEffect.

00:39:41.846 --> 00:39:44.416 A:middle
And you can put a
UIMotionEffect on to a view

00:39:44.546 --> 00:39:46.546 A:middle
and then animate it directly.

00:39:46.636 --> 00:39:49.436 A:middle
And if it was working, I would
show it to you, but it isn't

00:39:49.436 --> 00:39:51.476 A:middle
so you'll have to
take my word for.

00:39:52.066 --> 00:39:54.126 A:middle
Now that was a present.

00:39:54.336 --> 00:39:56.656 A:middle
Let's see what happens
when I dismiss.

00:39:58.056 --> 00:40:00.596 A:middle
Now the first thing that happens
is we slide off to the side

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:00.596 --> 00:40:02.876 A:middle
and then we bounce
off and go away.

00:40:03.096 --> 00:40:05.146 A:middle
That's kind of a
two step simulation.

00:40:09.856 --> 00:40:10.246 A:middle
[Applause] OK.

00:40:10.496 --> 00:40:11.996 A:middle
So how did we do this?

00:40:12.396 --> 00:40:13.766 A:middle
Let's talk about that.

00:40:16.376 --> 00:40:19.036 A:middle
So I'm going to show
quickly some of the steps

00:40:19.036 --> 00:40:23.186 A:middle
and there's going to be a lot of
code up here, so bear with me.

00:40:23.186 --> 00:40:27.626 A:middle
The YYDropOutAnimator
is the animator object

00:40:27.626 --> 00:40:30.726 A:middle
which is a subclass of
dynamic behavior that I used

00:40:30.726 --> 00:40:32.376 A:middle
to create this effect.

00:40:33.436 --> 00:40:36.116 A:middle
And everything here
is just a consequence

00:40:36.116 --> 00:40:37.656 A:middle
of this specific implementation

00:40:37.736 --> 00:40:39.306 A:middle
and it's broken up
into a few things.

00:40:39.906 --> 00:40:42.506 A:middle
First of all, you'll notice
that it conforms to a bunch

00:40:42.506 --> 00:40:43.336 A:middle
of different protocols.

00:40:43.336 --> 00:40:45.016 A:middle
It conforms to the
animated transitioning.

00:40:45.016 --> 00:40:47.206 A:middle
It conforms to the animator
delegate and conforms

00:40:47.206 --> 00:40:48.416 A:middle
to the collision
behavior delegate.

00:40:48.776 --> 00:40:51.166 A:middle
This is some of the power of
using protocols, first of all,

00:40:51.166 --> 00:40:53.426 A:middle
that you're not bound
to a specific instance

00:40:53.426 --> 00:40:56.156 A:middle
and you can kind of mold
the objects of your choice

00:40:56.576 --> 00:41:00.926 A:middle
for implementing certain
behaviors in the system.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:01.056 --> 00:41:03.306 A:middle
When you create this thing,
you're usually create--

00:41:03.306 --> 00:41:05.176 A:middle
the delegate is usually
creating it

00:41:05.616 --> 00:41:08.556 A:middle
and when the delegate is
asked, it's actually passed

00:41:08.886 --> 00:41:12.506 A:middle
in a transition context and we
scroll that away in the animator

00:41:12.506 --> 00:41:14.396 A:middle
because we want to
be able to use it

00:41:14.746 --> 00:41:16.736 A:middle
in the dynamic behavior
callbacks.

00:41:17.296 --> 00:41:20.446 A:middle
We know whether or not the
dialog is being presented

00:41:20.446 --> 00:41:21.096 A:middle
or dismissed.

00:41:21.096 --> 00:41:22.156 A:middle
And, again, the delegate,

00:41:22.216 --> 00:41:24.646 A:middle
when it's called,
has that information.

00:41:25.746 --> 00:41:27.096 A:middle
We set the finish time.

00:41:27.096 --> 00:41:29.596 A:middle
The finish time is, I think,
I was alluding to before

00:41:29.596 --> 00:41:32.216 A:middle
which is I don't want this
transition to take too long.

00:41:32.486 --> 00:41:36.776 A:middle
So I want to say, "I want it to
be done no later than this point

00:41:36.776 --> 00:41:39.306 A:middle
in time," and we're
going to check that value

00:41:39.826 --> 00:41:43.076 A:middle
in the animator's callbacks

00:41:43.076 --> 00:41:45.166 A:middle
and the dynamic behavior's
action method.

00:41:45.886 --> 00:41:49.276 A:middle
And finally, we're going to--
this is a composite behavior

00:41:49.276 --> 00:41:53.586 A:middle
and we are going to scroll away
various primitive behaviors

00:41:53.586 --> 00:41:55.696 A:middle
that are actually going
to be added and removed,

00:41:55.696 --> 00:41:57.466 A:middle
these children behaviors

00:41:57.466 --> 00:42:01.236 A:middle
as Olivier demonstrated
a little bit earlier.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:01.396 --> 00:42:05.076 A:middle
So, amazingly enough, I scrolled
away in the corner of my office

00:42:05.076 --> 00:42:09.456 A:middle
with some green felt that
wasn't being used, and I used it

00:42:09.456 --> 00:42:11.006 A:middle
to create kind of a visual image

00:42:11.006 --> 00:42:15.006 A:middle
of what a view controller
screen might look like.

00:42:15.886 --> 00:42:19.346 A:middle
And basically, we're getting
called with animateTransition.

00:42:19.436 --> 00:42:21.106 A:middle
This is an interactive
transition.

00:42:21.136 --> 00:42:24.506 A:middle
It's a straight up animation
and the question is, now,

00:42:24.506 --> 00:42:26.526 A:middle
how do we hook up the
Dynamics to the system?

00:42:27.236 --> 00:42:29.706 A:middle
Well, the first thing that we
have to do is we have to figure

00:42:29.706 --> 00:42:32.216 A:middle
out what's moving and
what we actually want

00:42:32.216 --> 00:42:34.226 A:middle
to apply forces and the like to.

00:42:34.786 --> 00:42:37.336 A:middle
And a lot of this
code is alighted,

00:42:37.596 --> 00:42:39.116 A:middle
so I apologize for that.

00:42:39.166 --> 00:42:40.976 A:middle
But there's this thing
called the dynamic view.

00:42:40.976 --> 00:42:42.726 A:middle
The dynamic view is
the view that's moving.

00:42:42.926 --> 00:42:46.886 A:middle
It's just a name.

00:42:47.096 --> 00:42:48.956 A:middle
When it's called, the first
thing that we do is we add

00:42:49.216 --> 00:42:51.286 A:middle
that dynamic view into
the view hierarchy.

00:42:51.376 --> 00:42:53.806 A:middle
It so happens that
it's above the screen

00:42:54.186 --> 00:42:55.496 A:middle
because it's going to drop in.

00:42:55.696 --> 00:42:59.166 A:middle
And then, we start creating
some of our primitive behaviors

00:42:59.546 --> 00:43:03.476 A:middle
like the dynamic item behavior
where we set up an elasticity,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:03.766 --> 00:43:06.926 A:middle
we have the dynamic view
to that primitive behavior.

00:43:07.356 --> 00:43:10.816 A:middle
And for the first segment of
this transition, we don't want

00:43:11.146 --> 00:43:12.276 A:middle
to allow any rotation.

00:43:13.466 --> 00:43:14.496 A:middle
Then we add some gravity.

00:43:15.556 --> 00:43:18.096 A:middle
Gravity is a pretty
simple primitive behavior.

00:43:18.366 --> 00:43:20.806 A:middle
It's going to be three
times normal gravity.

00:43:21.396 --> 00:43:27.476 A:middle
We add a collision behavior
and you'll notice that the way

00:43:27.476 --> 00:43:29.346 A:middle
that I set the bounce

00:43:29.346 --> 00:43:32.536 A:middle
on the collision behavior is
using a slightly different

00:43:32.766 --> 00:43:34.506 A:middle
method on the collision
behavior,

00:43:34.576 --> 00:43:37.576 A:middle
set translate reference bounds
into boundaries with insets.

00:43:37.886 --> 00:43:40.566 A:middle
That's actually a very useful
method because you can kind

00:43:40.566 --> 00:43:43.646 A:middle
of take the reference
coordinate system and move it

00:43:43.646 --> 00:43:46.816 A:middle
in different directions
based on simple UIEdgeInsets.

00:43:47.746 --> 00:43:51.596 A:middle
So now let's talk a little
bit about the finish time.

00:43:51.676 --> 00:43:53.946 A:middle
Basically, we query
the dynamic animator

00:43:53.946 --> 00:43:55.256 A:middle
for how much time has elapsed.

00:43:55.256 --> 00:43:58.116 A:middle
It so happens in this case, it's
going to be 0 but, you know,

00:43:58.116 --> 00:43:59.726 A:middle
for sake of being true,

00:43:59.876 --> 00:44:02.716 A:middle
we ask the elapsed time
then we add the duration

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:02.976 --> 00:44:05.706 A:middle
that was scrolled away when we
created the behavior object.

00:44:06.356 --> 00:44:09.776 A:middle
And we create an action block
and that action block is going

00:44:09.776 --> 00:44:14.576 A:middle
to check whether or not the
time has passed that we want

00:44:14.576 --> 00:44:16.436 A:middle
to dedicate towards
this transition.

00:44:16.736 --> 00:44:19.826 A:middle
And if it has, there is a
very simple way to finish.

00:44:20.436 --> 00:44:24.006 A:middle
We basically remove ourselves
from the dynamic animator.

00:44:24.486 --> 00:44:28.286 A:middle
Now, to get things going,

00:44:28.286 --> 00:44:31.116 A:middle
we have to add the children
behavior to ourselves, remember,

00:44:31.116 --> 00:44:32.606 A:middle
we are a compound behavior.

00:44:33.286 --> 00:44:34.726 A:middle
And then, we have
to add ourselves

00:44:34.726 --> 00:44:36.836 A:middle
and there's only one behavior
now that's being added

00:44:36.926 --> 00:44:39.666 A:middle
to the animator and that is us.

00:44:40.506 --> 00:44:44.766 A:middle
And at this point, the physics
engine is going to start

00:44:44.766 --> 00:44:47.156 A:middle
and we're going to start
simulating our transition.

00:44:47.646 --> 00:44:54.586 A:middle
And there you have it.

00:44:54.826 --> 00:44:55.896 A:middle
So we've transitioned.

00:44:56.086 --> 00:44:58.136 A:middle
We're done, it's up
on the screen and now,

00:44:58.386 --> 00:45:00.306 A:middle
we're going to hit the
good to know button.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:01.046 --> 00:45:03.456 A:middle
And we're going to
do the dismiss,

00:45:03.456 --> 00:45:06.236 A:middle
and the dismiss is
a two-stage thing.

00:45:07.196 --> 00:45:08.926 A:middle
Again, we call
animateTransition.

00:45:09.126 --> 00:45:11.166 A:middle
We don't have to add a view
into the view hierarchy.

00:45:11.166 --> 00:45:13.166 A:middle
This is a dismiss,
it's already there.

00:45:13.476 --> 00:45:15.616 A:middle
We're going to set our
dynamic item behaviors

00:45:15.616 --> 00:45:16.696 A:middle
up a little bit differently.

00:45:16.696 --> 00:45:18.716 A:middle
We're going to allow
rotation this time.

00:45:19.376 --> 00:45:22.476 A:middle
Gravity is set up exactly
the same as it was before.

00:45:23.376 --> 00:45:26.176 A:middle
Our collision boundaries are a
little bit different and that's

00:45:26.176 --> 00:45:29.456 A:middle
because the type of
animation that we're trying

00:45:29.456 --> 00:45:30.766 A:middle
to achieve is a little
bit different.

00:45:31.176 --> 00:45:34.726 A:middle
We're going to add an attachment
behavior where we're going

00:45:34.856 --> 00:45:36.706 A:middle
to kind of try to anchor--

00:45:37.406 --> 00:45:39.486 A:middle
we're going to specify
a different position

00:45:39.486 --> 00:45:40.146 A:middle
in the default.

00:45:40.146 --> 00:45:42.156 A:middle
The default is usually
the center of the item.

00:45:42.546 --> 00:45:44.296 A:middle
We're going to kind of put it
up to the top and we're going

00:45:44.296 --> 00:45:46.296 A:middle
to put the anchor a
little bit off to the side.

00:45:46.686 --> 00:45:49.766 A:middle
We're going to give it a little
bit of kind of bounciness.

00:45:50.266 --> 00:45:53.626 A:middle
And then, we're going to set
up the action block again.

00:45:53.626 --> 00:45:54.726 A:middle
And this time, it's
a little interesting.

00:45:54.726 --> 00:45:56.656 A:middle
First of all, there's
a bug in that line

00:45:56.656 --> 00:45:57.826 A:middle
where I'm setting
the finish time.

00:45:57.826 --> 00:46:00.696 A:middle
It really should be two-thirds
of the duration not two-thirds

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:00.696 --> 00:46:03.046 A:middle
of the elapsed time,
but you get the drift.

00:46:03.396 --> 00:46:05.206 A:middle
And that's because
it's two stages.

00:46:05.206 --> 00:46:08.016 A:middle
I'm going to spend two-thirds of
my duration doing the first half

00:46:08.016 --> 00:46:11.826 A:middle
of my-- or first
two-thirds of my transition.

00:46:12.266 --> 00:46:14.786 A:middle
And then, I'm going to
move over to the next bit.

00:46:15.016 --> 00:46:17.296 A:middle
And the way again I'm going
to trigger that, is I'm going

00:46:17.296 --> 00:46:20.846 A:middle
to remove the behaviors which
is then going to cause me to go

00:46:20.846 --> 00:46:23.516 A:middle
into the DidPause
animator's delegate method.

00:46:24.536 --> 00:46:27.956 A:middle
I do the regular dance of
adding the children behaviors.

00:46:28.076 --> 00:46:31.616 A:middle
I do something different based
on whether or not I'm a--

00:46:31.906 --> 00:46:33.596 A:middle
whether or not I'm
presenting or dismissing,

00:46:33.596 --> 00:46:36.376 A:middle
that's why there's an IF
clause for the attach behavior

00:46:36.896 --> 00:46:45.676 A:middle
and then we're going to run.

00:46:45.676 --> 00:46:45.876 A:middle
[ Pause ]

00:46:45.876 --> 00:46:50.256 A:middle
So now, we've come to rest.

00:46:50.426 --> 00:46:51.596 A:middle
DidPause gets called.

00:46:51.596 --> 00:46:53.706 A:middle
Now, it either got called
because the system came

00:46:53.706 --> 00:46:57.146 A:middle
to a rest or because we
actually hit our elapsed time.

00:46:57.616 --> 00:46:59.026 A:middle
And we're going to
do the same thing.

00:46:59.026 --> 00:47:00.786 A:middle
Now we're using the attach
behavior a little bit

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:00.786 --> 00:47:04.076 A:middle
as a semaphore here because the
dynamic animator DidPause is

00:47:04.076 --> 00:47:05.866 A:middle
saying, "Hey, do I have
an attach behavior?

00:47:05.896 --> 00:47:07.776 A:middle
If I do, then I need to go

00:47:07.776 --> 00:47:09.916 A:middle
into the second step
of my simulation."

00:47:10.956 --> 00:47:13.066 A:middle
So I'm going or remove
the attach behavior,

00:47:13.236 --> 00:47:15.576 A:middle
clear out that reference to it.

00:47:15.576 --> 00:47:19.116 A:middle
I'm going to add myself
back to the dynamic animator

00:47:19.696 --> 00:47:20.966 A:middle
and I'm going to
change my finish time.

00:47:21.446 --> 00:47:22.436 A:middle
Now time has elapsed,

00:47:22.666 --> 00:47:25.346 A:middle
so animator elapse time
is actually not going

00:47:25.346 --> 00:47:26.486 A:middle
to be 0 at this point.

00:47:26.926 --> 00:47:29.686 A:middle
And now, I only want it to
run the remaining one third

00:47:29.686 --> 00:47:32.046 A:middle
of the specified duration
of the transition.

00:47:32.536 --> 00:47:36.506 A:middle
At this point, since the
attachments disappear--

00:47:36.986 --> 00:47:38.726 A:middle
I should have pressed
that button before.

00:47:38.726 --> 00:47:42.026 A:middle
Since the attachments
disappear, when I run it,

00:47:42.026 --> 00:47:44.786 A:middle
I'm going to hit this point.

00:47:44.786 --> 00:47:49.066 A:middle
And now the collision delegate
is going to kick in because now,

00:47:49.636 --> 00:47:51.936 A:middle
I want to do something
after that first bounce.

00:47:52.186 --> 00:47:54.926 A:middle
I basically want to remove
the collision behavior so that

00:47:55.056 --> 00:47:58.316 A:middle
on the next drop, it's going to
drop all the way off the screen.

00:47:58.556 --> 00:48:01.156 A:middle
And I want to check

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:02.126 --> 00:48:04.566 A:middle
that I actually bounce
off the edge I care about.

00:48:05.006 --> 00:48:06.936 A:middle
So it's possible that I
might have hit the right edge

00:48:06.936 --> 00:48:09.696 A:middle
and I really want to
just trigger this code

00:48:09.696 --> 00:48:10.596 A:middle
if I hit the bottom.

00:48:11.366 --> 00:48:15.276 A:middle
And that's what that check is
doing with point.x &lt; xContact.

00:48:16.566 --> 00:48:19.606 A:middle
But if I'm there, I'm now going
to remove the collision behavior

00:48:20.746 --> 00:48:22.656 A:middle
and I'm going to
fall off the screen,

00:48:22.656 --> 00:48:24.416 A:middle
I'm going to get
back into DidPause.

00:48:24.416 --> 00:48:26.986 A:middle
Now this time, I'm going to
get in the DidPause definitely

00:48:26.986 --> 00:48:29.826 A:middle
because time has elapsed,
because basically,

00:48:29.826 --> 00:48:33.576 A:middle
that view has just fallen down
to the bottom of the earth.

00:48:33.576 --> 00:48:34.826 A:middle
It's not going to stop.

00:48:35.636 --> 00:48:38.876 A:middle
But I put in my time
check and so now I'm

00:48:39.286 --> 00:48:40.746 A:middle
in the final bits of the code.

00:48:40.746 --> 00:48:42.466 A:middle
I'm going to clean
up and you'll notice

00:48:42.766 --> 00:48:44.456 A:middle
that I call completeTransition.

00:48:45.066 --> 00:48:48.276 A:middle
That's critical and
that ends how

00:48:48.276 --> 00:48:51.896 A:middle
that particular present
dismiss was implemented.

00:48:52.746 --> 00:48:54.166 A:middle
So now let's talk about
the different one,

00:48:54.166 --> 00:48:55.116 A:middle
this one is interactive.

00:48:55.946 --> 00:48:58.106 A:middle
It's a drop shade
transition like I said.

00:48:58.366 --> 00:49:01.736 A:middle
This one can actually be used
the way it was implemented.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:01.736 --> 00:49:03.346 A:middle
It's both the navigation
transition

00:49:03.436 --> 00:49:06.166 A:middle
and a regular present
dismiss transition.

00:49:07.186 --> 00:49:10.736 A:middle
It's a dynamic behavior
subclass that conforms

00:49:10.736 --> 00:49:14.016 A:middle
to both animated transitioning
and interactive transitioning.

00:49:14.426 --> 00:49:17.246 A:middle
Again, these are
protocols, so we're free

00:49:17.246 --> 00:49:20.116 A:middle
to basically have one object
implement the whole bunch

00:49:20.116 --> 00:49:21.396 A:middle
of them if it makes sense.

00:49:21.846 --> 00:49:24.956 A:middle
And in this case, it's
very convenient to do so.

00:49:25.676 --> 00:49:29.786 A:middle
The interactive portion of this
transition does not use Dynamics

00:49:29.786 --> 00:49:30.056 A:middle
at all.

00:49:31.186 --> 00:49:35.516 A:middle
However, when the interaction
ends, we set up a dynamic finish

00:49:35.566 --> 00:49:40.076 A:middle
as it were and the dynamic
finish is actually going

00:49:40.076 --> 00:49:42.526 A:middle
to be calling out
to the interactive

00:49:42.566 --> 00:49:44.156 A:middle
transitioning methods.

00:49:44.936 --> 00:49:47.246 A:middle
And we do this for a
very specific reason.

00:49:47.806 --> 00:49:49.846 A:middle
We do this because that--

00:49:49.846 --> 00:49:55.136 A:middle
in that way, we are able
to drive auxiliary views

00:49:55.136 --> 00:49:57.836 A:middle
that might be participating
in a transition,

00:49:58.006 --> 00:49:59.676 A:middle
like for example,
the navigation bar.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:00.566 --> 00:50:03.456 A:middle
And it will synchronize in terms

00:50:03.456 --> 00:50:07.056 A:middle
of how complete the
transition is or not

00:50:07.336 --> 00:50:08.956 A:middle
with the Dynamics
of the systems.

00:50:08.956 --> 00:50:10.516 A:middle
So that's a pretty
interesting technique.

00:50:11.156 --> 00:50:11.986 A:middle
We're going to continue

00:50:11.986 --> 00:50:15.046 A:middle
to use the same DidPause
mechanism that we used before.

00:50:15.416 --> 00:50:17.226 A:middle
So let me give you
a quick demo of that

00:50:17.996 --> 00:50:21.656 A:middle
and then we'll deconstruct
that one.

00:50:21.846 --> 00:50:24.876 A:middle
OK, basically, it's
pretty simple.

00:50:26.216 --> 00:50:29.056 A:middle
You'll see as I move
this with the gesture,

00:50:29.876 --> 00:50:31.166 A:middle
I can move it up or down.

00:50:31.616 --> 00:50:33.306 A:middle
If I cancel it, it goes back.

00:50:34.476 --> 00:50:35.926 A:middle
If you notice closely,

00:50:35.926 --> 00:50:41.036 A:middle
you'll see how the
navigation bar is kind

00:50:41.036 --> 00:50:43.466 A:middle
of fading in and out.

00:50:43.466 --> 00:50:45.226 A:middle
And if I go down, it kind of--

00:50:45.556 --> 00:50:47.286 A:middle
you'll notice that there
was a slight bounce

00:50:47.286 --> 00:50:49.986 A:middle
to it as it was settling.

00:50:49.986 --> 00:50:52.616 A:middle
And the navigation bar itself
was doing that as well.

00:50:53.236 --> 00:50:55.636 A:middle
That is a noninteractive
dismissal.

00:50:56.246 --> 00:51:01.256 A:middle
And just to prove my point,
I can make this a full

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:01.256 --> 00:51:02.986 A:middle
on presentation if I want to.

00:51:02.986 --> 00:51:08.706 A:middle
And exact-- with exactly the
same code, so that can drop

00:51:09.416 --> 00:51:11.436 A:middle
in or I can flip it up.

00:51:11.736 --> 00:51:13.676 A:middle
So that's what we're
going to deconstruct.

00:51:14.456 --> 00:51:15.556 A:middle
Let's do that quickly.

00:51:20.036 --> 00:51:22.706 A:middle
So before, the blogger's
get out there,

00:51:22.706 --> 00:51:25.166 A:middle
this is not some
leak of new hardware.

00:51:25.166 --> 00:51:26.556 A:middle
We don't have anything
looking like that.

00:51:26.556 --> 00:51:31.806 A:middle
I just couldn't fit all
the code on the screen.

00:51:31.966 --> 00:51:33.966 A:middle
So gesture starts.

00:51:35.406 --> 00:51:36.956 A:middle
This has nothing to
do with dynamics.

00:51:36.956 --> 00:51:41.736 A:middle
We are just recognizing a pan
gesture and when it starts,

00:51:41.736 --> 00:51:44.086 A:middle
we're going to say
Push View Controller.

00:51:44.086 --> 00:51:46.686 A:middle
And this case, I'm going
to through the sequence

00:51:46.686 --> 00:51:48.126 A:middle
that I demonstrated

00:51:48.126 --> 00:51:50.726 A:middle
as a navigation controller,
and that's it.

00:51:51.746 --> 00:51:54.276 A:middle
Now, I've wired things
up in such a way

00:51:54.566 --> 00:51:56.456 A:middle
that when I called
push view controller,

00:51:56.456 --> 00:51:58.066 A:middle
my navigation controller
delegate,

00:51:58.126 --> 00:51:59.626 A:middle
vended in animation controller,

00:51:59.626 --> 00:52:01.276 A:middle
vended in interaction
controller,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:01.276 --> 00:52:03.036 A:middle
and all those good
things were happening.

00:52:03.036 --> 00:52:06.136 A:middle
And then because of that,
the system called back

00:52:06.136 --> 00:52:07.386 A:middle
to the interaction controller

00:52:07.386 --> 00:52:09.386 A:middle
and said Start Interactive
Transition.

00:52:10.556 --> 00:52:13.486 A:middle
And we put the view
into the view hierarchy

00:52:13.486 --> 00:52:15.566 A:middle
which is what you
see with the gray box

00:52:16.436 --> 00:52:18.976 A:middle
and now we are continuing
to handle the gesture.

00:52:19.496 --> 00:52:22.536 A:middle
And as our finger moves
across the screen,

00:52:22.576 --> 00:52:26.656 A:middle
we are in fact pulling
the presented

00:52:26.656 --> 00:52:30.826 A:middle
or the push view controller's
view in the container hierarchy.

00:52:30.826 --> 00:52:34.356 A:middle
And we're calling out as we do
at update interactive transition

00:52:34.356 --> 00:52:37.016 A:middle
with the percent complete
which is based on the height

00:52:37.576 --> 00:52:40.486 A:middle
of the actual view
controller being presented.

00:52:41.476 --> 00:52:42.336 A:middle
So far so good.

00:52:42.846 --> 00:52:46.416 A:middle
Nothing particularly
new has happened

00:52:46.416 --> 00:52:49.366 A:middle
until we release our
finger from the screen.

00:52:49.776 --> 00:52:53.406 A:middle
At which point, we're
going to start building

00:52:53.406 --> 00:52:54.956 A:middle
up the Dynamics of our system.

00:52:55.206 --> 00:52:58.326 A:middle
We're going to determine
based on velocity

00:52:58.326 --> 00:52:59.646 A:middle
and direction perhaps whether

00:52:59.646 --> 00:53:01.556 A:middle
or not the gesture
should cancel or not.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:01.956 --> 00:53:06.006 A:middle
And then, we are going to create
a collision behavior using

00:53:06.276 --> 00:53:07.226 A:middle
boundary insets.

00:53:07.226 --> 00:53:09.606 A:middle
We're going to create an
attachment behavior this time

00:53:10.476 --> 00:53:12.156 A:middle
and we're going to
create an action block.

00:53:12.676 --> 00:53:15.226 A:middle
And what I'd like to focus
on this action block is

00:53:15.226 --> 00:53:16.586 A:middle
that action block is going

00:53:16.586 --> 00:53:19.276 A:middle
to call
UpdateInteractiveTransition.

00:53:20.116 --> 00:53:23.696 A:middle
So as this Dynamics of the
system affects the view

00:53:23.696 --> 00:53:25.216 A:middle
as it bounces in and out,

00:53:25.596 --> 00:53:28.746 A:middle
we're going to compute how
close we are to the finish

00:53:28.746 --> 00:53:29.866 A:middle
and we're going to call out to

00:53:29.866 --> 00:53:34.046 A:middle
that UpdateInteractiveTransition
method

00:53:34.046 --> 00:53:35.416 A:middle
on the transition context.

00:53:35.906 --> 00:53:40.006 A:middle
When it's all over,
we're going to be

00:53:40.006 --> 00:53:42.176 A:middle
in the DidPause block again.

00:53:43.366 --> 00:53:47.156 A:middle
We're going to determine whether
or not it was canceled or not,

00:53:47.156 --> 00:53:48.116 A:middle
in which case we're either going

00:53:48.116 --> 00:53:49.886 A:middle
to call
CancelInteractiveTransition

00:53:49.886 --> 00:53:52.466 A:middle
or FinishInteractiveTransition
depending on the direction.

00:53:52.466 --> 00:53:53.576 A:middle
In this case, it's finish.

00:53:54.306 --> 00:53:55.456 A:middle
And then, again, we're going

00:53:55.456 --> 00:53:59.426 A:middle
to call the completeTransition
block on our method,

00:53:59.846 --> 00:54:01.806 A:middle
on the transition context.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:02.856 --> 00:54:04.726 A:middle
So what did we learn here?

00:54:05.456 --> 00:54:06.616 A:middle
First of all, Dynamics

00:54:06.616 --> 00:54:09.406 A:middle
and custom transitions are
compatible with each other.

00:54:09.406 --> 00:54:10.056 A:middle
They can be used.

00:54:10.056 --> 00:54:12.336 A:middle
In fact, we spend a lot of
times trying to make sure

00:54:12.336 --> 00:54:14.666 A:middle
that our APIs compose
well together.

00:54:15.746 --> 00:54:18.856 A:middle
As a rule of thumb,
it really pays off

00:54:18.856 --> 00:54:21.936 A:middle
to create composite behaviors
that get the function

00:54:21.936 --> 00:54:22.976 A:middle
that you're interested in.

00:54:23.716 --> 00:54:28.046 A:middle
We showed how you can create
complex dynamic transitions

00:54:28.416 --> 00:54:30.216 A:middle
using the dynamic
animator delegate,

00:54:30.376 --> 00:54:31.626 A:middle
the collision behavior delegate,

00:54:31.876 --> 00:54:34.066 A:middle
and actions on dynamic
behaviors.

00:54:36.216 --> 00:54:40.326 A:middle
A dynamic behavior subclass
can easily conform to one

00:54:40.326 --> 00:54:43.346 A:middle
or even both of the
transitioning protocols.

00:54:43.406 --> 00:54:46.246 A:middle
It makes a lot of sense to
do so because you can put all

00:54:46.246 --> 00:54:47.956 A:middle
of the logic in one place.

00:54:48.826 --> 00:54:51.066 A:middle
Duration is something
that needs to be thought

00:54:51.066 --> 00:54:52.676 A:middle
about when you're
doing transitions.

00:54:52.676 --> 00:54:56.406 A:middle
Again, a dynamic system doesn't
necessarily converge ever.

00:54:57.126 --> 00:55:00.566 A:middle
So you want to put
checks in place based

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:55:00.566 --> 00:55:03.316 A:middle
on your application logic
to ensure that it finishes.

00:55:04.636 --> 00:55:05.626 A:middle
And then, what's interesting is

00:55:05.626 --> 00:55:09.626 A:middle
that dynamic behavior
actions can actually be used

00:55:09.986 --> 00:55:13.066 A:middle
to drive the interactive
portion of a transition.

00:55:13.326 --> 00:55:15.426 A:middle
And that might not
be entirely obvious.

00:55:16.406 --> 00:55:18.376 A:middle
I'd like to make one
other point and that is,

00:55:18.376 --> 00:55:23.876 A:middle
is that if you're using
Dynamics and you add behavior

00:55:23.876 --> 00:55:26.606 A:middle
to the dynamic animator
and nothing happens

00:55:27.766 --> 00:55:30.166 A:middle
which has happened to me
a few times, it's probably

00:55:30.166 --> 00:55:32.526 A:middle
because you didn't retain
your dynamic animator.

00:55:32.886 --> 00:55:34.146 A:middle
Don't let that happen to you.

00:55:34.856 --> 00:55:37.026 A:middle
So quick wrap up.

00:55:37.596 --> 00:55:41.636 A:middle
When you're using dynamics,
focus on what it is precisely

00:55:41.636 --> 00:55:44.466 A:middle
that you're really trying
to do in small pieces.

00:55:44.856 --> 00:55:49.166 A:middle
It really helps to build
complex dynamic interactions

00:55:49.166 --> 00:55:51.426 A:middle
and animations piece by piece.

00:55:51.706 --> 00:55:54.906 A:middle
In fact, we are iterating all
the time when we create this.

00:55:55.196 --> 00:55:56.996 A:middle
You're going to have different
constraints that you want

00:55:56.996 --> 00:55:59.976 A:middle
to take into account, duration,
interactivity, et cetera.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:56:01.016 --> 00:56:03.126 A:middle
There's all-- there's
a whole other bunch

00:56:03.126 --> 00:56:06.236 A:middle
of new animation APIs
that we added in iOS 7.

00:56:06.686 --> 00:56:09.006 A:middle
Those might be more
suitable in many cases.

00:56:09.006 --> 00:56:12.836 A:middle
For example, there's an
animate with duration API

00:56:13.156 --> 00:56:15.386 A:middle
that allows you to
implement kind

00:56:15.386 --> 00:56:17.336 A:middle
of a simple spring
animation as well.

00:56:17.846 --> 00:56:19.156 A:middle
So look at those two.

00:56:20.316 --> 00:56:26.616 A:middle
And then just go to town,
create awesome stuff.

00:56:26.826 --> 00:56:29.226 A:middle
All these sessions, I
believe have already happened

00:56:29.266 --> 00:56:30.876 A:middle
but you can look at
them on the videos.

00:56:31.116 --> 00:56:32.636 A:middle
They all talk about dynamics.

00:56:32.636 --> 00:56:35.186 A:middle
Some of them talk about custom
view controller transitions.

00:56:36.366 --> 00:56:36.776 A:middle
That's it.

00:56:36.776 --> 00:56:38.186 A:middle
[ Applause ]

00:56:38.186 --> 00:56:38.516 A:middle
Thank you.

00:56:39.016 --> 00:56:45.960 A:middle
[ Applause ]

