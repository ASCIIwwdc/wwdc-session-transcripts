WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:09.516 A:middle
[ Silence ]

00:00:10.016 --> 00:00:14.000 A:middle
[ Applause ]

00:00:15.056 --> 00:00:17.156 A:middle
&gt;&gt; So many people,
this is awesome.

00:00:17.156 --> 00:00:19.376 A:middle
Thank you very much
for coming out.

00:00:19.376 --> 00:00:21.806 A:middle
So, it's Friday, as
you probably noticed.

00:00:22.366 --> 00:00:25.096 A:middle
And, you know, 'cause
it's Friday,

00:00:25.096 --> 00:00:26.796 A:middle
we thought we'd do
something a little different,

00:00:26.796 --> 00:00:28.446 A:middle
have a little fun.

00:00:28.446 --> 00:00:30.806 A:middle
You all got the note that today
is Audience Participation Day.

00:00:30.806 --> 00:00:32.146 A:middle
Did you saw it in your--
I just made that up.

00:00:32.466 --> 00:00:34.146 A:middle
But, no, seriously,
audience participation.

00:00:34.616 --> 00:00:36.776 A:middle
So the first thing,
if you'd help me out--

00:00:36.776 --> 00:00:38.216 A:middle
by the way, my name
is Scott Stevenson.

00:00:38.306 --> 00:00:39.226 A:middle
I work in Apple Engineering.

00:00:39.746 --> 00:00:43.466 A:middle
Thank you.

00:00:43.466 --> 00:00:46.106 A:middle
So, if you would help me
out, just by show hands,

00:00:46.106 --> 00:00:48.696 A:middle
how many people here today
consider themselves sort

00:00:48.696 --> 00:00:51.016 A:middle
of beginner, just getting
started with iOS or OS X?

00:00:52.026 --> 00:00:53.146 A:middle
No beginners, really?

00:00:54.066 --> 00:00:55.436 A:middle
Two, three, OK, all right.

00:00:55.436 --> 00:00:57.856 A:middle
We're going to see-- you
think you're really good,

00:00:58.286 --> 00:00:59.256 A:middle
but we'll see.

00:00:59.256 --> 00:01:00.726 A:middle
So-- And who considers
themselves sort

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:00.726 --> 00:01:01.306 A:middle
of like intermediate,

00:01:01.306 --> 00:01:03.006 A:middle
like pretty good but
not total expert?

00:01:03.006 --> 00:01:04.266 A:middle
Wow, OK, all right.

00:01:04.266 --> 00:01:05.536 A:middle
See now, we're being honest, OK.

00:01:06.266 --> 00:01:07.336 A:middle
What about like total expert,

00:01:07.336 --> 00:01:09.066 A:middle
like people there's no way
you're going to learn something,

00:01:09.066 --> 00:01:10.476 A:middle
you're just here to like
heckle the other guys?

00:01:11.626 --> 00:01:12.736 A:middle
OK, all right.

00:01:12.736 --> 00:01:14.046 A:middle
So you guys are going
to learn something.

00:01:14.046 --> 00:01:15.676 A:middle
So, here's my-- here's the deal.

00:01:17.026 --> 00:01:19.406 A:middle
My goal is to make sure every
single person in here learns

00:01:19.406 --> 00:01:20.716 A:middle
at least a few awesome things.

00:01:21.366 --> 00:01:24.416 A:middle
And the AMB guys and the
first two groups, you guys--

00:01:24.416 --> 00:01:25.586 A:middle
your job is to watch
the other guys.

00:01:25.586 --> 00:01:28.316 A:middle
And if they learn something,
'cause I'm going to check later,

00:01:28.316 --> 00:01:31.516 A:middle
then I want to hear about it.

00:01:31.766 --> 00:01:34.646 A:middle
So, the first thing
I want to say here

00:01:34.646 --> 00:01:37.426 A:middle
at the beginning is how many of
you know about NSHipster.com?

00:01:37.426 --> 00:01:43.446 A:middle
OK, yeah. So right, so you
guys know the deal with this.

00:01:43.446 --> 00:01:46.616 A:middle
But just in case you don't, the
thing here is that the author,

00:01:46.616 --> 00:01:48.696 A:middle
Mattt Thompson, what he
does is he goes out--

00:01:48.696 --> 00:01:50.936 A:middle
and of course, Cocoa and
Cocoa Touch are these really

00:01:50.936 --> 00:01:54.656 A:middle
like expensive rich frameworks
with so many things available,

00:01:54.996 --> 00:01:57.456 A:middle
and you're-- it's likely that
because there's so much stuff,

00:01:57.456 --> 00:01:59.256 A:middle
you're actually going to
miss some really cool things.

00:01:59.256 --> 00:02:01.956 A:middle
So, what Mattt does, he's
been doing this for a while,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:01.956 --> 00:02:04.836 A:middle
he goes out and digs up
these really, you know,

00:02:04.836 --> 00:02:07.396 A:middle
amazing gems hidden in Cocoa
and Cocoa Touch and brings them

00:02:07.396 --> 00:02:08.496 A:middle
to the surface and says, "Hey,

00:02:08.496 --> 00:02:10.246 A:middle
you guys really should be using
this 'cause it's awesome."

00:02:10.916 --> 00:02:14.296 A:middle
So we ran across the site and we
said, "Well, this is super cool.

00:02:14.296 --> 00:02:16.026 A:middle
Let's do a session on this,"
you know, 'cause that seems

00:02:16.026 --> 00:02:16.816 A:middle
like a really good idea.

00:02:17.316 --> 00:02:19.476 A:middle
And so, we called Mattt
and we're like, you know,

00:02:19.476 --> 00:02:22.466 A:middle
"Would you want to come up
WWDC and talk about it?"

00:02:22.466 --> 00:02:23.666 A:middle
He's like, "Sure,
that sounds good."

00:02:23.666 --> 00:02:25.636 A:middle
So we actually brought him
today and I'm going to bring him

00:02:25.636 --> 00:02:27.516 A:middle
up in a little bit, but
I just want to call this

00:02:27.516 --> 00:02:28.496 A:middle
out in the beginning
and just, you know,

00:02:28.496 --> 00:02:30.776 A:middle
give credit where credit's
due that this is sort of based

00:02:30.776 --> 00:02:31.536 A:middle
on something Mattt did.

00:02:32.076 --> 00:02:35.166 A:middle
So, we have 30 tips.

00:02:35.696 --> 00:02:37.806 A:middle
So remember the expert folks
that appears you're not going

00:02:37.806 --> 00:02:39.266 A:middle
to learn anything,
remember below of averages,

00:02:39.466 --> 00:02:40.886 A:middle
pretty good chance you're
going to learn something

00:02:41.366 --> 00:02:42.996 A:middle
and you're going to see
them counted down as we go.

00:02:42.996 --> 00:02:45.816 A:middle
So, here's the little
map here that we did.

00:02:45.936 --> 00:02:48.796 A:middle
We have a graphics
team as you can tell.

00:02:48.796 --> 00:02:50.806 A:middle
And-- So we're going to cover a
bunch of different frameworks.

00:02:50.806 --> 00:02:52.776 A:middle
We're going to start at Xcode,
Objective-C, and then kind

00:02:52.776 --> 00:02:54.716 A:middle
of work our way up to
the different levels.

00:02:54.716 --> 00:02:56.456 A:middle
And we'll eventually end up on--

00:02:56.456 --> 00:02:58.146 A:middle
I guess that's like
AppKit Peninsula

00:02:58.146 --> 00:02:58.856 A:middle
or something like that.

00:02:59.226 --> 00:03:02.316 A:middle
So let's start with Xcode and
we're going to focus on editing

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:02.316 --> 00:03:03.166 A:middle
and debugging to start.

00:03:03.166 --> 00:03:06.646 A:middle
And we're going to kind of start
with some more basic things

00:03:06.646 --> 00:03:08.176 A:middle
and work our way up
to the advanced stuff.

00:03:08.636 --> 00:03:11.876 A:middle
So to start, if I can get the
clicker to work, there we go.

00:03:11.876 --> 00:03:13.966 A:middle
So, I'm sure a lot of you
are familiar with the feature

00:03:13.966 --> 00:03:16.666 A:middle
in Xcode called Open
Quickly, and you just bring it

00:03:16.666 --> 00:03:18.046 A:middle
up by going to the File menu

00:03:18.046 --> 00:03:19.476 A:middle
and choosing Open
Quickly of all things.

00:03:20.106 --> 00:03:21.776 A:middle
And you can also just
hit Command-Shift-O.

00:03:22.376 --> 00:03:23.796 A:middle
And what happens
is you choose that

00:03:23.796 --> 00:03:25.006 A:middle
and you see a window
like this pop.

00:03:25.006 --> 00:03:26.696 A:middle
This is Xcode 4, of
course, so, you know,

00:03:26.696 --> 00:03:28.266 A:middle
it looks a little
different than Xcode 5.

00:03:28.486 --> 00:03:30.576 A:middle
But this window comes up
and then you just go ahead

00:03:30.576 --> 00:03:31.556 A:middle
and start typing something.

00:03:31.556 --> 00:03:33.046 A:middle
And what Xcode is going to
do is it's going to look

00:03:33.046 --> 00:03:35.266 A:middle
across all the code in your
project and all the frameworks

00:03:35.266 --> 00:03:36.906 A:middle
that you brought in,
and it's just going

00:03:36.906 --> 00:03:38.266 A:middle
to start live filtering results.

00:03:38.266 --> 00:03:39.696 A:middle
And I'm sure a lot of
you are actually familiar

00:03:39.696 --> 00:03:40.186 A:middle
with this feature.

00:03:40.186 --> 00:03:42.086 A:middle
If you're not using this, you
definitely should be using this

00:03:42.086 --> 00:03:44.306 A:middle
because compared to like
Project Search where you have

00:03:44.306 --> 00:03:46.766 A:middle
to type something and look at
the long list result and say,

00:03:46.766 --> 00:03:47.886 A:middle
"Ah-ah, that wasn't
quite what I wanted.

00:03:47.886 --> 00:03:49.036 A:middle
Let me delete it
and do it again,"

00:03:49.626 --> 00:03:51.206 A:middle
you're live filtering
stuff in Open Quickly.

00:03:51.206 --> 00:03:53.386 A:middle
So you should be using this
like all the time, all day.

00:03:54.106 --> 00:03:55.306 A:middle
But the thing you
may not know is

00:03:55.306 --> 00:03:56.926 A:middle
that it's actually
pretty incredibly smart

00:03:57.066 --> 00:03:58.476 A:middle
for what you're searching for.

00:03:58.476 --> 00:04:02.916 A:middle
So, in this example on screen,
I've typed coretextctpar,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:02.916 --> 00:04:04.966 A:middle
and Open Quickly is
smart to say, "You know,

00:04:04.966 --> 00:04:07.956 A:middle
I think what you actually meant
was the CTParagraphStyle header

00:04:08.196 --> 00:04:10.116 A:middle
in CoreText," so
it splits that up.

00:04:10.116 --> 00:04:14.706 A:middle
So, another example is you
can type in abbreviations.

00:04:14.706 --> 00:04:19.366 A:middle
So you can type in UK/UIVC,
and again Open Quickly is like,

00:04:19.366 --> 00:04:21.276 A:middle
"You know what, I'm pretty
sure what you actually meant

00:04:21.276 --> 00:04:22.156 A:middle
was UIViewController."

00:04:22.156 --> 00:04:23.606 A:middle
So, it's going to go
ahead and highlight that.

00:04:23.606 --> 00:04:25.156 A:middle
There's other options,
but that's the one

00:04:25.156 --> 00:04:28.056 A:middle
that pops up to the top.

00:04:28.056 --> 00:04:31.216 A:middle
Next tip-- by the way, since
we have 30 tips, we've got just

00:04:31.216 --> 00:04:32.846 A:middle
about an hour, I'm going to
have to race through this

00:04:32.846 --> 00:04:33.576 A:middle
in case that's not clear.

00:04:33.576 --> 00:04:36.896 A:middle
So next tip, this is
one of these things

00:04:36.896 --> 00:04:39.426 A:middle
that I see my coworkers
everyday using

00:04:39.426 --> 00:04:41.076 A:middle
and every time I see
them using, I'm like,

00:04:41.076 --> 00:04:42.176 A:middle
"Why am I not using this?

00:04:42.176 --> 00:04:44.646 A:middle
This is so useful," and
that I'm just wasting time.

00:04:44.646 --> 00:04:46.086 A:middle
They're like done and
I'm like going to lunch.

00:04:46.376 --> 00:04:49.436 A:middle
So, all you have to do is in
the upper left hand corner

00:04:49.566 --> 00:04:52.046 A:middle
of the Xcode Editor pane,
there's this tiny little,

00:04:52.476 --> 00:04:54.656 A:middle
really not super obvious button

00:04:54.656 --> 00:04:56.816 A:middle
but incredibly useful
called Related Files.

00:04:56.816 --> 00:04:59.816 A:middle
So if you click on it, it
pops up and shows you files

00:04:59.816 --> 00:05:01.316 A:middle
that are related to the
cluster you're currently working

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:01.316 --> 00:05:03.806 A:middle
on which is a great thing for--
to you based on what I'm saying.

00:05:03.806 --> 00:05:07.446 A:middle
It shows you Subclasses,
Superclasses, Categories,

00:05:07.716 --> 00:05:09.746 A:middle
and one of the most
useful items actually

00:05:09.746 --> 00:05:11.326 A:middle
in here is the Callers
and Callees.

00:05:11.646 --> 00:05:14.836 A:middle
So, other classes that
are calling this class

00:05:15.076 --> 00:05:17.386 A:middle
and other classes you
call are actually listed

00:05:17.386 --> 00:05:18.096 A:middle
in that menu item.

00:05:18.096 --> 00:05:20.096 A:middle
So you should always be
using this all the time,

00:05:20.566 --> 00:05:22.476 A:middle
[inaudible] thing here
so I remember to use it

00:05:22.476 --> 00:05:25.086 A:middle
so I'm not wasting so much time.

00:05:25.286 --> 00:05:27.656 A:middle
Next trick-- and this honestly
is another one of these things

00:05:27.656 --> 00:05:29.226 A:middle
where I wish I'm really
just putting this here

00:05:29.226 --> 00:05:30.026 A:middle
so I remember to use it.

00:05:30.356 --> 00:05:31.716 A:middle
So a lot of times what happens

00:05:31.946 --> 00:05:34.186 A:middle
when I'm debugging something
is I'll get kind of halfway

00:05:34.186 --> 00:05:36.936 A:middle
through my debugging session
and I'll be thinking, "Boy,

00:05:36.996 --> 00:05:39.316 A:middle
if I got just one thing I need
to actually have here to help me

00:05:39.316 --> 00:05:41.956 A:middle
through this problem," and
so I'll like typing in NSLog

00:05:41.956 --> 00:05:43.946 A:middle
and stop and recompile,
and then I'll be like,

00:05:43.946 --> 00:05:45.976 A:middle
"Why didn't I use Breakpoint
Actions 'cause this is

00:05:45.976 --> 00:05:46.676 A:middle
so much better?"

00:05:47.186 --> 00:05:49.506 A:middle
So all you need to do to
use Breakpoint Action is go

00:05:49.506 --> 00:05:50.616 A:middle
to the line of code
where you need

00:05:50.616 --> 00:05:52.706 A:middle
to log some additional
information,

00:05:53.256 --> 00:05:54.286 A:middle
just pop in a breakpoint.

00:05:54.286 --> 00:05:56.106 A:middle
And if you right click
on the breakpoint,

00:05:56.426 --> 00:05:58.826 A:middle
it will pop up this popover.

00:05:58.826 --> 00:06:00.696 A:middle
You can do a bunch of things
with this just pop over,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:00.696 --> 00:06:02.216 A:middle
but the one thing I just
want to highlight here is

00:06:02.216 --> 00:06:04.006 A:middle
that you can actually
just add a log message.

00:06:04.006 --> 00:06:05.636 A:middle
So, just use Log Message,

00:06:05.636 --> 00:06:07.316 A:middle
type in whatever the format
string is that you want.

00:06:07.316 --> 00:06:09.036 A:middle
And you can actually do
some pretty cools things

00:06:09.036 --> 00:06:13.126 A:middle
with conditionals and the number
of times to skip the breakpoint.

00:06:13.606 --> 00:06:17.116 A:middle
But anyway, you can type in a
log message and you don't have

00:06:17.116 --> 00:06:18.446 A:middle
to stop running the program.

00:06:18.446 --> 00:06:19.416 A:middle
It can just keep
going, of course,

00:06:19.416 --> 00:06:20.176 A:middle
'cause this is a breakpoint.

00:06:20.396 --> 00:06:23.906 A:middle
So, do not-- from this day on,
do not stop and write NSLog

00:06:23.906 --> 00:06:26.746 A:middle
and recompile, just use this
'cause it'll save you tons

00:06:27.246 --> 00:06:29.176 A:middle
of time.

00:06:29.176 --> 00:06:30.696 A:middle
Debug description, just
a really quick one.

00:06:30.836 --> 00:06:33.186 A:middle
I'm sure actually a lot of you,
hopefully, are aware of this.

00:06:33.636 --> 00:06:35.066 A:middle
So of course there's
the description method

00:06:35.066 --> 00:06:38.116 A:middle
that you implement on your
classes just to see something

00:06:38.116 --> 00:06:39.416 A:middle
in the console when
you use NSLog.

00:06:39.686 --> 00:06:41.216 A:middle
But debug description is
a little bit different.

00:06:41.896 --> 00:06:44.966 A:middle
So it's intended to be kind of
more provost debugging string

00:06:44.966 --> 00:06:46.066 A:middle
that gives you extra information

00:06:46.066 --> 00:06:47.776 A:middle
that you only really
need at debugging time.

00:06:48.466 --> 00:06:49.606 A:middle
So it just looks like this.

00:06:49.606 --> 00:06:50.666 A:middle
This is not rocket science.

00:06:50.666 --> 00:06:52.146 A:middle
You implement a method
called debugDescription.

00:06:52.646 --> 00:06:54.676 A:middle
You return some ridiculously
long string

00:06:54.676 --> 00:06:56.516 A:middle
that you think you might need
to print out for some reason.

00:06:57.026 --> 00:06:59.126 A:middle
And then when you're
in lldb or in the--

00:06:59.126 --> 00:07:01.526 A:middle
just in the Xcode
visual view and I do a po

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:01.526 --> 00:07:04.606 A:middle
on self.rootViewController here,
I get that really long string.

00:07:04.606 --> 00:07:07.396 A:middle
So of course, you're not getting
the normal just description

00:07:07.396 --> 00:07:08.586 A:middle
which you may be using
for other purposes,

00:07:08.586 --> 00:07:09.506 A:middle
it's just for debugging.

00:07:10.766 --> 00:07:13.236 A:middle
And these are for Breakpoint
Actions, that's obvious, OK.

00:07:14.476 --> 00:07:17.296 A:middle
One more quick hit in case you
guys are not familiar with it.

00:07:17.296 --> 00:07:20.716 A:middle
There's a method you can call
called recursiveDescription

00:07:21.176 --> 00:07:23.236 A:middle
on View Hierarchy, and it
will give you back something

00:07:23.236 --> 00:07:23.866 A:middle
like this.

00:07:24.956 --> 00:07:26.696 A:middle
So you can actually
see the complete layout

00:07:26.696 --> 00:07:29.626 A:middle
of your View Hierarchy just
sitting there on the debugger

00:07:29.996 --> 00:07:36.436 A:middle
which is ridiculously useful,
so you should be using this.

00:07:36.496 --> 00:07:36.836 A:middle
OK, [inaudible].

00:07:37.516 --> 00:07:43.056 A:middle
[ Pause ]

00:07:43.556 --> 00:07:44.256 A:middle
How are we doing?

00:07:44.256 --> 00:07:45.176 A:middle
Are we learning stuff already?

00:07:45.176 --> 00:07:46.236 A:middle
Did somebody learn anything?

00:07:46.716 --> 00:07:47.996 A:middle
Hands. OK.

00:07:49.556 --> 00:07:50.736 A:middle
Just wait, there's more.

00:07:51.696 --> 00:07:54.286 A:middle
OK, so we're going to
work our way up now.

00:07:54.286 --> 00:07:55.986 A:middle
We're going to look
at Objective-C stuff.

00:07:57.076 --> 00:07:59.976 A:middle
So, just a quick refresh
on what Subscripting is.

00:07:59.976 --> 00:08:00.836 A:middle
I don't-- I think most

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.836 --> 00:08:02.426 A:middle
of you are probably
using it at this point.

00:08:02.426 --> 00:08:04.906 A:middle
But it was something
really nice added in--

00:08:05.076 --> 00:08:06.146 A:middle
recently to Objective-C.

00:08:06.496 --> 00:08:09.626 A:middle
So a typical use case here is
I have an NSMutableArray called

00:08:09.626 --> 00:08:10.296 A:middle
in indexedValues.

00:08:11.366 --> 00:08:13.856 A:middle
And using the new subscripting
syntax which is, you know,

00:08:13.986 --> 00:08:16.556 A:middle
very common to people from
other-- or very familiar,

00:08:16.556 --> 00:08:18.206 A:middle
I should say, to people
from other languages,

00:08:18.566 --> 00:08:20.006 A:middle
you can just use this
nice little bracket thing.

00:08:20.006 --> 00:08:21.626 A:middle
So don't have to say
like objectAtIndex,

00:08:21.626 --> 00:08:22.866 A:middle
you just say in bracket zero.

00:08:23.736 --> 00:08:25.486 A:middle
You can give values
out, set them.

00:08:25.486 --> 00:08:27.216 A:middle
That's all totally
straightforward.

00:08:27.936 --> 00:08:29.696 A:middle
And of course, you can do the
same thing with dictionary.

00:08:29.696 --> 00:08:31.186 A:middle
So that's just a little review.

00:08:31.186 --> 00:08:32.936 A:middle
That's not the actual tip.

00:08:32.936 --> 00:08:34.936 A:middle
The tip is that you can add
this to your own classes.

00:08:34.936 --> 00:08:37.346 A:middle
And I'm pretty sure most
people based on who I've talked

00:08:37.346 --> 00:08:38.836 A:middle
to don't actually even
know you can do this.

00:08:39.296 --> 00:08:41.035 A:middle
So, here's how it works.

00:08:41.035 --> 00:08:42.996 A:middle
I'm going to make up a fake
class here called Record Set

00:08:42.996 --> 00:08:45.216 A:middle
and I'm just going to
add a property here

00:08:45.216 --> 00:08:46.226 A:middle
called indexedValues.

00:08:46.226 --> 00:08:47.926 A:middle
You could have anything
[inaudible] as much as here,

00:08:48.476 --> 00:08:49.446 A:middle
and you got two methods.

00:08:49.506 --> 00:08:52.276 A:middle
So the first one is called
objectAtIndex subscript,

00:08:52.276 --> 00:08:54.486 A:middle
and you can actually see
this declared in NSArray.

00:08:54.486 --> 00:08:57.276 A:middle
And then the setter, you don't'
actually need the setter.

00:08:57.276 --> 00:08:58.156 A:middle
But if you want the setter,

00:08:58.216 --> 00:09:00.176 A:middle
you implement
setObject:atIndexedSubscript,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.736 --> 00:09:02.376 A:middle
and then I'll just close
up the class like that.

00:09:02.376 --> 00:09:04.256 A:middle
But it says-- oops, jumped
a little ahead there.

00:09:04.256 --> 00:09:04.616 A:middle
Oh that's OK.

00:09:05.036 --> 00:09:06.476 A:middle
But just those two
methods that back this,

00:09:06.476 --> 00:09:08.816 A:middle
and then the implementation is
just whatever you want to do

00:09:08.816 --> 00:09:10.086 A:middle
to get that object
to that index.

00:09:10.086 --> 00:09:14.306 A:middle
In this case, I've just looked
at my indexedValues property

00:09:14.396 --> 00:09:16.606 A:middle
and pulled out the value
and I set in the setter,

00:09:17.506 --> 00:09:19.466 A:middle
and here's how that
looks in use.

00:09:20.856 --> 00:09:22.956 A:middle
So I'm making-- just an instance

00:09:22.956 --> 00:09:24.336 A:middle
of my fake record
set class here.

00:09:24.336 --> 00:09:26.706 A:middle
And then after if
it's initiated,

00:09:26.706 --> 00:09:28.976 A:middle
I can just use this
subscripting syntax directly

00:09:28.976 --> 00:09:31.216 A:middle
on my class which
is pretty cool.

00:09:31.216 --> 00:09:32.266 A:middle
You could imagine
this would be--

00:09:32.266 --> 00:09:33.546 A:middle
I called it records
out here just to kind

00:09:33.546 --> 00:09:36.016 A:middle
of suggest it might be kind of
cool for like a dataset coming

00:09:36.016 --> 00:09:39.716 A:middle
from a database, that sort of
thing, you know, so I can set it

00:09:39.716 --> 00:09:43.016 A:middle
and get it, not super
rocket science.

00:09:43.356 --> 00:09:45.736 A:middle
And you can do it for
keyed subscripting too.

00:09:45.846 --> 00:09:48.616 A:middle
So, it's going to look very
similar to the last example.

00:09:48.616 --> 00:09:50.016 A:middle
In this case, I made
a person class.

00:09:50.366 --> 00:09:52.416 A:middle
And actually I'm backing it
this time by a dictionary.

00:09:52.416 --> 00:09:53.946 A:middle
But again, it doesn't
have to be backed

00:09:53.946 --> 00:09:54.936 A:middle
by a dictionary or an array.

00:09:54.936 --> 00:09:57.546 A:middle
It can be anything that you
need to accomplish a task.

00:09:58.146 --> 00:09:59.486 A:middle
So again, there's two methods,

00:09:59.486 --> 00:10:01.946 A:middle
objectKeyed [assumed spelling]
subscript instead of index,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:02.316 --> 00:10:03.976 A:middle
and setObject:
forKeyedSubscript.

00:10:04.086 --> 00:10:06.726 A:middle
And these also are declared in
NSDictionary if you just want

00:10:06.726 --> 00:10:08.396 A:middle
to copy and paste them.

00:10:08.396 --> 00:10:10.836 A:middle
So it's just those two methods
you need for the declaration.

00:10:11.396 --> 00:10:16.066 A:middle
And the implementation is
really not very surprising.

00:10:16.796 --> 00:10:19.966 A:middle
Again, you're just using the
regular dictionary method set

00:10:19.966 --> 00:10:20.746 A:middle
and get the objects.

00:10:21.546 --> 00:10:23.426 A:middle
So, that's pretty
straightforward.

00:10:23.876 --> 00:10:28.216 A:middle
And here's just a quick little
example of how it works.

00:10:28.216 --> 00:10:29.866 A:middle
You say, you know,
person favorite color,

00:10:29.866 --> 00:10:31.126 A:middle
and you might be kind
of wondering, "Well,

00:10:31.126 --> 00:10:32.996 A:middle
why not just say
person.favoritecolor?"

00:10:33.326 --> 00:10:35.546 A:middle
This is a literal string, but
you can imagine a scenario

00:10:35.546 --> 00:10:37.156 A:middle
where you're fetching
something from a service

00:10:37.156 --> 00:10:38.586 A:middle
or you're pulling
something out of a database,

00:10:38.806 --> 00:10:40.626 A:middle
and you may have actually
know those keys ahead of time,

00:10:40.956 --> 00:10:43.726 A:middle
so this will be a useful way
to kind of to simply, you know,

00:10:43.726 --> 00:10:45.376 A:middle
put those values and
get them back out.

00:10:46.196 --> 00:10:47.546 A:middle
So, that's pretty cool.

00:10:47.546 --> 00:10:49.316 A:middle
But, hey, you know what
would be really cool is

00:10:49.316 --> 00:10:51.346 A:middle
if you can actually use
both at the same time.

00:10:52.506 --> 00:10:55.866 A:middle
So, I heard some clapping
there, that's awesome.

00:10:55.866 --> 00:10:58.816 A:middle
So, I have just one more fake
class here called Ultra Record

00:10:58.816 --> 00:11:00.066 A:middle
Set because it's inappropriate.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.276 --> 00:11:03.586 A:middle
So, I've got indexedValues
and keyedValues, and this is--

00:11:03.766 --> 00:11:05.826 A:middle
you know, I bet you can see
where the plot is going here,

00:11:05.826 --> 00:11:07.886 A:middle
objectAtIndexedSubscript
I implement both

00:11:07.886 --> 00:11:10.086 A:middle
of the indexed ones, I
implement with the keyed one,

00:11:10.596 --> 00:11:12.746 A:middle
close it out, it all just
works, so you would expect.

00:11:12.886 --> 00:11:15.726 A:middle
And then, of course-- let
me get the clicker to work.

00:11:16.616 --> 00:11:19.416 A:middle
And of course, I'll just
make an instance of this

00:11:19.416 --> 00:11:20.796 A:middle
and I can just go ahead
and start setting,

00:11:20.796 --> 00:11:22.396 A:middle
getting those values the
same way I did before.

00:11:22.566 --> 00:11:25.446 A:middle
So, all that, you can
just go home and use that

00:11:25.446 --> 00:11:27.266 A:middle
and have fun with that.

00:11:28.096 --> 00:11:30.546 A:middle
OK. A few quick things,
so these are--

00:11:30.546 --> 00:11:32.336 A:middle
everything so far as
being kind of additive.

00:11:32.336 --> 00:11:33.076 A:middle
This is reductive.

00:11:33.076 --> 00:11:38.816 A:middle
So in versions of Xcode
prior to 4.3, and really just

00:11:38.816 --> 00:11:41.586 A:middle
like the entire lifetime
of C, if you wanted

00:11:41.586 --> 00:11:44.306 A:middle
to call a method inside of--
like a private method inside

00:11:44.306 --> 00:11:46.086 A:middle
of a file, you would have

00:11:46.086 --> 00:11:48.016 A:middle
to declare it somewhere
'cause the compiler would

00:11:48.016 --> 00:11:49.456 A:middle
like somehow not be
able to figure it out.

00:11:49.456 --> 00:11:51.616 A:middle
But guess what, since Xcode 4.3,

00:11:51.616 --> 00:11:52.936 A:middle
you actually don't
need this anymore.

00:11:53.256 --> 00:11:56.016 A:middle
So, if you have a private
method that you're calling

00:11:56.016 --> 00:11:58.186 A:middle
from within the same file,
you don't need to declare it.

00:11:58.186 --> 00:12:02.206 A:middle
The compiler will figure
that out, so that's good.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:02.396 --> 00:12:04.726 A:middle
And this is-- maybe more of
you are familiar with this,

00:12:04.726 --> 00:12:06.666 A:middle
but since Xcode 4.4, you would--

00:12:06.696 --> 00:12:08.006 A:middle
you can of course
declare properties.

00:12:08.376 --> 00:12:10.826 A:middle
And then in earlier versions
of Xcode and Objective-C,

00:12:11.216 --> 00:12:13.686 A:middle
you would then synthesize the
accessor if you wanted to set

00:12:13.686 --> 00:12:14.736 A:middle
and get those values
automatically,

00:12:14.736 --> 00:12:16.366 A:middle
if you want the compiler to
make the accessors for you.

00:12:16.366 --> 00:12:19.636 A:middle
Since Xcode 4.4, you don't
even need this anymore.

00:12:20.186 --> 00:12:24.746 A:middle
So, go delete all that, we
did/ so I recommend that,

00:12:24.746 --> 00:12:25.266 A:middle
[inaudible] your code.

00:12:25.266 --> 00:12:29.176 A:middle
OK, so as I promised,
we pulled Mattt Thompson

00:12:29.176 --> 00:12:31.796 A:middle
out from the NSHipster hole
or whatever it's called,

00:12:31.796 --> 00:12:34.406 A:middle
NSHipster Cave, I'm not
sure what it's called.

00:12:34.406 --> 00:12:37.326 A:middle
And he said he would come up
and show off some cool things.

00:12:37.326 --> 00:12:38.926 A:middle
So, I'm going to
bring Mattt out.

00:12:39.476 --> 00:12:39.896 A:middle
Thank you.

00:12:40.516 --> 00:12:42.546 A:middle
[ Applause &amp; Inaudible Remark ]

00:12:43.046 --> 00:12:44.946 A:middle
&gt;&gt; Hey everybody.

00:12:46.086 --> 00:12:46.586 A:middle
Good morning.

00:12:47.636 --> 00:12:49.976 A:middle
My name is Mattt Thompson
and I am an NSHipster.

00:12:49.976 --> 00:12:52.226 A:middle
And today, I'm very
excited to show you some

00:12:52.226 --> 00:12:53.966 A:middle
of those Xcode tips that
Scott just told us about,

00:12:53.966 --> 00:12:56.566 A:middle
and my favorite new
addition to Xcode,

00:12:56.836 --> 00:12:57.976 A:middle
something called Instance Type.

00:12:58.726 --> 00:13:01.106 A:middle
So, let's switch over to this.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:03.276 --> 00:13:04.396 A:middle
All right, you can see code.

00:13:04.396 --> 00:13:05.996 A:middle
All right, this is a
very simple project.

00:13:06.896 --> 00:13:08.296 A:middle
We have an employee class.

00:13:08.886 --> 00:13:13.036 A:middle
Well actually, let's use Open
Quickly employee.h. There we go,

00:13:13.036 --> 00:13:13.626 A:middle
pretty nice.

00:13:13.626 --> 00:13:17.226 A:middle
We can also use our assistant
things, so we can see the .h

00:13:17.226 --> 00:13:18.486 A:middle
and .m on the same view.

00:13:18.766 --> 00:13:20.356 A:middle
Pretty simple, we have
a name and a salary.

00:13:20.666 --> 00:13:22.846 A:middle
But here, we have
a common pattern.

00:13:22.846 --> 00:13:25.296 A:middle
It's a class constructor,
convenience method

00:13:25.576 --> 00:13:27.686 A:middle
that returns an instance

00:13:27.736 --> 00:13:30.806 A:middle
of an object initialize
with, in this case, a name.

00:13:30.806 --> 00:13:33.936 A:middle
This is just a short-hand
for alloc-init and setName.

00:13:34.496 --> 00:13:36.656 A:middle
The thing here though
is that we have ID

00:13:36.656 --> 00:13:38.266 A:middle
as being the return type.

00:13:38.566 --> 00:13:40.656 A:middle
So, let's kind of
illustrate what kind

00:13:40.656 --> 00:13:42.686 A:middle
of problems you can
get into with that.

00:13:42.776 --> 00:13:48.446 A:middle
We'll go to main.m. All right,
let's say we have employee,

00:13:48.916 --> 00:13:52.316 A:middle
employee with name, and I'll
employ myself, all right.

00:13:53.756 --> 00:13:55.736 A:middle
Here, you know, Xcode is--

00:13:55.736 --> 00:13:58.146 A:middle
doesn't have any sort of idea
what kind of objects returned.

00:13:58.146 --> 00:13:59.836 A:middle
It just knows that the
returned type is ID.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:00.196 --> 00:14:02.436 A:middle
So, I could do for
instance add object.

00:14:03.116 --> 00:14:05.456 A:middle
What? That doesn't
make any sense.

00:14:05.516 --> 00:14:07.596 A:middle
I can build and it's
not going to complain.

00:14:07.596 --> 00:14:08.566 A:middle
It's going to say it succeeds.

00:14:08.566 --> 00:14:10.146 A:middle
But of course if I build
and run, and I'm going

00:14:10.146 --> 00:14:12.196 A:middle
to get immediately,
you know, [inaudible].

00:14:12.196 --> 00:14:13.656 A:middle
That's terrible.

00:14:14.046 --> 00:14:15.536 A:middle
So how can we improve on this?

00:14:15.536 --> 00:14:18.786 A:middle
Well, up until recently, kind of
the suggested pattern might be

00:14:18.786 --> 00:14:23.626 A:middle
to let's say, OK, go
to-- back to employee.

00:14:24.646 --> 00:14:27.986 A:middle
Instead, return just an
instance of employee, right?

00:14:27.986 --> 00:14:29.586 A:middle
So we have our employee object.

00:14:29.706 --> 00:14:32.076 A:middle
We would change it in our
implementation as well.

00:14:32.606 --> 00:14:34.686 A:middle
And then if we go
back to main.m,

00:14:35.406 --> 00:14:38.336 A:middle
if we have this method
here, let's say add--

00:14:38.696 --> 00:14:40.076 A:middle
well, it's doing add observer.

00:14:40.076 --> 00:14:41.706 A:middle
So we know that it's
not responding.

00:14:41.706 --> 00:14:43.156 A:middle
It knows to narrow
down the selectors

00:14:43.156 --> 00:14:45.566 A:middle
to only NSObject and employee.

00:14:45.956 --> 00:14:49.836 A:middle
But let's say, you know, I
give myself a permission.

00:14:49.926 --> 00:14:51.276 A:middle
We have a manager class too.

00:14:51.716 --> 00:14:56.416 A:middle
So manager is a class, no
real implementation here,

00:14:56.416 --> 00:14:59.016 A:middle
just a new property,
subordinates

00:14:59.016 --> 00:15:02.886 A:middle
because I have subordinates, I'm
a powerful man now as a manager.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:03.006 --> 00:15:05.456 A:middle
So-- And again, we
don't have to, you know,

00:15:05.716 --> 00:15:07.266 A:middle
synthesize our property.

00:15:07.266 --> 00:15:12.736 A:middle
So back to main.m,
say it's manager,

00:15:13.086 --> 00:15:15.746 A:middle
so I'll make myself a
manager, and I do set--

00:15:16.096 --> 00:15:17.976 A:middle
well, setting salaries
is kind of cool.

00:15:18.016 --> 00:15:19.176 A:middle
I'll keep that one for later.

00:15:19.176 --> 00:15:22.116 A:middle
If I do set subordinates,
you know,

00:15:22.116 --> 00:15:23.986 A:middle
it's not completing, darn it.

00:15:24.396 --> 00:15:25.316 A:middle
No, no, OK.

00:15:25.386 --> 00:15:26.186 A:middle
So, what's going on here?

00:15:26.186 --> 00:15:28.576 A:middle
Well, manager-- employee
with name,

00:15:28.576 --> 00:15:30.196 A:middle
that's for turning an employee.

00:15:30.496 --> 00:15:31.916 A:middle
What I want is manager.

00:15:31.916 --> 00:15:34.496 A:middle
But if I went back to ID,
I'd still be, you know,

00:15:34.496 --> 00:15:35.446 A:middle
you understand where
this is going.

00:15:35.706 --> 00:15:38.016 A:middle
So, we have something
called Instance Type.

00:15:38.196 --> 00:15:42.996 A:middle
If we go back to employee, we
change this to Instance Type.

00:15:42.996 --> 00:15:46.106 A:middle
It's sort of the Goldilocks
kind of return type.

00:15:46.106 --> 00:15:49.786 A:middle
It is the flexibility of ID, but
you still get the type inference

00:15:49.786 --> 00:15:53.746 A:middle
of kind of doing an explicit
declaration of the return type.

00:15:54.076 --> 00:15:55.296 A:middle
So in this case, it's saying,

00:15:55.296 --> 00:15:58.096 A:middle
"I will return whatever
class kind of called this."

00:15:58.096 --> 00:16:02.126 A:middle
So, if we go back and make sure
to fill out our implementation

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:02.126 --> 00:16:09.436 A:middle
as well and then back to
main, now if we do this,

00:16:09.496 --> 00:16:10.936 A:middle
I can set subordinates.

00:16:10.936 --> 00:16:11.566 A:middle
Hey, check that out.

00:16:11.876 --> 00:16:15.116 A:middle
So Instance Type, it is
the perfect kind of way

00:16:15.116 --> 00:16:16.136 A:middle
to do class constructors.

00:16:16.136 --> 00:16:20.816 A:middle
And you'll notice that in the
API divs for iOS 7, Mac 10.9,

00:16:20.816 --> 00:16:21.806 A:middle
there's a lot of methods.

00:16:21.806 --> 00:16:24.196 A:middle
Although previous class
constructors that were using ID

00:16:24.426 --> 00:16:27.806 A:middle
like NSArray array, they're
all now using Instance Type.

00:16:27.806 --> 00:16:29.826 A:middle
So using your own
code, clean it up,

00:16:29.826 --> 00:16:31.506 A:middle
it's really a convenient
thing, and I'm going

00:16:31.506 --> 00:16:32.306 A:middle
to pass back to Scott.

00:16:32.306 --> 00:16:34.616 A:middle
We're going to talk about
some Foundation stuff.

00:16:34.616 --> 00:16:35.976 A:middle
So, yeah.

00:16:36.516 --> 00:16:40.516 A:middle
[ Applause ]

00:16:41.016 --> 00:16:41.736 A:middle
&gt;&gt; All right.

00:16:43.406 --> 00:16:45.116 A:middle
Learning things, all right, OK.

00:16:45.246 --> 00:16:46.426 A:middle
So, move on.

00:16:46.496 --> 00:16:48.906 A:middle
So we're going to
talk about Foundation.

00:16:48.906 --> 00:16:53.296 A:middle
So we've worked our way up
from Xcode and Objective-C,

00:16:53.296 --> 00:16:54.466 A:middle
and now we're getting
into the frameworks.

00:16:54.466 --> 00:16:56.766 A:middle
And for the most part,
everything we talk

00:16:56.766 --> 00:16:57.546 A:middle
about for the rest of the talk

00:16:57.546 --> 00:16:58.296 A:middle
and really everything
we've talked

00:16:58.296 --> 00:17:01.316 A:middle
about so far applies
to both iOS and OS X.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:01.316 --> 00:17:04.506 A:middle
So everything for iOS 7,
everything from Mavericks,

00:17:04.506 --> 00:17:05.396 A:middle
all these should apply.

00:17:05.396 --> 00:17:06.665 A:middle
So you can keep that in mind.

00:17:06.726 --> 00:17:08.556 A:middle
We have some iOS specific stuff

00:17:08.556 --> 00:17:10.336 A:middle
and AppKit specific
stuff at the end.

00:17:11.026 --> 00:17:12.195 A:middle
OK, so Foundation.

00:17:12.195 --> 00:17:12.876 A:middle
Let's jump on to this.

00:17:13.146 --> 00:17:14.665 A:middle
So, a lot of you I'm
sure are familiar

00:17:14.665 --> 00:17:16.656 A:middle
with Grand Central Dispatch.

00:17:16.705 --> 00:17:18.546 A:middle
This is great technology
we added a few years ago

00:17:18.546 --> 00:17:21.366 A:middle
that allows you to breakup
work into individual work units

00:17:21.366 --> 00:17:24.066 A:middle
and distribute them across
whatever resources are available

00:17:24.066 --> 00:17:25.286 A:middle
on the system, so
it's really great.

00:17:25.746 --> 00:17:28.646 A:middle
But I don't know how many
of you are actually familiar

00:17:28.646 --> 00:17:30.806 A:middle
or are using NSOperation.

00:17:30.806 --> 00:17:34.486 A:middle
It's this really great
object-oriented API that sits

00:17:34.486 --> 00:17:35.846 A:middle
on top of Grand Central
Dispatch.

00:17:35.846 --> 00:17:38.876 A:middle
So, all that really super cool
performance stuff that you get

00:17:38.876 --> 00:17:41.476 A:middle
from Grand Central
Dispatch, NSOperation offers

00:17:41.756 --> 00:17:43.756 A:middle
with all the Cocoa
Objective-C goodness.

00:17:44.176 --> 00:17:48.336 A:middle
So, in addition to
that really nice API,

00:17:49.426 --> 00:17:51.826 A:middle
it also has some features
that are unique to NSOperation

00:17:51.826 --> 00:17:54.286 A:middle
that you can't just-- you
can't get using just Grand

00:17:54.286 --> 00:17:55.006 A:middle
Central Dispatch.

00:17:55.006 --> 00:17:57.336 A:middle
So, for example, you
can cancel queues.

00:17:57.336 --> 00:18:00.126 A:middle
So, you can have stuff running
out there and you say Cancel

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:00.126 --> 00:18:01.526 A:middle
and it will stop running.

00:18:01.526 --> 00:18:03.406 A:middle
I mean if you're subclassing,
you have to do that in your side

00:18:03.406 --> 00:18:04.536 A:middle
as well, but it's
available to you.

00:18:04.536 --> 00:18:06.546 A:middle
You can also set max number

00:18:06.546 --> 00:18:09.166 A:middle
of concurrent operations
at the same time.

00:18:09.476 --> 00:18:12.206 A:middle
So, you might have tons and tons
of hardware and you say, "Well,

00:18:12.206 --> 00:18:14.566 A:middle
a hundred concurrent
operations is fine here.

00:18:14.566 --> 00:18:16.666 A:middle
But if you're stilling it down
to a mobile device, I might say,

00:18:16.666 --> 00:18:19.796 A:middle
well, maybe four
concurrent is good."

00:18:19.796 --> 00:18:21.506 A:middle
And you can set up dependencies,
and this is super cool.

00:18:21.506 --> 00:18:22.906 A:middle
I'm going to show you an
example of this in a second,

00:18:22.906 --> 00:18:26.156 A:middle
but you can actually take
different work units and say,

00:18:26.156 --> 00:18:28.386 A:middle
"I really do not want
this one to even start

00:18:28.936 --> 00:18:30.646 A:middle
until the thing it
depends on has completed."

00:18:31.126 --> 00:18:34.136 A:middle
And of course, I
mentioned Objective-C APIs,

00:18:34.136 --> 00:18:36.946 A:middle
so that means you can subclass
it, you can add categories

00:18:36.946 --> 00:18:39.306 A:middle
to NSOperation, and you can
use even key-value observing

00:18:39.306 --> 00:18:42.136 A:middle
to monitor the state of the
operations as they're running.

00:18:42.586 --> 00:18:45.916 A:middle
So, it's a great way to cleanup
your code and use for a--

00:18:45.916 --> 00:18:48.346 A:middle
sorry, build a more
robust source base.

00:18:49.566 --> 00:18:50.956 A:middle
So, here's a really
good example.

00:18:51.066 --> 00:18:52.916 A:middle
I'm sure a lot of you are
actually familiar with this app.

00:18:53.326 --> 00:18:56.246 A:middle
This is the WWDC
app running in iPad

00:18:56.246 --> 00:18:58.556 A:middle
and we used NSOperation
here in an interesting way

00:18:58.556 --> 00:19:00.356 A:middle
where you may actually
anticipate.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.356 --> 00:19:03.586 A:middle
So we use the Dependencies
feature in NSOperation

00:19:04.106 --> 00:19:07.676 A:middle
to specifically make sure that
any time we go do a request

00:19:08.016 --> 00:19:10.476 A:middle
to the server for things
like to fetch your favorites,

00:19:10.476 --> 00:19:12.266 A:middle
to find out which sessions
are currently available

00:19:12.266 --> 00:19:13.646 A:middle
or to get the information
on session,

00:19:14.136 --> 00:19:17.426 A:middle
we set up a dependent operation
that first authorizes the user.

00:19:17.696 --> 00:19:19.236 A:middle
So, anytime we go
out and do that feed,

00:19:19.316 --> 00:19:20.986 A:middle
before we actually
launch that operation,

00:19:20.986 --> 00:19:23.476 A:middle
we set a dependency
on the authorization.

00:19:23.716 --> 00:19:24.536 A:middle
So, here's what it looks like.

00:19:24.536 --> 00:19:26.906 A:middle
This is code, it's almost
directly from the source base,

00:19:26.906 --> 00:19:28.536 A:middle
so I cleaned it up a little
bit so it fits on the slides,

00:19:28.536 --> 00:19:29.846 A:middle
but it's pretty much
true to form.

00:19:30.496 --> 00:19:33.146 A:middle
So, just walking through
this, I have this method

00:19:33.146 --> 00:19:35.516 A:middle
that says addDependencies
ForAuthorizedOperation.

00:19:35.776 --> 00:19:38.426 A:middle
I'm creating these
authorization operations,

00:19:38.426 --> 00:19:39.206 A:middle
sounds like Dr. Seuss.

00:19:39.626 --> 00:19:41.536 A:middle
And then I add it
as a dependency

00:19:41.536 --> 00:19:42.736 A:middle
on the operation
being passed in.

00:19:42.736 --> 00:19:44.826 A:middle
So might be passed in, for
example, like set of favorite.

00:19:46.006 --> 00:19:48.766 A:middle
And then I add the off
operation-- author--

00:19:49.156 --> 00:19:51.986 A:middle
off operation to
the operation queue,

00:19:52.566 --> 00:19:54.116 A:middle
and that's all I
need to do here.

00:19:54.186 --> 00:19:56.966 A:middle
And then I have the zipper
method which is setFavorite.

00:19:57.476 --> 00:19:59.706 A:middle
I create that operation.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.426 --> 00:20:02.756 A:middle
I instantiate it with the
block I'm going to use.

00:20:03.456 --> 00:20:06.326 A:middle
Set favorite status, and then I
call this method I've defined.

00:20:06.646 --> 00:20:10.126 A:middle
So, if you think through
this, it means that anytime

00:20:10.126 --> 00:20:12.626 A:middle
that we want to go ahead and
do an operation, I just call,

00:20:12.626 --> 00:20:15.436 A:middle
set the method and says,
"Whatever you do, just make sure

00:20:15.436 --> 00:20:17.036 A:middle
that the user is authorized
before you go do this."

00:20:17.036 --> 00:20:19.436 A:middle
So it's a great way to
kind of cleanup that logic

00:20:19.436 --> 00:20:21.186 A:middle
and make all these independent
work units work together

00:20:21.186 --> 00:20:21.456 A:middle
for you.

00:20:22.706 --> 00:20:24.076 A:middle
And add to queue of course.

00:20:25.336 --> 00:20:27.956 A:middle
OK, NSExpression.

00:20:27.956 --> 00:20:31.726 A:middle
So, I'm sure a lot of you
are familiar with NSPredicate

00:20:31.916 --> 00:20:34.226 A:middle
which is used in Core Data and
it's used in different places

00:20:34.226 --> 00:20:35.546 A:middle
if you're filtering
arrays for example.

00:20:35.986 --> 00:20:37.966 A:middle
But NSPredicate is
actually built

00:20:37.966 --> 00:20:41.016 A:middle
up by individual constituent
parts in NSExpression.

00:20:41.536 --> 00:20:42.626 A:middle
And this thing is really cool.

00:20:42.626 --> 00:20:43.226 A:middle
I'm going to show you.

00:20:43.806 --> 00:20:46.376 A:middle
By the way, this is one of
these things, when we're working

00:20:46.376 --> 00:20:48.456 A:middle
on the session, there were
four of us working on it,

00:20:48.826 --> 00:20:51.526 A:middle
and every one of us,
when we were trying

00:20:51.526 --> 00:20:53.186 A:middle
to brainstorm the
ideas, we're like,

00:20:53.186 --> 00:20:54.476 A:middle
"I didn't know you
could do that."

00:20:54.586 --> 00:20:56.396 A:middle
And we've accessed the source
code and we didn't know that.

00:20:56.396 --> 00:20:58.326 A:middle
And this is one of those.

00:20:58.326 --> 00:21:01.686 A:middle
So, NSExpression can actually
parse mathematical expressions.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:02.466 --> 00:21:06.406 A:middle
So here, I've got 3
plus 5 times 4e10.

00:21:06.856 --> 00:21:09.376 A:middle
And if you've ever messed
around with this spotlight menu

00:21:09.376 --> 00:21:10.206 A:middle
in the upper right hand corner,

00:21:10.206 --> 00:21:12.006 A:middle
you've probably discovered you
can actually type mathematical

00:21:12.196 --> 00:21:12.936 A:middle
expressions in there.

00:21:13.096 --> 00:21:14.086 A:middle
So this is that same thing.

00:21:14.086 --> 00:21:15.346 A:middle
And this is actually
pretty flexible.

00:21:15.346 --> 00:21:17.156 A:middle
I was blown away when I
was trying it yesterday,

00:21:17.396 --> 00:21:19.676 A:middle
square root, you know,
syntax, all that kind of stuff.

00:21:19.826 --> 00:21:21.436 A:middle
So you just say NSExpression
WithFormat,

00:21:21.436 --> 00:21:24.066 A:middle
you pass in your text, of course
you can pass in a variable

00:21:24.066 --> 00:21:25.816 A:middle
if you want, I didn't in
this particular example.

00:21:26.256 --> 00:21:30.326 A:middle
But then you just evaluate
the value, print it out,

00:21:30.326 --> 00:21:32.036 A:middle
and then you get this
really, really big number.

00:21:32.036 --> 00:21:32.996 A:middle
So that's pretty cool.

00:21:32.996 --> 00:21:35.086 A:middle
So you can imagine, if you
wanted to have the user type

00:21:35.086 --> 00:21:36.896 A:middle
in some sort of mathematical
equation,

00:21:36.896 --> 00:21:38.746 A:middle
you wanted to show them the
results, so there's going

00:21:38.746 --> 00:21:40.566 A:middle
to be a bazillion math
apps now, I'm sure,

00:21:40.916 --> 00:21:42.956 A:middle
but that's actually
available to you if you want.

00:21:42.956 --> 00:21:44.306 A:middle
It's going to be
the new flashlight.

00:21:46.846 --> 00:21:50.656 A:middle
OK. So-- yeah, flashlight
fans, yeah.

00:21:53.006 --> 00:21:54.326 A:middle
It's a great app.

00:21:56.116 --> 00:22:01.136 A:middle
OK. So, in addition to
our friends, NSArray

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:01.136 --> 00:22:02.786 A:middle
and NSDictionary that
we're using all day long,

00:22:03.606 --> 00:22:06.566 A:middle
you should also be using
NSSet, NSOrderedSet.

00:22:06.566 --> 00:22:09.556 A:middle
And there's some very
specific scenarios

00:22:09.946 --> 00:22:10.856 A:middle
where they work really well.

00:22:10.926 --> 00:22:12.796 A:middle
If you're not familiar
NSSet, OrderedSet,

00:22:12.796 --> 00:22:14.836 A:middle
you don't really know the
details, basically one

00:22:14.836 --> 00:22:16.946 A:middle
of the key things they do is
they guarantee uniqueness.

00:22:16.946 --> 00:22:18.966 A:middle
So with an array
or a dictionary,

00:22:18.966 --> 00:22:21.956 A:middle
you can have multiple
instances of the same object or,

00:22:21.956 --> 00:22:25.256 A:middle
for example, like two NSNumbers
of the value of 2, you know,

00:22:25.676 --> 00:22:27.246 A:middle
you can have those
across the entire--

00:22:27.666 --> 00:22:29.856 A:middle
you know, multiple instances
of those across the collection.

00:22:30.196 --> 00:22:32.596 A:middle
But NSSet and OrderedSet
guarantees you'll have a unique

00:22:33.246 --> 00:22:34.706 A:middle
one instance of a
value throughout the

00:22:34.706 --> 00:22:35.336 A:middle
entire collection.

00:22:36.096 --> 00:22:38.016 A:middle
So, the other thing it
does that's really great

00:22:38.016 --> 00:22:41.486 A:middle
and in particular for NSSet
is if you need to check to see

00:22:41.486 --> 00:22:43.336 A:middle
if it-- like, for example, an
object has already been loaded

00:22:43.336 --> 00:22:46.526 A:middle
into memory so it uses as a
cache, checking for membership

00:22:46.526 --> 00:22:48.426 A:middle
in an NSSet is practically free.

00:22:48.716 --> 00:22:50.456 A:middle
So there's absolutely
no reason to not use it

00:22:50.456 --> 00:22:51.616 A:middle
for that sort of thing.

00:22:51.616 --> 00:22:54.326 A:middle
And I actually just talked to
somebody in the labs yesterday

00:22:54.326 --> 00:22:57.476 A:middle
and they were blown away
that this was so fast.

00:22:57.506 --> 00:22:58.726 A:middle
So this is really, really good.

00:22:59.036 --> 00:23:01.696 A:middle
And there's also something
interesting you can do

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:01.696 --> 00:23:03.776 A:middle
with set calculations
that are not available

00:23:03.776 --> 00:23:04.676 A:middle
on array and dictionary.

00:23:04.836 --> 00:23:05.856 A:middle
So here's an example.

00:23:05.856 --> 00:23:09.136 A:middle
You can do intersectsSet, so you
can take one set and another set

00:23:09.136 --> 00:23:10.336 A:middle
and see, you know,
do they intersect.

00:23:11.116 --> 00:23:12.916 A:middle
You can say, "Is this
is a complete subset

00:23:12.916 --> 00:23:15.376 A:middle
of the other set?"

00:23:15.576 --> 00:23:17.346 A:middle
You can do a -minusSet.

00:23:17.346 --> 00:23:20.456 A:middle
You take one set and just
remove the entire contents

00:23:20.456 --> 00:23:21.116 A:middle
of the other set.

00:23:21.116 --> 00:23:23.016 A:middle
And you can union them.

00:23:23.086 --> 00:23:24.766 A:middle
So this-- on the surface,
it says, "Yeah, yeah,

00:23:24.766 --> 00:23:26.076 A:middle
that's great," but
think about that.

00:23:26.296 --> 00:23:27.996 A:middle
That means that you don't
actually have to loop

00:23:27.996 --> 00:23:29.836 A:middle
through the arrays and do
all the stuff yourself.

00:23:29.836 --> 00:23:30.996 A:middle
You can convert them to sets.

00:23:31.336 --> 00:23:32.716 A:middle
You'll guarantee that
they're all unique.

00:23:33.046 --> 00:23:34.626 A:middle
And then when you've
actually run these operations,

00:23:34.626 --> 00:23:36.116 A:middle
you'll going get the final
set of the thing you need.

00:23:36.116 --> 00:23:37.056 A:middle
So this is really, really good.

00:23:37.306 --> 00:23:38.206 A:middle
The one thing just to keep

00:23:38.206 --> 00:23:40.966 A:middle
in mind is before you
go converting all your

00:23:40.966 --> 00:23:42.736 A:middle
NSMutableArrays to
NSOrderedSets,

00:23:42.896 --> 00:23:46.146 A:middle
NSMutableArray is
faster at adding objects.

00:23:46.386 --> 00:23:49.156 A:middle
So if you just need to add a
lot of objects, continue to use

00:23:49.156 --> 00:23:51.246 A:middle
that as MutableArray and you
can switch back and forth

00:23:51.246 --> 00:23:52.836 A:middle
when you need to filter them.

00:23:53.816 --> 00:23:54.726 A:middle
All right.

00:23:55.416 --> 00:23:56.916 A:middle
Oh also, I just want to mention,

00:23:57.136 --> 00:23:59.246 A:middle
there was a talk right
before this one, I don't know

00:23:59.246 --> 00:24:00.916 A:middle
if you were in the room, but
you should catch on video

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:00.916 --> 00:24:02.416 A:middle
if you didn't see
it, Designing Code

00:24:02.416 --> 00:24:04.136 A:middle
for Performance,
so Quinn gave that.

00:24:04.136 --> 00:24:08.116 A:middle
And it dives into how to use the
Foundation collection classes

00:24:08.446 --> 00:24:10.096 A:middle
to have really, really
fast codes.

00:24:10.096 --> 00:24:12.836 A:middle
So you should definitely
check that out.

00:24:12.836 --> 00:24:14.726 A:middle
OK, so a few quick hits here

00:24:14.726 --> 00:24:16.466 A:middle
for different collection things
you may not be familiar with.

00:24:16.466 --> 00:24:18.076 A:middle
We'll just kind to go
through this real fast.

00:24:18.476 --> 00:24:19.556 A:middle
I see 11 on this slide.

00:24:19.556 --> 00:24:21.196 A:middle
It really should
count for like 15, so.

00:24:21.706 --> 00:24:23.786 A:middle
So, reverse arrays
inline quickly.

00:24:24.326 --> 00:24:26.126 A:middle
So I just have an
array of numbers here

00:24:26.236 --> 00:24:28.316 A:middle
and if I call
reverseObjectEnumerator,

00:24:28.316 --> 00:24:29.776 A:middle
usually when you get an
enumerator from array,

00:24:29.776 --> 00:24:31.086 A:middle
you're going to look through it.

00:24:31.086 --> 00:24:33.056 A:middle
But in this case, I'm just sort
of borrowing one little method

00:24:33.056 --> 00:24:36.816 A:middle
from it which is
numbers.reverseObjectEnumerator,

00:24:36.816 --> 00:24:39.266 A:middle
we should get the reverse order,
and then I just call allObjects.

00:24:39.266 --> 00:24:40.676 A:middle
So we don't actually have
to loop through that.

00:24:40.676 --> 00:24:43.026 A:middle
I'll just get the complete
set of reversed object.

00:24:43.026 --> 00:24:43.596 A:middle
So that's good.

00:24:43.966 --> 00:24:47.046 A:middle
A lot of times, when you're
implementing a method,

00:24:47.096 --> 00:24:49.726 A:middle
you're passed in some sort
of value and need them mutate

00:24:49.726 --> 00:24:52.186 A:middle
that array or you need to
mutate that dictionary.

00:24:52.626 --> 00:24:56.736 A:middle
And a common pattern that I see
is you may want to check to see

00:24:56.736 --> 00:24:58.626 A:middle
if that value you're
being passed in is nil

00:24:58.626 --> 00:25:00.506 A:middle
because if you call
mutable copy a nil,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:00.506 --> 00:25:01.746 A:middle
you're going to get nil back.

00:25:01.746 --> 00:25:02.626 A:middle
So that's not really helpful.

00:25:02.996 --> 00:25:04.476 A:middle
So instead of doing that,

00:25:04.476 --> 00:25:07.996 A:middle
you can just say
NSMutableArray arrayWithArray.

00:25:07.996 --> 00:25:09.606 A:middle
And even if it's
nil, you're going

00:25:09.606 --> 00:25:10.596 A:middle
to get a MutableArray back.

00:25:10.596 --> 00:25:12.616 A:middle
And that's a case for most
of the collections classes,

00:25:12.956 --> 00:25:15.876 A:middle
dictionaries, NSSet,
OrderedSet, OK.

00:25:16.666 --> 00:25:18.406 A:middle
Another scenario
you might yourself

00:25:18.406 --> 00:25:21.146 A:middle
in is you might be passed
in one of any number

00:25:21.146 --> 00:25:22.916 A:middle
of collection objects.

00:25:23.296 --> 00:25:24.596 A:middle
So for example, you
might have a method

00:25:24.596 --> 00:25:26.676 A:middle
that takes a dictionary
or an array.

00:25:26.676 --> 00:25:28.936 A:middle
And there's sort of this
question about, "Well, you know,

00:25:28.936 --> 00:25:29.896 A:middle
how do I declare that?

00:25:29.896 --> 00:25:32.306 A:middle
Do I-- is it like an id or
an id component to NSObject?"

00:25:32.756 --> 00:25:35.676 A:middle
Well, what you can do is
just specify id conform

00:25:35.676 --> 00:25:36.916 A:middle
to NSFastEnumeration.

00:25:36.916 --> 00:25:39.306 A:middle
The only thing you need to do is
actually just iterate over it.

00:25:39.546 --> 00:25:40.956 A:middle
This is absolutely
perfect for that.

00:25:40.996 --> 00:25:42.986 A:middle
So that can be almost any
collection class that we have.

00:25:43.846 --> 00:25:47.226 A:middle
And, interestingly enough, you
can do this on your own class.

00:25:47.546 --> 00:25:49.466 A:middle
So again, if you're thinking
about that record example

00:25:49.466 --> 00:25:51.456 A:middle
that I showed you before and
you want to actually enumerate

00:25:51.456 --> 00:25:54.146 A:middle
through them, all you have to
do is implement this one method,

00:25:54.486 --> 00:25:58.066 A:middle
countByEnumeratingWithState,
objects count.

00:25:58.676 --> 00:26:00.766 A:middle
And it turns out that
the implementation is

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:00.766 --> 00:26:01.496 A:middle
incredibly simple.

00:26:01.496 --> 00:26:03.246 A:middle
If you have an array, you
just call that on the array.

00:26:04.516 --> 00:26:07.836 A:middle
So, there you go.

00:26:07.836 --> 00:26:13.846 A:middle
So, now, I would like
to bring up Mattt.

00:26:13.846 --> 00:26:16.986 A:middle
And you probably--
when you saw his demo,

00:26:16.986 --> 00:26:19.026 A:middle
you might have been thinking,
"Yeah, yeah, I knew that."

00:26:19.256 --> 00:26:21.366 A:middle
He's going to show you
some stuff I guarantee you,

00:26:21.366 --> 00:26:21.826 A:middle
you do not know.

00:26:21.826 --> 00:26:23.286 A:middle
I did not know it,
none of us know it.

00:26:23.346 --> 00:26:24.736 A:middle
So, he'll bring that back up.

00:26:25.966 --> 00:26:28.266 A:middle
&gt;&gt; All right, so Foundation
and Core Foundation,

00:26:28.266 --> 00:26:31.176 A:middle
two of my favorite pieces of
software in the whole world.

00:26:31.176 --> 00:26:33.176 A:middle
Let's talk about
some obscure stuff.

00:26:33.466 --> 00:26:34.386 A:middle
Well, first of all, let's--

00:26:34.386 --> 00:26:37.576 A:middle
at the outset, let's say
Objective-C really sits

00:26:37.576 --> 00:26:41.186 A:middle
at the interface between the
procedural world of C, you know,

00:26:41.186 --> 00:26:43.046 A:middle
the really strong foundations,
but it also combines

00:26:43.046 --> 00:26:47.016 A:middle
that with the object-oriented
paradigm inspired by small talk.

00:26:47.376 --> 00:26:50.286 A:middle
And right at that interface
is a class and its value.

00:26:50.656 --> 00:26:53.516 A:middle
You might be more familiar with
its subclass, NSNumber which is

00:26:53.516 --> 00:26:56.996 A:middle
in an object representation
for things like ints, floats,

00:26:57.326 --> 00:26:58.786 A:middle
doubles, and Booleans.

00:26:59.026 --> 00:27:01.986 A:middle
But NSValue, you know, still
has a few tricks up its sleeve.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:01.986 --> 00:27:03.966 A:middle
For instance, it can store
all those scalar values

00:27:03.966 --> 00:27:06.456 A:middle
but it can also store
things like structs.

00:27:06.456 --> 00:27:09.706 A:middle
Specifically, you might be
working with structs like ranges

00:27:09.706 --> 00:27:11.966 A:middle
or point, sizes and rects.

00:27:12.346 --> 00:27:14.046 A:middle
And then one of the
other things that it does

00:27:14.046 --> 00:27:15.676 A:middle
that actually very
few people know about,

00:27:15.676 --> 00:27:17.726 A:middle
it can also return
unretained references,

00:27:17.956 --> 00:27:19.796 A:middle
and I'll show you an example of
how you might use that later.

00:27:21.036 --> 00:27:22.856 A:middle
So, another tip.

00:27:23.226 --> 00:27:25.916 A:middle
Let's say you're trying to
construct an array and you want

00:27:25.916 --> 00:27:27.786 A:middle
to have a whole bunch
of different, you know,

00:27:27.786 --> 00:27:30.306 A:middle
C-values in it, so
this is how you do it.

00:27:30.306 --> 00:27:33.476 A:middle
So you have a MutableArray
using the subscripting here,

00:27:33.476 --> 00:27:35.036 A:middle
just adding, you know, values,

00:27:35.036 --> 00:27:36.996 A:middle
valueWithPoint passing
a CGPoint,

00:27:37.326 --> 00:27:39.986 A:middle
valueWithRange that's
passing in an NSRange.

00:27:40.766 --> 00:27:42.506 A:middle
Let's say you have a custom
struct here, you know,

00:27:42.556 --> 00:27:44.336 A:middle
if you don't UIColor
for some reason,

00:27:44.336 --> 00:27:46.766 A:middle
you just want this
RGB triple, right?

00:27:46.856 --> 00:27:49.946 A:middle
You have red, green and blue
values, and you have an instance

00:27:49.946 --> 00:27:53.226 A:middle
to that, you can encode
that and put into an array

00:27:53.226 --> 00:27:57.896 A:middle
by doing NSValue valueWithBytes
passing a pointer to the color,

00:27:58.246 --> 00:28:02.016 A:middle
and then Objective-C
type using the @encode

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:02.366 --> 00:28:05.076 A:middle
and then the type of the struct.

00:28:07.206 --> 00:28:09.736 A:middle
Whenever you're using
NSMutableDictionary,

00:28:09.736 --> 00:28:12.266 A:middle
another kind of collection,
you know, it's simple.

00:28:12.266 --> 00:28:13.746 A:middle
You do a Key equals Value.

00:28:13.916 --> 00:28:16.116 A:middle
That's works really well
whenever Key conforms the

00:28:16.246 --> 00:28:18.896 A:middle
NSCopying and because
NSMutableDictionary copies

00:28:18.896 --> 00:28:19.456 A:middle
its keys.

00:28:19.926 --> 00:28:22.286 A:middle
That does not work so
well for some objects

00:28:22.286 --> 00:28:23.936 A:middle
that don't conform to NSCopying.

00:28:23.936 --> 00:28:25.826 A:middle
And you might not be
able to think of any,

00:28:25.826 --> 00:28:27.996 A:middle
off the top of your head,
but certainly if you'd gotten

00:28:27.996 --> 00:28:29.876 A:middle
into a situation where
you're trying to do this

00:28:30.096 --> 00:28:32.326 A:middle
and you're trying to figure
out why this doesn't work,

00:28:32.326 --> 00:28:33.526 A:middle
this is a lifesaver right here,

00:28:33.656 --> 00:28:36.086 A:middle
NSValue
valueWithNonretainedObject,

00:28:36.086 --> 00:28:38.006 A:middle
you pass it in, it will
just work magically,

00:28:38.256 --> 00:28:40.606 A:middle
just assume that the object is
being owned by something else,

00:28:40.826 --> 00:28:42.096 A:middle
everything works
just marvelously.

00:28:42.726 --> 00:28:44.136 A:middle
Let's talk about
Key-Value Coding.

00:28:44.506 --> 00:28:46.606 A:middle
Key-Value Coding is
another really cool feature

00:28:46.606 --> 00:28:47.446 A:middle
of Foundation.

00:28:48.206 --> 00:28:49.146 A:middle
You know it, you love it.

00:28:49.276 --> 00:28:52.916 A:middle
valueForKey, name, it's an
equivalent to emloyee.name.

00:28:52.916 --> 00:28:54.976 A:middle
The thing about Key-Value
Coding, of course, is it's a way

00:28:54.976 --> 00:28:58.706 A:middle
to dynamically set and get
properties and also, you know,

00:28:58.706 --> 00:28:59.936 A:middle
traverse object crafts too.

00:28:59.936 --> 00:29:03.246 A:middle
So, valueForKeyPath,
manager.name, that's equivalent

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:03.246 --> 00:29:05.216 A:middle
to employee.manager.name.

00:29:05.276 --> 00:29:06.246 A:middle
All right, you guys
already know that.

00:29:06.246 --> 00:29:06.836 A:middle
That's not the tip.

00:29:06.836 --> 00:29:11.296 A:middle
The tip here is that you can
also do this on collections

00:29:11.296 --> 00:29:15.336 A:middle
and by passing in
Key-Value Coding, you know,

00:29:15.336 --> 00:29:17.986 A:middle
doing that on a collection,
you'll actually get the result

00:29:18.426 --> 00:29:19.736 A:middle
for each objective
in the collection.

00:29:19.736 --> 00:29:21.916 A:middle
So here, we have an array of
words, Alpha, Bravo, Charlie.

00:29:22.436 --> 00:29:24.786 A:middle
Let's do valueForKey,
uppercaseString.

00:29:24.816 --> 00:29:27.036 A:middle
You get an array of
the uppercased words.

00:29:27.806 --> 00:29:29.696 A:middle
Or, let's say you do length.

00:29:30.696 --> 00:29:32.046 A:middle
This is actually
really neat, right?

00:29:32.046 --> 00:29:34.426 A:middle
So, Key-Value Coding
automatically boxes

00:29:34.426 --> 00:29:37.006 A:middle
and unboxes values into
their object representation.

00:29:37.316 --> 00:29:39.536 A:middle
Length normally returns
an NSUInteger.

00:29:39.886 --> 00:29:42.936 A:middle
But in this case, you can see
that we have the @5, @5, @7.

00:29:42.936 --> 00:29:45.396 A:middle
We have NSNumber
representations of that.

00:29:45.636 --> 00:29:48.336 A:middle
So, really useful, you stay
within the object paradigm.

00:29:50.676 --> 00:29:52.566 A:middle
Another cool thing
you can do here.

00:29:52.566 --> 00:29:55.646 A:middle
So, it's often the case
that you will be making app,

00:29:55.646 --> 00:29:57.636 A:middle
especially like iOS apps,
you're going to be interfacing

00:29:57.636 --> 00:30:00.596 A:middle
with some sort of web service
API and maybe encoding,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.766 --> 00:30:03.516 A:middle
you know, serializing values
from JSON into an object.

00:30:03.856 --> 00:30:04.546 A:middle
Instead of doing

00:30:04.546 --> 00:30:06.666 A:middle
that boilerplateself.name=json
[assumed spelling]

00:30:06.666 --> 00:30:08.326 A:middle
valueForKeyName,
you can use this

00:30:08.326 --> 00:30:10.166 A:middle
dictionaryWithValuesForKeys.

00:30:10.856 --> 00:30:12.686 A:middle
And you can-- you know,
it's kind of a shortcut

00:30:12.686 --> 00:30:14.386 A:middle
for all that-- or
sorry, that's the way

00:30:14.386 --> 00:30:15.196 A:middle
to serialize it, I guess.

00:30:15.196 --> 00:30:17.786 A:middle
So, you can create a
dictionary representation

00:30:17.786 --> 00:30:19.816 A:middle
of an object using
dictionaryWithValuesForKeys,

00:30:19.816 --> 00:30:22.376 A:middle
the keys that you want to
serialize out, maybe send back

00:30:22.376 --> 00:30:24.176 A:middle
to that web service
and then pass

00:30:24.176 --> 00:30:27.196 A:middle
in that resulting NSDictionary
to NSJSONSerialization.

00:30:27.586 --> 00:30:29.556 A:middle
And then that
setValuesForKeysWithDictionary,

00:30:29.556 --> 00:30:30.236 A:middle
that's where you'll be able

00:30:30.236 --> 00:30:31.686 A:middle
to serialize your
object really quickly.

00:30:32.376 --> 00:30:32.926 A:middle
Really neat.

00:30:32.926 --> 00:30:33.896 A:middle
That's just assuming, of course,

00:30:33.896 --> 00:30:37.286 A:middle
parity between like your JSON
keys and your property names.

00:30:37.556 --> 00:30:40.836 A:middle
Let's talk about KVC
Collection Operators.

00:30:40.836 --> 00:30:41.906 A:middle
You might have seen
this in the wild,

00:30:41.906 --> 00:30:43.876 A:middle
but may not have had a
chance to use these yet.

00:30:44.506 --> 00:30:47.786 A:middle
So the most common one you
might see is valueForKeyPath

00:30:47.786 --> 00:30:49.946 A:middle
and then you say, "Here's
a collection colleagues,"

00:30:50.116 --> 00:30:50.516 A:middle
and then .

00:30:50.966 --> 00:30:55.046 A:middle
@count. Some other examples
of this you might have,

00:30:55.046 --> 00:30:58.106 A:middle
the @avg.salary or
the max.temperature.

00:30:58.626 --> 00:31:01.426 A:middle
So there are three kinds
of collection operators

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:01.426 --> 00:31:03.146 A:middle
and they are kind of
distinguished based

00:31:03.146 --> 00:31:04.636 A:middle
on the different
return types they have.

00:31:04.926 --> 00:31:07.336 A:middle
Simple collection
operators return objects.

00:31:09.026 --> 00:31:10.926 A:middle
Object operators return arrays.

00:31:11.226 --> 00:31:13.446 A:middle
Maybe a count or two,
but it'll all make sense.

00:31:13.446 --> 00:31:16.276 A:middle
Array and set operators
return either arrays or sets.

00:31:17.116 --> 00:31:18.536 A:middle
And the syntax for
this is something

00:31:18.536 --> 00:31:20.286 A:middle
that you might find
yourself looking often.

00:31:20.286 --> 00:31:22.206 A:middle
I know I have this
bookmarked in my documentation.

00:31:22.726 --> 00:31:25.646 A:middle
You have on the Left Key
Path, however to get--

00:31:25.646 --> 00:31:28.116 A:middle
the way you get to
the collection itself.

00:31:28.116 --> 00:31:31.186 A:middle
So in the middle,
you have the dot--

00:31:31.346 --> 00:31:32.936 A:middle
these are all separated by dots.

00:31:32.976 --> 00:31:35.446 A:middle
You have @ and then the
collectionOperator itself.

00:31:35.936 --> 00:31:38.346 A:middle
And then on the right, if you
want any aggregate properties

00:31:38.386 --> 00:31:40.126 A:middle
on the result of the
collectionOperator,

00:31:40.436 --> 00:31:41.266 A:middle
you both head to the right.

00:31:41.806 --> 00:31:43.116 A:middle
Again, you'll be
looking this up often.

00:31:43.116 --> 00:31:45.146 A:middle
It's just one of those
things that it takes a while

00:31:45.146 --> 00:31:45.786 A:middle
to get into your head.

00:31:47.346 --> 00:31:49.236 A:middle
All right, so Simple
Collection Operators.

00:31:49.236 --> 00:31:52.416 A:middle
We have, again, count that'll
give you the number of elements

00:31:52.486 --> 00:31:55.306 A:middle
in your collection
represented by an NSNumber.

00:31:56.346 --> 00:31:57.806 A:middle
You also have sum and average.

00:31:57.806 --> 00:32:01.256 A:middle
So for collections of NSNumbers,
it'll give you the, you know,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:01.256 --> 00:32:05.366 A:middle
arithmetic sum and average of
the numbers in that collection.

00:32:06.226 --> 00:32:07.536 A:middle
I think the two most useful

00:32:07.616 --> 00:32:09.866 A:middle
and interesting ones
are max and min.

00:32:10.126 --> 00:32:12.076 A:middle
These don't work
just on numbers.

00:32:12.076 --> 00:32:14.526 A:middle
They work on any object
that implements compare.

00:32:14.526 --> 00:32:17.836 A:middle
So you can have the max
and min date, or the max

00:32:17.836 --> 00:32:19.976 A:middle
and min weather, or the
max and min whatever.

00:32:20.096 --> 00:32:21.766 A:middle
It's a really cool
and convenient thing

00:32:21.766 --> 00:32:27.416 A:middle
that you can add to your own
objects and take advantage of.

00:32:27.796 --> 00:32:29.306 A:middle
We have Object Operators.

00:32:29.386 --> 00:32:31.856 A:middle
We have unionOfObjects and
distinctUnionOfObjects.

00:32:32.126 --> 00:32:32.876 A:middle
The difference here is

00:32:32.876 --> 00:32:36.496 A:middle
that distinctUnionOfObjects
will unique the resulting array.

00:32:36.856 --> 00:32:40.036 A:middle
An example of this in
code, let's say you want

00:32:40.036 --> 00:32:41.986 A:middle
to remove all the
duplicate values in array

00:32:41.986 --> 00:32:44.446 A:middle
without actually passing
it through an NSSet first.

00:32:44.676 --> 00:32:47.876 A:middle
The way you do that is that
you do array valueForKeyPath:@

00:32:48.076 --> 00:32:50.546 A:middle
"distinctUnionOfObjects.self".

00:32:51.076 --> 00:32:52.246 A:middle
And that's actually a cool tip.

00:32:52.246 --> 00:32:55.686 A:middle
You can pass self in for
different situations and kind

00:32:55.686 --> 00:32:59.316 A:middle
of use these different operators
on collection, you know, itself.

00:32:59.696 --> 00:33:03.056 A:middle
So, finally, we have
Array and Set Operators.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:03.456 --> 00:33:05.786 A:middle
You have unionOfArrays,
distinctUnionOfArrays,

00:33:05.786 --> 00:33:07.536 A:middle
again just like the
previous one,

00:33:07.726 --> 00:33:09.276 A:middle
and then distinctUnionOfSets.

00:33:09.626 --> 00:33:11.396 A:middle
Sets, of course,
everything is distinct.

00:33:11.396 --> 00:33:13.836 A:middle
So there's no non-distinct
version of your--

00:33:13.836 --> 00:33:16.436 A:middle
and the return type is going
to depend on what you pass in,

00:33:16.536 --> 00:33:19.616 A:middle
arrays for arrays
and sets for sets.

00:33:20.216 --> 00:33:22.056 A:middle
Let's kind of illustrate,
this is an example.

00:33:22.056 --> 00:33:25.396 A:middle
This is for flattening out
values within sub-collection.

00:33:25.396 --> 00:33:27.896 A:middle
So let's say I have an array
with two color schemes here,

00:33:27.896 --> 00:33:29.436 A:middle
some beautiful color schemes.

00:33:29.436 --> 00:33:32.656 A:middle
If I do valueForKey
unionOfArrays,

00:33:32.886 --> 00:33:33.616 A:middle
it'll look like that.

00:33:33.656 --> 00:33:36.826 A:middle
So it's taking the two arrays--
the subarrays and putting them

00:33:36.826 --> 00:33:38.796 A:middle
into one flat array values.

00:33:39.296 --> 00:33:41.476 A:middle
Or if I do
@distinctUnionOfArrays,

00:33:41.736 --> 00:33:44.026 A:middle
we now just have the four
distinct colors in an array.

00:33:44.026 --> 00:33:47.786 A:middle
Let's talk about NSDataDetector.

00:33:48.136 --> 00:33:50.326 A:middle
So in Mail, you might notice

00:33:50.326 --> 00:33:52.666 A:middle
that whenever you have an email
message with certain kinds

00:33:52.666 --> 00:33:55.226 A:middle
of information, that
information will be highlighted.

00:33:55.536 --> 00:33:56.826 A:middle
And by clicking on
that information,

00:33:56.826 --> 00:33:59.626 A:middle
you can very easily add
stuff like a phone number

00:33:59.626 --> 00:34:02.426 A:middle
to your address book or
a date to your calendar.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:02.556 --> 00:34:03.416 A:middle
Very convenient.

00:34:03.606 --> 00:34:04.856 A:middle
The coolest thing about this is

00:34:04.856 --> 00:34:08.065 A:middle
that NSDataDetector is
underneath the hood of all this

00:34:08.065 --> 00:34:09.966 A:middle
and you can add that to
your application too.

00:34:10.525 --> 00:34:13.496 A:middle
So NSDataDetector,
it's the sub-class

00:34:13.496 --> 00:34:14.826 A:middle
of NSRegularExpression.

00:34:15.126 --> 00:34:17.985 A:middle
But instead of passing in
kind of arbitrary formats,

00:34:18.235 --> 00:34:20.346 A:middle
it has kind of these
pre-calculated, really,

00:34:20.346 --> 00:34:23.815 A:middle
really complex regular
expressions to find dates,

00:34:24.076 --> 00:34:26.726 A:middle
you know, relative dates or, you
know, any sort of date format,

00:34:27.306 --> 00:34:32.295 A:middle
addresses, links, both URLs and
email addresses, phone numbers,

00:34:32.295 --> 00:34:33.985 A:middle
and transit information,
like flight numbers.

00:34:33.985 --> 00:34:35.976 A:middle
So this is really, really cool.

00:34:36.406 --> 00:34:38.795 A:middle
Let's show how this
works in example.

00:34:38.795 --> 00:34:39.786 A:middle
So we have this string, right?

00:34:39.786 --> 00:34:42.766 A:middle
We have obviously an address
in there and a phone number,

00:34:44.186 --> 00:34:45.466 A:middle
and we have this error.

00:34:45.466 --> 00:34:48.226 A:middle
We're going to pass it in when
we initialize Data Detector.

00:34:48.226 --> 00:34:51.116 A:middle
And you see that when we have
initialized this, we're passing

00:34:51.116 --> 00:34:53.136 A:middle
in the different types of
information to look for.

00:34:53.585 --> 00:34:55.826 A:middle
When you're creating this in
your application, you only want

00:34:55.826 --> 00:34:57.356 A:middle
to pass in the types
that you're interested

00:34:57.356 --> 00:34:59.576 A:middle
in because each additional
type will incur a little bit

00:34:59.576 --> 00:35:00.386 A:middle
more processing.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:00.496 --> 00:35:01.956 A:middle
So in this case, we're
only looking for--

00:35:02.426 --> 00:35:04.726 A:middle
well, I guess that should
be address and phone number.

00:35:05.246 --> 00:35:08.526 A:middle
And then of course, because
it's an NSRegularExpression

00:35:08.526 --> 00:35:09.356 A:middle
sub-class, it's using

00:35:09.356 --> 00:35:12.576 A:middle
that familiar
enumerateMatchesInString method

00:35:12.616 --> 00:35:15.676 A:middle
with options, range, and
then enumerating each time

00:35:15.676 --> 00:35:16.256 A:middle
with a block.

00:35:16.256 --> 00:35:18.026 A:middle
In this case, we're just
locking up the match.

00:35:18.566 --> 00:35:20.636 A:middle
All right, and finally,
we're going to talk

00:35:20.636 --> 00:35:23.316 A:middle
about CStringTransform which
might be my favorite thing

00:35:23.346 --> 00:35:26.206 A:middle
in the whole of Cocoa
and Cocoa Touch.

00:35:26.536 --> 00:35:28.546 A:middle
It's obscure, it's powerful.

00:35:28.546 --> 00:35:29.866 A:middle
It's like perfect, all right?

00:35:29.866 --> 00:35:32.766 A:middle
We have great string
APIs and it's a shame

00:35:32.766 --> 00:35:33.726 A:middle
if you don't know about them.

00:35:34.006 --> 00:35:35.906 A:middle
So CStringTransform,
it's a multitasker.

00:35:35.906 --> 00:35:37.666 A:middle
It will strip accents
and diacritics.

00:35:37.906 --> 00:35:39.406 A:middle
It will name Unicode characters.

00:35:39.686 --> 00:35:42.706 A:middle
It will encode XML hex entities
which is useful if you're ever,

00:35:42.706 --> 00:35:44.906 A:middle
you know, making
XML or decoding XML.

00:35:44.906 --> 00:35:47.816 A:middle
And you can also transliterate
between writing systems

00:35:47.816 --> 00:35:50.006 A:middle
which is kind of mind-blowing
whenever you see it in action.

00:35:50.846 --> 00:35:53.176 A:middle
So here it is, meet
CStringTransform.

00:35:53.176 --> 00:35:56.316 A:middle
Of course, it's a C-Function,
CF coming from Core Foundation.

00:35:57.436 --> 00:35:59.446 A:middle
It's returning a Boolean whether
or not it was successful.

00:35:59.446 --> 00:36:02.426 A:middle
The first argument is
a CFMutableStringRef

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:02.426 --> 00:36:03.166 A:middle
which you remember

00:36:03.166 --> 00:36:05.376 A:middle
that NSMutableString
is toll-free bridge.

00:36:05.376 --> 00:36:06.966 A:middle
So this makes it really
convenient to work with.

00:36:07.316 --> 00:36:08.436 A:middle
The range that you're going

00:36:08.436 --> 00:36:10.216 A:middle
to put the transformation
on is Next.

00:36:10.446 --> 00:36:12.736 A:middle
And if you're just doing
it on the entire string,

00:36:12.736 --> 00:36:14.366 A:middle
which you normally are,
you just pass a Null.

00:36:14.786 --> 00:36:16.956 A:middle
The kind of transform
is the third argument.

00:36:16.956 --> 00:36:18.096 A:middle
We're going to get into a couple

00:36:18.096 --> 00:36:19.466 A:middle
of the constants you
might pass in there.

00:36:19.466 --> 00:36:21.966 A:middle
And then some of those
transformations can be reversed.

00:36:22.156 --> 00:36:24.216 A:middle
And if they are,
you put a Yes there.

00:36:25.206 --> 00:36:27.746 A:middle
So if you were in English,

00:36:28.166 --> 00:36:29.606 A:middle
English doesn't get all
these cool characters

00:36:29.606 --> 00:36:30.636 A:middle
which is really a darn shame.

00:36:30.906 --> 00:36:33.216 A:middle
But as a result of that, of
course, even the bigger shame is

00:36:33.216 --> 00:36:34.636 A:middle
that most applica-- or a lot

00:36:34.636 --> 00:36:36.446 A:middle
of applications can't
handle this kind of input.

00:36:36.446 --> 00:36:38.686 A:middle
We need to normalize
that into something,

00:36:38.686 --> 00:36:39.956 A:middle
you know, the base ASCII set.

00:36:40.726 --> 00:36:44.066 A:middle
So, you know, if we're going to
turn that into that, you know,

00:36:44.066 --> 00:36:45.676 A:middle
something that is
more processible,

00:36:45.676 --> 00:36:47.776 A:middle
we can use CStringTransform.

00:36:48.246 --> 00:36:50.336 A:middle
So we do CStringTransform
but passing

00:36:50.336 --> 00:36:53.896 A:middle
in the kCFStringTransform
StripCombiningMarks transform.

00:36:53.896 --> 00:36:56.766 A:middle
It's a mouthful, but here
StripCombiningMarks is doing

00:36:56.766 --> 00:36:58.096 A:middle
both accents and diacritics.

00:36:58.346 --> 00:37:00.626 A:middle
The difference between the
two is sort of academic.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.626 --> 00:37:02.266 A:middle
In this case, it just
noted all the squiggly bits

00:37:02.266 --> 00:37:04.296 A:middle
and interesting cool
stuff is being removed.

00:37:05.136 --> 00:37:06.656 A:middle
Next, naming Unicodes.

00:37:06.656 --> 00:37:09.056 A:middle
Every character you see
on a screen corresponds

00:37:09.056 --> 00:37:12.166 A:middle
to some standard character
documented in Unicode.

00:37:12.166 --> 00:37:13.236 A:middle
Each one of those has a name.

00:37:13.636 --> 00:37:17.146 A:middle
Some of those names are known
like Latin capital letter A,

00:37:17.146 --> 00:37:19.056 A:middle
or you know, ornamented A

00:37:19.056 --> 00:37:22.156 A:middle
with the ring above,
or symbols Snowman.

00:37:23.366 --> 00:37:25.126 A:middle
But what about this,
Emoji, right?

00:37:25.126 --> 00:37:27.796 A:middle
We love Emoji but what the
heck is that called, right?

00:37:28.036 --> 00:37:30.846 A:middle
But now with CFStringTransform,
we can find out.

00:37:31.256 --> 00:37:33.536 A:middle
So let's put in the code.

00:37:33.766 --> 00:37:35.666 A:middle
Of course, because
Xcode supports Emoji,

00:37:35.666 --> 00:37:39.076 A:middle
you can put that right into
your code, take the mutable copy

00:37:39.076 --> 00:37:40.656 A:middle
of this pig thing and then pass

00:37:40.656 --> 00:37:42.776 A:middle
in the
kCFStringTransformToUnicodeName.

00:37:43.666 --> 00:37:45.286 A:middle
If anybody didn't learn
anything yet, you're going

00:37:45.286 --> 00:37:45.946 A:middle
to learn something now.

00:37:46.016 --> 00:37:47.166 A:middle
The name of that?

00:37:47.286 --> 00:37:47.726 A:middle
Pig Face.

00:37:48.516 --> 00:37:56.106 A:middle
[ Laughter &amp; Applause ]

00:37:56.606 --> 00:37:56.916 A:middle
All right.

00:37:57.816 --> 00:37:59.556 A:middle
So finally, we're going
to talk about, again,

00:37:59.556 --> 00:38:00.526 A:middle
really, really cool stuff.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:00.526 --> 00:38:02.836 A:middle
Translating between writing
system or Orthographies.

00:38:02.836 --> 00:38:05.786 A:middle
If you don't [inaudible] there's
really no way that you can begin

00:38:05.786 --> 00:38:07.206 A:middle
to understand how
that's pronounced.

00:38:07.396 --> 00:38:09.606 A:middle
So it might be convenient
to put into something

00:38:09.606 --> 00:38:11.806 A:middle
that you do understand, a
writing system that you do know.

00:38:12.166 --> 00:38:13.916 A:middle
CFStringTransform,
as you might expect,

00:38:14.106 --> 00:38:15.766 A:middle
does this pretty cool, well.

00:38:15.766 --> 00:38:19.276 A:middle
You can pass in that Korean
string we just saw and pass

00:38:19.276 --> 00:38:23.536 A:middle
in the kCFStringTransformToLatin
transform.

00:38:23.976 --> 00:38:26.466 A:middle
And what that will do is it will
transliterate from that Korean

00:38:27.166 --> 00:38:28.776 A:middle
to a Latin representation.

00:38:29.356 --> 00:38:30.116 A:middle
So that's how you say it.

00:38:30.116 --> 00:38:31.786 A:middle
Actually, we're just
saying "hello", "annyeong".

00:38:32.276 --> 00:38:36.076 A:middle
But that works for a lot
of the other languages too.

00:38:37.246 --> 00:38:40.476 A:middle
So you can transliterate between
Russian and Greek and Korean

00:38:40.476 --> 00:38:43.086 A:middle
and Hebrew and Chinese
and Arabic and Thai,

00:38:43.586 --> 00:38:45.796 A:middle
all sorts of these-- all these
languages, you can put them

00:38:45.796 --> 00:38:47.596 A:middle
into their Latin equivalent.

00:38:48.246 --> 00:38:50.676 A:middle
So it's sort of a super power
in a lot of ways, right?

00:38:50.756 --> 00:38:53.386 A:middle
You can now read any
scripts in the entire world

00:38:53.386 --> 00:38:54.336 A:middle
with CFStringTransform.

00:38:54.806 --> 00:38:59.116 A:middle
It can transliterate between
hiragana and katakana,

00:38:59.116 --> 00:39:01.546 A:middle
the two phonetic writing
systems of Japanese.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:01.546 --> 00:39:03.586 A:middle
You can convert between the
two which is really convenient,

00:39:03.796 --> 00:39:05.426 A:middle
especially if you're
leaning Japanese or want

00:39:05.426 --> 00:39:08.836 A:middle
to make a Japanese learning app
for instance, pretty cool idea.

00:39:09.096 --> 00:39:11.356 A:middle
Or you could turn it
into a Latin, you know,

00:39:11.356 --> 00:39:12.536 A:middle
the Romanization of it.

00:39:13.246 --> 00:39:15.446 A:middle
So even if you knew
about CFStringTransform,

00:39:15.446 --> 00:39:17.726 A:middle
you probably didn't know about
this techno way at the bottom.

00:39:17.726 --> 00:39:18.376 A:middle
I know I didn't.

00:39:18.376 --> 00:39:20.076 A:middle
I didn't read the--
you know, who reads all

00:39:20.076 --> 00:39:22.036 A:middle
of the documentation
from top to bottom?

00:39:22.036 --> 00:39:26.276 A:middle
But this note, you can pass in
any ICU transform ID as defined

00:39:26.276 --> 00:39:27.446 A:middle
in the ICU User Guide.

00:39:27.446 --> 00:39:30.806 A:middle
So all of the really,
really cool linguistic APIs,

00:39:30.806 --> 00:39:33.506 A:middle
they're using ICU, this open
source library under the hood.

00:39:34.416 --> 00:39:37.196 A:middle
So using-- you know, tying
into that, you can pass

00:39:37.196 --> 00:39:40.516 A:middle
in any arbitrary transform
ID into your third option.

00:39:40.646 --> 00:39:42.616 A:middle
So that means it's not only
do you get to convert those--

00:39:42.616 --> 00:39:44.036 A:middle
you know, transliterate
all those cool languages

00:39:44.036 --> 00:39:46.536 A:middle
that we showed before, but you
would do some foreign languages

00:39:46.536 --> 00:39:48.626 A:middle
that you probably have never
seen in your life before.

00:39:48.966 --> 00:39:52.216 A:middle
Things like, you know, Georgian
or Bengali or, you know,

00:39:52.216 --> 00:39:54.896 A:middle
Armenian or up there,
IPA, one of my favorites.

00:39:55.146 --> 00:39:59.336 A:middle
So it's a really cool and
powerful method and, you know,

00:39:59.366 --> 00:40:01.236 A:middle
[inaudible] actually show how
you might use this in action.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:01.496 --> 00:40:03.106 A:middle
Let's say you've
taken Apple's advice

00:40:03.346 --> 00:40:05.906 A:middle
and you've internationalized and
localized your app to a bunch

00:40:05.906 --> 00:40:08.586 A:middle
of different markets and now you
have users all around the world.

00:40:08.756 --> 00:40:11.276 A:middle
You want to make sure that you
are able to handle, you know,

00:40:11.276 --> 00:40:12.276 A:middle
whatever they throw at you.

00:40:12.376 --> 00:40:15.676 A:middle
So here is a rather extreme
case where somebody is very--

00:40:16.326 --> 00:40:18.966 A:middle
you know, they're saying hello
in a lot of different languages.

00:40:19.296 --> 00:40:21.016 A:middle
Let's normalize that into a way

00:40:21.016 --> 00:40:22.696 A:middle
that we might be able
to like index later.

00:40:23.296 --> 00:40:26.036 A:middle
So first of all, we're
going to take that string.

00:40:27.256 --> 00:40:29.596 A:middle
To transform it into its
Latin equivalent, of course,

00:40:29.596 --> 00:40:32.706 A:middle
we're going to do the
kCFStringTransformToLatin.

00:40:33.716 --> 00:40:34.836 A:middle
Next, we're going
to get rid of--

00:40:34.836 --> 00:40:36.296 A:middle
again, there were a
couple of accents there

00:40:36.296 --> 00:40:39.116 A:middle
because Latin characters don't
encode all of the different--

00:40:39.116 --> 00:40:41.256 A:middle
it doesn't-- can code the
entire phonetic inventory

00:40:41.516 --> 00:40:42.526 A:middle
of all the different languages.

00:40:42.526 --> 00:40:46.106 A:middle
So, we take away those
with the kCFStringTransform

00:40:46.106 --> 00:40:47.116 A:middle
StripCombiningMarks.

00:40:47.496 --> 00:40:51.686 A:middle
Then we use CFString lowercase
to just turn it all lowercase,

00:40:51.686 --> 00:40:53.706 A:middle
really, normalize
all that input.

00:40:54.336 --> 00:40:57.426 A:middle
Finally, to get all
the words in that,

00:40:57.426 --> 00:40:59.206 A:middle
to get rid of all the
punctuation and white space,

00:40:59.206 --> 00:41:01.966 A:middle
we're going to use our friend
enumerateLinguisticTagsInRange

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:02.176 --> 00:41:05.136 A:middle
which, again, really
excellent API for linguistics.

00:41:05.136 --> 00:41:06.716 A:middle
You're going to pass
in your scheme,

00:41:06.716 --> 00:41:09.686 A:middle
so we're looking
for tokens, options.

00:41:09.806 --> 00:41:11.166 A:middle
No options here,
and we don't care

00:41:11.166 --> 00:41:12.326 A:middle
about the orthography argument.

00:41:12.326 --> 00:41:14.696 A:middle
And then in the block, we're
just going to iterate through.

00:41:14.696 --> 00:41:16.016 A:middle
For each match, we're
going to make sure--

00:41:16.016 --> 00:41:17.116 A:middle
we're going to see
if it's a word.

00:41:17.116 --> 00:41:19.876 A:middle
And if it is a word, we're going
to add it to that collection

00:41:19.876 --> 00:41:20.846 A:middle
of words that we created.

00:41:21.216 --> 00:41:22.696 A:middle
Finally, the output
of that, we have--

00:41:22.696 --> 00:41:25.936 A:middle
this is what we started out with
and then finally we have here.

00:41:25.936 --> 00:41:27.096 A:middle
So that's something
that you can read.

00:41:27.096 --> 00:41:28.856 A:middle
That's something you can
linguistically process.

00:41:29.286 --> 00:41:30.276 A:middle
It's just a powerful idea

00:41:30.276 --> 00:41:32.006 A:middle
of how you can use this
in your application.

00:41:32.006 --> 00:41:33.696 A:middle
So those are some of
my favorite things

00:41:33.696 --> 00:41:35.136 A:middle
in Foundation and
Core Foundation.

00:41:35.136 --> 00:41:36.716 A:middle
And with that, I'll
pass it back to Scott.

00:41:37.076 --> 00:41:37.596 A:middle
Thanks. [applause]

00:41:40.196 --> 00:41:43.176 A:middle
&gt;&gt; All right, so I think the
thing we've learned is there's

00:41:43.246 --> 00:41:45.396 A:middle
suddenly going to be an
explosion of math apps

00:41:46.196 --> 00:41:47.566 A:middle
and translation apps, right?

00:41:48.606 --> 00:41:52.056 A:middle
OK. So, we are moving
our way up to the layers.

00:41:52.056 --> 00:41:53.326 A:middle
We're going to get
to the really--

00:41:53.326 --> 00:41:56.506 A:middle
what I think is the really cool
stuff now, the UI Layer stuff

00:41:56.506 --> 00:41:57.726 A:middle
and eye candy [phonetic].

00:41:58.176 --> 00:41:59.606 A:middle
So let's look at Core Animation.

00:41:59.606 --> 00:42:03.226 A:middle
And real quickly, if
you're not super familiar

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:03.226 --> 00:42:04.996 A:middle
with Core Animation, I'm sure
most of you have heard of it.

00:42:05.416 --> 00:42:07.486 A:middle
It's a framework data that
is actually just, again,

00:42:07.486 --> 00:42:09.586 A:middle
on both iOS and OS X,

00:42:09.586 --> 00:42:12.616 A:middle
and it powers all the
super cool animations,

00:42:12.616 --> 00:42:13.976 A:middle
the really fluid look

00:42:13.976 --> 00:42:17.526 A:middle
that defines the
iPhone, defines OS X.

00:42:17.526 --> 00:42:19.486 A:middle
It powers that by
staying on top of OpenGL.

00:42:19.486 --> 00:42:23.046 A:middle
So it's this really great, easy
Objective-C API that taps all

00:42:23.046 --> 00:42:24.326 A:middle
that power of OpenGL
so you don't have

00:42:24.326 --> 00:42:27.676 A:middle
to know all the low level C API
for OpenGL, so that's great.

00:42:27.676 --> 00:42:34.666 A:middle
And just a real quick primer
on what the key classes are.

00:42:34.666 --> 00:42:36.786 A:middle
There's CALayer which is the
thing that actually shows

00:42:36.786 --> 00:42:39.666 A:middle
up on the screen and
every UIView and in,

00:42:39.716 --> 00:42:43.736 A:middle
more recent versions of OS
X, every NSView has access

00:42:43.736 --> 00:42:44.656 A:middle
to one of these layers.

00:42:45.136 --> 00:42:48.126 A:middle
And a CAAnimation acts on that
layer over time, so it's--

00:42:48.176 --> 00:42:50.206 A:middle
for example, to change
the opacity

00:42:50.206 --> 00:42:51.446 A:middle
or change the color,
that sort of thing.

00:42:51.446 --> 00:42:52.746 A:middle
All right, so we're good.

00:42:53.876 --> 00:42:54.726 A:middle
What you may not know is

00:42:54.726 --> 00:42:57.286 A:middle
that there are some pretty
cool CALayer subclasses.

00:42:57.556 --> 00:43:00.566 A:middle
So CAGradientLayer
will actually animate

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:00.566 --> 00:43:02.146 A:middle
between different gradients.

00:43:02.146 --> 00:43:03.396 A:middle
Here, I'm simulating a sunrise,

00:43:04.016 --> 00:43:07.016 A:middle
but you can pass it
either an array of colors

00:43:07.796 --> 00:43:10.206 A:middle
or an array of colors
plus stops.

00:43:10.246 --> 00:43:12.186 A:middle
So, you can imagine, you
can go pretty crazy here.

00:43:12.886 --> 00:43:15.046 A:middle
And you can actually
[inaudible] things you want

00:43:15.046 --> 00:43:15.766 A:middle
to animate between.

00:43:15.766 --> 00:43:19.306 A:middle
So-- And it turns out, this
is actually ridiculously easy.

00:43:19.736 --> 00:43:22.536 A:middle
So here, I've actually created
an instance of CAGradientLayer.

00:43:22.586 --> 00:43:24.906 A:middle
I just chose some
random geometry,

00:43:24.906 --> 00:43:26.266 A:middle
but you can do anything,
obviously.

00:43:26.816 --> 00:43:31.876 A:middle
I have three separate colors and
I'm basically taking three sets

00:43:31.876 --> 00:43:35.756 A:middle
of colors-- or sorry, three
colors, two sets of them

00:43:36.076 --> 00:43:39.406 A:middle
and using a starting
value and ending value.

00:43:39.406 --> 00:43:41.466 A:middle
So, I'm just starting
with 2, 3, 3,

00:43:41.466 --> 00:43:43.186 A:middle
just sort of for
the aesthetic feel.

00:43:43.946 --> 00:43:46.176 A:middle
And then I'm switching
to 1, 2, 2.

00:43:46.176 --> 00:43:47.716 A:middle
So I'm using those
three colors together.

00:43:48.276 --> 00:43:50.136 A:middle
I set the duration
to four seconds,

00:43:50.166 --> 00:43:52.616 A:middle
sunrise takes four
seconds, auto reverses,

00:43:52.616 --> 00:43:54.266 A:middle
and I've already [inaudible]
longer repeatCount here

00:43:54.266 --> 00:43:55.376 A:middle
which is effectively infinity.

00:43:55.956 --> 00:43:57.996 A:middle
And then I just add that
animation to the layer,

00:43:57.996 --> 00:44:01.416 A:middle
and then I can just go ahead
and take that layer and add it

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:01.416 --> 00:44:03.476 A:middle
to any view that that has
a layer already on it.

00:44:03.476 --> 00:44:06.306 A:middle
So you can do that
both on iOS and OS X.

00:44:06.306 --> 00:44:09.286 A:middle
And again, this is
what it looks like.

00:44:10.396 --> 00:44:11.156 A:middle
So, it's pretty cool.

00:44:11.546 --> 00:44:14.896 A:middle
So another sister, I guess,

00:44:14.896 --> 00:44:18.116 A:middle
class of CAGradientLayer
is CAShapeLayer

00:44:18.116 --> 00:44:20.636 A:middle
and this is actually super cool.

00:44:20.636 --> 00:44:25.176 A:middle
This is you are literally
giving it two separate CGPaths

00:44:25.176 --> 00:44:26.326 A:middle
and it animates between them.

00:44:27.306 --> 00:44:28.466 A:middle
It's not-- it's crazy.

00:44:29.226 --> 00:44:31.956 A:middle
And you can also animate
between multiple paths.

00:44:31.956 --> 00:44:33.966 A:middle
Here, I'm just using two and
it's actually a much more fluid

00:44:33.966 --> 00:44:35.416 A:middle
than it appears here
on the screen.

00:44:35.916 --> 00:44:39.086 A:middle
But again, this is
really, really simple.

00:44:39.746 --> 00:44:41.776 A:middle
I literally just
make a CALayer--

00:44:41.776 --> 00:44:45.756 A:middle
I'm sorry, CAShapeLayer
and I set up my path

00:44:45.756 --> 00:44:47.266 A:middle
and I can put all the
vertices here 'cause

00:44:47.266 --> 00:44:47.986 A:middle
that would become a crazy.

00:44:48.326 --> 00:44:50.056 A:middle
But I'd have a starting
path, an ending path.

00:44:50.886 --> 00:44:52.636 A:middle
I create the animation
for the path.

00:44:53.096 --> 00:44:55.606 A:middle
And then, again, I just hit
the duration, the auto reverse,

00:44:55.606 --> 00:44:58.486 A:middle
repeatCount and I
add it to layer.

00:44:58.486 --> 00:45:01.926 A:middle
And it looks like that,
so it's pretty cool.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:03.216 --> 00:45:04.756 A:middle
Now, what would be really cool?

00:45:05.126 --> 00:45:07.826 A:middle
How about if we took both
gradient and shape and put them

00:45:07.826 --> 00:45:09.806 A:middle
in the same example, what
would that look like?

00:45:10.066 --> 00:45:10.806 A:middle
I don't even know.

00:45:10.806 --> 00:45:13.186 A:middle
Oh, it will look like this.

00:45:13.186 --> 00:45:14.256 A:middle
So, you've got this crazy--

00:45:14.256 --> 00:45:16.536 A:middle
so what's actually happening
here is the shape layer is

00:45:16.536 --> 00:45:18.006 A:middle
masking the gradient layer.

00:45:18.676 --> 00:45:21.286 A:middle
So, you have all the animation
that's happening on the gradient

00:45:21.696 --> 00:45:23.286 A:middle
but the star, the shape

00:45:23.376 --> 00:45:25.666 A:middle
of the star is actually
clipping the bounds

00:45:26.146 --> 00:45:27.936 A:middle
of the gradient,
so that's awesome.

00:45:28.706 --> 00:45:29.896 A:middle
And literally, all
you need to do

00:45:29.896 --> 00:45:32.376 A:middle
to make this work is you
set all the shape layer code

00:45:32.376 --> 00:45:35.136 A:middle
that I showed you before,
you set that shape layer

00:45:35.136 --> 00:45:36.366 A:middle
as the mask on the gradient.

00:45:39.476 --> 00:45:40.606 A:middle
So here's something else

00:45:40.606 --> 00:45:43.286 A:middle
that you probably
find yourself doing.

00:45:43.356 --> 00:45:46.416 A:middle
You may have some sort of
animation that responds

00:45:46.416 --> 00:45:50.096 A:middle
to user interaction and sort of
the first place a lot people go

00:45:50.096 --> 00:45:52.326 A:middle
with this is that they
actually update the animation

00:45:52.326 --> 00:45:53.346 A:middle
as the user is dragging.

00:45:53.916 --> 00:45:56.326 A:middle
But it's actually really
computationally expensive

00:45:56.326 --> 00:45:57.046 A:middle
to do it that way.

00:45:57.466 --> 00:46:00.316 A:middle
So instead what you can do is
actually change the time offset

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:00.316 --> 00:46:03.056 A:middle
of the layer itself and that
the subtle thing here is

00:46:03.056 --> 00:46:04.876 A:middle
that there's this protocol
that you might not be familiar

00:46:04.876 --> 00:46:07.866 A:middle
with called CAMediaTiming and
the animations adhere to it

00:46:07.866 --> 00:46:10.216 A:middle
but the layer is also
adhere to it which opens

00:46:10.216 --> 00:46:11.176 A:middle
up a whole range of option.

00:46:11.176 --> 00:46:13.906 A:middle
So, in this example, for
the example you just saw

00:46:13.906 --> 00:46:15.996 A:middle
on the screen, I got two
views, I've got the container

00:46:15.996 --> 00:46:17.336 A:middle
and then the square,
and then the slider

00:46:17.336 --> 00:46:18.156 A:middle
to move and back and forth.

00:46:19.046 --> 00:46:22.096 A:middle
And I initially set the
speed of the layer to zero.

00:46:22.096 --> 00:46:24.876 A:middle
And, you know, a lot of these
details I think you're probably

00:46:24.876 --> 00:46:26.946 A:middle
familiar with, so I'm not going
to spend too much time on them.

00:46:26.946 --> 00:46:29.886 A:middle
But I have a BezierPath
which is just a circle.

00:46:30.496 --> 00:46:33.296 A:middle
And-- So the calculation
or the pace sets the speeds

00:46:33.296 --> 00:46:35.386 A:middle
to a quarter of a second
and then add that animation

00:46:35.386 --> 00:46:37.406 A:middle
to the square, the layer.

00:46:37.406 --> 00:46:39.756 A:middle
And then I have this slider
as I'm moving back and forth.

00:46:39.846 --> 00:46:41.946 A:middle
I change the time
offset of the layer

00:46:41.946 --> 00:46:46.536 A:middle
and that's totally responsive,
really super efficient,

00:46:46.776 --> 00:46:47.856 A:middle
so that's the way to do that.

00:46:47.856 --> 00:46:49.056 A:middle
All right, let's keep moving.

00:46:49.056 --> 00:46:50.776 A:middle
Oh yeah, here's [inaudible]
again in case you forgot.

00:46:51.976 --> 00:46:53.076 A:middle
So, here you go.

00:46:53.536 --> 00:46:54.796 A:middle
OK, let's move on.

00:46:55.106 --> 00:46:56.176 A:middle
So, we're going to
look at Core Data.

00:46:56.176 --> 00:46:58.586 A:middle
So Core Data, of course, is
the framework that's available

00:46:58.586 --> 00:47:00.696 A:middle
for both iOS and OS
X developers as a way

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:00.696 --> 00:47:02.126 A:middle
to persist your data
between launches.

00:47:02.926 --> 00:47:05.836 A:middle
And here's just a really quick
overview for those of you

00:47:05.836 --> 00:47:08.076 A:middle
that aren't familiar
with the main classes.

00:47:08.406 --> 00:47:10.936 A:middle
Your Data Stored and
Persistent Store, you access it

00:47:10.936 --> 00:47:12.536 A:middle
through a Persistent
Store Coordinator

00:47:12.676 --> 00:47:15.286 A:middle
and then you fetch objects
into this ManagedObjectContext.

00:47:15.286 --> 00:47:17.376 A:middle
And those ManagedObjects then
kind of like living your app

00:47:17.376 --> 00:47:19.186 A:middle
and populate views,
that sort of thing.

00:47:19.186 --> 00:47:20.636 A:middle
So there's ManagedObject,

00:47:21.016 --> 00:47:22.976 A:middle
ManagedObjectContext,
and Fetch request.

00:47:22.976 --> 00:47:24.506 A:middle
Fetch request is the thing
that's pulling those things

00:47:24.506 --> 00:47:25.846 A:middle
from the database.

00:47:26.346 --> 00:47:30.116 A:middle
But the thing that people kind
of struggle in and actually

00:47:30.266 --> 00:47:31.246 A:middle
in this week in the lab,

00:47:31.346 --> 00:47:33.526 A:middle
[inaudible] a lot is
people don't quite know how

00:47:33.526 --> 00:47:35.086 A:middle
to do backgrounding
operations and it turns

00:47:35.086 --> 00:47:36.436 A:middle
out it's really, really easy.

00:47:36.526 --> 00:47:39.266 A:middle
There's new API added
as far back as iOS 5

00:47:39.646 --> 00:47:40.806 A:middle
in Lion that's been available,

00:47:40.806 --> 00:47:42.096 A:middle
but not everybody has
taken advantage of.

00:47:42.096 --> 00:47:43.076 A:middle
So I just want to mention,

00:47:43.426 --> 00:47:45.186 A:middle
when you create a
ManagedObjectContext,

00:47:45.626 --> 00:47:48.716 A:middle
you can specify that you want
the PrivateQueueConcurrencyType

00:47:48.716 --> 00:47:51.296 A:middle
and this is awesome because
basically what it means is you

00:47:51.296 --> 00:47:52.706 A:middle
get backgrounding
almost for free.

00:47:53.216 --> 00:47:54.926 A:middle
So what happens is you
create this context

00:47:55.426 --> 00:47:57.216 A:middle
with the
NSPrivateQueueConcurrencyType.

00:47:57.806 --> 00:48:00.486 A:middle
You say performBlock with
just any work you want to do

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:00.766 --> 00:48:02.346 A:middle
and you don't even have
to create the queue

00:48:02.346 --> 00:48:03.176 A:middle
that does the work on it.

00:48:03.176 --> 00:48:04.106 A:middle
You don't have to
create the thread.

00:48:04.106 --> 00:48:05.846 A:middle
You just say, "Go do this,
I don't care what happens.

00:48:06.046 --> 00:48:07.726 A:middle
Let me know when you're
done and we'll move on."

00:48:07.726 --> 00:48:08.936 A:middle
So it's super, super easy.

00:48:10.456 --> 00:48:11.436 A:middle
Here's an example.

00:48:11.436 --> 00:48:13.506 A:middle
I mean it's almost
[inaudible] to set it up.

00:48:13.506 --> 00:48:16.986 A:middle
And then with concurrency type,
PrivateQueueConcurrencyType,

00:48:16.986 --> 00:48:19.736 A:middle
I do some work and I
save, it feels great.

00:48:21.116 --> 00:48:23.276 A:middle
And a few other quick
hits Core Data here.

00:48:23.546 --> 00:48:26.516 A:middle
When you're fetching, again in
the labs this week, a lot of saw

00:48:26.516 --> 00:48:28.786 A:middle
that people didn't know about a
lot of this propertiesToFetch.

00:48:29.026 --> 00:48:30.536 A:middle
If you're fetching stuff
from Core Data and you want

00:48:30.536 --> 00:48:32.146 A:middle
to be fast, just fetch
the stuff you need.

00:48:32.516 --> 00:48:34.926 A:middle
So just say propertiesToFetch
on name and phone number.

00:48:35.496 --> 00:48:36.936 A:middle
You can get back
just a dictionary.

00:48:36.936 --> 00:48:37.976 A:middle
If you don't need
the whole object,

00:48:37.976 --> 00:48:39.816 A:middle
you can get back
just the objects ID

00:48:40.186 --> 00:48:42.566 A:middle
and sometimes maybe
just want the account.

00:48:44.246 --> 00:48:46.686 A:middle
You can also do fetchBatchSize
which is awesome.

00:48:46.686 --> 00:48:48.726 A:middle
So if you have like people came
in the labs and they're like,

00:48:48.726 --> 00:48:50.786 A:middle
"Well, we've-- I have
four million records."

00:48:51.146 --> 00:48:53.046 A:middle
It's like, "Well, no
wonder, your app is slow.

00:48:53.046 --> 00:48:55.226 A:middle
You're launching, you know,
four million records on launch."

00:48:55.476 --> 00:48:57.096 A:middle
So just set Batch Size and then

00:48:57.096 --> 00:48:59.496 A:middle
as you'll initially fetch a
hundred and then as you kind

00:48:59.496 --> 00:49:01.186 A:middle
of run through that array,
it will go and fetch more.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:01.886 --> 00:49:04.066 A:middle
And also if you're doing
cross relationship fetching,

00:49:04.066 --> 00:49:05.766 A:middle
you actually want to say,
"Hey, during this batch,

00:49:05.846 --> 00:49:07.276 A:middle
I'm actually going
to need the artist.

00:49:07.276 --> 00:49:08.446 A:middle
I'm going to meet the catalog.

00:49:08.446 --> 00:49:10.326 A:middle
Go ahead and fetch that for me."

00:49:10.916 --> 00:49:14.606 A:middle
And there was a really fantastic
talk yesterday in Nob Hill.

00:49:14.606 --> 00:49:16.276 A:middle
I definitely recommend
checking the video

00:49:16.276 --> 00:49:17.106 A:middle
if you're using Core Data.

00:49:17.106 --> 00:49:19.086 A:middle
Even if you think you're doing
the right thing, trust me,

00:49:19.086 --> 00:49:23.526 A:middle
there are some pretty
amazing stuff in there.

00:49:23.656 --> 00:49:25.476 A:middle
And one last thing,
I don't know how many

00:49:25.476 --> 00:49:26.906 A:middle
of you are actually
familiar with this,

00:49:26.906 --> 00:49:29.056 A:middle
but they're built-in
store types in Core Data

00:49:29.056 --> 00:49:30.326 A:middle
and most people you SQLite,

00:49:30.326 --> 00:49:32.456 A:middle
but if you actually have
a different data format

00:49:32.456 --> 00:49:35.286 A:middle
that you need but you want all
the really nice conveniences a

00:49:35.286 --> 00:49:37.756 A:middle
Core Data, there's a class
for NSIncrementalStore

00:49:37.986 --> 00:49:38.956 A:middle
which you can subclass

00:49:38.956 --> 00:49:41.306 A:middle
and actually implement
your own storage type.

00:49:42.036 --> 00:49:44.546 A:middle
So, that's there, OK.

00:49:44.546 --> 00:49:50.596 A:middle
So, we have a couple
of iOS specific

00:49:50.596 --> 00:49:52.406 A:middle
and AppKit specific tips.

00:49:52.946 --> 00:49:56.096 A:middle
But first, who here has
learned something already?

00:49:57.326 --> 00:49:58.896 A:middle
OK. Wow, all right.

00:49:59.026 --> 00:50:04.436 A:middle
Has anyone not learned
something?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:05.686 --> 00:50:08.136 A:middle
OK, yeah, because I was going
to call you on the pig face one.

00:50:09.246 --> 00:50:11.666 A:middle
Pretty sure, I didn't
know that, so-- OK.

00:50:11.866 --> 00:50:13.776 A:middle
So I guess then a few bonus tips

00:50:13.776 --> 00:50:15.926 A:middle
since apparently you've
covered everybody.

00:50:16.176 --> 00:50:18.506 A:middle
UIKit, so this is-- this
is one of these things

00:50:18.506 --> 00:50:20.186 A:middle
where I think most
people know about it

00:50:20.696 --> 00:50:22.296 A:middle
but because it just
came out in iOS 6,

00:50:22.296 --> 00:50:24.086 A:middle
I think maybe not
everybody is really using it.

00:50:24.706 --> 00:50:27.036 A:middle
So UICollectionView is
really, really awesome class

00:50:27.036 --> 00:50:29.016 A:middle
that was added in
iOS 6 that allows you

00:50:29.016 --> 00:50:31.186 A:middle
to do pretty incredibly
complex layouts.

00:50:31.186 --> 00:50:32.466 A:middle
And out-of-the box, you just--

00:50:32.466 --> 00:50:34.156 A:middle
it's basically like
a grid view for free.

00:50:34.156 --> 00:50:36.296 A:middle
So it's like a home
screen for free just

00:50:36.296 --> 00:50:37.276 A:middle
by creating one of these things.

00:50:37.626 --> 00:50:40.986 A:middle
And we actually use it in the
WWDC App that you see here.

00:50:40.986 --> 00:50:43.116 A:middle
So this whole grid
view is actually build

00:50:43.166 --> 00:50:45.146 A:middle
with UICollectionView and
we use a custom layout

00:50:45.146 --> 00:50:47.536 A:middle
and the custom layouts are
actually really straightforward

00:50:47.536 --> 00:50:47.856 A:middle
to do.

00:50:49.216 --> 00:50:52.196 A:middle
So something-- you know, a
lot of times when people run

00:50:52.196 --> 00:50:54.206 A:middle
across a new class,
they've got existing code

00:50:54.206 --> 00:50:56.146 A:middle
and they're thinking, "But--
yeah, but I don't want the API.

00:50:56.146 --> 00:50:57.616 A:middle
I'm going to have to sit
there and figure out.

00:50:57.616 --> 00:50:59.236 A:middle
And then I've got like not
working what I'm already

00:50:59.236 --> 00:50:59.716 A:middle
working on."

00:50:59.716 --> 00:51:01.716 A:middle
But here's the great news
about UICollectionView,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:02.086 --> 00:51:04.806 A:middle
the API is incredibly
similar to UITableView.

00:51:05.156 --> 00:51:07.736 A:middle
So you-- these are really
just the methods you need,

00:51:07.736 --> 00:51:09.086 A:middle
numberOfSections
InCollectionView,

00:51:09.086 --> 00:51:10.926 A:middle
and I'm just returning my--

00:51:10.926 --> 00:51:15.236 A:middle
the count, and
numberOfItemsInSection,

00:51:15.396 --> 00:51:16.446 A:middle
so it's just like TableView.

00:51:16.836 --> 00:51:20.196 A:middle
And then I can just
return the view I want.

00:51:20.196 --> 00:51:22.666 A:middle
So I'm saying, OK-- and this
is actually [inaudible] code

00:51:22.796 --> 00:51:24.786 A:middle
from the WWDC App that I've
cleaned up a little bit,

00:51:24.786 --> 00:51:26.306 A:middle
but this is actually
what we're doing.

00:51:26.306 --> 00:51:28.076 A:middle
So we pull sessions
from a section.

00:51:28.526 --> 00:51:30.026 A:middle
We get that particular
session object.

00:51:30.496 --> 00:51:34.206 A:middle
We dequeue the cell just like
you would do in TableView.

00:51:34.556 --> 00:51:36.806 A:middle
And then we set the session
and return self, that's it,

00:51:36.806 --> 00:51:37.746 A:middle
and it shows up in the screen.

00:51:38.026 --> 00:51:41.656 A:middle
The real work that's done in
the app is the custom layout.

00:51:41.656 --> 00:51:46.356 A:middle
And it's a little bit more
in-depth, but you can do it.

00:51:46.356 --> 00:51:48.546 A:middle
And of course, with
Mavericks, you know,

00:51:48.786 --> 00:51:51.316 A:middle
being announced this week,
we think we're going to get--

00:51:51.316 --> 00:51:52.846 A:middle
you know, a lot of people are
kind of like, "Hey, you know,

00:51:52.846 --> 00:51:53.906 A:middle
this iOS thing is really cool

00:51:53.906 --> 00:51:56.696 A:middle
but I can actually be making Mac
apps too and be really awesome."

00:51:56.966 --> 00:52:00.326 A:middle
So one thing to know is if in
the past you're used to working

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:00.326 --> 00:52:03.876 A:middle
with UITableView and then
you were thinking, "Well,

00:52:03.876 --> 00:52:04.846 A:middle
I'd like [inaudible] Mac app

00:52:04.846 --> 00:52:06.526 A:middle
but I don't really
know what that's like,"

00:52:07.136 --> 00:52:08.276 A:middle
one thing you should know is

00:52:08.276 --> 00:52:11.506 A:middle
that in Lion we added this
version of NSTableView

00:52:11.506 --> 00:52:14.056 A:middle
that actually use views
just like UITableView.

00:52:14.686 --> 00:52:16.116 A:middle
So all that stuff that--

00:52:16.116 --> 00:52:18.856 A:middle
all those mechanisms that you're
familiar with from UITableView,

00:52:18.856 --> 00:52:21.546 A:middle
just doing arbitrary
layout in interface builder

00:52:21.546 --> 00:52:24.496 A:middle
and just returning entire
views, it's actually--

00:52:24.496 --> 00:52:25.616 A:middle
you know, it's X now,
so you can do it.

00:52:25.616 --> 00:52:28.036 A:middle
And the same people that worked
on UITableView or NSTableView,

00:52:28.036 --> 00:52:30.166 A:middle
so you can imagine that it
works pretty much the same.

00:52:30.856 --> 00:52:32.826 A:middle
And so, you get all that
hardware accelerated stuff.

00:52:32.826 --> 00:52:34.036 A:middle
You get the animation.

00:52:34.036 --> 00:52:36.066 A:middle
Here are some of the
animations facts you can do.

00:52:36.066 --> 00:52:38.026 A:middle
And you can actually add
Core Animation stuff.

00:52:38.026 --> 00:52:40.856 A:middle
So if you for some reason wanted
a TableView of shapes, clipping,

00:52:40.856 --> 00:52:41.896 A:middle
gradients, or something
like that,

00:52:41.896 --> 00:52:42.666 A:middle
you could actually do that.

00:52:43.576 --> 00:52:46.036 A:middle
And again, actually this
is incredibly similar

00:52:46.036 --> 00:52:48.546 A:middle
to the CollectionView example,
numberOfRowsInTableView.

00:52:49.086 --> 00:52:50.226 A:middle
You turn a row for the view

00:52:50.586 --> 00:52:52.906 A:middle
and I just can change whatever
properties I want before it

00:52:52.906 --> 00:52:53.396 A:middle
gets displayed.

00:52:53.906 --> 00:52:58.426 A:middle
And the one thing I want to
point out here, just calling

00:52:58.426 --> 00:52:59.296 A:middle
out a little bit separately,

00:52:59.636 --> 00:53:04.776 A:middle
is there's an existing
class that's NSTableCellView

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:05.136 --> 00:53:06.446 A:middle
which you can use generically.

00:53:06.446 --> 00:53:08.826 A:middle
You can just use as it is
or you can subclass it,

00:53:08.936 --> 00:53:11.646 A:middle
or you can just whatever
view you want.

00:53:11.646 --> 00:53:13.336 A:middle
So if you have-- I have an MS--

00:53:13.336 --> 00:53:16.226 A:middle
MyGridView and I've just
completely implement

00:53:16.226 --> 00:53:16.856 A:middle
that from scratch.

00:53:16.856 --> 00:53:18.196 A:middle
So it's just something
I was using elsewhere

00:53:18.196 --> 00:53:19.086 A:middle
but I'm including the table.

00:53:19.086 --> 00:53:20.466 A:middle
So if you have a lot
of flexibility there.

00:53:21.176 --> 00:53:21.626 A:middle
All right.

00:53:21.996 --> 00:53:25.056 A:middle
So, was that-- that
was pretty fast,

00:53:25.056 --> 00:53:26.606 A:middle
but I think we hit everybody.

00:53:27.006 --> 00:53:29.016 A:middle
So we got-- pretty much
everybody learned something.

00:53:29.466 --> 00:53:32.186 A:middle
So with all this stuff, if
you have questions on any

00:53:32.186 --> 00:53:34.286 A:middle
of this stuff, you can talk to
our good friend Dave DeLong.

00:53:34.836 --> 00:53:37.106 A:middle
He's the App Frameworks and
Developer Tools of Evangelist.

00:53:37.146 --> 00:53:38.206 A:middle
There's documentation and forms,

00:53:38.206 --> 00:53:40.046 A:middle
in case somehow you
haven't heard of those yet.

00:53:40.946 --> 00:53:42.886 A:middle
And do checkout those other
sessions 'cause they're really,

00:53:42.886 --> 00:53:43.336 A:middle
really good.

00:53:43.336 --> 00:53:45.466 A:middle
There's Designing Code
for Performance on video

00:53:45.466 --> 00:53:46.906 A:middle
and Core Data Performance
Optimization

00:53:46.906 --> 00:53:48.976 A:middle
for Debugging, and that is it.

00:53:48.976 --> 00:53:49.916 A:middle
Thank you very much.

00:53:49.966 --> 00:53:51.966 A:middle
[Applause]

00:53:52.016 --> 00:53:57.156 A:middle
[ Silence ]

