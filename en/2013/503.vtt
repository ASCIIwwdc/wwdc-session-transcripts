WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:09.546 A:middle
[ Silence ]

00:00:10.046 --> 00:00:10.636 A:middle
&gt;&gt; Good afternoon.

00:00:11.406 --> 00:00:13.646 A:middle
Welcome to Designing
Games with Sprite Kit.

00:00:14.306 --> 00:00:15.426 A:middle
My name is Norman Wang.

00:00:15.916 --> 00:00:18.096 A:middle
I'm with the game
technology team at Apple.

00:00:18.126 --> 00:00:24.226 A:middle
So today, I'll be very-- I'm
very excited to share with some

00:00:24.226 --> 00:00:27.346 A:middle
of the very exciting features
and tools for the runtime,

00:00:28.276 --> 00:00:30.106 A:middle
allow you to maximize
the performance,

00:00:30.176 --> 00:00:32.546 A:middle
as well as minimize
the iteration time

00:00:32.956 --> 00:00:35.966 A:middle
to build your game.

00:00:36.196 --> 00:00:38.726 A:middle
So, for those of you who have
missed the earlier session,

00:00:38.726 --> 00:00:42.126 A:middle
introduction to Sprite
Kit, here's a quick recap.

00:00:42.126 --> 00:00:45.376 A:middle
So, Sprite Kit is a high
performance 2D rendering engine

00:00:45.606 --> 00:00:48.656 A:middle
that is available in OS
X Mavericks and iOS 7.

00:00:49.586 --> 00:00:51.406 A:middle
It has built-in physics support

00:00:51.716 --> 00:00:54.426 A:middle
that features all the 2D
physics need for your game.

00:00:55.676 --> 00:00:57.646 A:middle
It is the-- since the platform--

00:00:58.646 --> 00:01:03.266 A:middle
the framework is available
on both iOS 7 and Mac OS X,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:03.416 --> 00:01:06.936 A:middle
they allow you to build once and
deploy it to multiple devices

00:01:06.936 --> 00:01:09.746 A:middle
that include the iOS running
device and the Mac OS hardware.

00:01:09.746 --> 00:01:13.656 A:middle
Not only Sprite Kit comes
with a super fast runtime,

00:01:13.876 --> 00:01:16.286 A:middle
but we also provide a
lot of tools to allow you

00:01:16.286 --> 00:01:18.616 A:middle
to integrate directly into
your games or pipeline.

00:01:19.006 --> 00:01:20.396 A:middle
So, we're covering
some of that today.

00:01:21.636 --> 00:01:24.836 A:middle
So, in terms of the feature
for rendering the animation,

00:01:25.316 --> 00:01:28.546 A:middle
we have a lot of
features that's provided.

00:01:28.546 --> 00:01:32.306 A:middle
That includes sprites,
shapes, particles,

00:01:32.576 --> 00:01:36.316 A:middle
we also support non-linear
animation, we provide support

00:01:36.316 --> 00:01:41.156 A:middle
for audio, video as well
different visual effects.

00:01:41.156 --> 00:01:44.876 A:middle
So, I hope all of you have
seen the adventure demo so far

00:01:45.086 --> 00:01:47.206 A:middle
and it is a production
quality sample code

00:01:47.316 --> 00:01:49.936 A:middle
that was provided along with the
release of Sprite Kit framework.

00:01:50.186 --> 00:01:53.216 A:middle
They also come with code
explained detailed documentation

00:01:53.216 --> 00:01:54.426 A:middle
on how the game is created.

00:01:55.066 --> 00:01:57.666 A:middle
So, I'll be referring to
various bits and pieces

00:01:57.666 --> 00:02:00.576 A:middle
from the Adventure demo in
this talk to show you how quick

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.576 --> 00:02:03.386 A:middle
and easy it is to
integrate Sprite Kit directly

00:02:03.386 --> 00:02:05.256 A:middle
into your game.

00:02:05.436 --> 00:02:07.896 A:middle
So, we'll start with looking
at your Adventure art pipeline

00:02:08.316 --> 00:02:11.626 A:middle
to see how the Adventure
Game can do quick iteration

00:02:11.626 --> 00:02:14.326 A:middle
on importing art files
into the runtime.

00:02:14.326 --> 00:02:16.326 A:middle
And then we will
be looking at how

00:02:16.326 --> 00:02:19.286 A:middle
to create various visual
effects for using the Sprite Kit

00:02:19.656 --> 00:02:23.406 A:middle
that include post-processing
and particle system.

00:02:23.936 --> 00:02:27.736 A:middle
I'll have-- we have some
very special guests today

00:02:27.736 --> 00:02:29.526 A:middle
who will be joining us
that will be talking

00:02:29.526 --> 00:02:31.866 A:middle
about how their experience is

00:02:32.196 --> 00:02:34.936 A:middle
when they build the Adventure
Game using Sprite Kit.

00:02:34.936 --> 00:02:38.086 A:middle
And I'll be wrapping up
with how to develop some

00:02:38.086 --> 00:02:40.416 A:middle
of your custom tool that
include level editor,

00:02:40.416 --> 00:02:43.036 A:middle
complex action editor, and some

00:02:43.036 --> 00:02:47.446 A:middle
of the best practices
for using Sprite Kit.

00:02:47.626 --> 00:02:50.236 A:middle
So, the Adventure Game
is a very complex game.

00:02:50.576 --> 00:02:52.346 A:middle
And what really goes
in to the Adventure?

00:02:52.936 --> 00:02:57.506 A:middle
So, Adventure manages a lot
of data that include lots

00:02:57.506 --> 00:03:01.366 A:middle
of artwork files and we have
about 1,700 art files to load.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:02.036 --> 00:03:03.806 A:middle
We have a lot of
sound files to load

00:03:03.806 --> 00:03:06.586 A:middle
for different sound effects,
we have particle effects

00:03:06.586 --> 00:03:08.676 A:middle
and they represent the
tree leaves falling,

00:03:09.036 --> 00:03:10.936 A:middle
smoke and damages.

00:03:11.446 --> 00:03:14.236 A:middle
We have physics that allows
you to interact with the wall

00:03:14.236 --> 00:03:18.026 A:middle
and not ran to objects
as well as AI characters.

00:03:19.136 --> 00:03:21.936 A:middle
We have different-- also
have Collision Mappings.

00:03:21.936 --> 00:03:24.786 A:middle
For example, the entire
Collision Map is data-driven

00:03:24.786 --> 00:03:27.976 A:middle
and design offline and loaded
them dynamically upon game

00:03:27.976 --> 00:03:31.096 A:middle
startup and builds these
dynamic walls inside your level.

00:03:32.536 --> 00:03:33.426 A:middle
So, let's go ahead and look

00:03:33.426 --> 00:03:35.016 A:middle
at the Adventure Game
startup sequence.

00:03:35.236 --> 00:03:39.406 A:middle
How exactly Adventure
is doing upon startup?

00:03:40.226 --> 00:03:44.966 A:middle
So, when the game is load upon
the game application launching

00:03:44.966 --> 00:03:48.446 A:middle
handlers called, we start
loading all the background

00:03:48.446 --> 00:03:51.966 A:middle
assets in parallel because
we need all these assets

00:03:51.966 --> 00:03:55.416 A:middle
to construct our world before
we start issuing the first draw

00:03:55.416 --> 00:03:58.046 A:middle
call will perform all the
asset loading in the background

00:03:58.296 --> 00:04:00.356 A:middle
and get them loaded
as fast they can.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:01.546 --> 00:04:04.236 A:middle
Once we have these assets
in memory, we will go ahead

00:04:04.236 --> 00:04:06.556 A:middle
and create an instance
of a SKScene.

00:04:07.676 --> 00:04:12.156 A:middle
Once we have the scene, we'll
start placing enemies, spawners,

00:04:12.156 --> 00:04:16.116 A:middle
as well as the Boss into
different places in the world.

00:04:16.116 --> 00:04:21.966 A:middle
After that, we'll be parsing and
reading an offline Collision Map

00:04:22.466 --> 00:04:26.096 A:middle
that will indicate and build
the physics world where exactly

00:04:26.096 --> 00:04:28.346 A:middle
at the world-- lost
in your world.

00:04:29.146 --> 00:04:31.676 A:middle
Finally, the scene
is constructed

00:04:31.676 --> 00:04:35.366 A:middle
and we'll use presentScene
method to present

00:04:35.576 --> 00:04:38.336 A:middle
that to a SKscene which part
of your [inaudible] file.

00:04:39.056 --> 00:04:40.506 A:middle
And also, we also register

00:04:40.656 --> 00:04:42.596 A:middle
for the game controller
notifications

00:04:42.676 --> 00:04:44.186 A:middle
for adding game controller
support.

00:04:44.696 --> 00:04:48.406 A:middle
So, in the first session,
we actually looked at some

00:04:48.406 --> 00:04:53.266 A:middle
of the game update loop
of what a typical game

00:04:53.266 --> 00:04:55.616 A:middle
about loop using Sprite Kit.

00:04:56.296 --> 00:04:59.516 A:middle
But now we're going
to talk a little bit

00:04:59.516 --> 00:05:00.586 A:middle
into the Adventure Game.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:01.226 --> 00:05:02.906 A:middle
So, the Adventure
Game actually tab

00:05:02.906 --> 00:05:06.646 A:middle
into this update
loop at two places.

00:05:06.776 --> 00:05:09.806 A:middle
Number one, when
the frame starts,

00:05:10.436 --> 00:05:11.846 A:middle
update method get called.

00:05:12.496 --> 00:05:15.286 A:middle
Here, what we do is we
update all the input

00:05:15.546 --> 00:05:19.126 A:middle
that includes controllers,
touches, mouse and keyboard.

00:05:19.126 --> 00:05:21.846 A:middle
So, once we have this
input, we translate them

00:05:21.916 --> 00:05:23.896 A:middle
into delta movement
for the main character.

00:05:24.166 --> 00:05:26.966 A:middle
So now, our hero knows and
either walk from A to B.

00:05:28.266 --> 00:05:32.036 A:middle
So, once that's happening, we
also update AI, AI will say,

00:05:32.036 --> 00:05:34.436 A:middle
"OK, maybe we should provide--

00:05:34.816 --> 00:05:36.996 A:middle
perform some recasting
to see whether the player

00:05:36.996 --> 00:05:38.446 A:middle
or the hero is visible or not.

00:05:38.736 --> 00:05:41.396 A:middle
If it is, let's translate
that into a Delta movement."

00:05:41.906 --> 00:05:43.416 A:middle
So, once you have this movement,

00:05:44.566 --> 00:05:47.616 A:middle
we'll start issuing
animation playback frame.

00:05:48.306 --> 00:05:51.386 A:middle
So, I know if I move from A
to B, I don't skate from A

00:05:51.386 --> 00:05:55.466 A:middle
to B, I walk from A to B.

00:05:55.726 --> 00:05:58.016 A:middle
So, once that's done,
we'll go to--

00:05:58.016 --> 00:06:01.046 A:middle
we wait until we finish
simulating all the physics.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:02.236 --> 00:06:05.146 A:middle
So, if I'm walking from A to
B, there happen to be a wall

00:06:05.146 --> 00:06:07.536 A:middle
in between, physics will kick in

00:06:07.536 --> 00:06:10.116 A:middle
and stop me right in
front of the wall.

00:06:10.736 --> 00:06:13.116 A:middle
So, this is a really
safe place for you

00:06:13.116 --> 00:06:16.856 A:middle
to assume all the objects final
positions are finalized before

00:06:16.856 --> 00:06:17.256 A:middle
the frame.

00:06:17.696 --> 00:06:20.446 A:middle
So, at this time, we know
the character positions

00:06:20.446 --> 00:06:21.116 A:middle
are finalized.

00:06:21.556 --> 00:06:24.896 A:middle
We'll update the camera, so the
camera will follow the player

00:06:24.896 --> 00:06:26.886 A:middle
and also reveal different
parts of the world.

00:06:28.016 --> 00:06:29.736 A:middle
We also update the tree parallax

00:06:29.736 --> 00:06:31.186 A:middle
because the camera
has been moved,

00:06:32.186 --> 00:06:35.616 A:middle
and the fallen leaves have to
be following with the tree.

00:06:36.036 --> 00:06:43.466 A:middle
Due to that complexity of
this game, it presents us

00:06:43.536 --> 00:06:44.596 A:middle
with a lot of challenges.

00:06:45.676 --> 00:06:48.666 A:middle
Number one, the construction

00:06:48.666 --> 00:06:51.906 A:middle
of the scene cannot happen
unless all the assets are loaded

00:06:52.236 --> 00:06:56.436 A:middle
including 1,700 art files
and we have huge amount

00:06:56.436 --> 00:06:58.486 A:middle
of data dependencies
in each category.

00:06:58.486 --> 00:07:00.496 A:middle
If you just look at
the background tiles,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:01.046 --> 00:07:05.856 A:middle
the level itself is a 4K x
4K tile map that gets divided

00:07:05.906 --> 00:07:10.846 A:middle
into 128 by 128 grid,
sorry, 32 by 32 grid

00:07:10.846 --> 00:07:15.786 A:middle
and each tile is
128 by 128 size.

00:07:15.936 --> 00:07:17.816 A:middle
We also have a lot
of animation frames.

00:07:17.936 --> 00:07:19.266 A:middle
For example, if we
look at animes,

00:07:19.266 --> 00:07:22.036 A:middle
anime have idle animation,
have a tack animation,

00:07:22.586 --> 00:07:24.766 A:middle
also have walking animation,
and death animation.

00:07:25.166 --> 00:07:27.086 A:middle
So, we have different
animation frame categories

00:07:27.086 --> 00:07:28.706 A:middle
for every single
character in the game.

00:07:29.256 --> 00:07:31.226 A:middle
We also have a lot
of particle effects.

00:07:31.296 --> 00:07:33.326 A:middle
For example, falling
trees, smoke,

00:07:34.346 --> 00:07:36.696 A:middle
and also Collision
Mapping need to be loaded.

00:07:37.146 --> 00:07:38.846 A:middle
So, how do we address
all of these

00:07:39.636 --> 00:07:41.686 A:middle
by using the tools
provided by Sprite Kit?

00:07:42.686 --> 00:07:46.066 A:middle
We're going to go into looking
at some of the art pipeline

00:07:46.556 --> 00:07:49.886 A:middle
for the Adventure Game.

00:07:50.046 --> 00:07:53.436 A:middle
So, diving a little bit
into the Adventure textures,

00:07:54.066 --> 00:07:58.156 A:middle
again we have 1660 texture files

00:07:58.156 --> 00:08:01.176 A:middle
and the game actually used
Texture Atlas for all of them.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:01.456 --> 00:08:03.766 A:middle
Character animations are
divided into several atlas.

00:08:03.766 --> 00:08:06.066 A:middle
For example, walking
animation, 42 frames,

00:08:06.356 --> 00:08:08.166 A:middle
that goes into a
single Texture Atlas.

00:08:08.916 --> 00:08:11.496 A:middle
We have the environment,
1024 tiles,

00:08:11.606 --> 00:08:16.036 A:middle
that's a 4K by 4K grid divided
into a single Texture Atlas,

00:08:16.276 --> 00:08:17.926 A:middle
we'll put that I mean
to a Texture Atlas.

00:08:18.786 --> 00:08:21.476 A:middle
The environments like trees,
caves and projectiles,

00:08:21.476 --> 00:08:23.926 A:middle
all of them go to a single
Texture Atlas as well.

00:08:23.926 --> 00:08:29.556 A:middle
So, this is what it looked like,
bunch of loose files as input

00:08:30.806 --> 00:08:33.486 A:middle
that comes in various
shapes and sizes,

00:08:34.736 --> 00:08:36.676 A:middle
passing through the
Sprite Kit tool

00:08:36.676 --> 00:08:40.155 A:middle
and we generate a Texture
Atlas, as simple as that.

00:08:40.666 --> 00:08:41.946 A:middle
So, speaking about
Texture Atlas,

00:08:42.166 --> 00:08:44.226 A:middle
I want to talk a little
bit more on this topic.

00:08:45.396 --> 00:08:48.556 A:middle
It is not a new thing,
but over the years,

00:08:48.556 --> 00:08:52.286 A:middle
for the game I'm looking
at, that's draw call bound,

00:08:52.286 --> 00:08:56.216 A:middle
not everybody is using Texture
Atlas to batch their draw calls.

00:08:56.826 --> 00:08:58.316 A:middle
It's because there's
always this tank

00:08:58.316 --> 00:08:59.836 A:middle
of work that need to be done.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.326 --> 00:09:03.706 A:middle
Traditionally, we have artists
that use Photoshop with bits

00:09:03.706 --> 00:09:06.396 A:middle
and pieces of these textures
inside a bigger texture

00:09:06.836 --> 00:09:09.166 A:middle
and save it and also
manually document it

00:09:09.166 --> 00:09:10.506 A:middle
where each textures are.

00:09:10.506 --> 00:09:14.086 A:middle
And this really makes
the iteration time suck.

00:09:14.666 --> 00:09:16.456 A:middle
OK, so if artist is
not doing the work,

00:09:16.726 --> 00:09:18.526 A:middle
we'll have engineers
do the work, right?

00:09:18.816 --> 00:09:21.376 A:middle
So, the engineer will have to
either run some sort of script

00:09:22.006 --> 00:09:25.976 A:middle
in the bulk-- build process or
use some PayTool to run that

00:09:25.976 --> 00:09:28.986 A:middle
and iteration time is
pretty bad as well.

00:09:29.536 --> 00:09:33.796 A:middle
So, we want to lift all
that work off your shoulder

00:09:33.796 --> 00:09:36.176 A:middle
when we designed
Texture Atlas tool.

00:09:36.246 --> 00:09:37.416 A:middle
So, you can just focus

00:09:37.416 --> 00:09:39.556 A:middle
on putting the beautiful
pixels on the screen.

00:09:42.096 --> 00:09:44.216 A:middle
So now, once you
have Texture Atlas,

00:09:45.156 --> 00:09:47.426 A:middle
there're some major
benefits of having that.

00:09:47.666 --> 00:09:50.826 A:middle
So, number one, it minimizes
the amount of GL render state.

00:09:51.996 --> 00:09:54.356 A:middle
If you issue GL to all calls

00:09:54.356 --> 00:09:57.966 A:middle
that have identical render
state, you can combine them

00:09:57.966 --> 00:10:01.366 A:middle
into a single draw call to
minimize the amount of overhead

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:01.366 --> 00:10:03.516 A:middle
for the GL render script change.

00:10:04.516 --> 00:10:06.166 A:middle
It also minimizes the
amount of disk I/O.

00:10:07.136 --> 00:10:10.176 A:middle
Imagine you're loading 10-24
of this background tiles

00:10:10.306 --> 00:10:14.846 A:middle
versus loading a [inaudible]
of-- big texture files.

00:10:14.996 --> 00:10:20.056 A:middle
We also minimize the amount
of memory overhead as well

00:10:20.056 --> 00:10:21.916 A:middle
as avoid memories fragmentation.

00:10:22.296 --> 00:10:24.146 A:middle
I want to talk a little
bit more about this

00:10:24.146 --> 00:10:27.606 A:middle
and this is the Sprite Kit
specific feature where--

00:10:27.606 --> 00:10:31.296 A:middle
if you look at animation frame,
I'm idling here from top down,

00:10:31.296 --> 00:10:35.986 A:middle
I'm about 128 by 128
size, somewhat like that.

00:10:36.656 --> 00:10:40.986 A:middle
And if I'm animating
from standing up pose

00:10:40.986 --> 00:10:43.016 A:middle
to an attack pose,
that's an archer.

00:10:43.476 --> 00:10:46.896 A:middle
So, now my frames stretch
it into say 200 by 100

00:10:48.086 --> 00:10:51.946 A:middle
and if you play these
animation frames side by side,

00:10:52.486 --> 00:10:55.686 A:middle
you notice the feet will
actually pop between frames.

00:10:56.336 --> 00:10:59.006 A:middle
And to fix this, one of
the common methods is

00:10:59.036 --> 00:11:02.096 A:middle
to add transparency borders
to your animation frame

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:02.096 --> 00:11:04.996 A:middle
so that you make sure the
back foot is actually locking

00:11:04.996 --> 00:11:07.906 A:middle
down at exact position
between animation frames.

00:11:08.226 --> 00:11:12.206 A:middle
So, when you play this 42
frames at the same location,

00:11:12.306 --> 00:11:13.726 A:middle
animation look silky smooth.

00:11:14.706 --> 00:11:16.056 A:middle
OK, that solved the problem

00:11:16.056 --> 00:11:18.756 A:middle
but you introduce these
transparent borders

00:11:18.756 --> 00:11:21.846 A:middle
and we are paying 4 bytes
per pixel for something

00:11:21.846 --> 00:11:24.256 A:middle
that really doesn't
contribute to the screen output.

00:11:25.656 --> 00:11:28.486 A:middle
So, Sprite Kit is
actually doing trimming

00:11:28.486 --> 00:11:30.486 A:middle
for these transparency
edges before put

00:11:30.486 --> 00:11:32.156 A:middle
into to the final
Texture Atlas for you,

00:11:32.156 --> 00:11:33.036 A:middle
it helps you save memory.

00:11:33.586 --> 00:11:35.836 A:middle
And they require zero
work from your side.

00:11:37.086 --> 00:11:41.096 A:middle
You can also draw unusual shape,
textures, so you don't have

00:11:41.096 --> 00:11:43.966 A:middle
to follow on certain hardware
the power of tool rule

00:11:43.966 --> 00:11:46.386 A:middle
because the texture
can be any size

00:11:46.386 --> 00:11:47.486 A:middle
in putting into a Texture Atlas.

00:11:47.486 --> 00:11:49.036 A:middle
I can't render that
directly on the screen

00:11:49.036 --> 00:11:50.886 A:middle
without having to
worry about that.

00:11:51.536 --> 00:11:54.706 A:middle
So, to create a Texture Atlas
using Sprite Kit tool is

00:11:54.706 --> 00:11:55.476 A:middle
super easy.

00:11:55.966 --> 00:11:58.336 A:middle
It is integrated
directly into Xcode.

00:11:58.876 --> 00:12:03.776 A:middle
It's just a matter of dragging
a folder into your project

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:03.836 --> 00:12:05.036 A:middle
and you'll have your
Texture Atlas.

00:12:05.136 --> 00:12:08.156 A:middle
As long as the folder
has extension called

00:12:08.306 --> 00:12:10.086 A:middle
".atlas" we'll go
ahead and process them.

00:12:10.086 --> 00:12:12.286 A:middle
Each folder will turn into
a single Texture Atlas

00:12:12.506 --> 00:12:15.106 A:middle
and you can start referencing
them at runtime right away.

00:12:15.726 --> 00:12:16.966 A:middle
That's it, as simple as that.

00:12:17.126 --> 00:12:19.626 A:middle
So here, we have
a bunch of files

00:12:19.926 --> 00:12:21.716 A:middle
from Finder, drag
them into Xcode.

00:12:22.096 --> 00:12:25.506 A:middle
Call them Environment at
a folderextension.atlas,

00:12:25.916 --> 00:12:28.596 A:middle
press Command B and
you are done.

00:12:30.336 --> 00:12:34.406 A:middle
You can also use the Texture
Atlas generator not just

00:12:34.406 --> 00:12:37.656 A:middle
for 2D Sprite Kit enabled
games, you can also use it

00:12:37.656 --> 00:12:39.576 A:middle
for any OpenGL enabled games

00:12:39.966 --> 00:12:43.706 A:middle
because the Texture format
is OpenGL compatible.

00:12:44.066 --> 00:12:46.446 A:middle
So, if you want to
build [inaudible] game,

00:12:46.856 --> 00:12:50.036 A:middle
I use Texture Atlas say for
[inaudible] you can go ahead

00:12:50.036 --> 00:12:55.506 A:middle
and use that, the output
is atlas C bundle format

00:12:55.506 --> 00:12:57.236 A:middle
which contains a PNG file

00:12:57.536 --> 00:13:00.606 A:middle
which is the Texture Atlas
texture and the plist file.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.606 --> 00:13:03.226 A:middle
And plist file, you can
just read it in and iterate

00:13:03.226 --> 00:13:04.406 A:middle
through the NCDictionaries

00:13:04.406 --> 00:13:06.226 A:middle
and it will tell you
all the attribute

00:13:06.226 --> 00:13:07.296 A:middle
of every single texture

00:13:07.296 --> 00:13:09.126 A:middle
that include whether
they are rotated or not.

00:13:09.676 --> 00:13:10.976 A:middle
What's the original size?

00:13:10.976 --> 00:13:15.036 A:middle
Where it is inside the quad of
your Texture Atlas and so on.

00:13:16.596 --> 00:13:20.626 A:middle
But if you are using
Sprite Kit product template,

00:13:20.866 --> 00:13:23.326 A:middle
we automatically turn on
this build setting for you,

00:13:23.326 --> 00:13:24.726 A:middle
so you don't have
to do anything.

00:13:25.306 --> 00:13:29.246 A:middle
But if you are using-- trying to
enable this for your OpenGL game

00:13:29.246 --> 00:13:32.366 A:middle
or some game that's not using
Sprite Kit project template

00:13:32.956 --> 00:13:35.116 A:middle
in build settings, make
sure you turn this fully

00:13:35.116 --> 00:13:37.536 A:middle
on which I'll show you
in one of the demos.

00:13:37.536 --> 00:13:42.576 A:middle
So, what do we do for you when
you use the Texture Atlas?

00:13:42.666 --> 00:13:45.366 A:middle
What really goes on when
you press Command B?

00:13:46.336 --> 00:13:49.766 A:middle
So, we do the very basic
automatic combination

00:13:49.836 --> 00:13:50.606 A:middle
of textures.

00:13:51.316 --> 00:13:54.036 A:middle
We generate hardware
specific Texture Atlas.

00:13:54.636 --> 00:13:57.736 A:middle
So, if you have a folder of
images that contains Mac,

00:13:58.586 --> 00:14:02.636 A:middle
Mac OS 2X, iPhone,
iPhone 2X, iPad, iPad 2X

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:02.636 --> 00:14:05.136 A:middle
and the new iPhone
5 resolution format.

00:14:05.496 --> 00:14:06.056 A:middle
Guess what?

00:14:06.056 --> 00:14:09.516 A:middle
We generate a Texture Atlas
for each of those devices.

00:14:09.976 --> 00:14:13.256 A:middle
So, when you load a
Texture Atlas on the iPhone,

00:14:13.386 --> 00:14:17.106 A:middle
you don't have to pay a cost
for loading the similar textures

00:14:17.106 --> 00:14:19.586 A:middle
for the iPad or iPad 2X,
it doesn't really matter.

00:14:20.606 --> 00:14:24.786 A:middle
We don't want you to pull--
pay a memory overhead for that.

00:14:24.926 --> 00:14:27.346 A:middle
We also do a Texture split.

00:14:27.846 --> 00:14:30.716 A:middle
One, the Texture Atlas
greater 2K x 2K resolution.

00:14:31.236 --> 00:14:33.916 A:middle
The reason being is 2K x 2K,

00:14:33.916 --> 00:14:36.316 A:middle
it is the maximum
texture size that's going

00:14:36.316 --> 00:14:38.936 A:middle
to be supported on
all iOS 7 devices.

00:14:38.936 --> 00:14:42.056 A:middle
So, as soon as they go beyond
that range, it will split

00:14:42.056 --> 00:14:44.756 A:middle
into another Texture Atlas file
and it will automatically handle

00:14:44.756 --> 00:14:48.916 A:middle
that and you still get
the single plist file.

00:14:49.146 --> 00:14:49.966 A:middle
So, what else do we do?

00:14:49.966 --> 00:14:52.226 A:middle
When we process each
of the source images,

00:14:52.456 --> 00:14:55.636 A:middle
we do automatically rotation
which will take by 90-degree

00:14:55.636 --> 00:14:58.086 A:middle
and look through the light,
"Hey, this might fit better.

00:14:58.086 --> 00:15:01.646 A:middle
OK, let's rotate it,
leave it and put it in."

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:01.756 --> 00:15:04.066 A:middle
We trimmed the transparent
edges, so you don't have

00:15:04.066 --> 00:15:06.446 A:middle
to pay anything that doesn't
have final contribution

00:15:06.446 --> 00:15:08.496 A:middle
to the screen.

00:15:08.936 --> 00:15:11.096 A:middle
But when you request
that texture even

00:15:11.096 --> 00:15:13.846 A:middle
with the same dimension,
that's how it was on the disk?

00:15:14.456 --> 00:15:15.266 A:middle
So, it's magical.

00:15:15.746 --> 00:15:19.846 A:middle
For textures, that's
100 percent opaque.

00:15:19.846 --> 00:15:22.686 A:middle
We're also doing extrude
on each of the edges

00:15:22.686 --> 00:15:25.526 A:middle
by copying those edges
out by one pixel level.

00:15:25.866 --> 00:15:29.006 A:middle
So, if you have a
tile-based game like Adventure

00:15:29.196 --> 00:15:31.206 A:middle
and you move the cameras
around the background,

00:15:31.336 --> 00:15:32.726 A:middle
you will not see flashing edges

00:15:32.726 --> 00:15:34.346 A:middle
between because the
GL is rendering

00:15:34.346 --> 00:15:38.526 A:middle
into the neighboring
Texture tile.

00:15:38.696 --> 00:15:44.056 A:middle
So, here's a quick summary of
how we switched from loose files

00:15:44.056 --> 00:15:46.746 A:middle
in Adventure demo to
use Texture Atlas.

00:15:48.576 --> 00:15:54.356 A:middle
Originally, we go from 1660
file down to 26 Texture Atlases.

00:15:55.186 --> 00:15:57.306 A:middle
So, file iOS significantly
reduced

00:15:57.936 --> 00:16:00.276 A:middle
and also have some
memory savings.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.276 --> 00:16:03.216 A:middle
So, if you look at the animation
pixels that we're trimmed,

00:16:03.666 --> 00:16:06.376 A:middle
we are trimming the
transparency pixels for each

00:16:06.376 --> 00:16:07.216 A:middle
of the input Textures.

00:16:07.826 --> 00:16:11.536 A:middle
So the summation of the original
pixel count was 90 megapixels

00:16:11.666 --> 00:16:13.476 A:middle
before we turn in
to Texture Atlas.

00:16:14.576 --> 00:16:15.886 A:middle
And after using Texture Atlas,

00:16:16.126 --> 00:16:19.456 A:middle
the number of pixel count
reduced to 29 megapixels

00:16:20.316 --> 00:16:23.576 A:middle
and that's about 61
megapixels of saving,

00:16:23.576 --> 00:16:28.756 A:middle
each pixel cost 4 bytes and
we'll save about 244 max

00:16:29.666 --> 00:16:32.776 A:middle
for doing what, dragging
a folder into Xcode.

00:16:33.146 --> 00:16:34.366 A:middle
So, now, here's the fun part.

00:16:34.676 --> 00:16:36.896 A:middle
We have a Texture
Atlas, how do we load it?

00:16:37.746 --> 00:16:40.406 A:middle
OK, to load a loose
file from disk,

00:16:40.556 --> 00:16:44.066 A:middle
we have this SKTexture class
called TextureWithImageNamed,

00:16:45.156 --> 00:16:50.636 A:middle
you pass an image and we'll load
from disk to SKTexture instance.

00:16:51.896 --> 00:16:53.496 A:middle
Notice, there's couple
of things that's going

00:16:53.496 --> 00:16:54.546 A:middle
on in the background.

00:16:54.546 --> 00:16:56.596 A:middle
Now, I like to share a little
bit of insight with you.

00:16:57.116 --> 00:16:59.406 A:middle
So, Sprite Kit is maintaining
an internal texture cache.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.486 --> 00:17:03.766 A:middle
So, if you create a
spaceship texture instance,

00:17:04.136 --> 00:17:06.746 A:middle
and later on in another
class, you try to say, "Hey,

00:17:06.746 --> 00:17:09.685 A:middle
I want to create SKTexture
with the same spaceship."

00:17:10.096 --> 00:17:13.175 A:middle
And guess what, we keep
track of all the SKTextures,

00:17:13.486 --> 00:17:14.626 A:middle
that's a memory for you,

00:17:14.626 --> 00:17:16.346 A:middle
everything is probably
reference conduit.

00:17:16.756 --> 00:17:19.396 A:middle
All we do is, all right,
reference count plus one,

00:17:19.396 --> 00:17:21.646 A:middle
give you the previous
instance, so you don't have

00:17:22.165 --> 00:17:26.326 A:middle
to pay additional cost for
creating a duplicate texture.

00:17:27.536 --> 00:17:30.536 A:middle
And also, this way, you
don't have to have some sort

00:17:30.536 --> 00:17:32.906 A:middle
of a [inaudible] manager,
middle layer that keeps track

00:17:32.906 --> 00:17:35.206 A:middle
of all these texture
pointers that say,

00:17:35.586 --> 00:17:38.136 A:middle
"OK, this is app delegate.

00:17:38.386 --> 00:17:40.816 A:middle
Hello, I'm here, I'm the
one that's loading all these

00:17:40.816 --> 00:17:43.726 A:middle
textures and now let's
keep array of pointers.

00:17:43.726 --> 00:17:46.776 A:middle
So, if it's [inaudible]
class, here you go."

00:17:47.086 --> 00:17:49.266 A:middle
You don't have to
write any of that.

00:17:49.676 --> 00:17:53.126 A:middle
How do load now a texture from--

00:17:53.676 --> 00:17:55.886 A:middle
a Texture Atlas once you
put them into an atlas.

00:17:56.486 --> 00:17:58.196 A:middle
It's the exact same API.

00:17:58.596 --> 00:18:01.536 A:middle
You just reference its loose
file name, you don't have

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:01.536 --> 00:18:04.016 A:middle
to worry about which
Texture Atlas it is in.

00:18:04.206 --> 00:18:06.346 A:middle
You don't have to manually
load a Texture Atlas,

00:18:06.676 --> 00:18:09.206 A:middle
this way is 100 percent
automatic.

00:18:10.056 --> 00:18:13.406 A:middle
My favorite quote from Steve
Jobs is, "It just works."

00:18:13.616 --> 00:18:16.156 A:middle
So here, we have
a Texture Atlas,

00:18:16.156 --> 00:18:18.386 A:middle
inside we have the
same tree that's

00:18:18.386 --> 00:18:19.936 A:middle
on the bottom left corner.

00:18:19.936 --> 00:18:24.056 A:middle
Let's use the same API load, you
get exact same texture image.

00:18:24.636 --> 00:18:27.946 A:middle
And now, I want to
talk a little bit

00:18:28.186 --> 00:18:30.216 A:middle
about loose file
versus Texture Atlas.

00:18:30.896 --> 00:18:33.476 A:middle
We support both and they
are interchangeable.

00:18:34.086 --> 00:18:37.776 A:middle
So, number one, it gave you
the advantage of switching back

00:18:37.776 --> 00:18:41.336 A:middle
and forth between lose texture
files versus Texture Atlas.

00:18:41.536 --> 00:18:45.246 A:middle
You no longer have to recompile
your code or having a, "Hey,

00:18:45.246 --> 00:18:47.396 A:middle
if debug, let's use
texture files.

00:18:47.676 --> 00:18:49.576 A:middle
If released, let's
use Texture Atlas."

00:18:49.966 --> 00:18:51.166 A:middle
No, you don't know--
you don't have

00:18:51.166 --> 00:18:53.036 A:middle
to recompile code
for any of that.

00:18:54.216 --> 00:18:56.466 A:middle
And second, we take loose files,

00:18:58.076 --> 00:19:00.406 A:middle
loose files will have
precedents over Texture Atlas.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.976 --> 00:19:03.236 A:middle
So, having environment
Texture Atlas

00:19:03.276 --> 00:19:07.196 A:middle
and inside you have a tree
object in there and you give

00:19:07.196 --> 00:19:08.796 A:middle
that build to an artist.

00:19:08.846 --> 00:19:09.856 A:middle
And the artist will say, "Oh,

00:19:09.856 --> 00:19:12.126 A:middle
I wanted to just make some
minor changes with these trees.

00:19:12.126 --> 00:19:13.166 A:middle
I don't want to preview that."

00:19:13.746 --> 00:19:16.576 A:middle
So, guess what, the artist
can just drop in that tree--

00:19:16.576 --> 00:19:19.606 A:middle
the new tree that he or she
created inside your bundle,

00:19:19.606 --> 00:19:22.716 A:middle
re-launched the game, we found
out there's a loose over tree

00:19:22.716 --> 00:19:25.256 A:middle
and then we'll manually
load that, so you don't have

00:19:25.256 --> 00:19:28.346 A:middle
to again compile, debug build
our special artist version

00:19:28.346 --> 00:19:30.606 A:middle
and you hand it out.

00:19:30.876 --> 00:19:36.466 A:middle
OK, we also provide, for
advance users, the fine control

00:19:36.466 --> 00:19:37.486 A:middle
of over a Texture Atlas.

00:19:37.486 --> 00:19:39.276 A:middle
So, if you do feel the need

00:19:39.276 --> 00:19:42.686 A:middle
of creating a SKTexture
instance, feel free to do so.

00:19:43.706 --> 00:19:48.286 A:middle
We support-- we follow the same
UIKit and AppKit naming commands

00:19:48.286 --> 00:19:51.256 A:middle
and notice here when you specify
your environment, you don't have

00:19:51.256 --> 00:19:52.766 A:middle
to specify extension,
you don't have

00:19:52.816 --> 00:19:55.976 A:middle
to specify I2X-iPhone,
any of that.

00:19:57.206 --> 00:19:59.346 A:middle
So, we'll use SKTexture
Construct--

00:19:59.756 --> 00:20:03.636 A:middle
the Class Initializer initialize
an environment Texture Atlas.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:03.956 --> 00:20:06.056 A:middle
We get number of
names which is array.

00:20:06.056 --> 00:20:07.766 A:middle
We'll go ahead, iterate
through the array

00:20:08.046 --> 00:20:11.636 A:middle
and create a corresponding
SKTexture by calling the SK--

00:20:11.736 --> 00:20:12.956 A:middle
the Texture Named Method.

00:20:12.956 --> 00:20:17.156 A:middle
And now, I want to have
a quick demo of creating

00:20:17.156 --> 00:20:21.096 A:middle
and loading Texture and also
I want to cover the two ways

00:20:21.096 --> 00:20:22.136 A:middle
of loading a Texture

00:20:22.136 --> 00:20:24.776 A:middle
from a Texture Atlas
including the loose file way

00:20:24.776 --> 00:20:27.026 A:middle
and second I want to
cover the automatic--

00:20:27.026 --> 00:20:30.866 A:middle
the manual way of creating
SKTexture Atlas instance

00:20:30.866 --> 00:20:32.986 A:middle
and iterate that.

00:20:33.956 --> 00:20:36.976 A:middle
So, we'll begin by
creating OS X project.

00:20:37.516 --> 00:20:45.036 A:middle
[ Pause ]

00:20:45.536 --> 00:20:50.936 A:middle
Sure, so we need to render
some background in our scene

00:20:50.936 --> 00:20:55.676 A:middle
so we can go ahead
and drag in a--

00:20:55.676 --> 00:20:59.176 A:middle
or borrow some of the
environment art from Adventure.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.436 --> 00:21:04.326 A:middle
So Adventure Atlas, drag
that in, drop it in and say,

00:21:04.326 --> 00:21:07.906 A:middle
"I want to copy it over
to the target, finished."

00:21:08.426 --> 00:21:10.156 A:middle
Let's have a look.

00:21:10.156 --> 00:21:16.396 A:middle
So, we have about 12 files here
and they each look different,

00:21:18.356 --> 00:21:20.816 A:middle
so we decided to use
the big tree base

00:21:20.816 --> 00:21:22.696 A:middle
which is the first
picture and let's use

00:21:22.696 --> 00:21:24.946 A:middle
that as our background,
how do we do that?

00:21:25.606 --> 00:21:29.576 A:middle
Let's clean up the
initialization code.

00:21:30.516 --> 00:21:36.356 A:middle
[ Pause ]

00:21:36.856 --> 00:21:39.726 A:middle
All right, so let's create a
Texture, let's load that Texture

00:21:39.726 --> 00:21:44.516 A:middle
by creating Sprite node so we
use the spriteNodeWithImageNamed

00:21:44.626 --> 00:21:46.906 A:middle
by specifying the
loose image name here.

00:21:46.906 --> 00:21:48.266 A:middle
If you look at the
big tree base,

00:21:48.266 --> 00:21:51.156 A:middle
that matter was a big tree base
[inaudible] on the left side,

00:21:51.586 --> 00:21:54.286 A:middle
set up the anchorpoint,
set up the position and as

00:21:54.286 --> 00:21:57.336 A:middle
with the scene, we can
just build and run that.

00:21:58.516 --> 00:22:02.676 A:middle
[ Pause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:03.176 --> 00:22:03.876 A:middle
There you go.

00:22:03.876 --> 00:22:07.176 A:middle
So we have one node in the
scene and that's our background.

00:22:07.536 --> 00:22:08.756 A:middle
OK, so this is the simple way

00:22:08.756 --> 00:22:11.156 A:middle
of loading a single
Texture from Texture Atlas.

00:22:12.396 --> 00:22:15.316 A:middle
Cool, so let's look at the
app bundle to see what atlas,

00:22:15.316 --> 00:22:16.896 A:middle
what actually goes into our app.

00:22:17.796 --> 00:22:21.246 A:middle
So, say, show Package Contents,
let's go to the Resource folder

00:22:22.296 --> 00:22:24.656 A:middle
and you notice you
have an Atlas C

00:22:25.626 --> 00:22:29.286 A:middle
which is the compiled
version of the Source folder.

00:22:29.826 --> 00:22:34.396 A:middle
So inside, we have our
Texture Atlas which pull images

00:22:34.396 --> 00:22:37.226 A:middle
in there, have the
corresponding plist files,

00:22:37.366 --> 00:22:41.536 A:middle
you can see aliases, whether the
image is fully opaque or not,

00:22:41.536 --> 00:22:44.176 A:middle
we can perform some
optimization in GL level.

00:22:44.556 --> 00:22:45.966 A:middle
What's the original size?

00:22:46.156 --> 00:22:48.746 A:middle
Where it is located
inside the Texture Atlas,

00:22:48.746 --> 00:22:50.566 A:middle
whether the texture is rotated,

00:22:50.686 --> 00:22:52.576 A:middle
all the attributes that's
needed for the runtime?

00:22:54.386 --> 00:22:56.176 A:middle
Now, let's go ahead and
animate the character.

00:22:56.346 --> 00:23:01.726 A:middle
Let's drag in a Boss-- a packet
animation into our scene.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:01.876 --> 00:23:03.986 A:middle
So make sure to copy
into the folder

00:23:03.986 --> 00:23:08.686 A:middle
so now we still call it atlas
extension and now if we look at,

00:23:08.686 --> 00:23:10.906 A:middle
we have about 42
animation frames

00:23:11.126 --> 00:23:12.736 A:middle
of this animation sequence.

00:23:14.996 --> 00:23:17.666 A:middle
So, let's go ahead and add
a character to the scene

00:23:17.666 --> 00:23:18.776 A:middle
and start animating him.

00:23:19.336 --> 00:23:24.896 A:middle
So first, I'd like to add an
instance variable called Boss

00:23:25.026 --> 00:23:27.186 A:middle
and now we have this
animation frames

00:23:27.186 --> 00:23:28.416 A:middle
that we want to load it in.

00:23:28.416 --> 00:23:29.126 A:middle
Let's create NSArray

00:23:29.126 --> 00:23:30.976 A:middle
that contains all
these animation frames.

00:23:31.516 --> 00:23:44.496 A:middle
[ Pause ]

00:23:44.996 --> 00:23:47.456 A:middle
So let's initialize the array,

00:23:47.456 --> 00:23:51.026 A:middle
create a SKTexture Atlas
instance that's Boss--

00:23:51.116 --> 00:23:56.396 A:middle
called Boss Attack which
matches our folder name.

00:23:57.946 --> 00:24:02.366 A:middle
We want to iterate through
this Texture Atlas by look up,

<HTML><HEAD>
<TITLE>Request Timeout</TITLE>
</HEAD><BODY>
<H1>Request Timeout</H1>
The server timed out while waiting for the browser's request.<P>
Reference&#32;&#35;2&#46;455732b8&#46;1373789568&#46;0
</BODY></HTML>
WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:00.336 --> 00:25:02.826 A:middle
However the corresponding
plist file.

00:25:03.516 --> 00:25:11.916 A:middle
[ Pause ]

00:25:12.416 --> 00:25:15.266 A:middle
And now to animate
it, let's go ahead

00:25:15.266 --> 00:25:17.356 A:middle
and add our animation
playback logic

00:25:17.356 --> 00:25:21.496 A:middle
to say the mouse click
handler so what we want

00:25:21.496 --> 00:25:24.686 A:middle
to do is we'd run
action on the Sprite

00:25:24.986 --> 00:25:26.386 A:middle
which is the Boss character.

00:25:26.666 --> 00:25:31.526 A:middle
So, we first defined animation
playback speed, we use SKAction

00:25:31.526 --> 00:25:37.706 A:middle
of anime with texture and
now our Boss should be able

00:25:37.706 --> 00:25:38.646 A:middle
to animate.

00:25:43.356 --> 00:25:45.096 A:middle
All right, every
time we click them--

00:25:45.566 --> 00:25:48.306 A:middle
the button, we'll have
animation sequence.

00:25:52.386 --> 00:25:53.926 A:middle
It's very simple.

00:25:59.156 --> 00:26:01.606 A:middle
So now, I would like to
show you the Build options.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:01.976 --> 00:26:04.576 A:middle
So if you go to Build
settings and just make sure,

00:26:04.776 --> 00:26:06.506 A:middle
because we're using the
Sprite Kit template,

00:26:06.926 --> 00:26:09.286 A:middle
so this option is
automatically enabled.

00:26:10.596 --> 00:26:13.146 A:middle
The next part I want to
cover is visual effects.

00:26:14.636 --> 00:26:16.636 A:middle
Generally speaking, there
are two vague categories

00:26:16.636 --> 00:26:17.396 A:middle
of visual effects.

00:26:17.576 --> 00:26:20.186 A:middle
Number one, post processing
which means that we are

00:26:20.186 --> 00:26:22.186 A:middle
to perform some level
of image processing

00:26:22.186 --> 00:26:25.686 A:middle
on a given render target
which can be [inaudible],

00:26:25.746 --> 00:26:27.796 A:middle
frame buffer or an
input texture.

00:26:28.396 --> 00:26:30.446 A:middle
If you're trying to say
you have a racing game

00:26:30.446 --> 00:26:32.186 A:middle
and playback a motion blur,

00:26:32.216 --> 00:26:34.936 A:middle
usually people grab the
frame buffer, downsize,

00:26:35.016 --> 00:26:38.166 A:middle
followed by app sample
and then you squeeze all

00:26:38.166 --> 00:26:43.886 A:middle
that with radius blur that
has alpha 100 percent in there

00:26:43.886 --> 00:26:45.566 A:middle
so the inside of the
center of the screen

00:26:45.566 --> 00:26:47.826 A:middle
as 100 percent you focus
and slowly blurred out

00:26:47.826 --> 00:26:49.316 A:middle
and you [inaudible] that
on the final screen.

00:26:49.766 --> 00:26:53.116 A:middle
So, totally support that
with-- via Core Image Filters.

00:26:53.176 --> 00:26:57.296 A:middle
We can't show a quick demo and
we also support particle systems

00:26:58.056 --> 00:27:00.776 A:middle
that usually people found a very
large number of small particles

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:00.776 --> 00:27:03.356 A:middle
on the screen and
similarly it's a lifetime

00:27:03.736 --> 00:27:06.386 A:middle
and we can use SKEmitterNode
for that.

00:27:07.876 --> 00:27:10.436 A:middle
So in terms of using
post processing

00:27:10.436 --> 00:27:14.646 A:middle
with Core Image Filters, it can
be applied to any SKEffectNode

00:27:15.066 --> 00:27:19.766 A:middle
so the effect will apply to all
the children, all the children

00:27:19.946 --> 00:27:21.756 A:middle
on this app node will
get flatten first

00:27:21.836 --> 00:27:24.076 A:middle
and the effect will be
applied on this app tree

00:27:24.736 --> 00:27:29.486 A:middle
so you can specify any
filter on the filter property

00:27:29.916 --> 00:27:31.186 A:middle
by creating a new CIFilter.

00:27:31.336 --> 00:27:34.486 A:middle
So here, we created a Gaussian
blur which is quick and simple.

00:27:35.006 --> 00:27:40.496 A:middle
And you can also apply Core
Image Filters with any textures.

00:27:40.746 --> 00:27:43.866 A:middle
So the Texture has a
selector that call Texture

00:27:43.966 --> 00:27:47.086 A:middle
by applying CIFilters, here
we apply same Gaussian blur

00:27:47.426 --> 00:27:48.506 A:middle
to the [inaudible] input texture

00:27:48.506 --> 00:27:49.826 A:middle
and then you get
a result texture

00:27:49.826 --> 00:27:51.456 A:middle
as having that effect on there.

00:27:52.536 --> 00:27:53.826 A:middle
So, we'll have a quick demo

00:27:54.226 --> 00:27:58.166 A:middle
of Sprite Kit running
with CIFilters.

00:27:59.486 --> 00:28:02.516 A:middle
So here, we have a trees
demo from [inaudible] DC 2012

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:02.516 --> 00:28:04.676 A:middle
which was created using
a development version

00:28:04.926 --> 00:28:08.006 A:middle
of Sprite Kit and CIFilter.

00:28:08.396 --> 00:28:11.256 A:middle
So here, we're rendering trees
with three different layers.

00:28:11.376 --> 00:28:15.156 A:middle
We can go ahead and add, you
know, Gaussian blurs to blur all

00:28:15.156 --> 00:28:19.276 A:middle
to show some depths, I know as
well as add some random effects

00:28:19.756 --> 00:28:23.136 A:middle
so that it will show
the creepy feeling.

00:28:23.136 --> 00:28:27.436 A:middle
We can add some particles and
use the old green filters on top

00:28:27.746 --> 00:28:31.226 A:middle
and on the very top,
we can add a distortion

00:28:31.226 --> 00:28:32.486 A:middle
of the [inaudible] environment

00:28:33.026 --> 00:28:41.506 A:middle
by applying the distortion
effect on the wall, on the bulk.

00:28:44.476 --> 00:28:45.546 A:middle
[Applause] So, quick and easy.

00:28:45.846 --> 00:28:49.356 A:middle
You don't have to write any of
the specialized shaders and all

00:28:49.356 --> 00:28:51.796 A:middle
of this is available
on both OS X and iOS.

00:28:51.796 --> 00:28:56.846 A:middle
Now, I want to dive in a little
bit deeper for particles.

00:28:57.156 --> 00:29:02.096 A:middle
So the particle system is being
heavily used for Adventure.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:02.676 --> 00:29:05.416 A:middle
So the leaves, the
damages, the flashes

00:29:05.616 --> 00:29:08.776 A:middle
and the spawning effects are
all done with particle effects.

00:29:09.476 --> 00:29:12.466 A:middle
And the Adventure Game
actually didn't create those

00:29:12.496 --> 00:29:13.316 A:middle
particles manually.

00:29:13.646 --> 00:29:15.926 A:middle
It uses one of the tools
that I will provide as part

00:29:15.926 --> 00:29:17.136 A:middle
of the Sprite Kit Framework.

00:29:17.586 --> 00:29:22.886 A:middle
I iterate these particles
and generate SKS file

00:29:22.886 --> 00:29:26.226 A:middle
and at the runtime, we
deserialized the SKS file

00:29:26.226 --> 00:29:28.516 A:middle
into SKEmitterNode and
add it to the scene.

00:29:28.646 --> 00:29:31.946 A:middle
All the property are already
set and it's good to go.

00:29:32.186 --> 00:29:35.396 A:middle
In the particle editor, we
provide about eight templates

00:29:35.596 --> 00:29:37.636 A:middle
and this is just one of
the templates you can use

00:29:37.666 --> 00:29:39.926 A:middle
to get you started to
whatever the quick effect

00:29:40.326 --> 00:29:41.166 A:middle
that you are looking for.

00:29:42.176 --> 00:29:47.456 A:middle
In terms of SKEmitterNode, we
want to provide a flexibility

00:29:47.456 --> 00:29:50.646 A:middle
for you to get to the exact
look and feel that you want

00:29:50.646 --> 00:29:53.446 A:middle
for your game in order to
generate a particular look

00:29:53.446 --> 00:29:58.206 A:middle
of the particle system therefore
we provided a lot of properties.

00:29:59.676 --> 00:30:03.776 A:middle
But the [inaudible] property is
very time consuming therefore we

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:03.776 --> 00:30:05.896 A:middle
build a particle
editor inside Xcode.

00:30:06.886 --> 00:30:11.536 A:middle
You can use it to edit any of
the attribute of SKEmitterNode

00:30:11.576 --> 00:30:13.806 A:middle
and also is a good
design pattern

00:30:13.806 --> 00:30:16.656 A:middle
because they separate the
design of the data away

00:30:16.656 --> 00:30:18.096 A:middle
from the engineering
of the code.

00:30:18.946 --> 00:30:21.146 A:middle
And it's also one of
the best ways to learn

00:30:21.146 --> 00:30:22.486 A:middle
about SKEmitter attributes,

00:30:22.486 --> 00:30:25.636 A:middle
because it live editor you
can just drag an attribute

00:30:25.636 --> 00:30:28.616 A:middle
to see the change lively
because we integrate a SKView

00:30:28.616 --> 00:30:29.556 A:middle
inside Xcode.

00:30:31.576 --> 00:30:35.456 A:middle
Here is a quick look of what
the particle editor look

00:30:35.456 --> 00:30:37.066 A:middle
like inside of Xcode.

00:30:37.066 --> 00:30:38.496 A:middle
As you can see, we open SKS file

00:30:38.546 --> 00:30:41.246 A:middle
which a particle
file inside Adventure

00:30:41.946 --> 00:30:45.476 A:middle
and then we can quickly make
a modification to birth rate

00:30:45.916 --> 00:30:48.296 A:middle
and we see the effect
right away.

00:30:52.156 --> 00:30:54.666 A:middle
For particles, we also
provide keyframe sequences.

00:30:54.936 --> 00:30:56.896 A:middle
You can use it to apply some

00:30:56.896 --> 00:30:59.846 A:middle
of the properties of
the SKEmitterNode.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.426 --> 00:31:03.416 A:middle
Here, we are applying the
keyframe sequence to the color.

00:31:04.146 --> 00:31:06.536 A:middle
So, it gives you
100 percent control

00:31:06.536 --> 00:31:09.296 A:middle
of what a color sequence look
like from the birth point

00:31:10.656 --> 00:31:12.426 A:middle
of a particle till its death.

00:31:13.636 --> 00:31:16.316 A:middle
So here, when the
particle was spawned,

00:31:16.316 --> 00:31:19.966 A:middle
it have a little bit brown color
and then later on at 25 percent

00:31:19.966 --> 00:31:22.646 A:middle
of age, we go to a
white followed by a red

00:31:23.096 --> 00:31:25.486 A:middle
and when it's-- at the
end of its life cycle,

00:31:25.486 --> 00:31:27.796 A:middle
we turn to a slightly
blue color.

00:31:28.336 --> 00:31:32.616 A:middle
You can also use keyframe
sequences on other properties.

00:31:32.906 --> 00:31:34.596 A:middle
For example, apply
it to a scale.

00:31:34.966 --> 00:31:36.366 A:middle
You can construct this in code.

00:31:37.426 --> 00:31:39.326 A:middle
To-- Here, we have
a quick example

00:31:39.326 --> 00:31:42.356 A:middle
of showing you how we can
use a keyframe sequence

00:31:42.356 --> 00:31:43.536 A:middle
to apply to a scale.

00:31:43.536 --> 00:31:47.346 A:middle
So here, we specify different
timelines and once it was spawn,

00:31:47.346 --> 00:31:51.516 A:middle
it have a scale of 0.2, at the
quarter of the list is timeline,

00:31:51.516 --> 00:31:55.886 A:middle
we change to a scale
to 0.7 and any values

00:31:55.886 --> 00:31:57.636 A:middle
in between will be
interpolating that

00:31:57.636 --> 00:32:00.586 A:middle
and you can just set directly
on a scale of sequence

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:01.016 --> 00:32:05.766 A:middle
and it will be affecting the
scale throughout its lifetime.

00:32:07.436 --> 00:32:10.376 A:middle
You can also add
actions to particles.

00:32:11.826 --> 00:32:14.116 A:middle
Each particle, as soon as they
are spawned by the emitter,

00:32:14.116 --> 00:32:17.326 A:middle
can ask you some of
the complex behaviors.

00:32:17.626 --> 00:32:21.016 A:middle
So if you have really, really
complex behavior that you want--

00:32:21.016 --> 00:32:23.096 A:middle
you're going after
for SKEmitterNode,

00:32:23.546 --> 00:32:24.876 A:middle
we have action property.

00:32:24.876 --> 00:32:27.726 A:middle
Here is a quick example.

00:32:28.486 --> 00:32:30.866 A:middle
This is actually
a particle system.

00:32:31.626 --> 00:32:34.396 A:middle
Each of the particles is
playing back 42 frames

00:32:34.396 --> 00:32:36.866 A:middle
of animation sequence
on a certain speed.

00:32:37.456 --> 00:32:41.006 A:middle
Just to show you some of
the basic functionality

00:32:41.006 --> 00:32:44.766 A:middle
of how powerful particle
actions can give you.

00:32:46.236 --> 00:32:49.566 A:middle
And now, once we tune
the particle system

00:32:49.566 --> 00:32:51.256 A:middle
to the exact look and
feel of what we want,

00:32:51.256 --> 00:32:53.906 A:middle
how do we load that at runtime?

00:32:54.836 --> 00:33:00.576 A:middle
So what we do is we use
NSKeyedUnarchiver and just say,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.576 --> 00:33:04.786 A:middle
we want to unarchive BossDamage,
the SKS file and that's it.

00:33:04.786 --> 00:33:06.756 A:middle
It's a one line and
at this point,

00:33:06.756 --> 00:33:10.016 A:middle
you have your SKEmitterNode
instance ready to go,

00:33:10.016 --> 00:33:14.696 A:middle
ready to be added to the
scene, and ready to animate.

00:33:14.856 --> 00:33:16.876 A:middle
Before we jump into the
demo, I want to do some--

00:33:17.596 --> 00:33:19.166 A:middle
give some of the
quick recommendations

00:33:19.166 --> 00:33:22.036 A:middle
for using particle system
like any particle system,

00:33:22.546 --> 00:33:24.176 A:middle
overhauling is not a good thing.

00:33:24.626 --> 00:33:27.196 A:middle
So let's-- one of the good
recommendations I would give

00:33:27.196 --> 00:33:30.326 A:middle
out is to keep the birth
down and we'll recommend

00:33:30.326 --> 00:33:34.416 A:middle
to iterate your particle files
inside using the Xcode editor

00:33:34.416 --> 00:33:38.226 A:middle
to allow you to see the changes
live, perform iteration quickly

00:33:38.226 --> 00:33:41.066 A:middle
with no [inaudible],
command S, command R

00:33:41.066 --> 00:33:42.986 A:middle
and you see the change
live right away.

00:33:43.506 --> 00:33:46.126 A:middle
When particle emitters are not
visible, I'll recommend you

00:33:46.126 --> 00:33:49.766 A:middle
to remove that and Spencer
later on will help--

00:33:49.766 --> 00:33:51.406 A:middle
will come on the stage
and show you how--

00:33:51.556 --> 00:33:55.306 A:middle
sometimes a few particles can
just achieve the very same look

00:33:55.506 --> 00:33:56.426 A:middle
that you're looking after.

00:33:56.966 --> 00:34:01.516 A:middle
So with this, I will
start a quick demo

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:01.516 --> 00:34:02.906 A:middle
of using a particle system.

00:34:03.336 --> 00:34:05.686 A:middle
Let's go ahead and create
a Sprite Kit project,

00:34:05.856 --> 00:34:08.446 A:middle
let's call it demo particles.

00:34:09.186 --> 00:34:15.466 A:middle
So in here, we already
have the scene.

00:34:15.466 --> 00:34:19.626 A:middle
Let's go ahead and create a
particle file from resource.

00:34:20.196 --> 00:34:23.716 A:middle
As you can see, there are
eight different types that's

00:34:23.716 --> 00:34:24.846 A:middle
being provided.

00:34:24.846 --> 00:34:29.666 A:middle
So let's just maybe go crazy
with starting with spark.

00:34:31.376 --> 00:34:33.235 A:middle
Make sure it is in our target.

00:34:33.406 --> 00:34:36.255 A:middle
Let's create-- and this
is what it look like.

00:34:37.476 --> 00:34:41.045 A:middle
Cool. So how about
that's load that in game?

00:34:42.335 --> 00:34:46.795 A:middle
Here I want to tab it, so that
every time when a mouse click,

00:34:47.045 --> 00:34:55.176 A:middle
let's generate SKEmitterNode
and add that to the scene.

00:34:55.396 --> 00:34:56.476 A:middle
Use NSKeyed--

00:34:57.516 --> 00:35:06.336 A:middle
[ Pause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:06.836 --> 00:35:11.076 A:middle
-- Unarchive with file,
that's where we're looking for

00:35:11.076 --> 00:35:15.026 A:middle
and then we're going to
NSBundle, getting the mainBundle

00:35:20.956 --> 00:35:26.256 A:middle
and then we're going to get
pathForResource of our--

00:35:28.816 --> 00:35:33.686 A:middle
my particle file with
file extension, sks.

00:35:36.816 --> 00:35:41.316 A:middle
Then-- well, we have some error,
we'll go ahead and fix that.

00:35:42.006 --> 00:35:43.896 A:middle
I set the position
to be the location.

00:35:44.366 --> 00:35:47.826 A:middle
We'll add that to the scene.

00:35:49.516 --> 00:35:54.596 A:middle
[ Pause ]

00:35:55.096 --> 00:35:56.886 A:middle
This is what the error is.

00:35:57.516 --> 00:36:09.296 A:middle
[ Pause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:09.796 --> 00:36:12.076 A:middle
All right, so every
time I click the mouse,

00:36:16.656 --> 00:36:18.246 A:middle
what's the particle count now?

00:36:19.636 --> 00:36:22.886 A:middle
6,500, let's do at
60 frames per second.

00:36:23.416 --> 00:36:26.606 A:middle
So, OK, so that's easy to load,
one liner, setting the position,

00:36:26.606 --> 00:36:28.746 A:middle
adding it, and let's go
ahead and make some changes

00:36:28.746 --> 00:36:30.936 A:middle
to the particle, let's
see how easy it is.

00:36:31.346 --> 00:36:34.516 A:middle
So, I want to create a
similar damage look as soon

00:36:34.516 --> 00:36:36.536 A:middle
as I get hit in the [inaudible].

00:36:36.536 --> 00:36:39.906 A:middle
So, let's go ahead and make
some changes to these particles.

00:36:40.006 --> 00:36:42.456 A:middle
Number one, the birth rate
is a little bit too high,

00:36:42.456 --> 00:36:45.886 A:middle
I don't really need 2,000
so let's go with say, 400,

00:36:46.376 --> 00:36:50.116 A:middle
that looks a little bit
better and the lifetime,

00:36:50.186 --> 00:36:53.016 A:middle
I want to make it slightly
shorter, so let's go with that

00:36:53.506 --> 00:36:57.386 A:middle
and add a little bit
variance for your lifetime.

00:36:57.386 --> 00:36:59.606 A:middle
OK, so that's a little
bit better.

00:36:59.926 --> 00:37:04.616 A:middle
And how about we-- now the Y
value is a little bit flat,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:04.866 --> 00:37:05.806 A:middle
let's go ahead and stretch

00:37:05.996 --> 00:37:08.846 A:middle
that by a little bit,
so that will be 50.

00:37:09.206 --> 00:37:11.636 A:middle
I think the angle is
a little bit limited,

00:37:11.636 --> 00:37:14.416 A:middle
so let's go ahead
and do all angles.

00:37:14.926 --> 00:37:19.416 A:middle
Speed is a little bit too
high right now and we say,

00:37:19.476 --> 00:37:23.366 A:middle
let's change it to 200,
and let's not do variance,

00:37:23.856 --> 00:37:26.916 A:middle
and obviously if this is
a top down looking games,

00:37:26.916 --> 00:37:29.396 A:middle
so we don't really need a
gravity here, so let's go ahead

00:37:29.396 --> 00:37:34.336 A:middle
and set that to be 0, and
we can change the scale,

00:37:34.976 --> 00:37:39.356 A:middle
say go from 0.4 and we want to
do an increment on the scale

00:37:40.466 --> 00:37:44.446 A:middle
in a positive direction
and wallah.

00:37:45.356 --> 00:37:47.046 A:middle
So, if we decided to go
ahead and change some

00:37:47.046 --> 00:37:51.236 A:middle
of the damaged colors, we can
change slightly like that.

00:37:51.326 --> 00:37:53.206 A:middle
And how about if we make--

00:37:53.206 --> 00:37:57.356 A:middle
if we decide to that this damage
is only one time, I get hit,

00:37:57.486 --> 00:38:02.366 A:middle
I spawned 200 particles and
the particle will finish.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:02.606 --> 00:38:05.746 A:middle
So, let's-- we can set
that by setting the maximum

00:38:05.746 --> 00:38:06.536 A:middle
attribute here.

00:38:06.536 --> 00:38:12.246 A:middle
We go 200, so let's run that.

00:38:15.016 --> 00:38:19.026 A:middle
So, every time I get
hit, get the particle

00:38:19.026 --> 00:38:20.126 A:middle
and particle goes away.

00:38:21.516 --> 00:38:26.906 A:middle
[ Applause ]

00:38:27.406 --> 00:38:32.336 A:middle
Next, I like to invite Graeme
Devine and Spencer Lindsay,

00:38:32.776 --> 00:38:35.806 A:middle
will be talking to us about
building the Adventure Game.

00:38:36.236 --> 00:38:36.826 A:middle
&gt;&gt; Thank you Norman.

00:38:37.606 --> 00:38:39.826 A:middle
Hello, I'm Graeme Devine.

00:38:40.026 --> 00:38:40.956 A:middle
&gt;&gt; I'm Spencer Lindsay.

00:38:41.316 --> 00:38:42.686 A:middle
&gt;&gt; Today, we're going
to be talking to you

00:38:42.686 --> 00:38:43.806 A:middle
about building Adventure.

00:38:44.596 --> 00:38:48.096 A:middle
So, what happens with
the do to build it?

00:38:48.466 --> 00:38:49.626 A:middle
[laughs] So, we know
a little bit about it.

00:38:50.006 --> 00:38:52.196 A:middle
We're going to talk about some
of the technical challenges

00:38:52.296 --> 00:38:55.426 A:middle
that we faced in actually
making the demo and some

00:38:55.426 --> 00:38:57.506 A:middle
of the art challenges
that's being able to--

00:38:57.506 --> 00:38:59.596 A:middle
that we have to do unless
you're making the demo too.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:00.776 --> 00:39:02.436 A:middle
So, let's take a quick
look at the demo again,

00:39:02.436 --> 00:39:05.286 A:middle
just one last time so that you
can-- so you've seen it lots.

00:39:05.286 --> 00:39:07.686 A:middle
We talked about how the
game has [inaudible] you got

00:39:07.686 --> 00:39:09.036 A:middle
to talk about.

00:39:09.586 --> 00:39:12.856 A:middle
So, the parallax effect that--
as the guy walks around,

00:39:13.166 --> 00:39:16.396 A:middle
we have leaves on our trees
and the-- that the, you know,

00:39:16.396 --> 00:39:19.146 A:middle
that look so nice and parallax
and so forth that looks awesome.

00:39:19.396 --> 00:39:22.526 A:middle
The guy is bumping into the wall
and he sees a colliding well

00:39:22.526 --> 00:39:25.016 A:middle
and he's sliding across this,
you know, the walls nicely,

00:39:25.426 --> 00:39:28.456 A:middle
beautiful leaves falling from
the trees and looking, you know,

00:39:28.456 --> 00:39:30.296 A:middle
nice and thready as
they fall to the ground

00:39:30.686 --> 00:39:33.486 A:middle
and Sprites are animazing
like that's a real characters

00:39:33.486 --> 00:39:35.226 A:middle
and we're going to talk about
how we actually made that too.

00:39:35.976 --> 00:39:37.936 A:middle
Let's talk about the parallax.

00:39:38.646 --> 00:39:41.186 A:middle
Parallax is an old effect that's
a, you know, that we've used

00:39:41.186 --> 00:39:42.636 A:middle
in games in many, many years.

00:39:42.636 --> 00:39:44.836 A:middle
It's actually really easy to do.

00:39:44.876 --> 00:39:47.356 A:middle
If you're looking at the
formula then writing it down,

00:39:47.356 --> 00:39:51.316 A:middle
you can stop doing that now
'cause you don't use formulas.

00:39:51.316 --> 00:39:55.186 A:middle
The sub class SKNode from
more or less everything that,

00:39:55.186 --> 00:39:56.716 A:middle
you know, that we have in the
game, the characters, the,

00:39:56.756 --> 00:39:58.946 A:middle
you know, that the parallax
nodes, anything that's

00:39:58.946 --> 00:40:01.076 A:middle
in the game is really
a sub class of SKNode,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:01.076 --> 00:40:01.966 A:middle
it's a good way of doing it.

00:40:02.516 --> 00:40:05.786 A:middle
But, you can see here that the
parallax has three layers as,

00:40:05.786 --> 00:40:08.096 A:middle
you know, kind of a root layer
with the tree at the beginning

00:40:08.096 --> 00:40:10.296 A:middle
and as it goes up, the
parallax slides away

00:40:10.296 --> 00:40:11.796 A:middle
from that [inaudible] 3D effect.

00:40:11.846 --> 00:40:16.186 A:middle
When we think about cameras
in 3D games is I think

00:40:16.186 --> 00:40:18.826 A:middle
of the camera 3D game, what's
a camera in the 2D game mean?

00:40:19.096 --> 00:40:21.856 A:middle
And for our [inaudible], it's
the center of the screen.

00:40:22.596 --> 00:40:24.166 A:middle
It's always kind of that
the center of the screen,

00:40:24.166 --> 00:40:26.106 A:middle
everything moves so fast,
the parallax moves away

00:40:26.106 --> 00:40:28.756 A:middle
from that and, you
know, movement.

00:40:28.876 --> 00:40:30.476 A:middle
What's driving the
movement on that camera?

00:40:30.896 --> 00:40:32.556 A:middle
It's actually-- in this
case, our characters

00:40:32.556 --> 00:40:35.356 A:middle
as the [inaudible] screen
that pushing, you know,

00:40:35.356 --> 00:40:36.816 A:middle
the pushing the world
around and with

00:40:36.816 --> 00:40:41.406 A:middle
that changes the
actual camera position.

00:40:42.236 --> 00:40:48.016 A:middle
So lesson number one is
always, in games, fake it all.

00:40:48.466 --> 00:40:52.416 A:middle
[laughs] You make it a
game, make it look good.

00:40:52.416 --> 00:40:54.926 A:middle
That's the most important thing.

00:40:55.876 --> 00:40:57.276 A:middle
So, it's a good [inaudible]
fake 3D.

00:40:57.626 --> 00:40:59.696 A:middle
Fake 3D is actually
was easy to do.

00:40:59.926 --> 00:41:01.856 A:middle
We have our little root
object which is the roots

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:01.856 --> 00:41:04.196 A:middle
of the actual ParallaxNode
and as our object moves

00:41:04.196 --> 00:41:06.836 A:middle
from the center of the
screen from minus one

00:41:06.836 --> 00:41:08.506 A:middle
to plus one the X and Y axes.

00:41:08.746 --> 00:41:11.176 A:middle
That object is part
of the ParallaxNode,

00:41:11.636 --> 00:41:14.916 A:middle
kind of miscue away from that
object, away from the center

00:41:14.916 --> 00:41:16.096 A:middle
to give the effect of parallax.

00:41:16.976 --> 00:41:21.206 A:middle
Possibly, the code that
we wrote actually do that.

00:41:21.376 --> 00:41:24.986 A:middle
So, ParallaxSprite, you
know, from an SKNode,

00:41:25.156 --> 00:41:27.776 A:middle
[inaudible] much a little set up
in there, then the actual code

00:41:27.776 --> 00:41:32.476 A:middle
to actually setup, we're like
good old days so we just want

00:41:32.476 --> 00:41:36.126 A:middle
to load three PNG files and
we want those three PNG files

00:41:36.126 --> 00:41:39.136 A:middle
to be part of our ParallaxSprite
and we have a voodoo number

00:41:39.136 --> 00:41:43.156 A:middle
that is really the
heights of a tree, 150.

00:41:43.946 --> 00:41:45.166 A:middle
That doesn't mean anything.

00:41:45.166 --> 00:41:46.946 A:middle
It's just the [laughs],
you know,

00:41:46.946 --> 00:41:48.226 A:middle
the effect where
I see [inaudible]

00:41:48.866 --> 00:41:51.096 A:middle
and we want the Sprite
to fade off an alpha

00:41:51.176 --> 00:41:53.376 A:middle
as that character approaches
the tree, we ought to be able

00:41:53.376 --> 00:41:55.636 A:middle
to see the character underneath
the trees and so we're going

00:41:55.636 --> 00:41:58.516 A:middle
to talk about how we
[inaudible] to did that too.

00:41:58.736 --> 00:42:01.386 A:middle
So, if we look at the SKNode
and how it's actually set up,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:01.386 --> 00:42:04.006 A:middle
you can see that the SKNode is,
you know, at the bottom there,

00:42:04.006 --> 00:42:06.126 A:middle
there's ParallaxSprite, we
got these three children,

00:42:06.596 --> 00:42:10.006 A:middle
these three PNG files on top
of that, you know, the RootNode

00:42:10.006 --> 00:42:11.406 A:middle
and then on top of that,

00:42:11.436 --> 00:42:12.176 A:middle
[inaudible] leaves
that come out.

00:42:12.936 --> 00:42:16.206 A:middle
And if run through how things
were actually done in the Xcode,

00:42:17.606 --> 00:42:20.096 A:middle
the two lines of code work out
the opposite X and opposite Y.

00:42:20.146 --> 00:42:24.166 A:middle
That's, you know, that kind of
show which sides are off on,

00:42:24.536 --> 00:42:27.086 A:middle
you know, from that zero to
one that we showed you before

00:42:27.686 --> 00:42:29.156 A:middle
and we work out that
for X and the Y.

00:42:29.766 --> 00:42:33.526 A:middle
Then we walk through our
children and we multiply

00:42:33.526 --> 00:42:36.736 A:middle
that with voodoo number, really
it's just a voodoo number,

00:42:37.146 --> 00:42:38.956 A:middle
they're OK to have voodoo
number, it's a game.

00:42:39.486 --> 00:42:42.086 A:middle
And we set that to the
position on the node

00:42:42.086 --> 00:42:45.306 A:middle
and that actually produces
that parallax effect

00:42:45.886 --> 00:42:48.716 A:middle
as the Sprite moves around
because the children moving away

00:42:48.716 --> 00:42:50.306 A:middle
from the center of
the screen multiplied

00:42:50.306 --> 00:42:53.376 A:middle
by that number chooses a
very nice parallax effect.

00:42:53.766 --> 00:42:54.456 A:middle
Very, very easy.

00:42:55.026 --> 00:42:59.196 A:middle
So, we also have the character--

00:42:59.196 --> 00:43:01.696 A:middle
the trees fade as the
character approaches that.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:01.696 --> 00:43:02.466 A:middle
So how do we do that?

00:43:02.936 --> 00:43:04.096 A:middle
So the Adventure
character, the--

00:43:04.096 --> 00:43:05.216 A:middle
there's a ton of them

00:43:05.216 --> 00:43:06.716 A:middle
in the game 'cause
it's multiply the game.

00:43:06.966 --> 00:43:08.676 A:middle
We work out which Adventure
character is closest

00:43:08.676 --> 00:43:10.696 A:middle
to this tree, look
how far away that is,

00:43:11.336 --> 00:43:14.736 A:middle
and then if it's too far
away, it's, you know,

00:43:14.736 --> 00:43:17.036 A:middle
we set it to being completely
fake, so these are going

00:43:17.036 --> 00:43:18.786 A:middle
to be completely fake,
but if it's close enough,

00:43:19.016 --> 00:43:21.876 A:middle
we do a nice little
square fall off on--

00:43:21.876 --> 00:43:23.406 A:middle
as the character approaches it,

00:43:23.406 --> 00:43:25.256 A:middle
so that's the tree
fades away nicely.

00:43:25.496 --> 00:43:27.336 A:middle
And we make it stay
around a little bit,

00:43:27.336 --> 00:43:29.276 A:middle
so that's what with
the 0.1 and 0.9.

00:43:29.696 --> 00:43:32.986 A:middle
The Collision Mapping
is kind of interesting.

00:43:32.986 --> 00:43:34.546 A:middle
You can see here
[inaudible] collision volumes.

00:43:34.916 --> 00:43:37.136 A:middle
We [inaudible] many
of them in the game.

00:43:37.136 --> 00:43:39.866 A:middle
I think there's like 20 of
them for the entire level.

00:43:39.926 --> 00:43:42.276 A:middle
We actually ended up
using the physics system.

00:43:43.056 --> 00:43:46.106 A:middle
But we then definitely start
out using the physics system.

00:43:46.636 --> 00:43:49.236 A:middle
To begin with, we did
this the wrong way.

00:43:50.116 --> 00:43:51.396 A:middle
It's OK to do things
the wrong way.

00:43:52.486 --> 00:43:56.266 A:middle
We load, it's already great
big PNG file and we load

00:43:56.266 --> 00:43:58.846 A:middle
that in the 2D array
if my guy is standing

00:43:58.846 --> 00:44:00.646 A:middle
on black, he can move around.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:00.926 --> 00:44:03.106 A:middle
My guy is standing
on red, he stops.

00:44:03.736 --> 00:44:07.166 A:middle
Simple, that's the way-- that
seem the obvious way to do it.

00:44:07.166 --> 00:44:10.066 A:middle
It turned out to be too much
code, so that will be a lot

00:44:10.066 --> 00:44:12.626 A:middle
of code and just him seem
more and more and more to try

00:44:12.626 --> 00:44:14.106 A:middle
and fix the, you know,
fix the problems.

00:44:14.436 --> 00:44:15.996 A:middle
It works terribly.

00:44:16.406 --> 00:44:18.946 A:middle
The guy will get stuck on
the wall and he won't be able

00:44:18.946 --> 00:44:20.916 A:middle
to move out and he
won't slide along

00:44:20.916 --> 00:44:22.946 A:middle
like [inaudible]
slide along, you know,

00:44:22.946 --> 00:44:25.766 A:middle
it was just not a good
choice and he-- wrong.

00:44:26.436 --> 00:44:30.056 A:middle
But it sure seems
obvious, you know,

00:44:30.096 --> 00:44:31.896 A:middle
[inaudible] write the code, I'm
not going to use Sprite Kit.

00:44:31.896 --> 00:44:34.186 A:middle
I'm going to roll this on my own
and it's going to be awesome.

00:44:34.706 --> 00:44:36.106 A:middle
No, no, I'm not that also.

00:44:36.106 --> 00:44:41.276 A:middle
[laughter] So it turns out the
right way was actually pretty

00:44:41.276 --> 00:44:41.856 A:middle
darn easy.

00:44:42.046 --> 00:44:46.376 A:middle
It was to use the physics
system built into--

00:44:46.376 --> 00:44:48.886 A:middle
in the Sprite Kit
and as it turned

00:44:48.886 --> 00:44:50.996 A:middle
out to be zero lines of code.

00:44:51.956 --> 00:44:55.076 A:middle
But let me qualify that
'cause there's no such thing

00:44:55.076 --> 00:44:56.086 A:middle
as zero lines of code.

00:44:57.416 --> 00:45:03.146 A:middle
There is a little bit of set up
and that's full lines of code.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:03.616 --> 00:45:05.616 A:middle
So we have a rectangle
which is one of those red

00:45:05.616 --> 00:45:09.496 A:middle
or blue rectangles
for the actual walls.

00:45:10.076 --> 00:45:11.746 A:middle
We add that to the physics
party and we say, "Hey,

00:45:11.746 --> 00:45:13.026 A:middle
this is physics party
on the Sprite."

00:45:13.746 --> 00:45:15.416 A:middle
We say, "It's not
been moving around,

00:45:15.636 --> 00:45:16.746 A:middle
that wall is going
to stay still."

00:45:17.526 --> 00:45:20.476 A:middle
It's going to be called the wall
and we add it into the world.

00:45:21.306 --> 00:45:24.156 A:middle
And boom, that is it, we
had done, that guy collides

00:45:24.156 --> 00:45:26.136 A:middle
with the wall, he
goes along nicely.

00:45:26.136 --> 00:45:28.226 A:middle
It is all done for
you from then on out

00:45:28.226 --> 00:45:29.826 A:middle
and we didn't have
to do anything.

00:45:30.846 --> 00:45:32.436 A:middle
It was like happy day.

00:45:32.436 --> 00:45:33.896 A:middle
[Inaudible] Spencer
at the second lesson.

00:45:33.926 --> 00:45:36.346 A:middle
&gt;&gt; We're going to talk
about the art pipeline.

00:45:36.346 --> 00:45:38.796 A:middle
We have-- there's a
lot of stuff to talk

00:45:38.796 --> 00:45:40.636 A:middle
about in the pipe
line-- art pipeline.

00:45:41.086 --> 00:45:43.186 A:middle
But, I'm going to
go through three.

00:45:43.406 --> 00:45:45.046 A:middle
The first one is plan your art.

00:45:45.466 --> 00:45:47.296 A:middle
Make sure that you know
what your art is going

00:45:47.296 --> 00:45:52.186 A:middle
to be before it goes in, because
our resources cost money and one

00:45:52.186 --> 00:45:56.126 A:middle
of the things that Graeme and I
do is that Graeme will make art.

00:45:56.386 --> 00:45:59.936 A:middle
Graeme will do the program
or art which is, you know,

00:45:59.936 --> 00:46:06.196 A:middle
that's awesome, because, you
know, Graeme will give me a PNG

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:06.196 --> 00:46:08.446 A:middle
that is the right
size, the right bit up,

00:46:08.716 --> 00:46:10.486 A:middle
the right orientation
or whatever.

00:46:10.736 --> 00:46:14.506 A:middle
And I can take that as a
communication tool and then use

00:46:14.506 --> 00:46:18.776 A:middle
that as, you know, as a template
for us to put the real art in.

00:46:18.776 --> 00:46:22.886 A:middle
So, another one is limit
the size of your resources,

00:46:22.886 --> 00:46:24.746 A:middle
limit the number
of your resources,

00:46:24.746 --> 00:46:27.356 A:middle
make sure that you're not
using system resources crazy

00:46:27.356 --> 00:46:30.186 A:middle
because a lot of artist wanted
to put a ton of polygons

00:46:30.186 --> 00:46:33.596 A:middle
or [inaudible] or, you know,
particles into a system.

00:46:33.986 --> 00:46:38.416 A:middle
And then you, you know, you
bug the system, it runs slow

00:46:38.416 --> 00:46:40.636 A:middle
and you're fighting with
the programmer over assets.

00:46:40.636 --> 00:46:43.146 A:middle
And if you can get the
coolest looking effect

00:46:43.146 --> 00:46:46.426 A:middle
with the smallest number of
resources, that's a total win.

00:46:46.426 --> 00:46:49.096 A:middle
We have kind of a contest
in the lab or, you know,

00:46:49.096 --> 00:46:50.616 A:middle
we try to get the
neatest looking thing

00:46:50.616 --> 00:46:52.526 A:middle
out of the smallest
number of system resources.

00:46:52.936 --> 00:46:54.916 A:middle
And then also build
only what you need.

00:46:55.136 --> 00:46:58.836 A:middle
So, if you're going to build
the coastline and you see part

00:46:58.836 --> 00:47:01.086 A:middle
of the ocean, don't build
the whole ocean, you know,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:01.086 --> 00:47:03.346 A:middle
just get what you need
especially in 3D games

00:47:03.346 --> 00:47:04.896 A:middle
but in 2D games this
also applies.

00:47:05.326 --> 00:47:07.696 A:middle
So you make sure that, you
know, what's going to go

00:47:07.696 --> 00:47:11.156 A:middle
on the screen, if it's only
going to show up at 256 pixels

00:47:11.156 --> 00:47:13.726 A:middle
in screen size, make
it 256 pixels.

00:47:13.806 --> 00:47:18.376 A:middle
Don't make it 4K, you know,
make your assets as big

00:47:18.376 --> 00:47:21.216 A:middle
as they're going to be.

00:47:21.566 --> 00:47:24.996 A:middle
So, this is kind of a napkin
sketch, one of the critters

00:47:25.146 --> 00:47:29.006 A:middle
and this was our first, you
know, our first presentation

00:47:29.006 --> 00:47:32.236 A:middle
of the client and they came
back and they said, "You know,

00:47:32.236 --> 00:47:34.106 A:middle
I like the eyes but let's
get some bigger eyes.

00:47:34.106 --> 00:47:36.986 A:middle
Let's get some, you know,
some huge googly eyes,"

00:47:36.986 --> 00:47:39.436 A:middle
and we put those in and they
were, "Whoa, that's a lot

00:47:39.436 --> 00:47:40.786 A:middle
of eyes, let's trim the eyes."

00:47:40.786 --> 00:47:44.496 A:middle
[laughter] So then we came back
and we had built this thing

00:47:44.496 --> 00:47:45.556 A:middle
in Maya by this point.

00:47:45.556 --> 00:47:47.276 A:middle
We have the big googly
eyes in Maya.

00:47:47.696 --> 00:47:50.626 A:middle
And we did a tap
down Render and all

00:47:50.626 --> 00:47:56.436 A:middle
of our animations were basically
on alpha, tap down Renders

00:47:56.436 --> 00:48:00.516 A:middle
in Maya, frame by frame out as
sequential PNGs to a folder.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:01.016 --> 00:48:04.316 A:middle
And so this was our-- our fix,

00:48:04.316 --> 00:48:08.036 A:middle
was we made it big green warts
instead of big red eyeballs.

00:48:08.566 --> 00:48:11.806 A:middle
And then-- so this was our
final little dude, you know,

00:48:11.806 --> 00:48:12.806 A:middle
this is kind of our--

00:48:12.996 --> 00:48:16.556 A:middle
after iterating back and
forth, got to the critter.

00:48:16.786 --> 00:48:19.936 A:middle
And then made these
spreadsheets out of--

00:48:20.296 --> 00:48:22.236 A:middle
what are we calling it again?

00:48:22.236 --> 00:48:22.786 A:middle
&gt;&gt; Atlas files.

00:48:22.886 --> 00:48:28.286 A:middle
&gt;&gt; Atlas files, sorry,
artist, programmer.

00:48:28.726 --> 00:48:31.066 A:middle
[laughter] And they were
super easy to build.

00:48:31.066 --> 00:48:34.876 A:middle
I mean, I-- we would build a
sequential list of PNG files,

00:48:35.236 --> 00:48:38.496 A:middle
throw them into a folder,
put them into Xcode and bang,

00:48:38.496 --> 00:48:42.226 A:middle
we had this little guy getting
hit by an arrow or whatever.

00:48:42.546 --> 00:48:44.836 A:middle
Then the programmers
were able to take that,

00:48:44.836 --> 00:48:47.136 A:middle
assign it to a spread,
assigned to a character position

00:48:47.136 --> 00:48:49.166 A:middle
and you know, and
trigger it when needed.

00:48:49.886 --> 00:48:54.416 A:middle
So another thing that we
did was this particle system

00:48:54.416 --> 00:48:57.536 A:middle
that you guys have
been hearing about.

00:48:57.536 --> 00:49:00.186 A:middle
This was kind of-- this is
that wind that I was talking

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:00.186 --> 00:49:03.336 A:middle
about where we have-- it's a
really tiny amount of resources.

00:49:03.336 --> 00:49:09.686 A:middle
We used 25 particles twice and
so 50 particles total for all

00:49:09.686 --> 00:49:10.736 A:middle
of those leads all
over the world.

00:49:10.736 --> 00:49:14.046 A:middle
And you can see here, we use
two little tiny particles,

00:49:14.046 --> 00:49:17.176 A:middle
two little tiny textures
and started them off

00:49:17.176 --> 00:49:19.576 A:middle
at 100 percent scale
down to zero.

00:49:20.066 --> 00:49:24.636 A:middle
Zero percent opacity up to a
hundred and it ended up looking

00:49:24.636 --> 00:49:27.316 A:middle
like a bunch of leaves
kind of floating

00:49:27.316 --> 00:49:29.126 A:middle
down on the forest floor,
it really worked out well.

00:49:29.126 --> 00:49:30.706 A:middle
&gt;&gt; Oh, back to me.

00:49:31.506 --> 00:49:33.826 A:middle
Lesson number three,
agree on stuff.

00:49:34.486 --> 00:49:35.436 A:middle
You know, we're a small team

00:49:35.436 --> 00:49:38.416 A:middle
and we had a very tight
deadline for this.

00:49:38.416 --> 00:49:41.536 A:middle
So day to day agreeing on what
we're actually doing is kind

00:49:41.536 --> 00:49:42.016 A:middle
of important.

00:49:42.016 --> 00:49:44.686 A:middle
So, let's take a look at
our internal pipeline.

00:49:45.216 --> 00:49:47.026 A:middle
Communications, [inaudible]
in the same office,

00:49:47.026 --> 00:49:49.036 A:middle
so it actually worked
out pretty darn well.

00:49:49.036 --> 00:49:53.336 A:middle
I can just yell at him that, you
know, and-- we never yell, yes,

00:49:53.336 --> 00:49:55.356 A:middle
yes on doing stuff, but
communication is very important.

00:49:55.496 --> 00:49:57.386 A:middle
And it applies to things
like naming schemes.

00:49:57.456 --> 00:50:00.166 A:middle
You don't think that these
things, I just want to make game

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:00.166 --> 00:50:01.286 A:middle
and pull the structure.

00:50:02.166 --> 00:50:04.076 A:middle
Even the coordinate
system that you use

00:50:04.076 --> 00:50:07.356 A:middle
in the game 'cause we use
all these tools, we use Maya,

00:50:07.356 --> 00:50:09.866 A:middle
we use Photoshop, we
use Xcode and each one

00:50:09.866 --> 00:50:11.116 A:middle
of these has a different
coordinate system

00:50:11.116 --> 00:50:13.746 A:middle
and you'd really have to agree
on what the number one means.

00:50:14.436 --> 00:50:15.966 A:middle
And bigger things,
like orientation.

00:50:16.326 --> 00:50:18.146 A:middle
Orientation is a
[inaudible] games.

00:50:18.376 --> 00:50:22.646 A:middle
Agree on which direction is up
and write it on the white board

00:50:23.256 --> 00:50:26.596 A:middle
and do not end up with a
hacked file for the one is off

00:50:26.646 --> 00:50:28.936 A:middle
by 90 degrees, it has
plus 90 [inaudible]

00:50:29.056 --> 00:50:33.026 A:middle
because that will come and
haunt and you will shift

00:50:33.026 --> 00:50:35.786 A:middle
and all the guy will become
like this, and you wonder why

00:50:35.786 --> 00:50:36.766 A:middle
and it's a plus 90,
you have an [inaudible]

00:50:36.766 --> 00:50:38.276 A:middle
that you forgot to change.

00:50:40.076 --> 00:50:41.836 A:middle
Sorry, that might have happened.

00:50:41.836 --> 00:50:41.903 A:middle
[Laughter]

00:50:41.903 --> 00:50:47.356 A:middle
&gt;&gt; Like I said before,
programmer art is great

00:50:47.536 --> 00:50:51.186 A:middle
and there's probably like
three artists in this audience.

00:50:51.566 --> 00:50:54.336 A:middle
But go home and talk to
your artist and tell them

00:50:54.686 --> 00:50:58.466 A:middle
to let you do art, because
the art that you provide

00:50:58.466 --> 00:51:02.796 A:middle
to us is an invaluable
tool of communication.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:02.796 --> 00:51:07.086 A:middle
It allows us to iterate back and
forth with you when you give us

00:51:07.136 --> 00:51:09.876 A:middle
that artwork, you know
that it works in code.

00:51:10.106 --> 00:51:12.026 A:middle
For example, I mean
the next one here,

00:51:12.026 --> 00:51:18.986 A:middle
this is a Graeme's art this
worked perfectly for Graeme

00:51:18.986 --> 00:51:21.946 A:middle
because he has a
vector, you know, that--

00:51:21.946 --> 00:51:23.046 A:middle
which way is this thing going

00:51:23.306 --> 00:51:25.156 A:middle
and he's also got
these three different--

00:51:25.196 --> 00:51:28.076 A:middle
this represent those
three parallax layers.

00:51:28.456 --> 00:51:32.316 A:middle
So, he was able to go in, send
box, play around with like,

00:51:32.476 --> 00:51:37.196 A:middle
you know, all of his numbers
and get all of the layers

00:51:37.196 --> 00:51:39.386 A:middle
to work correctly with the
camera and then he gave it

00:51:39.386 --> 00:51:42.736 A:middle
to me, and then we built
this stuff in Photoshop

00:51:42.736 --> 00:51:44.276 A:middle
and made it all pretty
and stuff and so--

00:51:44.276 --> 00:51:45.746 A:middle
then it actually
look like a tree.

00:51:46.096 --> 00:51:50.826 A:middle
And so, so yeah, programmer art
is awesome, I love programmer.

00:51:52.686 --> 00:51:55.816 A:middle
&gt;&gt; The folder structure of the
game is also really important.

00:51:55.816 --> 00:51:59.316 A:middle
You have to remember, you know,
Xcode does a lot of the work

00:51:59.316 --> 00:52:01.546 A:middle
for you and puts things nicely
into groups and so forth,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:01.546 --> 00:52:04.156 A:middle
resources, but that is not
necessarily representing

00:52:04.156 --> 00:52:07.136 A:middle
on the hard drive, they won't
use all these tools, Photoshop,

00:52:07.186 --> 00:52:08.686 A:middle
Maya, you know, these
sound tools.

00:52:08.686 --> 00:52:10.736 A:middle
They're supposed to put
things into separate folders

00:52:10.736 --> 00:52:13.476 A:middle
that you will agree on,
separate your game data

00:52:13.476 --> 00:52:16.756 A:middle
from your level data from
your game data as localization

00:52:16.756 --> 00:52:19.686 A:middle
and so forth, but, you know,
[inaudible] different folders.

00:52:20.056 --> 00:52:23.056 A:middle
It sounds simple but that
folder is where you live,

00:52:23.386 --> 00:52:24.336 A:middle
so it's really important.

00:52:24.806 --> 00:52:28.316 A:middle
&gt;&gt; And I-- finally, this
is another great way

00:52:28.396 --> 00:52:29.526 A:middle
to communicate back and forth.

00:52:29.796 --> 00:52:33.326 A:middle
Our rule that we've kind of
like been going back and forth

00:52:33.326 --> 00:52:34.796 A:middle
on for the past like 25 years

00:52:34.796 --> 00:52:39.216 A:middle
of game development is a
meaningful name, just something

00:52:39.216 --> 00:52:41.726 A:middle
that means something that,
you know, that makes sense,

00:52:41.726 --> 00:52:44.716 A:middle
so that if you get an artist
or a programmer who comes

00:52:44.716 --> 00:52:47.906 A:middle
into the project halfway that
they are not trying to figure

00:52:47.906 --> 00:52:52.426 A:middle
out what, you know,
file 73 is, you know.

00:52:52.986 --> 00:52:55.586 A:middle
And then we use underscores,
no spaces,

00:52:55.656 --> 00:53:00.186 A:middle
and then we pad our revision
by four because you never know

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:00.186 --> 00:53:04.696 A:middle
when you're going to have 9,999
versions of that file especially

00:53:04.696 --> 00:53:05.766 A:middle
when you're-- and seriously,

00:53:05.766 --> 00:53:07.046 A:middle
especially when you're
doing animation.

00:53:07.406 --> 00:53:12.126 A:middle
You're going to have a ton
of files in animations.

00:53:12.196 --> 00:53:16.136 A:middle
And then the file type at
the end is really important.

00:53:16.136 --> 00:53:20.036 A:middle
We go into finder for everybody
on the project and we turn on--

00:53:20.226 --> 00:53:22.706 A:middle
we expose the file
type at the end.

00:53:22.706 --> 00:53:24.396 A:middle
This seems simple but it's--

00:53:24.526 --> 00:53:26.956 A:middle
it really, really helps
when you're trying

00:53:26.956 --> 00:53:29.056 A:middle
to quickly identify
whether it's a PSD,

00:53:29.056 --> 00:53:31.436 A:middle
a PNG, a TXT, or whatever.

00:53:31.436 --> 00:53:34.566 A:middle
So, you know, agree on a
file naming convention,

00:53:35.076 --> 00:53:37.116 A:middle
you can use that if you want
to, but use one that works

00:53:37.116 --> 00:53:41.286 A:middle
for you but, you know, this is
also a great communication tool.

00:53:41.286 --> 00:53:43.416 A:middle
&gt;&gt; Lesson number four, have fun.

00:53:44.356 --> 00:53:45.786 A:middle
You're in the freaking
game industry.

00:53:46.046 --> 00:53:50.956 A:middle
[laughs] If you're not having
fun making the game then you're

00:53:50.956 --> 00:53:53.856 A:middle
going to make a rotten game
unless one of the big things

00:53:53.856 --> 00:53:55.776 A:middle
that we differentiate
ourselves on is that Spencer

00:53:55.776 --> 00:53:57.616 A:middle
and I are in the game industry.

00:53:58.056 --> 00:53:59.896 A:middle
I don't work in the game
industry, I never worked

00:53:59.896 --> 00:54:04.016 A:middle
in my life and that's what
we do every single day.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:05.336 --> 00:54:06.456 A:middle
So, let's go over
our lessons again.

00:54:07.376 --> 00:54:10.046 A:middle
Just because it's a 2D
Sprite engine doesn't mean

00:54:10.046 --> 00:54:12.806 A:middle
that you make 2D games, we
touched the tip of the iceberg

00:54:12.806 --> 00:54:14.216 A:middle
with what we can
do with Sprite Kit.

00:54:14.476 --> 00:54:16.886 A:middle
We could have made it complex
3D game with [inaudible]

00:54:16.886 --> 00:54:18.266 A:middle
and it would have been awesome.

00:54:19.176 --> 00:54:20.836 A:middle
&gt;&gt; Physics is much more useful

00:54:20.836 --> 00:54:23.246 A:middle
than for just drawing
birds epics

00:54:23.596 --> 00:54:25.786 A:middle
and programmer art is beautiful.

00:54:26.316 --> 00:54:31.396 A:middle
I-- really, use your
placeholders with pride

00:54:31.736 --> 00:54:34.496 A:middle
and give them to your artist

00:54:34.496 --> 00:54:36.726 A:middle
so that they can understand
what to do correctly.

00:54:36.726 --> 00:54:40.656 A:middle
And as far as the less is
more, we've been talking

00:54:40.656 --> 00:54:47.076 A:middle
about that a lot, see how
you can get them the fastest

00:54:47.076 --> 00:54:52.386 A:middle
running, least, you know,
quickest booting game

00:54:52.656 --> 00:54:55.026 A:middle
that you possibly can and
make it look super amazing

00:54:55.026 --> 00:54:58.336 A:middle
because if you can get
a really cool effect

00:54:58.406 --> 00:55:03.336 A:middle
or really great looking game out
of just hardly any resource used

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:55:03.336 --> 00:55:07.756 A:middle
at all, you know, well first off
you're amazing and second thing,

00:55:07.756 --> 00:55:09.666 A:middle
all you have to worry about
is awesome game design.

00:55:10.536 --> 00:55:11.736 A:middle
So, thank you very much.

00:55:12.246 --> 00:55:14.276 A:middle
&gt;&gt; Thank you Graeme,
and Spencer.

00:55:15.416 --> 00:55:17.626 A:middle
So, lastly I want to
talk about how to build,

00:55:18.056 --> 00:55:20.886 A:middle
not only use Sprite Kit as
part of your game runtime,

00:55:20.936 --> 00:55:24.396 A:middle
but build awesome game tools
to improve it in a recent time.

00:55:25.046 --> 00:55:28.026 A:middle
What if we decide to take
Adventure to the next level?

00:55:28.756 --> 00:55:31.636 A:middle
What if we want multiple level
support, currently is one level.

00:55:32.116 --> 00:55:35.436 A:middle
What if we want to add
save and load game support

00:55:35.436 --> 00:55:36.396 A:middle
so that the user doesn't have

00:55:36.396 --> 00:55:39.016 A:middle
to spend [inaudible]
30 minutes just playing

00:55:39.016 --> 00:55:39.906 A:middle
and finishing the game.

00:55:40.586 --> 00:55:43.516 A:middle
And what if we want to build
this more sophisticated

00:55:43.516 --> 00:55:47.176 A:middle
and reusable actions for
every single different effects

00:55:47.526 --> 00:55:48.216 A:middle
for your characters?

00:55:49.516 --> 00:55:53.226 A:middle
So, Sprite Kit, every single
SKNodes support NSCoding

00:55:53.376 --> 00:55:55.406 A:middle
and NSCopying, so what

00:55:55.406 --> 00:55:58.946 A:middle
that means every single node
can be serialize and deserialize

00:55:59.046 --> 00:56:00.566 A:middle
to the disk or to the iCloud

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:56:00.646 --> 00:56:02.356 A:middle
over the network,
however you want.

00:56:02.356 --> 00:56:08.586 A:middle
So, we can implement essentially
a save/load game logic using one

00:56:08.586 --> 00:56:09.786 A:middle
line of code.

00:56:10.336 --> 00:56:12.126 A:middle
So, let's look at the
serialization API.

00:56:12.726 --> 00:56:13.986 A:middle
It's quick and easy.

00:56:14.056 --> 00:56:18.116 A:middle
All you have to do is use
NSKeyedArchiver parsing any

00:56:18.116 --> 00:56:22.996 A:middle
SKNode, you get NSData blob and
from them on, you can do write

00:56:22.996 --> 00:56:24.436 A:middle
to disk, send it to the cloud

00:56:25.686 --> 00:56:28.246 A:middle
or that the serialization
is just the reverse.

00:56:28.426 --> 00:56:32.676 A:middle
Getting NSData blob, past
to the NSKeyedUnarchiver

00:56:32.676 --> 00:56:35.786 A:middle
and therefore you have the
corresponding SKNode instance.

00:56:36.326 --> 00:56:41.376 A:middle
So to build Adventure, in this
case, Adventure level editor,

00:56:41.376 --> 00:56:45.056 A:middle
we create a level editor in
Mac OS X using Sprite Kit.

00:56:45.056 --> 00:56:51.096 A:middle
If you're able to add an
overview, overlay view on top,

00:56:51.096 --> 00:56:53.196 A:middle
you can place your
level tiles on top

00:56:53.196 --> 00:56:57.176 A:middle
and also use the overlay view
to receive any of the user input

00:56:57.176 --> 00:56:58.986 A:middle
as well as the mouse
manipulations.

00:56:59.306 --> 00:57:01.536 A:middle
So if user drag and drop
some tiles on there,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:57:01.536 --> 00:57:03.766 A:middle
you can make it the
direct manipulation

00:57:03.766 --> 00:57:05.196 A:middle
to the underlying SKNode.

00:57:05.476 --> 00:57:08.876 A:middle
And once everything is properly
placed, you can serialize now

00:57:08.926 --> 00:57:10.486 A:middle
to the scene and
essentially just load

00:57:10.486 --> 00:57:13.876 A:middle
that at runtime therefore
you have your game level

00:57:13.876 --> 00:57:17.936 A:middle
and you don't have to use change
some integer, recompile, and,

00:57:17.936 --> 00:57:20.856 A:middle
oh, I'm off by 50 pixels, you
don't have to any of that.

00:57:22.186 --> 00:57:24.056 A:middle
Custom Actions also
serialize well too.

00:57:24.466 --> 00:57:26.066 A:middle
Imagine we're building
a golf game.

00:57:26.516 --> 00:57:31.846 A:middle
So here, I want to simulate, OK,
when the golf club hit the ball,

00:57:31.936 --> 00:57:32.576 A:middle
what's going to happen?

00:57:33.226 --> 00:57:35.866 A:middle
What if I-- the first thing I
want to do is apply some sort

00:57:35.866 --> 00:57:37.366 A:middle
of an impulse to
make the ball fly.

00:57:38.316 --> 00:57:41.256 A:middle
And second, I want to play some
task effects that play that,

00:57:41.566 --> 00:57:43.146 A:middle
wait for all the
particles to finish,

00:57:43.986 --> 00:57:45.346 A:middle
and it will remove
that from the scene.

00:57:45.546 --> 00:57:49.166 A:middle
And in the meantime when in
parallel when the ball hit--

00:57:49.166 --> 00:57:51.496 A:middle
when the club hit the ball,
you will hear sound effects

00:57:52.056 --> 00:57:55.296 A:middle
and maybe way with
the ball is airborne

00:57:55.296 --> 00:57:58.116 A:middle
and then we'll play a task
trail for beginners to learn

00:57:58.116 --> 00:58:00.776 A:middle
from their mistakes, "Hey,
this how far I'm hitting

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:58:00.776 --> 00:58:02.256 A:middle
and this is the projectile
for that."

00:58:02.696 --> 00:58:06.386 A:middle
And if I want to build
all of these, this logic,

00:58:06.386 --> 00:58:09.486 A:middle
I want to use it in game
for every single time

00:58:09.546 --> 00:58:11.646 A:middle
when the club hit
the ball, I'll have--

00:58:11.896 --> 00:58:15.416 A:middle
we can build this in code by
having a sequence fall away bat

00:58:15.416 --> 00:58:19.246 A:middle
of groups, it's about
20 lines of codes.

00:58:19.396 --> 00:58:23.066 A:middle
But if you want to tune
that, the easiest way is

00:58:23.066 --> 00:58:26.156 A:middle
to use serialization API
for SKActions as well.

00:58:26.636 --> 00:58:29.426 A:middle
So, SKActions itself is
serializable as well.

00:58:29.816 --> 00:58:32.096 A:middle
When-- As soon as it's being
assigned to any SKNote,

00:58:32.336 --> 00:58:34.856 A:middle
it will be kicking off
from the beginning.

00:58:35.586 --> 00:58:40.056 A:middle
It's-- As soon as you assign
the action to the SK node,

00:58:40.056 --> 00:58:44.326 A:middle
it copies on write and
when actions are completed,

00:58:44.326 --> 00:58:45.116 A:middle
it will be finished.

00:58:46.126 --> 00:58:48.346 A:middle
And the last section I
want to quickly touch base

00:58:48.346 --> 00:58:50.816 A:middle
about the best practices
of using Sprite Kit.

00:58:51.656 --> 00:58:55.476 A:middle
Number one, we will recommend
you to use UIKit and AppKit

00:58:55.476 --> 00:58:57.696 A:middle
if you need a complex
layout for your text.

00:58:58.356 --> 00:59:02.826 A:middle
So, we do provide a SKLabelNode
for a one line that UI allow you

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:59:02.826 --> 00:59:06.656 A:middle
to animate that before any
complex constraints as well

00:59:06.656 --> 00:59:09.226 A:middle
as with the height adjustment
where Holly [phonetic] recommend

00:59:09.226 --> 00:59:11.656 A:middle
to use AppKit or UIKit.

00:59:11.866 --> 00:59:14.736 A:middle
So, just like any other
GL view, as soon as OS X,

00:59:14.736 --> 00:59:16.026 A:middle
if you enable layer-backed,

00:59:16.116 --> 00:59:17.906 A:middle
you automatically get
all these benefits.

00:59:18.566 --> 00:59:21.906 A:middle
And one thing I like to point
out is in OS X, I'm sorry,

00:59:22.396 --> 00:59:26.356 A:middle
Xcode 5, we provide a major
update to Interface Builder.

00:59:26.666 --> 00:59:29.686 A:middle
So if you want to design
your UI with the pipe--

00:59:29.686 --> 00:59:31.536 A:middle
breaking at the part
into different flows.

00:59:31.536 --> 00:59:33.206 A:middle
For example here,
how main screen goes

00:59:33.256 --> 00:59:35.476 A:middle
to character selection
screen followed by going

00:59:35.476 --> 00:59:38.176 A:middle
to weapon selection,
you can totally design

00:59:38.176 --> 00:59:40.286 A:middle
that using Storyboard
inside Xcode.

00:59:40.866 --> 00:59:43.936 A:middle
And now, how do we improve
your iteration time?

00:59:44.646 --> 00:59:48.726 A:middle
So, we want to integrate
Sprite Kit inside your code--

00:59:48.726 --> 00:59:50.036 A:middle
with your game code
so you can use

00:59:50.036 --> 00:59:52.406 A:middle
that to build your level
editor, if you do action editor,

00:59:52.406 --> 00:59:54.906 A:middle
you can use the particle
editor to edit your particles

00:59:54.906 --> 00:59:57.706 A:middle
at the Sprite Kit building
Texture Atlas generator

00:59:57.706 --> 00:59:57.976 A:middle
is great.

00:59:58.406 --> 01:00:01.646 A:middle
You just drag a folder in
and you have, therefore,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:00:01.646 --> 01:00:03.236 A:middle
you have your Texture Atlas.

01:00:04.806 --> 01:00:09.096 A:middle
In terms of performance tips,
we provide a building stat

01:00:09.146 --> 01:00:10.756 A:middle
to show you how many
draw calls as well

01:00:10.756 --> 01:00:13.026 A:middle
as how many SKNotes are
being rendered on screen

01:00:13.026 --> 01:00:14.666 A:middle
as you can see from
one of my examples.

01:00:15.056 --> 01:00:17.196 A:middle
We'd like to keep
the node count low

01:00:17.196 --> 01:00:19.296 A:middle
for node that's no
longer visible.

01:00:19.696 --> 01:00:22.526 A:middle
You can remove that,
but Sprite Kit does cull

01:00:22.526 --> 01:00:25.896 A:middle
out invisible node, but
there's the additional

01:00:25.896 --> 01:00:27.606 A:middle
if statement that we go through.

01:00:27.796 --> 01:00:30.196 A:middle
But if you know ahead of
time, the object is going

01:00:30.196 --> 01:00:32.536 A:middle
to be no longer visible,
feel free to remove that.

01:00:33.296 --> 01:00:37.186 A:middle
CIFilters are expensive if you
apply them to a full screen.

01:00:37.676 --> 01:00:40.856 A:middle
So, we do provide a
property called [inaudible]

01:00:40.856 --> 01:00:45.226 A:middle
so that this we-- the
result will be cached

01:00:45.436 --> 01:00:47.926 A:middle
into a frame buffer
so that will be reused

01:00:47.926 --> 01:00:48.986 A:middle
for the following frames.

01:00:49.476 --> 01:00:53.776 A:middle
Also, we like to talk
about organizing your games

01:00:53.846 --> 01:00:54.886 A:middle
into different scenes.

01:00:55.136 --> 01:01:00.086 A:middle
Once if you treat scenes as
the fundamental building block

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:01:00.146 --> 01:01:03.256 A:middle
for your games, you can
plan ahead, OK, how do I--

01:01:03.496 --> 01:01:05.416 A:middle
do transitions from
scene A to scene B,

01:01:05.416 --> 01:01:09.266 A:middle
from UIView into the game
view, from Game to Pause menu,

01:01:09.686 --> 01:01:11.056 A:middle
you can do all these transitions

01:01:11.056 --> 01:01:12.756 A:middle
and make your flow
much, much easier.

01:01:12.756 --> 01:01:16.226 A:middle
So and-- that's the
end of the session.

01:01:16.226 --> 01:01:17.566 A:middle
For any questions or feedback,

01:01:17.666 --> 01:01:20.336 A:middle
please contact our
evangelist, Allan Schaffer.

01:01:20.336 --> 01:01:22.406 A:middle
I'd like to point
out for those of you

01:01:22.406 --> 01:01:24.106 A:middle
who have missed the
introduction to Sprite Kit,

01:01:24.466 --> 01:01:27.416 A:middle
there's online videos that's
going to be available tomorrow,

01:01:27.416 --> 01:01:29.286 A:middle
and have a great WWDC 2013.

01:01:29.786 --> 01:01:36.420 A:middle
[Applause]

