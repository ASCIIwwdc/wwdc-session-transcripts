WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:10.236 A:middle
[ Silence ]

00:00:10.736 --> 00:00:11.466 A:middle
&gt;&gt; Kevin: Hello.

00:00:11.466 --> 00:00:13.556 A:middle
This is section 608, Preparing

00:00:13.556 --> 00:00:16.076 A:middle
and Presenting Media
for Accessibility.

00:00:16.746 --> 00:00:18.856 A:middle
Welcome. We think
that you're here

00:00:19.326 --> 00:00:21.846 A:middle
because you are a
content provider involved

00:00:21.846 --> 00:00:23.876 A:middle
in the production of
content and you're ready

00:00:23.876 --> 00:00:27.136 A:middle
to make your content more
useful, more accessible

00:00:27.546 --> 00:00:29.516 A:middle
to more users in
more situations,

00:00:29.746 --> 00:00:32.156 A:middle
or you're an app
developer and you also want

00:00:32.156 --> 00:00:35.006 A:middle
to make your app more useful to
more users in more situations.

00:00:35.316 --> 00:00:38.286 A:middle
We think that's great stuff, and
we have technology that's going

00:00:38.376 --> 00:00:40.236 A:middle
to help, and we're
going to cover it

00:00:40.236 --> 00:00:41.736 A:middle
in this session right now.

00:00:42.426 --> 00:00:44.426 A:middle
We're going to talk about
accessibility options

00:00:44.426 --> 00:00:47.776 A:middle
for time media that take the
form of subtitles and captions.

00:00:48.126 --> 00:00:50.196 A:middle
We're going to touch upon
accessibility options

00:00:50.196 --> 00:00:53.096 A:middle
that take other forms as
well, such as audio forms.

00:00:53.806 --> 00:00:57.006 A:middle
We know that some of you may
be motivated to hear this talk

00:00:57.276 --> 00:01:00.266 A:middle
because you believe that
legislation may apply to you,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:00.266 --> 00:01:03.926 A:middle
in particular in the U.S., that
the 21st Century Communications

00:01:03.926 --> 00:01:07.166 A:middle
and Video Accessibility
Act and the FCC rules

00:01:07.166 --> 00:01:08.796 A:middle
that are established
to implement

00:01:08.796 --> 00:01:10.616 A:middle
that act may apply to you.

00:01:11.136 --> 00:01:12.956 A:middle
We want to tell you up
front that the presenters

00:01:12.956 --> 00:01:14.706 A:middle
in this session are not lawyers,

00:01:15.066 --> 00:01:17.476 A:middle
and we're not the appropriate
people to review this law

00:01:17.476 --> 00:01:19.466 A:middle
and tell you how it
may apply to you.

00:01:19.796 --> 00:01:22.686 A:middle
We encourage you to perform
that review on your own.

00:01:23.476 --> 00:01:25.476 A:middle
But we believe that
we do have technology

00:01:25.476 --> 00:01:28.026 A:middle
that can help you meet
your responsibility

00:01:28.026 --> 00:01:30.026 A:middle
under that law if
it applies to you.

00:01:30.526 --> 00:01:33.476 A:middle
So, more about what we will
talk about in this session,

00:01:33.476 --> 00:01:35.566 A:middle
since we're not lawyers
but software developers:

00:01:35.836 --> 00:01:39.886 A:middle
we're going to talk about how
Apple's platforms, OS X and iOS,

00:01:40.426 --> 00:01:43.226 A:middle
support accessibility
options for time media

00:01:43.446 --> 00:01:46.406 A:middle
with built-in features,
support for user preferences

00:01:46.676 --> 00:01:49.186 A:middle
and automatic application
of those user preferences.

00:01:49.596 --> 00:01:52.076 A:middle
We're going to tell you, if
you're one of the developers

00:01:52.256 --> 00:01:54.866 A:middle
who needs to - we don't think
that's all of you, but for those

00:01:54.866 --> 00:01:58.756 A:middle
of you who do need to implement
user interface that allows users

00:01:58.756 --> 00:02:01.596 A:middle
to select specific media
options for playback -

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:01.596 --> 00:02:03.436 A:middle
we're going to talk about
how you can do that,

00:02:04.306 --> 00:02:06.696 A:middle
and for content providers,
we're going to talk

00:02:06.696 --> 00:02:10.496 A:middle
about multiple options that
you have to package your media,

00:02:10.496 --> 00:02:13.726 A:middle
your audio and video, together
with accessibility options.

00:02:13.726 --> 00:02:15.796 A:middle
In particular, we're
going to talk about HTML5,

00:02:15.846 --> 00:02:18.576 A:middle
we're going to talk
about HTTP Live Streaming

00:02:18.576 --> 00:02:20.746 A:middle
and what you can do
there, we're going to talk

00:02:20.746 --> 00:02:22.716 A:middle
about the QuickTime
movie file format

00:02:22.716 --> 00:02:24.996 A:middle
and its closely allied
format, MPEG4.

00:02:25.136 --> 00:02:29.366 A:middle
We're even going to go as far as
to show the API you need to use

00:02:29.366 --> 00:02:32.996 A:middle
to add subtitles to existing
movie and MPEG4 files.

00:02:33.566 --> 00:02:36.776 A:middle
Finally, for the very
few developers who need

00:02:36.776 --> 00:02:40.406 A:middle
to mediate the rendering
of text during playback,

00:02:40.646 --> 00:02:43.196 A:middle
we're going to touch upon
the API's we have available

00:02:43.376 --> 00:02:44.536 A:middle
if you need to do that.

00:02:44.626 --> 00:02:45.646 A:middle
So, lots of content.

00:02:46.776 --> 00:02:49.576 A:middle
Before we move on
let's talk about where

00:02:49.576 --> 00:02:51.826 A:middle
in the technology stack
we're focusing our attention

00:02:51.826 --> 00:02:52.516 A:middle
in this session.

00:02:52.856 --> 00:02:55.946 A:middle
When we talk about API's here
we're going to be talking

00:02:55.946 --> 00:02:58.726 A:middle
about application programming
interfaces that are available

00:02:59.066 --> 00:03:02.506 A:middle
in the AV Foundation framework,
Apple's foundational framework

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:02.506 --> 00:03:04.556 A:middle
for the control of
audio visual media.

00:03:04.846 --> 00:03:07.956 A:middle
It sits in iOS below
the view system,

00:03:08.036 --> 00:03:09.726 A:middle
above some of the
core frameworks.

00:03:09.976 --> 00:03:13.086 A:middle
One of the frameworks that it
supports, I want to call out,

00:03:13.306 --> 00:03:14.796 A:middle
is the Media Player framework.

00:03:15.066 --> 00:03:17.906 A:middle
That's an important framework to
mention in this session as well

00:03:18.176 --> 00:03:20.816 A:middle
because it provides
standard user interface

00:03:21.266 --> 00:03:23.706 A:middle
and standard behavior
for the control

00:03:23.706 --> 00:03:25.496 A:middle
of multimedia playback on iOS.

00:03:25.496 --> 00:03:30.216 A:middle
AV Foundation sits in
a similar place on OS X

00:03:30.286 --> 00:03:31.316 A:middle
in the technology stack.

00:03:31.316 --> 00:03:32.716 A:middle
It's a cross-platform framework.

00:03:32.716 --> 00:03:35.776 A:middle
The same set of API's are
available on both platforms.

00:03:36.776 --> 00:03:38.576 A:middle
Again it sits underneath
the view system

00:03:38.576 --> 00:03:40.916 A:middle
and supports a framework
that's new

00:03:41.026 --> 00:03:45.626 A:middle
in OS X Mavericks called AVKit,
which is the analog for OS X

00:03:45.926 --> 00:03:47.946 A:middle
to the Media Player
framework on iOS.

00:03:48.146 --> 00:03:52.686 A:middle
AVKit provides standard user
interface and standard behavior

00:03:52.906 --> 00:03:54.696 A:middle
for the control of
multimedia playback,

00:03:54.696 --> 00:03:57.996 A:middle
and if you adopt it all of that
standard behavior can be part

00:03:57.996 --> 00:03:59.026 A:middle
of your app as well.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:01.056 --> 00:04:04.266 A:middle
So we need to define some terms
before we get into the meat,

00:04:04.266 --> 00:04:05.506 A:middle
so let's do that real quickly.

00:04:05.736 --> 00:04:09.456 A:middle
When I talk about multimedia,
timed media, audio visual media

00:04:09.456 --> 00:04:11.436 A:middle
in this session, what
am I referring to?

00:04:11.676 --> 00:04:14.816 A:middle
Well, I'm referring to the big
revolution that occurred now

00:04:14.816 --> 00:04:18.166 A:middle
over 20 years ago when
digital devices first began

00:04:18.166 --> 00:04:21.065 A:middle
to play video and
audio and even text

00:04:21.346 --> 00:04:22.606 A:middle
in synchronization
with each other.

00:04:22.606 --> 00:04:24.146 A:middle
This is not news to any of us.

00:04:24.286 --> 00:04:27.946 A:middle
We take this feature for granted
in our digital devices nowadays.

00:04:29.556 --> 00:04:32.866 A:middle
But I want to point it out
that there are multiple pieces

00:04:32.866 --> 00:04:36.646 A:middle
of media being synchronized
together, and therefore

00:04:36.646 --> 00:04:39.306 A:middle
when a content provider
creates a piece of multimedia,

00:04:39.586 --> 00:04:43.996 A:middle
there must implicitly be some
decision, some partitioning

00:04:43.996 --> 00:04:46.126 A:middle
of the information that's
going to be conveyed

00:04:46.276 --> 00:04:48.036 A:middle
into the different media types.

00:04:48.366 --> 00:04:51.396 A:middle
What information is going
to be presented visually

00:04:51.396 --> 00:04:53.046 A:middle
and available as
part of the video?

00:04:53.406 --> 00:04:56.326 A:middle
What information is going to
be conveyed aurally or audibly

00:04:56.506 --> 00:04:57.786 A:middle
and be part of the soundtrack?

00:04:58.086 --> 00:05:00.926 A:middle
And what information is going
to be provided in text form?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:02.376 --> 00:05:04.776 A:middle
Most content providers
understand that even though

00:05:04.776 --> 00:05:07.486 A:middle
if they have a default
partitioning of this information

00:05:07.486 --> 00:05:10.006 A:middle
in mind, that default
partitioning is not going

00:05:10.006 --> 00:05:13.116 A:middle
to be suitable for all of the
users that they want to reach.

00:05:13.646 --> 00:05:15.556 A:middle
For example, there
might be some users

00:05:15.556 --> 00:05:17.846 A:middle
who don't understand the
language that's being spoken

00:05:17.846 --> 00:05:21.876 A:middle
in the soundtrack who might
want subtitles for translation.

00:05:22.306 --> 00:05:24.586 A:middle
Those users might be able
to hear the soundtrack

00:05:25.176 --> 00:05:27.716 A:middle
and receive all of the other
information that's being

00:05:27.716 --> 00:05:30.726 A:middle
conveyed, either via music
or via sound effects.

00:05:31.116 --> 00:05:33.416 A:middle
They can even hear the
speech that's being spoken

00:05:33.626 --> 00:05:35.866 A:middle
and can identify the
speakers who are speaking;

00:05:36.166 --> 00:05:38.316 A:middle
they just don't understand the
words that are being spoken.

00:05:38.566 --> 00:05:41.866 A:middle
They're going to want
timed text in translation

00:05:41.866 --> 00:05:43.386 A:middle
so that they can
understand the speech.

00:05:43.596 --> 00:05:46.936 A:middle
Well, let's go a little bit
further and imagine a user

00:05:46.936 --> 00:05:50.826 A:middle
who doesn't have access to
that audio content at all,

00:05:50.996 --> 00:05:54.536 A:middle
either because of deafness,
because of hardness of hearing,

00:05:54.676 --> 00:05:57.976 A:middle
or because of the situation
that the user happens to be in.

00:05:58.176 --> 00:06:00.946 A:middle
For example, imagine a user
who's sitting in the back

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:00.946 --> 00:06:04.226 A:middle
of an airplane, near a noisy
engine, and has brought an iPad

00:06:04.226 --> 00:06:07.976 A:middle
on board and wants to watch a
video but doesn't have access

00:06:07.976 --> 00:06:10.486 A:middle
to the audio without cranking
the volume up really high

00:06:10.486 --> 00:06:12.826 A:middle
in the ear buds and
doesn't want to do that.

00:06:13.196 --> 00:06:14.466 A:middle
How can that information

00:06:14.466 --> 00:06:17.876 A:middle
that the content provider
originally decided to partition

00:06:17.926 --> 00:06:19.636 A:middle
into the audio content,

00:06:19.636 --> 00:06:21.656 A:middle
how could that information
be made available

00:06:21.816 --> 00:06:23.146 A:middle
to users like that?

00:06:23.736 --> 00:06:27.776 A:middle
Well typically it's done via
an alternative type of media,

00:06:28.116 --> 00:06:29.986 A:middle
usually via timed text.

00:06:31.006 --> 00:06:34.366 A:middle
So multimedia can
have the ability

00:06:34.366 --> 00:06:37.366 A:middle
to carry not just a
single text option

00:06:37.656 --> 00:06:39.666 A:middle
but multiple timed text options

00:06:39.936 --> 00:06:42.376 A:middle
to provide different
features for different users.

00:06:42.556 --> 00:06:45.706 A:middle
There can be subtitles for
translation, for example.

00:06:46.246 --> 00:06:49.686 A:middle
There can be subtitles
for accessibility.

00:06:50.176 --> 00:06:53.456 A:middle
A term that's commonly used
for subtitles for accessibility

00:06:53.886 --> 00:06:57.316 A:middle
in the Blu-ray domain and
others is subtitles for the deaf

00:06:57.316 --> 00:07:00.086 A:middle
or hard of hearing,
abbreviated as SDH.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.426 --> 00:07:02.606 A:middle
So here I've got a picture
of a piece of multimedia

00:07:02.606 --> 00:07:03.806 A:middle
that has audio, video

00:07:04.066 --> 00:07:07.036 A:middle
and multiple text options
for different users.

00:07:07.466 --> 00:07:11.176 A:middle
It's important to remember the
distinction between timed text

00:07:11.226 --> 00:07:14.146 A:middle
for accessibility and
timed text for translation.

00:07:14.536 --> 00:07:17.876 A:middle
The difference is the additional
information that the timed text

00:07:17.876 --> 00:07:20.636 A:middle
for accessibility carries,
exactly those things

00:07:20.636 --> 00:07:21.546 A:middle
that we just mentioned.

00:07:21.936 --> 00:07:24.146 A:middle
Identification of
speakers is important,

00:07:24.786 --> 00:07:27.406 A:middle
description of stuff going
on in the soundtrack other

00:07:27.406 --> 00:07:29.566 A:middle
than the speech, such
as sound effects.

00:07:29.856 --> 00:07:32.596 A:middle
Do all the characters in the
frame suddenly turn to look

00:07:32.876 --> 00:07:34.566 A:middle
because of the sound
of a breaking glass,

00:07:34.996 --> 00:07:36.666 A:middle
or the thud of a falling body?

00:07:37.246 --> 00:07:40.276 A:middle
How would you know if the
SDH subtitles don't tell you?

00:07:40.656 --> 00:07:42.196 A:middle
It's important to
describe those things.

00:07:43.036 --> 00:07:48.496 A:middle
So, the same is true for
other types of information

00:07:48.496 --> 00:07:49.596 A:middle
in the soundtrack as well.

00:07:50.096 --> 00:07:53.626 A:middle
It's not good enough just to
supply multiple text options,

00:07:53.926 --> 00:07:56.116 A:middle
it's also necessary to make sure

00:07:56.116 --> 00:07:57.556 A:middle
that they are appropriately
labeled

00:07:57.816 --> 00:08:01.476 A:middle
so the user can choose the one
that's more appropriate for him

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:01.476 --> 00:08:05.606 A:middle
or her: the language that
the text use, the features

00:08:05.606 --> 00:08:06.506 A:middle
that the text carries.

00:08:06.576 --> 00:08:08.716 A:middle
Is it just a transcription
of the dialog

00:08:08.716 --> 00:08:14.256 A:middle
or does it also include this
other information as well?

00:08:14.456 --> 00:08:17.306 A:middle
Other users might require
other accessibility options.

00:08:17.526 --> 00:08:20.766 A:middle
For example, imagine a
user who lacks access

00:08:20.946 --> 00:08:23.336 A:middle
to the visual portion of
the multimedia content.

00:08:23.936 --> 00:08:26.236 A:middle
Such a user will want
to know what's going on,

00:08:26.416 --> 00:08:29.306 A:middle
what's depicted, in the
visual portion of the content

00:08:29.476 --> 00:08:30.986 A:middle
but requires that information

00:08:30.986 --> 00:08:33.236 A:middle
to be conveyed via
an alternative means.

00:08:33.456 --> 00:08:34.916 A:middle
What can be done in that case?

00:08:35.256 --> 00:08:37.186 A:middle
Well what's often
done in that case is

00:08:37.186 --> 00:08:40.596 A:middle
to include the information in
an alternative audio option

00:08:40.885 --> 00:08:43.976 A:middle
that includes a narration,
a description of the setting

00:08:43.976 --> 00:08:47.796 A:middle
and the action that's
important for the user

00:08:47.796 --> 00:08:49.356 A:middle
to follow what's going on.

00:08:50.136 --> 00:08:54.246 A:middle
So again, the idea is we can
supply multiple audio options

00:08:54.246 --> 00:08:55.926 A:middle
that are suitable
for different users.

00:08:56.036 --> 00:08:59.926 A:middle
We can supply dubbed audio for
those users who simply want

00:08:59.926 --> 00:09:04.286 A:middle
to hear the text, the speech
spoken, in translation.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:04.516 --> 00:09:07.686 A:middle
A re-recording of the dialog
mixed in with the music

00:09:08.026 --> 00:09:10.046 A:middle
and the sound effects.

00:09:10.426 --> 00:09:12.866 A:middle
But we also might want to
provide an audio option

00:09:12.866 --> 00:09:15.626 A:middle
that includes what I just
mentioned, a narration,

00:09:16.206 --> 00:09:18.616 A:middle
descriptive audio,
often called DVS

00:09:18.836 --> 00:09:21.986 A:middle
or descriptive video services
in some parts of the world.

00:09:22.386 --> 00:09:24.036 A:middle
This audio will include
a narration

00:09:24.036 --> 00:09:26.296 A:middle
that makes the visual
content accessible.

00:09:26.776 --> 00:09:31.206 A:middle
Again the audio options that
are made available would have

00:09:31.206 --> 00:09:33.946 A:middle
to be appropriately labeled:
what language do they use,

00:09:34.006 --> 00:09:35.206 A:middle
what features do they have,

00:09:35.206 --> 00:09:37.906 A:middle
so that the user can
either choose one manually

00:09:38.176 --> 00:09:41.316 A:middle
that best suits his or her
needs, or even more conveniently

00:09:41.556 --> 00:09:44.736 A:middle
so that the software itself can
choose an appropriate option

00:09:44.736 --> 00:09:47.316 A:middle
automatically according to
stored user preferences.

00:09:47.836 --> 00:09:52.326 A:middle
All right, so that's basically
the terminology we're going

00:09:52.326 --> 00:09:54.056 A:middle
to use to talk about
accessibility options.

00:09:54.326 --> 00:09:58.566 A:middle
Let's get into how iOS and OS
X are incorporating support

00:09:58.746 --> 00:10:02.796 A:middle
for accessibility options
in iOS 7and OS X Mavericks.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:03.346 --> 00:10:04.986 A:middle
If you look at system
preferences

00:10:04.986 --> 00:10:06.876 A:middle
in OS X Mavericks you'll note

00:10:06.936 --> 00:10:11.186 A:middle
that in the Accessibility pane
there is now a Captions area

00:10:11.336 --> 00:10:13.946 A:middle
which exposes two
different sets of preferences

00:10:13.946 --> 00:10:15.156 A:middle
that the user can configure.

00:10:15.846 --> 00:10:19.836 A:middle
The first set is about the
appearance of timed text

00:10:19.836 --> 00:10:22.126 A:middle
when it's played during
multimedia playback.

00:10:22.416 --> 00:10:24.776 A:middle
Remember the timed
text is essential

00:10:24.776 --> 00:10:26.986 A:middle
for conveying vital
information to the user,

00:10:27.156 --> 00:10:29.316 A:middle
and so it's very important
for the user to be able

00:10:29.316 --> 00:10:32.386 A:middle
to configure its display so
that it's actually legible.

00:10:32.386 --> 00:10:35.436 A:middle
If the user needs a larger
font it should be possible

00:10:35.436 --> 00:10:36.286 A:middle
to specify that.

00:10:36.686 --> 00:10:39.926 A:middle
If the user needs a greater
contrast between the color used

00:10:39.926 --> 00:10:43.016 A:middle
for the characters and the
color used for the backdrop

00:10:43.186 --> 00:10:46.336 A:middle
that offsets the text area
from whatever is behind it,

00:10:46.576 --> 00:10:48.696 A:middle
then it should be possible
to configure that as well.

00:10:49.036 --> 00:10:50.456 A:middle
Those preferences are here.

00:10:50.806 --> 00:10:52.766 A:middle
In fact, if you drill
down and look at this

00:10:52.766 --> 00:10:55.886 A:middle
in the seed release, you'll note
that there's sufficient control

00:10:56.126 --> 00:10:58.306 A:middle
to cover all of the
characteristics of text

00:10:58.736 --> 00:11:01.736 A:middle
that are supposed to be
customizable under the FCC rules

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:01.736 --> 00:11:04.226 A:middle
that I mentioned in
connection with U.S. law.

00:11:05.266 --> 00:11:08.466 A:middle
The second preference that's
available here pertains

00:11:08.466 --> 00:11:12.296 A:middle
to how multimedia content should
automatically be configured

00:11:12.606 --> 00:11:16.126 A:middle
so that it presents options that
are appropriate for the user

00:11:16.126 --> 00:11:17.656 A:middle
without the user
having to intervene.

00:11:18.036 --> 00:11:20.566 A:middle
The option here at the
bottom of this panel is

00:11:20.906 --> 00:11:23.386 A:middle
"Prefer Closed Captions
and SDH".

00:11:23.726 --> 00:11:27.556 A:middle
Those are the two common terms
for timed text for accessibility

00:11:27.766 --> 00:11:29.926 A:middle
that users will recognize
from other domains,

00:11:30.316 --> 00:11:32.416 A:middle
television, Blu-ray, and DVD.

00:11:33.136 --> 00:11:35.436 A:middle
What this preference allows
the user to do is to say,

00:11:35.596 --> 00:11:37.846 A:middle
whenever it's available
I want timed text

00:11:37.846 --> 00:11:40.456 A:middle
for accessibility
automatically to be displayed.

00:11:41.956 --> 00:11:44.856 A:middle
Similarly the same
preferences are now available

00:11:44.856 --> 00:11:47.256 A:middle
for the user's configuration
on iOS 7.

00:11:47.666 --> 00:11:50.946 A:middle
If you go into Settings and
drill down through General

00:11:50.946 --> 00:11:53.986 A:middle
and Accessibility into
Subtitles and Captioning,

00:11:54.266 --> 00:11:57.636 A:middle
the very same preferences
are there.

00:11:57.806 --> 00:12:01.156 A:middle
So now that they're there, if
you're an application developer

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:01.156 --> 00:12:02.586 A:middle
of course your natural
question is,

00:12:03.046 --> 00:12:07.006 A:middle
how can my app automatically
honor those preferences?

00:12:07.236 --> 00:12:09.926 A:middle
And the answer is, well,
you don't have to do much

00:12:09.926 --> 00:12:11.756 A:middle
to make sure that
happens and many

00:12:11.756 --> 00:12:13.896 A:middle
of you need not do
anything at all.

00:12:14.476 --> 00:12:15.966 A:middle
Let's talk about the
two different sets

00:12:15.966 --> 00:12:17.056 A:middle
of preferences separately.

00:12:17.056 --> 00:12:19.356 A:middle
First, the text styling
preferences

00:12:19.726 --> 00:12:22.086 A:middle
when timed text is
being displayed together

00:12:22.086 --> 00:12:22.956 A:middle
with multimedia.

00:12:23.666 --> 00:12:27.346 A:middle
Apps don't need to do anything
in order for that timed text

00:12:27.346 --> 00:12:32.356 A:middle
to honor the user's preferences,
except to allow AV Foundation

00:12:32.356 --> 00:12:33.576 A:middle
to perform the rendering.

00:12:33.576 --> 00:12:36.506 A:middle
So in other words,
don't do extra work

00:12:36.506 --> 00:12:38.976 A:middle
to do the rendering yourself
and you're guaranteed

00:12:39.226 --> 00:12:41.906 A:middle
that the user preferences for
text styling will be honored.

00:12:42.566 --> 00:12:43.266 A:middle
End of story.

00:12:43.546 --> 00:12:46.246 A:middle
There may be other styling
information associated

00:12:46.286 --> 00:12:50.306 A:middle
with the text, either in the
media itself or perhaps applied

00:12:50.306 --> 00:12:54.106 A:middle
by an API that we have available
for you, but you should note

00:12:54.706 --> 00:12:57.396 A:middle
that the most important thing
is for the text to be legible

00:12:57.596 --> 00:13:01.396 A:middle
by the actual user, and so the
user's preferences trump all

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:01.396 --> 00:13:03.656 A:middle
of the styling information
and will be honored

00:13:03.946 --> 00:13:05.136 A:middle
when we render it for you.

00:13:05.626 --> 00:13:09.756 A:middle
OK, the other set of preference
I mentioned was the preference

00:13:09.756 --> 00:13:13.026 A:middle
regarding how media should be
configured by default in order

00:13:13.026 --> 00:13:15.826 A:middle
to honor the user's
preference for a particular type

00:13:15.826 --> 00:13:17.066 A:middle
of accessibility option.

00:13:17.466 --> 00:13:18.686 A:middle
The "Prefer Closed Captions

00:13:18.686 --> 00:13:20.996 A:middle
and SDH" checkbox is what
I'm talking about here.

00:13:21.496 --> 00:13:23.166 A:middle
To honor that preference, again,

00:13:23.466 --> 00:13:25.176 A:middle
many apps don't need
to do anything.

00:13:25.526 --> 00:13:27.296 A:middle
If you're using high-level
frameworks

00:13:27.296 --> 00:13:29.946 A:middle
such as an iOS
MPMoviePlayerController

00:13:29.946 --> 00:13:33.736 A:middle
to control playback of your
media or on OS X Mavericks

00:13:33.736 --> 00:13:36.526 A:middle
if you're using AVPlayerView
from AVKit,

00:13:37.186 --> 00:13:39.856 A:middle
items will automatically
be configured to honor

00:13:39.856 --> 00:13:43.316 A:middle
that preference and be displayed
by default with timed text

00:13:43.316 --> 00:13:45.396 A:middle
for accessibility
whenever it's present.

00:13:46.786 --> 00:13:50.796 A:middle
However, if you are supplying
your own user interface

00:13:51.416 --> 00:13:54.836 A:middle
or if you are creating your
own instances of AVPlayer,

00:13:55.116 --> 00:13:57.746 A:middle
you may have a little bit of
additional work to do in order

00:13:57.746 --> 00:14:00.726 A:middle
to make sure that happens,
and we'll talk about that.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:02.586 --> 00:14:05.896 A:middle
In order for you to honor
that user preference

00:14:06.026 --> 00:14:08.696 A:middle
for that particular
media option,

00:14:08.766 --> 00:14:11.416 A:middle
timed text for accessibility,
"Prefer Closed Captions

00:14:11.456 --> 00:14:14.516 A:middle
and SDH", in the seed that
you'll take home with you

00:14:14.516 --> 00:14:17.616 A:middle
of iOS 7 and also in the
seed of OS X Mavericks,

00:14:17.976 --> 00:14:19.276 A:middle
you need to do one thing.

00:14:19.706 --> 00:14:22.916 A:middle
Call the AVPlayer method
-setAppliesMediaSelection

00:14:22.916 --> 00:14:25.576 A:middle
CriteriaAutomatically:
and pass YES.

00:14:26.176 --> 00:14:27.876 A:middle
And what that says
is you want to opt

00:14:27.876 --> 00:14:31.096 A:middle
in for this automatic
selection behavior with respect

00:14:31.256 --> 00:14:34.336 A:middle
for criteria derived
from user preferences.

00:14:35.066 --> 00:14:37.186 A:middle
Even better news is
that after this seed,

00:14:37.186 --> 00:14:38.866 A:middle
when we get the next
seeds to you

00:14:39.096 --> 00:14:41.316 A:middle
and in the shipping versions,
you don't even have to do that,

00:14:41.886 --> 00:14:44.416 A:middle
and we will opt your
application in automatically

00:14:44.416 --> 00:14:47.986 A:middle
to this behavior if you merely
link against the new versions

00:14:47.986 --> 00:14:52.736 A:middle
of the SDK's, the iOS 7
SDK or the OS X 10.9 SDK,

00:14:52.736 --> 00:14:56.016 A:middle
and your AVPlayer instances
will automatically be opted

00:14:56.016 --> 00:14:57.786 A:middle
in to this automatic behavior.

00:14:58.106 --> 00:15:01.386 A:middle
Therefore when we get to that
point, if you have an app

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:01.726 --> 00:15:04.446 A:middle
that doesn't want to offer the
typical playback experience,

00:15:04.446 --> 00:15:07.686 A:middle
for example, if your app is
an authoring app but wants

00:15:07.686 --> 00:15:10.706 A:middle
to allow its users to audit the
content that's being authored

00:15:11.026 --> 00:15:13.026 A:middle
in any number of
states including those

00:15:13.026 --> 00:15:16.216 A:middle
that don't correspond to current
user preference settings,

00:15:16.486 --> 00:15:17.936 A:middle
you'll actually have to opt out.

00:15:17.936 --> 00:15:18.186 A:middle
You'll have

00:15:18.186 --> 00:15:21.946 A:middle
to say -setAppliesMediaSelection
CriteriaAutomatically:NO.

00:15:22.856 --> 00:15:24.996 A:middle
Well, to summarize it
doesn't do any harm for you

00:15:24.996 --> 00:15:26.756 A:middle
to call this method
and say what you want.

00:15:27.056 --> 00:15:29.866 A:middle
YES, I want that automatic
behavior or NO, I don't.

00:15:30.736 --> 00:15:32.536 A:middle
But in the subsequent
releases and when we get

00:15:32.536 --> 00:15:34.506 A:middle
to the shipping release,
the GM release,

00:15:34.866 --> 00:15:37.146 A:middle
if you want the automatic
behavior, there's no need

00:15:37.146 --> 00:15:38.076 A:middle
to call anything at all.

00:15:38.546 --> 00:15:42.486 A:middle
Next for API developers,

00:15:42.486 --> 00:15:45.796 A:middle
if you need to implement
your own user interface

00:15:46.106 --> 00:15:47.306 A:middle
to permit the selection

00:15:47.306 --> 00:15:48.946 A:middle
of specific options
that are present.

00:15:48.946 --> 00:15:51.116 A:middle
This is not the automatic
configuration of the item,

00:15:51.116 --> 00:15:54.306 A:middle
but once something is
prepared for playback you want

00:15:54.306 --> 00:15:56.706 A:middle
to make available all
of the various options

00:15:56.706 --> 00:15:58.766 A:middle
that are present, all the
audio options and so forth,

00:15:59.056 --> 00:16:02.256 A:middle
allow the user to pick one and
make that selection effective.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:02.806 --> 00:16:03.476 A:middle
How do you do that?

00:16:03.836 --> 00:16:06.476 A:middle
Well, let's go back to a picture
of a piece of multimedia here

00:16:06.476 --> 00:16:09.136 A:middle
with multiple audio
options, multiple captioning

00:16:09.136 --> 00:16:12.116 A:middle
and subtitle options; some
of these options are related

00:16:12.116 --> 00:16:13.636 A:middle
to accessibility
and some are not.

00:16:14.406 --> 00:16:15.916 A:middle
How do you know that
they're there?

00:16:16.846 --> 00:16:21.326 A:middle
In AV Foundation, each
of the groups of options

00:16:21.326 --> 00:16:23.696 A:middle
that are present will be
represented by an instance

00:16:23.976 --> 00:16:26.406 A:middle
of the class
AVMediaSelectionGroup,

00:16:27.056 --> 00:16:29.476 A:middle
and each option in the
group that's present,

00:16:29.476 --> 00:16:31.856 A:middle
intended to be treated as a
mutually exclusive option,

00:16:32.106 --> 00:16:33.716 A:middle
will be represented
by an instance

00:16:33.716 --> 00:16:35.176 A:middle
of AVMediaSelectionOption.

00:16:35.736 --> 00:16:38.346 A:middle
And each of those
AVMediaSelectionOptions will

00:16:38.346 --> 00:16:41.526 A:middle
have properties that describe
what the option is all about:

00:16:41.816 --> 00:16:45.876 A:middle
what's its media type,
what language does it use,

00:16:45.936 --> 00:16:47.206 A:middle
what features does it have.

00:16:47.266 --> 00:16:49.566 A:middle
Is it for accessibility
or just for translation,

00:16:49.646 --> 00:16:51.456 A:middle
for example in the
case of subtitles?

00:16:52.436 --> 00:16:54.166 A:middle
How do you get access
to those things?

00:16:54.566 --> 00:16:55.826 A:middle
Well, it's pretty simple.

00:16:55.826 --> 00:16:58.636 A:middle
Like most operations in
AV Foundation you start

00:16:58.636 --> 00:17:02.836 A:middle
with an instance of AVAsset,
probably an AVAsset initialized

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:02.836 --> 00:17:05.896 A:middle
with a URL to the file in
the file system or something

00:17:05.896 --> 00:17:09.116 A:middle
out on the network, and then to
get this information you start

00:17:09.116 --> 00:17:10.726 A:middle
by loading the value
of the property,

00:17:10.996 --> 00:17:14.476 A:middle
availableMediaCharacteristics
WithMediaSelectionOptions.

00:17:14.675 --> 00:17:16.786 A:middle
You want to find out what
groups of options are present.

00:17:17.915 --> 00:17:20.816 A:middle
The value of that
property, once it's loaded,

00:17:21.165 --> 00:17:23.366 A:middle
is going to be an
array of strings,

00:17:23.606 --> 00:17:26.536 A:middle
each of which represents
a media characteristic

00:17:26.776 --> 00:17:28.816 A:middle
that has options
associated with it.

00:17:28.896 --> 00:17:29.816 A:middle
For example,

00:17:29.816 --> 00:17:32.726 A:middle
if AVMediaCharacteristicVisual
is present,

00:17:33.006 --> 00:17:34.456 A:middle
you know that there
are video options.

00:17:34.616 --> 00:17:37.826 A:middle
If AVMediaCharacteristicAudible
is present you know

00:17:37.826 --> 00:17:38.926 A:middle
that there are audio options,

00:17:38.926 --> 00:17:41.126 A:middle
and if
AVMediaCharacteristicLegible is

00:17:41.126 --> 00:17:43.356 A:middle
present, you know that
there are captioning

00:17:43.396 --> 00:17:44.856 A:middle
or subtitle options or both.

00:17:46.176 --> 00:17:49.266 A:middle
Suppose you want to create
a menu that allows the user

00:17:49.266 --> 00:17:51.896 A:middle
to choose any specific option
to enable it for playback.

00:17:52.306 --> 00:17:53.116 A:middle
How do you do that?

00:17:53.326 --> 00:17:56.276 A:middle
Well, you want to get the
specific AVMediaSelectionGroup

00:17:56.426 --> 00:17:58.826 A:middle
for the characteristic
you're building the menu for.

00:17:59.116 --> 00:18:00.796 A:middle
Suppose it's the
Legible characteristic.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:01.246 --> 00:18:04.316 A:middle
I'll say, AVAsset, give me
the media selection group

00:18:04.316 --> 00:18:07.886 A:middle
for the media characteristic
AVMediaCharacteristicLegible,

00:18:08.806 --> 00:18:10.996 A:middle
and the return value
of that method is going

00:18:10.996 --> 00:18:13.006 A:middle
to be an instance of
AVMediaSelectionGroup

00:18:13.296 --> 00:18:15.856 A:middle
which will have one or
more options present in it,

00:18:16.206 --> 00:18:18.416 A:middle
each of which describes
options that are present.

00:18:18.776 --> 00:18:21.186 A:middle
You can use those
to populate a menu.

00:18:21.186 --> 00:18:23.686 A:middle
In fact you can use as the
name of each menu item,

00:18:23.986 --> 00:18:26.406 A:middle
the displayName of each
media selection option.

00:18:27.476 --> 00:18:30.586 A:middle
If you're playing this asset
- and of course in order to do

00:18:30.586 --> 00:18:33.016 A:middle
so you have to create an
instance of AVPlayerItem

00:18:33.016 --> 00:18:35.196 A:middle
and an instance of
AVPlayer to play it -

00:18:35.746 --> 00:18:39.606 A:middle
and the user selects a specific
media option, suppose that one

00:18:39.606 --> 00:18:42.936 A:middle
on the lower right, how do you
make that selection effective?

00:18:43.716 --> 00:18:46.896 A:middle
You use the AVPlayerItem
method -selectMediaOption:

00:18:46.896 --> 00:18:50.456 A:middle
inMediaSelectionGroup:, and
the effect of that will be

00:18:50.456 --> 00:18:54.036 A:middle
to enable the option that's
selected and to disable all

00:18:54.036 --> 00:18:55.316 A:middle
of the other options
in the group.

00:18:56.166 --> 00:18:58.966 A:middle
So that's a high level
description of the API

00:18:58.966 --> 00:19:01.116 A:middle
that you would use in order
to implement all this.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:01.776 --> 00:19:04.906 A:middle
Even better, we're providing a
code sample that you can read

00:19:05.016 --> 00:19:06.896 A:middle
that goes through
exactly that process.

00:19:07.126 --> 00:19:09.346 A:middle
And the code sample actually
does some interesting things

00:19:09.346 --> 00:19:10.416 A:middle
as well, so we're going

00:19:10.416 --> 00:19:11.826 A:middle
to demonstrate it
for you right now.

00:19:12.166 --> 00:19:14.136 A:middle
Courtney Kennedy, one of
the Engineering Managers

00:19:14.136 --> 00:19:15.716 A:middle
in Media Systems is
going to that for us.

00:19:16.426 --> 00:19:17.356 A:middle
Courtney?

00:19:18.056 --> 00:19:19.176 A:middle
&gt;&gt; Courtney Kennedy:
Thanks Kevin.

00:19:24.636 --> 00:19:28.226 A:middle
[Applause] So I have an app
and a special movie here

00:19:28.226 --> 00:19:28.986 A:middle
that I'm going to use

00:19:28.986 --> 00:19:32.496 A:middle
to demonstrate how you can
use the Media Selection API's

00:19:32.526 --> 00:19:35.736 A:middle
that Kevin has been describing
to both inspect the audio

00:19:35.736 --> 00:19:39.446 A:middle
and legible options
in a particular movie

00:19:39.816 --> 00:19:43.106 A:middle
and to select between them.

00:19:43.366 --> 00:19:46.316 A:middle
So this app has four
different players in it,

00:19:46.496 --> 00:19:50.186 A:middle
one in each quadrant, and I
have the same movie loaded

00:19:50.186 --> 00:19:51.376 A:middle
up in each of them.

00:19:52.496 --> 00:19:56.726 A:middle
In addition this app has
a menu on each player

00:19:58.316 --> 00:20:02.166 A:middle
that shows both the
audio options available

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:02.616 --> 00:20:04.706 A:middle
and the subtitle
options available.

00:20:04.776 --> 00:20:09.586 A:middle
So you can see this particular
movie has both an English audio

00:20:09.586 --> 00:20:10.756 A:middle
and a Hindi audio.

00:20:11.256 --> 00:20:13.176 A:middle
To being with let's
select the English,

00:20:13.756 --> 00:20:18.136 A:middle
and then we can also
select Subtitles

00:20:18.346 --> 00:20:20.056 A:middle
for each of the four players.

00:20:20.056 --> 00:20:23.866 A:middle
So you see we have quite a list
of subtitles to choose from here

00:20:24.706 --> 00:20:29.336 A:middle
and just as with audio, they're
all listed by language and some

00:20:29.336 --> 00:20:32.086 A:middle
of them include the
SDH label on them.

00:20:32.666 --> 00:20:35.506 A:middle
As Kevin said, that
label indicates

00:20:35.686 --> 00:20:37.616 A:middle
that there's additional
information

00:20:37.616 --> 00:20:40.636 A:middle
in those subtitles beyond
just a simple translation.

00:20:41.346 --> 00:20:44.396 A:middle
So in this particular
movie, for some languages,

00:20:44.396 --> 00:20:47.586 A:middle
we have both regular translation
subtitles and we have SDH,

00:20:47.586 --> 00:20:50.946 A:middle
and for some languages we
have only one or the other.

00:20:51.996 --> 00:20:54.766 A:middle
So let's go through,
for each player,

00:20:54.766 --> 00:21:01.136 A:middle
and just select some
different subtitles to play.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:01.796 --> 00:21:05.736 A:middle
And now let's play the
movie and see what we get

00:21:05.826 --> 00:21:14.046 A:middle
for audio and subtitles.

00:21:14.046 --> 00:21:14.766 A:middle
[ Movie Playing ]

00:21:14.766 --> 00:21:18.746 A:middle
Okay so we can see that
our media selections made

00:21:18.746 --> 00:21:20.856 A:middle
on AV Foundation were
honored during playback.

00:21:21.816 --> 00:21:27.306 A:middle
And let's listen to a bit of
the Hindi and look at a few

00:21:27.306 --> 00:21:37.856 A:middle
of the other subtitles
available in this movie.

00:21:37.856 --> 00:21:37.923 A:middle
[ Background Sounds ]

00:21:37.923 --> 00:21:40.096 A:middle
And play again.

00:21:40.096 --> 00:21:40.186 A:middle
[ Movie Playing ]

00:21:40.186 --> 00:21:48.206 A:middle
So if this is functionality
that's interesting to you

00:21:48.206 --> 00:21:51.236 A:middle
and something that you want
to add to your media player,

00:21:51.876 --> 00:21:54.606 A:middle
it's possible to do so
using AV Foundation.

00:21:54.916 --> 00:21:57.696 A:middle
And if you want to see how
we did it as Kevin mentioned,

00:21:58.206 --> 00:22:01.286 A:middle
both this app, which is called
AV Media Selection Demo,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:01.796 --> 00:22:05.396 A:middle
and this movie, which my Apple
engineering brethren helped me

00:22:05.396 --> 00:22:08.436 A:middle
make and it's great test
content, they're both available

00:22:08.436 --> 00:22:11.586 A:middle
as part of the sample
code for this years' show.

00:22:11.586 --> 00:22:12.936 A:middle
[Applause]

00:22:12.936 --> 00:22:15.766 A:middle
&gt;&gt; Kevin: Thanks, Courtney.

00:22:16.826 --> 00:22:19.406 A:middle
OK, so we've talked
a lot about things

00:22:19.406 --> 00:22:21.586 A:middle
that application developers
need to know in order

00:22:21.586 --> 00:22:23.696 A:middle
to expose these options
in their applications,

00:22:24.086 --> 00:22:26.336 A:middle
but you must be getting
nervous, application developers,

00:22:26.336 --> 00:22:29.236 A:middle
because we haven't said anything
to the content providers

00:22:29.236 --> 00:22:30.526 A:middle
and producers sitting around you

00:22:30.836 --> 00:22:32.566 A:middle
about how they can
provide these options

00:22:32.786 --> 00:22:34.476 A:middle
that your apps can
actually make available.

00:22:34.816 --> 00:22:37.146 A:middle
Don't worry, we've got material
for those people as well.

00:22:37.426 --> 00:22:39.036 A:middle
In fact we've got
multiple choices

00:22:39.036 --> 00:22:40.636 A:middle
for those content
producers to use

00:22:40.956 --> 00:22:43.696 A:middle
to package accessibility
options with their media.

00:22:44.226 --> 00:22:46.486 A:middle
So let's go back to a picture
of a piece of multimedia

00:22:46.486 --> 00:22:49.216 A:middle
with multiple video options,
multiple audio options,

00:22:49.526 --> 00:22:51.906 A:middle
multiple timed text options
in the form of captions

00:22:51.906 --> 00:22:55.006 A:middle
or subtitles, some of which
have accessibility features

00:22:55.006 --> 00:22:56.676 A:middle
associated with them and
some of which do not.

00:22:57.076 --> 00:22:58.566 A:middle
How do you make media like this?

00:22:59.256 --> 00:23:00.056 A:middle
Several choices.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.676 --> 00:23:04.136 A:middle
You can choose HTML5 and
its support for text tracks.

00:23:04.526 --> 00:23:07.466 A:middle
You can choose HTTP Live
streaming and its support

00:23:07.466 --> 00:23:11.086 A:middle
for what it calls multiple
alternative renditions of media.

00:23:11.586 --> 00:23:13.916 A:middle
Or you can use the
QuickTime movie file format

00:23:13.916 --> 00:23:16.426 A:middle
or its closely allied
format MPEG-4;

00:23:16.696 --> 00:23:18.776 A:middle
they have the same
features, and for the purposes

00:23:18.776 --> 00:23:21.066 A:middle
of our talks though we're going
to treat them as a tandem here.

00:23:22.256 --> 00:23:25.796 A:middle
Let's go through what the
features are of each one related

00:23:25.796 --> 00:23:27.026 A:middle
to accessibility options.

00:23:27.026 --> 00:23:28.136 A:middle
First, HTML5.

00:23:28.836 --> 00:23:31.516 A:middle
The current revision of
the HTML5 spec allows you

00:23:31.516 --> 00:23:36.086 A:middle
to include one or more text
tracks in your HTML markup.

00:23:36.576 --> 00:23:37.876 A:middle
It does not currently allow you

00:23:37.876 --> 00:23:40.236 A:middle
to have multiple audio
options declared in your markup

00:23:40.346 --> 00:23:42.846 A:middle
or multiple video options,
but it does allow it for text.

00:23:44.036 --> 00:23:44.866 A:middle
What does it look like?

00:23:45.486 --> 00:23:46.856 A:middle
Well first of all
I should mention

00:23:46.856 --> 00:23:50.766 A:middle
that in HTML5 parlance text
tracks like this are known

00:23:50.766 --> 00:23:53.596 A:middle
as "out of band" text tracks,
and why are they called

00:23:53.596 --> 00:23:54.686 A:middle
"out of band" text tracks?

00:23:54.686 --> 00:23:58.486 A:middle
Well simply because the resource
that carries the timed text,

00:23:58.836 --> 00:24:02.126 A:middle
the subtitles, is a
different resource from that

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:02.356 --> 00:24:04.236 A:middle
that carries the
audio and the video.

00:24:04.436 --> 00:24:06.866 A:middle
In the example markup in the
lower part of this slide,

00:24:07.166 --> 00:24:10.876 A:middle
you'll see that the source of
the video element is an M4V file

00:24:11.826 --> 00:24:15.096 A:middle
but the source of the
captions is a WebVTT file,

00:24:15.096 --> 00:24:17.786 A:middle
so that is why these are called
"out of band" text tracks.

00:24:18.206 --> 00:24:21.116 A:middle
That has the virtue of
allowing you to add text options

00:24:21.296 --> 00:24:24.046 A:middle
without modifying your
audiovisual resources.

00:24:24.046 --> 00:24:26.246 A:middle
You just declare more
text tracks in your markup

00:24:26.476 --> 00:24:28.306 A:middle
as you have the text available.

00:24:29.226 --> 00:24:30.866 A:middle
What does the rest of
this markup look like?

00:24:31.356 --> 00:24:34.586 A:middle
Well first of all, this
example declares timed text

00:24:34.826 --> 00:24:36.086 A:middle
for accessibility.

00:24:36.376 --> 00:24:39.156 A:middle
It carries the additional
information - identification

00:24:39.156 --> 00:24:41.646 A:middle
of speakers, description
of music and sound -

00:24:41.646 --> 00:24:44.686 A:middle
that you would expect from
timed text for accessibility.

00:24:45.096 --> 00:24:48.946 A:middle
The way that you
declare that in HTML5 is

00:24:48.946 --> 00:24:53.206 A:middle
to give the text track a
kind, called "captions".

00:24:53.586 --> 00:24:56.616 A:middle
"Captions" is the kind of
text track for accessibility.

00:24:56.806 --> 00:24:58.176 A:middle
If it's simply a text track

00:24:58.266 --> 00:25:01.136 A:middle
for translation purposes
you would give it a kind

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:01.136 --> 00:25:05.216 A:middle
of "subtitles", so that's
how you indicate that.

00:25:05.556 --> 00:25:07.286 A:middle
You want to indicate
the source language

00:25:07.286 --> 00:25:09.736 A:middle
because it's really useful for
the user to pick a language

00:25:09.956 --> 00:25:11.926 A:middle
that he or she can
actually read.

00:25:12.456 --> 00:25:15.246 A:middle
I've mentioned the default
attribute here on my slide

00:25:15.246 --> 00:25:16.886 A:middle
but I'm not using
it in my markup.

00:25:17.286 --> 00:25:21.306 A:middle
Why? Well that's because if you
recall accessibility options are

00:25:21.306 --> 00:25:25.376 A:middle
made available as an alternative
means to convey information

00:25:25.376 --> 00:25:28.116 A:middle
that otherwise is conveyed
in the default partitioning

00:25:28.116 --> 00:25:30.296 A:middle
of that information into
audio, video and text

00:25:30.296 --> 00:25:31.406 A:middle
by the content provider.

00:25:31.806 --> 00:25:34.436 A:middle
Because accessibility
options are alternatives,

00:25:34.656 --> 00:25:37.106 A:middle
they are not typically
designated as something

00:25:37.106 --> 00:25:38.446 A:middle
to be displayed by default.

00:25:38.666 --> 00:25:40.896 A:middle
So I'm not using the
default attribute here.

00:25:41.516 --> 00:25:45.726 A:middle
I am providing a user-readable
label so that if the user agent

00:25:45.726 --> 00:25:49.086 A:middle
or the JavaScript provides
some way for the end user

00:25:49.086 --> 00:25:51.366 A:middle
to select options
there's a useful,

00:25:51.696 --> 00:25:54.886 A:middle
identifying label available
to use in the user's language.

00:25:56.206 --> 00:25:58.226 A:middle
Okay, so what are the
highlights of HTML5?

00:25:58.866 --> 00:26:00.586 A:middle
Well as I mentioned
there's no need

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:00.586 --> 00:26:03.476 A:middle
to modify the main media
resource that's played

00:26:03.476 --> 00:26:06.076 A:middle
by the media element, in
my case a video element

00:26:06.076 --> 00:26:07.846 A:middle
in the example markup I showed,

00:26:08.336 --> 00:26:11.546 A:middle
and because you're using an
HTML5-compliant user agent you

00:26:11.546 --> 00:26:17.546 A:middle
have all of the other facilities
that are familiar from HTML.

00:26:17.696 --> 00:26:19.086 A:middle
CSS styling will apply

00:26:19.086 --> 00:26:22.326 A:middle
to the elements displaying the
timed text just as it applies

00:26:22.326 --> 00:26:24.786 A:middle
to other elements as well,
so lots of power there.

00:26:25.286 --> 00:26:28.236 A:middle
You have JavaScript available
for the control of timed text.

00:26:28.576 --> 00:26:32.426 A:middle
There's a rich API defined for
JavaScript on these text tracks.

00:26:32.666 --> 00:26:36.406 A:middle
You have access to the cues,
a cue list, for each track:

00:26:36.766 --> 00:26:38.436 A:middle
the text that's going
to be displayed,

00:26:38.796 --> 00:26:41.016 A:middle
the timing of that text
is available to you.

00:26:41.316 --> 00:26:45.096 A:middle
And of course because you can
display the text in any element

00:26:45.096 --> 00:26:47.636 A:middle
in the document you don't
have to place it right on top

00:26:47.636 --> 00:26:49.596 A:middle
of the video, you can
put it somewhere else.

00:26:50.476 --> 00:26:54.106 A:middle
But an important consideration
here is that if you choose HTML5

00:26:54.806 --> 00:26:58.416 A:middle
to declare the availability
of your timed text,

00:26:58.836 --> 00:27:02.526 A:middle
implicitly you require an
HTML5-compliant user agent

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:02.526 --> 00:27:05.926 A:middle
to be available to present that
timed text during playback.

00:27:06.806 --> 00:27:07.896 A:middle
And you should be aware

00:27:08.136 --> 00:27:12.426 A:middle
that HTML5 user agents
possibly aren't present in all

00:27:12.426 --> 00:27:14.796 A:middle
of the environments in which
you may wish your timed text

00:27:15.076 --> 00:27:16.026 A:middle
to be made available.

00:27:16.106 --> 00:27:18.716 A:middle
An important example
is Apple TV,

00:27:18.946 --> 00:27:21.726 A:middle
when media resources are
played via AirPlay video.

00:27:21.726 --> 00:27:26.016 A:middle
In the implementation of AirPlay
video the Apple TV has access

00:27:26.016 --> 00:27:28.116 A:middle
only to the main media resource.

00:27:28.436 --> 00:27:31.766 A:middle
It does not have access to
the surrounding HTML5 markup

00:27:32.256 --> 00:27:34.576 A:middle
or to the timed text tracks
that are declared there.

00:27:34.896 --> 00:27:37.456 A:middle
So if you play a media
resource via AirPlay video

00:27:37.456 --> 00:27:41.036 A:middle
to an Apple TV, and you're only
making your timed text available

00:27:41.036 --> 00:27:44.076 A:middle
via HTML5, those text
tracks are not going

00:27:44.076 --> 00:27:45.696 A:middle
to be available on the Apple TV.

00:27:47.266 --> 00:27:51.676 A:middle
OK, another choice that we want
to review, HTTP Live Streaming.

00:27:51.966 --> 00:27:52.856 A:middle
Very flexible.

00:27:53.116 --> 00:27:56.846 A:middle
HTTP Live Streaming supports
multiple alternative renditions

00:27:57.156 --> 00:27:59.666 A:middle
for each of the media
types it supports.

00:27:59.666 --> 00:28:03.536 A:middle
You can have multiple video
renditions, audio, subtitles,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:03.536 --> 00:28:07.096 A:middle
and, now for the first time
in iOS 7 and OS X Mavericks,

00:28:07.096 --> 00:28:09.116 A:middle
you can have multiple
closed-caption renditions

00:28:09.416 --> 00:28:09.916 A:middle
as well.

00:28:10.126 --> 00:28:12.416 A:middle
Some of them for accessibility
purposes, some of them

00:28:12.416 --> 00:28:13.826 A:middle
for translation and so forth.

00:28:14.866 --> 00:28:18.516 A:middle
What does it look like
in your master playlist?

00:28:18.516 --> 00:28:21.106 A:middle
Well like any other rendition
that you make available

00:28:21.106 --> 00:28:24.336 A:middle
for HTTP Live Streaming, you
simply have to declare it

00:28:24.666 --> 00:28:25.876 A:middle
in your master playlist.

00:28:26.306 --> 00:28:28.976 A:middle
You do that by declaring
that you have something

00:28:28.976 --> 00:28:30.236 A:middle
of a particular media type.

00:28:30.366 --> 00:28:34.036 A:middle
If it's subtitles, you say its
TYPE is SUBTITLES and usually,

00:28:34.036 --> 00:28:36.426 A:middle
though not always
depending on the media type,

00:28:36.746 --> 00:28:39.956 A:middle
you have to declare the media
playlist that has references

00:28:39.956 --> 00:28:42.576 A:middle
to the media segments that
actually carry the media data.

00:28:42.746 --> 00:28:45.376 A:middle
Here in this example I'm
saying that the media segments

00:28:45.406 --> 00:28:50.456 A:middle
that carry the subtitles are in
the URI, "webvtt/session.m3u8".

00:28:51.866 --> 00:28:55.056 A:middle
This example, again, is
an example of subtitles

00:28:55.226 --> 00:28:58.416 A:middle
for accessibility and
so we want to declare

00:28:58.526 --> 00:29:02.116 A:middle
that these subtitles have the
accessibility characteristics.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:02.696 --> 00:29:06.146 A:middle
Those are, "transcribes spoken
dialog for accessibility",

00:29:06.496 --> 00:29:10.536 A:middle
in the parlance of this dot
language, "public.accessibility.

00:29:10.536 --> 00:29:14.846 A:middle
transcribes-spoken-dialog",
and also you want to declare

00:29:14.846 --> 00:29:16.986 A:middle
that these subtitles
"describe music and sound",

00:29:16.986 --> 00:29:18.716 A:middle
or "public.accessibility.

00:29:18.716 --> 00:29:20.216 A:middle
describes-music-and-sound".

00:29:20.526 --> 00:29:22.946 A:middle
And that's how, in your
master playlist, you say,

00:29:23.226 --> 00:29:26.266 A:middle
"I have SDH subtitles,
I have timed text

00:29:26.576 --> 00:29:28.076 A:middle
for accessibility purposes".

00:29:28.466 --> 00:29:30.006 A:middle
Let's just run through some

00:29:30.006 --> 00:29:31.786 A:middle
of the other attributes
for completeness.

00:29:32.296 --> 00:29:34.426 A:middle
Declare the LANGUAGE
of the subtitles.

00:29:34.766 --> 00:29:35.646 A:middle
It's written text.

00:29:35.826 --> 00:29:37.186 A:middle
Users are going to want to know.

00:29:37.186 --> 00:29:38.286 A:middle
Don't forget.

00:29:39.306 --> 00:29:42.336 A:middle
Accessibility options, again,
are not typically marked

00:29:42.336 --> 00:29:44.086 A:middle
as to be displayed by default

00:29:44.486 --> 00:29:46.296 A:middle
since they're normally
constructed

00:29:46.426 --> 00:29:48.606 A:middle
as an alternative means
to convey information,

00:29:49.206 --> 00:29:51.576 A:middle
but we definitely do want
to make them available

00:29:51.576 --> 00:29:56.186 A:middle
for automatic selection in case
an accessibility option matches

00:29:56.406 --> 00:29:57.806 A:middle
the users preference best.

00:29:58.346 --> 00:30:00.926 A:middle
We want the software to be
able to configure the display

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.926 --> 00:30:03.796 A:middle
of the item to honor those
preferences automatically,

00:30:03.976 --> 00:30:06.816 A:middle
so make your accessibility
options automatically

00:30:06.816 --> 00:30:07.866 A:middle
selectable, please.

00:30:09.026 --> 00:30:11.926 A:middle
Also for a manual selection,
for a user interface

00:30:11.926 --> 00:30:13.166 A:middle
that allows the user to do that,

00:30:13.486 --> 00:30:16.866 A:middle
it's handy to supply
a user-readable NAME.

00:30:19.326 --> 00:30:20.916 A:middle
Similarly for closed-captions.

00:30:21.576 --> 00:30:22.686 A:middle
First of all you want to mention

00:30:22.686 --> 00:30:24.936 A:middle
that you have closed-captioned
media and you do

00:30:24.936 --> 00:30:27.116 A:middle
so by declaring the
TYPE as CLOSED-CAPTIONS.

00:30:27.856 --> 00:30:29.416 A:middle
But in the case of
CLOSED-CAPTIONS,

00:30:29.956 --> 00:30:31.886 A:middle
that media is not
actually carried

00:30:32.336 --> 00:30:34.216 A:middle
in independent media segments.

00:30:34.496 --> 00:30:37.466 A:middle
Closed-captions in HTTP
Live Streaming are carried

00:30:37.596 --> 00:30:40.046 A:middle
in the video substream,
in fact according

00:30:40.046 --> 00:30:42.076 A:middle
to the ATSC specification.

00:30:43.126 --> 00:30:45.436 A:middle
So how do we declare their
presence and where they are?

00:30:45.686 --> 00:30:48.986 A:middle
What you say is not what the
URI or the media playlist is -

00:30:48.986 --> 00:30:51.066 A:middle
you don't need one because
they're going to be carried

00:30:51.066 --> 00:30:53.656 A:middle
in the video and the media
playlist for the video is going

00:30:53.656 --> 00:30:54.666 A:middle
to tell you where that is.

00:30:55.486 --> 00:30:58.996 A:middle
But you do want to declare what
closed-caption channel you're

00:30:58.996 --> 00:31:00.396 A:middle
making this declaration for,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.766 --> 00:31:03.496 A:middle
closed-caption channel
1, 2, 3 or 4.

00:31:03.846 --> 00:31:07.576 A:middle
In this case I've got English
closed-captions in CC channel 1

00:31:07.636 --> 00:31:10.946 A:middle
so that's what I'm declaring
using the INSTREAM-ID attribute.

00:31:11.706 --> 00:31:15.126 A:middle
I want to mention also
that closed-captions,

00:31:15.126 --> 00:31:18.356 A:middle
because that they were devised
specifically for the purpose

00:31:18.356 --> 00:31:21.206 A:middle
of accessibility,
our software assumes

00:31:21.206 --> 00:31:24.056 A:middle
that all closed-caption
media has the characteristics

00:31:24.386 --> 00:31:26.536 A:middle
"transcribes spoken
dialog for accessibility"

00:31:26.566 --> 00:31:29.096 A:middle
and "describes music and
sound for accessibility".

00:31:29.096 --> 00:31:32.146 A:middle
So this declaration is here
for illustrative purposes only.

00:31:32.416 --> 00:31:35.196 A:middle
It's closed-captions, it's
intended for accessibility,

00:31:35.426 --> 00:31:37.316 A:middle
so we assume they have
those characteristics.

00:31:37.656 --> 00:31:41.506 A:middle
Declare the LANGUAGE,
don't forget.

00:31:42.596 --> 00:31:45.526 A:middle
Again, accessibility options
not typically the DEFAULT,

00:31:45.526 --> 00:31:46.346 A:middle
but we do want them

00:31:46.346 --> 00:31:49.706 A:middle
to be automatically
selectable, and a name is handy.

00:31:51.336 --> 00:31:52.956 A:middle
Finally, we haven't
seen this before,

00:31:52.956 --> 00:31:55.026 A:middle
an example of this
before; what about audio?

00:31:56.026 --> 00:31:58.656 A:middle
I mentioned earlier that
accessibility options

00:31:58.656 --> 00:32:02.646 A:middle
that take the form of audio
media are greatly appreciated

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:02.646 --> 00:32:03.276 A:middle
when present.

00:32:03.876 --> 00:32:07.446 A:middle
Here's an example of one such
accessibility option in audio.

00:32:07.896 --> 00:32:11.156 A:middle
This particular one, this audio
rendition that I'm declaring

00:32:11.156 --> 00:32:12.146 A:middle
with a TYPE of AUDIO,

00:32:12.146 --> 00:32:14.236 A:middle
and of course I'm also
declaring its media playlist,

00:32:14.756 --> 00:32:17.656 A:middle
has the characteristic
"public.accessibility.

00:32:17.656 --> 00:32:18.676 A:middle
describes-video".

00:32:19.006 --> 00:32:23.616 A:middle
That means that that narration,
that description of the setting

00:32:23.686 --> 00:32:25.666 A:middle
and action that's
depicted visually,

00:32:25.906 --> 00:32:28.316 A:middle
is present in this
audio rendition.

00:32:28.616 --> 00:32:32.496 A:middle
It's mixed in together with
the speech and the music

00:32:32.496 --> 00:32:33.446 A:middle
and the sound effects.

00:32:33.446 --> 00:32:36.396 A:middle
Again I want to declare
the LANGUAGE,

00:32:36.846 --> 00:32:38.986 A:middle
accessibility option not
typically the DEFAULT,

00:32:39.346 --> 00:32:41.166 A:middle
but do make it selectable
automatically,

00:32:41.876 --> 00:32:42.966 A:middle
and a name can be handy.

00:32:43.506 --> 00:32:48.476 A:middle
So there you go for audio,
closed-captions and subtitles.

00:32:48.776 --> 00:32:49.886 A:middle
By the way, the additions

00:32:49.886 --> 00:32:52.786 A:middle
to the HTTP Live
Streaming specification

00:32:53.076 --> 00:32:53.986 A:middle
that you've witnessed here,

00:32:53.986 --> 00:32:55.676 A:middle
the ability to declare
closed-captions,

00:32:56.046 --> 00:33:00.826 A:middle
those are in this draft of the
specification that's available

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.826 --> 00:33:02.056 A:middle
through the developer program

00:33:02.396 --> 00:33:03.996 A:middle
that we intend to
finalize by fall.

00:33:05.126 --> 00:33:07.366 A:middle
So highlights of
HTTP Live Streaming.

00:33:07.366 --> 00:33:10.266 A:middle
It has a similar
virtue to that of HTML5.

00:33:10.826 --> 00:33:12.856 A:middle
You can add accessibility
options

00:33:13.136 --> 00:33:15.226 A:middle
without modifying
existing media,

00:33:15.546 --> 00:33:17.486 A:middle
without modifying
existing portions

00:33:17.486 --> 00:33:18.726 A:middle
of your master playlist.

00:33:19.046 --> 00:33:21.556 A:middle
You simply declare the
additional renditions

00:33:21.556 --> 00:33:22.136 A:middle
that you have.

00:33:22.616 --> 00:33:24.526 A:middle
You provide the media playlist

00:33:24.526 --> 00:33:26.796 A:middle
where appropriate,
and you're done.

00:33:27.506 --> 00:33:29.656 A:middle
Another point about
HTTP Live Streaming,

00:33:29.656 --> 00:33:32.686 A:middle
though we do have a feature that
allows you to specify styling

00:33:33.026 --> 00:33:38.006 A:middle
of subtitles in HTTP Live
Streaming that take the form

00:33:38.006 --> 00:33:42.576 A:middle
of WebVTT documents, your
styling that you apply

00:33:42.576 --> 00:33:45.256 A:middle
by the API that I'm
mentioning here, textStyleRules,

00:33:45.446 --> 00:33:49.056 A:middle
remember that will be overridden
if the user has set preference

00:33:49.056 --> 00:33:52.506 A:middle
for the appearance of text.

00:33:52.716 --> 00:33:54.516 A:middle
All right, so let's turn
our attention to the third

00:33:54.516 --> 00:33:55.546 A:middle
of these three options.

00:33:55.866 --> 00:33:58.366 A:middle
From HTML5 to HTTP
Live Streaming,

00:33:58.366 --> 00:34:02.216 A:middle
now to the QuickTime Movie file
format and MPEG-4 file format.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:02.736 --> 00:34:04.536 A:middle
The good news about
these file formats is

00:34:04.536 --> 00:34:07.816 A:middle
that they have had the
ability since their inception

00:34:08.146 --> 00:34:10.966 A:middle
to represent all of the
information that's necessary

00:34:11.226 --> 00:34:13.766 A:middle
to include multiple
alternative groups

00:34:14.016 --> 00:34:17.005 A:middle
and to identify the purpose
of any member of the group.

00:34:17.306 --> 00:34:20.346 A:middle
You can have multiple video
tracks that are intended

00:34:20.346 --> 00:34:23.466 A:middle
to be chosen mutually
exclusively to each other.

00:34:23.815 --> 00:34:25.826 A:middle
You can have multiple
audio tracks as well.

00:34:25.826 --> 00:34:28.275 A:middle
Multiple captioning
and subtitle tracks.

00:34:28.525 --> 00:34:32.735 A:middle
It's all built into the file
format and has been forever.

00:34:33.565 --> 00:34:35.255 A:middle
Let's talk about
where that stuff shows

00:34:35.255 --> 00:34:37.346 A:middle
up in the binary file
format, and I'm going

00:34:37.346 --> 00:34:40.096 A:middle
to defer the discussion of
how you can create movie files

00:34:40.096 --> 00:34:42.676 A:middle
with these features to a
colleague of mine who's going

00:34:42.676 --> 00:34:44.065 A:middle
to come up and describe the API

00:34:44.065 --> 00:34:45.516 A:middle
that you can use
for that purpose.

00:34:45.795 --> 00:34:48.565 A:middle
But let's just quickly review
what's in the movie file format

00:34:48.565 --> 00:34:50.956 A:middle
that you need to
specify the presence

00:34:50.956 --> 00:34:52.226 A:middle
of accessibility options.

00:34:52.886 --> 00:34:54.106 A:middle
First of all, every track

00:34:54.106 --> 00:34:56.246 A:middle
in a movie file has
a language setting.

00:34:56.525 --> 00:34:58.356 A:middle
It's right there in
the media header atom

00:34:58.646 --> 00:35:00.756 A:middle
of the media that's
associated with that track.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:01.126 --> 00:35:03.606 A:middle
That accommodates
an ISO-639 code.

00:35:04.186 --> 00:35:06.916 A:middle
If you need a larger
declaration of the language,

00:35:06.916 --> 00:35:09.056 A:middle
if you need to declare the
writing system that's used

00:35:09.436 --> 00:35:12.336 A:middle
or the regional variant of the
language that's used in addition

00:35:12.336 --> 00:35:15.536 A:middle
to the language code, there's
also accommodation for storage

00:35:15.536 --> 00:35:20.186 A:middle
of a BCP 47 language tag.

00:35:20.186 --> 00:35:23.556 A:middle
Every track in these file
formats has an alternate track

00:35:23.556 --> 00:35:25.906 A:middle
group setting right there
in the track header atom.

00:35:26.106 --> 00:35:29.326 A:middle
I stole these graphics, by the
way, from the online version

00:35:29.536 --> 00:35:31.596 A:middle
of the QuickTime File
Format documentation.

00:35:32.076 --> 00:35:34.036 A:middle
It was easy to make these
slides, in other words.

00:35:34.036 --> 00:35:35.296 A:middle
All this stuff is
already out there.

00:35:35.706 --> 00:35:37.466 A:middle
But let's talk about what
the alternate track group

00:35:37.466 --> 00:35:38.206 A:middle
setting means.

00:35:38.586 --> 00:35:41.156 A:middle
By default for a
track its value is 0,

00:35:41.476 --> 00:35:43.646 A:middle
meaning that the track is
not a member of a group;

00:35:44.046 --> 00:35:45.796 A:middle
it will be enabled and disabled

00:35:45.796 --> 00:35:48.996 A:middle
by a well-behaved
implementation independently

00:35:48.996 --> 00:35:49.836 A:middle
of all of the tracks.

00:35:50.516 --> 00:35:53.146 A:middle
But, if the alternate track
group setting is something other

00:35:53.146 --> 00:35:57.056 A:middle
than 0, that means it's a
member of a group with all

00:35:57.056 --> 00:35:59.816 A:middle
of the other tracks
that have the same value

00:35:59.816 --> 00:36:01.306 A:middle
for their alternate
track group setting.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:01.576 --> 00:36:05.286 A:middle
So for example I can have
multiple audio tracks all

00:36:05.286 --> 00:36:07.916 A:middle
of which have an alternate
track group setting of 1,

00:36:08.346 --> 00:36:11.086 A:middle
which indicates in a
well-behaved implementation,

00:36:11.316 --> 00:36:15.206 A:middle
those audio tracks will be
selectable mutually exclusively.

00:36:15.206 --> 00:36:18.126 A:middle
When one is selected, the others
will automatically be disabled.

00:36:20.536 --> 00:36:23.196 A:middle
There's also an accommodation
for track references,

00:36:23.466 --> 00:36:25.276 A:middle
if different tracks
have to be associated

00:36:25.276 --> 00:36:26.446 A:middle
with each other in some way.

00:36:26.786 --> 00:36:29.166 A:middle
This is particularly
useful, for example,

00:36:29.166 --> 00:36:32.676 A:middle
if you are carrying forced
subtitles in your movie file

00:36:32.676 --> 00:36:34.286 A:middle
and you want them
to be associated

00:36:34.286 --> 00:36:35.506 A:middle
with a particular audio track.

00:36:35.506 --> 00:36:38.416 A:middle
I'm not going to define what I
mean by "forced subtitles" here

00:36:38.676 --> 00:36:40.616 A:middle
but I'm aware that some
of you may be interested.

00:36:40.866 --> 00:36:43.766 A:middle
If you need more details
about that or other cases

00:36:43.766 --> 00:36:45.346 A:middle
in which track references
are handy,

00:36:45.726 --> 00:36:47.936 A:middle
come to the AV Foundation
lab tomorrow and we'll go

00:36:47.936 --> 00:36:49.226 A:middle
through that with you.

00:36:49.936 --> 00:36:53.276 A:middle
Finally, in order to
describe the specific features

00:36:53.616 --> 00:36:57.146 A:middle
of a track - are these
subtitles for accessibility

00:36:57.146 --> 00:36:59.646 A:middle
or just subtitles for
translation, for example.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.226 --> 00:37:03.986 A:middle
It's possible to attach
to a track the information

00:37:04.076 --> 00:37:05.276 A:middle
that makes that distinction.

00:37:05.686 --> 00:37:08.596 A:middle
Every track has what's known
as a user data container,

00:37:08.866 --> 00:37:11.926 A:middle
a place to store additional
descriptive information

00:37:11.926 --> 00:37:15.296 A:middle
about the track, and we've
defined a new user data type

00:37:15.826 --> 00:37:18.056 A:middle
called the "tagged
media characteristic"

00:37:18.436 --> 00:37:20.926 A:middle
that carries exactly the
information that we need

00:37:21.236 --> 00:37:23.696 A:middle
in order to identify
accessibility features

00:37:23.696 --> 00:37:24.286 A:middle
when present.

00:37:24.746 --> 00:37:28.196 A:middle
And the value of these tagged
media characteristics is exactly

00:37:28.196 --> 00:37:31.006 A:middle
the same as the media
characteristics that we declare

00:37:31.006 --> 00:37:33.786 A:middle
in our HTTP Live
Streaming master playlist

00:37:34.036 --> 00:37:36.946 A:middle
when the features are
present, "public.accessibility.

00:37:37.136 --> 00:37:40.866 A:middle
transcribes-spoken-dialog",
"public.accessibility.

00:37:40.866 --> 00:37:42.236 A:middle
describes-music-and-sound".

00:37:42.856 --> 00:37:44.296 A:middle
Adam has more details
in a moment

00:37:44.296 --> 00:37:46.026 A:middle
of how you would
attach those to a track,

00:37:46.306 --> 00:37:49.536 A:middle
but just note it's possible
for you to tag a track

00:37:49.766 --> 00:37:51.786 A:middle
with the features that
the user may be interested

00:37:51.786 --> 00:37:55.456 A:middle
in so the user can recognize the
value of that particular choice.

00:37:55.996 --> 00:37:59.376 A:middle
So in summary, there's
nothing new here at all.

00:37:59.926 --> 00:38:01.416 A:middle
The QuickTime Movie file format

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:01.416 --> 00:38:05.056 A:middle
and the MPEG-4 file format
accommodate multiple options

00:38:05.146 --> 00:38:07.806 A:middle
and accommodate accessibility
options natively,

00:38:07.976 --> 00:38:09.106 A:middle
built into the file format.

00:38:09.846 --> 00:38:12.866 A:middle
That's a very convenient way to
package accessibility options

00:38:13.086 --> 00:38:15.366 A:middle
if you want to be
able to transmit a lot

00:38:15.366 --> 00:38:17.236 A:middle
of options together
in a single file.

00:38:18.216 --> 00:38:21.536 A:middle
However, you should be aware
that the implementations

00:38:21.606 --> 00:38:26.086 A:middle
of support for [QuickTime] Movie
files and MPEG-4 files on iOS 7

00:38:26.086 --> 00:38:29.196 A:middle
and OS X Mavericks
support only those files

00:38:29.246 --> 00:38:30.526 A:middle
that are self-contained.

00:38:30.896 --> 00:38:34.226 A:middle
In other words, they include
all of the media they require;

00:38:34.396 --> 00:38:36.436 A:middle
even if there are
multiple options available,

00:38:36.606 --> 00:38:38.956 A:middle
the media for each will be
stored in the same file.

00:38:39.386 --> 00:38:42.646 A:middle
So, you have additional work
that you need to do if you want

00:38:42.646 --> 00:38:45.966 A:middle
to add for example an
accessibility option

00:38:45.966 --> 00:38:46.506 A:middle
with timed text

00:38:46.506 --> 00:38:49.006 A:middle
for accessibility
to an existing file.

00:38:49.256 --> 00:38:52.526 A:middle
The good news is that we have
API in AV Foundation available

00:38:52.716 --> 00:38:54.446 A:middle
that makes that possible,
and we're going

00:38:54.446 --> 00:38:56.646 A:middle
to describe exactly what
it is in just a moment.

00:38:57.736 --> 00:39:03.226 A:middle
One last note about subtitles
in QuickTime Movie files

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:03.356 --> 00:39:07.486 A:middle
and in ISO files such as
MPEG-4 files - we're aware of,

00:39:07.486 --> 00:39:09.446 A:middle
in fact we're actively
participating in,

00:39:09.826 --> 00:39:12.706 A:middle
work within MPEG, the Motion
Picture Experts Group,

00:39:13.116 --> 00:39:17.596 A:middle
to define the standard carriage
of WebVTT for timed text

00:39:17.996 --> 00:39:20.556 A:middle
in ISO files such as MPEG-4.

00:39:21.376 --> 00:39:23.676 A:middle
And when that specification
is final

00:39:24.046 --> 00:39:27.156 A:middle
and our implementation is ready,
we expect to announce to you

00:39:27.156 --> 00:39:31.186 A:middle
that we recommend the use
of WebVTT for subtitles

00:39:31.496 --> 00:39:36.256 A:middle
for translation and subtitles
for accessibility in MPEG-4

00:39:36.306 --> 00:39:37.496 A:middle
and QuickTime Movie files.

00:39:37.496 --> 00:39:39.726 A:middle
That's a, we'll have a really
great story when we get there

00:39:40.026 --> 00:39:42.956 A:middle
because the same format will
be supported by all three

00:39:42.956 --> 00:39:45.836 A:middle
of the packaging options that
we've talked about today, HTML5,

00:39:45.836 --> 00:39:49.666 A:middle
HTTP Live Streaming and then
when we get there MPEG-4

00:39:49.666 --> 00:39:50.766 A:middle
and [QuickTime] Movie
files as well.

00:39:51.296 --> 00:39:54.436 A:middle
However in the interim, until
that specification is final,

00:39:54.476 --> 00:39:56.766 A:middle
if you want to add subtitles
to [QuickTime] Movie files

00:39:56.766 --> 00:40:01.016 A:middle
or M4V files, we continue
to recommend the media type,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:01.326 --> 00:40:04.556 A:middle
AVMediaTypeSubtitle, - the
four character code is 'sbtl' -

00:40:04.556 --> 00:40:07.536 A:middle
and the particular
format represented

00:40:07.566 --> 00:40:10.266 A:middle
by the media subtype 'tx3g'.

00:40:13.016 --> 00:40:14.896 A:middle
OK, one last note.

00:40:15.366 --> 00:40:18.736 A:middle
Supposing you really liked
the features of HTML5

00:40:18.736 --> 00:40:23.396 A:middle
for controlling timed text in
JavaScript and applying CSS,

00:40:24.246 --> 00:40:26.636 A:middle
but you also really like
the ability of, say,

00:40:26.636 --> 00:40:30.576 A:middle
HTTP Live Streaming to be able
to conduct those subtitles

00:40:30.876 --> 00:40:33.856 A:middle
to the Apple TV when
played by AirPlay video.

00:40:34.226 --> 00:40:37.326 A:middle
And you're asking, Can I
have the best of both worlds?

00:40:37.466 --> 00:40:39.646 A:middle
When my content is
played in the web browser,

00:40:39.876 --> 00:40:42.326 A:middle
I want to apply the features
of the web browser to it

00:40:42.566 --> 00:40:45.566 A:middle
but when it's played in
another environment I want it

00:40:45.566 --> 00:40:46.586 A:middle
to be just as rich.

00:40:47.326 --> 00:40:50.006 A:middle
And the answer is: yes, you can
have the best of both worlds.

00:40:50.466 --> 00:40:54.906 A:middle
HTML5 defines not only what it
calls "out of band" text tracks,

00:40:55.376 --> 00:40:58.806 A:middle
for which you declare
tracks in your HTML markup,

00:40:59.056 --> 00:41:02.226 A:middle
it also supports what are
known as "in band" text tracks

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:02.976 --> 00:41:04.876 A:middle
for cases in which
text is carried

00:41:05.006 --> 00:41:08.496 A:middle
within the main resource
itself, for example,

00:41:08.496 --> 00:41:11.606 A:middle
in an HTTP Live Stream that
has a subtitle rendition

00:41:11.606 --> 00:41:14.006 A:middle
for accessibility or in
a QuickTime Movie file

00:41:14.206 --> 00:41:16.166 A:middle
that has a subtitle
track for accessibility.

00:41:16.776 --> 00:41:20.146 A:middle
We've worked with the WebKit
team to ensure that the versions

00:41:20.146 --> 00:41:23.076 A:middle
of WebKit that will be
made available with iOS 7

00:41:23.376 --> 00:41:26.876 A:middle
and OS X Mavericks support
"in band" text tracks

00:41:27.086 --> 00:41:30.656 A:middle
when these media types are
played via a video element.

00:41:31.196 --> 00:41:33.836 A:middle
Therefore when you play a
movie file with subtitles

00:41:33.886 --> 00:41:36.066 A:middle
or a HTTP Live Stream
with closed-captions,

00:41:36.386 --> 00:41:39.356 A:middle
in those versions of WebKit
you have the full ability

00:41:39.356 --> 00:41:43.116 A:middle
to use JavaScript and CSS
to apply to that text just

00:41:43.116 --> 00:41:46.136 A:middle
as you would if the text tracks
were declared as "out of band".

00:41:46.666 --> 00:41:49.266 A:middle
So that's a good
story for integration.

00:41:50.346 --> 00:41:54.386 A:middle
Finally to review the
choices that we have talked

00:41:54.386 --> 00:41:57.416 A:middle
about here regarding
packaging of media

00:41:57.416 --> 00:41:59.666 A:middle
with accessibility
options, here are some

00:41:59.666 --> 00:42:02.386 A:middle
of the highlight decision
points, not all of them

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:02.386 --> 00:42:03.446 A:middle
that may pertain to you.

00:42:03.946 --> 00:42:06.016 A:middle
All three of the things that
I mentioned today, HTML5,

00:42:06.016 --> 00:42:08.956 A:middle
HTTP Live Streaming
and Movie and MPEG-4,

00:42:09.196 --> 00:42:11.896 A:middle
support selectable
captions and subtitles.

00:42:13.356 --> 00:42:15.666 A:middle
HTTP Live Streaming
and QuickTime Movie

00:42:15.666 --> 00:42:19.376 A:middle
and MPEG-4 support
selectable audio options,

00:42:19.776 --> 00:42:21.946 A:middle
not currently possible
in the current version

00:42:22.016 --> 00:42:26.206 A:middle
of HTML5 spec. HTML5 and
HTTP Live Streaming support

00:42:26.396 --> 00:42:28.316 A:middle
references to external media

00:42:28.316 --> 00:42:30.946 A:middle
so that you can add
timed text options

00:42:31.056 --> 00:42:33.296 A:middle
without modifying your
main media resource;

00:42:34.446 --> 00:42:36.056 A:middle
can't do that with
Movie and MPEG-4.

00:42:37.676 --> 00:42:41.286 A:middle
And AirPlay video supports
the timed text options

00:42:41.286 --> 00:42:43.486 A:middle
that are carried within
HTTP Live Streaming

00:42:43.746 --> 00:42:44.936 A:middle
and Movie and MPEG-4.

00:42:45.586 --> 00:42:48.466 A:middle
So, just a summary
to give you an idea

00:42:48.536 --> 00:42:51.776 A:middle
of how you might choose
a particular format.

00:42:52.586 --> 00:42:55.786 A:middle
Well I promised there was more
information available about how

00:42:55.786 --> 00:42:58.166 A:middle
to add subtitles to
Movie and MPEG-4 files

00:42:58.646 --> 00:43:01.466 A:middle
and here comes Adam Sonnanstine
now, a colleague of mine

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:01.466 --> 00:43:03.186 A:middle
from the Media Systems Group,

00:43:03.186 --> 00:43:04.616 A:middle
in fact from the
AV Foundation team,

00:43:04.926 --> 00:43:05.966 A:middle
who's going to introduce you

00:43:05.966 --> 00:43:07.866 A:middle
to exactly the API
that you need to use.

00:43:08.276 --> 00:43:11.206 A:middle
Thanks. [Applause]

00:43:12.816 --> 00:43:14.476 A:middle
&gt;&gt; Adam Sonnanstine:
Thank you, Kevin!

00:43:15.256 --> 00:43:20.686 A:middle
So as we've seen, the QuickTime
file format can carry subtitles

00:43:20.686 --> 00:43:23.766 A:middle
as well as all of the
accessibility features

00:43:23.766 --> 00:43:24.996 A:middle
that we've been talking about.

00:43:24.996 --> 00:43:26.776 A:middle
That's the alternate
track groups,

00:43:26.776 --> 00:43:30.686 A:middle
the tagged characteristics
and the track associations.

00:43:30.686 --> 00:43:32.766 A:middle
So I'm going to spend
a few minutes talking

00:43:32.766 --> 00:43:36.086 A:middle
about the specific API's that
you can use in your applications

00:43:36.326 --> 00:43:39.126 A:middle
to create Movie files
that have these features.

00:43:39.326 --> 00:43:42.086 A:middle
So I'm going to start by talking
through some of the basics,

00:43:42.266 --> 00:43:44.646 A:middle
some of the specific
data structures

00:43:44.646 --> 00:43:48.066 A:middle
and classes you're going to
use, and then talk through all

00:43:48.066 --> 00:43:51.406 A:middle
of those specific
accessibility features

00:43:51.406 --> 00:43:53.136 A:middle
and the API's for
each one of them.

00:43:53.576 --> 00:43:56.006 A:middle
And we're going to motivate the
whole thing using a scenario

00:43:56.356 --> 00:44:00.686 A:middle
where we add a new subtitle
track to an existing Movie file.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:00.886 --> 00:44:02.656 A:middle
So to see that scenario
visually,

00:44:02.656 --> 00:44:06.566 A:middle
we start out with a movie that
has a few tracks: a video track,

00:44:06.566 --> 00:44:09.696 A:middle
an audio track, and a
single subtitle track.

00:44:09.696 --> 00:44:12.676 A:middle
In this case we're going to use
a Spanish track, and we're going

00:44:12.676 --> 00:44:15.666 A:middle
to create a new Movie and
pull all of those tracks right

00:44:15.666 --> 00:44:16.826 A:middle
over just as they were.

00:44:16.826 --> 00:44:19.316 A:middle
And then we're going to
create our own subtitles,

00:44:19.316 --> 00:44:21.116 A:middle
our own translation
into English,

00:44:21.466 --> 00:44:24.176 A:middle
and push that into an
additional subtitle track

00:44:24.176 --> 00:44:25.086 A:middle
in the output file.

00:44:25.266 --> 00:44:27.996 A:middle
So to see this in action
I'm inviting Courtney back

00:44:27.996 --> 00:44:29.416 A:middle
up stage for a demo.

00:44:34.736 --> 00:44:37.206 A:middle
Alright, so here you
see the demo app.

00:44:37.486 --> 00:44:39.006 A:middle
We have a Movie loaded up.

00:44:39.006 --> 00:44:40.276 A:middle
It's just as I described.

00:44:40.276 --> 00:44:43.766 A:middle
If we open up the Subtitle
menu here, we see that we have

00:44:43.766 --> 00:44:45.226 A:middle
that Spanish subtitle track.

00:44:45.526 --> 00:44:47.856 A:middle
So we can go ahead and
select that and start playing

00:44:47.856 --> 00:44:51.396 A:middle
until we find a subtitle
that we'd like to translate.

00:44:51.906 --> 00:44:55.396 A:middle
[Movie playing] That
one's kind of tough.

00:44:55.826 --> 00:44:56.546 A:middle
Ah, there we go.

00:44:56.776 --> 00:44:57.546 A:middle
That's an easy one.

00:44:58.136 --> 00:44:59.226 A:middle
So let's do that.

00:44:59.226 --> 00:45:01.896 A:middle
So Courtney will type in the
translation which is "Why"

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:01.896 --> 00:45:05.686 A:middle
and then what we're going to
do is hit this button over here

00:45:05.686 --> 00:45:08.086 A:middle
which is going to do this
process I just described,

00:45:08.086 --> 00:45:10.576 A:middle
where we create the new Movie
file, and it's going to open it

00:45:10.576 --> 00:45:11.946 A:middle
up in QuickTime Player.

00:45:11.946 --> 00:45:13.536 A:middle
So here's our new file.

00:45:13.906 --> 00:45:16.916 A:middle
We can examine the subtitles
by opening up that menu again

00:45:16.916 --> 00:45:17.636 A:middle
and you can see that,

00:45:17.636 --> 00:45:20.796 A:middle
in addition to the existing
Spanish subtitle track,

00:45:20.796 --> 00:45:23.116 A:middle
we also have the new
English subtitle track

00:45:23.116 --> 00:45:23.916 A:middle
that we just added.

00:45:24.416 --> 00:45:26.756 A:middle
And QuickTime Player knew
to put them in this menu

00:45:26.756 --> 00:45:30.236 A:middle
because we used an alternate
track group as Kevin described.

00:45:30.476 --> 00:45:32.536 A:middle
I'll talk more about
that in just a moment,

00:45:32.816 --> 00:45:34.176 A:middle
but let's examine our handiwork.

00:45:34.296 --> 00:45:38.386 A:middle
So let's check out the
English subtitle track

00:45:38.386 --> 00:45:40.596 A:middle
and start playing.

00:45:40.596 --> 00:45:42.696 A:middle
[Movie playing] There it is.

00:45:42.956 --> 00:45:45.936 A:middle
Alright so we just typed that
in, it's in the Movie file

00:45:45.936 --> 00:45:48.246 A:middle
and that's a great demonstration
of how easy it can be

00:45:48.246 --> 00:45:51.916 A:middle
to add subtitles to a Movie
file using AV Foundation.

00:45:52.246 --> 00:45:52.986 A:middle
Thank you, Courtney!

00:45:57.176 --> 00:46:00.556 A:middle
Alright, so let's take another
look at that diagram here.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:00.966 --> 00:46:02.426 A:middle
We're going to zoom
in just on the part

00:46:02.426 --> 00:46:05.126 A:middle
where we're adding the
subtitle into a new track,

00:46:05.546 --> 00:46:07.486 A:middle
and the first thing that
we're going to do is wrap

00:46:07.536 --> 00:46:10.676 A:middle
that in an instance
of CMSampleBuffer.

00:46:11.136 --> 00:46:12.786 A:middle
In order to get that
sample buffer

00:46:12.786 --> 00:46:15.866 A:middle
into the output file we're going
to be using a couple classes.

00:46:15.916 --> 00:46:17.636 A:middle
The first is AVAssetWriter

00:46:17.946 --> 00:46:20.226 A:middle
and the second is
AVAssetWriterInput.

00:46:20.226 --> 00:46:23.516 A:middle
They work together and you'll
get one track in the output file

00:46:23.516 --> 00:46:25.816 A:middle
for every asset writer
input that you have.

00:46:26.996 --> 00:46:29.926 A:middle
Now for more detail
on the specific format

00:46:29.926 --> 00:46:32.646 A:middle
that the data should be in when
you put it into a sample buffer,

00:46:32.946 --> 00:46:35.286 A:middle
check out the "QuickTime
File Format Specification,"

00:46:35.286 --> 00:46:36.866 A:middle
which is available at that URL.

00:46:37.626 --> 00:46:40.106 A:middle
For more detail on
CMSampleBuffer itself,

00:46:40.386 --> 00:46:41.826 A:middle
it has its own documentation.

00:46:41.826 --> 00:46:45.076 A:middle
But we also gave it a
short introduction in 2010,

00:46:45.166 --> 00:46:48.266 A:middle
in the session called "Using
the Camera with AV Foundation."

00:46:48.846 --> 00:46:51.016 A:middle
I think that happened
around the 15 minute mark

00:46:51.016 --> 00:46:52.366 A:middle
if you're pressed for time.

00:46:52.996 --> 00:46:56.366 A:middle
And lastly, for more
information about AVAssetWriter,

00:46:56.366 --> 00:46:59.146 A:middle
we gave it a very
detailed overview in 2011,

00:46:59.146 --> 00:47:02.466 A:middle
in the session called "Working
with Media in AV Foundation,"

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:02.796 --> 00:47:05.696 A:middle
and this one you can
actually watch directly

00:47:05.696 --> 00:47:08.026 A:middle
from the WWDC app
from this year.

00:47:08.026 --> 00:47:10.746 A:middle
But tying it all together
we do have sample code.

00:47:10.946 --> 00:47:13.956 A:middle
It's called "avsubtitleswriter
for OS X," so go ahead

00:47:13.956 --> 00:47:16.726 A:middle
and download that to see
all the details and all

00:47:16.726 --> 00:47:20.096 A:middle
of these concepts working
together in perfect harmony.

00:47:22.136 --> 00:47:23.736 A:middle
Alright, so now that we've
seen sort of the basics,

00:47:23.736 --> 00:47:26.086 A:middle
let's take a look at those
accessibility features,

00:47:26.206 --> 00:47:27.516 A:middle
starting with track groups.

00:47:28.066 --> 00:47:30.366 A:middle
So I mentioned in the demo
that we want a track group

00:47:30.366 --> 00:47:33.086 A:middle
in the output file so that
QuickTime Player knows how

00:47:33.086 --> 00:47:37.246 A:middle
to put it in the menu to select
between the two subtitle tracks,

00:47:37.406 --> 00:47:40.006 A:middle
and the way you do this with
AVAssetWriter is very similar.

00:47:40.006 --> 00:47:41.316 A:middle
You create an input group

00:47:41.546 --> 00:47:43.866 A:middle
that references the
two Asset Writer Inputs

00:47:43.956 --> 00:47:45.896 A:middle
that you're going to have.

00:47:46.856 --> 00:47:50.776 A:middle
To see that in code: You
start out by creating an array

00:47:50.776 --> 00:47:53.586 A:middle
that wraps the two Asset
Writer Inputs, and then you use

00:47:53.586 --> 00:47:55.326 A:middle
that array to initialize
an instance

00:47:55.466 --> 00:47:59.986 A:middle
of AVAssetWriterInputGroup,
and then you add

00:47:59.986 --> 00:48:01.116 A:middle
that into your Asset Writer.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:01.116 --> 00:48:04.106 A:middle
And you see here that we
nominated the Spanish input

00:48:04.106 --> 00:48:07.496 A:middle
to be the default,
but if you do not want

00:48:07.496 --> 00:48:10.216 A:middle
to specify a default you
can pass in nil here.

00:48:10.776 --> 00:48:12.036 A:middle
So that's track groups.

00:48:12.356 --> 00:48:16.396 A:middle
The next is track associations.

00:48:16.486 --> 00:48:20.066 A:middle
We mentioned that you might
want to use a track association

00:48:20.066 --> 00:48:23.116 A:middle
if you want your subtitle track
to get selected automatically

00:48:23.316 --> 00:48:25.806 A:middle
when the audio track of the
same language is selected

00:48:25.806 --> 00:48:28.956 A:middle
by the user, and in the output
file that looks like this.

00:48:28.996 --> 00:48:31.146 A:middle
You have this association
between the two tracks.

00:48:31.576 --> 00:48:34.686 A:middle
In this case it's a "selection
follower" association,

00:48:35.506 --> 00:48:37.046 A:middle
and you might not be surprised

00:48:37.106 --> 00:48:39.836 A:middle
that with the Asset
Writer we just create

00:48:39.836 --> 00:48:42.586 A:middle
that same association between
the Asset Writer Inputs.

00:48:43.276 --> 00:48:45.496 A:middle
In code this is very
simple: It's just one method,

00:48:45.896 --> 00:48:48.306 A:middle
-addTrackAssociation
WithTrackOfInput:,

00:48:48.566 --> 00:48:51.566 A:middle
and you're going to use this
to associate the subtitle input

00:48:51.776 --> 00:48:55.886 A:middle
with the audio input using
the type "selection follower."

00:48:56.696 --> 00:48:58.026 A:middle
Alright, that's track
associations.

00:48:58.066 --> 00:49:00.796 A:middle
The last one I want to talk
about is tagged characteristics.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:01.156 --> 00:49:03.576 A:middle
We've talked in some
length about SDH subtitles.

00:49:03.886 --> 00:49:06.966 A:middle
If you're going to be
authoring a subtitle track

00:49:06.966 --> 00:49:09.876 A:middle
that contains all that extra
information, the way you get it

00:49:09.876 --> 00:49:12.956 A:middle
to be labeled as SDH is to use
a couple tagged characteristics,

00:49:13.326 --> 00:49:15.406 A:middle
one of them being
"transcribes spoken dialog

00:49:15.406 --> 00:49:16.466 A:middle
for accessibility."

00:49:17.426 --> 00:49:19.026 A:middle
And, as you might have guessed,

00:49:19.466 --> 00:49:22.066 A:middle
to do that with Asset Writer
Input you just tag your

00:49:22.066 --> 00:49:25.586 A:middle
corresponding Asset Writer Input
with that same characteristic.

00:49:25.586 --> 00:49:27.836 A:middle
In code, it's a little
bit more involved.

00:49:27.836 --> 00:49:29.876 A:middle
We're using the general
purpose metadata API,

00:49:30.686 --> 00:49:33.106 A:middle
but here you just
create a metadata item,

00:49:33.376 --> 00:49:35.736 A:middle
you set its key space
to "QuickTime user data"

00:49:36.046 --> 00:49:38.456 A:middle
and it's key to "tagged
characteristic,"

00:49:38.856 --> 00:49:40.816 A:middle
and then you set the value

00:49:40.816 --> 00:49:42.766 A:middle
to be the actual
characteristic we want to use.

00:49:42.766 --> 00:49:44.956 A:middle
In this case it's
"transcribes spoken dialog

00:49:45.016 --> 00:49:45.956 A:middle
for accessibility."

00:49:46.616 --> 00:49:49.086 A:middle
And then you just set that on
the Asset Writer Input using the

00:49:49.086 --> 00:49:50.136 A:middle
-setMetadata: method.

00:49:50.716 --> 00:49:53.136 A:middle
Now, we've mentioned that there
are two characteristics for SDH.

00:49:53.186 --> 00:49:57.056 A:middle
To review, the second
one is "describes music

00:49:57.056 --> 00:49:58.516 A:middle
and sound for accessibility."

00:49:59.156 --> 00:50:01.626 A:middle
Alright, so that is all of
our accessibility features

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:01.626 --> 00:50:02.706 A:middle
and how to author them.

00:50:02.946 --> 00:50:04.016 A:middle
The last thing I want to mention

00:50:04.016 --> 00:50:05.556 A:middle
in this section is
closed captions.

00:50:06.586 --> 00:50:09.306 A:middle
QuickTime Movie files can
carry closed captions just

00:50:09.306 --> 00:50:10.326 A:middle
as well as subtitles.

00:50:10.676 --> 00:50:13.916 A:middle
Most of the concepts and
the API's you're going

00:50:13.916 --> 00:50:15.716 A:middle
to use are exactly the same.

00:50:15.916 --> 00:50:17.606 A:middle
The main difference is how
you're going to format the data.

00:50:17.766 --> 00:50:19.496 A:middle
So for more details
on that, once again,

00:50:19.586 --> 00:50:22.076 A:middle
see the "QuickTime File
Format Specification."

00:50:23.136 --> 00:50:24.986 A:middle
Alright so that's how
you can author subtitles

00:50:24.986 --> 00:50:27.256 A:middle
and closed captions into
QuickTime movie files.

00:50:27.656 --> 00:50:28.966 A:middle
Let's move on to our last topic,

00:50:28.966 --> 00:50:31.816 A:middle
which is "accessing the
subtitle text during playback."

00:50:32.176 --> 00:50:33.266 A:middle
Now why might you
want to do this?

00:50:33.396 --> 00:50:36.386 A:middle
Well, we'll take a quick look at
the default experience you get

00:50:36.616 --> 00:50:39.106 A:middle
if you adopt AVPlayerLayer
or AVPlayerView.

00:50:39.676 --> 00:50:41.236 A:middle
It's a great experience
for most apps:

00:50:41.366 --> 00:50:44.486 A:middle
You get the subtitles
drawn on top of the video,

00:50:44.766 --> 00:50:47.496 A:middle
they're styled appropriately
according to the content

00:50:47.496 --> 00:50:49.866 A:middle
and the user preferences that
we've been talking about,

00:50:50.956 --> 00:50:53.116 A:middle
but the one thing you
don't have control over is

00:50:53.116 --> 00:50:54.906 A:middle
where the subtitles are placed.

00:50:55.146 --> 00:50:58.906 A:middle
After all if your video isn't
taking up the whole screen,

00:50:58.906 --> 00:51:00.856 A:middle
you might want to put the
subtitles somewhere else.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:01.666 --> 00:51:04.766 A:middle
So, if you had access
to the actual text

00:51:04.766 --> 00:51:06.666 A:middle
of the subtitles while
the movie is playing,

00:51:06.906 --> 00:51:09.146 A:middle
you could do the drawing
wherever you like, yourself.

00:51:10.156 --> 00:51:12.236 A:middle
Another thing you might want
to do is to allow your users

00:51:12.236 --> 00:51:13.546 A:middle
to interact with the text.

00:51:13.996 --> 00:51:15.236 A:middle
Maybe get a dictionary
definition

00:51:15.236 --> 00:51:18.846 A:middle
for a really difficult word like
this one, and if you had access

00:51:18.846 --> 00:51:20.376 A:middle
to the text then of
course you'd be able

00:51:20.376 --> 00:51:22.106 A:middle
to implement this quite
easily: Just slap it

00:51:22.106 --> 00:51:23.826 A:middle
into a text view of some sort.

00:51:23.866 --> 00:51:25.816 A:middle
So the way you're
going to do this is

00:51:25.816 --> 00:51:28.686 A:middle
with a new class called
AVPlayerItemLegibleOutput.

00:51:29.016 --> 00:51:33.566 A:middle
This is new in iOS 7 and OS X
Mavericks, and it's a companion

00:51:33.566 --> 00:51:36.386 A:middle
to the Video Output class
that we introduced last year.

00:51:36.386 --> 00:51:39.066 A:middle
And just like the Video
Output, it allows you to access

00:51:39.126 --> 00:51:42.816 A:middle
that media data while the
movie is playing, in real time.

00:51:44.226 --> 00:51:46.156 A:middle
In this case, instead
of video frames,

00:51:46.156 --> 00:51:49.216 A:middle
we are getting the
text of each subtitle.

00:51:49.606 --> 00:51:52.286 A:middle
And this is actually the
technology that WebKit is using

00:51:52.486 --> 00:51:54.486 A:middle
to do the integration
that Kevin described,

00:51:54.776 --> 00:51:58.866 A:middle
where the out-of-band
subtitles in HTML5 text tracks

00:51:59.076 --> 00:52:01.956 A:middle
and the in-band subtitles
carried in HLS Streams

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:01.956 --> 00:52:04.946 A:middle
and QuickTime Movie files
can be integrated together.

00:52:04.946 --> 00:52:07.716 A:middle
So I'm just going to spend a few
minutes introducing this class

00:52:07.776 --> 00:52:08.036 A:middle
to you.

00:52:08.536 --> 00:52:10.886 A:middle
We're going to start with the
basics of how you'd use it,

00:52:10.886 --> 00:52:13.716 A:middle
and then I'm going to talk in
some depth about some things

00:52:13.716 --> 00:52:15.106 A:middle
to keep in mind if
you're going to try

00:52:15.106 --> 00:52:16.746 A:middle
to draw the subtitles yourself,

00:52:17.256 --> 00:52:19.596 A:middle
and finally a few scenarios
we're going to highlight

00:52:20.056 --> 00:52:22.236 A:middle
where you might want to
use a different solution

00:52:22.236 --> 00:52:23.416 A:middle
than Legible Output.

00:52:23.416 --> 00:52:26.036 A:middle
It's not a "one size
fits all" kind of tool.

00:52:27.356 --> 00:52:31.266 A:middle
Alright, to see this
as a diagram:

00:52:31.856 --> 00:52:33.426 A:middle
Just like the Video
Output, you're going

00:52:33.426 --> 00:52:35.676 A:middle
to attach your Legible Output
right onto your player item

00:52:35.676 --> 00:52:38.006 A:middle
that you're already using
to play back your content,

00:52:38.146 --> 00:52:40.706 A:middle
and the Legible Output is going
to interact with a delegate

00:52:40.706 --> 00:52:42.686 A:middle
that you provide,
sending it the string

00:52:42.686 --> 00:52:44.356 A:middle
for each subtitle as it goes by.

00:52:44.966 --> 00:52:46.546 A:middle
The string is going
to be in the form

00:52:46.546 --> 00:52:48.456 A:middle
of an NSAttributedString object.

00:52:48.836 --> 00:52:50.566 A:middle
It's going to have
styling information

00:52:50.596 --> 00:52:53.036 A:middle
and positioning information
attached to it.

00:52:53.426 --> 00:52:55.266 A:middle
And you might be
wondering: If you have more

00:52:55.266 --> 00:52:59.276 A:middle
than one subtitle track in your
Movie file, which one is going

00:52:59.276 --> 00:53:00.486 A:middle
to be delivered to the delegate?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:00.486 --> 00:53:03.276 A:middle
Well, it's the same story as if
we were drawing it ourselves.

00:53:03.276 --> 00:53:04.616 A:middle
It's the one that corresponds

00:53:04.616 --> 00:53:07.506 A:middle
to the currently-selected
media selection option.

00:53:08.436 --> 00:53:09.916 A:middle
To see a little bit of code:

00:53:10.326 --> 00:53:11.926 A:middle
You create one using
+alloc and -init.

00:53:12.576 --> 00:53:13.586 A:middle
Nothing fancy here.

00:53:13.636 --> 00:53:15.776 A:middle
You're going to attach it

00:53:15.836 --> 00:53:17.776 A:middle
to your player item
using the -addOutput:

00:53:17.776 --> 00:53:21.456 A:middle
method and then you're going to
create a delegate that conforms

00:53:21.456 --> 00:53:24.956 A:middle
to the AVPlayerItemLegible
OutputPushDelegate protocol

00:53:25.496 --> 00:53:27.326 A:middle
and set that onto
the Legible Output.

00:53:27.666 --> 00:53:29.266 A:middle
Now you notice that
the -setDelegate:

00:53:29.266 --> 00:53:30.606 A:middle
call takes a dispatch queue.

00:53:30.956 --> 00:53:32.706 A:middle
You can specify any
queue you want

00:53:32.706 --> 00:53:35.776 A:middle
and the Legible Output
will invoke all

00:53:35.776 --> 00:53:37.386 A:middle
of your delegate
methods on that queue.

00:53:37.706 --> 00:53:40.306 A:middle
If you're going to be
interacting with AppKit or UIKit

00:53:40.306 --> 00:53:42.736 A:middle
in response to these delegate
callbacks, you're going to want

00:53:42.736 --> 00:53:45.536 A:middle
to use the main queue, as I
do on this slide, to make sure

00:53:45.536 --> 00:53:46.956 A:middle
that that is a safe interaction.

00:53:47.026 --> 00:53:50.146 A:middle
A little bit more detail on
the delegate protocol itself:

00:53:50.686 --> 00:53:52.586 A:middle
This is the main method
that you'll be using.

00:53:52.966 --> 00:53:55.926 A:middle
The second parameter is the one

00:53:55.926 --> 00:53:59.066 A:middle
that you'll be getting the text
from, those attributed strings.

00:53:59.606 --> 00:54:01.486 A:middle
The third parameter, the
Native Sample Buffers,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:01.486 --> 00:54:04.536 A:middle
is a more advanced use; most
people won't need to use it.

00:54:04.536 --> 00:54:07.066 A:middle
Just know that by default
you'll always get an empty array

00:54:07.066 --> 00:54:07.916 A:middle
for this parameter.

00:54:09.056 --> 00:54:11.356 A:middle
And of course tying it all
together we have sample code

00:54:11.356 --> 00:54:12.546 A:middle
for Legible Output as well.

00:54:12.786 --> 00:54:14.376 A:middle
It's called "AVLegibleMeanings."

00:54:14.376 --> 00:54:17.046 A:middle
So go ahead and download this
sample to see Legible Output

00:54:17.336 --> 00:54:19.166 A:middle
in context and in full detail.

00:54:19.166 --> 00:54:22.776 A:middle
So that's sort of the basics
of using Legible Output.

00:54:23.206 --> 00:54:25.946 A:middle
Let's move on now to "things
to think about if you're going

00:54:25.946 --> 00:54:27.656 A:middle
to be drawing the
subtitles yourself."

00:54:27.706 --> 00:54:29.656 A:middle
We don't expect that everyone
is going to want to do that,

00:54:29.656 --> 00:54:32.146 A:middle
in fact probably very
few, but if you do,

00:54:32.466 --> 00:54:34.156 A:middle
remember that you
have the styling

00:54:34.156 --> 00:54:35.696 A:middle
and positioning attributes
attached

00:54:35.696 --> 00:54:37.116 A:middle
to each attributed string.

00:54:37.906 --> 00:54:38.926 A:middle
They look something like this.

00:54:40.006 --> 00:54:43.816 A:middle
They're all declared and
defined in CMTextMarkup.h,

00:54:43.816 --> 00:54:46.926 A:middle
but I'm just going to highlight
a few things: The first is

00:54:46.926 --> 00:54:50.716 A:middle
that it the attributes
are loosely based

00:54:50.716 --> 00:54:54.076 A:middle
on the WebVTT model for
styling and positioning,

00:54:54.076 --> 00:54:56.836 A:middle
so if you're used to that model
already then this should be

00:54:56.836 --> 00:54:57.576 A:middle
pretty familiar.

00:54:58.026 --> 00:55:01.536 A:middle
The second thing is that
this is a common format.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:55:01.536 --> 00:55:03.896 A:middle
We're going to give you the
same set of attributes no matter

00:55:03.896 --> 00:55:08.896 A:middle
where the subtitles came from,
whether it was TX3G or WebVTT

00:55:09.036 --> 00:55:11.606 A:middle
or CEA-608 or any of
those other acronyms.

00:55:12.266 --> 00:55:15.976 A:middle
So you only have to understand
these attributes and not all

00:55:15.976 --> 00:55:17.186 A:middle
of those individual formats.

00:55:17.236 --> 00:55:20.666 A:middle
And the last thing I want to
mention is this whole topic

00:55:20.666 --> 00:55:23.236 A:middle
of the user preferences
for subtitle styling.

00:55:23.636 --> 00:55:25.016 A:middle
We've talked about
how important it is

00:55:25.016 --> 00:55:27.056 A:middle
that these are the
most important sets

00:55:27.056 --> 00:55:28.276 A:middle
of styling information.

00:55:28.836 --> 00:55:30.816 A:middle
The great news is that
when we're populating these

00:55:30.816 --> 00:55:32.676 A:middle
attributes, the Legible
Output takes

00:55:32.676 --> 00:55:34.826 A:middle
into account those
user preferences.

00:55:34.866 --> 00:55:37.346 A:middle
So just by following these
values you don't have

00:55:37.346 --> 00:55:39.136 A:middle
to do any extra work
to make sure

00:55:39.136 --> 00:55:40.726 A:middle
that you're respecting
the user's preferences.

00:55:41.246 --> 00:55:44.076 A:middle
Of course we do expect
that some people will want

00:55:44.076 --> 00:55:46.286 A:middle
to modify the styling a little
bit to suit their needs.

00:55:46.896 --> 00:55:48.376 A:middle
If you are going to do
that you're going to want

00:55:48.376 --> 00:55:50.586 A:middle
to make sure that you're not
accidentally overriding the

00:55:50.586 --> 00:55:53.346 A:middle
user's preferences, and the
way you can do that is to look

00:55:53.346 --> 00:55:55.676 A:middle
at the MediaAccessibility
framework.

00:55:55.676 --> 00:55:57.266 A:middle
This is going to
provide two services.

00:55:57.826 --> 00:56:02.316 A:middle
You can both access the
current set of user preferences

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:56:02.316 --> 00:56:04.596 A:middle
and it will also give
you a notification

00:56:04.596 --> 00:56:07.176 A:middle
if the user changes those
preferences while your

00:56:07.176 --> 00:56:08.176 A:middle
application is running.

00:56:08.336 --> 00:56:11.156 A:middle
So that's the story on
drawing subtitles yourself.

00:56:11.636 --> 00:56:14.536 A:middle
The last thing I want to mention
is when you might not want

00:56:14.536 --> 00:56:15.566 A:middle
to use Legible Output.

00:56:16.346 --> 00:56:18.836 A:middle
Well, if you're going to do
any sort of indexing operation

00:56:19.066 --> 00:56:22.996 A:middle
over all the subtitle
text in a Movie file,

00:56:23.286 --> 00:56:25.496 A:middle
you should take a look
at AVAssetReader instead.

00:56:25.496 --> 00:56:28.456 A:middle
It's going to be
a better way to do

00:56:28.456 --> 00:56:30.916 A:middle
that for pretty much any case.

00:56:30.916 --> 00:56:33.676 A:middle
If you're just going to be
doing some custom styling

00:56:33.676 --> 00:56:37.236 A:middle
of WebVTT content at a basic
level, maybe to match the look

00:56:37.236 --> 00:56:39.246 A:middle
and feel of your application,
you're going to want

00:56:39.246 --> 00:56:41.116 A:middle
to take a look at the
textStyleRules property

00:56:41.116 --> 00:56:43.106 A:middle
on AVPlayerItem that
we've mentioned before.

00:56:43.106 --> 00:56:45.016 A:middle
That's going to be
much easier to use.

00:56:45.016 --> 00:56:47.366 A:middle
You won't have to do
the drawing yourself.

00:56:47.366 --> 00:56:50.066 A:middle
And finally, if you think
that the Legible Output sounds

00:56:50.066 --> 00:56:52.826 A:middle
like a great way to get
the subtitles and draw them

00:56:53.006 --> 00:56:55.026 A:middle
with whatever styling
you want without regard

00:56:55.026 --> 00:56:57.926 A:middle
to the user preferences: By
now you can probably guess

00:56:57.956 --> 00:56:59.106 A:middle
that we don't want
you to do that,

00:56:59.166 --> 00:57:01.666 A:middle
but more importantly your
users don't want you do

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:57:01.666 --> 00:57:02.426 A:middle
to that either.

00:57:02.786 --> 00:57:06.686 A:middle
Some of your users might
have very specific needs

00:57:06.746 --> 00:57:09.616 A:middle
for how the subtitles
should look, so for the sake

00:57:09.616 --> 00:57:12.296 A:middle
of your users, make sure
that their needs are taken

00:57:12.296 --> 00:57:14.616 A:middle
into account as the
most important thing.

00:57:15.296 --> 00:57:16.976 A:middle
Alright, that's Legible Output.

00:57:16.976 --> 00:57:18.436 A:middle
That was our last topic.

00:57:18.436 --> 00:57:20.356 A:middle
Let's see what we learned today.

00:57:20.686 --> 00:57:24.576 A:middle
So, we started out by learning
how we can support accessibility

00:57:24.576 --> 00:57:27.506 A:middle
during playback either by
doing very little work,

00:57:27.506 --> 00:57:30.316 A:middle
maybe by adopting AVKit and
letting it handle the details,

00:57:30.626 --> 00:57:34.686 A:middle
or, in a more advanced case,
using the Media Selection API's

00:57:34.686 --> 00:57:36.186 A:middle
to manage all the
details yourself.

00:57:36.846 --> 00:57:39.166 A:middle
We talked about some of your
choices for content delivery

00:57:39.166 --> 00:57:40.316 A:middle
and their pros and cons.

00:57:40.316 --> 00:57:46.056 A:middle
That was the HTML5 text
tracks, HTTP Live Streaming

00:57:46.056 --> 00:57:47.496 A:middle
and QuickTime Movie files.

00:57:47.876 --> 00:57:50.476 A:middle
And we talked about
how to add subtitles

00:57:50.476 --> 00:57:53.396 A:middle
to those Movie files
using AVAssetWriter,

00:57:53.966 --> 00:57:55.076 A:middle
and finally we talked about how

00:57:55.076 --> 00:57:58.116 A:middle
to access the subtitle
text during playback using

00:57:58.116 --> 00:57:59.656 A:middle
AVPlayerItemLegibleOutput.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:58:00.046 --> 00:58:03.606 A:middle
For more information we have our
documentation, and you can check

00:58:03.606 --> 00:58:06.136 A:middle
out the Apple Development forums
to get your questions answered.

00:58:06.776 --> 00:58:08.086 A:middle
There are some related sessions.

00:58:08.376 --> 00:58:11.896 A:middle
If you stick around in this
room, coming up right up next,

00:58:11.896 --> 00:58:14.436 A:middle
if they don't kick you out
first, is the "What's New

00:58:14.436 --> 00:58:15.866 A:middle
in Camera Capture" session.

00:58:16.076 --> 00:58:16.966 A:middle
It's always a fun one.

00:58:17.266 --> 00:58:18.716 A:middle
And tomorrow morning
we have a session

00:58:18.716 --> 00:58:20.736 A:middle
on "Advanced Editing
in AV Foundation."

00:58:22.246 --> 00:58:23.696 A:middle
Alright, so that's all.

00:58:23.986 --> 00:58:26.546 A:middle
Thank you very much for coming,
have a great rest of your week,

00:58:26.546 --> 00:58:28.606 A:middle
and if you do one thing on
the way out of this session:

00:58:28.986 --> 00:58:31.206 A:middle
Download our sample code and
see how you can make your

00:58:31.206 --> 00:58:33.816 A:middle
applications and your
content accessible

00:58:33.816 --> 00:58:35.926 A:middle
to the broadest range of people.

00:58:36.216 --> 00:58:36.566 A:middle
Thank you!

00:58:37.066 --> 00:58:46.710 A:middle
[ Silence ]

