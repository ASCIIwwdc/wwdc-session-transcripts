WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:09.516 A:middle
[ Silence ]

00:00:10.016 --> 00:00:10.083 A:middle
[Applause]

00:00:11.016 --> 00:00:13.316 A:middle
&gt;&gt; Thank you.

00:00:15.046 --> 00:00:15.886 A:middle
[applause] Good afternoon!

00:00:16.776 --> 00:00:19.796 A:middle
Welcome to "What's New
in the LLVM Compiler?"

00:00:20.506 --> 00:00:21.806 A:middle
My name is Evan.

00:00:22.036 --> 00:00:23.146 A:middle
Let's-- shall we start?

00:00:24.436 --> 00:00:25.656 A:middle
What's our mission?

00:00:26.726 --> 00:00:29.906 A:middle
We want to provide the
Best-in-Class tools for you,

00:00:29.906 --> 00:00:33.176 A:middle
for the developers, the
lifelines of our platforms.

00:00:33.666 --> 00:00:36.046 A:middle
We want to make sure
you have the best tools

00:00:36.206 --> 00:00:37.446 A:middle
to build your awesome apps.

00:00:38.846 --> 00:00:40.736 A:middle
We want to support the best--

00:00:40.836 --> 00:00:44.276 A:middle
the latest hardware,
be Macs, iOS devices.

00:00:44.276 --> 00:00:47.736 A:middle
We want to make sure we can
build your codes so they run

00:00:47.816 --> 00:00:50.206 A:middle
as fast as they can
on the unit--

00:00:50.486 --> 00:00:53.816 A:middle
latest iPhone, the
iPads and the Macs.

00:00:54.076 --> 00:00:56.686 A:middle
I want to make sure the
performance is great.

00:00:57.296 --> 00:01:00.756 A:middle
We're not satisfied if we
cannot squeeze every ounce

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:00.756 --> 00:01:02.966 A:middle
of performance in
audio applications.

00:01:03.516 --> 00:01:06.306 A:middle
And we want to make sure you
have the great productivity.

00:01:06.886 --> 00:01:10.546 A:middle
We want our tools to run fast
and we want to provide you

00:01:10.546 --> 00:01:12.096 A:middle
with the best diagnoses.

00:01:12.266 --> 00:01:14.316 A:middle
We want to give you as
much information we can

00:01:14.576 --> 00:01:15.796 A:middle
to make your job easy.

00:01:16.976 --> 00:01:21.386 A:middle
So let's take a look at what
have we done in different areas.

00:01:21.896 --> 00:01:24.166 A:middle
First, let's talk
about the support

00:01:24.166 --> 00:01:29.086 A:middle
for the latest hardware,
armv7s architecture.

00:01:29.356 --> 00:01:31.176 A:middle
This is something
you may have seen.

00:01:31.636 --> 00:01:33.846 A:middle
This is not new in Xcode 5

00:01:33.846 --> 00:01:35.846 A:middle
but there's something new
happened during the last year.

00:01:35.846 --> 00:01:41.386 A:middle
The iPhone 5-- for the iPhone
5, we have the Apple A6 chip,

00:01:41.866 --> 00:01:44.166 A:middle
that's something Apple
built and very proud of it.

00:01:44.406 --> 00:01:46.646 A:middle
We worked very closely
with our team

00:01:46.886 --> 00:01:49.256 A:middle
to make sure the compiler
generate the best code words.

00:01:49.416 --> 00:01:52.916 A:middle
If you care about performance
on your app on the latest iPhone

00:01:53.806 --> 00:01:58.186 A:middle
and the latest iPads, you
want to build your application

00:01:58.186 --> 00:01:59.206 A:middle
for this architecture.

00:01:59.766 --> 00:02:04.396 A:middle
This is simple because
this is already a part

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:04.396 --> 00:02:08.205 A:middle
of the standard architecture for
iOS apps so we encourage you,

00:02:08.446 --> 00:02:10.936 A:middle
just go with it,
don't pick and choose,

00:02:11.116 --> 00:02:12.846 A:middle
just use the standard
architecture

00:02:13.096 --> 00:02:16.896 A:middle
and you'd get the best
performance for your apps.

00:02:17.126 --> 00:02:20.046 A:middle
Next, let's talk
about Intel AVX.

00:02:20.556 --> 00:02:23.346 A:middle
AVX stands for Advanced
Vector Extension.

00:02:23.786 --> 00:02:26.356 A:middle
Anything with the word
"Advanced" sounds great there.

00:02:26.956 --> 00:02:28.776 A:middle
It must be good,
you should use it.

00:02:29.376 --> 00:02:31.366 A:middle
So Intel AVX is not new.

00:02:31.366 --> 00:02:34.416 A:middle
It's been around for a couple of
years, but this year you have--

00:02:34.416 --> 00:02:38.586 A:middle
you have heard, we have just
announced Haswell-Based Macs,

00:02:38.766 --> 00:02:41.886 A:middle
they have Intel AVX2,
so AVX was all

00:02:41.886 --> 00:02:45.486 A:middle
about getting the best
performance with your loop

00:02:45.486 --> 00:02:46.826 A:middle
with a lot of parallels in,

00:02:46.826 --> 00:02:48.726 A:middle
a lot of floating
point computation code.

00:02:49.216 --> 00:02:52.966 A:middle
AVX2 takes a little step further
and bring the same kind of power

00:02:53.176 --> 00:02:54.416 A:middle
to the-- your integer code.

00:02:55.066 --> 00:02:58.726 A:middle
It had a few more other kind
of instructions to make it easy

00:02:58.726 --> 00:03:01.736 A:middle
to vectorize your code
so you definitely want

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:01.736 --> 00:03:06.136 A:middle
to take advantage of AVX2.

00:03:06.286 --> 00:03:13.276 A:middle
So using AVX2 is easy but it's
not quite, kind of, work-free.

00:03:13.736 --> 00:03:17.216 A:middle
You do want to make sure
your app does runtime checks

00:03:17.216 --> 00:03:20.726 A:middle
to make the hardware you're
running the code support AVX2.

00:03:21.406 --> 00:03:23.276 A:middle
So you may want to
partition your code

00:03:23.276 --> 00:03:27.466 A:middle
to have a special version that
only run on AVX2 and compile

00:03:27.466 --> 00:03:33.676 A:middle
with the -mavx2 instruction,
I mean, -2avx2, -mavx2 option.

00:03:34.716 --> 00:03:36.946 A:middle
If you have any questions
about this,

00:03:37.096 --> 00:03:38.986 A:middle
feel free to come
by to our labs.

00:03:39.546 --> 00:03:41.246 A:middle
We'll be happy to
talk to you about it

00:03:42.006 --> 00:03:45.096 A:middle
and also we'll be talking
a lot more about AVX2

00:03:45.096 --> 00:03:47.846 A:middle
and many other things
we talked about today

00:03:48.366 --> 00:03:50.216 A:middle
in tomorrow's session, that's--

00:03:51.186 --> 00:03:52.466 A:middle
we're we going to focus

00:03:52.466 --> 00:03:54.896 A:middle
on how you can using
the LLVM technology

00:03:54.896 --> 00:03:56.456 A:middle
to fully optimize your code.

00:03:57.396 --> 00:04:01.396 A:middle
So if you use AVX2 in Xcode
5, it's pretty simple,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:01.586 --> 00:04:03.116 A:middle
go to the Build Configuration

00:04:03.356 --> 00:04:06.706 A:middle
and just enable Additional
Vector Extension, choose AVX2.

00:04:07.576 --> 00:04:10.906 A:middle
This is going to be important to
get your code to performance--

00:04:10.906 --> 00:04:16.755 A:middle
to the best you can on
the Haswell-Based Macs.

00:04:16.926 --> 00:04:19.336 A:middle
Next, let's focus
on performance.

00:04:19.676 --> 00:04:21.546 A:middle
We've done a lot of
work in this area.

00:04:21.786 --> 00:04:23.336 A:middle
We have many new features,

00:04:23.616 --> 00:04:25.476 A:middle
a lot of work we're
very, very proud of.

00:04:26.146 --> 00:04:28.566 A:middle
We're so proud of, in
fact, we've made a video,

00:04:28.776 --> 00:04:30.396 A:middle
I'd like to show you today.

00:04:31.306 --> 00:04:32.346 A:middle
I'm just kidding.

00:04:32.346 --> 00:04:34.016 A:middle
[Laughter]

00:04:34.016 --> 00:04:38.000 A:middle
[ Laughter &amp; Applause ]

00:04:38.796 --> 00:04:40.226 A:middle
They will be editing the video

00:04:40.226 --> 00:04:43.126 A:middle
for a long time before
I can show you anything.

00:04:43.496 --> 00:04:45.776 A:middle
But let's take a quick look
what we have done for you.

00:04:46.906 --> 00:04:48.866 A:middle
So the compiler has
definitely improved a lot.

00:04:49.336 --> 00:04:51.186 A:middle
The performance has
gotten better every year.

00:04:51.586 --> 00:04:54.246 A:middle
This past year as you've
seen, just a quick chart--

00:04:54.246 --> 00:04:56.596 A:middle
a few examples, we're
getting quite a bit

00:04:56.596 --> 00:04:58.156 A:middle
of performance of your code.

00:04:58.806 --> 00:05:01.596 A:middle
So if you're just
building your application

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:01.596 --> 00:05:05.716 A:middle
with the new LLVM compiler
in Xcode 5, you're going

00:05:05.716 --> 00:05:07.826 A:middle
to get some significant
improvement for your code.

00:05:08.366 --> 00:05:11.046 A:middle
So it ranges differently
depends on what kind

00:05:11.046 --> 00:05:11.726 A:middle
of code you're writing.

00:05:13.296 --> 00:05:16.796 A:middle
If your iOS app, you're
going to see the same kind

00:05:16.796 --> 00:05:18.826 A:middle
of performance but a bit more.

00:05:19.056 --> 00:05:21.576 A:middle
We've been really,
really focused on this

00:05:21.866 --> 00:05:24.476 A:middle
and we're working really
closely with our team

00:05:24.716 --> 00:05:28.446 A:middle
to bring you the best compiler
technology in this area.

00:05:29.456 --> 00:05:33.426 A:middle
So here you can see across
the board teams of 20,

00:05:33.516 --> 00:05:36.336 A:middle
30 percent performance
gains just by switching

00:05:36.336 --> 00:05:38.616 A:middle
to the latest Xcode
5 and using--

00:05:38.616 --> 00:05:41.136 A:middle
latest Apple LLVM compiler.

00:05:41.136 --> 00:05:47.246 A:middle
One other thing I want to talk
to you very briefly about,

00:05:47.736 --> 00:05:50.946 A:middle
Strict Aliasing, this is
technology we introduced

00:05:50.946 --> 00:05:55.146 A:middle
in Xcode and Apple LLVM
compiler about a year or so ago.

00:05:55.876 --> 00:05:58.796 A:middle
The only difference here is,
you know, during the past year,

00:05:58.796 --> 00:06:02.486 A:middle
we have enabled by
default in 4.-- Xcode 4.6.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:03.026 --> 00:06:06.066 A:middle
I just want to bring
this to your attention,

00:06:06.286 --> 00:06:07.516 A:middle
in case you have some any kind

00:06:07.516 --> 00:06:10.706 A:middle
of legacy code that's
still building and shipping

00:06:10.706 --> 00:06:13.516 A:middle
with the older Xcode,
you might be--

00:06:13.516 --> 00:06:15.056 A:middle
want to be aware of this change.

00:06:15.496 --> 00:06:17.376 A:middle
So I'm not going to go
into a lot of details

00:06:17.776 --> 00:06:21.756 A:middle
but strict aliasing is basically
using the type of informations

00:06:21.756 --> 00:06:23.926 A:middle
to do more advanced
than pointer analysis.

00:06:24.666 --> 00:06:26.946 A:middle
The reason we turn on
strict aliasing is simple,

00:06:27.206 --> 00:06:28.216 A:middle
its performance.

00:06:28.906 --> 00:06:32.246 A:middle
It's a-- few percentage is here
and there, but in some cases,

00:06:32.246 --> 00:06:36.136 A:middle
we see significant wins such
as 20 percent improvement

00:06:36.136 --> 00:06:37.836 A:middle
for some simulation benchmarks.

00:06:40.256 --> 00:06:43.606 A:middle
So again, just want to remind
you, if you are legacy code,

00:06:43.866 --> 00:06:48.056 A:middle
they might be using some illegal
scenes such as typecasting

00:06:48.286 --> 00:06:50.866 A:middle
from one type to another
that's not compatible

00:06:51.126 --> 00:06:53.646 A:middle
from floating point to
integer or vice-versa.

00:06:54.676 --> 00:06:57.356 A:middle
If you want it, you have code
that does this, please switch

00:06:57.356 --> 00:07:02.266 A:middle
to a well understood [inaudible]
such as-- unions to do the cut--

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:02.266 --> 00:07:04.076 A:middle
type conversion and
you'd be home free.

00:07:04.396 --> 00:07:05.946 A:middle
Chances are, since we've been--

00:07:05.946 --> 00:07:09.186 A:middle
you've been shipping your
application with Xcode 4.6,

00:07:09.386 --> 00:07:12.126 A:middle
this is working perfectly for
you, there's absolutely nothing

00:07:12.126 --> 00:07:12.876 A:middle
for you to worry about.

00:07:12.876 --> 00:07:16.476 A:middle
One other thing I
wanted to bring

00:07:16.476 --> 00:07:18.686 A:middle
to your attention is
Link-time Optimization.

00:07:19.036 --> 00:07:20.746 A:middle
Again, this is not
a new feature.

00:07:21.686 --> 00:07:24.286 A:middle
What's new is we've
put so much effort

00:07:24.286 --> 00:07:26.486 A:middle
into Link-time Optimization
during last year

00:07:26.896 --> 00:07:28.586 A:middle
and we feel so great about it.

00:07:28.786 --> 00:07:30.616 A:middle
We have enabled it using it

00:07:30.616 --> 00:07:32.806 A:middle
to build some key
Apple technologies

00:07:33.286 --> 00:07:35.176 A:middle
in the Mac and iOS release.

00:07:37.456 --> 00:07:41.746 A:middle
So some examples such as Apple
LLVM compiler itself is built

00:07:41.746 --> 00:07:42.426 A:middle
with LTO.

00:07:43.116 --> 00:07:46.396 A:middle
This can have the benefit
of compiling your code

00:07:46.396 --> 00:07:48.376 A:middle
up to 6-- 6 percent faster.

00:07:49.666 --> 00:07:52.516 A:middle
The iOS Kernel, that's
important application,

00:07:52.996 --> 00:07:57.206 A:middle
can do some of the-- IO--
performance can be up to 20--

00:07:57.486 --> 00:08:01.176 A:middle
20 percent faster and in
addition to performance,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:01.356 --> 00:08:05.946 A:middle
sometimes you have [inaudible]
benefit such as iOS iMovie app

00:08:06.296 --> 00:08:09.846 A:middle
that got 25 percent smaller
just by building with LTO.

00:08:10.986 --> 00:08:12.726 A:middle
So we think LTO is great.

00:08:12.956 --> 00:08:15.786 A:middle
You definitely want
to try it out.

00:08:16.046 --> 00:08:18.926 A:middle
But in case you have a
really massive application,

00:08:19.526 --> 00:08:23.586 A:middle
this could have impact on
the build time because LTO is

00:08:23.586 --> 00:08:27.906 A:middle
about bringing everything about
your application into last stage

00:08:27.906 --> 00:08:30.806 A:middle
and do the all the optimization,
compilation at that time.

00:08:31.316 --> 00:08:33.976 A:middle
So if you find you
were building with LTO

00:08:33.976 --> 00:08:37.946 A:middle
and that's taking too much time
and maybe and you're running

00:08:37.946 --> 00:08:41.046 A:middle
out of memory, you consider
dropping the debugging full

00:08:41.046 --> 00:08:42.816 A:middle
level to a Line table only,

00:08:42.816 --> 00:08:50.166 A:middle
that can have a significant
improvement to the real time.

00:08:50.366 --> 00:08:54.286 A:middle
Something new in Xcode 5,
here's the Auto Vectorizer.

00:08:54.386 --> 00:08:57.786 A:middle
We talked about this in
"What's New in Xcode?"

00:08:57.786 --> 00:08:58.336 A:middle
this morning.

00:08:59.116 --> 00:09:01.296 A:middle
This is something that
we built from the grown

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:01.296 --> 00:09:02.546 A:middle
up during the past year.

00:09:03.436 --> 00:09:05.496 A:middle
This is already showing
amazing results.

00:09:05.846 --> 00:09:08.486 A:middle
This is certainly some really
computation intensive code

00:09:09.336 --> 00:09:14.876 A:middle
and can have 2 to 5 to 8
times the benefit for you--

00:09:14.986 --> 00:09:18.086 A:middle
for your computation
intensive loop.

00:09:18.206 --> 00:09:22.796 A:middle
And this works great for both
iOS and OS X applications

00:09:23.066 --> 00:09:25.966 A:middle
so you can have portable code
that you write simple code

00:09:25.966 --> 00:09:30.556 A:middle
that works perfectly for all
the-- for both platforms.

00:09:31.106 --> 00:09:32.766 A:middle
So previously, if
you are familiar

00:09:32.766 --> 00:09:35.406 A:middle
with ARM NEON intrinsics,
you may be using--

00:09:35.406 --> 00:09:39.086 A:middle
intrinsics to kind of get the
best performance on your loop.

00:09:39.656 --> 00:09:41.656 A:middle
And now we're saying,
all you have

00:09:41.656 --> 00:09:43.796 A:middle
to do is you just write
simple scalar code

00:09:44.316 --> 00:09:46.006 A:middle
and let the compiler
do the rest for you.

00:09:46.666 --> 00:09:48.816 A:middle
It's that simple,
it's that powerful,

00:09:49.136 --> 00:09:51.036 A:middle
you definitely want to try it.

00:09:52.216 --> 00:09:52.536 A:middle
[applause] Thank you.

00:09:53.036 --> 00:09:55.556 A:middle
[Applause]

00:09:56.056 --> 00:09:59.106 A:middle
So the auto-vectorizer,
again, is new in Xcode 5,

00:09:59.376 --> 00:10:02.296 A:middle
go to the Build Setting
and choose vectorize loops,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:02.726 --> 00:10:05.826 A:middle
and let us know, we're really
proud of this technology

00:10:06.196 --> 00:10:09.466 A:middle
and we think we-- you'll get
a lot of benefit from it.

00:10:11.596 --> 00:10:13.506 A:middle
Again, this is something
we're going to go

00:10:13.506 --> 00:10:15.736 A:middle
into a lot more details
in tomorrow's session.

00:10:16.306 --> 00:10:17.396 A:middle
What we're going to talk about,

00:10:17.396 --> 00:10:20.006 A:middle
how to optimize your
code using the LLVM.

00:10:23.716 --> 00:10:26.566 A:middle
The last thing, if you've been
playing with the new Xcode 5,

00:10:26.566 --> 00:10:30.316 A:middle
you may-- may have noticed a
new optimization level, -Ofast.

00:10:30.416 --> 00:10:33.196 A:middle
What is this?

00:10:34.016 --> 00:10:37.246 A:middle
Well, think about it as
if it's a turbo button

00:10:37.246 --> 00:10:38.096 A:middle
for your application.

00:10:38.676 --> 00:10:42.606 A:middle
You press it and you
go-- your code goes fast.

00:10:43.796 --> 00:10:47.756 A:middle
So through -Ofast, it turn
out all the -03 optimizations,

00:10:47.986 --> 00:10:50.836 A:middle
squeezing as much performance
out of your code as possible.

00:10:51.316 --> 00:10:53.226 A:middle
It turn on the vectorization,

00:10:53.436 --> 00:10:56.026 A:middle
it turn on the -ffast-math
optimization.

00:10:56.396 --> 00:10:57.956 A:middle
For floating point code,

00:10:57.956 --> 00:11:00.876 A:middle
that can have a significant
performance benefits.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:03.206 --> 00:11:06.386 A:middle
So what do you want to do
is for your release build,

00:11:06.476 --> 00:11:10.696 A:middle
choose -Ofast, not with Debug
Build, only the Release Build.

00:11:11.226 --> 00:11:15.076 A:middle
So a quick disclaimer, there's
a few things you should be aware

00:11:15.076 --> 00:11:19.226 A:middle
about -Ofast, particularly,
because you used -ffast-math.

00:11:20.206 --> 00:11:22.626 A:middle
You can do aggressive
optimization

00:11:22.626 --> 00:11:25.996 A:middle
such as re-association of your
floating-point expressions

00:11:26.166 --> 00:11:30.456 A:middle
and many other things can
have subtle impact precisions

00:11:30.456 --> 00:11:30.986 A:middle
of your code.

00:11:31.236 --> 00:11:35.356 A:middle
So if your application has to be
incongruous precise as using--

00:11:35.356 --> 00:11:38.156 A:middle
floating point, test carefully.

00:11:38.566 --> 00:11:40.186 A:middle
We believe for the
majority of the code,

00:11:40.186 --> 00:11:43.616 A:middle
this will just work
fine but please test

00:11:44.166 --> 00:11:45.516 A:middle
and let us know how it works.

00:11:46.256 --> 00:11:49.526 A:middle
And one other thing is,
this doesn't turn on LTO

00:11:49.526 --> 00:11:50.916 A:middle
for you automatically.

00:11:51.346 --> 00:11:52.296 A:middle
We want to control

00:11:52.296 --> 00:11:56.256 A:middle
that separately becomes
the compile to impact.

00:11:56.356 --> 00:11:59.086 A:middle
So that's all I want to talk
about-- about performance.

00:11:59.596 --> 00:12:02.316 A:middle
Next up, I would like to
ask, Bob Wilson to come up,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:02.676 --> 00:12:05.706 A:middle
about all the work we have done
to improve your productivities.

00:12:05.706 --> 00:12:05.886 A:middle
Thank you.

00:12:06.516 --> 00:12:13.336 A:middle
[ Applause ]

00:12:13.836 --> 00:12:14.636 A:middle
&gt;&gt; Thanks Evan.

00:12:15.396 --> 00:12:18.906 A:middle
So the Apple LLVM Compiler can
help your apps to run faster.

00:12:19.476 --> 00:12:21.486 A:middle
It can also improve
your productivity

00:12:21.866 --> 00:12:24.916 A:middle
and help you develop higher
quality apps with fewer bugs.

00:12:25.636 --> 00:12:28.776 A:middle
So in the rest of the
session, we're going to go

00:12:28.776 --> 00:12:29.926 A:middle
through a number
of different ways

00:12:29.926 --> 00:12:32.446 A:middle
that the compiler
can help with that.

00:12:32.776 --> 00:12:35.366 A:middle
By updating the compiler
and some of the other tools,

00:12:35.836 --> 00:12:37.886 A:middle
we give you a more
consistent experience

00:12:38.456 --> 00:12:41.056 A:middle
with an easier installation
and update process.

00:12:41.666 --> 00:12:44.676 A:middle
We've got some new C++
features that make it easier

00:12:44.676 --> 00:12:46.626 A:middle
to express the code
that you want

00:12:47.716 --> 00:12:50.836 A:middle
and we've improved the compiler
warnings and the static analyzer

00:12:50.836 --> 00:12:54.176 A:middle
to help you catch bugs before
you have to go and spend a lot

00:12:54.176 --> 00:12:55.796 A:middle
of time debugging your app.

00:12:55.796 --> 00:12:59.476 A:middle
And finally, we've got a great
new feature that makes it easier

00:12:59.476 --> 00:13:02.396 A:middle
to document your code
right in the comments.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:03.396 --> 00:13:05.486 A:middle
So let's dive into
these starting

00:13:05.486 --> 00:13:10.686 A:middle
with the compiler
and tool updates.

00:13:10.876 --> 00:13:13.956 A:middle
So Apple has been using
the gnu gcc compiler

00:13:13.956 --> 00:13:17.306 A:middle
for quite a few years
but a few years back,

00:13:17.306 --> 00:13:20.256 A:middle
we decided we really
wanted a better compiler.

00:13:20.456 --> 00:13:23.806 A:middle
We wanted better performance,
we wanted tighter integration

00:13:23.806 --> 00:13:27.516 A:middle
in the Xcode, we wanted more
helpful diagnostic messages

00:13:27.586 --> 00:13:30.396 A:middle
that really explain to you when
there's a problem in your code

00:13:30.396 --> 00:13:31.716 A:middle
in a way that makes sense

00:13:31.716 --> 00:13:34.006 A:middle
and you could easily
see how to fix it.

00:13:34.556 --> 00:13:40.786 A:middle
So we began to invest in the
llvm compiler and for a number

00:13:40.786 --> 00:13:45.096 A:middle
of years now, we've shipped both
gcc and the llvm compiler side

00:13:45.096 --> 00:13:49.606 A:middle
by side, as well as the
hybrid llvm-gcc to ease

00:13:49.606 --> 00:13:53.556 A:middle
that transition away from
gcc to the llvm compiler.

00:13:54.786 --> 00:13:57.106 A:middle
And I'm really pleased
to say that this year,

00:13:57.106 --> 00:13:59.966 A:middle
in Xcode 5, the gnu is gone.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:00.786 --> 00:14:02.696 A:middle
We only have the llvm compiler.

00:14:03.516 --> 00:14:07.876 A:middle
[ Applause ]

00:14:08.376 --> 00:14:10.066 A:middle
Yeah, as I said, that
makes me happy too.

00:14:10.476 --> 00:14:12.666 A:middle
The good news for you
is this gives you a

00:14:12.666 --> 00:14:14.046 A:middle
consistent experience.

00:14:14.596 --> 00:14:18.026 A:middle
And in the past, if you've
been building with gcc,

00:14:18.066 --> 00:14:22.906 A:middle
you'd see inconsistencies
between the diagnostics reported

00:14:22.906 --> 00:14:25.606 A:middle
to you in Xcode while you're
editing, which are coming

00:14:25.606 --> 00:14:29.366 A:middle
from LLVM and the messages,
the problems you'd see

00:14:29.576 --> 00:14:30.966 A:middle
at build time using gcc.

00:14:31.056 --> 00:14:33.366 A:middle
And all of that mess
has gone now.

00:14:33.426 --> 00:14:35.866 A:middle
There's just one compiler
and everything is consistent.

00:14:37.126 --> 00:14:38.316 A:middle
It's also really good news

00:14:38.346 --> 00:14:40.386 A:middle
because it means we
can focus our efforts

00:14:40.736 --> 00:14:44.476 A:middle
on adding new features in just
one compiler and move forward

00:14:44.476 --> 00:14:45.696 A:middle
at an even faster rate.

00:14:47.006 --> 00:14:48.966 A:middle
So I'm going to come
back and talk about some

00:14:48.966 --> 00:14:51.126 A:middle
of those advances in
LLVM in just a minute

00:14:51.186 --> 00:14:54.486 A:middle
but before I do that, I want
to go over a related topic

00:14:54.816 --> 00:14:56.216 A:middle
which is the command line tools.

00:14:57.436 --> 00:15:00.006 A:middle
If you're not already familiar
with the command line tools,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.526 --> 00:15:03.596 A:middle
this is a package that we
provide separately from Xcode

00:15:04.156 --> 00:15:06.776 A:middle
that is useful for
building open source

00:15:06.776 --> 00:15:09.246 A:middle
and other common Unix
software on the Mac.

00:15:09.916 --> 00:15:14.016 A:middle
And it consists of two basic
components, there's a set

00:15:14.016 --> 00:15:17.276 A:middle
of tools such as the
compiler that install

00:15:17.276 --> 00:15:20.826 A:middle
in the /usr/bin directory and
then there's the Mac OS X SDK,

00:15:20.976 --> 00:15:25.496 A:middle
with headers and /usr/include,
libraries and user lib,

00:15:25.496 --> 00:15:27.596 A:middle
and also in System
Library/Frameworks.

00:15:28.666 --> 00:15:31.136 A:middle
This is what the
command line tools look

00:15:31.136 --> 00:15:32.946 A:middle
like on Mountain Lion.

00:15:33.306 --> 00:15:36.176 A:middle
Now if you're an Xcode
developer, you've got Xcode

00:15:36.176 --> 00:15:39.486 A:middle
but you just want to go and
build some open source code,

00:15:40.116 --> 00:15:41.696 A:middle
you may find yourself
still needing

00:15:41.696 --> 00:15:44.546 A:middle
to install the command line
tools even though you already

00:15:44.546 --> 00:15:45.216 A:middle
got Xcode.

00:15:45.216 --> 00:15:48.776 A:middle
And the reason for that is that
the standard Unix convention is

00:15:48.776 --> 00:15:52.616 A:middle
that the compiler and the
other tools live in /usr/bin

00:15:52.786 --> 00:15:56.076 A:middle
and that's not where
Xcode puts them.

00:15:56.286 --> 00:16:00.196 A:middle
So new in Mavericks,
we have the inspiration

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.196 --> 00:16:03.126 A:middle
that Xcode already has
all of those same tools,

00:16:03.436 --> 00:16:07.776 A:middle
it already has the OS X SDK so
there's no reason to make you go

00:16:07.776 --> 00:16:10.136 A:middle
and download this
separate package just

00:16:10.136 --> 00:16:10.956 A:middle
to get those same things.

00:16:10.956 --> 00:16:15.686 A:middle
And the way this works is
that the Mavericks OS comes

00:16:16.146 --> 00:16:19.616 A:middle
with a set of shims
installed in /usr/bin.

00:16:19.776 --> 00:16:21.846 A:middle
These shims are just
really small,

00:16:21.926 --> 00:16:25.806 A:middle
simple wrapper executables
that know where to find Xcode

00:16:25.806 --> 00:16:28.606 A:middle
and where to find the
corresponding tools inside

00:16:28.606 --> 00:16:29.166 A:middle
of Xcode.

00:16:29.166 --> 00:16:33.346 A:middle
So if you run the compiler from
/usr/bin via one of these shims,

00:16:34.006 --> 00:16:36.446 A:middle
it just reinvokes the
compiler from Xcode

00:16:36.446 --> 00:16:37.756 A:middle
for you automatically.

00:16:40.016 --> 00:16:44.396 A:middle
So the summary of this is
if you have Xcode and you're

00:16:44.396 --> 00:16:46.746 A:middle
on Mavericks, there's
no longer any need

00:16:46.746 --> 00:16:48.936 A:middle
to ever download the
command line tools.

00:16:49.476 --> 00:16:57.066 A:middle
[applause] So what if
you don't have Xcode?

00:16:57.106 --> 00:16:57.846 A:middle
What then?

00:16:58.256 --> 00:17:01.036 A:middle
Well, if you-- say you've got
a brand new Mac and you try

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:01.036 --> 00:17:02.736 A:middle
to run the compiler
from /usr/bin,

00:17:02.736 --> 00:17:05.715 A:middle
you'll get this message telling
you, "Hey, you need some tools,"

00:17:06.415 --> 00:17:07.435 A:middle
and it's giving you choice.

00:17:08.046 --> 00:17:11.165 A:middle
You can click on that Get
Xcode button, it'll bring you

00:17:11.165 --> 00:17:13.296 A:middle
to the apps store and you
can install Xcode just

00:17:13.296 --> 00:17:14.286 A:middle
as in the normal way.

00:17:15.296 --> 00:17:17.506 A:middle
You can also choose Install

00:17:17.546 --> 00:17:21.016 A:middle
which will install a standalone
set of command line tools.

00:17:21.806 --> 00:17:23.846 A:middle
Let's take a closer look
at what that looks like.

00:17:25.205 --> 00:17:28.526 A:middle
This is about the Mavericks
version of command line tools.

00:17:28.636 --> 00:17:31.616 A:middle
We have the same
shims in /usr/bin

00:17:32.166 --> 00:17:33.736 A:middle
and the tools now install

00:17:33.736 --> 00:17:37.876 A:middle
into library developer command
line tools and the shims forward

00:17:37.876 --> 00:17:40.126 A:middle
to that location
automatically in the same way

00:17:40.126 --> 00:17:42.966 A:middle
that they would forward
to Xcode.

00:17:43.106 --> 00:17:45.386 A:middle
My favorite feature
about this is it's hooked

00:17:45.386 --> 00:17:46.736 A:middle
up to software update.

00:17:47.176 --> 00:17:49.946 A:middle
On Mountain Lion,
if you've got--

00:17:49.946 --> 00:17:52.056 A:middle
if a new version of command
line tools was released,

00:17:52.056 --> 00:17:56.086 A:middle
it's up to you to remember that
you need to go and install it.

00:17:56.526 --> 00:17:58.976 A:middle
With Mavericks, you'll get a
notification in the apps store

00:17:58.976 --> 00:18:01.556 A:middle
to tell you that an update is
available and you just go in it

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:01.556 --> 00:18:02.756 A:middle
and install it in the same way.

00:18:03.326 --> 00:18:07.306 A:middle
So that update process
is so much smoother now.

00:18:09.466 --> 00:18:11.696 A:middle
It's also easier to
remove the tools.

00:18:12.466 --> 00:18:15.516 A:middle
Say that you had installed the
command line tools separately.

00:18:16.036 --> 00:18:18.166 A:middle
Maybe, you were in a coffee
shop or something and you--

00:18:18.166 --> 00:18:20.076 A:middle
you needed to download
a compiler quickly,

00:18:20.076 --> 00:18:21.846 A:middle
with a low bandwidth connection,

00:18:22.266 --> 00:18:24.006 A:middle
the command line tools
are much smaller,

00:18:24.006 --> 00:18:26.796 A:middle
but then when you get home,
you got more bandwidth,

00:18:26.796 --> 00:18:29.406 A:middle
you probably want to install
Xcode, now you're left

00:18:29.406 --> 00:18:32.476 A:middle
with these tools, you
don't need them anymore.

00:18:32.996 --> 00:18:34.746 A:middle
On Mountain Lion,
it was really hard

00:18:34.746 --> 00:18:36.386 A:middle
to ever remove the
command line tools

00:18:36.386 --> 00:18:38.036 A:middle
because they were scattered
throughout your root

00:18:38.036 --> 00:18:38.716 A:middle
file system.

00:18:39.206 --> 00:18:40.396 A:middle
Now, they're all in one place,

00:18:40.766 --> 00:18:42.486 A:middle
Library/Developer/
CommandLineTools.

00:18:42.986 --> 00:18:45.706 A:middle
And if you've got Xcode, you
can just blow that folder away

00:18:45.706 --> 00:18:46.996 A:middle
and everything will
continue working.

00:18:46.996 --> 00:18:50.186 A:middle
So again, just to summarize,

00:18:50.286 --> 00:18:54.306 A:middle
the command line tools make
it really easy to install

00:18:54.306 --> 00:18:56.786 A:middle
and update and even
remove in a way

00:18:56.786 --> 00:18:58.086 A:middle
that Mountain Lion
didn't provide.

00:18:58.086 --> 00:19:00.866 A:middle
But before we get back to
the compiler, there's--

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.866 --> 00:19:02.636 A:middle
there's one issue I want
to let you know about.

00:19:03.166 --> 00:19:05.336 A:middle
Notice that we've only
talked about one part

00:19:05.336 --> 00:19:06.296 A:middle
of the command line tools

00:19:06.296 --> 00:19:09.206 A:middle
which is the tools
themselves in /usr/bin.

00:19:09.526 --> 00:19:13.566 A:middle
Remember, there's
that SO 10 SDK?

00:19:13.806 --> 00:19:14.546 A:middle
And it's moved.

00:19:15.246 --> 00:19:18.136 A:middle
It's no longer installed
in the /directory.

00:19:18.606 --> 00:19:21.626 A:middle
This is the problem
for the compiler

00:19:21.626 --> 00:19:25.036 A:middle
because the compiler knows
where that SDK is installed.

00:19:25.586 --> 00:19:29.026 A:middle
But if you've got, make files
or scripts or anything else

00:19:29.026 --> 00:19:32.676 A:middle
that refers to files in
usr/include, usr/lib,

00:19:33.156 --> 00:19:34.546 A:middle
or System/Library/Frameworks

00:19:34.796 --> 00:19:37.226 A:middle
with hard coded paths
then you're going to need

00:19:37.226 --> 00:19:39.386 A:middle
to fix those things
up so that they know

00:19:39.386 --> 00:19:43.216 A:middle
where to find that Mac OS X SDK.

00:19:43.216 --> 00:19:43.716 A:middle
How do you know?

00:19:43.776 --> 00:19:44.816 A:middle
Where is it installed?

00:19:45.596 --> 00:19:47.086 A:middle
We do have something
to help with that.

00:19:48.066 --> 00:19:50.416 A:middle
xcrun is a tool you
may be familiar with.

00:19:50.416 --> 00:19:52.656 A:middle
It's been included with
Xcode for a long time.

00:19:53.456 --> 00:19:55.346 A:middle
Like those shims,
it's just a wrapper,

00:19:55.806 --> 00:19:57.746 A:middle
it knows where to
find tools in Xcode

00:19:57.746 --> 00:20:01.086 A:middle
and you can use it to run them.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:01.286 --> 00:20:03.196 A:middle
It's now included with
a command line tools

00:20:03.196 --> 00:20:04.256 A:middle
and it has a new option.

00:20:05.076 --> 00:20:09.196 A:middle
If you run xcrun
-- show-sdk-path --

00:20:09.196 --> 00:20:13.176 A:middle
sdk and a short name like
macosx, it will print

00:20:13.176 --> 00:20:15.956 A:middle
out the full path to the
SDK and you can use this

00:20:15.956 --> 00:20:18.956 A:middle
to programmatically update
make files or scripts

00:20:19.696 --> 00:20:22.126 A:middle
with the full path to the SDK.

00:20:23.436 --> 00:20:27.696 A:middle
And related feature, since
xcrun knows where the SDK is,

00:20:28.206 --> 00:20:31.436 A:middle
you can also use this to tell
the compiler where the SDK is.

00:20:31.436 --> 00:20:35.576 A:middle
In the past, you'd have to
use the -isys root option

00:20:35.576 --> 00:20:38.956 A:middle
to the compiler and give it the
full paths to the SDK you want

00:20:38.956 --> 00:20:41.956 A:middle
to use and those full
paths are often quite long.

00:20:41.956 --> 00:20:43.846 A:middle
If you're on the command
line, it's a lot to type.

00:20:44.536 --> 00:20:47.946 A:middle
Well now, you can use
xcrun, give it a short name,

00:20:47.946 --> 00:20:52.046 A:middle
like iPhone OS or Mac OS X and
it will communicate that through

00:20:52.046 --> 00:20:56.116 A:middle
to the compiler so you don't
have to type the whole path.

00:20:56.326 --> 00:20:59.046 A:middle
You can also set the
SDKROOT environment variable

00:20:59.386 --> 00:21:01.476 A:middle
and xcrun will notice
and pick that up

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:01.476 --> 00:21:05.786 A:middle
and use that to set the SDK.

00:21:05.986 --> 00:21:09.156 A:middle
So try out the new command line
tools, I hope you like them,

00:21:09.156 --> 00:21:14.066 A:middle
and now let's get back to the
compiler, starting with C++.

00:21:14.456 --> 00:21:19.896 A:middle
C++11 is a major update
to the C++ language.

00:21:20.446 --> 00:21:22.216 A:middle
This is something that we've
been working on rolling

00:21:22.216 --> 00:21:23.986 A:middle
out in Xcode for a while now.

00:21:25.426 --> 00:21:29.626 A:middle
This year, in Apple LLVM version
5.0, we have complete support

00:21:29.626 --> 00:21:33.406 A:middle
for everything in C++11
with the sole exception

00:21:33.406 --> 00:21:34.726 A:middle
of thread local storage.

00:21:37.056 --> 00:21:39.936 A:middle
Here's a list of some of the
major features we've added

00:21:39.936 --> 00:21:43.246 A:middle
in the last year and I don't
have time to go into all

00:21:43.246 --> 00:21:44.456 A:middle
of these in any detail.

00:21:45.276 --> 00:21:47.806 A:middle
So I just-- to give you a taste
if I wanted to single out one

00:21:47.806 --> 00:21:49.726 A:middle
of them to look at a
little more closely,

00:21:50.556 --> 00:21:54.376 A:middle
which is Inheriting
Constructors, and let's look

00:21:54.376 --> 00:21:55.676 A:middle
at this with an example.

00:21:56.246 --> 00:21:58.776 A:middle
I've got here a simple class.

00:21:59.036 --> 00:22:02.686 A:middle
It's got an integer A field
and a float B field and a set

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:02.686 --> 00:22:05.576 A:middle
of constructors that let you
specify the initial values

00:22:05.766 --> 00:22:07.126 A:middle
for various combinations

00:22:07.126 --> 00:22:09.176 A:middle
of those fields using
default values

00:22:09.176 --> 00:22:10.616 A:middle
for the things you
didn't specify.

00:22:10.616 --> 00:22:15.096 A:middle
Now I want to make
a derive class Y

00:22:15.536 --> 00:22:17.056 A:middle
with those same constructors.

00:22:17.266 --> 00:22:19.556 A:middle
And I just want to pass
the same values along

00:22:19.556 --> 00:22:20.976 A:middle
to the base class constructors.

00:22:21.836 --> 00:22:23.736 A:middle
There's a lot of
boiler-plate code here

00:22:24.296 --> 00:22:26.136 A:middle
and it's also error
prone to maintain.

00:22:26.136 --> 00:22:28.706 A:middle
If you make a change in the
base class, you've got to go

00:22:28.706 --> 00:22:31.816 A:middle
and update all the drive
classes in ways that match.

00:22:32.736 --> 00:22:36.846 A:middle
And C++11 inheriting
constructors let you replace all

00:22:36.846 --> 00:22:39.536 A:middle
that boiler plate
which just using X::X.

00:22:39.536 --> 00:22:43.576 A:middle
And all this does is
tell the compiler if--

00:22:43.726 --> 00:22:45.896 A:middle
if I see a use of one
of these constructors

00:22:45.896 --> 00:22:48.226 A:middle
that matches the signature
from the base class,

00:22:48.736 --> 00:22:50.296 A:middle
just implicitly declare that,

00:22:50.716 --> 00:22:53.366 A:middle
and it will invoke
the constructor

00:22:53.366 --> 00:22:54.966 A:middle
from the base class
as you'd expect.

00:22:56.286 --> 00:23:00.046 A:middle
Notice though, I've added an
int c field in the derive class.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.216 --> 00:23:01.406 A:middle
How do we initialize that?

00:23:02.456 --> 00:23:04.726 A:middle
Well, there-- there's a lot of
different ways you could do it

00:23:05.096 --> 00:23:08.476 A:middle
and C++11 has a number of
features that help with this.

00:23:09.166 --> 00:23:11.076 A:middle
I want to-- since it fits
nicely in this example,

00:23:11.076 --> 00:23:13.096 A:middle
I wanted to talk about
one way to do that.

00:23:13.096 --> 00:23:14.656 A:middle
This is not a new
feature this year

00:23:14.656 --> 00:23:17.716 A:middle
but it's something that's
been around for a while

00:23:17.716 --> 00:23:20.466 A:middle
which is non-static data
member initializers.

00:23:21.116 --> 00:23:24.156 A:middle
You can now set the initial
value right in the class

00:23:25.096 --> 00:23:29.196 A:middle
and this tells the compiler if I
don't have some other values set

00:23:29.196 --> 00:23:32.496 A:middle
in the constructor to use
that as a default value.

00:23:33.026 --> 00:23:37.526 A:middle
Notice we can use the same
thing in the base class X

00:23:38.176 --> 00:23:43.086 A:middle
to set the values of fields A
and B, and then remove a lot

00:23:43.086 --> 00:23:45.306 A:middle
of the complexity from
the constructors there.

00:23:46.396 --> 00:23:48.796 A:middle
So together, inheriting
constructors,

00:23:48.996 --> 00:23:50.986 A:middle
a non-static data
member initializers,

00:23:51.416 --> 00:23:54.056 A:middle
take the simple example and
make it a lot more clear

00:23:54.056 --> 00:23:56.006 A:middle
and concise and easy
to maintain.

00:23:56.796 --> 00:23:59.656 A:middle
While we're on the topic of C++,

00:23:59.766 --> 00:24:01.176 A:middle
there's one other
important piece

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:01.336 --> 00:24:02.716 A:middle
which is the Runtime Library.

00:24:03.896 --> 00:24:05.416 A:middle
We've been going
through a transition

00:24:05.496 --> 00:24:08.936 A:middle
from the older GNU lib
standard C++ library

00:24:09.256 --> 00:24:11.676 A:middle
to the new LLVM libc++.

00:24:11.806 --> 00:24:15.756 A:middle
And if you want to use a lot
of those features from C++11,

00:24:16.186 --> 00:24:18.726 A:middle
you really need libc++
to support them.

00:24:19.506 --> 00:24:21.406 A:middle
It supports the number
of the language features

00:24:21.406 --> 00:24:23.056 A:middle
and it also has a number

00:24:23.056 --> 00:24:28.576 A:middle
of new library components
that come with C++11.

00:24:28.706 --> 00:24:30.846 A:middle
One thing that is
new this year is

00:24:30.846 --> 00:24:32.956 A:middle
that we've made this
the compiler default

00:24:32.956 --> 00:24:36.036 A:middle
if you're deploying to
iOS 7 or OS X Mavericks.

00:24:37.426 --> 00:24:41.156 A:middle
If you want to deploy back
as far as iOS 5 or OS X Lion,

00:24:41.506 --> 00:24:43.976 A:middle
you can still choose
to use libc++ by going

00:24:43.976 --> 00:24:45.286 A:middle
to the Xcode build settings,

00:24:45.936 --> 00:24:50.276 A:middle
look for C++ standard
library and choose libc++.

00:24:51.386 --> 00:24:54.776 A:middle
So again, C++11 is a huge
change to the language.

00:24:54.776 --> 00:24:57.796 A:middle
If you're a C++ programmer,
I strongly encourage you

00:24:57.796 --> 00:25:00.886 A:middle
to check it out and there's a
lot of great new features there

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:00.886 --> 00:25:02.206 A:middle
that can make you
more productive.

00:25:02.206 --> 00:25:07.826 A:middle
Our next topic is about
Compiler Warnings.

00:25:08.626 --> 00:25:13.906 A:middle
So as you're writing your code
and building, the compiler is--

00:25:13.946 --> 00:25:17.706 A:middle
is looking closely at that
code and in the process,

00:25:18.046 --> 00:25:19.816 A:middle
we can catch errors or--

00:25:19.816 --> 00:25:23.476 A:middle
and warn you about them so
that you can fix them quickly

00:25:23.476 --> 00:25:25.846 A:middle
without having to spend
a lot of time debugging.

00:25:27.166 --> 00:25:29.746 A:middle
So there's three different
categories of changes

00:25:29.746 --> 00:25:32.256 A:middle
that I want to talk about
related to compiler warnings.

00:25:32.256 --> 00:25:34.256 A:middle
First, we have some
new compiler warnings.

00:25:35.286 --> 00:25:38.376 A:middle
We have a number of warnings
that have been around for awhile

00:25:38.456 --> 00:25:41.066 A:middle
but we've identified them
as being really important

00:25:41.206 --> 00:25:44.446 A:middle
and we're going to now enable
them by default in new projects.

00:25:45.086 --> 00:25:46.536 A:middle
And finally, there's
a few warnings

00:25:47.136 --> 00:25:49.846 A:middle
that are really serious,
it cause serious problems

00:25:49.846 --> 00:25:52.636 A:middle
and we're now going to treat
them as errors by default.

00:25:53.396 --> 00:25:56.196 A:middle
So let's-- dive into
this starting

00:25:56.196 --> 00:25:57.576 A:middle
with the new compiler warnings.

00:25:59.036 --> 00:26:01.206 A:middle
The first one is
unsequenced modification.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:01.356 --> 00:26:03.606 A:middle
This is a warning about
non-portable code.

00:26:04.526 --> 00:26:08.616 A:middle
C-based languages don't define
the order of some operations

00:26:08.616 --> 00:26:10.186 A:middle
and I'll give you an
example in just a minute,

00:26:10.846 --> 00:26:12.686 A:middle
but if you have some
code working

00:26:12.686 --> 00:26:15.696 A:middle
with a different compiler
from a different platform or--

00:26:15.696 --> 00:26:19.686 A:middle
or wherever and you move
to using the LLVM compiler,

00:26:20.036 --> 00:26:23.276 A:middle
it may behave differently
in a way that causes a bug.

00:26:23.796 --> 00:26:25.196 A:middle
Let's look at an example.

00:26:25.586 --> 00:26:29.076 A:middle
This simple function is supposed
to just increment a value

00:26:29.216 --> 00:26:31.746 A:middle
and return it but
there's a problem.

00:26:32.006 --> 00:26:34.646 A:middle
There's actually two
assignments to the value X here,

00:26:35.146 --> 00:26:38.936 A:middle
the equal operator does an
assignment, the plus, plus,

00:26:38.936 --> 00:26:41.756 A:middle
post increment operator
does a separate assignment

00:26:42.066 --> 00:26:45.466 A:middle
and the order between those two
is not defined by the language.

00:26:45.726 --> 00:26:47.436 A:middle
Some compilers may
do them in one order,

00:26:47.436 --> 00:26:48.776 A:middle
some may do it in
the other order.

00:26:49.596 --> 00:26:52.376 A:middle
So the LLVM compiler now gives
you a warning about this.

00:26:53.666 --> 00:26:55.946 A:middle
It's an indication to you,
you need to look at your code

00:26:55.946 --> 00:26:57.516 A:middle
and figure out how
to rewrite that so

00:26:57.516 --> 00:26:58.966 A:middle
that the ordering
is well-defined.

00:26:59.506 --> 00:27:03.146 A:middle
Let's go on to the next
new warning which is

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:03.146 --> 00:27:04.466 A:middle
about integer overflow.

00:27:05.146 --> 00:27:07.346 A:middle
In some cases, the
compiler can determine

00:27:07.876 --> 00:27:11.106 A:middle
that an integer operation
is going to overflow.

00:27:11.856 --> 00:27:14.646 A:middle
This is almost certain
to cause a bug at runtime

00:27:15.226 --> 00:27:16.926 A:middle
so we now warn about that.

00:27:17.706 --> 00:27:19.616 A:middle
For example, if we're
multiplying two constants,

00:27:19.646 --> 00:27:21.396 A:middle
they're big numbers,
not that big,

00:27:21.396 --> 00:27:24.136 A:middle
but when you multiply them
the product is too big

00:27:24.136 --> 00:27:25.946 A:middle
to even fit in a 32-bit integer.

00:27:26.406 --> 00:27:28.736 A:middle
So the LLVM compiler
will now warn about this

00:27:29.096 --> 00:27:30.526 A:middle
and tell you, this doesn't fit.

00:27:31.366 --> 00:27:33.386 A:middle
The obvious solution in
a case like this would be

00:27:33.386 --> 00:27:35.846 A:middle
to use a larger size
integer such as long longs.

00:27:36.686 --> 00:27:40.026 A:middle
You can use long long constants
and a long long return value

00:27:40.126 --> 00:27:41.306 A:middle
and the warning goes away.

00:27:42.646 --> 00:27:44.276 A:middle
So those are two new warnings.

00:27:44.976 --> 00:27:46.506 A:middle
Let's talk about
some of the warnings

00:27:46.506 --> 00:27:48.686 A:middle
that we're now going
to enable by default.

00:27:49.116 --> 00:27:51.886 A:middle
Unused functions,
this is an easy one.

00:27:52.426 --> 00:27:55.056 A:middle
While you're editing your
project, it's not that uncommon

00:27:55.386 --> 00:27:58.236 A:middle
to leave behind some pieces of
code that are no longer used.

00:27:58.756 --> 00:28:02.596 A:middle
And if those are in static
functions either in declarations

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:02.596 --> 00:28:04.596 A:middle
or actual definitions
with the function body

00:28:04.596 --> 00:28:07.746 A:middle
like I've shown here, the
compiler can detect this

00:28:07.826 --> 00:28:11.246 A:middle
and warn you, and this is just
an opportunity for you to clean

00:28:11.246 --> 00:28:13.956 A:middle
up your code, remove
some of that unused craft

00:28:13.956 --> 00:28:15.496 A:middle
and make it easier to maintain.

00:28:16.336 --> 00:28:18.926 A:middle
We're going to now enable this
by default in new projects.

00:28:20.556 --> 00:28:23.476 A:middle
Implicit Boolean
conversions is another warning

00:28:23.476 --> 00:28:25.346 A:middle
like that, enabled by default.

00:28:25.796 --> 00:28:29.816 A:middle
This is especially helpful in
C++, and let's see an example.

00:28:30.536 --> 00:28:33.656 A:middle
Here, I've got a helper function
that I've declared and I want

00:28:33.656 --> 00:28:35.726 A:middle
to check and see if the
helper is available,

00:28:35.726 --> 00:28:37.366 A:middle
I'm going to call it.

00:28:37.976 --> 00:28:40.966 A:middle
The compiler warns and says,
"If you take the address

00:28:40.966 --> 00:28:43.406 A:middle
of the function, it will
always evaluate to true."

00:28:43.406 --> 00:28:46.166 A:middle
So the conditional here
isn't doing what we expect.

00:28:46.596 --> 00:28:49.856 A:middle
In a case like this,
you probably meant

00:28:49.856 --> 00:28:51.076 A:middle
to make that a weak import.

00:28:51.576 --> 00:28:54.526 A:middle
And you just need to
add the weak attribute

00:28:54.626 --> 00:28:56.866 A:middle
on that function declaration
to tell the compiler

00:28:57.236 --> 00:28:59.516 A:middle
that this value, this
function pointer maybe zero

00:28:59.616 --> 00:29:01.106 A:middle
and without the warning
goes away.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:01.636 --> 00:29:05.086 A:middle
So this again is a serious
problem enabled by default,

00:29:05.296 --> 00:29:06.756 A:middle
the warning is enabled
by default.

00:29:07.306 --> 00:29:11.176 A:middle
A similar issue is
with Enum conversions.

00:29:11.726 --> 00:29:13.766 A:middle
Here's an example of that.

00:29:13.766 --> 00:29:17.026 A:middle
I've got two Enums, a set of
shapes and a set of circles

00:29:17.256 --> 00:29:19.956 A:middle
and I want to-- I have a draw
function that can draw that

00:29:19.956 --> 00:29:24.676 A:middle
and I try to draw a blue circle
but I-- I got the order wrong.

00:29:24.676 --> 00:29:26.386 A:middle
It's supposed to be
Draw Circle Blue,

00:29:26.386 --> 00:29:27.756 A:middle
instead of Draw Blue Circle.

00:29:29.106 --> 00:29:32.296 A:middle
The implicit Enum conversion
warning detects that.

00:29:32.296 --> 00:29:34.576 A:middle
It would actually warn
twice here, ones for each

00:29:34.576 --> 00:29:36.666 A:middle
of the arguments, because
they're both in the wrong order.

00:29:37.126 --> 00:29:40.626 A:middle
Again, this is something
that's trivial to fix.

00:29:41.036 --> 00:29:43.366 A:middle
If you have a problem
like this, you really want

00:29:43.366 --> 00:29:44.296 A:middle
to fix it right away

00:29:44.296 --> 00:29:46.636 A:middle
and so we're now enabling
this warning by default.

00:29:49.156 --> 00:29:53.356 A:middle
Undeclared selectors,
let's look at an example.

00:29:53.356 --> 00:29:58.696 A:middle
I want to make a timer, an NS
timer to go off in 60 seconds

00:29:58.696 --> 00:30:01.916 A:middle
and when that timer goes off, I
want to send the close message

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:02.176 --> 00:30:04.856 A:middle
to the current object,
but I've got a typo.

00:30:04.976 --> 00:30:07.286 A:middle
Instead of close with an
"S" I wrote close with a "Z"

00:30:07.646 --> 00:30:10.976 A:middle
and the undeclared selector
warning will catch this.

00:30:11.956 --> 00:30:14.596 A:middle
The last category of
warnings that I want to talk

00:30:14.596 --> 00:30:17.296 A:middle
about are two issues
that are so serious,

00:30:17.296 --> 00:30:19.386 A:middle
we're going to treat them
as errors by default.

00:30:21.146 --> 00:30:22.856 A:middle
Mismatched Return Types, this is

00:30:22.856 --> 00:30:24.866 A:middle
where you're simply
missing a return value

00:30:24.926 --> 00:30:27.136 A:middle
and here's an example of that.

00:30:27.726 --> 00:30:31.996 A:middle
I had intended to make a safe
square root function based

00:30:31.996 --> 00:30:34.546 A:middle
on the realization you can't
compute the square root

00:30:34.546 --> 00:30:38.186 A:middle
of a negative value so I'm
checking if the input is less

00:30:38.186 --> 00:30:40.016 A:middle
than zero, I'll just return.

00:30:40.826 --> 00:30:43.276 A:middle
But I didn't think about the
fact that the function needs

00:30:43.276 --> 00:30:45.766 A:middle
to return something, is
declared to return a float.

00:30:46.676 --> 00:30:48.826 A:middle
The compiler catches
this of course says,

00:30:49.016 --> 00:30:50.276 A:middle
"You're missing a return value."

00:30:50.846 --> 00:30:54.086 A:middle
A problem like this is really
serious because it's going

00:30:54.326 --> 00:30:58.266 A:middle
to lead to undefined behavior
and your program is going

00:30:58.266 --> 00:31:00.716 A:middle
to crash or it's just going
to do something really wrong.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:01.446 --> 00:31:03.406 A:middle
So this is now going to
be treated as an error

00:31:03.406 --> 00:31:05.296 A:middle
by default in new projects.

00:31:06.696 --> 00:31:08.576 A:middle
Another very serious problem

00:31:08.576 --> 00:31:10.826 A:middle
like that is Unintentional
Root Classes.

00:31:11.546 --> 00:31:13.466 A:middle
This is more of a
typo kind of problem.

00:31:13.466 --> 00:31:16.786 A:middle
I'm declaring a new interface,
my class, and I just forgot

00:31:16.786 --> 00:31:18.326 A:middle
to specify the base class.

00:31:20.096 --> 00:31:23.886 A:middle
The compiler again
catches this and suggest

00:31:24.436 --> 00:31:26.906 A:middle
that you declare an NS
object base class or--

00:31:26.906 --> 00:31:28.226 A:middle
or maybe some other base class

00:31:28.226 --> 00:31:30.566 A:middle
that would be more
appropriate in your code.

00:31:31.976 --> 00:31:34.716 A:middle
This, too, we are going to
treat as an error by default.

00:31:35.456 --> 00:31:38.646 A:middle
Now, if you really did intend
for that to be a root class,

00:31:39.196 --> 00:31:42.016 A:middle
you can add NS root class
before the add interface just

00:31:42.016 --> 00:31:44.356 A:middle
to tell the compiler, "Yeah,
this is really what I meant."

00:31:44.896 --> 00:31:49.406 A:middle
So to summarize all
these warning changes,

00:31:49.716 --> 00:31:51.096 A:middle
we have two new warnings:

00:31:51.266 --> 00:31:54.706 A:middle
unsequenced modifications
and integer overflow.

00:31:55.576 --> 00:31:58.346 A:middle
We have four warnings that
are now going to be enabled

00:31:58.346 --> 00:32:00.996 A:middle
by default in new
projects, unused functions,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:01.236 --> 00:32:03.446 A:middle
implicit Boolean
and Enum conversions

00:32:03.806 --> 00:32:07.166 A:middle
and undeclared selectors,
and finally, two warnings

00:32:07.166 --> 00:32:09.466 A:middle
that are really serious:
mismatch return types

00:32:09.586 --> 00:32:12.086 A:middle
and unintentional root classes
that we're going to treat

00:32:12.086 --> 00:32:14.226 A:middle
as errors by default
in new projects.

00:32:16.636 --> 00:32:20.416 A:middle
So just as the warnings
can help you catch bugs,

00:32:21.066 --> 00:32:24.036 A:middle
the LLVM compiler provides
a really powerful feature

00:32:24.406 --> 00:32:26.426 A:middle
to go deeper in analyzing
your code

00:32:26.426 --> 00:32:29.536 A:middle
and finding more subtle issues
and so to talk about that,

00:32:29.536 --> 00:32:32.516 A:middle
I'd like to invite
up Anna Zaks to talk

00:32:32.516 --> 00:32:34.386 A:middle
about the Static
Analyzer and finish

00:32:34.386 --> 00:32:34.976 A:middle
up the rest of the session.

00:32:35.516 --> 00:32:41.066 A:middle
[ Applause ]

00:32:41.566 --> 00:32:42.136 A:middle
&gt;&gt; Thank you, Bob.

00:32:42.796 --> 00:32:44.406 A:middle
First, I'm going to
talk about the new

00:32:44.406 --> 00:32:45.856 A:middle
and exciting features
we've added

00:32:45.856 --> 00:32:47.966 A:middle
to the static analyzer
over the past year.

00:32:48.516 --> 00:32:51.066 A:middle
And for those of you who had
never used the static analyzer,

00:32:51.356 --> 00:32:54.416 A:middle
you'll get to learn it-- learn
about what it is all about

00:32:54.416 --> 00:32:57.166 A:middle
and how it can help you
in your development cycle.

00:32:58.166 --> 00:33:00.986 A:middle
So everyone agrees
that bugs are bad

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.986 --> 00:33:02.796 A:middle
and as Bob has just mentioned,

00:33:02.866 --> 00:33:06.516 A:middle
compiler warnings might pinpoint
some of those bugs to you.

00:33:07.336 --> 00:33:10.836 A:middle
So how the analyzer issues are
different from compiler warnings

00:33:11.246 --> 00:33:13.366 A:middle
and why should you use
the static analyzer?

00:33:14.326 --> 00:33:17.506 A:middle
Well, the static analyzer
performs much deeper analysis

00:33:17.506 --> 00:33:18.226 A:middle
of your program.

00:33:18.726 --> 00:33:21.696 A:middle
It systematically explores
every paths for your program

00:33:21.976 --> 00:33:23.786 A:middle
which allows it to
find those hard

00:33:23.786 --> 00:33:25.496 A:middle
to reproduce edge case bugs.

00:33:25.566 --> 00:33:28.416 A:middle
The static analyzer that ships

00:33:28.416 --> 00:33:31.296 A:middle
to this Xcode 5 finds
new kinds of bugs.

00:33:31.956 --> 00:33:34.476 A:middle
It performs deeper
record analysis especially

00:33:34.476 --> 00:33:38.896 A:middle
for objective-C and C++ and
it also exposes new workflows

00:33:39.146 --> 00:33:41.856 A:middle
that will allow you to
tailor analysis power

00:33:42.126 --> 00:33:43.576 A:middle
to your specific setting.

00:33:44.366 --> 00:33:46.136 A:middle
So let's first talk
about the new kinds

00:33:46.136 --> 00:33:47.676 A:middle
of bugs analyzer can find.

00:33:48.056 --> 00:33:51.736 A:middle
Most of you are familiar
with NSDictionary

00:33:52.026 --> 00:33:56.776 A:middle
and NSMutableDictionary APIs
that this code snippet is using.

00:33:56.856 --> 00:34:00.646 A:middle
However, let's bring here
the Apple documentation site

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:00.886 --> 00:34:03.356 A:middle
that will tell us exactly
what this method does.

00:34:04.216 --> 00:34:05.956 A:middle
So the Apple documentation
tells us

00:34:05.956 --> 00:34:07.926 A:middle
that this method
creates a dictionary

00:34:07.926 --> 00:34:09.556 A:middle
with a given key and value pair.

00:34:10.456 --> 00:34:12.056 A:middle
However, look at the fine print.

00:34:12.616 --> 00:34:15.326 A:middle
Here in the parameter
section, it also tells us

00:34:15.786 --> 00:34:17.446 A:middle
that if the value is nil,

00:34:17.476 --> 00:34:19.856 A:middle
then an exception will
be thrown at runtime.

00:34:20.346 --> 00:34:23.786 A:middle
And the runtime exception is
not something any of us want

00:34:23.786 --> 00:34:25.846 A:middle
to happen on the user's iPad

00:34:25.846 --> 00:34:29.096 A:middle
or an iPhone while our
application is being run there.

00:34:29.916 --> 00:34:31.755 A:middle
So how can the static
analyzer help?

00:34:32.706 --> 00:34:35.216 A:middle
Well, let's go back to our
code snippet and suppose here

00:34:35.216 --> 00:34:36.755 A:middle
that the default object was set

00:34:36.755 --> 00:34:39.266 A:middle
to nil earlier along
the execution path.

00:34:40.016 --> 00:34:42.286 A:middle
So if the analyzer
knows this, it can--

00:34:42.286 --> 00:34:44.916 A:middle
it will warn you and
it will remind you

00:34:45.206 --> 00:34:47.815 A:middle
that this API should
not be used in this way.

00:34:48.835 --> 00:34:51.476 A:middle
And of course if you've switched
to the new literal syntax,

00:34:51.476 --> 00:34:52.565 A:middle
they're also going to warn

00:34:52.565 --> 00:34:54.505 A:middle
but with a slightly
different error message.

00:34:54.996 --> 00:34:58.606 A:middle
Well, mostly you will say,
"This code is too simple.

00:34:58.606 --> 00:34:59.956 A:middle
I don't try code like that.

00:34:59.956 --> 00:35:02.856 A:middle
I don't set an object to nil and
immediately create an array."

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:03.376 --> 00:35:07.136 A:middle
Well, we've run the analyzer
with this warning turned on,

00:35:07.136 --> 00:35:11.116 A:middle
on several large Objective-C
code bases and it found issues

00:35:11.116 --> 00:35:13.616 A:middle
in every single one of them.

00:35:13.926 --> 00:35:16.766 A:middle
Here's an example from a
large Objective-C code base

00:35:16.766 --> 00:35:18.046 A:middle
where the analyzer warns.

00:35:18.696 --> 00:35:23.086 A:middle
Here it tells you that the
object inModifiedKeys is--

00:35:23.436 --> 00:35:26.466 A:middle
could be nil and it is
used to create a dictionary

00:35:27.796 --> 00:35:29.886 A:middle
so when the analyzer
reports an issue to you,

00:35:29.886 --> 00:35:32.336 A:middle
not only does it point
to the line number

00:35:32.336 --> 00:35:35.206 A:middle
where the issue occurred
but it also explains

00:35:35.206 --> 00:35:37.096 A:middle
to you why this problem
has happened.

00:35:37.936 --> 00:35:40.646 A:middle
And the analyzer explains
issues by showing you a path

00:35:41.386 --> 00:35:44.386 A:middle
through your program on which
the-- the problem occurs.

00:35:44.866 --> 00:35:47.066 A:middle
So in just-- in order to
see the path, you just click

00:35:47.066 --> 00:35:49.526 A:middle
on the issue and the
path gets displayed.

00:35:50.376 --> 00:35:52.446 A:middle
And notice at the top
of the editor window,

00:35:52.446 --> 00:35:55.886 A:middle
you'll also see analyzer
issue navigation bar

00:35:55.886 --> 00:35:58.086 A:middle
that will allow you to
step through this task

00:35:58.206 --> 00:36:00.196 A:middle
and examine each
step along the way.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:01.136 --> 00:36:03.086 A:middle
So let's see what
actually happens here.

00:36:03.086 --> 00:36:05.116 A:middle
Why the analyzer thinks
there is a problem?

00:36:05.796 --> 00:36:08.796 A:middle
Well, first, we call
postNotificationName method.

00:36:09.286 --> 00:36:13.126 A:middle
And here we-- in-- the
creator's third argument

00:36:13.156 --> 00:36:15.456 A:middle
for this method call,
the special case,

00:36:15.456 --> 00:36:17.966 A:middle
the case when inModifiedKeys
object is nil.

00:36:17.966 --> 00:36:20.956 A:middle
So we say, "If inModifiedKeys
object is not nil,

00:36:21.336 --> 00:36:24.856 A:middle
create a dictionary, otherwise,
just pass a nil and use

00:36:24.856 --> 00:36:26.356 A:middle
that as a third argument."

00:36:26.836 --> 00:36:30.746 A:middle
This program keeps running
along the same paths and later

00:36:30.746 --> 00:36:34.966 A:middle
on the same API is gone
and called again and here,

00:36:34.966 --> 00:36:38.076 A:middle
the programmer just
forgot to check for--

00:36:38.376 --> 00:36:40.566 A:middle
they don't check if
inModifiedKeys is nil.

00:36:40.566 --> 00:36:44.426 A:middle
They just-- just called it--
they just create a dictionary

00:36:44.426 --> 00:36:45.846 A:middle
and use it at the
third argument.

00:36:46.156 --> 00:36:48.256 A:middle
So clearly there is
an inconsistency here

00:36:48.256 --> 00:36:50.276 A:middle
and this is what
the analyzer notices

00:36:50.546 --> 00:36:52.386 A:middle
and this is why it
reports the issue.

00:36:52.936 --> 00:36:57.106 A:middle
So we've-- we've also
stand a lot of time

00:36:57.106 --> 00:37:00.316 A:middle
and we've greatly
improved our C++ support.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.726 --> 00:37:03.086 A:middle
So here's another
example of a new--

00:37:03.086 --> 00:37:05.556 A:middle
of warning that we've
added to C++.

00:37:06.076 --> 00:37:09.236 A:middle
Here, we-- we allocate an
object and later on be freed.

00:37:09.236 --> 00:37:11.956 A:middle
So, of course, the
problem here is

00:37:11.956 --> 00:37:15.346 A:middle
that object allocators was
new, should be the allocated

00:37:15.346 --> 00:37:20.016 A:middle
with delete, because calling a
free function will not call the

00:37:20.016 --> 00:37:22.986 A:middle
distractor of the object so
this might result in memory

00:37:22.986 --> 00:37:26.396 A:middle
or resource leaks which are
hard to find at runtime.

00:37:26.886 --> 00:37:30.796 A:middle
So we've added several new
warnings over the past year.

00:37:30.796 --> 00:37:34.646 A:middle
We are going to warn if you're
trying to add a nil element

00:37:34.646 --> 00:37:39.066 A:middle
to NSMutableArray or nil key or
value to NSMutableDictionary.

00:37:39.446 --> 00:37:43.506 A:middle
We also warn on use-after-free
in C++, mismatched deallocators

00:37:43.566 --> 00:37:46.196 A:middle
and creation references
to null in C++.

00:37:46.716 --> 00:37:50.986 A:middle
And of course these new
warnings just add on top

00:37:50.986 --> 00:37:53.486 A:middle
of the growing body
of the analyzer issues

00:37:53.486 --> 00:37:55.806 A:middle
that we've added over the years.

00:37:56.696 --> 00:38:00.686 A:middle
And know that both old and
new issues greatly benefit

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:00.686 --> 00:38:04.426 A:middle
from the power of the
analysis because again a factor

00:38:04.426 --> 00:38:08.576 A:middle
to finding bugs in your programs
is actually understanding what

00:38:08.576 --> 00:38:09.406 A:middle
your program does.

00:38:09.506 --> 00:38:12.436 A:middle
For example, when you call
a method, what happens?

00:38:13.876 --> 00:38:15.616 A:middle
Some of you might
remember that last year,

00:38:15.616 --> 00:38:18.816 A:middle
we've added cross function
reasoning for C functions.

00:38:19.356 --> 00:38:22.556 A:middle
Well, this year, we've extended
it to objective-C and C++.

00:38:23.856 --> 00:38:27.196 A:middle
And we found that this greatly
benefit the power of analysis

00:38:27.196 --> 00:38:30.746 A:middle
because it's so natural for
people to split their cord

00:38:30.746 --> 00:38:32.986 A:middle
into subfunctions or submethods.

00:38:33.956 --> 00:38:36.976 A:middle
I'm going to explain
to you how this works

00:38:36.976 --> 00:38:38.216 A:middle
and why this important

00:38:38.476 --> 00:38:41.676 A:middle
by showing you how the analyzer
operates behind the scenes,

00:38:42.216 --> 00:38:44.326 A:middle
on this code snippet.

00:38:44.326 --> 00:38:48.386 A:middle
So as I mentioned earlier, the
analyzer analyzes your program

00:38:48.386 --> 00:38:51.886 A:middle
by systemically exploring every
paths through your program.

00:38:52.606 --> 00:38:56.196 A:middle
And it has to be statically
without running your program.

00:38:57.046 --> 00:38:59.826 A:middle
And in order to do that,
it extracts away the values

00:38:59.826 --> 00:39:03.156 A:middle
of your variables and
constructs a draft

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:03.396 --> 00:39:06.296 A:middle
from extract system states--
of extract system states

00:39:06.296 --> 00:39:07.596 A:middle
and transitions between them.

00:39:08.076 --> 00:39:10.436 A:middle
So let's construct such a
draft for this code snippet.

00:39:11.296 --> 00:39:14.366 A:middle
The analyzer starts with
the initial state and then

00:39:14.366 --> 00:39:16.746 A:middle
as it evaluates the
statement in your program,

00:39:16.986 --> 00:39:21.266 A:middle
it construct a second
state, so here we create,

00:39:21.266 --> 00:39:23.666 A:middle
allocate an object,
localized its name.

00:39:24.276 --> 00:39:26.946 A:middle
Notice here how the
analyzer splits the path

00:39:27.446 --> 00:39:31.546 A:middle
to capture the fact that L could
be nil and from now on is going

00:39:31.546 --> 00:39:34.106 A:middle
to explore both of these paths.

00:39:34.736 --> 00:39:38.076 A:middle
So now let's go back and see
what happened when the analyzed

00:39:38.186 --> 00:39:40.676 A:middle
or when the simulated
this last method call.

00:39:41.506 --> 00:39:43.326 A:middle
So previously the analyzer had

00:39:43.366 --> 00:39:45.426 A:middle
to use the most pessimistic
assumptions

00:39:45.426 --> 00:39:47.166 A:middle
about what a method
call could do.

00:39:48.036 --> 00:39:49.046 A:middle
However, it's silly.

00:39:49.266 --> 00:39:51.076 A:middle
If the method implementation
is available

00:39:51.076 --> 00:39:52.326 A:middle
to us, we should use that.

00:39:52.966 --> 00:39:56.176 A:middle
So let's go back and replay
how this will work now.

00:39:56.756 --> 00:40:00.046 A:middle
So in this case, the
analyzer knows that the type

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:00.046 --> 00:40:03.706 A:middle
of object A is asset and
given the object type

00:40:03.706 --> 00:40:07.256 A:middle
and the method name, we can
just very high assurance detect

00:40:07.566 --> 00:40:09.766 A:middle
which method will be
called at runtime.

00:40:10.836 --> 00:40:12.886 A:middle
And this-- if this
method's implementation is

00:40:12.886 --> 00:40:16.136 A:middle
in the same source file or
one of the included headers,

00:40:16.566 --> 00:40:18.906 A:middle
then we can bring the
method implementation

00:40:19.156 --> 00:40:21.696 A:middle
and use it while we
simulate this method call.

00:40:22.386 --> 00:40:23.546 A:middle
So here what will happen,

00:40:23.546 --> 00:40:27.226 A:middle
the analyzer will simulate a
method call, add localized name

00:40:27.226 --> 00:40:30.546 A:middle
to the properties
map, add regular name

00:40:30.546 --> 00:40:32.116 A:middle
through the properties
map and return.

00:40:32.846 --> 00:40:34.076 A:middle
Now, let's see what happens on--

00:40:34.076 --> 00:40:36.276 A:middle
along the path on
which L is nil.

00:40:37.006 --> 00:40:38.876 A:middle
Again, we simulate a method call

00:40:38.876 --> 00:40:42.026 A:middle
and next we add nil
to the dictionary.

00:40:42.856 --> 00:40:45.996 A:middle
And here the analyzer notice
that this is a problem,

00:40:45.996 --> 00:40:48.346 A:middle
adding a nil to
NSMutableDictionary is

00:40:48.346 --> 00:40:50.906 A:middle
against the rules so
it's going to warn you.

00:40:51.936 --> 00:40:55.736 A:middle
So if you were going to run this
code through Xcode right now,

00:40:55.736 --> 00:40:59.236 A:middle
this is what you would see, you
would see a path through both--

00:40:59.476 --> 00:41:03.866 A:middle
both of the methods that shows
you how the problem could

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:03.916 --> 00:41:04.496 A:middle
have occurred.

00:41:05.096 --> 00:41:08.056 A:middle
As I mentioned previously,

00:41:08.056 --> 00:41:11.146 A:middle
we've also extended this
cross method reasoning to C++

00:41:11.526 --> 00:41:13.906 A:middle
so here's another
example, C++ example.

00:41:14.516 --> 00:41:18.186 A:middle
Here, we allocate a buffer and
we use autopointer to yield

00:41:18.336 --> 00:41:20.456 A:middle
with memory management for us.

00:41:21.316 --> 00:41:24.456 A:middle
So if you were to run this
code through the analyzer,

00:41:24.456 --> 00:41:27.116 A:middle
the analyzer is actually
going to report a bug.

00:41:28.576 --> 00:41:32.096 A:middle
It's going to tell us that
here the memory is allocated

00:41:32.096 --> 00:41:34.836 A:middle
with operator array new
or news square bracket

00:41:35.206 --> 00:41:38.596 A:middle
and it should be deallocator
as operator array delete,

00:41:38.916 --> 00:41:39.856 A:middle
however it tells us

00:41:39.856 --> 00:41:42.156 A:middle
that deallocators
was operator delete.

00:41:43.576 --> 00:41:45.316 A:middle
Notice here that
we don't see the--

00:41:45.316 --> 00:41:49.876 A:middle
the allocation side so what
happens actually if we click

00:41:49.876 --> 00:41:52.216 A:middle
on this warning to extend it,

00:41:52.216 --> 00:41:57.106 A:middle
we'll see that the analyzer sees
the distractor of autopointer

00:41:57.386 --> 00:42:00.326 A:middle
and it sees which the
allocation method it uses there

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:00.746 --> 00:42:03.586 A:middle
and this is what's required
to report this problem.

00:42:04.116 --> 00:42:08.706 A:middle
So this just highlights how
important the cross method

00:42:08.706 --> 00:42:12.876 A:middle
reasoning is for C++ since so
much implementation detail is

00:42:12.876 --> 00:42:17.556 A:middle
hidden in the headers.

00:42:17.706 --> 00:42:20.996 A:middle
OK, so to summarize,
what made this possible?

00:42:21.216 --> 00:42:23.976 A:middle
If you do path specific
tracking of object types,

00:42:24.686 --> 00:42:28.416 A:middle
we reason about constructors
and destructors in C++.

00:42:29.176 --> 00:42:32.076 A:middle
Also, if your method
implementation is either

00:42:32.076 --> 00:42:35.526 A:middle
in the given source file or in
one of the included headers,

00:42:35.836 --> 00:42:37.316 A:middle
the analyzer will be able

00:42:37.316 --> 00:42:40.496 A:middle
to use it while it's
simulating a method call.

00:42:40.496 --> 00:42:43.766 A:middle
However, like the compiler,
the analyzer only reasons

00:42:43.766 --> 00:42:45.576 A:middle
about one source file at a time.

00:42:45.576 --> 00:42:48.816 A:middle
So if your method implementation
is in another source file,

00:42:48.816 --> 00:42:52.026 A:middle
it will not be able to see the
[inaudible] during the analysis.

00:42:54.586 --> 00:42:59.616 A:middle
So now, I'm sure you're all
excited about going to have

00:42:59.616 --> 00:43:01.566 A:middle
and running the analyzer
on your code

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:01.566 --> 00:43:04.516 A:middle
and the only question you
have is how do I do that?

00:43:04.516 --> 00:43:06.806 A:middle
How do I trigger
analysis of my project?

00:43:07.946 --> 00:43:09.376 A:middle
Well, there are several
ways of doing that.

00:43:09.786 --> 00:43:13.736 A:middle
So first, we can go to Xcode
and choose product analyze

00:43:13.736 --> 00:43:17.016 A:middle
and that is going to trigger
analysis of your whole project

00:43:17.386 --> 00:43:20.336 A:middle
that minute or that
second from within Xcode.

00:43:21.386 --> 00:43:23.336 A:middle
However, often what
you've done--

00:43:23.336 --> 00:43:25.416 A:middle
do is you've analyzed
the project before

00:43:25.716 --> 00:43:28.596 A:middle
and you've changed one or
two files and you just want

00:43:28.596 --> 00:43:30.006 A:middle
to reanalyze those files.

00:43:30.836 --> 00:43:33.336 A:middle
So we've added a new
feature in Xcode 5,

00:43:33.416 --> 00:43:36.156 A:middle
you can go to product
perform action and choose

00:43:36.156 --> 00:43:40.786 A:middle
to analyze a single
file, that's much faster.

00:43:40.866 --> 00:43:44.116 A:middle
Well, some of you might want
to have continuous feedback

00:43:44.116 --> 00:43:46.676 A:middle
from the analyzer as part
of your active development.

00:43:47.416 --> 00:43:51.706 A:middle
You can go to build settings
for Xcode and you can choose

00:43:52.066 --> 00:43:53.546 A:middle
to analyze during build.

00:43:53.996 --> 00:43:57.966 A:middle
What that will do is it will
trigger analysis every time you

00:43:57.966 --> 00:43:59.036 A:middle
build your project.

00:43:59.626 --> 00:44:02.366 A:middle
If you have a project that
analyzer warning is free,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:02.456 --> 00:44:05.826 A:middle
then we highly recommend that
you use aesthetic analysis

00:44:05.826 --> 00:44:08.176 A:middle
as part of your continuous
integration.

00:44:08.776 --> 00:44:11.736 A:middle
You can do that by just
adding Xcode build analyze

00:44:12.116 --> 00:44:15.656 A:middle
to your integration-- continuous
integration script of choice

00:44:16.386 --> 00:44:19.506 A:middle
or you can set up a bot
through Xcode by going

00:44:19.506 --> 00:44:20.766 A:middle
to product create bot.

00:44:21.486 --> 00:44:23.706 A:middle
And for more information
about creating a bot

00:44:24.276 --> 00:44:28.046 A:middle
that rruns the aesthetic
analyzer and other stuff,

00:44:28.566 --> 00:44:31.276 A:middle
please attend the session
that will happen right

00:44:31.276 --> 00:44:32.666 A:middle
after this session in Presidio,

00:44:32.666 --> 00:44:34.596 A:middle
"Continuous Integration
with Xcode 5."

00:44:34.686 --> 00:44:39.616 A:middle
Now, I've told you how to choose
which code to analyze and when

00:44:39.616 --> 00:44:40.696 A:middle
to trigger the analysis.

00:44:40.776 --> 00:44:44.706 A:middle
However, what you also can
control is the analysis power.

00:44:45.586 --> 00:44:48.216 A:middle
There are two analysis
mode, there is Shallow,

00:44:48.856 --> 00:44:52.116 A:middle
shallow for quick
analysis, and there is Deep

00:44:52.326 --> 00:44:55.326 A:middle
for more thorough analysis
that might find more issues

00:44:55.696 --> 00:44:57.706 A:middle
but might take significantly
longer.

00:44:58.756 --> 00:45:01.146 A:middle
And here are the defaults
that you can change by going

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:01.146 --> 00:45:02.686 A:middle
to the Xcode build settings.

00:45:03.506 --> 00:45:06.306 A:middle
So the default for--
mode for analysis with--

00:45:06.306 --> 00:45:08.306 A:middle
during analyze action is deep

00:45:08.646 --> 00:45:11.166 A:middle
and the analyze action is
what's gets used when you go

00:45:11.166 --> 00:45:15.536 A:middle
to product-- product menu
choose analyze or what gets used

00:45:15.536 --> 00:45:18.406 A:middle
when you use analyzer as part
of your continuous integration.

00:45:19.136 --> 00:45:22.986 A:middle
The default mode of analysis
during build is shallow

00:45:23.686 --> 00:45:26.736 A:middle
because this is when you
want a very fast turnaround.

00:45:26.736 --> 00:45:30.676 A:middle
Now, if there is one
thing to remember,

00:45:30.866 --> 00:45:35.496 A:middle
that is we suggest you
always analyze your project

00:45:35.496 --> 00:45:37.866 A:middle
in deep mode as part
of your qualifications.

00:45:38.186 --> 00:45:43.946 A:middle
Now, last but not least, let's
talk about your comments.

00:45:45.376 --> 00:45:48.176 A:middle
So most of you had heard
this question before,

00:45:48.706 --> 00:45:52.166 A:middle
where is the documentation,
or maybe some

00:45:52.166 --> 00:45:54.216 A:middle
of you always write the
documentation then you've

00:45:54.346 --> 00:45:56.486 A:middle
probably asked this
question before.

00:45:57.596 --> 00:46:00.336 A:middle
And a very handy way of
writing the documentation is

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:00.336 --> 00:46:02.986 A:middle
to use structured
comments such as Doxygen.

00:46:03.526 --> 00:46:06.176 A:middle
This is very useful because
the documentation stays--

00:46:06.176 --> 00:46:08.316 A:middle
has more chance of
staying up-to-date,

00:46:08.726 --> 00:46:12.096 A:middle
it's easier to write, it
stays with your code, however,

00:46:12.096 --> 00:46:13.416 A:middle
up to now, the compiler

00:46:13.416 --> 00:46:16.686 A:middle
and Xcode only pays special
attention to your code

00:46:17.146 --> 00:46:18.546 A:middle
but skips your comments.

00:46:19.816 --> 00:46:23.936 A:middle
Well, in Xcode 5, the
Xcode 5 pays attention

00:46:23.936 --> 00:46:26.776 A:middle
to everything you wrote
including your comments

00:46:27.486 --> 00:46:31.056 A:middle
and this allows us to provide
a great user experience

00:46:31.056 --> 00:46:32.336 A:middle
and developer experience.

00:46:32.626 --> 00:46:33.956 A:middle
Let's see what that means.

00:46:34.766 --> 00:46:38.656 A:middle
So previously, if you went
to Xcode and option clicked

00:46:38.656 --> 00:46:42.166 A:middle
on a method to see what it does,
if the method was not declared

00:46:42.166 --> 00:46:44.726 A:middle
in the system header,
this is all you would see,

00:46:45.216 --> 00:46:47.126 A:middle
it will just tell
you, the header--

00:46:47.126 --> 00:46:49.546 A:middle
which just tell you the header
where this method was declared

00:46:49.976 --> 00:46:51.936 A:middle
which is useful but
not so useful.

00:46:52.676 --> 00:46:56.936 A:middle
Well, now, what will happen is
we will generate and display

00:46:56.936 --> 00:47:01.776 A:middle
to you the documentation that
is based on your comment.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:02.086 --> 00:47:04.776 A:middle
Another way of viewing
quick help is

00:47:04.856 --> 00:47:06.636 A:middle
through quick help inspector.

00:47:06.936 --> 00:47:08.996 A:middle
You can configure
Xcode to display it

00:47:08.996 --> 00:47:11.416 A:middle
on the right-hand side
of the Xcode window.

00:47:12.016 --> 00:47:14.406 A:middle
And then whenever you
hover your cursor over--

00:47:15.126 --> 00:47:16.506 A:middle
over a given method name,

00:47:16.556 --> 00:47:18.556 A:middle
that documentation will
be displayed there.

00:47:19.086 --> 00:47:21.906 A:middle
No-- no need to option click.

00:47:22.596 --> 00:47:27.806 A:middle
Now, another way of using your
comments is code completion

00:47:27.856 --> 00:47:32.016 A:middle
so whenever a user-- someone
who's using your API types the

00:47:32.016 --> 00:47:33.996 A:middle
name of the method,
not only will--

00:47:33.996 --> 00:47:36.856 A:middle
will it display its
full signature

00:47:36.856 --> 00:47:40.726 A:middle
but will also display the
comment that is based on your--

00:47:40.726 --> 00:47:43.706 A:middle
the connotation that's
based on your comment

00:47:43.856 --> 00:47:45.316 A:middle
or the brief section
of your comment.

00:47:45.986 --> 00:47:48.976 A:middle
Now, let's talk about
how this feature works.

00:47:49.336 --> 00:47:51.406 A:middle
This feature is powered
by the compiler.

00:47:51.926 --> 00:47:55.606 A:middle
The compiler parses your
comments along with your code

00:47:55.946 --> 00:48:00.886 A:middle
and attaches comments to the
declarations and this allows us

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:00.886 --> 00:48:03.426 A:middle
to create a very
precise representation

00:48:03.696 --> 00:48:07.206 A:middle
of your whole program that
includes your comments

00:48:07.616 --> 00:48:10.846 A:middle
and this precise representation,
not only allows us

00:48:10.846 --> 00:48:12.316 A:middle
to show you your comments back

00:48:12.736 --> 00:48:17.056 A:middle
but also give you active
feedback about them.

00:48:17.256 --> 00:48:20.706 A:middle
So we've also added a
new warning that's called

00:48:20.706 --> 00:48:24.716 A:middle
Wdocumentation and you can turn
it on by going to build settings

00:48:24.716 --> 00:48:29.446 A:middle
and choosing-- turning
documentation comments to--

00:48:29.446 --> 00:48:30.446 A:middle
from no to yes.

00:48:31.406 --> 00:48:33.776 A:middle
What this warning does
is it tries to make sure

00:48:34.036 --> 00:48:35.706 A:middle
that your comments
stay up-to-date

00:48:35.706 --> 00:48:38.306 A:middle
and don't have some
simple errors

00:48:38.306 --> 00:48:41.866 A:middle
that the analyzer can find--
that the compiler can find.

00:48:42.106 --> 00:48:43.626 A:middle
I'll give you some examples.

00:48:43.716 --> 00:48:45.926 A:middle
So here is the first example,

00:48:45.926 --> 00:48:49.356 A:middle
here we have a method
whose signature changed.

00:48:49.416 --> 00:48:52.826 A:middle
This method used to return
an error code, however,

00:48:52.826 --> 00:48:54.146 A:middle
now it returns a void.

00:48:55.146 --> 00:48:57.526 A:middle
Notice here that
the comment is stale

00:48:58.096 --> 00:49:01.586 A:middle
and the compiler notices
this and it tells you

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:01.586 --> 00:49:03.926 A:middle
that you should probably
change the stale comment,

00:49:03.926 --> 00:49:06.156 A:middle
this method does not
return anything anymore.

00:49:06.696 --> 00:49:09.166 A:middle
Here is yet another example.

00:49:09.166 --> 00:49:12.136 A:middle
Here we have-- started
writing this documentation

00:49:12.136 --> 00:49:14.386 A:middle
and probably we got
distracted because we forgot

00:49:14.386 --> 00:49:15.766 A:middle
to fill in the brief section.

00:49:16.576 --> 00:49:19.946 A:middle
Again the compiler is going
to warn us-- warn and tell us,

00:49:20.216 --> 00:49:22.936 A:middle
"Hey, you definitely
meant to fill this

00:49:22.936 --> 00:49:24.086 A:middle
in but you just forgot."

00:49:24.956 --> 00:49:26.356 A:middle
Here is yet another example.

00:49:26.996 --> 00:49:27.946 A:middle
Here, we have a method

00:49:27.946 --> 00:49:30.806 A:middle
that takes two arguments:
name and bundle.

00:49:31.626 --> 00:49:34.266 A:middle
However, we've mistyped
bundle and instead

00:49:34.266 --> 00:49:35.946 A:middle
of writing bundle,
we wrote bungle.

00:49:36.836 --> 00:49:40.036 A:middle
Not-- not only the
compiler notices this

00:49:40.866 --> 00:49:43.356 A:middle
but it's also a little
bit psychic.

00:49:44.426 --> 00:49:46.886 A:middle
It's going to issue a
Fix-it and it will tell you,

00:49:46.886 --> 00:49:49.626 A:middle
"didn't you mean
bungle-- bundle?"

00:49:50.676 --> 00:49:54.036 A:middle
And the only action necessary
for you to fix this problem is

00:49:54.036 --> 00:49:58.746 A:middle
to just click enter and your
code will be-- all header.

00:49:59.516 --> 00:50:04.736 A:middle
[ Applause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:05.236 --> 00:50:08.246 A:middle
So we've added support
to structured comments

00:50:08.246 --> 00:50:10.016 A:middle
such as Doxygen and HeaderDoc

00:50:10.376 --> 00:50:14.056 A:middle
and HeaderDoc is
Apple-structured comment format.

00:50:14.096 --> 00:50:15.976 A:middle
For more information
about this structured--

00:50:15.976 --> 00:50:19.416 A:middle
comment format, please visit
the website that I've listed

00:50:19.416 --> 00:50:20.526 A:middle
at the bottom of the slide.

00:50:21.496 --> 00:50:24.226 A:middle
We highly encourage you to
write your documentation

00:50:24.496 --> 00:50:28.926 A:middle
and using structured comments
and instantly see them appear

00:50:28.926 --> 00:50:31.146 A:middle
in quick help and
code completion.

00:50:31.886 --> 00:50:34.596 A:middle
If you'd like to hear
feedback about your comments

00:50:34.596 --> 00:50:36.796 A:middle
from the compiler,
don't forget to turn

00:50:36.796 --> 00:50:40.436 A:middle
on the connotation comments
warning, it's all wired up,

00:50:40.586 --> 00:50:41.976 A:middle
ready for your comments.

00:50:42.396 --> 00:50:46.996 A:middle
So to summarize, we've
covered a lot of topics today.

00:50:46.996 --> 00:50:50.126 A:middle
Now, the LLVM compiler
is stronger than ever.

00:50:50.726 --> 00:50:53.516 A:middle
It produces faster apps
by providing support

00:50:53.516 --> 00:50:55.966 A:middle
for latest hardware and having--

00:50:56.346 --> 00:51:00.046 A:middle
enabling new, aggressive
optimizations, it also--

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:00.126 --> 00:51:02.226 A:middle
we also want to make
sure that you can focus

00:51:02.226 --> 00:51:03.516 A:middle
on writing your features

00:51:03.876 --> 00:51:06.246 A:middle
so we streamlined the
development process

00:51:06.596 --> 00:51:08.836 A:middle
by making the tools
installation easier,

00:51:09.086 --> 00:51:11.896 A:middle
providing almost
complete C++11 support,

00:51:12.436 --> 00:51:15.136 A:middle
providing stricter
warnings, deeper analyzing--

00:51:15.406 --> 00:51:19.016 A:middle
analysis and taking full use
of your comments in the ID

00:51:19.016 --> 00:51:21.986 A:middle
to make it easier for
you to concentrate

00:51:21.986 --> 00:51:24.406 A:middle
and focus on the code.

00:51:24.576 --> 00:51:25.496 A:middle
For more information,

00:51:25.496 --> 00:51:28.056 A:middle
please contact our
Developers Tools Evangelist

00:51:28.056 --> 00:51:29.716 A:middle
and visit these websites.

00:51:30.106 --> 00:51:34.576 A:middle
If you want to learn more
about the new optimizations

00:51:34.576 --> 00:51:35.796 A:middle
that Evan talked about,

00:51:36.016 --> 00:51:40.176 A:middle
please visit Optimize Your Code
Using LLVM Session tomorrow.

00:51:40.706 --> 00:51:43.186 A:middle
There will be also two
related sessions today:

00:51:43.556 --> 00:51:48.296 A:middle
Advances in Objective-C at
4:30 and Continuous Integration

00:51:48.296 --> 00:51:52.156 A:middle
with Xcode 5 right after this
session at 3:15 in Presidio.

00:51:53.326 --> 00:51:55.976 A:middle
Thank you all for coming and
enjoy the rest of your day.

00:51:56.516 --> 00:51:59.516 A:middle
[ Applause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:00.016 --> 00:52:09.886 A:middle
[ Silence ]

