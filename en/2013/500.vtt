WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:09.901 A:middle
[ Silence ]

00:00:10.401 --> 00:00:19.796 A:middle
[ Applause ]

00:00:20.296 --> 00:00:21.336 A:middle
&gt;&gt; OK, thank you.

00:00:21.866 --> 00:00:24.376 A:middle
So, good afternoon.

00:00:24.816 --> 00:00:26.166 A:middle
My name is Thomas Goossens.

00:00:26.166 --> 00:00:30.516 A:middle
And I'm here to talk
about Scene Kit.

00:00:30.516 --> 00:00:35.616 A:middle
So Scene Kit is a framework that
was introduced last year at WWDC

00:00:35.896 --> 00:00:39.166 A:middle
and it is available on
OS X since Mountain Lion.

00:00:40.296 --> 00:00:43.596 A:middle
And the goal of this framework
is to simplify the integration

00:00:43.716 --> 00:00:45.416 A:middle
of 3D in applications.

00:00:46.006 --> 00:00:48.806 A:middle
And they can be whatever
applications like presentations,

00:00:48.966 --> 00:00:53.626 A:middle
UI, games, slideshows, data
visualizations, et cetera.

00:00:54.386 --> 00:00:58.856 A:middle
Scene Kit is built on top of
OpenGL to leverage the GPU

00:00:59.426 --> 00:01:01.976 A:middle
and it can collaborate with
other graphic technologies

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:02.526 --> 00:01:05.196 A:middle
like Core Image, Core
Animation, and GLKit

00:01:05.396 --> 00:01:06.656 A:middle
and then I'll talk
about that later.

00:01:07.976 --> 00:01:10.606 A:middle
Scene Kit is a high
level Objective-C API.

00:01:10.926 --> 00:01:14.896 A:middle
And basically, it
exposes a scene graph

00:01:14.896 --> 00:01:17.786 A:middle
and I will introduce what
it means right after.

00:01:18.526 --> 00:01:24.546 A:middle
For OS X Mavericks, we
introduce 20 great new features.

00:01:25.456 --> 00:01:28.166 A:middle
We will present some of them
later in this presentation.

00:01:28.166 --> 00:01:32.286 A:middle
But I will first start
with a quick recap

00:01:32.286 --> 00:01:35.426 A:middle
of Scene Kit's basics.

00:01:35.576 --> 00:01:40.366 A:middle
So for this presentation, I will
start by introducing the concept

00:01:40.676 --> 00:01:41.946 A:middle
of a scene graph, sorry.

00:01:42.926 --> 00:01:46.846 A:middle
And especially, how the scene
graph look like in Scene Kit.

00:01:47.086 --> 00:01:49.116 A:middle
Then I will show the
basics and usual steps

00:01:49.116 --> 00:01:51.986 A:middle
to start an application
that uses Scene Kit.

00:01:52.556 --> 00:01:55.256 A:middle
Then a section on
the different ways

00:01:55.256 --> 00:01:57.246 A:middle
to extend Scene Kit with OpenGL.

00:01:58.336 --> 00:02:00.386 A:middle
Then we will present some

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.386 --> 00:02:02.566 A:middle
of the new features
we have in Mavericks.

00:02:03.506 --> 00:02:06.586 A:middle
And we will conclude
with some techniques

00:02:06.586 --> 00:02:08.485 A:middle
and notes about performance.

00:02:09.136 --> 00:02:10.816 A:middle
So let's start with
the scene graph.

00:02:11.986 --> 00:02:14.896 A:middle
The scene graph approach
is the main difference

00:02:14.896 --> 00:02:16.386 A:middle
with an API like OpenGL.

00:02:17.866 --> 00:02:21.216 A:middle
With OpenGL, you call
some draw commands

00:02:21.316 --> 00:02:25.196 A:middle
and set some draw states for
every object you want to render,

00:02:25.566 --> 00:02:28.776 A:middle
one by one and you redo
this at every frame.

00:02:30.286 --> 00:02:34.406 A:middle
Scene Kit is a more declarative
API where you set up a scene,

00:02:35.036 --> 00:02:36.676 A:middle
set up some properties
of your scene

00:02:36.956 --> 00:02:39.546 A:middle
and then you let the framework
manage the rendering for you.

00:02:39.946 --> 00:02:43.136 A:middle
So the top level object

00:02:43.276 --> 00:02:45.646 A:middle
of the scene graph is
the scene represented

00:02:45.646 --> 00:02:47.396 A:middle
by the SCNScene class

00:02:48.616 --> 00:02:51.946 A:middle
and basically a scene
has a root node.

00:02:52.066 --> 00:02:55.826 A:middle
A node represents a
location in 3D space.

00:02:56.566 --> 00:02:59.536 A:middle
A node may have some child
nodes to build a hierarchy

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.126 --> 00:03:02.166 A:middle
and each node is relative
to its parent node.

00:03:02.166 --> 00:03:05.576 A:middle
So it's like layers that are
relative to their super layers

00:03:05.946 --> 00:03:07.926 A:middle
or views that are relative
to their super views.

00:03:09.826 --> 00:03:13.176 A:middle
Then a node by itself
doesn't represent anything.

00:03:13.516 --> 00:03:15.566 A:middle
I mean nothing that can
be rendered to the screen.

00:03:15.566 --> 00:03:20.036 A:middle
It's just a position on which
you can attach some attributes.

00:03:20.646 --> 00:03:23.576 A:middle
So attributes you can
attach are the following.

00:03:23.696 --> 00:03:26.556 A:middle
You can attach a geometry,
a camera, and a light.

00:03:28.096 --> 00:03:30.616 A:middle
You can share attributes
to multiple nodes.

00:03:30.956 --> 00:03:33.686 A:middle
The typical usage
is to, for example,

00:03:33.686 --> 00:03:37.106 A:middle
if you want to show the same
object to multiple locations

00:03:37.106 --> 00:03:39.986 A:middle
in your scene, you simply
attach the same geometry

00:03:39.986 --> 00:03:41.106 A:middle
to multiple nodes.

00:03:41.186 --> 00:03:45.486 A:middle
So let's get a quick
overview of these attributes.

00:03:46.456 --> 00:03:47.356 A:middle
The geometry first.

00:03:48.726 --> 00:03:50.976 A:middle
A geometry represents a surface

00:03:50.976 --> 00:03:52.326 A:middle
that can be rendered
to the screen.

00:03:52.966 --> 00:03:56.616 A:middle
It is made of triangles
that are connected together

00:03:56.616 --> 00:03:58.506 A:middle
to build the surface.

00:03:59.146 --> 00:04:00.866 A:middle
The triangles are
connected to vertices

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:01.576 --> 00:04:04.046 A:middle
and the vertices
may have a normal

00:04:04.276 --> 00:04:06.786 A:middle
that indicates the
direction of the surface.

00:04:07.216 --> 00:04:09.926 A:middle
And Scene Kit uses it to compute
the lighting for example.

00:04:10.526 --> 00:04:14.606 A:middle
Then the geometry may have
some texture coordinates

00:04:14.766 --> 00:04:18.386 A:middle
that control how images are
mapped onto the surface.

00:04:19.375 --> 00:04:22.736 A:middle
And to finish a geometry
has some materials

00:04:22.736 --> 00:04:25.126 A:middle
that control the final
appearance of your surface.

00:04:25.386 --> 00:04:27.346 A:middle
Including the colors
and textures.

00:04:27.346 --> 00:04:30.856 A:middle
Note that a geometry has
an array of materials

00:04:31.096 --> 00:04:35.066 A:middle
because sometimes, the geometry
is split into several elements.

00:04:35.276 --> 00:04:37.686 A:middle
For example, this teapot
here has four elements

00:04:37.686 --> 00:04:40.096 A:middle
and you can have a different
material for each element.

00:04:41.496 --> 00:04:43.766 A:middle
The second attribute are lights.

00:04:44.966 --> 00:04:48.096 A:middle
A SCNLight represents a light
source in your 3D scene.

00:04:49.066 --> 00:04:51.166 A:middle
There are different types
of lights to illuminate

00:04:51.166 --> 00:04:54.206 A:middle
from a point, in the
direction, with a cone,

00:04:54.806 --> 00:04:57.186 A:middle
or equally in every direction
with the ambient light.

00:04:57.946 --> 00:05:02.566 A:middle
To add a light to your scene,
simply set a light instance

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:02.766 --> 00:05:05.246 A:middle
to your node with the
light property of the node.

00:05:06.426 --> 00:05:09.666 A:middle
And then this light will
illuminate the entire scene

00:05:09.666 --> 00:05:14.976 A:middle
from this node and not only
the node it is attached to.

00:05:15.226 --> 00:05:16.806 A:middle
The last attributes are cameras.

00:05:18.346 --> 00:05:21.116 A:middle
A node with a camera
represents a point of view

00:05:21.266 --> 00:05:23.156 A:middle
that can be used
to render a scene.

00:05:23.996 --> 00:05:28.606 A:middle
So when you set up a scene, you
place your objects in 3D space

00:05:28.706 --> 00:05:30.146 A:middle
with the X, Y, Z coordinates.

00:05:30.536 --> 00:05:32.686 A:middle
And then you are free
to render that scene

00:05:32.686 --> 00:05:33.776 A:middle
from any point of view.

00:05:34.406 --> 00:05:38.386 A:middle
So to do this, you add
some nodes to your scene

00:05:38.506 --> 00:05:40.376 A:middle
and you attach a camera to it.

00:05:40.836 --> 00:05:44.046 A:middle
Then to select a point of view,
simply set one of these nodes

00:05:44.226 --> 00:05:46.196 A:middle
as the point of view
of your view

00:05:46.196 --> 00:05:47.496 A:middle
as the pointOfView property.

00:05:48.246 --> 00:05:50.986 A:middle
And for example, that's what I
do here, I added multiple nodes

00:05:50.986 --> 00:05:53.566 A:middle
to this scene and I can switch
to another point of view

00:05:53.566 --> 00:05:56.756 A:middle
like this one, or
yet another one.

00:05:57.636 --> 00:06:00.826 A:middle
Then a camera has
several parameters

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:00.826 --> 00:06:03.986 A:middle
to control how a scene is
projected to the screen.

00:06:04.356 --> 00:06:06.586 A:middle
For example, the field of
view, if you want to increase

00:06:06.586 --> 00:06:07.896 A:middle
or decrease a perspective.

00:06:08.346 --> 00:06:10.536 A:middle
So for example, here is
a narrow field of view,

00:06:11.006 --> 00:06:14.656 A:middle
so almost no perspective and
here is a wide field of view

00:06:14.656 --> 00:06:15.756 A:middle
with a strong perspective.

00:06:16.366 --> 00:06:22.896 A:middle
So to sum up, a scene is made of
nodes that can have child nodes.

00:06:24.496 --> 00:06:26.856 A:middle
Then these nodes just
represent locations

00:06:26.856 --> 00:06:28.696 A:middle
and you can attach
attributes to them.

00:06:28.696 --> 00:06:30.016 A:middle
For example, a geometry,

00:06:30.016 --> 00:06:31.866 A:middle
if I want to render
something to the screen.

00:06:32.876 --> 00:06:35.516 A:middle
Then I can configure the
materials of my geometries

00:06:35.516 --> 00:06:36.786 A:middle
to customize the appearance.

00:06:38.056 --> 00:06:39.906 A:middle
And I can attach
other attributes

00:06:39.906 --> 00:06:42.376 A:middle
like for example here, I
attach a light to the sun

00:06:42.896 --> 00:06:46.806 A:middle
to illuminate from the sun.

00:06:47.036 --> 00:06:48.976 A:middle
So you know-- with this
you know everything

00:06:48.976 --> 00:06:50.306 A:middle
about the models of Scene Kit.

00:06:51.296 --> 00:06:56.286 A:middle
Now, let's see how to start
an application that uses it.

00:06:56.286 --> 00:06:59.746 A:middle
So the first thing you will need
to do is to render somewhere.

00:06:59.836 --> 00:07:05.076 A:middle
And for this, Scene Kit provides
a SCNView if you want to render

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:05.076 --> 00:07:08.116 A:middle
into a view, a SCNLayer if you
want to render into a layer

00:07:08.306 --> 00:07:10.436 A:middle
and a SCNRenderer if
you want to render

00:07:10.606 --> 00:07:12.576 A:middle
into an offscreen framebuffer.

00:07:13.686 --> 00:07:17.696 A:middle
So let's consider the simplest
and fastest which is a SCNView.

00:07:18.276 --> 00:07:22.746 A:middle
To create a SCNView, simply
drag and drop the SCNView object

00:07:22.936 --> 00:07:25.286 A:middle
from the library of
Interface Builder.

00:07:26.276 --> 00:07:28.536 A:middle
Drag this to your user
interface and you are done.

00:07:30.406 --> 00:07:31.716 A:middle
Once you have your view ready,

00:07:32.276 --> 00:07:33.686 A:middle
you will need a scene
to put into.

00:07:34.986 --> 00:07:37.086 A:middle
And to create a scene,
you have two options.

00:07:38.156 --> 00:07:40.746 A:middle
You can create everything
programmatically.

00:07:41.346 --> 00:07:42.846 A:middle
Or you can load a
scene from a file.

00:07:43.856 --> 00:07:45.336 A:middle
So let's see the first option.

00:07:45.706 --> 00:07:48.546 A:middle
So to create a scene
programmatically,

00:07:48.766 --> 00:07:55.086 A:middle
Scene Kit provides a set of
built-in primitives like a cube,

00:07:55.086 --> 00:07:58.636 A:middle
a plain sphere, et cetera that
you can create and configure

00:07:58.896 --> 00:08:03.156 A:middle
with simple parameters
like width, length, height,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:03.476 --> 00:08:06.346 A:middle
corner radius, segment
count, et cetera.

00:08:08.176 --> 00:08:12.766 A:middle
Scene Kit also supports 3D
text with the SCNText class.

00:08:14.336 --> 00:08:17.186 A:middle
And this supports a text
that use an extrusion,

00:08:17.186 --> 00:08:19.956 A:middle
multiple materials, a chamfer,

00:08:20.876 --> 00:08:23.856 A:middle
and new in Mavericks even the
curve you want for the chamfer

00:08:23.856 --> 00:08:27.686 A:middle
if you want to create
really fancy text.

00:08:27.736 --> 00:08:30.076 A:middle
And regarding the layout,

00:08:30.076 --> 00:08:32.936 A:middle
it supports everything
Core Text supports.

00:08:33.056 --> 00:08:36.866 A:middle
So all the fonts, kerning,
ligature, and things like that.

00:08:37.916 --> 00:08:43.066 A:middle
Then, new in Mavericks,
we introduce SCNShape.

00:08:44.126 --> 00:08:48.486 A:middle
A SCNShape lets you create a
3D object from a Bezier path.

00:08:48.786 --> 00:08:53.146 A:middle
So Scene Kit takes your
NSBezierPath and it extrudes it

00:08:53.146 --> 00:08:54.586 A:middle
to create a 3D object.

00:08:55.546 --> 00:08:58.606 A:middle
So to do this, instantiate
to SCNShape object

00:08:58.606 --> 00:09:01.636 A:middle
and give your Bezier path
and an extrusion depth.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:02.426 --> 00:09:06.146 A:middle
Optionally, you can even provide
the curve you want for a chamfer

00:09:06.146 --> 00:09:07.126 A:middle
if you want a chamfer.

00:09:08.356 --> 00:09:08.896 A:middle
And that's it.

00:09:09.576 --> 00:09:13.806 A:middle
So for example, here is a Bezier
path that represents the map

00:09:13.806 --> 00:09:15.476 A:middle
of the second floor
of the Moscone.

00:09:16.196 --> 00:09:20.116 A:middle
I can use SCNShape to
create a 3D version of it.

00:09:20.486 --> 00:09:22.776 A:middle
And same thing for the
walls here, they are created

00:09:22.776 --> 00:09:25.836 A:middle
from another Bezier
path with SCNShape.

00:09:25.836 --> 00:09:31.316 A:middle
The last way to create things
programmatically is using

00:09:31.316 --> 00:09:32.366 A:middle
custom geometry.

00:09:32.726 --> 00:09:37.526 A:middle
So using the SCNGeometry class,
you can provide the vertex,

00:09:37.526 --> 00:09:39.466 A:middle
normals and texture
coordinates you want

00:09:39.806 --> 00:09:42.416 A:middle
to create your pure
custom geometry.

00:09:44.256 --> 00:09:46.916 A:middle
And so you have the full
control and you will need this,

00:09:46.916 --> 00:09:48.096 A:middle
for example, if you want

00:09:48.096 --> 00:09:50.866 A:middle
to represent some mathematical
functions or any kind

00:09:50.866 --> 00:09:52.636 A:middle
of data visualization
for example.

00:09:53.866 --> 00:09:56.366 A:middle
So that's for creating
scenes programmatically.

00:09:56.906 --> 00:10:00.576 A:middle
Now, the other way is to
load a scene from a file.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:01.166 --> 00:10:03.276 A:middle
And loading a scene
from a file is essential

00:10:03.276 --> 00:10:05.826 A:middle
because complex scenes
are really hard

00:10:05.826 --> 00:10:06.906 A:middle
to create programmatically.

00:10:07.876 --> 00:10:12.256 A:middle
Complex geometries and complex
animations are usually created

00:10:12.256 --> 00:10:14.006 A:middle
using very specialized tools.

00:10:14.536 --> 00:10:19.656 A:middle
Scene Kit allows you to load
3D scenes from DAE documents.

00:10:20.516 --> 00:10:24.756 A:middle
A DAE document is an XML
file, XML-based format,

00:10:26.156 --> 00:10:30.336 A:middle
that is supported by all the
major 3D tools like 3ds Max,

00:10:30.336 --> 00:10:32.526 A:middle
Maya, Modo, Cinema
4D, et cetera.

00:10:33.956 --> 00:10:37.136 A:middle
A DAE document can describe a
lot of things in a 3D scene.

00:10:37.576 --> 00:10:40.176 A:middle
Obviously, you can describe
the geometry information

00:10:41.026 --> 00:10:44.336 A:middle
but also some animations,
reference to images,

00:10:44.716 --> 00:10:47.196 A:middle
all the light settings, the
different points of view

00:10:47.736 --> 00:10:49.856 A:middle
and even some more advanced
features like skinning

00:10:49.856 --> 00:10:51.936 A:middle
and morphing, and I will
talk about that later.

00:10:52.446 --> 00:10:57.826 A:middle
So DAE documents are
well supported on OS X.

00:10:58.816 --> 00:11:02.196 A:middle
You can open them in
Preview or with Quick Look

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:02.196 --> 00:11:03.156 A:middle
to get a preview of it.

00:11:03.236 --> 00:11:05.266 A:middle
We can directly see it
in Finder for example.

00:11:05.746 --> 00:11:10.136 A:middle
And you can do even
more with Xcode.

00:11:10.236 --> 00:11:13.176 A:middle
Indeed, Xcode has a
Scene Kit editor built-in

00:11:13.786 --> 00:11:16.876 A:middle
and this editor will let
you preview a 3D file,

00:11:17.686 --> 00:11:21.226 A:middle
play the animations, inspect
the scene graph, rename nodes,

00:11:21.746 --> 00:11:23.076 A:middle
duplicate nodes if you want.

00:11:23.076 --> 00:11:25.346 A:middle
Edit the materials,
configure the lighting,

00:11:25.476 --> 00:11:26.746 A:middle
change the point
of view, et cetera.

00:11:28.396 --> 00:11:32.456 A:middle
Once you are happy with your
scene, it's easy to load it

00:11:32.456 --> 00:11:33.396 A:middle
into your application.

00:11:34.506 --> 00:11:36.946 A:middle
Usually the first
step is to get the URL

00:11:36.946 --> 00:11:40.676 A:middle
to your document using NSBundle
and once you get the URL,

00:11:40.676 --> 00:11:44.776 A:middle
simply load that scene with
sceneWithURL:options:error:

00:11:44.876 --> 00:11:48.696 A:middle
and you will get
your scene created.

00:11:48.696 --> 00:11:51.046 A:middle
Once you have your scene,
it's easy also to render it.

00:11:51.946 --> 00:11:55.466 A:middle
Simply assign this scene to your
view using the scene property.

00:11:56.306 --> 00:11:59.096 A:middle
Same thing if you use a
SCNLayer or SCNRenderer.

00:11:59.166 --> 00:12:02.566 A:middle
And then, any modification
you do

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:02.566 --> 00:12:05.696 A:middle
on the scene graph automatically
reflects into the view.

00:12:06.346 --> 00:12:10.276 A:middle
There is no need to call some
update or setNeedsDisplay:

00:12:10.276 --> 00:12:13.656 A:middle
methods it's all automatic.

00:12:14.036 --> 00:12:16.396 A:middle
So let's see what kind of
modification you can do.

00:12:16.446 --> 00:12:19.456 A:middle
So the scene graph API
will let you do everything.

00:12:19.506 --> 00:12:22.286 A:middle
You can of course move, scale,
and rotate your objects,

00:12:22.526 --> 00:12:26.386 A:middle
add some animations, change the
colors and images dynamically,

00:12:26.386 --> 00:12:30.046 A:middle
change the lighting,
duplicate objects, et cetera.

00:12:30.666 --> 00:12:32.366 A:middle
And all of these are simply done

00:12:32.366 --> 00:12:35.066 A:middle
by modifying Objective-C
properties

00:12:35.066 --> 00:12:36.546 A:middle
of the objects of
the scene graph.

00:12:37.676 --> 00:12:41.316 A:middle
So the usual first step is
to retrieve the node you want

00:12:41.316 --> 00:12:44.426 A:middle
to manipulate with its
name and this is done

00:12:44.426 --> 00:12:46.376 A:middle
with
childNodeWithName:recursively:.

00:12:47.366 --> 00:12:49.876 A:middle
You can do it for
instance starting

00:12:49.876 --> 00:12:51.686 A:middle
from the root node
since it's recursive.

00:12:52.556 --> 00:12:54.536 A:middle
And once you get the node
you are interested in,

00:12:55.476 --> 00:13:00.646 A:middle
you can modify everything with
simple Objective-C properties.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:01.556 --> 00:13:03.526 A:middle
For example, if you want
to move it to the origin,

00:13:04.036 --> 00:13:06.316 A:middle
set this position to
the vector (0,0,0).

00:13:06.896 --> 00:13:09.676 A:middle
And from the node you have
access to the attributes

00:13:09.676 --> 00:13:10.946 A:middle
like geometry, camera and light.

00:13:11.216 --> 00:13:13.666 A:middle
And from the geometry, you also
have access to the materials.

00:13:14.206 --> 00:13:18.836 A:middle
But you can do more than
simply modifying positions,

00:13:18.836 --> 00:13:22.186 A:middle
you can also animate
everything in your scene.

00:13:22.376 --> 00:13:25.436 A:middle
And for animations, Scene Kit
includes an animation engine

00:13:26.006 --> 00:13:29.596 A:middle
and regarding the API, it uses
the same programming model

00:13:29.596 --> 00:13:33.726 A:middle
as Core Animation with implicit
and explicit animations.

00:13:34.336 --> 00:13:35.946 A:middle
And actually, all the properties

00:13:35.946 --> 00:13:39.176 A:middle
of the scene graph are
animatable implicitly

00:13:39.176 --> 00:13:39.926 A:middle
and explicitly.

00:13:40.916 --> 00:13:43.676 A:middle
So implicit animations
are the animations

00:13:43.676 --> 00:13:45.596 A:middle
that are automatically generated

00:13:45.596 --> 00:13:48.126 A:middle
when you modify the
properties of the scene.

00:13:48.856 --> 00:13:50.756 A:middle
It works like Core Animation.

00:13:51.186 --> 00:13:52.386 A:middle
You start a transaction

00:13:52.386 --> 00:13:56.706 A:middle
and configure the animation
duration and timing function.

00:13:56.706 --> 00:14:00.766 A:middle
Note that here, you have
to use SCNTransaction

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:00.766 --> 00:14:02.156 A:middle
and not CATransaction.

00:14:02.836 --> 00:14:04.606 A:middle
And then inside the transaction,

00:14:04.606 --> 00:14:06.436 A:middle
you can modify whatever
property you like.

00:14:07.306 --> 00:14:10.046 A:middle
For example here, I
modify the opacity

00:14:10.046 --> 00:14:11.176 A:middle
and the rotation of my node.

00:14:11.176 --> 00:14:13.576 A:middle
And when you are done,
commit the transaction

00:14:13.796 --> 00:14:15.556 A:middle
and the animation
automatically--

00:14:15.926 --> 00:14:16.966 A:middle
is automatically triggered.

00:14:17.636 --> 00:14:20.726 A:middle
Then explicit animations,

00:14:20.726 --> 00:14:23.066 A:middle
this time we don't
introduce any new API.

00:14:23.266 --> 00:14:25.616 A:middle
We simply use the objects
from Core Animation.

00:14:26.206 --> 00:14:28.346 A:middle
So we support CABasicAnimation,

00:14:28.466 --> 00:14:31.726 A:middle
CAKeyframeAnimation,
and CAAnimationGroup.

00:14:32.826 --> 00:14:34.606 A:middle
For example, here
I create a simple--

00:14:34.606 --> 00:14:37.646 A:middle
a basic animation that targets
the rotation of my node.

00:14:38.306 --> 00:14:40.966 A:middle
Then I configure its
duration and destination value

00:14:41.756 --> 00:14:43.406 A:middle
and set it to repeat forever.

00:14:44.256 --> 00:14:47.826 A:middle
Finally, I add my animation
to my node with the same API

00:14:47.826 --> 00:14:50.626 A:middle
as Core Animation which
is addAnimation:forKey:.

00:14:51.756 --> 00:14:56.666 A:middle
And this makes my node to
animate forever like this.

00:14:56.866 --> 00:14:59.156 A:middle
OK. But you can do
more than just moving

00:14:59.156 --> 00:15:00.566 A:middle
and rotating around your nodes.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:01.046 --> 00:15:04.626 A:middle
And the materials in particular
are something very powerful.

00:15:05.766 --> 00:15:09.146 A:middle
A material controls the
appearance of the surface.

00:15:09.766 --> 00:15:12.626 A:middle
It's represented by
the SCNMaterial class.

00:15:12.716 --> 00:15:15.856 A:middle
And the material is made
of material properties

00:15:16.246 --> 00:15:18.806 A:middle
that can contain a
color or an image.

00:15:18.806 --> 00:15:21.266 A:middle
So let me explain this.

00:15:21.896 --> 00:15:25.656 A:middle
A material is made of the
eight following properties.

00:15:26.286 --> 00:15:28.926 A:middle
And each of them has
a very specific role

00:15:29.326 --> 00:15:31.466 A:middle
in the final appearance
of your material.

00:15:32.316 --> 00:15:36.016 A:middle
The diffuse is the base
color of your material.

00:15:36.216 --> 00:15:39.176 A:middle
It's what the material reflects
when it is hit by some light.

00:15:39.966 --> 00:15:42.686 A:middle
It can be set to a color like
here, if I set to blue color

00:15:43.166 --> 00:15:46.326 A:middle
or it can be set to an image
like this earth texture.

00:15:46.406 --> 00:15:50.776 A:middle
Then the ambient property is
what the material reflects

00:15:50.776 --> 00:15:52.396 A:middle
when it is hit by
the ambient light.

00:15:52.786 --> 00:15:56.666 A:middle
For example here, it lets me
make the parts of the sphere

00:15:56.756 --> 00:15:59.086 A:middle
that are black because
they don't receive light

00:15:59.466 --> 00:16:01.696 A:middle
to show the earth
texture a little bit,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:02.036 --> 00:16:03.536 A:middle
thanks to the ambient lighting.

00:16:05.176 --> 00:16:07.916 A:middle
Then the specular and shininess
control the specular highlight

00:16:08.156 --> 00:16:12.236 A:middle
and can be set to a color like
this or an image like here

00:16:12.976 --> 00:16:16.046 A:middle
if I want some part of
my materials to be shiny

00:16:16.696 --> 00:16:19.776 A:middle
and some other to be not shiny.

00:16:19.936 --> 00:16:23.226 A:middle
Then the normal property
lets me make--

00:16:23.436 --> 00:16:26.026 A:middle
set a normal map which
is a popular technique

00:16:26.296 --> 00:16:29.126 A:middle
to add some details to a surface
without adding more polygons.

00:16:29.906 --> 00:16:33.416 A:middle
For example here, I use one
to add some elevation to my--

00:16:33.416 --> 00:16:36.676 A:middle
to the mountains, to add
some bumps to the sphere.

00:16:38.176 --> 00:16:42.076 A:middle
Then the reflective is an image
or a cube map that is used

00:16:42.076 --> 00:16:43.606 A:middle
as a reflective environment.

00:16:43.606 --> 00:16:46.646 A:middle
For example here, I use a
simple image like this one

00:16:47.256 --> 00:16:49.286 A:middle
to add some sort of
glossy reflection.

00:16:49.336 --> 00:16:52.846 A:middle
This image is reflected
by the sphere and note

00:16:52.846 --> 00:16:56.656 A:middle
that it combines well with
the normal map as well.

00:16:57.186 --> 00:17:03.356 A:middle
Then the emission is a color
or an image that is emissive.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:04.006 --> 00:17:05.476 A:middle
That means that it doesn't need

00:17:05.476 --> 00:17:07.205 A:middle
to receive any light
to be visible.

00:17:07.685 --> 00:17:09.066 A:middle
For example here, I set an image

00:17:09.066 --> 00:17:11.915 A:middle
that represents the lights
emitted by big cities.

00:17:12.425 --> 00:17:16.266 A:middle
So it's not very visible here
but if I switch off the lights,

00:17:16.976 --> 00:17:19.636 A:middle
you can see that the
other properties go away

00:17:19.736 --> 00:17:22.146 A:middle
and the emission
is still visible.

00:17:23.906 --> 00:17:25.925 A:middle
Now, let's switch
back the lights on.

00:17:26.766 --> 00:17:28.156 A:middle
Let's say, I want now

00:17:28.156 --> 00:17:30.306 A:middle
to add some clouds
over the earth model.

00:17:30.306 --> 00:17:32.786 A:middle
I can do it by adding a
sphere over the earth.

00:17:33.596 --> 00:17:36.596 A:middle
And then, use the transparent
property and set an image

00:17:37.266 --> 00:17:40.976 A:middle
that will control the
transparent areas of my surface.

00:17:41.376 --> 00:17:44.746 A:middle
You can use an image with colors
and gray scales if you want,

00:17:44.746 --> 00:17:46.476 A:middle
it's not just a binary image.

00:17:47.666 --> 00:17:52.136 A:middle
And last, the multiply
property is a color or an image

00:17:52.136 --> 00:17:54.736 A:middle
that is multiplied
to the material color

00:17:54.736 --> 00:17:56.146 A:middle
to produce the final fragment.

00:17:56.736 --> 00:17:58.516 A:middle
It is usually used
for shadow maps

00:17:58.516 --> 00:18:01.396 A:middle
and we'll talk about it later.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:01.396 --> 00:18:04.736 A:middle
But you can also use it
to dim or tint an object.

00:18:04.736 --> 00:18:07.476 A:middle
For example, if I set a
yellow color, it is multiplied

00:18:07.506 --> 00:18:10.136 A:middle
with my material to
add a yellow tint.

00:18:10.806 --> 00:18:12.936 A:middle
And once your material
is configured,

00:18:13.736 --> 00:18:17.176 A:middle
it automatically adapts
depending on the light settings.

00:18:17.506 --> 00:18:19.406 A:middle
So if I switch off
the light again,

00:18:20.456 --> 00:18:23.186 A:middle
you can see that
the diffuse, ambient

00:18:23.186 --> 00:18:26.036 A:middle
and specular are
not here anymore

00:18:26.036 --> 00:18:27.276 A:middle
because there is no
light to reflect.

00:18:27.916 --> 00:18:29.946 A:middle
But the emission is still
emissive, this time,

00:18:29.946 --> 00:18:31.936 A:middle
it is tinted by the
multiply property.

00:18:32.456 --> 00:18:35.486 A:middle
And the clouds are still there
but this time they render black

00:18:35.986 --> 00:18:40.036 A:middle
because there is no
more light to reflect.

00:18:40.036 --> 00:18:43.686 A:middle
Regarding the API,
it's straightforward.

00:18:43.686 --> 00:18:46.436 A:middle
You can have-- you can access
the geometry from your node

00:18:46.956 --> 00:18:48.176 A:middle
with the geometry property.

00:18:48.866 --> 00:18:54.046 A:middle
To create a new material, simply
instantiate a SCNMaterial object

00:18:54.706 --> 00:18:57.856 A:middle
and set its diffuse, for
example here to a red color.

00:18:58.596 --> 00:19:00.376 A:middle
And finally, you can
assign your material

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.376 --> 00:19:03.616 A:middle
to your geometry to
make it look red.

00:19:04.336 --> 00:19:07.406 A:middle
As I said, every material
property can be set

00:19:07.406 --> 00:19:08.966 A:middle
to a color or an image.

00:19:09.066 --> 00:19:11.736 A:middle
But it can also actually
be set to a layer tree

00:19:12.576 --> 00:19:14.016 A:middle
which is very handy if you want

00:19:14.016 --> 00:19:18.456 A:middle
to have some animated content
mapped onto your 3D objects.

00:19:18.566 --> 00:19:21.746 A:middle
For example here, I
set a movie layer--

00:19:21.746 --> 00:19:31.446 A:middle
I use a movie layer to play a
movie mapped onto my 3D objects.

00:19:31.446 --> 00:19:33.886 A:middle
[laughter] And also, once
we have set your layer tree,

00:19:33.886 --> 00:19:35.866 A:middle
you can add child
layers and everything.

00:19:35.906 --> 00:19:38.096 A:middle
As soon as you modify any layer,

00:19:38.096 --> 00:19:40.546 A:middle
Scene Kit will automatically
redraw the scene.

00:19:40.546 --> 00:19:42.126 A:middle
You don't have to, again,

00:19:42.126 --> 00:19:43.846 A:middle
to call some setNeedsDisplay:
yourself.

00:19:44.816 --> 00:19:47.376 A:middle
So we can do already
a lot of things

00:19:47.376 --> 00:19:50.076 A:middle
with Scene Kit's
high level APIs.

00:19:50.446 --> 00:19:51.906 A:middle
But sometimes, it's--

00:19:51.996 --> 00:19:53.786 A:middle
if you want to do some
really specific task

00:19:53.786 --> 00:19:56.106 A:middle
or some more specific rendering,
it can still be useful

00:19:56.106 --> 00:19:59.306 A:middle
to have access to the lower
level which is OpenGL.

00:19:59.406 --> 00:20:03.046 A:middle
And Scene Kit provides the
necessary hooks for you

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:03.046 --> 00:20:06.046 A:middle
to plug your OpenGL
code to Scene Kit.

00:20:07.076 --> 00:20:09.936 A:middle
So Scene Kit allows you to plug
your code at several levels,

00:20:09.986 --> 00:20:13.276 A:middle
which are the scene level, the
node level, and material level.

00:20:13.506 --> 00:20:14.966 A:middle
And new in Mavericks,

00:20:15.166 --> 00:20:17.576 A:middle
we introduce the concept
of shader modifiers.

00:20:18.536 --> 00:20:21.196 A:middle
Let's start with the
first one, the scene.

00:20:21.196 --> 00:20:25.806 A:middle
So we can set a delegate
to the SCNView, SCNLayer,

00:20:25.806 --> 00:20:31.006 A:middle
and SCNRenderer, sorry, and your
delegate will be invoked before

00:20:31.216 --> 00:20:32.686 A:middle
and after the scene rendered.

00:20:33.946 --> 00:20:36.056 A:middle
And so, you can at
this-- in your delegate,

00:20:36.056 --> 00:20:38.576 A:middle
you can do whatever
OpenGL code, for example,

00:20:38.576 --> 00:20:41.256 A:middle
to do some procedural
background with OpenGL,

00:20:41.256 --> 00:20:43.836 A:middle
or any kind of overlay
with OpenGL.

00:20:44.156 --> 00:20:46.586 A:middle
And here, you are totally
free of constraints,

00:20:46.586 --> 00:20:48.186 A:middle
you can do whatever OpenGL code.

00:20:48.846 --> 00:20:51.016 A:middle
The context will
be already ready

00:20:51.016 --> 00:20:52.766 A:middle
and the viewport will
be already set for you.

00:20:52.766 --> 00:20:56.486 A:middle
Then at the node level,

00:20:56.646 --> 00:20:59.336 A:middle
this time you attach
a delegate to a node.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.116 --> 00:21:02.626 A:middle
And Scene Kit will
invoke your code

00:21:02.626 --> 00:21:04.636 A:middle
when this node needs
to be rendered.

00:21:05.006 --> 00:21:08.196 A:middle
Scene Kit provides the necessary
information for you to render

00:21:08.196 --> 00:21:09.856 A:middle
at the correct location
in the scene.

00:21:10.536 --> 00:21:14.476 A:middle
For example, here we added a
node on top of the hole object

00:21:14.576 --> 00:21:17.456 A:middle
and set a delegate
that renders some kind

00:21:17.456 --> 00:21:20.536 A:middle
of custom particular
system with OpenGL.

00:21:21.576 --> 00:21:24.496 A:middle
And note that when you
set a delegate to a node,

00:21:25.046 --> 00:21:27.216 A:middle
it replaces Scene
Kit's rendering.

00:21:28.086 --> 00:21:32.026 A:middle
So the typical usage
is to set a delegate

00:21:32.026 --> 00:21:36.436 A:middle
to an empty node where-- that
is placed at the location

00:21:36.436 --> 00:21:38.756 A:middle
where you want your custom
effect to be rendered.

00:21:38.756 --> 00:21:43.496 A:middle
Another example of a particle
system, this time attached

00:21:43.496 --> 00:21:46.196 A:middle
to a child node of the
sword object and so,

00:21:46.196 --> 00:21:49.276 A:middle
you can see that
when the sword moves,

00:21:49.406 --> 00:21:52.546 A:middle
the emitter of the particule
system moves accordingly.

00:21:53.066 --> 00:21:58.426 A:middle
Next hook, at the
material level.

00:21:58.906 --> 00:22:02.256 A:middle
This time, you can provide
your custom GLSL program

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:02.346 --> 00:22:03.876 A:middle
to replace Scene Kit's shaders.

00:22:04.806 --> 00:22:08.956 A:middle
Scene Kit provides the
necessary geometry attributes--

00:22:09.356 --> 00:22:12.296 A:middle
sorry, the necessary transform
uniforms and geometry attributes

00:22:12.496 --> 00:22:15.596 A:middle
that you will plug to your
custom uniform and attributes

00:22:15.596 --> 00:22:16.646 A:middle
in your custom shader.

00:22:17.696 --> 00:22:20.906 A:middle
For example here, we
set a custom program

00:22:20.906 --> 00:22:23.896 A:middle
with a custom vertex shader
that does the morphing effect,

00:22:25.316 --> 00:22:27.936 A:middle
and a custom fragment shader
that does the smoke effect.

00:22:28.996 --> 00:22:32.976 A:middle
Note that in Mavericks, we
added some new APIs for you

00:22:33.046 --> 00:22:36.126 A:middle
to bind your custom uniforms
and custom attributes

00:22:36.426 --> 00:22:38.736 A:middle
in a more efficient
manner basically

00:22:38.736 --> 00:22:41.186 A:middle
by using blocks instead
of delegate methods.

00:22:42.756 --> 00:22:45.926 A:middle
So with a customer
material, you can--

00:22:45.926 --> 00:22:48.616 A:middle
we have a very fine
control on the rendering

00:22:48.616 --> 00:22:49.886 A:middle
because it's your
custom shaders.

00:22:50.486 --> 00:22:52.906 A:middle
However, the main
inconvenient is that you need

00:22:52.906 --> 00:22:54.196 A:middle
to reimplement everything

00:22:54.196 --> 00:22:58.086 A:middle
in your GLSL program including
projecting the vertex,

00:22:59.106 --> 00:23:01.616 A:middle
computing the lighting,
and managing the texture.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:02.306 --> 00:23:05.386 A:middle
So that's for these reasons
that we introduce the concept

00:23:05.386 --> 00:23:07.496 A:middle
of shader modifiers
in Mavericks.

00:23:08.736 --> 00:23:14.486 A:middle
And the idea here is to
let you inject some snippet

00:23:14.486 --> 00:23:17.656 A:middle
of GLSL directly inside
Scene Kit's shaders.

00:23:18.206 --> 00:23:21.436 A:middle
And you do it at some very
specific stages and it combines

00:23:21.436 --> 00:23:22.426 A:middle
with Scene Kit's rendering.

00:23:23.126 --> 00:23:26.246 A:middle
So we call these
stages entry points

00:23:26.246 --> 00:23:28.206 A:middle
and the API looks like this.

00:23:29.586 --> 00:23:35.046 A:middle
Basically, you set a dictionary
to the shaderModifiers property

00:23:35.256 --> 00:23:37.706 A:middle
of your materials and the keys

00:23:37.706 --> 00:23:39.956 A:middle
of the dictionary
are the entry points

00:23:40.576 --> 00:23:42.506 A:middle
and the values are
your GLSL code.

00:23:43.536 --> 00:23:45.566 A:middle
Let's take a very
simple example.

00:23:45.976 --> 00:23:50.396 A:middle
At every entry points, you
have access to some data--

00:23:50.396 --> 00:23:53.996 A:middle
to some GLSL structures
that you can read or write

00:23:54.156 --> 00:23:55.366 A:middle
to modify the rendering.

00:23:55.806 --> 00:23:59.846 A:middle
For example here, you can
read the current output color

00:23:59.846 --> 00:24:01.976 A:middle
and modify it the way
you want with GLSL.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:01.976 --> 00:24:05.036 A:middle
For example here, to do a
simple invert for example.

00:24:05.876 --> 00:24:09.626 A:middle
So Scene Kits provides four
entry points which are geometry,

00:24:09.626 --> 00:24:11.036 A:middle
surface, lighting, and fragment.

00:24:12.826 --> 00:24:17.326 A:middle
And the geometry entry point
lets you modify all the geometry

00:24:17.326 --> 00:24:20.976 A:middle
information in model space
so you can modify the vertex,

00:24:20.976 --> 00:24:23.286 A:middle
the normal and texture
coordinates in GLSL.

00:24:24.066 --> 00:24:27.776 A:middle
So for example here, I
can inject a little code

00:24:27.826 --> 00:24:30.416 A:middle
that just modifies the
Y position of my vertex

00:24:30.896 --> 00:24:31.986 A:middle
to do this wave affect.

00:24:32.906 --> 00:24:35.306 A:middle
And so, you don't have to
reimplement all the rest,

00:24:35.306 --> 00:24:37.196 A:middle
all the lighting and
all the textures.

00:24:38.086 --> 00:24:41.826 A:middle
You just focus on
the effect you want.

00:24:42.896 --> 00:24:46.446 A:middle
The surface entry point let
you modify all the surface

00:24:46.776 --> 00:24:48.856 A:middle
attributes which are
the diffuse, ambient,

00:24:48.856 --> 00:24:51.206 A:middle
specular, et cetera in GLSL.

00:24:52.006 --> 00:24:55.166 A:middle
For example here, we
did a car paint effect

00:24:55.986 --> 00:24:59.596 A:middle
by injecting a simple code
that modifies these properties.

00:24:59.596 --> 00:25:03.416 A:middle
So it generates some random
flakes by modifying the emission

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:03.416 --> 00:25:05.266 A:middle
and diffuse property
of the materials.

00:25:06.046 --> 00:25:09.226 A:middle
But all the rest, all the
geometry and all the lighting

00:25:09.226 --> 00:25:11.826 A:middle
and all that are still
done by Scene Kit.

00:25:13.556 --> 00:25:17.926 A:middle
Then the lighting entry point
lets you change the lighting

00:25:17.926 --> 00:25:20.296 A:middle
equation that is
applied for each light.

00:25:21.056 --> 00:25:24.126 A:middle
For example, here is a basic
rendering done by Scene Kit.

00:25:24.546 --> 00:25:27.676 A:middle
And here is a shader
modifier, so another equation

00:25:27.956 --> 00:25:30.566 A:middle
to do some sort of
cartoonish rendering.

00:25:31.886 --> 00:25:35.836 A:middle
And the last one is the
fragment entry point.

00:25:36.506 --> 00:25:38.216 A:middle
And this is the very last stage.

00:25:38.216 --> 00:25:40.736 A:middle
So at this stage, you have
access to all the information

00:25:40.736 --> 00:25:44.276 A:middle
from the previous stages like
all the surface information,

00:25:44.726 --> 00:25:45.936 A:middle
the lighting, et cetera.

00:25:47.096 --> 00:25:49.406 A:middle
You also have access to
the current fragment color,

00:25:49.406 --> 00:25:51.576 A:middle
and you can modify
it the way you want

00:25:51.576 --> 00:25:53.546 A:middle
to produce your custom
fragment effect.

00:25:54.086 --> 00:25:57.606 A:middle
So for example, here is the
default rendering in Scene Kit,

00:25:57.606 --> 00:26:01.086 A:middle
and here, a fragment modifier
that does an x-ray effect.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:02.376 --> 00:26:05.786 A:middle
And this is done simply
by changing the opacity

00:26:05.906 --> 00:26:09.286 A:middle
of the fragment based on
the normal of the object.

00:26:10.246 --> 00:26:13.466 A:middle
And the color is just
simply set to a blue color.

00:26:13.466 --> 00:26:18.456 A:middle
Of course, you can combine
all of these effects

00:26:18.456 --> 00:26:19.746 A:middle
into a single dictionary.

00:26:20.936 --> 00:26:24.216 A:middle
For example here this virus
has a geometry modifier

00:26:24.216 --> 00:26:27.526 A:middle
to do the deformation, a
surface to do the noise effect.

00:26:28.216 --> 00:26:29.456 A:middle
The lighting is tweaked as well

00:26:29.456 --> 00:26:30.916 A:middle
to do some sort of
back lighting.

00:26:31.316 --> 00:26:34.346 A:middle
And the-- and with the fragment
modifier to do this kind

00:26:34.346 --> 00:26:36.606 A:middle
of hologram effect on top of it.

00:26:39.116 --> 00:26:42.546 A:middle
Regarding the API, you can set
a shader modifier dictionary

00:26:42.656 --> 00:26:46.086 A:middle
to the objects that implement
the SCNShadable protocol.

00:26:46.086 --> 00:26:50.366 A:middle
So basically, the
material, SCNGeometry

00:26:50.366 --> 00:26:51.936 A:middle
and all the geometry subclasses.

00:26:53.116 --> 00:26:56.106 A:middle
And one thing very useful
that I didn't talk about is

00:26:56.106 --> 00:27:01.736 A:middle
that you can even declare your
own uniform in your GLSL code.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:02.206 --> 00:27:04.886 A:middle
And these uniforms are
automatically bound

00:27:04.946 --> 00:27:05.946 A:middle
to Objective-C.

00:27:06.776 --> 00:27:09.796 A:middle
That means that you can set the
values using Objective-C KVC

00:27:09.796 --> 00:27:14.246 A:middle
to your uniform and you can also
even animate your uniform using

00:27:14.246 --> 00:27:17.356 A:middle
implicit and explicit
animations with Core Animation.

00:27:19.026 --> 00:27:21.176 A:middle
Another thing that's
very handy is

00:27:21.176 --> 00:27:24.536 A:middle
that you can even declare
your custom texture sampler

00:27:24.536 --> 00:27:25.496 A:middle
in your shaders.

00:27:26.196 --> 00:27:28.816 A:middle
And these samplers are
also automatically bound

00:27:28.816 --> 00:27:30.056 A:middle
to your Objective-C code.

00:27:31.516 --> 00:27:34.676 A:middle
That means that you can still
use KVC to set your texture

00:27:34.676 --> 00:27:37.556 A:middle
by simply setting a
material property instance

00:27:37.816 --> 00:27:39.896 A:middle
to your sampler in
your GLSL code.

00:27:40.146 --> 00:27:42.546 A:middle
And since it is a
material property,

00:27:42.936 --> 00:27:45.846 A:middle
it works with images
and also with layers.

00:27:49.516 --> 00:27:52.956 A:middle
So the shader modifiers are
a very powerful new feature.

00:27:53.716 --> 00:27:56.956 A:middle
Now, I am calling Amaury to talk

00:27:56.956 --> 00:27:59.996 A:middle
about the other features
we added to OS X Mavericks.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.216 --> 00:28:00.526 A:middle
Thank you.

00:28:00.526 --> 00:28:01.046 A:middle
[ Applause ]

00:28:01.046 --> 00:28:08.836 A:middle
&gt;&gt; So hello.

00:28:08.836 --> 00:28:11.146 A:middle
My name is Amaury and
I'm a software engineer

00:28:11.146 --> 00:28:12.036 A:middle
in the Scene Kit team.

00:28:12.796 --> 00:28:15.076 A:middle
Thomas just showed you
the shader modifiers.

00:28:15.076 --> 00:28:16.016 A:middle
They are a fantastic tool

00:28:16.016 --> 00:28:17.756 A:middle
to bend Scene Kit
to your own needs.

00:28:18.186 --> 00:28:20.416 A:middle
And we added many more
new features in Mavericks

00:28:20.736 --> 00:28:22.466 A:middle
to help you build
better applications.

00:28:23.056 --> 00:28:26.036 A:middle
Today, I would like to talk
about six of these new features.

00:28:26.036 --> 00:28:27.226 A:middle
First is morphing.

00:28:27.226 --> 00:28:30.856 A:middle
Morphing is a popular
technique used

00:28:30.856 --> 00:28:33.686 A:middle
to animate objects
and deform them.

00:28:33.736 --> 00:28:37.396 A:middle
It works by interpolating
between a base geometry,

00:28:37.396 --> 00:28:40.746 A:middle
the geometry of your node,
and one or more morph targets.

00:28:41.386 --> 00:28:44.616 A:middle
So for instance, here I have a
geometry that represents a map.

00:28:44.616 --> 00:28:47.486 A:middle
I also happen to have
two other versions

00:28:47.666 --> 00:28:52.416 A:middle
of this geometry named
Target A and Target B.

00:28:52.416 --> 00:28:54.666 A:middle
I will use these
targets as morph targets.

00:28:55.506 --> 00:28:58.726 A:middle
So for instance, if I
increase influence of Target A,

00:28:58.726 --> 00:29:01.346 A:middle
the map is folded like this.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:01.996 --> 00:29:05.076 A:middle
I can also use Target B
to fold the map like this.

00:29:05.436 --> 00:29:07.656 A:middle
And as you can see, this
is fully animatable.

00:29:08.266 --> 00:29:12.096 A:middle
You can smoothly transition
from one state to the other.

00:29:12.096 --> 00:29:15.386 A:middle
And of course, you can use
both targets at the same time

00:29:15.646 --> 00:29:17.076 A:middle
to combine their effects.

00:29:18.026 --> 00:29:18.956 A:middle
So, how does it work?

00:29:20.506 --> 00:29:23.886 A:middle
Scene Kit exposes the SCNMorpher
class to deal with morphing.

00:29:24.516 --> 00:29:28.556 A:middle
All the morphing information
and animations can be loaded

00:29:28.666 --> 00:29:30.856 A:middle
from a DAE file or
you can create

00:29:30.856 --> 00:29:32.456 A:middle
everything programmatically.

00:29:32.456 --> 00:29:33.276 A:middle
It's really up to you.

00:29:34.336 --> 00:29:37.596 A:middle
You can also use any kind of
geometry for your morph targets

00:29:37.596 --> 00:29:40.946 A:middle
as long as their
topology matches the one

00:29:40.946 --> 00:29:42.786 A:middle
of the base geometry, that is

00:29:42.786 --> 00:29:45.496 A:middle
to mean they have the exact
same number of vertices

00:29:46.206 --> 00:29:47.506 A:middle
and the same triangulation.

00:29:48.726 --> 00:29:53.446 A:middle
So that is morphing, and you
might want to use this feature

00:29:53.446 --> 00:29:57.046 A:middle
for say, animate a face with
different facial expressions

00:29:57.116 --> 00:29:58.666 A:middle
for your morph targets.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.396 --> 00:30:05.246 A:middle
The second new feature
is skinning.

00:30:05.506 --> 00:30:07.416 A:middle
Skinning is a very
popular technique used

00:30:07.416 --> 00:30:09.706 A:middle
to animate objects
and characters.

00:30:09.866 --> 00:30:13.266 A:middle
It works by attaching
a skeleton made

00:30:13.266 --> 00:30:15.546 A:middle
of joints and bones to a node.

00:30:16.346 --> 00:30:19.506 A:middle
To better understand this,
let's show the skeleton used

00:30:19.506 --> 00:30:21.996 A:middle
to animate this character.

00:30:22.046 --> 00:30:24.866 A:middle
A skeleton is nothing more
than a node hierarchy.

00:30:25.566 --> 00:30:28.986 A:middle
The nodes being called joints
and the segment from a joint

00:30:29.126 --> 00:30:31.226 A:middle
to its parent, a bone.

00:30:33.046 --> 00:30:36.946 A:middle
You can simply animate the
character by moving the joints.

00:30:37.756 --> 00:30:43.196 A:middle
So, let's hide the skeleton
and play another animation.

00:30:43.196 --> 00:30:43.956 A:middle
How does it work?

00:30:44.376 --> 00:30:48.536 A:middle
3D authoring tools will
help you design the skeleton

00:30:48.536 --> 00:30:51.696 A:middle
and your animations, and this
information can be loaded

00:30:51.696 --> 00:30:54.536 A:middle
into Scene Kit via a DAE file.

00:30:55.066 --> 00:30:57.936 A:middle
You can also programmatically
set--

00:30:57.936 --> 00:31:08.316 A:middle
dynamically set the skeleton
of a node and move the joints.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:08.316 --> 00:31:08.383 A:middle
[ Pause ]

00:31:08.383 --> 00:31:09.376 A:middle
Next, depth of field.

00:31:10.166 --> 00:31:11.626 A:middle
This is our third new feature.

00:31:12.896 --> 00:31:14.736 A:middle
We added a few properties
on SCNCamera

00:31:14.736 --> 00:31:17.496 A:middle
to provide a depth
of field effect.

00:31:18.086 --> 00:31:20.506 A:middle
The main two properties
are the focal distance

00:31:20.826 --> 00:31:21.996 A:middle
and the focal blur radius.

00:31:21.996 --> 00:31:23.236 A:middle
So, let's have a look.

00:31:24.916 --> 00:31:28.296 A:middle
The depth of field effect allows
you to blur areas in your scene.

00:31:28.876 --> 00:31:32.286 A:middle
The focal distance is a
distance from the camera

00:31:32.286 --> 00:31:35.586 A:middle
at which objects should be sharp

00:31:35.796 --> 00:31:39.126 A:middle
and the focal blur radius is the
amount of blur you want to use

00:31:39.126 --> 00:31:40.886 A:middle
for objects that
are out of focus.

00:31:41.156 --> 00:31:47.266 A:middle
So, for instance, if I increase
the focal distance the objects

00:31:47.266 --> 00:31:49.746 A:middle
in the background are
now sharp as the ones

00:31:49.746 --> 00:31:52.876 A:middle
in the foreground are blurred.

00:31:53.046 --> 00:31:55.256 A:middle
I can animate the focal distance

00:31:55.686 --> 00:31:58.316 A:middle
and look how the rook
stands out of the scene.

00:31:58.866 --> 00:31:59.906 A:middle
This is really beautiful.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:00.436 --> 00:32:02.066 A:middle
And we worked really hard

00:32:02.066 --> 00:32:07.086 A:middle
to make this advance technique
both easy to use and efficient.

00:32:08.006 --> 00:32:12.586 A:middle
You can just-- right after
this session you can open your

00:32:12.586 --> 00:32:17.086 A:middle
projects and add a depth of
field effect and with no more

00:32:17.086 --> 00:32:19.176 A:middle
than two lines of
code and no effort

00:32:19.176 --> 00:32:21.616 A:middle
from your part you will make
any scene more beautiful.

00:32:24.416 --> 00:32:28.146 A:middle
So, our fourth new
feature is the support

00:32:28.146 --> 00:32:29.236 A:middle
of Core Image filters.

00:32:30.136 --> 00:32:32.536 A:middle
We added this support
in OS X Mavericks

00:32:32.636 --> 00:32:35.716 A:middle
and you might already
know how to use it

00:32:35.716 --> 00:32:38.036 A:middle
because it's the exact
same API as on CALayer.

00:32:38.336 --> 00:32:41.786 A:middle
You simply provide Scene
Kit with an array of filters

00:32:42.016 --> 00:32:43.636 A:middle
and they are automatically
applied.

00:32:44.286 --> 00:32:46.266 A:middle
So, let's take an example.

00:32:46.266 --> 00:32:50.206 A:middle
Here, I have a grid of objects
and let's say they are part

00:32:50.206 --> 00:32:52.596 A:middle
of a 3D application
with a 3D UI.

00:32:53.596 --> 00:32:56.666 A:middle
You want the user to be able to
make a selection and you want

00:32:56.786 --> 00:32:58.396 A:middle
to highlight this selection.

00:32:59.346 --> 00:33:03.366 A:middle
This can be done using a
CIFilter, a glow filter.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:04.386 --> 00:33:08.116 A:middle
If I remove the filter
from one node and apply it

00:33:08.116 --> 00:33:10.806 A:middle
to another node, I can
move the selection.

00:33:11.336 --> 00:33:16.026 A:middle
And notice how the glow effect
exactly follows the shape

00:33:16.026 --> 00:33:18.306 A:middle
of the object even
when it's rotating.

00:33:19.066 --> 00:33:21.586 A:middle
This is because Core Image
filters work in screen space.

00:33:22.566 --> 00:33:24.476 A:middle
This kind of effect
would be really hard

00:33:24.476 --> 00:33:28.736 A:middle
to achieve in 3D space.

00:33:28.936 --> 00:33:32.146 A:middle
Also, Core Image filters apply
on the whole node hierarchy.

00:33:32.826 --> 00:33:36.546 A:middle
So for instance, if I group all
the objects in the background

00:33:36.626 --> 00:33:40.446 A:middle
under our common part and
set a filter on this parent,

00:33:40.446 --> 00:33:43.076 A:middle
they all get this old TV effect.

00:33:43.726 --> 00:33:47.366 A:middle
And of course, you can use
any of the built-in CI filters

00:33:47.536 --> 00:33:52.106 A:middle
or you can create your
own custom filter written

00:33:52.106 --> 00:33:53.016 A:middle
with your own kernel.

00:33:53.886 --> 00:33:57.636 A:middle
So, that is Core Image filters

00:33:57.636 --> 00:34:01.156 A:middle
and we think they will be
really useful for 3D UIs.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:01.281 --> 00:34:03.281 A:middle
[ Applause ]

00:34:03.406 --> 00:34:11.996 A:middle
Next, our fourth feature-- our
fifth feature is constraints.

00:34:13.206 --> 00:34:16.476 A:middle
Scene Kit gives you
a lot of freedom.

00:34:17.306 --> 00:34:20.226 A:middle
You can manipulate your
nodes in any way you want

00:34:20.456 --> 00:34:24.916 A:middle
and you can even animate them
either explicitly or implicitly.

00:34:25.726 --> 00:34:27.976 A:middle
But sometimes, this
is not enough.

00:34:28.136 --> 00:34:29.786 A:middle
There are some kinds
of behaviors

00:34:29.786 --> 00:34:31.126 A:middle
that you cannot implement.

00:34:31.985 --> 00:34:34.946 A:middle
So that's why in
Mavericks, we add a new way

00:34:34.946 --> 00:34:37.636 A:middle
to manipulate your
nodes via constraints.

00:34:39.116 --> 00:34:42.056 A:middle
Constraints are applied
at render time

00:34:42.056 --> 00:34:45.216 A:middle
and at every frame
automatically.

00:34:46.696 --> 00:34:50.386 A:middle
The result of evaluating a
constraint is not destructive.

00:34:51.096 --> 00:34:54.116 A:middle
The result is used only
for presentation purposes

00:34:54.576 --> 00:34:56.886 A:middle
and do not modify
the model values.

00:34:58.256 --> 00:35:02.426 A:middle
So, Scene Kit exposes the
SCNTransformConstraint class

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:02.976 --> 00:35:06.066 A:middle
to allow you to freely
manipulate the transform

00:35:06.066 --> 00:35:06.796 A:middle
of a node.

00:35:08.236 --> 00:35:11.476 A:middle
You can create a constraint
by providing a block of code

00:35:11.476 --> 00:35:14.646 A:middle
that will automatically get
executed at render time.

00:35:15.496 --> 00:35:18.746 A:middle
And this-- and in this block of
code, you can provide Scene Kit

00:35:18.836 --> 00:35:22.026 A:middle
with any transform you want and
it's the one that will be used.

00:35:22.576 --> 00:35:26.986 A:middle
We also provide you with
the SCNLookAtConstraint.

00:35:27.806 --> 00:35:31.316 A:middle
As its name suggests, it is
really useful when you want

00:35:31.316 --> 00:35:36.356 A:middle
to make a node always look in
the direction of another node.

00:35:37.146 --> 00:35:38.486 A:middle
So let's take an example here.

00:35:38.676 --> 00:35:43.206 A:middle
I have a ball and
several arrows.

00:35:43.956 --> 00:35:47.066 A:middle
I will add a "look at"
constraint to each arrow

00:35:47.066 --> 00:35:51.116 A:middle
in the scene so that they look
at the ball in the middle.

00:35:51.566 --> 00:35:54.756 A:middle
And because constraints are
evaluated at render time

00:35:55.346 --> 00:35:58.556 A:middle
and for every frame,
if I animate the ball,

00:35:58.556 --> 00:36:03.176 A:middle
the arrows keep looking
towards it automatically.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:03.176 --> 00:36:07.556 A:middle
And because constraints
apply on a node,

00:36:07.556 --> 00:36:10.946 A:middle
I can also apply this kind
of constraint on the node

00:36:10.946 --> 00:36:13.916 A:middle
that holds the camera so that
it looks towards the ball.

00:36:15.306 --> 00:36:25.516 A:middle
And you can also use it
to direct the spot light.

00:36:25.516 --> 00:36:25.583 A:middle
[ Applause ]

00:36:25.583 --> 00:36:27.026 A:middle
So the last new feature
I wanted to talk

00:36:27.026 --> 00:36:29.546 A:middle
about is animation events.

00:36:30.076 --> 00:36:33.076 A:middle
When dealing with
explicit animations,

00:36:33.506 --> 00:36:36.046 A:middle
it might be really useful
to trigger some actions

00:36:36.176 --> 00:36:38.626 A:middle
at some specific
moments in the animation.

00:36:39.256 --> 00:36:44.116 A:middle
An animation event is nothing
more than a block of code

00:36:44.256 --> 00:36:46.146 A:middle
that gets executed
automatically.

00:36:46.376 --> 00:36:50.526 A:middle
For instance, here I will have
an animation that plays a sound.

00:36:50.526 --> 00:36:53.656 A:middle
I will play it again.

00:36:53.656 --> 00:36:57.626 A:middle
Here, we set an event that will
be triggered when the middle

00:36:57.626 --> 00:37:00.346 A:middle
of the animation is reached.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.456 --> 00:37:04.566 A:middle
OK. And because animation
events take every parameter

00:37:04.566 --> 00:37:08.816 A:middle
of the animation into account
such as the timing function,

00:37:09.016 --> 00:37:13.316 A:middle
the speed factor and the repeat
count, if I have one animation

00:37:13.536 --> 00:37:17.466 A:middle
with only one event but set
this animation to repeat,

00:37:17.996 --> 00:37:20.236 A:middle
the block of code will be
triggered several times.

00:37:21.716 --> 00:37:25.276 A:middle
And because you can provide
several animation events,

00:37:25.726 --> 00:37:29.336 A:middle
you can have one animation
with different events

00:37:29.436 --> 00:37:32.566 A:middle
that play different sounds.

00:37:32.716 --> 00:37:34.336 A:middle
So these were six
of the new features

00:37:34.336 --> 00:37:36.656 A:middle
that will help you build
new kinds of applications.

00:37:37.566 --> 00:37:40.576 A:middle
It will-- they will allow
you to make more dynamic

00:37:40.576 --> 00:37:41.676 A:middle
and more beautiful scenes.

00:37:42.456 --> 00:37:44.906 A:middle
But you also want to achieve
the best performance, right?

00:37:46.056 --> 00:37:48.446 A:middle
So in Mavericks,
we add a new tool

00:37:48.686 --> 00:37:50.966 A:middle
to help you debug
performance issues.

00:37:52.326 --> 00:37:56.936 A:middle
By setting the showsStatistics
property to YES on a scene view,

00:37:57.836 --> 00:38:00.276 A:middle
you will make an overlay appear.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:01.156 --> 00:38:03.876 A:middle
This overlay provides you
with a lot of information

00:38:03.876 --> 00:38:07.816 A:middle
about what's going
on in the scene.

00:38:08.036 --> 00:38:12.266 A:middle
One of the most important
indicators is the FPS counter.

00:38:13.136 --> 00:38:16.506 A:middle
Your quest is to always
have this display 60 frames

00:38:16.506 --> 00:38:16.846 A:middle
per second.

00:38:18.376 --> 00:38:21.596 A:middle
So, if you click on the
little gear icon next

00:38:21.596 --> 00:38:24.086 A:middle
to the FPS counter, it
will show a debug panel.

00:38:24.086 --> 00:38:27.276 A:middle
In this debug panel
you can do things

00:38:27.326 --> 00:38:31.126 A:middle
such as showing the bounding
boxes, tweaking the parameters

00:38:31.126 --> 00:38:34.726 A:middle
of the depth of field effect,
dynamically change the point

00:38:34.726 --> 00:38:37.266 A:middle
of view and you can also
freeze the rendering,

00:38:37.846 --> 00:38:39.246 A:middle
and go through the steps--

00:38:39.526 --> 00:38:42.096 A:middle
go through the steps

00:38:42.096 --> 00:38:45.496 A:middle
of the rendering process
one step at a time.

00:38:45.706 --> 00:38:50.326 A:middle
So, using the slider, you can
see the rendering process draw

00:38:50.326 --> 00:38:51.036 A:middle
call by draw call.

00:38:51.656 --> 00:38:56.756 A:middle
In the overlay, you can also
check the number of vertices,

00:38:57.046 --> 00:38:58.626 A:middle
polygons and draw calls.

00:38:58.726 --> 00:39:03.196 A:middle
We want always this numbers
to be as low as possible

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:03.196 --> 00:39:04.986 A:middle
to achieve the best
performances.

00:39:05.826 --> 00:39:06.966 A:middle
So how can you do that?

00:39:07.656 --> 00:39:11.506 A:middle
Well, you might not be able to
reduce the number of vertices

00:39:11.506 --> 00:39:13.566 A:middle
without affecting the
quality of your scene.

00:39:14.046 --> 00:39:16.886 A:middle
But you might be able to reduce
the number of draw calls.

00:39:17.496 --> 00:39:20.416 A:middle
And this is what the
flattenedClone method is for.

00:39:20.976 --> 00:39:26.386 A:middle
It works by taking a node
hierarchy and making a copy

00:39:26.566 --> 00:39:29.666 A:middle
of it that will render exactly
the same but which is flat,

00:39:29.666 --> 00:39:30.646 A:middle
which has no child node.

00:39:31.406 --> 00:39:35.606 A:middle
So for instance, here I have a
parent node with four children.

00:39:36.796 --> 00:39:41.256 A:middle
These children have a total
of eleven geometry elements

00:39:41.596 --> 00:39:43.186 A:middle
but they use only
four materials.

00:39:43.976 --> 00:39:46.846 A:middle
The orange one, the blue one,
the purple one and the red one.

00:39:48.056 --> 00:39:52.486 A:middle
If I flatten this node, the
method will go through each node

00:39:52.726 --> 00:39:55.856 A:middle
and merge all the geometries
into one single geometry

00:39:56.146 --> 00:39:59.656 A:middle
that will have as many
geometry elements as materials.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:00.356 --> 00:40:04.626 A:middle
So here instead of having eleven
draw calls, we have only four

00:40:04.626 --> 00:40:07.586 A:middle
which is a huge win
performance wise.

00:40:08.836 --> 00:40:10.566 A:middle
So what about geometries?

00:40:11.316 --> 00:40:15.996 A:middle
In Scene Kit, all the geometry--

00:40:15.996 --> 00:40:20.876 A:middle
all the node attributes
are shared by default.

00:40:20.876 --> 00:40:22.616 A:middle
The camera, the light,
the geometry,

00:40:23.066 --> 00:40:24.016 A:middle
the skinner, the morpher.

00:40:24.746 --> 00:40:27.376 A:middle
And this is a good
thing in general.

00:40:27.756 --> 00:40:32.026 A:middle
But say, you want to duplicate
a node and change its materials.

00:40:32.836 --> 00:40:36.316 A:middle
Because the geometry is shared,
if you change its materials,

00:40:36.466 --> 00:40:38.976 A:middle
it would reflect
everywhere in the scene.

00:40:39.356 --> 00:40:43.216 A:middle
So, to fix this issue you
have to unshare the geometry

00:40:43.216 --> 00:40:45.546 A:middle
by explicitly copying it.

00:40:46.316 --> 00:40:48.166 A:middle
But the good news is

00:40:48.166 --> 00:40:50.036 A:middle
that copying a geometry
is really cheap.

00:40:50.576 --> 00:40:52.486 A:middle
This is because all the vertices

00:40:52.486 --> 00:40:55.136 A:middle
and triangulation
information is immutable.

00:40:55.416 --> 00:40:58.176 A:middle
So Scene Kit doesn't
have to copy them.

00:40:58.256 --> 00:41:00.906 A:middle
So once you have
a copied geometry,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:00.906 --> 00:41:03.336 A:middle
you can change its materials

00:41:03.336 --> 00:41:05.306 A:middle
without affecting the
other nodes in the scene.

00:41:05.636 --> 00:41:10.186 A:middle
So, that was about node
hierarchies and geometries.

00:41:10.656 --> 00:41:11.956 A:middle
Now, materials.

00:41:13.386 --> 00:41:15.686 A:middle
It's really important
to keep your shaders

00:41:15.686 --> 00:41:17.796 A:middle
as simple as possible.

00:41:18.256 --> 00:41:21.096 A:middle
This is not only true
for your custom programs

00:41:21.096 --> 00:41:23.476 A:middle
and shader modifiers,
it's also true

00:41:23.666 --> 00:41:25.526 A:middle
for Scene Kit's default
rendering.

00:41:28.596 --> 00:41:30.486 A:middle
The more lights in your scene,

00:41:31.186 --> 00:41:33.336 A:middle
the most expensive
the shader will be.

00:41:34.086 --> 00:41:36.976 A:middle
So, a good idea is to
keep the number of lights

00:41:36.976 --> 00:41:38.706 A:middle
in your scene as
low as possible.

00:41:39.466 --> 00:41:40.296 A:middle
But what if you can't?

00:41:40.736 --> 00:41:44.066 A:middle
What if you want a richer
lighting with many lights?

00:41:45.036 --> 00:41:46.546 A:middle
Well, a good idea would be

00:41:46.546 --> 00:41:48.796 A:middle
to pre-compute all the
lighting information

00:41:49.006 --> 00:41:50.506 A:middle
and bake them into textures.

00:41:51.866 --> 00:41:53.546 A:middle
And it's the same
idea for shadows.

00:41:53.926 --> 00:41:55.916 A:middle
Dynamic shadows are
really expensive.

00:41:55.916 --> 00:41:59.726 A:middle
Whereas pre-computed
shadows are fast

00:41:59.726 --> 00:42:01.106 A:middle
and they might even look better.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:01.776 --> 00:42:04.936 A:middle
3D authoring tools will
help you bake this lighting

00:42:05.026 --> 00:42:09.706 A:middle
and shadow information into
textures and they can be loaded

00:42:09.786 --> 00:42:10.706 A:middle
from DAE files

00:42:11.276 --> 00:42:14.286 A:middle
or set programmatically
using the multiply property

00:42:14.566 --> 00:42:15.416 A:middle
of a material.

00:42:15.736 --> 00:42:17.026 A:middle
So let's take an example here.

00:42:17.646 --> 00:42:21.096 A:middle
Let's say I have a scene
that represents a dungeon.

00:42:21.096 --> 00:42:25.976 A:middle
It is lit by only one light, and
because there is only one light

00:42:25.976 --> 00:42:27.696 A:middle
in the scene, it's
very fast to render.

00:42:28.646 --> 00:42:31.756 A:middle
But it doesn't look
that great, right?

00:42:31.796 --> 00:42:35.746 A:middle
So, you might want a
richer lighting here.

00:42:35.966 --> 00:42:40.426 A:middle
So instead of adding one dynamic
light, let's say per candle,

00:42:40.656 --> 00:42:43.716 A:middle
we'll bake this into
textures using a 3D tool.

00:42:43.766 --> 00:42:48.106 A:middle
So, the first step is to
get rid of all the lights.

00:42:48.676 --> 00:42:51.906 A:middle
This is the same scene rendered
with no lighting at all.

00:42:52.666 --> 00:42:56.896 A:middle
Next, we will apply a light
map using the multiply property

00:42:57.956 --> 00:42:58.736 A:middle
to achieve this.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:00.026 --> 00:43:03.436 A:middle
See, you have colored
lights, shadows

00:43:03.436 --> 00:43:06.016 A:middle
and the scene looks much nicer.

00:43:06.266 --> 00:43:06.966 A:middle
It's richer.

00:43:07.866 --> 00:43:11.416 A:middle
And in fact, this is
actually faster to render

00:43:11.416 --> 00:43:12.846 A:middle
than the first seen
with only one light.

00:43:13.756 --> 00:43:16.116 A:middle
So, light maps and shadow maps.

00:43:17.136 --> 00:43:18.276 A:middle
What about textures?

00:43:19.276 --> 00:43:21.676 A:middle
Well, one of obvious
thing is that you want

00:43:21.916 --> 00:43:24.176 A:middle
to avoid unnecessary
large images.

00:43:25.256 --> 00:43:28.046 A:middle
If a texture is never to be
rendered large on the screen,

00:43:28.546 --> 00:43:30.936 A:middle
then it shouldn't be
large in the first place.

00:43:31.956 --> 00:43:35.976 A:middle
Second, if you plan on using
the same image on ambient

00:43:35.976 --> 00:43:39.326 A:middle
and diffuse properties then
you should let Scene Kit know

00:43:39.456 --> 00:43:41.216 A:middle
so that it can optimize
its shaders.

00:43:41.996 --> 00:43:45.336 A:middle
And finally, you might
consider using mipmaps.

00:43:46.356 --> 00:43:50.556 A:middle
When activated, Scene Kit will
pre-compute several resolutions

00:43:50.616 --> 00:43:54.366 A:middle
of the image and select the
best resolution at render time.

00:43:55.196 --> 00:43:58.286 A:middle
This makes things more
efficient but it has a cost.

00:43:58.986 --> 00:44:02.846 A:middle
Pre-computing the mipmaps is a
bit expensive, so you might want

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:02.846 --> 00:44:05.956 A:middle
to use this feature if you
need faster rendering more

00:44:05.956 --> 00:44:06.526 A:middle
than faster setup.

00:44:06.526 --> 00:44:12.626 A:middle
The last thing I wanted to
talk about is levels of detail.

00:44:13.286 --> 00:44:16.096 A:middle
This is a feature that only
focuses on performance.

00:44:16.096 --> 00:44:23.176 A:middle
Here, you have two
objects that represent--

00:44:23.546 --> 00:44:25.926 A:middle
two geometries that
represent the same object.

00:44:26.886 --> 00:44:31.296 A:middle
As you can see, one is high res
and one is-- and one is low res.

00:44:31.686 --> 00:44:34.346 A:middle
And you can easy tell the
difference between the two.

00:44:35.226 --> 00:44:38.896 A:middle
But if I move these
objects very far

00:44:38.896 --> 00:44:41.606 A:middle
at some point it becomes
hard to tell which is which.

00:44:43.006 --> 00:44:46.256 A:middle
So, the idea behind
levels of detail is

00:44:46.616 --> 00:44:49.536 A:middle
to build several versions
of a single geometry

00:44:50.346 --> 00:44:52.696 A:middle
with different polygon counts.

00:44:53.276 --> 00:44:56.216 A:middle
This is actually a new
feature in OS X Mavericks

00:44:56.726 --> 00:44:59.906 A:middle
and Scene Kit exposes the
SCNLevelOfDetail class.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:00.326 --> 00:45:03.376 A:middle
This class encapsulates
a geometry that is used

00:45:03.376 --> 00:45:08.016 A:middle
for a specific resolution as
well as a minimal distance

00:45:08.506 --> 00:45:14.206 A:middle
from the camera at which
this resolution can be used.

00:45:14.206 --> 00:45:17.106 A:middle
You then simply set a--

00:45:17.106 --> 00:45:21.006 A:middle
set an array of levels
of detail on a geometry.

00:45:21.746 --> 00:45:25.176 A:middle
So in this scene, I duplicate
this teapot many, many times.

00:45:26.296 --> 00:45:30.146 A:middle
If we hadn't activated levels
of detail, there would be more

00:45:30.146 --> 00:45:32.356 A:middle
than seven million
polygons in the scene

00:45:32.606 --> 00:45:34.226 A:middle
which would kill
the performance.

00:45:35.426 --> 00:45:37.046 A:middle
But thanks to levels of detail,

00:45:37.636 --> 00:45:39.986 A:middle
Scene Kit rarely uses
the best resolution.

00:45:40.796 --> 00:45:41.926 A:middle
And since the objects

00:45:41.926 --> 00:45:46.376 A:middle
in the background only have 256
polygons it makes rendering this

00:45:46.466 --> 00:45:47.236 A:middle
scene possible.

00:45:47.886 --> 00:45:54.136 A:middle
So that was about the new
features in OS X Mavericks

00:45:54.136 --> 00:45:58.586 A:middle
and now I hand over to Thomas
to-- for a quick recap.

00:45:59.076 --> 00:45:59.526 A:middle
&gt;&gt; Thank you.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:00.026 --> 00:46:04.446 A:middle
[ Applause ]

00:46:04.946 --> 00:46:08.236 A:middle
&gt;&gt; So yes to conclude,
so we presented some

00:46:08.236 --> 00:46:11.326 A:middle
of the new features we
added to this release.

00:46:11.986 --> 00:46:13.876 A:middle
We talked a little
bit about performance

00:46:13.876 --> 00:46:15.386 A:middle
and the new tools we have

00:46:15.426 --> 00:46:17.506 A:middle
to help you debug the
performance issues,

00:46:18.166 --> 00:46:22.026 A:middle
and also the new APIs that will
help you improve the performance

00:46:22.026 --> 00:46:22.696 A:middle
of your scene.

00:46:23.916 --> 00:46:27.026 A:middle
There are actually
many other new features

00:46:27.026 --> 00:46:30.496 A:middle
that we didn't have the time
to cover today, like exporting

00:46:30.536 --> 00:46:32.296 A:middle
to a DAE document for example.

00:46:32.296 --> 00:46:35.166 A:middle
We also support OpenGL's
Core Profile,

00:46:35.536 --> 00:46:38.316 A:middle
if you want to do
some really late--

00:46:38.406 --> 00:46:40.556 A:middle
use the latest features
of OpenGL.

00:46:40.556 --> 00:46:43.976 A:middle
And more. And I encourage
you to have a look

00:46:43.976 --> 00:46:47.716 A:middle
to these new features
in the seed.

00:46:47.716 --> 00:46:48.956 A:middle
And you probably guessed

00:46:48.956 --> 00:46:53.266 A:middle
that this presentation was
entirely written using Scene Kit

00:46:53.786 --> 00:46:57.646 A:middle
from the beginning
and we are very happy

00:46:57.696 --> 00:46:59.776 A:middle
to share this code
with you today.

00:46:59.776 --> 00:46:59.843 A:middle
[ Applause ]

00:46:59.843 --> 00:47:08.736 A:middle
So this code will be available
right after the session.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:09.636 --> 00:47:14.616 A:middle
It is made as one single
file per slide so it's--

00:47:14.646 --> 00:47:16.216 A:middle
every time it's a simple file.

00:47:16.836 --> 00:47:21.096 A:middle
And this is kind of a collection
of fifty small sample codes

00:47:21.506 --> 00:47:23.356 A:middle
and every file is
independent of the other,

00:47:23.526 --> 00:47:25.386 A:middle
so I really think it's a
really good sample code

00:47:25.776 --> 00:47:28.296 A:middle
to get started with Scene Kit.

00:47:29.246 --> 00:47:30.436 A:middle
For more information,

00:47:31.056 --> 00:47:33.606 A:middle
please contact our
evangelist, Allan Schaffer.

00:47:34.296 --> 00:47:37.016 A:middle
We also have some documentation
online on the developer website.

00:47:37.166 --> 00:47:41.776 A:middle
And the developer forum is also
a good place to ask questions

00:47:41.776 --> 00:47:45.766 A:middle
and get answers and we
are very responsive on it.

00:47:46.356 --> 00:47:51.816 A:middle
So that's about it
and thanks for coming.

00:47:52.316 --> 00:48:01.230 A:middle
[ Applause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

