WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:10.536 A:middle
[ Silence ]

00:00:11.036 --> 00:00:16.966 A:middle
&gt;&gt; Good afternoon.

00:00:16.966 --> 00:00:18.356 A:middle
[ Applause ]

00:00:18.356 --> 00:00:21.446 A:middle
Well my name is Sam Bushell
and I work on Media Frameworks.

00:00:21.896 --> 00:00:23.926 A:middle
And that's what we're
going to be talking

00:00:23.926 --> 00:00:24.686 A:middle
about in this session.

00:00:24.686 --> 00:00:28.886 A:middle
We're going to talk about
Media Frameworks, old and new.

00:00:28.886 --> 00:00:31.416 A:middle
We're going to talk
about QuickTime and QTKit

00:00:31.416 --> 00:00:34.906 A:middle
and we're going to talk about
AV Foundation and AV Kit.

00:00:35.846 --> 00:00:38.086 A:middle
In case you haven't heard,

00:00:38.086 --> 00:00:40.176 A:middle
AV Foundation is a new media
infrastructure we've been

00:00:40.176 --> 00:00:42.256 A:middle
working on at Apple
for the last few years.

00:00:42.976 --> 00:00:44.776 A:middle
It's common on iOS and OS X.

00:00:44.776 --> 00:00:50.526 A:middle
And it's focused on modern media
formats like H.264 and AAC.

00:00:50.526 --> 00:00:52.656 A:middle
But AV Foundation was
built by engineers

00:00:52.656 --> 00:00:53.946 A:middle
with deep media experience

00:00:53.946 --> 00:00:55.656 A:middle
from building QuickTime
over many years.

00:00:59.456 --> 00:01:01.846 A:middle
Let's give a bit of
history about QuickTime.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:03.106 --> 00:01:06.106 A:middle
QuickTime was a pioneering
framework

00:01:06.106 --> 00:01:08.536 A:middle
for dealing with digital media.

00:01:09.806 --> 00:01:12.446 A:middle
There were some early developer
seeds but it first shipped

00:01:12.446 --> 00:01:14.356 A:middle
to the public in December 1991.

00:01:14.876 --> 00:01:19.456 A:middle
And over the years since
1991, there have been a lot

00:01:19.456 --> 00:01:22.796 A:middle
of QuickTime updates delivering
an enormous collection

00:01:22.796 --> 00:01:23.456 A:middle
of features.

00:01:24.856 --> 00:01:28.316 A:middle
One of our biggest individual
feature releases was QuickTime 7

00:01:28.316 --> 00:01:30.366 A:middle
which is shipped as part
of Mac OS 10.4 Tiger.

00:01:31.166 --> 00:01:35.776 A:middle
This introduced big
deal features like H.264

00:01:35.776 --> 00:01:37.786 A:middle
and the QTKit Framework.

00:01:38.446 --> 00:01:41.446 A:middle
The QTKit Framework
introduced an objective C API

00:01:41.716 --> 00:01:43.096 A:middle
that wrapped the QuickTime C API

00:01:43.096 --> 00:01:46.206 A:middle
for easier integration
into Cocoa Apps.

00:01:48.686 --> 00:01:52.466 A:middle
Four years later, we introduced
Mac OS 10.6 Snow Leopard.

00:01:52.466 --> 00:01:54.976 A:middle
And in that four years,

00:01:55.326 --> 00:01:58.606 A:middle
we had built a new media
playback pipeline as part

00:01:58.606 --> 00:01:59.676 A:middle
of building the iPhone.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.386 --> 00:02:01.356 A:middle
We called this Core Media.

00:02:02.906 --> 00:02:06.186 A:middle
Now we weren't ready
to deliver a public API

00:02:06.286 --> 00:02:07.486 A:middle
for Core Media at the time.

00:02:07.516 --> 00:02:10.816 A:middle
But we delivered-- we
added a mode to QTKit

00:02:11.486 --> 00:02:13.406 A:middle
where you could use the
Core Media playback pipeline

00:02:13.406 --> 00:02:16.536 A:middle
to get optimized
playback of H.264 and AAC.

00:02:16.646 --> 00:02:17.946 A:middle
We called this QuickTime X.

00:02:18.566 --> 00:02:24.996 A:middle
And then in OS 10.7 Lion,

00:02:25.386 --> 00:02:27.956 A:middle
we introduced AV
Foundation as a public API.

00:02:28.796 --> 00:02:34.176 A:middle
In our framework hierarchy
AV Foundation sits lower

00:02:34.176 --> 00:02:36.986 A:middle
than the UI frameworks
of UIKit and AppKit.

00:02:37.766 --> 00:02:39.576 A:middle
This means that we can
deliver the same API

00:02:39.926 --> 00:02:41.676 A:middle
across iOS and OS X.

00:02:42.496 --> 00:02:48.736 A:middle
In the OS 10.8 Mountain Lion, we
enhanced the AV Foundation API

00:02:48.866 --> 00:02:51.546 A:middle
and we introduced the Video
Toolbox as a public API.

00:02:52.356 --> 00:02:55.636 A:middle
And this year in Mavericks,

00:02:55.776 --> 00:02:57.166 A:middle
(I'm still getting
used to saying that.)

00:02:58.246 --> 00:03:00.236 A:middle
We introduced-- we're
introducing AV Kit.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.666 --> 00:03:03.316 A:middle
AV Kit is the framework
where we will put APIs

00:03:03.896 --> 00:03:06.176 A:middle
that let you integrate AV
Foundation with AppKit.

00:03:09.086 --> 00:03:11.396 A:middle
So, you can see in the last
few years we have built

00:03:11.396 --> 00:03:14.736 A:middle
in a new stack of
media frameworks.

00:03:15.786 --> 00:03:17.606 A:middle
We call this the AV
Foundation family

00:03:18.096 --> 00:03:19.496 A:middle
and this is the direction
we're headed.

00:03:19.496 --> 00:03:21.846 A:middle
This is our focus in
the media systems group.

00:03:22.726 --> 00:03:24.626 A:middle
We have not been adding
new APIs to QuickTime

00:03:24.626 --> 00:03:26.726 A:middle
or QTKit for-- for
some time now.

00:03:26.726 --> 00:03:29.546 A:middle
I said that with one small
asterisk to come back to later.

00:03:32.026 --> 00:03:36.376 A:middle
So, as of Mavericks, the
QuickTime C Framework

00:03:36.706 --> 00:03:39.416 A:middle
and the QTKit Framework
are deprecated.

00:03:39.926 --> 00:03:42.736 A:middle
What this means is that
we've marked these APIs

00:03:42.786 --> 00:03:44.496 A:middle
as deprecated in
the header files.

00:03:44.846 --> 00:03:48.946 A:middle
And that means while your code
will still compile you will get

00:03:48.946 --> 00:03:50.486 A:middle
deprecation warnings like these.

00:03:51.866 --> 00:03:53.836 A:middle
But your apps will still run.

00:03:54.796 --> 00:03:56.306 A:middle
Let's emphasize that.

00:03:56.306 --> 00:03:57.876 A:middle
Your apps will still run.

00:03:57.876 --> 00:04:02.506 A:middle
While were on the topic,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:03.726 --> 00:04:07.766 A:middle
the QuickTime Movie file format
is still the primary file format

00:04:07.926 --> 00:04:09.666 A:middle
for AV Foundation and
for QuickTime Player.

00:04:10.276 --> 00:04:11.166 A:middle
It's still supported.

00:04:11.166 --> 00:04:13.776 A:middle
What we are deprecating
is the QuickTime C API

00:04:15.016 --> 00:04:18.486 A:middle
and the QuickTime, I'm sorry,
the QTKit objective C API.

00:04:19.346 --> 00:04:20.896 A:middle
The file format is
still supported.

00:04:23.216 --> 00:04:29.206 A:middle
And also on topic the movie file
format's ISO cousin MPEG4 is

00:04:29.206 --> 00:04:31.246 A:middle
also still supported.

00:04:31.786 --> 00:04:38.316 A:middle
So AV Foundation is the future
of media applications on OS X.

00:04:38.496 --> 00:04:41.216 A:middle
Let's talk a little bit about
how we built AV Foundation.

00:04:42.006 --> 00:04:44.916 A:middle
As I said, AV Foundation
was built by engineers

00:04:44.916 --> 00:04:46.156 A:middle
with deep media experience

00:04:46.156 --> 00:04:47.666 A:middle
from building QuickTime
over many years.

00:04:48.226 --> 00:04:50.936 A:middle
We wanted to build a
new platform for media

00:04:51.026 --> 00:04:53.186 A:middle
that could do things that
QuickTime couldn't do

00:04:53.446 --> 00:04:57.456 A:middle
and go places that QuickTime
couldn't do-- couldn't go.

00:04:58.456 --> 00:05:02.356 A:middle
So we built it on the same
kinds of modern foundations

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:02.356 --> 00:05:06.076 A:middle
that the rest of Apple has been
moving towards, core foundation

00:05:06.076 --> 00:05:08.816 A:middle
and foundation, GCD and
Blocks and so forth.

00:05:10.086 --> 00:05:12.636 A:middle
Now QuickTime was built
on a modern foundation.

00:05:12.706 --> 00:05:15.216 A:middle
It's just that it was a
modern foundation in 1991

00:05:15.216 --> 00:05:16.386 A:middle
when System 7 was new.

00:05:16.996 --> 00:05:20.546 A:middle
So a lot of the technologies
that it was sitting on top

00:05:20.546 --> 00:05:22.816 A:middle
of have or ones that we have
moved apart, moved away from.

00:05:26.716 --> 00:05:27.936 A:middle
Where QuickTime's APIs--

00:05:27.936 --> 00:05:34.226 A:middle
QuickTime is often said
to have a lot of APIs

00:05:34.226 --> 00:05:37.106 A:middle
but if you count these up
by numbers and if you look

00:05:37.106 --> 00:05:38.466 A:middle
into the header files, a lot

00:05:38.466 --> 00:05:40.676 A:middle
of these APIs are simply
exposing the implementation

00:05:40.676 --> 00:05:41.246 A:middle
of QuickTime.

00:05:41.876 --> 00:05:44.406 A:middle
And sometimes that's a
good fit for how you want

00:05:44.406 --> 00:05:47.536 A:middle
to extend QuickTime and use
QuickTime but sometimes its not.

00:05:48.266 --> 00:05:52.326 A:middle
With AV Foundation we have
taken care to design our APIs

00:05:52.916 --> 00:05:55.106 A:middle
to be a good fit for how
clients will use them.

00:05:55.646 --> 00:06:01.506 A:middle
And so QuickTime's APIs
are monolithic and in some

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:01.506 --> 00:06:04.466 A:middle
of these cases we have taken the
opportunity to re-factor them

00:06:04.646 --> 00:06:06.396 A:middle
in AV Foundation into
multiple objects.

00:06:06.716 --> 00:06:09.796 A:middle
In some cases these makes
the AV Foundation APIs much

00:06:09.796 --> 00:06:10.476 A:middle
more flexible.

00:06:14.206 --> 00:06:17.306 A:middle
Owing the QuickTime's
pre-OS X heritage,

00:06:18.126 --> 00:06:19.856 A:middle
many of its APIs
were only designed

00:06:19.856 --> 00:06:21.156 A:middle
to work on the main thread.

00:06:22.016 --> 00:06:23.806 A:middle
Now we did some retrofitting.

00:06:23.806 --> 00:06:26.826 A:middle
We did some refitting
and make many

00:06:26.826 --> 00:06:28.696 A:middle
of the APIs multi-thread
savvy in later years.

00:06:29.456 --> 00:06:32.816 A:middle
But that left the overall
rules if you had coming to it

00:06:32.816 --> 00:06:35.846 A:middle
as a first timer the overall
rules were somewhat awkward

00:06:35.846 --> 00:06:36.486 A:middle
and complicated.

00:06:37.436 --> 00:06:40.606 A:middle
AV Foundation is designed
to be deeply multithreaded.

00:06:41.076 --> 00:06:42.306 A:middle
There are two goals for this.

00:06:42.936 --> 00:06:44.536 A:middle
One is to take maximum advantage

00:06:44.706 --> 00:06:46.896 A:middle
of multi-core hardware
like we have today.

00:06:46.896 --> 00:06:49.686 A:middle
And the other is to improve
application responsiveness

00:06:50.196 --> 00:06:52.736 A:middle
by letting you take
slow, blocking operations

00:06:52.736 --> 00:06:54.156 A:middle
and move them off
the main thread.

00:06:54.676 --> 00:06:58.416 A:middle
AV Foundation is able
to take advantage

00:06:58.416 --> 00:07:01.776 A:middle
of hardware acceleration in
ways that QuickTime could not

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:02.436 --> 00:07:03.696 A:middle
such as video encoding.

00:07:04.076 --> 00:07:09.556 A:middle
And we made major design
decisions in AV Foundation

00:07:09.846 --> 00:07:11.206 A:middle
with the goal of
power efficiency.

00:07:11.876 --> 00:07:13.036 A:middle
Remember this is a framework

00:07:13.096 --> 00:07:15.496 A:middle
that was first delivered
on the iPhone.

00:07:15.616 --> 00:07:18.426 A:middle
It is a device that we tested
and run on a battery that fits

00:07:18.426 --> 00:07:20.596 A:middle
in your pocket and still
delivered long hours

00:07:20.596 --> 00:07:21.426 A:middle
of playback time.

00:07:22.866 --> 00:07:25.996 A:middle
Some of these power efficiency
design decisions could not have

00:07:25.996 --> 00:07:27.896 A:middle
been made compatible with
the QuickTime architecture.

00:07:31.676 --> 00:07:33.986 A:middle
And finally QuickTime's
integration,

00:07:34.506 --> 00:07:37.516 A:middle
deep tight integration
with legacy frameworks,

00:07:38.176 --> 00:07:39.226 A:middle
QuickDraw in particular,

00:07:39.606 --> 00:07:41.556 A:middle
means that it cannot
escape the 32-bit world.

00:07:42.246 --> 00:07:43.506 A:middle
Now you may know
that you are able

00:07:43.506 --> 00:07:46.136 A:middle
to use QTKit a 64-bit
application.

00:07:47.356 --> 00:07:50.196 A:middle
But for playback and editing
at least, what's happening

00:07:50.196 --> 00:07:52.596 A:middle
when you do that is that it's
running a 32-bit background

00:07:52.596 --> 00:07:53.656 A:middle
process to use QuickTime.

00:07:54.336 --> 00:07:55.566 A:middle
AV Foundation has designed--

00:07:55.566 --> 00:07:58.386 A:middle
been designed to be
64-bit native from day one.

00:07:59.616 --> 00:08:01.576 A:middle
So do you get the message here?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:02.056 --> 00:08:04.586 A:middle
There are lots of great
reasons why AV Foundation is the

00:08:04.586 --> 00:08:05.646 A:middle
direction that we're headed

00:08:05.766 --> 00:08:07.056 A:middle
and why it should
also be the direction

00:08:07.056 --> 00:08:08.376 A:middle
that your apps are
headed as well.

00:08:08.956 --> 00:08:14.146 A:middle
And AV Foundation supports the
media types that matter, video,

00:08:14.146 --> 00:08:15.906 A:middle
audio, closed captions
and subtitles,

00:08:15.906 --> 00:08:17.706 A:middle
chapters, and time code.

00:08:18.686 --> 00:08:22.896 A:middle
Now as I mentioned QuickTime
has a history, a vast history

00:08:22.896 --> 00:08:24.736 A:middle
with many features
added over the years.

00:08:25.446 --> 00:08:28.766 A:middle
And some of these were
breakthrough features

00:08:28.766 --> 00:08:32.006 A:middle
when they were added
in the mid 1990s.

00:08:32.306 --> 00:08:34.436 A:middle
But the world has moved on.

00:08:36.106 --> 00:08:38.676 A:middle
If you look at this list you
would think to yourself many

00:08:38.676 --> 00:08:43.265 A:middle
of theses APIs-- many of these
features would be superseded

00:08:43.265 --> 00:08:46.676 A:middle
by basic things that we take
for granted today like HTML 5.

00:08:47.466 --> 00:08:51.636 A:middle
And HTTP live streaming has
proved to be much more scalable

00:08:51.636 --> 00:08:53.896 A:middle
for delivery than RTP
Streaming ever was.

00:08:54.406 --> 00:08:56.906 A:middle
That brings us to codecs.

00:08:59.016 --> 00:09:00.886 A:middle
So QuickTime has a vast history.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.886 --> 00:09:03.596 A:middle
It has collected many, many
codecs over its long history,

00:09:03.916 --> 00:09:08.146 A:middle
and many of these are rather
old and have been superseded.

00:09:08.976 --> 00:09:10.526 A:middle
The categories of codecs

00:09:10.606 --> 00:09:15.106 A:middle
that are still relevant today
basically are in three groups.

00:09:15.336 --> 00:09:18.566 A:middle
Those that are used for
delivery like H.264 and AAC

00:09:18.626 --> 00:09:21.226 A:middle
and we use JPEG for
chapter images.

00:09:22.106 --> 00:09:24.186 A:middle
Codecs that are used
for production workflows

00:09:24.186 --> 00:09:26.756 A:middle
and editing, these are often
called Mezzanine codecs.

00:09:27.166 --> 00:09:32.586 A:middle
And Codecs that are used
as-- for import from captures

00:09:32.586 --> 00:09:34.486 A:middle
and device, standard
formats that we need

00:09:34.486 --> 00:09:35.546 A:middle
to be able to import from.

00:09:36.196 --> 00:09:38.716 A:middle
These three categories of
codecs are still supported

00:09:38.716 --> 00:09:39.556 A:middle
by AV Foundation.

00:09:40.176 --> 00:09:45.966 A:middle
And that leaves a number
that are left by the wayside.

00:09:47.086 --> 00:09:49.576 A:middle
And if you have really good
eyesight, you might be able

00:09:49.576 --> 00:09:50.786 A:middle
to look at this and
say well hang on some

00:09:50.786 --> 00:09:53.336 A:middle
of those aren't really what I
think it as video codecs anyhow.

00:09:53.816 --> 00:09:55.826 A:middle
And the way that QuickTime's
architecture was structured

00:09:56.726 --> 00:09:59.556 A:middle
still image formats and video
filters and effects also had

00:09:59.556 --> 00:10:01.296 A:middle
to be registered
as video decoders.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:01.916 --> 00:10:04.026 A:middle
Well nowadays, we have
the image IO Framework

00:10:04.026 --> 00:10:06.116 A:middle
which delivers still
image format support

00:10:06.116 --> 00:10:08.606 A:middle
and we have designed
different ways

00:10:08.606 --> 00:10:10.266 A:middle
of integrating video
filters and effects

00:10:10.526 --> 00:10:12.056 A:middle
into the playback pipeline.

00:10:14.826 --> 00:10:18.146 A:middle
But our media is
personally important to us.

00:10:19.196 --> 00:10:21.526 A:middle
Some of the media in these
formats is irreplaceable.

00:10:22.086 --> 00:10:25.726 A:middle
And just because the
formats are out of date,

00:10:25.726 --> 00:10:27.576 A:middle
it doesn't mean we want
to orphan the content.

00:10:29.526 --> 00:10:33.396 A:middle
So we've provided a
mechanisms starting in Mavericks

00:10:34.676 --> 00:10:39.046 A:middle
to help you-- to help
you migrate the content

00:10:39.296 --> 00:10:42.776 A:middle
in these legacy containers,
legacy formats

00:10:43.466 --> 00:10:45.416 A:middle
into AV Foundation-supported
formats.

00:10:45.956 --> 00:10:48.426 A:middle
It's called QTMovieModernizer.

00:10:48.996 --> 00:10:51.786 A:middle
It's automatically run
by QuickTime Player

00:10:51.786 --> 00:10:54.296 A:middle
when it discovers a legacy codec
in a movie file you're opening.

00:10:54.706 --> 00:10:56.576 A:middle
It works with third-party
QuickTime components.

00:10:57.076 --> 00:11:01.306 A:middle
And it's provided as
a new API in Mavericks

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:01.616 --> 00:11:02.966 A:middle
so you can do the
same in your apps.

00:11:04.156 --> 00:11:06.606 A:middle
The way it works is it
produces a new copy of the movie

00:11:06.766 --> 00:11:08.346 A:middle
in an AV Foundation
supported format.

00:11:08.706 --> 00:11:11.146 A:middle
Normally this will
be H.264 in AAC.

00:11:11.216 --> 00:11:12.976 A:middle
But there are some cases
for production workflows

00:11:12.976 --> 00:11:15.256 A:middle
where you'd want to use
Apple ProRes and PCM instead.

00:11:15.986 --> 00:11:17.496 A:middle
If the content has
an alpha channel,

00:11:17.716 --> 00:11:22.366 A:middle
then the alpha channel can be
preserved in Apple ProRes 4444.

00:11:22.366 --> 00:11:25.286 A:middle
Now, it's delivered
as part of QTKit.

00:11:25.286 --> 00:11:27.006 A:middle
And this is something
we don't do very often.

00:11:27.006 --> 00:11:30.216 A:middle
We're adding a new API to
a deprecated framework.

00:11:31.556 --> 00:11:34.496 A:middle
But this is intentional because
there's a very specific message

00:11:34.496 --> 00:11:35.226 A:middle
we want to send here.

00:11:36.376 --> 00:11:40.006 A:middle
QTMovieModernizer will be
available to you exactly as long

00:11:40.386 --> 00:11:42.916 A:middle
as QTKit and those legacy
codecs are still available.

00:11:43.946 --> 00:11:47.226 A:middle
So now is a good time to
gather up your legacy media

00:11:47.226 --> 00:11:54.356 A:middle
and bring it across the bridge.

00:11:54.356 --> 00:11:54.546 A:middle
[ Pause ]

00:11:54.546 --> 00:11:58.646 A:middle
So that's our story here
about QuickTime and QTKit.

00:11:59.976 --> 00:12:01.896 A:middle
QuickTime and QTKit
are deprecated

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:01.896 --> 00:12:05.876 A:middle
and we have been building a new
media framework brick-by-brick,

00:12:05.876 --> 00:12:08.326 A:middle
foundation by foundation
as it were called the AV--

00:12:09.136 --> 00:12:11.126 A:middle
the AV Foundation family.

00:12:11.736 --> 00:12:16.116 A:middle
In the rest of this talk,
we're going to talk about how

00:12:16.116 --> 00:12:18.696 A:middle
to migrate existing applications

00:12:19.156 --> 00:12:21.296 A:middle
to the AV Foundation
framework family.

00:12:21.416 --> 00:12:26.556 A:middle
And first I'll introduce
Stefan Hafeneger up to talk

00:12:26.556 --> 00:12:31.176 A:middle
about AV kit and introduce
it to you for the first time.

00:12:31.191 --> 00:12:33.191 A:middle
[ Applause ]

00:12:33.206 --> 00:12:36.486 A:middle
&gt;&gt; Thanks Sam.

00:12:36.486 --> 00:12:41.036 A:middle
So I see most of you sitting in
the audience here have some kind

00:12:41.036 --> 00:12:42.436 A:middle
of media playback in
your applications.

00:12:43.536 --> 00:12:44.426 A:middle
Let's see.

00:12:44.426 --> 00:12:46.566 A:middle
How many of you still
use QT Movie View?

00:12:47.516 --> 00:12:50.576 A:middle
Hands up. OK, so there's a few.

00:12:51.196 --> 00:12:53.096 A:middle
And how many of you
already use AV Foundation?

00:12:53.816 --> 00:12:56.186 A:middle
OK, so a few more.

00:12:57.036 --> 00:12:59.876 A:middle
And who of you has ever written
their own playback controls

00:12:59.876 --> 00:13:01.526 A:middle
on top of AVPlayer layer?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:01.836 --> 00:13:03.916 A:middle
OK, a few.

00:13:04.706 --> 00:13:06.056 A:middle
Yeah, I have written
a few as well.

00:13:06.096 --> 00:13:09.356 A:middle
Wouldn't it be nice
if it didn't have to--

00:13:09.356 --> 00:13:11.436 A:middle
didn't have to deal with that?

00:13:11.996 --> 00:13:13.726 A:middle
Here's something
new for all of you.

00:13:13.726 --> 00:13:17.146 A:middle
We want to make your life
as developers easier.

00:13:18.096 --> 00:13:26.146 A:middle
And that's why we are
adding AV Kit to our stand.

00:13:26.146 --> 00:13:27.956 A:middle
AV Kit is a new high
level Cocoa Framework.

00:13:27.956 --> 00:13:31.446 A:middle
Our goal is to provide
you view-level services

00:13:31.446 --> 00:13:34.376 A:middle
for media operations on top
of AV Foundation and AppKit.

00:13:34.376 --> 00:13:39.356 A:middle
AV Kit shows the AVPlayerView.

00:13:41.326 --> 00:13:43.836 A:middle
AVPlayerView is an
NSView subclass

00:13:43.836 --> 00:13:45.156 A:middle
for displaying audio-visual
media.

00:13:45.186 --> 00:13:47.426 A:middle
It comes with a set

00:13:47.426 --> 00:13:49.226 A:middle
of standardized playback
controls and behaviors.

00:13:49.226 --> 00:13:52.456 A:middle
This means, you can get
the same look and feel

00:13:52.456 --> 00:13:53.976 A:middle
that we have been using
in QuickTime Player

00:13:53.976 --> 00:13:55.876 A:middle
since Snow Leopard, now
in your applications.

00:13:55.876 --> 00:14:02.196 A:middle
And as a bonus, it takes care of
of localization, accessibility,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:02.196 --> 00:14:04.756 A:middle
high resolutions, state
restoration and so on.

00:14:04.866 --> 00:14:08.566 A:middle
And we made it really easy
for you to adopt AVPlayerView

00:14:08.566 --> 00:14:11.086 A:middle
in combination with the AV
Foundation in your applications.

00:14:11.696 --> 00:14:14.766 A:middle
So let me walk you through the
necessary steps in the demo.

00:14:16.396 --> 00:14:20.236 A:middle
All right, so in Xcode
you create a new project.

00:14:20.236 --> 00:14:26.606 A:middle
And select OS X Cocoa
Application and press Next.

00:14:27.336 --> 00:14:33.106 A:middle
The name is going to be
AVKitPlayer and we make sure

00:14:33.106 --> 00:14:35.496 A:middle
that we created a
document-based application.

00:14:35.636 --> 00:14:38.736 A:middle
Press Next and save
the document or the--

00:14:38.736 --> 00:14:40.006 A:middle
the project on the desktop.

00:14:40.426 --> 00:14:43.496 A:middle
Let me make the Window
a bit bigger here.

00:14:43.996 --> 00:14:50.236 A:middle
[ Pause ]

00:14:50.736 --> 00:14:52.356 A:middle
So the first thing
that you have to do is

00:14:52.356 --> 00:14:54.926 A:middle
to add the AV Foundation and AV
Kit Frameworks to our project.

00:14:56.166 --> 00:14:58.546 A:middle
So I'm here on the linked
frameworks and libraries.

00:14:58.546 --> 00:14:59.756 A:middle
I click on the Add button.

00:14:59.956 --> 00:15:02.046 A:middle
And then in the New sheet,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:02.046 --> 00:15:04.276 A:middle
we set first search
for AV Foundation.

00:15:05.726 --> 00:15:09.766 A:middle
Oops. I select that, press Add

00:15:09.766 --> 00:15:17.976 A:middle
and then we do the
same for AV Kit.

00:15:18.176 --> 00:15:19.956 A:middle
Now go up with the
mouse to the Info tab.

00:15:19.956 --> 00:15:24.076 A:middle
And on the document types,

00:15:24.806 --> 00:15:27.426 A:middle
first thing we do is we
remove the MyDoc extension.

00:15:31.236 --> 00:15:37.996 A:middle
Instead for identifier, we
use public.audiovisual-content

00:15:37.996 --> 00:15:39.516 A:middle
so that we can open all kinds

00:15:39.516 --> 00:15:43.566 A:middle
of audiovisual media
in our application.

00:15:43.626 --> 00:15:46.316 A:middle
Finally, we switch the
row from editor to viewer.

00:15:46.546 --> 00:15:49.276 A:middle
So that's-- NSApplication
doesn't create a document

00:15:49.276 --> 00:15:50.386 A:middle
for us automatically.

00:15:50.386 --> 00:15:56.416 A:middle
Now on the left we select
the documents xib file.

00:15:57.216 --> 00:16:00.726 A:middle
We remove the label
and then on the right,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.726 --> 00:16:02.836 A:middle
we search for AVPlayerView.

00:16:04.796 --> 00:16:06.906 A:middle
We're dragging an
instance of AVPlayerView

00:16:06.906 --> 00:16:09.376 A:middle
onto our document
window and resize it

00:16:09.376 --> 00:16:10.836 A:middle
so it fits the entire window.

00:16:11.196 --> 00:16:15.566 A:middle
In the inspector, we
change the control style

00:16:15.566 --> 00:16:16.846 A:middle
from default to floating.

00:16:16.846 --> 00:16:19.446 A:middle
And this would give us
the nice floating HUD

00:16:19.536 --> 00:16:23.726 A:middle
that we have in QuickTime
player.

00:16:23.906 --> 00:16:26.816 A:middle
Next, we show the
assistant editor.

00:16:27.416 --> 00:16:29.786 A:middle
And here, switch to the
document header file.

00:16:30.086 --> 00:16:32.086 A:middle
And now with the Control-click
we can add an outlet

00:16:32.086 --> 00:16:32.686 A:middle
to our document.

00:16:33.416 --> 00:16:39.866 A:middle
We call it playerView
and hit Connect.

00:16:40.976 --> 00:16:44.526 A:middle
Xcode will now complain that
AVPlayerView is not declared.

00:16:44.526 --> 00:16:50.146 A:middle
So, what's still left to do
is to add the header files.

00:16:51.136 --> 00:16:53.996 A:middle
All right, so what
have you done so far?

00:16:53.996 --> 00:16:56.146 A:middle
First, we create an OS
X document application.

00:16:56.736 --> 00:16:58.306 A:middle
Second, we aadd the
AV Foundation,

00:16:58.306 --> 00:17:00.206 A:middle
AV Kit frameworks
to our project.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.776 --> 00:17:04.616 A:middle
Third, we'd set a-- sorry,
modify the info plist

00:17:04.616 --> 00:17:06.626 A:middle
so we can open all kinds
of audiovisual media.

00:17:06.826 --> 00:17:09.516 A:middle
And fourth, we drop an
AVPlayerView into our document

00:17:09.516 --> 00:17:11.695 A:middle
and create outlets so we can
reference it from the documents.

00:17:12.996 --> 00:17:14.286 A:middle
So let's see how much
more we have to do

00:17:14.286 --> 00:17:20.915 A:middle
to actually make it work.

00:17:20.915 --> 00:17:21.076 A:middle
[ Pause ]

00:17:21.076 --> 00:17:22.766 A:middle
So I close the assistant editor

00:17:22.766 --> 00:17:24.346 A:middle
and select the document
implementation

00:17:24.346 --> 00:17:26.955 A:middle
and we scroll all the
way down to the bottom.

00:17:26.955 --> 00:17:30.926 A:middle
We're not going to
use readFromData,

00:17:32.166 --> 00:17:34.276 A:middle
instead we implement
readFromURL.

00:17:39.056 --> 00:17:41.136 A:middle
And here we just return yes.

00:17:41.706 --> 00:17:45.206 A:middle
We want to use AV Foundation
to open the document for us.

00:17:46.876 --> 00:17:49.326 A:middle
So we scroll up to
windowControllerDidLoadNib

00:17:49.826 --> 00:17:53.146 A:middle
and implement [playerView
setPlayer:

00:17:53.856 --> 00:17:55.036 A:middle
[AVPlayer playerWithURL:
[self fileURL]]] And now,

00:17:55.176 --> 00:17:59.756 A:middle
press on Build and Run.

00:17:59.756 --> 00:17:59.823 A:middle
[ Pause ]

00:17:59.823 --> 00:18:03.796 A:middle
Go to File, Open.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:09.296 --> 00:18:11.476 A:middle
Select the movie, press Open.

00:18:11.476 --> 00:18:16.256 A:middle
[Background Music] We have a
fully functional document-based

00:18:17.086 --> 00:18:18.896 A:middle
application for playing videos.

00:18:19.646 --> 00:18:24.596 A:middle
OK and it's- [applause]
thank you.

00:18:27.426 --> 00:18:29.396 A:middle
Press the Play and Pause
button to Play and Pause.

00:18:29.526 --> 00:18:31.696 A:middle
I can use this Slider
to scrub around

00:18:31.696 --> 00:18:34.836 A:middle
and we use the Scan button
to scan forward and backward.

00:18:36.506 --> 00:18:39.176 A:middle
But you can also use the
keyboards, for example space,

00:18:39.176 --> 00:18:41.256 A:middle
just stops playback
and stops playback.

00:18:41.836 --> 00:18:43.406 A:middle
We can step with
the arrow keys frame

00:18:43.406 --> 00:18:45.636 A:middle
by frame, forward and backward.

00:18:45.636 --> 00:18:48.196 A:middle
And for those of
you who are familiar

00:18:48.196 --> 00:18:49.266 A:middle
with the J/K/L navigation

00:18:49.266 --> 00:18:55.976 A:middle
in other applications
you have this as well.

00:18:55.976 --> 00:18:56.043 A:middle
[ Pause ]

00:18:56.043 --> 00:18:56.496 A:middle
All right.

00:18:57.576 --> 00:19:00.476 A:middle
Wasn't that easy?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.626 --> 00:19:03.046 A:middle
So let's go one step further.

00:19:03.046 --> 00:19:05.046 A:middle
Let's assume your users have
some content where they want

00:19:05.046 --> 00:19:07.776 A:middle
to cut off the beginning
and/or the end of the movie,

00:19:08.446 --> 00:19:09.286 A:middle
something we call trim.

00:19:09.286 --> 00:19:12.556 A:middle
Let's see how much
work we have to do

00:19:12.556 --> 00:19:13.906 A:middle
to add these features
to our application.

00:19:13.906 --> 00:19:21.506 A:middle
So for that, I'm going to open
another version of this project.

00:19:22.006 --> 00:19:28.056 A:middle
[ Pause ]

00:19:28.556 --> 00:19:30.466 A:middle
As you can see, I already set

00:19:30.466 --> 00:19:32.596 A:middle
up a trim menu item
in the Edit menu.

00:19:33.126 --> 00:19:37.026 A:middle
So we now open the
document implementation.

00:19:37.236 --> 00:19:41.676 A:middle
The only thing we have to
do is, in the trim IBAction

00:19:42.336 --> 00:19:44.736 A:middle
to call our playerView,

00:19:44.736 --> 00:19:46.876 A:middle
beginTrimming
WithCompletionHandler

00:19:46.876 --> 00:19:47.466 A:middle
and just NULL.

00:19:47.466 --> 00:19:51.956 A:middle
But as a good Cocoa Application,
we also want to enable

00:19:51.956 --> 00:19:53.316 A:middle
and disable the trim menu item.

00:19:53.316 --> 00:19:57.546 A:middle
So for that, in
validateUserInterfaceItem

00:19:57.546 --> 00:20:03.006 A:middle
for the trim IBAction,
we implement for trim--

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:03.006 --> 00:20:04.506 A:middle
playerView canBeginTrimming.

00:20:04.976 --> 00:20:11.656 A:middle
If we now build and run, and we
open the same document as before

00:20:11.656 --> 00:20:16.796 A:middle
and go to Edit and trim, you
get the same user interface

00:20:16.796 --> 00:20:17.866 A:middle
in the QuickTime player.

00:20:18.926 --> 00:20:20.346 A:middle
So we can direct
the trim handlers

00:20:20.346 --> 00:20:26.056 A:middle
to select the shorter portion of
the video, hit the Trim button

00:20:26.956 --> 00:20:28.156 A:middle
and now we're just playing
[Background Music] that--

00:20:28.276 --> 00:20:36.326 A:middle
this portion of the video.

00:20:36.326 --> 00:20:37.516 A:middle
[ Pause ]

00:20:37.516 --> 00:20:37.806 A:middle
All right.

00:20:37.946 --> 00:20:39.876 A:middle
So two lines of code-- sorry.

00:20:39.876 --> 00:20:41.856 A:middle
Two lines of code
was all we had to do

00:20:41.856 --> 00:20:44.086 A:middle
to create a very basic
video playback application,

00:20:44.086 --> 00:20:46.306 A:middle
using AVPlayerView
and AV Foundation.

00:20:46.876 --> 00:20:49.306 A:middle
Two more lines of code and we
have trimming working as well.

00:20:49.306 --> 00:20:52.486 A:middle
Just imagine how long
it would have taken us

00:20:52.486 --> 00:20:53.776 A:middle
to create these controls
from scratch.

00:20:55.016 --> 00:20:57.356 A:middle
All this time, you can now
invest instead making your

00:20:57.356 --> 00:20:58.396 A:middle
applications even better.

00:20:58.396 --> 00:20:58.463 A:middle
[ Pause ]

00:20:58.463 --> 00:21:04.986 A:middle
So let's talk about
a few details now.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:05.666 --> 00:21:08.646 A:middle
So how does AVPlayerView work

00:21:08.646 --> 00:21:10.936 A:middle
with the AV Foundation
class hierarchy?

00:21:11.876 --> 00:21:14.906 A:middle
AVPlayerView has a strong
reference to an AVPlayer object.

00:21:16.116 --> 00:21:19.056 A:middle
This object provides
the content of course.

00:21:19.056 --> 00:21:22.446 A:middle
AVPlayer itself mentions
AVPlayerItem which serves

00:21:22.446 --> 00:21:26.196 A:middle
at mid-- which serves as
the mutable data structure

00:21:26.196 --> 00:21:27.986 A:middle
for an immutable AVAsset.

00:21:29.156 --> 00:21:32.096 A:middle
This means in order to provide
content for an AVPlayerView,

00:21:32.096 --> 00:21:34.196 A:middle
you have to do the
following steps.

00:21:35.936 --> 00:21:41.876 A:middle
First, you create an
AVAsset from an NSURL.

00:21:42.046 --> 00:21:44.406 A:middle
Once you have an AVAsset, you
can create an AVPlayerItem.

00:21:44.406 --> 00:21:50.966 A:middle
We have AVPlayerItem, you can
then create an AVPlayer object.

00:21:52.536 --> 00:21:54.936 A:middle
And finally, you associate
this AVPlayer object

00:21:54.936 --> 00:21:56.666 A:middle
with an AVPlayerView.

00:21:57.936 --> 00:22:00.396 A:middle
However, if you really just
want to play the content

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.396 --> 00:22:02.886 A:middle
of the movie file on disc, you
can do all four steps at once.

00:22:02.886 --> 00:22:03.366 A:middle
[ Pause ]

00:22:03.366 --> 00:22:08.956 A:middle
So as we showed you
earlier in the demo,

00:22:09.066 --> 00:22:11.896 A:middle
you can directly create an
AVPlayer object from an NSURL

00:22:11.896 --> 00:22:14.656 A:middle
and then pass this object
to the AVPlayerView.

00:22:14.846 --> 00:22:18.586 A:middle
Let's go back to the object
graph from earlier for a second.

00:22:19.176 --> 00:22:22.836 A:middle
I told you, the first step
in order to provide content

00:22:22.836 --> 00:22:25.916 A:middle
from AVPlayerView is to create
an AVAsset from an NSURL.

00:22:25.916 --> 00:22:29.206 A:middle
But what if you're
using AVCompositions

00:22:29.206 --> 00:22:31.026 A:middle
in your applications instead?

00:22:32.276 --> 00:22:33.056 A:middle
All I'm showing today

00:22:33.056 --> 00:22:35.376 A:middle
that AVPlayerView
would just work fine

00:22:35.376 --> 00:22:42.046 A:middle
for AVCompositions as well.

00:22:42.046 --> 00:22:43.566 A:middle
[ Pause ]

00:22:43.566 --> 00:22:45.096 A:middle
AVPlayerView let's you choose

00:22:45.096 --> 00:22:47.516 A:middle
from four different
standardized control styles.

00:22:48.426 --> 00:22:50.756 A:middle
Which one you pick for your
applications is up to you.

00:22:51.776 --> 00:22:53.606 A:middle
It really depends on the
type of application you have

00:22:53.606 --> 00:22:55.616 A:middle
and what looks best in
your user interface.

00:22:55.616 --> 00:22:59.306 A:middle
Let me walk through the
difference real quick.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.916 --> 00:23:02.856 A:middle
The first style doesn't
show any controls,

00:23:02.856 --> 00:23:06.056 A:middle
but instead it gives you all
the gesture and keyboard events

00:23:06.056 --> 00:23:07.096 A:middle
that AVPlayerView implements.

00:23:07.776 --> 00:23:13.526 A:middle
The second style has the
controls at bottom of the view.

00:23:13.906 --> 00:23:18.126 A:middle
This is the closest match that
we provide to the QTMovieView.

00:23:18.396 --> 00:23:23.186 A:middle
The third control
style has controls

00:23:23.186 --> 00:23:24.966 A:middle
in this-- in the floating HUD.

00:23:25.266 --> 00:23:26.476 A:middle
This is exactly the same UI

00:23:26.476 --> 00:23:28.296 A:middle
that we are using
QuickTime Player today.

00:23:28.296 --> 00:23:33.196 A:middle
The last style is just
a Play/Pause button

00:23:33.196 --> 00:23:34.386 A:middle
at the center of the view.

00:23:34.926 --> 00:23:37.196 A:middle
That will also show a
circular progress indicator

00:23:37.196 --> 00:23:38.546 A:middle
during playback.

00:23:40.696 --> 00:23:43.846 A:middle
All controls automatically show
and hide upon user interaction.

00:23:45.116 --> 00:23:46.696 A:middle
You can change the control
style in interface--

00:23:46.696 --> 00:23:48.036 A:middle
builder or in code at anytime.

00:23:48.686 --> 00:23:53.146 A:middle
For the second and
third control style,

00:23:53.146 --> 00:23:54.226 A:middle
we also have Trim controls.

00:23:54.906 --> 00:23:58.686 A:middle
The screenshot you can see
on the left shows the TrimUI

00:23:58.686 --> 00:24:01.696 A:middle
for the floating
controlsStyle and the screenshot

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:01.696 --> 00:24:03.546 A:middle
on the right shows the TrimUI

00:24:03.546 --> 00:24:06.106 A:middle
for what we call inline
Trim controlsStyle.

00:24:07.326 --> 00:24:09.266 A:middle
As you can see, the only
difference is the margin

00:24:09.266 --> 00:24:18.756 A:middle
around the controls and the
graying on the background.

00:24:18.756 --> 00:24:18.823 A:middle
[ Pause ]

00:24:18.823 --> 00:24:20.616 A:middle
AVPlayerView has
dynamic controls.

00:24:20.936 --> 00:24:23.176 A:middle
This means that if your
content has chapters,

00:24:23.176 --> 00:24:24.996 A:middle
additional language
or subtitles,

00:24:24.996 --> 00:24:26.136 A:middle
it will automatically display--

00:24:26.136 --> 00:24:29.236 A:middle
adds chapter and media selection
pop-up buttons to the UI.

00:24:29.236 --> 00:24:35.056 A:middle
Some of you might have streaming
content in your applications.

00:24:36.466 --> 00:24:38.586 A:middle
AVPlayerView will automatically
switch to a different set

00:24:38.586 --> 00:24:40.526 A:middle
of playback controls
when the content type

00:24:40.526 --> 00:24:42.666 A:middle
of the current AVPlayerItem
changes to streaming.

00:24:42.666 --> 00:24:49.146 A:middle
AVPlayerView has also
API for customization.

00:24:49.766 --> 00:24:51.766 A:middle
For instance, if you
want to allow your users

00:24:51.766 --> 00:24:54.146 A:middle
to share their content
from-- with an AVPlayerView,

00:24:54.176 --> 00:24:56.926 A:middle
all you need to do is to
set one property to yes.

00:24:57.796 --> 00:24:59.626 A:middle
AVPlayerView add the share--

00:24:59.626 --> 00:25:01.236 A:middle
the OS X Share Button
to the UI takes care

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:01.236 --> 00:25:03.336 A:middle
of everything for you.

00:25:03.916 --> 00:25:05.906 A:middle
This includes optimizing
the content

00:25:05.906 --> 00:25:07.766 A:middle
for the destination if needed.

00:25:09.836 --> 00:25:11.426 A:middle
So let's switch our
focus to Trimming now.

00:25:11.716 --> 00:25:14.586 A:middle
As I showed you earlier in
the demo, it is really easy

00:25:14.586 --> 00:25:17.186 A:middle
to add Trimming to your
application via AVPlayerView.

00:25:17.976 --> 00:25:20.086 A:middle
All you need to do is just
call beginTrimmingWith

00:25:20.086 --> 00:25:21.956 A:middle
CompletionHandler and
NULL as the argument.

00:25:21.956 --> 00:25:25.646 A:middle
But since that's not
going to really tell you

00:25:25.646 --> 00:25:27.906 A:middle
that if it would
actually show the TrimUI,

00:25:27.906 --> 00:25:32.436 A:middle
you should always call
canBeginTrimming first though.

00:25:32.656 --> 00:25:34.096 A:middle
This method not only returns no

00:25:34.096 --> 00:25:37.746 A:middle
when AVPlayer already shows
the UI, but it also makes sure

00:25:37.746 --> 00:25:43.276 A:middle
that the current AVPlayerItem
can actually be trimmed.

00:25:43.426 --> 00:25:45.486 A:middle
But what if you are
really interested

00:25:45.486 --> 00:25:49.066 A:middle
in what the user
did in the TrimUI.

00:25:49.066 --> 00:25:52.576 A:middle
We start off with exactly
the same code as before.

00:25:52.576 --> 00:25:55.386 A:middle
This time, we are going to
implement a completion handler.

00:25:55.906 --> 00:26:00.046 A:middle
The CompletionHandler
has just one argument

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:00.046 --> 00:26:01.076 A:middle
of type AVPlayerViewTrimResult.

00:26:01.076 --> 00:26:04.386 A:middle
The result that it will return

00:26:04.386 --> 00:26:06.656 A:middle
to you will either be
AVPlayerViewTrimOKButton

00:26:06.656 --> 00:26:08.986 A:middle
or AVPlayerViewTrimCancelButton.

00:26:09.616 --> 00:26:13.886 A:middle
In the former case we apply
whatever the user chose

00:26:13.886 --> 00:26:17.106 A:middle
in the UI, in the later case
we will set the trim selection

00:26:17.106 --> 00:26:18.256 A:middle
before dismissing the UI.

00:26:18.256 --> 00:26:22.916 A:middle
So I just told you
what AVPlayerView does

00:26:22.916 --> 00:26:24.146 A:middle
when the user interacts
with the TrimUI.

00:26:24.146 --> 00:26:29.596 A:middle
I haven't told you yet what
it does under the hood though.

00:26:29.706 --> 00:26:31.516 A:middle
We're not replacing the
current AVPlayerItem

00:26:31.516 --> 00:26:32.686 A:middle
or creating AVComposition.

00:26:33.546 --> 00:26:37.146 A:middle
Instead, we use existing AV
Foundation API and functionality

00:26:37.146 --> 00:26:38.356 A:middle
for setting the reverse

00:26:38.356 --> 00:26:40.576 A:middle
and forwardPlaybackEndTime
on the AVPlayerItem.

00:26:41.236 --> 00:26:45.116 A:middle
The player controls are
constantly observing these two

00:26:45.116 --> 00:26:47.616 A:middle
values and updating
when calling me.

00:26:48.486 --> 00:26:50.516 A:middle
One important note here,

00:26:50.516 --> 00:26:52.506 A:middle
AVPlayerView does not
provide state restoration

00:26:52.506 --> 00:26:55.466 A:middle
for the AVPlayer property
because we can't guarantee

00:26:55.466 --> 00:26:58.396 A:middle
that we will be able to
restore this object for you.

00:26:59.326 --> 00:27:01.206 A:middle
This means it is
your responsibility

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:01.206 --> 00:27:04.036 A:middle
to restore the content when your
users relaunch the applications.

00:27:08.516 --> 00:27:10.806 A:middle
And this, of course, includes
the reversePlaybackEndTime.

00:27:10.806 --> 00:27:14.416 A:middle
So since we are just
setting some properties

00:27:14.416 --> 00:27:16.386 A:middle
on the current AVPlayerItem
when the user interacts

00:27:16.386 --> 00:27:19.006 A:middle
with the TrimUI the
underlying AVAsset

00:27:19.006 --> 00:27:21.056 A:middle
of course it contains
the entire movie,

00:27:21.556 --> 00:27:25.936 A:middle
which means that
if you use Trimming

00:27:25.936 --> 00:27:27.356 A:middle
and the application
supports export,

00:27:27.356 --> 00:27:30.226 A:middle
you have to set the timeRange
on the AV asset export session.

00:27:30.226 --> 00:27:34.076 A:middle
So first, you get the reverse
and forwardPlaybackEndTime

00:27:34.076 --> 00:27:40.036 A:middle
from the AVPlayerItem and
then you create a CMTimeRange

00:27:40.036 --> 00:27:41.676 A:middle
and set this value
on the ExportSession.

00:27:42.236 --> 00:27:46.296 A:middle
And this is exactly
what we do for sharing.

00:27:49.776 --> 00:27:51.476 A:middle
So wrapping up.

00:27:51.786 --> 00:27:55.326 A:middle
AV Kit is a new UI level Cocoa
framework for AV Foundation.

00:27:55.326 --> 00:27:58.226 A:middle
It provides you view-level
services--

00:27:58.226 --> 00:28:00.606 A:middle
sorry, it provides you standard
playback and trim controls

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.606 --> 00:28:02.036 A:middle
through the AVPlayerView.

00:28:02.036 --> 00:28:07.506 A:middle
With AV Kit you're now able to
use the power of AV Foundation

00:28:07.626 --> 00:28:09.536 A:middle
without having to write your
own custom playback controls

00:28:09.536 --> 00:28:11.106 A:middle
with our AVPlayer layer.

00:28:11.476 --> 00:28:15.226 A:middle
So please consider
adopting AVPlayerView

00:28:15.226 --> 00:28:16.086 A:middle
in your applications.

00:28:17.206 --> 00:28:19.246 A:middle
This will make sure that we
can provide a consistent look

00:28:19.246 --> 00:28:20.746 A:middle
and feel, not only
here in Apple's

00:28:20.746 --> 00:28:23.356 A:middle
but across all media
playback applications in OS X.

00:28:23.976 --> 00:28:27.716 A:middle
And if you have--
still not fully sold

00:28:27.716 --> 00:28:30.156 A:middle
on AVPlayerView maybe
this will convince you.

00:28:32.176 --> 00:28:35.386 A:middle
Starting on OS X Mavericks
QuickTime Player uses AV Kit

00:28:35.386 --> 00:28:36.926 A:middle
from media playback.

00:28:38.536 --> 00:28:41.136 A:middle
The view you see in the middle
is the same AVPlayerView

00:28:41.136 --> 00:28:42.496 A:middle
that you can use in
your applications.

00:28:43.126 --> 00:28:47.106 A:middle
With that, let me call Sam
back on stage to talk to you

00:28:47.106 --> 00:28:48.966 A:middle
about moving from
QuickTime and QTKit

00:28:48.966 --> 00:28:55.266 A:middle
to AV foundation and AV Kit.

00:28:55.266 --> 00:28:57.196 A:middle
[ Applause ]

00:28:57.196 --> 00:28:57.756 A:middle
&gt;&gt; Thank you Stefan.

00:28:57.906 --> 00:28:59.816 A:middle
All right.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:00.816 --> 00:29:03.446 A:middle
So for the rest of this
talk, we're going to talk

00:29:03.446 --> 00:29:07.876 A:middle
about what's involved in
migrating an existing QuickTime

00:29:07.876 --> 00:29:11.716 A:middle
or QTKit application over
to AV Foundation and AV Kit.

00:29:12.186 --> 00:29:15.316 A:middle
How will you get
to AV Foundation?

00:29:15.426 --> 00:29:18.786 A:middle
Well, it depends on how you use
QuickTime and how you use QTKit.

00:29:19.246 --> 00:29:21.186 A:middle
For some developers, it will
be a pretty easy change,

00:29:21.256 --> 00:29:24.416 A:middle
but for others it may
require more refactoring

00:29:24.416 --> 00:29:25.666 A:middle
and deeper thought.

00:29:26.246 --> 00:29:28.616 A:middle
We're not providing
an API for API swap.

00:29:28.616 --> 00:29:32.186 A:middle
We've taken the opportunity
to change the API model

00:29:32.186 --> 00:29:34.096 A:middle
where we think it can
make AV Foundation better.

00:29:35.116 --> 00:29:38.106 A:middle
That said, some of the more
recently developed QTKit APIs,

00:29:38.106 --> 00:29:39.876 A:middle
were actually developed
around the same time

00:29:39.876 --> 00:29:41.496 A:middle
as their AV Foundation
counterparts

00:29:41.856 --> 00:29:43.746 A:middle
and so they have a
very similar API feel.

00:29:44.246 --> 00:29:49.906 A:middle
So, we're going to go through a
bunch of API areas and for each

00:29:49.906 --> 00:29:51.876 A:middle
of these API areas
I will show you--

00:29:51.876 --> 00:29:54.896 A:middle
I'll have some reminders
of the kind of QuickTime

00:29:54.896 --> 00:29:57.886 A:middle
and QTKit APIs you would
have used and then focus

00:29:57.886 --> 00:30:00.736 A:middle
on the AV Foundations
version and some of the things

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.736 --> 00:30:01.566 A:middle
that make that interesting.

00:30:02.076 --> 00:30:07.146 A:middle
So let's start with the basics.

00:30:07.276 --> 00:30:10.396 A:middle
In QuickTime, every AV
resource in use is represented

00:30:10.396 --> 00:30:13.936 A:middle
by capital M, movie
object and for every track,

00:30:14.156 --> 00:30:16.666 A:middle
there is a track object
and a media object.

00:30:16.776 --> 00:30:19.326 A:middle
And QTKit has classes
wrapping all of these.

00:30:20.056 --> 00:30:22.536 A:middle
In AV Foundation, AV
resources are represented

00:30:22.536 --> 00:30:26.046 A:middle
by the AVAsset class and
for every track there is

00:30:26.046 --> 00:30:27.066 A:middle
an AVAssetTrack.

00:30:27.816 --> 00:30:31.226 A:middle
What's different in AV
Foundation is that AVAsset

00:30:31.226 --> 00:30:33.476 A:middle
and AVAssetTrack are immutable.

00:30:33.756 --> 00:30:37.016 A:middle
They provide a read-only
view of the AV resource.

00:30:40.916 --> 00:30:44.616 A:middle
QuickTime and QTKit
have a number of APIs

00:30:45.256 --> 00:30:48.126 A:middle
for creating a movie
or QTMovie object.

00:30:49.056 --> 00:30:51.606 A:middle
In this simplest form they
all operate synchronously

00:30:52.436 --> 00:30:57.026 A:middle
which means that your main
thread is blocked while

00:30:57.566 --> 00:31:02.296 A:middle
QuickTime and QTKit go off and
unload the file and parse it.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:03.216 --> 00:31:05.506 A:middle
With AV Foundation,
creating an AVAsset

00:31:05.506 --> 00:31:10.986 A:middle
from a URL always finishes
very quickly and succeeds,

00:31:11.326 --> 00:31:15.816 A:middle
that's because it hasn't
actually done anything yet.

00:31:15.816 --> 00:31:19.586 A:middle
You can then use the
asynchronous property loading

00:31:19.786 --> 00:31:24.596 A:middle
API to request that AV
Foundation load values--

00:31:24.596 --> 00:31:26.596 A:middle
load some properties
asynchronously

00:31:26.886 --> 00:31:29.606 A:middle
and provide a block that'll
be called when data--

00:31:29.906 --> 00:31:32.176 A:middle
when enough data has
been read and parsed

00:31:32.606 --> 00:31:33.836 A:middle
to produce those values.

00:31:35.146 --> 00:31:40.046 A:middle
So this lets that happen off
on another background queue

00:31:40.146 --> 00:31:41.956 A:middle
and lets you keep the
main thread responsive.

00:31:42.456 --> 00:31:45.536 A:middle
[ Pause ]

00:31:46.036 --> 00:31:49.896 A:middle
In QuickTime and QTKit, the
same movie object is the one

00:31:49.896 --> 00:31:54.166 A:middle
that you would call to
start playback or to pause

00:31:54.306 --> 00:31:56.766 A:middle
or to set the time or to step.

00:31:56.796 --> 00:31:58.256 A:middle
These are called
transport controls.

00:31:59.516 --> 00:32:01.846 A:middle
With AV Foundation,
we have separated

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:01.846 --> 00:32:05.786 A:middle
out the mutable state related to
playback into playback objects.

00:32:06.636 --> 00:32:10.586 A:middle
The principle playback object
is called AVPlayer and that's

00:32:10.586 --> 00:32:12.556 A:middle
where you send rate changes

00:32:12.556 --> 00:32:14.516 A:middle
and that means play
and pause as well.

00:32:17.126 --> 00:32:22.336 A:middle
Now, AVPlayer is designed to be
able to play through a sequence

00:32:22.336 --> 00:32:26.756 A:middle
of AVAssets, automatically
advancing

00:32:26.756 --> 00:32:30.026 A:middle
when each reaches its
end time, in some cases

00:32:30.026 --> 00:32:31.256 A:middle
with gapless transitions.

00:32:31.806 --> 00:32:36.016 A:middle
So this design goal
led us to take

00:32:36.016 --> 00:32:41.226 A:middle
out the per item state
related to playback

00:32:41.556 --> 00:32:43.726 A:middle
into its own object
called AVPlayerItem.

00:32:44.456 --> 00:32:47.266 A:middle
This is where you
tell-- this is the object

00:32:47.266 --> 00:32:52.206 A:middle
that you send messages
to seek and to step.

00:32:52.206 --> 00:32:55.136 A:middle
AVPlayer's subclass
AVQueuePlayer can play

00:32:55.136 --> 00:32:56.966 A:middle
through a sequence
of AVPlayerItems

00:32:57.206 --> 00:32:59.236 A:middle
and each will advance when
it reaches its end time.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.436 --> 00:33:02.986 A:middle
So this is an example of how
we've refactored the object

00:33:02.986 --> 00:33:07.666 A:middle
in order to give us more
flexibility in the API.

00:33:07.886 --> 00:33:11.126 A:middle
Another thing to know is
that AVPlayerItems default

00:33:11.346 --> 00:33:14.126 A:middle
when you seek is to
snap to a keyframe.

00:33:14.706 --> 00:33:19.466 A:middle
This is because keyframe is
the most efficient display

00:33:19.466 --> 00:33:21.926 A:middle
for random access and
also the most efficient

00:33:21.956 --> 00:33:23.006 A:middle
to start playback from.

00:33:23.586 --> 00:33:26.376 A:middle
But there's a variant
of seekToTime

00:33:26.576 --> 00:33:28.596 A:middle
where you can specify
a tolerance range.

00:33:29.576 --> 00:33:30.836 A:middle
If there's a keyframe inside

00:33:30.836 --> 00:33:32.576 A:middle
that tolerance range
then we'll snap to it.

00:33:32.856 --> 00:33:34.246 A:middle
If there's no keyframe inside

00:33:34.246 --> 00:33:35.826 A:middle
that tolerance range
then we'll snap--

00:33:35.826 --> 00:33:38.416 A:middle
it will seek exactly
the time you specified.

00:33:38.926 --> 00:33:43.956 A:middle
If you specified tolerance of
0 then we always seek exactly

00:33:43.956 --> 00:33:45.036 A:middle
to the time you specified.

00:33:45.536 --> 00:33:51.706 A:middle
If you've used the
QTMovieView to integrate

00:33:51.706 --> 00:33:53.766 A:middle
into a view hierarchy
then you should check

00:33:53.766 --> 00:33:56.496 A:middle
out the new AVPlayerView
class in AV Kit

00:33:57.026 --> 00:33:58.446 A:middle
that Stefan demonstrated.

00:33:59.636 --> 00:34:02.096 A:middle
One thing that's different
if you used a QTMovieView is

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:02.336 --> 00:34:05.876 A:middle
that the transport control
methods are not re-exported

00:34:05.876 --> 00:34:07.046 A:middle
by the view object.

00:34:07.566 --> 00:34:10.196 A:middle
You make those calls directly
on the underlying AVPlayer.

00:34:10.876 --> 00:34:16.216 A:middle
And AV Foundation provides
the AVPlayerLayer class

00:34:16.216 --> 00:34:19.846 A:middle
for integrating into a Core
Animation layer hierarchy.

00:34:20.806 --> 00:34:24.505 A:middle
It also provides the
AVSynchronizedLayer class

00:34:24.906 --> 00:34:28.416 A:middle
for synchronizing Core
Animation layer animations

00:34:28.936 --> 00:34:31.176 A:middle
to match the time
of a playerItem

00:34:32.556 --> 00:34:36.876 A:middle
as the playerItem's time and
rate change, so will the time

00:34:36.876 --> 00:34:40.436 A:middle
and rate of that
synchronized layer.

00:34:40.656 --> 00:34:43.525 A:middle
We've demonstrated in
previous year's sessions how

00:34:43.525 --> 00:34:46.985 A:middle
to use this class for
editing applications.

00:34:47.505 --> 00:34:49.246 A:middle
But there are other
ways you could use it

00:34:49.246 --> 00:34:50.815 A:middle
that aren't editing
applications as well.

00:34:51.246 --> 00:34:57.065 A:middle
Another thing to know is that
in applications linked on

00:34:57.065 --> 00:35:02.626 A:middle
or after iOS 7 or on or
after Mavericks by default,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:02.626 --> 00:35:08.146 A:middle
AVPlayerLayer and AVPlayerView
will both honor the user's

00:35:08.786 --> 00:35:11.796 A:middle
choices for media accessibility
by-- automatically.

00:35:12.896 --> 00:35:14.506 A:middle
This may not work
in the current seed

00:35:14.506 --> 00:35:15.936 A:middle
but it will work fine
in the next seed.

00:35:16.416 --> 00:35:21.686 A:middle
We have a session coming
up tomorrow on preparing

00:35:21.686 --> 00:35:23.416 A:middle
and presenting media for
accessibility that goes

00:35:23.416 --> 00:35:27.896 A:middle
into more details about what it
means for the playback pipeline

00:35:28.476 --> 00:35:30.836 A:middle
to honor the user's media
accessibility options.

00:35:31.366 --> 00:35:37.186 A:middle
Let's move on to
authoring and editing APIs.

00:35:39.276 --> 00:35:43.486 A:middle
QuickTime has a number of high
level movie transcoding APIs

00:35:43.486 --> 00:35:45.086 A:middle
and these are all synchronous.

00:35:45.636 --> 00:35:49.506 A:middle
And QTMovie has a
writeToFile method

00:35:49.686 --> 00:35:52.336 A:middle
which wraps these
synchronous APIs.

00:35:52.776 --> 00:35:54.466 A:middle
And in QuickTime-- sorry,

00:35:54.466 --> 00:36:01.336 A:middle
in OS 10.7 we introduced
an asynchronous

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:01.586 --> 00:36:03.026 A:middle
QTExportSession API.

00:36:04.306 --> 00:36:05.376 A:middle
Well, AV Foundation's,

00:36:05.376 --> 00:36:08.786 A:middle
AVAssetExportSession
API is also asynchronous

00:36:09.296 --> 00:36:11.646 A:middle
and it's internal pipeline
is deeply multithreaded.

00:36:12.896 --> 00:36:14.876 A:middle
It's also preset
based which means

00:36:14.876 --> 00:36:18.216 A:middle
that you can offer your users
high level options like 1280

00:36:18.216 --> 00:36:22.216 A:middle
by 720, and let AV Foundation
choose a well tuned bit-rate

00:36:22.216 --> 00:36:22.866 A:middle
for the encoding.

00:36:23.706 --> 00:36:26.966 A:middle
If you need more control
or if you need access

00:36:26.966 --> 00:36:29.916 A:middle
to the media frames--
the data that's going--

00:36:29.916 --> 00:36:32.306 A:middle
going through the pipeline then
you can use the combination

00:36:32.306 --> 00:36:36.226 A:middle
of the AVAssetReader and
AVAssetWriter classes.

00:36:40.826 --> 00:36:45.996 A:middle
With QuickTime, the APIs that
you'd use for reading media data

00:36:45.996 --> 00:36:47.806 A:middle
from a file were
different depending

00:36:47.806 --> 00:36:50.546 A:middle
on whether you wanted the data
be decoded or not decoded.

00:36:51.406 --> 00:36:52.386 A:middle
With AV Foundation,

00:36:52.426 --> 00:36:56.706 A:middle
AVAssetReader provides
features for both of these.

00:36:57.156 --> 00:36:58.806 A:middle
It depends on how
you configure it.

00:36:59.126 --> 00:37:01.186 A:middle
When you create the
AVAssetReader output

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:01.516 --> 00:37:03.726 A:middle
to decode data-- to
retrieve data from a track,

00:37:04.326 --> 00:37:07.856 A:middle
if you pass an output settings
dictionary then we will decode

00:37:07.856 --> 00:37:09.366 A:middle
data into the format
you request.

00:37:09.656 --> 00:37:13.716 A:middle
If you pass a nil outputSettings
dictionary then we won't

00:37:13.716 --> 00:37:14.726 A:middle
decode it.

00:37:16.616 --> 00:37:20.026 A:middle
Now, I should note
that the QuickTime APIs

00:37:20.196 --> 00:37:23.136 A:middle
for reading video
data are synchronous.

00:37:23.256 --> 00:37:24.646 A:middle
They don't begin loading

00:37:24.646 --> 00:37:27.746 A:middle
and decoding video data
until you request it.

00:37:28.686 --> 00:37:33.546 A:middle
By contrast, AVAssetReaders
pipeline inside is

00:37:33.696 --> 00:37:34.676 A:middle
deeply multithreaded.

00:37:37.776 --> 00:37:41.206 A:middle
The file reading,
the video decoding,

00:37:41.206 --> 00:37:45.436 A:middle
and the audio decoding
all happen asynchronously

00:37:45.606 --> 00:37:46.606 A:middle
and in parallel.

00:37:49.076 --> 00:37:53.366 A:middle
This means that when you-- when
you pull a new media sample

00:37:53.366 --> 00:37:56.196 A:middle
out of the queues at the end
the latency when you make

00:37:56.196 --> 00:37:57.516 A:middle
that request is very, very low.

00:37:57.916 --> 00:37:59.446 A:middle
It has probably already
decoded it

00:37:59.676 --> 00:38:02.936 A:middle
in the background while you were
working on the previous frame.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:05.616 --> 00:38:09.586 A:middle
The QuickTime APIs for writing
media files are also synchronous

00:38:09.586 --> 00:38:10.966 A:middle
and the same with QTKit.

00:38:11.926 --> 00:38:14.486 A:middle
AV Foundation provides
the AVAssetWriter API

00:38:15.086 --> 00:38:18.646 A:middle
and its pipeline is, you guessed
it, deeply multithreaded.

00:38:20.066 --> 00:38:23.606 A:middle
And you can configure it to
encode data, encode the video

00:38:23.606 --> 00:38:26.656 A:middle
for you-- encode the audio
for you or you can use it

00:38:26.846 --> 00:38:31.456 A:middle
to write already prepared
data to a movie file.

00:38:31.756 --> 00:38:34.246 A:middle
AVAssetWriter also provides
you much more control

00:38:34.246 --> 00:38:35.336 A:middle
over how you encode.

00:38:36.616 --> 00:38:38.836 A:middle
For some developers they find

00:38:38.836 --> 00:38:40.456 A:middle
that this control is
actually too much control

00:38:40.456 --> 00:38:41.806 A:middle
and they want preset access.

00:38:42.276 --> 00:38:43.396 A:middle
They'd like to be
able to use presets

00:38:43.396 --> 00:38:44.896 A:middle
like AVAssetExportSession.

00:38:45.316 --> 00:38:46.646 A:middle
Well, that's what we've
done in Mavericks,

00:38:46.906 --> 00:38:48.656 A:middle
we've added
AVOutputSettingsAssistant

00:38:48.946 --> 00:38:51.816 A:middle
which lets you use
presets as a starting point

00:38:51.816 --> 00:38:55.336 A:middle
for picking good output
settings for AVAssetWriter.

00:38:57.206 --> 00:38:59.656 A:middle
So, AVOutputSettingsAssistant
is new

00:38:59.656 --> 00:39:06.066 A:middle
in Mavericks and new in iOS 7.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:06.166 --> 00:39:09.336 A:middle
Also in the session tomorrow on
preparing and presenting media

00:39:09.336 --> 00:39:11.686 A:middle
for accessibility we'll go
into more detail about how

00:39:11.686 --> 00:39:15.586 A:middle
to use AVAssetWriter to
construct subtitle tracks

00:39:16.046 --> 00:39:17.496 A:middle
and alternate audio tracks.

00:39:17.496 --> 00:39:21.436 A:middle
But let me go into more detail

00:39:21.436 --> 00:39:24.566 A:middle
about the internal
pipeline of AVAssetWriter.

00:39:25.276 --> 00:39:28.466 A:middle
Like I said it's deeply
multithreaded which means

00:39:28.806 --> 00:39:33.806 A:middle
that the video encoding
and the audio encoding,

00:39:33.806 --> 00:39:37.026 A:middle
and the file writing can
all happen asynchronously

00:39:37.026 --> 00:39:38.946 A:middle
and in parallel with each other.

00:39:42.076 --> 00:39:44.146 A:middle
But let's think about
how we construct movies,

00:39:44.596 --> 00:39:47.556 A:middle
in order to construct a movie
for efficient playback we want

00:39:47.556 --> 00:39:49.976 A:middle
to alternate, we want to
interleave, audio and video

00:39:49.976 --> 00:39:51.896 A:middle
and any of the track types.

00:39:52.216 --> 00:39:54.596 A:middle
This means that the
file writing queue,

00:39:54.596 --> 00:39:58.616 A:middle
the file writing process inside
AVAssetWriter will alternate

00:39:58.956 --> 00:40:01.296 A:middle
between the different
tracks, writing a portion

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:01.296 --> 00:40:05.096 A:middle
of media data from each in turn.

00:40:05.296 --> 00:40:09.956 A:middle
Well, this means that sometimes,
if that file writing code runs

00:40:09.956 --> 00:40:11.396 A:middle
out of data on one track,

00:40:12.246 --> 00:40:15.846 A:middle
then pretty soon it will
stop consuming media data

00:40:15.846 --> 00:40:18.576 A:middle
on the other tracks until there
is more data on that track

00:40:18.576 --> 00:40:19.426 A:middle
that it's waiting for.

00:40:20.336 --> 00:40:22.846 A:middle
In fact, at some point it's
going to need to be able to say

00:40:22.846 --> 00:40:24.986 A:middle
to you at the API level, "Stop.

00:40:24.986 --> 00:40:27.266 A:middle
I'm not ready for more.

00:40:27.266 --> 00:40:29.876 A:middle
I don't want more data on these
tracks until I have more data

00:40:29.876 --> 00:40:32.356 A:middle
on that track," or for
you to say, "Actually,

00:40:32.356 --> 00:40:34.586 A:middle
I'm completely done giving
you data on that other track."

00:40:35.686 --> 00:40:43.236 A:middle
So, there is a flow control API
built into AVAssetWriter input

00:40:43.846 --> 00:40:45.326 A:middle
where you can query to say,

00:40:45.326 --> 00:40:47.466 A:middle
"Is this input ready
for more media data?"

00:40:47.526 --> 00:40:50.556 A:middle
And there's also an API
utility where you can ask it

00:40:50.556 --> 00:40:53.716 A:middle
to call a block over and
over and over just as long

00:40:53.716 --> 00:40:55.906 A:middle
as it's ready for more input.

00:40:58.236 --> 00:41:02.756 A:middle
If you wanted to get access to
video frames during playback,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:03.096 --> 00:41:07.056 A:middle
for example, to integrate them
into a custom OpenGL rendering,

00:41:07.646 --> 00:41:10.416 A:middle
QuickTime and QTKit provided
a way that you could set

00:41:10.416 --> 00:41:13.336 A:middle
up a visual context to
retrieve those video frames.

00:41:14.336 --> 00:41:16.236 A:middle
AV Foundation's API
for doing this is

00:41:16.236 --> 00:41:18.406 A:middle
called AVPlayerItemVideoOutput.

00:41:18.916 --> 00:41:22.876 A:middle
And similarly, there
was also a way,

00:41:22.876 --> 00:41:24.786 A:middle
that you could set
up an audio context.

00:41:25.346 --> 00:41:28.206 A:middle
And the audio context was
a way that you could tap

00:41:28.206 --> 00:41:32.086 A:middle
into the audio waveform as it
went past, either for analysis

00:41:32.316 --> 00:41:33.786 A:middle
or even to modify the waveform

00:41:33.786 --> 00:41:36.386 A:middle
to provide some kind
of audio effect.

00:41:37.576 --> 00:41:40.796 A:middle
AV Foundation in Mavericks
provides this API as well.

00:41:41.066 --> 00:41:44.266 A:middle
It's called an audio
processing tap and it's an API

00:41:44.316 --> 00:41:47.736 A:middle
that you install an
object onto an AV audio mix

00:41:48.306 --> 00:41:52.016 A:middle
and then you can install that AV
audio mix on to an AVPlayerItem

00:41:52.906 --> 00:41:55.186 A:middle
or on to an
AVAssetExportSession,

00:41:55.776 --> 00:42:00.196 A:middle
or onto an
AVAssetReaderAudioMixOutput.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:01.086 --> 00:42:08.246 A:middle
(It's like Dr. Seuss.)

00:42:08.436 --> 00:42:10.016 A:middle
Sometimes, you just want
to get a still image

00:42:10.016 --> 00:42:12.296 A:middle
out of a video file,

00:42:12.296 --> 00:42:14.496 A:middle
QTKit provided a utility
method for doing this.

00:42:14.496 --> 00:42:16.436 A:middle
AV Foundation provides
a whole class

00:42:16.756 --> 00:42:20.906 A:middle
and this class has both a
synchronous one-shot API

00:42:20.906 --> 00:42:23.276 A:middle
and an asynchronous batch API.

00:42:26.636 --> 00:42:30.646 A:middle
Editing. So, all three
of these, QuickTime,

00:42:30.646 --> 00:42:35.086 A:middle
QTKit and AV Foundation - all
provide APIs for inserting,

00:42:35.086 --> 00:42:39.306 A:middle
deleting, and scaling segments
expressed as time ranges

00:42:39.806 --> 00:42:42.786 A:middle
and these are really high level,
powerful APIs that you can use

00:42:43.146 --> 00:42:49.346 A:middle
to deliver high level user
focused editing experiences.

00:42:49.866 --> 00:42:55.616 A:middle
With QuickTime and QTKit,
these are methods on the movie

00:42:55.616 --> 00:42:57.066 A:middle
and the QTMovie objects.

00:42:57.496 --> 00:42:59.706 A:middle
With AV Foundation,
AVAsset is immutable.

00:42:59.706 --> 00:43:00.876 A:middle
So it can't be there.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:00.876 --> 00:43:03.996 A:middle
Instead, we have subclass of
AVAsset called AVComposition

00:43:04.486 --> 00:43:07.046 A:middle
and it has immutable
and mutable variants.

00:43:08.026 --> 00:43:12.356 A:middle
Similarly, AVAssetTrack
has AVCompositionTrack

00:43:12.356 --> 00:43:14.546 A:middle
and there's an
AVMutableCompositionTrack

00:43:14.546 --> 00:43:14.866 A:middle
as well.

00:43:16.176 --> 00:43:17.126 A:middle
But it is important to know

00:43:17.126 --> 00:43:19.706 A:middle
that the API model is actually
different in AV Foundation.

00:43:20.416 --> 00:43:23.266 A:middle
This is a bit of an
advanced topic here.

00:43:24.396 --> 00:43:27.516 A:middle
But in all three
cases, QuickTime, QTKit,

00:43:27.516 --> 00:43:31.126 A:middle
and AV Foundation,
these editing APIs work

00:43:31.206 --> 00:43:34.576 A:middle
by manipulating a data
structure called an edit list.

00:43:35.486 --> 00:43:41.606 A:middle
An edit list is part of a track
inside the corresponding objects

00:43:42.346 --> 00:43:46.496 A:middle
and it is a data structure
that says play A for B seconds

00:43:46.496 --> 00:43:49.596 A:middle
and then play C for
D seconds, and so on.

00:43:50.906 --> 00:43:55.566 A:middle
Well, with QuickTime and QTKit,
to insert a segment of one movie

00:43:55.566 --> 00:43:58.786 A:middle
into another requires a bunch
of sample table copying.

00:43:59.526 --> 00:44:04.916 A:middle
This is because in this API, a
movie's edit list can only refer

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:04.916 --> 00:44:06.836 A:middle
to that own movie's
sample tables.

00:44:07.396 --> 00:44:14.496 A:middle
AV Foundation's AVComposition's
edit lists do not require

00:44:14.566 --> 00:44:17.296 A:middle
that the sample table
be in the same asset.

00:44:17.756 --> 00:44:21.006 A:middle
So, it isn't necessary for
the sample table copying

00:44:21.006 --> 00:44:23.776 A:middle
to have occurred and that
makes it a bit more efficient

00:44:23.776 --> 00:44:24.656 A:middle
when you're doing the editing.

00:44:24.886 --> 00:44:26.996 A:middle
It also means that if
you insert a bunch of--

00:44:27.186 --> 00:44:30.006 A:middle
insert a bunch of clips and then
you delete them, you're not left

00:44:30.006 --> 00:44:33.646 A:middle
with leftover sample table
references that you don't need.

00:44:34.616 --> 00:44:37.936 A:middle
Another way of thinking
about this is that QuickTime

00:44:37.936 --> 00:44:40.606 A:middle
and AV Foundation
have different ways

00:44:40.606 --> 00:44:41.896 A:middle
that they do their references.

00:44:42.396 --> 00:44:46.936 A:middle
AV Foundation is using a
segment-level file reference

00:44:47.716 --> 00:44:50.736 A:middle
and QuickTime and QTKit are
using a sample-level reference.

00:44:51.276 --> 00:44:57.196 A:middle
If you have been using
the QTKit metadata API,

00:44:57.726 --> 00:44:59.036 A:middle
then here's some good news.

00:44:59.516 --> 00:45:03.556 A:middle
AV Foundation's AVMetadataItem
API is very similar.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:04.086 --> 00:45:05.446 A:middle
In fact, if you look up there,

00:45:05.446 --> 00:45:07.646 A:middle
you might be hard pressed
to find a difference.

00:45:08.076 --> 00:45:10.406 A:middle
Well, one little difference
that's on the slide is

00:45:10.406 --> 00:45:12.666 A:middle
that it's using Objective-C
property,

00:45:13.026 --> 00:45:18.336 A:middle
Objective-C 2 property, API's as
a way of describing the methods.

00:45:18.336 --> 00:45:19.276 A:middle
That's not really
so interesting.

00:45:19.276 --> 00:45:21.386 A:middle
The more interesting thing is

00:45:21.826 --> 00:45:26.076 A:middle
that metadata is no
longer loaded eagerly.

00:45:28.896 --> 00:45:31.076 A:middle
So, just like those
other properties

00:45:31.076 --> 00:45:33.496 A:middle
that you can use the
asynchronous key value loading

00:45:33.576 --> 00:45:36.166 A:middle
API, you use the
same API to request

00:45:36.166 --> 00:45:38.206 A:middle
that the metadata be
loaded and it can be loaded

00:45:38.206 --> 00:45:40.496 A:middle
on the background thread and
keep your main thread free

00:45:40.856 --> 00:45:43.966 A:middle
up for user responsiveness.

00:45:44.486 --> 00:45:49.656 A:middle
Let's move on to capture APIs.

00:45:49.656 --> 00:45:49.723 A:middle
[ Pause ]

00:45:49.723 --> 00:46:00.006 A:middle
The QTKit and AV Foundation
capture APIs are also broadly

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:00.006 --> 00:46:00.606 A:middle
very similar.

00:46:01.156 --> 00:46:09.076 A:middle
In both cases, you have a
capture session object and for

00:46:09.266 --> 00:46:12.276 A:middle
that capture session
object you add inputs

00:46:12.886 --> 00:46:15.276 A:middle
and outputs, and previews.

00:46:17.886 --> 00:46:20.576 A:middle
Now, with QTKit and AV
Foundation, in both of those,

00:46:20.576 --> 00:46:26.346 A:middle
there is a simple mode of the
API in which you automatically--

00:46:26.686 --> 00:46:28.426 A:middle
sorry, in which the session
automatically helps you build

00:46:28.426 --> 00:46:28.966 A:middle
the connections.

00:46:29.536 --> 00:46:32.576 A:middle
When you add the
inputs and the outputs,

00:46:32.946 --> 00:46:34.996 A:middle
it automatically builds
capture connections

00:46:35.176 --> 00:46:36.546 A:middle
by matching media types.

00:46:36.756 --> 00:46:40.826 A:middle
So, it links up all of the video
inputs to outputs and it links

00:46:40.826 --> 00:46:42.906 A:middle
up all of the audio
inputs to audio outputs.

00:46:43.546 --> 00:46:46.776 A:middle
But with AV Foundation there
is also an alternative more

00:46:46.776 --> 00:46:50.096 A:middle
advanced form of the API, and
in this more advanced form,

00:46:50.476 --> 00:46:53.726 A:middle
you use a different method and
you say, "No connections please.

00:46:53.856 --> 00:46:55.706 A:middle
I don't want you to build the
connections automatically.

00:46:56.026 --> 00:46:58.746 A:middle
I will make explicit calls
to set them up myself."

00:46:59.216 --> 00:47:02.346 A:middle
And this is a better choice if
you have multiple video inputs,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:02.346 --> 00:47:05.786 A:middle
multiple cameras, or if
you have multiple previews,

00:47:06.036 --> 00:47:07.766 A:middle
or if you have multiple
file outputs

00:47:08.836 --> 00:47:12.106 A:middle
because you can construct
exactly the graph that you want

00:47:13.246 --> 00:47:14.996 A:middle
by constructing those
connections yourself.

00:47:17.246 --> 00:47:23.696 A:middle
So, going through the inputs
and outputs, most of the inputs

00:47:23.696 --> 00:47:26.296 A:middle
and outputs are the same but
there are some extensions

00:47:26.346 --> 00:47:27.336 A:middle
and some improvements.

00:47:28.066 --> 00:47:32.546 A:middle
AV Foundation has a CaptureInput
object for capturing

00:47:32.546 --> 00:47:35.616 A:middle
from the screen and we've
done some work in Mavericks

00:47:35.876 --> 00:47:38.036 A:middle
to improve performance
of screen capture

00:47:38.136 --> 00:47:40.676 A:middle
when the cursor is visible
in the captured frames.

00:47:41.176 --> 00:47:43.176 A:middle
[ Pause ]

00:47:43.676 --> 00:47:48.676 A:middle
In QTKit when you added
a video preview layer,

00:47:48.896 --> 00:47:51.176 A:middle
it would automatically
create a video preview output

00:47:51.236 --> 00:47:53.766 A:middle
and that output object
was how you configured

00:47:53.766 --> 00:47:54.566 A:middle
certain properties.

00:47:56.536 --> 00:47:59.016 A:middle
Well, we no longer--
in AV Foundation,

00:47:59.016 --> 00:48:02.976 A:middle
we don't have the video preview
output object, we've folded all

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:02.976 --> 00:48:05.906 A:middle
of those configuration APIs
into the video preview layer.

00:48:05.906 --> 00:48:08.206 A:middle
So, they're just one
stop for you to access

00:48:08.206 --> 00:48:09.586 A:middle
to get those configured.

00:48:10.116 --> 00:48:12.426 A:middle
And the video data output

00:48:12.426 --> 00:48:16.636 A:middle
and the audio data output
can produce both uncompressed

00:48:16.636 --> 00:48:19.836 A:middle
or compressed data,
and if available

00:48:19.836 --> 00:48:21.006 A:middle
on the hardware you're using,

00:48:21.006 --> 00:48:23.876 A:middle
the video encoding will
be hardware accelerated.

00:48:24.286 --> 00:48:28.196 A:middle
And there's also an audio file
output to write to an audio file

00:48:28.196 --> 00:48:30.486 A:middle
like a CAF file and
there's an output

00:48:30.716 --> 00:48:33.776 A:middle
for writing a still
image, for example,

00:48:33.776 --> 00:48:34.806 A:middle
when you take the photograph.

00:48:35.976 --> 00:48:38.966 A:middle
Another thing to know
about the output object is

00:48:38.966 --> 00:48:40.376 A:middle
that whenever there's
a delegate,

00:48:41.616 --> 00:48:43.456 A:middle
object that you can install,

00:48:43.456 --> 00:48:47.676 A:middle
you can also specify what
dispatch queue your delegate

00:48:47.906 --> 00:48:52.326 A:middle
callback will be called on.

00:48:52.326 --> 00:48:58.236 A:middle
The device discovery APIs you
can see here is very similar.

00:48:58.236 --> 00:49:01.496 A:middle
In both cases, there's an API to
get all devices, there's an API

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:01.496 --> 00:49:03.446 A:middle
to get all the devices
with particular media type.

00:49:03.806 --> 00:49:05.386 A:middle
The default device
with the media type,

00:49:05.716 --> 00:49:07.076 A:middle
and if you already
know a unique ID,

00:49:07.076 --> 00:49:09.046 A:middle
you can get that device as well.

00:49:09.606 --> 00:49:13.726 A:middle
What's different with
AV Foundation is a piece

00:49:13.816 --> 00:49:20.056 A:middle
of final deprecation with
QTKit in a 32-bit app,

00:49:21.076 --> 00:49:25.516 A:middle
the old ancient QuickTime
sequence grabber video digitizer

00:49:25.516 --> 00:49:28.356 A:middle
components were grandfathered
into the device input list.

00:49:28.896 --> 00:49:32.886 A:middle
AV Foundation does not
grandfather those old sequence

00:49:32.886 --> 00:49:33.556 A:middle
grabber components.

00:49:33.816 --> 00:49:37.146 A:middle
It only supports the
modern DAL and HAL devices.

00:49:41.296 --> 00:49:43.986 A:middle
And AV Foundation provides
that video preview layer

00:49:43.986 --> 00:49:47.316 A:middle
like we discussed and
the interfaces that used

00:49:47.316 --> 00:49:49.646 A:middle
to be configured through the
video preview output object

00:49:49.646 --> 00:49:52.016 A:middle
and now ones you access
through the preview layer.

00:49:52.566 --> 00:49:55.166 A:middle
There's no direct analog
to the QTKit capture view

00:49:55.436 --> 00:49:58.486 A:middle
but you can take that layer
and put inside a view just

00:49:58.486 --> 00:50:01.076 A:middle
like you would with any
other core animation layer.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:02.806 --> 00:50:04.906 A:middle
So we've gone through a
bunch of high level things.

00:50:05.146 --> 00:50:08.956 A:middle
Let's dig down into
some low level stuff,

00:50:09.266 --> 00:50:10.566 A:middle
beginning with time.

00:50:12.126 --> 00:50:16.626 A:middle
We, in media systems, are of
the opinion that the right way

00:50:16.626 --> 00:50:20.886 A:middle
to represent time in a media
system is as a rational number.

00:50:21.906 --> 00:50:25.686 A:middle
Floating point numbers will
almost always introduce some

00:50:25.686 --> 00:50:28.686 A:middle
kind of rounding error because
the numbers never have--

00:50:28.686 --> 00:50:30.586 A:middle
never happen to be expressed--

00:50:30.586 --> 00:50:32.586 A:middle
exactly expressible as
floating point numbers.

00:50:33.946 --> 00:50:35.676 A:middle
And when you add this up by
the millions, they can lead

00:50:35.676 --> 00:50:37.166 A:middle
up to measurable drift.

00:50:37.546 --> 00:50:39.166 A:middle
So, we use rational numbers.

00:50:39.436 --> 00:50:42.036 A:middle
And in order to support
really long media files,

00:50:42.036 --> 00:50:45.256 A:middle
you need to use a 64-bit time
value and a 32-bit time scale.

00:50:45.476 --> 00:50:47.336 A:middle
The time value is our
name for the numerator

00:50:47.336 --> 00:50:49.696 A:middle
and the time scale is our
name for the denominator.

00:50:51.776 --> 00:50:55.586 A:middle
Now, QuickTime had
a 64-bit numerator,

00:50:55.586 --> 00:50:58.686 A:middle
32-bit denominator time
object called the TimeRecord.

00:50:59.176 --> 00:51:01.466 A:middle
But, in the very early 1990s,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:02.436 --> 00:51:05.016 A:middle
doing 64-bit math
was really awkward.

00:51:05.656 --> 00:51:10.956 A:middle
And so, there were shortcuts
where you'd pass a time value

00:51:10.956 --> 00:51:12.486 A:middle
that was a just a
32-bit time value.

00:51:13.306 --> 00:51:15.526 A:middle
And these shortcuts looked

00:51:15.526 --> 00:51:17.266 A:middle
like they were good
conveniences 'cause, you know,

00:51:17.266 --> 00:51:18.996 A:middle
most movies were that
short, that's fine.

00:51:19.216 --> 00:51:20.716 A:middle
But unfortunately, they
were also shortcuts

00:51:20.716 --> 00:51:22.636 A:middle
that were taken inside
QuickTime and that meant

00:51:22.636 --> 00:51:23.786 A:middle
that you couldn't
really take advantage

00:51:23.786 --> 00:51:25.166 A:middle
of that full 64-bit size.

00:51:25.756 --> 00:51:30.306 A:middle
QTKit has a QTTime which is a
struct for the 64-bit numerator

00:51:30.306 --> 00:51:32.266 A:middle
and 32-bit denominator
used in many of its APIs.

00:51:32.266 --> 00:51:35.036 A:middle
It's great, but it's
still using QuickTime

00:51:35.036 --> 00:51:36.096 A:middle
for playback and editing.

00:51:36.096 --> 00:51:37.226 A:middle
And so, it was kind of hamstrung

00:51:37.226 --> 00:51:38.506 A:middle
by that limitation
in the pipeline.

00:51:38.506 --> 00:51:42.726 A:middle
But with AV Foundation
just like QTKit,

00:51:42.796 --> 00:51:46.556 A:middle
we have a struct called CMTime
which has a 64-bit numerator,

00:51:46.556 --> 00:51:48.776 A:middle
a 32-bit denominator, and
a bunch of other cool stuff

00:51:48.776 --> 00:51:50.446 A:middle
that you can look
in the header file.

00:51:50.806 --> 00:51:53.886 A:middle
And just like QTKit, there's
a time range a CMTime range

00:51:53.996 --> 00:51:59.526 A:middle
expressed as two times-- as two
CMTimes, a start and a duration.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:00.176 --> 00:52:03.066 A:middle
And there's also a
CMTimeMapping which is expressed

00:52:03.066 --> 00:52:05.686 A:middle
as two time ranges, a
source and a target,

00:52:05.686 --> 00:52:07.066 A:middle
and that's used in
some editing APIs.

00:52:07.066 --> 00:52:12.376 A:middle
But the really good news is
there's no 32-bit shortcut

00:52:12.376 --> 00:52:14.366 A:middle
which means we didn't use
a 32-bit shortcut either

00:52:14.366 --> 00:52:16.686 A:middle
and you can use that
full 64-bit size.

00:52:18.116 --> 00:52:21.136 A:middle
The APIs, the objects
that represent time

00:52:21.136 --> 00:52:22.416 A:middle
when it's moving
are very similar.

00:52:22.486 --> 00:52:23.916 A:middle
In both cases, there's
a clock object

00:52:23.916 --> 00:52:26.346 A:middle
that represents an external
source of moving time

00:52:26.866 --> 00:52:28.366 A:middle
which is not under
program control

00:52:28.366 --> 00:52:30.846 A:middle
and then there's a timebase
that you can set the rate

00:52:30.846 --> 00:52:32.146 A:middle
and set the time and so forth.

00:52:32.196 --> 00:52:35.886 A:middle
And the timebase's time
comes from its master

00:52:35.886 --> 00:52:37.936 A:middle
which could be a clock
or another timebase.

00:52:38.386 --> 00:52:40.716 A:middle
That's a model that we
like and we've continued.

00:52:44.496 --> 00:52:48.486 A:middle
QuickTime, in some places
QTKit, would use a--

00:52:48.646 --> 00:52:52.516 A:middle
non-opaque data structure called
the SampleDescriptionHandle

00:52:52.516 --> 00:52:55.096 A:middle
to describe compressed data.

00:52:56.886 --> 00:52:59.436 A:middle
Originally, it was read
and written directly

00:52:59.436 --> 00:53:01.426 A:middle
from movie files
and that was great

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:01.426 --> 00:53:03.536 A:middle
when everything was big-endian
and the file is big-endian,

00:53:03.536 --> 00:53:06.056 A:middle
and the Mac is big-endian,
woo-hoo, but then we ported

00:53:06.056 --> 00:53:09.736 A:middle
to Intel processors and we had
to endian flip it and we had

00:53:09.736 --> 00:53:12.166 A:middle
to have rather complicated
rules for how you endian flip it

00:53:12.616 --> 00:53:15.746 A:middle
and some pieces stay big-endian
in memory and that's kind

00:53:15.746 --> 00:53:16.876 A:middle
of weird to deal with as well.

00:53:16.876 --> 00:53:18.896 A:middle
So, we've learned that lesson

00:53:19.656 --> 00:53:22.796 A:middle
and now we have a rather
nice FormatDescription object

00:53:22.796 --> 00:53:23.816 A:middle
which has a clean API.

00:53:23.816 --> 00:53:27.926 A:middle
And we also had a rather
nice SampleBuffer object

00:53:28.206 --> 00:53:30.876 A:middle
for holding individual samples.

00:53:30.926 --> 00:53:32.326 A:middle
It retains the format
description.

00:53:32.366 --> 00:53:33.896 A:middle
It carries timing information.

00:53:34.246 --> 00:53:36.546 A:middle
The data that you've
references may--

00:53:36.546 --> 00:53:37.876 A:middle
it doesn't have to contiguous

00:53:38.036 --> 00:53:39.636 A:middle
and it can even just
be a promise it's going

00:53:39.636 --> 00:53:40.446 A:middle
to be delivered later.

00:53:41.026 --> 00:53:43.596 A:middle
And it has a way to
attach key value pairs

00:53:43.596 --> 00:53:47.396 A:middle
of supplemental information
for other descriptive purposes.

00:53:47.936 --> 00:53:53.666 A:middle
If you need to encode or
decode video frames directly,

00:53:53.786 --> 00:53:57.316 A:middle
the AV Foundation offers
the Video Toolbox APIs

00:53:57.666 --> 00:54:00.696 A:middle
like the enhanced Image
Compression Manager APIs

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:00.696 --> 00:54:02.906 A:middle
that were introduced
in QuickTime 7,

00:54:03.266 --> 00:54:04.926 A:middle
these use core video
pixel buffers

00:54:04.926 --> 00:54:08.546 A:middle
for the uncompressed images.

00:54:09.496 --> 00:54:12.226 A:middle
They use core media sample
buffers for the compressed data

00:54:12.576 --> 00:54:14.356 A:middle
and there is an additional
interface

00:54:14.656 --> 00:54:18.716 A:middle
for transferring an image
from one pixel buffer

00:54:18.716 --> 00:54:22.006 A:middle
to another pixel buffer.

00:54:22.186 --> 00:54:25.666 A:middle
If you are still using
QuickTime's graphics importers

00:54:25.666 --> 00:54:28.886 A:middle
and graphics exporters for
still image support, bless you.

00:54:29.256 --> 00:54:33.576 A:middle
I worked really hard on those,
but it is time to wake up

00:54:33.576 --> 00:54:37.396 A:middle
and smell-- smell the 64-bit
native uniformly thread safe

00:54:37.396 --> 00:54:39.436 A:middle
coffee delivered by
the Image I/O Framework

00:54:39.436 --> 00:54:43.036 A:middle
and it's CGImageSource and
CGImageDestination APIs.

00:54:45.876 --> 00:54:47.096 A:middle
So there's the tour.

00:54:47.626 --> 00:54:48.596 A:middle
There's the travel guide.

00:54:48.686 --> 00:54:51.596 A:middle
I've actually introduced you
to quite a large number of APIs

00:54:51.596 --> 00:54:53.166 A:middle
but we've scratched the surface.

00:54:53.166 --> 00:54:56.616 A:middle
There are more AV Foundation
APIs that you can find

00:54:56.616 --> 00:54:58.196 A:middle
in Headers and Documentation.

00:54:58.796 --> 00:55:06.366 A:middle
In summary, we are deprecating
the QuickTime C framework

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:55:06.366 --> 00:55:10.246 A:middle
and the QTKit Objective-C
framework in Maverick.

00:55:10.826 --> 00:55:14.206 A:middle
This is a reminder for you
to make the transition.

00:55:15.726 --> 00:55:18.086 A:middle
The deprecation warnings
will appear on your screen

00:55:18.086 --> 00:55:19.506 A:middle
but you'll still
be able to compile

00:55:19.506 --> 00:55:21.056 A:middle
and your apps will still run.

00:55:21.056 --> 00:55:24.086 A:middle
Everybody, your apps
will still run.

00:55:25.516 --> 00:55:30.136 A:middle
So, AV Foundation is the
stack of media frameworks

00:55:30.136 --> 00:55:32.816 A:middle
that we are building and
working on and focusing

00:55:32.816 --> 00:55:34.626 A:middle
on in the media systems group.

00:55:35.826 --> 00:55:39.296 A:middle
And we're building frameworks

00:55:41.876 --> 00:55:44.566 A:middle
with significant
architectural advances

00:55:44.566 --> 00:55:45.906 A:middle
over QuickTime across the board.

00:55:46.436 --> 00:55:48.086 A:middle
They're better.

00:55:48.086 --> 00:55:55.396 A:middle
That said, we're not deprecating
the QuickTime movie file format.

00:55:55.396 --> 00:55:58.446 A:middle
It is still supported as
our primary file format

00:55:58.446 --> 00:55:59.986 A:middle
in AV Foundation and
in QuickTime player.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:56:01.036 --> 00:56:03.746 A:middle
We're introducing
QTMovieModernizer in Mavericks

00:56:03.746 --> 00:56:10.876 A:middle
to help bring your media into
AV Foundation supported formats.

00:56:12.786 --> 00:56:18.736 A:middle
We have introduced a great
new view integration class

00:56:19.116 --> 00:56:24.246 A:middle
in AVPlayerView as
part of AV Kit.

00:56:24.406 --> 00:56:28.556 A:middle
Finally, we know that
developers have had a long

00:56:28.556 --> 00:56:30.646 A:middle
and rich history
developing with QuickTime

00:56:30.976 --> 00:56:32.366 A:middle
over its last 22 years.

00:56:32.986 --> 00:56:35.576 A:middle
And we know there are
probably some of you

00:56:35.576 --> 00:56:38.676 A:middle
who are using QuickTime in ways
that we haven't yet anticipated

00:56:39.176 --> 00:56:40.606 A:middle
in AV Foundation's family.

00:56:41.856 --> 00:56:43.166 A:middle
If you can't figure out how

00:56:43.166 --> 00:56:48.216 A:middle
to bring your QuickTime API
app forward to AV Foundation,

00:56:49.066 --> 00:56:49.776 A:middle
we want to hear from you.

00:56:50.416 --> 00:56:51.486 A:middle
We're interested
in your feedback.

00:56:52.426 --> 00:56:54.756 A:middle
You can come and see us
this week in the lab.

00:56:55.296 --> 00:56:58.326 A:middle
You can write up enhancement
requests using Apple's bug

00:56:58.326 --> 00:57:03.176 A:middle
reporting mechanism, and you
can send email to John Geleynse,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:57:03.176 --> 00:57:05.496 A:middle
Apple's Director of
Media Evangelism.

00:57:05.496 --> 00:57:06.956 A:middle
His email address is
on the next slide.

00:57:08.316 --> 00:57:10.846 A:middle
But we are not finished
with AV Foundation.

00:57:11.166 --> 00:57:12.966 A:middle
We-- we'll make it
better with every release

00:57:13.466 --> 00:57:15.916 A:middle
and we're interested
in your feedback.

00:57:16.336 --> 00:57:21.056 A:middle
There's the email
address for John Geleynse.

00:57:22.136 --> 00:57:24.176 A:middle
There's two resources
online that I want

00:57:24.176 --> 00:57:25.306 A:middle
to draw your attention to,

00:57:25.306 --> 00:57:27.156 A:middle
one is the AV Foundation
Programming Guide

00:57:27.556 --> 00:57:29.966 A:middle
and the other is
called Tech Note 2300.

00:57:30.286 --> 00:57:32.536 A:middle
It's all about moving
QuickTime and--

00:57:32.736 --> 00:57:37.496 A:middle
oh, it's all about moving
QTKit code to AV Foundation.

00:57:37.496 --> 00:57:39.886 A:middle
There's also an AV Foundation
zone inside the Apple

00:57:39.886 --> 00:57:40.806 A:middle
Developer Forums.

00:57:40.806 --> 00:57:44.566 A:middle
You can get help from other
AV Foundation developers,

00:57:44.996 --> 00:57:48.416 A:middle
and sometimes if you're lucky,
from AV Foundation engineers.

00:57:48.846 --> 00:57:49.796 A:middle
And it's also searchable.

00:57:49.796 --> 00:57:50.646 A:middle
Sometimes the question

00:57:50.646 --> 00:57:55.816 A:middle
that you're asking has
already been asked.

00:57:55.816 --> 00:57:59.946 A:middle
We have three other
sessions from media systems

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:58:00.006 --> 00:58:03.926 A:middle
and AV Foundation
folks this week.

00:58:04.376 --> 00:58:06.056 A:middle
There's the preparing
and presenting media

00:58:06.056 --> 00:58:09.396 A:middle
for accessibility session
which we'll go into more detail

00:58:09.396 --> 00:58:11.266 A:middle
about what it means
honor a user's

00:58:11.266 --> 00:58:12.426 A:middle
accessibility preferences.

00:58:13.166 --> 00:58:15.536 A:middle
There is, "What's new
in camera capture?"

00:58:15.536 --> 00:58:19.316 A:middle
Which will focus
principally on new features

00:58:19.316 --> 00:58:21.756 A:middle
in AV Foundation
capture on iOS 7.

00:58:21.756 --> 00:58:25.666 A:middle
And there's also very exciting
session on advanced editing

00:58:25.666 --> 00:58:28.886 A:middle
with AV Foundation which
will introduce a new way

00:58:28.886 --> 00:58:31.306 A:middle
of integrating your
code directly

00:58:31.306 --> 00:58:36.566 A:middle
into our playback pipeline
to do fancy video effects

00:58:36.566 --> 00:58:39.116 A:middle
and filters limited only
by your imagination.

00:58:39.586 --> 00:58:42.796 A:middle
That's very exciting
feature to me.

00:58:44.036 --> 00:58:45.776 A:middle
Thanks for coming up.

00:58:45.776 --> 00:58:46.286 A:middle
Bye, bye.

00:58:46.786 --> 00:58:59.990 A:middle
[ Applause ]

