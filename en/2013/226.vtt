WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:09.456 A:middle
[ Silence ]

00:00:09.956 --> 00:00:10.856 A:middle
&gt;&gt; Hey, Brandon.

00:00:10.956 --> 00:00:11.726 A:middle
&gt;&gt; Hey Jim, how's it going?

00:00:12.006 --> 00:00:13.426 A:middle
&gt;&gt; Oh, it's going really well.

00:00:13.426 --> 00:00:14.906 A:middle
I just got the DemoApp done

00:00:14.906 --> 00:00:16.796 A:middle
for this presentation
about 15 minutes ago.

00:00:16.876 --> 00:00:17.866 A:middle
&gt;&gt; Oh, that's great timing.

00:00:17.866 --> 00:00:20.736 A:middle
I have a 50K run this weekend
that I really wanted to use it

00:00:20.736 --> 00:00:21.596 A:middle
for to get some pictures.

00:00:22.166 --> 00:00:23.746 A:middle
What features have you
put together so far?

00:00:24.156 --> 00:00:26.006 A:middle
&gt;&gt; Well, I got the basic
functionality working.

00:00:26.146 --> 00:00:28.616 A:middle
When you have the phone taped to
your chest while you're running,

00:00:28.616 --> 00:00:30.146 A:middle
it's going to take a
photo of what's in front

00:00:30.146 --> 00:00:31.416 A:middle
of you every three
or four seconds.

00:00:31.506 --> 00:00:33.296 A:middle
And then when you're
done with your run,

00:00:33.296 --> 00:00:35.626 A:middle
you could show the photos
to your other runners

00:00:36.046 --> 00:00:38.146 A:middle
and there's some basic
editing functionality

00:00:38.146 --> 00:00:40.476 A:middle
like you can delete
photos that were blurry

00:00:40.696 --> 00:00:42.466 A:middle
and you can set favorites
as a background.

00:00:42.886 --> 00:00:43.426 A:middle
&gt;&gt; That's great.

00:00:43.426 --> 00:00:46.376 A:middle
So, I know you probably haven't
done much on the user interface

00:00:46.376 --> 00:00:48.146 A:middle
yet but that's really
a good thing

00:00:48.146 --> 00:00:50.406 A:middle
because we just got some brand
new specs from our designers

00:00:50.596 --> 00:00:52.466 A:middle
to make our app look
great on iOS 7.

00:00:52.466 --> 00:00:52.906 A:middle
&gt;&gt; Oh, good.

00:00:53.066 --> 00:00:53.826 A:middle
&gt;&gt; Let's take a look at them.

00:00:53.866 --> 00:00:54.136 A:middle
&gt;&gt; Cool.

00:00:54.946 --> 00:00:57.806 A:middle
&gt;&gt; So, here's what our designers
have put together for us.

00:00:57.926 --> 00:01:00.746 A:middle
We can have the ability to
view photos in our application

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:00.746 --> 00:01:02.006 A:middle
and delete ones that
we don't like.

00:01:02.246 --> 00:01:04.325 A:middle
And I'd like us to do this
interesting custom delete

00:01:04.325 --> 00:01:06.406 A:middle
animation where we kind
of shadow the photo out.

00:01:06.406 --> 00:01:06.886 A:middle
&gt;&gt; Oh, neat, neat.

00:01:06.886 --> 00:01:08.076 A:middle
Kind of like a [inaudible]
effect.

00:01:08.076 --> 00:01:09.096 A:middle
&gt;&gt; Yeah, something like that.

00:01:09.266 --> 00:01:10.156 A:middle
I think it'd be pretty cool.

00:01:10.346 --> 00:01:10.526 A:middle
&gt;&gt; Cool.

00:01:10.526 --> 00:01:13.056 A:middle
&gt;&gt; They've also defined
some custom appearance

00:01:13.056 --> 00:01:13.796 A:middle
in our application.

00:01:13.956 --> 00:01:15.866 A:middle
They like our buttons to look
a little bit more interesting

00:01:15.866 --> 00:01:17.936 A:middle
with some special arts and
they've given us a tint color

00:01:17.936 --> 00:01:19.856 A:middle
for our application
to have its own style.

00:01:20.036 --> 00:01:20.476 A:middle
&gt;&gt; Excellent.

00:01:20.526 --> 00:01:22.756 A:middle
Yeah, I think the Appearance
API could probably help us

00:01:22.756 --> 00:01:22.996 A:middle
out with that.

00:01:22.996 --> 00:01:23.776 A:middle
&gt;&gt; That's what I was thinking.

00:01:24.916 --> 00:01:26.866 A:middle
They've also asked us
to do an interesting way

00:01:27.056 --> 00:01:28.956 A:middle
of playing back photos
in our application.

00:01:29.066 --> 00:01:31.406 A:middle
And they've put together
the spec that shows a kind

00:01:31.406 --> 00:01:33.606 A:middle
of a bouncing effect
where photos kind of fly

00:01:33.606 --> 00:01:36.366 A:middle
in from behind the user and,
you know, bounce off-screen.

00:01:36.926 --> 00:01:37.926 A:middle
&gt;&gt; Oh, that's a neat effect.

00:01:37.926 --> 00:01:39.356 A:middle
I have-- we'll see what
we can do with that.

00:01:39.356 --> 00:01:41.106 A:middle
&gt;&gt; I was thinking dynamics
that help with that.

00:01:41.106 --> 00:01:42.126 A:middle
&gt;&gt; Oh, yeah, actually,
that's a good idea.

00:01:42.936 --> 00:01:44.116 A:middle
&gt;&gt; Then the last thing
that showed us is

00:01:44.116 --> 00:01:45.566 A:middle
in our home screen
of our application.

00:01:45.566 --> 00:01:46.866 A:middle
They'd like to do some blurring

00:01:46.866 --> 00:01:48.206 A:middle
and they put together
this really,

00:01:48.206 --> 00:01:50.686 A:middle
really interesting looking
LensFlare that they'd like us

00:01:50.686 --> 00:01:53.376 A:middle
to drop on photos because
everyone loves LensFlares.

00:01:53.376 --> 00:01:55.766 A:middle
&gt;&gt; That one is a-- that flare
is a little [inaudible], man.

00:01:55.766 --> 00:01:56.416 A:middle
I'll see what I can do.

00:01:56.416 --> 00:01:57.796 A:middle
&gt;&gt; We'll see what
we can put together.

00:01:57.796 --> 00:01:58.596 A:middle
&gt;&gt; All right, cool.

00:01:58.626 --> 00:02:00.596 A:middle
&gt;&gt; So, why don't you go set up
the demo and I'll get started.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.596 --> 00:02:01.376 A:middle
&gt;&gt; All right, cool.

00:02:02.536 --> 00:02:05.036 A:middle
&gt;&gt; Cool. So, we're going to
talk about three things today.

00:02:05.326 --> 00:02:07.326 A:middle
We're going to start
off our talk by talking

00:02:07.326 --> 00:02:10.566 A:middle
about how we can do custom
view controller transitions.

00:02:11.166 --> 00:02:13.606 A:middle
After that, we'll move on to how
you can customize the appearance

00:02:13.606 --> 00:02:16.466 A:middle
of your application using
things like UIAppearance

00:02:16.616 --> 00:02:18.746 A:middle
and some new features
we've added to iOS 7

00:02:18.846 --> 00:02:20.716 A:middle
for making images look
interesting in your app.

00:02:21.566 --> 00:02:23.136 A:middle
Finally, we're going
to wrap things

00:02:23.136 --> 00:02:24.906 A:middle
up by spending some
time talking about how

00:02:24.906 --> 00:02:29.156 A:middle
to add realistic motion to your
application using UIKit Dynamics

00:02:29.486 --> 00:02:31.276 A:middle
and the new motion effect APIs.

00:02:31.986 --> 00:02:33.376 A:middle
So, let's get started by talking

00:02:33.376 --> 00:02:35.286 A:middle
about custom view
controller transitions.

00:02:36.296 --> 00:02:39.376 A:middle
This is something we've added in
iOS 7 that makes it really easy

00:02:39.376 --> 00:02:41.896 A:middle
for you to customize and
make unique transitions

00:02:41.896 --> 00:02:44.056 A:middle
in your application,
and we're using these

00:02:44.056 --> 00:02:45.806 A:middle
across the operating
system as well.

00:02:46.296 --> 00:02:48.466 A:middle
So, if you take a look at
a navigation controller

00:02:48.736 --> 00:02:51.166 A:middle
like this one in mail, this
is actually an interactive

00:02:51.166 --> 00:02:53.226 A:middle
transition where when
you start to scroll back

00:02:53.226 --> 00:02:55.606 A:middle
from the left-to-right
edge gesture, you notice,

00:02:55.606 --> 00:02:57.736 A:middle
the user can actually
interact with it and kind

00:02:57.736 --> 00:02:58.796 A:middle
of pull it back and forth.

00:02:58.796 --> 00:03:01.886 A:middle
And notice how the text
slides differently in the top

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:02.136 --> 00:03:04.276 A:middle
and those two view controllers
move at different speeds

00:03:04.506 --> 00:03:05.626 A:middle
across the transition.

00:03:06.566 --> 00:03:09.216 A:middle
We create this using the
new view controller APIs.

00:03:09.986 --> 00:03:12.146 A:middle
These are great way to make
things look interesting

00:03:12.146 --> 00:03:12.836 A:middle
in your apps.

00:03:13.416 --> 00:03:15.676 A:middle
There's a number of things
that we allow you to customize

00:03:15.826 --> 00:03:17.246 A:middle
with those view controller
transitions.

00:03:18.116 --> 00:03:19.586 A:middle
You can customize
both the present

00:03:19.996 --> 00:03:23.296 A:middle
and dismiss animations review
controllers as well as pushing

00:03:23.296 --> 00:03:25.556 A:middle
and popping things off
of your navigation stack.

00:03:26.536 --> 00:03:28.836 A:middle
Now, in addition to
letting you customize all

00:03:28.836 --> 00:03:30.396 A:middle
of these different
types of transitions,

00:03:30.926 --> 00:03:33.226 A:middle
we're also giving you
the ability to make any

00:03:33.226 --> 00:03:35.486 A:middle
of them interactive
or non-interactive.

00:03:36.096 --> 00:03:38.156 A:middle
That way, you can decide if
you want just a fluid thing

00:03:38.156 --> 00:03:40.466 A:middle
that always happens without
the user touching anything

00:03:40.746 --> 00:03:42.286 A:middle
or if you want to build
something a little bit more

00:03:42.286 --> 00:03:44.126 A:middle
advanced like a navigation
controller

00:03:44.126 --> 00:03:46.416 A:middle
where the user can
actually feel it and play

00:03:46.416 --> 00:03:47.696 A:middle
with it as it transitions.

00:03:48.316 --> 00:03:52.236 A:middle
So, what do you need
to do if you want

00:03:52.236 --> 00:03:55.296 A:middle
to customize a view controller
transition in your application?

00:03:55.966 --> 00:03:58.316 A:middle
In this example, we have
our first view controller,

00:03:58.316 --> 00:03:59.976 A:middle
we'll call this our
two view controller.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:00.696 --> 00:04:02.596 A:middle
When we're ready to do
a transition into that,

00:04:02.596 --> 00:04:04.606 A:middle
that modal view visibility view,

00:04:05.056 --> 00:04:07.326 A:middle
we're going to create
a two view controller,

00:04:07.596 --> 00:04:08.926 A:middle
our photo detail view.

00:04:09.406 --> 00:04:12.166 A:middle
So now, we have our two view
controllers, the one on the left

00:04:12.166 --> 00:04:14.656 A:middle
that we're going to present
from, the one on the right

00:04:14.656 --> 00:04:16.426 A:middle
that we're about to
present to the user.

00:04:17.286 --> 00:04:18.916 A:middle
Once we've created
the view controller,

00:04:19.356 --> 00:04:21.875 A:middle
we need to specify the
transitioning delegate.

00:04:23.006 --> 00:04:25.226 A:middle
So, in this case, we're going
to tell our two view controller

00:04:25.226 --> 00:04:28.926 A:middle
that the transitioning delegate
itself are fromViewController.

00:04:29.326 --> 00:04:30.976 A:middle
That means our
fromViewController is going

00:04:30.976 --> 00:04:32.506 A:middle
to be responsible for responding

00:04:32.506 --> 00:04:34.566 A:middle
to how these transitions
need to happen.

00:04:35.436 --> 00:04:38.876 A:middle
Once we've set that up, we need
to go ahead and say we're ready

00:04:38.876 --> 00:04:40.046 A:middle
to present our view controller,

00:04:40.536 --> 00:04:43.106 A:middle
and we do that by saying
presentViewController

00:04:43.166 --> 00:04:44.526 A:middle
animated completion.

00:04:44.966 --> 00:04:47.486 A:middle
This is the same API
that you're used to using

00:04:47.646 --> 00:04:49.216 A:middle
for presenting the
view controllers.

00:04:49.796 --> 00:04:52.146 A:middle
But in this case,
we've specified

00:04:52.146 --> 00:04:54.506 A:middle
that you have a transitioning
delegate and that means

00:04:54.506 --> 00:04:57.206 A:middle
that the system is going to
have to ask you how do you want

00:04:57.206 --> 00:04:58.206 A:middle
to do that transition.

00:04:58.866 --> 00:05:01.596 A:middle
And we do that by asking
you for AnimationController

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:01.596 --> 00:05:02.766 A:middle
for presented controller,

00:05:03.146 --> 00:05:05.286 A:middle
presenting controller,
source controller.

00:05:05.696 --> 00:05:07.206 A:middle
That's a lot of controllers
going on there.

00:05:07.696 --> 00:05:09.846 A:middle
So, let's talk about what
those actually mean for you.

00:05:10.456 --> 00:05:12.176 A:middle
The first is the
presented controller.

00:05:12.546 --> 00:05:13.446 A:middle
This is what we're going

00:05:13.446 --> 00:05:16.236 A:middle
to actually be presenting
on screen.

00:05:16.236 --> 00:05:17.956 A:middle
It's the [inaudible]
we're about to present.

00:05:18.146 --> 00:05:19.896 A:middle
That's the two view
controller on the right.

00:05:20.996 --> 00:05:22.476 A:middle
Next is the presenting
controller.

00:05:22.866 --> 00:05:25.526 A:middle
This is what we're going to be
presenting from, in this case,

00:05:25.526 --> 00:05:26.596 A:middle
our fromViewController.

00:05:27.006 --> 00:05:29.676 A:middle
The final case is the
source controller.

00:05:30.356 --> 00:05:33.216 A:middle
The source controller in
most cases is the same view

00:05:33.216 --> 00:05:36.076 A:middle
controller that we're presenting
from but occasionally,

00:05:36.076 --> 00:05:37.946 A:middle
we have to do a little
bit of work to present

00:05:37.946 --> 00:05:40.506 A:middle
from a different place in the
view cart controller hierarchy.

00:05:40.976 --> 00:05:43.466 A:middle
So, we'll do the walking
through and let you know

00:05:43.466 --> 00:05:45.436 A:middle
if we're presenting from
a slightly different case

00:05:45.586 --> 00:05:47.486 A:middle
and we'll let you know that
with the source controller.

00:05:47.866 --> 00:05:49.686 A:middle
But most of the time,
you don't need

00:05:49.686 --> 00:05:52.206 A:middle
to do anything too interesting
with that particular argument.

00:05:52.376 --> 00:05:53.566 A:middle
It's there for your information.

00:05:54.926 --> 00:05:56.696 A:middle
So, we've been called
with a system asking

00:05:56.696 --> 00:05:58.066 A:middle
for this animation controller.

00:05:58.666 --> 00:06:02.406 A:middle
We're going to create a new
object, and that's an object

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:02.406 --> 00:06:02.906 A:middle
that responds

00:06:02.906 --> 00:06:05.356 A:middle
to UIViewController
animated transitioning.

00:06:05.646 --> 00:06:07.766 A:middle
It's a protocol that you need
to implement on this object

00:06:08.236 --> 00:06:10.676 A:middle
that specifies how to
perform the animation.

00:06:11.326 --> 00:06:12.916 A:middle
There's two methods that
you need to implement,

00:06:13.426 --> 00:06:16.166 A:middle
transition-duration
and animate transition.

00:06:17.026 --> 00:06:19.866 A:middle
Transition-duration, as
the name would suggest is

00:06:19.866 --> 00:06:22.356 A:middle
to tell the system how long your
transition is going to take.

00:06:22.706 --> 00:06:25.616 A:middle
That way, we can time things out
and make everything work nicely.

00:06:26.396 --> 00:06:29.236 A:middle
Animate transition is
where you actually do all

00:06:29.236 --> 00:06:30.106 A:middle
of the animations.

00:06:30.106 --> 00:06:31.616 A:middle
So, that's where
you're going to want

00:06:31.616 --> 00:06:33.906 A:middle
to get the two view
controllers out of a context

00:06:33.906 --> 00:06:36.236 A:middle
and then you're going to need
to actually do the animations

00:06:36.236 --> 00:06:37.376 A:middle
that you want to have happen

00:06:37.716 --> 00:06:39.366 A:middle
to place your view
controllers on screen.

00:06:40.176 --> 00:06:42.436 A:middle
Once we've created that
object, we'll return it back

00:06:42.436 --> 00:06:44.706 A:middle
to the system and let
it do the transition.

00:06:44.706 --> 00:06:48.796 A:middle
To help you make this a little
bit easier in your applications,

00:06:49.096 --> 00:06:52.356 A:middle
we've created UI percent
driven interactive transition.

00:06:52.936 --> 00:06:54.196 A:middle
This is an object
that we're get--

00:06:54.196 --> 00:06:58.316 A:middle
making available in UIKit to
help make it easier for you

00:06:58.316 --> 00:07:00.176 A:middle
to create interactive
transitions.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.986 --> 00:07:02.456 A:middle
It lets you update
the transition

00:07:02.506 --> 00:07:05.276 A:middle
as it's happening based
on touch or other inputs

00:07:05.376 --> 00:07:07.176 A:middle
that might be relevant
to your application,

00:07:07.326 --> 00:07:08.646 A:middle
whatever makes sense for you

00:07:08.876 --> 00:07:10.856 A:middle
and creates a great
experience for your users.

00:07:11.596 --> 00:07:14.596 A:middle
And a couple of things that you
can vary while the transition is

00:07:14.596 --> 00:07:17.816 A:middle
happening is the completion
speed and the completion curve.

00:07:18.246 --> 00:07:21.026 A:middle
You can tweak the values of
those while the transition is

00:07:21.026 --> 00:07:23.886 A:middle
in flight to make an even
more unique experience

00:07:23.886 --> 00:07:26.886 A:middle
and a more unique
transition inside your app.

00:07:27.896 --> 00:07:30.746 A:middle
So, Jim, if you remember
what our designer specs,

00:07:30.816 --> 00:07:33.296 A:middle
they put together this
really great delete animation

00:07:33.346 --> 00:07:36.066 A:middle
where we kind of destroy
the photo that's on screen.

00:07:36.476 --> 00:07:37.916 A:middle
Have you had a chance to
put that together yet?

00:07:38.496 --> 00:07:39.656 A:middle
&gt;&gt; Well, I've got it started.

00:07:39.806 --> 00:07:41.696 A:middle
The animation isn't
quite complete yet

00:07:41.696 --> 00:07:43.346 A:middle
but I got the transitioning
stuff working.

00:07:43.426 --> 00:07:44.386 A:middle
You want me to show it to them?

00:07:44.386 --> 00:07:45.536 A:middle
&gt;&gt; I'd love to see
what you have so far.

00:07:45.536 --> 00:07:48.366 A:middle
&gt;&gt; All right, now here's our
exciting application that's

00:07:48.506 --> 00:07:49.616 A:middle
on the store today.

00:07:49.676 --> 00:07:50.526 A:middle
All right.

00:07:50.526 --> 00:07:52.916 A:middle
So, we have bascially,
we have some runs

00:07:53.226 --> 00:07:54.156 A:middle
that we've already ran through.

00:07:54.156 --> 00:07:58.036 A:middle
And I'm going to select
the WWDC run and want to go

00:07:58.036 --> 00:08:01.346 A:middle
and show all the photos that
we've taken from this run.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:01.476 --> 00:08:04.316 A:middle
This is obviously around
the campus and you can go

00:08:04.316 --> 00:08:05.666 A:middle
and select one of
your photos here.

00:08:06.316 --> 00:08:07.646 A:middle
That's a nice photo.

00:08:07.646 --> 00:08:10.276 A:middle
We have a basic presentation
right there.

00:08:10.816 --> 00:08:12.326 A:middle
And if you go ahead and
hit delete, you're going

00:08:13.056 --> 00:08:16.236 A:middle
to get a nice little-- it's
a nice little burning effect.

00:08:16.236 --> 00:08:18.826 A:middle
It's not quite what
we got there yet but--

00:08:19.506 --> 00:08:21.906 A:middle
the scanline goes up,
removes the images.

00:08:21.906 --> 00:08:22.876 A:middle
It's basic animation.

00:08:22.876 --> 00:08:25.126 A:middle
There's no real dynamics
that's into it yet.

00:08:25.126 --> 00:08:26.126 A:middle
It's doesn't move around a lot.

00:08:26.616 --> 00:08:29.026 A:middle
But, it's a basic-- the
transition is actually working.

00:08:29.026 --> 00:08:31.106 A:middle
So, let me go show you how that
actually is working so far.

00:08:31.436 --> 00:08:34.366 A:middle
So, the photos that you saw
there are in a collection view.

00:08:34.366 --> 00:08:36.706 A:middle
And so, in our collection
view, we simply--

00:08:37.166 --> 00:08:38.686 A:middle
and collection view's
delegate method

00:08:38.686 --> 00:08:41.426 A:middle
of didSelectItemAtIndexPath,
we're simply going

00:08:41.426 --> 00:08:44.265 A:middle
to create a new instance of
the edit photo view controller.

00:08:44.336 --> 00:08:48.566 A:middle
And at the next part, we're
going to go and create a couple

00:08:48.566 --> 00:08:50.286 A:middle
of properties that when you
set on that view controller

00:08:50.366 --> 00:08:53.186 A:middle
to basically do what
our app does.

00:08:53.216 --> 00:08:55.426 A:middle
We need to know which run we're
talking about and which photo

00:08:55.426 --> 00:08:56.356 A:middle
that we're interacting with.

00:08:57.236 --> 00:08:59.376 A:middle
We also have a custom
delegation callback that's going

00:08:59.376 --> 00:09:01.826 A:middle
to get called when that
user hits the delete button

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:02.426 --> 00:09:05.346 A:middle
and that is to let us know
that the user deleted the photo

00:09:05.656 --> 00:09:07.396 A:middle
and it also dismisses
the view controller.

00:09:08.516 --> 00:09:10.796 A:middle
Now, the important part
of this when dealing

00:09:10.796 --> 00:09:13.456 A:middle
with custom transitions
are these two lines.

00:09:13.926 --> 00:09:16.666 A:middle
The transitioning delegate
is what's going to be asked

00:09:16.666 --> 00:09:19.256 A:middle
for if you have an animator
that you would like to use.

00:09:19.696 --> 00:09:20.616 A:middle
In this case, we do.

00:09:21.136 --> 00:09:24.056 A:middle
And the modal presentation
style has set the custom.

00:09:24.436 --> 00:09:26.116 A:middle
And it's not required
that you set up the custom

00:09:26.116 --> 00:09:29.076 A:middle
but in our case, we would like
to do that and when you set it

00:09:29.076 --> 00:09:31.946 A:middle
to custom, you get the
opportunity to place both the

00:09:31.946 --> 00:09:34.326 A:middle
from and the two view
controller on screen.

00:09:34.866 --> 00:09:37.436 A:middle
You are responsible for
both animating them in

00:09:37.436 --> 00:09:38.426 A:middle
and animating them out.

00:09:38.556 --> 00:09:40.556 A:middle
And then, obviously
represent the view controller.

00:09:41.716 --> 00:09:44.276 A:middle
Now, since we're just
concerned with the dismissal

00:09:44.276 --> 00:09:48.546 A:middle
of our editing view controller,
if the user deleted the photo,

00:09:49.256 --> 00:09:50.886 A:middle
we go ahead and we
create an instance

00:09:50.886 --> 00:09:52.196 A:middle
of our delete photo animator.

00:09:52.616 --> 00:09:54.106 A:middle
And if it's not being deleted,

00:09:54.106 --> 00:09:55.926 A:middle
we just use the normal
presentation animator.

00:09:56.336 --> 00:09:58.206 A:middle
So, let's go take a look at
what the delete photo animator

00:09:58.206 --> 00:09:58.886 A:middle
actually does.

00:09:59.096 --> 00:10:01.586 A:middle
Animation-- Transition-duration
is just two seconds.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:01.586 --> 00:10:03.666 A:middle
Like Brandon, this just lets
the system know how long your

00:10:03.666 --> 00:10:04.566 A:middle
animation is going to take.

00:10:05.076 --> 00:10:08.226 A:middle
And then the second part
here is animateTransition.

00:10:08.626 --> 00:10:11.896 A:middle
Now, in this method, we're going

00:10:11.896 --> 00:10:13.636 A:middle
to pass you a transition
context.

00:10:14.026 --> 00:10:16.136 A:middle
And in this context is
everything that you're going

00:10:16.136 --> 00:10:18.606 A:middle
to need to know to
do your transition.

00:10:19.126 --> 00:10:21.446 A:middle
Not only do you get the from
in the two view controller,

00:10:21.936 --> 00:10:24.756 A:middle
you get, is this
transition animated.

00:10:24.756 --> 00:10:29.366 A:middle
You also get the ability to
know the from and to positions

00:10:29.366 --> 00:10:31.126 A:middle
of where we think
those view should land.

00:10:31.966 --> 00:10:34.736 A:middle
You also get a critically
important method you'll need

00:10:34.736 --> 00:10:37.446 A:middle
to call back called
completed transition.

00:10:37.626 --> 00:10:41.036 A:middle
If you don't call this
method, we don't know

00:10:41.036 --> 00:10:42.556 A:middle
that the animation
is actually finished.

00:10:42.676 --> 00:10:44.626 A:middle
So, your transition
will actually just hang

00:10:44.936 --> 00:10:45.886 A:middle
and I'll show you where we do

00:10:45.886 --> 00:10:47.446 A:middle
that here just a
little bit lower.

00:10:47.586 --> 00:10:49.816 A:middle
Now, there is a bunch
of animation code here

00:10:50.036 --> 00:10:55.016 A:middle
that really doesn't matter for
the aspect of transitioning, so.

00:10:55.206 --> 00:10:57.246 A:middle
But there are three points that
I'd like to point out here.

00:10:58.646 --> 00:11:03.666 A:middle
The first is that we don't
really care where the two view--

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:03.666 --> 00:11:04.806 A:middle
we don't want to animate it in.

00:11:04.806 --> 00:11:06.906 A:middle
We just want to place it
in its final position.

00:11:06.906 --> 00:11:09.236 A:middle
So, that is our collection
view coming back

00:11:09.236 --> 00:11:11.126 A:middle
as the front-most
view controller.

00:11:11.836 --> 00:11:14.236 A:middle
So, we just asked the
transition in context

00:11:14.236 --> 00:11:15.946 A:middle
for where we should place
that and we stick it

00:11:15.946 --> 00:11:17.416 A:middle
in the container view.

00:11:18.396 --> 00:11:21.206 A:middle
The second part is that
I'm using snapshotting,

00:11:21.256 --> 00:11:26.616 A:middle
the snapshotting API to
create those little tiny boxes

00:11:26.616 --> 00:11:27.286 A:middle
on screen.

00:11:27.746 --> 00:11:29.306 A:middle
That's an image view
that holds an image

00:11:29.306 --> 00:11:33.026 A:middle
and while we could have gone
through and re-rendered each one

00:11:33.026 --> 00:11:35.066 A:middle
of those boxes as its own image,

00:11:35.066 --> 00:11:36.136 A:middle
it's like an image
view in there.

00:11:36.556 --> 00:11:39.856 A:middle
The snapshotting API is
actually faster in that regard.

00:11:39.856 --> 00:11:41.396 A:middle
It's really performance
and it allows us

00:11:41.396 --> 00:11:43.176 A:middle
to [inaudible] those
little boxes into--

00:11:43.176 --> 00:11:45.916 A:middle
sort of create those little
boxes really, really quickly.

00:11:46.906 --> 00:11:48.156 A:middle
And unfortunately,
it's commented

00:11:48.156 --> 00:11:49.946 A:middle
out in the sample code
due to a name change

00:11:49.946 --> 00:11:51.406 A:middle
between Seed 1 and Seed 2.

00:11:51.406 --> 00:11:52.976 A:middle
So, I didn't want
to show errors.

00:11:53.316 --> 00:11:54.716 A:middle
But Brandon will talk
to a little bit more

00:11:54.716 --> 00:11:56.276 A:middle
about that after I'm done here.

00:11:58.536 --> 00:12:01.146 A:middle
Finally, going through a
whole bunch of animation code,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:01.586 --> 00:12:02.766 A:middle
it's this line right here.

00:12:03.366 --> 00:12:05.726 A:middle
When we are done
with our animation,

00:12:05.726 --> 00:12:07.606 A:middle
when the scanline is
completed to the top

00:12:07.896 --> 00:12:10.096 A:middle
and we're sufficiently happy
enough blocks have been

00:12:10.096 --> 00:12:12.446 A:middle
destroyed, we call
transitionContext

00:12:12.446 --> 00:12:15.756 A:middle
CompletedTransition and
in this, this system knows

00:12:15.786 --> 00:12:18.276 A:middle
that your delegate
transition, it can tear down all

00:12:18.276 --> 00:12:20.656 A:middle
of its context that it's
built up for you and then,

00:12:20.656 --> 00:12:23.066 A:middle
it will return back to
the two view controller.

00:12:24.546 --> 00:12:25.386 A:middle
&gt;&gt; That's looking great, Jim.

00:12:25.516 --> 00:12:25.856 A:middle
&gt;&gt; Thanks.

00:12:25.856 --> 00:12:27.676 A:middle
&gt;&gt; It's a really good start
on that custom transition.

00:12:28.006 --> 00:12:29.076 A:middle
I think I'd like
to talk a bit more

00:12:29.076 --> 00:12:30.366 A:middle
about snapshotting
now if you don't mind.

00:12:30.496 --> 00:12:31.046 A:middle
&gt;&gt; That's a good idea.

00:12:31.556 --> 00:12:33.986 A:middle
&gt;&gt; So, we've introduced
a fantastic new API

00:12:34.356 --> 00:12:36.866 A:middle
in iOS 7 that's called
UISnapshotting.

00:12:37.346 --> 00:12:40.426 A:middle
This is a major improvement
over rendering context

00:12:40.426 --> 00:12:41.996 A:middle
that you're used
to using for trying

00:12:41.996 --> 00:12:43.076 A:middle
to get snapshots of a view.

00:12:43.896 --> 00:12:46.796 A:middle
What we give you back with the
new snapshotting API is the

00:12:46.796 --> 00:12:48.616 A:middle
extremely fast representation

00:12:48.766 --> 00:12:50.716 A:middle
of the currently rendered
contents of your view.

00:12:50.836 --> 00:12:52.946 A:middle
We go really deep in and
pull that out for you.

00:12:53.276 --> 00:12:55.556 A:middle
And like I said,
it's extremely fast.

00:12:56.066 --> 00:12:57.716 A:middle
It's useful in a
couple of great places.

00:12:58.176 --> 00:13:00.486 A:middle
As you just saw, we can do
some really interesting things

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.726 --> 00:13:03.146 A:middle
with custom transitions and
the new snapshotting API.

00:13:03.866 --> 00:13:05.736 A:middle
It's also a great
tool for making some

00:13:05.736 --> 00:13:08.396 A:middle
of the new special effects
that you see across iOS 7.

00:13:09.426 --> 00:13:12.006 A:middle
So, how much faster is this
than rendering context?

00:13:12.536 --> 00:13:16.256 A:middle
To kind of demonstrate this to
you, we took a version of iPhoto

00:13:16.256 --> 00:13:19.616 A:middle
for iOS and we've asked it
to render in context as well

00:13:19.616 --> 00:13:21.166 A:middle
as using the new snapshot APIs.

00:13:21.756 --> 00:13:24.286 A:middle
As you can see, this is a pretty
complicated view to render.

00:13:24.926 --> 00:13:27.176 A:middle
If we render this with
rendering context,

00:13:27.546 --> 00:13:29.526 A:middle
it took about 840 milliseconds.

00:13:29.726 --> 00:13:32.166 A:middle
It's a really long time to
generate just a snapshot.

00:13:33.086 --> 00:13:37.376 A:middle
To compare that, when we use the
new snapshot methods in iOS 7,

00:13:38.136 --> 00:13:39.876 A:middle
we did the same in
56 milliseconds.

00:13:40.106 --> 00:13:42.446 A:middle
It's an incredible improvement
for you and you should be able

00:13:42.446 --> 00:13:44.196 A:middle
to make some incredibly
awesome effects

00:13:44.196 --> 00:13:46.756 A:middle
with it once you can take
advantage of it in iOS 7.

00:13:47.106 --> 00:13:49.106 A:middle
So, what does the API
for this look like?

00:13:49.846 --> 00:13:51.966 A:middle
There's two key methods that
you should take a look at,

00:13:52.416 --> 00:13:55.066 A:middle
snapshot view and
resizable snapshot view

00:13:55.066 --> 00:13:57.046 A:middle
from rect with cap insets.

00:13:57.496 --> 00:14:00.336 A:middle
Now, as Jim mentioned, it's
important to note in Seed 1,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:00.776 --> 00:14:03.406 A:middle
these methods are snapshot
and resizable snapshot,

00:14:03.846 --> 00:14:07.596 A:middle
they'll be this API you see
above for Seed 2 moving forward.

00:14:08.626 --> 00:14:11.176 A:middle
There's a third bit of API
for UISnapshotting though

00:14:11.476 --> 00:14:13.546 A:middle
that we've created for
a very special case,

00:14:14.076 --> 00:14:16.676 A:middle
and that API is
drawViewHierarchyInRect.

00:14:17.206 --> 00:14:18.806 A:middle
This will also be
available starting

00:14:18.806 --> 00:14:20.306 A:middle
in Seed 2 going forwards.

00:14:20.876 --> 00:14:23.766 A:middle
DrawViewHierarchyInRect is
still considerably faster

00:14:23.766 --> 00:14:26.096 A:middle
than rendering context
but it's not quite

00:14:26.096 --> 00:14:27.666 A:middle
as fast as snapshot view.

00:14:28.176 --> 00:14:31.266 A:middle
To give you an illustration
of that, we can compare

00:14:31.266 --> 00:14:33.346 A:middle
that on our usual
graph and rendering

00:14:33.346 --> 00:14:36.446 A:middle
that complicated view hierarchy
took about 150 milliseconds.

00:14:36.856 --> 00:14:39.376 A:middle
It's still considerably
faster than rendering context

00:14:39.716 --> 00:14:42.406 A:middle
but almost three times
slower than snapshot view.

00:14:43.336 --> 00:14:46.466 A:middle
So, why should you use this
drawViewHierarchyInRect?

00:14:47.426 --> 00:14:50.896 A:middle
Well, you've probably noticed
iOS 7 takes a lot of advantage

00:14:50.896 --> 00:14:53.456 A:middle
of these blurred effects
that you see behind toolbars

00:14:53.456 --> 00:14:55.106 A:middle
and navigation bars and so on.

00:14:55.886 --> 00:14:59.676 A:middle
This is your new API in iOS 7
to make static blurred effects

00:14:59.726 --> 00:15:02.216 A:middle
that look the same as what
we do across the system.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:02.646 --> 00:15:03.516 A:middle
So, how do you do that?

00:15:04.796 --> 00:15:05.566 A:middle
The first thing you'll need

00:15:05.566 --> 00:15:09.476 A:middle
to do is call UIGraphicsBegin
ImageContextWithOptions.

00:15:09.946 --> 00:15:12.766 A:middle
This will make a new empty
image context with the size

00:15:12.766 --> 00:15:15.066 A:middle
that you asked for to
start rendering into.

00:15:15.926 --> 00:15:17.096 A:middle
Then you'll take your view

00:15:17.096 --> 00:15:19.476 A:middle
and you call
drawViewHierarchyInRect.

00:15:19.616 --> 00:15:21.826 A:middle
That will render
your views contents

00:15:22.186 --> 00:15:24.116 A:middle
into that context
very, very quickly.

00:15:25.256 --> 00:15:27.176 A:middle
Once you've done that, we
can get a new image out of

00:15:27.176 --> 00:15:29.166 A:middle
that context for
future processing.

00:15:29.476 --> 00:15:32.366 A:middle
That's as easy as
calling UIGraphicsGetImage

00:15:32.366 --> 00:15:33.666 A:middle
FromCurrentImageContext.

00:15:34.526 --> 00:15:37.226 A:middle
Once we have that image out,
we're done with the context

00:15:37.476 --> 00:15:40.276 A:middle
so we can go ahead, go ahead and
end that, clean everything up.

00:15:40.276 --> 00:15:43.236 A:middle
And then the last
part is applying

00:15:43.236 --> 00:15:44.706 A:middle
that blur effect to our image.

00:15:45.366 --> 00:15:48.936 A:middle
You notice I'm calling apply
light effect in the code above.

00:15:49.416 --> 00:15:52.776 A:middle
This is a category on UIImage
that we're making available

00:15:52.836 --> 00:15:55.796 A:middle
through a sample project
called image effects as well

00:15:55.796 --> 00:15:57.446 A:middle
as in the sample code
from this session.

00:15:57.846 --> 00:15:59.606 A:middle
Please feel free to
bring that category

00:15:59.606 --> 00:16:03.196 A:middle
into your own applications and
use it to apply light, dark,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:03.196 --> 00:16:05.326 A:middle
and very light effects
across your application.

00:16:05.506 --> 00:16:07.846 A:middle
And that's how you can
make blurs in your apps.

00:16:08.056 --> 00:16:10.636 A:middle
Next, let's talk about how
to customize the appearance

00:16:10.786 --> 00:16:13.506 A:middle
of your applications using
a number of different tools

00:16:13.506 --> 00:16:15.616 A:middle
and techniques that we
have available on iOS.

00:16:16.506 --> 00:16:19.226 A:middle
So let's say, I have this
incredibly exciting application

00:16:19.366 --> 00:16:20.466 A:middle
with three sliders in it.

00:16:20.926 --> 00:16:22.946 A:middle
Now, I really don't want you
to rush out and like copy

00:16:22.946 --> 00:16:23.646 A:middle
that on the App Store.

00:16:23.646 --> 00:16:24.786 A:middle
This is all mine by the way.

00:16:25.686 --> 00:16:28.186 A:middle
So, our sliders default
to a blue tint color.

00:16:28.576 --> 00:16:31.236 A:middle
But my designer said, "We
actually want a red tint color."

00:16:31.916 --> 00:16:34.046 A:middle
An easy way to do this that
we'd have it for a couple

00:16:34.046 --> 00:16:36.486 A:middle
of years now is using
the appearance proxies.

00:16:37.096 --> 00:16:39.846 A:middle
These are as easy as
calling appearance on some

00:16:39.846 --> 00:16:42.716 A:middle
of the UIKit controls and then
setting various properties

00:16:42.716 --> 00:16:45.196 A:middle
on them such as tint
color, and that means

00:16:45.196 --> 00:16:46.976 A:middle
that whenever I make a
new slider in my app,

00:16:47.096 --> 00:16:49.496 A:middle
it will automatically
inherit these appearance set

00:16:49.496 --> 00:16:50.246 A:middle
of attributes.

00:16:50.996 --> 00:16:52.686 A:middle
But what if my application
has a lot

00:16:52.686 --> 00:16:53.916 A:middle
of different types of controls?

00:16:54.176 --> 00:16:56.406 A:middle
I don't really want to have
to call appearance on all

00:16:56.406 --> 00:16:58.876 A:middle
of these different controls
across my entire application.

00:16:59.666 --> 00:17:03.076 A:middle
There's a new change in iOS
7 to the tintColor system

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:03.376 --> 00:17:05.715 A:middle
that makes this easy to
set a unified tint color

00:17:05.715 --> 00:17:06.236 A:middle
across your app.

00:17:07.316 --> 00:17:10.165 A:middle
When you call setTintColor
on say a window,

00:17:10.546 --> 00:17:12.736 A:middle
all of its subviews will
inherit that tint color

00:17:12.886 --> 00:17:14.415 A:middle
until something else lower

00:17:14.415 --> 00:17:16.556 A:middle
in the view hierarchy
overrides that.

00:17:17.096 --> 00:17:18.616 A:middle
So, if you like-- if
you would like your app

00:17:18.656 --> 00:17:21.806 A:middle
to have a standard tint color
of red across your entire app,

00:17:22.336 --> 00:17:24.976 A:middle
simply call setTintColor
on your window

00:17:24.976 --> 00:17:27.906 A:middle
and everything will inherit
that appearance, that attribute.

00:17:28.906 --> 00:17:30.646 A:middle
So, again, what do
these APIs look like?

00:17:31.256 --> 00:17:33.986 A:middle
The UIAppearance proxies
have been around since iOS 5

00:17:33.986 --> 00:17:37.086 A:middle
and you can call appearance
and appearanceWhenContainedIn.

00:17:37.576 --> 00:17:39.646 A:middle
AppearanceWhenContainedIn
allows you

00:17:39.646 --> 00:17:41.346 A:middle
to change your appearance based

00:17:41.346 --> 00:17:45.836 A:middle
on what your controls are
contained in, what kind of view.

00:17:45.966 --> 00:17:49.156 A:middle
We're changing tint color
and bar tint color in iOS 7

00:17:49.506 --> 00:17:50.646 A:middle
as I was just explaining

00:17:50.776 --> 00:17:52.826 A:middle
where tintColor will
impact things based

00:17:52.826 --> 00:17:53.746 A:middle
on your view hierarchy.

00:17:54.426 --> 00:17:56.916 A:middle
Bar tint colors appear--
it's not appearance,

00:17:56.916 --> 00:17:59.266 A:middle
its behavior has changed
a little bit on iOS 7

00:17:59.776 --> 00:18:02.216 A:middle
so that it's what you use
to specify the tint color

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:02.216 --> 00:18:05.756 A:middle
of an entire bar on iOS 7 rather
than tinting the contents of it.

00:18:05.756 --> 00:18:08.926 A:middle
So that's how you can use
tintColor and appearance

00:18:08.926 --> 00:18:11.606 A:middle
to make your apps have their
own unique look on iOS 7.

00:18:12.456 --> 00:18:15.816 A:middle
We've also made some
changes to UIImage on iOS 7.

00:18:16.196 --> 00:18:19.266 A:middle
We've added this new method
called imageWithRenderingMode.

00:18:19.406 --> 00:18:21.246 A:middle
And there's a few
rendering modes

00:18:21.246 --> 00:18:23.076 A:middle
that you can apply
to images on iOS 7.

00:18:23.636 --> 00:18:25.686 A:middle
You can put them in
rendering mode automatic.

00:18:26.126 --> 00:18:28.796 A:middle
This is what we'll give you by
default where we'll do our best

00:18:28.796 --> 00:18:30.896 A:middle
to decide how to
render the images based

00:18:30.896 --> 00:18:32.046 A:middle
on how you're using
them in your app.

00:18:33.136 --> 00:18:35.546 A:middle
We're also allowing you to
customize these behaviors

00:18:35.846 --> 00:18:37.426 A:middle
with rendering mode
always original

00:18:37.846 --> 00:18:39.756 A:middle
and rendering mode
always template.

00:18:40.286 --> 00:18:42.506 A:middle
Now, these names probably don't
have a lot of meaning to you,

00:18:42.816 --> 00:18:45.346 A:middle
so I think I'd like to show
you what that actually means.

00:18:45.946 --> 00:18:47.606 A:middle
This is my original
image of Carl.

00:18:47.926 --> 00:18:48.766 A:middle
Carl is my friend.

00:18:49.566 --> 00:18:51.636 A:middle
If we want to render
Carl into my application,

00:18:52.226 --> 00:18:54.446 A:middle
if I put it on rendering
mode always original,

00:18:54.616 --> 00:18:56.486 A:middle
it means that we'll
render it exactly

00:18:56.486 --> 00:18:59.376 A:middle
as the original image was given
to us in all of his pink glory.

00:18:59.746 --> 00:19:02.766 A:middle
But if I switched it over to
rendering mode always template,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:03.226 --> 00:19:05.946 A:middle
we're only going to look at the
alpha channel of that image.

00:19:06.066 --> 00:19:08.176 A:middle
We'll ignore the red,
green, and blue channels.

00:19:09.096 --> 00:19:12.296 A:middle
We'll also take the tint color
of your application and apply it

00:19:12.296 --> 00:19:13.356 A:middle
to that template image.

00:19:13.616 --> 00:19:16.886 A:middle
So, if my application's tint
color is red, Carl becomes red.

00:19:17.326 --> 00:19:20.686 A:middle
Similarly, if my tint color
is blue, Carl becomes blue.

00:19:22.716 --> 00:19:24.626 A:middle
[laughter] The next thing
we'd like to talk about is how

00:19:24.626 --> 00:19:27.396 A:middle
to use resizable
images with cap insets.

00:19:27.866 --> 00:19:30.046 A:middle
In this example from
Siri on iOS 7,

00:19:30.356 --> 00:19:32.446 A:middle
I'd like to call your
attention to the movie ratings.

00:19:32.906 --> 00:19:34.856 A:middle
You notice, we say what
the rating of the movie is,

00:19:35.166 --> 00:19:36.696 A:middle
and we draw this nice white box

00:19:36.696 --> 00:19:39.706 A:middle
around the outside that's
very nicely fit to the text.

00:19:40.386 --> 00:19:44.256 A:middle
We create that with UIImage
resizableImageWithCapInsets.

00:19:45.616 --> 00:19:47.786 A:middle
In this example, I have
this very small image

00:19:47.786 --> 00:19:51.436 A:middle
for my designers where we have
these corners that we want

00:19:51.436 --> 00:19:53.606 A:middle
to keep the same shape
but we want to be able

00:19:53.606 --> 00:19:57.526 A:middle
to scale the image to be very
large or more medium size

00:19:57.766 --> 00:19:59.106 A:middle
without distorting the colors.

00:19:59.856 --> 00:20:03.506 A:middle
You do this by specifying your
cap insets for the left, bottom,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:03.676 --> 00:20:07.436 A:middle
right, and top to be how far
into the image that you want it

00:20:07.436 --> 00:20:08.506 A:middle
to always stay the same.

00:20:08.906 --> 00:20:12.276 A:middle
And this is made even easier
using the new asset catalogs

00:20:12.376 --> 00:20:14.016 A:middle
in iOS or in Xcode 5.

00:20:15.046 --> 00:20:16.286 A:middle
So, where's is this
a win for you?

00:20:16.586 --> 00:20:18.566 A:middle
This is a big benefit
in your app

00:20:18.566 --> 00:20:21.516 A:middle
because you can use a single
asset to style buttons

00:20:21.516 --> 00:20:24.596 A:middle
of all types of different
sizes across your entire app.

00:20:24.846 --> 00:20:27.306 A:middle
It also is a big win
for localization.

00:20:27.666 --> 00:20:30.926 A:middle
So, as you have text in your
application and you have buttons

00:20:30.926 --> 00:20:32.196 A:middle
with different lengths
of strings,

00:20:32.776 --> 00:20:35.156 A:middle
the buttons will
automatically and cleanly resize

00:20:35.416 --> 00:20:37.916 A:middle
to fit whatever string
your localization team puts

00:20:37.916 --> 00:20:39.686 A:middle
into the app.

00:20:39.946 --> 00:20:42.956 A:middle
So, going back to the specs from
our designers, they've asked us

00:20:42.956 --> 00:20:44.216 A:middle
to use these custom buttons

00:20:44.216 --> 00:20:46.816 A:middle
across our application
using a resizable image

00:20:47.146 --> 00:20:50.196 A:middle
and they've also asked us to use
a tint color of puce in our app.

00:20:50.656 --> 00:20:52.596 A:middle
Jim, do you remember what
the value is for puce?

00:20:52.596 --> 00:20:55.796 A:middle
&gt;&gt; Uh, 204136153.

00:20:56.186 --> 00:20:56.736 A:middle
&gt;&gt; Make it so.

00:20:56.736 --> 00:20:57.776 A:middle
&gt;&gt; All right, cool.

00:20:59.666 --> 00:21:02.576 A:middle
So, let's show you
what it looks like now.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:03.276 --> 00:21:06.956 A:middle
As you can see, we-- on
the first demo I had,

00:21:06.956 --> 00:21:07.756 A:middle
the buttons are already
in there.

00:21:07.756 --> 00:21:08.816 A:middle
So, they're still
already in there.

00:21:08.816 --> 00:21:13.356 A:middle
But now, they all have the tint
color that everyone so loves.

00:21:13.356 --> 00:21:15.946 A:middle
And then you know also the
navigation bar also has

00:21:15.986 --> 00:21:16.506 A:middle
tint color.

00:21:16.806 --> 00:21:18.776 A:middle
As we drill through the app,
everything that [inaudible]

00:21:18.866 --> 00:21:20.226 A:middle
to the tint color
already has it.

00:21:20.226 --> 00:21:21.766 A:middle
So, we changed one line of code

00:21:21.766 --> 00:21:24.596 A:middle
and our entire application
gets themed with its color.

00:21:26.716 --> 00:21:29.096 A:middle
And now, our designers actually
in our application wanted

00:21:29.096 --> 00:21:32.496 A:middle
to have backgrounds to
be blurred in some cases

00:21:32.546 --> 00:21:35.466 A:middle
and then not blurred in
other cases to give some--

00:21:35.466 --> 00:21:37.786 A:middle
just have a little bit
more polish to our app.

00:21:38.086 --> 00:21:40.226 A:middle
And you do that by
when you select one

00:21:40.306 --> 00:21:42.506 A:middle
of your favorite photos
in your application,

00:21:42.506 --> 00:21:44.096 A:middle
so let's go and choose that one.

00:21:44.856 --> 00:21:46.796 A:middle
And we go ahead and we'll
set that as our background.

00:21:46.796 --> 00:21:48.116 A:middle
And if you notice right now

00:21:48.146 --> 00:21:50.816 A:middle
that the segment it controls
also picked up the tint color.

00:21:51.186 --> 00:21:53.336 A:middle
And as I set the
background color,

00:21:53.436 --> 00:21:55.416 A:middle
if I set the background image,

00:21:55.716 --> 00:21:58.226 A:middle
the checkbox is also
a template image.

00:21:58.226 --> 00:22:00.536 A:middle
So it will also pick
up the tint color.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:01.136 --> 00:22:03.716 A:middle
As we go back, now we see

00:22:03.716 --> 00:22:06.036 A:middle
that our background
has a nice tint effect

00:22:06.036 --> 00:22:06.986 A:middle
or a blurring effect to it.

00:22:06.986 --> 00:22:07.396 A:middle
Excuse me.

00:22:07.936 --> 00:22:09.796 A:middle
And as we back up all the
way to the main screen,

00:22:10.136 --> 00:22:13.886 A:middle
you'll see that the buttons
are actually getting blurred

00:22:13.886 --> 00:22:14.316 A:middle
as well.

00:22:15.236 --> 00:22:18.136 A:middle
So, let me show you how we
go about doing those effects.

00:22:18.376 --> 00:22:20.386 A:middle
As Brandon mentioned, we wanted

00:22:20.386 --> 00:22:22.456 A:middle
to set a default button
background for all

00:22:22.456 --> 00:22:22.936 A:middle
of our buttons

00:22:22.936 --> 00:22:26.156 A:middle
in our application unless
we had set a specific--

00:22:26.156 --> 00:22:28.076 A:middle
some specific blurred
background.

00:22:28.476 --> 00:22:29.856 A:middle
And so, we won't go
into this very much.

00:22:29.886 --> 00:22:31.616 A:middle
But this is the code
that actually does that.

00:22:31.946 --> 00:22:35.836 A:middle
We get our default button and
then we make resizable image

00:22:35.836 --> 00:22:39.426 A:middle
with cap insets and we set a
5 point cap inset on the top,

00:22:39.426 --> 00:22:40.406 A:middle
left, bottom, and right.

00:22:41.206 --> 00:22:42.816 A:middle
And to give you some reference,

00:22:42.816 --> 00:22:46.446 A:middle
this is actually the images
I'm using and it is very tiny.

00:22:46.446 --> 00:22:48.026 A:middle
It's an 11 by 11 pixel image.

00:22:48.786 --> 00:22:50.126 A:middle
And so, when we stretched that,

00:22:50.126 --> 00:22:52.206 A:middle
only the center pixels
actually get stretched.

00:22:52.706 --> 00:22:56.966 A:middle
And we set that using the
button, UIButton's appearance.

00:22:56.966 --> 00:22:59.516 A:middle
We set the background image
for the normal control state.

00:22:59.766 --> 00:23:00.936 A:middle
And now, all of our buttons

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.936 --> 00:23:02.806 A:middle
in our application
have the same look.

00:23:03.876 --> 00:23:06.216 A:middle
Now to do tint color with
our lovely puce color,

00:23:06.216 --> 00:23:09.136 A:middle
we just set the tint
color on the window

00:23:09.696 --> 00:23:12.156 A:middle
and we could have done this
on each individual view.

00:23:12.156 --> 00:23:14.626 A:middle
But then, if we needed to make
a change which designers tend

00:23:14.626 --> 00:23:17.106 A:middle
to do every once
in a while, we--

00:23:17.436 --> 00:23:19.036 A:middle
we'd have to go make
the change globally.

00:23:19.116 --> 00:23:20.846 A:middle
In this way, we just
make one change

00:23:21.056 --> 00:23:23.016 A:middle
and then we can tell them
it took several hours

00:23:23.016 --> 00:23:23.966 A:middle
and it took seconds.

00:23:24.236 --> 00:23:27.086 A:middle
Now, I'm moving on to getting
the blur for the buttons.

00:23:28.616 --> 00:23:31.576 A:middle
Our launch view controller
is the first view controller

00:23:31.576 --> 00:23:33.676 A:middle
that comes up when the
application is launched.

00:23:34.246 --> 00:23:35.916 A:middle
And our designers
wanted the background

00:23:35.916 --> 00:23:38.306 A:middle
to be the normal color but
they wanted the buttons

00:23:38.406 --> 00:23:40.436 A:middle
to blur the content
that was behind them.

00:23:41.006 --> 00:23:44.376 A:middle
And so, when this-- when this
View Controller comes up,

00:23:44.376 --> 00:23:46.136 A:middle
it gives-- there's a
method called update in--

00:23:46.246 --> 00:23:48.036 A:middle
one of my own methods
called update interface

00:23:48.186 --> 00:23:49.626 A:middle
and if we have updated
the button,

00:23:49.626 --> 00:23:52.166 A:middle
I have another convenience
method called applyBackground

00:23:52.166 --> 00:23:53.716 A:middle
ToButtonSourceBlurFromView.

00:23:54.606 --> 00:23:57.266 A:middle
And what this does is it
takes a button and a view

00:23:57.266 --> 00:23:58.406 A:middle
that you want to blur from.

00:23:58.756 --> 00:24:01.456 A:middle
And it basically just calls
drawViewHierarchyInRect

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:01.546 --> 00:24:03.996 A:middle
and makes the blur and applies
it to the button background.

00:24:04.506 --> 00:24:09.426 A:middle
And this is the bulk of the
work happens right here.

00:24:09.946 --> 00:24:12.206 A:middle
As Brandon mentioned, we have
to start an image context

00:24:12.206 --> 00:24:14.856 A:middle
with UIGraphicsBegin
ImageContextWithOptions,

00:24:15.476 --> 00:24:17.256 A:middle
and we set that to
the size of the button

00:24:17.456 --> 00:24:18.716 A:middle
because that's what
the size we need.

00:24:19.466 --> 00:24:22.406 A:middle
But we also need to know the
buttons' coordinates inside the

00:24:22.486 --> 00:24:25.076 A:middle
background views
coordinate space and we need

00:24:25.076 --> 00:24:27.136 A:middle
that because you need
to position the view

00:24:27.486 --> 00:24:30.136 A:middle
so that it draws
correctly into the context.

00:24:30.676 --> 00:24:32.586 A:middle
If you didn't actually
reposition the view, would it--

00:24:32.586 --> 00:24:34.826 A:middle
they both draw at 0,
0 inside the context.

00:24:35.186 --> 00:24:37.006 A:middle
So, what you need to
do is in this case,

00:24:37.006 --> 00:24:39.856 A:middle
we need to offset the left and
going to go offset to the--

00:24:40.026 --> 00:24:43.786 A:middle
offset upwards so that the part
of the button that's hovering

00:24:43.786 --> 00:24:47.756 A:middle
over is what actually gets
drawn into the context.

00:24:47.756 --> 00:24:49.866 A:middle
Once that's done, we
call UIGraphicsGetImage

00:24:49.866 --> 00:24:52.466 A:middle
FromCurrentImageContext
to get an image out of it

00:24:52.466 --> 00:24:53.896 A:middle
and then we end the context.

00:24:54.206 --> 00:24:57.596 A:middle
And then this is where
the blur magic happens.

00:24:57.716 --> 00:24:59.436 A:middle
We're applying a light effect.

00:24:59.806 --> 00:25:01.776 A:middle
And like Brandon mentioned,
this is going to be

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:01.776 --> 00:25:03.646 A:middle
in this sample code as well

00:25:03.646 --> 00:25:06.956 A:middle
as another sample code that's
already on the developer sight.

00:25:06.956 --> 00:25:08.456 A:middle
It's a fantastic amount of math.

00:25:08.656 --> 00:25:10.536 A:middle
It's fun to go look at
but it really doesn't--

00:25:10.626 --> 00:25:11.926 A:middle
it's not all that
interesting care.

00:25:12.196 --> 00:25:14.376 A:middle
But I encourage you to all
go look at how it's done.

00:25:15.076 --> 00:25:17.066 A:middle
But once we have that
image, that's not blurred,

00:25:17.066 --> 00:25:18.786 A:middle
we set it as our
button's background image

00:25:19.096 --> 00:25:21.096 A:middle
and that's how you
get blur in iOS 7.

00:25:21.566 --> 00:25:22.726 A:middle
&gt;&gt; It's looking great, Jim.

00:25:23.246 --> 00:25:26.336 A:middle
Would you like to get started on
that kind of flipbook animation

00:25:26.336 --> 00:25:27.996 A:middle
that our designers put
to the spec together for?

00:25:28.106 --> 00:25:29.306 A:middle
&gt;&gt; Yeah, I should
get started on that.

00:25:29.306 --> 00:25:30.876 A:middle
&gt;&gt; I think UIDynamics
would be the way to go.

00:25:31.196 --> 00:25:33.396 A:middle
So, let's start talking
about UIKit Dynamics.

00:25:33.836 --> 00:25:36.456 A:middle
So, how can we make realistic
motion in your application?

00:25:37.066 --> 00:25:39.026 A:middle
There's two parts of this
we'd like to talk about today.

00:25:39.436 --> 00:25:42.826 A:middle
UIKit Dynamics as well as
the new motion effects APIs.

00:25:43.216 --> 00:25:44.826 A:middle
Let's get started with Dynamics.

00:25:45.666 --> 00:25:49.656 A:middle
The UIKit Dynamic system was
introduced in iOS 7 as a system

00:25:49.656 --> 00:25:52.636 A:middle
that lets you mimic real
world physical behaviors

00:25:52.636 --> 00:25:55.236 A:middle
in your application
and we backed UIKit

00:25:55.236 --> 00:25:57.356 A:middle
with a physics engine to
help make that possible.

00:25:58.106 --> 00:26:01.426 A:middle
Now, you can do a lot of really
cool things with UIKit Dynamics.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:01.546 --> 00:26:03.986 A:middle
You can do a lot of crazy
things with UIKit Dynamics.

00:26:04.396 --> 00:26:05.946 A:middle
They best advice I'd
like to offer you

00:26:05.946 --> 00:26:08.056 A:middle
with Dynamics is
it's really effective

00:26:08.056 --> 00:26:09.576 A:middle
when you use it in moderation.

00:26:10.006 --> 00:26:13.196 A:middle
It's really easy to go overboard
with it and it's really easy,

00:26:13.196 --> 00:26:16.266 A:middle
you'll find, to have a small
value make a big change

00:26:16.266 --> 00:26:16.686 A:middle
in your app.

00:26:17.566 --> 00:26:20.026 A:middle
To help you make dynamics
possible in your app,

00:26:20.436 --> 00:26:22.046 A:middle
we've brought along a number

00:26:22.046 --> 00:26:25.096 A:middle
of really straightforward
behaviors that you can use.

00:26:25.856 --> 00:26:28.126 A:middle
So, we've introduced
concepts like gravity.

00:26:29.696 --> 00:26:32.386 A:middle
We've introduced
concepts like collisions

00:26:32.526 --> 00:26:34.256 A:middle
where things will
bounce off of each other.

00:26:35.726 --> 00:26:39.406 A:middle
We've added pushes where you
can do both instantaneous pushes

00:26:39.486 --> 00:26:41.296 A:middle
which give a shove in
the direction as well

00:26:41.296 --> 00:26:44.186 A:middle
as a continuous push that always
exerts a push in one direction.

00:26:45.256 --> 00:26:48.276 A:middle
We've added snapping behavior
where you can have things snap

00:26:48.276 --> 00:26:50.106 A:middle
to certain points
in a very nice way.

00:26:50.106 --> 00:26:55.166 A:middle
And finally, we have attachments
where things will be touched

00:26:55.166 --> 00:26:56.646 A:middle
to a point and will
kind of maintain

00:26:56.646 --> 00:26:57.946 A:middle
that distance in
that attachment.

00:26:58.986 --> 00:27:00.276 A:middle
So, what do you need to do

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:00.276 --> 00:27:02.426 A:middle
to introduce dynamics
in your applications?

00:27:04.296 --> 00:27:06.386 A:middle
It's not that difficult
to get started.

00:27:06.986 --> 00:27:10.256 A:middle
The first thing you'll want to
do is create a dynamic allocator

00:27:10.516 --> 00:27:12.296 A:middle
and you give it a reference
view that you're going

00:27:12.296 --> 00:27:14.056 A:middle
to be doing your
dynamics effect in.

00:27:14.986 --> 00:27:18.046 A:middle
After that, you need to
create a number of behaviors

00:27:18.216 --> 00:27:21.206 A:middle
that define what the dynamics
engine should be doing.

00:27:21.646 --> 00:27:22.416 A:middle
In this case, we're going

00:27:22.416 --> 00:27:24.206 A:middle
to just make a simple
gravity behavior.

00:27:24.626 --> 00:27:27.006 A:middle
And you notice, we give it
an array of items that we

00:27:27.006 --> 00:27:28.476 A:middle
like that behavior to apply to.

00:27:29.196 --> 00:27:31.956 A:middle
By default, we're making
all views opt into dynamics

00:27:31.956 --> 00:27:34.566 A:middle
so you can add your views
into that list of items.

00:27:35.146 --> 00:27:37.706 A:middle
You can also by default
have items

00:27:37.706 --> 00:27:39.936 A:middle
in your collection views
animate with Dynamics.

00:27:40.246 --> 00:27:42.916 A:middle
You can also implement this
protocol on your own classes

00:27:42.956 --> 00:27:45.106 A:middle
if you'd like to make your
own very unique things

00:27:45.106 --> 00:27:46.966 A:middle
that are opting into dynamics.

00:27:47.926 --> 00:27:51.056 A:middle
Once we've created a behavior,
we can add it to our animator

00:27:51.306 --> 00:27:52.286 A:middle
to put it in the scene.

00:27:52.786 --> 00:27:54.316 A:middle
Everything that's
attached to our animators,

00:27:54.446 --> 00:27:56.296 A:middle
all those behaviors
are going to be running

00:27:56.546 --> 00:27:58.306 A:middle
and impacting your
application right away.

00:27:59.336 --> 00:28:01.316 A:middle
&gt;&gt; Hey, Brandon, instead
of talking about Dynamics

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:01.316 --> 00:28:03.976 A:middle
on slides anymore, how about
I just them what it looks

00:28:03.976 --> 00:28:04.816 A:middle
like on the device?

00:28:04.816 --> 00:28:05.966 A:middle
&gt;&gt; That'd make a lot of sense.

00:28:05.966 --> 00:28:06.456 A:middle
Go for it.

00:28:06.556 --> 00:28:07.586 A:middle
&gt;&gt; So, we're going
to use dynamics

00:28:07.586 --> 00:28:08.886 A:middle
in two different
places on our apps.

00:28:08.886 --> 00:28:11.436 A:middle
Obviously, the first one is
net that [inaudible] effect

00:28:11.906 --> 00:28:13.876 A:middle
which I've got it working
a little bit better.

00:28:13.926 --> 00:28:16.266 A:middle
So, let's go pick a photo that
isn't really all that good.

00:28:17.596 --> 00:28:19.246 A:middle
There is a photo of
a taxi that can go.

00:28:19.406 --> 00:28:23.236 A:middle
And then what you can see now
is as the shred line goes up,

00:28:23.236 --> 00:28:25.646 A:middle
each individual one of those
boxes gets a little bit

00:28:25.726 --> 00:28:27.536 A:middle
of a dynamic effect added to it.

00:28:27.536 --> 00:28:29.366 A:middle
We can go delete
another one to see it.

00:28:30.316 --> 00:28:32.996 A:middle
So, the animation that was
happening before is still

00:28:32.996 --> 00:28:33.946 A:middle
exactly the same.

00:28:33.946 --> 00:28:37.026 A:middle
But now, as that scanline
goes up and it hits a row,

00:28:37.256 --> 00:28:39.146 A:middle
each one of the boxes
on that row gets added

00:28:39.146 --> 00:28:40.376 A:middle
to a gravity behavior.

00:28:41.066 --> 00:28:43.216 A:middle
And then, each one of
those also gets a push

00:28:43.216 --> 00:28:45.346 A:middle
in a general random
upwards direction

00:28:45.346 --> 00:28:47.606 A:middle
of some minor amount
of magnitude.

00:28:47.606 --> 00:28:48.656 A:middle
And that gives them the effect

00:28:48.656 --> 00:28:50.166 A:middle
that they're being
popped off like that.

00:28:50.166 --> 00:28:53.216 A:middle
It looks like the line
is burning through them

00:28:53.216 --> 00:28:54.096 A:middle
and tearing them apart.

00:28:54.666 --> 00:28:57.866 A:middle
So, it's getting pretty close
to what the designers want.

00:28:57.866 --> 00:28:59.356 A:middle
They may want to iterate
on that a little bit.

00:28:59.836 --> 00:29:01.306 A:middle
But the other place
that we really wanted

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:01.306 --> 00:29:05.376 A:middle
to use Dynamics was in our
flipbook in how we show photos

00:29:05.496 --> 00:29:07.286 A:middle
that we've taken during
the run to our users.

00:29:07.656 --> 00:29:09.596 A:middle
I mean, you can go through and
swipe but this thing is going

00:29:09.596 --> 00:29:11.076 A:middle
to take a picture
every three seconds.

00:29:11.076 --> 00:29:13.006 A:middle
So, you're going to swipe
through thousands of photos.

00:29:13.836 --> 00:29:14.746 A:middle
Not very interesting.

00:29:15.376 --> 00:29:16.966 A:middle
So, instead, what we're
going to do is we're going

00:29:16.966 --> 00:29:17.916 A:middle
to make a flipbook effect.

00:29:18.606 --> 00:29:20.756 A:middle
And what this is actually
doing is it's just iterating

00:29:20.756 --> 00:29:23.226 A:middle
through every photo that you
took while you were walking

00:29:23.226 --> 00:29:23.866 A:middle
around the campus.

00:29:24.146 --> 00:29:27.456 A:middle
Surprising a little code
make this happen as far

00:29:27.516 --> 00:29:28.686 A:middle
as Dynamics is concerned.

00:29:29.406 --> 00:29:31.236 A:middle
What's actually happening is
in the upper left hand corner,

00:29:31.236 --> 00:29:33.036 A:middle
we basically placed
a view on the screen

00:29:33.476 --> 00:29:36.276 A:middle
and through some CAAnimation
or view-- a UIViewAnimation,

00:29:36.276 --> 00:29:38.686 A:middle
we just set the alpha
and the transform.

00:29:38.686 --> 00:29:41.936 A:middle
And then we give a little bit
of a shove, instantaneous push

00:29:41.936 --> 00:29:43.926 A:middle
so that it will land in the
light pole in the middle.

00:29:43.926 --> 00:29:46.526 A:middle
And that light pole
is a boundary that--

00:29:46.526 --> 00:29:49.016 A:middle
it's provided by UICollision.

00:29:49.526 --> 00:29:52.626 A:middle
And then, because things on
our simulation are bouncy,

00:29:52.756 --> 00:29:55.206 A:middle
it bounces off and in the
second part of that bounce,

00:29:55.206 --> 00:29:59.366 A:middle
there is some more animation
to shrink the view down

00:29:59.366 --> 00:30:00.976 A:middle
and animate its alpha
out to zero.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:01.616 --> 00:30:04.376 A:middle
Now, this is all fine
and good and everything

00:30:04.376 --> 00:30:06.096 A:middle
but Dynamics really,
we want you guys

00:30:06.096 --> 00:30:10.076 A:middle
to make your applications
more immersive with Dynamics.

00:30:10.076 --> 00:30:11.676 A:middle
We don't want you just
make things jiggle

00:30:11.676 --> 00:30:14.556 A:middle
and bounce and fly around.

00:30:14.956 --> 00:30:17.386 A:middle
So, Dynamics are really
meant to be interactive.

00:30:17.386 --> 00:30:19.206 A:middle
So, while this is running,
if someone was like saying,

00:30:19.206 --> 00:30:21.756 A:middle
well that's a really cool tree,
you should be able to grab it

00:30:23.086 --> 00:30:25.646 A:middle
and pull out photos and make--
so that the user can look at it

00:30:25.646 --> 00:30:27.096 A:middle
and say, "Well, it's a
really nice minivan."

00:30:27.456 --> 00:30:28.106 A:middle
I know, geez.

00:30:28.656 --> 00:30:29.226 A:middle
There's another one.

00:30:29.496 --> 00:30:30.666 A:middle
But, you get the idea.

00:30:30.946 --> 00:30:32.426 A:middle
The simulation never stopped.

00:30:32.426 --> 00:30:34.596 A:middle
You just added new
behaviors to it.

00:30:35.086 --> 00:30:37.556 A:middle
So, while this thing is
running, you can do all sorts

00:30:37.556 --> 00:30:40.896 A:middle
of different interesting
and unique behaviors just

00:30:40.896 --> 00:30:43.246 A:middle
by changing what the
animator is doing.

00:30:43.246 --> 00:30:44.966 A:middle
So, let's go-- take a look

00:30:44.966 --> 00:30:47.256 A:middle
at what this flipbook
looks like in code.

00:30:47.546 --> 00:30:49.516 A:middle
So, we have a flipbook
View Controller

00:30:49.516 --> 00:30:51.086 A:middle
that represents what I
just showed on screen.

00:30:51.846 --> 00:30:54.366 A:middle
And in our viewDidLoad, we're
going to create an animator

00:30:54.846 --> 00:30:56.226 A:middle
and [inaudible] the
reference view

00:30:56.226 --> 00:30:58.316 A:middle
of our view controllers
content view.

00:30:58.576 --> 00:31:01.046 A:middle
And then we create a
simple gravity behavior

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:01.046 --> 00:31:03.196 A:middle
and we give it a little bit more
gravity 'cause I want things

00:31:03.706 --> 00:31:04.806 A:middle
to fall quicker.

00:31:05.836 --> 00:31:07.776 A:middle
And then we create a
collision behavior,

00:31:08.116 --> 00:31:09.606 A:middle
and there's two reasons
to create this.

00:31:09.606 --> 00:31:12.196 A:middle
One, we needed that boundary
in the light pole so it--

00:31:12.196 --> 00:31:14.926 A:middle
the view or the image could
bounce off of something.

00:31:15.486 --> 00:31:17.706 A:middle
But we also need to know
when it bounced off of it.

00:31:17.946 --> 00:31:21.756 A:middle
And UICollisionBehavior
will actually tell you

00:31:22.636 --> 00:31:25.186 A:middle
that through one of
its delegate methods.

00:31:25.186 --> 00:31:30.146 A:middle
Second, we needed more
springiness in our simulation.

00:31:30.556 --> 00:31:32.036 A:middle
By default, normal thing--

00:31:32.036 --> 00:31:35.506 A:middle
everything in UIDynamics
has an elasticity of zero.

00:31:35.506 --> 00:31:37.066 A:middle
So it means it's not
really bouncy at all.

00:31:37.396 --> 00:31:42.416 A:middle
And so, to affect this, the
Dynamics, you create an instance

00:31:42.416 --> 00:31:44.126 A:middle
of UIDynamic item behavior.

00:31:44.436 --> 00:31:46.776 A:middle
And in this way, you can
actually change the properties

00:31:46.776 --> 00:31:49.726 A:middle
of any individual item or
a whole collection of items

00:31:49.726 --> 00:31:53.446 A:middle
in your simulation by changing
the properties on this behavior.

00:31:53.826 --> 00:31:56.766 A:middle
So, in this case, we set the
elasticity all the way up to one

00:31:56.826 --> 00:31:58.386 A:middle
and then we add all three

00:31:58.386 --> 00:32:00.076 A:middle
of those behaviors
directly to our animator.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:03.096 --> 00:32:07.226 A:middle
Then, as we iterate through
the photos, there's a bunch

00:32:07.226 --> 00:32:09.316 A:middle
of code here that gets the
photo and places it on screen

00:32:09.316 --> 00:32:10.546 A:middle
which isn't terribly
interesting.

00:32:11.376 --> 00:32:12.826 A:middle
This is the push.

00:32:14.076 --> 00:32:16.606 A:middle
We instantiate the push
behavior with our--

00:32:16.606 --> 00:32:18.596 A:middle
with the view that
represents our image.

00:32:19.316 --> 00:32:20.936 A:middle
We make the mode instantaneous

00:32:20.936 --> 00:32:22.286 A:middle
so it doesn't continue
to push it.

00:32:22.776 --> 00:32:26.176 A:middle
And then, we just basically push
it to the left a little bit.

00:32:26.296 --> 00:32:28.356 A:middle
That is all the momentum
we're actually pushing

00:32:28.356 --> 00:32:29.006 A:middle
on to that view.

00:32:29.006 --> 00:32:31.316 A:middle
Everything else happens
from this initial push.

00:32:32.366 --> 00:32:33.916 A:middle
And finally, we add
that container,

00:32:33.916 --> 00:32:36.356 A:middle
that image to the other
behaviors that are already

00:32:36.356 --> 00:32:37.316 A:middle
in play in the animator.

00:32:39.656 --> 00:32:42.516 A:middle
Now, down here is
the delegate method

00:32:42.516 --> 00:32:43.586 A:middle
from our CollisionBehavior.

00:32:43.676 --> 00:32:45.496 A:middle
CollisionBehavior
endedContextFor

00:32:45.496 --> 00:32:46.936 A:middle
ItemWithBoundaryIdentifier.

00:32:47.516 --> 00:32:50.536 A:middle
I love our names sometimes.

00:32:50.536 --> 00:32:52.756 A:middle
This is important for us
because of two things.

00:32:52.756 --> 00:32:55.566 A:middle
One, we needed to place that
view that you guys are focusing

00:32:55.566 --> 00:32:56.826 A:middle
on so that the images don't look

00:32:56.826 --> 00:32:58.516 A:middle
like they're just bouncing
all over the place.

00:32:59.246 --> 00:33:02.326 A:middle
And two, we needed to
complete the second part

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:02.326 --> 00:33:06.046 A:middle
of our animation, the
fading out of the view

00:33:06.116 --> 00:33:08.286 A:middle
and of the-- in the scale of it.

00:33:09.566 --> 00:33:12.126 A:middle
You also noticed that
in the views animation--

00:33:12.126 --> 00:33:14.176 A:middle
the view animations
completion block, we're going

00:33:14.176 --> 00:33:16.136 A:middle
and removing the item
from all the behaviors

00:33:16.136 --> 00:33:18.576 A:middle
that it was attached to before
we remove it from the superview.

00:33:19.136 --> 00:33:20.366 A:middle
And this is important to note

00:33:20.736 --> 00:33:23.906 A:middle
because while your
views can be off-screen

00:33:23.906 --> 00:33:25.726 A:middle
and still being processed
by Dynamics,

00:33:25.726 --> 00:33:28.356 A:middle
if they're not actually
imparting anything in your scene

00:33:28.746 --> 00:33:32.616 A:middle
or they're not having any kind
of effect on what the user sees,

00:33:32.616 --> 00:33:35.356 A:middle
it's in your best interest
to remove those views

00:33:35.576 --> 00:33:37.296 A:middle
and those behaviors
from the animation.

00:33:37.606 --> 00:33:40.696 A:middle
Otherwise, a view you can
imagine that's falling forever,

00:33:40.776 --> 00:33:43.096 A:middle
the system has to track
that and more tracking

00:33:43.096 --> 00:33:44.786 A:middle
of more space means more memory.

00:33:45.236 --> 00:33:49.376 A:middle
So, when a view no longer is
needed, go ahead and remove it

00:33:49.606 --> 00:33:50.876 A:middle
from the behavior
and the behaviors

00:33:50.876 --> 00:33:53.156 A:middle
from the animation
and all is good.

00:33:53.636 --> 00:33:57.106 A:middle
And one final thing I want to
point out with the grabbing

00:33:57.246 --> 00:34:00.296 A:middle
of the view, that was done
with no animation at all.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:00.576 --> 00:34:04.666 A:middle
That was all just an
attachment behavior and gravity.

00:34:05.466 --> 00:34:09.656 A:middle
So, how do we know to remove
that behavior and the view

00:34:09.656 --> 00:34:12.076 A:middle
from the screen if there's
no completion block.

00:34:12.985 --> 00:34:15.876 A:middle
Well, we're going to use another
dynamic item behavior here

00:34:15.876 --> 00:34:17.326 A:middle
and I called it off-screen
behavior,

00:34:17.946 --> 00:34:20.076 A:middle
and it's not actually
going to impart any kind

00:34:20.076 --> 00:34:22.696 A:middle
of behavioral changes
on the scene.

00:34:22.996 --> 00:34:24.956 A:middle
What it's going to do
is it's simply going

00:34:24.956 --> 00:34:28.516 A:middle
to call its action block, and
the action block is something

00:34:28.516 --> 00:34:30.706 A:middle
that we call every time
the scene is updated.

00:34:31.896 --> 00:34:35.196 A:middle
This block is a way that you
can interact with your scene

00:34:35.196 --> 00:34:38.696 A:middle
for this behavior or for any
other part of the simulation.

00:34:39.346 --> 00:34:42.436 A:middle
And so, in this case,
as the view is dropping,

00:34:42.436 --> 00:34:42.966 A:middle
we check to see

00:34:42.966 --> 00:34:44.786 A:middle
if our containers frame
has falling outside

00:34:44.786 --> 00:34:46.946 A:middle
of the windows bounds, and
when that actually happens,

00:34:47.025 --> 00:34:48.585 A:middle
we know that we're
no longer on screen

00:34:48.846 --> 00:34:51.116 A:middle
and we can actually remove
all of our container view,

00:34:51.116 --> 00:34:54.446 A:middle
the following container
view from the behavior,

00:34:54.876 --> 00:34:55.936 A:middle
from the gravity behavior.

00:34:56.216 --> 00:34:58.896 A:middle
We can move our own off-screen
behavior from the animator

00:34:58.896 --> 00:35:01.476 A:middle
and then we can remove the
container from the superview.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:02.826 --> 00:35:03.476 A:middle
Pretty cool, huh?

00:35:03.666 --> 00:35:04.506 A:middle
&gt;&gt; That's looking really cool.

00:35:04.506 --> 00:35:06.166 A:middle
I'm really digging
the flipbook animation

00:35:06.166 --> 00:35:07.026 A:middle
that you have going on there.

00:35:07.106 --> 00:35:07.396 A:middle
&gt;&gt; Thanks.

00:35:08.516 --> 00:35:09.586 A:middle
&gt;&gt; The next thing
we'd like to talk

00:35:09.586 --> 00:35:12.026 A:middle
about is how we can
create motion effects

00:35:12.026 --> 00:35:13.026 A:middle
in your applications.

00:35:13.356 --> 00:35:15.336 A:middle
Now, one of my favorite
things that we added

00:35:15.336 --> 00:35:18.056 A:middle
in iOS 7 is the sense
of parallax

00:35:18.056 --> 00:35:20.566 A:middle
where you can see how icons
move around on the home screen,

00:35:20.746 --> 00:35:22.756 A:middle
alert views float
above other views.

00:35:23.216 --> 00:35:25.416 A:middle
It's a really cool way
that we use to show--

00:35:25.416 --> 00:35:27.936 A:middle
give users the sense of
depth in your applications

00:35:27.936 --> 00:35:29.386 A:middle
and across the entire system.

00:35:30.126 --> 00:35:32.376 A:middle
So, as a reminder, this
is what that looks like.

00:35:32.726 --> 00:35:34.656 A:middle
We have an alert view
floating above some tabs

00:35:34.656 --> 00:35:36.476 A:middle
in that really cool
new Safari tab view.

00:35:36.926 --> 00:35:38.806 A:middle
And if you pay attention
to the top and bottom

00:35:38.806 --> 00:35:41.316 A:middle
of the alert view, as the
screen tilts up and down,

00:35:41.726 --> 00:35:44.376 A:middle
you notice how you can actually
see behind the alert view.

00:35:44.516 --> 00:35:45.636 A:middle
It really gives you a sense

00:35:45.636 --> 00:35:48.866 A:middle
that it's actually a layer
that's floating above the tabs.

00:35:49.696 --> 00:35:52.356 A:middle
These are made possible
using UIMotionEffect.

00:35:52.986 --> 00:35:56.046 A:middle
This is the API that you all
can use to create effects just

00:35:56.046 --> 00:35:59.396 A:middle
like you see on the home screen
or action sheets, alert views

00:35:59.396 --> 00:36:01.626 A:middle
and so on and across
the entire system.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:02.576 --> 00:36:05.646 A:middle
Now you can think of these
similarly to CAAnimations.

00:36:06.066 --> 00:36:08.176 A:middle
CAAnimation takes
time as an input.

00:36:08.626 --> 00:36:11.496 A:middle
UIMotionEffects take
device motion as an input.

00:36:12.266 --> 00:36:15.016 A:middle
We've done a ton of work to
optimize these behind the scenes

00:36:15.256 --> 00:36:18.066 A:middle
to have a very minimal
impact on the user's battery.

00:36:18.436 --> 00:36:20.246 A:middle
So we would really
encourage you to take the time

00:36:20.246 --> 00:36:22.716 A:middle
to use UIMotionEffects
rather than trying

00:36:22.716 --> 00:36:23.866 A:middle
to roll your own system.

00:36:24.716 --> 00:36:27.096 A:middle
So to help you understand
how motion effects work,

00:36:27.466 --> 00:36:29.726 A:middle
you really need to
understand what the inputs are

00:36:29.726 --> 00:36:30.676 A:middle
to device motion.

00:36:31.106 --> 00:36:32.606 A:middle
So as you tilt your
phone to the right,

00:36:33.046 --> 00:36:34.456 A:middle
you're getting a
positive 1 effect.

00:36:34.566 --> 00:36:37.126 A:middle
As you tilt it to the
left, a negative 1 effect.

00:36:37.126 --> 00:36:39.766 A:middle
As you tilt it down,
you get a positive 1.

00:36:40.186 --> 00:36:42.326 A:middle
And tilting up, you get
a negative 1 effect.

00:36:43.256 --> 00:36:43.846 A:middle
Make sense?

00:36:44.766 --> 00:36:46.416 A:middle
Let's do it again
just to make sure.

00:36:47.876 --> 00:36:49.756 A:middle
So again as you tilt
right you get plus 1,

00:36:50.036 --> 00:36:51.926 A:middle
tilting left gives
you a negative value.

00:36:52.306 --> 00:36:53.856 A:middle
Tilting down gives you a plus 1.

00:36:54.246 --> 00:36:56.076 A:middle
Tilting up gives you
a negative value.

00:36:56.746 --> 00:36:58.876 A:middle
And what you're looking at there
is how your thumb is actually

00:36:58.876 --> 00:37:00.176 A:middle
hovering above the screen

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.466 --> 00:37:02.096 A:middle
and how you actually
see different parts

00:37:02.096 --> 00:37:05.026 A:middle
of the screen behind your
thumb as you tilt the device.

00:37:05.426 --> 00:37:07.586 A:middle
To help make this easier
in your application,

00:37:07.986 --> 00:37:10.496 A:middle
we've provided
UIInterpolatingMotionEffect.

00:37:11.206 --> 00:37:13.416 A:middle
This is something that we're
providing as part of UIKit

00:37:13.686 --> 00:37:16.886 A:middle
that makes it easy to adopt the
motion effects in your apps.

00:37:17.636 --> 00:37:20.456 A:middle
It's very easy for you to use
interpolating motion effects

00:37:20.736 --> 00:37:23.606 A:middle
to interpolate between the
minimum and the maximum value

00:37:23.756 --> 00:37:25.686 A:middle
that you define when you
create the motion effect.

00:37:26.686 --> 00:37:29.206 A:middle
You know, what we apply
the animations to is

00:37:29.206 --> 00:37:30.546 A:middle
to a key path that you provide.

00:37:31.106 --> 00:37:33.306 A:middle
We can apply motion
effects to anything

00:37:33.306 --> 00:37:35.596 A:middle
that is animatable by CA.

00:37:36.576 --> 00:37:38.676 A:middle
The interpolating
motion effect is going

00:37:38.676 --> 00:37:41.676 A:middle
to automatically update
based on the device motion

00:37:41.676 --> 00:37:43.346 A:middle
as your users interact
with the screen.

00:37:43.886 --> 00:37:46.456 A:middle
And all you need to do to
make this work is attach them

00:37:46.456 --> 00:37:48.736 A:middle
to a UIView anywhere in
your-- outside your app,

00:37:48.736 --> 00:37:51.046 A:middle
and we'll start applying
motion effects to it.

00:37:51.456 --> 00:37:52.636 A:middle
It's really that simple.

00:37:53.276 --> 00:37:55.576 A:middle
If you want to do some
more advanced things,

00:37:55.796 --> 00:37:58.176 A:middle
there's a couple other bits
of API for motion effect.

00:37:58.766 --> 00:38:00.636 A:middle
The first is UIMotionEffect
group.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:01.146 --> 00:38:03.626 A:middle
You want to group every motion
effect that you want to attach

00:38:03.626 --> 00:38:05.966 A:middle
to a view into a single
motion effect group

00:38:05.966 --> 00:38:08.306 A:middle
so that we can evaluate
them simultaneously.

00:38:09.636 --> 00:38:10.936 A:middle
Now you're probably
already thinking

00:38:10.936 --> 00:38:12.256 A:middle
of these really cool ways

00:38:12.256 --> 00:38:13.786 A:middle
to take advantage
of motion effects.

00:38:14.046 --> 00:38:16.556 A:middle
And some of you are probably
thinking, "Well, that's great

00:38:16.556 --> 00:38:18.736 A:middle
but I want more than just
a simple interpolation."

00:38:19.246 --> 00:38:21.996 A:middle
Luckily we have a solution for
you, and that's the ability

00:38:21.996 --> 00:38:23.616 A:middle
to create your own
motion effects.

00:38:24.076 --> 00:38:26.366 A:middle
The method that you need
to implement is keypads

00:38:26.366 --> 00:38:28.316 A:middle
and relative values
for viewer offset.

00:38:29.256 --> 00:38:30.836 A:middle
The viewer offset
that we call you

00:38:30.836 --> 00:38:33.256 A:middle
with is what we're just
playing with with our phones,

00:38:33.456 --> 00:38:36.036 A:middle
that plus 1 to minus
1 on each axis.

00:38:37.016 --> 00:38:38.906 A:middle
You return back to
us a dictionary

00:38:39.016 --> 00:38:41.576 A:middle
with keypads and
relative values.

00:38:41.936 --> 00:38:45.126 A:middle
Those keypads are the set of
pads that you want your effects

00:38:45.126 --> 00:38:48.326 A:middle
to be applied to and the
relative values are what you

00:38:48.326 --> 00:38:51.106 A:middle
actually want that value to
be as the name would suggest.

00:38:51.636 --> 00:38:54.416 A:middle
This allows you to do a number
of incredibly cool things

00:38:54.416 --> 00:38:56.606 A:middle
with motion effects
in your applications.

00:38:57.606 --> 00:38:59.286 A:middle
So, what we want to
do with motion effects

00:38:59.286 --> 00:39:01.406 A:middle
in our app are a couple
of interesting things.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:02.026 --> 00:39:03.576 A:middle
The first thing our
designers want us

00:39:03.576 --> 00:39:06.056 A:middle
to do is apply some motion
effects to the buttons

00:39:06.056 --> 00:39:08.836 A:middle
on our home screen to give
them a sense of depth of rising

00:39:08.836 --> 00:39:10.156 A:middle
above that background view.

00:39:10.576 --> 00:39:11.986 A:middle
It's the same thing that you see

00:39:11.986 --> 00:39:14.146 A:middle
on the home screen
of your iOS devices.

00:39:14.946 --> 00:39:17.026 A:middle
They also put that lens
flare into our effect

00:39:17.026 --> 00:39:19.176 A:middle
because everyone loves
JJ Abrams lens flares.

00:39:19.566 --> 00:39:22.346 A:middle
But we thought why don't I
go a little bit beyond that

00:39:22.436 --> 00:39:24.486 A:middle
and actually make
that lens flare come

00:39:24.486 --> 00:39:25.636 A:middle
to life in our application.

00:39:26.126 --> 00:39:28.606 A:middle
So, Jim, why don't we see
what we can do with that?

00:39:28.926 --> 00:39:29.356 A:middle
&gt;&gt; All right.

00:39:29.356 --> 00:39:31.386 A:middle
What I came up with is not
exactly what our develop--

00:39:31.386 --> 00:39:34.086 A:middle
our designers came up with
because that's clearly shopped

00:39:34.086 --> 00:39:35.456 A:middle
and I'm not going to be
able to do that, so--

00:39:35.896 --> 00:39:37.966 A:middle
But what we came up with
I think is a lot cooler.

00:39:38.446 --> 00:39:40.556 A:middle
So, you can see that
before I pick up the device

00:39:40.556 --> 00:39:43.196 A:middle
that we have I think
reasonable effects

00:39:43.196 --> 00:39:44.366 A:middle
in [inaudible] of a lens flare.

00:39:44.616 --> 00:39:47.116 A:middle
And so when I pick up the
device that you'll notice though

00:39:47.116 --> 00:39:49.226 A:middle
as I start moving the
device in the next motion,

00:39:49.226 --> 00:39:51.476 A:middle
not only do you see the buttons
move but you actually see

00:39:51.476 --> 00:39:52.896 A:middle
that the lens flare is
actually moving along

00:39:52.896 --> 00:39:54.616 A:middle
like a diagonal line.

00:39:54.976 --> 00:39:56.386 A:middle
And you can also, it's
kind of hard to tell

00:39:56.386 --> 00:39:57.756 A:middle
but if you move really far

00:39:57.756 --> 00:40:02.456 A:middle
that the colors become much more
subdued and much more brighter.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:02.456 --> 00:40:04.576 A:middle
And then if I go in the
wide axis, the buttons move

00:40:04.576 --> 00:40:06.796 A:middle
and then the color actually
also changes on as well.

00:40:07.116 --> 00:40:09.316 A:middle
So as you actually move a little
bit, it's a little distracting

00:40:09.316 --> 00:40:11.456 A:middle
with the buttons, but the
lens flare effect is actually

00:40:11.456 --> 00:40:11.906 A:middle
pretty cool.

00:40:12.256 --> 00:40:14.516 A:middle
And this is all done
through UIMotionEffect,

00:40:15.186 --> 00:40:16.846 A:middle
and let me show you
what that looks like.

00:40:17.266 --> 00:40:18.206 A:middle
We'll start off with how we get

00:40:18.206 --> 00:40:19.786 A:middle
that altitude effect
on the buttons.

00:40:20.896 --> 00:40:22.616 A:middle
Now we're going to do this
in the same exact spot

00:40:22.616 --> 00:40:24.006 A:middle
where we had a blurred
red button.

00:40:24.006 --> 00:40:25.576 A:middle
So we're in our launch
view controller.

00:40:26.246 --> 00:40:29.066 A:middle
And so what we need to do is
we need to create two instances

00:40:29.066 --> 00:40:30.956 A:middle
of an
UIInterpolatingMotionEffect,

00:40:31.116 --> 00:40:35.036 A:middle
one for the x-axis and
one for the y-axis.

00:40:35.036 --> 00:40:38.766 A:middle
So we create one with a key path
of center.x and we set its type

00:40:38.826 --> 00:40:43.796 A:middle
to UIInterpolatingMotionEffect
TypeTiltAlongHorizontalAxis.

00:40:43.946 --> 00:40:47.326 A:middle
And we give it a minimum
and maximum relative value

00:40:47.326 --> 00:40:48.436 A:middle
of negative 10 and 10.

00:40:48.846 --> 00:40:52.476 A:middle
And what that means is that
wherever center.x is normally

00:40:52.476 --> 00:40:54.906 A:middle
for that view, it won't
deviate more than 10 points

00:40:54.906 --> 00:40:56.456 A:middle
in either direction
on the x-axis.

00:40:57.176 --> 00:40:58.646 A:middle
And now, we-- and
we do the same thing

00:40:58.646 --> 00:40:59.936 A:middle
for the y-axis right below it.

00:40:59.936 --> 00:41:00.966 A:middle
It's the exact same code.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:01.016 --> 00:41:04.016 A:middle
The only thing that's changed
is the key path is now center.y

00:41:04.446 --> 00:41:06.086 A:middle
and the type is vertical access.

00:41:06.756 --> 00:41:09.256 A:middle
And because we want
these to be evaluated

00:41:09.256 --> 00:41:12.256 A:middle
at exactly the same time, we
create a motion effect group.

00:41:12.476 --> 00:41:14.696 A:middle
We add both of those
motion effects

00:41:14.696 --> 00:41:16.366 A:middle
and then we add that
to the button.

00:41:16.726 --> 00:41:20.236 A:middle
So each button has its own
grouping of motion effects.

00:41:20.236 --> 00:41:23.246 A:middle
And that's how each button
moves like it has some altitude

00:41:23.246 --> 00:41:24.646 A:middle
above the view it's below.

00:41:24.646 --> 00:41:27.326 A:middle
Now the LensFlare
is not something

00:41:27.326 --> 00:41:29.446 A:middle
that was easily just done
through interpolation.

00:41:29.746 --> 00:41:32.016 A:middle
But it wasn't terribly
difficult to get done.

00:41:32.876 --> 00:41:35.366 A:middle
So we created a view
called lens flare view.

00:41:35.706 --> 00:41:38.336 A:middle
And in its initialization
we have a thing,

00:41:38.446 --> 00:41:40.636 A:middle
a method called
addFlareToEndpoint.

00:41:40.926 --> 00:41:43.446 A:middle
And that's basically a nice way
of saying that I created a line

00:41:43.446 --> 00:41:46.666 A:middle
from the top left and I
made it go down at an angle.

00:41:47.086 --> 00:41:49.766 A:middle
And we create these
lens flare blob views

00:41:50.086 --> 00:41:52.426 A:middle
that represent each
individual blob along that line.

00:41:52.906 --> 00:41:55.236 A:middle
The next thing that we do
is we create a random color

00:41:55.236 --> 00:41:58.206 A:middle
and we create an instance
of our custom subclass

00:41:58.206 --> 00:42:01.326 A:middle
of UIMotionEvent called lens
flare color motion effect.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:01.326 --> 00:42:03.316 A:middle
And it's a pretty simple class.

00:42:04.236 --> 00:42:06.016 A:middle
With the color, once
we initialized with it,

00:42:06.016 --> 00:42:08.506 A:middle
we pull out the components
that we're interested,

00:42:08.506 --> 00:42:09.496 A:middle
the hue and the brightness.

00:42:10.136 --> 00:42:12.466 A:middle
And then we implement key
paths and relative values

00:42:12.466 --> 00:42:15.666 A:middle
for viewer offset because
we map a horizontal movement

00:42:15.666 --> 00:42:18.296 A:middle
to brightness and we map our
vertical movement to the hue.

00:42:19.106 --> 00:42:21.326 A:middle
And we do some exciting
math to get a--

00:42:21.326 --> 00:42:23.516 A:middle
compute a new color value
based off the viewer offset.

00:42:24.296 --> 00:42:25.286 A:middle
We create a new color

00:42:25.386 --> 00:42:30.196 A:middle
and because our lens flare blobs
layers are actually CAShape

00:42:30.196 --> 00:42:31.966 A:middle
layers, the key path
that we need

00:42:31.966 --> 00:42:33.696 A:middle
to return is layer.fillColor

00:42:34.186 --> 00:42:36.086 A:middle
and then we just give it the
new color that we created.

00:42:36.086 --> 00:42:38.396 A:middle
And that's it, that's
how you can get the color

00:42:38.396 --> 00:42:40.376 A:middle
to actually map to
move in on your device.

00:42:41.746 --> 00:42:43.906 A:middle
Now, the motion is
even more simple.

00:42:44.996 --> 00:42:47.806 A:middle
We need the instance of lens
flare diagonal motion effect

00:42:47.806 --> 00:42:50.006 A:middle
which is also another
subclass of UIMotionEffect.

00:42:50.006 --> 00:42:52.736 A:middle
And again we implement key paths

00:42:52.736 --> 00:42:54.496 A:middle
and relative values
for viewer offset.

00:42:54.976 --> 00:42:56.396 A:middle
And again we do some more math

00:42:56.396 --> 00:42:57.726 A:middle
to basically interpolate
a value.

00:42:59.066 --> 00:43:02.456 A:middle
But what instead of looking
at both x and y, we just cared

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:02.456 --> 00:43:05.196 A:middle
about the horizontal
access-- axis, excuse me.

00:43:05.666 --> 00:43:09.616 A:middle
And what we did was we
applied our computation to it

00:43:09.616 --> 00:43:12.696 A:middle
but then we rotated that point,
and actually 45 degrees or so.

00:43:12.696 --> 00:43:15.596 A:middle
And then from that,
we are actually able

00:43:15.596 --> 00:43:18.456 A:middle
to get not only x movement
but y movement as well.

00:43:18.906 --> 00:43:23.946 A:middle
And we simply send center.x
and center.y to that rotated x

00:43:23.946 --> 00:43:25.116 A:middle
and rotated y on that view.

00:43:25.386 --> 00:43:28.276 A:middle
And then that's how that, those
views move all along that line.

00:43:28.836 --> 00:43:31.586 A:middle
It's a really neat effect and
it's important to really realize

00:43:31.586 --> 00:43:32.976 A:middle
that motion effects are more

00:43:32.976 --> 00:43:34.976 A:middle
than just moving things
around the device.

00:43:36.096 --> 00:43:37.016 A:middle
&gt;&gt; That's looking great, Jim.

00:43:37.016 --> 00:43:39.476 A:middle
I think motion effects are a
really cool way that we can use

00:43:39.476 --> 00:43:41.056 A:middle
to make all of our
apps come alive

00:43:41.056 --> 00:43:42.826 A:middle
within our customers' devices,

00:43:42.826 --> 00:43:44.626 A:middle
make things really feel
interesting and engaging.

00:43:44.756 --> 00:43:44.936 A:middle
&gt;&gt; Yeah.

00:43:45.186 --> 00:43:47.336 A:middle
&gt;&gt; So let's go ahead and wrap
things up from today's talk.

00:43:47.676 --> 00:43:50.026 A:middle
We've shown you a lot of really
cool stuff that you can use

00:43:50.026 --> 00:43:53.516 A:middle
in your applications to make
things look great on iOS 7.

00:43:53.716 --> 00:43:56.366 A:middle
If you want to customize
transitions in your application,

00:43:56.626 --> 00:43:58.576 A:middle
you can do that using
the new UIViewController

00:43:58.576 --> 00:43:59.786 A:middle
transitioning systems.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:00.316 --> 00:44:03.186 A:middle
You can set your applications
wide appearance using tintColor

00:44:03.186 --> 00:44:06.086 A:middle
as well as taking advantage
of the UIAppearance proxies

00:44:06.086 --> 00:44:08.076 A:middle
that we introduced in iOS 5.

00:44:08.746 --> 00:44:11.436 A:middle
Images are a great way to make
things look interesting as well,

00:44:11.436 --> 00:44:14.386 A:middle
and the new template images
are a huge win for you

00:44:14.436 --> 00:44:16.806 A:middle
in making things
look unique and get

00:44:16.806 --> 00:44:18.746 A:middle
that custom unique
tint color in your apps

00:44:18.886 --> 00:44:20.996 A:middle
across the entire
system in an easy way.

00:44:21.756 --> 00:44:24.246 A:middle
UIKit Dynamics are a great
way to make things come alive

00:44:24.486 --> 00:44:27.036 A:middle
and feel very realistic
and you can take advantage

00:44:27.036 --> 00:44:29.456 A:middle
of motion effect to really
make your apps come alive

00:44:29.456 --> 00:44:32.056 A:middle
in the user's hands while
they're using their device.

00:44:32.326 --> 00:44:34.896 A:middle
If you didn't make it to some
of these sessions earlier

00:44:34.896 --> 00:44:36.396 A:middle
in the week, I would
highly encourage you

00:44:36.396 --> 00:44:37.356 A:middle
to check out the videos.

00:44:37.686 --> 00:44:39.736 A:middle
These are all some great
talks that explain how to go

00:44:39.736 --> 00:44:41.666 A:middle
into more depth in
some of these APIs.

00:44:41.666 --> 00:44:43.496 A:middle
And if you have other questions,

00:44:43.876 --> 00:44:46.846 A:middle
there's some great documentation
online and please e-mail Jake,

00:44:46.996 --> 00:44:48.976 A:middle
he loves hearing from you
guys every single day.

00:44:48.976 --> 00:44:49.946 A:middle
Thanks for attending WWDC.

00:44:50.016 --> 00:44:52.000 A:middle
[Applause]

