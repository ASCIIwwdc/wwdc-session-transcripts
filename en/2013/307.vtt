WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:10.516 A:middle
[ Silence ]

00:00:11.016 --> 00:00:15.000 A:middle
[ Applause ]

00:00:15.086 --> 00:00:15.616 A:middle
&gt;&gt; Jay Bruins: My
name is Jay Bruins

00:00:15.656 --> 00:00:18.546 A:middle
and I'm a Core Location Engineer
and I'm here today to share

00:00:18.546 --> 00:00:20.846 A:middle
with you some exciting new
changes that we've made

00:00:20.846 --> 00:00:25.126 A:middle
to the Core Location APIs and
so let's get right into it.

00:00:26.366 --> 00:00:28.006 A:middle
We've got a number of things
we're going to cover today.

00:00:28.256 --> 00:00:30.696 A:middle
The first thing that we're going
to cover is changes related

00:00:30.696 --> 00:00:32.345 A:middle
to the new Multitasking
Behaviors.

00:00:32.746 --> 00:00:35.176 A:middle
And so some of the multitasking
behaviors change the way

00:00:35.176 --> 00:00:37.746 A:middle
location work and so we're
going to cover those today.

00:00:39.016 --> 00:00:40.936 A:middle
The next thing I want
to dive into is going

00:00:40.936 --> 00:00:42.456 A:middle
to be Creating Fitness
Applications.

00:00:42.856 --> 00:00:45.346 A:middle
Many of you guys already have
applications in the store

00:00:45.346 --> 00:00:49.016 A:middle
that allow a user to track
their fitness but, with a couple

00:00:49.016 --> 00:00:50.996 A:middle
of changes you can actually
get much better battery life.

00:00:52.066 --> 00:00:54.606 A:middle
And lastly, we've got some
exciting new region monitoring

00:00:54.606 --> 00:00:56.176 A:middle
changes today that I'm
happy to share with you.

00:00:56.866 --> 00:00:59.726 A:middle
I'd like to start by
saying this is not a review.

00:00:59.966 --> 00:01:01.996 A:middle
If you're watching this
online you might want to pause

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:01.996 --> 00:01:03.646 A:middle
and go back to last year's
video, which is going

00:01:03.646 --> 00:01:04.586 A:middle
to be much more basic.

00:01:05.306 --> 00:01:07.826 A:middle
This review-- today I'm
going to move very quickly.

00:01:07.826 --> 00:01:09.736 A:middle
So, if you're in the
audience stick around.

00:01:09.736 --> 00:01:12.446 A:middle
You're going to experience
our exciting new features

00:01:12.876 --> 00:01:15.936 A:middle
but you might want to kind of
review our documents online

00:01:15.936 --> 00:01:18.226 A:middle
to get yourself grounded a bit
better before diving into Code.

00:01:18.706 --> 00:01:20.636 A:middle
So with that, let's
start talking

00:01:20.636 --> 00:01:23.046 A:middle
about the Multitasking
changes and how they relate

00:01:23.046 --> 00:01:24.166 A:middle
to your location application.

00:01:25.406 --> 00:01:27.156 A:middle
So, one thing to keep in mind

00:01:27.156 --> 00:01:30.286 A:middle
with the new multitasking UPIs
is that we've allowed the user

00:01:30.406 --> 00:01:32.946 A:middle
to take control over
multitasking behavior on iOS.

00:01:33.616 --> 00:01:36.766 A:middle
So, with that the user can
actually disable multitasking

00:01:36.896 --> 00:01:37.876 A:middle
across the device.

00:01:38.686 --> 00:01:42.806 A:middle
Similarly they can single
out your application to say

00:01:42.806 --> 00:01:44.516 A:middle
that I don't want it to be
running in the background.

00:01:44.816 --> 00:01:47.076 A:middle
Usually it's to save
power or some sort

00:01:47.076 --> 00:01:48.596 A:middle
of conception issue like that.

00:01:49.546 --> 00:01:52.736 A:middle
And lastly, they can temporarily
override multitasking

00:01:52.906 --> 00:01:54.956 A:middle
by quitting your app
from the app switcher.

00:01:55.496 --> 00:01:57.526 A:middle
And if they do this,
this is a signal to us

00:01:57.526 --> 00:01:59.686 A:middle
that they're not really
interested in the features

00:01:59.686 --> 00:02:02.146 A:middle
that your application
provide for a period of time

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:02.316 --> 00:02:04.356 A:middle
and they'll manually
launch their application

00:02:04.796 --> 00:02:06.206 A:middle
when their interested

00:02:06.206 --> 00:02:08.895 A:middle
in receiving your
functionality again.

00:02:09.515 --> 00:02:11.836 A:middle
So, with that let's talk
about the Core Location APIs

00:02:11.836 --> 00:02:14.256 A:middle
that are affected by this
multitasking ability.

00:02:14.976 --> 00:02:17.446 A:middle
Specifically, continuous
background location.

00:02:18.126 --> 00:02:19.716 A:middle
So, if you're a fitness
application

00:02:19.916 --> 00:02:22.366 A:middle
or you're providing turn-by-turn
directions and you want

00:02:22.366 --> 00:02:24.316 A:middle
to continue running the
background with the power

00:02:24.316 --> 00:02:28.056 A:middle
on we're-- this is going to
be affected by the switch.

00:02:29.176 --> 00:02:31.466 A:middle
Similarly, if you're using
significant location change

00:02:31.776 --> 00:02:34.406 A:middle
to provide overall
day-to-day tracking of the user

00:02:34.836 --> 00:02:37.706 A:middle
or if you're using fences to
provide notifications of arrival

00:02:37.706 --> 00:02:40.286 A:middle
or departure, these
APIs are disabled

00:02:40.286 --> 00:02:42.776 A:middle
in the even the user
turns off Multitasking

00:02:42.986 --> 00:02:43.676 A:middle
for your application.

00:02:43.676 --> 00:02:48.126 A:middle
So, we have a couple of
recommendations for you

00:02:48.326 --> 00:02:49.436 A:middle
and these really dovetail

00:02:49.496 --> 00:02:51.956 A:middle
with the recommendations we've
always been providing you

00:02:52.336 --> 00:02:54.496 A:middle
with regards to authorization
on the app.

00:02:55.306 --> 00:02:57.256 A:middle
Be clear about why
you're using Location.

00:02:58.276 --> 00:03:00.776 A:middle
These goes beyond just
specifying NS Location usage

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.776 --> 00:03:02.406 A:middle
description key inside
of your infoplist.

00:03:02.406 --> 00:03:05.736 A:middle
What we'd actually like you to
do is use location in response

00:03:05.776 --> 00:03:07.816 A:middle
to users interaction
with your application.

00:03:08.276 --> 00:03:10.806 A:middle
Start location when the user
presses the location button

00:03:11.266 --> 00:03:13.966 A:middle
or does a search and they
need to know where they are.

00:03:15.226 --> 00:03:16.846 A:middle
Be selective about
using location.

00:03:16.916 --> 00:03:19.326 A:middle
If you turn off location
and the user sees

00:03:19.326 --> 00:03:22.546 A:middle
that you're responsibly
turning off, they're more likely

00:03:22.546 --> 00:03:24.626 A:middle
to trust you with their
location and they're more likely

00:03:24.726 --> 00:03:26.026 A:middle
to leave Multitasking enabled.

00:03:27.086 --> 00:03:29.396 A:middle
Similarly don't start
on every launch.

00:03:30.206 --> 00:03:32.566 A:middle
Realize that your application
can launch for a number

00:03:32.566 --> 00:03:34.286 A:middle
of reasons, including
into the background.

00:03:34.456 --> 00:03:36.316 A:middle
And so if you're
launching location,

00:03:36.316 --> 00:03:38.606 A:middle
if you're starting location
every time you're running,

00:03:39.056 --> 00:03:40.026 A:middle
you're just going to guarantee

00:03:40.026 --> 00:03:41.406 A:middle
that you drain the
user's battery.

00:03:42.136 --> 00:03:45.996 A:middle
And if we're talking about
launching our app proactively

00:03:45.996 --> 00:03:48.046 A:middle
to do fetches in order
to have a fresh UI,

00:03:48.046 --> 00:03:50.586 A:middle
we're going to be throttling
you more aggressively,

00:03:50.586 --> 00:03:51.476 A:middle
if you're using location.

00:03:51.936 --> 00:03:53.546 A:middle
But that's not to say
that you shouldn't do it.

00:03:53.886 --> 00:03:57.076 A:middle
It's just that you need to be
cognizant of these changes.

00:03:57.416 --> 00:04:00.586 A:middle
And especially when you're
fetching proactively understand

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:00.586 --> 00:04:02.726 A:middle
that the location that
you're going to achieve

00:04:02.996 --> 00:04:05.316 A:middle
for the user might
not actually go

00:04:05.316 --> 00:04:07.576 A:middle
to a user's specific experience

00:04:07.606 --> 00:04:09.096 A:middle
because the user might
choose not to launch you.

00:04:10.356 --> 00:04:13.796 A:middle
And so with it, turn off as
appropriate in the background.

00:04:14.056 --> 00:04:15.606 A:middle
If you have a location
that's good enough

00:04:15.606 --> 00:04:18.875 A:middle
to hit your server query
or a certain amount

00:04:18.875 --> 00:04:22.246 A:middle
of time has passed and you're
just not going to get a kind

00:04:22.246 --> 00:04:24.586 A:middle
of quality location because
the user is in a bad location,

00:04:25.206 --> 00:04:28.586 A:middle
then turning off location
will really allow you

00:04:28.586 --> 00:04:30.676 A:middle
to save battery,
prevent being throttled

00:04:30.916 --> 00:04:33.486 A:middle
and overall have the best
user experience possible.

00:04:34.026 --> 00:04:38.676 A:middle
With that we actually
made some changes

00:04:38.716 --> 00:04:40.636 A:middle
to continuous location
behavior in order

00:04:40.636 --> 00:04:43.256 A:middle
to help you avoid
killing battery.

00:04:44.096 --> 00:04:48.306 A:middle
So, to remind you this API is
what you get when you specify

00:04:48.306 --> 00:04:50.136 A:middle
that you want to be a
Location background app.

00:04:50.136 --> 00:04:52.666 A:middle
And if you put this
in your infoplist

00:04:52.856 --> 00:04:55.136 A:middle
when you start location
we will keep--

00:04:55.476 --> 00:04:57.266 A:middle
we keep the device awake as long

00:04:57.266 --> 00:04:58.816 A:middle
as you can tune in
to use location.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:00.156 --> 00:05:04.686 A:middle
But in iOS 7 because of these
extra launching tasks we

00:05:04.686 --> 00:05:06.256 A:middle
actually don't want to
start in the background.

00:05:06.896 --> 00:05:10.176 A:middle
We see Continuous Location as
an extension of the foreground.

00:05:10.576 --> 00:05:13.496 A:middle
So, a user starts
navigating to a location

00:05:13.966 --> 00:05:16.336 A:middle
and then they suspend their
application and they lock it

00:05:16.336 --> 00:05:17.796 A:middle
and they put it on
their dashboard.

00:05:18.936 --> 00:05:20.196 A:middle
Turn by turn should continue

00:05:20.566 --> 00:05:22.096 A:middle
but you shouldn't start
in the background.

00:05:22.556 --> 00:05:25.566 A:middle
Similarly if they go for a
run you know the user had an

00:05:25.566 --> 00:05:27.286 A:middle
opportunity to start your
app before they switched

00:05:27.286 --> 00:05:28.066 A:middle
to their music player.

00:05:28.446 --> 00:05:30.526 A:middle
So, starting in the
foreground is not

00:05:30.876 --> 00:05:32.246 A:middle
that stringent of a requirement.

00:05:32.976 --> 00:05:34.836 A:middle
We realize that there are
a handful of applications

00:05:34.836 --> 00:05:37.266 A:middle
that are trying to do day-to-day
tracking using significant

00:05:37.266 --> 00:05:38.016 A:middle
location change.

00:05:38.336 --> 00:05:41.446 A:middle
And for those applications we
will still honor the background

00:05:41.446 --> 00:05:43.106 A:middle
modes key and keep
the device awake

00:05:43.106 --> 00:05:44.126 A:middle
when you are using location.

00:05:44.656 --> 00:05:46.686 A:middle
But in general, if
you start Location

00:05:46.686 --> 00:05:48.836 A:middle
in the background
we'll simply leave--

00:05:49.376 --> 00:05:51.416 A:middle
we'll give you location services
as long as these are running,

00:05:51.416 --> 00:05:53.276 A:middle
but we won't guarantee
that we'll keep you running

00:05:53.416 --> 00:05:56.586 A:middle
and this is the best tradeoff
for power and user satisfaction.

00:05:57.916 --> 00:06:02.656 A:middle
With these changes
however, it's possible

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:02.656 --> 00:06:05.146 A:middle
that the user could
tell you that hey,

00:06:05.146 --> 00:06:08.246 A:middle
I'd like to get directions
to dinner and tell us,

00:06:08.246 --> 00:06:10.406 A:middle
I don't want any
applications to do multitasking.

00:06:11.286 --> 00:06:14.386 A:middle
And so, in that situation
it would be a good idea

00:06:14.386 --> 00:06:18.526 A:middle
to check a new property on
the UIApplication instance,

00:06:18.886 --> 00:06:20.286 A:middle
backgroundRefreshStatus.

00:06:21.006 --> 00:06:25.536 A:middle
If your status is currently
available then APIs will behave

00:06:25.536 --> 00:06:26.536 A:middle
exactly as expected.

00:06:27.216 --> 00:06:30.916 A:middle
However, if it's denied this
means that the user has chosen

00:06:30.916 --> 00:06:32.226 A:middle
that they don't want
your application

00:06:32.226 --> 00:06:34.306 A:middle
to be running right
now or running

00:06:34.306 --> 00:06:35.276 A:middle
in the background I should say.

00:06:35.866 --> 00:06:38.876 A:middle
So, as a result we won't launch
you and we won't allow you

00:06:38.876 --> 00:06:40.126 A:middle
to continue running
indefinitely.

00:06:41.436 --> 00:06:45.416 A:middle
There's-- and if this happens
and you have specific indication

00:06:45.416 --> 00:06:47.566 A:middle
from the user that
you actually--

00:06:47.756 --> 00:06:50.876 A:middle
they do want your app to
function it might be a good idea

00:06:50.876 --> 00:06:52.876 A:middle
to pop a dialog and tell
them to go to settings

00:06:52.966 --> 00:06:54.396 A:middle
and correct their situation

00:06:54.686 --> 00:06:56.406 A:middle
so that they can get
the app functionality

00:06:57.156 --> 00:06:59.966 A:middle
that you want, that they want.

00:06:59.966 --> 00:07:02.656 A:middle
Now, there's one other option
and this is restricted.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:03.086 --> 00:07:05.276 A:middle
And this is if parental controls

00:07:05.326 --> 00:07:07.276 A:middle
or an enterprise
profile were installed

00:07:07.706 --> 00:07:10.726 A:middle
and Multitasking is locked off.

00:07:11.346 --> 00:07:15.196 A:middle
In this case, there's not really
much point in telling the user

00:07:15.196 --> 00:07:16.636 A:middle
to go to Settings
because there's nothing

00:07:16.636 --> 00:07:18.276 A:middle
that they're going to be able
to do inside of Settings.

00:07:18.926 --> 00:07:22.766 A:middle
So, instead please have your
application degrade gracefully,

00:07:22.766 --> 00:07:25.546 A:middle
gray-out some menu options
or just hide them completely

00:07:25.906 --> 00:07:28.276 A:middle
and don't tell them that hey,
there's these great features

00:07:28.276 --> 00:07:31.736 A:middle
that your phone can't do because
your system administrator locked

00:07:32.316 --> 00:07:33.186 A:middle
it out.

00:07:33.456 --> 00:07:35.436 A:middle
Lastly, if you're running into
the background at the point

00:07:35.526 --> 00:07:38.756 A:middle
that a change occurs we'll give
you a notification of this fact

00:07:39.136 --> 00:07:40.066 A:middle
and you can check this.

00:07:40.546 --> 00:07:41.746 A:middle
Now that's one caveat
and that is

00:07:41.746 --> 00:07:44.096 A:middle
that this API is actually not
available in the first seed.

00:07:44.436 --> 00:07:46.026 A:middle
So, the second seed
which is going

00:07:46.026 --> 00:07:48.826 A:middle
to be available shortly will
actually have this API in it

00:07:48.826 --> 00:07:51.386 A:middle
and that will allow you to
start tuning your applications

00:07:51.386 --> 00:07:52.696 A:middle
to provide the best
user experience.

00:07:53.226 --> 00:07:58.626 A:middle
With that, let's talk about
creating a fitness application.

00:07:59.236 --> 00:08:00.366 A:middle
As many of you already know

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.366 --> 00:08:02.646 A:middle
because we've gotten many
great examples in the store,

00:08:03.276 --> 00:08:04.816 A:middle
creating a fitness
application is easy.

00:08:05.506 --> 00:08:09.006 A:middle
Start-- allocate a
locationManager, set yourself

00:08:09.006 --> 00:08:11.566 A:middle
as the delegate,
specify the fact

00:08:11.566 --> 00:08:12.676 A:middle
that you're a fitness
application.

00:08:13.006 --> 00:08:14.696 A:middle
Now this is a step that
not everyone is doing

00:08:14.696 --> 00:08:16.056 A:middle
and I would highly
encourage you to do

00:08:16.056 --> 00:08:18.586 A:middle
so because it tunes the
way that auto pause works.

00:08:18.946 --> 00:08:20.586 A:middle
So, if your user is
running around a track

00:08:21.126 --> 00:08:25.626 A:middle
and it looks overall at a high
level view like they're moving

00:08:25.626 --> 00:08:30.116 A:middle
about 100 yards, stopping and
moving about another 100 yards,

00:08:30.586 --> 00:08:31.486 A:middle
now this is in an oval.

00:08:32.096 --> 00:08:34.706 A:middle
But if you're in a car
that's not a lot of movement

00:08:35.046 --> 00:08:37.126 A:middle
and so we'll assume that if
you were navigating in a car

00:08:37.126 --> 00:08:39.895 A:middle
that actually the user would
rather pause their activity

00:08:39.895 --> 00:08:42.155 A:middle
right now because navigation
is not really relevant anymore.

00:08:42.956 --> 00:08:44.726 A:middle
But if you're in a
fitness application,

00:08:44.726 --> 00:08:46.086 A:middle
clearly the user
is still running

00:08:46.406 --> 00:08:47.286 A:middle
and we should keep going.

00:08:48.386 --> 00:08:51.016 A:middle
Similarly if you specify
fitness activityType.

00:08:52.146 --> 00:08:54.706 A:middle
When we're considering
mat matching scenarios,

00:08:55.056 --> 00:08:58.126 A:middle
we're far more likely to leave
you meandering around a park

00:08:58.456 --> 00:09:00.966 A:middle
and less likely to snap you
to a freeway if you tell us

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.966 --> 00:09:02.046 A:middle
that you're a fitness
application.

00:09:03.346 --> 00:09:07.786 A:middle
So, doing this will help
tune Core Locations behavior

00:09:07.786 --> 00:09:11.356 A:middle
to maximize your fitness
application's quality.

00:09:12.256 --> 00:09:14.666 A:middle
And, of course, the most
important step start

00:09:14.666 --> 00:09:15.376 A:middle
location updates.

00:09:16.236 --> 00:09:19.696 A:middle
At this point you've got an
application that's happily

00:09:19.696 --> 00:09:22.176 A:middle
collecting a location and
its going about its business

00:09:22.176 --> 00:09:23.976 A:middle
and your user is
usually pretty happy.

00:09:24.516 --> 00:09:25.896 A:middle
But it's also starting

00:09:25.896 --> 00:09:28.096 A:middle
to actively drain the
user's battery life.

00:09:28.436 --> 00:09:32.106 A:middle
To understand why, let's look at
how GPS works on an iOS device.

00:09:32.636 --> 00:09:34.346 A:middle
So, inside any iPhone

00:09:34.346 --> 00:09:38.716 A:middle
or any device that's got a GPS
chip there's actually a specific

00:09:38.716 --> 00:09:42.216 A:middle
chip that's sole purpose is to
decode signals from a satellite

00:09:42.216 --> 00:09:45.466 A:middle
and encode them as locations
and deliver them to the device

00:09:45.926 --> 00:09:48.116 A:middle
at which point we
can deliver them

00:09:48.116 --> 00:09:49.706 A:middle
to you via the Core
Location APIs.

00:09:50.436 --> 00:09:51.726 A:middle
And this is an ongoing process

00:09:51.726 --> 00:09:54.816 A:middle
that occurs whenever
you've turned on GPS

00:09:55.276 --> 00:09:56.816 A:middle
and it consumes a
certain amount of battery.

00:09:57.666 --> 00:10:00.716 A:middle
Beyond just the battery that's
consumed by the chip itself,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:01.596 --> 00:10:03.006 A:middle
the phone stays awake.

00:10:03.436 --> 00:10:05.636 A:middle
So, if we had a way
to turn off the device

00:10:05.896 --> 00:10:09.446 A:middle
and let it sleep while the
GPS was continuing to function

00:10:09.946 --> 00:10:13.156 A:middle
and coalescing updates
into a single--

00:10:13.626 --> 00:10:17.056 A:middle
coalescing updates on
that chip then we can end

00:10:17.056 --> 00:10:18.276 A:middle
up leaving the device asleep.

00:10:18.716 --> 00:10:20.546 A:middle
And now if the user pulled
the device off their arm

00:10:20.546 --> 00:10:22.886 A:middle
and they wanted to check the
status of their run and woke

00:10:22.886 --> 00:10:25.716 A:middle
up the phone, we could deliver
all of the location updates

00:10:25.716 --> 00:10:28.186 A:middle
in one deferred updates to you.

00:10:28.766 --> 00:10:32.196 A:middle
And it turns out that
if we leave the phone of

00:10:32.356 --> 00:10:35.556 A:middle
but leave the GPS on that
roughly equates to up

00:10:35.556 --> 00:10:38.406 A:middle
to 40 percent power savings.

00:10:38.506 --> 00:10:40.846 A:middle
So, that's basically the
difference between going

00:10:40.846 --> 00:10:43.206 A:middle
for an all day hike and having
a completely dead battery

00:10:43.666 --> 00:10:45.646 A:middle
or getting back to the
trail head and being able

00:10:45.646 --> 00:10:49.466 A:middle
to call your family member
and ask for a ride home.

00:10:49.666 --> 00:10:52.536 A:middle
So, this is really exciting.

00:10:53.736 --> 00:10:56.966 A:middle
To come with an API that would
work and allow us to defer

00:10:56.966 --> 00:10:59.746 A:middle
as maximally as possible,
first we had to come

00:10:59.746 --> 00:11:02.306 A:middle
up with what an idealized
fitness application looks like.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:03.106 --> 00:11:06.596 A:middle
And so for us, and we model this
basically off of apps that are

00:11:06.596 --> 00:11:09.956 A:middle
in the app store and usually the
script goes something like this.

00:11:10.566 --> 00:11:13.786 A:middle
User turns on their phone,
starts running applications.

00:11:14.156 --> 00:11:15.716 A:middle
You give some sort
of notification being

00:11:15.716 --> 00:11:17.286 A:middle
like hey, I've started the run.

00:11:18.736 --> 00:11:20.216 A:middle
And now this is where
we'd actually

00:11:20.276 --> 00:11:22.626 A:middle
like the phone to go off.

00:11:22.626 --> 00:11:26.516 A:middle
And so we realize that some
users like to be motivated

00:11:26.516 --> 00:11:29.716 A:middle
as they're running so that
at some point later there--

00:11:29.716 --> 00:11:31.416 A:middle
they've gone a certain
amount of distance.

00:11:32.156 --> 00:11:33.626 A:middle
It would be nice if the
phone could wake up,

00:11:34.346 --> 00:11:35.706 A:middle
know that they've gone a mile

00:11:35.706 --> 00:11:38.226 A:middle
and say congratulations
you've made a six minute mile.

00:11:38.466 --> 00:11:39.206 A:middle
Keep up the good work!

00:11:40.616 --> 00:11:42.336 A:middle
And again, going back to sleep

00:11:43.686 --> 00:11:46.766 A:middle
and similarly sometime
later say,

00:11:46.766 --> 00:11:48.786 A:middle
hey look you have
45 minutes remaining

00:11:48.786 --> 00:11:50.386 A:middle
in your workout, keep it up.

00:11:51.326 --> 00:11:52.876 A:middle
And then do this a
couple more times

00:11:53.226 --> 00:11:55.426 A:middle
and eventually know
work out's completed.

00:11:55.696 --> 00:11:57.976 A:middle
You've gone 9.6 miles, awesome.

00:11:59.476 --> 00:12:01.126 A:middle
So, if we could do this

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:01.396 --> 00:12:04.866 A:middle
and if we could defer location
updates during this period then

00:12:04.866 --> 00:12:07.326 A:middle
we can actually save a
significant amount of power.

00:12:08.106 --> 00:12:11.956 A:middle
And so, to achieve this we left
the API more or less alone.

00:12:12.726 --> 00:12:14.216 A:middle
You set up your fitness
application just

00:12:14.216 --> 00:12:14.856 A:middle
as you did before.

00:12:15.406 --> 00:12:17.126 A:middle
The magic is going to come

00:12:17.126 --> 00:12:20.086 A:middle
in from how you handle
locations from us.

00:12:20.626 --> 00:12:23.666 A:middle
So, if you receive an
array of locations inside

00:12:23.666 --> 00:12:25.796 A:middle
of the DidUpdate
Locations Delegate Method

00:12:27.136 --> 00:12:28.166 A:middle
when you update your model

00:12:28.166 --> 00:12:30.206 A:middle
with your run information
this is the model

00:12:30.206 --> 00:12:31.856 A:middle
that you guys have written
that's going to keep track

00:12:31.856 --> 00:12:33.756 A:middle
of how fast they're
running, how far they've run

00:12:34.286 --> 00:12:36.626 A:middle
and be able to plot it on a map.

00:12:36.626 --> 00:12:38.256 A:middle
Do this step as you've
done before,

00:12:38.716 --> 00:12:42.816 A:middle
but now if you're not currently
deferring location updates go

00:12:42.816 --> 00:12:44.226 A:middle
ahead and query that
model to figure

00:12:44.226 --> 00:12:47.036 A:middle
out how much further you
have until the next goal

00:12:47.036 --> 00:12:50.306 A:middle
for that user the next time
you want to motivate them.

00:12:50.506 --> 00:12:53.056 A:middle
And similarly you might have
a time-based motivation.

00:12:53.226 --> 00:12:55.836 A:middle
So, let's say you've got a
date that's you're next audible

00:12:55.836 --> 00:12:58.456 A:middle
that you want to give
and you compute how far

00:12:58.456 --> 00:12:59.326 A:middle
in the future it is.

00:12:59.966 --> 00:13:02.276 A:middle
Now if you tell your
locationManager

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:02.676 --> 00:13:05.206 A:middle
that I'm allowing you to
defer location updates

00:13:05.206 --> 00:13:07.206 A:middle
until the user has
made it this far

00:13:07.516 --> 00:13:09.016 A:middle
or this amount of time has past.

00:13:09.676 --> 00:13:12.976 A:middle
This is the clue to us that
we can sleep the device

00:13:13.006 --> 00:13:14.306 A:middle
if possible to save power.

00:13:15.416 --> 00:13:18.466 A:middle
And the last thing you need to
do is keep track of the fact

00:13:18.576 --> 00:13:20.856 A:middle
that you're deferringUpdates
because this is useful

00:13:20.856 --> 00:13:24.126 A:middle
for your application to know.

00:13:24.376 --> 00:13:26.656 A:middle
When your event finishes,

00:13:26.696 --> 00:13:30.616 A:middle
when the users reach their goal
we'll send you a notification

00:13:31.026 --> 00:13:34.026 A:middle
to a new delegate method
DidFinishDeferred updates

00:13:34.026 --> 00:13:34.456 A:middle
with error.

00:13:35.316 --> 00:13:37.926 A:middle
And in the normal case
this is not a problem.

00:13:38.036 --> 00:13:39.046 A:middle
We just have to mark the fact

00:13:39.086 --> 00:13:42.666 A:middle
that deferred updates are
completed and will rearmor logic

00:13:42.666 --> 00:13:44.346 A:middle
for the next time so that
the next goal can fire,

00:13:44.406 --> 00:13:46.056 A:middle
the next goal can be
scheduled and fire.

00:13:47.686 --> 00:13:49.576 A:middle
Now, of course, there's
a handful of errors

00:13:49.706 --> 00:13:52.046 A:middle
that we could return to
you in this situation.

00:13:52.716 --> 00:13:54.566 A:middle
And so I'd like to take
an opportunity now to go

00:13:54.566 --> 00:13:55.586 A:middle
over a couple of those reviews

00:13:55.586 --> 00:13:56.856 A:middle
to help give you a
better understanding

00:13:56.856 --> 00:13:59.746 A:middle
of how this API is
working under the hood.

00:13:59.956 --> 00:14:01.576 A:middle
So, the first error
that you could run

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:01.576 --> 00:14:04.136 A:middle
into is NotUpdatingLocation.

00:14:04.916 --> 00:14:08.246 A:middle
Needless to say its impossible
for us to defer location updates

00:14:08.286 --> 00:14:09.756 A:middle
if there are no location
updates.

00:14:10.206 --> 00:14:11.526 A:middle
So, please remember

00:14:11.526 --> 00:14:15.796 A:middle
to startUpdatingLocations
before you defer them.

00:14:15.966 --> 00:14:19.746 A:middle
Similarly, if you don't
specify that you would

00:14:19.746 --> 00:14:22.706 A:middle
like to use a GPS, if you're
using a much less accurate

00:14:23.066 --> 00:14:26.696 A:middle
request for location, we don't
have a GPS chip that's going

00:14:26.696 --> 00:14:29.386 A:middle
to be running and so we have no
way to offload location to it.

00:14:29.866 --> 00:14:31.056 A:middle
Quite frankly there's
a good chance

00:14:31.126 --> 00:14:32.236 A:middle
that if you're not using GPS

00:14:32.236 --> 00:14:34.536 A:middle
that you're already saving a
significant amount of power.

00:14:35.076 --> 00:14:36.376 A:middle
So, this is a GPS technology.

00:14:36.506 --> 00:14:40.156 A:middle
So, to put your desired accuracy
back to the default value

00:14:40.156 --> 00:14:43.606 A:middle
and just leave it alone in the
first place and specify best.

00:14:44.326 --> 00:14:47.746 A:middle
And lastly it's possible that
you've told us that you'd

00:14:47.746 --> 00:14:50.896 A:middle
like to filter locations via
the DistanceFilter property.

00:14:51.586 --> 00:14:54.796 A:middle
And quite frankly us
collecting a significant number

00:14:54.796 --> 00:14:57.186 A:middle
of locations and then
deliver it you all at once.

00:14:57.526 --> 00:15:00.406 A:middle
If you're not interested in most
of them is it really beneficial.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.606 --> 00:15:03.416 A:middle
So, to use this API
you need to specify

00:15:03.416 --> 00:15:04.686 A:middle
that you don't want
a distance filter

00:15:04.686 --> 00:15:06.176 A:middle
or just leave again
the default value.

00:15:07.656 --> 00:15:10.536 A:middle
So, these three errors once
you've established your

00:15:10.536 --> 00:15:13.046 A:middle
application really
shouldn't ever crop up again.

00:15:13.336 --> 00:15:15.276 A:middle
If they do, it's pretty
much a programming error.

00:15:16.116 --> 00:15:18.656 A:middle
Normally, we would like
to assert in the case

00:15:18.656 --> 00:15:19.876 A:middle
that you've got a
programming error

00:15:19.876 --> 00:15:21.836 A:middle
so that we call your attention
to it as fast as possible.

00:15:22.266 --> 00:15:24.196 A:middle
But because these
properties already existed

00:15:24.196 --> 00:15:26.846 A:middle
and it's possible that your
code's already using them,

00:15:27.226 --> 00:15:30.036 A:middle
we didn't want new assertions
to pop up in your code.

00:15:30.716 --> 00:15:33.726 A:middle
So, inside of your
UpdatesDidFinish,

00:15:33.756 --> 00:15:37.676 A:middle
the DeferredUpdatesDidFinish
delegate callback consider

00:15:37.676 --> 00:15:38.776 A:middle
throwing your own assertion

00:15:39.006 --> 00:15:40.456 A:middle
so you can call your
own attention to it.

00:15:40.456 --> 00:15:42.706 A:middle
That way when debug builds
you can iron out these issues

00:15:43.006 --> 00:15:44.076 A:middle
and your users will never see it

00:15:45.366 --> 00:15:48.056 A:middle
and we can maximize
battery life.

00:15:48.276 --> 00:15:50.796 A:middle
Now an error that you
actually can get that's normal

00:15:51.536 --> 00:15:53.336 A:middle
is DeferredCanceled.

00:15:54.486 --> 00:15:58.746 A:middle
This simply means that you
disallowed deferred updates

00:15:59.126 --> 00:16:03.056 A:middle
and if this happens while we're
currently updating we give you a

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:03.056 --> 00:16:07.426 A:middle
callback saying hey we're done
because you told us we're done.

00:16:07.426 --> 00:16:09.556 A:middle
But it's also possible to
get a cancellation event

00:16:10.026 --> 00:16:12.966 A:middle
if you reschedule deferred
updates with new parameters.

00:16:13.876 --> 00:16:15.686 A:middle
And the reason why is
because this is a fully

00:16:15.686 --> 00:16:16.436 A:middle
asynchronous API.

00:16:17.666 --> 00:16:20.766 A:middle
So, if you're attempting
to tell us hey, go ahead

00:16:20.976 --> 00:16:23.866 A:middle
and change the parameters
by how far I want to run,

00:16:24.136 --> 00:16:26.256 A:middle
at the same time we're trying
to tell you, by the way,

00:16:26.256 --> 00:16:27.616 A:middle
you're previous criteria
was hit.

00:16:28.696 --> 00:16:30.616 A:middle
Now you have an impossible
situation

00:16:30.616 --> 00:16:33.856 A:middle
where you can't know whether
or not we're telling you hey,

00:16:33.856 --> 00:16:36.376 A:middle
you finished the new one or
you finished the old one.

00:16:37.496 --> 00:16:39.406 A:middle
And so to resolve this issue,

00:16:39.406 --> 00:16:42.796 A:middle
you will get exactly one
callback for every call

00:16:42.796 --> 00:16:44.456 A:middle
to allow
DeferredLocationUpdates.

00:16:45.076 --> 00:16:48.266 A:middle
So, if you're already deferring
and you call either disallow

00:16:48.266 --> 00:16:50.726 A:middle
or allow you will get
a cancellation event.

00:16:51.436 --> 00:16:53.316 A:middle
And again assuming
that we're not already

00:16:53.316 --> 00:16:56.646 A:middle
in flight telling you that
you hit your exit criteria.

00:16:58.936 --> 00:17:00.686 A:middle
So, if you look back
at the sample

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.686 --> 00:17:03.306 A:middle
that I provided earlier this
is why we're keeping track

00:17:03.306 --> 00:17:05.205 A:middle
of whether or not we're
deferring location updates.

00:17:05.675 --> 00:17:07.106 A:middle
Because if you're not doing this

00:17:07.106 --> 00:17:09.406 A:middle
and you're constantly
rescheduling us you're getting

00:17:09.406 --> 00:17:10.896 A:middle
spurious cancellation errors.

00:17:11.496 --> 00:17:13.836 A:middle
And worse than that you're
causing us to recompute

00:17:13.836 --> 00:17:15.076 A:middle
when the device is
allowed to sleep,

00:17:15.465 --> 00:17:17.256 A:middle
which basically is just going
to keep pushing that date

00:17:17.256 --> 00:17:19.146 A:middle
out into the future and
there's no guarantee

00:17:19.146 --> 00:17:19.915 A:middle
that we'll ever sleep

00:17:19.915 --> 00:17:21.646 A:middle
and there's no guarantee
you'll ever get power savings.

00:17:22.986 --> 00:17:25.965 A:middle
So, keep track of whether or
not you're deferring updates

00:17:26.296 --> 00:17:28.306 A:middle
and know that cancellations
can occur

00:17:28.796 --> 00:17:30.856 A:middle
because you've told us
to change something.

00:17:30.856 --> 00:17:34.706 A:middle
Another error that you
can run into is kind

00:17:34.706 --> 00:17:36.456 A:middle
of a general catch-all error.

00:17:36.746 --> 00:17:39.066 A:middle
It's specifically saying
that DeferredUpdates failed.

00:17:39.936 --> 00:17:42.306 A:middle
Now the easiest way for you
to get this error is simply

00:17:42.306 --> 00:17:44.566 A:middle
because you're trying to
defer updates on a platform

00:17:44.566 --> 00:17:45.816 A:middle
that doesn't support this.

00:17:46.506 --> 00:17:49.776 A:middle
So, if you don't have a GPS,
for example, there's no way

00:17:49.776 --> 00:17:54.516 A:middle
that we could possibly defer
updates to the GPS chip.

00:17:54.726 --> 00:17:57.616 A:middle
Before starting DeferredUpdates
if you check to see whether

00:17:57.616 --> 00:18:01.396 A:middle
or not it's available this will
save you again spurious errors.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:02.536 --> 00:18:04.696 A:middle
This can actually happen
under real circumstances.

00:18:05.136 --> 00:18:07.356 A:middle
Consider the case where
GPS simply isn't available.

00:18:08.346 --> 00:18:09.596 A:middle
Usually this can happen

00:18:09.686 --> 00:18:11.766 A:middle
if you start a run
inside your apartment

00:18:12.056 --> 00:18:12.906 A:middle
and you haven't made it back

00:18:12.906 --> 00:18:14.246 A:middle
down to the ground
floor to go outside.

00:18:15.016 --> 00:18:16.386 A:middle
The GPS simply isn't ready yet.

00:18:16.386 --> 00:18:19.836 A:middle
It's not fixing so if you
try to tell us let me know

00:18:19.836 --> 00:18:20.896 A:middle
when the user's gone a mile,

00:18:20.896 --> 00:18:22.836 A:middle
and we don't have
a solid start point

00:18:22.836 --> 00:18:25.406 A:middle
that we can agree upon
then we can't tell you

00:18:25.406 --> 00:18:26.326 A:middle
when the user's gone a mile.

00:18:27.636 --> 00:18:30.476 A:middle
So, we'll go ahead and
give you a deferred error.

00:18:31.246 --> 00:18:33.026 A:middle
Similarly along the course

00:18:33.026 --> 00:18:34.956 A:middle
of their run you can
have a minor hiccup

00:18:35.896 --> 00:18:37.816 A:middle
that stops location updates.

00:18:38.656 --> 00:18:39.936 A:middle
This could be moving
through a tunnel

00:18:40.366 --> 00:18:42.266 A:middle
or any other temporary problem.

00:18:43.136 --> 00:18:45.676 A:middle
And so in either of these
situations the simplest thing

00:18:45.676 --> 00:18:49.026 A:middle
to do is simply to retry
the next time we give you a

00:18:49.026 --> 00:18:49.796 A:middle
location update.

00:18:50.396 --> 00:18:53.086 A:middle
Because if we can compute a new
location update there's a good

00:18:53.086 --> 00:18:54.626 A:middle
chance that we've
already solved the problem

00:18:54.626 --> 00:18:57.346 A:middle
that caused this issue and so
it's a good time to reschedule.

00:18:57.346 --> 00:18:58.746 A:middle
So, if you look back

00:18:58.906 --> 00:19:02.416 A:middle
at the sample code this is the
reason why we defer location

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:02.416 --> 00:19:04.496 A:middle
updates from within
the location,

00:19:05.896 --> 00:19:08.146 A:middle
didUpdateLocation
delegate method.

00:19:08.986 --> 00:19:11.256 A:middle
And so if you use this
as your entry point

00:19:11.256 --> 00:19:14.056 A:middle
into the API you've already
armed yourself to retry

00:19:14.056 --> 00:19:15.516 A:middle
when it's probably
most appropriate.

00:19:15.516 --> 00:19:16.976 A:middle
And you're not going
to constantly spam us

00:19:16.976 --> 00:19:18.896 A:middle
with deferred updates just
because the previous one failed.

00:19:19.606 --> 00:19:21.126 A:middle
A couple other notes
on this API.

00:19:21.786 --> 00:19:26.026 A:middle
The first is that we actually
deliver LocationUpdates

00:19:26.236 --> 00:19:27.246 A:middle
immediately in the foreground.

00:19:28.206 --> 00:19:30.546 A:middle
If the user is actively
looking at your device,

00:19:31.066 --> 00:19:34.856 A:middle
their own device, then
there's no way for us

00:19:34.856 --> 00:19:37.626 A:middle
to sleep the device
because the device is on.

00:19:38.556 --> 00:19:39.766 A:middle
Similarly if they're looking

00:19:39.766 --> 00:19:41.946 A:middle
at your application
there's a good chance

00:19:41.946 --> 00:19:44.836 A:middle
that they actually want to
see your traces being drawn

00:19:44.836 --> 00:19:46.266 A:middle
in real-time on their map.

00:19:47.346 --> 00:19:49.236 A:middle
And so we're not going
to penalize you for that

00:19:49.236 --> 00:19:51.146 A:middle
and actually we'll keep
track of your foreground

00:19:51.146 --> 00:19:53.826 A:middle
and background behavior for
you and guarantee that as long

00:19:53.826 --> 00:19:55.676 A:middle
as you're in the
foreground whatever--

00:19:55.996 --> 00:19:58.226 A:middle
we're going to temporarily
ignore deferred updates

00:19:58.226 --> 00:19:59.516 A:middle
and just keep giving
you live ones.

00:19:59.516 --> 00:20:03.266 A:middle
And when you back into the
background we'll gladly try

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:03.356 --> 00:20:06.346 A:middle
to sleep.

00:20:06.536 --> 00:20:08.986 A:middle
Now distance is completely
optional.

00:20:09.446 --> 00:20:11.766 A:middle
If you don't care about how far
you want to go but you just want

00:20:11.766 --> 00:20:14.186 A:middle
to tell the user how far they've
gone every fifteen minutes you

00:20:14.186 --> 00:20:16.266 A:middle
can just leave the distance
field off by specifying

00:20:16.266 --> 00:20:18.386 A:middle
that you want it to be
the maximal distance.

00:20:19.156 --> 00:20:21.626 A:middle
Similarly if you want to
motivate people just by distance

00:20:21.626 --> 00:20:23.356 A:middle
and not by time,
you could specify

00:20:23.356 --> 00:20:24.296 A:middle
that you don't care about time.

00:20:24.996 --> 00:20:27.866 A:middle
And, of course, together
these are optional--

00:20:27.866 --> 00:20:29.736 A:middle
these are both optional
so the reality is

00:20:29.736 --> 00:20:33.286 A:middle
that if you specify a max for
both fields we'll run as long

00:20:33.286 --> 00:20:36.036 A:middle
as we are technically capable
of running and then when we run

00:20:36.036 --> 00:20:38.576 A:middle
out of memory on the chip
we'll wake up temporarily,

00:20:38.846 --> 00:20:41.016 A:middle
give you the current
location updates that we have

00:20:41.366 --> 00:20:43.006 A:middle
and then go back to
sleep and keep going.

00:20:43.416 --> 00:20:45.866 A:middle
And we can rinse and repeat
this until the next time

00:20:45.866 --> 00:20:47.946 A:middle
that your user-- the next time

00:20:47.946 --> 00:20:50.426 A:middle
that your user launches your
application and then you decide,

00:20:50.426 --> 00:20:52.046 A:middle
hey I want to defer-- I want

00:20:52.046 --> 00:20:54.566 A:middle
to cancel deferred
updates by disallowing it.

00:20:55.256 --> 00:20:57.786 A:middle
And lastly, this is
actually available starting

00:20:57.786 --> 00:20:58.406 A:middle
with iPhone 5.

00:20:59.476 --> 00:21:01.536 A:middle
And this is why we
actually weren't able

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:01.536 --> 00:21:02.676 A:middle
to talk about this last year.

00:21:02.806 --> 00:21:05.566 A:middle
So, it's actually
available starting in iOS 6.

00:21:06.026 --> 00:21:08.476 A:middle
So, if you're curious about
targeting your APIs against 7

00:21:08.476 --> 00:21:10.446 A:middle
and 6 this API is
already available;

00:21:10.806 --> 00:21:12.246 A:middle
go ahead and try using it.

00:21:14.556 --> 00:21:16.416 A:middle
So, with that I'd like
to move on to a couple

00:21:16.416 --> 00:21:17.656 A:middle
of New Region Monitoring
Features.

00:21:18.476 --> 00:21:23.926 A:middle
The first feature I want to talk
about is solving a little bit

00:21:23.926 --> 00:21:28.176 A:middle
of a problem; it's a minor
problem where let's say

00:21:28.176 --> 00:21:30.786 A:middle
that your user decided that they
wanted to monitor for arrival

00:21:30.786 --> 00:21:31.666 A:middle
at a particular location.

00:21:32.076 --> 00:21:35.846 A:middle
Let's say and you already
have a Placemark for it

00:21:35.846 --> 00:21:37.256 A:middle
that you've already
done a Geocode for.

00:21:37.256 --> 00:21:39.806 A:middle
So you take the region out and
you start monitoring for it.

00:21:40.346 --> 00:21:42.456 A:middle
That's all pretty simple, but
let's say that I was trying

00:21:42.456 --> 00:21:45.056 A:middle
to remember that tomorrow
when I get to Mascone Center

00:21:45.406 --> 00:21:48.156 A:middle
that I want to remember
to talk to somebody.

00:21:49.086 --> 00:21:52.796 A:middle
Now, if I do this
then the result is

00:21:52.796 --> 00:21:55.876 A:middle
that when I leave Mascone
tonight my application is going

00:21:55.876 --> 00:21:57.116 A:middle
to launch, it's going to run.

00:21:57.346 --> 00:21:59.566 A:middle
It's going to realize this
location update was not really

00:21:59.566 --> 00:22:01.216 A:middle
relevant to me and
then go back to sleep.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:02.456 --> 00:22:07.126 A:middle
So, it would be nice if we could
save that step and allow you

00:22:07.126 --> 00:22:09.986 A:middle
to specify that you only
want to be notified on entry

00:22:10.346 --> 00:22:12.466 A:middle
and you don't care about
being notified on exit.

00:22:13.536 --> 00:22:17.126 A:middle
And so by separating
these two entry criteria

00:22:17.336 --> 00:22:20.156 A:middle
or by separating the
notifications between exit

00:22:20.196 --> 00:22:22.966 A:middle
and entry we can launch
your application less often

00:22:23.386 --> 00:22:24.786 A:middle
which will allow your
device to sleep more,

00:22:25.386 --> 00:22:26.476 A:middle
which is good for your users.

00:22:27.656 --> 00:22:29.166 A:middle
And these properties
that are hanging off

00:22:29.166 --> 00:22:30.706 A:middle
of the CLRegion object

00:22:31.576 --> 00:22:34.426 A:middle
and if you specify
them before telling us

00:22:34.426 --> 00:22:38.136 A:middle
to monitor then we'll go ahead
and honor what your request is.

00:22:38.986 --> 00:22:40.486 A:middle
And they both default to yes.

00:22:40.786 --> 00:22:42.496 A:middle
This is for backwards
compatibility and just

00:22:42.496 --> 00:22:44.426 A:middle
because it's kind of a
reasonable default value

00:22:44.826 --> 00:22:46.626 A:middle
when you haven't told
us anything otherwise.

00:22:49.736 --> 00:22:53.636 A:middle
Next, another Region Monitoring
tweak that we've made is

00:22:53.636 --> 00:22:56.396 A:middle
to address specifically the case
where you're trying to monitor

00:22:56.396 --> 00:22:58.526 A:middle
for a user's departure
from a particular location.

00:22:59.016 --> 00:23:00.826 A:middle
Let's say you want a
temporary reminder saying hey,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:01.056 --> 00:23:01.946 A:middle
remember your car keys.

00:23:02.046 --> 00:23:04.366 A:middle
That way if you get six
blocks from your friends house

00:23:04.366 --> 00:23:07.216 A:middle
and go find your car you don't--
you actually can unlock the car

00:23:07.216 --> 00:23:10.256 A:middle
as opposed to waiting and having
to go back to their house.

00:23:11.216 --> 00:23:13.286 A:middle
So, this relatively
easy to achieve,

00:23:13.426 --> 00:23:17.656 A:middle
assuming you already have a
recent location then you can

00:23:17.656 --> 00:23:21.126 A:middle
construct a circular region
around this user's location.

00:23:21.816 --> 00:23:23.796 A:middle
And, of course, you can use
the new properties too to say

00:23:23.796 --> 00:23:25.016 A:middle
that you really only
care about exit.

00:23:25.936 --> 00:23:29.176 A:middle
But, once you start a
monitoring for this region,

00:23:30.076 --> 00:23:33.266 A:middle
Location will go off and try to
figure out where the user is.

00:23:34.146 --> 00:23:37.986 A:middle
Now, depending on how long
ago that last location was

00:23:38.236 --> 00:23:41.286 A:middle
and how fast the user is
moving, it's entirely possible

00:23:41.376 --> 00:23:44.216 A:middle
that at the time that the
fence initializes your user has

00:23:44.216 --> 00:23:46.066 A:middle
already left their friends house

00:23:46.906 --> 00:23:49.176 A:middle
at which point there is no
exit notification to give you,

00:23:49.176 --> 00:23:50.256 A:middle
because there is no exit event.

00:23:50.366 --> 00:23:52.596 A:middle
It's simply that we
started outside the fence.

00:23:53.566 --> 00:23:57.176 A:middle
So, in iOS 7 we're providing
a new delegate method.

00:23:57.636 --> 00:23:59.996 A:middle
LocationManager did
determine state for region.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:01.066 --> 00:24:02.846 A:middle
Now anytime that we
determine the state

00:24:02.846 --> 00:24:04.476 A:middle
for your region we
will call this method

00:24:05.296 --> 00:24:09.556 A:middle
and if you say compare
the fence identifier

00:24:09.556 --> 00:24:12.906 A:middle
against the departure
fence and then check to see

00:24:13.026 --> 00:24:14.006 A:middle
that that state is outside,

00:24:14.536 --> 00:24:16.396 A:middle
it doesn't really
matter how you got here.

00:24:16.396 --> 00:24:18.226 A:middle
If it's a departure fence
you've already departed.

00:24:18.626 --> 00:24:20.826 A:middle
It could have happened before
the fence monitoring started.

00:24:21.186 --> 00:24:24.226 A:middle
Now you what the state is and
you can tell your user about it.

00:24:26.036 --> 00:24:29.516 A:middle
This delegate method is
available on Location.

00:24:29.656 --> 00:24:31.656 A:middle
This is the delegate
matter method

00:24:31.706 --> 00:24:33.766 A:middle
that if you implement
we will call

00:24:33.766 --> 00:24:37.786 A:middle
and we'll call it whenever your
application is already running.

00:24:38.636 --> 00:24:41.396 A:middle
We won't relaunch your
application for all

00:24:41.396 --> 00:24:43.766 A:middle
of the little details, but
we will gladly tell you

00:24:43.766 --> 00:24:46.476 A:middle
about the state for a
region in detail as long

00:24:46.476 --> 00:24:47.206 A:middle
as you're currently running.

00:24:47.756 --> 00:24:49.956 A:middle
And there's three
possible states.

00:24:50.486 --> 00:24:53.506 A:middle
The first is the fact that
you are inside the fence.

00:24:54.286 --> 00:24:56.286 A:middle
Obviously the other
option is outside the fence

00:24:56.466 --> 00:24:58.556 A:middle
and the third option is
simply we don't know.

00:24:59.636 --> 00:25:02.896 A:middle
And usually this
happens when your--

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:03.046 --> 00:25:05.866 A:middle
you've just installed the fence
and so we haven't had a chance

00:25:05.866 --> 00:25:09.806 A:middle
to start monitoring for it yet
or alternatively it could happen

00:25:09.806 --> 00:25:11.756 A:middle
if the device was rebooted
because we don't track--

00:25:11.786 --> 00:25:13.846 A:middle
we don't persist
where the user was.

00:25:14.336 --> 00:25:16.936 A:middle
If you reboot the device we
temporarily lose the state

00:25:16.936 --> 00:25:19.066 A:middle
of all of our fences and we
have to reestablish ourselves.

00:25:19.446 --> 00:25:22.576 A:middle
This is why a Mac Book
Pro if you shut it off

00:25:22.576 --> 00:25:24.426 A:middle
and then you wake-- and
you reboot it inside

00:25:24.426 --> 00:25:26.196 A:middle
of a new location
your fence won't fire.

00:25:26.466 --> 00:25:27.526 A:middle
It's because we don't secure--

00:25:27.526 --> 00:25:29.806 A:middle
we don't save your location
information to disk.

00:25:30.386 --> 00:25:33.936 A:middle
So, with that there's one
more thing and that is

00:25:33.936 --> 00:25:34.736 A:middle
that this is queryable.

00:25:35.296 --> 00:25:37.446 A:middle
So if at any point in
time you're curious

00:25:37.446 --> 00:25:39.396 A:middle
to know whether your fence
will fire and try to figure

00:25:39.396 --> 00:25:41.676 A:middle
out which side of the
event criteria you're on,

00:25:42.016 --> 00:25:45.636 A:middle
you can ask us for the
state of the region

00:25:45.776 --> 00:25:47.936 A:middle
that we're already
monitoring and we'll tell you.

00:25:48.796 --> 00:25:52.096 A:middle
This is particularly useful
if the radius boundary--

00:25:52.136 --> 00:25:54.096 A:middle
where the user is and where
the center is and the radius

00:25:54.096 --> 00:25:57.106 A:middle
in a straight line suggests
that you're inside the fence.

00:25:57.536 --> 00:25:59.026 A:middle
But if the user has
been moving inside

00:25:59.026 --> 00:26:02.256 A:middle
and outside the fence every
couple of seconds we're going

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:02.256 --> 00:26:03.466 A:middle
to coalesce those updates

00:26:03.466 --> 00:26:05.176 A:middle
into something that's
a bit more filtered

00:26:05.176 --> 00:26:07.016 A:middle
and much more reasonable
for the user

00:26:07.276 --> 00:26:09.556 A:middle
so they're not constantly being
spammed by new notifications.

00:26:10.006 --> 00:26:12.256 A:middle
So, in that case it's
useful to query us

00:26:12.296 --> 00:26:13.466 A:middle
to know what the
current state is

00:26:13.806 --> 00:26:16.206 A:middle
so that you can decide
whether or not--

00:26:16.206 --> 00:26:17.996 A:middle
so that you can be
in sync with us.

00:26:18.226 --> 00:26:22.066 A:middle
So, we'd like to move on to talk
about a case that many of you

00:26:22.066 --> 00:26:24.506 A:middle
that have retail shops
are familiar with

00:26:24.786 --> 00:26:27.956 A:middle
and that is the idea of
basically how to interact

00:26:27.956 --> 00:26:30.156 A:middle
with your user in a
meaningful way while the user is

00:26:30.156 --> 00:26:30.836 A:middle
at your store.

00:26:31.766 --> 00:26:33.086 A:middle
So, to do this, I want to talk

00:26:33.086 --> 00:26:35.226 A:middle
about my side business,
Jay's Donut Shop.

00:26:36.066 --> 00:26:38.476 A:middle
Now, it's a good point in
time to remind you you're all

00:26:38.476 --> 00:26:40.826 A:middle
under NDA which means that
you can't tell my boss

00:26:40.826 --> 00:26:41.576 A:middle
that you've been moonlighting.

00:26:43.486 --> 00:26:49.396 A:middle
[Laughter] So, hopefully
my store has been quite

00:26:49.396 --> 00:26:50.096 A:middle
successful lately.

00:26:50.236 --> 00:26:52.246 A:middle
I've got a lot of stores
in a lot of locations.

00:26:52.706 --> 00:26:55.876 A:middle
And so I'm looking to expand
and the most obvious choice

00:26:55.876 --> 00:26:58.756 A:middle
for me is build an iOS app.

00:26:59.826 --> 00:27:01.646 A:middle
It helps that I actually
know something about iOS

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:01.646 --> 00:27:04.426 A:middle
and I can familiar with
this so it's not that hard.

00:27:04.426 --> 00:27:07.256 A:middle
But engaging my customer
in their store is useful.

00:27:07.826 --> 00:27:10.876 A:middle
You know knowing where stores
are, what they're hours are,

00:27:11.306 --> 00:27:14.306 A:middle
what nutrition information
each donut has that's useful

00:27:14.306 --> 00:27:15.516 A:middle
information that
anybody could have.

00:27:16.066 --> 00:27:18.116 A:middle
But actually coming up
with a rich experience

00:27:18.406 --> 00:27:20.916 A:middle
when my user's already in my
store and want to be engaged

00:27:20.916 --> 00:27:22.826 A:middle
with my donut shop
is really cool.

00:27:23.996 --> 00:27:29.546 A:middle
So, my first prototype for
this experience was resolved

00:27:29.546 --> 00:27:32.136 A:middle
around welcoming my
customers to my shop.

00:27:33.036 --> 00:27:34.586 A:middle
Being a location
engineer I already know

00:27:34.586 --> 00:27:35.956 A:middle
that we have region
monitoring in API.

00:27:36.646 --> 00:27:39.026 A:middle
So, I took my first
shop in Cupertino

00:27:39.026 --> 00:27:40.346 A:middle
and I started monitoring
for that region.

00:27:40.996 --> 00:27:43.486 A:middle
Now anytime I showed up at my
donut shop I got a notification

00:27:43.486 --> 00:27:44.916 A:middle
saying, welcome to Jay's.

00:27:46.276 --> 00:27:49.156 A:middle
Well that's great but let's
go ahead and expand it

00:27:49.156 --> 00:27:50.146 A:middle
out to all my other stores.

00:27:50.236 --> 00:27:52.396 A:middle
So, we first installed a fence
in San Francisco and then,

00:27:52.396 --> 00:27:54.306 A:middle
of course, there's
a shop downstairs

00:27:54.306 --> 00:27:56.336 A:middle
and then there's a shop over in
Twin Peaks and then there's one

00:27:56.336 --> 00:27:58.216 A:middle
in San Jose and Los Angeles
and New York and Denver

00:27:58.216 --> 00:28:01.466 A:middle
and quite frankly
this is both tedious

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:01.866 --> 00:28:04.486 A:middle
and at some point we hit a wall
and we can't actually monitor

00:28:04.486 --> 00:28:05.496 A:middle
for all of these regions.

00:28:05.646 --> 00:28:06.746 A:middle
So, this is not going to work.

00:28:06.746 --> 00:28:10.336 A:middle
What would be nice is instead
of monitoring for a region

00:28:10.336 --> 00:28:12.316 A:middle
on the globe we actually
monitored

00:28:12.606 --> 00:28:15.976 A:middle
for what we're actually looking
for, which is Jay's Donut Shop.

00:28:17.076 --> 00:28:19.446 A:middle
And so conceptually
this is what we would

00:28:19.446 --> 00:28:23.376 A:middle
like to achieve is just
specify that whenever I'm inside

00:28:23.376 --> 00:28:25.256 A:middle
of Jay's I'd like to know
that I'm inside of Jay's.

00:28:25.746 --> 00:28:29.636 A:middle
And so to set out to build this
core location team first looked

00:28:29.636 --> 00:28:30.836 A:middle
at the actual physical store.

00:28:31.746 --> 00:28:34.226 A:middle
And inside of every store
there's a glowing employee

00:28:34.226 --> 00:28:36.656 A:middle
sitting behind the counter
saying, "Welcome to Jay's.

00:28:36.876 --> 00:28:39.146 A:middle
Have a donut."

00:28:39.276 --> 00:28:41.886 A:middle
So when we looked to build
something in the virtual world

00:28:41.886 --> 00:28:44.806 A:middle
around this we wanted something
that approximated this behavior

00:28:45.416 --> 00:28:46.476 A:middle
and we noticed that a lot

00:28:46.476 --> 00:28:50.766 A:middle
of stores already are switching
their cash registers to iPads.

00:28:52.156 --> 00:28:54.656 A:middle
So, wouldn't it be nice if
there was a way for your iPad

00:28:54.966 --> 00:28:56.836 A:middle
to communicate with
your customer's iPhone

00:28:56.936 --> 00:28:58.766 A:middle
to tell them they're
inside of Jay's Donut Shop

00:28:59.226 --> 00:29:01.936 A:middle
and for your application
on their phone to pick up

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:02.336 --> 00:29:04.316 A:middle
and give them an
immersive experience.

00:29:04.696 --> 00:29:08.846 A:middle
Wouldn't it be even better if
instead of saying you're inside

00:29:08.846 --> 00:29:11.606 A:middle
of Jay's to actually be able to
encode some extra information

00:29:11.606 --> 00:29:12.506 A:middle
like you're inside

00:29:12.506 --> 00:29:14.566 A:middle
of the Cupertino store,
try an apple fritter.

00:29:15.166 --> 00:29:20.936 A:middle
[Laughter] So this is
what we set out to build.

00:29:21.626 --> 00:29:24.196 A:middle
And to do this we
came up with a concept

00:29:24.196 --> 00:29:25.386 A:middle
that we're calling iBeacons.

00:29:26.386 --> 00:29:31.466 A:middle
And so with an iBeacon take a
Bluetooth device like an iPad

00:29:31.466 --> 00:29:34.076 A:middle
and if we set a field around--

00:29:34.076 --> 00:29:36.416 A:middle
if we start advertising
a particular packet

00:29:36.556 --> 00:29:41.756 A:middle
from that Bluetooth device
and we can basically end

00:29:41.756 --> 00:29:45.366 A:middle
up creating a field around the
device that is roughly a circle

00:29:46.526 --> 00:29:50.956 A:middle
and if a customer walked by the
store and then entered the store

00:29:51.366 --> 00:29:55.456 A:middle
with their own iPhone our iPhone
could see this Bluetooth low

00:29:55.456 --> 00:29:57.996 A:middle
energy field and know
that I'm inside the store

00:29:58.356 --> 00:30:00.016 A:middle
and change its behaviors
based on that.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:01.256 --> 00:30:02.706 A:middle
And similarly when
the user leaves

00:30:02.706 --> 00:30:07.776 A:middle
that store we can know this and
we can have an exit notification

00:30:07.776 --> 00:30:10.806 A:middle
as well and this allows
you to build context

00:30:10.806 --> 00:30:12.246 A:middle
around multiple places.

00:30:12.396 --> 00:30:15.226 A:middle
You know any store, any Jay's
store is roughly equivalent

00:30:15.226 --> 00:30:16.786 A:middle
because each one has a beacon.

00:30:17.156 --> 00:30:18.496 A:middle
It doesn't matter where
it is in the world.

00:30:18.836 --> 00:30:22.396 A:middle
And so going back to code, this
is what we were trying to do.

00:30:23.156 --> 00:30:25.456 A:middle
And to make this actually
feasible in practice you have

00:30:25.456 --> 00:30:27.946 A:middle
to realize that Jay's
Donut Shop is not unique.

00:30:28.466 --> 00:30:32.076 A:middle
Jay although not the most
common name isn't even unique

00:30:32.076 --> 00:30:33.906 A:middle
in the donut world and
there's a lot of competitors.

00:30:33.986 --> 00:30:35.836 A:middle
So, the first thing I'm
going to need is I'm going

00:30:35.836 --> 00:30:37.586 A:middle
to need a universal
unique identifier

00:30:38.076 --> 00:30:39.846 A:middle
to represent Jay's Donut Shop.

00:30:40.886 --> 00:30:43.986 A:middle
Now if I go into an OS
X machine and I create--

00:30:43.986 --> 00:30:46.626 A:middle
I use uuidgen I can
get one of these.

00:30:46.786 --> 00:30:50.076 A:middle
And so, once I've done this
once I now have an identifier

00:30:50.076 --> 00:30:51.626 A:middle
that I'm going to use
to represent my stores.

00:30:51.706 --> 00:30:55.416 A:middle
And the odds that anybody else
could accidentally use this

00:30:55.416 --> 00:30:58.016 A:middle
identifier to represent
my store is very slim.

00:30:59.026 --> 00:31:02.186 A:middle
Now obviously somebody could
maliciously copy my identifier

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:02.686 --> 00:31:07.196 A:middle
but in general this is a unique
way for me to see my stores.

00:31:07.746 --> 00:31:12.246 A:middle
To turn this into
practice I'm going

00:31:12.246 --> 00:31:14.576 A:middle
to have an application delegate
that's going to go ahead

00:31:14.576 --> 00:31:17.676 A:middle
and construct a uuid
object from this string

00:31:17.676 --> 00:31:20.656 A:middle
that I've precomputed and
also going to store the fact

00:31:20.656 --> 00:31:21.826 A:middle
that this is Jay's Donut Shop.

00:31:22.706 --> 00:31:25.476 A:middle
Uuids are great but it's
also much easier to code

00:31:25.476 --> 00:31:27.516 A:middle
if you have a human
readable identifier,

00:31:28.036 --> 00:31:28.956 A:middle
especially if you're
going to deal

00:31:28.956 --> 00:31:31.106 A:middle
with multiple beacons
inside of one app.

00:31:31.646 --> 00:31:34.066 A:middle
And, of course, this is based
around a location manager

00:31:34.066 --> 00:31:35.206 A:middle
so you're going to
have to create one

00:31:35.206 --> 00:31:36.726 A:middle
of these and set yourself up.

00:31:37.416 --> 00:31:39.646 A:middle
Now when I'm ready
to start monitoring

00:31:39.646 --> 00:31:43.666 A:middle
for my stores I can implement
a function that looks something

00:31:43.666 --> 00:31:46.276 A:middle
like this,
startMonitoringForStores.

00:31:46.736 --> 00:31:49.546 A:middle
And all I have to do is
construct a CLBeaconRegion

00:31:49.546 --> 00:31:54.556 A:middle
object, specify the proximity
uuid that I've generated.

00:31:54.556 --> 00:31:57.106 A:middle
This is the one that all of my
stores are going to advertise

00:31:57.856 --> 00:31:59.316 A:middle
and then specify identifier.

00:31:59.826 --> 00:32:02.806 A:middle
This identifier is what uniquely
identifies it to your instance

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:02.806 --> 00:32:05.306 A:middle
of core location such
that if you decide

00:32:05.306 --> 00:32:06.816 A:middle
to change its parameters
after the fact

00:32:06.816 --> 00:32:11.156 A:middle
or uninstall it you can use
that identifier to do so.

00:32:11.396 --> 00:32:13.236 A:middle
Lastly,
startMonitoringForRegion.

00:32:13.516 --> 00:32:15.306 A:middle
This is the exact same
region monitor in API

00:32:15.306 --> 00:32:17.736 A:middle
that you're already familiar
with and now it's been expanded

00:32:17.736 --> 00:32:19.846 A:middle
to handle these BeaconRegion
objects.

00:32:20.496 --> 00:32:25.536 A:middle
This means in turn that when you
get an entry notification you

00:32:25.536 --> 00:32:28.466 A:middle
handle it exactly like you
would a geolocation update.

00:32:28.856 --> 00:32:33.196 A:middle
Specifically saying that hey,
is the identifier of the region

00:32:33.196 --> 00:32:35.416 A:middle
that I've entered the same
as the one that I care about?

00:32:35.876 --> 00:32:37.646 A:middle
Okay, go ahead and tell the user

00:32:37.846 --> 00:32:39.386 A:middle
that they are at
Jay's Donut Shop.

00:32:40.996 --> 00:32:43.036 A:middle
This is a great first
step at a product.

00:32:43.386 --> 00:32:46.106 A:middle
Now my friends can, that
are trying this app can go

00:32:46.106 --> 00:32:48.536 A:middle
to a store and get
immediately notified

00:32:48.536 --> 00:32:49.986 A:middle
that hey look you're
inside of Jay's Donut Shop.

00:32:50.526 --> 00:32:52.866 A:middle
But one of my friends came
back to me and said hey look,

00:32:53.286 --> 00:32:55.436 A:middle
you've got that Jay's Donut
Shop over at Valley Fair Mall

00:32:55.876 --> 00:32:57.576 A:middle
and whenever I go inside there

00:32:57.576 --> 00:32:59.576 A:middle
and I go buy some
shoes the result is

00:32:59.576 --> 00:33:00.926 A:middle
that my phone starts vibrating

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.926 --> 00:33:02.436 A:middle
because I go by Jay's
Donut Shop.

00:33:02.436 --> 00:33:04.396 A:middle
So this is relatively annoying.

00:33:05.976 --> 00:33:08.606 A:middle
The reality is that users
don't necessarily care

00:33:08.606 --> 00:33:09.816 A:middle
that they're inside of Jay's.

00:33:10.266 --> 00:33:12.356 A:middle
They're usually seeking to
interact with your store.

00:33:12.606 --> 00:33:15.296 A:middle
And when they're ready to do
that they're perfectly capable

00:33:15.296 --> 00:33:16.676 A:middle
of pulling their phone
out of their pocket

00:33:16.676 --> 00:33:17.756 A:middle
and turning their display on

00:33:18.006 --> 00:33:19.516 A:middle
and launching their
application themselves.

00:33:20.716 --> 00:33:25.206 A:middle
So, but we can still speed the
process up by letting you know

00:33:25.356 --> 00:33:27.106 A:middle
when they've turned on their
phone inside of a store.

00:33:28.266 --> 00:33:30.266 A:middle
And so to do that
there's an added property

00:33:30.266 --> 00:33:33.976 A:middle
that BeaconRegions support which
is notifyEntryStateOnDisplay.

00:33:34.816 --> 00:33:39.086 A:middle
And now any time a user
turns on their phone inside

00:33:39.086 --> 00:33:41.796 A:middle
of my stores my application
will get a launch event

00:33:42.136 --> 00:33:43.646 A:middle
and I'll have the
ability to respond

00:33:43.646 --> 00:33:44.496 A:middle
to the user's interaction.

00:33:45.076 --> 00:33:49.116 A:middle
And, of course, we can
disable the notifyOnEntry.

00:33:49.276 --> 00:33:50.506 A:middle
This is spurious wake

00:33:50.506 --> 00:33:52.076 A:middle
that wasn't really
relevant to the user.

00:33:52.446 --> 00:33:54.486 A:middle
There's no reason to know
that we've walked by Jay's

00:33:54.486 --> 00:33:56.556 A:middle
or even stepped into
Jay's until I'm ready

00:33:56.556 --> 00:33:57.606 A:middle
to interact with my phone.

00:33:58.216 --> 00:34:00.796 A:middle
And we're going to
leave the notification

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:01.136 --> 00:34:03.976 A:middle
on exit around in a second.

00:34:04.036 --> 00:34:08.186 A:middle
But now if I monitor for
regions this way that--

00:34:08.186 --> 00:34:10.356 A:middle
my friend that's walking through
Valley Fair doesn't have their

00:34:10.356 --> 00:34:12.025 A:middle
phone vibrating in their
pocket all the time,

00:34:12.525 --> 00:34:14.266 A:middle
they can go get their shoes
and then when they're ready

00:34:14.266 --> 00:34:16.826 A:middle
for a donut they can now
interact with my app.

00:34:18.266 --> 00:34:19.886 A:middle
The problem is that when
they interact with their app

00:34:20.096 --> 00:34:23.266 A:middle
in line they get that fantastic
notification welcome to Jay's.

00:34:23.266 --> 00:34:24.436 A:middle
Here's all these cool
things you can do.

00:34:24.436 --> 00:34:26.976 A:middle
They buy their donut, they
sit back down at the table.

00:34:26.976 --> 00:34:28.446 A:middle
They're drinking their coffee,
they pull out their phone

00:34:28.446 --> 00:34:30.286 A:middle
to check their email;
hey welcome to Jay's.

00:34:31.886 --> 00:34:33.626 A:middle
So, it's important
to keep in mind

00:34:33.626 --> 00:34:35.815 A:middle
that this will fire every
time their display turns

00:34:35.815 --> 00:34:37.076 A:middle
on if they're inside your store.

00:34:37.295 --> 00:34:38.866 A:middle
So, what you're going
to want to do is

00:34:38.866 --> 00:34:41.926 A:middle
if you haven't already presented
a notification then go ahead

00:34:41.926 --> 00:34:42.856 A:middle
and present a notification.

00:34:43.275 --> 00:34:44.746 A:middle
If you've previously
notified them that hey,

00:34:44.746 --> 00:34:46.485 A:middle
you're in Jay's you
don't really need

00:34:46.485 --> 00:34:49.045 A:middle
to have another notification pop
up on their lock screen or worse

00:34:49.045 --> 00:34:50.726 A:middle
over what application
they're trying to use.

00:34:52.186 --> 00:34:54.936 A:middle
So, this is on you guys
to figure out how to not--

00:34:54.936 --> 00:34:57.386 A:middle
to keep track of the fact
that you're inside of a store.

00:34:58.126 --> 00:35:00.506 A:middle
And it I might be a
good idea to then--

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:00.506 --> 00:35:03.296 A:middle
track when you leave the
store so any notifications

00:35:03.296 --> 00:35:05.586 A:middle
that are still lying around on
the lock screen you can clear

00:35:05.936 --> 00:35:07.646 A:middle
and similarly you
can rearm yourself

00:35:07.646 --> 00:35:10.406 A:middle
for the next time the
user uses the phone inside

00:35:10.406 --> 00:35:14.056 A:middle
of a different store.

00:35:14.266 --> 00:35:17.566 A:middle
So, that's a great first
step, but the reality is

00:35:17.566 --> 00:35:20.386 A:middle
that welcoming people to Jay's
Donut Shop doesn't really buy

00:35:20.386 --> 00:35:20.816 A:middle
them much.

00:35:20.816 --> 00:35:22.536 A:middle
What can you do with
a warm welcome?

00:35:22.536 --> 00:35:23.786 A:middle
That's what my employees
are for.

00:35:23.786 --> 00:35:26.106 A:middle
I pay them a lot of money to be
very smiley and friendly to me.

00:35:27.256 --> 00:35:29.186 A:middle
So, wouldn't it better--

00:35:29.336 --> 00:35:32.246 A:middle
so let's come up with
a use case around this.

00:35:32.666 --> 00:35:33.916 A:middle
So, one of the things
that you can do

00:35:33.916 --> 00:35:36.346 A:middle
on my website is you
can order donuts online

00:35:36.666 --> 00:35:39.936 A:middle
and you can have them ready for
pickup at a store which means

00:35:39.936 --> 00:35:41.546 A:middle
that you know you go home,
you print off a receipt,

00:35:41.546 --> 00:35:42.526 A:middle
you bring the receipt
in the store

00:35:42.526 --> 00:35:43.606 A:middle
and they bring you
a box of donuts.

00:35:44.326 --> 00:35:45.056 A:middle
Wouldn't it be better

00:35:45.056 --> 00:35:47.806 A:middle
if you could turn your
iPhone into that receipt?

00:35:49.216 --> 00:35:52.056 A:middle
The reality is that we have
had this technology for a while

00:35:52.386 --> 00:35:53.446 A:middle
and anybody can do it.

00:35:54.236 --> 00:35:56.286 A:middle
What's going to make my
application unique is

00:35:56.286 --> 00:35:59.396 A:middle
that when I approach the cash
register my phone is going

00:35:59.396 --> 00:36:01.936 A:middle
to know that I'm at the
cash register and it's going

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:01.936 --> 00:36:05.286 A:middle
to present me a notification
saying, hey now's a good time

00:36:05.286 --> 00:36:07.066 A:middle
to pull out your receipt
because your donuts are ready;

00:36:07.066 --> 00:36:07.586 A:middle
you can pick them up.

00:36:08.956 --> 00:36:11.806 A:middle
To do this we need to know
approximately how far we are

00:36:11.806 --> 00:36:13.576 A:middle
from the cash register
not just the fact

00:36:13.576 --> 00:36:15.266 A:middle
that we're physically
inside of Jay's Donut Shop.

00:36:16.596 --> 00:36:19.896 A:middle
So, to achieve this iBeacon
supports a notion of ranging.

00:36:20.706 --> 00:36:24.496 A:middle
And so if we took that same
Bluetooth little energy signal

00:36:24.976 --> 00:36:27.476 A:middle
and if we kind of
conceptualize it as a field

00:36:27.786 --> 00:36:30.426 A:middle
where the closer you are to
Jay's Donuts the stronger

00:36:30.686 --> 00:36:31.826 A:middle
that signal's going to be

00:36:31.826 --> 00:36:33.886 A:middle
and the further away you are
the weaker its going to be,

00:36:34.596 --> 00:36:38.416 A:middle
we can ascribe rough
categories to that distance.

00:36:38.416 --> 00:36:40.366 A:middle
So, you're immediately
on top of the beacon.

00:36:40.736 --> 00:36:44.466 A:middle
You're somewhat close by or
really far away or we don't

00:36:44.466 --> 00:36:45.776 A:middle
where the beacon is, probably

00:36:45.776 --> 00:36:47.046 A:middle
because we've never
seen it before

00:36:47.046 --> 00:36:47.976 A:middle
or we can't see it right now.

00:36:49.026 --> 00:36:51.446 A:middle
So, with this rough notion

00:36:51.446 --> 00:36:55.466 A:middle
of ranging we can actually
achieve this notification that's

00:36:55.466 --> 00:36:58.416 A:middle
specifically tied to a
location inside of my store

00:36:58.586 --> 00:37:00.176 A:middle
and not just the
store more broadly.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:01.256 --> 00:37:04.086 A:middle
So, going back to my region
monitoring example when I know

00:37:04.086 --> 00:37:06.946 A:middle
that my user's turned on their
phone inside of the store,

00:37:07.016 --> 00:37:09.726 A:middle
because again I'm
not notifyingOnEntry

00:37:09.726 --> 00:37:10.536 A:middle
when the display is on.

00:37:11.916 --> 00:37:15.616 A:middle
Now, whenever this happens I
can start ranging for beacons

00:37:15.756 --> 00:37:21.246 A:middle
in this region and so any beacon
in the store that I can see

00:37:21.396 --> 00:37:24.246 A:middle
after I start ranging
I'll get an individual--

00:37:24.246 --> 00:37:26.856 A:middle
I'll get an update that
coalesces all of them

00:37:26.856 --> 00:37:29.186 A:middle
and tells me the approximate
range to each of them.

00:37:30.256 --> 00:37:34.026 A:middle
So, locationManager
didRangeBeacons

00:37:34.026 --> 00:37:36.566 A:middle
In Region will have this array
of beacons that I can see.

00:37:37.296 --> 00:37:40.436 A:middle
And as long as that beacon count
is positive I can take the first

00:37:40.436 --> 00:37:44.246 A:middle
object in that array,
which is roughly equivalent

00:37:44.246 --> 00:37:45.136 A:middle
to the closest beacon.

00:37:45.196 --> 00:37:48.706 A:middle
Now, you have to realize that
this not 100 percent precise

00:37:49.086 --> 00:37:51.876 A:middle
and so it might not actually
be physically the closest,

00:37:52.216 --> 00:37:55.506 A:middle
but it is the one that we're
seeing and its roughly--

00:37:56.256 --> 00:37:58.696 A:middle
it's approximately the closest.

00:37:58.996 --> 00:38:00.516 A:middle
And more importantly in
Jay's Donut Shop there's only

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:00.516 --> 00:38:00.976 A:middle
one anyway.

00:38:02.076 --> 00:38:05.266 A:middle
So, if I check to see if
that proximity is immediately

00:38:05.266 --> 00:38:08.136 A:middle
in my vicinity then
now's a good time

00:38:08.136 --> 00:38:09.326 A:middle
to show the receipt
notification.

00:38:10.486 --> 00:38:12.766 A:middle
And of course, if all the
beacons drop down to zero

00:38:13.216 --> 00:38:14.626 A:middle
that means that I've
left the store

00:38:14.626 --> 00:38:15.746 A:middle
and I can't see any beacons

00:38:15.746 --> 00:38:17.356 A:middle
and so it's a good time
to hide the receipt.

00:38:18.716 --> 00:38:20.956 A:middle
And similarly to before,
we want to bookend this

00:38:21.216 --> 00:38:23.976 A:middle
with clearing out notifications.

00:38:23.976 --> 00:38:27.906 A:middle
So, when we exit my store it's
a good idea to stop ranging

00:38:27.906 --> 00:38:29.486 A:middle
for beacons in the region,
because you're not going

00:38:29.486 --> 00:38:31.066 A:middle
to see any more if you're
not inside that field

00:38:32.026 --> 00:38:34.946 A:middle
and similarly hide the
receipt if you haven't already.

00:38:36.636 --> 00:38:43.496 A:middle
So, this is a great way to do
approximate ranging to things

00:38:43.746 --> 00:38:46.676 A:middle
and know where you are
and relative to a beacon.

00:38:47.186 --> 00:38:50.656 A:middle
So what beacons actually
are is they support a number

00:38:50.906 --> 00:38:52.246 A:middle
of properties.

00:38:52.286 --> 00:38:53.736 A:middle
The first is the proximity uuid.

00:38:54.216 --> 00:38:56.076 A:middle
This is the universal
unique identifier

00:38:56.146 --> 00:38:57.766 A:middle
that you've told
us to monitor for.

00:38:58.156 --> 00:39:00.096 A:middle
And when we find the
beacon that matches it,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:00.096 --> 00:39:01.476 A:middle
this is the beacon
that we return to.

00:39:02.016 --> 00:39:05.366 A:middle
And every beacon that--
every beacon has one.

00:39:05.856 --> 00:39:09.176 A:middle
And when we get-- when we see
one we have the approximate

00:39:09.176 --> 00:39:10.156 A:middle
range to that beacon.

00:39:10.616 --> 00:39:12.696 A:middle
And this is one of
four types the unknown,

00:39:13.046 --> 00:39:16.196 A:middle
immediate, near or far.

00:39:16.266 --> 00:39:18.766 A:middle
And lastly there's
these two other fields,

00:39:18.866 --> 00:39:20.426 A:middle
a major and a minor number.

00:39:21.186 --> 00:39:25.006 A:middle
These are two 16 bit values
that are completely customizable

00:39:25.066 --> 00:39:26.826 A:middle
that you can program
onto the beacon yourself.

00:39:27.876 --> 00:39:28.826 A:middle
What can you do with these?

00:39:29.396 --> 00:39:32.066 A:middle
Well, in Jay's Donut
Shop I had this problem.

00:39:32.746 --> 00:39:34.706 A:middle
I had a friend that like
really liked Jay's Donut Shop

00:39:34.706 --> 00:39:36.186 A:middle
and he went to the shop
multiple times a day.

00:39:36.186 --> 00:39:39.296 A:middle
And when he tried to use my
pickup order system he went

00:39:39.296 --> 00:39:41.996 A:middle
to one store in the morning and
then his donuts were available

00:39:41.996 --> 00:39:43.156 A:middle
at a different store
in the afternoon.

00:39:43.156 --> 00:39:44.416 A:middle
But when he got to the store

00:39:44.416 --> 00:39:45.796 A:middle
in the morning he
got a notification.

00:39:45.796 --> 00:39:47.116 A:middle
It would be like hey
your donuts are ready.

00:39:48.226 --> 00:39:52.176 A:middle
So, if we encoded the store
number as the major identifier

00:39:52.176 --> 00:39:55.716 A:middle
and we got, read that off the
beacon as we arranged for it

00:39:56.436 --> 00:39:59.716 A:middle
and we compared that to the
receipt that I already knew

00:39:59.716 --> 00:40:00.816 A:middle
where the store was--

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:01.026 --> 00:40:03.066 A:middle
which store was involved
in the purchase,

00:40:03.836 --> 00:40:06.556 A:middle
now I can notify the user only
when they're at the right store.

00:40:06.726 --> 00:40:07.846 A:middle
They go to the wrong store.

00:40:08.356 --> 00:40:10.216 A:middle
I'm glad you like donuts,
but they're not going

00:40:10.216 --> 00:40:11.796 A:middle
to get the donuts they
previously ordered they'll have

00:40:11.796 --> 00:40:14.376 A:middle
to get some new donuts.

00:40:14.376 --> 00:40:15.906 A:middle
And so, this is just
one example.

00:40:16.206 --> 00:40:18.506 A:middle
A common example is
setting the major identifier

00:40:18.506 --> 00:40:21.876 A:middle
to represent a particular store
location and so you can monitor

00:40:21.876 --> 00:40:25.226 A:middle
for a uuid of your
stores that's universal

00:40:25.226 --> 00:40:26.306 A:middle
across all of your stores.

00:40:26.576 --> 00:40:28.346 A:middle
But the major identifier
is just tied

00:40:28.346 --> 00:40:29.666 A:middle
to this one particular instance.

00:40:29.666 --> 00:40:32.506 A:middle
So what about the minor ID?

00:40:32.946 --> 00:40:34.966 A:middle
Forget the stores, what
can we do with a minor ID?

00:40:35.116 --> 00:40:37.306 A:middle
Let's go back to the
original donut shop example.

00:40:37.906 --> 00:40:40.096 A:middle
Welcome to Cupertino,
try an apple fritter.

00:40:40.876 --> 00:40:42.946 A:middle
If each store which
we're representing

00:40:42.946 --> 00:40:47.486 A:middle
by a major identifier also
advertised a particular donut,

00:40:47.846 --> 00:40:50.216 A:middle
that it was its particular
specialty,

00:40:50.816 --> 00:40:52.326 A:middle
now without even bothering

00:40:52.326 --> 00:40:55.156 A:middle
to hit the internet you could
just look up for that donut

00:40:55.536 --> 00:40:57.036 A:middle
on your database in your app

00:40:57.396 --> 00:41:00.236 A:middle
and say hey look this number
corresponds with apple fritter.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:00.526 --> 00:41:01.976 A:middle
Tell the user that if you're

00:41:01.976 --> 00:41:03.906 A:middle
in Cupertino you really should
be trying an apple fritter.

00:41:05.126 --> 00:41:10.026 A:middle
And so this is just one example
of how you could customize major

00:41:10.026 --> 00:41:11.496 A:middle
and minor for your application.

00:41:11.656 --> 00:41:13.336 A:middle
Let's look at another example.

00:41:13.336 --> 00:41:15.266 A:middle
Let's look at something
bigger than Jay's Donut Shop.

00:41:16.006 --> 00:41:16.976 A:middle
Let's take a department store.

00:41:17.936 --> 00:41:20.106 A:middle
Now you can monitor for all
of your department stores

00:41:20.106 --> 00:41:21.526 A:middle
and when you're inside of
a department store you know

00:41:21.526 --> 00:41:22.876 A:middle
which one you're at, but all

00:41:22.876 --> 00:41:24.726 A:middle
of your department stores
are pretty much uniform.

00:41:24.726 --> 00:41:25.986 A:middle
They all have the
same departments.

00:41:26.686 --> 00:41:29.636 A:middle
What if each department had
it's own beacon inside of it.

00:41:30.106 --> 00:41:33.636 A:middle
Again this are Bluetooth
low energy devices so its--

00:41:33.926 --> 00:41:36.516 A:middle
will be possible to manufacture
relatively cheap ones

00:41:36.926 --> 00:41:40.276 A:middle
and we're intending to release
a Bluetooth profile for those

00:41:40.276 --> 00:41:41.166 A:middle
of you that are familiar with it

00:41:41.166 --> 00:41:43.516 A:middle
that will allow other
manufacturers to produce these.

00:41:44.296 --> 00:41:46.326 A:middle
But if you embedded one of
these cheap devices inside

00:41:46.326 --> 00:41:49.476 A:middle
of each department now when
your user is inside the store

00:41:49.476 --> 00:41:52.426 A:middle
and they're at the jewelry
section and they pull

00:41:52.426 --> 00:41:55.466 A:middle
up on their phone they could
see a list like current sales

00:41:55.546 --> 00:41:57.286 A:middle
or promotions on jewelry.

00:41:57.866 --> 00:42:01.126 A:middle
Or if they walk into the
menswear section they could

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:01.126 --> 00:42:03.356 A:middle
realize Father's Day
is coming up in a week.

00:42:03.356 --> 00:42:06.216 A:middle
It might be a good
time to buy dad a tie.

00:42:06.606 --> 00:42:09.576 A:middle
These are the types
of specific things

00:42:09.576 --> 00:42:13.496 A:middle
that you can do once you
know more information

00:42:13.496 --> 00:42:16.216 A:middle
about a particular beacon
and how far you are to it.

00:42:17.286 --> 00:42:19.746 A:middle
You could have a museum where
each painting was tagged

00:42:19.746 --> 00:42:21.676 A:middle
with different beacon and you
could pull it up in your catalog

00:42:21.676 --> 00:42:26.076 A:middle
of paintings and know all of the
information relative to that,

00:42:26.726 --> 00:42:31.596 A:middle
maybe that section of the
museum that you're in.

00:42:31.596 --> 00:42:34.336 A:middle
There's another example
and that is keep in mind

00:42:34.336 --> 00:42:35.756 A:middle
that these are small devices.

00:42:35.866 --> 00:42:36.366 A:middle
They're mobile.

00:42:36.766 --> 00:42:37.756 A:middle
You can put one in your pocket.

00:42:37.756 --> 00:42:38.626 A:middle
You can walk around with it.

00:42:39.066 --> 00:42:41.446 A:middle
You could also glue one
onto the side of a bus.

00:42:42.586 --> 00:42:44.956 A:middle
Now if you did this and you
encoded the major identifier

00:42:44.956 --> 00:42:48.656 A:middle
as the route information
now when you're seeing a bus

00:42:48.746 --> 00:42:51.506 A:middle
and you're looking at your
phone you could know exactly

00:42:51.506 --> 00:42:52.446 A:middle
where this route takes you.

00:42:52.996 --> 00:42:55.776 A:middle
And, in fact, we already
code this in human lands

00:42:55.836 --> 00:42:58.446 A:middle
to integers anyway, because
quite frankly bus numbers are

00:42:58.446 --> 00:43:00.886 A:middle
sometimes easier to deal
with than route names.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:01.756 --> 00:43:04.066 A:middle
But there's an added
problem with buses and trains

00:43:04.066 --> 00:43:07.756 A:middle
and that sometimes a train
might run express versus not.

00:43:07.756 --> 00:43:10.646 A:middle
And if it's going to run
express it might only stop

00:43:10.646 --> 00:43:11.676 A:middle
at a handful of stops.

00:43:12.416 --> 00:43:15.356 A:middle
So if I encoded the particular
bus number on a minor identifier

00:43:15.986 --> 00:43:18.856 A:middle
and my user was using my
transportation app in a station

00:43:19.156 --> 00:43:21.036 A:middle
and was ranging,
when that bus pulls

00:43:21.036 --> 00:43:24.406 A:middle
into the station they could
immediately know hey this is the

00:43:24.406 --> 00:43:26.756 A:middle
bus that's going to take me home
or no actually this is going

00:43:26.756 --> 00:43:28.346 A:middle
to skip my stop; I should
wait for the next one.

00:43:29.516 --> 00:43:31.586 A:middle
This is some important
information that you could--

00:43:31.766 --> 00:43:33.586 A:middle
this is just one
example of information

00:43:33.586 --> 00:43:36.416 A:middle
that you could encode
that's contextually relevant

00:43:37.006 --> 00:43:38.146 A:middle
to the user.

00:43:38.146 --> 00:43:39.286 A:middle
Now I mentioned that
we're planning

00:43:39.286 --> 00:43:42.006 A:middle
on allowing other people
to manufacture beacons.

00:43:42.426 --> 00:43:44.586 A:middle
But for starters
let's take something

00:43:44.586 --> 00:43:46.536 A:middle
that you probably already have
and turn it into a beacon.

00:43:47.146 --> 00:43:52.266 A:middle
Modern iOS devices that are
capable of Bluetooth energy are

00:43:52.766 --> 00:43:55.516 A:middle
in scanning for beacons can
also themselves become beacons.

00:43:56.246 --> 00:43:58.736 A:middle
And so if you create
a beacon region

00:43:58.836 --> 00:44:02.126 A:middle
with the same proximity uuid
major value and minor value

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:02.126 --> 00:44:06.406 A:middle
that you'd like to scan for,
then you can actually ask

00:44:06.406 --> 00:44:10.276 A:middle
for a location to encode that
information as peripheral data.

00:44:11.396 --> 00:44:12.816 A:middle
And you can then pass that on

00:44:13.226 --> 00:44:15.086 A:middle
to a core Bluetooth
peripheral manager

00:44:15.086 --> 00:44:16.526 A:middle
that you've already
instantiated inside your app

00:44:17.096 --> 00:44:18.626 A:middle
and you can start
advertising that data.

00:44:19.196 --> 00:44:22.416 A:middle
And of course this
is calibratable

00:44:22.416 --> 00:44:24.666 A:middle
and so you can specify
exactly how loudly

00:44:24.666 --> 00:44:25.946 A:middle
that beacon should advertise.

00:44:26.416 --> 00:44:28.356 A:middle
So, if you've got a small
store you might not want

00:44:28.356 --> 00:44:31.076 A:middle
to shout quite as loud,
that way it doesn't blast

00:44:31.226 --> 00:44:32.636 A:middle
out into the street, but maybe

00:44:32.716 --> 00:44:34.376 A:middle
if you've got a bigger store
you need a bigger field

00:44:34.606 --> 00:44:35.526 A:middle
and this is tunable.

00:44:36.256 --> 00:44:37.986 A:middle
And there's going to
be sample code online

00:44:38.356 --> 00:44:39.736 A:middle
for a project called Air Locate.

00:44:39.906 --> 00:44:43.256 A:middle
It's both going to show you
usage of our API in terms

00:44:43.256 --> 00:44:45.526 A:middle
of using beacons for
fencing and ranging

00:44:45.836 --> 00:44:48.016 A:middle
but also turning a
device into a beacon

00:44:48.526 --> 00:44:50.636 A:middle
and letting you experience--

00:44:50.766 --> 00:44:53.066 A:middle
guiding you through
the calibration process

00:44:53.066 --> 00:44:56.386 A:middle
of exactly how to tune
the advertisement suitably

00:44:56.386 --> 00:44:59.346 A:middle
for your store.

00:44:59.546 --> 00:45:04.736 A:middle
So, tying beacons back
into the CLRegion API.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:05.716 --> 00:45:08.056 A:middle
Previously we had
a CLRegionObject.

00:45:08.056 --> 00:45:10.236 A:middle
This is what all of the
APIs could take in terms

00:45:10.236 --> 00:45:11.546 A:middle
of a startingMonitoringForRegion

00:45:11.546 --> 00:45:14.216 A:middle
for getting the current
list of regions.

00:45:15.076 --> 00:45:16.006 A:middle
So, to expand this

00:45:16.006 --> 00:45:18.826 A:middle
to BeaconRegions we
subclassed CLRegion

00:45:18.916 --> 00:45:20.436 A:middle
to support a CLBeaconRegion.

00:45:21.816 --> 00:45:23.116 A:middle
Now you might be aware

00:45:23.116 --> 00:45:26.166 A:middle
that because the CLRegions were
geared towards geospecific data

00:45:26.866 --> 00:45:29.476 A:middle
they had a center on the
earth and they had a radius.

00:45:30.076 --> 00:45:32.146 A:middle
This doesn't really make sense
in the context of a beacon

00:45:32.146 --> 00:45:36.076 A:middle
which could be glued to a bus or
kept in your pocket or just is--

00:45:36.286 --> 00:45:37.896 A:middle
doesn't really have a center.

00:45:38.656 --> 00:45:39.896 A:middle
So, we refactored the code

00:45:40.726 --> 00:45:43.906 A:middle
and we made available a new
class, CLCircularRegion.

00:45:44.606 --> 00:45:47.596 A:middle
So, now in iOS 7 BeaconRegions

00:45:47.596 --> 00:45:51.416 A:middle
and CircularRegions are
your concrete classes

00:45:51.596 --> 00:45:53.346 A:middle
and CLRegion is just
this abstract class

00:45:53.396 --> 00:45:54.816 A:middle
that the APIs support
for monitoring.

00:45:55.546 --> 00:45:57.936 A:middle
And we're-- so we've
deprecated CLRegion.

00:45:58.156 --> 00:46:01.416 A:middle
If you're targeting 6 and
7 and you need to be able

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:01.416 --> 00:46:03.206 A:middle
to be backwards compatible
go ahead

00:46:03.206 --> 00:46:04.426 A:middle
and keep creating CLRegions.

00:46:04.426 --> 00:46:08.936 A:middle
They'll still work like
CircularRegions did on iOS 6

00:46:09.196 --> 00:46:10.336 A:middle
and they'll be backwards
compatible.

00:46:11.076 --> 00:46:12.996 A:middle
But if you're just targeting 7

00:46:13.056 --> 00:46:15.316 A:middle
and you're leveraging the beacon
APIs obviously you need beacon

00:46:15.316 --> 00:46:17.806 A:middle
and CircularRegions as
your preferred target.

00:46:18.676 --> 00:46:23.556 A:middle
So, in summary please be aware
of the multitasking changes

00:46:23.846 --> 00:46:26.396 A:middle
with a little bit of--
a little simple check

00:46:26.556 --> 00:46:30.956 A:middle
to your application, your
UIApplication instance.

00:46:31.246 --> 00:46:32.186 A:middle
You can figure out whether

00:46:32.186 --> 00:46:34.426 A:middle
or not these are exchangeable
behavior for your application

00:46:34.946 --> 00:46:38.166 A:middle
and you could tune their
experience to make sure

00:46:38.166 --> 00:46:40.746 A:middle
that they're aware of what
limitations they've placed

00:46:40.746 --> 00:46:42.656 A:middle
on you inside of
the settings pane.

00:46:43.566 --> 00:46:46.386 A:middle
Similarly if you have a fitness
application, please go ahead

00:46:46.386 --> 00:46:47.556 A:middle
and defer location updates.

00:46:47.876 --> 00:46:49.776 A:middle
Honestly it's about an
hour's worth of work

00:46:49.816 --> 00:46:52.426 A:middle
to make your application
defer updates available

00:46:52.486 --> 00:46:54.796 A:middle
or support deferred
location updates

00:46:55.186 --> 00:47:00.196 A:middle
and 40 percent battery savings
is kind of the upper bound

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:00.196 --> 00:47:01.746 A:middle
of what you can achieve
if you use this.

00:47:01.746 --> 00:47:03.586 A:middle
So, it would be really
great to just take

00:47:03.746 --> 00:47:04.906 A:middle
that little bit of
effort to do it.

00:47:05.456 --> 00:47:08.026 A:middle
And lastly iBeacons
are brand new.

00:47:08.026 --> 00:47:11.016 A:middle
We've just scratched the
surface on sort of the things

00:47:11.016 --> 00:47:12.166 A:middle
that you could even
achieve with them.

00:47:12.496 --> 00:47:14.396 A:middle
And I'm sure that there's
going to be many more use cases

00:47:14.396 --> 00:47:15.446 A:middle
that you're going
to surprise us with.

00:47:15.446 --> 00:47:17.736 A:middle
So, please go out
and experiment.

00:47:19.516 --> 00:47:24.746 A:middle
[ Applause ]

00:47:25.246 --> 00:47:25.496 A:middle
&gt;&gt; Thanks.

00:47:26.476 --> 00:47:29.636 A:middle
So, if you need more information
Paul Marcos is our Evangelist

00:47:29.636 --> 00:47:31.386 A:middle
for our team, pmarcos@apple.com.

00:47:31.446 --> 00:47:34.036 A:middle
If he can't answer a question
for some reason he can get

00:47:34.036 --> 00:47:35.746 A:middle
in touch with one
of us and he can--

00:47:35.926 --> 00:47:38.446 A:middle
he's a great frontline resource.

00:47:38.976 --> 00:47:41.846 A:middle
Documentation is always
available online and, of course,

00:47:41.846 --> 00:47:43.266 A:middle
you can go to the
Apple Developer Forums.

00:47:44.286 --> 00:47:47.606 A:middle
What's New in Multitasking,
already happened on Tuesday.

00:47:47.606 --> 00:47:51.446 A:middle
This talks about the high level
system multitasking changes

00:47:51.876 --> 00:47:54.156 A:middle
and it would be a really good
idea to review that session

00:47:54.156 --> 00:47:54.886 A:middle
if you haven't already,

00:47:55.156 --> 00:47:56.436 A:middle
especially with regards
to location.

00:47:56.436 --> 00:47:57.406 A:middle
And if you're going

00:47:57.406 --> 00:47:59.276 A:middle
to be leveraging the
advertisement feature

00:47:59.276 --> 00:48:02.576 A:middle
of iBeacons then go ahead and
check the Air Locate project

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:02.576 --> 00:48:05.666 A:middle
and also review the
core Bluetooth session.

00:48:06.836 --> 00:48:08.836 A:middle
MapKit was this morning
and there's a bit more

00:48:08.836 --> 00:48:11.776 A:middle
on it this afternoon and
the app store guys are going

00:48:11.776 --> 00:48:13.626 A:middle
to be talking about using
region monitoring inside

00:48:13.626 --> 00:48:15.336 A:middle
of the app store app tomorrow.

00:48:15.336 --> 00:48:16.676 A:middle
So, that might be a
good idea to check out.

00:48:17.026 --> 00:48:18.356 A:middle
So, again thank you for
coming and thank you

00:48:18.356 --> 00:48:19.606 A:middle
for making fantastic
applications.

00:48:20.516 --> 00:48:30.060 A:middle
[ Applause ]

