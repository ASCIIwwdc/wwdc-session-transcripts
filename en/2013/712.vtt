WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:09.856 A:middle
[ Silence ]

00:00:10.356 --> 00:00:13.816 A:middle
&gt;&gt; Good morning.

00:00:13.886 --> 00:00:15.026 A:middle
My name is Matt Jacobson.

00:00:15.026 --> 00:00:17.716 A:middle
I'm on the OS X Performance Team
at Apple, and I want to talk

00:00:17.716 --> 00:00:21.096 A:middle
to you today about
Energy and Battery Life.

00:00:21.636 --> 00:00:23.046 A:middle
You've probably heard a lot

00:00:23.046 --> 00:00:26.136 A:middle
about battery life
this week at WWDC.

00:00:26.946 --> 00:00:28.936 A:middle
Battery life is really
important to us.

00:00:28.936 --> 00:00:31.666 A:middle
And hopefully by now
we've convinced you

00:00:31.666 --> 00:00:35.326 A:middle
that not only do you want
your apps to work great

00:00:35.326 --> 00:00:39.666 A:middle
and look great and for your
users to love how they work

00:00:39.666 --> 00:00:42.906 A:middle
and feel, but you want
them to be able to use them

00:00:42.906 --> 00:00:45.786 A:middle
and still get great
battery life.

00:00:47.006 --> 00:00:51.526 A:middle
And here's something
you probably don't want.

00:00:51.696 --> 00:00:55.696 A:middle
Users using their machine on
battery, as I see a lot of you

00:00:55.846 --> 00:00:58.486 A:middle
out there are right now.

00:00:58.526 --> 00:01:02.716 A:middle
If it's the middle of the week,
they see "Oh, the battery is low

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:02.766 --> 00:01:05.946 A:middle
and I'll open up the battery
status menu and see what's going

00:01:05.946 --> 00:01:08.736 A:middle
on and there's some app that's
hogging all the energy."

00:01:09.226 --> 00:01:12.836 A:middle
Well, you really don't
want that to be your app.

00:01:14.936 --> 00:01:19.126 A:middle
So, I want to talk to you
about some simple ways

00:01:19.276 --> 00:01:22.066 A:middle
that you can make sure your
app is as energy efficient

00:01:22.066 --> 00:01:25.246 A:middle
as possible so you can avoid
being the energy hogger

00:01:25.246 --> 00:01:25.896 A:middle
on the system.

00:01:25.896 --> 00:01:30.336 A:middle
I want to talk about some new
tools and features in Mavericks

00:01:30.336 --> 00:01:34.126 A:middle
and Xcode 5 to help
recognize energy issues.

00:01:34.316 --> 00:01:37.006 A:middle
I want to talk about how

00:01:37.006 --> 00:01:39.146 A:middle
to diagnose those issues
once you've found them.

00:01:39.226 --> 00:01:44.326 A:middle
I want to talk about
a few common mistakes

00:01:44.326 --> 00:01:47.846 A:middle
that you can make that make
your app less energy efficient,

00:01:48.606 --> 00:01:49.506 A:middle
and how to avoid them.

00:01:49.506 --> 00:01:54.776 A:middle
And I want to talk about how
to adopt some best practices

00:01:54.776 --> 00:01:57.306 A:middle
and new APIs for
energy efficiency.

00:01:57.836 --> 00:02:02.606 A:middle
But first, let's start
with some background.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:03.206 --> 00:02:07.626 A:middle
What are the things that your
app can do to use energy?

00:02:08.446 --> 00:02:11.826 A:middle
Well there are mainly
three, running on the CPU,

00:02:13.536 --> 00:02:18.236 A:middle
doing I/O to the
network or a local disk,

00:02:18.406 --> 00:02:19.726 A:middle
or using the graphic system.

00:02:20.516 --> 00:02:24.356 A:middle
Now, the distribution
of how much power each

00:02:24.356 --> 00:02:27.026 A:middle
of these uses varies
from system to system.

00:02:27.306 --> 00:02:31.076 A:middle
But in all cases,
the CPU can dominate.

00:02:32.376 --> 00:02:36.596 A:middle
So let's talk about the CPU.

00:02:37.826 --> 00:02:43.346 A:middle
Now, you might think that with
our CPUs and our modern Macs

00:02:43.346 --> 00:02:46.356 A:middle
with really high clock
speeds and lots of cores

00:02:46.356 --> 00:02:48.166 A:middle
and multiple threads per core

00:02:48.476 --> 00:02:50.846 A:middle
that CPU time is
basically unlimited,

00:02:50.846 --> 00:02:52.756 A:middle
and in a lot of ways
that's true.

00:02:54.086 --> 00:02:57.666 A:middle
But CPU time is still
limited in one major way,

00:02:57.706 --> 00:03:00.266 A:middle
and that's by the
size of the battery.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:01.156 --> 00:03:05.446 A:middle
And this is important
for two reasons.

00:03:05.566 --> 00:03:09.566 A:middle
One, the OS is designed
to give you basically

00:03:09.566 --> 00:03:12.046 A:middle
as much CPU time as you ask for.

00:03:12.616 --> 00:03:20.596 A:middle
And a single bad app, a single
app that is using too much CPU,

00:03:20.596 --> 00:03:21.946 A:middle
it is not energy efficient,

00:03:22.596 --> 00:03:27.616 A:middle
can totally ruin the user's
battery life and here's why.

00:03:29.096 --> 00:03:34.206 A:middle
The CPUs in our Macs, especially
the new Haswell ULT CPUs

00:03:34.206 --> 00:03:38.206 A:middle
in our new MacBook Airs
use a lot more power

00:03:38.696 --> 00:03:40.426 A:middle
when they're running
compared to when they're idle.

00:03:40.426 --> 00:03:41.096 A:middle
We're really good

00:03:41.096 --> 00:03:44.516 A:middle
about aggressively power
managing these CPUs.

00:03:44.516 --> 00:03:46.156 A:middle
But when they have to run code,

00:03:46.466 --> 00:03:48.506 A:middle
they run at a much
higher power state.

00:03:49.106 --> 00:03:52.706 A:middle
For example, if your app
is using 1 percent CPU,

00:03:53.456 --> 00:03:57.036 A:middle
the power draw from the CPU
increases by 10 percent.

00:03:58.196 --> 00:03:59.376 A:middle
That's just for 1 percent.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:00.666 --> 00:04:04.966 A:middle
If you're using 10 percent, the
power draw from the CPU doubles.

00:04:05.556 --> 00:04:10.516 A:middle
And if you have a thread that's
going full bore using 100

00:04:10.516 --> 00:04:14.276 A:middle
percent CPU time, the
CPU can draw 10 times

00:04:14.276 --> 00:04:19.495 A:middle
as much power compared
to idle or more.

00:04:19.716 --> 00:04:24.436 A:middle
So, how do you use the CPU
responsibly in your app?

00:04:25.846 --> 00:04:27.636 A:middle
Well, the main thing is this.

00:04:28.766 --> 00:04:30.256 A:middle
You should strive for your app

00:04:30.426 --> 00:04:34.506 A:middle
to be absolutely idle
when it's not in use.

00:04:35.806 --> 00:04:39.876 A:middle
So, that means eliminating
any work that's not driven

00:04:39.876 --> 00:04:40.336 A:middle
by the user.

00:04:40.336 --> 00:04:45.406 A:middle
So work done in response to
timers, work done in response

00:04:45.406 --> 00:04:48.206 A:middle
to chatting network,
work done in response

00:04:48.206 --> 00:04:50.396 A:middle
to inter-process
communication of any kind.

00:04:50.976 --> 00:04:57.086 A:middle
It means eliminating things
like persistent animations.

00:04:58.106 --> 00:04:59.816 A:middle
These things are
relatively cheap

00:04:59.816 --> 00:05:02.986 A:middle
but over the long term it
adds up to a lot of energy.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:03.586 --> 00:05:11.586 A:middle
And then when the user
requests action, you want to be

00:05:11.586 --> 00:05:13.506 A:middle
as efficient as possible.

00:05:14.096 --> 00:05:16.986 A:middle
And the best way to
do this is to remember

00:05:16.986 --> 00:05:20.456 A:middle
that fast code is
usually efficient code.

00:05:21.706 --> 00:05:26.176 A:middle
So go back, look
at your algorithms,

00:05:26.836 --> 00:05:29.656 A:middle
make sure that they are
as efficient as possible.

00:05:30.136 --> 00:05:33.816 A:middle
If it makes sense to do
so, parallelize your work,

00:05:33.816 --> 00:05:37.666 A:middle
use Grand Central Dispatch,
harness the power of multicore,

00:05:38.196 --> 00:05:41.376 A:middle
and then race back to idle.

00:05:41.426 --> 00:05:44.666 A:middle
And the reason this
is important is

00:05:44.666 --> 00:05:47.846 A:middle
that the faster you guys
can get your apps idle,

00:05:48.476 --> 00:05:50.516 A:middle
the faster we can
get the system idle

00:05:50.516 --> 00:05:53.606 A:middle
and the less energy
we use overall.

00:05:54.216 --> 00:05:59.586 A:middle
If you want to know how much
CPU time your app is using,

00:05:59.586 --> 00:06:01.286 A:middle
just look at the energy tab

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:01.936 --> 00:06:03.616 A:middle
in the Activity Monitor
in Mavericks.

00:06:04.246 --> 00:06:06.506 A:middle
Just look at the
percent CPU column.

00:06:08.216 --> 00:06:11.556 A:middle
Again, you guys should
strive for this number

00:06:11.556 --> 00:06:14.816 A:middle
to be absolutely zero when
your app is not in use.

00:06:14.816 --> 00:06:18.486 A:middle
So 0.0. Even a small value

00:06:18.486 --> 00:06:24.536 A:middle
like 2.7 percent can cause a
significant power draw increase

00:06:24.716 --> 00:06:25.566 A:middle
from the CPU.

00:06:25.796 --> 00:06:27.166 A:middle
And so it's worth investigating.

00:06:30.316 --> 00:06:36.246 A:middle
If you're debugging in Xcode you
can go to the debug navigator

00:06:36.246 --> 00:06:38.716 A:middle
and look at the CPU gauge.

00:06:39.256 --> 00:06:43.696 A:middle
There's the debug
navigator, the CPU gauge,

00:06:43.926 --> 00:06:47.076 A:middle
and it will tell you how
much CPU time you're using

00:06:47.076 --> 00:06:51.766 A:middle
instantaneously as
well as a history

00:06:51.766 --> 00:06:56.696 A:middle
of how much you've
used over time.

00:06:56.916 --> 00:06:59.586 A:middle
And if you are the kind of
person who's more familiar

00:06:59.586 --> 00:07:02.436 A:middle
with the Unix shell, you can
run the top command of course,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:02.666 --> 00:07:05.136 A:middle
look at the percent CPU column.

00:07:05.136 --> 00:07:12.006 A:middle
Or if you pass -A, put
top into accumulator mode,

00:07:12.476 --> 00:07:15.496 A:middle
what this does is it allows
you to watch the CPU time

00:07:15.496 --> 00:07:17.926 A:middle
of your app accumulate
starting at 0,

00:07:18.236 --> 00:07:20.596 A:middle
so you can see here
I launched top

00:07:20.596 --> 00:07:24.526 A:middle
and Stock Watcher
has used 0.2 seconds

00:07:24.526 --> 00:07:26.986 A:middle
of CPU time since
I launched top.

00:07:27.906 --> 00:07:29.626 A:middle
So this allows you
to get an idea

00:07:29.626 --> 00:07:33.136 A:middle
of how much CPU time a
particular scenario takes

00:07:33.566 --> 00:07:37.236 A:middle
or just to watch your
app accumulate CPU time

00:07:37.236 --> 00:07:37.976 A:middle
in real time.

00:07:38.516 --> 00:07:45.316 A:middle
[ Pause ]

00:07:45.816 --> 00:07:47.516 A:middle
Now, if you see your
app using CPU,

00:07:47.576 --> 00:07:49.146 A:middle
you probably want to know why.

00:07:49.146 --> 00:07:54.186 A:middle
And this is where Instruments
Time Profiler comes in handy.

00:07:54.666 --> 00:07:55.976 A:middle
A lot of you are
probably familiar

00:07:55.976 --> 00:07:58.856 A:middle
with Instruments
having used it hopefully

00:07:58.856 --> 00:08:00.766 A:middle
to diagnose performance
problems.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:01.046 --> 00:08:03.316 A:middle
If you haven't used
Time Profiler,

00:08:03.316 --> 00:08:08.266 A:middle
what it does is it takes a
really high frequency sample

00:08:08.406 --> 00:08:08.966 A:middle
of your app.

00:08:08.966 --> 00:08:12.156 A:middle
So it's really quickly
seeing exactly

00:08:12.156 --> 00:08:14.866 A:middle
where it's executing all
the different call stacks,

00:08:15.186 --> 00:08:17.526 A:middle
and then it aggregates
all the call stacks

00:08:17.526 --> 00:08:21.716 A:middle
into a Call Tree view that
will show you what percent

00:08:21.716 --> 00:08:24.196 A:middle
of the time is spent where,
under which functions,

00:08:24.506 --> 00:08:26.346 A:middle
which libraries, which
frameworks, et cetera.

00:08:26.446 --> 00:08:27.526 A:middle
I'll show you a little
more on how

00:08:27.526 --> 00:08:29.876 A:middle
to use Instruments
a little later.

00:08:33.635 --> 00:08:35.756 A:middle
One thing that's
new in Mavericks is

00:08:35.756 --> 00:08:39.155 A:middle
that the system will also
automatically monitor your

00:08:39.155 --> 00:08:40.166 A:middle
CPU usage.

00:08:40.405 --> 00:08:43.796 A:middle
So you may see a line in the
console that looks like this.

00:08:44.356 --> 00:08:47.606 A:middle
You've got some app
caught burning CPU.

00:08:47.606 --> 00:08:50.716 A:middle
It's used a lot of CPU
over this much time.

00:08:51.846 --> 00:08:53.076 A:middle
And when this happens,

00:08:54.276 --> 00:08:56.686 A:middle
the system will automatically
drop a log

00:08:56.686 --> 00:08:59.786 A:middle
into
/Library/Logs/DiagnosticReports

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.196 --> 00:09:03.766 A:middle
with the CPU resource.spin
extension.

00:09:03.766 --> 00:09:10.816 A:middle
And what this log contains is a
historical sample of your app,

00:09:11.286 --> 00:09:13.266 A:middle
where it's been using CPU time.

00:09:13.776 --> 00:09:15.466 A:middle
And this is automatically
done for you

00:09:15.776 --> 00:09:17.446 A:middle
without having to
set up anything.

00:09:17.996 --> 00:09:20.916 A:middle
And so this is basically
the same thing

00:09:20.916 --> 00:09:23.236 A:middle
that Instrument is
getting, just in text form.

00:09:24.906 --> 00:09:29.026 A:middle
Now, it's important to
remember that the threshold

00:09:29.026 --> 00:09:31.256 A:middle
for triggering these
is relatively high.

00:09:31.256 --> 00:09:33.426 A:middle
Here it says 50 percent CPU.

00:09:33.426 --> 00:09:38.306 A:middle
So, you should really treat
these as a real red flag

00:09:38.546 --> 00:09:40.646 A:middle
when you see them,
if you see them,

00:09:41.996 --> 00:09:46.446 A:middle
because they can cause a
significant battery life

00:09:46.506 --> 00:09:49.016 A:middle
decrease for your users.

00:09:49.016 --> 00:09:54.176 A:middle
So go through and make sure that
these reports represent work

00:09:54.176 --> 00:09:59.236 A:middle
that you know the user
is aware of and ask for.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.696 --> 00:10:04.606 A:middle
Another way to diagnose
CPU time is to look

00:10:04.606 --> 00:10:06.946 A:middle
for what I call secondary
indicators.

00:10:07.236 --> 00:10:08.776 A:middle
So what do I mean by this?

00:10:08.776 --> 00:10:10.666 A:middle
Well, we talked about
the three ways

00:10:10.726 --> 00:10:13.896 A:middle
that apps can use
the-- or use energy.

00:10:14.476 --> 00:10:16.846 A:middle
We talked about CPU.

00:10:17.736 --> 00:10:21.796 A:middle
But of course using
the I/O system,

00:10:22.346 --> 00:10:25.816 A:middle
using the graphic system
also involve using the CPU

00:10:25.816 --> 00:10:26.346 A:middle
to do that.

00:10:27.156 --> 00:10:30.206 A:middle
So looking at where
you use the I/O system

00:10:30.206 --> 00:10:34.146 A:middle
or the graphic system can
give you a good pointer as to

00:10:34.146 --> 00:10:35.836 A:middle
where you're using CPU time.

00:10:36.276 --> 00:10:37.366 A:middle
So let's look at I/O.

00:10:37.946 --> 00:10:43.516 A:middle
This little tool called
fs usage that has shipped

00:10:43.516 --> 00:10:49.526 A:middle
on OS X forever, and what it
does is it tells you all the

00:10:49.666 --> 00:10:56.626 A:middle
places where your app is
interacting with the file system

00:10:56.626 --> 00:10:58.416 A:middle
and network layers
of the Kernel.

00:10:59.266 --> 00:11:02.966 A:middle
So these are things like, you
know, open/closed system calls,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:03.666 --> 00:11:08.216 A:middle
read/writes from the network,
disk I/Os, things like that.

00:11:08.366 --> 00:11:10.166 A:middle
So let's run it on an app.

00:11:11.416 --> 00:11:17.976 A:middle
Here you can see my app is
making a lot of calls to stat

00:11:18.156 --> 00:11:23.736 A:middle
for a file called myicon.png.

00:11:23.966 --> 00:11:27.486 A:middle
It's also actually writing to
a file called downloads.plist.

00:11:27.486 --> 00:11:29.736 A:middle
So, there's no magic
bullet here,

00:11:29.736 --> 00:11:33.116 A:middle
but this can often give
you a pretty good sense

00:11:33.216 --> 00:11:37.536 A:middle
of where you're using
CPU, at least what kind

00:11:37.536 --> 00:11:39.056 A:middle
of processing you're doing.

00:11:39.676 --> 00:11:45.106 A:middle
If you're interested in fs
usage or performance in general,

00:11:45.166 --> 00:11:48.296 A:middle
there was a great
session earlier this week,

00:11:48.296 --> 00:11:51.086 A:middle
Building Efficient OS X
Apps that talks a lot more

00:11:51.086 --> 00:11:53.186 A:middle
about fs usage, talks a lot more

00:11:53.186 --> 00:11:56.326 A:middle
about being a good
system citizen

00:11:56.616 --> 00:11:58.896 A:middle
with respect to system
resources.

00:11:59.366 --> 00:12:01.976 A:middle
So I highly recommend you
go back, give that a watch

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:02.076 --> 00:12:02.996 A:middle
when you get a chance.

00:12:03.556 --> 00:12:06.756 A:middle
OK, so that was I/O.

00:12:06.756 --> 00:12:07.946 A:middle
Let's talk about graphics.

00:12:08.646 --> 00:12:14.476 A:middle
So for graphics we have a
little app called QuartzDebug,

00:12:14.766 --> 00:12:17.016 A:middle
and this ships in our
developer toolkit.

00:12:18.166 --> 00:12:19.626 A:middle
And if you launch this app

00:12:20.886 --> 00:12:24.226 A:middle
and check the little
Flash screen updates box,

00:12:24.786 --> 00:12:29.806 A:middle
what this will do is it will
cause all draws to the screen

00:12:29.996 --> 00:12:31.566 A:middle
to be flashed in yellow.

00:12:31.566 --> 00:12:35.656 A:middle
So I check this box, put
up the OS X shutdown panel,

00:12:36.256 --> 00:12:38.356 A:middle
and the Shutdown button
was covered in yellow.

00:12:39.266 --> 00:12:42.966 A:middle
And this makes sense because
the button is pulsing.

00:12:42.966 --> 00:12:43.996 A:middle
I expect it to be drawing.

00:12:44.966 --> 00:12:48.196 A:middle
But if you have a UI
that looks pretty static,

00:12:48.466 --> 00:12:51.486 A:middle
you might be surprised to
see that, in some cases,

00:12:51.696 --> 00:12:53.516 A:middle
it's actually drawing.

00:12:53.516 --> 00:12:56.586 A:middle
And of course drawing
uses energy just

00:12:56.586 --> 00:12:59.036 A:middle
because it's using the
graphic system, it uses energy

00:12:59.036 --> 00:13:00.426 A:middle
because it's using the CPU.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:01.136 --> 00:13:04.956 A:middle
And in a lot of cases, this
drawing could be invisible

00:13:04.956 --> 00:13:06.586 A:middle
or almost invisible
to the naked eye.

00:13:06.586 --> 00:13:09.456 A:middle
So what QuartzDebug
does is allows you

00:13:09.456 --> 00:13:11.656 A:middle
to see it a lot more clearly.

00:13:14.676 --> 00:13:18.886 A:middle
QuartzDebug is available in our
Graphics Tools for Xcode package

00:13:18.976 --> 00:13:22.586 A:middle
on developer.apple.com.

00:13:22.776 --> 00:13:24.376 A:middle
So, CPU usage.

00:13:25.276 --> 00:13:30.366 A:middle
Remember that a little bit of
CPU usage, even like 1 percent,

00:13:30.756 --> 00:13:35.836 A:middle
causes a significant power
draw increase from the CPU.

00:13:36.896 --> 00:13:41.136 A:middle
So, it's important to make sure
your app is absolutely idle

00:13:41.886 --> 00:13:42.956 A:middle
when it's not in use.

00:13:43.226 --> 00:13:45.456 A:middle
Go through, watch it
with Activity Monitor,

00:13:45.816 --> 00:13:47.746 A:middle
make sure it's idle
when it should be.

00:13:48.336 --> 00:13:53.416 A:middle
All right, let's
talk about timers.

00:13:55.006 --> 00:13:58.596 A:middle
I'm sure you use timers in
your app in a lot of places.

00:13:59.006 --> 00:14:02.466 A:middle
Timers are used to schedule
periodic events or future events

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:02.466 --> 00:14:06.306 A:middle
and drive animations,
you use timers.

00:14:06.306 --> 00:14:10.396 A:middle
So why are timers interesting
from an energy perspective?

00:14:11.306 --> 00:14:14.476 A:middle
Well, timers keep
your app out of idle.

00:14:15.686 --> 00:14:19.106 A:middle
When you have a timer and it
wakes up and it runs some code,

00:14:19.806 --> 00:14:21.666 A:middle
that's keeping your
app out of idle.

00:14:21.666 --> 00:14:23.356 A:middle
That's bringing the
system out of idle.

00:14:24.476 --> 00:14:26.696 A:middle
And perhaps more importantly,

00:14:27.176 --> 00:14:30.846 A:middle
timers can have an
outsize effect on energy.

00:14:31.806 --> 00:14:33.656 A:middle
So what do I mean by this?

00:14:34.866 --> 00:14:38.086 A:middle
Imagine you have an app, and
it's got some repeating timer,

00:14:41.896 --> 00:14:46.356 A:middle
here are all the places
where it's firing.

00:14:46.506 --> 00:14:49.986 A:middle
Now, every time one
of these timers fires,

00:14:50.306 --> 00:14:55.986 A:middle
there's a little bit of overhead
involved in bringing the CPU

00:14:55.986 --> 00:15:00.626 A:middle
out of idle, bringing
your app out of idle,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.626 --> 00:15:03.186 A:middle
getting your app
context switched to,

00:15:03.186 --> 00:15:04.726 A:middle
getting your app
back to userland.

00:15:04.866 --> 00:15:08.926 A:middle
So, there's a little extra wake
up cost associated with that.

00:15:09.236 --> 00:15:14.186 A:middle
But it gets worse
because we need more

00:15:14.186 --> 00:15:17.066 A:middle
than just the CPU
to run your timer.

00:15:17.066 --> 00:15:18.906 A:middle
We need all the supporting
chipset.

00:15:18.906 --> 00:15:20.506 A:middle
So we need the memory
controller,

00:15:20.606 --> 00:15:22.986 A:middle
we need the bus controller
and all that.

00:15:22.986 --> 00:15:24.346 A:middle
And we really try

00:15:24.346 --> 00:15:26.896 A:middle
and aggressively power
manage these chips.

00:15:27.486 --> 00:15:31.326 A:middle
But they take a little
longer to go back into idle

00:15:31.326 --> 00:15:32.346 A:middle
and to come out of idle.

00:15:32.816 --> 00:15:35.306 A:middle
So if you have really
frequent timers like this,

00:15:35.906 --> 00:15:38.556 A:middle
the system might decide,
"Well, I don't really have time

00:15:38.556 --> 00:15:40.626 A:middle
to put those chips
back into idle.

00:15:40.776 --> 00:15:42.066 A:middle
I'm just going to
leave them on."

00:15:42.066 --> 00:15:45.936 A:middle
So you incur all of this
energy overhead, all this red,

00:15:46.286 --> 00:15:49.846 A:middle
even if this timer is just
doing a little bit of work.

00:15:52.576 --> 00:15:54.916 A:middle
By the way, what do
I mean by timers?

00:15:54.916 --> 00:16:01.426 A:middle
Of course we have explicit timer
APIs in Grand Central Dispatch,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:01.646 --> 00:16:03.706 A:middle
Core Foundation -- foundation.

00:16:06.436 --> 00:16:09.826 A:middle
There are low level APIs
like sleep and usleep

00:16:11.066 --> 00:16:12.796 A:middle
that are implemented
with timers,

00:16:12.936 --> 00:16:15.126 A:middle
also things like
pthread cond timedwait

00:16:15.126 --> 00:16:17.656 A:middle
if you're using pthreads
or dispatch semaphore wait,

00:16:18.046 --> 00:16:19.746 A:middle
if you're using libdispatch.

00:16:21.026 --> 00:16:25.046 A:middle
Even a lot of low level APIs
that take timeouts like select

00:16:25.046 --> 00:16:27.636 A:middle
and poll, even MockMessage
takes a timeout.

00:16:28.156 --> 00:16:32.106 A:middle
So these can all, if those
timeouts fire, cause timers.

00:16:32.636 --> 00:16:36.006 A:middle
And there are a lot
of high level APIs

00:16:36.006 --> 00:16:37.026 A:middle
that are built on timers.

00:16:37.026 --> 00:16:40.866 A:middle
So if you use dispatch after
or NSObject performSelector:

00:16:40.866 --> 00:16:42.326 A:middle
withObject:afterDelay.

00:16:42.896 --> 00:16:45.296 A:middle
Even things like an
NSProgressIndicator is

00:16:45.296 --> 00:16:46.326 A:middle
implemented with timers

00:16:46.356 --> 00:16:49.276 A:middle
to advance the little spinny
wheel or the barber pole.

00:16:50.066 --> 00:16:53.846 A:middle
Or if you use CVDisplayLink,
that is a timer as well.

00:16:55.616 --> 00:17:01.206 A:middle
In Mavericks, it's a lot
easier to see the timer usage

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:01.206 --> 00:17:03.906 A:middle
of your app if you go back
to Activity Monitor and look

00:17:03.906 --> 00:17:05.376 A:middle
at the Idle Wakeups column.

00:17:05.715 --> 00:17:08.826 A:middle
This will show you the
number of times a timer fired

00:17:08.826 --> 00:17:11.336 A:middle
in your app in the last second.

00:17:11.796 --> 00:17:14.996 A:middle
So in this case, this app fired
10 timers in the last second.

00:17:16.435 --> 00:17:19.136 A:middle
There's also a new column
called Energy Impact,

00:17:19.656 --> 00:17:21.826 A:middle
and this is a measure

00:17:21.826 --> 00:17:25.376 A:middle
of the overall energy
impact of your app.

00:17:25.376 --> 00:17:28.956 A:middle
So that includes CPU
usage, timer wakeups

00:17:28.956 --> 00:17:31.586 A:middle
and all the overhead
associated with that,

00:17:31.666 --> 00:17:32.986 A:middle
and some other factors too.

00:17:33.566 --> 00:17:35.966 A:middle
So this is a good way
to get a quick view

00:17:36.106 --> 00:17:38.436 A:middle
of whether you're using
energy on the system.

00:17:38.546 --> 00:17:40.426 A:middle
If you're using zero,
that's great.

00:17:40.426 --> 00:17:43.806 A:middle
If you're using nonzero,
well, you want to know why.

00:17:44.396 --> 00:17:50.196 A:middle
You can get the same stuff
right in Xcode and Xcode 5.

00:17:50.586 --> 00:17:52.736 A:middle
Go back to the Debug
Navigator and look

00:17:52.916 --> 00:17:55.926 A:middle
at the Energy Impact Gauge.

00:17:56.546 --> 00:18:00.226 A:middle
This will give you the number
of wakes over the last second

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:00.876 --> 00:18:06.246 A:middle
and a readout of your
energy utilization.

00:18:10.696 --> 00:18:14.066 A:middle
So once you see that you're
incurring a lot of wakeups,

00:18:14.496 --> 00:18:16.296 A:middle
you probably want to know why.

00:18:16.296 --> 00:18:19.756 A:middle
And there's a new tool in
Mavericks called Timer Fires

00:18:19.836 --> 00:18:21.946 A:middle
that will help you
figure this out.

00:18:21.946 --> 00:18:25.996 A:middle
If you just run it, give it the
process ID you're interested in,

00:18:26.236 --> 00:18:29.196 A:middle
and -s to enable stack traces.

00:18:30.116 --> 00:18:33.406 A:middle
What this will do is it
will log all the places

00:18:33.536 --> 00:18:36.256 A:middle
where your app has
woken up due to a timer.

00:18:36.906 --> 00:18:39.366 A:middle
So let's look at this.

00:18:39.366 --> 00:18:45.496 A:middle
Here it looks like my
app has a 2 hertz timer.

00:18:46.386 --> 00:18:49.306 A:middle
That's a CF timer
that's executing routine

00:18:49.306 --> 00:18:51.676 A:middle
in its app delegate
called timer fired.

00:18:52.256 --> 00:18:58.036 A:middle
And here it looks like we've
got a libdispatch timer,

00:18:58.156 --> 00:18:59.746 A:middle
a Grand Central Dispatch timer

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.156 --> 00:19:02.686 A:middle
that is executing a routine
called updateWidgets.

00:19:03.206 --> 00:19:08.116 A:middle
And here's where the app
actually just call usleep.

00:19:08.576 --> 00:19:11.886 A:middle
So you can see the full stack
trace of where it called usleep.

00:19:15.476 --> 00:19:17.956 A:middle
All right, so let's
talk about some ways

00:19:18.226 --> 00:19:19.966 A:middle
that you don't want
to be using timers.

00:19:20.656 --> 00:19:26.576 A:middle
Here's a pretty naive example,
but it's one that we have seen.

00:19:27.496 --> 00:19:30.726 A:middle
Say you've got a thread that's
doing some long-running work

00:19:30.726 --> 00:19:31.966 A:middle
like waiting on the network.

00:19:33.226 --> 00:19:34.586 A:middle
And once it's done it's going

00:19:34.586 --> 00:19:36.926 A:middle
to set a global Boolean
to say "I'm done."

00:19:37.156 --> 00:19:41.036 A:middle
And then you've got a second
thread that wants to know

00:19:41.036 --> 00:19:45.166 A:middle
when that work is done and
then run a completion block

00:19:45.166 --> 00:19:46.166 A:middle
or a completion handler.

00:19:47.286 --> 00:19:49.746 A:middle
And the way it's going to do
that right now is it's going

00:19:49.746 --> 00:19:55.226 A:middle
to say, "OK, I'll
check 10 times a second

00:19:55.266 --> 00:19:57.996 A:middle
to see whether the work is
done," and a little loop there.

00:19:58.066 --> 00:20:01.326 A:middle
"And then once it's done, I'll
just run the completion block."

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:01.876 --> 00:20:04.776 A:middle
Well, first of all, this doesn't
work for several reasons.

00:20:04.826 --> 00:20:09.066 A:middle
But the reason it's bad for
energy is that most of the time,

00:20:09.396 --> 00:20:11.236 A:middle
this timer is going to wake up.

00:20:11.236 --> 00:20:12.706 A:middle
It's going to check
whether the work is done,

00:20:13.126 --> 00:20:14.336 A:middle
and the work is not
going to be done.

00:20:14.336 --> 00:20:15.526 A:middle
And so it's going
to go back to sleep.

00:20:15.696 --> 00:20:16.876 A:middle
Come back up and say,
"Is the work done?

00:20:16.876 --> 00:20:17.816 A:middle
No. Is the work done?

00:20:17.816 --> 00:20:18.646 A:middle
No. Is the work done?

00:20:18.646 --> 00:20:18.886 A:middle
No."

00:20:19.056 --> 00:20:23.136 A:middle
So, every time you wake
up, you're incurring all

00:20:23.136 --> 00:20:25.066 A:middle
of that red energy
we saw before.

00:20:25.646 --> 00:20:27.306 A:middle
So this is no good.

00:20:28.706 --> 00:20:32.846 A:middle
Instead, in this case, in
this kind of case you want

00:20:32.846 --> 00:20:35.496 A:middle
to use an explicit
synchronization method.

00:20:36.206 --> 00:20:38.906 A:middle
For most of you the best option
is Grand Central Dispatch,

00:20:39.216 --> 00:20:41.846 A:middle
so you can use a serial
dispatch queue or a semaphore.

00:20:42.906 --> 00:20:45.206 A:middle
If you're using pthreads
there are condition variables

00:20:45.206 --> 00:20:46.216 A:middle
that will do this for you.

00:20:46.216 --> 00:20:51.686 A:middle
So in this kind of case
what we'll do is I'll put

00:20:51.686 --> 00:20:54.136 A:middle
that long-running work
on to a serial queue,

00:20:54.136 --> 00:20:56.786 A:middle
and then I'll make sure I
put the completion block

00:20:56.786 --> 00:20:58.236 A:middle
on to the queue afterwards.

00:20:58.676 --> 00:21:01.566 A:middle
And then the completion block
will just automatically run

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:01.896 --> 00:21:04.546 A:middle
when the work is done, no
need to wake up and check.

00:21:05.286 --> 00:21:08.046 A:middle
Grand Central Dispatch
will just handle it for me.

00:21:10.436 --> 00:21:12.026 A:middle
Here's another example.

00:21:12.786 --> 00:21:20.756 A:middle
Here we've got a 2 hertz timer,
an NSTimer, that is trying

00:21:20.756 --> 00:21:23.036 A:middle
to find out whether
a file has changed.

00:21:23.426 --> 00:21:26.746 A:middle
So it's waking up saying
"Did this file change?

00:21:27.176 --> 00:21:28.626 A:middle
No. Did this file change?

00:21:28.906 --> 00:21:30.176 A:middle
No. Did this file change?

00:21:30.296 --> 00:21:35.476 A:middle
No." And the common case is that
the file is not going to change.

00:21:35.536 --> 00:21:37.786 A:middle
The user is not changing
their files very much.

00:21:39.416 --> 00:21:42.336 A:middle
So this is really
inefficient obviously

00:21:42.336 --> 00:21:43.896 A:middle
because we're incurring all

00:21:43.896 --> 00:21:46.186 A:middle
that wakeup overhear every
time we have to wake up.

00:21:46.696 --> 00:21:48.906 A:middle
In this kind of case, you want

00:21:49.356 --> 00:21:51.916 A:middle
to consider using an
explicit event stream.

00:21:51.916 --> 00:21:54.636 A:middle
And there are tons of
them on OS X and iOS.

00:21:55.496 --> 00:21:57.126 A:middle
In this kind of case,
I'm interested

00:21:57.126 --> 00:21:59.566 A:middle
in the File System Event
so I can use something

00:21:59.566 --> 00:22:01.256 A:middle
like DISPATCH SOURCE TYPE VNODE

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:02.306 --> 00:22:05.276 A:middle
for a small scale
particular file update.

00:22:05.626 --> 00:22:09.216 A:middle
If you're interested in multiple
directories you can use the

00:22:09.216 --> 00:22:11.916 A:middle
FSEvents framework
for file system-wide

00:22:11.916 --> 00:22:13.876 A:middle
or directory-wide events.

00:22:15.476 --> 00:22:18.626 A:middle
If you are interested in
events from other processes,

00:22:18.746 --> 00:22:19.886 A:middle
of course there's XPC.

00:22:19.916 --> 00:22:23.776 A:middle
Or if you want to use a
distributed notification,

00:22:24.476 --> 00:22:25.926 A:middle
there are distributed
notifications

00:22:25.926 --> 00:22:28.976 A:middle
at the foundation level and its
distributed notification center,

00:22:28.976 --> 00:22:31.376 A:middle
as well as BSD notifications.

00:22:31.946 --> 00:22:37.276 A:middle
If you're interested in device
notifications, there are a lot

00:22:37.276 --> 00:22:38.966 A:middle
of different ways to do that.

00:22:38.966 --> 00:22:40.556 A:middle
For example if you
are interested

00:22:40.556 --> 00:22:44.416 A:middle
in when a mass storage volume
is attached or removed,

00:22:44.646 --> 00:22:46.626 A:middle
there are disk arbitration
notifications.

00:22:46.996 --> 00:22:50.186 A:middle
I/O Kit publishes
notifications on when certain --

00:22:50.236 --> 00:22:52.406 A:middle
other types of devices
are attached.

00:22:52.956 --> 00:22:55.286 A:middle
And if you're interested
in events from the network,

00:22:55.616 --> 00:22:57.856 A:middle
of course there's Apple
Push Notifications,

00:22:58.166 --> 00:22:59.456 A:middle
there's also Bonjour,

00:22:59.626 --> 00:23:02.586 A:middle
and network reachability
notification, so you don't have

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:02.646 --> 00:23:04.406 A:middle
to wake up and say,
"Can I reach the server?

00:23:04.546 --> 00:23:07.826 A:middle
No. Can I reach the server?

00:23:08.016 --> 00:23:12.446 A:middle
No." So in this case, I
will replace the timer

00:23:12.506 --> 00:23:13.696 A:middle
with a dispatch source.

00:23:14.846 --> 00:23:16.686 A:middle
I'll give it DISPATCH
SOURCE TYPE VNODE

00:23:16.686 --> 00:23:18.536 A:middle
and the file descriptor
I'm interested in.

00:23:19.116 --> 00:23:25.206 A:middle
And then when the event fires,
I'll just say, "OK, go ahead

00:23:25.206 --> 00:23:25.986 A:middle
and check for the file.

00:23:25.986 --> 00:23:27.716 A:middle
The system told me
that the file changed.

00:23:27.906 --> 00:23:29.966 A:middle
I'll go ahead and
run my handler."

00:23:34.836 --> 00:23:36.646 A:middle
OK, here's another common case.

00:23:37.296 --> 00:23:42.526 A:middle
This is a basic run loop type
construct where we're waiting

00:23:42.526 --> 00:23:45.966 A:middle
for an event, and we're doing
that by waiting on a semaphore

00:23:45.966 --> 00:23:49.506 A:middle
in this case, and then we're --
when we get an event we'll see

00:23:49.506 --> 00:23:50.806 A:middle
if we have work to do.

00:23:51.306 --> 00:23:55.916 A:middle
The problem here is
I've specified a timeout

00:23:56.276 --> 00:23:57.526 A:middle
to dispatch semaphore wait,

00:23:58.116 --> 00:24:00.906 A:middle
but I'm not really
doing anything special

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:01.206 --> 00:24:03.316 A:middle
if dispatch semaphore
wait times out.

00:24:04.696 --> 00:24:09.106 A:middle
So this is a common mistake
because dispatch semaphore wait,

00:24:09.106 --> 00:24:12.116 A:middle
and a lot of APIs like it,
take a timeout parameter.

00:24:12.336 --> 00:24:13.826 A:middle
So a lot of people say, "Well,

00:24:13.826 --> 00:24:15.966 A:middle
I better specify
a timeout anyway."

00:24:17.376 --> 00:24:21.686 A:middle
Actually in most cases you
can specify a special argument

00:24:21.686 --> 00:24:24.606 A:middle
that says "No, just go
ahead and block forever.

00:24:24.606 --> 00:24:26.206 A:middle
Don't make this into
a timer at all.

00:24:26.406 --> 00:24:30.326 A:middle
Just block until I get an event,
or indefinitely otherwise."

00:24:31.676 --> 00:24:34.416 A:middle
And if you do specify a timeout,

00:24:34.836 --> 00:24:38.016 A:middle
make sure it represents a
meaningful state change to you,

00:24:38.016 --> 00:24:39.146 A:middle
something that you're
going to check

00:24:39.246 --> 00:24:42.026 A:middle
for like an error condition
or a timeout, you know,

00:24:42.026 --> 00:24:43.216 A:middle
like a network timeout.

00:24:47.976 --> 00:24:49.356 A:middle
Here's another case.

00:24:49.356 --> 00:24:51.956 A:middle
You probably know a
lot about memory leaks.

00:24:52.566 --> 00:24:56.506 A:middle
But you're going to
have energy leaks too.

00:24:56.626 --> 00:24:58.346 A:middle
So this is a case where I've set

00:24:58.346 --> 00:25:00.896 A:middle
up a recurring timer
to do some work.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:01.946 --> 00:25:03.686 A:middle
And it's doing some
valuable work for me,

00:25:04.276 --> 00:25:06.866 A:middle
but then I don't
need it anymore,

00:25:06.866 --> 00:25:09.226 A:middle
but I don't invalidate it.

00:25:09.226 --> 00:25:12.196 A:middle
And so what's going to happen
is for the rest of the lifetime

00:25:12.196 --> 00:25:15.096 A:middle
of my app, I'm going to have
this timer that's waking up,

00:25:15.766 --> 00:25:18.556 A:middle
probably doing no work,
using lots of energy,

00:25:18.556 --> 00:25:19.976 A:middle
hurting the user's battery life.

00:25:20.986 --> 00:25:23.566 A:middle
This is no good.

00:25:23.776 --> 00:25:25.496 A:middle
So go through, make sure

00:25:25.496 --> 00:25:29.126 A:middle
that all the repeating timers
you have are invalidated

00:25:29.126 --> 00:25:36.166 A:middle
or cancelled correctly when
you no longer need them.

00:25:36.356 --> 00:25:40.126 A:middle
Finally, you really want
to specify timer tolerance.

00:25:40.126 --> 00:25:42.566 A:middle
You may have heard a little
bit about tolerance this week.

00:25:43.746 --> 00:25:46.466 A:middle
Tolerance is a hint
to the system

00:25:46.586 --> 00:25:49.686 A:middle
as to how much it can
batch work together.

00:25:51.036 --> 00:25:54.776 A:middle
And this is good because the
more we batch work together,

00:25:55.856 --> 00:25:58.216 A:middle
the less wakeup overhead
we have,

00:25:58.216 --> 00:26:02.546 A:middle
and the more the system is
idle in its low power state.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:03.086 --> 00:26:08.426 A:middle
So it's really easy to specify
a tolerance for all your timers

00:26:08.426 --> 00:26:10.846 A:middle
if you have dispatch timers.

00:26:11.126 --> 00:26:14.766 A:middle
It's just the final parameter
to dispatch source set timer.

00:26:16.016 --> 00:26:18.056 A:middle
This is in nanoseconds.

00:26:18.676 --> 00:26:24.686 A:middle
If you have CFRunLoop timers,
there is new API in Mavericks,

00:26:24.936 --> 00:26:29.616 A:middle
CFRunLoopTimerSetTolerance, and
that takes a value in seconds.

00:26:30.196 --> 00:26:35.096 A:middle
And similarly for NSTimers.

00:26:35.696 --> 00:26:39.756 A:middle
OK, I want to show
you a quick demo now

00:26:40.316 --> 00:26:45.526 A:middle
on how this all works together.

00:26:45.526 --> 00:26:48.956 A:middle
So, I'm running Mavericks
here and Xcode 5,

00:26:48.956 --> 00:26:52.816 A:middle
and I've got this little
app called Stock Watcher

00:26:53.246 --> 00:26:53.936 A:middle
that I'm working on.

00:26:54.326 --> 00:26:57.876 A:middle
And it's just a little
stock ticker app.

00:26:57.876 --> 00:26:59.666 A:middle
It shows me the price and change

00:26:59.666 --> 00:27:01.776 A:middle
of all the stocks
I'm interested in.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:02.736 --> 00:27:04.966 A:middle
And look, it's even
a good energy citizen

00:27:04.966 --> 00:27:07.326 A:middle
because it suspends
its animations

00:27:08.096 --> 00:27:09.816 A:middle
when it's not in the foreground.

00:27:10.786 --> 00:27:14.286 A:middle
But I'm really interested in
the energy efficiency of my app.

00:27:14.286 --> 00:27:18.886 A:middle
So let me go to the Debug
Navigator and I'll look

00:27:18.886 --> 00:27:20.756 A:middle
at the CPU gauge first.

00:27:22.686 --> 00:27:28.986 A:middle
OK, so my app appears to be
idle, but it says it's using 2

00:27:28.986 --> 00:27:30.646 A:middle
to 3 percent CPU time.

00:27:31.166 --> 00:27:34.666 A:middle
What I really want is for
my app to be absolutely idle

00:27:35.146 --> 00:27:36.726 A:middle
when it's not doing
any work for me.

00:27:37.776 --> 00:27:41.396 A:middle
So let me just click
Profile in Instruments.

00:27:41.886 --> 00:27:45.586 A:middle
This will take me
right into Instruments

00:27:46.286 --> 00:27:48.986 A:middle
and start running
a time profiler.

00:27:49.996 --> 00:27:52.946 A:middle
So, again, what Instruments is
doing is it's taking a really

00:27:52.946 --> 00:27:57.486 A:middle
high frequency sample of my
app, seeing exactly the stacks

00:27:57.486 --> 00:28:01.836 A:middle
where it's executing, and
then it will show me those

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:01.836 --> 00:28:02.816 A:middle
in the call to review.

00:28:02.856 --> 00:28:04.216 A:middle
So I'll stop it now.

00:28:08.496 --> 00:28:12.056 A:middle
And if I just option click
on this disclosure triangle,

00:28:12.056 --> 00:28:15.286 A:middle
I can see the full
call tree hierarchy

00:28:15.346 --> 00:28:16.506 A:middle
of where it's executing.

00:28:17.216 --> 00:28:19.996 A:middle
And in this case
it looks like, OK,

00:28:19.996 --> 00:28:23.826 A:middle
it's doing a lot
of drawing work.

00:28:23.826 --> 00:28:31.566 A:middle
OK. I can also open up
the Extended Detail View,

00:28:31.896 --> 00:28:37.146 A:middle
this will also show me the
heaviest stack during the

00:28:37.146 --> 00:28:38.046 A:middle
sample period.

00:28:39.086 --> 00:28:42.836 A:middle
OK, it's doing a lot of views,
view drawing, control drawing.

00:28:43.226 --> 00:28:45.866 A:middle
OK, so I know this has
something to do with drawing.

00:28:46.216 --> 00:28:49.016 A:middle
So let me try a different
method.

00:28:49.676 --> 00:28:51.156 A:middle
I'll close out Instruments.

00:28:51.716 --> 00:29:01.086 A:middle
If I run this again, I'll turn

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:01.086 --> 00:29:04.366 A:middle
on show view drawing
here in Xcode.

00:29:04.366 --> 00:29:06.876 A:middle
And this is basically the
same thing as QuartzDebug

00:29:06.876 --> 00:29:08.236 A:middle
like we talked about before.

00:29:09.286 --> 00:29:11.726 A:middle
And what this does is
it cause all views,

00:29:11.726 --> 00:29:15.566 A:middle
right when they draw rect to
show yellow right beforehand.

00:29:15.566 --> 00:29:17.706 A:middle
And we can see almost
immediately,

00:29:17.706 --> 00:29:21.826 A:middle
it's this top S&amp;P 500 view
that's blinking out of control.

00:29:22.266 --> 00:29:24.816 A:middle
OK, so that gives us
a pretty good idea.

00:29:25.386 --> 00:29:31.396 A:middle
Let me show you one more thing.

00:29:31.606 --> 00:29:34.336 A:middle
So I'll go into terminal

00:29:34.386 --> 00:29:37.316 A:middle
and I'll run fs usage
on Stock Watcher.

00:29:39.136 --> 00:29:42.016 A:middle
OK, so immediately we
see lots of output.

00:29:42.586 --> 00:29:43.696 A:middle
What's happening here it looks

00:29:43.696 --> 00:29:47.426 A:middle
like is my app is
calling a few system calls

00:29:47.426 --> 00:29:49.606 A:middle
on this stocks.plist file.

00:29:49.606 --> 00:29:53.656 A:middle
So list xsetter,
get xsetter, lstat.

00:29:54.196 --> 00:29:57.376 A:middle
OK, so I happen to
know what this is.

00:29:57.376 --> 00:29:58.926 A:middle
This is a beta version
of my app.

00:29:58.926 --> 00:30:00.636 A:middle
It's not getting data
from the network,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.636 --> 00:30:03.546 A:middle
it's getting data
from a local plist.

00:30:04.066 --> 00:30:10.636 A:middle
So let me stop Stock
Watcher and go to there.

00:30:10.636 --> 00:30:13.096 A:middle
So I know this is in
a routine called check

00:30:13.616 --> 00:30:15.766 A:middle
for stock.plist update.

00:30:16.566 --> 00:30:19.506 A:middle
OK. I actually did some
debugging in here before,

00:30:19.506 --> 00:30:23.716 A:middle
and I noticed that even
if the file I'm interested

00:30:23.716 --> 00:30:28.646 A:middle
in didn't change, I'm still
updating the S&amp;P 500 view.

00:30:29.186 --> 00:30:33.766 A:middle
So let me just move this
into my IF statement here.

00:30:35.556 --> 00:30:39.886 A:middle
And I'll build and run.

00:30:40.006 --> 00:30:46.206 A:middle
OK. So let's go back
into the CPU column.

00:30:46.526 --> 00:30:50.026 A:middle
Great. The CPU Gauge says
I'm using 0 percent CPU.

00:30:50.026 --> 00:30:52.516 A:middle
We can even turn on
Show View Drawing.

00:30:53.276 --> 00:30:53.986 A:middle
OK, awesome.

00:30:54.346 --> 00:30:56.846 A:middle
No View Drawing.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:01.116 --> 00:31:05.586 A:middle
Great. But let's look at
the Energy Impact Gauge.

00:31:06.796 --> 00:31:09.966 A:middle
So my app is idle.

00:31:09.966 --> 00:31:13.776 A:middle
I really want my energy impact--
my energy utilization to be 0.

00:31:13.776 --> 00:31:15.606 A:middle
But right now it's low

00:31:15.606 --> 00:31:19.606 A:middle
and it also says my app is
waking up 10 times a second.

00:31:20.646 --> 00:31:29.606 A:middle
All right, so what I'll do is
let's run Timer Fires on it.

00:31:29.866 --> 00:31:33.136 A:middle
OK, so Timer Fires is telling
me that that same routine,

00:31:33.136 --> 00:31:36.036 A:middle
check for stock.plist
update is firing--

00:31:36.036 --> 00:31:39.016 A:middle
and it looks like it
ran 10 times a second.

00:31:39.846 --> 00:31:42.066 A:middle
So let's go back.

00:31:45.286 --> 00:31:48.206 A:middle
Check for stock.plist update.

00:31:48.766 --> 00:31:54.586 A:middle
OK. So this is actually
called on a timer up here.

00:31:54.586 --> 00:31:57.616 A:middle
So this is a timer--
and this is checking

00:31:57.616 --> 00:31:59.816 A:middle
to see whether the
plist file changes.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:00.286 --> 00:32:03.226 A:middle
But it's firing 10 times
a second, and of course,

00:32:03.226 --> 00:32:04.986 A:middle
we're not changing
the plist file.

00:32:04.986 --> 00:32:06.286 A:middle
So this is a waste of energy.

00:32:06.286 --> 00:32:12.836 A:middle
So I'm going to rip this timer
out and I'm going to replace it

00:32:12.836 --> 00:32:14.306 A:middle
with a dispatch source.

00:32:15.516 --> 00:32:19.466 A:middle
[ Pause ]

00:32:19.966 --> 00:32:25.026 A:middle
OK. So what this is saying
is I'll get a file descriptor

00:32:26.196 --> 00:32:27.066 A:middle
for the plist.

00:32:27.386 --> 00:32:30.986 A:middle
I'll set up a Dispatch
Source type of VNODE,

00:32:32.066 --> 00:32:34.006 A:middle
say "Fire this on
my main queue."

00:32:34.146 --> 00:32:38.006 A:middle
And when it does fire,
I'll just run check

00:32:38.006 --> 00:32:39.196 A:middle
for stock.plist update.

00:32:39.566 --> 00:32:42.496 A:middle
Great. So let's build and run.

00:32:43.516 --> 00:32:48.196 A:middle
[ Pause ]

00:32:48.696 --> 00:32:51.566 A:middle
And if go back to the
Energy Impact Gauge,

00:32:52.256 --> 00:32:58.686 A:middle
you can see my energy
utilization is 0 most

00:32:58.686 --> 00:32:59.126 A:middle
of the time.

00:32:59.126 --> 00:33:01.576 A:middle
I still have a few other
things to debug, it looks like.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:02.186 --> 00:33:05.816 A:middle
So-- but let me show
you one more thing.

00:33:06.526 --> 00:33:10.666 A:middle
So it's really important
to not just test your app

00:33:10.926 --> 00:33:14.996 A:middle
when it launches but also test
all the paths your app can go

00:33:14.996 --> 00:33:17.306 A:middle
down because your user is
going to hit those paths.

00:33:17.306 --> 00:33:19.806 A:middle
So I actually recently
noticed that, you know,

00:33:19.806 --> 00:33:23.166 A:middle
you saw that Stock Watcher
turns off its animation

00:33:23.426 --> 00:33:24.426 A:middle
when it's in the background.

00:33:25.186 --> 00:33:28.836 A:middle
If I switch away from Stock
Watcher during an animation,

00:33:29.416 --> 00:33:33.006 A:middle
the energy utilization
remains at high,

00:33:33.006 --> 00:33:37.576 A:middle
and Xcode is telling me
it has 90 wakes a second.

00:33:37.576 --> 00:33:39.036 A:middle
So this is really bad.

00:33:39.966 --> 00:33:44.726 A:middle
OK, I'll go back and do the
[inaudible] Timer Fires again.

00:33:45.336 --> 00:33:50.356 A:middle
OK, so it looks like the
timer that I'm interested

00:33:50.356 --> 00:33:55.206 A:middle
in is firing a routine called
SWT stock table view animator

00:33:55.566 --> 00:33:56.506 A:middle
animation step.

00:33:57.146 --> 00:34:05.546 A:middle
So let me go back in Xcode.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:05.706 --> 00:34:10.966 A:middle
OK, so this is the timer that
is actually moving all the stock

00:34:10.966 --> 00:34:14.946 A:middle
quotes when they animate,
and when it's over,

00:34:14.946 --> 00:34:17.136 A:middle
it's supposed to
end the animation.

00:34:17.786 --> 00:34:20.866 A:middle
Oh, OK. So what's
happening here is

00:34:22.186 --> 00:34:26.956 A:middle
if the animation is
still running then--

00:34:27.065 --> 00:34:30.406 A:middle
excuse me, if the animation is
not running, then we don't end

00:34:30.406 --> 00:34:32.076 A:middle
up invalidating that timer.

00:34:32.496 --> 00:34:34.886 A:middle
So let me just move this out.

00:34:35.516 --> 00:34:39.416 A:middle
[ Pause ]

00:34:39.916 --> 00:34:41.235 A:middle
I'll build and run.

00:34:41.926 --> 00:34:43.025 A:middle
All right, let's try again.

00:34:43.456 --> 00:34:45.326 A:middle
I'll switch away
right in the middle

00:34:45.806 --> 00:34:47.565 A:middle
of one of those animations.

00:34:48.766 --> 00:34:50.426 A:middle
Let's look at the
Energy Impact Gauge.

00:34:51.596 --> 00:34:52.106 A:middle
All right.

00:34:52.106 --> 00:34:55.226 A:middle
So, for the most part,
my energy impact is 0.

00:34:55.226 --> 00:34:57.045 A:middle
Great. This is exactly
what I want.

00:34:57.736 --> 00:35:01.546 A:middle
My app is absolutely idle
when it's not in use.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:02.936 --> 00:35:07.866 A:middle
OK, let's go back to the slides.

00:35:08.536 --> 00:35:10.226 A:middle
So timers.

00:35:11.276 --> 00:35:15.776 A:middle
Remember that timers involve
a lot of wakeup overhead.

00:35:16.026 --> 00:35:20.496 A:middle
So you want to make sure that
you don't have a high rate

00:35:20.546 --> 00:35:25.286 A:middle
of idle wakeups especially
when your app is idle,

00:35:25.286 --> 00:35:28.206 A:middle
not doing any useful works for
the user, not doing anything

00:35:28.206 --> 00:35:29.676 A:middle
that the user expects.

00:35:30.646 --> 00:35:35.176 A:middle
And if it is, use our new
tools and features in Xcode 5

00:35:35.176 --> 00:35:37.866 A:middle
and Mavericks to help debug it.

00:35:39.176 --> 00:35:39.796 A:middle
All right.

00:35:39.796 --> 00:35:41.526 A:middle
I want to talk about
one more things,

00:35:41.526 --> 00:35:43.286 A:middle
and that's background work.

00:35:43.286 --> 00:35:49.376 A:middle
So we talked a lot about
making sure your app is idle,

00:35:49.376 --> 00:35:52.926 A:middle
no CPU usage, no wakeups
when it's not in use.

00:35:52.996 --> 00:35:57.506 A:middle
But you probably have
some periodic work

00:35:57.796 --> 00:36:00.156 A:middle
that you know you have
to do every so often.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:00.916 --> 00:36:02.426 A:middle
And I want to show
you how you can do it

00:36:02.426 --> 00:36:03.906 A:middle
in an energy-efficient way.

00:36:04.546 --> 00:36:09.606 A:middle
So, one example of this
is periodic animations.

00:36:10.526 --> 00:36:14.576 A:middle
We saw that Stock Watcher
is stopping its animations

00:36:14.576 --> 00:36:16.026 A:middle
when it goes into
the background.

00:36:16.816 --> 00:36:21.396 A:middle
Animations are-- can be
relatively inexpensive,

00:36:21.396 --> 00:36:24.946 A:middle
you know, optimized drawing
routines, low frame rate.

00:36:25.196 --> 00:36:28.586 A:middle
But remember that even a
small amount of CPU usage,

00:36:29.126 --> 00:36:33.046 A:middle
like an animation, can cause a
significant power draw increase.

00:36:33.566 --> 00:36:35.416 A:middle
So-- and in a lot of cases,

00:36:36.386 --> 00:36:39.586 A:middle
these animations might not
even be visible to the user.

00:36:39.846 --> 00:36:45.126 A:middle
So what Stock Watcher was doing
was disabling its animation

00:36:45.126 --> 00:36:45.826 A:middle
in the background.

00:36:46.176 --> 00:36:48.076 A:middle
It's just doing that
by implementing the

00:36:48.076 --> 00:36:49.836 A:middle
ApplicationDidResignActive,

00:36:49.836 --> 00:36:51.596 A:middle
and the
ApplicationDidBecomeActive

00:36:51.916 --> 00:36:53.626 A:middle
methods in its app delegate.

00:36:54.816 --> 00:36:57.586 A:middle
Or if you just need
to check at runtime,

00:36:57.586 --> 00:36:59.826 A:middle
you can ask NSApp is active.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.546 --> 00:37:04.276 A:middle
But in some cases, you
might actually only want

00:37:04.276 --> 00:37:05.946 A:middle
to disable certain animations

00:37:05.946 --> 00:37:08.636 A:middle
when the window you're
looking at is occluded.

00:37:09.316 --> 00:37:11.926 A:middle
So something like that.

00:37:13.396 --> 00:37:18.076 A:middle
In that case, there's new API
in Mavericks to notify you

00:37:18.076 --> 00:37:20.536 A:middle
when an application or
window has become occluded.

00:37:21.696 --> 00:37:23.706 A:middle
If you're interested
in the application,

00:37:23.936 --> 00:37:25.766 A:middle
just implement the
applicationDid

00:37:25.766 --> 00:37:31.016 A:middle
ChangeOcclusionState
routine in your app delegate.

00:37:31.106 --> 00:37:32.826 A:middle
For Windows, just check

00:37:33.506 --> 00:37:37.426 A:middle
or implement rather
WindowDidChangeOcclusionState

00:37:37.426 --> 00:37:38.406 A:middle
in your window delegate.

00:37:39.096 --> 00:37:42.916 A:middle
If you want to see a
great example of this,

00:37:43.376 --> 00:37:45.086 A:middle
there's talk earlier this week

00:37:45.086 --> 00:37:48.276 A:middle
about App Nap called
Improving Power Efficiency

00:37:48.276 --> 00:37:49.926 A:middle
with App Nap, that
was yesterday.

00:37:50.436 --> 00:37:53.856 A:middle
Go back and watch
that in the WWDC app.

00:37:54.146 --> 00:37:56.466 A:middle
There's a great example
of how you can use these

00:37:56.916 --> 00:37:58.746 A:middle
to be a lot more
power-efficient.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:02.416 --> 00:38:06.046 A:middle
Another way you can improve
the energy efficiency

00:38:06.046 --> 00:38:09.256 A:middle
of your background work
is to batch it together.

00:38:10.036 --> 00:38:13.716 A:middle
So if you have background
work that's really spread

00:38:13.716 --> 00:38:17.906 A:middle
out over time, this
decreases the amount of time

00:38:17.906 --> 00:38:19.866 A:middle
that we can get the
machine idle.

00:38:20.376 --> 00:38:24.366 A:middle
So batching it all together
improves the idleness

00:38:24.366 --> 00:38:28.236 A:middle
of the machine, reduces
wakeup costs, and allows us

00:38:28.236 --> 00:38:30.306 A:middle
to be overall more
energy-efficient.

00:38:30.846 --> 00:38:34.256 A:middle
So here's an example
of batching.

00:38:35.336 --> 00:38:39.146 A:middle
Say I have an image cache
in my app and I want

00:38:39.146 --> 00:38:42.086 A:middle
to make sure there
weren't stale images in it.

00:38:42.136 --> 00:38:45.156 A:middle
So every time I add
an image to it,

00:38:45.776 --> 00:38:49.656 A:middle
I also set a little timer
saying "OK, in 5 seconds,

00:38:49.786 --> 00:38:53.776 A:middle
run this routine to make sure
this image is not stale anymore,

00:38:54.376 --> 00:38:55.356 A:middle
or is not stale.

00:38:56.336 --> 00:38:59.296 A:middle
And if it is then remove it."

00:38:59.526 --> 00:39:02.996 A:middle
And then in that routine I
say, "OK, is the image stale?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:03.206 --> 00:39:04.366 A:middle
If so, remove it.

00:39:04.466 --> 00:39:06.836 A:middle
If not, check again
in another 5 seconds."

00:39:07.776 --> 00:39:13.326 A:middle
Well, this is kind of bad
if I just have one image

00:39:13.326 --> 00:39:17.686 A:middle
in my cache then I'm going to
be waking up every 5 seconds,

00:39:17.686 --> 00:39:19.996 A:middle
making sure that the
image isn't stale.

00:39:20.116 --> 00:39:22.726 A:middle
If I have lots of images in my
cache, I'm going to be waking

00:39:22.726 --> 00:39:24.786 A:middle
up all the time at all sorts

00:39:24.786 --> 00:39:26.846 A:middle
of different time saying,
"Is this image stale?

00:39:26.846 --> 00:39:27.546 A:middle
Is this image stale?"

00:39:27.916 --> 00:39:30.976 A:middle
So this work can be
batched together.

00:39:31.746 --> 00:39:36.426 A:middle
So I could change this code to
say, "OK, when I cache an image,

00:39:36.426 --> 00:39:38.286 A:middle
just add it to the
list of images."

00:39:38.796 --> 00:39:42.006 A:middle
And then when I know I'm going
to have to do some other work

00:39:42.006 --> 00:39:45.206 A:middle
like handling a user
event, I can just go ahead

00:39:45.206 --> 00:39:49.876 A:middle
and kick off this cache checking
work to another dispatch queue.

00:39:49.876 --> 00:39:52.216 A:middle
That way, it doesn't interfere
with the user interaction.

00:39:52.936 --> 00:39:53.906 A:middle
Go through each of them.

00:39:54.746 --> 00:39:55.976 A:middle
Prune all the stale ones.

00:39:56.516 --> 00:40:00.026 A:middle
[ Pause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:00.526 --> 00:40:05.266 A:middle
And you may have some periodic
work that is even lower priority

00:40:05.266 --> 00:40:07.106 A:middle
that can wait even longer.

00:40:07.106 --> 00:40:08.586 A:middle
And for that, we have a new API

00:40:08.586 --> 00:40:12.066 A:middle
in Mavericks called
Centralized Task Scheduling.

00:40:13.026 --> 00:40:16.106 A:middle
And what this does is it allows
you to tell the system, "Here,

00:40:16.106 --> 00:40:19.286 A:middle
I've got this bit of work
that is really low priority,

00:40:19.286 --> 00:40:22.796 A:middle
and it's actually-- it's a low
priority that I'm OK waiting

00:40:22.796 --> 00:40:25.036 A:middle
for the user to plug
their machine back

00:40:25.036 --> 00:40:26.096 A:middle
in before I start it."

00:40:27.226 --> 00:40:30.296 A:middle
So this is stuff like
cleaning up temporary files,

00:40:30.296 --> 00:40:31.726 A:middle
maybe sinking or indexing,

00:40:31.946 --> 00:40:34.696 A:middle
checking for new
updates is a common one.

00:40:35.566 --> 00:40:38.906 A:middle
So new API in XPC that
allows you to do it,

00:40:38.906 --> 00:40:40.066 A:middle
and I'll show you
how to use it now.

00:40:41.466 --> 00:40:45.496 A:middle
So first, you just create
a new empty XPC dictionary.

00:40:47.246 --> 00:40:52.056 A:middle
You say, "OK, this is a one-time
event," so you're telling XPC,

00:40:52.106 --> 00:40:53.726 A:middle
"This doesn't have to repeat.

00:40:53.726 --> 00:40:55.156 A:middle
It's just once."

00:40:56.246 --> 00:41:00.656 A:middle
I want this to happen in
an hour, 3,600 seconds,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:00.706 --> 00:41:04.916 A:middle
but I'm OK if it doesn't start
for another 6 hours after that,

00:41:04.916 --> 00:41:07.616 A:middle
or even longer, maybe
even 24 hours.

00:41:07.616 --> 00:41:13.016 A:middle
So-- and then I tell
XPC that the priority

00:41:13.186 --> 00:41:15.176 A:middle
of this activity is maintenance.

00:41:16.006 --> 00:41:20.616 A:middle
And what this means is
"Hey, XPC, try to do this

00:41:20.616 --> 00:41:22.956 A:middle
when the user has plugged
back in their machine,

00:41:22.956 --> 00:41:26.006 A:middle
and also when they're not using
their machine so it doesn't get

00:41:26.006 --> 00:41:27.436 A:middle
in the way of responsiveness."

00:41:29.136 --> 00:41:31.766 A:middle
Then you just go ahead,
register your activity,

00:41:31.766 --> 00:41:35.286 A:middle
pass that dictionary in, give
it a label, and give it a block

00:41:35.566 --> 00:41:36.696 A:middle
with the work you want to do.

00:41:37.016 --> 00:41:39.056 A:middle
XPC will take care of the rest.

00:41:39.336 --> 00:41:42.076 A:middle
It'll run your block
on its own queue.

00:41:42.366 --> 00:41:44.906 A:middle
It'll, you know, you'll
have the work done for you

00:41:44.906 --> 00:41:48.086 A:middle
at an appropriate time,
and you won't interfere

00:41:48.086 --> 00:41:49.386 A:middle
with the user's battery life.

00:41:49.916 --> 00:41:57.196 A:middle
There's a lot more to XPC
activity, and XPC in general,

00:41:57.196 --> 00:42:00.686 A:middle
there's a session earlier this
week, Efficient Design with XPC.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:00.766 --> 00:42:04.116 A:middle
If you're interested, go ahead
and give that a watch online.

00:42:05.566 --> 00:42:09.756 A:middle
So if you only remember
one thing from today,

00:42:09.756 --> 00:42:14.176 A:middle
let it be this, that
a small amount

00:42:14.176 --> 00:42:20.076 A:middle
of CPU usage causes a large
power increase from the CPU.

00:42:20.786 --> 00:42:25.436 A:middle
So you want your apps
to achieve absolute idle

00:42:26.146 --> 00:42:27.196 A:middle
when they're not in use.

00:42:29.416 --> 00:42:33.606 A:middle
Now, I know you guys can
take this advice and go back

00:42:33.606 --> 00:42:36.766 A:middle
and make your apps as
energy-efficient as possible,

00:42:36.766 --> 00:42:40.576 A:middle
and I can't wait for that,
but I also want you guys

00:42:41.166 --> 00:42:43.746 A:middle
to integrate this into
your release process.

00:42:44.436 --> 00:42:48.926 A:middle
So test for energy efficiency
just like you would test

00:42:48.926 --> 00:42:52.666 A:middle
for performance or
reliability or correctness.

00:42:56.616 --> 00:42:59.126 A:middle
If you have any questions
about energy efficiency,

00:42:59.126 --> 00:43:01.936 A:middle
you can contact our Core
S Technologies Evangelist,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:01.936 --> 00:43:02.976 A:middle
that's Paul Denbaum.

00:43:03.706 --> 00:43:05.656 A:middle
If you have questions
about Instruments,

00:43:05.656 --> 00:43:07.406 A:middle
you can contact Dave
DeLong or look

00:43:07.406 --> 00:43:11.496 A:middle
at the Instruments User
Guide on developer.apple.com.

00:43:11.856 --> 00:43:14.696 A:middle
And of course, you
can ask questions

00:43:14.696 --> 00:43:16.536 A:middle
on the Apple developer forums.

00:43:17.686 --> 00:43:21.246 A:middle
We've had a ton of
great sessions this week

00:43:21.816 --> 00:43:27.006 A:middle
about battery life and
energy, so definitely go back

00:43:27.006 --> 00:43:30.846 A:middle
if you're interested and watch
these, especially, you know,

00:43:30.846 --> 00:43:34.386 A:middle
Maximizing Battery Life on OS
X will give you a great sort

00:43:34.386 --> 00:43:37.176 A:middle
of overview of everything
we've done and everything we'd

00:43:37.176 --> 00:43:40.116 A:middle
like you to do for energy
efficiency and battery life.

00:43:40.506 --> 00:43:46.076 A:middle
If you're interested in App
Nap and most of you should be,

00:43:46.076 --> 00:43:48.646 A:middle
look at the Improving Power
Efficiency with App Nap session.

00:43:49.336 --> 00:43:52.056 A:middle
If you write for the web,

00:43:52.056 --> 00:43:54.206 A:middle
there's a great session
yesterday

00:43:54.206 --> 00:43:56.836 A:middle
about how you can make an
energy efficient website.

00:43:57.226 --> 00:44:01.216 A:middle
Of course there was
the XPC session,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:01.216 --> 00:44:05.966 A:middle
and I highly recommend the
Building Efficient OS X session

00:44:05.966 --> 00:44:08.816 A:middle
which was on Tuesday
if you are interested

00:44:08.816 --> 00:44:11.816 A:middle
in just being a good system
citizen in general with respect

00:44:11.816 --> 00:44:13.746 A:middle
to energy performance
and everything.

00:44:14.186 --> 00:44:15.436 A:middle
Thank you so much for coming.

00:44:15.436 --> 00:44:16.466 A:middle
Enjoy the rest of the week.

00:44:16.466 --> 00:44:17.416 A:middle
Enjoy the bash.

00:44:18.006 --> 00:44:19.096 A:middle
Happy WWDC.

00:44:19.596 --> 00:44:23.590 A:middle
[Applause]

