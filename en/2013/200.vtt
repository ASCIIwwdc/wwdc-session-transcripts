WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:10.836 A:middle
[ Silence ]

00:00:11.336 --> 00:00:12.176 A:middle
&gt;&gt; Good morning.

00:00:12.676 --> 00:00:15.116 A:middle
My name is Gregory Hughes and
I'm the engineering manager

00:00:15.186 --> 00:00:16.896 A:middle
for accessibility on OS X.

00:00:16.896 --> 00:00:20.336 A:middle
I'm really excited to be able
to have the opportunity to speak

00:00:20.336 --> 00:00:21.216 A:middle
to you this morning about some

00:00:21.216 --> 00:00:24.356 A:middle
of the great new accessibility
features in OS X Mavericks.

00:00:26.226 --> 00:00:29.356 A:middle
Here at Apple, we care very
deeply about accessibility

00:00:29.616 --> 00:00:32.195 A:middle
and we work really
hard to deliver a lot

00:00:32.195 --> 00:00:33.706 A:middle
of great accessibility features.

00:00:34.166 --> 00:00:37.136 A:middle
We work on all sorts of
products, like VoiceOver

00:00:37.136 --> 00:00:40.256 A:middle
and closed captioning,
Zoom and Guided Access.

00:00:40.876 --> 00:00:43.446 A:middle
And if I were to
summarize what our does,

00:00:43.446 --> 00:00:46.856 A:middle
I would say that we solve
problems and remove barriers

00:00:46.926 --> 00:00:48.356 A:middle
for users with disabilities.

00:00:49.146 --> 00:00:51.106 A:middle
The two big problems
that we look

00:00:51.106 --> 00:00:54.816 A:middle
at everyday are how can we
deliver an outstanding operating

00:00:54.816 --> 00:00:58.146 A:middle
system that's fully usable
by all users regardless

00:00:58.146 --> 00:00:59.596 A:middle
of their abilities
or disabilities?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:00.636 --> 00:01:04.626 A:middle
The second problem we look
at is how can we provide you,

00:01:04.626 --> 00:01:07.876 A:middle
the developers, with outstanding
API and developer support

00:01:07.916 --> 00:01:11.576 A:middle
to help you do the same thing,
to help you deliver applications

00:01:11.576 --> 00:01:13.576 A:middle
that are accessible and
usable by everybody?

00:01:14.336 --> 00:01:17.226 A:middle
So to start off, I want to
talk that first problem.

00:01:17.836 --> 00:01:20.596 A:middle
What features do we deliver as
part of the operating system

00:01:20.596 --> 00:01:24.646 A:middle
to help users with disabilities,
because you're maybe aware one

00:01:24.646 --> 00:01:26.586 A:middle
of the flagship products
is called VoiceOver.

00:01:27.146 --> 00:01:28.996 A:middle
VoiceOver is a screen
reader which is a piece

00:01:28.996 --> 00:01:31.156 A:middle
of software designed
for users who are blind.

00:01:32.166 --> 00:01:34.746 A:middle
A screen reader converts all
the graphical user inter--

00:01:35.176 --> 00:01:36.916 A:middle
graphical user information--

00:01:37.246 --> 00:01:40.376 A:middle
sorry, screen reader converts
the graphical user interface

00:01:40.706 --> 00:01:43.426 A:middle
into a spoken interface so
that somebody who's blind can

00:01:43.426 --> 00:01:46.376 A:middle
navigate OS X and get
all the same information

00:01:46.376 --> 00:01:48.166 A:middle
that you would get, sighted,
looking at the screen.

00:01:48.756 --> 00:01:50.656 A:middle
VoiceOver also has
the capability

00:01:50.656 --> 00:01:51.706 A:middle
of outputting to Braille.

00:01:52.256 --> 00:01:53.896 A:middle
And now, this is
really important,

00:01:53.896 --> 00:01:56.026 A:middle
both of these features
within VoiceOver.

00:01:56.986 --> 00:01:58.806 A:middle
Because what this means
is someone who is blind

00:01:58.806 --> 00:02:00.836 A:middle
and deaf can use
all of the features

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.836 --> 00:02:03.716 A:middle
and all the functionality of
OS X to its fullest potential.

00:02:03.976 --> 00:02:06.966 A:middle
And because VoiceOver ships
with the operating system,

00:02:07.236 --> 00:02:09.716 A:middle
this means that the computer's
operable right out of the box

00:02:09.716 --> 00:02:11.006 A:middle
for this class of users.

00:02:12.456 --> 00:02:13.696 A:middle
Now, VoiceOver shipping as part

00:02:13.696 --> 00:02:17.876 A:middle
of the OS also has a
really significant impact

00:02:18.056 --> 00:02:18.946 A:middle
across the board.

00:02:20.456 --> 00:02:23.236 A:middle
Now, gone are the days where
student who's blind has to work

00:02:23.236 --> 00:02:25.176 A:middle
in a separate room, work
on a separate computer

00:02:25.906 --> 00:02:29.326 A:middle
with assistive technology,
because VoiceOver ships standard

00:02:29.326 --> 00:02:32.066 A:middle
with OS X, a blind student
can use the same computer

00:02:32.066 --> 00:02:32.966 A:middle
as everybody else.

00:02:33.256 --> 00:02:34.686 A:middle
They just need to
turn on VoiceOver.

00:02:35.046 --> 00:02:36.926 A:middle
The same is true
in the workplace.

00:02:37.306 --> 00:02:40.306 A:middle
Corporations no longer need to
buy expensive assistive pieces

00:02:40.306 --> 00:02:43.276 A:middle
of technology and colleagues
no longer have difficulty

00:02:43.276 --> 00:02:46.886 A:middle
collaborating because
VoiceOver is standard in OS X.

00:02:47.316 --> 00:02:50.066 A:middle
Furthermore, because
VoiceOver is standard in OS X,

00:02:50.296 --> 00:02:52.806 A:middle
you have a world class
screen reader built right

00:02:52.806 --> 00:02:54.666 A:middle
in to help test your
applications.

00:02:55.006 --> 00:02:57.776 A:middle
So, it's incredibly powerful
and incredibly enabling

00:02:57.916 --> 00:03:00.336 A:middle
for both users with
disabilities and developers

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.336 --> 00:03:03.166 A:middle
who are developing to help
these users with disabilities.

00:03:03.766 --> 00:03:07.086 A:middle
So that's a brief
introduction about VoiceOver.

00:03:07.526 --> 00:03:09.436 A:middle
We also look at a lot
of other disabilities.

00:03:09.656 --> 00:03:12.546 A:middle
We work really hard across
the board to deliver closed--

00:03:12.546 --> 00:03:14.486 A:middle
an outstanding closed
captioned experience.

00:03:15.266 --> 00:03:17.446 A:middle
There are really great
closed captions in iTunes,

00:03:17.446 --> 00:03:19.896 A:middle
on iOS and even the
iPod Classic.

00:03:20.386 --> 00:03:21.986 A:middle
So whenever you open
up your media

00:03:21.986 --> 00:03:23.416 A:middle
that has closed caption content,

00:03:23.686 --> 00:03:26.386 A:middle
you can enable a closed caption
track right on the device.

00:03:26.976 --> 00:03:30.056 A:middle
But we've gone above and
beyond that in OS X Mavericks.

00:03:30.286 --> 00:03:32.816 A:middle
We're happy to introduce some
great new closed caption support

00:03:33.116 --> 00:03:34.006 A:middle
for users who are deaf.

00:03:35.126 --> 00:03:37.246 A:middle
In the Accessibility
Preference pane,

00:03:37.246 --> 00:03:38.936 A:middle
you'll now notice
the Captioning tab.

00:03:40.246 --> 00:03:41.966 A:middle
One feature that I'd like
to draw your attention

00:03:41.966 --> 00:03:43.696 A:middle
to is this checkbox
here that says

00:03:43.786 --> 00:03:46.016 A:middle
"prefer closed captioning
in SDH."

00:03:46.326 --> 00:03:48.986 A:middle
If you're unaware, SDH
stands for "Subtitles

00:03:48.986 --> 00:03:50.226 A:middle
for the deaf and
hard-of-hearing".

00:03:51.136 --> 00:03:54.486 A:middle
What this checkbox does is it
provides a single global place

00:03:54.486 --> 00:03:57.456 A:middle
for user who's deaf to
basically tell the OS

00:03:57.616 --> 00:03:59.456 A:middle
that they want captions
whenever possible.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:00.546 --> 00:04:02.656 A:middle
Now, under the hood, it's
actually pretty complex.

00:04:03.196 --> 00:04:05.006 A:middle
In every application
across the system,

00:04:05.216 --> 00:04:07.426 A:middle
whenever media is played,
we're going to look

00:04:07.426 --> 00:04:09.566 A:middle
and find the best
caption track we can.

00:04:09.896 --> 00:04:11.986 A:middle
We're going to cascade
through some complex rules,

00:04:11.986 --> 00:04:14.646 A:middle
try to find a closed captioning
track, try to find the subtitles

00:04:14.646 --> 00:04:17.245 A:middle
for deaf and hard-of-heard
track, and leaving cascade

00:04:17.245 --> 00:04:19.196 A:middle
down to just a regular
subtitle track based

00:04:19.196 --> 00:04:20.136 A:middle
on the system locale.

00:04:21.245 --> 00:04:23.036 A:middle
So, this is really,
really helpful

00:04:23.036 --> 00:04:25.206 A:middle
because now a user doesn't
have to dig through settings

00:04:25.206 --> 00:04:27.056 A:middle
in each application
to try to find how

00:04:27.056 --> 00:04:28.356 A:middle
to enable closed captioning.

00:04:28.506 --> 00:04:30.926 A:middle
They don't have to dig
through a track list of 10

00:04:30.926 --> 00:04:34.026 A:middle
to 15 text tracks to figure
out which one is best for them.

00:04:34.496 --> 00:04:36.776 A:middle
Users now just have to check
one checkbox and we're going

00:04:36.776 --> 00:04:37.926 A:middle
to do all the work
under the hood.

00:04:38.476 --> 00:04:40.676 A:middle
Users can still override
our choice if they want to.

00:04:40.996 --> 00:04:43.166 A:middle
But we found that generally
that's not necessary.

00:04:43.796 --> 00:04:46.756 A:middle
As you'll notice here too,
we have closed captions

00:04:47.016 --> 00:04:48.196 A:middle
with captioning styles.

00:04:49.086 --> 00:04:51.506 A:middle
By default, we're going to ship
the system with three styles

00:04:51.966 --> 00:04:53.606 A:middle
that our [inaudible]
team has designed

00:04:53.606 --> 00:04:54.596 A:middle
and they look really great.

00:04:54.596 --> 00:04:57.706 A:middle
We have the default
style, the classic style

00:04:58.166 --> 00:04:59.506 A:middle
and the large text style.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:00.096 --> 00:05:02.156 A:middle
So just like that checkbox,
these are going to apply

00:05:02.156 --> 00:05:05.026 A:middle
across the system to all the
applications that adopt this API

00:05:05.026 --> 00:05:06.606 A:middle
that are displaying captioning.

00:05:07.446 --> 00:05:09.226 A:middle
So now, it's really
simple to create--

00:05:09.226 --> 00:05:11.406 A:middle
to select the style
that suits your needs.

00:05:11.696 --> 00:05:13.836 A:middle
You're sitting across
the room from your iMac,

00:05:13.836 --> 00:05:15.706 A:middle
it might be easier to
use large text style.

00:05:15.786 --> 00:05:18.796 A:middle
If you're watching a movie on
an airplane on your laptop,

00:05:19.016 --> 00:05:20.476 A:middle
you might prefer default style.

00:05:21.446 --> 00:05:25.686 A:middle
And, for users with needs to
aren't suited by these styles,

00:05:26.186 --> 00:05:29.176 A:middle
with-- for users with needs
that aren't met by these styles,

00:05:29.176 --> 00:05:31.366 A:middle
rather, you can create
your own style.

00:05:31.766 --> 00:05:33.826 A:middle
And this is really
great, for example,

00:05:33.826 --> 00:05:37.046 A:middle
for a user with a vision
impairment that prefers a font

00:05:37.146 --> 00:05:38.776 A:middle
that has all capital letters.

00:05:39.136 --> 00:05:41.346 A:middle
You can also customize
the color, the opacity,

00:05:41.556 --> 00:05:44.786 A:middle
and really create a great closed
caption experience regardless

00:05:44.786 --> 00:05:45.466 A:middle
of your needs.

00:05:45.886 --> 00:05:47.796 A:middle
And as I said, this is
where it all applies

00:05:47.796 --> 00:05:51.156 A:middle
across the system whether you're
in iTunes, in QuickTime and even

00:05:51.156 --> 00:05:53.896 A:middle
on appropriately tagged
webpages, so really,

00:05:53.896 --> 00:05:56.786 A:middle
really powerful and really
enabling for these users.

00:05:57.346 --> 00:06:02.126 A:middle
Now, we're not going to have
time today to go into the nuts

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:02.126 --> 00:06:04.146 A:middle
and bolts specifically
of closed captioning.

00:06:04.456 --> 00:06:06.316 A:middle
There's a whole talk
tomorrow on preparing

00:06:06.316 --> 00:06:08.076 A:middle
and presenting media
for accessibility.

00:06:08.436 --> 00:06:10.126 A:middle
They're going to talk
a lot about the APIs

00:06:10.126 --> 00:06:12.586 A:middle
and preparing media to be
displayed in your application.

00:06:12.586 --> 00:06:14.776 A:middle
So if you have an
application that displays a lot

00:06:14.776 --> 00:06:16.626 A:middle
of video content, I
strongly encourage you

00:06:16.626 --> 00:06:19.016 A:middle
to attend this talk
tomorrow morning at 10:15.

00:06:19.496 --> 00:06:21.606 A:middle
Or otherwise, the video,

00:06:21.606 --> 00:06:23.056 A:middle
just like all videos
will be available.

00:06:23.686 --> 00:06:28.426 A:middle
So the last topic that I
want to talk about are users

00:06:28.426 --> 00:06:29.696 A:middle
with mobility impairments.

00:06:29.696 --> 00:06:32.996 A:middle
So, we've delivered a lot of
really great features for users

00:06:32.996 --> 00:06:33.976 A:middle
with mobility impairments.

00:06:34.376 --> 00:06:37.286 A:middle
We have things like Sticky Keys
and Slow Keys which help user

00:06:37.286 --> 00:06:38.486 A:middle
that have difficulty typing.

00:06:38.486 --> 00:06:41.166 A:middle
We have Mouse Keys
which help users

00:06:41.166 --> 00:06:44.916 A:middle
who don't have the physical
dexterity to use a mouse.

00:06:44.986 --> 00:06:48.726 A:middle
And in OS X Mavericks,
we're really happy

00:06:48.726 --> 00:06:51.016 A:middle
to introduce a great
new feature for users

00:06:51.016 --> 00:06:52.676 A:middle
with severely limited mobility.

00:06:53.726 --> 00:06:55.616 A:middle
This class of users
that we're talking

00:06:55.616 --> 00:06:57.906 A:middle
about quite literally
only have the capability

00:06:57.906 --> 00:06:59.586 A:middle
to operate a single button.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.186 --> 00:07:02.526 A:middle
In some cases, this maybe a
button mounted on the side

00:07:02.526 --> 00:07:04.756 A:middle
of a wheelchair that these
will activate with their head.

00:07:05.306 --> 00:07:07.126 A:middle
It could be also called
"sip-and-puff straw"

00:07:07.126 --> 00:07:09.386 A:middle
that these will activate
by blowing air into

00:07:09.386 --> 00:07:10.796 A:middle
or sucking air out of a straw.

00:07:11.546 --> 00:07:13.276 A:middle
Some buttons even
manifests themselves

00:07:13.276 --> 00:07:14.726 A:middle
as a small sensor
they might place

00:07:14.726 --> 00:07:16.916 A:middle
in their cheek that's activated
by clinching their jaw.

00:07:17.986 --> 00:07:20.166 A:middle
But in all of these cases,
the common denominator is

00:07:20.166 --> 00:07:22.236 A:middle
that the user has
some physical mobility

00:07:22.236 --> 00:07:23.436 A:middle
to operate a single button.

00:07:24.466 --> 00:07:27.456 A:middle
And we thought about this
problem and the more we thought

00:07:27.456 --> 00:07:30.886 A:middle
about it, the more we realized,
this is a really hard problem.

00:07:32.036 --> 00:07:34.406 A:middle
How do we take all
of the power of OS X

00:07:34.406 --> 00:07:36.306 A:middle
and fit it in one button?

00:07:37.056 --> 00:07:39.166 A:middle
How do you use an
entire operating system,

00:07:39.366 --> 00:07:42.466 A:middle
all the functionality and
features with just one button?

00:07:42.466 --> 00:07:45.016 A:middle
And the problem really boils

00:07:45.016 --> 00:07:47.096 A:middle
down to the standard
user interface,

00:07:47.126 --> 00:07:48.956 A:middle
the standard input
available to a user.

00:07:50.026 --> 00:07:52.596 A:middle
The average user has a
keyboard with 78 keys,

00:07:52.826 --> 00:07:55.356 A:middle
a Trackpad with two
dimensions of movement.

00:07:55.626 --> 00:07:58.726 A:middle
It also has acceleration
between one and five buttons

00:07:58.726 --> 00:08:00.136 A:middle
and scrolling capabilities.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.136 --> 00:08:03.656 A:middle
The case with the Trackpad, you
also have Multi-Touch gestures.

00:08:04.326 --> 00:08:06.796 A:middle
How do you take all of this
input and fit it in one button.

00:08:06.796 --> 00:08:09.116 A:middle
All right, it's not
an easy task.

00:08:10.306 --> 00:08:18.276 A:middle
So after much deliberation and
much kind of intense iteration

00:08:18.276 --> 00:08:21.166 A:middle
on how to fit all of the
functionality of OS X

00:08:21.166 --> 00:08:23.716 A:middle
into a single button,
we're really happy

00:08:23.716 --> 00:08:26.566 A:middle
to introduce Switch
software for OS X.

00:08:27.446 --> 00:08:30.496 A:middle
What does this software
does, it enables a user

00:08:30.496 --> 00:08:31.816 A:middle
who can only operate one button

00:08:31.816 --> 00:08:33.806 A:middle
to use all the functionality
in OS X.

00:08:34.866 --> 00:08:38.496 A:middle
When you turn on Switch Control,
it appears there's a small menu

00:08:38.496 --> 00:08:39.736 A:middle
on the top right of your screen.

00:08:40.035 --> 00:08:42.476 A:middle
This menu here that you see
is what we call the Home Menu.

00:08:43.296 --> 00:08:46.076 A:middle
And now, with only one button,
you don't have the option

00:08:46.076 --> 00:08:48.356 A:middle
to select Next, Previous,
Up or Down.

00:08:49.266 --> 00:08:50.826 A:middle
So, we're going to stand
through the interface

00:08:50.826 --> 00:08:53.226 A:middle
for the user automatically
and the user can set the rate

00:08:53.226 --> 00:08:54.806 A:middle
of scanning speed
that they desire.

00:08:55.286 --> 00:08:57.026 A:middle
So as we scan through
the interface,

00:08:57.026 --> 00:08:59.636 A:middle
you notice each button
gets highlighted on screen.

00:08:59.936 --> 00:09:01.376 A:middle
You need to press your Switch

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:01.376 --> 00:09:02.816 A:middle
when the appropriate
button is highlighted.

00:09:03.036 --> 00:09:05.396 A:middle
In this case, if we want
to open up keyboard,

00:09:05.976 --> 00:09:07.706 A:middle
we press the Switch, the
keyboard would appear.

00:09:08.856 --> 00:09:09.716 A:middle
Now, as you can imagine,

00:09:09.716 --> 00:09:11.216 A:middle
navigating through
your keyboard button

00:09:11.216 --> 00:09:13.046 A:middle
by button would take
a really long time.

00:09:13.306 --> 00:09:14.576 A:middle
So, we grouped each row.

00:09:15.326 --> 00:09:16.976 A:middle
So, we navigate down,
grouping rows.

00:09:16.976 --> 00:09:18.366 A:middle
And then each row has groups

00:09:18.366 --> 00:09:19.856 A:middle
and you press your
button to drill in.

00:09:20.186 --> 00:09:22.186 A:middle
And eventually, really
intuitively,

00:09:22.186 --> 00:09:25.166 A:middle
get to the single letter
that you want to type.

00:09:25.276 --> 00:09:26.536 A:middle
As you'll notice up at the top,

00:09:26.536 --> 00:09:28.326 A:middle
we also offer spelling
suggestions.

00:09:28.656 --> 00:09:30.846 A:middle
That gets populated with
the next most likely letter

00:09:31.106 --> 00:09:34.476 A:middle
and next mostly like word
that you're trying to type.

00:09:34.776 --> 00:09:37.226 A:middle
And we use the incredibly
powerful spelling

00:09:37.226 --> 00:09:39.456 A:middle
and spell checking engine
built right into OS X

00:09:39.506 --> 00:09:42.016 A:middle
to help provide us some great
spelling suggestions here.

00:09:43.206 --> 00:09:45.186 A:middle
So now, I'm sure you're
thinking to yourself

00:09:45.186 --> 00:09:47.236 A:middle
that there's lot more to
OS X than just a keyboard.

00:09:47.406 --> 00:09:51.196 A:middle
Now, we do have access to the
other keyboard keys, of course,

00:09:51.236 --> 00:09:54.166 A:middle
like the media keys and
even the hardware buttons

00:09:54.166 --> 00:09:55.146 A:middle
that might appear
on your monitor

00:09:55.146 --> 00:09:56.426 A:middle
like the brightness controls.

00:09:57.146 --> 00:10:00.806 A:middle
But going beyond that, we have
full functionality of the mouse.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:01.476 --> 00:10:03.636 A:middle
And this problem
alone is really hard.

00:10:03.636 --> 00:10:07.286 A:middle
How do you take a trackpad, a
mouse with that two dimensions

00:10:07.286 --> 00:10:09.906 A:middle
of movement, and boil it
down into a single button.

00:10:10.946 --> 00:10:13.426 A:middle
Well, I'm fortunate enough
to be able to work with some

00:10:13.426 --> 00:10:14.686 A:middle
of the brightest
people on the planet.

00:10:15.246 --> 00:10:17.986 A:middle
And they've came up-- they came
up with a really great solution.

00:10:18.796 --> 00:10:20.216 A:middle
When you want to move the mouse,

00:10:20.216 --> 00:10:22.086 A:middle
you'd select Move
from this menu here.

00:10:22.586 --> 00:10:24.226 A:middle
And if we take an
example of Calculator,

00:10:24.856 --> 00:10:27.096 A:middle
if we want to move the mouse
to select the Five button,

00:10:27.326 --> 00:10:30.366 A:middle
we're first going to scan the
x-axis and the user is going

00:10:30.366 --> 00:10:32.766 A:middle
to press their Switch when the
appropriate region is selected.

00:10:33.436 --> 00:10:35.466 A:middle
You then press your Switch
again to select the point

00:10:35.466 --> 00:10:38.706 A:middle
within that region and we repeat
the process on the y-axis.

00:10:39.656 --> 00:10:42.136 A:middle
So, really, really
simple and fast.

00:10:42.466 --> 00:10:43.566 A:middle
Just using one button,

00:10:43.566 --> 00:10:45.796 A:middle
we're able to move the mouse
anywhere on the screen.

00:10:46.716 --> 00:10:49.776 A:middle
So this is incredibly powerful
because now that we have access

00:10:49.776 --> 00:10:52.926 A:middle
to the keyboard and mouse,
the full functionality

00:10:52.926 --> 00:10:55.156 A:middle
of OS X is usable with
just a single switch.

00:10:55.896 --> 00:10:58.566 A:middle
At this point, you may note,
a user could do a left click,

00:10:58.566 --> 00:11:00.526 A:middle
a right click, they can
even do click and hold

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.526 --> 00:11:02.046 A:middle
to do Drag and Drop operations.

00:11:02.436 --> 00:11:05.426 A:middle
So, really powerful and all
the functionality is available

00:11:05.426 --> 00:11:08.176 A:middle
to the user right with
their single switch.

00:11:08.176 --> 00:11:12.026 A:middle
So, these are just some
of the build-in features

00:11:12.026 --> 00:11:13.236 A:middle
of Switch Control in OS X.

00:11:13.236 --> 00:11:15.866 A:middle
And we've gone above
and beyond that.

00:11:16.326 --> 00:11:19.236 A:middle
Switch Control and these
panels are also fully editable

00:11:19.236 --> 00:11:20.046 A:middle
by the user.

00:11:20.796 --> 00:11:23.906 A:middle
We have a fully functional
Panel Editor for users

00:11:23.906 --> 00:11:25.836 A:middle
to create their own
panels, to create panels

00:11:25.836 --> 00:11:26.836 A:middle
of their own shortcuts.

00:11:27.146 --> 00:11:29.716 A:middle
And this is incredibly critical
for this class of users.

00:11:30.196 --> 00:11:32.586 A:middle
As you may imagine, it can
be a little bit tedious

00:11:32.586 --> 00:11:34.916 A:middle
to navigate an entire
OS with just one button.

00:11:35.406 --> 00:11:38.086 A:middle
And just like you or I might
create keyboard shortcuts,

00:11:38.516 --> 00:11:41.496 A:middle
especially in tools like
Xcode or professional tools

00:11:41.496 --> 00:11:43.906 A:middle
like Final Cut, Switch
users need to be able

00:11:43.906 --> 00:11:46.366 A:middle
to create their own
shortcuts, their own panels.

00:11:47.266 --> 00:11:48.286 A:middle
We've seen a lot of users--

00:11:48.816 --> 00:11:50.776 A:middle
a lot Switch users
do video editing

00:11:50.776 --> 00:11:52.296 A:middle
and really enjoy video editing.

00:11:52.586 --> 00:11:55.206 A:middle
And this class of users
really like creating panels

00:11:55.206 --> 00:11:58.386 A:middle
that have commonly used
functionality come in macros,

00:11:58.596 --> 00:12:01.276 A:middle
things like insert a Crossfade,
insert a Fade to Black,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:01.376 --> 00:12:03.226 A:middle
or trim this Clip
by Five Seconds.

00:12:03.796 --> 00:12:05.496 A:middle
So with this tool,
users have the ability

00:12:05.496 --> 00:12:07.596 A:middle
to create their own panels,
create their own shortcuts,

00:12:07.786 --> 00:12:10.476 A:middle
and really design an interface
that works for their workflow.

00:12:10.476 --> 00:12:15.546 A:middle
Now, one another that I didn't
get into with Switch Control is,

00:12:15.546 --> 00:12:17.636 A:middle
just like on iOS, Switch
Control has the ability

00:12:17.636 --> 00:12:19.236 A:middle
to navigate the user interface.

00:12:19.616 --> 00:12:22.516 A:middle
And to do this, it uses
the Accessibility API just

00:12:22.516 --> 00:12:23.226 A:middle
like VoiceOver.

00:12:23.786 --> 00:12:27.086 A:middle
So now, more than ever,
it's absolutely critical

00:12:27.086 --> 00:12:29.406 A:middle
that your application implements
the Accessibility API.

00:12:30.246 --> 00:12:32.386 A:middle
And as I started out this talk,

00:12:32.386 --> 00:12:34.186 A:middle
I said that we solve
two problems,

00:12:34.186 --> 00:12:37.716 A:middle
and the first problem is
we try to deliver some

00:12:37.716 --> 00:12:40.216 A:middle
of the best features
within the operating system

00:12:40.216 --> 00:12:41.546 A:middle
for users with disabilities.

00:12:41.956 --> 00:12:44.916 A:middle
But the truth of the matter is
no matter how great our features

00:12:44.916 --> 00:12:47.556 A:middle
are, no matter how many
weekends we spend in the office,

00:12:47.556 --> 00:12:49.996 A:middle
no matter how many late
nights we spend in toiling

00:12:49.996 --> 00:12:53.126 A:middle
over these interfaces,
users don't buy our products

00:12:53.126 --> 00:12:55.636 A:middle
because of the features
we build into the OS.

00:12:56.106 --> 00:12:58.406 A:middle
Users buy our products because
of the great applications

00:12:58.406 --> 00:12:58.956 A:middle
you make.

00:12:59.716 --> 00:13:02.496 A:middle
Users buy our products because
of the extended functionality

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:02.496 --> 00:13:05.036 A:middle
and integration that
your apps provide.

00:13:05.926 --> 00:13:08.486 A:middle
So now, more than ever,
it's absolutely critical

00:13:08.486 --> 00:13:11.196 A:middle
for your applications to be
accessible and work correctly

00:13:11.196 --> 00:13:12.236 A:middle
with the Accessibility API.

00:13:13.246 --> 00:13:14.486 A:middle
To help show you
a little bit more

00:13:14.486 --> 00:13:16.846 A:middle
about making your application
accessible, I'd like to bring

00:13:16.846 --> 00:13:17.906 A:middle
up my colleague,
Patti Hoa [phonetic].

00:13:18.406 --> 00:13:23.516 A:middle
[applause]

00:13:24.016 --> 00:13:28.000 A:middle
[ Background Noise ]

00:13:28.556 --> 00:13:29.746 A:middle
&gt;&gt; Okay, my name is Patti Hoa.

00:13:29.916 --> 00:13:32.556 A:middle
I'm a software engineer
on the accessibility team.

00:13:32.966 --> 00:13:35.376 A:middle
Today, I'm going to help
you guide you through some

00:13:35.376 --> 00:13:39.076 A:middle
of the basics of accessibility
technology on OS X.

00:13:39.296 --> 00:13:41.936 A:middle
And then I'm going to
present to you some

00:13:41.936 --> 00:13:44.246 A:middle
of the UI challenges
we have and some

00:13:44.246 --> 00:13:48.116 A:middle
of the new APIs we've introduced
to solve some of those problems.

00:13:48.796 --> 00:13:50.776 A:middle
And last, I'm going to
also talk about some

00:13:50.776 --> 00:13:52.866 A:middle
of the security improvements
we've made.

00:13:53.776 --> 00:13:55.236 A:middle
So, let's first talk

00:13:55.236 --> 00:13:58.746 A:middle
about accessibility
technology on OS X.

00:13:59.616 --> 00:14:03.526 A:middle
First, there is your application
that presents lots of pretty UIs

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:03.866 --> 00:14:06.466 A:middle
and fancy cool features.

00:14:07.116 --> 00:14:10.716 A:middle
And then there's a few
software, what we call,

00:14:10.716 --> 00:14:14.456 A:middle
"assistive software" that
uses Accessibility APIs

00:14:14.586 --> 00:14:18.096 A:middle
to obtain informations
from other applications.

00:14:18.836 --> 00:14:21.786 A:middle
Some examples of
those are VoiceOver

00:14:21.786 --> 00:14:24.276 A:middle
and the Switch software
that Greg just talked about.

00:14:24.886 --> 00:14:29.996 A:middle
So the way it works is the
assistive software will request

00:14:29.996 --> 00:14:33.216 A:middle
accessibility information
from your app

00:14:33.216 --> 00:14:36.736 A:middle
and the application vents
those accessibility information

00:14:36.736 --> 00:14:37.206 A:middle
back out.

00:14:38.056 --> 00:14:41.756 A:middle
To use a specific
example, VoiceOver here

00:14:41.756 --> 00:14:46.566 A:middle
as the assistive software and
then just a generic application

00:14:46.566 --> 00:14:49.026 A:middle
that perhaps just has a
Play button in the window.

00:14:49.916 --> 00:14:53.176 A:middle
So the way they communicate
with each other is through,

00:14:53.356 --> 00:14:56.386 A:middle
what we call, the
NSAccessibility Protocol.

00:14:58.776 --> 00:15:03.476 A:middle
And the way it works is that
every UI, like this Play button,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:04.046 --> 00:15:08.576 A:middle
is conveying its accessibility
information through attributes.

00:15:09.496 --> 00:15:13.656 A:middle
So, VoiceOver can simply
ask for a specific attribute

00:15:14.036 --> 00:15:15.516 A:middle
and get some information back.

00:15:16.106 --> 00:15:19.676 A:middle
In this case, VoiceOver to
ask for role description

00:15:20.056 --> 00:15:21.216 A:middle
and get the type

00:15:21.216 --> 00:15:24.086 A:middle
of UI information
back which is button.

00:15:25.416 --> 00:15:27.776 A:middle
Or, it could ask
for AX description

00:15:27.986 --> 00:15:31.466 A:middle
which describes what kind of
function this UI presents.

00:15:31.686 --> 00:15:34.916 A:middle
In this case, you could
return the string Play.

00:15:35.766 --> 00:15:38.446 A:middle
So, VoiceOver could
then take these two keys

00:15:38.446 --> 00:15:42.456 A:middle
of attribute information
and either speak or output

00:15:42.456 --> 00:15:44.846 A:middle
to Braille the words
Play button.

00:15:45.456 --> 00:15:51.826 A:middle
So let's take a quick look at
the NSAccessibility Protocol.

00:15:52.626 --> 00:15:54.276 A:middle
There's methods to determine

00:15:54.346 --> 00:15:56.656 A:middle
if any particular
element is ignored

00:15:56.706 --> 00:15:58.466 A:middle
in accessibility hierarchies.

00:15:58.996 --> 00:16:02.616 A:middle
And then there's methods
to get attributes in such.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:03.306 --> 00:16:08.186 A:middle
And there are methods to
perform actions [inaudible] UIs

00:16:08.186 --> 00:16:10.366 A:middle
that you could interact with.

00:16:11.386 --> 00:16:13.806 A:middle
And then there's
hit-testings and focused testing

00:16:13.806 --> 00:16:16.006 A:middle
that you could do
with accessibility.

00:16:16.496 --> 00:16:17.886 A:middle
And last but not
least, you could do--

00:16:18.296 --> 00:16:21.136 A:middle
you could post notification
when things change.

00:16:21.206 --> 00:16:25.806 A:middle
I'm not going to go into details
about how this protocol works.

00:16:25.806 --> 00:16:28.556 A:middle
If you're new to the
NSAccessibility Protocol,

00:16:28.856 --> 00:16:33.966 A:middle
I encourage to you look at the
previous WWDC videos or look

00:16:33.966 --> 00:16:35.556 A:middle
at our documentation online.

00:16:37.576 --> 00:16:41.416 A:middle
What I do want to do right now
is to show you a tool we have

00:16:41.736 --> 00:16:45.626 A:middle
on OS X to help you
going at information

00:16:46.066 --> 00:16:48.266 A:middle
about any particular
piece of UI.

00:16:49.516 --> 00:16:58.576 A:middle
[ Background Noise ]

00:16:59.076 --> 00:17:03.406 A:middle
So this tool is called
Accessibility Inspector

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:03.406 --> 00:17:06.526 A:middle
and the good thing is, now,
it's a bundled with Xcode.

00:17:07.066 --> 00:17:08.986 A:middle
So you could simply go to Xcode,

00:17:08.986 --> 00:17:12.586 A:middle
open Developer Tool
and launch the app.

00:17:13.516 --> 00:17:18.846 A:middle
[ Background Noise ]

00:17:19.346 --> 00:17:20.646 A:middle
And Xcode won't hide.

00:17:20.646 --> 00:17:21.195 A:middle
There you go.

00:17:21.786 --> 00:17:26.396 A:middle
So the way Inspector works
is it does hit-testing.

00:17:26.396 --> 00:17:30.366 A:middle
So whenever UI you're
pointing under mouse,

00:17:31.136 --> 00:17:33.496 A:middle
it's going to display
it in the Inspector.

00:17:34.156 --> 00:17:37.726 A:middle
So I'm going to use this app
I have called Accessibility

00:17:37.726 --> 00:17:38.986 A:middle
UI examples.

00:17:39.146 --> 00:17:45.156 A:middle
If you came here last year, you
know that we used this demo app.

00:17:45.876 --> 00:17:48.326 A:middle
So you've seen some of
the examples we had.

00:17:48.826 --> 00:17:52.646 A:middle
This is a great app to
use to determine how

00:17:52.646 --> 00:17:55.656 A:middle
to accessorize various
type of UI.

00:17:56.716 --> 00:18:01.036 A:middle
So this year, we added four
more examples for you here.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:03.346 --> 00:18:07.746 A:middle
Now, what I want to do is use
Inspector, take my mouse over,

00:18:08.316 --> 00:18:11.656 A:middle
say, for example,
this Recycle icon.

00:18:11.906 --> 00:18:17.096 A:middle
I'm going to lock the screen
so that way I could continue

00:18:17.096 --> 00:18:20.366 A:middle
to move my mouse while we're
inspecting the content.

00:18:20.776 --> 00:18:25.506 A:middle
So this icon has its AX image.

00:18:25.946 --> 00:18:29.516 A:middle
This shows you the
hierarchy of this image

00:18:30.266 --> 00:18:34.166 A:middle
and then underneath all the
attributes that it supports.

00:18:35.286 --> 00:18:39.436 A:middle
For example, here it tells
you, it has a role of AX image,

00:18:39.626 --> 00:18:41.756 A:middle
a role description of image,

00:18:42.426 --> 00:18:45.406 A:middle
description of recycle,
et cetera.

00:18:45.406 --> 00:18:49.616 A:middle
I encourage you to take
a look at this Inspector

00:18:49.616 --> 00:18:52.956 A:middle
and use it while you're
implementing your accessibility

00:18:52.956 --> 00:18:54.466 A:middle
to support for your app.

00:18:55.516 --> 00:19:05.296 A:middle
[ Background Noise ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:05.796 --> 00:19:07.276 A:middle
So now, I'm going to tell you

00:19:07.276 --> 00:19:09.956 A:middle
about all the exciting
new APIs we have coming

00:19:09.956 --> 00:19:11.586 A:middle
up in OS X Maverick.

00:19:12.956 --> 00:19:17.576 A:middle
So we came up with
a few UI challenges

00:19:17.716 --> 00:19:18.806 A:middle
that we're trying to solve.

00:19:19.046 --> 00:19:23.296 A:middle
So in OS 10.9, we
introduced some new APIs

00:19:23.296 --> 00:19:24.736 A:middle
to solve those UI problems.

00:19:24.866 --> 00:19:26.506 A:middle
So I'm going to talk about some

00:19:26.506 --> 00:19:29.446 A:middle
of the new subroles
we've introduced, some--

00:19:29.546 --> 00:19:32.066 A:middle
a new set a of APIs to support--

00:19:32.646 --> 00:19:37.066 A:middle
excuse me, set of new APIs
to support Transient UIs

00:19:38.166 --> 00:19:40.736 A:middle
and also notification
support to--

00:19:41.626 --> 00:19:43.466 A:middle
for accessibility announcement.

00:19:44.416 --> 00:19:49.196 A:middle
So let's first take a look at
some of the UI challenges we had

00:19:49.196 --> 00:19:51.506 A:middle
or some of the new
behavior we've noticed.

00:19:52.516 --> 00:19:55.276 A:middle
So, traditionally,
NSSegmentedControl,

00:19:55.276 --> 00:19:57.836 A:middle
you can only select
one segment at a time.

00:19:58.826 --> 00:20:02.826 A:middle
But we noticed that developer
have altered the behavior

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:03.106 --> 00:20:07.326 A:middle
so that you could select
multiple segments at a time,

00:20:07.686 --> 00:20:15.286 A:middle
like the Xcode for View
Controller in this example.

00:20:16.166 --> 00:20:18.586 A:middle
So to solve that problem,

00:20:18.906 --> 00:20:21.376 A:middle
we introduced a new
subrole several called the

00:20:21.376 --> 00:20:22.936 A:middle
Toggle Subrole.

00:20:25.016 --> 00:20:27.776 A:middle
Similarly, we also
noticed that a lot

00:20:27.776 --> 00:20:31.556 A:middle
of developers are creating
UIs that look like a switch

00:20:32.186 --> 00:20:34.486 A:middle
to do a function that
where, traditionally,

00:20:34.486 --> 00:20:38.506 A:middle
they might have used a checkbox,
like in a time machine perhaps

00:20:38.686 --> 00:20:40.696 A:middle
where you could use
a switch looking UI

00:20:40.836 --> 00:20:42.256 A:middle
to turn something on and off.

00:20:42.976 --> 00:20:43.816 A:middle
And to support that,

00:20:44.726 --> 00:20:47.576 A:middle
we introduced a new subrole
called the Switch Subrole.

00:20:48.496 --> 00:20:53.696 A:middle
In the Accessibility UI example
demo app, there's example

00:20:53.696 --> 00:20:57.146 A:middle
of the Switch, you could
take a look at that

00:20:57.146 --> 00:20:59.526 A:middle
and see how that's accessorized.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.036 --> 00:21:05.536 A:middle
Next, I want to talk about
UIs that appears and disappear

00:21:05.666 --> 00:21:08.096 A:middle
as a result of user actions.

00:21:08.556 --> 00:21:12.476 A:middle
And the most common one we're
seeing are mouse hovering.

00:21:12.476 --> 00:21:16.526 A:middle
So the example I have up
here is the Reminders app.

00:21:17.186 --> 00:21:20.106 A:middle
When you take your mouse
over of the Reminder item,

00:21:20.526 --> 00:21:22.136 A:middle
the Information button appears.

00:21:22.866 --> 00:21:25.406 A:middle
And similarly, if you
take your mouse away,

00:21:26.006 --> 00:21:27.876 A:middle
the Information button
disappears.

00:21:28.536 --> 00:21:34.136 A:middle
So this is a mouse-only
function that, you know,

00:21:34.136 --> 00:21:37.976 A:middle
if you're not a mouse-user
like VoiceOver user,

00:21:38.446 --> 00:21:41.726 A:middle
then there's no way to bring
up that Information button.

00:21:42.316 --> 00:21:48.366 A:middle
We could tell you to add
keyboard support like we've done

00:21:48.366 --> 00:21:51.986 A:middle
for many years, but we know
that's not always possible.

00:21:52.956 --> 00:21:55.326 A:middle
And even if you did add
the keyboard support,

00:21:55.566 --> 00:21:59.076 A:middle
shortcut support, it
may not be discoverable.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.016 --> 00:22:05.296 A:middle
So in 10.9, we introduced new
APIs to solve this problem.

00:22:06.456 --> 00:22:07.906 A:middle
All you have to do
are two things.

00:22:09.026 --> 00:22:14.456 A:middle
First, when VoiceOver
wants to show or hide UIs,

00:22:15.576 --> 00:22:19.966 A:middle
you simply need to implement
the Show Alternate UI action

00:22:20.036 --> 00:22:23.056 A:middle
or the Show Default UI action.

00:22:23.136 --> 00:22:27.456 A:middle
And when VoiceOver wants to know
when UI changes on the screen,

00:22:27.776 --> 00:22:30.716 A:middle
you simply need to post
the notification layout,

00:22:30.716 --> 00:22:31.816 A:middle
change notification.

00:22:33.266 --> 00:22:38.016 A:middle
This notification takes a user
information dictionary, a key--

00:22:38.016 --> 00:22:41.646 A:middle
UI elements key that takes in
a rate of changed elements.

00:22:42.486 --> 00:22:44.376 A:middle
So if you've ever implemented

00:22:44.376 --> 00:22:47.106 A:middle
or posted accessibility
notification,

00:22:47.396 --> 00:22:50.146 A:middle
you may be wondering
right now, "How do I pass

00:22:50.336 --> 00:22:52.746 A:middle
in this user information key?"

00:22:53.176 --> 00:22:53.816 A:middle
Guess what.

00:22:53.816 --> 00:22:58.366 A:middle
In 10.9, we introduced a new
API for you to do just that.

00:22:58.586 --> 00:23:01.436 A:middle
This post notification
was user info.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:01.756 --> 00:23:04.166 A:middle
API takes in additional
parameter

00:23:04.676 --> 00:23:06.766 A:middle
which is the User
Information Dictionary.

00:23:07.556 --> 00:23:09.176 A:middle
So to see how this all works,

00:23:09.176 --> 00:23:14.866 A:middle
I'm going to go ahead
and demo it to you.

00:23:15.516 --> 00:23:29.516 A:middle
[ Background Noise ]

00:23:30.016 --> 00:23:33.576 A:middle
So in this app here, the
Accessibility UI examples,

00:23:33.946 --> 00:23:36.366 A:middle
there's the Transient
UI example.

00:23:36.366 --> 00:23:41.626 A:middle
So note that as I take my
mouse over here, the Previous

00:23:41.626 --> 00:23:43.276 A:middle
and Next buttons appear.

00:23:43.276 --> 00:23:46.696 A:middle
And you could click on
this to change the page.

00:23:46.696 --> 00:23:51.156 A:middle
And if you take your mouse away
from this, the UIs disappear.

00:23:52.266 --> 00:23:54.226 A:middle
So obviously, this
is not possible

00:23:54.226 --> 00:23:58.666 A:middle
for a VoiceOver user
to use currently.

00:23:58.666 --> 00:24:05.566 A:middle
So let's see how you can add
those API support to solve that.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:09.416 --> 00:24:12.576 A:middle
I have the Accessibility
UI example project.

00:24:13.276 --> 00:24:17.906 A:middle
In that Transient UI folder,

00:24:17.906 --> 00:24:23.666 A:middle
there's a Transient
UI Trigger view

00:24:24.366 --> 00:24:26.706 A:middle
which is just a subclass
of the NSView.

00:24:27.716 --> 00:24:30.306 A:middle
This is the view that
holds the two buttons.

00:24:31.656 --> 00:24:35.796 A:middle
So what I want to do is add
the NSAccessibility Protocol

00:24:36.146 --> 00:24:36.876 A:middle
for this view.

00:24:37.536 --> 00:24:39.766 A:middle
So I created a category
for that.

00:24:40.346 --> 00:24:45.816 A:middle
So the first thing I
want to do is make sure

00:24:45.816 --> 00:24:47.706 A:middle
that this view is exposed

00:24:47.836 --> 00:24:49.576 A:middle
through the Accessibility
hierarchy.

00:24:50.086 --> 00:24:54.096 A:middle
NSViews, by default, will not
exposed through accessibility.

00:24:54.706 --> 00:25:00.536 A:middle
So I have to explicitly return
No for Accessibility is Ignored.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:02.136 --> 00:25:06.546 A:middle
So once this element is
exposed through the hierarchy,

00:25:06.546 --> 00:25:08.856 A:middle
the next you want
to do is, well,

00:25:08.856 --> 00:25:12.646 A:middle
define what type of UI this is.

00:25:13.176 --> 00:25:16.616 A:middle
So in the accessibility
attribute value,

00:25:17.396 --> 00:25:19.136 A:middle
this is when you
ask for the role,

00:25:19.136 --> 00:25:21.876 A:middle
I'll just return the group role

00:25:21.976 --> 00:25:25.646 A:middle
since the only function this
view does is hold other UIs.

00:25:26.906 --> 00:25:30.646 A:middle
For any attributes that you
don't explicitly support,

00:25:31.246 --> 00:25:35.596 A:middle
call Super because [inaudible]
underneath will do all the work

00:25:35.596 --> 00:25:36.126 A:middle
for you.

00:25:36.686 --> 00:25:40.966 A:middle
So now, we're ready to
add some of the new APIs.

00:25:41.426 --> 00:25:43.266 A:middle
The first thing is
the new actions.

00:25:45.016 --> 00:25:49.476 A:middle
Depending on if those
buttons are visible or not,

00:25:49.916 --> 00:25:54.126 A:middle
you can support the
Show Default UI action

00:25:54.836 --> 00:25:56.716 A:middle
or the Show Alternate UI action.

00:25:57.306 --> 00:26:02.726 A:middle
Then when you're asked
to perform those actions,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:03.726 --> 00:26:07.826 A:middle
you could go ahead and
make those buttons appear

00:26:07.976 --> 00:26:08.696 A:middle
or disappear.

00:26:09.256 --> 00:26:16.316 A:middle
Every time those UI appear or
disappear, you want to remember

00:26:16.316 --> 00:26:17.906 A:middle
to post the notification.

00:26:17.906 --> 00:26:20.606 A:middle
And this is where we
can use that new API,

00:26:20.656 --> 00:26:22.976 A:middle
the post notification
with user info API,

00:26:23.696 --> 00:26:25.736 A:middle
pass in the Layout
Change notification,

00:26:25.736 --> 00:26:28.016 A:middle
and the User Information
Dictionary

00:26:28.636 --> 00:26:30.796 A:middle
with those changed elements.

00:26:34.006 --> 00:26:39.916 A:middle
So with that, I want to show you
how this works with VoiceOver.

00:26:41.166 --> 00:26:42.896 A:middle
You can launch VoiceOver
with command F5

00:26:42.896 --> 00:26:46.126 A:middle
and the very first
time you launch that,

00:26:46.346 --> 00:26:49.356 A:middle
it's going to ask you if you
want to run through a tutorial.

00:26:49.586 --> 00:26:52.296 A:middle
If you never used VoiceOver,
I really encourage you

00:26:52.296 --> 00:26:54.086 A:middle
to try it out, the tutorial.

00:26:54.876 --> 00:26:58.236 A:middle
For now, I'm going to skip that.

00:26:58.446 --> 00:26:59.496 A:middle
&gt;&gt; Welcome to VoiceOver.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:00.136 --> 00:27:02.656 A:middle
VoiceOver speaks descriptions
of items on the screen

00:27:02.656 --> 00:27:05.526 A:middle
and can be used to control
the computer using only

00:27:05.526 --> 00:27:06.306 A:middle
your keyboard.

00:27:07.276 --> 00:27:11.156 A:middle
If you already know how to use
VoiceOver, press the V key now.

00:27:12.186 --> 00:27:14.136 A:middle
If you want to learn
how to use VoiceOver,

00:27:14.466 --> 00:27:15.936 A:middle
press the Space Bar now.

00:27:16.826 --> 00:27:20.616 A:middle
&gt;&gt; Okay, so I'm going
to go and continue.

00:27:20.616 --> 00:27:22.686 A:middle
&gt;&gt; VoiceOver Accessibility
UI examples,

00:27:22.936 --> 00:27:26.256 A:middle
Accessibility UI examples
window, table, Transient UI,

00:27:26.466 --> 00:27:27.786 A:middle
selected has keyboard focus.

00:27:29.296 --> 00:27:32.236 A:middle
&gt;&gt; Okay, so the way it works
is there's a VoiceOver cursor

00:27:32.336 --> 00:27:36.036 A:middle
which is the black box
around the UI I'm focused on.

00:27:36.376 --> 00:27:38.966 A:middle
And I can simply use
VoiceOver key commands

00:27:39.206 --> 00:27:41.286 A:middle
to move that cursor around.

00:27:43.236 --> 00:27:45.126 A:middle
&gt;&gt; This is page 3 of 10.

00:27:45.236 --> 00:27:46.286 A:middle
Has Alternate UI action.

00:27:46.956 --> 00:27:49.486 A:middle
&gt;&gt; So, it tells me this one
has Alternate UI action.

00:27:49.796 --> 00:27:52.896 A:middle
So now, I could use
another key command to bring

00:27:52.896 --> 00:27:54.786 A:middle
up the VoiceOver Action Menu.

00:27:55.566 --> 00:27:57.496 A:middle
&gt;&gt; Actions Menu, one item.

00:27:58.366 --> 00:27:59.136 A:middle
Show Alternate UI.

00:27:59.136 --> 00:28:01.546 A:middle
&gt;&gt; I'll go ahead
and select that.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:01.776 --> 00:28:03.456 A:middle
&gt;&gt; Two items available
in the Update Items Menu.

00:28:03.456 --> 00:28:05.856 A:middle
&gt;&gt; And note that
now I could bring

00:28:05.856 --> 00:28:07.496 A:middle
up the Previous and
Next buttons.

00:28:08.326 --> 00:28:09.256 A:middle
So let's jump there.

00:28:10.396 --> 00:28:14.476 A:middle
&gt;&gt; This, stop inter-- Previous
button displaying Alternate UI,

00:28:14.476 --> 00:28:16.816 A:middle
Next button displaying
Alternative UI.

00:28:17.196 --> 00:28:19.176 A:middle
&gt;&gt; And I could interact with it.

00:28:19.406 --> 00:28:20.956 A:middle
&gt;&gt; Press Next button.

00:28:21.186 --> 00:28:22.276 A:middle
Press Next button.

00:28:22.946 --> 00:28:25.146 A:middle
&gt;&gt; Okay. And we could
do the same thing

00:28:25.146 --> 00:28:26.696 A:middle
to hide these buttons.

00:28:27.766 --> 00:28:28.906 A:middle
&gt;&gt; Previous button.

00:28:29.156 --> 00:28:31.886 A:middle
This is page 5 of 10
displaying Alternative UI.

00:28:32.516 --> 00:28:37.016 A:middle
Actions Menu one item,
Show Default UI, Table,

00:28:37.266 --> 00:28:38.746 A:middle
Transient UI selected.

00:28:39.896 --> 00:28:40.606 A:middle
VoiceOver off.

00:28:40.606 --> 00:28:43.176 A:middle
&gt;&gt; Okay, with the
few lines of code,

00:28:43.436 --> 00:28:46.896 A:middle
now you're giving VoiceOver
the same experience to be able

00:28:46.896 --> 00:28:48.306 A:middle
to access those buttons.

00:28:49.516 --> 00:28:57.816 A:middle
[ Background Noise ]

00:28:58.316 --> 00:28:59.136 A:middle
The next thing I want to talk

00:28:59.136 --> 00:29:01.736 A:middle
about is Accessibility
Announcement.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:02.666 --> 00:29:04.956 A:middle
In your app, there may
be times where you want

00:29:05.176 --> 00:29:08.306 A:middle
to convey some status
to the user.

00:29:08.356 --> 00:29:11.556 A:middle
And the example I have here
of the Keyboard Preference

00:29:12.006 --> 00:29:16.066 A:middle
where when a user assigns
a key that conflicts

00:29:16.066 --> 00:29:20.416 A:middle
with the existing key, Keyboard
Prefs will display a little

00:29:20.556 --> 00:29:24.126 A:middle
status text at the
bottom of the screen.

00:29:24.396 --> 00:29:27.746 A:middle
Now, this is a-- what I
call, a "visual announcement"

00:29:27.846 --> 00:29:29.556 A:middle
which works great
if you're sighted.

00:29:29.556 --> 00:29:34.166 A:middle
But if you're not,
this is useless.

00:29:35.216 --> 00:29:38.536 A:middle
So to help you make
the experience the same

00:29:38.536 --> 00:29:43.056 A:middle
for every user, we've introduced
a new notification called

00:29:43.056 --> 00:29:45.436 A:middle
Announcement Requested
Notification.

00:29:45.996 --> 00:29:50.536 A:middle
It takes an Announcement key
so you could pass on a string

00:29:50.576 --> 00:29:53.556 A:middle
of what you want the
assistive software to announce.

00:29:54.166 --> 00:29:57.766 A:middle
So with that information,
once we post that,

00:29:57.766 --> 00:30:01.356 A:middle
VoiceOver can then either
determine to speak it,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:01.356 --> 00:30:03.586 A:middle
output to Braille, or
do something about it.

00:30:04.586 --> 00:30:07.736 A:middle
Now, not every announcement
has the same priority,

00:30:08.186 --> 00:30:11.266 A:middle
so we also have a new priority
key that you could pass

00:30:11.326 --> 00:30:13.546 A:middle
in to determine the priority.

00:30:13.796 --> 00:30:19.916 A:middle
We've predefined some priorities
for you, Low, Medium and High.

00:30:20.136 --> 00:30:23.236 A:middle
So, so far, I've talked
about APIs that help

00:30:23.296 --> 00:30:25.056 A:middle
to solve UI challenges.

00:30:25.056 --> 00:30:27.476 A:middle
Next, I want to talk about some

00:30:27.476 --> 00:30:29.386 A:middle
of the security improvements
we've made.

00:30:29.966 --> 00:30:37.386 A:middle
Two things, specifically, one
is the text content protection

00:30:38.216 --> 00:30:40.956 A:middle
and the other one is
a more secure usage

00:30:41.016 --> 00:30:43.556 A:middle
of Accessibility API.

00:30:44.336 --> 00:30:46.746 A:middle
So let's first talk
about content protection.

00:30:47.306 --> 00:30:50.696 A:middle
If you run apps such
as the eBook

00:30:50.696 --> 00:30:54.196 A:middle
that display copyrighted
content like a book,

00:30:54.906 --> 00:30:56.966 A:middle
or if you have a medical app

00:30:57.146 --> 00:31:00.786 A:middle
that display valuable
sensitive patient informations,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:01.576 --> 00:31:03.436 A:middle
what I'm going to
say next is for you.

00:31:04.526 --> 00:31:07.456 A:middle
If you have not made
your app accessible

00:31:07.456 --> 00:31:10.926 A:middle
because of text content
protection concern,

00:31:11.926 --> 00:31:15.886 A:middle
we now have one more reason for
you to make your app accessible.

00:31:17.086 --> 00:31:18.486 A:middle
We've heard your feedback

00:31:18.486 --> 00:31:20.886 A:middle
and now we're introducing
a new attribute

00:31:21.046 --> 00:31:24.866 A:middle
that you could implement to
make your content more secure.

00:31:25.536 --> 00:31:29.316 A:middle
So this attribute is called
the Contents Protected

00:31:29.316 --> 00:31:30.666 A:middle
Content Attribute.

00:31:31.116 --> 00:31:33.106 A:middle
If you pass in Yes for this,

00:31:33.816 --> 00:31:38.196 A:middle
then your text content string
will no longer be viewable

00:31:38.196 --> 00:31:39.666 A:middle
by other applications.

00:31:40.766 --> 00:31:43.436 A:middle
There is one exception
and those are the system--

00:31:44.906 --> 00:31:46.826 A:middle
system assistive software apps

00:31:47.196 --> 00:31:49.496 A:middle
such as VoiceOver
for obvious reasons.

00:31:50.406 --> 00:31:55.676 A:middle
To use this new attribute, you
will also need to make API call.

00:31:56.416 --> 00:32:00.186 A:middle
This is called the Set Make
Contents Protected Content API.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:01.406 --> 00:32:03.126 A:middle
So to see how these works,

00:32:04.106 --> 00:32:06.406 A:middle
I'm going to go ahead
and demo to you.

00:32:07.516 --> 00:32:15.856 A:middle
[ Background Noise ]

00:32:16.356 --> 00:32:18.996 A:middle
So in the Accessibility
UI example,

00:32:18.996 --> 00:32:23.796 A:middle
there's the protected text.

00:32:23.796 --> 00:32:27.946 A:middle
And I simply have a view that
display a paragraph of text.

00:32:28.546 --> 00:32:31.206 A:middle
And for demo purpose, I
also included a checkbox

00:32:31.476 --> 00:32:35.486 A:middle
so we could toggle the
protection on and off.

00:32:35.746 --> 00:32:39.986 A:middle
Now, let's take a look at
this using the Inspector.

00:32:44.176 --> 00:32:46.276 A:middle
So I'm going to lock this thing.

00:32:47.516 --> 00:32:54.176 A:middle
[ Background Noise ]

00:32:54.676 --> 00:32:55.986 A:middle
What I want you to look

00:32:55.986 --> 00:32:59.616 A:middle
at specifically is this
AX Value attribute.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.066 --> 00:33:02.766 A:middle
Note that, right now, you
could see their entire string

00:33:03.026 --> 00:33:06.086 A:middle
of that content.

00:33:06.166 --> 00:33:09.736 A:middle
So if I go and check this
Protect Content checkbox

00:33:10.316 --> 00:33:11.756 A:middle
and refresh the Inspector,

00:33:11.756 --> 00:33:15.716 A:middle
note that you can no longer
see the string anymore.

00:33:16.296 --> 00:33:20.076 A:middle
And we can do the same thing

00:33:20.076 --> 00:33:26.136 A:middle
with VoiceOver and
see what happens.

00:33:26.136 --> 00:33:29.686 A:middle
&gt;&gt; VoiceOver Accessibility
UI-- Apple designs Macs,

00:33:29.826 --> 00:33:32.346 A:middle
the best personal computers
in the world along with OS X,

00:33:32.346 --> 00:33:34.086 A:middle
iLife, iWork, and
professional software.

00:33:34.416 --> 00:33:36.466 A:middle
Apple leads the digital music
revolution with its iPods

00:33:36.466 --> 00:33:37.366 A:middle
and iTunes online store.

00:33:38.536 --> 00:33:39.546 A:middle
VoiceOver off.

00:33:39.546 --> 00:33:42.766 A:middle
&gt;&gt; Great. So, it allows
assistive software to continue

00:33:42.926 --> 00:33:44.386 A:middle
to use and see the content

00:33:44.446 --> 00:33:47.106 A:middle
but it doesn't allow other
apps to see the content.

00:33:48.146 --> 00:33:50.846 A:middle
So let's see how that
works in the code.

00:33:54.756 --> 00:33:58.386 A:middle
The example is under the
Protected Text folder.

00:33:59.626 --> 00:34:03.496 A:middle
In there, I just have a
subclass of the NSTextField,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:03.746 --> 00:34:06.576 A:middle
so that displayed the content.

00:34:07.086 --> 00:34:17.906 A:middle
And so, I want to override some
of the Accessibility APIs here.

00:34:18.616 --> 00:34:22.936 A:middle
So since what I'm doing here is
dynamically toggling the text

00:34:23.235 --> 00:34:26.835 A:middle
content protection on and
off, I'll make the API call

00:34:26.835 --> 00:34:29.246 A:middle
in a place where I'm setting
the protection turning--

00:34:29.315 --> 00:34:30.616 A:middle
toggling that protection.

00:34:31.286 --> 00:34:34.216 A:middle
So I could just call
NSAccessibility Set Make

00:34:34.216 --> 00:34:37.366 A:middle
Contents Protected
Content, turn it yes or no.

00:34:38.226 --> 00:34:41.065 A:middle
In your app, you probably
want the protection

00:34:41.065 --> 00:34:43.775 A:middle
to last throughout the
lifespan of your app.

00:34:44.335 --> 00:34:49.335 A:middle
So, you could power it like
in the app launch time.

00:34:50.676 --> 00:34:53.166 A:middle
Next, I want to add
this new attribute,

00:34:53.266 --> 00:34:55.556 A:middle
so in Accessibility
Attribute Names.

00:34:56.326 --> 00:34:58.176 A:middle
In addition to all
the attributes

00:34:58.176 --> 00:35:02.196 A:middle
that app already supports
for the text field cell,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:03.416 --> 00:35:06.256 A:middle
we're also going to add
this new Contents Protected

00:35:06.256 --> 00:35:07.396 A:middle
Content attribute.

00:35:07.726 --> 00:35:11.096 A:middle
And then when you're being
asked for this attribute,

00:35:11.336 --> 00:35:14.806 A:middle
this is where you return
yes or no if you want to--

00:35:15.126 --> 00:35:16.336 A:middle
if you want that protection.

00:35:17.656 --> 00:35:20.796 A:middle
So that's all you have to
do to protect a content.

00:35:21.516 --> 00:35:28.776 A:middle
[ Pause ]

00:35:29.276 --> 00:35:31.846 A:middle
So, so far, I've been
talking about your app

00:35:31.846 --> 00:35:35.226 A:middle
and how events various
accessibility information

00:35:35.226 --> 00:35:37.636 A:middle
to enhance the user experience.

00:35:38.336 --> 00:35:41.676 A:middle
Now, I want to switch gear
and talk about some changes

00:35:41.726 --> 00:35:43.566 A:middle
that affect assistive software.

00:35:44.256 --> 00:35:52.256 A:middle
At Apple, we really care about
protecting end-user's privacy,

00:35:53.066 --> 00:35:54.396 A:middle
basically, all of
their information.

00:35:54.486 --> 00:36:00.136 A:middle
So in OS X, if any
application that wants

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:00.406 --> 00:36:03.376 A:middle
to use the end-user's
location information

00:36:03.636 --> 00:36:08.856 A:middle
or context information will have
to get the users permission.

00:36:09.646 --> 00:36:12.216 A:middle
We're taking that
great mechanism

00:36:12.216 --> 00:36:15.756 A:middle
to accessibility too in 10.9.

00:36:16.496 --> 00:36:21.496 A:middle
So in 10.9, any application that
wants to use Accessibility API

00:36:21.976 --> 00:36:23.536 A:middle
to obtain information

00:36:23.536 --> 00:36:26.696 A:middle
about other applications
will also need gain the

00:36:26.696 --> 00:36:27.736 A:middle
user's permission.

00:36:28.376 --> 00:36:32.766 A:middle
So the very first time the app
uses the Accessibility API,

00:36:33.646 --> 00:36:37.256 A:middle
the system will prompt
the end-user

00:36:37.256 --> 00:36:38.616 A:middle
for permission on your behalf.

00:36:40.096 --> 00:36:47.996 A:middle
And until your app is
on the approved list,

00:36:47.996 --> 00:36:49.406 A:middle
the APIs would be disabled.

00:36:49.736 --> 00:36:53.966 A:middle
So if you're an app that heavily
depends on the use of the API,

00:36:54.666 --> 00:36:58.786 A:middle
you will probably want to
remind the end-user more often.

00:36:59.306 --> 00:37:01.896 A:middle
So we created an API
for you to do just that.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:02.446 --> 00:37:06.526 A:middle
It's called the AX is Trusted,
Process Trusted with Options

00:37:06.976 --> 00:37:09.036 A:middle
that takes in a dictionary.

00:37:09.676 --> 00:37:13.916 A:middle
So in your app launch
time, you could simply pass

00:37:14.126 --> 00:37:17.856 A:middle
in the Trusted Check Option
prompt, it has Boolean for the--

00:37:17.856 --> 00:37:22.446 A:middle
Boolean true for that into
the dictionary and set

00:37:22.446 --> 00:37:24.366 A:middle
that as the argument
for your API.

00:37:25.146 --> 00:37:28.056 A:middle
And when that happens, then
every time your app launch,

00:37:28.606 --> 00:37:31.556 A:middle
it'll prompt the user
for permission again.

00:37:32.916 --> 00:37:36.406 A:middle
So if you want more
information, there's e-mail list

00:37:36.486 --> 00:37:40.046 A:middle
for you to join or a contact.

00:37:40.666 --> 00:37:45.806 A:middle
And if you miss the
accessibility

00:37:45.806 --> 00:37:49.826 A:middle
in iOS session earlier today
in this room, you can watch it

00:37:49.826 --> 00:37:51.556 A:middle
on video once it's available.

00:37:52.026 --> 00:37:55.246 A:middle
And if you want to hear more
about the close captioning stuff

00:37:55.656 --> 00:37:59.876 A:middle
that Greg talked about, tomorrow
morning in Uphill [phonetic],

00:37:59.876 --> 00:38:00.766 A:middle
you can listen to that.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:01.016 --> 00:38:05.926 A:middle
So to recap, Apple is
really committed to ensure

00:38:05.926 --> 00:38:10.736 A:middle
that every user have equal
access to the rich experience

00:38:10.736 --> 00:38:14.486 A:middle
of using all of our
Apple products.

00:38:14.486 --> 00:38:17.616 A:middle
On our end, we work
really hard to continue

00:38:17.616 --> 00:38:21.896 A:middle
to improve our existing products
like VoiceOver and new products

00:38:21.896 --> 00:38:25.246 A:middle
like the Switch software,
and to continue

00:38:25.246 --> 00:38:28.916 A:middle
to enhance our existing
set of APIs.

00:38:29.136 --> 00:38:33.936 A:middle
However, all of that are
just tools to help the user

00:38:33.936 --> 00:38:35.466 A:middle
to use your application.

00:38:36.356 --> 00:38:39.776 A:middle
So, your application
is the important thing

00:38:39.776 --> 00:38:40.756 A:middle
in this equation.

00:38:41.676 --> 00:38:45.166 A:middle
I'm hoping that I've given you
some basic information on how

00:38:45.166 --> 00:38:48.216 A:middle
to use the Accessibility
APIs and the tool

00:38:48.416 --> 00:38:50.456 A:middle
to make your application
accessible.

00:38:50.756 --> 00:38:57.866 A:middle
If you have further questions,
contact us, watch videos,

00:38:58.106 --> 00:39:03.086 A:middle
previous WWDC videos, or look
online for documentations.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:03.596 --> 00:39:07.886 A:middle
Today, I have also
presented some UI challenges

00:39:07.886 --> 00:39:11.206 A:middle
and how we have new APIs to
help solve those problems.

00:39:11.876 --> 00:39:14.836 A:middle
If, in your application,
you have any of those UIs

00:39:14.896 --> 00:39:18.056 A:middle
that I presented, I
really encourage you

00:39:18.056 --> 00:39:20.376 A:middle
to implement those new APIs.

00:39:20.836 --> 00:39:22.186 A:middle
As you've see in the demo,

00:39:22.186 --> 00:39:23.806 A:middle
they're really easy
to implement.

00:39:24.336 --> 00:39:27.676 A:middle
And I've also talked about some

00:39:27.676 --> 00:39:31.726 A:middle
of the security improvements
too.

00:39:31.956 --> 00:39:35.816 A:middle
So, I'm hoping that you go
away with this and start

00:39:36.146 --> 00:39:37.936 A:middle
to make your application
accessible.

00:39:37.936 --> 00:39:39.916 A:middle
If you have further
question, again,

00:39:39.916 --> 00:39:43.226 A:middle
come to our lab this
afternoon at 12:45.

00:39:43.366 --> 00:39:45.696 A:middle
And if I don't see you at
the lab, have a great day.

00:39:45.886 --> 00:39:46.396 A:middle
Thank you.

00:39:47.516 --> 00:39:56.050 A:middle
[ Applause ]

