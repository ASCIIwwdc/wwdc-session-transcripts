WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:09.516 A:middle
[ Silence ]

00:00:10.016 --> 00:00:12.000 A:middle
[ Applause ]

00:00:12.716 --> 00:00:13.346 A:middle
&gt;&gt; My name is Chris.

00:00:13.346 --> 00:00:15.666 A:middle
I get to give you a quick
tour on some more details

00:00:15.666 --> 00:00:16.746 A:middle
on what's new in Xcode.

00:00:18.146 --> 00:00:23.266 A:middle
Xcode 5 is the product of
a real passion and drive

00:00:23.356 --> 00:00:25.676 A:middle
for building really great tools.

00:00:26.766 --> 00:00:29.796 A:middle
It builds on the foundation of
Xcode 4 which is really solid,

00:00:29.796 --> 00:00:34.586 A:middle
that has a few additional,
very pragmatic things

00:00:34.646 --> 00:00:37.676 A:middle
to solve common problems that
maybe you've been asking for,

00:00:38.476 --> 00:00:42.926 A:middle
as some really big leaps,
and also has a nice new look

00:00:42.926 --> 00:00:46.026 A:middle
and feel, so let's dive in
and see what's going on here.

00:00:47.296 --> 00:00:50.756 A:middle
So I hope you've already had
a chance to install Xcode 5

00:00:50.756 --> 00:00:52.826 A:middle
on your machines and
play with it a little bit

00:00:52.826 --> 00:00:55.246 A:middle
and hopefully you'll have
already seen the new look.

00:00:55.886 --> 00:01:00.586 A:middle
In a word, Xcode 5 is about
deference to your content.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:01.256 --> 00:01:03.576 A:middle
It's all about bringing
your code front and center

00:01:03.576 --> 00:01:06.056 A:middle
so that you can focus
on your application,

00:01:06.056 --> 00:01:08.106 A:middle
and what you're doing instead
of thinking about Xcode.

00:01:09.376 --> 00:01:11.456 A:middle
Now, the new look is
clean and beautiful.

00:01:11.826 --> 00:01:14.496 A:middle
But perhaps, the biggest
change is to the new Toolbar.

00:01:15.346 --> 00:01:17.596 A:middle
New Toolbar is now
30 percent smaller,

00:01:18.466 --> 00:01:21.316 A:middle
which is a huge improvement
particularly if you're using one

00:01:21.316 --> 00:01:23.296 A:middle
of our new 11-inch MacBook Airs.

00:01:23.296 --> 00:01:26.536 A:middle
Now, when you take
Xcode full screen,

00:01:26.916 --> 00:01:30.216 A:middle
the Toolbar virtually disappears
giving you this amazing full

00:01:30.216 --> 00:01:33.626 A:middle
screen experience and
Xcode just looks gorgeous,

00:01:33.926 --> 00:01:35.536 A:middle
our beautiful Retina displays.

00:01:36.246 --> 00:01:40.506 A:middle
Now, there's many changes in
Xcode, one of the big ones is

00:01:40.506 --> 00:01:42.406 A:middle
that documentation
has been split

00:01:42.406 --> 00:01:45.376 A:middle
out to its own full
top level window

00:01:45.646 --> 00:01:46.936 A:middle
with complete tab support.

00:01:48.436 --> 00:01:51.416 A:middle
Documentation is super important
and now, you have direct access

00:01:51.416 --> 00:01:53.966 A:middle
to a Table of Contents,
your Bookmarks,

00:01:54.796 --> 00:01:56.206 A:middle
Xcode even makes it super easy

00:01:56.206 --> 00:02:00.336 A:middle
to share links right
from the ID.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:02.086 --> 00:02:05.636 A:middle
Now, Xcode 5 intentionally
feels a lot like Xcode 4,

00:02:06.436 --> 00:02:07.676 A:middle
but there's one aspect
of the field

00:02:07.676 --> 00:02:09.485 A:middle
that we thought could
be much improved,

00:02:09.826 --> 00:02:11.036 A:middle
and that's in performance.

00:02:12.046 --> 00:02:14.416 A:middle
Now, Xcode 5 just feels great.

00:02:14.676 --> 00:02:17.276 A:middle
It's fast and responsive,
common operations

00:02:17.276 --> 00:02:19.766 A:middle
like plugging a device
now responds instantly.

00:02:21.006 --> 00:02:24.106 A:middle
Tabs, you can create them

00:02:24.106 --> 00:02:25.676 A:middle
when you want them
and they feel snappy.

00:02:26.056 --> 00:02:28.906 A:middle
And common operations like
doing an incremental build,

00:02:29.166 --> 00:02:30.236 A:middle
searching in your project

00:02:30.536 --> 00:02:34.146 A:middle
and building NIB files are
now up to twice as fast.

00:02:34.276 --> 00:02:35.856 A:middle
I think you're really
going to like it

00:02:35.926 --> 00:02:38.656 A:middle
if you have not played with it.

00:02:38.656 --> 00:02:41.476 A:middle
Now, there're many big
feature changes in Xcode,

00:02:42.016 --> 00:02:44.426 A:middle
one of the most obvious
is in Source Control.

00:02:45.216 --> 00:02:47.926 A:middle
Source Control in Xcode 4 has
always been super powerful.

00:02:48.586 --> 00:02:50.336 A:middle
But Xcode 5 takes
it even farther

00:02:50.386 --> 00:02:53.256 A:middle
by directly supporting
branch-based development

00:02:53.256 --> 00:02:55.726 A:middle
workflows that many of you
use to build your features.

00:02:56.706 --> 00:02:58.306 A:middle
And of course, the first
place you want to start

00:02:58.306 --> 00:03:00.186 A:middle
with Source Control is by
checking out your project.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:01.086 --> 00:03:04.866 A:middle
If you haven't seen it, this is
the beautiful new Xcode Welcome

00:03:04.866 --> 00:03:08.496 A:middle
window which is just-- just
stunning in its simplicity.

00:03:09.246 --> 00:03:11.606 A:middle
Now you can start a new project,

00:03:11.706 --> 00:03:13.666 A:middle
get going with an
existing project or,

00:03:13.696 --> 00:03:15.096 A:middle
if you check one out, you dive

00:03:15.096 --> 00:03:17.146 A:middle
in to the newly enhanced
Checkout Workflow.

00:03:18.376 --> 00:03:20.636 A:middle
The new Checkout Workflow
makes it really easy to browse

00:03:20.636 --> 00:03:21.846 A:middle
around different repositories,

00:03:22.226 --> 00:03:24.196 A:middle
keeps track your favorites
and recent locations.

00:03:24.196 --> 00:03:26.386 A:middle
Its just generally is designed
to get going really quickly.

00:03:27.366 --> 00:03:30.896 A:middle
When you jump into the
editor, things are even better

00:03:30.936 --> 00:03:33.846 A:middle
because now you'll see that
you have a new top-level Source

00:03:33.846 --> 00:03:34.746 A:middle
Control Menu item.

00:03:36.136 --> 00:03:37.276 A:middle
Why does this matter?

00:03:37.666 --> 00:03:40.046 A:middle
Well now, Source Control is
available to you all the time,

00:03:40.046 --> 00:03:40.846 A:middle
right from the editor.

00:03:41.166 --> 00:03:43.476 A:middle
You have common-- you have
access to common operations

00:03:43.476 --> 00:03:47.706 A:middle
like doing a Commit, and these
operations now know exactly

00:03:47.706 --> 00:03:50.126 A:middle
which project, or
workspace you're working on.

00:03:50.626 --> 00:03:52.676 A:middle
So they're completely
contact sensitive.

00:03:53.186 --> 00:03:55.736 A:middle
It's not a matter of applying
Source Control operations

00:03:55.736 --> 00:03:57.556 A:middle
to an abstract list of
repositories that you have

00:03:57.596 --> 00:03:59.006 A:middle
to keep straight yourself.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:00.176 --> 00:04:03.576 A:middle
And again, branch-based
development workflows Xcode now

00:04:03.576 --> 00:04:06.426 A:middle
makes it really easy to create
new branches, switch branches,

00:04:06.426 --> 00:04:08.676 A:middle
and even merge right
from the editor.

00:04:08.746 --> 00:04:09.776 A:middle
It's just that easy.

00:04:10.426 --> 00:04:12.956 A:middle
Now, it doesn't stop there.

00:04:13.746 --> 00:04:16.946 A:middle
Xcode even brings per line
blame information right

00:04:16.946 --> 00:04:18.456 A:middle
into the editor.

00:04:19.076 --> 00:04:22.106 A:middle
This makes this really easy to
find out who changed the line

00:04:22.106 --> 00:04:25.066 A:middle
of code, which for me is
actually really important

00:04:25.066 --> 00:04:27.336 A:middle
because when I finally get
to the root of some bug,

00:04:28.116 --> 00:04:30.186 A:middle
the first thing I need to
do is find out who did it

00:04:30.186 --> 00:04:32.966 A:middle
and go point the finger at him.

00:04:33.726 --> 00:04:35.696 A:middle
So now in addition to
being super powerful,

00:04:36.456 --> 00:04:38.776 A:middle
Source Control Xcode 5 is
also super configurable,

00:04:39.776 --> 00:04:42.896 A:middle
and we think this is really
important because it means

00:04:42.896 --> 00:04:45.526 A:middle
that Source Control can
work the way you want it to.

00:04:46.356 --> 00:04:49.036 A:middle
Now, Source Control can be
told exactly what you want--

00:04:49.426 --> 00:04:51.226 A:middle
want you want it to do
for you automatically.

00:04:51.836 --> 00:04:54.056 A:middle
If you're using an external
version controlled tool,

00:04:54.056 --> 00:04:56.446 A:middle
you can turnoff Xcode
source control entirely.

00:04:57.196 --> 00:04:59.226 A:middle
And if you prefer the
left and the right sides

00:04:59.226 --> 00:05:00.306 A:middle
of disk to be swapped?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:01.306 --> 00:05:02.316 A:middle
Hey, now you can do that too.

00:05:02.566 --> 00:05:04.986 A:middle
It's just that easy.

00:05:05.246 --> 00:05:07.466 A:middle
Now, while Source Control
being super powerful

00:05:07.466 --> 00:05:08.966 A:middle
and configurable is great.

00:05:09.116 --> 00:05:10.916 A:middle
There's one thing that I
really don't like configuring,

00:05:11.696 --> 00:05:12.916 A:middle
and that's provisioning
profiles.

00:05:13.516 --> 00:05:19.176 A:middle
[ Applause ]

00:05:19.676 --> 00:05:22.956 A:middle
With Xcode 5 and a new
automatic configuration feature,

00:05:22.956 --> 00:05:24.186 A:middle
this is a thing in the past.

00:05:24.746 --> 00:05:26.726 A:middle
So, what is automatic
configuration?

00:05:27.666 --> 00:05:29.646 A:middle
In a word, it's super simple.

00:05:30.766 --> 00:05:33.016 A:middle
Now, you just tell
Xcode your Apple ID,

00:05:33.016 --> 00:05:35.166 A:middle
and it automatically
knows your connection

00:05:35.166 --> 00:05:38.786 A:middle
to the developer program to
the App Stores, and that means

00:05:38.786 --> 00:05:41.596 A:middle
that Xcode can get your-- set
up your provisioning profiles,

00:05:42.016 --> 00:05:42.946 A:middle
create entitlements,

00:05:43.636 --> 00:05:45.876 A:middle
and it knows your team
identities right away,

00:05:46.026 --> 00:05:47.586 A:middle
just from that one little
piece of information.

00:05:48.116 --> 00:05:51.206 A:middle
OK. So what does
that do for you?

00:05:51.766 --> 00:05:53.186 A:middle
Well now, Xcode knows
who you are,

00:05:54.086 --> 00:05:56.616 A:middle
including the many different
who's that you may be.

00:05:57.026 --> 00:05:59.446 A:middle
It allows you to enter that
directly into the project editor

00:05:59.996 --> 00:06:01.496 A:middle
which makes it super
easy to switch

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:01.496 --> 00:06:02.736 A:middle
between your different
identities,

00:06:03.176 --> 00:06:04.706 A:middle
maybe your contractor
and you work

00:06:04.706 --> 00:06:06.476 A:middle
on different projects,
or different clients.

00:06:07.146 --> 00:06:09.796 A:middle
Maybe you have work projects
and, you know, you love coding

00:06:09.796 --> 00:06:11.636 A:middle
so much you have your
own home projects, right?

00:06:13.116 --> 00:06:15.866 A:middle
Now it's really easy to control
this all directly with an Xcode.

00:06:16.116 --> 00:06:17.206 A:middle
It's just super easy.

00:06:18.516 --> 00:06:24.026 A:middle
[ Applause ]

00:06:24.526 --> 00:06:27.316 A:middle
Now, much bigger win of
Automatic Configuration comes

00:06:27.316 --> 00:06:29.586 A:middle
when you pull in a second
feature called Capabilities.

00:06:30.536 --> 00:06:34.166 A:middle
A Capability is a high
level concept in Xcode

00:06:34.416 --> 00:06:36.006 A:middle
that pulls together
everything you need

00:06:36.006 --> 00:06:38.346 A:middle
to add an Apple service
to your application.

00:06:38.996 --> 00:06:43.386 A:middle
Things like iCloud or Game
Center, they require the client

00:06:43.386 --> 00:06:44.676 A:middle
and server to be in sync.

00:06:46.096 --> 00:06:47.856 A:middle
Now previously, setting
up iCloud

00:06:47.856 --> 00:06:51.366 A:middle
for example would require they
do multiple steps with an Xcode,

00:06:51.976 --> 00:06:53.016 A:middle
and then multiple steps

00:06:53.016 --> 00:06:55.606 A:middle
on the portal even before
you start writing code.

00:06:56.526 --> 00:06:58.566 A:middle
With capabilities, and
automatic configuration,

00:06:58.886 --> 00:07:00.766 A:middle
it's now-it can be easier.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.896 --> 00:07:03.446 A:middle
It's just a matter of turning
it on and your feature set

00:07:03.446 --> 00:07:04.626 A:middle
up for you automatically.

00:07:05.696 --> 00:07:07.366 A:middle
Xcode handles all the grunt work

00:07:07.466 --> 00:07:10.326 A:middle
of sending provisioning
profiles, create entitlements,

00:07:11.006 --> 00:07:12.906 A:middle
even goes and links
in a framework,

00:07:12.906 --> 00:07:15.256 A:middle
and updates your Info.plist
all for you automatically.

00:07:15.486 --> 00:07:17.406 A:middle
So now, you don't have to
keep track of how to do this

00:07:17.456 --> 00:07:21.726 A:middle
and you just don't have
to worry about it anymore.

00:07:22.166 --> 00:07:24.046 A:middle
So now that we've set
up our application,

00:07:24.046 --> 00:07:25.256 A:middle
we've checked it out,
we're ready to go,

00:07:25.426 --> 00:07:27.926 A:middle
let's talk about how to
design it and let's talk

00:07:27.926 --> 00:07:29.216 A:middle
about specifically
the interface.

00:07:30.566 --> 00:07:34.736 A:middle
Now you all saw iOS 7's
great new design and look

00:07:34.736 --> 00:07:37.776 A:middle
and you may be wondering how do
you get your applications to fit

00:07:37.776 --> 00:07:39.716 A:middle
in and feel like part
of the ecosystem?

00:07:40.436 --> 00:07:44.196 A:middle
Well, Xcode 5 makes it super
easy and has several power tools

00:07:44.426 --> 00:07:46.246 A:middle
that will make your
applications look great.

00:07:46.786 --> 00:07:49.316 A:middle
Now, the first feature
is Auto Layout.

00:07:50.926 --> 00:07:52.386 A:middle
Auto Layout is not
a new technology,

00:07:53.056 --> 00:07:54.636 A:middle
but it's super important.

00:07:55.196 --> 00:07:58.286 A:middle
It allows your applications
to respond to dynamic changes

00:07:58.286 --> 00:07:59.386 A:middle
and layout constraints.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.536 --> 00:08:01.626 A:middle
Well, what does this mean?

00:08:01.626 --> 00:08:05.276 A:middle
Well, examples of these
are the resolution increase

00:08:05.276 --> 00:08:07.546 A:middle
on the iPhone 5, or if--

00:08:07.716 --> 00:08:09.866 A:middle
I'm sure you're all localizing
your applications, right?

00:08:10.326 --> 00:08:12.606 A:middle
If your strings are changing
size because you switch

00:08:12.606 --> 00:08:14.776 A:middle
to German mode and
everything is crazy long there,

00:08:15.576 --> 00:08:16.766 A:middle
you want your application

00:08:16.766 --> 00:08:20.366 A:middle
to look beautifully no matter
what language people are using

00:08:20.366 --> 00:08:20.996 A:middle
it in, right?

00:08:21.616 --> 00:08:24.066 A:middle
Well, Auto Layout is perfectly
designed to solve this problem

00:08:24.426 --> 00:08:26.786 A:middle
and given the constraint
changes--

00:08:26.786 --> 00:08:29.126 A:middle
or the control metric
changes in iOS 7,

00:08:29.426 --> 00:08:30.526 A:middle
it's more important than ever.

00:08:31.046 --> 00:08:33.306 A:middle
And this is why Xcode
5 has gone back

00:08:33.586 --> 00:08:37.696 A:middle
to redesign how Auto
Layout works to put you

00:08:37.696 --> 00:08:39.976 A:middle
in complete control of your
Auto Layout constraints.

00:08:40.515 --> 00:08:45.706 A:middle
[ Applause ]

00:08:46.206 --> 00:08:48.446 A:middle
So the best thing about this
is it couldn't be simpler.

00:08:49.326 --> 00:08:53.276 A:middle
Now, you can add and even delete
constraints whenever you want.

00:08:54.386 --> 00:08:57.266 A:middle
If you add a constraint,
Xcode won't change it on you.

00:08:57.846 --> 00:08:58.656 A:middle
And Xcode provides-

00:08:59.516 --> 00:09:03.576 A:middle
[ Applause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:04.076 --> 00:09:06.326 A:middle
And Xcode provides a
lot of great features

00:09:06.666 --> 00:09:10.166 A:middle
for solving common problems,
telling you if there's something

00:09:10.166 --> 00:09:12.536 A:middle
that needs to be fixed
and adding constraints

00:09:12.536 --> 00:09:15.246 A:middle
for you automatically because
all the previous on-demand

00:09:15.246 --> 00:09:18.966 A:middle
behavior is now at your
fingertips when you want it.

00:09:18.966 --> 00:09:19.636 A:middle
It's really great.

00:09:20.756 --> 00:09:26.246 A:middle
So to wrap-up our quick overview
of layout and interface design,

00:09:26.246 --> 00:09:28.066 A:middle
I want to talk quickly
about the Asset Catalog.

00:09:28.556 --> 00:09:32.256 A:middle
The Asset Catalog is a new
feature of Xcode 5 that shows

00:09:32.256 --> 00:09:33.716 A:middle
up as a single entry
in your project.

00:09:34.776 --> 00:09:37.576 A:middle
This entry now collects all
of your image-based resources

00:09:37.576 --> 00:09:40.336 A:middle
such as your Launch Images
icons, list images that you use

00:09:40.336 --> 00:09:42.526 A:middle
in your project together
into one place.

00:09:44.006 --> 00:09:45.766 A:middle
Well, in addition to
cleaning up all the clutter

00:09:45.766 --> 00:09:47.816 A:middle
from your project, Xcode knows

00:09:47.816 --> 00:09:49.596 A:middle
about the multiple different
resolutions you need.

00:09:49.766 --> 00:09:51.716 A:middle
It knows about what
devices you're targeting

00:09:51.716 --> 00:09:54.416 A:middle
and what resolution
icons and all that stuff

00:09:54.416 --> 00:09:58.026 A:middle
that you previously had to
just know, naming conventions,

00:09:58.256 --> 00:09:59.986 A:middle
everything and it
handles it for you.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.166 --> 00:10:02.226 A:middle
If you're missing something,
it's now immediately obvious.

00:10:03.216 --> 00:10:07.616 A:middle
Also because-- also Xcode
knows about new iOS 7 APIs

00:10:07.616 --> 00:10:10.656 A:middle
and so it can even
optimize the loading

00:10:10.976 --> 00:10:13.686 A:middle
of your image-based resources
using these new APIs.

00:10:13.686 --> 00:10:15.636 A:middle
And it does it for you
automatically so you don't have

00:10:15.636 --> 00:10:16.896 A:middle
to worry about it, it's great.

00:10:18.156 --> 00:10:19.476 A:middle
And building on the
Asset Catalog,

00:10:19.696 --> 00:10:23.146 A:middle
you saw the great new Image
Slicing feature of Xcode.

00:10:23.516 --> 00:10:26.026 A:middle
These makes it easier than ever
to make your images resizable

00:10:26.466 --> 00:10:27.886 A:middle
and it just feels natural.

00:10:29.526 --> 00:10:31.996 A:middle
Now, to show you how to bring
your application to iOS 7,

00:10:32.146 --> 00:10:34.876 A:middle
I'd like to invite up Jon
Hess to show you how to do it.

00:10:35.516 --> 00:10:42.526 A:middle
[ Applause ]

00:10:43.026 --> 00:10:43.586 A:middle
&gt;&gt; Thanks Chris.

00:10:44.356 --> 00:10:46.836 A:middle
My colleagues and I have been
working on iOS Application

00:10:46.836 --> 00:10:49.346 A:middle
for tracking your runs and
exercising application.

00:10:49.736 --> 00:10:52.326 A:middle
It lets you seen here by
routes, earn achievements

00:10:52.326 --> 00:10:53.196 A:middle
and challenge your friends.

00:10:53.526 --> 00:10:56.126 A:middle
I want to show you just how easy
it is to update this application

00:10:56.516 --> 00:10:59.566 A:middle
for iOS 7 using the new
features of Xcode 5.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.696 --> 00:11:02.206 A:middle
First, we need to get started

00:11:02.206 --> 00:11:03.546 A:middle
with a new copy of
our application.

00:11:04.226 --> 00:11:06.586 A:middle
From right here on the Welcome
screen, I can choose to check

00:11:06.586 --> 00:11:07.566 A:middle
out an existing project.

00:11:08.166 --> 00:11:11.246 A:middle
In the streamline
reposit checkout workflow,

00:11:11.436 --> 00:11:15.096 A:middle
I can see all my repositories,
my recent repositories,

00:11:15.356 --> 00:11:17.236 A:middle
or I can focus in
right on my favorites.

00:11:17.576 --> 00:11:22.276 A:middle
I'm going to grab a copy of JogR
and check it out to the desktop.

00:11:22.386 --> 00:11:26.296 A:middle
Now, we have several independent
yet related tasks that I want

00:11:26.296 --> 00:11:27.746 A:middle
to show you today for
updating our application.

00:11:28.126 --> 00:11:30.546 A:middle
This is a great opportunity
for us to use a Branch.

00:11:31.756 --> 00:11:33.446 A:middle
Creating a Branch
in Xcode 5 is easy.

00:11:34.036 --> 00:11:36.556 A:middle
From right here in the Source
Control Menu at the top

00:11:36.556 --> 00:11:39.586 A:middle
of the Main Menu, I'm
going to choose New Branch.

00:11:40.846 --> 00:11:43.056 A:middle
I'm going to give it
a Name, and I'm done.

00:11:43.376 --> 00:11:45.496 A:middle
Creating a Branch in
Xcode 5 is just one step.

00:11:47.996 --> 00:11:49.806 A:middle
Now, earlier when I
checked out my project,

00:11:50.136 --> 00:11:52.156 A:middle
you may have noticed there are
several repositories available

00:11:52.156 --> 00:11:52.886 A:middle
for me to access.

00:11:53.286 --> 00:11:54.686 A:middle
I have configured each of those

00:11:54.686 --> 00:11:56.166 A:middle
in the accounts preferences
in Xcode.

00:11:56.876 --> 00:11:59.796 A:middle
Another type of account that I
can configure is my Apple ID.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.166 --> 00:12:02.506 A:middle
And if my Apple ID
configured, I can choose a team

00:12:02.506 --> 00:12:04.056 A:middle
to associate with
my application.

00:12:05.306 --> 00:12:07.666 A:middle
By associating a team with
my application, Xcode help--

00:12:07.666 --> 00:12:09.736 A:middle
able to help me in
all sorts of ways.

00:12:09.946 --> 00:12:11.926 A:middle
For example, I can find the
right signing identities

00:12:11.926 --> 00:12:13.886 A:middle
and credentials to use
when building application.

00:12:14.486 --> 00:12:16.866 A:middle
It also helps me here
in the Capabilities tab

00:12:17.306 --> 00:12:19.386 A:middle
where I can see a list
of all the Apple services

00:12:19.386 --> 00:12:20.696 A:middle
that I can adopt
in my application.

00:12:21.546 --> 00:12:22.746 A:middle
I'm specifically interested

00:12:22.746 --> 00:12:25.556 A:middle
in the new background
modes feature of iOS 7.

00:12:25.556 --> 00:12:27.906 A:middle
I want to be able to
update our applications

00:12:27.906 --> 00:12:30.396 A:middle
so that it continues to get
location data as the user runs.

00:12:30.476 --> 00:12:33.916 A:middle
Turning on the feature is easy.

00:12:34.036 --> 00:12:35.276 A:middle
I'm just going to
flip the switch,

00:12:36.346 --> 00:12:37.776 A:middle
take a look at available
options,

00:12:38.306 --> 00:12:39.656 A:middle
and often do location updates.

00:12:40.166 --> 00:12:42.106 A:middle
Xcode takes care of
all of the details.

00:12:42.106 --> 00:12:45.266 A:middle
We have to update Info.plist
keys, link new frameworks,

00:12:45.266 --> 00:12:47.086 A:middle
change entitlements,
provisioning profiles,

00:12:47.456 --> 00:12:49.526 A:middle
it's all taken care of
for me, and I don't have

00:12:49.526 --> 00:12:51.206 A:middle
to remember each of
those small details.

00:12:51.856 --> 00:12:53.426 A:middle
That's great because I
have trouble remembering

00:12:53.426 --> 00:12:54.126 A:middle
those details.

00:12:54.886 --> 00:12:57.116 A:middle
Another area where I have
trouble remembering the details

00:12:57.186 --> 00:12:58.166 A:middle
is with image names.

00:12:58.556 --> 00:13:00.806 A:middle
I can never remember if an
image is supposed to be named,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:01.616 --> 00:13:05.876 A:middle
@2x tilde iPhone,
or tilde iPhone@2x.

00:13:06.296 --> 00:13:09.376 A:middle
Xcode solves all that for
me, there's a new feature

00:13:09.376 --> 00:13:11.296 A:middle
in Xcode 5, Asset Catalogs.

00:13:12.556 --> 00:13:13.516 A:middle
With an Asset Catalog,

00:13:13.516 --> 00:13:15.376 A:middle
I can name the resources
any way that I want.

00:13:15.496 --> 00:13:19.136 A:middle
I can get started with
an Asset Catalog just

00:13:19.136 --> 00:13:20.216 A:middle
like any other document

00:13:20.416 --> 00:13:21.996 A:middle
by creating a new instance
from the templates.

00:13:22.696 --> 00:13:25.116 A:middle
I want to show you how to
move my existing content

00:13:25.396 --> 00:13:26.286 A:middle
into a new catalog.

00:13:26.286 --> 00:13:30.456 A:middle
From right here on the project
editor, I can see my app icon.

00:13:30.866 --> 00:13:32.556 A:middle
And I can choose to
use an Asset Catalog.

00:13:32.866 --> 00:13:34.396 A:middle
Xcode is going to
migrate my app icon

00:13:34.396 --> 00:13:35.726 A:middle
into an Asset Catalog for me.

00:13:35.726 --> 00:13:38.856 A:middle
I'm going to choose to bring
my Launch Image along too

00:13:39.776 --> 00:13:40.686 A:middle
and migrate them both.

00:13:42.496 --> 00:13:45.286 A:middle
Here in the groups and files
tree, I can see my new content,

00:13:45.736 --> 00:13:47.496 A:middle
the app icon, and
my Launch Images.

00:13:48.086 --> 00:13:50.726 A:middle
There're some new empty slots
here available for content

00:13:51.506 --> 00:13:52.466 A:middle
that I haven't filled in yet.

00:13:53.096 --> 00:13:56.246 A:middle
Specifically, there's
the 60 by 60 app icon

00:13:56.636 --> 00:13:58.086 A:middle
for iOS 7 for iPhones.

00:13:59.346 --> 00:14:01.246 A:middle
I have an icon for that
right here in my dock.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:01.246 --> 00:14:07.076 A:middle
I can just drag it in and drop
it into place and I'm done.

00:14:07.296 --> 00:14:10.306 A:middle
I also have all these other
images in my project that I'd

00:14:10.306 --> 00:14:11.216 A:middle
like to important as well.

00:14:12.586 --> 00:14:15.306 A:middle
From here in the Add
Menu, I can choose

00:14:15.306 --> 00:14:16.866 A:middle
to import content
from myproject.

00:14:17.566 --> 00:14:19.786 A:middle
Xcode is going to analyze
all the files in my project

00:14:20.196 --> 00:14:21.606 A:middle
and suggest the ones
that are members

00:14:21.606 --> 00:14:23.256 A:middle
of the same target
as my Asset Catalog.

00:14:23.816 --> 00:14:27.586 A:middle
I'm going to go ahead and
choose to Import these

00:14:28.586 --> 00:14:30.456 A:middle
and because I'd followed
the naming conventions

00:14:30.916 --> 00:14:36.166 A:middle
of existing releases of iOS,
Xcode is able to aggregate

00:14:36.166 --> 00:14:38.286 A:middle
and group all those
images automatically.

00:14:38.286 --> 00:14:40.196 A:middle
Now, in the groups in the
groups and files tree ,

00:14:40.196 --> 00:14:46.586 A:middle
I can focus on the source
code that I edit everyday.

00:14:46.636 --> 00:14:47.866 A:middle
Another area that I
want to take a look

00:14:47.866 --> 00:14:49.616 A:middle
at today is my Storyboard.

00:14:49.696 --> 00:14:52.616 A:middle
I want to make sure that
all of my scenes look great

00:14:52.616 --> 00:14:55.716 A:middle
with the new appearance
of iOS 7.

00:14:55.866 --> 00:14:58.496 A:middle
By quickly surveying, the
content of each of the scenes,

00:14:59.616 --> 00:15:00.766 A:middle
I see they all look great.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:01.126 --> 00:15:02.016 A:middle
But over here at the end,

00:15:02.396 --> 00:15:04.976 A:middle
I can see that this Segmented
Control has quite a bit

00:15:04.976 --> 00:15:05.716 A:middle
of padding around it.

00:15:07.006 --> 00:15:07.766 A:middle
Let's focus on that.

00:15:09.516 --> 00:15:12.826 A:middle
The Segmented Control in iOS 7
is significantly more compact

00:15:12.826 --> 00:15:13.566 A:middle
than its predecessor.

00:15:13.566 --> 00:15:15.166 A:middle
This is an opportunity for me.

00:15:15.686 --> 00:15:17.286 A:middle
I can focus on my
content instead

00:15:17.286 --> 00:15:18.606 A:middle
of the Chrome used
to manipulate it.

00:15:18.606 --> 00:15:22.986 A:middle
I'll move the Segmented Control
here to the bottom of the scene.

00:15:23.556 --> 00:15:25.156 A:middle
And I want to resize
the image to be larger.

00:15:25.936 --> 00:15:31.956 A:middle
Some straight, but
honestly, I'm a bit of worried

00:15:31.956 --> 00:15:34.026 A:middle
about how this is going to
look on older versions of iOS.

00:15:34.646 --> 00:15:36.916 A:middle
I could build and run in the
simulator, navigate my way

00:15:36.916 --> 00:15:40.116 A:middle
to the scene, come back here,
make some changes, rinse, wash,

00:15:40.116 --> 00:15:44.366 A:middle
repeat, but we have
streamlined this in Xcode 5.

00:15:44.586 --> 00:15:48.996 A:middle
Using the assistant, I can
choose to see a preview

00:15:48.996 --> 00:15:52.456 A:middle
of my application to see how
it will look in all sorts

00:15:52.456 --> 00:15:56.576 A:middle
of different context,
specifically I can look

00:15:56.576 --> 00:15:59.856 A:middle
and see how it will appear
with iOS 6 using these controls

00:15:59.856 --> 00:16:03.046 A:middle
in the bottom right corner.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:03.196 --> 00:16:05.246 A:middle
Sure enough, this Segmented
Control doesn't fit.

00:16:05.786 --> 00:16:08.176 A:middle
It's too tall and it's clipped
in that small space down there.

00:16:08.806 --> 00:16:11.636 A:middle
With the current layout
system that I'm using, Springs

00:16:11.636 --> 00:16:14.506 A:middle
and Struts, I can't specify
what I want to specify.

00:16:15.016 --> 00:16:15.986 A:middle
I want to be able to say

00:16:15.986 --> 00:16:18.326 A:middle
that the Segmented Control
should have a fixed distance

00:16:18.326 --> 00:16:21.296 A:middle
of padding between the image
above it and the control itself

00:16:21.296 --> 00:16:23.356 A:middle
and between the control
and the containing view

00:16:23.356 --> 00:16:24.726 A:middle
to this underneath.

00:16:26.456 --> 00:16:28.306 A:middle
Auto Layout is a perfect
solution for this.

00:16:28.756 --> 00:16:31.606 A:middle
With Auto Layout, not only
can I specify those exact sort

00:16:31.606 --> 00:16:33.626 A:middle
of constraints that I mentioned
there with the spacing above

00:16:33.626 --> 00:16:34.486 A:middle
and below the control.

00:16:34.486 --> 00:16:36.576 A:middle
But I can also specify
things like alignments,

00:16:36.576 --> 00:16:38.596 A:middle
I can have a control
always be centered,

00:16:38.846 --> 00:16:41.426 A:middle
I can even say the two controls
should be sized equally,

00:16:41.786 --> 00:16:43.636 A:middle
is bigger-- the bigger
one of the two of them,

00:16:43.636 --> 00:16:45.756 A:middle
until there's not space for both
of them, and then I can say,

00:16:45.756 --> 00:16:47.666 A:middle
which one should shrink first.

00:16:48.856 --> 00:16:51.396 A:middle
Let me show you just how
easy it is to get started

00:16:51.636 --> 00:16:53.536 A:middle
with all these precision
controls for Auto Layout.

00:16:54.096 --> 00:16:56.946 A:middle
In the file spector
for my Storyboard,

00:16:57.716 --> 00:17:01.126 A:middle
I can enable Auto Layout.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:01.126 --> 00:17:03.946 A:middle
And you can see everything in my
interfaces is exactly the way is

00:17:03.946 --> 00:17:06.246 A:middle
when I-- is-- before
I checked on the box.

00:17:07.215 --> 00:17:09.126 A:middle
Now, I get to start
adding constraints to take

00:17:09.126 --> 00:17:12.726 A:middle
over complete control over
the dynamic resizing behavior

00:17:12.726 --> 00:17:14.076 A:middle
of all the elements
in my interface.

00:17:15.496 --> 00:17:17.175 A:middle
There's many new ways
to add constraints.

00:17:17.175 --> 00:17:18.636 A:middle
Constraints are what
control this behavior.

00:17:20.445 --> 00:17:23.256 A:middle
One of my favorite new ways to
add constraints in Xcode 5 is

00:17:23.256 --> 00:17:25.336 A:middle
by directly control dragging
between two elements.

00:17:25.546 --> 00:17:28.856 A:middle
I'm going to hold the
control key and click and drag

00:17:28.856 --> 00:17:29.736 A:middle
from the Segmented Control.

00:17:29.736 --> 00:17:34.776 A:middle
And by choosing the containing
view, I can fix the bottom space

00:17:34.776 --> 00:17:36.486 A:middle
from the Segmented
Control to its container.

00:17:37.956 --> 00:17:40.606 A:middle
By repeating the gesture
to the image view above it,

00:17:40.956 --> 00:17:42.606 A:middle
I can pin the same
vertical spacing

00:17:42.606 --> 00:17:45.716 A:middle
between the Segmented
Control and the Image.

00:17:45.896 --> 00:17:47.196 A:middle
Zooming in on my
Segmented Control,

00:17:47.326 --> 00:17:49.346 A:middle
I can see the two new
constraints that I've added.

00:17:49.746 --> 00:17:50.736 A:middle
But right now, they're orange.

00:17:51.626 --> 00:17:52.596 A:middle
Interface Builder is telling me

00:17:52.596 --> 00:17:54.256 A:middle
that my constraint
network isn't complete.

00:17:55.066 --> 00:17:57.956 A:middle
I have fully specified the
controls vertical position

00:17:57.956 --> 00:17:59.736 A:middle
and size, but I haven't
said anything

00:17:59.736 --> 00:18:00.826 A:middle
about its horizontal layout.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:01.386 --> 00:18:02.436 A:middle
I need more constraints.

00:18:03.046 --> 00:18:07.676 A:middle
I could control drag
between the Segmented Control

00:18:07.676 --> 00:18:10.616 A:middle
and the other edges and repeat
for the image views and labels

00:18:10.616 --> 00:18:12.026 A:middle
that I have making up the
rest of the interface.

00:18:12.026 --> 00:18:15.136 A:middle
But in addition to having these
precision editing controls

00:18:15.136 --> 00:18:17.626 A:middle
for constraints, Interface
Builder also has features

00:18:17.626 --> 00:18:20.006 A:middle
to make broad sweeping changes
all of your constraints.

00:18:21.366 --> 00:18:22.676 A:middle
I'm going to click
here in the background

00:18:23.606 --> 00:18:24.876 A:middle
and select all my views at once.

00:18:25.216 --> 00:18:30.026 A:middle
And in the Menu, I'm going to
choose Add Missing Constraints.

00:18:30.466 --> 00:18:35.416 A:middle
Interface Builder analyzes the
layout of all the views that are

00:18:35.416 --> 00:18:37.456 A:middle
in my canvas and looks at all
the interesting constraints

00:18:37.456 --> 00:18:39.796 A:middle
that I've already established
and finds the constraints

00:18:39.796 --> 00:18:41.976 A:middle
that it thinks would be
best to complete my layout.

00:18:46.046 --> 00:18:47.566 A:middle
Zooming in on my
Segmented Control,

00:18:47.606 --> 00:18:50.296 A:middle
I can see the constraints
are now blue indicating

00:18:50.296 --> 00:18:51.376 A:middle
that I've completed the layout.

00:18:52.376 --> 00:18:54.306 A:middle
Specifically, I can see
two new constraints,

00:18:54.616 --> 00:18:59.176 A:middle
a centering constraint here
and a padding constraint

00:18:59.176 --> 00:19:01.566 A:middle
on the left fixing the distance
from the Segmented Control

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:01.566 --> 00:19:02.326 A:middle
to the edge of the container.

00:19:03.246 --> 00:19:06.096 A:middle
Now, these two controls-- these
two constraints together imply

00:19:06.726 --> 00:19:09.856 A:middle
that I'll also have an equal
distance on the right hand side.

00:19:10.776 --> 00:19:12.866 A:middle
But this isn't the way that I
like to think about this layout.

00:19:13.306 --> 00:19:15.516 A:middle
I like to think of the Segmented
Control as being pinned

00:19:15.586 --> 00:19:18.356 A:middle
by equal distances on both the
left and the right and that--

00:19:18.486 --> 00:19:20.266 A:middle
leaving that to imply that
the control is centered.

00:19:20.946 --> 00:19:24.006 A:middle
No problem, with auto layout,
you're in complete control

00:19:24.096 --> 00:19:25.346 A:middle
of the constraints in Xcode 5.

00:19:26.076 --> 00:19:28.036 A:middle
This automatically generated
its centering constraint,

00:19:28.186 --> 00:19:30.016 A:middle
I can just select
it and delete it.

00:19:31.256 --> 00:19:33.756 A:middle
I can replace it with a
constraint from the right edge

00:19:33.756 --> 00:19:34.946 A:middle
of the Segmented
Control of the container.

00:19:34.946 --> 00:19:39.026 A:middle
Now the layout is exactly the
same but more importantly,

00:19:39.136 --> 00:19:40.636 A:middle
it's in the terms
that I like to think

00:19:40.636 --> 00:19:42.246 A:middle
about it and understand it.

00:19:44.076 --> 00:19:48.316 A:middle
Doing the assistant editor, I
can see that switching to iOS 6,

00:19:49.106 --> 00:19:51.566 A:middle
my application looks
great with no compromises.

00:19:51.566 --> 00:19:55.266 A:middle
Now, is the more important
time than ever for you

00:19:55.266 --> 00:19:58.116 A:middle
to adapt Auto Layout in your
applications and with Xcode 5,

00:19:58.366 --> 00:19:59.176 A:middle
it couldn't be easier.

00:19:59.176 --> 00:19:59.976 A:middle
Back to you Chris.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.516 --> 00:20:02.686 A:middle
[Applause]

00:20:03.186 --> 00:20:03.496 A:middle
&gt;&gt; All right.

00:20:04.506 --> 00:20:04.966 A:middle
Thanks John.

00:20:05.156 --> 00:20:07.266 A:middle
Now that you've seen how
to design the interface

00:20:07.266 --> 00:20:09.376 A:middle
for your app, let's
talk about the compiler

00:20:09.376 --> 00:20:12.926 A:middle
and language features
used to implement it.

00:20:13.256 --> 00:20:15.696 A:middle
Where Xcode 4 supported
two different compilers,

00:20:16.386 --> 00:20:19.536 A:middle
Xcode 5 leaves the last
remnants of GCC behind,

00:20:20.226 --> 00:20:22.506 A:middle
focusing on a single
great compiler technology,

00:20:22.896 --> 00:20:23.656 A:middle
the Apple LLVM compiler.

00:20:27.826 --> 00:20:29.836 A:middle
[applause] The Apple LLVM
compiler is a great compiler

00:20:30.056 --> 00:20:33.916 A:middle
and this is why we use it to
build iOS 7, OS X Mavericks,

00:20:34.246 --> 00:20:36.396 A:middle
and Xcode 5 with this compiler.

00:20:37.916 --> 00:20:40.196 A:middle
Now, you may be wondering
why is it 5?

00:20:40.196 --> 00:20:40.846 A:middle
What's new?

00:20:41.946 --> 00:20:45.256 A:middle
Well, this year, we've gone back
to challenge basic assumptions

00:20:45.256 --> 00:20:48.556 A:middle
of C that have been baked
in since the early 1970s

00:20:49.226 --> 00:20:53.146 A:middle
to solve fundamental
problems with header files?

00:20:53.296 --> 00:20:57.716 A:middle
Oh wait, wait, header files,
what's the problem here?

00:20:58.586 --> 00:21:00.106 A:middle
Let's think about what
happens when you go

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.106 --> 00:21:01.636 A:middle
to compile a source
file of your project.

00:21:01.726 --> 00:21:03.836 A:middle
Say it's 100 lines a code,
it's no big deal, right?

00:21:03.836 --> 00:21:04.566 A:middle
This should compile fast.

00:21:05.626 --> 00:21:08.706 A:middle
Well, the compiler starts
parsing it and sees an include

00:21:08.706 --> 00:21:11.996 A:middle
or an import, and it has
start handling that, right?

00:21:12.166 --> 00:21:13.576 A:middle
Well, say you pull in a UIKit.

00:21:14.216 --> 00:21:18.016 A:middle
UIKit then imports a few other
things and the compiler has

00:21:18.016 --> 00:21:20.386 A:middle
to go parse that and it
has to recursively chase

00:21:20.386 --> 00:21:24.616 A:middle
down all the things that your
file includes and now copies

00:21:24.616 --> 00:21:27.616 A:middle
and pastes all the codes from
all those header files together

00:21:27.616 --> 00:21:29.086 A:middle
into what's called
the translation unit

00:21:29.366 --> 00:21:31.796 A:middle
which is everything that
that file references.

00:21:32.556 --> 00:21:34.396 A:middle
Now, this thing is
something really big.

00:21:34.396 --> 00:21:36.696 A:middle
Instead of 100 lines of
code, it's tens of thousands.

00:21:37.236 --> 00:21:40.056 A:middle
Instead of 10K, it's
10 megs, right?

00:21:40.056 --> 00:21:41.526 A:middle
This takes a lot
of time to parse.

00:21:41.926 --> 00:21:43.796 A:middle
And it's particularly redundant
when you think about the fact

00:21:43.796 --> 00:21:44.746 A:middle
that that the compiler does this

00:21:44.746 --> 00:21:46.946 A:middle
for every single file
in your application.

00:21:47.416 --> 00:21:52.026 A:middle
Now, this is not a new
problem by any means

00:21:52.026 --> 00:21:55.886 A:middle
and we do have a few
pretty terrible hacks

00:21:56.006 --> 00:21:57.236 A:middle
like Precompiled Headers

00:21:57.736 --> 00:21:59.726 A:middle
that helps solve some
of these problems.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.386 --> 00:22:03.626 A:middle
But Precompiled Headers, you can
only have one Precompiled Header

00:22:03.676 --> 00:22:04.306 A:middle
per source file.

00:22:04.976 --> 00:22:06.706 A:middle
You also have to manage
your Precompiled Header.

00:22:06.706 --> 00:22:08.146 A:middle
And I don't know about you,

00:22:08.146 --> 00:22:11.226 A:middle
but why am I handling a
compiler doing something

00:22:11.226 --> 00:22:12.406 A:middle
that it should be doing for me?

00:22:12.456 --> 00:22:13.466 A:middle
This doesn't make sense.

00:22:14.076 --> 00:22:15.586 A:middle
Here we are in the 2013, right?

00:22:16.576 --> 00:22:19.616 A:middle
Well, with Xcode 5, there's
a new feature called Modules

00:22:19.836 --> 00:22:21.056 A:middle
which defines this away.

00:22:22.346 --> 00:22:25.086 A:middle
A module is an optimized
symbol database

00:22:25.286 --> 00:22:26.476 A:middle
for system header files.

00:22:28.086 --> 00:22:29.036 A:middle
What does this do?

00:22:29.326 --> 00:22:31.316 A:middle
Well now, things work a
little bit differently

00:22:31.866 --> 00:22:33.146 A:middle
but they feel very similar.

00:22:33.716 --> 00:22:35.746 A:middle
The compiler starts by
building a set of modules

00:22:35.746 --> 00:22:38.916 A:middle
for the system header files so
it pulls all the texts from all

00:22:38.916 --> 00:22:41.316 A:middle
of these headers together into
an automatized symbol database

00:22:41.666 --> 00:22:44.136 A:middle
that makes it super easy and
fast for the compiler to query.

00:22:45.096 --> 00:22:47.846 A:middle
And now when you're going to
compile a single source file,

00:22:48.296 --> 00:22:50.016 A:middle
maybe it sees a reference
to UIView,

00:22:50.416 --> 00:22:52.796 A:middle
it can just do a simple
database query to find

00:22:52.796 --> 00:22:54.316 A:middle
out everything it needs
to know about UIView.

00:22:54.316 --> 00:22:57.226 A:middle
It doesn't have to go
parse tens of megabytes

00:22:57.226 --> 00:22:59.286 A:middle
of code just to find a way.

00:22:59.366 --> 00:23:01.906 A:middle
And this database gets shared

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:01.906 --> 00:23:04.006 A:middle
across all the files
in your project.

00:23:04.816 --> 00:23:06.996 A:middle
Suddenly getting a little
bit more interesting?

00:23:08.206 --> 00:23:10.766 A:middle
And remember that it's
not just the compiler

00:23:10.766 --> 00:23:11.776 A:middle
that parses your code.

00:23:12.706 --> 00:23:15.766 A:middle
Xcode uses LLVM for all of
its source code features

00:23:15.766 --> 00:23:18.766 A:middle
like indexing and code
completion, syntax highlighting,

00:23:19.176 --> 00:23:21.286 A:middle
and even Xcode gets
to use these modules.

00:23:22.386 --> 00:23:25.546 A:middle
Well, what does this do?

00:23:25.916 --> 00:23:28.036 A:middle
Well, the best thing
about modules is

00:23:28.036 --> 00:23:29.716 A:middle
that they are completely
transparent.

00:23:30.426 --> 00:23:33.316 A:middle
They're on by default from your
projects and you can get them

00:23:33.316 --> 00:23:35.556 A:middle
in your applications just by
enabling a simple build setter.

00:23:36.586 --> 00:23:37.796 A:middle
If you do this, now suddenly,

00:23:37.796 --> 00:23:40.956 A:middle
the need to handle PCH
is dramatically reduced,

00:23:41.326 --> 00:23:43.766 A:middle
but the compiler also knows

00:23:43.766 --> 00:23:45.496 A:middle
about the frameworks
you're using,

00:23:45.776 --> 00:23:47.906 A:middle
which means that now the
compiler can automatically link

00:23:47.906 --> 00:23:49.486 A:middle
those frameworks into
your application.

00:23:49.586 --> 00:23:52.166 A:middle
You don't have to drag
frameworks in your project name

00:23:52.166 --> 00:23:54.976 A:middle
or get terrible link errors
about symbols you have no idea--

00:23:55.516 --> 00:24:00.606 A:middle
[ Applause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:01.106 --> 00:24:03.606 A:middle
But the big story with
modules is simply performance

00:24:03.606 --> 00:24:05.426 A:middle
and how fast the
compiler and our tools go.

00:24:06.236 --> 00:24:08.406 A:middle
And I mean, there's
lots of examples

00:24:08.406 --> 00:24:10.526 A:middle
but to give you one
really concrete example,

00:24:11.076 --> 00:24:14.446 A:middle
when the Mail app in iOS 7
decided to switch the modules,

00:24:15.096 --> 00:24:18.406 A:middle
they saw their total build
time decreased by 40 percent,

00:24:19.226 --> 00:24:20.846 A:middle
which is a huge reduction
in build time.

00:24:21.546 --> 00:24:24.486 A:middle
And better than that, their
indexing time was reduced

00:24:24.486 --> 00:24:26.226 A:middle
by almost two and a half times.

00:24:26.376 --> 00:24:33.386 A:middle
This is a major improvement in
productivity working with Xcode.

00:24:33.946 --> 00:24:36.716 A:middle
Now, modules work
with Objective-C and C

00:24:36.716 --> 00:24:41.656 A:middle
and system header files, but we
know that many of you are C++--

00:24:41.766 --> 00:24:44.256 A:middle
passionate about C++ and
maybe are game developer

00:24:44.676 --> 00:24:47.436 A:middle
and you'll be really thrilled
to know that in Xcode 5,

00:24:47.436 --> 00:24:50.326 A:middle
we're continuing to lead the
industry in C++11 support.

00:24:51.096 --> 00:24:55.446 A:middle
And at this point, Xcode now
supports all the major C++11

00:24:55.446 --> 00:24:57.896 A:middle
language and library
features, including things

00:24:57.896 --> 00:25:00.236 A:middle
like inheriting constructors
which are a great way

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:00.236 --> 00:25:01.166 A:middle
to define away a huge amount

00:25:01.166 --> 00:25:02.796 A:middle
of boiler plate in
your C++ classes.

00:25:02.796 --> 00:25:08.316 A:middle
Now, in addition to just being
able to parse your source code

00:25:08.316 --> 00:25:11.566 A:middle
and be able to handle your
program, you also want to--

00:25:11.956 --> 00:25:12.616 A:middle
you also want the compiler

00:25:12.616 --> 00:25:14.506 A:middle
to give you a really
optimized code as well.

00:25:15.246 --> 00:25:18.116 A:middle
And if you upgrade and build
your application with Xcode 5,

00:25:18.546 --> 00:25:20.726 A:middle
you will very likely find
that it runs a lot faster

00:25:20.726 --> 00:25:23.036 A:middle
because the compiler is
better in innumerable ways.

00:25:24.016 --> 00:25:25.886 A:middle
But there's one feature I
really want to highlight

00:25:26.136 --> 00:25:28.696 A:middle
and that's the new
LLVM Auto-Vectorizer.

00:25:29.316 --> 00:25:33.906 A:middle
The Auto-Vectorizer analyzes
your code to find places

00:25:33.906 --> 00:25:36.946 A:middle
where you could be doing two,
four, eight, even sixteen

00:25:36.946 --> 00:25:38.546 A:middle
or thirty-two operations
at a time

00:25:39.156 --> 00:25:41.316 A:middle
by using the vector features

00:25:41.316 --> 00:25:43.926 A:middle
of all the modern processors
that we're targeting.

00:25:45.116 --> 00:25:47.796 A:middle
The Auto-Vectorizer is
simply about performance

00:25:47.856 --> 00:25:49.976 A:middle
and if you're doing dense
number crunching code,

00:25:50.286 --> 00:25:52.656 A:middle
you can see massive
speedups in your application.

00:25:53.466 --> 00:25:55.226 A:middle
Here's an example of
an eight times speed

00:25:55.226 --> 00:25:56.906 A:middle
up on a Neural networking
program,

00:25:57.256 --> 00:26:00.366 A:middle
matrix operations three times
faster, scientific code,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:00.366 --> 00:26:03.546 A:middle
compression, it's 50
and 60 percent faster,

00:26:04.226 --> 00:26:07.096 A:middle
all by enabling a
single build setting.

00:26:07.236 --> 00:26:10.206 A:middle
The Auto-Vectorizer supports
both AMD and Intel chips.

00:26:10.766 --> 00:26:14.596 A:middle
It even includes support for
the new AVX2 instruction set

00:26:14.596 --> 00:26:17.406 A:middle
and the Haswell processors
announced just yesterday.

00:26:18.626 --> 00:26:21.976 A:middle
That's pretty great and
you should try that.

00:26:21.976 --> 00:26:24.036 A:middle
Now, if you use the compiler
from the command line,

00:26:25.386 --> 00:26:27.236 A:middle
you'll be perhaps
excited to know

00:26:27.236 --> 00:26:29.576 A:middle
that Mavericks has made this
even better than before.

00:26:30.906 --> 00:26:32.796 A:middle
Now, Mavericks includes stubs

00:26:32.796 --> 00:26:35.226 A:middle
for command line tools built
right into the operating system

00:26:36.116 --> 00:26:37.966 A:middle
which means that if
you install Xcode,

00:26:38.186 --> 00:26:40.386 A:middle
you'll find that you already
have command line tools

00:26:41.086 --> 00:26:43.226 A:middle
and as you upgrade Xcode
from the Mac App Store,

00:26:43.226 --> 00:26:45.526 A:middle
your command line tools
are all automatically kept

00:26:45.526 --> 00:26:46.396 A:middle
up to date for you.

00:26:46.956 --> 00:26:47.856 A:middle
It couldn't be easier.

00:26:53.586 --> 00:26:55.896 A:middle
[applause] Now, compilers are
fun and they build our code

00:26:55.896 --> 00:26:57.116 A:middle
and that's important stuff.

00:26:57.116 --> 00:26:59.806 A:middle
But the compiler technology
does other things for us.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:00.226 --> 00:27:03.206 A:middle
It also works in Xcode to
help IDE features make us

00:27:03.206 --> 00:27:03.786 A:middle
more productive.

00:27:04.676 --> 00:27:06.966 A:middle
And this year, in addition
to just parsing your code,

00:27:07.506 --> 00:27:09.456 A:middle
the LLVM compiler goes
just a little bit further

00:27:09.456 --> 00:27:13.466 A:middle
and parses your comments
as well.

00:27:13.736 --> 00:27:15.776 A:middle
Why? I don't know.

00:27:16.406 --> 00:27:17.576 A:middle
Well, the great thing
about this is,

00:27:17.576 --> 00:27:21.756 A:middle
is now Xcode can extract
doc comments from your APIs.

00:27:22.516 --> 00:27:28.376 A:middle
[ Applause ]

00:27:28.876 --> 00:27:30.676 A:middle
And service them right
in code completion

00:27:30.676 --> 00:27:31.896 A:middle
and in the QuickHelp APIs.

00:27:31.896 --> 00:27:34.206 A:middle
So they look just
like system help.

00:27:34.206 --> 00:27:37.636 A:middle
Now, if you're working
on somebody else's APIs,

00:27:37.636 --> 00:27:39.156 A:middle
this gives you a lot
of reason for that--

00:27:39.256 --> 00:27:40.906 A:middle
for you to really
encourage them to please,

00:27:40.906 --> 00:27:43.706 A:middle
please document your APIs.

00:27:44.556 --> 00:27:46.296 A:middle
Now, the compiler is
used in a lot of ways.

00:27:46.546 --> 00:27:48.906 A:middle
One of the really exciting ones
to me is the Static Analyzer.

00:27:49.806 --> 00:27:52.796 A:middle
The Static Analyzer in Xcode
uses deep compiler analysis

00:27:53.116 --> 00:27:54.356 A:middle
to find bugs in your program.

00:27:54.786 --> 00:27:57.586 A:middle
It's much better if the analyzer
finds it than you, trust me.

00:27:57.806 --> 00:28:00.446 A:middle
It's-- This year, the
analyzer has a number

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.446 --> 00:28:01.576 A:middle
of really great new checks,

00:28:01.986 --> 00:28:03.826 A:middle
but also goes much
deeper into your code.

00:28:04.206 --> 00:28:07.876 A:middle
It can now analyze across
method boundaries for both C++

00:28:07.876 --> 00:28:08.986 A:middle
and Objective-C methods.

00:28:09.806 --> 00:28:13.336 A:middle
And in C++, it even understands
constructors and destructors,

00:28:13.936 --> 00:28:15.586 A:middle
which means that now,
the analyzer knows

00:28:15.586 --> 00:28:16.906 A:middle
about smart pointers and a lot

00:28:16.906 --> 00:28:19.686 A:middle
of other really common
situations that occur in C++.

00:28:20.186 --> 00:28:24.286 A:middle
And as many of you have started
using the analyzer more often,

00:28:24.856 --> 00:28:27.416 A:middle
you've made it very clear
that you would really

00:28:27.416 --> 00:28:30.336 A:middle
like the ability to quickly
iterate on a single file

00:28:30.336 --> 00:28:32.576 A:middle
in your project and be able
to analyze that one project

00:28:32.866 --> 00:28:34.576 A:middle
without reanaly--
or that one file

00:28:34.576 --> 00:28:36.376 A:middle
without reanalyzing
your entire project.

00:28:37.216 --> 00:28:38.826 A:middle
Well, with Xcode 5,
it couldn't be easier.

00:28:38.826 --> 00:28:42.106 A:middle
It has new top-level commands
to both analyze a single file

00:28:42.106 --> 00:28:48.766 A:middle
and build a single file, make
it super easy to get that done.

00:28:48.956 --> 00:28:50.606 A:middle
Finally, to wrap up our
discussion of the compiler,

00:28:50.606 --> 00:28:52.236 A:middle
I want to give you a
quick update on ARC.

00:28:53.816 --> 00:28:56.746 A:middle
Now, maybe you know, we
released ARC for Objective-C

00:28:56.746 --> 00:29:00.176 A:middle
about two years ago and we've
seen some pretty massive

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:00.176 --> 00:29:01.476 A:middle
adoption in your applications.

00:29:01.676 --> 00:29:05.496 A:middle
It's been pretty-- you guys
have been doing a great job

00:29:05.576 --> 00:29:05.936 A:middle
with that.

00:29:05.936 --> 00:29:08.886 A:middle
I'm really excited to
say that with Xcode 5,

00:29:08.956 --> 00:29:12.036 A:middle
now Xcode has completed the
transition from GC to ARC.

00:29:12.986 --> 00:29:13.796 A:middle
It's a shocking thing.

00:29:18.166 --> 00:29:19.506 A:middle
[applause] And this is
one of the major reasons

00:29:19.506 --> 00:29:21.676 A:middle
that Xcode 5 is so
stable and fast.

00:29:22.626 --> 00:29:24.926 A:middle
Now, if you're one
of the few people

00:29:24.926 --> 00:29:26.776 A:middle
that still use Garbage
Collection on the Mac,

00:29:26.776 --> 00:29:30.076 A:middle
I want to really strongly
encourage you to move on to ARC.

00:29:30.926 --> 00:29:32.646 A:middle
Garbage Collection is
deprecated technology

00:29:32.646 --> 00:29:34.846 A:middle
and will be going
away really soon now.

00:29:35.376 --> 00:29:37.446 A:middle
And I think that when
you switch to ARC,

00:29:37.786 --> 00:29:39.786 A:middle
you'll find that your
applications are faster

00:29:40.486 --> 00:29:43.086 A:middle
and because ARC has a
deterministic programming model,

00:29:43.326 --> 00:29:45.966 A:middle
you'll find that it's much
easier to understand your code

00:29:45.966 --> 00:29:49.276 A:middle
and what it's doing and also to
debug it when things go wrong.

00:29:50.336 --> 00:29:53.426 A:middle
So, speaking of debugging,
let's jump right now

00:29:53.426 --> 00:29:57.896 A:middle
into the Xcode debugger and
talk about what's new there.

00:29:58.156 --> 00:29:59.676 A:middle
Similar to the compiler story,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.436 --> 00:30:02.886 A:middle
Xcode previously supported
two different debuggers.

00:30:03.856 --> 00:30:07.846 A:middle
And LLDB is a really powerful
set of debugger technology.

00:30:08.196 --> 00:30:10.396 A:middle
It supports not only
the modern Objective-C

00:30:10.396 --> 00:30:12.936 A:middle
and C++ language
features, it even looks deep

00:30:12.936 --> 00:30:14.036 A:middle
into the Objective-C runtime

00:30:14.166 --> 00:30:16.756 A:middle
and has really powerful data
formatters built right in.

00:30:17.486 --> 00:30:20.786 A:middle
This is one of the many reasons
that LLDB, I'm very happy

00:30:20.786 --> 00:30:23.216 A:middle
to say is leaving
GDB in the dust.

00:30:24.336 --> 00:30:26.346 A:middle
GDB is gone.

00:30:26.596 --> 00:30:29.936 A:middle
So, building on top of the
underlying power of LLDB,

00:30:29.936 --> 00:30:32.596 A:middle
the Xcode debugger has a
lot of great new features.

00:30:32.846 --> 00:30:35.996 A:middle
And the one that I want to
start talking about is datatips.

00:30:36.896 --> 00:30:39.146 A:middle
Datatips are a great
way to see the value

00:30:39.146 --> 00:30:42.016 A:middle
of your variables right in
your code as you're stepping

00:30:42.016 --> 00:30:44.146 A:middle
through it and that's where
you're already looking anyways.

00:30:45.046 --> 00:30:48.326 A:middle
In datatips in Xcode 5
are simpler, cleaner,

00:30:48.406 --> 00:30:50.326 A:middle
more compact and more useful.

00:30:51.786 --> 00:30:54.006 A:middle
Datatips show summary
information from LLDB.

00:30:54.606 --> 00:30:57.616 A:middle
But now, it's also really easy
just by clicking the Info button

00:30:57.816 --> 00:30:59.566 A:middle
to see-- to print out a
variables description.

00:30:59.776 --> 00:31:02.176 A:middle
You don't even have
to go to the console

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:02.176 --> 00:31:03.136 A:middle
and hit-- type PO [applause].

00:31:07.916 --> 00:31:11.136 A:middle
And of course, textural is great
but graphical is even better.

00:31:11.516 --> 00:31:12.706 A:middle
And for graphical resources,

00:31:12.706 --> 00:31:14.796 A:middle
you can now see them
right in the debugger.

00:31:14.796 --> 00:31:19.936 A:middle
[applause] It's great for
Bezier Path and images

00:31:19.936 --> 00:31:21.126 A:middle
and a number of different
things.

00:31:21.566 --> 00:31:22.916 A:middle
And you know, for those of you

00:31:22.916 --> 00:31:25.206 A:middle
who have occasionally
felt the need

00:31:25.206 --> 00:31:26.726 A:middle
to give Xcode a friendly
poke in the eye,

00:31:27.316 --> 00:31:32.906 A:middle
now you can do it
right in the debugger.

00:31:33.256 --> 00:31:35.826 A:middle
Moving on from datatips,
let's talk about breakpoints.

00:31:36.586 --> 00:31:38.676 A:middle
Breakpoints in Xcode
are as powerful as ever.

00:31:39.206 --> 00:31:40.446 A:middle
And you may not know
it, but you can set

00:31:40.446 --> 00:31:43.296 A:middle
up really powerful
conditional break points

00:31:43.296 --> 00:31:45.596 A:middle
and even attach actions
right to your breakpoints.

00:31:45.996 --> 00:31:48.336 A:middle
This can let you debug some
of the nastiest logic problems

00:31:48.336 --> 00:31:50.146 A:middle
in your application
really simply.

00:31:51.236 --> 00:31:53.156 A:middle
And breakpoints can be
enabled either individually

00:31:53.156 --> 00:31:54.736 A:middle
in the gutter or all at once

00:31:54.736 --> 00:31:56.346 A:middle
with the breakpoint
activation button.

00:31:57.126 --> 00:31:59.716 A:middle
And Xcode 5 moves us right
down into the debug bar

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:00.086 --> 00:32:01.636 A:middle
to be right next to
the stepping controls

00:32:01.636 --> 00:32:05.076 A:middle
where you're already
doing your debugging.

00:32:05.176 --> 00:32:06.016 A:middle
Now, while we're here,

00:32:06.356 --> 00:32:08.356 A:middle
you'll see a new control
on debug bar as well.

00:32:08.356 --> 00:32:10.806 A:middle
And for App Kit apps, there's
some great new features.

00:32:11.546 --> 00:32:12.176 A:middle
Let's pull one out.

00:32:13.186 --> 00:32:14.436 A:middle
So here's our simple
App Kit app.

00:32:14.686 --> 00:32:17.256 A:middle
Well, right from the Xcode
debugger, you can now turn

00:32:17.256 --> 00:32:19.076 A:middle
on several different
options for example

00:32:19.076 --> 00:32:20.706 A:middle
to see the frames
for your views.

00:32:21.466 --> 00:32:23.686 A:middle
This is a great way to
debug layout problems

00:32:23.686 --> 00:32:26.286 A:middle
in your App Kit apps
and these show up live

00:32:26.286 --> 00:32:27.456 A:middle
as your application is running.

00:32:28.486 --> 00:32:32.116 A:middle
You can also have App Kit
flash, the area being redrawn

00:32:32.116 --> 00:32:34.326 A:middle
in your application which
is another great way

00:32:34.496 --> 00:32:35.876 A:middle
to debug performance problems.

00:32:35.986 --> 00:32:40.166 A:middle
Again, live is your App
Kit-- as your app is running.

00:32:40.166 --> 00:32:42.706 A:middle
Now, performance is
really important to Xcode.

00:32:42.706 --> 00:32:44.396 A:middle
And this is why in Xcode 5,

00:32:44.606 --> 00:32:47.376 A:middle
we're pulling lightweight
performance information right

00:32:47.376 --> 00:32:49.986 A:middle
into debugger with a new
feature called Debug Gauges.

00:32:51.236 --> 00:32:52.626 A:middle
Well, why are we doing this?

00:32:52.626 --> 00:32:53.566 A:middle
We have instruments, right?

00:32:54.266 --> 00:32:56.576 A:middle
Well, performance is
a really funny thing.

00:32:57.056 --> 00:32:59.376 A:middle
It's really, really easy
to ignore performance

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.006 --> 00:33:02.666 A:middle
until your app is
visibly slow or worse yet,

00:33:02.666 --> 00:33:05.286 A:middle
your customers start
complaining about it, right?

00:33:05.796 --> 00:33:07.856 A:middle
And the funny thing
about that is

00:33:07.856 --> 00:33:10.396 A:middle
that modern processors
are super fast,

00:33:10.746 --> 00:33:12.086 A:middle
which means it's
really easy for you

00:33:12.086 --> 00:33:14.306 A:middle
to be accidentally
consuming way too much power

00:33:14.636 --> 00:33:17.656 A:middle
without even knowing it
because your app appears normal.

00:33:18.706 --> 00:33:20.276 A:middle
Now, we all have kind
of a really good idea

00:33:20.276 --> 00:33:22.316 A:middle
of what our applications is
supposed to be doing, right?

00:33:22.896 --> 00:33:24.166 A:middle
And so, debug gauges are all

00:33:24.166 --> 00:33:25.776 A:middle
about showing you what's
actually happening.

00:33:26.186 --> 00:33:28.936 A:middle
So if there is a difference
between theory and reality,

00:33:29.316 --> 00:33:31.166 A:middle
you can see it right
in the debugger.

00:33:31.656 --> 00:33:34.536 A:middle
Now the debug gauges
show up right on top

00:33:34.536 --> 00:33:35.406 A:middle
of the debug navigator.

00:33:36.056 --> 00:33:37.846 A:middle
This gives you information
at a glance

00:33:37.846 --> 00:33:39.556 A:middle
about what's happening
in your application.

00:33:40.796 --> 00:33:43.016 A:middle
And if you click on
one of these gauges,

00:33:43.016 --> 00:33:44.606 A:middle
you get a great details view

00:33:44.606 --> 00:33:46.816 A:middle
that shows you more
information about that area.

00:33:47.986 --> 00:33:50.506 A:middle
Now, debug gauges
are not intended

00:33:50.916 --> 00:33:53.176 A:middle
to have all the detailed
performance information the

00:33:53.176 --> 00:33:56.216 A:middle
instrument does because they
need to be super lightweight.

00:33:56.836 --> 00:33:59.356 A:middle
They're designed to have
less than 1 percent overhead

00:33:59.956 --> 00:34:01.486 A:middle
for your application as it runs

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:01.936 --> 00:34:03.956 A:middle
which is why we can
enable them all the time

00:34:03.956 --> 00:34:05.656 A:middle
when your app is being debugged.

00:34:06.506 --> 00:34:08.456 A:middle
And if you want to get
more detailed information,

00:34:08.886 --> 00:34:11.565 A:middle
one click gets you right
into instruments and--

00:34:11.746 --> 00:34:14.876 A:middle
which gives you the full power
to debug any performance problem

00:34:14.876 --> 00:34:17.196 A:middle
that you have and your
application keeps running

00:34:17.196 --> 00:34:17.886 A:middle
exactly where it is

00:34:17.886 --> 00:34:20.876 A:middle
with instruments attached
and continuing on.

00:34:21.366 --> 00:34:23.335 A:middle
Now, in addition to CPU
and memory information,

00:34:23.896 --> 00:34:25.815 A:middle
we also have a number of
other really powerful gauges,

00:34:25.976 --> 00:34:27.216 A:middle
for example one for energy.

00:34:27.706 --> 00:34:29.036 A:middle
This lets you see the state--

00:34:29.036 --> 00:34:30.985 A:middle
current state of your
application, how it responds

00:34:30.985 --> 00:34:33.735 A:middle
to App Map and other
important energy events.

00:34:34.476 --> 00:34:35.686 A:middle
Now, instead of talking
about this,

00:34:35.826 --> 00:34:37.996 A:middle
to fully appreciate
debug gauges,

00:34:38.076 --> 00:34:39.326 A:middle
you just have to see them live.

00:34:39.896 --> 00:34:41.666 A:middle
And to show them to you now,
I'd like to invite up Ken Orr.

00:34:41.666 --> 00:34:41.966 A:middle
Ken.

00:34:42.516 --> 00:34:45.966 A:middle
[ Applause ]

00:34:46.466 --> 00:34:46.835 A:middle
&gt;&gt; All right.

00:34:47.616 --> 00:34:50.576 A:middle
So I've been working on a new
feature in our Jogr app here

00:34:50.576 --> 00:34:51.996 A:middle
and I'd love to show
that to you now.

00:34:53.356 --> 00:34:55.666 A:middle
So we'll start by running.

00:34:56.206 --> 00:35:00.136 A:middle
And the first thing
you'll notice

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:00.216 --> 00:35:02.966 A:middle
in Xcode is the new
beautifully minimal--

00:35:02.966 --> 00:35:06.566 A:middle
minimalistic debug gauges right
here in the debug navigator.

00:35:07.756 --> 00:35:11.106 A:middle
So as Chris mentioned, if
I click on the CPU gauge,

00:35:11.436 --> 00:35:15.506 A:middle
we'll see the CPU report and
then up in the upper left,

00:35:15.786 --> 00:35:18.796 A:middle
we have an instant
readout of our CPU usage.

00:35:19.506 --> 00:35:21.736 A:middle
And then to the right, we'll
see how we're doing in terms

00:35:21.736 --> 00:35:24.186 A:middle
of the system, and below that,

00:35:24.756 --> 00:35:26.786 A:middle
we'll see our CPU
usage over time.

00:35:26.786 --> 00:35:31.036 A:middle
So let me go ahead and
show you that feature.

00:35:31.036 --> 00:35:33.306 A:middle
So I'm going to click on these
routes button which is going

00:35:33.306 --> 00:35:34.996 A:middle
to show us our jogging
routes on the map.

00:35:36.526 --> 00:35:40.166 A:middle
And we have one route which is
running along the Embarcardero

00:35:40.166 --> 00:35:41.926 A:middle
here in San Francisco, so
I'm going to click on that

00:35:41.926 --> 00:35:45.076 A:middle
and we'll see the details
about that jogging route.

00:35:45.076 --> 00:35:48.986 A:middle
And the feature that I've
been working on is this graph

00:35:48.986 --> 00:35:50.876 A:middle
at the top, this
nice bright graph

00:35:51.596 --> 00:35:53.416 A:middle
which shows you your
jogging speed

00:35:53.896 --> 00:35:56.386 A:middle
over the course of your jog.

00:35:57.856 --> 00:36:01.166 A:middle
Now, you know what, when I--
when I clicked on that route,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:02.436 --> 00:36:06.226 A:middle
I actually saw a little bit of
a spike in the CPU right here.

00:36:06.226 --> 00:36:09.676 A:middle
And I-- that's not something
I was expecting to see.

00:36:09.846 --> 00:36:10.796 A:middle
So let's just do that again.

00:36:11.346 --> 00:36:15.646 A:middle
And actually it's
worse than that.

00:36:16.666 --> 00:36:19.396 A:middle
When I click on that
route, it slides in,

00:36:19.396 --> 00:36:21.016 A:middle
but it's really kind of laggy.

00:36:21.526 --> 00:36:25.606 A:middle
I might not notice that if I
hadn't actually seen this spike

00:36:25.726 --> 00:36:26.456 A:middle
on the graph.

00:36:26.936 --> 00:36:29.566 A:middle
So this is something I
want to definitely fix.

00:36:30.926 --> 00:36:33.416 A:middle
Now, we could jump right
into instruments here

00:36:34.316 --> 00:36:36.996 A:middle
but since I just wrote this
code, I have a fairly good idea

00:36:36.996 --> 00:36:37.916 A:middle
where the problem might be.

00:36:38.176 --> 00:36:43.146 A:middle
So let's go back to our code and
my guess is that the problem is

00:36:43.146 --> 00:36:45.736 A:middle
where we're creating
the UIBezierPath

00:36:46.356 --> 00:36:48.486 A:middle
that represents that graph.

00:36:49.266 --> 00:36:51.276 A:middle
So what I want to do is I want
to activate our breakpoints.

00:36:51.796 --> 00:36:57.626 A:middle
I'll do that and then let's
trigger that breakpoint.

00:36:59.906 --> 00:37:04.556 A:middle
OK, so here we are
and create graph path.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:04.556 --> 00:37:10.176 A:middle
All right, now I'm looking at
this first line of code here.

00:37:10.326 --> 00:37:14.246 A:middle
And what I'm noticing is
that I'm actually asking

00:37:14.296 --> 00:37:17.006 A:middle
for all the samples
in that jogging route.

00:37:17.206 --> 00:37:19.936 A:middle
So I could be asking for tens of
thousands of data points here,

00:37:20.276 --> 00:37:24.076 A:middle
when in reality, I only need
to ask for one data point

00:37:24.076 --> 00:37:25.326 A:middle
for every horizontal pixel.

00:37:25.786 --> 00:37:28.056 A:middle
So, I'm asking for
way, way too much data.

00:37:28.086 --> 00:37:31.486 A:middle
And that's something that's
very easy to fix by just instead

00:37:31.486 --> 00:37:36.756 A:middle
of doing maximum samples, we can
just say self.pounds.size.width.

00:37:37.586 --> 00:37:39.856 A:middle
So that will give us
just one data point

00:37:40.066 --> 00:37:42.676 A:middle
for every horizontal pixel
giving us exactly the right

00:37:42.676 --> 00:37:43.156 A:middle
amount of data.

00:37:43.906 --> 00:37:44.506 A:middle
All right.

00:37:45.126 --> 00:37:50.526 A:middle
Let's build and rerun that.

00:37:50.746 --> 00:37:55.256 A:middle
And then we want to go to
the map and we want to look

00:37:55.256 --> 00:37:57.786 A:middle
at the reports so that we
can see how we're doing.

00:37:58.376 --> 00:38:04.196 A:middle
OK. So let's click on a route.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:04.386 --> 00:38:06.116 A:middle
OK, that looks much better.

00:38:06.116 --> 00:38:08.556 A:middle
So immediately, I noticed
that the view slid right in,

00:38:09.046 --> 00:38:10.836 A:middle
nice and buttery smooth,
just like I want it.

00:38:11.466 --> 00:38:14.576 A:middle
And then furthermore, I
noticed here in the CPU graph

00:38:14.576 --> 00:38:16.976 A:middle
that it was just a
tiny, tiny little blip.

00:38:17.826 --> 00:38:20.546 A:middle
So, that's the user
experience I'm going for here.

00:38:21.066 --> 00:38:22.066 A:middle
So I'm happy with that.

00:38:23.136 --> 00:38:24.576 A:middle
Yeah, let's just do
that a couple of times,

00:38:24.576 --> 00:38:25.866 A:middle
it's looking really good.

00:38:27.256 --> 00:38:30.196 A:middle
But actually, as I'm
watching the gauges,

00:38:30.556 --> 00:38:35.416 A:middle
which is something I always try
to do, I notice that the memory

00:38:35.666 --> 00:38:39.206 A:middle
of my app keeps climbing every
time I bring that view in.

00:38:39.206 --> 00:38:43.386 A:middle
Now, I certainly don't expect
that bringing in the same view

00:38:43.386 --> 00:38:46.706 A:middle
and pushing it out would cause
my memory to increase like that.

00:38:47.006 --> 00:38:48.376 A:middle
That's not something
I would expect.

00:38:48.376 --> 00:38:50.826 A:middle
I expect it to go up
and then come back down.

00:38:51.576 --> 00:38:55.506 A:middle
So we could see that, yeah, sure
enough every time I'm clicking

00:38:55.506 --> 00:38:58.836 A:middle
on this path, we get another
spike in memory usage.

00:38:58.896 --> 00:39:02.116 A:middle
So, certainly something
we want to address.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:02.646 --> 00:39:05.136 A:middle
This will be a great way to
get us a nice one star review.

00:39:05.136 --> 00:39:05.836 A:middle
So we don't want that.

00:39:06.426 --> 00:39:10.436 A:middle
Let's go back over
here to our code.

00:39:11.406 --> 00:39:13.936 A:middle
And again, I have a guess
where this might be.

00:39:14.736 --> 00:39:17.256 A:middle
So I'm-- I have this
caching logic which takes

00:39:17.256 --> 00:39:23.056 A:middle
that UIBezierPath, draws it
into an image, and I'm guessing

00:39:23.056 --> 00:39:24.536 A:middle
that we want to look
in this [inaudible].

00:39:24.566 --> 00:39:27.056 A:middle
So I'm going to enable
that breakpoint

00:39:27.556 --> 00:39:29.846 A:middle
and then I'm going
to trigger it.

00:39:32.846 --> 00:39:35.296 A:middle
OK. So here, we are in cache
graph image [inaudible].

00:39:35.386 --> 00:39:37.256 A:middle
All right.

00:39:37.666 --> 00:39:40.976 A:middle
Now when I debug an issue
like this, the first thing I

00:39:40.976 --> 00:39:42.466 A:middle
like to do is I like
to go through

00:39:42.466 --> 00:39:43.576 A:middle
and inspect all the variables.

00:39:43.576 --> 00:39:46.356 A:middle
So I want to make
sure that the values

00:39:46.356 --> 00:39:48.366 A:middle
of these variables
match my expectation.

00:39:48.366 --> 00:39:52.656 A:middle
So is anything obviously out
of bounds, and the way I do

00:39:52.656 --> 00:39:54.996 A:middle
that is I use datatips.

00:39:56.136 --> 00:40:01.556 A:middle
So I can just mouse over image
scale and you'll notice now

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:01.556 --> 00:40:05.876 A:middle
in Xcode 5, that the datatips
are so nice and concise,

00:40:06.436 --> 00:40:07.976 A:middle
so small, just showing
me the value.

00:40:08.116 --> 00:40:10.286 A:middle
That's exactly the piece
of data that I want to see

00:40:10.546 --> 00:40:11.556 A:middle
and that's all that we see.

00:40:12.116 --> 00:40:16.786 A:middle
And of course, I can
datatip over rect and I get

00:40:16.786 --> 00:40:19.246 A:middle
that nice textual
summary from LLDB.

00:40:19.796 --> 00:40:24.346 A:middle
And then I can also look at--
so I want to look at self

00:40:24.346 --> 00:40:27.686 A:middle
and I want to see its instance
variables and I can do that to,

00:40:27.786 --> 00:40:30.766 A:middle
you can just twist
it right open.

00:40:30.946 --> 00:40:33.616 A:middle
And you know, one of the
instance variables that I would

00:40:33.616 --> 00:40:36.256 A:middle
like to look at is this image.

00:40:36.256 --> 00:40:38.666 A:middle
Of course, there's
no summary for that.

00:40:38.786 --> 00:40:42.686 A:middle
I don't know what that would
show, but the way I want

00:40:42.686 --> 00:40:45.576 A:middle
to see the image as you
would guess is I want

00:40:45.576 --> 00:40:46.656 A:middle
to see it visually.

00:40:47.196 --> 00:40:48.826 A:middle
And with Quick Look
in the datatips

00:40:48.826 --> 00:40:51.716 A:middle
and in the variables
view, you can now do this.

00:40:52.026 --> 00:40:56.176 A:middle
And of course, there're
many more types

00:40:57.136 --> 00:40:58.466 A:middle
that offer Quick Look.

00:40:58.836 --> 00:41:01.996 A:middle
So things like, we've
got an attributed string.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:02.026 --> 00:41:07.176 A:middle
You want to see the string and
you want to see the attributes

00:41:07.176 --> 00:41:11.516 A:middle
or say a Bezier Path
like you've seen.

00:41:11.736 --> 00:41:14.706 A:middle
Or even things like colors.

00:41:15.866 --> 00:41:17.716 A:middle
These things want to be
visual and now they are.

00:41:18.516 --> 00:41:26.156 A:middle
[ Applause ]

00:41:26.656 --> 00:41:28.356 A:middle
So I'll be honest, I've
been using this feature

00:41:28.356 --> 00:41:30.936 A:middle
for a little while now and
every time that I use it,

00:41:30.936 --> 00:41:33.216 A:middle
I am still amazed every time I
get one of these Quick Looks.

00:41:33.216 --> 00:41:36.086 A:middle
So, I think you're
really going to love that.

00:41:36.286 --> 00:41:38.466 A:middle
All right, so back over
here, looking at our code,

00:41:38.826 --> 00:41:42.016 A:middle
looked to the variables, not
seeing anything obviously wrong,

00:41:42.366 --> 00:41:44.946 A:middle
looking at the code,
nothing is jumping out.

00:41:44.946 --> 00:41:45.956 A:middle
It's just one of those times.

00:41:46.196 --> 00:41:48.466 A:middle
The problem is not apparent.

00:41:49.626 --> 00:41:53.356 A:middle
So actually, Xcode 5 has another
tool at our disposal here,

00:41:54.036 --> 00:41:56.516 A:middle
and that is the ability
to analyze a single file.

00:41:56.516 --> 00:41:59.956 A:middle
So I'm going to take advantage
of that now and I'm going

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:00.026 --> 00:42:02.876 A:middle
to run the Static
Analyzer on just this file

00:42:02.876 --> 00:42:06.026 A:middle
and we'll see what
that turns up.

00:42:07.676 --> 00:42:10.816 A:middle
Sure enough, it looks indeed
like we do have an issue here.

00:42:11.376 --> 00:42:15.786 A:middle
So let's click on this so
we can see the details.

00:42:15.856 --> 00:42:19.986 A:middle
OK. So, it looks
like the problem is

00:42:19.986 --> 00:42:22.736 A:middle
that I'm creating
a CG image here.

00:42:23.226 --> 00:42:26.026 A:middle
Now CG images I'm
responsible for releasing those

00:42:26.356 --> 00:42:27.696 A:middle
and in fact, I'm
not releasing it.

00:42:28.136 --> 00:42:31.376 A:middle
So, that would be our memory
leak, it's an easy fix

00:42:31.376 --> 00:42:34.446 A:middle
so let's just do CG image
release, route image

00:42:35.566 --> 00:42:39.396 A:middle
and then let's build
and run that again.

00:42:39.606 --> 00:42:41.596 A:middle
Make sure that we
actually fix the problem.

00:42:42.516 --> 00:42:46.146 A:middle
So we'll click on the route,
we'll let the graphs settle

00:42:46.146 --> 00:42:50.886 A:middle
down a bit and then let's click
on the actual jogging route.

00:42:51.016 --> 00:42:53.186 A:middle
And then let's go back
and forth a few times

00:42:53.226 --> 00:42:54.996 A:middle
and see how the memory responds.

00:42:56.116 --> 00:42:59.656 A:middle
OK. So this is looking much
more like what I would expect.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:00.366 --> 00:43:03.976 A:middle
So I see the memory go up, I
see it come back down, up down.

00:43:04.826 --> 00:43:07.126 A:middle
So, I feel pretty confident
that we fixed that issue.

00:43:07.536 --> 00:43:08.206 A:middle
So fantastic.

00:43:08.736 --> 00:43:10.246 A:middle
All right.

00:43:10.496 --> 00:43:14.796 A:middle
Now, there's one more thing
that I would like to do today,

00:43:15.676 --> 00:43:18.806 A:middle
and that's-- before I check on
this feature, so before I check

00:43:18.806 --> 00:43:22.516 A:middle
on my nice new graph, I actually
want to reduce the footprint

00:43:22.516 --> 00:43:24.896 A:middle
of our app to be smaller
than when I started.

00:43:24.896 --> 00:43:27.706 A:middle
I'd like to set the bar
high for my team so I want

00:43:27.706 --> 00:43:28.816 A:middle
to lead by example here.

00:43:29.526 --> 00:43:32.486 A:middle
And of course, the best way to
do this, we'd analyze my hit

00:43:32.576 --> 00:43:34.996 A:middle
which I can do right from
instruments and I can get

00:43:34.996 --> 00:43:37.736 A:middle
into instruments by
simply pressing Profile,

00:43:37.946 --> 00:43:40.566 A:middle
instruments launches with
the allocations template

00:43:40.566 --> 00:43:44.716 A:middle
and now we're set and ready to
go and dig in and find memory

00:43:44.716 --> 00:43:46.276 A:middle
that we can get rid off.

00:43:47.166 --> 00:43:51.596 A:middle
Really smooth workflow
from Xcode instruments.

00:43:53.776 --> 00:43:56.906 A:middle
So, in just a short
couple of minutes here,

00:43:56.906 --> 00:44:01.016 A:middle
we've seen that we have
found, we have fixed,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:01.636 --> 00:44:04.276 A:middle
and we have verified
both the responsiveness

00:44:04.356 --> 00:44:07.906 A:middle
and the memory leak all using
the new debug gauges in Xcode 5.

00:44:09.146 --> 00:44:12.316 A:middle
And of course, as we saw it with
quick look which is available

00:44:12.316 --> 00:44:16.066 A:middle
in the datatips and also the
variables view, you're going

00:44:16.066 --> 00:44:17.516 A:middle
to have insight into
your variables

00:44:17.516 --> 00:44:18.966 A:middle
like you have never had before.

00:44:19.456 --> 00:44:20.866 A:middle
So we think you're
going to find debugging

00:44:20.866 --> 00:44:24.416 A:middle
in Xcode 5 faster
and easier than ever.

00:44:25.336 --> 00:44:25.616 A:middle
Thank you.

00:44:25.796 --> 00:44:25.946 A:middle
Chris?

00:44:26.516 --> 00:44:31.856 A:middle
[ Applause ]

00:44:32.356 --> 00:44:32.886 A:middle
&gt;&gt; Thanks Ken.

00:44:33.586 --> 00:44:34.876 A:middle
Let's move on from
debugging and talk

00:44:34.876 --> 00:44:36.566 A:middle
about the great enhancements
to testing.

00:44:37.426 --> 00:44:38.716 A:middle
Testing is super important

00:44:39.086 --> 00:44:42.716 A:middle
and Xcode 5 takes it
really far forward.

00:44:43.166 --> 00:44:46.056 A:middle
The idea here is to fully
embrace test driven development

00:44:46.356 --> 00:44:47.906 A:middle
and do it in a way that
you've never seen before.

00:44:48.886 --> 00:44:52.076 A:middle
The first feature involved in
this is the new test navigator.

00:44:53.336 --> 00:44:55.026 A:middle
Navigators in Xcode are--

00:44:55.126 --> 00:44:59.886 A:middle
exist to define and
support the common workflows

00:44:59.886 --> 00:45:01.596 A:middle
that you want in
your applications.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:02.326 --> 00:45:05.176 A:middle
The new Test Navigator shows
up just like you'd expect.

00:45:05.176 --> 00:45:07.136 A:middle
As you dive in, you can see

00:45:07.136 --> 00:45:09.516 A:middle
that the navigator shows
you the current state

00:45:09.516 --> 00:45:12.046 A:middle
of your test the last time
you run-- you've run them.

00:45:12.616 --> 00:45:14.796 A:middle
Navigator pulls together
all the actions you want

00:45:14.796 --> 00:45:15.646 A:middle
to apply to test.

00:45:15.916 --> 00:45:18.686 A:middle
It makes it really easy to
add test, even test targets.

00:45:18.686 --> 00:45:21.976 A:middle
But what you really want to do
is be able to run your test.

00:45:22.656 --> 00:45:25.356 A:middle
And in addition to being able
to run them all with command U,

00:45:25.636 --> 00:45:28.406 A:middle
you can now run a single
test right from the navigator

00:45:28.836 --> 00:45:32.406 A:middle
or even define an ad hoc
group of tests and run it,

00:45:32.406 --> 00:45:34.376 A:middle
all without modifying
any schemes.

00:45:34.976 --> 00:45:35.876 A:middle
That's really simple.

00:45:39.606 --> 00:45:41.536 A:middle
[applause] This is a great
way to intervally develop

00:45:41.536 --> 00:45:44.096 A:middle
and test your code as, you know,

00:45:44.096 --> 00:45:47.816 A:middle
all the way from writing
the test first with the APIs

00:45:47.816 --> 00:45:50.026 A:middle
to implementing the APIs and
making sure it all happens.

00:45:51.126 --> 00:45:55.106 A:middle
Now, testing is super important
in Xcode 5 and as part of this,

00:45:55.106 --> 00:45:57.836 A:middle
we're pulling the OC unit
testing framework right

00:45:57.836 --> 00:46:01.206 A:middle
into the Xcode family with
the new test framework XCTest.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:02.536 --> 00:46:05.216 A:middle
Now XCTest is very similar
to OC unit in many ways.

00:46:05.596 --> 00:46:08.486 A:middle
But it's the start of a
continued investment in testing

00:46:08.486 --> 00:46:15.916 A:middle
and will take us much
farther than Xcode 5.

00:46:15.916 --> 00:46:16.986 A:middle
[applause] Among the
many improvements

00:46:16.986 --> 00:46:19.996 A:middle
in testing you can now run
test from the command line

00:46:20.466 --> 00:46:22.416 A:middle
and test just work
the way you think--

00:46:22.706 --> 00:46:24.316 A:middle
you know, just work
the way they should.

00:46:25.326 --> 00:46:28.166 A:middle
Now, with all these improvements
in Static Analyzer and testing,

00:46:28.466 --> 00:46:30.806 A:middle
you may find yourself
running the analyzer

00:46:30.806 --> 00:46:32.326 A:middle
and your test all the time.

00:46:33.076 --> 00:46:36.276 A:middle
And wouldn't it be great if you
didn't have to do this manually.

00:46:37.126 --> 00:46:40.196 A:middle
Well now, with the new feature
called Bots, this can happen

00:46:40.196 --> 00:46:41.196 A:middle
for you automatically.

00:46:41.826 --> 00:46:46.326 A:middle
A Bot is a humble
friendly servant that runs

00:46:46.326 --> 00:46:49.236 A:middle
on an Xcode server
or an OS X server

00:46:50.086 --> 00:46:52.586 A:middle
to handle your continuous
integration tasks running

00:46:52.586 --> 00:46:55.536 A:middle
something known as an
integration, an Xcode lexicon.

00:46:56.206 --> 00:46:59.186 A:middle
An integration is a series
of reproducible steps

00:46:59.376 --> 00:47:02.096 A:middle
that can contain things like
doing a build, running tests,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:02.096 --> 00:47:04.406 A:middle
running the analyzer,
even signing

00:47:04.406 --> 00:47:05.616 A:middle
and archiving your application.

00:47:06.976 --> 00:47:10.046 A:middle
Bots take the mundane work

00:47:10.256 --> 00:47:13.226 A:middle
of running tests off your local
machine and put it on a server

00:47:13.226 --> 00:47:15.176 A:middle
or it can be happening
automatic for you--

00:47:15.326 --> 00:47:18.806 A:middle
automatically for you
continuously and shared

00:47:18.806 --> 00:47:20.286 A:middle
within your whole team.

00:47:20.936 --> 00:47:24.846 A:middle
So now in addition to just
running tests, Bots keeps track

00:47:24.846 --> 00:47:27.916 A:middle
of history and Xcode
provides a beautiful interface

00:47:28.156 --> 00:47:30.016 A:middle
for exploring the
history of a Bot.

00:47:30.506 --> 00:47:33.816 A:middle
Now you can see exactly what
happen in any integration.

00:47:34.746 --> 00:47:37.686 A:middle
If there are any problems, Xcode
makes it really easy to dive in

00:47:38.266 --> 00:47:40.086 A:middle
and find out what went wrong.

00:47:41.106 --> 00:47:43.596 A:middle
Now, this is really
important because, you know,

00:47:43.596 --> 00:47:46.726 A:middle
some failures are easy, you
know, it can again checks

00:47:46.726 --> 00:47:48.836 A:middle
in a bozo commit and
totally breaks everything,

00:47:49.216 --> 00:47:50.166 A:middle
fine, that's easy.

00:47:50.516 --> 00:47:54.536 A:middle
But the more complicated
cases are when you have a test

00:47:54.536 --> 00:47:56.836 A:middle
that fails only on
a single device,

00:47:57.196 --> 00:47:59.846 A:middle
maybe a specific screen
resolution where a process of--

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:00.376 --> 00:48:01.606 A:middle
you know, specific processor.

00:48:02.136 --> 00:48:04.936 A:middle
These are the kinds of things
that's really powerful to have,

00:48:05.376 --> 00:48:08.476 A:middle
the tools in Xcode to analyze
and understand what is going on.

00:48:08.836 --> 00:48:11.096 A:middle
And we think you're
going to love it.

00:48:11.496 --> 00:48:14.036 A:middle
Now, Bots can be configured
in many different ways,

00:48:14.036 --> 00:48:16.656 A:middle
but we have two recommended
configurations you should think

00:48:16.656 --> 00:48:17.126 A:middle
about using.

00:48:18.396 --> 00:48:19.976 A:middle
The first is a continuous Bot.

00:48:20.076 --> 00:48:25.516 A:middle
This little guy, checks out your
code from SVN or git, builds it,

00:48:25.516 --> 00:48:28.446 A:middle
runs test in the analyzer and
then as new changes come in,

00:48:28.446 --> 00:48:29.486 A:middle
it does it all over again.

00:48:29.486 --> 00:48:33.216 A:middle
This is a great way to
find regressions as soon

00:48:33.216 --> 00:48:34.546 A:middle
after they're introduced
as possible

00:48:34.546 --> 00:48:36.746 A:middle
which makes it much
easier to fix problems.

00:48:37.496 --> 00:48:41.226 A:middle
Now, the second recommended
configuration is a little

00:48:41.226 --> 00:48:42.656 A:middle
bit different.

00:48:42.656 --> 00:48:44.986 A:middle
This is a periodic
or nightly build.

00:48:45.576 --> 00:48:48.766 A:middle
The idea here is to
emulate your production step

00:48:48.856 --> 00:48:50.166 A:middle
as closely as possible.

00:48:50.756 --> 00:48:53.326 A:middle
So this means that in addition
to building or running tests,

00:48:53.706 --> 00:48:55.896 A:middle
it also signs and
archives your application.

00:48:57.026 --> 00:48:58.056 A:middle
Why do you want to do this?

00:48:58.766 --> 00:49:00.606 A:middle
Well, this is really great
for a number of reasons.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:00.896 --> 00:49:03.726 A:middle
First of all, you
now have a history

00:49:03.726 --> 00:49:05.066 A:middle
of your application over time.

00:49:06.296 --> 00:49:07.926 A:middle
Built the way you do
your production steps

00:49:07.926 --> 00:49:10.086 A:middle
so you can see your
application as it is involved.

00:49:10.836 --> 00:49:12.766 A:middle
This also means that as
you wake up every morning,

00:49:12.986 --> 00:49:14.146 A:middle
you now have a reference build.

00:49:14.506 --> 00:49:17.086 A:middle
You can live on and
that your QA people

00:49:17.086 --> 00:49:19.676 A:middle
or whoever can use
as the days build.

00:49:19.856 --> 00:49:22.106 A:middle
It's really a great way
to pull together your team

00:49:22.286 --> 00:49:23.576 A:middle
and all be focused on one thing.

00:49:24.906 --> 00:49:26.516 A:middle
Now Bots are super configurable.

00:49:27.196 --> 00:49:30.266 A:middle
Xcode schemes are
perfectly matched for Bots.

00:49:30.786 --> 00:49:33.486 A:middle
But Bots also build on
the power of OS X server.

00:49:34.536 --> 00:49:36.506 A:middle
And a server brings a
lot to the table as well.

00:49:37.506 --> 00:49:40.286 A:middle
A server is the perfect
place to archive your logs

00:49:40.776 --> 00:49:44.616 A:middle
and your build products giving
your team access to them all

00:49:44.616 --> 00:49:45.686 A:middle
in one central location.

00:49:45.866 --> 00:49:48.776 A:middle
But it's also really fantastic
place to plug in a whole bunch

00:49:48.776 --> 00:49:51.766 A:middle
of devices because you get
many different Bots for lots

00:49:51.766 --> 00:49:53.766 A:middle
of different projects
all testing

00:49:53.766 --> 00:49:55.536 A:middle
on the same fleet of devices.

00:49:56.066 --> 00:49:58.256 A:middle
And with Bots, it's
really, really easy.

00:49:59.406 --> 00:50:01.516 A:middle
Now to show you how these
all works, I'd like to invite

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:01.516 --> 00:50:02.976 A:middle
up Mike Ferris to show
it to you in action.

00:50:04.656 --> 00:50:04.856 A:middle
Mike?

00:50:05.016 --> 00:50:06.306 A:middle
[ Applause ]

00:50:06.306 --> 00:50:07.606 A:middle
&gt;&gt; Let me get right
started here.

00:50:07.876 --> 00:50:10.366 A:middle
I've been working
on a Mac version--

00:50:10.996 --> 00:50:15.226 A:middle
oop, a Mac version of our
social jogging application.

00:50:16.746 --> 00:50:21.106 A:middle
And I've added iCloud support
so that I can plan my runs

00:50:21.106 --> 00:50:22.146 A:middle
and taunt my friends

00:50:22.146 --> 00:50:24.536 A:middle
with challenges while
I'm sitting on my chair.

00:50:25.196 --> 00:50:31.106 A:middle
And I've been writing some
tests for the challenge feature

00:50:31.596 --> 00:50:32.926 A:middle
with the XCTest framework.

00:50:33.976 --> 00:50:37.766 A:middle
I'm using the test
navigator to focus on my test.

00:50:38.496 --> 00:50:43.536 A:middle
I can see that a bunch of my
tests are passing, but a number

00:50:43.536 --> 00:50:45.586 A:middle
of them haven't been run yet.

00:50:46.636 --> 00:50:49.156 A:middle
I've actually implemented
a brand new test suite

00:50:49.156 --> 00:50:52.276 A:middle
for the challenge feature
here and while I was in there,

00:50:52.416 --> 00:50:55.086 A:middle
I implemented a few other
test cases for some things

00:50:55.086 --> 00:50:57.236 A:middle
where I noticed we had
holes in our test coverage.

00:50:57.956 --> 00:51:00.806 A:middle
And since I've added a bunch of
new tests, I'll run them all now

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:00.806 --> 00:51:02.726 A:middle
to bring my status up to date.

00:51:03.726 --> 00:51:05.846 A:middle
And I can see that I
have some failures.

00:51:07.476 --> 00:51:11.086 A:middle
A number of the new challenge
tests failed, but also one

00:51:11.086 --> 00:51:12.546 A:middle
of these other tests
that I added--

00:51:12.946 --> 00:51:14.486 A:middle
and I wasn't really
expecting that.

00:51:15.086 --> 00:51:17.086 A:middle
So I'd like to look
at that first.

00:51:18.976 --> 00:51:22.146 A:middle
This task actually looks
pretty straightforward

00:51:22.146 --> 00:51:23.946 A:middle
and I don't see why
it shouldn't work.

00:51:23.946 --> 00:51:26.896 A:middle
So, this actually must be
a bug in my application

00:51:27.746 --> 00:51:30.066 A:middle
and that's great because this
is exactly the kind of thing

00:51:30.066 --> 00:51:31.506 A:middle
that UITests are meant to catch.

00:51:32.936 --> 00:51:35.796 A:middle
In this case, it looks like a
lot of this is mostly working

00:51:35.796 --> 00:51:38.436 A:middle
but it's one of my inboxes
isn't getting cleared

00:51:38.436 --> 00:51:39.236 A:middle
out appropriately.

00:51:40.566 --> 00:51:41.876 A:middle
I'm going to command click

00:51:41.876 --> 00:51:43.666 A:middle
on the call that's
being tested here

00:51:43.766 --> 00:51:45.176 A:middle
to jump right to
the source code.

00:51:45.686 --> 00:51:48.846 A:middle
And I can see that yeah,
sure enough, I'm just kind

00:51:48.846 --> 00:51:50.206 A:middle
of forgetting to update one

00:51:50.206 --> 00:51:52.486 A:middle
of the dictionaries I
used to index the jogs.

00:51:53.396 --> 00:51:54.746 A:middle
So, I'll fix that now.

00:51:55.336 --> 00:51:59.456 A:middle
And to verify that I've
actually fixed the problem,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:00.256 --> 00:52:03.246 A:middle
I can just click on the status
icon in the test navigator

00:52:03.246 --> 00:52:06.356 A:middle
for that one test to run
it again and make sure

00:52:06.356 --> 00:52:07.686 A:middle
that the problem has been fixed.

00:52:08.896 --> 00:52:09.196 A:middle
All right.

00:52:09.196 --> 00:52:11.776 A:middle
So that's one less bug
in my app and I'm glad

00:52:11.896 --> 00:52:13.906 A:middle
that I found those
holes in the coverage.

00:52:14.506 --> 00:52:18.936 A:middle
Now I know what's going on with
the rest of these test failures.

00:52:19.596 --> 00:52:21.406 A:middle
I'm actually using
test-driven development

00:52:21.406 --> 00:52:24.506 A:middle
to implement this feature
so I wrote the test first

00:52:24.866 --> 00:52:27.576 A:middle
and now I need to actually go
and implement the functionality.

00:52:28.246 --> 00:52:32.246 A:middle
So to do that, I'm going to
switch to the project navigator

00:52:32.246 --> 00:52:34.216 A:middle
to focus back in on
my application code.

00:52:35.276 --> 00:52:37.326 A:middle
And go to the challenge
manager class which is

00:52:37.326 --> 00:52:39.166 A:middle
where this feature is
going to be implemented.

00:52:39.736 --> 00:52:42.746 A:middle
You can see that I have some
methods stubbed out here

00:52:42.746 --> 00:52:44.466 A:middle
that need to be filled in.

00:52:47.186 --> 00:52:50.486 A:middle
And while I'm working on
this, I want to make sure

00:52:50.486 --> 00:52:54.926 A:middle
that I'm keeping my
test close at hand.

00:52:55.006 --> 00:52:58.106 A:middle
I'll use a new category in
the related files pop-up

00:52:58.106 --> 00:53:00.226 A:middle
that gives me access
to test cases

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:00.256 --> 00:53:02.226 A:middle
that exercise the code
that I'm working on.

00:53:03.136 --> 00:53:05.126 A:middle
And I'll hold down
option while I choose this

00:53:05.126 --> 00:53:08.456 A:middle
so that I can get it in
the assistant editor.

00:53:08.626 --> 00:53:12.266 A:middle
Now, as I move around and
work on the different parts

00:53:12.266 --> 00:53:16.926 A:middle
of my model code, Xcode is
always showing me relevant test

00:53:16.926 --> 00:53:21.826 A:middle
cases in the assistant editor
so I can keep an eye on them.

00:53:22.036 --> 00:53:23.936 A:middle
Now I happen to have
the implementation

00:53:23.936 --> 00:53:25.646 A:middle
for these methods
in a code snippet.

00:53:26.396 --> 00:53:27.396 A:middle
So I'll add those now.

00:53:32.716 --> 00:53:35.126 A:middle
And because the tests
are sitting right next

00:53:35.126 --> 00:53:38.976 A:middle
to my main code in the assistant
editor, as I'm implementing each

00:53:38.976 --> 00:53:41.796 A:middle
of these methods, I
can very easily verify

00:53:41.796 --> 00:53:44.976 A:middle
that I've done it correctly by
just running the test as I go.

00:53:49.156 --> 00:53:49.886 A:middle
All right.

00:53:49.886 --> 00:53:52.276 A:middle
And it looks like I've
completed the implementation

00:53:52.276 --> 00:53:57.086 A:middle
of this feature.

00:53:57.266 --> 00:54:01.776 A:middle
Now, in Xcode 5, we want to
make it really easy for you guys

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:01.776 --> 00:54:03.286 A:middle
to write great applications

00:54:03.356 --> 00:54:06.566 A:middle
and the new testing
functionality is a big part

00:54:07.306 --> 00:54:08.166 A:middle
of that.

00:54:08.346 --> 00:54:11.356 A:middle
But tests are really only useful
if they're run frequently.

00:54:11.986 --> 00:54:15.456 A:middle
And wouldn't it be great if
your test could be running all

00:54:15.456 --> 00:54:16.016 A:middle
the time.

00:54:17.396 --> 00:54:19.046 A:middle
Well, that's what
Bots can do for you.

00:54:19.596 --> 00:54:21.896 A:middle
And they'll also
perform static analysis

00:54:22.526 --> 00:54:24.276 A:middle
and build archives
of your application.

00:54:25.326 --> 00:54:29.106 A:middle
Bots do this integration work
either whenever changes are made

00:54:29.106 --> 00:54:32.436 A:middle
to your project or on some
sets schedule of your choosing.

00:54:34.916 --> 00:54:38.316 A:middle
The iOS version of our jogging
application already has a Bot.

00:54:38.896 --> 00:54:41.866 A:middle
And when I'm in Xcode, I can
see any Bots for the projects

00:54:41.866 --> 00:54:44.246 A:middle
that I'm working on right
in the logs navigator.

00:54:45.816 --> 00:54:48.726 A:middle
This Bot had a test failure
the last time that it ran

00:54:49.576 --> 00:54:52.216 A:middle
and if I click on it, I can
see a more detailed report.

00:54:53.656 --> 00:54:57.816 A:middle
This tells me at a glance
how my Bot is doing.

00:54:58.006 --> 00:55:00.316 A:middle
There are issue counts
for the last integration,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:55:01.616 --> 00:55:04.326 A:middle
graphs that show how
my Bot has been doing

00:55:04.326 --> 00:55:09.036 A:middle
over the past few integrations,
and a current list of build

00:55:09.036 --> 00:55:13.016 A:middle
and test issues that
the Bot has found.

00:55:13.196 --> 00:55:15.396 A:middle
I can double-click on one
of these issues to go right

00:55:15.396 --> 00:55:18.176 A:middle
for the code and this actually
shows one of the big benefits

00:55:18.176 --> 00:55:20.186 A:middle
of having this built
right in to Xcode.

00:55:20.656 --> 00:55:23.106 A:middle
I can easily close the
loop, get right to the place

00:55:23.136 --> 00:55:25.546 A:middle
where the problem is and fix it.

00:55:26.646 --> 00:55:28.446 A:middle
And let's go back to
the report for now.

00:55:28.446 --> 00:55:31.926 A:middle
One of the main reasons
of course

00:55:31.926 --> 00:55:34.436 A:middle
to have a Bot is to run tests.

00:55:35.426 --> 00:55:39.286 A:middle
And I can use the test tab
to get a lot more detail

00:55:39.286 --> 00:55:42.046 A:middle
about how the Bot is
doing with my test.

00:55:42.936 --> 00:55:44.576 A:middle
There's a trend graph here

00:55:44.576 --> 00:55:46.496 A:middle
that shows me how my
test have been doing

00:55:46.496 --> 00:55:48.316 A:middle
over the entire history
of this Bot.

00:55:49.596 --> 00:55:54.096 A:middle
And below, I see information
about each individual test case

00:55:54.426 --> 00:55:57.606 A:middle
that the Bot is running
and how it's been doing

00:55:57.606 --> 00:55:59.086 A:middle
over the past few integrations.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:56:00.346 --> 00:56:01.966 A:middle
Here I can easily see

00:56:02.386 --> 00:56:04.706 A:middle
which tests are actually
failing right now

00:56:04.796 --> 00:56:09.386 A:middle
and when they started to fail.

00:56:09.606 --> 00:56:12.816 A:middle
So like with the issue display,
if I want, I can go to the code

00:56:12.816 --> 00:56:15.336 A:middle
for a test case that's failing
just by double-clicking.

00:56:16.376 --> 00:56:19.906 A:middle
But another way to
approach fixing a test is

00:56:19.906 --> 00:56:22.056 A:middle
to actually find
out who broke it,

00:56:22.536 --> 00:56:24.606 A:middle
track them down and
make them pay.

00:56:26.966 --> 00:56:29.276 A:middle
[laughter] So, let's
do that and I'm going

00:56:29.276 --> 00:56:30.856 A:middle
to deputize all of
you right now.

00:56:30.856 --> 00:56:31.976 A:middle
So, you're going to help me.

00:56:33.396 --> 00:56:35.586 A:middle
I can identify that
this is the integration

00:56:35.776 --> 00:56:37.146 A:middle
where this Bots started to fail.

00:56:37.146 --> 00:56:40.266 A:middle
And if I double-click
on the integration,

00:56:41.326 --> 00:56:43.056 A:middle
I'll go into the
integration report

00:56:43.056 --> 00:56:46.756 A:middle
which gives me a lot more
detail about the test.

00:56:46.936 --> 00:56:49.516 A:middle
And here I can see that this
Bot is actually running my test

00:56:49.516 --> 00:56:50.766 A:middle
on four different devices.

00:56:51.286 --> 00:56:55.346 A:middle
And not only that, but I can
clearly see that a couple

00:56:55.346 --> 00:56:57.686 A:middle
of these test failures
are only happening

00:56:57.686 --> 00:56:59.376 A:middle
on one particular
type of device.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:57:00.976 --> 00:57:03.846 A:middle
Now, you can't always
be running your test

00:57:03.846 --> 00:57:07.036 A:middle
on every different hardware
configuration and OS version

00:57:07.036 --> 00:57:08.196 A:middle
that your app may support.

00:57:09.296 --> 00:57:10.136 A:middle
But the Bots can.

00:57:10.136 --> 00:57:14.126 A:middle
Now let's remember our mission
though, we're here to track

00:57:14.156 --> 00:57:15.936 A:middle
down the culprit here.

00:57:16.516 --> 00:57:19.946 A:middle
The integration report
also has a Commits tab

00:57:20.096 --> 00:57:23.966 A:middle
where we can see all of the new
Commits for this integration.

00:57:24.246 --> 00:57:26.166 A:middle
And I can see that in this
one, there was only one

00:57:27.146 --> 00:57:29.746 A:middle
and I can even jump right in

00:57:29.746 --> 00:57:32.516 A:middle
and see what source file changes
were made before I go track

00:57:32.516 --> 00:57:34.356 A:middle
down Jon to make him
fix this problem.

00:57:35.496 --> 00:57:36.846 A:middle
Jon we'll talk later.

00:57:37.426 --> 00:57:42.086 A:middle
Now I have a-- we've
been looking at the Bot

00:57:42.086 --> 00:57:45.526 A:middle
for the iOS version of Jogr and
I'm thinking that I really ought

00:57:45.526 --> 00:57:47.296 A:middle
to have one for the
Mac version as well.

00:57:48.696 --> 00:57:50.936 A:middle
So to create a new
Bot, it's just as easy

00:57:50.936 --> 00:57:52.896 A:middle
as choosing Create Bot
from the Product Menu.

00:57:54.936 --> 00:57:57.816 A:middle
This Bot is going to build
the Mac version of my project

00:57:57.896 --> 00:58:02.896 A:middle
and I'll give it a name.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:58:03.106 --> 00:58:06.436 A:middle
I'd like this Bot to run every
time there are new changes made

00:58:06.536 --> 00:58:08.276 A:middle
to my-- committed
to the repository.

00:58:08.816 --> 00:58:12.006 A:middle
And by default, Xcode
is going to send--

00:58:12.536 --> 00:58:15.146 A:middle
the server rather is going
to send email to the people

00:58:15.146 --> 00:58:19.296 A:middle
who have committed new changes
whenever the Bots start to fail.

00:58:19.486 --> 00:58:22.786 A:middle
Xcode goes off and creates
the Bot and it takes me

00:58:22.786 --> 00:58:25.826 A:middle
to the new Bots report as
the first integration starts.

00:58:29.076 --> 00:58:33.666 A:middle
Now, Bots-- your Bots
are working continuously

00:58:34.006 --> 00:58:36.106 A:middle
to make sure that your
apps are going to be great.

00:58:36.526 --> 00:58:41.286 A:middle
And when they find problems,
you'll see them right in Xcode.

00:58:41.416 --> 00:58:44.476 A:middle
Another great way to keep track
of how your Bots are doing

00:58:44.476 --> 00:58:47.336 A:middle
for you and your whole team
is to use the Scoreboard.

00:58:51.196 --> 00:58:54.946 A:middle
We have one of these up on the
wall in our development area

00:58:54.946 --> 00:58:59.206 A:middle
on a big TV all the time so
that we always know how our Bots

00:58:59.206 --> 00:58:59.556 A:middle
are doing.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:59:00.206 --> 00:59:05.366 A:middle
This way, we're always aware
of how the Bots are doing

00:59:05.536 --> 00:59:08.336 A:middle
and when something goes
wrong, we can all pitch

00:59:08.336 --> 00:59:13.186 A:middle
in to start fixing the problem.

00:59:13.276 --> 00:59:15.496 A:middle
With workspace centered
source control,

00:59:16.896 --> 00:59:20.566 A:middle
the improved testing support,
continuous integration,

00:59:20.636 --> 00:59:24.566 A:middle
and the team score board, Xcode
5 makes it easier than ever

00:59:24.566 --> 00:59:26.336 A:middle
for you and your entire team

00:59:27.086 --> 00:59:29.656 A:middle
to work together to
create great apps.

00:59:30.576 --> 00:59:30.976 A:middle
Back to you, Chris.

00:59:31.516 --> 00:59:38.036 A:middle
[ Applause ]

00:59:38.536 --> 00:59:38.976 A:middle
&gt;&gt; Thanks Mike.

00:59:39.776 --> 00:59:42.456 A:middle
Xcode 5 is available--
is available right now.

00:59:42.736 --> 00:59:46.506 A:middle
We think that it will help
you build better apps faster

00:59:46.506 --> 00:59:49.276 A:middle
and easier than ever before.

00:59:49.436 --> 00:59:53.216 A:middle
Now, Xcode 5 in the OS X and
OS X server are both available

00:59:53.216 --> 00:59:55.536 A:middle
for download from the
Apple Developer Website.

00:59:56.796 --> 01:00:01.186 A:middle
Xcode includes the SDKs for
both iOS 7 and OS X Mavericks

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:00:01.596 --> 01:00:04.756 A:middle
and it runs on either a Mountain
Lion or a Mavericks machine.

01:00:06.006 --> 01:00:08.186 A:middle
OS X works with either Xcode

01:00:08.536 --> 01:00:11.646 A:middle
but it itself must be
run on Mavericks to work.

01:00:12.456 --> 01:00:14.426 A:middle
Now, a great way to get started
here at the conference is

01:00:14.426 --> 01:00:16.186 A:middle
to run both of these
on the same machine

01:00:16.316 --> 01:00:17.596 A:middle
and it's really easy to do that.

01:00:18.206 --> 01:00:20.366 A:middle
If you have any questions,
we'd be really thrilled to talk

01:00:20.366 --> 01:00:22.736 A:middle
to you this week in
the lab here at WWDC.

01:00:23.246 --> 01:00:23.686 A:middle
Thank you all.

01:00:24.516 --> 01:00:33.300 A:middle
[ Silence ]

