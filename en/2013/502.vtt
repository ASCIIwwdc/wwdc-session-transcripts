WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:09.456 A:middle
[ Silence ]

00:00:09.956 --> 00:00:10.856 A:middle
&gt;&gt; Thank you everyone.

00:00:11.366 --> 00:00:13.506 A:middle
My name is Jacques
Gasselin de Richebourg

00:00:13.906 --> 00:00:15.766 A:middle
and I manage the Game
[inaudible] team here at Apple.

00:00:16.716 --> 00:00:20.686 A:middle
I am extremely excited to tell
you about this feature today

00:00:20.686 --> 00:00:22.926 A:middle
and this is the Introduction
to Sprite Kit.

00:00:23.436 --> 00:00:25.836 A:middle
But before we get in to the
nitty-gritty details of it,

00:00:25.836 --> 00:00:30.866 A:middle
I'll like to look at where we
are and I think we all know

00:00:30.866 --> 00:00:33.776 A:middle
that games are incredibly
successful in our platform.

00:00:34.726 --> 00:00:36.736 A:middle
Just this morning I had
a look on the App Store.

00:00:37.186 --> 00:00:41.246 A:middle
I looked at the US
Top 100 paid icon apps

00:00:41.596 --> 00:00:44.496 A:middle
and 60 out of 100 are games.

00:00:44.546 --> 00:00:46.806 A:middle
And that's a pretty
good indicator

00:00:46.806 --> 00:00:47.606 A:middle
that we're on to something.

00:00:48.256 --> 00:00:52.806 A:middle
Now, a lot of these
games are truly iconic.

00:00:53.896 --> 00:00:58.136 A:middle
We have games like Angry Birds,
Cut the Rope, Doodle Jump,

00:00:58.196 --> 00:01:00.036 A:middle
Where is My Water, Tiny Wings,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:01.286 --> 00:01:02.876 A:middle
I'm sure you're all
aware of these games.

00:01:03.656 --> 00:01:05.056 A:middle
And many of them are 2D.

00:01:05.465 --> 00:01:07.636 A:middle
We look to this and we realize

00:01:07.636 --> 00:01:09.636 A:middle
that developers have
a lot in common needs.

00:01:10.796 --> 00:01:15.436 A:middle
2D game developers need a lot of
beautiful graphics, really fast.

00:01:16.866 --> 00:01:19.586 A:middle
They need particle systems,
they need visual effects,

00:01:20.216 --> 00:01:22.406 A:middle
and they need physics
and animation

00:01:22.746 --> 00:01:24.856 A:middle
to really give you a great
game play experience.

00:01:25.146 --> 00:01:30.296 A:middle
So, we thought about
this and really,

00:01:30.296 --> 00:01:34.166 A:middle
to make a really
efficient 2D game engine,

00:01:34.856 --> 00:01:37.886 A:middle
you need to build it from the
ground up where the focus is

00:01:37.886 --> 00:01:41.656 A:middle
on speed and efficiency
and that's what we did.

00:01:42.256 --> 00:01:47.446 A:middle
So Sprite Kit, there's the heavy
lifting for you so you can focus

00:01:47.446 --> 00:01:49.706 A:middle
on making games instead
of game engines.

00:01:49.706 --> 00:01:52.446 A:middle
All right, let's
get to the features.

00:01:53.106 --> 00:01:56.766 A:middle
Sprite Kit, enhancing
2D games development.

00:01:57.686 --> 00:02:00.746 A:middle
It has features that you would
expect from the Sprite engine

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.856 --> 00:02:02.556 A:middle
like Sprites animating
of course,

00:02:02.756 --> 00:02:04.666 A:middle
tinted, particle effects.

00:02:05.336 --> 00:02:07.416 A:middle
It has geometric
primitives that you might use

00:02:07.416 --> 00:02:08.756 A:middle
for debugging or even shipping.

00:02:09.425 --> 00:02:12.316 A:middle
You can do rectangles,
circles, pads.

00:02:12.506 --> 00:02:13.666 A:middle
You can do arbitrary pads.

00:02:14.526 --> 00:02:16.406 A:middle
So you can do subpads
inside them,

00:02:16.716 --> 00:02:18.186 A:middle
you can even have them
self-intersecting,

00:02:18.186 --> 00:02:21.156 A:middle
and this is all rendered on
the GPU extremely efficiently.

00:02:22.496 --> 00:02:24.296 A:middle
You also have animations
and physics.

00:02:24.296 --> 00:02:27.316 A:middle
And what we did here
is we went above

00:02:27.316 --> 00:02:29.656 A:middle
and beyond what you
really need for every game.

00:02:30.076 --> 00:02:30.866 A:middle
We really want to make sure

00:02:30.866 --> 00:02:33.656 A:middle
that you could do whatever
your imagination had in mind.

00:02:34.416 --> 00:02:37.026 A:middle
So, animations and physics
are tied together so closely

00:02:37.636 --> 00:02:39.846 A:middle
that you can animate
an object that is

00:02:39.946 --> 00:02:41.206 A:middle
under the influence of physics.

00:02:41.746 --> 00:02:43.806 A:middle
That should be quite special
if you've ever tried to do

00:02:43.806 --> 00:02:44.766 A:middle
in 2D game with physics.

00:02:45.926 --> 00:02:47.596 A:middle
We've also gone above
and beyond when it comes

00:02:47.646 --> 00:02:50.346 A:middle
to system integration of
current media frameworks.

00:02:50.876 --> 00:02:55.256 A:middle
Core audio, core image and even
foundation are all super easy

00:02:55.256 --> 00:02:56.216 A:middle
to integrate into your game.

00:02:56.686 --> 00:03:00.026 A:middle
So you can have video sprites,
you can apply core image effects

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.426 --> 00:03:02.016 A:middle
to your whole scene
or individual sprites

00:03:02.496 --> 00:03:05.396 A:middle
and you can also play sounds
as part of your animations.

00:03:05.936 --> 00:03:07.316 A:middle
We want to make it
even easier for you.

00:03:07.866 --> 00:03:10.736 A:middle
So, Sprite Kit is tightly
integrated into Xcode.

00:03:11.056 --> 00:03:14.876 A:middle
We have a particle
editor that you can edit

00:03:14.876 --> 00:03:16.936 A:middle
and create particles
with as you develop

00:03:17.726 --> 00:03:21.866 A:middle
and we also have a very special
tool that you will notice

00:03:22.026 --> 00:03:23.276 A:middle
or probably not look
at too often.

00:03:23.336 --> 00:03:26.266 A:middle
And this is an Automatic
Texture Atlas generator.

00:03:27.226 --> 00:03:30.586 A:middle
What it does is it analyzes
the files that you have in one

00:03:30.586 --> 00:03:32.106 A:middle
of your source image folders.

00:03:33.016 --> 00:03:34.966 A:middle
And if you say, I would
like this to be in Atlas,

00:03:35.046 --> 00:03:37.626 A:middle
we will go through it, pack
it as efficiently as we can,

00:03:38.716 --> 00:03:39.846 A:middle
but here's the real magic.

00:03:40.346 --> 00:03:42.986 A:middle
If you started out using single
images and referencing them

00:03:42.986 --> 00:03:45.486 A:middle
in code that way, when
you move to an Atlas,

00:03:45.846 --> 00:03:46.916 A:middle
you won't have to
change the code.

00:03:47.326 --> 00:03:48.346 A:middle
We figure it out for you.

00:03:48.766 --> 00:03:50.476 A:middle
Okay, so let's get into it.

00:03:50.786 --> 00:03:53.666 A:middle
So today, we have the
agenda of introducing

00:03:53.666 --> 00:03:54.846 A:middle
of Sprite Kit of course to you.

00:03:55.026 --> 00:03:56.196 A:middle
We'll go through
the known types.

00:03:57.266 --> 00:03:58.856 A:middle
We will show you the
different effects and actions

00:03:58.856 --> 00:04:01.186 A:middle
that you can apply and
we'll also show you physics.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:02.346 --> 00:04:04.726 A:middle
In the second session,
we're going to focus

00:04:04.726 --> 00:04:06.326 A:middle
on designing games
using Sprite Kit.

00:04:06.936 --> 00:04:09.786 A:middle
We have a legendary game
they offer here and we talk

00:04:09.786 --> 00:04:12.236 A:middle
to you a little bit about
experimenting with Sprite Kit

00:04:12.786 --> 00:04:15.826 A:middle
and the take-home demo that you
hopefully have all downloaded

00:04:15.826 --> 00:04:21.206 A:middle
on the iOS 7 WWDC sample code
site called Adventure was

00:04:21.206 --> 00:04:23.076 A:middle
actually designed and
developed very quickly

00:04:23.076 --> 00:04:23.746 A:middle
about this gentleman.

00:04:24.216 --> 00:04:25.396 A:middle
And I'm very excited
to have him here.

00:04:26.556 --> 00:04:30.516 A:middle
Wilson talked about managing the
art pipeline, creating, editing,

00:04:30.516 --> 00:04:32.636 A:middle
and using the art that
your artist has created.

00:04:32.636 --> 00:04:35.136 A:middle
And then we'll have a bit
more of an in-depth look

00:04:35.136 --> 00:04:37.916 A:middle
at the Xcode Support Sprite Kit.

00:04:37.916 --> 00:04:41.576 A:middle
Okay? Now I'm going to show
you a demo of Adventure,

00:04:41.606 --> 00:04:43.076 A:middle
in case you haven't seen it.

00:04:43.866 --> 00:04:44.806 A:middle
So here we have Adventure,

00:04:45.186 --> 00:04:48.906 A:middle
it's a multiplayer
controlling 2D game, topdown.

00:04:50.156 --> 00:04:52.166 A:middle
I'm going to select
the archer in this case

00:04:52.546 --> 00:04:54.216 A:middle
and we're going to
start playing.

00:04:55.016 --> 00:04:57.176 A:middle
So this works with Game
Controllers, works on iOS

00:04:57.336 --> 00:05:02.066 A:middle
and OS X and you can use the
keyboard and mouse to go around.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:02.396 --> 00:05:05.636 A:middle
So, we have an archer here who's
animating using frame-based

00:05:05.636 --> 00:05:06.666 A:middle
animation on Sprites.

00:05:07.226 --> 00:05:09.526 A:middle
We have particle systems that
are affecting the leaves here.

00:05:09.526 --> 00:05:10.716 A:middle
You see the leaves
are falling down.

00:05:11.456 --> 00:05:14.156 A:middle
We're doing some really
funky actions to fade

00:05:14.156 --> 00:05:15.416 A:middle
up the trees as you
go under them.

00:05:15.926 --> 00:05:18.276 A:middle
And you'll notice there's
even a parallax effect applied

00:05:18.276 --> 00:05:20.986 A:middle
to this giving it
more of a depth feel.

00:05:21.846 --> 00:05:27.226 A:middle
As you walk around and fire
arrows at the problems,

00:05:28.416 --> 00:05:30.476 A:middle
these are all done
using particle systems.

00:05:31.296 --> 00:05:33.326 A:middle
Not always are the flames
but particle systems too.

00:05:34.696 --> 00:05:37.616 A:middle
Okay. Now I want you all to
have a look at that yourselves,

00:05:37.896 --> 00:05:41.236 A:middle
download it, play with it,
modify it, it's yours to have.

00:05:42.106 --> 00:05:43.536 A:middle
So, thank you for your time.

00:05:43.536 --> 00:05:46.506 A:middle
I'm going to hand you over
now to our principal engineer

00:05:46.506 --> 00:05:48.826 A:middle
on Sprite Kit, Tim Oriol,
and he's going to take you

00:05:48.826 --> 00:05:49.626 A:middle
through all the details.

00:05:50.466 --> 00:05:52.466 A:middle
Thank you so much for your
time and I hope you enjoy it.

00:05:52.786 --> 00:05:53.246 A:middle
&gt;&gt; Thank you, Jacques.

00:05:53.576 --> 00:05:56.516 A:middle
So what I'd like to do now
is give you a tour of the API

00:05:57.166 --> 00:05:59.646 A:middle
and show you what Sprite Kit
has to offer for your games.

00:05:59.646 --> 00:06:01.786 A:middle
So I'm going to start
with the basics.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:02.416 --> 00:06:06.566 A:middle
There's three basic parts to any
Sprite Kit game and not consists

00:06:06.566 --> 00:06:11.106 A:middle
of your scenes, your animations
and actions, and physics.

00:06:11.626 --> 00:06:14.306 A:middle
So scenes is the visual
layout of your game,

00:06:14.616 --> 00:06:16.596 A:middle
all of your game
objects, your heroes,

00:06:16.596 --> 00:06:18.106 A:middle
your bad guys, stuff like that.

00:06:18.596 --> 00:06:24.656 A:middle
And actions in Sprite Kit allow
you to perform basic animations

00:06:24.656 --> 00:06:27.896 A:middle
on these game objects
like Rotate,

00:06:27.986 --> 00:06:30.556 A:middle
Scale, Movement, Tinting.

00:06:31.076 --> 00:06:34.956 A:middle
And then the third component
is our built-in physics engine

00:06:34.956 --> 00:06:37.686 A:middle
which you can use
with animations,

00:06:37.776 --> 00:06:40.416 A:middle
or instead of animations
to bring life

00:06:40.506 --> 00:06:42.266 A:middle
and excitement to your game.

00:06:43.656 --> 00:06:45.866 A:middle
So let's take a closer look
at what we mean by scenes.

00:06:46.476 --> 00:06:50.196 A:middle
So in Sprite Kit, your
scene is composed of a tree

00:06:50.196 --> 00:06:52.856 A:middle
of multiple elements
which we call nodes.

00:06:53.616 --> 00:06:54.616 A:middle
So these are all nodes.

00:06:55.206 --> 00:06:58.196 A:middle
You know what, some of them
represent visual content

00:06:58.196 --> 00:07:03.566 A:middle
such as shapes or images like
our background image or trees

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:03.626 --> 00:07:05.676 A:middle
or the character
sprite for our hero.

00:07:06.206 --> 00:07:08.286 A:middle
And other nodes are merely used

00:07:08.286 --> 00:07:10.886 A:middle
as organizational
elements or for grouping.

00:07:11.256 --> 00:07:15.196 A:middle
For example, we have one to
represent our background layer

00:07:15.506 --> 00:07:18.276 A:middle
so this gives us a single
point where we could move

00:07:18.276 --> 00:07:19.686 A:middle
and translate that one node

00:07:19.686 --> 00:07:21.096 A:middle
and have it affect
all of our children.

00:07:21.396 --> 00:07:25.136 A:middle
So, not every node in your scene
necessarily represents explicit

00:07:25.136 --> 00:07:25.806 A:middle
visual content.

00:07:26.836 --> 00:07:28.336 A:middle
And once you have
your scene built,

00:07:28.336 --> 00:07:31.676 A:middle
you can then apply actions
and physics to any node

00:07:31.676 --> 00:07:36.966 A:middle
within your scene and that's
how you put together the parts

00:07:36.966 --> 00:07:37.516 A:middle
of Sprite Kit.

00:07:37.966 --> 00:07:39.816 A:middle
But of course we also have
to get this into your app.

00:07:40.346 --> 00:07:42.226 A:middle
And to do that, you're
going to want

00:07:42.406 --> 00:07:44.626 A:middle
to add an SKView to your app.

00:07:44.626 --> 00:07:48.286 A:middle
SKView is on both platforms,
so we subclass NSView on OS X

00:07:48.286 --> 00:07:50.296 A:middle
and the UIView on iOS.

00:07:51.706 --> 00:07:54.356 A:middle
So you drop that in and then
you simply tell the view

00:07:54.356 --> 00:07:55.386 A:middle
to present your scene.

00:07:56.516 --> 00:07:58.496 A:middle
So once you've done that,

00:07:58.496 --> 00:08:00.706 A:middle
the basic Sprite Kit
game loop kicks in.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:01.606 --> 00:08:03.546 A:middle
And so this is the sequence
of events that's going

00:08:03.546 --> 00:08:06.306 A:middle
to happen every frame once
your scene is in the view.

00:08:06.926 --> 00:08:10.186 A:middle
And it will start off by calling
the update method on your scene.

00:08:10.806 --> 00:08:12.866 A:middle
And, so this is where you're
going to be doing the majority

00:08:12.866 --> 00:08:15.306 A:middle
of your game logic, this
is maybe where I'd choose

00:08:15.396 --> 00:08:16.746 A:middle
to spawn additional enemies.

00:08:16.806 --> 00:08:21.576 A:middle
Maybe I'm going to update the
high score or I'm going to check

00:08:21.576 --> 00:08:24.256 A:middle
and see if my character has
completed all the necessary

00:08:24.256 --> 00:08:26.046 A:middle
requirements to advance
to the next level.

00:08:26.046 --> 00:08:28.466 A:middle
This is your basic
area to do game logic.

00:08:29.786 --> 00:08:31.626 A:middle
After you've done all that,

00:08:31.706 --> 00:08:34.885 A:middle
Sprite Kit will then evaluate
any actions attached to nodes

00:08:34.885 --> 00:08:36.275 A:middle
in your scene for
the current frame.

00:08:36.916 --> 00:08:40.486 A:middle
After all these actions
have been evaluated,

00:08:40.756 --> 00:08:42.885 A:middle
Sprite Kit will let you know
that it's done doing that

00:08:43.126 --> 00:08:46.766 A:middle
and give you a chance to react
to the result of those actions.

00:08:47.306 --> 00:08:50.896 A:middle
So, at this point, this is after
the actions have been applied

00:08:51.266 --> 00:08:52.906 A:middle
so the position of
all the elements

00:08:52.906 --> 00:08:54.936 A:middle
in your game will be
exactly where they are

00:08:55.176 --> 00:08:56.706 A:middle
when they're rendered
for this frame.

00:08:57.096 --> 00:09:00.246 A:middle
So if I have a game where maybe
I've got some fireballs lying

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.246 --> 00:09:03.326 A:middle
across the screen and I'm doing
that with some movement actions

00:09:03.326 --> 00:09:06.436 A:middle
that I set up, this will be a
great place to check and see

00:09:06.436 --> 00:09:08.736 A:middle
if the-- one of those fireballs
is completely off screen

00:09:08.736 --> 00:09:10.936 A:middle
and we can go ahead
and clean that up

00:09:10.936 --> 00:09:12.016 A:middle
and remove it from our scene.

00:09:13.436 --> 00:09:17.026 A:middle
After that, Sprite Kit will
then simulate any physics

00:09:17.026 --> 00:09:19.806 A:middle
that you may have set up on
some of the nodes in your scene.

00:09:20.496 --> 00:09:23.206 A:middle
And it'll give you an
additional callback after that

00:09:23.616 --> 00:09:25.786 A:middle
to let you know that the
physics have been simulated.

00:09:26.356 --> 00:09:28.256 A:middle
This is where you can
clean up the results

00:09:28.256 --> 00:09:31.346 A:middle
of the physics simulation or
react to different effects

00:09:31.346 --> 00:09:32.856 A:middle
that may have been
done by physics.

00:09:33.136 --> 00:09:35.826 A:middle
This is also your final
callback and your last chance

00:09:35.826 --> 00:09:40.836 A:middle
to change state in the node
before Sprite Kit goes off

00:09:40.836 --> 00:09:42.626 A:middle
and renders that to the view.

00:09:43.976 --> 00:09:47.166 A:middle
You should note that after
the actions have been applied,

00:09:47.476 --> 00:09:49.856 A:middle
any new action that
you've added to your scene

00:09:50.186 --> 00:09:53.096 A:middle
in the following two
callbacks will not be evaluated

00:09:53.096 --> 00:09:54.806 A:middle
into the next frame
because they've already been

00:09:54.806 --> 00:09:55.926 A:middle
taken place.

00:09:57.136 --> 00:09:59.986 A:middle
So, I'm going to give you
a complete tour of the API

00:09:59.986 --> 00:10:02.226 A:middle
and we're going to go
through a lot of the headers.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:02.626 --> 00:10:04.806 A:middle
But first, I want to
give you a demo of part

00:10:04.806 --> 00:10:07.226 A:middle
of the Xcode template that
we have available for you

00:10:07.226 --> 00:10:08.086 A:middle
in the developer seed.

00:10:08.596 --> 00:10:12.156 A:middle
And I really just wanted to
show you how much you can do

00:10:12.386 --> 00:10:16.956 A:middle
with very little code and
really how approachable

00:10:16.956 --> 00:10:18.276 A:middle
and readable this API is.

00:10:18.726 --> 00:10:22.576 A:middle
And even without seeing the
API before, you should be able

00:10:22.576 --> 00:10:25.696 A:middle
to follow along with
exactly what's going on even

00:10:25.696 --> 00:10:28.626 A:middle
if you've never been
in the game before.

00:10:28.766 --> 00:10:29.986 A:middle
So here, I've got
my zib [phonetic],

00:10:29.986 --> 00:10:33.346 A:middle
I just got a big SKView
that I've put in here.

00:10:34.276 --> 00:10:38.136 A:middle
And then in application
didFinishLaunching,

00:10:38.456 --> 00:10:41.466 A:middle
I'm creating a new instance
of my scene which is the size

00:10:41.466 --> 00:10:44.826 A:middle
of the view and just telling
my view to present that scene.

00:10:47.776 --> 00:10:50.706 A:middle
So, let's take a look at
that subclass myScene.

00:10:52.296 --> 00:10:54.916 A:middle
So, when the scene is
created where it looks

00:10:54.916 --> 00:10:56.906 A:middle
like we're setting a
background color to what looks

00:10:56.906 --> 00:10:59.286 A:middle
like a dark gray
on our scene here.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.446 --> 00:11:03.626 A:middle
And then we've implemented the
mouseDown handler and looks

00:11:03.626 --> 00:11:05.926 A:middle
like we're getting the
location of the touch--

00:11:05.986 --> 00:11:10.406 A:middle
excuse me, the mouseEvent
in our scene space.

00:11:10.926 --> 00:11:14.876 A:middle
And then we're going to create
a Sprite using this selector

00:11:14.876 --> 00:11:17.606 A:middle
SpriteNode with image
named "Spaceship",

00:11:17.816 --> 00:11:18.526 A:middle
I wonder what that is.

00:11:18.976 --> 00:11:22.246 A:middle
And then I have-- I'm just
going to add that to myScene

00:11:22.246 --> 00:11:25.746 A:middle
and then I'll set the
position of the Sprite equal

00:11:25.746 --> 00:11:28.066 A:middle
to the location of
that mouseEvent.

00:11:28.796 --> 00:11:31.006 A:middle
Then I'm creating
something called an Action,

00:11:31.306 --> 00:11:35.566 A:middle
looks like it's doing a rotation
by Pi for a duration of one.

00:11:35.896 --> 00:11:39.046 A:middle
And I'm telling my Sprite to
repeat that action forever.

00:11:40.096 --> 00:11:42.786 A:middle
So, this is-- we got about
28 lines of code here.

00:11:43.666 --> 00:11:46.406 A:middle
So if I go ahead and run this,

00:11:47.736 --> 00:11:50.376 A:middle
hopefully we'll get what
we'd expect to happen.

00:11:51.516 --> 00:11:56.536 A:middle
[ Pause ]

00:11:57.036 --> 00:11:58.326 A:middle
That's what I expect to happen.

00:11:58.776 --> 00:12:01.106 A:middle
So we have our gray screen
here, that's what we set

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:01.106 --> 00:12:02.246 A:middle
for our background color.

00:12:02.316 --> 00:12:04.676 A:middle
And if I try clicking
in the scene,

00:12:04.926 --> 00:12:07.466 A:middle
we've already got a Sprite
in our game and animating

00:12:07.536 --> 00:12:08.896 A:middle
with just 28 lines of code.

00:12:08.956 --> 00:12:09.226 A:middle
And then [inaudible].

00:12:10.516 --> 00:12:14.666 A:middle
[ Applause ]

00:12:15.166 --> 00:12:17.406 A:middle
And of course we can go crazy
and do that multiple times

00:12:17.406 --> 00:12:19.056 A:middle
because we've implemented
as a mouseHandler.

00:12:19.416 --> 00:12:21.656 A:middle
So, we just want to make it
really easy to get started

00:12:21.656 --> 00:12:23.736 A:middle
and get you right into
making the actual game.

00:12:24.516 --> 00:12:29.526 A:middle
[ Pause ]

00:12:30.026 --> 00:12:32.286 A:middle
OK, so let's take a look at
the different types of nodes

00:12:32.286 --> 00:12:35.566 A:middle
that we have available
in the SpriteKit.

00:12:35.566 --> 00:12:37.986 A:middle
So, these are all the
nodes that we have.

00:12:38.116 --> 00:12:40.476 A:middle
They all inherit from
the base class of SKNode

00:12:40.786 --> 00:12:42.836 A:middle
and then we have
specialized subclasses

00:12:42.916 --> 00:12:45.356 A:middle
to do various things
for you in your game.

00:12:45.356 --> 00:12:48.986 A:middle
We have nodes for texts, we have
nodes of course for sprites,

00:12:49.456 --> 00:12:52.216 A:middle
we have nodes for doing shapes

00:12:52.216 --> 00:12:54.506 A:middle
and particle systems,
a lot of good stuff.

00:12:54.506 --> 00:12:58.626 A:middle
And we're going to take a
look at each of these now.

00:12:58.676 --> 00:13:01.366 A:middle
We'll start with the
base class, SKNode.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:02.026 --> 00:13:03.936 A:middle
SKNode has no inherent size

00:13:04.106 --> 00:13:05.656 A:middle
because it has no
inherent content.

00:13:06.176 --> 00:13:08.566 A:middle
So this is one of the nodes
that you would use as one

00:13:08.566 --> 00:13:10.726 A:middle
of those organizational
elements within your scene.

00:13:11.146 --> 00:13:13.456 A:middle
It has all of the basic
transform properties

00:13:13.456 --> 00:13:14.226 A:middle
that you would want.

00:13:14.276 --> 00:13:17.786 A:middle
You can do position,
rotation, scale on both axis,

00:13:17.786 --> 00:13:22.406 A:middle
you can apply alpha to the node
which will also be multiplied

00:13:22.406 --> 00:13:25.366 A:middle
down through to its children, so
you can fade out an entire tree.

00:13:25.366 --> 00:13:28.936 A:middle
You can also disable the
rendering of an entire node tree

00:13:28.936 --> 00:13:31.276 A:middle
by setting the hidden
flag on any of your nodes.

00:13:33.996 --> 00:13:35.456 A:middle
The next stop is SpriteNode.

00:13:35.916 --> 00:13:37.686 A:middle
This is the MVP of
the framework.

00:13:37.686 --> 00:13:38.496 A:middle
This is the one they're going

00:13:38.496 --> 00:13:40.176 A:middle
to be using all the
time in your game.

00:13:40.176 --> 00:13:43.056 A:middle
This is going to be 80 percent
of the nodes in your scene.

00:13:43.806 --> 00:13:46.576 A:middle
SpriteNode absolutely
does have an explicit size

00:13:47.016 --> 00:13:48.836 A:middle
because it actually
provides content.

00:13:49.456 --> 00:13:50.796 A:middle
It can do one of two things.

00:13:50.796 --> 00:13:52.806 A:middle
It can be a solid color

00:13:52.806 --> 00:13:58.746 A:middle
or it can also present a
texture like our Spaceship.

00:13:59.696 --> 00:14:02.166 A:middle
So, let's talk about
textures for a minute.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:03.416 --> 00:14:07.856 A:middle
Textures are how SpriteKit
represents bitmap--

00:14:08.016 --> 00:14:10.976 A:middle
reusable bitmap data
inside the framework.

00:14:11.586 --> 00:14:13.636 A:middle
And they're automatically
managed by the framework,

00:14:14.016 --> 00:14:15.616 A:middle
so you don't have to
worry too much about them.

00:14:15.926 --> 00:14:18.586 A:middle
And we provided a number of
different ways that you can use

00:14:18.636 --> 00:14:21.276 A:middle
to get your content into
a SpriteKit texture.

00:14:21.676 --> 00:14:24.646 A:middle
The most common one of course
is the image name to one

00:14:24.646 --> 00:14:25.776 A:middle
that we've seen a few times.

00:14:25.926 --> 00:14:29.776 A:middle
You got image in your bundle,
this works exactly like UIImage

00:14:29.776 --> 00:14:32.296 A:middle
or NSImage and we'll
go find that

00:14:32.296 --> 00:14:34.226 A:middle
and load it up into the texture.

00:14:34.706 --> 00:14:41.146 A:middle
You can also supply data using
CGImageRef, UIImage, NSImage

00:14:41.466 --> 00:14:44.766 A:middle
or even your own buffer
of RGBA bitmap data.

00:14:46.106 --> 00:14:48.576 A:middle
You can also even create
an additional texture

00:14:48.746 --> 00:14:51.476 A:middle
from a subregion
of an existing one.

00:14:51.476 --> 00:14:54.676 A:middle
So if I only wanted to show
that part of the Spaceship

00:14:55.186 --> 00:14:58.476 A:middle
as another node, I can just
create a new texture using

00:14:58.476 --> 00:15:01.626 A:middle
that subregion and it's actually
really cheap, SpriteKit's going

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:01.626 --> 00:15:03.366 A:middle
to take care all the
work behind the scenes.

00:15:03.366 --> 00:15:05.886 A:middle
We're not actually creating
an extra texture for that.

00:15:08.036 --> 00:15:11.326 A:middle
So, here's some basic
that you might use

00:15:11.326 --> 00:15:12.716 A:middle
to put a Sprite into your game.

00:15:13.106 --> 00:15:15.596 A:middle
You can see, we create a
SpriteNode and then I'm going

00:15:15.596 --> 00:15:19.636 A:middle
to create a texture using
my hero image then I'll set

00:15:19.636 --> 00:15:22.696 A:middle
that texture on my sprite and
then I want to set the size

00:15:22.696 --> 00:15:26.126 A:middle
of my sprite to match the size
of that image file that I used.

00:15:26.876 --> 00:15:28.266 A:middle
This seems like something
that people are going

00:15:28.266 --> 00:15:29.196 A:middle
to be doing all the time.

00:15:29.456 --> 00:15:30.506 A:middle
So, we didn't want
you to have to go

00:15:30.506 --> 00:15:31.766 A:middle
through all those four steps.

00:15:31.856 --> 00:15:34.306 A:middle
One of the basic principles
in SpriteKit is we wanted

00:15:34.306 --> 00:15:36.466 A:middle
to make things super
simple to do.

00:15:36.776 --> 00:15:39.206 A:middle
And we have a convenience method

00:15:39.206 --> 00:15:40.636 A:middle
that you can do this
all in one line.

00:15:41.006 --> 00:15:43.376 A:middle
We'll go fetch the
image from your bundle,

00:15:43.796 --> 00:15:45.686 A:middle
set that on the Sprite
and automatically set

00:15:45.836 --> 00:15:47.896 A:middle
up its size to match the image.

00:15:48.086 --> 00:15:53.546 A:middle
So, I've been telling the whole
truth before, it doesn't have

00:15:53.546 --> 00:15:55.446 A:middle
to be just a color or a texture.

00:15:55.966 --> 00:15:58.966 A:middle
SpriteNodes can also do a
blend of the two together.

00:15:59.566 --> 00:16:02.256 A:middle
So, if you have both a
color and a texture set

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:02.666 --> 00:16:05.206 A:middle
on your SpriteNode, you
can control the mixing

00:16:05.206 --> 00:16:07.416 A:middle
of the this two through
a third property

00:16:07.416 --> 00:16:08.726 A:middle
called colorBlendFactor.

00:16:09.436 --> 00:16:13.306 A:middle
So, this will allow you to tint
the texture using that color

00:16:13.306 --> 00:16:16.186 A:middle
that you've set on the
node, where 0 is no tinting

00:16:16.186 --> 00:16:17.446 A:middle
and we get the full texture.

00:16:17.856 --> 00:16:23.386 A:middle
And 1.0 is fully tinted and
the textures then only used

00:16:23.386 --> 00:16:25.346 A:middle
for alpha and luminance
information.

00:16:25.696 --> 00:16:27.946 A:middle
And it's really cool that the
alpha doesn't get overwritten

00:16:27.946 --> 00:16:31.476 A:middle
as well which means that I
can use these game elements

00:16:31.476 --> 00:16:33.736 A:middle
at different parts in my game.

00:16:33.736 --> 00:16:36.976 A:middle
For example, I can tint my
hero red when it gets hit

00:16:36.976 --> 00:16:38.236 A:middle
by an enemy projectile.

00:16:38.596 --> 00:16:41.396 A:middle
I can also have background
elements like this crystal here.

00:16:41.396 --> 00:16:45.106 A:middle
Maybe I wanted to look cool
in icy-blue in my ice world

00:16:45.106 --> 00:16:47.826 A:middle
and I'm going to use it later on
in my fire world and I'm going

00:16:47.826 --> 00:16:48.806 A:middle
to have it be glowy red.

00:16:48.806 --> 00:16:52.236 A:middle
It just allows you a lot more
freedom, so you're not tied

00:16:52.236 --> 00:16:56.206 A:middle
to a generating explicit
images for every type of effect

00:16:56.206 --> 00:17:00.596 A:middle
that you want to
do in your game.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:01.016 --> 00:17:03.686 A:middle
So, we want to take
a look at the effect

00:17:04.185 --> 00:17:07.016 A:middle
of all the different properties
that we have on SpriteNode,

00:17:07.126 --> 00:17:09.976 A:middle
many of them inherited from
SKNode that we just talked about

00:17:10.425 --> 00:17:12.256 A:middle
and how they would affect
how the Sprite will look.

00:17:12.766 --> 00:17:15.546 A:middle
So, the first two lines
here just gets our Sprite

00:17:15.546 --> 00:17:17.996 A:middle
on a screen, so that's
exactly what we would expect.

00:17:18.496 --> 00:17:20.326 A:middle
And then we can play
around with the alpha,

00:17:20.836 --> 00:17:22.425 A:middle
maybe fade it out a little bit.

00:17:22.906 --> 00:17:26.396 A:middle
We can modify the scale and
the texture will be stretched.

00:17:26.896 --> 00:17:31.316 A:middle
And then we can also
do a rotation

00:17:31.616 --> 00:17:34.016 A:middle
or we can set the color as well.

00:17:34.736 --> 00:17:36.876 A:middle
You notice when you do set
the color, it's not going

00:17:36.876 --> 00:17:37.976 A:middle
to have an immediate effect

00:17:37.976 --> 00:17:40.796 A:middle
until you also set
the colorBlendFactor

00:17:40.796 --> 00:17:42.396 A:middle
because it will default to 0

00:17:42.396 --> 00:17:44.626 A:middle
when you've created a
Sprite using an image.

00:17:45.126 --> 00:17:49.136 A:middle
And that's what we'd get if
we set the colorblend factor

00:17:49.136 --> 00:17:51.436 A:middle
to 1 using green as our color.

00:17:51.896 --> 00:17:54.456 A:middle
Next up, emitters.

00:17:55.076 --> 00:17:56.426 A:middle
How can you have
a 2D game engine

00:17:56.426 --> 00:17:57.806 A:middle
without having particle systems?

00:17:58.096 --> 00:17:59.466 A:middle
So, SpriteKit of course shift

00:17:59.466 --> 00:18:02.986 A:middle
to the fully featured
2D particle system.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:03.116 --> 00:18:05.606 A:middle
We support all of the basic
functionality that you know

00:18:05.606 --> 00:18:08.886 A:middle
and love from particle
systems like startValue

00:18:08.886 --> 00:18:11.646 A:middle
for all the different properties
we have to configure as well

00:18:11.646 --> 00:18:13.846 A:middle
as variants about
those values and speed

00:18:13.846 --> 00:18:15.826 A:middle
over time once the
particles are emitted.

00:18:15.826 --> 00:18:19.916 A:middle
But we also support advance
features like keyframe sequences

00:18:19.916 --> 00:18:21.366 A:middle
for certain values on particles.

00:18:21.776 --> 00:18:25.106 A:middle
For example, I can set
up a keyframe sequence

00:18:25.506 --> 00:18:29.106 A:middle
that ties the lifetime of
the particle to color values.

00:18:29.106 --> 00:18:31.096 A:middle
And we can get a really cool
effect like the fire here

00:18:31.096 --> 00:18:32.526 A:middle
where the particles
actually pass

00:18:32.556 --> 00:18:35.306 A:middle
through numerous different color
values over their lifetime.

00:18:35.576 --> 00:18:40.866 A:middle
We have-- there's a number of
different things, of course,

00:18:40.866 --> 00:18:42.326 A:middle
you can set on your
particle systems.

00:18:42.816 --> 00:18:44.726 A:middle
Of course, you can set the
texture that's going to be used

00:18:44.726 --> 00:18:47.296 A:middle
to render those particles,
scale, and rotation.

00:18:47.656 --> 00:18:49.226 A:middle
You can set the emission
angle that they're going

00:18:49.226 --> 00:18:50.236 A:middle
to be launched out at.

00:18:50.296 --> 00:18:53.586 A:middle
You can set variants
around that emission angle,

00:18:53.586 --> 00:18:55.616 A:middle
so you can create a cone,

00:18:55.876 --> 00:18:59.236 A:middle
the speed at which they're
launched out, blend modes.

00:18:59.296 --> 00:19:01.146 A:middle
There're just really so
many things you can surround

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:01.146 --> 00:19:02.676 A:middle
and just tweak these
things for hours.

00:19:03.536 --> 00:19:05.586 A:middle
Which is of course why we
didn't want you to do an encode

00:19:05.666 --> 00:19:07.566 A:middle
and we have the editor
built right in to Xcode.

00:19:07.946 --> 00:19:10.776 A:middle
This allows you to use data
driven particle effects,

00:19:11.086 --> 00:19:13.296 A:middle
it allows you to empower
your artist and allow them

00:19:13.296 --> 00:19:15.826 A:middle
to iterate independently
from development in the code,

00:19:16.206 --> 00:19:19.096 A:middle
and it'll greatly
reduce iteration time

00:19:19.196 --> 00:19:21.256 A:middle
for tweaking these
tiny visual effects

00:19:21.256 --> 00:19:23.356 A:middle
and lets you get exactly
the affects you want.

00:19:24.096 --> 00:19:28.046 A:middle
The editor in Xcode is built
off of a Sprite Kit view itself,

00:19:28.046 --> 00:19:30.236 A:middle
so you're getting real
life content there.

00:19:30.236 --> 00:19:31.566 A:middle
You're going to know
exactly what it's going

00:19:31.566 --> 00:19:32.476 A:middle
to look like in your game.

00:19:33.086 --> 00:19:35.806 A:middle
So, next I want to talk a
little bit about video in games.

00:19:36.266 --> 00:19:39.946 A:middle
So, up until now what I've
seen in terms of video

00:19:39.946 --> 00:19:42.756 A:middle
in games is people have put
video above their game view.

00:19:43.366 --> 00:19:46.236 A:middle
Some people have even made
transparent game using put video

00:19:46.236 --> 00:19:46.816 A:middle
behind it.

00:19:47.406 --> 00:19:48.846 A:middle
Or if you wanted
to do anything else

00:19:48.846 --> 00:19:50.906 A:middle
that was pretty much
roll your own in OpenGL.

00:19:51.506 --> 00:19:55.246 A:middle
But in Sprite Kit, video is
truly a first class sprite.

00:19:55.936 --> 00:19:57.026 A:middle
So, what does this mean?

00:19:57.366 --> 00:19:59.606 A:middle
This means of course we have
an easy one line convenience

00:19:59.606 --> 00:20:00.806 A:middle
function for you to get video

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.806 --> 00:20:01.976 A:middle
from a file directly
into your game.

00:20:02.046 --> 00:20:06.846 A:middle
You can create a VideoNode using
a video file in your bundle,

00:20:07.326 --> 00:20:10.496 A:middle
and this supports playback
and pausing of that video.

00:20:11.376 --> 00:20:13.076 A:middle
If you want more
advanced controls,

00:20:13.076 --> 00:20:16.596 A:middle
we also support using AV
foundations, AVPlayer,

00:20:16.596 --> 00:20:18.776 A:middle
as a means to create
a video node

00:20:18.776 --> 00:20:22.226 A:middle
which will allow you
advanced playback controls

00:20:22.226 --> 00:20:25.306 A:middle
like playback speed,
asynchronous loading,

00:20:25.306 --> 00:20:27.306 A:middle
even queuing up multiple videos.

00:20:27.306 --> 00:20:29.546 A:middle
So you can really
do a lot with this.

00:20:29.906 --> 00:20:31.606 A:middle
And it opens up like
a whole new world

00:20:31.606 --> 00:20:33.516 A:middle
of possibilities
for video in games.

00:20:33.876 --> 00:20:35.856 A:middle
So, I can now place it
anywhere in my node tree.

00:20:35.856 --> 00:20:38.716 A:middle
I can have spaceships lying
behind and in front of my video.

00:20:39.116 --> 00:20:41.656 A:middle
I can run actions no my
videos since this is a node.

00:20:41.656 --> 00:20:42.346 A:middle
I can rotate.

00:20:42.346 --> 00:20:43.556 A:middle
I can scale it, fade it.

00:20:44.216 --> 00:20:46.726 A:middle
I can even use video
as my level background.

00:20:47.126 --> 00:20:49.276 A:middle
If I wanted to be really
creative, I could enable physics

00:20:49.276 --> 00:20:51.436 A:middle
on my video and have them
floating around my scene.

00:20:51.826 --> 00:20:53.086 A:middle
Anything you can
do with the Sprite,

00:20:53.086 --> 00:20:54.206 A:middle
you can now do with video.

00:20:54.986 --> 00:20:56.446 A:middle
Next, ShapeNodes.

00:20:56.646 --> 00:21:00.656 A:middle
ShapeNodes are a great way to
display dynamic geometric shapes

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.656 --> 00:21:02.986 A:middle
within your game, we've
made it really easy

00:21:02.986 --> 00:21:05.236 A:middle
and we're using CGPath
as the container for you

00:21:05.236 --> 00:21:07.546 A:middle
to supply shapes to Sprite Kit

00:21:07.546 --> 00:21:09.686 A:middle
so you can use all the
great core graphics,

00:21:09.686 --> 00:21:13.786 A:middle
convenience functions to create
ellipsis, rectangles, circles.

00:21:13.786 --> 00:21:16.696 A:middle
You can have complex shapes

00:21:17.376 --> 00:21:19.666 A:middle
like this animating
doughnut above here.

00:21:20.176 --> 00:21:23.216 A:middle
We support stroking and
feeling the path as well.

00:21:23.216 --> 00:21:27.616 A:middle
We even allow you to do a glow
effect like the yellow line

00:21:27.616 --> 00:21:29.226 A:middle
in the bottom here,
sort of fringes out,

00:21:29.226 --> 00:21:31.296 A:middle
create a cool laser
light effect.

00:21:32.286 --> 00:21:33.656 A:middle
We also have LabelNodes.

00:21:34.126 --> 00:21:36.836 A:middle
So, for most of the UI in your
game, you're going to want

00:21:36.836 --> 00:21:39.236 A:middle
to use UIKit or AppKit
for buttons

00:21:39.236 --> 00:21:40.906 A:middle
and editable texts
and stuff like that.

00:21:41.416 --> 00:21:44.056 A:middle
But sometimes you really
want text in your app.

00:21:44.056 --> 00:21:45.346 A:middle
I mean directly in your game.

00:21:45.486 --> 00:21:48.496 A:middle
I want to apply those same
Sprite Kit actions to my text.

00:21:48.806 --> 00:21:54.026 A:middle
I want them to be between
nodes within my scene and to do

00:21:54.026 --> 00:21:57.196 A:middle
that Sprite Kit allows
you to use LabelNodes

00:21:57.196 --> 00:22:00.346 A:middle
to have single line text
in your game as a sprite.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.806 --> 00:22:04.316 A:middle
And we support all the system
fonts in either platform

00:22:04.316 --> 00:22:06.196 A:middle
and any custom fonts
that you may have added

00:22:06.196 --> 00:22:07.026 A:middle
to your apps bundle.

00:22:07.666 --> 00:22:10.636 A:middle
We also support, since it's
a node, all of the SKActions

00:22:11.686 --> 00:22:13.476 A:middle
which means I can animate,

00:22:13.476 --> 00:22:16.326 A:middle
rotate my text using the exact
same actions that I've built

00:22:16.376 --> 00:22:18.026 A:middle
to animate my game characters.

00:22:18.296 --> 00:22:23.156 A:middle
EffectNode, this
one is really cool.

00:22:23.606 --> 00:22:26.766 A:middle
So, what EffectNodes do
is they will render all

00:22:26.766 --> 00:22:29.616 A:middle
of their children into
an offscreen image

00:22:29.696 --> 00:22:33.186 A:middle
when we're generating
the frame and then

00:22:33.186 --> 00:22:35.376 A:middle
that image will then
be presented

00:22:35.376 --> 00:22:37.066 A:middle
into the final frame buffer.

00:22:37.416 --> 00:22:40.516 A:middle
So, this allows you to do
some really cool effects

00:22:40.516 --> 00:22:42.946 A:middle
like group opacity
and group blend modes

00:22:43.306 --> 00:22:45.446 A:middle
by having the children
of the EffectNode render

00:22:45.446 --> 00:22:47.796 A:middle
into that offscreen image
using their own opacity

00:22:48.076 --> 00:22:51.196 A:middle
and blend modes and then
the resulting image is then

00:22:52.156 --> 00:22:55.446 A:middle
presented into the frame buffer
using the EffectNodes' opacity

00:22:55.446 --> 00:22:56.066 A:middle
and blend mode.

00:22:56.646 --> 00:22:58.816 A:middle
And we've also-- since we
already have this offscreen

00:22:58.816 --> 00:23:00.676 A:middle
image, we thought it'd be
really cool to allow you

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.676 --> 00:23:02.776 A:middle
to apply our vast library

00:23:02.776 --> 00:23:05.516 A:middle
of core image filters
on both platforms.

00:23:05.516 --> 00:23:08.696 A:middle
We got a lot of great new
ones in iOS for iOS 7 now too

00:23:09.216 --> 00:23:10.826 A:middle
to that image before
we render it.

00:23:11.086 --> 00:23:15.396 A:middle
So you can take the output
of an EffectNode and send it

00:23:15.396 --> 00:23:17.356 A:middle
through a blur filter
or a pinch filter

00:23:17.596 --> 00:23:20.396 A:middle
and you can do this anywhere in
your game scene or I can do it

00:23:20.396 --> 00:23:22.446 A:middle
on the entire game
scene like we have here.

00:23:22.976 --> 00:23:27.846 A:middle
You can also cache the
output of that filter

00:23:28.166 --> 00:23:29.686 A:middle
if you're not going
to be animating it.

00:23:30.096 --> 00:23:32.696 A:middle
So if I want to apply a
really nice Gaussian blur

00:23:32.696 --> 00:23:36.486 A:middle
to my game world and then put a
Pause menu above that and I know

00:23:36.486 --> 00:23:39.126 A:middle
that my game is not going to
be animated during that time,

00:23:39.426 --> 00:23:41.966 A:middle
I can tell my EffectNode
that it should rasterize

00:23:42.366 --> 00:23:44.706 A:middle
and then we only
incurred the cost of doing

00:23:44.706 --> 00:23:48.366 A:middle
that full screen Gaussian blur
once and then it will be reused

00:23:48.446 --> 00:23:50.126 A:middle
from the cache every time
the frame is rendered

00:23:50.126 --> 00:23:53.506 A:middle
so you can still animate your
menus and your icons on top

00:23:53.506 --> 00:23:55.246 A:middle
of that and not have to worry

00:23:55.246 --> 00:23:57.266 A:middle
about having the filter
applied every frame.

00:23:57.716 --> 00:24:00.656 A:middle
We also support a form
of superfast masking

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:00.656 --> 00:24:03.076 A:middle
in Sprite Kit using
the CropNode.

00:24:03.446 --> 00:24:06.676 A:middle
So, what a CropNode will do
is it will mask out a portion

00:24:07.016 --> 00:24:08.156 A:middle
of its children's content.

00:24:08.746 --> 00:24:11.746 A:middle
And the way you supply that
mask is not via an image

00:24:12.046 --> 00:24:13.146 A:middle
but via a node.

00:24:13.216 --> 00:24:15.336 A:middle
So any node that's not
currently in your scene.

00:24:15.596 --> 00:24:18.406 A:middle
So that means I can use an
image by using a SpriteNode,

00:24:18.636 --> 00:24:20.576 A:middle
I can use a shape if
I use a ShapeNode.

00:24:20.856 --> 00:24:23.066 A:middle
I can even have children
in that node.

00:24:23.066 --> 00:24:24.836 A:middle
So, it doesn't have
to be just one node.

00:24:24.836 --> 00:24:27.466 A:middle
I can have an entire tree
that makes up this mask.

00:24:28.586 --> 00:24:30.526 A:middle
And since those masks are nodes,

00:24:30.986 --> 00:24:32.506 A:middle
of course we can
animate them as well.

00:24:32.816 --> 00:24:36.556 A:middle
So we can have dynamic
masking on the fly in our app

00:24:36.896 --> 00:24:39.716 A:middle
and we can animate both the
objects that are being masked--

00:24:39.946 --> 00:24:42.746 A:middle
masked as well as
the mask itself.

00:24:43.476 --> 00:24:45.806 A:middle
So we can have a
spaceship flying

00:24:45.806 --> 00:24:49.926 A:middle
around with a particle system
massive exhaust trail being used

00:24:49.926 --> 00:24:52.606 A:middle
in real time to mask, let's
say a video node in our scene.

00:24:52.606 --> 00:24:54.426 A:middle
Now, let's talk a
little bit more

00:24:54.426 --> 00:24:56.486 A:middle
about those actions
and animations.

00:24:57.216 --> 00:25:00.596 A:middle
So, when we went to design the
action system for Sprite Kit,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:00.986 --> 00:25:02.526 A:middle
we want it to be super simple,

00:25:02.586 --> 00:25:05.566 A:middle
we want it to be really
readable, we wanted it

00:25:05.566 --> 00:25:07.006 A:middle
to not be confusing at all.

00:25:07.376 --> 00:25:09.346 A:middle
So, we only have one
class where you need to go

00:25:09.346 --> 00:25:12.816 A:middle
to find these actions and
every action, that's SKAction,

00:25:13.276 --> 00:25:16.396 A:middle
and every action can be created
using a single line convenience

00:25:16.396 --> 00:25:18.486 A:middle
method just like all of the
other nodes that we offer.

00:25:18.996 --> 00:25:21.926 A:middle
We wanted them to be
extremely readable.

00:25:21.926 --> 00:25:24.456 A:middle
We wanted the actions to be
reusable so you didn't have

00:25:24.456 --> 00:25:26.046 A:middle
to build them again for
every Sprite you wanted

00:25:26.046 --> 00:25:26.646 A:middle
to run them on.

00:25:26.646 --> 00:25:28.596 A:middle
We want them to be chainable

00:25:28.596 --> 00:25:30.246 A:middle
so you can sequence
them really easily.

00:25:30.246 --> 00:25:33.356 A:middle
We wanted actions to
directly affect your nodes.

00:25:33.356 --> 00:25:37.386 A:middle
We wanted you to know that
if you inspect a value

00:25:37.726 --> 00:25:39.356 A:middle
on your node before
it gets rendered,

00:25:39.356 --> 00:25:41.376 A:middle
that's the exact value that's
going to be rendered at.

00:25:42.606 --> 00:25:44.386 A:middle
And we really wanted
to be almost

00:25:44.386 --> 00:25:46.726 A:middle
like a scripting
language for Sprite Kit.

00:25:48.856 --> 00:25:51.586 A:middle
So of course we've had-- we
have all the basic actions,

00:25:51.586 --> 00:25:55.236 A:middle
movements, scaling,
translate, fade-in, fade-out,

00:25:55.886 --> 00:26:00.726 A:middle
and how do I run
those on my nodes?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:00.896 --> 00:26:04.176 A:middle
I just tell my SpriteNode
or any node

00:26:04.176 --> 00:26:05.716 A:middle
in my scene to run that action.

00:26:06.176 --> 00:26:07.526 A:middle
I'll say runAction, pass it in.

00:26:08.006 --> 00:26:10.666 A:middle
Like I said, they're copied
on ads so you can go ahead

00:26:10.666 --> 00:26:13.446 A:middle
and reuse this action later
on or if you're not going

00:26:13.446 --> 00:26:15.716 A:middle
to reuse it, you can even
create the action inline

00:26:15.926 --> 00:26:18.356 A:middle
like the second sample
here without the need

00:26:18.356 --> 00:26:19.566 A:middle
for making that explicit object.

00:26:20.926 --> 00:26:23.286 A:middle
They're automatically removed
on completion so you don't have

00:26:23.286 --> 00:26:24.776 A:middle
to worry about managing
the actions

00:26:24.776 --> 00:26:26.646 A:middle
that are currently
playing on a node.

00:26:28.816 --> 00:26:30.796 A:middle
We also support repeating
an action.

00:26:30.796 --> 00:26:34.106 A:middle
So, if you've already built a
rotate action and you're going

00:26:34.106 --> 00:26:36.286 A:middle
to be applying it to different
nodes but maybe some are going

00:26:36.286 --> 00:26:39.586 A:middle
to rotate longer than others,
you can repeat an action

00:26:39.716 --> 00:26:42.886 A:middle
by using as input
to the repeat action

00:26:42.886 --> 00:26:45.746 A:middle
in already existing action and
this will work on any action.

00:26:46.286 --> 00:26:48.106 A:middle
And you can specify a
repeat count for that.

00:26:48.436 --> 00:26:49.866 A:middle
Or if you wanted
to keep animating

00:26:49.866 --> 00:26:51.756 A:middle
until that Sprite is
removed from the scene,

00:26:52.026 --> 00:26:53.956 A:middle
you can do that as well
using repeat forever.

00:26:56.996 --> 00:27:00.246 A:middle
So, I mentioned the actions,
they'll run immediately

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:00.246 --> 00:27:01.166 A:middle
when you put them on the node

00:27:01.166 --> 00:27:02.546 A:middle
and they directly
affect the node.

00:27:02.976 --> 00:27:05.396 A:middle
So the way that I would
sequence my actions is

00:27:05.766 --> 00:27:07.606 A:middle
of course by using a sequence.

00:27:08.006 --> 00:27:11.926 A:middle
We have a sequence
constructor that takes an array

00:27:11.926 --> 00:27:14.826 A:middle
of existing actions and we'll
play them back in order,

00:27:14.946 --> 00:27:18.106 A:middle
run the first one to completion,
then the second, then the third.

00:27:18.646 --> 00:27:21.796 A:middle
I don't know if all of you know
about the NSArray literal syntax

00:27:21.796 --> 00:27:24.846 A:middle
in Objective-C but it's awesome
and I highly recommend using it

00:27:24.846 --> 00:27:27.986 A:middle
in Sprite Kit, it's fantastic
for building up your sequences

00:27:28.876 --> 00:27:32.146 A:middle
with very little code.

00:27:32.356 --> 00:27:33.606 A:middle
We also have groups.

00:27:34.056 --> 00:27:37.436 A:middle
So, groups will allow you to
use the same basic paradigm

00:27:37.436 --> 00:27:39.546 A:middle
by passing in an array
of existing actions,

00:27:39.986 --> 00:27:41.736 A:middle
and this time we'll
run them in parallel.

00:27:42.136 --> 00:27:44.606 A:middle
So, on a group, the duration

00:27:44.606 --> 00:27:47.756 A:middle
of a group is the
longest of its components.

00:27:47.806 --> 00:27:51.736 A:middle
So, if the longest action in my
group is two, the group will run

00:27:51.786 --> 00:27:54.726 A:middle
until the duration of
its longest component,

00:27:55.056 --> 00:27:58.736 A:middle
whereas the sequence
duration is the sum

00:27:58.736 --> 00:28:01.186 A:middle
of all of its components.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:01.186 --> 00:28:04.176 A:middle
Now, groups and sequences
are themselves actions.

00:28:04.846 --> 00:28:07.696 A:middle
So this means that we can
use groups as sequences

00:28:08.366 --> 00:28:10.806 A:middle
as building blocks for
other groups and sequences.

00:28:11.936 --> 00:28:15.136 A:middle
So, we can have a group
that is part of a sequence.

00:28:15.556 --> 00:28:19.196 A:middle
If I wanted a spaceship to fly
in from the side of the scene

00:28:19.496 --> 00:28:22.016 A:middle
and then I wanted to rotate
and scale up at the same time,

00:28:22.016 --> 00:28:23.456 A:middle
and then I'm going
to fade it out,

00:28:23.796 --> 00:28:27.976 A:middle
I can do that by first creating
a group that performs the rotate

00:28:27.976 --> 00:28:31.366 A:middle
in scale together and then I'll
use that as a second element

00:28:31.366 --> 00:28:34.846 A:middle
in my sequence like here and we
can get the exact desired effect

00:28:35.116 --> 00:28:36.106 A:middle
by running that on my node.

00:28:36.596 --> 00:28:39.936 A:middle
So, if actions run immediately,
what do I do about timing?

00:28:40.156 --> 00:28:42.796 A:middle
We don't want you to have
to set up timers or worry

00:28:42.796 --> 00:28:46.756 A:middle
about counting ticks yourselves
so we've created another action

00:28:46.836 --> 00:28:48.076 A:middle
which pretty much does nothing.

00:28:48.396 --> 00:28:50.066 A:middle
It's a waitForDuration action.

00:28:50.386 --> 00:28:52.066 A:middle
I don't recommend just
running this on a node,

00:28:52.066 --> 00:28:53.386 A:middle
it's going to do
absolutely nothing

00:28:53.776 --> 00:28:57.266 A:middle
but where it's really useful
is using it as a component

00:28:57.626 --> 00:28:59.326 A:middle
of the sequences that
we just mentioned.

00:28:59.666 --> 00:29:02.286 A:middle
So if I want to kick off in
animation one second from now,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:02.666 --> 00:29:03.726 A:middle
I'll create a sequence,

00:29:03.776 --> 00:29:06.816 A:middle
do a wait for one second
first followed by the action

00:29:06.816 --> 00:29:10.126 A:middle
that I want to perform and
tell my Sprite to run that.

00:29:12.616 --> 00:29:16.976 A:middle
Those are you basic actions
in terms of translation

00:29:16.976 --> 00:29:21.116 A:middle
and transformation as well
as timing and grouping.

00:29:21.656 --> 00:29:23.686 A:middle
We also have a number
of specialty actions

00:29:23.726 --> 00:29:25.716 A:middle
that do specific tasks
within your game.

00:29:26.276 --> 00:29:28.526 A:middle
One that we definitely
need to have

00:29:28.526 --> 00:29:31.216 A:middle
of course is
animateWithTextures.

00:29:31.616 --> 00:29:35.246 A:middle
So this will allow you to
specify an array of textures

00:29:35.366 --> 00:29:38.416 A:middle
that you want to use on your
node and the timePerFrame

00:29:38.416 --> 00:29:40.336 A:middle
that you want those
textures to be displayed.

00:29:41.036 --> 00:29:43.356 A:middle
And this is how we've done
all the character animations

00:29:43.356 --> 00:29:44.386 A:middle
in the Adventure sample.

00:29:46.816 --> 00:29:51.056 A:middle
We also found that people like
to follow paths a lot in games.

00:29:51.056 --> 00:29:53.666 A:middle
So we built in a
followPath action as well.

00:29:54.146 --> 00:29:58.276 A:middle
And you can specify the path
using a CGPath and a duration

00:29:58.276 --> 00:30:00.286 A:middle
for the sprite to
follow that path.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.286 --> 00:30:02.126 A:middle
And by default we'll
do what most--

00:30:02.126 --> 00:30:05.326 A:middle
what we expect most people to
want to happen is for the Sprite

00:30:05.326 --> 00:30:07.026 A:middle
to automatically
orient to the past.

00:30:07.166 --> 00:30:09.086 A:middle
So you don't have to worry
about which way it's facing

00:30:09.086 --> 00:30:09.976 A:middle
at every point along the path.

00:30:10.046 --> 00:30:12.636 A:middle
It will also treat
that path as an offset

00:30:12.636 --> 00:30:14.796 A:middle
from its current position so
it doesn't immediately jump

00:30:14.796 --> 00:30:15.816 A:middle
when you start following
the path

00:30:16.626 --> 00:30:18.896 A:middle
and we have an expanded form
of that action if you want

00:30:18.896 --> 00:30:20.686 A:middle
to configure any of
those two options.

00:30:21.126 --> 00:30:24.046 A:middle
If I have a platform
that's moving around

00:30:24.046 --> 00:30:25.726 A:middle
and I always want it to
stay vertical you can do

00:30:25.726 --> 00:30:30.036 A:middle
that as well, just use
the extended forms.

00:30:30.696 --> 00:30:32.366 A:middle
Removing a sprite from parent.

00:30:32.876 --> 00:30:35.146 A:middle
So a lot of times in
my game, I go through,

00:30:35.146 --> 00:30:37.896 A:middle
I find all the bad guys that
were hit and then I want

00:30:37.896 --> 00:30:39.486 A:middle
to run some sort
of death animation

00:30:39.486 --> 00:30:40.746 A:middle
on them, fade them out.

00:30:41.146 --> 00:30:42.816 A:middle
But then I still have
this SpriteNode hanging

00:30:42.816 --> 00:30:45.366 A:middle
out in my game and a lot of
times we find people have

00:30:45.366 --> 00:30:48.456 A:middle
to build up these arrays of
Sprites that are to be removed

00:30:48.456 --> 00:30:50.086 A:middle
in the future and
then periodically go

00:30:50.086 --> 00:30:50.736 A:middle
and clean them out.

00:30:51.186 --> 00:30:52.106 A:middle
It sounds like a
pain in the butt.

00:30:52.696 --> 00:30:56.406 A:middle
So, what we did is we made
removeFromParent in action.

00:30:56.776 --> 00:30:59.036 A:middle
And you can use this as
part of your sequences.

00:30:59.316 --> 00:31:01.076 A:middle
So, if I already
built up a sequence

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:01.076 --> 00:31:05.136 A:middle
that has my fadeout animation
for any of these characters

00:31:05.136 --> 00:31:07.406 A:middle
and they need to be removed,
I can just insert or remove

00:31:07.406 --> 00:31:09.586 A:middle
from parent at the end of
the sequence, I never have

00:31:09.586 --> 00:31:10.416 A:middle
to worry about it again.

00:31:10.656 --> 00:31:12.696 A:middle
We also found that people want
to play sound in their game.

00:31:12.696 --> 00:31:14.886 A:middle
They wanted to really easy
to play sound in their game

00:31:15.336 --> 00:31:17.436 A:middle
and for short sound
effects I want

00:31:17.436 --> 00:31:18.846 A:middle
to time those with my actions.

00:31:19.106 --> 00:31:20.926 A:middle
If I have a [inaudible]
that's casting a spell

00:31:20.926 --> 00:31:22.676 A:middle
and I have an action
for that and I want

00:31:22.676 --> 00:31:25.236 A:middle
to fire a sound effect
directly timed with that action,

00:31:25.536 --> 00:31:27.926 A:middle
we don't want you setting up a
timer and hope that it lines up.

00:31:28.576 --> 00:31:30.206 A:middle
We've actually built
in a way for you

00:31:30.206 --> 00:31:32.316 A:middle
to play short sound
effects right

00:31:32.316 --> 00:31:36.536 A:middle
in an SKAction using the same
one line convenience method

00:31:36.536 --> 00:31:39.526 A:middle
that we do for everything else
directly from a sound file

00:31:39.526 --> 00:31:41.496 A:middle
in your bundle right
into your game.

00:31:42.566 --> 00:31:47.986 A:middle
And so, this allows you a really
simple use of sounds of course

00:31:47.986 --> 00:31:50.736 A:middle
if you want to do longer
playback or you want

00:31:50.736 --> 00:31:55.226 A:middle
to have complex control over the
volume or asynchronous loading

00:31:55.226 --> 00:31:57.836 A:middle
of these assets then
we recommend checking

00:31:57.836 --> 00:31:59.536 A:middle
out our AVFoundation framework

00:31:59.566 --> 00:32:01.896 A:middle
for more fine grain
control of the sounds.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:01.936 --> 00:32:03.786 A:middle
But this is a fantastic
way if you just want

00:32:03.786 --> 00:32:06.316 A:middle
to kick off a sound effect
every time you play an action

00:32:06.316 --> 00:32:06.776 A:middle
in your game.

00:32:07.286 --> 00:32:08.336 A:middle
We also have runBlock.

00:32:08.386 --> 00:32:09.896 A:middle
People want callbacks
in their games.

00:32:09.896 --> 00:32:13.096 A:middle
Sometimes you have logic in
your game that isn't really tied

00:32:13.096 --> 00:32:14.696 A:middle
to an action on one
of your sprites.

00:32:15.016 --> 00:32:15.766 A:middle
Well, now it can be.

00:32:16.086 --> 00:32:19.856 A:middle
So, now you can insert
a runBlock into any

00:32:19.856 --> 00:32:22.346 A:middle
of your sequences that
you use in your game

00:32:22.636 --> 00:32:25.216 A:middle
and will automatically execute
that exactly at the point

00:32:25.216 --> 00:32:26.316 A:middle
in the sequence when
it gets there.

00:32:26.316 --> 00:32:29.636 A:middle
In which we really tried
to provide a vast variety

00:32:29.636 --> 00:32:32.706 A:middle
of different actions that you
can use but we're not going

00:32:32.706 --> 00:32:33.926 A:middle
to think of absolutely
everything

00:32:33.926 --> 00:32:34.866 A:middle
that people want to do.

00:32:34.866 --> 00:32:38.136 A:middle
So we've created a way for you
to make your own custom actions.

00:32:38.586 --> 00:32:41.416 A:middle
You can do a custom action,
specify a duration for that

00:32:41.906 --> 00:32:44.946 A:middle
as well as a block that
will be executed every frame

00:32:44.946 --> 00:32:46.506 A:middle
when this animation
is evaluated.

00:32:46.506 --> 00:32:48.476 A:middle
And we're going to give
you a reference to the node

00:32:48.476 --> 00:32:51.716 A:middle
that it's currently being
evaluated on as well

00:32:51.716 --> 00:32:54.736 A:middle
as the elapse time that
the action has already run.

00:32:54.736 --> 00:32:56.766 A:middle
So you can use this
to do any sort

00:32:56.836 --> 00:32:58.486 A:middle
of things you want
to the Sprite.

00:32:58.546 --> 00:33:01.276 A:middle
You can even animate things
that aren't even in your game.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:01.276 --> 00:33:05.286 A:middle
If I wanted to automatically
swirl around the emission point

00:33:05.286 --> 00:33:07.596 A:middle
for one of my particle systems
I could do it like this.

00:33:07.596 --> 00:33:09.406 A:middle
I can get some really
cool effects.

00:33:10.326 --> 00:33:11.886 A:middle
And those are just a
few of the actions.

00:33:11.886 --> 00:33:13.356 A:middle
We've got a ton more
for you to look at.

00:33:13.356 --> 00:33:14.586 A:middle
We don't have to time
to go through them all

00:33:14.986 --> 00:33:16.846 A:middle
but I'm sure we'll have a lot
of fun playing with these.

00:33:17.206 --> 00:33:19.626 A:middle
As you mentioned before,
actions are only half the story.

00:33:20.096 --> 00:33:22.806 A:middle
We also have a built-in
physics engine right inside the

00:33:22.806 --> 00:33:25.246 A:middle
framework that you can
use as an alternative

00:33:25.246 --> 00:33:27.836 A:middle
or complementary means
to animate your nodes.

00:33:30.856 --> 00:33:35.376 A:middle
So, usually when you do physics
in the game, you have all

00:33:35.376 --> 00:33:38.656 A:middle
of your game and display
objects in your game engine

00:33:39.016 --> 00:33:40.866 A:middle
and you manipulate
and animate those

00:33:40.976 --> 00:33:43.726 A:middle
and then you have your
physics engine over here

00:33:43.906 --> 00:33:46.536 A:middle
and I'm simulating those
bodies and then I'll have

00:33:46.536 --> 00:33:48.976 A:middle
to do some sort of
synchronization between the two

00:33:48.976 --> 00:33:50.826 A:middle
to get the effects of
the physics in your game.

00:33:50.826 --> 00:33:53.776 A:middle
We didn't want you to have
to do that in Sprite Kit

00:33:54.256 --> 00:33:55.116 A:middle
so we built it right in.

00:33:55.666 --> 00:33:59.266 A:middle
So, all you have to do is create
a physicsBody that represents

00:33:59.376 --> 00:34:01.456 A:middle
that node and simply
set it on the node.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:02.186 --> 00:34:03.086 A:middle
It's one property you set

00:34:03.086 --> 00:34:05.846 A:middle
on the node immediately physics
starts acting on that node.

00:34:06.066 --> 00:34:07.746 A:middle
So, it's built right
into the framework.

00:34:08.045 --> 00:34:09.886 A:middle
It's not all on or all off.

00:34:09.886 --> 00:34:11.656 A:middle
You can set it on only
one node in your game,

00:34:11.656 --> 00:34:13.096 A:middle
you don't have to
be a physics game.

00:34:13.545 --> 00:34:17.446 A:middle
It's-- If you really want to
use your own physics framework,

00:34:17.446 --> 00:34:20.186 A:middle
you can do that too, tie it into
Sprite Kit however you want.

00:34:20.505 --> 00:34:23.016 A:middle
If you're not using our physics
engine you pay absolutely no

00:34:23.016 --> 00:34:24.666 A:middle
cost for it.

00:34:26.065 --> 00:34:28.106 A:middle
We have a variety of
shapes that you can use

00:34:28.106 --> 00:34:30.136 A:middle
to represent physics
objects in your game.

00:34:30.466 --> 00:34:32.226 A:middle
Of course we have
circles, rectangles,

00:34:32.226 --> 00:34:36.976 A:middle
we also have hallow rectangles,
even custom polygons or paths

00:34:37.306 --> 00:34:38.466 A:middle
that you can use in your game

00:34:38.795 --> 00:34:41.735 A:middle
and all using our signature
one line convenience method

00:34:41.735 --> 00:34:43.806 A:middle
to create those objects.

00:34:45.536 --> 00:34:49.426 A:middle
So once you've created a physics
object, like I said before,

00:34:49.426 --> 00:34:51.806 A:middle
you just set the physicsBody
properly on your sprite.

00:34:52.275 --> 00:34:55.216 A:middle
So if I wanted to create
a circle with a radius 50,

00:34:55.646 --> 00:34:57.976 A:middle
I'll do that in one line
and I'll set that property

00:34:58.386 --> 00:35:01.806 A:middle
on my SpriteNode and then
physics will immediately start

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:02.316 --> 00:35:02.916 A:middle
running on there.

00:35:03.266 --> 00:35:04.716 A:middle
So, in the second sample

00:35:04.716 --> 00:35:08.966 A:middle
down here I'm creating these
golf ball nodes that I'm going

00:35:08.966 --> 00:35:11.776 A:middle
to add into my scene and
then I'm making a physicsBody

00:35:11.776 --> 00:35:13.766 A:middle
that matches the
size of that texture.

00:35:13.906 --> 00:35:20.386 A:middle
It's a circle and then I add it
to the scene and we get this.

00:35:20.586 --> 00:35:22.686 A:middle
So, they're currently falling
off the bottom of the scene,

00:35:22.686 --> 00:35:24.426 A:middle
maybe that's not what
we expected to happen

00:35:24.796 --> 00:35:26.776 A:middle
but some games might want that
behavior, so we didn't want

00:35:26.776 --> 00:35:28.286 A:middle
to restrict you to
just the scene.

00:35:28.916 --> 00:35:31.556 A:middle
It's really, really simple to
set it up a bounding volume

00:35:31.556 --> 00:35:34.766 A:middle
if you do want to have that
attached to your scene.

00:35:34.766 --> 00:35:38.296 A:middle
We can use that hallow
rectangle using the edge loop

00:35:38.296 --> 00:35:43.016 A:middle
with rect constructor and I can
just ask my scene for its size,

00:35:43.406 --> 00:35:45.846 A:middle
for its frame and
use that as the input

00:35:45.846 --> 00:35:48.576 A:middle
to create a physicsBody
representing the boundaries

00:35:48.576 --> 00:35:49.196 A:middle
of my scene.

00:35:49.746 --> 00:35:51.596 A:middle
And since the scene
itself is a node,

00:35:51.596 --> 00:35:54.686 A:middle
I can just set the physicsBody
on the scene because that seems

00:35:54.686 --> 00:35:57.006 A:middle
that like an appropriate area
to represent the boundary

00:35:57.526 --> 00:36:00.326 A:middle
and now this time when I
add the nodes to my scene,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:00.326 --> 00:36:01.466 A:middle
you'll see they're
being constrained

00:36:01.466 --> 00:36:02.316 A:middle
by the bounding volume.

00:36:03.516 --> 00:36:08.186 A:middle
[ Applause ]

00:36:08.686 --> 00:36:11.886 A:middle
And so, we also allow
more fine-tuned control

00:36:11.886 --> 00:36:15.456 A:middle
of how these bodies interact
on every scene in Sprite Kit.

00:36:15.456 --> 00:36:17.556 A:middle
You'll find a physicsWorld
property

00:36:18.016 --> 00:36:20.276 A:middle
and here you'll have
access to a number

00:36:20.276 --> 00:36:25.506 A:middle
of functionalities including
doing hit test within rectangles

00:36:25.506 --> 00:36:26.656 A:middle
to see what bodies are in there.

00:36:26.656 --> 00:36:29.186 A:middle
You can do ray casts from
any points if you want to use

00:36:29.186 --> 00:36:31.706 A:middle
that to drive your AI
or pathfinding system.

00:36:31.706 --> 00:36:34.496 A:middle
You can also add
joints between nodes.

00:36:34.496 --> 00:36:36.396 A:middle
You can set up springs
or sliding

00:36:36.396 --> 00:36:38.216 A:middle
or glue different
bodies together.

00:36:38.216 --> 00:36:39.526 A:middle
You can do all of that as well.

00:36:39.946 --> 00:36:41.756 A:middle
You can also change gravity.

00:36:41.956 --> 00:36:44.426 A:middle
Things always don't--
always have to fall down,

00:36:44.426 --> 00:36:46.486 A:middle
that's how it is by
default but I can just

00:36:46.486 --> 00:36:49.066 A:middle
as easily flip the
gravity and make all

00:36:49.066 --> 00:36:50.466 A:middle
of my sprites fallout as well.

00:36:51.056 --> 00:36:54.646 A:middle
And that's physicsWorld.

00:36:55.166 --> 00:36:59.636 A:middle
And you can also sign up
to receive notifications

00:36:59.636 --> 00:37:02.196 A:middle
when any two bodies are
colliding 'cause we've already

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:02.196 --> 00:37:04.936 A:middle
had to figure this out to
calculate the collisions.

00:37:05.276 --> 00:37:08.366 A:middle
We're offering this as a way
for you to be easily notified

00:37:08.366 --> 00:37:10.946 A:middle
and perform collision
test within your games

00:37:10.946 --> 00:37:12.226 A:middle
if you set up physics bodies.

00:37:13.006 --> 00:37:17.496 A:middle
So, I can implement the
contactDelegate protocol and set

00:37:17.496 --> 00:37:21.206 A:middle
that property on my physicsWorld
and I'll be called back

00:37:21.206 --> 00:37:24.976 A:middle
on these two methods anytime
two bodies begin contacting

00:37:24.976 --> 00:37:26.276 A:middle
or cease to be in contact.

00:37:26.276 --> 00:37:28.176 A:middle
And what do I get back there?

00:37:28.876 --> 00:37:33.636 A:middle
So, I get back each body that
participate in that contact

00:37:33.636 --> 00:37:36.436 A:middle
as well as the point of first
contact where they connected

00:37:36.846 --> 00:37:39.786 A:middle
and the magnitude of
the collision impulse

00:37:39.786 --> 00:37:40.976 A:middle
that was applied at that point,

00:37:40.976 --> 00:37:42.766 A:middle
so I can know how
hard they were hit.

00:37:44.296 --> 00:37:47.726 A:middle
So if I wanted to know anytime
that my hero character collided

00:37:47.726 --> 00:37:50.346 A:middle
with another physicsBody
in my scene,

00:37:50.696 --> 00:37:52.926 A:middle
I could implement
the delegate protocol

00:37:53.346 --> 00:37:56.276 A:middle
and I'd simply check
whether the bodies

00:37:56.546 --> 00:37:59.336 A:middle
in this contact was
associated with my heroSprite

00:37:59.336 --> 00:38:04.186 A:middle
and then I can go up and do
something cool with that.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:04.406 --> 00:38:06.636 A:middle
By default, you'll be
notified of every collision

00:38:06.636 --> 00:38:08.996 A:middle
between any two bodies
in your game and a lot

00:38:08.996 --> 00:38:10.766 A:middle
of times this is way
too much information

00:38:10.766 --> 00:38:12.326 A:middle
and we don't really
need to use all of that.

00:38:12.716 --> 00:38:16.566 A:middle
So we allow our advance users to
filter out different collisions

00:38:16.566 --> 00:38:19.576 A:middle
within your game and only get
back exactly the information

00:38:19.576 --> 00:38:20.306 A:middle
you're interested in.

00:38:21.176 --> 00:38:24.576 A:middle
So, in this game here, I've got
a couple of cooperative players

00:38:24.876 --> 00:38:27.486 A:middle
and I've got some bad guys
and some cooled power ups

00:38:27.486 --> 00:38:28.566 A:middle
that they can collect
in the game.

00:38:28.566 --> 00:38:31.486 A:middle
And I'm going to divide this
up into some logical groups.

00:38:32.526 --> 00:38:36.506 A:middle
So this logical group will help
us set up the three BitMask

00:38:36.506 --> 00:38:38.366 A:middle
that we have available
on every physicsBody.

00:38:38.806 --> 00:38:41.766 A:middle
The first one, is
the categoryBitMask

00:38:42.086 --> 00:38:44.446 A:middle
and this will allow you
to specify which groups,

00:38:44.446 --> 00:38:47.066 A:middle
which logical groups
this body belongs

00:38:47.066 --> 00:38:48.766 A:middle
to using a bit for each group.

00:38:48.906 --> 00:38:51.026 A:middle
So, I can belong to more
than one groups, no groups,

00:38:51.026 --> 00:38:51.946 A:middle
no groups, all groups.

00:38:52.646 --> 00:38:55.676 A:middle
The second BitMask will
allow me to determine

00:38:55.676 --> 00:38:58.686 A:middle
which other groups I'm going
to actually collide with.

00:38:59.146 --> 00:39:00.336 A:middle
So, if I don't collide
with anyone,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:00.336 --> 00:39:02.306 A:middle
the physics bodies will
simply past through each other

00:39:02.636 --> 00:39:05.056 A:middle
or I can only have
my nodes collide

00:39:05.056 --> 00:39:06.166 A:middle
with certain other nodes.

00:39:06.706 --> 00:39:08.636 A:middle
And independently from
that, importantly,

00:39:08.986 --> 00:39:11.406 A:middle
the third one allows
you to specify

00:39:11.756 --> 00:39:13.776 A:middle
which contacts I will
be notified about.

00:39:14.126 --> 00:39:16.406 A:middle
So, I don't have to always
be notified if I want them

00:39:16.406 --> 00:39:18.886 A:middle
to collide and I could
have nodes completely pass

00:39:18.926 --> 00:39:20.696 A:middle
through each other and
still get the notification

00:39:20.696 --> 00:39:21.346 A:middle
when they intersect.

00:39:21.906 --> 00:39:24.776 A:middle
So how are we going
to set this up?

00:39:24.946 --> 00:39:28.636 A:middle
First I'm going to define my
three logical groups, GOOD GUYS,

00:39:28.776 --> 00:39:30.406 A:middle
BAD GUYS and POWER UPS.

00:39:31.476 --> 00:39:32.236 A:middle
And what I'm interested

00:39:32.236 --> 00:39:35.416 A:middle
in having happened is I
want the players to collide

00:39:35.416 --> 00:39:37.696 A:middle
with the enemies and I want them
to be able to walk through them

00:39:37.696 --> 00:39:38.626 A:middle
if they're blocking the way.

00:39:39.116 --> 00:39:41.156 A:middle
And I also want the enemies
to collide with each other

00:39:41.156 --> 00:39:44.376 A:middle
so they don't clump up and we
don't get killed in immediately

00:39:44.376 --> 00:39:45.826 A:middle
when we walk into the
big group of them.

00:39:46.426 --> 00:39:47.836 A:middle
I don't want the
players to collide

00:39:47.836 --> 00:39:49.916 A:middle
with each other 'cause it's
sort of a cooperative game,

00:39:49.916 --> 00:39:51.256 A:middle
I should let them pass
through each other.

00:39:51.606 --> 00:39:53.046 A:middle
So, I don't want that to happen.

00:39:53.096 --> 00:39:55.976 A:middle
But what I also interested
in is I want

00:39:55.976 --> 00:39:59.106 A:middle
to be notified anytime one
of the enemies touches one

00:39:59.106 --> 00:40:01.896 A:middle
of the heroes so that
I can apply damage,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:01.936 --> 00:40:03.626 A:middle
change the life counters,
stuff like that.

00:40:04.146 --> 00:40:07.226 A:middle
I also want to be notified when
one of my heroes collects one

00:40:07.226 --> 00:40:09.536 A:middle
of the POWER UPS so that I
can go and remove that POWER

00:40:09.536 --> 00:40:12.066 A:middle
UP from the game and apply
some really cool effects

00:40:12.146 --> 00:40:13.886 A:middle
and abilities to my heroes.

00:40:15.516 --> 00:40:16.996 A:middle
So, here's how we set that up.

00:40:17.156 --> 00:40:19.626 A:middle
We have our three
categories and we're going

00:40:19.626 --> 00:40:24.296 A:middle
to set the categoryBit on our
player to be the GOOD GUYS

00:40:24.946 --> 00:40:27.726 A:middle
and I'm going to set
his collisionBitMask

00:40:28.466 --> 00:40:29.946 A:middle
to be just BAD GUYS.

00:40:29.946 --> 00:40:31.446 A:middle
I only want him to
collide with the baddies.

00:40:32.076 --> 00:40:36.176 A:middle
And then the contactBitMask of
course will be both BAD GUYS

00:40:36.596 --> 00:40:38.266 A:middle
and POWER UPS 'cause I
need to know when any

00:40:38.266 --> 00:40:39.616 A:middle
of those two contacts occurs.

00:40:40.376 --> 00:40:43.996 A:middle
The same holds true for Player
2 and then for all of the--

00:40:44.236 --> 00:40:48.426 A:middle
all of the goblins in my scene
I want to set their category

00:40:48.686 --> 00:40:52.286 A:middle
to BAD GUYS and they're going to
collide with both of each other

00:40:52.516 --> 00:40:55.126 A:middle
as well as our hero characters.

00:40:55.126 --> 00:40:57.896 A:middle
Let's also do that for the
collision mask and I'll--

00:40:57.896 --> 00:41:03.806 A:middle
I'm also interested in being
notified whenever they intersect

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:04.076 --> 00:41:05.056 A:middle
with the hero characters.

00:41:05.056 --> 00:41:07.596 A:middle
So that's some advanced
functionality that we offer

00:41:07.596 --> 00:41:08.276 A:middle
in the physics engine.

00:41:08.276 --> 00:41:10.946 A:middle
They're really customized
exactly what interactions you

00:41:10.946 --> 00:41:11.526 A:middle
want to occur.

00:41:12.106 --> 00:41:17.286 A:middle
So, there's a number
of other features

00:41:17.286 --> 00:41:18.816 A:middle
that we have available
in the Sprite Kit.

00:41:19.156 --> 00:41:21.006 A:middle
I'm not going to go
in depth with them

00:41:21.006 --> 00:41:24.856 A:middle
but I want a list a couple
of them and call them out.

00:41:25.006 --> 00:41:27.696 A:middle
We have transitions between
multiple scenes in your game.

00:41:27.956 --> 00:41:32.946 A:middle
We support rotations and
doorway openings and fade

00:41:32.946 --> 00:41:34.816 A:middle
through a color as
well as cross fade.

00:41:34.816 --> 00:41:36.436 A:middle
We've got a lot of
really cool stuff there.

00:41:37.496 --> 00:41:38.736 A:middle
You can reverse any action

00:41:38.736 --> 00:41:40.436 A:middle
that you've constructed
including a sequence

00:41:40.436 --> 00:41:41.576 A:middle
of multiple actions.

00:41:41.926 --> 00:41:44.426 A:middle
We also have some really
nice debugging stats

00:41:44.426 --> 00:41:46.206 A:middle
that you can overlay
on you SpriteKitView

00:41:46.206 --> 00:41:48.106 A:middle
that will let you know how
many dropped calls are being

00:41:48.106 --> 00:41:51.306 A:middle
executed, how many nodes
are currently in your scene.

00:41:51.836 --> 00:41:57.046 A:middle
We also support, instead of
applying filters at runtime,

00:41:57.046 --> 00:41:59.676 A:middle
when we render their frame,
you can also apply a CIFilter

00:41:59.676 --> 00:42:03.436 A:middle
to any texture in your game
by taking an existing texture

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:03.436 --> 00:42:06.236 A:middle
and running it through a
filter to create a new one.

00:42:07.006 --> 00:42:09.296 A:middle
We have automatic
texture atlas generation

00:42:09.646 --> 00:42:12.586 A:middle
and we have some
really great new pieces

00:42:12.586 --> 00:42:14.546 A:middle
of developer documentation
available to you.

00:42:14.956 --> 00:42:18.146 A:middle
We have a complete sample of
Adventure available for you

00:42:18.396 --> 00:42:20.736 A:middle
and a complete Code Explained
guide that really walks

00:42:20.736 --> 00:42:22.686 A:middle
through the development
process for that game

00:42:23.096 --> 00:42:25.846 A:middle
and shows you how the game
is constructed and organized.

00:42:26.266 --> 00:42:29.016 A:middle
We also have a fantastic
programming guide.

00:42:29.016 --> 00:42:31.116 A:middle
You should be able to read
this and get up and running

00:42:31.116 --> 00:42:33.786 A:middle
within a day making
some really great games.

00:42:34.126 --> 00:42:36.526 A:middle
Any additional questions,
please contact Allan Schaffer.

00:42:37.666 --> 00:42:40.356 A:middle
We had a controller session
yesterday, if you missed

00:42:40.386 --> 00:42:42.876 A:middle
that that's a really great
new feature that you can add

00:42:42.876 --> 00:42:44.306 A:middle
to you Sprite Kit games as well.

00:42:44.486 --> 00:42:45.566 A:middle
Check out the video for that.

00:42:46.156 --> 00:42:48.686 A:middle
We have an additional Sprite
Kit session right after lunch,

00:42:48.686 --> 00:42:51.576 A:middle
so come back and join
us again for that one.

00:42:51.576 --> 00:42:53.396 A:middle
We're going to be talking a
little bit more about Adventure

00:42:53.396 --> 00:42:55.026 A:middle
and some of the Xcode
tools that we have.

00:42:55.726 --> 00:42:55.976 A:middle
Thank you.

00:42:56.016 --> 00:42:58.016 A:middle
[ Applause ]

00:42:58.016 --> 00:43:05.616 A:middle
[ Silence ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

