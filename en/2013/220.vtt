WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:09.766 --> 00:00:10.986 A:middle
&gt;&gt; Good afternoon.

00:00:11.356 --> 00:00:12.946 A:middle
This is Session 220.

00:00:13.446 --> 00:00:16.175 A:middle
Advanced Text Layouts and
Effects with Text Kit.

00:00:16.516 --> 00:00:20.086 A:middle
I'm Aki Inoue, a senior
text architect at Apple.

00:00:21.246 --> 00:00:26.426 A:middle
Yesterday, Ian, Johannes and
Jordan introduced Text Kit,

00:00:26.716 --> 00:00:28.746 A:middle
a new technology in iOS 7.

00:00:30.066 --> 00:00:33.316 A:middle
Today in this session,
we're going to discover

00:00:33.316 --> 00:00:37.916 A:middle
that you have broader and
finer controls over your text

00:00:38.546 --> 00:00:39.736 A:middle
through this technology.

00:00:40.336 --> 00:00:42.256 A:middle
Let's get started.

00:00:42.256 --> 00:00:44.316 A:middle
These are the items
we're covering today.

00:00:44.316 --> 00:00:47.836 A:middle
We're going to start
with text effects.

00:00:47.866 --> 00:00:50.856 A:middle
As you've seen earlier
in this conference,

00:00:51.466 --> 00:00:55.676 A:middle
iOS 7 supports gorgeous
letterpress text effects.

00:00:56.056 --> 00:00:56.946 A:middle
You're going to learn how

00:00:56.946 --> 00:00:59.186 A:middle
to integrate this effect
in the application.

00:00:59.956 --> 00:01:04.286 A:middle
Next, we're going to cover the
three main Text Kit objects,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:04.635 --> 00:01:10.106 A:middle
NSLayoutManager, NSTextContainer
and NSTextStorage, the power,

00:01:10.106 --> 00:01:12.916 A:middle
the typographic enhancements
in iOS 7.

00:01:13.266 --> 00:01:17.426 A:middle
There are many advanced
text layout features

00:01:18.246 --> 00:01:23.656 A:middle
such as multiple page
documents that are integral

00:01:23.656 --> 00:01:25.746 A:middle
to the Text Kit architecture.

00:01:26.156 --> 00:01:30.126 A:middle
Then we're going to dive
deeper into NSLayoutManager.

00:01:30.546 --> 00:01:32.066 A:middle
You're going to learn
what you can do

00:01:32.066 --> 00:01:35.116 A:middle
with some rich text layout
information available

00:01:35.116 --> 00:01:36.146 A:middle
to your applications.

00:01:36.796 --> 00:01:39.446 A:middle
And finally, I'm
going to cover a some

00:01:39.446 --> 00:01:42.726 A:middle
of the customization point
provided for your applications.

00:01:43.046 --> 00:01:45.266 A:middle
Of course, order of the material

00:01:46.216 --> 00:01:51.106 A:middle
in this session brand
new to iOS 7.

00:01:51.146 --> 00:01:55.746 A:middle
Now, I would like to bring
my colleague, Peter Hajas,

00:01:55.746 --> 00:02:02.896 A:middle
who's going to tell you how
to spice up your application,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:03.226 --> 00:02:04.856 A:middle
what is the cool text effects.

00:02:05.246 --> 00:02:05.746 A:middle
Peter.

00:02:06.236 --> 00:02:07.056 A:middle
&gt;&gt; Good afternoon.

00:02:07.246 --> 00:02:08.545 A:middle
My name is Peter Hajas.

00:02:08.856 --> 00:02:10.076 A:middle
I'm a UIKit engineer.

00:02:10.496 --> 00:02:13.766 A:middle
And today, I'd like to talk
to you about text effects.

00:02:14.006 --> 00:02:18.356 A:middle
Text effects are a beautiful
new graphical effect we've added

00:02:18.676 --> 00:02:21.326 A:middle
for your text in
your application.

00:02:21.846 --> 00:02:26.206 A:middle
And in iOS 7, we're
introducing a beautiful,

00:02:26.446 --> 00:02:29.506 A:middle
gorgeous letterpress effect.

00:02:30.896 --> 00:02:34.256 A:middle
In case you're not familiar,
letterpress is a form

00:02:34.496 --> 00:02:37.326 A:middle
of relief printing
by which texts

00:02:37.326 --> 00:02:40.016 A:middle
and images are pressed
into the page.

00:02:40.096 --> 00:02:41.236 A:middle
It's absolutely stunning.

00:02:42.456 --> 00:02:44.826 A:middle
Now prior to iOS
7, if you wanted

00:02:44.826 --> 00:02:46.616 A:middle
to create this effect
programmatically,

00:02:47.226 --> 00:02:49.196 A:middle
it was extraordinarily
difficult for you

00:02:49.196 --> 00:02:54.136 A:middle
to duplicate the shadows, the
embossing, this beautiful,

00:02:54.316 --> 00:02:55.876 A:middle
beautiful effect for your text.

00:02:56.846 --> 00:03:00.496 A:middle
But now, in iOS 7, we're
exposing this to you

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.496 --> 00:03:03.146 A:middle
through one attributed
string key

00:03:03.376 --> 00:03:05.376 A:middle
and a new attributed
string value.

00:03:06.626 --> 00:03:10.086 A:middle
That key is
NSTextEffectAttributeName.

00:03:11.186 --> 00:03:15.226 A:middle
And that value is
NSTextEffectLetterpressStyle.

00:03:16.426 --> 00:03:19.006 A:middle
Now, if you've used
attributed strings before,

00:03:19.006 --> 00:03:21.156 A:middle
and I hope you have, this works

00:03:21.156 --> 00:03:24.076 A:middle
with all the standard NS
attributed string keys

00:03:24.076 --> 00:03:24.956 A:middle
that you're familiar with,

00:03:25.226 --> 00:03:26.966 A:middle
like
ForegroundColorAttributeName

00:03:27.196 --> 00:03:29.626 A:middle
and others.

00:03:29.836 --> 00:03:32.586 A:middle
Letterpress is a
complex graphical effect

00:03:33.216 --> 00:03:34.726 A:middle
and you should use
it tastefully.

00:03:35.506 --> 00:03:38.666 A:middle
If you look at our system
applications, like reminders

00:03:38.666 --> 00:03:42.916 A:middle
and notes, you'll notice that
we use it in those applications

00:03:42.916 --> 00:03:45.216 A:middle
for the title of
a reminder's list

00:03:46.026 --> 00:03:47.706 A:middle
or the title of a
notes document.

00:03:49.956 --> 00:03:53.006 A:middle
Now, I'd like to give
you a quick overview

00:03:53.616 --> 00:03:55.786 A:middle
of the main Text Kit classes.

00:03:56.626 --> 00:03:58.846 A:middle
This is a review of what
you saw at the Intro

00:03:58.846 --> 00:04:00.546 A:middle
to Text Kit session yesterday.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:02.376 --> 00:04:05.676 A:middle
In Text Kit, there are
three classes that we use

00:04:06.176 --> 00:04:09.106 A:middle
to represent the text in
your application and turn it

00:04:09.106 --> 00:04:11.616 A:middle
into glyphs which users
will see on screen.

00:04:12.776 --> 00:04:16.176 A:middle
Text Storage which
provides the backing store

00:04:16.346 --> 00:04:18.296 A:middle
for the text in your
application.

00:04:19.926 --> 00:04:22.566 A:middle
Layout Manager which
is in charge of how

00:04:22.566 --> 00:04:26.736 A:middle
that text gets turned into
glyphs and has override points

00:04:26.736 --> 00:04:28.326 A:middle
for you to customize it.

00:04:28.876 --> 00:04:32.986 A:middle
And Text Container, which
describes the geometry

00:04:32.986 --> 00:04:34.236 A:middle
about which we flow lines

00:04:34.476 --> 00:04:39.016 A:middle
and line fragments
in your text view.

00:04:39.226 --> 00:04:40.676 A:middle
Let's start with Text Storage.

00:04:41.656 --> 00:04:45.616 A:middle
NSTextStorage is a mutable
attributed string subclass.

00:04:45.766 --> 00:04:48.246 A:middle
So it supports all the
standard attributed string,

00:04:48.696 --> 00:04:50.316 A:middle
keys and values that
you're customary

00:04:50.316 --> 00:04:51.676 A:middle
with including letterpress.

00:04:52.716 --> 00:04:56.446 A:middle
NSTextStorage is versatile
enough for a short document,

00:04:56.556 --> 00:05:00.936 A:middle
like a brief note or message,
and a document as long as War

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:00.936 --> 00:05:04.396 A:middle
and Peace, so it should be
totally perfect for your needs.

00:05:05.436 --> 00:05:09.286 A:middle
If, however, you find the
need to subclass Text Storage,

00:05:09.956 --> 00:05:12.816 A:middle
you'll need to override all
the primitive attributed string

00:05:13.546 --> 00:05:15.716 A:middle
and mutable attributed
string API.

00:05:17.596 --> 00:05:20.736 A:middle
Next, NSLayoutManager.

00:05:21.246 --> 00:05:25.646 A:middle
If NSTextStorage is the thing
that controls the backing store

00:05:25.646 --> 00:05:28.246 A:middle
for your text and all
your Unicode characters

00:05:28.246 --> 00:05:30.166 A:middle
and attributes and
things like that,

00:05:30.956 --> 00:05:35.706 A:middle
Layout Manager is the object
that translates that text

00:05:36.096 --> 00:05:37.526 A:middle
into glyphs on screen.

00:05:38.776 --> 00:05:41.526 A:middle
Now if you'd like to
override that layout process,

00:05:41.826 --> 00:05:43.396 A:middle
you can do so through delegation

00:05:43.526 --> 00:05:45.816 A:middle
and this is how you can
accomplish advanced layout

00:05:45.886 --> 00:05:50.136 A:middle
techniques such as, for
example, folding lines

00:05:50.226 --> 00:05:51.896 A:middle
or other advanced
text rendering.

00:05:52.376 --> 00:05:56.126 A:middle
And finally, NSTextContainer.

00:05:57.486 --> 00:06:01.436 A:middle
Text Container represents
one area on the display

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:01.696 --> 00:06:03.166 A:middle
in which you'd like
to draw a text.

00:06:03.726 --> 00:06:06.266 A:middle
It's not the object that
does the actual drawing,

00:06:06.356 --> 00:06:07.616 A:middle
that's up to your text view.

00:06:08.366 --> 00:06:11.116 A:middle
Instead Text Container
describes the geometry

00:06:11.116 --> 00:06:12.106 A:middle
about which we draw.

00:06:13.246 --> 00:06:15.686 A:middle
If you were in the
introduction session yesterday,

00:06:16.246 --> 00:06:19.206 A:middle
you saw just how easy our
declarative exclusion path

00:06:19.206 --> 00:06:21.926 A:middle
support is, and this is
built on Text Container.

00:06:23.026 --> 00:06:25.156 A:middle
Now, as we'll see
in a little bit,

00:06:25.156 --> 00:06:30.106 A:middle
Text Container represents one
area on which you draw a text.

00:06:30.606 --> 00:06:35.556 A:middle
So if you'd like multiple pages
or multiple columns for each

00:06:35.556 --> 00:06:39.276 A:middle
of those pages, columns or other
areas in which you flow text,

00:06:39.956 --> 00:06:41.936 A:middle
you'll need an additional
Text Container.

00:06:42.456 --> 00:06:48.436 A:middle
In their most basic
configuration, you'll have one

00:06:48.636 --> 00:06:49.896 A:middle
of each of these objects.

00:06:50.866 --> 00:06:54.036 A:middle
One Text Storage providing that
backing store for your document.

00:06:55.376 --> 00:06:58.516 A:middle
One Layout Manager controlling
how that text gets turned

00:06:58.516 --> 00:06:59.606 A:middle
into glyphs on screen.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.126 --> 00:07:04.366 A:middle
And one Text Container
describing the geometry

00:07:04.366 --> 00:07:05.526 A:middle
of your lines.

00:07:06.396 --> 00:07:07.516 A:middle
But let's say you want

00:07:07.516 --> 00:07:11.106 A:middle
to do something a little more
intricate like a multi-columnar

00:07:11.156 --> 00:07:13.436 A:middle
or multi-page layout,
that's fine.

00:07:13.506 --> 00:07:15.676 A:middle
Text Kit supports this
right out of the box.

00:07:16.346 --> 00:07:18.196 A:middle
Just use multiple
Text Containers,

00:07:18.536 --> 00:07:20.406 A:middle
attached to the same
Layout Manager,

00:07:20.976 --> 00:07:23.036 A:middle
backed by the same
Text Storage document.

00:07:23.786 --> 00:07:25.706 A:middle
This is how you'd get
multi-page support

00:07:26.416 --> 00:07:28.076 A:middle
and multi-columnar support.

00:07:29.276 --> 00:07:31.556 A:middle
Now, let's say you want
to go really advanced

00:07:31.746 --> 00:07:35.116 A:middle
and you want a different
layout for your text depending

00:07:35.116 --> 00:07:37.636 A:middle
on if it's on the
device or if it's

00:07:37.636 --> 00:07:39.736 A:middle
on the printed page, hard copy.

00:07:40.686 --> 00:07:43.796 A:middle
In that case, you'd use
multiple Layout Managers,

00:07:44.156 --> 00:07:45.686 A:middle
each with their own
Text Container,

00:07:46.236 --> 00:07:49.346 A:middle
but they're still backed
by the same Text Storage.

00:07:49.876 --> 00:07:53.206 A:middle
So now that I've showed
you just how easy it is

00:07:53.236 --> 00:07:57.216 A:middle
to compose our Text Kit
classes in your applications,

00:07:57.986 --> 00:07:59.686 A:middle
I'd like to give
you a quick demo

00:07:59.686 --> 00:08:02.896 A:middle
of just how simple you
can implement a document

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:02.896 --> 00:08:05.406 A:middle
of arbitrary length, a
multi-paged document.

00:08:05.896 --> 00:08:08.376 A:middle
Here I've got some code and
I'm working on an application

00:08:08.846 --> 00:08:12.236 A:middle
where I have a document sitting
in my applications bundle

00:08:12.896 --> 00:08:15.816 A:middle
and I'd like to flow
this document on screen.

00:08:16.266 --> 00:08:18.776 A:middle
In addition to flowing this
document on the screen,

00:08:19.296 --> 00:08:22.116 A:middle
I want my user, when they're
scrolling through the pages

00:08:22.116 --> 00:08:24.726 A:middle
of my document, to
fill like they would

00:08:24.726 --> 00:08:25.836 A:middle
on the rest of the system.

00:08:25.836 --> 00:08:29.116 A:middle
So I'm going to use
UIPageViewController.

00:08:30.126 --> 00:08:33.986 A:middle
Now, the way PageViewController
works is it needs a view

00:08:33.986 --> 00:08:37.436 A:middle
controller to represent every
page that you'd like to express.

00:08:38.035 --> 00:08:40.916 A:middle
So first, we're going to
need a view controller

00:08:40.916 --> 00:08:42.666 A:middle
to represent a particular page.

00:08:43.916 --> 00:08:46.696 A:middle
Now, thankfully before you all
came in, I had this code sitting

00:08:46.696 --> 00:08:47.636 A:middle
in the oven overnight.

00:08:48.146 --> 00:08:50.056 A:middle
So, it should ready to go.

00:08:50.216 --> 00:08:53.336 A:middle
I'm just going to
drag in a class

00:08:53.336 --> 00:08:57.066 A:middle
that I wrote called
Text Container Instance

00:08:57.066 --> 00:08:57.806 A:middle
View Controller.

00:08:58.526 --> 00:09:01.566 A:middle
And this just encapsulates
a text view which is going

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:01.566 --> 00:09:04.696 A:middle
to draw the text on
screen and the page number

00:09:04.696 --> 00:09:07.846 A:middle
that we can reference when
the PageViewController asks us

00:09:07.846 --> 00:09:09.906 A:middle
for a view controller after

00:09:09.906 --> 00:09:11.526 A:middle
or before a particular
view controller.

00:09:12.006 --> 00:09:15.176 A:middle
Next, in our main
view controller,

00:09:15.316 --> 00:09:19.396 A:middle
we're going to add a method,
ViewControllerForPageNumber.

00:09:20.406 --> 00:09:24.776 A:middle
Remember, a Text Container
represents one area

00:09:24.776 --> 00:09:26.516 A:middle
on the screen in which
you'd like to draw.

00:09:27.116 --> 00:09:30.256 A:middle
So for every page, we're going
to need a Text Container.

00:09:30.556 --> 00:09:31.556 A:middle
But that's no big deal.

00:09:31.556 --> 00:09:32.786 A:middle
Text Kit's pretty performant.

00:09:33.036 --> 00:09:36.476 A:middle
We're going to create a new
page controller representing a

00:09:36.476 --> 00:09:41.186 A:middle
particular page wired
up to our Layout Manager

00:09:41.186 --> 00:09:44.986 A:middle
and add a text view into
the view controller.

00:09:48.436 --> 00:09:51.306 A:middle
Next, we're going to
implement awakeFromNib.

00:09:52.376 --> 00:09:55.366 A:middle
In awakeFromNib, we're going to
create a new PageViewController

00:09:55.556 --> 00:09:57.166 A:middle
and set ourselves
as the delegate.

00:09:57.686 --> 00:10:00.186 A:middle
Next, we're going to implement
the page view controller data

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.186 --> 00:10:01.126 A:middle
source methods.

00:10:02.356 --> 00:10:05.266 A:middle
As I said before, the way
PageViewController works is

00:10:05.266 --> 00:10:08.016 A:middle
by referencing a view
controller before

00:10:08.286 --> 00:10:11.816 A:middle
or after a particular view
controller and that's fine.

00:10:12.436 --> 00:10:15.276 A:middle
Because our single
PageViewController has a page

00:10:15.276 --> 00:10:18.866 A:middle
number instance variable, we
can just add or subtract one

00:10:19.416 --> 00:10:21.726 A:middle
and return the view controller
representing that page.

00:10:22.186 --> 00:10:24.836 A:middle
Finally, we're going to
implement viewWillAppear

00:10:24.836 --> 00:10:25.876 A:middle
in our view controller.

00:10:26.446 --> 00:10:30.886 A:middle
And we're going to loop
through each of our pages

00:10:31.236 --> 00:10:33.456 A:middle
and create a Text
Container for each page.

00:10:33.706 --> 00:10:36.076 A:middle
Because the Text Container
represents one area

00:10:36.076 --> 00:10:39.036 A:middle
in which we need to draw,
we'll need one for every page.

00:10:39.586 --> 00:10:40.726 A:middle
And that's it.

00:10:41.296 --> 00:10:42.416 A:middle
I'm going to build and run.

00:10:45.296 --> 00:10:48.386 A:middle
And this is the same demo
application that you saw

00:10:48.386 --> 00:10:51.526 A:middle
in the Intro to Text Kit
session talk yesterday.

00:10:52.736 --> 00:10:54.906 A:middle
So we're going to drop into
the Text Container demo.

00:10:56.106 --> 00:11:02.136 A:middle
And as you can see our text is
flowed into this view perfectly.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:02.746 --> 00:11:05.756 A:middle
And as we scroll using the
paging behavior our users have

00:11:05.756 --> 00:11:10.446 A:middle
come to expect, we'll be able
to go from page to page to page.

00:11:11.316 --> 00:11:13.616 A:middle
And you'll notice we've even
got a little bit of spacing

00:11:13.696 --> 00:11:16.756 A:middle
in between these pages.

00:11:16.916 --> 00:11:20.076 A:middle
Now, if we had right to
left text from languages

00:11:20.076 --> 00:11:22.986 A:middle
such as Hebrew, Text Kit
was built from the ground

00:11:22.986 --> 00:11:25.866 A:middle
up to support text
in all directions.

00:11:25.936 --> 00:11:29.436 A:middle
So that right to left text
would flow alongside this left

00:11:29.436 --> 00:11:30.206 A:middle
to right text.

00:11:32.236 --> 00:11:35.096 A:middle
And so, that's just
how easy it is

00:11:35.096 --> 00:11:39.556 A:middle
to implement multi-page support
using the core Text Kit objects.

00:11:40.926 --> 00:11:44.276 A:middle
Now, I'd like to hand it
back to my colleague Aki,

00:11:44.866 --> 00:11:48.176 A:middle
our senior textpert, who's going
to go deeper into TextLayout.

00:11:48.396 --> 00:11:48.756 A:middle
Thank you.

00:11:49.006 --> 00:11:49.616 A:middle
&gt;&gt; Thank you, Peter.

00:11:50.776 --> 00:11:53.626 A:middle
Now, let's get close
to NSLayoutManager.

00:11:54.056 --> 00:11:59.066 A:middle
NSLayoutManager is not a
new API for old layout.

00:11:59.066 --> 00:12:04.066 A:middle
It's a Text Kit controller
class that orchestrates

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:04.216 --> 00:12:08.906 A:middle
between NSTextContainer
and NSTextStorage.

00:12:10.316 --> 00:12:14.846 A:middle
And it manages and stores
the layout information.

00:12:15.546 --> 00:12:18.836 A:middle
Using that information,
NSLayoutManager measures

00:12:19.086 --> 00:12:26.046 A:middle
and renders text
as we pressed it.

00:12:26.046 --> 00:12:28.796 A:middle
NSLayoutManager is
designed to be open.

00:12:29.176 --> 00:12:33.926 A:middle
It's not just black box that
serve its sibling objects.

00:12:35.076 --> 00:12:42.236 A:middle
So that all the information used
by Text Kit objects, the power,

00:12:42.236 --> 00:12:46.076 A:middle
the magic is available
to your applications.

00:12:47.376 --> 00:12:52.786 A:middle
Finally, its object-oriented
interface gives you excessive

00:12:52.786 --> 00:12:54.306 A:middle
support for customization

00:12:55.766 --> 00:12:58.976 A:middle
through the familiar
design patterns

00:12:58.976 --> 00:13:01.266 A:middle
such as delegation
and subclassing.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:04.176 --> 00:13:06.476 A:middle
Before going any deeper,

00:13:07.116 --> 00:13:12.206 A:middle
I'd like to recap
what a text layout is.

00:13:13.176 --> 00:13:18.786 A:middle
Text layout is basically
glyphs and locations.

00:13:20.776 --> 00:13:28.326 A:middle
Then I'd like to
look at the glyphs.

00:13:28.746 --> 00:13:31.926 A:middle
Glyphs-- A glyph is a
graphical representation

00:13:31.926 --> 00:13:33.986 A:middle
of one word characters.

00:13:34.506 --> 00:13:35.136 A:middle
It's simple.

00:13:36.916 --> 00:13:43.486 A:middle
These are three examples of
glyphs for a same character.

00:13:44.046 --> 00:13:48.026 A:middle
As you can see, the graphical
informations you have

00:13:48.026 --> 00:13:53.536 A:middle
in fonts are used to convert
character into glyphs,

00:13:53.916 --> 00:13:55.386 A:middle
the graphical representation.

00:13:55.986 --> 00:14:03.246 A:middle
And since glyphs are graphical
elements, they can be handled

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:03.246 --> 00:14:05.846 A:middle
by the graphic subsystem
such as quotes.

00:14:06.826 --> 00:14:12.046 A:middle
And on our platform, that glyph
information, glyph IDs to work

00:14:12.046 --> 00:14:15.046 A:middle
in core graphics
data type, CGGlyph.

00:14:15.046 --> 00:14:21.386 A:middle
Now that we covered the basics
of text layout information,

00:14:22.136 --> 00:14:26.356 A:middle
I'd like to walk you though
some of the things you could do

00:14:26.536 --> 00:14:29.846 A:middle
with the layout informations
to work in NSLayoutManager.

00:14:32.006 --> 00:14:36.276 A:middle
In addition to, get the
size of the entire string,

00:14:37.496 --> 00:14:41.226 A:middle
now you can get the
size of single line

00:14:42.256 --> 00:14:45.696 A:middle
to a single glyph at will.

00:14:45.896 --> 00:14:48.946 A:middle
As Ian mentioned yesterday
in his Introduction

00:14:48.946 --> 00:14:53.246 A:middle
to Text Kit session, hit-testing
the character or a word

00:14:53.456 --> 00:14:55.926 A:middle
under your touch
is very trivial.

00:14:59.156 --> 00:15:02.466 A:middle
Also you can get the
precise location,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:03.126 --> 00:15:06.616 A:middle
fix your perfect location
of individual glyphs

00:15:07.326 --> 00:15:10.506 A:middle
so that you can add your
custom rendering or animation

00:15:10.856 --> 00:15:16.376 A:middle
at arbitrary range of
characters in your document.

00:15:16.906 --> 00:15:20.456 A:middle
And with all text
layout information,

00:15:21.146 --> 00:15:26.066 A:middle
glyphs plus locations,
you can transform

00:15:26.066 --> 00:15:32.316 A:middle
and animate text using the power
of the core graphic system.

00:15:36.276 --> 00:15:39.256 A:middle
OK. Let's look at the
glyph information stored

00:15:39.256 --> 00:15:40.346 A:middle
in Layout Manager.

00:15:41.566 --> 00:15:44.386 A:middle
You can access the glyph
information using this method,

00:15:45.286 --> 00:15:47.516 A:middle
glyphAtIndex, simply enough.

00:15:48.666 --> 00:15:51.186 A:middle
But notice that the index passed

00:15:51.276 --> 00:15:55.356 A:middle
through this method
is a glyph index.

00:15:56.176 --> 00:15:58.986 A:middle
It's not the character
index you use

00:15:58.986 --> 00:16:01.896 A:middle
to access the contents
of NSTextStorage.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:02.236 --> 00:16:05.556 A:middle
So glyph index character
index, where are they?

00:16:06.776 --> 00:16:07.996 A:middle
They are usually the same

00:16:08.036 --> 00:16:10.636 A:middle
but they don't map one
to one all the time.

00:16:11.486 --> 00:16:19.786 A:middle
It's because ligatures,
translation or hyphenation.

00:16:20.836 --> 00:16:25.996 A:middle
There are many common situations
that make the glyphs to map

00:16:25.996 --> 00:16:29.366 A:middle
to their original
character directory.

00:16:29.986 --> 00:16:34.996 A:middle
So for that reason,
NSLayoutManager keeps track

00:16:35.856 --> 00:16:39.046 A:middle
of the character index, the
original character index

00:16:39.426 --> 00:16:40.936 A:middle
for each glyph for you.

00:16:42.176 --> 00:16:44.396 A:middle
You can access the
character index using

00:16:44.476 --> 00:16:47.006 A:middle
characterIndexForGlyphAtIndex
method.

00:16:47.006 --> 00:16:53.406 A:middle
And also you can access
that index other way around.

00:16:54.416 --> 00:16:59.586 A:middle
These are-- You could use these
two methods that maps glyph

00:16:59.586 --> 00:17:01.176 A:middle
and characters in bulk.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:01.616 --> 00:17:06.486 A:middle
And remember, it's important
to remember that, in any case,

00:17:06.896 --> 00:17:10.526 A:middle
you want to use one of these
methods to convert glyphs

00:17:10.705 --> 00:17:14.836 A:middle
and character index when you're
working with NSLayoutManager.

00:17:17.665 --> 00:17:19.876 A:middle
We look at the glyph
information,

00:17:20.705 --> 00:17:22.776 A:middle
let's look at the allocations.

00:17:23.116 --> 00:17:30.836 A:middle
Just like the glyph info itself,
NSLayoutManager keeps track

00:17:30.836 --> 00:17:34.726 A:middle
of the text layout information,
the allocations for glyph.

00:17:35.976 --> 00:17:37.636 A:middle
There are three elements--

00:17:38.256 --> 00:17:42.096 A:middle
generally three elements in
text layout, Text Container,

00:17:43.086 --> 00:17:46.076 A:middle
line and the glyph
location itself.

00:17:46.476 --> 00:17:49.466 A:middle
As Peter described
earlier in this session,

00:17:50.306 --> 00:17:55.236 A:middle
NSLayoutManager connects to
an array of Text Containers,

00:17:55.786 --> 00:18:00.076 A:middle
glyphs are filled from the
beginning of the Text Container

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:00.076 --> 00:18:03.586 A:middle
at index zero and
from so and so forth.

00:18:05.486 --> 00:18:08.446 A:middle
You can access your Text
Container associated

00:18:08.446 --> 00:18:12.646 A:middle
with a glyph using the
textContainerForGlyphAtIndex

00:18:12.696 --> 00:18:14.076 A:middle
effectiveRange method.

00:18:15.076 --> 00:18:19.096 A:middle
We now know that NSRange pointed

00:18:19.166 --> 00:18:23.896 A:middle
by the second argument
will be filled

00:18:23.976 --> 00:18:25.556 A:middle
with the glyph range
corresponding

00:18:25.556 --> 00:18:29.436 A:middle
to the Text Container
returned from this method.

00:18:30.076 --> 00:18:33.406 A:middle
So in a way, you can use
this method to animate

00:18:33.406 --> 00:18:35.076 A:middle
through all the Text Containers

00:18:35.246 --> 00:18:37.126 A:middle
and the corresponding
glyph range.

00:18:39.056 --> 00:18:44.956 A:middle
Lines. Just as glyph
belong to Text Container,

00:18:46.076 --> 00:18:47.106 A:middle
they are inside the line.

00:18:48.086 --> 00:18:52.026 A:middle
And Text Containers are
filled with lines of text.

00:18:52.816 --> 00:18:57.796 A:middle
But notice that a bigger
line could be divided

00:18:57.796 --> 00:19:01.226 A:middle
into multiple pieces
like this due

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:01.226 --> 00:19:07.396 A:middle
to NSTextContainer geometrical
shape defined by exclusion path.

00:19:08.386 --> 00:19:15.136 A:middle
So for that reason, we call that
data element a line fragment.

00:19:15.616 --> 00:19:17.396 A:middle
You can access the line fragment

00:19:17.816 --> 00:19:22.416 A:middle
for a glyph using the
lineFragmentRectForGlyphAtIndex

00:19:22.416 --> 00:19:23.786 A:middle
effectiveRange method.

00:19:24.946 --> 00:19:29.716 A:middle
It returns the CGRect that
represent the rectangular area

00:19:30.276 --> 00:19:31.236 A:middle
for the line fragment.

00:19:31.236 --> 00:19:37.846 A:middle
And finally, the glyph
location itself, it's relative

00:19:37.846 --> 00:19:42.796 A:middle
to the line fragmented rect
that the glyph is inside.

00:19:44.276 --> 00:19:45.846 A:middle
You can access the
location using

00:19:45.846 --> 00:19:47.746 A:middle
the locationForGlyphAtIndex.

00:19:48.286 --> 00:19:57.426 A:middle
Now we covered APIs, I'd like to
explain the actual relationship

00:19:57.576 --> 00:20:02.086 A:middle
among the three geometrical
elements inside the

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:02.086 --> 00:20:03.066 A:middle
layout information.

00:20:04.286 --> 00:20:05.666 A:middle
We have Text Container.

00:20:06.636 --> 00:20:13.296 A:middle
It has its own system and it
starts at the upper left corner.

00:20:16.316 --> 00:20:21.446 A:middle
The origin of the Text Container
could be actually anywhere

00:20:21.446 --> 00:20:25.146 A:middle
inside a view coordinate
system of its parent view.

00:20:25.766 --> 00:20:29.696 A:middle
So, it could be offsetted
like this.

00:20:35.596 --> 00:20:38.996 A:middle
Now, look into the
line fragment itself.

00:20:39.716 --> 00:20:43.116 A:middle
The line fragment is
represented by CGRect.

00:20:44.356 --> 00:20:49.656 A:middle
And its frame origin is
relative to the line fragment.

00:20:49.656 --> 00:20:51.966 A:middle
It's relative to the Text
Container coordinate system.

00:20:52.446 --> 00:20:58.486 A:middle
Inside the line fragment, it has
its own coordinate system too

00:20:58.966 --> 00:21:00.616 A:middle
that start with the
upper left corner.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:02.176 --> 00:21:09.106 A:middle
And the glyphs are located at
its baseline origin that starts

00:21:09.246 --> 00:21:16.336 A:middle
from the upper left corner of
the line fragment rect itself.

00:21:16.546 --> 00:21:22.026 A:middle
OK. We covered so many
concepts and APIs.

00:21:23.146 --> 00:21:25.556 A:middle
Now make them used in practice.

00:21:25.996 --> 00:21:30.936 A:middle
In this example, I'd like to
locate or find the location

00:21:30.936 --> 00:21:36.436 A:middle
of the glyph associated with the
last character in your document.

00:21:36.736 --> 00:21:37.706 A:middle
It's simple.

00:21:39.576 --> 00:21:43.596 A:middle
First, we'll get the index of
the character in your doc--

00:21:43.826 --> 00:21:48.516 A:middle
the last character in a
document just at the lengths

00:21:48.636 --> 00:21:51.236 A:middle
of the document and
subtract one.

00:21:52.266 --> 00:21:57.876 A:middle
Here we are assuming that
it's not an empty document.

00:21:58.316 --> 00:22:01.456 A:middle
Then as we discussed earlier,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:02.876 --> 00:22:06.006 A:middle
we want to convert the
character index to glyph index.

00:22:06.526 --> 00:22:09.066 A:middle
Here we're using the
glyphIndexForCharacterIndex

00:22:09.066 --> 00:22:09.336 A:middle
method.

00:22:09.336 --> 00:22:13.036 A:middle
Once you have the glyph index,

00:22:13.326 --> 00:22:16.626 A:middle
it's easy to get the
other layout elements.

00:22:17.006 --> 00:22:19.186 A:middle
Here we're getting
the line fragment rect

00:22:19.186 --> 00:22:23.866 A:middle
for the glyph using the
lineFragmentRectForGlyphAtIndex.

00:22:25.236 --> 00:22:32.006 A:middle
Then get the location of
the glyph at glyph itself.

00:22:32.146 --> 00:22:35.126 A:middle
Now, we translate the location

00:22:35.496 --> 00:22:37.616 A:middle
by adding the line
fragment origin

00:22:38.436 --> 00:22:40.766 A:middle
so that the location
is now contained

00:22:40.846 --> 00:22:42.926 A:middle
in Text Container
coordinate system.

00:22:44.316 --> 00:22:48.456 A:middle
If you want, you can further
translate that location

00:22:48.456 --> 00:22:49.996 A:middle
into the view coordinate system

00:22:50.266 --> 00:22:54.156 A:middle
if the Text Container origin
is not at the view origin.

00:22:54.706 --> 00:22:55.586 A:middle
Next example.

00:22:57.596 --> 00:23:00.896 A:middle
In addition to the
primitive methods that acts

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.896 --> 00:23:03.506 A:middle
as the layout information
we discussed so far,

00:23:03.506 --> 00:23:08.926 A:middle
NSLayoutManager provides
many, many convenience methods

00:23:09.436 --> 00:23:10.936 A:middle
to make your life easier.

00:23:11.596 --> 00:23:15.736 A:middle
In this example we
are doing hit testing.

00:23:16.166 --> 00:23:21.466 A:middle
We get the location of the touch
inside your text view using the

00:23:21.466 --> 00:23:22.646 A:middle
locationInView method.

00:23:24.556 --> 00:23:27.826 A:middle
Here we are assuming
the location.

00:23:28.636 --> 00:23:32.416 A:middle
The view coordinate
system is equal

00:23:32.416 --> 00:23:35.216 A:middle
to Text Container coordinate
system in this example.

00:23:36.946 --> 00:23:38.366 A:middle
Now you have the location.

00:23:39.406 --> 00:23:45.766 A:middle
Using the characterIndexForPoint
inTextContainer

00:23:46.886 --> 00:23:50.856 A:middle
fractionOfDistance
BetweenInsertionPoints,

00:23:51.556 --> 00:23:54.966 A:middle
you can get the character
index correspondent

00:23:54.966 --> 00:23:58.586 A:middle
to the glyph closest to
the location you specify.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:01.006 --> 00:24:05.336 A:middle
Once you have the character
index, it's relatively simple

00:24:05.336 --> 00:24:10.736 A:middle
to find out what range using
some of the NSString amenities

00:24:11.676 --> 00:24:15.086 A:middle
such as
enumerateSubstringsInRange:

00:24:15.166 --> 00:24:16.806 A:middle
options:usingBlock: method.

00:24:18.396 --> 00:24:20.966 A:middle
So we are not going deep

00:24:20.966 --> 00:24:24.786 A:middle
into the actual implementation
finding the word range,

00:24:25.046 --> 00:24:30.346 A:middle
but you can do so
pretty trivially.

00:24:33.416 --> 00:24:40.856 A:middle
Next. Usually, we recommend
sticking to UIKit objects

00:24:41.336 --> 00:24:45.436 A:middle
such as UITextView and UILabel

00:24:45.436 --> 00:24:48.726 A:middle
for all your text
rendering needs.

00:24:50.096 --> 00:24:52.836 A:middle
Because with the
deeper integration

00:24:52.926 --> 00:24:54.426 A:middle
with the attribute string,

00:24:55.186 --> 00:24:59.376 A:middle
these objects now provide
sufficient functionalities

00:24:59.376 --> 00:25:04.146 A:middle
and extensibilities for your
needs while you can enjoy Text

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:04.536 --> 00:25:10.566 A:middle
Kit and amenities such as
old layout and accessibility.

00:25:10.956 --> 00:25:14.696 A:middle
In some few cases,
though, you might want

00:25:14.696 --> 00:25:18.426 A:middle
to consider rendering
NSLayoutManager

00:25:19.066 --> 00:25:20.396 A:middle
into your custom view.

00:25:21.736 --> 00:25:29.506 A:middle
For example, you have multiple
overlapping text image frames

00:25:29.906 --> 00:25:33.436 A:middle
in your view, commonly
found in magazines

00:25:33.586 --> 00:25:36.556 A:middle
or newspaper applications,

00:25:37.796 --> 00:25:42.386 A:middle
or you want to have
custom pagination

00:25:43.196 --> 00:25:44.966 A:middle
when you're printing
your documents.

00:25:46.226 --> 00:25:51.636 A:middle
In this case, you could
actually directly access the

00:25:51.636 --> 00:25:55.606 A:middle
NSLayoutManager and manually
render the contents yourself.

00:25:55.936 --> 00:26:01.876 A:middle
Here, it's assumed this Layout
Manager variable contains

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:02.156 --> 00:26:04.336 A:middle
preconfigured Layout Manager.

00:26:04.576 --> 00:26:09.476 A:middle
And we have the rendering area.

00:26:09.816 --> 00:26:17.766 A:middle
It's the area inside your view
you want to fill the glyph with.

00:26:17.766 --> 00:26:20.006 A:middle
It's sort of, you know,
you'll get that rect

00:26:20.006 --> 00:26:22.136 A:middle
from the direct method.

00:26:22.716 --> 00:26:27.896 A:middle
And finally, we and-- we
have the container origin

00:26:28.906 --> 00:26:31.286 A:middle
that contains the origin

00:26:31.646 --> 00:26:35.376 A:middle
of the Text Container inside
your view coordinate system.

00:26:35.896 --> 00:26:41.166 A:middle
First thing, you want to
convert the rendering area

00:26:41.616 --> 00:26:43.756 A:middle
into the Text Container
coordinate system,

00:26:44.516 --> 00:26:46.256 A:middle
just subtract the
container origin

00:26:47.756 --> 00:26:53.566 A:middle
from the bounding rect frame.

00:26:53.766 --> 00:26:54.926 A:middle
Then use

00:26:54.966 --> 00:26:58.066 A:middle
that glyphRangeForBoundingRect
inTextContainer,

00:26:58.356 --> 00:26:59.756 A:middle
another useful method.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:00.386 --> 00:27:04.226 A:middle
You can get the glyph
range that are filling

00:27:04.226 --> 00:27:06.246 A:middle
that specify that bounding rect.

00:27:06.826 --> 00:27:12.736 A:middle
Notice that that glyph range
might contain some extra glyphs

00:27:12.736 --> 00:27:14.876 A:middle
outside of bounding
rect actually.

00:27:15.636 --> 00:27:20.796 A:middle
It's because we're handling
the bidirectional language

00:27:20.796 --> 00:27:22.656 A:middle
such as Arabic and Hebrew,

00:27:23.276 --> 00:27:25.956 A:middle
the glyph location
could be out of order.

00:27:26.796 --> 00:27:29.866 A:middle
So in order to contain
all the glyph range,

00:27:30.246 --> 00:27:34.146 A:middle
some of the glyph might be lying
outside of the bounding rect.

00:27:35.296 --> 00:27:37.576 A:middle
So in those cases, you
might consider clipping

00:27:38.346 --> 00:27:41.816 A:middle
when you are rendering.

00:27:41.866 --> 00:27:45.556 A:middle
Once you have the glyph
range, you can render.

00:27:46.976 --> 00:27:51.976 A:middle
Here we are rendering
the background using

00:27:51.976 --> 00:27:54.666 A:middle
that drawBackgroundForGlyphRange
atPoint.

00:27:55.926 --> 00:27:58.476 A:middle
This method renders attributes

00:27:58.476 --> 00:28:01.656 A:middle
such as
NSBackgroundColorAttributeName.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:02.736 --> 00:28:08.016 A:middle
But we recommend always using
this method whenever you are

00:28:08.016 --> 00:28:09.036 A:middle
rendering glyphs.

00:28:09.616 --> 00:28:15.706 A:middle
It's because in the future,
we might enhance this method

00:28:15.706 --> 00:28:17.506 A:middle
to support some other
attributes.

00:28:18.256 --> 00:28:22.226 A:middle
In that case, your application
automatically get the new

00:28:22.226 --> 00:28:25.346 A:middle
functionalities out of it.

00:28:25.886 --> 00:28:27.426 A:middle
Once you render the background,

00:28:28.096 --> 00:28:33.216 A:middle
now render the glyphs using
the drawGlyphsForGlyohRange

00:28:33.216 --> 00:28:34.126 A:middle
atPoint method.

00:28:35.166 --> 00:28:39.046 A:middle
It renders a glyph in
the glyph range as well

00:28:39.046 --> 00:28:45.606 A:middle
as other auxiliary graphical
items such as underlines,

00:28:45.856 --> 00:28:49.926 A:middle
strikethrough, shadows
and attachments.

00:28:50.096 --> 00:28:54.556 A:middle
You might have noticed that we
are passing container origin

00:28:54.556 --> 00:28:55.606 A:middle
to these methods.

00:28:56.156 --> 00:28:59.786 A:middle
So we are rendering an
arbitrary glyph range,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:01.016 --> 00:29:06.706 A:middle
but you are not passing
some location corresponding

00:29:06.706 --> 00:29:08.376 A:middle
to the glyph range
to drawing method.

00:29:08.816 --> 00:29:11.286 A:middle
Maybe that's not
what you are used to.

00:29:11.716 --> 00:29:14.836 A:middle
Actually, it's quite
simple and straightforward.

00:29:15.316 --> 00:29:21.276 A:middle
It's because Layout
Manager is designed

00:29:21.306 --> 00:29:23.646 A:middle
to render Text Containers.

00:29:24.206 --> 00:29:28.826 A:middle
So even though you are
passing the glyph range a part

00:29:28.826 --> 00:29:34.616 A:middle
of the Text Container, you are
always rendering Text Container

00:29:34.616 --> 00:29:39.416 A:middle
itself and rendering contents.

00:29:40.126 --> 00:29:43.106 A:middle
So when you're passing
the location,

00:29:43.616 --> 00:29:46.786 A:middle
it's always at the
Text Container origin.

00:29:46.786 --> 00:29:50.946 A:middle
Now that doesn't necessary
mean you will start

00:29:50.946 --> 00:29:53.176 A:middle
with your original
Text Container shape.

00:29:54.486 --> 00:29:58.336 A:middle
You are free to translate
the location by yourself

00:29:58.336 --> 00:30:04.276 A:middle
so that the location paths

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:05.736 --> 00:30:08.756 A:middle
to the rendering
method can be arbitrary

00:30:09.236 --> 00:30:11.776 A:middle
and your glyph range
can be moved

00:30:11.776 --> 00:30:13.916 A:middle
to some other places
in the view.

00:30:14.476 --> 00:30:17.696 A:middle
Here we have the glyph
range we want to render.

00:30:18.416 --> 00:30:20.616 A:middle
That's some range inside
your Text Container.

00:30:21.246 --> 00:30:24.406 A:middle
And we have the location.

00:30:24.856 --> 00:30:27.576 A:middle
We want that glyph
range to appear

00:30:27.576 --> 00:30:29.696 A:middle
at the location inside of view.

00:30:30.196 --> 00:30:30.636 A:middle
First,

00:30:31.196 --> 00:30:34.056 A:middle
using
lineFragmentRectForGlyphAtIndex

00:30:34.056 --> 00:30:40.256 A:middle
method we saw earlier, we
get the line fragment origin

00:30:41.006 --> 00:30:42.646 A:middle
for the glyph you
want to render.

00:30:43.126 --> 00:30:46.996 A:middle
So in this case, you
get the line rect

00:30:46.996 --> 00:30:49.426 A:middle
for the first glyph
in the glyph range.

00:30:50.866 --> 00:30:56.256 A:middle
Once you get that, you
subtract the glyph origin

00:30:56.786 --> 00:30:58.236 A:middle
from the location
you want to render.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.116 --> 00:31:04.366 A:middle
By doing that, the
location is now translated

00:31:05.896 --> 00:31:13.446 A:middle
so that the Text Container
origin is moved far

00:31:13.446 --> 00:31:19.956 A:middle
and the location coincide to the
glyph range you want to render.

00:31:20.116 --> 00:31:24.066 A:middle
Now, you have the
location, just render it.

00:31:24.476 --> 00:31:31.026 A:middle
Another common questions we
get at labs and mailing lists,

00:31:31.696 --> 00:31:36.496 A:middle
it's like number of
lines in your document.

00:31:38.306 --> 00:31:39.496 A:middle
It's really simple.

00:31:41.136 --> 00:31:44.346 A:middle
But it was actually
difficult before Text Kit.

00:31:45.666 --> 00:31:49.576 A:middle
With the Text Kits, since
NSLayoutManager keeps tracks

00:31:49.726 --> 00:31:55.396 A:middle
of all the line fragment rect in
your documents, it's easy now.

00:31:56.356 --> 00:32:01.396 A:middle
Remember, a visual
line could be divided

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:01.396 --> 00:32:05.696 A:middle
into multiple line fragments
because of the exclusion path.

00:32:06.656 --> 00:32:12.756 A:middle
You want to store the Y location
of the line fragment and using

00:32:12.756 --> 00:32:15.946 A:middle
that cache value,
you want to compare

00:32:15.946 --> 00:32:19.346 A:middle
to the current line fragment
rect before answering

00:32:19.346 --> 00:32:21.546 A:middle
incremental number of lines.

00:32:23.976 --> 00:32:27.256 A:middle
Here using the glyph
range for Text Container,

00:32:28.556 --> 00:32:33.456 A:middle
you can get the glyph range
inside the Text Container and,

00:32:33.616 --> 00:32:37.206 A:middle
you know, you should get
used to this method by now,

00:32:37.706 --> 00:32:41.156 A:middle
lineFragmentRectForGlyphAtIndex
effectiveRange.

00:32:41.756 --> 00:32:49.206 A:middle
And as I described it earlier,
you can pass a point out to--

00:32:49.366 --> 00:32:55.896 A:middle
a point out to NSRange and
get back the glyph range

00:32:55.976 --> 00:32:58.146 A:middle
corresponding to the
line fragment rect.

00:32:58.696 --> 00:33:04.316 A:middle
And here we are enumerating all
the line fragment rect inside

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:04.606 --> 00:33:13.536 A:middle
the fixed container by comparing
the stored last line fragment

00:33:13.536 --> 00:33:16.466 A:middle
origin to the current
line fragment origin.

00:33:17.426 --> 00:33:22.176 A:middle
If the new origin is larger,
that means you are moved

00:33:22.176 --> 00:33:26.156 A:middle
to the new visual line so that
you can increment the number

00:33:26.216 --> 00:33:30.916 A:middle
of lines like this.

00:33:31.706 --> 00:33:36.806 A:middle
And at data stored
information was the new line

00:33:36.846 --> 00:33:37.636 A:middle
fragment origin.

00:33:38.296 --> 00:33:39.256 A:middle
It's that simple.

00:33:40.006 --> 00:33:44.136 A:middle
We've seen glyphs and
layout informations stored

00:33:44.136 --> 00:33:48.716 A:middle
in NSLayoutManager there
are endless possibilities

00:33:48.716 --> 00:33:55.646 A:middle
that you can do with the broader
and finer controls you have

00:33:55.786 --> 00:34:00.426 A:middle
in your text using
the information stored

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:00.426 --> 00:34:03.766 A:middle
in NSLayoutManager and
you can freely access now.

00:34:04.466 --> 00:34:10.926 A:middle
But the control over your
text doesn't end there.

00:34:11.146 --> 00:34:16.846 A:middle
One of the main Text Kit
architecture strength is its

00:34:16.846 --> 00:34:19.485 A:middle
vast support for customization.

00:34:19.815 --> 00:34:25.366 A:middle
Let's look at how to customize
layout using Text Kit.

00:34:25.366 --> 00:34:30.726 A:middle
NSLayoutManager provides a rich
set of delegation interface.

00:34:31.295 --> 00:34:36.585 A:middle
You can-- With some of the
interface, you can get notified

00:34:38.016 --> 00:34:40.335 A:middle
for step [phonetic]
change such as

00:34:40.956 --> 00:34:43.676 A:middle
when your layout
cache is invited.

00:34:45.295 --> 00:34:50.386 A:middle
Or, layout for the container was
finished, so on and so forth.

00:34:51.186 --> 00:34:53.936 A:middle
With some other delegation
interface,

00:34:54.596 --> 00:34:58.226 A:middle
you can override many aspects

00:34:58.226 --> 00:35:04.466 A:middle
of layout process while
it's being laid out.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:05.076 --> 00:35:10.066 A:middle
For example, you can
override the line spacing.

00:35:10.196 --> 00:35:13.296 A:middle
Your delegate object
gets consulted at the end

00:35:13.296 --> 00:35:16.146 A:middle
of that every single
line fragment rect

00:35:17.076 --> 00:35:20.336 A:middle
and you can provide
your own line spacing

00:35:20.586 --> 00:35:24.756 A:middle
at that point overriding
their values stored

00:35:24.866 --> 00:35:27.636 A:middle
in paragraph style
associated with that text.

00:35:29.096 --> 00:35:32.936 A:middle
So for example, with that
paragraph style line spacing

00:35:32.936 --> 00:35:37.466 A:middle
value, a single line
spacing value is used

00:35:37.466 --> 00:35:39.806 A:middle
for the whole paragraph.

00:35:40.726 --> 00:35:45.856 A:middle
But using this method,
you can have custom line

00:35:45.856 --> 00:35:47.056 A:middle
spacing everywhere.

00:35:48.486 --> 00:35:53.416 A:middle
And this is useful when
you want to make space

00:35:53.466 --> 00:36:01.036 A:middle
for some other extra
rendering like this.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:03.156 --> 00:36:08.196 A:middle
[Inaudible] a lot annotation
when you want to have this kind

00:36:08.196 --> 00:36:13.616 A:middle
of extra rendering right below
the text you want to make space

00:36:15.116 --> 00:36:19.386 A:middle
and you don't know if you
want to make the space

00:36:20.376 --> 00:36:22.716 A:middle
when you are creating
the text layout itself,

00:36:23.116 --> 00:36:25.006 A:middle
so you have to determine
this kind

00:36:25.006 --> 00:36:30.906 A:middle
of layout conditions dynamical
while you are laying out.

00:36:30.906 --> 00:36:37.786 A:middle
Similar to the line
spacing, you can override

00:36:37.986 --> 00:36:44.786 A:middle
with soft wrapping line--
soft wrapping lines at the end

00:36:44.786 --> 00:36:48.516 A:middle
of every single soft
wrapping-- soft line breaking.

00:36:48.516 --> 00:36:52.186 A:middle
So there it gets consulted.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.556 --> 00:37:08.326 A:middle
And by default, we are using
the line breaking logic provided

00:37:08.326 --> 00:37:11.716 A:middle
by the Unicode standard,
so it should be sufficient

00:37:11.936 --> 00:37:17.636 A:middle
for most cases, and it provides
a localized way of line breaking

00:37:17.696 --> 00:37:21.976 A:middle
for every language
available on iOS.

00:37:22.606 --> 00:37:27.286 A:middle
But in some few cases, you
want to enhance the ways

00:37:27.286 --> 00:37:30.946 A:middle
of the line wrapping happens
for your typographic needs.

00:37:31.916 --> 00:37:35.666 A:middle
In that case, you are
[inaudible] to override

00:37:36.146 --> 00:37:42.386 A:middle
that line wrapping
phase like this.

00:37:42.586 --> 00:37:47.896 A:middle
Another powerful feature
techniques you can use

00:37:47.946 --> 00:37:53.366 A:middle
with delegation, by default,
NSLayoutManager uses the mapping

00:37:53.486 --> 00:37:57.896 A:middle
between character and glyphs
stored inside the font itself.

00:37:57.896 --> 00:38:00.156 A:middle
That's the default
glyph mapping.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:01.906 --> 00:38:05.746 A:middle
You can override this
glyph mapping all

00:38:05.746 --> 00:38:11.186 A:middle
by yourself while it's
laying out of text.

00:38:11.996 --> 00:38:13.226 A:middle
This is powerful.

00:38:13.226 --> 00:38:16.546 A:middle
It's used by, for example,
bullet substitution

00:38:17.046 --> 00:38:22.376 A:middle
in security mode or when you
want to hide some portion

00:38:22.376 --> 00:38:25.466 A:middle
of text when you are
folding the line.

00:38:25.636 --> 00:38:31.646 A:middle
And there are many,
many other ways

00:38:33.156 --> 00:38:36.586 A:middle
to customize your text layout

00:38:37.216 --> 00:38:43.116 A:middle
like a dynamic query
while it's being laid out.

00:38:43.406 --> 00:38:45.486 A:middle
Today, I would like to look

00:38:45.486 --> 00:38:49.746 A:middle
at the custom glyph
mapping a little farther.

00:38:50.046 --> 00:38:54.726 A:middle
When you had text and
the text doesn't fit

00:38:54.726 --> 00:38:59.446 A:middle
into the available space,
it's a common technique used

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:00.336 --> 00:39:03.856 A:middle
to tail truncation like this.

00:39:04.056 --> 00:39:07.386 A:middle
But with the simple
tail truncation logic,

00:39:08.056 --> 00:39:14.936 A:middle
you might encounter, the actual
important information might be

00:39:15.016 --> 00:39:18.526 A:middle
truncated out from
the user's view.

00:39:19.836 --> 00:39:21.386 A:middle
You don't like that.

00:39:23.296 --> 00:39:26.546 A:middle
So using the custom
glyph generation logic,

00:39:27.366 --> 00:39:33.776 A:middle
you can override and add
additional truncation range

00:39:34.436 --> 00:39:39.776 A:middle
to your string and make
sure your important range

00:39:39.776 --> 00:39:42.426 A:middle
of text is visible to the user.

00:39:42.946 --> 00:39:45.506 A:middle
Let's see how we
can accomplish that.

00:39:45.616 --> 00:39:51.646 A:middle
First, with NSLayout method--
NSLayoutManager method,

00:39:52.746 --> 00:39:57.576 A:middle
truncatedGlyphRangeInLine
FragmentForGlyphAtIndex method,

00:39:58.576 --> 00:40:02.946 A:middle
you can get the range of the
glyphs that's being truncated

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:02.946 --> 00:40:07.716 A:middle
out from the user's view.

00:40:09.376 --> 00:40:14.366 A:middle
And you can compare this
range with your focus range,

00:40:14.756 --> 00:40:17.436 A:middle
for example, when you
are searching some words,

00:40:17.976 --> 00:40:23.046 A:middle
you want to keep the-- match the
words inside the user's view.

00:40:24.566 --> 00:40:26.656 A:middle
When it matches this range,

00:40:27.176 --> 00:40:30.586 A:middle
you want to truncate
additional location.

00:40:31.016 --> 00:40:36.116 A:middle
In that case, we estimate the
additional truncation range

00:40:37.636 --> 00:40:42.606 A:middle
probably using the
[inaudible] being truncated out.

00:40:43.986 --> 00:40:45.266 A:middle
Now we layout.

00:40:45.966 --> 00:40:52.536 A:middle
Inside the layout process, your
delegate method, layoutManager:

00:40:52.536 --> 00:40:57.306 A:middle
shouldGenerateGlyphs:
properties:characterIndexes:

00:40:57.306 --> 00:41:01.036 A:middle
font:forGlyphRange
method get being called.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:01.696 --> 00:41:05.566 A:middle
And inside this method, you
can override the default

00:41:05.566 --> 00:41:06.266 A:middle
glyph mapping.

00:41:06.896 --> 00:41:10.356 A:middle
So, you can do whatever
you want.

00:41:10.916 --> 00:41:19.506 A:middle
In this case, we substitute
the default glyph mapping

00:41:19.996 --> 00:41:21.106 A:middle
with [inaudible]
glyphs and truncate.

00:41:21.106 --> 00:41:24.906 A:middle
It's that simple.

00:41:26.676 --> 00:41:31.426 A:middle
And repeat itself until
you find the ideal range

00:41:31.936 --> 00:41:33.046 A:middle
that fits everything.

00:41:33.396 --> 00:41:36.476 A:middle
Well then let's take a look
at the delegate method itself.

00:41:36.896 --> 00:41:39.316 A:middle
The delegate method is called

00:41:39.706 --> 00:41:44.606 A:middle
for all the text ranges
inside your Text Storage

00:41:45.196 --> 00:41:49.276 A:middle
when it gets mapped to glyphs.

00:41:49.276 --> 00:41:53.486 A:middle
It receives glyph's
properties and character indexes

00:41:54.836 --> 00:41:56.096 A:middle
for the chunk of text.

00:41:57.686 --> 00:41:59.506 A:middle
And this is a default
information

00:41:59.796 --> 00:42:02.356 A:middle
and you can override
any way you want

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:02.626 --> 00:42:06.276 A:middle
until you have your delegate
object and your implementation

00:42:06.466 --> 00:42:09.156 A:middle
of the delegate method.

00:42:09.316 --> 00:42:12.096 A:middle
You will see a chunk of glyphs.

00:42:17.436 --> 00:42:22.596 A:middle
Look through it and you
find a particular range

00:42:22.716 --> 00:42:28.176 A:middle
of glyph matches your focus
range and you can check

00:42:28.356 --> 00:42:31.696 A:middle
against using the
original character index.

00:42:32.286 --> 00:42:38.226 A:middle
When that happens,
you override pass

00:42:38.476 --> 00:42:41.816 A:middle
in glyphs information
with ellipsis glyph.

00:42:48.706 --> 00:42:54.316 A:middle
And you might wonder what are
these things after ellipsis.

00:42:55.616 --> 00:42:58.886 A:middle
In order to keep the character
and glyph index simple

00:42:58.986 --> 00:43:02.836 A:middle
and be efficient,
NSLayoutManager often try

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:02.836 --> 00:43:07.666 A:middle
to pad the glyph range that's
being hidden from the users.

00:43:08.366 --> 00:43:13.346 A:middle
To do so, the glyph
property is working here.

00:43:13.346 --> 00:43:15.176 A:middle
What is the glyph property?

00:43:16.656 --> 00:43:18.476 A:middle
So it's like other
glyph information.

00:43:18.846 --> 00:43:23.566 A:middle
Glyph NSLayoutManager keeps
track of glyph property

00:43:23.646 --> 00:43:29.436 A:middle
for glyph and it stores semantic
behavior for each glyph.

00:43:29.746 --> 00:43:34.166 A:middle
For example, you can identify
a glyph as a control character

00:43:34.296 --> 00:43:37.196 A:middle
like a tab or a new
line, so on and so forth.

00:43:38.246 --> 00:43:44.416 A:middle
Or, a glyph could be white space
that can be treated as elastic

00:43:44.416 --> 00:43:47.626 A:middle
at the end of the line break.

00:43:48.546 --> 00:43:52.806 A:middle
In our example, we are
using this property,

00:43:53.226 --> 00:43:56.906 A:middle
NSGlyphPropertyNull, by
displaying this property,

00:43:57.456 --> 00:44:02.806 A:middle
the glyph will be treated
as the glyph will be ignored

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:02.806 --> 00:44:05.366 A:middle
from both layout and rendering.

00:44:06.466 --> 00:44:08.176 A:middle
So, you can hide a part

00:44:08.176 --> 00:44:10.476 A:middle
of the glyph range
from the user's view.

00:44:10.886 --> 00:44:17.966 A:middle
Now, I'd like to point
our Text Kit demo maester,

00:44:18.976 --> 00:44:24.486 A:middle
Jordan Breeding to show that
multiple truncations demo.

00:44:25.436 --> 00:44:25.876 A:middle
Jordan.

00:44:25.876 --> 00:44:30.516 A:middle
&gt;&gt; So, what I'm going to
show you right now is a view

00:44:30.516 --> 00:44:32.776 A:middle
controller inside of our
demo shell that we used

00:44:32.776 --> 00:44:34.196 A:middle
in the Intro session as well.

00:44:35.666 --> 00:44:38.046 A:middle
In this case, instead
of using a UITextView,

00:44:38.046 --> 00:44:43.156 A:middle
we're actually using a new
class, a text rendering view.

00:44:44.206 --> 00:44:47.116 A:middle
This is a UIView subclass
in which we are going

00:44:47.116 --> 00:44:50.086 A:middle
to render the glyphs ourselves
to achieve multiple truncation.

00:44:51.336 --> 00:44:53.616 A:middle
First, I'll show
you at running live

00:44:53.696 --> 00:44:57.986 A:middle
and then we'll explain
what some of the code does.

00:44:58.186 --> 00:45:02.526 A:middle
Now we're building and running.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:02.656 --> 00:45:05.306 A:middle
And when we run the
demo, you'll notice

00:45:05.306 --> 00:45:06.936 A:middle
that we have highlighted
the range

00:45:06.936 --> 00:45:10.226 A:middle
so that we are concerned
about not truncating.

00:45:10.776 --> 00:45:18.306 A:middle
And as we get closer and
closer to that, you'll notice

00:45:19.166 --> 00:45:21.656 A:middle
that it automatically starts
to truncate to the left

00:45:22.626 --> 00:45:26.656 A:middle
so that we keep it intact.

00:45:26.936 --> 00:45:28.236 A:middle
So, how do we do that?

00:45:28.826 --> 00:45:30.856 A:middle
Well, in the text
rendering view,

00:45:31.166 --> 00:45:33.196 A:middle
we actually made a new
class called a focus

00:45:33.196 --> 00:45:34.266 A:middle
truncation renderer.

00:45:34.876 --> 00:45:36.646 A:middle
We setup an instance
variable for that.

00:45:36.646 --> 00:45:40.506 A:middle
And then awakeFromNib,
we actually setup some

00:45:40.506 --> 00:45:43.026 A:middle
of our data including
the focus range

00:45:43.026 --> 00:45:45.426 A:middle
that we are concerned
with keeping intact.

00:45:46.866 --> 00:45:50.446 A:middle
Then in our draw rect, we
setup some basic information

00:45:50.446 --> 00:45:52.226 A:middle
and then we also
tell our renderer

00:45:52.726 --> 00:45:57.636 A:middle
to use each drawing rect
to draw in the same place.

00:45:57.796 --> 00:46:00.536 A:middle
So if we go over to our
focus truncation renderer,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:01.646 --> 00:46:03.526 A:middle
you'll notice that when
we setup the contents

00:46:03.576 --> 00:46:07.326 A:middle
for the Text Storage,
we also set ourselves

00:46:07.326 --> 00:46:09.636 A:middle
as the Layout Manager's
delegate right here.

00:46:11.976 --> 00:46:18.526 A:middle
The reason that we do that
is then in our draw and rect,

00:46:19.166 --> 00:46:23.986 A:middle
when we actually draw
all of our characters

00:46:24.956 --> 00:46:27.696 A:middle
and we know whether we need
to force tail truncation

00:46:28.136 --> 00:46:32.016 A:middle
and truncate ahead of time
or not, all of this calls

00:46:32.016 --> 00:46:35.616 A:middle
to Layout Manager will actually
consult us for glyph generation.

00:46:39.216 --> 00:46:43.736 A:middle
So, all these calls
end up calling

00:46:43.736 --> 00:46:44.956 A:middle
down into our delegate method.

00:46:45.536 --> 00:46:48.386 A:middle
In this case, layoutManager:
shouldGenerateGlyphs:

00:46:48.576 --> 00:46:51.426 A:middle
properties:characterIndexes:
font:forGlyphRange.

00:46:51.666 --> 00:46:53.026 A:middle
This is the method Aki pointed

00:46:53.026 --> 00:46:55.226 A:middle
out for laying out
custom glyphs.

00:46:56.076 --> 00:46:58.256 A:middle
So, what are we actually
doing here?

00:46:58.976 --> 00:47:00.066 A:middle
Well, first, we're finding

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:00.066 --> 00:47:01.916 A:middle
out if we have an
intersection range.

00:47:03.526 --> 00:47:07.066 A:middle
And then in our actual code,

00:47:07.066 --> 00:47:11.006 A:middle
we're checking the character
indexes that we've been passed

00:47:11.066 --> 00:47:12.216 A:middle
by the Layout Manager.

00:47:12.896 --> 00:47:16.776 A:middle
And if they're inside the target
range, we know that we need

00:47:16.776 --> 00:47:18.206 A:middle
to use the ellipsis glyph.

00:47:19.466 --> 00:47:21.666 A:middle
So, we get the character
for the ellipsis glyph

00:47:21.726 --> 00:47:24.376 A:middle
and then we get the
glyph for the characters

00:47:24.376 --> 00:47:26.156 A:middle
and then we actually
do the replacement.

00:47:27.296 --> 00:47:28.886 A:middle
Then, just like Aki said,

00:47:29.386 --> 00:47:32.966 A:middle
we actually change the other
glyph character properties

00:47:33.026 --> 00:47:37.356 A:middle
to be the control character
and the null character

00:47:37.356 --> 00:47:39.586 A:middle
so that everything just
lays out automatically

00:47:39.656 --> 00:47:41.886 A:middle
for us in our draw rect.

00:47:42.586 --> 00:47:45.216 A:middle
It's actually just
as simple as that.

00:47:45.316 --> 00:47:47.086 A:middle
It was a lot harder
before, right?

00:47:48.226 --> 00:47:51.506 A:middle
Next, I'd like to have
Aki come back up and close

00:47:51.506 --> 00:47:52.556 A:middle
out our session for us.

00:47:53.126 --> 00:47:56.746 A:middle
&gt;&gt; We saw you can use
the gorgeous text layouts

00:47:56.746 --> 00:47:58.376 A:middle
in your applications.

00:47:58.876 --> 00:48:05.996 A:middle
And you learned how to
achieve multiple page,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:05.996 --> 00:48:09.046 A:middle
multiple document
configuration easy--

00:48:09.776 --> 00:48:14.376 A:middle
easily with the application.

00:48:14.376 --> 00:48:21.546 A:middle
And we covered the rich in text
layout information provided

00:48:22.306 --> 00:48:26.676 A:middle
through the NSLayoutManager API.

00:48:27.046 --> 00:48:36.926 A:middle
And finally, we saw some aspect
of the Text Kit customizability

00:48:37.846 --> 00:48:40.436 A:middle
that was previously
not possible.

00:48:42.536 --> 00:48:51.436 A:middle
So, Text Kit is not just another
text API you need to learn.

00:48:51.986 --> 00:48:55.946 A:middle
With the deep integration
with UIKit,

00:48:57.246 --> 00:49:01.316 A:middle
comprehensive functionalities
and broad customizability,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:02.696 --> 00:49:08.036 A:middle
we believe it will be the last

00:49:08.036 --> 00:49:12.296 A:middle
and only text API even be
working for years to come.

00:49:13.066 --> 00:49:16.386 A:middle
If you want to know more,

00:49:16.386 --> 00:49:19.556 A:middle
you can contact our
evangelist, Jake Behrens.

00:49:20.346 --> 00:49:24.086 A:middle
And we have two related
sessions,

00:49:24.476 --> 00:49:28.606 A:middle
one already happened
yesterday and another coming

00:49:28.666 --> 00:49:31.726 A:middle
up tomorrow morning
at 9:00 at Presidio.

00:49:33.076 --> 00:49:35.126 A:middle
And that's going to talk

00:49:35.126 --> 00:49:39.096 A:middle
about the technology
behind the dynamic type.

00:49:39.436 --> 00:49:42.046 A:middle
And if you want to know how

00:49:42.046 --> 00:49:46.306 A:middle
to utilize all the cool
technologies such as UIFont

00:49:46.306 --> 00:49:49.166 A:middle
and UIFont Descriptor,
you want to be there.

00:49:49.346 --> 00:49:53.836 A:middle
So, thank you and enjoy
the rest of the conference.

00:49:54.516 --> 00:49:58.480 A:middle
[ Applause ]

