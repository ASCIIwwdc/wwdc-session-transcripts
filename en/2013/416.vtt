WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:01.516 --> 00:00:09.566 A:middle
[ Silence ]

00:00:10.066 --> 00:00:14.036 A:middle
&gt;&gt; Hello, welcome to the World
Wide Developer Conference,

00:00:14.036 --> 00:00:17.926 A:middle
this is the second automation
session today, how many went

00:00:17.926 --> 00:00:19.896 A:middle
to first session
this morning...okay.

00:00:20.686 --> 00:00:25.996 A:middle
So our little presentation
about Libraries kind of got

00:00:26.046 --> 00:00:29.906 A:middle
to you a little bit huh,
you're interested in this.

00:00:30.166 --> 00:00:37.626 A:middle
This session we go in depth in
discussing AppleScript Libraries

00:00:37.846 --> 00:00:42.626 A:middle
and we'll examine not only
simple but complex ones

00:00:42.626 --> 00:00:44.366 A:middle
and we'll walk you
through the process

00:00:44.366 --> 00:00:46.876 A:middle
of how you create
those including

00:00:46.876 --> 00:00:50.336 A:middle
for the first time ever
anywhere an example of how

00:00:50.336 --> 00:00:52.196 A:middle
to create a scripting
dictionary.

00:00:52.466 --> 00:00:55.566 A:middle
I think once you
see how it's done,

00:00:55.566 --> 00:00:58.006 A:middle
it's not so frightening
it's pretty easy

00:00:58.006 --> 00:01:00.226 A:middle
to do it's just an XML file.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:00.876 --> 00:01:02.826 A:middle
So today we're going
to be talking

00:01:02.826 --> 00:01:07.036 A:middle
about AppleScript Libraries
and what they can do for you.

00:01:07.966 --> 00:01:12.226 A:middle
Let's try click, welcome, today
it's AppleScript Libraries,

00:01:12.226 --> 00:01:16.626 A:middle
we covered that and we're
going to be learning

00:01:16.626 --> 00:01:20.716 A:middle
about what they are,
how you incorporate them

00:01:20.716 --> 00:01:23.896 A:middle
into your environment, how
you call them, how use them,

00:01:24.176 --> 00:01:28.406 A:middle
how you create them and
how you can deploy them.

00:01:28.606 --> 00:01:32.166 A:middle
So begin with, why
Libraries...those who were

00:01:32.166 --> 00:01:37.426 A:middle
at the first session understand
that I'm one of those kind

00:01:37.426 --> 00:01:44.046 A:middle
of people that is a code
maven, I have sampled routines

00:01:44.046 --> 00:01:47.266 A:middle
that do just about
everything and I have them all

00:01:47.266 --> 00:01:51.706 A:middle
over the place on my drives
and I'm very thankful now

00:01:51.706 --> 00:01:53.846 A:middle
that we have iCloud
support so I can keep them

00:01:53.846 --> 00:01:58.206 A:middle
in one central location
but I like to use routines

00:01:58.206 --> 00:02:02.926 A:middle
and handlers in my scripts quite
a bit instead of writing code

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:02.926 --> 00:02:05.206 A:middle
over and over, I like
just getting the routines

00:02:05.206 --> 00:02:07.606 A:middle
and handlers and pasting
them into my scripts.

00:02:07.606 --> 00:02:10.656 A:middle
So if you're like me and you
use the same routine over

00:02:10.656 --> 00:02:13.296 A:middle
and over you're going
to like Libraries,

00:02:13.416 --> 00:02:14.886 A:middle
they're going to
be useful for you.

00:02:15.716 --> 00:02:18.686 A:middle
Again if you are a person

00:02:18.686 --> 00:02:23.326 A:middle
that uses third party scripting
additions to find that command

00:02:23.326 --> 00:02:26.526 A:middle
that was missing in
AppleScript you're going

00:02:26.526 --> 00:02:28.426 A:middle
to like Libraries as well.

00:02:29.956 --> 00:02:34.116 A:middle
If you just want to be someone
that can simplify your scripts

00:02:34.116 --> 00:02:36.816 A:middle
if you want to take all
this complexity and routines

00:02:36.816 --> 00:02:41.096 A:middle
and handlers out of your scripts
and just have an easier way

00:02:41.246 --> 00:02:43.796 A:middle
to manage them and to be able

00:02:43.796 --> 00:02:46.386 A:middle
to call them globally throughout
your scripts you're going

00:02:46.386 --> 00:02:47.516 A:middle
to like Libraries.

00:02:47.816 --> 00:02:50.656 A:middle
It all started because you
know once I learned how

00:02:50.656 --> 00:02:54.556 A:middle
to create a subroutine or
handler I started using them

00:02:54.556 --> 00:02:57.816 A:middle
and I would put them in my
scripts and it worked very well

00:02:58.176 --> 00:03:01.056 A:middle
and then I would create
another one and then I would put

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:01.056 --> 00:03:04.866 A:middle
in in some of my scripts and
not in some of the other ones

00:03:04.866 --> 00:03:07.406 A:middle
and I would update one but
I didn't update the other

00:03:07.406 --> 00:03:08.776 A:middle
and then I added more routines

00:03:08.776 --> 00:03:10.676 A:middle
and then the next
thing you know it gets

00:03:10.676 --> 00:03:14.586 A:middle
to be this real big jumble
that you try to manage.

00:03:14.586 --> 00:03:18.416 A:middle
Well we're solving that
issue and those problems now

00:03:19.136 --> 00:03:21.706 A:middle
in Mavericks with
the introduction

00:03:21.706 --> 00:03:23.386 A:middle
of AppleScript Libraries.

00:03:24.516 --> 00:03:27.756 A:middle
They are a new plug in
architecture for AppleScript

00:03:28.216 --> 00:03:33.566 A:middle
that allows you to create
powerful collections of handlers

00:03:34.236 --> 00:03:39.296 A:middle
and tools yourself and deploy
them across your machinery.

00:03:40.226 --> 00:03:44.636 A:middle
In addition, they differ from
the standard scripting addition

00:03:44.846 --> 00:03:48.606 A:middle
that we're used to using all
the time in a couple ways.

00:03:48.606 --> 00:03:51.616 A:middle
First of all they can be written
in AppleScript, you don't have

00:03:51.646 --> 00:03:58.016 A:middle
to know C or C ++ in order to
create an AppleScript Library.

00:03:58.296 --> 00:04:01.756 A:middle
Because Libraries are
loaded by the script,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:02.106 --> 00:04:04.466 A:middle
the script is controlling
how they use

00:04:04.946 --> 00:04:08.886 A:middle
and that will help you
avoid terminology conflicts

00:04:08.886 --> 00:04:12.506 A:middle
or resource problems, all
of that kind of goes away

00:04:12.796 --> 00:04:17.005 A:middle
because the script is
loading the Library

00:04:17.005 --> 00:04:19.886 A:middle
and the Libraries
live within the space

00:04:19.886 --> 00:04:22.396 A:middle
of the application that's
executing the script.

00:04:23.616 --> 00:04:27.446 A:middle
Now AppleScript Libraries have
some extra abilities to help you

00:04:27.446 --> 00:04:29.936 A:middle
out and the first one
that's really important is

00:04:30.286 --> 00:04:33.476 A:middle
that they can take advantage
of AppleScript objective C.

00:04:34.146 --> 00:04:41.146 A:middle
AppleScript objective C exposes
the Cocoa classes to AppleScript

00:04:41.146 --> 00:04:45.176 A:middle
so things like NSString
become available to you

00:04:45.176 --> 00:04:48.886 A:middle
and all the methods from
that and the instants methods

00:04:48.886 --> 00:04:51.516 A:middle
from that now become
available for you to use

00:04:51.516 --> 00:04:55.356 A:middle
in your AppleScripts scripts
and your AppleScript Libraries.

00:04:56.246 --> 00:05:00.886 A:middle
In addition you can also have
your libraries publish their own

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:00.886 --> 00:05:05.126 A:middle
terminology which means
instead of you having

00:05:05.126 --> 00:05:09.906 A:middle
to remember a specific handler
name and a specific order

00:05:10.606 --> 00:05:13.186 A:middle
of indicators or
data pass throughs

00:05:13.186 --> 00:05:16.266 A:middle
or whatever you can actually
use English like terms

00:05:16.266 --> 00:05:20.546 A:middle
that you create that work for
you and have those be the way

00:05:20.546 --> 00:05:23.856 A:middle
that you call the
AppleScript Library

00:05:23.856 --> 00:05:26.026 A:middle
so the handlers within
the Library.

00:05:26.156 --> 00:05:28.616 A:middle
So it's very powerful
and in support

00:05:28.616 --> 00:05:31.036 A:middle
of that we've created a
couple new constructs,

00:05:31.036 --> 00:05:37.006 A:middle
the first is a Script Library
reference, a way to easily refer

00:05:37.006 --> 00:05:40.446 A:middle
to a Script Library that you
have installed on your computer.

00:05:41.046 --> 00:05:44.146 A:middle
You'll see how that differs
from the old load Script

00:05:44.146 --> 00:05:48.536 A:middle
that we all used to use
as a substitute for this.

00:05:49.156 --> 00:05:52.786 A:middle
Then finally we've
created a new construct

00:05:52.786 --> 00:05:56.326 A:middle
that is called the use
clause and it's a way

00:05:56.326 --> 00:06:01.106 A:middle
to import terminology and
to bring in dictionaries

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:01.186 --> 00:06:03.266 A:middle
and libraries into your script

00:06:03.266 --> 00:06:06.586 A:middle
and have them be available
globally throughout.

00:06:07.706 --> 00:06:09.076 A:middle
So let's take a look at this,

00:06:09.666 --> 00:06:15.066 A:middle
now in the old days before
this many of us have tried

00:06:15.066 --> 00:06:20.536 A:middle
to use the old script storing
techniques that we had available

00:06:20.536 --> 00:06:24.176 A:middle
through the scripting
addition of load script.

00:06:24.716 --> 00:06:29.026 A:middle
Now if you go to your library
pallet in the AppleScript editor

00:06:29.026 --> 00:06:31.246 A:middle
and you select standard
editions and you open

00:06:31.246 --> 00:06:34.936 A:middle
up the dictionary window for the
standard editions you have nine

00:06:34.936 --> 00:06:39.286 A:middle
suites in the dictionary and
one of those suites deals

00:06:39.286 --> 00:06:43.736 A:middle
with scripting commands and one
of those commands is load script

00:06:44.316 --> 00:06:47.996 A:middle
and here is the definition
for that, let's zoom that in.

00:06:48.726 --> 00:06:54.116 A:middle
Now this command was designed
for you to be able to point

00:06:54.116 --> 00:06:59.386 A:middle
at a specific script file,
load its contents into memory

00:06:59.386 --> 00:07:03.006 A:middle
and then talk to that
script file in memory

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:03.006 --> 00:07:04.486 A:middle
and have it do things for you.

00:07:05.006 --> 00:07:09.496 A:middle
But there are a couple
issues with using this

00:07:09.496 --> 00:07:11.456 A:middle
and here's an example script

00:07:11.456 --> 00:07:14.826 A:middle
that uses the load
script scripting edition.

00:07:15.436 --> 00:07:18.636 A:middle
You can see that the first
thing is you have to know

00:07:18.636 --> 00:07:23.816 A:middle
where the script that you are
using as a library exists,

00:07:23.816 --> 00:07:27.186 A:middle
where is it, you have to
have its exact location

00:07:27.606 --> 00:07:29.696 A:middle
and then once you've identified

00:07:29.696 --> 00:07:33.676 A:middle
where it is then you perform
this load script and store it

00:07:33.676 --> 00:07:38.836 A:middle
into a variable that represents
the contents of that script.

00:07:39.696 --> 00:07:42.656 A:middle
Then elsewhere in your
script you talk to that

00:07:42.656 --> 00:07:46.776 A:middle
and you call its handlers or
whatever handlers are available

00:07:46.776 --> 00:07:51.526 A:middle
within it and have it work but
this is a problem because first

00:07:51.526 --> 00:07:54.726 A:middle
of all it requires that you know
exactly where it is and if it's

00:07:54.726 --> 00:07:57.366 A:middle
on a different machine then
you have to develop way

00:07:57.846 --> 00:08:00.156 A:middle
to locate folders locally,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.446 --> 00:08:03.186 A:middle
regardless of how drives
are named and you have

00:08:03.246 --> 00:08:06.526 A:middle
to have error handlers to
make sure that they're there

00:08:06.526 --> 00:08:07.666 A:middle
and those kind of things

00:08:08.376 --> 00:08:14.066 A:middle
and then it requires explicit
loading, explicit loading,

00:08:14.466 --> 00:08:19.556 A:middle
explicit loading of the targeted
script file, you have to do that

00:08:20.636 --> 00:08:25.426 A:middle
and it also requires that
you address the handlers

00:08:25.426 --> 00:08:29.376 A:middle
from within the loaded
script file directly and pass

00:08:29.376 --> 00:08:30.766 A:middle
through information to them.

00:08:31.286 --> 00:08:34.025 A:middle
This means that there's
no custom terminology,

00:08:34.265 --> 00:08:36.506 A:middle
you have to remember
handler names,

00:08:36.756 --> 00:08:40.256 A:middle
you have to remember the order
of the various components

00:08:40.306 --> 00:08:44.536 A:middle
of the handler and there's
no access to the power

00:08:44.856 --> 00:08:48.706 A:middle
of AppleScript objective C and
the wonderful Cocoa Libraries

00:08:48.706 --> 00:08:50.836 A:middle
that are available
too on the computer.

00:08:51.456 --> 00:08:53.006 A:middle
So there are some issues

00:08:53.006 --> 00:08:55.466 A:middle
with using the load
script scripting edition

00:08:55.936 --> 00:08:58.036 A:middle
and we've addressed
a lot of those

00:08:58.036 --> 00:09:01.936 A:middle
with our AppleScript Libraries
so let's take a look at it.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:02.686 --> 00:09:04.826 A:middle
We're going to start
very simply;

00:09:04.826 --> 00:09:09.126 A:middle
I always like starting
exploring a new concept

00:09:09.456 --> 00:09:11.116 A:middle
in the most fundamental ways.

00:09:11.116 --> 00:09:14.176 A:middle
So we're going to look at
simple AppleScript Libraries,

00:09:14.406 --> 00:09:17.766 A:middle
you might never write
something this simple yourself

00:09:17.866 --> 00:09:20.046 A:middle
but by examining
this we're going

00:09:20.046 --> 00:09:22.906 A:middle
to learn the principles behind
this whole architecture,

00:09:23.006 --> 00:09:25.376 A:middle
is that okay, we'll
start simple...good.

00:09:25.736 --> 00:09:29.006 A:middle
Specifically we're going
to look at a problem

00:09:29.006 --> 00:09:30.306 A:middle
that exists all the time

00:09:30.636 --> 00:09:35.066 A:middle
of solving the missing command
problem, I want to be able

00:09:35.066 --> 00:09:38.836 A:middle
to do something but there's no
AppleScript command for that.

00:09:39.316 --> 00:09:42.836 A:middle
So by examining this little
issue we're going to learn how

00:09:42.836 --> 00:09:45.776 A:middle
to create and use
AppleScript Libraries.

00:09:46.776 --> 00:09:52.146 A:middle
Now for our example of a missing
command here is the new notes

00:09:52.146 --> 00:09:56.076 A:middle
application in Mavericks,
I'm going to select some text

00:09:56.076 --> 00:09:59.156 A:middle
in there and then right click
the selection so it brings

00:09:59.156 --> 00:10:00.976 A:middle
up the contextual menu.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:01.836 --> 00:10:03.646 A:middle
Now some of you might know

00:10:03.646 --> 00:10:08.346 A:middle
that for a couple system
releases now we implemented some

00:10:08.346 --> 00:10:12.216 A:middle
new text handling options

00:10:12.366 --> 00:10:16.536 A:middle
within the standard text
contextual menu and one

00:10:16.536 --> 00:10:20.816 A:middle
of them is transformations
where you have the option

00:10:20.816 --> 00:10:26.106 A:middle
to change the case of selected
text to upper case, lower case,

00:10:26.356 --> 00:10:30.606 A:middle
capitalize or that's
called word case sometimes

00:10:30.606 --> 00:10:32.636 A:middle
and you might find it
called that as well.

00:10:33.006 --> 00:10:37.386 A:middle
But this is a command that's
available on the contextual menu

00:10:38.006 --> 00:10:42.396 A:middle
but it's not available from
within AppleScript itself.

00:10:43.006 --> 00:10:46.646 A:middle
So what I want to do is
use this as an example

00:10:46.646 --> 00:10:52.016 A:middle
when we're creating our
simple library to begin with

00:10:52.766 --> 00:10:56.366 A:middle
and we're going to look
at being able to convert

00:10:56.366 --> 00:11:00.196 A:middle
to upper case transformation, so
we'll have something like how,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.196 --> 00:11:05.946 A:middle
now brown cow in lower case
transforms to how now brown cow

00:11:05.946 --> 00:11:10.206 A:middle
in upper case, we're going to
have a lower case transformation

00:11:10.506 --> 00:11:13.256 A:middle
and instead of capitalization
I'm just going

00:11:13.256 --> 00:11:15.276 A:middle
to call it a word
case transformation

00:11:15.486 --> 00:11:18.636 A:middle
where the first letter of
each word is capitalized

00:11:19.086 --> 00:11:21.956 A:middle
and this is what we're going
to use as our sample command.

00:11:22.026 --> 00:11:25.686 A:middle
We're going to look
at this in two types

00:11:25.776 --> 00:11:27.466 A:middle
of simple script libraries,

00:11:27.776 --> 00:11:32.276 A:middle
one where the library is written
entirely in native AppleScript

00:11:32.926 --> 00:11:36.736 A:middle
and two, where the library
is written using AppleScript

00:11:36.736 --> 00:11:37.736 A:middle
objective C.

00:11:38.506 --> 00:11:41.236 A:middle
So just to review
here we're going

00:11:41.236 --> 00:11:45.196 A:middle
to take this missing command of
transformed text and we're going

00:11:45.196 --> 00:11:47.506 A:middle
to use that and create
two simple libraries

00:11:47.506 --> 00:11:50.866 A:middle
to address the fact that's
it's not native in AppleScript.

00:11:50.866 --> 00:11:52.486 A:middle
We're going to create
one in AppleScript,

00:11:52.486 --> 00:11:55.606 A:middle
one in AppleScript
objective C, let's begin.

00:11:56.386 --> 00:12:01.576 A:middle
An AppleScript script
library, so it beings

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:01.576 --> 00:12:04.986 A:middle
with having a handler some
kind of AppleScript handler

00:12:04.986 --> 00:12:07.896 A:middle
and here I have one,
you'll notice that the name

00:12:07.896 --> 00:12:11.426 A:middle
of the handler is
change case of text,

00:12:11.476 --> 00:12:13.696 A:middle
we'll use this handler
throughout here

00:12:13.936 --> 00:12:19.046 A:middle
and it has two parameters,
one is the source text

00:12:19.046 --> 00:12:22.516 A:middle
or the what you want
to transform,

00:12:22.516 --> 00:12:24.226 A:middle
the text that you
want to transform

00:12:24.606 --> 00:12:28.106 A:middle
and the second is a case
indicator and this case

00:12:28.276 --> 00:12:32.306 A:middle
of this handler it's going
to a numeric value zero

00:12:32.306 --> 00:12:36.846 A:middle
or 1 that indicates whether
you want upper or lower case.

00:12:37.486 --> 00:12:41.736 A:middle
It's a simple AppleScript
based upon your case indicator,

00:12:41.736 --> 00:12:45.176 A:middle
it creates two comparison
lists and then iterate

00:12:45.176 --> 00:12:48.226 A:middle
through all the characters
in the past text

00:12:48.226 --> 00:12:51.276 A:middle
and matches whether
it's an iteration list

00:12:51.276 --> 00:12:55.106 A:middle
and then finally returns
the resulting string back

00:12:55.106 --> 00:12:56.966 A:middle
to the script itself.

00:12:57.536 --> 00:13:00.686 A:middle
Something simple right, now
we're going to take this

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.736 --> 00:13:03.476 A:middle
and make this and make
this into a library

00:13:03.756 --> 00:13:05.416 A:middle
and it's simplest
doing the following.

00:13:05.826 --> 00:13:10.156 A:middle
We're just going to take a blank
script in the AppleScript editor

00:13:10.536 --> 00:13:13.786 A:middle
and we're going to paste
the handler into this,

00:13:14.196 --> 00:13:17.666 A:middle
we're going to compile it
and then just click save

00:13:17.986 --> 00:13:21.736 A:middle
and we're going to save
it as a script file

00:13:22.286 --> 00:13:27.146 A:middle
and you'll notice we named it
AppleScript text transform is

00:13:27.146 --> 00:13:28.776 A:middle
the name of this little library.

00:13:29.196 --> 00:13:31.876 A:middle
Now libraries can
contain multiple handlers

00:13:32.076 --> 00:13:33.576 A:middle
but for our example
they're just going

00:13:33.576 --> 00:13:35.386 A:middle
to contain one handler, okay.

00:13:36.086 --> 00:13:41.846 A:middle
And we simply name the
library and then save it.

00:13:42.116 --> 00:13:44.766 A:middle
Next we install the
script library,

00:13:45.466 --> 00:13:47.526 A:middle
and the way that you
install it is you go

00:13:47.526 --> 00:13:50.606 A:middle
to your home library
folder and within

00:13:50.606 --> 00:13:54.886 A:middle
that library folder you create
a new folder called Script

00:13:55.036 --> 00:14:01.866 A:middle
Libraries and then you take your
newly saved AppleScript file

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:03.016 --> 00:14:06.726 A:middle
and you drag that into the
Script Libraries folders

00:14:07.806 --> 00:14:10.986 A:middle
and it becomes part of
the AppleScript system

00:14:10.986 --> 00:14:14.246 A:middle
on your computer, that's it,
it's now installed for you.

00:14:15.256 --> 00:14:18.906 A:middle
So how do you use the
AppleScript script library?

00:14:18.906 --> 00:14:22.566 A:middle
Now that we've created this
simple library with one handler

00:14:22.566 --> 00:14:26.186 A:middle
for transforming the case of
text here's how you use it.

00:14:27.416 --> 00:14:31.596 A:middle
We have a new construct in
AppleScript and it's a way

00:14:31.596 --> 00:14:34.816 A:middle
to identify easily
AppleScript Libraries.

00:14:35.106 --> 00:14:39.766 A:middle
So you no longer need to
point to a specific file

00:14:39.856 --> 00:14:42.856 A:middle
through a file reference
like you did with LoadScript

00:14:43.676 --> 00:14:48.516 A:middle
and you no longer need to
explicitly load the file

00:14:49.976 --> 00:14:53.426 A:middle
and all you need to do now is
you go into a blank script,

00:14:54.426 --> 00:14:58.696 A:middle
you type the word script
followed by the name

00:14:58.696 --> 00:15:02.966 A:middle
of your library and you notice
I left the name extension off,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:02.966 --> 00:15:04.666 A:middle
you don't need to have
the name extension there.

00:15:05.076 --> 00:15:09.866 A:middle
So script, AppleScript
transform and then

00:15:09.866 --> 00:15:15.596 A:middle
when I compile this you'll
notice that it formats

00:15:15.666 --> 00:15:22.106 A:middle
and this is now a
AppleScript Library reference,

00:15:22.466 --> 00:15:24.816 A:middle
it's a way to point
to that library,

00:15:24.816 --> 00:15:29.746 A:middle
it was automatically located on
your system and it's prepared

00:15:29.746 --> 00:15:33.726 A:middle
for use, it's ready to
go all you have to do

00:15:33.726 --> 00:15:36.806 A:middle
to address it is you can
place the verb tell before it

00:15:37.016 --> 00:15:40.696 A:middle
or in this case you could
enclose it within a tell block

00:15:41.196 --> 00:15:44.816 A:middle
and then refer to
one of the handlers

00:15:44.816 --> 00:15:46.876 A:middle
within that particular library.

00:15:47.466 --> 00:15:51.336 A:middle
So here I have the name of our
handler is change case of text,

00:15:51.336 --> 00:15:56.106 A:middle
I'm passing into the
handler how now brown cow

00:15:56.376 --> 00:16:00.326 A:middle
and I have a case indicator of
one meaning I want upper case.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.856 --> 00:16:05.126 A:middle
So I run my script, it
automatically gets processed

00:16:05.126 --> 00:16:06.786 A:middle
by your AppleScript library

00:16:06.786 --> 00:16:08.986 A:middle
and the results are
returned back to the script.

00:16:09.456 --> 00:16:13.026 A:middle
So that's the basic process

00:16:13.176 --> 00:16:17.936 A:middle
of creating a very simple
basic AppleScript Library.

00:16:18.676 --> 00:16:21.046 A:middle
So here's the routine
that we used,

00:16:21.546 --> 00:16:27.726 A:middle
it's a little subroutine now it
does convert case of some text

00:16:27.726 --> 00:16:30.146 A:middle
from upper to lower
and lower to upper

00:16:30.646 --> 00:16:34.756 A:middle
but it doesn't handle special
characters and it doesn't work

00:16:34.756 --> 00:16:36.426 A:middle
with multiple languages.

00:16:36.826 --> 00:16:40.626 A:middle
In order to have an
AppleScript handler to do all

00:16:40.626 --> 00:16:44.156 A:middle
that it might be as
long as I am tall

00:16:44.156 --> 00:16:48.486 A:middle
or a couple times past that, it
would be very complex to do all

00:16:48.486 --> 00:16:50.316 A:middle
that in native AppleScript.

00:16:50.706 --> 00:16:53.236 A:middle
So in this case we need
to turn to something

00:16:53.236 --> 00:16:56.046 A:middle
with a little bit more
power and we're going

00:16:56.046 --> 00:16:59.696 A:middle
to create our second library
example using the power

00:16:59.696 --> 00:17:01.786 A:middle
of AppleScript objective C.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:02.156 --> 00:17:04.796 A:middle
So this will be a
simple library written

00:17:04.796 --> 00:17:07.856 A:middle
in AppleScript objective C,
everybody with me so far?

00:17:08.786 --> 00:17:10.195 A:middle
Not so hard right, okay good.

00:17:11.766 --> 00:17:17.796 A:middle
Okay here's the same handler,
this time it's change case

00:17:17.796 --> 00:17:23.156 A:middle
of text and it gets two things
passed to it, numeric indicator,

00:17:23.156 --> 00:17:26.266 A:middle
I mean the source text that
we're going to transform

00:17:26.556 --> 00:17:29.216 A:middle
and a numeric indicator
indicating text.

00:17:29.266 --> 00:17:32.026 A:middle
But this time the body
of the handler is written

00:17:32.026 --> 00:17:35.266 A:middle
in AppleScript objective
C and the first thing

00:17:35.266 --> 00:17:38.646 A:middle
that the handler does
is convert the past

00:17:38.646 --> 00:17:45.146 A:middle
into a Cocoa string using NS
string method called string

00:17:45.146 --> 00:17:50.826 A:middle
with string, then based upon the
numeric indicator that's passed

00:17:50.826 --> 00:17:55.256 A:middle
through the numeric case
indicator it executes a method

00:17:55.256 --> 00:17:59.336 A:middle
on that instance, either upper
case string, lower case string

00:17:59.336 --> 00:18:00.656 A:middle
or capitalized string.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:01.536 --> 00:18:04.606 A:middle
Once that transforms
been applied and copied

00:18:04.606 --> 00:18:06.046 A:middle
into the variable next

00:18:06.046 --> 00:18:10.716 A:middle
to it adjusted string the
handler returns the adjusted

00:18:10.716 --> 00:18:15.766 A:middle
string back to the script
as text by just saying

00:18:15.766 --> 00:18:20.236 A:middle
as text in your coercion.

00:18:20.236 --> 00:18:23.016 A:middle
So this is the handler
that we're going to use

00:18:23.236 --> 00:18:24.986 A:middle
in our second example library.

00:18:25.706 --> 00:18:30.946 A:middle
We take a blank script
and we paste our handler,

00:18:30.946 --> 00:18:34.716 A:middle
the AppleScript objective C
handler into our script, we save

00:18:35.506 --> 00:18:39.946 A:middle
and in the sheet to save a
little bit of time I'm going

00:18:39.946 --> 00:18:42.036 A:middle
to save it into the
script libraries folder

00:18:42.036 --> 00:18:45.376 A:middle
that I already created instead
of dragging it in the finder.

00:18:45.546 --> 00:18:48.076 A:middle
You can if you...you
can drag if you want to

00:18:48.446 --> 00:18:50.596 A:middle
but for our purposes here
I'm just going to save it

00:18:50.596 --> 00:18:53.676 A:middle
into the newly created
script libraries folder.

00:18:54.516 --> 00:18:56.876 A:middle
Next I'm going to give
it a different name,

00:18:56.876 --> 00:19:01.696 A:middle
I'm going to call this one ASOC
text transform and ASOC stands

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:01.696 --> 00:19:03.426 A:middle
for AppleScript objective C.

00:19:04.676 --> 00:19:07.546 A:middle
Finally at the bottom
under format instead

00:19:07.546 --> 00:19:11.336 A:middle
of the standard script file
format we're going to choose

00:19:11.396 --> 00:19:13.796 A:middle
to save this as a script bundle

00:19:14.516 --> 00:19:16.666 A:middle
and you'll see why
in just a moment.

00:19:17.046 --> 00:19:23.406 A:middle
So we save our script and then
you'll notice once you've saved

00:19:23.406 --> 00:19:27.996 A:middle
it in a bundle format at the top
menu bar there's a new button

00:19:27.996 --> 00:19:32.106 A:middle
that becomes available and
what that button does is

00:19:32.106 --> 00:19:35.416 A:middle
when you toggle it, it
will show you the contents

00:19:35.606 --> 00:19:40.846 A:middle
of the script bundle so if I
click that a drawer is exposed

00:19:40.846 --> 00:19:42.426 A:middle
and this drawer contains a lot

00:19:42.426 --> 00:19:45.116 A:middle
of valuable information
about this bundle.

00:19:45.916 --> 00:19:50.256 A:middle
First of all it contains the
name of the script library,

00:19:50.256 --> 00:19:53.386 A:middle
it contains its bundle
identifier

00:19:53.906 --> 00:19:56.226 A:middle
where you can put
your developer domain

00:19:56.226 --> 00:19:57.546 A:middle
and name it whatever you like,

00:19:58.386 --> 00:20:02.506 A:middle
it contains a short version
number, a bundle version number,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:02.696 --> 00:20:07.646 A:middle
a copyright string, the
terminology file name

00:20:08.316 --> 00:20:12.946 A:middle
and a check box indicating
whether this library uses

00:20:12.946 --> 00:20:18.126 A:middle
AppleScript objective C, a
scroll area down at the bottom

00:20:18.126 --> 00:20:21.136 A:middle
that will display the contents
of your resource folder

00:20:21.636 --> 00:20:25.906 A:middle
and a little magic pop up menu
that does particular actions

00:20:25.906 --> 00:20:29.026 A:middle
with things that you've
selected in the resource folder.

00:20:29.436 --> 00:20:32.496 A:middle
So in this particular instance
there's only four things

00:20:32.496 --> 00:20:34.426 A:middle
that we're interested in.

00:20:35.046 --> 00:20:38.296 A:middle
They are...we're going to
start by adding the name

00:20:38.296 --> 00:20:44.416 A:middle
of our library, ASOC text
transform, in the name field,

00:20:44.796 --> 00:20:48.836 A:middle
we're going to give it our
developer domain identifier

00:20:48.836 --> 00:20:54.296 A:middle
so here my company is nighthawk
productions dot asoc dot text

00:20:54.296 --> 00:20:59.146 A:middle
dot transform and then we're
going to give a copyright string

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.006 --> 00:21:03.026 A:middle
and most importantly we're
going to check the check box

00:21:03.026 --> 00:21:07.516 A:middle
that says this library uses
AppleScript objective C.

00:21:07.656 --> 00:21:09.426 A:middle
Those are the four
things we want to do

00:21:09.426 --> 00:21:10.756 A:middle
since we're creating a library

00:21:10.756 --> 00:21:13.126 A:middle
that uses AppleScript
objective C.

00:21:14.566 --> 00:21:18.296 A:middle
Once we've done that then
I can close the drawer,

00:21:18.896 --> 00:21:24.256 A:middle
save the script file, now
I've already installed this,

00:21:24.256 --> 00:21:26.876 A:middle
remember I've saved it into
the script libraries folder,

00:21:26.876 --> 00:21:28.876 A:middle
if you didn't you can drag it

00:21:28.876 --> 00:21:31.476 A:middle
in yourself before
doing the next step.

00:21:32.066 --> 00:21:33.906 A:middle
Now that I've had this library

00:21:33.906 --> 00:21:38.886 A:middle
and it's installed how do
you use it, well the same way

00:21:38.886 --> 00:21:40.916 A:middle
that you used the
earlier library,

00:21:40.916 --> 00:21:43.126 A:middle
the first thing you do is
you type the word script,

00:21:43.566 --> 00:21:45.676 A:middle
followed by the name
of the library,

00:21:45.676 --> 00:21:49.746 A:middle
in this case it's ASOC text
transform, you compile it

00:21:49.746 --> 00:21:52.966 A:middle
and you get your
AppleScript library reference,

00:21:53.046 --> 00:21:58.466 A:middle
identifier so this indicates
to me because it's complied

00:21:58.836 --> 00:22:03.026 A:middle
that the script has located the
library, prepared it for use,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:03.026 --> 00:22:07.136 A:middle
it's ready to go, I can
encase it within a tell block

00:22:07.136 --> 00:22:12.156 A:middle
like I did before, I can
refer to the handler within,

00:22:12.156 --> 00:22:14.556 A:middle
I can pass text into the handler

00:22:14.776 --> 00:22:18.346 A:middle
and my first indicator is
the...case indicator is the

00:22:18.346 --> 00:22:19.316 A:middle
number zero.

00:22:19.906 --> 00:22:24.676 A:middle
So I run it and the result
will be all upper case how now

00:22:24.676 --> 00:22:25.696 A:middle
brown cow.

00:22:26.606 --> 00:22:30.286 A:middle
Let's iterate that case
indicator to the number one,

00:22:30.806 --> 00:22:35.086 A:middle
run it again wa-la [phonetic]
I have all lower case,

00:22:35.476 --> 00:22:38.476 A:middle
let's iterate it again
to the number two

00:22:38.896 --> 00:22:42.446 A:middle
and I will get word case
where the first character

00:22:42.446 --> 00:22:44.316 A:middle
of every word is capitalized.

00:22:44.636 --> 00:22:51.016 A:middle
So this handler is much better
than the earlier handler

00:22:51.016 --> 00:22:52.836 A:middle
that was just written
in AppleScript,

00:22:53.266 --> 00:22:57.146 A:middle
it really has a lot more power
and ability because it taps

00:22:57.146 --> 00:23:00.536 A:middle
into the power of the
Cocoa class NSString

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.536 --> 00:23:01.906 A:middle
to do all the heavy lifting.

00:23:03.036 --> 00:23:04.976 A:middle
Now this works by converting

00:23:04.976 --> 00:23:07.956 A:middle
to all the case conversions
we need,

00:23:08.386 --> 00:23:10.656 A:middle
it works with special
characters and it works

00:23:10.656 --> 00:23:12.106 A:middle
with multiple languages.

00:23:12.626 --> 00:23:18.096 A:middle
So this is a very useful one and
to demo this I'm going to bring

00:23:18.096 --> 00:23:21.976 A:middle
up my friend Chris Page from
the AppleScript team, thank you.

00:23:22.516 --> 00:23:26.556 A:middle
[ Applause ]

00:23:27.056 --> 00:23:28.986 A:middle
&gt;&gt; Now this is a script
that Sal showed you earlier

00:23:28.986 --> 00:23:32.606 A:middle
and it has a function that
changes the case of some text

00:23:32.606 --> 00:23:36.966 A:middle
and just a trivial example of
using that and I'm going to run

00:23:36.966 --> 00:23:39.766 A:middle
that script and we can
see the result down here.

00:23:40.026 --> 00:23:41.746 A:middle
We converted this
string to upper case.

00:23:42.326 --> 00:23:44.506 A:middle
So just very quickly I'm going

00:23:44.506 --> 00:23:47.446 A:middle
to give you the quick run
through, this is what happens

00:23:47.446 --> 00:23:48.796 A:middle
when you already
know how to do this.

00:23:48.796 --> 00:23:51.826 A:middle
I'm going to take this
function, I'm going to copy it

00:23:51.826 --> 00:23:56.966 A:middle
into a new script and
I'm going to save it

00:23:57.236 --> 00:23:59.556 A:middle
in the script libraries
folder and the slowest part

00:23:59.556 --> 00:24:00.756 A:middle
of this is giving it a name,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:00.756 --> 00:24:07.016 A:middle
I'm going to call it AppleScript
change case and we're done,

00:24:08.076 --> 00:24:09.066 A:middle
we've now created a library.

00:24:09.706 --> 00:24:13.516 A:middle
Now I'm going to run through
that a little bit slower

00:24:13.516 --> 00:24:15.686 A:middle
for people who are
trying to follow along,

00:24:16.636 --> 00:24:23.316 A:middle
I'm going to copy this
text, create a new script,

00:24:23.956 --> 00:24:26.926 A:middle
paste it in and save it.

00:24:28.896 --> 00:24:32.456 A:middle
Now this is...if this is
the first time doing this

00:24:32.456 --> 00:24:34.826 A:middle
and you don't have the script
libraries folder here's a little

00:24:34.826 --> 00:24:41.416 A:middle
trick you can press Command
Shift G to bring up this sheet

00:24:41.416 --> 00:24:43.566 A:middle
that lets you navigate
to the libraries folder

00:24:43.566 --> 00:24:46.186 A:middle
in your home directory because
the library folder is normally

00:24:46.186 --> 00:24:49.636 A:middle
hidden from users but as a
developer you need to know this

00:24:49.636 --> 00:24:51.176 A:middle
to be able to get
to that folder.

00:24:51.176 --> 00:24:53.006 A:middle
You can also get
there in finder.

00:24:54.036 --> 00:24:58.066 A:middle
Then you would use the New
Folder button to create

00:24:58.066 --> 00:25:02.176 A:middle
that folder and then you
could save the script

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:02.606 --> 00:25:06.426 A:middle
in there and that's it.

00:25:06.426 --> 00:25:10.856 A:middle
I'm going to close
this and now I'm going

00:25:10.856 --> 00:25:17.276 A:middle
to take the client code that
uses this library I'm going

00:25:17.276 --> 00:25:21.426 A:middle
to copy it out of there
and create a new script,

00:25:21.806 --> 00:25:24.256 A:middle
I'm going to close this
one so it's out of our way

00:25:24.256 --> 00:25:27.036 A:middle
and paste the code in.

00:25:27.116 --> 00:25:29.516 A:middle
Now I'm going to show you
how to use the library

00:25:30.076 --> 00:25:33.046 A:middle
if you were following
along earlier,

00:25:33.046 --> 00:25:34.196 A:middle
this might look very familiar,

00:25:34.196 --> 00:25:43.206 A:middle
I'm going to say tell script
AppleScript, change case

00:25:43.236 --> 00:25:49.756 A:middle
and I'm going to compile it
and you can see that it works.

00:25:50.396 --> 00:25:52.266 A:middle
I manage not to misspell
the library name.

00:25:52.446 --> 00:25:57.596 A:middle
If I had just to show you,
if I put an x into the name

00:25:57.596 --> 00:25:58.846 A:middle
which means it's not
going to be found,

00:25:58.846 --> 00:26:02.266 A:middle
when we try to compile it
we get an error that says

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:02.266 --> 00:26:04.646 A:middle
that it couldn't find that
script so you'll know early

00:26:04.646 --> 00:26:08.986 A:middle
on during script development
whether you've referred

00:26:08.986 --> 00:26:13.276 A:middle
to a library correctly and when
I run it we get the same result,

00:26:13.336 --> 00:26:15.326 A:middle
how now brown cow
is in upper case.

00:26:16.886 --> 00:26:20.246 A:middle
That is the simplest case of
using the script library just

00:26:20.246 --> 00:26:22.916 A:middle
to reuse a function
you've been using

00:26:22.916 --> 00:26:24.786 A:middle
in your scripts up till now.

00:26:27.096 --> 00:26:34.186 A:middle
Now we want to take advantage
of AppleScript objective C

00:26:34.186 --> 00:26:36.026 A:middle
to do more than we can
do with AppleScript,

00:26:37.416 --> 00:26:45.226 A:middle
if I take this string

00:26:45.886 --> 00:26:52.026 A:middle
and introduce some accented
characters and run you can see

00:26:52.456 --> 00:26:53.966 A:middle
down here in the results

00:26:54.116 --> 00:26:57.876 A:middle
that the accented o's did not
get converted to upper case.

00:26:58.636 --> 00:27:02.016 A:middle
That's because AppleScript
doesn't have native support

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:02.076 --> 00:27:04.926 A:middle
for doing case changes and
it doesn't...you would have

00:27:04.926 --> 00:27:08.116 A:middle
to write a very extensive script
to handle all the characters

00:27:08.116 --> 00:27:13.586 A:middle
in Unicode but the foundation
framework that's part

00:27:13.586 --> 00:27:18.126 A:middle
of Cocoa has in a string
class that has a rich variety

00:27:18.126 --> 00:27:19.946 A:middle
of text manipulation functions,

00:27:20.756 --> 00:27:22.916 A:middle
several interesting
ones for changing case.

00:27:23.206 --> 00:27:24.846 A:middle
So we're going to
take advantage of that

00:27:25.476 --> 00:27:28.666 A:middle
in an AppleScript objective
C version of the library

00:27:28.666 --> 00:27:29.866 A:middle
that we already created.

00:27:30.436 --> 00:27:38.446 A:middle
I'm going to create a
new script and save it

00:27:38.716 --> 00:27:46.176 A:middle
in script libraries folder
again, this time I'm going

00:27:46.516 --> 00:27:50.466 A:middle
to name it ASOC change case.

00:27:51.006 --> 00:27:53.116 A:middle
ASOC is a short hand
we sometimes use

00:27:53.116 --> 00:27:57.206 A:middle
for AppleScript objective C
and as Sal mentioned I'll need

00:27:57.206 --> 00:27:58.356 A:middle
to save it as a script bundle

00:27:58.356 --> 00:28:00.306 A:middle
but that's a pretty
easy thing to do.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:01.336 --> 00:28:03.356 A:middle
I'm going to open
the bundle drawer

00:28:03.866 --> 00:28:06.546 A:middle
and update...well the
simplest thing that I have

00:28:06.546 --> 00:28:10.766 A:middle
to do here is enable
AppleScript objective C library,

00:28:11.516 --> 00:28:13.936 A:middle
that makes ASOC available
when this code is running

00:28:15.156 --> 00:28:18.046 A:middle
and while I'm here I'm going
to fill out these other fields.

00:28:18.406 --> 00:28:20.096 A:middle
These fields set values inside

00:28:20.096 --> 00:28:23.126 A:middle
of the info P list file inside
the bundle, there's a lot

00:28:23.126 --> 00:28:25.026 A:middle
of documentation
about how do that

00:28:25.026 --> 00:28:27.976 A:middle
and how the various fields work
if you're unfamiliar with them

00:28:28.766 --> 00:28:32.476 A:middle
and I'm going to fill in a
couple pieces of information,

00:28:33.466 --> 00:28:42.706 A:middle
I've got my...the name, ASOC
change case and I'm going

00:28:42.706 --> 00:28:46.406 A:middle
to put my bundle
identifier in here

00:28:47.806 --> 00:28:51.026 A:middle
which I mistyped...let
me try it again.

00:28:51.596 --> 00:28:57.166 A:middle
Okay the version number default
is 1.0, we highly recommend

00:28:57.166 --> 00:28:59.516 A:middle
that you take advantage
of version numbers

00:28:59.516 --> 00:29:02.516 A:middle
because when you start
distributing and reusing

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:02.516 --> 00:29:05.056 A:middle
and updating libraries you
can use it to distinguish

00:29:05.056 --> 00:29:06.286 A:middle
which version you're
talking about.

00:29:06.286 --> 00:29:07.986 A:middle
I'm going to show you
later there's a way for you

00:29:07.986 --> 00:29:13.436 A:middle
to have your script check
the version to make sure

00:29:13.436 --> 00:29:16.526 A:middle
that it's new enough
for your client script

00:29:17.756 --> 00:29:20.486 A:middle
and I'll put a copyright
notice in here.

00:29:24.116 --> 00:29:28.166 A:middle
But again all we really need
to do was click this check box,

00:29:29.056 --> 00:29:32.946 A:middle
let me put that script aside
for a moment and now I'm going

00:29:32.946 --> 00:29:37.606 A:middle
to put in the AppleScript
version of our library code.

00:29:37.996 --> 00:29:42.376 A:middle
This is essentially the same
function, we haven't changed

00:29:42.376 --> 00:29:44.966 A:middle
that we're just changing
the implementation,

00:29:45.316 --> 00:29:49.086 A:middle
like Sal mentioned earlier
we construct an NSString

00:29:49.386 --> 00:29:53.836 A:middle
from our AppleScript string,
we call the appropriate method

00:29:54.516 --> 00:29:56.486 A:middle
of NSString to do the
capitalization we want

00:29:56.486 --> 00:29:59.056 A:middle
and then we return it
and convert it back

00:29:59.056 --> 00:30:00.276 A:middle
to an AppleScript string.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:05.696 --> 00:30:10.856 A:middle
All right so that's it we've
created an AppleScript objective

00:30:10.926 --> 00:30:14.006 A:middle
C version of the library
and now let's use it.

00:30:14.456 --> 00:30:18.736 A:middle
I'm going to go back to my
client script and I'm just going

00:30:18.736 --> 00:30:26.266 A:middle
to change the name to match
our new library and I'm going

00:30:26.266 --> 00:30:31.916 A:middle
to run it and this time you
can see in the result pane

00:30:31.916 --> 00:30:37.876 A:middle
that all the accented o's have
been converted to upper case.

00:30:37.936 --> 00:30:40.036 A:middle
Furthermore we now
have a third options

00:30:40.036 --> 00:30:41.956 A:middle
because the NSString
class has a method

00:30:42.006 --> 00:30:46.026 A:middle
for doing capitalization,
it capitalizes every word

00:30:46.026 --> 00:30:48.686 A:middle
in your string, we can put
a different value in here

00:30:48.686 --> 00:30:54.046 A:middle
and run it and so now we've
extended...now we get the word

00:30:54.436 --> 00:30:55.986 A:middle
capitalized version
of the string.

00:30:57.296 --> 00:31:00.196 A:middle
So you can see that using
AppleScript objective C we can

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.196 --> 00:31:02.136 A:middle
go beyond what we
can do in AppleScript

00:31:02.446 --> 00:31:05.136 A:middle
and we can replace large
chunks of AppleScript

00:31:05.136 --> 00:31:06.756 A:middle
that might have had to do
a lot of their own work

00:31:07.046 --> 00:31:11.386 A:middle
with existing framework
functions that are available

00:31:11.386 --> 00:31:13.076 A:middle
on the system to every
other application.

00:31:13.076 --> 00:31:14.506 A:middle
Now you can use them
in libraries

00:31:14.956 --> 00:31:18.226 A:middle
which means you can use them in
your scripts and script applets.

00:31:19.706 --> 00:31:22.116 A:middle
Just briefly I want to
mention that when we look

00:31:22.116 --> 00:31:25.156 A:middle
up libraries we search
in a number of locations,

00:31:25.156 --> 00:31:28.586 A:middle
Sal will mention those later
and we start by looking

00:31:28.586 --> 00:31:31.196 A:middle
in the current applications
bundle which means

00:31:31.196 --> 00:31:34.146 A:middle
that you can conveniently
distribute an applet

00:31:34.476 --> 00:31:36.876 A:middle
that contains libraries that
you want to bundle with it

00:31:37.186 --> 00:31:41.986 A:middle
and the user can just make
that...put that application

00:31:41.986 --> 00:31:43.476 A:middle
on the machine and
run it without having

00:31:43.476 --> 00:31:45.476 A:middle
to install libraries
anywhere before use.

00:31:46.131 --> 00:31:48.131 A:middle
[ Applause ]

00:31:48.246 --> 00:31:49.026 A:middle
Okay thank you.

00:31:51.256 --> 00:31:53.656 A:middle
&gt;&gt; So you can see that
it's not just magic

00:31:53.656 --> 00:31:56.616 A:middle
on a slide you can actually
do this stuff live, right,

00:31:57.746 --> 00:32:02.076 A:middle
and so we were looking at the
example that Chris had there

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:02.796 --> 00:32:05.376 A:middle
and if we look at the syntax
that was involved here,

00:32:05.376 --> 00:32:12.226 A:middle
we have tell the script library
identifier to call this method,

00:32:12.806 --> 00:32:17.496 A:middle
now the short coming in this
whole process or the got cha

00:32:17.496 --> 00:32:21.086 A:middle
in all this process is that
if you have a lot of libraries

00:32:21.086 --> 00:32:25.696 A:middle
or you have complex libraries,
you have to remember the names

00:32:25.696 --> 00:32:27.866 A:middle
of all these different
handlers and you have

00:32:27.896 --> 00:32:30.756 A:middle
to remember what parameters
are passed through.

00:32:31.116 --> 00:32:34.206 A:middle
It would be so much nicer
if I could just...instead

00:32:34.206 --> 00:32:37.876 A:middle
of saying change case
of text like that,

00:32:37.876 --> 00:32:40.206 A:middle
if I could just use some
words I could remember

00:32:40.206 --> 00:32:44.346 A:middle
like transform text and
then give it the text

00:32:44.346 --> 00:32:47.986 A:middle
as a direct parameter to
and then use some word

00:32:47.986 --> 00:32:51.266 A:middle
like upper case instead
of a number or lower case

00:32:51.266 --> 00:32:56.006 A:middle
or word case, I really
want to be able to say this

00:32:56.006 --> 00:33:00.756 A:middle
because I can remember this,
remembering the names of 150

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.756 --> 00:33:04.856 A:middle
or 200 different handlers that's
really a pain, I want to be able

00:33:04.856 --> 00:33:06.946 A:middle
to use this kind of terminology.

00:33:07.476 --> 00:33:11.916 A:middle
So this is what we want to do
as we examine the next thing

00:33:12.196 --> 00:33:14.646 A:middle
of creating libraries
with terminology.

00:33:15.646 --> 00:33:19.186 A:middle
Step one is you start
with the dictionary.

00:33:19.876 --> 00:33:24.446 A:middle
So here is an example
dictionary of a script library,

00:33:24.756 --> 00:33:28.776 A:middle
it's not a really complex one
but it's quite functional,

00:33:28.936 --> 00:33:30.446 A:middle
it has one suite in it,

00:33:30.446 --> 00:33:34.276 A:middle
it's called AppleScript text
utilities, there's two commands

00:33:34.276 --> 00:33:39.796 A:middle
in the suite, one is for
transforming text, the other is

00:33:40.036 --> 00:33:42.316 A:middle
for replacing strings in text.

00:33:42.706 --> 00:33:46.506 A:middle
You can see the definition for
the suite and the definition

00:33:46.506 --> 00:33:49.706 A:middle
for each one of the
particular commands.

00:33:50.296 --> 00:33:53.026 A:middle
This is actually a file;

00:33:54.276 --> 00:33:57.516 A:middle
scripting dictionaries
are actually files

00:33:57.516 --> 00:34:01.516 A:middle
that get displayed within the
AppleScript editor application.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:01.886 --> 00:34:08.235 A:middle
These scripting dictionary files
are called sdefs which stands

00:34:08.235 --> 00:34:12.356 A:middle
for scripting dictionary
and they are placed inside

00:34:12.356 --> 00:34:15.396 A:middle
of the bundle of your
AppleScript library

00:34:16.176 --> 00:34:19.775 A:middle
so for the first time ever
today we're going to look at how

00:34:19.775 --> 00:34:23.446 A:middle
to create an sdef or a
scripting definition file

00:34:23.706 --> 00:34:25.866 A:middle
or just call the
scripting dictionary.

00:34:26.505 --> 00:34:29.226 A:middle
Now these are XML
based documents,

00:34:29.266 --> 00:34:31.856 A:middle
they have a name
extension of .sdef

00:34:32.795 --> 00:34:36.426 A:middle
and they define the
various scripting elements

00:34:36.426 --> 00:34:38.746 A:middle
that are part of your library.

00:34:38.795 --> 00:34:44.346 A:middle
For example a suite or a command
that might have parameters

00:34:44.346 --> 00:34:46.976 A:middle
and it might also
use enumerations

00:34:47.476 --> 00:34:50.306 A:middle
in the command as well.

00:34:50.746 --> 00:34:54.376 A:middle
In addition you can
include documentation

00:34:54.376 --> 00:34:57.386 A:middle
in your scripting dictionary
so that your customer

00:34:57.576 --> 00:35:00.346 A:middle
or you can actually
see an example script

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:00.346 --> 00:35:02.286 A:middle
that uses the terminology.

00:35:03.066 --> 00:35:04.826 A:middle
So let's look at
how this is done.

00:35:05.776 --> 00:35:12.416 A:middle
This is a scripting dictionary
file, this is an sdef.

00:35:12.466 --> 00:35:16.616 A:middle
It's an empty sdef but it
is a fully formed empty sdef

00:35:17.826 --> 00:35:20.656 A:middle
and you can edit this
with you know any

00:35:20.656 --> 00:35:23.016 A:middle
of the great applications
we have out there

00:35:23.166 --> 00:35:26.396 A:middle
that can edit XML documents.

00:35:27.186 --> 00:35:33.216 A:middle
We're going to use this when
we define our terminology

00:35:33.216 --> 00:35:35.066 A:middle
for an AppleScript dictionary.

00:35:35.586 --> 00:35:38.916 A:middle
The first line is
an XML declaration,

00:35:38.916 --> 00:35:41.946 A:middle
it's a standard declaration
used by every XML file.

00:35:42.946 --> 00:35:48.246 A:middle
Next becomes a reference
to the DTD

00:35:48.246 --> 00:35:50.346 A:middle
or document type declaration.

00:35:50.916 --> 00:35:55.176 A:middle
This is just boiler plate
stuff, it points to a folder

00:35:55.176 --> 00:35:58.936 A:middle
in your system folder that
contains the master sdef file

00:35:58.936 --> 00:36:01.976 A:middle
that tells the system how
an sdef file is supposed

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:01.976 --> 00:36:02.546 A:middle
to be read.

00:36:03.196 --> 00:36:08.086 A:middle
Then finally there's a
pairing of tags for dictionary,

00:36:08.086 --> 00:36:12.326 A:middle
it's an open and close tag
for dictionary and we're going

00:36:12.326 --> 00:36:17.116 A:middle
to use this as our template for
creating a dictionary that works

00:36:17.116 --> 00:36:21.466 A:middle
with this command, transform
text how now brown cow

00:36:21.466 --> 00:36:22.416 A:middle
to upper case.

00:36:22.416 --> 00:36:25.156 A:middle
So I'm just going to leave that
on the bottom of the screen

00:36:25.156 --> 00:36:28.596 A:middle
as we do this so we can
keep in mind how this works.

00:36:28.596 --> 00:36:32.506 A:middle
Are you ready to go...here we
go, so the first thing I'm going

00:36:32.506 --> 00:36:37.896 A:middle
to do is insert within the
dictionary tags a new set

00:36:37.896 --> 00:36:41.646 A:middle
of tags called suite, I'm
going to create a script suite.

00:36:42.266 --> 00:36:47.016 A:middle
The opening tag to the script
suite has a couple parameters,

00:36:47.356 --> 00:36:50.966 A:middle
one is the name, I'm going
to call it text utilities

00:36:51.386 --> 00:36:53.926 A:middle
and a description, I
can give a description

00:36:54.566 --> 00:36:59.576 A:middle
and then a four character
code, Apple reserves the use

00:36:59.676 --> 00:37:03.176 A:middle
of four character codes
that are all lower case.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:03.666 --> 00:37:07.346 A:middle
So those are used by Apple
applications like definder

00:37:07.346 --> 00:37:11.386 A:middle
to define their objects, you're
welcome to use any combination

00:37:11.386 --> 00:37:14.636 A:middle
of upper case and lower case
letters that you want that work

00:37:14.636 --> 00:37:17.966 A:middle
for you, in this case I
have four upper case letters

00:37:18.236 --> 00:37:23.236 A:middle
that I'm using for the four
character code for my suite.

00:37:23.686 --> 00:37:27.036 A:middle
Next I'm going to open up
this suite and I'm going

00:37:27.036 --> 00:37:31.776 A:middle
to insert a command, I want to
put a command in my script suite

00:37:32.406 --> 00:37:34.126 A:middle
and the opening tag

00:37:34.126 --> 00:37:39.676 A:middle
of the command tag pairing
has a couple of attributes.

00:37:40.116 --> 00:37:43.716 A:middle
The first is the name, that's
the name of the command

00:37:44.166 --> 00:37:46.756 A:middle
in this case it's
transform text,

00:37:47.046 --> 00:37:50.096 A:middle
so I want that to be
the name of the command,

00:37:50.096 --> 00:37:52.046 A:middle
that's what I'm going
to remember in my brain

00:37:52.046 --> 00:37:57.326 A:middle
when I write my scripts and
it gets and 8 character code,

00:37:57.486 --> 00:38:00.336 A:middle
commands are the only thing
that gets this 8 character code

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:00.896 --> 00:38:02.206 A:middle
and the reason it does is

00:38:02.236 --> 00:38:06.466 A:middle
because the first four
characters are usually the code

00:38:06.466 --> 00:38:09.686 A:middle
of the suite that the
command belongs to followed

00:38:09.686 --> 00:38:13.556 A:middle
by an additional four characters
so that's what I did here.

00:38:14.886 --> 00:38:18.606 A:middle
Next we're going to open up the
command pairing and we're going

00:38:18.606 --> 00:38:20.876 A:middle
to insert a direct
parameter tag.

00:38:21.266 --> 00:38:25.926 A:middle
Now the direct parameter is the
object that we're addressing

00:38:25.926 --> 00:38:27.536 A:middle
in this case the text.

00:38:27.786 --> 00:38:32.256 A:middle
So it has a couple of
attributes in this tag,

00:38:32.826 --> 00:38:37.756 A:middle
the first is the kind of data,
in this case type is text

00:38:38.026 --> 00:38:41.096 A:middle
and then the description,
the text to transform.

00:38:41.626 --> 00:38:44.036 A:middle
There's no code necessary

00:38:44.036 --> 00:38:47.096 A:middle
because this is the direct
parameter of my command.

00:38:48.106 --> 00:38:52.916 A:middle
Once I've done that now I can
continue defining my...the scope

00:38:52.916 --> 00:38:56.436 A:middle
of my command by addressing
the second parameter here,

00:38:56.806 --> 00:39:00.906 A:middle
so I insert a parameter
tag in my command pairing

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:01.566 --> 00:39:04.236 A:middle
and this one gets
the name of two,

00:39:04.536 --> 00:39:06.386 A:middle
it gets a four character code

00:39:07.026 --> 00:39:10.846 A:middle
and under type I
have case conversion.

00:39:11.676 --> 00:39:16.686 A:middle
Now case conversion is not
a data type or anything

00:39:16.686 --> 00:39:20.246 A:middle
in particular it happens
to be the name of the set

00:39:20.246 --> 00:39:22.936 A:middle
of enumerations that
I'm going to be using,

00:39:22.976 --> 00:39:27.996 A:middle
I'm going to create another,
another pairing later in my sdef

00:39:27.996 --> 00:39:31.896 A:middle
that will hold the enumerations
like upper case, lower case,

00:39:31.896 --> 00:39:34.876 A:middle
word case so for right
now I'm just going to type

00:39:34.916 --> 00:39:38.766 A:middle
in case conversion
and then that's it.

00:39:38.936 --> 00:39:41.406 A:middle
That's my basic command
tag right there.

00:39:42.376 --> 00:39:47.866 A:middle
After that I'll insert a pairing
for enumeration and this is

00:39:47.866 --> 00:39:52.406 A:middle
where I will list the various
enumerators like upper case,

00:39:52.406 --> 00:39:56.296 A:middle
word case, it gets a
couple of attributes,

00:39:56.396 --> 00:40:00.816 A:middle
the most important being its
name has to match the type

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:00.816 --> 00:40:05.506 A:middle
that you just called in the
previous command so the type

00:40:05.876 --> 00:40:10.786 A:middle
for the parameter in the command
has to match the name of the set

00:40:10.786 --> 00:40:12.886 A:middle
of enumerations that
we're going to use

00:40:13.216 --> 00:40:16.356 A:middle
and it also gets its
own four character code.

00:40:17.186 --> 00:40:22.556 A:middle
Once I've created the
enumeration set I can insert my

00:40:22.556 --> 00:40:25.856 A:middle
first enumerator, it gets
a couple of parameters,

00:40:25.946 --> 00:40:27.876 A:middle
it's name is going
to be upper case,

00:40:28.366 --> 00:40:30.076 A:middle
it's gets a four character code

00:40:30.296 --> 00:40:34.156 A:middle
and then we can insert the other
two enumerators, lower case,

00:40:34.206 --> 00:40:37.406 A:middle
word case, each with its
own four character code.

00:40:37.846 --> 00:40:41.716 A:middle
That's the sdef that will
define the use of this command,

00:40:41.936 --> 00:40:43.496 A:middle
that's a fully formed

00:40:43.746 --> 00:40:49.586 A:middle
and correct scripting definition
file for having a single suite

00:40:49.586 --> 00:40:54.456 A:middle
with a single command that is
transform text direct parameter

00:40:54.456 --> 00:40:58.306 A:middle
to enumerator upper case,
lower case, word case.

00:40:58.606 --> 00:40:59.726 A:middle
This is what it looks like,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:00.116 --> 00:41:02.656 A:middle
if you saved this you
could just stop there

00:41:03.126 --> 00:41:05.876 A:middle
but you can do a little
bit of extra and I suggest

00:41:05.876 --> 00:41:07.746 A:middle
that you make that effort.

00:41:08.346 --> 00:41:09.586 A:middle
We're going to insert

00:41:09.586 --> 00:41:14.556 A:middle
in the command pairing a
documentation tag, an open

00:41:14.556 --> 00:41:17.826 A:middle
and closing documentation
tag and this allows you

00:41:17.826 --> 00:41:20.786 A:middle
to put information in
there about the command

00:41:21.196 --> 00:41:24.656 A:middle
so you can help somebody out
who's reading your dictionary,

00:41:24.656 --> 00:41:27.286 A:middle
you can tell them hey this
command is used usually

00:41:27.286 --> 00:41:31.756 A:middle
for this, this is how you
say it and you'll notice

00:41:31.756 --> 00:41:36.666 A:middle
that I've included a pair of 8
opening and closing HTML tags

00:41:36.666 --> 00:41:40.346 A:middle
in there and that's because
the dictionary viewer

00:41:40.346 --> 00:41:44.926 A:middle
in the AppleScript editor used
HTML to display the formatting

00:41:44.926 --> 00:41:48.006 A:middle
and the color of the
information in its window.

00:41:48.316 --> 00:41:53.446 A:middle
So that means that I can then
take some HTML and put it

00:41:53.446 --> 00:41:55.786 A:middle
into my documentation.

00:41:56.406 --> 00:42:00.516 A:middle
What I like to do myself is
always have an example script

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:00.516 --> 00:42:02.366 A:middle
of how to call the command.

00:42:02.696 --> 00:42:04.976 A:middle
That's what I did
here, I have an example

00:42:04.976 --> 00:42:08.746 A:middle
that says transform text how
now brown cow to upper case.

00:42:08.816 --> 00:42:12.366 A:middle
So no matter what when the
user looks at the dictionary

00:42:12.366 --> 00:42:15.256 A:middle
for my library they can see
oh this is how you use it,

00:42:15.256 --> 00:42:16.706 A:middle
okay I got it.

00:42:17.306 --> 00:42:19.836 A:middle
Now when this is all displayed

00:42:19.956 --> 00:42:22.646 A:middle
within the AppleScript editor
application it will look

00:42:22.646 --> 00:42:27.236 A:middle
something like this, you'll have
your suite definition here then

00:42:27.236 --> 00:42:32.746 A:middle
you'll have the definition of
your command and how it's called

00:42:32.946 --> 00:42:37.796 A:middle
and then my documentation so
this is all documentation,

00:42:38.146 --> 00:42:41.676 A:middle
I apply text transformation,
for example change the case

00:42:41.676 --> 00:42:46.206 A:middle
of targeted text to upper case
and then I have a sample script

00:42:46.206 --> 00:42:49.956 A:middle
that the user can see and I show
them what the result typically

00:42:49.956 --> 00:42:50.536 A:middle
would be.

00:42:50.966 --> 00:42:53.876 A:middle
So it's worth it to add
that little bit of extra

00:42:53.876 --> 00:42:57.246 A:middle
in your scripting definition
file when you create it.

00:42:58.466 --> 00:43:03.816 A:middle
Now that we've done that we save
that file, we give it the name

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:03.816 --> 00:43:06.176 A:middle
that we had for it,
AppleScript text utilities

00:43:06.176 --> 00:43:07.516 A:middle
and we just put it aside.

00:43:08.546 --> 00:43:12.046 A:middle
Next step is we create a
script bundle, very easy,

00:43:12.436 --> 00:43:15.496 A:middle
you go to AppleScript editor,
you open up a new file,

00:43:15.496 --> 00:43:18.476 A:middle
you go save and in
the drop down sheet

00:43:19.096 --> 00:43:22.766 A:middle
under file format you choose
script bundle as the format

00:43:22.766 --> 00:43:28.186 A:middle
that you want to use and then up
at the top you give it a name,

00:43:28.186 --> 00:43:30.756 A:middle
I'm going to call this
AppleScript text utilities

00:43:31.096 --> 00:43:31.996 A:middle
and you save it.

00:43:32.606 --> 00:43:37.396 A:middle
Once it's been saved we get the
access to the bundled drawer,

00:43:38.056 --> 00:43:42.276 A:middle
we open that up and then
again here is the panel

00:43:42.576 --> 00:43:45.156 A:middle
with all the various
options for us.

00:43:45.546 --> 00:43:47.426 A:middle
The script name, the
bundle identifier,

00:43:47.426 --> 00:43:50.346 A:middle
the short version number,
the bundle version number,

00:43:50.346 --> 00:43:53.996 A:middle
the copyright string, the
name of the sdef file,

00:43:54.546 --> 00:43:58.216 A:middle
whether we're using AppleScript
objective C, the contents

00:43:58.216 --> 00:44:01.226 A:middle
of the resources folder
and the little action menu

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:01.226 --> 00:44:03.596 A:middle
that you can do things
in the resources folder.

00:44:04.226 --> 00:44:06.886 A:middle
So in this case we're
going to move the window

00:44:06.886 --> 00:44:10.446 A:middle
to the side a little bit and
we're going to actually take

00:44:10.506 --> 00:44:14.886 A:middle
that file and drag it into
the resources folder area here

00:44:14.886 --> 00:44:15.836 A:middle
and let it go.

00:44:16.326 --> 00:44:21.916 A:middle
This will copy that sdef file
into the script bundle for us

00:44:21.916 --> 00:44:24.446 A:middle
and you can see now
it has become part

00:44:24.446 --> 00:44:26.126 A:middle
of a list that's available.

00:44:27.236 --> 00:44:29.466 A:middle
Then I can fill out the
information up there

00:44:29.466 --> 00:44:33.366 A:middle
by checking the check box that
my using AppleScript objective C

00:44:33.596 --> 00:44:36.326 A:middle
and most importantly
put the name

00:44:36.326 --> 00:44:39.946 A:middle
of the scripting definition
file, the title of it,

00:44:40.466 --> 00:44:46.426 A:middle
in that field, you can leaved
off the .sdef then you simply

00:44:46.426 --> 00:44:50.046 A:middle
save your script bundle, close
the drawer and then save it.

00:44:51.076 --> 00:44:54.976 A:middle
Next we add the code
to the script bundle,

00:44:55.406 --> 00:44:59.816 A:middle
so we have our AppleScript
Library bundle

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:00.316 --> 00:45:03.606 A:middle
and we've been using this one
handler over and over again

00:45:03.856 --> 00:45:06.376 A:middle
in Chris' examples and in
what I've been showing you.

00:45:07.056 --> 00:45:10.566 A:middle
But when you have a
terminology your handler has

00:45:10.626 --> 00:45:12.326 A:middle
to match the terminology

00:45:12.896 --> 00:45:14.996 A:middle
so you here we have an
AppleScript handler,

00:45:14.996 --> 00:45:18.666 A:middle
you can tell because it begins
with on and ends with in right

00:45:19.496 --> 00:45:23.686 A:middle
but the handler syntax has
to match the terminology

00:45:23.686 --> 00:45:26.266 A:middle
that I defined in my
dictionary so I begin

00:45:26.266 --> 00:45:29.156 A:middle
with my command, transform text.

00:45:29.776 --> 00:45:33.756 A:middle
Next I need something to
represent my direct parameter

00:45:33.756 --> 00:45:36.576 A:middle
so I have a variable
here called source text,

00:45:36.896 --> 00:45:39.766 A:middle
it's going to represent
whatever text is getting passed

00:45:39.766 --> 00:45:44.976 A:middle
to my handler, then my
secondary parameter two

00:45:45.596 --> 00:45:49.846 A:middle
and then another variable called
case indicator that's going

00:45:49.846 --> 00:45:52.976 A:middle
to represent one of the
enumerations that I created,

00:45:52.976 --> 00:45:55.146 A:middle
upper case, lower
case word case.

00:45:55.746 --> 00:45:59.926 A:middle
Let's take a look at how this
works again it takes the source

00:45:59.926 --> 00:46:04.046 A:middle
string, converts it to a Cocoa
string using NSString's string

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:04.516 --> 00:46:09.736 A:middle
method, string with string and
then based upon a comparison

00:46:10.166 --> 00:46:14.946 A:middle
between what you pass into
that handler for an enumerator

00:46:15.226 --> 00:46:18.066 A:middle
versus one of the other
options it applies

00:46:18.066 --> 00:46:22.036 A:middle
and instance method wither upper
case string, lower case string

00:46:22.446 --> 00:46:25.276 A:middle
and then finally we
convert everything back

00:46:25.276 --> 00:46:27.836 A:middle
to just plain AppleScript
text by saying

00:46:27.836 --> 00:46:30.196 A:middle
as text and we're done.

00:46:30.716 --> 00:46:33.636 A:middle
So this is the handler
that we're going to use,

00:46:33.936 --> 00:46:39.596 A:middle
we take our bundle we paste
it into it, we save it,

00:46:40.336 --> 00:46:43.496 A:middle
next we install it in
case you didn't save it

00:46:43.496 --> 00:46:45.946 A:middle
into the AppleScript
Libraries folder,

00:46:46.086 --> 00:46:48.636 A:middle
script libraries folder
just take the file,

00:46:49.036 --> 00:46:53.646 A:middle
make a script libraries folder
in your home library directory

00:46:53.956 --> 00:46:58.076 A:middle
and drag that script file
in there and that's it,

00:46:58.076 --> 00:47:01.206 A:middle
it is now installed
and now we can call it

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:01.596 --> 00:47:04.376 A:middle
so next step using the library.

00:47:04.816 --> 00:47:10.746 A:middle
So again we can just
target the library

00:47:10.746 --> 00:47:13.516 A:middle
with an AppleScript
Library identifier script

00:47:13.516 --> 00:47:16.656 A:middle
and then the name of the
library and we can encase

00:47:16.656 --> 00:47:19.606 A:middle
that within a tell statement
but this time instead

00:47:19.606 --> 00:47:20.556 A:middle
of calling the name

00:47:20.556 --> 00:47:24.756 A:middle
of the handler I can just use
my terminology, transform text,

00:47:24.876 --> 00:47:30.166 A:middle
here it is to upper case and
when this runs it runs fine just

00:47:30.166 --> 00:47:33.726 A:middle
like the other handlers
worked, it works perfectly.

00:47:34.046 --> 00:47:39.866 A:middle
So here's an example of using
that library in a script

00:47:39.866 --> 00:47:44.656 A:middle
for the finder, so this
particular script will change

00:47:44.656 --> 00:47:47.766 A:middle
the case of selected
folders in the finder

00:47:48.106 --> 00:47:50.426 A:middle
so if I have some folders
selected and I want their names

00:47:50.426 --> 00:47:53.746 A:middle
to be upper case this is the
script that will do that.

00:47:53.836 --> 00:47:58.236 A:middle
You can see that it runs
and the case changes.

00:47:59.566 --> 00:48:01.666 A:middle
Now I'll walk you
through it real quick,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:01.666 --> 00:48:04.836 A:middle
you get the selected items that
are selected and you iterate

00:48:04.836 --> 00:48:10.016 A:middle
through each one then we call
our script library, right here

00:48:10.686 --> 00:48:16.116 A:middle
and then we apply the results of
the transformation to the name

00:48:16.206 --> 00:48:17.696 A:middle
and then end our repeat.

00:48:18.586 --> 00:48:22.476 A:middle
So here's our tell block,
now there's a problem

00:48:22.476 --> 00:48:23.536 A:middle
with this tell block,

00:48:23.846 --> 00:48:28.126 A:middle
if I'm only using it once that's
not bad but if I have a script

00:48:28.126 --> 00:48:30.996 A:middle
that has to use this
all the time it's a pain

00:48:31.376 --> 00:48:35.086 A:middle
and in addition we have this
thing going on with variable

00:48:35.176 --> 00:48:38.486 A:middle
where I have to create a
variable to get the results

00:48:38.486 --> 00:48:42.476 A:middle
of the transformation that I can
then use later on in the script

00:48:42.476 --> 00:48:44.756 A:middle
because it's outside
of the tell block.

00:48:45.316 --> 00:48:49.516 A:middle
I want all of that to go
away and we fix that issue

00:48:50.436 --> 00:48:55.016 A:middle
with a new construct that we've
created called the use clause,

00:48:55.336 --> 00:48:59.046 A:middle
so at the top of my
script I enter the word use

00:48:59.116 --> 00:49:02.546 A:middle
and then my script
library identifier and what

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:02.546 --> 00:49:05.746 A:middle
that does is dynamically
load my library

00:49:05.746 --> 00:49:09.326 A:middle
into memory making it globally
available throughout this

00:49:09.326 --> 00:49:14.306 A:middle
script, so I no longer need this
tell block addressing my library

00:49:14.846 --> 00:49:18.286 A:middle
and as a matter of fact once I
got rid of that I can get rid

00:49:18.286 --> 00:49:21.736 A:middle
of the nonsense with the
variables back and forth

00:49:21.736 --> 00:49:25.516 A:middle
and put everything on one line
so that the finder will talk

00:49:25.516 --> 00:49:27.576 A:middle
to this command transparently

00:49:27.926 --> 00:49:30.846 A:middle
and it all becomes
one single statement.

00:49:31.876 --> 00:49:38.186 A:middle
So we go from this to that with
the use clause, which is a way

00:49:38.186 --> 00:49:40.976 A:middle
to load and import terminology

00:49:40.976 --> 00:49:43.586 A:middle
into your script,
this is what we like.

00:49:44.106 --> 00:49:47.116 A:middle
Here's what it looks like
in an actual script window,

00:49:47.686 --> 00:49:51.786 A:middle
now with the use clause and
then taking out the back

00:49:51.786 --> 00:49:54.256 A:middle
and forth with the variable.

00:49:54.636 --> 00:49:57.926 A:middle
That's exactly what we
like, it's easy to remember,

00:49:58.106 --> 00:50:02.646 A:middle
it's powerful to use, it's
clean and it's a smooth syntax.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:03.276 --> 00:50:06.626 A:middle
Now when you deploy libraries,
once you've created something

00:50:06.626 --> 00:50:09.006 A:middle
like this you can put it
in multiple locations,

00:50:09.356 --> 00:50:10.576 A:middle
the one that we've been talking

00:50:10.576 --> 00:50:12.886 A:middle
about is your home
library folder

00:50:14.286 --> 00:50:18.006 A:middle
and in addition you can go to
the top level on your computer

00:50:18.006 --> 00:50:21.736 A:middle
and you can place it in
a script libraries folder

00:50:21.736 --> 00:50:23.506 A:middle
within that library folder.

00:50:24.226 --> 00:50:28.796 A:middle
If you have a script bundle
or a script application you

00:50:28.796 --> 00:50:32.366 A:middle
within its resources folder you
can create a script libraries

00:50:32.366 --> 00:50:34.216 A:middle
folder and place it in there.

00:50:34.556 --> 00:50:39.226 A:middle
So you can pass...give
someone a AppleScript droplet

00:50:39.226 --> 00:50:42.886 A:middle
or AppleScript applet that
contains script libraries

00:50:43.836 --> 00:50:45.206 A:middle
that it can draw from,

00:50:45.976 --> 00:50:49.466 A:middle
in addition any application
that's using calling AppleScript

00:50:49.766 --> 00:50:53.516 A:middle
you can create in its resources
folder a script library folder.

00:50:54.386 --> 00:50:58.296 A:middle
So AppleScript Libraries are
a new plug-in architecture

00:50:58.516 --> 00:51:01.456 A:middle
enabling quick development
and access

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:01.456 --> 00:51:03.466 A:middle
to your favorite
sets of handlers.

00:51:04.256 --> 00:51:06.176 A:middle
It's different from
scripting additions

00:51:06.176 --> 00:51:08.556 A:middle
because you can write them
yourself in AppleScript

00:51:08.896 --> 00:51:11.406 A:middle
and they're controlled by
the script that loads them.

00:51:12.046 --> 00:51:14.306 A:middle
They can use AppleScript
objective C

00:51:14.306 --> 00:51:17.036 A:middle
to access all the
wonderment of Cocoa

00:51:17.466 --> 00:51:21.186 A:middle
and they can also publish their
own scripting terminology.

00:51:21.726 --> 00:51:25.156 A:middle
In support of them we created
two new constructs the script

00:51:25.156 --> 00:51:29.756 A:middle
library identifier, that finds
the library for you and loads

00:51:30.116 --> 00:51:33.556 A:middle
and we also created a new
use clause that allows you

00:51:33.826 --> 00:51:36.656 A:middle
to load the library
for global access.

00:51:37.136 --> 00:51:41.006 A:middle
So for more information you
can contact these poor guys

00:51:41.406 --> 00:51:45.966 A:middle
or watch the video from
the earlier session

00:51:45.966 --> 00:51:47.676 A:middle
on automation over view.

00:51:48.136 --> 00:51:52.016 A:middle
One more thing, this is a
very important day for us

00:51:52.516 --> 00:51:56.856 A:middle
because 20 years ago AppleScript
was given to the world.

00:51:57.516 --> 00:52:02.656 A:middle
[ Applause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:03.156 --> 00:52:05.586 A:middle
In 1993 AppleScript released

00:52:05.586 --> 00:52:08.916 A:middle
to the...I mean Apple released
AppleScript to the public

00:52:09.316 --> 00:52:12.586 A:middle
and since then it's become a
phenomenal language that people

00:52:12.586 --> 00:52:16.806 A:middle
and companies rely upon
to automate the processes

00:52:16.806 --> 00:52:19.236 A:middle
that they do, they build
their businesses on it,

00:52:19.236 --> 00:52:21.326 A:middle
they build their
careers on it and we want

00:52:21.326 --> 00:52:24.546 A:middle
to take this opportunity
on the 20th anniversary

00:52:24.546 --> 00:52:27.386 A:middle
to say thank you to
all of the developers

00:52:27.386 --> 00:52:30.366 A:middle
that made their apps scriptable,
we want to say thank you

00:52:30.366 --> 00:52:33.966 A:middle
to all the scriptors who wrote
and write scripts everyday

00:52:33.966 --> 00:52:35.356 A:middle
and share them with others.

00:52:35.456 --> 00:52:38.406 A:middle
We want to thank our
customers for using AppleScript

00:52:38.406 --> 00:52:41.506 A:middle
and in addition we want to thank
all of the engineers that worked

00:52:41.506 --> 00:52:43.866 A:middle
on scriptable applications
and worked

00:52:43.866 --> 00:52:45.866 A:middle
at Apple in creating this.

00:52:46.196 --> 00:52:48.766 A:middle
We really appreciate
it, thank you so much.

00:52:50.516 --> 00:52:55.516 A:middle
[ Applause ]

00:52:56.016 --> 00:53:00.006 A:middle
[ Silence ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

