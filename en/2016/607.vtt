WEBVTT

00:00:08.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:21.516 --> 00:00:26.616 A:middle
[ Applause ]

00:00:27.116 --> 00:00:29.696 A:middle
&gt;&gt; Thank you, hello
everybody and welcome

00:00:29.696 --> 00:00:32.375 A:middle
to Controlling Game
Input for Apple TV.

00:00:32.976 --> 00:00:36.086 A:middle
I'm JJ Cwik, Game
Technology Software Engineer.

00:00:36.916 --> 00:00:41.876 A:middle
Now when we introduce Apple
TV back in September we talked

00:00:41.876 --> 00:00:43.516 A:middle
about the 10 foot experience.

00:00:44.316 --> 00:00:47.016 A:middle
We talked about it being a
shared communal experience,

00:00:47.446 --> 00:00:50.426 A:middle
one that's ideally suited
to longer gameplay sessions.

00:00:51.376 --> 00:00:52.716 A:middle
And the fact of the matter is

00:00:52.866 --> 00:00:55.386 A:middle
that people just love playing
games in their living room

00:00:56.136 --> 00:00:57.906 A:middle
and Apple TV is great for that.

00:00:58.426 --> 00:01:00.036 A:middle
It gives you the tools you need

00:00:58.426 --> 00:01:00.036 A:middle
It gives you the tools you need

00:01:00.286 --> 00:01:02.756 A:middle
to create really
compelling game experiences.

00:01:03.596 --> 00:01:07.236 A:middle
And I'm really happy to talk to
you today about the Siri Remote,

00:01:07.846 --> 00:01:09.776 A:middle
MFi game controllers and how

00:01:09.776 --> 00:01:11.686 A:middle
to best integrate
them into your game.

00:01:12.966 --> 00:01:15.856 A:middle
Now before I start
spoiler alert,

00:01:15.986 --> 00:01:17.926 A:middle
here's what's new in tvOS 10.

00:01:18.736 --> 00:01:23.036 A:middle
As you heard on Monday, games
with advanced game mechanics

00:01:23.326 --> 00:01:24.436 A:middle
that cannot be supported

00:01:24.436 --> 00:01:29.036 A:middle
by the Siri Remote can
optionally include the

00:01:29.036 --> 00:01:33.216 A:middle
requirement that they
require game controllers.

00:01:34.416 --> 00:01:36.926 A:middle
Now we've also included
support for up

00:01:36.926 --> 00:01:38.976 A:middle
to four MFi game controllers.

00:01:39.236 --> 00:01:41.526 A:middle
This is going to be great
for multiplayer gaming.

00:01:42.986 --> 00:01:46.816 A:middle
And as you also heard on Monday,
we have an Apple TV Remote app

00:01:47.276 --> 00:01:51.316 A:middle
that can be used to control
your Apple TV and can be used

00:01:51.316 --> 00:01:52.486 A:middle
as a game input device.

00:01:53.226 --> 00:01:55.036 A:middle
Now I'll talk about all
these throughout the course

00:01:55.036 --> 00:01:58.686 A:middle
of the talk, so let's
get started.

00:01:58.806 --> 00:02:02.976 A:middle
Now apps on tvOS
typically take their input

00:01:58.806 --> 00:02:02.976 A:middle
Now apps on tvOS
typically take their input

00:02:02.976 --> 00:02:06.966 A:middle
from the focus engine or
they also take the inputs

00:02:07.256 --> 00:02:09.515 A:middle
from touches and gestures.

00:02:10.545 --> 00:02:13.026 A:middle
But there's also a third
option available and that's

00:02:13.026 --> 00:02:15.836 A:middle
to read inputs directly
off of the Siri Remote

00:02:16.096 --> 00:02:18.816 A:middle
and game controllers with the
Game Controller framework.

00:02:19.446 --> 00:02:22.356 A:middle
Now let me give you
a quick overview

00:02:22.476 --> 00:02:24.756 A:middle
of the Game Controller
framework for those of you

00:02:24.756 --> 00:02:25.976 A:middle
who may not be familiar with it.

00:02:26.716 --> 00:02:28.916 A:middle
The Game Controller framework
was initially created

00:02:29.256 --> 00:02:32.506 A:middle
to expose third-party game
controllers to your games.

00:02:33.086 --> 00:02:35.286 A:middle
These compatible game
controllers are what we call

00:02:35.396 --> 00:02:36.476 A:middle
MFi controllers.

00:02:37.476 --> 00:02:39.296 A:middle
Now the framework has
since been updated

00:02:39.296 --> 00:02:41.536 A:middle
to also include support
for the Siri Remote.

00:02:42.836 --> 00:02:47.056 A:middle
The Game Controller framework
is a standardized simple API

00:02:47.056 --> 00:02:50.766 A:middle
that allows you to
access all controllers

00:02:51.146 --> 00:02:53.816 A:middle
and use the same
API calls regardless

00:02:54.016 --> 00:02:55.366 A:middle
of the controller vendors.

00:02:56.796 --> 00:02:58.936 A:middle
It standardizes detection
of controllers.

00:03:00.176 --> 00:03:02.346 A:middle
It seamlessly handles
controllers that connect

00:03:02.346 --> 00:03:04.446 A:middle
and disconnect while
your game is running.

00:03:05.176 --> 00:03:08.656 A:middle
And it allows you to
control input or rather

00:03:08.656 --> 00:03:11.616 A:middle
to read inputs off of the
controllers using polling

00:03:11.786 --> 00:03:12.886 A:middle
or an event-driven model.

00:03:14.246 --> 00:03:18.866 A:middle
And it's also available
on tvOS, iOS and macOS.

00:03:19.736 --> 00:03:23.176 A:middle
And so even though this talk
is geared towards tvOS a lot

00:03:23.176 --> 00:03:26.876 A:middle
of the code and concepts
still apply on iOS and macOS.

00:03:26.876 --> 00:03:30.956 A:middle
So now that you have
an understanding

00:03:30.956 --> 00:03:34.566 A:middle
of the framework I'd like to
talk about some specifics.

00:03:35.766 --> 00:03:36.976 A:middle
There is a core class

00:03:37.116 --> 00:03:39.556 A:middle
in the Game Controller
framework called GCController.

00:03:39.926 --> 00:03:41.806 A:middle
This represents physical
controllers

00:03:42.456 --> 00:03:44.476 A:middle
and it's the same class
for the Siri Remote

00:03:44.746 --> 00:03:46.316 A:middle
and MFi game controllers.

00:03:46.846 --> 00:03:50.666 A:middle
Now the first thing you're
probably going to want to do

00:03:50.666 --> 00:03:52.456 A:middle
in your app is to get a list

00:03:52.456 --> 00:03:54.206 A:middle
of all the currently
connected controllers.

00:03:54.706 --> 00:03:57.586 A:middle
And to do this you use the
controller's class method

00:03:57.906 --> 00:03:59.036 A:middle
on GCController.

00:03:59.686 --> 00:04:02.586 A:middle
This returns you a list of the
currently connected controllers

00:03:59.686 --> 00:04:02.586 A:middle
This returns you a list of the
currently connected controllers

00:04:02.836 --> 00:04:05.126 A:middle
as an array of GCController
instances

00:04:05.846 --> 00:04:08.786 A:middle
or an empty array if none exist.

00:04:10.796 --> 00:04:13.926 A:middle
It's also common for controllers
to connect and disconnect

00:04:14.126 --> 00:04:20.055 A:middle
as your app is running and to be
notified of this add observers

00:04:20.236 --> 00:04:23.686 A:middle
for the GCCcontrollerDidConnect
Notification

00:04:23.986 --> 00:04:26.466 A:middle
and GCControllerDidDisconnect
Notification.

00:04:27.326 --> 00:04:29.476 A:middle
A great place to do this is

00:04:29.476 --> 00:04:31.996 A:middle
in your application Did
Finish Launching with Options.

00:04:33.816 --> 00:04:36.666 A:middle
So now we know which controllers
are connected and I'd

00:04:36.666 --> 00:04:38.846 A:middle
like to shift focus and
talk about the Siri Remote.

00:04:39.606 --> 00:04:41.826 A:middle
Now the Siri Remote is
surface to your game

00:04:41.966 --> 00:04:44.956 A:middle
as a game controller using
the GCController class

00:04:44.956 --> 00:04:45.756 A:middle
that I just mentioned.

00:04:47.176 --> 00:04:49.696 A:middle
And in the Game Controller
framework, there's this concept

00:04:49.696 --> 00:04:53.976 A:middle
of profiles and profiles grouped
together common functionality

00:04:54.506 --> 00:04:56.796 A:middle
and the Siri Remote
supports two profiles.

00:04:57.456 --> 00:05:00.236 A:middle
The first is called
GCMicroGamepad.

00:04:57.456 --> 00:05:00.236 A:middle
The first is called
GCMicroGamepad.

00:05:00.936 --> 00:05:03.446 A:middle
This is what you use to
access the touch surface

00:05:03.656 --> 00:05:05.606 A:middle
and the buttons on
the Siri Remote.

00:05:06.856 --> 00:05:11.146 A:middle
The second profile that the
Siri Remote supports is called

00:05:11.146 --> 00:05:15.136 A:middle
GCMotion and this is what you
use to access the gyroscope

00:05:15.236 --> 00:05:17.326 A:middle
and accelerometer
on the Siri Remote.

00:05:18.196 --> 00:05:20.656 A:middle
Now note that this is different
than what you might be used

00:05:20.656 --> 00:05:23.006 A:middle
to on iOS where motion comes

00:05:23.006 --> 00:05:24.356 A:middle
through the CoreMotion
framework.

00:05:25.786 --> 00:05:29.036 A:middle
On tvOS motion comes through
the Game Controller framework.

00:05:30.376 --> 00:05:32.566 A:middle
So let's look at each of
these profiles in turn.

00:05:33.146 --> 00:05:35.466 A:middle
First, the GCMicroGamepad.

00:05:38.026 --> 00:05:41.016 A:middle
Now the touch surface on
the Siri Remote is surface

00:05:41.016 --> 00:05:43.906 A:middle
to your game as a
virtual DPAD of sorts.

00:05:44.696 --> 00:05:49.746 A:middle
And you can query its value
using an analog representation

00:05:49.996 --> 00:05:55.356 A:middle
as an XY coordinate pair or
as a digital input basically

00:05:55.356 --> 00:05:58.086 A:middle
as four buttons up,
down, left and right.

00:06:00.756 --> 00:06:03.956 A:middle
The GCMicroGamepad profile
also has an A button

00:06:04.236 --> 00:06:06.286 A:middle
and this corresponds
to clicking the remote.

00:06:07.066 --> 00:06:10.366 A:middle
This is ideally suited for the
primary action in your games,

00:06:10.666 --> 00:06:12.246 A:middle
especially when the
remote is being held

00:06:12.246 --> 00:06:13.546 A:middle
in portrait orientation.

00:06:14.106 --> 00:06:19.576 A:middle
And the profile also has
an X button, this is useful

00:06:19.576 --> 00:06:21.476 A:middle
as a secondary action
in your games

00:06:22.376 --> 00:06:25.166 A:middle
and it becomes really natural
when the remote is tilted

00:06:25.166 --> 00:06:27.516 A:middle
on its side and held in
landscape orientation

00:06:27.846 --> 00:06:29.876 A:middle
to have a thumb on
the touch surface

00:06:30.096 --> 00:06:32.006 A:middle
and another thumb
on the X button.

00:06:33.876 --> 00:06:36.426 A:middle
Now note that there's also a
Menu button on this remote,

00:06:37.306 --> 00:06:39.046 A:middle
I'll be talking about
that momentarily.

00:06:39.956 --> 00:06:41.156 A:middle
And the remainder of the buttons

00:06:41.156 --> 00:06:43.466 A:middle
on the remote are
reserved for system use.

00:06:43.916 --> 00:06:49.006 A:middle
Here's a code example
to show how simple it is

00:06:49.006 --> 00:06:50.726 A:middle
to read inputs off
of the buttons.

00:06:51.396 --> 00:06:55.276 A:middle
Here we see we have a controller
that's already been connected

00:06:56.036 --> 00:06:58.726 A:middle
and from that we can read
the MicroGamepad profile.

00:06:59.856 --> 00:07:02.766 A:middle
That stores the button A
and button X properties

00:06:59.856 --> 00:07:02.766 A:middle
That stores the button A
and button X properties

00:07:03.316 --> 00:07:05.776 A:middle
and from there we just
check the isPressed property

00:07:06.106 --> 00:07:08.766 A:middle
to determine whether or not
those buttons are pressed.

00:07:09.446 --> 00:07:12.136 A:middle
Now we also support
an event-driven model.

00:07:12.796 --> 00:07:14.126 A:middle
So if you want to be notified

00:07:14.126 --> 00:07:15.916 A:middle
when the buttons are
pressed instead of having

00:07:15.916 --> 00:07:17.656 A:middle
to poll you can do that.

00:07:19.106 --> 00:07:20.806 A:middle
These are called the
pressedChangeHandler

00:07:21.776 --> 00:07:24.406 A:middle
and this block of code that
you supply is run whenever the

00:07:24.406 --> 00:07:25.386 A:middle
button changes state.

00:07:26.336 --> 00:07:27.606 A:middle
Notice of this is called twice

00:07:27.606 --> 00:07:30.306 A:middle
for traditional button
press once on button down

00:07:30.606 --> 00:07:31.846 A:middle
and another time on button up.

00:07:33.456 --> 00:07:34.346 A:middle
So those are the buttons.

00:07:34.726 --> 00:07:35.836 A:middle
Let's look at the DPAD now.

00:07:36.876 --> 00:07:38.796 A:middle
The DPAD as I mentioned
can be read

00:07:38.796 --> 00:07:40.866 A:middle
as four buttons up,
down, left and right.

00:07:40.866 --> 00:07:43.386 A:middle
And interestingly, has
a second representation

00:07:43.626 --> 00:07:46.336 A:middle
as two axes, xAxis and yAxis.

00:07:46.656 --> 00:07:47.526 A:middle
So let's look at those.

00:07:49.516 --> 00:07:52.476 A:middle
Here you can see there's a DPAD
property on the MicroGamepad

00:07:52.926 --> 00:07:55.346 A:middle
and it has xAxis and
yAxis properties.

00:07:55.986 --> 00:07:57.846 A:middle
From there we read
the value property

00:07:57.846 --> 00:08:02.006 A:middle
which returns a float normalized
between zero or sorry,

00:07:57.846 --> 00:08:02.006 A:middle
which returns a float normalized
between zero or sorry,

00:08:02.146 --> 00:08:04.946 A:middle
normalized between
negative 1 and positive 1.

00:08:06.376 --> 00:08:09.276 A:middle
Now as you'd expect, we also
have an event callback for that.

00:08:09.596 --> 00:08:13.586 A:middle
And note in this case our
value change handler is used

00:08:13.586 --> 00:08:15.196 A:middle
or we're supplying a
value change handler

00:08:15.196 --> 00:08:18.606 A:middle
on the DPAD itself not
on the xAxis and yAxis.

00:08:18.956 --> 00:08:21.816 A:middle
This is because we want to
be notified whenever either

00:08:21.816 --> 00:08:23.516 A:middle
of those two axes changes.

00:08:24.066 --> 00:08:29.846 A:middle
Now there's some interesting
aspects of the DPAD remote

00:08:29.886 --> 00:08:31.000 A:middle
that I'd like to talk
to you about now.

00:08:39.066 --> 00:08:40.836 A:middle
And the first one is
called DPAD windowing.

00:08:41.785 --> 00:08:44.706 A:middle
Now what this is is it really
defines where the origin

00:08:44.706 --> 00:08:46.956 A:middle
of your x and yAxis
is for the DPAD.

00:08:48.166 --> 00:08:49.896 A:middle
Now you might be wondering
shouldn't this always be

00:08:49.896 --> 00:08:54.286 A:middle
at the center and the answer is
a lot of times, no not really.

00:08:54.986 --> 00:08:57.816 A:middle
A lot of times a player doesn't
concern themselves so much

00:08:57.816 --> 00:08:59.896 A:middle
with the precise location
that they're touching

00:08:59.896 --> 00:09:02.276 A:middle
on the touch surface,
but rather they just want

00:08:59.896 --> 00:09:02.276 A:middle
on the touch surface,
but rather they just want

00:09:02.276 --> 00:09:04.296 A:middle
to put their thumb
down and move relative

00:09:04.296 --> 00:09:05.656 A:middle
to where they initially
touch down.

00:09:06.326 --> 00:09:08.366 A:middle
And that's what DPAD
windowing allows you to do

00:09:08.366 --> 00:09:10.956 A:middle
as a game developer is to tap
into this relative motion.

00:09:11.516 --> 00:09:12.766 A:middle
So initial touch downs

00:09:12.766 --> 00:09:15.136 A:middle
on the touch surface
establish an origin

00:09:15.556 --> 00:09:20.216 A:middle
and then further movement from
there has DPAD values reported

00:09:20.216 --> 00:09:22.136 A:middle
to your game relative
to that origin.

00:09:22.836 --> 00:09:24.196 A:middle
Let me explain with an example.

00:09:25.076 --> 00:09:26.466 A:middle
So here's our touch surface

00:09:26.466 --> 00:09:28.056 A:middle
and I place my thumb
down right here.

00:09:28.516 --> 00:09:31.296 A:middle
Notice it's not at the
midpoint of the touch surface,

00:09:32.076 --> 00:09:36.056 A:middle
but with DPAD windowing
enabled this is where our origin

00:09:36.056 --> 00:09:39.146 A:middle
for our x and yAxis
is established.

00:09:39.606 --> 00:09:43.906 A:middle
Also note there's an imaginary
DPAD window placed outside

00:09:43.906 --> 00:09:45.656 A:middle
of that centered
about the origin.

00:09:46.456 --> 00:09:48.066 A:middle
Now watch what happens
as I move my thumb

00:09:48.066 --> 00:09:49.216 A:middle
across the touch surface.

00:09:51.196 --> 00:09:54.546 A:middle
The values reported to your
game are relative to this origin

00:09:54.906 --> 00:09:57.056 A:middle
and in proportion to
the size of the window.

00:09:57.976 --> 00:09:59.886 A:middle
Now as I continue
dragging my thumb

00:09:59.886 --> 00:10:02.806 A:middle
across the touch surface
it drags the window

00:09:59.886 --> 00:10:02.806 A:middle
across the touch surface
it drags the window

00:10:02.986 --> 00:10:04.936 A:middle
and the axis along with it.

00:10:06.386 --> 00:10:10.306 A:middle
Now we have established a new
origin and any further movement

00:10:10.306 --> 00:10:13.446 A:middle
across the touch surface
has the DPAD values reported

00:10:13.446 --> 00:10:15.426 A:middle
to your game relative
to this new origin.

00:10:16.226 --> 00:10:17.336 A:middle
So that's DPAD windowing.

00:10:18.716 --> 00:10:22.026 A:middle
If you want to receive absolute
DPAD values all the time you can

00:10:22.026 --> 00:10:25.396 A:middle
opt into this with the
reportsAbsoluteDpadValues

00:10:25.446 --> 00:10:30.856 A:middle
property, set this to true
and we always have the origin

00:10:30.856 --> 00:10:33.356 A:middle
at the physical midpoint
of the touch surface.

00:10:34.086 --> 00:10:35.926 A:middle
Then as I place my
thumb down and move it

00:10:35.926 --> 00:10:39.716 A:middle
across the touch surface all
the values reported are relative

00:10:39.716 --> 00:10:41.816 A:middle
to the physical midpoint
of the touch surface.

00:10:42.186 --> 00:10:44.000 A:middle
So that's DPAD windowing.

00:10:50.136 --> 00:10:51.546 A:middle
Next up rotation.

00:10:51.906 --> 00:10:54.866 A:middle
So the DPAD values
surface to your game are

00:10:54.946 --> 00:10:57.866 A:middle
in portrait orientation
and this means X is going

00:10:57.866 --> 00:11:00.236 A:middle
to the right and Y is going up.

00:10:57.866 --> 00:11:00.236 A:middle
to the right and Y is going up.

00:11:00.896 --> 00:11:03.346 A:middle
However, this might cause a
problem if the player wants

00:11:03.346 --> 00:11:05.076 A:middle
to play in landscape
orientation.

00:11:05.766 --> 00:11:09.176 A:middle
In this case, your game would
need to transpose those values

00:11:09.776 --> 00:11:11.726 A:middle
so that it's proper
to be played in game.

00:11:12.306 --> 00:11:14.936 A:middle
But then what happens if
the user tilts the remote

00:11:14.936 --> 00:11:16.746 A:middle
in the other direction,
you would need

00:11:16.746 --> 00:11:19.066 A:middle
to transpose those values
in the opposite direction.

00:11:20.566 --> 00:11:22.576 A:middle
And how would you even do
this, you'd either have

00:11:22.616 --> 00:11:24.486 A:middle
to force the player to play

00:11:24.486 --> 00:11:28.006 A:middle
in a particular orientation
all the time or you'd have

00:11:28.006 --> 00:11:29.576 A:middle
to start reading
accelerometer data

00:11:29.576 --> 00:11:31.606 A:middle
and track the orientation
changes yourself.

00:11:31.976 --> 00:11:33.556 A:middle
And this isn't something
you want to be doing.

00:11:34.236 --> 00:11:37.486 A:middle
So we've provided a property
for this called allowsRotation.

00:11:37.976 --> 00:11:40.176 A:middle
Now by default this
property is set to false.

00:11:40.766 --> 00:11:43.806 A:middle
But if you set it to true,
then the DPAD values reported

00:11:43.806 --> 00:11:46.176 A:middle
to your game will
be with respect

00:11:46.176 --> 00:11:48.556 A:middle
to whatever orientation the
remote is being held in.

00:11:49.166 --> 00:11:51.316 A:middle
So when this is true
and when the remote's

00:11:51.316 --> 00:11:53.286 A:middle
in portrait orientation
X is going

00:11:53.286 --> 00:11:54.806 A:middle
to the right and Y is going up.

00:11:56.066 --> 00:12:00.126 A:middle
And in landscape left X is going
to the right and Y is going up.

00:11:56.066 --> 00:12:00.126 A:middle
And in landscape left X is going
to the right and Y is going up.

00:12:00.626 --> 00:12:03.626 A:middle
And in landscape right
you've guessed it X is going

00:12:03.626 --> 00:12:05.266 A:middle
to the right and Y is going up.

00:12:06.196 --> 00:12:08.356 A:middle
So if your game wants
to allow players to play

00:12:08.356 --> 00:12:12.066 A:middle
in landscape orientation
set allows rotation to true

00:12:12.506 --> 00:12:14.906 A:middle
so you don't have to worry
about orientation changes

00:12:14.966 --> 00:12:16.666 A:middle
or rotating DPAD
values yourself.

00:12:17.106 --> 00:12:18.856 A:middle
So that's rotation.

00:12:19.726 --> 00:12:20.736 A:middle
Next up motion.

00:12:22.146 --> 00:12:25.076 A:middle
As I mentioned earlier,
the second profile

00:12:25.076 --> 00:12:27.616 A:middle
that the Siri Remote
supports is called GCMotion.

00:12:28.936 --> 00:12:32.066 A:middle
Now as the user moves the
remote around the gravity

00:12:32.066 --> 00:12:34.476 A:middle
in user acceleration
vectors supplied

00:12:34.476 --> 00:12:36.596 A:middle
by the GCMotion profile
are updated.

00:12:38.146 --> 00:12:40.726 A:middle
Note that these values are
already filtered before they get

00:12:40.726 --> 00:12:41.386 A:middle
to your game.

00:12:41.766 --> 00:12:43.416 A:middle
So if you have a tvOS game

00:12:43.676 --> 00:12:46.766 A:middle
and you're doing motion
filtering we suggest you remove

00:12:46.766 --> 00:12:49.406 A:middle
that so that you don't
introduce any unnecessary lag

00:12:49.406 --> 00:12:50.646 A:middle
into your game.

00:12:51.986 --> 00:12:56.426 A:middle
Also, this is fused motion data
and what we mean by that is

00:12:56.426 --> 00:13:00.116 A:middle
that the accelerometer and the
gyroscope help to reinforce

00:12:56.426 --> 00:13:00.116 A:middle
that the accelerometer and the
gyroscope help to reinforce

00:13:00.116 --> 00:13:01.066 A:middle
and correct each other.

00:13:01.746 --> 00:13:05.396 A:middle
So just like on your
iPhone the gravity vector

00:13:05.686 --> 00:13:09.106 A:middle
from the accelerometer
helps to correct the drift

00:13:09.106 --> 00:13:12.576 A:middle
in the gyroscope and
the gyroscope data helps

00:13:12.576 --> 00:13:15.426 A:middle
to smooth the values coming
from the accelerometer.

00:13:15.996 --> 00:13:17.036 A:middle
They reinforce each other.

00:13:18.156 --> 00:13:20.786 A:middle
But really, vigorous
motion can overwhelm that,

00:13:21.236 --> 00:13:24.606 A:middle
so for this reason we recommend
you avoid creating scenarios

00:13:24.606 --> 00:13:26.896 A:middle
in your game that
require the user

00:13:27.146 --> 00:13:28.756 A:middle
to vigorously shake the remote.

00:13:29.376 --> 00:13:31.756 A:middle
Because this causes data
that's difficult correct

00:13:32.076 --> 00:13:34.376 A:middle
until the sensors have
had a chance to stabilize.

00:13:37.126 --> 00:13:39.886 A:middle
Next up I want to talk
about the Menu button.

00:13:43.476 --> 00:13:46.346 A:middle
Now all controllers
supported by tvOS

00:13:46.396 --> 00:13:48.596 A:middle
in the Game Controller
framework have a Menu button.

00:13:49.226 --> 00:13:51.426 A:middle
It's the same Menu button
with the same behavior

00:13:51.646 --> 00:13:54.656 A:middle
on the Siri Remote and
MFi game controllers.

00:13:58.936 --> 00:14:04.036 A:middle
Now in an app on tvOS when
the Menu button is pressed the

00:13:58.936 --> 00:14:04.036 A:middle
Now in an app on tvOS when
the Menu button is pressed the

00:14:04.036 --> 00:14:07.586 A:middle
recommended behavior changes
depending on the context.

00:14:08.066 --> 00:14:11.356 A:middle
Sometimes pressing the Menu
button will minimize your app

00:14:11.836 --> 00:14:13.886 A:middle
and return you back to
the Apple TV Home Screen.

00:14:15.576 --> 00:14:17.676 A:middle
That's typically done in
your game's main menu.

00:14:18.676 --> 00:14:22.636 A:middle
At other times pressing the Menu
button will go back one level

00:14:22.826 --> 00:14:25.316 A:middle
in your apps menu hierarchy

00:14:25.766 --> 00:14:27.646 A:middle
and this is typically
done in submenus.

00:14:30.326 --> 00:14:33.946 A:middle
Lastly, pressing the Menu
button sometimes pauses

00:14:33.946 --> 00:14:35.856 A:middle
or resumes your active gameplay.

00:14:39.056 --> 00:14:42.706 A:middle
Now nongame apps
written entirely

00:14:42.706 --> 00:14:46.506 A:middle
in UIKit get the first two
behaviors largely for free

00:14:46.506 --> 00:14:50.536 A:middle
without any additional
work, but most games due

00:14:50.536 --> 00:14:54.256 A:middle
to their custom UI have to do
a little bit of extra work here

00:14:54.536 --> 00:14:56.326 A:middle
to indicate to the
system their intent.

00:14:57.266 --> 00:14:57.966 A:middle
Let me explain.

00:15:00.736 --> 00:15:03.726 A:middle
So in UIKit when the
Menu button is pressed

00:15:04.176 --> 00:15:07.986 A:middle
for UIKit apps it pops the child
view controller off the stack.

00:15:08.476 --> 00:15:11.536 A:middle
This returns you back to your
previous level of your menus.

00:15:12.616 --> 00:15:14.156 A:middle
Now you can do this successively

00:15:14.156 --> 00:15:18.006 A:middle
with each Menu button press
popping the child view

00:15:18.006 --> 00:15:19.706 A:middle
controllers off the
stack and then

00:15:19.706 --> 00:15:22.326 A:middle
at some point you have
one view controller,

00:15:22.486 --> 00:15:24.336 A:middle
your root view controller
remaining on the stack.

00:15:25.586 --> 00:15:27.196 A:middle
Now when there's only
one view controller left

00:15:27.196 --> 00:15:30.856 A:middle
on the stack the next Menu
button press minimizes your app

00:15:30.856 --> 00:15:33.376 A:middle
and bounces you back to
the Apple TV Home Screen.

00:15:35.096 --> 00:15:38.366 A:middle
Most games by comparison
are architected differently,

00:15:38.796 --> 00:15:41.576 A:middle
they typically have custom
in-game UI that's not written

00:15:41.766 --> 00:15:42.476 A:middle
in UIKit.

00:15:43.246 --> 00:15:45.766 A:middle
And they also typically
have scene transitions

00:15:45.766 --> 00:15:47.586 A:middle
between the different
portions of the game

00:15:47.806 --> 00:15:50.306 A:middle
that also aren't
written in UIKit.

00:15:52.176 --> 00:15:55.296 A:middle
And so for this reason
they typically can get away

00:15:55.296 --> 00:15:56.956 A:middle
with only having
one view controller,

00:15:56.956 --> 00:15:58.016 A:middle
the root view controller,

00:15:58.016 --> 00:15:59.706 A:middle
for the entire duration
of their game.

00:16:00.326 --> 00:16:01.996 A:middle
But by the rule that we just saw

00:16:02.286 --> 00:16:04.696 A:middle
because there's only one
view controller in the stack

00:16:04.696 --> 00:16:06.036 A:middle
at all points of your game

00:16:06.386 --> 00:16:09.056 A:middle
by default pressing the Menu
button will bounce you back

00:16:09.056 --> 00:16:10.326 A:middle
to the Apple TV Home Screen.

00:16:10.926 --> 00:16:13.586 A:middle
So you're going to need some
way to indicate to the system

00:16:13.856 --> 00:16:16.646 A:middle
when you want Menu button
presses to return you

00:16:16.646 --> 00:16:18.946 A:middle
to the Apple TV Home
Screen and when you don't.

00:16:21.066 --> 00:16:23.000 A:middle
Enter GCEventViewController.

00:16:28.116 --> 00:16:31.816 A:middle
This is a special view
controller we created for single

00:16:31.816 --> 00:16:34.166 A:middle
or rather for game
controller games

00:16:34.166 --> 00:16:35.696 A:middle
that have a single-view
controller.

00:16:37.076 --> 00:16:41.116 A:middle
So if your game is one of these
you're going to want to set this

00:16:41.196 --> 00:16:42.536 A:middle
as your root view controller.

00:16:43.426 --> 00:16:46.686 A:middle
Now this view controller
has a property called

00:16:46.686 --> 00:16:49.866 A:middle
controllerUserInteractionEnabled
and this is the key

00:16:49.866 --> 00:16:52.936 A:middle
that you have for controlling
when your app returns back

00:16:52.936 --> 00:16:54.806 A:middle
to the home screen for
Menu button presses.

00:16:56.796 --> 00:16:59.526 A:middle
When this value is false this
view controller effectively

00:16:59.566 --> 00:17:02.536 A:middle
traps the Menu button presses
and prevents them from going

00:16:59.566 --> 00:17:02.536 A:middle
traps the Menu button presses
and prevents them from going

00:17:02.536 --> 00:17:03.636 A:middle
up the responder chain,

00:17:03.966 --> 00:17:05.526 A:middle
effectively keeping
you in your app.

00:17:07.806 --> 00:17:09.076 A:middle
Incidentally, this is also

00:17:09.076 --> 00:17:11.106 A:middle
where your controller
pause handler is called

00:17:11.205 --> 00:17:12.536 A:middle
and I'll get to that
momentarily.

00:17:13.726 --> 00:17:14.846 A:middle
Now when this value is set

00:17:14.846 --> 00:17:19.546 A:middle
to true Menu button events
are allowed to proceed

00:17:19.546 --> 00:17:23.675 A:middle
up the responder chain as
normal, which allows your app

00:17:23.715 --> 00:17:25.185 A:middle
to be minimized and
takes you back

00:17:25.185 --> 00:17:26.386 A:middle
to the Apple TV Home Screen.

00:17:27.486 --> 00:17:30.576 A:middle
So your job as a game
developer is to manage the state

00:17:30.576 --> 00:17:32.456 A:middle
of
controllerUserInteractionEnabled

00:17:32.726 --> 00:17:34.116 A:middle
as a user goes back and forth

00:17:34.166 --> 00:17:35.446 A:middle
between different
parts of your game.

00:17:36.096 --> 00:17:37.706 A:middle
Let me show you with
a block diagram.

00:17:38.176 --> 00:17:39.926 A:middle
So here we are at the
Apple TV Home Screen

00:17:39.926 --> 00:17:40.826 A:middle
and we launch our app.

00:17:41.576 --> 00:17:43.226 A:middle
Some games have a splash screen

00:17:43.226 --> 00:17:45.076 A:middle
or some other introductory
sequence

00:17:45.346 --> 00:17:47.816 A:middle
and many games will
eventually land

00:17:48.016 --> 00:17:49.726 A:middle
on an in-game main
menu of sorts.

00:17:50.446 --> 00:17:53.486 A:middle
And for both of these
the user's expectation is

00:17:53.486 --> 00:17:55.756 A:middle
that when they press the Menu
button they will be bounced back

00:17:55.806 --> 00:17:57.506 A:middle
to the Apple TV Home
Screen immediately.

00:17:58.306 --> 00:17:58.826 A:middle
Therefore,

00:17:58.906 --> 00:18:00.776 A:middle
set
controllerUserInteractionEnabled

00:17:58.906 --> 00:18:00.776 A:middle
set
controllerUserInteractionEnabled

00:18:00.776 --> 00:18:01.916 A:middle
to true.

00:18:02.476 --> 00:18:04.776 A:middle
Now when the user progresses
to other parts of the game,

00:18:05.016 --> 00:18:07.296 A:middle
say active gameplay
or in submenus,

00:18:07.896 --> 00:18:09.346 A:middle
the user's expectations is

00:18:09.346 --> 00:18:12.156 A:middle
that Menu button presses
will not bounce you back

00:18:12.266 --> 00:18:13.386 A:middle
to the Apple TV Home Screen.

00:18:13.736 --> 00:18:16.616 A:middle
So in these cases set
controllerUserInteractionEnabled

00:18:16.616 --> 00:18:17.106 A:middle
to false.

00:18:18.086 --> 00:18:19.986 A:middle
And if a user transitions back

00:18:20.016 --> 00:18:21.796 A:middle
to the in-game main
menu remember

00:18:21.796 --> 00:18:23.196 A:middle
to set this back to true again.

00:18:24.436 --> 00:18:28.096 A:middle
So that covers our first
behavior when we return back

00:18:28.136 --> 00:18:29.696 A:middle
to the Apple TV Home
Screen and not.

00:18:30.296 --> 00:18:32.156 A:middle
And we still have the
two behaviors remaining.

00:18:32.156 --> 00:18:35.856 A:middle
We need to worry about going
back in submenus and pausing

00:18:35.856 --> 00:18:37.206 A:middle
and resuming active gameplay.

00:18:37.586 --> 00:18:40.086 A:middle
Basically all the dark
boxes on this diagram.

00:18:41.186 --> 00:18:43.236 A:middle
And the good news is that
those are both handled

00:18:43.236 --> 00:18:44.866 A:middle
in the controllerPausedHandler.

00:18:45.426 --> 00:18:50.096 A:middle
The controllerPausedHandler is
a block of code that you supply

00:18:50.846 --> 00:18:54.066 A:middle
to the controller or for
each controller rather

00:18:54.446 --> 00:18:56.676 A:middle
and this is code that runs
whenever the Menu button is

00:18:56.676 --> 00:18:58.566 A:middle
pressed and you're not
going to be bounced back

00:18:58.566 --> 00:18:59.816 A:middle
to the Apple TV Home Screen.

00:19:00.796 --> 00:19:04.056 A:middle
And it's a simple matter within
this block of code to check

00:19:04.516 --> 00:19:06.596 A:middle
if you're in a submenu go back

00:19:06.596 --> 00:19:08.936 A:middle
to the previous level
menu in your game.

00:19:09.626 --> 00:19:12.326 A:middle
If you're in active gameplay
toggle the pause state.

00:19:13.216 --> 00:19:15.236 A:middle
And that's it now
your game is set

00:19:15.236 --> 00:19:18.246 A:middle
up to properly handle Menu
button presses regardless

00:19:18.246 --> 00:19:19.346 A:middle
of where you are in your game.

00:19:25.126 --> 00:19:27.486 A:middle
So now let's talk about
MFi game controllers.

00:19:28.366 --> 00:19:30.836 A:middle
Some games can really take
advantage of the extended set

00:19:30.836 --> 00:19:34.226 A:middle
of controls offered by
wireless extended gamepads

00:19:34.656 --> 00:19:36.126 A:middle
and these are optional
accessories

00:19:36.126 --> 00:19:36.916 A:middle
that players may have.

00:19:38.086 --> 00:19:40.256 A:middle
Now by extended what
we're referring

00:19:40.256 --> 00:19:42.736 A:middle
to is the control
layout and it's a layout

00:19:42.736 --> 00:19:44.366 A:middle
that you're probably
already very familiar with.

00:19:44.936 --> 00:19:48.896 A:middle
It features a DPAD on the left,
it features four face buttons A,

00:19:48.896 --> 00:19:51.766 A:middle
B, X, Y in these
positions and in this shape,

00:19:52.176 --> 00:19:53.646 A:middle
the diamond pattern
on the right.

00:19:54.506 --> 00:19:57.136 A:middle
On the front of the controller
it features two thumb sticks

00:19:57.656 --> 00:20:00.126 A:middle
and on top we have two
shoulders and two triggers.

00:19:57.656 --> 00:20:00.126 A:middle
and on top we have two
shoulders and two triggers.

00:20:01.186 --> 00:20:02.926 A:middle
Now all of these buttons
that I've mentioned

00:20:02.926 --> 00:20:06.746 A:middle
so far are pressure-sensitive
and I'll cover that momentarily.

00:20:07.696 --> 00:20:10.686 A:middle
We also have a Menu button,
which I already discussed

00:20:11.046 --> 00:20:13.186 A:middle
and we have four
player indicator LEDs.

00:20:13.916 --> 00:20:19.026 A:middle
Now just like the Siri Remote
supports the GCMicroGamepad

00:20:20.476 --> 00:20:22.426 A:middle
extended game controllers
support the

00:20:22.426 --> 00:20:24.526 A:middle
GCExtendedGamepad profile.

00:20:25.126 --> 00:20:27.926 A:middle
And you'll notice on the left
here there's a table listing all

00:20:27.926 --> 00:20:28.586 A:middle
the properties.

00:20:29.556 --> 00:20:32.906 A:middle
Also notice the data types
GCControllerDirectionPad

00:20:32.986 --> 00:20:34.826 A:middle
and GCControllerButtonInput.

00:20:35.326 --> 00:20:36.826 A:middle
These are the same
data types you're used

00:20:36.826 --> 00:20:37.926 A:middle
to on the Siri Remote.

00:20:39.196 --> 00:20:41.656 A:middle
Now one thing I'd like to
point out is that the DPAD

00:20:41.776 --> 00:20:44.116 A:middle
and the buttons and
every single input

00:20:44.116 --> 00:20:46.846 A:middle
on this table actually
is pressure-sensitive.

00:20:47.366 --> 00:20:49.256 A:middle
So even those buttons and inputs

00:20:49.256 --> 00:20:51.266 A:middle
that are typically
considered digital only

00:20:51.266 --> 00:20:54.466 A:middle
in other controllers that
you may have encountered

00:20:54.656 --> 00:20:56.466 A:middle
like the DPAD and
the face buttons

00:20:56.466 --> 00:20:59.356 A:middle
and shoulder buttons they're
all pressure-sensitive

00:20:59.526 --> 00:21:02.486 A:middle
and so they can be read in an
analog and in a digital sense.

00:20:59.526 --> 00:21:02.486 A:middle
and so they can be read in an
analog and in a digital sense.

00:21:03.746 --> 00:21:06.606 A:middle
So let's look at code that shows
that analog digital duality.

00:21:07.286 --> 00:21:09.866 A:middle
Here we have the A button and
the first line is showing how

00:21:09.866 --> 00:21:11.646 A:middle
to access the digital state

00:21:11.646 --> 00:21:13.446 A:middle
of the button whether
or not it's pressed.

00:21:13.816 --> 00:21:16.676 A:middle
So if your game only concerns
itself in a particular situation

00:21:16.676 --> 00:21:19.176 A:middle
with whether or not a button is
pressed this is what you want

00:21:19.176 --> 00:21:19.536 A:middle
to use.

00:21:21.176 --> 00:21:24.206 A:middle
However, if you care about
how hard a button is pressed,

00:21:24.906 --> 00:21:26.556 A:middle
that's when you'd use
the value property.

00:21:27.296 --> 00:21:29.956 A:middle
And this is great to add more
nuance control to your game.

00:21:30.486 --> 00:21:32.906 A:middle
Maybe you're creating a
sports game and you want

00:21:32.906 --> 00:21:35.416 A:middle
to allow players to vary
the speed of their passes

00:21:35.416 --> 00:21:39.476 A:middle
from a soft gentle pass to a
fast bullet pass and you can do

00:21:39.476 --> 00:21:42.146 A:middle
that by reading how hard
the button was pressed

00:21:42.146 --> 00:21:43.016 A:middle
with the value property.

00:21:43.816 --> 00:21:47.876 A:middle
We also offer event
callbacks as you'd expect.

00:21:48.356 --> 00:21:50.406 A:middle
Now notice there's a
pressedChangeHandler,

00:21:50.406 --> 00:21:52.306 A:middle
which corresponds to
the press property.

00:21:52.596 --> 00:21:54.126 A:middle
This is for Boolean
state changes

00:21:54.126 --> 00:21:55.316 A:middle
or digital state changes.

00:21:55.846 --> 00:21:58.206 A:middle
And there's a value changed
property which corresponds

00:21:58.206 --> 00:22:02.396 A:middle
to the value or sorry, a value
change handler which corresponds

00:21:58.206 --> 00:22:02.396 A:middle
to the value or sorry, a value
change handler which corresponds

00:22:02.396 --> 00:22:03.456 A:middle
with the value property.

00:22:04.686 --> 00:22:07.966 A:middle
Now the value change
handler is called many times

00:22:07.966 --> 00:22:10.836 A:middle
in a typical button press
as the button progresses

00:22:10.836 --> 00:22:13.266 A:middle
down through its travel
range and back up again.

00:22:14.436 --> 00:22:16.536 A:middle
And for those of you looking
for guidance on whether

00:22:16.536 --> 00:22:19.846 A:middle
to use polling or event
callbacks, there's no hard

00:22:19.846 --> 00:22:22.626 A:middle
and fast rules, but
polling tends to be good

00:22:23.026 --> 00:22:25.756 A:middle
for reading those
inputs that change

00:22:25.756 --> 00:22:27.406 A:middle
over a longer period of time.

00:22:27.806 --> 00:22:30.856 A:middle
Like maybe the accelerator
on a racecar game being tied

00:22:30.856 --> 00:22:34.076 A:middle
to the trigger of a button
or rather the trigger

00:22:34.076 --> 00:22:34.926 A:middle
of the game controller.

00:22:35.506 --> 00:22:39.786 A:middle
And event callbacks
tend to work really well

00:22:40.416 --> 00:22:42.876 A:middle
when you're concerned about
edge transitions of buttons.

00:22:43.216 --> 00:22:44.726 A:middle
So maybe you have
an adventure game

00:22:44.726 --> 00:22:47.626 A:middle
and a player swings
their sword and you want

00:22:47.626 --> 00:22:50.316 A:middle
to activate the swing sword
animation the moment the button

00:22:50.316 --> 00:22:50.886 A:middle
is pressed.

00:22:51.226 --> 00:22:53.746 A:middle
Event callbacks are
great for that.

00:22:55.256 --> 00:22:58.876 A:middle
So by this point you
probably have an understanding

00:22:58.876 --> 00:23:03.566 A:middle
of the mechanics of
connecting and reading inputs

00:22:58.876 --> 00:23:03.566 A:middle
of the mechanics of
connecting and reading inputs

00:23:03.566 --> 00:23:05.446 A:middle
from the Siri Remote
and game controllers

00:23:06.316 --> 00:23:07.596 A:middle
and you're probably
starting to think

00:23:07.596 --> 00:23:09.996 A:middle
about which control types
your game is going to support.

00:23:10.836 --> 00:23:12.406 A:middle
Will it support just
the Siri Remote

00:23:12.616 --> 00:23:17.416 A:middle
or will it support the Siri
Remote and MFi game controllers?

00:23:19.616 --> 00:23:20.976 A:middle
Or as you heard on Monday,

00:23:21.826 --> 00:23:23.816 A:middle
games that have advanced
game mechanics

00:23:24.276 --> 00:23:25.406 A:middle
that can't be supported

00:23:25.406 --> 00:23:29.000 A:middle
by the Siri Remote can require
the use of a game controller.

00:23:39.146 --> 00:23:40.476 A:middle
Now how you specify

00:23:40.476 --> 00:23:44.096 A:middle
which controller types your
game supports is in Xcode.

00:23:44.846 --> 00:23:48.696 A:middle
In your target settings
there's a capabilities tab

00:23:49.296 --> 00:23:51.506 A:middle
and in there you'll find the
game controllers capability.

00:23:51.946 --> 00:23:55.176 A:middle
Enable this capability
and select which types

00:23:55.176 --> 00:23:56.866 A:middle
of controllers your
game supports.

00:23:58.026 --> 00:24:01.696 A:middle
Interacting with this GUI
changes the keys and values

00:23:58.026 --> 00:24:01.696 A:middle
Interacting with this GUI
changes the keys and values

00:24:01.776 --> 00:24:04.206 A:middle
in your info.plist
file accordingly.

00:24:04.796 --> 00:24:08.816 A:middle
And this is important for
app review because all games

00:24:08.816 --> 00:24:11.956 A:middle
that link the Game Controller
framework are going to

00:24:12.416 --> 00:24:16.056 A:middle
or rather these keys are going
to be looked for in app review

00:24:16.056 --> 00:24:18.146 A:middle
by all games that link the
Game Controller framework.

00:24:18.866 --> 00:24:21.906 A:middle
And where this really
matters is in the App Store

00:24:22.266 --> 00:24:25.956 A:middle
because your users are going
to be notified in the App Store

00:24:26.046 --> 00:24:28.776 A:middle
if your game has game
controllers as optional

00:24:28.986 --> 00:24:30.556 A:middle
or game controllers as required.

00:24:31.356 --> 00:24:35.496 A:middle
Additionally, the user may
be warned if they tried

00:24:35.496 --> 00:24:37.896 A:middle
to download a game
controller required game

00:24:39.916 --> 00:24:41.806 A:middle
when they haven't
paired a game controller

00:24:41.806 --> 00:24:43.096 A:middle
to that Apple TV before.

00:24:44.536 --> 00:24:46.566 A:middle
Now note that this
is only a safeguard

00:24:47.346 --> 00:24:49.766 A:middle
because it's very
possible that your game

00:24:49.996 --> 00:24:52.926 A:middle
that requires game
controllers may still launch

00:24:53.486 --> 00:24:55.526 A:middle
and find no game
controllers connected.

00:24:56.096 --> 00:24:59.766 A:middle
And this is a case that you
need to account for and handle.

00:25:01.096 --> 00:25:03.896 A:middle
It's very possible that maybe
the user merely forgot to turn

00:25:03.896 --> 00:25:04.886 A:middle
on their game controller.

00:25:05.636 --> 00:25:08.866 A:middle
So in this situation
notify the player

00:25:09.306 --> 00:25:11.376 A:middle
that no game controllers
were found

00:25:11.446 --> 00:25:12.786 A:middle
and to connect a
game controller.

00:25:14.976 --> 00:25:17.446 A:middle
Otherwise, the user may be
wondering why your game is

00:25:17.446 --> 00:25:18.866 A:middle
seemingly not controllable.

00:25:19.526 --> 00:25:22.776 A:middle
Now there's one other
place to concern yourself

00:25:22.776 --> 00:25:25.326 A:middle
with notifying the user in
this kind of manner and that's

00:25:25.326 --> 00:25:26.696 A:middle
on controller disconnections.

00:25:27.126 --> 00:25:29.226 A:middle
This is because the controller

00:25:29.486 --> 00:25:32.606 A:middle
or rather the controllers
available may pass your initial

00:25:32.606 --> 00:25:34.356 A:middle
check, but then somewhere

00:25:34.356 --> 00:25:36.446 A:middle
down the line while
your app is running one

00:25:36.446 --> 00:25:38.216 A:middle
of the game controllers
could disconnect.

00:25:38.556 --> 00:25:40.116 A:middle
And if this is the
only game controller

00:25:40.116 --> 00:25:43.376 A:middle
that was available then at this
point your game can't proceed

00:25:43.376 --> 00:25:44.856 A:middle
since it requires
game controllers

00:25:44.916 --> 00:25:47.000 A:middle
and again a place
to notify the user.

00:25:53.046 --> 00:25:56.426 A:middle
For more information,
see Designing for tvOS,

00:25:56.656 --> 00:26:00.000 A:middle
session 802 for more information
on requiring game controllers.

00:26:07.046 --> 00:26:08.536 A:middle
So let's talk about
something new now,

00:26:08.716 --> 00:26:09.976 A:middle
the Apple TV Remote app.

00:26:10.816 --> 00:26:14.366 A:middle
As you heard on Monday, this
is a new app and it's available

00:26:14.366 --> 00:26:16.706 A:middle
in beta form on
developer.apple.com.

00:26:17.856 --> 00:26:20.246 A:middle
This app allows you to
control your Apple TV

00:26:20.666 --> 00:26:22.886 A:middle
and it features a large
touch surface in the middle

00:26:22.886 --> 00:26:26.666 A:middle
of the screen and on-screen
buttons that you'll find

00:26:26.666 --> 00:26:27.906 A:middle
as well on the Siri Remote.

00:26:28.416 --> 00:26:32.196 A:middle
And importantly for our
discussion this can be used

00:26:32.196 --> 00:26:33.396 A:middle
as a game input device.

00:26:33.946 --> 00:26:38.966 A:middle
And the way that's done
on tvOS is it's surfaced

00:26:39.646 --> 00:26:41.616 A:middle
by the Game Controller
framework to your game

00:26:41.616 --> 00:26:42.866 A:middle
in a very familiar manner.

00:26:43.406 --> 00:26:45.676 A:middle
It's effectively an
emulated Siri Remote.

00:26:46.396 --> 00:26:48.906 A:middle
So it shows up as a
GCController instance

00:26:50.006 --> 00:26:52.366 A:middle
and it supports the
GCMicroGamepad

00:26:52.366 --> 00:26:55.146 A:middle
and GCMotion profiles
just like the Siri Remote.

00:26:56.046 --> 00:26:57.856 A:middle
In fact, it's indistinguishable

00:26:58.106 --> 00:27:00.766 A:middle
in the Game Controller
framework from the Siri Remote.

00:26:58.106 --> 00:27:00.766 A:middle
in the Game Controller
framework from the Siri Remote.

00:27:01.306 --> 00:27:06.226 A:middle
So the code you write for the
Siri Remote will work for both.

00:27:07.686 --> 00:27:12.336 A:middle
Now by default these
remotes are coalesced,

00:27:12.886 --> 00:27:16.906 A:middle
so if you have a Siri Remote and
a TV Remote app they will appear

00:27:16.906 --> 00:27:19.236 A:middle
as one game controller
by default

00:27:19.426 --> 00:27:20.536 A:middle
in your controllers array.

00:27:21.646 --> 00:27:24.396 A:middle
This means that button inputs
from both will be surface

00:27:24.396 --> 00:27:26.626 A:middle
to your game as if they
came from one controller

00:27:27.466 --> 00:27:29.326 A:middle
and the same thing
with DPAD inputs.

00:27:30.476 --> 00:27:33.816 A:middle
Now for motion we didn't want
the motion input form one

00:27:34.066 --> 00:27:36.436 A:middle
overwriting and fighting with
the motion input from the other,

00:27:36.706 --> 00:27:39.336 A:middle
so we take motion from
one controller or sorry,

00:27:39.336 --> 00:27:40.826 A:middle
from one remote at a time.

00:27:41.346 --> 00:27:45.026 A:middle
And the remote we take
it from is the remote

00:27:45.026 --> 00:27:48.246 A:middle
that last received intentional
user input either swipes

00:27:48.246 --> 00:27:50.826 A:middle
on the touch surface or
A or X button presses.

00:27:52.126 --> 00:27:55.806 A:middle
Now if you want you can opt-in
to separate these remotes

00:27:55.806 --> 00:27:58.176 A:middle
and have them show up
as distinct instances

00:27:58.176 --> 00:27:59.506 A:middle
in your controllers array.

00:28:00.326 --> 00:28:03.856 A:middle
To do this, go to
your info.plist file

00:28:03.986 --> 00:28:08.016 A:middle
and add the Boolean key
GCSupportsMultipleMicroGamepads,

00:28:08.416 --> 00:28:11.546 A:middle
set this to yes and
now the Siri Remote

00:28:11.546 --> 00:28:13.756 A:middle
and Apple TV Remote
apps will show

00:28:13.756 --> 00:28:17.906 A:middle
up as distinct controller
instances in your array.

00:28:17.906 --> 00:28:25.316 A:middle
Now I want to talk to you
about a special mode inside

00:28:25.316 --> 00:28:28.226 A:middle
of the Apple TV Remote app
called Game Controller mode.

00:28:28.636 --> 00:28:31.936 A:middle
This is a mode that users can
switch into and out of at will

00:28:32.206 --> 00:28:34.726 A:middle
in any game that links the
Game Controller framework.

00:28:35.426 --> 00:28:41.876 A:middle
Now this app is in landscape
orientation and as such,

00:28:41.906 --> 00:28:43.716 A:middle
the DPAD values are rotated

00:28:43.716 --> 00:28:46.516 A:middle
by 90 degrees before they
even get to your app.

00:28:47.276 --> 00:28:49.866 A:middle
So your app doesn't
have to do anything

00:28:50.006 --> 00:28:51.666 A:middle
to take advantage of this mode.

00:28:53.146 --> 00:28:56.146 A:middle
However, just note that if
your game manually rotates DPAD

00:28:56.146 --> 00:28:58.956 A:middle
values by 90 degrees
you're effectively going

00:28:58.956 --> 00:29:00.456 A:middle
to be doing a double rotation.

00:28:58.956 --> 00:29:00.456 A:middle
to be doing a double rotation.

00:29:01.316 --> 00:29:04.746 A:middle
So our recommendation is if
you have a game that wants

00:29:04.746 --> 00:29:07.376 A:middle
to allow players to play
in landscape orientation

00:29:07.596 --> 00:29:10.226 A:middle
with the Siri Remote
and Game Controller mode

00:29:10.226 --> 00:29:14.396 A:middle
on the Apple TV Remote app
set allowsRotation to true

00:29:14.396 --> 00:29:18.176 A:middle
like we saw previously
in the talk and allow us

00:29:18.176 --> 00:29:20.856 A:middle
to handle the orientation
and DPAD changes for you.

00:29:21.706 --> 00:29:23.846 A:middle
Now one more thing to note,

00:29:24.266 --> 00:29:27.876 A:middle
the Apple TV Remote app's Game
Controller mode separates the

00:29:27.876 --> 00:29:29.806 A:middle
touch surface from the A button.

00:29:30.356 --> 00:29:33.476 A:middle
This is different
from the Siri Remote

00:29:33.846 --> 00:29:37.056 A:middle
where clicking the touch surface
it activates the A button.

00:29:37.926 --> 00:29:41.586 A:middle
Now mechanically this doesn't
provide any problems the user

00:29:41.586 --> 00:29:44.156 A:middle
can still simultaneously
enter input on both

00:29:44.376 --> 00:29:46.046 A:middle
and your game code
can still check

00:29:46.046 --> 00:29:47.716 A:middle
for simultaneous input on both.

00:29:48.576 --> 00:29:51.946 A:middle
But the key point is if you
have game code that assumes

00:29:51.946 --> 00:29:55.606 A:middle
that all A button presses will
also activate the touch surface

00:29:55.876 --> 00:29:58.886 A:middle
this won't work in the same
way on the Game Controller mode

00:29:58.886 --> 00:30:00.000 A:middle
for the Apple TV Remote app.

00:30:11.166 --> 00:30:14.206 A:middle
And lastly, I'd like to talk to
you about multiple controllers.

00:30:14.206 --> 00:30:16.736 A:middle
We get asked all the time how
many controllers does Apple

00:30:16.736 --> 00:30:17.646 A:middle
TV support.

00:30:18.686 --> 00:30:23.556 A:middle
And the answer is one Siri
Remote new for tvOS 10

00:30:23.556 --> 00:30:28.086 A:middle
up to four MFi game controllers
and the Apple TV Remote app.

00:30:29.666 --> 00:30:31.706 A:middle
Now we typically get
asked this in the context

00:30:31.706 --> 00:30:35.696 A:middle
of multiplayer gaming and
with the addition of up

00:30:35.696 --> 00:30:38.986 A:middle
to four MFi game controllers
for tvOS 10 this is going

00:30:38.986 --> 00:30:40.636 A:middle
to be great for multiplayer
gaming.

00:30:42.116 --> 00:30:44.896 A:middle
But something that may not
be initially obvious is

00:30:44.896 --> 00:30:47.716 A:middle
that this is very important for
single-player gaming as well.

00:30:48.336 --> 00:30:49.006 A:middle
Let me explain.

00:30:50.046 --> 00:30:53.596 A:middle
When your app launches you're
not sure if you're going

00:30:53.596 --> 00:30:58.246 A:middle
to find only one Siri Remote
connected or maybe you're going

00:30:58.246 --> 00:31:00.386 A:middle
to find a game controller
connected

00:30:58.246 --> 00:31:00.386 A:middle
to find a game controller
connected

00:31:01.776 --> 00:31:03.186 A:middle
or maybe you'll find one of each

00:31:04.626 --> 00:31:06.646 A:middle
or maybe you'll find
a Siri Remote,

00:31:06.646 --> 00:31:09.026 A:middle
multiple game controllers,
the TV Remote app.

00:31:09.266 --> 00:31:10.206 A:middle
You get the picture right?

00:31:10.326 --> 00:31:13.856 A:middle
So the key point here is on
Apple TV it's very natural

00:31:13.856 --> 00:31:17.226 A:middle
to receive inputs from
multiple controllers even

00:31:17.226 --> 00:31:18.436 A:middle
for single-player games.

00:31:18.796 --> 00:31:21.276 A:middle
And importantly, you
don't know ahead of time

00:31:21.676 --> 00:31:24.036 A:middle
which controller the
user is intending to use.

00:31:24.896 --> 00:31:26.116 A:middle
So you can't just assume

00:31:26.406 --> 00:31:29.456 A:middle
that the controller's
array index zero is the one

00:31:29.456 --> 00:31:30.506 A:middle
that the player wants to use.

00:31:31.246 --> 00:31:32.866 A:middle
So how should we handle this?

00:31:33.456 --> 00:31:35.656 A:middle
Well the key realization here is

00:31:35.656 --> 00:31:38.256 A:middle
that players can switch
controllers at any point.

00:31:38.856 --> 00:31:40.316 A:middle
Maybe they launched your app,

00:31:41.146 --> 00:31:43.846 A:middle
traverse through your
in-game menus and launch

00:31:43.846 --> 00:31:47.026 A:middle
into gameplay all with the
Siri Remote and then switch

00:31:47.026 --> 00:31:48.236 A:middle
to the MFi game controller

00:31:48.236 --> 00:31:50.426 A:middle
to actually start
controlling the gameplay.

00:31:51.016 --> 00:31:58.726 A:middle
And games that allow players
to switch freely and flexibly

00:31:58.986 --> 00:32:01.696 A:middle
between different
controllers without having

00:31:58.986 --> 00:32:01.696 A:middle
between different
controllers without having

00:32:01.696 --> 00:32:04.916 A:middle
to prompt the user with
unnecessary confirmation dialogs

00:32:05.366 --> 00:32:08.026 A:middle
or without requiring the
user to exit gameplay

00:32:08.026 --> 00:32:09.186 A:middle
and reenter gameplay

00:32:09.186 --> 00:32:13.206 A:middle
with a different controller will
create a really great seamless

00:32:13.206 --> 00:32:14.296 A:middle
user experience.

00:32:15.376 --> 00:32:16.466 A:middle
So how should we do this?

00:32:17.676 --> 00:32:20.596 A:middle
Well one way to go about
this is to treat input

00:32:20.596 --> 00:32:22.566 A:middle
from all controllers
as valid input

00:32:22.566 --> 00:32:23.686 A:middle
for your single-player game.

00:32:24.846 --> 00:32:26.556 A:middle
So if you have a character
that moves onscreen

00:32:26.556 --> 00:32:30.466 A:middle
from the DPAD allow all
controllers that are connected,

00:32:30.706 --> 00:32:32.966 A:middle
allow their DPADs to control
the character movement.

00:32:34.156 --> 00:32:36.966 A:middle
Similarly with buttons, if
your character or rather

00:32:36.966 --> 00:32:38.266 A:middle
if your character jumps

00:32:38.906 --> 00:32:41.596 A:middle
by pressing the A button
allow all the A buttons

00:32:41.626 --> 00:32:44.506 A:middle
on all the connected controllers
to control the character.

00:32:45.686 --> 00:32:49.796 A:middle
And if a controller
connects in the middle

00:32:49.796 --> 00:32:52.476 A:middle
of your gameplay you can
silently start tracking

00:32:52.476 --> 00:32:54.626 A:middle
that controller too
and allow its inputs

00:32:54.626 --> 00:32:55.676 A:middle
to control your character.

00:32:57.376 --> 00:32:59.156 A:middle
Now this is working
really well we're able

00:32:59.156 --> 00:33:03.456 A:middle
to give the player a system here
in your game where they're able

00:32:59.156 --> 00:33:03.456 A:middle
to give the player a system here
in your game where they're able

00:33:03.456 --> 00:33:05.396 A:middle
to switch back and forth
between controllers.

00:33:05.546 --> 00:33:08.166 A:middle
And this is effectively a
manual coalescing strategy

00:33:08.576 --> 00:33:10.316 A:middle
where we're taking the
inputs from Siri remotes

00:33:10.316 --> 00:33:12.116 A:middle
and game controllers
and feeding them all

00:33:12.116 --> 00:33:13.666 A:middle
into our single-player
experience.

00:33:14.066 --> 00:33:18.336 A:middle
But there's one edge case
here that I want to talk

00:33:18.336 --> 00:33:19.386 A:middle
about and that's motion.

00:33:19.766 --> 00:33:21.176 A:middle
So let me explain
with an example.

00:33:22.696 --> 00:33:25.276 A:middle
If you have a game
that uses motion say

00:33:25.276 --> 00:33:28.256 A:middle
to control the attitude of
an airplane flying in the air

00:33:28.456 --> 00:33:31.886 A:middle
with the Siri Remote
you might also offload

00:33:31.886 --> 00:33:34.726 A:middle
that controlling the
airplane to a thumb stick

00:33:34.726 --> 00:33:36.736 A:middle
if the player is playing
with a game controller.

00:33:36.946 --> 00:33:38.866 A:middle
And that's perfectly fine
that works really well.

00:33:40.516 --> 00:33:43.896 A:middle
The key concern here though is
you don't want your thumb stick

00:33:43.926 --> 00:33:47.046 A:middle
that controls the airplane
with the game controller

00:33:47.356 --> 00:33:50.286 A:middle
to be overwritten by any motion
data that might be coming

00:33:50.286 --> 00:33:53.066 A:middle
from the Siri Remote when
you're manually coalescing them.

00:33:53.626 --> 00:33:56.956 A:middle
So in this case the code in your
game that controls the attitude

00:33:56.956 --> 00:33:59.616 A:middle
of the airplane should
gate on whether it's taking

00:33:59.616 --> 00:34:02.856 A:middle
that information from
motion or from thumb sticks.

00:33:59.616 --> 00:34:02.856 A:middle
that information from
motion or from thumb sticks.

00:34:03.526 --> 00:34:06.646 A:middle
So then back to our example
as I'm controlling my plane

00:34:06.646 --> 00:34:08.606 A:middle
with my Siri Remote if I pick

00:34:08.606 --> 00:34:11.985 A:middle
up my game controller any
intentional user input

00:34:11.985 --> 00:34:15.366 A:middle
on that game controller whether
it's DPAD or thumb sticks

00:34:15.366 --> 00:34:19.516 A:middle
or triggers or buttons will
start ignoring the motion coming

00:34:19.516 --> 00:34:22.346 A:middle
from the Siri Remote and
use the right thumb stick

00:34:22.456 --> 00:34:26.056 A:middle
to control the attitude of
the airplane and vice versa.

00:34:26.056 --> 00:34:29.346 A:middle
If I then pick up my Siri
Remote intentional user input,

00:34:29.636 --> 00:34:32.156 A:middle
namely swipes across
the touch surface or A

00:34:32.156 --> 00:34:35.545 A:middle
or X button presses will at
that point start listening

00:34:35.545 --> 00:34:38.795 A:middle
to motion coming from the Siri
Remote and switch to that.

00:34:39.996 --> 00:34:43.516 A:middle
In using this we have a control
scheme that's very flexible

00:34:43.516 --> 00:34:45.496 A:middle
for players and allows
them to switch

00:34:45.496 --> 00:34:46.766 A:middle
as seamlessly as possible.

00:34:48.246 --> 00:34:52.755 A:middle
Now I'd like to end
this section by saying

00:34:52.755 --> 00:34:54.196 A:middle
that maybe these techniques

00:34:54.196 --> 00:34:57.216 A:middle
that I've shown you here can
be directly used by your game

00:34:58.176 --> 00:35:01.736 A:middle
or maybe they're a good starting
point and you can tweak them

00:34:58.176 --> 00:35:01.736 A:middle
or maybe they're a good starting
point and you can tweak them

00:35:01.736 --> 00:35:04.716 A:middle
and customize them to suit
your game just perfectly.

00:35:05.646 --> 00:35:08.026 A:middle
But in any case, I really
want to encourage you

00:35:08.276 --> 00:35:12.246 A:middle
to go beyond the mere mechanics
of controllers connecting

00:35:12.246 --> 00:35:15.186 A:middle
and disconnecting and
reading button values

00:35:15.946 --> 00:35:18.706 A:middle
and really thoughtfully
consider how you're going

00:35:18.706 --> 00:35:20.706 A:middle
to integrate game
controllers into your game.

00:35:21.416 --> 00:35:23.516 A:middle
Because when you get
this right in the mind

00:35:23.516 --> 00:35:26.266 A:middle
of the player game
controllers just melt away

00:35:26.716 --> 00:35:29.406 A:middle
and it really allows them
to become immersed by

00:35:29.406 --> 00:35:31.786 A:middle
and enjoy the game experiences

00:35:31.856 --> 00:35:33.476 A:middle
that you've worked
so hard to create.

00:35:33.476 --> 00:35:35.616 A:middle
And that's what games
are all about right.

00:35:38.646 --> 00:35:40.086 A:middle
So we've talked about
a lot today.

00:35:40.476 --> 00:35:42.306 A:middle
To summarize, we talked

00:35:42.306 --> 00:35:45.806 A:middle
about the Siri Remote how it
supports the GCMicroGamepad

00:35:45.806 --> 00:35:48.226 A:middle
profile in the GCMotion profile.

00:35:48.896 --> 00:35:51.506 A:middle
I talked about DPAD
windowing and allowsRotation.

00:35:52.246 --> 00:35:54.876 A:middle
I also talked about
the Menu button and how

00:35:54.876 --> 00:35:58.476 A:middle
on Apple TV the expected
behavior varies depending

00:35:58.476 --> 00:35:59.686 A:middle
on the context of your app.

00:36:00.556 --> 00:36:02.996 A:middle
And how you can use the
GCEventViewController

00:36:03.106 --> 00:36:06.266 A:middle
and control or pause handlers
to control that behavior.

00:36:07.716 --> 00:36:10.136 A:middle
I also talked about
MFi game controllers

00:36:10.886 --> 00:36:13.666 A:middle
that these use the
GCExtendedGamepad profile

00:36:14.066 --> 00:36:16.026 A:middle
that they introduce
pressure sensitivity

00:36:16.916 --> 00:36:18.966 A:middle
and that they can
now be required

00:36:18.966 --> 00:36:20.766 A:middle
as a controller for your game.

00:36:21.336 --> 00:36:24.786 A:middle
I also talked about
the TV Remote app

00:36:25.666 --> 00:36:28.256 A:middle
and how that's an emulated Siri
Remote from the perspective

00:36:28.256 --> 00:36:29.456 A:middle
of the Game Controller
framework.

00:36:29.936 --> 00:36:31.636 A:middle
And I talked about
Game Controller mode

00:36:31.636 --> 00:36:34.926 A:middle
of the Apple TV Remote app
and design considerations

00:36:35.206 --> 00:36:38.376 A:middle
so that your game
works as intended

00:36:38.376 --> 00:36:40.106 A:middle
for the Apple TV Remote app.

00:36:41.056 --> 00:36:42.876 A:middle
And lastly, I finished
up by talking

00:36:42.876 --> 00:36:45.486 A:middle
about multiple controllers
and how it's great

00:36:45.486 --> 00:36:49.206 A:middle
for multiplayer gaming, but it's
equally as important to consider

00:36:49.486 --> 00:36:50.666 A:middle
for single-player gaming.

00:36:50.956 --> 00:36:55.236 A:middle
Namely, allowing your players to
switch controllers as seamlessly

00:36:55.326 --> 00:36:59.566 A:middle
as you can for your game.

00:36:59.646 --> 00:37:01.696 A:middle
Here's the URL for this session.

00:36:59.646 --> 00:37:01.696 A:middle
Here's the URL for this session.

00:37:01.796 --> 00:37:03.966 A:middle
You can find the
video, documentation

00:37:03.966 --> 00:37:05.076 A:middle
and code samples here.

00:37:05.456 --> 00:37:07.196 A:middle
This is session 607.

00:37:08.616 --> 00:37:11.946 A:middle
Related sessions include
Mastering UIKit on tvOS

00:37:12.256 --> 00:37:13.826 A:middle
and Designing for tvOS.

00:37:14.366 --> 00:37:17.306 A:middle
There's also a tvOS lab
for more general questions.

00:37:18.666 --> 00:37:20.106 A:middle
Thank you so much
for your attention

00:37:20.356 --> 00:37:21.826 A:middle
and have a wonderful
rest of your show.
