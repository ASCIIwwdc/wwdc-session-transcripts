WEBVTT

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:26.516 --> 00:00:31.626 A:middle
[ Applause ]

00:00:32.125 --> 00:00:33.306 A:middle
&gt;&gt; Hello everyone.

00:00:33.756 --> 00:00:35.346 A:middle
Welcome to Session 230.

00:00:35.546 --> 00:00:39.096 A:middle
I'm Sirisha, an engineer
on CallKit and I'm joined

00:00:39.096 --> 00:00:41.396 A:middle
by my colleagues,
Stewart and Nick.

00:00:41.396 --> 00:00:44.786 A:middle
And we are excited to introduce
a brand new framework today,

00:00:45.416 --> 00:00:45.886 A:middle
CallKit.

00:00:49.096 --> 00:00:51.816 A:middle
A lot of you here have
created VoIP apps before.

00:00:52.776 --> 00:00:54.776 A:middle
You have changed the
face of telephony

00:00:55.056 --> 00:00:56.656 A:middle
and have made the world smaller.

00:00:57.816 --> 00:01:01.926 A:middle
And you want your app to be
the primary way your users make

00:00:57.816 --> 00:01:01.926 A:middle
And you want your app to be
the primary way your users make

00:01:01.926 --> 00:01:05.126 A:middle
and receive calls on
iOS and we want to help.

00:01:06.216 --> 00:01:07.706 A:middle
CallKit is a framework
that's going

00:01:07.706 --> 00:01:09.876 A:middle
to elevate your third
party VoIP apps

00:01:10.156 --> 00:01:11.646 A:middle
to a first party experience.

00:01:12.516 --> 00:01:18.556 A:middle
[ Applause ]

00:01:19.056 --> 00:01:19.446 A:middle
Thank you.

00:01:20.146 --> 00:01:22.466 A:middle
So while a lot of you
have created VoIP apps,

00:01:22.546 --> 00:01:25.156 A:middle
for the next 40 minutes
let's assume that you

00:01:25.156 --> 00:01:28.106 A:middle
and I have created a brand
new app called Speakerbox.

00:01:28.766 --> 00:01:31.536 A:middle
So Speakerbox is a
simple app that can make

00:01:31.536 --> 00:01:36.026 A:middle
and receive voice calls on
iOS as iOS exists today.

00:01:36.606 --> 00:01:39.776 A:middle
So before we take a look, let
me setup the stage for you.

00:01:39.956 --> 00:01:42.256 A:middle
So Jane has been
traveling around Europe

00:01:42.256 --> 00:01:45.316 A:middle
and her concerned parents
are trying to reach her

00:01:45.316 --> 00:01:46.576 A:middle
to make sure she's doing okay.

00:01:47.596 --> 00:01:50.206 A:middle
But because she's international
they're using Speakerbox

00:01:50.326 --> 00:01:51.316 A:middle
to make calls to her.

00:01:52.136 --> 00:01:55.746 A:middle
So let's see how an incoming
call to Jane looks like today.

00:01:56.296 --> 00:01:58.776 A:middle
So this is Jane's locked screen.

00:01:59.576 --> 00:02:01.676 A:middle
And at first, she gets
an iMessage from Dad.

00:01:59.576 --> 00:02:01.676 A:middle
And at first, she gets
an iMessage from Dad.

00:02:02.246 --> 00:02:03.946 A:middle
And before she could
even respond,

00:02:04.086 --> 00:02:05.736 A:middle
she gets an incoming
call from mom.

00:02:06.246 --> 00:02:09.166 A:middle
Jane can't discern
the difference

00:02:09.166 --> 00:02:12.856 A:middle
between this incoming
iMessage notification

00:02:12.956 --> 00:02:15.486 A:middle
and the incoming phone
call notification

00:02:16.196 --> 00:02:19.146 A:middle
because that's just what
VoIP calls are today.

00:02:19.466 --> 00:02:20.776 A:middle
Just a notification.

00:02:21.676 --> 00:02:23.906 A:middle
And if Jane wants to
actually answer this call,

00:02:24.286 --> 00:02:27.566 A:middle
she has to slide on
Speakerbox, type in password,

00:02:27.806 --> 00:02:30.606 A:middle
and then that gets
her taken to the app

00:02:30.606 --> 00:02:31.896 A:middle
and then she can begin speaking.

00:02:32.296 --> 00:02:36.206 A:middle
And this is Jane's
unlocked screen

00:02:36.206 --> 00:02:38.426 A:middle
and the experience
is just as bad.

00:02:39.476 --> 00:02:41.056 A:middle
She gets an incoming
call from Mom.

00:02:42.936 --> 00:02:45.286 A:middle
Did you miss that
notification by any chance?

00:02:46.426 --> 00:02:47.016 A:middle
That's right.

00:02:47.016 --> 00:02:49.686 A:middle
It was just a banner
from the top.

00:02:49.836 --> 00:02:53.256 A:middle
So wouldn't it be nice if
instead the incoming call

00:02:53.256 --> 00:02:55.786 A:middle
to Jane looked more like this?

00:02:56.786 --> 00:02:58.416 A:middle
This is Jane's locked
screen still.

00:02:59.166 --> 00:03:00.876 A:middle
And she gets an incoming
call from Mom.

00:02:59.166 --> 00:03:00.876 A:middle
And she gets an incoming
call from Mom.

00:03:01.586 --> 00:03:03.956 A:middle
Notice the full screen
Native UI.

00:03:04.516 --> 00:03:08.396 A:middle
[ Applause ]

00:03:08.896 --> 00:03:11.566 A:middle
And Jane can just
slide to answer

00:03:11.566 --> 00:03:12.896 A:middle
and start talking to her mom.

00:03:12.896 --> 00:03:18.546 A:middle
And from the unlock
screen, it's the same, rich,

00:03:18.786 --> 00:03:21.466 A:middle
Native UI with answer
and decline buttons

00:03:21.736 --> 00:03:23.706 A:middle
and your custom ringtone
playing.

00:03:25.516 --> 00:03:29.546 A:middle
[ Applause ]

00:03:30.046 --> 00:03:32.706 A:middle
And wouldn't it be nice if
VoIP calls could interplay

00:03:32.706 --> 00:03:34.096 A:middle
with other calls on the systems?

00:03:34.946 --> 00:03:38.316 A:middle
Perhaps at the telephony
call or a FaceTime audio call

00:03:38.716 --> 00:03:40.516 A:middle
or maybe another VoIP call?

00:03:41.056 --> 00:03:46.606 A:middle
And even have VoIP calls get
started from recents, favorites,

00:03:46.796 --> 00:03:48.606 A:middle
and even get assigned
to contacts.

00:03:49.526 --> 00:03:52.986 A:middle
And get started from
Siri, Bluetooth,

00:03:53.446 --> 00:03:58.006 A:middle
and even get do not disturb
and blocked functionality.

00:03:58.736 --> 00:03:59.976 A:middle
That is CallKit.

00:04:01.516 --> 00:04:09.006 A:middle
[ Applause ]

00:04:09.506 --> 00:04:10.186 A:middle
All right.

00:04:10.406 --> 00:04:12.936 A:middle
So today we're going to go over
the architecture of CallKit

00:04:13.366 --> 00:04:17.036 A:middle
and incoming call flow, and
outgoing call flow, and then end

00:04:17.036 --> 00:04:19.676 A:middle
with some more details
about the API.

00:04:19.676 --> 00:04:20.516 A:middle
So let's get started.

00:04:21.446 --> 00:04:21.736 A:middle
All right.

00:04:21.736 --> 00:04:25.346 A:middle
So over here, we have all our
system services like Bluetooth,

00:04:25.346 --> 00:04:27.846 A:middle
Siri, CarPlay, and
then our Native UI.

00:04:28.426 --> 00:04:31.856 A:middle
And over here, we have all
our VoIP apps like Speakerbox.

00:04:32.546 --> 00:04:34.346 A:middle
These are two separate
entities right now.

00:04:34.806 --> 00:04:37.106 A:middle
Calls made on Speakerbox
are non known to our system

00:04:37.106 --> 00:04:38.586 A:middle
and then our services.

00:04:39.046 --> 00:04:42.416 A:middle
In iOS 10, we have
adopted CallKit

00:04:42.456 --> 00:04:44.116 A:middle
in all our system services.

00:04:44.806 --> 00:04:46.546 A:middle
So now calls made on
Bluetooth are known

00:04:46.546 --> 00:04:48.986 A:middle
to our system UI via CallKit.

00:04:49.706 --> 00:04:52.526 A:middle
So if Speakerbox wants
a similar experience,

00:04:52.696 --> 00:04:54.246 A:middle
it needs to adopt CallKit.

00:04:55.206 --> 00:04:57.536 A:middle
So now calls made on
Speakerbox will get known

00:04:57.536 --> 00:04:58.846 A:middle
to our system via CallKit

00:04:59.326 --> 00:05:02.156 A:middle
and then system can
publish these calls

00:04:59.326 --> 00:05:02.156 A:middle
and then system can
publish these calls

00:05:02.156 --> 00:05:03.706 A:middle
to the rest of our services.

00:05:04.576 --> 00:05:07.386 A:middle
So let's talk a little
bit more about Speakerbox.

00:05:07.786 --> 00:05:11.606 A:middle
So here we have Speakerbox
and all of its code.

00:05:11.996 --> 00:05:15.006 A:middle
It talks to its network
and has its own app UI

00:05:15.006 --> 00:05:17.186 A:middle
and we're going to link CallKit.

00:05:18.516 --> 00:05:21.296 A:middle
So there are two primary classes
in CallKit that we care about.

00:05:22.046 --> 00:05:24.336 A:middle
The first is the CXProvider.

00:05:24.636 --> 00:05:27.966 A:middle
So the provider is the class
that Speakerbox will use

00:05:28.026 --> 00:05:29.746 A:middle
to let the system about any

00:05:30.096 --> 00:05:32.256 A:middle
out of band notifications
that have happened.

00:05:33.356 --> 00:05:36.276 A:middle
The second class is
the CXCallController.

00:05:37.006 --> 00:05:39.996 A:middle
The CXCallController is the
class that Speakerbox will use

00:05:39.996 --> 00:05:42.956 A:middle
to let the system know
about local user actions.

00:05:44.336 --> 00:05:46.006 A:middle
So let's take a deeper look

00:05:46.006 --> 00:05:48.546 A:middle
at these two classes
starting with the provider.

00:05:48.886 --> 00:05:52.266 A:middle
So the provider, like I
said earlier, is the class

00:05:52.266 --> 00:05:54.296 A:middle
that we use to let the
system know about out

00:05:54.296 --> 00:05:55.606 A:middle
of band notifications.

00:05:56.066 --> 00:05:58.636 A:middle
That is these are
not user actions

00:05:59.196 --> 00:06:02.136 A:middle
but actually external
events like, for example,

00:05:59.196 --> 00:06:02.136 A:middle
but actually external
events like, for example,

00:06:02.136 --> 00:06:04.296 A:middle
an incoming call
coming to Speakerbox.

00:06:04.896 --> 00:06:07.256 A:middle
Contrasts this with
the CXCallController.

00:06:07.976 --> 00:06:11.446 A:middle
The CXCallController is the
class that Speakerbox will use

00:06:11.496 --> 00:06:14.146 A:middle
to let the system
know about requests

00:06:14.146 --> 00:06:15.786 A:middle
from within the app itself.

00:06:16.176 --> 00:06:18.546 A:middle
That is these are
actually user actions

00:06:19.656 --> 00:06:22.766 A:middle
and like internal events,
like a start call action.

00:06:24.036 --> 00:06:27.436 A:middle
By using the CallController,
Speakerbox gets to interplay

00:06:27.436 --> 00:06:29.006 A:middle
with other calls on the system.

00:06:30.266 --> 00:06:33.026 A:middle
Say, for example, there's
already an active telephony call

00:06:33.026 --> 00:06:36.096 A:middle
and the user wants to
start a Speakerbox call

00:06:36.216 --> 00:06:37.586 A:middle
from Speakerbox's UI.

00:06:39.036 --> 00:06:42.286 A:middle
By using the controller,
the system gets to know

00:06:42.286 --> 00:06:43.396 A:middle
about the start call action

00:06:43.396 --> 00:06:46.506 A:middle
and then the system can
tell the telephony provider

00:06:46.506 --> 00:06:50.506 A:middle
to hold its call so as to let
the Speakerbox start its call.

00:06:51.996 --> 00:06:54.436 A:middle
So let's take a look at
some examples of this.

00:06:54.976 --> 00:06:57.916 A:middle
So the provider is
used to report

00:06:58.206 --> 00:06:59.936 A:middle
out of band notifications.

00:07:00.256 --> 00:07:03.066 A:middle
Like, for example, an incoming
call coming to Speakerbox

00:07:04.006 --> 00:07:06.256 A:middle
or maybe an outgoing
call getting connected.

00:07:06.946 --> 00:07:09.936 A:middle
Or that outgoing call
ending on the remote side.

00:07:11.136 --> 00:07:14.546 A:middle
Whereas the controller is
used to request actions

00:07:14.796 --> 00:07:17.586 A:middle
from the system like
the user wanting

00:07:17.586 --> 00:07:21.116 A:middle
to start an outgoing call or the
user wanting to answer the call

00:07:21.116 --> 00:07:25.546 A:middle
from Speakerbox or maybe ending
the call from within Speakerbox.

00:07:27.176 --> 00:07:29.566 A:middle
So when the provider
wants to communicate

00:07:29.566 --> 00:07:33.656 A:middle
to the system it uses
the CSXCallUpdate class.

00:07:34.276 --> 00:07:36.426 A:middle
And when the system
wants to let Speakerbox

00:07:36.426 --> 00:07:40.566 A:middle
about any user interactions,
it uses the CXAction classes

00:07:40.676 --> 00:07:41.826 A:middle
to let Speakerbox know.

00:07:41.826 --> 00:07:45.156 A:middle
And the controller communicates

00:07:45.156 --> 00:07:49.206 A:middle
to the system user actions
bundled up into a CSTransaction

00:07:49.736 --> 00:07:51.876 A:middle
to let the system to know
about these user actions.

00:07:52.116 --> 00:07:55.646 A:middle
So that was a lot
of information.

00:07:55.906 --> 00:07:59.616 A:middle
So let's take a look all of
that in an incoming call flow.

00:08:00.886 --> 00:08:03.526 A:middle
So here we have Speakerbox
and Jane gets

00:08:03.526 --> 00:08:04.906 A:middle
that incoming call from Mom.

00:08:05.356 --> 00:08:07.396 A:middle
The incoming call
comes to Speakerbox

00:08:07.656 --> 00:08:10.466 A:middle
and then Speakerbox
creates a CXCallUpdate

00:08:10.826 --> 00:08:13.036 A:middle
and using the provider
sends that to the system.

00:08:13.666 --> 00:08:16.466 A:middle
And then the system can then
publish that incoming call

00:08:16.466 --> 00:08:18.626 A:middle
to all our services
including our UI.

00:08:19.956 --> 00:08:22.966 A:middle
And if Jane wants to answer
the call from within our UI,

00:08:23.566 --> 00:08:25.766 A:middle
the answer action
comes to our system.

00:08:26.286 --> 00:08:30.316 A:middle
Our system can then tell
Speakerbox, we have the provider

00:08:30.616 --> 00:08:33.096 A:middle
to the CXAnswerCallAction

00:08:33.946 --> 00:08:37.206 A:middle
and then Speakerbox can answer
the call however it needs.

00:08:38.216 --> 00:08:40.456 A:middle
And if Jane now wants
to end that call

00:08:40.456 --> 00:08:42.846 A:middle
from within the app's own UI,

00:08:42.846 --> 00:08:45.186 A:middle
the end action comes
to the controller.

00:08:45.526 --> 00:08:47.926 A:middle
The controller bundles it
up into a CXTransaction

00:08:47.926 --> 00:08:51.866 A:middle
and that comes to the system
and if everything looks okay,

00:08:52.256 --> 00:08:55.006 A:middle
the system sends that back up to
the Speakerbox via the provider

00:08:55.006 --> 00:08:58.666 A:middle
and then Speakerbox can
end the call as necessary.

00:09:00.136 --> 00:09:00.726 A:middle
All right.

00:09:00.726 --> 00:09:02.916 A:middle
Now let's take a look all of
that in a demo with Stewart.

00:09:03.516 --> 00:09:08.196 A:middle
[ Applause ]

00:09:08.696 --> 00:09:09.406 A:middle
&gt;&gt; Thanks, Sirisha.

00:09:09.906 --> 00:09:12.456 A:middle
So now that you've heard
about the benefits of CallKit,

00:09:12.886 --> 00:09:14.606 A:middle
I'd like to show
you how to adopt it

00:09:14.606 --> 00:09:17.806 A:middle
in an existing VoIP
application, the Speakerbox app

00:09:17.916 --> 00:09:18.816 A:middle
which Sirisha mentioned.

00:09:19.376 --> 00:09:22.536 A:middle
I'll first show you how to adopt
it to handle an incoming call.

00:09:23.716 --> 00:09:26.746 A:middle
So I'll first open up the
Speakerbox Xscript Project.

00:09:27.386 --> 00:09:32.116 A:middle
Now before I dive into
adopting CallKit in this app,

00:09:32.516 --> 00:09:33.416 A:middle
let me just show
you a little bit

00:09:33.416 --> 00:09:34.726 A:middle
about how the app is structured

00:09:34.726 --> 00:09:35.786 A:middle
so you have a frame
of reference.

00:09:36.576 --> 00:09:39.006 A:middle
So we have two main classes
in the app right now.

00:09:39.776 --> 00:09:43.426 A:middle
The SpeakerboxCallManager class
which maintains a list of calls

00:09:43.426 --> 00:09:45.576 A:middle
in the app and has
certain operations

00:09:45.676 --> 00:09:48.766 A:middle
such as starting a
call and ending a call.

00:09:50.076 --> 00:09:52.916 A:middle
And our other primary
class is SpeakerboxCall.

00:09:53.516 --> 00:09:56.516 A:middle
This is our model class which
represents a single call

00:09:56.516 --> 00:09:59.236 A:middle
in the app and has
metadata about it as well

00:09:59.236 --> 00:10:01.436 A:middle
as some call back blocks
so we can be notified

00:09:59.236 --> 00:10:01.436 A:middle
as some call back blocks
so we can be notified

00:10:01.436 --> 00:10:04.386 A:middle
about the life cycle events
of the call as it progresses.

00:10:05.816 --> 00:10:09.426 A:middle
So like Sirisha mentioned,
the first we need to do

00:10:09.426 --> 00:10:11.066 A:middle
when adopting CallKit is

00:10:11.066 --> 00:10:13.796 A:middle
to create a CXProvider
and set its delegate.

00:10:14.456 --> 00:10:16.836 A:middle
So I'll do that by
creating a new file

00:10:17.636 --> 00:10:19.226 A:middle
called ProviderDelegate.

00:10:23.476 --> 00:10:26.136 A:middle
So into this new file,
I'll bring in some code

00:10:26.136 --> 00:10:28.036 A:middle
that we've already
written but let me walk you

00:10:28.036 --> 00:10:29.596 A:middle
through what this is doing.

00:10:29.906 --> 00:10:32.816 A:middle
So in our initializer
we pass in a reference

00:10:32.866 --> 00:10:34.636 A:middle
to the SpeakerboxCallManager
class.

00:10:35.266 --> 00:10:38.496 A:middle
This allows the ProviderDelegate
to access the app's list

00:10:38.496 --> 00:10:42.326 A:middle
of calls and references them
by UUID which we'll show later.

00:10:43.616 --> 00:10:46.726 A:middle
Next, we have -- we create
a CXProvider instance

00:10:47.266 --> 00:10:50.126 A:middle
and we pass it -- something
called a provider configuration

00:10:50.126 --> 00:10:50.726 A:middle
which we see here.

00:10:51.576 --> 00:10:53.766 A:middle
The provider configuration
is something we'll go

00:10:53.766 --> 00:10:57.196 A:middle
into more detail later in the
session but this allows our app

00:10:57.376 --> 00:10:59.246 A:middle
to configure to the
system a few options

00:10:59.246 --> 00:11:01.576 A:middle
about how it should behave.

00:10:59.246 --> 00:11:01.576 A:middle
about how it should behave.

00:11:01.736 --> 00:11:05.376 A:middle
Now back in our initializer, we
set this class as the delegate

00:11:05.376 --> 00:11:08.576 A:middle
of our provider and
then if necessary,

00:11:09.106 --> 00:11:11.336 A:middle
we request authorization
to use the provider.

00:11:12.486 --> 00:11:15.706 A:middle
So great. So now we have our
provider and our delegate set

00:11:15.706 --> 00:11:18.026 A:middle
but we need to create
this in our app delegate.

00:11:18.866 --> 00:11:21.256 A:middle
So I'll declare a property
for our provider delegate

00:11:21.256 --> 00:11:25.776 A:middle
and I'll instantiate that in
the application did finishing

00:11:25.776 --> 00:11:26.986 A:middle
launching with options method.

00:11:27.916 --> 00:11:31.306 A:middle
Cool. So now we have
a provider in our app.

00:11:31.306 --> 00:11:34.866 A:middle
How does the app respond
to an incoming call?

00:11:35.496 --> 00:11:37.826 A:middle
So if I scroll down, we can see

00:11:37.826 --> 00:11:40.206 A:middle
that the app currently
uses PushKit to learn

00:11:40.206 --> 00:11:42.976 A:middle
about an incoming call
via push notification.

00:11:43.526 --> 00:11:45.306 A:middle
And if we look at what
this code is doing,

00:11:46.096 --> 00:11:48.346 A:middle
we can see that it looks
at the dictionaryPayload

00:11:48.346 --> 00:11:50.856 A:middle
from our push notification
and gets some metadata

00:11:50.856 --> 00:11:54.576 A:middle
about the incoming call
such as UUID and handle

00:11:54.576 --> 00:11:57.616 A:middle
which is an identifier
representing who's calling.

00:11:57.796 --> 00:12:01.296 A:middle
And then we call the
display incoming call method

00:11:57.796 --> 00:12:01.296 A:middle
And then we call the
display incoming call method

00:12:01.876 --> 00:12:03.456 A:middle
and we can see here that this is

00:12:03.456 --> 00:12:06.456 A:middle
where the app hosts the
local notification for --

00:12:06.616 --> 00:12:08.556 A:middle
to show the user
that incoming call.

00:12:09.536 --> 00:12:12.156 A:middle
But when using CallKit
we no longer have to rely

00:12:12.156 --> 00:12:14.166 A:middle
on a local notification
to show this.

00:12:14.686 --> 00:12:18.266 A:middle
We can, instead, use the
system's full screen native

00:12:18.266 --> 00:12:21.206 A:middle
incoming call UI and we want
to do instead because it's

00:12:21.206 --> 00:12:22.616 A:middle
so much richer of an experience.

00:12:23.396 --> 00:12:26.586 A:middle
So to do that, I'll go back
to the ProviderDelegate

00:12:26.586 --> 00:12:28.656 A:middle
and I'm going to
create the helper method

00:12:29.516 --> 00:12:31.986 A:middle
which will allow us to call
the API on our provider.

00:12:33.226 --> 00:12:37.406 A:middle
I'll call that report
IncomingCall and in this method,

00:12:38.196 --> 00:12:40.866 A:middle
I'll start by creating
a CXCallUpdate

00:12:41.336 --> 00:12:44.156 A:middle
which contains metadata to
represent that incoming call.

00:12:45.196 --> 00:12:48.156 A:middle
And then we'll call the
report NewIncomingCall method

00:12:48.156 --> 00:12:51.506 A:middle
on our provider and this is the
step that notifies the system

00:12:51.506 --> 00:12:52.596 A:middle
about that incoming call.

00:12:53.896 --> 00:12:57.756 A:middle
Now, in the completion block,
we'll check if there is an error

00:12:57.756 --> 00:13:01.666 A:middle
and if there wasn't, we create
a SpeakerboxCall instance

00:12:57.756 --> 00:13:01.666 A:middle
and if there wasn't, we create
a SpeakerboxCall instance

00:13:01.666 --> 00:13:05.586 A:middle
and configure it and we add that
call to our app's list of calls.

00:13:06.606 --> 00:13:08.606 A:middle
We'll go into more detail
later in the session

00:13:08.606 --> 00:13:11.346 A:middle
about why there could be an
error here but suffice it

00:13:11.346 --> 00:13:13.196 A:middle
to say, there's certain
conditions

00:13:13.196 --> 00:13:15.676 A:middle
in which the device
will not be prepared

00:13:15.676 --> 00:13:16.766 A:middle
to accept an incoming call.

00:13:18.126 --> 00:13:20.276 A:middle
Okay. So now that we
have this helper method

00:13:20.276 --> 00:13:23.126 A:middle
on our ProviderDelegate, I'll
go back to my app delegate

00:13:23.786 --> 00:13:26.566 A:middle
and just replace this code that
posted the local notification

00:13:26.976 --> 00:13:28.606 A:middle
with a call to our helper.

00:13:29.836 --> 00:13:32.636 A:middle
So great. So now
we're using CallKit

00:13:33.016 --> 00:13:35.126 A:middle
to report an incoming
call that we learned

00:13:35.126 --> 00:13:37.496 A:middle
about from a push
notification to the system

00:13:37.586 --> 00:13:40.636 A:middle
and the system is showing the
full screen Native incoming

00:13:40.636 --> 00:13:41.026 A:middle
call UI.

00:13:41.026 --> 00:13:45.026 A:middle
Well what happens when the
user presses that green button

00:13:45.106 --> 00:13:46.416 A:middle
and answers the incoming call?

00:13:47.776 --> 00:13:48.576 A:middle
When that happens,

00:13:48.576 --> 00:13:51.896 A:middle
our ProviderDelegate will
receive another method

00:13:51.896 --> 00:13:53.046 A:middle
that we need to implement.

00:13:53.936 --> 00:13:58.906 A:middle
And that is the
ProviderPerformAnswerCallAction

00:13:58.906 --> 00:13:59.266 A:middle
method.

00:13:59.856 --> 00:14:01.176 A:middle
Let me walk through
what this is doing.

00:13:59.856 --> 00:14:01.176 A:middle
Let me walk through
what this is doing.

00:14:01.946 --> 00:14:04.136 A:middle
So we start by getting
an instance

00:14:04.176 --> 00:14:07.406 A:middle
of our Speakerbox call class
corresponding to the UUID

00:14:07.406 --> 00:14:08.576 A:middle
of the call that
we're answering.

00:14:09.926 --> 00:14:13.026 A:middle
Next, we call the answer
Speakerbox call method

00:14:13.026 --> 00:14:16.936 A:middle
and this is some code that
was elsewhere app prior to now

00:14:17.256 --> 00:14:18.946 A:middle
and this talks to our
network to tell it

00:14:18.946 --> 00:14:19.966 A:middle
to actually answer that call.

00:14:20.496 --> 00:14:22.916 A:middle
And now we do it here in our
ProviderDelegate call back.

00:14:24.106 --> 00:14:27.066 A:middle
And last, we call
fulfill on our action.

00:14:28.076 --> 00:14:30.916 A:middle
In CallKit, every action
must either be fulfilled

00:14:30.916 --> 00:14:33.656 A:middle
if it was successful or
failed it there was an error

00:14:33.656 --> 00:14:34.496 A:middle
in processing in that.

00:14:35.146 --> 00:14:37.436 A:middle
And we can actually see
a few lines above here,

00:14:37.956 --> 00:14:41.096 A:middle
if we were unable to find a
Speakerbox call for this UUID,

00:14:41.336 --> 00:14:42.996 A:middle
we call the failed
method on our action

00:14:43.186 --> 00:14:44.436 A:middle
to indicate that to the system.

00:14:44.836 --> 00:14:49.616 A:middle
So this method handles
answering the call but what

00:14:49.616 --> 00:14:51.196 A:middle
about when the user
wants to end the call?

00:14:52.136 --> 00:14:56.036 A:middle
For that, we have a similar
delegate method called

00:14:56.476 --> 00:14:58.616 A:middle
ProviderPerformEndCallAction.

00:14:59.186 --> 00:15:00.526 A:middle
And this is very similar.

00:14:59.186 --> 00:15:00.526 A:middle
And this is very similar.

00:15:01.016 --> 00:15:03.776 A:middle
It looks up a call
based on the UUID.

00:15:04.286 --> 00:15:07.646 A:middle
It talks to our network using
endSpeakerBoxCall method.

00:15:08.626 --> 00:15:10.136 A:middle
It signals that that
was successful

00:15:10.136 --> 00:15:11.616 A:middle
to the system by
calling fulfill.

00:15:12.496 --> 00:15:15.016 A:middle
And it removes the call from
the app's list of calls.

00:15:16.116 --> 00:15:18.566 A:middle
So we're almost done
handling the incoming call

00:15:18.956 --> 00:15:20.566 A:middle
but there's one other
thing we need to consider

00:15:20.776 --> 00:15:22.276 A:middle
when handling that
incoming call.

00:15:22.586 --> 00:15:24.206 A:middle
And that is our call's audio.

00:15:25.296 --> 00:15:28.776 A:middle
So when using CallKit, you will
no longer activate your app's

00:15:28.776 --> 00:15:30.116 A:middle
audio session directly.

00:15:30.726 --> 00:15:33.586 A:middle
Instead you will only
configure the audio session

00:15:33.946 --> 00:15:36.136 A:middle
and the system will actually
activate your app's audio

00:15:36.136 --> 00:15:38.206 A:middle
session for you at
an elevated priority.

00:15:38.946 --> 00:15:42.206 A:middle
So let me show you
how that works.

00:15:42.366 --> 00:15:45.676 A:middle
Back in our
PerformAnswerCallAction method,

00:15:46.706 --> 00:15:49.296 A:middle
I'll insert a call to
this function configure

00:15:49.296 --> 00:15:50.066 A:middle
audio session.

00:15:50.996 --> 00:15:52.746 A:middle
And this does like it says,

00:15:52.746 --> 00:15:54.526 A:middle
it configures the
app's audio session

00:15:54.556 --> 00:15:56.706 A:middle
but does not activate it.

00:15:56.936 --> 00:15:59.656 A:middle
Instead our audio session will
be activated by the system

00:16:00.226 --> 00:16:01.326 A:middle
and after that happens,

00:16:01.326 --> 00:16:03.876 A:middle
we'll receive a delegate
call back called Provider

00:16:04.106 --> 00:16:05.426 A:middle
didActivate audioSession.

00:16:05.836 --> 00:16:08.316 A:middle
And this is the point where
we begin processing our

00:16:08.316 --> 00:16:08.986 A:middle
call's audio.

00:16:09.466 --> 00:16:14.806 A:middle
Now the last step is to stop
processing our call's audio

00:16:15.056 --> 00:16:18.336 A:middle
in the PerformEndCallAction
method.

00:16:18.466 --> 00:16:20.136 A:middle
Okay. So that's all
the code we need

00:16:20.136 --> 00:16:23.036 A:middle
to handle an incoming
call using CallKit.

00:16:23.646 --> 00:16:27.996 A:middle
And now I've got on my device
setup to mirror to the screen

00:16:28.456 --> 00:16:32.366 A:middle
and let's build and run
the app on the device.

00:16:32.496 --> 00:16:33.866 A:middle
So for the purpose of this demo,

00:16:33.926 --> 00:16:36.426 A:middle
I'll just simulate an
incoming call using this button

00:16:36.426 --> 00:16:36.986 A:middle
at the bottom.

00:16:37.936 --> 00:16:39.066 A:middle
And now when I press this,

00:16:39.666 --> 00:16:43.046 A:middle
we'll see our call using
Speakerbox presented using the

00:16:43.046 --> 00:16:44.956 A:middle
full screen Native
incoming call UI.

00:16:44.956 --> 00:16:48.226 A:middle
And I can just accept that call

00:16:48.696 --> 00:16:50.696 A:middle
and our ProviderDelegate
receives the

00:16:50.696 --> 00:16:52.786 A:middle
PerformAnswerCallAction method.

00:16:53.256 --> 00:16:56.866 A:middle
It fulfills that and then
finally, when I'm done talking

00:16:56.866 --> 00:17:01.416 A:middle
to Jane I can just end the call
and our app, ProviderDelegate,

00:16:56.866 --> 00:17:01.416 A:middle
to Jane I can just end the call
and our app, ProviderDelegate,

00:17:01.416 --> 00:17:02.266 A:middle
fulfills that as well.

00:17:03.056 --> 00:17:06.266 A:middle
So that's a demo of handling
an incoming call using CallKit.

00:17:06.266 --> 00:17:08.665 A:middle
And I'll now pass
it back to Sirisha.

00:17:09.185 --> 00:17:09.556 A:middle
Thanks.

00:17:10.516 --> 00:17:15.606 A:middle
[ Applause ]

00:17:16.106 --> 00:17:16.786 A:middle
&gt;&gt; Thank you, Stewart.

00:17:17.606 --> 00:17:19.506 A:middle
So let's take a look at
what Stewart just showed us.

00:17:20.215 --> 00:17:22.306 A:middle
So first, we reported
incoming calls

00:17:22.306 --> 00:17:24.736 A:middle
to the system via the report
new incoming call API.

00:17:24.826 --> 00:17:28.086 A:middle
Then we handled an
answer call action

00:17:28.086 --> 00:17:30.896 A:middle
by implementing the delegate
method perform action answer

00:17:31.136 --> 00:17:32.186 A:middle
call action.

00:17:32.756 --> 00:17:35.236 A:middle
Then once we've actually
answered the call, we fulfilled

00:17:35.236 --> 00:17:37.326 A:middle
that action by calling
the fulfill API.

00:17:38.106 --> 00:17:40.706 A:middle
So CallKit can do more
than just answer calls.

00:17:40.966 --> 00:17:43.536 A:middle
Here a list of all our other
actions that we support.

00:17:44.006 --> 00:17:48.226 A:middle
As you can see, there's holds,
group, play DTMF, and many more.

00:17:49.176 --> 00:17:52.716 A:middle
So now let's spend a few seconds
talking about multiple calls.

00:17:53.346 --> 00:17:55.866 A:middle
So say Speakerbox can
handle more than one call.

00:17:56.566 --> 00:17:57.996 A:middle
Right here, in this example,

00:17:57.996 --> 00:18:00.556 A:middle
there's already an active
Speakerbox call going on

00:17:57.996 --> 00:18:00.556 A:middle
there's already an active
Speakerbox call going on

00:18:00.686 --> 00:18:02.706 A:middle
and then there's an
incoming call waiting call.

00:18:03.466 --> 00:18:05.616 A:middle
Now if the user wants
to end the active call

00:18:05.616 --> 00:18:08.876 A:middle
and the answer incoming waiting
call from within the Native UI,

00:18:09.506 --> 00:18:12.376 A:middle
the system will send
Speakerbox a CXTransaction.

00:18:12.536 --> 00:18:17.136 A:middle
A CXTransaction is nothing
more than just a list

00:18:17.136 --> 00:18:18.596 A:middle
of one or more actions.

00:18:18.596 --> 00:18:22.236 A:middle
In this case, it's a list
of end and answer actions.

00:18:22.896 --> 00:18:25.946 A:middle
And once Speakerbox has handled
each of these and performed each

00:18:25.946 --> 00:18:28.076 A:middle
of these actions, it
needs to fulfill each

00:18:28.076 --> 00:18:30.496 A:middle
of them individually so
that the system knows

00:18:30.776 --> 00:18:31.686 A:middle
to transition the UI.

00:18:31.686 --> 00:18:32.006 A:middle
All right.

00:18:33.416 --> 00:18:36.396 A:middle
Now I'll hand this
off to Nick to take us

00:18:36.396 --> 00:18:37.536 A:middle
through an outgoing call flow.

00:18:38.516 --> 00:18:41.026 A:middle
[ Applause ]

00:18:41.526 --> 00:18:42.206 A:middle
&gt;&gt; Thanks, Sirisha.

00:18:43.276 --> 00:18:44.686 A:middle
So let's check back
in with Jane.

00:18:45.436 --> 00:18:46.796 A:middle
She talked to her mom yesterday

00:18:46.946 --> 00:18:49.446 A:middle
but today she's feeling a little
homesick and would like to check

00:18:49.446 --> 00:18:50.226 A:middle
in with the home front.

00:18:51.096 --> 00:18:52.976 A:middle
So let's see what it takes
to make an outgoing call.

00:18:57.206 --> 00:19:00.016 A:middle
So the first thing that happens
when Jane goes into recents

00:18:57.206 --> 00:19:00.016 A:middle
So the first thing that happens
when Jane goes into recents

00:19:00.016 --> 00:19:03.786 A:middle
and taps to call her mom back is
our app is going to get launched

00:19:03.786 --> 00:19:05.486 A:middle
with a start call intent.

00:19:06.616 --> 00:19:09.756 A:middle
Now some of you may have already
seen the introducing SiriKit

00:19:09.756 --> 00:19:14.026 A:middle
session where we introduced
intents but if you'd

00:19:14.026 --> 00:19:15.166 A:middle
like to find out
more information,

00:19:15.166 --> 00:19:16.696 A:middle
you can always watch
the video online.

00:19:17.786 --> 00:19:20.066 A:middle
In a nutshell though,
an intent is an object

00:19:20.096 --> 00:19:22.166 A:middle
that represents a
desired user action,

00:19:22.636 --> 00:19:24.426 A:middle
is wrapped up in
an NSUser activity,

00:19:24.426 --> 00:19:27.306 A:middle
and then passed back to our app.

00:19:27.486 --> 00:19:30.386 A:middle
So our app has received
the start call intent

00:19:30.616 --> 00:19:33.926 A:middle
and now we've constructed
a start call action based

00:19:33.926 --> 00:19:35.496 A:middle
on the information
on that intent.

00:19:36.676 --> 00:19:37.726 A:middle
We'll take that action

00:19:38.296 --> 00:19:40.616 A:middle
and request it via
the CallController.

00:19:41.836 --> 00:19:44.086 A:middle
The CallController will
then pass that action

00:19:44.156 --> 00:19:47.166 A:middle
through to the system and if
it's accepted, it will come back

00:19:47.246 --> 00:19:49.026 A:middle
to our app via the
ProviderDelegate.

00:19:50.296 --> 00:19:52.266 A:middle
Then finally our app
can take that action

00:19:52.916 --> 00:19:55.716 A:middle
and use the necessary
commands on our network

00:19:55.986 --> 00:19:56.986 A:middle
to make that outgoing call.

00:19:57.606 --> 00:19:59.626 A:middle
So now let's take a
look at the life cycle

00:19:59.626 --> 00:20:00.976 A:middle
of the outgoing call
from this point.

00:19:59.626 --> 00:20:00.976 A:middle
of the outgoing call
from this point.

00:20:02.036 --> 00:20:04.326 A:middle
So we've just begun performing
the start call action.

00:20:05.076 --> 00:20:07.906 A:middle
So the call is in
a starting state.

00:20:08.066 --> 00:20:10.426 A:middle
From here, we'll finish
executing the action

00:20:10.806 --> 00:20:13.776 A:middle
and fulfill the action to move
the call to a started state.

00:20:15.206 --> 00:20:17.466 A:middle
Then when the remote
side answers the call,

00:20:18.446 --> 00:20:21.846 A:middle
we'll notify the provider that
the call has started connecting.

00:20:23.226 --> 00:20:25.706 A:middle
And then finally,
we'll tell the provider

00:20:25.816 --> 00:20:28.616 A:middle
that the call has connected
to inform the system

00:20:28.616 --> 00:20:30.706 A:middle
that the two parties can
begin talking to each other.

00:20:31.216 --> 00:20:34.226 A:middle
So now I'd like to
bring Stewart back us --

00:20:34.286 --> 00:20:36.206 A:middle
back up to give us another demo.

00:20:37.516 --> 00:20:41.066 A:middle
[ Applause ]

00:20:41.566 --> 00:20:42.016 A:middle
&gt;&gt; Thanks, Nick.

00:20:42.526 --> 00:20:44.616 A:middle
So now I'd like to give
you part two of our demo

00:20:44.616 --> 00:20:46.566 A:middle
of adopting CallKit
and Speakerbox.

00:20:46.996 --> 00:20:49.906 A:middle
This time how to use it to
handle an outgoing call.

00:20:50.896 --> 00:20:54.236 A:middle
I'll open up the Speakerbox
Xscript project again.

00:20:55.196 --> 00:20:57.446 A:middle
Now back in our app
delegate class,

00:20:58.056 --> 00:21:01.556 A:middle
we can see that Speakerbox
already handles being launched

00:20:58.056 --> 00:21:01.556 A:middle
we can see that Speakerbox
already handles being launched

00:21:01.656 --> 00:21:03.866 A:middle
with a URL to start a new call.

00:21:04.696 --> 00:21:06.636 A:middle
But when using CallKit,

00:21:06.936 --> 00:21:09.996 A:middle
the process of dialing an
outgoing call is similar

00:21:10.546 --> 00:21:14.266 A:middle
but when the user starts a call
from places like the phone apps,

00:21:14.266 --> 00:21:17.926 A:middle
recents tab, or a
contact card or from Siri,

00:21:17.926 --> 00:21:21.056 A:middle
the app will be launched with
an intent and that will be given

00:21:21.056 --> 00:21:23.186 A:middle
to us via an NSUser activity.

00:21:24.296 --> 00:21:27.586 A:middle
So the first step in
using CallKit here is

00:21:27.586 --> 00:21:31.736 A:middle
to implement the application
continue user activity method.

00:21:32.876 --> 00:21:34.416 A:middle
And taking a look at
what this is doing,

00:21:35.006 --> 00:21:39.166 A:middle
we look at our NSUser
activity and we get the value

00:21:39.166 --> 00:21:40.836 A:middle
of the startCallHandle property.

00:21:41.526 --> 00:21:43.686 A:middle
This is some code we've
already written to look

00:21:43.686 --> 00:21:48.326 A:middle
at the NSUser activity, get the
intent, and return the handle

00:21:48.326 --> 00:21:49.376 A:middle
which is a string

00:21:49.376 --> 00:21:52.506 A:middle
which represents the
person we want to call.

00:21:52.506 --> 00:21:53.556 A:middle
Now once we have our handle,

00:21:54.346 --> 00:21:57.446 A:middle
the process of starting
a new call is identical

00:21:57.446 --> 00:21:58.706 A:middle
to the URL handler above.

00:21:59.026 --> 00:22:02.016 A:middle
We just call the start call
method on our call manager.

00:21:59.026 --> 00:22:02.016 A:middle
We just call the start call
method on our call manager.

00:22:03.036 --> 00:22:06.666 A:middle
So now let's look at what
this method is doing.

00:22:06.846 --> 00:22:09.336 A:middle
So we can see in the
SpeakerboxCallManager class

00:22:09.836 --> 00:22:12.336 A:middle
that we start a call by
creating a new instance

00:22:12.336 --> 00:22:14.116 A:middle
of our model class,
Speakerbox call,

00:22:15.026 --> 00:22:18.026 A:middle
and then we call the
startSpeakerBoxCall method

00:22:18.406 --> 00:22:20.786 A:middle
which talks to our network
and actually starts that call.

00:22:21.596 --> 00:22:25.066 A:middle
And finally we add this
call to our list of calls.

00:22:26.166 --> 00:22:28.886 A:middle
But now this is not yet using
CallKit to notify the system

00:22:28.886 --> 00:22:30.666 A:middle
about our intention
to start a new call.

00:22:30.726 --> 00:22:31.806 A:middle
And we need to do that.

00:22:32.316 --> 00:22:34.916 A:middle
So I'm going to remove this
code for now and I'm going

00:22:34.916 --> 00:22:36.526 A:middle
to add parts of it back later.

00:22:38.216 --> 00:22:41.666 A:middle
The first step of adopting
CallKit in this class is

00:22:41.666 --> 00:22:42.536 A:middle
to import the framework.

00:22:42.976 --> 00:22:49.016 A:middle
And then I need that second
class which Sirisha mentioned,

00:22:49.096 --> 00:22:50.636 A:middle
the CXCallController class.

00:22:51.106 --> 00:22:55.396 A:middle
And now that I have that,
in our start call method,

00:22:56.286 --> 00:23:00.076 A:middle
I need to create a
startCallAction and configure it

00:22:56.286 --> 00:23:00.076 A:middle
I need to create a
startCallAction and configure it

00:23:00.076 --> 00:23:01.866 A:middle
with the handle that
we want to dial.

00:23:03.156 --> 00:23:06.886 A:middle
Then I create a CXTransaction
containing that action

00:23:07.976 --> 00:23:11.056 A:middle
and finally I call
request transaction

00:23:11.056 --> 00:23:13.246 A:middle
on our callController to
request that from the system.

00:23:13.796 --> 00:23:17.376 A:middle
Now just to reiterate a point
that Sirisha mentioned earlier,

00:23:18.006 --> 00:23:21.106 A:middle
you maybe wondering why we need
to request this transaction

00:23:21.106 --> 00:23:22.456 A:middle
from the system when it seems

00:23:22.456 --> 00:23:24.496 A:middle
like everything that's
happening here is happening

00:23:24.496 --> 00:23:25.216 A:middle
within our own app.

00:23:26.056 --> 00:23:29.146 A:middle
And the reason for that
is that when you attempt

00:23:29.146 --> 00:23:30.266 A:middle
to begin an outgoing call,

00:23:30.486 --> 00:23:32.986 A:middle
there may already be a call
elsewhere on the system.

00:23:33.166 --> 00:23:36.586 A:middle
For instance, if the user is
in a phone or a FaceTime call,

00:23:36.966 --> 00:23:38.476 A:middle
or even a call from
another VoIP app.

00:23:39.126 --> 00:23:41.516 A:middle
If that happens, the
system needs to hold

00:23:41.516 --> 00:23:43.476 A:middle
that call before
your call can begin.

00:23:43.996 --> 00:23:46.496 A:middle
So that's why we need to
request action from the system

00:23:46.766 --> 00:23:48.656 A:middle
to let it know about
those intentions.

00:23:51.016 --> 00:23:53.826 A:middle
So now, once the system receives

00:23:53.826 --> 00:23:57.096 A:middle
and improves our start call
action, it's going to send

00:23:57.096 --> 00:23:59.976 A:middle
that back to our app via
our ProviderDelegate.

00:24:00.756 --> 00:24:02.346 A:middle
So I need to implement
another method

00:24:02.346 --> 00:24:03.766 A:middle
on our ProviderDelegate class.

00:24:04.706 --> 00:24:08.716 A:middle
This time it's the provider
perform StartCallAction method.

00:24:09.396 --> 00:24:10.496 A:middle
And let's fill this
out together.

00:24:11.926 --> 00:24:14.466 A:middle
So we start same
as we did before

00:24:14.466 --> 00:24:17.156 A:middle
of creating a Speakerbox
call model instance

00:24:17.426 --> 00:24:18.776 A:middle
and configuring it
with the handle

00:24:18.776 --> 00:24:19.696 A:middle
which we're going to dial.

00:24:21.026 --> 00:24:24.946 A:middle
Then we configure our audio
session just like we did

00:24:24.946 --> 00:24:28.216 A:middle
when answering a call
previously and next,

00:24:28.326 --> 00:24:30.886 A:middle
we need to configure a few
properties on our call.

00:24:31.236 --> 00:24:32.796 A:middle
And there's a lot
going on in this one

00:24:32.916 --> 00:24:35.136 A:middle
so let's walk through it.

00:24:35.176 --> 00:24:37.836 A:middle
We set two call back
blocks on our call.

00:24:38.626 --> 00:24:40.966 A:middle
The
hasStartedConnectingDidChange

00:24:41.406 --> 00:24:43.436 A:middle
and hasConnctedDidChange.

00:24:44.256 --> 00:24:47.056 A:middle
These are asynchronous call back
blocks which will be invoked

00:24:47.406 --> 00:24:50.316 A:middle
when the call progresses
to connected and finally

00:24:50.316 --> 00:24:52.106 A:middle
to connecting and
then to connected.

00:24:52.416 --> 00:24:54.616 A:middle
And in these call back blocks,

00:24:54.956 --> 00:24:57.466 A:middle
we report to the system
the progress of the call.

00:24:57.776 --> 00:24:59.586 A:middle
And it allows the system
to be aware of that

00:24:59.586 --> 00:25:02.166 A:middle
and reflect it in the UI.

00:24:59.586 --> 00:25:02.166 A:middle
and reflect it in the UI.

00:25:02.246 --> 00:25:06.306 A:middle
So with that set, we can now
call the startSpeakerboxCall

00:25:06.306 --> 00:25:07.486 A:middle
method on our call.

00:25:08.076 --> 00:25:09.486 A:middle
And this again, talks
to our network

00:25:09.696 --> 00:25:10.776 A:middle
and it starts it outgoing.

00:25:11.796 --> 00:25:15.206 A:middle
We fulfill the action to
indicate success to the system

00:25:16.006 --> 00:25:18.056 A:middle
and add the call to
the callManager's list.

00:25:18.556 --> 00:25:24.596 A:middle
Okay. So this handles starting
the outgoing call but what

00:25:24.596 --> 00:25:27.046 A:middle
about when the user wants to
end that call and this time

00:25:27.046 --> 00:25:29.216 A:middle
from within our own --
or the app's own UI?

00:25:30.246 --> 00:25:32.216 A:middle
So for that, we need to go back

00:25:32.216 --> 00:25:34.096 A:middle
to our Speakerbox
callManager class

00:25:34.096 --> 00:25:35.126 A:middle
and look at the end method.

00:25:36.086 --> 00:25:37.716 A:middle
And we can see here that just

00:25:37.716 --> 00:25:39.536 A:middle
like the start call
method before,

00:25:39.956 --> 00:25:41.226 A:middle
this is not yet using CallKit.

00:25:41.946 --> 00:25:43.716 A:middle
So I need to replace
it with code that does.

00:25:44.916 --> 00:25:48.676 A:middle
I'll just drag this in and we
can see that this creates an end

00:25:48.676 --> 00:25:51.556 A:middle
to call action and it
wraps it in a transaction

00:25:52.146 --> 00:25:53.796 A:middle
and then requests
that transaction

00:25:53.796 --> 00:25:54.676 A:middle
from the callController.

00:25:55.586 --> 00:25:58.566 A:middle
But this time, we don't need
to do anything further back

00:25:58.566 --> 00:26:01.136 A:middle
in our ProviderDelegate
because as you can see,

00:25:58.566 --> 00:26:01.136 A:middle
in our ProviderDelegate
because as you can see,

00:26:01.506 --> 00:26:03.706 A:middle
we already implemented
this earlier in the demo.

00:26:04.706 --> 00:26:07.366 A:middle
So that's all the code that we
need to handle an outgoing call

00:26:07.626 --> 00:26:09.946 A:middle
and I'll now build and
run the app on the device.

00:26:09.946 --> 00:26:10.976 A:middle
And give you another demo.

00:26:17.176 --> 00:26:20.106 A:middle
So I've built and updated
the app on the device

00:26:20.386 --> 00:26:22.296 A:middle
but to show you an
outgoing call, I'd actually

00:26:22.296 --> 00:26:26.266 A:middle
like to go back to the phone
app under a contact card.

00:26:26.686 --> 00:26:30.116 A:middle
And we can now see the
Speakerbox app listed right

00:26:30.116 --> 00:26:34.076 A:middle
on the contact card and I just
can tap this to launch our app.

00:26:34.076 --> 00:26:36.636 A:middle
And when we do, our
app will be launched.

00:26:36.866 --> 00:26:38.506 A:middle
It will receive that intent

00:26:39.066 --> 00:26:42.996 A:middle
and it will start a call
using the callController.

00:26:43.346 --> 00:26:46.176 A:middle
It will request a transaction
which will be approved

00:26:46.176 --> 00:26:49.566 A:middle
by the system and fed
to our ProviderDelegate

00:26:49.566 --> 00:26:51.216 A:middle
which will then fulfill
that action.

00:26:51.726 --> 00:26:52.496 A:middle
And here we go.

00:26:52.496 --> 00:26:53.646 A:middle
We just saw that happen.

00:26:54.046 --> 00:26:57.316 A:middle
The call is now active.

00:26:57.506 --> 00:27:00.656 A:middle
So now once the call is
active, if I home out,

00:26:57.506 --> 00:27:00.656 A:middle
So now once the call is
active, if I home out,

00:27:01.036 --> 00:27:01.966 A:middle
we can see something new.

00:27:02.266 --> 00:27:06.236 A:middle
For the first time, the green
double height status bar is

00:27:06.236 --> 00:27:08.466 A:middle
shown for our app.

00:27:08.906 --> 00:27:11.306 A:middle
Previously this was
reserved for the native phone

00:27:11.306 --> 00:27:13.836 A:middle
and FaceTime calls
only but if I tap this,

00:27:14.236 --> 00:27:15.976 A:middle
we'll be sent right
back to Speakerbox.

00:27:16.516 --> 00:27:19.796 A:middle
[ Applause ]

00:27:20.296 --> 00:27:20.576 A:middle
Thank you.

00:27:21.806 --> 00:27:24.766 A:middle
Then when I'm done
talking, I can end the call

00:27:24.766 --> 00:27:27.896 A:middle
and this will request an end
call action from the system

00:27:28.006 --> 00:27:29.376 A:middle
which our ProviderDelegate
will fulfill.

00:27:30.516 --> 00:27:34.416 A:middle
So that's all demo for handling
an outgoing call using CallKit.

00:27:34.416 --> 00:27:36.866 A:middle
I'll pass it back to
Nick to recap and go

00:27:36.866 --> 00:27:38.346 A:middle
over a few other API details.

00:27:38.666 --> 00:27:38.936 A:middle
Thanks.

00:27:39.516 --> 00:27:43.500 A:middle
[ Applause ]

00:27:46.466 --> 00:27:47.036 A:middle
&gt;&gt; Thanks, Stewart.

00:27:47.836 --> 00:27:50.366 A:middle
So first let's take a quick
look at what we just saw.

00:27:52.936 --> 00:27:56.106 A:middle
The first thing that happened is
Speakerbox received a start call

00:27:56.106 --> 00:27:59.346 A:middle
intent, created a start call
action based on that intent,

00:27:59.906 --> 00:28:01.646 A:middle
and then requested
that start call action.

00:27:59.906 --> 00:28:01.646 A:middle
and then requested
that start call action.

00:28:02.886 --> 00:28:05.116 A:middle
Then the start call
action was received via the

00:28:05.116 --> 00:28:08.106 A:middle
ProviderDelegate,
executed, and then fulfilled.

00:28:08.146 --> 00:28:12.556 A:middle
And then finally, Speakerbox
reported that the call moved

00:28:12.556 --> 00:28:15.156 A:middle
to connecting and then
finally connected.

00:28:15.676 --> 00:28:22.866 A:middle
So, now that we've seen a few
basic flows let's dive into some

00:28:22.866 --> 00:28:24.576 A:middle
of the details of the
API to really round

00:28:24.576 --> 00:28:25.636 A:middle
out our usage of CallKit.

00:28:25.636 --> 00:28:30.746 A:middle
And in particular, we'll take a
look the provider authorization

00:28:30.746 --> 00:28:33.366 A:middle
and configuration to
help customize our app

00:28:33.366 --> 00:28:33.976 A:middle
in the native UI.

00:28:34.976 --> 00:28:37.326 A:middle
We'll take a look at how
to handle action errors

00:28:37.646 --> 00:28:40.516 A:middle
and system restrictions and
then finally, we'll take a look

00:28:40.516 --> 00:28:47.206 A:middle
at how CallKit plays a role in
our call's audio on our app.

00:28:47.456 --> 00:28:51.866 A:middle
So as with other APIs like
contacts and core location,

00:28:52.576 --> 00:28:54.736 A:middle
CallKit requires permission
from the user to use.

00:28:55.386 --> 00:28:57.316 A:middle
And because of this,
one of the first things

00:28:57.316 --> 00:29:00.636 A:middle
that your app should do when it
launches is check its current

00:28:57.316 --> 00:29:00.636 A:middle
that your app should do when it
launches is check its current

00:29:00.636 --> 00:29:01.646 A:middle
authorization status.

00:29:02.556 --> 00:29:04.936 A:middle
This may have changed since the
last time your app was launched.

00:29:05.206 --> 00:29:06.756 A:middle
If the user went into settings

00:29:06.756 --> 00:29:08.306 A:middle
and maybe enabled or
disabled your app.

00:29:09.696 --> 00:29:11.486 A:middle
Then from here, if you discover

00:29:11.486 --> 00:29:13.676 A:middle
that your app's authorization
status has not

00:29:13.676 --> 00:29:16.836 A:middle
yet been determined, you
should request authorization

00:29:16.836 --> 00:29:17.396 A:middle
for your app.

00:29:18.266 --> 00:29:21.166 A:middle
And what this does is it tells
the system to display an alert

00:29:21.166 --> 00:29:23.116 A:middle
to the user to request
permission.

00:29:23.636 --> 00:29:26.916 A:middle
And this is done on behalf of
your app and because it's done

00:29:26.916 --> 00:29:28.976 A:middle
on behalf of your app,
you should always be sure

00:29:29.136 --> 00:29:35.386 A:middle
to include an informative usage
string in your app's info.plist.

00:29:35.526 --> 00:29:37.436 A:middle
And lastly while
your app is launched,

00:29:37.996 --> 00:29:39.816 A:middle
you should always be sure
to observe and listen

00:29:40.256 --> 00:29:42.796 A:middle
to any authorization status
changes that may happen

00:29:43.266 --> 00:29:46.796 A:middle
so that you can always show the
most up-to-date UI to your user.

00:29:49.616 --> 00:29:52.086 A:middle
So now let's talk about
the provider configuration.

00:29:52.696 --> 00:29:55.696 A:middle
So the provider configuration
is a way for your app

00:29:55.806 --> 00:29:59.126 A:middle
to customize its in
call experience directly

00:29:59.126 --> 00:30:00.376 A:middle
in the Native and Call UI.

00:29:59.126 --> 00:30:00.376 A:middle
in the Native and Call UI.

00:30:00.376 --> 00:30:06.366 A:middle
Some of the things that can
be customized are your app's

00:30:06.366 --> 00:30:08.496 A:middle
localized name to
display for your calls.

00:30:09.746 --> 00:30:11.516 A:middle
This also includes
certain capabilities

00:30:11.516 --> 00:30:14.256 A:middle
such as whether your app
supports video calling.

00:30:14.976 --> 00:30:16.696 A:middle
And this even includes things

00:30:16.696 --> 00:30:21.076 A:middle
like specifying your own masked
image icon to show directly

00:30:21.076 --> 00:30:22.606 A:middle
in one of the buttons
of the end call UI.

00:30:23.546 --> 00:30:26.986 A:middle
And when tapped, this will take
the user directly to your app.

00:30:28.356 --> 00:30:30.036 A:middle
Just a note though
that this support

00:30:30.036 --> 00:30:31.856 A:middle
for this app icon
will be available

00:30:31.856 --> 00:30:32.756 A:middle
in a future seed [phonetic].

00:30:33.276 --> 00:30:39.346 A:middle
So we've taken a look at what
happens when things go smoothly

00:30:39.346 --> 00:30:41.146 A:middle
when executing actions
but what happens

00:30:41.146 --> 00:30:42.456 A:middle
when we run into a problem?

00:30:43.356 --> 00:30:45.666 A:middle
Well take a look at the
outgoing example from before.

00:30:46.656 --> 00:30:50.106 A:middle
We've just started performing
the start call action.

00:30:50.906 --> 00:30:52.166 A:middle
Let's say that in the process

00:30:52.166 --> 00:30:54.276 A:middle
of performing that,
we run into an error.

00:30:54.986 --> 00:30:56.596 A:middle
Maybe we don't have
good connectivity

00:30:56.596 --> 00:30:57.666 A:middle
with our network server,

00:30:57.666 --> 00:30:59.376 A:middle
so we can't actually
make the outgoing call.

00:31:00.796 --> 00:31:04.556 A:middle
Well in this case, we should
fail the start call action.

00:31:05.306 --> 00:31:09.416 A:middle
And the reason this is important
is because it informs a system

00:31:09.416 --> 00:31:10.476 A:middle
that something went wrong.

00:31:11.056 --> 00:31:12.866 A:middle
And then the system
can, in turn,

00:31:13.686 --> 00:31:16.646 A:middle
inform the user via things
like call failure UI.

00:31:17.436 --> 00:31:22.646 A:middle
And along with these action
errors are action time outs.

00:31:23.986 --> 00:31:27.156 A:middle
So each action on the
system has a particular time

00:31:27.156 --> 00:31:28.176 A:middle
out associated with it.

00:31:28.896 --> 00:31:31.536 A:middle
And these time outs are
important because they assure

00:31:31.536 --> 00:31:35.236 A:middle
that actions initiated
by the user are performed

00:31:35.626 --> 00:31:38.376 A:middle
in a performance and
responsive manner.

00:31:39.046 --> 00:31:42.366 A:middle
So because of this, your
app should always be sure

00:31:42.366 --> 00:31:45.406 A:middle
to perform those actions
in a timely manner.

00:31:46.786 --> 00:31:49.326 A:middle
However, if an action
does time out,

00:31:50.116 --> 00:31:53.656 A:middle
your app will be notified via
an appropriate provider delegate

00:31:53.656 --> 00:31:55.976 A:middle
method at which point it
can react appropriately.

00:32:00.446 --> 00:32:03.056 A:middle
So based on the current
state of the device,

00:32:03.386 --> 00:32:05.846 A:middle
certain system restrictions
may be in place.

00:32:06.856 --> 00:32:09.306 A:middle
And we'll take a look at an
incoming call as an example.

00:32:10.656 --> 00:32:13.116 A:middle
One of the reasons
why your calls --

00:32:13.116 --> 00:32:17.766 A:middle
your app's incoming call
might be denied is, perhaps,

00:32:17.766 --> 00:32:21.586 A:middle
the user has disabled your app
and it's no longer authorized.

00:32:22.696 --> 00:32:25.576 A:middle
Or maybe the remote caller
for the incoming call is

00:32:25.576 --> 00:32:26.826 A:middle
in the user's blocked list.

00:32:27.636 --> 00:32:30.936 A:middle
Or perhaps the user has enabled
do not disturb and doesn't want

00:32:30.936 --> 00:32:34.806 A:middle
to see any incoming calls
at the current time.

00:32:35.016 --> 00:32:36.386 A:middle
Well for all of these cases,

00:32:37.106 --> 00:32:40.516 A:middle
you app will be notified via
completion handlers on the API.

00:32:42.076 --> 00:32:42.696 A:middle
For example,

00:32:42.696 --> 00:32:45.926 A:middle
the reportNewIncomingCall
API passes back an error

00:32:45.926 --> 00:32:47.046 A:middle
in its completion handler.

00:32:47.406 --> 00:32:51.616 A:middle
And as you can see here,
our app checks the error

00:32:51.616 --> 00:32:52.266 A:middle
that's returned.

00:32:53.076 --> 00:32:55.876 A:middle
Sees that the error code is
filtered by do not disturb

00:32:55.876 --> 00:32:57.916 A:middle
and then handles
that appropriately.

00:32:59.246 --> 00:33:02.126 A:middle
So now let's take a look
at audio with CallKit.

00:32:59.246 --> 00:33:02.126 A:middle
So now let's take a look
at audio with CallKit.

00:33:03.526 --> 00:33:06.546 A:middle
So with CallKit your app
gets a lot of great benefits

00:33:06.546 --> 00:33:07.886 A:middle
with its call's audio.

00:33:08.306 --> 00:33:10.676 A:middle
And one of the biggest
benefits it gets is

00:33:10.676 --> 00:33:13.826 A:middle
that its audio session will
be at a boosted priority

00:33:13.826 --> 00:33:17.386 A:middle
on the system on par with
phone and FaceTime calls.

00:33:18.066 --> 00:33:19.956 A:middle
And what this means
is other apps

00:33:19.956 --> 00:33:21.596 A:middle
on the system will not be able

00:33:21.596 --> 00:33:23.406 A:middle
to interrupt your
app's call audio.

00:33:23.946 --> 00:33:27.886 A:middle
And in addition to
this, CallKit is aware

00:33:27.886 --> 00:33:30.006 A:middle
of certain audio routing
hints on this system

00:33:30.756 --> 00:33:34.666 A:middle
which means it can decide where
to route audio based on things

00:33:34.666 --> 00:33:37.846 A:middle
like the user's current
accessibility settings

00:33:37.906 --> 00:33:40.296 A:middle
or currently connected
Bluetooth devices.

00:33:40.766 --> 00:33:46.576 A:middle
Let's take a look at an incoming
call flow as an example.

00:33:47.356 --> 00:33:48.616 A:middle
We know that, at some point,

00:33:48.616 --> 00:33:51.946 A:middle
during an incoming call our
app will receive an answer call

00:33:51.946 --> 00:33:54.476 A:middle
action and then fulfill
that answer call action.

00:33:55.766 --> 00:33:58.556 A:middle
Well after receiving the answer
call action is a great time

00:33:58.686 --> 00:34:00.816 A:middle
to configure our audio session.

00:33:58.686 --> 00:34:00.816 A:middle
to configure our audio session.

00:34:01.346 --> 00:34:02.206 A:middle
And that's because we know

00:34:02.206 --> 00:34:03.906 A:middle
that the call will
soon move to connected.

00:34:05.076 --> 00:34:07.566 A:middle
Then when we fulfill
the answer call action,

00:34:08.676 --> 00:34:11.426 A:middle
the system will automatically
start an audio session

00:34:11.775 --> 00:34:14.126 A:middle
for our app at a
boosted priority

00:34:14.505 --> 00:34:15.815 A:middle
and then let our app know

00:34:15.815 --> 00:34:19.216 A:middle
that this has happened via
the did activate audio session

00:34:19.216 --> 00:34:20.406 A:middle
provider delegate call back.

00:34:20.565 --> 00:34:24.315 A:middle
And this is an indication
to our app that it is time

00:34:24.315 --> 00:34:25.966 A:middle
to start media for the call.

00:34:25.966 --> 00:34:29.335 A:middle
So that was just a quick look at
some of the details of the API

00:34:30.005 --> 00:34:32.556 A:middle
to help us complete our
adoption of CallKit.

00:34:37.346 --> 00:34:40.235 A:middle
So now we invite
you to adopt CallKit

00:34:40.466 --> 00:34:43.496 A:middle
in your existing VoIP apps
or to build a new VoIP app

00:34:43.496 --> 00:34:45.176 A:middle
from the ground up
using CallKit.

00:34:46.416 --> 00:34:48.755 A:middle
With CallKit you'll
integrate directly

00:34:48.755 --> 00:34:50.835 A:middle
into the system's
calling infrastructure

00:34:51.746 --> 00:34:54.916 A:middle
and once you've adopted CallKit
you'll maintain feature parity

00:34:55.186 --> 00:34:56.815 A:middle
with native calling services.

00:34:58.026 --> 00:34:58.946 A:middle
But most importantly,

00:34:59.626 --> 00:35:03.056 A:middle
with CallKit your app will
increase its visibility

00:34:59.626 --> 00:35:03.056 A:middle
with CallKit your app will
increase its visibility

00:35:03.106 --> 00:35:06.066 A:middle
across the system whether
it's with full screen,

00:35:06.066 --> 00:35:10.046 A:middle
incoming alerts on the locked
screen, appearances in recents,

00:35:10.386 --> 00:35:14.506 A:middle
favorites, and contacts,
or integration with Siri,

00:35:14.876 --> 00:35:16.806 A:middle
CarPlay, and Bluetooth.

00:35:19.006 --> 00:35:21.746 A:middle
For more information you can
check out our session's webpage

00:35:21.746 --> 00:35:23.036 A:middle
at developer.apple.com

00:35:23.526 --> 00:35:25.956 A:middle
where we'll also have the
Speakerbox sample code

00:35:25.956 --> 00:35:27.846 A:middle
that we've been referencing
throughout this presentation.

00:35:28.356 --> 00:35:31.786 A:middle
We've got a lot of great
related sessions for you.

00:35:32.426 --> 00:35:35.586 A:middle
So be sure to check out more
information about Siri, intents,

00:35:35.936 --> 00:35:37.086 A:middle
networking, and audio.

00:35:38.476 --> 00:35:40.136 A:middle
Thank you all so
much for joining us

00:35:40.136 --> 00:35:40.976 A:middle
and we'll see you in the labs.

00:35:41.516 --> 00:35:44.500 A:middle
[ Applause ]
