WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:19.500 A:middle
[ Music ]

00:00:23.206 --> 00:00:23.896 A:middle
&gt;&gt; All right.

00:00:25.141 --> 00:00:27.141 A:middle
[ Applause ]

00:00:27.266 --> 00:00:28.946 A:middle
Good afternoon everyone
and welcome

00:00:28.946 --> 00:00:32.076 A:middle
to app development
using TVMLKit Part 2.

00:00:33.306 --> 00:00:35.246 A:middle
There are many amazing
apps out there

00:00:35.346 --> 00:00:37.926 A:middle
on the App Store
based on TVMLKit.

00:00:38.826 --> 00:00:41.256 A:middle
And some have even been
customized with styles

00:00:41.336 --> 00:00:44.656 A:middle
to give a unique experience
and branding for all your apps.

00:00:46.046 --> 00:00:50.556 A:middle
So today I'm extremely
excited to be talking to you,

00:00:50.766 --> 00:00:54.816 A:middle
to tell how you could bring your
apps to a whole other level.

00:00:56.026 --> 00:01:00.526 A:middle
And this is done by extending
TVMLKit by extending interfaces


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:56.026 --> 00:01:00.526 A:middle
And this is done by extending
TVMLKit by extending interfaces

00:01:01.106 --> 00:01:03.866 A:middle
and also the functionality
that's provided in JavaScript.

00:01:05.226 --> 00:01:08.306 A:middle
This will basically let
your app stand out even more

00:01:08.806 --> 00:01:10.536 A:middle
with all your own
unique branding.

00:01:13.386 --> 00:01:19.346 A:middle
TVMLKit is a thoughtful
framework, we've also tried

00:01:19.346 --> 00:01:23.276 A:middle
to make sure that there is some
thought in how it's structured

00:01:23.916 --> 00:01:25.946 A:middle
as such that only
two extension points

00:01:26.206 --> 00:01:27.186 A:middle
that you have to worry about.

00:01:28.136 --> 00:01:30.276 A:middle
In the first half of
the talk I'm going

00:01:30.276 --> 00:01:33.176 A:middle
to tell you guys how you can
extend the user interface

00:01:33.556 --> 00:01:35.566 A:middle
in TVMLKit by extending
templates.

00:01:37.146 --> 00:01:40.866 A:middle
In the second half, my colleague
Christopher will be explaining

00:01:40.866 --> 00:01:44.526 A:middle
how you can enhance your apps by
adding application functionality

00:01:45.186 --> 00:01:49.896 A:middle
to the JavaScript engine
that powers TVMLKit.

00:01:49.896 --> 00:01:52.556 A:middle
So, let's talk about
extending templates.

00:01:54.756 --> 00:01:57.066 A:middle
The very first thing
that everyone encounters

00:01:57.066 --> 00:01:59.836 A:middle
when they use TVMLKit is
this idea of templates,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.266 --> 00:02:03.436 A:middle
these are defined in the
TVML, TV mark-up language.

00:02:04.956 --> 00:02:08.795 A:middle
They use XML as a way to
describe what's on the screen

00:02:09.526 --> 00:02:12.346 A:middle
and when people encounter
this, they start by saying huh,

00:02:12.866 --> 00:02:15.056 A:middle
I know this this
is a web browser.

00:02:15.056 --> 00:02:19.086 A:middle
I can assure you we are
absolutely not a web browser.

00:02:20.126 --> 00:02:23.536 A:middle
What TVMLKit is however, is
a powerful templating engine,

00:02:24.486 --> 00:02:27.326 A:middle
but that doesn't mean you are
limited to what we provide.

00:02:28.796 --> 00:02:33.436 A:middle
In fact, Apple's own apps
use TVMLKit but extend it

00:02:33.436 --> 00:02:36.956 A:middle
in really subtle ways that allow
it to coexist with the rest

00:02:36.956 --> 00:02:40.176 A:middle
of the framework and
still feel right on tvOS.

00:02:40.176 --> 00:02:45.336 A:middle
Let's look at, take
a look at an example,

00:02:45.916 --> 00:02:47.006 A:middle
this is the App Store app.

00:02:48.386 --> 00:02:51.916 A:middle
The App Store theme had a
requirement for a unique cell

00:02:51.916 --> 00:02:56.716 A:middle
within a shelf, as you can see
they have reused what TVMLKit

00:02:56.716 --> 00:02:58.786 A:middle
provides, an image
and three labels.

00:02:59.506 --> 00:03:01.496 A:middle
But over here they
have a custom layout


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.506 --> 00:03:01.496 A:middle
But over here they
have a custom layout

00:03:01.616 --> 00:03:03.176 A:middle
with custom focused behaviors.

00:03:05.826 --> 00:03:07.856 A:middle
Another example that we
are all really familiar

00:03:07.856 --> 00:03:09.846 A:middle
with is the concept
of the Buy button.

00:03:10.566 --> 00:03:12.516 A:middle
Once again the App Store
theme had a requirement

00:03:12.516 --> 00:03:15.926 A:middle
that this button had to reflect
the various installation states

00:03:16.316 --> 00:03:16.786 A:middle
of an app.

00:03:17.726 --> 00:03:19.066 A:middle
Whether you're buying the app,

00:03:19.456 --> 00:03:21.916 A:middle
whether the app is being
installed or downloaded,

00:03:22.576 --> 00:03:25.366 A:middle
they did all these by
reusing what TVMLKit provides.

00:03:26.276 --> 00:03:28.376 A:middle
And that's the common theme we
want to stress to you today.

00:03:29.466 --> 00:03:33.056 A:middle
Reuse TVMLKit as much
as possible and extend

00:03:33.346 --> 00:03:36.746 A:middle
for the parts that
we do not provide.

00:03:36.876 --> 00:03:38.626 A:middle
So templates.

00:03:40.066 --> 00:03:46.006 A:middle
If you've used TVMLKit it
follows a set path when it,

00:03:46.626 --> 00:03:48.536 A:middle
when you inject it into
the framework it ends

00:03:48.536 --> 00:03:49.196 A:middle
up on the screen.

00:03:50.156 --> 00:03:53.016 A:middle
TV mark-up language is
consists of multiple elements,

00:03:53.326 --> 00:03:54.486 A:middle
all with unique names.

00:03:55.386 --> 00:03:58.256 A:middle
And when it enters the framework
it goes to the TVElementFactory.

00:03:58.956 --> 00:04:02.706 A:middle
This is the central registry
that knows about all elements


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.956 --> 00:04:02.706 A:middle
This is the central registry
that knows about all elements

00:04:02.746 --> 00:04:05.006 A:middle
and is able to translate
that into data structures

00:04:05.126 --> 00:04:06.926 A:middle
that the rest of the
framework understands.

00:04:08.396 --> 00:04:11.416 A:middle
The TVInterfaceFactory
is the class we use

00:04:11.446 --> 00:04:12.816 A:middle
to generate user interfaces

00:04:13.726 --> 00:04:15.146 A:middle
and place them currently
on the screen.

00:04:16.276 --> 00:04:19.565 A:middle
And this is how TVML
ends up on your screen.

00:04:20.646 --> 00:04:26.466 A:middle
So let's look at what happens
when we extend templates.

00:04:27.386 --> 00:04:30.146 A:middle
When it comes to extension
of templates, it's as simple

00:04:30.146 --> 00:04:33.786 A:middle
as adding your own mark-up in
the TVML that you send to us.

00:04:34.476 --> 00:04:35.856 A:middle
It goes through the
same process,

00:04:35.856 --> 00:04:38.636 A:middle
it enters the element
factory, gets translated,

00:04:39.426 --> 00:04:41.686 A:middle
but when it hits the
TVInterfaceFactory,

00:04:42.016 --> 00:04:43.056 A:middle
because we do not know

00:04:43.056 --> 00:04:45.696 A:middle
about your user interfaces,
we'll ask you for it.

00:04:46.926 --> 00:04:50.226 A:middle
When you've given us the user
interface the TVInterfaceFactory

00:04:50.226 --> 00:04:53.726 A:middle
will put it on the screen
itself, very simple.

00:04:55.036 --> 00:04:57.636 A:middle
So now that you have an idea
of how everything works,

00:04:58.196 --> 00:04:59.576 A:middle
let's look at things in detail.

00:04:59.676 --> 00:05:01.626 A:middle
There are three steps
that you have to worry


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.676 --> 00:05:01.626 A:middle
There are three steps
that you have to worry

00:05:01.626 --> 00:05:03.596 A:middle
about when you want
to extend templates,

00:05:03.806 --> 00:05:06.746 A:middle
and the very first thing
is to define mark-up.

00:05:07.536 --> 00:05:10.086 A:middle
Mark-up in TVML is
basically XML.

00:05:11.256 --> 00:05:14.276 A:middle
And you have an idea of what
your user interface looks

00:05:14.276 --> 00:05:15.086 A:middle
like on the screen.

00:05:16.306 --> 00:05:19.236 A:middle
You have to translate that
into a structure that kind

00:05:19.236 --> 00:05:20.836 A:middle
of resembles what
it should appear

00:05:20.836 --> 00:05:22.766 A:middle
on the screen in mark-up itself.

00:05:23.876 --> 00:05:27.286 A:middle
In our example, we wanted a
banner on the stackTemplate.

00:05:28.896 --> 00:05:31.876 A:middle
This banner had an animated
background and if you wanted

00:05:31.876 --> 00:05:34.386 A:middle
to be able to control the
animations using a switch,

00:05:34.566 --> 00:05:35.456 A:middle
within TVML.

00:05:36.446 --> 00:05:38.496 A:middle
Therefore, this element,

00:05:38.496 --> 00:05:40.926 A:middle
myBanner has a property
called animated.

00:05:42.306 --> 00:05:44.606 A:middle
Additionally, we
also wanted a button,

00:05:45.346 --> 00:05:46.896 A:middle
but because there
is no requirement

00:05:46.896 --> 00:05:48.066 A:middle
for additional functionality,

00:05:48.586 --> 00:05:50.296 A:middle
we could just use
what TVML provides,

00:05:50.956 --> 00:05:52.746 A:middle
and this is a form of a button.

00:05:52.746 --> 00:05:56.186 A:middle
So now that you have an idea

00:05:56.186 --> 00:06:00.576 A:middle
of what your user interface is
represented in mark-up you have


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:56.186 --> 00:06:00.576 A:middle
of what your user interface is
represented in mark-up you have

00:06:00.576 --> 00:06:02.306 A:middle
to tell the framework about it.

00:06:02.926 --> 00:06:03.876 A:middle
And this is as simple

00:06:03.876 --> 00:06:06.816 A:middle
as registering your unique
element name with us.

00:06:08.186 --> 00:06:11.176 A:middle
Registration has to be done once
before application controller

00:06:11.176 --> 00:06:13.746 A:middle
startup so that we're fully
aware of all the elements

00:06:13.746 --> 00:06:14.806 A:middle
that we have to take care of.

00:06:15.496 --> 00:06:19.526 A:middle
It's as simple as telling the
TVElementFactory that you want

00:06:19.526 --> 00:06:22.126 A:middle
to associate a TVViewElement
class

00:06:22.996 --> 00:06:25.306 A:middle
and your custom, element name.

00:06:26.606 --> 00:06:30.296 A:middle
The TVViewElement is the base
data structure that we use

00:06:30.296 --> 00:06:33.196 A:middle
to translate your mark-up
into something that the rest

00:06:33.196 --> 00:06:34.256 A:middle
of the framework understands.

00:06:35.286 --> 00:06:36.666 A:middle
Along with TVViewElement,

00:06:37.036 --> 00:06:39.136 A:middle
there are two other
subclasses that we use.

00:06:39.836 --> 00:06:42.326 A:middle
TVImageElement deals
with images specifically

00:06:42.326 --> 00:06:45.226 A:middle
and TVTextElement has special
handling for text itself.

00:06:45.286 --> 00:06:52.546 A:middle
Now that we have registered the
elements, this is the next step,

00:06:52.546 --> 00:06:54.806 A:middle
the third step that involves
a little work on your end,

00:06:55.456 --> 00:06:57.146 A:middle
but still we try to
keep things simple,

00:06:57.146 --> 00:06:58.596 A:middle
with only just two steps.

00:06:59.546 --> 00:07:01.526 A:middle
The very first thing
you have to do is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.546 --> 00:07:01.526 A:middle
The very first thing
you have to do is

00:07:01.526 --> 00:07:04.146 A:middle
to setup an interface
creator that conforms

00:07:04.146 --> 00:07:06.086 A:middle
to the TVInterfaceCreating
protocol.

00:07:06.906 --> 00:07:08.386 A:middle
This particular object
is the one

00:07:08.386 --> 00:07:10.866 A:middle
that vends your user
interface when we ask for it

00:07:11.496 --> 00:07:13.426 A:middle
and there are some call
back methods that you have

00:07:13.466 --> 00:07:16.636 A:middle
to implement from the
TVInterfaceCreating protocol

00:07:16.636 --> 00:07:18.916 A:middle
declaration that
pertains to what sort

00:07:18.916 --> 00:07:20.046 A:middle
of UI you want to return.

00:07:21.066 --> 00:07:24.136 A:middle
The next step is when we call

00:07:24.136 --> 00:07:26.306 A:middle
into your interface
creator class,

00:07:26.816 --> 00:07:29.756 A:middle
configure your user
interface and return it to us.

00:07:30.426 --> 00:07:34.966 A:middle
As I stressed before, reuse
TVMLKit as much as possible

00:07:34.966 --> 00:07:36.886 A:middle
because we have done a
lot of work to ensure

00:07:36.886 --> 00:07:39.736 A:middle
that our elements are
performing and look

00:07:39.736 --> 00:07:41.016 A:middle
and feel good onto tvOS.

00:07:41.736 --> 00:07:43.316 A:middle
So let's take a look
at an example

00:07:43.316 --> 00:07:45.306 A:middle
of what this interface
creator looks like.

00:07:45.786 --> 00:07:49.126 A:middle
Over here I have a
MyInterfaceCreator class

00:07:49.126 --> 00:07:51.196 A:middle
that conforms to
TVInterfaceCreating.

00:07:51.426 --> 00:07:54.396 A:middle
Because we are only
interested vetting a view

00:07:54.396 --> 00:07:57.916 A:middle
for the better we are going to
implement the makeView element,

00:07:57.916 --> 00:08:00.126 A:middle
existingView call back method.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:57.916 --> 00:08:00.126 A:middle
existingView call back method.

00:08:01.336 --> 00:08:04.376 A:middle
Once this class has been set
up, all you have to do is

00:08:04.376 --> 00:08:07.486 A:middle
to register an instance of it
with the TVInterfaceFactory.

00:08:07.896 --> 00:08:12.286 A:middle
Looking at makeView in detail,

00:08:13.096 --> 00:08:17.026 A:middle
we can see that TVMLKit
furnishes you with an element

00:08:17.026 --> 00:08:18.726 A:middle
and a optional existingView.

00:08:19.406 --> 00:08:21.866 A:middle
So in the case of the
banner, we just need

00:08:21.866 --> 00:08:23.466 A:middle
to inspect the element
name itself.

00:08:24.006 --> 00:08:27.646 A:middle
We're particularly interested
in the myBanner element name

00:08:27.746 --> 00:08:29.336 A:middle
and when we find
something like that,

00:08:30.136 --> 00:08:31.566 A:middle
we create an instance
of this view.

00:08:33.126 --> 00:08:36.676 A:middle
Because the myBanner has an
element property we can easily

00:08:36.676 --> 00:08:38.086 A:middle
inspect this using the element

00:08:38.086 --> 00:08:39.846 A:middle
that the call back
method provides

00:08:40.756 --> 00:08:42.706 A:middle
and then assign it
to the view itself.

00:08:44.035 --> 00:08:46.226 A:middle
We also know that we have
a button in the view,

00:08:46.716 --> 00:08:50.386 A:middle
and because this is a
TVMLKit button, it's as simple

00:08:50.386 --> 00:08:53.406 A:middle
as asking the TVInterfaceFactory
for this particular element

00:08:53.406 --> 00:08:56.566 A:middle
and returning the view
to all myBanner view.

00:08:57.646 --> 00:08:59.646 A:middle
Finally of course,
return your view.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.396 --> 00:09:03.376 A:middle
In the case of default
framework behavior,

00:09:03.796 --> 00:09:05.356 A:middle
you have to return nil.

00:09:07.126 --> 00:09:08.986 A:middle
Now we've talked
a lot about views,

00:09:08.986 --> 00:09:10.476 A:middle
what about view controllers?

00:09:11.706 --> 00:09:15.076 A:middle
TVMLKit has view controllers
and they are exposed in a form

00:09:15.076 --> 00:09:19.706 A:middle
of a shelf lockups that
expands horizontally or a grid

00:09:19.706 --> 00:09:20.666 A:middle
that expands vertically.

00:09:21.986 --> 00:09:24.356 A:middle
So by using the TVMLKit
call back

00:09:24.356 --> 00:09:27.436 A:middle
to return view controllers
you can substitute these

00:09:27.436 --> 00:09:29.076 A:middle
for your own view controllers.

00:09:30.316 --> 00:09:34.626 A:middle
The usage is similar to
makeView and in this case,

00:09:34.706 --> 00:09:36.746 A:middle
we still furnish
you with an element

00:09:37.076 --> 00:09:38.396 A:middle
but an existingViewController

00:09:38.396 --> 00:09:41.176 A:middle
and we expect an
existingViewController

00:09:42.026 --> 00:09:43.546 A:middle
to be returned.

00:09:43.546 --> 00:09:44.846 A:middle
Now you're thinking, Aha!

00:09:46.536 --> 00:09:47.646 A:middle
Collection of views.

00:09:48.326 --> 00:09:51.176 A:middle
Collection of views has
views that are cells,

00:09:51.926 --> 00:09:54.776 A:middle
so this is how I can
customize my own lockups.

00:09:55.086 --> 00:09:57.716 A:middle
Remember this example?

00:09:59.336 --> 00:10:02.376 A:middle
The App Store theme specifically
only had a requirement


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.336 --> 00:10:02.376 A:middle
The App Store theme specifically
only had a requirement

00:10:03.126 --> 00:10:04.586 A:middle
to have a unique cell.

00:10:04.736 --> 00:10:07.796 A:middle
Of unique custom layouts
and focus behaviors,

00:10:08.576 --> 00:10:11.616 A:middle
everything else, as you can see,
is extended to UMLKit shelf.

00:10:12.156 --> 00:10:13.646 A:middle
The titles go up
and down depending

00:10:13.646 --> 00:10:16.276 A:middle
on whether the focus is
on the element beneath it.

00:10:17.606 --> 00:10:21.186 A:middle
So, new in tvOS 10,
we are allowing you

00:10:21.186 --> 00:10:23.836 A:middle
to specify your own custom
collection view cell.

00:10:24.886 --> 00:10:27.116 A:middle
This allows you to have
custom layouts for the cell

00:10:27.116 --> 00:10:30.006 A:middle
and most importantly
participate in focus events

00:10:30.006 --> 00:10:31.416 A:middle
when the cell comes into focus.

00:10:32.286 --> 00:10:34.436 A:middle
To do this there are two
things you need to do.

00:10:34.906 --> 00:10:37.796 A:middle
The very first thing is to use
this new API that we're exposing

00:10:37.796 --> 00:10:40.976 A:middle
that allows you to give us
a collectionView CellClass

00:10:40.976 --> 00:10:42.856 A:middle
when we ask for it for
a particular element.

00:10:44.106 --> 00:10:46.406 A:middle
And when we build the user
interface on the screen,

00:10:46.936 --> 00:10:49.606 A:middle
we would use makeView to
allow you to customize,

00:10:49.876 --> 00:10:52.826 A:middle
configure the cell
and return it to us.

00:10:53.606 --> 00:10:58.416 A:middle
We would provide you the custom
collection view cell that's deep

00:10:58.416 --> 00:11:00.896 A:middle
queued from the collection
view using the existing view


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.416 --> 00:11:00.896 A:middle
queued from the collection
view using the existing view

00:11:01.486 --> 00:11:03.476 A:middle
parameter itself.

00:11:05.096 --> 00:11:08.696 A:middle
So I'd like to invite Parry on
stage to give a demonstration

00:11:08.696 --> 00:11:10.336 A:middle
of how this works, Parry.

00:11:11.516 --> 00:11:15.546 A:middle
[ Applause ]

00:11:16.046 --> 00:11:16.636 A:middle
&gt;&gt; Thank you, Jeremy.

00:11:16.636 --> 00:11:21.306 A:middle
Hi, my name is Parry and
I'm going to demo you how

00:11:21.306 --> 00:11:23.146 A:middle
to use custom cells in TVMLKit.

00:11:24.436 --> 00:11:26.096 A:middle
Now custom cells
are really nice,

00:11:26.166 --> 00:11:29.756 A:middle
if you want to use TVMLKit
collections like shelves

00:11:29.756 --> 00:11:32.506 A:middle
and grids, but you want
to add your own cell

00:11:32.916 --> 00:11:36.116 A:middle
to showcase your content
through a custom layout

00:11:36.356 --> 00:11:37.466 A:middle
and focus mechanism.

00:11:37.466 --> 00:11:40.066 A:middle
So I'm going to show
you a sample app

00:11:40.066 --> 00:11:42.346 A:middle
that I am working
on based on TVMLKit.

00:11:43.216 --> 00:11:47.136 A:middle
And then later on, I'm going
to enhance it with custom cells

00:11:48.406 --> 00:11:50.176 A:middle
to make appear better.

00:11:50.426 --> 00:11:53.276 A:middle
So let's get to it.

00:11:53.916 --> 00:11:58.156 A:middle
So I'm going to switch
over to my computer,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.256 --> 00:12:05.816 A:middle
and I have here Xcode project
open for my application

00:12:06.376 --> 00:12:08.226 A:middle
that I'm working on
based on TVMLKit.

00:12:08.686 --> 00:12:10.546 A:middle
Now let me talk about
this application.

00:12:11.266 --> 00:12:15.506 A:middle
It's an app that lets users
browse through their photos.

00:12:16.936 --> 00:12:20.916 A:middle
So the application
that JavaScript

00:12:21.306 --> 00:12:25.376 A:middle
and the associated XML files are
actually hosted on my machine,

00:12:25.976 --> 00:12:28.356 A:middle
and let me go over them
right in front of you.

00:12:29.646 --> 00:12:34.236 A:middle
So here's one of the pages
from that app that is going

00:12:34.236 --> 00:12:36.156 A:middle
to showcase user's photo albums.

00:12:37.296 --> 00:12:43.446 A:middle
Now you can see it's a stacked
template that has a nice banner

00:12:43.446 --> 00:12:47.106 A:middle
with a background
image, and it has a shelf

00:12:48.296 --> 00:12:53.876 A:middle
to showcase the albums and each
album is basically represented

00:12:53.876 --> 00:12:54.666 A:middle
by a lockup.

00:12:55.786 --> 00:12:59.876 A:middle
Now each one of these
lockups embeds an image


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.246 --> 00:13:05.556 A:middle
from the album that
it represents.

00:13:05.556 --> 00:13:07.396 A:middle
Other than some custom styling

00:13:07.396 --> 00:13:09.086 A:middle
to make this lockup
a little bigger,

00:13:09.356 --> 00:13:11.486 A:middle
I have not customized
TVMLKit at all.

00:13:12.206 --> 00:13:17.086 A:middle
So it's kind of out
of stock TVMLKit app.

00:13:17.996 --> 00:13:20.426 A:middle
So let's run this real quick

00:13:20.616 --> 00:13:22.126 A:middle
and see what it looks
like right now.

00:13:22.716 --> 00:13:27.736 A:middle
And for that I'm going to
switch over to Apple TV.

00:13:31.416 --> 00:13:35.896 A:middle
So there's the app, that's
the stacked template document

00:13:35.896 --> 00:13:36.776 A:middle
that I talked about.

00:13:37.056 --> 00:13:39.046 A:middle
So you see the nice
banner on the top

00:13:39.856 --> 00:13:41.356 A:middle
and the shelf at the bottom.

00:13:41.796 --> 00:13:44.446 A:middle
And you know, I have to say just

00:13:44.446 --> 00:13:46.066 A:middle
out of the box it
looks pretty nice.

00:13:47.046 --> 00:13:50.316 A:middle
It's functional and the
bigger lockups do make a lot

00:13:50.316 --> 00:13:50.776 A:middle
of difference.

00:13:51.426 --> 00:13:56.496 A:middle
But I think it can
be a little better.

00:13:56.686 --> 00:14:04.606 A:middle
So, consider this, how about
instead of just taking one photo


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:56.686 --> 00:14:04.606 A:middle
So, consider this, how about
instead of just taking one photo

00:14:04.606 --> 00:14:08.166 A:middle
from the album, to
represent it on this page.

00:14:09.636 --> 00:14:13.536 A:middle
What if we chose multiple
photos, featured photos

00:14:13.536 --> 00:14:18.786 A:middle
from that album, and use that to
put the album on this document?

00:14:19.916 --> 00:14:23.326 A:middle
Now I'm going to just
think about it a little.

00:14:23.476 --> 00:14:26.916 A:middle
How about we create a
collage of these photos

00:14:27.626 --> 00:14:31.496 A:middle
when the album is not
focused, and then fly them

00:14:31.496 --> 00:14:34.776 A:middle
out into a nice grid when
the album does get focused?

00:14:35.916 --> 00:14:36.796 A:middle
That will be cool.

00:14:37.916 --> 00:14:42.086 A:middle
But more than that, it'll give
a nice context to the user

00:14:42.456 --> 00:14:43.846 A:middle
of what the album is about.

00:14:44.896 --> 00:14:51.036 A:middle
Because the user gets to see
more photos from the album.

00:14:51.256 --> 00:14:53.086 A:middle
Now this is a really
nice use case

00:14:53.086 --> 00:14:56.206 A:middle
for having custom
cells with TVMLKit.

00:14:57.486 --> 00:14:58.586 A:middle
So let me show you how to do it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.006 --> 00:15:04.536 A:middle
So I'm going to switch
back, to my computer

00:15:05.646 --> 00:15:07.316 A:middle
and the first thing I want

00:15:07.316 --> 00:15:11.016 A:middle
to do is create a mark-up
spec for what I just said.

00:15:12.276 --> 00:15:16.106 A:middle
It's kind of a translation of
what your visual representation

00:15:16.106 --> 00:15:19.616 A:middle
of your user interface
is in terms of an XML

00:15:19.616 --> 00:15:21.046 A:middle
that TVMLKit can understand.

00:15:22.326 --> 00:15:26.496 A:middle
So I have that here right
now, and as you can see,

00:15:26.496 --> 00:15:29.126 A:middle
it's again a stacked
template that has a shelf,

00:15:30.476 --> 00:15:36.216 A:middle
but instead of lockups,
it has a new element

00:15:36.216 --> 00:15:37.916 A:middle
that I have created
called FlyoutCell.

00:15:38.556 --> 00:15:40.096 A:middle
That's the cell that
I just described.

00:15:40.776 --> 00:15:44.326 A:middle
I'm calling it flyout because
the images just fly out from it.

00:15:45.216 --> 00:15:48.226 A:middle
And as mentioned
in the description,

00:15:48.556 --> 00:15:53.246 A:middle
I want multiple photos
in this cell, hence,

00:15:53.806 --> 00:15:57.676 A:middle
I have multiple image
elements as children.

00:15:58.306 --> 00:16:02.016 A:middle
Now there's one important
thing to note,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.306 --> 00:16:02.016 A:middle
Now there's one important
thing to note,

00:16:02.596 --> 00:16:07.056 A:middle
is that for all custom cells,
they have to be accompanied

00:16:07.616 --> 00:16:15.266 A:middle
with three styles, and
they are width, height,

00:16:16.556 --> 00:16:20.986 A:middle
and a new style we've added into
tvOS 10 called TV focus margin.

00:16:22.576 --> 00:16:27.106 A:middle
Now TVMLKit uses
width and height

00:16:27.886 --> 00:16:31.396 A:middle
to give your cells a nice
frame, in the collection.

00:16:32.846 --> 00:16:35.126 A:middle
And it uses TV focus
margin as a hint

00:16:36.126 --> 00:16:37.796 A:middle
to know how much
your cell is going

00:16:37.796 --> 00:16:39.246 A:middle
to grow when it gets focused.

00:16:40.616 --> 00:16:44.156 A:middle
It uses this information
to create nice spacing

00:16:44.156 --> 00:16:48.386 A:middle
between shelves, and also
to readjust the shelf header

00:16:48.946 --> 00:16:51.906 A:middle
when the cell underneath
it gets focused.

00:16:52.486 --> 00:16:58.326 A:middle
So now that we have the
spec, what's the next step?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.116 --> 00:17:05.026 A:middle
We know we have to add this
new element into TVMLKit,

00:17:05.195 --> 00:17:06.406 A:middle
so let's do that real quick.

00:17:07.256 --> 00:17:09.435 A:middle
So for that I'm going to
head over to AppDelegate

00:17:09.435 --> 00:17:14.336 A:middle
and in the method application
didFinishLaunching WithOptions.

00:17:15.076 --> 00:17:19.185 A:middle
I'm going to quickly
drop the code

00:17:19.185 --> 00:17:25.866 A:middle
that I wrote earlier,
to do just that.

00:17:26.016 --> 00:17:29.656 A:middle
So using this I've just
added my FlyoutCell,

00:17:31.386 --> 00:17:34.696 A:middle
using TVElementFactory
to TVMLKit.

00:17:36.356 --> 00:17:41.336 A:middle
Now TVMLKit also wants me to
enhance the interface creator

00:17:42.056 --> 00:17:48.096 A:middle
by extending it, so that I can
configure my cell myself, right.

00:17:48.396 --> 00:17:55.476 A:middle
So let's do that
real quick as well.

00:17:55.716 --> 00:18:00.376 A:middle
So, that's all the configuration
required for TVMLKit,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:55.716 --> 00:18:00.376 A:middle
So, that's all the configuration
required for TVMLKit,

00:18:00.456 --> 00:18:03.516 A:middle
now let's have a look at the
implementation of these classes,

00:18:04.076 --> 00:18:07.546 A:middle
starting off with the
ExtendedInterfaceCreator.

00:18:08.166 --> 00:18:14.906 A:middle
Now for custom cells you
need to implement two APIs.

00:18:15.046 --> 00:18:19.296 A:middle
First, the
collectionViewCellClass,

00:18:20.756 --> 00:18:23.676 A:middle
this is required to map
your custom elements

00:18:24.136 --> 00:18:28.186 A:middle
to the collectionViewCellClass
you want to use for it.

00:18:29.656 --> 00:18:34.956 A:middle
And second, makeView,
this one is required

00:18:34.956 --> 00:18:37.886 A:middle
to configure your cell
with your element.

00:18:39.696 --> 00:18:45.236 A:middle
So let's quickly fill in these
blanks, with a bit of code

00:18:45.236 --> 00:18:46.296 A:middle
that I've written before.

00:18:46.876 --> 00:18:50.216 A:middle
So there goes the
mapping for my custom cell

00:18:51.826 --> 00:18:57.526 A:middle
with the collectionViewCellClass
that I want to use for it.

00:18:58.616 --> 00:19:06.226 A:middle
And similarly, the
mapping to configure


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.616 --> 00:19:06.226 A:middle
And similarly, the
mapping to configure

00:19:06.226 --> 00:19:09.356 A:middle
that collectionViewCell
with my element.

00:19:10.256 --> 00:19:11.956 A:middle
Now an important
thing to note here is

00:19:11.956 --> 00:19:15.886 A:middle
that the existing view
parameter would always be valid,

00:19:16.406 --> 00:19:18.706 A:middle
because TVMLKit just dequeued it

00:19:18.756 --> 00:19:21.576 A:middle
from the collection view
to get it configured.

00:19:22.016 --> 00:19:26.766 A:middle
So it's always going to be
there, for custom cells.

00:19:27.376 --> 00:19:31.196 A:middle
Now before I jump into the
configuration of my flyout cell,

00:19:31.766 --> 00:19:34.856 A:middle
let's have a look at the
FlyoutCell class itself.

00:19:35.476 --> 00:19:41.076 A:middle
So that's the
FlyoutCollectionViewCell class

00:19:41.106 --> 00:19:44.126 A:middle
that I'm using to
represent my flyoutCell.

00:19:44.546 --> 00:19:47.036 A:middle
And as you can see, it
basically subclasses a

00:19:47.036 --> 00:19:52.136 A:middle
UICollectionViewCell, in
itself, it's got nothing to do

00:19:52.136 --> 00:19:55.506 A:middle
with TVMLKit, it's
just a cell class.

00:19:55.506 --> 00:19:58.866 A:middle
I can use it in a native
app or any other app.

00:19:59.856 --> 00:20:04.756 A:middle
The important point to note
here is that it accepts an array


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.856 --> 00:20:04.756 A:middle
The important point to note
here is that it accepts an array

00:20:05.866 --> 00:20:10.416 A:middle
of image views that it uses
to configure its contents.

00:20:11.056 --> 00:20:15.856 A:middle
And these image views are the
ones that we want to configure

00:20:15.856 --> 00:20:17.356 A:middle
in our extended interface
creator

00:20:18.196 --> 00:20:20.336 A:middle
from the TV view element.

00:20:23.276 --> 00:20:25.996 A:middle
So let's head back to
extended interface creator

00:20:26.536 --> 00:20:28.000 A:middle
and add that code.

00:20:36.626 --> 00:20:39.106 A:middle
So that's the configuration,
it's not much,

00:20:41.006 --> 00:20:45.796 A:middle
but the important
part here is this.

00:20:46.006 --> 00:20:51.846 A:middle
I am trading over all the
children of the element

00:20:51.846 --> 00:20:54.246 A:middle
and extracting the
image elements out of it

00:20:55.526 --> 00:21:00.306 A:middle
and simply reusing TVMLKit to
create an image view for me.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:55.526 --> 00:21:00.306 A:middle
and simply reusing TVMLKit to
create an image view for me.

00:21:00.806 --> 00:21:02.696 A:middle
Now out of the box,
this is really,

00:21:02.696 --> 00:21:06.756 A:middle
really good because what
it gives me is downloading

00:21:06.756 --> 00:21:11.756 A:middle
of remote images, it gives
me scaling and cropping

00:21:11.866 --> 00:21:14.886 A:middle
to fit the bounds so that the
user interface is performing.

00:21:14.886 --> 00:21:17.846 A:middle
And it also gives
me some caching

00:21:18.066 --> 00:21:20.066 A:middle
in case I reuse those
images somewhere else.

00:21:21.476 --> 00:21:23.626 A:middle
So reusing these TVMLKit views,

00:21:24.576 --> 00:21:26.956 A:middle
and other infrastructure
is really beneficial.

00:21:27.896 --> 00:21:28.856 A:middle
I highly encourage it.

00:21:30.656 --> 00:21:34.516 A:middle
So, with that we've configured
all the code and everything

00:21:34.516 --> 00:21:36.256 A:middle
in TVMLKit knows
about our element.

00:21:36.826 --> 00:21:40.616 A:middle
There's only one thing remaining
to do, which is to go back

00:21:40.616 --> 00:21:42.696 A:middle
to the stacked document
that I showed earlier,

00:21:43.486 --> 00:21:46.306 A:middle
and replace all the
lockups with the FlyoutCell

00:21:46.306 --> 00:21:47.356 A:middle
that I have just added.

00:21:47.726 --> 00:21:53.206 A:middle
So I'm going to head back there,
remove all of these lockups,

00:21:58.816 --> 00:22:02.000 A:middle
and add my FlyoutCell.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.816 --> 00:22:02.000 A:middle
and add my FlyoutCell.

00:22:07.046 --> 00:22:08.406 A:middle
Now there were three albums,

00:22:08.656 --> 00:22:10.276 A:middle
there are three FlyoutCells
still,

00:22:10.706 --> 00:22:17.086 A:middle
each FlyoutCell has,
four images in it.

00:22:17.736 --> 00:22:20.486 A:middle
And when you add these cells,
don't forget to add the style

00:22:20.486 --> 00:22:24.526 A:middle
as well, that's required,
it's a must.

00:22:29.636 --> 00:22:34.206 A:middle
So now that we've added
everything, let's rerun this app

00:22:34.736 --> 00:22:36.036 A:middle
and see what it looks like now.

00:22:36.116 --> 00:22:40.246 A:middle
So I'm going to switch
over to Apple TV,

00:22:46.296 --> 00:22:47.986 A:middle
and there's the flyout cell.

00:22:49.516 --> 00:22:55.546 A:middle
[ Applause ]

00:22:56.046 --> 00:22:59.196 A:middle
And you can immediately tell
it looks so much better,

00:22:59.556 --> 00:23:03.066 A:middle
then just having one
image, it just looks


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.556 --> 00:23:03.066 A:middle
then just having one
image, it just looks

00:23:03.216 --> 00:23:04.346 A:middle
so much more immersive.

00:23:05.766 --> 00:23:09.846 A:middle
And notice that the cell
just fits into TVMLKit,

00:23:10.116 --> 00:23:13.596 A:middle
all the spacing is right,
even the header, the album,

00:23:14.196 --> 00:23:19.146 A:middle
it moves up and down as the
cell underneath it gets focused.

00:23:19.766 --> 00:23:25.476 A:middle
It just feels like it
belongs inside TVMLKit,

00:23:25.666 --> 00:23:27.226 A:middle
although you added it.

00:23:28.456 --> 00:23:32.616 A:middle
So there you have it,
custom cells are really easy

00:23:32.616 --> 00:23:38.006 A:middle
to implement, and it lets
you add a lot of value

00:23:38.006 --> 00:23:41.696 A:middle
to your application, by
reusing what TVMLKit provides

00:23:42.676 --> 00:23:46.946 A:middle
but by also showcasing your
content in the way you want.

00:23:48.346 --> 00:23:48.686 A:middle
Thank you.

00:23:49.516 --> 00:23:54.546 A:middle
[ Applause ]

00:23:55.046 --> 00:23:55.826 A:middle
&gt;&gt; Thank you, Parry.

00:23:56.836 --> 00:23:59.446 A:middle
I think Parry spend more
time building the FlyoutCell

00:23:59.446 --> 00:24:02.306 A:middle
than actually configuring
TVMLKit for that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.446 --> 00:24:02.306 A:middle
than actually configuring
TVMLKit for that.

00:24:03.266 --> 00:24:06.036 A:middle
So before we continue, I'd
like to do a quick recap

00:24:06.036 --> 00:24:07.026 A:middle
of what we've seen today.

00:24:07.026 --> 00:24:10.466 A:middle
The very first thing when it
comes to extending templates is

00:24:10.466 --> 00:24:13.816 A:middle
to define a custom mark-up that
describes your user interface.

00:24:15.176 --> 00:24:18.146 A:middle
Register it with a
TVElementFactory so we know

00:24:18.146 --> 00:24:20.296 A:middle
about it and are
able to translate it

00:24:20.296 --> 00:24:21.606 A:middle
into TV view elements.

00:24:23.186 --> 00:24:25.206 A:middle
Provide an extended
interface creator

00:24:25.486 --> 00:24:28.346 A:middle
so that you can vend this user
interface whenever we stop

00:24:28.346 --> 00:24:29.886 A:middle
building the UI on the screen.

00:24:30.546 --> 00:24:36.126 A:middle
And most importantly, use the
TVViewElement and its properties

00:24:36.126 --> 00:24:40.576 A:middle
and attributes to configure your
user interface before displaying

00:24:40.576 --> 00:24:41.176 A:middle
it on the screen.

00:24:42.626 --> 00:24:44.466 A:middle
So that's all there is

00:24:44.466 --> 00:24:47.006 A:middle
to extending templates,
it's really simple.

00:24:48.356 --> 00:24:49.566 A:middle
And we are all really excited

00:24:49.566 --> 00:24:51.966 A:middle
to see what you can
build with this.

00:24:53.486 --> 00:24:57.236 A:middle
But before we continue, there
are a few important things

00:24:57.236 --> 00:24:58.766 A:middle
that we want you to know.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:02.566 --> 00:25:05.256 A:middle
Your user interface is
represented by elements

00:25:05.256 --> 00:25:07.046 A:middle
within the document in TVML.

00:25:08.016 --> 00:25:10.266 A:middle
And this document can
be updated at any time.

00:25:11.156 --> 00:25:14.336 A:middle
Take for example a
shelf with lockups

00:25:14.336 --> 00:25:16.216 A:middle
as results, in a
search template.

00:25:16.936 --> 00:25:21.516 A:middle
As you search this shelf will
get updated using JavaScript

00:25:21.516 --> 00:25:23.366 A:middle
and the contents will change,

00:25:24.236 --> 00:25:25.736 A:middle
that's what a document
update is.

00:25:27.466 --> 00:25:31.446 A:middle
Now, when we build the user,
rebuild the user interface

00:25:31.446 --> 00:25:35.036 A:middle
when document updates happen,
we would call into the,

00:25:35.036 --> 00:25:40.116 A:middle
extended interface creator,
and it is your job to look

00:25:40.116 --> 00:25:41.726 A:middle
at the update type
in the element

00:25:42.296 --> 00:25:43.606 A:middle
and figure out what's changed.

00:25:44.246 --> 00:25:49.336 A:middle
For example, the children might
change, and as a good parent,

00:25:49.336 --> 00:25:50.946 A:middle
you don't really want
to throw away children,

00:25:50.946 --> 00:25:53.276 A:middle
because that's not a nice
thing to do [laughter].

00:25:54.096 --> 00:25:58.026 A:middle
Instead, reuse cells, reuse
views as much as possible.

00:25:58.796 --> 00:26:04.396 A:middle
In our initial example
for returning the banner,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.796 --> 00:26:04.396 A:middle
In our initial example
for returning the banner,

00:26:04.956 --> 00:26:06.636 A:middle
we weren't really
being a good citizen

00:26:06.636 --> 00:26:09.576 A:middle
in the TVMLKit ecosystem, we
didn't reuse views at all.

00:26:10.626 --> 00:26:12.016 A:middle
Let's see if we can change this.

00:26:12.636 --> 00:26:15.756 A:middle
It's as simple as
changing two lines of code,

00:26:16.476 --> 00:26:20.896 A:middle
in this case we look at the
existingView that's part

00:26:20.896 --> 00:26:23.456 A:middle
of the call back
and we try to figure

00:26:23.456 --> 00:26:26.356 A:middle
out if this view is a
view that we expect,

00:26:26.406 --> 00:26:28.156 A:middle
in this case a MyBanner view.

00:26:29.446 --> 00:26:34.106 A:middle
If it's not, we instantiate
a new copy of it.

00:26:34.386 --> 00:26:38.856 A:middle
Now because we have a TVMLKit
button, based on TVMLKit,

00:26:39.476 --> 00:26:43.676 A:middle
we have to do the right thing as
well, and reuse it by passing it

00:26:43.836 --> 00:26:48.176 A:middle
to the extended, by passing it
to the TVInterfaceFactory, in,

00:26:48.176 --> 00:26:49.976 A:middle
the existing view parameter.

00:26:51.256 --> 00:26:52.496 A:middle
Now in this particular example,

00:26:52.936 --> 00:26:55.136 A:middle
because MyBanner is
a really simple view,

00:26:55.136 --> 00:26:57.586 A:middle
that is totally fine to
update it all the time,

00:26:58.256 --> 00:26:59.726 A:middle
we don't really look
at the update type.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:00.806 --> 00:27:03.456 A:middle
But if your view hierarchy
is way more complex.

00:27:04.206 --> 00:27:06.996 A:middle
For performance reasons, we
highly encourage you to look

00:27:06.996 --> 00:27:09.376 A:middle
at the update type and
figure out what has changed.

00:27:13.186 --> 00:27:17.756 A:middle
That's the first line that you
have to change and the second.

00:27:19.826 --> 00:27:23.476 A:middle
Now, new in tvOS
10 is this concept

00:27:23.816 --> 00:27:25.266 A:middle
of light and dark appearance.

00:27:26.116 --> 00:27:28.816 A:middle
If you have a custom view that
you're using with TVMLKit,

00:27:29.596 --> 00:27:31.986 A:middle
you can listen to trait
collection changes to figure

00:27:31.986 --> 00:27:34.046 A:middle
out if you're in light or dark.

00:27:34.736 --> 00:27:38.186 A:middle
We have a session,
What's New in tvOS

00:27:38.256 --> 00:27:40.656 A:middle
that absolutely explains
what you must do,

00:27:41.126 --> 00:27:42.686 A:middle
and I highly encourage
you to check that out.

00:27:45.376 --> 00:27:48.666 A:middle
In the case that you are
a good citizen of TVMLKit

00:27:49.066 --> 00:27:52.046 A:middle
and you reuse our components,
thank you very much.

00:27:53.236 --> 00:27:56.336 A:middle
We highly encourage you to
check the style update hint

00:27:56.866 --> 00:27:58.076 A:middle
from the element update type.

00:27:59.146 --> 00:28:01.926 A:middle
This gives you an idea
of whether your view is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.146 --> 00:28:01.926 A:middle
This gives you an idea
of whether your view is

00:28:01.926 --> 00:28:03.356 A:middle
in the light or dark appearance,

00:28:04.376 --> 00:28:06.476 A:middle
and this reuses the
document update facility

00:28:06.476 --> 00:28:09.156 A:middle
and it's the only
avenue available for you

00:28:09.156 --> 00:28:12.306 A:middle
to update your views for
light or dark appearance.

00:28:12.306 --> 00:28:15.666 A:middle
Because they are TVMLKit
components you have

00:28:15.776 --> 00:28:16.526 A:middle
to reuse them.

00:28:16.526 --> 00:28:19.426 A:middle
And more importantly,
you have to forward

00:28:19.786 --> 00:28:24.066 A:middle
into the TVInterfaceFactory
so we can do the right thing.

00:28:24.886 --> 00:28:27.586 A:middle
If you have a native app

00:28:28.756 --> 00:28:31.266 A:middle
or rather you have your
own view controllers

00:28:32.276 --> 00:28:35.906 A:middle
and you have a TVMLKit based
application, you can mix them

00:28:35.996 --> 00:28:37.056 A:middle
with the framework itself.

00:28:38.156 --> 00:28:41.606 A:middle
This is as simple as defining
a custom template element,

00:28:42.716 --> 00:28:45.796 A:middle
once again registering
it with element factory.

00:28:47.366 --> 00:28:49.256 A:middle
And where we built
the user interface

00:28:49.256 --> 00:28:51.456 A:middle
for a particular
template via loading,

00:28:52.246 --> 00:28:57.266 A:middle
return your view controller
and you're all set to go.

00:28:58.686 --> 00:29:02.666 A:middle
Another way to use TVMLKit with
your existing apps, native apps,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.686 --> 00:29:02.666 A:middle
Another way to use TVMLKit with
your existing apps, native apps,

00:29:03.416 --> 00:29:05.166 A:middle
is by hosting the
navigation controller

00:29:05.166 --> 00:29:07.656 A:middle
that we provide, as
a sub application.

00:29:08.246 --> 00:29:10.836 A:middle
You've already learned how

00:29:10.836 --> 00:29:13.126 A:middle
to create a TV application
controller,

00:29:13.126 --> 00:29:16.136 A:middle
and I'd like to highlight that
in this case you do not have

00:29:16.136 --> 00:29:19.176 A:middle
to specify a window,
because you already have one.

00:29:20.156 --> 00:29:21.906 A:middle
Choose the view controller
that you're presenting

00:29:22.446 --> 00:29:23.566 A:middle
in navigation controller with.

00:29:25.046 --> 00:29:27.396 A:middle
Once you have a TV
application controller,

00:29:27.846 --> 00:29:32.066 A:middle
take its navigation
controller and present it.

00:29:32.726 --> 00:29:36.956 A:middle
An alternative to this is to
use an instance of UIWindow,

00:29:38.006 --> 00:29:40.426 A:middle
and in this particular
example, you would have

00:29:40.546 --> 00:29:42.666 A:middle
to specify the window parameter.

00:29:43.936 --> 00:29:47.226 A:middle
Once JavaScript starts up and
application logic executes,

00:29:47.596 --> 00:29:49.116 A:middle
TVMLKit will do the right thing

00:29:49.646 --> 00:29:51.716 A:middle
and bring your window
key invisible.

00:29:54.176 --> 00:29:56.846 A:middle
And with that, I'd like to hand
over the time to Christopher,

00:29:56.846 --> 00:30:00.056 A:middle
to talk to you about how you can
extend application functionality


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:56.846 --> 00:30:00.056 A:middle
to talk to you about how you can
extend application functionality

00:30:00.196 --> 00:30:02.776 A:middle
through extending
JavaScript, Chris.

00:30:04.516 --> 00:30:07.706 A:middle
[ Applause ]

00:30:08.206 --> 00:30:08.816 A:middle
&gt;&gt; Thanks Jeremy.

00:30:09.226 --> 00:30:13.086 A:middle
Hi, I'm Christopher,
I'm a TVMLKit engineer.

00:30:14.186 --> 00:30:17.806 A:middle
So we just saw how you can
extend the templating engine

00:30:17.806 --> 00:30:20.976 A:middle
in TVMLKit to use
custom mark-up,

00:30:21.406 --> 00:30:25.176 A:middle
implement your own
views, view controllers,

00:30:25.666 --> 00:30:27.196 A:middle
and collection view cells.

00:30:28.126 --> 00:30:31.686 A:middle
You can also extend the
scripting engine of TVMLKit

00:30:31.986 --> 00:30:33.896 A:middle
which is powered
by JavaScriptCore

00:30:34.456 --> 00:30:38.096 A:middle
to implement your own app
specific functionality

00:30:38.536 --> 00:30:41.076 A:middle
in JavaScript or
expose to JavaScript.

00:30:42.206 --> 00:30:45.066 A:middle
There are three main
ways to inject code

00:30:45.066 --> 00:30:46.446 A:middle
into the JavaScript context

00:30:46.676 --> 00:30:49.316 A:middle
of your TVML application,
let's take a look.

00:30:51.056 --> 00:30:55.196 A:middle
First, you can simply load
additional JavaScript libraries

00:30:55.306 --> 00:30:58.356 A:middle
at run time.

00:30:58.596 --> 00:31:02.996 A:middle
Second, you can use native
code to interact directly


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.596 --> 00:31:02.996 A:middle
Second, you can use native
code to interact directly

00:31:03.286 --> 00:31:06.766 A:middle
with the JavaScript context in
your application and do things

00:31:06.766 --> 00:31:10.676 A:middle
like invoke functions into
JavaScript or pass data back

00:31:10.676 --> 00:31:12.206 A:middle
and forth between environments.

00:31:13.376 --> 00:31:16.736 A:middle
Third, you can take
native classes

00:31:17.456 --> 00:31:19.986 A:middle
and you can actually
bridge them into JavaScript

00:31:20.736 --> 00:31:24.156 A:middle
to make them accessible to your
scripts using some simple class

00:31:24.156 --> 00:31:25.636 A:middle
conventions in JavaScriptCore.

00:31:26.146 --> 00:31:28.856 A:middle
Let's go into detail
into each one

00:31:28.856 --> 00:31:31.036 A:middle
of these methods starting
with the simplest.

00:31:33.536 --> 00:31:35.876 A:middle
When your TVML application
loads,

00:31:36.476 --> 00:31:38.946 A:middle
the first thing that's going
to happen is, TVMLKit is going

00:31:38.946 --> 00:31:40.266 A:middle
to fetch a JavaScript file

00:31:40.616 --> 00:31:43.126 A:middle
that contains the
app.onlaunch call back

00:31:43.656 --> 00:31:46.086 A:middle
where control will be
handed over to JavaScript

00:31:46.086 --> 00:31:47.436 A:middle
for your TVML application.

00:31:48.366 --> 00:31:52.656 A:middle
Startup has to wait until this
application.js file is fetched

00:31:53.046 --> 00:31:56.166 A:middle
and evaluated before
app.onlaunch can execute.

00:31:56.876 --> 00:32:00.236 A:middle
If you have a large application,
it's a good idea to break


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:56.876 --> 00:32:00.236 A:middle
If you have a large application,
it's a good idea to break

00:32:00.236 --> 00:32:05.446 A:middle
up the code into separate
files to speed up startup time.

00:32:05.656 --> 00:32:09.306 A:middle
This is a common pattern
and TVMLKit supports this

00:32:09.336 --> 00:32:11.586 A:middle
by allowing you to load
additional JavaScript

00:32:12.526 --> 00:32:14.476 A:middle
at any point in the
application lifecycle.

00:32:15.096 --> 00:32:20.256 A:middle
Your JavaScript libraries are
where you will define variables

00:32:20.536 --> 00:32:24.116 A:middle
and functions that get shared
globally across your scripts.

00:32:24.626 --> 00:32:30.856 A:middle
Let's take a look at the
evaluate scripts global function

00:32:30.856 --> 00:32:32.796 A:middle
that TVMLKit JS provides.

00:32:33.946 --> 00:32:38.106 A:middle
Generally you'd want to call
this in your app.onlaunch

00:32:38.196 --> 00:32:39.696 A:middle
but you can actually
use it anywhere.

00:32:40.866 --> 00:32:44.126 A:middle
The function takes an
array of script URLs

00:32:44.606 --> 00:32:46.786 A:middle
and a completion call
back as arguments.

00:32:48.066 --> 00:32:51.716 A:middle
When your completion call back
is executed, you'll be able

00:32:51.716 --> 00:32:53.846 A:middle
to use the variables
and functions

00:32:53.846 --> 00:32:55.596 A:middle
that were defined
in your libraries.

00:32:56.396 --> 00:32:58.016 A:middle
But there are a few
things to keep in mind.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:01.076 --> 00:33:05.926 A:middle
When you call evaluate
scripts, TVMLKit JS is going

00:33:05.926 --> 00:33:08.756 A:middle
to execute the code,
including any side effects

00:33:08.756 --> 00:33:10.066 A:middle
in your JavaScript files.

00:33:11.366 --> 00:33:15.446 A:middle
So don't call evaluate scripts
multiple times on the same file.

00:33:16.346 --> 00:33:19.206 A:middle
Also, be careful if you
have scripts that depend

00:33:19.206 --> 00:33:22.046 A:middle
on other scripts, that you
load them in the correct order.

00:33:24.596 --> 00:33:28.196 A:middle
Evaluate scripts fetches
the array of script URLs

00:33:28.306 --> 00:33:32.856 A:middle
in parallel, and then
executes them in sequence.

00:33:33.386 --> 00:33:35.736 A:middle
If any of the scripts
are unavailable,

00:33:36.076 --> 00:33:37.626 A:middle
none of the scripts
will execute,

00:33:38.066 --> 00:33:40.586 A:middle
so always check the
success argument

00:33:40.836 --> 00:33:42.936 A:middle
to your completion
call back to make sure

00:33:42.936 --> 00:33:45.516 A:middle
that your library
functionality is available.

00:33:46.036 --> 00:33:50.476 A:middle
And finally, I'd just
like to remind everyone

00:33:50.476 --> 00:33:55.536 A:middle
that even though TVMLKit
offers many web like APIs,

00:33:55.536 --> 00:33:57.936 A:middle
your TVML application
is not a web browser.

00:33:58.416 --> 00:34:01.216 A:middle
So you may find some
JavaScript libraries on the web


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.416 --> 00:34:01.216 A:middle
So you may find some
JavaScript libraries on the web

00:34:01.376 --> 00:34:04.716 A:middle
that will be helpful to you
but some may not be compatible,

00:34:04.916 --> 00:34:07.396 A:middle
especially if they rely
on browser functionality

00:34:07.396 --> 00:34:11.306 A:middle
like a global window object
or a global document object.

00:34:12.226 --> 00:34:13.295 A:middle
Just keep that in mind.

00:34:13.755 --> 00:34:18.656 A:middle
But you don't have to limit
yourself to just JavaScript

00:34:18.656 --> 00:34:22.216 A:middle
in your TVML applications,
you can actually call

00:34:22.216 --> 00:34:25.485 A:middle
into the JavaScript
environment from native code.

00:34:26.426 --> 00:34:30.076 A:middle
From here you can do things
like pipe UI application events

00:34:30.076 --> 00:34:33.196 A:middle
down into JavaScript
or push and pull data

00:34:33.196 --> 00:34:34.476 A:middle
between JavaScript and native.

00:34:34.996 --> 00:34:43.306 A:middle
In TVML, your JavaScript context
is managed for you by TVMLKit

00:34:43.956 --> 00:34:47.206 A:middle
in a class called the
TVApplicationController.

00:34:48.386 --> 00:34:51.806 A:middle
JavaScript executes on a
separate thread so you have

00:34:51.806 --> 00:34:54.476 A:middle
to schedule your
interactions with it.

00:34:54.786 --> 00:34:57.506 A:middle
In the simplest form, all you
have to do is call a method

00:34:57.506 --> 00:34:59.466 A:middle
on this TVApplicationController,

00:34:59.726 --> 00:35:01.716 A:middle
and pass in a block
to be evaluated.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.726 --> 00:35:01.716 A:middle
and pass in a block
to be evaluated.

00:35:04.366 --> 00:35:07.366 A:middle
When your block executes,
you'll get a reference back

00:35:07.366 --> 00:35:11.576 A:middle
to the JS context, from
here, you can eval strings

00:35:11.576 --> 00:35:16.216 A:middle
as JavaScript code, you can
invoke methods on objects,

00:35:16.786 --> 00:35:19.006 A:middle
and you can get and
set properties

00:35:19.006 --> 00:35:21.626 A:middle
into JavaScript using
native values.

00:35:23.196 --> 00:35:26.516 A:middle
Just make sure that you
don't retain this JSContext

00:35:26.896 --> 00:35:28.616 A:middle
or use it anywhere
outside of the block.

00:35:31.326 --> 00:35:34.576 A:middle
Since your JavaScript is all
happening on a separate thread,

00:35:34.866 --> 00:35:36.266 A:middle
you also want to be careful

00:35:36.326 --> 00:35:39.486 A:middle
that you don't perform any
blocking operations while you're

00:35:39.486 --> 00:35:40.596 A:middle
evaluating this block,

00:35:41.046 --> 00:35:42.756 A:middle
as you may deadlock
with the main thread.

00:35:44.086 --> 00:35:48.386 A:middle
For more information on
JSContext and JavaScriptCore,

00:35:48.786 --> 00:35:53.236 A:middle
please see the 2013 WWDC
session on JavaScriptCore.

00:35:53.746 --> 00:35:58.326 A:middle
Let's take a look at an
example of how we would call

00:35:58.326 --> 00:36:01.546 A:middle
into JavaScript code from
our Swift application.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:58.326 --> 00:36:01.546 A:middle
into JavaScript code from
our Swift application.

00:36:02.686 --> 00:36:04.426 A:middle
Here we're looking
at the Swift code

00:36:04.626 --> 00:36:07.106 A:middle
for our TVML app's app delegate.

00:36:07.906 --> 00:36:09.306 A:middle
We've implemented a stub here

00:36:09.446 --> 00:36:11.486 A:middle
for the UIApplication
delegate method

00:36:11.486 --> 00:36:14.066 A:middle
to handle custom URL schemes.

00:36:14.786 --> 00:36:20.306 A:middle
If we wanted to pass this
URL down into JavaScript,

00:36:20.806 --> 00:36:23.576 A:middle
all we have to do is
ask the appController

00:36:23.676 --> 00:36:26.836 A:middle
to evaluate a block in
the JavaScript context.

00:36:27.276 --> 00:36:33.516 A:middle
When this block executes,
we'll have a reference

00:36:33.516 --> 00:36:38.286 A:middle
to the JSContext, from here we
can access properties directly

00:36:38.286 --> 00:36:40.936 A:middle
on the JavaScript
global scope object.

00:36:41.376 --> 00:36:47.166 A:middle
We can take native values
or objects and use them

00:36:47.216 --> 00:36:49.726 A:middle
as JavaScript properties
or in this case,

00:36:49.996 --> 00:36:51.006 A:middle
as a function argument.

00:36:52.156 --> 00:36:56.326 A:middle
Here, we're invoking the
on open URL global function

00:36:56.376 --> 00:37:00.546 A:middle
that was defined in JavaScript
and passing along a string


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:56.376 --> 00:37:00.546 A:middle
that was defined in JavaScript
and passing along a string

00:37:00.676 --> 00:37:03.966 A:middle
of the URL from the
UIApplication delegate

00:37:03.966 --> 00:37:06.396 A:middle
call back.

00:37:06.606 --> 00:37:09.886 A:middle
Just like that we've
exposed new functionality

00:37:09.966 --> 00:37:11.826 A:middle
into our TVMLKit application

00:37:12.116 --> 00:37:14.466 A:middle
and exposed application
events into JavaScript.

00:37:17.716 --> 00:37:19.676 A:middle
Next, let's talk about bridging.

00:37:20.706 --> 00:37:24.806 A:middle
So we just saw how super easy
it is to take native values

00:37:25.376 --> 00:37:30.396 A:middle
and use them in JavaScript,
for simple types like strings,

00:37:30.506 --> 00:37:33.596 A:middle
numbers, and arrays
this is already handled

00:37:33.596 --> 00:37:35.096 A:middle
for you by JavaScriptCore.

00:37:36.596 --> 00:37:40.776 A:middle
If you want to use your
own classes, all you have

00:37:40.776 --> 00:37:43.736 A:middle
to do is follow a few
simple class conventions

00:37:43.806 --> 00:37:47.006 A:middle
and JavaScriptCore can actually
bridge your classes as well.

00:37:47.696 --> 00:37:48.326 A:middle
Let's take a look.

00:37:48.676 --> 00:37:51.836 A:middle
So there are three
main steps here.

00:37:53.176 --> 00:37:56.076 A:middle
First, you have to
declare a custom protocol

00:37:56.186 --> 00:37:59.586 A:middle
that extends JSExport,
extends JSExport,

00:37:59.646 --> 00:38:01.196 A:middle
which comes from JavaScriptCore.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.646 --> 00:38:01.196 A:middle
which comes from JavaScriptCore.

00:38:03.056 --> 00:38:08.276 A:middle
Second, we're going to define
our classes using Swift

00:38:08.706 --> 00:38:11.116 A:middle
and extending this
native, this protocol

00:38:11.866 --> 00:38:13.116 A:middle
to expose our native classes.

00:38:13.816 --> 00:38:18.816 A:middle
And third, we're going to take
the instance of our classes

00:38:18.816 --> 00:38:23.016 A:middle
or the class itself that we want
to expose and use a call back

00:38:23.216 --> 00:38:25.996 A:middle
on the TV application
controller delegate

00:38:26.386 --> 00:38:29.666 A:middle
to prepare the JSContext
before control gets handed

00:38:29.666 --> 00:38:31.646 A:middle
over to JavaScript
during app on launch.

00:38:32.116 --> 00:38:38.096 A:middle
Let's take a look at an
approach of how we would go

00:38:38.096 --> 00:38:41.726 A:middle
about creating a wrapper
around store kit if we wanted

00:38:41.726 --> 00:38:45.106 A:middle
to expose something like in
app purchase functionality

00:38:46.016 --> 00:38:46.786 A:middle
to JavaScript.

00:38:49.176 --> 00:38:52.286 A:middle
We start off by defining
our protocol,

00:38:53.346 --> 00:38:56.826 A:middle
here's where we'd specify
properties or methods

00:38:56.826 --> 00:39:00.446 A:middle
that we wanted JavaScriptCore
to bridge for us.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:56.826 --> 00:39:00.446 A:middle
that we wanted JavaScriptCore
to bridge for us.

00:39:01.976 --> 00:39:04.416 A:middle
Here we'll just leave it
as a stub but you can see

00:39:04.416 --> 00:39:06.176 A:middle
that we've extended JSExport

00:39:06.266 --> 00:39:09.776 A:middle
and defined a protocol called
StoreKitWrapperProtocol.

00:39:11.676 --> 00:39:16.456 A:middle
Next, we will create a class
for our store kit wrapper

00:39:16.666 --> 00:39:20.316 A:middle
that extends NSObject and
implements this custom protocol.

00:39:21.526 --> 00:39:24.896 A:middle
Once again I've left the details
stubbed out but this would be

00:39:24.896 --> 00:39:27.136 A:middle
where you'd define your
native functionality

00:39:27.176 --> 00:39:28.966 A:middle
that you wanted JavaScript
to call into.

00:39:29.486 --> 00:39:36.596 A:middle
And finally, we implement the
TVApplicationControllerDelegate

00:39:36.596 --> 00:39:40.396 A:middle
method to evaluate app
JavaScript in context.

00:39:41.176 --> 00:39:44.646 A:middle
This gets called before
app.onlaunch executes

00:39:44.806 --> 00:39:49.256 A:middle
and allows us to expose our
custom functionality before

00:39:49.256 --> 00:39:51.266 A:middle
control gets handed
over to JavaScript.

00:39:52.696 --> 00:39:54.426 A:middle
That's really all
there is to it.

00:39:55.066 --> 00:39:57.116 A:middle
We've now defined
a native class,

00:39:57.456 --> 00:39:59.326 A:middle
we've gone through the
steps to make it accessible

00:39:59.486 --> 00:40:04.976 A:middle
to our TVML application's
JavaScript.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.486 --> 00:40:04.976 A:middle
to our TVML application's
JavaScript.

00:40:05.046 --> 00:40:08.406 A:middle
So in this session we've seen
how you can leverage native

00:40:08.406 --> 00:40:12.086 A:middle
functionality to enhance
your TVML applications.

00:40:12.616 --> 00:40:16.936 A:middle
You can extend templates
using custom mark-up

00:40:17.336 --> 00:40:19.936 A:middle
for your own views and
collection view cells.

00:40:20.726 --> 00:40:24.936 A:middle
You can actually host TVMLKit
inside of a native application

00:40:25.516 --> 00:40:29.376 A:middle
or use your own native view
controllers inside a TVMLKit.

00:40:29.916 --> 00:40:34.586 A:middle
You can even extend the
scripting environment in TVMLKit

00:40:35.046 --> 00:40:38.636 A:middle
to bridge native classes, type
application events through,

00:40:39.266 --> 00:40:40.866 A:middle
and load additional libraries.

00:40:41.716 --> 00:40:43.856 A:middle
I hope we've shown
you how easy it is

00:40:44.346 --> 00:40:46.616 A:middle
to build app specific
functionality

00:40:46.926 --> 00:40:49.886 A:middle
in your TVMLKit apps
that's custom to your brand.

00:40:50.946 --> 00:40:54.726 A:middle
TVMLKit is a really simple
API for building complex apps

00:40:55.066 --> 00:40:57.656 A:middle
with high quality results
and minimal overhead.

00:40:59.476 --> 00:41:02.746 A:middle
I encourage you to
check out the TVML guide


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.476 --> 00:41:02.746 A:middle
I encourage you to
check out the TVML guide

00:41:02.746 --> 00:41:06.746 A:middle
and TVML catalog sample
applications for more ideas

00:41:06.746 --> 00:41:09.116 A:middle
on how to extend
and use TVMLKit.

00:41:10.116 --> 00:41:12.336 A:middle
Please also check out the
Apple developer website

00:41:12.336 --> 00:41:15.596 A:middle
for programming guides, sample
code, and documentation.

00:41:19.176 --> 00:41:22.516 A:middle
Also, check out these other
sessions that happen this year

00:41:22.516 --> 00:41:26.546 A:middle
at WWDC 2016, especially
Developing Apps

00:41:26.546 --> 00:41:30.296 A:middle
for TVMLKit Part 1,
which has a great demo

00:41:30.296 --> 00:41:32.086 A:middle
of building an app
from start to finish.

00:41:33.126 --> 00:41:37.796 A:middle
Thank you, and enjoy
the rest of WWDC 2016.

