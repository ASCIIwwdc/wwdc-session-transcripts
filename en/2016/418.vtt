WEBVTT

00:00:07.516 --> 00:00:19.500 A:middle
[ Music ]

00:00:22.516 --> 00:00:26.616 A:middle
[ Applause ]

00:00:27.116 --> 00:00:28.796 A:middle
&gt;&gt; Good afternoon.

00:00:28.796 --> 00:00:30.006 A:middle
My name is Kris Markel.

00:00:30.036 --> 00:00:32.266 A:middle
I'm a member of Apple's
Performance Tools Team.

00:00:32.316 --> 00:00:33.226 A:middle
And today we're going to talk

00:00:33.226 --> 00:00:35.896 A:middle
about using Time
Profiler in Instruments.

00:00:36.806 --> 00:00:37.886 A:middle
So here's our agenda.

00:00:37.886 --> 00:00:40.356 A:middle
We're going to start with an
introduction to profiling.

00:00:40.626 --> 00:00:41.946 A:middle
What it is, and how
you get started.

00:00:41.946 --> 00:00:43.236 A:middle
And then we're going
to show an example

00:00:43.236 --> 00:00:46.716 A:middle
of making an application
go faster and do less.

00:00:46.716 --> 00:00:50.606 A:middle
And then finally, ensuring we
have really great user responses

00:00:51.076 --> 00:00:51.906 A:middle
in our application.

00:00:52.536 --> 00:00:53.596 A:middle
But before we do that,

00:00:53.596 --> 00:00:55.806 A:middle
let's talk about why
we want to do this.

00:00:56.096 --> 00:00:58.136 A:middle
And the reason we're doing
this is because we want

00:00:58.136 --> 00:01:01.276 A:middle
to provide a great
user experience.

00:00:58.136 --> 00:01:01.276 A:middle
to provide a great
user experience.

00:01:01.616 --> 00:01:04.586 A:middle
We want our users to love
using our applications.

00:01:05.006 --> 00:01:07.116 A:middle
We want them to love
our user applications

00:01:07.156 --> 00:01:08.436 A:middle
because they're fast.

00:01:08.796 --> 00:01:09.796 A:middle
Cheetah fast.

00:01:10.356 --> 00:01:12.596 A:middle
So it saves them time and
they can get more done.

00:01:13.256 --> 00:01:16.136 A:middle
We want to make sure our users
have all-day battery life.

00:01:16.826 --> 00:01:17.566 A:middle
So that they're able

00:01:17.566 --> 00:01:19.246 A:middle
to use their devices
throughout the day.

00:01:19.626 --> 00:01:22.346 A:middle
And you don't want to be that
application that's at the top

00:01:22.346 --> 00:01:23.746 A:middle
of the battery usage chart.

00:01:24.606 --> 00:01:27.716 A:middle
And finally, we want to make
sure we have smooth scrolling,

00:01:28.076 --> 00:01:30.796 A:middle
and a really responsive
UI in our applications,

00:01:31.246 --> 00:01:33.036 A:middle
so users love using it.

00:01:33.516 --> 00:01:34.846 A:middle
And how are we going to do this?

00:01:35.286 --> 00:01:37.136 A:middle
We're going to use a
technique called profiling.

00:01:37.716 --> 00:01:39.546 A:middle
Profiling is answering
two questions

00:01:39.546 --> 00:01:40.556 A:middle
about your application.

00:01:40.896 --> 00:01:42.226 A:middle
How much work is it doing?

00:01:42.646 --> 00:01:44.316 A:middle
And what kind of
work is it doing?

00:01:44.896 --> 00:01:46.676 A:middle
And, if you hadn't
guessed from the title,

00:01:47.046 --> 00:01:50.306 A:middle
we're going to use a tool
called Time Profiler to do this.

00:01:50.676 --> 00:01:53.106 A:middle
Time Profiler answers
an additional question

00:01:53.426 --> 00:01:55.416 A:middle
of when is my app
doing that work?

00:01:56.616 --> 00:01:59.586 A:middle
Time Profiler is part of an
application called Instruments

00:01:59.846 --> 00:02:02.536 A:middle
that is a collection of
a wide variety of tools

00:01:59.846 --> 00:02:02.536 A:middle
that is a collection of
a wide variety of tools

00:02:02.826 --> 00:02:05.746 A:middle
that measure all kinds of
aspects of your application.

00:02:06.666 --> 00:02:07.756 A:middle
And how do we get started?

00:02:08.015 --> 00:02:08.946 A:middle
Well, it's really easy.

00:02:09.196 --> 00:02:10.686 A:middle
From Xcode's Product menu,

00:02:11.146 --> 00:02:12.536 A:middle
you just go ahead
and choose Profile.

00:02:13.436 --> 00:02:14.906 A:middle
So let's go ahead
and do that now.

00:02:16.326 --> 00:02:19.096 A:middle
Okay. So first I'm going
to show you my application.

00:02:19.526 --> 00:02:20.796 A:middle
Give you an idea
of what it's doing.

00:02:21.676 --> 00:02:25.136 A:middle
My application uses the
Photo's framework to look

00:02:25.136 --> 00:02:28.026 A:middle
at the user's photo library
and check for duplicates.

00:02:28.516 --> 00:02:30.046 A:middle
So I'm going to go
ahead and do that now.

00:02:30.116 --> 00:02:31.676 A:middle
And it takes a little while

00:02:31.676 --> 00:02:34.336 A:middle
when my test data has
lots of duplicates.

00:02:34.396 --> 00:02:36.266 A:middle
So it comes up with
a pretty big number.

00:02:36.566 --> 00:02:37.316 A:middle
Okay, that's done.

00:02:37.316 --> 00:02:40.016 A:middle
Now I'm going to go ahead
and select some photos.

00:02:40.556 --> 00:02:43.776 A:middle
And then let's find a good one.

00:02:43.776 --> 00:02:44.336 A:middle
Here is one.

00:02:44.616 --> 00:02:47.226 A:middle
And then it uses the core
image face detection.

00:02:47.226 --> 00:02:49.456 A:middle
So I can add some
googly eyes to my face.

00:02:49.526 --> 00:02:52.866 A:middle
And then it uses UI
dynamics in CoreMotion

00:02:53.406 --> 00:02:54.816 A:middle
to make the googly eyes jump

00:02:54.816 --> 00:02:56.576 A:middle
around when you shake
the device.

00:02:57.626 --> 00:03:00.126 A:middle
Okay. So that's the application.

00:02:57.626 --> 00:03:00.126 A:middle
Okay. So that's the application.

00:03:01.046 --> 00:03:03.286 A:middle
Let's go ahead and profile
it to see what it's doing.

00:03:04.036 --> 00:03:07.836 A:middle
So from Xcode's Product
menu, I'm going to go ahead,

00:03:07.836 --> 00:03:09.686 A:middle
and just like I said,
choose Profile.

00:03:10.596 --> 00:03:13.086 A:middle
This is going to do a release
build of my application,

00:03:13.496 --> 00:03:17.296 A:middle
and then launch Instruments
so I can start measuring it.

00:03:17.486 --> 00:03:20.356 A:middle
It's important to do
profile release builds,

00:03:20.356 --> 00:03:22.096 A:middle
because you want all
the optimizations

00:03:22.096 --> 00:03:23.316 A:middle
that you'll get from
the compiler.

00:03:23.986 --> 00:03:26.306 A:middle
So this will take just a moment.

00:03:26.656 --> 00:03:28.976 A:middle
And it's copying the
application to the device.

00:03:34.046 --> 00:03:34.456 A:middle
Here we go.

00:03:35.496 --> 00:03:37.336 A:middle
So now Instruments comes up.

00:03:37.546 --> 00:03:40.126 A:middle
And it's going to show
me the template chooser.

00:03:40.826 --> 00:03:43.696 A:middle
And this you get an idea
of exactly what kind

00:03:43.696 --> 00:03:45.476 A:middle
of tools Instruments
provides for you.

00:03:45.916 --> 00:03:47.706 A:middle
Today, of course, we
want Time Profiler.

00:03:48.146 --> 00:03:51.876 A:middle
So I'm going to go
ahead and click Choose.

00:03:52.096 --> 00:03:54.536 A:middle
Now if you've never
used Instruments before,

00:03:54.646 --> 00:03:56.806 A:middle
this user interface can
be a little intimidating.

00:03:57.226 --> 00:03:59.116 A:middle
But getting started
is really simple.

00:04:00.386 --> 00:04:02.636 A:middle
All I have to do is go
up to this Record button

00:04:02.636 --> 00:04:04.446 A:middle
up in the corner, and click it.

00:04:04.966 --> 00:04:06.846 A:middle
That's going to start
my application,

00:04:06.846 --> 00:04:07.936 A:middle
and start measuring it.

00:04:08.266 --> 00:04:09.756 A:middle
So let's go ahead
and do that now.

00:04:10.936 --> 00:04:15.656 A:middle
Okay, so now my application
is started.

00:04:15.656 --> 00:04:16.466 A:middle
It is starting.

00:04:16.656 --> 00:04:17.116 A:middle
There we go.

00:04:17.946 --> 00:04:19.976 A:middle
Right? I'm going to do
my duplicate checking.

00:04:20.736 --> 00:04:22.346 A:middle
Just one moment.

00:04:22.996 --> 00:04:27.236 A:middle
Okay. And then I'm
going to go ahead

00:04:27.236 --> 00:04:28.716 A:middle
and do my duplicate checking.

00:04:29.876 --> 00:04:31.446 A:middle
And let's see if we
start getting data now.

00:04:32.216 --> 00:04:35.076 A:middle
There we go.

00:04:35.326 --> 00:04:36.296 A:middle
Okay, now that's done.

00:04:36.296 --> 00:04:38.586 A:middle
Now I'm going to
select my photos.

00:04:39.096 --> 00:04:42.746 A:middle
And then I'm going
to pick a photo.

00:04:43.486 --> 00:04:44.926 A:middle
Add some googly eyes.

00:04:45.966 --> 00:04:47.006 A:middle
Shake it around.

00:04:48.066 --> 00:04:49.916 A:middle
Now let's go ahead and
dismiss that photo.

00:04:50.726 --> 00:04:55.436 A:middle
And then I'm going to go
ahead and stop the recording.

00:04:55.946 --> 00:04:59.506 A:middle
I'm clicking the Stop button.

00:04:59.506 --> 00:05:03.306 A:middle
And now we can see here, I have
a nice, high-level overview

00:04:59.506 --> 00:05:03.306 A:middle
And now we can see here, I have
a nice, high-level overview

00:05:03.446 --> 00:05:06.416 A:middle
of what my app was doing.

00:05:06.856 --> 00:05:08.566 A:middle
Time Profiler gives
me two graphs.

00:05:08.626 --> 00:05:11.186 A:middle
This top part of Instruments
is known as the Timeline view.

00:05:11.756 --> 00:05:14.676 A:middle
The first graph is my CPU usage.

00:05:14.846 --> 00:05:16.466 A:middle
How much CPU my app is using.

00:05:17.046 --> 00:05:19.876 A:middle
And I can actually hover over
it, and see the precise values.

00:05:20.526 --> 00:05:25.536 A:middle
The second graph is what
lifecycle state my application

00:05:25.536 --> 00:05:29.516 A:middle
is in, and how long
it's been in that state.

00:05:29.716 --> 00:05:33.016 A:middle
So that gives me
a really good idea

00:05:33.216 --> 00:05:35.736 A:middle
of how much work my
application is doing,

00:05:36.076 --> 00:05:37.136 A:middle
and when it's doing it.

00:05:37.786 --> 00:05:40.346 A:middle
But how do I know what
is my application doing?

00:05:40.886 --> 00:05:42.146 A:middle
And to figure that out,

00:05:42.236 --> 00:05:44.086 A:middle
we go down to Instrument's
Call Tree View.

00:05:44.316 --> 00:05:45.996 A:middle
Which is this part here
in the Detail view.

00:05:46.456 --> 00:05:50.176 A:middle
And the Call Tree View
represents the collected call

00:05:50.176 --> 00:05:52.556 A:middle
stack samples aggregated
by weight,

00:05:53.116 --> 00:05:55.886 A:middle
and shown in the Detail view.

00:05:56.576 --> 00:05:58.626 A:middle
Now what exactly does this mean?

00:05:59.126 --> 00:06:00.506 A:middle
Well, this is a lot
easier to show

00:05:59.126 --> 00:06:00.506 A:middle
Well, this is a lot
easier to show

00:06:00.506 --> 00:06:02.606 A:middle
in pictures, rather than words.

00:06:02.666 --> 00:06:05.356 A:middle
So let's go ahead and
look at a diagram.

00:06:06.566 --> 00:06:08.986 A:middle
So here we have time,
moving along to the right.

00:06:09.336 --> 00:06:11.266 A:middle
And here is our very
simple application.

00:06:11.856 --> 00:06:14.296 A:middle
We have a main method
that's calling into method1.

00:06:14.706 --> 00:06:15.956 A:middle
That's calling into method2.

00:06:16.656 --> 00:06:18.896 A:middle
At this point in time,
Time Profiler is going

00:06:18.896 --> 00:06:20.926 A:middle
to get a call stack
from our application,

00:06:21.426 --> 00:06:22.446 A:middle
and it looks like this.

00:06:23.096 --> 00:06:25.456 A:middle
This is just like the call
stacks you see when you're

00:06:25.456 --> 00:06:26.696 A:middle
in the debugger in Xcode.

00:06:27.256 --> 00:06:30.926 A:middle
But Instruments or Time Profiler
indents each subsequent line.

00:06:30.926 --> 00:06:32.986 A:middle
And it does that so it can
build a tree structure,

00:06:33.116 --> 00:06:33.996 A:middle
which we'll see in a moment.

00:06:34.976 --> 00:06:36.326 A:middle
So time continues on.

00:06:36.466 --> 00:06:38.476 A:middle
Oh, and then it records
that call stack.

00:06:38.576 --> 00:06:41.516 A:middle
And it records the number of
times it's seeing each method

00:06:41.516 --> 00:06:43.446 A:middle
or function within
that call stack.

00:06:44.746 --> 00:06:47.376 A:middle
So time continues, and
we can see method2 exits,

00:06:47.456 --> 00:06:50.546 A:middle
method1 calls method3 which
exists, calls method2 again.

00:06:51.206 --> 00:06:53.496 A:middle
Then we go ahead, one
millisecond has passed.

00:06:54.006 --> 00:06:55.866 A:middle
And Time Profiler's going
to take another sample.

00:06:56.126 --> 00:06:58.836 A:middle
And in this case, it looks
identical to the first.

00:06:58.886 --> 00:07:00.336 A:middle
So we'll go ahead
and update our table.

00:06:58.886 --> 00:07:00.336 A:middle
So we'll go ahead
and update our table.

00:07:00.876 --> 00:07:03.066 A:middle
And we just increment
each of those numbers.

00:07:04.136 --> 00:07:06.346 A:middle
And time's going to
continue forward again.

00:07:06.346 --> 00:07:08.736 A:middle
And now we see our application
is doing something different.

00:07:09.436 --> 00:07:10.916 A:middle
We have main calling directly

00:07:10.916 --> 00:07:12.736 A:middle
into method2; calling
into method3.

00:07:13.426 --> 00:07:15.706 A:middle
Time Profiler's going to take
another sample right here.

00:07:16.136 --> 00:07:18.026 A:middle
And now we can see our
different call stack.

00:07:18.686 --> 00:07:20.856 A:middle
It only has two methods
in this case.

00:07:21.306 --> 00:07:24.456 A:middle
And then so when we update our
table, this represents a branch.

00:07:24.876 --> 00:07:28.466 A:middle
So now we know that
sometimes main calls method1,

00:07:28.466 --> 00:07:30.096 A:middle
and sometimes it calls method2.

00:07:30.406 --> 00:07:32.526 A:middle
And we know exactly how
many times it's done each

00:07:32.526 --> 00:07:33.286 A:middle
of those things.

00:07:34.706 --> 00:07:38.046 A:middle
So time continues on, and we
collect a couple more samples.

00:07:38.046 --> 00:07:40.136 A:middle
These happen to be identical
to our first samples.

00:07:40.616 --> 00:07:42.746 A:middle
And so we're going to update
our table appropriately.

00:07:43.426 --> 00:07:46.476 A:middle
So now let's take a look at
what this table is actually

00:07:46.476 --> 00:07:48.496 A:middle
telling us.

00:07:48.716 --> 00:07:51.816 A:middle
One thing to note is that
Time Profiler's not actually

00:07:51.816 --> 00:07:53.016 A:middle
measuring duration.

00:07:53.326 --> 00:07:55.326 A:middle
It's not recording
when the method starts,

00:07:55.596 --> 00:07:58.316 A:middle
and then when it exits and
subtracting those two numbers.

00:07:58.626 --> 00:08:02.046 A:middle
It's aggregating the samples
into a useful summary.

00:07:58.626 --> 00:08:02.046 A:middle
It's aggregating the samples
into a useful summary.

00:08:02.446 --> 00:08:04.866 A:middle
So when you see time
values in Time Profiler,

00:08:05.196 --> 00:08:07.196 A:middle
it's not an actual
measurement of duration.

00:08:07.536 --> 00:08:10.156 A:middle
That's the number of
samples multiplied

00:08:10.156 --> 00:08:12.166 A:middle
by the time between samples.

00:08:12.246 --> 00:08:14.166 A:middle
Which is 1 millisecond,
in most cases.

00:08:14.316 --> 00:08:17.206 A:middle
This does have some
side effects.

00:08:17.556 --> 00:08:20.156 A:middle
And one of them is that Time
Profiler doesn't distinguish

00:08:20.206 --> 00:08:24.046 A:middle
between long running methods,
or much faster methods

00:08:24.046 --> 00:08:25.216 A:middle
that are called repetitively.

00:08:25.726 --> 00:08:29.866 A:middle
And we can actually see that in
our call tree here of method1

00:08:29.866 --> 00:08:32.176 A:middle
and method2 show up in the
same number of samples.

00:08:32.176 --> 00:08:33.895 A:middle
From Time Profiler's
perspective,

00:08:34.226 --> 00:08:37.616 A:middle
they incurred the
same amount of work.

00:08:38.196 --> 00:08:40.775 A:middle
But we know that method1
was actually called twice,

00:08:40.775 --> 00:08:44.285 A:middle
and ran for longer, method2
was called four times

00:08:44.285 --> 00:08:45.136 A:middle
and was much shorter.

00:08:46.306 --> 00:08:49.696 A:middle
Time Profiler's also really
focused on CPU usage, right?

00:08:49.696 --> 00:08:51.206 A:middle
It's answering the question;

00:08:51.676 --> 00:08:53.576 A:middle
what work is my application
doing?

00:08:53.856 --> 00:08:56.216 A:middle
And another result of this
is it doesn't necessarily

00:08:56.216 --> 00:08:57.476 A:middle
capture everything.

00:08:57.886 --> 00:09:00.236 A:middle
In fact, what's missing
from our table?

00:08:57.886 --> 00:09:00.236 A:middle
In fact, what's missing
from our table?

00:09:01.696 --> 00:09:03.676 A:middle
There's no method3, right?

00:09:03.986 --> 00:09:05.886 A:middle
If you have really
fast functions,

00:09:05.886 --> 00:09:08.426 A:middle
or really fast methods that
aren't called very often,

00:09:08.856 --> 00:09:10.376 A:middle
they won't appear
in your call tree.

00:09:10.376 --> 00:09:11.856 A:middle
And this is actually okay.

00:09:11.856 --> 00:09:12.676 A:middle
This is what we want.

00:09:12.756 --> 00:09:15.696 A:middle
Because they're not having an
impact in how much work I have

00:09:15.776 --> 00:09:16.856 A:middle
to be doing over time.

00:09:18.196 --> 00:09:20.326 A:middle
So now that we have a better
understanding of the call tree,

00:09:20.436 --> 00:09:23.446 A:middle
let's see how we can use it to
make our app faster and do less.

00:09:32.116 --> 00:09:37.526 A:middle
Okay. So looking back at my
timeline, I want to take a look

00:09:37.856 --> 00:09:40.726 A:middle
at this big, first
block of CPU usage here.

00:09:40.726 --> 00:09:43.246 A:middle
I can see that I'm
using 100% CPU

00:09:43.246 --> 00:09:46.706 A:middle
for a significant
amount of time.

00:09:46.836 --> 00:09:49.326 A:middle
So I want to see exactly
what work I'm doing there.

00:09:49.626 --> 00:09:52.166 A:middle
I happen to know, that's when I
was doing my duplicate checking.

00:09:52.466 --> 00:09:54.536 A:middle
I know I expect that
to take a fair amount

00:09:54.536 --> 00:09:55.956 A:middle
of work, so I'm not surprised.

00:09:55.956 --> 00:09:57.966 A:middle
But wherever you're
using a lot of CPU,

00:09:57.966 --> 00:10:00.576 A:middle
there's usually an
opportunity to make it faster.

00:09:57.966 --> 00:10:00.576 A:middle
there's usually an
opportunity to make it faster.

00:10:01.726 --> 00:10:04.016 A:middle
So in order to get a better
idea of what's going on here,

00:10:04.016 --> 00:10:06.396 A:middle
I'm going to use the
trackpad, and I'm just going

00:10:07.056 --> 00:10:10.516 A:middle
to pinch to zoom in; un-pinch.

00:10:10.926 --> 00:10:14.686 A:middle
So I can get a much better
idea of exactly what's going

00:10:14.686 --> 00:10:15.906 A:middle
on in this time period.

00:10:16.546 --> 00:10:19.426 A:middle
And then I'm going to go
ahead and click and drag

00:10:19.426 --> 00:10:21.016 A:middle
across the Timeline view.

00:10:21.916 --> 00:10:23.586 A:middle
And this is going
to apply a filter.

00:10:24.096 --> 00:10:28.196 A:middle
So now my call tree is only
going to show data from samples

00:10:28.196 --> 00:10:30.136 A:middle
that were collected
within that timeframe.

00:10:30.316 --> 00:10:32.186 A:middle
If you notice, now you can see

00:10:32.186 --> 00:10:34.676 A:middle
that the call tree is actually
showing much less data.

00:10:34.926 --> 00:10:37.486 A:middle
It's only really focused
on this period of time.

00:10:38.256 --> 00:10:40.856 A:middle
So now let's take a look at
our call tree in more detail.

00:10:41.386 --> 00:10:43.726 A:middle
You'll see a few columns here.

00:10:43.726 --> 00:10:46.596 A:middle
There's Weight and Self
Weight, and then Symbol Name.

00:10:47.406 --> 00:10:50.796 A:middle
The weight represents
the percentage of samples

00:10:51.136 --> 00:10:53.866 A:middle
that that particular portion
of the call tree appeared in.

00:10:54.236 --> 00:10:56.356 A:middle
And you'll see next to the
weight there's also a time.

00:10:56.456 --> 00:10:58.796 A:middle
And like I said before,
that's not duration.

00:10:59.136 --> 00:11:00.906 A:middle
That's the number of
samples multiplied

00:10:59.136 --> 00:11:00.906 A:middle
That's the number of
samples multiplied

00:11:00.906 --> 00:11:03.506 A:middle
by the time between each sample.

00:11:04.186 --> 00:11:05.866 A:middle
And then there's
also Self Weight,

00:11:06.356 --> 00:11:09.476 A:middle
which is actually the amount
of time that was spent

00:11:09.476 --> 00:11:10.976 A:middle
within that method itself,

00:11:10.976 --> 00:11:12.896 A:middle
and not some other
method that it called.

00:11:13.276 --> 00:11:15.546 A:middle
And you can see actually
here, these are 0.

00:11:15.546 --> 00:11:18.666 A:middle
If I go ahead and just
close this, it's still 0.

00:11:18.776 --> 00:11:19.786 A:middle
It's still 0.

00:11:20.186 --> 00:11:21.926 A:middle
What this is telling
me is that, you know,

00:11:22.286 --> 00:11:24.716 A:middle
99% of my samples were in main.

00:11:24.716 --> 00:11:27.466 A:middle
But actually, all of
those were also were also

00:11:27.466 --> 00:11:29.276 A:middle
within UIApplication main.

00:11:29.656 --> 00:11:30.756 A:middle
And all of those were

00:11:30.756 --> 00:11:33.236 A:middle
within whatever UIApplication
main calls.

00:11:33.496 --> 00:11:35.396 A:middle
And instead of disclosing
these one-by-one,

00:11:35.396 --> 00:11:37.956 A:middle
I'm going to use a new
feature in Instruments 8.

00:11:38.686 --> 00:11:40.036 A:middle
Where I hold down
the Option key,

00:11:40.036 --> 00:11:41.486 A:middle
and click the Disclosure
triangle.

00:11:42.036 --> 00:11:44.106 A:middle
And this gives me
a smart disclosure.

00:11:44.226 --> 00:11:45.996 A:middle
So it's going to just
close my call tree

00:11:46.276 --> 00:11:48.126 A:middle
until there's actually
interesting data in it.

00:11:49.346 --> 00:11:51.716 A:middle
And if we go ahead
and scroll down,

00:11:51.716 --> 00:11:54.006 A:middle
we can see now we
actually have some methods

00:11:54.336 --> 00:11:55.766 A:middle
that have some self
weight to them.

00:11:56.286 --> 00:11:58.736 A:middle
In fact, if I look at this
particular release call,

00:11:58.736 --> 00:12:02.276 A:middle
I can see, you know, its
weight is 117 milliseconds,

00:11:58.736 --> 00:12:02.276 A:middle
I can see, you know, its
weight is 117 milliseconds,

00:12:02.276 --> 00:12:03.756 A:middle
and its self weight is the same.

00:12:04.076 --> 00:12:05.846 A:middle
So it's spent all
its time in itself.

00:12:05.886 --> 00:12:09.156 A:middle
Didn't call any subsequent
functions or methods.

00:12:09.926 --> 00:12:11.416 A:middle
And actually, you know,
looking through these,

00:12:11.416 --> 00:12:14.596 A:middle
I see a lot of these
Objective-C runtime calls here.

00:12:14.926 --> 00:12:18.356 A:middle
And they're actually all have
pretty high self weights.

00:12:18.756 --> 00:12:22.426 A:middle
These runtime methods are
super highly optimized

00:12:22.426 --> 00:12:23.836 A:middle
and run really quickly.

00:12:24.276 --> 00:12:25.666 A:middle
And they're usually
the sort of thing

00:12:25.666 --> 00:12:27.376 A:middle
that Time Profiler
doesn't capture,

00:12:27.706 --> 00:12:29.016 A:middle
because they run so quickly.

00:12:29.436 --> 00:12:31.276 A:middle
But since they're showing up,

00:12:31.276 --> 00:12:34.606 A:middle
I know that generally
they're being called a lot.

00:12:35.056 --> 00:12:36.536 A:middle
So they're showing
up in samples.

00:12:36.886 --> 00:12:39.516 A:middle
This is usually the case if
you're looping through a lot

00:12:39.516 --> 00:12:42.726 A:middle
of Objective-C objects, you'll
see this show up in your trace.

00:12:43.036 --> 00:12:45.806 A:middle
So the other thing the
call tree shows us is

00:12:45.806 --> 00:12:46.766 A:middle
over here on the right.

00:12:47.146 --> 00:12:50.436 A:middle
We can see which
library that portion

00:12:50.816 --> 00:12:52.276 A:middle
of the call tree came from.

00:12:52.276 --> 00:12:53.346 A:middle
That particular method call.

00:12:53.346 --> 00:12:54.476 A:middle
And here we can see
this is coming

00:12:54.476 --> 00:12:55.566 A:middle
with the photo's framework.

00:12:56.106 --> 00:12:57.456 A:middle
And we actually work our way up.

00:12:58.086 --> 00:12:59.146 A:middle
Scroll to the right here.

00:12:59.736 --> 00:13:02.406 A:middle
We can see, here's
the line of code

00:12:59.736 --> 00:13:02.406 A:middle
We can see, here's
the line of code

00:13:02.406 --> 00:13:07.386 A:middle
from my app that's causing
all this work to happen.

00:13:08.076 --> 00:13:11.486 A:middle
You know, this particular
line has 0 self weight.

00:13:11.706 --> 00:13:13.276 A:middle
It's not doing any
of the work itself.

00:13:13.586 --> 00:13:15.686 A:middle
But it's the thing that's
triggering all the work.

00:13:16.196 --> 00:13:17.266 A:middle
You know, I'm not
going to be able

00:13:17.266 --> 00:13:20.326 A:middle
to make Objective-C release
call any faster, but I can see

00:13:20.326 --> 00:13:23.936 A:middle
if there's something here I
can do to maybe call it less.

00:13:24.016 --> 00:13:25.936 A:middle
So I'm going to double
click on this line.

00:13:25.936 --> 00:13:27.816 A:middle
And it's going to
take me to my code.

00:13:28.756 --> 00:13:31.856 A:middle
And Instruments annotates
each line with the number

00:13:31.856 --> 00:13:33.136 A:middle
of samples that appeared in.

00:13:33.316 --> 00:13:35.936 A:middle
So looking at this
method I can see that most

00:13:35.936 --> 00:13:38.146 A:middle
of my time is spent on
that red line there.

00:13:38.606 --> 00:13:40.236 A:middle
But if I take a closer look,

00:13:40.236 --> 00:13:41.546 A:middle
I actually see something
else here.

00:13:42.056 --> 00:13:43.816 A:middle
I have nested four loops.

00:13:44.206 --> 00:13:49.086 A:middle
And in fact, each of
those loops is iterating

00:13:49.086 --> 00:13:50.906 A:middle
over my entire photos
collection.

00:13:50.906 --> 00:13:54.166 A:middle
And this is pretty much a
classic example of what's known

00:13:54.166 --> 00:13:55.496 A:middle
as N squared behavior.

00:13:56.006 --> 00:13:59.856 A:middle
As I throw more data at this
code, it's going to get slower,

00:13:59.856 --> 00:14:01.066 A:middle
and slower, and slower.

00:13:59.856 --> 00:14:01.066 A:middle
and slower, and slower.

00:14:01.066 --> 00:14:02.956 A:middle
And since I know
it's going to operate

00:14:02.956 --> 00:14:05.696 A:middle
over a lot of data, this is bad.

00:14:06.426 --> 00:14:08.206 A:middle
So I want to go ahead
and change this.

00:14:08.646 --> 00:14:09.896 A:middle
So I'm going to go into Xcode.

00:14:10.546 --> 00:14:11.576 A:middle
And here's my code here.

00:14:12.616 --> 00:14:16.296 A:middle
A typical way of avoiding
nested four loops is use a

00:14:16.296 --> 00:14:17.896 A:middle
set-based implementation.

00:14:18.356 --> 00:14:21.196 A:middle
I'm not going to go into
details, but I've gone ahead

00:14:22.376 --> 00:14:26.076 A:middle
and created a new algorithm

00:14:26.076 --> 00:14:28.696 A:middle
for doing my duplicate
checking that uses --

00:14:33.196 --> 00:14:41.056 A:middle
That uses a counted set and
another set to find duplicates.

00:14:41.056 --> 00:14:43.946 A:middle
Now let's go ahead and verify

00:14:43.946 --> 00:14:45.316 A:middle
that I actually made
a difference.

00:14:45.466 --> 00:14:47.356 A:middle
So again I'm going to
go to the Product menu.

00:14:47.356 --> 00:14:49.256 A:middle
And I'm going to choose Profile.

00:14:50.206 --> 00:14:52.016 A:middle
It's going to rebuild
my application

00:14:52.596 --> 00:14:55.836 A:middle
and install it to the device.

00:14:55.836 --> 00:14:57.746 A:middle
And then since Instruments
is already running,

00:14:57.906 --> 00:15:00.136 A:middle
it's going to go ahead and
start the recording right away.

00:14:57.906 --> 00:15:00.136 A:middle
it's going to go ahead and
start the recording right away.

00:15:01.326 --> 00:15:03.806 A:middle
So as it's copying it
to the device let's see,

00:15:03.806 --> 00:15:04.916 A:middle
starting the profiling.

00:15:07.696 --> 00:15:09.016 A:middle
Here's Instruments.

00:15:09.536 --> 00:15:12.096 A:middle
And my application has started.

00:15:12.756 --> 00:15:16.096 A:middle
Okay, and it's starting
recording,

00:15:16.096 --> 00:15:16.976 A:middle
I'm going to zoom out.

00:15:18.986 --> 00:15:21.336 A:middle
Okay, I'll zoom out so
we can see some data.

00:15:21.896 --> 00:15:25.166 A:middle
And I'm going to go ahead
and do my duplicate checking.

00:15:26.776 --> 00:15:28.416 A:middle
Duplicates.

00:15:28.656 --> 00:15:29.526 A:middle
All Photos.

00:15:30.006 --> 00:15:32.236 A:middle
And I can see the data come in.

00:15:32.636 --> 00:15:33.826 A:middle
Oh, I'm actually at minutes.

00:15:33.826 --> 00:15:35.706 A:middle
I thought this was seconds.

00:15:35.706 --> 00:15:39.516 A:middle
Okay. So my duplicate checking
actually happened much faster.

00:15:39.516 --> 00:15:42.946 A:middle
In fact, we no longer
see that large bar going

00:15:43.066 --> 00:15:44.596 A:middle
across the timeline anymore.

00:15:44.596 --> 00:15:45.706 A:middle
So that's a good change.

00:15:45.896 --> 00:15:49.166 A:middle
I want to go ahead and
re-measure the rest of my apps.

00:15:49.166 --> 00:15:50.556 A:middle
I'm going to select some photos.

00:15:51.236 --> 00:15:52.436 A:middle
I'm going to add some eyes.

00:15:52.436 --> 00:15:54.386 A:middle
I'm going to shake it.

00:15:55.046 --> 00:15:56.916 A:middle
And then I'm going to
dismiss that photo.

00:15:56.916 --> 00:15:59.396 A:middle
So now my application is static.

00:15:59.396 --> 00:16:00.596 A:middle
It shouldn't be doing any work.

00:15:59.396 --> 00:16:00.596 A:middle
It shouldn't be doing any work.

00:16:01.356 --> 00:16:03.276 A:middle
But let's go ahead
and take a look

00:16:03.276 --> 00:16:05.116 A:middle
at what the Time
Profiler is telling us.

00:16:05.206 --> 00:16:06.316 A:middle
Let's stop the recording.

00:16:06.896 --> 00:16:11.266 A:middle
It's taking a minute to
catch up with the data.

00:16:11.366 --> 00:16:16.966 A:middle
Whoa. Okay, so I can see
here at the end of this --

00:16:16.966 --> 00:16:21.416 A:middle
at the end of the call,
there's some CPU usage here.

00:16:21.976 --> 00:16:24.676 A:middle
It's not much, but I'm
expecting it to be 0.

00:16:24.726 --> 00:16:26.736 A:middle
So I want go ahead and
see what that's doing.

00:16:27.446 --> 00:16:30.596 A:middle
I'm going to zoom in
again with the trackpad.

00:16:31.166 --> 00:16:34.006 A:middle
And then I'm going
to drag to select

00:16:34.966 --> 00:16:36.146 A:middle
to see what's going on here.

00:16:36.966 --> 00:16:41.586 A:middle
And then I'm going to go ahead
and option click through here

00:16:41.916 --> 00:16:42.996 A:middle
to see what's going on.

00:16:43.476 --> 00:16:44.996 A:middle
And now if you look
at my call tree,

00:16:45.886 --> 00:16:47.256 A:middle
this time I can see
there are a lot

00:16:47.256 --> 00:16:48.916 A:middle
of calls in CoreMotion, right?

00:16:48.916 --> 00:16:51.526 A:middle
And I know what my app is doing
here, it's using CoreMotion

00:16:51.586 --> 00:16:54.376 A:middle
to detect and make
the eyes move.

00:16:54.996 --> 00:16:58.466 A:middle
But moving back up the call
tree, there's actually none

00:16:58.466 --> 00:17:01.436 A:middle
of my code in this call tree.

00:16:58.466 --> 00:17:01.436 A:middle
of my code in this call tree.

00:17:02.056 --> 00:17:04.826 A:middle
So there's nothing I'm doing
that's directly invoking this.

00:17:05.146 --> 00:17:07.486 A:middle
But something in my app is
making CoreMotion do work

00:17:07.486 --> 00:17:08.236 A:middle
when it shouldn't be.

00:17:08.786 --> 00:17:10.695 A:middle
And what I know about
my app, is I realize

00:17:10.695 --> 00:17:14.116 A:middle
that I'm not turning off
the CoreMotion monitoring

00:17:14.165 --> 00:17:15.986 A:middle
when there are no
eyes on the screen.

00:17:16.306 --> 00:17:18.256 A:middle
So let's go ahead
and make that change.

00:17:19.396 --> 00:17:20.556 A:middle
We go back to Xcode.

00:17:22.006 --> 00:17:26.836 A:middle
And then I actually have
the methods all written.

00:17:27.056 --> 00:17:28.465 A:middle
It's just a matter
of calling them.

00:17:28.465 --> 00:17:32.466 A:middle
So let me go ahead
and add them here.

00:17:32.466 --> 00:17:39.476 A:middle
And then we stop observing here.

00:17:39.696 --> 00:17:41.236 A:middle
Okay. Now let's measure this

00:17:41.276 --> 00:17:44.476 A:middle
and make sure it changed
as we expect it to.

00:17:45.406 --> 00:17:46.636 A:middle
And again, Instruments is going

00:17:46.636 --> 00:17:50.096 A:middle
to rebuild the application;
put it on the device.

00:17:51.036 --> 00:17:53.656 A:middle
And also, since Instruments
is already up and running,

00:17:53.656 --> 00:17:54.886 A:middle
it'll start recording again.

00:17:55.486 --> 00:17:58.136 A:middle
This time I'm going to
zoom out ahead of time.

00:17:58.136 --> 00:18:02.826 A:middle
And I also click outside of the
filter, and that removes it.

00:17:58.136 --> 00:18:02.826 A:middle
And I also click outside of the
filter, and that removes it.

00:18:04.326 --> 00:18:07.126 A:middle
Okay. And once the
application is on the device,

00:18:07.886 --> 00:18:10.056 A:middle
Instruments will start
recording it once more.

00:18:18.126 --> 00:18:19.636 A:middle
Okay, there we go.

00:18:24.256 --> 00:18:26.116 A:middle
Okay, so this time
I'm going to go ahead

00:18:26.116 --> 00:18:29.106 A:middle
and just go ahead
and add my photos.

00:18:29.606 --> 00:18:34.886 A:middle
And then I'm going
to scroll to a photo.

00:18:35.956 --> 00:18:36.476 A:middle
Select it.

00:18:37.166 --> 00:18:38.096 A:middle
Add the eyes.

00:18:38.736 --> 00:18:42.456 A:middle
Do the shaking let's actually
zoom this in a little more.

00:18:43.056 --> 00:18:48.166 A:middle
I'm going to choose a new photo
so the eyes move off the screen.

00:18:49.236 --> 00:18:51.236 A:middle
And then let's go ahead
and stop the recording,

00:18:51.646 --> 00:18:53.396 A:middle
and see if it changes
as we expected.

00:18:54.086 --> 00:18:58.556 A:middle
And now if I zoom in on the end
here once Instruments is done

00:18:58.556 --> 00:18:59.376 A:middle
processing the data.

00:18:59.376 --> 00:19:03.176 A:middle
I can see that my CPU usage
is now 0 here at the end.

00:18:59.376 --> 00:19:03.176 A:middle
I can see that my CPU usage
is now 0 here at the end.

00:19:03.676 --> 00:19:08.236 A:middle
So I'm no longer doing that
work when I didn't need to be.

00:19:08.406 --> 00:19:10.856 A:middle
So let's take a look and
review what we've done.

00:19:11.396 --> 00:19:14.536 A:middle
So the first thing we did, is
we used the trackpad to figure

00:19:14.536 --> 00:19:18.016 A:middle
out how much work our app was
doing and when it was doing it.

00:19:18.016 --> 00:19:21.376 A:middle
And it was a good way to find
areas of interest to focus on.

00:19:21.786 --> 00:19:24.996 A:middle
And the trackpad or the timeline
is really trackpad friendly.

00:19:24.996 --> 00:19:27.076 A:middle
But it also works
great with a mouse.

00:19:27.186 --> 00:19:31.506 A:middle
You can option-drag, and
control-drag to zoom in and out.

00:19:31.776 --> 00:19:34.466 A:middle
So we found an area
on the track view

00:19:34.466 --> 00:19:35.786 A:middle
that was using a lot of CPU.

00:19:35.786 --> 00:19:37.186 A:middle
And we wanted to
make it go faster.

00:19:37.426 --> 00:19:42.136 A:middle
So we went ahead, we zoomed in,
and we filtered on that area.

00:19:43.326 --> 00:19:45.416 A:middle
We examined the call
tree and we found

00:19:45.416 --> 00:19:48.266 A:middle
out where the work was happening
in that portion of our app.

00:19:49.316 --> 00:19:51.706 A:middle
And then we walked
back up the call tree

00:19:51.706 --> 00:19:53.566 A:middle
until we actually
encountered our code.

00:19:53.926 --> 00:19:57.086 A:middle
What part of our app is
causing this work to happen,

00:19:57.386 --> 00:19:59.446 A:middle
even though it's not
doing the work itself?

00:20:00.166 --> 00:20:02.226 A:middle
We took a look at our code.

00:20:02.556 --> 00:20:03.516 A:middle
We thought about it.

00:20:03.676 --> 00:20:04.526 A:middle
Scratched our heads.

00:20:04.526 --> 00:20:06.176 A:middle
We ate a sandwich,
and we figured

00:20:06.176 --> 00:20:07.216 A:middle
out a way to make it faster.

00:20:08.006 --> 00:20:12.396 A:middle
So we went ahead and implemented
those changes, and verified

00:20:12.456 --> 00:20:13.986 A:middle
that they actually
did make it faster.

00:20:13.986 --> 00:20:16.136 A:middle
It was a significant
improvement in this case.

00:20:16.136 --> 00:20:19.256 A:middle
And as a result, we saved
a bunch of the user's time.

00:20:19.426 --> 00:20:21.496 A:middle
Now when they're using my
app to find duplicates,

00:20:21.496 --> 00:20:23.516 A:middle
they won't be looking
at that spinner forever.

00:20:23.876 --> 00:20:25.626 A:middle
It'll finish much more quickly.

00:20:26.186 --> 00:20:29.256 A:middle
Now in terms of doing
less, what did we do?

00:20:29.776 --> 00:20:32.576 A:middle
Again, we focused on an
area of the track view,

00:20:32.576 --> 00:20:36.006 A:middle
where this time it
wasn't using a lot of CPU,

00:20:36.006 --> 00:20:38.636 A:middle
but it was using an
unexpected amount of CPU.

00:20:39.216 --> 00:20:40.226 A:middle
We zoomed in.

00:20:40.226 --> 00:20:41.316 A:middle
We applied a filter.

00:20:41.976 --> 00:20:44.706 A:middle
We took a look at the call
tree, and this time we looked

00:20:44.706 --> 00:20:47.776 A:middle
at the frameworks involved
again, we saw it was CoreMotion,

00:20:47.776 --> 00:20:49.916 A:middle
but none of our code
was being evoked.

00:20:50.626 --> 00:20:51.636 A:middle
So this time we had to think

00:20:51.636 --> 00:20:52.986 A:middle
about our app in
a different way.

00:20:53.146 --> 00:20:56.136 A:middle
What portion of our app is
making this work happen?

00:20:56.906 --> 00:21:00.386 A:middle
We went ahead and again,
maybe took a little break.

00:20:56.906 --> 00:21:00.386 A:middle
We went ahead and again,
maybe took a little break.

00:21:00.536 --> 00:21:01.676 A:middle
Ate another sandwich.

00:21:01.906 --> 00:21:04.626 A:middle
And figured out how to make
our app stop doing that work

00:21:05.196 --> 00:21:06.716 A:middle
so it's no longer happening.

00:21:07.396 --> 00:21:09.306 A:middle
We went ahead and
reprofiled the app.

00:21:09.566 --> 00:21:12.896 A:middle
Verified that our changes did
what we expected them to do.

00:21:13.326 --> 00:21:15.516 A:middle
And actually, as
a result of this,

00:21:15.576 --> 00:21:20.526 A:middle
we significantly improved the
battery life while our app

00:21:20.526 --> 00:21:21.086 A:middle
is running.

00:21:21.256 --> 00:21:24.296 A:middle
Any time the CPU can go
to 0 and go to sleep,

00:21:24.646 --> 00:21:26.536 A:middle
that represents significant
savings.

00:21:26.806 --> 00:21:28.946 A:middle
So even though our
CPU usage was low,

00:21:28.946 --> 00:21:31.076 A:middle
it still has a battery cost.

00:21:31.076 --> 00:21:35.916 A:middle
So now that we've gone
faster, and done less,

00:21:36.346 --> 00:21:38.746 A:middle
let's talk about making
our apps more responsive.

00:21:40.696 --> 00:21:44.566 A:middle
So the way your application
works, is the main thread

00:21:44.566 --> 00:21:46.436 A:middle
that does all the
user interface work.

00:21:46.476 --> 00:21:49.496 A:middle
It's responsible for
responding to user input,

00:21:49.496 --> 00:21:51.166 A:middle
and then updating your views.

00:21:51.616 --> 00:21:53.876 A:middle
And the way it handles
the user input,

00:21:54.366 --> 00:21:56.266 A:middle
is that it's got a main thread.

00:21:56.266 --> 00:21:59.626 A:middle
And the main thread has a run
loop that's just watching a

00:21:59.626 --> 00:22:02.536 A:middle
queue called an Event
Queue and waiting

00:21:59.626 --> 00:22:02.536 A:middle
queue called an Event
Queue and waiting

00:22:02.536 --> 00:22:04.576 A:middle
for events to appear on it.

00:22:04.826 --> 00:22:08.986 A:middle
When an event appears, it
sends it to your UIApplication,

00:22:08.986 --> 00:22:10.776 A:middle
or NS application instance.

00:22:11.176 --> 00:22:12.786 A:middle
Which then passes the event

00:22:12.786 --> 00:22:15.176 A:middle
down through the responder
chain in your application.

00:22:15.706 --> 00:22:18.746 A:middle
And if you application wants
to respond to that event,

00:22:19.116 --> 00:22:21.206 A:middle
then it goes ahead
and invokes your code.

00:22:21.766 --> 00:22:25.026 A:middle
And you can actually see
this in a call stack here.

00:22:25.426 --> 00:22:27.296 A:middle
Here's the call stack
from my application.

00:22:27.776 --> 00:22:30.036 A:middle
And we can see there,
there's the main thread.

00:22:30.886 --> 00:22:33.506 A:middle
It calls the main function
which is, you know,

00:22:33.646 --> 00:22:35.386 A:middle
where all our applications
start.

00:22:35.936 --> 00:22:38.826 A:middle
Now in here, I don't know
exactly what these functions do,

00:22:38.826 --> 00:22:41.156 A:middle
but they're clearly
related to a run loop.

00:22:41.966 --> 00:22:44.766 A:middle
And I can see here, here's
a handleEventQueue function.

00:22:44.766 --> 00:22:47.146 A:middle
So it's clearly got an
event off the event queue,

00:22:47.146 --> 00:22:47.886 A:middle
and it's handling it.

00:22:48.476 --> 00:22:52.466 A:middle
I can see it gets passed into my
UIApplication, and then passed

00:22:52.466 --> 00:22:55.076 A:middle
through the responder chain
until it gets to my code.

00:22:55.076 --> 00:22:58.526 A:middle
And in this case, this is
an IB action on a button.

00:22:59.476 --> 00:23:01.216 A:middle
And then my code does its work.

00:22:59.476 --> 00:23:01.216 A:middle
And then my code does its work.

00:23:02.306 --> 00:23:05.176 A:middle
So what does this mean in terms
of keeping your apps responsive?

00:23:05.786 --> 00:23:10.216 A:middle
Well, when busy, the main
thread can't process the queue.

00:23:10.696 --> 00:23:13.636 A:middle
So it starts to back up
your user events back up.

00:23:14.146 --> 00:23:17.666 A:middle
And then as a result, you
get stuttering and hiccups.

00:23:18.016 --> 00:23:21.296 A:middle
And in the worst case, your app
becomes completely unresponsive.

00:23:21.636 --> 00:23:24.576 A:middle
The user closes it, and maybe
deletes it from the device.

00:23:25.596 --> 00:23:29.106 A:middle
So it's really important to
keep your main thread free,

00:23:29.626 --> 00:23:32.856 A:middle
so it's able to respond
to the user input

00:23:33.176 --> 00:23:35.726 A:middle
in a very quick manner.

00:23:37.036 --> 00:23:39.536 A:middle
So now with that in our
pocket, let's see what we can do

00:23:39.536 --> 00:23:41.906 A:middle
with our app in order to
make it more responsive.

00:23:41.906 --> 00:23:45.836 A:middle
All right, I'm going to
zoom out of my track --

00:23:45.836 --> 00:23:46.946 A:middle
on the track view this time.

00:23:47.476 --> 00:23:48.876 A:middle
And now the area I want to focus

00:23:48.876 --> 00:23:50.906 A:middle
on is this big CPU
spike right here.

00:23:51.256 --> 00:23:53.946 A:middle
And here I'm seeing
well over 100% CPU.

00:23:54.236 --> 00:23:55.656 A:middle
So there's probably
an opportunity

00:23:55.656 --> 00:23:56.886 A:middle
for optimization here.

00:23:57.396 --> 00:23:58.906 A:middle
And I happen to know,
this is also

00:23:58.906 --> 00:24:00.906 A:middle
when I'm adding my
eyes to the image.

00:23:58.906 --> 00:24:00.906 A:middle
when I'm adding my
eyes to the image.

00:24:01.506 --> 00:24:04.596 A:middle
So again, I'm going to just
zoom in using the trackpad.

00:24:05.426 --> 00:24:08.326 A:middle
I'm going to go ahead and click
and drag to apply a filter.

00:24:09.536 --> 00:24:12.546 A:middle
Now if we look at the call
tree, this time I want

00:24:12.606 --> 00:24:15.986 A:middle
to specifically focus on what
the main thread is doing.

00:24:16.446 --> 00:24:20.056 A:middle
I can see here that actually,
my main thread is showing up in

00:24:20.056 --> 00:24:22.666 A:middle
about 63%, 64% of my samples.

00:24:23.516 --> 00:24:25.526 A:middle
And so I know that
during this time,

00:24:25.526 --> 00:24:27.756 A:middle
it's clearly doing some work.

00:24:28.236 --> 00:24:30.756 A:middle
But I want to know exactly
how much work it's doing.

00:24:31.576 --> 00:24:34.426 A:middle
And to do that, I'm going
to go ahead and up here

00:24:34.426 --> 00:24:35.716 A:middle
in the upper right-hand corner,

00:24:36.026 --> 00:24:37.866 A:middle
we have what we call
the different strategies

00:24:37.866 --> 00:24:38.776 A:middle
and Instruments.

00:24:38.876 --> 00:24:42.306 A:middle
So you can view your data,
either per CPU or per thread.

00:24:42.736 --> 00:24:44.496 A:middle
This time I want to look
at the data per thread.

00:24:44.496 --> 00:24:47.186 A:middle
And I can actually see, if I
make this a little bit bigger,

00:24:48.166 --> 00:24:50.056 A:middle
that over here on the left,

00:24:50.366 --> 00:24:52.116 A:middle
you can see all the
threads in my app.

00:24:52.646 --> 00:24:54.106 A:middle
And the main thread
is at the top.

00:24:54.666 --> 00:24:56.686 A:middle
And so I can actually
see the CPU usage

00:24:56.736 --> 00:24:58.396 A:middle
on just the main thread.

00:24:58.936 --> 00:25:01.916 A:middle
And here, clearly, it's
getting up to 100%.

00:24:58.936 --> 00:25:01.916 A:middle
And here, clearly, it's
getting up to 100%.

00:25:02.286 --> 00:25:03.886 A:middle
And when it's in that state,

00:25:03.886 --> 00:25:06.046 A:middle
it absolutely can't
respond to user events.

00:25:06.046 --> 00:25:08.156 A:middle
There's no way it's going
to be able to handle things

00:25:08.156 --> 00:25:11.046 A:middle
on the queue if it's busy
doing the work in my app.

00:25:12.046 --> 00:25:14.386 A:middle
So what work is it doing
on the main thread exactly?

00:25:14.966 --> 00:25:16.606 A:middle
This time, I'm going
go ahead and click

00:25:16.606 --> 00:25:19.266 A:middle
on our extended detail view
over here on the right.

00:25:19.756 --> 00:25:22.636 A:middle
And this is going to show me my
call stack that's doing the most

00:25:22.636 --> 00:25:24.266 A:middle
work on my main thread.

00:25:24.476 --> 00:25:27.376 A:middle
Because my main thread is what's
selected over on the left.

00:25:27.376 --> 00:25:28.596 A:middle
So I scroll through here,

00:25:28.596 --> 00:25:31.046 A:middle
I can see again here's
the run loop stuff.

00:25:31.046 --> 00:25:32.736 A:middle
And then here we
actually get to my code.

00:25:33.146 --> 00:25:35.356 A:middle
And this is the code where
it's adding the eyes.

00:25:35.836 --> 00:25:38.356 A:middle
And then doing some
more add eyes work.

00:25:38.356 --> 00:25:40.016 A:middle
And then here it's
calling Find Faces.

00:25:40.016 --> 00:25:42.356 A:middle
So that's the face detection
code in my application.

00:25:42.356 --> 00:25:44.916 A:middle
And then we can actually see the
next line is actually calling

00:25:44.916 --> 00:25:45.726 A:middle
into Core Image.

00:25:45.786 --> 00:25:48.326 A:middle
If I go ahead and click on
this in the Detail view,

00:25:48.326 --> 00:25:53.216 A:middle
it'll expand the call
tree to that line.

00:25:53.266 --> 00:25:55.546 A:middle
Now again, reasoning
about my code.

00:25:55.546 --> 00:25:56.696 A:middle
There's no reason for me

00:25:56.696 --> 00:26:00.306 A:middle
to do face detection
on the main thread.

00:25:56.696 --> 00:26:00.306 A:middle
to do face detection
on the main thread.

00:26:00.456 --> 00:26:02.986 A:middle
It's not a responding
to user input thing.

00:26:02.986 --> 00:26:04.746 A:middle
And it's not an updating
views thing.

00:26:05.146 --> 00:26:07.166 A:middle
So this can easily be moved
to a background thread.

00:26:07.706 --> 00:26:11.686 A:middle
So here's my code that
does the face detection.

00:26:11.686 --> 00:26:14.826 A:middle
And I can see once the face
detection is done, it goes ahead

00:26:14.826 --> 00:26:16.516 A:middle
and calls the displayEyes
method.

00:26:16.516 --> 00:26:18.336 A:middle
Now an important
thing to note here is

00:26:18.336 --> 00:26:20.956 A:middle
that displayEyes is
actually updating my UI.

00:26:20.956 --> 00:26:24.026 A:middle
So that's work that has to
happen on the main thread.

00:26:24.806 --> 00:26:27.776 A:middle
So what I need to do
is do my face detection

00:26:27.776 --> 00:26:28.656 A:middle
on a background thread.

00:26:29.036 --> 00:26:30.686 A:middle
Switch back to the main thread.

00:26:32.236 --> 00:26:33.456 A:middle
In order to update my UI.

00:26:35.106 --> 00:26:36.476 A:middle
Oh, there we go.

00:26:36.746 --> 00:26:38.836 A:middle
Okay [applause] thank
you [applause].

00:26:41.176 --> 00:26:43.616 A:middle
That's not supposed to be
the applause line [laughter],

00:26:43.956 --> 00:26:44.916 A:middle
but I'll take it.

00:26:45.566 --> 00:26:46.586 A:middle
So here we go.

00:26:46.586 --> 00:26:48.456 A:middle
Here's my code that does
this on the background.

00:26:48.456 --> 00:26:51.176 A:middle
I'm going to very
quickly talk about this.

00:26:51.596 --> 00:26:54.226 A:middle
So we go ahead and we get
one of our background queues.

00:26:54.226 --> 00:26:57.126 A:middle
And we dispatch our
find faces code to it.

00:26:57.506 --> 00:26:59.496 A:middle
Then just like I said,
we're going to dispatch back

00:26:59.496 --> 00:27:01.736 A:middle
to the main queue,
and update our UI.

00:26:59.496 --> 00:27:01.736 A:middle
to the main queue,
and update our UI.

00:27:02.626 --> 00:27:05.916 A:middle
This time to do my
profiling, I'm going to hold

00:27:05.916 --> 00:27:08.386 A:middle
on the Run menu,
and choose Profile.

00:27:09.126 --> 00:27:10.226 A:middle
This will do the same thing.

00:27:10.766 --> 00:27:13.146 A:middle
Hopefully rather quickly.

00:27:13.246 --> 00:27:15.096 A:middle
Oh, I deleted my code.

00:27:16.126 --> 00:27:17.316 A:middle
Let's do that again.

00:27:17.616 --> 00:27:19.916 A:middle
So now since I've already done
it, I can just go ahead and --

00:27:20.806 --> 00:27:23.686 A:middle
is it going to be happy --
click the Profile button.

00:27:24.006 --> 00:27:24.516 A:middle
There we go.

00:27:25.046 --> 00:27:26.956 A:middle
It's going to build
my application.

00:27:28.096 --> 00:27:29.536 A:middle
Install it to the device.

00:27:30.406 --> 00:27:33.226 A:middle
Okay. Now Instruments
should show up

00:27:33.706 --> 00:27:38.986 A:middle
and start recording
my application.

00:27:39.606 --> 00:27:43.066 A:middle
Oh, so I'm going to go
ahead and switch back

00:27:43.066 --> 00:27:44.036 A:middle
to the Instruments view.

00:27:48.186 --> 00:27:53.776 A:middle
And then let's zoom out so we
can see the data coming in.

00:27:53.986 --> 00:27:58.666 A:middle
Okay. Very quickly, let's
add some photos to my app.

00:28:00.656 --> 00:28:03.846 A:middle
And then let's do
the eye detection.

00:28:04.586 --> 00:28:05.286 A:middle
So there we go.

00:28:05.286 --> 00:28:07.196 A:middle
So there I can see
my big CPU spike.

00:28:08.066 --> 00:28:09.606 A:middle
Let's go ahead and
stop the recording.

00:28:10.666 --> 00:28:13.036 A:middle
And now let's see if this
made the changes I expected.

00:28:13.366 --> 00:28:17.646 A:middle
So again, I'm going to
zoom in on this area

00:28:17.646 --> 00:28:19.046 A:middle
of the graph using a trackpad.

00:28:19.966 --> 00:28:21.546 A:middle
I'm going to click and drag

00:28:22.056 --> 00:28:24.416 A:middle
across the Timeline
view to apply a filter.

00:28:25.286 --> 00:28:27.386 A:middle
Now, if we go ahead and look
at our call tree this time,

00:28:27.806 --> 00:28:30.996 A:middle
actually what I see here
now, the main thread is only

00:28:30.996 --> 00:28:32.746 A:middle
in 4.8% of my samples.

00:28:32.796 --> 00:28:33.926 A:middle
So that's a really good sign.

00:28:33.926 --> 00:28:35.976 A:middle
I already know my main
thread is doing less work.

00:28:36.116 --> 00:28:38.426 A:middle
And those two worker threads
are doing much more of the work.

00:28:38.956 --> 00:28:41.676 A:middle
So let's go ahead and switch
to the thread strategy.

00:28:42.296 --> 00:28:45.396 A:middle
And now I can see here, my main
thread is actually completely

00:28:45.396 --> 00:28:51.386 A:middle
free for the vast majority
of this time, thank you.

00:28:52.516 --> 00:28:55.546 A:middle
[ Applause ]

00:28:56.046 --> 00:28:57.496 A:middle
So let's go ahead and
go back to the slides,

00:28:58.776 --> 00:29:00.166 A:middle
and talk about what
we've just done.

00:28:58.776 --> 00:29:00.166 A:middle
and talk about what
we've just done.

00:29:01.306 --> 00:29:03.866 A:middle
So in order to make my
application more responsive,

00:29:04.746 --> 00:29:08.716 A:middle
I've found an area where the
CPU was being used a lot.

00:29:08.716 --> 00:29:10.116 A:middle
And I went ahead and zoomed in

00:29:10.116 --> 00:29:12.426 A:middle
and applied a filter
it's a common theme here.

00:29:13.636 --> 00:29:17.116 A:middle
I focused on the main
thread, because I wanted

00:29:17.116 --> 00:29:21.236 A:middle
to make sure my app
continued to be responsive.

00:29:21.756 --> 00:29:23.686 A:middle
I identified some work
that we were doing

00:29:23.686 --> 00:29:25.636 A:middle
on the main thread
that wasn't UI work.

00:29:26.236 --> 00:29:28.796 A:middle
So I went ahead and moved
that to a background thread.

00:29:29.586 --> 00:29:31.636 A:middle
Once again you can probably
guess the next step.

00:29:32.026 --> 00:29:33.526 A:middle
I verified my changes.

00:29:33.946 --> 00:29:38.016 A:middle
Made sure the app was behaving
as I now expected it to.

00:29:38.016 --> 00:29:41.846 A:middle
And as a result, I got a
much better user experience.

00:29:41.846 --> 00:29:44.976 A:middle
My user interface will remain
responsive while I'm doing my

00:29:44.976 --> 00:29:45.796 A:middle
face detection.

00:29:46.336 --> 00:29:47.156 A:middle
Which is really great.

00:29:47.706 --> 00:29:50.556 A:middle
A couple notes regarding
optimization.

00:29:50.906 --> 00:29:53.136 A:middle
The fixes we made today
were relatively simple,

00:29:53.246 --> 00:29:55.146 A:middle
but they did add
complexity to our app.

00:29:55.616 --> 00:29:57.586 A:middle
And in general, the practice

00:29:57.586 --> 00:30:01.266 A:middle
of optimization is trading
simplicity for performance.

00:29:57.586 --> 00:30:01.266 A:middle
of optimization is trading
simplicity for performance.

00:30:02.346 --> 00:30:06.206 A:middle
But fortunately, because
I did my profiling early

00:30:06.206 --> 00:30:09.266 A:middle
in my development cycle I
didn't wait to the very end.

00:30:09.356 --> 00:30:12.696 A:middle
I now have time to verify

00:30:12.696 --> 00:30:14.796 A:middle
that my app continues
to behave correctly.

00:30:15.266 --> 00:30:16.756 A:middle
I can add additional unit tests

00:30:16.756 --> 00:30:18.856 A:middle
if I think that's
necessary or UI tests.

00:30:19.196 --> 00:30:21.036 A:middle
And focus on where
I added complexity,

00:30:21.036 --> 00:30:22.246 A:middle
and make sure it still works.

00:30:22.916 --> 00:30:27.196 A:middle
Just before you're about to ship
the app is the very last time

00:30:27.196 --> 00:30:29.506 A:middle
you want to be adding
complexity to it.

00:30:29.786 --> 00:30:32.036 A:middle
So the real takeaway
here, is that it pays

00:30:32.406 --> 00:30:34.636 A:middle
to profile your app
continuously.

00:30:34.636 --> 00:30:36.726 A:middle
Especially after you
add new functionality.

00:30:37.126 --> 00:30:38.726 A:middle
And profile early.

00:30:38.906 --> 00:30:41.596 A:middle
And then profile it
ongoing on an ongoing basis.

00:30:42.236 --> 00:30:44.096 A:middle
And sometimes, just
running time profiling

00:30:44.096 --> 00:30:45.256 A:middle
and seeing what you can find,

00:30:45.256 --> 00:30:47.246 A:middle
you can find a really
big win quickly.

00:30:47.916 --> 00:30:50.036 A:middle
So it pays just to
run it and see

00:30:50.036 --> 00:30:52.696 A:middle
if there's anything
interesting going on.

00:30:52.696 --> 00:30:55.426 A:middle
Some best practices about
using Time Profiler.

00:30:55.736 --> 00:30:59.216 A:middle
The general overview here is
that you want to be profiling

00:30:59.456 --> 00:31:02.166 A:middle
as close as you can to what
your customers will be running.

00:30:59.456 --> 00:31:02.166 A:middle
as close as you can to what
your customers will be running.

00:31:02.316 --> 00:31:05.206 A:middle
So you always want to
profile release builds.

00:31:05.736 --> 00:31:09.106 A:middle
Not only do you want the
optimizations from the compiler,

00:31:09.106 --> 00:31:11.366 A:middle
but release builds are what your
customers are going to be using.

00:31:11.826 --> 00:31:14.606 A:middle
You always want to
profile on the device.

00:31:14.686 --> 00:31:15.966 A:middle
The simulator is not going

00:31:15.966 --> 00:31:18.036 A:middle
to give you useful
data to work with.

00:31:19.296 --> 00:31:25.336 A:middle
Profile on the oldest, slowest
devices you intend to support.

00:31:25.336 --> 00:31:27.666 A:middle
A pretty good rule is, if
you can make it run well

00:31:27.666 --> 00:31:29.996 A:middle
on slower devices; you
get it running well

00:31:29.996 --> 00:31:31.506 A:middle
on faster devices for free.

00:31:31.896 --> 00:31:33.416 A:middle
And you want all of your users

00:31:33.416 --> 00:31:35.256 A:middle
to have a great experience
using your app.

00:31:35.716 --> 00:31:37.286 A:middle
Even the ones on slower devices.

00:31:38.206 --> 00:31:40.786 A:middle
And use large data sets
where it makes sense.

00:31:40.986 --> 00:31:43.976 A:middle
In my case, you know, sometimes
users have tens of thousands

00:31:43.976 --> 00:31:46.936 A:middle
or hundreds of thousands or
a hundred thousand photos

00:31:46.936 --> 00:31:48.046 A:middle
in their photos collection.

00:31:48.436 --> 00:31:50.816 A:middle
It's important that I
profile how my app behaves

00:31:50.816 --> 00:31:52.316 A:middle
under those circumstances.

00:31:52.756 --> 00:31:54.456 A:middle
So I can make sure it runs well

00:31:54.456 --> 00:31:56.706 A:middle
as my customers will
be running it.

00:31:57.336 --> 00:32:02.486 A:middle
So, to wrap everything up,
if you want your customers

00:31:57.336 --> 00:32:02.486 A:middle
So, to wrap everything up,
if you want your customers

00:32:02.486 --> 00:32:06.416 A:middle
to love using your app because
it helps save them time.

00:32:07.306 --> 00:32:09.876 A:middle
It helps them achieve
all-day battery life.

00:32:10.266 --> 00:32:14.296 A:middle
And your UI is really
responsive, then what you need

00:32:14.296 --> 00:32:18.406 A:middle
to do is profile early
and profile often.

00:32:19.076 --> 00:32:23.126 A:middle
If you want more information,
you can go to this URL.

00:32:24.156 --> 00:32:27.236 A:middle
Here are some related -- oh,
here are some related sessions.

00:32:27.586 --> 00:32:29.896 A:middle
Last year we did a session
called Profiling in Depth.

00:32:30.096 --> 00:32:32.216 A:middle
Which goes into more detail
about the Time Profiler,

00:32:32.216 --> 00:32:33.016 A:middle
if you want to know more.

00:32:33.476 --> 00:32:35.166 A:middle
And then this year we
did a sequel to that,

00:32:35.166 --> 00:32:36.386 A:middle
System Trace in Depth.

00:32:36.386 --> 00:32:38.366 A:middle
Which is how you can use
the System Trace instrument

00:32:38.366 --> 00:32:41.186 A:middle
in situations where Time
Profiler's not helping you.

00:32:41.626 --> 00:32:43.676 A:middle
Thank you, and have
a good afternoon.

00:32:44.516 --> 00:32:47.500 A:middle
[ Applause ]
