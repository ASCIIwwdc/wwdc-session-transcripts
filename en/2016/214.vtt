WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:23.516 --> 00:00:28.356 A:middle
[ Applause ]

00:00:28.856 --> 00:00:29.506 A:middle
&gt;&gt; Hello, everyone.

00:00:29.946 --> 00:00:31.066 A:middle
I'm Brian Weinstein.

00:00:31.346 --> 00:00:33.226 A:middle
I'm an engineer on
the Safari team.

00:00:33.556 --> 00:00:37.856 A:middle
And today Zach, Damian and
I are here to show you how

00:00:37.856 --> 00:00:41.326 A:middle
to extend your Mac app
using Safari app extensions.

00:00:41.946 --> 00:00:45.586 A:middle
In macOS Sierra and
Safari 10 on El Capitan,

00:00:45.926 --> 00:00:49.766 A:middle
we are introducing a new
way of writing, packaging

00:00:49.926 --> 00:00:51.826 A:middle
and distributing
Safari extensions.

00:00:52.376 --> 00:00:55.396 A:middle
These extensions leverage
both web technologies

00:00:55.696 --> 00:00:57.696 A:middle
and native code written
in Swift.

00:00:58.216 --> 00:01:01.356 A:middle
They're bundled with the Mac
app and can be distributed


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.216 --> 00:01:01.356 A:middle
They're bundled with the Mac
app and can be distributed

00:01:01.356 --> 00:01:02.296 A:middle
through the App Store.

00:01:02.756 --> 00:01:07.796 A:middle
That new way is Safari
app extensions.

00:01:08.286 --> 00:01:12.256 A:middle
Safari app extensions have the
power to customize the contents

00:01:12.256 --> 00:01:16.326 A:middle
of webpages using
JavaScript and CSS.

00:01:16.396 --> 00:01:19.726 A:middle
They have the power to block
loading of specific resources

00:01:19.796 --> 00:01:21.426 A:middle
or elements on a page.

00:01:22.326 --> 00:01:24.856 A:middle
They can add toolbar
buttons to Safari's UI.

00:01:25.756 --> 00:01:27.776 A:middle
And those toolbar
buttons have the power

00:01:27.776 --> 00:01:31.516 A:middle
to display popovers using
fully native technologies

00:01:31.516 --> 00:01:32.516 A:middle
to build the views.

00:01:32.906 --> 00:01:36.496 A:middle
And lastly, Safari app
extensions can add items

00:01:36.496 --> 00:01:38.956 A:middle
to context menus on webpages.

00:01:40.266 --> 00:01:43.576 A:middle
Safari app extensions are
based on app extensions.

00:01:43.746 --> 00:01:46.206 A:middle
Which are bundles of
code and resources

00:01:46.526 --> 00:01:49.326 A:middle
that are packaged inside
of your app that are meant

00:01:49.326 --> 00:01:52.786 A:middle
to give your users access
to your app's functionality

00:01:52.886 --> 00:01:54.906 A:middle
and content throughout macOS.

00:01:55.856 --> 00:01:59.926 A:middle
And so this means that they
are developed using Xcode

00:01:59.926 --> 00:02:02.926 A:middle
and other developing tools you
might already be familiar with


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.926 --> 00:02:02.926 A:middle
and other developing tools you
might already be familiar with

00:02:03.736 --> 00:02:07.426 A:middle
and it means that Safari app
extensions can run native code

00:02:07.676 --> 00:02:10.936 A:middle
with the power of the APIs
available to Mac Apps.

00:02:11.646 --> 00:02:14.876 A:middle
Another major benefit
about these being based

00:02:14.876 --> 00:02:18.956 A:middle
on app extensions is that they
are distributed with your app.

00:02:19.136 --> 00:02:21.576 A:middle
Which means that they can be
sold through the Mac App Store.

00:02:22.086 --> 00:02:24.236 A:middle
And it means that
your users don't need

00:02:24.236 --> 00:02:26.126 A:middle
to download your
extensions separately

00:02:26.356 --> 00:02:29.226 A:middle
after installing your app.

00:02:29.226 --> 00:02:34.026 A:middle
And for those of you who require
communication between your app

00:02:34.026 --> 00:02:36.396 A:middle
and your extension,
a major benefit

00:02:36.396 --> 00:02:38.286 A:middle
of Safari app extensions is

00:02:38.286 --> 00:02:41.066 A:middle
that your extension is always
revlocked with your app

00:02:41.686 --> 00:02:43.046 A:middle
because they're packaged
together.

00:02:43.596 --> 00:02:46.236 A:middle
So, your users will always
have matching versions

00:02:46.236 --> 00:02:48.386 A:middle
of your app and your extension.

00:02:49.366 --> 00:02:52.226 A:middle
One of the best parts of
an extension platform is

00:02:52.226 --> 00:02:54.456 A:middle
that it's capable of
building many different types

00:02:54.456 --> 00:02:55.176 A:middle
of extensions.

00:02:55.596 --> 00:02:58.256 A:middle
Today we're going to build
three types of extensions.

00:02:58.786 --> 00:03:01.966 A:middle
The first type is a content
blocker which blocks,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.786 --> 00:03:01.966 A:middle
The first type is a content
blocker which blocks,

00:03:01.966 --> 00:03:04.286 A:middle
which can block the loading
of specific resources

00:03:04.656 --> 00:03:06.466 A:middle
or hide elements on the page.

00:03:07.166 --> 00:03:09.226 A:middle
The second type will
be an extension

00:03:09.226 --> 00:03:12.646 A:middle
that modifies the contents
of webpages and communicates

00:03:12.646 --> 00:03:15.896 A:middle
between the JavaScript code
provided by your app extension

00:03:16.276 --> 00:03:18.086 A:middle
and the extension's native code.

00:03:18.726 --> 00:03:21.496 A:middle
And the third type of
extension will show you how

00:03:21.496 --> 00:03:25.396 A:middle
to extend Safari's UI to add
the power and functionality

00:03:25.396 --> 00:03:27.846 A:middle
of your app directly to Safari.

00:03:28.686 --> 00:03:31.126 A:middle
So, let's get started
with content blockers.

00:03:31.996 --> 00:03:33.796 A:middle
To build a content
blocker for us,

00:03:34.126 --> 00:03:35.676 A:middle
I'd like to bring Zach on stage.

00:03:35.976 --> 00:03:36.326 A:middle
Zach?

00:03:38.016 --> 00:03:39.946 A:middle
[ Applause ]

00:03:39.946 --> 00:03:40.706 A:middle
&gt;&gt; Thanks, Ryan.

00:03:43.086 --> 00:03:47.636 A:middle
Hi. I'm Zach Li and I'm also
an engineer on the Safari team.

00:03:48.616 --> 00:03:51.866 A:middle
Last year in Safari we
introduced a new Content

00:03:51.866 --> 00:03:52.676 A:middle
Blocking model.

00:03:53.136 --> 00:03:57.156 A:middle
Rather than developing extension
code on runtime to block loads

00:03:57.156 --> 00:03:59.906 A:middle
or hide elements,
we built a model

00:03:59.906 --> 00:04:03.026 A:middle
where you can declare ahead
of time what content to block.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.906 --> 00:04:03.026 A:middle
where you can declare ahead
of time what content to block.

00:04:03.826 --> 00:04:06.646 A:middle
And WebKit optimizes
such blocking mechanism

00:04:06.766 --> 00:04:08.786 A:middle
to make it fast and
memory efficient.

00:04:09.556 --> 00:04:12.786 A:middle
Best of all, this model
preserves user privacy

00:04:13.086 --> 00:04:15.396 A:middle
because the host
app isn't consulted

00:04:15.506 --> 00:04:16.685 A:middle
for the resources block.

00:04:17.896 --> 00:04:21.446 A:middle
Since then, we've seen so many
awesome content blockers you

00:04:21.446 --> 00:04:24.296 A:middle
have written that really
enhance the browsing experience.

00:04:24.756 --> 00:04:25.816 A:middle
And users love them.

00:04:27.146 --> 00:04:30.996 A:middle
Today, I'm excited to talk
about how to easily bring

00:04:30.996 --> 00:04:34.076 A:middle
out existing iOS
content blocker to macOS.

00:04:34.886 --> 00:04:37.236 A:middle
For those of you who haven't
written a content blocker

00:04:37.236 --> 00:04:39.146 A:middle
before, that's no problem.

00:04:39.596 --> 00:04:41.946 A:middle
You can check out the
WWDC talk last year

00:04:42.216 --> 00:04:44.116 A:middle
on developer.Apple.com.

00:04:45.016 --> 00:04:47.886 A:middle
Let's take a look at what
a content blocker can do.

00:04:49.066 --> 00:04:50.146 A:middle
I really love eating.

00:04:50.516 --> 00:04:51.956 A:middle
I basically eat all the time.

00:04:52.816 --> 00:04:55.706 A:middle
Obviously I have a food
blog that's dedicated

00:04:55.706 --> 00:04:58.356 A:middle
to the food I want to try.

00:04:58.556 --> 00:05:02.226 A:middle
But unfortunately, well,
actually fortunately,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.556 --> 00:05:02.226 A:middle
But unfortunately, well,
actually fortunately,

00:05:02.406 --> 00:05:03.956 A:middle
I will attend my
friend's wedding

00:05:04.076 --> 00:05:05.626 A:middle
as his best man next month.

00:05:05.936 --> 00:05:07.056 A:middle
That I need to stay fit.

00:05:07.486 --> 00:05:09.836 A:middle
At least I need to be
able to fit into the suit.

00:05:10.986 --> 00:05:13.456 A:middle
So, I created this
iOS content blocker

00:05:13.626 --> 00:05:16.026 A:middle
that blocks all the
desserts from my website,

00:05:16.376 --> 00:05:19.126 A:middle
that even if I'm starving
and I look for something

00:05:19.576 --> 00:05:22.276 A:middle
on my food blog, I wouldn't
think of desserts at all.

00:05:22.826 --> 00:05:26.056 A:middle
Let me show you how the
dessert blocker works.

00:05:28.806 --> 00:05:32.426 A:middle
So, this is my source code

00:05:32.816 --> 00:05:35.556 A:middle
and my app dessert
blocker is already running.

00:05:36.766 --> 00:05:37.796 A:middle
Let's go to Safari.

00:05:38.326 --> 00:05:41.816 A:middle
And the desserts are present.

00:05:42.256 --> 00:05:45.186 A:middle
Let's reload the page with
the dessert blocker enabled.

00:05:45.716 --> 00:05:48.486 A:middle
All the desserts are gone.

00:05:49.666 --> 00:05:50.186 A:middle
That's great.

00:05:50.796 --> 00:05:51.976 A:middle
Although I'll be missing them.

00:05:52.586 --> 00:05:56.576 A:middle
So, I am an iOS developer
with this content blocker

00:05:57.016 --> 00:06:00.246 A:middle
and I really want to bring it
to the Mac and distribute it


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:57.016 --> 00:06:00.246 A:middle
and I really want to bring it
to the Mac and distribute it

00:06:00.296 --> 00:06:01.086 A:middle
through the App Store.

00:06:02.086 --> 00:06:03.466 A:middle
It's actually quite simple to do

00:06:03.876 --> 00:06:07.636 A:middle
because the content blocker APIs
are the same on both platforms.

00:06:08.896 --> 00:06:12.906 A:middle
So, let's first go to Xcode.

00:06:13.046 --> 00:06:19.686 A:middle
Create a new Mac Application
target that's called dessert

00:06:19.686 --> 00:06:27.156 A:middle
blocker for Mac.

00:06:27.156 --> 00:06:30.086 A:middle
And let's quickly switch
the Mac Applications theme,

00:06:30.176 --> 00:06:33.516 A:middle
because we are now
building a Mac Application.

00:06:34.356 --> 00:06:37.996 A:middle
Then, create a new Mac
Application extension target.

00:06:42.256 --> 00:06:45.106 A:middle
Use the content blocker
extension template.

00:06:47.956 --> 00:06:53.606 A:middle
That's called dessert
blocker extension for Mac.

00:06:55.896 --> 00:07:00.126 A:middle
When users get Apps from the
App Store, they don't have


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:55.896 --> 00:07:00.126 A:middle
When users get Apps from the
App Store, they don't have

00:07:00.126 --> 00:07:02.646 A:middle
to run the application
in order for Safari

00:07:02.646 --> 00:07:03.906 A:middle
to find the app extension.

00:07:04.266 --> 00:07:08.756 A:middle
But outside the App Store,
Apps have to be run in order

00:07:08.756 --> 00:07:10.476 A:middle
for Safari to see the extension.

00:07:11.026 --> 00:07:12.686 A:middle
So, in this case,
I actually want

00:07:12.686 --> 00:07:15.336 A:middle
to continue using the
application scheme.

00:07:15.916 --> 00:07:18.126 A:middle
So, I'm just going
to click on cancel.

00:07:20.416 --> 00:07:23.746 A:middle
This template will set
everything up correctly.

00:07:24.276 --> 00:07:26.946 A:middle
And it comes with a simple
content blocking rule.

00:07:27.916 --> 00:07:30.016 A:middle
To make your own content
blocker, you just need

00:07:30.016 --> 00:07:31.476 A:middle
to modify this JSON file.

00:07:31.886 --> 00:07:33.036 A:middle
It's really convenient.

00:07:33.756 --> 00:07:37.696 A:middle
But in our case, we can actually
share resources with iOS app.

00:07:38.506 --> 00:07:40.616 A:middle
So, we can get rid
of this JSON file.

00:07:41.726 --> 00:07:43.216 A:middle
And the Swift file.

00:07:43.796 --> 00:07:47.886 A:middle
And make the ones we
already have be available

00:07:47.886 --> 00:07:51.086 A:middle
to the Mac Application,
Mac app extension target.

00:07:51.646 --> 00:07:55.596 A:middle
To accomplish that,
go to utility sidebar.

00:07:56.576 --> 00:07:58.896 A:middle
And in the target
membership section,

00:07:59.306 --> 00:08:01.186 A:middle
check the Mac app
extension target


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.306 --> 00:08:01.186 A:middle
check the Mac app
extension target

00:08:01.496 --> 00:08:03.296 A:middle
for the resources
we want to share.

00:08:05.516 --> 00:08:08.116 A:middle
Cool. We're pretty
much good to go.

00:08:08.636 --> 00:08:10.426 A:middle
But before that, I do want

00:08:10.426 --> 00:08:12.786 A:middle
to make my dessert
blocker more polished

00:08:13.066 --> 00:08:15.876 A:middle
by displaying a better name
and a better description

00:08:16.106 --> 00:08:18.076 A:middle
in Safari extensions
preferences.

00:08:18.726 --> 00:08:22.566 A:middle
To accomplish that, let's go
to the app extension info list.

00:08:22.566 --> 00:08:29.006 A:middle
Instead of dessert blocker
extension for Mac, let's check,

00:08:29.266 --> 00:08:30.516 A:middle
just called it dessert blocker.

00:08:31.056 --> 00:08:34.395 A:middle
And the description I want

00:08:34.395 --> 00:08:38.306 A:middle
to provide is this content
blocker blocks dessert pictures

00:08:38.306 --> 00:08:40.905 A:middle
on my food blog.com.

00:08:41.106 --> 00:08:44.556 A:middle
Also, I want to provide
prettier and more vivid icons

00:08:44.626 --> 00:08:45.616 A:middle
for my dessert blocker.

00:08:46.566 --> 00:08:48.666 A:middle
Let's remove the
default Asset catalog.

00:08:49.676 --> 00:08:50.616 A:middle
And drag the ones

00:08:50.616 --> 00:08:54.846 A:middle
with predesigned ice cream
icons to my Xcode project.

00:08:55.516 --> 00:08:57.506 A:middle
All right.

00:08:57.776 --> 00:09:04.346 A:middle
Let's view it and run
the application for Mac


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:57.776 --> 00:09:04.346 A:middle
Let's view it and run
the application for Mac

00:09:04.546 --> 00:09:06.516 A:middle
and the application is run.

00:09:07.286 --> 00:09:08.476 A:middle
So, let's go to Safari.

00:09:09.056 --> 00:09:14.506 A:middle
As you can see, it shows up
in extensions preferences.

00:09:14.826 --> 00:09:16.616 A:middle
Like all other Safari
extensions,

00:09:17.076 --> 00:09:19.136 A:middle
content blocker is
off by default.

00:09:19.676 --> 00:09:21.356 A:middle
Let's enable this
dessert blocker.

00:09:21.856 --> 00:09:24.656 A:middle
Reload the page.

00:09:25.216 --> 00:09:29.136 A:middle
Great. All the desserts
are gone.

00:09:30.366 --> 00:09:33.156 A:middle
Awesome. Now that my urges

00:09:33.156 --> 00:09:35.166 A:middle
to eat desserts are
completely blocked,

00:09:35.386 --> 00:09:38.106 A:middle
I'm so ready to be the best man.

00:09:40.516 --> 00:09:45.186 A:middle
[ Applause ]

00:09:45.686 --> 00:09:50.336 A:middle
As you saw, without even writing
any code we ported an iOS

00:09:50.336 --> 00:09:51.986 A:middle
content blocker to macOS.

00:09:53.376 --> 00:09:56.016 A:middle
On top of that, we've
heard feedback from you

00:09:56.016 --> 00:09:58.866 A:middle
that it would be nice to know
whether your content blocker

00:09:58.866 --> 00:09:59.636 A:middle
is enabled.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.296 --> 00:10:02.446 A:middle
So, we are introducing
a new API,

00:10:03.286 --> 00:10:06.006 A:middle
getStateOfContent
Blocker(identifier.

00:10:08.086 --> 00:10:13.106 A:middle
With this API, for example, if
you recall my not so great UI

00:10:13.226 --> 00:10:16.966 A:middle
in the app, I can provide a
better experience to users

00:10:17.306 --> 00:10:20.876 A:middle
by giving instructions on how
to enable my content blocker

00:10:21.216 --> 00:10:24.026 A:middle
if I detect my content
blocker is not enabled.

00:10:25.166 --> 00:10:28.926 A:middle
This API along with other
APIs that my colleague Brian

00:10:28.966 --> 00:10:32.326 A:middle
and Damian are going to
talk about will be available

00:10:32.326 --> 00:10:37.706 A:middle
on Sierra and El Capitan if
users have installed Safari 10.

00:10:39.036 --> 00:10:44.066 A:middle
Because El Capitan, the API
availability is dependent

00:10:44.066 --> 00:10:45.866 A:middle
on the presence of Safari 10.

00:10:46.196 --> 00:10:50.466 A:middle
We are providing you with a
handy Swift API that you can use

00:10:50.516 --> 00:10:53.586 A:middle
to check at runtime whether
Safari services APIs whether

00:10:53.586 --> 00:10:55.046 A:middle
Safari services APIs
are available.

00:10:56.266 --> 00:10:58.106 A:middle
Let's step through
the Swift code API.

00:10:59.586 --> 00:11:02.606 A:middle
If SFSafari service is
available returns true,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.586 --> 00:11:02.606 A:middle
If SFSafari service is
available returns true,

00:11:03.126 --> 00:11:05.026 A:middle
you can safely use the new API.

00:11:05.936 --> 00:11:08.366 A:middle
If not, fall back
to other behaviors.

00:11:09.756 --> 00:11:11.856 A:middle
These are what's new
with content blockers.

00:11:12.276 --> 00:11:16.306 A:middle
To talk about other powerful
capabilities you can view Safari

00:11:16.306 --> 00:11:20.616 A:middle
app extensions, I would like to
hand the stage back to Brian.

00:11:22.516 --> 00:11:25.716 A:middle
[ Applause ]

00:11:26.216 --> 00:11:26.856 A:middle
&gt;&gt; Thanks, Zach.

00:11:28.126 --> 00:11:31.416 A:middle
So, the next type of extension
I would like to show is one

00:11:31.416 --> 00:11:35.226 A:middle
that modifies the contents of
a page and also has the ability

00:11:35.226 --> 00:11:38.226 A:middle
to communicate with the
native code provided

00:11:38.226 --> 00:11:39.336 A:middle
by your app extension.

00:11:39.726 --> 00:11:41.346 A:middle
So, we're going to
build an extension

00:11:41.466 --> 00:11:43.536 A:middle
that replaces instances
of one word

00:11:43.806 --> 00:11:45.456 A:middle
with another throughout the web.

00:11:45.906 --> 00:11:48.936 A:middle
It will get the word to
replace and what to replace it

00:11:48.936 --> 00:11:51.376 A:middle
with from a app extension's
Swift code.

00:11:51.886 --> 00:11:54.326 A:middle
There are 2 ways for
Safari app extension

00:11:54.326 --> 00:11:56.256 A:middle
to modify the contents
of the webpage.

00:11:56.676 --> 00:11:59.376 A:middle
extensions can inject
CSS style sheets

00:11:59.786 --> 00:12:02.196 A:middle
and JavaScript content
scripts into pages.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.786 --> 00:12:02.196 A:middle
and JavaScript content
scripts into pages.

00:12:02.776 --> 00:12:04.976 A:middle
Let's take a look at how
to inject a style sheet.

00:12:05.786 --> 00:12:08.566 A:middle
Stylesheets are injected
by specifying them

00:12:08.766 --> 00:12:12.806 A:middle
in the app extensions Info.plist
in the NSExtension section.

00:12:13.376 --> 00:12:17.666 A:middle
Stylesheets are specified using
the SFSafari style sheet section

00:12:18.056 --> 00:12:21.056 A:middle
of the Info.plist file
which inspects an array

00:12:21.056 --> 00:12:23.486 A:middle
of dictionaries defining
each style sheet.

00:12:24.346 --> 00:12:28.566 A:middle
And each style sheet is defined
by a style sheet key-value pair

00:12:28.896 --> 00:12:32.586 A:middle
where the value is the path
to the style sheet relative

00:12:32.586 --> 00:12:35.516 A:middle
to the resources directory
of the extensions bundle.

00:12:36.206 --> 00:12:38.336 A:middle
And any style sheet
you've written in the past

00:12:38.336 --> 00:12:41.996 A:middle
for a Safari extension will just
work with Safari app extensions.

00:12:43.056 --> 00:12:45.026 A:middle
Next up is injecting scripts.

00:12:45.266 --> 00:12:47.096 A:middle
Which is almost exactly
the same,

00:12:47.516 --> 00:12:48.686 A:middle
just with two different keys.

00:12:49.246 --> 00:12:50.386 A:middle
Scripts are specified

00:12:50.446 --> 00:12:53.516 A:middle
in the SFSafari content
script key of the dictionary.

00:12:54.456 --> 00:12:57.476 A:middle
And the key representing
the path is script instead

00:12:57.476 --> 00:12:58.116 A:middle
of style sheet.

00:12:59.246 --> 00:13:01.586 A:middle
And all of your extensions
scripts are run


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.246 --> 00:13:01.586 A:middle
And all of your extensions
scripts are run

00:13:01.586 --> 00:13:03.536 A:middle
in their own execution context

00:13:03.736 --> 00:13:05.946 A:middle
which means there are never
there are never naming conflicts

00:13:06.166 --> 00:13:08.656 A:middle
with variables in
webpages content scripts.

00:13:09.186 --> 00:13:13.116 A:middle
This also allows Safari to
provide special JavaScript APIs

00:13:13.486 --> 00:13:15.156 A:middle
to your extension's
content scripts

00:13:15.436 --> 00:13:17.286 A:middle
that aren't available
to all webpages.

00:13:17.916 --> 00:13:20.836 A:middle
For example, your extension
might need to communicate

00:13:20.836 --> 00:13:23.966 A:middle
with the native code in your app
extension to read preferences

00:13:24.296 --> 00:13:27.806 A:middle
or perform some action that can
only be done in native code.

00:13:28.296 --> 00:13:31.516 A:middle
And to facilitate this, we've
added a message passing API

00:13:32.106 --> 00:13:34.556 A:middle
so your app extension's
JavaScript code

00:13:34.826 --> 00:13:37.286 A:middle
and Swift code can
communicate with each other.

00:13:38.516 --> 00:13:40.766 A:middle
So, taking a look
at this diagram,

00:13:41.196 --> 00:13:45.186 A:middle
you can see that we have Safari
and we have your app extension

00:13:45.356 --> 00:13:48.376 A:middle
with a box representing
the Swift code running

00:13:48.376 --> 00:13:50.306 A:middle
in your extension's
process which is

00:13:50.306 --> 00:13:51.916 A:middle
of course completely sandboxed.

00:13:52.406 --> 00:13:56.386 A:middle
And the extension has injected
a script into Apple.com

00:13:56.696 --> 00:13:58.146 A:middle
and that script would
like to ask

00:13:58.146 --> 00:14:00.736 A:middle
that app extension what
words it should replace.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.146 --> 00:14:00.736 A:middle
that app extension what
words it should replace.

00:14:01.566 --> 00:14:05.926 A:middle
To do that, it just calls
Safari.extension.dispatch

00:14:05.926 --> 00:14:08.376 A:middle
message and passes
along a message name.

00:14:08.916 --> 00:14:12.036 A:middle
Now let's see how the Swift
code listens for this message

00:14:12.246 --> 00:14:15.076 A:middle
and responds back with the
words it should replace.

00:14:16.246 --> 00:14:19.366 A:middle
Each Safari app extension
has a principal class

00:14:19.936 --> 00:14:22.236 A:middle
which is the class that
Safari calls methods

00:14:22.236 --> 00:14:24.686 A:middle
on when the user
interacts with Safari.

00:14:25.286 --> 00:14:27.926 A:middle
When a message is dispatched
from a content script

00:14:28.016 --> 00:14:31.556 A:middle
to the app extension,
message received with name

00:14:31.866 --> 00:14:34.376 A:middle
from page userInfo is called.

00:14:35.606 --> 00:14:37.426 A:middle
And once that method is called

00:14:37.426 --> 00:14:39.246 A:middle
on our extension's
principal object,

00:14:39.766 --> 00:14:43.986 A:middle
the first thing we do is check
the message name and act on it.

00:14:44.456 --> 00:14:48.146 A:middle
And to act on it, our extension
will be sending back a message

00:14:48.376 --> 00:14:51.686 A:middle
to the SFSafari page
representing Apple.com

00:14:51.946 --> 00:14:55.336 A:middle
with the words to replace and
what to replace them with.

00:14:55.886 --> 00:14:58.186 A:middle
And we are structuring
this at the dictionary

00:14:58.446 --> 00:15:01.556 A:middle
where each key represents the
word that we're going to replace


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.446 --> 00:15:01.556 A:middle
where each key represents the
word that we're going to replace

00:15:02.046 --> 00:15:04.936 A:middle
and the value represents what
we're going to replace it with.

00:15:05.886 --> 00:15:11.306 A:middle
So, when the app extension
calls dispatchMessageTo

00:15:11.306 --> 00:15:15.686 A:middle
Script(withName,userInfo,
that message is sent

00:15:15.686 --> 00:15:18.786 A:middle
from the extension process
back to the content script

00:15:19.076 --> 00:15:21.016 A:middle
that is injected into Apple.com.

00:15:21.566 --> 00:15:24.066 A:middle
Now let's see how that
content script listens

00:15:24.066 --> 00:15:25.946 A:middle
for these messages
and acts on them.

00:15:27.406 --> 00:15:29.956 A:middle
To listen for a message
inside a content script,

00:15:30.266 --> 00:15:33.846 A:middle
we start by adding an event
listener to Safari.self.

00:15:34.076 --> 00:15:36.596 A:middle
So, the content script can
listen for message events

00:15:36.896 --> 00:15:38.076 A:middle
from the app extension.

00:15:38.496 --> 00:15:40.616 A:middle
And if you've written a
Safari extension before,

00:15:41.016 --> 00:15:42.556 A:middle
this will look very familiar.

00:15:42.856 --> 00:15:45.436 A:middle
The API to receive
messages inside

00:15:45.436 --> 00:15:48.156 A:middle
of a content script is
almost exactly the same.

00:15:49.096 --> 00:15:52.266 A:middle
And when our event listener
fires because we got a message

00:15:52.266 --> 00:15:53.446 A:middle
from our app extension,

00:15:54.036 --> 00:15:57.016 A:middle
the first thing we do once
again is check the message name

00:15:57.016 --> 00:16:00.486 A:middle
as a best practice
and then we act on it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.016 --> 00:16:00.486 A:middle
as a best practice
and then we act on it.

00:16:00.486 --> 00:16:05.176 A:middle
To act on this message, we want
to iterate over our dictionary

00:16:05.696 --> 00:16:08.356 A:middle
that was specified in the
userInfo of the message

00:16:08.356 --> 00:16:10.576 A:middle
from the Swift code
and that is exposed

00:16:10.576 --> 00:16:12.886 A:middle
to JavaScript as event.message.

00:16:13.356 --> 00:16:16.216 A:middle
So, we get our dictionary
of words and replacements

00:16:16.496 --> 00:16:19.276 A:middle
and we iterate over
them and call a function

00:16:19.276 --> 00:16:23.256 A:middle
in our content script that
does those replacements.

00:16:23.876 --> 00:16:26.596 A:middle
So, this word replacement
extension

00:16:26.596 --> 00:16:29.676 A:middle
that we've been discussing is
meant to work on every website.

00:16:30.096 --> 00:16:32.326 A:middle
But some extensions are
tailored to only run

00:16:32.326 --> 00:16:33.926 A:middle
on particular websites.

00:16:34.706 --> 00:16:37.606 A:middle
Safari app extensions
support a rich system

00:16:37.606 --> 00:16:41.686 A:middle
for specifying what sites they
work on and additionally new

00:16:41.686 --> 00:16:44.426 A:middle
in Safari 10, users
will be able to see

00:16:44.586 --> 00:16:47.766 A:middle
which sites your Safari
extension requires access to.

00:16:49.196 --> 00:16:52.396 A:middle
Like information about content
scripts and style sheets,

00:16:53.086 --> 00:16:55.776 A:middle
your extension's website
access is described

00:16:55.776 --> 00:16:57.566 A:middle
in the extension's Info.plist

00:16:57.946 --> 00:17:00.596 A:middle
under the
SFSafariWebsiteAccess/key


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:57.946 --> 00:17:00.596 A:middle
under the
SFSafariWebsiteAccess/key

00:17:00.966 --> 00:17:02.806 A:middle
and it's a dictionary
with two parts.

00:17:03.166 --> 00:17:05.616 A:middle
The first part is the
website access level.

00:17:06.266 --> 00:17:09.675 A:middle
And this extension is specifying
an access level of all,

00:17:10.036 --> 00:17:11.496 A:middle
which means it wants access

00:17:11.496 --> 00:17:13.766 A:middle
to every webpage
that the user visits.

00:17:14.175 --> 00:17:17.705 A:middle
And as you can see, Safari's
extensions preferences warn the

00:17:17.705 --> 00:17:20.516 A:middle
user about this before they're
going to turn on the extension.

00:17:21.636 --> 00:17:22.685 A:middle
And in this example,

00:17:23.136 --> 00:17:25.665 A:middle
the extension has an
access level of some.

00:17:26.326 --> 00:17:30.556 A:middle
When the access level is some,
the extension specifies a list

00:17:30.556 --> 00:17:32.786 A:middle
of domains that it wants access

00:17:32.786 --> 00:17:36.216 A:middle
to in the allowed domain
section of the dictionary.

00:17:36.716 --> 00:17:40.466 A:middle
And if an allowed domain starts
with an asterisk, that marks it

00:17:40.466 --> 00:17:44.006 A:middle
as a wildcard and it represents
access to all subdomains.

00:17:45.426 --> 00:17:49.346 A:middle
So, now that we've discussed how
your extension can modify pages

00:17:49.686 --> 00:17:51.876 A:middle
by injecting content
scripts and style sheets,

00:17:52.356 --> 00:17:54.646 A:middle
how those content
scripts can communicate

00:17:54.646 --> 00:17:56.336 A:middle
with your app extension's
Swift code

00:17:56.716 --> 00:17:59.496 A:middle
and how you specify what
websites your extension would

00:17:59.496 --> 00:18:00.396 A:middle
like access to.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.496 --> 00:18:00.396 A:middle
like access to.

00:18:00.796 --> 00:18:03.416 A:middle
I'd like to put this all
together in a demo and write

00:18:03.416 --> 00:18:06.446 A:middle
that word replacement extension
that we've been talking about.

00:18:09.976 --> 00:18:12.886 A:middle
So, one of the interesting
things

00:18:12.956 --> 00:18:17.716 A:middle
about Safari extensions is that
since the code that interacts

00:18:17.716 --> 00:18:21.146 A:middle
with webpages is JavaScript
based, it's very easy

00:18:21.146 --> 00:18:23.926 A:middle
to bring code that you've
written for, an extension

00:18:23.926 --> 00:18:27.116 A:middle
for a different browser, and
bring it directly into Safari.

00:18:27.546 --> 00:18:31.156 A:middle
So, what I'm going to do is I'm
going to take a Chrome extension

00:18:31.436 --> 00:18:33.886 A:middle
that does this word
replacement and I'm going

00:18:33.886 --> 00:18:36.436 A:middle
to create a Safari
app extension from it.

00:18:36.846 --> 00:18:41.206 A:middle
And I'm going to extend it so
that we get the words to replace

00:18:41.456 --> 00:18:44.056 A:middle
and what to replace them
with from Swift code.

00:18:44.966 --> 00:18:48.756 A:middle
So, I already have an app
built with an icon and I would

00:18:48.756 --> 00:18:50.606 A:middle
like to create a
Safari extension.

00:18:51.286 --> 00:18:53.696 A:middle
To do that, I create
a new target in Xcode

00:18:55.036 --> 00:18:57.466 A:middle
and select a macOS
Application Extension

00:18:58.116 --> 00:18:59.786 A:middle
and select Safari extension.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.526 --> 00:19:04.236 A:middle
And we're going to call this
Animalify because we're going

00:19:04.236 --> 00:19:05.376 A:middle
to Animalify the web

00:19:05.376 --> 00:19:07.586 A:middle
by replacing animals
with their emoji.

00:19:09.776 --> 00:19:14.026 A:middle
And as Zach mentioned
before, we want to run the app

00:19:14.026 --> 00:19:16.816 A:middle
so I'm not going to activate
the extension scheme right now.

00:19:17.336 --> 00:19:22.386 A:middle
So, we now have our
extension and I'm going

00:19:22.386 --> 00:19:24.206 A:middle
to jump into the Info.plist.

00:19:24.636 --> 00:19:26.806 A:middle
And open up that
NSextension section.

00:19:27.336 --> 00:19:32.166 A:middle
And as you can see,
automatically created for us

00:19:32.166 --> 00:19:35.596 A:middle
from the template, we have a
content script, a toolbar item

00:19:36.006 --> 00:19:38.736 A:middle
and the website access that
our extension requires.

00:19:39.146 --> 00:19:41.016 A:middle
I'm going to get rid
of this toolbar item

00:19:41.016 --> 00:19:42.446 A:middle
because our extension
doesn't need it.

00:19:43.096 --> 00:19:47.256 A:middle
And change the access level
to all and get rid of the list

00:19:47.256 --> 00:19:49.816 A:middle
of allowed domains because
we want this extension

00:19:50.016 --> 00:19:51.586 A:middle
to run on every page.

00:19:52.636 --> 00:19:55.866 A:middle
The next thing I'm going to do
is open up our content script

00:19:56.456 --> 00:19:59.746 A:middle
and I'm just going to bring in
the content script I've written

00:19:59.746 --> 00:20:01.496 A:middle
for my Chrome extension
wholesale.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.746 --> 00:20:01.496 A:middle
for my Chrome extension
wholesale.

00:20:03.336 --> 00:20:05.896 A:middle
And as you can see, when
the script is injected

00:20:05.896 --> 00:20:08.916 A:middle
into the page, it just calls
our replacement function

00:20:09.176 --> 00:20:11.506 A:middle
and replaces bear
with the bear emoji.

00:20:12.136 --> 00:20:15.156 A:middle
Now, what I would like to
have my app do is I would

00:20:15.156 --> 00:20:17.036 A:middle
like to have it replaced,

00:20:17.036 --> 00:20:18.966 A:middle
I would like to have it
show a list of animals

00:20:19.146 --> 00:20:20.576 A:middle
and the users can choose

00:20:20.576 --> 00:20:22.736 A:middle
which animals they
would like to replace.

00:20:23.166 --> 00:20:25.956 A:middle
I'm not going to design
any of that UI right now

00:20:26.356 --> 00:20:30.196 A:middle
but to support that, we need
to get the list of replacements

00:20:30.196 --> 00:20:31.436 A:middle
from the app extension.

00:20:31.926 --> 00:20:35.526 A:middle
So, instead of doing this
replacement straightaway,

00:20:36.216 --> 00:20:38.926 A:middle
we're going to send
a JavaScript message

00:20:38.926 --> 00:20:42.636 A:middle
to the app extension asking it
for the words and replacements.

00:20:43.306 --> 00:20:45.606 A:middle
And so one thing that's
interesting here is

00:20:45.606 --> 00:20:47.496 A:middle
that Safari's extensions,

00:20:47.496 --> 00:20:51.176 A:middle
Safari app extension content
scripts are injected before the

00:20:51.176 --> 00:20:54.486 A:middle
dom has loaded for more
flexibility in your extensions.

00:20:55.016 --> 00:20:58.386 A:middle
But since a word replacer
doesn't do much before there's a

00:20:58.386 --> 00:21:01.966 A:middle
dom, we want to wait until the
dom is loaded before sending


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.386 --> 00:21:01.966 A:middle
dom, we want to wait until the
dom is loaded before sending

00:21:01.966 --> 00:21:02.706 A:middle
this message.

00:21:03.706 --> 00:21:05.666 A:middle
So, now let's go to
our principal class

00:21:06.286 --> 00:21:09.376 A:middle
and as you can see, we
already have an implementation

00:21:09.376 --> 00:21:13.836 A:middle
for message received with
name from page userInfo.

00:21:14.646 --> 00:21:19.246 A:middle
So, we're going to get rid
of this and just replace it

00:21:19.506 --> 00:21:22.786 A:middle
with some, with the code that
we talked about in the slides.

00:21:23.166 --> 00:21:25.376 A:middle
Which all it does is
check the message name

00:21:25.436 --> 00:21:28.376 A:middle
and sends a response back
to the content script.

00:21:28.876 --> 00:21:31.196 A:middle
And we're making two
replacements here just

00:21:31.226 --> 00:21:31.956 A:middle
because we can.

00:21:33.356 --> 00:21:35.716 A:middle
So, let's go back to the
content script and listen

00:21:35.716 --> 00:21:37.986 A:middle
for this message and act on it.

00:21:42.776 --> 00:21:45.516 A:middle
And once again, this is
just the code we talked

00:21:45.516 --> 00:21:47.046 A:middle
about a few minutes ago.

00:21:47.456 --> 00:21:49.146 A:middle
We start by adding
an event listener

00:21:49.146 --> 00:21:51.886 A:middle
for the message event
to Safari.self.

00:21:52.766 --> 00:21:56.686 A:middle
And when that event listener
fires, we check the message name

00:21:56.686 --> 00:22:00.236 A:middle
and get our replacements
from event.message.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:56.686 --> 00:22:00.236 A:middle
and get our replacements
from event.message.

00:22:00.336 --> 00:22:03.976 A:middle
And we act on them by iterating
over all of the replacements

00:22:04.256 --> 00:22:06.636 A:middle
and calling that same
replace function that was

00:22:06.636 --> 00:22:08.106 A:middle
at the beginning of
the script before.

00:22:08.856 --> 00:22:12.236 A:middle
So, now I would like to build
and run this app so Safari

00:22:12.236 --> 00:22:13.706 A:middle
to discover this new extension.

00:22:20.436 --> 00:22:23.036 A:middle
And you can just imagine
a list of animals here

00:22:23.036 --> 00:22:23.866 A:middle
and I've checked a few.

00:22:24.816 --> 00:22:28.996 A:middle
So, I'm just trying out
Safari app extensions

00:22:28.996 --> 00:22:29.826 A:middle
for the first time.

00:22:30.106 --> 00:22:32.496 A:middle
So, I have not signed up for
the app, I have not signed

00:22:32.496 --> 00:22:33.896 A:middle
up for the Apple
Developer Program

00:22:33.896 --> 00:22:36.546 A:middle
yet which means I don't have
a Developer certificate.

00:22:36.976 --> 00:22:40.086 A:middle
By default, Safari
will only show,

00:22:40.086 --> 00:22:42.676 A:middle
allow users to enable
extensions that have been signed

00:22:42.676 --> 00:22:44.066 A:middle
with the developer certificate.

00:22:44.466 --> 00:22:46.566 A:middle
But for those of you who
just want to try this out,

00:22:46.876 --> 00:22:49.496 A:middle
we've added way for
you to be able

00:22:49.496 --> 00:22:51.476 A:middle
to test your unsigned
extensions.

00:22:51.946 --> 00:22:55.916 A:middle
To do that, I'm going to open
up the Advanced Preferences

00:22:56.366 --> 00:22:58.526 A:middle
and show the Develop
menu in the menu bar.

00:22:59.176 --> 00:23:00.456 A:middle
And from the Develop menu,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.176 --> 00:23:00.456 A:middle
And from the Develop menu,

00:23:00.716 --> 00:23:03.516 A:middle
I'm going to select Allow
Unsigned extensions.

00:23:04.176 --> 00:23:05.376 A:middle
I'm going to type my password

00:23:06.256 --> 00:23:09.966 A:middle
and now the animal
extension shows

00:23:09.966 --> 00:23:11.286 A:middle
up in our list of extensions.

00:23:11.966 --> 00:23:15.516 A:middle
I'm going to turn it on and
before everyone got here,

00:23:15.516 --> 00:23:17.496 A:middle
I was researching the
diet of a grizzly bear.

00:23:17.856 --> 00:23:21.676 A:middle
So I'm just going to reload
this page and as you can see,

00:23:21.816 --> 00:23:24.436 A:middle
bear has now been placed,
replaced with the bear emoji

00:23:24.726 --> 00:23:27.366 A:middle
and salmon has been replaced
with a delicious sushi emoji.

00:23:29.446 --> 00:23:31.446 A:middle
[ Applause ]

00:23:31.876 --> 00:23:34.056 A:middle
And this is just going to
make the web a lot more fun

00:23:34.056 --> 00:23:34.776 A:middle
for me to browse.

00:23:39.936 --> 00:23:43.596 A:middle
So, that was how a Safari
app extension can modify page

00:23:43.596 --> 00:23:47.346 A:middle
content and how your extension
specifies what websites it would

00:23:47.346 --> 00:23:48.276 A:middle
like access to.

00:23:49.036 --> 00:23:51.456 A:middle
The last type of extension that
we're going to show you how

00:23:51.456 --> 00:23:55.736 A:middle
to make is one that extends
Safari's UI to add the power

00:23:55.736 --> 00:23:59.796 A:middle
and functionality of your
native app directly into Safari.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:00.296 --> 00:24:01.566 A:middle
And to show us how to do that,

00:24:01.886 --> 00:24:03.456 A:middle
I'd like to invite
Damian on stage.

00:24:03.886 --> 00:24:04.236 A:middle
Damian?

00:24:06.516 --> 00:24:09.026 A:middle
[ Applause ]

00:24:09.526 --> 00:24:11.006 A:middle
&gt;&gt; Hello, everyone.

00:24:11.006 --> 00:24:13.956 A:middle
My name is Damian Kaleta and I'm
an engineer on the Safari team.

00:24:15.106 --> 00:24:17.276 A:middle
So, Brian already told
you about the fundamentals

00:24:17.276 --> 00:24:20.386 A:middle
of Safari App Extensions and now
I want to build on top of that.

00:24:20.856 --> 00:24:22.916 A:middle
I want to tell you how you
can extend Safari's UI.

00:24:23.916 --> 00:24:24.426 A:middle
So, let's start.

00:24:25.686 --> 00:24:28.146 A:middle
I've written this
simple macOS app.

00:24:28.706 --> 00:24:29.456 A:middle
It's a notebook app.

00:24:30.186 --> 00:24:32.776 A:middle
And as you can see
by the screenshot,

00:24:32.776 --> 00:24:34.366 A:middle
the icon got some love
from the designers.

00:24:34.366 --> 00:24:35.886 A:middle
Unfortunately, the
app itself didn't.

00:24:36.276 --> 00:24:38.926 A:middle
But nevertheless, it
lets me insert some note,

00:24:39.086 --> 00:24:41.046 A:middle
saves it so I can view it later.

00:24:41.996 --> 00:24:45.866 A:middle
But now I want to be
able to grab notes off

00:24:45.866 --> 00:24:49.426 A:middle
of web pages directly and
modify this note in Safari.

00:24:50.396 --> 00:24:52.516 A:middle
And with the new Safari
app extension model,

00:24:53.606 --> 00:24:55.036 A:middle
I have all the tools
I need in order

00:24:55.036 --> 00:24:56.836 A:middle
to build my extension
really easily.

00:24:57.856 --> 00:25:00.096 A:middle
I'm going to need
two different things.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.856 --> 00:25:00.096 A:middle
I'm going to need
two different things.

00:25:00.606 --> 00:25:03.996 A:middle
So, I want to be able to
select a text and I want

00:25:03.996 --> 00:25:05.076 A:middle
to be able to save it.

00:25:06.156 --> 00:25:09.046 A:middle
For that, I'll use
a context menu item.

00:25:10.406 --> 00:25:14.536 A:middle
Secondly, I want to be able
to display my most recent note

00:25:15.336 --> 00:25:19.046 A:middle
and I want to be
able to modify it.

00:25:19.586 --> 00:25:20.826 A:middle
For that, I'll use a popover.

00:25:21.866 --> 00:25:25.186 A:middle
The popover shows up when the
user clicks the toolbar button.

00:25:25.536 --> 00:25:28.296 A:middle
So, let's talk about that first.

00:25:28.826 --> 00:25:32.646 A:middle
The toolbar button
goes by default next

00:25:32.646 --> 00:25:33.796 A:middle
to the Smart Search field.

00:25:34.436 --> 00:25:37.466 A:middle
That way your users have
really quick and easy access

00:25:37.466 --> 00:25:40.516 A:middle
to the functionality that
your extension provides.

00:25:41.476 --> 00:25:43.376 A:middle
As you would expect, if
you're an Events user

00:25:43.376 --> 00:25:45.386 A:middle
of course you can move
it around really easily.

00:25:46.566 --> 00:25:48.716 A:middle
So, how did I add my button?

00:25:49.336 --> 00:25:52.826 A:middle
I went to my extension's
Info.plist

00:25:53.246 --> 00:25:56.236 A:middle
and I've added
SFSafariToolbarItem.

00:25:56.986 --> 00:25:59.656 A:middle
Together with four
different key-value pairs.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:00.546 --> 00:26:05.526 A:middle
Identifier, label,
image and action.

00:26:06.786 --> 00:26:12.136 A:middle
And as with all toolbar items
on the system, please notice

00:26:12.136 --> 00:26:14.036 A:middle
that I'm using a PDF file here.

00:26:15.686 --> 00:26:19.256 A:middle
Okay, so Safari now displays my
toolbar button but what happens

00:26:19.256 --> 00:26:22.906 A:middle
to my extension when the user
clicks that toolbar button?

00:26:24.236 --> 00:26:27.016 A:middle
Safari sends toolbar
item click in window

00:26:27.766 --> 00:26:29.166 A:middle
to your principal object.

00:26:30.116 --> 00:26:33.006 A:middle
And as a reminder, your
principal object is the object

00:26:33.426 --> 00:26:35.146 A:middle
that handles all of
the communication

00:26:35.146 --> 00:26:37.846 A:middle
between Safari and
your extension.

00:26:39.166 --> 00:26:41.936 A:middle
And also if you want to gray
out the button depending

00:26:41.936 --> 00:26:45.756 A:middle
on the context, Safari provides
you with the validation method.

00:26:46.346 --> 00:26:49.556 A:middle
And you can also set batch
text for your button.

00:26:50.126 --> 00:26:51.916 A:middle
That usually represents
a numerical value

00:26:51.916 --> 00:26:54.926 A:middle
such as in red count.

00:26:55.516 --> 00:26:59.056 A:middle
So, we've got ourselves a
button but now I want to be able

00:26:59.056 --> 00:27:03.566 A:middle
to display a popover when
the user clicks the button.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.056 --> 00:27:03.566 A:middle
to display a popover when
the user clicks the button.

00:27:03.876 --> 00:27:07.286 A:middle
The popover lets me insert
any NSview inside of it

00:27:07.686 --> 00:27:11.556 A:middle
which is great because if you
have written any macOS Apps

00:27:11.556 --> 00:27:13.946 A:middle
before, you're going
to be able to reuse

00:27:13.946 --> 00:27:16.306 A:middle
that code really
easily right over here.

00:27:16.996 --> 00:27:18.396 A:middle
So, let me show you
how this works.

00:27:19.426 --> 00:27:23.406 A:middle
You have your extension
with the principal object

00:27:24.466 --> 00:27:28.956 A:middle
and then you'll want to define
popoverViewController method

00:27:28.956 --> 00:27:30.826 A:middle
on your principal object.

00:27:32.036 --> 00:27:34.626 A:middle
Inside that method,
you'll want to return

00:27:34.626 --> 00:27:38.696 A:middle
to custom view controller it
represents a view that you want

00:27:38.696 --> 00:27:40.176 A:middle
to insert in that popover.

00:27:40.716 --> 00:27:43.906 A:middle
On the other side,
there's Safari process

00:27:44.676 --> 00:27:47.536 A:middle
and Safari process is something
that we call remote view.

00:27:48.426 --> 00:27:51.656 A:middle
That remote view will
simply grab your review

00:27:51.656 --> 00:27:55.776 A:middle
and display its contents
in the popover.

00:27:56.516 --> 00:27:59.676 A:middle
And as you would expect, we
will also forward you all

00:27:59.676 --> 00:28:01.286 A:middle
of the events such
as click events.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.676 --> 00:28:01.286 A:middle
of the events such
as click events.

00:28:01.786 --> 00:28:05.646 A:middle
And a way to show the popover
is to simply specify an action

00:28:05.646 --> 00:28:11.356 A:middle
of popover instead of command
on SFSafariToolbarItem.

00:28:11.726 --> 00:28:12.286 A:middle
And that's it.

00:28:12.286 --> 00:28:15.286 A:middle
At this point, Safari knows that
you want to display a popover,

00:28:15.286 --> 00:28:17.516 A:middle
so you will look for that
custom view controller.

00:28:18.096 --> 00:28:22.736 A:middle
The popover also comes with
a handful of useful APIs.

00:28:23.236 --> 00:28:26.336 A:middle
And as you can see here, the
first two popoverWillShow

00:28:26.336 --> 00:28:27.736 A:middle
and the popoverWillClose.

00:28:28.276 --> 00:28:30.336 A:middle
It can help you do some
setup or cleanup work.

00:28:31.396 --> 00:28:33.226 A:middle
And the third one
we've talked about.

00:28:33.256 --> 00:28:35.436 A:middle
It's the one that
basically returns your custom

00:28:35.436 --> 00:28:36.006 A:middle
view controller.

00:28:37.006 --> 00:28:38.456 A:middle
Okay, so we've added the button.

00:28:38.456 --> 00:28:40.706 A:middle
We can display a popover.

00:28:41.216 --> 00:28:44.096 A:middle
Now let's talk about
context menu items.

00:28:44.096 --> 00:28:52.106 A:middle
So, you typically want to use
context menu items when you want

00:28:52.106 --> 00:28:54.376 A:middle
to act on part of the page.

00:28:54.986 --> 00:28:56.906 A:middle
But in my case, I
want to be able

00:28:56.906 --> 00:28:59.516 A:middle
to select the text
and then save it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:00.226 --> 00:29:02.786 A:middle
So, I went again to my
extensions Info.plist

00:29:03.096 --> 00:29:06.236 A:middle
and then I've added
SFSafariContextMenu.

00:29:07.496 --> 00:29:09.516 A:middle
It's an array of dictionaries

00:29:09.516 --> 00:29:12.016 A:middle
that hold two different
key-value pairs.

00:29:12.606 --> 00:29:14.556 A:middle
Text and command.

00:29:15.966 --> 00:29:18.256 A:middle
And then when the user presses

00:29:18.256 --> 00:29:20.596 A:middle
or clicks your context
menu item,

00:29:21.466 --> 00:29:24.186 A:middle
Safari will send
contextMenuItemSelected

00:29:24.646 --> 00:29:25.836 A:middle
to the principal object.

00:29:27.596 --> 00:29:31.356 A:middle
Please notice that we are
also passing along userInfo.

00:29:32.036 --> 00:29:35.846 A:middle
This will simply represent any
additional information you might

00:29:35.846 --> 00:29:38.566 A:middle
want to include from
your injected script.

00:29:39.516 --> 00:29:45.036 A:middle
Such as in my case, I want to be
able to pass along selectedText.

00:29:45.616 --> 00:29:48.986 A:middle
So, inside my injected script
I'm adding event listener

00:29:48.986 --> 00:29:49.906 A:middle
for context menu.

00:29:50.706 --> 00:29:54.636 A:middle
And then inside that function
I'm calling set context menu

00:29:54.636 --> 00:29:58.106 A:middle
event userInfo on the
Safari extension object.

00:29:59.286 --> 00:30:03.086 A:middle
And notice that I'm actually
sending along selectedText.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.286 --> 00:30:03.086 A:middle
And notice that I'm actually
sending along selectedText.

00:30:04.396 --> 00:30:08.536 A:middle
Okay. So now I'm excited to show
you my macOS app how I extended

00:30:08.536 --> 00:30:09.296 A:middle
it into Safari.

00:30:09.906 --> 00:30:15.226 A:middle
So, let's do that.

00:30:16.036 --> 00:30:17.466 A:middle
So, before I show you any code,

00:30:17.846 --> 00:30:20.556 A:middle
this is my simple macOS
app right over here.

00:30:20.556 --> 00:30:22.636 A:middle
As you can see, I
have just two notes.

00:30:23.066 --> 00:30:25.466 A:middle
I can insert my note
here, delete last note,

00:30:25.936 --> 00:30:28.606 A:middle
etc. So, let's go to Xcode.

00:30:29.176 --> 00:30:31.156 A:middle
I want to show you
three different things.

00:30:31.826 --> 00:30:34.006 A:middle
First, Info.plist.

00:30:35.916 --> 00:30:39.926 A:middle
So, please notice that I'm
adding my context menu item

00:30:39.926 --> 00:30:40.656 A:middle
right over here.

00:30:41.456 --> 00:30:43.426 A:middle
Here's my text and my command.

00:30:44.326 --> 00:30:46.206 A:middle
And I'm also adding
my toolbar item.

00:30:46.456 --> 00:30:50.006 A:middle
I have my, all of my four
different fields right

00:30:50.006 --> 00:30:50.676 A:middle
over here.

00:30:50.676 --> 00:30:54.496 A:middle
And as you can see,
I'm using a PDF file.

00:30:55.376 --> 00:30:59.506 A:middle
Second thing I want to show
you is my principal object.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.286 --> 00:31:04.856 A:middle
Let me just make it like that.

00:31:05.396 --> 00:31:08.466 A:middle
And I have overridden
two different methods

00:31:08.466 --> 00:31:09.636 A:middle
on my principal object.

00:31:09.816 --> 00:31:11.746 A:middle
The first one is
popoverViewController.

00:31:12.176 --> 00:31:15.366 A:middle
This will simply return
my view controller

00:31:15.696 --> 00:31:17.826 A:middle
that represents the
view that goes to,

00:31:17.826 --> 00:31:19.636 A:middle
that displaced in the popover.

00:31:20.276 --> 00:31:22.156 A:middle
And the second one
is contextMenuItem

00:31:22.156 --> 00:31:23.286 A:middle
Selected(withCommand.

00:31:24.066 --> 00:31:26.816 A:middle
And as you can see, I'm getting
my userInfo right over here

00:31:26.926 --> 00:31:28.936 A:middle
and assigning my
note here and here.

00:31:28.936 --> 00:31:36.916 A:middle
And third thing I want to show
you is how I can easily reuse

00:31:36.916 --> 00:31:41.716 A:middle
the code and share it between
my macOS app and my extension.

00:31:42.326 --> 00:31:45.616 A:middle
Of course normally you
wouldn't use just simple files.

00:31:45.616 --> 00:31:48.436 A:middle
You would use a framework
but that will give an idea.

00:31:49.536 --> 00:31:51.176 A:middle
So, this is my notes manager.

00:31:51.686 --> 00:31:55.716 A:middle
It will simply read and
save to the user defaults.

00:31:56.086 --> 00:31:58.816 A:middle
It has some simple methods
such as removeAllNotes,

00:31:58.816 --> 00:32:03.266 A:middle
removeLastNote, etc.
And please notice


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.816 --> 00:32:03.266 A:middle
removeLastNote, etc.
And please notice

00:32:03.266 --> 00:32:07.796 A:middle
that my target membership is set
for both targets, my notebook,

00:32:08.336 --> 00:32:10.406 A:middle
which is macOS app
and my extension.

00:32:11.646 --> 00:32:17.366 A:middle
Okay. So, now let me go
to Safari right over here

00:32:17.766 --> 00:32:21.216 A:middle
and as you can see, my
extension is right next

00:32:21.216 --> 00:32:22.326 A:middle
to the Smart Search field.

00:32:23.476 --> 00:32:25.726 A:middle
I can click it and
this is where my last,

00:32:25.886 --> 00:32:27.676 A:middle
my most recent note will appear.

00:32:28.136 --> 00:32:32.106 A:middle
So, let's say and, let me just
bring up my notebook app also.

00:32:33.106 --> 00:32:33.886 A:middle
Side to side.

00:32:34.366 --> 00:32:37.316 A:middle
So, let's say I'm
reading some blog posts

00:32:37.796 --> 00:32:43.026 A:middle
and let's pick this one.

00:32:43.446 --> 00:32:48.006 A:middle
And let's say that I want to
be able to save some notes.

00:32:48.006 --> 00:32:50.756 A:middle
So, let's say I select
this thing.

00:32:50.976 --> 00:32:54.446 A:middle
I command, CTL click it.

00:32:54.566 --> 00:32:57.386 A:middle
And then I say add
snippet to notebook.

00:32:58.526 --> 00:33:03.916 A:middle
Like so. As you can see, my note
was added right over here also.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.526 --> 00:33:03.916 A:middle
Like so. As you can see, my note
was added right over here also.

00:33:04.536 --> 00:33:09.136 A:middle
I can open my extension
and it's right over here.

00:33:09.496 --> 00:33:11.546 A:middle
And now if I want to
let's say modify it,

00:33:11.846 --> 00:33:16.096 A:middle
because let's say I don't
want to have my last sentence,

00:33:16.196 --> 00:33:20.236 A:middle
I can simply delete that,
hit Modify and voila.

00:33:20.466 --> 00:33:22.076 A:middle
It's reflected in my macOS app.

00:33:22.536 --> 00:33:26.426 A:middle
So, it's that simple to create
an extension and share the code

00:33:26.426 --> 00:33:29.806 A:middle
between your macOS
app and extension.

00:33:30.456 --> 00:33:36.206 A:middle
So, I showed you
how to add a button.

00:33:36.446 --> 00:33:38.716 A:middle
I showed you how to
display a popover

00:33:38.716 --> 00:33:41.176 A:middle
and add multiple
context menu items.

00:33:42.666 --> 00:33:44.286 A:middle
Now I want to hand
it back to Brian.

00:33:45.516 --> 00:33:48.500 A:middle
[ Applause ]

00:33:54.286 --> 00:33:55.056 A:middle
&gt;&gt; Thanks, Damian.

00:33:55.806 --> 00:33:57.176 A:middle
Except for leaving
the clicker over here.

00:33:58.676 --> 00:34:02.366 A:middle
So, today we showed you
three types of extensions


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.676 --> 00:34:02.366 A:middle
So, today we showed you
three types of extensions

00:34:02.366 --> 00:34:04.746 A:middle
that are made possible with
our new extension model.

00:34:05.506 --> 00:34:08.366 A:middle
We showed how easy it is to
bring your content blocker

00:34:08.476 --> 00:34:11.896 A:middle
from iOS to the Mac
and introduced new APIs

00:34:12.045 --> 00:34:14.126 A:middle
to get the state of
your content blocker

00:34:14.446 --> 00:34:15.976 A:middle
in response to your feedback.

00:34:16.656 --> 00:34:19.466 A:middle
We saw how simple it is to
bring a Chrome extension

00:34:19.666 --> 00:34:23.985 A:middle
that modifies webpages to Safari
and enhanced it to communicate

00:34:23.985 --> 00:34:26.775 A:middle
with the native Swift code
in your app extension.

00:34:27.295 --> 00:34:30.906 A:middle
And lastly, we saw how it had
the power and functionality

00:34:30.906 --> 00:34:33.346 A:middle
of your app directly to Safari.

00:34:34.176 --> 00:34:37.706 A:middle
And remember, Safari app
extensions are all based

00:34:37.706 --> 00:34:38.766 A:middle
on app extensions.

00:34:39.146 --> 00:34:42.266 A:middle
Which means you have the power
of native technologies and APIs

00:34:42.266 --> 00:34:46.176 A:middle
in your app extension
alongside your JavaScript

00:34:46.335 --> 00:34:49.856 A:middle
and your CSS used to
modify and enhance webpages.

00:34:50.616 --> 00:34:53.416 A:middle
And since Safari app
extensions are distributed

00:34:53.416 --> 00:34:57.226 A:middle
with your Mac app, there's an
easier installation experience

00:34:57.226 --> 00:35:00.516 A:middle
for your users and you can
now sell your extensions


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:57.226 --> 00:35:00.516 A:middle
for your users and you can
now sell your extensions

00:35:00.636 --> 00:35:01.686 A:middle
in the Mac App Store.

00:35:02.356 --> 00:35:05.756 A:middle
For more information about the
talk and some useful links,

00:35:06.066 --> 00:35:07.526 A:middle
please visit this page.

00:35:07.906 --> 00:35:11.556 A:middle
Safari app extensions are the
future and we need your help

00:35:11.596 --> 00:35:13.316 A:middle
to make them the best
that they can be.

00:35:13.726 --> 00:35:15.866 A:middle
Please give us some
feedback about our APIs

00:35:15.866 --> 00:35:17.796 A:middle
and any bugs you find.

00:35:18.056 --> 00:35:20.806 A:middle
On the More Information page,
you will find a link to leave

00:35:20.806 --> 00:35:24.296 A:middle
that feedback and the email
address of John Davis,

00:35:24.296 --> 00:35:26.376 A:middle
our Safari and WebKit
evangelist.

00:35:27.126 --> 00:35:29.966 A:middle
And for related sessions,
I highly recommend checking

00:35:29.966 --> 00:35:33.126 A:middle
out some of the app extension
talks from previous years.

00:35:34.266 --> 00:35:35.486 A:middle
Thank you so much.

00:35:36.516 --> 00:35:40.500 A:middle
[ Applause ]

