WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:22.516 --> 00:00:26.836 A:middle
[ Applause ]

00:00:27.336 --> 00:00:28.046 A:middle
&gt;&gt; Hello, everybody.

00:00:28.646 --> 00:00:32.296 A:middle
My name is Mike Stern, and
I'm User Experience Evangelist

00:00:32.296 --> 00:00:32.746 A:middle
at Apple.

00:00:33.506 --> 00:00:36.006 A:middle
And it's a great pleasure
to be with you today to talk

00:00:36.006 --> 00:00:37.756 A:middle
about designing for Apple Watch.

00:00:38.636 --> 00:00:40.736 A:middle
Now, in today's session,
we'll look at how

00:00:40.736 --> 00:00:42.826 A:middle
to apply design best practices

00:00:43.216 --> 00:00:46.306 A:middle
and leverage the new
capabilities of watchOS 3

00:00:46.796 --> 00:00:49.946 A:middle
to design Apple Watch
experiences that are fast,

00:00:50.396 --> 00:00:52.126 A:middle
focused, and delightful.

00:00:52.126 --> 00:00:56.186 A:middle
But before we get there, I
want to start with some basics.

00:00:57.176 --> 00:01:00.486 A:middle
Now, after all, some of you
may have never designed a


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:57.176 --> 00:01:00.486 A:middle
Now, after all, some of you
may have never designed a

00:01:00.486 --> 00:01:01.246 A:middle
watchOS app.

00:01:02.326 --> 00:01:05.176 A:middle
There are three basic components
to an Apple Watch app;

00:01:05.836 --> 00:01:09.216 A:middle
complications, notifications,
and apps.

00:01:09.616 --> 00:01:12.266 A:middle
A complication is
like a little widget

00:01:12.446 --> 00:01:14.666 A:middle
that people can display
on their watch face.

00:01:15.536 --> 00:01:18.766 A:middle
The term complication comes
from traditional watchmaking,

00:01:19.106 --> 00:01:21.106 A:middle
and it refers to any feature

00:01:21.106 --> 00:01:24.686 A:middle
on a timepiece beyond the
display of hours and minutes.

00:01:25.436 --> 00:01:28.576 A:middle
Complications made the
design, manufacturing,

00:01:28.576 --> 00:01:31.296 A:middle
and repair of watches
more expensive

00:01:31.776 --> 00:01:34.326 A:middle
and more complicated,
hence the name.

00:01:35.086 --> 00:01:37.696 A:middle
Now, fortunately for you,
complications are far easier

00:01:37.696 --> 00:01:41.456 A:middle
to make for Apple Watch and
they're way more powerful.

00:01:42.366 --> 00:01:45.606 A:middle
Complications on Apple
Watch offer the quickest way

00:01:45.886 --> 00:01:47.736 A:middle
for people to access information

00:01:47.736 --> 00:01:50.776 A:middle
and provide a really
fast way to get to apps.

00:01:51.546 --> 00:01:54.896 A:middle
Notifications tell people
about significant events

00:01:54.896 --> 00:01:56.606 A:middle
that they might otherwise
overlook.

00:01:57.176 --> 00:02:00.266 A:middle
And because they're also
interactive, they're a great way


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:57.176 --> 00:02:00.266 A:middle
And because they're also
interactive, they're a great way

00:02:00.266 --> 00:02:02.976 A:middle
to push interactions to the
people who use your app.

00:02:03.976 --> 00:02:07.096 A:middle
And lastly, apps offer
a deeper experience

00:02:07.096 --> 00:02:08.925 A:middle
with your product or service.

00:02:09.556 --> 00:02:11.746 A:middle
Now, providing a complication

00:02:11.746 --> 00:02:15.786 A:middle
or making watch-specific
notifications requires you

00:02:15.786 --> 00:02:17.076 A:middle
to also have an app.

00:02:18.316 --> 00:02:21.716 A:middle
These three basic components
are designed to work together.

00:02:22.256 --> 00:02:24.806 A:middle
Each plays an integral role

00:02:24.806 --> 00:02:27.856 A:middle
in the overall user
experience of your watch app.

00:02:28.556 --> 00:02:30.016 A:middle
So, for example, let's say

00:02:30.016 --> 00:02:31.976 A:middle
that I'm ordering
dinner with my watch.

00:02:32.576 --> 00:02:36.086 A:middle
I might start out by tapping
a delivery app complication

00:02:36.326 --> 00:02:37.096 A:middle
to launch the app.

00:02:37.096 --> 00:02:40.346 A:middle
I then use the app
to place an order.

00:02:40.686 --> 00:02:43.766 A:middle
And after doing that, I would
probably receive a notification

00:02:44.076 --> 00:02:46.886 A:middle
with a time estimate about
when my order will arrive.

00:02:47.866 --> 00:02:49.586 A:middle
While I wait for
my food to arrive,

00:02:49.776 --> 00:02:51.996 A:middle
I might periodically
check the complication

00:02:52.386 --> 00:02:54.506 A:middle
to see how much longer
I have to wait.

00:02:55.266 --> 00:02:57.536 A:middle
And when my order
is about to arrive,

00:02:58.066 --> 00:03:00.786 A:middle
I might get another
notification letting me know.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.066 --> 00:03:00.786 A:middle
I might get another
notification letting me know.

00:03:01.666 --> 00:03:05.086 A:middle
And finally, if I hadn't already
tipped the delivery person,

00:03:05.446 --> 00:03:07.536 A:middle
I might get a notification
asking me

00:03:07.536 --> 00:03:08.726 A:middle
if I would like to do so.

00:03:09.696 --> 00:03:13.086 A:middle
So that's the basics
about the components.

00:03:13.636 --> 00:03:15.846 A:middle
Now this presentation
will help you to learn how

00:03:15.846 --> 00:03:17.886 A:middle
to design each of these well.

00:03:18.736 --> 00:03:22.996 A:middle
But before we get there, there's
something even more basic,

00:03:23.686 --> 00:03:26.876 A:middle
even more fundamental, that
I'd like to discuss with you.

00:03:27.456 --> 00:03:29.626 A:middle
And that's the concept of time.

00:03:30.616 --> 00:03:32.886 A:middle
Apple Watch was specifically
designed

00:03:32.886 --> 00:03:34.706 A:middle
to support lightweight
interactions,

00:03:35.226 --> 00:03:37.616 A:middle
meaning that people should
be able to get information

00:03:37.616 --> 00:03:40.806 A:middle
and take action in very,
very short amounts of time.

00:03:41.546 --> 00:03:44.886 A:middle
Now I suppose this is an obvious
point, but it's really easy

00:03:44.886 --> 00:03:46.016 A:middle
to lose sight of this.

00:03:46.276 --> 00:03:48.616 A:middle
Of just how quick
interactions need to be

00:03:48.616 --> 00:03:49.946 A:middle
when you're designing comps

00:03:50.296 --> 00:03:52.406 A:middle
or testing your builds
in simulator.

00:03:52.406 --> 00:03:57.406 A:middle
Now as you design your app,
always challenge yourself

00:03:57.406 --> 00:04:00.916 A:middle
to find faster and less
complicated user flows.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.406 --> 00:04:00.916 A:middle
to find faster and less
complicated user flows.

00:04:01.566 --> 00:04:03.646 A:middle
There's always a
way to optimize.

00:04:04.266 --> 00:04:05.726 A:middle
For instance, many

00:04:05.726 --> 00:04:07.706 A:middle
of our built-in apps
have been made simpler

00:04:07.706 --> 00:04:08.946 A:middle
and quicker to navigate.

00:04:09.616 --> 00:04:12.066 A:middle
Previously, starting a
workout required you to go

00:04:12.066 --> 00:04:14.516 A:middle
to the Home screen,
find and launch the app,

00:04:14.736 --> 00:04:18.016 A:middle
select a workout type, pick
a goal or reuse the one

00:04:18.286 --> 00:04:20.946 A:middle
that you used last,
and then tap Start.

00:04:21.906 --> 00:04:24.106 A:middle
The new flow is much simpler,

00:04:24.626 --> 00:04:27.256 A:middle
especially if you use
the workout complication.

00:04:27.376 --> 00:04:28.846 A:middle
You just tap the complication,

00:04:29.216 --> 00:04:30.976 A:middle
then click Start,
and you're off.

00:04:31.736 --> 00:04:35.106 A:middle
Now Quick Start lets
people bypass the screen

00:04:35.106 --> 00:04:37.846 A:middle
for selecting their workout
goal and removes the need

00:04:37.846 --> 00:04:39.136 A:middle
for a separate Start button.

00:04:39.836 --> 00:04:43.136 A:middle
Now most people workout the
same way, day in and day out.

00:04:43.546 --> 00:04:45.936 A:middle
So, for those people,
it just takes two taps

00:04:46.286 --> 00:04:47.506 A:middle
to start a workout.

00:04:47.506 --> 00:04:50.146 A:middle
And the UI shown
while you're working

00:04:50.146 --> 00:04:53.796 A:middle
out has also been optimized
for faster interaction.

00:04:54.666 --> 00:04:56.386 A:middle
Previously, there
were seven screens

00:04:56.746 --> 00:04:57.916 A:middle
that people could swipe through.

00:04:58.346 --> 00:05:01.676 A:middle
One for controls, and one for
each of the workout metrics.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.346 --> 00:05:01.676 A:middle
One for controls, and one for
each of the workout metrics.

00:05:02.156 --> 00:05:05.286 A:middle
And navigating between these
screens required just way too

00:05:05.286 --> 00:05:07.286 A:middle
much time.

00:05:07.496 --> 00:05:11.946 A:middle
In watchOS 3, there's just two
screens; controls and metrics.

00:05:12.626 --> 00:05:15.546 A:middle
There's basically no need to
navigate until you're done

00:05:15.546 --> 00:05:17.936 A:middle
with your workout or if
you want to take a break.

00:05:18.456 --> 00:05:20.666 A:middle
Now this frees people
up to focus

00:05:20.666 --> 00:05:23.176 A:middle
on what's most important
while they're going

00:05:23.176 --> 00:05:25.036 A:middle
for a run or riding their bike.

00:05:25.566 --> 00:05:28.956 A:middle
Focus on your cadence,
your pace, breathing.

00:05:30.086 --> 00:05:32.236 A:middle
Look out for cars, pedestrians.

00:05:32.806 --> 00:05:35.166 A:middle
Enjoy the scenery,
and try to look cool.

00:05:36.086 --> 00:05:38.586 A:middle
With watchOS 3, the
Apple Watch design

00:05:38.586 --> 00:05:41.746 A:middle
and engineering team rallied
around three important themes

00:05:42.166 --> 00:05:45.526 A:middle
for this release which I
think are relevant to us all.

00:05:46.266 --> 00:05:51.016 A:middle
Those themes are glanceable,
actionable, and responsive.

00:05:52.106 --> 00:05:54.006 A:middle
Glanceable means
presenting information

00:05:54.006 --> 00:05:56.216 A:middle
so that it's immediately
comprehensible.

00:05:56.786 --> 00:06:00.846 A:middle
Your design must communicate
clearly and without distraction.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:56.786 --> 00:06:00.846 A:middle
Your design must communicate
clearly and without distraction.

00:06:01.556 --> 00:06:03.996 A:middle
You should only display
the information that's

00:06:03.996 --> 00:06:05.116 A:middle
most relevant.

00:06:06.196 --> 00:06:07.386 A:middle
Ideally, the information

00:06:07.386 --> 00:06:09.846 A:middle
that your app displays
is also actionable.

00:06:10.366 --> 00:06:14.496 A:middle
This means inspiring people to
take physical action in response

00:06:14.496 --> 00:06:18.656 A:middle
to what your app communicates,
or making it easier for people

00:06:18.656 --> 00:06:22.446 A:middle
to access functionality from
your app or notifications.

00:06:23.416 --> 00:06:25.786 A:middle
And apps should be responsive.

00:06:26.376 --> 00:06:28.656 A:middle
Launch times and screen
loading should be kept

00:06:28.656 --> 00:06:29.926 A:middle
to an absolute minimum.

00:06:30.526 --> 00:06:33.136 A:middle
Content and data should
always be up-to-date,

00:06:33.536 --> 00:06:35.846 A:middle
and UI feedback should
be immediate.

00:06:37.176 --> 00:06:40.036 A:middle
Now to help your apps be
more glanceable, actionable,

00:06:40.036 --> 00:06:42.776 A:middle
and responsive, major
changes were made

00:06:42.776 --> 00:06:46.956 A:middle
to the navigational model and
core architecture of watchOS.

00:06:47.716 --> 00:06:50.936 A:middle
The new Dock provides people
with a browsable collection

00:06:51.336 --> 00:06:54.486 A:middle
of timely and
contextually-relevant moments

00:06:54.576 --> 00:06:55.836 A:middle
from their favorite apps.

00:06:56.586 --> 00:06:58.396 A:middle
Apps in the Dock
are kept in memory

00:06:58.436 --> 00:07:01.136 A:middle
and can periodically
perform background updates,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.436 --> 00:07:01.136 A:middle
and can periodically
perform background updates,

00:07:01.436 --> 00:07:06.446 A:middle
which means that navigating to
an app from the Dock is fast

00:07:07.106 --> 00:07:09.386 A:middle
and people will spend
less time waiting

00:07:09.446 --> 00:07:12.376 A:middle
for app content to update.

00:07:12.376 --> 00:07:15.196 A:middle
And once you're in an app,
you can now move directly

00:07:15.196 --> 00:07:16.516 A:middle
between detail screens,

00:07:16.516 --> 00:07:19.536 A:middle
which greatly reduces the
time spent navigating.

00:07:20.366 --> 00:07:23.846 A:middle
These changes can
significantly decrease overall

00:07:23.846 --> 00:07:24.846 A:middle
interaction time.

00:07:25.536 --> 00:07:29.716 A:middle
In fact, with watchOS 3 our
internal target interaction time

00:07:29.986 --> 00:07:33.266 A:middle
was reduced from 5
seconds down to 2.

00:07:34.096 --> 00:07:37.936 A:middle
Now, admittedly, the first time
I heard about this, I thought,

00:07:38.066 --> 00:07:39.886 A:middle
"That is pretty ambitious."

00:07:40.356 --> 00:07:43.136 A:middle
I mean, it literally
takes me about 2 seconds

00:07:43.136 --> 00:07:45.116 A:middle
to say the words "2 seconds".

00:07:46.046 --> 00:07:48.806 A:middle
But, the truth is
that performing tasks

00:07:48.806 --> 00:07:53.306 A:middle
like checking scores for a
game, or checking the weather,

00:07:53.676 --> 00:07:57.996 A:middle
or checking stocks can
and should be that quick.

00:07:59.136 --> 00:08:01.116 A:middle
Now, throughout the day,
you might spend way more


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.136 --> 00:08:01.116 A:middle
Now, throughout the day,
you might spend way more

00:08:01.116 --> 00:08:05.526 A:middle
than a few seconds checking
the weather, scores, or stocks.

00:08:05.956 --> 00:08:09.176 A:middle
But each of those interactions
should be just a couple

00:08:09.176 --> 00:08:09.816 A:middle
of seconds.

00:08:10.666 --> 00:08:14.216 A:middle
And taking action
should be just as fast.

00:08:14.216 --> 00:08:18.456 A:middle
Simple actions that only require
a single decision work best

00:08:18.576 --> 00:08:19.536 A:middle
on Apple Watch.

00:08:20.166 --> 00:08:26.216 A:middle
People should be able to set
a timer, or turn on an alarm,

00:08:28.076 --> 00:08:31.076 A:middle
or check things off on
their Reminders List

00:08:31.506 --> 00:08:33.436 A:middle
in 2 seconds or less.

00:08:34.525 --> 00:08:37.066 A:middle
Now even if you can't
quite get interaction times

00:08:37.066 --> 00:08:40.056 A:middle
down to 2 seconds, the
act of trying to do

00:08:40.056 --> 00:08:44.356 A:middle
so will help you spot workflow
inefficiencies and find ways

00:08:44.426 --> 00:08:46.226 A:middle
to streamline your app.

00:08:46.916 --> 00:08:50.386 A:middle
All right, so now let's get
down into the details of how

00:08:50.386 --> 00:08:51.786 A:middle
to make really great apps,

00:08:52.416 --> 00:08:55.456 A:middle
notifications, and
complications.

00:08:56.466 --> 00:09:00.696 A:middle
Now, in my humble opinion,
complications are the easiest


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:56.466 --> 00:09:00.696 A:middle
Now, in my humble opinion,
complications are the easiest

00:09:00.696 --> 00:09:02.496 A:middle
and most glanceable interaction

00:09:02.806 --> 00:09:04.896 A:middle
that someone can
have on Apple Watch.

00:09:05.866 --> 00:09:08.006 A:middle
Checking a complication
is as easy

00:09:08.006 --> 00:09:10.366 A:middle
as raising one's
wrist and looking.

00:09:11.126 --> 00:09:13.776 A:middle
No additional interaction
is required.

00:09:14.186 --> 00:09:15.986 A:middle
This is definitely
an interaction

00:09:15.986 --> 00:09:17.626 A:middle
that takes 2 seconds or less.

00:09:18.346 --> 00:09:22.636 A:middle
And with watchOS 3 and iOS
10, big changes were made

00:09:22.876 --> 00:09:25.016 A:middle
to raise awareness
about complications

00:09:25.876 --> 00:09:28.126 A:middle
to make them easier to install

00:09:28.126 --> 00:09:30.426 A:middle
and to give them
added capabilities.

00:09:31.206 --> 00:09:35.156 A:middle
So, for starters, you can now
use Apple Watch app on iOS

00:09:35.736 --> 00:09:39.356 A:middle
to browse and configure
complications, which makes a lot

00:09:39.356 --> 00:09:41.696 A:middle
of sense because this is
definitely an interaction

00:09:42.036 --> 00:09:43.666 A:middle
which takes more than 2 seconds.

00:09:44.576 --> 00:09:47.276 A:middle
Now the configuration UI
shows an accurate preview

00:09:47.576 --> 00:09:50.066 A:middle
of how the complication
will look on the watch face,

00:09:50.626 --> 00:09:53.146 A:middle
and it's easy for people to
see what your complication does

00:09:53.546 --> 00:09:55.376 A:middle
and the value it
will provide to them.

00:09:56.616 --> 00:09:59.376 A:middle
The Apple Watch app also
has a gallery of watch faces

00:09:59.806 --> 00:10:02.186 A:middle
that are preconfigured
with complications.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.806 --> 00:10:02.186 A:middle
that are preconfigured
with complications.

00:10:03.046 --> 00:10:06.896 A:middle
And there's a section dedicated
to third-party complications.

00:10:07.426 --> 00:10:09.596 A:middle
Now if you've made a
complication bundle,

00:10:09.596 --> 00:10:14.046 A:middle
Apple Watch owners who have your
iOS app already installed will

00:10:14.046 --> 00:10:15.736 A:middle
see your complication here.

00:10:16.346 --> 00:10:18.196 A:middle
If your complication
looks useful,

00:10:18.576 --> 00:10:20.766 A:middle
people can simply
tap to install it.

00:10:20.766 --> 00:10:24.106 A:middle
And this will install your
watch app in the background.

00:10:24.966 --> 00:10:27.686 A:middle
The feature complication
is a really great way

00:10:27.686 --> 00:10:30.196 A:middle
to raise awareness
about your watch apps.

00:10:30.816 --> 00:10:33.546 A:middle
It will now be so much
easier for people to learn

00:10:33.546 --> 00:10:37.076 A:middle
about the complications
that you make.

00:10:37.296 --> 00:10:41.186 A:middle
Now another big change has
to do with performance.

00:10:42.346 --> 00:10:44.186 A:middle
Any app with a complication

00:10:44.886 --> 00:10:47.916 A:middle
on the user's current watch
face will be kept in memory

00:10:48.326 --> 00:10:51.136 A:middle
and have more background
update opportunities.

00:10:51.676 --> 00:10:54.156 A:middle
This means that launch time
is going to be way faster

00:10:54.546 --> 00:10:57.366 A:middle
and app data should
be less stale.

00:10:58.026 --> 00:11:01.436 A:middle
Complications are great app
launchers, and the information


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.026 --> 00:11:01.436 A:middle
Complications are great app
launchers, and the information

00:11:01.436 --> 00:11:03.986 A:middle
that they display
often motivates people

00:11:03.986 --> 00:11:05.246 A:middle
to want to know more.

00:11:05.496 --> 00:11:07.076 A:middle
So that process has to be quick.

00:11:07.626 --> 00:11:09.776 A:middle
So seeing the current
temperature might make you

00:11:09.776 --> 00:11:12.716 A:middle
curious about this
week's forecast.

00:11:13.896 --> 00:11:17.276 A:middle
Or, seeing that your primary
stock might be doing well could

00:11:17.276 --> 00:11:19.896 A:middle
make you want to know how
the overall market is doing.

00:11:19.896 --> 00:11:25.086 A:middle
And the last big change
to complications relates

00:11:25.086 --> 00:11:26.866 A:middle
to the frequency of updates.

00:11:27.476 --> 00:11:30.586 A:middle
In watchOS 3, your
app has opportunity

00:11:30.586 --> 00:11:33.986 A:middle
to update your complication
50 times in a day.

00:11:34.756 --> 00:11:38.386 A:middle
You control the frequency
and timing of these updates.

00:11:39.056 --> 00:11:42.326 A:middle
So a travel complication
could update most frequently

00:11:42.326 --> 00:11:45.106 A:middle
around the departure and
arrival time of a flight,

00:11:46.046 --> 00:11:49.246 A:middle
while a sport complication
might update most frequently

00:11:49.246 --> 00:11:50.776 A:middle
around a game that
you're following.

00:11:51.506 --> 00:11:53.316 A:middle
By controlling when
updates occur,

00:11:53.506 --> 00:11:57.206 A:middle
your complication can stay
current when it matters most.

00:11:58.096 --> 00:11:59.786 A:middle
Now as you work on
your complication,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.086 --> 00:12:02.216 A:middle
consider how external factors

00:12:02.216 --> 00:12:06.456 A:middle
and user activity patterns
might affect the timing

00:12:06.636 --> 00:12:10.316 A:middle
of your complication updates.

00:12:11.196 --> 00:12:15.336 A:middle
So, if you're going to
build an Apple Watch app,

00:12:16.436 --> 00:12:18.156 A:middle
you should make a complication.

00:12:19.016 --> 00:12:20.886 A:middle
There's a reason why they became

00:12:20.886 --> 00:12:24.606 A:middle
so popular among watch
owners and watchmakers.

00:12:25.276 --> 00:12:28.286 A:middle
All of that complexity
was worth the effort.

00:12:29.306 --> 00:12:32.816 A:middle
So I hope I've done a decent
job at least of selling you

00:12:32.816 --> 00:12:34.526 A:middle
on the idea of making
a complication.

00:12:35.036 --> 00:12:37.166 A:middle
And if so, I'd like to
talk to you a little bit

00:12:37.166 --> 00:12:40.386 A:middle
about what it takes to make
a really great complication.

00:12:40.876 --> 00:12:44.086 A:middle
Now the most important
consideration

00:12:44.246 --> 00:12:48.076 A:middle
when designing a complication is
just choosing what information

00:12:48.076 --> 00:12:48.706 A:middle
to display.

00:12:49.796 --> 00:12:52.836 A:middle
The best complications answer
those questions that people tend

00:12:52.836 --> 00:12:54.976 A:middle
to ask themselves
throughout their day.

00:12:55.816 --> 00:12:58.296 A:middle
Now I run most days
before I go to work.

00:12:58.986 --> 00:13:00.916 A:middle
So the night before,
I might check


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.986 --> 00:13:00.916 A:middle
So the night before,
I might check

00:13:00.916 --> 00:13:04.756 A:middle
to see what time the sun
will rise before setting my

00:13:04.756 --> 00:13:05.386 A:middle
alarm clock.

00:13:05.386 --> 00:13:07.446 A:middle
And when I get up, I want

00:13:07.446 --> 00:13:08.946 A:middle
to know what the
temperature is outside

00:13:08.946 --> 00:13:10.426 A:middle
so I know how to
dress for my run.

00:13:11.406 --> 00:13:13.726 A:middle
And I'll check to see what
time my first meeting is

00:13:13.786 --> 00:13:16.246 A:middle
to make sure I have
enough time to run.

00:13:16.416 --> 00:13:18.516 A:middle
And I'll also check
to see the traffic

00:13:18.816 --> 00:13:20.396 A:middle
to make sure I don't need

00:13:20.396 --> 00:13:21.986 A:middle
to leave really early
to get to work.

00:13:23.056 --> 00:13:27.056 A:middle
Now the answers to these
questions will directly impact

00:13:27.146 --> 00:13:28.526 A:middle
how I plan my day.

00:13:29.246 --> 00:13:32.466 A:middle
And by answering these questions
for me with a simple raise

00:13:32.466 --> 00:13:35.426 A:middle
of the wrist, these
complications provide real

00:13:35.426 --> 00:13:37.846 A:middle
and immediate value
throughout my day.

00:13:37.846 --> 00:13:42.646 A:middle
And complications can be a
really powerful motivator.

00:13:43.146 --> 00:13:45.736 A:middle
They can inspire
you to take action.

00:13:46.306 --> 00:13:47.406 A:middle
More actionable.

00:13:48.086 --> 00:13:50.926 A:middle
The Activity complication,
for example,

00:13:50.926 --> 00:13:54.166 A:middle
shows me progress towards
my fitness goals throughout

00:13:54.166 --> 00:13:54.456 A:middle
the day.

00:13:54.876 --> 00:13:58.066 A:middle
I can see if I'm on track
to filling those rings,

00:13:58.636 --> 00:14:01.006 A:middle
or if I need to go
for an extra-long walk


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.636 --> 00:14:01.006 A:middle
or if I need to go
for an extra-long walk

00:14:01.006 --> 00:14:02.366 A:middle
with my dogs after work.

00:14:03.356 --> 00:14:06.886 A:middle
And WaterMinder's complication
shows how much progress I'm

00:14:06.886 --> 00:14:08.946 A:middle
making towards my
daily hydration goal.

00:14:09.926 --> 00:14:12.706 A:middle
And it seems I'm actually a
little bit behind, so I'm going

00:14:12.706 --> 00:14:15.416 A:middle
to take this as an
opportunity to drink some water.

00:14:15.896 --> 00:14:16.506 A:middle
Hold on one second.

00:14:23.296 --> 00:14:23.363 A:middle
Ahh.

00:14:24.516 --> 00:14:26.516 A:middle
[ Laughter ]

00:14:27.516 --> 00:14:30.846 A:middle
[ Applause ]

00:14:31.346 --> 00:14:35.886 A:middle
So, if you had to pick just
one thing to communicate

00:14:36.296 --> 00:14:38.556 A:middle
with your complication
to the people

00:14:38.556 --> 00:14:41.256 A:middle
that use your app,
what would that be?

00:14:41.996 --> 00:14:44.196 A:middle
What's the thing that
they're most interested

00:14:44.196 --> 00:14:46.036 A:middle
in knowing throughout
the course of their day?

00:14:46.906 --> 00:14:49.236 A:middle
Does that information
change frequently enough

00:14:49.336 --> 00:14:50.736 A:middle
to remain interesting?

00:14:51.516 --> 00:14:55.306 A:middle
Now, sometimes, the answer to
that question is not so clear.

00:14:56.296 --> 00:14:59.586 A:middle
Now if you can't quite narrow
it down to just one piece

00:14:59.586 --> 00:15:02.716 A:middle
of information, consider
giving people options.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.586 --> 00:15:02.716 A:middle
of information, consider
giving people options.

00:15:03.556 --> 00:15:05.686 A:middle
That's what the app
CARROT Weather does.

00:15:06.486 --> 00:15:08.106 A:middle
They let you configure what type

00:15:08.106 --> 00:15:09.896 A:middle
of weather information
you want to see.

00:15:10.356 --> 00:15:14.766 A:middle
Temperature, temperature and
condition, wind, UV index,

00:15:15.196 --> 00:15:18.526 A:middle
precipitation, chance of
precipitation, or humidity.

00:15:19.356 --> 00:15:21.116 A:middle
Now during the summertime

00:15:21.116 --> 00:15:24.346 A:middle
in California, it
hardly ever rains.

00:15:24.766 --> 00:15:25.726 A:middle
So seeing the chance

00:15:25.726 --> 00:15:28.976 A:middle
of precipitation is
completely irrelevant.

00:15:29.776 --> 00:15:33.126 A:middle
0% today. That is
completely shocking.

00:15:33.686 --> 00:15:36.186 A:middle
Of course, just as an aside, I
saw the weather this morning.

00:15:36.186 --> 00:15:37.966 A:middle
It's actually supposed
to rain tomorrow.

00:15:38.326 --> 00:15:40.966 A:middle
So, heads up.

00:15:42.036 --> 00:15:42.636 A:middle
Just in time.

00:15:43.156 --> 00:15:47.066 A:middle
But, you know, during the same
period of time in the summer,

00:15:47.466 --> 00:15:52.026 A:middle
the UV index is incredibly
relevant information.

00:15:52.506 --> 00:15:54.176 A:middle
And allowing this complication

00:15:54.176 --> 00:15:57.146 A:middle
to be customizable is
a really great feature.

00:15:57.846 --> 00:16:00.426 A:middle
And CARROT Weather has
also done a great job


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.846 --> 00:16:00.426 A:middle
And CARROT Weather has
also done a great job

00:16:00.426 --> 00:16:03.096 A:middle
of making their complication
glanceable.

00:16:03.936 --> 00:16:06.696 A:middle
Each one, except for
just current temperature,

00:16:07.076 --> 00:16:09.686 A:middle
uses a simple and
meaningful icon

00:16:09.686 --> 00:16:11.346 A:middle
to label the value that's shown.

00:16:11.916 --> 00:16:14.976 A:middle
And they don't try to cram in
too much information either

00:16:14.976 --> 00:16:17.126 A:middle
because that would just
lead to text and icons

00:16:17.516 --> 00:16:18.766 A:middle
that are too small to read.

00:16:20.156 --> 00:16:22.016 A:middle
Now if you haven't made
a complication before,

00:16:22.626 --> 00:16:23.716 A:middle
it's important to know

00:16:23.716 --> 00:16:26.276 A:middle
that there are multiple
complication families.

00:16:26.906 --> 00:16:29.946 A:middle
Circular, modular
small, modular large,

00:16:30.076 --> 00:16:32.466 A:middle
utility small, and
utility large.

00:16:33.226 --> 00:16:37.026 A:middle
And new to watchOS
3, extra-large.

00:16:37.716 --> 00:16:39.856 A:middle
I wanted to get a
sound effect for that,

00:16:39.856 --> 00:16:41.066 A:middle
but I didn't have time.

00:16:41.796 --> 00:16:44.956 A:middle
Now each of these complication
families consist of one

00:16:44.956 --> 00:16:47.796 A:middle
or more complication
templates and corresponds

00:16:47.796 --> 00:16:49.246 A:middle
to particular watch faces.

00:16:49.806 --> 00:16:53.476 A:middle
The Color watch face uses the
circular complication family.

00:16:54.586 --> 00:16:58.336 A:middle
The modular watch face uses
the modular large complication

00:16:58.336 --> 00:17:01.476 A:middle
family and the modular
small family.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.336 --> 00:17:01.476 A:middle
family and the modular
small family.

00:17:02.546 --> 00:17:03.916 A:middle
The simple utility

00:17:03.916 --> 00:17:07.866 A:middle
and chronograph watch faces use
utility small complications.

00:17:08.506 --> 00:17:13.336 A:middle
And the utility and Mickey watch
faces use the utility large

00:17:13.425 --> 00:17:14.435 A:middle
complication family.

00:17:16.066 --> 00:17:20.126 A:middle
And the all-new extra-large
watch face uses,

00:17:20.606 --> 00:17:21.876 A:middle
does anyone want to guess?

00:17:23.026 --> 00:17:23.496 A:middle
That's right.

00:17:24.165 --> 00:17:27.445 A:middle
Extra-large watch face uses the
extra-large complication family.

00:17:27.576 --> 00:17:29.726 A:middle
You guys are quick.

00:17:29.726 --> 00:17:30.976 A:middle
Now I hope you wrote
all that down

00:17:30.976 --> 00:17:32.796 A:middle
because that information
will never be shared again.

00:17:33.896 --> 00:17:34.806 A:middle
No, I'm just kidding.

00:17:35.026 --> 00:17:37.206 A:middle
All of that information
is available to you

00:17:37.206 --> 00:17:39.976 A:middle
in the watchOS Human
Interface Guidelines.

00:17:40.396 --> 00:17:43.866 A:middle
This is your go-to place
for all information related

00:17:43.866 --> 00:17:45.096 A:middle
to the design of your watch app.

00:17:45.096 --> 00:17:47.106 A:middle
I highly recommend
checking it out.

00:17:48.256 --> 00:17:50.476 A:middle
Now it's important that
you try to make something

00:17:50.866 --> 00:17:52.526 A:middle
for every complication family

00:17:52.886 --> 00:17:55.376 A:middle
so that people can
use your complication

00:17:55.376 --> 00:17:57.696 A:middle
on the watch face
that they like best.

00:17:58.416 --> 00:18:00.586 A:middle
And be sure to use
placeholder data


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.416 --> 00:18:00.586 A:middle
And be sure to use
placeholder data

00:18:00.586 --> 00:18:03.196 A:middle
for your complication
that's representative

00:18:03.196 --> 00:18:04.576 A:middle
of what people will see

00:18:04.966 --> 00:18:07.046 A:middle
when they actually
use your complication.

00:18:07.516 --> 00:18:09.796 A:middle
Without placeholder data,
it's going to be impossible

00:18:09.796 --> 00:18:13.446 A:middle
for people to anticipate what
your complication will do.

00:18:14.806 --> 00:18:15.806 A:middle
All right.

00:18:15.806 --> 00:18:18.746 A:middle
As you can see, some
complications offer more room

00:18:18.816 --> 00:18:20.386 A:middle
for more detailed information.

00:18:21.176 --> 00:18:22.436 A:middle
On the modular watch face,

00:18:22.856 --> 00:18:25.506 A:middle
if someone has made your
complication the centerpiece,

00:18:25.836 --> 00:18:29.036 A:middle
they certainly care a lot about
what your app has to tell them.

00:18:30.096 --> 00:18:31.366 A:middle
Take this as an opportunity

00:18:32.146 --> 00:18:34.096 A:middle
to provide slightly
more information

00:18:34.506 --> 00:18:35.846 A:middle
that they might find helpful.

00:18:36.726 --> 00:18:40.366 A:middle
In fact, you may want to display
totally different information

00:18:40.726 --> 00:18:42.296 A:middle
based on the complication
family.

00:18:43.076 --> 00:18:45.486 A:middle
If weather information is
really important to you,

00:18:46.246 --> 00:18:49.226 A:middle
there's no reason why you
couldn't have two instances

00:18:49.446 --> 00:18:52.386 A:middle
of the CARROT Weather
complication on your watch face.

00:18:53.536 --> 00:18:56.546 A:middle
Maybe you'd use modular large
to show current temperature

00:18:56.626 --> 00:19:00.696 A:middle
and condition, and modular small
to show chance of precipitation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:56.626 --> 00:19:00.696 A:middle
and condition, and modular small
to show chance of precipitation.

00:19:01.576 --> 00:19:04.136 A:middle
Now even if you can't quite
figure out what information

00:19:04.486 --> 00:19:05.996 A:middle
to show in your complication,

00:19:06.576 --> 00:19:08.966 A:middle
you can always just
make an app launcher.

00:19:09.776 --> 00:19:12.756 A:middle
The complication for Just
Press Record, which is an app

00:19:13.086 --> 00:19:16.346 A:middle
for recording voice memos,
is just an app launcher.

00:19:16.996 --> 00:19:18.986 A:middle
Tapping it launches
the app of course,

00:19:19.286 --> 00:19:21.356 A:middle
but it also begins
a new recording.

00:19:21.816 --> 00:19:24.146 A:middle
It's super convenient and fast.

00:19:24.856 --> 00:19:30.286 A:middle
So if it's not already clear, we
like complications, like, a lot.

00:19:31.026 --> 00:19:33.256 A:middle
And we think that
Apple Watch owners --

00:19:33.606 --> 00:19:35.326 A:middle
the more Apple Watch
owners learn

00:19:35.326 --> 00:19:37.306 A:middle
about how useful
complications are,

00:19:37.716 --> 00:19:40.036 A:middle
the more complications
they'll want to have.

00:19:41.026 --> 00:19:44.346 A:middle
Now to make it easier to access
all of those complications,

00:19:44.796 --> 00:19:49.146 A:middle
people can now easily switch
watch faces on watchOS 3.

00:19:49.826 --> 00:19:52.586 A:middle
With a simple swipe, you can go
from your workday complication

00:19:52.936 --> 00:19:56.136 A:middle
to the workout watch face, and
from the workout watch face

00:19:56.526 --> 00:19:57.796 A:middle
to the weekend watch face.

00:19:58.556 --> 00:20:01.196 A:middle
Now think about all of
the different things


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.556 --> 00:20:01.196 A:middle
Now think about all of
the different things

00:20:01.196 --> 00:20:02.766 A:middle
that we do with our time.

00:20:03.286 --> 00:20:05.126 A:middle
Right? The variety
is staggering.

00:20:06.126 --> 00:20:07.646 A:middle
No, seriously.

00:20:07.646 --> 00:20:11.126 A:middle
We workout, we hangout,
we exercise, we travel,

00:20:11.426 --> 00:20:14.356 A:middle
we play sports and do countless
other types of activities.

00:20:15.056 --> 00:20:17.716 A:middle
Now, it'll be easier
to match the watch face

00:20:17.716 --> 00:20:21.056 A:middle
and complications installed to
what it is that you're doing.

00:20:21.556 --> 00:20:24.416 A:middle
And this should lead to
people using a wider number

00:20:24.416 --> 00:20:26.646 A:middle
of complications on Apple Watch.

00:20:27.346 --> 00:20:29.956 A:middle
Make one of those
complications yours.

00:20:30.006 --> 00:20:34.066 A:middle
All right, so that
was complications.

00:20:34.936 --> 00:20:38.556 A:middle
Now, let's move on to best
practices for notifications.

00:20:40.656 --> 00:20:45.196 A:middle
Notifications should
always be useful and timely,

00:20:46.066 --> 00:20:48.116 A:middle
and they should be
carefully designed

00:20:48.416 --> 00:20:52.436 A:middle
to communicate information
with precision and clarity.

00:20:53.186 --> 00:20:56.466 A:middle
In other words, they
should be glanceable.

00:20:57.496 --> 00:21:00.396 A:middle
Keep in mind that the person
receiving your notification


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.496 --> 00:21:00.396 A:middle
Keep in mind that the person
receiving your notification

00:21:00.636 --> 00:21:03.696 A:middle
could be anywhere and
doing just about anything.

00:21:04.566 --> 00:21:07.006 A:middle
They could be at dinner,
hanging out with friends,

00:21:07.876 --> 00:21:10.456 A:middle
riding on the subway,
getting hydrated,

00:21:11.286 --> 00:21:14.776 A:middle
or in a meeting discussing
something of real importance.

00:21:15.666 --> 00:21:18.776 A:middle
Now, in so many situations,
people are fully engaged

00:21:19.066 --> 00:21:21.886 A:middle
in the task at hand or just
really paying attention

00:21:21.886 --> 00:21:22.916 A:middle
to the world around them.

00:21:23.516 --> 00:21:25.386 A:middle
So your notifications need

00:21:25.386 --> 00:21:28.116 A:middle
to communicate clearly
and get to the point.

00:21:29.126 --> 00:21:32.366 A:middle
Luckily, making your
notification glanceable is not

00:21:32.366 --> 00:21:32.966 A:middle
so difficult.

00:21:33.626 --> 00:21:35.996 A:middle
First, you just need to
provide a meaningful title.

00:21:36.586 --> 00:21:38.466 A:middle
Now notifications
come in two stages,

00:21:38.466 --> 00:21:39.806 A:middle
ashort look and a long look.

00:21:40.376 --> 00:21:42.396 A:middle
And as the name implies,
the short look is there

00:21:42.396 --> 00:21:44.276 A:middle
to give you a sense of
what the notification is

00:21:44.276 --> 00:21:45.406 A:middle
about really quickly.

00:21:46.036 --> 00:21:48.656 A:middle
And the title that you provide
will get displayed here.

00:21:49.236 --> 00:21:51.666 A:middle
Now, in some cases, that title
might tell you everything you

00:21:51.666 --> 00:21:53.506 A:middle
need to know about
the notification.

00:21:54.596 --> 00:21:57.626 A:middle
Second, only show
what's necessary.

00:21:58.146 --> 00:21:59.626 A:middle
I can't stress this enough.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.126 --> 00:22:02.196 A:middle
The more you show
in a notification,

00:22:02.496 --> 00:22:04.426 A:middle
the harder it's going to
be for people to focus

00:22:04.426 --> 00:22:05.816 A:middle
on what's most important.

00:22:06.526 --> 00:22:09.476 A:middle
So let's say you're making
a check-in notification

00:22:09.876 --> 00:22:11.396 A:middle
for a travel app.

00:22:11.506 --> 00:22:13.376 A:middle
The notification might
contain all sorts

00:22:13.376 --> 00:22:15.136 A:middle
of potentially useful
information

00:22:15.486 --> 00:22:16.686 A:middle
about the traveler's flight.

00:22:17.446 --> 00:22:21.826 A:middle
But seeing things like the
flight number or your own name

00:22:21.826 --> 00:22:25.236 A:middle
in a notification when it's
just really implied is not all

00:22:25.236 --> 00:22:27.976 A:middle
that important, so
we can just remove

00:22:27.976 --> 00:22:29.686 A:middle
that information altogether.

00:22:31.036 --> 00:22:34.546 A:middle
Third, present important
information first.

00:22:34.896 --> 00:22:37.056 A:middle
By putting the most
important things at the top,

00:22:37.486 --> 00:22:39.916 A:middle
people are more likely to
get the message quickly

00:22:39.916 --> 00:22:41.206 A:middle
without the need to scroll.

00:22:41.746 --> 00:22:44.346 A:middle
And this is really helpful if
someone is carrying stuff around

00:22:44.606 --> 00:22:46.986 A:middle
and they might not be able
to easily swipe the screen

00:22:47.446 --> 00:22:48.976 A:middle
or access the Digital Crown.

00:22:50.046 --> 00:22:51.766 A:middle
So for our check-in
notification,

00:22:52.246 --> 00:22:54.466 A:middle
we might move content
like the flight number

00:22:54.466 --> 00:22:56.406 A:middle
and boarding time a
little bit further

00:22:56.406 --> 00:22:57.836 A:middle
down in the notification.

00:22:59.056 --> 00:23:02.506 A:middle
Fourth, vary the size
and appearance of type


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.056 --> 00:23:02.506 A:middle
Fourth, vary the size
and appearance of type

00:23:02.936 --> 00:23:05.426 A:middle
to establish a clear
visual hierarchy.

00:23:06.136 --> 00:23:08.606 A:middle
Your notification should
focus people's attention

00:23:08.606 --> 00:23:11.046 A:middle
on the most important
information first.

00:23:11.746 --> 00:23:15.796 A:middle
This notification has all the
right information and it's

00:23:15.796 --> 00:23:18.396 A:middle
in the right order, but
everything here is treated

00:23:18.396 --> 00:23:20.276 A:middle
with equivalent visual weight.

00:23:21.086 --> 00:23:24.046 A:middle
Apple Watch notifications
are very customizable.

00:23:24.386 --> 00:23:27.476 A:middle
You have full control over
font appearance, layout,

00:23:27.476 --> 00:23:29.276 A:middle
background and sash color.

00:23:30.416 --> 00:23:33.226 A:middle
Use this capability to
help people quickly pick

00:23:33.226 --> 00:23:34.966 A:middle
out what's most important.

00:23:35.756 --> 00:23:38.496 A:middle
Now this design really
puts the focus on things

00:23:38.496 --> 00:23:42.346 A:middle
like ticket class, seat number,
departure time, and route.

00:23:42.386 --> 00:23:45.096 A:middle
And the purpose of this
notification that it's time

00:23:45.096 --> 00:23:47.756 A:middle
for you to check in
now, is made very clear.

00:23:49.136 --> 00:23:49.876 A:middle
And lastly,

00:23:50.336 --> 00:23:53.566 A:middle
thoughtfully-designed
notifications often use icons,

00:23:53.566 --> 00:23:54.826 A:middle
graphics, and animations

00:23:54.826 --> 00:23:57.336 A:middle
to convey meaning
quickly and with impact.

00:23:58.306 --> 00:24:01.416 A:middle
Visuals can sometimes
communicate meaning faster


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.306 --> 00:24:01.416 A:middle
Visuals can sometimes
communicate meaning faster

00:24:01.736 --> 00:24:03.786 A:middle
and more clearly than text.

00:24:04.726 --> 00:24:08.236 A:middle
Icons can help save space
and allow your notification

00:24:08.236 --> 00:24:10.466 A:middle
to display everything
on screen at once.

00:24:11.076 --> 00:24:14.946 A:middle
But be mindful that some
icons may not be universally

00:24:14.946 --> 00:24:17.286 A:middle
understood or could
be misinterpreted.

00:24:17.616 --> 00:24:20.376 A:middle
So you want to look for icons
that are widely understood

00:24:20.376 --> 00:24:23.786 A:middle
across regions and cultures,
or whose symbolism you know

00:24:23.886 --> 00:24:27.276 A:middle
to be clear to the
people who use your app.

00:24:27.276 --> 00:24:29.926 A:middle
And short, meaningful
animations can be a great way

00:24:30.246 --> 00:24:33.516 A:middle
to complement text and to
engage people's attention.

00:24:34.386 --> 00:24:38.186 A:middle
And graphs and other data
visualizations not only provide

00:24:38.186 --> 00:24:41.306 A:middle
for a more interesting visual
experience, but may pack

00:24:41.306 --> 00:24:43.586 A:middle
in far more meaning
than text alone.

00:24:44.746 --> 00:24:48.346 A:middle
But there's more to consider
when it comes to the design

00:24:48.506 --> 00:24:50.026 A:middle
of your notifications.

00:24:52.136 --> 00:24:55.026 A:middle
You also need to think
carefully about why

00:24:55.446 --> 00:24:56.876 A:middle
and when you're sending them.

00:24:57.766 --> 00:24:58.726 A:middle
Getting a notification

00:24:58.726 --> 00:25:03.066 A:middle
at the wrong time can be just
distracting or really annoying.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.726 --> 00:25:03.066 A:middle
at the wrong time can be just
distracting or really annoying.

00:25:03.726 --> 00:25:06.356 A:middle
If you got a notification
right now, you would be

00:25:06.426 --> 00:25:10.036 A:middle
so annoyed unless it was about
something even more important

00:25:10.036 --> 00:25:11.086 A:middle
than being here right now,

00:25:11.576 --> 00:25:13.296 A:middle
which is completely
ridiculous [laughter].

00:25:15.576 --> 00:25:18.466 A:middle
Now, because Apple Watch
effectively taps people

00:25:18.466 --> 00:25:21.196 A:middle
on their wrist when they
receive a notification,

00:25:21.516 --> 00:25:23.526 A:middle
notifications are
very hard to miss.

00:25:24.026 --> 00:25:26.266 A:middle
If your app sends
people notifications

00:25:26.266 --> 00:25:29.886 A:middle
that are not genuinely useful,
informative, and timely,

00:25:30.246 --> 00:25:32.846 A:middle
people are likely to just
turn off your app's ability

00:25:33.056 --> 00:25:34.876 A:middle
to send notifications
altogether.

00:25:36.226 --> 00:25:41.846 A:middle
So, how do you know why and
when to send notifications?

00:25:42.966 --> 00:25:46.456 A:middle
Well, the best approach is to
determine what's most relevant

00:25:46.656 --> 00:25:48.486 A:middle
to the people who use your app

00:25:48.486 --> 00:25:50.686 A:middle
and intelligently
time notifications

00:25:51.006 --> 00:25:52.456 A:middle
for when they're
most actionable.

00:25:53.316 --> 00:25:56.546 A:middle
Now I have two really
great apps that --

00:25:56.546 --> 00:25:59.006 A:middle
I have two really
great examples of this.

00:25:59.486 --> 00:26:02.556 A:middle
The first is from the
awesome weather app, Dark Sky.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.486 --> 00:26:02.556 A:middle
The first is from the
awesome weather app, Dark Sky.

00:26:03.596 --> 00:26:05.006 A:middle
Dark Sky notifies people

00:26:05.006 --> 00:26:07.606 A:middle
about significant
weather condition changes,

00:26:08.066 --> 00:26:09.976 A:middle
such as when it's
about to start raining

00:26:10.286 --> 00:26:12.026 A:middle
or when rain is about to stop.

00:26:13.096 --> 00:26:15.946 A:middle
Now, in the case of Dark
Sky, relevance is determined

00:26:15.946 --> 00:26:17.306 A:middle
by contextual factors.

00:26:17.686 --> 00:26:21.856 A:middle
Notifications are sent based on
the user's location or proximity

00:26:21.856 --> 00:26:24.516 A:middle
to an approaching or
departing weather system.

00:26:25.366 --> 00:26:28.416 A:middle
And notifications are sent early
enough so that there's time

00:26:28.416 --> 00:26:31.486 A:middle
to get the umbrella out
before it starts pouring

00:26:31.486 --> 00:26:32.896 A:middle
down raining cats and dogs.

00:26:33.726 --> 00:26:36.386 A:middle
Now, because these notifications
are contextually relevant

00:26:36.416 --> 00:26:39.256 A:middle
and timely, they
are more actionable.

00:26:40.106 --> 00:26:43.356 A:middle
Knowing that it's about to
stop raining might motivate me

00:26:43.466 --> 00:26:44.816 A:middle
to get ready to go for a run.

00:26:45.496 --> 00:26:49.536 A:middle
Knowing that it's about to
start raining might motivate me

00:26:49.566 --> 00:26:51.566 A:middle
to walk to my couch
and take a nap.

00:26:52.686 --> 00:26:56.226 A:middle
Now, in addition to contextual
factors, user preferences

00:26:56.226 --> 00:26:58.586 A:middle
and patterns can provide
really great insights

00:26:58.956 --> 00:27:00.476 A:middle
into what people want to know


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.956 --> 00:27:00.476 A:middle
into what people want to know

00:27:00.476 --> 00:27:02.006 A:middle
and when they want
to know about it.

00:27:02.646 --> 00:27:05.466 A:middle
Now, to explain, let's
look at the other example.

00:27:06.616 --> 00:27:11.856 A:middle
Streaks is an app that helps
people form positive habits

00:27:12.266 --> 00:27:14.206 A:middle
and also just won an
Apple Design Award.

00:27:15.136 --> 00:27:18.036 A:middle
People can pick up to
six tasks that they want

00:27:18.036 --> 00:27:19.496 A:middle
to do on a daily basis.

00:27:20.046 --> 00:27:22.346 A:middle
Now, as the name suggests,
the objective here is to go

00:27:22.346 --> 00:27:23.876 A:middle
on streaks of daily tasks

00:27:24.166 --> 00:27:26.556 A:middle
because doing something
every day helps it

00:27:26.656 --> 00:27:27.766 A:middle
to become a routine.

00:27:28.606 --> 00:27:30.676 A:middle
So, if you want to
get into the habit

00:27:30.676 --> 00:27:33.326 A:middle
of doing core-strengthening
exercises every day.

00:27:33.826 --> 00:27:37.286 A:middle
Which I should be doing or
learning how to play guitar,

00:27:37.796 --> 00:27:40.536 A:middle
or remembering to refill your
dog's water bowl or take him

00:27:40.536 --> 00:27:44.906 A:middle
for a walk, Streaks is going
to help you remember to do it.

00:27:45.356 --> 00:27:48.136 A:middle
My dogs have never been
so fit and hydrated.

00:27:48.376 --> 00:27:51.586 A:middle
They don't realize it, but
they totally love this app.

00:27:52.546 --> 00:27:55.126 A:middle
Of course, the whole point
here is that these are things

00:27:55.126 --> 00:27:57.836 A:middle
that people want to
do on a regular basis

00:27:57.836 --> 00:28:01.216 A:middle
but just can't seem
to remember to do it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.836 --> 00:28:01.216 A:middle
but just can't seem
to remember to do it.

00:28:01.366 --> 00:28:04.696 A:middle
So Streaks uses notifications
to keep people on track.

00:28:05.496 --> 00:28:08.116 A:middle
But these reminders are
only effective if they come

00:28:08.116 --> 00:28:09.646 A:middle
at just the right time.

00:28:10.206 --> 00:28:12.966 A:middle
They should arrive close to
when people are most likely

00:28:12.966 --> 00:28:14.066 A:middle
to take action.

00:28:15.256 --> 00:28:18.596 A:middle
Or, put another way, when
they're most actionable.

00:28:18.946 --> 00:28:23.656 A:middle
But how does Streaks
know when that is?

00:28:23.846 --> 00:28:25.766 A:middle
Well, at first, they don't.

00:28:26.496 --> 00:28:29.756 A:middle
To explain what it does, let's
look at a specific example.

00:28:30.556 --> 00:28:33.056 A:middle
Now I'm trying to get into
the habit of playing guitar.

00:28:33.796 --> 00:28:36.576 A:middle
And at a somewhat randomized
time towards the end of the day,

00:28:36.916 --> 00:28:38.676 A:middle
I'll get a reminder
to play guitar.

00:28:39.506 --> 00:28:42.426 A:middle
It doesn't arrive so late
that I might not have time

00:28:42.466 --> 00:28:44.796 A:middle
to play guitar or that
I'm already asleep.

00:28:45.646 --> 00:28:49.086 A:middle
But it's not so early that
I'm, say, still at work.

00:28:50.476 --> 00:28:51.576 A:middle
So, for simplicity's sake,

00:28:52.386 --> 00:28:54.856 A:middle
let's say I get the
notification at 7:00 PM.

00:28:55.566 --> 00:28:56.686 A:middle
Now, that's a bit early.

00:28:56.806 --> 00:29:00.386 A:middle
So I can tap a 30-minute
snooze button and keep delaying


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:56.806 --> 00:29:00.386 A:middle
So I can tap a 30-minute
snooze button and keep delaying

00:29:00.386 --> 00:29:02.246 A:middle
and delaying that notification

00:29:02.246 --> 00:29:04.296 A:middle
until I'm finally
able to play guitar.

00:29:05.076 --> 00:29:08.076 A:middle
And when I play guitar,
I mark that task

00:29:08.076 --> 00:29:12.036 A:middle
as complete in the app.

00:29:12.146 --> 00:29:13.506 A:middle
Streaks takes note of this time.

00:29:14.306 --> 00:29:17.616 A:middle
Day after day, each time I
mark that task as complete,

00:29:17.826 --> 00:29:20.766 A:middle
Streaks gets an increasingly
more accurate understanding

00:29:20.766 --> 00:29:22.926 A:middle
of when I typically play guitar.

00:29:23.916 --> 00:29:26.806 A:middle
Streaks uses that time
to schedule my reminders

00:29:27.136 --> 00:29:30.206 A:middle
to automatically arrive
at just the right moments.

00:29:30.766 --> 00:29:33.656 A:middle
It's such a simple
and elegant heuristic.

00:29:34.906 --> 00:29:37.646 A:middle
The actual timing
is 30 minutes prior

00:29:38.006 --> 00:29:41.056 A:middle
because obviously I can't just
drop everything at the drop

00:29:41.056 --> 00:29:42.596 A:middle
of a hat and start
playing guitar.

00:29:43.546 --> 00:29:46.076 A:middle
However, automatically
adjusting the timing

00:29:46.076 --> 00:29:48.836 A:middle
and notifications might not
always be the right choice.

00:29:49.526 --> 00:29:53.136 A:middle
Some tasks you want to do
at very specific times,

00:29:53.286 --> 00:29:55.706 A:middle
and Streaks gives you
that capability as well.

00:29:56.556 --> 00:29:58.776 A:middle
Or maybe you don't want
individual notifications,

00:29:58.776 --> 00:30:00.976 A:middle
you just want one
single daily reminder.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.776 --> 00:30:00.976 A:middle
you just want one
single daily reminder.

00:30:01.346 --> 00:30:03.096 A:middle
So Streaks gives
you that choice.

00:30:03.726 --> 00:30:07.106 A:middle
And you can disable
individual task notifications

00:30:07.966 --> 00:30:09.636 A:middle
or turn off notifications
altogether.

00:30:10.456 --> 00:30:13.156 A:middle
So by smartly choosing when
notifications are scheduled,

00:30:14.026 --> 00:30:17.536 A:middle
and giving users full
control over why and when they

00:30:17.536 --> 00:30:19.966 A:middle
like to be notified,
the reminders

00:30:19.966 --> 00:30:23.156 A:middle
that Streaks sends are less
likely to be disruptive,

00:30:24.076 --> 00:30:25.686 A:middle
ignored, and unwelcome.

00:30:27.156 --> 00:30:28.116 A:middle
Now the notifications

00:30:28.116 --> 00:30:31.056 A:middle
that Streaks sends
are actionable insofar

00:30:31.056 --> 00:30:33.396 A:middle
as they remind people to
perform what's typically a

00:30:33.396 --> 00:30:34.206 A:middle
physical task.

00:30:34.786 --> 00:30:37.866 A:middle
But making notifications
actionable also means quite

00:30:37.866 --> 00:30:40.796 A:middle
literally adding actions
to your notifications.

00:30:41.366 --> 00:30:44.266 A:middle
Now I encourage you to explore
how to make the notifications

00:30:44.266 --> 00:30:46.096 A:middle
that you send actionable.

00:30:47.076 --> 00:30:48.736 A:middle
Being able to quickly triage

00:30:48.736 --> 00:30:51.296 A:middle
from your wrist is a
very powerful thing.

00:30:51.956 --> 00:30:54.526 A:middle
Notifications can push
interactions to the people

00:30:54.696 --> 00:30:58.526 A:middle
who use your app, and they're
great for offering brief periods

00:30:58.526 --> 00:31:00.686 A:middle
of engagement to people
throughout the course


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.526 --> 00:31:00.686 A:middle
of engagement to people
throughout the course

00:31:00.686 --> 00:31:01.036 A:middle
of their day.

00:31:02.526 --> 00:31:05.876 A:middle
Now you can have up to four
actions in a notification.

00:31:06.306 --> 00:31:08.856 A:middle
And be sure to only show
actions that are truly relevant

00:31:08.856 --> 00:31:10.526 A:middle
to the content of
your notification.

00:31:11.886 --> 00:31:15.706 A:middle
Make sure that actions are
labeled clearly, succinctly,

00:31:15.916 --> 00:31:17.796 A:middle
and use action-oriented verbs.

00:31:18.516 --> 00:31:20.936 A:middle
And try to focus on actions
that can be completed

00:31:20.936 --> 00:31:24.106 A:middle
in one tap just one
tap and you're done.

00:31:24.586 --> 00:31:26.336 A:middle
However, sometimes one

00:31:26.336 --> 00:31:28.596 A:middle
or two additional steps
might be required.

00:31:29.176 --> 00:31:32.256 A:middle
Now multi-step flows will
bring people into your app,

00:31:32.256 --> 00:31:34.166 A:middle
and that used to be
a little bit painful

00:31:34.166 --> 00:31:36.596 A:middle
because apps would take a
little bit of time to load.

00:31:37.436 --> 00:31:40.856 A:middle
But in watchOS 3, when your
app's notification is displayed,

00:31:41.096 --> 00:31:42.936 A:middle
your app will be launched
in the background.

00:31:43.396 --> 00:31:45.456 A:middle
This gives you an opportunity

00:31:45.456 --> 00:31:49.676 A:middle
to make sure your app's data is
current and get your app ready

00:31:49.676 --> 00:31:50.736 A:middle
for people to show up.

00:31:51.466 --> 00:31:53.696 A:middle
So don't shy away from
taking people into your app

00:31:53.896 --> 00:31:55.156 A:middle
if that's what's necessary.

00:31:55.946 --> 00:31:59.046 A:middle
Now, speaking of taking
people into your app,

00:31:59.686 --> 00:32:03.376 A:middle
it's time to talk about apps.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.686 --> 00:32:03.376 A:middle
it's time to talk about apps.

00:32:03.616 --> 00:32:07.336 A:middle
watchOS 3 will profoundly
change how people experience

00:32:07.336 --> 00:32:08.656 A:middle
and interact with apps.

00:32:09.266 --> 00:32:11.486 A:middle
Let's take a look at the
most significant changes

00:32:11.796 --> 00:32:13.346 A:middle
and what they'll mean to you.

00:32:14.446 --> 00:32:15.466 A:middle
Let's start with the new Dock.

00:32:16.666 --> 00:32:19.986 A:middle
People can put up to 10 of their
favorite apps into the Dock,

00:32:20.496 --> 00:32:24.086 A:middle
and every app in the Dock is
kept in memory to make getting

00:32:24.146 --> 00:32:28.856 A:middle
from the Dock into an app fast.

00:32:29.786 --> 00:32:32.606 A:middle
And what's shown are
snapshots from each app.

00:32:33.386 --> 00:32:35.206 A:middle
These snapshots should
be designed

00:32:35.206 --> 00:32:37.196 A:middle
to be informative
and glanceable.

00:32:37.786 --> 00:32:41.026 A:middle
And snapshots from your app
can be regularly updated

00:32:41.316 --> 00:32:42.346 A:middle
to keep them current.

00:32:43.456 --> 00:32:45.626 A:middle
Apps in the Dock are
launched in the background

00:32:45.626 --> 00:32:46.716 A:middle
at least once an hour.

00:32:47.156 --> 00:32:49.786 A:middle
This lets you fetch new
data, update your app's UI,

00:32:49.876 --> 00:32:52.356 A:middle
and request that the
system takes a new snapshot

00:32:52.686 --> 00:32:54.906 A:middle
of your app if it's necessary.

00:32:55.976 --> 00:32:59.656 A:middle
And when your app is viewed in
the Dock, it'll be woken up so

00:32:59.656 --> 00:33:03.126 A:middle
that it can update its
snapshot if content is changed.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.656 --> 00:33:03.126 A:middle
that it can update its
snapshot if content is changed.

00:33:04.216 --> 00:33:06.736 A:middle
Now when someone puts
your app in the Dock,

00:33:07.216 --> 00:33:08.236 A:middle
you should be flattered.

00:33:08.896 --> 00:33:12.486 A:middle
Being in the Dock means that
your app contains information

00:33:12.486 --> 00:33:14.916 A:middle
that people want to be
regularly updated about.

00:33:15.796 --> 00:33:18.186 A:middle
Because of this, it's
important that the snapshots

00:33:18.186 --> 00:33:21.816 A:middle
of your app are not only
current but also relevant.

00:33:22.816 --> 00:33:26.056 A:middle
Now, in some situations,
showing people the last screen

00:33:26.056 --> 00:33:29.436 A:middle
that they saw when they were
using your app might not be

00:33:29.556 --> 00:33:30.276 A:middle
that relevant.

00:33:31.046 --> 00:33:35.036 A:middle
Fortunately, watchOS 3 provides
an API for navigating people

00:33:35.036 --> 00:33:37.156 A:middle
to a different screen
than the one

00:33:37.156 --> 00:33:38.326 A:middle
that they were last looking at.

00:33:39.066 --> 00:33:42.336 A:middle
So, for instance,
imagine a baseball app

00:33:42.336 --> 00:33:45.496 A:middle
that shows a list view of
current and upcoming games.

00:33:45.886 --> 00:33:48.996 A:middle
And of course, each of these
is tapable so that you can go

00:33:48.996 --> 00:33:51.396 A:middle
to a detail screen
about those games.

00:33:52.226 --> 00:33:56.716 A:middle
Okay. Now, imagine yourself
as a user of this app.

00:33:57.526 --> 00:33:59.446 A:middle
The last time you were in
the app, you were looking

00:33:59.446 --> 00:34:00.616 A:middle
at this particular game.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.446 --> 00:34:00.616 A:middle
at this particular game.

00:34:01.196 --> 00:34:04.226 A:middle
And when you exit out and
look at the app in the Dock,

00:34:04.916 --> 00:34:06.616 A:middle
you probably expect to continue

00:34:06.616 --> 00:34:08.476 A:middle
to see the details
about that game.

00:34:09.216 --> 00:34:11.735 A:middle
And when the game
ends, go Giants.

00:34:12.376 --> 00:34:15.356 A:middle
You probably still expect to see
this game in the detail view.

00:34:15.936 --> 00:34:17.376 A:middle
But after a little while,

00:34:17.636 --> 00:34:20.036 A:middle
the details about this
particular game become less

00:34:20.565 --> 00:34:21.766 A:middle
and less relevant.

00:34:22.306 --> 00:34:24.085 A:middle
You may have learned
about the final score

00:34:24.116 --> 00:34:26.755 A:middle
from a notification the app
sends, or from a friend,

00:34:27.246 --> 00:34:28.616 A:middle
on Twitter, in the news.

00:34:29.576 --> 00:34:33.896 A:middle
At some point, the content here
becomes completely irrelevant.

00:34:34.166 --> 00:34:36.226 A:middle
You're not interested
in that game at all.

00:34:36.226 --> 00:34:38.525 A:middle
Perhaps you're going
to be more interested

00:34:38.525 --> 00:34:40.446 A:middle
in seeing the next
day's schedule.

00:34:41.056 --> 00:34:44.286 A:middle
Or if your favorite team is
playing a new game that's

00:34:44.286 --> 00:34:46.266 A:middle
already started,
wouldn't you want

00:34:46.266 --> 00:34:48.255 A:middle
to see the details
about that game?

00:34:49.156 --> 00:34:51.386 A:middle
Now these are the sorts
of questions that you need

00:34:51.386 --> 00:34:53.516 A:middle
to be asking about your app.

00:34:54.056 --> 00:34:55.335 A:middle
And as you do so, I want you

00:34:55.335 --> 00:34:57.876 A:middle
to consider the following
best practices.

00:34:59.296 --> 00:35:01.786 A:middle
First and foremost,
your objective is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.296 --> 00:35:01.786 A:middle
First and foremost,
your objective is

00:35:01.786 --> 00:35:04.876 A:middle
to proactively anticipate
user interests and needs.

00:35:05.846 --> 00:35:08.896 A:middle
Put yourself in their
place and think it through.

00:35:09.946 --> 00:35:13.446 A:middle
Graphing events onto a timeline
is a very helpful technique

00:35:13.806 --> 00:35:14.546 A:middle
for doing this.

00:35:15.316 --> 00:35:18.556 A:middle
Plot out significant events
in time and then ask yourself,

00:35:19.056 --> 00:35:22.196 A:middle
"How do these events influence
what people would want to know?"

00:35:23.086 --> 00:35:25.886 A:middle
In the hypothetical baseball
app example I just went through,

00:35:25.886 --> 00:35:30.176 A:middle
I speculated that people will
want to see game details around

00:35:30.176 --> 00:35:32.346 A:middle
or during the times where
games are being played.

00:35:33.306 --> 00:35:36.106 A:middle
While, at other times, those
same people might want to know

00:35:36.106 --> 00:35:37.896 A:middle
about the overall
league schedule.

00:35:38.836 --> 00:35:42.736 A:middle
However, this is probably
a gross oversimplification.

00:35:43.446 --> 00:35:45.936 A:middle
Individual preferences
can have a big impact

00:35:45.936 --> 00:35:47.636 A:middle
on what's most relevant
to people.

00:35:48.386 --> 00:35:51.576 A:middle
For instance, a fair-weather
fan who only cares

00:35:51.576 --> 00:35:55.066 A:middle
about one team might expect to
see something totally different

00:35:55.066 --> 00:35:58.466 A:middle
than a hardcore baseball fanatic
who wants to follow every game.

00:35:59.056 --> 00:36:01.816 A:middle
And for other apps, other
contextual factors like time


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.056 --> 00:36:01.816 A:middle
And for other apps, other
contextual factors like time

00:36:01.816 --> 00:36:04.456 A:middle
of day and location
can have a huge impact

00:36:04.786 --> 00:36:06.136 A:middle
on what people want to see.

00:36:07.216 --> 00:36:10.266 A:middle
Now, as a general rule,
people don't always love it

00:36:10.266 --> 00:36:12.596 A:middle
when an app changes
in unpredictable ways

00:36:12.596 --> 00:36:13.966 A:middle
and the state isn't saved.

00:36:14.066 --> 00:36:16.586 A:middle
And it can be confusing
or disorienting.

00:36:17.076 --> 00:36:19.396 A:middle
So if you choose to navigate
people to a different view,

00:36:19.396 --> 00:36:22.296 A:middle
you want to do so in a way
that's logical and predictable.

00:36:22.996 --> 00:36:25.296 A:middle
The hope is that
people won't even stop

00:36:25.296 --> 00:36:26.646 A:middle
to realize what's going on.

00:36:27.056 --> 00:36:28.386 A:middle
But if they do, they
should be able

00:36:28.386 --> 00:36:31.276 A:middle
to make some really accurate
guesses about why the state

00:36:31.276 --> 00:36:34.166 A:middle
of your app's UI changes
from time to time.

00:36:35.186 --> 00:36:36.476 A:middle
And I would also recommend

00:36:36.476 --> 00:36:39.626 A:middle
against making the snapshot
look radically different

00:36:39.996 --> 00:36:41.036 A:middle
from your app.

00:36:41.606 --> 00:36:43.976 A:middle
This can make your app a
little bit less recognizable,

00:36:43.976 --> 00:36:45.106 A:middle
and may be harder to find.

00:36:45.696 --> 00:36:49.376 A:middle
Now it's totally fine to just
focus on some information

00:36:49.686 --> 00:36:52.016 A:middle
or maybe hide some stuff
that isn't as relevant

00:36:52.016 --> 00:36:53.246 A:middle
when your app is
shown in the Dock.

00:36:53.696 --> 00:36:55.656 A:middle
But, you know, if you want
to exaggerate the size

00:36:55.656 --> 00:36:58.226 A:middle
of certain things for
legibility that might be fine.

00:36:58.766 --> 00:37:01.066 A:middle
But don't make it look
completely different.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.766 --> 00:37:01.066 A:middle
But don't make it look
completely different.

00:37:02.186 --> 00:37:04.706 A:middle
Now next, avoid showing
things like alerts,

00:37:04.706 --> 00:37:08.186 A:middle
or confirmation dialogues, or
error states in your snapshot.

00:37:09.036 --> 00:37:10.156 A:middle
When seen out of context,

00:37:10.506 --> 00:37:12.836 A:middle
these sorts of screens
may not be very helpful.

00:37:12.836 --> 00:37:15.416 A:middle
And in fact, they might
be easily misinterpreted

00:37:15.416 --> 00:37:16.606 A:middle
or make no sense at all.

00:37:17.216 --> 00:37:18.376 A:middle
So, depending on the situation,

00:37:18.376 --> 00:37:20.836 A:middle
consider programmatically
dismissing these screens

00:37:21.166 --> 00:37:23.176 A:middle
after some period of time.

00:37:23.466 --> 00:37:27.446 A:middle
And lastly, optimize your app
interface for being displayed

00:37:27.446 --> 00:37:28.766 A:middle
in a miniaturized form.

00:37:29.576 --> 00:37:32.716 A:middle
Now, in the Dock, apps
get scaled down to --

00:37:32.716 --> 00:37:34.476 A:middle
and this is, like, just
a ballpark rough figure

00:37:34.476 --> 00:37:39.946 A:middle
but 62.4851% of their
full size UI.

00:37:39.946 --> 00:37:42.066 A:middle
You'll want to avoid
text and graphics

00:37:42.066 --> 00:37:44.466 A:middle
from becoming illegible
at this small size.

00:37:45.076 --> 00:37:47.666 A:middle
Now for this very reason, the
font weight for status bars

00:37:47.666 --> 00:37:50.366 A:middle
and a lot of text in the
built-in apps was increased

00:37:50.366 --> 00:37:51.836 A:middle
from regular to medium.

00:37:52.466 --> 00:37:55.276 A:middle
At smaller sizes, bolder
fonts are more legible.

00:37:56.336 --> 00:38:00.686 A:middle
And for really key information,
try using large format type.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:56.336 --> 00:38:00.686 A:middle
And for really key information,
try using large format type.

00:38:01.306 --> 00:38:04.036 A:middle
This may require removing some
stuff out of your interface

00:38:04.036 --> 00:38:07.376 A:middle
to make space, but that's not
such a bad thing to do anyway.

00:38:08.556 --> 00:38:11.616 A:middle
Now, by following these
guidelines, your apps will be

00:38:11.616 --> 00:38:13.786 A:middle
as glanceable as
possible in the Dock.

00:38:14.996 --> 00:38:16.226 A:middle
And speaking of glanceable,

00:38:16.806 --> 00:38:18.966 A:middle
some of you may be
wondering about Glances.

00:38:20.336 --> 00:38:24.026 A:middle
Glances were designed to be a
browsable collection of timely

00:38:24.026 --> 00:38:25.826 A:middle
and contextually-relevant
moments

00:38:25.826 --> 00:38:27.216 A:middle
from the user's favorite apps.

00:38:27.886 --> 00:38:30.776 A:middle
Not coincidentally, the Dock
serves essentially the same

00:38:30.776 --> 00:38:34.856 A:middle
purpose while simplifying the
overall platform experience.

00:38:35.706 --> 00:38:38.266 A:middle
In a way, Glances
evolved into the Dock.

00:38:38.816 --> 00:38:41.756 A:middle
And the Dock, in turn, made
Glances kind of redundant.

00:38:42.236 --> 00:38:44.096 A:middle
So they were removed
from watchOS.

00:38:44.836 --> 00:38:47.626 A:middle
With that said, the time and
thought that you may have put

00:38:47.626 --> 00:38:52.776 A:middle
into designing your Glances is
totally applicable to thinking

00:38:52.776 --> 00:38:55.986 A:middle
about how to design your app
to look great in the Dock.

00:38:57.516 --> 00:39:04.456 A:middle
Okay. So, the next big change
to apps on watchOS 3 is a simple


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:57.516 --> 00:39:04.456 A:middle
Okay. So, the next big change
to apps on watchOS 3 is a simple

00:39:04.456 --> 00:39:08.766 A:middle
but powerful improvement to how
people navigate within apps.

00:39:10.266 --> 00:39:13.546 A:middle
Most existing Apple Watch apps
are structured hierarchically.

00:39:14.006 --> 00:39:17.236 A:middle
Basically, a top-level list
and a bunch of detail screens.

00:39:17.626 --> 00:39:19.736 A:middle
Now that's not so
surprising because we tend

00:39:19.736 --> 00:39:21.536 A:middle
to organize data hierarchically.

00:39:22.196 --> 00:39:23.566 A:middle
Unfortunately, navigating

00:39:23.566 --> 00:39:26.346 A:middle
between those screens can
be inefficient as you have

00:39:26.396 --> 00:39:30.846 A:middle
to return to that top-level
view every single time.

00:39:31.066 --> 00:39:33.746 A:middle
So, for example, if I want
to get to those detail views,

00:39:33.746 --> 00:39:36.256 A:middle
I select an item,
drill in, go back,

00:39:36.446 --> 00:39:38.626 A:middle
select another item,
drill in, go back.

00:39:39.116 --> 00:39:40.136 A:middle
So forth and so on.

00:39:40.866 --> 00:39:43.686 A:middle
It's kind of like being in a
room in a house and you want

00:39:43.686 --> 00:39:45.176 A:middle
to get to the room
right next to you.

00:39:45.176 --> 00:39:47.866 A:middle
But in order to get there, you
have to go up a flight of stairs

00:39:48.076 --> 00:39:50.056 A:middle
and then back down
another flight of stairs.

00:39:50.606 --> 00:39:52.126 A:middle
It'd be so much more efficient

00:39:52.126 --> 00:39:54.926 A:middle
if there was just a
door to take you there.

00:39:55.666 --> 00:39:58.806 A:middle
So in watchOS 3, we now
have doors, I guess.

00:39:59.246 --> 00:40:02.836 A:middle
It's now possible to navigate
directly from one detail view


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.246 --> 00:40:02.836 A:middle
It's now possible to navigate
directly from one detail view

00:40:02.836 --> 00:40:06.626 A:middle
to another by swiping vertically
or using the Digital Crown.

00:40:07.556 --> 00:40:10.576 A:middle
Think of it like vertical paging
from one detail to the next.

00:40:11.466 --> 00:40:14.326 A:middle
Now if your app is already
structured hierarchically,

00:40:14.716 --> 00:40:17.146 A:middle
you should really consider
enabling this feature.

00:40:17.146 --> 00:40:19.376 A:middle
But one thing to point out is

00:40:19.376 --> 00:40:21.006 A:middle
that this behavior
will only work

00:40:21.316 --> 00:40:24.166 A:middle
when the detail screens are
not taller than the display.

00:40:25.106 --> 00:40:26.736 A:middle
So with the previous
version of Weather,

00:40:26.736 --> 00:40:29.886 A:middle
the 10-day forecast made
the screen a lot taller.

00:40:29.886 --> 00:40:33.076 A:middle
It was accessed by scrolling
down from today's forecast.

00:40:33.716 --> 00:40:36.436 A:middle
In the new version of Weather,
that information was pushed

00:40:36.436 --> 00:40:38.386 A:middle
to a child view so that
everything could fit

00:40:38.386 --> 00:40:39.236 A:middle
on screen at once.

00:40:40.096 --> 00:40:42.426 A:middle
So if you want to opt into
this behavior, you may have

00:40:42.426 --> 00:40:45.016 A:middle
to refactor your design
to make everything fit.

00:40:45.016 --> 00:40:48.906 A:middle
And for those of you
with a page-based app,

00:40:49.786 --> 00:40:53.006 A:middle
now is a really good time
to switch to hierarchy

00:40:53.006 --> 00:40:54.326 A:middle
or to consider doing so.

00:40:54.886 --> 00:40:57.506 A:middle
Navigating with the Digital
Crown is far more efficient

00:40:57.756 --> 00:41:00.426 A:middle
than swiping horizontally
from one page to another.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:57.756 --> 00:41:00.426 A:middle
than swiping horizontally
from one page to another.

00:41:00.996 --> 00:41:03.666 A:middle
And page-based apps do
not support hierarchy.

00:41:04.076 --> 00:41:06.196 A:middle
Obviously, that's not
a limitation here.

00:41:06.976 --> 00:41:09.456 A:middle
And having a top-level
list view of a lot

00:41:09.456 --> 00:41:11.876 A:middle
of detail items can
be really useful.

00:41:12.566 --> 00:41:16.076 A:middle
By moving from a page-based
structure to a hierarchical one,

00:41:16.456 --> 00:41:18.556 A:middle
our Weather App can
show the current high

00:41:18.556 --> 00:41:21.206 A:middle
and low temperatures for
multiple cities at once.

00:41:21.756 --> 00:41:22.826 A:middle
This is very handy.

00:41:24.766 --> 00:41:27.976 A:middle
Okay. Now, the third
big change for apps

00:41:28.026 --> 00:41:30.756 A:middle
on watchOS 3 relates
to stickiness.

00:41:31.416 --> 00:41:33.506 A:middle
Now besides just being
a lot of fun to say,

00:41:33.976 --> 00:41:36.686 A:middle
stickiness describes how
long an app will remain

00:41:36.686 --> 00:41:37.506 A:middle
in the foreground.

00:41:38.016 --> 00:41:41.676 A:middle
On watchOS 3, apps can
stick around for 8 minutes,

00:41:41.976 --> 00:41:43.786 A:middle
which is quite a bit
longer than before.

00:41:44.496 --> 00:41:46.156 A:middle
So when someone is
using your Watch app

00:41:46.456 --> 00:41:47.656 A:middle
and then drops their wrist,

00:41:47.986 --> 00:41:49.976 A:middle
your app will be the
first thing they see

00:41:49.976 --> 00:41:52.006 A:middle
when they raise their
wrist again as long

00:41:52.006 --> 00:41:54.026 A:middle
as they do so within 8 minutes.

00:41:54.856 --> 00:41:56.736 A:middle
In fact, with every
raise of the wrist,

00:41:56.736 --> 00:41:59.176 A:middle
that timer gets reset
back to 8 minutes.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:00.056 --> 00:42:03.706 A:middle
Now making apps stickier is
a really significant change.

00:42:04.276 --> 00:42:07.826 A:middle
Apple Watch apps are intended
to compliment activities

00:42:08.086 --> 00:42:11.686 A:middle
that can occur over many
minutes of time, or even hours.

00:42:12.236 --> 00:42:15.646 A:middle
But during those periods, the
Watch display can be asleep

00:42:15.736 --> 00:42:17.396 A:middle
for many minutes at a time.

00:42:18.246 --> 00:42:20.756 A:middle
So, one example might
be a grocery list app.

00:42:21.036 --> 00:42:24.666 A:middle
When shopping, most of your
time is spent checking prices,

00:42:24.666 --> 00:42:26.696 A:middle
reading labels, inspecting
produce,

00:42:27.036 --> 00:42:29.056 A:middle
trying to avoid crashing
into other shopping carts,

00:42:29.306 --> 00:42:30.036 A:middle
and trying to look cool.

00:42:30.836 --> 00:42:33.366 A:middle
There are so many activities
that are just like this.

00:42:33.766 --> 00:42:35.626 A:middle
They're what we might
call sessions

00:42:35.626 --> 00:42:37.516 A:middle
or session-based activities.

00:42:38.266 --> 00:42:42.806 A:middle
Cooking dinner, playing sports,
working out, getting directions.

00:42:43.366 --> 00:42:46.186 A:middle
These things all take
extended periods of time

00:42:46.466 --> 00:42:48.996 A:middle
in which people will
periodically check their watch

00:42:49.386 --> 00:42:50.056 A:middle
to stay on task.

00:42:51.196 --> 00:42:54.596 A:middle
Stronger stickiness puts you
immediately back into the app

00:42:54.836 --> 00:42:57.956 A:middle
where you left off, which
saves a lot of time.

00:42:59.186 --> 00:43:02.926 A:middle
Okay. Now, the fourth
major watchOS change


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:59.186 --> 00:43:02.926 A:middle
Okay. Now, the fourth
major watchOS change

00:43:03.116 --> 00:43:05.066 A:middle
for apps involves
letting people know

00:43:05.066 --> 00:43:07.426 A:middle
when it's okay to
drop their wrist.

00:43:08.416 --> 00:43:10.716 A:middle
When people initiate
a task in your app,

00:43:10.716 --> 00:43:13.156 A:middle
they expect to get
confirmation feedback.

00:43:13.986 --> 00:43:16.996 A:middle
Did the task succeed
or did it fail?

00:43:17.676 --> 00:43:21.536 A:middle
Unfortunately, providing
definitive success of failure,

00:43:21.816 --> 00:43:25.036 A:middle
conformation of success or
failure can take a while.

00:43:25.786 --> 00:43:28.386 A:middle
Slow networks, weak
Wi-Fi signal,

00:43:28.386 --> 00:43:32.256 A:middle
and long Bluetooth ranges might
create communication delays

00:43:35.956 --> 00:43:37.456 A:middle
or remote delays.

00:43:38.156 --> 00:43:40.906 A:middle
Apps that allow people to
control physical devices,

00:43:41.156 --> 00:43:44.766 A:middle
like garage doors or window
blinds, might be unable

00:43:44.766 --> 00:43:46.336 A:middle
to provide completion feedback

00:43:46.636 --> 00:43:49.846 A:middle
until those devices have
fully opened or closed.

00:43:50.746 --> 00:43:53.646 A:middle
And some services
such as food delivery

00:43:53.646 --> 00:43:57.096 A:middle
or ride-ordering apps
may involve communication

00:43:57.096 --> 00:43:57.976 A:middle
with other people.

00:43:58.456 --> 00:44:01.466 A:middle
And as we all know, people
do not always get back


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:58.456 --> 00:44:01.466 A:middle
And as we all know, people
do not always get back

00:44:01.466 --> 00:44:02.206 A:middle
to you promptly.

00:44:03.466 --> 00:44:06.836 A:middle
Now on an iPhone or a Mac,

00:44:07.156 --> 00:44:09.416 A:middle
you would ordinarily
keep people engaged

00:44:09.416 --> 00:44:12.256 A:middle
with your app while
you're trying to get them

00:44:12.256 --> 00:44:13.476 A:middle
that confirmation feedback.

00:44:14.396 --> 00:44:17.186 A:middle
Progress indicators are a way
to hold people's attention.

00:44:17.556 --> 00:44:19.536 A:middle
They make people
anticipate feedback.

00:44:20.156 --> 00:44:21.696 A:middle
They basically say,
"Hold on a second.

00:44:21.736 --> 00:44:23.436 A:middle
I'll be right with you."

00:44:23.586 --> 00:44:26.476 A:middle
But, however, it might
be more than a second.

00:44:26.926 --> 00:44:29.426 A:middle
All the while, the person
who's using your app has their

00:44:29.426 --> 00:44:30.126 A:middle
wrist raised.

00:44:30.506 --> 00:44:32.146 A:middle
Their shoulder starts
to get a little tired.

00:44:32.626 --> 00:44:34.606 A:middle
Seconds start to
feel like minutes.

00:44:35.046 --> 00:44:36.656 A:middle
It really starts to slow down.

00:44:37.536 --> 00:44:41.526 A:middle
So, to avoid this
situation on Apple Watch,

00:44:41.916 --> 00:44:45.426 A:middle
you should use an NSURL
background download task

00:44:45.696 --> 00:44:47.416 A:middle
to communicate with your server.

00:44:48.046 --> 00:44:49.286 A:middle
This does two things.

00:44:49.896 --> 00:44:52.526 A:middle
First, it helps to make sure
that you can communicate

00:44:52.526 --> 00:44:55.196 A:middle
to your server before
your app gets suspended.

00:44:55.806 --> 00:44:57.996 A:middle
And second, when
your server responds,

00:44:58.046 --> 00:45:00.976 A:middle
Apple Watch will
wake up your app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:58.046 --> 00:45:00.976 A:middle
Apple Watch will
wake up your app.

00:45:00.976 --> 00:45:04.156 A:middle
And then, in turn, you can
quickly run in the background

00:45:04.466 --> 00:45:06.856 A:middle
and do something like
send a local notification,

00:45:07.156 --> 00:45:10.526 A:middle
which is also new to watchOS
3, to provide feedback

00:45:10.526 --> 00:45:12.416 A:middle
to the person who's
using your app.

00:45:12.726 --> 00:45:17.176 A:middle
So, for example, say you're
working on a food-ordering app.

00:45:17.216 --> 00:45:20.306 A:middle
When someone places a
food order, your app needs

00:45:20.306 --> 00:45:22.636 A:middle
to make sure that the
restaurant can fulfill the order

00:45:22.976 --> 00:45:25.526 A:middle
and provide an estimated
delivery time.

00:45:26.256 --> 00:45:30.396 A:middle
You wouldn't want people to keep
waiting while your app figures

00:45:30.396 --> 00:45:31.246 A:middle
these things out.

00:45:32.026 --> 00:45:35.726 A:middle
Instead, it's way better to
provide immediate feedback

00:45:35.726 --> 00:45:37.796 A:middle
that their order has been
sent to the restaurant.

00:45:38.456 --> 00:45:40.986 A:middle
You can also let people know,
you also should let people know.

00:45:41.336 --> 00:45:43.266 A:middle
That once the restaurant
accepts the order

00:45:43.266 --> 00:45:45.406 A:middle
and provides an estimated
delivery time,

00:45:45.846 --> 00:45:47.816 A:middle
you'll send a final
confirmation to them

00:45:47.816 --> 00:45:50.076 A:middle
that the order has been
processed and is on its way.

00:45:51.356 --> 00:45:54.826 A:middle
Now, if you've done this
right, people should feel free

00:45:55.296 --> 00:45:59.746 A:middle
to drop their wrist, trusting
that your app is working hard


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:00.066 --> 00:46:02.236 A:middle
to complete the task that
you've assigned to it.

00:46:02.956 --> 00:46:07.236 A:middle
And if all goes well, you send
a local notification to people

00:46:07.236 --> 00:46:09.616 A:middle
to let them know that the
order was successfully placed

00:46:09.916 --> 00:46:10.906 A:middle
and it is on its way.

00:46:11.976 --> 00:46:15.376 A:middle
And if there's a problem,
clearly state what went wrong

00:46:15.376 --> 00:46:17.626 A:middle
and help people address
the issue

00:46:17.846 --> 00:46:19.946 A:middle
with minimal additional
interaction.

00:46:20.746 --> 00:46:24.096 A:middle
Now, the key to making
all of this work is trust.

00:46:25.006 --> 00:46:28.976 A:middle
People need to trust that your
app works, that it won't crash,

00:46:29.326 --> 00:46:31.836 A:middle
and that you'll make sure
that they stay informed

00:46:31.836 --> 00:46:34.876 A:middle
about whether the task
succeeded or failed.

00:46:35.746 --> 00:46:38.826 A:middle
And related to trust, you
never want to mislead people

00:46:38.826 --> 00:46:40.876 A:middle
into thinking that a
task is fully complete

00:46:41.246 --> 00:46:43.216 A:middle
if it's actually
still in progress.

00:46:43.816 --> 00:46:47.426 A:middle
That's basically lying, which
is not good for building trust.

00:46:47.816 --> 00:46:52.296 A:middle
Okay, so that was a lot
of new stuff about apps.

00:46:52.656 --> 00:46:55.366 A:middle
And there's still a little bit
more to cover, but I just wanted

00:46:55.366 --> 00:46:57.346 A:middle
to pause here for a
second and take stock.

00:46:57.916 --> 00:47:02.666 A:middle
We looked at the new Dock
UI and how to make your app


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:57.916 --> 00:47:02.666 A:middle
We looked at the new Dock
UI and how to make your app

00:47:02.666 --> 00:47:04.916 A:middle
as glanceable and
responsive as possible.

00:47:05.606 --> 00:47:07.586 A:middle
We saw how the Digital
Crown will make navigating

00:47:07.586 --> 00:47:08.856 A:middle
between detail screens

00:47:09.156 --> 00:47:11.746 A:middle
and hierarchical apps
way more efficient.

00:47:12.396 --> 00:47:14.936 A:middle
We learned how session-based
apps will benefit

00:47:14.976 --> 00:47:16.696 A:middle
from changes to app stickiness.

00:47:17.326 --> 00:47:19.096 A:middle
And we just saw how the ability

00:47:19.096 --> 00:47:21.526 A:middle
to schedule local notifications
while your app runs

00:47:21.526 --> 00:47:23.436 A:middle
in the background
can give the people

00:47:23.436 --> 00:47:26.416 A:middle
who use your app the
confidence to drop their wrist

00:47:26.746 --> 00:47:27.936 A:middle
to keep interactions quick.

00:47:28.786 --> 00:47:30.526 A:middle
Now we think that
these improvements

00:47:30.526 --> 00:47:34.426 A:middle
to watchOS will empower you to
create streamline user flows

00:47:34.866 --> 00:47:37.256 A:middle
that shorten user
interaction times.

00:47:37.686 --> 00:47:41.666 A:middle
Now, if the Apple Watch
team had stopped there,

00:47:42.046 --> 00:47:44.276 A:middle
this would have been a
really significant release.

00:47:44.666 --> 00:47:46.936 A:middle
I would have had plenty to
talk to you about today.

00:47:47.616 --> 00:47:48.746 A:middle
But they did not stop there.

00:47:49.066 --> 00:47:50.996 A:middle
They're like a bunch
of overachievers.

00:47:51.066 --> 00:47:53.776 A:middle
The kind of people who made me
look really bad in high school.

00:47:54.426 --> 00:47:57.646 A:middle
In watchOS 3, there's
some really cool new APIs

00:47:57.646 --> 00:48:00.436 A:middle
and frameworks to let you
do some amazing things.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:57.646 --> 00:48:00.436 A:middle
and frameworks to let you
do some amazing things.

00:48:01.056 --> 00:48:04.946 A:middle
For starters, watchOS 3 now
has SpriteKit and SceneKit,

00:48:05.326 --> 00:48:07.676 A:middle
our 2D and 3D graphics
frameworks.

00:48:08.216 --> 00:48:11.686 A:middle
SpriteKit and SceneKit let you
render and animate graphics.

00:48:12.476 --> 00:48:15.746 A:middle
They let you make elements
respond to gestures,

00:48:15.746 --> 00:48:18.286 A:middle
or to animate things
programmatically.

00:48:19.316 --> 00:48:21.296 A:middle
And you can implement
physics facts.

00:48:21.476 --> 00:48:22.626 A:middle
I mean, it's crazy.

00:48:22.986 --> 00:48:25.926 A:middle
Force fields, detect
collisions, and more.

00:48:26.736 --> 00:48:29.256 A:middle
Now you might think about these
things as being technologies

00:48:29.256 --> 00:48:32.566 A:middle
for games, but you can
use them in apps as well.

00:48:33.436 --> 00:48:36.296 A:middle
And watchOS 3 has
gesture support.

00:48:36.896 --> 00:48:40.116 A:middle
Up until now, touch input
was handled indirectly.

00:48:40.576 --> 00:48:43.386 A:middle
The controls and views that you
had in your app would respond

00:48:43.386 --> 00:48:45.006 A:middle
to touch events on your behalf.

00:48:45.426 --> 00:48:48.306 A:middle
Now, you have the ability to
do something totally custom.

00:48:49.136 --> 00:48:52.866 A:middle
So you can do something
custom with tap, or swipe,

00:48:53.896 --> 00:48:57.306 A:middle
or pan, or long press.

00:48:58.326 --> 00:49:03.576 A:middle
This one takes a
little bit of time.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:58.326 --> 00:49:03.576 A:middle
This one takes a
little bit of time.

00:49:03.746 --> 00:49:05.936 A:middle
Okay, in watchOS 3,
you now have access

00:49:05.936 --> 00:49:07.596 A:middle
to raw Digital Crown events.

00:49:08.166 --> 00:49:11.286 A:middle
You can use this data to
alter the color, dimensions,

00:49:11.286 --> 00:49:13.926 A:middle
and other visual
properties of UI elements.

00:49:14.476 --> 00:49:16.216 A:middle
Or, you can use the
Digital Crown

00:49:16.216 --> 00:49:18.776 A:middle
for changing selection
or modifying values.

00:49:19.556 --> 00:49:22.926 A:middle
So, what can you do with
all of these capabilities?

00:49:23.676 --> 00:49:25.786 A:middle
Well, for starters,
many of you have wanted

00:49:25.786 --> 00:49:28.656 A:middle
to visualize data
using a ring or an arc.

00:49:29.206 --> 00:49:30.896 A:middle
With SpriteKit, you
can draw an element

00:49:30.896 --> 00:49:33.556 A:middle
like this programmatically so
that you can easily animate

00:49:33.556 --> 00:49:36.126 A:middle
between any two arbitrary
values.

00:49:37.116 --> 00:49:38.936 A:middle
You can use the default
ease-in curve

00:49:38.936 --> 00:49:41.866 A:middle
which provides a really
nice ease in and ease out.

00:49:42.926 --> 00:49:45.736 A:middle
Or, you can do something
custom with ease-in curves

00:49:45.736 --> 00:49:48.566 A:middle
for a bouncy animation,
or really any kind

00:49:48.566 --> 00:49:49.656 A:middle
of animation that you'd like.

00:49:50.296 --> 00:49:52.536 A:middle
There's a ton of open
source ease-in curves made

00:49:52.536 --> 00:49:53.936 A:middle
by the very generous people

00:49:53.936 --> 00:49:55.396 A:middle
in the SpriteKit
developer community.

00:49:55.396 --> 00:49:59.306 A:middle
And you can even do things
like modify the fill color

00:49:59.306 --> 00:50:01.626 A:middle
of the rings to reflect
the current value.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:59.306 --> 00:50:01.626 A:middle
of the rings to reflect
the current value.

00:50:03.046 --> 00:50:06.386 A:middle
Data visualization, like charts
and graphs, can really come

00:50:06.386 --> 00:50:07.686 A:middle
to life with animation.

00:50:08.366 --> 00:50:10.156 A:middle
By drawing this chart
programmatically,

00:50:10.436 --> 00:50:13.466 A:middle
we can animate the built-in
to add visual interest,

00:50:14.116 --> 00:50:16.796 A:middle
or we can use animation
to draw people's attention

00:50:16.796 --> 00:50:18.476 A:middle
to a particular part
of the chart.

00:50:19.336 --> 00:50:20.856 A:middle
SpriteKit properties
are mutable,

00:50:20.856 --> 00:50:23.066 A:middle
so you can easily
repurpose one chart

00:50:23.346 --> 00:50:25.926 A:middle
to display different
properties based on user input.

00:50:26.866 --> 00:50:27.966 A:middle
Or, perhaps you want

00:50:27.966 --> 00:50:31.126 A:middle
to let people inspect
different values along the graph

00:50:31.186 --> 00:50:32.176 A:middle
with a pan gesture.

00:50:32.756 --> 00:50:35.596 A:middle
Totally. Or, better still,

00:50:35.596 --> 00:50:37.706 A:middle
you can let people
use the Digital Crown

00:50:38.036 --> 00:50:39.066 A:middle
to do the same thing.

00:50:39.756 --> 00:50:42.386 A:middle
Or, let people zoom
into the chart.

00:50:42.996 --> 00:50:45.846 A:middle
Or, maybe let people scroll.

00:50:45.846 --> 00:50:50.236 A:middle
And since you have full
control over the Digital Crown

00:50:50.236 --> 00:50:52.646 A:middle
and how the graph responds,
you can control how fast

00:50:52.646 --> 00:50:55.676 A:middle
or slowly things happen
in response to rotation.

00:50:56.456 --> 00:50:57.496 A:middle
Now, I could go on.

00:50:57.846 --> 00:51:00.166 A:middle
This is a lot of fun to just
try to think about this stuff,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:57.846 --> 00:51:00.166 A:middle
This is a lot of fun to just
try to think about this stuff,

00:51:00.626 --> 00:51:02.856 A:middle
but that would take all of
the fun out of it for you.

00:51:03.756 --> 00:51:06.266 A:middle
Now, I encourage you to
learn more about SpriteKit

00:51:06.266 --> 00:51:09.456 A:middle
and SceneKit, and experiment
with using these technologies

00:51:09.766 --> 00:51:12.906 A:middle
to create richer and more
meaningful experiences.

00:51:13.666 --> 00:51:15.066 A:middle
But just remember,

00:51:15.876 --> 00:51:18.846 A:middle
with increased freedom comes
increased responsibility.

00:51:19.906 --> 00:51:23.506 A:middle
Animating something just because
it looks cool is really not a

00:51:23.506 --> 00:51:24.146 A:middle
good reason.

00:51:24.806 --> 00:51:28.196 A:middle
When used well, animation
helps communicate meaning more

00:51:28.196 --> 00:51:31.366 A:middle
quickly, and thereby
shortens interaction times.

00:51:32.066 --> 00:51:35.966 A:middle
Similarly, making a graph
interactive should provide a

00:51:36.016 --> 00:51:38.926 A:middle
richer and more informative
user experience,

00:51:39.796 --> 00:51:43.816 A:middle
and ideally reduce the need for
more complicated or dense UIs.

00:51:45.696 --> 00:51:49.716 A:middle
Okay. So, we've covered a lot
of ground today, but I did want

00:51:49.716 --> 00:51:51.636 A:middle
to leave you with
one final thought

00:51:51.946 --> 00:51:54.036 A:middle
about designing your watch app.

00:51:55.486 --> 00:51:59.696 A:middle
Making a great Apple Watch
experience requires keeping

00:51:59.786 --> 00:52:00.756 A:middle
things simple.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:59.786 --> 00:52:00.756 A:middle
things simple.

00:52:01.736 --> 00:52:05.286 A:middle
But making something simple
is not so simple to do.

00:52:06.106 --> 00:52:08.146 A:middle
And bonus points if you
know where this is from.

00:52:09.266 --> 00:52:12.476 A:middle
Keeping things simple
involves making hard choices

00:52:12.766 --> 00:52:14.586 A:middle
about what your app will do.

00:52:15.246 --> 00:52:17.066 A:middle
It means saying no to a lot

00:52:17.066 --> 00:52:19.216 A:middle
of really interesting-sounding
ideas.

00:52:20.016 --> 00:52:22.906 A:middle
But just because you can
do something does not mean

00:52:22.906 --> 00:52:23.626 A:middle
that you should.

00:52:24.706 --> 00:52:28.286 A:middle
Keeping things simple
also means thinking deeply

00:52:28.446 --> 00:52:31.276 A:middle
about the journey that people
take throughout the course

00:52:31.276 --> 00:52:31.766 A:middle
of their day.

00:52:32.536 --> 00:52:35.046 A:middle
People will experience
your app over time.

00:52:35.516 --> 00:52:38.566 A:middle
And the way that you design
your app should be a reflection

00:52:38.566 --> 00:52:39.056 A:middle
of this.

00:52:39.746 --> 00:52:42.906 A:middle
Think less in terms of
static screens and more

00:52:42.906 --> 00:52:44.526 A:middle
in terms of user flows.

00:52:45.436 --> 00:52:48.506 A:middle
Account for the fact that
these flows are not continuous,

00:52:48.916 --> 00:52:50.676 A:middle
uninterrupted experiences.

00:52:51.216 --> 00:52:54.506 A:middle
People will drop in at arbitrary
times throughout the day.

00:52:55.066 --> 00:52:58.996 A:middle
And when they do, they'll always
expect your app to be current

00:52:59.586 --> 00:53:02.296 A:middle
and relevant to their
constantly-shifting needs.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:59.586 --> 00:53:02.296 A:middle
and relevant to their
constantly-shifting needs.

00:53:03.316 --> 00:53:06.076 A:middle
Your app should anticipate
what people want to do

00:53:06.076 --> 00:53:10.276 A:middle
at any given moment, and attempt
to proactively offer information

00:53:11.606 --> 00:53:14.416 A:middle
and functionality that's
contextually relevant

00:53:14.536 --> 00:53:15.286 A:middle
and timely.

00:53:16.036 --> 00:53:18.696 A:middle
Now doing that right
is not so simple.

00:53:20.116 --> 00:53:23.346 A:middle
Designing for Apple Watch
is different than designing

00:53:23.346 --> 00:53:27.766 A:middle
for an iPhone, an
iPad, Apple TV, or Mac.

00:53:28.986 --> 00:53:32.226 A:middle
What we know about
designing and building apps

00:53:32.706 --> 00:53:35.346 A:middle
for these devices has
shaped our notions

00:53:35.346 --> 00:53:40.046 A:middle
about how complex apps should
be, how people navigate them,

00:53:40.526 --> 00:53:44.176 A:middle
and how much time they're
willing to engage with your app.

00:53:45.096 --> 00:53:47.346 A:middle
Try to recognize and
challenge your own

00:53:47.346 --> 00:53:49.026 A:middle
deeply-rooted assumptions.

00:53:49.766 --> 00:53:51.496 A:middle
This is easier said than done.

00:53:51.636 --> 00:53:55.556 A:middle
I know. But this is a crucial
step towards making a really

00:53:55.556 --> 00:53:57.676 A:middle
great watch app.

00:53:57.736 --> 00:54:00.766 A:middle
Now, for Apple Watch,
perhaps the best advice


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:57.736 --> 00:54:00.766 A:middle
Now, for Apple Watch,
perhaps the best advice

00:54:00.836 --> 00:54:03.466 A:middle
that I can offer you
is to think in terms

00:54:03.466 --> 00:54:05.856 A:middle
of features and not apps.

00:54:06.726 --> 00:54:10.486 A:middle
Making something great for Apple
Watch may involve offering just

00:54:10.876 --> 00:54:12.296 A:middle
one feature.

00:54:13.236 --> 00:54:15.966 A:middle
Just Press Record is
essentially just one feature.

00:54:16.296 --> 00:54:17.936 A:middle
The complication is
the Record button,

00:54:17.936 --> 00:54:21.236 A:middle
and the app is the recording
interface and Stop button.

00:54:21.866 --> 00:54:22.816 A:middle
It works great.

00:54:23.296 --> 00:54:26.736 A:middle
And I literally just described
the app in one sentence.

00:54:28.036 --> 00:54:30.846 A:middle
Two seconds goes by in a flash.

00:54:31.676 --> 00:54:33.786 A:middle
There's nothing simple
about designing

00:54:33.786 --> 00:54:35.646 A:middle
for such brief interactions.

00:54:36.246 --> 00:54:38.036 A:middle
But I hope the concepts
and techniques

00:54:38.136 --> 00:54:41.936 A:middle
that we discussed today will
empower you to do just that.

00:54:43.096 --> 00:54:46.236 A:middle
And I'm really excited to
see what you can do with all

00:54:46.236 --> 00:54:48.206 A:middle
of the new capabilities
in watchOS 3.

00:54:48.816 --> 00:54:50.716 A:middle
A lot of people worked
hard on this release,

00:54:51.016 --> 00:54:53.726 A:middle
and all of that work was in
the service of helping you

00:54:53.726 --> 00:54:57.456 A:middle
to build more innovative,
delightful,

00:54:57.456 --> 00:55:00.166 A:middle
and platform-defining
experiences.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:57.456 --> 00:55:00.166 A:middle
and platform-defining
experiences.

00:55:01.246 --> 00:55:04.136 A:middle
Okay. So for more information
about what we covered today,

00:55:04.456 --> 00:55:05.716 A:middle
please check out the video page

00:55:05.716 --> 00:55:07.236 A:middle
where there's a ton
of extra resources.

00:55:07.926 --> 00:55:09.736 A:middle
Again, definitely go and check

00:55:09.736 --> 00:55:11.916 A:middle
out the watchOS Human
Interface Guidelines.

00:55:12.276 --> 00:55:14.556 A:middle
There's a ton of really
great resources there.

00:55:14.716 --> 00:55:17.536 A:middle
And we're going to continue
updating this over the summer,

00:55:17.536 --> 00:55:18.886 A:middle
so check in regularly.

00:55:19.436 --> 00:55:22.596 A:middle
We also have a lot of great
Watch engineering sessions.

00:55:22.956 --> 00:55:24.426 A:middle
I would definitely
recommend going and checking

00:55:24.426 --> 00:55:27.126 A:middle
out SpriteKit one and watching
some of the videos of the ones

00:55:27.126 --> 00:55:29.336 A:middle
that have already happened.

00:55:29.336 --> 00:55:32.136 A:middle
And this year, we had a lot of
really good design sessions.

00:55:32.136 --> 00:55:33.136 A:middle
Some of them are still to come.

00:55:33.576 --> 00:55:36.386 A:middle
I highly recommend Inclusive
App Design, which will help you

00:55:36.656 --> 00:55:40.486 A:middle
to design for accessibility
and to be really great

00:55:40.486 --> 00:55:41.666 A:middle
for people around the world.

00:55:41.796 --> 00:55:44.256 A:middle
I also recommend the
video this morning

00:55:44.386 --> 00:55:46.076 A:middle
about Typography and Fonts.

00:55:46.076 --> 00:55:47.726 A:middle
And there's one more
design session

00:55:48.016 --> 00:55:50.696 A:middle
about Iterative UI Designs
that you can take your ideas

00:55:50.946 --> 00:55:53.626 A:middle
and refine them and come up with
something that's really awesome.

00:55:53.816 --> 00:55:55.816 A:middle
With that, thank you
very much for your time.

00:55:57.516 --> 00:56:01.500 A:middle
[ Applause ]

