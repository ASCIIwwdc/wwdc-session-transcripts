WEBVTT

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:28.516 --> 00:00:30.576 A:middle
[ Applause ]

00:00:31.076 --> 00:00:32.006 A:middle
&gt;&gt; So, good morning, everyone.

00:00:33.966 --> 00:00:35.016 A:middle
So, my name is Tom Witkin,

00:00:35.016 --> 00:00:37.136 A:middle
and I'm an Engineer here
at Apple on watchOS.

00:00:37.486 --> 00:00:39.006 A:middle
And this morning, we're
going to be talking

00:00:39.006 --> 00:00:40.316 A:middle
about building quick
interactions

00:00:40.316 --> 00:00:41.736 A:middle
into your Apple Watch apps.

00:00:42.336 --> 00:00:44.186 A:middle
And first off, we'd like to
start with the question -

00:00:44.946 --> 00:00:46.936 A:middle
what do we even mean
by a quick interaction?

00:00:47.676 --> 00:00:49.656 A:middle
So I'm sure that many of
you have developed apps

00:00:49.656 --> 00:00:51.636 A:middle
for iOS or for Mac OS.

00:00:52.176 --> 00:00:54.786 A:middle
And on those platforms, we're
typically measuring the amount

00:00:54.786 --> 00:00:57.416 A:middle
of time a user is spending
in your applications in terms

00:00:57.416 --> 00:00:59.056 A:middle
of minutes or even hours.

00:00:59.456 --> 00:01:01.476 A:middle
But in watchOS, it's
just not the case.

00:00:59.456 --> 00:01:01.476 A:middle
But in watchOS, it's
just not the case.

00:01:01.476 --> 00:01:04.296 A:middle
A user wants to be able to raise
their wrist and quickly get

00:01:04.336 --> 00:01:07.036 A:middle
to specific information or
perform a certain action,

00:01:07.336 --> 00:01:08.606 A:middle
and then drop their
wrist and go back

00:01:08.606 --> 00:01:09.506 A:middle
to whatever they were doing.

00:01:09.736 --> 00:01:12.076 A:middle
And so the interaction
model is entirely different.

00:01:12.746 --> 00:01:13.626 A:middle
So here are some examples

00:01:13.626 --> 00:01:15.536 A:middle
of what a quick interaction
on Apple Watch are.

00:01:17.216 --> 00:01:23.516 A:middle
So, for example, starting a
timer, or checking the weather,

00:01:27.396 --> 00:01:29.576 A:middle
or marking an item
off your grocery list.

00:01:30.156 --> 00:01:33.366 A:middle
And so we think that these are
some of the prototypical types

00:01:33.366 --> 00:01:34.886 A:middle
of interactions on Apple Watch,

00:01:34.886 --> 00:01:36.766 A:middle
and there are some key
philosophies behind these

00:01:36.766 --> 00:01:37.806 A:middle
that you've probably
heard this week.

00:01:38.816 --> 00:01:40.686 A:middle
So, first off, apps
on Apple Watch --

00:01:40.826 --> 00:01:41.796 A:middle
they need to be glanceable.

00:01:41.906 --> 00:01:43.406 A:middle
Which means that,
with just a glance,

00:01:43.696 --> 00:01:46.046 A:middle
your users should be able to get
the information that they need.

00:01:46.676 --> 00:01:48.546 A:middle
Apps need to be actionable,

00:01:48.846 --> 00:01:51.296 A:middle
which means that your users
should be able to make quick

00:01:51.536 --> 00:01:52.816 A:middle
and well-informed decisions.

00:01:53.196 --> 00:01:55.226 A:middle
And lastly, they
should be responsive.

00:01:55.286 --> 00:01:57.066 A:middle
You should never be
making your users wait.

00:01:57.066 --> 00:01:59.866 A:middle
And if you're interested in
learning more about these,

00:01:59.866 --> 00:02:01.166 A:middle
I highly recommend
that you check

00:01:59.866 --> 00:02:01.166 A:middle
I highly recommend
that you check

00:02:01.166 --> 00:02:03.716 A:middle
out the Designing Great Apple
Watch Experiences talk this

00:02:03.716 --> 00:02:05.466 A:middle
afternoon, or watch the video

00:02:05.466 --> 00:02:08.726 A:middle
of the What's New in
watchOS 3 session.

00:02:09.746 --> 00:02:11.996 A:middle
And so now we know a
bit about what we mean

00:02:11.996 --> 00:02:12.936 A:middle
by a quick interaction.

00:02:13.356 --> 00:02:17.116 A:middle
But how long is a quick
interaction on Apple Watch?

00:02:17.986 --> 00:02:19.896 A:middle
And so we think that
the ideal length

00:02:19.896 --> 00:02:23.586 A:middle
of interaction is
only 2 seconds long.

00:02:23.946 --> 00:02:24.666 A:middle
So, 2 seconds.

00:02:24.666 --> 00:02:25.816 A:middle
That's not very long at all.

00:02:25.816 --> 00:02:29.186 A:middle
And so you have to be very
deliberate in how you design

00:02:29.246 --> 00:02:30.626 A:middle
and build your applications.

00:02:30.926 --> 00:02:32.896 A:middle
But we think that it's
more than possible,

00:02:32.896 --> 00:02:35.236 A:middle
especially with all the
new features and API

00:02:35.436 --> 00:02:37.276 A:middle
that we've added in watchOS 3.

00:02:37.946 --> 00:02:39.236 A:middle
And so that's how we're
going to start off --

00:02:39.236 --> 00:02:41.476 A:middle
is by talking about these
new features and API.

00:02:41.476 --> 00:02:43.506 A:middle
And then afterward,
we're going to look

00:02:43.506 --> 00:02:46.036 A:middle
at some practical techniques
that you can use in your apps

00:02:46.236 --> 00:02:48.206 A:middle
to build these types
of quick interactions.

00:02:48.846 --> 00:02:51.046 A:middle
And with that, I'd like to hand
the stage over to my colleague

00:02:51.266 --> 00:02:52.836 A:middle
to talk through the
new features and API.

00:02:53.031 --> 00:02:55.031 A:middle
[ Applause ]

00:02:55.046 --> 00:02:55.546 A:middle
&gt;&gt; Thanks, Tom.

00:02:56.216 --> 00:02:56.896 A:middle
Hi, everybody.

00:02:57.046 --> 00:02:57.786 A:middle
My name is Miguel.

00:02:58.536 --> 00:03:01.246 A:middle
I'll be giving you a quick
overview of the new APIs

00:02:58.536 --> 00:03:01.246 A:middle
I'll be giving you a quick
overview of the new APIs

00:03:01.246 --> 00:03:03.956 A:middle
that we're introducing
in WatchKit to allow you

00:03:03.956 --> 00:03:05.406 A:middle
to implement quick interactions.

00:03:05.906 --> 00:03:10.296 A:middle
I'll be talking about five
sets of API that allow you

00:03:10.296 --> 00:03:12.836 A:middle
to make your apps glanceable,
actionable, and responsive.

00:03:13.976 --> 00:03:17.266 A:middle
The first has to do with
giving you more access

00:03:17.266 --> 00:03:18.336 A:middle
to new kinds of input.

00:03:19.116 --> 00:03:20.436 A:middle
You can now do gestures

00:03:20.436 --> 00:03:22.176 A:middle
with gesture recognizers
in your apps.

00:03:23.686 --> 00:03:24.806 A:middle
We are giving you access

00:03:24.806 --> 00:03:27.036 A:middle
to the rotation events
in the Digital Crown.

00:03:28.696 --> 00:03:31.796 A:middle
And we're also having
three other areas.

00:03:32.366 --> 00:03:35.006 A:middle
One is for improved
table navigation,

00:03:35.546 --> 00:03:38.456 A:middle
the support for the new
user notification framework,

00:03:38.816 --> 00:03:41.526 A:middle
as well as integration with
SpriteKit and SceneKit.

00:03:42.446 --> 00:03:43.496 A:middle
So let's jump right in.

00:03:44.196 --> 00:03:46.376 A:middle
I'll be giving you an
overview of the API,

00:03:46.376 --> 00:03:49.326 A:middle
and then Tom will come back
on stage and show you examples

00:03:49.326 --> 00:03:51.526 A:middle
of how he combines
multiple of these APIs.

00:03:52.536 --> 00:03:56.236 A:middle
So if you have used
gesture recognizers in iOS,

00:03:56.236 --> 00:03:58.876 A:middle
you pretty much already
know all there is to know

00:03:58.876 --> 00:04:01.246 A:middle
for gesture recognition
in watchOS.

00:03:58.876 --> 00:04:01.246 A:middle
for gesture recognition
in watchOS.

00:04:01.246 --> 00:04:04.546 A:middle
If you haven't, gesture
recognizers are objects

00:04:05.086 --> 00:04:07.596 A:middle
that help you parse the
lower-level touch events

00:04:07.656 --> 00:04:09.886 A:middle
into recognizable gestures.

00:04:10.516 --> 00:04:13.246 A:middle
We're writing support
for four recognizers.

00:04:13.276 --> 00:04:18.736 A:middle
Two discretes -- the
SwipeGesture, the TapGesture.

00:04:18.926 --> 00:04:20.995 A:middle
And two continuous
gesture recognizers --

00:04:22.996 --> 00:04:27.786 A:middle
the PanGesture, and
the LongPress.

00:04:29.106 --> 00:04:32.286 A:middle
So the way you use this, like
most of the development you do

00:04:32.286 --> 00:04:35.316 A:middle
in WatchKit, is an interface
builder in your storyboard.

00:04:36.106 --> 00:04:38.826 A:middle
You are dragging the
objects into your interface.

00:04:39.406 --> 00:04:40.836 A:middle
So if you look at the library,

00:04:40.836 --> 00:04:43.546 A:middle
you can now see four
instances of the recognizers.

00:04:43.926 --> 00:04:46.316 A:middle
These are dragged into
the elements that you want

00:04:46.716 --> 00:04:48.336 A:middle
to have gestures
attached to them.

00:04:48.996 --> 00:04:51.226 A:middle
And you do the configuration
interface builder

00:04:51.226 --> 00:04:52.086 A:middle
in the inspector.

00:04:53.376 --> 00:04:56.426 A:middle
The last thing you do is drag
the action of the recognizer

00:04:56.426 --> 00:04:58.726 A:middle
into a function within
your code.

00:04:59.186 --> 00:05:00.686 A:middle
This is a function
that's invoked

00:04:59.186 --> 00:05:00.686 A:middle
This is a function
that's invoked

00:05:00.686 --> 00:05:02.766 A:middle
when the gesture is
recognized by the system.

00:05:03.436 --> 00:05:04.256 A:middle
As you can see, one

00:05:04.256 --> 00:05:07.066 A:middle
of the parameters is the
gesture recognizer itself.

00:05:07.916 --> 00:05:10.586 A:middle
From it, you can
now get the location

00:05:11.256 --> 00:05:13.286 A:middle
where the gesture
was recognized,

00:05:13.286 --> 00:05:15.476 A:middle
the bounds of the object,
as well as the state

00:05:15.476 --> 00:05:16.646 A:middle
that the gesture is in.

00:05:18.076 --> 00:05:20.686 A:middle
So, a few words about
the state of gestures.

00:05:21.826 --> 00:05:25.366 A:middle
Gestures begin in the possible
state before they're recognized,

00:05:25.366 --> 00:05:26.506 A:middle
and they can transition either

00:05:26.506 --> 00:05:28.476 A:middle
to a recognized or
a failed state.

00:05:28.986 --> 00:05:30.836 A:middle
When you're dealing
with discrete gestures,

00:05:30.886 --> 00:05:33.256 A:middle
you really don't think too
much in terms of states.

00:05:33.606 --> 00:05:36.616 A:middle
All you need to know is that
when the gesture is recognized,

00:05:36.616 --> 00:05:37.996 A:middle
your action method is called.

00:05:39.186 --> 00:05:42.066 A:middle
This is slightly different
from continuous gestures.

00:05:42.796 --> 00:05:44.806 A:middle
They also begin in
the possible state.

00:05:45.006 --> 00:05:48.766 A:middle
But as their name
implies, they progress

00:05:48.766 --> 00:05:51.456 A:middle
over multiple updates
into your code.

00:05:51.456 --> 00:05:54.986 A:middle
So just assume that your action
method will be called multiple

00:05:54.986 --> 00:05:58.526 A:middle
times as your gesture is
changing, giving you a chance

00:05:58.526 --> 00:06:00.116 A:middle
to update your user interface.

00:05:58.526 --> 00:06:00.116 A:middle
to update your user interface.

00:06:01.616 --> 00:06:04.836 A:middle
Some tips for using
gestures in watchOS.

00:06:05.966 --> 00:06:09.016 A:middle
We recommend that
you attach them

00:06:09.016 --> 00:06:11.236 A:middle
to the group elements
rather than the controls.

00:06:11.236 --> 00:06:13.196 A:middle
You can do that, but you
might conflict with some

00:06:13.196 --> 00:06:15.516 A:middle
of the gestures that are
already present in the controls.

00:06:16.366 --> 00:06:19.126 A:middle
And remember that you have
a smaller screen real estate

00:06:19.126 --> 00:06:21.606 A:middle
in the Watch app,
so the groups tend

00:06:21.606 --> 00:06:24.226 A:middle
to be the bigger interface
elements in your application.

00:06:25.866 --> 00:06:29.086 A:middle
You can still set dependency
relationships between gestures.

00:06:29.826 --> 00:06:33.026 A:middle
But for watchOS, this is only
possible in the inspector

00:06:33.026 --> 00:06:35.656 A:middle
and interface builder.

00:06:35.806 --> 00:06:37.596 A:middle
And be mindful that some

00:06:37.596 --> 00:06:39.726 A:middle
of the system gestures
will take precedence

00:06:39.726 --> 00:06:41.266 A:middle
over the gestures
that you will define.

00:06:42.326 --> 00:06:45.236 A:middle
For example, if you
have an element

00:06:45.236 --> 00:06:48.876 A:middle
that already has scrolling
enabled and you're trying

00:06:48.876 --> 00:06:51.976 A:middle
to attach a SwipeDown gesture,
that will not be recognized.

00:06:51.976 --> 00:06:53.336 A:middle
The scrolling will
take precedence.

00:06:53.886 --> 00:06:56.276 A:middle
The same thing for the
ForceTouch and the LongPress.

00:06:58.226 --> 00:07:00.166 A:middle
Now let's move onto our
second input element --

00:06:58.226 --> 00:07:00.166 A:middle
Now let's move onto our
second input element --

00:07:00.166 --> 00:07:01.416 A:middle
the Digital Crown.

00:07:02.346 --> 00:07:05.596 A:middle
This is a unique element
for the Apple Watch

00:07:05.736 --> 00:07:09.726 A:middle
that allows your users quick and
precise control of their input.

00:07:10.166 --> 00:07:12.976 A:middle
You've had access to the
Crown since watchOS 2

00:07:13.356 --> 00:07:15.466 A:middle
through the WKInterfacePicker
object.

00:07:16.856 --> 00:07:19.176 A:middle
To use that, you
are giving us a list

00:07:19.176 --> 00:07:21.406 A:middle
of picker items and
setting a style.

00:07:22.866 --> 00:07:25.246 A:middle
And WatchKit takes care of
drawing the element for you.

00:07:25.246 --> 00:07:26.526 A:middle
Here is the list style.

00:07:26.656 --> 00:07:31.676 A:middle
You have the stacks style
and the image sequence style.

00:07:32.266 --> 00:07:36.676 A:middle
But for this element,
WatchKit is taking care

00:07:36.676 --> 00:07:38.216 A:middle
of a lot of stuff for you.

00:07:38.216 --> 00:07:40.416 A:middle
We're drawing the
element, we're taking care

00:07:40.416 --> 00:07:42.786 A:middle
of interpreting the
Crown events,

00:07:42.786 --> 00:07:45.836 A:middle
and we're simply calling your
action when a selection is made.

00:07:46.956 --> 00:07:50.036 A:middle
So, in watchOS 3, we are
now giving you direct access

00:07:50.036 --> 00:07:53.456 A:middle
to the rotation events so
that you can write your own UI

00:07:53.456 --> 00:07:56.106 A:middle
elements and drive them
with the rotation values.

00:07:58.016 --> 00:08:00.346 A:middle
This is achieved
through two new objects

00:07:58.016 --> 00:08:00.346 A:middle
This is achieved
through two new objects

00:08:00.406 --> 00:08:03.446 A:middle
through new classes we're
introducing -- WKCrownSequencer,

00:08:03.446 --> 00:08:05.666 A:middle
which gives you access
to the rotation events --

00:08:06.596 --> 00:08:08.076 A:middle
I'm sorry, the rotations
per second.

00:08:08.346 --> 00:08:11.216 A:middle
And the new delegate
protocol, WKCrownDelegate,

00:08:11.606 --> 00:08:13.626 A:middle
with callbacks on
rotational deltas.

00:08:14.326 --> 00:08:16.706 A:middle
So you have two kinds of
values you're receiving --

00:08:16.706 --> 00:08:19.326 A:middle
rotations per second
and rotational deltas.

00:08:19.986 --> 00:08:22.496 A:middle
What do you do with each one of
them, or how do you access them?

00:08:23.286 --> 00:08:26.016 A:middle
If you're interested in
rotations per second,

00:08:26.676 --> 00:08:29.056 A:middle
you want to access the
crownSequencer property

00:08:29.056 --> 00:08:30.376 A:middle
which is now present in all

00:08:30.376 --> 00:08:32.135 A:middle
of the interface
controller classes.

00:08:33.256 --> 00:08:36.996 A:middle
And you query its rotations
per second property.

00:08:37.366 --> 00:08:39.066 A:middle
This is probably something
you're going to be using

00:08:39.066 --> 00:08:41.686 A:middle
when you're interested in the
speed of the Crown rotation

00:08:41.856 --> 00:08:43.816 A:middle
in maybe a physics-based
animation,

00:08:43.816 --> 00:08:47.796 A:middle
a game, something like that.

00:08:47.796 --> 00:08:50.456 A:middle
Rotational deltas are
communicated to you

00:08:50.456 --> 00:08:51.786 A:middle
through the delegate protocol.

00:08:52.346 --> 00:08:55.936 A:middle
This is how you're able to
count how many times the Crown

00:08:55.936 --> 00:08:56.806 A:middle
has rotated.

00:08:57.736 --> 00:09:00.466 A:middle
So you will get a callback
in the crownDidRotate method.

00:08:57.736 --> 00:09:00.466 A:middle
So you will get a callback
in the crownDidRotate method.

00:09:00.696 --> 00:09:02.276 A:middle
You will have the
rotationalDelta

00:09:02.276 --> 00:09:03.626 A:middle
as one of its arguments.

00:09:05.536 --> 00:09:07.746 A:middle
And what you want to do
in this method is you want

00:09:07.746 --> 00:09:09.646 A:middle
to maintain an accumulator
variable

00:09:09.736 --> 00:09:12.296 A:middle
where you add the deltas
that we're passing on to you.

00:09:13.186 --> 00:09:17.256 A:middle
The math you want to use
is a full rotation is equal

00:09:17.256 --> 00:09:19.066 A:middle
to accumulated deltas of 1.

00:09:20.786 --> 00:09:22.726 A:middle
Another example is if
you're only interested

00:09:22.726 --> 00:09:26.326 A:middle
in detecting half rotations, you
accumulate your deltas up to .5.

00:09:26.636 --> 00:09:28.906 A:middle
So you're adding the deltas
as we give them to you.

00:09:28.906 --> 00:09:30.646 A:middle
And when they cross
this threshold,

00:09:30.646 --> 00:09:32.426 A:middle
you know that a rotation
has occurred.

00:09:33.966 --> 00:09:35.806 A:middle
It's really up to you to figure

00:09:35.806 --> 00:09:39.196 A:middle
out how these rotation counts
correspond to the sensitivity

00:09:39.196 --> 00:09:40.736 A:middle
of the content that
you want to display.

00:09:43.836 --> 00:09:47.126 A:middle
When we're communicating values
to you, keep in mind the sign --

00:09:47.276 --> 00:09:48.566 A:middle
either positive or negative.

00:09:49.346 --> 00:09:51.986 A:middle
When your users are
scrolling with the intent

00:09:51.986 --> 00:09:53.316 A:middle
of moving their content up,

00:09:53.316 --> 00:09:55.586 A:middle
we will be giving
you positive values.

00:09:56.106 --> 00:09:57.506 A:middle
And when they're
scrolling with the intent

00:09:57.506 --> 00:09:58.646 A:middle
to moving the content down,

00:09:58.646 --> 00:09:59.976 A:middle
we're giving you
negative values.

00:10:00.416 --> 00:10:03.756 A:middle
And these values are orientation
agnostic, so you don't have

00:10:03.796 --> 00:10:05.556 A:middle
to worry about what
counter-clockwise

00:10:05.556 --> 00:10:06.486 A:middle
or clockwise means.

00:10:06.486 --> 00:10:12.376 A:middle
If your users change their Crown
orientation, we will continue

00:10:12.376 --> 00:10:15.946 A:middle
to give you a positive value
or a negative value for up

00:10:15.946 --> 00:10:19.216 A:middle
and down, so you don't
have to worry about that.

00:10:19.336 --> 00:10:21.766 A:middle
Finally, there's a concept
of focus on the Crown.

00:10:22.246 --> 00:10:25.666 A:middle
The focus can be taken away
by other interface elements --

00:10:25.666 --> 00:10:29.116 A:middle
for example, a picker, a
slider, any scrolling element.

00:10:29.486 --> 00:10:31.426 A:middle
So it's up to you to determine

00:10:31.426 --> 00:10:33.746 A:middle
when your interface
element needs

00:10:33.746 --> 00:10:35.026 A:middle
to be the focus of the Crown.

00:10:35.496 --> 00:10:38.436 A:middle
This is a great place to
be using the new gestures.

00:10:40.006 --> 00:10:44.246 A:middle
And once you determine that
your element needs to be

00:10:44.246 --> 00:10:47.286 A:middle
in focus again, please
call the function "focus".

00:10:47.356 --> 00:10:49.336 A:middle
And don't forget to
call this initially

00:10:49.336 --> 00:10:54.366 A:middle
when your interface
controller first comes up.

00:10:55.606 --> 00:10:59.046 A:middle
Now let's put aside the input
elements and let's talk a lot

00:10:59.046 --> 00:11:01.466 A:middle
about the vertical paging
that we're introducing.

00:10:59.046 --> 00:11:01.466 A:middle
about the vertical paging
that we're introducing.

00:11:03.156 --> 00:11:08.216 A:middle
The typical way that your users
navigate in your tables is

00:11:08.216 --> 00:11:10.626 A:middle
by selecting a row
and seeing the detail

00:11:10.626 --> 00:11:12.576 A:middle
for that particular row
in a separate controller.

00:11:13.376 --> 00:11:15.986 A:middle
They need to navigate
back into the master table

00:11:16.296 --> 00:11:21.056 A:middle
to select another row before
they're able to see that detail.

00:11:21.226 --> 00:11:24.876 A:middle
In watchOS 3, we have the
vertical paging concept.

00:11:25.286 --> 00:11:28.976 A:middle
So when you enable this in
your tables, once your users go

00:11:28.976 --> 00:11:33.246 A:middle
into their first detail, they're
able to swipe with their fingers

00:11:33.246 --> 00:11:35.176 A:middle
or with the Crown up and down

00:11:35.176 --> 00:11:37.286 A:middle
and see the subsequent
row detail.

00:11:38.256 --> 00:11:42.126 A:middle
So this eliminates their need to
go back into the master table,

00:11:42.746 --> 00:11:44.936 A:middle
making your app seem
a lot more responsive.

00:11:46.376 --> 00:11:48.086 A:middle
So how do you opt
into this mode?

00:11:48.366 --> 00:11:49.866 A:middle
It's actually pretty
straightforward.

00:11:49.866 --> 00:11:53.786 A:middle
All you need to do is enable
the Item Pagination checkbox

00:11:53.826 --> 00:11:56.266 A:middle
in your table inspector.

00:11:56.266 --> 00:11:57.946 A:middle
But you also need to make sure

00:11:57.946 --> 00:12:01.306 A:middle
that your table is
using the segues API.

00:11:57.946 --> 00:12:01.306 A:middle
that your table is
using the segues API.

00:12:02.016 --> 00:12:04.456 A:middle
That's where you're giving
us what context you want

00:12:04.456 --> 00:12:06.916 A:middle
to instantiate a controller
with and we instantiate it

00:12:06.916 --> 00:12:07.846 A:middle
with the given context.

00:12:07.846 --> 00:12:09.586 A:middle
You're probably already
doing that.

00:12:10.856 --> 00:12:13.426 A:middle
So the API itself
hasn't changed much.

00:12:13.426 --> 00:12:15.116 A:middle
There's a couple of changes.

00:12:15.196 --> 00:12:17.726 A:middle
There's a single method
that allows you to jump

00:12:17.726 --> 00:12:19.686 A:middle
into the segue mode from code.

00:12:20.376 --> 00:12:22.716 A:middle
This is useful when you're
launching your application

00:12:22.716 --> 00:12:26.686 A:middle
from tapping on a complication
or tapping from a notification

00:12:26.686 --> 00:12:28.366 A:middle
and you want to directly go

00:12:28.366 --> 00:12:31.146 A:middle
into a specific row
in the segue mode.

00:12:32.736 --> 00:12:36.676 A:middle
The second thing you need to be
aware of is WatchKit is trying

00:12:36.676 --> 00:12:37.806 A:middle
to be smart and help you

00:12:37.806 --> 00:12:39.356 A:middle
out with the speed
of your application.

00:12:39.356 --> 00:12:41.396 A:middle
So we're doing preheating
of controllers,

00:12:41.396 --> 00:12:43.586 A:middle
anticipating what the
user could do in terms

00:12:43.586 --> 00:12:44.696 A:middle
of scrolling up and down.

00:12:45.256 --> 00:12:47.006 A:middle
So some of the lifecycle methods

00:12:47.006 --> 00:12:50.466 A:middle
for your controllers will be
called before your elements are

00:12:50.466 --> 00:12:51.066 A:middle
on screen.

00:12:51.936 --> 00:12:54.206 A:middle
I won't be going too much
into detail about this.

00:12:54.206 --> 00:12:57.506 A:middle
But we have a whole new session,
Architecting for Performance,

00:12:57.506 --> 00:12:59.416 A:middle
where they give a
fairly detailed example

00:12:59.506 --> 00:13:01.976 A:middle
on all the badging of
the lifecycle methods.

00:12:59.506 --> 00:13:01.976 A:middle
on all the badging of
the lifecycle methods.

00:13:03.486 --> 00:13:05.646 A:middle
Now let's talk about
notifications.

00:13:05.646 --> 00:13:09.186 A:middle
These are the ultimate
quick interactions

00:13:09.186 --> 00:13:10.986 A:middle
that we've introduced
since the beginning

00:13:11.086 --> 00:13:12.506 A:middle
of the Apple Watch product.

00:13:14.276 --> 00:13:17.696 A:middle
So from a user's point of view,
your user's point of view,

00:13:18.696 --> 00:13:22.526 A:middle
the way they interact with
notifications is simply

00:13:22.526 --> 00:13:24.446 A:middle
by feeling the haptic
in their arm.

00:13:25.316 --> 00:13:28.766 A:middle
They raise their wrist and
they automatically see this

00:13:28.766 --> 00:13:31.176 A:middle
short-look interface
for your notification.

00:13:31.936 --> 00:13:36.036 A:middle
If they keep their hand
raised, we transition

00:13:36.036 --> 00:13:38.296 A:middle
into the long-look
of the notification.

00:13:41.236 --> 00:13:44.016 A:middle
The way they respond to
your notifications is --

00:13:44.256 --> 00:13:46.586 A:middle
I'm going to walk through
the long-look example,

00:13:46.586 --> 00:13:48.456 A:middle
which is the one that
has the most detail here.

00:13:49.776 --> 00:13:52.286 A:middle
So if you've done
a good job in terms

00:13:52.286 --> 00:13:55.226 A:middle
of communicating the
content of your notification

00:13:55.226 --> 00:13:57.866 A:middle
through the text,
they'll do nothing other

00:13:57.866 --> 00:13:59.266 A:middle
than dismiss the notification.

00:13:59.266 --> 00:14:01.006 A:middle
That is the shortest
quick interaction.

00:13:59.266 --> 00:14:01.006 A:middle
That is the shortest
quick interaction.

00:14:02.356 --> 00:14:08.226 A:middle
They could also tap on the
notification to launch your app.

00:14:08.486 --> 00:14:13.106 A:middle
Or, remember that notifications
can have custom actions

00:14:13.106 --> 00:14:14.166 A:middle
associated with them.

00:14:14.716 --> 00:14:16.236 A:middle
In this case, I'm
showing three --

00:14:16.346 --> 00:14:18.426 A:middle
the Accept, Maybe,
and Decline button.

00:14:18.726 --> 00:14:20.456 A:middle
You can have up to
a total of four.

00:14:21.456 --> 00:14:24.016 A:middle
When you're associating
actions with your notifications,

00:14:24.656 --> 00:14:26.896 A:middle
they can either be
foreground actions --

00:14:27.266 --> 00:14:29.536 A:middle
meaning that if the
user taps on the button,

00:14:29.536 --> 00:14:33.246 A:middle
your application will become
active -- or background actions.

00:14:34.306 --> 00:14:38.426 A:middle
Background actions in watchOS
2 were always forwarded

00:14:38.426 --> 00:14:39.056 A:middle
to your phone.

00:14:41.756 --> 00:14:45.756 A:middle
The big change in watchOS
3 for a notification is

00:14:45.756 --> 00:14:49.086 A:middle
that there's a whole new
notification framework.

00:14:50.786 --> 00:14:53.776 A:middle
Please go to the Introduction
to Notifications session

00:14:53.776 --> 00:14:57.206 A:middle
to learn all of the details
about the new framework itself.

00:14:57.206 --> 00:15:00.036 A:middle
But the high-level
points for you

00:14:57.206 --> 00:15:00.036 A:middle
But the high-level
points for you

00:15:00.036 --> 00:15:01.936 A:middle
as WatchKit developers
are three.

00:15:04.256 --> 00:15:08.366 A:middle
You now have a set of
similar notification APIs

00:15:08.366 --> 00:15:11.716 A:middle
across platforms --
iOS, tvOS, and watchOS.

00:15:13.456 --> 00:15:16.826 A:middle
You can now schedule local
notifications on your watch.

00:15:18.996 --> 00:15:20.916 A:middle
And notifications

00:15:20.916 --> 00:15:24.106 A:middle
with background actions will now
be delivered to your extension

00:15:24.666 --> 00:15:26.936 A:middle
as long as they were
scheduled on the Watch.

00:15:30.116 --> 00:15:33.246 A:middle
Let's look at the API.

00:15:33.246 --> 00:15:35.806 A:middle
The new object,
UNUserNotificationCenter,

00:15:36.056 --> 00:15:38.816 A:middle
you want to become the
delegate of that object probably

00:15:38.816 --> 00:15:40.356 A:middle
when your application
is launching

00:15:40.356 --> 00:15:42.126 A:middle
in the
applicationDidFinishLaunching

00:15:42.126 --> 00:15:42.506 A:middle
method.

00:15:43.536 --> 00:15:44.586 A:middle
And you want to indicate

00:15:44.586 --> 00:15:47.526 A:middle
that you are adopting
the notification center

00:15:47.526 --> 00:15:48.526 A:middle
delegate protocol.

00:15:49.296 --> 00:15:50.746 A:middle
There are two methods
of interest

00:15:50.746 --> 00:15:51.906 A:middle
to you in this protocol.

00:15:52.256 --> 00:15:54.206 A:middle
The first is the
willPresent method.

00:15:54.986 --> 00:15:57.666 A:middle
This is called when your
application is already active

00:15:58.546 --> 00:16:03.216 A:middle
on the watch face and the system
is giving you an opportunity

00:15:58.546 --> 00:16:03.216 A:middle
on the watch face and the system
is giving you an opportunity

00:16:03.216 --> 00:16:05.936 A:middle
to tell it how you want it
to handle that notification.

00:16:06.746 --> 00:16:09.166 A:middle
So, depending on the
option that you use

00:16:09.166 --> 00:16:10.736 A:middle
in the completion handler there,

00:16:11.276 --> 00:16:13.206 A:middle
the system will do
one of two things.

00:16:14.446 --> 00:16:17.026 A:middle
If you say that you want
to use the alert option,

00:16:17.756 --> 00:16:21.406 A:middle
we will revert back to the
regular long-look interface

00:16:21.406 --> 00:16:25.186 A:middle
for the notification and it will
be overlaid on top of your app.

00:16:25.546 --> 00:16:27.716 A:middle
If you say that you
want to do nothing,

00:16:27.716 --> 00:16:29.916 A:middle
that means that system
should do nothing.

00:16:30.616 --> 00:16:32.196 A:middle
Since your app is
already active,

00:16:32.336 --> 00:16:33.736 A:middle
you are the ones taking care

00:16:33.736 --> 00:16:36.236 A:middle
of displaying the
notification content somehow

00:16:36.236 --> 00:16:37.446 A:middle
in your application.

00:16:38.766 --> 00:16:41.666 A:middle
The second method is
the didReceive response.

00:16:42.486 --> 00:16:44.996 A:middle
This is when your users
act on your notification.

00:16:45.906 --> 00:16:48.806 A:middle
So this is the callback when
the app becomes foreground

00:16:48.806 --> 00:16:50.336 A:middle
because the user
tapped on a button.

00:16:50.606 --> 00:16:54.406 A:middle
And this is also the new
entry point in watchOS 3

00:16:54.406 --> 00:16:57.306 A:middle
where you're getting a
callback for background actions.

00:16:57.786 --> 00:16:59.806 A:middle
But, remember, this is
only for background actions

00:16:59.806 --> 00:17:01.836 A:middle
that are scheduled
on the Watch itself.

00:16:59.806 --> 00:17:01.836 A:middle
that are scheduled
on the Watch itself.

00:17:03.736 --> 00:17:06.906 A:middle
This is a good moment to make a
quick review of the scheduling

00:17:06.906 --> 00:17:10.026 A:middle
and delivery of notifications
on Apple Watch.

00:17:11.106 --> 00:17:15.526 A:middle
Anytime a notification fires
on your phone, it is forwarded

00:17:15.526 --> 00:17:18.606 A:middle
to the Watch if the
screen on the phone is off

00:17:18.606 --> 00:17:21.175 A:middle
and you have your Watch on
your wrist and it's unlocked.

00:17:21.806 --> 00:17:23.675 A:middle
That's always been the behavior.

00:17:25.076 --> 00:17:27.656 A:middle
But now in watchOS 3,
you have the ability

00:17:27.656 --> 00:17:29.416 A:middle
to schedule your
own notifications

00:17:29.416 --> 00:17:30.426 A:middle
on the Apple Watch.

00:17:31.316 --> 00:17:34.236 A:middle
So keep in mind that these are
only delivered on the Watch.

00:17:34.646 --> 00:17:36.206 A:middle
And if your application needs

00:17:36.206 --> 00:17:40.126 A:middle
to also have a corresponding
notification on the phone side,

00:17:40.496 --> 00:17:42.626 A:middle
it's up to you to
communicate to the phone

00:17:42.956 --> 00:17:44.706 A:middle
and schedule your
notification there.

00:17:45.566 --> 00:17:46.586 A:middle
Now you might be wondering,

00:17:46.586 --> 00:17:48.526 A:middle
"If I schedule multiple
notifications,

00:17:48.526 --> 00:17:50.036 A:middle
what happens when
they both fire?"

00:17:51.326 --> 00:17:55.476 A:middle
Well, you have the ability to
dedupe the notifications as long

00:17:55.476 --> 00:17:58.416 A:middle
as you use the same identifier
both on the Watch side

00:17:58.416 --> 00:18:00.386 A:middle
and on the iPhone side
of the notification.

00:17:58.416 --> 00:18:00.386 A:middle
and on the iPhone side
of the notification.

00:18:01.166 --> 00:18:02.966 A:middle
So if we're in a situation

00:18:02.966 --> 00:18:05.696 A:middle
where we're forwarding the
notification to the Watch,

00:18:06.816 --> 00:18:08.246 A:middle
we look at the ID first.

00:18:08.796 --> 00:18:11.746 A:middle
And if there's a similar
ID notification firing

00:18:11.746 --> 00:18:14.176 A:middle
at that moment on the Watch,
that is giving precedence

00:18:14.176 --> 00:18:15.286 A:middle
and that's the one
that's displayed

00:18:15.286 --> 00:18:18.106 A:middle
so your users don't see two
things fire at the same time.

00:18:21.536 --> 00:18:25.646 A:middle
Finally, let's talk about the
SpriteKit and SceneKit objects.

00:18:27.276 --> 00:18:30.886 A:middle
So SpriteKit and SceneKit are
very rich APIs that allow you

00:18:30.966 --> 00:18:34.196 A:middle
to do the 2D and 3D
graphics, and they allow you

00:18:34.196 --> 00:18:36.876 A:middle
to expand significantly
the visual language

00:18:36.876 --> 00:18:38.006 A:middle
of your applications.

00:18:39.256 --> 00:18:42.246 A:middle
We have two new classes
for WatchKit

00:18:42.856 --> 00:18:48.246 A:middle
that support these frameworks --
WKInterfaceSKScene for SpriteKit

00:18:48.986 --> 00:18:53.646 A:middle
and WKInterfaceSCNScene
for the SceneKit.

00:18:54.176 --> 00:18:57.406 A:middle
Again, you do all of the
configuration in the storyboard

00:18:57.406 --> 00:18:58.336 A:middle
and interface builder.

00:18:59.476 --> 00:19:02.486 A:middle
You will now see the two
classes appear in the library.

00:18:59.476 --> 00:19:02.486 A:middle
You will now see the two
classes appear in the library.

00:19:02.576 --> 00:19:06.646 A:middle
All you do is drag them
into your controller,

00:19:06.646 --> 00:19:08.836 A:middle
and they really pretty
much give you the canvas

00:19:08.836 --> 00:19:10.166 A:middle
where you're going to
be drawing your scene.

00:19:10.636 --> 00:19:13.706 A:middle
And the configuration
is done on the inspector

00:19:13.706 --> 00:19:14.586 A:middle
and interface builder.

00:19:17.496 --> 00:19:19.906 A:middle
Once you're ready to
display your scenes,

00:19:20.786 --> 00:19:22.056 A:middle
all of your SpriteKit

00:19:22.056 --> 00:19:24.156 A:middle
and SceneKit code
continues to be that.

00:19:24.316 --> 00:19:26.316 A:middle
You continue to use the APIs.

00:19:26.316 --> 00:19:29.196 A:middle
I won't be going into the APIs
of those frameworks themselves.

00:19:29.196 --> 00:19:32.866 A:middle
But once you have your
scene ready to present,

00:19:33.446 --> 00:19:35.176 A:middle
the integration with
WatchKit is simply

00:19:35.176 --> 00:19:36.366 A:middle
in the presenting of the scene.

00:19:37.106 --> 00:19:39.276 A:middle
So if you're dealing
with a SpriteKit scene,

00:19:39.336 --> 00:19:43.056 A:middle
you call the percent function
or functions depending

00:19:43.056 --> 00:19:44.436 A:middle
on whether you have
a transition.

00:19:45.576 --> 00:19:47.456 A:middle
And if you have a
SceneKit scene,

00:19:47.896 --> 00:19:52.026 A:middle
all you do is set the scene
property on the object.

00:19:52.026 --> 00:19:56.506 A:middle
And that's all there is in
terms of the integration.

00:19:58.316 --> 00:20:00.526 A:middle
So I've given you
a quick overview

00:19:58.316 --> 00:20:00.526 A:middle
So I've given you
a quick overview

00:20:00.526 --> 00:20:02.856 A:middle
of the new ToolKit
items that you have

00:20:03.586 --> 00:20:05.516 A:middle
for creating glanceable,
actionable,

00:20:05.516 --> 00:20:07.856 A:middle
and responsive applications.

00:20:08.376 --> 00:20:11.236 A:middle
Now Tom will come back and
give you specific examples

00:20:11.236 --> 00:20:13.806 A:middle
of how he combines
multiple of these interfaces

00:20:14.526 --> 00:20:15.916 A:middle
to make your app
more responsive.

00:20:16.216 --> 00:20:16.596 A:middle
Thank you.

00:20:17.516 --> 00:20:22.936 A:middle
[ Applause ]

00:20:23.436 --> 00:20:23.726 A:middle
&gt;&gt; All right.

00:20:23.726 --> 00:20:25.946 A:middle
And so now we have that
ToolKit, so we can look

00:20:25.946 --> 00:20:28.556 A:middle
at some practical techniques
to actually build these types

00:20:28.556 --> 00:20:29.476 A:middle
of quick interactions.

00:20:30.196 --> 00:20:32.896 A:middle
So we're going to talk
through adding complications

00:20:33.026 --> 00:20:34.306 A:middle
and notifications in your app.

00:20:34.476 --> 00:20:37.196 A:middle
And now these are not new, but
we're going to talk through them

00:20:37.196 --> 00:20:38.406 A:middle
in some unique and new ways.

00:20:38.476 --> 00:20:40.986 A:middle
Then afterward, we're
going to talk

00:20:40.986 --> 00:20:43.756 A:middle
about having a simple navigation
model within your apps.

00:20:44.666 --> 00:20:46.016 A:middle
And then lastly,
we're going to talk

00:20:46.016 --> 00:20:48.516 A:middle
about giving your users the
confidence to drop their wrist

00:20:48.736 --> 00:20:50.486 A:middle
as soon as they're
done interacting inside

00:20:50.486 --> 00:20:51.266 A:middle
your applications.

00:20:52.036 --> 00:20:54.666 A:middle
And so we'll start off with
actionable complications.

00:20:55.046 --> 00:20:57.606 A:middle
And so we introduced
complications

00:20:57.606 --> 00:20:59.326 A:middle
for third-party apps
in watchOS 2.

00:20:59.686 --> 00:21:02.146 A:middle
And now in watchOS 3, they're
playing an even larger role.

00:20:59.686 --> 00:21:02.146 A:middle
And now in watchOS 3, they're
playing an even larger role.

00:21:02.716 --> 00:21:05.636 A:middle
And now there are more faces
that have complications,

00:21:06.076 --> 00:21:07.686 A:middle
and there's some of
the existing faces

00:21:07.686 --> 00:21:09.416 A:middle
that have even more
complication slots.

00:21:10.356 --> 00:21:13.506 A:middle
So, also, now you have the
ability to quickly swipe

00:21:13.846 --> 00:21:17.606 A:middle
across your faces to see
all your complications.

00:21:17.926 --> 00:21:20.456 A:middle
So because of this, we
think that every app

00:21:20.456 --> 00:21:22.636 A:middle
on Apple Watch should
have a complication.

00:21:22.986 --> 00:21:25.736 A:middle
And you'll now see that all the
native apps have complications

00:21:25.736 --> 00:21:27.696 A:middle
as well, as you can see
with the Workout app

00:21:27.696 --> 00:21:29.836 A:middle
or the Heartrate app.

00:21:29.836 --> 00:21:30.796 A:middle
So why complications?

00:21:31.446 --> 00:21:32.586 A:middle
They're extremely glanceable.

00:21:32.586 --> 00:21:33.976 A:middle
They're on their
wrist at all times.

00:21:33.976 --> 00:21:35.516 A:middle
And with just a glance,
you can see a lot

00:21:35.516 --> 00:21:36.876 A:middle
of really important information.

00:21:38.266 --> 00:21:39.696 A:middle
They are frequently updated.

00:21:39.696 --> 00:21:42.276 A:middle
If your app has a complication
on the current face,

00:21:42.606 --> 00:21:44.466 A:middle
it's updated at least
twice an hour.

00:21:44.726 --> 00:21:46.836 A:middle
And so you can always ensure
that you have really fresh

00:21:46.836 --> 00:21:49.446 A:middle
and current data always
available to your users.

00:21:50.826 --> 00:21:52.176 A:middle
Your app is kept in memory.

00:21:52.176 --> 00:21:55.086 A:middle
And this is really important
because it makes the launch

00:21:55.086 --> 00:21:58.146 A:middle
of your app extremely fast
and makes all the interactions

00:21:58.146 --> 00:22:00.476 A:middle
within your applications
a lot more responsive.

00:21:58.146 --> 00:22:00.476 A:middle
within your applications
a lot more responsive.

00:22:01.986 --> 00:22:03.766 A:middle
And complications
provide a great way

00:22:03.766 --> 00:22:05.996 A:middle
to accelerate your
users into your app

00:22:06.296 --> 00:22:08.416 A:middle
to perform specific
types of functionality.

00:22:09.366 --> 00:22:12.366 A:middle
So, for example, if we look
at the Music complication,

00:22:12.886 --> 00:22:14.626 A:middle
I tap on that and
I'm sent directly

00:22:14.626 --> 00:22:15.646 A:middle
to the Now Playing screen

00:22:15.646 --> 00:22:16.996 A:middle
because that's what's
most important

00:22:16.996 --> 00:22:18.416 A:middle
to me if I'm playing music.

00:22:18.676 --> 00:22:21.016 A:middle
I can play and pause the
song or skip the track.

00:22:21.396 --> 00:22:23.626 A:middle
And it makes the whole
interaction a lot faster

00:22:24.016 --> 00:22:26.076 A:middle
because I'm sent
directly to where I need.

00:22:27.596 --> 00:22:31.796 A:middle
Also new in watchOS 3 and
iOS 10 is the new Gallery

00:22:31.796 --> 00:22:33.326 A:middle
in the Apple Watch
app on iPhone.

00:22:34.026 --> 00:22:35.196 A:middle
This is great because
it allows you

00:22:35.196 --> 00:22:37.126 A:middle
to add new faces to
your Apple Watch.

00:22:37.716 --> 00:22:40.006 A:middle
But it also allows you
to customize the faces

00:22:40.356 --> 00:22:42.226 A:middle
and choose among all
the complications.

00:22:42.226 --> 00:22:44.696 A:middle
And third-party complications
appear here as well,

00:22:44.946 --> 00:22:46.456 A:middle
so it's a great way
for your users

00:22:46.456 --> 00:22:47.946 A:middle
to discover your complications

00:22:48.156 --> 00:22:49.956 A:middle
and add them directly
to the watch face.

00:22:50.046 --> 00:22:53.306 A:middle
And if you want to be part
of the list of complications,

00:22:53.306 --> 00:22:54.826 A:middle
you create a complication
bundle.

00:22:54.956 --> 00:22:57.376 A:middle
And there's documentation for
that on the developer website.

00:22:57.716 --> 00:22:59.546 A:middle
So I highly recommend
that you check that out.

00:23:00.386 --> 00:23:03.396 A:middle
So complications on Apple Watch
are just a really fantastic

00:23:03.396 --> 00:23:05.326 A:middle
mechanism to get your
users into your app

00:23:05.486 --> 00:23:07.686 A:middle
and really provide a lot
of these fast interactions.

00:23:07.926 --> 00:23:10.256 A:middle
So if you don't have a
complication in your current app

00:23:10.566 --> 00:23:14.566 A:middle
or you're building a new app,
make sure to include them.

00:23:14.776 --> 00:23:17.666 A:middle
Next up, we're going to move
onto glanceable notifications.

00:23:18.076 --> 00:23:20.206 A:middle
And so we all know
that notifications

00:23:20.206 --> 00:23:22.166 A:middle
on Apple Watch are
really fantastic,

00:23:22.526 --> 00:23:23.946 A:middle
and one of the main reasons is

00:23:23.946 --> 00:23:26.036 A:middle
that they're entirely
customizable.

00:23:26.286 --> 00:23:29.066 A:middle
And so you can make them
look however you want.

00:23:29.166 --> 00:23:30.916 A:middle
But also, it allows you

00:23:30.996 --> 00:23:34.366 A:middle
to display really valuable
information right inline

00:23:34.366 --> 00:23:35.336 A:middle
in the notification.

00:23:35.696 --> 00:23:37.996 A:middle
So, for example, here in
the Calendar notification,

00:23:37.996 --> 00:23:40.966 A:middle
I can see the name of the event
and when it is and where it is.

00:23:41.496 --> 00:23:44.706 A:middle
And ultimately, this can often
times remove the necessity

00:23:44.706 --> 00:23:46.366 A:middle
to even go and launch
the Watch app

00:23:46.366 --> 00:23:49.406 A:middle
because all the important
information is right inline

00:23:49.506 --> 00:23:50.496 A:middle
in the notification.

00:23:51.276 --> 00:23:54.816 A:middle
And now in watchOS 3, all
notifications support SpriteKit,

00:23:54.816 --> 00:23:57.056 A:middle
and SceneKit, and inline video.

00:23:57.056 --> 00:23:59.996 A:middle
And so you can provide even
more customization inside

00:23:59.996 --> 00:24:00.756 A:middle
of your notifications.

00:23:59.996 --> 00:24:00.756 A:middle
of your notifications.

00:24:01.916 --> 00:24:03.456 A:middle
So, SpriteKit and SceneKit --

00:24:03.646 --> 00:24:06.056 A:middle
I'm sure a lot of you think
of these in terms of gaming.

00:24:06.206 --> 00:24:07.266 A:middle
And they're great for gaming.

00:24:07.546 --> 00:24:08.846 A:middle
And there's a session on Friday

00:24:08.846 --> 00:24:10.476 A:middle
about game technologies
for Apple Watch.

00:24:11.156 --> 00:24:13.046 A:middle
But here, we'd like to
talk about them in terms

00:24:13.046 --> 00:24:15.176 A:middle
of nongaming types
of interfaces.

00:24:15.376 --> 00:24:17.686 A:middle
And so why are they
important for nongaming?

00:24:18.356 --> 00:24:22.246 A:middle
They allow you entire
customization over the content,

00:24:22.336 --> 00:24:25.226 A:middle
and the layout, and the
animation of your interfaces.

00:24:25.446 --> 00:24:28.916 A:middle
And so it allows you to create
really custom types of looks.

00:24:29.326 --> 00:24:30.706 A:middle
And so, here, we're
going to look

00:24:30.706 --> 00:24:32.536 A:middle
at an example of a Photos app.

00:24:32.916 --> 00:24:35.256 A:middle
So, here, you can see I got a
notification from my friend,

00:24:35.256 --> 00:24:37.506 A:middle
Ivy, and she has shared
some photos with me.

00:24:38.226 --> 00:24:40.346 A:middle
But this does not include
a lot of information.

00:24:40.346 --> 00:24:41.896 A:middle
I have no idea what
the photos are.

00:24:42.086 --> 00:24:44.436 A:middle
I have to read the text in order
to see who has shared them.

00:24:44.886 --> 00:24:48.056 A:middle
And so we can definitely
take a lot more advantage

00:24:48.056 --> 00:24:49.916 A:middle
of the customization
possibilities

00:24:50.146 --> 00:24:51.046 A:middle
in our notification.

00:24:52.076 --> 00:24:52.946 A:middle
So here's an alternative

00:24:53.246 --> 00:24:55.406 A:middle
which is now using
SpriteKit along the top.

00:24:55.666 --> 00:24:57.886 A:middle
It actually has the photos
that were shared with me.

00:24:58.156 --> 00:24:59.826 A:middle
It has the photo
of my friend, Ivy.

00:25:00.176 --> 00:25:02.756 A:middle
And with just a glance, I can
see a lot more information.

00:25:02.846 --> 00:25:05.836 A:middle
And ultimately, I can make a
more well-informed decision

00:25:05.836 --> 00:25:08.606 A:middle
on whether I want to go launch
the Watch app or even go

00:25:08.606 --> 00:25:10.796 A:middle
and grab my iPhone and
check these photos out more.

00:25:12.006 --> 00:25:14.116 A:middle
And if we look at
how this was done,

00:25:14.116 --> 00:25:17.506 A:middle
across the top we have the
new WKInterfaceSKScene object.

00:25:18.026 --> 00:25:20.496 A:middle
And then below that, we
just have a regular label.

00:25:20.626 --> 00:25:22.586 A:middle
And the key thing I want
to point out here is

00:25:22.586 --> 00:25:25.116 A:middle
that you can mix and
match your SpriteKit

00:25:25.116 --> 00:25:26.836 A:middle
and your WatchKit user
interface elements.

00:25:27.256 --> 00:25:29.986 A:middle
And so maybe you already
are using an animated image

00:25:29.986 --> 00:25:31.396 A:middle
or the view animation API.

00:25:31.946 --> 00:25:34.226 A:middle
You can swap those
out with SpriteKit.

00:25:34.226 --> 00:25:36.096 A:middle
Or if you just have an
existing interface and want

00:25:36.096 --> 00:25:38.396 A:middle
to add animation, you don't
have to rewrite everything

00:25:38.396 --> 00:25:39.516 A:middle
in order to adopt SpriteKit.

00:25:39.956 --> 00:25:42.686 A:middle
So it provides a really powerful
way to add a lot of richness

00:25:42.776 --> 00:25:45.536 A:middle
to your interfaces without
having to throw everything out

00:25:45.536 --> 00:25:48.696 A:middle
and start over, which
is really cool.

00:25:48.776 --> 00:25:50.736 A:middle
And so if you have
notifications within your app,

00:25:50.736 --> 00:25:53.356 A:middle
make sure to take full advantage
of what they have to offer.

00:25:53.466 --> 00:25:55.506 A:middle
If you just kind of have
the default interface,

00:25:55.866 --> 00:25:58.476 A:middle
think about what information
is really important inside the

00:25:58.476 --> 00:26:03.966 A:middle
notification and add a custom
interface to reflect that.

00:25:58.476 --> 00:26:03.966 A:middle
notification and add a custom
interface to reflect that.

00:26:03.966 --> 00:26:05.246 A:middle
OK. So, next up, we're moving

00:26:05.246 --> 00:26:09.716 A:middle
on to a simple navigation
model within your app.

00:26:09.796 --> 00:26:13.126 A:middle
Earlier, we talked about the new
vertical paging API for tables.

00:26:13.126 --> 00:26:15.336 A:middle
And that's great for
any hierarchical app.

00:26:15.796 --> 00:26:18.226 A:middle
But here, we'd like to talk
about navigation in terms

00:26:18.226 --> 00:26:20.486 A:middle
of two other of the technologies
that we talked about --

00:26:20.906 --> 00:26:23.386 A:middle
and those are Gestures
and the Digital Crown.

00:26:23.716 --> 00:26:26.736 A:middle
And so the Digital Crown
is unique to Apple Watch,

00:26:26.736 --> 00:26:29.136 A:middle
and it's a really
fantastic input mechanism.

00:26:29.646 --> 00:26:30.786 A:middle
It allows you to quickly

00:26:30.786 --> 00:26:32.556 A:middle
and precisely interact
with the interface.

00:26:32.886 --> 00:26:35.436 A:middle
And it can be used in
many, many different ways.

00:26:36.116 --> 00:26:38.956 A:middle
So, for example, in the Timer
application, it can be used

00:26:38.956 --> 00:26:41.416 A:middle
to scrub through durations
and choose the time you want.

00:26:42.526 --> 00:26:45.476 A:middle
Or in the Photos application,
it can be used to zoom

00:26:45.476 --> 00:26:46.846 A:middle
in and out of the photo.

00:26:47.616 --> 00:26:49.266 A:middle
So you can get really creative

00:26:49.266 --> 00:26:51.396 A:middle
with how you use the Digital
Crown in your applications,

00:26:51.396 --> 00:26:53.866 A:middle
and we're really excited to
see how you'll be doing that.

00:26:53.936 --> 00:26:55.896 A:middle
And here, though, we'd like
to talk through an example

00:26:55.896 --> 00:26:59.276 A:middle
of a running app that puts both
Gestures and the Digital Crown

00:26:59.366 --> 00:27:01.026 A:middle
to use to simplify
the navigation.

00:26:59.366 --> 00:27:01.026 A:middle
to use to simplify
the navigation.

00:27:02.276 --> 00:27:04.136 A:middle
So, here, we have one
version of a running app.

00:27:04.346 --> 00:27:07.316 A:middle
The goal is to show my
previous run, and to show kind

00:27:07.316 --> 00:27:10.386 A:middle
of the average time, and
distance, and the altitude.

00:27:11.076 --> 00:27:13.946 A:middle
So one version is just to kind
of have a list of every mile.

00:27:14.046 --> 00:27:16.546 A:middle
And maybe I can tap in on the
mile and see more information,

00:27:16.986 --> 00:27:19.376 A:middle
or I can scroll the list
and see the entire run.

00:27:19.536 --> 00:27:22.336 A:middle
And while this version
has all the information

00:27:22.336 --> 00:27:25.126 A:middle
that I would need, you kind of
have to hunt around in order

00:27:25.126 --> 00:27:26.296 A:middle
to find what you're looking for.

00:27:26.526 --> 00:27:28.616 A:middle
You have to tap in on rows,
you have to scroll the list,

00:27:28.826 --> 00:27:31.356 A:middle
and the information just isn't
that dense or glanceable.

00:27:31.356 --> 00:27:34.026 A:middle
And so it can definitely be
done in a lot better way.

00:27:35.346 --> 00:27:37.886 A:middle
So here's an alternative
which now is using SpriteKit

00:27:37.886 --> 00:27:40.836 A:middle
to have a graph at the top,
and it shows the entire run.

00:27:40.836 --> 00:27:41.846 A:middle
And so with just a glance,

00:27:41.846 --> 00:27:43.886 A:middle
I can actually see a lot
more of the information.

00:27:44.526 --> 00:27:47.066 A:middle
And now with the use of
gestures, I can tap on the graph

00:27:47.366 --> 00:27:50.306 A:middle
and it will animate between
the pace and the altitude.

00:27:51.136 --> 00:27:53.266 A:middle
And then I can also use
the Digital Crown to scrub

00:27:53.266 --> 00:27:55.826 A:middle
through the graph to
specific data points.

00:27:56.146 --> 00:27:59.436 A:middle
So even though there's a lot
more information on screen,

00:27:59.436 --> 00:28:01.316 A:middle
it's actually a lot
easier to navigate

00:27:59.436 --> 00:28:01.316 A:middle
it's actually a lot
easier to navigate

00:28:01.316 --> 00:28:03.876 A:middle
to the specific information
that I'm looking for,

00:28:04.066 --> 00:28:06.886 A:middle
and it makes the overall
interaction a lot faster.

00:28:07.506 --> 00:28:09.516 A:middle
And so, as you can see
now, we're starting to mix

00:28:09.516 --> 00:28:11.916 A:middle
and match all the technologies
that we introduced earlier --

00:28:11.916 --> 00:28:14.586 A:middle
so Gestures, and the Digital
Crown, and SpriteKit --

00:28:14.936 --> 00:28:17.136 A:middle
and they create some really
powerful combinations.

00:28:17.606 --> 00:28:19.746 A:middle
So as you're building
your own applications,

00:28:19.746 --> 00:28:20.886 A:middle
you should make sure to take

00:28:21.066 --> 00:28:22.896 A:middle
into account all
the technologies

00:28:23.126 --> 00:28:24.256 A:middle
and see how they can help

00:28:24.256 --> 00:28:26.216 A:middle
to simplify the navigation
within your app.

00:28:26.586 --> 00:28:31.116 A:middle
A lot of focus has gone into
navigation in watchOS 3,

00:28:31.116 --> 00:28:32.776 A:middle
and we really want to
make sure that carries

00:28:32.776 --> 00:28:35.106 A:middle
through to all of
your apps as well.

00:28:35.106 --> 00:28:42.006 A:middle
And so, last up, we're going
to talk about a technique

00:28:42.496 --> 00:28:45.406 A:middle
that allows your users to
drop their wrist as soon

00:28:45.406 --> 00:28:46.436 A:middle
as they're done interacting.

00:28:47.216 --> 00:28:49.516 A:middle
And so a key aspect in
making a quick interaction

00:28:49.516 --> 00:28:53.146 A:middle
on Apple Watch is that your app
feels very, very responsive.

00:28:53.486 --> 00:28:56.116 A:middle
And this is especially true
if you're doing any type

00:28:56.116 --> 00:28:59.156 A:middle
of networking or communicating
with a companion iPhone.

00:28:59.686 --> 00:29:01.386 A:middle
Because often times,
that can lead

00:28:59.686 --> 00:29:01.386 A:middle
Because often times,
that can lead

00:29:01.386 --> 00:29:03.726 A:middle
to loading indicators,
which are not good.

00:29:04.446 --> 00:29:05.966 A:middle
And one aspect of this is

00:29:05.966 --> 00:29:08.126 A:middle
if you're updating the
data within your app.

00:29:08.126 --> 00:29:09.646 A:middle
And that's a large enough topic

00:29:09.646 --> 00:29:11.016 A:middle
that there's actually
a whole talk

00:29:11.016 --> 00:29:12.756 A:middle
on keeping your Watch
app current and fresh.

00:29:13.056 --> 00:29:14.256 A:middle
So make sure and check that out.

00:29:15.016 --> 00:29:17.196 A:middle
But here, we'd like to talk
about networking in terms

00:29:17.196 --> 00:29:19.066 A:middle
of responding to user action.

00:29:19.646 --> 00:29:23.086 A:middle
So, for example, you have a
food-delivery app, and you want

00:29:23.086 --> 00:29:25.026 A:middle
to buy some food and
you tap the Buy button.

00:29:25.346 --> 00:29:27.896 A:middle
How does your app respond
in that type of situation?

00:29:29.316 --> 00:29:32.856 A:middle
And we want to recommend that
you provide instant feedback

00:29:32.856 --> 00:29:35.436 A:middle
to your users rather than
showing a loading indicator.

00:29:35.936 --> 00:29:37.906 A:middle
So we'll walk through an
example of what that means.

00:29:38.506 --> 00:29:40.426 A:middle
So, here, we have that
food delivery app I was

00:29:40.426 --> 00:29:40.986 A:middle
talking about.

00:29:40.986 --> 00:29:43.396 A:middle
I can tap on one of
my favorite items

00:29:43.396 --> 00:29:45.466 A:middle
and there's a big Buy button,
and so we think this is going

00:29:45.466 --> 00:29:47.176 A:middle
to be a really fast
and quick interaction.

00:29:47.726 --> 00:29:50.816 A:middle
And I tap on Buy and I
get a loading indicator.

00:29:51.036 --> 00:29:54.606 A:middle
And that's because the app has
to go talk with the server,

00:29:54.606 --> 00:29:57.536 A:middle
it has to process the order, it
has to get that confirmation.

00:29:57.536 --> 00:30:01.346 A:middle
And then once it's done that, it
has to send back to the Watch.

00:29:57.536 --> 00:30:01.346 A:middle
And then once it's done that, it
has to send back to the Watch.

00:30:01.346 --> 00:30:04.696 A:middle
And only then is it going to
remove the loading indicator

00:30:04.866 --> 00:30:06.276 A:middle
and say, "Hey, your
order is on its way."

00:30:07.336 --> 00:30:08.686 A:middle
And if we look at
a timeline of this,

00:30:08.686 --> 00:30:09.766 A:middle
it really shows the problem.

00:30:10.076 --> 00:30:11.466 A:middle
Right? We start with
choosing the item.

00:30:11.466 --> 00:30:12.806 A:middle
We tap Buy.

00:30:13.826 --> 00:30:15.276 A:middle
And then we show the
loading indicator.

00:30:15.846 --> 00:30:18.076 A:middle
And during this time, the
user just raises their wrist

00:30:18.076 --> 00:30:21.396 A:middle
and stares at your app until
you can show that confirmation.

00:30:21.856 --> 00:30:24.356 A:middle
And so the user is only
actively interacting with this

00:30:24.356 --> 00:30:25.546 A:middle
at the beginning and the end,

00:30:25.546 --> 00:30:28.226 A:middle
and so most of the time
is just spent waiting.

00:30:28.756 --> 00:30:31.756 A:middle
So we can definitely improve
on this type of interaction.

00:30:33.036 --> 00:30:36.356 A:middle
So, alternatively, if we
go back to our food app

00:30:36.356 --> 00:30:40.016 A:middle
and now we tap the Buy button,
we have instant feedback.

00:30:40.556 --> 00:30:42.496 A:middle
The key thing here is
this isn't confirmation

00:30:42.496 --> 00:30:44.086 A:middle
because we haven't
done any networking.

00:30:44.406 --> 00:30:46.156 A:middle
We can't actually say
the order is on its way

00:30:46.156 --> 00:30:47.196 A:middle
because we have no idea.

00:30:47.536 --> 00:30:49.346 A:middle
But we want to provide
this feedback

00:30:49.346 --> 00:30:51.356 A:middle
and ultimately give
the user confidence

00:30:51.696 --> 00:30:53.556 A:middle
that the app is taking
care of their order.

00:30:54.036 --> 00:30:56.616 A:middle
And this allows the user then
to go and drop their wrist

00:30:56.616 --> 00:30:58.786 A:middle
and not have to wait
on the application.

00:30:59.336 --> 00:31:00.796 A:middle
And now, in the background,

00:30:59.336 --> 00:31:00.796 A:middle
And now, in the background,

00:31:00.796 --> 00:31:05.376 A:middle
the app will use a background
NSURLSession to go talk

00:31:05.376 --> 00:31:08.076 A:middle
with the server, and then
eventually gets a response.

00:31:08.676 --> 00:31:10.906 A:middle
And then, in the background,
the app is woken up

00:31:11.336 --> 00:31:14.706 A:middle
and it can use the new local
notification support to say,

00:31:14.706 --> 00:31:16.506 A:middle
"OK, now your order
is actually confirmed.

00:31:16.506 --> 00:31:17.246 A:middle
It's on its way."

00:31:17.796 --> 00:31:20.516 A:middle
And then you have all the same
information that you had before.

00:31:21.636 --> 00:31:22.946 A:middle
And looking at a
timeline of this,

00:31:22.946 --> 00:31:25.976 A:middle
it really shows how much it
helps and improves things.

00:31:26.326 --> 00:31:27.706 A:middle
So we choose an item,
we tap Buy,

00:31:27.706 --> 00:31:28.866 A:middle
and so we start out
the same way.

00:31:30.036 --> 00:31:32.236 A:middle
And then instead of showing
the loading indicator,

00:31:32.236 --> 00:31:33.166 A:middle
we show the feedback.

00:31:33.946 --> 00:31:35.476 A:middle
And then after we
do the networking,

00:31:35.776 --> 00:31:36.756 A:middle
we show the notification.

00:31:37.726 --> 00:31:39.546 A:middle
And so as far as the
app is concerned,

00:31:39.546 --> 00:31:41.836 A:middle
the overall interaction
is actually about the same

00:31:41.836 --> 00:31:43.746 A:middle
as it was in the first example.

00:31:44.506 --> 00:31:47.976 A:middle
But from the user's point
of view, it feels far faster

00:31:47.976 --> 00:31:49.476 A:middle
and far more responsive.

00:31:49.746 --> 00:31:51.886 A:middle
And so it's just a better
interaction overall.

00:31:51.966 --> 00:31:54.956 A:middle
I do want to point out here
how you can actually do

00:31:54.956 --> 00:31:57.436 A:middle
that processing after the
user has dropped their wrist.

00:31:57.666 --> 00:31:58.556 A:middle
If you're doing networking,

00:31:58.556 --> 00:32:02.196 A:middle
you can use a background
NSURLSession.

00:31:58.556 --> 00:32:02.196 A:middle
you can use a background
NSURLSession.

00:32:02.196 --> 00:32:03.836 A:middle
And make sure to
use a download task

00:32:03.836 --> 00:32:05.566 A:middle
because that will enable
your app to be woken

00:32:05.566 --> 00:32:07.556 A:middle
up in the background
after it's been done.

00:32:07.636 --> 00:32:10.056 A:middle
And then at that point, you
can do a local notification

00:32:10.056 --> 00:32:11.526 A:middle
that makes sense in
your application.

00:32:12.856 --> 00:32:16.196 A:middle
Or if you have to do
processing on the Watch itself,

00:32:16.196 --> 00:32:18.166 A:middle
you can take out a
background task assertion.

00:32:18.166 --> 00:32:19.796 A:middle
We had a great walkthrough
of this

00:32:19.796 --> 00:32:22.066 A:middle
in a session last year called
WatchKit Tips and Tricks,

00:32:22.336 --> 00:32:24.396 A:middle
so make sure to check that
out if you need to do any type

00:32:24.396 --> 00:32:26.406 A:middle
of processing on
the Watch itself.

00:32:27.146 --> 00:32:29.906 A:middle
So 2 seconds is a very
audacious goal in terms

00:32:29.906 --> 00:32:32.586 A:middle
of how fast interactions
on Apple Watch should be.

00:32:32.966 --> 00:32:34.776 A:middle
But we really think that
it should be the goal

00:32:34.776 --> 00:32:36.176 A:middle
as you're building
your applications

00:32:36.176 --> 00:32:39.956 A:middle
because it can really inform
how you design and build them.

00:32:40.786 --> 00:32:43.756 A:middle
So as you're going about
creating new applications

00:32:43.756 --> 00:32:46.796 A:middle
or thinking about your existing
ones, make sure to focus

00:32:46.796 --> 00:32:48.796 A:middle
on quick interactions right
from the very beginning.

00:32:48.976 --> 00:32:50.876 A:middle
And think about what
are the features

00:32:50.876 --> 00:32:52.836 A:middle
that your users are
going to want to be using

00:32:52.836 --> 00:32:55.566 A:middle
in your applications, and make
sure that those are surfaced

00:32:55.566 --> 00:32:58.436 A:middle
to the very front and are
really fast and responsive.

00:32:59.816 --> 00:33:01.846 A:middle
Use complications
and notifications

00:32:59.816 --> 00:33:01.846 A:middle
Use complications
and notifications

00:33:01.846 --> 00:33:04.736 A:middle
because they just create really
fast interactions overall,

00:33:05.236 --> 00:33:09.306 A:middle
and they just provide a lot
more utility to the user

00:33:09.306 --> 00:33:10.266 A:middle
for your applications.

00:33:12.236 --> 00:33:15.976 A:middle
Use SceneKit and SpriteKit
to create really rich

00:33:16.106 --> 00:33:18.126 A:middle
but also interactive
types of interfaces.

00:33:18.426 --> 00:33:20.456 A:middle
And they can add a lot of power

00:33:20.456 --> 00:33:23.106 A:middle
to your existing
apps or new apps.

00:33:23.106 --> 00:33:24.596 A:middle
And so we're really excited
about what you're going

00:33:24.596 --> 00:33:26.786 A:middle
to be doing with those.

00:33:27.166 --> 00:33:28.496 A:middle
Simplify the navigation.

00:33:28.496 --> 00:33:31.486 A:middle
Again, a lot of work
has been done in watchOS

00:33:31.676 --> 00:33:34.236 A:middle
to simplify the navigation
at a system level.

00:33:34.236 --> 00:33:36.686 A:middle
But we also want that to
carry through within all

00:33:36.686 --> 00:33:37.996 A:middle
of our applications as well.

00:33:39.456 --> 00:33:41.666 A:middle
And, again, never
make the user wait.

00:33:41.666 --> 00:33:43.536 A:middle
If you're showing a
loading indicator on screen,

00:33:43.716 --> 00:33:45.246 A:middle
try and reorganize your app

00:33:45.336 --> 00:33:47.336 A:middle
to allow the user
to drop their wrist.

00:33:47.636 --> 00:33:49.006 A:middle
Provide the instant
type of feedback,

00:33:49.006 --> 00:33:50.546 A:middle
and just give the
user confidence

00:33:50.546 --> 00:33:53.426 A:middle
that your app is
taking care of things.

00:33:53.426 --> 00:33:55.876 A:middle
And so for more information on
anything that we talked about,

00:33:56.236 --> 00:33:57.606 A:middle
go and check out the
developer website.

00:33:57.606 --> 00:33:59.976 A:middle
And there are tons
of sessions all week.

00:33:59.976 --> 00:34:02.496 A:middle
I highly recommend the Designing
Great Apple Watch Experiences

00:33:59.976 --> 00:34:02.496 A:middle
I highly recommend the Designing
Great Apple Watch Experiences

00:34:02.496 --> 00:34:06.156 A:middle
talk this afternoon or the
watchOS talks tomorrow as well.

00:34:06.156 --> 00:34:08.706 A:middle
With that, I want to
thank you all for coming.

00:34:08.706 --> 00:34:09.976 A:middle
And enjoy the rest of the
week in San Francisco.

00:34:10.507 --> 00:34:12.507 A:middle
[ Applause ]
