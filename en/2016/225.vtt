WEBVTT

00:00:06.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:22.516 --> 00:00:28.106 A:middle
[ Applause ]

00:00:28.606 --> 00:00:29.376 A:middle
&gt;&gt; Hello everyone.

00:00:29.566 --> 00:00:31.086 A:middle
My name is Vineet Khosla.

00:00:31.206 --> 00:00:34.866 A:middle
And today, I'll be joined by
Diana Huang and Scott Andrus,

00:00:35.416 --> 00:00:37.106 A:middle
as we walk through the process

00:00:37.106 --> 00:00:39.656 A:middle
of extending your
applications with SiriKit.

00:00:40.346 --> 00:00:44.076 A:middle
In the introduction session,

00:00:44.076 --> 00:00:46.156 A:middle
we learned there are
three main components

00:00:46.156 --> 00:00:47.406 A:middle
to a SiriKit-enabled app.

00:00:48.516 --> 00:00:51.926 A:middle
You have the Intents extension.

00:00:52.586 --> 00:00:54.716 A:middle
You have the Intents
UI extension.

00:00:54.976 --> 00:00:56.896 A:middle
And you have, of
course, your Application.

00:00:57.466 --> 00:01:02.016 A:middle
With the Intents extension,
we have three main methods.

00:00:57.466 --> 00:01:02.016 A:middle
With the Intents extension,
we have three main methods.

00:01:02.016 --> 00:01:04.656 A:middle
You have the Resolve,
Confirm and Handle.

00:01:06.086 --> 00:01:10.456 A:middle
In this session, we are going
to talk about three things.

00:01:11.246 --> 00:01:12.846 A:middle
We're going to talk about how

00:01:12.846 --> 00:01:15.826 A:middle
to prepare your application
to adopt SiriKit.

00:01:16.426 --> 00:01:18.696 A:middle
And then we will talk about how

00:01:18.696 --> 00:01:21.946 A:middle
to add your first
Intents extension,

00:01:22.486 --> 00:01:26.516 A:middle
and finally we will talk about
how to bring your applications,

00:01:26.516 --> 00:01:30.206 A:middle
user interface and style
into the Siri experience,

00:01:30.496 --> 00:01:33.646 A:middle
by writing your Intents
UI extension.

00:01:34.386 --> 00:01:37.146 A:middle
For this session, we are going

00:01:37.146 --> 00:01:41.806 A:middle
to use our favorite chat
app, the UnicornChat.

00:01:42.616 --> 00:01:44.556 A:middle
Some of you guys
know about this app.

00:01:44.676 --> 00:01:48.166 A:middle
It's a favorite app that is
used by the Siri team internally

00:01:48.166 --> 00:01:49.666 A:middle
to chat with our unicorns.

00:01:50.236 --> 00:01:53.506 A:middle
It's a standard messaging app
that does sending and receiving

00:01:53.506 --> 00:01:56.586 A:middle
of messages, but it
has a certain amount

00:01:56.586 --> 00:02:00.256 A:middle
of unique corniness, which
makes it a special app for us.

00:01:56.586 --> 00:02:00.256 A:middle
of unique corniness, which
makes it a special app for us.

00:02:00.556 --> 00:02:02.946 A:middle
And we will add SiriKit
support to it today.

00:02:05.836 --> 00:02:08.856 A:middle
So, SiriKit is built
on extensions.

00:02:09.756 --> 00:02:12.906 A:middle
But before your application
can go into extensions,

00:02:12.906 --> 00:02:14.586 A:middle
there are number of
things you can do to it

00:02:14.976 --> 00:02:16.926 A:middle
to help it adopt SiriKit.

00:02:17.746 --> 00:02:20.136 A:middle
I'm going to cover a few
of those areas first.

00:02:21.306 --> 00:02:25.186 A:middle
We will talk about preparing
your application by moving some

00:02:25.186 --> 00:02:27.756 A:middle
of your code to embedded
frameworks.

00:02:28.296 --> 00:02:31.016 A:middle
Embedded frameworks are
a great way to reuse code

00:02:31.016 --> 00:02:33.416 A:middle
between your application
and your extension.

00:02:34.406 --> 00:02:36.326 A:middle
Having moved some of the code

00:02:36.326 --> 00:02:38.316 A:middle
to embedded frameworks
will provide us

00:02:38.316 --> 00:02:41.856 A:middle
with a great opportunity to
write some unit tests around it.

00:02:42.576 --> 00:02:45.146 A:middle
And finally we will
talk a little bit

00:02:45.146 --> 00:02:47.786 A:middle
about what is an
appropriate architecture

00:02:48.306 --> 00:02:51.096 A:middle
for architecting
your extensions based

00:02:51.096 --> 00:02:54.356 A:middle
on the intents your
application subscribes to.

00:02:55.116 --> 00:02:59.446 A:middle
So let's dig a little bit
deeper into embedded frameworks.

00:03:01.356 --> 00:03:03.036 A:middle
Your extensions will need

00:03:03.036 --> 00:03:04.746 A:middle
to do everything your
application does.

00:03:05.116 --> 00:03:07.966 A:middle
It will need to handle the
intent, and it will also need

00:03:07.966 --> 00:03:10.706 A:middle
to render UI when
it is required.

00:03:11.206 --> 00:03:14.726 A:middle
And using embedded frameworks
is a great way to reuse code

00:03:14.726 --> 00:03:17.616 A:middle
between your application,
as well as your extension,

00:03:17.956 --> 00:03:19.446 A:middle
because you want to ensure

00:03:19.446 --> 00:03:22.896 A:middle
that your users get a uniform
experience, whether they come

00:03:22.896 --> 00:03:24.206 A:middle
in from your application

00:03:24.206 --> 00:03:27.536 A:middle
or whether they are
being invoked by SiriKit.

00:03:27.536 --> 00:03:33.056 A:middle
In the case of UnicornChat, we
found there were a few areas

00:03:33.056 --> 00:03:36.346 A:middle
that made a lot of sense to
move to embedded frameworks.

00:03:36.936 --> 00:03:41.066 A:middle
We took a look at our
networking layer of UnicornChat.

00:03:41.476 --> 00:03:44.136 A:middle
This is everything that
is related to sending

00:03:44.136 --> 00:03:45.706 A:middle
and receiving of messages.

00:03:46.136 --> 00:03:50.546 A:middle
And we realized that this is
a really good piece of code

00:03:50.546 --> 00:03:53.886 A:middle
to move entirely to embedded
frameworks, so it can be reused

00:03:53.886 --> 00:03:56.306 A:middle
by my application as
well as the extension.

00:03:57.746 --> 00:04:00.536 A:middle
Having done that, we took
a look at our data model.

00:03:57.746 --> 00:04:00.536 A:middle
Having done that, we took
a look at our data model.

00:04:01.226 --> 00:04:05.436 A:middle
Your application as well as your
extension should be accessing

00:04:05.436 --> 00:04:06.466 A:middle
the same data model.

00:04:06.666 --> 00:04:10.146 A:middle
In the case of our chat app
that meant it was the database

00:04:10.496 --> 00:04:13.306 A:middle
as well as the data accessor
methods written for it

00:04:13.526 --> 00:04:15.636 A:middle
that could be moved to
an embedded framework,

00:04:15.976 --> 00:04:18.836 A:middle
so it could be reused by
application and extension.

00:04:19.505 --> 00:04:22.856 A:middle
After moving that,
we took a look

00:04:23.166 --> 00:04:26.326 A:middle
at our decision-making logic.

00:04:27.356 --> 00:04:29.126 A:middle
This is the business
logic of your app.

00:04:29.836 --> 00:04:31.576 A:middle
In the earlier sessions
we had covered

00:04:31.576 --> 00:04:33.986 A:middle
that we have the Resolved,
Confirm and Handle.

00:04:34.826 --> 00:04:36.996 A:middle
These three methods
will correspond

00:04:36.996 --> 00:04:39.356 A:middle
to the real business
logic of your app.

00:04:39.626 --> 00:04:43.116 A:middle
And you would always want to
ensure that your application,

00:04:43.586 --> 00:04:46.046 A:middle
as well as your Intents
extension,

00:04:46.396 --> 00:04:49.686 A:middle
gives your users the same
experience when they're trying

00:04:49.686 --> 00:04:52.286 A:middle
to complete that one
task, irrespective

00:04:52.286 --> 00:04:53.406 A:middle
of where they come from.

00:04:53.756 --> 00:04:56.776 A:middle
So we moved our decision-making
logic also

00:04:56.776 --> 00:04:57.986 A:middle
to an embedded framework.

00:04:58.596 --> 00:05:03.236 A:middle
And finally, if your application
is signing up for intents

00:04:58.596 --> 00:05:03.236 A:middle
And finally, if your application
is signing up for intents

00:05:03.236 --> 00:05:06.556 A:middle
that requires it to rend
a user interface, a UI,

00:05:06.556 --> 00:05:10.316 A:middle
into the SiriKit, that
code should also be moved

00:05:10.316 --> 00:05:12.006 A:middle
into an embedded framework.

00:05:12.006 --> 00:05:13.866 A:middle
So you can reuse,
and once again,

00:05:14.266 --> 00:05:18.516 A:middle
provide consistent experience
across the board for your users.

00:05:18.516 --> 00:05:20.356 A:middle
Whether they come in
from your application

00:05:20.616 --> 00:05:22.976 A:middle
or whether they are coming
in from an Intents extension.

00:05:26.496 --> 00:05:30.466 A:middle
I also recommend everyone
to watch this 2015 talk,

00:05:30.466 --> 00:05:32.016 A:middle
App Extension Best Practices.

00:05:32.016 --> 00:05:32.706 A:middle
I watched it.

00:05:32.706 --> 00:05:34.006 A:middle
I found it really useful.

00:05:34.756 --> 00:05:39.986 A:middle
So after having moved all of our
code into embedded frameworks

00:05:39.986 --> 00:05:44.236 A:middle
or some of it, it provided
us with a greater opportunity

00:05:44.236 --> 00:05:46.016 A:middle
to write some quality
unit tests.

00:05:46.916 --> 00:05:49.706 A:middle
Now I know I'm preaching
to the choir in this room.

00:05:49.706 --> 00:05:51.736 A:middle
And all the engineers
in this room,

00:05:51.946 --> 00:05:53.926 A:middle
we write our unit
tests really well.

00:05:54.196 --> 00:05:56.086 A:middle
We all follow test-driven
development.

00:05:56.086 --> 00:05:57.816 A:middle
It happens every
time, I know it.

00:05:58.416 --> 00:06:01.046 A:middle
But having moved
some of this code

00:05:58.416 --> 00:06:01.046 A:middle
But having moved
some of this code

00:06:01.166 --> 00:06:02.946 A:middle
to an embedded framework
will provide you

00:06:02.946 --> 00:06:05.626 A:middle
with a new opportunity to
write some quality tests.

00:06:06.576 --> 00:06:09.586 A:middle
More specifically when we
are dealing with SiriKit.

00:06:09.816 --> 00:06:12.816 A:middle
What you can do is
create some mock intents

00:06:13.146 --> 00:06:16.356 A:middle
and then write tests to
ensure that your app,

00:06:16.356 --> 00:06:19.926 A:middle
as well as your extension,
is responding properly to it.

00:06:20.406 --> 00:06:22.526 A:middle
You don't need a real
live Siri interaction.

00:06:22.586 --> 00:06:24.876 A:middle
You can just mock
the Intent Object

00:06:24.876 --> 00:06:26.706 A:middle
that you expect to
receive from Siri.

00:06:26.986 --> 00:06:29.746 A:middle
And you can write
offline tests around it.

00:06:31.496 --> 00:06:35.596 A:middle
Finally, let's think a little
bit about architecting your app

00:06:36.186 --> 00:06:37.996 A:middle
for the appropriate
number of extensions.

00:06:38.996 --> 00:06:42.016 A:middle
Typically an app will sign
up for multiple intents.

00:06:42.366 --> 00:06:44.186 A:middle
It will want to do
more than one thing.

00:06:44.526 --> 00:06:48.016 A:middle
In our case, our UnicornChat
was signed up to work

00:06:48.016 --> 00:06:51.656 A:middle
with SendMessageIntent, but
let's assume we also add

00:06:51.726 --> 00:06:54.186 A:middle
to its capability, and
we can do audio calls

00:06:54.186 --> 00:06:55.336 A:middle
and video calls with it.

00:06:55.836 --> 00:06:58.376 A:middle
At this point the question
is how do we architect

00:06:58.376 --> 00:06:59.306 A:middle
our extensions?

00:06:59.626 --> 00:07:01.206 A:middle
Should we put intent handling

00:06:59.626 --> 00:07:01.206 A:middle
Should we put intent handling

00:07:01.206 --> 00:07:03.606 A:middle
of all these intents
in one extension?

00:07:03.896 --> 00:07:07.286 A:middle
But that might make our code
really bulky and unmanageable.

00:07:07.836 --> 00:07:10.936 A:middle
We could do an alternate
architecture

00:07:10.936 --> 00:07:12.436 A:middle
where you can say
it's really clean

00:07:12.436 --> 00:07:14.646 A:middle
to start putting all
my intent handling

00:07:14.646 --> 00:07:16.716 A:middle
in a separate extension
by themselves.

00:07:17.736 --> 00:07:21.626 A:middle
That is great, but you
might end up redoing a lot

00:07:21.626 --> 00:07:24.506 A:middle
of boilerplate code and also
creating more extensions

00:07:24.506 --> 00:07:27.316 A:middle
than is necessary and creating
a memory pressure that's

00:07:27.316 --> 00:07:27.986 A:middle
not needed.

00:07:29.276 --> 00:07:31.446 A:middle
So, in the case of UnicornChat

00:07:31.446 --> 00:07:33.786 A:middle
and I'm sure this is what
would be the guidance,

00:07:34.056 --> 00:07:38.416 A:middle
is think about which intents
fall naturally together.

00:07:39.176 --> 00:07:43.126 A:middle
In our case, we found
the audio call

00:07:43.126 --> 00:07:47.316 A:middle
and the video call intent could
fall naturally in one extension

00:07:47.706 --> 00:07:54.166 A:middle
because doing so let us maximize
the code we use while sending

00:07:54.166 --> 00:07:58.216 A:middle
of messages intent could live in
a separate extension by itself.

00:07:58.936 --> 00:08:03.416 A:middle
In other words, there is
no magic bullet over here.

00:07:58.936 --> 00:08:03.416 A:middle
In other words, there is
no magic bullet over here.

00:08:03.846 --> 00:08:05.546 A:middle
You know your application best.

00:08:05.676 --> 00:08:09.126 A:middle
You will know which intents your
application is signing up for.

00:08:09.356 --> 00:08:12.726 A:middle
And you will need to choose
an architecture which ensures

00:08:12.726 --> 00:08:15.856 A:middle
that you have a manageable
code but at the same time,

00:08:15.856 --> 00:08:18.416 A:middle
you don't create too many
extensions causing undue

00:08:18.416 --> 00:08:19.106 A:middle
memory pressure.

00:08:19.526 --> 00:08:24.236 A:middle
And having taken care
of these conservations,

00:08:24.346 --> 00:08:28.036 A:middle
your application is now
ready to adopt SiriKit.

00:08:28.266 --> 00:08:31.276 A:middle
And to help us write our
first Intents extension,

00:08:31.606 --> 00:08:32.926 A:middle
I invite Diana onstage.

00:08:33.515 --> 00:08:42.515 A:middle
[ Applause ]

00:08:43.015 --> 00:08:43.806 A:middle
&gt;&gt; Thank you, Vineet.

00:08:48.156 --> 00:08:49.346 A:middle
Hello, everyone.

00:08:49.556 --> 00:08:53.436 A:middle
My name is Diana Huang, and I'm
here to actually talk to you

00:08:53.436 --> 00:08:56.976 A:middle
about how to create your first
Intents extension to work

00:08:56.976 --> 00:09:01.276 A:middle
with Siri, now that your app is
fully prepared to adopt SiriKit.

00:08:56.976 --> 00:09:01.276 A:middle
with Siri, now that your app is
fully prepared to adopt SiriKit.

00:09:02.416 --> 00:09:03.936 A:middle
I will also show it to you

00:09:03.936 --> 00:09:07.916 A:middle
in Xcode using the
UnicornChat as an example.

00:09:08.466 --> 00:09:13.916 A:middle
So to get started,
there are three steps

00:09:14.146 --> 00:09:15.176 A:middle
that you want to follow.

00:09:16.496 --> 00:09:19.796 A:middle
First, you want to add an
Intents extension target

00:09:19.796 --> 00:09:21.556 A:middle
to your app.

00:09:21.556 --> 00:09:23.316 A:middle
And next up, you want

00:09:23.316 --> 00:09:25.756 A:middle
to configure the
extensions Info.plist.

00:09:25.756 --> 00:09:29.216 A:middle
And lastly you need to look

00:09:29.216 --> 00:09:31.606 A:middle
at the principal class
of the extension.

00:09:33.106 --> 00:09:35.936 A:middle
Let's talk a little bit more
about these three steps.

00:09:36.556 --> 00:09:39.866 A:middle
To add an Intents
extension target,

00:09:40.326 --> 00:09:44.646 A:middle
you will go to Xcode,
File, New, Target.

00:09:44.926 --> 00:09:48.746 A:middle
And then pick Intents
extension from the list.

00:09:49.796 --> 00:09:52.476 A:middle
For those of you who have
worked with extensions before,

00:09:52.806 --> 00:09:55.736 A:middle
it's just like how you create
other extension targets.

00:09:56.256 --> 00:09:59.316 A:middle
And then, let's take a look

00:09:59.316 --> 00:10:02.006 A:middle
at the Info.plist
of your extension.

00:09:59.316 --> 00:10:02.006 A:middle
at the Info.plist
of your extension.

00:10:03.726 --> 00:10:08.646 A:middle
So we have the existing key of
NSExtension and inside that,

00:10:08.686 --> 00:10:11.086 A:middle
we have NSExtensionAttributes.

00:10:11.996 --> 00:10:13.326 A:middle
And in side that dictionary,

00:10:13.586 --> 00:10:16.866 A:middle
we're introducing two
new keys in the iOS 10.

00:10:17.506 --> 00:10:22.196 A:middle
The IntentsSupported and
IntentsRestricted WhileLocked.

00:10:23.706 --> 00:10:27.866 A:middle
So IntentsSupported is
a required key for you

00:10:27.866 --> 00:10:30.346 A:middle
to specify your extension's
capabilities.

00:10:31.296 --> 00:10:35.176 A:middle
In other words, you want to put
an array of intent class names

00:10:35.346 --> 00:10:37.786 A:middle
that you want to
support for extension

00:10:38.036 --> 00:10:40.596 A:middle
into this array, for
IntentsSupported.

00:10:42.376 --> 00:10:46.336 A:middle
IntentsRestricted WhileLocked
is an optional key for you

00:10:46.336 --> 00:10:48.426 A:middle
to specify your locked
screen behavior.

00:10:50.246 --> 00:10:54.856 A:middle
So by default, Siri already
restricts a few domains

00:10:54.926 --> 00:10:57.716 A:middle
to not be easily invoked
when the device is locked.

00:10:58.256 --> 00:11:02.386 A:middle
For example, the payments domain
or the photo search domain.

00:10:58.256 --> 00:11:02.386 A:middle
For example, the payments domain
or the photo search domain.

00:11:03.336 --> 00:11:07.326 A:middle
But if your app has a tighter
security requirement than Siri,

00:11:07.716 --> 00:11:10.546 A:middle
then you can put the intent
class that you want to restrict

00:11:10.736 --> 00:11:14.186 A:middle
into this array, for
IntentsRestricted WhileLocked.

00:11:15.136 --> 00:11:18.126 A:middle
And this is to tell
Siri, please prompt users

00:11:18.126 --> 00:11:21.696 A:middle
to unlock the device before
invoking your extension

00:11:21.726 --> 00:11:25.266 A:middle
to handle the intent.

00:11:25.266 --> 00:11:28.996 A:middle
So now our Info.plist for the
extension is also configured.

00:11:30.296 --> 00:11:32.416 A:middle
Let's now talk about
the principal class.

00:11:33.766 --> 00:11:37.916 A:middle
So the principal class of your
Intents extension must be a

00:11:37.916 --> 00:11:41.966 A:middle
subclass of INExtension,
which conforms

00:11:41.966 --> 00:11:44.986 A:middle
to the INIntentHandlerProviding
protocol.

00:11:45.506 --> 00:11:50.246 A:middle
This protocol has one and only
method called handlerForintent.

00:11:50.896 --> 00:11:54.896 A:middle
So the method name is
pretty self-explanatory.

00:11:55.816 --> 00:11:58.246 A:middle
You're given an Intent
Object and you need

00:11:58.246 --> 00:12:00.066 A:middle
to return a Handler Object.

00:11:58.246 --> 00:12:00.066 A:middle
to return a Handler Object.

00:12:00.836 --> 00:12:04.616 A:middle
And do note the Handler Object
that you return must conform

00:12:04.616 --> 00:12:06.986 A:middle
to the specific intent
handling protocol.

00:12:08.216 --> 00:12:12.966 A:middle
So for UnicornChat, we're going
to support INSendMessageIntent.

00:12:13.936 --> 00:12:18.506 A:middle
So whenever we're passing an
instance of INSendMessageIntent,

00:12:18.926 --> 00:12:21.316 A:middle
we will return a
handler that conforms

00:12:21.356 --> 00:12:24.176 A:middle
to INSendMessageIntent
handling protocol.

00:12:25.476 --> 00:12:29.026 A:middle
So now we have covered
these three steps.

00:12:29.456 --> 00:12:33.106 A:middle
Now let's actually go follow
them in Xcode for UnicornChat.

00:12:35.216 --> 00:12:40.106 A:middle
So here we have the
UnicornChat Xcode project opened

00:12:40.746 --> 00:12:42.006 A:middle
and in the interest of time,

00:12:42.296 --> 00:12:45.196 A:middle
I have already created
an Intents extension.

00:12:45.806 --> 00:12:48.216 A:middle
So let's go take a look
at the second step,

00:12:48.476 --> 00:12:53.336 A:middle
which is to configure
the Info.plist.

00:12:53.456 --> 00:12:56.486 A:middle
So first thing, let's
actually zoom

00:12:56.486 --> 00:12:57.906 A:middle
in a little bit to see better.

00:13:01.876 --> 00:13:02.576 A:middle
All right.

00:13:03.046 --> 00:13:05.796 A:middle
So here we have the
NSExtension dictionary.

00:13:06.836 --> 00:13:11.016 A:middle
If we expand it, you can see
the NSExtensionAttributes

00:13:11.016 --> 00:13:11.536 A:middle
dictionary.

00:13:12.726 --> 00:13:15.596 A:middle
And if we further
expand this dictionary,

00:13:15.796 --> 00:13:18.266 A:middle
you will see the two new
keys that we're introducing.

00:13:19.186 --> 00:13:22.976 A:middle
IntentsSupported and
IntentsRestricted WhileLocked.

00:13:24.276 --> 00:13:28.046 A:middle
First, in order to support
INSentMessageIntent,

00:13:28.456 --> 00:13:31.896 A:middle
let's add an item inside
the IntentSupported array.

00:13:32.976 --> 00:13:35.136 A:middle
And we will put in
the intent class name,

00:13:35.496 --> 00:13:38.116 A:middle
which is INSendMessageIntent
in here.

00:13:38.636 --> 00:13:42.946 A:middle
And next, let's take a look
at the locked screen behavior.

00:13:44.026 --> 00:13:49.626 A:middle
So because UnicornChat is
a chat application used

00:13:49.626 --> 00:13:52.716 A:middle
for private communications
among unicorns who would really

00:13:52.716 --> 00:13:56.816 A:middle
like to enjoy some privacy,
we decided to lock it down so

00:13:56.816 --> 00:14:00.266 A:middle
that users will have to unlock
their device first before they

00:13:56.816 --> 00:14:00.266 A:middle
that users will have to unlock
their device first before they

00:14:00.266 --> 00:14:02.896 A:middle
can send a UnicornChat
message through Siri.

00:14:03.416 --> 00:14:09.526 A:middle
So to do that, we will add an
item inside the IntentRestricted

00:14:09.526 --> 00:14:11.146 A:middle
WhileLocked array.

00:14:11.836 --> 00:14:14.746 A:middle
And again, put in the
intent class name,

00:14:15.386 --> 00:14:16.876 A:middle
INSendMessageIntent here.

00:14:17.406 --> 00:14:21.826 A:middle
And now we're done configuring
the extension's Info.plist.

00:14:22.396 --> 00:14:26.936 A:middle
So the third step is
we want to take a look

00:14:27.216 --> 00:14:29.896 A:middle
at the extensions
principal class.

00:14:31.336 --> 00:14:33.716 A:middle
So when you create the
Intents extension target,

00:14:34.056 --> 00:14:37.016 A:middle
a principal class will be
automatically created for you.

00:14:37.456 --> 00:14:40.406 A:middle
Here, I have renamed
my principal class

00:14:40.406 --> 00:14:42.246 A:middle
to UCIntentHandler.

00:14:42.636 --> 00:14:45.396 A:middle
It is a subclass of INExtension.

00:14:45.916 --> 00:14:50.296 A:middle
And we also have the handler
for Intent method here.

00:14:51.866 --> 00:14:55.406 A:middle
So you can see that the default
implementation returns self,

00:14:56.386 --> 00:15:00.756 A:middle
which is returning an instance
of the principal class itself.

00:14:56.386 --> 00:15:00.756 A:middle
which is returning an instance
of the principal class itself.

00:15:02.186 --> 00:15:04.726 A:middle
But just to make our
code a little bit clearer

00:15:05.276 --> 00:15:07.156 A:middle
and make it more extensible.

00:15:07.156 --> 00:15:11.866 A:middle
If we're going to support more
intents in this extension later,

00:15:12.376 --> 00:15:16.306 A:middle
then we're going to create a
separate intent handler class.

00:15:17.716 --> 00:15:25.206 A:middle
So we're going to do that by
creating a new file called

00:15:25.666 --> 00:15:27.846 A:middle
UCSentMessage IntentHandler.

00:15:28.286 --> 00:15:34.076 A:middle
And we will also import a few
frameworks, as well as putting

00:15:34.076 --> 00:15:35.556 A:middle
in the class declaration.

00:15:37.566 --> 00:15:40.436 A:middle
So here we are importing
the Intents framework,

00:15:40.976 --> 00:15:43.336 A:middle
which hosts a lot
of the SiriKit API.

00:15:45.336 --> 00:15:48.076 A:middle
We're also importing the
UnicornCore framework,

00:15:48.576 --> 00:15:51.236 A:middle
which is the embedded
framework that we have created

00:15:51.236 --> 00:15:54.606 A:middle
through to share code
among the many application

00:15:54.956 --> 00:15:56.076 A:middle
and the extensions.

00:15:57.746 --> 00:16:00.606 A:middle
And here we have the
UCSentMessage IntentHandler

00:15:57.746 --> 00:16:00.606 A:middle
And here we have the
UCSentMessage IntentHandler

00:16:00.606 --> 00:16:02.246 A:middle
class that conforms

00:16:02.246 --> 00:16:05.056 A:middle
to INSentMessage
IntentHandling protocol.

00:16:06.456 --> 00:16:06.836 A:middle
All right.

00:16:07.176 --> 00:16:09.256 A:middle
Now let's go back to
the principal class

00:16:09.626 --> 00:16:14.226 A:middle
and replace the implementation
here to return an instance

00:16:14.466 --> 00:16:18.896 A:middle
of UCSentMessage IntentHandler
for any intents passed in,

00:16:19.066 --> 00:16:21.896 A:middle
that is, of type
INSentMessageIntent.

00:16:23.006 --> 00:16:26.116 A:middle
And for all the other intents,
we're going to return nil.

00:16:26.656 --> 00:16:29.156 A:middle
And that's it.

00:16:29.526 --> 00:16:32.156 A:middle
The three steps that
you want to do to add

00:16:32.156 --> 00:16:34.686 A:middle
and configure your
first Intents extension.

00:16:35.676 --> 00:16:37.846 A:middle
Now let's talk about
the app logic.

00:16:41.336 --> 00:16:45.326 A:middle
So hopefully from the
introducing to SiriKit session

00:16:45.596 --> 00:16:47.756 A:middle
as well as Vineet
has reiterated,

00:16:48.236 --> 00:16:50.446 A:middle
your Intents extension's
interaction

00:16:50.446 --> 00:16:53.166 A:middle
with Siri can be divided
into three stages.

00:16:53.956 --> 00:16:56.996 A:middle
Resolve, Confirm and Handle.

00:16:57.506 --> 00:17:00.786 A:middle
Let's talk about Resolve first.

00:16:57.506 --> 00:17:00.786 A:middle
Let's talk about Resolve first.

00:17:01.876 --> 00:17:06.356 A:middle
So Resolve is the stage
where you want to validate

00:17:06.435 --> 00:17:12.346 A:middle
and clarify the intent
parameter values one at a time.

00:17:12.546 --> 00:17:16.435 A:middle
So we have provided for
each parameter on intent,

00:17:16.656 --> 00:17:18.965 A:middle
we have provided
a Resolve method

00:17:19.156 --> 00:17:20.816 A:middle
in the intent handling protocol.

00:17:21.746 --> 00:17:25.006 A:middle
So you may ask which ones of
the them should I implement?

00:17:25.906 --> 00:17:27.406 A:middle
Well, think about this.

00:17:27.965 --> 00:17:32.026 A:middle
Would you need Siri's help in
the process of trying to settle

00:17:32.266 --> 00:17:34.866 A:middle
on the final value of
an intent parameter?

00:17:35.616 --> 00:17:39.426 A:middle
If the answer is yes,
then you probably do want

00:17:39.426 --> 00:17:42.506 A:middle
to implement the Resolve
method for this parameter.

00:17:44.316 --> 00:17:48.086 A:middle
Let's take a look at this in
the context of UnicornChat.

00:17:48.596 --> 00:17:53.166 A:middle
So to send a message,
we need recipients.

00:17:54.286 --> 00:17:57.856 A:middle
And in order to decide on the
final values for recipients,

00:17:58.196 --> 00:18:03.156 A:middle
we need to perform a contact
search among UnicornChat's own

00:17:58.196 --> 00:18:03.156 A:middle
we need to perform a contact
search among UnicornChat's own

00:18:03.276 --> 00:18:04.276 A:middle
address book records.

00:18:05.596 --> 00:18:09.026 A:middle
There could be a few potential
outcomes of this search.

00:18:09.856 --> 00:18:12.226 A:middle
In the most simple and
straightforward path,

00:18:12.506 --> 00:18:14.976 A:middle
we will find exactly
one matching contact.

00:18:16.466 --> 00:18:17.436 A:middle
Then we're good to go.

00:18:18.566 --> 00:18:21.766 A:middle
However, it's also
possible that we find two

00:18:21.766 --> 00:18:23.366 A:middle
or more matching contacts.

00:18:23.856 --> 00:18:26.356 A:middle
In that case, it
would be really great

00:18:26.476 --> 00:18:29.826 A:middle
if Siri can help ask
the user to pick one

00:18:30.226 --> 00:18:31.306 A:middle
from the candidate list.

00:18:33.126 --> 00:18:36.806 A:middle
It's also possible that we find
no matching contacts at all.

00:18:37.856 --> 00:18:42.186 A:middle
And in that case, we would also
like Siri to tell user about it

00:18:42.356 --> 00:18:47.906 A:middle
so that the user may pick a
different recipient value.

00:18:48.056 --> 00:18:53.036 A:middle
So after having a recipient,
we also need content.

00:18:53.876 --> 00:18:58.276 A:middle
So in this case, we simply need
a value in order to proceed.

00:18:59.246 --> 00:19:03.326 A:middle
If the user simply hasn't
provided a content then we would

00:18:59.246 --> 00:19:03.326 A:middle
If the user simply hasn't
provided a content then we would

00:19:03.326 --> 00:19:07.556 A:middle
really like Siri to help us
to prompt users for a content.

00:19:09.196 --> 00:19:11.946 A:middle
So considering all these
cases, it does sound

00:19:11.946 --> 00:19:15.516 A:middle
like we should implement Resolve
methods for both recipients

00:19:15.696 --> 00:19:18.796 A:middle
and content, as we
do need Siri's help

00:19:19.006 --> 00:19:22.076 A:middle
to take further user
inputs in order to come

00:19:22.076 --> 00:19:25.586 A:middle
up with the final values
for these parameters.

00:19:27.576 --> 00:19:30.776 A:middle
So now the parameters have
been successfully resolved,

00:19:31.886 --> 00:19:33.776 A:middle
we get to the Confirm stage.

00:19:34.856 --> 00:19:37.886 A:middle
So this is the stage where
you want to do a dry run.

00:19:38.916 --> 00:19:42.736 A:middle
Think of it as if you were to
handle this intent right now.

00:19:43.116 --> 00:19:44.496 A:middle
Do you have everything
that you need?

00:19:45.326 --> 00:19:49.076 A:middle
Or are you able to
successfully handle it?

00:19:49.076 --> 00:19:50.536 A:middle
So you want to tell that answer,

00:19:50.866 --> 00:19:52.626 A:middle
along with some extra
information

00:19:52.626 --> 00:19:56.116 A:middle
that you can gather while
preflighting the intent to Siri.

00:19:56.526 --> 00:19:58.826 A:middle
So that then Siri,
when appropriate,

00:19:58.986 --> 00:20:01.746 A:middle
can communicate all this
information to the user.

00:19:58.986 --> 00:20:01.746 A:middle
can communicate all this
information to the user.

00:20:02.536 --> 00:20:06.306 A:middle
And finally user can make the
decision about whether they want

00:20:06.306 --> 00:20:09.326 A:middle
to proceed with the
action or not.

00:20:10.076 --> 00:20:13.836 A:middle
So in UnicornChat, because
of the security requirement

00:20:13.836 --> 00:20:16.196 A:middle
that we have, we need users

00:20:16.196 --> 00:20:19.026 A:middle
to reauthenticate themself
every once in a while.

00:20:19.846 --> 00:20:22.236 A:middle
So Confirm is the
perfect stage for us

00:20:22.276 --> 00:20:26.696 A:middle
to check the authentication
status of the user.

00:20:26.696 --> 00:20:30.326 A:middle
And either way, we want to tell
the result of the status check

00:20:30.596 --> 00:20:33.876 A:middle
to Siri so that either
Siri can offer users

00:20:33.876 --> 00:20:38.366 A:middle
to proceed inside Siri
or to maybe go forward

00:20:38.366 --> 00:20:41.706 A:middle
to the application in order
to finish this transaction.

00:20:41.706 --> 00:20:42.386 A:middle
All right.

00:20:43.276 --> 00:20:48.076 A:middle
So now the intent is also
confirmed, we finally come

00:20:48.076 --> 00:20:50.206 A:middle
to the stage of handling it.

00:20:51.086 --> 00:20:53.646 A:middle
Hopefully this is the
most straightforward stage

00:20:53.646 --> 00:20:54.696 A:middle
for you to understand.

00:20:55.376 --> 00:20:57.466 A:middle
You simply need to
perform the action here

00:20:57.806 --> 00:20:59.246 A:middle
and tell Siri how it went.

00:20:59.246 --> 00:21:04.786 A:middle
So in the case of UnicornChat,
we just need to send the message

00:20:59.246 --> 00:21:04.786 A:middle
So in the case of UnicornChat,
we just need to send the message

00:21:04.936 --> 00:21:06.426 A:middle
and then report back

00:21:06.586 --> 00:21:10.516 A:middle
if the message has
been successfully sent.

00:21:11.066 --> 00:21:14.976 A:middle
So now we have covered
the Resolve, Confirm

00:21:15.196 --> 00:21:17.696 A:middle
and Handle methods and concepts.

00:21:18.056 --> 00:21:19.976 A:middle
Let's actually go
implement them in Xcode.

00:21:31.506 --> 00:21:34.166 A:middle
So this time we're
going to dive right

00:21:34.166 --> 00:21:36.356 A:middle
into the IntentHandler class.

00:21:37.746 --> 00:21:40.366 A:middle
So before I start,
just a quick reminder.

00:21:40.846 --> 00:21:45.416 A:middle
All these simple code will be
posted online, so if I skip

00:21:45.416 --> 00:21:48.536 A:middle
through some of the details,
it probably means it's not

00:21:48.536 --> 00:21:50.286 A:middle
as important for you to read

00:21:50.286 --> 00:21:52.276 A:middle
through every single
line of code right now.

00:21:52.816 --> 00:21:55.616 A:middle
But if you're interested,
you can always go back online

00:21:55.846 --> 00:21:58.636 A:middle
and check out the simple
project and read by yourself.

00:21:59.486 --> 00:21:59.896 A:middle
All right.

00:22:00.676 --> 00:22:04.476 A:middle
So as we have mentioned, we're
going to cover the Resolve,

00:22:04.946 --> 00:22:06.726 A:middle
Confirm and Handle methods.

00:22:07.536 --> 00:22:11.036 A:middle
For Resolve, we are going to
implement the Resolve method

00:22:11.296 --> 00:22:13.186 A:middle
for recipients and content.

00:22:14.386 --> 00:22:15.976 A:middle
So let's start with
resolveRecipients.

00:22:19.576 --> 00:22:22.566 A:middle
So in this method
we need to focus

00:22:22.626 --> 00:22:25.886 A:middle
on the recipients
parameter that is represented

00:22:25.996 --> 00:22:28.016 A:middle
by an array of INPerson.

00:22:28.786 --> 00:22:32.486 A:middle
You can also tell from the
method signature that you need

00:22:32.536 --> 00:22:37.716 A:middle
to callback with the array
of resolution results.

00:22:38.996 --> 00:22:41.916 A:middle
So there is a one-to-one
mapping relationship

00:22:42.386 --> 00:22:46.566 A:middle
between the recipients array and
the resolution results array,

00:22:47.206 --> 00:22:49.706 A:middle
meaning that for each
recipient you need

00:22:49.706 --> 00:22:52.376 A:middle
to create a
PersonResolutionResult for it.

00:22:53.486 --> 00:22:56.026 A:middle
The only exceptions
here is when you want

00:22:56.026 --> 00:22:58.696 A:middle
to create
ResolutionResultNeedsValue

00:22:58.906 --> 00:23:00.736 A:middle
or ResolutionResultNotRequired.

00:22:58.906 --> 00:23:00.736 A:middle
or ResolutionResultNotRequired.

00:23:01.376 --> 00:23:05.756 A:middle
Where these two types of
resolutionResult are more

00:23:05.756 --> 00:23:08.146 A:middle
for a parameter level resolution

00:23:09.096 --> 00:23:12.736 A:middle
versus the other
resolutionResults are more

00:23:12.836 --> 00:23:16.386 A:middle
targeting towards the
individual parameter values.

00:23:17.996 --> 00:23:21.056 A:middle
So the first thing we want
to do, in this method,

00:23:21.676 --> 00:23:25.666 A:middle
is to try unwrapping
the Recipients Object.

00:23:26.776 --> 00:23:30.126 A:middle
And then we're going to loop
through every single recipient

00:23:30.126 --> 00:23:34.346 A:middle
and then call our API
inside UnicornCore framework

00:23:34.686 --> 00:23:37.436 A:middle
to find the matching
contacts given the name.

00:23:37.826 --> 00:23:42.656 A:middle
And next, we're going
to do a switch statement

00:23:43.136 --> 00:23:44.706 A:middle
on the matching contacts count.

00:23:45.976 --> 00:23:47.926 A:middle
And as earlier, we're going

00:23:47.926 --> 00:23:50.996 A:middle
to cover the different
results of the search.

00:23:51.796 --> 00:23:54.506 A:middle
The case where we have two
or more matching contacts.

00:23:54.786 --> 00:23:57.466 A:middle
The case where we have
exactly one matching contact.

00:23:57.726 --> 00:24:00.306 A:middle
And the case where we
have no matching contact.

00:23:57.726 --> 00:24:00.306 A:middle
And the case where we
have no matching contact.

00:24:00.746 --> 00:24:06.536 A:middle
So in the case where we find
two or more matching contacts,

00:24:07.006 --> 00:24:09.406 A:middle
we're going to create
a PersonResolution

00:24:09.406 --> 00:24:13.946 A:middle
Result.disambiguation with the
options that we have found.

00:24:14.476 --> 00:24:19.586 A:middle
In the case where we find
exactly one matching contact,

00:24:19.996 --> 00:24:20.936 A:middle
we're good to go.

00:24:21.166 --> 00:24:22.966 A:middle
So we're going to
tell Siri about it

00:24:23.286 --> 00:24:26.226 A:middle
by creating a
PersonResolutionResult.success,

00:24:26.606 --> 00:24:28.736 A:middle
with that one person
that we found.

00:24:29.266 --> 00:24:34.366 A:middle
And in the case where we
find no matching contacts,

00:24:35.036 --> 00:24:36.926 A:middle
we're going to create
a PersonResolution

00:24:36.926 --> 00:24:38.286 A:middle
Result.unsupported.

00:24:38.466 --> 00:24:43.896 A:middle
So that is the end of
our switch statement.

00:24:44.516 --> 00:24:48.246 A:middle
You might have noticed
that I went

00:24:48.246 --> 00:24:51.506 A:middle
through the code pretty fast, so
you might not have time to read

00:24:51.506 --> 00:24:52.876 A:middle
through every single
line of code.

00:24:53.426 --> 00:24:58.286 A:middle
That's perfectly fine because
the key takeaway for you here is

00:24:58.326 --> 00:25:01.476 A:middle
to know that we do have
different resolutionResults

00:24:58.326 --> 00:25:01.476 A:middle
to know that we do have
different resolutionResults

00:25:01.706 --> 00:25:04.516 A:middle
that are appropriate to
use in different scenarios.

00:25:05.296 --> 00:25:08.566 A:middle
So when it's time for you
to implement your code logic

00:25:08.916 --> 00:25:12.146 A:middle
for your result methods,
you can go online and check

00:25:12.146 --> 00:25:14.796 A:middle
out the documentation
for the complete list

00:25:14.796 --> 00:25:16.096 A:middle
of resolutionResults.

00:25:16.916 --> 00:25:19.146 A:middle
And then and also
the usage of them.

00:25:20.586 --> 00:25:20.956 A:middle
All right.

00:25:21.906 --> 00:25:25.506 A:middle
So now we have all
the resolutionResults

00:25:25.506 --> 00:25:28.436 A:middle
that we have created
for recipients.

00:25:29.316 --> 00:25:33.836 A:middle
Let's call the completion with
the array of resolutionResults.

00:25:34.336 --> 00:25:39.866 A:middle
And that marks the last line
for the case where we are able

00:25:39.866 --> 00:25:42.286 A:middle
to get some recipients
from the intent.

00:25:43.386 --> 00:25:47.376 A:middle
But in the case where the
user simply hasn't specified a

00:25:47.376 --> 00:25:50.426 A:middle
recipient, then we're going

00:25:50.426 --> 00:25:53.586 A:middle
to create a PersonResolution
Result.needsValue

00:25:53.936 --> 00:25:55.426 A:middle
and call completion with that

00:25:55.786 --> 00:25:59.736 A:middle
to tell Siri please prompt
the users for a recipient.

00:26:00.336 --> 00:26:05.426 A:middle
And that's it for our
result recipients' method.

00:26:06.476 --> 00:26:09.906 A:middle
So next, we're going to cover
the resolveContent method,

00:26:10.256 --> 00:26:13.766 A:middle
where we are simply going
to check if there's a value.

00:26:14.246 --> 00:26:17.406 A:middle
And if there isn't,
we're going to ask Siri

00:26:17.406 --> 00:26:18.976 A:middle
to kindly help us
to prompt users.

00:26:25.516 --> 00:26:28.076 A:middle
So the first thing we
do, in resolveContent,

00:26:28.236 --> 00:26:33.716 A:middle
is again try unwrapping the
content property and then check

00:26:33.716 --> 00:26:35.536 A:middle
if it's truly not empty.

00:26:36.586 --> 00:26:39.066 A:middle
If a content is indeed given,

00:26:39.536 --> 00:26:42.116 A:middle
we're going to create
ResolutionResult.success

00:26:42.566 --> 00:26:43.866 A:middle
with the given content.

00:26:45.436 --> 00:26:50.216 A:middle
Otherwise, we're going to create
ResolutionResult.needsValue,

00:26:50.456 --> 00:26:52.976 A:middle
just like we did in the
previous Resolve method.

00:26:54.476 --> 00:26:55.946 A:middle
And then call completion
with this.

00:26:59.056 --> 00:27:02.336 A:middle
So now we have gone through
both of the Resolve methods.

00:26:59.056 --> 00:27:02.336 A:middle
So now we have gone through
both of the Resolve methods.

00:27:03.076 --> 00:27:06.626 A:middle
Next up is the Confirm
method, where we're going

00:27:06.626 --> 00:27:09.726 A:middle
to check the authentication
status of the user.

00:27:16.676 --> 00:27:21.486 A:middle
So in the Confirm method, we're
going to call the shared API

00:27:21.836 --> 00:27:24.436 A:middle
in the UnicornCore
framework to check

00:27:24.686 --> 00:27:27.976 A:middle
if the user still has a
valid authentication status.

00:27:29.096 --> 00:27:31.526 A:middle
If he or she does,
then we're going

00:27:31.526 --> 00:27:34.636 A:middle
to create an
INSentMessageIntentResponse

00:27:35.146 --> 00:27:38.766 A:middle
with the code success
and a nil userActivity.

00:27:39.946 --> 00:27:43.376 A:middle
I will talk about the
userActivity in just a moment.

00:27:43.996 --> 00:27:46.876 A:middle
But now let's move onto the case

00:27:47.096 --> 00:27:49.536 A:middle
where the user is no
longer authenticated.

00:27:50.506 --> 00:27:54.306 A:middle
Well, in this case, we're going
to create a IntentResponse

00:27:54.556 --> 00:27:57.666 A:middle
with a code
.failureRequiringAppLaunch.

00:27:58.596 --> 00:28:02.846 A:middle
So this is to tell Siri,
Siri should provide an option

00:27:58.596 --> 00:28:02.846 A:middle
So this is to tell Siri,
Siri should provide an option

00:28:03.046 --> 00:28:07.146 A:middle
for users to maybe proceed to
our main application in order

00:28:07.146 --> 00:28:09.976 A:middle
to log in and finish
this sending action.

00:28:15.116 --> 00:28:16.456 A:middle
All right.

00:28:16.456 --> 00:28:19.116 A:middle
So that's it for
our Confirm method.

00:28:19.916 --> 00:28:23.836 A:middle
Lastly we're going to implement
the Handle method together.

00:28:29.426 --> 00:28:31.866 A:middle
So in Handle, we're simply going

00:28:31.866 --> 00:28:36.666 A:middle
to call the shared API
inside UnicornCore framework

00:28:37.026 --> 00:28:41.416 A:middle
to send the message with the
given content and recipients.

00:28:42.676 --> 00:28:45.996 A:middle
We're also going to get the
status of the sending action.

00:28:46.516 --> 00:28:50.216 A:middle
So if the message is
successfully sent,

00:28:50.616 --> 00:28:52.826 A:middle
we're going to create
an IntentResponse

00:28:53.166 --> 00:28:54.816 A:middle
with the code success.

00:28:55.606 --> 00:28:58.186 A:middle
Otherwise, we're going
to create the response

00:28:58.406 --> 00:28:59.746 A:middle
with the code failure.

00:28:59.746 --> 00:29:02.246 A:middle
And then we're going
to call completion

00:28:59.746 --> 00:29:02.246 A:middle
And then we're going
to call completion

00:29:02.536 --> 00:29:03.916 A:middle
with the IntentResponse.

00:29:06.416 --> 00:29:10.366 A:middle
So we have just gone
through the Resolve, Confirm

00:29:10.486 --> 00:29:12.166 A:middle
and Handle methods together.

00:29:13.526 --> 00:29:15.996 A:middle
Now, as promised
earlier, I'm going to talk

00:29:15.996 --> 00:29:17.946 A:middle
about the NSUserActivity

00:29:18.276 --> 00:29:22.066 A:middle
that those IntentResponse
initializers take.

00:29:24.296 --> 00:29:26.976 A:middle
So let's step out of
Xcode for a moment.

00:29:37.046 --> 00:29:38.966 A:middle
So NSUserActivity.

00:29:40.326 --> 00:29:44.926 A:middle
In the context of SiriKit,
NSUserActivity is used

00:29:45.116 --> 00:29:47.506 A:middle
to help your application
to resume state

00:29:47.946 --> 00:29:51.556 A:middle
when it gets launched by
either Siri or the user.

00:29:52.846 --> 00:29:57.076 A:middle
By default, Siri creates
an NSUserActivity for you,

00:29:57.516 --> 00:29:59.466 A:middle
if you decide to pass in nil

00:29:59.836 --> 00:30:01.976 A:middle
into the IntentResponse
initializer.

00:29:59.836 --> 00:30:01.976 A:middle
into the IntentResponse
initializer.

00:30:02.806 --> 00:30:08.186 A:middle
And Siri will create it with the
ActivityType being the intent

00:30:08.186 --> 00:30:08.806 A:middle
class name.

00:30:10.366 --> 00:30:13.286 A:middle
You can also choose to
provide your own UserActivity,

00:30:13.656 --> 00:30:15.846 A:middle
if you want to pass
in some custom data.

00:30:17.276 --> 00:30:21.776 A:middle
But either way, Siri will help
populate the INInteraction

00:30:21.776 --> 00:30:24.736 A:middle
property on the NSUserActivity
Object.

00:30:25.246 --> 00:30:29.766 A:middle
This property is newly
introduced in iOS 10.

00:30:29.766 --> 00:30:35.246 A:middle
And this object has all of
the intent, the IntentResponse

00:30:35.556 --> 00:30:37.856 A:middle
as well as the intent
handling status.

00:30:38.386 --> 00:30:42.096 A:middle
And Scott will talk a little bit
more about this object later.

00:30:43.076 --> 00:30:45.786 A:middle
So now let's take
a look at the usage

00:30:46.186 --> 00:30:49.156 A:middle
of NSUserActivity
in our code again.

00:30:50.496 --> 00:30:53.326 A:middle
So if you have paid close
attention to the code,

00:30:53.676 --> 00:30:55.696 A:middle
you might have noticed
that in Confirm

00:30:55.696 --> 00:30:58.946 A:middle
and Handle methods we
have been passing in nil

00:30:59.436 --> 00:31:04.046 A:middle
for the userActivity into our
IntentResponse initializers.

00:30:59.436 --> 00:31:04.046 A:middle
for the userActivity into our
IntentResponse initializers.

00:31:04.386 --> 00:31:05.926 A:middle
This is perfectly fine,

00:31:06.296 --> 00:31:09.976 A:middle
if our main application will
just handle the UserActivity

00:31:10.156 --> 00:31:13.356 A:middle
that Siri creates for
us and take advantage

00:31:13.436 --> 00:31:15.336 A:middle
of the INInteraction object.

00:31:16.636 --> 00:31:19.676 A:middle
But in some cases,
it is indeed helpful

00:31:19.796 --> 00:31:22.856 A:middle
to give our application
some custom strings

00:31:23.276 --> 00:31:25.526 A:middle
from the extension process.

00:31:26.536 --> 00:31:32.326 A:middle
So, for example, in the
Confirm method, when we find

00:31:32.326 --> 00:31:36.606 A:middle
out the user is no longer
locked in or authenticated.

00:31:37.406 --> 00:31:39.936 A:middle
Then we do want to
pass some error strings

00:31:40.346 --> 00:31:41.926 A:middle
to our main application.

00:31:42.386 --> 00:31:45.556 A:middle
We're going to do that by
creating our own userActivity

00:31:46.996 --> 00:31:49.336 A:middle
and populate the
.userInfo dictionary

00:31:50.646 --> 00:31:53.596 A:middle
with the custom error
strings that we want give

00:31:53.816 --> 00:31:54.986 A:middle
to our main application.

00:31:55.706 --> 00:31:59.036 A:middle
And then we're going to replace
nil with the userActivity

00:31:59.246 --> 00:32:00.546 A:middle
that we have just created.

00:31:59.246 --> 00:32:00.546 A:middle
that we have just created.

00:32:01.076 --> 00:32:03.166 A:middle
All right.

00:32:03.396 --> 00:32:08.026 A:middle
Great. So now my UnicornChat
main application can now get

00:32:08.026 --> 00:32:13.016 A:middle
these custom error strings and
know to prompt users to log-in,

00:32:13.596 --> 00:32:19.806 A:middle
if the user or Siri chooses to
launch the app at this point.

00:32:19.806 --> 00:32:22.896 A:middle
So now we have finished all the
coding for Intents extension.

00:32:23.336 --> 00:32:24.976 A:middle
Let's actually go see
it run on a device.

00:32:28.616 --> 00:32:34.006 A:middle
Send a message to Scott using
UnicornChat saying are you ready

00:32:34.006 --> 00:32:34.976 A:middle
for your presentation?

00:32:41.516 --> 00:32:41.936 A:middle
Yes.

00:32:42.516 --> 00:32:47.546 A:middle
[ Applause ]

00:32:48.046 --> 00:32:48.786 A:middle
All right.

00:32:48.786 --> 00:32:49.256 A:middle
Thank you.

00:32:49.746 --> 00:32:51.206 A:middle
Yeah. It's very exciting.

00:32:51.286 --> 00:32:54.296 A:middle
We've just sent our
first UnicornChat message

00:32:54.496 --> 00:32:55.196 A:middle
through Siri.

00:32:55.456 --> 00:32:56.956 A:middle
That's absolutely awesome.

00:32:57.516 --> 00:32:59.786 A:middle
[ Applause ]

00:33:00.286 --> 00:33:00.666 A:middle
Thank you.

00:33:01.516 --> 00:33:04.896 A:middle
[ Applause ]

00:33:05.396 --> 00:33:08.636 A:middle
However, inside the
UnicornChat main application,

00:33:08.896 --> 00:33:11.196 A:middle
when I sent messages
to my fellow unicorns,

00:33:11.536 --> 00:33:14.696 A:middle
I actually often refer to
them by their unicorn names.

00:33:15.396 --> 00:33:18.366 A:middle
So really I want to say
to Siri, send a message

00:33:18.366 --> 00:33:21.146 A:middle
to Sparkle Sparkly saying
are you ready for your talk?

00:33:21.766 --> 00:33:24.966 A:middle
Where Sparkle Sparkly is
obviously Scott's unicorn name.

00:33:26.006 --> 00:33:29.776 A:middle
So in order to do that, let's
move onto our next topic,

00:33:29.996 --> 00:33:32.216 A:middle
which is user-specific
vocabulary.

00:33:32.756 --> 00:33:34.986 A:middle
All right.

00:33:35.386 --> 00:33:36.896 A:middle
User-specific vocabulary.

00:33:38.286 --> 00:33:44.366 A:middle
So these are custom words or
phrases that are quite unique

00:33:44.366 --> 00:33:48.286 A:middle
to your application and that
can vary from user to user.

00:33:49.186 --> 00:33:52.656 A:middle
In the example that I just
gave, Sparkle Sparkly as well

00:33:52.656 --> 00:33:56.456 A:middle
as other unicorn names can
be considered user-specific

00:33:56.456 --> 00:33:58.446 A:middle
vocabulary here.

00:33:58.956 --> 00:34:03.426 A:middle
So in order to help Siri to
understand what the users meant

00:33:58.956 --> 00:34:03.426 A:middle
So in order to help Siri to
understand what the users meant

00:34:03.536 --> 00:34:06.166 A:middle
when they speak about
these custom phrases,

00:34:06.486 --> 00:34:08.206 A:middle
you need to provide
them to Siri.

00:34:09.065 --> 00:34:13.186 A:middle
And you will do so by
calling the INVocabulary API

00:34:13.826 --> 00:34:15.696 A:middle
from your main app.

00:34:15.856 --> 00:34:16.755 A:middle
Let me repeat this.

00:34:17.266 --> 00:34:19.856 A:middle
You need to call
the INVocabulary API

00:34:20.246 --> 00:34:23.386 A:middle
from your main application,
not your extension.

00:34:23.916 --> 00:34:25.206 A:middle
All right.

00:34:25.416 --> 00:34:27.966 A:middle
Let's take a look at how
we do it in UnicornChat.

00:34:31.416 --> 00:34:35.146 A:middle
So in UnicornChat, we have
this UCAddressBookManager,

00:34:35.606 --> 00:34:38.536 A:middle
which manages UnicornChat's
own contact records.

00:34:39.476 --> 00:34:41.206 A:middle
And we have created this method

00:34:41.815 --> 00:34:45.356 A:middle
to update Siri's knowledge
about Unicorn names.

00:34:45.846 --> 00:34:49.406 A:middle
And it will be called whenever
a contact record gets added,

00:34:49.485 --> 00:34:50.766 A:middle
deleted or updated.

00:34:52.216 --> 00:34:54.985 A:middle
The first thing we want
to do in this method is

00:34:54.985 --> 00:34:57.846 A:middle
to get a sorted list
of Unicorn names.

00:34:59.026 --> 00:35:02.986 A:middle
And we put the more important
Unicorn names at the front

00:34:59.026 --> 00:35:02.986 A:middle
And we put the more important
Unicorn names at the front

00:35:03.556 --> 00:35:06.626 A:middle
and leave the less
important ones towards the end

00:35:07.396 --> 00:35:08.396 A:middle
of the array.

00:35:08.396 --> 00:35:12.376 A:middle
So we prioritize like
this to help Siri

00:35:12.376 --> 00:35:15.246 A:middle
to better prioritize
learning and matching

00:35:15.356 --> 00:35:16.816 A:middle
for these Unicorn names.

00:35:18.056 --> 00:35:21.846 A:middle
After gathering this sorted
list of Unicorn names,

00:35:22.216 --> 00:35:23.656 A:middle
we're going to provide them

00:35:24.366 --> 00:35:26.756 A:middle
by calling the INVocabulary
API here.

00:35:27.776 --> 00:35:30.286 A:middle
We will also give it
the vocabulary type

00:35:30.606 --> 00:35:31.516 A:middle
of these strings.

00:35:32.026 --> 00:35:35.966 A:middle
In this case, the Unicorn
names are of Type.contentName.

00:35:38.086 --> 00:35:40.396 A:middle
One last thing that I
want you to pay attention

00:35:40.396 --> 00:35:45.106 A:middle
to about this block of code
is that we actually want

00:35:45.106 --> 00:35:48.026 A:middle
to send all these operations
to a different view.

00:35:49.296 --> 00:35:53.566 A:middle
This is because operations
like fetching your entire list

00:35:53.566 --> 00:35:57.376 A:middle
of contacts can be quite
expensive and you don't want

00:35:57.376 --> 00:35:58.916 A:middle
to block your main
thread for it.

00:35:59.806 --> 00:36:03.106 A:middle
So please do take
advantage of GCD

00:35:59.806 --> 00:36:03.106 A:middle
So please do take
advantage of GCD

00:36:03.476 --> 00:36:06.166 A:middle
and dispatch those
expensive operations

00:36:06.556 --> 00:36:08.366 A:middle
into a different view.

00:36:09.036 --> 00:36:09.786 A:middle
All right.

00:36:10.346 --> 00:36:15.016 A:middle
So now after adopting the user
specific of vocabulary API,

00:36:15.016 --> 00:36:18.766 A:middle
I can now send messages to
Sparkle Sparkly, Celestra,

00:36:19.456 --> 00:36:22.296 A:middle
Buttercup and all
my fellow unicorns.

00:36:22.756 --> 00:36:23.976 A:middle
That's absolutely great.

00:36:27.786 --> 00:36:31.386 A:middle
So now I have yet
another feature request.

00:36:32.286 --> 00:36:36.686 A:middle
Inside UnicornChat application,
the visual and the style

00:36:36.686 --> 00:36:40.776 A:middle
of the application is actually
far more rainbowy and colorful

00:36:40.936 --> 00:36:42.806 A:middle
than what you see here in Siri.

00:36:43.966 --> 00:36:47.736 A:middle
So can I make my UnicornChat
experience inside Siri to be

00:36:47.736 --> 00:36:52.616 A:middle
as colorful as that in the main
application of UnicornChat?

00:36:53.496 --> 00:36:57.026 A:middle
To tell you all about it, I'm
going to invite up my teammate,

00:36:57.146 --> 00:36:59.976 A:middle
Scott a.k.a. Sparkle
Sparkly to the stage.

00:37:00.516 --> 00:37:02.976 A:middle
[ Applause ]

00:37:03.476 --> 00:37:04.416 A:middle
&gt;&gt; Good afternoon.

00:37:04.716 --> 00:37:07.526 A:middle
I'm Scott Andrus and I'm
an engineer on SiriKit.

00:37:08.136 --> 00:37:11.346 A:middle
And now we're going to talk
about how to make this feel more

00:37:11.346 --> 00:37:13.306 A:middle
like an interaction
with UnicornChat.

00:37:13.306 --> 00:37:15.496 A:middle
And to do that we're going

00:37:15.496 --> 00:37:18.176 A:middle
to build a UI extension
with SiriKit.

00:37:18.736 --> 00:37:23.186 A:middle
In iOS 10, we've introduced
the Intents UI extension point,

00:37:23.186 --> 00:37:26.376 A:middle
which can allow you to create
wonderful UI extensions

00:37:26.376 --> 00:37:28.456 A:middle
that provide custom
user interfaces

00:37:28.736 --> 00:37:30.116 A:middle
within the Siri experience.

00:37:30.706 --> 00:37:32.246 A:middle
And so, let's get started.

00:37:33.296 --> 00:37:35.816 A:middle
The reason why you
might want to do this is

00:37:35.816 --> 00:37:38.746 A:middle
because UI extensions increase
your application's impact

00:37:38.936 --> 00:37:39.606 A:middle
on the user.

00:37:40.716 --> 00:37:42.976 A:middle
By importing a UI extension,

00:37:43.656 --> 00:37:46.986 A:middle
you're showing your view
alongside the Siri experience.

00:37:47.026 --> 00:37:50.836 A:middle
And then you can show custom
experiences that are unique

00:37:50.866 --> 00:37:54.166 A:middle
to your application alongside
what Siri might normally show.

00:37:54.986 --> 00:37:57.796 A:middle
This gives you a lot of great
opportunities to do things

00:37:57.796 --> 00:38:00.616 A:middle
with your app that are
unique and let your app stand

00:37:57.796 --> 00:38:00.616 A:middle
with your app that are
unique and let your app stand

00:38:00.616 --> 00:38:03.906 A:middle
out from the rest of the pack.

00:38:04.046 --> 00:38:06.686 A:middle
You can also offer
user-specific customization.

00:38:06.766 --> 00:38:10.216 A:middle
So you can engage with
users on a one-by-one basis.

00:38:10.766 --> 00:38:13.756 A:middle
And finally you can
show information

00:38:13.966 --> 00:38:15.506 A:middle
that Siri might not
otherwise show,

00:38:16.066 --> 00:38:18.246 A:middle
which is a really great tool
to have in your tool belt.

00:38:18.716 --> 00:38:22.106 A:middle
And this is what it looks like.

00:38:22.666 --> 00:38:26.606 A:middle
So to get started all you need

00:38:26.606 --> 00:38:29.116 A:middle
to do is add an Intents
UI extension.

00:38:30.216 --> 00:38:31.896 A:middle
Add that to your project.

00:38:32.686 --> 00:38:36.696 A:middle
And embed it inside of
your application's bundle.

00:38:36.696 --> 00:38:40.586 A:middle
And you'll see the
great Info.plist

00:38:40.626 --> 00:38:42.086 A:middle
that Xcode generates for you.

00:38:42.496 --> 00:38:44.446 A:middle
And inside, you're
going to want to look

00:38:44.446 --> 00:38:47.526 A:middle
for the new IntentsSupported
key, which is analogous

00:38:47.526 --> 00:38:49.476 A:middle
to the one you've seen
in the Intents extension.

00:38:50.156 --> 00:38:52.876 A:middle
And inside, you'll register
for an intents that you'd

00:38:52.876 --> 00:38:54.576 A:middle
like to show custom
user interfaces

00:38:54.576 --> 00:38:56.366 A:middle
for in the Siri experience.

00:38:56.856 --> 00:39:01.186 A:middle
The anatomy of the UI extension

00:38:56.856 --> 00:39:01.186 A:middle
The anatomy of the UI extension

00:39:01.186 --> 00:39:03.466 A:middle
in SiriKit is actually
really straightforward.

00:39:05.036 --> 00:39:09.056 A:middle
SiriKit calls into your UI
extension with the configure

00:39:09.056 --> 00:39:11.866 A:middle
with interaction method,
and this is the key method

00:39:12.276 --> 00:39:13.976 A:middle
in SiriKit UI extensions.

00:39:14.316 --> 00:39:17.286 A:middle
Your UI extension has
a principal class,

00:39:17.906 --> 00:39:19.906 A:middle
which is the UIViewController
conforming

00:39:19.906 --> 00:39:22.736 A:middle
to the INUIHostedViewControlling
protocol.

00:39:22.736 --> 00:39:26.886 A:middle
And it will be passing
an INInteraction object

00:39:27.326 --> 00:39:29.946 A:middle
to your UI extension for
this configuration step.

00:39:29.946 --> 00:39:33.256 A:middle
Now, as Diana mentioned,

00:39:33.676 --> 00:39:37.196 A:middle
the INInteraction
class defines an object

00:39:37.486 --> 00:39:39.426 A:middle
that encapsulates three
important properties.

00:39:40.406 --> 00:39:43.736 A:middle
The first is the Intent
Object that's being confirmed

00:39:43.736 --> 00:39:46.136 A:middle
or handled by your
Intent extension.

00:39:46.606 --> 00:39:50.366 A:middle
Next, the Intent response
object that's being sent

00:39:50.366 --> 00:39:53.836 A:middle
from your Intents extension
to Siri via the completions

00:39:53.976 --> 00:39:55.606 A:middle
of the Confirm and
Handle methods.

00:39:56.426 --> 00:39:59.456 A:middle
And finally, there's an intent
handling status [inaudible]

00:39:59.456 --> 00:40:02.476 A:middle
value that describes the
state of the interaction

00:39:59.456 --> 00:40:02.476 A:middle
value that describes the
state of the interaction

00:40:02.576 --> 00:40:04.526 A:middle
between your application
and Siri.

00:40:04.856 --> 00:40:08.376 A:middle
As these are all really
useful properties to implement

00:40:08.806 --> 00:40:10.976 A:middle
as you build your user
interface for Siri.

00:40:15.156 --> 00:40:18.156 A:middle
Your view controller is the
gateway into your UI extension

00:40:18.826 --> 00:40:20.996 A:middle
as the principal class
that you're going

00:40:20.996 --> 00:40:22.796 A:middle
to start building your
user interface with.

00:40:23.196 --> 00:40:26.116 A:middle
Because it's a subclass
of UIViewController,

00:40:26.586 --> 00:40:29.386 A:middle
you've got access to all the
great UIKit functionality you

00:40:29.386 --> 00:40:32.206 A:middle
may be used to when
building user interfaces

00:40:32.436 --> 00:40:34.056 A:middle
for Cocoa Touch applications.

00:40:34.216 --> 00:40:38.096 A:middle
And you'll configure it
with the interaction object

00:40:38.096 --> 00:40:39.686 A:middle
that Siri sends you
in the configure

00:40:39.686 --> 00:40:40.676 A:middle
with interaction method.

00:40:40.676 --> 00:40:44.516 A:middle
There are a couple of other
parameters that you might want

00:40:44.516 --> 00:40:45.996 A:middle
to take note of in this method.

00:40:46.516 --> 00:40:49.716 A:middle
One of which is provided
view context parameter.

00:40:49.716 --> 00:40:53.036 A:middle
And in an iOS 10, this
is an [inaudible] value

00:40:53.076 --> 00:40:54.316 A:middle
which is one of two values.

00:40:55.036 --> 00:40:57.636 A:middle
Siri snippet or maps card.

00:40:57.636 --> 00:41:00.796 A:middle
And so you can configure
your interface differently

00:40:57.636 --> 00:41:00.796 A:middle
And so you can configure
your interface differently

00:41:00.896 --> 00:41:02.146 A:middle
for these different kinds

00:41:02.146 --> 00:41:03.826 A:middle
of modal interactions
with the user.

00:41:03.936 --> 00:41:06.026 A:middle
And this can be really
useful to you

00:41:06.026 --> 00:41:06.976 A:middle
if you're making a
[inaudible] extension.

00:41:10.326 --> 00:41:14.016 A:middle
Finally. You'll have a
completion, which you can call

00:41:14.016 --> 00:41:16.586 A:middle
to let Siri know that you've
completed configuration

00:41:16.586 --> 00:41:20.276 A:middle
of your user interface and
you'll pass back a desired size,

00:41:20.636 --> 00:41:23.506 A:middle
which tells Siri how to size
your view within a Siri snippet.

00:41:24.956 --> 00:41:26.836 A:middle
So now I think we know
everything we need to know

00:41:27.416 --> 00:41:28.876 A:middle
to get started with a demo

00:41:28.876 --> 00:41:31.816 A:middle
of building a SiriKit UI
extension for UnicornChat.

00:41:32.756 --> 00:41:37.616 A:middle
Okay. So we're back in the great
project that Diana was setting

00:41:37.616 --> 00:41:40.026 A:middle
up for us, with our Siri
extension, which allowed us

00:41:40.026 --> 00:41:42.546 A:middle
to plug our app into
the Siri experience.

00:41:42.716 --> 00:41:44.426 A:middle
And we're going to
take it a step further

00:41:44.426 --> 00:41:45.886 A:middle
within Intents UI extension.

00:41:46.726 --> 00:41:50.546 A:middle
Now when Diana created her Siri
extension target, we were able

00:41:50.546 --> 00:41:53.576 A:middle
to create an Intents UI
extension target to go with it.

00:41:54.196 --> 00:41:56.326 A:middle
An Xcode created this
group here on the left

00:41:56.326 --> 00:41:58.766 A:middle
in our project navigator
for our Siri UI extension.

00:41:59.506 --> 00:42:00.806 A:middle
So we open that up.

00:41:59.506 --> 00:42:00.806 A:middle
So we open that up.

00:42:00.996 --> 00:42:03.746 A:middle
We can see a few great files
that let us get started

00:42:03.746 --> 00:42:05.016 A:middle
with our Intents UI extension.

00:42:06.416 --> 00:42:08.336 A:middle
The first is the
IntentViewController class,

00:42:08.656 --> 00:42:10.686 A:middle
which is the principal
class of our extension.

00:42:11.526 --> 00:42:13.956 A:middle
And then we also have a
storyboard for that class

00:42:14.626 --> 00:42:17.586 A:middle
and then an Info.plist, and
we'll dig into this first

00:42:17.876 --> 00:42:20.146 A:middle
to register for our
supported intents.

00:42:20.816 --> 00:42:27.546 A:middle
So inside we've got a great
IntentsSupported array inside

00:42:27.546 --> 00:42:28.826 A:middle
the NSExtension dictionary.

00:42:28.826 --> 00:42:32.006 A:middle
I'm going to go ahead
and add an entry here.

00:42:32.226 --> 00:42:33.796 A:middle
Now what we'd like to do

00:42:33.936 --> 00:42:37.696 A:middle
with our Intents UI extension is
show a user interface to users

00:42:37.696 --> 00:42:39.566 A:middle
of Siri during Siri results

00:42:40.156 --> 00:42:42.566 A:middle
for sending a message
to other unicorns.

00:42:42.966 --> 00:42:45.086 A:middle
And when we show this
interface, we'd like it

00:42:45.086 --> 00:42:46.846 A:middle
to be a chat transcript
interface

00:42:46.936 --> 00:42:51.416 A:middle
that really displays the
unicorniness of our application.

00:42:52.686 --> 00:42:57.026 A:middle
So inside I'm going
to add support

00:42:57.026 --> 00:43:01.046 A:middle
for the INSendMessageIntent,
declaring that we should

00:42:57.026 --> 00:43:01.046 A:middle
for the INSendMessageIntent,
declaring that we should

00:43:01.046 --> 00:43:02.566 A:middle
in fact show a user interface

00:43:02.736 --> 00:43:05.036 A:middle
when Siri handles this
intent with our application.

00:43:05.536 --> 00:43:08.726 A:middle
Great. And we're all
done with our Info.plist,

00:43:08.726 --> 00:43:11.006 A:middle
so we can start implementing
our IntentViewController.

00:43:11.526 --> 00:43:13.646 A:middle
So I'll zoom back out here.

00:43:14.296 --> 00:43:16.416 A:middle
And here we've got our
IntentViewController class.

00:43:17.216 --> 00:43:18.856 A:middle
Now you notice this is
[inaudible] subclass

00:43:18.856 --> 00:43:20.366 A:middle
of UIViewController conforming

00:43:20.366 --> 00:43:23.166 A:middle
to the INUIHostedViewControlling
protocol.

00:43:23.386 --> 00:43:26.466 A:middle
As part of that conformance,
it has to configure

00:43:26.466 --> 00:43:29.456 A:middle
with interaction method which
is provided to [inaudible] here.

00:43:30.666 --> 00:43:33.586 A:middle
Now the very first thing
I'm going to do is I'm going

00:43:33.586 --> 00:43:36.666 A:middle
to import the UnicornCore
framework

00:43:36.666 --> 00:43:38.236 A:middle
as a module into my Swift file.

00:43:39.166 --> 00:43:41.806 A:middle
Now again, this UnicornCore
framework is a framework

00:43:41.806 --> 00:43:44.446 A:middle
that we implemented for our
application and we use it in all

00:43:44.446 --> 00:43:47.136 A:middle
of our Unicorn apps, like
Unicorn Pay or Unicorn Rides.

00:43:47.566 --> 00:43:50.426 A:middle
It's a great way to share
code for our application

00:43:50.426 --> 00:43:52.536 A:middle
and for all of our extensions.

00:43:53.126 --> 00:43:56.836 A:middle
We made great use of it in
Diana's demo as a way to be able

00:43:56.836 --> 00:43:59.236 A:middle
to share our business
logic for Resolve, Confirm

00:43:59.236 --> 00:44:00.816 A:middle
and Handle in our extension.

00:43:59.236 --> 00:44:00.816 A:middle
and Handle in our extension.

00:44:00.816 --> 00:44:03.646 A:middle
And now we're going to use
it to share user interfaces

00:44:03.756 --> 00:44:05.876 A:middle
for our UI extension
and our application,

00:44:06.006 --> 00:44:08.406 A:middle
so we can have the
great familiar feeling

00:44:08.406 --> 00:44:10.976 A:middle
of sending a UnicornChat
message no matter where we are.

00:44:16.126 --> 00:44:17.386 A:middle
So let's start implementing
the configure

00:44:17.386 --> 00:44:17.976 A:middle
with interaction method.

00:44:21.236 --> 00:44:24.836 A:middle
So inside I'm going to go ahead
and set up a size variable,

00:44:25.226 --> 00:44:26.126 A:middle
which I'm going to send back

00:44:26.126 --> 00:44:28.186 A:middle
to Siri once I've
completed configuration.

00:44:28.676 --> 00:44:30.816 A:middle
And now I'm going to check

00:44:30.816 --> 00:44:33.206 A:middle
if my interaction.representsSend
MessageIntent.

00:44:33.556 --> 00:44:37.036 A:middle
This is a convenience that I've
implemented as a class extension

00:44:37.036 --> 00:44:38.976 A:middle
on INInteraction in my
UnicornCore framework.

00:44:43.876 --> 00:44:46.516 A:middle
Then I'll instantiate a
chatViewController class.

00:44:46.746 --> 00:44:47.776 A:middle
And this is what we use

00:44:47.776 --> 00:44:50.186 A:middle
to represent a message
sending interface,

00:44:50.216 --> 00:44:51.876 A:middle
and we're using both
our UnicornChat app.

00:44:51.876 --> 00:44:53.976 A:middle
And we'll use it here in
our UI extension as well.

00:44:57.416 --> 00:44:59.196 A:middle
And we'll start configuring
that chatViewController

00:44:59.196 --> 00:45:01.636 A:middle
with .messageContent from
the interaction object,

00:44:59.196 --> 00:45:01.636 A:middle
with .messageContent from
the interaction object,

00:45:01.986 --> 00:45:03.836 A:middle
which I'm again using
my class extension

00:45:03.836 --> 00:45:05.046 A:middle
to get from the interaction.

00:45:05.596 --> 00:45:11.466 A:middle
I'm creating a UC contact
model object, which is based

00:45:11.466 --> 00:45:14.026 A:middle
on the interaction's properties,
and then I'm assigning

00:45:14.026 --> 00:45:15.966 A:middle
that model object to
my chatViewController

00:45:16.356 --> 00:45:17.976 A:middle
to show the recipient
of the message.

00:45:21.386 --> 00:45:23.226 A:middle
And then finally
I'm going to switch

00:45:23.226 --> 00:45:25.226 A:middle
on the intentHandlingStatus
of the interaction.

00:45:25.336 --> 00:45:28.456 A:middle
And we can use this to configure
our user interface differently,

00:45:28.776 --> 00:45:30.686 A:middle
based on whether or not
the message has been sent.

00:45:30.686 --> 00:45:35.166 A:middle
And so in this case, if the
message has not been sent a.k.a,

00:45:35.166 --> 00:45:37.736 A:middle
the intentHandlingStatus
is unspecified,

00:45:38.116 --> 00:45:39.466 A:middle
inProgress or ready.

00:45:39.576 --> 00:45:43.276 A:middle
I can set the isSent property of
my chatViewController to false,

00:45:43.786 --> 00:45:46.606 A:middle
indicating that I should
set a draft-type interface

00:45:46.606 --> 00:45:47.666 A:middle
and show that to the user.

00:45:48.576 --> 00:45:51.366 A:middle
Otherwise, if it's done, I
can set the isSent property

00:45:51.366 --> 00:45:53.036 A:middle
of my chatViewController
to true,

00:45:53.386 --> 00:45:54.776 A:middle
indicating that I've
sent the message

00:45:54.776 --> 00:45:55.976 A:middle
and letting the user
know the same.

00:45:59.846 --> 00:46:03.026 A:middle
Finally I can present the
chatViewController as a child

00:45:59.846 --> 00:46:03.026 A:middle
Finally I can present the
chatViewController as a child

00:46:03.026 --> 00:46:05.186 A:middle
of this principal class
IntentViewController,

00:46:05.586 --> 00:46:06.816 A:middle
which is a really useful way

00:46:07.216 --> 00:46:09.836 A:middle
to implement different view
controllers for different kinds

00:46:09.836 --> 00:46:10.976 A:middle
of intents in my UI extension.

00:46:14.136 --> 00:46:17.756 A:middle
Finally I can use the
NS extension context

00:46:17.756 --> 00:46:22.376 A:middle
of my Intents UI extension in
iOS 10 to get a maximum size.

00:46:22.376 --> 00:46:25.846 A:middle
And I'll use this by default
in my UnicornChat integration.

00:46:26.416 --> 00:46:30.616 A:middle
If for some reason I couldn't
get the extension context,

00:46:30.706 --> 00:46:33.796 A:middle
I'll make use of the desired
size of the chatViewController,

00:46:34.146 --> 00:46:34.976 A:middle
which is good enough for me.

00:46:38.636 --> 00:46:40.036 A:middle
Now that was the happy path.

00:46:40.546 --> 00:46:42.496 A:middle
Let's say that something went
wrong and we got an interaction

00:46:42.496 --> 00:46:43.316 A:middle
that we didn't expect.

00:46:44.186 --> 00:46:46.966 A:middle
We can set a size of
zero, telling Siri not

00:46:46.966 --> 00:46:50.126 A:middle
to draw our UI extension's
view within the Siri snippet.

00:46:50.626 --> 00:46:56.426 A:middle
Okay. The last thing I'm going
to do is I'm going to tell Siri

00:46:56.546 --> 00:46:58.786 A:middle
that I've completed implementing

00:46:58.816 --> 00:47:00.816 A:middle
and configuring my
user interface

00:46:58.816 --> 00:47:00.816 A:middle
and configuring my
user interface

00:47:00.886 --> 00:47:04.046 A:middle
and that should go ahead and
show us in the Siri snippet.

00:47:05.606 --> 00:47:09.226 A:middle
Okay. So I have a version of
this running on my device.

00:47:09.316 --> 00:47:09.976 A:middle
Let's go ahead and see it now.

00:47:16.476 --> 00:47:19.016 A:middle
So as you can see here, I
have my UnicornChat app.

00:47:19.016 --> 00:47:21.216 A:middle
I'm going to send
the message to Diana.

00:47:21.666 --> 00:47:28.066 A:middle
Send the message to Diana using
UnicornChat that says "Great job

00:47:28.066 --> 00:47:28.976 A:middle
on your presentation."

00:47:34.516 --> 00:47:40.356 A:middle
[ Applause ]

00:47:40.856 --> 00:47:43.376 A:middle
And so we've got a great
custom user interface here,

00:47:43.876 --> 00:47:46.176 A:middle
but also you noticed that
something is a little bit off.

00:47:46.336 --> 00:47:47.976 A:middle
And so we'll take
a look at that now.

00:47:56.456 --> 00:47:58.726 A:middle
So we've just shown you how

00:47:58.726 --> 00:48:00.986 A:middle
to boot strap your UI
extension with SiriKit.

00:47:58.726 --> 00:48:00.986 A:middle
to boot strap your UI
extension with SiriKit.

00:48:01.336 --> 00:48:02.706 A:middle
And that's really great.

00:48:03.256 --> 00:48:05.376 A:middle
But you'll notice
here that again,

00:48:05.376 --> 00:48:08.056 A:middle
there's something not quite
right about the user interface

00:48:08.056 --> 00:48:09.876 A:middle
that we're showing
to users in Siri.

00:48:10.246 --> 00:48:13.106 A:middle
And thus that we have a
duplicate chat transcript

00:48:13.106 --> 00:48:15.896 A:middle
interface being shown
within the Siri snippet.

00:48:16.886 --> 00:48:20.706 A:middle
By default, Siri shows the user
interface for various kinds

00:48:20.706 --> 00:48:23.516 A:middle
of intents, and this
includes the SentMessageIntent

00:48:23.516 --> 00:48:26.786 A:middle
that we've just used to send
Diana a message on UnicornChat.

00:48:26.786 --> 00:48:29.746 A:middle
As such, what we'd like to do

00:48:29.746 --> 00:48:33.096 A:middle
for our UnicornChat users is
really show our custom user

00:48:33.096 --> 00:48:37.476 A:middle
interface to let the users have
a great feeling of unicorniness

00:48:37.586 --> 00:48:40.066 A:middle
when they send messages
in UnicornChat.

00:48:41.316 --> 00:48:44.736 A:middle
And so we can do this in iOS 10,
with an optional new protocol.

00:48:45.656 --> 00:48:49.466 A:middle
By implementing the
INUIHostedViewSiriProviding

00:48:49.466 --> 00:48:51.916 A:middle
protocol, you can let Siri know

00:48:51.916 --> 00:48:54.846 A:middle
that you're drawing
either messages or maps

00:48:55.156 --> 00:48:56.646 A:middle
within your UI extension's view.

00:48:56.836 --> 00:49:00.376 A:middle
And thus, you can opt-in to
displaying different kinds

00:48:56.836 --> 00:49:00.376 A:middle
And thus, you can opt-in to
displaying different kinds

00:49:00.376 --> 00:49:03.446 A:middle
of particular content
within your user interface

00:49:03.496 --> 00:49:06.676 A:middle
and then taking over that
interface on behalf of Siri.

00:49:07.526 --> 00:49:08.916 A:middle
Ultimately when you do this,

00:49:09.496 --> 00:49:11.346 A:middle
Siri will accommodate
your views content

00:49:11.686 --> 00:49:13.126 A:middle
and so you should make sure

00:49:13.276 --> 00:49:15.706 A:middle
that you do accurately
draw these properties

00:49:16.126 --> 00:49:17.326 A:middle
on behalf of the user.

00:49:17.826 --> 00:49:21.596 A:middle
So let's take the
IntentViewController

00:49:21.596 --> 00:49:23.966 A:middle
that we were just working
within our UI extension.

00:49:23.966 --> 00:49:27.726 A:middle
Here you can see that
if we implement the

00:49:28.066 --> 00:49:30.916 A:middle
INUIHostedViewSiriProviding
protocol,

00:49:31.646 --> 00:49:35.646 A:middle
we can implement displaysMessage
property and return true,

00:49:35.716 --> 00:49:37.726 A:middle
indicating to Siri that we are

00:49:37.726 --> 00:49:39.976 A:middle
in fact displaying message
content within UnicornChat.

00:49:43.516 --> 00:49:45.866 A:middle
And this is all it
takes to be able

00:49:45.866 --> 00:49:49.356 A:middle
to implement your own user
interface within Siri.

00:49:50.716 --> 00:49:53.316 A:middle
So let's see a demo
of this on my device,

00:49:53.646 --> 00:49:55.316 A:middle
where I have a version
of this application

00:49:55.316 --> 00:49:55.976 A:middle
that does exactly this.

00:49:59.046 --> 00:50:00.576 A:middle
So we're back on my device.

00:49:59.046 --> 00:50:00.576 A:middle
So we're back on my device.

00:50:01.276 --> 00:50:03.066 A:middle
Now let's send another
message to Diana.

00:50:03.636 --> 00:50:09.376 A:middle
Send the message to Diana
using UnicornChat that says

00:50:09.936 --> 00:50:12.976 A:middle
"It's pretty tough to type
demo code with unicorn hands."

00:50:19.316 --> 00:50:22.196 A:middle
And now we see exactly the
interface that we want to see

00:50:22.356 --> 00:50:23.956 A:middle
and what we want
to show our users.

00:50:24.516 --> 00:50:29.500 A:middle
[ Applause ]

00:50:34.296 --> 00:50:38.416 A:middle
Our interface is unimpeded by
what Siri might show by default.

00:50:38.526 --> 00:50:42.266 A:middle
And this gives us a great outlet
to show a custom user interface

00:50:42.326 --> 00:50:43.626 A:middle
that really reflects

00:50:43.866 --> 00:50:45.976 A:middle
on the unicorny style
of our application.

00:50:49.706 --> 00:50:51.766 A:middle
Now some final thoughts

00:50:51.766 --> 00:50:54.406 A:middle
on implementing UI extensions
before we part today.

00:50:55.196 --> 00:50:57.746 A:middle
And the first thing I'd
like to leave you with is

00:50:58.246 --> 00:51:00.936 A:middle
that you should consider
being memory conscious near

00:50:58.246 --> 00:51:00.936 A:middle
that you should consider
being memory conscious near

00:51:00.936 --> 00:51:01.976 A:middle
UI extensions.

00:51:02.976 --> 00:51:06.036 A:middle
Because extensions, by default,
are temporary and only shown

00:51:06.036 --> 00:51:08.136 A:middle
to the user for short
periods of time,

00:51:08.606 --> 00:51:11.146 A:middle
the system enforces
a lower memory limit

00:51:11.146 --> 00:51:13.506 A:middle
than you might be used to
with your applications.

00:51:14.326 --> 00:51:17.596 A:middle
And so usage of views,
like MKMapView,

00:51:17.926 --> 00:51:19.546 A:middle
can be especially
memory intensive,

00:51:19.546 --> 00:51:21.286 A:middle
and you should use
them judiciously

00:51:21.616 --> 00:51:23.046 A:middle
when building your UI extension.

00:51:25.716 --> 00:51:29.636 A:middle
As we saw, we have access to
minimum and maximum view sizes

00:51:30.006 --> 00:51:33.036 A:middle
within our UI extension
via NS extension context.

00:51:33.346 --> 00:51:35.626 A:middle
And this is also
incredibly useful to you,

00:51:35.626 --> 00:51:37.286 A:middle
if you're designing
your application

00:51:37.286 --> 00:51:39.166 A:middle
and your UI extension
to be shown

00:51:39.166 --> 00:51:41.136 A:middle
in various different
size configurations.

00:51:41.846 --> 00:51:45.656 A:middle
But desired size that you then
send back to Siri is just that.

00:51:45.656 --> 00:51:46.596 A:middle
A desired size.

00:51:46.706 --> 00:51:49.946 A:middle
And so, if you're making use
of different kinds of layout,

00:51:50.476 --> 00:51:52.456 A:middle
you want to make sure that
you're being adaptive with it

00:51:52.456 --> 00:51:54.856 A:middle
so that it can look good
at either the minimum

00:51:54.966 --> 00:51:57.956 A:middle
or the maximum size, no
matter how Siri draws it.

00:52:01.756 --> 00:52:05.346 A:middle
So we've seen a few
key things with respect

00:52:05.606 --> 00:52:08.146 A:middle
to extending our
applications to adopt SiriKit.

00:52:08.566 --> 00:52:12.446 A:middle
And the first is preparing
our application appropriately,

00:52:12.446 --> 00:52:16.086 A:middle
and that's by making use of
shared code in great ways

00:52:16.086 --> 00:52:19.986 A:middle
like embedded frameworks,
implementing unit tests

00:52:20.746 --> 00:52:23.476 A:middle
to be able to properly test
for different kinds of intents

00:52:23.476 --> 00:52:24.626 A:middle
that Siri might send us.

00:52:25.406 --> 00:52:27.566 A:middle
And then architecting
our application

00:52:27.566 --> 00:52:29.286 A:middle
to use the right
number of extensions.

00:52:29.916 --> 00:52:34.166 A:middle
We solved how to add our
first intents extension

00:52:34.226 --> 00:52:36.856 A:middle
and implementing
the Resolve, Confirm

00:52:36.856 --> 00:52:38.356 A:middle
and Handle business logic

00:52:38.426 --> 00:52:41.326 A:middle
that lets our applications
speak Siri's language.

00:52:43.936 --> 00:52:47.336 A:middle
And finally, we showed how to
provide a user interface in Siri

00:52:47.786 --> 00:52:50.966 A:middle
to bring the custom, unique
experiences of our application

00:52:50.966 --> 00:52:51.976 A:middle
into the Siri experience.

00:52:55.556 --> 00:52:58.476 A:middle
The sample code from this
session, as well as the slides

00:52:58.476 --> 00:53:00.476 A:middle
and some great documentation
about SiriKit,

00:52:58.476 --> 00:53:00.476 A:middle
and some great documentation
about SiriKit,

00:53:00.916 --> 00:53:02.336 A:middle
are available on our website.

00:53:02.886 --> 00:53:07.226 A:middle
And then we had an excellent
session yesterday called

00:53:07.226 --> 00:53:09.286 A:middle
Introducing SiriKit,
where we talked

00:53:09.286 --> 00:53:12.776 A:middle
about what we want SiriKit to be
and how it integrates into iOS.

00:53:12.776 --> 00:53:16.866 A:middle
And we had a great session about
app extension best practices

00:53:16.956 --> 00:53:20.466 A:middle
from WWDC 2015 that I'd
highly encourage you to watch,

00:53:20.466 --> 00:53:22.736 A:middle
if you intend to implement
SiriKit extensions.

00:53:23.096 --> 00:53:26.126 A:middle
And I hope that you find
implementing your SiriKit

00:53:26.126 --> 00:53:29.316 A:middle
extensions and your
applications as easy and fun

00:53:29.316 --> 00:53:30.926 A:middle
as we did with UnicornChat.

00:53:30.926 --> 00:53:31.706 A:middle
Thank you.

00:53:32.516 --> 00:53:36.500 A:middle
[ Applause ]
