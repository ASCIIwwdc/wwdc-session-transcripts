WEBVTT

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:26.516 --> 00:00:31.886 A:middle
[ Applause ]

00:00:32.386 --> 00:00:34.336 A:middle
&gt;&gt; Welcome to Introduction
to Xcode.

00:00:34.636 --> 00:00:37.476 A:middle
My name's Najla and I'm a
member of the Xcode team.

00:00:38.056 --> 00:00:41.006 A:middle
Along with my colleague Rick
Ballard, we'll be taking you

00:00:41.086 --> 00:00:43.236 A:middle
through the essential
components of Xcode.

00:00:44.356 --> 00:00:47.546 A:middle
So Xcode is a development
platform for creating apps

00:00:47.676 --> 00:00:53.086 A:middle
for iOS, watchOS,
tvOS, and OS X, macOS.

00:00:53.486 --> 00:00:57.326 A:middle
It gives you the tools
to create a complete app,

00:00:57.326 --> 00:01:00.256 A:middle
from designing your user
interface and implementing code,

00:00:57.326 --> 00:01:00.256 A:middle
from designing your user
interface and implementing code,

00:01:00.706 --> 00:01:02.876 A:middle
to testing and debugging
your application,

00:01:03.466 --> 00:01:08.546 A:middle
to provisioning your app for
distribution on the App Store.

00:01:09.046 --> 00:01:10.906 A:middle
So today we're going to take you

00:01:10.906 --> 00:01:12.446 A:middle
through the most
important components

00:01:12.446 --> 00:01:13.806 A:middle
of Xcode by creating an app.

00:01:15.126 --> 00:01:17.776 A:middle
You'll learn how to create
a new application and run it

00:01:17.776 --> 00:01:21.786 A:middle
in the simulator, how to test
and debug your application,

00:01:23.176 --> 00:01:26.026 A:middle
how to review your changes and
commit them to source control,

00:01:27.376 --> 00:01:29.806 A:middle
and how to configure your
project for distribution.

00:01:31.196 --> 00:01:34.426 A:middle
Now, we want this session to
be more about learning how

00:01:34.426 --> 00:01:37.596 A:middle
to use Xcode and less
about app development,

00:01:37.916 --> 00:01:40.186 A:middle
so the app that we're going
to be using today is going

00:01:40.186 --> 00:01:43.066 A:middle
to be very simple, but
don't let the simplicity

00:01:43.066 --> 00:01:44.246 A:middle
of the demo app fool you.

00:01:44.246 --> 00:01:46.246 A:middle
There's information in
this session for everyone,

00:01:46.636 --> 00:01:48.386 A:middle
whether you're brand
new to Xcode

00:01:48.386 --> 00:01:49.826 A:middle
or an experienced developer.

00:01:50.406 --> 00:01:54.806 A:middle
So the best way to learn
about Xcode is by using it,

00:01:54.806 --> 00:01:56.796 A:middle
so let's get started
at our machine.

00:01:57.856 --> 00:02:00.296 A:middle
So what you see here is
Xcode's welcome window.

00:01:57.856 --> 00:02:00.296 A:middle
So what you see here is
Xcode's welcome window.

00:02:00.756 --> 00:02:03.476 A:middle
On the right, you can
open existing projects,

00:02:04.026 --> 00:02:05.786 A:middle
and on the left, you
can create new ones.

00:02:06.826 --> 00:02:07.966 A:middle
Let's create a new project.

00:02:09.246 --> 00:02:11.666 A:middle
And when you create a
new project in Xcode,

00:02:11.666 --> 00:02:13.936 A:middle
you have a number of
templates to choose from,

00:02:14.176 --> 00:02:15.976 A:middle
and there are basically
just starting points

00:02:15.976 --> 00:02:16.966 A:middle
for your application.

00:02:18.066 --> 00:02:20.146 A:middle
You can have, there
are templates available

00:02:20.146 --> 00:02:25.896 A:middle
for all four platforms --
iOS, watchOS, tvOS, and macOS.

00:02:27.166 --> 00:02:29.736 A:middle
Now, I'm going to choose the
simplest template available,

00:02:30.386 --> 00:02:32.186 A:middle
which is a single
view application

00:02:32.266 --> 00:02:33.836 A:middle
for the iOS platform.

00:02:34.436 --> 00:02:36.766 A:middle
It's, it provides the code for,

00:02:36.846 --> 00:02:39.116 A:middle
to support an iOS
app with one view.

00:02:41.656 --> 00:02:44.366 A:middle
So let's name our project Hello,

00:02:44.586 --> 00:02:46.966 A:middle
and if you have a
developer account,

00:02:46.966 --> 00:02:48.816 A:middle
you can add it here
and select your team.

00:02:50.236 --> 00:02:52.726 A:middle
Now, your organization name is
just the company you work for

00:02:52.726 --> 00:02:56.896 A:middle
and your bundle identifier
is a combination

00:02:57.006 --> 00:02:59.836 A:middle
of your organization name
and your product name.

00:03:00.356 --> 00:03:03.396 A:middle
It's a string that uniquely
identifies your application.

00:03:03.986 --> 00:03:07.606 A:middle
Now, when you create a
new application in Xcode,

00:03:08.306 --> 00:03:11.106 A:middle
you can choose between
using Swift and Objective-C

00:03:11.106 --> 00:03:12.256 A:middle
as your programming language.

00:03:12.826 --> 00:03:15.966 A:middle
We're going to be using
Swift and our app is going

00:03:15.966 --> 00:03:18.396 A:middle
to be universal, meaning
that it can run on

00:03:18.396 --> 00:03:23.206 A:middle
and support both
iPhone and iPad.

00:03:24.016 --> 00:03:25.926 A:middle
So when you create
a new template,

00:03:26.786 --> 00:03:28.966 A:middle
there are different options
to configuring your project.

00:03:29.416 --> 00:03:34.936 A:middle
We're going to choose
unit and UI pass.

00:03:35.326 --> 00:03:37.696 A:middle
Now, let's save our project
in our Documents folder,

00:03:38.236 --> 00:03:41.496 A:middle
and I'm going to click
Create Git Repository

00:03:41.496 --> 00:03:43.566 A:middle
so that our project will be

00:03:43.596 --> 00:03:45.076 A:middle
under version control
from the start.

00:03:51.556 --> 00:03:53.426 A:middle
Awesome, so here's our project.

00:03:53.926 --> 00:03:56.626 A:middle
I'm going to resize the window
by double-tapping at the top.

00:03:58.386 --> 00:04:01.066 A:middle
Now, this is called
Xcode's main window.

00:03:58.386 --> 00:04:01.066 A:middle
Now, this is called
Xcode's main window.

00:04:02.046 --> 00:04:05.256 A:middle
On the left is the
navigator area with all

00:04:05.256 --> 00:04:06.956 A:middle
of your files and resources.

00:04:06.956 --> 00:04:11.566 A:middle
In the middle is the editor
area where you can open files

00:04:11.706 --> 00:04:13.946 A:middle
that you've, that you
click on in the navigator.

00:04:15.056 --> 00:04:18.836 A:middle
And on the right is the utility
area, which contains useful,

00:04:18.836 --> 00:04:21.196 A:middle
contextual information based
on what you have selected

00:04:21.196 --> 00:04:22.906 A:middle
in the navigator
or in the editor.

00:04:24.556 --> 00:04:26.066 A:middle
Now, if you're brand
new to Xcode,

00:04:26.066 --> 00:04:27.066 A:middle
you're probably wondering,

00:04:27.456 --> 00:04:31.196 A:middle
what does this app
look like on a device?

00:04:31.346 --> 00:04:34.466 A:middle
You can run your application
by clicking the Run button

00:04:34.746 --> 00:04:36.066 A:middle
at the top of the main window.

00:04:36.666 --> 00:04:38.776 A:middle
But before we do that,
let's talk a little bit more

00:04:38.776 --> 00:04:40.836 A:middle
about what actually
happens when you click Run.

00:04:41.406 --> 00:04:45.166 A:middle
So when you click Run,
you specify what you want

00:04:45.166 --> 00:04:52.696 A:middle
to run here and where
you want to run it here.

00:04:53.306 --> 00:04:56.236 A:middle
Now, in your project, you can
have multiple applications

00:04:56.236 --> 00:04:59.546 A:middle
or even multiple configurations
of the same application.

00:05:00.396 --> 00:05:03.036 A:middle
A scheme is how you
specify what you want to run

00:05:03.036 --> 00:05:05.616 A:middle
and it also contains information
about how you want to run it.

00:05:06.376 --> 00:05:09.216 A:middle
For example, I could have
a project with an iOS app

00:05:09.216 --> 00:05:12.176 A:middle
and a Watch app, and in that
case, I would have one scheme

00:05:12.176 --> 00:05:17.406 A:middle
to run my iOS app and one
scheme to run my Watch app.

00:05:17.576 --> 00:05:19.596 A:middle
Currently, we only have
one scheme in our project.

00:05:19.596 --> 00:05:21.786 A:middle
It's called Hello, and
it's already selected.

00:05:24.716 --> 00:05:28.166 A:middle
Now, your run destination
is where you specify

00:05:28.486 --> 00:05:30.646 A:middle
where you want your
application to run,

00:05:30.646 --> 00:05:32.576 A:middle
and in Xcode, you
have two options.

00:05:33.046 --> 00:05:35.036 A:middle
You can run your
application in the simulator

00:05:35.436 --> 00:05:36.616 A:middle
or you can run it on a device.

00:05:37.476 --> 00:05:39.856 A:middle
A simulator simulates what
your application will look

00:05:39.856 --> 00:05:43.096 A:middle
like on a device, and this is
really great for doing quick,

00:05:43.096 --> 00:05:45.546 A:middle
iterative development and
when you want feedback

00:05:45.546 --> 00:05:47.746 A:middle
on how your app is
looking and functioning.

00:05:49.426 --> 00:05:52.786 A:middle
Currently we have the iPhone
SE simulator selected,

00:05:53.796 --> 00:05:57.046 A:middle
so let's click the Run
button, and it's going

00:05:57.046 --> 00:06:03.856 A:middle
to run our scheme Hello on
the iPhone SE simulator.

00:05:57.046 --> 00:06:03.856 A:middle
to run our scheme Hello on
the iPhone SE simulator.

00:06:03.886 --> 00:06:09.526 A:middle
So our application is
launching, and here it is.

00:06:09.886 --> 00:06:10.966 A:middle
I said that we were going

00:06:10.966 --> 00:06:13.226 A:middle
to choose the simplest
template available,

00:06:13.226 --> 00:06:16.566 A:middle
and there's nothing here,
so let's add a feature

00:06:16.566 --> 00:06:18.166 A:middle
to make it a little
more interesting.

00:06:19.666 --> 00:06:21.096 A:middle
I'm going to stop the simulator

00:06:21.096 --> 00:06:23.676 A:middle
by clicking the Stop button
next to the Run button.

00:06:24.946 --> 00:06:27.566 A:middle
So in Xcode, you can lay
out the user interface

00:06:27.566 --> 00:06:29.836 A:middle
of your application in
what's called a storyboard.

00:06:31.876 --> 00:06:34.376 A:middle
Now, since we created our
project from a template,

00:06:35.216 --> 00:06:37.046 A:middle
we have a couple
storyboards available.

00:06:37.606 --> 00:06:38.846 A:middle
We have a launch
screen storyboard

00:06:38.846 --> 00:06:39.846 A:middle
and a main storyboard.

00:06:40.596 --> 00:06:44.156 A:middle
Your launch screen storyboard
contains the user interface

00:06:44.156 --> 00:06:46.476 A:middle
for your launch screen, which is
that screen that first appears

00:06:46.686 --> 00:06:48.526 A:middle
when you launch an
application for the first time.

00:06:49.016 --> 00:06:51.616 A:middle
And your main.storyboard
contains a user interface

00:06:51.616 --> 00:06:52.826 A:middle
for the rest of your
application.

00:06:53.506 --> 00:06:55.706 A:middle
So let's open main.storyboard.

00:06:56.286 --> 00:07:00.746 A:middle
In the storyboard, you have
what's called the canvas,

00:06:56.286 --> 00:07:00.746 A:middle
In the storyboard, you have
what's called the canvas,

00:07:00.746 --> 00:07:04.866 A:middle
which is this white background,
and there's a scene inside

00:07:04.866 --> 00:07:07.266 A:middle
of your canvas, which
contains your view

00:07:07.266 --> 00:07:09.536 A:middle
and it represents one
view of your application.

00:07:10.926 --> 00:07:13.716 A:middle
Now, for a feature, I want
it to be really simple,

00:07:13.716 --> 00:07:16.756 A:middle
but I also want to be able
to interact with it in code,

00:07:17.396 --> 00:07:19.146 A:middle
so I'm going to implement
a button

00:07:19.146 --> 00:07:21.216 A:middle
that when tapped says
Hello in a label.

00:07:21.806 --> 00:07:27.796 A:middle
So at the bottom of the utility
area, are Xcode's libraries,

00:07:28.006 --> 00:07:30.466 A:middle
such as the file library and
the code snippet library.

00:07:31.246 --> 00:07:34.316 A:middle
Now, third icon from the left
takes you to the object library,

00:07:34.846 --> 00:07:36.826 A:middle
which contains all
of the UI elements

00:07:36.826 --> 00:07:38.186 A:middle
that you can add to your scene.

00:07:39.696 --> 00:07:42.126 A:middle
You can view them as
a list, which is great

00:07:42.126 --> 00:07:44.326 A:middle
when you don't exactly know
what you're looking for

00:07:44.326 --> 00:07:49.896 A:middle
and you want more information,
or you can view them as a grid.

00:07:50.476 --> 00:07:54.326 A:middle
Now, I already know that I
need a button and a label

00:07:54.616 --> 00:07:58.906 A:middle
in my scene, so I can use
the filter bar at the bottom

00:07:58.906 --> 00:08:01.786 A:middle
of the utility area to
search for a button.

00:07:58.906 --> 00:08:01.786 A:middle
of the utility area to
search for a button.

00:08:05.636 --> 00:08:08.006 A:middle
Let's drag it into our scene,

00:08:08.486 --> 00:08:12.706 A:middle
and guides appear to
help us center it.

00:08:13.546 --> 00:08:15.656 A:middle
Now, earlier I mentioned
the utility panel,

00:08:16.486 --> 00:08:22.786 A:middle
so let's take a closer look at
the inspectors at the top of it.

00:08:23.456 --> 00:08:27.076 A:middle
Now, the first two, the file
and quick help inspectors,

00:08:27.476 --> 00:08:29.056 A:middle
they're available
throughout your project,

00:08:29.486 --> 00:08:32.486 A:middle
no matter what you have selected
in the navigator or the editor,

00:08:33.206 --> 00:08:35.635 A:middle
but since I have the buttons
selected in our scene,

00:08:36.285 --> 00:08:38.746 A:middle
the rest of the inspectors
contain information

00:08:38.806 --> 00:08:39.556 A:middle
about the button.

00:08:40.446 --> 00:08:44.656 A:middle
For example, I can click on
the attributes inspector here

00:08:45.426 --> 00:08:49.386 A:middle
to get information about the
text properties of the button,

00:08:49.766 --> 00:08:52.346 A:middle
such as the size,
the font, the color.

00:08:53.456 --> 00:08:55.786 A:middle
I can click on the size
inspector next to it

00:08:56.586 --> 00:08:58.676 A:middle
to see information about
the size of the button

00:08:58.676 --> 00:09:01.526 A:middle
and the position in the scene.

00:08:58.676 --> 00:09:01.526 A:middle
and the position in the scene.

00:09:02.576 --> 00:09:06.706 A:middle
I'm going to change this
button's title to say Say Hello,

00:09:06.706 --> 00:09:09.446 A:middle
and I can do this in the
attributes inspector,

00:09:10.216 --> 00:09:13.076 A:middle
but an easier way of doing
this is by double-clicking

00:09:13.076 --> 00:09:16.526 A:middle
on the button and just
typing the title that I want.

00:09:19.536 --> 00:09:22.026 A:middle
Great, so now we have
our button in our scene.

00:09:22.976 --> 00:09:25.636 A:middle
Let's go back to the filter
bar and search for a label.

00:09:30.416 --> 00:09:32.966 A:middle
I'm going to drag
it so that it's

00:09:32.966 --> 00:09:34.916 A:middle
above the button
but still centered.

00:09:35.606 --> 00:09:40.216 A:middle
And once again, I can go back
to the attributes inspector

00:09:40.216 --> 00:09:42.616 A:middle
or the size inspector to
configure its properties,

00:09:42.686 --> 00:09:47.086 A:middle
but I like it the way it
is, so let's just leave it.

00:09:48.466 --> 00:09:51.526 A:middle
One thing to note about our
user interface currently is

00:09:51.526 --> 00:09:54.696 A:middle
that we haven't specified how
the view should scale based

00:09:54.696 --> 00:09:56.236 A:middle
on the device that it's on.

00:09:57.676 --> 00:10:01.376 A:middle
Currently, we're viewing our
scene with the dimensions

00:09:57.676 --> 00:10:01.376 A:middle
Currently, we're viewing our
scene with the dimensions

00:10:01.376 --> 00:10:05.836 A:middle
of the iPhone 6s simulator or
device, but if I click on this,

00:10:05.836 --> 00:10:07.626 A:middle
I can change it to
other devices,

00:10:07.666 --> 00:10:10.116 A:middle
such as the iPhone SE device.

00:10:11.076 --> 00:10:12.796 A:middle
And here we can see
that our label

00:10:12.796 --> 00:10:14.786 A:middle
and our button actually
aren't centered the way

00:10:14.786 --> 00:10:16.956 A:middle
that we thought.

00:10:17.676 --> 00:10:19.306 A:middle
So let's go back
to the iPhone 6s,

00:10:19.356 --> 00:10:23.166 A:middle
and we need to add some
constraints with auto-layout

00:10:23.836 --> 00:10:26.486 A:middle
to set some rules for how the
user interface should scale.

00:10:27.036 --> 00:10:31.606 A:middle
We can do this using
the auto-layout icons

00:10:31.606 --> 00:10:33.106 A:middle
at the bottom of
the canvas here.

00:10:34.516 --> 00:10:37.246 A:middle
So for our button, I want
it to be horizontally

00:10:37.246 --> 00:10:40.816 A:middle
and vertically centered in the
view, so I'm going to click

00:10:40.816 --> 00:10:45.996 A:middle
on the Align icon and set
it so that it's horizontally

00:10:46.076 --> 00:10:47.376 A:middle
and vertically in container.

00:10:48.086 --> 00:10:53.116 A:middle
Now we can see our
constraints in the scene.

00:10:53.326 --> 00:10:57.716 A:middle
Now for my label, I also want
it to be horizontally aligned

00:10:57.716 --> 00:11:01.626 A:middle
in the view, so I'm going
to go back to the Align icon

00:10:57.716 --> 00:11:01.626 A:middle
in the view, so I'm going
to go back to the Align icon

00:11:01.716 --> 00:11:05.006 A:middle
and check Horizontally
in Container.

00:11:05.486 --> 00:11:07.656 A:middle
Now, when we did that, the
constraints showed up as red,

00:11:07.656 --> 00:11:09.186 A:middle
meaning that something
went wrong.

00:11:10.136 --> 00:11:12.536 A:middle
And at the top of the
documents outline,

00:11:12.856 --> 00:11:15.846 A:middle
there's actually an arrow that
will take us to a useful error

00:11:15.846 --> 00:11:16.796 A:middle
about what went wrong.

00:11:17.336 --> 00:11:20.826 A:middle
And here we can see that we
never specified a y position

00:11:20.906 --> 00:11:21.566 A:middle
for the label.

00:11:22.126 --> 00:11:27.346 A:middle
Now, I don't actually care
what the specific y position

00:11:27.346 --> 00:11:28.136 A:middle
of this label is.

00:11:28.496 --> 00:11:30.496 A:middle
I just always want it
to be above the button.

00:11:31.956 --> 00:11:35.506 A:middle
So what I can do is I can
click on the Pin icon.

00:11:36.186 --> 00:11:40.576 A:middle
Oops, we didn't select
the label in the scene.

00:11:41.156 --> 00:11:44.406 A:middle
So once your label is selected,
you can click the Pin icon

00:11:44.406 --> 00:11:48.426 A:middle
and pin the bottom of the
label to the top of the button.

00:11:49.056 --> 00:11:52.746 A:middle
It's at our constraint,
and now it's blue.

00:11:52.746 --> 00:11:56.266 A:middle
I'm going to rerun it
in the simulator to see

00:11:56.266 --> 00:11:58.426 A:middle
if we have the behavior
that we want.

00:12:04.416 --> 00:12:05.766 A:middle
So here's our user interface.

00:12:05.766 --> 00:12:07.306 A:middle
Looks pretty great.

00:12:07.896 --> 00:12:10.386 A:middle
What were to happen if
I rotated our device?

00:12:11.436 --> 00:12:13.886 A:middle
Well, with the simulator,
you can simulate rotation

00:12:13.886 --> 00:12:18.616 A:middle
by clicking on Hardware and
Rotate Left or Rotate Right.

00:12:19.156 --> 00:12:22.116 A:middle
Let's rotate left, and
it's still centered.

00:12:23.306 --> 00:12:24.926 A:middle
Now, the great thing
about the simulator is

00:12:24.926 --> 00:12:27.256 A:middle
that you can simulate a lot
of different kinds of things,

00:12:27.696 --> 00:12:31.556 A:middle
such as rotation, shaking,
even specific locations.

00:12:32.676 --> 00:12:35.256 A:middle
I'd recommend checking out
the simulator and playing

00:12:35.256 --> 00:12:37.516 A:middle
around with it because it
comes in handy when you want

00:12:37.516 --> 00:12:39.226 A:middle
to do some quick testing
and you don't want

00:12:39.226 --> 00:12:40.026 A:middle
to pull out your device.

00:12:40.976 --> 00:12:44.406 A:middle
So now that our user
interface is laid out,

00:12:44.586 --> 00:12:48.336 A:middle
we need to add some code so
that tapping the button actually

00:12:48.336 --> 00:12:49.936 A:middle
changes the label to say Hello.

00:12:51.556 --> 00:12:55.346 A:middle
Let's stop our simulator
and talk a little bit more

00:12:55.386 --> 00:12:56.826 A:middle
about scenes and
view controllers.

00:12:57.856 --> 00:13:01.856 A:middle
So every scene in a storyboard
references some view controller

00:12:57.856 --> 00:13:01.856 A:middle
So every scene in a storyboard
references some view controller

00:13:01.856 --> 00:13:05.616 A:middle
class, which contains code
to manipulate the view.

00:13:07.106 --> 00:13:09.986 A:middle
I only have one scene in our app

00:13:09.986 --> 00:13:12.446 A:middle
and I only have one
view controller file

00:13:12.506 --> 00:13:15.866 A:middle
in our navigator, so I can infer

00:13:15.996 --> 00:13:18.836 A:middle
that this scene is
referencing the class

00:13:18.836 --> 00:13:19.956 A:middle
in view controller's Swift.

00:13:21.306 --> 00:13:24.106 A:middle
But what if I had multiple
scenes in our application

00:13:24.636 --> 00:13:26.396 A:middle
and multiple view
controller files?

00:13:26.776 --> 00:13:28.726 A:middle
How would I know which
scene is referencing

00:13:28.726 --> 00:13:29.986 A:middle
which view controller file?

00:13:31.496 --> 00:13:35.416 A:middle
Well, when you select a scene
in the storyboard, you can click

00:13:35.416 --> 00:13:38.056 A:middle
on the identity inspector,
which is next

00:13:38.056 --> 00:13:39.286 A:middle
to the attributes inspector.

00:13:39.886 --> 00:13:42.396 A:middle
It actually lists which
class it's referencing.

00:13:43.076 --> 00:13:48.986 A:middle
So now we know for sure where
we need to put our code.

00:13:49.826 --> 00:13:52.516 A:middle
So I want to display
our storyboard file

00:13:52.516 --> 00:13:56.446 A:middle
and our view controller files
side by side, and I can do this

00:13:56.846 --> 00:13:59.696 A:middle
by clicking on the
Assistant Editor button

00:13:59.796 --> 00:14:01.076 A:middle
at the top of the main window.

00:13:59.796 --> 00:14:01.076 A:middle
at the top of the main window.

00:14:01.656 --> 00:14:06.756 A:middle
It's looking a little
cramped, so I'm going

00:14:06.756 --> 00:14:08.126 A:middle
to create a little bit of room

00:14:08.896 --> 00:14:15.676 A:middle
by hiding the documents outline
using this button here and also

00:14:15.676 --> 00:14:22.656 A:middle
by hiding the utility area
by clicking on this panel.

00:14:23.216 --> 00:14:25.856 A:middle
Now, one thing to note is
that this bar at the top

00:14:25.856 --> 00:14:28.866 A:middle
of our editor, it's called the
jump bar, and it contains a lot

00:14:28.866 --> 00:14:33.666 A:middle
of useful information about the
functions in your file and even

00:14:33.666 --> 00:14:35.696 A:middle
about the files themselves.

00:14:37.076 --> 00:14:39.486 A:middle
Now, the great thing about
the assistant editor is

00:14:39.486 --> 00:14:42.416 A:middle
that it actually knows
which file is related,

00:14:42.596 --> 00:14:44.876 A:middle
which files are related to
the file that I have open

00:14:44.876 --> 00:14:47.856 A:middle
in the primary editor and
will open it up for me

00:14:47.856 --> 00:14:48.816 A:middle
in the assistant editor.

00:14:49.306 --> 00:14:52.396 A:middle
For example, if we opened our
view controller's Swift file

00:14:52.396 --> 00:14:54.726 A:middle
in the primary editor,
it would open

00:14:54.726 --> 00:14:57.926 A:middle
up the generated
interface file for it.

00:14:58.546 --> 00:15:01.346 A:middle
Now, another cool thing
about the assistant editor is

00:14:58.546 --> 00:15:01.346 A:middle
Now, another cool thing
about the assistant editor is

00:15:01.346 --> 00:15:04.856 A:middle
that it actually, you can
actually change the relationship

00:15:04.856 --> 00:15:08.396 A:middle
that it's using by selecting
the relationship at the top

00:15:08.396 --> 00:15:11.046 A:middle
of the jump bar and changing
it to whatever you want.

00:15:11.636 --> 00:15:14.826 A:middle
For example, you can change it
to Siblings, which will open

00:15:14.826 --> 00:15:18.226 A:middle
up all of the files that inherit
from the same superclass.

00:15:18.966 --> 00:15:25.316 A:middle
So let's go back to
our main.storyboard

00:15:26.316 --> 00:15:28.306 A:middle
by using the back
arrow in the jump bar.

00:15:28.986 --> 00:15:33.706 A:middle
So we have our view
controller class

00:15:33.706 --> 00:15:34.766 A:middle
and we have our storyboard.

00:15:35.116 --> 00:15:37.246 A:middle
We need to create
references for our button

00:15:37.246 --> 00:15:42.306 A:middle
and our label in our class.

00:15:42.466 --> 00:15:48.076 A:middle
Now, I can do this by selecting
the UI element that I want,

00:15:48.466 --> 00:15:49.416 A:middle
so I have it selected.

00:15:49.416 --> 00:15:54.476 A:middle
I'm going to Control drag from
the scene and into our class.

00:15:55.136 --> 00:15:56.926 A:middle
Now, I want this
to be an action,

00:15:57.296 --> 00:16:00.976 A:middle
which means that I want
it to perform something

00:15:57.296 --> 00:16:00.976 A:middle
which means that I want
it to perform something

00:16:01.186 --> 00:16:02.226 A:middle
when I tap the button.

00:16:02.966 --> 00:16:05.296 A:middle
And let's name it Say Hello.

00:16:05.846 --> 00:16:10.596 A:middle
Let's do the same
thing for our label.

00:16:11.236 --> 00:16:14.736 A:middle
I actually want this
to be an outlet,

00:16:15.116 --> 00:16:17.226 A:middle
which means that it's a
reference that I can manipulate,

00:16:17.226 --> 00:16:21.326 A:middle
and let's name it Hello Label.

00:16:22.096 --> 00:16:28.796 A:middle
So now we have references
for our elements.

00:16:29.786 --> 00:16:31.876 A:middle
We need to add some
code to our action

00:16:32.056 --> 00:16:33.666 A:middle
that actually manipulates
our label.

00:16:35.106 --> 00:16:37.836 A:middle
Now, I think a label has a
property that we can use,

00:16:38.226 --> 00:16:42.196 A:middle
but I'm not exactly sure, so
here's when using Option Click

00:16:42.196 --> 00:16:44.376 A:middle
and Command Click in
Xcode comes in handy.

00:16:45.466 --> 00:16:48.186 A:middle
So we, when we created our
reference for our label,

00:16:48.556 --> 00:16:51.006 A:middle
it declared it as an instance
of the UI label class.

00:16:51.006 --> 00:16:55.436 A:middle
I can Option Click on this
label on the class name

00:16:56.106 --> 00:16:59.316 A:middle
to get a quick help description
of what this class does

00:16:59.666 --> 00:17:00.886 A:middle
and also its availability.

00:16:59.666 --> 00:17:00.886 A:middle
and also its availability.

00:17:01.486 --> 00:17:06.146 A:middle
I can also Command Click on
UI label, which will take me

00:17:06.185 --> 00:17:08.306 A:middle
to the, to where it's declared.

00:17:09.906 --> 00:17:12.616 A:middle
And if I just want to look
up documentation for this,

00:17:13.415 --> 00:17:18.326 A:middle
I can navigate to Help
Documentation and API Reference

00:17:19.036 --> 00:17:20.996 A:middle
and search for the class.

00:17:21.806 --> 00:17:26.086 A:middle
So I'll search for UI label,
and here we have a description,

00:17:26.116 --> 00:17:29.626 A:middle
overview, and all of the
properties of that class listed.

00:17:30.546 --> 00:17:33.886 A:middle
So here it says that a
label has a text property,

00:17:34.916 --> 00:17:38.316 A:middle
so that's what we can use
to actually display Hello.

00:17:38.866 --> 00:17:42.886 A:middle
Let's close documentation
and navigate back

00:17:43.086 --> 00:17:46.566 A:middle
to our view controller file
by clicking on the back arrow

00:17:46.566 --> 00:17:49.956 A:middle
in the jump bar and
add some code.

00:17:49.956 --> 00:17:53.596 A:middle
So I want to manipulate
Hello Label,

00:17:53.596 --> 00:17:57.226 A:middle
so I'll start typing that,
and as I start typing,

00:17:57.226 --> 00:18:00.386 A:middle
Xcode will provide suggestions
for things to autocomplete.

00:17:57.226 --> 00:18:00.386 A:middle
Xcode will provide suggestions
for things to autocomplete.

00:18:00.996 --> 00:18:02.636 A:middle
This is Xcode's code completion.

00:18:03.786 --> 00:18:05.516 A:middle
I can autocomplete
it by hitting Tab,

00:18:05.716 --> 00:18:10.176 A:middle
and I want to access
the text property.

00:18:10.366 --> 00:18:11.696 A:middle
I can also autocomplete that.

00:18:13.136 --> 00:18:15.506 A:middle
And let's set it equal
to the string Hello.

00:18:16.106 --> 00:18:18.646 A:middle
So now we have some code.

00:18:19.186 --> 00:18:20.246 A:middle
We have our references.

00:18:20.246 --> 00:18:21.556 A:middle
Let's see if this
actually worked

00:18:22.556 --> 00:18:24.816 A:middle
by rerunning it in
the simulator.

00:18:30.436 --> 00:18:31.946 A:middle
So our app is launching.

00:18:33.316 --> 00:18:35.916 A:middle
Here's our button,
and it changed.

00:18:36.486 --> 00:18:37.726 A:middle
Very exciting, right?

00:18:38.516 --> 00:18:42.386 A:middle
[ Applause ]

00:18:42.886 --> 00:18:43.526 A:middle
Yes [laughter].

00:18:43.726 --> 00:18:49.566 A:middle
So now you know how to create
a new project in Xcode,

00:18:49.566 --> 00:18:52.916 A:middle
how to add a simple feature, and
how to run it in the simulator.

00:18:53.396 --> 00:18:56.736 A:middle
But it's very likely that you'll
be learning how to use Xcode

00:18:56.736 --> 00:18:59.566 A:middle
on an existing project
that's way more complicated

00:18:59.566 --> 00:19:03.586 A:middle
than our button and label, so
let's fast-forward a little bit.

00:18:59.566 --> 00:19:03.586 A:middle
than our button and label, so
let's fast-forward a little bit.

00:19:03.856 --> 00:19:05.966 A:middle
Now that Rick and
I know the basics,

00:19:06.316 --> 00:19:08.136 A:middle
we've been implementing
some more features,

00:19:09.066 --> 00:19:12.466 A:middle
so I'd like to invite Rick
up on stage to take you

00:19:12.466 --> 00:19:14.716 A:middle
through the rest of Xcode's
development workflow.

00:19:17.516 --> 00:19:23.146 A:middle
[ Applause ]

00:19:23.646 --> 00:19:24.286 A:middle
&gt;&gt; Thanks, Najla.

00:19:24.536 --> 00:19:27.616 A:middle
So for the past week, we've been
building our own little app.

00:19:27.826 --> 00:19:30.036 A:middle
We decided to write
an earthquake tracker

00:19:30.036 --> 00:19:32.306 A:middle
so we could see what earthquakes
have happened recently.

00:19:33.236 --> 00:19:35.876 A:middle
We're nearly done, and of
course, we wrote unit tests

00:19:35.876 --> 00:19:37.526 A:middle
so that we could make
sure that our code works,

00:19:37.786 --> 00:19:40.116 A:middle
and I think we still have a
couple problems left to fix.

00:19:40.696 --> 00:19:42.586 A:middle
Let's take a look and dive

00:19:42.586 --> 00:19:44.946 A:middle
into Xcode's debugger
and unit testing.

00:19:45.496 --> 00:19:48.226 A:middle
So to start out with, we need

00:19:48.226 --> 00:19:50.116 A:middle
to check our project
our of source control.

00:19:50.896 --> 00:19:52.336 A:middle
Xcode supports the Git

00:19:52.336 --> 00:19:54.546 A:middle
and Subversion source
control systems.

00:19:54.986 --> 00:19:56.376 A:middle
To check out our project,

00:19:56.826 --> 00:19:59.396 A:middle
I can go to Xcode's
source control menu

00:19:59.816 --> 00:20:01.626 A:middle
and choose the Check
Out command.

00:19:59.816 --> 00:20:01.626 A:middle
and choose the Check
Out command.

00:20:03.166 --> 00:20:06.056 A:middle
This gives me Xcode's check
out UI, and I can enter

00:20:06.056 --> 00:20:13.226 A:middle
in the repository path, so
mine is at example.com/repos,

00:20:13.486 --> 00:20:16.006 A:middle
and our project is
called Quakenator.

00:20:17.386 --> 00:20:18.146 A:middle
I'll hit Next.

00:20:18.756 --> 00:20:20.086 A:middle
Xcode will give me
a chance to put

00:20:20.086 --> 00:20:22.306 A:middle
in my authentication
credentials for this repository.

00:20:23.526 --> 00:20:30.066 A:middle
Whoops. And now Xcode
will ask me where I would

00:20:30.066 --> 00:20:32.716 A:middle
like to check it out, so our
Documents folder is fine.

00:20:33.106 --> 00:20:35.456 A:middle
I'll say Download, and
Xcode's checked your project

00:20:35.456 --> 00:20:37.476 A:middle
out of source control and
we're ready to work with it.

00:20:37.916 --> 00:20:40.286 A:middle
Now that we have a project
checked out, you'll notice

00:20:40.286 --> 00:20:42.496 A:middle
that the source control menu
gives us a lot more options.

00:20:42.676 --> 00:20:43.966 A:middle
We'll come back to
one of these later.

00:20:44.966 --> 00:20:48.316 A:middle
So to start out with, let's
take a look at our unit tests.

00:20:48.316 --> 00:20:50.776 A:middle
We could browse through our
project structure on the left

00:20:51.016 --> 00:20:52.886 A:middle
and try to manually
find our test files,

00:20:53.266 --> 00:20:54.536 A:middle
but there are some better ways.

00:20:55.306 --> 00:20:58.046 A:middle
At the top of the navigator
area, there are a number

00:20:58.046 --> 00:20:59.236 A:middle
of different navigators.

00:20:59.526 --> 00:21:01.156 A:middle
These each give you
different views

00:20:59.526 --> 00:21:01.156 A:middle
These each give you
different views

00:21:01.236 --> 00:21:02.866 A:middle
onto the content
in your project.

00:21:04.076 --> 00:21:07.436 A:middle
One of these views is the find
navigator, and using this,

00:21:07.476 --> 00:21:10.496 A:middle
I can search textually through
all the content in my project.

00:21:10.876 --> 00:21:13.766 A:middle
So for example, we know that
all our test methods begin

00:21:13.766 --> 00:21:18.236 A:middle
with the word Test, so
I can find text starting

00:21:18.236 --> 00:21:20.276 A:middle
with the word Test.

00:21:20.866 --> 00:21:22.006 A:middle
Just hit Return.

00:21:22.236 --> 00:21:25.566 A:middle
And here Xcode has found every
word that begins with Test

00:21:25.876 --> 00:21:28.366 A:middle
in my project, including
both my test methods

00:21:28.366 --> 00:21:29.696 A:middle
and some comments
and other hits.

00:21:30.646 --> 00:21:33.446 A:middle
So that's great, but let's do
something a little smarter.

00:21:33.796 --> 00:21:37.886 A:middle
If I want to find just my test
methods, I can find definitions.

00:21:37.886 --> 00:21:40.496 A:middle
These are where my symbols, like
my test methods, are defined.

00:21:41.126 --> 00:21:43.356 A:middle
Again, starting with
the word Test,

00:21:44.066 --> 00:21:46.636 A:middle
and here it's found
just my test methods.

00:21:46.636 --> 00:21:49.786 A:middle
So the find navigator
is a great way to search

00:21:49.786 --> 00:21:50.996 A:middle
through the content
in your project,

00:21:51.416 --> 00:21:52.966 A:middle
but since we're specifically
trying to look

00:21:52.966 --> 00:21:56.046 A:middle
for our unit tests here, Xcode
gives us an even better way,

00:21:56.546 --> 00:21:58.326 A:middle
and that's the test navigator.

00:21:59.356 --> 00:22:00.636 A:middle
In the test navigator,

00:21:59.356 --> 00:22:00.636 A:middle
In the test navigator,

00:22:00.636 --> 00:22:03.996 A:middle
Xcode automatically lists
every unit test and UI test

00:22:04.146 --> 00:22:06.846 A:middle
and performance test that Xcode
has found in your project.

00:22:07.856 --> 00:22:10.536 A:middle
Some of these are grayed
out like my UI tests,

00:22:10.976 --> 00:22:13.026 A:middle
and that's because those
tests aren't configured

00:22:13.026 --> 00:22:14.806 A:middle
to run in my current scheme.

00:22:15.196 --> 00:22:18.166 A:middle
I have a separate scheme for
when I want to run my UI tests.

00:22:19.256 --> 00:22:21.746 A:middle
The rest of the tests are
shown in black, and that means

00:22:21.746 --> 00:22:24.716 A:middle
that when I perform the test
action, these tests will run,

00:22:25.126 --> 00:22:26.536 A:middle
so let's go ahead and try that.

00:22:27.326 --> 00:22:30.426 A:middle
From the product menu, I
have the test action as well

00:22:30.426 --> 00:22:32.036 A:middle
as the other four
scheme actions.

00:22:32.786 --> 00:22:34.746 A:middle
Run will run my app
in the debugger.

00:22:35.726 --> 00:22:37.266 A:middle
Test will run my tests.

00:22:38.346 --> 00:22:40.186 A:middle
Profile will run my
app in instruments

00:22:40.186 --> 00:22:41.796 A:middle
so I can measure
its performance.

00:22:42.296 --> 00:22:44.956 A:middle
Analyze will run
Xcode's static analyzer

00:22:44.956 --> 00:22:47.396 A:middle
and help catch problems I
might otherwise have missed.

00:22:48.086 --> 00:22:51.046 A:middle
And finally, the Archive action
will build my app for release

00:22:51.246 --> 00:22:53.926 A:middle
and put it in the archive that
I can then use to distribute

00:22:53.986 --> 00:22:56.426 A:middle
to my testers or to the
App Store or to save

00:22:56.426 --> 00:22:58.476 A:middle
for future crash
log desymbolication,

00:22:58.476 --> 00:22:59.296 A:middle
or symbolication.

00:22:59.936 --> 00:23:01.026 A:middle
This command will become enabled

00:22:59.936 --> 00:23:01.026 A:middle
This command will become enabled

00:23:01.026 --> 00:23:04.296 A:middle
in this menu once I select a
device as my run destination.

00:23:05.386 --> 00:23:08.516 A:middle
I'm going to go ahead and select
a test action, and when I do,

00:23:08.676 --> 00:23:11.716 A:middle
I want you to watch the activity
area up at the top of the window

00:23:11.786 --> 00:23:13.746 A:middle
because it'll tell you
what Xcode is doing.

00:23:14.556 --> 00:23:17.726 A:middle
So I'll select Test, and you can
see Xcode is now building my app

00:23:17.726 --> 00:23:20.656 A:middle
and then it's going to build my
test code, and it would run it,

00:23:20.656 --> 00:23:23.126 A:middle
but it looks like we
have a compiler error.

00:23:23.126 --> 00:23:28.216 A:middle
When a compiler error
occurred, a badge showed

00:23:28.216 --> 00:23:30.286 A:middle
up at the right-hand side
of the activity area,

00:23:30.336 --> 00:23:31.426 A:middle
showing that there was an issue,

00:23:31.876 --> 00:23:33.596 A:middle
and Xcode automatically
switched me

00:23:33.596 --> 00:23:35.296 A:middle
to the issue navigator
on the left.

00:23:36.156 --> 00:23:38.486 A:middle
This behavior, like
automatically switching

00:23:38.486 --> 00:23:40.976 A:middle
to the navigator that shows
issues when an issue occurs,

00:23:40.976 --> 00:23:43.586 A:middle
is something you can
actually configure in Xcode,

00:23:43.756 --> 00:23:46.646 A:middle
and as you learn to make it work
the way you want, you might want

00:23:46.646 --> 00:23:48.766 A:middle
to dive in and configure
these sorts of behaviors.

00:23:49.586 --> 00:23:52.156 A:middle
You can do that in Xcode's
behaviors preferences.

00:23:52.756 --> 00:23:54.166 A:middle
If you choose to edit behaviors,

00:23:54.436 --> 00:23:56.066 A:middle
Xcode will give you
a preference sheet

00:23:56.306 --> 00:23:58.246 A:middle
that lets you configure all
these sorts of behaviors.

00:23:58.246 --> 00:24:00.436 A:middle
So when a build generates
issues,

00:23:58.246 --> 00:24:00.436 A:middle
So when a build generates
issues,

00:24:00.976 --> 00:24:02.266 A:middle
we show the issue navigator.

00:24:03.096 --> 00:24:05.266 A:middle
When a test generates
issues like a test failure,

00:24:05.266 --> 00:24:07.136 A:middle
we show the test
navigator, and so forth.

00:24:07.536 --> 00:24:10.616 A:middle
As you start to get comfortable
in Xcode and want to start

00:24:10.616 --> 00:24:12.766 A:middle
to make it work the way you
want with your workflow,

00:24:13.016 --> 00:24:14.656 A:middle
I recommend checking
out behaviors.

00:24:16.436 --> 00:24:19.746 A:middle
So let's take a look at what our
actual compiler error is here.

00:24:19.946 --> 00:24:22.126 A:middle
I'm going to go ahead and
just click on my issue

00:24:22.126 --> 00:24:24.696 A:middle
in the issue navigator,
and this will jump right

00:24:24.736 --> 00:24:27.496 A:middle
to our source code where the
compiler error has occurred.

00:24:28.716 --> 00:24:31.436 A:middle
Xcode lists the error
right on the line of code

00:24:31.436 --> 00:24:32.756 A:middle
where it's occurred,
and it looks

00:24:32.756 --> 00:24:35.876 A:middle
like here my data source
object doesn't have a method

00:24:35.876 --> 00:24:37.846 A:middle
or a property named
Assorted Quakes.

00:24:38.576 --> 00:24:41.096 A:middle
You know, I think we had
Assorted Quakes property,

00:24:41.176 --> 00:24:43.546 A:middle
and just yesterday we
renamed it in our code,

00:24:43.806 --> 00:24:45.996 A:middle
and I guess we forgot to
rename it in our unit tests,

00:24:46.256 --> 00:24:48.436 A:middle
so let's figure out how
to find what the new name

00:24:48.436 --> 00:24:49.336 A:middle
of this method is.

00:24:50.556 --> 00:24:53.256 A:middle
To start tracking that down, I'm
going to hold the Command key

00:24:53.256 --> 00:24:57.216 A:middle
down and click on Data Source,
and that will jump to right

00:24:57.216 --> 00:24:58.706 A:middle
where this variable is defined.

00:24:58.706 --> 00:25:00.316 A:middle
So I can see that
I'm initializing it

00:24:58.706 --> 00:25:00.316 A:middle
So I can see that
I'm initializing it

00:25:00.316 --> 00:25:01.876 A:middle
as a quake data source
right here.

00:25:02.876 --> 00:25:05.856 A:middle
I'm then going to hold the
Command key down again and click

00:25:05.856 --> 00:25:08.616 A:middle
on Quake Data Source, and this
will jump right to the file

00:25:08.616 --> 00:25:10.106 A:middle
where quake data
source is defined.

00:25:10.826 --> 00:25:13.296 A:middle
I could start scrolling
through this file looking

00:25:13.296 --> 00:25:15.436 A:middle
for my property, but
there's a better way.

00:25:15.976 --> 00:25:20.746 A:middle
The jump bar at the top of the
source editor lists every method

00:25:20.746 --> 00:25:22.466 A:middle
that Xcode has found
in this file

00:25:22.716 --> 00:25:24.096 A:middle
in the order in which
they appear.

00:25:24.096 --> 00:25:26.676 A:middle
There are a couple extra
ways to get around this.

00:25:27.006 --> 00:25:30.166 A:middle
If I hold the Command key when I
pop it down, Xcode will bring it

00:25:30.166 --> 00:25:31.866 A:middle
down in alphabetical
order instead

00:25:31.866 --> 00:25:33.286 A:middle
of in an order of appearance.

00:25:34.526 --> 00:25:36.996 A:middle
Or I can simply type
with this up,

00:25:36.996 --> 00:25:39.356 A:middle
and Xcode will filter
on the list.

00:25:39.736 --> 00:25:41.566 A:middle
So it used to be
called Sorted Quakes.

00:25:41.566 --> 00:25:43.146 A:middle
Probably still has
Quakes in the name.

00:25:43.536 --> 00:25:46.516 A:middle
I'll type Quakes, and here are
just the properties and methods

00:25:46.516 --> 00:25:47.676 A:middle
that include the word Quakes.

00:25:48.396 --> 00:25:49.726 A:middle
One of these is orderedQuakes.

00:25:49.926 --> 00:25:51.666 A:middle
I think that's the new
name of our property.

00:25:52.686 --> 00:25:54.696 A:middle
This is actually a
nice, fuzzy search,

00:25:54.946 --> 00:25:57.036 A:middle
so you can find things
even easier than this.

00:25:57.516 --> 00:26:01.726 A:middle
If I simply type OQ, Xcode
is able to find orderedQuakes

00:25:57.516 --> 00:26:01.726 A:middle
If I simply type OQ, Xcode
is able to find orderedQuakes

00:26:01.726 --> 00:26:03.776 A:middle
because the letters
O and Q appear

00:26:03.776 --> 00:26:05.216 A:middle
in this property
name in that order.

00:26:05.296 --> 00:26:08.486 A:middle
One last thing I want
to show you here.

00:26:09.116 --> 00:26:10.606 A:middle
You'll notice that I
have a couple headers.

00:26:10.606 --> 00:26:13.426 A:middle
Here's a to-do item reminding me
to add more performance tests,

00:26:13.826 --> 00:26:16.456 A:middle
and I have a header dividing
my properties from my methods.

00:26:16.456 --> 00:26:19.956 A:middle
You can actually configure these
yourself with special comments

00:26:19.956 --> 00:26:24.566 A:middle
in your source code like to-do:
and mark with a header name,

00:26:24.846 --> 00:26:27.786 A:middle
and that will let you organize
the jump bar pop-up just the way

00:26:27.786 --> 00:26:30.046 A:middle
you want to make it easy to
navigate your source code.

00:26:31.146 --> 00:26:32.966 A:middle
All right, so let's
find our property.

00:26:33.166 --> 00:26:35.626 A:middle
I'll type OQ again and
select orderedQuakes.

00:26:36.166 --> 00:26:38.616 A:middle
It's found it for me right
here, so let's go ahead

00:26:38.616 --> 00:26:39.946 A:middle
and copy this method name.

00:26:40.626 --> 00:26:43.326 A:middle
I'm going to use the back
arrow in order to jump back

00:26:43.366 --> 00:26:46.656 A:middle
to my test file, and
I'm going to go ahead

00:26:46.656 --> 00:26:48.496 A:middle
and paste the new
method name in here.

00:26:48.806 --> 00:26:50.986 A:middle
When I do that, I want you
to notice the error badge

00:26:50.986 --> 00:26:53.356 A:middle
on the left-hand side of the
source editor and the error

00:26:53.356 --> 00:26:56.606 A:middle
in my issue navigator
pasted in the right name,

00:26:56.606 --> 00:26:58.596 A:middle
and both of those
badges disappeared.

00:26:58.876 --> 00:27:01.216 A:middle
And that's because the issue
navigator is tracking what

00:26:58.876 --> 00:27:01.216 A:middle
And that's because the issue
navigator is tracking what

00:27:01.216 --> 00:27:04.416 A:middle
you're doing in real time, so we
can show the state of your code

00:27:04.606 --> 00:27:07.416 A:middle
as you edit it without having
to wait until you hit Build

00:27:07.416 --> 00:27:10.246 A:middle
to see whether things are right.

00:27:10.796 --> 00:27:13.296 A:middle
Okay, so we fixed
our compiler error.

00:27:13.296 --> 00:27:14.996 A:middle
Let's go ahead and
run our tests again.

00:27:15.886 --> 00:27:18.856 A:middle
When I do this, Xcode's going to
compile my changes to my code,

00:27:19.246 --> 00:27:21.886 A:middle
and it's now preparing to run
my tests in the simulator,

00:27:22.086 --> 00:27:23.906 A:middle
as you can see from the
activity area at the top.

00:27:24.956 --> 00:27:27.166 A:middle
Looks like our tests are
running, so let's switch

00:27:27.166 --> 00:27:30.386 A:middle
to the test navigator to see
what's going on, and I can see

00:27:30.386 --> 00:27:33.166 A:middle
from the spinner here
that this test is running.

00:27:33.166 --> 00:27:34.786 A:middle
It looks like one of
my performance tests,

00:27:35.186 --> 00:27:36.306 A:middle
and this might take a while,

00:27:36.306 --> 00:27:38.996 A:middle
so let's actually hit the Stop
button and take a step back.

00:27:40.106 --> 00:27:42.846 A:middle
Performance tests are great
to have, but what I'm trying

00:27:42.846 --> 00:27:45.516 A:middle
to iterate on fixing my unit
tests I might not want to have

00:27:45.516 --> 00:27:47.416 A:middle
to wait for my performance
tests every time.

00:27:47.976 --> 00:27:50.376 A:middle
So we can do that by
configuring a different scheme

00:27:50.376 --> 00:27:52.226 A:middle
that doesn't run my
performance tests.

00:27:53.516 --> 00:27:56.006 A:middle
To configure my scheme, I'm
going to go to the Scheme pop-up

00:27:56.216 --> 00:27:57.646 A:middle
and choose Edit Scheme.

00:27:58.876 --> 00:28:01.406 A:middle
Here Xcode will bring down
the scheme editing sheet.

00:27:58.876 --> 00:28:01.406 A:middle
Here Xcode will bring down
the scheme editing sheet.

00:28:01.946 --> 00:28:04.456 A:middle
You can see that there's a
tab on the left corresponding

00:28:04.456 --> 00:28:07.496 A:middle
to each of the five scheme
actions as well as a Build tab

00:28:07.496 --> 00:28:09.376 A:middle
at the top that lets
me configure

00:28:09.376 --> 00:28:12.186 A:middle
which targets this
scheme will build in order

00:28:12.186 --> 00:28:14.566 A:middle
to perform the actions on the
products of those targets.

00:28:16.046 --> 00:28:17.706 A:middle
For an action like
Run, I have options

00:28:17.706 --> 00:28:19.766 A:middle
like what executable
I want to run.

00:28:19.766 --> 00:28:20.756 A:middle
In this case, it's my app.

00:28:21.636 --> 00:28:23.006 A:middle
What command line arguments

00:28:23.006 --> 00:28:24.846 A:middle
and environment variables
I might want to pass.

00:28:25.666 --> 00:28:27.056 A:middle
Even special diagnostics

00:28:27.056 --> 00:28:29.136 A:middle
like Xcode's powerful
address sanitizer

00:28:29.136 --> 00:28:30.746 A:middle
that will help you
track down problems.

00:28:31.176 --> 00:28:35.086 A:middle
Since these diagnostics are
options just on the Run action,

00:28:35.306 --> 00:28:38.216 A:middle
they won't have any effect on
the actual app later archived

00:28:38.216 --> 00:28:40.136 A:middle
for distribution, so
you don't have to worry

00:28:40.136 --> 00:28:41.976 A:middle
about these diagnostics
interfering

00:28:41.976 --> 00:28:43.216 A:middle
with what you submit
to the App Store.

00:28:44.396 --> 00:28:47.116 A:middle
I'm going to go to the Test
action, and here you can see

00:28:47.116 --> 00:28:49.416 A:middle
where I've configured what
tests this scheme will run.

00:28:50.206 --> 00:28:52.536 A:middle
Before I start changing that,
I'm going to do something

00:28:52.536 --> 00:28:54.456 A:middle
that I often do when
editing schemes,

00:28:54.646 --> 00:28:56.836 A:middle
and that's to make
a copy of my scheme

00:28:57.066 --> 00:28:58.616 A:middle
and make the edits in the copy.

00:28:59.486 --> 00:29:01.006 A:middle
That's because I still
want to keep a scheme

00:28:59.486 --> 00:29:01.006 A:middle
That's because I still
want to keep a scheme

00:29:01.006 --> 00:29:03.006 A:middle
around that knows how to
run my performance tests

00:29:03.316 --> 00:29:05.016 A:middle
because I do want to run
my performance tests.

00:29:05.016 --> 00:29:06.676 A:middle
I just want a different scheme

00:29:06.676 --> 00:29:08.556 A:middle
that lets me run
only the unit tests.

00:29:09.546 --> 00:29:10.736 A:middle
So to do that, I'm going

00:29:10.736 --> 00:29:12.526 A:middle
to select the Duplicate
Scheme button.

00:29:13.426 --> 00:29:15.606 A:middle
Xcode will give me a chance to
give this new scheme a name,

00:29:15.646 --> 00:29:18.406 A:middle
so we'll call it
QuakenatorNoPerf.

00:29:19.506 --> 00:29:21.316 A:middle
And now I can go
to the Test action,

00:29:21.606 --> 00:29:22.866 A:middle
find my performance tests,

00:29:23.196 --> 00:29:26.236 A:middle
and uncheck the checkbox
to disable them.

00:29:26.506 --> 00:29:28.746 A:middle
From here, you can
actually disable tests

00:29:28.746 --> 00:29:31.016 A:middle
on a per-test basis
if, for example,

00:29:31.016 --> 00:29:32.096 A:middle
you have a test that's failing

00:29:32.096 --> 00:29:33.556 A:middle
that you're not going
to any time soon.

00:29:34.566 --> 00:29:37.146 A:middle
All right, I think we're done
with configuring our new scheme,

00:29:37.516 --> 00:29:39.236 A:middle
but before I go back
to running our tests,

00:29:39.376 --> 00:29:41.176 A:middle
I want to show you one
more useful thing here,

00:29:41.176 --> 00:29:43.476 A:middle
and that's how to
manage your schemes.

00:29:44.676 --> 00:29:46.416 A:middle
The Manage Schemes
button at the bottom

00:29:46.416 --> 00:29:49.556 A:middle
of this sheet will bring you to
Xcode's scheme management sheet,

00:29:49.916 --> 00:29:51.786 A:middle
and here we show
you every scheme

00:29:51.786 --> 00:29:53.286 A:middle
that Xcode has found
in your project.

00:29:54.406 --> 00:29:56.466 A:middle
I'd like to especially
call your attention

00:29:56.746 --> 00:29:58.706 A:middle
to the shared checkbox
column on the right.

00:29:59.706 --> 00:30:02.456 A:middle
If a scheme is shared,
assuming that you also checked

00:29:59.706 --> 00:30:02.456 A:middle
If a scheme is shared,
assuming that you also checked

00:30:02.456 --> 00:30:06.066 A:middle
that scheme into source control,
all your coworkers will also get

00:30:06.166 --> 00:30:08.286 A:middle
that same scheme when they
work with this project,

00:30:08.786 --> 00:30:10.846 A:middle
and any edits they or you make,

00:30:11.126 --> 00:30:13.446 A:middle
assuming that you check those
edits into source control,

00:30:13.866 --> 00:30:15.396 A:middle
will be shared with
your coworkers,

00:30:15.646 --> 00:30:18.406 A:middle
so this makes it really easy to
configure a particular scheme

00:30:18.406 --> 00:30:19.616 A:middle
that you want everyone to use

00:30:19.816 --> 00:30:21.156 A:middle
and share it with
your coworkers.

00:30:22.706 --> 00:30:25.446 A:middle
Since my coworkers might want
to be able to run the unit tests

00:30:25.446 --> 00:30:27.846 A:middle
without the performance tests
too, I'm going to go ahead

00:30:27.846 --> 00:30:28.856 A:middle
and share my new scheme.

00:30:30.046 --> 00:30:32.646 A:middle
Okay, I think we're done
here, so let's go back

00:30:32.976 --> 00:30:34.616 A:middle
and run our tests one more time.

00:30:35.156 --> 00:30:40.016 A:middle
It's preparing to run my
tests in the simulator,

00:30:41.026 --> 00:30:43.436 A:middle
attaching to my tests, and
now it's running the tests.

00:30:43.676 --> 00:30:47.276 A:middle
And you can see from the test
navigator on the left that most

00:30:47.276 --> 00:30:49.966 A:middle
of my tests have passed,
but I have one test failure.

00:30:51.346 --> 00:30:53.116 A:middle
If I want a closer look
at what just happened,

00:30:53.306 --> 00:30:55.886 A:middle
I can find that in
Xcode's reports navigator.

00:30:57.296 --> 00:31:00.976 A:middle
The reports navigator shows
the log for every action

00:30:57.296 --> 00:31:00.976 A:middle
The reports navigator shows
the log for every action

00:31:00.976 --> 00:31:04.126 A:middle
that I performed grouped by
the scheme which was used

00:31:04.126 --> 00:31:05.076 A:middle
to perform that action.

00:31:05.836 --> 00:31:09.376 A:middle
So here I just perform a Build
automatically when I went

00:31:09.376 --> 00:31:11.866 A:middle
to test and then the
tests that I requested.

00:31:13.096 --> 00:31:15.376 A:middle
If I select the Build log
and adjust the filters

00:31:15.376 --> 00:31:19.036 A:middle
to show me everything, I can
see every command that Xcode ran

00:31:19.036 --> 00:31:21.976 A:middle
to build both my
application and my unit tests.

00:31:22.856 --> 00:31:27.376 A:middle
If I select the Test log, Xcode
shows me every test that it ran,

00:31:27.906 --> 00:31:30.366 A:middle
its status, and I
can even turn this

00:31:30.366 --> 00:31:32.746 A:middle
down to find the
test failure message.

00:31:32.986 --> 00:31:34.786 A:middle
In this case, one of my
test assertions failed

00:31:34.786 --> 00:31:37.176 A:middle
because an earthquake
magnitude was out of bounds.

00:31:38.796 --> 00:31:40.346 A:middle
I'm going to hover
over one of my tests,

00:31:40.346 --> 00:31:42.146 A:middle
and I'll get a little
jump arrow here.

00:31:42.856 --> 00:31:44.716 A:middle
So if I select that,
Xcode will jump me right

00:31:44.716 --> 00:31:45.746 A:middle
to the failing test.

00:31:46.936 --> 00:31:50.486 A:middle
Here you can see where I declare
my test, and there's a badge

00:31:50.486 --> 00:31:52.356 A:middle
to the left of the
test method indicating

00:31:52.356 --> 00:31:53.866 A:middle
that that test is
currently failing.

00:31:55.016 --> 00:31:57.576 A:middle
If I scroll down, I can find
the actual test failure.

00:31:58.306 --> 00:32:00.406 A:middle
Here I have a test assertion
that's checking the range

00:31:58.306 --> 00:32:00.406 A:middle
Here I have a test assertion
that's checking the range

00:32:00.406 --> 00:32:04.686 A:middle
of my test data or earthquake
data magnitude, and it looks

00:32:04.686 --> 00:32:06.686 A:middle
like this range check
is failing.

00:32:06.686 --> 00:32:08.236 A:middle
Actually, this looks
pretty simple.

00:32:08.236 --> 00:32:10.856 A:middle
I think I just have a less than
when I should have a greater

00:32:10.856 --> 00:32:13.696 A:middle
than because I'm trying to check
the interior of this range,

00:32:13.986 --> 00:32:15.466 A:middle
so I think that should
fix my test.

00:32:16.856 --> 00:32:19.676 A:middle
Let's go ahead and run this test
again and see if that fixes,

00:32:20.286 --> 00:32:22.946 A:middle
but since I'm trying to iterate
on just this one failing test,

00:32:23.216 --> 00:32:25.636 A:middle
there's a faster way than
running all my tests every time.

00:32:25.916 --> 00:32:27.566 A:middle
I can run just this test.

00:32:28.506 --> 00:32:30.556 A:middle
To do that, I can go
to the test navigator

00:32:30.956 --> 00:32:32.566 A:middle
and mouse over my test.

00:32:32.896 --> 00:32:35.276 A:middle
You'll see that the badge
turns into a little Play button

00:32:35.276 --> 00:32:38.056 A:middle
when I do that that would
let me run just this test

00:32:38.056 --> 00:32:40.406 A:middle
or I can run just an
entire suite of tests,

00:32:41.196 --> 00:32:43.336 A:middle
or if I don't want to switch
back to the test navigator,

00:32:43.576 --> 00:32:46.426 A:middle
I can even run my test right
from the source editor simply

00:32:46.426 --> 00:32:48.536 A:middle
by mousing over the
failure badge to the left

00:32:48.536 --> 00:32:51.336 A:middle
of the test method and clicking
the Play button that appears.

00:32:52.666 --> 00:32:53.676 A:middle
So let's click that now.

00:32:54.206 --> 00:32:56.686 A:middle
It's building my change to
my tests, and it's going

00:32:56.686 --> 00:32:57.946 A:middle
to run my tests again.

00:33:00.116 --> 00:33:02.246 A:middle
So it's ran my tests
again, and it looks

00:33:02.246 --> 00:33:04.936 A:middle
like my test is still failing,
so I must have another problem.

00:33:04.936 --> 00:33:08.836 A:middle
I'm going to scroll
down, and here I see each

00:33:08.836 --> 00:33:11.746 A:middle
of my earthquakes
has a visual badge

00:33:11.746 --> 00:33:13.606 A:middle
that graphically
indicates its magnitude,

00:33:13.916 --> 00:33:16.526 A:middle
and for my test earthquake
data, I'm just making sure

00:33:16.526 --> 00:33:18.476 A:middle
that every earthquake
has a graphical badge,

00:33:18.476 --> 00:33:21.536 A:middle
but one of them has a nil badge,
so it's missing its badge.

00:33:22.586 --> 00:33:24.786 A:middle
This doesn't look like a
problem with my test code.

00:33:24.786 --> 00:33:26.796 A:middle
It's probably a problem
with a code that sets

00:33:26.796 --> 00:33:29.226 A:middle
up these earthquakes, so I'm
going to jump to that code

00:33:29.646 --> 00:33:31.396 A:middle
and take a closer look
at what's going on.

00:33:32.696 --> 00:33:34.536 A:middle
We're showing you a
number of ways to navigate

00:33:34.536 --> 00:33:35.906 A:middle
around your code in Xcode today,

00:33:36.116 --> 00:33:38.816 A:middle
but I'm about to show you the
single most useful navigational

00:33:38.816 --> 00:33:39.746 A:middle
gesture that we have.

00:33:41.186 --> 00:33:43.796 A:middle
In Xcode's file menu,
we have a command --

00:33:44.186 --> 00:33:46.106 A:middle
whoop -- called Open Quickly.

00:33:46.916 --> 00:33:48.846 A:middle
This is one keyboard shortcut
you will definitely want

00:33:48.846 --> 00:33:51.366 A:middle
to memorize, Command
Shift O, as you'll want

00:33:51.366 --> 00:33:52.606 A:middle
to use this all the time.

00:33:53.686 --> 00:33:56.856 A:middle
If I select Open Quickly, I
get a textbox in the middle

00:33:56.856 --> 00:34:00.806 A:middle
of my window, and I can type in
this to search all the symbols,

00:33:56.856 --> 00:34:00.806 A:middle
of my window, and I can type in
this to search all the symbols,

00:34:01.036 --> 00:34:04.366 A:middle
like my method names, in
my own project as well

00:34:04.366 --> 00:34:08.025 A:middle
as all the symbols in Apple's
API, so it makes it really easy

00:34:08.025 --> 00:34:10.616 A:middle
to find whatever I'm looking
for, whether it's in my own code

00:34:10.846 --> 00:34:12.315 A:middle
or in the system frameworks.

00:34:13.446 --> 00:34:15.926 A:middle
This also is a nice, fuzzy
search, so I don't have

00:34:15.926 --> 00:34:18.186 A:middle
to know exactly the name
of what I'm looking for.

00:34:18.565 --> 00:34:20.306 A:middle
In this case, I think
my earthquakes are set

00:34:20.306 --> 00:34:22.396 A:middle
up in some method
that fetches quakes,

00:34:22.696 --> 00:34:24.956 A:middle
so let's try typing
Fetch Quakes,

00:34:25.545 --> 00:34:28.835 A:middle
and you can see it's found my
Fetch Latest Quakes method,

00:34:29.235 --> 00:34:31.156 A:middle
even though I didn't have
the name exactly right

00:34:31.156 --> 00:34:34.196 A:middle
because it's a fuzzy match,
and there are three instances

00:34:34.196 --> 00:34:35.755 A:middle
where this method
shows up in my project,

00:34:36.065 --> 00:34:38.036 A:middle
but the first one that's
selected is where I set

00:34:38.036 --> 00:34:39.716 A:middle
up my test data, so
that's the right one.

00:34:39.716 --> 00:34:43.636 A:middle
So I'm just going to hit Return
to jump right to that code.

00:34:44.076 --> 00:34:46.726 A:middle
Okay, so here I'm setting
up my test earthquakes.

00:34:47.045 --> 00:34:50.126 A:middle
I don't see anything obviously
wrong with this, so it's time

00:34:50.126 --> 00:34:51.856 A:middle
to take a closer look
at what's going on.

00:34:52.196 --> 00:34:54.646 A:middle
And to do that, I'm going
to use Xcode's debugger.

00:34:55.755 --> 00:34:58.546 A:middle
Xcode's debugger is available
whenever you perform the Run

00:34:58.546 --> 00:35:00.236 A:middle
or Test action in Xcode.

00:34:58.546 --> 00:35:00.236 A:middle
or Test action in Xcode.

00:35:00.586 --> 00:35:03.666 A:middle
And you can get it to stop
on a line of code or break

00:35:04.076 --> 00:35:05.966 A:middle
by setting a break
point on that line.

00:35:06.526 --> 00:35:09.856 A:middle
I can set a break point by
clicking on the left-hand side

00:35:09.856 --> 00:35:11.226 A:middle
of the editor, and you'll see

00:35:11.226 --> 00:35:13.136 A:middle
that a break point
badge appears.

00:35:14.106 --> 00:35:15.946 A:middle
I can click on that
again to gray it out

00:35:15.946 --> 00:35:18.496 A:middle
and temporarily disable it
if I want to skip past it

00:35:18.906 --> 00:35:21.616 A:middle
or I could just drag it out
when I'm done with it and let go

00:35:21.616 --> 00:35:22.636 A:middle
to delete my break point.

00:35:23.856 --> 00:35:25.856 A:middle
In this case, I do want my
break point, so I'm going

00:35:25.856 --> 00:35:28.586 A:middle
to click again to create
it, and let's go ahead

00:35:28.586 --> 00:35:29.686 A:middle
and run our test again.

00:35:29.686 --> 00:35:32.556 A:middle
I'm going to show you one last
quick way to run the same tests.

00:35:32.966 --> 00:35:35.146 A:middle
There's a command in
Xcode called Test Again,

00:35:35.146 --> 00:35:39.096 A:middle
and Test Again will run whatever
test or tests I ran last,

00:35:39.446 --> 00:35:40.536 A:middle
so it makes it really easy

00:35:40.536 --> 00:35:42.926 A:middle
to repeatedly run the same
tests as you work on them.

00:35:44.186 --> 00:35:46.486 A:middle
I can get at Test Again
from Xcode's product menu

00:35:46.956 --> 00:35:48.806 A:middle
under the Perform
Action submenu.

00:35:48.806 --> 00:35:51.166 A:middle
There's actually a number
of useful commands in here,

00:35:51.246 --> 00:35:55.086 A:middle
but here's Test Again, so
I'll go ahead and select it.

00:35:55.086 --> 00:35:57.396 A:middle
Xcode's going to run
just this one test.

00:35:58.266 --> 00:36:00.106 A:middle
It's attaching to my
test in the simulator,

00:35:58.266 --> 00:36:00.106 A:middle
It's attaching to my
test in the simulator,

00:36:00.106 --> 00:36:02.976 A:middle
starting to run my
test, and you can see

00:36:02.976 --> 00:36:04.046 A:middle
that Xcode has now stopped

00:36:04.046 --> 00:36:05.716 A:middle
in the debugger on
this line of code.

00:36:06.866 --> 00:36:09.136 A:middle
When the debugger stopped,
a few things happened.

00:36:09.826 --> 00:36:13.466 A:middle
First, at the bottom, the Debug
bar appeared, giving me a number

00:36:13.466 --> 00:36:15.806 A:middle
of different controls to allow
me to control the debugger,

00:36:16.026 --> 00:36:18.256 A:middle
such as Continue, Step
Over, and Step Into.

00:36:19.756 --> 00:36:24.096 A:middle
Below that is a variable area
showing me each of the variables

00:36:24.096 --> 00:36:25.546 A:middle
that are visible in
my current scope.

00:36:26.106 --> 00:36:28.186 A:middle
Here I declare three
different earthquake objects,

00:36:28.186 --> 00:36:29.716 A:middle
but I haven't assigned
their values yet,

00:36:29.926 --> 00:36:31.016 A:middle
so it shows no value.

00:36:31.576 --> 00:36:34.646 A:middle
On the right-hand
side is a console area

00:36:34.646 --> 00:36:38.026 A:middle
that shows all the output my
program has printed to standard

00:36:38.026 --> 00:36:41.876 A:middle
out or standard error, and we'll
come back to that in a minute.

00:36:42.206 --> 00:36:44.566 A:middle
Finally, you'll notice
because Xcode is stopped

00:36:44.566 --> 00:36:47.066 A:middle
in the debugger, one of
those behaviors kicked in,

00:36:47.326 --> 00:36:50.026 A:middle
and Xcode automatically switched
me to the debug navigator.

00:36:50.886 --> 00:36:52.356 A:middle
Here Xcode shows
where I'm stopped

00:36:52.356 --> 00:36:53.746 A:middle
in my code in every thread.

00:36:54.236 --> 00:36:57.376 A:middle
This code is actually running on
a background thread right now,

00:36:57.376 --> 00:37:01.556 A:middle
Thread 6, and all of my stack
frames that I have source code

00:36:57.376 --> 00:37:01.556 A:middle
Thread 6, and all of my stack
frames that I have source code

00:37:01.556 --> 00:37:05.346 A:middle
for are shown in black,
whereas all of the stack frames

00:37:05.346 --> 00:37:08.456 A:middle
that contain system code that
I don't have source code for

00:37:08.456 --> 00:37:11.116 A:middle
and can't look at
are shown in gray.

00:37:12.026 --> 00:37:14.556 A:middle
You'll notice that there's
actually a dashed line here

00:37:14.556 --> 00:37:15.826 A:middle
aligning some of these frames.

00:37:15.826 --> 00:37:18.906 A:middle
It's because I don't really need
to see 10 frames of system code

00:37:18.906 --> 00:37:21.266 A:middle
that I don't have source code
for, but of course, if I do want

00:37:21.266 --> 00:37:24.626 A:middle
to see exactly what's happening,
I can adjust the filter controls

00:37:24.626 --> 00:37:26.096 A:middle
at the bottom of
the debug navigator.

00:37:27.776 --> 00:37:29.836 A:middle
All right, let's try stepping
over this line of code

00:37:29.836 --> 00:37:32.276 A:middle
where we initialized this first
earthquake and see what happens.

00:37:32.276 --> 00:37:34.606 A:middle
I'm going to use the Step
Over button to do that.

00:37:35.566 --> 00:37:37.876 A:middle
When I do that, Xcode continues
to the next line of code,

00:37:38.206 --> 00:37:41.116 A:middle
and you'll see that my first
earthquake object has been

00:37:41.116 --> 00:37:42.506 A:middle
initialized in the
variables view.

00:37:42.506 --> 00:37:46.816 A:middle
I can actually twist this open
to inspect all the properties

00:37:46.816 --> 00:37:50.596 A:middle
of this new earthquake,
and here's my visual badge.

00:37:50.796 --> 00:37:53.026 A:middle
Since this is an image and I
might want to take a close look

00:37:53.026 --> 00:37:55.246 A:middle
at what this is, Xcode
gives me the ability

00:37:55.246 --> 00:37:58.986 A:middle
to quick look objects like
this, and when I quick look it,

00:37:58.986 --> 00:38:01.646 A:middle
Xcode will read the image right
out of my program's memory

00:37:58.986 --> 00:38:01.646 A:middle
Xcode will read the image right
out of my program's memory

00:38:01.796 --> 00:38:03.356 A:middle
and display it graphically here

00:38:03.356 --> 00:38:06.046 A:middle
so you can inspect exactly what
the value of that image is.

00:38:07.446 --> 00:38:09.606 A:middle
Well, this badge
obviously isn't the program

00:38:09.606 --> 00:38:11.676 A:middle
since this one isn't
nil, so let's check

00:38:11.676 --> 00:38:12.906 A:middle
out the next earthquake.

00:38:13.256 --> 00:38:15.376 A:middle
And to do that, I'm actually
going to step into the creation

00:38:15.376 --> 00:38:17.156 A:middle
of this next earthquake
and see what happens.

00:38:18.116 --> 00:38:20.826 A:middle
I use the Step Into
button here to step right

00:38:20.826 --> 00:38:21.776 A:middle
into this initializer,

00:38:22.336 --> 00:38:25.236 A:middle
and here's where we
initialize our earthquake.

00:38:25.236 --> 00:38:27.486 A:middle
So I can just start stepping
through each line of code.

00:38:28.716 --> 00:38:30.356 A:middle
Here's the switch
statement where we choose

00:38:30.356 --> 00:38:31.966 A:middle
which magnitude badge to use.

00:38:32.376 --> 00:38:33.946 A:middle
And here's the badge
we're initializing.

00:38:34.246 --> 00:38:36.516 A:middle
I don't think this
is quite right.

00:38:36.516 --> 00:38:40.146 A:middle
I don't think IIII is
a valid Roman numeral.

00:38:41.346 --> 00:38:45.406 A:middle
So that's probably the problem,
and I could try fixing my code,

00:38:45.406 --> 00:38:47.166 A:middle
stopping it, running
my test again,

00:38:47.486 --> 00:38:50.096 A:middle
but Xcode makes it possible to
try things out without having

00:38:50.096 --> 00:38:51.856 A:middle
to stop and start
over every time.

00:38:52.286 --> 00:38:54.726 A:middle
And to do that, I'm going to
use a debugger expression.

00:38:55.436 --> 00:39:00.036 A:middle
In the console area, I'm
going to use the PO command,

00:38:55.436 --> 00:39:00.036 A:middle
In the console area, I'm
going to use the PO command,

00:39:00.506 --> 00:39:02.036 A:middle
which stands for Print Object,

00:39:02.656 --> 00:39:04.906 A:middle
and this command will
take any valid Swift

00:39:04.906 --> 00:39:07.236 A:middle
or Objective-C expression
and execute it for me.

00:39:07.726 --> 00:39:10.256 A:middle
So I can simply copy
this image initializer

00:39:10.846 --> 00:39:12.796 A:middle
and paste it right
into my console area.

00:39:12.796 --> 00:39:15.146 A:middle
So let's make this console
area a little bigger

00:39:15.146 --> 00:39:17.436 A:middle
and let's also clear
out the existing text

00:39:17.436 --> 00:39:19.166 A:middle
with the Clear button so
I can see what I'm doing.

00:39:20.486 --> 00:39:23.596 A:middle
And now I'm going to hit Return
to execute this expression

00:39:23.646 --> 00:39:26.876 A:middle
in my application, and you can
see that it's returned nil,

00:39:26.876 --> 00:39:28.396 A:middle
so there is no image
of that name.

00:39:29.616 --> 00:39:31.926 A:middle
I'm going to press the up arrow
to recall this expression,

00:39:32.386 --> 00:39:35.856 A:middle
and let's try IV, which I think
is the right Roman numeral

00:39:35.856 --> 00:39:36.366 A:middle
for 4.

00:39:37.106 --> 00:39:38.416 A:middle
So I'll hit Return
to execute that,

00:39:38.416 --> 00:39:40.706 A:middle
and you can see the
Xcode has returned

00:39:40.706 --> 00:39:42.076 A:middle
in actual image instance,

00:39:42.256 --> 00:39:44.366 A:middle
so it looks like that's the
right name for this image.

00:39:44.366 --> 00:39:47.686 A:middle
So at this point, I'm going to
go ahead and stop the debugger

00:39:48.496 --> 00:39:50.826 A:middle
and I'll change my image to IV,

00:39:51.376 --> 00:39:54.866 A:middle
and let's run our test one more
time with the Test Again action.

00:39:55.546 --> 00:39:58.976 A:middle
So Xcode is building the
changes that I made to my code.

00:39:58.976 --> 00:40:00.976 A:middle
It's preparing to run my tests.

00:39:58.976 --> 00:40:00.976 A:middle
It's preparing to run my tests.

00:40:01.266 --> 00:40:02.456 A:middle
Let's switch to the
test navigator

00:40:02.456 --> 00:40:03.646 A:middle
so I can see how it goes.

00:40:04.546 --> 00:40:07.786 A:middle
And, oh, it looks like I
still have a break point set.

00:40:08.526 --> 00:40:10.746 A:middle
So I want it to run my tests
and not stop in the debugger,

00:40:10.746 --> 00:40:13.016 A:middle
so let's take a look at how
to manage our break points.

00:40:14.406 --> 00:40:17.376 A:middle
Xcode's break points navigator
shows me all the break points

00:40:17.376 --> 00:40:21.326 A:middle
that I have set in my project,
which I can disclose here,

00:40:21.326 --> 00:40:23.866 A:middle
and I can disable them
individually here as well

00:40:24.236 --> 00:40:26.176 A:middle
or select them and delete
them if I'm done with them.

00:40:27.026 --> 00:40:29.056 A:middle
I can add special
kinds of break points

00:40:29.056 --> 00:40:31.286 A:middle
in the break point
navigator like breaking

00:40:31.286 --> 00:40:34.286 A:middle
on any Swift error that's
thrown, any unit test

00:40:34.286 --> 00:40:37.636 A:middle
that fails, or on any symbolic
method name that I want.

00:40:37.636 --> 00:40:41.586 A:middle
If I find that there's a certain
break point that I always want

00:40:41.586 --> 00:40:44.036 A:middle
to have, like, say, a
test failure break point,

00:40:44.436 --> 00:40:48.206 A:middle
I can make it available in every
project that I work with simply

00:40:48.536 --> 00:40:50.676 A:middle
by selecting the break
point after I add it,

00:40:51.556 --> 00:40:53.146 A:middle
bringing up the contextual menu,

00:40:53.646 --> 00:40:55.906 A:middle
and choosing Move
Break Point to User.

00:40:57.006 --> 00:40:59.076 A:middle
This moves that break point
to my user break points

00:40:59.276 --> 00:41:01.696 A:middle
and makes it available for
me no matter what project I'm

00:40:59.276 --> 00:41:01.696 A:middle
and makes it available for
me no matter what project I'm

00:41:01.696 --> 00:41:02.196 A:middle
working with.

00:41:03.956 --> 00:41:04.376 A:middle
All right.

00:41:04.496 --> 00:41:06.156 A:middle
In this case, I'm
not quite ready

00:41:06.156 --> 00:41:08.426 A:middle
to delete all my break points
yet in case this doesn't work,

00:41:08.756 --> 00:41:10.816 A:middle
so let's temporarily
disable break points

00:41:10.816 --> 00:41:11.966 A:middle
so that we don't stop at them.

00:41:12.536 --> 00:41:14.486 A:middle
I can temporarily
disable my break points

00:41:14.696 --> 00:41:16.466 A:middle
with the Break Points
button in the debug bar.

00:41:18.016 --> 00:41:19.336 A:middle
I'll now press the
Continue button

00:41:19.336 --> 00:41:20.466 A:middle
to finish running my test.

00:41:21.326 --> 00:41:23.876 A:middle
Let's go back to the test
navigator, and you can see

00:41:23.876 --> 00:41:26.356 A:middle
that all my tests are passing,
so it looks like we're done.

00:41:27.456 --> 00:41:28.846 A:middle
Let's review what
we've done here.

00:41:29.836 --> 00:41:31.496 A:middle
To review my changes,
I'm going to go back

00:41:31.496 --> 00:41:34.366 A:middle
to Xcode's project navigator
and I'm going to use a filter

00:41:34.366 --> 00:41:36.866 A:middle
at the bottom called the
source control status filter.

00:41:38.036 --> 00:41:40.826 A:middle
This will make the project
navigator show me only those

00:41:40.826 --> 00:41:42.936 A:middle
files that have a special
source control status,

00:41:43.176 --> 00:41:44.176 A:middle
such as Modified.

00:41:45.156 --> 00:41:47.106 A:middle
This both lets me see
what changes I've made

00:41:47.316 --> 00:41:50.056 A:middle
and is really useful if I
want a sort of working set,

00:41:50.326 --> 00:41:52.036 A:middle
a set of files I'm all
working on that I want

00:41:52.036 --> 00:41:53.036 A:middle
to jump between quickly.

00:41:53.406 --> 00:41:56.346 A:middle
If I modified those files, I
can use this filter to narrow it

00:41:56.346 --> 00:41:57.936 A:middle
down to just those
files I'm working on.

00:41:58.506 --> 00:42:01.806 A:middle
If I want to see the actual
changes I've made to one

00:41:58.506 --> 00:42:01.806 A:middle
If I want to see the actual
changes I've made to one

00:42:01.806 --> 00:42:03.096 A:middle
of these files, I can select it

00:42:03.096 --> 00:42:05.356 A:middle
and use Xcode's third
editor mode.

00:42:06.206 --> 00:42:08.076 A:middle
So we've already shown
you the basic editor

00:42:08.076 --> 00:42:09.146 A:middle
and the assistant editor.

00:42:09.686 --> 00:42:11.906 A:middle
Xcode's third editor mode
is the version editor,

00:42:12.176 --> 00:42:14.216 A:middle
and it has three variants.

00:42:15.076 --> 00:42:18.116 A:middle
The comparison editor
lets you compare changes

00:42:18.116 --> 00:42:20.586 A:middle
between two revisions or
your uncommitted changes

00:42:20.586 --> 00:42:22.116 A:middle
against the last
committed changes.

00:42:22.906 --> 00:42:26.256 A:middle
The blame mode lets you see who
has changed each line of code

00:42:26.256 --> 00:42:27.716 A:middle
in your file and
at what revision,

00:42:28.236 --> 00:42:30.966 A:middle
and the log mode will show
you the source control log

00:42:30.966 --> 00:42:31.676 A:middle
for your file.

00:42:32.906 --> 00:42:34.986 A:middle
In this case, I want
the comparison mode.

00:42:36.426 --> 00:42:39.656 A:middle
When I select this, Xcode shows
me two versions of my file.

00:42:40.296 --> 00:42:42.326 A:middle
On the left is my
local revision,

00:42:42.386 --> 00:42:43.846 A:middle
so these are the
changes that I've made,

00:42:44.446 --> 00:42:46.856 A:middle
and on the right is the
last revision I've committed

00:42:46.856 --> 00:42:49.676 A:middle
to source control, so this
is showing me the differences

00:42:49.716 --> 00:42:51.636 A:middle
between what I've done and
what I've last committed.

00:42:52.136 --> 00:42:55.456 A:middle
In the bottom middle are
some arrows that let me jump

00:42:55.456 --> 00:42:58.266 A:middle
between my changes, and when
I'm looking at a change,

00:42:58.436 --> 00:43:01.266 A:middle
Xcode will visually show me
what line the change happened on

00:42:58.436 --> 00:43:01.266 A:middle
Xcode will visually show me
what line the change happened on

00:43:01.436 --> 00:43:02.866 A:middle
and even highlight exactly

00:43:02.866 --> 00:43:04.466 A:middle
where the change
happened in that line.

00:43:04.466 --> 00:43:08.066 A:middle
If I want to compare
against an older revision,

00:43:08.216 --> 00:43:10.716 A:middle
I can actually pop this up
and choose whatever revision

00:43:10.716 --> 00:43:12.056 A:middle
to the file I want
to compare against

00:43:12.786 --> 00:43:15.506 A:middle
or I can even compare two
revision, older revisions

00:43:15.506 --> 00:43:17.666 A:middle
against each other by
selecting a different revision

00:43:17.666 --> 00:43:18.256 A:middle
on the left.

00:43:19.816 --> 00:43:22.306 A:middle
I think these changes are great,
so it looks like it's time

00:43:22.306 --> 00:43:24.036 A:middle
to go ahead and commit
our changes.

00:43:25.256 --> 00:43:27.706 A:middle
To commit, I'm going to go to
Xcode's source control menu

00:43:27.706 --> 00:43:30.366 A:middle
and choose the Commit
item, and this will bring

00:43:30.366 --> 00:43:31.596 A:middle
down Xcode's commit sheet.

00:43:32.846 --> 00:43:35.316 A:middle
On the left, I can see all
the files I've changed,

00:43:35.316 --> 00:43:37.986 A:middle
including some settings
files, and if I select one,

00:43:37.986 --> 00:43:40.306 A:middle
I'll get the comparison editor
right here in the commit sheet

00:43:40.516 --> 00:43:42.646 A:middle
to give me one last chance
to review all my changes.

00:43:43.966 --> 00:43:47.246 A:middle
From here, I can even discard
specific changes by clicking

00:43:47.246 --> 00:43:49.956 A:middle
on the change marker and
choosing Don't Commit

00:43:49.956 --> 00:43:52.366 A:middle
if I only want to commit some
of the changes that I've made.

00:43:53.086 --> 00:43:54.856 A:middle
In this case, I want
to commit everything,

00:43:54.856 --> 00:43:56.106 A:middle
so let's give it
a Commit message.

00:43:56.556 --> 00:44:00.916 A:middle
I'll say Fixed Tests, and I
want to push my changes right

00:43:56.556 --> 00:44:00.916 A:middle
I'll say Fixed Tests, and I
want to push my changes right

00:44:00.916 --> 00:44:03.686 A:middle
to my coworkers when I commit,
so I'll click the Push checkbox.

00:44:04.016 --> 00:44:06.296 A:middle
And let's go ahead and
commit our changes.

00:44:07.016 --> 00:44:07.956 A:middle
So Xcode's committing.

00:44:07.956 --> 00:44:11.646 A:middle
It's pushed our changes off to
my coworkers, and we're done.

00:44:12.436 --> 00:44:15.036 A:middle
When you're ready to go
ahead and distribute your app

00:44:15.506 --> 00:44:18.136 A:middle
to your testers or to the App
Store and want to learn how

00:44:18.136 --> 00:44:20.756 A:middle
to do that or if there's
anything else we didn't cover

00:44:20.756 --> 00:44:23.966 A:middle
today that you want to learn
more about, I recommend checking

00:44:23.966 --> 00:44:25.076 A:middle
out Xcode's Help Book.

00:44:25.876 --> 00:44:28.506 A:middle
You can get at the Help
Book from the Help menu

00:44:28.796 --> 00:44:33.496 A:middle
by choosing Xcode Help, and
from here, you can either search

00:44:33.496 --> 00:44:36.126 A:middle
for whatever you want more
information about or browse

00:44:36.126 --> 00:44:37.186 A:middle
through a list of topics.

00:44:37.476 --> 00:44:40.346 A:middle
For example, Archive and Output
Products, Create an Archive.

00:44:40.706 --> 00:44:42.786 A:middle
Here Xcode tells me how
to create an archive

00:44:42.786 --> 00:44:43.756 A:middle
for distributing my app.

00:44:45.156 --> 00:44:47.416 A:middle
All right, well, we've taken you

00:44:47.416 --> 00:44:49.126 A:middle
through a pretty complete
workflow here today,

00:44:49.706 --> 00:44:51.536 A:middle
but there's one more key
piece of knowledge we'd

00:44:51.536 --> 00:44:54.376 A:middle
like to leave you with before
we finish, and that's how

00:44:54.376 --> 00:44:56.656 A:middle
to customize your source
code and your projects --

00:44:56.686 --> 00:44:57.946 A:middle
sorry, how to customize
your projects --

00:44:58.036 --> 00:45:00.386 A:middle
and configure them
for your own needs.

00:44:58.036 --> 00:45:00.386 A:middle
and configure them
for your own needs.

00:45:01.246 --> 00:45:03.656 A:middle
To take you through Xcode's
core configuration concepts,

00:45:03.986 --> 00:45:08.806 A:middle
I'd like to invite Najla back up
on stage to take you through it.

00:45:09.516 --> 00:45:13.546 A:middle
[ Applause ]

00:45:14.046 --> 00:45:14.576 A:middle
&gt;&gt; Thanks, Rick.

00:45:15.626 --> 00:45:18.336 A:middle
So now you know the basic
development workflow in Xcode,

00:45:18.336 --> 00:45:20.416 A:middle
and when you're just
getting started,

00:45:20.846 --> 00:45:23.816 A:middle
that's probably all you'll
need, but as you start working

00:45:23.816 --> 00:45:26.096 A:middle
on more complex projects,
you'll need to know how

00:45:26.096 --> 00:45:28.096 A:middle
to configure your
projects and settings.

00:45:29.686 --> 00:45:30.926 A:middle
So let's take a quick tour

00:45:31.006 --> 00:45:33.326 A:middle
of Xcode's core configuration
concepts

00:45:33.726 --> 00:45:36.126 A:middle
so that you'll understand
what you're working with.

00:45:36.976 --> 00:45:40.296 A:middle
So there are five concepts that
we want to talk about today --

00:45:41.226 --> 00:45:44.326 A:middle
Xcode projects and the
targets that they contain,

00:45:45.586 --> 00:45:47.666 A:middle
the Build settings
and capabilities

00:45:47.726 --> 00:45:51.956 A:middle
that configure how Xcode
behaves, and workspaces

00:45:51.956 --> 00:45:57.886 A:middle
for organizing your project.

00:45:57.886 --> 00:46:01.366 A:middle
So let's begin by
talking about projects.

00:45:57.886 --> 00:46:01.366 A:middle
So let's begin by
talking about projects.

00:46:02.096 --> 00:46:05.186 A:middle
A project is a document
that you use

00:46:05.186 --> 00:46:08.426 A:middle
to organize your code
an resources in Xcode.

00:46:09.826 --> 00:46:13.566 A:middle
You have references to source
code files and resource files

00:46:14.896 --> 00:46:19.536 A:middle
on disc, targets which actually
build those files into products

00:46:19.886 --> 00:46:23.196 A:middle
like your app, Build settings

00:46:23.286 --> 00:46:25.846 A:middle
which configure how your
targets build their products,

00:46:27.486 --> 00:46:30.646 A:middle
and schemes which configure
how you perform actions,

00:46:31.086 --> 00:46:32.736 A:middle
such as Run, with your targets.

00:46:34.856 --> 00:46:36.616 A:middle
Now, to access your
project settings,

00:46:37.066 --> 00:46:38.716 A:middle
you select your project
in the navigator,

00:46:38.716 --> 00:46:42.426 A:middle
you select the popover
at the top of the editor,

00:46:42.876 --> 00:46:44.386 A:middle
and select your project there.

00:46:45.356 --> 00:46:48.496 A:middle
Now, your project settings are
distributed between two tabs,

00:46:49.256 --> 00:46:51.166 A:middle
your Info and Build
settings tab.

00:46:51.806 --> 00:46:54.236 A:middle
And most common settings
are available in Info.

00:46:54.956 --> 00:46:56.266 A:middle
There's one that I
want to point out,

00:46:56.316 --> 00:46:58.536 A:middle
which is the deployment
target of your application.

00:46:59.846 --> 00:47:02.246 A:middle
Your deployment target
is the minimum OS version

00:46:59.846 --> 00:47:02.246 A:middle
Your deployment target
is the minimum OS version

00:47:02.636 --> 00:47:04.316 A:middle
that your app can
run on and support.

00:47:04.866 --> 00:47:08.736 A:middle
Currently, our app only supports
iOS 10, but if I wanted our app

00:47:08.966 --> 00:47:12.226 A:middle
to support iOS 9, I could change
it here in the project settings.

00:47:13.056 --> 00:47:16.356 A:middle
Let's move on to
talking about targets.

00:47:16.356 --> 00:47:21.506 A:middle
A target contains the
instructions to build one thing

00:47:22.036 --> 00:47:23.876 A:middle
like an app or a framework.

00:47:25.166 --> 00:47:27.966 A:middle
The thing that your target
produces is called its product.

00:47:28.186 --> 00:47:32.236 A:middle
The set of steps that
your target takes

00:47:32.326 --> 00:47:34.836 A:middle
to build its product
are called build phases.

00:47:35.946 --> 00:47:38.956 A:middle
And lastly, a target
has Build settings

00:47:39.186 --> 00:47:41.606 A:middle
to configure how it
builds its product.

00:47:43.036 --> 00:47:46.206 A:middle
Now, one thing to note
is that both projects

00:47:46.206 --> 00:47:47.716 A:middle
and targets have Build settings,

00:47:47.766 --> 00:47:51.406 A:middle
and targets inherit the value
set at the project level

00:47:51.846 --> 00:47:54.896 A:middle
but can override them with
a target-specific value.

00:47:57.076 --> 00:48:01.556 A:middle
A target's build phases do
things like cause dependencies

00:47:57.076 --> 00:48:01.556 A:middle
A target's build phases do
things like cause dependencies

00:48:01.556 --> 00:48:04.906 A:middle
to build first, compile the
source files in that target,

00:48:04.906 --> 00:48:08.026 A:middle
and link the target against
libraries and frameworks.

00:48:08.896 --> 00:48:13.146 A:middle
You can also add what's called
a run script build phase

00:48:13.386 --> 00:48:15.646 A:middle
to configure other aspects
of the build that you'd like.

00:48:16.456 --> 00:48:20.626 A:middle
You can access your
target settings

00:48:21.376 --> 00:48:25.236 A:middle
by selecting your project in the
navigator, selecting the popover

00:48:25.236 --> 00:48:26.416 A:middle
at the top of the editor,

00:48:26.456 --> 00:48:28.176 A:middle
and picking the target
of your choice.

00:48:29.106 --> 00:48:33.236 A:middle
Now, your target settings are
distributed between a few tabs,

00:48:34.356 --> 00:48:37.186 A:middle
such as the Build Settings
tab, the Capabilities tab,

00:48:37.396 --> 00:48:39.506 A:middle
and the Build Phases tab.

00:48:40.236 --> 00:48:42.336 A:middle
So let's talk a little bit more

00:48:42.396 --> 00:48:44.736 A:middle
about those Build
settings and capabilities.

00:48:45.486 --> 00:48:51.076 A:middle
A Build setting contains a
name and a value of some aspect

00:48:51.506 --> 00:48:54.096 A:middle
that controls some aspect
of the build process.

00:48:54.516 --> 00:48:57.116 A:middle
For example, there are Build
settings for specifying

00:48:57.116 --> 00:48:58.756 A:middle
which architectures
you want to build,

00:48:59.556 --> 00:49:03.046 A:middle
whether your code is optimized,
what your product is named,

00:48:59.556 --> 00:49:03.046 A:middle
whether your code is optimized,
what your product is named,

00:49:03.386 --> 00:49:04.936 A:middle
and even how you
deal with warnings.

00:49:05.696 --> 00:49:10.446 A:middle
The Build settings are
available at both the project

00:49:10.446 --> 00:49:13.426 A:middle
and the target level in
the Build Settings tab

00:49:13.886 --> 00:49:17.176 A:middle
in a big table that contains
all of the names and values.

00:49:18.006 --> 00:49:22.256 A:middle
Now, Build settings
can also vary

00:49:22.256 --> 00:49:25.846 A:middle
by what's called a build
configuration, and by default,

00:49:25.846 --> 00:49:28.716 A:middle
a project has a debug and
a release configuration.

00:49:29.826 --> 00:49:31.816 A:middle
For example, when you're
building for debug,

00:49:32.286 --> 00:49:34.416 A:middle
you probably don't want
your code to be optimized,

00:49:34.876 --> 00:49:36.156 A:middle
but when you're building
for release,

00:49:36.376 --> 00:49:40.876 A:middle
you do want your
code to be optimized.

00:49:41.416 --> 00:49:43.256 A:middle
In addition to fine-grain
Build settings,

00:49:43.596 --> 00:49:46.336 A:middle
Xcode also offers
capabilities, which allows you

00:49:46.336 --> 00:49:48.406 A:middle
to easily turn on
specific features.

00:49:49.916 --> 00:49:52.386 A:middle
For example, for iOS,
there are capabilities

00:49:52.386 --> 00:49:55.496 A:middle
for enabling in-app purchases
and Apple Maps integration,

00:49:56.236 --> 00:49:59.036 A:middle
and if you want more information
about what a capability does,

00:49:59.536 --> 00:50:01.916 A:middle
you can twist it open in
the Capabilities panel.

00:49:59.536 --> 00:50:01.916 A:middle
you can twist it open in
the Capabilities panel.

00:50:02.956 --> 00:50:05.216 A:middle
You can also enable or
disable a capability

00:50:05.306 --> 00:50:11.456 A:middle
by using the On/Off switch
on the right of the editor.

00:50:11.456 --> 00:50:13.366 A:middle
Lastly, let's talk
about workspaces.

00:50:15.096 --> 00:50:17.506 A:middle
So you may find over time
that you like to work

00:50:17.506 --> 00:50:19.126 A:middle
on a group of projects as a set.

00:50:19.816 --> 00:50:21.926 A:middle
For example, you might
have two projects

00:50:22.256 --> 00:50:23.776 A:middle
that share the same
framework and you

00:50:23.776 --> 00:50:24.966 A:middle
like to work on them together.

00:50:25.576 --> 00:50:30.586 A:middle
In this situation, you can
create an Xcode workspace

00:50:30.636 --> 00:50:31.876 A:middle
that references your projects.

00:50:32.846 --> 00:50:37.706 A:middle
So when you open your workspace
in Xcode, it'll contain all

00:50:37.706 --> 00:50:40.466 A:middle
of the contents of the
projects that you've referenced,

00:50:40.866 --> 00:50:43.526 A:middle
which makes it easy
to edit and navigate

00:50:43.526 --> 00:50:45.806 A:middle
across them as related code.

00:50:47.356 --> 00:50:49.166 A:middle
So now you know more

00:50:49.226 --> 00:50:51.536 A:middle
about Xcode's core
configuration concepts.

00:50:52.176 --> 00:50:53.886 A:middle
Armed with this knowledge
in addition

00:50:53.886 --> 00:50:56.976 A:middle
to Xcode's basic development
workflow, and you have the tools

00:50:57.036 --> 00:50:59.566 A:middle
to make some really
awesome apps.

00:51:00.496 --> 00:51:04.686 A:middle
So today we showed you the most
important components of Xcode

00:51:04.686 --> 00:51:05.976 A:middle
by building an application.

00:51:06.906 --> 00:51:09.206 A:middle
You learned how to create a
new application and run it

00:51:09.206 --> 00:51:12.646 A:middle
in the simulator and how
to test and debug it.

00:51:12.686 --> 00:51:15.516 A:middle
We also talked about some
of Xcode's invaluable tools,

00:51:15.516 --> 00:51:18.926 A:middle
such as Command and Option
Clicking and Open Quickly.

00:51:20.246 --> 00:51:22.296 A:middle
We also showed you
how to navigate

00:51:22.296 --> 00:51:26.876 A:middle
in your project using the
filter bar and the jump bar.

00:51:27.526 --> 00:51:30.956 A:middle
You learned how to review and
commit your changes and also how

00:51:30.956 --> 00:51:33.386 A:middle
to configure your project and
settings once you're ready

00:51:33.386 --> 00:51:34.396 A:middle
to submit it to the store.

00:51:34.396 --> 00:51:39.446 A:middle
We hope that after this session
you have a better understanding

00:51:39.446 --> 00:51:42.616 A:middle
of all of the different kinds of
things that you can do in Xcode,

00:51:42.616 --> 00:51:47.536 A:middle
and we're really excited to see
all of the apps that you create.

00:51:47.536 --> 00:51:47.616 A:middle
If--

00:51:48.516 --> 00:51:53.906 A:middle
[ Applause ]

00:51:54.406 --> 00:51:58.636 A:middle
Yeah. So if you want more
information about our session,

00:51:58.636 --> 00:52:04.486 A:middle
you can navigate to
developer.apple.com/wwdc16/413.

00:51:58.636 --> 00:52:04.486 A:middle
you can navigate to
developer.apple.com/wwdc16/413.

00:52:05.026 --> 00:52:09.696 A:middle
And if you're interested in a
specific component of Xcode,

00:52:10.186 --> 00:52:12.566 A:middle
there are a few sessions that
you can attend or watch online.

00:52:13.216 --> 00:52:16.246 A:middle
For example, there was a session
on Tuesday on Xcode app signing,

00:52:16.246 --> 00:52:17.576 A:middle
which is really important
when you're

00:52:17.576 --> 00:52:19.076 A:middle
about to submit your
app to the store.

00:52:19.876 --> 00:52:23.076 A:middle
There was a session on testing
and continuous integration

00:52:23.706 --> 00:52:25.476 A:middle
and on debugging
tips and tricks.

00:52:26.866 --> 00:52:28.246 A:middle
Thanks for watching our session,

00:52:28.366 --> 00:52:30.976 A:middle
and we hope that you have a
great time at the conference.

00:52:31.516 --> 00:52:34.500 A:middle
[ Applause ]
