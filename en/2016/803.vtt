WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:19.500 A:middle
[ Music ]

00:00:23.516 --> 00:00:25.736 A:middle
[ Applause ]

00:00:26.236 --> 00:00:26.646 A:middle
&gt;&gt; Good morning.

00:00:26.646 --> 00:00:29.116 A:middle
Good morning everyone.

00:00:30.416 --> 00:00:33.386 A:middle
My name is Antonio Cavedoni,
and I am here to present to you

00:00:33.386 --> 00:00:34.936 A:middle
about typography and fonts.

00:00:34.936 --> 00:00:37.506 A:middle
I am a type designer at Apple.

00:00:38.036 --> 00:00:41.446 A:middle
So, on the agenda today we
will look at San Francisco

00:00:41.446 --> 00:00:43.086 A:middle
and update our system fonts.

00:00:43.856 --> 00:00:45.926 A:middle
We will see some
terminology about typography.

00:00:47.026 --> 00:00:48.816 A:middle
We will look at some
typographic concepts.

00:00:49.626 --> 00:00:52.066 A:middle
And then tools that you have
available when doing typography.

00:00:53.276 --> 00:00:55.226 A:middle
Lastly, we will see some
details that you may want

00:00:55.226 --> 00:00:59.296 A:middle
to adopt while working
on your apps.

00:00:59.526 --> 00:01:04.196 A:middle
Okay. So, San Francisco, it
is our family of system fonts.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.526 --> 00:01:04.196 A:middle
Okay. So, San Francisco, it
is our family of system fonts.

00:01:04.766 --> 00:01:06.016 A:middle
We introduced them last year.

00:01:06.896 --> 00:01:09.126 A:middle
This is SF you see right here.

00:01:09.526 --> 00:01:14.656 A:middle
And it is the system font
for macOS, iOS and tvOS.

00:01:14.656 --> 00:01:17.666 A:middle
We introduced this family
here at WWDC last year.

00:01:17.996 --> 00:01:20.296 A:middle
There is a video that
talks about the philosophy

00:01:20.296 --> 00:01:24.836 A:middle
and application of SF.

00:01:24.916 --> 00:01:27.146 A:middle
And we've been applying
it to all our platforms.

00:01:27.666 --> 00:01:32.246 A:middle
So, Apple TV, we've been
applying San Francisco to Macs.

00:01:32.526 --> 00:01:36.346 A:middle
But we've also been applying
it to the redesigned music app.

00:01:36.816 --> 00:01:39.626 A:middle
Now, in case you haven't
seen it all around you here

00:01:39.626 --> 00:01:42.096 A:middle
in Moscone Center, there
is indeed a new member

00:01:42.296 --> 00:01:45.466 A:middle
of the SF family, and
it is called SF Mono.

00:01:46.216 --> 00:01:50.316 A:middle
SF Mono is a new
design for coding

00:01:50.806 --> 00:01:52.426 A:middle
and it comes in many ways.

00:01:52.426 --> 00:01:57.236 A:middle
We started with a light
weight, up to regular, medium,

00:01:58.116 --> 00:02:01.016 A:middle
semi bold, and then we're
going to more expressive ways


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.116 --> 00:02:01.016 A:middle
semi bold, and then we're
going to more expressive ways

00:02:01.066 --> 00:02:02.736 A:middle
like bold and even heavy.

00:02:03.586 --> 00:02:06.936 A:middle
So, all of these come
with italics as well.

00:02:08.126 --> 00:02:11.636 A:middle
And they cover the Latin,
SL, and Latin script.

00:02:11.636 --> 00:02:16.536 A:middle
But, also the Cyrillic and the
Greek script in all the styles

00:02:16.536 --> 00:02:18.576 A:middle
and all the weights
with italics.

00:02:19.256 --> 00:02:22.966 A:middle
So, SF Mono is a
monospaced design, of course.

00:02:23.476 --> 00:02:26.536 A:middle
But, it's also monospaced
across weights,

00:02:28.436 --> 00:02:32.426 A:middle
which means that if you change
your font weight the text will

00:02:32.426 --> 00:02:32.956 A:middle
not reflow.

00:02:33.886 --> 00:02:35.006 A:middle
Of course this was
a bit of a challenge

00:02:35.006 --> 00:02:36.516 A:middle
when we were designing
this heavier weight.

00:02:36.566 --> 00:02:38.726 A:middle
So, we have to squeeze
all these glyphs in.

00:02:39.576 --> 00:02:43.826 A:middle
But, we designed that SF Mono
for coding in small sizes first.

00:02:43.826 --> 00:02:46.986 A:middle
And so we tweaked some of the
glyphs like the punctuation

00:02:46.986 --> 00:02:52.426 A:middle
or the bracket braces, some of
the digits for using coding.

00:02:53.586 --> 00:02:57.156 A:middle
And of course SF Mono
is the new default font

00:02:57.156 --> 00:02:58.756 A:middle
of choice of Swift Playgrounds.

00:02:59.806 --> 00:03:01.676 A:middle
It's also in default in Xcode.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.806 --> 00:03:01.676 A:middle
It's also in default in Xcode.

00:03:02.206 --> 00:03:05.816 A:middle
Check out the new
theme right there.

00:03:06.046 --> 00:03:08.836 A:middle
Okay. So, that was small
bit on San Francisco

00:03:09.106 --> 00:03:10.626 A:middle
and the new SF Mono family.

00:03:12.016 --> 00:03:16.016 A:middle
Next I want to talk to you
about some type terminology.

00:03:16.016 --> 00:03:19.256 A:middle
Get us all on the same page
on these terms about type

00:03:19.256 --> 00:03:20.616 A:middle
that can be confusing at times.

00:03:21.106 --> 00:03:23.046 A:middle
So, before I get started I just
want to make a premise here,

00:03:23.246 --> 00:03:24.766 A:middle
which is that today we'll look

00:03:24.766 --> 00:03:27.606 A:middle
at the Latin Cyrillic
and Greek scripts.

00:03:28.176 --> 00:03:30.036 A:middle
But, if you're interested
in multilingual typography,

00:03:30.316 --> 00:03:32.646 A:middle
and you should, there are,

00:03:32.876 --> 00:03:34.806 A:middle
there were actually
two talks yesterday

00:03:34.806 --> 00:03:35.766 A:middle
that you can catch on video.

00:03:36.136 --> 00:03:37.496 A:middle
That talk exactly
about this topic.

00:03:38.686 --> 00:03:39.656 A:middle
So, let's get started.

00:03:40.516 --> 00:03:41.216 A:middle
What is text?

00:03:42.476 --> 00:03:45.006 A:middle
Text encodes language, and
has to do with meaning.

00:03:45.916 --> 00:03:47.966 A:middle
Text is the stuff that you type.

00:03:48.746 --> 00:03:50.796 A:middle
It is the stuff that gets
auto-corrected and analyzed,

00:03:51.196 --> 00:03:52.136 A:middle
and sent to your friends.

00:03:53.366 --> 00:03:54.666 A:middle
Now, what is text made of?

00:03:55.316 --> 00:03:58.166 A:middle
It is made of, oops, characters.

00:03:58.986 --> 00:04:02.156 A:middle
A character is an
abstract unit of texts


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.986 --> 00:04:02.156 A:middle
A character is an
abstract unit of texts

00:04:02.666 --> 00:04:05.476 A:middle
and it literally is
represented by a code.

00:04:06.666 --> 00:04:09.236 A:middle
Now, before you can
actually see one

00:04:09.236 --> 00:04:13.026 A:middle
of these you need representation
for it, which is called a glyph,

00:04:13.766 --> 00:04:15.756 A:middle
a glyph is stored on your device

00:04:15.976 --> 00:04:19.086 A:middle
as an outline, a
sequence of points.

00:04:19.826 --> 00:04:21.856 A:middle
And it lives inside a font file.

00:04:23.386 --> 00:04:26.186 A:middle
Now in a font file between
a character and a glyph,

00:04:26.186 --> 00:04:28.016 A:middle
there usually is
a 1 to 1 mapping.

00:04:28.016 --> 00:04:29.856 A:middle
However, things are
not always this simple.

00:04:30.146 --> 00:04:33.356 A:middle
There could be something
called typographic feature,

00:04:33.786 --> 00:04:37.686 A:middle
which is a mechanism that
alters this 1 to 1 mapping,

00:04:38.406 --> 00:04:41.436 A:middle
and makes things
slightly more complex.

00:04:41.436 --> 00:04:44.916 A:middle
For instance, you could have
fonts that when you type the key

00:04:44.916 --> 00:04:47.716 A:middle
for F or I, this
character gets generated.

00:04:48.326 --> 00:04:49.686 A:middle
And instead of getting
two glyphs,

00:04:49.686 --> 00:04:52.096 A:middle
you actually get just one,
because they get combined

00:04:52.096 --> 00:04:53.476 A:middle
into what is called a ligature.

00:04:54.176 --> 00:04:55.656 A:middle
Now, this ligature
is made possible

00:04:55.656 --> 00:04:58.946 A:middle
by a typographic feature, which
is automatic and font dependent.

00:04:59.046 --> 00:04:59.956 A:middle
Not all fonts do this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:00.526 --> 00:05:02.826 A:middle
Some fonts have optional
features

00:05:03.186 --> 00:05:04.536 A:middle
that change the shape of digits.

00:05:04.536 --> 00:05:07.666 A:middle
For instance, San Francisco
has this alternate shape

00:05:07.716 --> 00:05:10.976 A:middle
for the numeral 6 that
we use when we want

00:05:10.976 --> 00:05:12.086 A:middle
to make it a little
bit more legible.

00:05:12.746 --> 00:05:15.746 A:middle
Now, fonts have multiple styles,

00:05:16.996 --> 00:05:18.176 A:middle
which of course look
all different.

00:05:18.316 --> 00:05:20.886 A:middle
Some fonts have just two styles.

00:05:21.246 --> 00:05:22.566 A:middle
Some fonts have many, many more.

00:05:22.786 --> 00:05:25.496 A:middle
And you may have heard some of
their names like Bold, Italic,

00:05:25.726 --> 00:05:27.026 A:middle
Bold Italic, Condensed.

00:05:27.026 --> 00:05:28.346 A:middle
All these are style names.

00:05:29.086 --> 00:05:33.996 A:middle
Now, what holds all of these
together is this design DNA,

00:05:33.996 --> 00:05:34.896 A:middle
if you will.

00:05:35.266 --> 00:05:38.956 A:middle
And that is the idea of a set
of shapes that is a typeface.

00:05:40.306 --> 00:05:42.036 A:middle
There are many, many typefaces.

00:05:42.036 --> 00:05:43.916 A:middle
And you may have seen or
recognized some of these.

00:05:44.746 --> 00:05:47.966 A:middle
Now, what do you do with
typefaces is typography.

00:05:48.616 --> 00:05:53.676 A:middle
Typography is using type to
set text and encode language.

00:05:54.446 --> 00:05:58.956 A:middle
Typography is the foundation of
graphic design and of UI design.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:00.256 --> 00:06:01.976 A:middle
So, we just saw a few terms.

00:06:02.046 --> 00:06:05.696 A:middle
We saw text, text is
made of characters,

00:06:06.116 --> 00:06:10.046 A:middle
characters are encoded by
or represented by glyphs.

00:06:10.526 --> 00:06:11.716 A:middle
Between characters and glyphs,

00:06:11.976 --> 00:06:16.516 A:middle
typographic features can alter
the mapping between these.

00:06:17.346 --> 00:06:19.296 A:middle
They're all stored in what
is called a font file,

00:06:20.116 --> 00:06:22.676 A:middle
which can have common
multiple styles.

00:06:23.856 --> 00:06:27.236 A:middle
They are all grouped under
the same typeface umbrella,

00:06:27.236 --> 00:06:29.406 A:middle
which is the design idea
behind all these styles.

00:06:30.136 --> 00:06:32.346 A:middle
And typography is
the usage of all

00:06:32.346 --> 00:06:35.166 A:middle
of this stuff to convey text.

00:06:35.776 --> 00:06:38.836 A:middle
Now, writers and editors, the
people who write the text,

00:06:39.496 --> 00:06:42.696 A:middle
concern themselves with text.

00:06:42.826 --> 00:06:45.666 A:middle
The characters are defined
by the Unicode Consortium.

00:06:45.826 --> 00:06:46.726 A:middle
So, you don't have
to think about them.

00:06:48.286 --> 00:06:51.116 A:middle
And the type designers and font
manufacturers are the people

00:06:51.986 --> 00:06:56.986 A:middle
who come up with the design
ideas and design the glyphs

00:06:57.146 --> 00:06:58.286 A:middle
and make them into fonts.

00:06:58.286 --> 00:07:01.346 A:middle
And then create the
typographic features


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.286 --> 00:07:01.346 A:middle
And then create the
typographic features

00:07:01.346 --> 00:07:02.906 A:middle
that you can then alter.

00:07:03.486 --> 00:07:07.996 A:middle
Now, typographers are the
people who do typography.

00:07:08.656 --> 00:07:10.136 A:middle
And I have some good
news for you,

00:07:10.426 --> 00:07:12.046 A:middle
which is that you
are typographers.

00:07:12.046 --> 00:07:14.156 A:middle
As matter of fact, we
are all typographers.

00:07:14.396 --> 00:07:16.406 A:middle
Whenever we change a font,
whenever we make it bold,

00:07:16.686 --> 00:07:17.816 A:middle
when we change the point size,

00:07:18.136 --> 00:07:19.756 A:middle
this is all the act
of typography.

00:07:20.796 --> 00:07:23.416 A:middle
Now, as typographers of
course you typography.

00:07:24.306 --> 00:07:28.186 A:middle
But, you can also alter the
text of course and pick fonts.

00:07:28.646 --> 00:07:30.466 A:middle
Choose them, combine the styles,

00:07:30.746 --> 00:07:31.906 A:middle
and alter the typographic
feature.

00:07:31.946 --> 00:07:33.516 A:middle
Turn the optional ones on.

00:07:35.706 --> 00:07:37.296 A:middle
Okay. I am almost done.

00:07:37.546 --> 00:07:39.016 A:middle
But, I have a few more terms.

00:07:39.256 --> 00:07:41.236 A:middle
And they actually have to do
with the absence of something

00:07:41.236 --> 00:07:44.006 A:middle
with the negative
space around things.

00:07:44.636 --> 00:07:47.086 A:middle
So, I just showed to you what
a glyph is, which is an outline

00:07:47.086 --> 00:07:48.426 A:middle
that represents a character.

00:07:48.916 --> 00:07:51.176 A:middle
And in a font it's
stored as an outline.

00:07:51.406 --> 00:07:55.476 A:middle
But, it also has a width,
basically a spacing property.

00:07:56.146 --> 00:08:00.256 A:middle
Now, if I picked out a space
like this and I typeset it


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:56.146 --> 00:08:00.256 A:middle
Now, if I picked out a space
like this and I typeset it

00:08:00.256 --> 00:08:03.976 A:middle
in a line, I get this rhythm,
which is not very even.

00:08:03.976 --> 00:08:05.486 A:middle
So, type designers alter this

00:08:05.766 --> 00:08:08.936 A:middle
to get an even rhythm
between glyphs.

00:08:10.016 --> 00:08:12.916 A:middle
Spacing is built into the font
and you cannot really change it.

00:08:13.196 --> 00:08:14.806 A:middle
But, you can change tracking.

00:08:15.506 --> 00:08:17.536 A:middle
Tracking is a modifier
on the negative spacing.

00:08:17.536 --> 00:08:23.066 A:middle
And it can either be neutral,
or negative, or positive.

00:08:24.036 --> 00:08:26.716 A:middle
And it is global for all
the glyphs in a font.

00:08:27.026 --> 00:08:29.656 A:middle
And it either moves the apart
or put them further together,

00:08:30.016 --> 00:08:31.286 A:middle
which is actually useful

00:08:31.286 --> 00:08:33.106 A:middle
when you're doing
small size typography.

00:08:33.106 --> 00:08:34.916 A:middle
You'll probably want to bring
the letters further apart

00:08:35.296 --> 00:08:36.645 A:middle
and pull it together
when they're large.

00:08:37.226 --> 00:08:41.275 A:middle
Now, tracking can be confused
with what is known as kerning.

00:08:41.806 --> 00:08:43.765 A:middle
And kerning really is
an exception mechanism

00:08:43.966 --> 00:08:45.576 A:middle
for individual pairs of glyphs.

00:08:45.656 --> 00:08:47.746 A:middle
So, in this case the
A and B are too far,

00:08:47.746 --> 00:08:51.356 A:middle
and so the font has a kerning
table inside that says,

00:08:51.426 --> 00:08:52.446 A:middle
bring them closer together.

00:08:53.616 --> 00:08:56.016 A:middle
The kerning table again, is
done by the type designer

00:08:56.016 --> 00:08:57.206 A:middle
and put inside of the font.

00:08:57.206 --> 00:08:57.986 A:middle
And you don't control it.

00:08:57.986 --> 00:08:59.066 A:middle
It just happens automatically.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.576 --> 00:09:03.706 A:middle
However, leading, which is
the space between the lines,

00:09:04.006 --> 00:09:05.076 A:middle
is something you can control.

00:09:05.746 --> 00:09:09.566 A:middle
So, the name leading comes
from metal typography

00:09:09.566 --> 00:09:14.266 A:middle
when to put lines of type
further apart, pardon me,

00:09:14.366 --> 00:09:16.766 A:middle
you would have stick pieces
of metal between the lines.

00:09:18.376 --> 00:09:27.116 A:middle
So, we just saw spacing,
tracking, kerning, and leading.

00:09:28.026 --> 00:09:29.896 A:middle
Spacing and kerning
are built into font.

00:09:30.726 --> 00:09:33.746 A:middle
But, tracking and
leading are adjustable.

00:09:35.106 --> 00:09:37.246 A:middle
And that is really all I
have to say on type terms.

00:09:37.246 --> 00:09:40.626 A:middle
So, now you are all caught
up with typographic terms.

00:09:41.836 --> 00:09:44.486 A:middle
Now, let's look at some
concepts of typography.

00:09:45.116 --> 00:09:47.006 A:middle
We start with legibility.

00:09:47.006 --> 00:09:50.566 A:middle
The legibility has to do
with recognizing shapes

00:09:51.256 --> 00:09:52.616 A:middle
and distinguishing them
from one and another.

00:09:53.666 --> 00:09:55.046 A:middle
You may be familiar
with the idea

00:09:55.246 --> 00:09:59.956 A:middle
that some typefaces have
inherent legibility to them.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.106 --> 00:10:03.166 A:middle
However, what is not legible

00:10:03.166 --> 00:10:05.556 A:middle
at one size is actually
perfectly legible

00:10:05.556 --> 00:10:07.896 A:middle
in another size.

00:10:08.046 --> 00:10:10.756 A:middle
Scale is connected
with legibility.

00:10:11.976 --> 00:10:14.546 A:middle
And when you alter the
scale of a piece of text,

00:10:14.626 --> 00:10:17.036 A:middle
details that were
previously unavailable

00:10:17.036 --> 00:10:18.716 A:middle
and not visible become visible.

00:10:19.056 --> 00:10:20.976 A:middle
So, what is affected is
the tone of what you see.

00:10:22.426 --> 00:10:27.096 A:middle
Now, in these situations
UI typography can be a lot

00:10:27.526 --> 00:10:29.366 A:middle
like road signage.

00:10:29.616 --> 00:10:31.646 A:middle
So, you're driving on
the road, and the sign

00:10:32.266 --> 00:10:34.536 A:middle
that you see is very
large, its font size,

00:10:35.146 --> 00:10:37.716 A:middle
but it's far away from you.

00:10:38.256 --> 00:10:40.426 A:middle
And so a scale is not just
a matter of point size,

00:10:40.426 --> 00:10:43.576 A:middle
but also distance from the
reader to the viewing surface,

00:10:43.636 --> 00:10:44.496 A:middle
to the reading surface.

00:10:45.706 --> 00:10:47.776 A:middle
Now, in these situations
things that apply

00:10:47.776 --> 00:10:51.026 A:middle
to small scale typography
also apply as well.

00:10:51.026 --> 00:10:53.106 A:middle
So, for instance, bringing
letters further apart

00:10:53.106 --> 00:10:55.836 A:middle
or making the type bolder may
actually improve legibility.

00:10:57.126 --> 00:10:59.116 A:middle
But legibility does
not just apply to text.

00:10:59.726 --> 00:11:01.206 A:middle
It also applies to layouts.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.726 --> 00:11:01.206 A:middle
It also applies to layouts.

00:11:01.806 --> 00:11:05.816 A:middle
It's probably very obvious
that a layout that is legible

00:11:05.816 --> 00:11:08.816 A:middle
where hierarchy is clear
at one scale may not be

00:11:08.816 --> 00:11:10.116 A:middle
so legible at another scale.

00:11:10.686 --> 00:11:12.726 A:middle
And the issue there is the
density gets compromised.

00:11:12.726 --> 00:11:15.896 A:middle
It actually increases very much.

00:11:16.446 --> 00:11:18.076 A:middle
So, what you could do
to tame the density,

00:11:18.076 --> 00:11:20.226 A:middle
is you could spread
elements further apart.

00:11:20.846 --> 00:11:22.446 A:middle
But, often times it's
actually much better

00:11:22.446 --> 00:11:25.336 A:middle
to rethink your hierarchy and
the positioning of things,

00:11:25.336 --> 00:11:27.276 A:middle
your layout for different
scales.

00:11:27.276 --> 00:11:33.406 A:middle
Now, if you want to know more
about layout, there is a talk

00:11:33.406 --> 00:11:35.666 A:middle
on Friday that talks
about Iterative UI Design,

00:11:35.666 --> 00:11:38.666 A:middle
which is the methodology
to come up with ideas.

00:11:38.666 --> 00:11:41.436 A:middle
And also they'll have tips on
how to evaluate those ideas,

00:11:41.436 --> 00:11:44.506 A:middle
which is the important part.

00:11:44.686 --> 00:11:49.306 A:middle
Now, the scale and density,
they also apply not just to text

00:11:49.986 --> 00:11:51.586 A:middle
and layouts, but
also to glyph design.

00:11:52.156 --> 00:11:53.366 A:middle
So, let me give you an example.

00:11:54.206 --> 00:11:54.986 A:middle
What is this glyph?

00:11:55.406 --> 00:11:56.086 A:middle
What is it called?

00:11:57.036 --> 00:11:58.216 A:middle
Of course it's the at sign.

00:11:58.446 --> 00:12:00.496 A:middle
But, in Italy we have
a strange name for it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.446 --> 00:12:00.496 A:middle
But, in Italy we have
a strange name for it.

00:12:00.496 --> 00:12:03.056 A:middle
We call it chiocciola,
which means snail.

00:12:03.586 --> 00:12:08.266 A:middle
So, when we have to design
the snail in San Francisco,

00:12:08.666 --> 00:12:10.426 A:middle
we started with SF Mono, sorry,

00:12:10.426 --> 00:12:11.956 A:middle
we started with the
one in San Francisco.

00:12:12.096 --> 00:12:14.676 A:middle
And of course we did this, all
right, we made it monospaced.

00:12:15.356 --> 00:12:17.556 A:middle
However, when we have,
when we validated the shape

00:12:17.826 --> 00:12:19.596 A:middle
in the right context and scale,

00:12:19.596 --> 00:12:21.336 A:middle
we realized the density
was too high.

00:12:21.746 --> 00:12:24.146 A:middle
It was just getting muddy
and not very legible.

00:12:24.506 --> 00:12:27.446 A:middle
So, we came up with a
solution that looks like this.

00:12:28.326 --> 00:12:31.046 A:middle
Now, let me blow it up.

00:12:31.046 --> 00:12:36.116 A:middle
So, in this example,
we changed the density

00:12:36.116 --> 00:12:37.816 A:middle
of the glyph by very much.

00:12:38.326 --> 00:12:40.946 A:middle
And we did that by
increasing the negative space,

00:12:40.946 --> 00:12:42.956 A:middle
which is very critical
for legibility.

00:12:44.356 --> 00:12:48.996 A:middle
Now, consider also the H, M
and N glyphs in SF Mono heavy.

00:12:49.996 --> 00:12:54.356 A:middle
Now, if I blow them up really
big, you can probably tell

00:12:54.356 --> 00:12:57.096 A:middle
that the strokes aren't
actually the same thickness.

00:12:57.386 --> 00:12:58.396 A:middle
And that is because you,

00:12:58.626 --> 00:13:00.326 A:middle
when they are big you
can actually tell,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.626 --> 00:13:00.326 A:middle
when they are big you
can actually tell,

00:13:00.366 --> 00:13:01.646 A:middle
but when they are
small you cannot.

00:13:01.726 --> 00:13:03.276 A:middle
So, we're sort of
deceiving you into thinking

00:13:03.276 --> 00:13:06.326 A:middle
that they have the same density.

00:13:06.396 --> 00:13:09.776 A:middle
Okay. So, imagine you're getting
parachuted into this picture.

00:13:10.306 --> 00:13:11.356 A:middle
And you're trying to
figure out where you

00:13:11.356 --> 00:13:12.446 A:middle
and where you're trying to go.

00:13:12.666 --> 00:13:14.936 A:middle
Now, you're probably
going to subway somewhere,

00:13:14.936 --> 00:13:15.816 A:middle
probably to Church Avenue.

00:13:15.816 --> 00:13:16.926 A:middle
But, where are you?

00:13:17.546 --> 00:13:18.246 A:middle
I know where you are.

00:13:18.766 --> 00:13:20.826 A:middle
You're in New York,
and I know by the font.

00:13:21.896 --> 00:13:27.676 A:middle
Now, I also happen to know, I
know, I'm sorry, I also happen

00:13:27.676 --> 00:13:29.486 A:middle
to know that this is not exactly
Helvetica that they're using.

00:13:29.486 --> 00:13:31.616 A:middle
So, I recreate that sign with
a very Helvetica Neue Bold.

00:13:32.386 --> 00:13:34.516 A:middle
But, what I'm trying to
convey here is this notion

00:13:34.516 --> 00:13:39.196 A:middle
of typographic voice, which is
that if you change a typeface

00:13:39.196 --> 00:13:42.306 A:middle
to a different style, even
within the same family,

00:13:42.676 --> 00:13:45.316 A:middle
not only does that sign
not work the same way,

00:13:45.606 --> 00:13:47.696 A:middle
but it doesn't feel the same.

00:13:48.086 --> 00:13:52.196 A:middle
Okay. So, typefaces
have this voice quality,

00:13:52.196 --> 00:13:54.136 A:middle
and this does not feel
like New York to me at all,

00:13:54.856 --> 00:13:57.296 A:middle
and nor does this one.

00:13:57.576 --> 00:13:59.596 A:middle
So, this voice property
is now secondary.

00:13:59.596 --> 00:14:02.266 A:middle
And actually it helps
creating a context.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.596 --> 00:14:02.266 A:middle
And actually it helps
creating a context.

00:14:02.636 --> 00:14:04.876 A:middle
So, for instance, I am
reading my email in SF,

00:14:04.876 --> 00:14:06.586 A:middle
and now I'm playing a game.

00:14:06.826 --> 00:14:09.656 A:middle
Maybe that's not so appropriate
to have the SF in there.

00:14:09.656 --> 00:14:12.776 A:middle
So, typefaces really help
you with creating a context

00:14:12.926 --> 00:14:15.016 A:middle
and helping your user
understand where they are.

00:14:15.656 --> 00:14:19.236 A:middle
Okay. So, these are the
concepts we just saw.

00:14:19.236 --> 00:14:23.206 A:middle
We saw legibility,
scale, density, and voice.

00:14:23.716 --> 00:14:26.166 A:middle
So, now I want to talk
to you about some tools.

00:14:32.336 --> 00:14:34.406 A:middle
When we do typography
in our platforms,

00:14:34.456 --> 00:14:37.706 A:middle
you have three fundamental
tools that you can use.

00:14:38.546 --> 00:14:42.156 A:middle
The first one is system font,
the second one is dynamic type,

00:14:42.776 --> 00:14:44.906 A:middle
and the third one
is our custom fonts.

00:14:46.696 --> 00:14:49.956 A:middle
Now, a system font you already
saw is native to the platform.

00:14:50.326 --> 00:14:52.666 A:middle
And it feels native to the
platform as a typeface.

00:14:52.756 --> 00:14:58.336 A:middle
To access it the system font
API's are the same between iOS,

00:14:58.456 --> 00:15:01.096 A:middle
watchOS, tvOS, and the macOS.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.456 --> 00:15:01.096 A:middle
watchOS, tvOS, and the macOS.

00:15:02.156 --> 00:15:05.176 A:middle
So, NSFont and UIFont
basically have the same API's.

00:15:05.866 --> 00:15:07.066 A:middle
And they have a lot of benefits.

00:15:07.116 --> 00:15:10.756 A:middle
They give you access to the
weight of San Francisco,

00:15:10.756 --> 00:15:13.816 A:middle
of the nine weights, but also
to the size specific tracking.

00:15:14.456 --> 00:15:17.306 A:middle
Basically the letters
move closer together

00:15:17.306 --> 00:15:20.336 A:middle
or further apart automatically,
depending on the point size

00:15:20.336 --> 00:15:21.746 A:middle
that you request
the system font at.

00:15:22.706 --> 00:15:25.106 A:middle
You also get such specific
outlines automatically.

00:15:26.136 --> 00:15:31.456 A:middle
And you get access for the Bold
Text switch, which is something

00:15:31.456 --> 00:15:32.886 A:middle
in the settings in iOS.

00:15:33.426 --> 00:15:35.466 A:middle
People can turn it on
and it makes the text

00:15:35.466 --> 00:15:37.006 A:middle
on all their devices bold.

00:15:37.626 --> 00:15:42.496 A:middle
Now, the second tool you have
available is dynamic type.

00:15:42.496 --> 00:15:43.696 A:middle
And it's a great tool.

00:15:43.696 --> 00:15:45.496 A:middle
It's available on
iOS and watchOS.

00:15:46.326 --> 00:15:48.366 A:middle
And dynamic type is
really two things.

00:15:48.836 --> 00:15:52.196 A:middle
The first one is the
text styles API's,

00:15:52.346 --> 00:15:53.696 A:middle
preferredFont forTextStyle.

00:15:54.396 --> 00:15:57.196 A:middle
And these give you access
to semantic identifiers

00:15:57.196 --> 00:16:00.226 A:middle
that give you fonts that are
specific for that purpose.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.196 --> 00:16:00.226 A:middle
that give you fonts that are
specific for that purpose.

00:16:00.226 --> 00:16:03.836 A:middle
So, you can request a font for
headline, or body, or these,

00:16:03.836 --> 00:16:05.616 A:middle
and you get fonts that
look like the system.

00:16:05.616 --> 00:16:07.646 A:middle
But, they're tweaked
for that one purpose.

00:16:08.926 --> 00:16:11.686 A:middle
But, dynamic type is also
the content size categories,

00:16:12.056 --> 00:16:15.456 A:middle
which you may be familiar with
as the notches in this slider.

00:16:15.826 --> 00:16:17.576 A:middle
So, people can go
in their settings,

00:16:17.916 --> 00:16:19.766 A:middle
they can move the
slider up and down,

00:16:20.026 --> 00:16:22.426 A:middle
and they can change the global
point size of their device.

00:16:22.566 --> 00:16:23.766 A:middle
It's a great accessibility
feature.

00:16:27.696 --> 00:16:31.106 A:middle
Now, if you use dynamic type and
you use the text styles API's,

00:16:31.436 --> 00:16:33.716 A:middle
dynamic type support is
automatic with these.

00:16:34.166 --> 00:16:37.646 A:middle
However, if you're
using custom fonts

00:16:37.826 --> 00:16:40.156 A:middle
or you call a system font
directly, then you have

00:16:40.156 --> 00:16:42.116 A:middle
to do some work to
implement the dynamic type.

00:16:42.476 --> 00:16:43.166 A:middle
But, it's really easy.

00:16:43.166 --> 00:16:44.636 A:middle
And let me show you
how that works.

00:16:44.636 --> 00:16:47.836 A:middle
First you have to
pick or bundle a font,

00:16:48.866 --> 00:16:50.886 A:middle
then you can have a
lookup table somewhere

00:16:50.886 --> 00:16:53.676 A:middle
with content size
categories, then you have

00:16:53.676 --> 00:16:55.846 A:middle
to override this
traitCollection DidChange.

00:16:56.056 --> 00:16:58.776 A:middle
This is a method
of UIView and UI.

00:16:59.076 --> 00:17:00.226 A:middle
You control the subclasses.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.076 --> 00:17:00.226 A:middle
You control the subclasses.

00:17:01.666 --> 00:17:03.436 A:middle
Then you update your fonts
and paragraph styles,

00:17:04.386 --> 00:17:05.876 A:middle
and you relayout,
and you're done.

00:17:06.586 --> 00:17:08.366 A:middle
So, let's see these steps
a little bit closer.

00:17:09.146 --> 00:17:11.435 A:middle
How do you actually
bundle a font in your app?

00:17:12.205 --> 00:17:12.986 A:middle
Well, that's easy.

00:17:12.986 --> 00:17:16.776 A:middle
You just drag it into Xcode, and
then you declare the font names

00:17:16.836 --> 00:17:17.646 A:middle
in the info plist list.

00:17:17.715 --> 00:17:19.246 A:middle
There is a key for it.

00:17:20.415 --> 00:17:23.006 A:middle
Now, for the concise
categories you have

00:17:23.006 --> 00:17:27.396 A:middle
to of course have a lookup table
that maps them into point sizes,

00:17:27.396 --> 00:17:29.236 A:middle
and possibly weights,
or tracking values,

00:17:29.236 --> 00:17:31.956 A:middle
or even leading, depending on
the typeface that you chose.

00:17:32.866 --> 00:17:35.596 A:middle
So, I have a lookup table that
looks something like this.

00:17:35.736 --> 00:17:39.166 A:middle
I have a tool pool, a
point size style name,

00:17:39.166 --> 00:17:39.976 A:middle
leading, and tracking.

00:17:40.376 --> 00:17:43.476 A:middle
And the symbols that you
see there are the content

00:17:43.476 --> 00:17:44.246 A:middle
size categories.

00:17:44.576 --> 00:17:45.946 A:middle
Notice that they
are actually more

00:17:46.026 --> 00:17:47.176 A:middle
than the notches in the slider.

00:17:47.736 --> 00:17:51.486 A:middle
Because there's five
accessibility ones that are,

00:17:52.246 --> 00:17:54.326 A:middle
people can turn on in their
accessibility settings.

00:17:54.826 --> 00:17:57.016 A:middle
So, when you went
to lookup table,

00:17:57.016 --> 00:17:58.136 A:middle
remember about these as well.

00:17:58.136 --> 00:17:59.976 A:middle
Now, once you have that,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:00.196 --> 00:18:03.076 A:middle
you just override
this traitCollection

00:18:03.296 --> 00:18:03.946 A:middle
DidChange method.

00:18:03.946 --> 00:18:07.716 A:middle
And inside of there
you can do whatever.

00:18:07.716 --> 00:18:10.596 A:middle
You can have code that
depending on the view you have

00:18:10.596 --> 00:18:11.506 A:middle
and whatever it looks like,

00:18:11.716 --> 00:18:13.666 A:middle
can adjust the font
and then relayout.

00:18:15.016 --> 00:18:20.656 A:middle
So, when you're inside of that
method you should query the

00:18:20.656 --> 00:18:22.776 A:middle
trait collection of
the current object.

00:18:23.166 --> 00:18:25.226 A:middle
And look up the preferred
content size category.

00:18:26.256 --> 00:18:27.966 A:middle
And then you just
use that as the key

00:18:27.966 --> 00:18:29.786 A:middle
of your lookup table
when you're done.

00:18:31.236 --> 00:18:32.606 A:middle
Now, step 5 is relayout.

00:18:32.846 --> 00:18:36.056 A:middle
But, if you're using auto layout
there is actually no step 5.

00:18:36.056 --> 00:18:37.846 A:middle
If you're interested in
knowing about auto layout,

00:18:37.886 --> 00:18:39.996 A:middle
there are sessions
tomorrow and on Friday

00:18:39.996 --> 00:18:43.646 A:middle
about this specific topic.

00:18:43.646 --> 00:18:44.006 A:middle
All right.

00:18:44.056 --> 00:18:46.226 A:middle
So, we just saw how to
make dynamic type work

00:18:46.226 --> 00:18:47.556 A:middle
with custom fonts.

00:18:48.106 --> 00:18:50.306 A:middle
But, imagine you want to
get started with this.

00:18:50.616 --> 00:18:52.976 A:middle
How do you actually go about it?

00:18:53.116 --> 00:18:55.076 A:middle
Now, if you're getting
started and you're trying

00:18:55.076 --> 00:18:58.656 A:middle
to use custom fonts,
I recommend starting

00:18:58.656 --> 00:19:00.686 A:middle
with one typeface at a time.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.656 --> 00:19:00.686 A:middle
with one typeface at a time.

00:19:01.276 --> 00:19:02.656 A:middle
It's actually much
easier that way.

00:19:03.196 --> 00:19:05.176 A:middle
But, more importantly,
once you have a typeface

00:19:05.176 --> 00:19:08.136 A:middle
that you're considering, try to
understand its design intention,

00:19:08.456 --> 00:19:09.836 A:middle
because it really
helps you out in usage.

00:19:10.166 --> 00:19:11.536 A:middle
Typefaces are tools.

00:19:11.706 --> 00:19:13.956 A:middle
They are designed by people
for specific purposes.

00:19:14.126 --> 00:19:17.106 A:middle
And understanding the purpose
greatly helps you as the user

00:19:17.106 --> 00:19:18.746 A:middle
of the font, as the
typographer actually.

00:19:19.266 --> 00:19:23.406 A:middle
And also consider knobs
you can turn, right.

00:19:23.896 --> 00:19:26.576 A:middle
Kerning is not something you
can actually easily alter

00:19:26.576 --> 00:19:27.876 A:middle
from your app context.

00:19:27.876 --> 00:19:29.336 A:middle
So if the font is not kerning.

00:19:29.696 --> 00:19:31.406 A:middle
Well, you might want to
consider something else.

00:19:31.816 --> 00:19:33.456 A:middle
But, however, if
the font has leading

00:19:33.456 --> 00:19:35.436 A:middle
that is too tight you
can actually alter that.

00:19:35.756 --> 00:19:36.516 A:middle
So, no worries.

00:19:38.296 --> 00:19:38.936 A:middle
All right.

00:19:39.166 --> 00:19:42.216 A:middle
So, we just saw system
font, we saw dynamic type,

00:19:42.216 --> 00:19:43.716 A:middle
and we saw custom fonts.

00:19:45.086 --> 00:19:49.096 A:middle
So, next I want to show you some
small details that you may want

00:19:49.316 --> 00:19:52.696 A:middle
to consider using
in your own apps.

00:19:53.026 --> 00:19:55.726 A:middle
The first one I want
to show is arrows.

00:19:56.866 --> 00:19:58.156 A:middle
Arrows are a great thing.

00:19:58.296 --> 00:20:01.226 A:middle
They are useful for
pointing to stuff.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.296 --> 00:20:01.226 A:middle
They are useful for
pointing to stuff.

00:20:01.606 --> 00:20:03.356 A:middle
But, also they're
usable in complications

00:20:03.666 --> 00:20:05.816 A:middle
where the information density
is very high and you want

00:20:05.816 --> 00:20:07.566 A:middle
to get just a little
bit more information.

00:20:08.276 --> 00:20:11.006 A:middle
Now, arrows in a staff,
they're actually stored

00:20:11.006 --> 00:20:12.326 A:middle
in the font as characters.

00:20:12.326 --> 00:20:14.436 A:middle
So, you can copy and paste
them in your strings,

00:20:14.516 --> 00:20:16.776 A:middle
in Xcode for instance, and
they will just show up.

00:20:17.346 --> 00:20:19.476 A:middle
But, more importantly
because they're in the font,

00:20:20.026 --> 00:20:21.836 A:middle
they are weight matched
with system font.

00:20:22.276 --> 00:20:24.726 A:middle
And if people change
their bold text switch,

00:20:24.836 --> 00:20:28.016 A:middle
or use dynamic type, the
arrows will scale accordingly.

00:20:28.646 --> 00:20:32.546 A:middle
Now, the second deal
I want to talk to you

00:20:32.546 --> 00:20:34.096 A:middle
about is high-legibility
alternates.

00:20:34.826 --> 00:20:38.146 A:middle
I talked about alternates
in typographic features.

00:20:38.746 --> 00:20:40.496 A:middle
And we have the new
on in San Francisco,

00:20:40.796 --> 00:20:42.496 A:middle
which helps in situations
like this.

00:20:42.936 --> 00:20:44.216 A:middle
If you're typesetting a string

00:20:44.666 --> 00:20:46.826 A:middle
where the context is
actually not enough to tell

00:20:46.826 --> 00:20:50.276 A:middle
which glyph is which, and maybe
people have to pass this around

00:20:50.276 --> 00:20:51.836 A:middle
or type it somewhere else.

00:20:51.836 --> 00:20:53.606 A:middle
They have to read it
and be completely,

00:20:53.606 --> 00:20:56.196 A:middle
it has to be ambiguous
which glyph is which one.

00:20:56.726 --> 00:20:59.216 A:middle
So, there's a new statistic
set that changes the shape

00:20:59.216 --> 00:21:02.196 A:middle
of these glyphs to
completely ambiguous ones.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.216 --> 00:21:02.196 A:middle
of these glyphs to
completely ambiguous ones.

00:21:02.196 --> 00:21:04.956 A:middle
So, the I gets a serif,
the zero gets a slash,

00:21:05.446 --> 00:21:08.886 A:middle
the L gets a little tail and
the six is less confusable

00:21:09.076 --> 00:21:09.716 A:middle
from the eight.

00:21:10.206 --> 00:21:12.016 A:middle
Now, these shapes we don't
recommend turning them

00:21:12.016 --> 00:21:13.816 A:middle
on all the time,
because as you can see,

00:21:13.816 --> 00:21:15.556 A:middle
they're pretty, they're
big changes.

00:21:15.556 --> 00:21:18.986 A:middle
And they're highly disruptive
of the overall texture and look,

00:21:19.166 --> 00:21:20.596 A:middle
and feel actually
of text as well.

00:21:20.966 --> 00:21:23.606 A:middle
So, use them sparingly
if you can.

00:21:24.426 --> 00:21:26.986 A:middle
But, this is the
code to turn them on.

00:21:27.266 --> 00:21:29.646 A:middle
And this code, by the way,
works the same for UIFont

00:21:29.676 --> 00:21:31.186 A:middle
and NSFont, is exactly the same.

00:21:31.846 --> 00:21:34.326 A:middle
You start with the
UIFont or something,

00:21:34.566 --> 00:21:36.306 A:middle
you derive a font
descriptor out of it.

00:21:36.376 --> 00:21:40.926 A:middle
And then you can modify
it adding features to it.

00:21:41.016 --> 00:21:45.366 A:middle
And then derive another
font out of it.

00:21:45.636 --> 00:21:47.396 A:middle
Next, the small caps.

00:21:49.026 --> 00:21:51.476 A:middle
Now, I'm sure you're
familiar with capital letters

00:21:51.786 --> 00:21:53.456 A:middle
and lowercase letters as well.

00:21:53.836 --> 00:21:58.786 A:middle
But, there is a third member of
this group, which is small caps.

00:21:58.786 --> 00:22:02.936 A:middle
Now, small caps are a smaller
version of the capital letters


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.786 --> 00:22:02.936 A:middle
Now, small caps are a smaller
version of the capital letters

00:22:02.986 --> 00:22:04.416 A:middle
that align with the lowercase.

00:22:04.416 --> 00:22:07.376 A:middle
And when I say align,
I mean almost align.

00:22:07.746 --> 00:22:09.386 A:middle
They actually ought
to be slightly larger.

00:22:10.046 --> 00:22:12.206 A:middle
Now, when are they useful?

00:22:12.676 --> 00:22:13.766 A:middle
Well, when you type
setting things

00:22:13.766 --> 00:22:15.316 A:middle
like acronym, for instance.

00:22:16.466 --> 00:22:18.106 A:middle
Acronyms or when you want

00:22:18.106 --> 00:22:19.796 A:middle
to create subtle
information hierarchies,

00:22:19.796 --> 00:22:21.576 A:middle
like you have the
number and then you want,

00:22:21.576 --> 00:22:25.396 A:middle
to de-emphasize another piece
of information next to it.

00:22:25.776 --> 00:22:26.786 A:middle
Let me show you a case study

00:22:26.786 --> 00:22:29.896 A:middle
of how we use small
caps on Apple TV.

00:22:30.816 --> 00:22:34.496 A:middle
Now, you have this paragraph,
and you have a hierarchy

00:22:34.496 --> 00:22:36.496 A:middle
of like a list on the
left side and a paragraph

00:22:36.496 --> 00:22:37.286 A:middle
on the right hand side.

00:22:37.596 --> 00:22:40.536 A:middle
And you want the text of the
top left to be the header,

00:22:40.536 --> 00:22:41.496 A:middle
to stand out a little bit.

00:22:42.096 --> 00:22:45.046 A:middle
Now, if you look at his as
a wire frame, you can kind

00:22:45.046 --> 00:22:48.456 A:middle
of start telling that that
string in all caps is sort

00:22:48.456 --> 00:22:50.536 A:middle
of trumping everything
else in height.

00:22:50.536 --> 00:22:52.116 A:middle
It looks a little bit too large.

00:22:53.136 --> 00:22:55.756 A:middle
Now, one thing you could
do to tame that is,

00:22:55.756 --> 00:22:58.356 A:middle
you could change the point
size and bring it down.

00:22:58.676 --> 00:23:01.656 A:middle
But, if you did that it would
also make the letters lighter,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.676 --> 00:23:01.656 A:middle
But, if you did that it would
also make the letters lighter,

00:23:01.656 --> 00:23:02.516 A:middle
and too close.

00:23:02.516 --> 00:23:03.426 A:middle
So, the density will start

00:23:03.426 --> 00:23:05.816 A:middle
to be non-matched
with everything else.

00:23:05.966 --> 00:23:08.016 A:middle
So, what you can do, small caps.

00:23:08.336 --> 00:23:11.376 A:middle
Small caps preserve
the all caps setting.

00:23:11.766 --> 00:23:13.506 A:middle
But, they also preserve
the density that you want,

00:23:13.506 --> 00:23:14.456 A:middle
and the stroke thickness.

00:23:15.516 --> 00:23:18.406 A:middle
Now, there are two fundamental
ways, two API's actually,

00:23:18.406 --> 00:23:20.386 A:middle
to get small caps
in our systems.

00:23:21.086 --> 00:23:24.096 A:middle
And they have to do
with the interaction

00:23:24.096 --> 00:23:28.446 A:middle
between the typographic features
and the underlying text.

00:23:28.986 --> 00:23:31.846 A:middle
So, imagine you have a piece
of text which is all uppercase

00:23:32.476 --> 00:23:35.166 A:middle
and you're turning on the small
caps from uppercase feature,

00:23:35.636 --> 00:23:37.686 A:middle
you get a piece of text
that is all small caps.

00:23:38.236 --> 00:23:38.926 A:middle
This looks good.

00:23:39.986 --> 00:23:43.556 A:middle
Now, if you get, if you have
a string that is mixed case,

00:23:43.556 --> 00:23:45.406 A:middle
upper and lowercase, and
you turn on the small caps

00:23:45.406 --> 00:23:47.846 A:middle
from uppercase feature,
you get this.

00:23:48.596 --> 00:23:50.136 A:middle
This does not look good.

00:23:50.656 --> 00:23:51.556 A:middle
The problem with this one is

00:23:51.596 --> 00:23:54.406 A:middle
that the capital letters are
not really emphasizing anything.

00:23:54.406 --> 00:23:56.076 A:middle
And they almost look
like a mistake.

00:23:56.576 --> 00:23:58.226 A:middle
So, please try not to
do this if you can.

00:23:58.936 --> 00:24:02.126 A:middle
And lastly, if you have a
string that is all lowercase


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.936 --> 00:24:02.126 A:middle
And lastly, if you have a
string that is all lowercase

00:24:02.126 --> 00:24:04.686 A:middle
and you turn on the small
caps from uppercase feature,

00:24:04.946 --> 00:24:07.526 A:middle
you get all lowercase, which
is not what you would expect.

00:24:07.526 --> 00:24:08.936 A:middle
But at least it doesn't
look bad.

00:24:09.606 --> 00:24:10.536 A:middle
So, we're fine.

00:24:11.386 --> 00:24:14.186 A:middle
Now, the small caps from
uppercase feature is,

00:24:14.186 --> 00:24:16.176 A:middle
the code is exactly the
same as the feature code

00:24:16.176 --> 00:24:19.026 A:middle
that I showed you earlier for
the high-legibility alternates.

00:24:19.516 --> 00:24:21.366 A:middle
And you just have to
change the feature amplifier

00:24:21.366 --> 00:24:24.376 A:middle
and the selector.

00:24:24.476 --> 00:24:26.936 A:middle
Now, there's another way of
turning, of getting small caps

00:24:26.936 --> 00:24:28.986 A:middle
and it's from a lowercase
piece of text.

00:24:29.346 --> 00:24:33.126 A:middle
Now, I'm sorry, if you have
an all uppercase strength,

00:24:33.426 --> 00:24:36.356 A:middle
and you turn on small
caps from lowercase,

00:24:36.806 --> 00:24:38.276 A:middle
you get all uppercase,

00:24:38.676 --> 00:24:40.096 A:middle
which again is not really
what you would expect.

00:24:40.096 --> 00:24:41.616 A:middle
But, at least it
doesn't look bad.

00:24:42.596 --> 00:24:45.006 A:middle
Now, when you turn on
small caps from lower case

00:24:45.036 --> 00:24:48.226 A:middle
on a mixed case string,
you get this.

00:24:48.526 --> 00:24:51.046 A:middle
You get a mixed caps
and small caps string,

00:24:51.046 --> 00:24:51.716 A:middle
which is legitimate.

00:24:52.236 --> 00:24:54.806 A:middle
We actually do use this
in maps, for instance.

00:24:54.926 --> 00:24:56.026 A:middle
It's certain zoom levels.

00:24:57.126 --> 00:24:58.516 A:middle
Small caps are really
about subtlety.

00:24:58.516 --> 00:25:01.406 A:middle
And this is one way to create a
subtle hierarchy for instance.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.516 --> 00:25:01.406 A:middle
And this is one way to create a
subtle hierarchy for instance.

00:25:02.156 --> 00:25:03.456 A:middle
So, again, this is fine.

00:25:04.496 --> 00:25:06.996 A:middle
Now, if you have an all
lowercase string and you turn

00:25:06.996 --> 00:25:08.316 A:middle
on the small caps
from lowercase,

00:25:08.606 --> 00:25:11.336 A:middle
you get all small caps,
which is just fine.

00:25:12.496 --> 00:25:15.006 A:middle
So, again the code to do
this is exactly the same.

00:25:15.006 --> 00:25:17.306 A:middle
I just changed the piece
of code right there.

00:25:18.456 --> 00:25:20.046 A:middle
And one thing you
can do with features,

00:25:20.046 --> 00:25:21.916 A:middle
you can actually turn
multiples at once.

00:25:22.186 --> 00:25:24.436 A:middle
So, depending where you got
that piece of text from,

00:25:24.656 --> 00:25:28.026 A:middle
if it's under your control, if
it's user editable, you may want

00:25:28.026 --> 00:25:32.276 A:middle
to turn both at once
as well, for instance.

00:25:32.606 --> 00:25:34.566 A:middle
Now, there's one
subtlety about small caps.

00:25:34.916 --> 00:25:36.706 A:middle
Which is, well they're
about subtlety,

00:25:36.706 --> 00:25:38.256 A:middle
but there is something
subtle about them as well.

00:25:38.666 --> 00:25:44.226 A:middle
Which is that they also operate
not just on capital letters,

00:25:44.436 --> 00:25:45.996 A:middle
but also on numbers
and punctuation.

00:25:46.736 --> 00:25:48.296 A:middle
And you may be wondering why.

00:25:48.976 --> 00:25:50.696 A:middle
The reason is because you
may have a string that looks

00:25:50.696 --> 00:25:53.436 A:middle
like this, and you want to
turn that all into small caps.

00:25:53.726 --> 00:25:56.256 A:middle
So, we support small cap
numbers, small cap punctuation,

00:25:56.256 --> 00:25:58.266 A:middle
and all of these in system font.

00:25:59.556 --> 00:26:00.136 A:middle
All right.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.556 --> 00:26:00.136 A:middle
All right.

00:26:00.216 --> 00:26:03.956 A:middle
So, we just saw some details
of typography like arrows,

00:26:04.176 --> 00:26:06.786 A:middle
high-legibility alternates,
and small caps.

00:26:07.996 --> 00:26:11.196 A:middle
And that's really all
we have for today.

00:26:11.336 --> 00:26:14.476 A:middle
We just saw the San Francisco
fonts and update there

00:26:14.626 --> 00:26:16.566 A:middle
with the new SF Mono
family for coding.

00:26:16.566 --> 00:26:17.256 A:middle
We hope you enjoy it.

00:26:17.256 --> 00:26:19.486 A:middle
We saw some terminology.

00:26:19.796 --> 00:26:22.316 A:middle
We looked at some typographic
concept design wise,

00:26:22.316 --> 00:26:24.236 A:middle
and yeah, design concepts.

00:26:24.476 --> 00:26:25.556 A:middle
And then we looked
at some tools.

00:26:25.946 --> 00:26:27.976 A:middle
And lastly we saw some details.

00:26:27.976 --> 00:26:30.626 A:middle
Some small new feature that you
may want to adopt in your apps.

00:26:31.646 --> 00:26:32.746 A:middle
Now, for more information,

00:26:32.906 --> 00:26:36.406 A:middle
at this URL you will find
the video of this talk.

00:26:36.406 --> 00:26:40.346 A:middle
But, you'll also find a
bibliography and some references

00:26:40.346 --> 00:26:41.496 A:middle
to sites that can
get you started

00:26:41.496 --> 00:26:43.286 A:middle
in your new journey
as typographers.

00:26:44.646 --> 00:26:46.786 A:middle
And there also related sessions.

00:26:46.836 --> 00:26:50.306 A:middle
These have yet to happen,
are throughout the week.

00:26:51.056 --> 00:26:53.606 A:middle
There is, the first session
is actually introducing a tool

00:26:53.606 --> 00:26:55.306 A:middle
that will greatly help
your dynamic type.

00:26:55.406 --> 00:26:58.106 A:middle
But, I don't want to spoil it.

00:26:58.106 --> 00:26:59.686 A:middle
The other two sessions
have to do

00:26:59.686 --> 00:27:00.926 A:middle
with making your apps adaptive.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.686 --> 00:27:00.926 A:middle
with making your apps adaptive.

00:27:00.926 --> 00:27:03.436 A:middle
So, auto layout topics.

00:27:04.346 --> 00:27:07.226 A:middle
The iterative design gives
you some elements of design,

00:27:07.656 --> 00:27:09.716 A:middle
and of how to evaluate
it as well.

00:27:10.506 --> 00:27:13.156 A:middle
And then, What's new in Auto
Layout session on Friday.

00:27:13.316 --> 00:27:13.856 A:middle
It's really good too.

00:27:14.946 --> 00:27:15.606 A:middle
And that's it.

00:27:15.706 --> 00:27:16.486 A:middle
Thank you very much.

00:27:17.508 --> 00:27:19.508 A:middle
[ Applause ]

