WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:19.500 A:middle
[ Music ]

00:00:24.516 --> 00:00:28.076 A:middle
[ Applause ]

00:00:28.576 --> 00:00:29.076 A:middle
&gt;&gt; Good morning.

00:00:32.266 --> 00:00:34.996 A:middle
How many of you have apps
in the App Store or working

00:00:35.116 --> 00:00:36.186 A:middle
on apps that play video?

00:00:36.636 --> 00:00:38.846 A:middle
That's quite a few of you.

00:00:38.846 --> 00:00:44.216 A:middle
Good. Whether for sports, news,
entertainment or education.

00:00:44.726 --> 00:00:50.126 A:middle
What's the most important
part of your video playback?

00:00:50.206 --> 00:00:52.956 A:middle
Is it the Play/Pause control?

00:00:52.956 --> 00:00:53.866 A:middle
The scrubbing?

00:00:54.386 --> 00:00:57.506 A:middle
Maybe the audio and
subtitle settings?

00:00:58.236 --> 00:01:01.706 A:middle
No. Of course not.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.236 --> 00:01:01.706 A:middle
No. Of course not.

00:01:02.016 --> 00:01:03.556 A:middle
It's the video presentation.

00:01:04.656 --> 00:01:08.676 A:middle
So it's important when users
are using your application

00:01:08.676 --> 00:01:11.656 A:middle
and watching your video
that they focus entirely

00:01:11.656 --> 00:01:13.366 A:middle
on your video presentation.

00:01:13.646 --> 00:01:16.366 A:middle
And they aren't distracted
by trying to figure

00:01:16.366 --> 00:01:17.756 A:middle
out your user interface.

00:01:18.626 --> 00:01:24.306 A:middle
That's why it's important
that video playback be easy,

00:01:24.536 --> 00:01:28.076 A:middle
consistent and predictable
for viewers as they move

00:01:28.076 --> 00:01:30.366 A:middle
between apps on their Apple TV.

00:01:31.786 --> 00:01:35.386 A:middle
Video playback on Apple
TV appears simple,

00:01:35.386 --> 00:01:36.756 A:middle
but it's no easy task.

00:01:37.066 --> 00:01:39.146 A:middle
There are many different
tools for user interaction,

00:01:40.046 --> 00:01:44.256 A:middle
including the buttons and touch
surface of the Siri remote,

00:01:45.056 --> 00:01:50.876 A:middle
Siri voice commands, older Apple
TV remotes, the iOS remote app,

00:01:51.586 --> 00:01:55.736 A:middle
Bluetooth keyboards, game
controllers, and of course,

00:01:55.736 --> 00:01:57.336 A:middle
infrared universal remotes.

00:01:57.776 --> 00:02:04.386 A:middle
Wouldn't it be great if you
didn't have to deal with this?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:57.776 --> 00:02:04.386 A:middle
Wouldn't it be great if you
didn't have to deal with this?

00:02:04.826 --> 00:02:06.956 A:middle
I'm Dan Wright and
today I'll be talking

00:02:06.956 --> 00:02:10.586 A:middle
about how you can accomplish
all this easily with AVKit.

00:02:11.316 --> 00:02:13.996 A:middle
AVKit provides modern playback

00:02:13.996 --> 00:02:15.636 A:middle
with a consistent
user interface.

00:02:16.276 --> 00:02:19.666 A:middle
Let's take a quick look at some
of the features AVKit provides.

00:02:20.386 --> 00:02:24.106 A:middle
Here is AVKit playing a video

00:02:24.586 --> 00:02:27.516 A:middle
with a transport bar visible
showing the elapsed time,

00:02:27.516 --> 00:02:29.876 A:middle
the position in the video
and the time remaining.

00:02:31.426 --> 00:02:34.156 A:middle
Touching the surface of
the remote reveals hints.

00:02:35.166 --> 00:02:38.776 A:middle
And clicking on the edges
will skip forward or back.

00:02:39.096 --> 00:02:40.876 A:middle
Or by holding down
the touch surface,

00:02:40.876 --> 00:02:42.876 A:middle
viewers can fast
forward or rewind.

00:02:44.486 --> 00:02:47.836 A:middle
And when paused,
swiping side to side

00:02:48.646 --> 00:02:51.096 A:middle
on the remote will scrub quickly
through the entire video.

00:02:52.886 --> 00:02:55.796 A:middle
Swiping down reveals info panel,
which includes information

00:02:55.796 --> 00:03:00.486 A:middle
about the video and navigation
markers as well as access


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:55.796 --> 00:03:00.486 A:middle
about the video and navigation
markers as well as access

00:03:00.486 --> 00:03:03.366 A:middle
to settings related to
audio and subtitles.

00:03:04.576 --> 00:03:08.856 A:middle
Finally, AVKit supports Siri
voice commands automatically.

00:03:08.856 --> 00:03:10.346 A:middle
And as I go back
to the beginning,

00:03:10.806 --> 00:03:12.006 A:middle
or "What did she say?"

00:03:12.006 --> 00:03:14.276 A:middle
to skip back 30 seconds
and replay

00:03:14.276 --> 00:03:16.116 A:middle
with captions turned
on temporarily.

00:03:17.466 --> 00:03:20.276 A:middle
AVKit uses the modern
media stack,

00:03:20.276 --> 00:03:22.756 A:middle
the same as on iOS and macOS.

00:03:24.306 --> 00:03:26.606 A:middle
AVKit provides the
user experience.

00:03:27.756 --> 00:03:31.396 A:middle
AVFoundation and CoreMedia
provide the core playback tools.

00:03:32.416 --> 00:03:38.906 A:middle
And UIKit or on macOS AppKit
provides interface elements.

00:03:40.286 --> 00:03:43.236 A:middle
Today we're going to
talk about three things.

00:03:44.126 --> 00:03:48.116 A:middle
First, we'll show you how easy
it is to get started with AVKit.

00:03:48.736 --> 00:03:50.736 A:middle
Second, we'll look at several

00:03:50.736 --> 00:03:53.036 A:middle
of the ways you can extend
the playback experience

00:03:53.036 --> 00:03:55.156 A:middle
with features unique to tvOS.

00:03:55.806 --> 00:03:58.226 A:middle
And third, we'll talk
about some best practices.

00:03:59.426 --> 00:04:00.306 A:middle
All right, let's get started.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.426 --> 00:04:00.306 A:middle
All right, let's get started.

00:04:01.706 --> 00:04:04.216 A:middle
Let's talk about
AVPlayerViewController.

00:04:05.226 --> 00:04:09.586 A:middle
AVPlayerViewController uses
an AVPlayer, AVPlayerItem

00:04:09.586 --> 00:04:12.066 A:middle
and AVAsset provided
by your application.

00:04:12.766 --> 00:04:16.266 A:middle
The AVAsset represents
the audio visual media.

00:04:16.755 --> 00:04:20.386 A:middle
AVPlayerItem represents the
presentation state of an asset.

00:04:21.116 --> 00:04:22.946 A:middle
The AVPlayer controls playback.

00:04:23.346 --> 00:04:26.876 A:middle
And AVPlayerViewController
sits on top, providing the UI.

00:04:28.206 --> 00:04:33.206 A:middle
Let's look at how you'll
provide your media to AVKit.

00:04:33.856 --> 00:04:36.356 A:middle
There are four steps.

00:04:37.066 --> 00:04:39.286 A:middle
First, create an
asset from the URL.

00:04:41.076 --> 00:04:42.816 A:middle
Second, create a
playerItem of the asset.

00:04:44.516 --> 00:04:46.526 A:middle
Third, create a player
with the playerItem.

00:04:47.076 --> 00:04:50.266 A:middle
And fourth, associate the player
with the playerViewController.

00:04:50.806 --> 00:04:55.386 A:middle
Now, you can simplify
all that to one line just

00:04:55.766 --> 00:04:58.506 A:middle
to create the player directly
from the URL and assign it

00:04:58.636 --> 00:05:01.056 A:middle
to the player property of
the playerViewController.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.636 --> 00:05:01.056 A:middle
to the player property of
the playerViewController.

00:05:01.776 --> 00:05:03.376 A:middle
All right.

00:05:03.996 --> 00:05:07.866 A:middle
Next, let's see how you can
embed an inline player view.

00:05:08.936 --> 00:05:11.506 A:middle
First, you'll set up your
playerViewController.

00:05:13.206 --> 00:05:15.756 A:middle
Next you're going to set the
frame to the inline view.

00:05:16.316 --> 00:05:18.346 A:middle
We're setting the
frame directly here,

00:05:18.346 --> 00:05:20.506 A:middle
but you should use
constraints, of course.

00:05:21.786 --> 00:05:25.496 A:middle
And third, add the view from
the playerViewController

00:05:25.496 --> 00:05:26.186 A:middle
to your view.

00:05:26.556 --> 00:05:28.506 A:middle
And add the playerViewController
itself

00:05:28.506 --> 00:05:30.996 A:middle
as a child view controller
of your view controller.

00:05:31.606 --> 00:05:34.076 A:middle
Now, once you're ready

00:05:34.076 --> 00:05:36.026 A:middle
for interactive full-screen
presentation,

00:05:36.026 --> 00:05:38.206 A:middle
you can just present
the view controller

00:05:38.206 --> 00:05:40.416 A:middle
and it will automatically
animate

00:05:40.416 --> 00:05:42.836 A:middle
from the inline playback
to the full screen.

00:05:46.136 --> 00:05:47.096 A:middle
All right.

00:05:47.096 --> 00:05:50.596 A:middle
Let's talk about extending
the playback experience.

00:05:51.996 --> 00:05:56.906 A:middle
AVKit for tvOS was introduced
in tvOS 9, last fall,

00:05:57.246 --> 00:05:59.026 A:middle
with several enhancements.

00:05:59.916 --> 00:06:04.746 A:middle
Namely, the ability to add
non-interactive overlays.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.916 --> 00:06:04.746 A:middle
Namely, the ability to add
non-interactive overlays.

00:06:05.486 --> 00:06:07.106 A:middle
Restrict playback interaction.

00:06:08.126 --> 00:06:10.976 A:middle
Provide informational metadata.

00:06:11.286 --> 00:06:12.356 A:middle
Navigation markers.

00:06:13.306 --> 00:06:15.996 A:middle
And identify interstitial
content.

00:06:17.006 --> 00:06:22.776 A:middle
With tvOS 10, we will introduce
a couple new enhancements:

00:06:23.236 --> 00:06:26.406 A:middle
The ability to modify
skipping behavior

00:06:26.976 --> 00:06:32.066 A:middle
and presents content proposals.

00:06:32.816 --> 00:06:39.046 A:middle
And now let's talk
about each of these.

00:06:39.646 --> 00:06:43.246 A:middle
Overlays are for logos and
other overlaid graphics.

00:06:43.646 --> 00:06:46.946 A:middle
The playback overlay view
lies above the video,

00:06:47.986 --> 00:06:54.476 A:middle
but below the controls.

00:06:54.476 --> 00:06:56.586 A:middle
Views may be static or animated.

00:06:57.036 --> 00:06:59.856 A:middle
But views will not
receive focus or events.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.666 --> 00:07:04.146 A:middle
Let's move on to
restricting playback.

00:07:05.316 --> 00:07:07.296 A:middle
The requiresLinearPlayback
property

00:07:07.386 --> 00:07:10.656 A:middle
of the player view controller
limits user interaction

00:07:10.656 --> 00:07:13.136 A:middle
when set to Play and Pause.

00:07:13.546 --> 00:07:16.216 A:middle
Things like fast forward,
scrubbing, skipping,

00:07:16.556 --> 00:07:20.006 A:middle
chapter navigation and so on are
all forbidden when this is set.

00:07:20.886 --> 00:07:24.116 A:middle
Typically you'll set it to true
when you want to enforce viewing

00:07:24.116 --> 00:07:26.056 A:middle
of a particular section
of video,

00:07:26.056 --> 00:07:29.116 A:middle
for example ads or
a legal notice.

00:07:31.576 --> 00:07:36.056 A:middle
The external metadata
property supplements

00:07:36.056 --> 00:07:39.106 A:middle
or replaces information
embedded in your asset.

00:07:39.486 --> 00:07:43.866 A:middle
Things like title, description,
genre, media content and rating,

00:07:43.916 --> 00:07:46.726 A:middle
PG-13 or R, that sort of
thing, or poster artwork.

00:07:47.546 --> 00:07:52.516 A:middle
Let's go back to our screenshot

00:07:52.516 --> 00:07:54.176 A:middle
that showed the info
panel we saw earlier.

00:07:54.956 --> 00:07:56.686 A:middle
And I want to direct
your attention

00:07:56.756 --> 00:07:58.636 A:middle
to this top section right here.

00:07:59.326 --> 00:08:03.426 A:middle
This is where the informational
metadata is displayed on tvOS.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.326 --> 00:08:03.426 A:middle
This is where the informational
metadata is displayed on tvOS.

00:08:03.916 --> 00:08:07.086 A:middle
Now, in addition, it'll also be
displayed in the iOS remote app.

00:08:08.756 --> 00:08:11.136 A:middle
Here we see the artwork,
which in this case looks

00:08:11.136 --> 00:08:12.796 A:middle
like a still from the video.

00:08:13.436 --> 00:08:14.866 A:middle
We have the title.

00:08:14.866 --> 00:08:17.686 A:middle
We have the duration, which
comes directly from the asset,

00:08:17.836 --> 00:08:20.546 A:middle
a media content rating
and a description.

00:08:23.146 --> 00:08:24.416 A:middle
Now, let's look at
how we're going

00:08:24.416 --> 00:08:26.636 A:middle
to create external
metadata items.

00:08:27.236 --> 00:08:31.276 A:middle
And we will create a
couple of helper functions

00:08:31.276 --> 00:08:32.525 A:middle
to make it a little easier.

00:08:33.596 --> 00:08:36.486 A:middle
The first one called
metadataItem takes an identifier

00:08:36.546 --> 00:08:37.256 A:middle
and a value.

00:08:37.296 --> 00:08:39.486 A:middle
And it's going to
return an AVMetadataItem.

00:08:40.655 --> 00:08:43.996 A:middle
And so metadataItem has a
whole bunch of properties.

00:08:44.296 --> 00:08:47.796 A:middle
You really need to set three,
these three: The value,

00:08:47.796 --> 00:08:51.366 A:middle
the identifier, and
often overlooked,

00:08:51.406 --> 00:08:52.676 A:middle
the extended language tag.

00:08:54.286 --> 00:08:58.246 A:middle
Now, you see here I've set it
to the string und which is short

00:08:58.246 --> 00:09:01.646 A:middle
for undefined and it
acts like a wildcard.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.246 --> 00:09:01.646 A:middle
for undefined and it
acts like a wildcard.

00:09:02.146 --> 00:09:05.546 A:middle
So if you do not have a more
specific language translation

00:09:05.546 --> 00:09:10.456 A:middle
available, this is the version
that AVKit will display.

00:09:11.486 --> 00:09:13.886 A:middle
If you don't have any
translations, if everything,

00:09:13.886 --> 00:09:16.546 A:middle
for example, is in English
or everything's in French,

00:09:17.026 --> 00:09:20.216 A:middle
then just use und so that users,

00:09:20.216 --> 00:09:24.316 A:middle
regardless of their
language, will see something.

00:09:24.826 --> 00:09:26.816 A:middle
Now, artwork is a
little bit different.

00:09:27.396 --> 00:09:32.666 A:middle
The value of the artwork
metadataItem is an

00:09:32.666 --> 00:09:33.766 A:middle
image representation.

00:09:33.766 --> 00:09:34.636 A:middle
So it's raw data.

00:09:35.166 --> 00:09:37.766 A:middle
You can use PNG or JPEG.

00:09:38.026 --> 00:09:40.866 A:middle
You also need to set the data
type field to identify what kind

00:09:40.866 --> 00:09:41.876 A:middle
of data you're providing.

00:09:42.616 --> 00:09:46.176 A:middle
And once again, you
set the identifier

00:09:46.176 --> 00:09:47.346 A:middle
and the extended language tag.

00:09:47.346 --> 00:09:51.296 A:middle
Now we're going to
bring it all together.

00:09:51.456 --> 00:09:53.986 A:middle
We're going to create several
external metadata items.

00:09:53.986 --> 00:09:54.666 A:middle
We create an array.

00:09:54.666 --> 00:09:57.626 A:middle
Then we're going to use our
helper function to add a title,

00:09:58.386 --> 00:10:01.266 A:middle
a description and the poster
image to that array --


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.386 --> 00:10:01.266 A:middle
a description and the poster
image to that array --

00:10:02.076 --> 00:10:03.446 A:middle
oh, and sorry, also the genre.

00:10:03.446 --> 00:10:05.656 A:middle
And then finally we're
going to assign that array

00:10:05.656 --> 00:10:08.576 A:middle
to the external metadata
property of the playerItem.

00:10:09.256 --> 00:10:09.466 A:middle
All right.

00:10:10.956 --> 00:10:13.226 A:middle
Back to our info panel.

00:10:14.506 --> 00:10:18.046 A:middle
Now we're going to look down
here at the bottom part.

00:10:18.486 --> 00:10:19.756 A:middle
This is the navigation section.

00:10:19.756 --> 00:10:23.966 A:middle
And this is displaying a
navigation marker group.

00:10:24.136 --> 00:10:27.396 A:middle
Navigation markers most
often are used for chapters.

00:10:27.786 --> 00:10:29.226 A:middle
But they allow for easy access

00:10:29.226 --> 00:10:31.336 A:middle
to different parts
of your video.

00:10:32.056 --> 00:10:35.306 A:middle
Navigation marker groups
are for chapters or events.

00:10:35.626 --> 00:10:37.156 A:middle
Examples of events would be

00:10:37.156 --> 00:10:43.816 A:middle
in a sports video you might have
game highlights, for example.

00:10:44.936 --> 00:10:49.076 A:middle
A navigation marker group
is defined by an object

00:10:49.076 --> 00:10:51.396 A:middle
of class
AVNavigationMarkersGroup.

00:10:52.036 --> 00:10:54.866 A:middle
And it contains an array
of navigation markers,

00:10:54.866 --> 00:10:56.826 A:middle
in this case chapters.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.336 --> 00:11:02.306 A:middle
Every marker has a title.

00:11:03.396 --> 00:11:05.826 A:middle
And in most cases
an image as well,

00:11:05.826 --> 00:11:07.206 A:middle
usually a thumbnail
from the video.

00:11:07.756 --> 00:11:08.506 A:middle
But that's optional.

00:11:10.096 --> 00:11:16.236 A:middle
An event group itself also has a
title, a chapter group does not.

00:11:19.276 --> 00:11:19.936 A:middle
All right.

00:11:19.936 --> 00:11:22.626 A:middle
Another little helper function,
the create navigation marker.

00:11:23.026 --> 00:11:26.906 A:middle
This takes a title, a
description and a time range.

00:11:27.326 --> 00:11:30.566 A:middle
Now, the time range is the
time range of the thing

00:11:30.566 --> 00:11:31.806 A:middle
that you're navigating to.

00:11:31.806 --> 00:11:33.736 A:middle
However, the duration
is optional.

00:11:34.056 --> 00:11:38.956 A:middle
If you don't really care to set
it, you can just leave it zero.

00:11:39.606 --> 00:11:41.446 A:middle
Here again, we're
creating metadata items.

00:11:41.446 --> 00:11:43.306 A:middle
In this case, for a
title, description.

00:11:43.306 --> 00:11:46.346 A:middle
And then finally we're going to
create the timed metadata group

00:11:46.386 --> 00:11:49.606 A:middle
with our metadata
and the time range.

00:11:50.196 --> 00:11:54.156 A:middle
All right.

00:11:54.296 --> 00:11:55.906 A:middle
Now let's talk about
interstitials.

00:11:56.626 --> 00:12:04.446 A:middle
Here we see a video with several
interstitials as indicated


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:56.626 --> 00:12:04.446 A:middle
Here we see a video with several
interstitials as indicated

00:12:04.446 --> 00:12:06.406 A:middle
by the dots on the
transport bar.

00:12:07.866 --> 00:12:10.786 A:middle
The user is watching
an interstitial here.

00:12:10.786 --> 00:12:14.136 A:middle
And the time above the
transport bar is counting

00:12:14.136 --> 00:12:15.346 A:middle
down the time remaining.

00:12:16.086 --> 00:12:24.786 A:middle
The time below is the
elapsed time into the video.

00:12:25.426 --> 00:12:27.476 A:middle
Interstitial content is content

00:12:27.476 --> 00:12:29.136 A:middle
that is unrelated
to the main video.

00:12:29.136 --> 00:12:32.556 A:middle
So for example, advertisements,
legal notices,

00:12:32.556 --> 00:12:33.536 A:middle
other things like that.

00:12:35.276 --> 00:12:39.476 A:middle
An interstitial time range
identifies the portion

00:12:39.476 --> 00:12:41.836 A:middle
of an asset that contains
interstitial content.

00:12:43.386 --> 00:12:45.666 A:middle
And interstitial
time ranges collapse.

00:12:45.666 --> 00:12:49.086 A:middle
The dots on the transfer bar
are [inaudible] holes as we saw

00:12:49.086 --> 00:12:49.836 A:middle
in the previous slide.

00:12:51.256 --> 00:12:55.356 A:middle
And finally, during scrubbing,
interstitial content is hidden.

00:12:55.356 --> 00:12:58.576 A:middle
So the user just is navigating
through the entire main video

00:12:58.576 --> 00:12:59.686 A:middle
and they're not getting
distracted

00:12:59.686 --> 00:13:04.386 A:middle
by ads popping ups
as they're scrubbing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.686 --> 00:13:04.386 A:middle
by ads popping ups
as they're scrubbing.

00:13:05.256 --> 00:13:09.236 A:middle
Now here we have a diagram
comparing the timelines

00:13:09.236 --> 00:13:12.936 A:middle
of your asset on the top
and the transfer bar as seen

00:13:12.936 --> 00:13:14.346 A:middle
by the user on the bottom.

00:13:14.646 --> 00:13:17.446 A:middle
We have a nine minute asset
with a couple of interstitials,

00:13:19.076 --> 00:13:21.316 A:middle
both of which are going
to be collapsed into dots.

00:13:21.536 --> 00:13:23.256 A:middle
And you'll notice
that the duration

00:13:23.626 --> 00:13:27.246 A:middle
on the transfer bar has
been reduced by the length,

00:13:27.246 --> 00:13:29.786 A:middle
or rather the duration
of those interstitials.

00:13:30.346 --> 00:13:37.346 A:middle
Now let's look at creating and
declaring interstitial content.

00:13:38.656 --> 00:13:44.076 A:middle
First, on your server you should
stitch the interstitial content

00:13:44.076 --> 00:13:46.846 A:middle
directly into your HLS asset.

00:13:47.496 --> 00:13:50.576 A:middle
Then, in your client app,

00:13:50.926 --> 00:13:53.556 A:middle
you will declare the
interstitial time ranges.

00:13:54.036 --> 00:13:56.956 A:middle
And implement a few
delegate methods

00:13:56.956 --> 00:13:58.296 A:middle
to enforce playback policy.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:00.216 --> 00:14:02.776 A:middle
Here's a short snippet
showing how

00:14:02.776 --> 00:14:04.876 A:middle
to declare the interstitial
time ranges.

00:14:05.186 --> 00:14:09.286 A:middle
For each interstitial create
an AVInterstititalTimeRange.

00:14:10.246 --> 00:14:12.496 A:middle
Then set the
interstitialTimeRanges property

00:14:12.496 --> 00:14:14.526 A:middle
of your player item
to this array.

00:14:15.276 --> 00:14:21.326 A:middle
In this case we're just
creating a single interstitial

00:14:21.326 --> 00:14:21.846 A:middle
time range.

00:14:22.326 --> 00:14:29.596 A:middle
Next, the delegate methods.

00:14:30.436 --> 00:14:33.486 A:middle
There are three important
ones I'm going to talk about.

00:14:33.486 --> 00:14:34.496 A:middle
The first is willPresent.

00:14:35.536 --> 00:14:37.236 A:middle
willPresent is called when one

00:14:37.506 --> 00:14:40.026 A:middle
of your interstitials
begins to play.

00:14:41.836 --> 00:14:44.276 A:middle
Typically, this is
where you're going

00:14:44.276 --> 00:14:47.496 A:middle
to change requiresLinearPlayback
to restrict navigation.

00:14:48.206 --> 00:14:50.036 A:middle
So for example, if this
is an advertisement,

00:14:50.036 --> 00:14:52.846 A:middle
you probably need, for
contractual reasons,

00:14:52.846 --> 00:14:55.316 A:middle
to require the user to watch
the entire interstitial once

00:14:55.316 --> 00:14:55.836 A:middle
they start.

00:14:56.606 --> 00:14:57.326 A:middle
You set it to true.

00:14:57.326 --> 00:14:58.376 A:middle
Then they can't skip out.

00:14:58.376 --> 00:15:01.566 A:middle
They could still pause,
head to the kitchen


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.376 --> 00:15:01.566 A:middle
They could still pause,
head to the kitchen

00:15:01.566 --> 00:15:03.776 A:middle
or something and come back.

00:15:03.776 --> 00:15:06.346 A:middle
But they can't navigate,
they can't skip

00:15:06.346 --> 00:15:08.386 A:middle
over it once they're inside.

00:15:10.316 --> 00:15:12.896 A:middle
didPresent is called at the
end of your interstitial.

00:15:13.416 --> 00:15:15.736 A:middle
And usually you set
requiresLinearPlayback back

00:15:15.736 --> 00:15:18.056 A:middle
to False so that the users
can once again navigate.

00:15:18.556 --> 00:15:20.996 A:middle
And finally,

00:15:22.566 --> 00:15:27.886 A:middle
timeToSeekAfterUserNavigatedFrom
time to some target time.

00:15:28.106 --> 00:15:32.326 A:middle
So this is called when the
user navigates or indicates

00:15:32.326 --> 00:15:34.646 A:middle
that they want to navigate to
a different part of your video.

00:15:34.646 --> 00:15:38.716 A:middle
For example, they
skipped forward or back.

00:15:38.716 --> 00:15:40.486 A:middle
They scrub and hit Play again.

00:15:40.746 --> 00:15:43.446 A:middle
Or they use the navigation
markers to jump

00:15:43.446 --> 00:15:44.616 A:middle
to another part in your video.

00:15:45.776 --> 00:15:47.816 A:middle
The oldTime is the time
that they were playing

00:15:47.816 --> 00:15:49.006 A:middle
at just before they skipped.

00:15:49.456 --> 00:15:52.246 A:middle
The targetTime is the time
that they want to watch next.

00:15:53.116 --> 00:15:55.816 A:middle
The time returned
by this delegate is

00:15:55.816 --> 00:15:58.666 A:middle
where you want playback
to resume.

00:15:59.776 --> 00:16:02.546 A:middle
So by default, if you didn't
implement this method,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.776 --> 00:16:02.546 A:middle
So by default, if you didn't
implement this method,

00:16:02.546 --> 00:16:04.896 A:middle
it would resume at
the target time.

00:16:04.896 --> 00:16:07.366 A:middle
AVKit would seek to the target
time and start playback there.

00:16:07.486 --> 00:16:10.826 A:middle
If you provide the start time
of an interstitial instead,

00:16:10.826 --> 00:16:14.336 A:middle
AVKit will automatically
redirect to that interstitial.

00:16:15.396 --> 00:16:17.596 A:middle
Now, if you do redirect
to an interstitial,

00:16:18.386 --> 00:16:21.396 A:middle
unlike in our very simple sample
here, you're going to want

00:16:21.396 --> 00:16:22.826 A:middle
to save the target time.

00:16:23.226 --> 00:16:25.446 A:middle
And when your interstitial
is complete,

00:16:26.176 --> 00:16:27.606 A:middle
seek back to the target time

00:16:27.606 --> 00:16:31.326 A:middle
so that the user can once
again resume at the time

00:16:31.326 --> 00:16:33.036 A:middle
that they wanted to watch.

00:16:33.206 --> 00:16:36.096 A:middle
Now let's turn to
skipping behavior.

00:16:39.036 --> 00:16:40.256 A:middle
Here we see the skipping
indicator.

00:16:40.256 --> 00:16:43.096 A:middle
And this is a new skipping
indicator in tvOS 10,

00:16:43.346 --> 00:16:51.896 A:middle
the skip by item indicator which
can replace the older indicator,

00:16:51.896 --> 00:16:54.606 A:middle
which is the skip forward
or back 10 seconds.

00:16:55.386 --> 00:16:58.716 A:middle
In tvOS 10 you can choose

00:16:58.716 --> 00:17:00.596 A:middle
between these two
skipping behaviors.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.716 --> 00:17:00.596 A:middle
between these two
skipping behaviors.

00:17:01.016 --> 00:17:05.116 A:middle
If your app is displaying
something like a movie

00:17:05.116 --> 00:17:09.266 A:middle
or a TV show, it's probably
most useful for users to be able

00:17:09.266 --> 00:17:12.915 A:middle
to navigate skip 10 seconds
back and forward at a time

00:17:12.915 --> 00:17:15.976 A:middle
to more easily find the scene
that they're looking for.

00:17:17.046 --> 00:17:19.386 A:middle
If you have a series
of short videos,

00:17:19.386 --> 00:17:23.126 A:middle
for example exercise videos,
it probably makes more sense

00:17:23.256 --> 00:17:27.705 A:middle
to let users easily skip to the
next video, the next exercise,

00:17:27.896 --> 00:17:30.266 A:middle
or the previous video,
previous exercise, then to move

00:17:30.266 --> 00:17:32.376 A:middle
around a little bit
within an exercise.

00:17:32.856 --> 00:17:35.836 A:middle
So, to accommodate that, you can
change the skipping behavior.

00:17:36.146 --> 00:17:38.556 A:middle
There are two skipping
behaviors defined today.

00:17:38.556 --> 00:17:40.006 A:middle
The default, which
is to skip plus

00:17:40.006 --> 00:17:42.316 A:middle
or minus 10 seconds,
and skip item.

00:17:42.956 --> 00:17:44.506 A:middle
And there are three properties

00:17:44.506 --> 00:17:47.026 A:middle
in the PlayerViewController
related to this:

00:17:47.026 --> 00:17:50.196 A:middle
The skipping behavior
and properties to enable

00:17:50.196 --> 00:17:54.316 A:middle
and disable the skip forward and
skip backward hint indicators.

00:17:54.886 --> 00:18:00.166 A:middle
So let's look at
skipping by item instead


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:54.886 --> 00:18:00.166 A:middle
So let's look at
skipping by item instead

00:18:00.166 --> 00:18:01.766 A:middle
of skipping a few seconds.

00:18:02.816 --> 00:18:04.556 A:middle
First thing we're going
to do is we're going

00:18:04.556 --> 00:18:05.596 A:middle
to set the three properties.

00:18:06.546 --> 00:18:07.966 A:middle
Select the new skipping
behavior.

00:18:08.046 --> 00:18:09.076 A:middle
In this case we're just going

00:18:09.076 --> 00:18:11.056 A:middle
to always enable skip
forward and skip back.

00:18:11.056 --> 00:18:12.216 A:middle
I'm being a little lazy.

00:18:13.006 --> 00:18:16.476 A:middle
And then we're going to
implement two delegate methods.

00:18:17.376 --> 00:18:19.246 A:middle
Skip to next item,
all we're going

00:18:19.246 --> 00:18:23.156 A:middle
to do is replace the current
item with the new video.

00:18:23.156 --> 00:18:25.856 A:middle
And skip to previous item.

00:18:25.966 --> 00:18:27.396 A:middle
Same thing, but going backwards.

00:18:27.956 --> 00:18:34.436 A:middle
Okay. Now for a demo
of all these features,

00:18:34.646 --> 00:18:37.026 A:middle
I'd like to welcome
Jonathan Long to the stage.

00:18:37.516 --> 00:18:37.886 A:middle
Jonathan.

00:18:39.516 --> 00:18:44.626 A:middle
[ Applause ]

00:18:45.126 --> 00:18:45.556 A:middle
&gt;&gt; Good morning.

00:18:46.206 --> 00:18:47.196 A:middle
My name is Jonathan Long.

00:18:47.196 --> 00:18:49.716 A:middle
I work with Dan on
AVKit for tvOS.

00:18:50.666 --> 00:18:52.886 A:middle
And today, we are going

00:18:52.886 --> 00:18:55.406 A:middle
to be demoing an app
called AVKit Player.

00:18:56.386 --> 00:18:59.276 A:middle
I have the project
open here in Xcode.

00:18:59.336 --> 00:19:01.226 A:middle
And this is the main
view controller.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.336 --> 00:19:01.226 A:middle
And this is the main
view controller.

00:19:01.606 --> 00:19:04.016 A:middle
It is the subclass
of UIViewController.

00:19:04.686 --> 00:19:07.226 A:middle
And we have a reference to
an AVPlayerViewController.

00:19:07.836 --> 00:19:11.746 A:middle
We obtain this reference in
the prepare for segue callback.

00:19:12.856 --> 00:19:16.676 A:middle
In addition, we also create
an AVAsset, an AVPlayerItem

00:19:16.936 --> 00:19:18.956 A:middle
and an AVPlayer, which we assign

00:19:18.956 --> 00:19:20.686 A:middle
to the PlayerViewController's
player property.

00:19:20.916 --> 00:19:22.576 A:middle
I'll go ahead and
build and run this

00:19:22.576 --> 00:19:24.346 A:middle
so we can see what
it looks like.

00:19:25.031 --> 00:19:27.031 A:middle
[ Music ]

00:19:27.046 --> 00:19:28.846 A:middle
So here's our
playerViewController

00:19:28.846 --> 00:19:31.486 A:middle
in full screen with all of the
standard user interactions.

00:19:32.116 --> 00:19:34.726 A:middle
If I swipe down to
reveal the info panel,

00:19:35.316 --> 00:19:36.616 A:middle
you can see that
there's not a whole lot

00:19:36.616 --> 00:19:37.906 A:middle
of interesting information here.

00:19:38.426 --> 00:19:40.766 A:middle
Most notably we are
missing the info tab.

00:19:41.546 --> 00:19:43.366 A:middle
So the first thing we're
going to do is we are going

00:19:43.366 --> 00:19:46.166 A:middle
to add some external metadata
and some navigation markers

00:19:46.166 --> 00:19:47.576 A:middle
so that info tab shows up.

00:19:49.206 --> 00:19:52.286 A:middle
Jumping back into Xcode, the
first thing that we're going

00:19:52.286 --> 00:19:54.866 A:middle
to do is we are going to
add some external metadata.

00:19:55.276 --> 00:19:57.906 A:middle
To do this we need to
create some AVMetadataItems,

00:19:58.416 --> 00:20:00.586 A:middle
add them to an array
and assign this array


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.416 --> 00:20:00.586 A:middle
add them to an array
and assign this array

00:20:00.586 --> 00:20:02.346 A:middle
to the
playerItemExternalMetadata

00:20:02.346 --> 00:20:02.776 A:middle
property.

00:20:03.356 --> 00:20:07.216 A:middle
I'll go ahead and add some
helper functions here.

00:20:08.046 --> 00:20:09.576 A:middle
These probably look
very familiar,

00:20:09.716 --> 00:20:10.826 A:middle
as they are the same ones

00:20:10.826 --> 00:20:12.376 A:middle
that Dan showed you
in slides earlier.

00:20:13.346 --> 00:20:15.746 A:middle
The first creates and
AVMetadataItem for artwork,

00:20:16.216 --> 00:20:18.416 A:middle
setting the data
type to be JPEG.

00:20:19.636 --> 00:20:21.636 A:middle
The second creates
an AVMetadataItem

00:20:21.956 --> 00:20:23.286 A:middle
for all other value types,

00:20:23.486 --> 00:20:26.226 A:middle
setting the extendedLanguageTag
to be undefined.

00:20:26.736 --> 00:20:30.506 A:middle
Now, I have one more
helper function here

00:20:31.276 --> 00:20:34.956 A:middle
that takes a dictionary
as its argument.

00:20:35.306 --> 00:20:38.826 A:middle
And it simply maps the key
value pairs of this dictionary

00:20:39.146 --> 00:20:40.786 A:middle
to create AVMetadataItems

00:20:40.786 --> 00:20:43.446 A:middle
and returns an array
of AVMetadataItems.

00:20:44.536 --> 00:20:47.546 A:middle
So now with these
helper functions,

00:20:47.986 --> 00:20:51.746 A:middle
we can set the
playerItem.externalMetadata

00:20:51.746 --> 00:20:57.596 A:middle
property to be our array
of AVMetadataItems.

00:20:58.126 --> 00:21:00.336 A:middle
Cool. So we created
AVMetadataItems,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.126 --> 00:21:00.336 A:middle
Cool. So we created
AVMetadataItems,

00:21:00.666 --> 00:21:02.936 A:middle
added them to an array,
assigned that array

00:21:02.936 --> 00:21:04.526 A:middle
to the
playerItem.externalMetadata

00:21:04.526 --> 00:21:04.976 A:middle
property.

00:21:06.256 --> 00:21:09.146 A:middle
So now let's move on and
add some navigation markers.

00:21:10.636 --> 00:21:13.956 A:middle
I have some helper
functions here for that.

00:21:14.546 --> 00:21:17.636 A:middle
The first creates an
AVTimedMetadataGroup

00:21:17.846 --> 00:21:22.306 A:middle
with a title, a description
and a time range.

00:21:22.856 --> 00:21:27.696 A:middle
The second creates an
AVNavigationMarkersGroup

00:21:28.236 --> 00:21:33.186 A:middle
with a name and four
time metadata groups

00:21:33.216 --> 00:21:36.146 A:middle
that represent different
time ranges in our content.

00:21:36.856 --> 00:21:39.816 A:middle
So now with these functions,

00:21:39.976 --> 00:21:43.346 A:middle
I can set the
navigationMarkerGroups property

00:21:43.346 --> 00:21:49.446 A:middle
on the playerItem to be an array
of AVNavigationMarkerGroups.

00:21:50.016 --> 00:21:52.076 A:middle
We'll name this one
Additional Group.

00:21:53.536 --> 00:21:56.946 A:middle
Cool. So we created an
AVNavigationMarkersGroup

00:21:57.116 --> 00:21:59.716 A:middle
with some time metadata
groups with a name.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.406 --> 00:22:01.586 A:middle
We added that to an array.

00:22:01.666 --> 00:22:03.066 A:middle
And then we assigned the array

00:22:03.066 --> 00:22:06.476 A:middle
to the navigationMarkerGroups
property on the playerItem.

00:22:07.006 --> 00:22:11.926 A:middle
So, let's build and run
and see what happened.

00:22:13.366 --> 00:22:16.786 A:middle
So here is our Player
View Controller again.

00:22:16.786 --> 00:22:19.846 A:middle
And I can swipe down
to see the Info tab.

00:22:19.846 --> 00:22:22.906 A:middle
And now we see in the
metadata space all the metadata

00:22:22.906 --> 00:22:27.196 A:middle
that we've specified as well
as the artwork for this title.

00:22:27.196 --> 00:22:29.126 A:middle
And if I select down
at the bottom,

00:22:29.126 --> 00:22:30.766 A:middle
one of the navigation
markers that we've added,

00:22:30.766 --> 00:22:33.796 A:middle
we can skip to that
point in the content.

00:22:33.796 --> 00:22:38.316 A:middle
So with just a little
bit of code it's easy

00:22:38.316 --> 00:22:40.746 A:middle
to add external metadata
and navigation markers

00:22:41.066 --> 00:22:43.596 A:middle
to provide a rich user
experience in your info panel.

00:22:44.776 --> 00:22:46.226 A:middle
Now I'll hand it back
over to Dan to talk

00:22:46.226 --> 00:22:50.606 A:middle
about new APIs in
AVKit for tvOS.

00:22:51.556 --> 00:22:51.646 A:middle
Dan.

00:22:52.516 --> 00:22:54.876 A:middle
[ Applause ]

00:22:55.376 --> 00:22:55.976 A:middle
&gt;&gt; Thank you, Jonathan.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.876 --> 00:23:01.326 A:middle
All right.

00:23:01.416 --> 00:23:02.586 A:middle
Content proposals.

00:23:03.986 --> 00:23:08.996 A:middle
Content proposals are about
suggesting what to watch next.

00:23:09.586 --> 00:23:11.836 A:middle
You may have seen Up
Next suggestions in some

00:23:11.836 --> 00:23:16.866 A:middle
of your favorite apps such
as Netflix, Hulu, HBO.

00:23:18.046 --> 00:23:20.736 A:middle
When you reach the end
of each episode of, say,

00:23:20.736 --> 00:23:23.506 A:middle
"The West Wing" you'll
see a suggestion pop

00:23:23.506 --> 00:23:27.196 A:middle
up to watch the next
episode and so on and so

00:23:27.196 --> 00:23:30.686 A:middle
on until it's 3:00
in the morning.

00:23:31.076 --> 00:23:34.506 A:middle
Many apps implemented their
own version of this for tvOS 9.

00:23:34.506 --> 00:23:35.606 A:middle
And then it was kind of tricky.

00:23:37.196 --> 00:23:42.426 A:middle
No more. With tvOS 10 AVKit
provides a standard way

00:23:42.426 --> 00:23:46.106 A:middle
to present your own
customized Up Next experience.

00:23:46.216 --> 00:23:48.026 A:middle
We call these Content Proposals.

00:23:48.966 --> 00:23:50.486 A:middle
Here is one example

00:23:51.016 --> 00:23:52.776 A:middle
[ Applause ]

00:23:52.776 --> 00:23:53.226 A:middle
Thank you.

00:23:55.926 --> 00:23:58.266 A:middle
Now, you have the entire
screen to work with.

00:23:58.676 --> 00:24:01.286 A:middle
So you're not limited
to anything here.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.676 --> 00:24:01.286 A:middle
So you're not limited
to anything here.

00:24:01.286 --> 00:24:02.496 A:middle
This is just an example.

00:24:03.746 --> 00:24:06.436 A:middle
In the lower right
we have some metadata

00:24:06.436 --> 00:24:08.356 A:middle
and some big buttons
that you can press.

00:24:10.276 --> 00:24:12.736 A:middle
Up here we have the
currently playing video.

00:24:13.686 --> 00:24:17.826 A:middle
And here is the thumbnail
representing the proposed video.

00:24:18.666 --> 00:24:24.546 A:middle
Now, a content proposal is
represented by an object

00:24:24.546 --> 00:24:26.356 A:middle
of class AVContentProposal.

00:24:26.856 --> 00:24:28.666 A:middle
This is basically
a model object.

00:24:29.896 --> 00:24:32.106 A:middle
Now, there are several
properties on here.

00:24:32.106 --> 00:24:34.196 A:middle
I'm not going to spend a
lot of time on all of them.

00:24:34.196 --> 00:24:36.226 A:middle
But I want to highlight
a few important ones.

00:24:37.826 --> 00:24:39.866 A:middle
The first is
contentTimeForTransition.

00:24:40.556 --> 00:24:44.516 A:middle
This is the time within
the currently playing video

00:24:45.486 --> 00:24:49.206 A:middle
that you want your proposal
to be presented to the user.

00:24:50.456 --> 00:24:53.996 A:middle
So, if you specify the
duration of your video or zero

00:24:53.996 --> 00:24:58.076 A:middle
as a shortcut, that means
that you want it to appear

00:24:58.076 --> 00:24:59.626 A:middle
at the very end of the video.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:00.646 --> 00:25:03.786 A:middle
However, if you're presenting a
TV show or a movie or something

00:25:03.786 --> 00:25:05.586 A:middle
like that, you probably
have a bunch of end credits

00:25:05.586 --> 00:25:07.056 A:middle
that the user may not
want to sit through.

00:25:07.396 --> 00:25:10.096 A:middle
And you may want to present
your proposal at the beginning

00:25:10.096 --> 00:25:11.766 A:middle
of those end credits, in
which case you can set this

00:25:11.766 --> 00:25:12.676 A:middle
property accordingly.

00:25:13.166 --> 00:25:20.186 A:middle
Next automaticAcceptanceInterval
allows you to specify a timeout

00:25:20.186 --> 00:25:21.896 A:middle
for your presentation.

00:25:23.056 --> 00:25:25.226 A:middle
You can say, for
example, 30 seconds.

00:25:25.226 --> 00:25:29.316 A:middle
Which means that if the user
does absolutely nothing,

00:25:29.316 --> 00:25:31.356 A:middle
they take no action
for 30 seconds,

00:25:31.436 --> 00:25:33.706 A:middle
then the proposal will
be automatically accepted

00:25:34.056 --> 00:25:35.606 A:middle
and advanced.

00:25:37.276 --> 00:25:42.096 A:middle
If you don't set this, then your
proposal will just stay onscreen

00:25:42.096 --> 00:25:43.696 A:middle
until the user takes
some sort of action.

00:25:44.786 --> 00:25:49.406 A:middle
Title and preview image
would be the bare minimum bit

00:25:49.406 --> 00:25:51.466 A:middle
of information that you
should provide to a user.

00:25:52.626 --> 00:25:55.176 A:middle
You can, of course, provide
as much additional information

00:25:55.176 --> 00:26:00.196 A:middle
as you like: Description,
maybe a little widget


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:55.176 --> 00:26:00.196 A:middle
as you like: Description,
maybe a little widget

00:26:00.196 --> 00:26:01.606 A:middle
to set a user rating,

00:26:02.266 --> 00:26:04.896 A:middle
maybe additional suggestions
for alternate videos.

00:26:05.726 --> 00:26:10.476 A:middle
And finally, the way you
specify your content proposal is

00:26:10.476 --> 00:26:12.606 A:middle
to set the next contentProposal
property

00:26:13.196 --> 00:26:15.246 A:middle
on the current playerItem.

00:26:15.846 --> 00:26:19.376 A:middle
So let's look at creating
the content proposal.

00:26:22.046 --> 00:26:23.286 A:middle
Well, this is pretty easy.

00:26:23.286 --> 00:26:25.256 A:middle
We just create an instance
of AVContentProposal.

00:26:26.096 --> 00:26:27.866 A:middle
We're going to specify
a time of zero

00:26:27.866 --> 00:26:29.466 A:middle
for our
contentTimeForTransition.

00:26:30.396 --> 00:26:32.656 A:middle
This means we want it to
show up at the very end.

00:26:32.656 --> 00:26:35.366 A:middle
This is a nice shortcut if you
don't have the duration yet.

00:26:35.426 --> 00:26:38.076 A:middle
For example, if your
playerItem hasn't loaded.

00:26:39.996 --> 00:26:43.326 A:middle
And we're going to set the
title and a preview image.

00:26:43.686 --> 00:26:47.466 A:middle
In this case, our proposal
is for Episode 2 of Season 9

00:26:47.466 --> 00:26:50.316 A:middle
of a fictional TV show
called "Happy Hijinks."

00:26:51.206 --> 00:26:56.806 A:middle
In this case we're going set
one of the optional properties

00:26:56.806 --> 00:26:58.356 A:middle
of the content proposal, a URL.

00:26:58.356 --> 00:27:01.106 A:middle
And we're going to set it
to the URL for this episode,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.356 --> 00:27:01.106 A:middle
And we're going to set it
to the URL for this episode,

00:27:02.386 --> 00:27:03.436 A:middle
for our own use later.

00:27:05.326 --> 00:27:07.176 A:middle
Now we assign the
proposal to the playerItem,

00:27:07.286 --> 00:27:08.456 A:middle
which should show the proposal.

00:27:09.816 --> 00:27:11.026 A:middle
Naturally, this is
the playerItem

00:27:11.066 --> 00:27:16.996 A:middle
for Season 9, Episode 1.

00:27:18.046 --> 00:27:20.946 A:middle
And, once again, we've got three
interesting delegate methods.

00:27:22.766 --> 00:27:26.616 A:middle
shouldPresent is called
immediately before your proposal

00:27:26.616 --> 00:27:28.126 A:middle
is to be presented to the user.

00:27:29.146 --> 00:27:32.016 A:middle
Now, you could take this
opportunity to return False

00:27:32.016 --> 00:27:34.256 A:middle
and prevent the proposal
from being presented.

00:27:35.606 --> 00:27:38.786 A:middle
But you can also use it as a
last minute opportunity to set

00:27:38.786 --> 00:27:41.026 A:middle
up to prepare for
your presentation.

00:27:41.916 --> 00:27:43.806 A:middle
And we'll show an example
of that in just a minute.

00:27:45.306 --> 00:27:49.676 A:middle
didAccept is called when the
user accepts your proposal.

00:27:49.676 --> 00:27:52.346 A:middle
That means they want to watch
the video that you've suggested.

00:27:52.816 --> 00:27:57.486 A:middle
It will also be called
if the timeout occurs.

00:27:57.966 --> 00:28:01.286 A:middle
And didReject is called
if the user has indicated


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.966 --> 00:28:01.286 A:middle
And didReject is called
if the user has indicated

00:28:01.286 --> 00:28:03.146 A:middle
that they want out
of your proposal.

00:28:03.146 --> 00:28:05.086 A:middle
They want out of the video.

00:28:05.086 --> 00:28:11.656 A:middle
They want to get
back to your menu.

00:28:12.336 --> 00:28:15.756 A:middle
Now finally, you will
implement your presentation

00:28:15.756 --> 00:28:19.496 A:middle
by creating a custom subclass of
AVContentProposalViewController.

00:28:19.496 --> 00:28:23.706 A:middle
There are a few interesting
things in the subclass.

00:28:23.706 --> 00:28:25.766 A:middle
Let's look at two,

00:28:26.316 --> 00:28:31.346 A:middle
preferredPlayerViewFrame
is the frame onscreen

00:28:31.346 --> 00:28:34.456 A:middle
where you want the video to
appear during your presentation.

00:28:35.426 --> 00:28:39.006 A:middle
Now, the base class
simply returns the frame

00:28:39.006 --> 00:28:43.226 A:middle
of the entire screen, in which
case the video will continue

00:28:43.226 --> 00:28:44.086 A:middle
to fill the screen.

00:28:45.016 --> 00:28:47.726 A:middle
And your presentation controls
will be overlaid on top.

00:28:48.186 --> 00:28:50.566 A:middle
However, you can specify
a smaller rectangle,

00:28:50.566 --> 00:28:52.696 A:middle
maybe off to the side in
a corner or something,

00:28:53.126 --> 00:28:56.326 A:middle
to give yourself lots of space,
the rest of the screen to work

00:28:56.326 --> 00:29:00.016 A:middle
with for your controls.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:56.326 --> 00:29:00.016 A:middle
with for your controls.

00:29:01.046 --> 00:29:04.306 A:middle
And dismissContentProposal
is how content proposals

00:29:04.306 --> 00:29:05.246 A:middle
are dismissed.

00:29:05.436 --> 00:29:07.396 A:middle
You can specify one
of three actions:

00:29:08.096 --> 00:29:12.796 A:middle
Accept, Reject and Defer.

00:29:13.026 --> 00:29:17.856 A:middle
Defer means the user simply
wants to hide your presentation,

00:29:17.856 --> 00:29:20.776 A:middle
get back to watching the
end credits so they can,

00:29:20.776 --> 00:29:22.496 A:middle
I don't know, maybe they
want to spot their name

00:29:22.496 --> 00:29:24.666 A:middle
in the end credits if
they worked on the video.

00:29:25.516 --> 00:29:28.886 A:middle
And then as the name implies,
Defer, it will reappear

00:29:28.886 --> 00:29:29.846 A:middle
at the end of the video.

00:29:30.666 --> 00:29:36.126 A:middle
Now let's look at responding to
those delegate notifications.

00:29:37.746 --> 00:29:38.486 A:middle
shouldPresent.

00:29:38.796 --> 00:29:41.666 A:middle
In this case, we're going
to create an instance

00:29:41.986 --> 00:29:45.386 A:middle
of our custom
contentProposalViewController

00:29:45.386 --> 00:29:46.866 A:middle
subclass and assign it

00:29:46.926 --> 00:29:48.826 A:middle
to the
contentProposalViewController

00:29:48.826 --> 00:29:49.296 A:middle
property

00:29:49.436 --> 00:29:51.736 A:middle
of the playerViewController
and return true.

00:29:52.956 --> 00:29:56.006 A:middle
This lets us set that up
at the very last minute

00:29:56.006 --> 00:29:57.796 A:middle
when we know we're going
to actually need it

00:29:57.796 --> 00:29:59.756 A:middle
and not allocate
a bunch of memory


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.036 --> 00:30:03.636 A:middle
that the user may never get to.

00:30:04.166 --> 00:30:04.986 A:middle
didAccept.

00:30:05.946 --> 00:30:07.246 A:middle
Here all we're going
to do is we're going

00:30:07.246 --> 00:30:08.596 A:middle
to replace the current
playerItem

00:30:09.436 --> 00:30:10.916 A:middle
with a proposed content
playerItem.

00:30:12.056 --> 00:30:12.966 A:middle
Pretty straightforward.

00:30:12.966 --> 00:30:14.336 A:middle
We've seen this code
a few times already.

00:30:15.466 --> 00:30:18.936 A:middle
You'll notice here I'm making
use of the URL property

00:30:18.936 --> 00:30:21.696 A:middle
of the proposal that I set when
I created the contentProposal.

00:30:22.916 --> 00:30:25.286 A:middle
Now, if this is literally
all you're going to do here,

00:30:25.846 --> 00:30:27.796 A:middle
you don't need to
implement this.

00:30:27.866 --> 00:30:31.156 A:middle
Because AVKit, if you provide
a URL on your proposal,

00:30:31.716 --> 00:30:33.976 A:middle
AVKit will automatically do this

00:30:33.976 --> 00:30:36.446 A:middle
if you don't implement
the delegate method.

00:30:38.516 --> 00:30:41.806 A:middle
All right, and now for a
demo with content proposals.

00:30:42.086 --> 00:30:42.486 A:middle
Jonathan.

00:30:45.516 --> 00:30:49.086 A:middle
[ Applause ]

00:30:49.586 --> 00:30:50.146 A:middle
&gt;&gt; Hello, again.

00:30:50.996 --> 00:30:51.546 A:middle
All right.

00:30:52.256 --> 00:30:58.346 A:middle
So, let's continue with
AVKitPlayer and add an

00:30:58.346 --> 00:30:59.526 A:middle
Up Next experience

00:30:59.576 --> 00:31:02.326 A:middle
by subclassing
AVContentProposalViewController.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.576 --> 00:31:02.326 A:middle
by subclassing
AVContentProposalViewController.

00:31:03.246 --> 00:31:05.226 A:middle
So the first thing we
need to do is we need

00:31:05.226 --> 00:31:08.596 A:middle
to create a custom subclass of
AVContentProposalViewController.

00:31:09.686 --> 00:31:11.546 A:middle
I have one right here
that I will go ahead

00:31:11.546 --> 00:31:12.936 A:middle
and add to our project.

00:31:20.216 --> 00:31:23.166 A:middle
So, this is our
UpNextContentViewController.

00:31:23.796 --> 00:31:26.926 A:middle
It is a subclass of
AVContentProposalViewController.

00:31:26.926 --> 00:31:30.016 A:middle
And we have some
UI properties here

00:31:30.016 --> 00:31:33.586 A:middle
such as a UIImageView,
a UILabel and others.

00:31:34.496 --> 00:31:37.206 A:middle
We override the
preferredPlayerViewFrame

00:31:37.446 --> 00:31:42.036 A:middle
to return the CGRect that we
want our playerViewController's

00:31:42.036 --> 00:31:45.866 A:middle
view to animate to when the
contentProposal is presented.

00:31:47.716 --> 00:31:48.526 A:middle
Now, the rest

00:31:48.526 --> 00:31:50.526 A:middle
of the viewController
simply handles the layout

00:31:50.526 --> 00:31:52.006 A:middle
of its view and subviews.

00:31:52.356 --> 00:31:54.646 A:middle
So we'll jump back into
our main viewController.

00:31:56.126 --> 00:31:57.916 A:middle
So there's two more
things that we need to do.

00:31:58.526 --> 00:32:01.956 A:middle
First, we need to create an
instance of AVContentProposal


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.526 --> 00:32:01.956 A:middle
First, we need to create an
instance of AVContentProposal

00:32:02.306 --> 00:32:02.956 A:middle
and assign it

00:32:03.006 --> 00:32:06.496 A:middle
to the playerItem's next
content proposal property.

00:32:13.046 --> 00:32:18.066 A:middle
So, here we are creating an
instance of AVContentProposal.

00:32:18.066 --> 00:32:22.936 A:middle
We have a transition time,
a title and a preview image.

00:32:23.736 --> 00:32:26.576 A:middle
We're also setting the
automaticAcceptanceInterval

00:32:26.576 --> 00:32:27.816 A:middle
to be 15 seconds.

00:32:28.726 --> 00:32:32.206 A:middle
In addition, we set the
URL and the metadata

00:32:32.206 --> 00:32:36.006 A:middle
on this content proposal that
corresponds to the next item

00:32:36.006 --> 00:32:39.246 A:middle
that will be played if the user
chooses to accept this proposal.

00:32:40.536 --> 00:32:44.406 A:middle
Finally, we set the
contentProposal we just created

00:32:44.546 --> 00:32:49.576 A:middle
as the next contentProposal
property on our AVPlayerItem.

00:32:50.456 --> 00:32:52.866 A:middle
So the next thing we need to
do, and the last thing we need

00:32:52.866 --> 00:32:55.666 A:middle
to do, is implement two
playerVIewController

00:32:55.666 --> 00:32:56.556 A:middle
delegate methods.

00:32:56.996 --> 00:33:00.626 A:middle
You can see here that we set the
playerViewController delegate


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:56.996 --> 00:33:00.626 A:middle
You can see here that we set the
playerViewController delegate

00:33:00.626 --> 00:33:01.136 A:middle
to Self.

00:33:01.246 --> 00:33:04.336 A:middle
And the two methods that we need

00:33:04.336 --> 00:33:08.126 A:middle
to implement are
shouldPresentProposal

00:33:08.796 --> 00:33:10.976 A:middle
and didAccept.

00:33:11.996 --> 00:33:15.766 A:middle
So in shouldPresentProposal
we create an instance

00:33:15.766 --> 00:33:18.746 A:middle
of our custom subclass of
AVContentProposalViewController

00:33:19.606 --> 00:33:22.516 A:middle
and we assign that as the
playerViewController's

00:33:22.756 --> 00:33:24.196 A:middle
contentProposalViewController.

00:33:25.696 --> 00:33:27.826 A:middle
In addition we return
true to indicate

00:33:27.826 --> 00:33:29.946 A:middle
that the contentProposal
should be presented.

00:33:30.316 --> 00:33:34.166 A:middle
And finally, in didAccept,

00:33:34.626 --> 00:33:36.746 A:middle
we need to handle
transitioning our player

00:33:36.746 --> 00:33:37.876 A:middle
to the next playerItem.

00:33:38.756 --> 00:33:44.136 A:middle
So, to do this, we get the
URL from the contentProposal.

00:33:45.156 --> 00:33:47.516 A:middle
We create an AVPlayerItem
from that URL.

00:33:47.586 --> 00:33:51.456 A:middle
And then we simply replace the
current item on our playerItem.

00:33:51.836 --> 00:33:53.306 A:middle
And we're done.

00:33:54.256 --> 00:33:56.386 A:middle
So let's build and run
and see what happens.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:03.136 --> 00:34:06.686 A:middle
So I'll go ahead and skip closer
to the end of the content.

00:34:08.516 --> 00:34:14.545 A:middle
[ Music ]

00:34:15.045 --> 00:34:17.596 A:middle
And here is our contentProposal.

00:34:17.596 --> 00:34:20.306 A:middle
As you can see, the metadata
that we specified is here.

00:34:20.306 --> 00:34:23.216 A:middle
The preview image as
well as the title.

00:34:23.216 --> 00:34:27.676 A:middle
And if I select Play
Next, we would transition

00:34:27.676 --> 00:34:28.545 A:middle
to our next playerItem.

00:34:28.545 --> 00:34:34.706 A:middle
So I think if you
have implemented this

00:34:34.706 --> 00:34:37.876 A:middle
on tvOS 9 you'll be very happy
with this API and you will find

00:34:37.876 --> 00:34:39.076 A:middle
that it's much easier to use.

00:34:40.136 --> 00:34:41.856 A:middle
I'd like to invite
Dan back up to talk

00:34:41.856 --> 00:34:44.876 A:middle
about some best practices
of the AVKit.

00:34:45.516 --> 00:34:52.156 A:middle
[ Applause ]

00:34:52.656 --> 00:34:54.826 A:middle
&gt;&gt; Okay. Best practices.

00:34:56.406 --> 00:35:00.236 A:middle
I'm going to talk
about a few things.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:56.406 --> 00:35:00.236 A:middle
I'm going to talk
about a few things.

00:35:00.496 --> 00:35:02.226 A:middle
Things to do and
things to avoid doing.

00:35:04.536 --> 00:35:08.216 A:middle
First, some things that
we recommend that you do.

00:35:09.406 --> 00:35:14.006 A:middle
Once again, present or present
view controler will handle

00:35:14.006 --> 00:35:15.806 A:middle
zooming automatically
from an inline view.

00:35:15.806 --> 00:35:18.146 A:middle
So there's no reason to
implement your own animation.

00:35:19.876 --> 00:35:23.166 A:middle
Second, remember Playback
is only interactive

00:35:23.166 --> 00:35:24.016 A:middle
when full screen.

00:35:25.626 --> 00:35:28.056 A:middle
Third, use the new
content proposal API.

00:35:28.786 --> 00:35:32.156 A:middle
Some of you wrote it
the hard way before.

00:35:32.236 --> 00:35:34.766 A:middle
And we encourage you to switch
over to doing it the new way.

00:35:34.766 --> 00:35:37.146 A:middle
I think you'll find your
code is a lot simpler.

00:35:37.146 --> 00:35:38.736 A:middle
It's easy to understand
the flow.

00:35:38.736 --> 00:35:42.466 A:middle
And you may avoid some
bugs and other things

00:35:42.466 --> 00:35:43.566 A:middle
that you may have
had trying to get it

00:35:43.566 --> 00:35:44.936 A:middle
to work just perfectly before.

00:35:48.196 --> 00:35:53.226 A:middle
And observe the error property
of the player in playerItem.

00:35:53.636 --> 00:35:55.146 A:middle
This is how you find
out about errors

00:35:55.146 --> 00:35:56.286 A:middle
that occur during playback.

00:35:56.896 --> 00:36:01.076 A:middle
And I'm going to talk about one
particular error in a minute


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:56.896 --> 00:36:01.076 A:middle
And I'm going to talk about one
particular error in a minute

00:36:01.076 --> 00:36:01.716 A:middle
that you should handle.

00:36:01.716 --> 00:36:03.616 A:middle
But you should watch for
any errors that occur

00:36:03.786 --> 00:36:08.856 A:middle
and respond appropriately
to the user.

00:36:09.326 --> 00:36:09.706 A:middle
All right.

00:36:09.706 --> 00:36:10.856 A:middle
Now a few things to avoid.

00:36:11.836 --> 00:36:14.186 A:middle
Avoid toggling
showsPlaybackControls.

00:36:15.376 --> 00:36:17.936 A:middle
This property is not
for temporarily showing

00:36:17.936 --> 00:36:19.286 A:middle
or hiding the controls.

00:36:19.286 --> 00:36:22.226 A:middle
This is for indicating
your permanent intent.

00:36:22.626 --> 00:36:24.346 A:middle
So when you set this to false,

00:36:24.346 --> 00:36:28.376 A:middle
you're saying we don't want
the playback controls at all.

00:36:28.906 --> 00:36:30.536 A:middle
So if you toggle
this back and forth,

00:36:30.536 --> 00:36:31.906 A:middle
what you're doing is
you're telling AVKit

00:36:31.946 --> 00:36:34.196 A:middle
to destroy all the
controls and recreate them.

00:36:34.196 --> 00:36:34.736 A:middle
Destroy them.

00:36:34.736 --> 00:36:35.366 A:middle
Recreate them.

00:36:35.696 --> 00:36:38.326 A:middle
And it's not very
efficient, as you can imagine.

00:36:39.556 --> 00:36:42.616 A:middle
Second, some people hate this,

00:36:42.616 --> 00:36:45.406 A:middle
but avoid adding supplemental
gestures to playback

00:36:45.406 --> 00:36:47.056 A:middle
because it's going
to confuse users.

00:36:47.116 --> 00:36:48.686 A:middle
People will not discover them.

00:36:49.646 --> 00:36:53.086 A:middle
And by the same token, do not
overload the Select button

00:36:53.486 --> 00:36:54.936 A:middle
or touch service gestures.

00:36:55.586 --> 00:36:57.386 A:middle
Not only will that
confuse users,

00:36:57.386 --> 00:37:02.296 A:middle
but you'll likely
break in the future.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:57.386 --> 00:37:02.296 A:middle
but you'll likely
break in the future.

00:37:03.576 --> 00:37:06.136 A:middle
Now, some more general tips.

00:37:06.136 --> 00:37:08.926 A:middle
Replace your asset if
you see this error:

00:37:08.926 --> 00:37:11.266 A:middle
AVErrorMediaServicesWereReset.

00:37:12.286 --> 00:37:14.156 A:middle
If you don't respond to this

00:37:14.156 --> 00:37:16.846 A:middle
and the media services
are reset during playback,

00:37:18.226 --> 00:37:19.566 A:middle
video playback will fail.

00:37:19.566 --> 00:37:21.716 A:middle
And the user won't be able

00:37:21.716 --> 00:37:24.126 A:middle
to do anything except,
hopefully, get out.

00:37:24.546 --> 00:37:25.766 A:middle
So what they'll have
to do is get out,

00:37:25.766 --> 00:37:27.256 A:middle
go back to your menu
and go back in.

00:37:27.936 --> 00:37:29.056 A:middle
If you catch this error

00:37:29.056 --> 00:37:32.206 A:middle
and automatically replace
your asset, your player item

00:37:32.206 --> 00:37:34.986 A:middle
and your player, basically
your AV foundation objects,

00:37:35.486 --> 00:37:38.386 A:middle
then you can more
seamlessly handle this case.

00:37:38.386 --> 00:37:40.686 A:middle
And the user will barely even
know that anything happened.

00:37:42.276 --> 00:37:44.796 A:middle
Now, some other sessions
with best practices

00:37:44.796 --> 00:37:47.136 A:middle
for playback include this year,

00:37:47.136 --> 00:37:49.016 A:middle
Advances in AVFoundation
Playback.

00:37:49.486 --> 00:37:50.486 A:middle
It was earlier this week.

00:37:50.866 --> 00:37:53.336 A:middle
You can catch the
video in the WWDC app.

00:37:54.456 --> 00:37:56.926 A:middle
And two years ago we had
an excellent session,

00:37:57.376 --> 00:38:00.016 A:middle
Mastering Modern Media
Playback, which includes tips


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:57.376 --> 00:38:00.016 A:middle
Mastering Modern Media
Playback, which includes tips

00:38:00.016 --> 00:38:02.916 A:middle
for both AVKit and
AVFoundation and getting them

00:38:02.916 --> 00:38:03.866 A:middle
to work well together.

00:38:04.446 --> 00:38:11.506 A:middle
So in summary, AVKit provides
standard playback controls

00:38:11.506 --> 00:38:14.926 A:middle
and behaviors, support for
remotes, game controllers

00:38:14.926 --> 00:38:20.336 A:middle
and Siri, full access to the
media stack, powerful new APIs

00:38:20.736 --> 00:38:23.716 A:middle
and it's easy to get started.

00:38:23.716 --> 00:38:26.756 A:middle
Be sure to check out the sample
code for more in-depth examples.

00:38:27.236 --> 00:38:28.796 A:middle
And we're excited
to see your app.

00:38:29.726 --> 00:38:32.166 A:middle
So, for more information,
go to the URL on the screen.

00:38:32.166 --> 00:38:35.326 A:middle
We'll have links to the sample
code and other resources.

00:38:37.266 --> 00:38:39.246 A:middle
And check out some of
the related sessions.

00:38:39.246 --> 00:38:43.606 A:middle
We also have on here the HTTP
Live Streaming session also

00:38:43.606 --> 00:38:44.446 A:middle
earlier this week.

00:38:44.776 --> 00:38:47.256 A:middle
And a pair of sessions
on using TVMLKit,

00:38:47.256 --> 00:38:51.386 A:middle
which is an alternative approach
to using AVKit directly.

00:38:52.186 --> 00:38:54.106 A:middle
So, thank you.

00:38:55.508 --> 00:38:57.508 A:middle
[ Applause ]

