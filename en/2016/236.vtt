WEBVTT

00:00:07.516 --> 00:00:17.516 A:middle
[ Music ]

00:00:18.516 --> 00:00:22.546 A:middle
[ Applause ]

00:00:23.046 --> 00:00:25.226 A:middle
&gt;&gt; Wow. Good afternoon,
everybody.

00:00:25.226 --> 00:00:26.706 A:middle
Good afternoon and welcome.

00:00:28.476 --> 00:00:30.546 A:middle
You want to create great apps.

00:00:31.026 --> 00:00:34.496 A:middle
And having a great layout is
part of making a great app.

00:00:34.956 --> 00:00:38.046 A:middle
Auto Layout makes it easier
for you to build your layouts,

00:00:38.426 --> 00:00:40.826 A:middle
targeting different
devices, orientations,

00:00:41.116 --> 00:00:44.016 A:middle
adaptations as well as layout
for different languages.

00:00:44.656 --> 00:00:47.296 A:middle
Today we are going to talk
about what's new in Auto Layout,

00:00:47.936 --> 00:00:50.236 A:middle
and this session is broken
up into three subparts.

00:00:50.666 --> 00:00:51.826 A:middle
First is going to be with me.

00:00:52.436 --> 00:00:53.746 A:middle
My name is Jason Yao.

00:00:53.746 --> 00:00:55.236 A:middle
I'm an Interface
Builder Engineer.

00:00:55.496 --> 00:00:57.596 A:middle
I'm going to tell you
what's an Interface Builder.

00:00:58.476 --> 00:01:01.586 A:middle
Second, Jesse Donaldson from
AppKit will tell you what's new

00:00:58.476 --> 00:01:01.586 A:middle
Second, Jesse Donaldson from
AppKit will tell you what's new

00:01:01.586 --> 00:01:04.605 A:middle
in Cocoa, and then
third, Marian Goldeen

00:01:04.605 --> 00:01:07.916 A:middle
from UIKit will tell you
new debugging techniques.

00:01:08.266 --> 00:01:10.336 A:middle
With these tools and techniques,

00:01:10.546 --> 00:01:12.706 A:middle
you will save yourself
developer time and effort

00:01:13.336 --> 00:01:14.756 A:middle
when you apply them
to your workflow.

00:01:14.756 --> 00:01:15.966 A:middle
So, let's get started shall we?

00:01:17.576 --> 00:01:20.916 A:middle
The first topic I want to
talk about is something

00:01:20.916 --> 00:01:23.516 A:middle
that I'm calling incrementally
adopting Auto Layout,

00:01:24.316 --> 00:01:25.766 A:middle
incrementally adopting
Auto Layout.

00:01:26.146 --> 00:01:27.236 A:middle
What do I mean by this?

00:01:28.276 --> 00:01:30.286 A:middle
Well, when you are laying
out your views inside

00:01:30.286 --> 00:01:32.296 A:middle
of Interface Builder,
you do not need

00:01:32.296 --> 00:01:33.576 A:middle
to constrain everything at once.

00:01:33.736 --> 00:01:37.176 A:middle
You can do it incrementally
to save yourself time,

00:01:37.536 --> 00:01:41.106 A:middle
simplify your setups, as well as
give yourself more flexibility.

00:01:41.686 --> 00:01:44.976 A:middle
But before I show you how to do
this, let's first take a look

00:01:44.976 --> 00:01:46.296 A:middle
at an example to
set the backdrop.

00:01:47.626 --> 00:01:50.696 A:middle
So it all starts by taking
a view and dragging it

00:01:50.696 --> 00:01:52.066 A:middle
onto Interface Builder Canvas.

00:01:52.576 --> 00:01:54.866 A:middle
You give it a size and position.

00:01:55.466 --> 00:01:56.996 A:middle
You compile it and run.

00:01:57.786 --> 00:02:01.976 A:middle
And you're going to get that
view as sized on the device.

00:01:57.786 --> 00:02:01.976 A:middle
And you're going to get that
view as sized on the device.

00:02:02.716 --> 00:02:06.176 A:middle
Then you go head and rotate
the device, and you realize

00:02:07.586 --> 00:02:10.756 A:middle
that it's fitting the same
size but there is some work

00:02:10.756 --> 00:02:11.516 A:middle
that needs to be done.

00:02:12.046 --> 00:02:14.496 A:middle
So what's going on here?

00:02:14.756 --> 00:02:18.616 A:middle
What's going on is we're
simply pinning this to the top

00:02:18.616 --> 00:02:20.236 A:middle
and to the left with
the width and height.

00:02:20.576 --> 00:02:24.156 A:middle
In fact, what we're doing is
we are implicitly creating

00:02:24.156 --> 00:02:28.286 A:middle
constraints during compile time
so that this view holds the size

00:02:28.526 --> 00:02:30.076 A:middle
in -- with the Auto
Layout Engine.

00:02:31.276 --> 00:02:33.946 A:middle
If you needed more
dynamic resize behavior,

00:02:34.546 --> 00:02:37.306 A:middle
what you would need to do is
go to Interface Builder Canvas

00:02:37.666 --> 00:02:39.046 A:middle
and add your own constraints.

00:02:39.886 --> 00:02:42.666 A:middle
And the question is could there
be a better way of doing this,

00:02:42.826 --> 00:02:44.426 A:middle
perhaps a way without
constraints,

00:02:44.826 --> 00:02:46.456 A:middle
to get simple resize behavior?

00:02:47.486 --> 00:02:48.026 A:middle
There can be.

00:02:48.716 --> 00:02:54.816 A:middle
New to Xcode 8 is the ability in
Auto Layout documents to be able

00:02:54.816 --> 00:02:57.366 A:middle
to specify autoresizing
masks on your views

00:02:57.366 --> 00:02:58.696 A:middle
that do not have constraints.

00:02:59.206 --> 00:03:03.346 A:middle
What that means is that you
can get simple resize behavior

00:02:59.206 --> 00:03:03.346 A:middle
What that means is that you
can get simple resize behavior

00:03:04.246 --> 00:03:07.236 A:middle
by specifying autoresizing
masks.

00:03:07.416 --> 00:03:10.096 A:middle
For those of you who remember
a time before Auto Layout you

00:03:10.096 --> 00:03:10.976 A:middle
might recognize this UI.

00:03:11.516 --> 00:03:15.806 A:middle
[ Applause ]

00:03:16.306 --> 00:03:17.976 A:middle
This is the Springs &amp; Struts UI.

00:03:18.496 --> 00:03:20.296 A:middle
You can pin things
to the edges as well

00:03:20.296 --> 00:03:23.036 A:middle
as decide whether it's going to
be width or height resizable.

00:03:23.916 --> 00:03:26.576 A:middle
And these views are
going to work great next

00:03:26.576 --> 00:03:27.526 A:middle
to your constraint views.

00:03:28.466 --> 00:03:30.066 A:middle
In fact, what we are
going to do is we're going

00:03:30.066 --> 00:03:32.126 A:middle
to take those autoresizing
masks and we are going

00:03:32.126 --> 00:03:33.816 A:middle
to translate them
into constraints.

00:03:34.356 --> 00:03:35.846 A:middle
But we are going
to translate them

00:03:35.846 --> 00:03:37.446 A:middle
into constraints at runtime.

00:03:37.446 --> 00:03:39.516 A:middle
And there is a key
distinction there.

00:03:40.026 --> 00:03:42.896 A:middle
We're generating them at
runtime and not at build time

00:03:43.856 --> 00:03:47.276 A:middle
because it's going to be more
flexible and more transparent

00:03:47.356 --> 00:03:50.006 A:middle
to you, giving you
greater control if you need

00:03:50.006 --> 00:03:54.876 A:middle
to do anything programmatic to
these views, because for those

00:03:54.876 --> 00:03:56.296 A:middle
who are pro-Auto
Layout users out there,

00:03:56.296 --> 00:03:57.666 A:middle
you might recognize this flag.

00:03:58.276 --> 00:03:59.976 A:middle
On the view, we are
simply setting

00:03:59.976 --> 00:04:04.646 A:middle
translatesAutoresizingMask
IntoConstraints equals true.

00:03:59.976 --> 00:04:04.646 A:middle
translatesAutoresizingMask
IntoConstraints equals true.

00:04:04.846 --> 00:04:07.386 A:middle
What about for the views
that you've added constraints

00:04:07.386 --> 00:04:08.616 A:middle
to inside of Interface Builder?

00:04:09.656 --> 00:04:11.056 A:middle
They're going to be
the same as before.

00:04:11.546 --> 00:04:12.256 A:middle
You click on the view.

00:04:12.256 --> 00:04:13.766 A:middle
You are going to see
all of the constraints

00:04:13.766 --> 00:04:14.756 A:middle
that are affecting that view.

00:04:15.646 --> 00:04:19.826 A:middle
Autoresizing masks are
going to be ignored

00:04:19.896 --> 00:04:24.636 A:middle
and translatesAutoresizingMask
for these views will be false.

00:04:25.186 --> 00:04:29.506 A:middle
So, putting all of this together
back to the original problem,

00:04:29.936 --> 00:04:34.056 A:middle
we can incrementally adopt
Auto Layout by first starting

00:04:34.056 --> 00:04:36.836 A:middle
with autoresizing masks to so
the simple resize behavior,

00:04:36.996 --> 00:04:39.906 A:middle
and then add constraints for
the more sophisticated behavior.

00:04:41.236 --> 00:04:43.566 A:middle
And that gives you
greater flexibility.

00:04:44.066 --> 00:04:47.736 A:middle
When you are ready to add
constraints, choose the subtree

00:04:47.866 --> 00:04:49.126 A:middle
that you want to
add constraints to,

00:04:49.626 --> 00:04:52.476 A:middle
start from the parent,
and work your way in.

00:04:53.976 --> 00:04:58.036 A:middle
This allows you to adopt
Auto Layout on your terms

00:04:58.376 --> 00:05:00.166 A:middle
and is great for new
layouts that you are going

00:04:58.376 --> 00:05:00.166 A:middle
and is great for new
layouts that you are going

00:05:00.166 --> 00:05:03.846 A:middle
to be building to get that --
the simple resize behavior,

00:05:03.846 --> 00:05:06.186 A:middle
but it's also great
for documents

00:05:06.186 --> 00:05:08.026 A:middle
where you've been
wanting to layout.

00:05:08.556 --> 00:05:10.386 A:middle
Well, now you can
while preserving your

00:05:10.386 --> 00:05:11.206 A:middle
existing behavior.

00:05:11.776 --> 00:05:15.296 A:middle
I'd like to show you a
demo of this in action.

00:05:16.046 --> 00:05:17.976 A:middle
So, let's take a
look at what this is.

00:05:29.426 --> 00:05:32.186 A:middle
So, I've got Xcode 8 open
with Interface Builder.

00:05:32.186 --> 00:05:33.516 A:middle
I am going to build
a weather app.

00:05:33.796 --> 00:05:37.256 A:middle
I've got my views
and I've dragged them

00:05:37.256 --> 00:05:38.276 A:middle
into the View Controller,

00:05:38.276 --> 00:05:40.856 A:middle
and they are fitting
to an iPad portrait.

00:05:41.616 --> 00:05:43.546 A:middle
And so, let's take a look
at what it's going to look

00:05:43.546 --> 00:05:47.406 A:middle
like in landscape by going to
the new device configuration bar

00:05:47.706 --> 00:05:48.646 A:middle
and switching it to landscape.

00:05:49.916 --> 00:05:51.696 A:middle
Clicking over here, you
can see there's work to do.

00:05:52.316 --> 00:05:56.726 A:middle
So, let's go ahead and
start with the top banner.

00:05:56.726 --> 00:05:59.476 A:middle
And we want this to be
stretched across the superview.

00:06:00.716 --> 00:06:04.066 A:middle
Instead of adding constraints,
I haven't added any constraints

00:06:04.066 --> 00:06:05.986 A:middle
to this yet, I can go
into the size inspector.

00:06:05.986 --> 00:06:11.256 A:middle
And of course we've got the
Autoresizing Mask Inspector

00:06:11.256 --> 00:06:14.086 A:middle
over here, and all I need to
do is make it width resizable

00:06:14.086 --> 00:06:15.626 A:middle
and pin to the other edge.

00:06:16.126 --> 00:06:19.176 A:middle
Now, I want to work
on the children.

00:06:19.576 --> 00:06:23.646 A:middle
I'm going to go to the moon,
and by default this is pinned

00:06:23.646 --> 00:06:25.816 A:middle
to the top and to the
left, the way I want it.

00:06:25.816 --> 00:06:29.656 A:middle
As for the cloud, I'm going to
pin it to the right and get rid

00:06:29.656 --> 00:06:31.316 A:middle
of the pin for -- to the left.

00:06:31.416 --> 00:06:35.006 A:middle
And then for the label, I want
this to proportionally resize

00:06:35.056 --> 00:06:36.676 A:middle
and proportionally precision.

00:06:36.976 --> 00:06:38.426 A:middle
So, I'll get rid of
the pin to the left,

00:06:38.876 --> 00:06:41.146 A:middle
make it width resizable, and
you can see there is a little

00:06:41.146 --> 00:06:43.236 A:middle
animation showing me the
behavior it's going to be.

00:06:43.766 --> 00:06:45.796 A:middle
And then we'll just pin
it to the top and bottom

00:06:45.796 --> 00:06:46.976 A:middle
and make it height
resizable as well.

00:06:48.046 --> 00:06:51.296 A:middle
Now when we take a look at
this thing, we can switch it

00:06:51.296 --> 00:06:53.176 A:middle
to landscape, and it's
looking pretty good.

00:06:53.686 --> 00:06:58.096 A:middle
Let's try two-thirds
split screen.

00:06:58.276 --> 00:07:00.266 A:middle
It's almost there, but
my label is truncated.

00:06:58.276 --> 00:07:00.266 A:middle
It's almost there, but
my label is truncated.

00:07:00.546 --> 00:07:01.306 A:middle
What's going on there?

00:07:02.226 --> 00:07:04.056 A:middle
What's going on is
as you take a look

00:07:04.056 --> 00:07:05.546 A:middle
at the label it's
doing the right thing.

00:07:05.546 --> 00:07:06.926 A:middle
It's using autoresizing mask,

00:07:06.926 --> 00:07:09.766 A:middle
and it's proportionally
resizing based on its superview.

00:07:10.836 --> 00:07:12.806 A:middle
Autoresizing masks do not take

00:07:12.806 --> 00:07:16.246 A:middle
into account the content
size of your view.

00:07:17.256 --> 00:07:19.356 A:middle
I can fix this up by
using constraints,

00:07:20.056 --> 00:07:24.176 A:middle
but for this particular case UI
label, I do have another trick.

00:07:24.356 --> 00:07:26.616 A:middle
I'm just going to go into
the Attributes Inspector

00:07:27.076 --> 00:07:29.376 A:middle
and then switch it
from a fixed font size

00:07:29.376 --> 00:07:30.566 A:middle
over to a minimum font size.

00:07:30.836 --> 00:07:33.646 A:middle
That way it's fitting into
the frame that it's given.

00:07:33.646 --> 00:07:37.226 A:middle
So, now when we go back
to landscape full screen,

00:07:37.226 --> 00:07:39.716 A:middle
it's looking pretty good,
as well as portrait.

00:07:40.736 --> 00:07:41.686 A:middle
Next, we are going to deal

00:07:41.686 --> 00:07:43.606 A:middle
with the temperature
control in the middle.

00:07:44.646 --> 00:07:46.986 A:middle
I want a more sophisticated
alignment for this.

00:07:47.036 --> 00:07:48.266 A:middle
So, I'm going to
use constraints.

00:07:49.156 --> 00:07:51.046 A:middle
What I could do is I'm
going to hold down --

00:07:51.046 --> 00:07:53.486 A:middle
I want to constrain the
75 to the superview.

00:07:53.486 --> 00:07:55.086 A:middle
So, I'm going to hold down
control on the keyboard,

00:07:55.506 --> 00:07:57.856 A:middle
drag out a connection
to the superview.

00:07:58.186 --> 00:08:02.656 A:middle
It brings up the constraint
menu where I can hold down shift

00:07:58.186 --> 00:08:02.656 A:middle
It brings up the constraint
menu where I can hold down shift

00:08:02.656 --> 00:08:04.036 A:middle
and add multiple
constraints at once.

00:08:04.096 --> 00:08:05.986 A:middle
So, I want to center it
horizontally and vertically

00:08:05.986 --> 00:08:06.886 A:middle
and hit add constraints.

00:08:07.936 --> 00:08:09.866 A:middle
Similarly, I want
to do the same.

00:08:10.776 --> 00:08:13.066 A:middle
Control drag to the
sunny, hold down shift,

00:08:13.226 --> 00:08:15.916 A:middle
and we want to horizontally
space this as well

00:08:15.916 --> 00:08:17.126 A:middle
as add a baseline constraint.

00:08:18.476 --> 00:08:19.636 A:middle
And then do the same to the sun.

00:08:19.876 --> 00:08:23.686 A:middle
Control drag, hold down
shift, horizontal spacing,

00:08:23.926 --> 00:08:26.746 A:middle
and this time center vertically.

00:08:27.276 --> 00:08:29.466 A:middle
Now, my views have the
constraints that they need.

00:08:29.466 --> 00:08:30.966 A:middle
And we just need to
update the frames

00:08:31.376 --> 00:08:32.395 A:middle
so that they are in position.

00:08:32.696 --> 00:08:35.986 A:middle
And so we are going to go to the
Resolve Auto Layout Issues menu,

00:08:36.616 --> 00:08:40.736 A:middle
for the selected views
and hit update frames.

00:08:40.916 --> 00:08:43.265 A:middle
Next, I want to make the
temperature control even larger.

00:08:43.756 --> 00:08:45.016 A:middle
So, I'm going to click on that

00:08:45.616 --> 00:08:47.326 A:middle
and just increase
this font size.

00:08:47.326 --> 00:08:50.226 A:middle
And you might notice that
when I increase the font size,

00:08:51.036 --> 00:08:53.426 A:middle
because everything is already
in place, Auto Layout is going

00:08:53.426 --> 00:08:54.996 A:middle
to automatically
update my frames for me.

00:08:55.896 --> 00:08:59.686 A:middle
We do more automatic update
frames for you in Xcode 8.

00:09:00.856 --> 00:09:04.996 A:middle
So, next, we want to
have a nice back drop,

00:09:05.906 --> 00:09:07.756 A:middle
and this is a sunny day.

00:09:07.916 --> 00:09:10.326 A:middle
So, we're going to go ahead
and add an image view.

00:09:10.836 --> 00:09:14.326 A:middle
From the object library, I'm
going to go ahead and drag

00:09:14.326 --> 00:09:16.836 A:middle
out that image view,
size it to my superview,

00:09:24.276 --> 00:09:30.626 A:middle
and then set as image, as
well as choose its fill mode.

00:09:30.626 --> 00:09:32.756 A:middle
In this case, we probably want
something like an aspect fill.

00:09:34.016 --> 00:09:35.036 A:middle
Now, we want to make sure

00:09:35.036 --> 00:09:36.576 A:middle
that this thing is
sizing to its superview.

00:09:36.746 --> 00:09:38.436 A:middle
And we could add
constraints, four of them,

00:09:38.636 --> 00:09:40.156 A:middle
and pin them to each side.

00:09:40.606 --> 00:09:42.886 A:middle
But for this simple resize
behavior, we don't even need

00:09:42.886 --> 00:09:47.376 A:middle
to add constraints because we
could go into the Size Inspector

00:09:47.376 --> 00:09:50.566 A:middle
and just use autoresizing
masks and pin it to all edges,

00:09:50.566 --> 00:09:52.056 A:middle
making it width and
height resizable.

00:09:54.086 --> 00:09:57.006 A:middle
Last but not least, let's go
ahead and put this to the top

00:09:57.006 --> 00:09:57.846 A:middle
of my document outline.

00:09:57.846 --> 00:09:58.486 A:middle
So, it's in the back.

00:09:58.486 --> 00:10:02.386 A:middle
And then we're going to clear
the background on my banner

00:09:58.486 --> 00:10:02.386 A:middle
And then we're going to clear
the background on my banner

00:10:02.516 --> 00:10:03.916 A:middle
because this is a
visual effect for you,

00:10:03.916 --> 00:10:05.926 A:middle
and we now can see
the nice translucency.

00:10:06.656 --> 00:10:07.536 A:middle
And then we'll test it out.

00:10:08.046 --> 00:10:10.826 A:middle
So, it's looking good --
looking good right now.

00:10:12.076 --> 00:10:15.606 A:middle
It's looking good in landscape,
two-thirds split view --

00:10:16.796 --> 00:10:18.326 A:middle
two-thirds split
view and portrait,

00:10:19.636 --> 00:10:21.376 A:middle
as well as iPhone 6s Plus.

00:10:22.516 --> 00:10:25.976 A:middle
And so that is how you can
incrementally adopt Auto Layout.

00:10:26.516 --> 00:10:32.856 A:middle
[ Applause ]

00:10:33.356 --> 00:10:34.466 A:middle
The next topic I want to talk

00:10:34.466 --> 00:10:36.016 A:middle
about is a little
more advanced topic.

00:10:36.576 --> 00:10:39.506 A:middle
And it is about mixing design
and runtime constraints.

00:10:40.286 --> 00:10:43.216 A:middle
There are situations where
you could run into this type

00:10:43.216 --> 00:10:44.886 A:middle
of thing where you are
laying out your views inside

00:10:44.886 --> 00:10:47.866 A:middle
of Interface Builder and
you're just adding constraints,

00:10:47.936 --> 00:10:50.316 A:middle
but you do not know all the
constraints you're going to add

00:10:50.576 --> 00:10:52.956 A:middle
to views until runtime,
maybe because it's based

00:10:52.956 --> 00:10:56.396 A:middle
on information like time of day
or like data that you're loading

00:10:56.396 --> 00:10:57.976 A:middle
that only the run
time app knows.

00:10:58.936 --> 00:11:01.926 A:middle
There are three tools and three
examples I want to walk you

00:10:58.936 --> 00:11:01.926 A:middle
There are three tools and three
examples I want to walk you

00:11:01.926 --> 00:11:04.036 A:middle
through for dealing with
these type of situations.

00:11:05.436 --> 00:11:08.636 A:middle
The first is the use of
placeholder constraints.

00:11:09.746 --> 00:11:12.766 A:middle
In this situation, I've got an
image, and I want to go ahead

00:11:12.766 --> 00:11:17.896 A:middle
and center it in my device both
horizontally and vertically,

00:11:17.896 --> 00:11:20.896 A:middle
also a little bit inside
form the leading margin.

00:11:21.246 --> 00:11:23.566 A:middle
I also want the image to
maintain its aspect ratio.

00:11:24.296 --> 00:11:26.316 A:middle
However, I don't know what
that final image is going

00:11:26.316 --> 00:11:28.596 A:middle
to be, not until runtime.

00:11:29.126 --> 00:11:33.246 A:middle
And so, in order to assimilate
the approximate size and layout

00:11:33.296 --> 00:11:35.766 A:middle
so I can see the Interface
Builder, I can go ahead

00:11:35.766 --> 00:11:37.526 A:middle
and add a 4 by 3 aspect ratio,

00:11:37.526 --> 00:11:41.486 A:middle
approximately what I think
it might be, and then mark it

00:11:41.486 --> 00:11:42.556 A:middle
as a place order constraint.

00:11:43.076 --> 00:11:45.276 A:middle
Therefore, it would be
removed at build time.

00:11:46.756 --> 00:11:49.416 A:middle
When I actually get the image
that I'm going to be setting

00:11:49.416 --> 00:11:51.076 A:middle
in runtime, I'll go ahead

00:11:51.626 --> 00:11:56.076 A:middle
and create the real aspect ratio
constraint and apply it in.

00:11:56.256 --> 00:11:59.746 A:middle
For the second example,
pretend you are creating a

00:11:59.746 --> 00:12:00.416 A:middle
custom control.

00:11:59.746 --> 00:12:00.416 A:middle
custom control.

00:12:00.976 --> 00:12:04.156 A:middle
Your custom control is going
to drive off of something

00:12:04.156 --> 00:12:06.116 A:middle
like US -- UIView or NSview.

00:12:06.226 --> 00:12:08.706 A:middle
It's going to provide its own
drawing, and it also is going

00:12:08.706 --> 00:12:09.996 A:middle
to manage its own content.

00:12:10.266 --> 00:12:11.866 A:middle
It may want to even
provide its own size.

00:12:12.606 --> 00:12:15.516 A:middle
It could provide that size
to the Auto Layout system

00:12:15.866 --> 00:12:20.656 A:middle
by specifying its
intrinsic content size.

00:12:20.866 --> 00:12:22.846 A:middle
Interface Builder is
not executing that code,

00:12:23.006 --> 00:12:26.056 A:middle
and so it doesn't know what your
intrinsic content size is going

00:12:26.056 --> 00:12:28.906 A:middle
to be, but you can simulate
the approximate size of it

00:12:28.946 --> 00:12:31.276 A:middle
by giving it reasonable
values using the intrinsic

00:12:31.276 --> 00:12:32.106 A:middle
size placeholder.

00:12:32.736 --> 00:12:34.336 A:middle
Therefore, you could
also see how it is going

00:12:34.336 --> 00:12:35.486 A:middle
to look like in your layout.

00:12:36.656 --> 00:12:39.026 A:middle
Just remember for your custom
controls, if you're going

00:12:39.026 --> 00:12:40.166 A:middle
to do this, that you do need

00:12:40.616 --> 00:12:42.926 A:middle
to provide its real
intrinsic content size,

00:12:42.926 --> 00:12:43.676 A:middle
and you can do this

00:12:43.976 --> 00:12:46.706 A:middle
by overriding the intrinsic
content size property

00:12:46.706 --> 00:12:47.566 A:middle
on your custom control.

00:12:49.376 --> 00:12:52.306 A:middle
The final example is the
one that's new to Xcode,

00:12:53.206 --> 00:12:54.106 A:middle
and I'm leaving it for last

00:12:54.146 --> 00:12:57.316 A:middle
because it should also be the
option of your last resort,

00:12:57.636 --> 00:12:59.216 A:middle
when you have exhausted
your possibilities

00:12:59.216 --> 00:13:02.866 A:middle
for both placeholder
constraints and design

00:12:59.216 --> 00:13:02.866 A:middle
for both placeholder
constraints and design

00:13:02.866 --> 00:13:04.926 A:middle
and intrinsic content
size placeholders.

00:13:05.266 --> 00:13:07.876 A:middle
And so, we're giving
you the ability

00:13:08.146 --> 00:13:12.436 A:middle
to tune the ambiguity warning
levels on a per view basis.

00:13:13.226 --> 00:13:16.536 A:middle
What that means is that for
this view I want to go ahead

00:13:16.536 --> 00:13:18.556 A:middle
and center it on
screen, vertically,

00:13:18.896 --> 00:13:19.736 A:middle
but that's all I know.

00:13:19.896 --> 00:13:22.776 A:middle
I don't know what horizontal
position it's going to be

00:13:22.776 --> 00:13:23.896 A:middle
or what size it's going to be.

00:13:24.056 --> 00:13:27.336 A:middle
In fact Interface Builder
is drawing this thing is red

00:13:27.336 --> 00:13:31.106 A:middle
because it's warning me that it
doesn't have enough constraints

00:13:31.486 --> 00:13:32.866 A:middle
to be able to position it.

00:13:33.416 --> 00:13:34.286 A:middle
It's ambiguous.

00:13:35.306 --> 00:13:37.786 A:middle
I know that I'm going to be
adding this constraints later

00:13:37.786 --> 00:13:40.616 A:middle
on at runtime when I have all
the information that I need

00:13:40.976 --> 00:13:45.086 A:middle
so I can go ahead and remove
the clutter from the --

00:13:45.086 --> 00:13:48.236 A:middle
from my work space by going
to the ambiguity setting

00:13:48.776 --> 00:13:52.756 A:middle
and switching it from verifying
always to either verifying

00:13:52.756 --> 00:13:56.486 A:middle
for position or never verifying
at all, and I'm promising

00:13:56.486 --> 00:13:59.216 A:middle
to myself I will add those
constraints later on so

00:13:59.216 --> 00:14:04.166 A:middle
that the view holds its size
before the first layout pass.

00:13:59.216 --> 00:14:04.166 A:middle
that the view holds its size
before the first layout pass.

00:14:04.706 --> 00:14:06.446 A:middle
These are the tools
for being able to work

00:14:06.446 --> 00:14:07.726 A:middle
with designer runtime
constraints

00:14:07.726 --> 00:14:09.386 A:middle
when you've exhausted
the possibilities

00:14:09.776 --> 00:14:12.326 A:middle
of constraining everything you
can inside of Interface Builder.

00:14:12.386 --> 00:14:16.516 A:middle
Well, what we've seen is how to
incrementally adopt out a layout

00:14:17.116 --> 00:14:19.086 A:middle
and how to play well with
designer runtime constraints,

00:14:19.086 --> 00:14:21.096 A:middle
and we're ready for the
second part of this session.

00:14:21.396 --> 00:14:24.216 A:middle
I'd like to invite up my
colleague Jesse Donaldson

00:14:24.486 --> 00:14:26.166 A:middle
to talk about what's
new in Cocoa.

00:14:26.166 --> 00:14:26.976 A:middle
Over to you, Jesse.

00:14:27.516 --> 00:14:32.500 A:middle
[ Applause ]

00:14:38.696 --> 00:14:39.296 A:middle
&gt;&gt; Hi, everyone.

00:14:39.496 --> 00:14:41.546 A:middle
Today I'm going to tell
you about NSGridView,

00:14:41.546 --> 00:14:45.076 A:middle
a new layout container that
were providing on macOS.

00:14:48.176 --> 00:14:51.766 A:middle
So maintenance on constraints
can be complicated even

00:14:51.766 --> 00:14:54.186 A:middle
when you have something
as simple as this set

00:14:54.186 --> 00:14:57.026 A:middle
of checkboxes, and we've
built in a stack view

00:14:57.026 --> 00:14:58.606 A:middle
to make it easier to
build things like this.

00:14:58.606 --> 00:14:59.946 A:middle
And it's great anytime you need

00:14:59.946 --> 00:15:02.636 A:middle
to spread some items
across a space.

00:14:59.946 --> 00:15:02.636 A:middle
to spread some items
across a space.

00:15:03.286 --> 00:15:06.976 A:middle
But there's some kinds of layout
that can still be difficult

00:15:06.976 --> 00:15:08.886 A:middle
to achieve like this,
for example.

00:15:08.886 --> 00:15:12.276 A:middle
You can build this with stacks,
but NSStackView isn't going

00:15:12.276 --> 00:15:13.626 A:middle
to help you align the content

00:15:13.626 --> 00:15:15.756 A:middle
across both the rows
and the columns.

00:15:16.356 --> 00:15:18.116 A:middle
So that's why we've
built in NSGridView.

00:15:18.206 --> 00:15:20.066 A:middle
It makes it easy
to put the content

00:15:20.066 --> 00:15:22.916 A:middle
into an explicitly defined
grid, and it will take care

00:15:22.916 --> 00:15:25.006 A:middle
of alignment for you
across both axes.

00:15:25.916 --> 00:15:27.086 A:middle
So let's have a closer look.

00:15:28.546 --> 00:15:30.806 A:middle
I took this UI from our
voiceover preferences,

00:15:30.806 --> 00:15:32.466 A:middle
and I've added these
purple lines just

00:15:32.466 --> 00:15:34.826 A:middle
to help you see how it
can fit into a grid.

00:15:35.726 --> 00:15:39.416 A:middle
NSGridView uses a couple of
helper classes, NSGridRow

00:15:39.416 --> 00:15:42.036 A:middle
and NSGridColumn, to
represent the rows and columns,

00:15:42.506 --> 00:15:45.686 A:middle
and by default they're sized
automatically to their content.

00:15:46.436 --> 00:15:50.346 A:middle
You can also specify an explicit
size, if that's what you need.

00:15:51.486 --> 00:15:53.896 A:middle
These also let you add
some additional padding

00:15:53.896 --> 00:15:56.196 A:middle
if you need some extra space
here and there in your grid,

00:15:56.366 --> 00:15:57.566 A:middle
and if you have some UI

00:15:57.566 --> 00:16:00.396 A:middle
that doesn't apply the
current hardware configuration,

00:15:57.566 --> 00:16:00.396 A:middle
that doesn't apply the
current hardware configuration,

00:16:00.886 --> 00:16:03.156 A:middle
then they can be
dynamically shown and hidden.

00:16:04.956 --> 00:16:08.776 A:middle
NSGridView uses a
separate class, NSGridCell,

00:16:09.126 --> 00:16:10.816 A:middle
to represent the
individual cells,

00:16:10.816 --> 00:16:14.386 A:middle
and the job of a cell is
just to manage the layout

00:16:14.486 --> 00:16:16.196 A:middle
for a particular content view.

00:16:17.586 --> 00:16:20.636 A:middle
Cells also let you control
the placement of the content

00:16:20.636 --> 00:16:23.756 A:middle
if the cell has a bunch
of extra space in it.

00:16:24.056 --> 00:16:25.766 A:middle
And if you have some
content that needs

00:16:25.826 --> 00:16:29.116 A:middle
to span the boundaries between
cells, then they can be merged

00:16:29.166 --> 00:16:31.446 A:middle
as you might be familiar with
from a spreadsheet program.

00:16:32.386 --> 00:16:35.746 A:middle
So, I've built a smaller
version of this UI

00:16:35.746 --> 00:16:37.806 A:middle
that still has all the
interesting pieces in it,

00:16:37.806 --> 00:16:39.536 A:middle
and I want to go through
this a bit at a time

00:16:39.536 --> 00:16:41.186 A:middle
and show you how it's built.

00:16:42.976 --> 00:16:46.476 A:middle
So we intend to provide
support in Interface Builder

00:16:46.476 --> 00:16:48.716 A:middle
for NSGridView, but until
we have it, we're just going

00:16:48.716 --> 00:16:49.636 A:middle
to be working with the code.

00:16:50.016 --> 00:16:53.106 A:middle
What I've done here is
make outlets in my nib file

00:16:53.106 --> 00:16:55.396 A:middle
for all the controls that
I want to put into my grid,

00:16:56.076 --> 00:16:59.516 A:middle
and then whenever you specify
a ContentView for NSGridView,

00:17:00.146 --> 00:17:02.546 A:middle
it will take care of
moving that to be a subview

00:17:02.546 --> 00:17:03.666 A:middle
of the grid if needed.

00:17:04.236 --> 00:17:06.616 A:middle
This makes it really easy
to allocate your grid view

00:17:06.616 --> 00:17:08.376 A:middle
at run time and then
integrate it

00:17:08.376 --> 00:17:09.846 A:middle
into an existing view hierarchy.

00:17:11.455 --> 00:17:14.256 A:middle
There's a few different ways
to construct grid views.

00:17:14.256 --> 00:17:15.896 A:middle
I think this is the easiest one.

00:17:15.896 --> 00:17:18.126 A:middle
All you need to do
is specify a list

00:17:18.126 --> 00:17:21.226 A:middle
of the content views
for each of the rows.

00:17:21.986 --> 00:17:23.425 A:middle
And let's get to a
couple of things.

00:17:23.536 --> 00:17:25.986 A:middle
First, you don't have to
worry about sizing the grid.

00:17:26.425 --> 00:17:29.166 A:middle
It'll take care of however many
rows and columns are needed

00:17:29.166 --> 00:17:30.516 A:middle
for the content that
you've specified.

00:17:31.496 --> 00:17:34.156 A:middle
Second, the code that you end

00:17:34.156 --> 00:17:37.046 A:middle
up with is roughly
grid-shaped itself and is

00:17:37.046 --> 00:17:40.226 A:middle
at least highly correlated with
the UI that you're specifying.

00:17:40.566 --> 00:17:43.036 A:middle
This makes it much easier
for you or somebody else

00:17:43.036 --> 00:17:46.426 A:middle
to come back later and find
your way around the code.

00:17:46.506 --> 00:17:49.746 A:middle
So, if we just run this,
this is what we get.

00:17:50.176 --> 00:17:52.526 A:middle
That's not too bad just for
calling the constructor,

00:17:52.626 --> 00:17:55.186 A:middle
but it doesn't match the
design yet, obviously.

00:17:55.666 --> 00:17:57.666 A:middle
The most striking
problem is just

00:17:57.666 --> 00:17:59.246 A:middle
that the UI is very spread out.

00:17:59.246 --> 00:18:00.906 A:middle
There are all these
gaps, like this one.

00:17:59.246 --> 00:18:00.906 A:middle
There are all these
gaps, like this one.

00:18:01.656 --> 00:18:04.606 A:middle
And this occurs because the
grid view is constrained

00:18:04.656 --> 00:18:05.936 A:middle
to the edges of the window.

00:18:06.176 --> 00:18:08.326 A:middle
Now when I did that,
my intent was

00:18:08.326 --> 00:18:10.246 A:middle
to make the window the
same size as the grid,

00:18:10.286 --> 00:18:11.906 A:middle
but what actually happened was

00:18:11.906 --> 00:18:14.076 A:middle
that the grid was
stretched to fill the window.

00:18:14.946 --> 00:18:17.366 A:middle
If you've used Auto Layout
very much in the past,

00:18:17.366 --> 00:18:19.256 A:middle
you may have encountered
similar problems

00:18:19.256 --> 00:18:21.436 A:middle
with text fields
or other controls.

00:18:21.776 --> 00:18:23.706 A:middle
And we're going to resolve
this here the same way,

00:18:23.796 --> 00:18:26.536 A:middle
by adjusting the content hugging
priority of the grid view.

00:18:28.016 --> 00:18:30.536 A:middle
So, the other controls in this
window already have a higher

00:18:30.536 --> 00:18:32.676 A:middle
content hugging from
the nib file

00:18:33.696 --> 00:18:37.396 A:middle
but until we raise the content
hugging on the grid view,

00:18:37.826 --> 00:18:39.536 A:middle
then it's possible
for the window

00:18:39.536 --> 00:18:42.326 A:middle
to actually pull the content
view edges away from the edges

00:18:42.326 --> 00:18:43.406 A:middle
from the rows and columns.

00:18:44.456 --> 00:18:47.356 A:middle
Once we raise it, instead
we'll see that the edges

00:18:47.356 --> 00:18:51.866 A:middle
of the windows are pulled
in, and the gap closes up.

00:18:52.196 --> 00:18:55.536 A:middle
So, the next thing I'd like
to look at is these labels.

00:18:55.766 --> 00:18:58.986 A:middle
They're clearly laid
out within theirselves,

00:18:59.206 --> 00:19:01.906 A:middle
but they really need to be
right justified so that they're

00:18:59.206 --> 00:19:01.906 A:middle
but they really need to be
right justified so that they're

00:19:01.906 --> 00:19:03.846 A:middle
up against the controls
that they are labeling.

00:19:05.216 --> 00:19:06.346 A:middle
And this is easy to change

00:19:06.406 --> 00:19:09.596 A:middle
by just adjusting the
placement value for those cells.

00:19:10.136 --> 00:19:16.466 A:middle
The x and y placement properties
are available on rows, columns,

00:19:16.466 --> 00:19:18.156 A:middle
cells, and the grid view itself.

00:19:18.736 --> 00:19:22.286 A:middle
The idea is that if the
value is not specified

00:19:22.286 --> 00:19:25.006 A:middle
on the cell itself, then
the value from the row

00:19:25.006 --> 00:19:28.246 A:middle
and column will be used or from
the grid view if necessary.

00:19:28.596 --> 00:19:31.416 A:middle
This makes it very easy to
just set the value in one place

00:19:31.416 --> 00:19:34.216 A:middle
and then have it affect
a wide range of cells.

00:19:34.676 --> 00:19:37.546 A:middle
So, in this case, we can
get the column at index zero

00:19:37.636 --> 00:19:40.636 A:middle
from the grid view and just set
the x placement on that column,

00:19:41.036 --> 00:19:44.326 A:middle
and we'll see both of the labels
hop over to the right side.

00:19:45.346 --> 00:19:46.516 A:middle
The next thing I'd like to look

00:19:46.516 --> 00:19:49.406 A:middle
at here is the baseline
alignment.

00:19:49.786 --> 00:19:53.286 A:middle
The text of the labels
is not properly aligned

00:19:53.286 --> 00:19:54.916 A:middle
with the text in the controls.

00:19:54.916 --> 00:19:58.266 A:middle
And it's subtle in the
slide, but it's easy to fix

00:19:58.266 --> 00:19:58.976 A:middle
by adjusting the row alignment.

00:19:59.106 --> 00:20:03.386 A:middle
Row alignment is inherited
the same way as the placement,

00:19:59.106 --> 00:20:03.386 A:middle
Row alignment is inherited
the same way as the placement,

00:20:03.816 --> 00:20:05.366 A:middle
and for this particular design,

00:20:05.366 --> 00:20:08.066 A:middle
it's fine to just
have everything

00:20:08.066 --> 00:20:09.596 A:middle
in the grid align by baseline.

00:20:09.706 --> 00:20:12.456 A:middle
And so, we can set the value
in one place on the grid view,

00:20:12.456 --> 00:20:13.836 A:middle
and it will affect everything.

00:20:14.526 --> 00:20:15.846 A:middle
And if you look carefully,

00:20:15.846 --> 00:20:18.566 A:middle
you'll see the text
slide into place.

00:20:19.836 --> 00:20:22.796 A:middle
Now, one thing to keep in
mind about row alignment is

00:20:22.796 --> 00:20:24.196 A:middle
that you may have
a bunch of views

00:20:24.196 --> 00:20:25.666 A:middle
in your row that
are all aligned.

00:20:26.246 --> 00:20:29.036 A:middle
And then you may also specify
placement for those cells.

00:20:29.386 --> 00:20:31.986 A:middle
So, in that kind of a case,
the grid view may not be able

00:20:31.986 --> 00:20:33.816 A:middle
to satisfy all the requests.

00:20:34.286 --> 00:20:37.146 A:middle
And so, it's important
to understand

00:20:37.146 --> 00:20:39.186 A:middle
that the row alignment
will always take precedence

00:20:39.266 --> 00:20:40.086 A:middle
over the placement.

00:20:40.086 --> 00:20:42.456 A:middle
The way it works is that
we'll take the whole group

00:20:42.456 --> 00:20:43.966 A:middle
of aligned content views

00:20:43.966 --> 00:20:45.846 A:middle
and then we'll place
it using the placement

00:20:45.926 --> 00:20:49.836 A:middle
from the first cell.

00:20:50.046 --> 00:20:53.696 A:middle
So, the next piece I'd like to
look at is this pop-up button.

00:20:53.696 --> 00:20:56.536 A:middle
The design has a little
bit of extra space above

00:20:56.536 --> 00:20:59.816 A:middle
and below the pop-up button,
and we can get that space

00:20:59.816 --> 00:21:02.456 A:middle
in our layout by adding
some padding to that row.

00:20:59.816 --> 00:21:02.456 A:middle
in our layout by adding
some padding to that row.

00:21:03.046 --> 00:21:07.496 A:middle
So, the first thing we need
to do is fetch the row.

00:21:08.156 --> 00:21:09.686 A:middle
We could actually
do this the same way

00:21:09.686 --> 00:21:12.996 A:middle
that we got the column before
by specifying the index,

00:21:13.326 --> 00:21:14.976 A:middle
but this way is a
little bit better.

00:21:15.726 --> 00:21:18.356 A:middle
Instead, we ask the
grid view for the cell

00:21:18.356 --> 00:21:20.036 A:middle
that contains this
pop-up button,

00:21:20.036 --> 00:21:21.796 A:middle
and then from the
cell, we get the row.

00:21:22.606 --> 00:21:24.996 A:middle
This is better because if
someone comes along later

00:21:25.476 --> 00:21:28.626 A:middle
and changes the configuration of
the grid view to add a checkbox

00:21:28.626 --> 00:21:31.076 A:middle
or something like that, this
code will still be valid.

00:21:31.546 --> 00:21:34.336 A:middle
If you fill your code with a
lot of hard-coded index values,

00:21:34.386 --> 00:21:36.846 A:middle
then as soon as someone adds
a checkbox, you need to go

00:21:36.846 --> 00:21:38.436 A:middle
and review all of
that code to see

00:21:38.436 --> 00:21:40.306 A:middle
which of the indices
need to be updated.

00:21:41.506 --> 00:21:46.516 A:middle
And in any case, once we
have the row, we can go ahead

00:21:46.566 --> 00:21:49.176 A:middle
and set the padding
values, and we'll see

00:21:49.176 --> 00:21:50.866 A:middle
that we get a little
bit of extra space

00:21:50.956 --> 00:21:52.016 A:middle
above and below the pop-up.

00:21:53.246 --> 00:21:55.936 A:middle
We need a little space over
the status cells label as well,

00:21:57.046 --> 00:22:01.966 A:middle
and we can achieve
that the same way.

00:21:57.046 --> 00:22:01.966 A:middle
and we can achieve
that the same way.

00:22:02.796 --> 00:22:05.346 A:middle
So, I want to take a moment here
to talk about the difference

00:22:05.346 --> 00:22:06.936 A:middle
between padding and spacing.

00:22:06.936 --> 00:22:08.736 A:middle
We haven't really talked
about spacing much.

00:22:09.326 --> 00:22:12.046 A:middle
The padding values are
available on rows and columns,

00:22:12.046 --> 00:22:14.916 A:middle
and they are just for adding
an extra space here and there

00:22:14.916 --> 00:22:16.336 A:middle
where you need it in your grid.

00:22:16.806 --> 00:22:19.826 A:middle
The spacing values are available
on the grid view itself,

00:22:19.826 --> 00:22:21.306 A:middle
and they apply to the spaces

00:22:21.306 --> 00:22:23.476 A:middle
between all the rows
or all the columns.

00:22:24.126 --> 00:22:29.406 A:middle
So, if we take a copy of the
design here and we remove all

00:22:29.406 --> 00:22:31.636 A:middle
of the padding, then
this is what we get.

00:22:31.636 --> 00:22:33.916 A:middle
The UI is still properly
spaced out,

00:22:33.916 --> 00:22:35.496 A:middle
but we lose the visual
distinction

00:22:35.496 --> 00:22:37.276 A:middle
between the different
clusters of controls.

00:22:37.766 --> 00:22:40.386 A:middle
If instead we keep the
padding but we take

00:22:40.386 --> 00:22:42.836 A:middle
out all the spacing,
we get this.

00:22:43.296 --> 00:22:45.186 A:middle
We still have our
control clusters,

00:22:45.486 --> 00:22:47.656 A:middle
but the UI is very
cramped together.

00:22:48.216 --> 00:22:51.136 A:middle
And of course if you remove
both, you end up with this,

00:22:51.136 --> 00:22:53.396 A:middle
where the whole thing is
just very tightly compressed.

00:22:54.626 --> 00:22:56.476 A:middle
So, an important thing
to keep in mind here is

00:22:56.476 --> 00:22:58.626 A:middle
that the padding properties
all default to zero.

00:22:58.946 --> 00:23:02.976 A:middle
You won't have any padding in
your grid unless you specify it.

00:22:58.946 --> 00:23:02.976 A:middle
You won't have any padding in
your grid unless you specify it.

00:23:02.976 --> 00:23:05.896 A:middle
But you almost always want some
space between the content views,

00:23:05.896 --> 00:23:10.726 A:middle
and so the spacing on the grid
view defaults to non-zero.

00:23:10.846 --> 00:23:13.466 A:middle
If your use case requires
that your views are laid

00:23:13.466 --> 00:23:15.906 A:middle
out immediately next to each
other, then you'll need to go

00:23:15.906 --> 00:23:18.746 A:middle
to the grid view and set those
spacing properties to zero.

00:23:19.326 --> 00:23:24.026 A:middle
The last piece that's really out
of place here is this checkbox,

00:23:24.026 --> 00:23:25.746 A:middle
and it's an interesting
case because it needs

00:23:25.746 --> 00:23:28.126 A:middle
to span the boundary between
these bottom two cells.

00:23:28.656 --> 00:23:30.436 A:middle
But we can do that
by merging the cells,

00:23:30.646 --> 00:23:32.186 A:middle
like I mentioned in
the introduction.

00:23:33.326 --> 00:23:35.946 A:middle
There are a few methods
for this, but in this case,

00:23:35.946 --> 00:23:38.406 A:middle
we can just tell the row to
merge its first two cells.

00:23:38.916 --> 00:23:43.336 A:middle
And when you do this, it has the
effect of extending the boundary

00:23:43.406 --> 00:23:46.376 A:middle
of the top leading cell to
cover the entire merge range.

00:23:46.376 --> 00:23:52.706 A:middle
So with this code in effect
we see the checkbox slides,

00:23:52.756 --> 00:23:55.566 A:middle
and now this content view is
laid out across both cells

00:23:55.566 --> 00:23:56.856 A:middle
as if they were the same one.

00:23:56.856 --> 00:23:59.436 A:middle
And in fact, you can see it's
still inheriting the trailing

00:23:59.486 --> 00:24:00.916 A:middle
placement from that
first column.

00:23:59.486 --> 00:24:00.916 A:middle
placement from that
first column.

00:24:01.476 --> 00:24:05.336 A:middle
We don't really want it to
have trailing placement,

00:24:05.786 --> 00:24:08.036 A:middle
but we don't want to have
leading placement either.

00:24:08.436 --> 00:24:10.836 A:middle
This checkbox is actually
supposed to be centered

00:24:10.836 --> 00:24:12.916 A:middle
on the boundary between
the two columns.

00:24:13.746 --> 00:24:17.306 A:middle
So, because the columns
are not evenly sized,

00:24:17.306 --> 00:24:19.076 A:middle
this isn't something that
the grid view will do

00:24:19.076 --> 00:24:20.266 A:middle
for you out of the box.

00:24:20.566 --> 00:24:22.996 A:middle
But it does leave you room
to do it for yourself.

00:24:24.146 --> 00:24:27.706 A:middle
And that starts by setting a
placement for this cell to none.

00:24:28.266 --> 00:24:30.656 A:middle
When you set these
placement values to none,

00:24:31.406 --> 00:24:34.766 A:middle
it has the effect of causing the
grid view to stop maintaining

00:24:34.956 --> 00:24:36.106 A:middle
that aspect of the layout.

00:24:37.076 --> 00:24:38.236 A:middle
And what that buys us is

00:24:38.236 --> 00:24:40.326 A:middle
that the grid view won't
be applying any constraints

00:24:40.326 --> 00:24:42.066 A:middle
that might conflict
with our constraints.

00:24:42.566 --> 00:24:45.336 A:middle
So, once that's done, we can
go ahead and make a constraint

00:24:45.406 --> 00:24:49.176 A:middle
from the checkbox's center x
anchor to the leading anchor

00:24:49.316 --> 00:24:51.526 A:middle
of the checkbox above it.

00:24:51.706 --> 00:24:53.146 A:middle
And then once we
have the constraint,

00:24:53.146 --> 00:24:54.626 A:middle
we could actually
just activate it

00:24:54.626 --> 00:24:56.306 A:middle
like you normally would
with a constraint.

00:24:56.866 --> 00:24:58.536 A:middle
But in this case,
we're going to set it

00:24:58.536 --> 00:25:00.456 A:middle
in the custom placement
constraints array.

00:24:58.536 --> 00:25:00.456 A:middle
in the custom placement
constraints array.

00:25:01.566 --> 00:25:04.366 A:middle
If you do that, then
it allows the grid view

00:25:04.366 --> 00:25:07.246 A:middle
to maintain any custom
placement constraints for you,

00:25:07.246 --> 00:25:09.176 A:middle
and it will do things
like activate

00:25:09.176 --> 00:25:11.356 A:middle
and deactivate the
constraints depending on whether

00:25:11.356 --> 00:25:12.486 A:middle
or not the cell is visible.

00:25:13.916 --> 00:25:17.836 A:middle
So, with this code into place,
we see the checkbox shift

00:25:17.836 --> 00:25:21.136 A:middle
into position, and the
implementation then matches

00:25:21.216 --> 00:25:21.696 A:middle
the design.

00:25:22.126 --> 00:25:22.846 A:middle
We're finished.

00:25:23.246 --> 00:25:26.356 A:middle
Some pieces of the grid
configuration here were a little

00:25:26.356 --> 00:25:29.286 A:middle
bit complicated, but the whole
thing is still much simpler

00:25:29.286 --> 00:25:30.996 A:middle
that if you needed
to build this UI

00:25:31.456 --> 00:25:33.876 A:middle
from basic constraints
or even with stacks.

00:25:34.526 --> 00:25:37.866 A:middle
In fact, there's not a lot
that needs to change in order

00:25:37.866 --> 00:25:41.056 A:middle
to expand this to the
full UI that I swiped

00:25:41.056 --> 00:25:42.646 A:middle
from the voiceover preferences.

00:25:43.676 --> 00:25:46.446 A:middle
So, to summarize,
NSGridView is great

00:25:46.506 --> 00:25:49.156 A:middle
if your application has
a static grid-like UI

00:25:49.156 --> 00:25:50.586 A:middle
that you need to manage.

00:25:51.406 --> 00:25:53.986 A:middle
And a great way to start
working with it is to take all

00:25:53.986 --> 00:25:55.176 A:middle
of your content views
and put them

00:25:55.176 --> 00:25:56.736 A:middle
into a grid and see
what you get.

00:25:56.736 --> 00:26:00.026 A:middle
At that point, you can
iterate on the configuration

00:25:56.736 --> 00:26:00.026 A:middle
At that point, you can
iterate on the configuration

00:26:00.026 --> 00:26:02.486 A:middle
of your grid until you've
reached the layout design

00:26:02.596 --> 00:26:03.356 A:middle
that you're looking for.

00:26:03.626 --> 00:26:04.766 A:middle
I hope you find it useful.

00:26:04.766 --> 00:26:08.436 A:middle
Next, I'd like to bring out
my colleague Marian Goldeen,

00:26:08.436 --> 00:26:09.636 A:middle
who's going to talk to you

00:26:09.636 --> 00:26:11.596 A:middle
about some new debugging
tools that she's built.

00:26:11.596 --> 00:26:11.776 A:middle
Thank you.

00:26:12.516 --> 00:26:19.176 A:middle
[ Applause ]

00:26:19.676 --> 00:26:22.436 A:middle
&gt;&gt; It doesn't happen often,
but when it does it's a hang,

00:26:22.766 --> 00:26:24.576 A:middle
and then that turns
into a crash,

00:26:24.956 --> 00:26:26.516 A:middle
and it can be hard to debug.

00:26:26.896 --> 00:26:28.566 A:middle
And that's a layout
feedback loop.

00:26:28.566 --> 00:26:31.326 A:middle
When you encounter a
layout feedback loop,

00:26:31.326 --> 00:26:33.966 A:middle
you're usually beginning
or ending a transition,

00:26:34.166 --> 00:26:35.646 A:middle
and it might be something
like this.

00:26:35.956 --> 00:26:38.916 A:middle
You tap the button to
start a transition,

00:26:39.366 --> 00:26:43.336 A:middle
and the button responds,
but then nothing else does.

00:26:44.226 --> 00:26:46.416 A:middle
So, you're running on
Xcode, and you look

00:26:46.416 --> 00:26:51.316 A:middle
in the debugging navigator, and
you see that the CPU is pegged,

00:26:52.076 --> 00:26:56.646 A:middle
memory's increasing, and
maybe you break and you look

00:26:56.646 --> 00:26:59.046 A:middle
and you just see a bunch
of layout in the backtrace.

00:26:59.566 --> 00:27:03.146 A:middle
And what's happening is that
there is some collection

00:26:59.566 --> 00:27:03.146 A:middle
And what's happening is that
there is some collection

00:27:03.406 --> 00:27:05.956 A:middle
of views that are running
layout again, and again,

00:27:05.956 --> 00:27:07.796 A:middle
and again in a tight loop.

00:27:08.226 --> 00:27:09.596 A:middle
The run loop's never turning.

00:27:10.056 --> 00:27:12.066 A:middle
Any messages that are
happening are collecting

00:27:12.066 --> 00:27:14.236 A:middle
to autorelease objects,
so that's all collecting.

00:27:14.306 --> 00:27:16.216 A:middle
So that's why the
memory's increasing.

00:27:17.036 --> 00:27:21.236 A:middle
And what's driving this is
an upstream setNeedsLayout.

00:27:21.606 --> 00:27:23.236 A:middle
And what I mean by that is one

00:27:23.236 --> 00:27:25.956 A:middle
of the [inaudible] views during
its layout is doing something

00:27:26.216 --> 00:27:28.766 A:middle
that is causing a more
root directed view,

00:27:29.026 --> 00:27:32.906 A:middle
to get a setNeedsLayout so
when layout finishes its pass,

00:27:33.016 --> 00:27:35.246 A:middle
it goes right back to
the top and starts again,

00:27:35.616 --> 00:27:39.676 A:middle
and what you want to know
is what views are involved

00:27:40.216 --> 00:27:42.946 A:middle
because that's going to
help you figure out where

00:27:42.946 --> 00:27:45.466 A:middle
that setNeedsLayout
is coming from, why,

00:27:45.466 --> 00:27:47.086 A:middle
and what you're going
to do about it.

00:27:47.566 --> 00:27:50.166 A:middle
This information is actually
a little difficult to collect.

00:27:50.916 --> 00:27:55.766 A:middle
So, that's why we're introducing
a layout feedback loop debugger

00:27:55.766 --> 00:27:57.666 A:middle
to help with these
particular situations.

00:27:58.436 --> 00:28:01.856 A:middle
This is a launch argument
that you add in Xcode.

00:27:58.436 --> 00:28:01.856 A:middle
This is a launch argument
that you add in Xcode.

00:28:01.856 --> 00:28:03.036 A:middle
It's the UIView

00:28:03.036 --> 00:28:07.116 A:middle
or NSViewLayoutFeedbackLoop
DebuggingThreshold,

00:28:07.836 --> 00:28:10.776 A:middle
depending on whether
you're on macOS or iOS.

00:28:11.336 --> 00:28:12.746 A:middle
And you give it a value.

00:28:12.746 --> 00:28:14.206 A:middle
I've used 100 here.

00:28:14.496 --> 00:28:19.336 A:middle
You can use any value, but we'll
clamp it between 50 and 1,000.

00:28:20.586 --> 00:28:22.506 A:middle
Now when you've got this
launch argument set,

00:28:22.866 --> 00:28:26.156 A:middle
the layout feedback loop
debugger will be counting layout

00:28:26.156 --> 00:28:28.326 A:middle
subviews for every
view that runs layout,

00:28:28.616 --> 00:28:32.096 A:middle
and if any of them run
more than that threshold

00:28:32.096 --> 00:28:33.876 A:middle
within the same turn
of the run loop,

00:28:33.926 --> 00:28:35.956 A:middle
it will then allow
the cycle to continue

00:28:35.956 --> 00:28:38.466 A:middle
for a little bit while
it collects information.

00:28:38.466 --> 00:28:41.306 A:middle
Then it will throw --
raise an exception and dump

00:28:41.306 --> 00:28:42.976 A:middle
that information into the logs.

00:28:43.576 --> 00:28:48.256 A:middle
It dumps it to the
com.apple.AppKit subsystem

00:28:48.256 --> 00:28:50.446 A:middle
or the com.apple.UIKit
subsystem,

00:28:50.446 --> 00:28:52.426 A:middle
depending on whether
you're on macOS or iOS,

00:28:52.696 --> 00:28:54.846 A:middle
in both cases the
layout loop category.

00:28:55.346 --> 00:28:57.926 A:middle
If you want to know more about
the new logging subsystems

00:28:57.926 --> 00:29:00.856 A:middle
and categories, come to the
session at five o'clock today

00:28:57.926 --> 00:29:00.856 A:middle
and categories, come to the
session at five o'clock today

00:29:00.856 --> 00:29:03.676 A:middle
at Knob Hill on the unified
logging and activity tracing.

00:29:04.726 --> 00:29:08.046 A:middle
Alternatively, you can set a
break point in the debugger,

00:29:08.046 --> 00:29:09.206 A:middle
an exception break point.

00:29:09.526 --> 00:29:11.826 A:middle
And you can print the
feedback loop in the debugger,

00:29:11.826 --> 00:29:14.086 A:middle
or it's also nice to
hit the break point

00:29:14.086 --> 00:29:20.266 A:middle
and maybe introspect what's
going on a little more.

00:29:20.486 --> 00:29:23.846 A:middle
So, I said info dump,
and I do mean info dump.

00:29:24.096 --> 00:29:26.416 A:middle
So we're going to go
through two examples

00:29:26.416 --> 00:29:29.566 A:middle
of real live layout feedback
loops that I debugged

00:29:29.566 --> 00:29:31.206 A:middle
with the layout feedback
loop debugger.

00:29:31.526 --> 00:29:33.816 A:middle
Now we're going to look at
those logs, warts and all,

00:29:34.186 --> 00:29:35.416 A:middle
and hopefully a walkthrough

00:29:35.416 --> 00:29:37.226 A:middle
of two different logs
are going to help you.

00:29:37.496 --> 00:29:40.846 A:middle
We're going to look at a layout
feedback loop that was caused

00:29:40.846 --> 00:29:42.356 A:middle
by an upstream setNeedsLayout.

00:29:42.796 --> 00:29:46.726 A:middle
This is actually independent
of Auto Layout, and another one

00:29:46.726 --> 00:29:50.366 A:middle
that was caused by ambiguous
layout from constraints,

00:29:50.366 --> 00:29:52.156 A:middle
which is very special
to Auto Layout.

00:29:53.086 --> 00:29:57.136 A:middle
So for the first example with
the upstream geometry change,

00:29:58.156 --> 00:30:01.166 A:middle
here's a graph of the view tree

00:29:58.156 --> 00:30:01.166 A:middle
here's a graph of the view tree

00:30:01.806 --> 00:30:03.926 A:middle
where the feedback
loop was happening.

00:30:04.486 --> 00:30:07.906 A:middle
And a lot of view in that
view tree were actually

00:30:08.826 --> 00:30:09.966 A:middle
running layout.

00:30:10.196 --> 00:30:13.076 A:middle
Often you're lucky and
there aren't so many views,

00:30:13.076 --> 00:30:14.896 A:middle
and ones like this your
heart kind of sinks.

00:30:15.296 --> 00:30:18.706 A:middle
But it turned out that ten
of them were just churn.

00:30:18.926 --> 00:30:21.866 A:middle
They were innocent victims
of the actual problem

00:30:21.866 --> 00:30:23.886 A:middle
that was happening higher
up in the hierarchy.

00:30:24.246 --> 00:30:26.786 A:middle
So, what was going on was
that that third level view,

00:30:26.976 --> 00:30:30.506 A:middle
during its layout, was changing
the bounds of its superview.

00:30:31.176 --> 00:30:32.776 A:middle
Now when a views bounds change,

00:30:32.776 --> 00:30:34.376 A:middle
it gets an implicit
setNeedsLayout

00:30:34.806 --> 00:30:35.796 A:middle
because it will need

00:30:35.796 --> 00:30:37.586 A:middle
to re position its views
for the new bounds.

00:30:37.926 --> 00:30:41.626 A:middle
But also if that view that's
receiving the bounds change,

00:30:41.916 --> 00:30:44.986 A:middle
if its superview is
not actually in layout,

00:30:45.186 --> 00:30:47.836 A:middle
the superview will also
receive a setNeedsLayout

00:30:48.036 --> 00:30:50.266 A:middle
so that layout subviews
will have the last word

00:30:50.266 --> 00:30:51.316 A:middle
on what the layout is.

00:30:51.946 --> 00:30:54.986 A:middle
So when the layout pass gets
down to the bottom and finishes,

00:30:54.986 --> 00:30:58.126 A:middle
it goes back to the top,
and it runs layout on it

00:30:58.126 --> 00:31:00.116 A:middle
because that top view
still needs layout,

00:30:58.126 --> 00:31:00.116 A:middle
because that top view
still needs layout,

00:31:00.446 --> 00:31:03.226 A:middle
which resets the bounds
of the middle view.

00:31:03.506 --> 00:31:08.096 A:middle
And the feedback loop is powered
by the two views fighting

00:31:08.096 --> 00:31:09.726 A:middle
over the bounds of the
view in the middle.

00:31:11.126 --> 00:31:13.406 A:middle
As you can imagine, there's
a lot of layout going on.

00:31:13.846 --> 00:31:15.816 A:middle
So, there's a lot of
information in the log.

00:31:15.816 --> 00:31:16.796 A:middle
So brace yourself.

00:31:17.466 --> 00:31:20.986 A:middle
This is what the log looks like,
or at least the top of the log,

00:31:20.986 --> 00:31:22.266 A:middle
which is where I
want you to start

00:31:22.266 --> 00:31:23.416 A:middle
when you look at
one of these logs.

00:31:23.926 --> 00:31:27.396 A:middle
The first thing that's called
out is the top-level view

00:31:27.616 --> 00:31:29.246 A:middle
that -- of the layout
feedback loops.

00:31:29.246 --> 00:31:31.986 A:middle
So, in this loop there
is no view more root word

00:31:31.986 --> 00:31:33.366 A:middle
than this view that's
getting layout.

00:31:34.066 --> 00:31:38.226 A:middle
Following that is a recursive
description of the subtree

00:31:38.226 --> 00:31:39.656 A:middle
under that top-level view.

00:31:40.006 --> 00:31:43.036 A:middle
And next to some of the views

00:31:43.036 --> 00:31:45.006 A:middle
in that description,
you'll see a number.

00:31:45.006 --> 00:31:46.896 A:middle
For instance, the -- you
will always see one next

00:31:46.896 --> 00:31:47.756 A:middle
to the top-level view.

00:31:47.756 --> 00:31:49.086 A:middle
In this case it's 23.

00:31:49.616 --> 00:31:52.796 A:middle
Those numbers, the ones with
the numbers are the views

00:31:52.796 --> 00:31:54.116 A:middle
that are actually
receiving layout,

00:31:54.116 --> 00:31:55.566 A:middle
and the numbers are in ordering.

00:31:55.906 --> 00:31:58.376 A:middle
Of course, it's a cycle,
so we can put one anywhere.

00:31:58.376 --> 00:32:01.376 A:middle
But we do it so that the last
one is the top-level view,

00:31:58.376 --> 00:32:01.376 A:middle
But we do it so that the last
one is the top-level view,

00:32:01.376 --> 00:32:03.366 A:middle
so it gives you an idea of
how many views are involved.

00:32:04.126 --> 00:32:07.696 A:middle
So, that's a 23, but there
is only ten down here,

00:32:07.746 --> 00:32:11.046 A:middle
and there is three up here,
and that doesn't add up to 23.

00:32:11.046 --> 00:32:12.166 A:middle
So, what happened?

00:32:12.686 --> 00:32:15.686 A:middle
Well, let's go look at the
next section of the log,

00:32:15.956 --> 00:32:18.536 A:middle
which is the views
receiving layout in order.

00:32:19.106 --> 00:32:23.586 A:middle
And in this section,
you can see that just

00:32:23.586 --> 00:32:25.616 A:middle
because there is one loop
doesn't mean that every view

00:32:25.616 --> 00:32:27.636 A:middle
that lays out in
lays out only once.

00:32:27.936 --> 00:32:30.616 A:middle
We have ten views
that are laying out,

00:32:31.036 --> 00:32:32.546 A:middle
followed by another two views,

00:32:32.796 --> 00:32:34.976 A:middle
followed by those
same ten views again.

00:32:35.516 --> 00:32:37.546 A:middle
And so, those where the
more [inaudible] views.

00:32:37.546 --> 00:32:39.686 A:middle
And when you see this situation,
where you have a bunch of views

00:32:39.686 --> 00:32:46.326 A:middle
that lay out more than once in
the cycle, they're often victims

00:32:46.326 --> 00:32:48.896 A:middle
of the other ones that
are more important.

00:32:49.996 --> 00:32:53.306 A:middle
So, as I said early on,
we're really interested

00:32:53.306 --> 00:32:58.076 A:middle
in where is the top-level view
getting its setNeedsLayout from.

00:32:58.906 --> 00:33:03.976 A:middle
So, following this
section is a lot of detail

00:32:58.906 --> 00:33:03.976 A:middle
So, following this
section is a lot of detail

00:33:03.976 --> 00:33:04.776 A:middle
about the actual --

00:33:04.866 --> 00:33:06.516 A:middle
what's actually happening
during the layout.

00:33:06.966 --> 00:33:09.266 A:middle
So, we're going to scroll
past that down to the bottom

00:33:09.266 --> 00:33:13.806 A:middle
of the log to a section
called call stacks sent

00:33:13.806 --> 00:33:15.506 A:middle
to the top-level view.

00:33:15.506 --> 00:33:18.936 A:middle
So, it's down there, and you
just have to look for it.

00:33:19.126 --> 00:33:22.566 A:middle
Now, there can be more
than one of these.

00:33:22.846 --> 00:33:25.016 A:middle
You know, usually
there's only one.

00:33:25.016 --> 00:33:28.966 A:middle
This was a pretty refractory
one, and there were several.

00:33:29.246 --> 00:33:30.016 A:middle
They're pretty similar.

00:33:30.016 --> 00:33:31.496 A:middle
So, I'm only going to
show you one of them.

00:33:31.836 --> 00:33:35.466 A:middle
At the top of the backtrace
are some funnel methods

00:33:35.466 --> 00:33:39.146 A:middle
for the feedback loop debugger,
but pretty near the top you see

00:33:39.146 --> 00:33:42.946 A:middle
that in frame five, you see
the DropShadowViews receiving a

00:33:42.946 --> 00:33:43.766 A:middle
set bounds.

00:33:44.326 --> 00:33:47.616 A:middle
And if you remember from
the recursive description,

00:33:47.616 --> 00:33:51.096 A:middle
the DropShadowView was the
subview of the TransitionView.

00:33:51.406 --> 00:33:53.366 A:middle
So, the only way that set bounds

00:33:53.366 --> 00:33:55.566 A:middle
of the DropShadowView could
be causing a setNeedsLayout

00:33:55.566 --> 00:33:56.956 A:middle
on the TransitionView would be

00:33:56.956 --> 00:33:58.896 A:middle
because the TransitionView
is not in layout.

00:33:59.286 --> 00:34:04.306 A:middle
So, that view in frame seven
that's running its layout is not

00:33:59.286 --> 00:34:04.306 A:middle
So, that view in frame seven
that's running its layout is not

00:34:04.306 --> 00:34:05.016 A:middle
the TransitionView.

00:34:05.016 --> 00:34:05.676 A:middle
It's something else.

00:34:05.676 --> 00:34:08.846 A:middle
But we don't have that
information in this backtrace.

00:34:08.846 --> 00:34:11.295 A:middle
I didn't have symbols
for this particular app.

00:34:11.505 --> 00:34:14.076 A:middle
So there, they are
not showing up.

00:34:14.076 --> 00:34:15.536 A:middle
Furthermore, it could be a view.

00:34:15.666 --> 00:34:18.376 A:middle
We're lucky here because it's
the DropShadowView that's

00:34:18.376 --> 00:34:20.356 A:middle
receiving set bounds,
which override set bounds,

00:34:20.356 --> 00:34:22.386 A:middle
but it could be a view
doesn't override set bounds.

00:34:23.005 --> 00:34:26.565 A:middle
But hopefully between the
information from the backtrace

00:34:26.565 --> 00:34:29.146 A:middle
and the information from
the top, you'll know what

00:34:29.146 --> 00:34:30.826 A:middle
in the details you're
interested in.

00:34:30.826 --> 00:34:33.646 A:middle
And so, what we are interested
in is the frame changes

00:34:33.646 --> 00:34:35.356 A:middle
for the DropShadowView.

00:34:35.985 --> 00:34:36.985 A:middle
So, we scroll back up,

00:34:36.985 --> 00:34:39.166 A:middle
and we find where that
one -- information is.

00:34:39.166 --> 00:34:41.835 A:middle
So, this is under some
geometry change information.

00:34:42.456 --> 00:34:47.696 A:middle
And we see that in fact
these geometry changes

00:34:47.696 --> 00:34:49.646 A:middle
to bounds changes and
our frame changes --

00:34:49.835 --> 00:34:51.746 A:middle
change are repeating
again and again.

00:34:52.096 --> 00:34:54.916 A:middle
And two of those changes
are coming during layout

00:34:54.916 --> 00:34:57.566 A:middle
on the TransitionView, which is
rational and what you'd expect.

00:34:58.106 --> 00:35:02.256 A:middle
But one of them is coming from
the viewLayoutSubviews method

00:34:58.106 --> 00:35:02.256 A:middle
But one of them is coming from
the viewLayoutSubviews method

00:35:02.546 --> 00:35:06.926 A:middle
of a particular view controller
for the view that's a subview

00:35:06.926 --> 00:35:08.006 A:middle
of the TransitionView.

00:35:08.466 --> 00:35:13.076 A:middle
So, we've located our problem,
and the way to fix this bug is

00:35:13.076 --> 00:35:17.326 A:middle
for the programmer to
figure out some other way

00:35:17.326 --> 00:35:21.376 A:middle
to achieve their ends that don't
involve changing the bounds

00:35:21.376 --> 00:35:23.886 A:middle
of a superview during layout.

00:35:24.306 --> 00:35:30.266 A:middle
All right, so now we're taking
a breath because we're going

00:35:30.266 --> 00:35:32.776 A:middle
to example two, which
is a different kind

00:35:33.586 --> 00:35:35.006 A:middle
of feedback loop entirely.

00:35:36.206 --> 00:35:39.166 A:middle
For those of you who have
been using Auto Layout

00:35:39.466 --> 00:35:41.816 A:middle
to do anything very
complicated, you've probably run

00:35:41.816 --> 00:35:43.726 A:middle
into the problem of
having ambiguous layout.

00:35:44.246 --> 00:35:47.436 A:middle
And ambiguous layout is
usually not so terrible.

00:35:47.756 --> 00:35:51.026 A:middle
Usually you get maybe a
bunch of zero size views.

00:35:51.026 --> 00:35:54.296 A:middle
And you're like where did my
views go, or maybe the view --

00:35:54.296 --> 00:35:59.986 A:middle
the layout is what you want
except occasionally you rotate

00:35:59.986 --> 00:36:02.826 A:middle
the device or something and
you get a different layout.

00:35:59.986 --> 00:36:02.826 A:middle
the device or something and
you get a different layout.

00:36:04.246 --> 00:36:06.766 A:middle
But sometimes you're
really unfortunate,

00:36:06.766 --> 00:36:08.216 A:middle
and during the update
constraints passes

00:36:08.216 --> 00:36:11.886 A:middle
that precede layout, you
can exercise that ambiguity.

00:36:12.186 --> 00:36:14.436 A:middle
And if that ambiguity
gets exercised,

00:36:14.786 --> 00:36:18.326 A:middle
then variable changes
will occur with each one,

00:36:18.326 --> 00:36:20.906 A:middle
and each time it'll
dirty layout somewhere.

00:36:20.906 --> 00:36:22.236 A:middle
And so you get this cycle.

00:36:23.596 --> 00:36:27.686 A:middle
Now an ambiguous layout as
a layout feedback loop leads

00:36:27.686 --> 00:36:29.776 A:middle
to something that's really

00:36:29.776 --> 00:36:33.596 A:middle
that gets you scratching your
head unless you think of it.

00:36:33.886 --> 00:36:36.726 A:middle
So, that's why when
this is likely,

00:36:36.726 --> 00:36:38.586 A:middle
we call it out at
the top of the log.

00:36:38.786 --> 00:36:40.396 A:middle
So they're already
thinking about it.

00:36:41.086 --> 00:36:44.326 A:middle
And so, it says ambiguous
layout is suspected.

00:36:44.326 --> 00:36:46.746 A:middle
And then when you look at
the recursive description,

00:36:47.036 --> 00:36:50.316 A:middle
you see ambiguous layout all
over the place, and, you know,

00:36:50.316 --> 00:36:51.276 A:middle
it's pretty suspicious.

00:36:52.136 --> 00:36:54.236 A:middle
I'm going to digress
here a moment

00:36:54.556 --> 00:36:59.026 A:middle
because I have abbreviated
things in these logs

00:36:59.066 --> 00:37:01.116 A:middle
to make them fit
okay on the slides.

00:36:59.066 --> 00:37:01.116 A:middle
to make them fit
okay on the slides.

00:37:01.506 --> 00:37:03.086 A:middle
And -- but there's an
abbreviation in there

00:37:03.086 --> 00:37:04.386 A:middle
that you might not recognize

00:37:04.746 --> 00:37:07.196 A:middle
that is actually
in the logs itself.

00:37:07.196 --> 00:37:08.156 A:middle
And that's the tAMIC.

00:37:08.386 --> 00:37:10.816 A:middle
You see that right there were
it says ambiguous layout.

00:37:11.216 --> 00:37:13.976 A:middle
So tAMIC stands for
Translates Auto Resizing Mask

00:37:13.976 --> 00:37:16.846 A:middle
into Constraints, and now
you can all call it that too.

00:37:17.346 --> 00:37:19.346 A:middle
[ Laughter ]

00:37:19.676 --> 00:37:22.506 A:middle
At any rate, so were pretty sure

00:37:22.506 --> 00:37:24.396 A:middle
that ambiguous layout
is our issue.

00:37:24.996 --> 00:37:27.046 A:middle
And we could go look
at the backtrace

00:37:27.046 --> 00:37:28.836 A:middle
for the setNeedsLayout is
set to the top-level view.

00:37:28.836 --> 00:37:30.096 A:middle
But I'm not going
to show you that.

00:37:30.096 --> 00:37:33.046 A:middle
All that's in there is internal
foundation and UIKit methods.

00:37:33.556 --> 00:37:34.896 A:middle
And it's not helpful to us.

00:37:35.136 --> 00:37:36.906 A:middle
So, in this case, we need
to look at the details,

00:37:36.906 --> 00:37:40.746 A:middle
and the details here are
going to tell us views

00:37:40.746 --> 00:37:44.206 A:middle
with variable changes that
are triggering layout.

00:37:44.856 --> 00:37:49.016 A:middle
And one thing you
need to remember

00:37:49.016 --> 00:37:51.216 A:middle
about ambiguous layout
is it's contagious.

00:37:51.546 --> 00:37:53.796 A:middle
So, you might just be missing
a couple of constraints.

00:37:54.286 --> 00:37:56.056 A:middle
But a bunch of views
are ambiguous

00:37:56.056 --> 00:37:58.116 A:middle
because they're all kind
of dependent on each other.

00:37:58.586 --> 00:38:02.766 A:middle
So, you may have a lot of these,
but you just start with one

00:37:58.586 --> 00:38:02.766 A:middle
So, you may have a lot of these,
but you just start with one

00:38:02.766 --> 00:38:03.976 A:middle
and once that's fixed up,

00:38:04.426 --> 00:38:07.056 A:middle
a whole lot of the rest will
evaporate if not all of them.

00:38:07.656 --> 00:38:08.386 A:middle
So you look at this.

00:38:08.386 --> 00:38:14.056 A:middle
You see that the min x variable
is oscillating between minus 120

00:38:14.056 --> 00:38:16.696 A:middle
and minus 160, which is
kind of odd values anyway.

00:38:17.196 --> 00:38:20.216 A:middle
And because it's ambiguous
layout, we list the constraints

00:38:20.596 --> 00:38:22.556 A:middle
that are affecting the layout,

00:38:22.826 --> 00:38:24.376 A:middle
which you can then
hopefully examine

00:38:24.376 --> 00:38:26.236 A:middle
and get some idea
of what's missing.

00:38:26.336 --> 00:38:29.586 A:middle
I'm going to go over now
examining constraints

00:38:29.906 --> 00:38:33.216 A:middle
because it can be intimidating
to see a list of constraints.

00:38:33.866 --> 00:38:36.976 A:middle
And drawing pictures is the
only way to deal with it.

00:38:37.346 --> 00:38:41.056 A:middle
I like to start with a graph of
the view hierarchy of the views

00:38:41.056 --> 00:38:43.466 A:middle
that are in -- that are
listed in the constraints.

00:38:43.746 --> 00:38:45.616 A:middle
And fortunately for
this example,

00:38:45.616 --> 00:38:47.196 A:middle
the views were all
different subclasses

00:38:47.196 --> 00:38:48.806 A:middle
so I could label them for you.

00:38:48.806 --> 00:38:52.406 A:middle
And the next thing I drew
is draw myself a picture

00:38:52.676 --> 00:38:53.876 A:middle
of what the constraints were.

00:38:54.186 --> 00:38:57.126 A:middle
So the constraints
were a minimum leading

00:38:57.126 --> 00:39:00.016 A:middle
and trailing padding for the
label inside the container.

00:38:57.126 --> 00:39:00.016 A:middle
and trailing padding for the
label inside the container.

00:39:00.556 --> 00:39:03.136 A:middle
And there was a centering
constraint

00:39:03.136 --> 00:39:05.026 A:middle
between the container
and the action view.

00:39:05.116 --> 00:39:08.496 A:middle
And then the action view had
autoresizing mask constraints

00:39:08.526 --> 00:39:11.076 A:middle
positioning it within
the representation view,

00:39:11.076 --> 00:39:12.696 A:middle
kind of positioning
it in a weird place.

00:39:12.696 --> 00:39:14.746 A:middle
Something's definitely funky
with these constraints.

00:39:15.406 --> 00:39:18.246 A:middle
And finally there's an alignment

00:39:18.486 --> 00:39:20.806 A:middle
between the representation
view and its sibling.

00:39:21.356 --> 00:39:24.196 A:middle
But there's nothing that
actually insists that these --

00:39:24.196 --> 00:39:27.216 A:middle
this whole view hierarchy needs
to be in any particular place.

00:39:27.626 --> 00:39:29.806 A:middle
So, that's how we
got this ambiguity

00:39:30.116 --> 00:39:34.116 A:middle
and the layout feedback loop.

00:39:34.746 --> 00:39:37.116 A:middle
So that's layout
feedback loop debugger.

00:39:37.546 --> 00:39:39.786 A:middle
It's a launch argument.

00:39:39.786 --> 00:39:41.136 A:middle
You won't need to use often.

00:39:41.136 --> 00:39:43.356 A:middle
But when you do, it should
save you a lot of time.

00:39:43.946 --> 00:39:46.376 A:middle
And to recap, we saw the --

00:39:46.376 --> 00:39:49.376 A:middle
how you can incrementally
adopt Auto Layout

00:39:49.376 --> 00:39:50.436 A:middle
and Interface Builder.

00:39:50.826 --> 00:39:53.946 A:middle
In AppKit, there's NSGridView
for grid-like layout.

00:39:53.946 --> 00:39:56.406 A:middle
If you'd like to see that
soon on iOS, cast your vote

00:39:56.406 --> 00:39:57.496 A:middle
in Apple Bug Reporter.

00:39:57.816 --> 00:39:59.896 A:middle
Finally, we have the
layout feedback loop

00:39:59.896 --> 00:40:00.936 A:middle
debugging threshold.

00:39:59.896 --> 00:40:00.936 A:middle
debugging threshold.

00:40:01.436 --> 00:40:05.616 A:middle
More information on the WWDC
website, and have a great rest

00:40:05.616 --> 00:40:06.976 A:middle
of the afternoon, and
thanks for coming.

00:40:07.516 --> 00:40:10.500 A:middle
[ Applause ]
