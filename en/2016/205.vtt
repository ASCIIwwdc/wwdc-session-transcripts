WEBVTT

00:00:07.516 --> 00:00:19.000 A:middle
[ Music ]

00:00:22.156 --> 00:00:22.756 A:middle
&gt;&gt; Good afternoon.

00:00:23.176 --> 00:00:24.596 A:middle
[ Applause ]

00:00:24.596 --> 00:00:25.016 A:middle
&gt;&gt; Welcome.

00:00:28.136 --> 00:00:31.226 A:middle
My name is Olivier Gutknecht
and I manage the UIKit team

00:00:31.846 --> 00:00:35.416 A:middle
and today we're going to talk
about what's new in UIKit

00:00:36.206 --> 00:00:39.166 A:middle
and other system
frameworks in iOS 10.

00:00:40.696 --> 00:00:44.136 A:middle
But first, I'd like
to talk about,

00:00:44.976 --> 00:00:48.456 A:middle
what is not new, in Cocoa Touch.

00:00:49.786 --> 00:00:55.276 A:middle
Why, since last WWDC,
we introduced a number

00:00:55.276 --> 00:00:56.666 A:middle
of very important products.

00:00:58.026 --> 00:01:01.506 A:middle
The iPhone 6S with 3D Touch.

00:00:58.026 --> 00:01:01.506 A:middle
The iPhone 6S with 3D Touch.

00:01:01.846 --> 00:01:07.706 A:middle
The iPad Pro 12.9
inch and 9.7 inch.

00:01:08.056 --> 00:01:11.616 A:middle
The Apple Pencil, and
the Smart Keyboard.

00:01:12.726 --> 00:01:16.476 A:middle
And, with these products
there is a number

00:01:16.476 --> 00:01:19.096 A:middle
of key technologies
you can adopt

00:01:19.686 --> 00:01:21.616 A:middle
to make your applications
really shine.

00:01:22.856 --> 00:01:25.856 A:middle
The first thing that I want
to talk about is adaptivity.

00:01:26.636 --> 00:01:31.836 A:middle
When we introduced adaptivity
2 years ago one thing

00:01:31.836 --> 00:01:35.306 A:middle
that we introduced was the
concept of a size class.

00:01:36.306 --> 00:01:39.956 A:middle
The iPhone was a
compact size class.

00:01:41.086 --> 00:01:43.426 A:middle
The iPad is regular.

00:01:43.956 --> 00:01:47.506 A:middle
And now we have the
12.9 inch iPad Pro,

00:01:48.676 --> 00:01:50.726 A:middle
do we need gigantic size class?

00:01:52.296 --> 00:01:57.136 A:middle
We don't. Because now
we have all the tools

00:01:57.776 --> 00:02:00.146 A:middle
in the framework
to express that.

00:01:57.776 --> 00:02:00.146 A:middle
in the framework
to express that.

00:02:01.356 --> 00:02:02.816 A:middle
We have the trait system

00:02:03.066 --> 00:02:06.526 A:middle
which is how your application
will understand the context

00:02:06.686 --> 00:02:09.106 A:middle
and environment of
your application.

00:02:09.476 --> 00:02:13.166 A:middle
Size classes, that's one very
important trait but then,

00:02:13.786 --> 00:02:15.286 A:middle
you have everything
you need to be able

00:02:15.286 --> 00:02:18.566 A:middle
to build a size based
layout on these devices.

00:02:20.186 --> 00:02:22.926 A:middle
We added new support
for size classes

00:02:23.826 --> 00:02:27.896 A:middle
in Interface Builder and,
in the framework itself,

00:02:28.606 --> 00:02:32.546 A:middle
from auto layout to asset
catalogs with dynamic type,

00:02:33.236 --> 00:02:35.536 A:middle
with layout guide, and
even UI appearance,

00:02:36.076 --> 00:02:38.346 A:middle
everything is ready
and fully integrated.

00:02:39.746 --> 00:02:42.146 A:middle
We're going to have also,

00:02:42.506 --> 00:02:45.816 A:middle
two sessions this week
making app adaptive.

00:02:46.086 --> 00:02:50.196 A:middle
The first one's going to focus
fundamentals and the tools.

00:02:50.806 --> 00:02:54.096 A:middle
And the second one,
will be about the API

00:02:54.096 --> 00:02:55.526 A:middle
and the techniques you can use

00:02:55.826 --> 00:02:57.476 A:middle
to make your application
adaptive.

00:02:58.276 --> 00:03:01.086 A:middle
And this morning there was
an amazing, session focused

00:02:58.276 --> 00:03:01.086 A:middle
And this morning there was
an amazing, session focused

00:03:01.086 --> 00:03:03.256 A:middle
on design, you should watch.

00:03:04.156 --> 00:03:08.766 A:middle
The second thing that I'd like
to talk about is touch input.

00:03:10.076 --> 00:03:15.056 A:middle
Last year, with the iPad
Air 2 and the iPad Pro now,

00:03:15.706 --> 00:03:18.416 A:middle
we have 120 Hz touch scanning.

00:03:18.796 --> 00:03:22.656 A:middle
We are scanning faster than
the screen refresh rate.

00:03:23.516 --> 00:03:27.216 A:middle
And now, with Apple Pencil
we have additional properties

00:03:27.566 --> 00:03:31.206 A:middle
on touches so you can get
orientation precise location,

00:03:31.636 --> 00:03:32.306 A:middle
force.

00:03:33.576 --> 00:03:37.466 A:middle
With iPhone 6S, you have
the same force information

00:03:37.466 --> 00:03:43.486 A:middle
with 3D Touch and we shift
in our iOS 9, in our iOS 9.1.

00:03:43.486 --> 00:03:49.316 A:middle
The APIs you need to build
amazing UIs with these devices.

00:03:49.706 --> 00:03:51.316 A:middle
And Dominique Wagner is going

00:03:51.316 --> 00:03:54.726 A:middle
to present how you can
leverage touch input on iOS.

00:03:58.116 --> 00:04:02.806 A:middle
The last thing that I'd like to
mention is the Smart Keyboard.

00:03:58.116 --> 00:04:02.806 A:middle
The last thing that I'd like to
mention is the Smart Keyboard.

00:04:03.786 --> 00:04:08.176 A:middle
We have an API for you, so you
can express keyboard shortcuts

00:04:08.176 --> 00:04:12.316 A:middle
in your apps, I think you have
more users than ever interacting

00:04:12.316 --> 00:04:14.256 A:middle
with your application
with a keyboard.

00:04:14.986 --> 00:04:19.096 A:middle
So you can have dynamic
in context shortcuts.

00:04:19.946 --> 00:04:22.036 A:middle
The API for that is reasonable.

00:04:23.186 --> 00:04:26.096 A:middle
It's actually, an API
that is new in our iOS 7.

00:04:27.186 --> 00:04:29.846 A:middle
And it's important now
because since iOS 9,

00:04:30.396 --> 00:04:34.046 A:middle
we can display these
beautiful automatic shortcuts

00:04:34.326 --> 00:04:38.736 A:middle
when you hold the command key.

00:04:38.986 --> 00:04:43.446 A:middle
Now, let's talk about what
is new in Cocoa Touch.

00:04:44.066 --> 00:04:46.686 A:middle
I'd like to cover
four things today.

00:04:47.656 --> 00:04:52.496 A:middle
One, the core technologies
you probably already use

00:04:52.496 --> 00:04:53.536 A:middle
in your applications.

00:04:54.386 --> 00:04:59.886 A:middle
And, we're going to discuss
how, with UIKit and other API,

00:05:00.286 --> 00:05:03.506 A:middle
you can build better UIs
for your applications.

00:05:03.956 --> 00:05:07.396 A:middle
We're going to show how
the new system features

00:05:07.436 --> 00:05:10.216 A:middle
in iOS 10 can make your
application better.

00:05:11.566 --> 00:05:13.876 A:middle
And, we're going
to conclude with,

00:05:14.076 --> 00:05:17.826 A:middle
how your application
itself can extend the system

00:05:18.016 --> 00:05:19.446 A:middle
with all new extension points.

00:05:21.586 --> 00:05:23.766 A:middle
So let's talk about
these core technologies.

00:05:25.256 --> 00:05:29.356 A:middle
Swift 3 is probably
the first thing here.

00:05:30.006 --> 00:05:36.296 A:middle
Because with Swift 3, every
single API we have is new again.

00:05:36.926 --> 00:05:40.216 A:middle
Because we change the rules,
we change how we translate

00:05:40.846 --> 00:05:43.926 A:middle
from Objective-C to Swift.

00:05:43.926 --> 00:05:47.846 A:middle
And we are doing that,
to make your code better

00:05:48.386 --> 00:05:52.466 A:middle
so it can feel native really,
when writing that in Swift.

00:05:52.806 --> 00:05:55.526 A:middle
So for instance, something
like preferred font,

00:05:56.136 --> 00:05:58.416 A:middle
we are now using
the first argument

00:05:58.566 --> 00:06:00.736 A:middle
to make the intent clear.

00:05:58.566 --> 00:06:00.736 A:middle
to make the intent clear.

00:06:02.436 --> 00:06:05.456 A:middle
We also try to not repeat
ourselves, UI Color,

00:06:05.456 --> 00:06:08.436 A:middle
black color now is
just white or black.

00:06:10.476 --> 00:06:15.946 A:middle
One thing that I really like
with Swift 3 is how APIs

00:06:15.946 --> 00:06:20.416 A:middle
and core graphics
now really feel great

00:06:20.816 --> 00:06:22.856 A:middle
when writing UIKit application.

00:06:23.906 --> 00:06:27.476 A:middle
And, even something like,
grand central dispatch,

00:06:28.796 --> 00:06:32.296 A:middle
is now a full object API.

00:06:34.096 --> 00:06:36.556 A:middle
Let's talk about grand
central dispatch.

00:06:37.206 --> 00:06:42.956 A:middle
There is a feature that I really
like, something very common

00:06:42.956 --> 00:06:45.906 A:middle
with the dispatch is the
create your own private queue.

00:06:46.966 --> 00:06:53.046 A:middle
And when queue work item to be
executed as synchronously and,

00:06:53.786 --> 00:06:58.346 A:middle
a new thing in iOS 10, is you
can actually set the queue

00:06:58.836 --> 00:07:04.046 A:middle
to automatically wrap every work
item in an autorelease pool.

00:06:58.836 --> 00:07:04.046 A:middle
to automatically wrap every work
item in an autorelease pool.

00:07:04.876 --> 00:07:07.926 A:middle
It's real easy to do, you
just create a dispatch queue,

00:07:08.556 --> 00:07:11.946 A:middle
and you pass the
autorelease work item.

00:07:12.606 --> 00:07:18.336 A:middle
We have a full session on GCD,
and conquering programming.

00:07:21.046 --> 00:07:24.236 A:middle
Foundation, foundation
also adapted a lot

00:07:24.236 --> 00:07:28.976 A:middle
of Swift enhancement, we dropped
the MS prefix from many classes

00:07:29.356 --> 00:07:33.166 A:middle
and we have a major new feature,
we are adding value types

00:07:33.606 --> 00:07:34.296 A:middle
to the foundation API.

00:07:34.296 --> 00:07:36.626 A:middle
It's not just that.

00:07:36.996 --> 00:07:40.096 A:middle
We also have full
support for units

00:07:40.526 --> 00:07:42.356 A:middle
and measurements in foundation.

00:07:43.766 --> 00:07:48.996 A:middle
Another thing is a new date
formatter for the AP 601 format.

00:07:49.216 --> 00:07:51.176 A:middle
If you know what AP 601 is,

00:07:51.176 --> 00:07:54.196 A:middle
you're probably very
happy about that.

00:07:56.516 --> 00:07:59.546 A:middle
[ Applause ]

00:08:00.046 --> 00:08:05.156 A:middle
And another nice feature is how
we're making date computation

00:08:05.156 --> 00:08:07.536 A:middle
better with new NS
date interval.

00:08:07.946 --> 00:08:09.666 A:middle
We have two sessions
on foundation,

00:08:10.436 --> 00:08:11.926 A:middle
What's New in Foundation
and Swift,

00:08:12.396 --> 00:08:14.066 A:middle
and Measurements and Units.

00:08:16.056 --> 00:08:20.946 A:middle
Yesterday, we announced
support for universal keyboard,

00:08:21.636 --> 00:08:25.586 A:middle
copy on your Mac and
paste on your iOS device.

00:08:26.356 --> 00:08:28.466 A:middle
So how do you use that
in your application?

00:08:29.276 --> 00:08:34.716 A:middle
You just use the existing UI
Pasteboard API, that's it.

00:08:34.716 --> 00:08:36.056 A:middle
There is one thing
you need to know.

00:08:38.275 --> 00:08:43.405 A:middle
You might have to fetch a very
large asset on your device,

00:08:43.405 --> 00:08:46.016 A:middle
if I do a copy of
a very big image,

00:08:46.726 --> 00:08:48.376 A:middle
it might take a second or two.

00:08:48.376 --> 00:08:49.636 A:middle
So you might see this UI.

00:08:50.426 --> 00:08:55.106 A:middle
So to avoid, problem when
retrieving remote data,

00:08:55.296 --> 00:08:58.436 A:middle
you should check first, if
you need that data or not.

00:08:58.436 --> 00:08:59.866 A:middle
So you can avoid this UI.

00:08:59.866 --> 00:09:04.056 A:middle
We added four new methods
to UI Pasteboard for that

00:08:59.866 --> 00:09:04.056 A:middle
We added four new methods
to UI Pasteboard for that

00:09:04.376 --> 00:09:09.176 A:middle
so you can easily check for
screen, URLs, images and colors.

00:09:11.616 --> 00:09:15.436 A:middle
Another thing in
UI Pasteboard is

00:09:15.436 --> 00:09:19.326 A:middle
that you can now control what
you publish on the pasteboard.

00:09:19.856 --> 00:09:25.366 A:middle
So now you can restrict your
data, on the local device

00:09:25.986 --> 00:09:27.986 A:middle
or set an expiration date.

00:09:29.516 --> 00:09:35.656 A:middle
[ Applause ]

00:09:36.156 --> 00:09:38.726 A:middle
Now I'd like to talk
about color.

00:09:40.736 --> 00:09:44.686 A:middle
It's not a software feature,
it's really a hardware feature

00:09:44.686 --> 00:09:52.516 A:middle
that we have now in the new iMac
5K, and the iPad Pro 9.7 inch.

00:09:53.906 --> 00:09:57.436 A:middle
It's a technology shift, you can
now represent colors on screen

00:09:58.316 --> 00:10:00.856 A:middle
that was not physically
possible before.

00:09:58.316 --> 00:10:00.856 A:middle
that was not physically
possible before.

00:10:01.596 --> 00:10:06.786 A:middle
And, we are changing how we
are going to represent colors.

00:10:07.886 --> 00:10:11.346 A:middle
The iOS devices were using
the sRGB color space.

00:10:11.986 --> 00:10:13.706 A:middle
Now with this device,
you're going to work

00:10:13.706 --> 00:10:16.326 A:middle
in that extended
sRGB color space.

00:10:16.806 --> 00:10:17.936 A:middle
So what does that mean for you?

00:10:18.946 --> 00:10:25.046 A:middle
So first, iOS is actually
already color managed.

00:10:25.046 --> 00:10:30.466 A:middle
iOS and [inaudible] and in iOS
10, we are exposing the API

00:10:30.466 --> 00:10:32.676 A:middle
to work with a wide color range.

00:10:34.716 --> 00:10:37.486 A:middle
The first way is to
just use UI Image View.

00:10:38.426 --> 00:10:41.086 A:middle
UI Image View is actually
already color managed

00:10:41.256 --> 00:10:43.796 A:middle
since iOS 9.3, so
you're ready there.

00:10:44.866 --> 00:10:46.416 A:middle
What about UI Color?

00:10:47.876 --> 00:10:49.796 A:middle
We made that very simple.

00:10:50.766 --> 00:10:55.376 A:middle
We have one existing
initializer, in it with RGB.

00:10:56.786 --> 00:11:02.096 A:middle
Second one, and new one,
in it with display P3 RGB.

00:10:56.786 --> 00:11:02.096 A:middle
Second one, and new one,
in it with display P3 RGB.

00:11:03.136 --> 00:11:08.016 A:middle
The first one is how you can
represent an arbitrary color

00:11:08.266 --> 00:11:10.606 A:middle
in the extended sRGB space.

00:11:11.386 --> 00:11:15.016 A:middle
So now you can express a
color that goes beyond the 0

00:11:15.016 --> 00:11:18.796 A:middle
to 1 range, if you want
to go beyond classic sRGB.

00:11:20.046 --> 00:11:22.046 A:middle
The second one displayP3,

00:11:22.536 --> 00:11:24.536 A:middle
displayP3 is actually
a color display

00:11:24.536 --> 00:11:26.876 A:middle
that is quite common
on the creation side.

00:11:26.876 --> 00:11:30.366 A:middle
So if you receive a spec with
a wide color, it's very likely

00:11:30.366 --> 00:11:32.486 A:middle
that you're going
to use displayP3

00:11:32.486 --> 00:11:36.306 A:middle
which is why we made that,
initializer available.

00:11:36.566 --> 00:11:37.106 A:middle
And that's it.

00:11:38.006 --> 00:11:39.886 A:middle
We don't have a color
space class.

00:11:40.546 --> 00:11:47.146 A:middle
You can just use these two
initiliazers and you're done.

00:11:48.096 --> 00:11:51.586 A:middle
Now, I'd like to talk
about image rendering.

00:11:53.816 --> 00:11:57.676 A:middle
Image rendering is something

00:11:57.676 --> 00:12:00.606 A:middle
that you're probably
already using today

00:11:57.676 --> 00:12:00.606 A:middle
that you're probably
already using today

00:12:01.076 --> 00:12:03.646 A:middle
with the UI graphics
begin image context,

00:12:04.086 --> 00:12:05.456 A:middle
add image from text APIs.

00:12:05.456 --> 00:12:10.786 A:middle
Kind of thing that you do in
direct on when you want to,

00:12:10.786 --> 00:12:12.466 A:middle
render an image off screen.

00:12:13.056 --> 00:12:14.996 A:middle
So there is one problem
with this API.

00:12:16.256 --> 00:12:21.496 A:middle
It's actually 32 bits sRGB only,
that's a built in assumption.

00:12:22.226 --> 00:12:27.816 A:middle
Also, that's not our best API,
it was there before the blocks

00:12:28.336 --> 00:12:30.616 A:middle
and it's not really extensible.

00:12:30.616 --> 00:12:34.366 A:middle
So, something that you're
writing with, the graphics,

00:12:34.416 --> 00:12:37.246 A:middle
begin image context, API,
would look like that.

00:12:38.106 --> 00:12:40.786 A:middle
And I don't know how many of
you already made the mistake

00:12:40.786 --> 00:12:44.056 A:middle
of trying to get the image
after the begin image context.

00:12:44.626 --> 00:12:46.336 A:middle
I'm definitely one.

00:12:46.696 --> 00:12:49.426 A:middle
But now, we have a new class,

00:12:50.876 --> 00:12:52.756 A:middle
the new UI graphics
render class.

00:12:52.756 --> 00:12:58.646 A:middle
And what this is giving you is,
first, it's fully color managed.

00:12:59.686 --> 00:13:01.536 A:middle
It's going to do the
right thing by default.

00:12:59.686 --> 00:13:01.536 A:middle
It's going to do the
right thing by default.

00:13:02.516 --> 00:13:06.986 A:middle
If you're on a 9.7
inch iPad, you're going

00:13:06.986 --> 00:13:08.966 A:middle
to get a wide color context.

00:13:09.446 --> 00:13:12.056 A:middle
If you're not, you will
get the classic context.

00:13:12.876 --> 00:13:16.476 A:middle
The other thing, it's
block based, easier to use.

00:13:17.066 --> 00:13:19.666 A:middle
And, it's an object
based API so we have

00:13:19.666 --> 00:13:24.796 A:middle
to increase our classes
for images and PDFs.

00:13:25.366 --> 00:13:27.876 A:middle
Also, and that's
quite important,

00:13:28.756 --> 00:13:33.076 A:middle
that class will manage the
lifetime of your context.

00:13:33.676 --> 00:13:36.276 A:middle
Which means that we can do
some memory optimization

00:13:36.576 --> 00:13:37.146 A:middle
under the hood.

00:13:37.476 --> 00:13:39.436 A:middle
Let me give you an example.

00:13:40.316 --> 00:13:44.586 A:middle
For that the equivalent
of the one before,

00:13:45.146 --> 00:13:46.486 A:middle
you just create your renderer.

00:13:48.056 --> 00:13:51.256 A:middle
You try to generate an
image, it's just a matter

00:13:51.256 --> 00:13:54.216 A:middle
of passing the block, and
having your drawing code here.

00:13:54.606 --> 00:13:57.016 A:middle
And the thing that's
really cool about that is,

00:13:57.626 --> 00:14:01.876 A:middle
if you call again, the
image method here are going

00:13:57.626 --> 00:14:01.876 A:middle
if you call again, the
image method here are going

00:14:01.876 --> 00:14:04.686 A:middle
to just be used the
context again.

00:14:09.236 --> 00:14:17.546 A:middle
A new feature related to
images is asset catalogs.

00:14:18.626 --> 00:14:23.466 A:middle
With asset catalogs, we have
support for wide color assets,

00:14:24.366 --> 00:14:28.536 A:middle
right to left and left to
right assets, and compression.

00:14:29.026 --> 00:14:31.116 A:middle
And of course they're
fully integrated

00:14:31.386 --> 00:14:33.686 A:middle
with the trait system in UIKit.

00:14:34.786 --> 00:14:37.016 A:middle
So, let's see the first one.

00:14:38.066 --> 00:14:38.936 A:middle
What color asset?

00:14:39.086 --> 00:14:40.546 A:middle
So what do we want to do here?

00:14:41.406 --> 00:14:44.866 A:middle
If you're embedding,
a wide color asset,

00:14:45.566 --> 00:14:48.696 A:middle
in your application, you
want to be able to deploy

00:14:48.796 --> 00:14:51.116 A:middle
on a non-wide color device.

00:14:51.876 --> 00:14:56.286 A:middle
So what we are going to do is,
we're going to do a generation

00:14:56.326 --> 00:14:59.186 A:middle
of sRGB variant automatically
for you.

00:14:59.976 --> 00:15:02.856 A:middle
And that's going to be fully
compatible with App Thinning,

00:14:59.976 --> 00:15:02.856 A:middle
And that's going to be fully
compatible with App Thinning,

00:15:03.076 --> 00:15:05.626 A:middle
so we're going to deploy
only what is needed

00:15:06.306 --> 00:15:11.646 A:middle
on the right device.

00:15:12.046 --> 00:15:15.366 A:middle
The other new feature in
asset catalog is compression.

00:15:17.036 --> 00:15:20.096 A:middle
We added support for a
lossy compression scheme.

00:15:20.796 --> 00:15:26.466 A:middle
And, it's going to automatically
pick, if you choose so,

00:15:27.056 --> 00:15:30.996 A:middle
it's going to automatically
generate the right variants

00:15:30.996 --> 00:15:32.056 A:middle
for a given device.

00:15:32.266 --> 00:15:37.416 A:middle
So you will a great balance
between footprint and quality.

00:15:37.416 --> 00:15:41.526 A:middle
And again, that's completely
compatible with App Thinning

00:15:41.526 --> 00:15:45.056 A:middle
so we only deploy what is
needed on a given device.

00:15:46.916 --> 00:15:50.746 A:middle
The last feature I
want to describe here

00:15:50.746 --> 00:15:53.296 A:middle
for asset catalog
is the direction

00:15:53.296 --> 00:15:54.676 A:middle
or image asset support.

00:15:56.286 --> 00:16:00.486 A:middle
It means that now, directly
at the asset catalog level,

00:15:56.286 --> 00:16:00.486 A:middle
It means that now, directly
at the asset catalog level,

00:16:00.876 --> 00:16:05.056 A:middle
you can specify that an
image should be an RTL asset

00:16:06.136 --> 00:16:08.786 A:middle
or a left to right asset.

00:16:09.456 --> 00:16:11.416 A:middle
Or something that should
be automatically flipped,

00:16:12.396 --> 00:16:14.206 A:middle
directly in the asset
management system.

00:16:14.926 --> 00:16:19.606 A:middle
We also have a full session on
international user interfaces,

00:16:20.296 --> 00:16:26.626 A:middle
where you can learn more about
the improvements in iOS 10.

00:16:26.776 --> 00:16:28.546 A:middle
Now, I'd like to switch

00:16:28.546 --> 00:16:32.866 A:middle
to how you can build
better user interfaces

00:16:33.216 --> 00:16:35.636 A:middle
and interactions in iOS 10.

00:16:37.176 --> 00:16:40.086 A:middle
And the first thing is,
you need to make sure

00:16:41.176 --> 00:16:44.836 A:middle
that everybody can interact
with your application.

00:16:45.656 --> 00:16:48.146 A:middle
We have the new accessibility
inspector

00:16:48.146 --> 00:16:51.856 A:middle
and one thing you can do with
that is, it's really great,

00:16:51.856 --> 00:16:54.936 A:middle
you can connect to an
app and automatically,

00:16:55.206 --> 00:16:58.156 A:middle
immediately know the
accessibility properties

00:16:58.826 --> 00:17:00.056 A:middle
of a given UI element.

00:16:58.826 --> 00:17:00.056 A:middle
of a given UI element.

00:17:01.826 --> 00:17:03.426 A:middle
There is another
really nice feature.

00:17:07.695 --> 00:17:12.346 A:middle
You can also run an audit
on the application running

00:17:12.806 --> 00:17:14.276 A:middle
in the simulator or your device.

00:17:14.576 --> 00:17:18.425 A:middle
Just so you can have a
first hint about the kind

00:17:18.425 --> 00:17:22.226 A:middle
of problems you might want to
fix, probably you really want

00:17:22.226 --> 00:17:24.006 A:middle
to fix, with your application.

00:17:26.326 --> 00:17:32.086 A:middle
One thing though, it's just like
Xcode if you have 0 warnings

00:17:32.336 --> 00:17:34.076 A:middle
that doesn't mean that
your application is

00:17:34.076 --> 00:17:35.016 A:middle
absolutely perfect.

00:17:35.716 --> 00:17:37.666 A:middle
But, that's a great first step.

00:17:38.956 --> 00:17:41.366 A:middle
We also have a new
way to interact

00:17:41.976 --> 00:17:45.116 A:middle
with your applications
in iOS 10.

00:17:46.566 --> 00:17:50.246 A:middle
We added a new gesture,
speech recognizer,

00:17:52.016 --> 00:17:56.546 A:middle
[ Foreign Language ]

00:17:57.046 --> 00:17:58.226 A:middle
And not just for English.

00:17:59.136 --> 00:18:01.226 A:middle
And it's a very simple API.

00:17:59.136 --> 00:18:01.226 A:middle
And it's a very simple API.

00:18:02.626 --> 00:18:05.846 A:middle
The SFSpeech recognizer,
is something

00:18:05.846 --> 00:18:08.756 A:middle
that can do continuous
speech recognition.

00:18:09.676 --> 00:18:13.276 A:middle
And, you can connect
it to an audio file

00:18:14.206 --> 00:18:16.146 A:middle
or a live audio stream.

00:18:16.556 --> 00:18:22.936 A:middle
So you can do real time,
speech recognition.

00:18:23.036 --> 00:18:27.666 A:middle
You can configure it to have a
recognition that is optimized

00:18:27.986 --> 00:18:31.256 A:middle
for dictation, or for
very simple strings.

00:18:32.336 --> 00:18:35.186 A:middle
Just want to give you
an example of this API.

00:18:35.996 --> 00:18:39.876 A:middle
You create a recognizer, you
configure it with a request,

00:18:40.656 --> 00:18:42.896 A:middle
you start a task,
and we're going

00:18:42.896 --> 00:18:45.366 A:middle
to call you back with results.

00:18:46.266 --> 00:18:47.356 A:middle
Really easy to use.

00:18:47.896 --> 00:18:55.376 A:middle
We have a video in line in
the WWDC app about this API.

00:18:55.616 --> 00:19:01.136 A:middle
Another great improvement
in iOS 10 is text input.

00:18:55.616 --> 00:19:01.136 A:middle
Another great improvement
in iOS 10 is text input.

00:19:02.166 --> 00:19:06.556 A:middle
One thing you can do now is to
add information about the kind

00:19:06.556 --> 00:19:10.136 A:middle
of content you have
in your text field.

00:19:10.966 --> 00:19:15.636 A:middle
So, with that we can provide
intelligent suggestions

00:19:16.066 --> 00:19:16.776 A:middle
in quick type.

00:19:17.066 --> 00:19:20.366 A:middle
So for instance if my text
field is about location,

00:19:20.986 --> 00:19:23.636 A:middle
I'm going to see an
address in quick type.

00:19:25.266 --> 00:19:30.726 A:middle
We have many predefined
content types, for people,

00:19:30.916 --> 00:19:36.606 A:middle
you can specify first name, last
name, full name, or locations,

00:19:36.786 --> 00:19:38.976 A:middle
and in that case
that was configured

00:19:38.976 --> 00:19:41.816 A:middle
as a full street address.

00:19:43.326 --> 00:19:47.236 A:middle
Or even things like email,
telephone, credit card numbers.

00:19:50.276 --> 00:19:52.786 A:middle
Another thing about text input

00:19:53.166 --> 00:19:57.266 A:middle
and text is how you
can render text in iOS.

00:19:58.696 --> 00:20:03.636 A:middle
In iOS 7 we added support for
dynamic type and in iOS 10,

00:19:58.696 --> 00:20:03.636 A:middle
In iOS 7 we added support for
dynamic type and in iOS 10,

00:20:03.886 --> 00:20:06.996 A:middle
we are making the
content size category

00:20:06.996 --> 00:20:08.726 A:middle
for dynamic type, a trait.

00:20:09.866 --> 00:20:10.676 A:middle
So what does that mean?

00:20:11.836 --> 00:20:16.636 A:middle
Before iOS 10 the content size
category was just a property

00:20:16.846 --> 00:20:17.806 A:middle
on UI application.

00:20:19.406 --> 00:20:23.136 A:middle
And, you actually sent
the notifications.

00:20:23.996 --> 00:20:27.066 A:middle
If the user was changing,
the content size,

00:20:27.066 --> 00:20:33.156 A:middle
you had to react this
notification and update your UI.

00:20:33.346 --> 00:20:38.096 A:middle
Now, because it's integrated
as a trait, it's available

00:20:38.546 --> 00:20:40.476 A:middle
on view controllers which mean

00:20:40.476 --> 00:20:44.866 A:middle
that you can use dynamic
type in all UI extensions.

00:20:47.216 --> 00:20:51.346 A:middle
And we actually also added
support for dynamic type

00:20:51.796 --> 00:20:54.516 A:middle
in existing elements
in new UIKit.

00:20:54.956 --> 00:21:00.716 A:middle
So if you build your UI with
text field, text view, labels,

00:20:54.956 --> 00:21:00.716 A:middle
So if you build your UI with
text field, text view, labels,

00:21:01.566 --> 00:21:06.206 A:middle
and you want to react,
to the size change,

00:21:07.626 --> 00:21:10.906 A:middle
now in iOS 10 you can
use new adjust font

00:21:11.566 --> 00:21:16.326 A:middle
for content size category
and your label and text view,

00:21:16.486 --> 00:21:19.126 A:middle
text field going to
just react to that.

00:21:19.926 --> 00:21:23.246 A:middle
And your application, if you're
using audio app for instance,

00:21:23.636 --> 00:21:25.156 A:middle
will update automatically.

00:21:25.646 --> 00:21:29.396 A:middle
So I think that's a really
great feature for dynamic type,

00:21:29.396 --> 00:21:33.196 A:middle
full automatic support, for
labels, and text fields.

00:21:34.516 --> 00:21:39.666 A:middle
[ Applause ]

00:21:40.166 --> 00:21:45.136 A:middle
We also wanted to add new
customization in UIKit.

00:21:45.456 --> 00:21:48.256 A:middle
A good example is
the tab bar items,

00:21:48.776 --> 00:21:52.566 A:middle
now you can customize the batch
colors and the text attributes

00:21:52.566 --> 00:21:57.096 A:middle
in tab bar items, and you can
also customize the unselected

00:21:57.556 --> 00:21:58.036 A:middle
theme color.

00:21:58.706 --> 00:22:01.286 A:middle
So let's say that I
have a standard tab bar

00:21:58.706 --> 00:22:01.286 A:middle
So let's say that I
have a standard tab bar

00:22:01.486 --> 00:22:02.816 A:middle
that is going to look like that.

00:22:03.566 --> 00:22:11.856 A:middle
If I add this code, to my
application, that's going

00:22:11.856 --> 00:22:13.396 A:middle
to be my new tab bar UI.

00:22:14.306 --> 00:22:16.836 A:middle
Which is probably also
why I'm not a designer.

00:22:17.516 --> 00:22:24.806 A:middle
[ Applause ]

00:22:25.306 --> 00:22:27.766 A:middle
Another great customization,
in web views.

00:22:28.986 --> 00:22:33.636 A:middle
When we ship Peek and
Pop for 3D Touch iPhones,

00:22:34.646 --> 00:22:37.906 A:middle
we had a very simple API in
UIKit for view controllers.

00:22:38.266 --> 00:22:41.466 A:middle
And we had built in
support, WK web view.

00:22:42.316 --> 00:22:46.816 A:middle
And now in iOS 10, you
have fine control of Peek

00:22:46.816 --> 00:22:49.346 A:middle
and Pop behaviors
in the web view,

00:22:49.346 --> 00:22:53.816 A:middle
which means that you can
use custom view controllers

00:22:54.176 --> 00:22:55.076 A:middle
when doing a Peek.

00:22:55.696 --> 00:23:00.386 A:middle
And you can have preview
actions, and a great consequence

00:22:55.696 --> 00:23:00.386 A:middle
And you can have preview
actions, and a great consequence

00:23:00.386 --> 00:23:04.226 A:middle
of that is, when you Pop in
a web view, you can decide

00:23:04.226 --> 00:23:06.556 A:middle
to stay inside your application.

00:23:07.276 --> 00:23:13.036 A:middle
It's available as new delegate
methods on the web view class.

00:23:14.416 --> 00:23:17.966 A:middle
But, the thing that I'm really
excited about for Peek and Pop,

00:23:18.436 --> 00:23:22.146 A:middle
is the new UI preview
interaction class.

00:23:22.586 --> 00:23:27.486 A:middle
So, Peek and Pop in UIKit,
is really two things.

00:23:28.676 --> 00:23:33.646 A:middle
There is a look, this blur
effect, this nice animation

00:23:33.646 --> 00:23:35.626 A:middle
when you want to
preview something.

00:23:36.716 --> 00:23:40.706 A:middle
And there is a feel, how
do we react, to pressure,

00:23:40.946 --> 00:23:44.476 A:middle
how do we detect the intent
of the user, is that attack,

00:23:44.476 --> 00:23:46.466 A:middle
a scroll, the beginning
of a Peek?

00:23:47.426 --> 00:23:50.866 A:middle
With UI preview interaction,
what you can do is

00:23:51.246 --> 00:23:55.146 A:middle
to use a UIKit provided
implementation for the feel,

00:23:56.026 --> 00:23:58.436 A:middle
but have your own
animation for Peek and Pop.

00:23:59.446 --> 00:24:04.566 A:middle
And, that's just a new delegate
on that class, so you can know

00:23:59.446 --> 00:24:04.566 A:middle
And, that's just a new delegate
on that class, so you can know

00:24:04.566 --> 00:24:07.196 A:middle
when you move from Peek
to Pop, and we are going

00:24:07.196 --> 00:24:10.506 A:middle
to give you the progress,
the progression progress

00:24:10.506 --> 00:24:14.386 A:middle
so you can plug your own
interaction, your own animation.

00:24:14.386 --> 00:24:16.886 A:middle
You can do completely
custom Peek

00:24:16.886 --> 00:24:18.916 A:middle
and Pop UI we think
that's a really big deal.

00:24:20.516 --> 00:24:23.876 A:middle
[ Applause ]

00:24:24.376 --> 00:24:28.296 A:middle
If you want to learn everything
about Peek and Pop and 3D Touch,

00:24:28.296 --> 00:24:34.896 A:middle
we have a full session
here on Thursday at 4 p.m.

00:24:35.106 --> 00:24:39.386 A:middle
Another new thing is
something that we added

00:24:39.416 --> 00:24:41.646 A:middle
in scroll views that
you asked for.

00:24:41.646 --> 00:24:46.816 A:middle
And it's actually full support
for the UI refresh control.

00:24:48.516 --> 00:24:53.156 A:middle
[ Applause ]

00:24:53.656 --> 00:24:55.896 A:middle
It's available on
UI scroll view,

00:24:56.696 --> 00:24:58.096 A:middle
and scroll view of classes.

00:24:58.436 --> 00:25:02.006 A:middle
So we already had support for
table view and refresh control,

00:24:58.436 --> 00:25:02.006 A:middle
So we already had support for
table view and refresh control,

00:25:02.006 --> 00:25:05.466 A:middle
so it mean that now you
can use refresh control

00:25:05.796 --> 00:25:06.756 A:middle
in correction views.

00:25:08.886 --> 00:25:11.106 A:middle
Let's talk about
collection view.

00:25:12.256 --> 00:25:14.236 A:middle
That's a great feature in UIKit.

00:25:15.316 --> 00:25:18.676 A:middle
And last year we added support

00:25:18.676 --> 00:25:23.126 A:middle
for automatic self-sizing
cells in flow layout.

00:25:24.246 --> 00:25:25.696 A:middle
What you had to do before is,

00:25:25.696 --> 00:25:28.926 A:middle
you had to compute
that estimated size.

00:25:29.936 --> 00:25:32.206 A:middle
And sometimes it's not easy but,

00:25:32.316 --> 00:25:35.986 A:middle
at the UIKit level we know
what cells are going on screen.

00:25:36.406 --> 00:25:38.806 A:middle
So we have a new
mode in flow layout,

00:25:38.806 --> 00:25:42.086 A:middle
so you can pass automatic
and we're going to do

00:25:42.086 --> 00:25:44.726 A:middle
that estimation for you,
you don't need to try to do

00:25:44.726 --> 00:25:46.476 A:middle
that estimation anymore.

00:25:47.516 --> 00:25:53.546 A:middle
[ Applause ]

00:25:54.046 --> 00:25:55.806 A:middle
Do you know that we
have reordering support

00:25:55.806 --> 00:25:56.676 A:middle
in UI correction view?

00:25:57.306 --> 00:25:59.636 A:middle
We do. And we are improving

00:25:59.636 --> 00:26:03.706 A:middle
that by adding paging
support in collection view.

00:25:59.636 --> 00:26:03.706 A:middle
that by adding paging
support in collection view.

00:26:04.366 --> 00:26:07.276 A:middle
That's something that is exposed
at the scroll view level,

00:26:07.276 --> 00:26:10.256 A:middle
and correction view will now
do the right thing for you.

00:26:11.656 --> 00:26:16.776 A:middle
But, one feature this year,
that I'm really excited

00:26:16.776 --> 00:26:19.576 A:middle
about for collection view
is, smooth scrolling.

00:26:20.906 --> 00:26:23.316 A:middle
It's a real simple,
and smart idea.

00:26:24.156 --> 00:26:28.826 A:middle
So, if I have a grid,
in a collection view,

00:26:29.126 --> 00:26:31.336 A:middle
and I'm going to
scroll that grid.

00:26:32.786 --> 00:26:37.506 A:middle
At some point, I'm going to
need to bring three cells

00:26:38.076 --> 00:26:40.106 A:middle
on screen at the same time.

00:26:40.756 --> 00:26:45.566 A:middle
And if your cells are a
little bit complex to layout,

00:26:45.976 --> 00:26:48.936 A:middle
it might take some time
and you might rob a frame.

00:26:49.996 --> 00:26:50.586 A:middle
That's not great.

00:26:51.506 --> 00:26:55.496 A:middle
So what we are doing
now, is something

00:26:55.496 --> 00:26:57.146 A:middle
that we call cell prefetching.

00:26:58.756 --> 00:27:04.586 A:middle
The idea here is before we
actually need a cell on screen,

00:26:58.756 --> 00:27:04.586 A:middle
The idea here is before we
actually need a cell on screen,

00:27:05.306 --> 00:27:08.826 A:middle
we're going to ask you for
that cell, and we are not going

00:27:08.826 --> 00:27:14.246 A:middle
to ask for a cell as a block
of cell like an entire row.

00:27:14.246 --> 00:27:17.656 A:middle
We're going to ask for one
cell, then another and another.

00:27:17.876 --> 00:27:22.566 A:middle
So we're going to, amortize
the cost for the cell set

00:27:22.566 --> 00:27:24.146 A:middle
up in your application.

00:27:25.916 --> 00:27:28.686 A:middle
A great thing about
that it's automatic.

00:27:28.686 --> 00:27:32.416 A:middle
If you rebuild your
application for iOS 10,

00:27:32.886 --> 00:27:35.236 A:middle
you get that behavior
completely for free.

00:27:36.516 --> 00:27:43.936 A:middle
[ Applause ]

00:27:44.436 --> 00:27:45.576 A:middle
But there is more.

00:27:47.276 --> 00:27:54.016 A:middle
We have a new protocol, we
call that data prefetching.

00:27:54.916 --> 00:27:57.026 A:middle
Because sometimes, it's not just

00:27:57.026 --> 00:27:59.556 A:middle
about doing the layout
for your cell.

00:28:00.266 --> 00:28:01.806 A:middle
Sometimes you need
to fetch data.

00:28:03.116 --> 00:28:04.296 A:middle
You need to read from the disc.

00:28:04.596 --> 00:28:08.516 A:middle
You need to fetch data from the
network so it would be great

00:28:08.516 --> 00:28:12.396 A:middle
if we could tell you hey, we are
going to need that index fast.

00:28:13.306 --> 00:28:15.316 A:middle
So you can prepare, in advance.

00:28:17.006 --> 00:28:18.836 A:middle
That's exactly what
this new protocol does.

00:28:19.336 --> 00:28:22.966 A:middle
You implement a few delegate
methods, we're going to tell you

00:28:22.966 --> 00:28:27.066 A:middle
when we, are about
to ask for a cell

00:28:27.066 --> 00:28:28.626 A:middle
so you can have the data ready.

00:28:29.086 --> 00:28:31.836 A:middle
So that's going to improve,
again, the performance

00:28:31.836 --> 00:28:33.926 A:middle
of your collection
view based application.

00:28:34.816 --> 00:28:38.506 A:middle
And, we made also that
available on table views.

00:28:40.516 --> 00:28:45.500 A:middle
[ Applause ]

00:28:51.006 --> 00:28:55.206 A:middle
We have an entire session
about new UI collection view,

00:28:55.586 --> 00:28:57.846 A:middle
cell prefetching,
data prefetching,

00:28:58.056 --> 00:29:03.206 A:middle
reordering, don't miss this one.

00:28:58.056 --> 00:29:03.206 A:middle
reordering, don't miss this one.

00:29:04.716 --> 00:29:10.476 A:middle
But I think the major new
feature in UIKit this year,

00:29:11.276 --> 00:29:13.946 A:middle
is something that we call the
UI View Property Animator,

00:29:15.366 --> 00:29:16.776 A:middle
It's a new animation API.

00:29:18.286 --> 00:29:20.896 A:middle
It's a new animation
API that's going

00:29:20.896 --> 00:29:25.006 A:middle
to let you build
interruptible animation.

00:29:25.526 --> 00:29:29.476 A:middle
Animation you can scrub,
animation you can reverse.

00:29:30.806 --> 00:29:34.626 A:middle
We are exposing a new
set of timing curves.

00:29:35.156 --> 00:29:37.076 A:middle
And it's fully dynamic.

00:29:37.886 --> 00:29:39.676 A:middle
You can add animation
on the fly.

00:29:40.236 --> 00:29:44.416 A:middle
And the way, I describe
that new API is,

00:29:45.046 --> 00:29:47.996 A:middle
just like a timeline in a movie.

00:29:48.316 --> 00:29:52.666 A:middle
Something that you can
scrub, post, play, reverse.

00:29:53.216 --> 00:29:57.536 A:middle
The model is really simple,
it's really easy to use.

00:29:58.446 --> 00:30:02.206 A:middle
You just have to
create a new animator.

00:29:58.446 --> 00:30:02.206 A:middle
You just have to
create a new animator.

00:30:03.536 --> 00:30:05.996 A:middle
You set the timing
parameters and the duration,

00:30:06.356 --> 00:30:07.576 A:middle
you add your animation.

00:30:08.036 --> 00:30:10.346 A:middle
And you start the animation,
and because you have an object

00:30:10.896 --> 00:30:14.566 A:middle
that represent that animation,
that's how you can post that

00:30:15.066 --> 00:30:17.386 A:middle
or change its progress.

00:30:19.046 --> 00:30:20.976 A:middle
It's also fully integrated

00:30:21.196 --> 00:30:24.816 A:middle
in the view controller
operation system and we're going

00:30:24.816 --> 00:30:28.456 A:middle
to explain everything
about that,

00:30:28.456 --> 00:30:31.916 A:middle
in Advances in UI Animation
and Techniques this Wednesday.

00:30:32.946 --> 00:30:36.976 A:middle
But I'd like to show you,
what you can build with that.

00:30:37.796 --> 00:30:43.896 A:middle
So, this is a very simple
photo app, that's something

00:30:43.896 --> 00:30:47.216 A:middle
that you could do before,
have customization transition

00:30:47.986 --> 00:30:49.156 A:middle
in a navigation controller.

00:30:50.116 --> 00:30:54.996 A:middle
But with this animation API,
I can start the transition,

00:30:55.526 --> 00:31:00.596 A:middle
catch that mid flight
with a gesture, move it,

00:30:55.526 --> 00:31:00.596 A:middle
catch that mid flight
with a gesture, move it,

00:31:01.736 --> 00:31:08.786 A:middle
release it, and catch
that again.

00:31:08.996 --> 00:31:10.776 A:middle
I'm going to reverse
my transition,

00:31:11.756 --> 00:31:13.106 A:middle
and let the animation finish.

00:31:14.196 --> 00:31:16.266 A:middle
And what's amazing about that,

00:31:17.266 --> 00:31:19.306 A:middle
is that it's just
one transition.

00:31:19.706 --> 00:31:24.416 A:middle
So we are moving the same
context from non-interactive

00:31:25.126 --> 00:31:29.016 A:middle
to interactive gesture driven
to non-interactive again,

00:31:29.316 --> 00:31:32.186 A:middle
to gesture driven to
interactive to non-interactive.

00:31:32.406 --> 00:31:36.206 A:middle
You can fully blend
gestured based interactions

00:31:36.686 --> 00:31:37.476 A:middle
and animation.

00:31:37.476 --> 00:31:40.336 A:middle
We think that's a great
feature, we cannot wait

00:31:40.336 --> 00:31:41.996 A:middle
to see what you're going
to build with that.

00:31:43.516 --> 00:31:50.166 A:middle
[ Applause ]

00:31:50.666 --> 00:31:56.296 A:middle
Now, I'd like to talk about some
new features we have in iOS 10.

00:31:59.696 --> 00:32:04.106 A:middle
And the key thing here
is, there's nothing

00:31:59.696 --> 00:32:04.106 A:middle
And the key thing here
is, there's nothing

00:32:04.106 --> 00:32:06.186 A:middle
that you absolutely
need to adopt.

00:32:06.636 --> 00:32:09.176 A:middle
No, it's quite the opposite,
what can we do to help you.

00:32:09.786 --> 00:32:11.746 A:middle
We have new feature
that we think are going

00:32:11.746 --> 00:32:14.436 A:middle
to make your application better.

00:32:15.936 --> 00:32:18.956 A:middle
Features are going to
simplify your architecture.

00:32:20.296 --> 00:32:23.376 A:middle
Things that are going to measure
application more integrated.

00:32:24.356 --> 00:32:26.996 A:middle
A good example of that
is something very simple.

00:32:27.566 --> 00:32:30.106 A:middle
Is how we changed, openURL.

00:32:30.946 --> 00:32:33.756 A:middle
So first, we made
that asynchronous

00:32:34.456 --> 00:32:40.356 A:middle
with a completion handler but we
also added for universal links.

00:32:40.666 --> 00:32:43.796 A:middle
So you know universal link
is when you open a URL,

00:32:44.986 --> 00:32:46.836 A:middle
to a social network
for instance,

00:32:46.836 --> 00:32:50.606 A:middle
if you have a native app it's
going to open the native app.

00:32:51.496 --> 00:32:55.146 A:middle
But now, with this new
API, you can actually check

00:32:56.386 --> 00:33:00.206 A:middle
if there was an application
on the system install.

00:32:56.386 --> 00:33:00.206 A:middle
if there was an application
on the system install.

00:33:00.936 --> 00:33:04.396 A:middle
So if there was not, you can
stay in your application,

00:33:04.396 --> 00:33:07.876 A:middle
you can still keep
the experience instead

00:33:07.876 --> 00:33:10.356 A:middle
of opening [inaudible]
for instance.

00:33:10.856 --> 00:33:13.736 A:middle
So that's going to really
improve how you can integrate

00:33:14.036 --> 00:33:17.216 A:middle
content and deal with those
application in the system.

00:33:18.636 --> 00:33:23.306 A:middle
Another great feature, is the
changes we made to Core Data.

00:33:24.536 --> 00:33:29.136 A:middle
The first one is something
that we call, query generation.

00:33:30.026 --> 00:33:35.276 A:middle
The idea here is, it's quite
common to have a context

00:33:35.276 --> 00:33:39.956 A:middle
for your menu I and
that you're doing work

00:33:40.126 --> 00:33:43.796 A:middle
on background queues,
in separate context.

00:33:44.776 --> 00:33:47.296 A:middle
And what you can do is
query generation is,

00:33:47.776 --> 00:33:54.006 A:middle
you can actually pin,
your model on your menu i,

00:33:54.776 --> 00:33:58.666 A:middle
you can control exactly when you
want to move from one version,

00:33:59.346 --> 00:34:01.266 A:middle
to another version
of your model.

00:33:59.346 --> 00:34:01.266 A:middle
to another version
of your model.

00:34:01.946 --> 00:34:06.226 A:middle
So it mean that you don't have
to deal with force anymore,

00:34:06.316 --> 00:34:07.976 A:middle
because something changed
in the background queue

00:34:07.976 --> 00:34:12.686 A:middle
because you can decide exactly
when the menu i should move

00:34:13.136 --> 00:34:14.326 A:middle
to a new version of your data.

00:34:15.036 --> 00:34:16.706 A:middle
That's a really great way

00:34:16.706 --> 00:34:20.266 A:middle
to simplify your core data
code in your applications.

00:34:20.746 --> 00:34:24.656 A:middle
The other feature is,
about connection pooling.

00:34:25.186 --> 00:34:27.426 A:middle
Now in a store we
have full support

00:34:27.426 --> 00:34:31.036 A:middle
for a multiple reader,
one writer mode.

00:34:31.036 --> 00:34:33.775 A:middle
That's going to give you
great performance enhancement.

00:34:34.306 --> 00:34:39.636 A:middle
We also have, new features on
the tool side, but for that,

00:34:40.106 --> 00:34:42.235 A:middle
I suggest you go
to the What's New

00:34:42.235 --> 00:34:45.606 A:middle
in Core Data session on Friday.

00:34:47.446 --> 00:34:48.806 A:middle
Another way to model data

00:34:48.806 --> 00:34:50.886 A:middle
in your application
is to use CloudKit.

00:34:50.886 --> 00:34:56.235 A:middle
So CloudKit, we already had
to hold for public databases,

00:34:56.996 --> 00:35:00.616 A:middle
and private per user databases.

00:34:56.996 --> 00:35:00.616 A:middle
and private per user databases.

00:35:01.216 --> 00:35:04.646 A:middle
And what we are adding in
iOS 10 is record sharing.

00:35:05.196 --> 00:35:09.656 A:middle
So you can have multiple users,
accessing the same record.

00:35:09.986 --> 00:35:12.686 A:middle
So that's going to open
a completely new class

00:35:13.136 --> 00:35:14.766 A:middle
of application with CloudKit.

00:35:16.336 --> 00:35:17.086 A:middle
So that's great.

00:35:17.776 --> 00:35:21.426 A:middle
But something that is
sometimes, difficult to do

00:35:21.426 --> 00:35:26.146 A:middle
with collaboration based app,
is how to deal with the UI flow.

00:35:26.146 --> 00:35:30.546 A:middle
How do you invite person to
collaborate on a document?

00:35:31.466 --> 00:35:34.856 A:middle
How do you do that in a way
that is going to be secure?

00:35:35.496 --> 00:35:39.856 A:middle
So we added the new UI
cloud sharing controller.

00:35:40.366 --> 00:35:42.466 A:middle
Which is a view controller
expose by UIKit

00:35:42.466 --> 00:35:47.866 A:middle
and it's really easy to use
just pass the new share object

00:35:48.046 --> 00:35:50.876 A:middle
that is going to control
record sharing in CloudKit.

00:35:51.386 --> 00:35:55.716 A:middle
And we're going to generate
automatically for you that UI

00:35:56.056 --> 00:36:00.446 A:middle
to manage the invitation
flow, and the invitee list.

00:35:56.056 --> 00:36:00.446 A:middle
to manage the invitation
flow, and the invitee list.

00:36:01.206 --> 00:36:04.096 A:middle
That's really easy to build
a collaboration based app

00:36:04.496 --> 00:36:05.296 A:middle
in CloudKit.

00:36:05.916 --> 00:36:07.816 A:middle
We have an entire
session on CloudKit,

00:36:07.816 --> 00:36:10.316 A:middle
What's New with CloudKit,
that's going to be

00:36:10.316 --> 00:36:11.906 A:middle
in Presidio on Thursday.

00:36:14.096 --> 00:36:18.656 A:middle
Now, I'd like to talk
about NS user activity.

00:36:19.526 --> 00:36:23.586 A:middle
NS user activity is
a class that we use

00:36:23.586 --> 00:36:26.816 A:middle
to capture the state,
of your application.

00:36:27.436 --> 00:36:30.496 A:middle
And, we are using that already,

00:36:30.826 --> 00:36:34.136 A:middle
for things like Handoff
and Spotlight.

00:36:34.856 --> 00:36:38.506 A:middle
What we are doing now, in iOS
10, is we are adding support

00:36:38.506 --> 00:36:41.156 A:middle
for locations in user activity.

00:36:41.156 --> 00:36:45.136 A:middle
So if I'm in an application
that deals with addresses,

00:36:45.756 --> 00:36:49.316 A:middle
I can express that, the
current activity for the user,

00:36:50.806 --> 00:36:52.066 A:middle
is about this address.

00:36:52.316 --> 00:36:56.936 A:middle
So you just pass a map kit item
you attach that to the activity

00:36:57.006 --> 00:37:02.006 A:middle
and now you understand how
I build that suggestion

00:36:57.006 --> 00:37:02.006 A:middle
and now you understand how
I build that suggestion

00:37:02.096 --> 00:37:04.136 A:middle
in the text field
a few minutes ago.

00:37:04.556 --> 00:37:07.916 A:middle
The system will notice
that, oh maybe this app,

00:37:08.706 --> 00:37:10.156 A:middle
is dealing with these addresses.

00:37:10.326 --> 00:37:12.006 A:middle
So that's probably a
very good suggestion

00:37:12.006 --> 00:37:14.756 A:middle
for a text filed
about an address.

00:37:15.036 --> 00:37:18.476 A:middle
That's going to open completely
automatically for you,

00:37:19.146 --> 00:37:20.606 A:middle
if you had options
under activity.

00:37:21.396 --> 00:37:25.576 A:middle
We have many new ways you
can use to increase usage

00:37:25.576 --> 00:37:29.186 A:middle
of your application with what
we call proactive suggestion

00:37:29.186 --> 00:37:33.746 A:middle
which is this intelligence
based, activity based,

00:37:33.746 --> 00:37:36.436 A:middle
features in iOS 10,
on your applications.

00:37:37.946 --> 00:37:45.996 A:middle
Another place, where we use
NS user activity is in search.

00:37:46.746 --> 00:37:51.096 A:middle
So in iOS 9, we added support
for indexed activities.

00:37:51.876 --> 00:37:57.776 A:middle
It was real easy to use,
we just create an activity

00:37:57.776 --> 00:37:59.806 A:middle
and pass text field information

00:37:59.806 --> 00:38:02.146 A:middle
and that would just
show in Spotlight.

00:37:59.806 --> 00:38:02.146 A:middle
and that would just
show in Spotlight.

00:38:02.996 --> 00:38:04.816 A:middle
But now what you can do is,

00:38:05.476 --> 00:38:07.936 A:middle
we have a new button
here, search in app.

00:38:09.006 --> 00:38:13.796 A:middle
And, your user can now go
back, directly to your app,

00:38:14.016 --> 00:38:18.256 A:middle
and you can continue
search automatically

00:38:18.566 --> 00:38:19.696 A:middle
in your own application.

00:38:20.376 --> 00:38:22.236 A:middle
It's real easy to adopt.

00:38:22.236 --> 00:38:26.426 A:middle
Step one, you need to add,
a new key to your info plist

00:38:27.636 --> 00:38:31.066 A:middle
to tell us that you support
Spotlight continuation.

00:38:31.616 --> 00:38:36.946 A:middle
The second step is to
implement a new UI application

00:38:36.946 --> 00:38:37.716 A:middle
delegate method.

00:38:38.676 --> 00:38:40.906 A:middle
It's real easy to implement.

00:38:41.606 --> 00:38:45.206 A:middle
We are giving you the user
activity, you can build the UI

00:38:45.246 --> 00:38:48.496 A:middle
and display the search,
continued in your application.

00:38:49.836 --> 00:38:54.576 A:middle
The recent thing new also
with search, last year,

00:38:55.606 --> 00:38:57.916 A:middle
we added support for
indexing your content

00:38:58.206 --> 00:38:59.196 A:middle
with Core Spotlight.

00:39:00.066 --> 00:39:05.256 A:middle
But now you can actually search
for your data in Spotlight.

00:39:05.296 --> 00:39:07.346 A:middle
We are opening the
Spotlight index.

00:39:07.966 --> 00:39:09.416 A:middle
And that's great
because we have,

00:39:10.136 --> 00:39:14.636 A:middle
a fully optimized implementation
of that index for power

00:39:14.836 --> 00:39:18.866 A:middle
and performance and we have
very powerful quarry model.

00:39:19.406 --> 00:39:21.246 A:middle
So it's real easy to use.

00:39:22.416 --> 00:39:28.536 A:middle
You just build a search
query, you pass a request

00:39:29.296 --> 00:39:32.396 A:middle
and you can search the
Spotlight index for your data.

00:39:32.806 --> 00:39:37.416 A:middle
So you can integrate
system indexed data and data

00:39:37.416 --> 00:39:40.206 A:middle
from [inaudible] coming from a
network for your application.

00:39:41.166 --> 00:39:46.256 A:middle
We have a new session, this year
about search APIs that's going

00:39:46.256 --> 00:39:48.406 A:middle
to cover continuation,

00:39:49.246 --> 00:39:51.626 A:middle
Core Spotlight search,
and other features.

00:39:56.576 --> 00:39:59.836 A:middle
We shipped Replay
Kit, that was a way

00:39:59.836 --> 00:40:01.866 A:middle
to record your screen
in your application.

00:39:59.836 --> 00:40:01.866 A:middle
to record your screen
in your application.

00:40:02.306 --> 00:40:06.756 A:middle
In iOS 10, you can use
Replay Kit as a live stream.

00:40:07.756 --> 00:40:10.366 A:middle
So you can have live
broadcasting,

00:40:10.906 --> 00:40:14.766 A:middle
of your application and because
we are also providing extension

00:40:14.766 --> 00:40:18.666 A:middle
point, it mean that third-party
services can give you

00:40:19.116 --> 00:40:21.486 A:middle
that live broadcast ability.

00:40:21.486 --> 00:40:25.086 A:middle
And we are using that for
instance, in playgrounds.

00:40:29.336 --> 00:40:32.966 A:middle
Another great framework
is SceneKit.

00:40:34.846 --> 00:40:38.676 A:middle
SceneKit is really powerful
3D engine you can use

00:40:38.676 --> 00:40:43.066 A:middle
to integrate 3D interactive
component in your application.

00:40:44.166 --> 00:40:47.466 A:middle
The major new feature of
this year is a completely new

00:40:47.766 --> 00:40:50.606 A:middle
rendering engine,
physically based rendering.

00:40:52.006 --> 00:40:55.896 A:middle
I could say that it now
supports high dynamic range

00:40:56.526 --> 00:40:59.456 A:middle
or is internally using
a linear cross space.

00:40:59.456 --> 00:41:01.046 A:middle
But I think that's
better to show you.

00:40:59.456 --> 00:41:01.046 A:middle
But I think that's
better to show you.

00:41:02.246 --> 00:41:05.996 A:middle
This is your fire
truck on iOS 9.

00:41:07.026 --> 00:41:10.026 A:middle
This is your fire
truck on iOS 10.

00:41:10.836 --> 00:41:11.766 A:middle
That's really amazing.

00:41:12.516 --> 00:41:16.916 A:middle
[ Applause ]

00:41:17.416 --> 00:41:19.736 A:middle
And it's now available
on the Watch OS 2.

00:41:20.556 --> 00:41:23.406 A:middle
We have a full session of
SceneKit Rendering in Presidio.

00:41:26.656 --> 00:41:29.476 A:middle
Then I'd like to
talk about Apple Pay.

00:41:30.766 --> 00:41:31.896 A:middle
Two things about Apple Pay.

00:41:33.536 --> 00:41:38.186 A:middle
First, we are extending
how Apple Pay is going

00:41:38.186 --> 00:41:40.316 A:middle
to be available to your users.

00:41:41.096 --> 00:41:46.306 A:middle
Today, Apple Pay is on
iOS and on the Watch,

00:41:46.686 --> 00:41:49.416 A:middle
and as you learned
yesterday, we are expanding

00:41:49.416 --> 00:41:51.486 A:middle
that Apple Pay on the web.

00:41:52.186 --> 00:41:54.626 A:middle
We have support for
Apple Pay on the Mac.

00:41:54.806 --> 00:41:57.456 A:middle
So for users, Apple
Pay is everywhere.

00:41:58.676 --> 00:42:01.486 A:middle
But what's great
is, as a developer,

00:41:58.676 --> 00:42:01.486 A:middle
But what's great
is, as a developer,

00:42:02.136 --> 00:42:04.406 A:middle
we already have support
for Apple Pay

00:42:04.506 --> 00:42:06.796 A:middle
in your UIKit based application.

00:42:07.446 --> 00:42:10.706 A:middle
But now, you can use
Apple Pay in Safari

00:42:10.706 --> 00:42:12.906 A:middle
with the new Javascript
framework.

00:42:13.366 --> 00:42:16.966 A:middle
But it could also mean
that, you can use Apple Pay

00:42:17.356 --> 00:42:20.536 A:middle
in your [inaudible]
Safari view controllers.

00:42:21.356 --> 00:42:24.236 A:middle
The other place where you
can use Apple Pay now,

00:42:24.726 --> 00:42:26.976 A:middle
is in non-UI code.

00:42:28.006 --> 00:42:31.086 A:middle
We have a new API,
for non-UI extensions.

00:42:31.456 --> 00:42:36.346 A:middle
And using Apple Pay in
extension, is, really amazing,

00:42:36.346 --> 00:42:39.196 A:middle
that's a great feature for
instant for your iMessage apps.

00:42:39.526 --> 00:42:43.626 A:middle
This is the kind of flow
you can now build directly

00:42:43.626 --> 00:42:45.516 A:middle
in messages with an extension.

00:42:45.886 --> 00:42:50.316 A:middle
I would like to point you to
the two session on Apple Pay.

00:42:50.696 --> 00:42:52.286 A:middle
The first one that
is unfortunately

00:42:52.286 --> 00:42:54.756 A:middle
at the same time
Apple Pay on the Web.

00:42:54.856 --> 00:42:57.646 A:middle
And just after that,
there is What's New

00:42:57.646 --> 00:42:58.866 A:middle
in Wallet in Apple Pay.

00:43:01.636 --> 00:43:08.406 A:middle
I would like to, finish with
how you can make iOS better.

00:43:08.756 --> 00:43:11.616 A:middle
How you can integrate with iOS.

00:43:12.136 --> 00:43:17.556 A:middle
We have major new
extension points in iOS 10,

00:43:18.046 --> 00:43:21.266 A:middle
messages, Siri, CallKit.

00:43:22.166 --> 00:43:25.006 A:middle
We also improved
existing extension,

00:43:25.006 --> 00:43:26.946 A:middle
for instance something
like keyboards,

00:43:27.346 --> 00:43:33.206 A:middle
now you can use the same
globe key, keyboard peeker

00:43:33.526 --> 00:43:35.346 A:middle
from your keyboard extension.

00:43:35.346 --> 00:43:38.706 A:middle
We can also give you
hints about the language,

00:43:39.066 --> 00:43:40.876 A:middle
the user is interacting with.

00:43:41.256 --> 00:43:43.576 A:middle
So you can build
multi-language support

00:43:43.576 --> 00:43:45.116 A:middle
in your third-party extension.

00:43:46.276 --> 00:43:49.106 A:middle
Another thing that we
improved in iOS 10,

00:43:49.486 --> 00:43:51.686 A:middle
is the new display
modes for widgets.

00:43:52.246 --> 00:43:57.386 A:middle
So, before, you were just,
you just had to pass us

00:43:57.386 --> 00:43:58.506 A:middle
with you preferred size.

00:43:59.006 --> 00:44:02.006 A:middle
Now we have a user
controlled size.

00:43:59.006 --> 00:44:02.006 A:middle
Now we have a user
controlled size.

00:44:02.406 --> 00:44:08.226 A:middle
The compact mode, which is fixed
height and the expanded mode

00:44:08.426 --> 00:44:09.596 A:middle
which is variable height.

00:44:10.196 --> 00:44:12.516 A:middle
It's really easy to adopt.

00:44:12.516 --> 00:44:14.566 A:middle
You don't have to do
anything, but we have new API

00:44:14.726 --> 00:44:17.836 A:middle
so you can know when the
widgets are going to move

00:44:17.836 --> 00:44:19.796 A:middle
from compact to extended.

00:44:20.206 --> 00:44:23.536 A:middle
You can give us a maximum size,
you can know the display mode.

00:44:23.536 --> 00:44:26.356 A:middle
You can customize the
information you want to display.

00:44:27.106 --> 00:44:30.226 A:middle
There is one thing that,
I'd like to point out about,

00:44:30.226 --> 00:44:35.006 A:middle
widget though is, this is going
to appear on the lock screen.

00:44:36.066 --> 00:44:41.146 A:middle
So, be careful about the kind
of data you're presenting here.

00:44:41.776 --> 00:44:47.476 A:middle
One thing to keep in mind is,
be consistent with the kind

00:44:47.476 --> 00:44:49.836 A:middle
of data you're presenting
in your widget.

00:44:50.126 --> 00:44:52.596 A:middle
If I configure, if
I add your widget

00:44:52.596 --> 00:44:54.446 A:middle
to my home screen,
the lock screen.

00:44:55.516 --> 00:44:58.556 A:middle
I expect that I'm always going
to see the same kind of data

00:44:58.556 --> 00:45:01.606 A:middle
at the same level of privacy
and that I'm not going

00:44:58.556 --> 00:45:01.606 A:middle
at the same level of privacy
and that I'm not going

00:45:01.606 --> 00:45:05.326 A:middle
to be surprised by thing
that I don't want to see

00:45:05.636 --> 00:45:07.786 A:middle
on my lock screen when
my iPhone is locked.

00:45:10.476 --> 00:45:14.966 A:middle
A completely new framework in
iOS 10 is user notifications.

00:45:15.656 --> 00:45:21.286 A:middle
So user notification, that's
something that we used to have

00:45:21.876 --> 00:45:23.606 A:middle
at the UI application level.

00:45:24.216 --> 00:45:27.806 A:middle
We have a new framework but, we
are exposing the same features.

00:45:28.306 --> 00:45:30.426 A:middle
We are adding a few
enhancement there.

00:45:30.576 --> 00:45:35.506 A:middle
First, we are unifying local
and remote notification.

00:45:35.806 --> 00:45:37.806 A:middle
So much easier to deal with.

00:45:38.516 --> 00:45:43.976 A:middle
[ Applause ]

00:45:44.476 --> 00:45:48.076 A:middle
You have better control on
how you're going to deliver,

00:45:48.526 --> 00:45:51.426 A:middle
how we are going to deliver
notification to the user.

00:45:52.706 --> 00:45:55.486 A:middle
Another great thing is,
we're going to tell you,

00:45:57.056 --> 00:45:58.916 A:middle
before displaying
the notification.

00:45:59.446 --> 00:46:02.606 A:middle
So in-app, you have
better control

00:45:59.446 --> 00:46:02.606 A:middle
So in-app, you have
better control

00:46:02.726 --> 00:46:04.316 A:middle
on the notification itself.

00:46:05.896 --> 00:46:10.786 A:middle
And, that's also a unified model
across all different platforms.

00:46:12.596 --> 00:46:15.876 A:middle
In addition to these
API enhancements,

00:46:17.016 --> 00:46:18.726 A:middle
we also have two extensions.

00:46:19.706 --> 00:46:22.736 A:middle
The first one is the
service extension.

00:46:24.076 --> 00:46:27.516 A:middle
The service extension is
something that you can insert,

00:46:28.256 --> 00:46:33.546 A:middle
on the device when we are
receiving the notification

00:46:33.546 --> 00:46:35.686 A:middle
and before, it's
actually displayed.

00:46:36.026 --> 00:46:41.586 A:middle
So you can process the payload
before it appears on the screen.

00:46:42.316 --> 00:46:46.666 A:middle
And, two great use cases, the
thing you can build with that.

00:46:47.636 --> 00:46:53.296 A:middle
You can have media attachment,
the payload is pretty small.

00:46:53.976 --> 00:46:57.346 A:middle
But if you know what you want
to display for a given, payload,

00:46:57.346 --> 00:47:00.726 A:middle
you can, when receiving
that notification,

00:46:57.346 --> 00:47:00.726 A:middle
you can, when receiving
that notification,

00:47:01.046 --> 00:47:02.606 A:middle
fetch that and display.

00:47:02.606 --> 00:47:07.026 A:middle
And the other great feature
is end to end encryption,

00:47:07.596 --> 00:47:10.466 A:middle
because now you're in
charge, on both sides.

00:47:10.856 --> 00:47:13.406 A:middle
On the server and
of the local device.

00:47:13.906 --> 00:47:15.246 A:middle
So you can receive something,

00:47:15.806 --> 00:47:17.986 A:middle
and decrypt that
in your own code.

00:47:17.986 --> 00:47:20.366 A:middle
We think that's a
great new feature

00:47:20.706 --> 00:47:22.586 A:middle
and great new possibility
for extensions.

00:47:23.516 --> 00:47:29.746 A:middle
[ Applause ]

00:47:30.246 --> 00:47:32.826 A:middle
This is the other
extension we have

00:47:33.016 --> 00:47:35.756 A:middle
for the user notification
framework.

00:47:36.526 --> 00:47:41.636 A:middle
You can have embedded UI
views in your notification.

00:47:42.716 --> 00:47:46.266 A:middle
There is one restriction though,
you cannot directly interact,

00:47:47.346 --> 00:47:51.246 A:middle
with the view, but you have
the notification actions.

00:47:52.086 --> 00:47:56.956 A:middle
We have two session on user
notifications, Introduction

00:47:56.956 --> 00:47:59.046 A:middle
to Notification and
Advanced Notification

00:47:59.556 --> 00:48:00.886 A:middle
in Pacific Heights on Wednesday.

00:47:59.556 --> 00:48:00.886 A:middle
in Pacific Heights on Wednesday.

00:48:02.746 --> 00:48:07.226 A:middle
Another new framework in
iOS 10 is CallKit and again,

00:48:07.226 --> 00:48:09.926 A:middle
we are offering a new
extension point here.

00:48:11.306 --> 00:48:13.316 A:middle
The directory extension,

00:48:13.676 --> 00:48:18.516 A:middle
we let you configure how we
should block incoming calls.

00:48:19.656 --> 00:48:20.996 A:middle
You have full control on that.

00:48:22.126 --> 00:48:27.746 A:middle
The second feature is, how
we identify a phone number

00:48:28.066 --> 00:48:29.136 A:middle
and display our label.

00:48:29.686 --> 00:48:32.836 A:middle
So when we receive a call,
we first going to check

00:48:32.836 --> 00:48:37.246 A:middle
in the address book and then
if we cannot find a match,

00:48:37.756 --> 00:48:39.186 A:middle
we can add your extension.

00:48:39.776 --> 00:48:42.056 A:middle
It's real easy to use API.

00:48:43.196 --> 00:48:45.576 A:middle
It's non-UI extension point.

00:48:45.926 --> 00:48:47.716 A:middle
It's really two methods.

00:48:48.416 --> 00:48:51.596 A:middle
But the real great new feature

00:48:51.826 --> 00:48:55.496 A:middle
in CallKit is the
call provider API.

00:48:56.496 --> 00:48:58.126 A:middle
With the call provider API,

00:48:58.926 --> 00:49:01.936 A:middle
we have a real first
party experience

00:48:58.926 --> 00:49:01.936 A:middle
we have a real first
party experience

00:49:02.416 --> 00:49:05.156 A:middle
for your voice over
IP application.

00:49:05.516 --> 00:49:07.766 A:middle
Which mean that now,
you can have something

00:49:07.766 --> 00:49:10.556 A:middle
like full screen
incoming call UI

00:49:11.306 --> 00:49:12.826 A:middle
when you receive a
call in your app.

00:49:13.276 --> 00:49:14.306 A:middle
But it's not just that,

00:49:15.106 --> 00:49:17.336 A:middle
we are fully integrating
your application

00:49:18.166 --> 00:49:20.766 A:middle
with a core management on iOS.

00:49:21.096 --> 00:49:25.676 A:middle
And things like,
favorites and recents,

00:49:25.676 --> 00:49:29.416 A:middle
we are automatically get, the
calls from your application.

00:49:30.876 --> 00:49:33.136 A:middle
You can support Siri,
you can support CarPlay,

00:49:33.256 --> 00:49:36.496 A:middle
you will be integrated with
do not disturb and Bluetooth.

00:49:36.736 --> 00:49:39.256 A:middle
That's a major new
feature for a mobile hone.

00:49:40.516 --> 00:49:43.936 A:middle
[ Applause ]

00:49:44.436 --> 00:49:47.186 A:middle
We can learn all about
that in the Enhancing Voice

00:49:47.186 --> 00:49:49.266 A:middle
Over IP apps with CallKit.

00:49:49.846 --> 00:49:54.846 A:middle
I'd like to talk about Siri.

00:49:56.156 --> 00:49:59.846 A:middle
So, you might not
know about that.

00:50:00.486 --> 00:50:05.066 A:middle
But Siri is actually
something that is different,

00:50:05.736 --> 00:50:07.006 A:middle
depending on the context.

00:50:07.006 --> 00:50:11.516 A:middle
So if you're using Siri,
from the home screen

00:50:11.786 --> 00:50:15.866 A:middle
with the home button, or if
you're using Siri with hey Siri,

00:50:16.946 --> 00:50:19.576 A:middle
or if you're using
Siri with CarPlay,

00:50:20.926 --> 00:50:23.036 A:middle
or as an accessibility feature.

00:50:24.146 --> 00:50:27.956 A:middle
Siri is going to tune
itself to that context

00:50:28.166 --> 00:50:31.706 A:middle
so you can have the best
possible interaction with Siri.

00:50:33.446 --> 00:50:34.996 A:middle
It's a quite complex task.

00:50:35.306 --> 00:50:38.396 A:middle
Because it's involved
the recognition phase,

00:50:39.776 --> 00:50:42.996 A:middle
understanding the domain,
understanding the environment,

00:50:43.346 --> 00:50:46.306 A:middle
and that's something that we
are going to do for you for free

00:50:46.896 --> 00:50:50.026 A:middle
when you build a
SiriKit extension.

00:50:50.486 --> 00:50:51.866 A:middle
What we're going to give you,

00:50:52.396 --> 00:50:55.406 A:middle
is an intent representing
the request,

00:50:55.466 --> 00:50:59.426 A:middle
and that's how your extension
will interact with that.

00:51:00.396 --> 00:51:05.816 A:middle
And, you can also help Siri
by giving your own vocabulary,

00:51:06.346 --> 00:51:10.036 A:middle
which might be specific to your
app, or specific to the user,

00:51:10.396 --> 00:51:13.426 A:middle
so we can again,
tune the recognition

00:51:13.866 --> 00:51:16.006 A:middle
of the interaction with Siri.

00:51:17.156 --> 00:51:18.146 A:middle
So how did that work?

00:51:18.296 --> 00:51:21.376 A:middle
The idea behind intents
extension is,

00:51:22.256 --> 00:51:25.926 A:middle
it's a non-UI extension that
will represent that interaction

00:51:25.926 --> 00:51:28.306 A:middle
between Siri and
your application.

00:51:29.556 --> 00:51:32.206 A:middle
So it's based on the
concept of intents,

00:51:32.576 --> 00:51:34.486 A:middle
coming from Siri and responses.

00:51:34.786 --> 00:51:36.576 A:middle
And the main idea here is,

00:51:36.946 --> 00:51:39.926 A:middle
intents are a domain
specific thing.

00:51:40.246 --> 00:51:41.926 A:middle
So you have the messaging
domain,

00:51:42.426 --> 00:51:44.096 A:middle
the payment domain, etcetera.

00:51:44.306 --> 00:51:47.506 A:middle
And for messaging, you
have a list of intents

00:51:47.806 --> 00:51:52.046 A:middle
that Siri can recognize
and interact and send

00:51:52.046 --> 00:51:55.626 A:middle
to your application for
[inaudible] Siri interaction.

00:51:56.346 --> 00:52:01.306 A:middle
So the main goal here, for
Siri intents, extension is

00:51:56.346 --> 00:52:01.306 A:middle
So the main goal here, for
Siri intents, extension is

00:52:01.306 --> 00:52:05.686 A:middle
to make sure that, you and
Siri are on the same page

00:52:05.966 --> 00:52:07.686 A:middle
when Siri understood a request.

00:52:08.066 --> 00:52:11.456 A:middle
That valid request, that we need
to have a confirmation on that,

00:52:11.456 --> 00:52:15.226 A:middle
let's execute the request,
that's basically the flow.

00:52:15.726 --> 00:52:19.076 A:middle
And when you use Siri
to say something like,

00:52:19.446 --> 00:52:23.146 A:middle
"tell Miko on WWDC chat
that we need to meet

00:52:23.146 --> 00:52:26.186 A:middle
after this session," what
Siri is going to encode

00:52:26.186 --> 00:52:30.366 A:middle
in the intent is the fact that,
it's in the messaging domain.

00:52:30.796 --> 00:52:34.166 A:middle
It's the same messaging intent,
there is a receipt in here,

00:52:34.556 --> 00:52:37.296 A:middle
that's about your app and
we have content from you.

00:52:37.866 --> 00:52:41.986 A:middle
We have a second
extension for Siri Kit

00:52:42.476 --> 00:52:44.366 A:middle
that the intents UI extension.

00:52:44.996 --> 00:52:46.786 A:middle
It's actually an
optional extension.

00:52:47.326 --> 00:52:51.826 A:middle
But with that you can embed
your own UI into Siri transcript

00:52:51.996 --> 00:52:55.696 A:middle
so you can have a confirmation
that is tune to your content.

00:52:56.106 --> 00:52:57.036 A:middle
That's really great.

00:52:58.246 --> 00:53:02.336 A:middle
And, another great thing
about the intent system is,

00:52:58.246 --> 00:53:02.336 A:middle
And, another great thing
about the intent system is,

00:53:03.026 --> 00:53:05.626 A:middle
it's not just about Siri.

00:53:05.626 --> 00:53:09.326 A:middle
It's a way to describe the
request, of course we use

00:53:09.326 --> 00:53:12.456 A:middle
that in Siri to communicate
with your app.

00:53:13.106 --> 00:53:15.896 A:middle
But, that's also how we
integrate with CallKit,

00:53:16.216 --> 00:53:20.206 A:middle
that's how we do the right
sharing extension in maps.

00:53:20.206 --> 00:53:22.436 A:middle
And the reason the
feature that is,

00:53:22.496 --> 00:53:26.926 A:middle
really great is that's how
you can donate information

00:53:26.926 --> 00:53:30.406 A:middle
to the system about what
you're user is doing.

00:53:30.526 --> 00:53:32.396 A:middle
For instance, in
your message app.

00:53:33.096 --> 00:53:36.476 A:middle
And it's combined with and
it's user activity of course,

00:53:36.706 --> 00:53:38.976 A:middle
and with that, let's say

00:53:38.976 --> 00:53:45.956 A:middle
that I am sending a message
using my WWDC chat application,

00:53:46.306 --> 00:53:51.506 A:middle
then in the contacts UI, we're
going to show the information

00:53:51.506 --> 00:53:53.356 A:middle
about this contacts
automatically.

00:53:53.806 --> 00:53:56.416 A:middle
And when we have,
a list of actions,

00:53:57.526 --> 00:54:02.576 A:middle
we can show you directly your
application there, if you expose

00:53:57.526 --> 00:54:02.576 A:middle
we can show you directly your
application there, if you expose

00:54:02.576 --> 00:54:05.566 A:middle
that information
through an intent.

00:54:06.466 --> 00:54:08.516 A:middle
And at some point,

00:54:10.046 --> 00:54:12.646 A:middle
your application will be
just default application

00:54:12.986 --> 00:54:14.866 A:middle
in the standard contact card.

00:54:15.386 --> 00:54:17.106 A:middle
That's really amazing in term

00:54:17.106 --> 00:54:20.186 A:middle
of adding visibility
to your application.

00:54:20.376 --> 00:54:25.556 A:middle
I'd like to conclude
with the iMessage apps.

00:54:26.726 --> 00:54:30.306 A:middle
So, messages is really
becoming a platform,

00:54:30.306 --> 00:54:34.866 A:middle
and we have two features
here, one is the sticker packs

00:54:35.606 --> 00:54:38.146 A:middle
and the other one is
the messages extension.

00:54:38.476 --> 00:54:43.316 A:middle
So sticker packs, no code
required, you just have

00:54:43.376 --> 00:54:47.406 A:middle
to package your images,
static or animated.

00:54:48.006 --> 00:54:53.246 A:middle
You use Xcode for that and
you can just distribute

00:54:53.246 --> 00:54:54.956 A:middle
that on the messages store.

00:54:56.196 --> 00:54:58.796 A:middle
The other thing you can do,

00:54:59.286 --> 00:55:03.116 A:middle
with iMessage apps is use
a new messages extension.

00:54:59.286 --> 00:55:03.116 A:middle
with iMessage apps is use
a new messages extension.

00:55:03.686 --> 00:55:08.116 A:middle
With that you can write, a
fully UIKit based extension

00:55:08.816 --> 00:55:10.816 A:middle
and you can do things like,

00:55:11.546 --> 00:55:14.866 A:middle
dynamically generating
stickers content.

00:55:15.236 --> 00:55:17.526 A:middle
You can even use a
camera in that extension

00:55:17.526 --> 00:55:18.686 A:middle
which is completely new.

00:55:19.256 --> 00:55:22.826 A:middle
And, you can tune your
UI to have this compact

00:55:22.826 --> 00:55:26.906 A:middle
or expanded mode and that's
going to live-in messages,

00:55:27.206 --> 00:55:29.836 A:middle
that's a great feature
but you can do even more.

00:55:29.836 --> 00:55:32.746 A:middle
You can custom the
bubble itself,

00:55:33.296 --> 00:55:35.206 A:middle
it mean that your extension,

00:55:35.436 --> 00:55:39.026 A:middle
using the messages
framework can actually have,

00:55:39.446 --> 00:55:44.266 A:middle
a concept of a conversation in
messages integrate with that,

00:55:44.526 --> 00:55:48.506 A:middle
connect with what the
other user changed.

00:55:48.646 --> 00:55:51.106 A:middle
We have full support
for messages extension

00:55:51.576 --> 00:55:53.286 A:middle
in [inaudible] and iOS 10.

00:55:53.286 --> 00:55:57.826 A:middle
That's real easy to use and
that's great feature for you

00:55:58.276 --> 00:55:59.816 A:middle
to integrate in messages.

00:56:01.686 --> 00:56:05.186 A:middle
The other thing that you can
have with that is of course,

00:56:05.186 --> 00:56:10.556 A:middle
completely custom content
in your interactive bubble.

00:56:10.716 --> 00:56:16.476 A:middle
We have two session for iMessage
applications, messages, apps,

00:56:16.476 --> 00:56:20.066 A:middle
and sticker, that was this
morning, and the second one,

00:56:20.066 --> 00:56:23.876 A:middle
focusing on the extension part
that's going to be on Thursday

00:56:23.876 --> 00:56:27.976 A:middle
at 1:40 p.m. Thank you
very much, enjoy WWDC.

00:56:28.516 --> 00:56:38.410 A:middle
[ Applause ]
