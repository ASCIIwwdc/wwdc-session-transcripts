WEBVTT

00:00:07.516 --> 00:00:17.500 A:middle
[ Music ]

00:00:28.516 --> 00:00:35.086 A:middle
[ Applause ]

00:00:35.586 --> 00:00:36.216 A:middle
&gt;&gt; Thank you.

00:00:36.216 --> 00:00:37.106 A:middle
Good afternoon everyone.

00:00:37.406 --> 00:00:39.526 A:middle
Welcome to the session
Getting Started with CareKit.

00:00:39.756 --> 00:00:41.516 A:middle
I'm Umer. I'm an engineer
on the CareKit Team.

00:00:42.716 --> 00:00:45.856 A:middle
Our agenda will consist of
exploring the story of CareKit

00:00:45.856 --> 00:00:46.686 A:middle
and how it came about.

00:00:47.416 --> 00:00:49.606 A:middle
Taking a look at an app
that utilizes CareKit

00:00:49.606 --> 00:00:51.286 A:middle
to enhance the patient-provider
experience.

00:00:52.376 --> 00:00:54.396 A:middle
Working through the CareKit
architecture in order

00:00:54.396 --> 00:00:55.146 A:middle
to create an app here.

00:00:56.016 --> 00:00:58.806 A:middle
Then a demo of an app that uses
a customization in CareKit.

00:00:59.266 --> 00:01:01.206 A:middle
And then lastly what's
next, how Apple

00:00:59.266 --> 00:01:01.206 A:middle
And then lastly what's
next, how Apple

00:01:01.206 --> 00:01:03.366 A:middle
and the developer
community can work together

00:01:03.366 --> 00:01:04.236 A:middle
to take it to the next level.

00:01:06.646 --> 00:01:08.616 A:middle
So before I talk
about what CareKit is,

00:01:08.796 --> 00:01:09.806 A:middle
let's see where it came from.

00:01:12.326 --> 00:01:14.146 A:middle
Many of you might be
familiar with ResearchKit.

00:01:14.676 --> 00:01:16.526 A:middle
It's a framework that
we released last year

00:01:16.706 --> 00:01:19.316 A:middle
that enables providers
and medical researchers

00:01:19.396 --> 00:01:21.136 A:middle
to create a study
that they can conduct

00:01:21.136 --> 00:01:22.566 A:middle
on a large-scale using iPhones.

00:01:23.226 --> 00:01:26.656 A:middle
So if you're interested, I
would recommend taking a look

00:01:26.656 --> 00:01:27.906 A:middle
at the session from
earlier today.

00:01:28.076 --> 00:01:30.396 A:middle
What's New in ResearchKit,
hosted by Bunny Laden

00:01:30.396 --> 00:01:30.956 A:middle
and Yuen Xiou [phonetic].

00:01:31.556 --> 00:01:33.176 A:middle
And the ResearchKit
session from last year,

00:01:33.176 --> 00:01:35.426 A:middle
hosted by John Roll [phonetic],
Building Apps with ResearchKit.

00:01:36.216 --> 00:01:40.696 A:middle
In the past year with
ResearchKit, we received a lot

00:01:40.696 --> 00:01:42.156 A:middle
of requests on study
participants,

00:01:42.646 --> 00:01:43.536 A:middle
to be able to see the data

00:01:43.536 --> 00:01:45.226 A:middle
that they were providing
for medical research.

00:01:45.986 --> 00:01:48.236 A:middle
This led us to brainstorm
patient-centric modules.

00:01:49.176 --> 00:01:52.246 A:middle
While brainstorming these
modules, these are the use case

00:01:52.246 --> 00:01:54.796 A:middle
for care, expanding beyond the
boundaries of medical research.

00:01:55.776 --> 00:01:59.026 A:middle
And therefore from ResearchKit
evolved our new framework,

00:01:59.426 --> 00:02:00.006 A:middle
CareKit.

00:01:59.426 --> 00:02:00.006 A:middle
CareKit.

00:02:00.616 --> 00:02:05.786 A:middle
So CareKit is an open source
framework that enables providers

00:02:05.786 --> 00:02:07.656 A:middle
to build apps that
can empower patients

00:02:07.656 --> 00:02:08.966 A:middle
to take an active
role in their care.

00:02:09.895 --> 00:02:12.226 A:middle
Now CareKit is great for
chronic and acute use cases.

00:02:13.576 --> 00:02:16.016 A:middle
So a great example for a chronic
use case is mental health.

00:02:16.626 --> 00:02:18.096 A:middle
Where medication
tracking is critical.

00:02:18.746 --> 00:02:21.736 A:middle
Also doing assessments like
depression and anxiety surveys

00:02:21.736 --> 00:02:24.086 A:middle
to see your progress and
performing activities

00:02:24.086 --> 00:02:25.516 A:middle
that actually improve
your mental health.

00:02:25.786 --> 00:02:27.856 A:middle
Just stuff that you need
to do outside of a group --

00:02:28.216 --> 00:02:29.736 A:middle
a support group or
therapy session.

00:02:30.396 --> 00:02:35.246 A:middle
And then another good
example is surgery where one

00:02:35.246 --> 00:02:37.236 A:middle
of the most critical parts
is the recovery phase,

00:02:37.336 --> 00:02:37.896 A:middle
post-surgery.

00:02:38.816 --> 00:02:40.146 A:middle
So let's focus on this use case,

00:02:40.246 --> 00:02:42.106 A:middle
and walk through the current
scenario of the patient

00:02:42.106 --> 00:02:42.966 A:middle
and provider experience.

00:02:46.706 --> 00:02:49.316 A:middle
So currently, if you leave the
hospital or a doctor's office,

00:02:49.316 --> 00:02:50.796 A:middle
you're given a sheet of
paper that looks like this.

00:02:51.356 --> 00:02:53.536 A:middle
This has everything you need
to do for a healthy recovery.

00:02:54.086 --> 00:02:56.256 A:middle
This sheet of paper has some
very specific instructions,

00:02:56.356 --> 00:02:57.646 A:middle
with many that change over time.

00:02:58.726 --> 00:03:00.866 A:middle
The compliance to these
types of plans is horrible.

00:02:58.726 --> 00:03:00.866 A:middle
The compliance to these
types of plans is horrible.

00:03:01.196 --> 00:03:03.216 A:middle
And they typically
lead to user confusion.

00:03:04.326 --> 00:03:05.426 A:middle
These plans are not dynamic,

00:03:05.546 --> 00:03:07.876 A:middle
and therefore they don't change
based on the user's improvement.

00:03:08.336 --> 00:03:09.686 A:middle
And ultimately the
patient returns

00:03:09.686 --> 00:03:10.916 A:middle
to the hospital to be retreated.

00:03:11.906 --> 00:03:13.876 A:middle
Our goal with CareKit
was to solve this problem

00:03:13.876 --> 00:03:16.236 A:middle
and take something like
this sheet of paper,

00:03:16.886 --> 00:03:18.766 A:middle
and turn it into what
we call a Care Card.

00:03:20.016 --> 00:03:21.906 A:middle
Now this is a Care Card
that allows the patient

00:03:21.906 --> 00:03:23.176 A:middle
to see their entire
treatment plan.

00:03:23.576 --> 00:03:26.136 A:middle
One that is interactive,
updated dynamically,

00:03:26.466 --> 00:03:28.546 A:middle
and it provides a great sense
of progress for the patient.

00:03:29.936 --> 00:03:32.246 A:middle
So in the development of
this module we discovered

00:03:32.246 --> 00:03:33.526 A:middle
that there's so much
more we can do

00:03:33.526 --> 00:03:34.736 A:middle
because now we're on an iPhone.

00:03:35.376 --> 00:03:37.726 A:middle
And that let us create
three other modules to help

00:03:37.726 --> 00:03:38.846 A:middle
with the patient
care experience.

00:03:41.506 --> 00:03:42.846 A:middle
The Symptom and Measurement
Tracker,

00:03:43.186 --> 00:03:45.276 A:middle
which records subjective
and objective measurements.

00:03:46.636 --> 00:03:49.456 A:middle
The insides dashboard, that
displays the data in the app

00:03:49.456 --> 00:03:51.226 A:middle
in a way that enables
a patient to see trends

00:03:51.226 --> 00:03:52.096 A:middle
and gaps in their care.

00:03:52.096 --> 00:03:55.996 A:middle
And the connect module
that enables communicating

00:03:55.996 --> 00:03:58.386 A:middle
and sharing the data with a
family member or your care team.

00:04:01.276 --> 00:04:02.676 A:middle
So let's see how
these come together

00:04:02.746 --> 00:04:04.356 A:middle
to enhance the patient-provider
experience.

00:04:04.936 --> 00:04:07.316 A:middle
Texas Medical Center was one of
our initial partners of CareKit.

00:04:07.986 --> 00:04:08.976 A:middle
They've taken these modules

00:04:09.166 --> 00:04:11.036 A:middle
to create a unique
patient-provider experience.

00:04:11.366 --> 00:04:12.826 A:middle
So let's take a look at
these modules in action.

00:04:14.226 --> 00:04:16.516 A:middle
At first, you are greeted with
a walk-in screen that allows you

00:04:16.516 --> 00:04:18.166 A:middle
to create an account or log in.

00:04:18.166 --> 00:04:21.356 A:middle
Our patient, John Appleseed,
has already registered

00:04:21.356 --> 00:04:23.446 A:middle
and is set up to use the app.

00:04:23.976 --> 00:04:25.846 A:middle
So John wakes up and
receives a notification

00:04:25.846 --> 00:04:27.466 A:middle
that he needs to weigh himself.

00:04:29.086 --> 00:04:31.236 A:middle
He enters the app
with a secure passcode

00:04:32.786 --> 00:04:34.966 A:middle
and then he weighs
himself on a smart scale

00:04:35.066 --> 00:04:37.036 A:middle
and the value is
transferred into HealthKit.

00:04:37.036 --> 00:04:39.886 A:middle
And the CareKit app will
autopopulate the data

00:04:40.056 --> 00:04:40.646 A:middle
using HealthKit.

00:04:41.796 --> 00:04:43.356 A:middle
This is very easy
to do with CareKit,

00:04:43.356 --> 00:04:45.396 A:middle
because CareKit provides
seamless integration

00:04:45.396 --> 00:04:45.836 A:middle
with HealthKit.

00:04:48.796 --> 00:04:51.146 A:middle
After recording his weight,
John goes to his Care Card

00:04:51.146 --> 00:04:53.016 A:middle
to see what he needs
to do on his --

00:04:53.216 --> 00:04:54.446 A:middle
what's on his to-do list today.

00:04:55.336 --> 00:04:56.706 A:middle
So the Care Card and the Symptom

00:04:56.706 --> 00:04:58.086 A:middle
and Measurement Tracker
we're looking at,

00:04:58.246 --> 00:04:59.886 A:middle
is populating its
content directly

00:04:59.886 --> 00:05:02.266 A:middle
from the ERM Health System
at Texas Medical Center.

00:04:59.886 --> 00:05:02.266 A:middle
from the ERM Health System
at Texas Medical Center.

00:05:04.846 --> 00:05:06.636 A:middle
So John doesn't recall
the specifics for one

00:05:06.636 --> 00:05:07.966 A:middle
of his activities,
the short walk.

00:05:07.966 --> 00:05:09.586 A:middle
So he can tap into that cell,

00:05:09.666 --> 00:05:11.826 A:middle
and he can read the
instructions for this activity.

00:05:12.776 --> 00:05:16.536 A:middle
And then John completes
his activity,

00:05:16.566 --> 00:05:18.236 A:middle
and takes his first
dose of medication.

00:05:19.846 --> 00:05:24.296 A:middle
He now taps into
the Assessments Tab

00:05:24.336 --> 00:05:26.266 A:middle
to see what assessments he
needs to complete today.

00:05:26.986 --> 00:05:29.396 A:middle
In his Symptom and Measurement
Tracker, he wants to indicate

00:05:29.396 --> 00:05:32.296 A:middle
that he has some surgical
side pain, and some signs

00:05:32.296 --> 00:05:33.336 A:middle
of what could be an infection.

00:05:34.276 --> 00:05:36.486 A:middle
So first he records
his pain score,

00:05:36.816 --> 00:05:37.846 A:middle
using the scale assessment.

00:05:38.556 --> 00:05:44.066 A:middle
And then he decides to take
a photo of the infected area,

00:05:44.066 --> 00:05:45.076 A:middle
and upload it to the app.

00:05:45.356 --> 00:05:46.976 A:middle
And he can do that
directly from the Symptom

00:05:46.976 --> 00:05:47.746 A:middle
and Measurement Tracker,

00:05:47.746 --> 00:05:48.976 A:middle
and this data is
transmitted to his provider.

00:05:57.076 --> 00:05:58.916 A:middle
Lastly, he performs a
get-up-and-go activity.

00:05:59.666 --> 00:06:01.576 A:middle
As he is walking around
to complete this activity,

00:05:59.666 --> 00:06:01.576 A:middle
As he is walking around
to complete this activity,

00:06:01.676 --> 00:06:03.996 A:middle
the sensors on the iPhone are
being used to record his steps.

00:06:04.646 --> 00:06:06.596 A:middle
And once he has completed
the entire activity,

00:06:06.596 --> 00:06:13.426 A:middle
the data is transmitted
directly to his provider.

00:06:13.786 --> 00:06:16.036 A:middle
So John decides to take a look
at the Insights Dashboard now

00:06:16.036 --> 00:06:17.786 A:middle
to see his data for
the last couple weeks.

00:06:18.206 --> 00:06:20.106 A:middle
He can see the tips and
charts for the current week.

00:06:20.716 --> 00:06:23.036 A:middle
This provides a way for him to
understand his data in a visual

00:06:23.036 --> 00:06:23.916 A:middle
and user-friendly way.

00:06:24.946 --> 00:06:26.936 A:middle
And then he also navigates
to the previous week,

00:06:27.536 --> 00:06:28.976 A:middle
to be able to compare his
current week's performance.

00:06:34.876 --> 00:06:37.396 A:middle
Meanwhile, he is still worried
about the possible infection

00:06:37.396 --> 00:06:38.916 A:middle
that he reported earlier
in the assessments.

00:06:39.316 --> 00:06:41.476 A:middle
So he decides to send a
message to his care team member.

00:06:42.576 --> 00:06:45.566 A:middle
He taps to compose a
message, and he decides

00:06:45.566 --> 00:06:47.346 A:middle
to email his provider,
Dr. Paul Cashman.

00:06:48.346 --> 00:06:49.686 A:middle
In his message, he does not need

00:06:49.686 --> 00:06:51.136 A:middle
to upload the infection
photo anymore

00:06:51.136 --> 00:06:53.116 A:middle
because it's already been
transmitted to Dr. Cashman

00:06:53.116 --> 00:06:53.976 A:middle
through the infection
assessment.

00:06:59.666 --> 00:07:01.876 A:middle
So then later in the day,
he receives a reply message

00:06:59.666 --> 00:07:01.876 A:middle
So then later in the day,
he receives a reply message

00:07:01.876 --> 00:07:03.626 A:middle
from his care team
member, Dr. Paul Cashman.

00:07:03.676 --> 00:07:06.086 A:middle
And he can go back into
his app and see the message

00:07:06.086 --> 00:07:07.486 A:middle
that the provider
has provided to him.

00:07:08.916 --> 00:07:11.446 A:middle
And that's how Texas Medical
Center has taken the CareKit

00:07:11.446 --> 00:07:14.916 A:middle
module, and created an app that
can completely close the loop

00:07:14.916 --> 00:07:16.176 A:middle
with the patient-provider
experience.

00:07:17.516 --> 00:07:22.646 A:middle
[ Applause ]

00:07:23.146 --> 00:07:25.156 A:middle
Thanks. Let's take a
look at the process

00:07:25.156 --> 00:07:26.536 A:middle
of creating an app
just like them.

00:07:27.886 --> 00:07:29.376 A:middle
Here are the four
front-end modules

00:07:29.716 --> 00:07:30.546 A:middle
that we've already looked at.

00:07:31.296 --> 00:07:33.916 A:middle
Accompanied by two back-end
modules: The Care Plan Store

00:07:33.916 --> 00:07:34.976 A:middle
and the Document Exporter.

00:07:35.746 --> 00:07:37.866 A:middle
Now we'll go into each one of
these, but let's first focus

00:07:37.866 --> 00:07:38.766 A:middle
on the Care Plan Store.

00:07:40.436 --> 00:07:42.596 A:middle
The Care Plan Store consists
of activities and events.

00:07:43.586 --> 00:07:45.926 A:middle
So let's begin by defining
what activities and events are,

00:07:46.936 --> 00:07:48.856 A:middle
then creating an activity
and adding it to the store,

00:07:49.676 --> 00:07:52.036 A:middle
exploring the relationship
between activities and events,

00:07:52.036 --> 00:07:53.326 A:middle
and then bringing
these up to the UI.

00:07:55.586 --> 00:07:57.126 A:middle
So if you look at
this Care Card here,

00:07:57.546 --> 00:08:00.306 A:middle
we can visualize what an
activity and an event is.

00:07:57.546 --> 00:08:00.306 A:middle
we can visualize what an
activity and an event is.

00:08:01.096 --> 00:08:02.426 A:middle
Let's focus on the ibuprofen.

00:08:03.216 --> 00:08:05.666 A:middle
Where Ibuprofen 200
mg is the activity.

00:08:05.856 --> 00:08:08.376 A:middle
And the circles underneath
are the events.

00:08:09.176 --> 00:08:12.296 A:middle
And then activities and
events come together

00:08:12.296 --> 00:08:13.496 A:middle
to create the Care Plan Store.

00:08:16.426 --> 00:08:17.486 A:middle
So here's an activity.

00:08:17.616 --> 00:08:19.246 A:middle
Let's go ahead and
create an ibuprofen one.

00:08:19.806 --> 00:08:21.716 A:middle
You'll first give an identifier,

00:08:21.796 --> 00:08:24.136 A:middle
which we've used
ibuprofen medication here.

00:08:24.656 --> 00:08:26.546 A:middle
This helps uniquely
identify this activity

00:08:26.546 --> 00:08:27.356 A:middle
in the Care Plan Store.

00:08:28.606 --> 00:08:30.396 A:middle
Then a group identifier to
be able to create groups

00:08:30.396 --> 00:08:32.556 A:middle
of certain activities that you
can query the backend store

00:08:32.556 --> 00:08:32.986 A:middle
later on.

00:08:34.556 --> 00:08:35.926 A:middle
The title is Ibuprofen.

00:08:36.135 --> 00:08:37.446 A:middle
The text is 200 mg.

00:08:37.926 --> 00:08:39.515 A:middle
Now these properties
surface to the user.

00:08:39.515 --> 00:08:41.756 A:middle
So be sure they properly
define what the activity is.

00:08:42.515 --> 00:08:46.646 A:middle
The tint color, which can be
any UI color, so we chose blue.

00:08:47.116 --> 00:08:48.686 A:middle
Apart from the tint
color on each activity,

00:08:48.686 --> 00:08:50.376 A:middle
there are many other
customization properties

00:08:50.496 --> 00:08:51.546 A:middle
that are available in CareKit

00:08:51.586 --> 00:08:53.226 A:middle
and we'll discuss
them in a little bit.

00:08:54.186 --> 00:08:56.376 A:middle
Now the two properties
I really want to focus

00:08:56.376 --> 00:08:57.466 A:middle
on are type and schedule.

00:08:58.456 --> 00:08:59.456 A:middle
So the type determines

00:08:59.526 --> 00:09:01.506 A:middle
which front-end module
this activity belongs to.

00:08:59.526 --> 00:09:01.506 A:middle
which front-end module
this activity belongs to.

00:09:01.986 --> 00:09:04.416 A:middle
So for example, we
have an intervention,

00:09:04.556 --> 00:09:05.666 A:middle
which belong on the Care Card.

00:09:06.486 --> 00:09:08.416 A:middle
And we have assessments,
which are shown in the Symptom

00:09:08.416 --> 00:09:09.156 A:middle
and Measurement Tracker.

00:09:09.606 --> 00:09:13.116 A:middle
So because we're creating
a medication activity,

00:09:13.116 --> 00:09:14.196 A:middle
it belongs in the Care Card.

00:09:14.426 --> 00:09:16.026 A:middle
Therefore, the activity
type is intervention.

00:09:16.596 --> 00:09:20.206 A:middle
Next, I want to focus
on schedule.

00:09:20.676 --> 00:09:22.966 A:middle
The schedule determines
how many times,

00:09:22.966 --> 00:09:24.426 A:middle
and when this activity
should happen.

00:09:25.746 --> 00:09:26.936 A:middle
So there are three
different ways

00:09:26.936 --> 00:09:28.826 A:middle
to specify the days
for the schedule.

00:09:28.826 --> 00:09:31.616 A:middle
You can use a daily
schedule, a weekly schedule,

00:09:31.796 --> 00:09:33.146 A:middle
or you can create your
own custom schedule.

00:09:33.246 --> 00:09:35.386 A:middle
And then you can
specify the frequency,

00:09:35.386 --> 00:09:37.706 A:middle
to indicate how many times per
day this activity should occur.

00:09:37.706 --> 00:09:40.256 A:middle
Now this sounds a
little bit complicated,

00:09:40.256 --> 00:09:41.066 A:middle
but it's really not.

00:09:41.166 --> 00:09:41.976 A:middle
So let's simplify it.

00:09:41.976 --> 00:09:44.836 A:middle
Let's go ahead and define a
schedule for our activity.

00:09:46.946 --> 00:09:47.986 A:middle
Well here's a weekly schedule.

00:09:47.986 --> 00:09:50.216 A:middle
And we'll say we want the
patient to take this medication

00:09:50.216 --> 00:09:52.296 A:middle
on Monday, Wednesday,
and Friday.

00:09:52.296 --> 00:09:56.496 A:middle
And then we can use a frequency
to specify four times on Monday,

00:09:56.826 --> 00:09:58.576 A:middle
twice on Wednesday, and
four times on Friday.

00:09:59.526 --> 00:10:02.596 A:middle
And then combined together
it creates a schedule object

00:09:59.526 --> 00:10:02.596 A:middle
And then combined together
it creates a schedule object

00:10:02.596 --> 00:10:03.326 A:middle
for this activity.

00:10:04.096 --> 00:10:06.896 A:middle
And now we have a complete
activity ready to be added

00:10:06.896 --> 00:10:07.746 A:middle
to the Care Plan Store.

00:10:09.046 --> 00:10:10.356 A:middle
So before we look
at the code on how

00:10:10.356 --> 00:10:12.346 A:middle
to create the Care Plan Store
and add this activity in there,

00:10:12.396 --> 00:10:14.916 A:middle
let's just discuss what an
event is really quickly.

00:10:15.676 --> 00:10:17.186 A:middle
So an event is an object

00:10:17.236 --> 00:10:19.216 A:middle
that a developer never
directly initializes.

00:10:19.526 --> 00:10:20.646 A:middle
In fact, it's created
automatically

00:10:20.646 --> 00:10:21.476 A:middle
by the Care Plan Store.

00:10:22.366 --> 00:10:24.736 A:middle
So to understand how these
are created, let's go back

00:10:24.736 --> 00:10:26.066 A:middle
to the schedule object
we just had.

00:10:26.986 --> 00:10:29.166 A:middle
A schedule object
generates events based

00:10:29.166 --> 00:10:30.476 A:middle
on the frequency you specify.

00:10:30.586 --> 00:10:35.006 A:middle
So for example, here, we
have four events on Monday.

00:10:35.326 --> 00:10:36.906 A:middle
Therefore, we've got four
events for June 20th.

00:10:37.196 --> 00:10:38.976 A:middle
And then we have two
events on Wednesday,

00:10:38.976 --> 00:10:40.366 A:middle
so you've got two for June 22nd.

00:10:40.366 --> 00:10:42.016 A:middle
And then it'll keep
on generating them.

00:10:42.546 --> 00:10:44.786 A:middle
So the way you can stop the
generation of these events,

00:10:44.786 --> 00:10:46.056 A:middle
is by specifying an end date.

00:10:46.196 --> 00:10:47.936 A:middle
Once you specify an end
date for an activity,

00:10:47.936 --> 00:10:49.836 A:middle
the Care Plan Store will
stop generating these events.

00:10:50.216 --> 00:10:53.876 A:middle
So even though a developer
doesn't create an event,

00:10:53.876 --> 00:10:55.396 A:middle
it provides a lot of
useful information.

00:10:56.036 --> 00:10:58.146 A:middle
From an event object you can
retrieve the date of the event.

00:10:58.776 --> 00:11:01.086 A:middle
You can see what state it is
in, such as an initial state,

00:10:58.776 --> 00:11:01.086 A:middle
You can see what state it is
in, such as an initial state,

00:11:01.086 --> 00:11:02.396 A:middle
which means the user
hasn't invoked it.

00:11:02.396 --> 00:11:04.396 A:middle
It could be completed
or not completed.

00:11:05.316 --> 00:11:08.206 A:middle
The results object contains
the completion status of it.

00:11:08.206 --> 00:11:10.366 A:middle
As things such as
when it was completed,

00:11:10.366 --> 00:11:12.306 A:middle
and any other information you
want to store along with that.

00:11:13.046 --> 00:11:14.806 A:middle
And then there's also a
pointer back to the activity

00:11:14.806 --> 00:11:16.606 A:middle
that this event came out of.

00:11:17.556 --> 00:11:20.056 A:middle
So activities generate
events in the Care Plan Store

00:11:20.376 --> 00:11:23.096 A:middle
and combined together they
create what we call here,

00:11:23.096 --> 00:11:23.736 A:middle
a Care Plan Store.

00:11:24.096 --> 00:11:25.296 A:middle
So let's take a look
at the code for this.

00:11:27.016 --> 00:11:28.726 A:middle
So now to create
a Care Plan Store,

00:11:28.726 --> 00:11:29.686 A:middle
it's very straight forward.

00:11:29.686 --> 00:11:30.696 A:middle
You just define a variable,

00:11:30.696 --> 00:11:32.356 A:middle
which I have here
myCarePlanStore

00:11:32.356 --> 00:11:34.436 A:middle
of type OCKCarePlanStore.

00:11:35.516 --> 00:11:37.576 A:middle
Then you have to define a
persistent directory URL.

00:11:37.676 --> 00:11:39.456 A:middle
Which in this case
I've used application

00:11:39.456 --> 00:11:40.376 A:middle
to documents directory.

00:11:41.096 --> 00:11:44.436 A:middle
And then you just initialize
the [inaudible] URL,

00:11:44.486 --> 00:11:46.646 A:middle
and you have a Care
Plan Store ready to use.

00:11:48.696 --> 00:11:51.226 A:middle
So now, let's go ahead and
add the ibuprofen activity

00:11:51.226 --> 00:11:52.156 A:middle
that we just created.

00:11:52.626 --> 00:11:54.046 A:middle
First you will create
a schedule object.

00:11:54.116 --> 00:11:55.706 A:middle
So you have a start
date just specified

00:11:55.706 --> 00:11:56.706 A:middle
as the beginning of this year.

00:11:57.306 --> 00:11:59.596 A:middle
And then using a weekly
schedule, I can use the array

00:11:59.596 --> 00:12:02.696 A:middle
for occurrences on each day to
specify how many times per day.

00:11:59.596 --> 00:12:02.696 A:middle
for occurrences on each day to
specify how many times per day.

00:12:03.046 --> 00:12:04.906 A:middle
So for example, our
array starts on Sunday.

00:12:04.906 --> 00:12:08.596 A:middle
So zero on Sunday, four on
Monday, and zero on Tuesday.

00:12:08.596 --> 00:12:10.126 A:middle
And then so on and so forth.

00:12:10.816 --> 00:12:13.856 A:middle
So once you have that
object, you go ahead

00:12:13.856 --> 00:12:15.376 A:middle
and initialize the
care plan activity.

00:12:16.056 --> 00:12:17.766 A:middle
You give it the identifier,
the group identifier.

00:12:17.816 --> 00:12:19.286 A:middle
All the other parameters
will be defined.

00:12:19.636 --> 00:12:21.396 A:middle
There's two here that we
have not discussed yet,

00:12:21.396 --> 00:12:22.956 A:middle
which is instructions
and image URL.

00:12:22.956 --> 00:12:24.106 A:middle
So these are shown

00:12:24.106 --> 00:12:25.416 A:middle
on the detailed [inaudible]
for that activities.

00:12:25.806 --> 00:12:28.566 A:middle
For example, when John
Appleseed clicked on short walk,

00:12:28.566 --> 00:12:30.176 A:middle
he could see additional
instructions for it.

00:12:30.596 --> 00:12:33.266 A:middle
So we'll have additional
instructions for ibuprofen along

00:12:33.266 --> 00:12:35.236 A:middle
with an image, and we'll
take a look at how this looks

00:12:35.236 --> 00:12:36.136 A:middle
when we look at the Care Card.

00:12:36.386 --> 00:12:39.946 A:middle
And then to add this activity
to the Care Plan Store,

00:12:39.946 --> 00:12:42.116 A:middle
we just call the add method
passing the activity you've

00:12:42.146 --> 00:12:43.686 A:middle
created, and then use
a completion handler

00:12:43.686 --> 00:12:47.676 A:middle
for any error checking
you would like to do.

00:12:47.956 --> 00:12:49.226 A:middle
That's how you create
a Care Plan Store

00:12:49.276 --> 00:12:50.766 A:middle
and that's how you
add an activity to it.

00:12:51.366 --> 00:12:53.396 A:middle
Let's see how we can use
the data in here to show it

00:12:53.396 --> 00:12:54.276 A:middle
onto the Care Card now.

00:12:56.416 --> 00:12:57.326 A:middle
Creating the Care Plan Store

00:12:57.326 --> 00:12:58.726 A:middle
and adding an activity
is the tougher part.

00:12:58.876 --> 00:13:00.896 A:middle
Showing it on the Care Card
is actually very simple

00:12:58.876 --> 00:13:00.896 A:middle
Showing it on the Care Card
is actually very simple

00:13:00.896 --> 00:13:01.516 A:middle
and straightforward.

00:13:01.566 --> 00:13:04.946 A:middle
I'm going to show you the
activity we just added.

00:13:05.516 --> 00:13:07.996 A:middle
Emphasize the type property
here, that it's intervention.

00:13:08.336 --> 00:13:09.636 A:middle
So because you set intervention,

00:13:09.636 --> 00:13:10.856 A:middle
the Care PlanS tore
already knows

00:13:10.856 --> 00:13:11.866 A:middle
to show it on the Care Card.

00:13:11.866 --> 00:13:14.816 A:middle
And then to actually
create the Care Card,

00:13:14.816 --> 00:13:16.526 A:middle
you just initialize the
CareCardViewController

00:13:16.576 --> 00:13:17.846 A:middle
with a carePlanStore object.

00:13:19.086 --> 00:13:20.896 A:middle
You embed it inside a
NavigationController.

00:13:21.016 --> 00:13:22.436 A:middle
The reason this is necessary is

00:13:22.436 --> 00:13:24.896 A:middle
because we provide some
bar button items to assist

00:13:24.896 --> 00:13:27.426 A:middle
with calendar navigation as
well as details that we push

00:13:27.426 --> 00:13:29.236 A:middle
onto the navigation stack.

00:13:29.306 --> 00:13:32.736 A:middle
And then you just present
it, or we can embed it

00:13:32.736 --> 00:13:33.686 A:middle
into a tab bar controller.

00:13:33.686 --> 00:13:35.386 A:middle
And with these three
lines of code,

00:13:35.386 --> 00:13:37.006 A:middle
you get what we have
here is a Care Card.

00:13:38.516 --> 00:13:44.626 A:middle
[ Applause ]

00:13:45.126 --> 00:13:47.596 A:middle
So as you can see here, we have
the ibuprofen activity along

00:13:47.596 --> 00:13:49.046 A:middle
with some other ones
that I've added.

00:13:49.956 --> 00:13:52.186 A:middle
And then let's look at the
different components of this UI

00:13:52.186 --> 00:13:53.286 A:middle
to understand what
we're looking at.

00:13:54.316 --> 00:13:56.566 A:middle
So the header view shows you
a glance of the current week.

00:13:56.876 --> 00:13:58.956 A:middle
You can slide left and right
to navigate between weeks.

00:13:59.476 --> 00:14:01.826 A:middle
You can select a specific date
to see the details for that day.

00:13:59.476 --> 00:14:01.826 A:middle
You can select a specific date
to see the details for that day.

00:14:02.486 --> 00:14:04.706 A:middle
The heart completion here
is automatically calculated

00:14:04.706 --> 00:14:06.206 A:middle
and updated based
on the information

00:14:06.206 --> 00:14:07.046 A:middle
in the Care Plan Store.

00:14:08.216 --> 00:14:10.526 A:middle
So the heart and the fill
color here are customizable.

00:14:10.886 --> 00:14:12.106 A:middle
You can specify a
different image

00:14:12.146 --> 00:14:13.706 A:middle
that might suit your
use case better.

00:14:13.756 --> 00:14:15.316 A:middle
And then the fill
color can be changed

00:14:15.316 --> 00:14:16.436 A:middle
to match the custom image.

00:14:16.836 --> 00:14:18.236 A:middle
And we'll see an
example of a Care Card

00:14:18.236 --> 00:14:19.976 A:middle
that has this customization
later on.

00:14:22.496 --> 00:14:24.116 A:middle
Now below the header
is the treatment plan.

00:14:24.116 --> 00:14:26.176 A:middle
This shows all the interventions
that the user needs

00:14:26.176 --> 00:14:27.166 A:middle
to complete for that day.

00:14:27.846 --> 00:14:30.086 A:middle
So any time you add
or remove an activity

00:14:30.086 --> 00:14:32.906 A:middle
from the Care Plan Store, this
UI gets updated automatically,

00:14:32.976 --> 00:14:35.606 A:middle
with no additional work
necessary from the developer.

00:14:37.906 --> 00:14:40.076 A:middle
So here's ibuprofen
intervention we just added.

00:14:40.646 --> 00:14:42.576 A:middle
And if you tap on the
cell, it will take you

00:14:42.576 --> 00:14:45.366 A:middle
into the detail view which
has the detail instructions,

00:14:45.716 --> 00:14:47.256 A:middle
as well as an image
of the medication

00:14:47.256 --> 00:14:49.166 A:middle
so that the user does not
confuse them with other pills

00:14:49.166 --> 00:14:49.916 A:middle
that they might be taking.

00:14:54.046 --> 00:14:55.586 A:middle
Now let's take a look at
a different intervention.

00:14:56.286 --> 00:14:58.656 A:middle
So this one here asks the user
to stand and move a little.

00:14:59.236 --> 00:15:01.116 A:middle
So while this is something
the user can self-report

00:14:59.236 --> 00:15:01.116 A:middle
So while this is something
the user can self-report

00:15:01.116 --> 00:15:02.306 A:middle
by just tapping into the cell,

00:15:03.106 --> 00:15:06.056 A:middle
it can also be updated
automatically using sensors

00:15:06.056 --> 00:15:06.796 A:middle
on the Apple Watch.

00:15:07.776 --> 00:15:09.336 A:middle
So that brings me
to the next point,

00:15:09.336 --> 00:15:10.866 A:middle
is how can we update
these events?

00:15:12.016 --> 00:15:12.856 A:middle
Well there's different ways.

00:15:13.176 --> 00:15:14.926 A:middle
One of which, like we
said, is self-reported

00:15:14.926 --> 00:15:16.206 A:middle
such as medication tracking

00:15:16.206 --> 00:15:17.966 A:middle
where they can report they've
taken their medication.

00:15:18.896 --> 00:15:20.006 A:middle
They can be marked completed

00:15:20.006 --> 00:15:21.776 A:middle
after the user has
completed a task.

00:15:21.906 --> 00:15:23.606 A:middle
Such as an active
task from ResearchKit.

00:15:24.636 --> 00:15:26.716 A:middle
Or it can be updated
passively using the data

00:15:27.106 --> 00:15:29.086 A:middle
from device sensors
such as the Apple Watch

00:15:29.086 --> 00:15:30.456 A:middle
and the iPhone using HealthKit.

00:15:31.256 --> 00:15:33.656 A:middle
So that's the Care Card.

00:15:34.046 --> 00:15:35.456 A:middle
It's an interactive
treatment plan

00:15:35.456 --> 00:15:38.106 A:middle
that uses the Care Plan Store to
schedule activities and events,

00:15:38.106 --> 00:15:40.036 A:middle
and provide the user
with a focused experience

00:15:40.036 --> 00:15:40.806 A:middle
on their day-to-day health.

00:15:43.236 --> 00:15:45.386 A:middle
So just like the Care
Card, the Symptom

00:15:45.386 --> 00:15:47.826 A:middle
and Measurement Tracker also
uses the Care Plan Store

00:15:47.986 --> 00:15:50.066 A:middle
to record a subjective and
objective measurements.

00:15:50.446 --> 00:15:54.116 A:middle
So the process of adding an
assessment is very similar

00:15:54.116 --> 00:15:57.276 A:middle
to how we did in the
ibuprofen intervention.

00:15:57.706 --> 00:16:00.486 A:middle
So let's say that we have
a pain survey that you want

00:15:57.706 --> 00:16:00.486 A:middle
So let's say that we have
a pain survey that you want

00:16:00.486 --> 00:16:01.656 A:middle
to create for your lower back.

00:16:02.446 --> 00:16:04.756 A:middle
The code here is nearly
identical to create this,

00:16:04.816 --> 00:16:06.266 A:middle
so we'll assume that
it's already been added

00:16:06.266 --> 00:16:07.096 A:middle
to the Care Plan Store.

00:16:08.236 --> 00:16:10.346 A:middle
Now let's take a look at how
you can create a Symptom Tracker

00:16:10.346 --> 00:16:11.706 A:middle
to actually show
this assessment.

00:16:12.606 --> 00:16:14.706 A:middle
Just like the Care Card, you
initialize the Symptom Tracker

00:16:14.706 --> 00:16:16.816 A:middle
with your controller with
a Care Plan Store object.

00:16:17.496 --> 00:16:18.836 A:middle
There's a delegate
that you can implement,

00:16:18.836 --> 00:16:19.866 A:middle
but I'll get to that shortly.

00:16:19.866 --> 00:16:22.746 A:middle
And then embed it into
a navigation controller.

00:16:22.886 --> 00:16:25.466 A:middle
And then again, just present it
to see something like this here.

00:16:27.016 --> 00:16:28.386 A:middle
So if we dissect this UI,

00:16:29.596 --> 00:16:31.986 A:middle
the header view contains
the similar navigation model

00:16:31.986 --> 00:16:33.546 A:middle
as the Care Card where
we can slide left

00:16:33.546 --> 00:16:34.506 A:middle
and right to change weeks.

00:16:34.816 --> 00:16:36.976 A:middle
We select specific days to
see details for that day.

00:16:37.706 --> 00:16:39.596 A:middle
As you're working on the
assessment for that day,

00:16:39.696 --> 00:16:42.076 A:middle
the ring -- there will be a ring
that shows you your progress.

00:16:42.276 --> 00:16:44.536 A:middle
And once you've completed them,
it'll turn into a checkmark

00:16:44.626 --> 00:16:46.786 A:middle
to know that you have no more
assessments for that day.

00:16:47.376 --> 00:16:50.156 A:middle
The color for the ring and the
checkmark can be customized

00:16:50.156 --> 00:16:51.406 A:middle
to suit your app.

00:16:52.116 --> 00:16:54.796 A:middle
Underneath here, you will have
a list of assessments that need

00:16:54.796 --> 00:16:55.656 A:middle
to be completed for the day.

00:16:56.056 --> 00:16:57.566 A:middle
Now there can be a
variety of assessments

00:16:57.616 --> 00:16:58.696 A:middle
so let's take a look
at some of them.

00:16:59.786 --> 00:17:00.746 A:middle
Here we have a pain survey.

00:16:59.786 --> 00:17:00.746 A:middle
Here we have a pain survey.

00:17:00.866 --> 00:17:03.436 A:middle
For this you can use the
survey module in a ResearchKit

00:17:03.436 --> 00:17:04.896 A:middle
to present a beautifully
designed survey.

00:17:05.435 --> 00:17:07.496 A:middle
They can be an active task.

00:17:08.006 --> 00:17:09.556 A:middle
So you could launch
like a tapping test,

00:17:09.556 --> 00:17:11.576 A:middle
or create a custom active
task using ResearchKit,

00:17:11.646 --> 00:17:12.826 A:middle
such as the range of motion one.

00:17:14.465 --> 00:17:15.486 A:middle
It can be self-reported.

00:17:15.576 --> 00:17:18.246 A:middle
So you can present a view
controller, just like we did

00:17:18.246 --> 00:17:20.636 A:middle
in the Texas Medical Center
app, where you can ask the user

00:17:20.636 --> 00:17:22.566 A:middle
to take a photo of the
infection and report it back.

00:17:23.326 --> 00:17:24.965 A:middle
And then it could be any data

00:17:24.965 --> 00:17:26.256 A:middle
from a HealthKit or
Bluetooth device.

00:17:26.586 --> 00:17:28.465 A:middle
So in the Texas Medical
Center app,

00:17:28.566 --> 00:17:30.366 A:middle
John jumped onto
his smart scale,

00:17:30.436 --> 00:17:32.826 A:middle
and it automatically updated
the data and CareKit app.

00:17:34.086 --> 00:17:36.046 A:middle
So that's where the
delegate comes in.

00:17:36.086 --> 00:17:37.826 A:middle
In order to present the
appropriate assessment,

00:17:37.826 --> 00:17:39.516 A:middle
you have to implement the
Symptom Tracker delegate

00:17:39.916 --> 00:17:41.276 A:middle
which provides a callback

00:17:41.276 --> 00:17:43.686 A:middle
for the developer whenever the
user taps on an assessment cell.

00:17:44.286 --> 00:17:46.056 A:middle
In this call back, you're
given the assessment event

00:17:46.116 --> 00:17:46.896 A:middle
that they want to launch.

00:17:47.206 --> 00:17:48.776 A:middle
And then you can determine
which view controller

00:17:48.776 --> 00:17:52.786 A:middle
to present appropriately
at that point.

00:17:53.166 --> 00:17:54.766 A:middle
Once you've presented
the view controller,

00:17:54.766 --> 00:17:56.616 A:middle
let's say a pain survey,
you have to go ahead

00:17:56.616 --> 00:17:58.896 A:middle
and use the data from that
and calculate a pain score,

00:17:59.676 --> 00:18:04.576 A:middle
then you create a result object,
which takes in a value strength,

00:17:59.676 --> 00:18:04.576 A:middle
then you create a result object,
which takes in a value strength,

00:18:04.766 --> 00:18:07.866 A:middle
an optional unit strength, and
then a user info dictionary

00:18:07.866 --> 00:18:10.316 A:middle
for all the -- any additional
information you would need.

00:18:11.096 --> 00:18:13.306 A:middle
And then you just update the
Care Plan Store with this event,

00:18:13.656 --> 00:18:15.966 A:middle
the result object, the state
that it's entering into,

00:18:16.046 --> 00:18:17.946 A:middle
and then use the completion
block for any error handling.

00:18:18.506 --> 00:18:23.496 A:middle
And all that combined gives you
what you see here, the Symptom

00:18:23.496 --> 00:18:23.976 A:middle
and Measurement Tracker.

00:18:24.516 --> 00:18:29.856 A:middle
[ Applause ]

00:18:30.356 --> 00:18:32.496 A:middle
The Insights Dashboard can use
data from the Care Plan Store

00:18:32.496 --> 00:18:33.956 A:middle
to generate messages and charts.

00:18:34.336 --> 00:18:36.696 A:middle
And this allows the user to
better understand the data

00:18:36.696 --> 00:18:37.696 A:middle
that they're actually
looking at.

00:18:38.276 --> 00:18:42.166 A:middle
So for us to make this easy
for developers to create,

00:18:42.166 --> 00:18:43.586 A:middle
we've created what we
call insight items.

00:18:43.796 --> 00:18:45.876 A:middle
You can plug and play those
into the Insight's Dashboard.

00:18:46.326 --> 00:18:48.966 A:middle
And these also can include
messages such as tips or alerts.

00:18:49.606 --> 00:18:51.876 A:middle
And they can also be charts
such as the grouped bar chart

00:18:51.876 --> 00:18:54.456 A:middle
that we introduced in CareKit,
as well as any custom charts.

00:18:54.456 --> 00:18:55.496 A:middle
So for example the charts

00:18:55.496 --> 00:18:57.746 A:middle
from ResearchKit can
easily be subclassed

00:18:57.826 --> 00:18:58.806 A:middle
into our chart object.

00:18:58.806 --> 00:19:03.036 A:middle
So let's take a look at the
insight items in this dashboard.

00:18:58.806 --> 00:19:03.036 A:middle
So let's take a look at the
insight items in this dashboard.

00:19:04.486 --> 00:19:06.636 A:middle
This is a medication
adherence message item.

00:19:06.946 --> 00:19:09.436 A:middle
Message items help motivate
users to complete their care

00:19:09.476 --> 00:19:11.486 A:middle
by surfacing valuable
information about their health.

00:19:12.246 --> 00:19:14.326 A:middle
This message item is using
data from the Care Plan Store

00:19:14.436 --> 00:19:16.746 A:middle
to calculate the adherence for
ibuprofen for the past week.

00:19:17.506 --> 00:19:19.846 A:middle
These messages can also be
generated from a remote server,

00:19:19.846 --> 00:19:21.356 A:middle
and then passed into
the Insights Dashboard.

00:19:21.576 --> 00:19:25.746 A:middle
So let's look at the code on how
you can query the backend store.

00:19:26.446 --> 00:19:28.916 A:middle
Here you can specify start
date and an end date.

00:19:29.406 --> 00:19:31.606 A:middle
So I've used the beginning
of last week, Sunday,

00:19:31.606 --> 00:19:33.186 A:middle
and the end of last
week, Saturday,

00:19:33.186 --> 00:19:34.096 A:middle
as a start and end date.

00:19:34.546 --> 00:19:37.296 A:middle
Then we can call the
enumerateEvents method

00:19:37.436 --> 00:19:39.676 A:middle
on the Care Plan Store,
provide the activity we want

00:19:39.676 --> 00:19:42.506 A:middle
to enumerate on, the dates
that we want to enumerate from

00:19:42.506 --> 00:19:45.526 A:middle
and to, and then in the handler
we're given back all the events

00:19:45.526 --> 00:19:46.856 A:middle
in the store for that activity.

00:19:47.496 --> 00:19:49.316 A:middle
And then we can enumerate
through these events

00:19:49.316 --> 00:19:50.646 A:middle
to check their state
to determine

00:19:50.646 --> 00:19:52.976 A:middle
if they've been completed or
not, to calculate adherence.

00:19:53.546 --> 00:19:57.956 A:middle
So let's say we calculated
the adherence now,

00:19:57.956 --> 00:19:59.426 A:middle
and we want to go ahead
and create a message item.

00:20:00.396 --> 00:20:02.866 A:middle
Here you will want to take the
adherence you've calculated,

00:20:03.076 --> 00:20:04.776 A:middle
and turn it into a
user friendly message.

00:20:04.776 --> 00:20:06.176 A:middle
So that it's easier
for the user to read,

00:20:06.176 --> 00:20:07.576 A:middle
and actually gain
insights from it.

00:20:08.956 --> 00:20:09.656 A:middle
And then you just create --

00:20:09.656 --> 00:20:12.476 A:middle
initialize a message item with
a title, he message you would

00:20:12.476 --> 00:20:14.906 A:middle
like to show, a color,
nd then the message type.

00:20:14.906 --> 00:20:15.976 A:middle
For example, this one's a tip.

00:20:20.406 --> 00:20:22.366 A:middle
Next we have a group bar
chart that allows you

00:20:22.366 --> 00:20:24.186 A:middle
to present multi-series
data in a single chart.

00:20:24.836 --> 00:20:26.696 A:middle
For example, in this
chart we have pain

00:20:26.696 --> 00:20:29.246 A:middle
and ibuprofen mapped together
so the user can see their data

00:20:29.246 --> 00:20:31.336 A:middle
in a way that allows
them to visualize trends

00:20:31.336 --> 00:20:32.776 A:middle
and gaps in their care.

00:20:35.116 --> 00:20:37.336 A:middle
So here I've defined a
variable called barChartItem.

00:20:37.516 --> 00:20:39.166 A:middle
It's of type OCK insight ttem.

00:20:39.696 --> 00:20:42.036 A:middle
A barChartItem consists
of series.

00:20:42.306 --> 00:20:44.236 A:middle
In the one we just saw
there was a pain series

00:20:44.236 --> 00:20:45.266 A:middle
and an ibuprofen series.

00:20:45.826 --> 00:20:46.966 A:middle
So in order to create
this chart,

00:20:46.966 --> 00:20:48.136 A:middle
we will define a pain series

00:20:48.136 --> 00:20:50.056 A:middle
by initializing a bar
series with a title.

00:20:50.476 --> 00:20:52.666 A:middle
And an array of numeric
values, and then an array

00:20:52.666 --> 00:20:54.416 A:middle
of string values,
and the tint colors.

00:20:55.786 --> 00:20:56.536 A:middle
Now the number of items

00:20:56.536 --> 00:20:58.336 A:middle
in the array are not
limited by any means.

00:20:58.616 --> 00:21:00.856 A:middle
So your chart can show
weekly data, monthly data,

00:20:58.616 --> 00:21:00.856 A:middle
So your chart can show
weekly data, monthly data,

00:21:00.856 --> 00:21:02.106 A:middle
or any number of data points.

00:21:03.046 --> 00:21:05.506 A:middle
The array of numeric values is
what determines a bar length

00:21:05.506 --> 00:21:05.966 A:middle
on the chart.

00:21:06.316 --> 00:21:08.536 A:middle
And the array of string values
shows up right next to each bar.

00:21:09.376 --> 00:21:10.666 A:middle
Oftentimes these
are not the same.

00:21:11.136 --> 00:21:12.986 A:middle
For example, in the
ibuprofen series,

00:21:13.056 --> 00:21:15.056 A:middle
the numeric values determine
the length of the bar,

00:21:15.396 --> 00:21:16.796 A:middle
but they don't represent
the data itself.

00:21:17.226 --> 00:21:19.286 A:middle
For example, the 1-5-4 and so on

00:21:19.286 --> 00:21:21.446 A:middle
and so forth can
easily be misunderstood

00:21:21.446 --> 00:21:23.796 A:middle
to mean one tablet, five
tablets, or four tablets.

00:21:24.226 --> 00:21:26.636 A:middle
Therefore, the value
labels help the user know

00:21:26.636 --> 00:21:28.536 A:middle
that their medication is
adherence; 10 percent,

00:21:28.806 --> 00:21:30.106 A:middle
50 percent, and 40 percent.

00:21:30.836 --> 00:21:33.516 A:middle
So now that we have the
series that we need to show,

00:21:33.516 --> 00:21:35.476 A:middle
we're going to go ahead and
initialize a bar chart item.

00:21:36.296 --> 00:21:38.446 A:middle
Give it a title, a
text, a tint color.

00:21:38.446 --> 00:21:41.406 A:middle
And we've got two arrays for
axis titles and axis subtitles

00:21:41.406 --> 00:21:42.886 A:middle
that show up to the
left of each bar group.

00:21:42.886 --> 00:21:45.276 A:middle
And then you can specify
all the data skews you would

00:21:45.276 --> 00:21:45.796 A:middle
like to show.

00:21:45.886 --> 00:21:47.466 A:middle
This could be one, two, or ten.

00:21:48.456 --> 00:21:49.876 A:middle
Now there are two
optional parameters here

00:21:49.876 --> 00:21:50.576 A:middle
which is the scale.

00:21:50.576 --> 00:21:52.886 A:middle
The minimum scale range and
the maximum scale range.

00:21:53.006 --> 00:21:55.556 A:middle
If you don't specify these, we
automatically generate it based

00:21:55.556 --> 00:21:56.526 A:middle
on the data you've given us.

00:21:57.196 --> 00:21:59.626 A:middle
But if you do, then be mindful
of what you specify here

00:21:59.626 --> 00:22:01.036 A:middle
so that the data
doesn't seem skewed.

00:21:59.626 --> 00:22:01.036 A:middle
so that the data
doesn't seem skewed.

00:22:01.686 --> 00:22:03.876 A:middle
For example, if you have data
points that are going from one

00:22:03.876 --> 00:22:06.706 A:middle
to ten, and you specify a
scale that's from five to ten,

00:22:06.706 --> 00:22:08.726 A:middle
then all the points that are
below five will now be visible

00:22:08.726 --> 00:22:09.246 A:middle
to the user.

00:22:09.446 --> 00:22:13.046 A:middle
And it will make the
data seem out of context.

00:22:13.556 --> 00:22:15.696 A:middle
So we have a message
item we've created.

00:22:15.696 --> 00:22:16.756 A:middle
And we have a chart item.

00:22:16.756 --> 00:22:18.716 A:middle
Let's go ahead and create
the Insights Dashboard.

00:22:19.066 --> 00:22:20.566 A:middle
You initialize the
InsightsViewController

00:22:20.566 --> 00:22:21.836 A:middle
with an array of
these two items.

00:22:22.186 --> 00:22:24.156 A:middle
Give it an optional
header and a subtitle.

00:22:24.566 --> 00:22:25.586 A:middle
A title and a subtitle.

00:22:26.166 --> 00:22:28.236 A:middle
And then you just present it,
and you get something like this.

00:22:29.516 --> 00:22:34.816 A:middle
[ Applause ]

00:22:35.316 --> 00:22:36.746 A:middle
And that's how you
create an Insights Module.

00:22:37.596 --> 00:22:39.716 A:middle
So the next one is Connect.

00:22:40.586 --> 00:22:42.356 A:middle
Connect allows you to
communicate and share your data

00:22:42.356 --> 00:22:43.806 A:middle
with your care team and
your friends and family.

00:22:45.326 --> 00:22:47.346 A:middle
So to make this easy as well,

00:22:47.636 --> 00:22:49.426 A:middle
we've created what we
call CareKit contacts.

00:22:49.426 --> 00:22:50.556 A:middle
And there are two types here.

00:22:51.476 --> 00:22:53.546 A:middle
We've got a care team contact,
which is a physician or a nurse,

00:22:54.356 --> 00:22:56.256 A:middle
or any other care team member.

00:22:56.316 --> 00:22:57.846 A:middle
And then we have a
personal contact,

00:22:57.846 --> 00:22:59.606 A:middle
which could be a close
friend or a family member.

00:23:00.486 --> 00:23:01.826 A:middle
So if we look at
the Connect Module,

00:23:01.826 --> 00:23:03.136 A:middle
these show up grouped
by their type.

00:23:04.216 --> 00:23:06.266 A:middle
Here we have the care
team members up top.

00:23:06.846 --> 00:23:08.506 A:middle
And then down below we have
the friends and family.

00:23:09.306 --> 00:23:11.036 A:middle
So let's look at the code
on how we can create this.

00:23:13.226 --> 00:23:15.256 A:middle
To create a physician
contact, you define a variable.

00:23:15.256 --> 00:23:17.306 A:middle
PhysicianContact of
type, OCKContact.

00:23:17.306 --> 00:23:20.426 A:middle
And then you just initialize the
contact object with the type,

00:23:20.426 --> 00:23:23.736 A:middle
which is careTeam, the name,
the relation of the patient

00:23:23.736 --> 00:23:26.896 A:middle
to this contact, the tint color,
and then we have phone number

00:23:26.896 --> 00:23:28.886 A:middle
and message number, which
are CNPhoneNumber objects

00:23:28.956 --> 00:23:30.006 A:middle
for formatting purposes.

00:23:30.976 --> 00:23:33.576 A:middle
The email address is just a
string, and then a monogram

00:23:33.576 --> 00:23:35.666 A:middle
to be shown if there's
no image, or the image

00:23:35.666 --> 00:23:37.376 A:middle
to specify what the physician

00:23:37.376 --> 00:23:40.146 A:middle
or the care team
contact looks like.

00:23:41.226 --> 00:23:42.676 A:middle
Once you've created
all your contacts,

00:23:42.676 --> 00:23:45.126 A:middle
you just initialize the connect
view controller with an array

00:23:45.126 --> 00:23:47.056 A:middle
of all the contacts, and
then you just present it.

00:23:47.596 --> 00:23:49.726 A:middle
But there's also a delegate
here that you need to implement,

00:23:49.726 --> 00:23:52.056 A:middle
which we'll get to
in a little bit.

00:23:52.056 --> 00:23:53.936 A:middle
And before we can present
this, you have to embed it

00:23:53.936 --> 00:23:55.846 A:middle
in a navigation controller,
because we have master

00:23:55.846 --> 00:23:57.286 A:middle
and detail views for
the Connect Module.

00:23:59.256 --> 00:24:01.296 A:middle
So you will get a Connect
Module that looks like this

00:23:59.256 --> 00:24:01.296 A:middle
So you will get a Connect
Module that looks like this

00:24:01.336 --> 00:24:02.436 A:middle
with the Connect
View Controller.

00:24:03.496 --> 00:24:05.726 A:middle
Now if we focus in on the
contact we just created,

00:24:05.726 --> 00:24:06.666 A:middle
Dr. Paul Cashman.

00:24:07.176 --> 00:24:09.726 A:middle
If we tap into the cell, it will
take you into the detail view

00:24:09.726 --> 00:24:11.096 A:middle
where you get a contact
card for him.

00:24:11.906 --> 00:24:14.506 A:middle
In this contact card, you see
all his contact information

00:24:14.506 --> 00:24:17.116 A:middle
up top here, which shows you
how you call him, text him.

00:24:17.586 --> 00:24:19.286 A:middle
Text message him, or
send him an email.

00:24:19.766 --> 00:24:22.656 A:middle
And then down below is
the ability to share

00:24:22.656 --> 00:24:23.656 A:middle
and send your reports with him.

00:24:24.356 --> 00:24:26.246 A:middle
Now this is where the
delegate comes into play.

00:24:27.596 --> 00:24:30.696 A:middle
The connect delegate
enables sharing the data

00:24:30.696 --> 00:24:31.406 A:middle
with this contact.

00:24:31.716 --> 00:24:34.016 A:middle
So for example, when the
user taps the share button,

00:24:34.496 --> 00:24:35.626 A:middle
this method is called.

00:24:35.626 --> 00:24:37.696 A:middle
And then you are given
the contact object

00:24:37.696 --> 00:24:39.616 A:middle
from which you can determine
what kind of a report

00:24:39.616 --> 00:24:42.216 A:middle
to generate and then you can
go ahead and share that report.

00:24:43.176 --> 00:24:44.796 A:middle
Now this part is
actually quite tedious.

00:24:44.796 --> 00:24:46.256 A:middle
To create the report
and to share it.

00:24:46.696 --> 00:24:48.846 A:middle
So let's see what we can
do to make this easier.

00:24:49.916 --> 00:24:52.016 A:middle
So to make the connect
module work hand --

00:24:52.086 --> 00:24:54.546 A:middle
to make it easy to share
data with the connect module,

00:24:54.546 --> 00:24:55.986 A:middle
we've created the
document exporter,

00:24:56.206 --> 00:24:58.106 A:middle
which works hand-in-hand
with it.

00:24:58.666 --> 00:25:00.526 A:middle
The document exporter
allows you to take the data

00:24:58.666 --> 00:25:00.526 A:middle
The document exporter
allows you to take the data

00:25:00.526 --> 00:25:01.536 A:middle
from the Care Plan Store.

00:25:01.536 --> 00:25:05.056 A:middle
And even other sources to create
a rich PDF that can be shared.

00:25:06.726 --> 00:25:08.666 A:middle
And just like everything
else we've done in CareKit

00:25:08.666 --> 00:25:11.256 A:middle
to make this easy, we've created
CareKit Document Elements.

00:25:12.026 --> 00:25:13.166 A:middle
You've got headers and footers.

00:25:13.326 --> 00:25:19.286 A:middle
We've got texts and paragraphs,
images, charts, and tables.

00:25:19.396 --> 00:25:21.386 A:middle
And then combining
all of these together,

00:25:21.386 --> 00:25:23.976 A:middle
you can create a rich
PDF that looks like this.

00:25:24.516 --> 00:25:30.106 A:middle
[ Applause ]

00:25:30.606 --> 00:25:32.676 A:middle
So as we can see in this
PDF we've got an image

00:25:32.676 --> 00:25:35.456 A:middle
of the patient, a user friendly
summary of their progress,

00:25:35.956 --> 00:25:37.456 A:middle
and now the same chart
that they were looking

00:25:37.456 --> 00:25:39.376 A:middle
at in their Insights
Dashboard can be seen here

00:25:39.376 --> 00:25:41.326 A:middle
by their provider, so that
they can all see the trends

00:25:41.326 --> 00:25:42.436 A:middle
and gaps in their care.

00:25:43.116 --> 00:25:44.486 A:middle
I know there's a
table that neatly lays

00:25:44.486 --> 00:25:46.076 A:middle
out all the subjective
and objective measurements

00:25:46.076 --> 00:25:47.516 A:middle
for these patients
on the previous week.

00:25:48.376 --> 00:25:50.076 A:middle
So let's take a look at
the code to create this.

00:25:50.686 --> 00:25:52.996 A:middle
We have a
DocumentElementPparagraph,

00:25:52.996 --> 00:25:54.116 A:middle
which is just text content.

00:25:54.306 --> 00:25:55.616 A:middle
This text content can also come

00:25:55.616 --> 00:25:57.626 A:middle
from the Care Plan Store
or a remote source.

00:25:59.096 --> 00:26:01.396 A:middle
Then we have a document
element chart

00:25:59.096 --> 00:26:01.396 A:middle
Then we have a document
element chart

00:26:01.546 --> 00:26:04.076 A:middle
which basically accepts the same
chart object that you created

00:26:04.076 --> 00:26:05.126 A:middle
in the Insights Dashboard.

00:26:05.326 --> 00:26:06.906 A:middle
So there's no need
to do any new code,

00:26:06.906 --> 00:26:08.136 A:middle
or new chart generation here.

00:26:09.346 --> 00:26:12.376 A:middle
Then we have a table here which
gives you an array of headers.

00:26:12.766 --> 00:26:16.496 A:middle
And an array of arrays, in
which each array is a row

00:26:16.496 --> 00:26:17.566 A:middle
of the data you want to show.

00:26:17.886 --> 00:26:19.836 A:middle
For example, a weekly
data of the pain scores,

00:26:19.836 --> 00:26:22.416 A:middle
or a weekly data of
tapping tests results.

00:26:23.056 --> 00:26:25.116 A:middle
Then once you have all the
different elements you want

00:26:25.116 --> 00:26:27.206 A:middle
to use in the document, you
initialize a document object.

00:26:27.576 --> 00:26:28.236 A:middle
Give it a title.

00:26:28.296 --> 00:26:30.526 A:middle
And then give it an array
of all the elements.

00:26:30.966 --> 00:26:33.226 A:middle
And then turning
this document element

00:26:33.226 --> 00:26:34.796 A:middle
into a PDF is really
straightforward.

00:26:34.796 --> 00:26:36.556 A:middle
You just call the
createPDFData method.

00:26:36.966 --> 00:26:39.366 A:middle
Use the NSData that's returned
to you in the completion block,

00:26:39.366 --> 00:26:40.536 A:middle
and write it to a file URL.

00:26:40.536 --> 00:26:46.046 A:middle
So now when the user taps the
share button, we can go ahead

00:26:46.046 --> 00:26:48.496 A:middle
and generate the PDF using
the document exporter we just

00:26:48.496 --> 00:26:51.436 A:middle
created, present it
to the user to preview

00:26:51.536 --> 00:26:54.526 A:middle
so they know what they're about
to share, and then they can tap

00:26:54.526 --> 00:26:56.536 A:middle
on the share button and then
bring up the share sheet

00:26:56.706 --> 00:26:58.696 A:middle
to share this PDF with others
in the way they want to.

00:26:59.506 --> 00:27:02.726 A:middle
And that's how the Document
Exporter works hand-in-hand

00:26:59.506 --> 00:27:02.726 A:middle
And that's how the Document
Exporter works hand-in-hand

00:27:02.726 --> 00:27:04.626 A:middle
with the Connect Module
to allow for data sharing.

00:27:06.516 --> 00:27:11.366 A:middle
[ Applause ]

00:27:11.866 --> 00:27:13.266 A:middle
So all these modules
come together

00:27:13.316 --> 00:27:14.586 A:middle
and form the CareKit framework.

00:27:15.436 --> 00:27:17.656 A:middle
So Patient PAL recently
transformed their entire patient

00:27:17.656 --> 00:27:18.996 A:middle
care experience using CareKit.

00:27:18.996 --> 00:27:21.576 A:middle
And I want to show you how
they've used customization

00:27:21.766 --> 00:27:23.056 A:middle
to match their user experience

00:27:23.326 --> 00:27:24.926 A:middle
and they've created
interventions and assessments

00:27:24.926 --> 00:27:26.296 A:middle
to help their patients
improve their health.

00:27:27.836 --> 00:27:29.596 A:middle
So their Care Card
replaces a heart

00:27:29.596 --> 00:27:31.286 A:middle
with a custom image
of an exercise buddy.

00:27:31.866 --> 00:27:34.096 A:middle
Their app is focused on
getting their patients

00:27:34.096 --> 00:27:35.766 A:middle
to perform certain
exercises throughout the day.

00:27:37.096 --> 00:27:39.506 A:middle
For example, if you focus on
the hip extension exercise,

00:27:39.716 --> 00:27:41.756 A:middle
the pink one down
below, we will tap

00:27:41.756 --> 00:27:43.196 A:middle
on the remaining
circle to complete it.

00:27:43.806 --> 00:27:45.406 A:middle
But before it can be
marked as completed,

00:27:45.486 --> 00:27:46.866 A:middle
we have to perform
this exercise.

00:27:47.776 --> 00:27:51.106 A:middle
In this exercise task,
there's a nice description

00:27:51.106 --> 00:27:53.606 A:middle
of the exercise along with a
video that the patient can watch

00:27:53.606 --> 00:27:55.396 A:middle
to make sure they're performing
the exercise correctly.

00:27:56.186 --> 00:27:57.696 A:middle
What's even nicer is
that they provide a way

00:27:57.696 --> 00:28:00.066 A:middle
to record yourself while
you're performing the exercise

00:27:57.696 --> 00:28:00.066 A:middle
to record yourself while
you're performing the exercise

00:28:00.066 --> 00:28:01.566 A:middle
so that the care provider
can see it as well.

00:28:01.666 --> 00:28:04.546 A:middle
When you tap the
Watch Video button,

00:28:04.546 --> 00:28:05.936 A:middle
it shows it embedded
within the task.

00:28:06.366 --> 00:28:08.016 A:middle
And once you feel like you've
understood the exercise,

00:28:08.056 --> 00:28:09.946 A:middle
you can tap Get Started
to start performing it.

00:28:10.206 --> 00:28:11.766 A:middle
And then there's an
active task that walks you

00:28:11.766 --> 00:28:12.846 A:middle
through each set and each rep.

00:28:14.646 --> 00:28:15.956 A:middle
Once you've completed
the exercise,

00:28:15.956 --> 00:28:17.816 A:middle
you can see under Care
Completion Progress updated

00:28:17.816 --> 00:28:18.636 A:middle
to reflect the change.

00:28:18.846 --> 00:28:20.046 A:middle
And now you've got a completion

00:28:20.296 --> 00:28:21.446 A:middle
for that little circle
down there.

00:28:21.846 --> 00:28:23.416 A:middle
So by default, we
don't provide --

00:28:23.416 --> 00:28:25.836 A:middle
we provide detailed views for
each activity on the Care Card

00:28:26.206 --> 00:28:27.316 A:middle
but you can implement
the delegate

00:28:27.496 --> 00:28:28.676 A:middle
to provide your own as well.

00:28:28.946 --> 00:28:30.856 A:middle
So one other thing that
they've customized here is

00:28:30.896 --> 00:28:34.466 A:middle
that when the user taps on
one of the detail views here,

00:28:34.606 --> 00:28:37.306 A:middle
for example the hamstring
stretch, it will go ahead

00:28:37.306 --> 00:28:39.316 A:middle
and bring up a view controller

00:28:39.316 --> 00:28:41.266 A:middle
that lets you send
reminders for these exercises.

00:28:41.816 --> 00:28:44.296 A:middle
So there's the two
that I've already done.

00:28:44.296 --> 00:28:45.966 A:middle
And then the third one,
I want to say that --

00:28:45.966 --> 00:28:47.776 A:middle
go ahead and let's
do it at 8:00 pm.

00:28:48.726 --> 00:28:50.766 A:middle
And now the app will go ahead
and me a push notification

00:28:50.766 --> 00:28:53.196 A:middle
to come back in and perform this
exercise to complete my care.

00:28:54.236 --> 00:28:56.396 A:middle
So CareKit provides a lot of
flexibility with this module,

00:28:56.516 --> 00:28:58.366 A:middle
so that you can tailor
them to suite your needs.

00:28:58.986 --> 00:28:59.796 A:middle
And these are some of the ones.

00:29:00.546 --> 00:29:03.586 A:middle
So that brings me
to the last section,

00:29:03.586 --> 00:29:05.286 A:middle
or slides What's
next for CareKit?

00:29:06.546 --> 00:29:09.096 A:middle
Currently, CareKit allows you
to build patient centric apps.

00:29:10.246 --> 00:29:12.096 A:middle
Next, we want to focus
on building the hooks

00:29:12.096 --> 00:29:13.906 A:middle
between these apps and
the provider clouds

00:29:13.906 --> 00:29:16.716 A:middle
and then also transmitting
that information from the cloud

00:29:16.716 --> 00:29:17.896 A:middle
to the care team app or portal.

00:29:18.696 --> 00:29:20.166 A:middle
This sort of infrastructure
can be seen

00:29:20.166 --> 00:29:23.346 A:middle
in the Texas Medical Center app
as well as the Patient PAL app.

00:29:23.496 --> 00:29:26.266 A:middle
What we would like is, as you're
building your CareKit apps

00:29:26.266 --> 00:29:29.036 A:middle
and linking them to your cloud,
you build these hooks in a way

00:29:29.236 --> 00:29:32.526 A:middle
that you can contribute
it back to the community.

00:29:32.916 --> 00:29:35.286 A:middle
And other people who are using
similar cloud solutions can also

00:29:35.286 --> 00:29:37.386 A:middle
benefit from it.

00:29:37.886 --> 00:29:39.006 A:middle
CareKit is open source.

00:29:39.526 --> 00:29:40.976 A:middle
It will become what
you make of it.

00:29:41.516 --> 00:29:44.936 A:middle
[ Applause ]

00:29:45.436 --> 00:29:46.506 A:middle
So please contribute.

00:29:46.666 --> 00:29:48.076 A:middle
You can find the
project on GitHub.

00:29:48.536 --> 00:29:48.636 A:middle
It's

00:29:48.636 --> 00:29:51.396 A:middle
on github.com/carekit-apple/
carekit.

00:29:52.546 --> 00:29:55.276 A:middle
So here's how you can help
us make CareKit even better.

00:29:56.036 --> 00:29:57.786 A:middle
Your role involves checking

00:29:57.786 --> 00:29:59.296 A:middle
out the issues section
on GitHub page.

00:29:59.736 --> 00:30:01.846 A:middle
You can create a new issue or
you can choose an existing one,

00:29:59.736 --> 00:30:01.846 A:middle
You can create a new issue or
you can choose an existing one,

00:30:02.156 --> 00:30:03.876 A:middle
then develop the feature.

00:30:04.096 --> 00:30:05.696 A:middle
Feel free to reach out
to us or the community

00:30:05.696 --> 00:30:07.416 A:middle
with any questions you have
during the development.

00:30:08.186 --> 00:30:10.656 A:middle
And then work with us through
the code review process.

00:30:10.656 --> 00:30:12.516 A:middle
And this usually involves
you, the community,

00:30:12.516 --> 00:30:13.466 A:middle
and the Apple engineers.

00:30:13.816 --> 00:30:16.206 A:middle
And that's kind of where
our role also begins.

00:30:16.756 --> 00:30:18.686 A:middle
Once you have facilitated with
the development and review

00:30:18.686 --> 00:30:20.236 A:middle
of the feature, we'll
take it over

00:30:20.236 --> 00:30:22.796 A:middle
and enhance the feature even
more by providing accessibility.

00:30:22.946 --> 00:30:26.366 A:middle
We'll localize it for all the
languages we support in CareKit.

00:30:26.566 --> 00:30:29.936 A:middle
And then we'll do QA testing
for all the supported platforms.

00:30:30.946 --> 00:30:33.016 A:middle
We might ask for your help
during this process as well.

00:30:33.086 --> 00:30:35.216 A:middle
And then once the feature's
ready, we'll go ahead

00:30:35.216 --> 00:30:36.196 A:middle
and merge it into the framework.

00:30:36.806 --> 00:30:38.576 A:middle
With CareKit we are
excited to see how all

00:30:38.576 --> 00:30:39.396 A:middle
of us can work together

00:30:39.656 --> 00:30:41.666 A:middle
to create this new
patient-provider experience.

00:30:43.336 --> 00:30:45.056 A:middle
You can find more
information behind this URL.

00:30:45.186 --> 00:30:47.756 A:middle
It includes links to our website
and the GitHub repository,

00:30:48.216 --> 00:30:50.116 A:middle
as well as information on
how to get in touch with us

00:30:50.116 --> 00:30:51.326 A:middle
if you have any technical
questions,

00:30:51.716 --> 00:30:52.996 A:middle
or if you have a
great CareKit app idea

00:30:52.996 --> 00:30:55.396 A:middle
that you would like to share.

00:30:55.846 --> 00:30:57.316 A:middle
Be sure to check out
these related sessions

00:30:57.316 --> 00:30:58.756 A:middle
that can help you
build your CareKit app.

00:30:59.306 --> 00:31:00.436 A:middle
And thanks for coming
to this talk.

00:30:59.306 --> 00:31:00.436 A:middle
And thanks for coming
to this talk.

00:31:01.516 --> 00:31:06.500 A:middle
[ Applause ]
