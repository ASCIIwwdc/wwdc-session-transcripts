WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:22.341 --> 00:00:24.341 A:middle
[ Applause ]

00:00:24.666 --> 00:00:25.266 A:middle
&gt;&gt; Good afternoon!

00:00:25.786 --> 00:00:28.786 A:middle
[laughs] Welcome everyone.

00:00:28.786 --> 00:00:32.036 A:middle
Thanks for coming out to hear
about what's new in security.

00:00:32.485 --> 00:00:33.756 A:middle
My name's Lucia Ballard

00:00:33.756 --> 00:00:36.486 A:middle
and I manage the Secure
Transports Team here at Apple.

00:00:37.056 --> 00:00:39.586 A:middle
And together with my colleague
Simon we'll be talking you

00:00:39.586 --> 00:00:42.536 A:middle
through a bunch of new stuff
that we've been working

00:00:42.536 --> 00:00:45.716 A:middle
on to help you improve the
security for your customers.

00:00:46.306 --> 00:00:48.536 A:middle
So, I hope a lot of you caught
Evone's [assumed spelling] talk

00:00:48.536 --> 00:00:49.336 A:middle
before this.

00:00:49.696 --> 00:00:53.146 A:middle
It's a great overview of why
we do what we do and sort

00:00:53.146 --> 00:00:56.096 A:middle
of the fundamental underpinnings
of security on our system.

00:00:56.626 --> 00:00:58.596 A:middle
Here we're going to dive a
little more into the details.

00:00:58.596 --> 00:01:00.976 A:middle
So, here's what's on deck.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.596 --> 00:01:00.976 A:middle
So, here's what's on deck.

00:01:05.046 --> 00:01:06.546 A:middle
First up we'll be talking

00:01:06.546 --> 00:01:09.776 A:middle
about some network
security changes on iOS.

00:01:10.706 --> 00:01:12.896 A:middle
Then we'll discuss
a couple of updates

00:01:12.896 --> 00:01:14.276 A:middle
to our cryptography APIs.

00:01:14.886 --> 00:01:17.196 A:middle
And then Simon's going to talk

00:01:17.196 --> 00:01:21.476 A:middle
about platform security
on macOS.

00:01:21.956 --> 00:01:25.436 A:middle
So, diving into network
security; if you use your phone

00:01:25.436 --> 00:01:27.096 A:middle
as much as I do, you know

00:01:27.096 --> 00:01:29.686 A:middle
that it's accumulated an
incredible wealth of detail

00:01:29.686 --> 00:01:30.846 A:middle
about your personal life,

00:01:31.066 --> 00:01:33.256 A:middle
and a lot of that comes
across the network.

00:01:33.256 --> 00:01:34.986 A:middle
Whether it's articles
you're reading,

00:01:34.986 --> 00:01:36.926 A:middle
or messages you're
sending to your friends,

00:01:37.986 --> 00:01:39.376 A:middle
all these little bits of detail,

00:01:39.376 --> 00:01:41.726 A:middle
even if they seem
insignificant alone,

00:01:41.946 --> 00:01:45.316 A:middle
can add up to a really
incredible picture of a person.

00:01:45.726 --> 00:01:48.136 A:middle
So, that's why we
think at Apple all

00:01:48.136 --> 00:01:51.196 A:middle
of this detail should
be protected by default.

00:01:52.636 --> 00:01:55.426 A:middle
We think HTTPS is the new HTTP.

00:01:55.796 --> 00:01:58.326 A:middle
So, for every resource you're
loading across the network,

00:01:58.736 --> 00:02:00.326 A:middle
you should provide
confidentiality


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.736 --> 00:02:00.326 A:middle
you should provide
confidentiality

00:02:00.326 --> 00:02:02.176 A:middle
and data integrity
to your users.

00:02:02.696 --> 00:02:09.036 A:middle
The other key point here is that
not all HTTPS is created equal.

00:02:10.286 --> 00:02:14.956 A:middle
HTTPS is built on SSL, or now
in the modern age known as TLS,

00:02:16.016 --> 00:02:19.886 A:middle
and not all versions of this
protocol actually provide enough

00:02:19.946 --> 00:02:24.536 A:middle
security that your users be
resistant against attacks.

00:02:24.716 --> 00:02:26.146 A:middle
So, building on these
principles,

00:02:26.816 --> 00:02:29.616 A:middle
last year we introduced
App Transport Security.

00:02:30.516 --> 00:02:35.106 A:middle
App Transport Security
means that for all loads

00:02:35.106 --> 00:02:37.826 A:middle
that you're doing,
using the NSURLSession,

00:02:37.996 --> 00:02:41.116 A:middle
or even the older
NSURLConnection APIs,

00:02:41.606 --> 00:02:46.536 A:middle
you have to be using top of
line, solid TLS connections.

00:02:47.646 --> 00:02:51.436 A:middle
First off that means TLS
version 1.2; this version's been

00:02:51.436 --> 00:02:55.706 A:middle
out for a while, but it's the
only one that's fully resistant

00:02:55.706 --> 00:02:59.416 A:middle
to all the vulnerabilities that
we know about, like BEAST attack

00:02:59.666 --> 00:03:02.756 A:middle
or the POODLE attack, or other
exploits with these scary names.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.666 --> 00:03:02.756 A:middle
or the POODLE attack, or other
exploits with these scary names.

00:03:04.556 --> 00:03:07.126 A:middle
It also means you have to
use strong cryptography

00:03:07.606 --> 00:03:11.046 A:middle
so that's ciphers like
AES-128 or better,

00:03:11.526 --> 00:03:13.966 A:middle
and certificates
signed with SHA-2.

00:03:14.256 --> 00:03:19.116 A:middle
Certificates signed with SHA-1,
it's getting easier to attack.

00:03:19.346 --> 00:03:21.306 A:middle
Finally, it also
means forward secrecy.

00:03:21.826 --> 00:03:23.916 A:middle
So, this is a way
to exchange keys

00:03:23.916 --> 00:03:25.336 A:middle
between server and the client.

00:03:25.586 --> 00:03:28.566 A:middle
It gives an amazing
property, which means even

00:03:28.566 --> 00:03:30.726 A:middle
if in the future
that certificate --

00:03:31.186 --> 00:03:33.046 A:middle
the server's certificate
is compromised,

00:03:33.556 --> 00:03:36.786 A:middle
you can't reveal the
content of any communications

00:03:36.786 --> 00:03:39.176 A:middle
that have happened in the past.

00:03:39.396 --> 00:03:42.546 A:middle
So, you add all these together
and you have, what we think,

00:03:42.806 --> 00:03:44.026 A:middle
is a secure connection

00:03:44.026 --> 00:03:47.276 A:middle
that protects the
data of your clients.

00:03:47.326 --> 00:03:50.696 A:middle
Now, we know that it takes
some time to get up to speed

00:03:50.696 --> 00:03:54.086 A:middle
with App Transport Security, so
we also introduced Exceptions.

00:03:54.536 --> 00:03:57.536 A:middle
You can turn it off globally,
or you could set Exceptions

00:03:57.536 --> 00:03:58.956 A:middle
up for particular domains

00:03:59.176 --> 00:04:02.826 A:middle
that you knew couldn't
move to TLS that fast.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.176 --> 00:04:02.826 A:middle
that you knew couldn't
move to TLS that fast.

00:04:03.036 --> 00:04:04.436 A:middle
Now I'm wondering
how many people

00:04:04.436 --> 00:04:06.346 A:middle
in this audience are
thinking, "Oh yeah,

00:04:06.616 --> 00:04:09.206 A:middle
I set that Exception last
year and haven't thought

00:04:09.206 --> 00:04:10.066 A:middle
about it for a while."

00:04:10.776 --> 00:04:13.126 A:middle
Well, now is the
time to revisit it

00:04:14.266 --> 00:04:16.305 A:middle
because this year we're starting

00:04:16.305 --> 00:04:19.266 A:middle
to enforce App Transport
Security at the App Store.

00:04:20.916 --> 00:04:25.446 A:middle
This is going to kick in at
the end of 2016 and it means

00:04:25.486 --> 00:04:27.676 A:middle
that for most Exceptions
you'll need

00:04:27.676 --> 00:04:29.516 A:middle
to provide a reasonable
justification.

00:04:29.906 --> 00:04:31.676 A:middle
So, for all of these Exceptions

00:04:31.726 --> 00:04:34.386 A:middle
that actually turn off
App Transport Security,

00:04:34.526 --> 00:04:38.096 A:middle
or its key properties
like using TLS 1.2,

00:04:38.416 --> 00:04:40.856 A:middle
you'll need to explain
why you need

00:04:40.856 --> 00:04:42.626 A:middle
to use this Exception
in the first place.

00:04:43.646 --> 00:04:46.946 A:middle
For other Exceptions like
Forward Secrecy, we recognize

00:04:47.166 --> 00:04:49.426 A:middle
that support for those
is not fully universal,

00:04:49.706 --> 00:04:52.766 A:middle
so for now those Exceptions
will be granted automatically

00:04:52.766 --> 00:04:54.366 A:middle
without any justification.

00:04:56.186 --> 00:04:59.936 A:middle
So for example, if you have a
partner server you're working

00:04:59.936 --> 00:05:02.156 A:middle
with and you don't have control


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.936 --> 00:05:02.156 A:middle
with and you don't have control

00:05:02.156 --> 00:05:05.496 A:middle
over what cipher suites they're
offering, we will be able

00:05:05.496 --> 00:05:06.976 A:middle
to enable you to keep
talking with that server.

00:05:13.046 --> 00:05:15.136 A:middle
We're also adding
some new Exceptions

00:05:15.546 --> 00:05:16.936 A:middle
to make it easier to adopt.

00:05:17.346 --> 00:05:20.766 A:middle
So for example, if you're
using Streaming Media

00:05:20.766 --> 00:05:24.766 A:middle
and that media's already
encrypted in bulk, we'll be able

00:05:24.766 --> 00:05:27.946 A:middle
to offer an Exception through
AV Foundation for you to load

00:05:27.946 --> 00:05:29.686 A:middle
that media without
connecting over TLS.

00:05:30.376 --> 00:05:33.086 A:middle
I want to be clear, we still
think the right answer here is

00:05:33.196 --> 00:05:34.986 A:middle
that you use TLS for everything,

00:05:35.486 --> 00:05:38.816 A:middle
but in some cases we will be
able to provide this Exception

00:05:39.006 --> 00:05:40.726 A:middle
to help you transition
more smoothly.

00:05:42.736 --> 00:05:45.226 A:middle
We're also offering a
Web Content Exception.

00:05:45.796 --> 00:05:49.016 A:middle
So, here sometimes your app
needs to load arbitrary content

00:05:49.016 --> 00:05:49.826 A:middle
from around the web

00:05:49.826 --> 00:05:53.136 A:middle
and of course you can't
guarantee that's using HTTPS.

00:05:54.056 --> 00:05:58.626 A:middle
So, if you're WKWebView, then
you can just set this key

00:05:58.706 --> 00:06:01.836 A:middle
in your app's Info.plist.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.706 --> 00:06:01.836 A:middle
in your app's Info.plist.

00:06:01.836 --> 00:06:07.246 A:middle
NSAllowsAarbitraryLoads
inWebContentKey and then all

00:06:07.246 --> 00:06:08.626 A:middle
of those loads will be exempted

00:06:08.626 --> 00:06:10.886 A:middle
from the App Transport
Security requirements,

00:06:11.116 --> 00:06:13.606 A:middle
but everything else your
app is doing, like talking

00:06:13.606 --> 00:06:14.976 A:middle
to your own server, will
still get the protection.

00:06:20.076 --> 00:06:21.676 A:middle
So, that's App Transport
Security,

00:06:22.926 --> 00:06:25.846 A:middle
but we're also making changes
to TLS across the system

00:06:26.746 --> 00:06:31.766 A:middle
because cipher suites keep
evolving and keep getting more

00:06:31.766 --> 00:06:34.116 A:middle
and more effective attacks
posted against them.

00:06:34.796 --> 00:06:37.506 A:middle
So, no matter what
your ATS settings are,

00:06:38.066 --> 00:06:40.136 A:middle
we've now disabled
RC4 by default

00:06:40.136 --> 00:06:44.846 A:middle
for anyone using
our networking APIs.

00:06:45.046 --> 00:06:48.216 A:middle
We've also disabled SSLv3
in Secure Transport.

00:06:48.406 --> 00:06:49.356 A:middle
So, even if you're dialing

00:06:49.356 --> 00:06:51.906 A:middle
down into our lower level
APIs you won't be able

00:06:51.906 --> 00:06:53.276 A:middle
to access SSLv3.

00:06:54.276 --> 00:06:56.186 A:middle
Research has simply
moved too far for both

00:06:56.186 --> 00:06:57.996 A:middle
of these technologies
and no longer think

00:06:57.996 --> 00:07:00.586 A:middle
that they provide effective
security for our users.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.996 --> 00:07:00.586 A:middle
that they provide effective
security for our users.

00:07:00.996 --> 00:07:04.596 A:middle
So, these are disabled.

00:07:05.386 --> 00:07:07.356 A:middle
Other algorithms are
starting to show their age;

00:07:07.796 --> 00:07:12.356 A:middle
specifically SHA-1 is showing
more and more vulnerability

00:07:12.356 --> 00:07:14.446 A:middle
to attacks, as is 3DES.

00:07:15.356 --> 00:07:17.706 A:middle
So, if you know that you
have a dependency on either

00:07:17.706 --> 00:07:21.486 A:middle
of these algorithms now
is the time to drop it.

00:07:22.236 --> 00:07:25.316 A:middle
And I recognize many people in
this room are app developers

00:07:25.316 --> 00:07:28.336 A:middle
and aren't in charge of their
own back ends, so you'll need

00:07:28.336 --> 00:07:31.026 A:middle
to reach out to the
folks at your company

00:07:31.026 --> 00:07:33.136 A:middle
or whoever's hosting your
back end to make sure

00:07:33.616 --> 00:07:35.876 A:middle
that they've dropped
any dependency

00:07:35.876 --> 00:07:38.326 A:middle
on these older algorithms
that are getting deprecated.

00:07:39.246 --> 00:07:42.166 A:middle
It would be a great time to
check in about the status

00:07:42.166 --> 00:07:44.666 A:middle
of loading things using
HTTPS and make sure

00:07:44.666 --> 00:07:47.216 A:middle
that you are cleared for
App Transport Security,

00:07:47.736 --> 00:07:48.976 A:middle
then you'll be able to
fly through app review.

00:07:53.306 --> 00:07:54.916 A:middle
So, that's App Transport
Security.

00:07:55.916 --> 00:07:58.426 A:middle
It's making sure everything
loads using strong TLS,

00:07:58.976 --> 00:08:01.246 A:middle
but strong TLS is not enough.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.976 --> 00:08:01.246 A:middle
but strong TLS is not enough.

00:08:02.616 --> 00:08:05.456 A:middle
You also need to have
confidence that the certificate

00:08:05.456 --> 00:08:07.016 A:middle
that you're using to validate

00:08:07.016 --> 00:08:10.686 A:middle
that TLS connection
represents the right server.

00:08:11.076 --> 00:08:13.976 A:middle
So, I want to talk about a
couple of different technologies

00:08:14.016 --> 00:08:17.556 A:middle
that we're using today to help
you have confidence that you're

00:08:17.556 --> 00:08:20.546 A:middle
in fact reaching out to the
server that you think you are

00:08:20.866 --> 00:08:23.186 A:middle
when you're establishing
these secure communications.

00:08:23.846 --> 00:08:27.766 A:middle
So, first let's back up
and talk a little bit

00:08:27.766 --> 00:08:28.976 A:middle
about how certificates
work today.

00:08:33.046 --> 00:08:34.676 A:middle
So, if you're connecting
to a server,

00:08:34.676 --> 00:08:37.285 A:middle
that server has had
a certificate issued

00:08:37.285 --> 00:08:38.606 A:middle
from a certificate authority.

00:08:38.856 --> 00:08:40.686 A:middle
That authority validates
the host name

00:08:40.686 --> 00:08:42.515 A:middle
and says, "Yep, sounds good.

00:08:42.515 --> 00:08:44.096 A:middle
You are in fact example.com.

00:08:44.096 --> 00:08:45.556 A:middle
Here's your cryptographic
proof of that."

00:08:46.056 --> 00:08:48.976 A:middle
And when you connect the server
sends that certificate over.

00:08:53.056 --> 00:08:56.116 A:middle
But this is not always
a perfect mechanism.

00:08:57.386 --> 00:09:00.336 A:middle
If there's an attacker who
manages to get a certificate


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:57.386 --> 00:09:00.336 A:middle
If there's an attacker who
manages to get a certificate

00:09:00.446 --> 00:09:03.386 A:middle
for your host name, then
the attacker can provide

00:09:03.386 --> 00:09:06.166 A:middle
that certificate, and you as
the client don't have a way

00:09:06.166 --> 00:09:08.746 A:middle
to distinguish the attacker's
server from your own server.

00:09:09.516 --> 00:09:10.336 A:middle
This could happen

00:09:10.336 --> 00:09:13.026 A:middle
if the certificate
authority makes a mistake or,

00:09:13.026 --> 00:09:14.076 A:middle
worse case scenario,

00:09:14.076 --> 00:09:16.246 A:middle
if the certificate
authority gets compromised,

00:09:16.426 --> 00:09:18.736 A:middle
someone else uses their private
keys to sign with things.

00:09:21.446 --> 00:09:24.536 A:middle
So, today I'm proud to announce
that we're joining the effort

00:09:24.536 --> 00:09:26.196 A:middle
for certificate transparency.

00:09:27.276 --> 00:09:31.076 A:middle
Certificate transparency is a
technology that uses public,

00:09:31.076 --> 00:09:33.556 A:middle
verifiable logs of
issued certificates.

00:09:34.496 --> 00:09:37.496 A:middle
These logs collect certificates
from a huge variety of sources,

00:09:37.496 --> 00:09:39.856 A:middle
so there are many participating
certificate authorities,

00:09:40.046 --> 00:09:41.936 A:middle
but in fact anyone
can submit a log.

00:09:43.416 --> 00:09:46.876 A:middle
Then the logs issue
a cryptographic proof

00:09:47.066 --> 00:09:48.576 A:middle
that the certificate
has been logged

00:09:48.766 --> 00:09:50.406 A:middle
and a client can
check for that proof.

00:09:50.406 --> 00:09:52.756 A:middle
There are a bunch of
different ways to do it.

00:09:52.756 --> 00:09:54.826 A:middle
Proof can be embedded in
the certificate itself,

00:09:54.826 --> 00:09:57.666 A:middle
or it can get handed over
in the TLS handshake,

00:09:58.466 --> 00:10:00.676 A:middle
or it can be delivered
by OCSP stapling,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.466 --> 00:10:00.676 A:middle
or it can be delivered
by OCSP stapling,

00:10:00.676 --> 00:10:04.536 A:middle
which I'll talk more
about in a minute.

00:10:04.716 --> 00:10:06.876 A:middle
So, here's a quick
overview on how it works.

00:10:07.456 --> 00:10:14.416 A:middle
First, the certificate authority
not only issues a certificate

00:10:14.416 --> 00:10:17.086 A:middle
to the server, but it also
sends it over to the log,

00:10:17.566 --> 00:10:19.246 A:middle
it gets added into
the public log.

00:10:20.456 --> 00:10:22.906 A:middle
The log then sends
a signed proof

00:10:22.956 --> 00:10:24.406 A:middle
that the certificate
has been included,

00:10:25.066 --> 00:10:28.776 A:middle
and the server hands both that
and the original certificate

00:10:29.146 --> 00:10:30.266 A:middle
over to you, the client.

00:10:30.866 --> 00:10:33.046 A:middle
That means you can
validate the pair together.

00:10:35.796 --> 00:10:38.676 A:middle
So, certificate transparency
makes it more difficult

00:10:38.786 --> 00:10:40.396 A:middle
to launch attacks.

00:10:41.356 --> 00:10:43.366 A:middle
Basically it puts the
attacker in a bind.

00:10:43.366 --> 00:10:45.646 A:middle
If the attacker can
get a certificate

00:10:45.776 --> 00:10:49.776 A:middle
from an authority that's not
participating, they have no way

00:10:49.946 --> 00:10:51.796 A:middle
to get that cryptographic proof

00:10:52.166 --> 00:10:54.436 A:middle
that the certificate has
been included in the log.

00:10:55.096 --> 00:10:56.986 A:middle
So, they hand over
the certificate alone

00:10:56.986 --> 00:10:59.836 A:middle
and the client can reject it.

00:10:59.986 --> 00:11:03.946 A:middle
Alternatively, if they are using
a certificate authority that's


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.986 --> 00:11:03.946 A:middle
Alternatively, if they are using
a certificate authority that's

00:11:03.946 --> 00:11:07.926 A:middle
participating, then that
tainted certificate gets logged

00:11:07.926 --> 00:11:10.796 A:middle
and is publically visible, and
that gives you an opportunity

00:11:10.796 --> 00:11:13.536 A:middle
to revoke the certificate at
the certificate authority level.

00:11:13.976 --> 00:11:19.136 A:middle
So, we think this is a critical
technology to enable you

00:11:19.136 --> 00:11:21.806 A:middle
to have confidence that the
certificate that you're talking

00:11:21.806 --> 00:11:27.476 A:middle
to is in fact the certificate
you want to be talking to.

00:11:27.726 --> 00:11:29.216 A:middle
So, here's how you
can try it out.

00:11:30.586 --> 00:11:33.526 A:middle
You can actually use the same
info.plist that you used to set

00:11:33.526 --> 00:11:35.696 A:middle
up your app for security
configuration.

00:11:36.006 --> 00:11:39.966 A:middle
It's a new keyword, so for each
example it has a certificate

00:11:39.966 --> 00:11:42.306 A:middle
that's participating, you
just set this keyword,

00:11:42.306 --> 00:11:45.616 A:middle
and then your client will reject
any certificate it can't prove

00:11:45.666 --> 00:11:46.906 A:middle
that it's been publically
logged.

00:11:47.336 --> 00:11:53.246 A:middle
Our current policy roughly
requires that you need a proof

00:11:53.246 --> 00:11:54.606 A:middle
from at least two logs.

00:11:55.816 --> 00:11:59.576 A:middle
These logs -- we're adding
new logs as we qualify them,

00:11:59.736 --> 00:12:01.406 A:middle
but basically if your
certificate works


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.736 --> 00:12:01.406 A:middle
but basically if your
certificate works

00:12:01.406 --> 00:12:03.236 A:middle
in Chromium it'll
work for us as well.

00:12:03.866 --> 00:12:05.626 A:middle
And there's a lot
more information

00:12:05.726 --> 00:12:09.546 A:middle
about the general technology
at certificatetransparency.org.

00:12:09.826 --> 00:12:10.976 A:middle
So, I encourage you
to go check that out.

00:12:15.286 --> 00:12:18.966 A:middle
Now certificate transparency is
a great piece of this ecosystem,

00:12:19.156 --> 00:12:21.206 A:middle
but it doesn't totally
replace revocation.

00:12:21.366 --> 00:12:23.816 A:middle
There's still that last
step where once you found

00:12:23.816 --> 00:12:26.606 A:middle
out the certificate is flawed
for some reason you have

00:12:26.606 --> 00:12:27.996 A:middle
to actually stop trusting it.

00:12:29.416 --> 00:12:31.466 A:middle
So, I want to take a
couple of minutes to talk

00:12:31.466 --> 00:12:33.406 A:middle
about our recommended
practice here.

00:12:33.716 --> 00:12:35.166 A:middle
It's called the OCSP stapling.

00:12:35.996 --> 00:12:38.696 A:middle
Now this is a standard that's
been out for a couple of years,

00:12:39.106 --> 00:12:40.386 A:middle
but we think that it --

00:12:40.386 --> 00:12:42.756 A:middle
now's the time for folks
to actually move to it

00:12:42.756 --> 00:12:44.756 A:middle
and start adopting
it because support

00:12:44.756 --> 00:12:46.456 A:middle
for it is now quite widespread.

00:12:46.976 --> 00:12:49.816 A:middle
OCSP stapling is an enhancement

00:12:49.816 --> 00:12:51.926 A:middle
to the online certificate
status protocol

00:12:52.066 --> 00:12:53.986 A:middle
and solves a bunch
of problems with it.

00:12:55.546 --> 00:12:58.656 A:middle
So, as a refresher,
this is how OCSP works.

00:12:58.656 --> 00:13:00.336 A:middle
We have the same set up, right?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.656 --> 00:13:00.336 A:middle
We have the same set up, right?

00:13:00.336 --> 00:13:03.196 A:middle
Where your certificate authority
is issuing the certificate

00:13:03.196 --> 00:13:06.776 A:middle
to a server, every
time a client connects

00:13:06.776 --> 00:13:09.726 A:middle
to that server it sees the
certificate and it wants

00:13:09.726 --> 00:13:11.026 A:middle
to know whether it's
still valid.

00:13:12.106 --> 00:13:15.076 A:middle
So, it asks the certificate
authority right there

00:13:15.076 --> 00:13:16.606 A:middle
in the middle of
the TLS handshake,

00:13:17.336 --> 00:13:19.256 A:middle
and the certificate
authority says, "Yep,

00:13:19.446 --> 00:13:22.216 A:middle
the certs still valid," or
"No, sorry it's invalid.

00:13:22.316 --> 00:13:23.536 A:middle
Don't trust it."

00:13:24.536 --> 00:13:25.786 A:middle
This has some issues.

00:13:26.726 --> 00:13:28.576 A:middle
One of them is that it's slow.

00:13:28.616 --> 00:13:30.796 A:middle
You're right in the middle of
this handshake; you're trying

00:13:30.796 --> 00:13:32.636 A:middle
to get your resources,
you don't want to wait

00:13:32.636 --> 00:13:34.876 A:middle
to make your network
connection to some other entity,

00:13:35.676 --> 00:13:37.336 A:middle
especially if that
server's gone down,

00:13:37.336 --> 00:13:38.596 A:middle
you might be hanging
for a while.

00:13:39.816 --> 00:13:43.086 A:middle
The other major issue is
that it leaks a little bit

00:13:43.086 --> 00:13:45.416 A:middle
about whatever activity
you're doing online.

00:13:45.676 --> 00:13:47.536 A:middle
Your certificate
authority gets to see

00:13:47.536 --> 00:13:48.616 A:middle
which host names
you're connecting

00:13:48.616 --> 00:13:51.176 A:middle
to because you're
sending a response

00:13:51.176 --> 00:13:52.636 A:middle
up each time you connect.

00:13:55.636 --> 00:13:58.506 A:middle
OCSP stapling resolves
a lot of these concerns.

00:13:58.906 --> 00:14:00.566 A:middle
So, here's basically
how it works.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.906 --> 00:14:00.566 A:middle
So, here's basically
how it works.

00:14:01.506 --> 00:14:03.006 A:middle
Instead of the client asking,

00:14:03.716 --> 00:14:05.926 A:middle
the server asks the
certificate authority,

00:14:06.456 --> 00:14:10.346 A:middle
and the certificate authority
hands a signed response back

00:14:10.346 --> 00:14:10.956 A:middle
to the server.

00:14:11.126 --> 00:14:12.986 A:middle
Now it's signed by the
certificate authority

00:14:13.326 --> 00:14:15.206 A:middle
so you know you can trust it.

00:14:15.816 --> 00:14:19.466 A:middle
Then the server gives both
the certificate and a promise

00:14:19.496 --> 00:14:22.266 A:middle
that it's valid over to
the client, all in line,

00:14:22.266 --> 00:14:22.976 A:middle
all in the same handshake.

00:14:27.256 --> 00:14:30.356 A:middle
So, this means that your
revocation information is

00:14:30.356 --> 00:14:32.216 A:middle
delivered reliably and quickly.

00:14:32.216 --> 00:14:33.456 A:middle
There's no extra waiting.

00:14:33.656 --> 00:14:34.856 A:middle
There's no concern there.

00:14:35.986 --> 00:14:37.856 A:middle
And it protects your
user's privacy

00:14:37.856 --> 00:14:39.956 A:middle
because the only connection
they're making is back

00:14:39.956 --> 00:14:40.796 A:middle
to your server.

00:14:42.716 --> 00:14:44.646 A:middle
You may have noticed
that diagram looked a lot

00:14:44.646 --> 00:14:46.856 A:middle
like the certificate
transparency diagram and that's

00:14:46.856 --> 00:14:48.716 A:middle
because you can use
the same mechanism

00:14:48.716 --> 00:14:50.736 A:middle
to deliver certificate
transparency proofs.

00:14:50.816 --> 00:14:54.606 A:middle
As long as your certificate
authority is participating you

00:14:54.606 --> 00:14:57.596 A:middle
can hand all of that information
together in the same handshake.

00:14:59.506 --> 00:15:03.896 A:middle
And, like I said, OCSP
stapling is widely supported


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.506 --> 00:15:03.896 A:middle
And, like I said, OCSP
stapling is widely supported

00:15:03.896 --> 00:15:06.966 A:middle
across many operating systems
and is backwards compatible,

00:15:06.966 --> 00:15:10.246 A:middle
so you can go turn it on
today, in Apache, in GenX,

00:15:10.286 --> 00:15:12.866 A:middle
whatever your backend
is hosted on.

00:15:13.176 --> 00:15:15.976 A:middle
And it's now fully supported
across every Apple platform.

00:15:20.196 --> 00:15:22.836 A:middle
So, if you could take a step
back and summarize where we are

00:15:22.836 --> 00:15:26.736 A:middle
with network security, now's
the time to move forward

00:15:27.026 --> 00:15:29.346 A:middle
to App Transport
Security Standards.

00:15:29.346 --> 00:15:34.066 A:middle
So, that's strong algorithms
and strong ciphers; TLS 1.2,

00:15:34.286 --> 00:15:36.706 A:middle
forward secrecy, and
SHA-2 Certificates.

00:15:38.536 --> 00:15:41.806 A:middle
Also, it'd be a great time
to start experimenting

00:15:41.806 --> 00:15:43.296 A:middle
with certificate transparency.

00:15:43.646 --> 00:15:45.926 A:middle
Find certificate authorities
that are participating

00:15:45.926 --> 00:15:49.466 A:middle
and get integrated
into this ecosystem.

00:15:49.976 --> 00:15:54.096 A:middle
And please, go enable
OCSP stapling

00:15:54.096 --> 00:15:56.636 A:middle
so we connect the
full loop and know

00:15:56.636 --> 00:15:57.906 A:middle
that you can have confidence

00:15:58.126 --> 00:16:00.416 A:middle
in making secured connections
back to your servers.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.126 --> 00:16:00.416 A:middle
in making secured connections
back to your servers.

00:16:01.016 --> 00:16:03.116 A:middle
So, that's network security.

00:16:03.116 --> 00:16:08.276 A:middle
Now I'd like to take a
couple of minutes to talk

00:16:08.276 --> 00:16:09.806 A:middle
about some cryptographic
improvements.

00:16:10.436 --> 00:16:13.626 A:middle
So, first up is SecKey.

00:16:14.056 --> 00:16:17.066 A:middle
SecKey is our algorithm,
or excuse me,

00:16:17.066 --> 00:16:20.876 A:middle
is our API for asymmetric
cryptographic operations.

00:16:21.346 --> 00:16:23.096 A:middle
And in this release
we've unified it

00:16:23.146 --> 00:16:25.116 A:middle
across macOS and iOS APIs.

00:16:26.416 --> 00:16:29.356 A:middle
SecKey now has support for all
the common operations you would

00:16:29.356 --> 00:16:33.566 A:middle
want to do with asymmetric
key pairs; the RSA, the ACC.

00:16:33.566 --> 00:16:36.876 A:middle
So, that's signing and
verifying with asymmetric keys.

00:16:38.386 --> 00:16:40.876 A:middle
This means that SecKey
is a total replacement

00:16:41.096 --> 00:16:44.276 A:middle
for the deprecated
CDSA calls on macOS.

00:16:44.816 --> 00:16:48.596 A:middle
And it also replaces any use of
SecTransform you might be doing

00:16:48.906 --> 00:16:52.006 A:middle
to do cryptography
with asymmetric keys.

00:16:52.576 --> 00:16:54.946 A:middle
So, we strongly recommend
moving forward with SecKey.

00:16:56.836 --> 00:17:00.866 A:middle
We've also tied this into a
new kit called CryptoTokenKit.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:56.836 --> 00:17:00.866 A:middle
We've also tied this into a
new kit called CryptoTokenKit.

00:17:01.796 --> 00:17:05.425 A:middle
CryptoTokenKit is system support
for cryptographic devices

00:17:05.425 --> 00:17:08.796 A:middle
so that smart cards you might
be using to prove your identity

00:17:08.796 --> 00:17:11.806 A:middle
and various enterprises
or USB tokens,

00:17:12.486 --> 00:17:15.986 A:middle
we now have out of the
box integration with these

00:17:16.526 --> 00:17:18.646 A:middle
and they can integrate
into system surfaces.

00:17:18.646 --> 00:17:23.195 A:middle
So, that means the Token content
is available in the keychain,

00:17:23.195 --> 00:17:27.236 A:middle
as you would expect, and the
Token operations are available

00:17:27.425 --> 00:17:28.706 A:middle
using the SecKey API.

00:17:29.996 --> 00:17:31.676 A:middle
Now this is a complex topic

00:17:31.676 --> 00:17:33.326 A:middle
and there's a lot of
detail to go into.

00:17:33.866 --> 00:17:36.606 A:middle
So, please come see us in the
security labs and we can talk

00:17:36.666 --> 00:17:37.776 A:middle
through your use case.

00:17:38.476 --> 00:17:43.036 A:middle
So, thanks for your attention
and with that I'll hand it off

00:17:43.036 --> 00:17:44.946 A:middle
to Simon to talk about what's
new in Platform Security.

00:17:45.516 --> 00:17:50.256 A:middle
[ Applause ]

00:17:50.756 --> 00:17:51.596 A:middle
&gt;&gt; Thank you very much Lucia.

00:17:53.246 --> 00:17:54.556 A:middle
Hello. I'm Simon Cooper.

00:17:54.706 --> 00:17:56.556 A:middle
I'm the manager of the
Trusted Engineering Team.

00:17:57.206 --> 00:17:59.846 A:middle
So, I'm going to talk about
what's new in security,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:00.516 --> 00:18:02.526 A:middle
but first of all I
want to talk about --

00:18:02.526 --> 00:18:06.626 A:middle
a little bit about how software
is delivered on the Mac,

00:18:07.216 --> 00:18:10.956 A:middle
a little bit about Developer
ID, and I'm going to talk

00:18:10.956 --> 00:18:13.526 A:middle
about Gatekeeper and
some packaging issues

00:18:13.526 --> 00:18:14.416 A:middle
surrounding Gatekeeper.

00:18:15.296 --> 00:18:16.566 A:middle
So, let's start off about --

00:18:16.566 --> 00:18:18.966 A:middle
talking about how
software is delivered

00:18:18.966 --> 00:18:22.816 A:middle
for a couple of our platforms.

00:18:22.816 --> 00:18:25.586 A:middle
So, for iOS you can get
apps from the App Store.

00:18:27.246 --> 00:18:30.576 A:middle
You can build and
run apps using Xcode

00:18:30.726 --> 00:18:33.026 A:middle
and install them on
your own devices.

00:18:34.246 --> 00:18:37.036 A:middle
And there's some enterprise
programs that allow you

00:18:37.036 --> 00:18:40.176 A:middle
to deliver and manage
content to devices.

00:18:41.526 --> 00:18:44.226 A:middle
You'll notice that all of these
installation mechanisms are

00:18:44.226 --> 00:18:46.106 A:middle
silently handled by
the iOS platform.

00:18:47.466 --> 00:18:49.426 A:middle
So, now I'd like to talk
a little bit about macOS.

00:18:49.856 --> 00:18:55.106 A:middle
So, you can also get apps
from the Mac App Store

00:18:55.106 --> 00:18:57.766 A:middle
and that's a very good
way to get your apps.

00:18:58.366 --> 00:19:03.366 A:middle
You can also get apps that are
assigned with Developer ID.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.366 --> 00:19:03.366 A:middle
You can also get apps that are
assigned with Developer ID.

00:19:05.996 --> 00:19:09.606 A:middle
You can also use Xcode
to build your own apps

00:19:09.656 --> 00:19:12.156 A:middle
and use the traditional
command-line UNIX tools

00:19:12.156 --> 00:19:13.976 A:middle
to build things in
the normal UNIX way.

00:19:18.046 --> 00:19:20.976 A:middle
So, let's go back and talk a
little bit about Developer ID.

00:19:25.256 --> 00:19:25.976 A:middle
So, what is Developer ID?

00:19:30.126 --> 00:19:31.576 A:middle
Developer ID allows you

00:19:31.576 --> 00:19:33.476 A:middle
to deliver apps outside
of the App Store.

00:19:35.616 --> 00:19:38.726 A:middle
These apps are usually
downloaded using a web browser.

00:19:41.656 --> 00:19:43.956 A:middle
The Developer ID
Program will issue you

00:19:44.246 --> 00:19:46.676 A:middle
with a Developer ID signing ID.

00:19:48.486 --> 00:19:50.086 A:middle
And when you sign apps using

00:19:50.086 --> 00:19:52.726 A:middle
that identity they are treated
specially by Gatekeeper.

00:19:54.596 --> 00:19:58.566 A:middle
There are actually some improved
flows in Xcode 8 that allow you

00:19:58.566 --> 00:20:00.446 A:middle
to properly export
your Developer ID


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.566 --> 00:20:00.446 A:middle
to properly export
your Developer ID

00:20:00.446 --> 00:20:00.976 A:middle
signed applications.

00:20:08.196 --> 00:20:09.986 A:middle
So, there's something
we're actually going to do

00:20:09.986 --> 00:20:12.216 A:middle
and that's a change to
the Developer ID Program,

00:20:12.616 --> 00:20:13.806 A:middle
and this was announced
yesterday.

00:20:13.946 --> 00:20:15.796 A:middle
We're actually allowing
Developer ID

00:20:15.796 --> 00:20:17.146 A:middle
to be used with iCloud.

00:20:19.536 --> 00:20:22.476 A:middle
So, Developer ID can
now use iCloud features.

00:20:22.836 --> 00:20:26.106 A:middle
That includes iCloud
Drive, iCloud Keychain,

00:20:26.656 --> 00:20:27.886 A:middle
Push Notifications, and VPN.

00:20:32.306 --> 00:20:33.066 A:middle
So, what does this mean?

00:20:34.256 --> 00:20:38.266 A:middle
This means that you can deliver
iCloud enabled apps outside

00:20:38.266 --> 00:20:42.756 A:middle
of the App Store and you can now
use Developer ID to share data

00:20:43.076 --> 00:20:45.416 A:middle
with your iCloud
enabled iOS apps.

00:20:46.686 --> 00:20:50.176 A:middle
You will be able to deploy
these new Developer ID apps back

00:20:50.346 --> 00:20:51.906 A:middle
to macOS 10.9.

00:20:52.606 --> 00:20:54.226 A:middle
So, I'm sure you want to know

00:20:54.226 --> 00:20:56.956 A:middle
when you'll be able
to do all of this.

00:20:57.176 --> 00:21:00.066 A:middle
So, you can start iCloud
Development testing today.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.176 --> 00:21:00.066 A:middle
So, you can start iCloud
Development testing today.

00:21:00.626 --> 00:21:01.976 A:middle
That's using the Xcode 8 tools.

00:21:06.106 --> 00:21:08.956 A:middle
And I'm sure you're aware
that when you're doing testing

00:21:09.296 --> 00:21:12.156 A:middle
of iCloud there is a development
and production environment.

00:21:13.126 --> 00:21:16.976 A:middle
When you're going to deploy
your iCloud App you'll want

00:21:16.976 --> 00:21:18.776 A:middle
to be deploying against
the production environment

00:21:19.136 --> 00:21:21.256 A:middle
and you'll have to wait for
an upcoming seed in order

00:21:21.256 --> 00:21:24.146 A:middle
to start testing that.

00:21:24.736 --> 00:21:27.566 A:middle
When you are going to do
that, please use the new flows

00:21:27.566 --> 00:21:31.306 A:middle
in Xcode 8 because they make
sure that you are deploying

00:21:31.306 --> 00:21:32.736 A:middle
against the production servers.

00:21:33.866 --> 00:21:36.746 A:middle
The Xcode team also
asks me to remind you

00:21:37.206 --> 00:21:40.296 A:middle
that please don't distribute
apps unless you're using the

00:21:40.296 --> 00:21:40.976 A:middle
GM tools.

00:21:45.396 --> 00:21:49.546 A:middle
So, the other side of
Developer ID is Gatekeeper.

00:21:50.486 --> 00:21:52.966 A:middle
Gatekeeper allows us to
control what apps are allowed

00:21:52.966 --> 00:21:54.216 A:middle
to run on your machine.

00:21:55.626 --> 00:21:59.206 A:middle
And there is a Preference Panel.

00:21:59.566 --> 00:22:01.586 A:middle
And on that Preference
Panel, in El Capitan,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.566 --> 00:22:01.586 A:middle
And on that Preference
Panel, in El Capitan,

00:22:02.026 --> 00:22:05.106 A:middle
there are these options; you can
run apps from the Mac App Store,

00:22:06.156 --> 00:22:09.586 A:middle
you can run from the Mac App
Store, unidentified developers,

00:22:09.956 --> 00:22:11.396 A:middle
or you can run apps
from anywhere.

00:22:12.706 --> 00:22:16.526 A:middle
When you first run an app
Gatekeeper will prompt you

00:22:16.726 --> 00:22:17.716 A:middle
before its first run.

00:22:19.256 --> 00:22:22.096 A:middle
We're actually making
some changes to Gatekeeper

00:22:22.446 --> 00:22:26.816 A:middle
and we're making changes to
the Gatekeeper UI in Sierra.

00:22:28.296 --> 00:22:30.126 A:middle
We are changing the
default options,

00:22:30.126 --> 00:22:32.256 A:middle
and those default
options are going to be --

00:22:32.516 --> 00:22:33.976 A:middle
you can run from
the Mac App Store,

00:22:34.736 --> 00:22:37.206 A:middle
you can run from the Mac App
Store unidentified developers.

00:22:38.356 --> 00:22:41.706 A:middle
Now if Gatekeeper rejects
your app for some reason,

00:22:42.186 --> 00:22:45.206 A:middle
there's usually a button that
appears in this Preference Pane

00:22:45.356 --> 00:22:48.786 A:middle
that allows you to open
and -- to open anyway.

00:22:50.216 --> 00:22:51.516 A:middle
Unfortunately I have to say,

00:22:51.516 --> 00:22:54.046 A:middle
in the seed build this function
is not actually working,

00:22:54.146 --> 00:22:56.186 A:middle
but it will be fixed
in a later seed build.

00:22:57.266 --> 00:23:01.076 A:middle
I also want to say that we
haven't actually changed the way


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:57.266 --> 00:23:01.076 A:middle
I also want to say that we
haven't actually changed the way

00:23:01.076 --> 00:23:02.846 A:middle
that this underlying
mechanism works and the way

00:23:02.846 --> 00:23:03.786 A:middle
that the policy works.

00:23:04.386 --> 00:23:06.666 A:middle
So, this means that if you
have managed configurations

00:23:06.666 --> 00:23:09.696 A:middle
or you use command line tools
and use the policy tools,

00:23:09.966 --> 00:23:11.976 A:middle
you can re-enable
the Allow Anywhere.

00:23:19.046 --> 00:23:20.946 A:middle
So, I want to talk a little bit
now about some other changes

00:23:20.946 --> 00:23:23.296 A:middle
to Gatekeeper, but
I first need to talk

00:23:23.296 --> 00:23:27.436 A:middle
about a repackaging problem
and the Gatekeeper enhancement

00:23:27.436 --> 00:23:29.096 A:middle
that we've developed
to address this.

00:23:29.836 --> 00:23:32.646 A:middle
Now the repackaging
problem is a problem

00:23:32.946 --> 00:23:34.746 A:middle
because of the way
certain apps are written.

00:23:34.746 --> 00:23:37.436 A:middle
There are a certain type of apps

00:23:37.886 --> 00:23:42.316 A:middle
that when they are written they
reach outside of themselves

00:23:42.486 --> 00:23:44.116 A:middle
and use external resources.

00:23:46.536 --> 00:23:54.216 A:middle
These apps may be delivered
in various ways and they may

00:23:54.216 --> 00:23:55.786 A:middle
in fact be correctly signed.

00:23:56.806 --> 00:23:58.896 A:middle
But the external
resources that they reach

00:23:58.896 --> 00:24:01.236 A:middle
out to may not be signed


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.896 --> 00:24:01.236 A:middle
out to may not be signed

00:24:02.026 --> 00:24:04.246 A:middle
and they can be code
or code equivalent.

00:24:04.566 --> 00:24:06.826 A:middle
They could be libraries,
they could be plug-ins,

00:24:07.276 --> 00:24:08.826 A:middle
they could even be HTML content.

00:24:09.266 --> 00:24:11.976 A:middle
And you may not be aware
that local HTML content,

00:24:11.976 --> 00:24:14.976 A:middle
that if it contains JavaScript
can access all of your system.

00:24:19.226 --> 00:24:22.916 A:middle
These resources could also be
Lua Scripts or Python Scripts

00:24:23.336 --> 00:24:24.396 A:middle
or even Apple Scripts.

00:24:26.666 --> 00:24:28.156 A:middle
So, what's the problem?

00:24:29.616 --> 00:24:32.066 A:middle
Well, if you put these two
things together inside a

00:24:32.066 --> 00:24:35.666 A:middle
container and deliver the app
in this way, maybe through a zip

00:24:36.106 --> 00:24:40.616 A:middle
or a disk image or using an
ISO image, and you put this app

00:24:41.306 --> 00:24:47.306 A:middle
into the container, and then you
put the resources alongside it,

00:24:48.256 --> 00:24:50.726 A:middle
when the app runs and it talks

00:24:50.726 --> 00:24:55.246 A:middle
to the external resources
it's loading these potentially

00:24:55.696 --> 00:24:56.456 A:middle
dangerous things.

00:24:57.296 --> 00:25:00.296 A:middle
And you'll notice that the
app, with its green border,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.296 --> 00:25:00.296 A:middle
And you'll notice that the
app, with its green border,

00:25:00.296 --> 00:25:03.716 A:middle
meaning that it's signed, is
reaching outside of itself,

00:25:03.716 --> 00:25:04.876 A:middle
outside of the signature,

00:25:05.276 --> 00:25:08.156 A:middle
and trying to touch these
potential resources.

00:25:08.246 --> 00:25:12.696 A:middle
So, if I take that app
and I repackage it,

00:25:13.106 --> 00:25:17.396 A:middle
but instead of packaging it with
the external resources that you,

00:25:17.456 --> 00:25:18.936 A:middle
the developer, would
like to be there,

00:25:19.056 --> 00:25:22.036 A:middle
and I put malicious
content there,

00:25:22.816 --> 00:25:25.226 A:middle
then when the user runs
the app they're not going

00:25:25.226 --> 00:25:27.116 A:middle
to be getting your
experience, they're going

00:25:27.116 --> 00:25:30.626 A:middle
to be getting the experience
of the malicious code.

00:25:31.506 --> 00:25:34.266 A:middle
Now if that malicious code
is a [inaudible] library

00:25:34.406 --> 00:25:37.036 A:middle
that you may have put into a
plug ins directory, for example,

00:25:37.626 --> 00:25:39.966 A:middle
then your app is almost
certainly not going

00:25:39.966 --> 00:25:41.866 A:middle
to be doing what you
expect it to be doing.

00:25:48.296 --> 00:25:50.646 A:middle
So, we're calling this
a repackaging problem,

00:25:51.186 --> 00:25:52.906 A:middle
and there are some things

00:25:52.906 --> 00:25:55.176 A:middle
that are actually
not affected directly

00:25:55.176 --> 00:25:58.446 A:middle
by the packaging problem,
and those things are apps

00:25:58.446 --> 00:25:59.966 A:middle
that are delivered
from the Mac App Store.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:00.716 --> 00:26:04.136 A:middle
And that is the best
way to get apps.

00:26:04.366 --> 00:26:10.616 A:middle
Other things that are
not directly affected is

00:26:10.616 --> 00:26:13.776 A:middle
if you install your apps using a
signed Apple Installer Package.

00:26:14.936 --> 00:26:15.966 A:middle
That doesn't mean to say

00:26:16.316 --> 00:26:18.906 A:middle
that the app once it's been
installed can't be repackaged

00:26:19.236 --> 00:26:20.716 A:middle
and delivered in
another mechanism,

00:26:20.976 --> 00:26:24.476 A:middle
but the actual Apple Installer
Package doesn't have the problem

00:26:24.476 --> 00:26:25.916 A:middle
of reaching outside
the resources.

00:26:31.046 --> 00:26:32.286 A:middle
So, there are things
that are affected,

00:26:32.676 --> 00:26:35.076 A:middle
and that is if you are
delivering your app using a zip,

00:26:35.536 --> 00:26:39.556 A:middle
or a disk image, or if you've
got a combination of things

00:26:39.786 --> 00:26:42.976 A:middle
in an ISO image, and any
other kind of archive format.

00:26:46.216 --> 00:26:49.506 A:middle
It's also possible that if
your disk image is structured

00:26:49.506 --> 00:26:51.806 A:middle
in such a way that
you are trying

00:26:51.806 --> 00:26:56.606 A:middle
to assemble an app using a
combination of pulling resources

00:26:56.606 --> 00:27:00.966 A:middle
from here and there, you can
also be affected by this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:56.606 --> 00:27:00.966 A:middle
from here and there, you can
also be affected by this.

00:27:07.386 --> 00:27:08.976 A:middle
So, I -- we need your
help with this problem.

00:27:13.046 --> 00:27:14.196 A:middle
And we also need to
protect our customers

00:27:14.196 --> 00:27:14.936 A:middle
because of this problem.

00:27:18.536 --> 00:27:19.386 A:middle
So, what do we need to do?

00:27:20.256 --> 00:27:23.156 A:middle
So, if you're delivering
something that has a signed app

00:27:23.156 --> 00:27:25.306 A:middle
with some external resources,
and you may be doing this

00:27:25.336 --> 00:27:29.286 A:middle
through using a zip, or a
disk image, or an ISO image.

00:27:29.486 --> 00:27:33.556 A:middle
And we need to ask you to
switch to using a disk image.

00:27:34.076 --> 00:27:37.846 A:middle
And the reason we're
asking you to do this is

00:27:37.886 --> 00:27:39.976 A:middle
because we can now
sign disk images.

00:27:43.136 --> 00:27:48.436 A:middle
You can sign a disk image
using macOS 10.11.5,

00:27:48.856 --> 00:27:51.776 A:middle
and that is the current
release of El Capitan,

00:27:52.436 --> 00:27:54.916 A:middle
or any of the later
release of OS X.

00:27:58.066 --> 00:28:01.636 A:middle
You can use the cosigning
tool to sign the app --


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.066 --> 00:28:01.636 A:middle
You can use the cosigning
tool to sign the app --

00:28:01.636 --> 00:28:03.176 A:middle
to sign the disk
image, I'm sorry,

00:28:03.926 --> 00:28:07.726 A:middle
and that will basically
bind the external resources

00:28:07.826 --> 00:28:10.236 A:middle
and the app together.

00:28:10.316 --> 00:28:12.756 A:middle
These signatures are actually
embedded in the disk image

00:28:12.956 --> 00:28:14.126 A:middle
and are carried along with it,

00:28:14.126 --> 00:28:17.896 A:middle
and this signed disk
image is compatible

00:28:17.896 --> 00:28:18.976 A:middle
with older OS releases.

00:28:23.046 --> 00:28:24.926 A:middle
So, I'd now like to give
some packaging advice.

00:28:25.886 --> 00:28:28.366 A:middle
So, one way to avoid
this packaging problem --

00:28:28.366 --> 00:28:30.576 A:middle
repackaging problem is
to avoid it completely

00:28:31.066 --> 00:28:33.396 A:middle
and put your resources
inside the app bundle

00:28:33.716 --> 00:28:34.966 A:middle
and then sign the whole thing.

00:28:41.046 --> 00:28:43.556 A:middle
If you're distributing just a
single app bundle you should

00:28:43.556 --> 00:28:45.976 A:middle
consider delivering it
via the Mac App Store.

00:28:47.296 --> 00:28:49.446 A:middle
You should certainly
sign the app.

00:28:50.486 --> 00:28:52.386 A:middle
Perhaps package it
in a zip archive,

00:28:52.796 --> 00:28:57.306 A:middle
but please verify the
signature before you release it.

00:28:57.426 --> 00:28:59.056 A:middle
Alternatively if you
have a complex set

00:28:59.056 --> 00:29:02.086 A:middle
up you can use a signed
Apple Installer Package.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.056 --> 00:29:02.086 A:middle
up you can use a signed
Apple Installer Package.

00:29:02.876 --> 00:29:07.366 A:middle
For a container with apps and
resources, with a disk image,

00:29:07.806 --> 00:29:10.266 A:middle
please use, and switch to
using a signed disk image.

00:29:11.266 --> 00:29:13.816 A:middle
Sign any content that you
have inside the container

00:29:14.176 --> 00:29:17.016 A:middle
so that app that's inside
there should also be signed,

00:29:18.356 --> 00:29:19.746 A:middle
and you should sign
the disk image.

00:29:20.466 --> 00:29:22.726 A:middle
And please verify all
the signatures before you

00:29:22.726 --> 00:29:22.976 A:middle
release it.

00:29:27.096 --> 00:29:28.956 A:middle
So, some final words
on packaging,

00:29:30.716 --> 00:29:32.726 A:middle
so if you're adding
personalization

00:29:32.826 --> 00:29:34.726 A:middle
or licensing information
to your app

00:29:34.726 --> 00:29:38.236 A:middle
when it's being downloaded
please use an extended attribute

00:29:38.236 --> 00:29:39.656 A:middle
on the bundle route of the app.

00:29:39.656 --> 00:29:42.756 A:middle
And there's a tech note that
describes how to do this

00:29:43.076 --> 00:29:45.316 A:middle
and that's Tech Note 2206.

00:29:45.586 --> 00:29:46.716 A:middle
And you could also do this

00:29:46.716 --> 00:29:48.596 A:middle
by signing the personalized
disk image.

00:29:51.116 --> 00:29:53.776 A:middle
Here are some things that
you should definitely not do.

00:29:55.076 --> 00:29:57.156 A:middle
You should not modify
your app after signing,

00:29:57.406 --> 00:29:58.776 A:middle
because this will break
the code signature,

00:29:58.776 --> 00:30:00.856 A:middle
and when Gatekeeper comes


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.776 --> 00:30:00.856 A:middle
and when Gatekeeper comes

00:30:00.856 --> 00:30:02.936 A:middle
to verify your app
it will get grumpy.

00:30:03.836 --> 00:30:05.946 A:middle
You should never deliver your
app with a broken signature

00:30:06.626 --> 00:30:09.986 A:middle
and please stop shipping
ISO images.

00:30:10.886 --> 00:30:14.276 A:middle
So, now I'd like to talk
about a Gatekeeper enhancement

00:30:14.506 --> 00:30:17.386 A:middle
that we have developed that
helps combat this problem.

00:30:18.006 --> 00:30:20.586 A:middle
And this is all about
protecting customers.

00:30:22.236 --> 00:30:25.856 A:middle
This mechanism, we're calling
Gatekeeper Path Randomization,

00:30:27.636 --> 00:30:30.666 A:middle
it supplements existing
Gatekeeper --

00:30:30.706 --> 00:30:32.816 A:middle
all the existing
Gatekeeper protections,

00:30:33.396 --> 00:30:36.976 A:middle
and there's no change
for Mac App Store apps.

00:30:41.496 --> 00:30:43.946 A:middle
And there's no change when
you're upgrading to Sierra

00:30:44.416 --> 00:30:47.606 A:middle
for any apps that were
previously run on your system.

00:30:49.996 --> 00:30:53.006 A:middle
This mechanism will
come into play

00:30:53.336 --> 00:30:59.286 A:middle
for any newly downloaded apps
and it applies to apps that are

00:30:59.286 --> 00:31:00.826 A:middle
on unsigned disk images.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.286 --> 00:31:00.826 A:middle
on unsigned disk images.

00:31:00.826 --> 00:31:05.976 A:middle
So, let me describe exactly how
this mechanism is going to work.

00:31:10.046 --> 00:31:13.146 A:middle
So, this is a complex
object, now this could be

00:31:13.146 --> 00:31:15.446 A:middle
in your Downloads folder and
it could be an unpacked zip,

00:31:16.206 --> 00:31:18.206 A:middle
or this could actually
be a mounted disk image

00:31:18.646 --> 00:31:20.976 A:middle
that contains your app
and those extra resources.

00:31:27.046 --> 00:31:31.316 A:middle
So, when you double
click on your app,

00:31:32.116 --> 00:31:38.926 A:middle
when your app runs it will be
relocated, with some tricks,

00:31:39.576 --> 00:31:43.666 A:middle
into a randomized place on the
file system and it won't be able

00:31:43.716 --> 00:31:44.976 A:middle
to access the resources.

00:31:50.046 --> 00:31:51.826 A:middle
So, this stops the
repackaging attack.

00:31:52.396 --> 00:31:56.116 A:middle
So there are some situations

00:31:56.286 --> 00:31:58.556 A:middle
where this relocation
does not happen.

00:31:59.206 --> 00:32:02.596 A:middle
If the user explicitly
moves the app


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.206 --> 00:32:02.596 A:middle
If the user explicitly
moves the app

00:32:02.906 --> 00:32:05.556 A:middle
and it's just the app
itself, if they move the app

00:32:05.556 --> 00:32:09.536 A:middle
with something else, then
this mechanism does not get

00:32:09.566 --> 00:32:10.016 A:middle
turned off.

00:32:10.856 --> 00:32:12.966 A:middle
If the user moves the
single app by itself,

00:32:13.096 --> 00:32:14.576 A:middle
maybe to Slash Applications,

00:32:15.446 --> 00:32:17.186 A:middle
then this mechanism
will be turned off.

00:32:19.296 --> 00:32:23.226 A:middle
This does not happen if
you sign your disk image.

00:32:24.006 --> 00:32:25.196 A:middle
So, any apps that are run

00:32:25.196 --> 00:32:27.676 A:middle
from a signed disk image will
not have this mechanism apply

00:32:27.766 --> 00:32:30.866 A:middle
to them.

00:32:31.386 --> 00:32:33.256 A:middle
This mechanism also
doesn't come into play

00:32:33.606 --> 00:32:36.966 A:middle
if you install software using a
signed Apple Installer Package.

00:32:37.536 --> 00:32:42.976 A:middle
It also doesn't apply to any
apps from the Mac App Store.

00:32:49.486 --> 00:32:51.976 A:middle
So, in summary if there
were two things to take away

00:32:51.976 --> 00:32:55.436 A:middle
from this talk; sign the things
that you deliver and check

00:32:55.526 --> 00:32:59.896 A:middle
that things that are valid.

00:32:59.896 --> 00:33:01.946 A:middle
So, more information about
this talk can be found here.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.896 --> 00:33:01.946 A:middle
So, more information about
this talk can be found here.

00:33:02.516 --> 00:33:05.500 A:middle
[ Applause ]

