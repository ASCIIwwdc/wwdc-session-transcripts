WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:06.516 --> 00:00:17.500 A:middle
[ Music ]

00:00:22.516 --> 00:00:27.856 A:middle
[ Applause ]

00:00:28.356 --> 00:00:30.226 A:middle
&gt;&gt; Good afternoon and welcome.

00:00:30.916 --> 00:00:33.886 A:middle
My name is Nurinder Manj and
I'm the Engineering Manager

00:00:33.886 --> 00:00:34.716 A:middle
of TVMLKit team.

00:00:35.536 --> 00:00:38.266 A:middle
I'm here with Parry
Panesar to talk about how

00:00:38.266 --> 00:00:40.826 A:middle
to build great apps
using TVMLKit.

00:00:42.186 --> 00:00:47.456 A:middle
Now most of you here have built
one or more native apps and gone

00:00:47.456 --> 00:00:50.476 A:middle
through the hard work
of performance tuning

00:00:50.476 --> 00:00:51.996 A:middle
and optimizing user interface.

00:00:52.626 --> 00:00:57.826 A:middle
Often that means sacrificing
features or delayed shipping.

00:00:59.126 --> 00:01:03.116 A:middle
Some of you have built web
apps which offer flexibility,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.126 --> 00:01:03.116 A:middle
Some of you have built web
apps which offer flexibility,

00:01:03.316 --> 00:01:08.806 A:middle
dynamic updates, but the user
experience is not so great.

00:01:08.806 --> 00:01:13.176 A:middle
TVMLKit, which is a brand new
framework introduced for tvOS,

00:01:13.706 --> 00:01:16.316 A:middle
bridges the gap between these
two development choices.

00:01:17.496 --> 00:01:22.316 A:middle
When you build your apps using
TVMLKit, they are going to look,

00:01:22.756 --> 00:01:27.516 A:middle
feel, and perform
like Apple apps.

00:01:27.516 --> 00:01:29.576 A:middle
Let's get started.

00:01:29.686 --> 00:01:31.626 A:middle
Today, first I'm going to talk

00:01:31.626 --> 00:01:34.166 A:middle
about what the framework
offers you.

00:01:34.656 --> 00:01:40.876 A:middle
Next, we have sample app
built for you that is going

00:01:40.876 --> 00:01:43.986 A:middle
to demonstrate a
fully-featured TVMLKit app.

00:01:44.866 --> 00:01:49.166 A:middle
But before that, I will cover
the overview of the framework.

00:01:50.796 --> 00:01:55.186 A:middle
The latter half of the talk is
dedicated to talking about some

00:01:55.186 --> 00:01:57.746 A:middle
of the exciting new
features we are going

00:01:57.786 --> 00:02:01.426 A:middle
to introduce for tvOS 10.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:57.786 --> 00:02:01.426 A:middle
to introduce for tvOS 10.

00:02:01.616 --> 00:02:04.226 A:middle
Let me walk you through some
of the user interface examples.

00:02:06.646 --> 00:02:10.336 A:middle
This is an app store
app built into Apple TV,

00:02:11.676 --> 00:02:18.446 A:middle
a gorgeous iTunes movies app,
an example from Search app.

00:02:20.116 --> 00:02:22.056 A:middle
Another example is Apple Music.

00:02:22.676 --> 00:02:28.506 A:middle
In fact, all of these
apps that ship

00:02:28.566 --> 00:02:31.316 A:middle
with Apple TV are
built using TVMLKit.

00:02:31.316 --> 00:02:34.836 A:middle
And if you take a step back

00:02:34.896 --> 00:02:38.276 A:middle
to consider what are
all these apps about,

00:02:39.226 --> 00:02:40.436 A:middle
they have a common goal.

00:02:40.436 --> 00:02:46.476 A:middle
They let people browse, interact
with, and consume catalogues

00:02:46.476 --> 00:02:51.966 A:middle
of content in a simple,
consistent but unique way.

00:02:54.216 --> 00:02:57.006 A:middle
So what does the
framework offer?

00:02:57.816 --> 00:03:01.596 A:middle
The framework offers
template-based native user


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.816 --> 00:03:01.596 A:middle
The framework offers
template-based native user

00:03:01.596 --> 00:03:06.246 A:middle
interface, which is
performance tuned and optimized,

00:03:07.156 --> 00:03:12.816 A:middle
saving you both development
cost and time.

00:03:13.036 --> 00:03:15.096 A:middle
That rich and complex
user interface

00:03:15.096 --> 00:03:19.806 A:middle
that you just saw is defined
using a simple markup API

00:03:21.436 --> 00:03:23.696 A:middle
and JavaScript drives
the application.

00:03:24.106 --> 00:03:28.266 A:middle
Templates are very flexible.

00:03:29.196 --> 00:03:33.166 A:middle
You can change their appearance
and behavior using styles.

00:03:36.956 --> 00:03:39.086 A:middle
Now the framework
is not constrained

00:03:39.086 --> 00:03:41.346 A:middle
to the templates
that we provide.

00:03:42.686 --> 00:03:45.216 A:middle
You can enhance existing
Apple templates

00:03:45.296 --> 00:03:47.936 A:middle
by adding your own views
and view controllers to them

00:03:49.246 --> 00:03:51.346 A:middle
or even create brand
new templates.

00:03:51.856 --> 00:03:55.736 A:middle
You can also extend
JavaScript functionality

00:03:55.816 --> 00:03:59.906 A:middle
that is specific to your app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:00.186 --> 00:04:02.726 A:middle
And let me assure you
this is not a web browser.

00:04:03.996 --> 00:04:08.686 A:middle
It an optimized native user
experience built for tvOS.

00:04:09.246 --> 00:04:12.846 A:middle
Let's build an app.

00:04:14.606 --> 00:04:17.906 A:middle
There are three main components
that I'm going to talk

00:04:17.906 --> 00:04:21.546 A:middle
about that we are going to
need built our sample app.

00:04:22.296 --> 00:04:27.076 A:middle
First is Xcode to create and
configure the client project.

00:04:27.446 --> 00:04:33.456 A:middle
Next, I will talk about
the Markup and the styles

00:04:33.456 --> 00:04:35.606 A:middle
to configure the templates.

00:04:36.066 --> 00:04:40.376 A:middle
And last, I will talk
about the JavaScript API,

00:04:40.906 --> 00:04:42.416 A:middle
how it will drive
the application.

00:04:43.006 --> 00:04:47.896 A:middle
Now before we dig into details,
let me show you what this looks

00:04:47.896 --> 00:04:49.496 A:middle
like from an architectural
perspective.

00:04:50.016 --> 00:04:53.576 A:middle
A typical TVMLKit app is based

00:04:53.576 --> 00:04:55.336 A:middle
on a client server
architecture model,

00:04:55.916 --> 00:05:00.316 A:middle
where your client app is
a UIKit-based app running


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:55.916 --> 00:05:00.316 A:middle
where your client app is
a UIKit-based app running

00:05:00.316 --> 00:05:05.136 A:middle
on a tvOS device and your
server hosts the media content

00:05:05.196 --> 00:05:06.146 A:middle
and JavaScript files.

00:05:08.196 --> 00:05:11.066 A:middle
The framework offers an
application controller API

00:05:12.286 --> 00:05:15.796 A:middle
that will download the main
JavaScript file and set

00:05:15.796 --> 00:05:17.876 A:middle
up a JavaScript environment
and hand

00:05:17.876 --> 00:05:20.036 A:middle
over the control to JavaScript.

00:05:20.456 --> 00:05:27.176 A:middle
Once the control is handed
over, JavaScript is responsible

00:05:27.176 --> 00:05:30.796 A:middle
for downloading any
additional content that it needs

00:05:31.726 --> 00:05:33.516 A:middle
to present the templates
to the user.

00:05:34.026 --> 00:05:37.636 A:middle
And JavaScript is
also responsible

00:05:37.636 --> 00:05:39.966 A:middle
for handling any user events and
reacting to them appropriately.

00:05:46.216 --> 00:05:49.216 A:middle
Now the first step to
build an app is Xcode.

00:05:50.816 --> 00:05:54.446 A:middle
Xcode provides TVML application
template which will act

00:05:54.446 --> 00:05:56.566 A:middle
as a starting point
for your app.

00:05:58.816 --> 00:06:01.766 A:middle
This is the partial code that
gets generated by the template.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.816 --> 00:06:01.766 A:middle
This is the partial code that
gets generated by the template.

00:06:02.376 --> 00:06:08.696 A:middle
The first step here is to modify
the JavaScript URL to point

00:06:08.696 --> 00:06:10.086 A:middle
to your main JavaScript file.

00:06:10.566 --> 00:06:16.316 A:middle
Next step is to create an
application controller context,

00:06:16.886 --> 00:06:18.926 A:middle
associate the javaScriptURL,

00:06:19.796 --> 00:06:22.986 A:middle
and you can optionally also
specify the launch options

00:06:23.206 --> 00:06:26.076 A:middle
that will be passed on to the
JavaScript when it is launched.

00:06:26.556 --> 00:06:30.626 A:middle
And the last step is to create
an application controller

00:06:30.626 --> 00:06:32.706 A:middle
instance with the
context and window,

00:06:33.826 --> 00:06:37.516 A:middle
and that will download your main
JavaScript file, evaluate it,

00:06:37.916 --> 00:06:41.866 A:middle
and hand over the
control to JavaScript.

00:06:41.866 --> 00:06:44.526 A:middle
You can also optionally
specify the delegate

00:06:45.976 --> 00:06:50.406 A:middle
to monitor the state of your
controller, for instance

00:06:50.436 --> 00:06:52.996 A:middle
if it launched successfully
or failed.

00:06:52.996 --> 00:06:56.976 A:middle
Next let's talk about templates.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:04.626 --> 00:07:06.866 A:middle
Now TVML is a Markup
specification

00:07:07.486 --> 00:07:09.956 A:middle
to define Apple-TV-specific
templates.

00:07:10.496 --> 00:07:15.936 A:middle
The Markup when presented
on the navigation stack

00:07:16.116 --> 00:07:19.116 A:middle
from JavaScript translates
into user interface.

00:07:20.456 --> 00:07:24.116 A:middle
Now once it is presented, you
can keep modifying your XML,

00:07:24.116 --> 00:07:27.206 A:middle
and those changes
will be propagated

00:07:27.206 --> 00:07:29.316 A:middle
to user interface in
a performance way.

00:07:31.676 --> 00:07:34.826 A:middle
Templates out of the
box just look right.

00:07:35.726 --> 00:07:38.006 A:middle
You don't have to do
any explicit styling.

00:07:38.856 --> 00:07:43.206 A:middle
Just fill in your content
and you are good to go.

00:07:43.426 --> 00:07:46.566 A:middle
However, you can
change the appearance

00:07:46.566 --> 00:07:50.666 A:middle
and behavior using styles
to suit your [inaudible].

00:07:51.406 --> 00:07:57.396 A:middle
In terms of Markup,
document is the entity

00:07:57.986 --> 00:07:59.276 A:middle
that wraps the templates.

00:07:59.796 --> 00:08:03.166 A:middle
This is the XML structure
representing a document.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.796 --> 00:08:03.166 A:middle
This is the XML structure
representing a document.

00:08:04.216 --> 00:08:05.456 A:middle
There are two child elements.

00:08:06.446 --> 00:08:09.476 A:middle
The first is head,
which has a style,

00:08:09.906 --> 00:08:13.376 A:middle
which encapsulates all the
custom styles defined by you.

00:08:14.796 --> 00:08:20.136 A:middle
The second element is the
templateName and its content.

00:08:20.666 --> 00:08:26.396 A:middle
Each template has a unique
name and functionality.

00:08:27.646 --> 00:08:30.556 A:middle
Let's take a look at
one of these templates.

00:08:31.046 --> 00:08:37.025 A:middle
This is the Top Movies page
from iTunes Movies app.

00:08:37.936 --> 00:08:41.486 A:middle
This template allows
you to scroll

00:08:41.486 --> 00:08:42.765 A:middle
through stacks of content.

00:08:44.246 --> 00:08:46.716 A:middle
In Markup, it is called
as a stackTemplate.

00:08:47.236 --> 00:08:50.086 A:middle
In this particular example,

00:08:51.486 --> 00:08:54.216 A:middle
this template is
represented using this XML.

00:08:55.666 --> 00:08:58.376 A:middle
At the root of the template
is a collectionList element

00:08:58.556 --> 00:09:01.906 A:middle
which encapsulates various
collection types, like carousel,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.556 --> 00:09:01.906 A:middle
which encapsulates various
collection types, like carousel,

00:09:02.166 --> 00:09:04.876 A:middle
shelves, grids, and
other supported types.

00:09:09.456 --> 00:09:12.296 A:middle
Now the top row here
is a carousel control

00:09:13.206 --> 00:09:15.616 A:middle
which allows horizontal
navigation of content

00:09:16.566 --> 00:09:18.316 A:middle
with the focused
one in the middle.

00:09:22.256 --> 00:09:26.466 A:middle
This control when in idle state
will auto scroll the content,

00:09:26.936 --> 00:09:34.446 A:middle
and the Markup to create
this control is simply this,

00:09:35.336 --> 00:09:39.006 A:middle
where you have a
section defined and list

00:09:39.006 --> 00:09:40.446 A:middle
of lockups with imagines.

00:09:40.446 --> 00:09:43.626 A:middle
There is no any additional
configuration required.

00:09:45.356 --> 00:09:49.426 A:middle
The row next to the
carousel is a shelf

00:09:50.536 --> 00:09:53.086 A:middle
which also allows horizontal
scrolling of content.

00:09:53.576 --> 00:10:00.486 A:middle
And the Markup to represent that
is very similar to carousel,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:53.576 --> 00:10:00.486 A:middle
And the Markup to represent that
is very similar to carousel,

00:10:00.606 --> 00:10:03.236 A:middle
but shelf allows you
to specify a header

00:10:04.116 --> 00:10:05.946 A:middle
and can have one
or more sections.

00:10:06.946 --> 00:10:09.126 A:middle
Each section further
can also have a header

00:10:09.766 --> 00:10:11.596 A:middle
and must have one
or more lockups.

00:10:11.596 --> 00:10:14.736 A:middle
So what is a lockup?

00:10:14.736 --> 00:10:17.806 A:middle
A lockup is a UI control

00:10:18.366 --> 00:10:22.576 A:middle
that encapsulates image
and text elements.

00:10:23.046 --> 00:10:30.416 A:middle
This is a [inaudible],
by the way.

00:10:30.666 --> 00:10:35.236 A:middle
And going back to our example,
if you notice, only the lockup

00:10:35.276 --> 00:10:38.006 A:middle
that is focused has its
text element visible.

00:10:39.336 --> 00:10:41.346 A:middle
This is not the default
framework behavior.

00:10:42.876 --> 00:10:47.216 A:middle
This is an example of how you
can customize using styles.

00:10:48.286 --> 00:10:51.636 A:middle
Let me show you how to do this.

00:10:51.836 --> 00:10:53.426 A:middle
Here we are defining a new class

00:10:54.246 --> 00:10:57.606 A:middle
which has a highlight style
property set to the value

00:10:57.606 --> 00:11:00.316 A:middle
to marquee and show
when highlighted


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:57.606 --> 00:11:00.316 A:middle
to marquee and show
when highlighted

00:11:01.436 --> 00:11:04.196 A:middle
and then you set this class not
the appropriate text elements

00:11:04.196 --> 00:11:09.146 A:middle
of the lockup and that
gives you this behavior.

00:11:09.256 --> 00:11:12.776 A:middle
However, this is a fairly
simple example of customization.

00:11:13.206 --> 00:11:15.036 A:middle
Let me show you a
couple of more examples.

00:11:15.406 --> 00:11:18.346 A:middle
This is a stackTemplate again.

00:11:18.866 --> 00:11:23.536 A:middle
Here we have a banner which has
a background image specified

00:11:23.906 --> 00:11:25.746 A:middle
and banner is a sibling
to collectionList.

00:11:26.136 --> 00:11:29.706 A:middle
There's a background color
specified on the template,

00:11:29.706 --> 00:11:32.686 A:middle
and the template seamlessly
blends the background color

00:11:32.686 --> 00:11:34.966 A:middle
into the banner image
giving this nice effect.

00:11:36.136 --> 00:11:39.106 A:middle
The layout for the banner title

00:11:39.176 --> 00:11:45.206 A:middle
and the button is
custom-configured using styles.

00:11:45.366 --> 00:11:48.606 A:middle
Another familiar example
is a movie bundles page.

00:11:49.076 --> 00:11:50.486 A:middle
This is also a stackTemplate.

00:11:54.496 --> 00:11:57.846 A:middle
The background image on
this template is created

00:11:57.846 --> 00:12:01.176 A:middle
by the framework by
just specifying an image


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:57.846 --> 00:12:01.176 A:middle
by the framework by
just specifying an image

00:12:01.326 --> 00:12:02.576 A:middle
as a hero image element.

00:12:03.006 --> 00:12:08.886 A:middle
And again, the layout
for the title, the shelf,

00:12:09.136 --> 00:12:11.756 A:middle
and the buttons is
custom configured.

00:12:12.026 --> 00:12:19.726 A:middle
Now there are numerous templates
available for you to pick from.

00:12:19.916 --> 00:12:24.276 A:middle
And using styles, you can
create unique experiences

00:12:24.756 --> 00:12:26.526 A:middle
that suit your brand.

00:12:28.516 --> 00:12:32.666 A:middle
TVML Catalogue is a
great resource to browse

00:12:32.666 --> 00:12:34.146 A:middle
and interact with templates.

00:12:35.276 --> 00:12:39.446 A:middle
Please check it out.

00:12:39.726 --> 00:12:44.026 A:middle
Now as I mentioned before,
TVMLKit bridges the gap

00:12:44.026 --> 00:12:46.106 A:middle
between native and
web development.

00:12:47.486 --> 00:12:51.466 A:middle
You just saw how easy
it is to create rich

00:12:51.466 --> 00:12:54.846 A:middle
and complex user interface
by simply using Markup.

00:12:55.346 --> 00:12:58.796 A:middle
Let me show you how
the JavaScript drives

00:12:58.826 --> 00:12:59.526 A:middle
the application.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.056 --> 00:13:08.916 A:middle
The JavaScript engine that
is provided is powered

00:13:08.916 --> 00:13:14.856 A:middle
by JavaScriptCore framework and
the built-ins in Web Inspector

00:13:14.856 --> 00:13:17.836 A:middle
to debug and performance
tune are provided.

00:13:18.316 --> 00:13:22.686 A:middle
And starting tvOS 10,

00:13:22.776 --> 00:13:25.656 A:middle
JavaScriptCore is ES6
compliant as well.

00:13:26.516 --> 00:13:31.806 A:middle
[ Applause ]

00:13:32.306 --> 00:13:34.986 A:middle
TVMLKit adds platform-specific
APIs

00:13:35.316 --> 00:13:37.056 A:middle
to help drive the application.

00:13:37.606 --> 00:13:44.116 A:middle
Now the standard web APIs like
XMLHttpRequest to transfer data

00:13:44.116 --> 00:13:49.566 A:middle
between client and server;
DOM, to parse and [inaudible],

00:13:49.566 --> 00:13:52.446 A:middle
listen for user events,
local storage,

00:13:52.646 --> 00:13:55.346 A:middle
session storage are all
provided by the framework.

00:13:55.876 --> 00:14:01.316 A:middle
In addition to that, TVMLKit
also provides platform-specific


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:55.876 --> 00:14:01.316 A:middle
In addition to that, TVMLKit
also provides platform-specific

00:14:01.316 --> 00:14:04.526 A:middle
APIs, for instance to
manage the navigation stack,

00:14:05.876 --> 00:14:07.086 A:middle
access system info,

00:14:09.196 --> 00:14:13.306 A:middle
play [inaudible] slideshow
photos, and many more.

00:14:13.876 --> 00:14:16.276 A:middle
In addition to that,

00:14:17.566 --> 00:14:20.926 A:middle
the framework also
provides very simple API

00:14:21.396 --> 00:14:23.166 A:middle
to handle media playback.

00:14:25.556 --> 00:14:28.916 A:middle
Now one important thing I
would want to point out is

00:14:28.916 --> 00:14:32.016 A:middle
that there is a single
JavaScript context per

00:14:32.016 --> 00:14:36.136 A:middle
application controller, and you
manage all of your documents

00:14:36.466 --> 00:14:37.926 A:middle
within that single context.

00:14:38.386 --> 00:14:42.976 A:middle
Let me go into details for
some of the key classes.

00:14:47.416 --> 00:14:49.516 A:middle
The first is app object.

00:14:50.116 --> 00:14:52.866 A:middle
App object provides callbacks
that you must register

00:14:52.866 --> 00:14:55.896 A:middle
and the first and
foremost is onLaunch.

00:14:57.066 --> 00:14:59.706 A:middle
This is the starting point for
your JavaScript application.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:02.436 --> 00:15:04.886 A:middle
Another API I would
want to point out is

00:15:05.226 --> 00:15:09.106 A:middle
to handle errors,
which is onError.

00:15:09.436 --> 00:15:11.286 A:middle
You must provide this
callback as well,

00:15:11.496 --> 00:15:13.586 A:middle
to handle those unexpected
failure cases.

00:15:14.186 --> 00:15:18.456 A:middle
Now once the control is
handed over to JavaScript,

00:15:19.796 --> 00:15:20.696 A:middle
the first thing you will want

00:15:20.696 --> 00:15:22.516 A:middle
to do is probably
present a document.

00:15:23.156 --> 00:15:28.396 A:middle
To do so, NavigationDocument is
the class you would want to work

00:15:28.396 --> 00:15:30.906 A:middle
with here and it's equivalent

00:15:30.906 --> 00:15:33.816 A:middle
to a UINavigationController
in TVMLKit.

00:15:33.816 --> 00:15:37.726 A:middle
There is a global
instance already provided

00:15:38.176 --> 00:15:39.916 A:middle
and you can now create
new instances.

00:15:40.426 --> 00:15:44.296 A:middle
Now you're only responsible
to push the documents,

00:15:45.016 --> 00:15:46.916 A:middle
[inaudible] them as a result

00:15:46.916 --> 00:15:49.246 A:middle
of Menu gesture is
handled by the framework.

00:15:52.196 --> 00:15:56.036 A:middle
There are three main APIs that
you will be using the most.

00:15:57.016 --> 00:16:00.196 A:middle
The first two here
which is pushDocument


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.016 --> 00:16:00.196 A:middle
The first two here
which is pushDocument

00:16:00.196 --> 00:16:04.046 A:middle
and replaceDocument
go hand in hand.

00:16:05.116 --> 00:16:09.396 A:middle
Let me show you a recommended
way on how to use these.

00:16:11.156 --> 00:16:15.666 A:middle
Here is a code snippet to
create a loading template.

00:16:16.376 --> 00:16:18.686 A:middle
Typically when you are
handling a user event

00:16:18.686 --> 00:16:22.076 A:middle
or launching the app, you
would want to present a Spinner

00:16:23.296 --> 00:16:27.576 A:middle
so that the users know
something is happening.

00:16:27.726 --> 00:16:30.386 A:middle
And once you have created
this loading document,

00:16:30.666 --> 00:16:33.766 A:middle
you would use pushDocument
to push it on the stack.

00:16:34.916 --> 00:16:37.866 A:middle
Now while you are waiting for
your remote data to be fetched

00:16:39.006 --> 00:16:42.096 A:middle
and prepared, later
on you would want

00:16:42.096 --> 00:16:45.516 A:middle
to replace your loading document
with your intended document.

00:16:46.886 --> 00:16:49.696 A:middle
And to do that, you would
use replaceDocument.

00:16:50.146 --> 00:16:54.986 A:middle
This is a very common
pattern, and we encourage you

00:16:55.336 --> 00:16:57.396 A:middle
to show the Spinner right away
while you are fetching the data

00:16:57.396 --> 00:16:57.966 A:middle
from the network.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:04.586 --> 00:17:10.336 A:middle
And the last API is presentModal
to present alerts or errors

00:17:10.486 --> 00:17:12.626 A:middle
or actually any other
templates modally.

00:17:13.165 --> 00:17:18.925 A:middle
Now the key to TV watching
experience is video playback

00:17:19.856 --> 00:17:21.526 A:middle
and we have made
it really simple.

00:17:22.685 --> 00:17:25.455 A:middle
Let me show you how to do that.

00:17:25.685 --> 00:17:27.396 A:middle
With less than 10 lines of code,

00:17:28.006 --> 00:17:31.206 A:middle
you can configure a
fully-featured video

00:17:31.206 --> 00:17:32.326 A:middle
playback experience.

00:17:33.726 --> 00:17:36.246 A:middle
Let me walk you through
this code.

00:17:36.376 --> 00:17:39.626 A:middle
First, create a MediaItem
with the type of video

00:17:39.626 --> 00:17:43.556 A:middle
and the URL to the video stream.

00:17:43.726 --> 00:17:47.816 A:middle
You should also specify title,
artwork, URL description

00:17:48.096 --> 00:17:50.856 A:middle
so that it can be made
available in the info panel

00:17:50.856 --> 00:17:52.306 A:middle
of the video playback
experience.

00:17:52.546 --> 00:17:59.016 A:middle
Next, create a playlist and add
one or more media items to it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:00.366 --> 00:18:03.006 A:middle
And the last step is to
create a new player instance,

00:18:03.426 --> 00:18:05.976 A:middle
associate the playlist,
and present the player.

00:18:06.516 --> 00:18:10.326 A:middle
And that gives you a
fully-featured video

00:18:10.326 --> 00:18:11.406 A:middle
playback experience.

00:18:11.896 --> 00:18:20.076 A:middle
In addition to that,
all the features

00:18:20.076 --> 00:18:24.456 A:middle
like to handle interstitials,
protected content,

00:18:25.186 --> 00:18:28.856 A:middle
chapter groups, time
[inaudible] and a bunch

00:18:28.856 --> 00:18:30.766 A:middle
of other APIs are also provided

00:18:30.766 --> 00:18:32.256 A:middle
from within JavaScript
environment.

00:18:33.946 --> 00:18:35.356 A:middle
Now similar to video playback,

00:18:36.346 --> 00:18:39.146 A:middle
we have also extended the
audio playback capabilities

00:18:39.676 --> 00:18:42.986 A:middle
and doing so is very similar.

00:18:44.416 --> 00:18:47.646 A:middle
The only thing changed
here is tied to audio

00:18:47.876 --> 00:18:49.356 A:middle
and the URL to an audio stream.

00:18:49.886 --> 00:18:54.566 A:middle
And that gives you
this beautiful

00:18:54.566 --> 00:18:57.036 A:middle
and functional Audio
Now Playing experience,

00:18:57.696 --> 00:18:59.446 A:middle
which is the same
as Apple Music.

00:18:59.986 --> 00:19:06.386 A:middle
Now if you're building a music
app, there is one more step


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.986 --> 00:19:06.386 A:middle
Now if you're building a music
app, there is one more step

00:19:06.426 --> 00:19:09.646 A:middle
that you should do which
is to configure your app

00:19:10.276 --> 00:19:13.616 A:middle
so that it can continue
playing back audio while it is

00:19:13.616 --> 00:19:17.636 A:middle
in the suspended state and
doing so is very similar

00:19:17.636 --> 00:19:22.386 A:middle
to how you have done it
on iOS, which is to set

00:19:22.456 --> 00:19:25.416 A:middle
up a playback category
on the AV session

00:19:26.496 --> 00:19:29.346 A:middle
and add the background
modes to the info.plist

00:19:30.046 --> 00:19:31.646 A:middle
and the rest is handled
by the framework.

00:19:33.676 --> 00:19:36.866 A:middle
And with that, I would like
to invite Jeff on stage

00:19:37.186 --> 00:19:39.426 A:middle
to demo Building a
TVMLKit application.

00:19:39.426 --> 00:19:39.876 A:middle
Thank you.

00:19:40.516 --> 00:19:46.516 A:middle
[ Applause ]

00:19:47.016 --> 00:19:47.826 A:middle
&gt;&gt; Thank you, Nurinder.

00:19:48.086 --> 00:19:48.686 A:middle
Hello, everyone.

00:19:48.936 --> 00:19:49.796 A:middle
My name is Jeff.

00:19:50.006 --> 00:19:53.986 A:middle
I'm here to show you a TVML
application that highlights some

00:19:53.986 --> 00:19:55.936 A:middle
of the things that we've
talked about so far.

00:19:56.846 --> 00:19:59.416 A:middle
You'll also get a
sense of how easy it is

00:19:59.416 --> 00:20:03.676 A:middle
to build a native application
for the Apple TV using TVMLKit.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.416 --> 00:20:03.676 A:middle
to build a native application
for the Apple TV using TVMLKit.

00:20:05.416 --> 00:20:08.396 A:middle
So for this demo, we'll be
showing you a simple version

00:20:08.396 --> 00:20:09.006 A:middle
of the WWDC app.

00:20:09.006 --> 00:20:13.836 A:middle
In terms of the user interface,
we'll have multiple shelves

00:20:13.836 --> 00:20:17.276 A:middle
of content where each shelf
will contain session videos

00:20:17.326 --> 00:20:18.906 A:middle
for a single track
in the conference.

00:20:19.276 --> 00:20:23.296 A:middle
So just imagine having a
shelf for developer tools,

00:20:23.636 --> 00:20:25.466 A:middle
app frameworks, design,
and so forth.

00:20:25.466 --> 00:20:25.976 A:middle
So let's get started.

00:20:35.696 --> 00:20:38.116 A:middle
So this is the Xcode project
that we had prepared earlier.

00:20:39.186 --> 00:20:40.886 A:middle
Let's start with the
AppDelegate first,

00:20:41.066 --> 00:20:42.306 A:middle
which is our app's entry point.

00:20:44.196 --> 00:20:47.916 A:middle
In the application
didFinishLaunchingWithOptions,

00:20:48.906 --> 00:20:53.076 A:middle
as you can see in just
a few lines of code,

00:20:53.076 --> 00:20:54.586 A:middle
we have bootstrapped
this application

00:20:54.666 --> 00:20:55.986 A:middle
as a TVML application.

00:20:59.096 --> 00:21:01.676 A:middle
We also specified the
JavaScriptApplicationURL here,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.096 --> 00:21:01.676 A:middle
We also specified the
JavaScriptApplicationURL here,

00:21:02.116 --> 00:21:03.736 A:middle
which happens to
point to a server

00:21:03.736 --> 00:21:06.616 A:middle
that is running on this Mac.

00:21:07.066 --> 00:21:08.626 A:middle
So if you look at this
directory over here,

00:21:09.596 --> 00:21:12.406 A:middle
this is where I've configured
the server to serve files from.

00:21:13.336 --> 00:21:16.856 A:middle
And as you can see, there is a
file here called application.js

00:21:17.746 --> 00:21:19.116 A:middle
which is the JavaScript file

00:21:19.116 --> 00:21:20.766 A:middle
that drives the TVML
application.

00:21:23.316 --> 00:21:26.916 A:middle
There is also a JSON file here
which will contain all the data

00:21:26.916 --> 00:21:28.006 A:middle
that we need for this demo.

00:21:28.916 --> 00:21:31.606 A:middle
So let's work through
the application.js file.

00:21:31.916 --> 00:21:38.366 A:middle
So at the top of this file here,
we have declared some variables

00:21:38.516 --> 00:21:41.026 A:middle
to hold our model data.

00:21:41.546 --> 00:21:45.666 A:middle
Next in the App.onLaunch
function is the function

00:21:45.666 --> 00:21:49.796 A:middle
that gets called when TVML
application starts up.

00:21:50.786 --> 00:21:52.476 A:middle
So the main thing that
we want to do on here is

00:21:52.506 --> 00:21:56.556 A:middle
to fetch our JSON file and then
create a user interface using

00:21:56.556 --> 00:21:56.946 A:middle
the data.

00:21:58.346 --> 00:21:59.846 A:middle
Now before we go
ahead and do that,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.066 --> 00:22:02.686 A:middle
we should really be showing a
loading indicator on the screen.

00:22:03.436 --> 00:22:04.586 A:middle
This is always recommended

00:22:04.586 --> 00:22:07.106 A:middle
for better user experience
while something is fetched

00:22:07.106 --> 00:22:07.726 A:middle
over the network.

00:22:09.316 --> 00:22:10.666 A:middle
So let me add a few
lines of code here.

00:22:11.406 --> 00:22:17.136 A:middle
So the way to do
this in TVMLKit is

00:22:17.136 --> 00:22:18.996 A:middle
to create a loading
template document.

00:22:19.686 --> 00:22:20.976 A:middle
And this is done
in this function

00:22:20.976 --> 00:22:22.686 A:middle
called createLoadingDocument.

00:22:23.076 --> 00:22:29.956 A:middle
Let's jump into this
function and you will see

00:22:29.956 --> 00:22:31.976 A:middle
that we are basically
creating the Markup

00:22:32.246 --> 00:22:37.186 A:middle
for a loading template and then
creating a DOM document object

00:22:37.186 --> 00:22:38.396 A:middle
using the DOMParser.

00:22:39.266 --> 00:22:42.356 A:middle
Now returning to
the launch function,

00:22:43.686 --> 00:22:45.916 A:middle
after creating the
loading document,

00:22:46.196 --> 00:22:48.536 A:middle
we will now use the
navigationDocument object

00:22:48.656 --> 00:22:50.026 A:middle
to push the document onscreen.

00:22:50.916 --> 00:22:53.916 A:middle
So this is like using
UINavigationController in UIKit.

00:22:56.516 --> 00:22:59.166 A:middle
So now that we have a loading
Spinner visible on the screen,

00:22:59.856 --> 00:23:05.856 A:middle
we will now call a function that
I created called request JSON,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.856 --> 00:23:05.856 A:middle
we will now call a function that
I created called request JSON,

00:23:06.486 --> 00:23:09.826 A:middle
which will use the built-in
XMLHttpRequest object

00:23:09.996 --> 00:23:13.676 A:middle
to fetch our JSON file and
then returning a response

00:23:13.766 --> 00:23:14.286 A:middle
in a callback.

00:23:16.006 --> 00:23:21.896 A:middle
Next, we will convert the
JSON text that we get back

00:23:22.416 --> 00:23:24.206 A:middle
into our JavaScript
data structures.

00:23:26.786 --> 00:23:29.046 A:middle
Now as our UI calls
for a stack of shelves,

00:23:29.386 --> 00:23:32.486 A:middle
we will be creating a
stackTemplate document.

00:23:33.886 --> 00:23:39.406 A:middle
So let me paste some
coding here and jump

00:23:39.596 --> 00:23:42.216 A:middle
into our createStackDocument
function.

00:23:42.216 --> 00:23:48.776 A:middle
Now as you can see, similar to
the way we created the Markup

00:23:48.776 --> 00:23:49.946 A:middle
for the loading template
earlier,

00:23:50.756 --> 00:23:53.426 A:middle
we are creating the Markup
for a stackTemplate here.

00:23:55.066 --> 00:23:57.186 A:middle
So within the stackTemplate
Markup,

00:23:57.676 --> 00:23:59.496 A:middle
we've added a top
banner image here.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:00.296 --> 00:24:02.936 A:middle
And within the body
of collectionList,

00:24:03.666 --> 00:24:06.686 A:middle
we are actually looking through
each track in the conference

00:24:07.196 --> 00:24:09.366 A:middle
and creating a shelf
element for each of them.

00:24:09.866 --> 00:24:12.726 A:middle
And this is done using the
createShelfElement function

00:24:12.726 --> 00:24:13.406 A:middle
that I have here.

00:24:13.546 --> 00:24:17.846 A:middle
So let's jump into
this function.

00:24:18.386 --> 00:24:23.456 A:middle
And again, we are creating the
Markup for a single shelf here.

00:24:25.166 --> 00:24:28.746 A:middle
And within its body, we are
creating a lockup element

00:24:28.786 --> 00:24:31.916 A:middle
for each session video.

00:24:32.736 --> 00:24:35.686 A:middle
So let's now jump into the
createLockupElement function

00:24:36.266 --> 00:24:40.296 A:middle
and you will see that we
are creating the Markup

00:24:40.606 --> 00:24:43.066 A:middle
for a single lockup that
describes the session.

00:24:43.936 --> 00:24:46.916 A:middle
And in this case, we are
capturing the sessionId

00:24:47.036 --> 00:24:48.126 A:middle
as a custom attribute.

00:24:49.356 --> 00:24:50.996 A:middle
We are also adding an
image with the width

00:24:51.126 --> 00:24:53.436 A:middle
and the height and a title.

00:24:54.836 --> 00:24:58.596 A:middle
So just a recap, we have now
created a stackTemplate document

00:24:58.986 --> 00:25:00.866 A:middle
that contains multiple
shelf elements,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.986 --> 00:25:00.866 A:middle
that contains multiple
shelf elements,

00:25:01.236 --> 00:25:02.636 A:middle
and within each shelf element,

00:25:02.636 --> 00:25:04.096 A:middle
we have multiple
lockup elements.

00:25:04.146 --> 00:25:05.976 A:middle
So now let's return to
the launch function.

00:25:11.876 --> 00:25:14.026 A:middle
So after creating
the stackDocument,

00:25:14.366 --> 00:25:16.556 A:middle
we will now use the
navigationDocument object

00:25:17.006 --> 00:25:19.396 A:middle
to replace the loading document
that we have currently visible

00:25:19.396 --> 00:25:19.976 A:middle
with our stackDocument.

00:25:27.766 --> 00:25:29.646 A:middle
And with that, we are
now ready to run this.

00:25:30.366 --> 00:25:31.386 A:middle
Let's switch to Apple TV.

00:25:42.886 --> 00:25:43.436 A:middle
So there you go.

00:25:44.006 --> 00:25:45.966 A:middle
We now have a beautiful
UI of a stack of shelves,

00:25:46.516 --> 00:25:52.206 A:middle
[ Applause ]

00:25:52.706 --> 00:25:55.466 A:middle
where each shelf contains image
lockups or session videos.

00:25:56.006 --> 00:25:59.596 A:middle
So as you can see, with
just a small amount of code,

00:25:59.686 --> 00:26:01.886 A:middle
we were able to create an
application that looks great


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.686 --> 00:26:01.886 A:middle
we were able to create an
application that looks great

00:26:02.216 --> 00:26:03.916 A:middle
and feels right at
home on the Apple TV.

00:26:04.636 --> 00:26:08.576 A:middle
So the next thing that we
want to do is to be able

00:26:08.576 --> 00:26:10.686 A:middle
to play a video when we
click on a lockup here.

00:26:11.386 --> 00:26:12.716 A:middle
At the moment it
just does nothing.

00:26:13.966 --> 00:26:15.936 A:middle
So let's head back into Xcode
and add this functionality.

00:26:23.026 --> 00:26:24.356 A:middle
So back into our
launch function,

00:26:24.356 --> 00:26:26.976 A:middle
I will now add these
two lines of code.

00:26:35.186 --> 00:26:38.686 A:middle
So this will register for
the select and play events.

00:26:39.356 --> 00:26:41.666 A:middle
The select event is when
you press on the trackpad

00:26:41.666 --> 00:26:44.186 A:middle
of the Siri Remote and the
play event is triggered

00:26:44.306 --> 00:26:45.506 A:middle
when you press on
the Play button.

00:26:46.216 --> 00:26:47.056 A:middle
And in both cases,

00:26:48.096 --> 00:26:50.306 A:middle
my playSelectedLockup
function will be called.

00:26:51.956 --> 00:26:55.466 A:middle
So let's jump into this
function and implement this.

00:26:57.566 --> 00:27:04.126 A:middle
So the first step is to
retrieve the lockup element


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.566 --> 00:27:04.126 A:middle
So the first step is to
retrieve the lockup element

00:27:04.396 --> 00:27:04.916 A:middle
from the event.

00:27:07.136 --> 00:27:10.066 A:middle
From there, we can retrieve
the session using the sessionId

00:27:10.066 --> 00:27:10.816 A:middle
custom attribute.

00:27:12.876 --> 00:27:16.976 A:middle
Next, we will create a new
mediaItem object, whoops,

00:27:22.736 --> 00:27:26.266 A:middle
of the type video and
initializing it with a URL

00:27:26.266 --> 00:27:28.946 A:middle
of the video, as shown here.

00:27:31.336 --> 00:27:34.526 A:middle
We will also populate other
information about the session

00:27:34.606 --> 00:27:38.056 A:middle
such as the title,
description, track, and artwork.

00:27:40.426 --> 00:27:44.126 A:middle
Next, we will create
a playlist object

00:27:44.836 --> 00:27:50.026 A:middle
and push our mediaItem
object into it.

00:27:50.026 --> 00:27:52.906 A:middle
And finally, we will
create a new player object,

00:27:54.946 --> 00:27:58.226 A:middle
set the playlist, and
then simply call play

00:27:58.696 --> 00:28:00.336 A:middle
to play the video
in full-screen mode.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.696 --> 00:28:00.336 A:middle
to play the video
in full-screen mode.

00:28:02.166 --> 00:28:04.576 A:middle
So just a recap, we have
now created a player object

00:28:05.276 --> 00:28:07.716 A:middle
with a playlist that
contains a single video item.

00:28:07.716 --> 00:28:09.876 A:middle
So with that, let's
see this in action.

00:28:14.866 --> 00:28:18.426 A:middle
So back on a UI, we will now
use the Siri Remote and click

00:28:18.426 --> 00:28:20.456 A:middle
on the lockup and the video
should now start playing

00:28:20.456 --> 00:28:21.686 A:middle
in full-screen mode.

00:28:24.516 --> 00:28:31.696 A:middle
[ Music and Applause ]

00:28:32.196 --> 00:28:32.566 A:middle
Thank you.

00:28:32.566 --> 00:28:34.066 A:middle
And you can press
the Menu button

00:28:34.296 --> 00:28:36.246 A:middle
to exit the video as well.

00:28:36.736 --> 00:28:39.476 A:middle
So that was video
playback for TVMLKit.

00:28:40.316 --> 00:28:41.046 A:middle
Thank you for your time.

00:28:41.256 --> 00:28:41.976 A:middle
Back to you, Nurinder.

00:28:42.516 --> 00:28:49.696 A:middle
[ Applause ]

00:28:50.196 --> 00:28:51.726 A:middle
&gt;&gt; Thank you, Jeff,
for the amazing demo.

00:28:52.746 --> 00:28:56.096 A:middle
But just little amount of code,

00:28:56.616 --> 00:28:59.166 A:middle
you could build a
fully-featured app

00:28:59.496 --> 00:29:01.846 A:middle
which is performance
tuned and polished.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.496 --> 00:29:01.846 A:middle
which is performance
tuned and polished.

00:29:02.316 --> 00:29:10.846 A:middle
The spacing between the lockups,
rows, shadow treatments,

00:29:11.186 --> 00:29:14.586 A:middle
text treatments all
just looks right.

00:29:15.536 --> 00:29:19.306 A:middle
Before we continue, let me
recap what you just saw.

00:29:20.196 --> 00:29:24.156 A:middle
Using the TVML application
template in Xcode,

00:29:24.466 --> 00:29:28.596 A:middle
create and configure
your client project.

00:29:29.016 --> 00:29:31.446 A:middle
You learned how to create
a simple loading document

00:29:31.726 --> 00:29:35.386 A:middle
and a complex stack
document from JSON.

00:29:36.346 --> 00:29:39.886 A:middle
And you learned how to use
NavigationDocument to push

00:29:39.886 --> 00:29:43.686 A:middle
or replace documents
on the stack.

00:29:43.896 --> 00:29:46.916 A:middle
JavaScript is responsible
for handling user events.

00:29:48.296 --> 00:29:53.096 A:middle
And in this case, we handle
select and play events

00:29:54.446 --> 00:29:59.506 A:middle
and configured video to playback
corresponding to that lockup.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:03.556 --> 00:30:05.966 A:middle
Now when we introduced TVMLKit,

00:30:06.286 --> 00:30:08.026 A:middle
you could already
create great apps

00:30:08.536 --> 00:30:11.986 A:middle
and a lot of you already did.

00:30:12.136 --> 00:30:13.076 A:middle
So thank you.

00:30:13.296 --> 00:30:20.546 A:middle
You have provided some
great feedback and we wanted

00:30:20.546 --> 00:30:21.666 A:middle
to make it even better.

00:30:22.196 --> 00:30:25.106 A:middle
We have been hard at work

00:30:26.116 --> 00:30:31.256 A:middle
and are adding some exciting new
features that are easy to adopt

00:30:31.746 --> 00:30:34.136 A:middle
and would help take your
app to the next level.

00:30:35.526 --> 00:30:37.046 A:middle
To talk all about them, I would

00:30:37.046 --> 00:30:38.446 A:middle
like to invite Parry
on stage now.

00:30:38.446 --> 00:30:38.786 A:middle
Thank you.

00:30:39.516 --> 00:30:45.696 A:middle
[ Applause ]

00:30:46.196 --> 00:30:46.796 A:middle
&gt;&gt; Good afternoon.

00:30:47.836 --> 00:30:50.016 A:middle
My name is Parry and I'm
going to walk you through some

00:30:50.016 --> 00:30:51.766 A:middle
of the new features
we've introduced

00:30:51.766 --> 00:30:55.806 A:middle
in TVMLKit in tvOS 10.

00:30:56.026 --> 00:30:58.286 A:middle
Now TVMLKit provides you

00:30:58.286 --> 00:31:02.616 A:middle
with highly desirable app-level
features through a simple


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.286 --> 00:31:02.616 A:middle
with highly desirable app-level
features through a simple

00:31:02.876 --> 00:31:04.046 A:middle
yet flexible interface.

00:31:04.666 --> 00:31:10.236 A:middle
And the new features we've added
in tvOS 10 are no different.

00:31:11.116 --> 00:31:15.006 A:middle
For example, simply by
adding one attribute

00:31:15.006 --> 00:31:17.016 A:middle
in the search results
in a search document,

00:31:17.696 --> 00:31:20.116 A:middle
you can make the results
animate in and out

00:31:20.116 --> 00:31:20.976 A:middle
as the user is typing.

00:31:28.616 --> 00:31:32.526 A:middle
This provides an engaged
experience to the user

00:31:33.426 --> 00:31:39.186 A:middle
as they are trying to
narrow down the results.

00:31:39.256 --> 00:31:44.506 A:middle
Or if you have a music app,
simply by adding one menu item

00:31:44.786 --> 00:31:48.916 A:middle
to the top-level Menu bar, you
can enable the presentation

00:31:49.006 --> 00:31:54.806 A:middle
of Now Playing audio experience
there, all managed by TVMLKit.

00:31:55.076 --> 00:31:58.906 A:middle
So it comes in and goes out as
the playback starts and stops.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:00.836 --> 00:32:05.946 A:middle
This gives your users a
convenient way to return back

00:32:05.946 --> 00:32:09.026 A:middle
to the playlist and
continue listening to music.

00:32:11.316 --> 00:32:15.106 A:middle
Now all of these features
are really powerful,

00:32:16.506 --> 00:32:19.016 A:middle
but they're also very
easy to implement.

00:32:19.536 --> 00:32:27.736 A:middle
And to show you that, I'm
going to take three of these,

00:32:27.936 --> 00:32:32.106 A:middle
talk about them, and at
the end, implement them

00:32:32.106 --> 00:32:34.286 A:middle
in the demo you just saw.

00:32:38.296 --> 00:32:43.896 A:middle
So let's start with the first
feature I want to talk about,

00:32:43.966 --> 00:32:46.166 A:middle
light and dark appearance.

00:32:46.716 --> 00:32:53.056 A:middle
In tvOS 10, there's a new dark
appearance that's implemented

00:32:53.056 --> 00:32:56.966 A:middle
systemwide and all
apps should adopt it.

00:32:58.656 --> 00:33:02.336 A:middle
Your TVMLKit app is
going to opt into this


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.656 --> 00:33:02.336 A:middle
Your TVMLKit app is
going to opt into this

00:33:03.036 --> 00:33:05.686 A:middle
by configuring the
applications info.plist.

00:33:06.636 --> 00:33:08.696 A:middle
It's the same thing you would
do is you were writing an

00:33:08.696 --> 00:33:10.036 A:middle
application using UIKit.

00:33:11.896 --> 00:33:15.326 A:middle
So you'll specify the appearance
you want for your app.

00:33:17.056 --> 00:33:22.086 A:middle
You can say either
light, dark, or automatic,

00:33:22.656 --> 00:33:24.606 A:middle
in which case it picks
the system preference.

00:33:25.226 --> 00:33:30.686 A:middle
But no matter which
option you pick,

00:33:31.256 --> 00:33:34.786 A:middle
your standard TVMLKit app
is going to work right

00:33:34.786 --> 00:33:37.456 A:middle
out of the box, without
any further modifications.

00:33:38.016 --> 00:33:43.216 A:middle
All of our templates are
configured with styles

00:33:43.476 --> 00:33:45.526 A:middle
for both appearances,
light and dark.

00:33:46.896 --> 00:33:49.946 A:middle
And TVMLKit switches between
them as and when required,

00:33:50.406 --> 00:33:50.976 A:middle
so you get it for free.

00:33:56.436 --> 00:34:02.916 A:middle
However, if you have explicit
styles in your document,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:56.436 --> 00:34:02.916 A:middle
However, if you have explicit
styles in your document,

00:34:04.516 --> 00:34:07.346 A:middle
then you will have to
specify those styles

00:34:07.346 --> 00:34:08.936 A:middle
for both appearances as well.

00:34:09.976 --> 00:34:10.916 A:middle
Let's take an example.

00:34:10.916 --> 00:34:17.886 A:middle
So here's a template that has
a title and its color is set

00:34:17.956 --> 00:34:22.636 A:middle
to black using an
explicit style class foo.

00:34:24.416 --> 00:34:26.786 A:middle
This may not work
in dark appearance.

00:34:28.226 --> 00:34:29.856 A:middle
And for it to work,
you would have

00:34:29.966 --> 00:34:36.726 A:middle
to define the class foo specific
for an appearance like this.

00:34:37.916 --> 00:34:41.406 A:middle
So in order to do
that in tvOS 10,

00:34:42.036 --> 00:34:45.815 A:middle
we've added a new media
feature called tv-template

00:34:45.815 --> 00:34:52.456 A:middle
that has a feature
called tv-theme using

00:34:52.456 --> 00:34:54.846 A:middle
which you can create
a media query

00:34:55.335 --> 00:34:59.716 A:middle
that is specific
to an appearance.

00:34:59.846 --> 00:35:01.606 A:middle
So simply combine
all your styles


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.846 --> 00:35:01.606 A:middle
So simply combine
all your styles

00:35:01.606 --> 00:35:03.296 A:middle
up for both the appearances,

00:35:04.266 --> 00:35:06.536 A:middle
group them in their
respective media queries,

00:35:07.976 --> 00:35:09.036 A:middle
put them in the document,

00:35:10.066 --> 00:35:13.506 A:middle
and TVMLKit will pick
the right styles for you.

00:35:14.086 --> 00:35:21.986 A:middle
So with little configuration
in the style and zero lines

00:35:21.986 --> 00:35:26.976 A:middle
of code, your apps are
ready for dark appearance.

00:35:32.636 --> 00:35:35.506 A:middle
Now let's move on
to something else

00:35:35.546 --> 00:35:37.836 A:middle
that also enhances
your user experience

00:35:38.626 --> 00:35:39.376 A:middle
but in a different way.

00:35:40.806 --> 00:35:41.966 A:middle
Let's talk about
embedded videos.

00:35:48.646 --> 00:35:53.306 A:middle
It's fair to say that
videos are a major part

00:35:53.306 --> 00:35:55.476 A:middle
of TV watching experience.

00:35:56.086 --> 00:35:59.906 A:middle
And if you have a catalogue
of rich video content,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:01.226 --> 00:36:05.656 A:middle
then you want your users
to experience that as soon

00:36:05.656 --> 00:36:06.966 A:middle
as they launch your app.

00:36:08.726 --> 00:36:13.216 A:middle
And embedding videos in your
app creates a big impact.

00:36:14.416 --> 00:36:17.386 A:middle
Now just to show you what
a difference it can make

00:36:17.386 --> 00:36:21.486 A:middle
to your app, we created
a small sneak peek

00:36:21.616 --> 00:36:25.466 A:middle
of the demo you just saw but
with embedded videos in it.

00:36:25.466 --> 00:36:26.976 A:middle
Have a look.

00:36:31.516 --> 00:36:41.076 A:middle
[ Music ]

00:36:41.576 --> 00:36:43.756 A:middle
It's seamless.

00:36:43.756 --> 00:36:48.216 A:middle
Not only it's not obtrusive
to the browsing experience

00:36:48.636 --> 00:36:49.576 A:middle
but it compliments it.

00:36:50.536 --> 00:36:51.746 A:middle
It makes it more immersive.

00:36:52.356 --> 00:36:59.006 A:middle
And as expected, TVMLKit does
most of the heavy lifting

00:36:59.056 --> 00:37:03.376 A:middle
for you and gives you this
nice high-level interface


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.056 --> 00:37:03.376 A:middle
for you and gives you this
nice high-level interface

00:37:03.376 --> 00:37:04.076 A:middle
to work with it.

00:37:04.076 --> 00:37:05.976 A:middle
So let's have a look at that.

00:37:11.436 --> 00:37:17.826 A:middle
So in a nutshell with TVMLKit,
you get to embed a player

00:37:17.826 --> 00:37:20.976 A:middle
and a playback area
inside your documents.

00:37:21.986 --> 00:37:24.796 A:middle
Most likely it's going
to be inside a lockup.

00:37:29.936 --> 00:37:34.146 A:middle
TVMLKit handles the playback
for you and all you have

00:37:34.146 --> 00:37:38.966 A:middle
to do is specify when
do you want it to begin.

00:37:39.596 --> 00:37:43.756 A:middle
So you can say that
it should begin either

00:37:44.146 --> 00:37:48.726 A:middle
when the containing lockup
gets focused or as soon

00:37:48.726 --> 00:37:52.976 A:middle
as it appears on the screen.

00:37:53.156 --> 00:37:54.556 A:middle
You have full control

00:37:54.556 --> 00:37:57.566 A:middle
over transitioning the
embedded video to full screen.

00:37:57.986 --> 00:38:05.636 A:middle
And if you have advanced use
cases, encryption using FairPlay


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:57.986 --> 00:38:05.636 A:middle
And if you have advanced use
cases, encryption using FairPlay

00:38:05.636 --> 00:38:10.366 A:middle
for instance, then you have
access to the embedded player

00:38:10.366 --> 00:38:15.976 A:middle
in JavaScript with all of its
APIs so you can implement that.

00:38:20.476 --> 00:38:28.326 A:middle
Now you can embed videos using
TVMLKit in three easy steps.

00:38:28.516 --> 00:38:33.896 A:middle
First, you configure
the template.

00:38:33.966 --> 00:38:36.156 A:middle
Second, you configure the player

00:38:36.156 --> 00:38:40.796 A:middle
with the media item
you want to embed.

00:38:40.926 --> 00:38:45.066 A:middle
And third, you want to handle
triggering the transitioning

00:38:45.156 --> 00:38:45.686 A:middle
to full screen.

00:38:46.726 --> 00:38:48.976 A:middle
Let's have a look at these
in a little bit more details.

00:38:53.276 --> 00:38:56.506 A:middle
So we've made configuring the
template for you very intuitive.

00:38:57.576 --> 00:39:02.166 A:middle
We've added a new element
in TVML called mediaContent


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:57.576 --> 00:39:02.166 A:middle
We've added a new element
in TVML called mediaContent

00:39:03.536 --> 00:39:08.416 A:middle
that you can use the wrap
the image of the lockup

00:39:08.416 --> 00:39:10.076 A:middle
in which you want
to embed the video.

00:39:10.606 --> 00:39:15.676 A:middle
This gives the lockup
the same behavior

00:39:15.676 --> 00:39:17.976 A:middle
and look before the
playback begins.

00:39:22.866 --> 00:39:26.946 A:middle
And the image inside the
lockup provides the bounds

00:39:27.056 --> 00:39:31.676 A:middle
in which the video will play.

00:39:31.906 --> 00:39:35.216 A:middle
You can specify the
playback mode as an attribute

00:39:35.216 --> 00:39:38.626 A:middle
on the mediaContent as
well, so it will be as soon

00:39:38.626 --> 00:39:41.726 A:middle
as the lockup gets focused
or it appears on the screen.

00:39:43.486 --> 00:39:44.266 A:middle
Here's an example.

00:39:45.816 --> 00:39:50.486 A:middle
So here's a lockup
that has a mediaContent

00:39:50.486 --> 00:39:54.956 A:middle
which wraps the image
of the lockup.

00:39:55.206 --> 00:40:05.326 A:middle
And the width and height on
the image provides the bounds


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:55.206 --> 00:40:05.326 A:middle
And the width and height on
the image provides the bounds

00:40:05.326 --> 00:40:05.976 A:middle
in which the video will play.

00:40:10.776 --> 00:40:14.176 A:middle
Second step, configure
the player.

00:40:15.306 --> 00:40:19.806 A:middle
Now each one of these
mediaContent elements comes

00:40:19.886 --> 00:40:24.346 A:middle
with its own player,
and you can access

00:40:24.346 --> 00:40:26.306 A:middle
that player in JavaScript.

00:40:29.706 --> 00:40:32.386 A:middle
Simply query for
the player feature

00:40:32.496 --> 00:40:34.586 A:middle
from the mediaContent's
DOMElement

00:40:35.106 --> 00:40:37.966 A:middle
and configure the playlist

00:40:37.966 --> 00:40:39.866 A:middle
with the media item
you want to embed.

00:40:39.866 --> 00:40:41.966 A:middle
Here's a small code for that.

00:40:47.176 --> 00:40:50.956 A:middle
Now if you notice
carefully, the configuration

00:40:50.956 --> 00:40:52.896 A:middle
of the player is
not that different

00:40:52.896 --> 00:40:53.996 A:middle
from what you saw in the demo.

00:40:55.056 --> 00:40:57.166 A:middle
You create a playlist,
you add the media item,

00:40:57.166 --> 00:40:58.266 A:middle
and you set it on the player.

00:40:58.806 --> 00:41:01.736 A:middle
But there are two differences.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.806 --> 00:41:01.736 A:middle
But there are two differences.

00:41:03.086 --> 00:41:07.216 A:middle
One, you don't have to
create a new player.

00:41:08.426 --> 00:41:10.056 A:middle
You just use the
embedded player.

00:41:10.446 --> 00:41:15.596 A:middle
And two, instead of doing it

00:41:15.596 --> 00:41:18.106 A:middle
when the user selects
the lockup,

00:41:18.896 --> 00:41:21.306 A:middle
you do it well in advance.

00:41:21.976 --> 00:41:26.106 A:middle
In fact, you do it even
before you push the document,

00:41:26.636 --> 00:41:32.786 A:middle
which brings me to
an important point.

00:41:32.956 --> 00:41:34.536 A:middle
For better user experience,

00:41:35.156 --> 00:41:39.686 A:middle
you must configure the player
before you push the document.

00:41:40.126 --> 00:41:42.896 A:middle
Once the document is loaded,

00:41:43.336 --> 00:41:45.856 A:middle
you can change the playlist
at any time you want.

00:41:51.526 --> 00:41:59.456 A:middle
And finally the last step,
transitioning to full screen.

00:41:59.456 --> 00:42:03.536 A:middle
Now it's worth noting the
TVMLKit will not trigger the


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.456 --> 00:42:03.536 A:middle
Now it's worth noting the
TVMLKit will not trigger the

00:42:03.536 --> 00:42:05.026 A:middle
transition for you.

00:42:06.446 --> 00:42:11.886 A:middle
It's one of those flexibilities
that we want you to have.

00:42:12.296 --> 00:42:16.236 A:middle
So you'll add an event
listener for select and play

00:42:17.296 --> 00:42:22.676 A:middle
for the lockup and use
the embedded player

00:42:22.676 --> 00:42:27.376 A:middle
to trigger the transitioning
to full screen.

00:42:27.546 --> 00:42:28.636 A:middle
Here's a small example.

00:42:30.126 --> 00:42:32.746 A:middle
So here, I have added
an event listener

00:42:32.746 --> 00:42:35.976 A:middle
on select event on the document.

00:42:40.406 --> 00:42:42.906 A:middle
I'm grabbing the
mediaContentElement

00:42:43.016 --> 00:42:45.586 A:middle
from the subtree
of event target.

00:42:45.796 --> 00:42:47.006 A:middle
Now this would be the lockup

00:42:47.006 --> 00:42:51.606 A:middle
because all events get
dispatched on the lockup.

00:42:51.726 --> 00:42:56.646 A:middle
And finally calling present
on the embedded player

00:42:56.646 --> 00:43:00.626 A:middle
to trigger the transitioning.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:56.646 --> 00:43:00.626 A:middle
to trigger the transitioning.

00:43:00.626 --> 00:43:03.546 A:middle
Now you have full control
over when you want to do this,

00:43:05.486 --> 00:43:06.696 A:middle
but transitioning back

00:43:06.696 --> 00:43:09.856 A:middle
to embedded mode happens
automatically on a Menu gesture.

00:43:15.196 --> 00:43:16.176 A:middle
So that's it.

00:43:17.156 --> 00:43:23.536 A:middle
With these three easy steps you
can make your user interface

00:43:23.536 --> 00:43:24.946 A:middle
inside your apps so
much more immersive.

00:43:29.096 --> 00:43:30.396 A:middle
But what happens next?

00:43:30.926 --> 00:43:37.826 A:middle
What happens when the users
are already in full screen?

00:43:38.386 --> 00:43:39.536 A:middle
They're watching your content.

00:43:40.056 --> 00:43:45.516 A:middle
How can you make
that more engaging?

00:43:46.046 --> 00:43:50.636 A:middle
Well that brings me to the
third feature I want to talk

00:43:50.636 --> 00:43:54.906 A:middle
about today that lets
you do exactly that.

00:43:55.116 --> 00:43:57.616 A:middle
Interactive video overlays.

00:43:58.286 --> 00:44:04.286 A:middle
Now in a sense, it's a
counterpart to embedded videos


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:58.286 --> 00:44:04.286 A:middle
Now in a sense, it's a
counterpart to embedded videos

00:44:05.066 --> 00:44:08.326 A:middle
in that it lets you
enhance your content

00:44:08.746 --> 00:44:10.356 A:middle
by putting a user
interface on top

00:44:10.866 --> 00:44:14.156 A:middle
and you can do so much with it.

00:44:15.496 --> 00:44:20.696 A:middle
For example, you can suggest
more options to the users

00:44:21.136 --> 00:44:24.016 A:middle
so that they can pick from
it and continue watching.

00:44:24.576 --> 00:44:28.886 A:middle
You can let them skip
past teasers and credits

00:44:29.986 --> 00:44:31.736 A:middle
and implement a perfect
binge-watching experience

00:44:31.766 --> 00:44:31.976 A:middle
for them.

00:44:37.736 --> 00:44:41.086 A:middle
Or you could implement
in-app purchase right on top

00:44:41.086 --> 00:44:45.976 A:middle
of your content while the users
are immersed in that experience.

00:44:50.136 --> 00:44:54.996 A:middle
Even if you do it with
something as simple

00:44:55.396 --> 00:45:01.996 A:middle
as interactive metadata, like
Cast, you make your content


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:55.396 --> 00:45:01.996 A:middle
as interactive metadata, like
Cast, you make your content

00:45:02.046 --> 00:45:05.526 A:middle
so much more engaging
and interactive.

00:45:10.526 --> 00:45:12.556 A:middle
And as you've seen
with other features,

00:45:12.556 --> 00:45:14.346 A:middle
implementation is really simple.

00:45:14.936 --> 00:45:22.736 A:middle
You basically create a document,
use any template for it,

00:45:24.046 --> 00:45:29.366 A:middle
and set it on the player,
and TVMLKit will present

00:45:29.446 --> 00:45:33.956 A:middle
that document when the
video goes full screen.

00:45:34.426 --> 00:45:37.766 A:middle
Here's the code for that.

00:45:38.356 --> 00:45:40.506 A:middle
We've added a new
property on the player

00:45:40.506 --> 00:45:44.366 A:middle
in tvOS 10 called
modalOverlayDocument.

00:45:45.036 --> 00:45:48.146 A:middle
So when you set the
document on this property,

00:45:48.736 --> 00:45:53.516 A:middle
we will present it for you
on top of full-screen video.

00:45:57.436 --> 00:46:00.106 A:middle
If the player is already
playing in full screen,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:57.436 --> 00:46:00.106 A:middle
If the player is already
playing in full screen,

00:46:00.186 --> 00:46:02.276 A:middle
your documents will get
presented immediately,

00:46:02.566 --> 00:46:08.536 A:middle
but if the player is not
playing or if it's playing

00:46:08.536 --> 00:46:12.446 A:middle
in the embedded mode,
they'll get presented

00:46:12.446 --> 00:46:14.786 A:middle
when the video goes full screen.

00:46:15.356 --> 00:46:17.066 A:middle
So it's really convenient
for you

00:46:17.066 --> 00:46:18.976 A:middle
to just set it at
any time you want.

00:46:23.786 --> 00:46:26.916 A:middle
And with that, let's
have a demo.

00:46:27.866 --> 00:46:32.236 A:middle
Let's implement these features
in the demo you saw earlier

00:46:32.236 --> 00:46:34.606 A:middle
in the presentation,
and to do that,

00:46:35.256 --> 00:46:36.996 A:middle
let's welcome back
Jeff on stage.

00:46:37.606 --> 00:46:37.976 A:middle
Jeff.

00:46:38.516 --> 00:46:43.216 A:middle
[ Applause ]

00:46:43.716 --> 00:46:44.186 A:middle
&gt;&gt; Thank you, Parry.

00:46:44.556 --> 00:46:45.086 A:middle
Hello again.

00:46:45.326 --> 00:46:46.506 A:middle
Let me show you the new stuff.

00:46:47.706 --> 00:46:49.956 A:middle
So back on the Apple TV.

00:46:49.956 --> 00:46:53.816 A:middle
So this was the demo that
we showed you earlier.

00:46:55.826 --> 00:47:01.396 A:middle
Now let's go Home and hit
into the Settings app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:55.826 --> 00:47:01.396 A:middle
Now let's go Home and hit
into the Settings app.

00:47:02.536 --> 00:47:05.066 A:middle
Let's navigate down to the
new Appearance setting here.

00:47:05.346 --> 00:47:08.046 A:middle
We will now toggle the
appearance to dark.

00:47:10.336 --> 00:47:11.816 A:middle
So let's go Home again.

00:47:12.426 --> 00:47:15.516 A:middle
Now because we created the
demo app using Xcode 8,

00:47:15.686 --> 00:47:18.186 A:middle
we will have the
entry in info.plist

00:47:18.456 --> 00:47:20.976 A:middle
to support automatic
user interface dock.

00:47:21.686 --> 00:47:23.806 A:middle
So what this means is
our demo app is going

00:47:23.806 --> 00:47:25.806 A:middle
to support dock appearance
automatically.

00:47:26.586 --> 00:47:27.656 A:middle
So let's see how this looks.

00:47:29.106 --> 00:47:32.196 A:middle
Boom. There you go [applause].

00:47:37.026 --> 00:47:39.656 A:middle
Look how beautiful our UI is
in dock appearance as well.

00:47:39.956 --> 00:47:44.786 A:middle
And again, zero code
to support this.

00:47:45.026 --> 00:47:46.866 A:middle
Now let's talk about
embedded videos.

00:47:49.116 --> 00:47:50.706 A:middle
For our demo, we
will like the video

00:47:50.706 --> 00:47:53.406 A:middle
to start playing automatically
inside the lockup right there.

00:47:54.586 --> 00:47:55.556 A:middle
As Parry mentioned earlier,

00:47:55.556 --> 00:47:57.096 A:middle
there are three main
steps to achieve this.

00:47:57.536 --> 00:48:00.346 A:middle
Step one is to use the
mediaContentElement tag.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:57.536 --> 00:48:00.346 A:middle
Step one is to use the
mediaContentElement tag.

00:48:01.236 --> 00:48:03.776 A:middle
Step two is to configure
the embedded player.

00:48:04.626 --> 00:48:06.686 A:middle
And step three is to
handle full-screen playback.

00:48:06.686 --> 00:48:07.976 A:middle
Let's get back into Xcode.

00:48:15.136 --> 00:48:16.946 A:middle
So let's get into the
createLockup function.

00:48:24.186 --> 00:48:26.716 A:middle
Now instead of creating a
standard image lockup right

00:48:26.716 --> 00:48:34.826 A:middle
here, I will now add the
new mediaContent element tag

00:48:35.646 --> 00:48:38.236 A:middle
and have it wrap our image.

00:48:39.116 --> 00:48:39.486 A:middle
That is it.

00:48:39.696 --> 00:48:40.416 A:middle
So that is step one.

00:48:40.966 --> 00:48:41.416 A:middle
Pretty easy.

00:48:41.826 --> 00:48:43.756 A:middle
Now onto step two.

00:48:45.646 --> 00:48:46.986 A:middle
Now as Parry also
mentioned earlier,

00:48:47.496 --> 00:48:50.226 A:middle
each mediaContent element
is going to come built

00:48:50.226 --> 00:48:51.246 A:middle
in with an embedded player.

00:48:52.056 --> 00:48:55.846 A:middle
So what we will need to do is to
configure these embedded players

00:48:56.056 --> 00:49:00.086 A:middle
with a corresponding playlist
before we present the document.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:56.056 --> 00:49:00.086 A:middle
with a corresponding playlist
before we present the document.

00:49:00.496 --> 00:49:02.156 A:middle
So let's head back into
the launch function.

00:49:02.156 --> 00:49:06.746 A:middle
Now before we present
the document,

00:49:06.746 --> 00:49:08.476 A:middle
I will now call a function

00:49:08.476 --> 00:49:12.856 A:middle
that I created called
configureMediaLockupElements.

00:49:13.446 --> 00:49:16.636 A:middle
And inside this function,

00:49:17.176 --> 00:49:22.316 A:middle
we are first retrieving
all mediaContent elements

00:49:22.626 --> 00:49:23.396 A:middle
from this document.

00:49:26.086 --> 00:49:27.676 A:middle
And for each
mediaContentElement,

00:49:28.526 --> 00:49:29.796 A:middle
similar to the previous demo,

00:49:29.796 --> 00:49:32.476 A:middle
we will be creating a
new mediaItem object,

00:49:33.206 --> 00:49:37.866 A:middle
a new playlist object that
holds our mediaItem object,

00:49:39.356 --> 00:49:41.786 A:middle
but instead of creating
a new player right here,

00:49:42.506 --> 00:49:44.466 A:middle
we will use the getFeature
function

00:49:45.686 --> 00:49:46.756 A:middle
to retrieve the embedded player

00:49:47.746 --> 00:49:49.576 A:middle
and then we just set
the playlist on it.

00:49:50.736 --> 00:49:52.226 A:middle
So that was step two.

00:49:53.556 --> 00:49:55.886 A:middle
The final step is to
handle full-screen playback.

00:49:57.206 --> 00:49:59.396 A:middle
So let's head into the
playSelectedLockup function,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:01.736 --> 00:50:03.976 A:middle
which as you recall is triggered
from the select and play events.

00:50:08.856 --> 00:50:11.056 A:middle
We won't be needing
all of this code here,

00:50:11.486 --> 00:50:13.266 A:middle
so let's replace
this code with this.

00:50:17.136 --> 00:50:19.836 A:middle
First we are retrieving the
lockup element from the event,

00:50:21.966 --> 00:50:24.826 A:middle
then retrieving the mediaContent
element from the lockup element,

00:50:25.446 --> 00:50:29.116 A:middle
and again using the getFeature
function to get access

00:50:29.236 --> 00:50:33.586 A:middle
to the embedded player, and then
we simply call present on it

00:50:33.876 --> 00:50:34.826 A:middle
to take it full screen.

00:50:35.836 --> 00:50:37.976 A:middle
So let's see how this looks.

00:50:54.786 --> 00:50:57.476 A:middle
So as you can see, [Background
Music] the video will now start

00:50:57.476 --> 00:50:59.496 A:middle
playing automatically inside
the lockup right there.

00:50:59.676 --> 00:51:04.376 A:middle
And when I clicked on the
lockup, you will now transition


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:59.676 --> 00:51:04.376 A:middle
And when I clicked on the
lockup, you will now transition

00:51:04.376 --> 00:51:06.226 A:middle
to the video into
full-screen mode.

00:51:06.306 --> 00:51:09.146 A:middle
&gt;&gt; Welcome to 2015
Apple Design Awards

00:51:10.266 --> 00:51:12.276 A:middle
and welcome your host
for this evening --

00:51:12.276 --> 00:51:13.176 A:middle
&gt;&gt; Pretty cool stuff.

00:51:13.176 --> 00:51:14.976 A:middle
You can also press the Menu
to exit the full-screen mode.

00:51:20.506 --> 00:51:21.576 A:middle
So that was embedded videos.

00:51:22.476 --> 00:51:23.726 A:middle
The next new feature we wanted

00:51:23.726 --> 00:51:25.806 A:middle
to show you is interactive
video overlays.

00:51:26.636 --> 00:51:29.866 A:middle
So this new feature is going
to allow you to place a UI

00:51:30.266 --> 00:51:31.836 A:middle
over the video while
it is playing.

00:51:32.746 --> 00:51:36.496 A:middle
So for our demo, let's say we
want to show a single shelf

00:51:36.496 --> 00:51:39.096 A:middle
of related videos
on top of the video.

00:51:40.006 --> 00:51:41.606 A:middle
So let's head back into Xcode.

00:51:42.706 --> 00:51:44.396 A:middle
Now in my playSelectedLockup
function,

00:51:45.226 --> 00:51:48.246 A:middle
I will now call a
function that I created

00:51:48.416 --> 00:51:52.576 A:middle
that creates my overlay called
createInteractiveVideoOverlay.

00:51:52.836 --> 00:51:54.976 A:middle
And inside this function,

00:51:59.546 --> 00:52:03.846 A:middle
as you can see, we are basically
creating another stackTemplate


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:59.546 --> 00:52:03.846 A:middle
as you can see, we are basically
creating another stackTemplate

00:52:04.586 --> 00:52:10.676 A:middle
with a single shelf,
and within the shelf,

00:52:10.676 --> 00:52:12.626 A:middle
we have multiple
lockup elements.

00:52:15.246 --> 00:52:17.566 A:middle
Also, we are changing the
style of this stackTemplate.

00:52:18.956 --> 00:52:20.606 A:middle
We are adding a blurred
background

00:52:21.296 --> 00:52:25.006 A:middle
and we are also adding
some padding at the top

00:52:25.006 --> 00:52:26.666 A:middle
so that our shelf
stays positioned

00:52:26.666 --> 00:52:27.666 A:middle
at the bottom of the player.

00:52:30.516 --> 00:52:32.836 A:middle
So let's head back into
playSelectedLockup function.

00:52:34.656 --> 00:52:37.936 A:middle
Now after we create our overlay
document, we will now set it

00:52:37.936 --> 00:52:41.146 A:middle
to the new modal overlay
document property of player

00:52:41.566 --> 00:52:43.206 A:middle
and the player object
will just show it.

00:52:43.876 --> 00:52:47.156 A:middle
In fact, the player will show
any TVMLKit document using

00:52:47.156 --> 00:52:47.756 A:middle
this property.

00:52:49.636 --> 00:52:51.076 A:middle
Now we can also show
this overlay

00:52:51.326 --> 00:52:53.786 A:middle
at any time while the video
is in full-screen mode.

00:52:54.556 --> 00:52:55.836 A:middle
For example, we might want

00:52:55.836 --> 00:52:58.846 A:middle
to show the overlay 30 seconds
before the end of this video,

00:52:59.846 --> 00:53:01.146 A:middle
but for the purpose
of this demo,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:59.846 --> 00:53:01.146 A:middle
but for the purpose
of this demo,

00:53:01.146 --> 00:53:03.486 A:middle
we will just show
the overlay as soon

00:53:03.486 --> 00:53:06.086 A:middle
as the video goes full screen,
which is why we called it here.

00:53:07.356 --> 00:53:08.046 A:middle
So let's run this.

00:53:08.596 --> 00:53:11.766 A:middle
Again, the video is going

00:53:11.766 --> 00:53:13.676 A:middle
to start playing
automatically inside the lockup

00:53:13.676 --> 00:53:14.486 A:middle
[Background Music].

00:53:14.486 --> 00:53:18.636 A:middle
And when I now take
the video full screen,

00:53:18.636 --> 00:53:21.126 A:middle
you will now see the
overlay on screen.

00:53:23.516 --> 00:53:29.486 A:middle
[ Applause ]

00:53:29.986 --> 00:53:32.466 A:middle
And the overlay is also
interactive so you can pan

00:53:32.466 --> 00:53:34.356 A:middle
around within the
lockup in the shelf here.

00:53:37.076 --> 00:53:38.776 A:middle
So that was interactive
video overlays.

00:53:39.186 --> 00:53:41.536 A:middle
We hope the demo has
been useful to everyone.

00:53:42.016 --> 00:53:42.966 A:middle
Thank you for your time.

00:53:43.476 --> 00:53:44.046 A:middle
Back to you, Parry.

00:53:44.886 --> 00:53:45.416 A:middle
&gt;&gt; Thank you, Jeff.

00:53:45.416 --> 00:53:46.696 A:middle
That was an amazing demo.

00:53:47.186 --> 00:53:49.966 A:middle
Let's quickly recap what
we saw in that demo.

00:53:50.906 --> 00:53:55.596 A:middle
You saw how light and dark
appearance just works right

00:53:55.596 --> 00:53:58.356 A:middle
out of the box for TVMLKit apps.

00:53:59.356 --> 00:54:04.626 A:middle
You saw how easy it is to embed
videos in three simple steps.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:59.356 --> 00:54:04.626 A:middle
You saw how easy it is to embed
videos in three simple steps.

00:54:04.626 --> 00:54:09.886 A:middle
And finally, you saw an example

00:54:09.886 --> 00:54:12.916 A:middle
of a binge-watching
experience implemented

00:54:12.916 --> 00:54:16.096 A:middle
through interactive
video overlays.

00:54:16.096 --> 00:54:23.236 A:middle
Now with that, I would like
to summarize what we've

00:54:23.236 --> 00:54:23.746 A:middle
learned today.

00:54:27.456 --> 00:54:31.436 A:middle
So there's one thing I
want you to take away

00:54:31.436 --> 00:54:35.906 A:middle
from this presentation
and it's this.

00:54:37.256 --> 00:54:42.856 A:middle
TVMLKit is an easy
way to make apps on TV

00:54:43.446 --> 00:54:49.066 A:middle
that gives you native
experience which looks

00:54:49.656 --> 00:54:52.756 A:middle
and performs like Apple apps.

00:54:54.346 --> 00:55:00.456 A:middle
It's based off of web
technologies like Markup


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:54.346 --> 00:55:00.456 A:middle
It's based off of web
technologies like Markup

00:55:00.456 --> 00:55:04.916 A:middle
and JavaScript that lets you
develop your apps rapidly

00:55:05.646 --> 00:55:08.206 A:middle
and reduce the time to market.

00:55:12.616 --> 00:55:14.206 A:middle
And with the new features

00:55:14.816 --> 00:55:20.616 A:middle
and how you saw how TVMLKit
takes the onus off of you

00:55:21.276 --> 00:55:29.616 A:middle
for writing the user interface,
you can spend your time, money,

00:55:30.546 --> 00:55:35.966 A:middle
and intellectual energy on
the features and content

00:55:37.466 --> 00:55:42.186 A:middle
that make your app
unique and great.

00:55:45.136 --> 00:55:49.686 A:middle
I highly encourage you to go to
the developer website and check

00:55:49.686 --> 00:55:52.716 A:middle
out documentation and
download sample code.

00:55:52.716 --> 00:55:55.776 A:middle
There's a wealth of
information there for you all.

00:55:57.826 --> 00:56:01.696 A:middle
I'd also like to suggest some
related sessions including


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:55:57.826 --> 00:56:01.696 A:middle
I'd also like to suggest some
related sessions including

00:56:01.696 --> 00:56:06.026 A:middle
What's New in tvOS, and one
in particular that going

00:56:06.026 --> 00:56:08.856 A:middle
to happen tomorrow,
which is TVMLKit, Part 2,

00:56:10.066 --> 00:56:13.726 A:middle
and we talk about how can
you mix your own views,

00:56:13.726 --> 00:56:17.616 A:middle
view controllers, and even
JavaScript APIs in TVMLKit.

00:56:19.406 --> 00:56:24.966 A:middle
And finally, I would like to
thank you all for being here

00:56:24.966 --> 00:56:31.306 A:middle
and I wish you have a very nice
rest of your WWDC16 experience.

00:56:31.306 --> 00:56:31.716 A:middle
Thank you.

00:56:32.516 --> 00:56:35.500 A:middle
[ Applause ]

