WEBVTT

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:26.516 --> 00:00:32.195 A:middle
[ Applause ]

00:00:32.695 --> 00:00:32.976 A:middle
&gt;&gt; Great.

00:00:33.526 --> 00:00:35.156 A:middle
Hello, and welcome
to our session

00:00:35.156 --> 00:00:37.156 A:middle
on keeping your Watch
App up to date.

00:00:37.866 --> 00:00:41.456 A:middle
My name is Eric Lanz, and
with me today is Austen Green.

00:00:41.906 --> 00:00:44.436 A:middle
We're both engineers
on the watchOS team.

00:00:46.456 --> 00:00:49.036 A:middle
Here you see a screenshot
from our calendar app.

00:00:49.586 --> 00:00:52.616 A:middle
When you hear the word app, this
is probably what comes to mind,

00:00:53.206 --> 00:00:55.216 A:middle
but watchOS has many ways

00:00:55.286 --> 00:00:57.636 A:middle
to interact beyond the
standard application.

00:00:58.106 --> 00:01:01.056 A:middle
For example, your users
think of your notifications

00:00:58.106 --> 00:01:01.056 A:middle
For example, your users
think of your notifications

00:01:01.156 --> 00:01:03.186 A:middle
as an important part
of your app.

00:01:04.495 --> 00:01:07.466 A:middle
If you have a complication,
your users think of that

00:01:07.466 --> 00:01:10.826 A:middle
as an important part
of your app, too.

00:01:11.066 --> 00:01:14.796 A:middle
In watchOS 3, we're introducing
the new application dock.

00:01:15.236 --> 00:01:17.786 A:middle
This feature allows
users to add up to ten

00:01:17.786 --> 00:01:21.436 A:middle
of their favorite applications
to an always accessible dock.

00:01:21.756 --> 00:01:23.976 A:middle
They can then swipe through
the dock to get a quick look

00:01:23.976 --> 00:01:25.446 A:middle
at their data in one place.

00:01:26.376 --> 00:01:28.506 A:middle
This is now also
part of your app.

00:01:29.576 --> 00:01:32.106 A:middle
People are using your
application's data

00:01:32.106 --> 00:01:35.306 A:middle
in many different ways and
expect all of those ways to be

00:01:35.306 --> 00:01:37.486 A:middle
in sync and up to
date all the time.

00:01:38.236 --> 00:01:40.306 A:middle
This may sound like
an impossible task,

00:01:40.426 --> 00:01:41.236 A:middle
but don't worry.

00:01:41.686 --> 00:01:43.306 A:middle
We're here to help.

00:01:44.196 --> 00:01:46.646 A:middle
Today we'll be talking
about five topics.

00:01:47.076 --> 00:01:50.676 A:middle
First, an overview of this API
and how it works on watchOS.

00:01:51.496 --> 00:01:52.776 A:middle
Next, a walkthrough

00:01:52.776 --> 00:01:55.256 A:middle
of an example application
with some real code.

00:01:56.046 --> 00:01:57.886 A:middle
Then Austen will come on stage

00:01:58.086 --> 00:02:00.606 A:middle
and show you how scheduling
works behind the scenes.

00:01:58.086 --> 00:02:00.606 A:middle
and show you how scheduling
works behind the scenes.

00:02:01.466 --> 00:02:03.746 A:middle
After that, we'll share
some best practices

00:02:03.746 --> 00:02:06.266 A:middle
for adopting this API in
your own applications.

00:02:06.966 --> 00:02:10.036 A:middle
To close out the session,
we'll go through a case study

00:02:10.036 --> 00:02:13.296 A:middle
of how we adopted this API in
our own stocks application.

00:02:13.926 --> 00:02:18.756 A:middle
Let's get started by thinking
about how we use our phones

00:02:18.756 --> 00:02:21.206 A:middle
and our watches in different
ways throughout the day.

00:02:21.976 --> 00:02:25.036 A:middle
In the morning, you can
start your day waiting

00:02:25.036 --> 00:02:26.006 A:middle
in line for coffee.

00:02:26.256 --> 00:02:28.586 A:middle
You can then browse the news on
your phone for a few minutes.

00:02:29.366 --> 00:02:31.566 A:middle
Before you leave the shop,
you check the weather

00:02:31.566 --> 00:02:34.726 A:middle
with the complication on your
watch face, a two-second task.

00:02:36.346 --> 00:02:39.496 A:middle
For lunch, you use maps again
to find a great restaurant.

00:02:39.496 --> 00:02:41.146 A:middle
After a few minutes,
you've made your choice

00:02:41.276 --> 00:02:42.236 A:middle
and put your phone away.

00:02:43.506 --> 00:02:45.856 A:middle
On the way to the restaurant,
you get a notification.

00:02:46.066 --> 00:02:48.476 A:middle
A quick glance at your wrist
lets you know your friends will

00:02:48.476 --> 00:02:51.326 A:middle
be a few minutes late,
another two-second task.

00:02:52.006 --> 00:02:55.046 A:middle
At the end of the day,
you use maps again

00:02:55.046 --> 00:02:56.956 A:middle
to plan your route,
maybe a detour.

00:02:58.226 --> 00:03:01.286 A:middle
You get an iMessage asking
when you'll be home that night.

00:02:58.226 --> 00:03:01.286 A:middle
You get an iMessage asking
when you'll be home that night.

00:03:02.086 --> 00:03:05.496 A:middle
Use the quick reply features
of watchOS 3 to send back,

00:03:05.496 --> 00:03:09.646 A:middle
"On my way," another
two-second task.

00:03:10.026 --> 00:03:13.516 A:middle
It simply is impossible to have
our data ready in the couple

00:03:13.516 --> 00:03:15.426 A:middle
of seconds that users
are going to give us.

00:03:15.776 --> 00:03:16.866 A:middle
We need more time,

00:03:17.276 --> 00:03:19.286 A:middle
and background refresh
is the way to get it.

00:03:19.856 --> 00:03:23.306 A:middle
This powerful new API allows
you to schedule runtime

00:03:23.306 --> 00:03:27.146 A:middle
so you can have your data
ready before the user needs it.

00:03:30.196 --> 00:03:34.296 A:middle
To understand what this new API
can do, let's take a closer look

00:03:34.376 --> 00:03:36.116 A:middle
at checking the weather
on watchOS.

00:03:36.956 --> 00:03:39.376 A:middle
Here we see the foreground
activity of looking

00:03:39.376 --> 00:03:40.606 A:middle
at the weather complication.

00:03:41.196 --> 00:03:43.956 A:middle
Our data would have to be
ready before this happened.

00:03:45.056 --> 00:03:47.856 A:middle
So let's use this API to
schedule some time in advance

00:03:47.966 --> 00:03:52.236 A:middle
to update our UI, but how can
we update our UI without data.

00:03:52.726 --> 00:03:55.246 A:middle
We'll need more time to
get the latest weather data

00:03:55.246 --> 00:03:56.016 A:middle
from our server.

00:03:56.196 --> 00:03:57.506 A:middle
So let's schedule
a task for that.

00:03:58.546 --> 00:04:01.046 A:middle
But how did we even get
started on this chain of events?

00:03:58.546 --> 00:04:01.046 A:middle
But how did we even get
started on this chain of events?

00:04:01.656 --> 00:04:03.526 A:middle
We're going to need
a way for the system

00:04:03.526 --> 00:04:05.866 A:middle
to wake our application
in the background.

00:04:06.416 --> 00:04:10.476 A:middle
On watchOS, the system
wakes your application

00:04:10.596 --> 00:04:11.566 A:middle
by giving it a task.

00:04:12.336 --> 00:04:14.936 A:middle
The system has a limited
number of these available.

00:04:15.106 --> 00:04:17.106 A:middle
So make the best use
of each one you get.

00:04:18.606 --> 00:04:20.826 A:middle
When the system wants to
wake your application,

00:04:20.946 --> 00:04:23.636 A:middle
it delivers one or more
of these task objects.

00:04:24.156 --> 00:04:25.666 A:middle
Make sure to hold
on to this task

00:04:25.796 --> 00:04:27.646 A:middle
until you're finished
processing your data.

00:04:29.136 --> 00:04:30.496 A:middle
The system delivers tasks

00:04:30.626 --> 00:04:33.916 A:middle
by calling the new handled
background task method

00:04:33.916 --> 00:04:35.356 A:middle
on WK extension delegate.

00:04:36.126 --> 00:04:38.526 A:middle
We'll go through an example
of this method later on today.

00:04:39.086 --> 00:04:42.746 A:middle
When you're finished with your
background work, return the task

00:04:42.746 --> 00:04:44.366 A:middle
to the system by completing it.

00:04:44.856 --> 00:04:46.516 A:middle
This is the fundamental process

00:04:46.576 --> 00:04:49.456 A:middle
by which you obtain
background runtime on watchOS.

00:04:49.996 --> 00:04:54.236 A:middle
Now that we understand the
task system from a high level,

00:04:54.366 --> 00:04:57.056 A:middle
let's dive in and look at
the specific types of tasks

00:04:57.056 --> 00:04:59.546 A:middle
that the system can
create for us.

00:05:00.056 --> 00:05:02.196 A:middle
First, this is the
application task.

00:05:02.756 --> 00:05:05.776 A:middle
This is a generic runtime
task that you can schedule

00:05:05.826 --> 00:05:08.276 A:middle
to have your application
woken at a future date.

00:05:09.436 --> 00:05:11.816 A:middle
Within the application
task runtime,

00:05:11.866 --> 00:05:14.086 A:middle
you can do any kind
of local processing.

00:05:14.626 --> 00:05:16.826 A:middle
You may want to update
your complication timeline

00:05:17.246 --> 00:05:20.116 A:middle
or download some data from
your server with URLSession.

00:05:21.306 --> 00:05:23.446 A:middle
The URLSession task
is how you find

00:05:23.446 --> 00:05:25.336 A:middle
out that your data has
finished downloading

00:05:25.446 --> 00:05:26.396 A:middle
and ready to process.

00:05:27.876 --> 00:05:31.286 A:middle
Since watchOS is a shared
ecosystem, it doesn't make sense

00:05:31.406 --> 00:05:34.296 A:middle
to leave our application running
while the data downloads.

00:05:34.926 --> 00:05:37.406 A:middle
It would be better to allow
our application to sleep,

00:05:37.406 --> 00:05:40.026 A:middle
and let the system
do that for us.

00:05:40.616 --> 00:05:44.346 A:middle
Snapshots are a very
important part of watchOS 3.

00:05:44.996 --> 00:05:46.406 A:middle
They are both your launch image

00:05:47.086 --> 00:05:49.276 A:middle
and your preview image
while running in the dock.

00:05:50.026 --> 00:05:51.576 A:middle
If the user settles on your app,

00:05:51.576 --> 00:05:53.046 A:middle
it will start running
live again.

00:05:53.226 --> 00:05:54.956 A:middle
So it's critical
that your snapshot be

00:05:54.956 --> 00:05:56.476 A:middle
up to date at all times.

00:05:56.886 --> 00:06:02.226 A:middle
The snapshot task is how you
get runtime to prepare your UI

00:05:56.886 --> 00:06:02.226 A:middle
The snapshot task is how you
get runtime to prepare your UI

00:06:02.226 --> 00:06:04.686 A:middle
in the background to be
ready for the new snapshot.

00:06:04.996 --> 00:06:09.716 A:middle
When you complete this task,

00:06:09.846 --> 00:06:12.326 A:middle
the system will automatically
snapshot your UI.

00:06:13.096 --> 00:06:14.926 A:middle
Remember to always
schedule one of these

00:06:15.056 --> 00:06:16.726 A:middle
after you finish
processing data,

00:06:16.796 --> 00:06:18.976 A:middle
or the user won't see
the work you just did.

00:06:20.566 --> 00:06:23.226 A:middle
When a notification arrives,
your user will see it.

00:06:23.446 --> 00:06:26.746 A:middle
They will then expect your
complication and your snapshot

00:06:26.876 --> 00:06:28.776 A:middle
to be updated to
reflect this data.

00:06:29.486 --> 00:06:32.746 A:middle
Users love applications that
feel like a consistent part

00:06:32.746 --> 00:06:36.226 A:middle
of the OS and are more likely
to put those apps in the dock.

00:06:36.666 --> 00:06:41.526 A:middle
If the user does not interact
with your application for more

00:06:41.526 --> 00:06:44.926 A:middle
than one hour, the system is
going to give you an opportunity

00:06:44.996 --> 00:06:46.606 A:middle
to restore your default state.

00:06:47.796 --> 00:06:50.536 A:middle
Default state means different
things to different apps,

00:06:50.536 --> 00:06:53.866 A:middle
and some apps have no
concept of a default state.

00:06:55.876 --> 00:06:58.466 A:middle
Designing great snapshots
is a huge

00:06:58.466 --> 00:07:00.566 A:middle
and important topic
on watchOS 3.

00:06:58.466 --> 00:07:00.566 A:middle
and important topic
on watchOS 3.

00:07:00.996 --> 00:07:03.186 A:middle
We recommend you check
out this other session

00:07:03.396 --> 00:07:04.496 A:middle
for some great advice

00:07:04.606 --> 00:07:07.116 A:middle
on designing excellent
snapshots for your users.

00:07:09.036 --> 00:07:11.956 A:middle
The last task type is
for watch connectivity.

00:07:12.606 --> 00:07:15.896 A:middle
On watchOS 3, we've
integrated watch connectivity

00:07:16.066 --> 00:07:17.936 A:middle
with our background refresh API.

00:07:19.036 --> 00:07:22.436 A:middle
This means you can now use
watch connectivity messaging

00:07:22.476 --> 00:07:25.286 A:middle
to get data to your
application while it is running

00:07:25.286 --> 00:07:26.066 A:middle
in the background.

00:07:28.556 --> 00:07:31.836 A:middle
Complication push, application
context, sending a file,

00:07:31.836 --> 00:07:34.496 A:middle
or sending user info will
all wake your application

00:07:34.526 --> 00:07:35.336 A:middle
in the background.

00:07:36.096 --> 00:07:37.686 A:middle
We hope that this
edition will lead

00:07:37.686 --> 00:07:41.486 A:middle
to even richer watch
experiences for our users.

00:07:42.276 --> 00:07:46.086 A:middle
When your application is woken
via watch connectivity tasks,

00:07:46.916 --> 00:07:49.256 A:middle
use the standard API
to get your data.

00:07:49.716 --> 00:07:51.966 A:middle
First, make sure the
session is active.

00:07:53.356 --> 00:07:54.796 A:middle
Once the session reactivates,

00:07:54.966 --> 00:07:58.336 A:middle
start monitoring the new
hasContentPending property.

00:07:59.026 --> 00:08:00.676 A:middle
As long as this property
is true,

00:07:59.026 --> 00:08:00.676 A:middle
As long as this property
is true,

00:08:00.806 --> 00:08:02.416 A:middle
you still have data to process.

00:08:02.916 --> 00:08:04.286 A:middle
Make sure to hold onto the task

00:08:04.426 --> 00:08:06.296 A:middle
until you're finished
processing this data.

00:08:06.516 --> 00:08:10.286 A:middle
It is your responsibility
to return the task

00:08:10.326 --> 00:08:12.056 A:middle
to the system by completing it.

00:08:12.056 --> 00:08:15.506 A:middle
If you don't do this, you will
exhaust your background runtime,

00:08:15.596 --> 00:08:17.736 A:middle
and we're going to give
you a crash report.

00:08:18.256 --> 00:08:21.806 A:middle
Austen will talk more in the
second half of this session

00:08:21.916 --> 00:08:23.336 A:middle
about these runtime caveats.

00:08:24.046 --> 00:08:27.296 A:middle
Let's quickly review
the workflow

00:08:27.296 --> 00:08:29.596 A:middle
of using our new
background refresh API.

00:08:30.306 --> 00:08:32.336 A:middle
First, schedule a task.

00:08:33.806 --> 00:08:35.916 A:middle
Next, receive the
task from the system.

00:08:36.895 --> 00:08:38.466 A:middle
Now you can do your
background work.

00:08:38.866 --> 00:08:40.405 A:middle
Make sure to hold onto the task

00:08:40.405 --> 00:08:41.806 A:middle
until you're finished
doing this work.

00:08:42.846 --> 00:08:45.386 A:middle
You may use this runtime
to schedule further work

00:08:45.566 --> 00:08:48.346 A:middle
such as fetching data from
your server with URLSession.

00:08:49.826 --> 00:08:55.786 A:middle
When finished, return the task
to the system by completing it.

00:08:56.766 --> 00:08:58.326 A:middle
Before we continue, I want

00:08:58.326 --> 00:09:01.676 A:middle
to stress an important
topic, being a good citizen.

00:08:58.326 --> 00:09:01.676 A:middle
to stress an important
topic, being a good citizen.

00:09:03.196 --> 00:09:07.056 A:middle
watchOS is a shared ecosystem,
and there are many applications

00:09:07.176 --> 00:09:10.816 A:middle
and system processes competing
for CPU time and battery life.

00:09:11.426 --> 00:09:15.006 A:middle
It is our responsibility as
developers in this ecosystem

00:09:15.066 --> 00:09:17.926 A:middle
to do our best to use these
resources efficiently.

00:09:18.806 --> 00:09:22.926 A:middle
Let's pretend the user launches
your app at 3:00 p.m. You want

00:09:22.926 --> 00:09:24.566 A:middle
to make sure you have
a chance to check

00:09:24.566 --> 00:09:25.766 A:middle
in with your server in an hour.

00:09:25.956 --> 00:09:29.526 A:middle
So schedule a task for 4:00
p.m. Well, what happens

00:09:29.576 --> 00:09:31.796 A:middle
if the user launches
your app at 3:50?

00:09:33.026 --> 00:09:35.976 A:middle
We could update our data
now and again at four

00:09:35.976 --> 00:09:38.896 A:middle
when the task runs, but that
does not sound optimal to me.

00:09:40.256 --> 00:09:43.366 A:middle
A better approach is to
use the runtime at 3:50

00:09:43.456 --> 00:09:47.186 A:middle
to reschedule our background
task for an hour later, 4:50.

00:09:48.046 --> 00:09:50.766 A:middle
Every app is different, but
hopefully you can find a pattern

00:09:50.766 --> 00:09:53.066 A:middle
like this to help us
maximize resources.

00:09:54.946 --> 00:09:56.696 A:middle
Okay, let's start
looking at some code.

00:09:57.166 --> 00:10:00.146 A:middle
To help frame our sample
code, we're going to walk

00:09:57.166 --> 00:10:00.146 A:middle
To help frame our sample
code, we're going to walk

00:10:00.196 --> 00:10:02.546 A:middle
through the timeline of
an example application

00:10:02.626 --> 00:10:05.786 A:middle
and show how you can write the
code that corresponds to all

00:10:05.786 --> 00:10:07.966 A:middle
of these life cycle events.

00:10:08.046 --> 00:10:09.696 A:middle
Let's take a look
at a football app,

00:10:09.896 --> 00:10:12.886 A:middle
and pretend that there's
a big game tonight from 7

00:10:12.966 --> 00:10:17.316 A:middle
to 9:00 p.m. We know our user's
favorite team is playing,

00:10:17.436 --> 00:10:19.926 A:middle
and we expect them to be
checking the score frequently.

00:10:20.656 --> 00:10:22.606 A:middle
Let's settle on a
thirty-minute cadence

00:10:22.836 --> 00:10:24.116 A:middle
for our background activity.

00:10:24.676 --> 00:10:28.626 A:middle
The background refresh
API allows only one task

00:10:28.626 --> 00:10:31.556 A:middle
of each type to be in
flight at any given time.

00:10:32.376 --> 00:10:35.976 A:middle
So to start off, let's schedule
our first task for 7:30.

00:10:37.256 --> 00:10:40.996 A:middle
At 7:30, we'll use that runtime
to schedule the next task for 8.

00:10:42.166 --> 00:10:44.136 A:middle
At 8, we'll again
use the runtime

00:10:44.136 --> 00:10:46.136 A:middle
to schedule our next
event for 8:30.

00:10:46.536 --> 00:10:49.896 A:middle
It is important to always make
sure you have a future task

00:10:49.896 --> 00:10:51.366 A:middle
scheduled, or you won't know

00:10:51.366 --> 00:10:53.836 A:middle
when you'll next
get a chance to run.

00:10:55.056 --> 00:10:56.716 A:middle
Here we see the code

00:10:56.716 --> 00:10:59.496 A:middle
for scheduling an
application task on watchOS.

00:11:00.346 --> 00:11:03.096 A:middle
First, let's set the fire date
to thirty minutes from now.

00:11:03.636 --> 00:11:07.186 A:middle
Use the userInfo object
to store some data

00:11:07.186 --> 00:11:08.916 A:middle
about why you made this request.

00:11:09.436 --> 00:11:12.336 A:middle
In this example, I've put the
date at which I made the request

00:11:12.846 --> 00:11:15.366 A:middle
and a reason string
that I can check later

00:11:15.426 --> 00:11:16.446 A:middle
when the task comes back.

00:11:17.346 --> 00:11:18.646 A:middle
This property is optional,

00:11:18.776 --> 00:11:21.936 A:middle
and any secure coding compliant
data can be stored here.

00:11:23.916 --> 00:11:25.916 A:middle
This completion blog
is how you find

00:11:25.916 --> 00:11:29.546 A:middle
out that the system has
successfully scheduled

00:11:29.636 --> 00:11:30.106 A:middle
your task.

00:11:31.016 --> 00:11:33.036 A:middle
Note that just because
the error is nil here,

00:11:33.076 --> 00:11:34.786 A:middle
it does not mean
the task will run

00:11:34.826 --> 00:11:36.536 A:middle
at exactly the requested time.

00:11:37.576 --> 00:11:39.306 A:middle
Austen will talk more about when

00:11:39.306 --> 00:11:41.596 A:middle
and why the system
triggers certain tasks.

00:11:43.806 --> 00:11:45.366 A:middle
With our application
task scheduled,

00:11:45.576 --> 00:11:47.326 A:middle
let's zoom in on our
timeline and look

00:11:47.326 --> 00:11:48.746 A:middle
at only a five-minute window

00:11:48.806 --> 00:11:50.656 A:middle
in which our task
is scheduled to run.

00:11:51.366 --> 00:11:54.526 A:middle
When the system wakes
us, our priority is

00:11:54.566 --> 00:11:56.786 A:middle
to get the latest score
data from our server.

00:11:57.046 --> 00:11:58.326 A:middle
So let's take a look at the code

00:11:58.326 --> 00:12:01.446 A:middle
for starting a background
URLSession on watchOS.

00:11:58.326 --> 00:12:01.446 A:middle
for starting a background
URLSession on watchOS.

00:12:06.126 --> 00:12:08.996 A:middle
First, create a URLSession
configuration object.

00:12:09.666 --> 00:12:11.796 A:middle
It is important that
this object be configured

00:12:11.796 --> 00:12:14.536 A:middle
as a background session because
we're running in the background.

00:12:16.196 --> 00:12:17.716 A:middle
Also, set an identifier

00:12:17.786 --> 00:12:21.486 A:middle
that we'll use later
to access our data.

00:12:22.026 --> 00:12:25.226 A:middle
Next, create a URL session
using this configuration.

00:12:25.316 --> 00:12:28.976 A:middle
We ask the URLSession
to give us one

00:12:28.976 --> 00:12:32.906 A:middle
or more download task
objects where we can associate

00:12:32.906 --> 00:12:35.406 A:middle
as many download tasks as
we want with the session.

00:12:35.856 --> 00:12:37.886 A:middle
Keep in mind the
system will only wake us

00:12:37.966 --> 00:12:42.706 A:middle
when all associated
tasks have finished.

00:12:42.826 --> 00:12:47.446 A:middle
Don't forget to call resume
to start downloading the data.

00:12:48.576 --> 00:12:49.806 A:middle
Getting back to our timeline,

00:12:49.956 --> 00:12:51.626 A:middle
we've got the URL
download in progress.

00:12:51.706 --> 00:12:53.516 A:middle
So it is safe to
complete our task

00:12:53.516 --> 00:12:55.126 A:middle
and allow the application
to sleep.

00:12:56.046 --> 00:12:58.816 A:middle
The system will continue
downloading the data while we

00:12:58.816 --> 00:12:59.396 A:middle
are suspended.

00:12:59.396 --> 00:13:04.396 A:middle
When our data is ready,
URLSession will create a task

00:12:59.396 --> 00:13:04.396 A:middle
When our data is ready,
URLSession will create a task

00:13:04.396 --> 00:13:06.286 A:middle
and wake our application
back up.

00:13:06.286 --> 00:13:09.176 A:middle
But what does wake our
application really mean?

00:13:10.746 --> 00:13:14.586 A:middle
In concrete terms, waking your
application means calling the

00:13:14.586 --> 00:13:18.616 A:middle
new handle background task
method on WKExtensionDelegate.

00:13:19.256 --> 00:13:21.546 A:middle
In addition to this call,

00:13:21.646 --> 00:13:23.446 A:middle
we will receive a
will activate call

00:13:23.446 --> 00:13:24.976 A:middle
on our visible view controllers.

00:13:26.636 --> 00:13:30.116 A:middle
The system coalesces tasks and
delivers them to us as a set.

00:13:30.736 --> 00:13:33.096 A:middle
We need to process all
of the tasks in this set.

00:13:33.096 --> 00:13:35.066 A:middle
So let's get started by
looping through them.

00:13:36.266 --> 00:13:39.966 A:middle
For each task, we can use an
inline task to get an object

00:13:39.966 --> 00:13:41.426 A:middle
of the types we care about.

00:13:42.776 --> 00:13:45.216 A:middle
In this case, we're
processing a URLSession task.

00:13:45.516 --> 00:13:49.436 A:middle
So we need to rejoin the session
using the identifier associated

00:13:49.436 --> 00:13:51.746 A:middle
with the task.

00:13:52.186 --> 00:13:54.646 A:middle
URLSession is a highly
asynchronous API.

00:13:55.236 --> 00:13:57.606 A:middle
We need to be careful
to hold on to our tasks

00:13:57.606 --> 00:13:59.486 A:middle
until we're finished
processing this data.

00:14:00.426 --> 00:14:02.896 A:middle
We recommend you store
the task in a collection

00:14:03.106 --> 00:14:04.866 A:middle
and then drain the
collection when finished,

00:14:04.936 --> 00:14:08.006 A:middle
completing each task to
return it to the system.

00:14:10.486 --> 00:14:12.016 A:middle
Make sure to complete task types

00:14:12.016 --> 00:14:13.636 A:middle
that you don't specifically
handle.

00:14:14.166 --> 00:14:16.626 A:middle
Remember, the system has a
limited number available.

00:14:16.726 --> 00:14:18.946 A:middle
So complete each
one that you get.

00:14:19.776 --> 00:14:21.156 A:middle
We've got our data.

00:14:21.386 --> 00:14:22.366 A:middle
Let's update our model.

00:14:22.826 --> 00:14:25.856 A:middle
You might consider updating
your UI as well at this point,

00:14:25.856 --> 00:14:29.136 A:middle
but we recommend you make use
of this snapshot task runtime

00:14:29.196 --> 00:14:30.186 A:middle
for that type of work.

00:14:31.266 --> 00:14:34.186 A:middle
So before we complete our
URL task, let's make sure

00:14:34.186 --> 00:14:35.296 A:middle
to schedule a snapshot.

00:14:37.326 --> 00:14:38.606 A:middle
With our snapshot scheduled,

00:14:38.686 --> 00:14:40.416 A:middle
it's safe to complete
the URL task

00:14:40.496 --> 00:14:42.466 A:middle
and allow the application
to sleep again.

00:14:44.316 --> 00:14:46.196 A:middle
Soon, the system
will wake us back

00:14:46.196 --> 00:14:49.176 A:middle
up with the snapshot
task we just scheduled.

00:14:49.926 --> 00:14:51.916 A:middle
Now is our chance
to update our UI,

00:14:51.916 --> 00:14:54.426 A:middle
and get everything ready
for the new snapshot.

00:14:56.216 --> 00:14:59.116 A:middle
Snapshots have a unique
completion handler.

00:14:59.326 --> 00:15:01.276 A:middle
So let's take a look at
the completion handler

00:14:59.326 --> 00:15:01.276 A:middle
So let's take a look at
the completion handler

00:15:01.396 --> 00:15:02.876 A:middle
for snapshots on watchOS.

00:15:03.596 --> 00:15:08.466 A:middle
Every application must have
a snapshot at all times.

00:15:09.226 --> 00:15:11.786 A:middle
This is because your snapshot
is both your launch image

00:15:12.306 --> 00:15:14.516 A:middle
and your preview image
while running in the dock.

00:15:15.376 --> 00:15:17.836 A:middle
That rule means that when
we complete a snapshot,

00:15:18.576 --> 00:15:21.516 A:middle
we need to tell the system
how long it is valid for.

00:15:22.306 --> 00:15:25.186 A:middle
Think about your data and
how long it will be relevant

00:15:25.236 --> 00:15:25.946 A:middle
to your users.

00:15:26.946 --> 00:15:29.366 A:middle
In this case, we have another
event scheduled at eight.

00:15:29.696 --> 00:15:34.036 A:middle
So let's set our expiration
for thirty minutes from now.

00:15:35.196 --> 00:15:37.766 A:middle
User info can optionally
store some information

00:15:37.766 --> 00:15:39.246 A:middle
about why we made this request.

00:15:39.706 --> 00:15:45.556 A:middle
That data will return to us
with our next snapshot task.

00:15:45.716 --> 00:15:48.866 A:middle
WatchOS will give your
application an opportunity

00:15:48.866 --> 00:15:52.176 A:middle
to restore its default state
after one hour of inactivity.

00:15:52.986 --> 00:15:55.246 A:middle
You can tell the system
to skip that event

00:15:55.596 --> 00:15:57.966 A:middle
by setting the
restoredDefaultState property

00:15:58.136 --> 00:15:58.596 A:middle
to true.

00:15:59.556 --> 00:16:02.146 A:middle
Doing this lets the system
know that you are already

00:15:59.556 --> 00:16:02.146 A:middle
Doing this lets the system
know that you are already

00:16:02.146 --> 00:16:04.926 A:middle
at your default state, and don't
need an extra task for that.

00:16:05.976 --> 00:16:07.426 A:middle
Apps that have no concept

00:16:07.426 --> 00:16:10.136 A:middle
of a default state should
consider always setting this

00:16:10.176 --> 00:16:12.666 A:middle
property to true.

00:16:13.096 --> 00:16:14.716 A:middle
Once you complete
a snapshot task,

00:16:14.936 --> 00:16:16.906 A:middle
the system will suspend
your application.

00:16:17.416 --> 00:16:20.376 A:middle
Your UI will then be
automatically captured and used

00:16:20.376 --> 00:16:21.526 A:middle
as your new launch image.

00:16:22.316 --> 00:16:24.946 A:middle
This activity will not
wake your application.

00:16:25.306 --> 00:16:30.196 A:middle
We've made it through
an end-to-end example

00:16:30.326 --> 00:16:34.026 A:middle
of a common background refresh
pattern and the associated code.

00:16:34.836 --> 00:16:36.976 A:middle
In case you didn't notice,
even though we were looking

00:16:36.976 --> 00:16:38.996 A:middle
at a whole five minutes
on our timeline,

00:16:39.486 --> 00:16:42.796 A:middle
our application was only
active for 15 total seconds.

00:16:44.016 --> 00:16:45.726 A:middle
By chaining tasks, we were able

00:16:45.726 --> 00:16:48.456 A:middle
to maximize our use
of system resources.

00:16:50.046 --> 00:16:51.966 A:middle
You now have a good
understanding

00:16:52.026 --> 00:16:55.806 A:middle
of what this new API is,
why you should adopt it,

00:16:56.296 --> 00:16:58.686 A:middle
and how you can go
about adopting it.

00:16:59.306 --> 00:17:02.336 A:middle
I'd like to welcome
Austen Green to the stage

00:16:59.306 --> 00:17:02.336 A:middle
I'd like to welcome
Austen Green to the stage

00:17:02.416 --> 00:17:03.956 A:middle
to give you some deeper insights

00:17:03.956 --> 00:17:06.846 A:middle
into how scheduling
works behind the scenes.

00:17:09.465 --> 00:17:09.945 A:middle
Good luck [applause].

00:17:14.116 --> 00:17:14.465 A:middle
&gt;&gt; Hi, everyone.

00:17:14.626 --> 00:17:15.476 A:middle
I'm Austen Green.

00:17:15.626 --> 00:17:16.945 A:middle
I'm a watchOS engineer.

00:17:17.286 --> 00:17:21.626 A:middle
This morning, I would like to
share with you some details

00:17:21.746 --> 00:17:24.116 A:middle
about how scheduling
works behind the scenes.

00:17:24.626 --> 00:17:27.455 A:middle
I'd like to provide some
best practices that we picked

00:17:27.455 --> 00:17:30.556 A:middle
up as we adopted background
refresh in our own applications.

00:17:31.106 --> 00:17:33.216 A:middle
And, finally, I'd like to
close with a quick case study

00:17:33.626 --> 00:17:36.336 A:middle
about specifically how we
adopted background refresh

00:17:36.396 --> 00:17:37.556 A:middle
in our stocks application.

00:17:38.836 --> 00:17:39.556 A:middle
So let's get started.

00:17:39.556 --> 00:17:45.306 A:middle
So the first thing I want
to talk about is runtime.

00:17:46.186 --> 00:17:48.896 A:middle
So while your application
is in the foreground,

00:17:50.016 --> 00:17:51.336 A:middle
you're always scheduled to run.

00:17:51.896 --> 00:17:54.836 A:middle
This means that your
code gets to execute

00:17:55.186 --> 00:17:57.876 A:middle
so that you can do things
like update your model

00:17:58.066 --> 00:18:00.516 A:middle
and draw your UI, and
any other kinds of tasks

00:17:58.066 --> 00:18:00.516 A:middle
and draw your UI, and
any other kinds of tasks

00:18:00.516 --> 00:18:02.776 A:middle
that your application
may need to do.

00:18:03.286 --> 00:18:04.836 A:middle
Now when your application moves

00:18:04.836 --> 00:18:07.526 A:middle
into the background the
system will typically suspend

00:18:07.526 --> 00:18:08.326 A:middle
your application.

00:18:08.856 --> 00:18:11.016 A:middle
This means that your
application doesn't get a chance

00:18:11.016 --> 00:18:12.386 A:middle
to execute any code at all.

00:18:13.886 --> 00:18:15.936 A:middle
Now sometimes while
your application is

00:18:15.936 --> 00:18:18.496 A:middle
in the background, the system
may want your application

00:18:18.766 --> 00:18:20.306 A:middle
to perform a very specific task.

00:18:20.746 --> 00:18:24.426 A:middle
The system will wake your
application and ask you

00:18:24.426 --> 00:18:27.456 A:middle
to perform a specific task
that it may want you to do.

00:18:27.956 --> 00:18:30.626 A:middle
In watchOS 2, there
were several ways

00:18:30.626 --> 00:18:32.506 A:middle
that the system could
wake your application.

00:18:32.726 --> 00:18:36.046 A:middle
For example, to handle a
long look notification,

00:18:36.996 --> 00:18:39.336 A:middle
or perhaps ClockKit would
ask your application

00:18:39.486 --> 00:18:40.896 A:middle
to update its complication.

00:18:41.746 --> 00:18:44.986 A:middle
In watchOS 3, we're adding even
more ways for your application

00:18:45.066 --> 00:18:45.886 A:middle
to run in the background.

00:18:50.046 --> 00:18:53.786 A:middle
Now the system is going to
apply some limits to the amount

00:18:53.786 --> 00:18:56.966 A:middle
of time that you get to run
while in the background.

00:18:57.556 --> 00:19:01.826 A:middle
These limits are on the order of
seconds, and the system is going

00:18:57.556 --> 00:19:01.826 A:middle
These limits are on the order of
seconds, and the system is going

00:19:01.826 --> 00:19:04.986 A:middle
to consider the amount of
time that you use as well

00:19:04.986 --> 00:19:06.676 A:middle
as the amount of CPU you use.

00:19:06.956 --> 00:19:10.006 A:middle
So it's in your best interest
to complete your work as quickly

00:19:10.086 --> 00:19:11.696 A:middle
and as efficiently as possible.

00:19:13.016 --> 00:19:15.756 A:middle
Now in a later seed, if
you exceed these limits,

00:19:16.326 --> 00:19:17.726 A:middle
the system will kill
your application.

00:19:18.496 --> 00:19:19.536 A:middle
You'll get a crash report,

00:19:19.656 --> 00:19:22.126 A:middle
and you'll know whether
you exceeded the CPU limits

00:19:22.626 --> 00:19:24.056 A:middle
or the time limits based

00:19:24.056 --> 00:19:26.496 A:middle
on the exception code
in the crash report.

00:19:26.936 --> 00:19:32.436 A:middle
Now we recognize that different
tasks may have different needs.

00:19:32.916 --> 00:19:34.416 A:middle
So ApplicationRefresh task

00:19:34.826 --> 00:19:38.396 A:middle
and the URLSession task have
a little bit longer limits

00:19:38.906 --> 00:19:41.746 A:middle
than watch connectivity
and your snapshot task.

00:19:52.446 --> 00:19:56.546 A:middle
So in watchOS 2, complications
were the primary way

00:19:56.546 --> 00:19:58.716 A:middle
that your application got
runtime while in the background.

00:19:59.936 --> 00:20:02.696 A:middle
In watchOS 3, we're going to
make sure that you continue

00:19:59.936 --> 00:20:02.696 A:middle
In watchOS 3, we're going to
make sure that you continue

00:20:02.696 --> 00:20:04.156 A:middle
to get multiple updates an hour

00:20:04.226 --> 00:20:06.616 A:middle
if you're a complication
application on par

00:20:06.616 --> 00:20:08.516 A:middle
with what you were
receiving in watchOS 2.

00:20:09.546 --> 00:20:13.616 A:middle
However, if you were previously
asking the system for runtime

00:20:13.616 --> 00:20:14.876 A:middle
to update your complication
data,

00:20:15.616 --> 00:20:18.146 A:middle
you can now request
updates through WKExtension.

00:20:18.216 --> 00:20:19.666 A:middle
I'll show you how to do
that in just a minute.

00:20:21.066 --> 00:20:25.296 A:middle
Also, new in watchOS 3, we're
guaranteeing you fifty pushes

00:20:25.296 --> 00:20:28.986 A:middle
from your parent iPhone if
you're using watch connectivity.

00:20:29.456 --> 00:20:32.586 A:middle
It's really easy to take
advantage of this information

00:20:32.846 --> 00:20:36.166 A:middle
to make sure that you have a
great complication experience

00:20:36.166 --> 00:20:37.846 A:middle
for your users all day long.

00:20:38.716 --> 00:20:42.446 A:middle
Let's take a look at some code.

00:20:42.446 --> 00:20:46.596 A:middle
So let's say that you're running
an iPhone app, and you notice

00:20:46.596 --> 00:20:47.496 A:middle
that your model changed.

00:20:48.656 --> 00:20:50.776 A:middle
You can now query WCSession,

00:20:51.036 --> 00:20:53.636 A:middle
remainingComplication
UserInfoTransfers to figure

00:20:53.636 --> 00:20:56.596 A:middle
out how many high-priority
pushes you have left

00:20:56.846 --> 00:20:58.516 A:middle
for the rest of the day.

00:20:58.516 --> 00:21:01.086 A:middle
You can use this information

00:20:58.516 --> 00:21:01.086 A:middle
You can use this information

00:21:01.376 --> 00:21:04.246 A:middle
to tailor your complication
experience and determine

00:21:04.246 --> 00:21:06.866 A:middle
when the best time is for you
to send your complication data.

00:21:08.146 --> 00:21:09.936 A:middle
So let's say in the
default case,

00:21:10.686 --> 00:21:11.936 A:middle
you've got plenty of pushes.

00:21:12.716 --> 00:21:14.276 A:middle
Go ahead and send
your data immediately.

00:21:14.476 --> 00:21:16.946 A:middle
The user will see your
data that's most relevant

00:21:17.356 --> 00:21:18.346 A:middle
almost immediately.

00:21:19.476 --> 00:21:22.576 A:middle
Now let's say that you've been
pushing a lot, and you're sort

00:21:22.576 --> 00:21:24.336 A:middle
of running low on, on transfers.

00:21:24.816 --> 00:21:29.156 A:middle
So you might consider throttling
the data that you send

00:21:29.156 --> 00:21:30.116 A:middle
to the watch to make sure

00:21:30.116 --> 00:21:34.166 A:middle
that your user will have
complication data updates

00:21:34.226 --> 00:21:35.336 A:middle
throughout the rest of the day.

00:21:36.376 --> 00:21:40.526 A:middle
Finally, if you don't have any
high-priority transfers left,

00:21:40.806 --> 00:21:43.586 A:middle
it's still okay to try and
send this data, however,

00:21:44.016 --> 00:21:46.276 A:middle
the data will get sent
at a lower priority.

00:21:47.306 --> 00:21:51.096 A:middle
Next, I'd like to
talk about some

00:21:51.096 --> 00:21:54.166 A:middle
of the CLKComplication
DataSource methods that we'd

00:21:54.166 --> 00:21:56.066 A:middle
like to move into WatchKit.

00:21:56.626 --> 00:22:00.676 A:middle
If you were previously
asking the system for runtime

00:21:56.626 --> 00:22:00.676 A:middle
If you were previously
asking the system for runtime

00:22:00.946 --> 00:22:02.696 A:middle
with getNextRequested
UpdateDate.

00:22:05.576 --> 00:22:10.496 A:middle
You should now expect the system
to schedule a background refresh

00:22:10.606 --> 00:22:12.536 A:middle
with a preferred
date, the same date

00:22:12.536 --> 00:22:14.606 A:middle
that you were telling
ClockKit previously.

00:22:16.116 --> 00:22:19.556 A:middle
Similarly, when ClockKit
wanted your application to run,

00:22:19.846 --> 00:22:21.586 A:middle
it would call requestedUpdate
DidBegin.

00:22:22.636 --> 00:22:25.406 A:middle
Now we want to do that
at your application level

00:22:26.006 --> 00:22:28.666 A:middle
with handle background refreshed
or handle backgroundTasks.

00:22:29.116 --> 00:22:30.986 A:middle
You'll get an application task

00:22:31.096 --> 00:22:33.326 A:middle
to handle both complication
updates

00:22:33.606 --> 00:22:37.736 A:middle
and your application updates.

00:22:38.336 --> 00:22:41.186 A:middle
Now, new in watchOS 3,
we've introduced the dock.

00:22:41.376 --> 00:22:44.246 A:middle
We think it's a great way
for users to quickly get

00:22:44.246 --> 00:22:47.116 A:middle
at their favorite applications
and have a glanceable view

00:22:47.116 --> 00:22:50.146 A:middle
of all of the information
that they care about.

00:22:50.616 --> 00:22:53.236 A:middle
We want your applications in
the dock to be up to date.

00:22:53.576 --> 00:22:55.176 A:middle
So we're going to
guarantee you a minimum

00:22:55.176 --> 00:22:56.316 A:middle
of one update per hour.

00:22:56.466 --> 00:23:00.366 A:middle
This applies to a snapshot task
and an application refresh task.

00:22:56.466 --> 00:23:00.366 A:middle
This applies to a snapshot task
and an application refresh task.

00:23:01.136 --> 00:23:04.706 A:middle
Now this budget is distributed
across all of the applications

00:23:04.856 --> 00:23:08.046 A:middle
in the dock, and the user can
pick how many applications they

00:23:08.046 --> 00:23:08.796 A:middle
want in their dock.

00:23:09.096 --> 00:23:12.866 A:middle
Consequence of this is that if a
user has fewer apps in the dock,

00:23:13.296 --> 00:23:16.376 A:middle
then your application can
get more opportunities to run

00:23:16.376 --> 00:23:18.466 A:middle
in the background
during any given hour.

00:23:19.656 --> 00:23:22.246 A:middle
Also, we keep your
applications in memory

00:23:22.696 --> 00:23:25.446 A:middle
so that resumes are fast,
and the user can interact

00:23:25.446 --> 00:23:27.176 A:middle
with your application
if they settle on it

00:23:27.386 --> 00:23:30.876 A:middle
as quickly as possible.

00:23:30.876 --> 00:23:32.736 A:middle
Also in the dock,
we have the concept

00:23:32.736 --> 00:23:34.416 A:middle
of a most recently used app.

00:23:35.476 --> 00:23:37.866 A:middle
This application occupies
the last slot in the dock,

00:23:38.356 --> 00:23:40.946 A:middle
and the users are given
an opportunity to keep it

00:23:40.946 --> 00:23:42.936 A:middle
in the dock by pressing
the button.

00:23:44.116 --> 00:23:46.256 A:middle
Now this application
is treated exactly

00:23:46.256 --> 00:23:48.476 A:middle
like a user's favorite
application

00:23:48.736 --> 00:23:50.836 A:middle
that the user has explicitly
added into the dock.

00:23:52.026 --> 00:23:56.356 A:middle
This means that this application
will receive background refresh

00:23:56.356 --> 00:23:57.946 A:middle
tasks and snapshot tasks

00:23:58.206 --> 00:23:59.896 A:middle
like any other application
in the dock.

00:24:00.166 --> 00:24:02.986 A:middle
So you should always make
sure that you schedule

00:24:03.026 --> 00:24:04.906 A:middle
with the system any application,

00:24:04.986 --> 00:24:08.146 A:middle
any background refresh
request that you may need.

00:24:09.156 --> 00:24:11.876 A:middle
Now home screen applications
shouldn't expect

00:24:11.876 --> 00:24:12.836 A:middle
regular scheduling.

00:24:13.186 --> 00:24:15.866 A:middle
So just keep that in mind.

00:24:17.426 --> 00:24:20.636 A:middle
As Eric mentioned
earlier, the snapshots

00:24:20.636 --> 00:24:24.656 A:middle
of your application are
critical to the experience

00:24:24.876 --> 00:24:27.326 A:middle
of your application in
the dock on watchOS 3.

00:24:28.856 --> 00:24:30.756 A:middle
There may be times
when the system needs

00:24:30.756 --> 00:24:34.376 A:middle
to snapshot your application
for various reasons.

00:24:35.146 --> 00:24:38.076 A:middle
Now if the system
asks your application

00:24:38.156 --> 00:24:40.496 A:middle
to perform a snapshot
because we think we need one,

00:24:41.206 --> 00:24:42.806 A:middle
these snapshots don't
count against your budget,

00:24:43.336 --> 00:24:46.246 A:middle
and they're in addition
to the requested snapshots

00:24:46.376 --> 00:24:47.566 A:middle
that you've asked of the system.

00:24:48.416 --> 00:24:51.266 A:middle
There are five triggers
that can cause the system

00:24:51.266 --> 00:24:52.986 A:middle
to ask your application
for a snapshot.

00:24:53.526 --> 00:24:58.606 A:middle
If your complication timeline
updates, if the user interacts

00:24:58.606 --> 00:24:59.966 A:middle
with one of your notifications,

00:25:00.676 --> 00:25:03.566 A:middle
this means that the notification
was actively dismissed,

00:25:03.796 --> 00:25:06.126 A:middle
and it doesn't count if it goes
in the notification center.

00:25:06.666 --> 00:25:09.506 A:middle
When you go from the
foreground to the background,

00:25:10.126 --> 00:25:11.646 A:middle
and then again, one hour later

00:25:11.646 --> 00:25:13.326 A:middle
to give your application
a chance to return

00:25:13.326 --> 00:25:15.276 A:middle
to its default state,
if appropriate.

00:25:16.526 --> 00:25:19.086 A:middle
And, finally, in order to
get everything started,

00:25:19.346 --> 00:25:21.196 A:middle
the system is going to
ask your application

00:25:21.196 --> 00:25:22.376 A:middle
for a snapshot on boot.

00:25:23.026 --> 00:25:24.076 A:middle
This is your opportunity

00:25:24.186 --> 00:25:26.726 A:middle
to start scheduling any other
background refresh tasks

00:25:26.806 --> 00:25:31.626 A:middle
with the system.

00:25:31.756 --> 00:25:34.416 A:middle
Now, I'd like to take
a few minutes to share

00:25:34.416 --> 00:25:37.536 A:middle
with you some best practices
that we picked up along the way

00:25:37.626 --> 00:25:40.676 A:middle
as we adopt a background
refresh in our own applications.

00:25:43.056 --> 00:25:46.386 A:middle
So, first of all, the
system wants to know

00:25:46.386 --> 00:25:48.476 A:middle
as much information as
we can about your needs.

00:25:48.656 --> 00:25:50.606 A:middle
So schedule as often
as you need to.

00:25:51.376 --> 00:25:53.486 A:middle
Every time your application
gets a chance to run,

00:25:53.756 --> 00:25:56.206 A:middle
you should consider
re-evaluating your background

00:25:56.206 --> 00:25:59.626 A:middle
refresh needs and scheduling
with the system as appropriate.

00:26:00.196 --> 00:26:03.656 A:middle
You should not feel
obligated to do work, however.

00:26:03.796 --> 00:26:05.366 A:middle
If the system calls
your application back

00:26:05.366 --> 00:26:08.326 A:middle
for a background refresh task,
and it doesn't make sense,

00:26:08.326 --> 00:26:10.056 A:middle
maybe you just updated
your data already,

00:26:10.586 --> 00:26:13.336 A:middle
need to do anything else,
finish as soon as possible.

00:26:13.386 --> 00:26:18.076 A:middle
Or better yet, in the, in the
past when you've done that work,

00:26:18.146 --> 00:26:21.366 A:middle
consider deferring
any additional work

00:26:21.366 --> 00:26:22.586 A:middle
that you've scheduled
with the system.

00:26:22.586 --> 00:26:26.326 A:middle
You should consider all
the runtime opportunities

00:26:26.546 --> 00:26:27.826 A:middle
that you get to make sure

00:26:27.826 --> 00:26:29.366 A:middle
that you keep your
application up to date.

00:26:29.696 --> 00:26:32.046 A:middle
This means updating
your model and your UI

00:26:32.046 --> 00:26:34.236 A:middle
and scheduling background
tasks for the system.

00:26:34.936 --> 00:26:37.746 A:middle
So for dock and foreground
activations, notifications,

00:26:37.746 --> 00:26:39.636 A:middle
complication updates,
background refresh.

00:26:39.636 --> 00:26:42.436 A:middle
There's any number of reasons
why your application may get

00:26:42.436 --> 00:26:45.686 A:middle
runtime, and you should keep
all of them in mind as you try

00:26:45.686 --> 00:26:48.636 A:middle
and keep your application
up to date.

00:26:48.916 --> 00:26:54.146 A:middle
So application refresh
background tasks is your entry

00:26:54.146 --> 00:26:57.206 A:middle
point into general purpose
runtime while you're

00:26:57.206 --> 00:26:59.896 A:middle
in the background, and we think
there's some great use cases

00:26:59.896 --> 00:27:00.366 A:middle
for this.

00:26:59.896 --> 00:27:00.366 A:middle
for this.

00:27:00.756 --> 00:27:03.466 A:middle
You can do things like
pull the system database.

00:27:04.266 --> 00:27:06.506 A:middle
Maybe you need to read
the HealthKit database

00:27:06.506 --> 00:27:08.256 A:middle
or the calendar database
periodically.

00:27:09.356 --> 00:27:11.516 A:middle
You can use this to
schedule future URL sessions.

00:27:11.586 --> 00:27:13.576 A:middle
This is what we do in
our stocks application.

00:27:13.626 --> 00:27:15.946 A:middle
If you have known
time transitions,

00:27:16.186 --> 00:27:19.086 A:middle
you can tell the system the
exact date that you think

00:27:19.086 --> 00:27:21.346 A:middle
that it would be great
to run your application.

00:27:21.706 --> 00:27:23.426 A:middle
For example, a calendar
application

00:27:23.426 --> 00:27:27.716 A:middle
or an itinerary application
may have very well defined

00:27:27.716 --> 00:27:28.666 A:middle
time transitions.

00:27:29.776 --> 00:27:32.586 A:middle
And, finally, if you were
previously getting background

00:27:32.586 --> 00:27:35.356 A:middle
runtime through the ClockKit
API's, we want you to move

00:27:35.826 --> 00:27:38.916 A:middle
to the WatchKit API's to
trigger complication updates.

00:27:38.916 --> 00:27:45.376 A:middle
Now let's talk about some best
practices for your snapshots.

00:27:47.276 --> 00:27:50.326 A:middle
The snapshot is a
system-owned cache

00:27:50.446 --> 00:27:53.236 A:middle
of your application's
data, and like any cache,

00:27:54.066 --> 00:27:55.206 A:middle
that data can become stale.

00:27:55.206 --> 00:27:58.156 A:middle
So the system wants to know
when that data is stale.

00:27:59.116 --> 00:28:02.126 A:middle
You can tell the system
that your snapshot needs

00:27:59.116 --> 00:28:02.126 A:middle
You can tell the system
that your snapshot needs

00:28:02.126 --> 00:28:04.996 A:middle
to be updated by scheduling a
new snapshot request for now.

00:28:06.316 --> 00:28:09.386 A:middle
Now you should think in terms
of significant content change

00:28:09.606 --> 00:28:11.256 A:middle
when you're trying to
invalidate your snapshot.

00:28:11.876 --> 00:28:12.996 A:middle
You wouldn't want
to do something

00:28:13.396 --> 00:28:14.996 A:middle
like high-frequency
invalidation.

00:28:15.486 --> 00:28:18.966 A:middle
For example, in a timer
application that's counting

00:28:18.966 --> 00:28:19.996 A:middle
down, you wouldn't want

00:28:19.996 --> 00:28:22.156 A:middle
to update our snapshot
every single second.

00:28:22.406 --> 00:28:23.396 A:middle
This doesn't make sense.

00:28:23.546 --> 00:28:25.516 A:middle
Instead, you would
want to tell the system

00:28:25.516 --> 00:28:26.346 A:middle
to update your snapshot

00:28:26.696 --> 00:28:29.366 A:middle
when something significant has
happened like the timer's ended.

00:28:29.366 --> 00:28:33.906 A:middle
Now I know this is complex,

00:28:34.086 --> 00:28:38.666 A:middle
and I'd like to share what
I think is a great data flow

00:28:38.936 --> 00:28:40.296 A:middle
for how to manage
this complexity.

00:28:41.586 --> 00:28:43.836 A:middle
So let's say that you
get some external event.

00:28:44.276 --> 00:28:45.456 A:middle
Maybe it's watch connectivity.

00:28:45.456 --> 00:28:46.786 A:middle
Maybe it's NSURLSession.

00:28:47.146 --> 00:28:49.626 A:middle
Maybe you just happened
to run in the foreground

00:28:49.626 --> 00:28:51.046 A:middle
because the user
launched your application.

00:28:51.646 --> 00:28:55.756 A:middle
Basically, anything that causes
you to update your model.

00:28:57.116 --> 00:28:59.586 A:middle
All of the operations
that we want you to do

00:29:00.246 --> 00:29:03.086 A:middle
for background refresh are in
response to your model changes.

00:29:03.476 --> 00:29:05.826 A:middle
For example, updating
your complication,

00:29:06.096 --> 00:29:07.376 A:middle
requesting a new snapshot,

00:29:07.966 --> 00:29:10.696 A:middle
and then evaluating what your
next background refresh needs

00:29:10.696 --> 00:29:12.906 A:middle
are, whether it's for a
background URLSession,

00:29:12.906 --> 00:29:14.436 A:middle
or just scheduling
arbitrary runtime

00:29:14.436 --> 00:29:16.276 A:middle
with a background refresh API.

00:29:22.066 --> 00:29:24.046 A:middle
Now with the dock in watchOS 3,

00:29:24.476 --> 00:29:26.846 A:middle
we think that users
are going to,

00:29:28.156 --> 00:29:30.406 A:middle
we think that users are
going to be in and out

00:29:30.406 --> 00:29:32.676 A:middle
of many applications
much more often

00:29:32.676 --> 00:29:33.886 A:middle
than they were in watchOS 2.

00:29:34.646 --> 00:29:37.256 A:middle
Now in watchOS 2, you
already had to be prepared

00:29:37.256 --> 00:29:40.576 A:middle
to enter the foreground or enter
the background at any time,

00:29:40.576 --> 00:29:42.346 A:middle
but we think these
transitions are going

00:29:42.346 --> 00:29:45.056 A:middle
to happen a lot more often now.

00:29:45.256 --> 00:29:48.266 A:middle
So you should make sure that
you finish any background task

00:29:48.266 --> 00:29:50.576 A:middle
as soon as possible on
foreground activation.

00:29:51.916 --> 00:29:54.036 A:middle
When your application
activates in the foreground,

00:29:54.236 --> 00:29:56.656 A:middle
you don't want to be
doing any additional work.

00:29:57.036 --> 00:29:59.156 A:middle
You just want to do the
work that makes sense

00:29:59.236 --> 00:30:01.976 A:middle
for displaying your
UI to the user.

00:29:59.236 --> 00:30:01.976 A:middle
for displaying your
UI to the user.

00:30:02.046 --> 00:30:04.996 A:middle
Similarly, when you entered
background after being

00:30:04.996 --> 00:30:07.656 A:middle
in the foreground, you should
finish any foreground work

00:30:07.656 --> 00:30:09.366 A:middle
that you were doing
as soon as possible.

00:30:09.906 --> 00:30:12.846 A:middle
Now we recognize that you
might need a little bit of time

00:30:13.216 --> 00:30:15.426 A:middle
to complete any foreground
work, and you can do this

00:30:15.426 --> 00:30:16.936 A:middle
by using NSProcessInfo.

00:30:16.936 --> 00:30:18.296 A:middle
performExpiringActivity.

00:30:19.466 --> 00:30:23.576 A:middle
There's a great session from
last year's WWDC, WatchKit Tips

00:30:23.576 --> 00:30:25.806 A:middle
and Tricks that tells you
exactly how you should

00:30:25.806 --> 00:30:26.956 A:middle
use NSProcessInfo.

00:30:26.956 --> 00:30:28.166 A:middle
performExpiringActivity.

00:30:29.436 --> 00:30:32.256 A:middle
Finally, one more thing I want
to mention, data protection.

00:30:33.176 --> 00:30:36.916 A:middle
Now, typically, a user will put
their watch on in the morning

00:30:37.606 --> 00:30:40.496 A:middle
and unlock it, and the watch
will be unlocked all day long

00:30:40.496 --> 00:30:42.936 A:middle
until they take it off at night,
and put it back on the charger.

00:30:45.446 --> 00:30:46.366 A:middle
Certain types of data

00:30:46.486 --> 00:30:49.966 A:middle
on the watch are completely
inaccessible while the device

00:30:49.966 --> 00:30:50.466 A:middle
is locked.

00:30:51.056 --> 00:30:54.436 A:middle
For example, the most prominent
case is the HealthKit database.

00:30:54.906 --> 00:30:56.356 A:middle
So you should just make sure

00:30:56.356 --> 00:30:58.686 A:middle
that you consider
what your approach is

00:30:58.756 --> 00:31:01.436 A:middle
if your data is not
available for snapshotting.

00:30:58.756 --> 00:31:01.436 A:middle
if your data is not
available for snapshotting.

00:31:05.376 --> 00:31:08.246 A:middle
And then I'd like to
share some testing tips.

00:31:09.596 --> 00:31:12.246 A:middle
The simulator is going to be
great for iterative development.

00:31:12.606 --> 00:31:14.736 A:middle
As I mentioned before,
we have some budgets,

00:31:15.106 --> 00:31:16.436 A:middle
but in a simulator,
we're not going

00:31:16.436 --> 00:31:17.666 A:middle
to enforce any of those budgets.

00:31:17.666 --> 00:31:21.636 A:middle
So you should basically get
your task called at the dates

00:31:21.636 --> 00:31:23.166 A:middle
that you want them
while in the simulator.

00:31:24.836 --> 00:31:26.816 A:middle
Similarly, while
you're on the device,

00:31:27.576 --> 00:31:30.286 A:middle
we may still apply some
budgets, but you're going

00:31:30.286 --> 00:31:32.296 A:middle
to have the best experience
while you're on the charger.

00:31:32.736 --> 00:31:37.286 A:middle
You need to make sure that
you test both the launch path

00:31:37.286 --> 00:31:37.936 A:middle
and the resume path.

00:31:38.276 --> 00:31:40.516 A:middle
The system is going to do its
best to keep your application

00:31:40.516 --> 00:31:43.756 A:middle
in memory, but in the
case of bootstrapping,

00:31:43.806 --> 00:31:46.326 A:middle
the system will have to launch
your application in order

00:31:46.636 --> 00:31:48.116 A:middle
to request the initial snapshot.

00:31:48.556 --> 00:31:51.726 A:middle
Verify that your tasks
are being completed.

00:31:52.406 --> 00:31:55.126 A:middle
In a future seed, you'll get
a crash report if you fail

00:31:55.126 --> 00:31:56.426 A:middle
to complete your tasks in time.

00:31:56.986 --> 00:31:59.876 A:middle
And it's super important that
your application doesn't crash

00:31:59.876 --> 00:32:01.966 A:middle
because we want your
application to be as responsive

00:31:59.876 --> 00:32:01.966 A:middle
because we want your
application to be as responsive

00:32:01.966 --> 00:32:03.176 A:middle
as possible for users.

00:32:03.686 --> 00:32:07.776 A:middle
And, finally, once you think
you have your background refresh

00:32:07.776 --> 00:32:09.816 A:middle
strategy implemented,
you should live on it.

00:32:10.326 --> 00:32:11.806 A:middle
Make sure that you're
getting the experience

00:32:11.806 --> 00:32:13.246 A:middle
that you want your
users to have.

00:32:14.096 --> 00:32:16.486 A:middle
You should vary the number
of applications that are

00:32:16.486 --> 00:32:20.056 A:middle
in your dock to make sure
that you test the best-

00:32:20.056 --> 00:32:22.506 A:middle
and worst-case scenarios for
when you'll be scheduled.

00:32:23.236 --> 00:32:25.446 A:middle
Now, I'd like to share
a quick case study

00:32:25.586 --> 00:32:27.306 A:middle
on how we adopted
background refresh

00:32:27.536 --> 00:32:28.626 A:middle
in our stocks application.

00:32:30.436 --> 00:32:33.376 A:middle
So before we even got
started writing any code,

00:32:34.266 --> 00:32:38.156 A:middle
we took a step back and thought
about the characteristics

00:32:38.466 --> 00:32:40.326 A:middle
that are interesting
for background refresh

00:32:40.636 --> 00:32:41.776 A:middle
for our stocks application.

00:32:43.416 --> 00:32:49.836 A:middle
We use a URLSession to retrieve
server data, and we're going

00:32:49.836 --> 00:32:51.056 A:middle
to have a complication.

00:32:51.736 --> 00:32:54.176 A:middle
This means that we know
that we have multiple views

00:32:54.176 --> 00:32:55.566 A:middle
of our data across the system.

00:32:55.566 --> 00:32:57.916 A:middle
With our complication,
our snapshot,

00:32:58.586 --> 00:33:01.006 A:middle
and now our live application.

00:32:58.586 --> 00:33:01.006 A:middle
and now our live application.

00:33:03.716 --> 00:33:04.936 A:middle
We know that we want

00:33:05.396 --> 00:33:08.116 A:middle
to be periodic throughout
part of the day.

00:33:08.716 --> 00:33:11.236 A:middle
We want to get regular
updates for our application,

00:33:12.636 --> 00:33:14.346 A:middle
but then we know something
interesting about our data,

00:33:14.756 --> 00:33:17.896 A:middle
which is that once the
markets closed, our data's good

00:33:17.896 --> 00:33:18.906 A:middle
for the rest of the day.

00:33:19.276 --> 00:33:20.506 A:middle
It's not going to change at all.

00:33:21.106 --> 00:33:23.566 A:middle
Well, let's talk about how this
looks like throughout the day.

00:33:24.956 --> 00:33:27.456 A:middle
So let's say our device boots.

00:33:27.766 --> 00:33:30.706 A:middle
The system is going to ask our
application for a snapshot.

00:33:31.686 --> 00:33:33.976 A:middle
So we'll load our last data,
and we'll prepare our UI,

00:33:34.136 --> 00:33:36.016 A:middle
but before we complete
our snapshot task,

00:33:36.426 --> 00:33:39.856 A:middle
we're going to schedule a
background at URLSession task.

00:33:40.336 --> 00:33:41.546 A:middle
Now this is our opportunity

00:33:41.786 --> 00:33:45.086 A:middle
to start the background
refresh cycle, and make sure

00:33:45.086 --> 00:33:47.946 A:middle
that we can download the most
up-to-date data for our users.

00:33:49.016 --> 00:33:52.896 A:middle
Now we're going to use an
NSURLSession DownloadTask

00:33:53.606 --> 00:33:56.586 A:middle
so that we can give
the system information

00:33:56.586 --> 00:33:58.066 A:middle
about what data we
want to download,

00:33:58.466 --> 00:34:01.226 A:middle
and the system can put
our application to sleep

00:33:58.466 --> 00:34:01.226 A:middle
and the system can put
our application to sleep

00:34:01.226 --> 00:34:02.636 A:middle
and download our data
in the background.

00:34:04.056 --> 00:34:08.906 A:middle
Now URLSession DataTask does
work on a background session,

00:34:09.196 --> 00:34:13.556 A:middle
however, it will fail if your
background app or it will fail

00:34:13.886 --> 00:34:15.636 A:middle
when your application
gets suspended.

00:34:15.966 --> 00:34:19.926 A:middle
And because of the time
limits for background refresh,

00:34:19.926 --> 00:34:21.476 A:middle
your application is likely going

00:34:21.476 --> 00:34:23.795 A:middle
to suspend before your
data is available.

00:34:23.985 --> 00:34:26.966 A:middle
So we could recommend
using the download task.

00:34:28.016 --> 00:34:30.996 A:middle
So a little bit later,
the system is going

00:34:30.996 --> 00:34:32.045 A:middle
to wake our application

00:34:32.045 --> 00:34:33.516 A:middle
up because we finished
our download.

00:34:34.476 --> 00:34:36.045 A:middle
So we're going to
update our model,

00:34:36.295 --> 00:34:37.726 A:middle
and because we've
updated our model,

00:34:37.926 --> 00:34:39.386 A:middle
we're going to do three things.

00:34:39.946 --> 00:34:42.126 A:middle
We're going to trigger
a complication update,

00:34:43.206 --> 00:34:44.826 A:middle
and we're also going
to tell the system

00:34:44.826 --> 00:34:46.916 A:middle
that our snapshot
is invalid by asking

00:34:46.916 --> 00:34:50.436 A:middle
for a new snapshot right now,
and then we're also going

00:34:50.436 --> 00:34:53.416 A:middle
to evaluate what our next
background refresh needs are.

00:34:54.056 --> 00:34:56.786 A:middle
So we'll figure out what the
next time we want to run is,

00:34:56.846 --> 00:34:59.036 A:middle
and we'll tell the system that.

00:34:59.216 --> 00:35:02.936 A:middle
Now a little bit later, we get
to run for background refresh,

00:34:59.216 --> 00:35:02.936 A:middle
Now a little bit later, we get
to run for background refresh,

00:35:03.316 --> 00:35:05.656 A:middle
and all we're doing here
is scheduling our next

00:35:05.656 --> 00:35:06.786 A:middle
URLSession download.

00:35:07.696 --> 00:35:11.596 A:middle
So we complete this cycle
several times thoughout the day.

00:35:12.726 --> 00:35:14.356 A:middle
Just keeping our
application up to date,

00:35:14.356 --> 00:35:16.926 A:middle
the system will snapshot us, and
if the user views our snapshot

00:35:16.926 --> 00:35:20.286 A:middle
in the dock, we'll have the
most recent data available

00:35:20.286 --> 00:35:20.966 A:middle
in our snapshot.

00:35:22.616 --> 00:35:25.376 A:middle
Well, let's say that the user
activates our app from the dock.

00:35:26.066 --> 00:35:28.666 A:middle
So we go full screen,
and we want to make sure

00:35:28.666 --> 00:35:30.436 A:middle
that our users have the
most up-to-date data.

00:35:30.746 --> 00:35:34.096 A:middle
So we'll download the
most up-to-date data again

00:35:34.426 --> 00:35:35.656 A:middle
because we've entered
the foreground.

00:35:36.216 --> 00:35:40.636 A:middle
And, and once we've updated our
model, we still do three things.

00:35:40.846 --> 00:35:42.286 A:middle
We request a complication
update,

00:35:42.906 --> 00:35:44.096 A:middle
we request a new snapshot,

00:35:44.096 --> 00:35:46.976 A:middle
and then we schedule a
background refresh again

00:35:46.976 --> 00:35:47.666 A:middle
for a later time.

00:35:47.666 --> 00:35:49.606 A:middle
Now there's two things I
want to point out here.

00:35:50.206 --> 00:35:51.816 A:middle
First of all, we're
in the foreground,

00:35:51.946 --> 00:35:53.566 A:middle
but we're still requesting
a new snapshot.

00:35:54.326 --> 00:35:57.396 A:middle
This is absolutely okay, and we
really expect you to do this.

00:35:57.756 --> 00:35:59.766 A:middle
We want you to request a
new snapshot whenever your

00:35:59.766 --> 00:36:00.536 A:middle
model changes.

00:35:59.766 --> 00:36:00.536 A:middle
model changes.

00:36:00.786 --> 00:36:02.186 A:middle
The system is smart
enough to know

00:36:02.186 --> 00:36:03.516 A:middle
when your application's
foreground,

00:36:03.986 --> 00:36:08.186 A:middle
and when it's not okay for us
to send you a snapshot task.

00:36:08.316 --> 00:36:10.996 A:middle
The second thing is because
we run in the foreground

00:36:11.596 --> 00:36:14.276 A:middle
and updated our model,
it makes sense for us

00:36:14.276 --> 00:36:16.296 A:middle
to evaluate our next
before refresh needs.

00:36:16.886 --> 00:36:18.946 A:middle
If we knew that we were
probably going to run

00:36:18.946 --> 00:36:21.346 A:middle
in the next ten minutes, but
we've just downloaded our data,

00:36:22.436 --> 00:36:26.076 A:middle
we can defer our snap, or we
can defer our background refresh

00:36:26.076 --> 00:36:29.546 A:middle
request with the system
to maximize the amount

00:36:29.546 --> 00:36:30.716 A:middle
of time that we get to run.

00:36:31.016 --> 00:36:33.056 A:middle
To maximize the number

00:36:33.056 --> 00:36:37.116 A:middle
of opportunities
that we get to run.

00:36:37.206 --> 00:36:39.966 A:middle
Finally, the last update
after market closes.

00:36:41.296 --> 00:36:42.966 A:middle
We know our data stopped
changing for the day,

00:36:44.056 --> 00:36:45.636 A:middle
but we'll complete
our update as normal.

00:36:45.996 --> 00:36:47.806 A:middle
This means updating
our complication,

00:36:48.526 --> 00:36:49.786 A:middle
requesting a new snapshot,

00:36:50.476 --> 00:36:53.416 A:middle
and then evaluating our
background refresh needs.

00:36:54.616 --> 00:36:57.446 A:middle
So because we know our data
stopped updating for the day,

00:36:57.856 --> 00:36:59.096 A:middle
that we can't have stale data

00:36:59.096 --> 00:37:01.066 A:middle
in our complications
or our snapshots.

00:36:59.096 --> 00:37:01.066 A:middle
in our complications
or our snapshots.

00:37:02.396 --> 00:37:05.046 A:middle
We can wait until
the next market open

00:37:05.196 --> 00:37:06.936 A:middle
for the next background
refresh opportunity.

00:37:08.516 --> 00:37:12.126 A:middle
This lets our application get
out of the way of the system

00:37:12.466 --> 00:37:14.456 A:middle
and not do any unnecessary work,

00:37:15.046 --> 00:37:17.026 A:middle
which means that there's
more refresh tasks

00:37:17.026 --> 00:37:21.586 A:middle
for other applications
on the system.

00:37:21.586 --> 00:37:25.136 A:middle
So to summarize,
complete your tasks.

00:37:25.476 --> 00:37:27.686 A:middle
It's absolutely critical
to complete your tasks.

00:37:27.916 --> 00:37:30.366 A:middle
If you don't, in a future
seed, the system is going

00:37:30.366 --> 00:37:31.416 A:middle
to kill your application.

00:37:31.716 --> 00:37:33.266 A:middle
If the system kills
your application,

00:37:33.786 --> 00:37:37.676 A:middle
users won't have the quick
response times in the dock

00:37:37.676 --> 00:37:38.546 A:middle
that they're expecting,

00:37:39.016 --> 00:37:42.636 A:middle
and users will take your
applications out of the dock.

00:37:42.826 --> 00:37:45.116 A:middle
Use all the runtime that
you get efficiently.

00:37:45.256 --> 00:37:48.776 A:middle
Consider foreground activations,
notifications, ClockKit, and,

00:37:48.776 --> 00:37:51.556 A:middle
of course, the background
refresh opportunities to run.

00:37:52.126 --> 00:37:53.256 A:middle
Anytime you get runtime,

00:37:53.856 --> 00:37:56.656 A:middle
make sure that you consider
keeping your model up to date

00:37:57.016 --> 00:38:01.246 A:middle
and evaluating your background
refresh needs with the system.

00:37:57.016 --> 00:38:01.246 A:middle
and evaluating your background
refresh needs with the system.

00:38:01.356 --> 00:38:03.176 A:middle
Tell the system when
your data changes.

00:38:04.136 --> 00:38:07.356 A:middle
Your complication and your
application snapshot are both

00:38:07.356 --> 00:38:11.306 A:middle
system-owned caches of
your application's data.

00:38:12.736 --> 00:38:15.886 A:middle
The system needs to know when
that data is no longer valid

00:38:16.586 --> 00:38:18.896 A:middle
so that we won't display the
wrong things for the user.

00:38:19.686 --> 00:38:23.646 A:middle
Users expect to see consistent
data no matter how they view

00:38:23.646 --> 00:38:24.646 A:middle
your application's data.

00:38:25.276 --> 00:38:27.736 A:middle
And, finally, you need

00:38:27.736 --> 00:38:29.236 A:middle
to consider your
adoption strategies

00:38:29.236 --> 00:38:30.586 A:middle
on a case-by-case basis.

00:38:30.906 --> 00:38:32.526 A:middle
There is no one size
fits all solution.

00:38:32.666 --> 00:38:35.896 A:middle
You have to really consider how
users are using your application

00:38:36.286 --> 00:38:38.056 A:middle
and interesting characteristics
about your data

00:38:38.496 --> 00:38:40.556 A:middle
for how you plan your
background refresh strategy.

00:38:41.856 --> 00:38:44.536 A:middle
For more information, you
can visit this website,

00:38:45.466 --> 00:38:49.896 A:middle
and there is some great related
sessions this afternoon at 3:00,

00:38:49.896 --> 00:38:51.826 A:middle
Architecting for
Performance on watchOS 3.

00:38:51.826 --> 00:38:53.736 A:middle
We'll go into some more
detail about what we did

00:38:53.736 --> 00:38:54.786 A:middle
in the stocks application.

00:38:55.016 --> 00:38:56.086 A:middle
Thank you very much.
