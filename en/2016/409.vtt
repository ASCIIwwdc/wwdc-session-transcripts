WEBVTT

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:29.516 --> 00:00:36.046 A:middle
[ Applause ]

00:00:36.546 --> 00:00:37.556 A:middle
&gt;&gt; Good afternoon, everyone.

00:00:39.026 --> 00:00:39.946 A:middle
My name is Zoltan.

00:00:40.686 --> 00:00:42.996 A:middle
Later my colleague, Eric,
will join me on stage.

00:00:44.486 --> 00:00:47.986 A:middle
We're both engineers
with the Xcode team.

00:00:49.596 --> 00:00:52.066 A:middle
Software development
these days is a lot

00:00:52.066 --> 00:00:53.316 A:middle
like conducting an orchestra.

00:00:54.546 --> 00:00:58.726 A:middle
You and I maintain suites
of tests, and when one

00:00:58.726 --> 00:01:00.446 A:middle
of them is not performing well,

00:00:58.726 --> 00:01:00.446 A:middle
of them is not performing well,

00:01:01.086 --> 00:01:05.166 A:middle
we need to quickly understand
the issue and correct it.

00:01:05.766 --> 00:01:10.626 A:middle
Okay. Maybe you're a
testing maestro with hundreds

00:01:10.626 --> 00:01:13.456 A:middle
of thousands of tests.

00:01:13.606 --> 00:01:16.906 A:middle
Well, Xcode has tools
and techniques

00:01:17.016 --> 00:01:19.586 A:middle
to conduct even the
largest test suite,

00:01:20.606 --> 00:01:24.016 A:middle
and today we're going
to show you how.

00:01:24.966 --> 00:01:26.786 A:middle
First, we're going to
introduce some concepts

00:01:26.786 --> 00:01:30.786 A:middle
that haven't been addressed in
previous sessions, and then,

00:01:32.146 --> 00:01:34.566 A:middle
we'll introduce some
new features in Xcode,

00:01:35.216 --> 00:01:41.586 A:middle
in Xcode Server, in particular,

00:01:41.906 --> 00:01:43.506 A:middle
the configurable
integration user.

00:01:44.116 --> 00:01:48.246 A:middle
And then, we'll conclude with
some new features in xcodebuild.

00:01:48.986 --> 00:01:49.956 A:middle
Let's get started.

00:01:58.216 --> 00:02:01.286 A:middle
So, as a brief recap of testing,
you can think of testing

00:01:58.216 --> 00:02:01.286 A:middle
So, as a brief recap of testing,
you can think of testing

00:02:01.286 --> 00:02:02.746 A:middle
as these four characters.

00:02:04.026 --> 00:02:05.546 A:middle
There's XC test.

00:02:07.496 --> 00:02:09.946 A:middle
That's the framework
for your tests

00:02:11.376 --> 00:02:13.856 A:middle
for both Objective-C
and for Swift.

00:02:14.946 --> 00:02:18.936 A:middle
And your tests are compiled
to bundles before they're run.

00:02:21.436 --> 00:02:25.426 A:middle
Xcode, that's the IDE
for authoring your tests,

00:02:26.076 --> 00:02:30.016 A:middle
and you can also run individual
test while you're developing.

00:02:33.056 --> 00:02:36.016 A:middle
Xcode is also where
you review reports

00:02:36.216 --> 00:02:39.276 A:middle
from both local test runs
and from Xcode Server.

00:02:41.126 --> 00:02:42.816 A:middle
And talking about Xcode Server,

00:02:43.876 --> 00:02:46.366 A:middle
that's the continuous
integration solution

00:02:46.366 --> 00:02:47.256 A:middle
for your tests.

00:02:48.666 --> 00:02:51.336 A:middle
You set up bots to
periodically run your tests,

00:02:52.126 --> 00:02:55.136 A:middle
and Xcode Server will
generate reports for you.

00:02:55.956 --> 00:02:59.046 A:middle
And if something goes
wrong, it'll notify you.

00:02:59.966 --> 00:03:02.776 A:middle
There's a great way to keep
track of your project over time.

00:02:59.966 --> 00:03:02.776 A:middle
There's a great way to keep
track of your project over time.

00:03:06.316 --> 00:03:09.186 A:middle
So, Xcode Server is built
on top of xcodebuild,

00:03:10.646 --> 00:03:13.846 A:middle
and you can use xcodebuild
on the command line, too.

00:03:14.246 --> 00:03:17.896 A:middle
You can run tests and see
results in the console.

00:03:21.376 --> 00:03:25.366 A:middle
Xcodebuild is the
building block for custom,

00:03:25.366 --> 00:03:27.666 A:middle
continuous integration
systems, as we'll see later.

00:03:29.876 --> 00:03:32.166 A:middle
So, you can learn more
about these four characters

00:03:32.166 --> 00:03:33.406 A:middle
in our previous sessions.

00:03:34.226 --> 00:03:37.416 A:middle
But, today, we want to
look at some concepts

00:03:37.416 --> 00:03:38.796 A:middle
that we haven't covered before.

00:03:39.476 --> 00:03:41.476 A:middle
We want to take you
behind the scenes

00:03:41.906 --> 00:03:44.466 A:middle
and show you exactly how
your tests are running.

00:03:46.166 --> 00:03:49.426 A:middle
And to do that, it helps
to think of a timeline.

00:03:50.066 --> 00:03:55.186 A:middle
After your tests are
compiled, they must be hosted.

00:03:56.206 --> 00:03:59.196 A:middle
That gets the test
started in the first place.

00:04:00.556 --> 00:04:02.006 A:middle
And then, once the
tests are running,

00:04:02.586 --> 00:04:04.606 A:middle
you can see detailed progress

00:04:05.086 --> 00:04:08.506 A:middle
in your tests using a
technique known as observation.

00:04:08.936 --> 00:04:10.786 A:middle
So, we're going to look
at these two concepts,

00:04:10.786 --> 00:04:12.056 A:middle
hosting and observation.

00:04:13.346 --> 00:04:14.656 A:middle
Let's look at hosting first.

00:04:16.096 --> 00:04:18.636 A:middle
So, the hosting story,
it's different depending

00:04:18.636 --> 00:04:21.946 A:middle
on whether you have
unit tests or UI tests.

00:04:23.476 --> 00:04:28.066 A:middle
So, for unit tests, your test
bundle is loaded directly

00:04:28.066 --> 00:04:29.196 A:middle
into your application.

00:04:29.856 --> 00:04:33.126 A:middle
And, in this case, we
call your application the

00:04:33.206 --> 00:04:34.176 A:middle
host application.

00:04:35.996 --> 00:04:40.396 A:middle
But for your UI tests, your test
bundle is going to get loaded

00:04:40.396 --> 00:04:44.946 A:middle
into a UI test runner which is
separate from your application.

00:04:46.156 --> 00:04:48.656 A:middle
And in this case, we
refer to your application

00:04:48.656 --> 00:04:50.086 A:middle
as the target application.

00:04:50.816 --> 00:04:53.116 A:middle
Now, this has some implications.

00:04:56.356 --> 00:04:59.606 A:middle
For your unit tests, you
will have direct access

00:04:59.606 --> 00:05:03.826 A:middle
to your applications
data structures and API,

00:04:59.606 --> 00:05:03.826 A:middle
to your applications
data structures and API,

00:05:04.076 --> 00:05:07.846 A:middle
but for your UI tests, you have

00:05:07.906 --> 00:05:12.196 A:middle
to access your application using
accessibility and send events

00:05:12.406 --> 00:05:15.906 A:middle
and see your application as a
user would from the outside.

00:05:19.916 --> 00:05:23.156 A:middle
For your unit tests, all
your tests are going to run

00:05:23.896 --> 00:05:26.246 A:middle
in the same launch of
the host application.

00:05:26.736 --> 00:05:28.656 A:middle
So, you should be
careful to clean

00:05:28.656 --> 00:05:30.956 A:middle
up between test invocations.

00:05:31.366 --> 00:05:36.746 A:middle
But for your UI tests,
your tests can terminate

00:05:36.746 --> 00:05:38.296 A:middle
and relaunch the application.

00:05:38.806 --> 00:05:39.816 A:middle
So, that's great if you want

00:05:39.816 --> 00:05:43.326 A:middle
to test how your
application starts up.

00:05:45.726 --> 00:05:47.006 A:middle
Okay. That's hosting.

00:05:47.616 --> 00:05:49.846 A:middle
That's how your test gets
started in the first place,

00:05:50.386 --> 00:05:53.136 A:middle
and once your tests are running,

00:05:53.846 --> 00:05:56.046 A:middle
then you can use a
technique known as observation

00:05:56.046 --> 00:05:58.716 A:middle
to see detailed progress
in your tests.

00:05:59.796 --> 00:06:01.796 A:middle
So, let's zoom in
on that timeline.

00:05:59.796 --> 00:06:01.796 A:middle
So, let's zoom in
on that timeline.

00:06:04.196 --> 00:06:07.846 A:middle
Here you can see two test cases,
one running after the other.

00:06:08.336 --> 00:06:11.196 A:middle
And these test cases
belong to a test suite.

00:06:12.596 --> 00:06:15.756 A:middle
Test suite corresponds to a
test class you've written.

00:06:17.196 --> 00:06:20.116 A:middle
And you'll have multiple test
suites in your test bundle.

00:06:22.306 --> 00:06:23.616 A:middle
And maybe you're interested

00:06:23.616 --> 00:06:26.686 A:middle
in doing some setup work
before any of these tests run.

00:06:27.406 --> 00:06:29.256 A:middle
Or perhaps doing
some tear down work

00:06:29.626 --> 00:06:31.106 A:middle
after all the tests
have finished.

00:06:31.796 --> 00:06:33.436 A:middle
Or maybe you're interested

00:06:33.436 --> 00:06:35.916 A:middle
in doing some custom
logging while the tests run.

00:06:38.416 --> 00:06:42.256 A:middle
Well, you can do that with the
XCTestObservation Protocol.

00:06:43.186 --> 00:06:45.696 A:middle
You write an object that
conforms to this protocol,

00:06:46.096 --> 00:06:49.216 A:middle
and after registering it with
a shared observation center,

00:06:50.416 --> 00:06:52.346 A:middle
your object will
receive call backs.

00:06:53.806 --> 00:06:56.566 A:middle
So, for instance, before
any of the tests start,

00:06:56.776 --> 00:07:00.266 A:middle
you'll get this BundleWillStart
call back.

00:06:56.776 --> 00:07:00.266 A:middle
you'll get this BundleWillStart
call back.

00:07:00.346 --> 00:07:03.286 A:middle
And then, before
the suite starts,

00:07:03.676 --> 00:07:07.386 A:middle
you'll get a SuiteWillStart
call back.

00:07:08.416 --> 00:07:10.986 A:middle
Then, for every test
case that runs,

00:07:11.616 --> 00:07:16.176 A:middle
you'll get this
testCaseWillStart call back

00:07:16.176 --> 00:07:19.866 A:middle
and testCaseDidFinish call back.

00:07:21.556 --> 00:07:22.896 A:middle
If something goes awry,

00:07:23.506 --> 00:07:26.966 A:middle
you'll get this testCaseDidFail
call back.

00:07:27.866 --> 00:07:30.346 A:middle
And then, as the
tests are wrapping up,

00:07:31.156 --> 00:07:33.276 A:middle
you'll get this
testSuiteDidFinish call back,

00:07:34.096 --> 00:07:36.366 A:middle
and your final chance
to do any work is

00:07:36.366 --> 00:07:40.466 A:middle
in this testBundleWillFinish
call back.

00:07:43.576 --> 00:07:45.036 A:middle
So, here's an example.

00:07:46.346 --> 00:07:49.006 A:middle
This object conforms to
XCTestObservation Protocol.

00:07:49.826 --> 00:07:52.376 A:middle
In the object initializer,
I'm going to register

00:07:52.376 --> 00:07:54.046 A:middle
with a shared observation
center.

00:07:55.016 --> 00:07:57.546 A:middle
Then, as the tests progress,

00:07:57.896 --> 00:08:00.356 A:middle
I'm going to log
events, such as this one.

00:07:57.896 --> 00:08:00.356 A:middle
I'm going to log
events, such as this one.

00:08:01.976 --> 00:08:08.176 A:middle
When things go wrong with the
test, I'm going to log this.

00:08:08.396 --> 00:08:13.456 A:middle
And then, once the show is
over, I'll log that, too.

00:08:13.696 --> 00:08:17.026 A:middle
So, an ideal place to
set up this observer is

00:08:17.026 --> 00:08:19.596 A:middle
in your test bundles info.plist.

00:08:19.966 --> 00:08:23.906 A:middle
So, you do that using
Xcode's info.plist editor.

00:08:24.496 --> 00:08:27.486 A:middle
You add this NS principal
class entry,

00:08:28.066 --> 00:08:34.596 A:middle
and this is a test specific
instantiation for your observer.

00:08:35.846 --> 00:08:38.635 A:middle
It's independent of the
class load initializer.

00:08:42.496 --> 00:08:45.256 A:middle
Okay. That's hosting
and observation.

00:08:45.796 --> 00:08:48.696 A:middle
They're useful concepts to help
understand exactly how your

00:08:48.696 --> 00:08:50.316 A:middle
tests are running
behind the scenes

00:08:50.316 --> 00:08:55.436 A:middle
and to help you diagnose
issues with your tests.

00:08:55.676 --> 00:08:57.286 A:middle
Let's look at some new
features in Xcode 8.

00:08:59.976 --> 00:09:03.126 A:middle
Crashes are a frequent
source of failures in tests,

00:08:59.976 --> 00:09:03.126 A:middle
Crashes are a frequent
source of failures in tests,

00:09:04.036 --> 00:09:07.826 A:middle
and the crashes can be in
both your host application

00:09:08.146 --> 00:09:09.726 A:middle
and the target application.

00:09:11.546 --> 00:09:15.566 A:middle
So, normally, Xcode will
relaunch your host application

00:09:15.566 --> 00:09:16.896 A:middle
to complete your test suite.

00:09:17.676 --> 00:09:21.996 A:middle
But it's up to you to gather
the diagnostics necessary

00:09:21.996 --> 00:09:25.456 A:middle
to resolve the crash.

00:09:25.636 --> 00:09:29.566 A:middle
I'm please to say that
this year, Xcode is going

00:09:29.566 --> 00:09:30.986 A:middle
to help with this issue.

00:09:31.526 --> 00:09:34.766 A:middle
We will now gather the crash
logs for you in the test report.

00:09:35.866 --> 00:09:41.456 A:middle
So, this is both for UI
and unit tests, for local

00:09:41.456 --> 00:09:44.486 A:middle
and server runs of your tests.

00:09:44.486 --> 00:09:47.896 A:middle
The crash logs will be
collected in the test report.

00:09:48.426 --> 00:09:50.866 A:middle
And you can see the
textual representation

00:09:50.866 --> 00:09:55.666 A:middle
of the crash there, or you
can choose to see the crash

00:09:55.666 --> 00:09:57.306 A:middle
in the context of your source.

00:09:57.366 --> 00:09:59.766 A:middle
And I'd like to show
you that now.

00:10:02.316 --> 00:10:03.606 A:middle
Eric and I have been
moonlighting.

00:10:04.606 --> 00:10:07.736 A:middle
We've been working on a tvOS
application in our spare time.

00:10:08.226 --> 00:10:09.446 A:middle
So, I'll run the application

00:10:09.446 --> 00:10:10.976 A:middle
by control clicking
on the Run button.

00:10:18.176 --> 00:10:21.226 A:middle
It's an application
defined nearby concerts

00:10:21.226 --> 00:10:24.116 A:middle
with some strangely
test related band names.

00:10:25.056 --> 00:10:27.596 A:middle
I can move in the
simulator using the keys

00:10:27.596 --> 00:10:30.376 A:middle
on the keyboard here.

00:10:31.766 --> 00:10:34.086 A:middle
So, we're adding a new
feature to this application

00:10:34.536 --> 00:10:37.506 A:middle
to support users who have
location services disabled.

00:10:37.926 --> 00:10:40.876 A:middle
Let me show you what it's
like for those users.

00:10:45.046 --> 00:10:51.556 A:middle
I'll go to the settings
menu, and in privacy,

00:10:52.516 --> 00:10:53.976 A:middle
I'll disable location services.

00:11:00.046 --> 00:11:05.436 A:middle
So, now, back in Xcode, we've
added a new ViewController

00:11:05.436 --> 00:11:06.846 A:middle
to support those users.

00:11:07.566 --> 00:11:08.966 A:middle
They can enter in a zip code.

00:11:10.586 --> 00:11:14.676 A:middle
Let me just add one more
test for this ViewController.

00:11:21.346 --> 00:11:24.316 A:middle
So, I want these tests to
run in a scheme on their own.

00:11:26.246 --> 00:11:28.256 A:middle
So, I'm going to go
to the scheme menu,

00:11:28.756 --> 00:11:30.926 A:middle
and I'll duplicate
this existing scheme.

00:11:36.336 --> 00:11:37.576 A:middle
I'll call this something
meaningful.

00:11:42.236 --> 00:11:44.686 A:middle
And, in the settings
for the test action,

00:11:45.256 --> 00:11:47.236 A:middle
I'm going to disable
the debugger.

00:11:48.136 --> 00:11:51.126 A:middle
So, that's a technique to
avoid interrupting the tests.

00:11:52.186 --> 00:11:55.126 A:middle
It allows all the tests
to run to completion

00:11:55.126 --> 00:11:57.476 A:middle
without breaking
into the debugger.

00:11:58.066 --> 00:12:00.736 A:middle
And it's similar to how your
tests run on Xcode Server.

00:11:58.066 --> 00:12:00.736 A:middle
And it's similar to how your
tests run on Xcode Server.

00:12:00.736 --> 00:12:05.206 A:middle
So, I'll disable tests
that are not related

00:12:05.206 --> 00:12:06.446 A:middle
to location services.

00:12:08.896 --> 00:12:10.266 A:middle
I'll share the scheme.

00:12:14.096 --> 00:12:15.976 A:middle
And then, I'll run the
test with Command U.

00:12:33.056 --> 00:12:35.446 A:middle
So, here's a new
ViewController for users

00:12:35.446 --> 00:12:37.266 A:middle
who have location
services disabled.

00:12:38.306 --> 00:12:42.166 A:middle
They can choose to
enter a zip code.

00:12:42.376 --> 00:12:44.816 A:middle
So, right now, the tests
are entering a zip code,

00:12:52.076 --> 00:12:55.136 A:middle
and that's an unexpected crash.

00:12:56.126 --> 00:12:59.256 A:middle
So, right now, Xcode has
gathered the crash log,

00:12:59.526 --> 00:13:01.516 A:middle
and it's reported
the test failure.

00:12:59.526 --> 00:13:01.516 A:middle
and it's reported
the test failure.

00:13:01.516 --> 00:13:05.026 A:middle
And, let's have a look at that.

00:13:05.026 --> 00:13:08.166 A:middle
So, here's the failed
test, and I can click

00:13:08.166 --> 00:13:10.596 A:middle
to jump to the test report.

00:13:12.276 --> 00:13:14.706 A:middle
I'll disclose the
test transcript.

00:13:16.086 --> 00:13:19.296 A:middle
Here's the events as the tests
were entering in the zip code,

00:13:19.906 --> 00:13:22.096 A:middle
and here at the bottom
is the crash.

00:13:24.136 --> 00:13:26.866 A:middle
Now, I can click to see
the textual representation

00:13:26.866 --> 00:13:30.026 A:middle
of this crash, but in this case,
I want to show you the crash

00:13:30.026 --> 00:13:31.716 A:middle
in the context of the source.

00:13:32.206 --> 00:13:33.726 A:middle
So, I'll click on
this arrow here.

00:13:35.176 --> 00:13:39.596 A:middle
So, here's the exact line
that the crash occurred on.

00:13:39.686 --> 00:13:43.166 A:middle
And you can see in the
top left, the stack frames

00:13:43.166 --> 00:13:44.436 A:middle
in the debug navigator.

00:13:47.016 --> 00:13:51.286 A:middle
Now, I can see the crash
in the context of my source

00:13:51.286 --> 00:13:52.396 A:middle
and diagnose the issue.

00:13:53.796 --> 00:13:55.336 A:middle
So, I happen to know
that I'm referring

00:13:55.336 --> 00:13:56.886 A:middle
to the wrong ViewController
here.

00:13:57.356 --> 00:14:00.496 A:middle
Instead of parent, this should
be presenting ViewController.

00:13:57.356 --> 00:14:00.496 A:middle
Instead of parent, this should
be presenting ViewController.

00:14:01.936 --> 00:14:05.916 A:middle
So, I'll make that change,
and now, I'll rerun the test

00:14:05.916 --> 00:14:09.976 A:middle
by going to the test navigator
and clicking on this icon here.

00:14:16.396 --> 00:14:18.626 A:middle
So, earlier, I showed
you the test report

00:14:18.626 --> 00:14:22.916 A:middle
for a local test run, but that
report would look exactly the

00:14:22.916 --> 00:14:24.496 A:middle
same if it came from
Xcode Server.

00:14:28.586 --> 00:14:29.976 A:middle
So, now the tests are
reentering a zip code.

00:14:41.046 --> 00:14:43.296 A:middle
Great. So, these
tests have passed.

00:14:43.496 --> 00:14:47.986 A:middle
We would now check in this
tests and build confidence

00:14:47.986 --> 00:14:51.166 A:middle
that we're supporting users who
have location services disabled.

00:14:52.316 --> 00:14:54.296 A:middle
But, for now, let's
go back to slides.

00:14:56.616 --> 00:15:01.676 A:middle
So, you've seen how Xcode will
now gather crash logs for you

00:14:56.616 --> 00:15:01.676 A:middle
So, you've seen how Xcode will
now gather crash logs for you

00:15:02.026 --> 00:15:03.966 A:middle
and capture them
in the test report.

00:15:05.446 --> 00:15:07.576 A:middle
And you can choose to see
the textual representation

00:15:07.576 --> 00:15:12.856 A:middle
of those crashes, or
you can see the crashes

00:15:12.856 --> 00:15:14.556 A:middle
in the context of your source.

00:15:15.076 --> 00:15:17.606 A:middle
So, that's a great way
to diagnose the issue

00:15:18.126 --> 00:15:23.966 A:middle
and to make the fix right in
the context of your source.

00:15:24.206 --> 00:15:26.466 A:middle
So, we have some new
features in Xcode Server,

00:15:27.546 --> 00:15:30.396 A:middle
and to show you more,
please welcome my colleague,

00:15:30.786 --> 00:15:31.956 A:middle
Eric Dudiak, on stage.

00:15:32.516 --> 00:15:37.036 A:middle
[ Applause ]

00:15:37.536 --> 00:15:38.206 A:middle
&gt;&gt; Good afternoon.

00:15:38.246 --> 00:15:40.556 A:middle
I'm Eric Dudiak, and I'm
going to talk to you a bit

00:15:40.556 --> 00:15:44.626 A:middle
about Xcode Server and what
we have new in Xcode 8.

00:15:45.246 --> 00:15:46.826 A:middle
So, let's go over a
little bit of an overview

00:15:46.826 --> 00:15:48.126 A:middle
of what we're going
to talk about today

00:15:48.576 --> 00:15:50.136 A:middle
in Xcode 8 with Xcode Server.

00:15:50.966 --> 00:15:52.646 A:middle
So, we have custom
environment variables

00:15:52.646 --> 00:15:54.306 A:middle
that you can now
set per integration.

00:15:55.706 --> 00:15:57.716 A:middle
We have advanced
trigger editing workflow

00:15:57.716 --> 00:16:01.726 A:middle
that we've improved in Xcode 8.

00:15:57.716 --> 00:16:01.726 A:middle
that we've improved in Xcode 8.

00:16:03.166 --> 00:16:06.066 A:middle
We also have some enhancements
to issue tracking and blame

00:16:06.066 --> 00:16:07.796 A:middle
to make sure you get
notified of issues

00:16:07.796 --> 00:16:09.746 A:middle
as they come up on your bot.

00:16:10.426 --> 00:16:13.416 A:middle
And we'll see how that plays
with upgrade integrations,

00:16:13.416 --> 00:16:14.646 A:middle
a new feature we have for you.

00:16:14.646 --> 00:16:16.806 A:middle
And finally, we'll talk

00:16:16.806 --> 00:16:18.636 A:middle
about the configurable
integration user

00:16:18.736 --> 00:16:20.066 A:middle
which is new in Xcode
8, as well.

00:16:20.066 --> 00:16:22.856 A:middle
So, let's jump right
in, and let's talk

00:16:22.856 --> 00:16:24.196 A:middle
about custom environment
variables.

00:16:24.656 --> 00:16:25.826 A:middle
Now, this is a little
bit of a cheat.

00:16:25.826 --> 00:16:29.076 A:middle
It's actually new in Xcode
7.3, and it allows you

00:16:29.076 --> 00:16:31.456 A:middle
to configure the exact
environment that's passed

00:16:31.456 --> 00:16:32.746 A:middle
to xcodebuild on your bot.

00:16:33.046 --> 00:16:34.966 A:middle
And it controls how your
integrations are run there,

00:16:34.966 --> 00:16:37.446 A:middle
so you can configure any number
of settings that you might need

00:16:37.446 --> 00:16:39.746 A:middle
for your bot to run on
your server different

00:16:39.746 --> 00:16:40.656 A:middle
than you might have locally.

00:16:41.966 --> 00:16:44.136 A:middle
This is a great way to customize
how your server runs your

00:16:44.136 --> 00:16:46.426 A:middle
integrations, and it's a great
way to do that without having

00:16:46.426 --> 00:16:50.056 A:middle
to create a lot of extra
schemes in your project.

00:16:50.686 --> 00:16:52.286 A:middle
Now, on to what's
actually new in Xcode 8.

00:16:53.226 --> 00:16:56.186 A:middle
So, we've significantly improved
the trigger editing experience.

00:16:56.316 --> 00:16:59.366 A:middle
So, we have two types of
triggers, scripts and emails.

00:16:59.956 --> 00:17:01.726 A:middle
First, let's talk a little
bit about trigger scripts.

00:16:59.956 --> 00:17:01.726 A:middle
First, let's talk a little
bit about trigger scripts.

00:17:01.896 --> 00:17:03.506 A:middle
These run either
before your integration

00:17:03.906 --> 00:17:06.366 A:middle
or after your integration, and
they're normal shell scripts.

00:17:06.915 --> 00:17:09.326 A:middle
So, we've improved the editor
by giving you a lot more space

00:17:09.376 --> 00:17:12.486 A:middle
to see the scripts, and you
can actually see exactly what's

00:17:12.866 --> 00:17:15.126 A:middle
in them, so you have a lot
more visibility into that.

00:17:16.056 --> 00:17:18.866 A:middle
Along those lines, we also
now let you name triggers.

00:17:18.866 --> 00:17:20.056 A:middle
This is great if
you work on a team.

00:17:20.056 --> 00:17:23.806 A:middle
Your other teammates can see
exactly what each trigger is

00:17:23.806 --> 00:17:26.556 A:middle
supposed to be doing, and if you
have particularly long running

00:17:26.556 --> 00:17:28.586 A:middle
scripts that are part of
your integration triggers,

00:17:29.086 --> 00:17:31.246 A:middle
you will see that
called out in the status

00:17:31.246 --> 00:17:32.176 A:middle
as Xcode's integrating.

00:17:32.176 --> 00:17:34.236 A:middle
So, when you see a project
integrating into status UI,

00:17:34.236 --> 00:17:36.266 A:middle
you can actually see which
script it's currently running.

00:17:37.556 --> 00:17:39.976 A:middle
Finally, if you have a script
that you come up with later

00:17:39.976 --> 00:17:42.276 A:middle
that you actually really wish
was running before all your

00:17:42.276 --> 00:17:46.136 A:middle
other scripts, you can now
reorder triggers in this UI.

00:17:46.386 --> 00:17:49.606 A:middle
Simply add a new script
trigger, drag it to the top,

00:17:49.606 --> 00:17:53.446 A:middle
and it will become the
first to run on your bot.

00:17:53.656 --> 00:17:54.416 A:middle
Now, let's talk a little bit

00:17:54.416 --> 00:17:56.356 A:middle
about the other type
of trigger we have.

00:17:56.356 --> 00:17:57.696 A:middle
We have email notifications.

00:17:58.066 --> 00:17:59.326 A:middle
Historically, in Xcode Server,

00:17:59.326 --> 00:18:02.856 A:middle
this was always a one
email per integration setup

00:17:59.326 --> 00:18:02.856 A:middle
this was always a one
email per integration setup

00:18:02.856 --> 00:18:04.696 A:middle
which can leave you
with a lot of spam.

00:18:05.166 --> 00:18:08.156 A:middle
So, in order to help you and
reduce the amount of email

00:18:08.156 --> 00:18:10.946 A:middle
in your inbox, we've split
these types of triggers

00:18:10.946 --> 00:18:12.496 A:middle
up into two different types.

00:18:12.876 --> 00:18:15.566 A:middle
We still have the report
triggers or report emails

00:18:15.566 --> 00:18:17.466 A:middle
that come out every time
you run an integration.

00:18:17.886 --> 00:18:20.026 A:middle
Of alternatively, you
can now schedule them

00:18:20.446 --> 00:18:23.646 A:middle
to run just once every
day or once every week.

00:18:24.116 --> 00:18:25.756 A:middle
This way, no matter how
often your bot runs,

00:18:25.756 --> 00:18:27.706 A:middle
your email isn't flooded,

00:18:28.106 --> 00:18:29.836 A:middle
or your inbox isn't flooded
with a lot of emails.

00:18:29.836 --> 00:18:31.726 A:middle
And we think this is great
for managers who want to check

00:18:31.726 --> 00:18:33.736 A:middle
up on the health of
a bot continuously

00:18:34.086 --> 00:18:37.096 A:middle
but don't want all their inbox
to be filled with emails.

00:18:39.296 --> 00:18:40.426 A:middle
Additionally, we also, now,

00:18:40.426 --> 00:18:42.206 A:middle
let you configure certain
fields on the email.

00:18:42.206 --> 00:18:44.546 A:middle
So, you can configure
your cc field as well

00:18:44.546 --> 00:18:45.756 A:middle
as your reply to fields.

00:18:46.506 --> 00:18:48.866 A:middle
This lets you have a lot more
control over exactly the types

00:18:48.866 --> 00:18:50.466 A:middle
of emails you're sending out.

00:18:51.626 --> 00:18:53.506 A:middle
Now, I hinted a little bit
earlier that we actually, now,

00:18:53.506 --> 00:18:55.086 A:middle
have two different
types of email triggers.

00:18:55.086 --> 00:18:56.536 A:middle
The other is issues.

00:18:56.976 --> 00:18:58.036 A:middle
So, new issues come up.

00:18:58.036 --> 00:19:02.416 A:middle
We will now send you an email
to the people of interest

00:18:58.036 --> 00:19:02.416 A:middle
We will now send you an email
to the people of interest

00:19:02.416 --> 00:19:03.576 A:middle
for that particular issue.

00:19:03.696 --> 00:19:05.236 A:middle
We'll go over a little
bit of that in a minute.

00:19:05.916 --> 00:19:09.246 A:middle
But, if you do have more
committers that are part

00:19:09.246 --> 00:19:10.226 A:middle
of the code that
you're integrating

00:19:10.226 --> 00:19:11.616 A:middle
than you necessarily
want to email,

00:19:12.356 --> 00:19:14.016 A:middle
we do let you filter
recipients right here

00:19:14.016 --> 00:19:15.936 A:middle
to make sure you're emailing
just the people you want to be.

00:19:17.386 --> 00:19:18.896 A:middle
So, if we take a look at that.

00:19:20.386 --> 00:19:22.516 A:middle
If you have multiple
repositories, you can choose

00:19:23.006 --> 00:19:24.326 A:middle
to only send emails
to committers

00:19:24.326 --> 00:19:27.406 A:middle
from certain repositories,
or if you know exactly

00:19:27.406 --> 00:19:29.636 A:middle
which domains all the
email addresses will be

00:19:29.636 --> 00:19:31.106 A:middle
from that you want
to send emails to,

00:19:31.456 --> 00:19:35.196 A:middle
you can add those right here.

00:19:36.046 --> 00:19:38.286 A:middle
So, let's take a minute and
talk a little bit about issues

00:19:38.846 --> 00:19:40.256 A:middle
or build issues anyways.

00:19:41.196 --> 00:19:44.656 A:middle
And, nobody is perfect and
writes perfect code every time.

00:19:44.656 --> 00:19:46.436 A:middle
That's the whole reason we
have continuous integration.

00:19:46.436 --> 00:19:47.846 A:middle
That's why we have unit tests.

00:19:48.436 --> 00:19:50.146 A:middle
We have unit tests
because we know

00:19:50.146 --> 00:19:51.386 A:middle
that they will inevitably fail.

00:19:51.386 --> 00:19:53.196 A:middle
That's why we write
them in the first place.

00:19:54.106 --> 00:19:56.946 A:middle
We also, occasionally, commit
code that just doesn't build,

00:19:56.946 --> 00:19:59.256 A:middle
and some of us don't
check it before we commit,

00:19:59.256 --> 00:20:01.586 A:middle
and that's exactly
the kind of thing

00:19:59.256 --> 00:20:01.586 A:middle
and that's exactly
the kind of thing

00:20:01.856 --> 00:20:03.776 A:middle
that continuous integration
is great at catching.

00:20:04.206 --> 00:20:07.496 A:middle
And, in these types of cases,
Xcode will send you an email

00:20:07.496 --> 00:20:09.096 A:middle
and notify you that
you broke your build.

00:20:09.986 --> 00:20:12.076 A:middle
But those aren't the only
issues that can come up.

00:20:13.156 --> 00:20:15.216 A:middle
Sometimes, even if you write
absolutely perfect code,

00:20:15.216 --> 00:20:16.546 A:middle
things can change around you.

00:20:17.626 --> 00:20:20.256 A:middle
That can be when you install a
new Xcode, you get a whole bunch

00:20:20.256 --> 00:20:21.086 A:middle
of other new features, too.

00:20:21.086 --> 00:20:23.716 A:middle
You get new SDKs that might
have new deprecations.

00:20:24.466 --> 00:20:26.566 A:middle
You might get new issues
from language improvements.

00:20:27.086 --> 00:20:29.376 A:middle
And, we like to make
sure that every Xcode

00:20:29.376 --> 00:20:31.606 A:middle
that we ship is smarter than
the Xcode we shipped before.

00:20:31.606 --> 00:20:34.716 A:middle
So, you might see issues
that we didn't find before

00:20:34.716 --> 00:20:36.486 A:middle
that have always been
there that Xcode now tracks

00:20:36.486 --> 00:20:37.816 A:middle
such as static analysis issues.

00:20:40.876 --> 00:20:41.956 A:middle
So, the important
thing when you see one

00:20:41.956 --> 00:20:42.946 A:middle
of these emails is
we really want

00:20:42.946 --> 00:20:44.886 A:middle
to make sure it's
actionable, and let you know

00:20:44.886 --> 00:20:47.316 A:middle
that you're receiving this
email, for the issue emails,

00:20:47.316 --> 00:20:49.076 A:middle
when it is because
something happened

00:20:49.076 --> 00:20:50.216 A:middle
that you can do something about.

00:20:51.116 --> 00:20:53.636 A:middle
So, the first type is if
you introduced an issue.

00:20:54.146 --> 00:20:55.156 A:middle
And that's because you broke it.

00:20:55.386 --> 00:20:58.586 A:middle
So, this will call you out,
as you see right in the email.

00:20:58.586 --> 00:20:59.506 A:middle
You'll see an email like this

00:20:59.506 --> 00:21:00.776 A:middle
that says you introduced
an issue.

00:20:59.506 --> 00:21:00.776 A:middle
that says you introduced
an issue.

00:21:01.796 --> 00:21:03.706 A:middle
And we know this because
the issue showed up on

00:21:03.706 --> 00:21:06.066 A:middle
or near a line that you
just recently modified.

00:21:07.486 --> 00:21:09.776 A:middle
We also might know if,
between the two integrations

00:21:09.776 --> 00:21:11.886 A:middle
where the issue showed up, you
were the only person committing.

00:21:11.886 --> 00:21:15.466 A:middle
In that case, that's
pretty much a fair guess

00:21:15.466 --> 00:21:17.126 A:middle
that it's you that broke it.

00:21:17.886 --> 00:21:19.616 A:middle
Now, that's not always the case.

00:21:19.616 --> 00:21:22.016 A:middle
Take, for example, a
application that's built

00:21:22.016 --> 00:21:22.996 A:middle
on top of a framework.

00:21:23.356 --> 00:21:26.416 A:middle
A change in the framework
might cause breakage

00:21:26.416 --> 00:21:28.836 A:middle
in the application
without anyone committing

00:21:28.836 --> 00:21:29.656 A:middle
to the application.

00:21:30.216 --> 00:21:31.846 A:middle
So, in this case, you'll see
an email a little bit more

00:21:31.846 --> 00:21:36.056 A:middle
like this, and it'll be a little
bit less condemning of your work

00:21:36.056 --> 00:21:37.356 A:middle
and will simply say
that you might be able

00:21:37.356 --> 00:21:39.426 A:middle
to help fix an issue on the bot.

00:21:40.446 --> 00:21:43.306 A:middle
And we know this because you
commit frequently to the area

00:21:43.306 --> 00:21:44.116 A:middle
where the issue showed up.

00:21:44.116 --> 00:21:46.556 A:middle
So, we, essentially, assign
ownership to various areas.

00:21:47.076 --> 00:21:50.496 A:middle
And, keep in mind, that this
is a bit fuzzier matching

00:21:50.496 --> 00:21:52.246 A:middle
than when we're directly
blaming someone.

00:21:52.766 --> 00:21:55.306 A:middle
So, expect this email to go out
to a bit of a wider audience.

00:21:55.306 --> 00:21:57.226 A:middle
It casts a very wide net
when trying to figure

00:21:57.226 --> 00:21:58.976 A:middle
out who might be of interest
for a particular issue.

00:22:03.306 --> 00:22:05.706 A:middle
Now, that's great for issues
that come up in your code,

00:22:05.706 --> 00:22:07.256 A:middle
but sometimes, you can
actually get issues that come

00:22:07.256 --> 00:22:09.136 A:middle
up regardless of code changes.

00:22:09.136 --> 00:22:11.756 A:middle
One of the easiest ways
to see that is actually

00:22:11.756 --> 00:22:12.916 A:middle
by reconfiguring your bot.

00:22:13.746 --> 00:22:18.616 A:middle
So, Xcode 8 or Xcode Server in
Xcode 8 will now track changes

00:22:18.616 --> 00:22:20.966 A:middle
to your bot configuration
and actually call those out.

00:22:21.946 --> 00:22:24.546 A:middle
Whenever possible, we will
attribute any new issues

00:22:24.546 --> 00:22:26.746 A:middle
that come up to changes
in the configuration,

00:22:26.746 --> 00:22:29.786 A:middle
such as if you enable testing
or enable static analysis.

00:22:30.366 --> 00:22:32.426 A:middle
Those types of issues may have
been in your code forever,

00:22:32.426 --> 00:22:34.816 A:middle
but we can actually attribute
them specifically to changes

00:22:34.816 --> 00:22:36.796 A:middle
in the configuration
of the bot rather

00:22:36.796 --> 00:22:37.766 A:middle
than a change in your code.

00:22:39.156 --> 00:22:41.326 A:middle
We also make sure to include
this information in emails

00:22:41.326 --> 00:22:43.306 A:middle
for the next integration,
so that when you do see one

00:22:43.306 --> 00:22:45.476 A:middle
of these emails, you know that
some of these changes might be

00:22:45.476 --> 00:22:47.456 A:middle
because you're picking up
a configuration change.

00:22:50.516 --> 00:22:52.106 A:middle
Let's go back to something
we were talking about earlier

00:22:52.106 --> 00:22:53.906 A:middle
of installing a new
Xcode and getting a bunch

00:22:53.906 --> 00:22:55.456 A:middle
of new features in the process.

00:22:56.216 --> 00:22:58.826 A:middle
Well, when that happens,
Xcode Server

00:22:58.826 --> 00:23:02.036 A:middle
on Xcode 8 will actually
reintegrate your entire project,

00:22:58.826 --> 00:23:02.036 A:middle
on Xcode 8 will actually
reintegrate your entire project,

00:23:02.576 --> 00:23:04.106 A:middle
and we call this an
upgrade integration.

00:23:05.296 --> 00:23:07.756 A:middle
We take the exact same revision
of the previous integration

00:23:07.756 --> 00:23:10.756 A:middle
of all your repositories and
simply rerun all your tests,

00:23:10.756 --> 00:23:12.926 A:middle
rebuild everything, rerun
the static analyzer,

00:23:13.516 --> 00:23:15.886 A:middle
and when this happens, we
know that the issues that come

00:23:15.886 --> 00:23:19.686 A:middle
up in your project at this
point, any new issues,

00:23:19.686 --> 00:23:21.206 A:middle
are specifically
because of the upgrade

00:23:21.206 --> 00:23:23.056 A:middle
since we took the exact
same commits as before.

00:23:24.066 --> 00:23:26.256 A:middle
This saves you a ton of time
trying to track down changes

00:23:26.256 --> 00:23:27.896 A:middle
in your source code
that just aren't there

00:23:27.896 --> 00:23:32.946 A:middle
because the issues came up
from changes around your code.

00:23:33.046 --> 00:23:35.276 A:middle
So, that's some of the new
features and issues and blame,

00:23:35.276 --> 00:23:37.446 A:middle
but I want to talk a little bit
about my favorite new feature

00:23:37.446 --> 00:23:40.136 A:middle
in Xcode Server and
Xcode 8 which is our new,

00:23:40.136 --> 00:23:41.816 A:middle
configurable integration user.

00:23:42.996 --> 00:23:44.536 A:middle
So, we now give you full control

00:23:44.536 --> 00:23:47.086 A:middle
of the macOS user that's
running your integrations.

00:23:47.536 --> 00:23:49.516 A:middle
And this gives you a lot
of improved visibility

00:23:49.626 --> 00:23:51.316 A:middle
into how your integrations
are being run,

00:23:51.976 --> 00:23:53.076 A:middle
and more to the point,
it allows you

00:23:53.076 --> 00:23:55.436 A:middle
to configure exactly how
your integrations run.

00:23:55.946 --> 00:23:59.416 A:middle
Historically, in Xcode Server,
there's a hidden macOS user

00:23:59.416 --> 00:24:01.666 A:middle
that was running all of your
integrations in the background.

00:23:59.416 --> 00:24:01.666 A:middle
that was running all of your
integrations in the background.

00:24:02.076 --> 00:24:03.496 A:middle
You wouldn't have
access to the password,

00:24:03.496 --> 00:24:05.186 A:middle
and you wouldn't be
able to log in as them.

00:24:05.976 --> 00:24:08.516 A:middle
This meant that you were
basically getting a stock user

00:24:08.516 --> 00:24:10.366 A:middle
no matter what, and you
couldn't make any changes.

00:24:11.596 --> 00:24:13.966 A:middle
Now, you'll own and
manage this user yourself.

00:24:13.966 --> 00:24:15.206 A:middle
You will be given the password.

00:24:15.976 --> 00:24:18.586 A:middle
This user will be a
completely normal macOS user.

00:24:18.586 --> 00:24:20.036 A:middle
It'll be any user on the system.

00:24:20.036 --> 00:24:21.586 A:middle
Can be anyone you want.

00:24:21.586 --> 00:24:22.786 A:middle
We suggest a new user.

00:24:23.896 --> 00:24:25.836 A:middle
But it will available
at login window,

00:24:25.836 --> 00:24:27.166 A:middle
and it's fast user switching.

00:24:27.166 --> 00:24:28.866 A:middle
So, you can log in to that user.

00:24:30.136 --> 00:24:31.816 A:middle
You will notice you're
running as that user

00:24:32.156 --> 00:24:35.226 A:middle
through a menu extra that
shows the Xcode Server

00:24:35.436 --> 00:24:36.396 A:middle
integration icon.

00:24:37.046 --> 00:24:37.996 A:middle
We'll see that in just a minute.

00:24:38.316 --> 00:24:39.886 A:middle
Let's go over how you
would set up this user.

00:24:39.886 --> 00:24:42.936 A:middle
So, here I've opened the server
app to the Xcode service pane,

00:24:43.256 --> 00:24:45.586 A:middle
and in order to enable
the Xcode Server,

00:24:46.026 --> 00:24:47.326 A:middle
I need to go ahead
and choose an Xcode.

00:24:47.516 --> 00:24:50.306 A:middle
So, I'll choose a new Xcode
8 that I have installed,

00:24:50.706 --> 00:24:53.466 A:middle
and I'll be presented with
this dialog, asking me to set

00:24:53.466 --> 00:24:56.066 A:middle
up which integration user I
want to use, and I'm going

00:24:56.066 --> 00:24:57.506 A:middle
to go ahead and create
a new user just

00:24:57.506 --> 00:24:58.386 A:middle
for running integrations.

00:24:59.056 --> 00:25:00.516 A:middle
I'll go ahead and give it a name

00:24:59.056 --> 00:25:00.516 A:middle
I'll go ahead and give it a name

00:25:00.516 --> 00:25:02.526 A:middle
and a password, normal
user stuff.

00:25:02.966 --> 00:25:04.496 A:middle
And I'm going to leave
it as a basic user.

00:25:04.606 --> 00:25:09.326 A:middle
And when I push "create user,"
Xcode's going to go ahead

00:25:09.326 --> 00:25:10.256 A:middle
and do a little bit of work

00:25:10.256 --> 00:25:12.526 A:middle
in the background while
it gets everything ready

00:25:12.526 --> 00:25:15.956 A:middle
to run integrations, and once
that user's mostly set up,

00:25:16.146 --> 00:25:17.816 A:middle
we're going to be
asked to login as them.

00:25:18.536 --> 00:25:20.366 A:middle
Now, we are asked to log in
as them because we're going

00:25:20.366 --> 00:25:22.946 A:middle
to go ahead and run a little
bit of the setup assistant.

00:25:22.946 --> 00:25:25.426 A:middle
Remember, it is a real,
normal macOS user.

00:25:26.246 --> 00:25:27.596 A:middle
So I can log in, I can sign

00:25:27.596 --> 00:25:29.656 A:middle
into a test iCloud
account, for example.

00:25:29.926 --> 00:25:33.076 A:middle
I can stage any data that I want
to have for my integrations.

00:25:33.216 --> 00:25:34.066 A:middle
Anything like that.

00:25:34.476 --> 00:25:35.966 A:middle
When Xcode's ready
to run integrations,

00:25:35.966 --> 00:25:37.716 A:middle
you will see a notification
like the one you see

00:25:37.716 --> 00:25:40.546 A:middle
in the top right here, and in
the top right in the menu bar,

00:25:40.546 --> 00:25:42.976 A:middle
you'll notice that there is
a little hammer indicating

00:25:43.306 --> 00:25:46.506 A:middle
that this is the Xcode
Server integration user.

00:25:47.166 --> 00:25:51.226 A:middle
With that all done, I can
go ahead and switch back,

00:25:52.886 --> 00:25:55.346 A:middle
and I'll be back in server app,
and I'll have the indication

00:25:55.346 --> 00:25:58.306 A:middle
that the user is ready
to go, logged in,

00:25:58.306 --> 00:25:59.946 A:middle
and integrations
can begin running.

00:26:00.806 --> 00:26:02.246 A:middle
So, now, we've seen how
to set up that user.

00:26:02.246 --> 00:26:04.676 A:middle
Let's take a look at some of
the things that we can do now

00:26:04.676 --> 00:26:06.496 A:middle
that we have access to
the integration user.

00:26:06.986 --> 00:26:08.476 A:middle
And for that, let's go
to the demo machine.

00:26:08.626 --> 00:26:09.036 A:middle
All right.

00:26:09.036 --> 00:26:10.926 A:middle
Here we have that same
project we saw earlier,

00:26:11.956 --> 00:26:14.316 A:middle
and we saw an issue
where it was crashing

00:26:15.326 --> 00:26:16.896 A:middle
because it didn't have
access to location.

00:26:16.896 --> 00:26:18.806 A:middle
And we had to go in
manually to the simulator

00:26:19.096 --> 00:26:21.156 A:middle
and turn off location
access to test it locally.

00:26:21.616 --> 00:26:22.986 A:middle
But, as we're developing
our application,

00:26:22.986 --> 00:26:24.036 A:middle
we might not want to do that.

00:26:24.036 --> 00:26:25.856 A:middle
We probably want to leave
location services turned

00:26:25.856 --> 00:26:28.236 A:middle
on on our Apple TVs
and on our simulators,

00:26:28.236 --> 00:26:30.546 A:middle
so that we're running,
more or less, the way most

00:26:30.546 --> 00:26:32.616 A:middle
of our users will see it and
how we want to see the app.

00:26:33.486 --> 00:26:35.736 A:middle
But, now that we've fixed
the issue we saw earlier,

00:26:35.736 --> 00:26:37.066 A:middle
we definitely don't want
it to come up again,

00:26:37.066 --> 00:26:38.896 A:middle
and we want to be
notified if it does.

00:26:39.606 --> 00:26:41.386 A:middle
So, it just so happens that
this machine I'm actually

00:26:41.386 --> 00:26:43.486 A:middle
on right now, happens
to be my server machine.

00:26:43.486 --> 00:26:45.396 A:middle
So, I don't have to go
anywhere to go to my server.

00:26:45.396 --> 00:26:47.946 A:middle
I can actually just go to
the fast user switching menu,

00:26:48.196 --> 00:26:50.996 A:middle
and I see that have a
configurable, continue,

00:26:50.996 --> 00:26:54.936 A:middle
integration user
called Xcode Server.

00:26:55.006 --> 00:26:57.076 A:middle
And I'm just going to
go ahead and select that

00:26:57.516 --> 00:27:01.456 A:middle
and enter my super-secret
password that's only four

00:26:57.516 --> 00:27:01.456 A:middle
and enter my super-secret
password that's only four

00:27:03.156 --> 00:27:05.456 A:middle
characters long.

00:27:05.676 --> 00:27:06.956 A:middle
And we will log in as this user.

00:27:07.236 --> 00:27:09.306 A:middle
So, I've gone ahead and
changed the desktop background

00:27:09.306 --> 00:27:10.916 A:middle
so that I know that it's
the build service user.

00:27:11.746 --> 00:27:15.316 A:middle
And, here we see the hammer
icon of Xcode that indicates

00:27:15.316 --> 00:27:16.526 A:middle
that this is Xcode Server.

00:27:16.556 --> 00:27:18.336 A:middle
We see it's on and
waiting for integrations.

00:27:18.906 --> 00:27:19.756 A:middle
So, it's all configured,

00:27:20.476 --> 00:27:22.446 A:middle
but I want to go ahead
and go into Xcode.

00:27:22.446 --> 00:27:25.566 A:middle
So, I can actually configure any
settings I want in Xcode locally

00:27:25.566 --> 00:27:28.176 A:middle
on this user, and they will be
picked up in my integrations.

00:27:28.176 --> 00:27:30.456 A:middle
So, I'm going to use
a neat little trick.

00:27:30.456 --> 00:27:33.756 A:middle
If I go to the devices
menu, I see all the devices

00:27:33.756 --> 00:27:36.156 A:middle
and simulators that are plugged
into this particular machine.

00:27:36.656 --> 00:27:38.856 A:middle
Now, being generous at
Apple, we give you one

00:27:38.856 --> 00:27:41.626 A:middle
of every device we've ever
made, but if that's not enough

00:27:41.626 --> 00:27:44.766 A:middle
for you, for absolutely free,
you can get more simulators just

00:27:44.766 --> 00:27:45.966 A:middle
by clicking this
Plus [+] button.

00:27:46.886 --> 00:27:49.586 A:middle
Now, the Apple TV 1080p
simulator's the built in one

00:27:49.586 --> 00:27:51.196 A:middle
that I got when I
installed Xcode.

00:27:51.566 --> 00:27:54.246 A:middle
I've gone ahead and created
another one called Apple TV no

00:27:54.246 --> 00:27:56.796 A:middle
location, and I've
actually got it booted here.

00:27:57.046 --> 00:28:00.406 A:middle
And if I go in, I can double
check, and it is, indeed,

00:27:57.046 --> 00:28:00.406 A:middle
And if I go in, I can double
check, and it is, indeed,

00:28:01.996 --> 00:28:04.006 A:middle
has location services
turned off.

00:28:04.596 --> 00:28:07.606 A:middle
So, I go to settings,
general, privacy.

00:28:08.156 --> 00:28:09.386 A:middle
Location services is turned off.

00:28:09.496 --> 00:28:11.206 A:middle
So, this simulator is
all configured for use,

00:28:11.236 --> 00:28:12.686 A:middle
and my other one's still usable

00:28:12.686 --> 00:28:14.586 A:middle
for when I want location
services turned on.

00:28:15.536 --> 00:28:18.286 A:middle
Now, let's do a quick
switch back,

00:28:19.466 --> 00:28:21.316 A:middle
and just log back
into my normal user.

00:28:21.316 --> 00:28:22.806 A:middle
Normally, I'd be
walking across the room

00:28:22.806 --> 00:28:24.946 A:middle
to my actual work machine,
so this is a little faster.

00:28:26.006 --> 00:28:27.626 A:middle
And here we see all
the UI tests.

00:28:27.626 --> 00:28:30.136 A:middle
Now, I already have a bot that's
integrating this normally,

00:28:30.136 --> 00:28:31.776 A:middle
but I want to go
ahead and create a bot

00:28:31.776 --> 00:28:33.596 A:middle
that will integrate
just the case

00:28:33.596 --> 00:28:34.916 A:middle
where we don't have
location data.

00:28:35.156 --> 00:28:37.016 A:middle
So, I'm going to go
product, create bot,

00:28:37.106 --> 00:28:40.206 A:middle
and use the Harmony no
location scheme on this server.

00:28:40.626 --> 00:28:43.046 A:middle
Going to go ahead and
give it location, sorry,

00:28:43.046 --> 00:28:46.336 A:middle
access to my repository so
it can check out the project.

00:28:46.796 --> 00:28:49.276 A:middle
I'm going to disable
the archive action

00:28:49.276 --> 00:28:50.816 A:middle
because this will be the
same as my normal bot.

00:28:50.816 --> 00:28:52.736 A:middle
So, I don't care about that,
but I do want to run tests.

00:28:53.246 --> 00:28:54.926 A:middle
And, let's leave
static analysis on.

00:28:56.126 --> 00:28:57.886 A:middle
And I want to be notified
as soon as I break this,

00:28:58.006 --> 00:29:00.646 A:middle
but probably once a
day is good enough.

00:28:58.006 --> 00:29:00.646 A:middle
but probably once a
day is good enough.

00:29:00.736 --> 00:29:03.726 A:middle
So, I'll know within 24 hours
if we ever break this again,

00:29:03.726 --> 00:29:05.346 A:middle
our UI test will catch
it on our server.

00:29:06.076 --> 00:29:08.896 A:middle
So, we'll just run it every
day at 1:00 AM, and here I get

00:29:08.896 --> 00:29:09.916 A:middle
to select the devices.

00:29:10.386 --> 00:29:14.086 A:middle
By default, every integration
runs on all devices of that OS.

00:29:14.086 --> 00:29:15.886 A:middle
So, this is a tvOS
project, so it'll run

00:29:15.886 --> 00:29:17.886 A:middle
on all tvOS devices
and simulators.

00:29:18.566 --> 00:29:21.656 A:middle
Instead, let's do specific TV
devices, and I'm just going

00:29:21.656 --> 00:29:23.116 A:middle
to select the Apple
TV no location.

00:29:23.486 --> 00:29:26.546 A:middle
This is that environment
variable view we talked

00:29:26.546 --> 00:29:27.106 A:middle
about earlier.

00:29:27.276 --> 00:29:28.976 A:middle
I don't have any
environment variables I need.

00:29:29.086 --> 00:29:31.136 A:middle
I'm going to go ahead and
make sure that I get emailed

00:29:31.136 --> 00:29:33.206 A:middle
when a new issue comes up
in this particular case,

00:29:33.366 --> 00:29:36.986 A:middle
and go ahead and create the bot.

00:29:37.616 --> 00:29:39.396 A:middle
So, that is going to go ahead
and kick off an integration

00:29:39.396 --> 00:29:40.536 A:middle
which we see running here.

00:29:40.536 --> 00:29:41.756 A:middle
It's checking out building.

00:29:42.246 --> 00:29:44.166 A:middle
We've already seen the
UI test run a little bit,

00:29:44.166 --> 00:29:45.966 A:middle
so let's actually
look at an integration

00:29:45.966 --> 00:29:47.846 A:middle
that I prebaked a
little bit earlier.

00:29:48.246 --> 00:29:49.066 A:middle
And if we go to the test,

00:29:49.066 --> 00:29:51.816 A:middle
we can see that it did run all
our tests including this zip

00:29:51.846 --> 00:29:52.426 A:middle
code test.

00:29:53.166 --> 00:29:55.166 A:middle
And we can see, if I look at
some of the screenshots from it,

00:29:55.166 --> 00:29:57.466 A:middle
it is, indeed, running without
location because it's opening

00:29:57.466 --> 00:30:01.766 A:middle
that ViewController
that we saw earlier.

00:29:57.466 --> 00:30:01.766 A:middle
that ViewController
that we saw earlier.

00:30:02.436 --> 00:30:03.566 A:middle
So, we saw how you were able

00:30:03.566 --> 00:30:05.586 A:middle
to get significantly
improved visibility

00:30:05.586 --> 00:30:06.796 A:middle
into how your user runs.

00:30:06.796 --> 00:30:10.946 A:middle
You can log in as them and see
everything that's happening.

00:30:11.086 --> 00:30:12.986 A:middle
We saw how you could
customize different settings

00:30:12.986 --> 00:30:16.486 A:middle
such as simulators to run
exactly the operations

00:30:16.486 --> 00:30:17.846 A:middle
that you want to run
on your integrations.

00:30:18.706 --> 00:30:20.706 A:middle
We saw this was a
completely normal macOS user

00:30:20.706 --> 00:30:22.796 A:middle
that I was able to switch
to in fast user switching

00:30:22.886 --> 00:30:24.106 A:middle
and that I had the password to.

00:30:24.956 --> 00:30:26.326 A:middle
And, we got to see
that menu extra

00:30:26.326 --> 00:30:28.446 A:middle
that shows you a little bit
of your integration status

00:30:28.546 --> 00:30:31.656 A:middle
in that integration user.

00:30:33.326 --> 00:30:34.896 A:middle
Now, with this great new
power comes a little bit

00:30:34.896 --> 00:30:37.116 A:middle
of responsibility, and so
we have some best practices

00:30:37.116 --> 00:30:37.446 A:middle
for you.

00:30:37.946 --> 00:30:40.166 A:middle
First, we highly recommend
you dedicate a new user.

00:30:40.236 --> 00:30:42.776 A:middle
You want this to be as similar
to your customer's experience

00:30:42.776 --> 00:30:44.606 A:middle
as possible, so you don't
want all your settings

00:30:45.146 --> 00:30:47.516 A:middle
to be causing impact
on your bots.

00:30:48.816 --> 00:30:51.126 A:middle
We also recommend you avoid
administrator accounts.

00:30:51.236 --> 00:30:53.346 A:middle
Keep in mind that anyone
who can create or edit bots

00:30:53.346 --> 00:30:55.206 A:middle
on your serve will have
access to this account

00:30:55.206 --> 00:30:57.036 A:middle
through triggers, so
this goes the same

00:30:57.036 --> 00:30:58.616 A:middle
for any private or
customer data.

00:30:58.746 --> 00:31:00.486 A:middle
Try to avoid storing
that in this user.

00:30:58.746 --> 00:31:00.486 A:middle
Try to avoid storing
that in this user.

00:31:02.296 --> 00:31:04.726 A:middle
If you want to stay logged in
as this user in the background,

00:31:04.836 --> 00:31:05.926 A:middle
use fast user switching.

00:31:05.926 --> 00:31:07.266 A:middle
Integrations can continue to run

00:31:07.266 --> 00:31:08.846 A:middle
in the background just
as they always have.

00:31:10.086 --> 00:31:12.006 A:middle
However, if you do want
to run the integrations

00:31:12.006 --> 00:31:13.006 A:middle
as the front most user,

00:31:13.006 --> 00:31:14.786 A:middle
make sure that you
turn off screen lock.

00:31:14.786 --> 00:31:16.616 A:middle
Just like iOS screen
lock blocks testing,

00:31:16.736 --> 00:31:17.886 A:middle
so does macOS screen lock.

00:31:19.286 --> 00:31:20.686 A:middle
And finally, make
sure to customize this

00:31:20.686 --> 00:31:21.896 A:middle
for whatever needs you have.

00:31:22.316 --> 00:31:24.496 A:middle
That includes, as we saw
earlier, any simulators.

00:31:24.576 --> 00:31:26.496 A:middle
If you have any specific
networking configuration

00:31:26.496 --> 00:31:27.716 A:middle
that you need for
your integrations,

00:31:28.636 --> 00:31:32.196 A:middle
any stage user data or settings
that you want for UI tests,

00:31:32.306 --> 00:31:33.416 A:middle
go ahead and configure those.

00:31:34.526 --> 00:31:36.266 A:middle
And finally, if you have
any advanced provisioning,

00:31:36.266 --> 00:31:38.656 A:middle
such as if your administrator
gives you a provisioning

00:31:38.656 --> 00:31:40.816 A:middle
profile, however you
would configure on Xcode,

00:31:40.816 --> 00:31:41.646 A:middle
you can actually configure

00:31:41.646 --> 00:31:44.686 A:middle
that in your configurable
integrations user, now,

00:31:44.686 --> 00:31:47.076 A:middle
and make sure that code
signing will work for you.

00:31:47.686 --> 00:31:49.846 A:middle
So, with that, I'm going to
bring Zoltan back to talk

00:31:49.846 --> 00:31:52.836 A:middle
about some new features
in xcodebuild.

00:31:53.516 --> 00:32:00.516 A:middle
[ Applause ]

00:31:53.516 --> 00:32:00.516 A:middle
[ Applause ]

00:32:01.016 --> 00:32:01.566 A:middle
&gt;&gt; Thank you, Eric.

00:32:03.896 --> 00:32:07.936 A:middle
So, you've seen new features
in Xcode and Xcode Server,

00:32:08.606 --> 00:32:10.866 A:middle
and now we have new features
to show you in xcodebuild.

00:32:12.816 --> 00:32:15.136 A:middle
xcodebuild has the test action

00:32:15.136 --> 00:32:18.696 A:middle
for custom continuous
integration systems.

00:32:19.706 --> 00:32:22.076 A:middle
You give it a workspace, a
scheme, and a destination,

00:32:22.596 --> 00:32:25.426 A:middle
and xcodebuild will
dutifully build your sources.

00:32:26.136 --> 00:32:30.026 A:middle
It will install built products
onto devices as needed.

00:32:31.516 --> 00:32:34.466 A:middle
It will run your tests,
and then report results

00:32:34.466 --> 00:32:35.766 A:middle
to you on the command line.

00:32:37.796 --> 00:32:41.866 A:middle
So, this year, we're introducing
two new options for this action.

00:32:42.796 --> 00:32:44.646 A:middle
With the only testing option,

00:32:44.676 --> 00:32:47.906 A:middle
you can effectively
constrain the set of tests

00:32:48.416 --> 00:32:49.656 A:middle
that the action will run.

00:32:49.656 --> 00:32:57.666 A:middle
So, you can specify TestCases or
TestSuites or TestBundles to run

00:32:57.666 --> 00:33:00.306 A:middle
to the exclusion of other tests.

00:32:57.666 --> 00:33:00.306 A:middle
to the exclusion of other tests.

00:33:02.226 --> 00:33:04.426 A:middle
And you can also use
the skip-testing option

00:33:04.726 --> 00:33:08.286 A:middle
to specify TestCases to exclude

00:33:08.286 --> 00:33:10.466 A:middle
from the tests while
running everything else.

00:33:10.986 --> 00:33:14.266 A:middle
And the big news this year is

00:33:14.266 --> 00:33:17.056 A:middle
that we're introducing two
new actions to xcodebuild.

00:33:17.566 --> 00:33:21.576 A:middle
So, we're effectively splitting
the test action in two.

00:33:22.526 --> 00:33:26.916 A:middle
These actions are already
available in the Xcode IDE,

00:33:28.046 --> 00:33:29.846 A:middle
but we're going to bring
them to xcodebuild, now.

00:33:30.626 --> 00:33:32.306 A:middle
And so, we'll look
at each in turn.

00:33:34.776 --> 00:33:38.176 A:middle
Build for testing is just
the building portions

00:33:38.256 --> 00:33:39.286 A:middle
of the test action.

00:33:40.636 --> 00:33:44.266 A:middle
So, you give it a workspace,
a scheme, and a destination

00:33:44.266 --> 00:33:48.026 A:middle
as before, and it will
build your sources,

00:33:48.816 --> 00:33:50.766 A:middle
perhaps making certain
symbols visible,

00:33:51.796 --> 00:33:54.676 A:middle
and then it will output the
built products to derive data.

00:33:55.976 --> 00:33:58.396 A:middle
It also produces
this xctestrun file.

00:33:58.736 --> 00:33:59.916 A:middle
It's a kind of manifest

00:33:59.916 --> 00:34:01.626 A:middle
for everything your
test needs to run.

00:33:59.916 --> 00:34:01.626 A:middle
for everything your
test needs to run.

00:34:02.396 --> 00:34:04.306 A:middle
We'll come back to
that in a minute.

00:34:06.206 --> 00:34:10.315 A:middle
Test without building then, is
the second part to the story.

00:34:11.525 --> 00:34:13.116 A:middle
You give it a workspace,
a scheme,

00:34:13.116 --> 00:34:14.676 A:middle
and a destination, as before.

00:34:15.826 --> 00:34:20.166 A:middle
And, xcodebuild will find the
build products in derived data.

00:34:20.235 --> 00:34:23.085 A:middle
It will install those
onto devices as needed,

00:34:23.716 --> 00:34:26.976 A:middle
and then run your tests and
report results just as before.

00:34:34.045 --> 00:34:36.666 A:middle
But the cool thing
is, you no longer need

00:34:36.666 --> 00:34:38.056 A:middle
to provide a workspace.

00:34:39.496 --> 00:34:43.545 A:middle
Instead, you can just
provide this xctestrun file,

00:34:44.016 --> 00:34:47.196 A:middle
and Xcode will run your
tests from binaries alone.

00:34:48.525 --> 00:34:51.186 A:middle
So, it will ingest
the xctestrun file.

00:34:51.186 --> 00:34:54.266 A:middle
It will find binary products
relative to that file,

00:34:54.976 --> 00:34:57.856 A:middle
and then it will run the
tests and report results

00:34:58.706 --> 00:35:00.166 A:middle
in exactly the same
way as before

00:34:58.706 --> 00:35:00.166 A:middle
in exactly the same
way as before

00:35:00.166 --> 00:35:02.896 A:middle
but without having any
access to your sources.

00:35:04.356 --> 00:35:05.576 A:middle
So, this is ideal

00:35:05.576 --> 00:35:07.516 A:middle
for distributed testing
environments.

00:35:08.436 --> 00:35:12.186 A:middle
You would build your tests
on machines up to optimized

00:35:12.186 --> 00:35:16.396 A:middle
for building, and then
move those built products

00:35:16.396 --> 00:35:19.036 A:middle
onto machines optimized
for testing.

00:35:19.256 --> 00:35:24.366 A:middle
And then, in parallel, you
can gather the test reports.

00:35:27.046 --> 00:35:29.726 A:middle
So, this is all made possible
by the xctestrun file,

00:35:30.246 --> 00:35:34.386 A:middle
that manifest for your tests
that specifies which tests

00:35:34.386 --> 00:35:37.076 A:middle
to run and which to skip
and which test machines.

00:35:38.436 --> 00:35:40.036 A:middle
It provides environment
variables

00:35:40.036 --> 00:35:42.266 A:middle
and command line
arguments to your tests,

00:35:43.256 --> 00:35:44.676 A:middle
and you can read
more about the format

00:35:44.676 --> 00:35:49.856 A:middle
in our man pages
using this command.

00:35:50.516 --> 00:35:56.736 A:middle
[ Applause ]

00:35:57.236 --> 00:35:59.906 A:middle
So, we covered a
lot of ground today.

00:36:00.046 --> 00:36:03.856 A:middle
We first reviewed testing in
terms of these four characters,

00:36:04.286 --> 00:36:08.796 A:middle
and then we looked at some
new concepts in Xcode.

00:36:09.686 --> 00:36:12.626 A:middle
They were great for diagnosing
issues with your tests,

00:36:13.126 --> 00:36:16.456 A:middle
and then we introduced
new features in Xcode,

00:36:17.116 --> 00:36:19.536 A:middle
in Xcode Server,
and in xcodebuild.

00:36:22.516 --> 00:36:25.436 A:middle
I hope these insights and
these new features help you

00:36:25.436 --> 00:36:28.226 A:middle
to develop test suites which
perform well, and, after all,

00:36:28.936 --> 00:36:31.786 A:middle
that will help you
deliver great applications.

00:36:32.306 --> 00:36:36.586 A:middle
You can read more about
this session at this URL.

00:36:37.766 --> 00:36:37.976 A:middle
Thank you.

00:36:38.508 --> 00:36:40.508 A:middle
[ Applause ]
