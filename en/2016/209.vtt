WEBVTT

00:00:07.516 --> 00:00:19.500 A:middle
[ Music ]

00:00:24.516 --> 00:00:27.776 A:middle
[ Applause ]

00:00:28.276 --> 00:00:29.786 A:middle
&gt;&gt; Good morning, and welcome

00:00:29.786 --> 00:00:31.386 A:middle
to Getting the Most
Out of HealthKit.

00:00:31.896 --> 00:00:34.646 A:middle
I'm Matt, I'm a software
engineer on the HealthKit team,

00:00:34.756 --> 00:00:37.296 A:middle
and I'll be joined on stage
shortly by my colleague Jeff.

00:00:38.216 --> 00:00:40.656 A:middle
In this session, we'll be
going over some great new

00:00:40.656 --> 00:00:42.776 A:middle
and recent additions
to the HealthKit APIs

00:00:42.776 --> 00:00:44.496 A:middle
in iOS X and watchOS 3.

00:00:45.426 --> 00:00:48.796 A:middle
Just as importantly, we'll be
covering some key features,

00:00:48.796 --> 00:00:51.756 A:middle
core concepts, and important
workflows to make sure

00:00:51.756 --> 00:00:54.636 A:middle
that you're really able to
get the most out of HealthKit.

00:00:55.966 --> 00:00:57.956 A:middle
We expect you have some
familiarity with HealthKit

00:00:57.956 --> 00:01:00.106 A:middle
if you're here watching this
session, but if you don't,

00:00:57.956 --> 00:01:00.106 A:middle
if you're here watching this
session, but if you don't,

00:01:00.106 --> 00:01:02.316 A:middle
we'll list some past sessions
at the end of this talk

00:01:02.316 --> 00:01:04.385 A:middle
that you can refer to
later to get up to speed.

00:01:05.146 --> 00:01:06.846 A:middle
But for now, let's get started.

00:01:09.216 --> 00:01:12.056 A:middle
As all of you here
know, Apple's health

00:01:12.056 --> 00:01:15.376 A:middle
and fitness ecosystem has become
a huge hit with our users.

00:01:16.106 --> 00:01:18.226 A:middle
People are getting more
fit and more healthy

00:01:18.226 --> 00:01:21.506 A:middle
because of the integration of
HealthKit and now ResearchKit

00:01:21.506 --> 00:01:24.026 A:middle
and CareKit with
your apps and devices

00:01:24.026 --> 00:01:25.316 A:middle
for iPhone and Apple Watch.

00:01:26.366 --> 00:01:28.286 A:middle
We want to make sure
that you're able

00:01:28.286 --> 00:01:29.906 A:middle
to keep creating
these great health

00:01:29.906 --> 00:01:31.416 A:middle
and fitness user experiences

00:01:31.456 --> 00:01:33.716 A:middle
that our users have come
to expect and enjoy.

00:01:35.256 --> 00:01:38.106 A:middle
So today we're going to be
covering all the things you need

00:01:38.106 --> 00:01:40.476 A:middle
to do to get these
great experiences right.

00:01:41.866 --> 00:01:43.786 A:middle
First, we'll cover
authorization,

00:01:43.786 --> 00:01:46.036 A:middle
which underpins everything
else you do with HealthKit.

00:01:47.126 --> 00:01:51.516 A:middle
Next, we'll cover the Activity
Rings API introduced in iOS 9.3

00:01:51.946 --> 00:01:54.286 A:middle
and Health Records
introduced this year in iOS X,

00:01:54.906 --> 00:01:57.826 A:middle
both of which happen to have
important implications related

00:01:57.826 --> 00:01:58.696 A:middle
to authorization.

00:02:00.626 --> 00:02:02.766 A:middle
Finally, we'll spend the
rest of the session going

00:02:02.766 --> 00:02:05.556 A:middle
over a wide range of best
practices for handling data

00:02:05.766 --> 00:02:07.116 A:middle
when you're interacting
with HealthKit.

00:02:07.686 --> 00:02:11.706 A:middle
So let's dive in.

00:02:12.226 --> 00:02:13.896 A:middle
First up is authorization.

00:02:14.306 --> 00:02:17.346 A:middle
If you've been using HealthKit
for a while, some or even most

00:02:17.346 --> 00:02:18.786 A:middle
of this section might
feel like review,

00:02:19.296 --> 00:02:21.266 A:middle
but we really recommend
you pay important attention

00:02:21.266 --> 00:02:22.926 A:middle
to the details because
they'll be important

00:02:22.926 --> 00:02:24.636 A:middle
for the stuff we cover
later in this session.

00:02:25.216 --> 00:02:27.056 A:middle
We'll sprinkle in some
best practices as well,

00:02:27.056 --> 00:02:29.936 A:middle
so keep your ears peeled.

00:02:31.126 --> 00:02:34.396 A:middle
iOS gives users full control
over their health data

00:02:34.556 --> 00:02:37.126 A:middle
and which apps can access
which parts of that data.

00:02:38.336 --> 00:02:39.746 A:middle
Before interacting
with HealthKit,

00:02:40.156 --> 00:02:41.696 A:middle
your app should request access

00:02:41.696 --> 00:02:43.806 A:middle
to the appropriate types
via HK Health Store,

00:02:44.036 --> 00:02:45.206 A:middle
and then the Health Store

00:02:45.206 --> 00:02:47.796 A:middle
in turn will present the
appropriate authorization UI

00:02:47.796 --> 00:02:49.206 A:middle
to the user if necessary.

00:02:51.036 --> 00:02:53.716 A:middle
Be aware that the user can
change permissions for your app

00:02:53.716 --> 00:02:55.056 A:middle
at any time, so you should keep

00:02:55.056 --> 00:02:56.486 A:middle
that in mind while you're
developing your app.

00:02:56.956 --> 00:03:00.196 A:middle
And just as importantly,
read authorization

00:02:56.956 --> 00:03:00.196 A:middle
And just as importantly,
read authorization

00:03:00.326 --> 00:03:02.596 A:middle
and write authorization
are completely independent.

00:03:03.376 --> 00:03:05.796 A:middle
That last bit can actually be
a little tricky, so let's look

00:03:05.796 --> 00:03:09.946 A:middle
at it in a little more detail.

00:03:11.196 --> 00:03:13.286 A:middle
Here's how read and write
authorizations work.

00:03:13.786 --> 00:03:16.816 A:middle
If the user grants you both
read and write permissions

00:03:16.856 --> 00:03:20.226 A:middle
to a given HealthKit type, then
your app can query and save data

00:03:20.226 --> 00:03:22.056 A:middle
for that HealthKit type
just like you'd expect.

00:03:22.746 --> 00:03:26.176 A:middle
If the user grants you only read
permissions for a given type,

00:03:26.326 --> 00:03:28.436 A:middle
then your app can read but
not write HealthKit data

00:03:28.436 --> 00:03:28.976 A:middle
for that type.

00:03:29.226 --> 00:03:30.026 A:middle
So far, so good.

00:03:30.026 --> 00:03:33.726 A:middle
Now, if the user grants
you write permissions

00:03:33.726 --> 00:03:36.826 A:middle
for a given type, then your
app can write data to HealthKit

00:03:36.826 --> 00:03:38.496 A:middle
for that type but
not read it back

00:03:38.496 --> 00:03:39.566 A:middle
from HealthKit for that type.

00:03:40.206 --> 00:03:42.896 A:middle
Write permissions do not
imply read permissions.

00:03:43.216 --> 00:03:45.656 A:middle
However, there's an important
exception to that point.

00:03:46.416 --> 00:03:47.796 A:middle
If your app has write
permissions

00:03:47.796 --> 00:03:50.186 A:middle
for a HealthKit type, then
you can read back data

00:03:50.186 --> 00:03:53.386 A:middle
that your app has written, just
not data from other sources.

00:03:55.366 --> 00:03:58.406 A:middle
Finally, if the user denies you
both read and write permissions

00:03:58.406 --> 00:04:01.366 A:middle
for a given type, then you can
neither query nor save data

00:03:58.406 --> 00:04:01.366 A:middle
for a given type, then you can
neither query nor save data

00:04:01.366 --> 00:04:01.896 A:middle
for that type.

00:04:02.596 --> 00:04:03.836 A:middle
And there's an important
implication

00:04:03.836 --> 00:04:04.976 A:middle
of that last point as well.

00:04:05.246 --> 00:04:08.206 A:middle
If the user denies you a
previously granted write

00:04:08.206 --> 00:04:09.166 A:middle
permission for that app,

00:04:09.586 --> 00:04:11.896 A:middle
then that means your app
can no longer read any data

00:04:11.896 --> 00:04:13.046 A:middle
from HealthKit for that type,

00:04:13.456 --> 00:04:15.636 A:middle
even data that your
app previously wrote,

00:04:15.846 --> 00:04:17.016 A:middle
so keep that in mind.

00:04:18.866 --> 00:04:22.686 A:middle
So that was all technically
review,

00:04:22.976 --> 00:04:25.386 A:middle
but there is one important
change to authorizations

00:04:25.386 --> 00:04:27.556 A:middle
in general in iOS X,
and that has to do

00:04:27.556 --> 00:04:28.756 A:middle
with usage descriptions.

00:04:30.156 --> 00:04:33.706 A:middle
Apps linked on or after iOS
X must include a description

00:04:33.706 --> 00:04:36.106 A:middle
for the user of why they're
trying to access health data.

00:04:36.706 --> 00:04:39.556 A:middle
This reinforces our principle
of user control over data.

00:04:41.406 --> 00:04:43.466 A:middle
These usage descriptions
should be declared

00:04:43.466 --> 00:04:45.886 A:middle
on your app's info.plist
file as values

00:04:45.886 --> 00:04:48.246 A:middle
for the
NSHealthShareUsageDescription

00:04:48.246 --> 00:04:49.536 A:middle
key if you're reading data

00:04:49.646 --> 00:04:52.316 A:middle
or the
NSHealthUpdateUsageDescription

00:04:52.316 --> 00:04:53.466 A:middle
key if you're writing data.

00:04:54.056 --> 00:04:58.786 A:middle
As a refresher, this is how
you request authorization.

00:04:59.176 --> 00:05:02.126 A:middle
The first thing we
want to do is make sure

00:04:59.176 --> 00:05:02.126 A:middle
The first thing we
want to do is make sure

00:05:02.126 --> 00:05:04.086 A:middle
that HealthKit is even
available on the current device.

00:05:04.086 --> 00:05:05.576 A:middle
For instance, maybe
this instance

00:05:05.576 --> 00:05:08.006 A:middle
of our app is running
on an iPad.

00:05:08.006 --> 00:05:10.276 A:middle
After we've established
that, we list the types

00:05:10.276 --> 00:05:12.006 A:middle
that we're interested
in reading and writing.

00:05:12.876 --> 00:05:14.936 A:middle
And finally, we call
request authorization

00:05:14.936 --> 00:05:17.756 A:middle
on HK Health Store, pass in
the types we're interested in,

00:05:17.756 --> 00:05:19.386 A:middle
and then handle the
response and the callback.

00:05:19.906 --> 00:05:24.326 A:middle
What if you have a watchOS app?

00:05:25.206 --> 00:05:27.676 A:middle
Authorizations are shared
between your iOS app

00:05:27.676 --> 00:05:29.136 A:middle
and its companion watchOS app,

00:05:29.546 --> 00:05:31.696 A:middle
and you can request
authorization at any time

00:05:31.696 --> 00:05:33.626 A:middle
from your iOS code
or your watchOS code.

00:05:34.436 --> 00:05:37.126 A:middle
However, the system
authorization UI can only be

00:05:37.126 --> 00:05:38.756 A:middle
presented to the
user on the phone,

00:05:39.106 --> 00:05:41.296 A:middle
so this has some important
usability implications.

00:05:42.666 --> 00:05:45.396 A:middle
For instance, if the user
is about to start a workout,

00:05:45.516 --> 00:05:47.786 A:middle
they might already have their
phone wrapped up in an armband,

00:05:47.786 --> 00:05:48.716 A:middle
and if that's the case,

00:05:49.256 --> 00:05:51.636 A:middle
they can't really easily
approve an authorization request

00:05:51.636 --> 00:05:53.766 A:middle
from your app, so this
may not be the best time

00:05:53.766 --> 00:05:55.306 A:middle
to request initial
authorization.

00:05:57.056 --> 00:05:59.076 A:middle
But there's an even
more important case.

00:05:59.636 --> 00:06:02.626 A:middle
If the user's using a Watch app,
their phone may not be nearby

00:05:59.636 --> 00:06:02.626 A:middle
If the user's using a Watch app,
their phone may not be nearby

00:06:02.626 --> 00:06:03.926 A:middle
at all, and if that's the case,

00:06:04.096 --> 00:06:06.256 A:middle
the authorization sheet
can't even be shown.

00:06:06.996 --> 00:06:09.666 A:middle
So we really recommend you
consider these important cases

00:06:09.666 --> 00:06:12.226 A:middle
when you're developing
your Watch app.

00:06:12.426 --> 00:06:14.486 A:middle
Also remember that
the response time

00:06:14.486 --> 00:06:16.986 A:middle
for the request authorization
call is not guaranteed,

00:06:17.036 --> 00:06:19.656 A:middle
so definitely don't block
any UI while you're waiting

00:06:19.726 --> 00:06:22.286 A:middle
for a response.

00:06:24.296 --> 00:06:25.836 A:middle
So clearly it's important

00:06:25.836 --> 00:06:28.026 A:middle
to get the authorization
user experience right,

00:06:28.496 --> 00:06:31.896 A:middle
and on top of that, your app
may be requesting access to some

00:06:32.146 --> 00:06:33.876 A:middle
or even many HealthKit
data types,

00:06:34.166 --> 00:06:36.176 A:middle
so that all raises a
really important question.

00:06:36.736 --> 00:06:38.836 A:middle
When should I be
requesting access to some

00:06:38.836 --> 00:06:40.086 A:middle
or all of these types?

00:06:41.486 --> 00:06:43.386 A:middle
Here are our recommendations
on that front.

00:06:44.296 --> 00:06:46.776 A:middle
First, we recommend
that you request access

00:06:46.846 --> 00:06:49.606 A:middle
to sensible groupings
of types that correspond

00:06:49.606 --> 00:06:51.466 A:middle
to logical activities
in your application.

00:06:52.546 --> 00:06:54.706 A:middle
So for instance, say
your app allows users

00:06:54.706 --> 00:06:56.436 A:middle
to track both food
intake as well

00:06:56.436 --> 00:06:57.776 A:middle
as body measurements like BMI.

00:06:58.316 --> 00:07:01.376 A:middle
If that's the case, you might
consider requesting access

00:06:58.316 --> 00:07:01.376 A:middle
If that's the case, you might
consider requesting access

00:07:01.406 --> 00:07:04.476 A:middle
to nutrition types the first
time the user tries to log food,

00:07:04.786 --> 00:07:05.966 A:middle
but then requesting access

00:07:06.006 --> 00:07:08.286 A:middle
to body measurement types
whenever the user tries

00:07:08.286 --> 00:07:11.326 A:middle
to log one of those.

00:07:12.326 --> 00:07:13.626 A:middle
One exception to that rule is

00:07:13.626 --> 00:07:15.136 A:middle
if your app has an
on-boarding flow.

00:07:15.686 --> 00:07:17.946 A:middle
If this is the case, it
might actually make sense

00:07:17.986 --> 00:07:20.786 A:middle
to request access to all
the types your app wants

00:07:20.786 --> 00:07:23.726 A:middle
to use upfront because
you're already in a context

00:07:23.726 --> 00:07:26.656 A:middle
where you can clearly explain to
the user what your app is going

00:07:26.656 --> 00:07:27.816 A:middle
to be doing with those types.

00:07:29.466 --> 00:07:32.256 A:middle
Regardless of which you
choose, we definitely recommend

00:07:32.256 --> 00:07:34.176 A:middle
that you frequently
test authorization

00:07:34.176 --> 00:07:34.916 A:middle
during development.

00:07:35.616 --> 00:07:38.196 A:middle
You can easily reset the
initial authorization flow

00:07:38.196 --> 00:07:40.286 A:middle
by deleting your app
off of the device or out

00:07:40.286 --> 00:07:42.886 A:middle
of the simulator before
building and running again

00:07:43.196 --> 00:07:44.756 A:middle
so that HealthKit
presents the user

00:07:44.756 --> 00:07:46.996 A:middle
with the initial authorization
flow all over again.

00:07:48.156 --> 00:07:51.406 A:middle
When you're doing this,
be sure to test cases

00:07:51.406 --> 00:07:53.196 A:middle
where authorization
is either delayed

00:07:53.196 --> 00:07:54.846 A:middle
or completely denied
by the user.

00:07:55.436 --> 00:07:57.216 A:middle
How does your app
function in these cases?

00:07:57.696 --> 00:07:59.166 A:middle
What capabilities are left over?

00:08:00.976 --> 00:08:03.316 A:middle
Finally, if we could
summarize authorization

00:08:03.316 --> 00:08:04.576 A:middle
in one sentence, it's this.

00:08:05.606 --> 00:08:07.146 A:middle
Consider the user experience.

00:08:08.046 --> 00:08:10.396 A:middle
Don't present obstacles
at inopportune times,

00:08:10.396 --> 00:08:16.236 A:middle
and ensure that your
flows make sense.

00:08:16.386 --> 00:08:19.196 A:middle
So we've spent a lot of time
talking about authorization.

00:08:19.336 --> 00:08:21.546 A:middle
Now let's move onto some
new features since last year

00:08:21.546 --> 00:08:23.566 A:middle
in HealthKit, starting
with Activity Rings.

00:08:26.046 --> 00:08:28.846 A:middle
Apple's developed a great health

00:08:28.846 --> 00:08:31.146 A:middle
and fitness tracking
experience for the Apple Watch.

00:08:31.916 --> 00:08:35.076 A:middle
Users love how easy it is to
track key activity metrics

00:08:35.076 --> 00:08:38.426 A:middle
and improve their day, and
now in iOS X and watchOS 3,

00:08:38.426 --> 00:08:40.566 A:middle
users can even share
their Activity Rings

00:08:40.566 --> 00:08:41.816 A:middle
with each other and compete.

00:08:43.635 --> 00:08:45.296 A:middle
Now we're giving you a great way

00:08:45.486 --> 00:08:47.906 A:middle
to incorporate this Activity
Ring experience right

00:08:47.906 --> 00:08:51.606 A:middle
into your app with the
Activity Rings API in iOS 9.3.

00:08:52.296 --> 00:08:57.436 A:middle
To do this, we start with
an HKActivitySummary object.

00:08:59.566 --> 00:09:03.706 A:middle
HKActivitySummary represents
the sum of a user's activity

00:08:59.566 --> 00:09:03.706 A:middle
HKActivitySummary represents
the sum of a user's activity

00:09:03.706 --> 00:09:04.996 A:middle
over the course of a given day.

00:09:05.566 --> 00:09:09.346 A:middle
That includes their move
calories, exercise minutes,

00:09:09.656 --> 00:09:13.846 A:middle
and stand hours, and
their goals for each.

00:09:15.076 --> 00:09:18.776 A:middle
HKActivitySummary is a
distinct type for authorization.

00:09:19.376 --> 00:09:22.146 A:middle
It's not an HKObject, but
rather a special read-only type

00:09:22.206 --> 00:09:24.366 A:middle
that you request
authorization for distinctly

00:09:24.366 --> 00:09:25.426 A:middle
from its component types.

00:09:26.746 --> 00:09:28.076 A:middle
That last part's
really important.

00:09:29.676 --> 00:09:32.946 A:middle
HKActivitySummary covers some of
the same HealthKit information

00:09:32.946 --> 00:09:36.536 A:middle
as the HealthKit types; active
energy, exercise minutes,

00:09:36.626 --> 00:09:41.026 A:middle
and stand hours, but only
on a daily aggregated basis.

00:09:41.206 --> 00:09:44.706 A:middle
So for instance, if you want
to do something more specific

00:09:45.186 --> 00:09:49.076 A:middle
like contribute to a
user's Move ring by writing

00:09:49.076 --> 00:09:52.766 A:middle
to the active energy type or
shown finer grain statistics

00:09:52.766 --> 00:09:55.776 A:middle
for activity over the course
of a given day, in that case,

00:09:55.776 --> 00:09:57.126 A:middle
you'd want to request access

00:09:57.126 --> 00:09:58.946 A:middle
to the constituent
types separately.

00:10:01.046 --> 00:10:04.086 A:middle
Now, because an ActivitySummary
object represents activity

00:10:04.086 --> 00:10:06.306 A:middle
over the course of a given
calendar day, which may

00:10:06.306 --> 00:10:09.326 A:middle
or may not correspond to a
particular 24-hour period,

00:10:09.986 --> 00:10:11.586 A:middle
we specify the day corresponding

00:10:11.586 --> 00:10:14.276 A:middle
to an activity summary using
a DateComponents object.

00:10:15.076 --> 00:10:16.936 A:middle
Let's see how that works
in the following example.

00:10:17.286 --> 00:10:25.006 A:middle
So suppose we want to fetch
the activity summary for today.

00:10:25.566 --> 00:10:28.326 A:middle
To do that, we use an
HKActivitySummaryQuery.

00:10:29.916 --> 00:10:31.496 A:middle
First, we use our calendar

00:10:31.606 --> 00:10:33.866 A:middle
to create a DateComponents
object corresponding

00:10:33.866 --> 00:10:36.456 A:middle
to today using the
required components;

00:10:36.906 --> 00:10:39.556 A:middle
era, year, month, and day.

00:10:41.226 --> 00:10:44.076 A:middle
Next, we use those components
to create a predicate object

00:10:44.166 --> 00:10:45.436 A:middle
that restricts our query

00:10:45.756 --> 00:10:48.416 A:middle
to activity summaries whose
day corresponds to today.

00:10:49.096 --> 00:10:52.886 A:middle
And then finally, we create our
query, pass in the predicate,

00:10:53.156 --> 00:10:55.996 A:middle
and then handle the, in this
case, single activity summary

00:10:55.996 --> 00:10:57.446 A:middle
that should come
back in the response.

00:10:58.096 --> 00:11:03.346 A:middle
So that's how you retrieve
activity summary data,

00:10:58.096 --> 00:11:03.346 A:middle
So that's how you retrieve
activity summary data,

00:11:03.346 --> 00:11:05.766 A:middle
but the really fun part is
showing the rings themselves.

00:11:06.076 --> 00:11:09.256 A:middle
To do that, we use
HKActivityRingView on iOS

00:11:09.366 --> 00:11:12.846 A:middle
or the analogous
WKInterfaceActivityRing

00:11:13.056 --> 00:11:13.826 A:middle
on watchOS.

00:11:14.626 --> 00:11:17.096 A:middle
They look like this, and
just like you'd expect,

00:11:17.256 --> 00:11:18.696 A:middle
they perform this
great animation

00:11:18.846 --> 00:11:21.256 A:middle
when you call
setActivitySummary, animated.

00:11:21.786 --> 00:11:27.076 A:middle
Some tips for using
HKActivityRingView

00:11:27.076 --> 00:11:28.846 A:middle
and WKInterfaceActivityRing.

00:11:30.246 --> 00:11:33.116 A:middle
Firstly, just like in the
health and activity apps on iOS

00:11:33.116 --> 00:11:36.506 A:middle
and watchOS, the rings look
best on a black background,

00:11:36.506 --> 00:11:38.926 A:middle
so we recommend display
them similarly in your apps.

00:11:41.026 --> 00:11:42.716 A:middle
Secondly, if your
app has sharing

00:11:42.716 --> 00:11:45.756 A:middle
and communication features, you
can use the writable properties

00:11:45.756 --> 00:11:48.776 A:middle
of HKActivitySummary to
construct your own object,

00:11:49.136 --> 00:11:53.076 A:middle
supply it to HKActivityRingView
or WKInterfaceActivityRing,

00:11:53.546 --> 00:11:56.086 A:middle
and thereby display another
user's rings alongside the

00:11:56.086 --> 00:11:59.536 A:middle
current user's rings
in your own app.

00:12:00.386 --> 00:12:03.036 A:middle
Finally, when you're using
HKActivitySummaryQuery,

00:12:03.036 --> 00:12:06.296 A:middle
remember to use the required
DateComponents; era, year,

00:12:06.416 --> 00:12:09.276 A:middle
month, and day in your
HKActivitySummaryQuery.

00:12:11.166 --> 00:12:12.796 A:middle
Date map can be notoriously
tricky,

00:12:12.876 --> 00:12:15.486 A:middle
so if you have any
questions about using Calendar

00:12:15.486 --> 00:12:17.886 A:middle
or DateComponents, be sure
to check out this great talk

00:12:17.886 --> 00:12:22.976 A:middle
from a prior conference.

00:12:22.976 --> 00:12:23.996 A:middle
So we've been talking a lot

00:12:23.996 --> 00:12:25.706 A:middle
about authorization
and Activity Rings.

00:12:25.706 --> 00:12:27.516 A:middle
Let's put it into
action with a quick demo.

00:12:28.566 --> 00:12:30.946 A:middle
Here on the right, we
have an up and coming app

00:12:30.946 --> 00:12:32.536 A:middle
for a medical group
called LoopHealth.

00:12:33.276 --> 00:12:34.646 A:middle
This app has some
other features,

00:12:34.646 --> 00:12:37.556 A:middle
but its main page is a dashboard
with some helpful information,

00:12:37.556 --> 00:12:40.946 A:middle
so for instance, your doctor's
name, upcoming appointments,

00:12:41.186 --> 00:12:42.186 A:middle
and some healthy tips.

00:12:43.646 --> 00:12:46.836 A:middle
LoopHealth wants their patients
to live healthier daily lives

00:12:46.836 --> 00:12:48.906 A:middle
as well, so they saw this
as a great opportunity

00:12:48.906 --> 00:12:50.926 A:middle
to incorporate Apple's
Activity Rings right

00:12:50.926 --> 00:12:51.806 A:middle
onto their dashboard.

00:12:52.266 --> 00:12:53.606 A:middle
As you can see here,

00:12:53.606 --> 00:12:56.086 A:middle
we've already dropped
an HKActivityRingView

00:12:56.086 --> 00:12:57.936 A:middle
into the storyboard
for our application,

00:12:58.246 --> 00:12:59.546 A:middle
but we haven't actually
written the code

00:12:59.546 --> 00:13:00.796 A:middle
that hooks it up with data yet.

00:12:59.546 --> 00:13:00.796 A:middle
that hooks it up with data yet.

00:13:01.066 --> 00:13:02.376 A:middle
Let's see how easy
it is to do that.

00:13:03.076 --> 00:13:06.126 A:middle
So over here in Xcode, we
have DashboardViewController.

00:13:06.126 --> 00:13:07.856 A:middle
This is the view controller
we were just looking

00:13:07.856 --> 00:13:09.496 A:middle
at in the LoopHealth app.

00:13:10.146 --> 00:13:11.496 A:middle
It's pretty empty so far,

00:13:11.976 --> 00:13:13.816 A:middle
but we do have some
helpful things filled in.

00:13:14.676 --> 00:13:17.696 A:middle
You can see right here we have
an IBOutlet set up connected

00:13:17.756 --> 00:13:19.786 A:middle
to the activityRingView
that's already in our app.

00:13:21.206 --> 00:13:23.256 A:middle
Up here we import HealthKitUI.

00:13:23.456 --> 00:13:24.936 A:middle
This is the new framework

00:13:24.936 --> 00:13:27.726 A:middle
that you can find
HKActivityRingView in on iOS.

00:13:29.256 --> 00:13:32.036 A:middle
And finally down
here, LoopHealth sets

00:13:32.036 --> 00:13:34.596 A:middle
up its app-wide HKHealthStore
in its app delegate,

00:13:34.656 --> 00:13:37.486 A:middle
so we've just set up a simple
computed property to retrieve it

00:13:37.486 --> 00:13:40.266 A:middle
for convenience when we need it.

00:13:41.346 --> 00:13:44.206 A:middle
Okay, so if we want to show an
activity summary in our app,

00:13:44.276 --> 00:13:46.946 A:middle
the first thing we need to
do is request read access

00:13:46.946 --> 00:13:48.216 A:middle
to HKActivitySummary.

00:13:49.296 --> 00:13:51.676 A:middle
And since we're reading health
data, that means we need

00:13:51.676 --> 00:13:53.086 A:middle
to include a usage description,

00:13:53.316 --> 00:13:57.306 A:middle
so let's go to our info.plist
file and add a new key.

00:13:58.596 --> 00:13:59.926 A:middle
The key we're interested

00:13:59.926 --> 00:14:02.396 A:middle
in is called NSHealthShare
UsageDescription,

00:13:59.926 --> 00:14:02.396 A:middle
in is called NSHealthShare
UsageDescription,

00:14:02.396 --> 00:14:05.466 A:middle
which is written here in plain
English as Privacy Health Share.

00:14:09.076 --> 00:14:11.336 A:middle
Perfect. And I'll drop

00:14:11.336 --> 00:14:13.876 A:middle
in a quick usage
description, and that's it.

00:14:13.876 --> 00:14:14.446 A:middle
We're all set.

00:14:15.806 --> 00:14:17.896 A:middle
Now I can go back to
DashboardViewController

00:14:17.896 --> 00:14:20.396 A:middle
and then write the code that
actually requests authorization.

00:14:21.876 --> 00:14:24.806 A:middle
Since we want to show the
initial prompt to the user

00:14:24.836 --> 00:14:27.216 A:middle
and also update our rings
whenever the user navigates

00:14:27.216 --> 00:14:29.546 A:middle
to the dashboard tab, the
perfect place to do that is

00:14:29.546 --> 00:14:31.136 A:middle
in the viewDidAppear method.

00:14:32.316 --> 00:14:34.356 A:middle
So I'll drop that in here.

00:14:34.356 --> 00:14:37.606 A:middle
And after our requisite
call to super,

00:14:37.606 --> 00:14:39.586 A:middle
notice that we call
RequestAuthorization

00:14:39.586 --> 00:14:43.076 A:middle
on HKHealthStore, pass in
the activity summary type,

00:14:43.076 --> 00:14:46.896 A:middle
and then in the response, we
call updateActivitySummary,

00:14:47.736 --> 00:14:50.056 A:middle
which we'll write to actually
fetch and update the data.

00:14:50.316 --> 00:14:51.346 A:middle
Let's go implement that now.

00:14:52.966 --> 00:14:58.446 A:middle
So here's our skeleton
for updateActivitySummary,

00:14:58.566 --> 00:15:01.246 A:middle
and what we want to
do here is create an

00:14:58.566 --> 00:15:01.246 A:middle
and what we want to
do here is create an

00:15:01.246 --> 00:15:05.876 A:middle
HKActivitySummaryQuery, request
today's activity summary,

00:15:05.926 --> 00:15:07.576 A:middle
and then set that
activity summary

00:15:07.576 --> 00:15:10.296 A:middle
on our HKActivityRingView
once we get it back.

00:15:11.846 --> 00:15:13.796 A:middle
First, let's create a
DateComponents object

00:15:13.796 --> 00:15:14.796 A:middle
corresponding to today.

00:15:16.516 --> 00:15:18.796 A:middle
Since DateComponents only
makes sense in the context

00:15:18.796 --> 00:15:21.286 A:middle
of a particular calendar,
we set the calendar object

00:15:21.286 --> 00:15:25.046 A:middle
that we use back on
the components object.

00:15:26.136 --> 00:15:27.406 A:middle
Oops, perfect.

00:15:28.436 --> 00:15:30.316 A:middle
Next, we can create
our predicate using

00:15:30.316 --> 00:15:34.606 A:middle
that components object, and
once we have the predicate,

00:15:34.786 --> 00:15:37.446 A:middle
we can create our query,
pass in the predicate,

00:15:37.496 --> 00:15:40.796 A:middle
and then in the response,
we grab the single summary

00:15:40.796 --> 00:15:41.986 A:middle
that should come back for today.

00:15:44.596 --> 00:15:46.156 A:middle
Now, once we have that summary,

00:15:46.286 --> 00:15:48.706 A:middle
all we have to do is dispatch
back to the main queue

00:15:48.706 --> 00:15:53.536 A:middle
to update our UI and then
call setActivitySummary,

00:15:53.856 --> 00:15:56.166 A:middle
animated on our Activity
Ring view.

00:15:57.956 --> 00:15:59.776 A:middle
Now that we have our
query, all we have left

00:15:59.776 --> 00:16:04.756 A:middle
to do is execute
it, and that's it.

00:15:59.776 --> 00:16:04.756 A:middle
to do is execute
it, and that's it.

00:16:05.436 --> 00:16:07.806 A:middle
So let's build and run and
see how this all looks.

00:16:23.766 --> 00:16:24.286 A:middle
Excellent.

00:16:24.286 --> 00:16:27.016 A:middle
So first thing you see is now
that we're requesting access

00:16:27.016 --> 00:16:29.756 A:middle
to activity summary,
Health is asking the user

00:16:29.756 --> 00:16:31.076 A:middle
to approve authorization.

00:16:33.406 --> 00:16:35.686 A:middle
Let's approve read access
for our activity type,

00:16:35.686 --> 00:16:37.596 A:middle
and while we're down there,
notice that at the bottom

00:16:37.596 --> 00:16:39.476 A:middle
of the screen, that usage
description that we added

00:16:39.476 --> 00:16:42.046 A:middle
for reading health data is
included and shown to the user.

00:16:42.646 --> 00:16:44.426 A:middle
It's important to note
that in a real app,

00:16:44.426 --> 00:16:46.336 A:middle
we'd want to make sure this
description is localized,

00:16:46.386 --> 00:16:49.356 A:middle
so we'd include that in our
info.plist.strings file instead.

00:16:51.926 --> 00:16:56.536 A:middle
I'll approve authorization
here, and just like that,

00:16:56.536 --> 00:16:59.766 A:middle
we see the Activity Rings
animate beautifully into place.

00:17:00.516 --> 00:17:06.500 A:middle
[ Applause ]

00:17:09.156 --> 00:17:10.215 A:middle
So that's how easy it is

00:17:10.215 --> 00:17:12.336 A:middle
to incorporate Activity Rings
right into your own app.

00:17:12.465 --> 00:17:13.665 A:middle
Be sure to check out the API.

00:17:14.685 --> 00:17:17.066 A:middle
Next, I'll turn it over to
my colleague Jeff who's going

00:17:17.066 --> 00:17:19.576 A:middle
to tell you about an
awesome new feature in iOS X.

00:17:20.516 --> 00:17:25.556 A:middle
[ Applause ]

00:17:26.056 --> 00:17:26.586 A:middle
&gt;&gt; Thanks, Matt.

00:17:27.215 --> 00:17:28.086 A:middle
Good morning, everyone.

00:17:28.676 --> 00:17:30.116 A:middle
My name is Joefrey Kibuule.

00:17:30.656 --> 00:17:33.306 A:middle
I work alongside Matt as
an iOS software engineer

00:17:33.346 --> 00:17:34.056 A:middle
on the Health team.

00:17:34.946 --> 00:17:37.166 A:middle
Today I have the proud
privilege to introduce

00:17:37.166 --> 00:17:40.356 A:middle
to you a new feature of
iOS X, Health Records.

00:17:41.396 --> 00:17:43.946 A:middle
Health Records provides
an easy and portable way

00:17:43.946 --> 00:17:45.896 A:middle
to carry the information
most personal

00:17:45.896 --> 00:17:48.216 A:middle
to you right on your smartphone.

00:17:49.996 --> 00:17:51.966 A:middle
Today the current experience

00:17:52.096 --> 00:17:55.286 A:middle
when users visit a medical
professional and ask

00:17:55.286 --> 00:17:57.646 A:middle
for their health records
afterwards is this.

00:17:58.796 --> 00:18:00.966 A:middle
A stack of documents
which may be cumbersome

00:17:58.796 --> 00:18:00.966 A:middle
A stack of documents
which may be cumbersome

00:18:01.236 --> 00:18:03.596 A:middle
to find a particular
piece of information.

00:18:04.816 --> 00:18:06.226 A:middle
More recently,

00:18:06.226 --> 00:18:09.286 A:middle
health organizations have been
providing their patients this.

00:18:10.296 --> 00:18:14.486 A:middle
CDs of digitized information
which may be unintuitive to use.

00:18:16.936 --> 00:18:19.566 A:middle
But now with Health
Records in iOS,

00:18:19.986 --> 00:18:21.406 A:middle
we can help solve this problem.

00:18:23.676 --> 00:18:25.966 A:middle
Through the work that
we've done in this release,

00:18:26.316 --> 00:18:28.956 A:middle
your apps can start to
unlock new possibilities

00:18:29.626 --> 00:18:31.986 A:middle
in the exchange and
interaction of Health Records.

00:18:32.656 --> 00:18:36.946 A:middle
In fact, in the U.S., adoption

00:18:36.946 --> 00:18:39.686 A:middle
of these APIs can help
health organizations comply

00:18:39.736 --> 00:18:42.276 A:middle
with new regulations
that require them

00:18:42.276 --> 00:18:44.206 A:middle
to give their patients
more control

00:18:44.206 --> 00:18:47.996 A:middle
of their own health data.

00:18:48.176 --> 00:18:49.816 A:middle
So first, an overview.

00:18:50.606 --> 00:18:53.496 A:middle
Health Records in iOS is
an umbrella term we use

00:18:53.666 --> 00:18:54.966 A:middle
to represent a variety

00:18:54.966 --> 00:18:56.936 A:middle
of different patient
visits generated

00:18:56.996 --> 00:18:58.256 A:middle
by health institutions.

00:18:59.636 --> 00:19:01.966 A:middle
Today we're adding
support specifically

00:18:59.636 --> 00:19:01.966 A:middle
Today we're adding
support specifically

00:19:01.966 --> 00:19:03.106 A:middle
for health documents.

00:19:04.636 --> 00:19:06.836 A:middle
Standard machine-readable XML

00:19:06.836 --> 00:19:08.856 A:middle
that represents specific
patient visits.

00:19:10.106 --> 00:19:12.736 A:middle
These include patient
visit summaries,

00:19:13.536 --> 00:19:15.016 A:middle
continuity of care visits,

00:19:15.506 --> 00:19:19.546 A:middle
and operative notes,
just to name a few.

00:19:20.006 --> 00:19:23.136 A:middle
We support the international
HL-7 CDA standard

00:19:23.136 --> 00:19:26.056 A:middle
for interoperability with a
variety of different providers.

00:19:28.216 --> 00:19:29.816 A:middle
These documents are available

00:19:29.816 --> 00:19:31.636 A:middle
through patient healthcare
portals online

00:19:31.696 --> 00:19:38.406 A:middle
and can be imported via Safari,
Mail, and now all of your apps.

00:19:39.716 --> 00:19:41.646 A:middle
These documents are stored just

00:19:41.646 --> 00:19:44.986 A:middle
like all other HealthKit
data safely

00:19:44.986 --> 00:19:49.936 A:middle
and securely encrypted
on your iOS device.

00:19:50.086 --> 00:19:51.906 A:middle
Next, let's talk
about permissions.

00:19:53.186 --> 00:19:55.316 A:middle
Since so much information
is contained

00:19:55.316 --> 00:19:56.566 A:middle
within each health document,

00:19:56.956 --> 00:19:59.406 A:middle
we give the user
additional controls compared

00:19:59.406 --> 00:20:01.566 A:middle
to other data types
in HealthKit.

00:19:59.406 --> 00:20:01.566 A:middle
to other data types
in HealthKit.

00:20:03.076 --> 00:20:06.356 A:middle
Access is granted on a
per-document basis in addition

00:20:06.356 --> 00:20:10.086 A:middle
to the health document
data type.

00:20:10.286 --> 00:20:13.346 A:middle
As shown on the right, we
present the UI in order

00:20:13.346 --> 00:20:15.056 A:middle
to allow the user to both view

00:20:15.056 --> 00:20:17.876 A:middle
and select the document before
granting your app access.

00:20:19.636 --> 00:20:22.946 A:middle
This UI will present it whenever
you query for a document

00:20:23.016 --> 00:20:24.246 A:middle
and a new one is available.

00:20:25.646 --> 00:20:29.146 A:middle
If you query for documents and
none are, nothing has changed,

00:20:30.106 --> 00:20:32.766 A:middle
we will not show
this UI to the user

00:20:32.766 --> 00:20:35.516 A:middle
and your query will return
immediately with results.

00:20:41.236 --> 00:20:43.796 A:middle
If you query for documents
while your application is

00:20:43.796 --> 00:20:47.626 A:middle
in the background, we will
never prompt the user UI

00:20:47.626 --> 00:20:49.416 A:middle
to grant access to
new documents.

00:20:50.096 --> 00:20:52.566 A:middle
HealthKit ensures that
the user is always aware

00:20:52.566 --> 00:20:54.226 A:middle
when they're granting
access to documents

00:20:54.226 --> 00:20:56.436 A:middle
to your apps the
first time it occurs.

00:20:57.026 --> 00:21:02.006 A:middle
Next, let's talk about how to
create a document in HealthKit.

00:20:57.026 --> 00:21:02.006 A:middle
Next, let's talk about how to
create a document in HealthKit.

00:21:04.276 --> 00:21:06.236 A:middle
When saving a document
into HealthKit,

00:21:06.236 --> 00:21:07.716 A:middle
you can save the raw XML

00:21:07.716 --> 00:21:10.986 A:middle
into the new HKCDADocumentSample
type.

00:21:12.636 --> 00:21:15.356 A:middle
We validate on creation
to ensure compliance

00:21:15.356 --> 00:21:18.766 A:middle
with the standard and will
throw errors if this fails.

00:21:21.056 --> 00:21:26.196 A:middle
We automatically extract the
title, patient, custodian,

00:21:26.196 --> 00:21:28.916 A:middle
and author names whenever the
document is saved into HealthKit

00:21:29.296 --> 00:21:32.156 A:middle
in order to make querying
for these fields faster

00:21:32.466 --> 00:21:34.266 A:middle
without needing to read
the entire document.

00:21:34.766 --> 00:21:38.136 A:middle
Let's take a look at
this example in code.

00:21:38.136 --> 00:21:40.286 A:middle
We're going to take
the documentData

00:21:40.286 --> 00:21:42.076 A:middle
and transform it
into a data object.

00:21:42.666 --> 00:21:44.746 A:middle
The origin of this XML
will typically come

00:21:44.746 --> 00:21:46.266 A:middle
from a health organization
server.

00:21:47.646 --> 00:21:51.196 A:middle
We're then going to create a
new HKCDADocumentSample passing

00:21:51.196 --> 00:21:54.506 A:middle
in that data object, setting
the appropriate dates,

00:21:55.116 --> 00:21:58.286 A:middle
and any additional metadata,
just like any other HKSample.

00:21:58.286 --> 00:22:02.126 A:middle
And then we'll save the
document to the healthStore.

00:21:58.286 --> 00:22:02.126 A:middle
And then we'll save the
document to the healthStore.

00:22:02.826 --> 00:22:03.646 A:middle
That's it.

00:22:03.926 --> 00:22:06.986 A:middle
Now your health document is
saved into HealthKit ready

00:22:06.986 --> 00:22:09.206 A:middle
to be used in other
apps or viewed directly

00:22:09.206 --> 00:22:13.136 A:middle
by the user in the Health App.

00:22:13.386 --> 00:22:16.086 A:middle
Now, let's talk about querying
for documents in HealthKit.

00:22:16.776 --> 00:22:21.546 A:middle
Since HKCDADocumentSample
is a subclass of HKSample,

00:22:22.366 --> 00:22:24.776 A:middle
existing query objects you
may be already familiar

00:22:24.776 --> 00:22:26.936 A:middle
with continue to work
just as you'd expect.

00:22:28.266 --> 00:22:30.796 A:middle
However, you need to use
the new HKDocumentQuery

00:22:30.796 --> 00:22:32.416 A:middle
in order to fetch the raw XML.

00:22:32.946 --> 00:22:35.386 A:middle
Fetching the raw XML's
expensive, and we only do

00:22:35.386 --> 00:22:37.706 A:middle
so when explicitly specified.

00:22:39.556 --> 00:22:42.656 A:middle
We provide predicate
support in order to query

00:22:42.656 --> 00:22:48.526 A:middle
for the automatically extracted
fields, and then lastly,

00:22:48.526 --> 00:22:52.476 A:middle
to remember that since
HKDocumentSamples are immutable,

00:22:52.476 --> 00:22:53.396 A:middle
updated information

00:22:53.396 --> 00:22:56.446 A:middle
to previously samples are
considered new samples.

00:22:56.506 --> 00:23:01.276 A:middle
Now, let's take a look at
an example of how to query

00:22:56.506 --> 00:23:01.276 A:middle
Now, let's take a look at
an example of how to query

00:23:01.276 --> 00:23:02.456 A:middle
for documents in HealthKit.

00:23:02.846 --> 00:23:04.346 A:middle
In this example,
we're going to query

00:23:04.346 --> 00:23:06.426 A:middle
for all the documents
a user has stored.

00:23:07.886 --> 00:23:09.706 A:middle
So first, we need to
get the document type.

00:23:09.836 --> 00:23:12.246 A:middle
We're going to pass
the CDA identifier

00:23:12.246 --> 00:23:14.606 A:middle
into the document type
forIdentifier method

00:23:14.606 --> 00:23:15.796 A:middle
on HKObjectType.

00:23:18.386 --> 00:23:20.486 A:middle
We're then going to
create an HKDocumentQuery.

00:23:21.336 --> 00:23:23.146 A:middle
You have additional
fields in order to filter

00:23:23.146 --> 00:23:25.076 A:middle
and order the documents
received back

00:23:25.076 --> 00:23:26.716 A:middle
to you the order
that you'd like.

00:23:27.496 --> 00:23:30.206 A:middle
And then we execute
the query in order

00:23:30.206 --> 00:23:32.956 A:middle
to get the HKCDADocumentSamples
back from HealthKit.

00:23:33.496 --> 00:23:38.096 A:middle
One thing I want to note in
this particular example we set

00:23:38.096 --> 00:23:40.016 A:middle
includeDocumentData to false.

00:23:40.266 --> 00:23:41.896 A:middle
Only ever set it to true

00:23:41.896 --> 00:23:47.496 A:middle
if you need the full
raw XML document data.

00:23:47.676 --> 00:23:50.276 A:middle
Now, let's talk about some
best practices when dealing

00:23:50.276 --> 00:23:52.226 A:middle
with the health documents
in HealthKit.

00:23:53.436 --> 00:23:56.726 A:middle
First, check for validation
errors whenever creating

00:23:56.726 --> 00:23:58.106 A:middle
and HKCDADocumentSample.

00:23:59.356 --> 00:24:01.286 A:middle
The errors will tell
you why we weren't able

00:23:59.356 --> 00:24:01.286 A:middle
The errors will tell
you why we weren't able

00:24:01.286 --> 00:24:07.126 A:middle
to transform your raw
XML into a usable sample.

00:24:07.256 --> 00:24:09.346 A:middle
Next, you should
verify by the Health App

00:24:09.656 --> 00:24:12.746 A:middle
that you imported
were correctly saved

00:24:12.786 --> 00:24:14.876 A:middle
and automatically
extracted fields are present.

00:24:15.726 --> 00:24:17.486 A:middle
This way, you can tell
that queries based

00:24:17.486 --> 00:24:20.506 A:middle
on those automatically extracted
fields return the correct sample

00:24:20.506 --> 00:24:21.326 A:middle
that you'd expect.

00:24:23.096 --> 00:24:26.786 A:middle
And lastly, request the raw
XML data only when you need to.

00:24:27.086 --> 00:24:30.196 A:middle
Queries that don't request,
including document data,

00:24:30.896 --> 00:24:33.246 A:middle
will return the automatically
extracted fields,

00:24:33.246 --> 00:24:35.786 A:middle
and this may be all you
need for you and your users

00:24:35.786 --> 00:24:38.506 A:middle
to uniquely identify a
document in HealthKit.

00:24:40.076 --> 00:24:43.346 A:middle
For more information on
the HL-7 CDA Standard,

00:24:43.346 --> 00:24:44.626 A:middle
visit the link on the screen.

00:24:49.046 --> 00:24:50.236 A:middle
Now, I'd like to switch gears

00:24:50.236 --> 00:24:52.416 A:middle
and offer some general
guidance on handling data.

00:24:52.416 --> 00:24:58.776 A:middle
As you know, HealthKit serves
as a central repository

00:24:58.776 --> 00:25:01.886 A:middle
where your app and other
apps can help contribute

00:24:58.776 --> 00:25:01.886 A:middle
where your app and other
apps can help contribute

00:25:01.886 --> 00:25:03.586 A:middle
to a user's record
of health data.

00:25:05.276 --> 00:25:08.106 A:middle
Your app in cloud service may
also have a direct connection

00:25:08.106 --> 00:25:09.746 A:middle
with another app
in cloud service,

00:25:10.196 --> 00:25:12.526 A:middle
and this may require some
special considerations.

00:25:13.266 --> 00:25:16.156 A:middle
So there are three main topics
that I'd like to discuss

00:25:16.156 --> 00:25:17.556 A:middle
when talking about
handling data.

00:25:18.666 --> 00:25:20.186 A:middle
First, syncing data.

00:25:21.136 --> 00:25:23.116 A:middle
Second, tracking change data.

00:25:23.946 --> 00:25:27.336 A:middle
And third, migrating data.

00:25:27.516 --> 00:25:29.176 A:middle
So first, syncing data.

00:25:30.246 --> 00:25:32.886 A:middle
You should be using
HKAnchoredObjectQuery in order

00:25:32.886 --> 00:25:36.596 A:middle
to handle processing both new
and deleted samples in order

00:25:36.596 --> 00:25:37.946 A:middle
to keep up to date
with HealthKit.

00:25:37.946 --> 00:25:41.916 A:middle
Anchors act as a
bookmark to keep track

00:25:41.916 --> 00:25:44.206 A:middle
of the last query operation
you used to fetch data.

00:25:44.846 --> 00:25:46.996 A:middle
You could save this anchor
for the next time you need

00:25:46.996 --> 00:25:49.086 A:middle
to create a new
HKAnchoredObjectQuery.

00:25:51.586 --> 00:25:53.656 A:middle
You'll open one query
for each sample type

00:25:53.656 --> 00:25:54.536 A:middle
that you're interested in

00:25:55.516 --> 00:25:58.276 A:middle
and then pass an optional
update handler in order

00:25:58.276 --> 00:26:01.936 A:middle
to continuously process new and
deleted samples without needing

00:25:58.276 --> 00:26:01.936 A:middle
to continuously process new and
deleted samples without needing

00:26:01.936 --> 00:26:03.806 A:middle
to unnecessarily
requery HealthKit.

00:26:05.036 --> 00:26:07.686 A:middle
But say for a better
user experience,

00:26:07.936 --> 00:26:08.986 A:middle
in order to have fresh UI

00:26:08.986 --> 00:26:11.096 A:middle
when your application
is first launched,

00:26:11.526 --> 00:26:15.786 A:middle
or to keep your cloud data in
sync, your application needs

00:26:15.786 --> 00:26:18.306 A:middle
to handle processing new
and deleted samples even

00:26:18.306 --> 00:26:19.416 A:middle
when it's currently not running.

00:26:20.516 --> 00:26:22.976 A:middle
That's where HKObserverQuery
working

00:26:22.976 --> 00:26:25.366 A:middle
with HKAnchoredObjectQuery
comes into play.

00:26:25.366 --> 00:26:28.956 A:middle
Let's look at an
example with a diagram.

00:26:30.516 --> 00:26:34.026 A:middle
So there are four
main steps in order

00:26:34.026 --> 00:26:35.816 A:middle
to handle background
updates split

00:26:35.816 --> 00:26:38.976 A:middle
into two phases;
setup and execution.

00:26:39.796 --> 00:26:41.956 A:middle
In the first step,
we're going to register

00:26:41.956 --> 00:26:43.056 A:middle
for background updates.

00:26:43.416 --> 00:26:45.186 A:middle
You need to do this
for every sample type

00:26:45.186 --> 00:26:46.066 A:middle
that you're interested in.

00:26:47.106 --> 00:26:50.166 A:middle
In the second step, you're
going to open an ObserverQuery.

00:26:51.166 --> 00:26:55.106 A:middle
Once set up, the ObserverQuery
will monitor for both new

00:26:55.106 --> 00:26:56.626 A:middle
and deleted samples
in HealthKit.

00:26:58.896 --> 00:27:00.666 A:middle
When new samples are generated,

00:26:58.896 --> 00:27:00.666 A:middle
When new samples are generated,

00:27:00.666 --> 00:27:02.236 A:middle
that's when you have
the third step.

00:27:02.786 --> 00:27:04.626 A:middle
You'll get a callback
from the observer query

00:27:04.816 --> 00:27:07.466 A:middle
and then execute an
HKAnchoredObjectQuery in order

00:27:07.466 --> 00:27:09.456 A:middle
to fetch new and
deleted samples.

00:27:09.976 --> 00:27:12.676 A:middle
And then in the fourth step,

00:27:13.386 --> 00:27:15.886 A:middle
you'll call the observer queries
completion handler in order

00:27:15.886 --> 00:27:17.616 A:middle
to let HealthKit know
that you've processed

00:27:17.616 --> 00:27:19.076 A:middle
and delivered the
background update.

00:27:20.506 --> 00:27:23.426 A:middle
You'll then continue to cycle
between steps three and four

00:27:23.426 --> 00:27:25.186 A:middle
in order to keep up to
date with HealthKit.

00:27:25.186 --> 00:27:33.806 A:middle
Now, let's take a look at this
example one by one in code.

00:27:33.986 --> 00:27:37.256 A:middle
So in the first step, we need to
register for background updates.

00:27:37.646 --> 00:27:40.396 A:middle
Your application needs to do
this every time it's launched,

00:27:40.396 --> 00:27:41.596 A:middle
so we recommend you do it

00:27:41.596 --> 00:27:44.186 A:middle
in application
didFinishLaunching WithOptions.

00:27:45.676 --> 00:27:48.686 A:middle
You'll then grab the step's
quantity type from HKObjectType

00:27:49.416 --> 00:27:52.946 A:middle
and then pass that to HK Health
Store's enableBackgroundDelivery

00:27:52.946 --> 00:27:54.596 A:middle
for, passing in the steps type

00:27:54.596 --> 00:27:56.416 A:middle
and the frequency
you'd like updates.

00:27:57.516 --> 00:28:00.516 A:middle
Do note that background delivery
times are not guaranteed.

00:27:57.516 --> 00:28:00.516 A:middle
Do note that background delivery
times are not guaranteed.

00:28:02.916 --> 00:28:06.296 A:middle
Your application needs to pick
the longest possible frequency

00:28:06.296 --> 00:28:07.526 A:middle
it can handle in order

00:28:07.526 --> 00:28:09.786 A:middle
to preserve a user's
device's battery life.

00:28:11.186 --> 00:28:14.046 A:middle
Also note that this
API is iOS specific.

00:28:14.516 --> 00:28:17.246 A:middle
Background updates are
not available on watchOS.

00:28:17.816 --> 00:28:22.516 A:middle
In the second step, we're going
to pass the step's quantity type

00:28:22.546 --> 00:28:25.746 A:middle
to create the HKAnchored,
the HKObserverQuery.

00:28:26.976 --> 00:28:29.756 A:middle
Here we'll have a
custom updateSteps method

00:28:30.136 --> 00:28:33.026 A:middle
that we can use in order
to know, to fetch new

00:28:33.026 --> 00:28:35.636 A:middle
and deleted samples when
HealthKit detects that.

00:28:36.296 --> 00:28:38.226 A:middle
And then we're going
to execute the query.

00:28:39.046 --> 00:28:39.676 A:middle
That's it.

00:28:39.676 --> 00:28:42.266 A:middle
That completes the setup
process in order for HealthKit

00:28:42.266 --> 00:28:44.526 A:middle
to monitor new and deleted
samples in HealthKit.

00:28:45.486 --> 00:28:49.076 A:middle
So as I'm walking across stage
generating health samples,

00:28:49.816 --> 00:28:54.416 A:middle
step samples, our,
we're going to dive

00:28:54.416 --> 00:28:57.236 A:middle
into the update steps method in
order to know what we need to do

00:28:57.236 --> 00:28:59.146 A:middle
in order to grab new
and deleted samples.

00:28:59.656 --> 00:29:02.506 A:middle
So first, we're going to create
an HKAnchoredObjectQuery,

00:28:59.656 --> 00:29:02.506 A:middle
So first, we're going to create
an HKAnchoredObjectQuery,

00:29:03.006 --> 00:29:04.146 A:middle
passing in the steps type.

00:29:04.536 --> 00:29:07.996 A:middle
You'll also have predicate,
additional fields in order

00:29:07.996 --> 00:29:10.776 A:middle
to filter the particular
samples you'd like.

00:29:13.256 --> 00:29:16.586 A:middle
Then we'll call the handleSteps
method in order to process new

00:29:16.586 --> 00:29:22.586 A:middle
and deleted samples and
then update our anchor

00:29:22.586 --> 00:29:25.506 A:middle
for the next time we need to
create an HKAnchoredObjectQuery.

00:29:27.196 --> 00:29:29.376 A:middle
We then call the
completionHandler in order

00:29:29.376 --> 00:29:32.406 A:middle
to know that we've done
processing fetching new data,

00:29:32.406 --> 00:29:36.076 A:middle
and then we execute the query.

00:29:37.576 --> 00:29:39.246 A:middle
Then lastly, in step four,

00:29:39.346 --> 00:29:41.476 A:middle
we're going to call the
completionHandler given to us

00:29:41.476 --> 00:29:43.986 A:middle
from the observer query in order

00:29:43.986 --> 00:29:45.896 A:middle
to let HealthKit know
we've both received

00:29:45.946 --> 00:29:48.076 A:middle
and processed the
background update.

00:29:48.676 --> 00:29:49.516 A:middle
And that's it.

00:29:49.516 --> 00:29:52.106 A:middle
Now your application will
have a fresh UI on launch

00:29:52.266 --> 00:29:58.816 A:middle
and keep your cloud data in sync
following all of these steps.

00:29:59.046 --> 00:30:01.186 A:middle
Next, let's talk about
tracking change data.

00:29:59.046 --> 00:30:01.186 A:middle
Next, let's talk about
tracking change data.

00:30:02.086 --> 00:30:03.936 A:middle
You should be using
UUIDs in order

00:30:03.936 --> 00:30:06.056 A:middle
to keep tracking of
unique HKObjects.

00:30:09.546 --> 00:30:13.846 A:middle
A unique identifier is set
each time an object is created

00:30:13.846 --> 00:30:15.766 A:middle
and persists for the
lifetime of the sample.

00:30:17.696 --> 00:30:22.286 A:middle
Record UUIDs in your own
data store or both locally

00:30:22.286 --> 00:30:24.186 A:middle
on the device and
remotely in the cloud

00:30:24.266 --> 00:30:28.516 A:middle
so that way you could tell a
particular sample is the same.

00:30:28.736 --> 00:30:31.326 A:middle
Whenever these samples
are deleted, say,

00:30:31.326 --> 00:30:34.766 A:middle
a workout from the Health
App, you should be monitoring

00:30:34.766 --> 00:30:36.426 A:middle
for these changes to
make sure that these,

00:30:36.656 --> 00:30:39.016 A:middle
those same samples are
also deleted again locally

00:30:39.016 --> 00:30:41.686 A:middle
on the device and
remotely in the cloud.

00:30:43.586 --> 00:30:47.626 A:middle
And ensure that future sync
operations don't re-add already

00:30:47.626 --> 00:30:48.496 A:middle
deleted samples.

00:30:49.546 --> 00:30:52.546 A:middle
Now, there are two
potential problems that I'd

00:30:52.546 --> 00:30:55.106 A:middle
like to discuss when
referring talking

00:30:55.106 --> 00:30:56.726 A:middle
about how to avoid duplication.

00:30:57.486 --> 00:30:59.516 A:middle
The first is pre-populating
data.

00:30:59.906 --> 00:31:02.516 A:middle
Pre-populating data is,
I'm sorry, onboarding.

00:30:59.906 --> 00:31:02.516 A:middle
Pre-populating data is,
I'm sorry, onboarding.

00:31:03.096 --> 00:31:05.836 A:middle
Pre-populating data is a
great way during on-boarding

00:31:05.836 --> 00:31:08.056 A:middle
to save the user time
by pulling information

00:31:08.056 --> 00:31:09.766 A:middle
that may already be
stored in HealthKit.

00:31:11.556 --> 00:31:14.846 A:middle
Users have the ability to verify
data that's already in HealthKit

00:31:14.916 --> 00:31:16.256 A:middle
and change it if necessary.

00:31:17.886 --> 00:31:20.676 A:middle
However, the problem is
saving unchanged values.

00:31:21.816 --> 00:31:25.746 A:middle
Be sure only to save data again
if this is the user's intent.

00:31:28.636 --> 00:31:32.866 A:middle
Another additional potential
problem may be ingesting data

00:31:32.926 --> 00:31:34.656 A:middle
both from another
app and HealthKit.

00:31:35.916 --> 00:31:37.886 A:middle
Remember to only pick one source

00:31:37.886 --> 00:31:40.716 A:middle
of information that's most
appropriate to your application.

00:31:41.606 --> 00:31:43.266 A:middle
HealthKit has a great
privacy story

00:31:43.266 --> 00:31:45.316 A:middle
that our users have
already bought into.

00:31:45.316 --> 00:31:50.806 A:middle
However, you know what's, what
source is best for your app.

00:31:51.076 --> 00:31:53.876 A:middle
Make sure not to save
another application's data

00:31:53.876 --> 00:31:54.826 A:middle
on their behalf.

00:31:56.276 --> 00:31:59.876 A:middle
Writing only your data once
avoids duplicating data

00:31:59.876 --> 00:32:02.676 A:middle
by simplifying which
app's responsibility it is

00:31:59.876 --> 00:32:02.676 A:middle
by simplifying which
app's responsibility it is

00:32:02.676 --> 00:32:03.186 A:middle
to write it.

00:32:04.086 --> 00:32:06.376 A:middle
There is one particular
exception for this rule.

00:32:06.406 --> 00:32:08.266 A:middle
Sometimes duplication
is intentional.

00:32:09.516 --> 00:32:11.936 A:middle
For example, if data's
coming from multiple sources.

00:32:12.636 --> 00:32:17.346 A:middle
If a data, step data is
generated both on a user's phone

00:32:17.346 --> 00:32:23.106 A:middle
and his or her Apple Watch,
you can use HKStatisticsQuery

00:32:23.136 --> 00:32:25.716 A:middle
and HKStatisticsCollectionQuery
in order

00:32:25.716 --> 00:32:28.846 A:middle
to automatically
de-duplicate data by the order

00:32:28.846 --> 00:32:32.646 A:middle
of the preferred data sources
that exist in the Health App.

00:32:32.646 --> 00:32:35.506 A:middle
This way, our users get
a consistent experience

00:32:35.726 --> 00:32:38.276 A:middle
of the view of their health
data throughout our ecosystem.

00:32:38.346 --> 00:32:42.076 A:middle
Now, I want to talk
about migrating data.

00:32:42.646 --> 00:32:45.456 A:middle
Let's say that you've launched
a new Bluetooth thermometer

00:32:45.566 --> 00:32:47.496 A:middle
and app that writes
data into HealthKit.

00:32:48.326 --> 00:32:50.896 A:middle
Your application has been in
the App Store for a few days,

00:32:50.976 --> 00:32:52.686 A:middle
but your users discover
a problem.

00:32:53.446 --> 00:32:57.786 A:middle
In certain locales, instead of
saving 98 degrees Fahrenheit,

00:32:58.656 --> 00:33:01.316 A:middle
you actually save
98 degrees Celsius.

00:32:58.656 --> 00:33:01.316 A:middle
you actually save
98 degrees Celsius.

00:33:01.706 --> 00:33:03.066 A:middle
That's a bit warm.

00:33:04.116 --> 00:33:06.826 A:middle
But in this case, we know
exactly how we can migrate this

00:33:06.906 --> 00:33:08.416 A:middle
data in order to fix it.

00:33:08.866 --> 00:33:14.796 A:middle
We first need to find old
samples, write new samples,

00:33:14.846 --> 00:33:17.276 A:middle
making sure to update
UUID stored elsewhere,

00:33:17.276 --> 00:33:20.756 A:middle
and then delete old samples.

00:33:22.856 --> 00:33:25.656 A:middle
Now, a few new things
regarding the flow of data

00:33:25.656 --> 00:33:27.386 A:middle
between iPhone and Apple Watch.

00:33:28.916 --> 00:33:32.036 A:middle
Starting in iOS 9.3,
data originating

00:33:32.036 --> 00:33:34.176 A:middle
on a user's phone will
now sync back to all

00:33:34.176 --> 00:33:35.316 A:middle
of their paired Apple Watches.

00:33:35.576 --> 00:33:37.446 A:middle
Apple Watch is now a reflection

00:33:37.446 --> 00:33:39.366 A:middle
of the most recent
health data stored

00:33:39.366 --> 00:33:40.966 A:middle
within the HealthKit ecosystem.

00:33:41.106 --> 00:33:43.996 A:middle
In order to accomplish this,

00:33:44.376 --> 00:33:47.456 A:middle
samples are now periodically
pruned based off their end date

00:33:47.586 --> 00:33:49.246 A:middle
on Apple Watch.

00:33:52.496 --> 00:33:54.276 A:middle
Make sure to save samples

00:33:54.276 --> 00:33:58.246 A:middle
after HKHealthStore's earliest
permitted sample date in order

00:33:58.246 --> 00:34:00.256 A:middle
to make sure your samples
are correctly saved

00:33:58.246 --> 00:34:00.256 A:middle
to make sure your samples
are correctly saved

00:34:00.706 --> 00:34:03.106 A:middle
and synced back to
a user's device.

00:34:05.016 --> 00:34:07.716 A:middle
Lastly, sync times
are not guaranteed.

00:34:08.985 --> 00:34:12.096 A:middle
You should be saving
data on either iPhone

00:34:12.096 --> 00:34:14.786 A:middle
or Apple Watch, not both.

00:34:17.416 --> 00:34:20.636 A:middle
Now, I'm going to hand it back
off to Matt, who's going to wrap

00:34:20.636 --> 00:34:21.775 A:middle
up the rest of our session.

00:34:22.216 --> 00:34:24.416 A:middle
Thank you, everyone,
and have a great WWDC.

00:34:25.516 --> 00:34:29.906 A:middle
[ Applause ]

00:34:30.406 --> 00:34:30.926 A:middle
&gt;&gt; Thank you, Jeff.

00:34:31.386 --> 00:34:35.585 A:middle
Before we wrap up, I'd like to
highlight one awesome additional

00:34:35.585 --> 00:34:38.735 A:middle
feature that's brand new
in iOS X and watchOS 3.

00:34:40.376 --> 00:34:41.606 A:middle
Wheelchair support.

00:34:43.136 --> 00:34:46.556 A:middle
Accessibility is extremely
important to use here at Apple.

00:34:47.216 --> 00:34:50.585 A:middle
All of our and your users
deserve to enjoy our products

00:34:50.585 --> 00:34:52.616 A:middle
and experiences as
much as possible,

00:34:52.766 --> 00:34:55.315 A:middle
and the great activity
tracking experience we brought

00:34:55.315 --> 00:34:57.056 A:middle
to Apple Watch is no exception.

00:34:58.466 --> 00:35:02.446 A:middle
iOS X and watchOS 3 include
great new motion-tracking

00:34:58.466 --> 00:35:02.446 A:middle
iOS X and watchOS 3 include
great new motion-tracking

00:35:02.446 --> 00:35:05.276 A:middle
features that automatically
record data important

00:35:05.276 --> 00:35:06.146 A:middle
to wheelchair users.

00:35:06.766 --> 00:35:09.676 A:middle
And now you can work with
and contribute to those types

00:35:09.796 --> 00:35:11.296 A:middle
when you're interacting
with HealthKit.

00:35:11.766 --> 00:35:16.506 A:middle
First, there's a new
characteristic data type,

00:35:16.756 --> 00:35:19.796 A:middle
HKWheelchairUse that
identifies whether the user uses

00:35:19.796 --> 00:35:20.346 A:middle
a wheelchair.

00:35:20.836 --> 00:35:23.856 A:middle
The value can be yes,
no, or indeterminate.

00:35:24.326 --> 00:35:27.746 A:middle
Next, we have some new
quantity types specific

00:35:27.746 --> 00:35:28.626 A:middle
to wheelchair users.

00:35:28.776 --> 00:35:31.896 A:middle
Those include wheelchair
distance and push count,

00:35:31.896 --> 00:35:33.966 A:middle
which you can think
of like step count.

00:35:35.096 --> 00:35:37.826 A:middle
Finally, we have some new
workout types important

00:35:37.826 --> 00:35:39.096 A:middle
to wheelchair users as well.

00:35:39.376 --> 00:35:42.776 A:middle
Those include wheelchair walk
pace and wheelchair run pace.

00:35:46.796 --> 00:35:49.166 A:middle
When a wheelchair user
is using Apple Watch,

00:35:49.276 --> 00:35:51.686 A:middle
the watch automatically
records wheelchair pushes

00:35:51.756 --> 00:35:53.216 A:middle
to the new push count data type.

00:35:54.206 --> 00:35:57.006 A:middle
In addition, the stand
ring corresponding

00:35:57.006 --> 00:36:00.346 A:middle
to the stand hours data type
instead becomes roll hours.

00:35:57.006 --> 00:36:00.346 A:middle
to the stand hours data type
instead becomes roll hours.

00:36:01.636 --> 00:36:04.956 A:middle
Be aware that wheelchair
distance is only automatically

00:36:04.956 --> 00:36:08.556 A:middle
recorded during a wheelchair
workout and also be aware

00:36:09.096 --> 00:36:12.016 A:middle
that a user's wheelchair
status can change over time.

00:36:12.596 --> 00:36:13.676 A:middle
This is really important

00:36:13.676 --> 00:36:15.446 A:middle
if you're querying
for historical data.

00:36:15.856 --> 00:36:18.006 A:middle
In this case, you want to
make sure that you query

00:36:18.186 --> 00:36:21.316 A:middle
for both wheelchair types
and non-wheelchair types

00:36:21.316 --> 00:36:23.536 A:middle
so that you're not potentially
leaving out a big chunk

00:36:23.536 --> 00:36:25.786 A:middle
of the user's historical
information.

00:36:26.456 --> 00:36:30.276 A:middle
To sum up, we work really
hard to make sure that all

00:36:30.276 --> 00:36:33.056 A:middle
of our products and experiences
are accessible to everyone.

00:36:33.466 --> 00:36:34.076 A:middle
You should too.

00:36:34.756 --> 00:36:37.496 A:middle
We strongly encourage you to
reach this important segment

00:36:37.496 --> 00:36:40.116 A:middle
of our users by supporting
and contributing

00:36:40.116 --> 00:36:42.956 A:middle
to wheelchair data
types in your apps.

00:36:44.716 --> 00:36:48.196 A:middle
So we've talked about
a lot today.

00:36:48.516 --> 00:36:49.166 A:middle
Let's recap.

00:36:50.916 --> 00:36:53.206 A:middle
Authorization is
extremely important

00:36:53.206 --> 00:36:54.756 A:middle
for protecting users' privacy,

00:36:54.996 --> 00:36:58.056 A:middle
but getting the user experience
right is absolutely key.

00:36:59.206 --> 00:37:01.726 A:middle
Keep authorization in mind when
you're developing your app,

00:36:59.206 --> 00:37:01.726 A:middle
Keep authorization in mind when
you're developing your app,

00:37:01.896 --> 00:37:03.386 A:middle
and be sure to test it often.

00:37:03.866 --> 00:37:08.256 A:middle
Next, fit in with Apple's
health and fitness ecosystem

00:37:08.356 --> 00:37:10.896 A:middle
by incorporating the Activity
Rings right into your app

00:37:11.056 --> 00:37:14.776 A:middle
with the Activity Rings API.

00:37:15.026 --> 00:37:16.596 A:middle
Whenever you're interacting
with HealthKit,

00:37:16.956 --> 00:37:19.996 A:middle
take care to handle all cases
where data is synchronized,

00:37:19.996 --> 00:37:22.756 A:middle
deleted, or duplicated
properly to ensure

00:37:22.756 --> 00:37:24.906 A:middle
that your users' data
is always precise

00:37:25.246 --> 00:37:28.336 A:middle
and always what you'd expect.

00:37:28.886 --> 00:37:31.726 A:middle
And finally, don't forget to
take advantage of the great,

00:37:31.726 --> 00:37:34.106 A:middle
new features we've
introduced this year in iOS X

00:37:34.106 --> 00:37:37.306 A:middle
and watchOS 3, especially
wheelchair support,

00:37:37.556 --> 00:37:39.536 A:middle
something we think is
extremely important.

00:37:41.656 --> 00:37:44.576 A:middle
If you'd like more
information about any

00:37:44.576 --> 00:37:45.876 A:middle
of the things we
talked about today

00:37:45.876 --> 00:37:48.116 A:middle
or if you have any questions,
please visit this site.

00:37:48.116 --> 00:37:50.236 A:middle
We have lots of additional
resources available.

00:37:50.796 --> 00:37:55.126 A:middle
And don't forget to check out
our related sessions as well.

00:37:55.896 --> 00:37:58.246 A:middle
We also have these great
sessions from previous years

00:37:58.246 --> 00:37:59.906 A:middle
if you want to get up
to speed on HealthKit.

00:38:00.526 --> 00:38:02.186 A:middle
Thank you for creating
your great apps

00:38:02.186 --> 00:38:04.036 A:middle
that help users live
healthier lives

00:38:04.036 --> 00:38:06.476 A:middle
and enjoy the rest of your WWDC.

00:38:07.508 --> 00:38:09.508 A:middle
[ Applause ]
