WEBVTT

00:00:07.516 --> 00:00:20.516 A:middle
[ Music ]

00:00:21.516 --> 00:00:23.636 A:middle
[ Applause ]

00:00:24.136 --> 00:00:26.976 A:middle
&gt;&gt; Welcome to Mastering
UIKit on tvOS.

00:00:27.706 --> 00:00:28.446 A:middle
My name's Justin.

00:00:28.496 --> 00:00:29.446 A:middle
I work on UIKit.

00:00:29.806 --> 00:00:32.336 A:middle
And I am here to show you how
you can go beyond the basics

00:00:32.386 --> 00:00:35.506 A:middle
and really take your tvOS
app to the next level.

00:00:35.666 --> 00:00:38.276 A:middle
So to do that, there's
a few things that I want

00:00:38.276 --> 00:00:39.326 A:middle
to talk to you about today.

00:00:39.446 --> 00:00:40.846 A:middle
And the first is event handling.

00:00:41.326 --> 00:00:43.056 A:middle
What kind of events is
your app going to receive,

00:00:43.056 --> 00:00:45.646 A:middle
and what are the best ways for
you to handle those events?

00:00:46.556 --> 00:00:48.246 A:middle
Then I'd like to talk
about layered images.

00:00:48.676 --> 00:00:51.326 A:middle
This is a user interface
element that's unique to tvOS,

00:00:51.326 --> 00:00:55.046 A:middle
and we'll show you how to
really take advantage of it.

00:00:55.296 --> 00:00:56.576 A:middle
Thirdly, we'll talk
about scrolling.

00:00:56.936 --> 00:00:58.986 A:middle
Scrolling on tvOS works
a little bit differently

00:00:58.986 --> 00:00:59.686 A:middle
than scrolling on iOS.

00:00:59.686 --> 00:01:01.546 A:middle
And we'll show you how
you really take control

00:00:59.686 --> 00:01:01.546 A:middle
And we'll show you how
you really take control

00:01:01.546 --> 00:01:02.056 A:middle
of scrolling.

00:01:02.056 --> 00:01:05.456 A:middle
And finally, we'll
talk about text input

00:01:05.706 --> 00:01:07.286 A:middle
and how you can use
the system keyboard

00:01:07.286 --> 00:01:08.736 A:middle
to accept text from users.

00:01:09.256 --> 00:01:11.436 A:middle
So let's get started and dive
right into event handling.

00:01:12.486 --> 00:01:13.836 A:middle
So when it comes
to event handling,

00:01:14.406 --> 00:01:16.606 A:middle
there are a few overall best
practices that I want to share

00:01:16.606 --> 00:01:17.306 A:middle
with you right off the bat.

00:01:17.936 --> 00:01:21.696 A:middle
And the first is, is that when
it comes to allowing your users

00:01:21.696 --> 00:01:24.646 A:middle
to navigate your application
and to move focus from one item

00:01:24.646 --> 00:01:26.506 A:middle
to another, you don't
need to write any

00:01:26.506 --> 00:01:27.946 A:middle
of your own event
handling code at all.

00:01:28.256 --> 00:01:30.606 A:middle
The focus engine is going take
care of all of that for you,

00:01:31.306 --> 00:01:33.966 A:middle
including handling different
kinds of events based

00:01:33.966 --> 00:01:36.386 A:middle
on what kind of input device
the user is currently using.

00:01:36.386 --> 00:01:37.866 A:middle
So it'll take care of
all of that for you.

00:01:40.926 --> 00:01:44.026 A:middle
Secondly, if you decide you do
need to start handling events,

00:01:44.026 --> 00:01:46.336 A:middle
I recommend that you start
with UIGestureRecognizer.

00:01:46.656 --> 00:01:48.276 A:middle
Not only to have a
really expressive API,

00:01:48.276 --> 00:01:51.316 A:middle
but it'll also help ensure all
of the gestures and interactions

00:01:51.316 --> 00:01:52.886 A:middle
in your app are going
to be consistent

00:01:52.886 --> 00:01:54.666 A:middle
across all the system
apps and other apps.

00:01:57.236 --> 00:01:59.386 A:middle
And finally, as you are
designing the interaction model

00:01:59.386 --> 00:02:00.746 A:middle
for your application,
keep in mind

00:01:59.386 --> 00:02:00.746 A:middle
for your application,
keep in mind

00:02:00.746 --> 00:02:03.446 A:middle
that not every input device can
generate every kind of event.

00:02:03.726 --> 00:02:06.266 A:middle
So for example, a user might
be using a game controller

00:02:06.266 --> 00:02:07.596 A:middle
to navigate to your application.

00:02:07.856 --> 00:02:09.826 A:middle
And game controllers can't
generate touch events.

00:02:10.145 --> 00:02:12.776 A:middle
So you might not want to use
touch events as the only way

00:02:12.776 --> 00:02:13.836 A:middle
to interact with
your application.

00:02:13.916 --> 00:02:16.556 A:middle
So keep that in mind as
you are designing your app.

00:02:17.846 --> 00:02:20.386 A:middle
So speaking of touches,
we have touches

00:02:20.386 --> 00:02:23.376 A:middle
on tvOS using the touch
surface on the Siri remote.

00:02:23.646 --> 00:02:26.106 A:middle
And we deliver them to you
using UITouch, which is an API

00:02:26.106 --> 00:02:27.756 A:middle
that you might recognize
from iOS.

00:02:28.226 --> 00:02:30.996 A:middle
And a touch represents the
contact between a user's finger

00:02:31.246 --> 00:02:32.886 A:middle
and that surface on the remote.

00:02:34.936 --> 00:02:36.436 A:middle
This is just like
the iOS version.

00:02:36.436 --> 00:02:37.936 A:middle
It has the location and
all the other properties

00:02:37.936 --> 00:02:39.686 A:middle
that you are used to.

00:02:39.956 --> 00:02:41.646 A:middle
But there is one important
difference between touches

00:02:41.646 --> 00:02:43.306 A:middle
on tvOS and touches on iOS.

00:02:43.766 --> 00:02:45.696 A:middle
A touch on iOS is
happening directly

00:02:45.696 --> 00:02:46.746 A:middle
onto the user interface.

00:02:46.746 --> 00:02:48.936 A:middle
The user is physically
touching the UI.

00:02:49.906 --> 00:02:51.286 A:middle
That's not the case on tvOS.

00:02:51.346 --> 00:02:52.946 A:middle
The user interface
is 10 feet away,

00:02:52.946 --> 00:02:54.706 A:middle
and the user is touching
their remote.

00:02:55.286 --> 00:02:58.356 A:middle
And so we bucket these into
two different categories.

00:02:58.356 --> 00:03:00.346 A:middle
We say the ones on iOS
are direct touches,

00:02:58.356 --> 00:03:00.346 A:middle
We say the ones on iOS
are direct touches,

00:03:00.346 --> 00:03:02.846 A:middle
and the ones tvOS are
considered indirect touches.

00:03:03.226 --> 00:03:05.646 A:middle
And we have this touch type
called UITouchTypeIndirect

00:03:05.646 --> 00:03:09.506 A:middle
to help you tell the difference
between the two of those.

00:03:09.606 --> 00:03:12.696 A:middle
And because of this indirection,
if you were to ask the UITouch,

00:03:12.746 --> 00:03:14.036 A:middle
"What's your location onscreen?"

00:03:14.566 --> 00:03:17.916 A:middle
on a direct touch interface
that's a pretty obvious answer.

00:03:17.956 --> 00:03:19.946 A:middle
We give you a location
that maps exactly

00:03:19.946 --> 00:03:21.296 A:middle
where the user's
finger is on the screen.

00:03:21.956 --> 00:03:23.736 A:middle
But on tvOS, the user
isn't touching the screen.

00:03:23.796 --> 00:03:25.716 A:middle
What location should we
report for the touch?

00:03:25.896 --> 00:03:28.416 A:middle
And so what we do in this
case is that no matter

00:03:28.416 --> 00:03:30.616 A:middle
where the user's finger
begins touching the remote,

00:03:30.616 --> 00:03:32.656 A:middle
we always deliver the
touch to your application

00:03:32.706 --> 00:03:35.526 A:middle
as if it had begun directly in
the center of the focused view.

00:03:35.866 --> 00:03:37.486 A:middle
And this is really
great, because it means

00:03:37.486 --> 00:03:39.926 A:middle
that any gesture recognizers
or event handling logic

00:03:39.926 --> 00:03:41.026 A:middle
that you might have attached

00:03:41.026 --> 00:03:43.276 A:middle
to the focused view will
always have an opportunity

00:03:43.276 --> 00:03:44.316 A:middle
to participate in the gesture.

00:03:44.316 --> 00:03:48.886 A:middle
One thing that we don't expose
is the absolute location

00:03:48.886 --> 00:03:50.356 A:middle
of the user's finger
on the track pad.

00:03:50.356 --> 00:03:51.916 A:middle
And there is a few
reasons why we do that,

00:03:51.916 --> 00:03:53.976 A:middle
but one of the really important
ones is that that we want

00:03:53.976 --> 00:03:55.706 A:middle
to discourage pointer-based
UIs on tvOS.

00:03:55.706 --> 00:03:58.196 A:middle
We don't want to see
anything like mouse cursors

00:03:58.196 --> 00:03:59.016 A:middle
or anything like that.

00:03:59.166 --> 00:04:01.186 A:middle
We'd really rather
that applications stick

00:03:59.166 --> 00:04:01.186 A:middle
We'd really rather
that applications stick

00:04:01.186 --> 00:04:05.386 A:middle
to the focus interaction
model that we have created.

00:04:05.496 --> 00:04:08.026 A:middle
So in addition to touches, there
is also another kind of event

00:04:08.026 --> 00:04:09.886 A:middle
that you'll get on tvOS; and
these are called presses.

00:04:10.346 --> 00:04:12.986 A:middle
And presses are delivered
using the classical UIPress.

00:04:13.336 --> 00:04:16.456 A:middle
And a press represents an
actual physical hardware button

00:04:16.456 --> 00:04:17.606 A:middle
that the user is
interacting with.

00:04:18.586 --> 00:04:21.796 A:middle
And not all of those buttons are
simply pressed or not pressed.

00:04:21.796 --> 00:04:23.316 A:middle
Some buttons, like those
on game controllers,

00:04:23.316 --> 00:04:24.156 A:middle
are pressure sensitive.

00:04:24.156 --> 00:04:26.446 A:middle
But we can actually detect how
firmly the user is pressing the

00:04:26.446 --> 00:04:28.336 A:middle
button, and we can deliver
that information to you.

00:04:28.876 --> 00:04:32.816 A:middle
You can recognize presses
using UIGestureRecognizer,

00:04:32.816 --> 00:04:34.616 A:middle
including things like
TapGestureRecognizer

00:04:34.906 --> 00:04:36.626 A:middle
and LongPressGestureRecognizer.

00:04:36.796 --> 00:04:39.746 A:middle
And we have low-level
press handling events

00:04:39.746 --> 00:04:40.706 A:middle
that follow the same pattern

00:04:40.706 --> 00:04:42.076 A:middle
as a low-level touch
handling event.

00:04:42.116 --> 00:04:44.536 A:middle
So we have pressesBegan,
which fires as soon

00:04:44.536 --> 00:04:46.006 A:middle
as the user begins
depressing the button.

00:04:46.356 --> 00:04:48.086 A:middle
We have pressesChanged,
which will be delivered

00:04:48.086 --> 00:04:49.396 A:middle
if it's a pressure-sensitive
button

00:04:49.396 --> 00:04:50.786 A:middle
and the amount of
pressure changes.

00:04:51.506 --> 00:04:53.666 A:middle
And we also have pressesEnded
and pressesCancelled.

00:04:53.826 --> 00:04:54.856 A:middle
And just like touchesCancelled,

00:04:54.906 --> 00:04:56.806 A:middle
yes you really do
have to implement it.

00:04:57.696 --> 00:04:59.706 A:middle
There's one thing to
know about these methods,

00:04:59.846 --> 00:05:01.306 A:middle
which is that press events

00:04:59.846 --> 00:05:01.306 A:middle
which is that press events

00:05:01.306 --> 00:05:03.786 A:middle
because they don't really have
a location they get delivered

00:05:03.786 --> 00:05:04.866 A:middle
directly to the focus view.

00:05:04.866 --> 00:05:06.976 A:middle
And they go up the
responder chain from there.

00:05:07.046 --> 00:05:09.146 A:middle
They won't go to any child
views of the focus views.

00:05:09.146 --> 00:05:11.436 A:middle
So keep that in mind when
you are deciding what view

00:05:11.436 --> 00:05:12.736 A:middle
to attach gesture
recognizers to.

00:05:12.976 --> 00:05:16.786 A:middle
Okay, so we are talking
a lot about presses.

00:05:16.786 --> 00:05:18.626 A:middle
Let's go through some of the
press types that are available

00:05:18.626 --> 00:05:20.826 A:middle
to you and what buttons
will trigger them

00:05:20.826 --> 00:05:21.976 A:middle
on various input devices.

00:05:22.056 --> 00:05:25.946 A:middle
So I want to show you the
Siri remote, the Apple remote

00:05:25.946 --> 00:05:27.226 A:middle
from previous-generation
Apple TVs,

00:05:27.226 --> 00:05:29.806 A:middle
and I want to show
you game controllers.

00:05:30.006 --> 00:05:31.206 A:middle
And I don't have room
on the slides here,

00:05:31.206 --> 00:05:33.146 A:middle
but keep in mind presses
can also be generated

00:05:33.146 --> 00:05:35.546 A:middle
from programmable
universal remotes and also

00:05:35.546 --> 00:05:36.496 A:middle
from Bluetooth keyboards.

00:05:36.496 --> 00:05:40.506 A:middle
So there is a lot of
ways to get presses.

00:05:40.536 --> 00:05:42.196 A:middle
Probably the most common
press type you'll encounter

00:05:42.196 --> 00:05:43.406 A:middle
is UIPressTypeSelect.

00:05:43.406 --> 00:05:45.766 A:middle
And this is the press type that
represents that the user wants

00:05:45.766 --> 00:05:47.726 A:middle
to activate a control or select

00:05:47.726 --> 00:05:49.306 A:middle
on a CollectionView cell,
something like that.

00:05:49.306 --> 00:05:50.986 A:middle
And on the Siri remote,

00:05:50.986 --> 00:05:52.656 A:middle
that's the button that's
actually underneath the touch

00:05:52.656 --> 00:05:53.616 A:middle
surface on the remote.

00:05:54.836 --> 00:05:56.816 A:middle
On the Apple remote,
that's the silver circle.

00:05:56.816 --> 00:05:58.646 A:middle
And on game controllers
we use the A button

00:05:58.646 --> 00:06:01.636 A:middle
to generate this press type.

00:05:58.646 --> 00:06:01.636 A:middle
to generate this press type.

00:06:01.856 --> 00:06:03.306 A:middle
Another really common
press type you'll encounter

00:06:03.306 --> 00:06:04.466 A:middle
is UIPressTypeMenu.

00:06:04.466 --> 00:06:05.386 A:middle
And this is the press type

00:06:05.386 --> 00:06:07.046 A:middle
that indicates the
user wants to go back.

00:06:07.306 --> 00:06:09.256 A:middle
They want to dismiss a
presented view controller

00:06:09.256 --> 00:06:11.096 A:middle
or even dismiss your
application entirely

00:06:11.096 --> 00:06:12.076 A:middle
and return to the Home screen.

00:06:12.656 --> 00:06:14.596 A:middle
And in all three of
these on the screen,

00:06:14.596 --> 00:06:16.176 A:middle
that'll be the button
that says Menu.

00:06:17.516 --> 00:06:20.296 A:middle
And on game controllers, we
will also use the B button.

00:06:20.716 --> 00:06:24.696 A:middle
And finally, there is
UIPressTypePlayPause.

00:06:24.896 --> 00:06:27.766 A:middle
And this is obviously useful
for pausing or playing content,

00:06:27.946 --> 00:06:29.676 A:middle
but it can also be used
as sort of a shortcut

00:06:29.676 --> 00:06:30.676 A:middle
in addition to Select.

00:06:30.676 --> 00:06:33.346 A:middle
So if the users focus
on, say, a movie poster,

00:06:33.606 --> 00:06:36.106 A:middle
pressing the Select button might
show the details for the movie.

00:06:36.276 --> 00:06:37.896 A:middle
But pressing Play/Pause
will just jump straight

00:06:37.896 --> 00:06:38.416 A:middle
into playback.

00:06:39.236 --> 00:06:41.676 A:middle
And so that's the
icon that has the --

00:06:41.676 --> 00:06:43.656 A:middle
or the button that has
the Play/Pause icon on it.

00:06:43.656 --> 00:06:45.606 A:middle
And on game controllers
we'll use the X button

00:06:45.606 --> 00:06:47.036 A:middle
to generate that press type.

00:06:48.506 --> 00:06:49.536 A:middle
Okay, so to round things

00:06:49.536 --> 00:06:50.916 A:middle
out there is just a
few more press types,

00:06:50.916 --> 00:06:52.696 A:middle
and these are directional
presses.

00:06:52.696 --> 00:06:55.366 A:middle
So we have up, down, left,
and right arrow presses

00:06:55.366 --> 00:06:56.166 A:middle
that can be generated.

00:06:56.216 --> 00:06:59.766 A:middle
On the Apple remote we use
the four directional buttons.

00:06:59.766 --> 00:07:02.506 A:middle
On game controllers there is
lots of ways to get these.

00:06:59.766 --> 00:07:02.506 A:middle
On game controllers there is
lots of ways to get these.

00:07:02.506 --> 00:07:04.286 A:middle
So we'll use the D pad.

00:07:04.966 --> 00:07:07.256 A:middle
We'll also use the
directional analog stick.

00:07:07.256 --> 00:07:09.196 A:middle
And we'll even generate left

00:07:09.196 --> 00:07:10.976 A:middle
and right presses using
the shoulder buttons

00:07:10.976 --> 00:07:11.646 A:middle
on the game controller.

00:07:12.796 --> 00:07:14.556 A:middle
Now there aren't any
discrete hardware buttons

00:07:14.556 --> 00:07:16.526 A:middle
for these arrows on the serial
remote, so you might think

00:07:16.526 --> 00:07:18.096 A:middle
that it's not possible
to generate these there

00:07:18.096 --> 00:07:19.086 A:middle
but that's actually not true.

00:07:19.486 --> 00:07:22.016 A:middle
If you do a touch tap you
are not pressing all the way

00:07:22.016 --> 00:07:23.576 A:middle
down on the Select
button but just touching

00:07:23.576 --> 00:07:25.706 A:middle
on these four cardinal
points on the surface.

00:07:26.086 --> 00:07:27.306 A:middle
Then UIKit will detect that

00:07:27.306 --> 00:07:29.246 A:middle
and actually generate
arrow presses for you.

00:07:29.246 --> 00:07:31.566 A:middle
And this is a really
convenient way to navigate

00:07:31.566 --> 00:07:33.946 A:middle
through your user interface
exactly one item at a time.

00:07:34.326 --> 00:07:36.486 A:middle
So just because the user
is using the Siri remote,

00:07:36.596 --> 00:07:38.406 A:middle
that doesn't mean that they
can't generate arrow presses.

00:07:38.676 --> 00:07:42.916 A:middle
Okay, so I promised you that
you can use gesture recognizers

00:07:42.916 --> 00:07:43.636 A:middle
to recognize these.

00:07:43.636 --> 00:07:45.136 A:middle
And I won't go through these
in detail, but I just want

00:07:45.136 --> 00:07:46.426 A:middle
to show you a few
quick examples.

00:07:46.796 --> 00:07:48.236 A:middle
You know, we can use the
TapGestureRecognizer there

00:07:48.236 --> 00:07:49.056 A:middle
on the top.

00:07:49.286 --> 00:07:51.706 A:middle
We can even do a long press
just like you might do to go

00:07:51.706 --> 00:07:53.566 A:middle
into the editing mode
on the tvOS Home screen.

00:07:53.736 --> 00:07:56.006 A:middle
And there at the bottom I
can even adjust the number

00:07:56.006 --> 00:07:56.726 A:middle
of taps required.

00:07:56.726 --> 00:07:59.036 A:middle
So now I am listening for a
double tap on the Select button.

00:08:01.766 --> 00:08:04.466 A:middle
Okay, let's talk about
one button in particular,

00:08:04.466 --> 00:08:05.626 A:middle
and that's the Menu button.

00:08:06.656 --> 00:08:09.776 A:middle
The Menu button has some
interesting behavior on tvOS.

00:08:09.776 --> 00:08:11.086 A:middle
It kind of has to
play two roles.

00:08:11.486 --> 00:08:13.166 A:middle
Not only does it need
to be useful inside

00:08:13.166 --> 00:08:14.906 A:middle
of your application,
because we need to do things

00:08:14.906 --> 00:08:17.216 A:middle
like dismiss view
controllers or pop things off

00:08:17.216 --> 00:08:18.606 A:middle
of a UINavigationController.

00:08:18.946 --> 00:08:20.836 A:middle
But it also needs to have
system-level behavior.

00:08:20.836 --> 00:08:23.216 A:middle
And eventually your
app needs to dismiss --

00:08:23.216 --> 00:08:25.566 A:middle
be dismissed so the user can
return to the Home screen.

00:08:25.866 --> 00:08:27.416 A:middle
And your user is going
to be really frustrated

00:08:27.416 --> 00:08:28.256 A:middle
if that's not possible.

00:08:28.636 --> 00:08:29.966 A:middle
And we can think that
this is so important,

00:08:29.966 --> 00:08:32.635 A:middle
that this is something that App
Review looks for specifically.

00:08:32.916 --> 00:08:34.626 A:middle
So if your application
can't be exited

00:08:34.626 --> 00:08:36.806 A:middle
by pressing the Menu button,
you might fail App Review.

00:08:36.866 --> 00:08:39.535 A:middle
And we don't want
that to happen.

00:08:39.535 --> 00:08:41.826 A:middle
So how does this work?

00:08:41.826 --> 00:08:44.636 A:middle
How do we get it so that the
Menu button can both be captured

00:08:44.636 --> 00:08:46.506 A:middle
by your application but
also used by the system?

00:08:46.886 --> 00:08:49.406 A:middle
Well the technical thing
that needs to happen in order

00:08:49.406 --> 00:08:51.616 A:middle
for your app to gracefully
resign and go back

00:08:51.616 --> 00:08:54.506 A:middle
to the Home screen is that when
the Menu button is released,

00:08:54.586 --> 00:08:56.896 A:middle
the pressesEnded event
needs to go all the way

00:08:56.896 --> 00:08:59.186 A:middle
up the responder chain if you
are received by UIApplication.

00:08:59.396 --> 00:09:01.726 A:middle
If that doesn't happen, your
application won't resign.

00:08:59.396 --> 00:09:01.726 A:middle
If that doesn't happen, your
application won't resign.

00:09:02.596 --> 00:09:04.216 A:middle
Now sometimes that's
exactly what you want.

00:09:04.216 --> 00:09:06.206 A:middle
So if you are deep into
UINavigationController,

00:09:06.206 --> 00:09:07.966 A:middle
and the user presses the
Menu button, they don't want

00:09:07.966 --> 00:09:09.386 A:middle
to resign your app; they
just want to go back

00:09:09.386 --> 00:09:10.496 A:middle
to the previous view controller.

00:09:11.016 --> 00:09:13.596 A:middle
So in that case, there might be
a TapGestureRecognizer that's

00:09:13.596 --> 00:09:14.616 A:middle
listening for the Menu button.

00:09:14.676 --> 00:09:17.086 A:middle
And if that recognizer
begins to recognize,

00:09:17.086 --> 00:09:19.316 A:middle
it'll send pressesCancelled
to the responder chain.

00:09:19.316 --> 00:09:21.446 A:middle
And in that case the
application won't exit,

00:09:21.446 --> 00:09:23.636 A:middle
and then UINavigationController
can hop off

00:09:23.636 --> 00:09:24.226 A:middle
that view controller.

00:09:24.596 --> 00:09:26.776 A:middle
So it's okay to not
always send pressesEnded

00:09:26.776 --> 00:09:27.456 A:middle
to your application.

00:09:27.496 --> 00:09:30.346 A:middle
You just need to make sure that
it is possible when it becomes

00:09:30.346 --> 00:09:33.326 A:middle
at the appropriate time.

00:09:33.526 --> 00:09:35.306 A:middle
So to do this correctly,
we obviously recommend

00:09:35.306 --> 00:09:36.676 A:middle
that you start with
gesture recognizers.

00:09:36.676 --> 00:09:38.286 A:middle
And when you no longer
are interested

00:09:38.286 --> 00:09:40.256 A:middle
in handling the Menu
button, you need to make sure

00:09:40.256 --> 00:09:41.676 A:middle
that GestureRecognizer
gets out of the way.

00:09:42.266 --> 00:09:43.606 A:middle
And so one way to do
that is just remove the

00:09:43.606 --> 00:09:46.466 A:middle
GestureRecognizer from the view.

00:09:46.466 --> 00:09:47.506 A:middle
You also disable the gesture.

00:09:47.506 --> 00:09:49.536 A:middle
So gesture recognizers have
a property called enabled.

00:09:49.536 --> 00:09:50.536 A:middle
And if you set that to false,

00:09:50.536 --> 00:09:51.806 A:middle
then the gesture will
get out of the way.

00:09:51.866 --> 00:09:54.776 A:middle
And if you don't want to
do either one of those,

00:09:54.776 --> 00:09:57.386 A:middle
there is UIGestureRecognizer
delegate API called

00:09:57.386 --> 00:09:58.736 A:middle
gestureRecognizerShouldBegin.

00:09:59.086 --> 00:10:01.226 A:middle
And you can implement this,
and then for every press

00:09:59.086 --> 00:10:01.226 A:middle
And you can implement this,
and then for every press

00:10:01.226 --> 00:10:02.756 A:middle
of the Menu button you
get the opportunity

00:10:02.756 --> 00:10:04.676 A:middle
to decide right then
whether or not you want

00:10:04.676 --> 00:10:05.336 A:middle
to handle the gesture.

00:10:07.176 --> 00:10:09.066 A:middle
If you are implementing the
lower-level press handling

00:10:09.066 --> 00:10:12.316 A:middle
methods, in your pressesEnded
implementation decide whether

00:10:12.316 --> 00:10:13.686 A:middle
or not you want to
handle the event.

00:10:13.866 --> 00:10:16.426 A:middle
And if you do want to handle the
event, then don't call super.

00:10:16.676 --> 00:10:19.336 A:middle
But if you are not going to
handle the event, then make sure

00:10:19.336 --> 00:10:21.536 A:middle
that you do call super so
that it can continue to go

00:10:21.536 --> 00:10:22.376 A:middle
up the responder chain

00:10:22.376 --> 00:10:25.196 A:middle
and UIApplication has the
opportunity to receive it.

00:10:26.406 --> 00:10:27.736 A:middle
Finally, if you are
writing a game,

00:10:27.736 --> 00:10:29.826 A:middle
it's common that you only
really have one view controller,

00:10:29.826 --> 00:10:30.986 A:middle
which is the one
that shows your game.

00:10:31.496 --> 00:10:33.286 A:middle
And so in that case
you might want to look

00:10:33.286 --> 00:10:34.786 A:middle
at using GCEventViewController.

00:10:34.896 --> 00:10:36.146 A:middle
Now it has this property,

00:10:36.146 --> 00:10:37.796 A:middle
controllerUser
InteractionEnabled.

00:10:38.306 --> 00:10:40.766 A:middle
And what this does is that
when the user is navigating

00:10:40.766 --> 00:10:42.226 A:middle
through your app using
a game controller,

00:10:42.526 --> 00:10:44.636 A:middle
not only are events going to
the game controller framework,

00:10:44.636 --> 00:10:46.136 A:middle
which you are probably
already using your game.

00:10:46.556 --> 00:10:48.486 A:middle
But they also can
generate UIKit events,

00:10:48.486 --> 00:10:49.706 A:middle
like these presses
and other things.

00:10:50.006 --> 00:10:51.316 A:middle
And when you are in the
middle of game play,

00:10:51.316 --> 00:10:52.336 A:middle
you are probably not interested

00:10:52.336 --> 00:10:54.226 A:middle
in receiving the UIKit
version of those events.

00:10:54.256 --> 00:10:56.416 A:middle
So if you set controllerUser
InteractionEnabled

00:10:56.736 --> 00:11:00.746 A:middle
to false during your game
play, then pressing, say,

00:10:56.736 --> 00:11:00.746 A:middle
to false during your game
play, then pressing, say,

00:11:00.746 --> 00:11:03.186 A:middle
the Menu button won't
instantly exit your application.

00:11:03.186 --> 00:11:04.676 A:middle
And instead you'll
be able to capture it

00:11:04.676 --> 00:11:05.696 A:middle
and take care of it on your own.

00:11:05.696 --> 00:11:08.676 A:middle
But when the user gets back
to the root menu of your game,

00:11:08.676 --> 00:11:10.176 A:middle
you are going to want
to turn this back to yes

00:11:10.176 --> 00:11:11.956 A:middle
so that pressing the Menu button
can exit your application.

00:11:13.476 --> 00:11:15.546 A:middle
So that is event handling.

00:11:16.216 --> 00:11:20.156 A:middle
Let's talk now about
layered images.

00:11:20.156 --> 00:11:22.596 A:middle
Layered images are this user
interface element that's really

00:11:22.596 --> 00:11:23.616 A:middle
unique to tvOS.

00:11:24.196 --> 00:11:25.946 A:middle
And there are these images

00:11:25.946 --> 00:11:27.246 A:middle
that you've probably
seen in all the demos.

00:11:27.796 --> 00:11:30.966 A:middle
And they can have up to
five layers within them,

00:11:30.966 --> 00:11:32.866 A:middle
a parallaxing content
that moves.

00:11:32.986 --> 00:11:35.856 A:middle
And these are required
for application icons.

00:11:35.856 --> 00:11:38.416 A:middle
So your application
icon on tvOS has to have

00:11:38.416 --> 00:11:39.666 A:middle
at a minimum of two layers.

00:11:39.666 --> 00:11:41.706 A:middle
So you'll have to be at least a
little familiar with this format

00:11:41.706 --> 00:11:45.566 A:middle
if you are going to be on
tvOS and they're interactive.

00:11:45.566 --> 00:11:48.266 A:middle
As the user moves their finger
around on the Siri remote,

00:11:48.646 --> 00:11:51.726 A:middle
the image moves in
time with their finger.

00:11:51.726 --> 00:11:53.136 A:middle
And this is more
than just eye candy.

00:11:53.456 --> 00:11:55.006 A:middle
This helps the user to realize

00:11:55.006 --> 00:11:57.106 A:middle
that their inputs are being
received and helps them

00:11:57.106 --> 00:11:59.356 A:middle
to anticipate focus
movement before it happens.

00:12:00.746 --> 00:12:02.076 A:middle
And they're animated.

00:12:02.076 --> 00:12:04.606 A:middle
So they have a lot of great
animation that comes built-in,

00:12:04.606 --> 00:12:06.056 A:middle
especially like when
they become focused.

00:12:06.426 --> 00:12:09.286 A:middle
And we'll show you how you can
coordinate those animations

00:12:09.286 --> 00:12:13.476 A:middle
to really make your
app come to life.

00:12:13.476 --> 00:12:14.906 A:middle
Okay, so let's talk
about that interactivity.

00:12:15.166 --> 00:12:19.716 A:middle
So the video that I just showed
you, that's a UIImageView.

00:12:19.716 --> 00:12:21.236 A:middle
And if the UIImageView
becomes focused,

00:12:21.236 --> 00:12:22.536 A:middle
then it'll automatically
give you

00:12:22.536 --> 00:12:24.616 A:middle
that great floating appearance

00:12:24.616 --> 00:12:26.826 A:middle
if you have a layered image
inside of that ImageView.

00:12:27.376 --> 00:12:28.196 A:middle
But it's often the case

00:12:28.196 --> 00:12:30.576 A:middle
that a UI image is not the
control that's actually

00:12:30.576 --> 00:12:31.246 A:middle
becoming focused.

00:12:31.246 --> 00:12:34.846 A:middle
Images are typically a
component of a larger control,

00:12:34.846 --> 00:12:36.286 A:middle
and in that case the
larger control is going

00:12:36.286 --> 00:12:37.016 A:middle
to become focused.

00:12:37.466 --> 00:12:38.996 A:middle
So how do we get this
floating appearance

00:12:38.996 --> 00:12:40.756 A:middle
if the image isn't
what's becoming focused?

00:12:41.126 --> 00:12:42.366 A:middle
Well it doesn't have
to be focused.

00:12:42.776 --> 00:12:43.986 A:middle
We have this property
that we've added

00:12:43.986 --> 00:12:46.136 A:middle
to UIImageView called
adjustsImage

00:12:46.136 --> 00:12:47.246 A:middle
WhenAncestorfocused.

00:12:47.466 --> 00:12:50.426 A:middle
And if you set this to be
true, then if any parent view

00:12:50.426 --> 00:12:51.746 A:middle
of the image becomes focused,

00:12:51.746 --> 00:12:53.106 A:middle
then the image will
automatically get

00:12:53.106 --> 00:12:53.986 A:middle
that floating appearance

00:12:53.986 --> 00:12:55.466 A:middle
and begin reacting
to the user's input.

00:12:55.976 --> 00:12:59.746 A:middle
And these images can also
have a pressed-in state.

00:12:59.746 --> 00:13:00.906 A:middle
And so this is slightly
different

00:12:59.746 --> 00:13:00.906 A:middle
And so this is slightly
different

00:13:00.906 --> 00:13:02.646 A:middle
than the normal default state,

00:13:02.646 --> 00:13:04.426 A:middle
where they are sitting
back on the screen.

00:13:04.776 --> 00:13:06.626 A:middle
They kind of have this sort
of smooshed-in appearance

00:13:06.626 --> 00:13:08.366 A:middle
as if the user is
physically pressing them down.

00:13:09.266 --> 00:13:11.006 A:middle
And you can trigger
this manually

00:13:11.006 --> 00:13:13.286 A:middle
by setting the isHighlighted
property on your ImageView

00:13:13.556 --> 00:13:15.656 A:middle
to be either true or
false, and that'll turn

00:13:15.656 --> 00:13:16.656 A:middle
on or off that effect.

00:13:16.736 --> 00:13:19.996 A:middle
And you might want to do
this in your control subclass

00:13:19.996 --> 00:13:22.116 A:middle
when the user starts pressing
the Select button, for example.

00:13:22.946 --> 00:13:25.606 A:middle
But there are a few cases
where we cover this for you

00:13:25.606 --> 00:13:27.166 A:middle
and you won't have to
do this manually at all.

00:13:27.166 --> 00:13:29.756 A:middle
And those are images that are
inside UICollectionViewCells

00:13:29.856 --> 00:13:32.926 A:middle
and images that are
inside of custom UIButton.

00:13:33.016 --> 00:13:35.416 A:middle
In those cases you don't have
to manage isHighlighted property

00:13:35.416 --> 00:13:36.686 A:middle
at all; we'll take
care of that for you.

00:13:37.206 --> 00:13:40.396 A:middle
Okay, so we talked
about animations.

00:13:40.396 --> 00:13:43.266 A:middle
So let's look at that
a little more closely.

00:13:43.436 --> 00:13:45.106 A:middle
So one of the things
that happens

00:13:45.106 --> 00:13:46.596 A:middle
when these images become,

00:13:46.596 --> 00:13:48.556 A:middle
in their floating
appearances they get bigger

00:13:48.746 --> 00:13:49.736 A:middle
or they look like
they get bigger.

00:13:49.736 --> 00:13:51.466 A:middle
And you might have to
use it on your nearbys.

00:13:51.466 --> 00:13:52.996 A:middle
You might want to move
it out of the way,

00:13:52.996 --> 00:13:55.536 A:middle
like you have a label
underneath of a movie poster.

00:13:56.186 --> 00:13:58.796 A:middle
And you can constrain
those using Auto Layouts.

00:13:58.796 --> 00:14:00.656 A:middle
So, you know, if I have
this ImageView here,

00:13:58.796 --> 00:14:00.656 A:middle
So, you know, if I have
this ImageView here,

00:14:00.886 --> 00:14:02.226 A:middle
let's say that I have
sized the ImageView

00:14:02.226 --> 00:14:04.596 A:middle
to be the same size
as the image.

00:14:04.856 --> 00:14:07.006 A:middle
Then you can constrain to
the frame of the image.

00:14:07.006 --> 00:14:09.256 A:middle
But when it becomes enlarged,
the frame doesn't change

00:14:09.256 --> 00:14:11.556 A:middle
but the visible extent
of the image does.

00:14:11.556 --> 00:14:14.966 A:middle
And so to find out how
large the image will be

00:14:14.966 --> 00:14:15.776 A:middle
when it becomes focused,

00:14:15.776 --> 00:14:18.056 A:middle
we expose this layout guide
called focusedFrameGuide.

00:14:18.346 --> 00:14:20.246 A:middle
And you can attach
other constraints

00:14:20.246 --> 00:14:23.486 A:middle
to that layout guide, and that
way those views will be far

00:14:23.486 --> 00:14:25.406 A:middle
enough away from the image that
they won't be clipped by it

00:14:25.406 --> 00:14:26.366 A:middle
when it becomes larger.

00:14:26.796 --> 00:14:28.826 A:middle
So let's run through this.

00:14:28.826 --> 00:14:31.236 A:middle
So I have my ImageView here,
and I have this red outline

00:14:31.236 --> 00:14:33.256 A:middle
that represents the
frame of the UIImageView.

00:14:33.256 --> 00:14:37.576 A:middle
And when it becomes focused
it's going to get bigger,

00:14:37.576 --> 00:14:39.496 A:middle
but the frame is still
at that red outline.

00:14:39.966 --> 00:14:42.826 A:middle
And so now this dotted
outline shows

00:14:42.876 --> 00:14:44.586 A:middle
where the focusedFrameGuide is.

00:14:44.586 --> 00:14:46.466 A:middle
And that focusedFrameGuide
will always be there,

00:14:46.466 --> 00:14:48.086 A:middle
even if it's not
currently focused.

00:14:48.086 --> 00:14:49.906 A:middle
And so you can choose
which one of these you want

00:14:49.906 --> 00:14:51.146 A:middle
to attach your layout
constraints to.

00:14:52.436 --> 00:14:54.666 A:middle
Or you may choose to change

00:14:54.666 --> 00:14:56.306 A:middle
which constraints are
active based on whether

00:14:56.306 --> 00:14:57.846 A:middle
or not the element
is currently focused.

00:14:57.846 --> 00:15:00.626 A:middle
And if you do that you should
really use the coordination API

00:14:57.846 --> 00:15:00.626 A:middle
And if you do that you should
really use the coordination API

00:15:00.626 --> 00:15:03.366 A:middle
that we expose on the focus
update context to make sure

00:15:03.366 --> 00:15:05.866 A:middle
that the animation happens in
time with the system animation.

00:15:06.546 --> 00:15:08.766 A:middle
The system animation has a
lot of subtlety in it in terms

00:15:08.766 --> 00:15:10.226 A:middle
of what exactly the timing is.

00:15:10.226 --> 00:15:12.466 A:middle
It depends on how quickly
the user is swiping

00:15:12.466 --> 00:15:14.516 A:middle
or how far off-screen
the view is focused

00:15:14.516 --> 00:15:15.716 A:middle
at the moment it became focused.

00:15:15.716 --> 00:15:18.466 A:middle
So it's not really possible to
get target values into your app.

00:15:18.466 --> 00:15:21.006 A:middle
You are going to need to use the
coordination API to make sure

00:15:21.006 --> 00:15:23.196 A:middle
that your animations will
match the system animations.

00:15:23.386 --> 00:15:24.516 A:middle
And to show you how to do that,

00:15:24.516 --> 00:15:26.486 A:middle
I'd like to invite Randy
onstage to give you a demo.

00:15:26.696 --> 00:15:26.976 A:middle
Randy?

00:15:27.516 --> 00:15:31.546 A:middle
[ Applause ]

00:15:32.046 --> 00:15:32.616 A:middle
&gt;&gt; Thank you Justin.

00:15:33.386 --> 00:15:34.616 A:middle
So today I am going to walk

00:15:34.616 --> 00:15:36.786 A:middle
through those two
common cases we have

00:15:36.936 --> 00:15:39.266 A:middle
with adding interactivity
to layered images.

00:15:39.786 --> 00:15:42.626 A:middle
And first we are going
to look at a UIButton.

00:15:42.816 --> 00:15:44.216 A:middle
And second we are going to look

00:15:44.216 --> 00:15:45.916 A:middle
at a custom collection
view table cell.

00:15:46.256 --> 00:15:49.446 A:middle
So to get started, I have got
a project here opened in Xcode

00:15:49.446 --> 00:15:51.806 A:middle
with an asset catalog that
has some layered images.

00:15:51.836 --> 00:15:56.036 A:middle
And I just have a
ViewController subclass here.

00:15:56.316 --> 00:15:58.986 A:middle
And we are going to
drag out a button --

00:16:03.146 --> 00:16:09.286 A:middle
into the canvas and inspect
it to give it an image.

00:16:17.496 --> 00:16:18.666 A:middle
And we'll delete its title.

00:16:22.046 --> 00:16:23.416 A:middle
And then we'll add a
couple of constraints

00:16:24.716 --> 00:16:26.706 A:middle
to center it horizontally
and vertically.

00:16:27.266 --> 00:16:31.896 A:middle
And then we'll update
that Buttons frame

00:16:32.186 --> 00:16:33.486 A:middle
to match those constraints.

00:16:33.486 --> 00:16:35.496 A:middle
You can do that with
this menu down here,

00:16:35.856 --> 00:16:38.736 A:middle
but I usually the keyboard
shortcut Command Option Equals.

00:16:40.156 --> 00:16:43.456 A:middle
And if you look closely,
there is a little bit

00:16:43.456 --> 00:16:45.466 A:middle
of extra space around
the button.

00:16:46.156 --> 00:16:48.276 A:middle
Those are the edge
content insets.

00:16:48.276 --> 00:16:50.076 A:middle
We don't want those, so
we can just delete them.

00:16:50.576 --> 00:16:54.706 A:middle
So that looks about
like what we want.

00:16:54.706 --> 00:16:57.566 A:middle
So we'll build and run
and see how it behaves.

00:16:57.926 --> 00:17:00.296 A:middle
Now I am using the
tvOS simulator here,

00:16:57.926 --> 00:17:00.296 A:middle
Now I am using the
tvOS simulator here,

00:17:00.296 --> 00:17:02.186 A:middle
but I have paired a
Siri remote with Mac

00:17:02.936 --> 00:17:04.826 A:middle
so you can get a good feel

00:17:04.826 --> 00:17:07.066 A:middle
for how the interaction
is going to work.

00:17:08.126 --> 00:17:11.476 A:middle
And my finger is pressing
down on the Select button,

00:17:11.695 --> 00:17:13.996 A:middle
but it's just doing this
darkening effect and sort

00:17:13.996 --> 00:17:15.616 A:middle
of doing that sort
of smooshing in.

00:17:15.976 --> 00:17:17.796 A:middle
And when I move my
finger on the digitizer,

00:17:17.796 --> 00:17:19.195 A:middle
it doesn't react to my touch.

00:17:19.695 --> 00:17:20.556 A:middle
So let's make that better.

00:17:22.326 --> 00:17:26.486 A:middle
To do that, I am going to
open up the Assistant Editor

00:17:26.695 --> 00:17:30.766 A:middle
for our ViewController
subclass and drag

00:17:30.766 --> 00:17:32.136 A:middle
out an outlet for the button.

00:17:36.526 --> 00:17:37.966 A:middle
And then in viewDidLoad,

00:17:38.136 --> 00:17:41.486 A:middle
I am going to grab the
ImageView from that button.

00:17:47.136 --> 00:17:49.496 A:middle
And I want to turn on that
property that Justin told us

00:17:49.496 --> 00:17:53.596 A:middle
about adjustsImage
WhenAncestorFocused.

00:17:56.156 --> 00:18:00.236 A:middle
And now if I build and
run, you should see

00:17:56.156 --> 00:18:00.236 A:middle
And now if I build and
run, you should see

00:18:00.236 --> 00:18:04.086 A:middle
that the button responds
to my finger on the remote.

00:18:04.086 --> 00:18:07.626 A:middle
And it pushes in
when I click on it.

00:18:07.896 --> 00:18:09.456 A:middle
But we still have an issue
here because the edges

00:18:09.456 --> 00:18:10.466 A:middle
of this button are clipped.

00:18:11.286 --> 00:18:13.066 A:middle
And that's because by default,

00:18:13.646 --> 00:18:17.026 A:middle
the button's ImageView has
clipsToBounds turned on.

00:18:17.806 --> 00:18:18.836 A:middle
So we just turn that off.

00:18:19.956 --> 00:18:20.856 A:middle
Build and run again.

00:18:21.286 --> 00:18:23.406 A:middle
We should get exactly
what we are looking for.

00:18:23.486 --> 00:18:27.696 A:middle
It's a great interactive
layered image that moves

00:18:27.696 --> 00:18:29.746 A:middle
around with my finger
and smooshes it

00:18:29.746 --> 00:18:32.076 A:middle
when I press on it, great.

00:18:33.016 --> 00:18:34.526 A:middle
Let's do something a
little more involved.

00:18:34.636 --> 00:18:38.446 A:middle
I have another project here,

00:18:39.576 --> 00:18:42.096 A:middle
and this one has a
CollectionViewController

00:18:42.096 --> 00:18:44.166 A:middle
subclass in it.

00:18:44.166 --> 00:18:48.736 A:middle
And I have gone ahead and
configured the sizing parameters

00:18:48.736 --> 00:18:50.646 A:middle
of the CollectionView according

00:18:50.646 --> 00:18:52.766 A:middle
to the Human Interface
Guidelines for tvOS

00:18:52.766 --> 00:18:53.966 A:middle
for a six-column layout.

00:18:54.806 --> 00:18:57.886 A:middle
Those guidelines tell us we
want a cell width of 250 points.

00:18:58.546 --> 00:19:02.176 A:middle
And I know, based on my designs,
I'll need 450 points vertically

00:18:58.546 --> 00:19:02.176 A:middle
And I know, based on my designs,
I'll need 450 points vertically

00:19:02.326 --> 00:19:03.736 A:middle
for the content of the cells.

00:19:03.736 --> 00:19:05.366 A:middle
And the guidelines tell us

00:19:05.366 --> 00:19:07.416 A:middle
for a six-column
layout we need 48 points

00:19:07.416 --> 00:19:10.356 A:middle
between cells horizontally
and at least 100 points

00:19:10.356 --> 00:19:11.466 A:middle
between cells vertically.

00:19:11.876 --> 00:19:15.276 A:middle
And finally, to stay within
the safe areas of a wide range

00:19:15.276 --> 00:19:17.746 A:middle
of TVs, we want to leave 60
points at the top and the bottom

00:19:17.946 --> 00:19:19.466 A:middle
and 90 points on the
left and the right.

00:19:19.466 --> 00:19:21.456 A:middle
And those numbers are
also in the guidelines.

00:19:21.996 --> 00:19:24.326 A:middle
So let's take a look
at the cell itself.

00:19:24.326 --> 00:19:29.436 A:middle
I have already given it a custom
class and a reuse identifier.

00:19:29.556 --> 00:19:32.616 A:middle
And we are going to
zoom in a little bit

00:19:32.616 --> 00:19:36.196 A:middle
and add some custom subviews.

00:19:37.926 --> 00:19:39.886 A:middle
First we'll drag
out an ImageView.

00:19:46.046 --> 00:19:47.156 A:middle
And then we'll drag out a label.

00:19:53.056 --> 00:19:55.826 A:middle
Now I'll add some constraints
to lay out these views.

00:19:55.876 --> 00:19:59.396 A:middle
We want the ImageView to hug
the top left and right edges.

00:19:59.966 --> 00:20:01.356 A:middle
And we happen to know that all

00:19:59.966 --> 00:20:01.356 A:middle
And we happen to know that all

00:20:01.356 --> 00:20:03.876 A:middle
of our images have
the same aspect ratio.

00:20:03.876 --> 00:20:06.226 A:middle
So I'll also add an
aspect ratio constraint.

00:20:06.226 --> 00:20:09.826 A:middle
And then I'll edit that
aspect ratio constraint

00:20:09.826 --> 00:20:12.166 A:middle
to match our images so they
have a ratio of 2-to-3.

00:20:13.876 --> 00:20:15.936 A:middle
And then I'll add some
constraints to my label.

00:20:16.416 --> 00:20:18.856 A:middle
I'll Control-Drag from
the label to the ImageView

00:20:18.936 --> 00:20:22.336 A:middle
to add a horizontal
centering constraint.

00:20:22.636 --> 00:20:28.096 A:middle
And then I also want
my ImageView the top

00:20:28.096 --> 00:20:31.276 A:middle
of my label will be 15 points
from the bottom of my ImageView.

00:20:31.446 --> 00:20:33.886 A:middle
So I'll add a constraint
between those things.

00:20:34.116 --> 00:20:38.346 A:middle
Now that we have added
all those constraints,

00:20:38.346 --> 00:20:40.706 A:middle
we can do Command Option
Equals to get everything

00:20:40.706 --> 00:20:43.066 A:middle
where it's supposed to be.

00:20:43.276 --> 00:20:45.856 A:middle
And finally, that font
is a little small.

00:20:45.856 --> 00:20:49.886 A:middle
So I am going to bump it up
to Body style, nice pick.

00:20:51.206 --> 00:20:55.696 A:middle
And we've got some outlets for
the ImageView on our poster.

00:20:55.986 --> 00:20:57.926 A:middle
So we'll just hook
those up and the label.

00:20:57.926 --> 00:21:02.376 A:middle
Now we'll take a quick look at
our CollectionViewController.

00:20:57.926 --> 00:21:02.376 A:middle
Now we'll take a quick look at
our CollectionViewController.

00:21:02.456 --> 00:21:04.676 A:middle
You can see I have just
implemented number of items

00:21:04.676 --> 00:21:06.886 A:middle
in section, and cellForItemAt
indexPath.

00:21:07.646 --> 00:21:13.046 A:middle
So if I build and run, we should
get basically the layout we are

00:21:13.046 --> 00:21:13.536 A:middle
looking for.

00:21:14.146 --> 00:21:15.976 A:middle
But we'll see what
the behavior is like.

00:21:20.216 --> 00:21:22.356 A:middle
So this is pretty much the
layout I was looking for.

00:21:22.356 --> 00:21:23.686 A:middle
It's all the right things.

00:21:23.686 --> 00:21:26.566 A:middle
But right away you can't
tell which item is focused.

00:21:26.566 --> 00:21:29.836 A:middle
And when I click, you can't
see which cell I am selecting.

00:21:30.496 --> 00:21:33.966 A:middle
So let's take care
of all those things.

00:21:34.926 --> 00:21:38.886 A:middle
Now first, to see where the
focus is we are going to go

00:21:39.196 --> 00:21:42.316 A:middle
into Interface Builder and
select our ImageView and check

00:21:42.316 --> 00:21:44.816 A:middle
that adjustImagewhenfocused
check mark.

00:21:45.136 --> 00:21:50.026 A:middle
And that'll be enough
to get our cells

00:21:50.026 --> 00:21:51.746 A:middle
to start responding to focus.

00:21:52.366 --> 00:21:55.376 A:middle
As you can see, it's big,
and it reacts to my touch;

00:21:55.376 --> 00:21:56.906 A:middle
and when I click it pushes in.

00:21:57.656 --> 00:21:59.766 A:middle
But the labels are
overlapping on the bottom.

00:21:59.766 --> 00:22:03.006 A:middle
They are not responding to
the change in the focus size.

00:21:59.766 --> 00:22:03.006 A:middle
They are not responding to
the change in the focus size.

00:22:03.006 --> 00:22:06.186 A:middle
So to do something about
that, we are going to open

00:22:06.186 --> 00:22:10.276 A:middle
up our custom cell class
in the Assistant Editor.

00:22:10.776 --> 00:22:16.016 A:middle
And first we are going
to drag out an outlet

00:22:16.016 --> 00:22:19.256 A:middle
for that vertical constraint
between the top of the label

00:22:19.296 --> 00:22:20.476 A:middle
and the bottom of the ImageView.

00:22:21.586 --> 00:22:24.126 A:middle
So we'll add an outlet
for that, and we'll call

00:22:24.126 --> 00:22:28.316 A:middle
that the unfocusedConstraint.

00:22:34.116 --> 00:22:35.056 A:middle
And then I'll add
another property

00:22:38.886 --> 00:22:40.526 A:middle
for the focusedConstraint.

00:22:40.526 --> 00:22:44.816 A:middle
We'll set that focusedConstraint
up in awakeFromNib

00:22:48.036 --> 00:22:50.596 A:middle
to be the labels.topAnchor

00:23:00.356 --> 00:23:06.686 A:middle
relative to the imageView's
focusedFrameGuide bottomAnchor

00:23:07.846 --> 00:23:09.016 A:middle
plus those 15 points.

00:23:12.426 --> 00:23:19.876 A:middle
Then in updateConstraints
we'll set the focusedFrame --

00:23:20.406 --> 00:23:24.896 A:middle
we'll make the focusedConstraint
active when the cell is focused.

00:23:25.646 --> 00:23:29.206 A:middle
And we'll make the
unfocusedConstraint active

00:23:29.876 --> 00:23:32.576 A:middle
in the opposite case.

00:23:34.236 --> 00:23:38.226 A:middle
Finally, in didUpdateFocus,
we'll invalidate our constraints

00:23:38.226 --> 00:23:41.436 A:middle
by calling
setNeedsUpdateConstraints.

00:23:41.936 --> 00:23:44.716 A:middle
And then we'll add a
coordinated animation

00:23:45.556 --> 00:23:48.336 A:middle
by calling
addCoordinatedAnimations.

00:23:49.986 --> 00:23:54.636 A:middle
And inside there, we'll
call layoutIfNeeded.

00:24:02.046 --> 00:24:04.946 A:middle
And that'll be enough that
now when we build and run,

00:24:06.756 --> 00:24:11.846 A:middle
we should see the label has
move down below out of the way

00:24:11.846 --> 00:24:13.946 A:middle
of the focused poster.

00:24:14.626 --> 00:24:19.896 A:middle
And when I move from one to
the other, they all animate

00:24:19.896 --> 00:24:22.406 A:middle
out of the way and back
to where they should be.

00:24:23.416 --> 00:24:23.686 A:middle
Great!

00:24:24.516 --> 00:24:29.936 A:middle
[ Applause ]

00:24:30.436 --> 00:24:32.336 A:middle
So remember, use
focusedFrameGuide

00:24:32.336 --> 00:24:33.596 A:middle
and coordinatedAnimations.

00:24:33.596 --> 00:24:34.756 A:middle
And don't forget to turn

00:24:34.756 --> 00:24:37.076 A:middle
on adjustsImage
WhenAncestorFocused

00:24:37.076 --> 00:24:37.776 A:middle
to get these effects.

00:24:37.806 --> 00:24:40.976 A:middle
With that, back to Justin.

00:24:41.516 --> 00:24:45.586 A:middle
[ Applause ]

00:24:46.086 --> 00:24:47.076 A:middle
&gt;&gt; Thanks for that
awesome demo, Randy.

00:24:47.076 --> 00:24:49.496 A:middle
So you can see how easy it
is to really take advantage

00:24:49.496 --> 00:24:51.186 A:middle
of this unique user
interface element

00:24:51.186 --> 00:24:52.916 A:middle
to really bring your
tvOS apps to life.

00:24:52.916 --> 00:24:55.456 A:middle
All right, let's change
gears a little bit now

00:24:55.456 --> 00:24:56.756 A:middle
and talk about scrolling.

00:24:57.296 --> 00:25:00.766 A:middle
So scrolling on tvOS is a bit
different than scrolling on iOS.

00:24:57.296 --> 00:25:00.766 A:middle
So scrolling on tvOS is a bit
different than scrolling on iOS.

00:25:00.826 --> 00:25:02.686 A:middle
And it has to do with
those indirect touches.

00:25:03.296 --> 00:25:06.026 A:middle
So when the user is scrolling
in ScrollView on iOS,

00:25:06.026 --> 00:25:07.576 A:middle
they are physically
touching the ScrollView.

00:25:07.576 --> 00:25:09.766 A:middle
And as they move their finger,
it will adjust the offset

00:25:09.766 --> 00:25:11.756 A:middle
of the ScrollView to match
the motion of their finger.

00:25:12.436 --> 00:25:14.856 A:middle
But that's not really
how it works on tvOS.

00:25:14.856 --> 00:25:16.846 A:middle
On tvOS, you are not
touching the screen,

00:25:17.076 --> 00:25:19.246 A:middle
but you are also not
manipulating the scroll

00:25:19.246 --> 00:25:19.936 A:middle
views directly.

00:25:19.996 --> 00:25:21.616 A:middle
What you are really doing is
you are changing what's the

00:25:21.616 --> 00:25:22.316 A:middle
focused item.

00:25:22.736 --> 00:25:25.706 A:middle
Then as the focus item changes,
the focus engine will detect

00:25:25.706 --> 00:25:28.196 A:middle
that and it will automatically
scroll any scroll views

00:25:28.196 --> 00:25:30.416 A:middle
as needed to make sure that
the focused view will always

00:25:30.416 --> 00:25:31.026 A:middle
be onscreen.

00:25:33.756 --> 00:25:36.356 A:middle
The focus engine will choose
the best offset that it can

00:25:36.356 --> 00:25:37.826 A:middle
for you based on
the size of the view

00:25:37.826 --> 00:25:38.736 A:middle
and the size of the ScrollView.

00:25:38.736 --> 00:25:40.886 A:middle
But there are some times
where you want to take control

00:25:40.886 --> 00:25:42.906 A:middle
of what offset that it's
going to send you to.

00:25:42.906 --> 00:25:45.416 A:middle
So for example, one common
customization that people want

00:25:45.416 --> 00:25:47.926 A:middle
to do is they want to that the
focused view is always centered

00:25:48.046 --> 00:25:49.056 A:middle
within the bounds
of the ScrollView.

00:25:49.446 --> 00:25:50.616 A:middle
And you can do that.

00:25:50.616 --> 00:25:51.516 A:middle
And the way you can do that is

00:25:51.516 --> 00:25:53.986 A:middle
with the UIScrollViewDelegate
method that you might recognize

00:25:53.986 --> 00:25:56.986 A:middle
from iOS which is
scrollView WillEndDragging,

00:25:56.986 --> 00:25:59.026 A:middle
withVelocity,
targetContentOffset.

00:25:59.556 --> 00:26:02.046 A:middle
And the final parameter there,
the targetContentOffset,

00:25:59.556 --> 00:26:02.046 A:middle
And the final parameter there,
the targetContentOffset,

00:26:02.046 --> 00:26:03.786 A:middle
is a pointer to a CGPoint.

00:26:04.536 --> 00:26:07.086 A:middle
And that point represents
the offset

00:26:07.086 --> 00:26:08.546 A:middle
that the focus engine
will scroll you

00:26:08.546 --> 00:26:10.406 A:middle
to if you don't do
anything else.

00:26:10.406 --> 00:26:12.256 A:middle
That's the offset that it
shows for you automatically.

00:26:12.946 --> 00:26:15.526 A:middle
But if you'd like to do your
own calculations and decide

00:26:15.526 --> 00:26:16.956 A:middle
for yourself what you
want the scroll offset

00:26:16.956 --> 00:26:18.336 A:middle
to be, you can do that.

00:26:18.336 --> 00:26:20.146 A:middle
Make your calculation about
what offset you'd like,

00:26:20.376 --> 00:26:23.466 A:middle
and then store the value
into the point that's pointed

00:26:23.466 --> 00:26:24.286 A:middle
to you by that pointer.

00:26:24.286 --> 00:26:26.136 A:middle
And then the focus engine
will scroll there instead.

00:26:26.216 --> 00:26:28.076 A:middle
And you'll get all the great
system animations that come

00:26:28.076 --> 00:26:29.626 A:middle
with that, but to
your selected offset.

00:26:31.476 --> 00:26:33.886 A:middle
But it's not to say that direct
manipulation is always bad

00:26:33.886 --> 00:26:35.726 A:middle
or is never a good idea on tvOS.

00:26:35.726 --> 00:26:38.206 A:middle
There are some cases where
you'd want to do that.

00:26:38.206 --> 00:26:41.186 A:middle
And so some of the situations
that call for that are things

00:26:41.186 --> 00:26:42.836 A:middle
like you have a lot of
full-screen content.

00:26:42.906 --> 00:26:44.396 A:middle
Maybe you have full-screen
photo gallery,

00:26:44.396 --> 00:26:46.556 A:middle
where the photos go completely
to the edges of the screen.

00:26:47.136 --> 00:26:49.536 A:middle
So one example from UIKit
is UIPageViewController.

00:26:49.816 --> 00:26:51.246 A:middle
When you have a
UIPageViewController,

00:26:51.246 --> 00:26:52.536 A:middle
it doesn't do the
focused scrolling.

00:26:52.536 --> 00:26:54.846 A:middle
And instead, you are directly
manipulating the ScrollView

00:26:54.846 --> 00:26:56.126 A:middle
content of the
PageViewController.

00:26:56.126 --> 00:26:58.916 A:middle
There are other cases where you
have a lot of scrolling text.

00:26:58.916 --> 00:27:00.146 A:middle
So it's another good
place where you might want

00:26:58.916 --> 00:27:00.146 A:middle
So it's another good
place where you might want

00:27:00.146 --> 00:27:01.156 A:middle
to do direct manipulation.

00:27:01.506 --> 00:27:03.886 A:middle
Basically, anytime where
it's not clear what ought

00:27:03.886 --> 00:27:06.546 A:middle
to be the focused item,
and you wouldn't be able

00:27:06.546 --> 00:27:08.326 A:middle
to see what the next
focused item would be,

00:27:08.646 --> 00:27:10.546 A:middle
and those are good situations
to do direct manipulation.

00:27:10.936 --> 00:27:12.646 A:middle
So if you want to do
that, you don't have

00:27:12.646 --> 00:27:14.346 A:middle
to write your own
gesture handling code.

00:27:14.346 --> 00:27:15.676 A:middle
You can reuse the pan gesture

00:27:15.676 --> 00:27:16.946 A:middle
that already comes
on ScrollView.

00:27:17.596 --> 00:27:20.946 A:middle
The trick is that scroll views
are configured to only listen

00:27:20.946 --> 00:27:22.806 A:middle
for direct touches
out of the box.

00:27:23.276 --> 00:27:25.856 A:middle
And the Siri remote is
generating indirect touched.

00:27:25.856 --> 00:27:27.986 A:middle
So you just need to get
this pan gesture recognizer

00:27:27.986 --> 00:27:31.386 A:middle
and convince it to listen
to indirect touches.

00:27:31.386 --> 00:27:33.916 A:middle
We also have a directional
press gesture recognizer,

00:27:33.916 --> 00:27:35.546 A:middle
which is only on
ScrollView on tvOS.

00:27:35.546 --> 00:27:37.506 A:middle
And this is listening for
those arrow button presses.

00:27:37.836 --> 00:27:39.996 A:middle
So that way a user who
is not using a device

00:27:39.996 --> 00:27:42.896 A:middle
that he can do touch input
can also scroll ScrollViews.

00:27:42.946 --> 00:27:44.866 A:middle
And this gesture is
disabled by default

00:27:44.866 --> 00:27:46.726 A:middle
because we would rather have
this arrow presses manipulate

00:27:46.726 --> 00:27:48.846 A:middle
focus instead of manipulating
the ScrollView offset.

00:27:48.846 --> 00:27:49.726 A:middle
So you'll have to enable it.

00:27:49.726 --> 00:27:52.016 A:middle
And this is the code
that you can use

00:27:52.016 --> 00:27:52.966 A:middle
to do both of those things.

00:27:53.356 --> 00:27:54.526 A:middle
So we are getting

00:27:54.526 --> 00:27:56.106 A:middle
to panGestureRecognizer
from the ScrollView.

00:27:56.106 --> 00:27:57.346 A:middle
And we are telling it that we'd

00:27:57.346 --> 00:27:58.626 A:middle
like to listen for
indirect touches.

00:27:58.726 --> 00:28:00.076 A:middle
And we are getting

00:27:58.726 --> 00:28:00.076 A:middle
And we are getting

00:28:00.076 --> 00:28:01.496 A:middle
that directionalPressGesture
Recognizer,

00:28:01.496 --> 00:28:02.936 A:middle
and we are telling it
that it should be enabled.

00:28:02.936 --> 00:28:06.056 A:middle
And if you do this, then all
of those events that come

00:28:06.056 --> 00:28:09.176 A:middle
into the ScrollView will
directly manipulate the offset

00:28:09.176 --> 00:28:09.666 A:middle
of the ScrollView.

00:28:09.726 --> 00:28:11.406 A:middle
And it's actually possible

00:28:11.406 --> 00:28:14.056 A:middle
to combine this direct
manipulation technique

00:28:14.056 --> 00:28:15.466 A:middle
and the focus interaction
technique.

00:28:15.616 --> 00:28:16.796 A:middle
And to show you how
you can do that,

00:28:16.796 --> 00:28:19.296 A:middle
I'd like to invite Kevin
onstage to give you a demo.

00:28:20.206 --> 00:28:20.546 A:middle
Kevin [applause]?

00:28:22.226 --> 00:28:22.986 A:middle
&gt;&gt; Thanks Justin.

00:28:24.776 --> 00:28:28.186 A:middle
Hi. I'm Kevin Hiscott, and
I'm an engineer on tvOS.

00:28:28.186 --> 00:28:30.546 A:middle
We are going to look at
a sample view controller

00:28:30.936 --> 00:28:33.926 A:middle
that presents terms and
conditions text in a text view.

00:28:34.866 --> 00:28:37.096 A:middle
TextView is a subclass
of ScrollView.

00:28:37.096 --> 00:28:41.226 A:middle
So we can take a look at how to
add direct manipulation to it.

00:28:44.206 --> 00:28:45.666 A:middle
Let's head over to
my ZIB [phonetic]

00:28:45.666 --> 00:28:46.936 A:middle
and see what I have
set up so far.

00:28:47.136 --> 00:28:50.676 A:middle
I have a text view with very
lengthy lower mid sub [phonetic]

00:28:50.676 --> 00:28:51.396 A:middle
pasted into it.

00:28:52.656 --> 00:28:55.746 A:middle
And if we go into our
application, we can see what

00:28:55.746 --> 00:28:57.646 A:middle
that looks like in
the app context.

00:28:57.646 --> 00:29:00.646 A:middle
When I present my
ViewController,

00:28:57.646 --> 00:29:00.646 A:middle
When I present my
ViewController,

00:29:00.756 --> 00:29:02.396 A:middle
we can see along the bottom edge

00:29:02.506 --> 00:29:03.936 A:middle
that the text is
actually clipped.

00:29:04.336 --> 00:29:06.246 A:middle
And if I try swiping
the Siri remote,

00:29:06.556 --> 00:29:07.846 A:middle
the text does not scroll.

00:29:08.466 --> 00:29:09.946 A:middle
Well let's go improve that.

00:29:11.506 --> 00:29:13.376 A:middle
Let's head over to
my ViewController.

00:29:13.376 --> 00:29:14.566 A:middle
And in viewDidLoad we are going

00:29:14.566 --> 00:29:17.486 A:middle
to grab the outlet I have
created to that UITextView.

00:29:17.486 --> 00:29:19.896 A:middle
I have called it
messageTextView.

00:29:20.896 --> 00:29:23.166 A:middle
And on messageTextView
and any ScrollView,

00:29:23.166 --> 00:29:24.576 A:middle
there is a panGestureRecognizer.

00:29:24.576 --> 00:29:26.816 A:middle
And we are going to change
its allowed touch types

00:29:26.816 --> 00:29:28.556 A:middle
to include the indirect
touch type.

00:29:29.276 --> 00:29:31.696 A:middle
As Justin mentioned, those
are the touches created

00:29:31.696 --> 00:29:32.516 A:middle
by the Siri remote.

00:29:33.836 --> 00:29:37.256 A:middle
The second thing we are going to
do is set isSelectable to true.

00:29:37.586 --> 00:29:40.976 A:middle
This will allow the text view to
be focused, to become focused,

00:29:41.076 --> 00:29:42.066 A:middle
and receive these events.

00:29:42.486 --> 00:29:44.006 A:middle
Let's build and run
and see how this works.

00:29:52.306 --> 00:29:53.896 A:middle
Now when I present
my ViewController,

00:29:53.966 --> 00:29:57.806 A:middle
I am actually able to directly
swipe to scroll the text up

00:29:57.806 --> 00:29:58.956 A:middle
and down with the Siri remote.

00:29:59.456 --> 00:30:01.006 A:middle
Great direct manipulation.

00:29:59.456 --> 00:30:01.006 A:middle
Great direct manipulation.

00:30:01.996 --> 00:30:03.356 A:middle
The other thing any good terms

00:30:03.356 --> 00:30:06.416 A:middle
and conditions ViewController
needs is a way for the user

00:30:06.416 --> 00:30:09.386 A:middle
to either accept or
reject your conditions.

00:30:10.126 --> 00:30:13.846 A:middle
So to do that, let's head
over to my ZIB and drag

00:30:13.846 --> 00:30:14.776 A:middle
in a couple of buttons.

00:30:14.776 --> 00:30:21.806 A:middle
I am going to label one Disagree
and the other one Agree.

00:30:23.696 --> 00:30:25.926 A:middle
Let's build and run
and see what happens.

00:30:25.926 --> 00:30:30.216 A:middle
What I hope to happen is for
our focus to move horizontally

00:30:30.216 --> 00:30:32.746 A:middle
with horizontal swipes,
and for vertical swipes

00:30:32.746 --> 00:30:34.106 A:middle
to still scroll the text view.

00:30:34.986 --> 00:30:37.806 A:middle
However, when I present my
ViewController I can see

00:30:37.806 --> 00:30:42.026 A:middle
that vertical swipes does
move the text; however,

00:30:42.026 --> 00:30:44.346 A:middle
if I swipe too far down,
focus actually moves

00:30:44.346 --> 00:30:47.236 A:middle
down into the buttons, and I
can no longer scroll my text

00:30:47.306 --> 00:30:49.326 A:middle
until focus moves back
into the text view.

00:30:50.156 --> 00:30:52.606 A:middle
This isn't exactly the
behavior I was looking for.

00:30:52.606 --> 00:30:55.496 A:middle
Let's head back to
my ViewController.

00:30:55.496 --> 00:30:57.846 A:middle
And we are going to
disable isSelectable.

00:30:58.276 --> 00:31:00.686 A:middle
We don't actually
want the TextView

00:30:58.276 --> 00:31:00.686 A:middle
We don't actually
want the TextView

00:31:00.686 --> 00:31:02.686 A:middle
to be a focusable
element onscreen.

00:31:03.476 --> 00:31:05.066 A:middle
Instead, I am going to
show you a little trick.

00:31:05.226 --> 00:31:08.226 A:middle
We are going to grab
the panGestureRecognizer

00:31:08.226 --> 00:31:12.176 A:middle
and actually add it to our
ViewController's view instead.

00:31:12.626 --> 00:31:15.746 A:middle
This will allow the message
TextView to receive events

00:31:15.746 --> 00:31:17.246 A:middle
without being focusable itself.

00:31:18.426 --> 00:31:19.976 A:middle
Let's build and run
and see how it behaves.

00:31:26.056 --> 00:31:27.536 A:middle
Now when I present
my ViewController,

00:31:28.736 --> 00:31:31.116 A:middle
we can see that the
Disagree button immediately

00:31:31.116 --> 00:31:31.996 A:middle
becomes focused.

00:31:32.216 --> 00:31:34.826 A:middle
And that's because the text
view is no longer focusable.

00:31:34.916 --> 00:31:38.306 A:middle
I can swipe the Siri remote
left and right to move focus.

00:31:38.306 --> 00:31:41.616 A:middle
But any time I can swipe up
and down to move the text.

00:31:42.266 --> 00:31:44.076 A:middle
Great this is looking
really good.

00:31:44.076 --> 00:31:46.366 A:middle
The last thing we
need to consider

00:31:46.366 --> 00:31:49.926 A:middle
on tvOS are directional
press type events generated

00:31:49.926 --> 00:31:52.426 A:middle
by other input methods
like game controllers,

00:31:52.596 --> 00:31:54.516 A:middle
keyboards, or IR remotes.

00:31:54.516 --> 00:31:57.726 A:middle
And we make this really
easy to support on tvOS.

00:31:58.036 --> 00:32:00.526 A:middle
Let's head back to my view
controller, and we are going

00:31:58.036 --> 00:32:00.526 A:middle
Let's head back to my view
controller, and we are going

00:32:00.526 --> 00:32:02.616 A:middle
to grab the
directionalPressGesture

00:32:02.616 --> 00:32:05.336 A:middle
Recognizer from our
messageTextView and enable it.

00:32:05.826 --> 00:32:08.086 A:middle
This will allow scrolling
to occur

00:32:08.086 --> 00:32:10.556 A:middle
with those press types generated
on those other devices.

00:32:11.656 --> 00:32:14.126 A:middle
The last thing we are
going to do is move

00:32:14.126 --> 00:32:17.136 A:middle
that GestureRecognizer onto our
own view, just as we did before.

00:32:17.176 --> 00:32:21.766 A:middle
Let's build and run and see
how this all comes together.

00:32:25.656 --> 00:32:27.416 A:middle
Now when I present my
terms and conditions,

00:32:27.806 --> 00:32:30.616 A:middle
I can both swipe left
and right to move focus,

00:32:30.776 --> 00:32:34.216 A:middle
but I can also tap left
and right to move focus

00:32:34.566 --> 00:32:36.706 A:middle
with the directional press
type events generated

00:32:36.706 --> 00:32:39.196 A:middle
on the Siri remote and
all the other devices.

00:32:39.296 --> 00:32:43.716 A:middle
I can swipe up and down to
change the content offset,

00:32:43.716 --> 00:32:46.636 A:middle
but I can also tap up and
down to incrementally scroll.

00:32:47.336 --> 00:32:49.756 A:middle
Great! This is a
fully functional terms

00:32:49.756 --> 00:32:51.716 A:middle
and conditions ViewController
for tvOS.

00:32:52.456 --> 00:32:53.576 A:middle
Thanks so much for your time.

00:32:53.576 --> 00:32:55.196 A:middle
And I can't wait to
accept all the terms

00:32:55.196 --> 00:32:56.426 A:middle
and conditions in your apps.

00:32:56.816 --> 00:32:57.556 A:middle
Back to Justin [applause].

00:33:00.046 --> 00:33:00.426 A:middle
&gt;&gt; All right, let's move

00:33:00.426 --> 00:33:02.356 A:middle
on to our final topic,
which is text input.

00:33:03.146 --> 00:33:05.736 A:middle
So we have this great
system keyboard on tvOS.

00:33:05.846 --> 00:33:08.786 A:middle
And there is a lot of features
that are only available

00:33:08.786 --> 00:33:10.196 A:middle
if you are using
the system keyboard.

00:33:10.196 --> 00:33:11.996 A:middle
I want to go through just
a few of them for you.

00:33:12.586 --> 00:33:14.086 A:middle
One of them is dictation.

00:33:14.306 --> 00:33:16.756 A:middle
So the user can just
speak into the Siri remote

00:33:16.756 --> 00:33:18.096 A:middle
and their words will
show up on the screen.

00:33:19.306 --> 00:33:20.676 A:middle
We also support Bluetooth
keyboards.

00:33:20.676 --> 00:33:21.826 A:middle
So if you pair it with
a Bluetooth keyboard,

00:33:21.826 --> 00:33:22.676 A:middle
and you just type
right on there.

00:33:23.316 --> 00:33:25.606 A:middle
We have the new Apple
TV Remote app

00:33:25.606 --> 00:33:27.896 A:middle
so that users can pair
their phone with their TV

00:33:27.896 --> 00:33:29.616 A:middle
and they can type right
on their phone's keyboard

00:33:29.746 --> 00:33:30.956 A:middle
to send text to the TV.

00:33:31.416 --> 00:33:32.616 A:middle
There is also a lot

00:33:32.616 --> 00:33:35.196 A:middle
of localization details the
system keyboard takes care

00:33:35.196 --> 00:33:35.626 A:middle
of for you.

00:33:36.576 --> 00:33:38.926 A:middle
And it also automatically
changes its layout based

00:33:38.926 --> 00:33:40.406 A:middle
on the input device
the user is using.

00:33:40.976 --> 00:33:42.316 A:middle
So there is the linear layout

00:33:42.316 --> 00:33:43.626 A:middle
that you are probably
most familiar with,

00:33:43.626 --> 00:33:45.376 A:middle
but there is also a grid
layout that we'll use

00:33:45.376 --> 00:33:47.346 A:middle
if there is no Siri
remote paired with the TV.

00:33:47.346 --> 00:33:50.186 A:middle
These are a lot of great
features that are only available

00:33:50.186 --> 00:33:51.246 A:middle
in the system keyboard.

00:33:51.246 --> 00:33:53.116 A:middle
And if you are not using
the system keyboard,

00:33:53.116 --> 00:33:55.666 A:middle
then users won't be able to take
advantage of these features.

00:33:56.156 --> 00:33:59.196 A:middle
So we discourage you from trying
to roll your own keyboard.

00:33:59.196 --> 00:34:00.506 A:middle
Really stick to the
system keyboard

00:33:59.196 --> 00:34:00.506 A:middle
Really stick to the
system keyboard

00:34:00.506 --> 00:34:02.456 A:middle
so that users can enjoy
all these great features

00:34:02.456 --> 00:34:03.836 A:middle
that are only available
through the system one.

00:34:04.216 --> 00:34:07.036 A:middle
Now there are some ways that
you can customer the built-in

00:34:07.036 --> 00:34:07.776 A:middle
system keyboard.

00:34:08.246 --> 00:34:10.126 A:middle
And one way that you can
customize it is to add some

00:34:10.126 --> 00:34:11.585 A:middle
of your own views
to the keyboard

00:34:11.585 --> 00:34:12.795 A:middle
that will appear
alongside of it.

00:34:12.795 --> 00:34:15.686 A:middle
And you can use some API
that's on UIResponder

00:34:15.686 --> 00:34:17.136 A:middle
that you might recognize
from iOS.

00:34:17.136 --> 00:34:19.056 A:middle
There is the inputAccessoryView

00:34:19.056 --> 00:34:20.906 A:middle
and the inputAccessory
ViewController.

00:34:20.906 --> 00:34:23.326 A:middle
And if you assign to these
properties on the text fields

00:34:23.326 --> 00:34:24.996 A:middle
that you are wanting
to edit text in,

00:34:25.326 --> 00:34:27.396 A:middle
then when the keyboard
appears you can show some

00:34:27.396 --> 00:34:29.246 A:middle
of your own views right
there alongside the keyboard.

00:34:29.246 --> 00:34:31.226 A:middle
And I'll show you a screenshot
of that here in just a second.

00:34:32.456 --> 00:34:34.076 A:middle
And finally, I want to
point out one change

00:34:34.076 --> 00:34:37.016 A:middle
in behavior that's happened
between tvOS 9 and tvOS 10.

00:34:37.456 --> 00:34:40.376 A:middle
UITextField has this property
called keyboardAppearance,

00:34:40.376 --> 00:34:42.346 A:middle
and you can set to
unspecified light or dark.

00:34:42.606 --> 00:34:45.616 A:middle
And on tvOS 9, if you
set it, say, to dark,

00:34:45.906 --> 00:34:47.966 A:middle
then not only would the
keyboard itself be dark

00:34:47.966 --> 00:34:50.646 A:middle
when it presents itself, but the
text field would also be dark

00:34:50.646 --> 00:34:51.815 A:middle
as it's sitting there
on the screen.

00:34:52.545 --> 00:34:54.896 A:middle
Well now in tvOS 10 we have
this new appearance API.

00:34:54.896 --> 00:34:57.596 A:middle
And so the entire system can
respond to light or to dark.

00:34:57.876 --> 00:35:00.226 A:middle
And so now what we
do on tvOS 10 is

00:34:57.876 --> 00:35:00.226 A:middle
And so now what we
do on tvOS 10 is

00:35:00.226 --> 00:35:02.466 A:middle
that this keyboard appearance
property will only affect the

00:35:02.466 --> 00:35:04.246 A:middle
keyboard, and the appearance

00:35:04.246 --> 00:35:05.846 A:middle
of the text field
will now be dictated

00:35:05.846 --> 00:35:08.476 A:middle
by the larger tray
collection in UPI.

00:35:09.306 --> 00:35:10.986 A:middle
Okay, so here's the
screen shot I promised you.

00:35:10.986 --> 00:35:14.036 A:middle
So in this case I have created
just a regular text field,

00:35:14.036 --> 00:35:15.536 A:middle
and I gave it an
inputAccessoryView.

00:35:15.536 --> 00:35:17.556 A:middle
And I put a red border on it
so you can see where it is.

00:35:17.896 --> 00:35:20.366 A:middle
And those UI labels in there
are there are totally custom.

00:35:20.366 --> 00:35:22.476 A:middle
And I just put them in there
so you can add any kind

00:35:22.476 --> 00:35:23.586 A:middle
of accessory views that you'd

00:35:23.586 --> 00:35:24.996 A:middle
like that could appear
right above the keyboard.

00:35:26.776 --> 00:35:29.246 A:middle
Now another great way that
you can get UI on the screen

00:35:29.246 --> 00:35:31.236 A:middle
at the same time as the keyboard
is to use SearchController.

00:35:31.496 --> 00:35:33.996 A:middle
And you use some APIs you
also might recognize from iOS,

00:35:33.996 --> 00:35:35.246 A:middle
and that's UISearchController.

00:35:35.676 --> 00:35:40.406 A:middle
So we have the keyboard, and the
search results appear below it.

00:35:40.726 --> 00:35:42.876 A:middle
And this also automatically
adapts.

00:35:42.876 --> 00:35:45.116 A:middle
There is a grid-based layout and
a linear-based layout depending

00:35:45.116 --> 00:35:46.556 A:middle
on the input device
the user is using.

00:35:46.896 --> 00:35:48.606 A:middle
And you can even
embed this inside

00:35:48.606 --> 00:35:49.456 A:middle
of other view controllers.

00:35:49.456 --> 00:35:51.776 A:middle
SearchController usually wants
to be presented modally and take

00:35:51.776 --> 00:35:52.566 A:middle
over the whole screen.

00:35:52.876 --> 00:35:54.726 A:middle
But you can embed it
inside of another search --

00:35:54.726 --> 00:35:57.496 A:middle
another view controller
by using UISearchContainer

00:35:57.496 --> 00:35:58.006 A:middle
ViewController.

00:35:58.006 --> 00:35:59.926 A:middle
And I'll show you a code sample
of that, just a few slides.

00:36:00.176 --> 00:36:04.206 A:middle
You provide your own custom view
controller for search results.

00:36:04.236 --> 00:36:06.576 A:middle
So the visual appearance
of the search results

00:36:06.576 --> 00:36:08.146 A:middle
and the interaction of them
is completely up to you.

00:36:08.146 --> 00:36:09.196 A:middle
You can do whatever you want.

00:36:09.196 --> 00:36:11.516 A:middle
You might use a collection view,
or maybe you'll use a split view

00:36:11.516 --> 00:36:13.066 A:middle
that has a table view and a
collection view if you want.

00:36:13.266 --> 00:36:14.146 A:middle
Any other things you'd like --

00:36:14.146 --> 00:36:15.646 A:middle
it's totally up to you
for that view controller.

00:36:17.696 --> 00:36:18.786 A:middle
So here's a quick sample

00:36:18.786 --> 00:36:21.386 A:middle
of how you might embed a
search controller inside

00:36:21.386 --> 00:36:23.006 A:middle
of something else like,
say, a tab bar controller.

00:36:23.006 --> 00:36:25.166 A:middle
So I have got my custom
ViewController class here.

00:36:26.046 --> 00:36:29.126 A:middle
And in viewDidAppear I am going
to create a searchController.

00:36:29.126 --> 00:36:30.766 A:middle
I want to make sure I don't do
this twice, so I am checking

00:36:30.766 --> 00:36:32.016 A:middle
to make sure I haven't
done this already.

00:36:32.516 --> 00:36:35.316 A:middle
Then I am creating
my UISearchController

00:36:35.316 --> 00:36:38.066 A:middle
and telling it view controller
to use for my results and who

00:36:38.066 --> 00:36:39.816 A:middle
to contact as the
search query changes.

00:36:40.486 --> 00:36:42.216 A:middle
Then I am going to
wrap that inside

00:36:42.216 --> 00:36:44.246 A:middle
of this UISearchContainer
ViewController.

00:36:44.246 --> 00:36:46.126 A:middle
And this allows me now
to take this container,

00:36:46.286 --> 00:36:48.436 A:middle
and I can do regular
ViewController containment

00:36:48.436 --> 00:36:48.686 A:middle
on it.

00:36:48.726 --> 00:36:50.946 A:middle
And then I am going to add
it as a ChildViewController.

00:36:50.946 --> 00:36:53.116 A:middle
And if you do something like
this, then you'll be able

00:36:53.116 --> 00:36:55.626 A:middle
to easily use a search
controller inside of a tab bar,

00:36:55.786 --> 00:36:59.276 A:middle
much like some of the
system apps on tvOS.

00:36:59.666 --> 00:37:01.176 A:middle
And that is text input.

00:36:59.666 --> 00:37:01.176 A:middle
And that is text input.

00:37:01.556 --> 00:37:03.586 A:middle
So in summary, one of the
things that we want you

00:37:03.586 --> 00:37:04.466 A:middle
to take away from this talk.

00:37:04.856 --> 00:37:07.706 A:middle
First one is, when you are
doing Menu button handling,

00:37:07.806 --> 00:37:08.256 A:middle
be careful.

00:37:08.256 --> 00:37:09.766 A:middle
Keep in mind that you
don't want to interfere

00:37:09.766 --> 00:37:11.406 A:middle
with the system gestures.

00:37:11.776 --> 00:37:14.936 A:middle
When you are working with
layered images, take advantage

00:37:14.936 --> 00:37:16.626 A:middle
of the layout guides
that we have given you

00:37:16.626 --> 00:37:18.816 A:middle
and the coordinated
animation API to make sure

00:37:18.816 --> 00:37:21.046 A:middle
that your views can
move around in tandem

00:37:21.096 --> 00:37:22.146 A:middle
with the system animations.

00:37:23.656 --> 00:37:25.096 A:middle
If you want to do
direct manipulation

00:37:25.096 --> 00:37:26.606 A:middle
on ScrollViews you
don't have to do any

00:37:26.606 --> 00:37:27.696 A:middle
of that handling code yourself.

00:37:27.696 --> 00:37:30.136 A:middle
Just reuse the pan gestures
that already come built in.

00:37:30.616 --> 00:37:33.836 A:middle
And finally, take advantage of
the system keyboard to make sure

00:37:33.836 --> 00:37:35.766 A:middle
that your users are getting
all the features they can

00:37:35.766 --> 00:37:36.806 A:middle
when it comes to text input.

00:37:37.526 --> 00:37:39.196 A:middle
So for more information
about this talk,

00:37:39.196 --> 00:37:40.126 A:middle
you can visit this URL,

00:37:40.126 --> 00:37:41.506 A:middle
where you'll find
links to documentation.

00:37:41.506 --> 00:37:43.576 A:middle
We have got a bunch
of other sessions

00:37:43.576 --> 00:37:44.826 A:middle
that are coming up this week.

00:37:44.826 --> 00:37:46.176 A:middle
I want to call up two
of them in particular

00:37:46.176 --> 00:37:48.186 A:middle
that are both about
UIKit on tvOS.

00:37:48.186 --> 00:37:49.836 A:middle
So have a great rest
of the conference.

00:37:49.836 --> 00:37:50.136 A:middle
Thank you.

00:37:51.508 --> 00:37:53.508 A:middle
[ Applause ]
