WEBVTT

00:00:07.516 --> 00:00:19.460 A:middle
[ Music ]

00:00:22.516 --> 00:00:27.896 A:middle
[ Applause ]

00:00:28.396 --> 00:00:30.036 A:middle
&gt;&gt; Good afternoon
everyone and welcome

00:00:30.036 --> 00:00:32.286 A:middle
to Architecting Performance
on watchOS 3.

00:00:32.806 --> 00:00:34.006 A:middle
My name is Tyler McAtee

00:00:34.266 --> 00:00:36.476 A:middle
and shortly you'll be meeting
my colleague, Todd Grooms.

00:00:37.386 --> 00:00:39.996 A:middle
Today we'll be discussing the
way we at Apple have thought

00:00:39.996 --> 00:00:42.806 A:middle
about performance and where that
took us when building watchOS 3.

00:00:43.736 --> 00:00:47.156 A:middle
We'll start by talking about
2-Second tasks, what that is,

00:00:47.426 --> 00:00:49.456 A:middle
how it helped influence
the design of watchOS 3,

00:00:49.576 --> 00:00:51.366 A:middle
and what that means for
your app's architecture.

00:00:52.366 --> 00:00:55.166 A:middle
I'll then talk a bit about how
design strategies influenced

00:00:55.166 --> 00:00:59.206 A:middle
performance and, showcase
a new detail paging API

00:00:59.206 --> 00:01:01.686 A:middle
that will help reduce
unnecessary navigation time.

00:00:59.206 --> 00:01:01.686 A:middle
that will help reduce
unnecessary navigation time.

00:01:02.946 --> 00:01:04.696 A:middle
Finally, Todd will come on stage

00:01:04.736 --> 00:01:06.856 A:middle
and show how we've taken
these ideas and applied

00:01:06.856 --> 00:01:08.726 A:middle
to them the stock's
watch application.

00:01:09.366 --> 00:01:11.436 A:middle
So let's start with
2-Second tasks.

00:01:11.436 --> 00:01:13.856 A:middle
We've focused on this idea
as a good rule of thumb

00:01:14.086 --> 00:01:16.276 A:middle
for what an interaction with the
Apple Watch should feel like.

00:01:16.436 --> 00:01:17.776 A:middle
So what is a 2-Second task?

00:01:18.636 --> 00:01:21.156 A:middle
A 2-Second task is something
the user wants to accomplish

00:01:21.226 --> 00:01:22.926 A:middle
or learn by looking
at their Apple Watch.

00:01:23.716 --> 00:01:25.786 A:middle
These tasks should only
take a couple seconds.

00:01:26.516 --> 00:01:29.926 A:middle
And these seconds should be
measured from the very beginning

00:01:29.926 --> 00:01:31.626 A:middle
of the interaction
until the very end,

00:01:31.866 --> 00:01:33.706 A:middle
from the moment the user
raises their wrist to look

00:01:33.706 --> 00:01:35.776 A:middle
at their Apple Watch, to the
point where they've lowered it.

00:01:36.836 --> 00:01:41.086 A:middle
Some examples of a 2-Second task
may be, checking a notification,

00:01:41.816 --> 00:01:43.526 A:middle
setting a timer or
starting a workout.

00:01:44.826 --> 00:01:46.076 A:middle
Today I'm going to
walk through some

00:01:46.076 --> 00:01:47.816 A:middle
of the key changes
we've made to the system

00:01:47.936 --> 00:01:49.726 A:middle
and explain how these
will affect the way you

00:01:49.726 --> 00:01:51.766 A:middle
as a developer should
think about performance

00:01:51.766 --> 00:01:52.936 A:middle
in your WatchKit application.

00:01:54.986 --> 00:01:56.516 A:middle
Now, one of the first
bottlenecks

00:01:56.516 --> 00:01:59.006 A:middle
in accomplishing a task on
the Apple Watch is the amount

00:01:59.006 --> 00:02:01.726 A:middle
of navigation it can take to get
to the appropriate application.

00:01:59.006 --> 00:02:01.726 A:middle
of navigation it can take to get
to the appropriate application.

00:02:02.496 --> 00:02:04.046 A:middle
The quickest way to
launch an application

00:02:04.046 --> 00:02:06.226 A:middle
on the Apple Watch is by
tapping a complication.

00:02:06.896 --> 00:02:09.326 A:middle
We only encourage developers
to implement a complication

00:02:09.476 --> 00:02:10.895 A:middle
if they had relevant
data to display.

00:02:10.895 --> 00:02:13.626 A:middle
A lot of our apps,
such as Messages,

00:02:13.626 --> 00:02:15.496 A:middle
Mail and Phone had
no complication.

00:02:16.266 --> 00:02:17.796 A:middle
In order to increase
navigatability

00:02:17.796 --> 00:02:20.696 A:middle
on the Apple Watch as well as
present users with more options

00:02:20.696 --> 00:02:23.146 A:middle
to customize, now
on watchOS 3 all

00:02:23.146 --> 00:02:25.046 A:middle
of our applications
have complications.

00:02:25.906 --> 00:02:28.486 A:middle
These launcher complications
are useful for quick access

00:02:28.486 --> 00:02:30.256 A:middle
to your very favorite
applications right

00:02:30.256 --> 00:02:31.156 A:middle
from the watch face.

00:02:31.776 --> 00:02:33.176 A:middle
We encourage you to
adopt this policy

00:02:33.176 --> 00:02:34.486 A:middle
for your application as well.

00:02:34.816 --> 00:02:38.876 A:middle
Implement a complication whether
or not you have data to display.

00:02:38.996 --> 00:02:41.496 A:middle
Additionally, new in watchOS
3 we've brought you the dock.

00:02:42.576 --> 00:02:44.936 A:middle
Just by pressing the side button
users will be able to bring

00:02:44.936 --> 00:02:46.786 A:middle
up their dock and
quickly look through all

00:02:46.786 --> 00:02:48.036 A:middle
of their favorites applications.

00:02:49.066 --> 00:02:52.136 A:middle
Navigating to and from these
applications is extremely quick

00:02:52.136 --> 00:02:52.526 A:middle
and easy.

00:02:53.496 --> 00:02:55.006 A:middle
Now we want our users
to be able to go

00:02:55.006 --> 00:02:57.246 A:middle
to these favorite applications
and have them already ready

00:02:57.246 --> 00:02:59.866 A:middle
and loaded, instead of having to
wait for an activity indicator

00:02:59.906 --> 00:03:01.166 A:middle
as the application
is brought up.

00:02:59.906 --> 00:03:01.166 A:middle
as the application
is brought up.

00:03:01.926 --> 00:03:05.146 A:middle
In order to address this, in
watchOS 3 all the applications

00:03:05.146 --> 00:03:07.106 A:middle
that a user chooses to
put on their watch face

00:03:07.226 --> 00:03:09.506 A:middle
or in their dock will be
kept alive and suspended

00:03:09.506 --> 00:03:10.536 A:middle
in memory by the system.

00:03:11.376 --> 00:03:13.866 A:middle
That way when they go to
interact with the applications,

00:03:14.066 --> 00:03:16.316 A:middle
they only have to wait for
resume, instead of a launch.

00:03:16.926 --> 00:03:18.686 A:middle
But the system still has
a fixed amount of memory,

00:03:19.046 --> 00:03:20.586 A:middle
and as an application
in the system,

00:03:20.916 --> 00:03:22.176 A:middle
you'll need to be
a good citizen.

00:03:22.456 --> 00:03:24.486 A:middle
Because there can be up
to 10 dock applications,

00:03:24.776 --> 00:03:26.756 A:middle
up to 5 complications, as well

00:03:26.756 --> 00:03:28.826 A:middle
as the system application,
processes and more.

00:03:30.236 --> 00:03:32.486 A:middle
You have to remember
that you're just one part

00:03:32.486 --> 00:03:35.296 A:middle
of a large ecosystem, so
you have to only use as much

00:03:35.296 --> 00:03:37.006 A:middle
as you absolutely need.

00:03:38.206 --> 00:03:40.956 A:middle
Now the system, because of
the nature of this ecosystem,

00:03:41.046 --> 00:03:43.866 A:middle
our system does impose a fixed
ceiling on the amount of memory

00:03:43.866 --> 00:03:45.526 A:middle
that a WatchKit application
can use.

00:03:46.016 --> 00:03:47.046 A:middle
If you exceed this limit,

00:03:47.286 --> 00:03:49.696 A:middle
our system will terminate you
abruptly with no chance to tear

00:03:49.696 --> 00:03:52.386 A:middle
down so that the memory can be
reclaimed for other processes.

00:03:52.836 --> 00:03:56.256 A:middle
This limit isn't a goal, and you
shouldn't feel the need to use

00:03:56.256 --> 00:03:57.836 A:middle
up all this memory
and realistically,

00:03:57.836 --> 00:03:58.976 A:middle
it should be nowhere
near the limit.

00:03:59.626 --> 00:04:02.696 A:middle
The current limit, as of watchOS
3 is 30 megabytes per WatchKit

00:03:59.626 --> 00:04:02.696 A:middle
The current limit, as of watchOS
3 is 30 megabytes per WatchKit

00:04:02.696 --> 00:04:04.716 A:middle
application, but this
may change in the future.

00:04:05.786 --> 00:04:07.966 A:middle
So what are some good tips for
keeping your memory usage down?

00:04:09.146 --> 00:04:11.306 A:middle
Use appropriately sized
images for the watch screen,

00:04:11.656 --> 00:04:13.586 A:middle
not only does this
keep down memory usage

00:04:13.816 --> 00:04:15.456 A:middle
but will help increase
overall performance,

00:04:15.496 --> 00:04:16.326 A:middle
because the watch won't have

00:04:16.356 --> 00:04:18.696 A:middle
to do the extra work
to resize the images.

00:04:19.326 --> 00:04:23.926 A:middle
Use appropriately sized data
sets, don't download a giant set

00:04:23.926 --> 00:04:25.786 A:middle
of data if you're only
displaying a few records

00:04:25.786 --> 00:04:26.236 A:middle
on screen.

00:04:26.716 --> 00:04:29.136 A:middle
And if you're only displaying
one property of a data object,

00:04:29.286 --> 00:04:30.126 A:middle
don't download or keep

00:04:30.126 --> 00:04:31.676 A:middle
around all the other
properties as well.

00:04:32.866 --> 00:04:34.936 A:middle
If you have control over
the API you're using

00:04:34.936 --> 00:04:36.896 A:middle
to download the data
it may make sense

00:04:36.896 --> 00:04:39.406 A:middle
to build separate end points
for the phone and for the watch

00:04:39.406 --> 00:04:41.906 A:middle
since the watch will probably
display a more condensed version

00:04:41.906 --> 00:04:42.706 A:middle
of the information.

00:04:43.176 --> 00:04:45.876 A:middle
This will help save on the
amount of network traffic

00:04:45.876 --> 00:04:47.916 A:middle
that your watch has to
process as well as the amount

00:04:47.916 --> 00:04:48.996 A:middle
of transient data and memory.

00:04:50.306 --> 00:04:51.756 A:middle
Finally, it's important

00:04:51.756 --> 00:04:53.156 A:middle
to release objects
you're no longer using.

00:04:53.736 --> 00:04:54.896 A:middle
Take the time to go
through your code

00:04:54.896 --> 00:04:55.926 A:middle
and make sure you're
only keeping

00:04:55.926 --> 00:04:57.466 A:middle
around things you
absolutely need.

00:04:58.516 --> 00:05:01.436 A:middle
Now, because the applications
that a user chooses to put

00:04:58.516 --> 00:05:01.436 A:middle
Now, because the applications
that a user chooses to put

00:05:01.436 --> 00:05:03.776 A:middle
on their watch face and
in the dock are kept alive

00:05:03.776 --> 00:05:05.386 A:middle
and suspended in
memory by the system,

00:05:05.386 --> 00:05:08.136 A:middle
they will be resumed much more
often than they're launched.

00:05:08.896 --> 00:05:11.576 A:middle
Because of this, for watchOS 3
the key path we want to focus

00:05:11.576 --> 00:05:13.036 A:middle
on optimizing is resume time.

00:05:14.046 --> 00:05:16.826 A:middle
Now apps won't only be
resumed more often just

00:05:16.826 --> 00:05:18.316 A:middle
because they're kept
alive in memory,

00:05:18.506 --> 00:05:19.916 A:middle
but also because
they're in the dock.

00:05:20.806 --> 00:05:22.976 A:middle
When the user scrolls over to
your application in the dock,

00:05:23.396 --> 00:05:24.516 A:middle
the application will be resumed.

00:05:24.516 --> 00:05:27.706 A:middle
When the user scrolls away, the
application will be suspended.

00:05:29.186 --> 00:05:32.896 A:middle
This behavior of resuming and
suspending often is now typical

00:05:32.896 --> 00:05:34.406 A:middle
for applications in watchOS 3.

00:05:34.436 --> 00:05:37.446 A:middle
So it's important to understand

00:05:37.446 --> 00:05:39.526 A:middle
which lifecycle methods
are a good place to do work

00:05:39.706 --> 00:05:41.756 A:middle
and which lifecycle methods
are not a good place.

00:05:42.876 --> 00:05:44.626 A:middle
So let's talk about the
different lifecycle methods

00:05:44.676 --> 00:05:46.436 A:middle
that the WatchKit
extension delegate will see.

00:05:47.576 --> 00:05:49.576 A:middle
ApplicationDidFinishLaunching
is the first method

00:05:49.576 --> 00:05:50.526 A:middle
that your delegate will see.

00:05:50.946 --> 00:05:53.086 A:middle
This gets called when the
application is first launched

00:05:53.426 --> 00:05:55.596 A:middle
and is a good place to perform
any final initialization

00:05:55.596 --> 00:05:57.556 A:middle
of your application
as well as any tasks

00:05:57.556 --> 00:05:59.156 A:middle
that only need to
be performed once.

00:06:00.146 --> 00:06:01.886 A:middle
The second method that
your delegate will see

00:06:01.886 --> 00:06:04.076 A:middle
is applicationDidBecomeActive.

00:06:05.036 --> 00:06:07.616 A:middle
This gets called whenever your
application becomes the active

00:06:07.616 --> 00:06:10.136 A:middle
application on the
platform, restart any tasks

00:06:10.186 --> 00:06:13.126 A:middle
that were previously paused or
not yet started, and if needed,

00:06:13.256 --> 00:06:14.546 A:middle
refresh the user interface.

00:06:15.986 --> 00:06:17.886 A:middle
Once the application
goes from the active

00:06:18.006 --> 00:06:19.716 A:middle
to the inactive state
you will get the

00:06:19.716 --> 00:06:21.446 A:middle
applicationWillResignActive
call.

00:06:22.156 --> 00:06:24.596 A:middle
This can occur for certain
types of temporary interruptions

00:06:24.596 --> 00:06:26.836 A:middle
such as an incoming phone
call or a notification

00:06:27.406 --> 00:06:29.576 A:middle
when the user presses the side
button to bring up the dock,

00:06:30.016 --> 00:06:31.706 A:middle
or when the user
exits your application

00:06:31.786 --> 00:06:34.306 A:middle
and it starts its transition
to the background state.

00:06:35.876 --> 00:06:38.296 A:middle
When your application is no
longer active and it starts

00:06:38.296 --> 00:06:39.576 A:middle
to go to the background
you'll get the

00:06:39.576 --> 00:06:41.156 A:middle
applicationDidEnterBackground
call.

00:06:41.156 --> 00:06:42.666 A:middle
And when your application
returns

00:06:42.666 --> 00:06:44.986 A:middle
to the foreground you'll get the
applicationWillEnterForeground

00:06:44.986 --> 00:06:45.236 A:middle
call.

00:06:45.966 --> 00:06:47.376 A:middle
These methods are only
called when you're going

00:06:47.376 --> 00:06:50.446 A:middle
from background to foreground or
from foreground to background,

00:06:50.486 --> 00:06:51.836 A:middle
so it won't be called
on first launch.

00:06:52.376 --> 00:06:55.826 A:middle
In addition, there are
lifecycle methods associated

00:06:55.826 --> 00:06:56.866 A:middle
with the interface controller.

00:06:57.876 --> 00:06:59.306 A:middle
AwakeWithContext gets called

00:06:59.306 --> 00:07:01.396 A:middle
when your interface
controller's first instantiated.

00:06:59.306 --> 00:07:01.396 A:middle
when your interface
controller's first instantiated.

00:07:01.806 --> 00:07:04.336 A:middle
This is a good place to do work
that only needs to be done once.

00:07:05.326 --> 00:07:07.906 A:middle
willActivate is called when
the interface is active

00:07:08.026 --> 00:07:09.056 A:middle
and able to be updated.

00:07:09.356 --> 00:07:11.686 A:middle
It can be called before the
interface is actually visible

00:07:11.686 --> 00:07:12.276 A:middle
to the user.

00:07:12.676 --> 00:07:14.696 A:middle
Once the interface is
fully visible to the user,

00:07:14.696 --> 00:07:15.906 A:middle
you'll get the didAppear method.

00:07:16.526 --> 00:07:17.806 A:middle
If you have work
to do on resume,

00:07:18.236 --> 00:07:19.636 A:middle
these methods are the
good place to do it.

00:07:20.146 --> 00:07:21.946 A:middle
If the work is heavy
weight it may make sense

00:07:22.006 --> 00:07:23.926 A:middle
to dispatch the work out
to a background queue,

00:07:24.086 --> 00:07:25.386 A:middle
so that these methods
can complete

00:07:25.756 --> 00:07:27.026 A:middle
and your app can
finish resuming.

00:07:28.876 --> 00:07:30.436 A:middle
Once you're application's
getting suspended,

00:07:31.016 --> 00:07:32.766 A:middle
you'll get the willDisappear
call first

00:07:32.766 --> 00:07:35.896 A:middle
on your interface controller
when the user interface is

00:07:35.896 --> 00:07:37.696 A:middle
about to be no longer
visible to the user.

00:07:38.646 --> 00:07:40.556 A:middle
Once the user interface
is deactivated

00:07:40.556 --> 00:07:43.226 A:middle
and no longer be updated you'll
get the didDeactivate call.

00:07:44.376 --> 00:07:46.826 A:middle
These methods are a good place
to cancel any heavy weight tasks

00:07:46.936 --> 00:07:49.476 A:middle
that you may have started in
willActivate and didAppear.

00:07:50.716 --> 00:07:54.746 A:middle
It's important to understand
this lifecycle and understand

00:07:54.746 --> 00:07:57.266 A:middle
that these methods can get
called repeatedly and often.

00:07:58.546 --> 00:08:00.136 A:middle
I'd like to now walk
through an example

00:07:58.546 --> 00:08:00.136 A:middle
I'd like to now walk
through an example

00:08:00.136 --> 00:08:02.046 A:middle
of how an application might
see these events during

00:08:02.046 --> 00:08:02.646 A:middle
its lifetime.

00:08:03.246 --> 00:08:05.496 A:middle
We'll start with an application
that, for the purposes

00:08:05.496 --> 00:08:07.596 A:middle
of this talk is not
running or backgrounded.

00:08:08.216 --> 00:08:09.716 A:middle
When the user taps
your application,

00:08:09.976 --> 00:08:12.376 A:middle
the first methods will go to
the WatchKit extension delegate,

00:08:12.746 --> 00:08:14.516 A:middle
didFinishLaunching,
and didBecomeActive.

00:08:15.116 --> 00:08:17.716 A:middle
The interface controller will
receive its awakeWithContext

00:08:17.796 --> 00:08:19.136 A:middle
willActivate and didAppear.

00:08:20.436 --> 00:08:23.206 A:middle
Now your application is running
foregrounded, and active.

00:08:23.246 --> 00:08:25.536 A:middle
But what happens when the
user presses the side button

00:08:25.636 --> 00:08:26.396 A:middle
to bring up the dock?

00:08:27.476 --> 00:08:30.076 A:middle
At this moment your application
is no longer the active

00:08:30.076 --> 00:08:32.655 A:middle
application on the platform,
that's the system application.

00:08:32.876 --> 00:08:35.535 A:middle
So your delegate will get the
applicationWillResignActive

00:08:35.596 --> 00:08:35.785 A:middle
call.

00:08:38.166 --> 00:08:40.436 A:middle
While the user's still settled
on your application however,

00:08:40.726 --> 00:08:42.285 A:middle
you'll still foreground
it in running,

00:08:42.446 --> 00:08:43.666 A:middle
you're getting CPU time,

00:08:43.666 --> 00:08:46.066 A:middle
your updating your user
interface, all that.

00:08:46.476 --> 00:08:48.616 A:middle
As soon as the user scrolls
away from your application,

00:08:48.906 --> 00:08:50.516 A:middle
the system will suspend
your application.

00:08:50.956 --> 00:08:53.196 A:middle
So your interface controller
will get the willDisappear

00:08:53.196 --> 00:08:54.926 A:middle
and didDeactivate
and you'll get your

00:08:54.926 --> 00:08:56.446 A:middle
application didEnterBackground.

00:08:58.876 --> 00:09:01.436 A:middle
Now here your application has
just entered a background state

00:08:58.876 --> 00:09:01.436 A:middle
Now here your application has
just entered a background state

00:09:01.956 --> 00:09:03.816 A:middle
so the system might
wake up your application

00:09:03.876 --> 00:09:05.316 A:middle
for a background snapshot task.

00:09:05.766 --> 00:09:07.486 A:middle
To learn more about
these snapshot tasks,

00:09:07.746 --> 00:09:09.156 A:middle
check out the talk
we gave this morning,

00:09:09.366 --> 00:09:10.706 A:middle
Keeping Your Watch
Apps Up to Date.

00:09:10.706 --> 00:09:14.066 A:middle
Your interface controller gets
woken up with willActivate

00:09:14.066 --> 00:09:16.576 A:middle
and didAppear, before your
delegates given the opportunity

00:09:16.676 --> 00:09:17.876 A:middle
to handleBackgroundTasks.

00:09:18.716 --> 00:09:20.196 A:middle
And then your interface
controller gets the

00:09:20.196 --> 00:09:21.706 A:middle
willDisappear and didDeactivate.

00:09:22.936 --> 00:09:24.736 A:middle
Now your application
is fully suspended

00:09:24.836 --> 00:09:26.526 A:middle
and it's handled its
background tasks.

00:09:26.896 --> 00:09:28.776 A:middle
Once the user swipes
back to your application,

00:09:29.096 --> 00:09:30.906 A:middle
you'll get your
applicationWillEnterForeground,

00:09:31.306 --> 00:09:34.586 A:middle
and your willActivate
and didAppear.

00:09:34.586 --> 00:09:36.406 A:middle
Your application is
once again running

00:09:36.486 --> 00:09:37.846 A:middle
and foregrounded in the dock.

00:09:38.586 --> 00:09:40.636 A:middle
It's no until the user taps
into your application though

00:09:40.636 --> 00:09:42.786 A:middle
that you become the active
application on the platform

00:09:42.786 --> 00:09:44.686 A:middle
and get
applicationDidBecomeActive.

00:09:46.236 --> 00:09:48.806 A:middle
Now a lot has happened just
from the user entering the dock,

00:09:48.956 --> 00:09:51.366 A:middle
swiping away from your
application, and swiping back.

00:09:51.816 --> 00:09:54.076 A:middle
That's why it's important to
be cognizant of this lifecycle

00:09:54.076 --> 00:09:56.716 A:middle
and understand that as a
user browses their dock your

00:09:56.716 --> 00:10:01.706 A:middle
application may be seeing these
events repeatedly and often.

00:09:56.716 --> 00:10:01.706 A:middle
application may be seeing these
events repeatedly and often.

00:10:02.046 --> 00:10:03.856 A:middle
So what are some other tips
for reducing resume time?

00:10:04.416 --> 00:10:08.276 A:middle
You should use discretion when
updating WKInterface objects.

00:10:08.576 --> 00:10:10.216 A:middle
Every time you set a property

00:10:10.216 --> 00:10:13.216 A:middle
on WKInterface object the system
creates a message to send,

00:10:13.506 --> 00:10:15.686 A:middle
packs it up, and dispatches
it to the app process

00:10:15.726 --> 00:10:16.766 A:middle
where the UI is updated.

00:10:17.476 --> 00:10:19.986 A:middle
It may be tempting to build some
method that based on the state

00:10:19.986 --> 00:10:22.646 A:middle
of your application updates
your UI and then call

00:10:22.646 --> 00:10:23.686 A:middle
that every time you resume.

00:10:24.016 --> 00:10:25.846 A:middle
But setting each property
comes with a cost.

00:10:26.116 --> 00:10:28.376 A:middle
Even if the property isn't
changing this results

00:10:28.376 --> 00:10:32.456 A:middle
in unnecessary traffic between
the app and the extension.

00:10:32.456 --> 00:10:34.476 A:middle
It's worth the effort to
only set these properties

00:10:34.476 --> 00:10:39.096 A:middle
if they're changing, so
you absolutely need to.

00:10:39.256 --> 00:10:40.096 A:middle
You should also not

00:10:40.096 --> 00:10:43.146 A:middle
that WKInterfaceTable does not
behave the same as UITableView.

00:10:43.706 --> 00:10:44.946 A:middle
The phone has a lot more memory

00:10:44.946 --> 00:10:46.486 A:middle
for storing a lot
more information

00:10:46.736 --> 00:10:49.416 A:middle
and UITableView is just
optimized to quickly scroll

00:10:49.416 --> 00:10:50.466 A:middle
through these larger data set.

00:10:51.076 --> 00:10:53.836 A:middle
The cells are created on demand,
and are reused as you scroll.

00:10:54.806 --> 00:10:56.396 A:middle
With WKInterfaceTable however,

00:10:56.536 --> 00:10:59.196 A:middle
all the cells are created
upfront and there's no reuse.

00:10:59.396 --> 00:11:00.776 A:middle
So the amount of work
that your watch has

00:10:59.396 --> 00:11:00.776 A:middle
So the amount of work
that your watch has

00:11:00.776 --> 00:11:02.966 A:middle
to do scales linearly
with the table size.

00:11:03.886 --> 00:11:05.186 A:middle
Because of that it's important

00:11:05.186 --> 00:11:07.146 A:middle
to keep WKInterfaceTable
size down.

00:11:07.716 --> 00:11:09.776 A:middle
The watch is not the appropriate
form factor to scroll

00:11:09.776 --> 00:11:12.666 A:middle
through hundreds of records and
in fact we found that it's best

00:11:12.666 --> 00:11:17.876 A:middle
to keep WKInterfaceTable
size to maybe just over 20.

00:11:18.116 --> 00:11:20.536 A:middle
You should avoid reloading
a WKInterfaceTable whenever

00:11:20.536 --> 00:11:21.336 A:middle
possible as well.

00:11:21.766 --> 00:11:24.106 A:middle
This is an expensive operation.

00:11:24.626 --> 00:11:27.886 A:middle
If it may be tempting to reload
your entire table on resume

00:11:28.026 --> 00:11:30.336 A:middle
or when your data set
changes, but if you need to add

00:11:30.336 --> 00:11:31.506 A:middle
and remove rows, it's better

00:11:31.506 --> 00:11:34.636 A:middle
to use the insertion
and deletion APIs.

00:11:35.806 --> 00:11:38.096 A:middle
I'd now like to talk
a bit about design.

00:11:38.696 --> 00:11:40.666 A:middle
Thinking about the right
information to display

00:11:40.666 --> 00:11:42.876 A:middle
on the watch form factor
as well as the best way

00:11:42.876 --> 00:11:44.986 A:middle
to display it can
greatly help performance.

00:11:46.466 --> 00:11:48.786 A:middle
In watchOS 3you should
design your applications

00:11:48.986 --> 00:11:49.866 A:middle
to be glanceable.

00:11:50.276 --> 00:11:54.646 A:middle
The dock lets users quickly look

00:11:54.776 --> 00:11:56.106 A:middle
through their favorite
applications.

00:11:56.636 --> 00:11:58.586 A:middle
So your application may
only be seen on screen

00:11:58.586 --> 00:12:00.726 A:middle
for a brief moment in
time as the user swipes

00:11:58.586 --> 00:12:00.726 A:middle
for a brief moment in
time as the user swipes

00:12:00.726 --> 00:12:02.196 A:middle
from one application
to the other.

00:12:02.806 --> 00:12:05.326 A:middle
So focus on showing only the
most essential information

00:12:05.416 --> 00:12:07.006 A:middle
and display it as
clearly as possible.

00:12:08.196 --> 00:12:11.186 A:middle
Part of making your application
more glanceable is designing it

00:12:11.186 --> 00:12:12.266 A:middle
with a focused purpose.

00:12:12.956 --> 00:12:15.376 A:middle
The watch is not the appropriate
form factor for scrolling

00:12:15.376 --> 00:12:16.886 A:middle
through large amounts
of content,

00:12:17.386 --> 00:12:19.236 A:middle
or looking at complex
data hierarchies.

00:12:20.126 --> 00:12:22.426 A:middle
By only showing the most
essential information,

00:12:22.546 --> 00:12:24.436 A:middle
you tend to get better
performance as a byproduct.

00:12:25.216 --> 00:12:27.336 A:middle
Since you're displaying less
data, you save on memory

00:12:27.396 --> 00:12:29.416 A:middle
and processing and need
fewer network calls

00:12:29.416 --> 00:12:32.506 A:middle
to stay up to date.

00:12:32.506 --> 00:12:34.406 A:middle
Lastly, it's important
to consider navigation.

00:12:34.966 --> 00:12:36.876 A:middle
I've talked a lot about how
we've improved navigation

00:12:36.876 --> 00:12:39.036 A:middle
on a system level, but
it's equally important

00:12:39.036 --> 00:12:41.346 A:middle
to consider navigation on an
application level as well.

00:12:41.976 --> 00:12:45.636 A:middle
In order to help with this
we're introducing a new detailed

00:12:45.636 --> 00:12:46.266 A:middle
pageing API.

00:12:47.326 --> 00:12:51.736 A:middle
A standard setup for a WatchKit
application is the hierarchal

00:12:51.736 --> 00:12:55.446 A:middle
data view where you have a
table of cells, and tapping one

00:12:55.446 --> 00:12:57.306 A:middle
of the cells drills into
detail about that item.

00:12:57.926 --> 00:12:59.746 A:middle
The problem with this
setup though is if you want

00:12:59.746 --> 00:13:01.176 A:middle
to see the detail
about a couple items,

00:12:59.746 --> 00:13:01.176 A:middle
to see the detail
about a couple items,

00:13:01.446 --> 00:13:03.576 A:middle
you end up tapping
back and forth a lot.

00:13:04.476 --> 00:13:07.606 A:middle
In order to solve this, our new
detail paging API lets users

00:13:07.606 --> 00:13:09.616 A:middle
quickly scroll from
detail view to detail view,

00:13:09.956 --> 00:13:13.286 A:middle
just panning along the screen
or rotating the digital crown.

00:13:14.066 --> 00:13:16.536 A:middle
To learn more about how to set
up this API in your code as well

00:13:16.536 --> 00:13:19.026 A:middle
as learn about other quick
interaction techniques we've

00:13:19.396 --> 00:13:20.436 A:middle
released, for developers,

00:13:20.786 --> 00:13:22.346 A:middle
check out the Quick
Interaction Techniques

00:13:22.346 --> 00:13:23.946 A:middle
for watchOS talk
we gave yesterday.

00:13:25.146 --> 00:13:27.666 A:middle
But in this talk I'd like
to talk a little bit more

00:13:27.666 --> 00:13:29.726 A:middle
about the lifecycle that
view controllers will go

00:13:29.726 --> 00:13:30.716 A:middle
through as part of this API.

00:13:30.716 --> 00:13:33.096 A:middle
Because it's important from
a performance point of view.

00:13:33.976 --> 00:13:37.506 A:middle
So here we have our table with
3 cells, red, orange and yellow.

00:13:37.936 --> 00:13:41.436 A:middle
The detail paging API works
on segue from inner tables

00:13:41.436 --> 00:13:42.476 A:middle
to interface controllers.

00:13:42.776 --> 00:13:44.826 A:middle
So when you tap one of the cells
we're going to trigger a segue.

00:13:44.826 --> 00:13:46.706 A:middle
When you tap the cell,

00:13:46.706 --> 00:13:48.616 A:middle
your master interface
controller is going

00:13:48.616 --> 00:13:50.096 A:middle
to get the method
contextForSegue

00:13:50.096 --> 00:13:52.266 A:middle
withidentifierinTable row index.

00:13:53.056 --> 00:13:54.856 A:middle
This is where you're going to
build up the context object

00:13:54.996 --> 00:13:56.936 A:middle
that gets passed to your
detail view controller

00:13:56.936 --> 00:13:58.346 A:middle
and it's awakeWithContext
method.

00:13:59.346 --> 00:14:01.376 A:middle
Your master view controller
will not only receive its call

00:13:59.346 --> 00:14:01.376 A:middle
Your master view controller
will not only receive its call

00:14:01.376 --> 00:14:03.166 A:middle
for the cell you
tapped, but each

00:14:03.166 --> 00:14:04.536 A:middle
and every cell in the table.

00:14:05.696 --> 00:14:08.186 A:middle
We prepare the context for every
detail view controller right

00:14:08.186 --> 00:14:11.136 A:middle
away so that when we
prepare the context for them

00:14:11.136 --> 00:14:12.886 A:middle
so that we can instantiate
them upfront.

00:14:13.376 --> 00:14:15.016 A:middle
That way when the user, goes

00:14:15.016 --> 00:14:16.566 A:middle
to their first one
they can quickly scroll

00:14:16.566 --> 00:14:20.386 A:middle
through all of them.

00:14:21.226 --> 00:14:23.226 A:middle
Your first controller
will be the,

00:14:23.466 --> 00:14:25.456 A:middle
first one to get its
awakeWithContext called on it

00:14:25.456 --> 00:14:28.176 A:middle
as well as its willActivate
and didAppear.

00:14:28.906 --> 00:14:30.626 A:middle
However, this is where
behavior is interesting

00:14:30.626 --> 00:14:31.296 A:middle
for the scroll view.

00:14:31.706 --> 00:14:33.176 A:middle
We'll preheat the
controllers close

00:14:33.176 --> 00:14:34.726 A:middle
to the selected detail
view controller,

00:14:35.176 --> 00:14:37.346 A:middle
so that the users can
scroll to the next one.

00:14:37.556 --> 00:14:38.486 A:middle
So the other colors are going

00:14:38.486 --> 00:14:40.496 A:middle
to get their lifecycle
methods called on them as well.

00:14:41.376 --> 00:14:43.516 A:middle
They're going to first get
their awakeWithContext,

00:14:44.046 --> 00:14:47.526 A:middle
and then their willActivate
and didDeactivate.

00:14:50.566 --> 00:14:52.816 A:middle
It's important to be smart
about setting up work

00:14:52.816 --> 00:14:54.216 A:middle
on these off screen
view controllers.

00:14:54.906 --> 00:14:58.026 A:middle
Don't start long CPU intensive
tasks on all of them blindly.

00:14:58.586 --> 00:15:02.296 A:middle
Because this may cause a lot
of work to spin up on the CPU

00:14:58.586 --> 00:15:02.296 A:middle
Because this may cause a lot
of work to spin up on the CPU

00:15:02.366 --> 00:15:03.676 A:middle
if you have a lot
of table cells.

00:15:04.486 --> 00:15:06.156 A:middle
Now as the user scrolls
from one detail view

00:15:06.156 --> 00:15:09.176 A:middle
to the other your previous
interface controller will be the

00:15:09.246 --> 00:15:12.366 A:middle
first to get its willDisappear
call, willActivate,

00:15:12.796 --> 00:15:14.266 A:middle
didDeactivate, and didAppear.

00:15:15.026 --> 00:15:16.306 A:middle
This keeps your interface
controllers

00:15:16.306 --> 00:15:17.246 A:middle
in a consistent state.

00:15:17.716 --> 00:15:19.706 A:middle
Those that are on screen
most recently have got their

00:15:19.706 --> 00:15:21.026 A:middle
didAppear call and those

00:15:21.026 --> 00:15:23.236 A:middle
that are off screen
most recently got their

00:15:23.326 --> 00:15:24.176 A:middle
didDeactivate call.

00:15:25.226 --> 00:15:26.706 A:middle
That way when you tap back to go

00:15:26.706 --> 00:15:28.016 A:middle
to the master interface
controller,

00:15:28.256 --> 00:15:31.346 A:middle
only one interface controller
needs lifecycle methods called

00:15:31.346 --> 00:15:32.646 A:middle
on it, the one that's visible.

00:15:32.766 --> 00:15:35.336 A:middle
It'll get its willDisappear,
and didDeactivate.

00:15:38.076 --> 00:15:40.056 A:middle
Alright, I'd like to
invite up Todd to talk

00:15:40.056 --> 00:15:41.616 A:middle
about how we've applied
these ideas

00:15:41.656 --> 00:15:43.216 A:middle
to our Stocks WatchKit
application.

00:15:43.656 --> 00:15:43.906 A:middle
Thank you.

00:15:45.516 --> 00:15:50.500 A:middle
[ Applause ]

00:15:56.576 --> 00:15:57.396 A:middle
&gt;&gt; Good afternoon.

00:15:57.606 --> 00:16:01.746 A:middle
I'm a watch OS engineer,
and we're presenting Stocks

00:15:57.606 --> 00:16:01.746 A:middle
I'm a watch OS engineer,
and we're presenting Stocks

00:16:01.746 --> 00:16:04.116 A:middle
as a case study to
WatchKit and developers.

00:16:04.796 --> 00:16:06.546 A:middle
So many of you may
not know this,

00:16:06.856 --> 00:16:09.296 A:middle
but Stocks is a watch
app built with WatchKit.

00:16:09.636 --> 00:16:12.106 A:middle
At Apple we wanted to
have firsthand experience

00:16:12.566 --> 00:16:13.686 A:middle
with WatchKit development,

00:16:13.926 --> 00:16:16.386 A:middle
and we felt that Stocks
would be a great use case

00:16:16.696 --> 00:16:17.666 A:middle
for WatchKit development.

00:16:18.826 --> 00:16:22.566 A:middle
I have three topics that I
would like to talk about today

00:16:22.756 --> 00:16:24.786 A:middle
in regard to Stocks and
WatchKit development.

00:16:25.596 --> 00:16:29.246 A:middle
I'm going to identify our
2-Second tasks for Stocks,

00:16:30.146 --> 00:16:31.626 A:middle
then I'm going to discuss some

00:16:31.626 --> 00:16:34.976 A:middle
of the implementation details
behind our background refresh

00:16:34.976 --> 00:16:35.516 A:middle
use cases.

00:16:37.686 --> 00:16:40.996 A:middle
Finally, I will talk a bit about
the optimizations we have made

00:16:41.456 --> 00:16:45.446 A:middle
to help with our resume time and
by extension, our launch time.

00:16:47.466 --> 00:16:51.136 A:middle
So, we'll begin with
our 2-Second tasks.

00:16:51.776 --> 00:16:53.786 A:middle
When we thought of Stocks,

00:16:54.446 --> 00:16:56.676 A:middle
we thought of three
important 2-Second tasks,

00:16:57.646 --> 00:16:59.846 A:middle
the first is you
most likely want

00:16:59.846 --> 00:17:02.266 A:middle
to view how a favorite
stock's current price is doing

00:16:59.846 --> 00:17:02.266 A:middle
to view how a favorite
stock's current price is doing

00:17:02.326 --> 00:17:03.696 A:middle
right now.

00:17:04.046 --> 00:17:05.816 A:middle
This can of course
be accomplished

00:17:06.056 --> 00:17:07.046 A:middle
with a complication.

00:17:07.915 --> 00:17:10.955 A:middle
But with the dock, we're able
to get a little bit more detail

00:17:11.256 --> 00:17:12.316 A:middle
with that 2-Second task.

00:17:13.026 --> 00:17:14.455 A:middle
In particular, we felt

00:17:14.455 --> 00:17:17.546 A:middle
that another important 2-Second
task would be seeing your

00:17:17.586 --> 00:17:20.896 A:middle
favorite stock's current
performance throughout the day

00:17:21.116 --> 00:17:21.586 A:middle
in a chart.

00:17:22.896 --> 00:17:25.945 A:middle
Lastly, we felt that it
would be important for you

00:17:25.945 --> 00:17:29.456 A:middle
to see the current
price for a few stocks.

00:17:30.016 --> 00:17:31.636 A:middle
So we'll start with
the complication.

00:17:32.146 --> 00:17:34.816 A:middle
Now of course the
complication is the fastest way

00:17:35.346 --> 00:17:38.036 A:middle
to see data on your watch.

00:17:38.646 --> 00:17:41.956 A:middle
That data is always present and
it's there every time you go

00:17:41.956 --> 00:17:43.556 A:middle
to look at the time
on your watch.

00:17:44.376 --> 00:17:48.876 A:middle
The important piece in that, in
watchOS 3 is that data is kept

00:17:48.876 --> 00:17:52.916 A:middle
in sync between the
complication and the app.

00:17:53.276 --> 00:17:55.916 A:middle
Now for more information on
that, I would encourage you

00:17:55.916 --> 00:17:58.676 A:middle
to check out the Keeping Your
Watch App Up to Date session

00:17:58.976 --> 00:17:59.986 A:middle
that occurred this morning.

00:18:01.156 --> 00:18:04.336 A:middle
So now we'll go and
talk about how some

00:18:04.336 --> 00:18:07.796 A:middle
of the other 2-Second tasks
were performed in watchOS 2.

00:18:08.706 --> 00:18:12.386 A:middle
So in watchOS 2, you
would launch Stocks

00:18:12.906 --> 00:18:15.656 A:middle
and you could see the
current price of the stock

00:18:15.816 --> 00:18:17.916 A:middle
that you were interested in or
the other stocks right away.

00:18:18.746 --> 00:18:20.036 A:middle
But if you wanted to see how

00:18:20.036 --> 00:18:22.066 A:middle
that stock had been
performing throughout the day,

00:18:22.346 --> 00:18:23.926 A:middle
you would need to
tap on a stock,

00:18:24.096 --> 00:18:25.346 A:middle
and now you're presented
with this view.

00:18:25.526 --> 00:18:26.756 A:middle
It's a little bit
more information,

00:18:26.756 --> 00:18:29.236 A:middle
but it still doesn't really
answer the question on how

00:18:29.236 --> 00:18:31.906 A:middle
that stock price had been
performing through the day.

00:18:32.556 --> 00:18:34.636 A:middle
So if you wanted to see that,
you would have to scroll

00:18:34.636 --> 00:18:36.686 A:middle
down a little bit, and
now you're on the chart.

00:18:37.996 --> 00:18:41.216 A:middle
We had four options, for the
chart, we have the day interval,

00:18:41.376 --> 00:18:43.866 A:middle
the one week, the one
month, and the six month.

00:18:44.796 --> 00:18:46.296 A:middle
So odds are the first
time that you scroll

00:18:46.296 --> 00:18:48.816 A:middle
down there you're probably
not even seeing the interval

00:18:48.816 --> 00:18:51.696 A:middle
that you care about which is
probably the one day interval.

00:18:52.856 --> 00:18:54.876 A:middle
So that would require you
tapping on those very,

00:18:55.046 --> 00:18:58.156 A:middle
very small buttons and
opening that chart.

00:18:58.156 --> 00:19:01.796 A:middle
And then after that, you would
have all this other metadata

00:18:58.156 --> 00:19:01.796 A:middle
And then after that, you would
have all this other metadata

00:19:02.396 --> 00:19:06.076 A:middle
down below that a lot of the
time isn't really necessary

00:19:06.076 --> 00:19:08.366 A:middle
for when you're glancing at
information throughout the day.

00:19:09.616 --> 00:19:12.206 A:middle
And of course if you wanted
to view multiple stocks

00:19:12.206 --> 00:19:13.496 A:middle
and how they're performing
throughout the day,

00:19:13.496 --> 00:19:16.476 A:middle
you would have to navigate
back, tap into the new one,

00:19:16.626 --> 00:19:18.506 A:middle
much like Tyler should you
in this animation earlier.

00:19:20.236 --> 00:19:21.836 A:middle
So let's look at watchOS 3.

00:19:22.686 --> 00:19:25.766 A:middle
Now here's the new watchOS
3 design, as you can see,

00:19:25.816 --> 00:19:28.816 A:middle
first of all, still a list
view that you come into.

00:19:29.436 --> 00:19:32.746 A:middle
But the font is much larger,
much more legible, a little bit

00:19:32.746 --> 00:19:33.806 A:middle
of a simplified interface.

00:19:34.176 --> 00:19:37.916 A:middle
To me it pops and it's easily
readable at small sizes

00:19:38.006 --> 00:19:38.976 A:middle
like you would see in the dock.

00:19:40.056 --> 00:19:42.646 A:middle
So if you wanted to see
how Apple was doing,

00:19:42.876 --> 00:19:44.986 A:middle
today and how the performance
was going you would tap

00:19:44.986 --> 00:19:48.756 A:middle
on Apple, again, but now you
see the chart right there.

00:19:49.126 --> 00:19:50.906 A:middle
And we just assume
that you always want

00:19:50.906 --> 00:19:51.996 A:middle
to see the one day chart.

00:19:52.996 --> 00:19:55.366 A:middle
There are instances of course,
where there isn't a day chart,

00:19:55.966 --> 00:19:57.906 A:middle
much like index funds
won't have a day chart.

00:19:58.666 --> 00:20:01.476 A:middle
But we can fall back to the
one month chart when we come

00:19:58.666 --> 00:20:01.476 A:middle
But we can fall back to the
one month chart when we come

00:20:01.476 --> 00:20:04.436 A:middle
across those, and that's
the more relevant interval

00:20:04.436 --> 00:20:05.626 A:middle
that you would like
to see at a glance.

00:20:08.346 --> 00:20:11.156 A:middle
We also got rid of some of
the more minute detail below.

00:20:11.676 --> 00:20:13.636 A:middle
Now this gives us
two advantages.

00:20:13.876 --> 00:20:17.356 A:middle
One, it eliminates a
network request, which speeds

00:20:17.356 --> 00:20:18.506 A:middle
up our loading performance.

00:20:19.466 --> 00:20:23.506 A:middle
And two, it allows us to adopt
the new vertical detail pageing

00:20:23.506 --> 00:20:26.086 A:middle
API, so then that
way you can scroll

00:20:26.086 --> 00:20:29.246 A:middle
through multiple Stocks either
with a turn of the digital crown

00:20:29.716 --> 00:20:30.766 A:middle
or a swipe of your finger.

00:20:31.516 --> 00:20:33.266 A:middle
And of course, if you
want to view the details

00:20:33.266 --> 00:20:36.906 A:middle
of a stock's performance you
know like more minute details

00:20:36.906 --> 00:20:40.126 A:middle
that we had before such as the
52 week high or the 52 week low.

00:20:40.736 --> 00:20:44.136 A:middle
You can view that using
Handoff, so with Handoff,

00:20:44.276 --> 00:20:48.666 A:middle
you're able to setup a
context activity and then hand

00:20:48.666 --> 00:20:49.656 A:middle
that off to your iPhone.

00:20:50.356 --> 00:20:53.386 A:middle
So we feel that the watch is
the place for glanceable data,

00:20:54.076 --> 00:20:56.376 A:middle
and that the iPhone
is the place for,

00:20:56.596 --> 00:20:58.896 A:middle
you know like a view
that's data rich

00:20:59.016 --> 00:21:00.536 A:middle
or a little bit too convoluted.

00:20:59.016 --> 00:21:00.536 A:middle
or a little bit too convoluted.

00:21:01.636 --> 00:21:04.566 A:middle
So the good thing about the
new design, as I mentioned,

00:21:04.766 --> 00:21:09.146 A:middle
it's very readable in the
dock and with the dock,

00:21:09.506 --> 00:21:12.786 A:middle
we decided to reevaluate what
we would show there for Stocks.

00:21:13.576 --> 00:21:15.636 A:middle
So if you attended some of the
other sessions you're aware

00:21:15.636 --> 00:21:19.046 A:middle
that there is a concept of a
default state, and a snapshot.

00:21:19.966 --> 00:21:23.166 A:middle
So we took this to mean that
it should be a sticky view.

00:21:23.616 --> 00:21:26.126 A:middle
And what I mean by sticky is
that when you leave Stocks,

00:21:26.386 --> 00:21:29.246 A:middle
if you're looking at the
stock list, when you return

00:21:29.246 --> 00:21:32.916 A:middle
to Stocks either in the dock or
by going into the application,

00:21:33.366 --> 00:21:34.686 A:middle
you will see the stock list.

00:21:35.736 --> 00:21:37.136 A:middle
And this is also the
view that we'll keep

00:21:37.136 --> 00:21:38.556 A:middle
up to date throughout the day.

00:21:39.616 --> 00:21:43.816 A:middle
However, if you were to tap
into the details of a stock

00:21:43.816 --> 00:21:47.046 A:middle
and returned to look at
the, either the dock or go

00:21:47.046 --> 00:21:49.876 A:middle
into the app, then you're
going to see the detail view.

00:21:50.286 --> 00:21:52.426 A:middle
Now there's one caveat
with this,

00:21:52.986 --> 00:21:56.196 A:middle
so on Stocks you can set
your complication stock

00:21:56.726 --> 00:21:58.106 A:middle
and that's the stock
that you view,

00:21:58.106 --> 00:21:59.316 A:middle
of course on your complication.

00:21:59.716 --> 00:22:00.466 A:middle
So we took that to mean

00:21:59.716 --> 00:22:00.466 A:middle
So we took that to mean

00:22:00.466 --> 00:22:02.116 A:middle
that that's most likely
your favorite stock.

00:22:03.076 --> 00:22:05.446 A:middle
So once you set that,
that's the detail view

00:22:05.446 --> 00:22:06.596 A:middle
that we try to return you to.

00:22:07.186 --> 00:22:10.786 A:middle
So if you open up Stocks and
you say navigated from Apple

00:22:10.916 --> 00:22:14.646 A:middle
to the Facebook stock, and you
resumed back to the home screen,

00:22:15.386 --> 00:22:19.436 A:middle
in about an hour, when we get
the return to default state flag

00:22:19.636 --> 00:22:22.306 A:middle
for our snapshot, we will
actually take you back

00:22:22.306 --> 00:22:23.176 A:middle
to the Apple stock.

00:22:23.426 --> 00:22:26.106 A:middle
Because we take that to mean
that you had that selected

00:22:26.106 --> 00:22:27.906 A:middle
as your complication
stock and that

00:22:27.906 --> 00:22:29.826 A:middle
that would be your favorite
stock, and that's the one

00:22:29.826 --> 00:22:30.926 A:middle
that we want to return you to.

00:22:31.296 --> 00:22:33.306 A:middle
So we want to make a
predictable experience

00:22:33.516 --> 00:22:36.086 A:middle
and always return the user to
something that they would expect

00:22:36.086 --> 00:22:38.826 A:middle
to see after a certain
amount of time.

00:22:39.676 --> 00:22:41.656 A:middle
So let's recap what we've done

00:22:42.306 --> 00:22:43.866 A:middle
in our 2-Second tasks
for Stocks.

00:22:44.296 --> 00:22:48.966 A:middle
The first thing, we made sure
that we had consistent data

00:22:49.226 --> 00:22:52.586 A:middle
between our complication
and app.

00:22:52.646 --> 00:22:54.866 A:middle
The next, we simplified
our design,

00:22:55.436 --> 00:22:58.046 A:middle
we made it a lot more
legible at smaller sizes,

00:22:59.176 --> 00:23:04.516 A:middle
and much more usable
whenever you vertically scroll

00:22:59.176 --> 00:23:04.516 A:middle
and much more usable
whenever you vertically scroll

00:23:04.516 --> 00:23:05.626 A:middle
through the detail pageing API.

00:23:05.626 --> 00:23:10.616 A:middle
And that lets you look at
multiple stocks, quickly instead

00:23:10.616 --> 00:23:12.716 A:middle
of having to do the
back and forth shuffle.

00:23:13.226 --> 00:23:16.556 A:middle
So next, we'll talk a little
bit about background refresh,

00:23:17.216 --> 00:23:18.766 A:middle
and I would like to
talk a little bit more

00:23:18.766 --> 00:23:21.686 A:middle
about how we implemented
background refresh in Stocks.

00:23:26.436 --> 00:23:29.046 A:middle
So when we started implementing
background refresh in Stocks,

00:23:29.776 --> 00:23:30.826 A:middle
we came up with two questions.

00:23:31.506 --> 00:23:33.966 A:middle
One, how often do we need

00:23:33.966 --> 00:23:35.716 A:middle
to update our information
in Stocks?

00:23:36.696 --> 00:23:39.616 A:middle
And two, what data
do we need to fetch

00:23:39.796 --> 00:23:41.726 A:middle
to keep our app up to date?

00:23:42.776 --> 00:23:45.626 A:middle
So determining how often
we should refresh our data

00:23:45.626 --> 00:23:48.096 A:middle
in Stocks was a little bit
of a tricky proposition.

00:23:49.066 --> 00:23:51.816 A:middle
At first we felt that updating
our data every 15 minutes was a

00:23:51.816 --> 00:23:52.716 A:middle
pretty good start.

00:23:54.316 --> 00:23:57.326 A:middle
This would leave us updating our
app many times throughout the

00:23:57.326 --> 00:23:58.046 A:middle
day, however.

00:23:58.506 --> 00:24:03.496 A:middle
And many of those updates could
occur when it's unhelpful,

00:23:58.506 --> 00:24:03.496 A:middle
And many of those updates could
occur when it's unhelpful,

00:24:03.846 --> 00:24:05.836 A:middle
like when the stock
market is closed at the end

00:24:05.836 --> 00:24:07.706 A:middle
of the day or over the weekend.

00:24:09.746 --> 00:24:11.556 A:middle
So let's take some
facts that we know

00:24:11.556 --> 00:24:13.336 A:middle
because we felt we
could be a bit smarter

00:24:13.336 --> 00:24:14.476 A:middle
in how we implemented this.

00:24:14.826 --> 00:24:16.516 A:middle
First, markets are
open for a period

00:24:16.516 --> 00:24:17.476 A:middle
of time throughout the day.

00:24:18.076 --> 00:24:20.756 A:middle
So for an example, let's
say we're following a stock

00:24:20.756 --> 00:24:21.926 A:middle
on the New York Stock Exchange,

00:24:23.096 --> 00:24:25.716 A:middle
and we know that the New
York Stock Exchange opens

00:24:25.716 --> 00:24:29.326 A:middle
at 9:30 a.m. Eastern and it
closes at 4 p.m. Eastern.

00:24:29.326 --> 00:24:33.436 A:middle
So if we limit our
background refresh request to,

00:24:34.266 --> 00:24:37.346 A:middle
basically when the market is
open, then we're able to cut

00:24:37.346 --> 00:24:41.006 A:middle
down our number of updates,
and it can sort of budget

00:24:41.326 --> 00:24:42.426 A:middle
for other applications.

00:24:42.886 --> 00:24:46.096 A:middle
And it's also going
to give us the benefit

00:24:46.176 --> 00:24:50.756 A:middle
of not updating our complication
and our application in times

00:24:50.756 --> 00:24:51.716 A:middle
when it would be ineffective.

00:24:52.676 --> 00:24:57.776 A:middle
So that's also nice as well.

00:24:59.016 --> 00:25:01.996 A:middle
So let's look at a little pseudo
code on how we would do that

00:24:59.016 --> 00:25:01.996 A:middle
So let's look at a little pseudo
code on how we would do that

00:25:01.996 --> 00:25:04.146 A:middle
and how would we decide
when the next refresh date

00:25:04.146 --> 00:25:05.376 A:middle
for Stocks should be.

00:25:06.486 --> 00:25:09.216 A:middle
First, we're going to enumerate
through their list of stocks,

00:25:10.496 --> 00:25:14.796 A:middle
then we're going to check and
see if the markets are like,

00:25:14.796 --> 00:25:17.456 A:middle
basically if the
markets are all closed.

00:25:17.536 --> 00:25:18.266 A:middle
Because if we know,

00:25:18.496 --> 00:25:22.306 A:middle
if the markets are all closed we
want the earliest next open time

00:25:22.416 --> 00:25:23.406 A:middle
that we have in our stock list.

00:25:24.416 --> 00:25:27.006 A:middle
Otherwise, that means at
least one market is open,

00:25:27.276 --> 00:25:30.366 A:middle
so we should fall back to our
regular 15 minute cadence.

00:25:31.116 --> 00:25:32.736 A:middle
So we'll look at a
little bit of source here.

00:25:33.686 --> 00:25:35.346 A:middle
The first thing that I'll
call your attention to,

00:25:35.346 --> 00:25:37.226 A:middle
this is just a function
that we would have in Stocks

00:25:37.226 --> 00:25:38.896 A:middle
for scheduling our
background refresh time,

00:25:39.156 --> 00:25:41.066 A:middle
and it takes an optional
preferred date.

00:25:43.296 --> 00:25:46.156 A:middle
We use the
scheduleBackgroundRefresh

00:25:46.226 --> 00:25:49.976 A:middle
instance method in WKExtension,
and we're going to pass

00:25:49.976 --> 00:25:52.126 A:middle
in this preferredDate here.

00:25:53.106 --> 00:25:55.646 A:middle
Now that preferred date is
calculated elsewhere in the app,

00:25:55.956 --> 00:25:57.536 A:middle
but that's at least how
we schedule our background

00:25:57.536 --> 00:25:58.206 A:middle
refresh time.

00:25:58.206 --> 00:26:00.626 A:middle
So I'm kind of working
backwards from the end result.

00:25:58.206 --> 00:26:00.626 A:middle
So I'm kind of working
backwards from the end result.

00:26:01.806 --> 00:26:05.726 A:middle
So let's see what happens in
our next preferred refresh data.

00:26:06.526 --> 00:26:11.026 A:middle
That function has a guard early
on, and so basically we're going

00:26:11.026 --> 00:26:14.576 A:middle
to call our function
earliestNextOpenDateInStocks.

00:26:16.286 --> 00:26:20.196 A:middle
And if it returns nil, then
we're going to go ahead

00:26:20.196 --> 00:26:23.446 A:middle
and bail, because in
earliestNextOpenDateInStocks,

00:26:23.956 --> 00:26:24.986 A:middle
we would return nil

00:26:25.246 --> 00:26:27.106 A:middle
if you didn't have any
stocks in your list.

00:26:27.406 --> 00:26:28.676 A:middle
Because at that point
there's no use

00:26:28.676 --> 00:26:30.156 A:middle
in doing a background refresh

00:26:30.196 --> 00:26:31.596 A:middle
because there's no
data to refresh.

00:26:33.616 --> 00:26:36.946 A:middle
So now we'll go ahead
and we'll calculate the

00:26:36.946 --> 00:26:38.356 A:middle
nextRegularRefreshData,

00:26:38.526 --> 00:26:40.706 A:middle
so that's just our update
cadence, so every 15 minutes.

00:26:41.146 --> 00:26:44.586 A:middle
And then finally, we'll
do this check here.

00:26:44.766 --> 00:26:46.966 A:middle
So we take that
earliestNextOpenDateInStocks,

00:26:47.506 --> 00:26:49.396 A:middle
and we'll do a later
date comparison

00:26:49.536 --> 00:26:51.806 A:middle
against our regular
refresh cadence.

00:26:53.096 --> 00:26:55.426 A:middle
Now our
earliestNextOpenDateInStocks

00:26:55.426 --> 00:26:59.516 A:middle
also has the added benefit
of returning distant past,

00:26:59.516 --> 00:27:01.886 A:middle
if the market is currently
open for any of our stocks.

00:26:59.516 --> 00:27:01.886 A:middle
if the market is currently
open for any of our stocks.

00:27:02.246 --> 00:27:05.936 A:middle
So the later date would
always be the refresh cadence

00:27:05.936 --> 00:27:06.776 A:middle
in that scenario.

00:27:07.346 --> 00:27:11.336 A:middle
So let's look at that
earliestNextOpenDateInStocks

00:27:11.336 --> 00:27:11.746 A:middle
method.

00:27:12.726 --> 00:27:14.666 A:middle
First we're going to
grab our list of stocks

00:27:14.976 --> 00:27:16.716 A:middle
and then we're going to
do this guard check here.

00:27:16.716 --> 00:27:21.236 A:middle
And so if it's 0 again, we're
going to bail out, return nil,

00:27:21.486 --> 00:27:23.766 A:middle
there's no use in doing
background refreshes.

00:27:26.226 --> 00:27:32.216 A:middle
Then we're going to iterate
over our list of stocks.

00:27:32.666 --> 00:27:37.636 A:middle
If any of the markets, are open
then we're going to go ahead

00:27:37.636 --> 00:27:38.736 A:middle
and return the distantPast.

00:27:40.006 --> 00:27:41.796 A:middle
Otherwise we're going
to do this check here.

00:27:41.846 --> 00:27:44.086 A:middle
And we're just going to
basically iterate over the list

00:27:44.366 --> 00:27:45.866 A:middle
and find the
earliestNextOpenDate.

00:27:46.956 --> 00:27:49.386 A:middle
And so I mean, I just wanted
to show some of that code

00:27:50.156 --> 00:27:52.046 A:middle
because we feel that
that's a pretty good way

00:27:52.116 --> 00:27:53.586 A:middle
of limiting the number of times

00:27:53.586 --> 00:27:55.046 A:middle
that you're doing
background refresh,

00:27:55.296 --> 00:27:59.866 A:middle
with not a whole lot of code.

00:28:00.056 --> 00:28:02.606 A:middle
So let's talk about scheduling
multiple background requests.

00:28:03.246 --> 00:28:05.706 A:middle
Because in particularly with
Stocks, we have two end points

00:28:05.706 --> 00:28:07.576 A:middle
that we hit to keep our
application up to date.

00:28:08.246 --> 00:28:12.036 A:middle
So we have endpoint A, which
keeps the application data

00:28:12.036 --> 00:28:13.896 A:middle
up to date, and then
we have endpoint B,

00:28:14.116 --> 00:28:15.316 A:middle
for updating the complication.

00:28:18.216 --> 00:28:21.316 A:middle
So if we're going to schedule
our background refresh time,

00:28:21.786 --> 00:28:22.316 A:middle
we do that.

00:28:23.006 --> 00:28:25.376 A:middle
Once we receive the
handle background task,

00:28:26.086 --> 00:28:27.576 A:middle
we'll submit our
endpoint A request,

00:28:27.836 --> 00:28:29.176 A:middle
submit our endpoint B request

00:28:29.226 --> 00:28:31.426 A:middle
and we'll schedule our future
background refresh time.

00:28:31.946 --> 00:28:32.826 A:middle
So what does that look like?

00:28:33.056 --> 00:28:35.786 A:middle
Well, we have our handle
background tasks method

00:28:35.856 --> 00:28:37.356 A:middle
in our WKExtension delegate.

00:28:38.616 --> 00:28:41.386 A:middle
We're going to iterate over
those background tasks.

00:28:42.226 --> 00:28:44.376 A:middle
We're going to go ahead
and first check to see

00:28:44.376 --> 00:28:45.916 A:middle
if it's an application
refresh task.

00:28:46.606 --> 00:28:49.056 A:middle
And if it is, we're going
to go ahead and schedule

00:28:49.056 --> 00:28:51.006 A:middle
that data update request
and that's just going to be

00:28:51.006 --> 00:28:53.726 A:middle
where we actually
schedule our NSURL request.

00:28:55.026 --> 00:28:56.466 A:middle
The next we'll do,
we'll go ahead

00:28:56.466 --> 00:28:58.436 A:middle
and schedule our next
background refresh time,

00:28:58.436 --> 00:29:00.826 A:middle
using that handy dandy
nextPreferredRefreshDate.

00:28:58.436 --> 00:29:00.826 A:middle
using that handy dandy
nextPreferredRefreshDate.

00:29:01.326 --> 00:29:03.946 A:middle
And then we'll complete
our app refresh task.

00:29:05.066 --> 00:29:07.166 A:middle
The last part of this, I'll
call out to your attention is

00:29:07.166 --> 00:29:09.096 A:middle
that URL session
refresh background task.

00:29:09.316 --> 00:29:10.436 A:middle
Now you will get one of these

00:29:10.896 --> 00:29:14.516 A:middle
when you trigger a background
NSURL session request.

00:29:15.196 --> 00:29:17.586 A:middle
So it's our job here
to store that somewhere

00:29:17.706 --> 00:29:20.156 A:middle
where we can complete
it later whenever

00:29:20.156 --> 00:29:23.126 A:middle
that request is finished.

00:29:24.936 --> 00:29:26.246 A:middle
So now we've talked
about that let's talk

00:29:26.246 --> 00:29:27.186 A:middle
about what it actually looks

00:29:27.186 --> 00:29:29.136 A:middle
like when we schedule
those NS URL requests,

00:29:29.346 --> 00:29:30.116 A:middle
just at a high level.

00:29:30.116 --> 00:29:33.806 A:middle
So we're going to schedule
those requests, we're going to,

00:29:33.806 --> 00:29:35.266 A:middle
and then when those
requests are complete,

00:29:36.146 --> 00:29:37.586 A:middle
we're going to schedule
a snapshot,

00:29:37.696 --> 00:29:39.356 A:middle
reload the complication,
and we're going

00:29:39.356 --> 00:29:42.106 A:middle
to complete our refresh
background task.

00:29:42.936 --> 00:29:46.036 A:middle
So the first thing we'll
setup the app data request

00:29:46.126 --> 00:29:47.516 A:middle
and the complication
data request.

00:29:48.106 --> 00:29:50.526 A:middle
Then we're going to setup
our finish update handler.

00:29:50.716 --> 00:29:54.326 A:middle
Now the finish update handler is
just, for lack of a better term,

00:29:54.716 --> 00:29:58.406 A:middle
a block that I set so that
whenever the NS URL session

00:29:58.406 --> 00:30:01.536 A:middle
delegate method for finishing
the background request is

00:29:58.406 --> 00:30:01.536 A:middle
delegate method for finishing
the background request is

00:30:01.536 --> 00:30:03.966 A:middle
called, I can call that
finish update handler

00:30:04.666 --> 00:30:08.636 A:middle
and that'll call
what's in that block.

00:30:10.306 --> 00:30:11.836 A:middle
So then we have our
submitRequest

00:30:11.836 --> 00:30:14.366 A:middle
which is essentially just
taking the network request

00:30:14.456 --> 00:30:17.486 A:middle
and calling resume on the tasks.

00:30:17.856 --> 00:30:20.316 A:middle
Now once the task is complete,
we'll go ahead and grab

00:30:20.316 --> 00:30:23.526 A:middle
that task from our URL sessions
task which is just a dictionary.

00:30:24.276 --> 00:30:27.096 A:middle
We'll schedule our snapshot,
we'll reload our complication,

00:30:27.446 --> 00:30:32.896 A:middle
and we'll go ahead and
complete that URL session task.

00:30:33.766 --> 00:30:35.116 A:middle
And one last thing
that I'll call

00:30:35.116 --> 00:30:38.106 A:middle
out here is our
urlSessionDidFinishEvents just

00:30:38.106 --> 00:30:40.996 A:middle
to show you that whenever
our requests finish,

00:30:41.376 --> 00:30:45.876 A:middle
we just grab the identifier
from the session configuration,

00:30:46.406 --> 00:30:47.846 A:middle
and we call our
finishUpdateHandler.

00:30:48.806 --> 00:30:50.236 A:middle
And so that kind of
gives you an idea

00:30:50.576 --> 00:30:53.366 A:middle
of how you can run multiple
requests to keep your app

00:30:53.466 --> 00:30:55.936 A:middle
up to date if you have
separate requests for your app

00:30:56.136 --> 00:30:57.116 A:middle
and your complication.

00:30:57.576 --> 00:30:59.966 A:middle
So the first thing,
obviously you want

00:30:59.966 --> 00:31:01.916 A:middle
to optimize how often
you schedule your updates

00:30:59.966 --> 00:31:01.916 A:middle
to optimize how often
you schedule your updates

00:31:02.086 --> 00:31:03.946 A:middle
for your app when you're
doing background refreshes.

00:31:04.746 --> 00:31:06.546 A:middle
That's goal number one.

00:31:07.226 --> 00:31:10.036 A:middle
And if you're updating
with data from a server,

00:31:10.206 --> 00:31:12.166 A:middle
try to use a single
specialized endpoint

00:31:12.206 --> 00:31:13.356 A:middle
if you have control over that.

00:31:13.836 --> 00:31:15.506 A:middle
But if you don't, it is possible

00:31:15.656 --> 00:31:18.476 A:middle
to submit multiple requests
during a background refresh.

00:31:18.926 --> 00:31:22.656 A:middle
So now let's move onto
resume time optimizations.

00:31:23.026 --> 00:31:25.936 A:middle
So when you optimize your resume
time by extension you're going

00:31:25.936 --> 00:31:27.256 A:middle
to be optimizing
your launch time

00:31:27.256 --> 00:31:29.186 A:middle
as well, which is very nice.

00:31:29.796 --> 00:31:32.856 A:middle
So let's talk about
what we can do.

00:31:33.586 --> 00:31:34.786 A:middle
As Tyler I mentioned earlier,

00:31:35.886 --> 00:31:38.616 A:middle
we can minimize the work we're
doing during willActivate

00:31:38.756 --> 00:31:39.526 A:middle
and didAppear.

00:31:39.826 --> 00:31:40.856 A:middle
So you know to do that,

00:31:40.856 --> 00:31:42.496 A:middle
of course we avoid
long running tasks

00:31:42.496 --> 00:31:43.756 A:middle
that are triggered
from willActivate.

00:31:44.256 --> 00:31:46.816 A:middle
We'll do a smart loading
and reloading of our data,

00:31:47.406 --> 00:31:48.966 A:middle
and of course as he
mentioned before, we only want

00:31:48.966 --> 00:31:50.956 A:middle
to set properties on
our interface elements

00:31:50.996 --> 00:31:52.086 A:middle
that have actually changed.

00:31:52.976 --> 00:31:55.416 A:middle
So I'll start this off
with a cautionary tale,

00:31:55.796 --> 00:31:59.006 A:middle
and this involves implementing
the vertical detail paging API.

00:31:59.716 --> 00:32:00.986 A:middle
So as Tyler mentioned before,

00:31:59.716 --> 00:32:00.986 A:middle
So as Tyler mentioned before,

00:32:00.986 --> 00:32:03.156 A:middle
neighboring detail pages
will have willActivate called

00:32:03.966 --> 00:32:06.536 A:middle
and you also want to
avoid expensive operations

00:32:06.536 --> 00:32:08.476 A:middle
in willActivate for
detail pages.

00:32:08.776 --> 00:32:11.716 A:middle
But in particular, there's one
very big expensive operation

00:32:11.716 --> 00:32:12.336 A:middle
in this view.

00:32:12.606 --> 00:32:15.046 A:middle
So it started with a
couple of bug reports

00:32:15.046 --> 00:32:17.046 A:middle
but essentially we got
reports of slow loading,

00:32:17.046 --> 00:32:19.236 A:middle
a slow loading chart for a stock

00:32:19.236 --> 00:32:20.646 A:middle
when you first entered
the detail page.

00:32:21.056 --> 00:32:23.646 A:middle
And other detail pages never
finish loading their charts,

00:32:23.726 --> 00:32:25.256 A:middle
or were extremely slow.

00:32:25.256 --> 00:32:28.276 A:middle
So we kind of looked at
the code, and tried to look

00:32:28.276 --> 00:32:30.406 A:middle
and see what was going on, so
this is a slimmed down version

00:32:30.406 --> 00:32:31.706 A:middle
of a stock interface controller.

00:32:32.266 --> 00:32:33.356 A:middle
But if you'll notice,

00:32:33.356 --> 00:32:36.076 A:middle
in willActivate we're calling
this downloadAndGenerateChart

00:32:36.576 --> 00:32:41.076 A:middle
which was, basically an NS
operation that was long running

00:32:41.076 --> 00:32:43.906 A:middle
and doing a lot of work to get
chart data and draw that chart.

00:32:43.906 --> 00:32:47.006 A:middle
So what can we do to
improve upon that?

00:32:47.676 --> 00:32:51.376 A:middle
Well, so we know that in
didAppear it gets called

00:32:51.376 --> 00:32:53.626 A:middle
when that interface
controller is actually visible

00:32:53.626 --> 00:32:54.956 A:middle
to the user and it has settled.

00:32:55.656 --> 00:32:58.226 A:middle
So how about we start
downloading and generating

00:32:58.226 --> 00:32:59.306 A:middle
that chart data there?

00:33:00.016 --> 00:33:02.266 A:middle
And then what happens
if you're scrolling

00:33:02.266 --> 00:33:04.306 A:middle
through those quite frequently?

00:33:04.866 --> 00:33:06.896 A:middle
We don't want to continue
downloading and generating

00:33:06.896 --> 00:33:08.856 A:middle
that chart data for a view
that you already left.

00:33:08.856 --> 00:33:12.256 A:middle
So we'll go ahead and we'll call
cancelDownloadAndGenerateChart,

00:33:12.606 --> 00:33:13.546 A:middle
which is just a method

00:33:13.626 --> 00:33:15.946 A:middle
that takes the operation
that's running and cancels it.

00:33:16.676 --> 00:33:21.046 A:middle
So, let's look at, again to
review some of these caveats,

00:33:21.256 --> 00:33:23.236 A:middle
because I have to learn
from my mistakes here.

00:33:23.976 --> 00:33:26.996 A:middle
We want to avoid triggering long
running tasks in willActivate.

00:33:29.396 --> 00:33:32.136 A:middle
And if possible, it's
great to make use

00:33:32.216 --> 00:33:33.746 A:middle
of cancellable operations,

00:33:34.306 --> 00:33:37.546 A:middle
so NS operation is a nice
template for doing that.

00:33:38.126 --> 00:33:40.356 A:middle
So we'll move onto the
WKInterfaceTable loading.

00:33:40.996 --> 00:33:43.346 A:middle
We know that all rows
are loaded in memory,

00:33:44.016 --> 00:33:45.856 A:middle
and we know that there's
a linear upfront cost

00:33:45.856 --> 00:33:47.886 A:middle
to the number of rows
you have in your table.

00:33:48.566 --> 00:33:51.906 A:middle
And, of course there's no reuse
as there is in UITableView.

00:33:52.106 --> 00:33:54.976 A:middle
So I'm going to show a graph and
this is some of the profiling

00:33:54.976 --> 00:33:55.976 A:middle
that I had done in Stocks.

00:33:56.656 --> 00:33:59.606 A:middle
And this for the initial
launch time, so after a reboot,

00:33:59.996 --> 00:34:02.036 A:middle
not resume time, any of that.

00:33:59.996 --> 00:34:02.036 A:middle
not resume time, any of that.

00:34:02.316 --> 00:34:04.526 A:middle
But it's kind of important to
note that when we had 0 stocks

00:34:04.526 --> 00:34:05.956 A:middle
in the list, so an
empty stock listed,

00:34:06.026 --> 00:34:08.206 A:middle
so just under 5 1/2
seconds to load.

00:34:09.565 --> 00:34:11.585 A:middle
If we added one stock it
jumped up a little bit,

00:34:11.766 --> 00:34:14.755 A:middle
to just under 6 1/2
seconds, and if add 5 stocks,

00:34:14.926 --> 00:34:16.676 A:middle
a little over 6 1/2 seconds.

00:34:17.255 --> 00:34:19.295 A:middle
And if we had 10
stocks, now it's starting

00:34:19.366 --> 00:34:20.946 A:middle
to creep up towards 7 seconds.

00:34:22.406 --> 00:34:25.295 A:middle
So if you have a
large number of rows

00:34:25.815 --> 00:34:30.096 A:middle
in your table you're just
basically delaying how quickly

00:34:30.356 --> 00:34:35.525 A:middle
that interface controller
can load.

00:34:36.056 --> 00:34:38.556 A:middle
So what can we do to improve
our loading time here?

00:34:38.976 --> 00:34:41.416 A:middle
Well first we can limit the
number of rows that we load.

00:34:42.016 --> 00:34:45.226 A:middle
And we can also try to do
smart updates of our table

00:34:45.315 --> 00:34:47.946 A:middle
when row deltas occur so
meaning, when the list mutates.

00:34:48.326 --> 00:34:50.466 A:middle
So let's look at our initial
approach of loadTable.

00:34:52.116 --> 00:34:54.806 A:middle
We'll go ahead and we'll grab
the stocks from our manager,

00:34:54.906 --> 00:34:57.366 A:middle
and then we're going to set the
number of rows on the table.

00:34:57.956 --> 00:34:59.896 A:middle
And then after that,

00:35:00.066 --> 00:35:02.856 A:middle
we'll populate each row
controller with a stock.

00:35:02.856 --> 00:35:05.846 A:middle
Now it seems pretty harmless at
first, what's happening there?

00:35:06.336 --> 00:35:09.746 A:middle
Well the number of stocks isn't
capped, so if you had 20 stocks,

00:35:09.746 --> 00:35:13.166 A:middle
it would be 20 rows, if you had
30, 30 and so on and so forth.

00:35:14.446 --> 00:35:16.676 A:middle
And we were always using
a set number of rows.

00:35:17.026 --> 00:35:20.806 A:middle
And if just one row is being
added when use that number

00:35:20.806 --> 00:35:22.876 A:middle
of rows you're essentially
wiping

00:35:22.876 --> 00:35:26.486 A:middle
out what you had there before
and starting over again.

00:35:26.836 --> 00:35:27.546 A:middle
So it's inefficient.

00:35:28.466 --> 00:35:29.716 A:middle
So let's look at
what we could do

00:35:29.716 --> 00:35:31.116 A:middle
to be a little smarter
this time.

00:35:31.606 --> 00:35:34.056 A:middle
So we grab the stocks like
we did before, we'll go ahead

00:35:34.056 --> 00:35:35.726 A:middle
and check the count, and
we're going to go ahead

00:35:35.726 --> 00:35:36.956 A:middle
and cap that at a max size.

00:35:37.456 --> 00:35:38.786 A:middle
So in Stocks' case, 20.

00:35:40.286 --> 00:35:42.876 A:middle
Then we're going to
calculate our row delta

00:35:43.026 --> 00:35:45.076 A:middle
to see what the difference
is, how much has it changed?

00:35:45.376 --> 00:35:47.646 A:middle
And then we're going to call
this insertRemoveTableRows,

00:35:47.846 --> 00:35:48.706 A:middle
which I'll get to in a second.

00:35:49.556 --> 00:35:51.936 A:middle
And then one last
button suspender approach

00:35:51.936 --> 00:35:53.716 A:middle
to make sure we're not doing
more work than we need to.

00:35:54.076 --> 00:35:56.996 A:middle
We'll go ahead and check to
make sure our index falls below

00:35:56.996 --> 00:35:59.446 A:middle
that max Stocks list size.

00:36:00.336 --> 00:36:02.676 A:middle
So let's look at that
insertRemoveTableRows.

00:36:03.076 --> 00:36:04.126 A:middle
So the first thing we're going

00:36:04.126 --> 00:36:07.526 A:middle
to do is calculate the row
change and then we're going

00:36:07.526 --> 00:36:08.656 A:middle
to check the stock row delta.

00:36:08.656 --> 00:36:11.086 A:middle
So if it's greater than 0,
we know we're inserting,

00:36:11.616 --> 00:36:15.796 A:middle
if it's less than 0, then we
know that we're going to remove.

00:36:16.136 --> 00:36:17.806 A:middle
And the important thing
here, I mean you can try

00:36:17.806 --> 00:36:19.626 A:middle
to be a little bit more
clever if you would like

00:36:19.626 --> 00:36:20.996 A:middle
and do smart updating based

00:36:20.996 --> 00:36:22.956 A:middle
on how much the list
has actually changed.

00:36:23.026 --> 00:36:25.226 A:middle
But we found, for
performance reasons,

00:36:25.226 --> 00:36:29.666 A:middle
just doing a simple insert
at index 0 or removing,

00:36:29.756 --> 00:36:32.656 A:middle
starting at index 0, seems
to serve us pretty well.

00:36:33.926 --> 00:36:37.076 A:middle
So let's not do more
work than we have to.

00:36:37.286 --> 00:36:40.686 A:middle
Alright so to recap,
the number of the stocks

00:36:40.686 --> 00:36:42.796 A:middle
in your stock list, or in
my case, the stock list,

00:36:42.896 --> 00:36:44.486 A:middle
in your case, I'm not sure
what you're putting in there,

00:36:44.686 --> 00:36:47.006 A:middle
but keep the number of
rows down and cap it

00:36:47.006 --> 00:36:49.036 A:middle
at something reasonable
for your use case.

00:36:49.816 --> 00:36:54.376 A:middle
Next, when you're inserting
and removing rows, that's going

00:36:54.376 --> 00:36:57.176 A:middle
to be much more efficient than
if just calling the set number

00:36:57.176 --> 00:36:59.526 A:middle
of rows method on
WKInterfaceTable.

00:37:00.126 --> 00:37:04.606 A:middle
So one last thing here,
instead of iterating

00:37:04.606 --> 00:37:08.096 A:middle
over the entire table when
single row updates are coming.

00:37:08.326 --> 00:37:09.326 A:middle
So think about it this way,

00:37:09.326 --> 00:37:12.426 A:middle
like what if we're updating
the Apple stock price

00:37:12.496 --> 00:37:14.986 A:middle
in our table list or
our list of stocks?

00:37:16.126 --> 00:37:18.916 A:middle
Instead of going through and
updating each one of those rows

00:37:18.916 --> 00:37:22.226 A:middle
when we don't have to, we can
make use of the rowController

00:37:22.226 --> 00:37:24.456 A:middle
at index so that way we only
update the rowController

00:37:24.456 --> 00:37:25.236 A:middle
that we care about.

00:37:25.896 --> 00:37:30.086 A:middle
Or, you can even do something
similar to storing a reference

00:37:30.086 --> 00:37:32.326 A:middle
to that rowController
and updating it later.

00:37:32.906 --> 00:37:36.136 A:middle
So now we're going
to talk a little bit

00:37:36.136 --> 00:37:37.566 A:middle
about updating your UIElements.

00:37:38.286 --> 00:37:42.486 A:middle
So as Tyler mentioned before,
these UIObjects and WatchKit,

00:37:42.486 --> 00:37:44.886 A:middle
they're modified in
the extension process,

00:37:45.336 --> 00:37:46.896 A:middle
and updates to these
properties are sent

00:37:46.896 --> 00:37:49.076 A:middle
from the extension
process to the app process.

00:37:49.756 --> 00:37:52.596 A:middle
And the app process handles
layout of the interface.

00:37:53.176 --> 00:37:54.846 A:middle
So let's look at
our UI for Stocks,

00:37:54.846 --> 00:37:56.256 A:middle
and this is just
a rowController.

00:37:56.396 --> 00:37:58.316 A:middle
But we have the platter
here, which is a group

00:37:58.416 --> 00:38:00.926 A:middle
which has just the
tappable area for the row.

00:37:58.416 --> 00:38:00.926 A:middle
which has just the
tappable area for the row.

00:38:02.146 --> 00:38:03.446 A:middle
Then we also have the list name

00:38:03.446 --> 00:38:04.936 A:middle
and so that's just
the ticker symbol

00:38:04.936 --> 00:38:06.806 A:middle
of the company name,
that's a label.

00:38:07.146 --> 00:38:08.806 A:middle
The change in points label,

00:38:08.886 --> 00:38:10.656 A:middle
and that's just the
change that we've had.

00:38:11.226 --> 00:38:13.746 A:middle
And then we have the price
label, current price.

00:38:14.376 --> 00:38:15.886 A:middle
So let's look and see
what we're doing there.

00:38:16.256 --> 00:38:18.096 A:middle
When we would go to
update this rowController,

00:38:18.126 --> 00:38:19.236 A:middle
we had this update method

00:38:19.386 --> 00:38:21.266 A:middle
and it would just take
whatever values we gave it

00:38:21.266 --> 00:38:23.096 A:middle
and it would set those
properties right away.

00:38:24.426 --> 00:38:27.976 A:middle
Now that's bad because
properties

00:38:28.256 --> 00:38:31.606 A:middle
on the interface object
are not cached, right.

00:38:32.576 --> 00:38:36.366 A:middle
And setting a property on
that object sends that value

00:38:36.366 --> 00:38:39.136 A:middle
to the app process every time,
and I'm redundant on this

00:38:39.136 --> 00:38:42.276 A:middle
but I want to emphasize
the importance of that.

00:38:42.606 --> 00:38:45.866 A:middle
On average, in my profiling

00:38:45.866 --> 00:38:49.526 A:middle
in Stocks it would take roughly
200 milliseconds for a value

00:38:49.526 --> 00:38:52.526 A:middle
to move from the extension
process to the app process.

00:38:52.526 --> 00:38:56.186 A:middle
And that doesn't really
seem like a long time, but,

00:38:57.256 --> 00:39:01.326 A:middle
in some profiling, that I
did for the initial launch,

00:38:57.256 --> 00:39:01.326 A:middle
in some profiling, that I
did for the initial launch,

00:39:01.996 --> 00:39:05.496 A:middle
I saw a pretty staggering
number of on average,

00:39:05.786 --> 00:39:08.226 A:middle
a worst case scenario
1.4 seconds for some

00:39:08.226 --> 00:39:09.476 A:middle
of those messages to get sent

00:39:09.476 --> 00:39:12.296 A:middle
over from the extension
process to the app process.

00:39:13.146 --> 00:39:16.286 A:middle
So it's a big difference.

00:39:16.806 --> 00:39:18.306 A:middle
So what can we do to
be a little smarter?

00:39:19.306 --> 00:39:21.866 A:middle
Really just cache those values
that you've already sent over

00:39:22.376 --> 00:39:26.936 A:middle
and then only send them
if they've changed.

00:39:27.006 --> 00:39:29.726 A:middle
So let's do a little recap of
our resume time discussion.

00:39:29.726 --> 00:39:33.036 A:middle
We want to minimize the work
performed in our willActivate

00:39:33.036 --> 00:39:35.546 A:middle
and our didAppear, and
we'll want to make use

00:39:35.596 --> 00:39:37.956 A:middle
of cancelable operations
whenever possible.

00:39:38.426 --> 00:39:39.736 A:middle
It's also important to note,

00:39:39.916 --> 00:39:42.676 A:middle
that overly complicated user
interfaces, they're going

00:39:42.676 --> 00:39:43.836 A:middle
to lead to slower load times.

00:39:44.316 --> 00:39:46.476 A:middle
So the more data that you're
having to pull through

00:39:46.476 --> 00:39:48.826 A:middle
and update on the UI,
the slower it can be.

00:39:49.506 --> 00:39:52.456 A:middle
And of course, we'll only want
to update our user interface

00:39:52.456 --> 00:39:54.596 A:middle
when necessary, so only
when things change.

00:39:55.746 --> 00:39:59.256 A:middle
So to summarize the Stocks
case study and what I would

00:39:59.256 --> 00:40:01.736 A:middle
like for you to take from
this, think small in your apps.

00:39:59.256 --> 00:40:01.736 A:middle
like for you to take from
this, think small in your apps.

00:40:02.366 --> 00:40:05.016 A:middle
Keep your tasks small
and easy to perform.

00:40:05.486 --> 00:40:09.526 A:middle
You'll want to simplify your
user interface and you want

00:40:09.526 --> 00:40:13.706 A:middle
to make use of the new
background refresh APIs.

00:40:13.876 --> 00:40:16.826 A:middle
Focus on resume time in your
apps, we want to pay attention

00:40:16.826 --> 00:40:19.166 A:middle
to the WKInterfaceController
lifecycle methods,

00:40:19.356 --> 00:40:20.936 A:middle
especially willActivate
and didAppear.

00:40:21.416 --> 00:40:24.386 A:middle
And make use of our cancelable
operations when possible,

00:40:25.006 --> 00:40:27.776 A:middle
and optimize when updating
your user interface

00:40:27.916 --> 00:40:29.376 A:middle
by not sending redundant
information.

00:40:30.146 --> 00:40:33.456 A:middle
For more information, you can
view the developer website.

00:40:33.456 --> 00:40:35.096 A:middle
Our session number is 227.

00:40:35.576 --> 00:40:36.996 A:middle
Some of the related sessions,

00:40:36.996 --> 00:40:38.466 A:middle
unfortunately have
already happened,

00:40:38.696 --> 00:40:40.926 A:middle
but some of these I
feel are important

00:40:40.926 --> 00:40:44.596 A:middle
to not only WatchKit development
but, we have concurrent program

00:40:44.596 --> 00:40:48.576 A:middle
on GCD in Swift 3, so that's
also important as well.

00:40:48.576 --> 00:40:51.646 A:middle
So thank you and have a
wonderful rest of the week.

00:40:52.516 --> 00:41:01.030 A:middle
[ Applause ]
