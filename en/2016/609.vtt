WEBVTT

00:00:06.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:22.501 --> 00:00:24.501 A:middle
[ Applause ]

00:00:24.986 --> 00:00:25.546 A:middle
&gt;&gt; Good morning.

00:00:29.046 --> 00:00:32.186 A:middle
Good morning and welcome to
Advances in SceneKit Rendering.

00:00:32.186 --> 00:00:36.096 A:middle
My name is Amaury and
I'm delighted to be here

00:00:36.306 --> 00:00:38.996 A:middle
to present you how we brought
SceneKit to the next level

00:00:38.996 --> 00:00:40.746 A:middle
with state of the art graphics.

00:00:41.916 --> 00:00:43.996 A:middle
So we have a lot to cover today.

00:00:44.146 --> 00:00:47.596 A:middle
So I will start with a quick
intro on SceneKit before we dive

00:00:47.706 --> 00:00:49.616 A:middle
into this new rendering
advances.

00:00:50.446 --> 00:00:53.916 A:middle
Next Jean-Baptiste and
Sebastien will join me on stage

00:00:53.956 --> 00:00:56.826 A:middle
to present a cool demo,
explain how we built it,

00:00:57.506 --> 00:00:59.056 A:middle
and present all the new features

00:00:59.166 --> 00:01:00.906 A:middle
such as great new
camera effects.

00:00:59.166 --> 00:01:00.906 A:middle
such as great new
camera effects.

00:01:01.386 --> 00:01:07.186 A:middle
And finally, Nick will join us
to present a base to Model I/O.

00:01:07.366 --> 00:01:08.386 A:middle
So in a nutshell.

00:01:09.996 --> 00:01:12.576 A:middle
As you know, SceneKit
is a high level API

00:01:12.576 --> 00:01:16.866 A:middle
under the GameKit umbrella
and it focuses on 3D graphics.

00:01:17.586 --> 00:01:20.676 A:middle
It plays nicely with
[inaudible] and it's built

00:01:20.786 --> 00:01:22.536 A:middle
on top of Metal [inaudible].

00:01:22.536 --> 00:01:26.766 A:middle
And use SceneKit in any
situation where you need

00:01:26.766 --> 00:01:28.496 A:middle
to disperse with the
graphics on screen.

00:01:29.226 --> 00:01:31.616 A:middle
And when you start to think
about it they are used

00:01:31.786 --> 00:01:33.016 A:middle
in a great deal of places.

00:01:34.236 --> 00:01:37.726 A:middle
For instance, we just
introduced Swift Playgrounds

00:01:38.316 --> 00:01:42.406 A:middle
where SceneKit makes scenes
more visual and helps kids

00:01:42.406 --> 00:01:46.746 A:middle
in the first steps in
learning how to program.

00:01:47.336 --> 00:01:51.986 A:middle
In Xcode we use SceneKit
to create an innovative

00:01:51.986 --> 00:01:53.936 A:middle
and extremely useful interface

00:01:54.416 --> 00:01:56.896 A:middle
that helps you develop
your apps view hierarchy.

00:01:58.356 --> 00:02:02.066 A:middle
In iBooks and iBooks Author
people can create rich books

00:01:58.356 --> 00:02:02.066 A:middle
In iBooks and iBooks Author
people can create rich books

00:02:02.356 --> 00:02:06.616 A:middle
with enhanced illustrations
which are interactive.

00:02:07.826 --> 00:02:10.106 A:middle
And of course SceneKit
can be used for games.

00:02:11.506 --> 00:02:13.546 A:middle
Last, but not least, thank you.

00:02:14.016 --> 00:02:17.866 A:middle
You guys found of so use cases
for SceneKit and 3D graphics.

00:02:18.366 --> 00:02:21.216 A:middle
You published thousands
SceneKit-based applications

00:02:21.246 --> 00:02:21.926 A:middle
to the Store.

00:02:22.256 --> 00:02:22.726 A:middle
So thank you.

00:02:23.516 --> 00:02:29.036 A:middle
[ Applause ]

00:02:29.536 --> 00:02:33.006 A:middle
Now, as you know, SceneKit
is tightly integrated

00:02:33.006 --> 00:02:33.796 A:middle
with the system.

00:02:34.316 --> 00:02:36.936 A:middle
It works seamlessly with
all the Apple technologies

00:02:37.316 --> 00:02:40.066 A:middle
and it takes the
most of macOS and iOS

00:02:40.536 --> 00:02:42.536 A:middle
where it's been available
for a few years now.

00:02:43.696 --> 00:02:47.296 A:middle
And sense we last talked at
WWDC we also introduced SceneKit

00:02:47.726 --> 00:02:48.436 A:middle
on tvOS.

00:02:49.886 --> 00:02:53.006 A:middle
All we had to do for the
[inaudible] sample code was

00:02:53.056 --> 00:02:56.466 A:middle
to add two ports for game
controllers and it was ready

00:02:56.466 --> 00:02:58.296 A:middle
to be played on the big screen.

00:02:59.026 --> 00:03:02.236 A:middle
So it's absolutely fantastic
to see how the same game

00:02:59.026 --> 00:03:02.236 A:middle
So it's absolutely fantastic
to see how the same game

00:03:02.546 --> 00:03:04.656 A:middle
and code can run on
macOS, iOS, and tvOS.

00:03:04.656 --> 00:03:08.656 A:middle
And this year we
are closing the loop

00:03:08.916 --> 00:03:10.926 A:middle
with SceneKit coming to watchOS.

00:03:11.196 --> 00:03:13.196 A:middle
[ Applause ]

00:03:13.376 --> 00:03:14.406 A:middle
Thank you.

00:03:15.331 --> 00:03:17.331 A:middle
[ Applause ]

00:03:17.646 --> 00:03:22.816 A:middle
So SceneKit on watchOS is a
great opportunity to start

00:03:22.816 --> 00:03:25.136 A:middle
to think about new
interactions and a way

00:03:25.136 --> 00:03:27.736 A:middle
to present content
on your wrists.

00:03:27.916 --> 00:03:31.086 A:middle
Now, as you might imagine,
there's a lot to say

00:03:31.086 --> 00:03:33.036 A:middle
about the [inaudible]
for the Apple Watch.

00:03:33.286 --> 00:03:35.946 A:middle
And we won't have time
to cover this today.

00:03:35.946 --> 00:03:38.776 A:middle
But we have a [inaudible]
sessions, "Game Technologies

00:03:38.916 --> 00:03:42.426 A:middle
for Apple Watch," on Friday,
where you will learn more

00:03:42.426 --> 00:03:45.766 A:middle
about what's available, how to
play with SceneKit, SpritKit

00:03:45.766 --> 00:03:46.826 A:middle
and other technologies.

00:03:47.336 --> 00:03:50.776 A:middle
And if you are new to SceneKit
and want to learn more,

00:03:50.776 --> 00:03:54.446 A:middle
you can always go online to
check previous WWDC sessions

00:03:54.856 --> 00:03:56.456 A:middle
where we explained basic,

00:03:56.586 --> 00:03:59.076 A:middle
but also really advanced,
features of SceneKit.

00:04:00.656 --> 00:04:04.596 A:middle
Okay. So now let's dive into
this new rendering capabilities.

00:04:05.726 --> 00:04:08.356 A:middle
Well, this year SceneKit puts
physically [inaudible] rendering

00:04:08.356 --> 00:04:10.576 A:middle
in the hands of everyone.

00:04:11.686 --> 00:04:13.716 A:middle
It means that developers,
you guys,

00:04:14.166 --> 00:04:18.185 A:middle
get to have stunning graphics
for the arts and games.

00:04:18.716 --> 00:04:23.316 A:middle
It's the biggest leap forward in
SceneKits rendering capabilities

00:04:23.446 --> 00:04:24.966 A:middle
since its introduction.

00:04:25.586 --> 00:04:28.096 A:middle
We rely on the latest
advances in 3D graphics

00:04:28.466 --> 00:04:32.136 A:middle
and leverage modern technologies
to provide accurate rendering

00:04:32.446 --> 00:04:33.546 A:middle
and physically based shading.

00:04:34.066 --> 00:04:38.096 A:middle
Now, physically based
shading has several

00:04:38.096 --> 00:04:38.916 A:middle
[inaudible] requirements.

00:04:39.156 --> 00:04:41.706 A:middle
So we start with
linear rendering.

00:04:43.146 --> 00:04:46.976 A:middle
So what you see here is a smooth
radiance that goes from zero

00:04:46.976 --> 00:04:50.296 A:middle
to one and, as you can see,
everything looks perfect.

00:04:51.136 --> 00:04:54.166 A:middle
That is until you comprise
it so that it can be stored

00:04:54.166 --> 00:04:56.746 A:middle
in an eight disk optic
set image, for instance.

00:04:57.536 --> 00:05:00.106 A:middle
And, as you can see,
bending occurs.

00:04:57.536 --> 00:05:00.106 A:middle
And, as you can see,
bending occurs.

00:05:00.196 --> 00:05:04.246 A:middle
And that's new because our eye
is more sensible to variations

00:05:04.356 --> 00:05:05.256 A:middle
in the dark effluence.

00:05:06.526 --> 00:05:10.836 A:middle
Now by applying gamma encoding
we can assign more values

00:05:10.906 --> 00:05:12.386 A:middle
to these darker turns.

00:05:13.666 --> 00:05:15.956 A:middle
So, for instance,
here's an illustration

00:05:16.296 --> 00:05:18.096 A:middle
which shows the difference

00:05:18.096 --> 00:05:20.746 A:middle
between storing pixel
data used ordinarily

00:05:21.296 --> 00:05:22.396 A:middle
or using gamma encoding.

00:05:22.956 --> 00:05:28.646 A:middle
Now the thing is that when
shading is [inaudible] all the

00:05:28.646 --> 00:05:29.806 A:middle
lighting information

00:05:29.806 --> 00:05:32.926 A:middle
and equations are
expressed in a linear space.

00:05:34.056 --> 00:05:37.926 A:middle
So in a non-linear pipeline
what you end up with is color

00:05:37.986 --> 00:05:38.826 A:middle
that [inaudible] that is rich

00:05:38.826 --> 00:05:40.726 A:middle
with gamma encoded
[inaudible] texture

00:05:41.366 --> 00:05:44.026 A:middle
and then it's processed
using many [inaudible]

00:05:44.026 --> 00:05:46.666 A:middle
and the resulting
enrichment is written

00:05:46.666 --> 00:05:48.006 A:middle
to a texture or framebuffer.

00:05:48.876 --> 00:05:51.016 A:middle
And, as you might imagine,
that's not correct.

00:05:52.076 --> 00:05:55.866 A:middle
For the final image to be
correct all the operations need

00:05:55.866 --> 00:05:58.096 A:middle
to happen in enough space.

00:05:59.496 --> 00:06:02.436 A:middle
So, as an illustration,
here is a scene

00:05:59.496 --> 00:06:02.436 A:middle
So, as an illustration,
here is a scene

00:06:02.696 --> 00:06:05.706 A:middle
with lighting occurring
in gamma space.

00:06:06.536 --> 00:06:09.806 A:middle
And here is the same scene
with shading in linear space.

00:06:11.066 --> 00:06:13.756 A:middle
And if you compare them, you
will see how light fall-offs

00:06:13.966 --> 00:06:19.096 A:middle
and edges appear harsher
in linear rendering.

00:06:19.096 --> 00:06:21.116 A:middle
Now linear rendering
is essential

00:06:21.116 --> 00:06:25.116 A:middle
for physically based rendering
but it actually applies to any

00:06:25.116 --> 00:06:26.276 A:middle
of the SceneKit lighting model

00:06:26.646 --> 00:06:28.476 A:middle
because it just makes
the [inaudible] white.

00:06:30.516 --> 00:06:33.596 A:middle
Now, as you know, color is a
big [inaudible] thing this year

00:06:33.596 --> 00:06:39.466 A:middle
at WWDC so in addition to
gamma corrections [inaudible]

00:06:39.566 --> 00:06:42.756 A:middle
management automatically.

00:06:44.696 --> 00:06:45.806 A:middle
So what does that mean?

00:06:46.566 --> 00:06:49.006 A:middle
It means that the color
profile that is assigned

00:06:49.006 --> 00:06:50.616 A:middle
to a texture will
now be [inaudible].

00:06:51.766 --> 00:06:54.956 A:middle
Any operation that happens
between the image is loaded

00:06:55.016 --> 00:06:57.986 A:middle
from disk to the moment
it's handed to the system

00:06:57.986 --> 00:06:59.546 A:middle
so that it can be
displayed on screen,

00:07:00.046 --> 00:07:02.606 A:middle
we will respect the
integrity of the color data.

00:07:03.856 --> 00:07:08.876 A:middle
So a SceneKit-based application
will pull this wonders

00:07:08.876 --> 00:07:10.876 A:middle
of the color accuracy

00:07:11.706 --> 00:07:15.046 A:middle
of a professional
[inaudible] application.

00:07:15.046 --> 00:07:19.416 A:middle
Now, as you know, [inaudible]
just stop raw data that happen

00:07:19.556 --> 00:07:21.386 A:middle
to be stored as colors.

00:07:21.766 --> 00:07:22.776 A:middle
And SceneKit knows that

00:07:22.776 --> 00:07:24.976 A:middle
and so it won't color
match such images.

00:07:24.976 --> 00:07:28.556 A:middle
Now to help you with that
there's a great new features

00:07:28.556 --> 00:07:32.986 A:middle
in Xcode 8 asset catalogs
and they are texture sets.

00:07:34.456 --> 00:07:39.586 A:middle
In a texture set one can specify
whether an image holds color

00:07:39.586 --> 00:07:44.226 A:middle
data or raw data and then Xcode
can automatically convert these

00:07:44.226 --> 00:07:48.356 A:middle
images to CPU and GPU
efficient texture formats.

00:07:48.866 --> 00:07:51.786 A:middle
But to learn more about
that we have a session right

00:07:51.786 --> 00:07:53.986 A:middle
after lunch, "Working
with Wide Color,"

00:07:54.326 --> 00:07:58.906 A:middle
where the Metal team gets
into [inaudible] details.

00:07:59.036 --> 00:08:01.336 A:middle
Now, in addition to textures,

00:07:59.036 --> 00:08:01.336 A:middle
Now, in addition to textures,

00:08:01.786 --> 00:08:04.226 A:middle
color management also
applies to color objects.

00:08:05.306 --> 00:08:08.106 A:middle
So color components are no
longer assumed to be sRGB.

00:08:08.976 --> 00:08:11.056 A:middle
And so if you are creating
colors programmatically,

00:08:11.316 --> 00:08:14.416 A:middle
it's now really important that
you use the right initializer.

00:08:15.586 --> 00:08:18.676 A:middle
So here is an illustration
with two color objects,

00:08:19.016 --> 00:08:21.556 A:middle
one Display P3 and
the other sRGB,

00:08:21.976 --> 00:08:24.256 A:middle
that were created using
the same components.

00:08:25.916 --> 00:08:28.616 A:middle
When working with color
pickers pay attention

00:08:28.616 --> 00:08:29.916 A:middle
to the color space
that you choose.

00:08:30.446 --> 00:08:33.775 A:middle
Above the menu we let you choose
from [inaudible] color spaces,

00:08:34.275 --> 00:08:36.296 A:middle
including device
independent ones,

00:08:36.436 --> 00:08:37.525 A:middle
such as [inaudible]
and [inaudible].

00:08:37.736 --> 00:08:42.296 A:middle
And there's also a handy
option to display values

00:08:42.366 --> 00:08:44.236 A:middle
as [inaudible] rather
than integers

00:08:44.236 --> 00:08:48.496 A:middle
so that they can be
easily copy-pasted to code.

00:08:48.496 --> 00:08:50.996 A:middle
And speaking of which,
as you know,

00:08:51.636 --> 00:08:53.856 A:middle
shader modifiers are a
great feature in SceneKit

00:08:54.026 --> 00:08:57.006 A:middle
that will allow you to
customize our rendering.

00:08:58.016 --> 00:09:01.706 A:middle
Now, as I said, this year
shading appears in linear space.

00:08:58.016 --> 00:09:01.706 A:middle
Now, as I said, this year
shading appears in linear space.

00:09:02.216 --> 00:09:04.916 A:middle
So you must be sure
to convert your colors

00:09:05.376 --> 00:09:09.126 A:middle
to the linear extended sRGB
color space before these

00:09:09.126 --> 00:09:11.096 A:middle
components are used
for color [inaudible].

00:09:11.166 --> 00:09:18.716 A:middle
Now a few notes about
backward compatibility now.

00:09:18.896 --> 00:09:22.276 A:middle
Linear rendering and color
management are automatically

00:09:22.276 --> 00:09:25.506 A:middle
enabled whenever you link your
app against the new [inaudible].

00:09:26.326 --> 00:09:28.856 A:middle
There's no performance
cost in enabling them

00:09:29.056 --> 00:09:31.666 A:middle
but they will dramatically
change the look

00:09:31.666 --> 00:09:32.116 A:middle
of [inaudible] scenes.

00:09:32.936 --> 00:09:35.496 A:middle
So, for instance,
here's last year's demo

00:09:35.886 --> 00:09:37.696 A:middle
which did not use
linear rendering.

00:09:38.596 --> 00:09:42.526 A:middle
And here's what happens
if you just recombine it.

00:09:42.716 --> 00:09:45.326 A:middle
Now, of course, textures,
lighting,

00:09:45.446 --> 00:09:47.136 A:middle
and shadow modifiers
can be reworked

00:09:47.556 --> 00:09:48.816 A:middle
with linear rendering in mind.

00:09:49.596 --> 00:09:52.786 A:middle
But if you want to deploy your
application to older versions

00:09:52.786 --> 00:09:55.696 A:middle
of the system, or want to
update a linear rendering

00:09:55.696 --> 00:09:57.276 A:middle
in color management
for some reason,

00:09:57.796 --> 00:09:58.906 A:middle
we have found a way to do that.

00:09:59.436 --> 00:10:03.686 A:middle
You can [inaudible]
level by specifying a key

00:09:59.436 --> 00:10:03.686 A:middle
You can [inaudible]
level by specifying a key

00:10:03.806 --> 00:10:05.846 A:middle
in your apps Info.plist file.

00:10:06.376 --> 00:10:10.176 A:middle
And then there is
wide gamut content.

00:10:10.616 --> 00:10:13.786 A:middle
So, as you know, with
wide gamut color spaces

00:10:13.786 --> 00:10:17.586 A:middle
such as extended sRGB
[inaudible] exists

00:10:17.586 --> 00:10:19.286 A:middle
and they are really important

00:10:19.466 --> 00:10:20.976 A:middle
when working for
modern hardware.

00:10:22.486 --> 00:10:24.746 A:middle
The new iPad Pro and iMac

00:10:24.826 --> 00:10:27.376 A:middle
with Retina Display
have wide gamut displays

00:10:27.376 --> 00:10:29.216 A:middle
that SceneKit can
[inaudible] automatically.

00:10:30.066 --> 00:10:32.756 A:middle
All you have to do is to
bring your wide gamut content,

00:10:33.156 --> 00:10:35.716 A:middle
so textures or colors,

00:10:35.986 --> 00:10:40.376 A:middle
and SceneKit will enter
that transparently.

00:10:42.036 --> 00:10:43.326 A:middle
Now wide gamut textures

00:10:43.326 --> 00:10:47.236 A:middle
and framebuffer will require
more memory to hold that data

00:10:47.236 --> 00:10:49.806 A:middle
and that will lead to an
increased bandwidth usage.

00:10:50.056 --> 00:10:52.286 A:middle
So may you experience
any performance issue,

00:10:52.386 --> 00:11:01.376 A:middle
we offer a way to upload again
at the [inaudible] app level.

00:10:52.386 --> 00:11:01.376 A:middle
we offer a way to upload again
at the [inaudible] app level.

00:11:01.516 --> 00:11:04.466 A:middle
Now let me mention the color
gamut showcase sample code

00:11:05.176 --> 00:11:06.606 A:middle
that we built in collaboration

00:11:06.606 --> 00:11:08.416 A:middle
with the Cocoa and
Cocoa Touch team.

00:11:09.286 --> 00:11:12.256 A:middle
It's a synching-based
application that will allow you

00:11:12.396 --> 00:11:14.846 A:middle
to see the out of
gamut color components

00:11:15.806 --> 00:11:17.026 A:middle
and it's also really useful

00:11:17.026 --> 00:11:20.236 A:middle
because on the wide gamut
display you will be able

00:11:20.236 --> 00:11:21.956 A:middle
to see what this display brings

00:11:22.036 --> 00:11:24.726 A:middle
because you can simulate
a non-wide gamut display.

00:11:25.296 --> 00:11:29.686 A:middle
So to learn now about working
with wide colors and how

00:11:29.686 --> 00:11:34.626 A:middle
to convert color components
from between color spaces,

00:11:35.176 --> 00:11:36.856 A:middle
again we have a great
session this afternoon.

00:11:37.386 --> 00:11:41.756 A:middle
And so that works for accurate
rendering which is a requirement

00:11:42.396 --> 00:11:44.046 A:middle
of physically based rendering.

00:11:45.626 --> 00:11:50.276 A:middle
Now what is physically
base rendering and why?

00:11:51.166 --> 00:11:54.176 A:middle
Well, [inaudible] scenes
with detailed models.

00:11:54.176 --> 00:11:59.316 A:middle
And that is definitely true.

00:11:59.316 --> 00:12:02.306 A:middle
But shading is what
makes objects tangible.

00:11:59.316 --> 00:12:02.306 A:middle
But shading is what
makes objects tangible.

00:12:03.256 --> 00:12:05.436 A:middle
So all you see here
on the screen used

00:12:05.436 --> 00:12:06.796 A:middle
to be a soup of polygons.

00:12:07.776 --> 00:12:10.706 A:middle
And shading is a process
of finding the right color

00:12:10.706 --> 00:12:12.216 A:middle
for each detail on the screen.

00:12:12.516 --> 00:12:16.516 A:middle
So all the highlights,
shadows, and the sense of depth,

00:12:17.026 --> 00:12:18.076 A:middle
it comes from shading.

00:12:19.776 --> 00:12:22.826 A:middle
Shading is that magical
operation

00:12:22.916 --> 00:12:24.426 A:middle
that can bring a scene to life.

00:12:25.426 --> 00:12:26.756 A:middle
Now how does it work?

00:12:27.506 --> 00:12:30.306 A:middle
Well, first there is light
which is emitted from a source.

00:12:31.056 --> 00:12:35.546 A:middle
And when light hits an object it
interacts with matter according

00:12:35.626 --> 00:12:38.896 A:middle
to properties of the surface
and then light is reflected

00:12:38.896 --> 00:12:41.906 A:middle
to find your eye or a
camera in this case.

00:12:42.456 --> 00:12:46.786 A:middle
Now this interaction between
light and matter is something

00:12:46.786 --> 00:12:47.776 A:middle
that is really complex.

00:12:48.436 --> 00:12:50.896 A:middle
And over the years many
mathematical models were

00:12:50.896 --> 00:12:54.356 A:middle
developed to try to
best describe it.

00:12:54.556 --> 00:12:58.596 A:middle
Physically based rendering is an
approximation of light transport

00:12:58.806 --> 00:13:01.886 A:middle
that relies on such mathematical
models and they take

00:12:58.806 --> 00:13:01.886 A:middle
that relies on such mathematical
models and they take

00:13:01.886 --> 00:13:04.496 A:middle
into account the physical
properties of light and matter.

00:13:05.446 --> 00:13:09.066 A:middle
But, as you know, SceneKit is
a high-level API and we want

00:13:09.186 --> 00:13:12.076 A:middle
to allow anyone to benefit
from this new lighting model.

00:13:12.536 --> 00:13:15.596 A:middle
So we will expose a
super easy-to-use API

00:13:15.956 --> 00:13:17.956 A:middle
so that you can use
physically based rendering

00:13:18.096 --> 00:13:19.346 A:middle
that artists love.

00:13:20.256 --> 00:13:23.096 A:middle
So at the end of this session
you will be able to get

00:13:23.096 --> 00:13:25.326 A:middle
from this rendering,
which is standard,

00:13:25.326 --> 00:13:27.336 A:middle
to a physically based one.

00:13:27.916 --> 00:13:32.596 A:middle
Okay. So in SceneKit we
will export physically based

00:13:32.596 --> 00:13:34.086 A:middle
rendering from two angles.

00:13:34.606 --> 00:13:37.346 A:middle
First, physically based
materials and then,

00:13:37.656 --> 00:13:38.596 A:middle
physically based lights.

00:13:38.666 --> 00:13:45.286 A:middle
So first, physically
based materials.

00:13:46.936 --> 00:13:49.866 A:middle
Here is a description of
a point on the surface

00:13:50.236 --> 00:13:53.166 A:middle
with normally indicating its
orientation is for the space.

00:13:54.396 --> 00:13:57.306 A:middle
And when light hits that point,
it's split into two terms,

00:13:58.186 --> 00:14:00.706 A:middle
diffuse reflection and
specular reflection.

00:13:58.186 --> 00:14:00.706 A:middle
diffuse reflection and
specular reflection.

00:14:01.346 --> 00:14:04.206 A:middle
Now diffuse reflection
corresponds to light

00:14:04.566 --> 00:14:08.036 A:middle
that goes underneath the surface
and is scattered so many times

00:14:08.036 --> 00:14:10.616 A:middle
and in so many directions
that it appears uniform.

00:14:12.076 --> 00:14:15.086 A:middle
The color of the diffuse
reflection is albedo

00:14:15.676 --> 00:14:16.916 A:middle
or the base color of the object.

00:14:17.536 --> 00:14:20.456 A:middle
So when designing the interface
for physically based material

00:14:20.456 --> 00:14:24.586 A:middle
in SceneKit we will want
to use an albedo map.

00:14:24.766 --> 00:14:28.926 A:middle
Now specular reflection
does not follow that way.

00:14:29.056 --> 00:14:31.286 A:middle
Specular reflection
is just made of lights

00:14:31.346 --> 00:14:33.566 A:middle
that bounces off the
surface and so it's

00:14:33.566 --> 00:14:35.386 A:middle
of the color of the
incoming ray.

00:14:35.946 --> 00:14:37.966 A:middle
So here is what we
call a cube map.

00:14:38.386 --> 00:14:41.956 A:middle
It's a collection of six spaces
that represent the environment

00:14:41.956 --> 00:14:44.336 A:middle
around the location in 3D space.

00:14:45.606 --> 00:14:48.116 A:middle
And when we place a
perfectly specular object

00:14:48.116 --> 00:14:51.336 A:middle
in such an environment we will
see that acts like a mirror.

00:14:51.336 --> 00:14:56.456 A:middle
Now let's take a more realistic
example with a plastic ball.

00:14:57.356 --> 00:14:59.136 A:middle
As you can see, it's
not a perfect mirror.

00:14:59.136 --> 00:15:03.946 A:middle
At the center is the reflection
is dim but as you move closer

00:14:59.136 --> 00:15:03.946 A:middle
At the center is the reflection
is dim but as you move closer

00:15:04.066 --> 00:15:05.636 A:middle
to the edge it gets brighter.

00:15:06.496 --> 00:15:09.676 A:middle
And actually for raising
angles all light is reflected.

00:15:11.166 --> 00:15:14.446 A:middle
Now not all materials have
the same reflectivity amount.

00:15:14.906 --> 00:15:17.336 A:middle
What you see on the
top is a curve

00:15:17.386 --> 00:15:21.176 A:middle
which represents the
reflected values in function

00:15:21.266 --> 00:15:23.716 A:middle
of the incident angle
from zero to 90 degrees.

00:15:24.376 --> 00:15:27.796 A:middle
And you will see that these
reflectivity values stays almost

00:15:27.796 --> 00:15:29.676 A:middle
constant from zero to 45 degrees

00:15:30.036 --> 00:15:31.716 A:middle
and actually we can
use this value

00:15:32.116 --> 00:15:33.296 A:middle
to reconstruct the whole curve.

00:15:33.296 --> 00:15:36.806 A:middle
Now gold is an interesting
example

00:15:37.276 --> 00:15:40.676 A:middle
because it has different
reflectivity values of the red,

00:15:40.676 --> 00:15:42.246 A:middle
green, and blue components.

00:15:43.586 --> 00:15:47.906 A:middle
The one last thing to note here
is that metals, such as aluminum

00:15:47.906 --> 00:15:52.756 A:middle
and gold, have high reflectivity
values whereas non-metals

00:15:53.036 --> 00:15:56.346 A:middle
or dielectrics have low
reflectivity values.

00:15:56.646 --> 00:15:58.756 A:middle
And this difference

00:15:58.756 --> 00:16:01.116 A:middle
in reflectivity is
actually essential

00:15:58.756 --> 00:16:01.116 A:middle
in reflectivity is
actually essential

00:16:01.116 --> 00:16:02.326 A:middle
for the final look
of the object.

00:16:02.766 --> 00:16:05.636 A:middle
So in SceneKit we want
to expose a metalness map

00:16:06.486 --> 00:16:10.566 A:middle
which will indicate which
parts of the object is metallic

00:16:10.566 --> 00:16:12.286 A:middle
and which part is not.

00:16:13.616 --> 00:16:15.436 A:middle
So in addition to reflectivity

00:16:15.486 --> 00:16:17.536 A:middle
to different type
reflectivity values,

00:16:18.026 --> 00:16:21.046 A:middle
also note that metals will
absorb all light beneath the

00:16:21.046 --> 00:16:24.256 A:middle
surface where dielectric
will scatter with light.

00:16:24.636 --> 00:16:26.766 A:middle
So the visual effect of this is

00:16:27.416 --> 00:16:31.146 A:middle
that metals have a wide
specular reflection

00:16:31.346 --> 00:16:35.746 A:middle
and no diffuse reflection and
dielectric will have a lot

00:16:35.746 --> 00:16:39.556 A:middle
of diffusion and specular
reflection will almost be seen

00:16:39.606 --> 00:16:40.916 A:middle
only at raising angles.

00:16:42.306 --> 00:16:47.426 A:middle
So in SceneKit we will reuse
the diffuse Metal property

00:16:47.866 --> 00:16:50.866 A:middle
to store the reflectivity
values of metals

00:16:50.866 --> 00:16:53.436 A:middle
and the albedo of dielectrics.

00:16:54.596 --> 00:16:57.126 A:middle
And for the reflectivity values

00:16:57.126 --> 00:17:01.046 A:middle
of dieletrics we just use
a global low constant.

00:16:57.126 --> 00:17:01.046 A:middle
of dieletrics we just use
a global low constant.

00:17:03.096 --> 00:17:06.906 A:middle
So we just reuse the
diffuse Metal property

00:17:07.156 --> 00:17:10.476 A:middle
that we brought from
[inaudible].

00:17:10.656 --> 00:17:13.236 A:middle
Now one last aspect
I would like to talk

00:17:13.236 --> 00:17:15.476 A:middle
about is the surface roughness.

00:17:16.856 --> 00:17:19.925 A:middle
So, as you know, no
surface is perfectly smooth.

00:17:20.415 --> 00:17:23.576 A:middle
As a microscopic level
you always have tiny bumps

00:17:24.056 --> 00:17:26.715 A:middle
and cracks that will affect
the specular reflection.

00:17:27.996 --> 00:17:30.076 A:middle
So the rougher the
microsurface is,

00:17:30.996 --> 00:17:34.746 A:middle
the blurrier the reflection
will be because reflected rays

00:17:34.746 --> 00:17:36.346 A:middle
of light are no longer aligned.

00:17:37.296 --> 00:17:40.526 A:middle
So again in SceneKit we would
want to expose the roughness map

00:17:40.966 --> 00:17:45.216 A:middle
which will indicate which
parts of the surface is rough

00:17:45.256 --> 00:17:46.456 A:middle
and which part is smooth.

00:17:46.926 --> 00:17:48.676 A:middle
And this one is a
[inaudible] image.

00:17:51.286 --> 00:17:56.916 A:middle
So we just saw how we can divide
three fundamental properties

00:17:57.496 --> 00:18:00.656 A:middle
and each of them has a
clear meaning and is derived

00:17:57.496 --> 00:18:00.656 A:middle
and each of them has a
clear meaning and is derived

00:18:00.826 --> 00:18:02.096 A:middle
from [inaudible]
properties of the surface.

00:18:02.096 --> 00:18:05.436 A:middle
Now creating a physically
based material

00:18:05.476 --> 00:18:08.266 A:middle
in SceneKit is straightforward.

00:18:08.736 --> 00:18:12.456 A:middle
You first create a material,
then set its lighting model

00:18:12.456 --> 00:18:14.456 A:middle
to the new physically
based lighting model,

00:18:14.936 --> 00:18:16.526 A:middle
and finally you provide
your maps.

00:18:17.846 --> 00:18:19.406 A:middle
So let's take an example.

00:18:19.856 --> 00:18:23.046 A:middle
We start with a mine cart
and only a diffuse map.

00:18:23.986 --> 00:18:25.376 A:middle
We will then add
a roughness map.

00:18:25.786 --> 00:18:27.906 A:middle
So, for instance,
take a look at coal.

00:18:28.666 --> 00:18:31.856 A:middle
Coal is rough so there
is no [inaudible].

00:18:32.796 --> 00:18:35.786 A:middle
And finally we will
add a metalness map.

00:18:36.256 --> 00:18:39.196 A:middle
So, for instance, take a
look at rails and wheels.

00:18:39.726 --> 00:18:42.856 A:middle
Let's take another example.

00:18:43.086 --> 00:18:44.236 A:middle
We have a fire truck.

00:18:45.326 --> 00:18:46.696 A:middle
Again, we start with
a diffuse map.

00:18:46.696 --> 00:18:49.516 A:middle
Now we will add a metalness map.

00:18:50.076 --> 00:18:53.136 A:middle
And finally a roughness map.

00:18:53.346 --> 00:18:58.956 A:middle
So for instance,
take a look at tires.

00:18:59.126 --> 00:19:02.116 A:middle
Now one thing I would
like to mention.

00:18:59.126 --> 00:19:02.116 A:middle
Now one thing I would
like to mention.

00:19:02.806 --> 00:19:05.816 A:middle
For the metalness, roughness,
and ambient occlusion maps,

00:19:06.266 --> 00:19:08.136 A:middle
please use grayscale images.

00:19:08.646 --> 00:19:11.056 A:middle
Having different channels
for the red, green,

00:19:11.056 --> 00:19:13.466 A:middle
and blue would just
be a waste of memory.

00:19:13.826 --> 00:19:15.636 A:middle
And even more if you
add another function in.

00:19:16.976 --> 00:19:19.456 A:middle
Now, furthermore, if you
want to use the same value

00:19:19.456 --> 00:19:22.146 A:middle
over the whole surface, you
can use the color object,

00:19:22.746 --> 00:19:26.116 A:middle
or even better, for these
metal properties we know

00:19:26.386 --> 00:19:26.756 A:middle
[inaudible] numbers.

00:19:28.896 --> 00:19:31.956 A:middle
So we just saw how we can
create a really simple

00:19:31.956 --> 00:19:35.476 A:middle
and high-level API to create
a wide variety of materials.

00:19:36.116 --> 00:19:37.176 A:middle
Here is the same object

00:19:37.906 --> 00:19:40.576 A:middle
and on one axis we changed
the roughness values

00:19:41.006 --> 00:19:44.236 A:middle
and on the other axis we
changed the roughness value.

00:19:46.296 --> 00:19:49.406 A:middle
Now remember how we said that
we would export physically

00:19:49.456 --> 00:19:50.036 A:middle
based rendering.

00:19:51.146 --> 00:19:54.016 A:middle
Let's now have a look at
physically based lights.

00:19:54.956 --> 00:19:57.816 A:middle
Well, in SceneKit lights can
be split into three categories.

00:19:58.256 --> 00:20:02.296 A:middle
I will start with image
based lighting, or IBL,

00:19:58.256 --> 00:20:02.296 A:middle
I will start with image
based lighting, or IBL,

00:20:02.996 --> 00:20:05.546 A:middle
then cover light probes,
and finally point lights.

00:20:06.766 --> 00:20:08.586 A:middle
So image based lighting.

00:20:09.126 --> 00:20:14.586 A:middle
As I said, you can use a cube
map to describe the environment

00:20:14.776 --> 00:20:17.136 A:middle
around a location in 3D space.

00:20:18.536 --> 00:20:19.866 A:middle
So when shading a point

00:20:19.866 --> 00:20:22.436 A:middle
on the surface we can
consider the finish here

00:20:22.436 --> 00:20:24.736 A:middle
above the end point
according to its normal

00:20:25.196 --> 00:20:27.846 A:middle
and the right lighting
information on the color

00:20:27.966 --> 00:20:29.866 A:middle
that is [inaudible]
in this cube map.

00:20:30.496 --> 00:20:32.826 A:middle
So for instance,
here is an object

00:20:33.176 --> 00:20:36.016 A:middle
which is lit only using
image based lighting.

00:20:36.316 --> 00:20:37.756 A:middle
There is no light in that scene.

00:20:38.276 --> 00:20:39.476 A:middle
And you can see how changing

00:20:39.476 --> 00:20:44.236 A:middle
to cube map dramatically
affects the look of the object.

00:20:44.396 --> 00:20:47.006 A:middle
Using image based
lighting all the objects

00:20:47.006 --> 00:20:49.166 A:middle
in your scene will
have a coherent look

00:20:49.326 --> 00:20:50.696 A:middle
and will work nicely together.

00:20:51.316 --> 00:20:53.606 A:middle
By using image based lighting

00:20:53.726 --> 00:20:55.316 A:middle
in SceneKit is really
straightforward.

00:20:55.986 --> 00:20:59.216 A:middle
We added a lighting environment
property of the scene.

00:20:59.936 --> 00:21:02.336 A:middle
And you can simply set a
cube map to its contents.

00:20:59.936 --> 00:21:02.336 A:middle
And you can simply set a
cube map to its contents.

00:21:03.226 --> 00:21:05.426 A:middle
And what's great is
that it works perfectly

00:21:05.426 --> 00:21:06.536 A:middle
with the background property.

00:21:07.786 --> 00:21:13.106 A:middle
So for instance, if you take an
object and set the same image

00:21:13.186 --> 00:21:15.706 A:middle
to the background and
lighting environ properties,

00:21:15.706 --> 00:21:19.346 A:middle
you will be able to display
an object in its context.

00:21:21.096 --> 00:21:25.416 A:middle
Now cube map, it can show
the distant environment

00:21:25.416 --> 00:21:26.316 A:middle
and the aesthetic.

00:21:27.556 --> 00:21:30.316 A:middle
So when shading a point on
the surface it's possible

00:21:30.686 --> 00:21:34.946 A:middle
that this environment is not
visible because you're in a cave

00:21:35.236 --> 00:21:37.166 A:middle
or there's another
object between them.

00:21:37.166 --> 00:21:40.016 A:middle
And that can be taken
into account

00:21:40.056 --> 00:21:41.136 A:middle
with image based lighting.

00:21:41.326 --> 00:21:45.456 A:middle
So it does not work very
well for occluded objects.

00:21:45.546 --> 00:21:51.536 A:middle
Luckily we have a solution
for that: Light probes.

00:21:51.536 --> 00:21:55.276 A:middle
Light probes are local lights
that are faced towards the scene

00:21:55.466 --> 00:21:59.756 A:middle
and they capture the local
diffused contribution.

00:22:00.236 --> 00:22:01.706 A:middle
So when shading a point

00:22:01.706 --> 00:22:06.126 A:middle
on a surface we can find the
four closest light probes

00:22:06.126 --> 00:22:08.996 A:middle
and interpolate lighting
from these probes.

00:22:08.996 --> 00:22:13.556 A:middle
So as I said, light probes,
they are local lights

00:22:13.656 --> 00:22:15.536 A:middle
and so they can account
for occlusion.

00:22:16.446 --> 00:22:18.556 A:middle
And they are implemented
in such a way

00:22:18.556 --> 00:22:20.546 A:middle
that they are really
lightweight and efficient.

00:22:21.346 --> 00:22:24.046 A:middle
You can have dozens of
light probes in the scene.

00:22:24.396 --> 00:22:25.826 A:middle
And we actually recommend that.

00:22:26.686 --> 00:22:28.216 A:middle
Because the more
probes you have,

00:22:29.276 --> 00:22:30.476 A:middle
the finer the [inaudible]
will be

00:22:30.626 --> 00:22:33.286 A:middle
and the better local lighting
information you will have.

00:22:34.456 --> 00:22:36.486 A:middle
So creating a light
probe is easy.

00:22:37.156 --> 00:22:39.106 A:middle
You create the light and
then change its type.

00:22:40.126 --> 00:22:41.956 A:middle
That can be done
either programmatically

00:22:42.456 --> 00:22:44.856 A:middle
or within the Xcode
SceneKit scene editor.

00:22:46.306 --> 00:22:48.056 A:middle
Now just like cube maps,

00:22:48.436 --> 00:22:51.506 A:middle
light probes capture
static lighting information.

00:22:52.016 --> 00:22:53.926 A:middle
And this information
will be baked

00:22:54.296 --> 00:22:59.506 A:middle
into the probe easily using the
Xcode scene editor of this API.

00:23:00.536 --> 00:23:02.866 A:middle
So we just saw how using IBL

00:23:02.866 --> 00:23:09.266 A:middle
or light probes you can have
indirect lighting in the scene.

00:23:09.876 --> 00:23:13.006 A:middle
But of course if you want direct
lighting, you still have access

00:23:13.036 --> 00:23:14.606 A:middle
to all the other kind of lights.

00:23:15.746 --> 00:23:20.016 A:middle
So omnidirectional, directional,
and spot lights work

00:23:20.016 --> 00:23:21.316 A:middle
with physically based rendering.

00:23:21.746 --> 00:23:23.836 A:middle
And actually we have [inaudible]

00:23:24.406 --> 00:23:26.516 A:middle
so that you can be
a better configure.

00:23:27.836 --> 00:23:30.856 A:middle
For instance, we added
the light's intensity.

00:23:31.886 --> 00:23:35.796 A:middle
A light's intensity is expressed
in lumens which a default

00:23:35.796 --> 00:23:38.146 A:middle
of watt 1000 which
is in the order

00:23:38.146 --> 00:23:39.566 A:middle
of magnitude of a light bulb.

00:23:40.646 --> 00:23:44.746 A:middle
We also added a light's
temperature which is expressed

00:23:44.746 --> 00:23:47.346 A:middle
in Kelvin and from which
we can divide for color.

00:23:48.796 --> 00:23:51.736 A:middle
And one great new feature,
we added a new kind

00:23:51.736 --> 00:23:52.996 A:middle
of lights, IES lights.

00:23:54.396 --> 00:23:56.786 A:middle
So IES lights, or
photometric lights,

00:23:57.046 --> 00:23:59.316 A:middle
can account for any
attenuation shape.

00:24:00.136 --> 00:24:01.876 A:middle
So while the spot light

00:24:01.996 --> 00:24:06.356 A:middle
or omnidirectional light has a
really symmetrical attenuation

00:24:07.216 --> 00:24:10.406 A:middle
curve, IES lights can better
accumulate the behavior

00:24:10.406 --> 00:24:11.706 A:middle
of a theater world light.

00:24:12.746 --> 00:24:15.106 A:middle
And, for instance, it can
account for [inaudible].

00:24:15.316 --> 00:24:16.866 A:middle
It can account for shadows.

00:24:17.406 --> 00:24:19.736 A:middle
For example, due to
the frame of the light.

00:24:20.556 --> 00:24:24.506 A:middle
Now creating photometric lights
in SceneKit is really easy.

00:24:24.876 --> 00:24:25.876 A:middle
Again, you create the light.

00:24:26.406 --> 00:24:27.576 A:middle
Then you change its type.

00:24:28.406 --> 00:24:32.596 A:middle
And finally you provide the
URL to put them into profile

00:24:32.626 --> 00:24:34.886 A:middle
which can, for instance,
be downloaded

00:24:34.886 --> 00:24:36.616 A:middle
from the website
of a manufacturer.

00:24:37.206 --> 00:24:43.116 A:middle
So as a quick recap, we
just saw how simple it is

00:24:43.116 --> 00:24:45.756 A:middle
to create a physically
based material in SceneKit

00:24:46.106 --> 00:24:49.496 A:middle
and all these properties derive
from here where properties

00:24:49.496 --> 00:24:52.096 A:middle
on the surface so they are
really easy to understand

00:24:52.536 --> 00:24:54.816 A:middle
and how we can work with
lights in the context

00:24:54.876 --> 00:24:56.106 A:middle
of physically based material.

00:24:56.886 --> 00:25:00.406 A:middle
So with that please
welcome Jean-Baptiste

00:24:56.886 --> 00:25:00.406 A:middle
So with that please
welcome Jean-Baptiste

00:25:00.406 --> 00:25:01.976 A:middle
and Sebastien for great demos.

00:25:02.116 --> 00:25:04.116 A:middle
[ Applause ]

00:25:04.216 --> 00:25:07.536 A:middle
&gt;&gt; So thank you, Amaury,
for this great presentation

00:25:08.036 --> 00:25:10.826 A:middle
of the new rendering
capabilities of SceneKit.

00:25:12.156 --> 00:25:16.246 A:middle
So let's see them in
action, the [inaudible].

00:25:16.246 --> 00:25:20.376 A:middle
So, as you will see,
almost everything

00:25:20.416 --> 00:25:21.206 A:middle
that has been presented

00:25:21.206 --> 00:25:25.396 A:middle
by Amaury is actually
very [inaudible] available

00:25:25.396 --> 00:25:25.706 A:middle
in the [inaudible].

00:25:25.806 --> 00:25:31.716 A:middle
You will be able
to tweak properties

00:25:31.896 --> 00:25:33.336 A:middle
and see the result in real time.

00:25:34.066 --> 00:25:37.266 A:middle
So I have a very simple
scene ordered here

00:25:38.006 --> 00:25:40.916 A:middle
with just one light
on this truck.

00:25:41.686 --> 00:25:47.336 A:middle
I go to the Materials inspector.

00:25:47.336 --> 00:25:50.076 A:middle
As you can see we have just
two materials of the subject.

00:25:50.776 --> 00:25:52.826 A:middle
One for the body and one for
the accessories, et cetera.

00:25:52.956 --> 00:25:55.486 A:middle
So I'm going to select
those two.

00:25:56.686 --> 00:25:59.896 A:middle
We are continue using the Blinn
lighting model so we'll switch

00:25:59.896 --> 00:26:01.396 A:middle
to the physically
based lighting model.

00:25:59.896 --> 00:26:01.396 A:middle
to the physically
based lighting model.

00:26:01.986 --> 00:26:05.966 A:middle
Now I've set the two
materials as metallic.

00:26:07.256 --> 00:26:09.226 A:middle
And, as you can see,
there is an issue

00:26:09.226 --> 00:26:13.126 A:middle
because we don't see the
reflection of the environment.

00:26:13.526 --> 00:26:18.566 A:middle
So we can go to the Scene
inspector and we have

00:26:18.566 --> 00:26:20.406 A:middle
to set the lighting
environment for project.

00:26:20.976 --> 00:26:29.466 A:middle
So for that I will use the cube
map, for example, this cube map

00:26:29.466 --> 00:26:39.076 A:middle
of a parking as the
lighting environment.

00:26:41.516 --> 00:26:45.156 A:middle
So. Shortly I'm focusing on
those three main properties

00:26:45.286 --> 00:26:47.236 A:middle
of the physically
based lighting model.

00:26:48.056 --> 00:26:50.206 A:middle
So let's now move to
the roughness value.

00:26:51.456 --> 00:26:57.926 A:middle
The roughness is indicate
how smooth the surface is.

00:26:58.086 --> 00:27:03.506 A:middle
So you will see that the
rougher the surface is,

00:26:58.086 --> 00:27:03.506 A:middle
So you will see that the
rougher the surface is,

00:27:03.666 --> 00:27:06.846 A:middle
the blurrier the
surface will be.

00:27:06.936 --> 00:27:10.396 A:middle
So if I move the value of
the roughness closer to one,

00:27:10.396 --> 00:27:14.696 A:middle
I have a blurry reflection.

00:27:14.696 --> 00:27:17.406 A:middle
And then almost no reflection
at all when we reach one.

00:27:20.216 --> 00:27:24.516 A:middle
So if I move back to zero, I
have a very smooth surface and,

00:27:25.106 --> 00:27:30.226 A:middle
as you can see, everything is,

00:27:30.226 --> 00:27:36.726 A:middle
the whole environment is
reflected in the metal.

00:27:36.726 --> 00:27:39.926 A:middle
So now I'm using just
one constant value

00:27:39.926 --> 00:27:41.776 A:middle
for the roughness.

00:27:41.776 --> 00:27:45.666 A:middle
And I would like to be able
to use, to specify a value

00:27:45.666 --> 00:27:46.706 A:middle
for each part of the object.

00:27:46.746 --> 00:27:48.596 A:middle
For that I just have
to use a roughness map.

00:27:49.196 --> 00:27:51.116 A:middle
So let's use a roughness
map for the body.

00:27:59.596 --> 00:28:01.486 A:middle
And a roughness map
for the accessories.

00:27:59.596 --> 00:28:01.486 A:middle
And a roughness map
for the accessories.

00:28:02.506 --> 00:28:05.186 A:middle
So we have the same kind of
issue with the metalness.

00:28:05.326 --> 00:28:07.256 A:middle
So we want to be able
to specify which part

00:28:07.256 --> 00:28:08.466 A:middle
of the object is
metallic or not.

00:28:08.976 --> 00:28:10.866 A:middle
So for that we [inaudible].

00:28:11.296 --> 00:28:15.706 A:middle
So let's set the metalness
map for the accessories.

00:28:16.236 --> 00:28:18.486 A:middle
A different map.

00:28:24.416 --> 00:28:26.656 A:middle
So, as you can see,
the body parts

00:28:26.806 --> 00:28:32.206 A:middle
of the object is nonmetallic
while the front radiator grill

00:28:32.376 --> 00:28:33.846 A:middle
is completely metallic.

00:28:38.336 --> 00:28:39.976 A:middle
The final touch is
to add the albedo.

00:28:49.026 --> 00:28:49.976 A:middle
And we will be done.

00:28:55.116 --> 00:28:55.866 A:middle
So that's it.

00:28:56.026 --> 00:28:58.726 A:middle
So we have a full [inaudible]
rendering of this fire truck.

00:28:59.206 --> 00:29:02.116 A:middle
I can now switch
to the [inaudible]

00:28:59.206 --> 00:29:02.116 A:middle
I can now switch
to the [inaudible]

00:29:02.116 --> 00:29:03.566 A:middle
and change the cube map.

00:29:04.196 --> 00:29:05.146 A:middle
For example, this cube map

00:29:05.206 --> 00:29:08.756 A:middle
of the lighting environment
with trees.

00:29:09.246 --> 00:29:10.796 A:middle
I can set it in the background.

00:29:13.316 --> 00:29:14.056 A:middle
So that's it.

00:29:15.226 --> 00:29:18.636 A:middle
So, as you've seen,
it's very simple

00:29:19.136 --> 00:29:22.956 A:middle
to use the new SceneKit
scene detail.

00:29:23.416 --> 00:29:25.556 A:middle
And, you know, now to
demonstrate this kind

00:29:25.646 --> 00:29:29.066 A:middle
of rendering in action we've
built a cool demo that I'm going

00:29:29.066 --> 00:29:34.236 A:middle
to show you now while
Sebastien is presenting it.

00:29:34.776 --> 00:29:34.976 A:middle
&gt;&gt; Hello.

00:29:35.016 --> 00:29:36.336 A:middle
[ Applause ]

00:29:36.336 --> 00:29:37.536 A:middle
Thank you.

00:29:38.371 --> 00:29:40.371 A:middle
[ Applause ]

00:29:40.726 --> 00:29:43.226 A:middle
So I'm delighted to present
you our new furry friends

00:29:43.346 --> 00:29:43.946 A:middle
for this year.

00:29:44.446 --> 00:29:45.996 A:middle
Bub. Bub is a badger.

00:29:46.086 --> 00:29:47.486 A:middle
He rides in the mining cart.

00:29:47.926 --> 00:29:52.296 A:middle
And he tries to catch gems
and boosters for speed.

00:29:54.396 --> 00:29:55.636 A:middle
So everything you
see is rendered

00:29:55.636 --> 00:29:56.986 A:middle
with the new SceneKit's
renderer.

00:29:57.896 --> 00:30:00.206 A:middle
All the materials
are physically based.

00:29:57.896 --> 00:30:00.206 A:middle
All the materials
are physically based.

00:30:00.266 --> 00:30:00.876 A:middle
All the lights, too.

00:30:01.046 --> 00:30:09.336 A:middle
We also used the usual
properties of SceneKits

00:30:09.546 --> 00:30:17.206 A:middle
such as action, animations, and
everything you used to have.

00:30:17.266 --> 00:30:21.546 A:middle
It's a Swift application that
runs on macOS, iOS, and tvOS.

00:30:22.776 --> 00:30:27.386 A:middle
It's fully built with Swift,
about 700 lines of code.

00:30:28.466 --> 00:30:32.226 A:middle
We placed light probes
along the track to take

00:30:32.226 --> 00:30:34.906 A:middle
into account the
change of local light.

00:30:34.906 --> 00:30:38.836 A:middle
And pay attention to the
light that changes when we go

00:30:38.876 --> 00:30:42.686 A:middle
in the caves or in the tunnels.

00:30:42.686 --> 00:30:48.956 A:middle
We have also added new
effects such as motion blur

00:30:49.266 --> 00:30:52.846 A:middle
which you can see when Bub
catches a speed bonus just

00:30:53.526 --> 00:30:55.416 A:middle
like this.

00:30:55.626 --> 00:30:59.876 A:middle
We have a new HGI camera
which is why the light changes

00:30:59.876 --> 00:31:02.886 A:middle
and when there is a bright light
or when the environment changes.

00:30:59.876 --> 00:31:02.886 A:middle
and when there is a bright light
or when the environment changes.

00:31:04.006 --> 00:31:08.116 A:middle
We also use IDL's for
the light environment.

00:31:09.486 --> 00:31:12.806 A:middle
Again some new, some,
we love the motion blur.

00:31:14.276 --> 00:31:19.086 A:middle
You can also see bloom when
there are bright lights.

00:31:20.506 --> 00:31:23.946 A:middle
And all the materials, as
you see, are completely PBR

00:31:24.376 --> 00:31:26.356 A:middle
so we have free reflections
for the crystals,

00:31:26.606 --> 00:31:30.806 A:middle
and for all the bonuses,
and the gems.

00:31:30.806 --> 00:31:32.236 A:middle
Once again, you will
see the light change.

00:31:32.936 --> 00:31:35.836 A:middle
It's tone mapping
doing the work.

00:31:36.226 --> 00:31:36.536 A:middle
Thank you.

00:31:37.516 --> 00:31:41.646 A:middle
[ Applause ]

00:31:42.146 --> 00:31:43.786 A:middle
So, let's go to the slides now.

00:31:44.246 --> 00:31:47.046 A:middle
I will tell you a bit
more about this demo.

00:31:48.116 --> 00:31:50.736 A:middle
And the first thing
that we're very glad

00:31:50.736 --> 00:31:55.326 A:middle
to tell you this year is that as
usual the demo is a simple code.

00:31:55.446 --> 00:31:57.526 A:middle
Yes. Thank you.

00:31:58.106 --> 00:32:00.106 A:middle
[ Applause ]

00:31:58.106 --> 00:32:00.106 A:middle
[ Applause ]

00:32:00.196 --> 00:32:03.106 A:middle
You can download the code on
all the assets from the website,

00:32:03.106 --> 00:32:05.516 A:middle
from the developer
website, and play with it,

00:32:05.516 --> 00:32:09.286 A:middle
inspect the scene code,
see how we build it.

00:32:09.436 --> 00:32:12.036 A:middle
And it's 700 lines
of Swift code.

00:32:12.196 --> 00:32:13.816 A:middle
We think it's pretty
simple to understand

00:32:13.816 --> 00:32:17.156 A:middle
and we hope you really like
what you see and learn a couple

00:32:17.156 --> 00:32:18.576 A:middle
of things from the demo.

00:32:19.956 --> 00:32:23.286 A:middle
So this year we had to
decide if, for the demo,

00:32:23.286 --> 00:32:25.886 A:middle
we discussed it with
our artists.

00:32:26.016 --> 00:32:30.696 A:middle
And we produced some
drafts to take

00:32:30.696 --> 00:32:32.666 A:middle
into account the
design idea we had.

00:32:33.366 --> 00:32:35.616 A:middle
And once we agreed
on the design ideas

00:32:35.786 --> 00:32:39.876 A:middle
and the workflow the artists
started to model the world.

00:32:40.356 --> 00:32:44.966 A:middle
And as it's an interactive
process we really needed tools

00:32:44.966 --> 00:32:47.866 A:middle
to be able to ingest the
models as they were built

00:32:48.156 --> 00:32:49.736 A:middle
and to start programming
right away,

00:32:49.846 --> 00:32:52.956 A:middle
without waiting for
the final assets.

00:32:54.126 --> 00:32:56.096 A:middle
So we have a custom
tool written in SceneKit

00:32:56.096 --> 00:32:58.436 A:middle
that uses the full
power of SceneKit

00:32:58.686 --> 00:33:00.736 A:middle
in a common line application.

00:32:58.686 --> 00:33:00.736 A:middle
in a common line application.

00:33:00.876 --> 00:33:06.076 A:middle
To involve the tools from the
DAE files they convert the units

00:33:06.076 --> 00:33:09.226 A:middle
to meters and they also place
light probes automatically

00:33:09.226 --> 00:33:11.796 A:middle
in the scene because there
are more than 200 light probes

00:33:11.886 --> 00:33:14.766 A:middle
and we don't want, we
didn't want it to placed

00:33:14.766 --> 00:33:16.546 A:middle
in by hand each time
the scene changes.

00:33:17.076 --> 00:33:21.796 A:middle
We have used image
based lighting.

00:33:22.196 --> 00:33:25.126 A:middle
So we have a cube map
for the background image,

00:33:25.366 --> 00:33:27.496 A:middle
another cube map for the
lighting environment.

00:33:27.866 --> 00:33:29.996 A:middle
We used the lighting environment
to add the reflections.

00:33:30.446 --> 00:33:32.716 A:middle
And it's, as you've seen,
great for outdoor scenes.

00:33:34.376 --> 00:33:36.256 A:middle
We have also used light probes.

00:33:36.566 --> 00:33:40.076 A:middle
You can see these light probes
as they were displayed in Xcode

00:33:40.366 --> 00:33:41.896 A:middle
and we've highlighted them.

00:33:41.896 --> 00:33:43.256 A:middle
You see that only
from this point

00:33:43.256 --> 00:33:44.686 A:middle
of view there are
already many light probes

00:33:44.686 --> 00:33:46.996 A:middle
so you can imagine how many
there are for the whole scene.

00:33:47.606 --> 00:33:49.456 A:middle
So the custom tools placed them

00:33:49.456 --> 00:33:52.476 A:middle
in the environment
and compute them.

00:33:52.476 --> 00:33:56.296 A:middle
You can also do it by hand
in Xcode but, of course,

00:33:56.366 --> 00:33:59.576 A:middle
the more light probes you
have, the more tedious it gets.

00:34:00.426 --> 00:34:04.096 A:middle
It's essential for the inside
but it's also adds a nice touch

00:34:04.096 --> 00:34:06.096 A:middle
to the view in the outside

00:34:06.096 --> 00:34:08.916 A:middle
to detect small changes
in the scene.

00:34:09.326 --> 00:34:13.886 A:middle
We have added light
maps for the inside

00:34:13.976 --> 00:34:15.676 A:middle
because it overrides
the environment,

00:34:16.186 --> 00:34:19.536 A:middle
the lighting environment, which
is very important for the caves

00:34:19.536 --> 00:34:21.146 A:middle
as the light is very
different in the caves

00:34:21.146 --> 00:34:24.626 A:middle
so we have the probes and the
light maps that change the light

00:34:24.626 --> 00:34:26.556 A:middle
and the mood of this
part of the scene.

00:34:27.056 --> 00:34:30.806 A:middle
Of course we use
normal maps as usual

00:34:30.806 --> 00:34:33.996 A:middle
to add details to the models.

00:34:33.996 --> 00:34:36.556 A:middle
We also use baked
ambient occlusion maps

00:34:36.835 --> 00:34:40.866 A:middle
for a very much better
lighting view and rendering.

00:34:41.416 --> 00:34:45.906 A:middle
We have one big point
light to simulate the sun.

00:34:46.246 --> 00:34:48.775 A:middle
It's very high in the sky
in the scene and we use it

00:34:48.775 --> 00:34:51.876 A:middle
to create dynamic shadows and
to improve global lighting.

00:34:51.946 --> 00:34:56.146 A:middle
As I said, all the
materials you see

00:34:56.146 --> 00:34:59.406 A:middle
in the demo are 100%
physically based materials.

00:35:00.066 --> 00:35:04.296 A:middle
So we get the nice water palms
reflecting the environment

00:35:04.296 --> 00:35:05.216 A:middle
as well as the crystals.

00:35:06.126 --> 00:35:08.216 A:middle
Talking about crystals,
this is very simple material

00:35:08.216 --> 00:35:09.896 A:middle
that we built.

00:35:09.896 --> 00:35:12.776 A:middle
It has no texture map so
it's very simple to create.

00:35:13.236 --> 00:35:16.196 A:middle
It's fully metallic and
has no roughness at all.

00:35:16.536 --> 00:35:18.196 A:middle
And just a diffuse color.

00:35:18.406 --> 00:35:21.166 A:middle
So it's a very nice
way to create a gem

00:35:21.166 --> 00:35:23.246 A:middle
that reflects the
environment almost for free.

00:35:24.576 --> 00:35:27.546 A:middle
On the other side of the
spectrum you can see this tower

00:35:27.786 --> 00:35:30.756 A:middle
which is one object
with metallic parts

00:35:30.756 --> 00:35:32.536 A:middle
and nonmetallic parts.

00:35:32.696 --> 00:35:35.826 A:middle
We used, of course,
metalness and roughness maps,

00:35:36.036 --> 00:35:38.096 A:middle
texture maps to create that.

00:35:38.676 --> 00:35:40.676 A:middle
And, as you see, we
still have diffuse color

00:35:40.676 --> 00:35:44.956 A:middle
on the normal map to add detail.

00:35:45.086 --> 00:35:47.986 A:middle
So basically the demo used
all the new capabilities

00:35:47.986 --> 00:35:48.496 A:middle
of SceneKit.

00:35:49.506 --> 00:35:52.596 A:middle
Physically based shading,
all the SceneKit API

00:35:52.596 --> 00:35:53.856 A:middle
for materials, lights.

00:35:54.166 --> 00:35:55.866 A:middle
We used Xcode integration

00:35:56.636 --> 00:36:01.226 A:middle
and also new custom tools
we built for the work flow.

00:35:56.636 --> 00:36:01.226 A:middle
and also new custom tools
we built for the work flow.

00:36:01.616 --> 00:36:03.556 A:middle
And we think it's
a great showcase

00:36:03.556 --> 00:36:06.226 A:middle
for this year's capabilities
and a great sample code

00:36:06.226 --> 00:36:08.086 A:middle
for you to learn new things.

00:36:08.086 --> 00:36:10.126 A:middle
And we hope you will
really like it.

00:36:11.056 --> 00:36:12.366 A:middle
Thank you.

00:36:13.516 --> 00:36:16.936 A:middle
[ Applause ]

00:36:17.436 --> 00:36:21.706 A:middle
So, as you've seen, we've
quite upgraded what's happening

00:36:21.706 --> 00:36:24.176 A:middle
with materials and
light this year.

00:36:24.666 --> 00:36:28.626 A:middle
But we also had to change how
the camera behaves because now

00:36:28.626 --> 00:36:30.616 A:middle
that we have great
materials and light,

00:36:31.286 --> 00:36:32.926 A:middle
we also needed a
much better camera.

00:36:33.606 --> 00:36:38.006 A:middle
And now that we have light
that are realistic we needed

00:36:38.006 --> 00:36:40.926 A:middle
to have an HDR camera
or High Dynamic Range

00:36:41.786 --> 00:36:44.956 A:middle
because the usual camera used
to have Low Dynamic Range

00:36:45.336 --> 00:36:46.776 A:middle
which is 8-bits per components.

00:36:46.776 --> 00:36:51.086 A:middle
Now we have float per components
so we can have very small,

00:36:51.086 --> 00:36:55.436 A:middle
very unbright light such as a
candle or a light bulb going to,

00:36:55.436 --> 00:36:58.546 A:middle
for example, the sun which
is very, very bright light.

00:36:59.166 --> 00:37:01.536 A:middle
So this creates a very high
dynamic range that we need

00:36:59.166 --> 00:37:01.536 A:middle
So this creates a very high
dynamic range that we need

00:37:01.536 --> 00:37:04.356 A:middle
to remap to the dynamic
range of the screen.

00:37:04.916 --> 00:37:06.366 A:middle
And for that we used
tone mapping.

00:37:06.656 --> 00:37:10.236 A:middle
Tone mapping is the action of
remapping part of the rendering

00:37:10.236 --> 00:37:12.386 A:middle
to a smaller capability device.

00:37:14.536 --> 00:37:16.866 A:middle
So we need to enable
the HDR camera.

00:37:16.866 --> 00:37:18.476 A:middle
It's not automatically
set by default.

00:37:18.476 --> 00:37:20.646 A:middle
You can set that in
the API or in Xcode.

00:37:20.646 --> 00:37:23.266 A:middle
And you can configure
the tone mapping.

00:37:23.266 --> 00:37:25.266 A:middle
You can change the gray
point, the white point,

00:37:25.456 --> 00:37:27.666 A:middle
and the range you
want to expose.

00:37:28.026 --> 00:37:30.386 A:middle
And you can also frost
the exposure offset.

00:37:30.546 --> 00:37:33.776 A:middle
So, for example, you can have
this nice look of the scene,

00:37:33.776 --> 00:37:37.126 A:middle
but you can create a low key
one with underexposed rendering

00:37:37.476 --> 00:37:40.266 A:middle
or overexpose it, well, but
just by changing the offset.

00:37:40.266 --> 00:37:41.026 A:middle
It's very simple.

00:37:41.566 --> 00:37:45.646 A:middle
We have added also very
nice effects thanks

00:37:45.646 --> 00:37:46.906 A:middle
to the new HDR camera.

00:37:47.406 --> 00:37:49.266 A:middle
The first one is bloom.

00:37:49.696 --> 00:37:53.076 A:middle
Bloom is a way to simulate being
blinded by very bright lights

00:37:53.346 --> 00:37:55.086 A:middle
from the scene and reflections.

00:37:55.676 --> 00:38:00.636 A:middle
And it will be created
by bleeding the ejection

00:37:55.676 --> 00:38:00.636 A:middle
And it will be created
by bleeding the ejection

00:38:00.636 --> 00:38:02.236 A:middle
on the light on the
surrounding pixels.

00:38:02.776 --> 00:38:04.836 A:middle
So you can see in this example
it's a very nice effects

00:38:04.836 --> 00:38:08.516 A:middle
and we can see how it looks
in action with a reflection

00:38:08.516 --> 00:38:09.776 A:middle
on the roof of the tower.

00:38:09.776 --> 00:38:14.186 A:middle
I think it's a very nice way
to see how the light bleeds

00:38:14.276 --> 00:38:15.286 A:middle
on the surrounding pixels.

00:38:16.126 --> 00:38:18.706 A:middle
And it adds a very nice
touch to the rendering.

00:38:19.196 --> 00:38:23.936 A:middle
Next we have added motion blur
as you've seen in the demo.

00:38:24.686 --> 00:38:26.136 A:middle
So it smoothens the
camera movements.

00:38:27.016 --> 00:38:29.686 A:middle
And the thing is when
you just add motion blur

00:38:29.686 --> 00:38:31.116 A:middle
to the whole scene
this is what you get

00:38:31.216 --> 00:38:34.086 A:middle
so sometimes we don't
want to blur everything.

00:38:34.196 --> 00:38:36.816 A:middle
For example, we wanted
the badger and the cart

00:38:37.146 --> 00:38:39.296 A:middle
to be sharp and crisp.

00:38:39.696 --> 00:38:42.486 A:middle
So we have a new
API that enables us

00:38:42.486 --> 00:38:45.936 A:middle
to exclude some objects
from the motion blur

00:38:46.496 --> 00:38:50.436 A:middle
and the result gives you a nice,
crisp look for the subjects.

00:38:50.996 --> 00:38:57.086 A:middle
We have added a couple
of variations

00:38:57.086 --> 00:38:59.806 A:middle
from real life camera
lenses this year.

00:39:00.506 --> 00:39:02.126 A:middle
The first one is vignetting.

00:39:02.426 --> 00:39:07.076 A:middle
Vignetting is a way to, is an
aberration in real life lenses

00:39:07.326 --> 00:39:09.826 A:middle
that creates shades on
the corner of images.

00:39:10.426 --> 00:39:14.926 A:middle
So you can change it from
this image to this one.

00:39:15.126 --> 00:39:16.516 A:middle
And you can also
change environmentals

00:39:16.516 --> 00:39:19.496 A:middle
to change the filtering going
from the center of the image

00:39:19.496 --> 00:39:21.346 A:middle
to the border of the image.

00:39:22.466 --> 00:39:25.806 A:middle
Another aberration we have
simulated this year is

00:39:25.806 --> 00:39:26.396 A:middle
color fringe.

00:39:26.776 --> 00:39:29.066 A:middle
Color fringe is a defraction
of lights that happens

00:39:29.066 --> 00:39:32.016 A:middle
in real lenses, in the
glass of real lenses.

00:39:32.706 --> 00:39:37.596 A:middle
So it creates a magenta
and sienna shadow

00:39:37.596 --> 00:39:39.686 A:middle
of the lights in the rendering.

00:39:39.686 --> 00:39:41.066 A:middle
And we go from this
look to this look.

00:39:41.376 --> 00:39:42.866 A:middle
This is a very exaggerated one.

00:39:43.076 --> 00:39:45.496 A:middle
You can go more subtle
to get a nice look.

00:39:45.876 --> 00:39:50.336 A:middle
We have also added a very
nice way to change the mood

00:39:50.336 --> 00:39:51.856 A:middle
of your scene with
color correction.

00:39:52.336 --> 00:39:53.896 A:middle
So you can change
the saturation,

00:39:53.896 --> 00:39:56.166 A:middle
go for an almost
black and white look

00:39:56.406 --> 00:39:58.116 A:middle
or overblow the colors
if you want to.

00:39:58.116 --> 00:39:59.976 A:middle
And you can also change
the contrast of the scene.

00:40:00.046 --> 00:40:05.526 A:middle
So you can have the normal
look or a desaturated one,

00:40:07.046 --> 00:40:09.656 A:middle
or oversaturated image,
and change the contrast.

00:40:10.146 --> 00:40:17.666 A:middle
And the last one we have, it's
a really very great effect.

00:40:18.106 --> 00:40:19.276 A:middle
It's color grading.

00:40:19.276 --> 00:40:22.966 A:middle
Color grading enables us to
completely remap the colors

00:40:22.966 --> 00:40:25.256 A:middle
of the scene to completely
different colors.

00:40:25.706 --> 00:40:28.646 A:middle
So we use a strip
of a square image

00:40:28.836 --> 00:40:32.066 A:middle
to create the 3D color cube
that we use as a lookup table

00:40:32.626 --> 00:40:35.096 A:middle
to remap the original
colors in new ones.

00:40:35.096 --> 00:40:39.016 A:middle
For example, in this case would
remap normal color that you see

00:40:39.016 --> 00:40:41.476 A:middle
on the upper side
to a sepia tone.

00:40:41.726 --> 00:40:46.756 A:middle
So we get this looking like
that, like on, in sepia.

00:40:46.756 --> 00:40:49.686 A:middle
And it's very simple to use
and we think it's great.

00:40:49.686 --> 00:40:50.516 A:middle
It's a very nice look.

00:40:50.996 --> 00:40:55.066 A:middle
So that's all we have
for HDR camera this year.

00:40:55.336 --> 00:40:58.116 A:middle
We think it's a very
nice upgrade for cameras.

00:40:58.566 --> 00:41:00.146 A:middle
We can't wait to see
what you do with that.

00:40:58.566 --> 00:41:00.146 A:middle
We can't wait to see
what you do with that.

00:41:00.206 --> 00:41:03.776 A:middle
We got brand new effects that
are cumulative so you can use,

00:41:03.836 --> 00:41:05.126 A:middle
you don't have to
choose in between,

00:41:05.126 --> 00:41:06.516 A:middle
for example, bloom
or motion blur.

00:41:06.656 --> 00:41:08.166 A:middle
You can use all at
the same time.

00:41:08.366 --> 00:41:11.416 A:middle
Of course it has a cost but you
can really create a very nice

00:41:11.816 --> 00:41:14.866 A:middle
image and very cool
looking scenes.

00:41:15.876 --> 00:41:17.856 A:middle
So now I hand over
to Nick to tell you

00:41:17.856 --> 00:41:19.916 A:middle
about Model I/O improvements
for this year.

00:41:20.146 --> 00:41:20.736 A:middle
Thank you very much.

00:41:21.516 --> 00:41:27.556 A:middle
[ Applause ]

00:41:28.056 --> 00:41:28.646 A:middle
&gt;&gt; All right.

00:41:28.876 --> 00:41:29.396 A:middle
Hi, everybody.

00:41:29.826 --> 00:41:31.066 A:middle
So I'd just like to start

00:41:31.066 --> 00:41:35.056 A:middle
out by covering a little
bit that's improved on input

00:41:35.176 --> 00:41:37.986 A:middle
and output of models
and SceneKit.

00:41:39.166 --> 00:41:43.576 A:middle
So this year SceneKit
can import models

00:41:43.666 --> 00:41:46.356 A:middle
in their native authored
format, i.e.,

00:41:47.026 --> 00:41:50.876 A:middle
not necessarily just triangles
as before, but in the topology

00:41:51.106 --> 00:41:53.826 A:middle
of quadrilaterals or
arbitrary polygons

00:41:53.866 --> 00:41:57.056 A:middle
that the authors originally
created their content in.

00:41:57.606 --> 00:42:00.386 A:middle
SceneKit, if necessary, will
automatically triangulate

00:41:57.606 --> 00:42:00.386 A:middle
SceneKit, if necessary, will
automatically triangulate

00:42:00.386 --> 00:42:02.576 A:middle
for you in order to
perform rendering.

00:42:03.046 --> 00:42:05.546 A:middle
And the thing is if you want

00:42:05.546 --> 00:42:09.236 A:middle
to use our new tessellation
facilities you're going to want

00:42:09.306 --> 00:42:12.686 A:middle
to have accurate
tessellation for good shapes.

00:42:12.686 --> 00:42:13.886 A:middle
So you'll need to opt-in,

00:42:14.286 --> 00:42:16.396 A:middle
using the preserved
original topology flag.

00:42:16.856 --> 00:42:19.216 A:middle
That flag corresponds to
the same flag in Model I/O

00:42:19.496 --> 00:42:22.586 A:middle
and you bring in the
assets and you specify this.

00:42:22.586 --> 00:42:24.976 A:middle
It will preserve holes, and
creases, and all the things

00:42:24.976 --> 00:42:25.546 A:middle
that are important

00:42:25.546 --> 00:42:27.916 A:middle
for an accurate rendition
of the object.

00:42:29.066 --> 00:42:33.606 A:middle
Now this year we have improved
our subdivision algorithms

00:42:33.766 --> 00:42:37.636 A:middle
to the new system and
OpenSubdiv 3 from Pixar.

00:42:37.686 --> 00:42:39.156 A:middle
You can see in this example here

00:42:39.426 --> 00:42:41.966 A:middle
that previously we would
have imported as triangles

00:42:41.966 --> 00:42:45.426 A:middle
and when you do the tessellation
that box which we want

00:42:45.426 --> 00:42:47.336 A:middle
to smoothly subdivide comes
out a little bit lumpy.

00:42:47.966 --> 00:42:50.496 A:middle
Now if you bring it in
preserving its topology,

00:42:50.846 --> 00:42:57.116 A:middle
you can see that the quads go
to a uniformly round surface

00:42:57.116 --> 00:42:58.126 A:middle
and it looks very nice.

00:42:58.596 --> 00:43:00.906 A:middle
So this kind of facility
is great

00:42:58.596 --> 00:43:00.906 A:middle
So this kind of facility
is great

00:43:01.086 --> 00:43:04.646 A:middle
for having lightweight objects
that can scale the resolution

00:43:04.966 --> 00:43:06.396 A:middle
to your scene, and
so on and so forth.

00:43:06.916 --> 00:43:11.156 A:middle
Now the other aspect of
input and output that I want

00:43:11.156 --> 00:43:15.336 A:middle
to emphasize is that last year
we introduced physically based

00:43:15.506 --> 00:43:17.106 A:middle
materials and things
to Model I/O.

00:43:17.406 --> 00:43:21.296 A:middle
They bridge naturally onto
all of the SceneKit stuff.

00:43:21.296 --> 00:43:24.516 A:middle
So if you have a high
dynamic range camera specified

00:43:24.936 --> 00:43:26.886 A:middle
in Model I/O, it
will come across

00:43:27.156 --> 00:43:28.616 A:middle
and without losing
any attributes.

00:43:30.436 --> 00:43:33.016 A:middle
So on to Model I/O.

00:43:33.016 --> 00:43:34.066 A:middle
Yeah. Quick refresher.

00:43:34.826 --> 00:43:37.806 A:middle
As it says on the [inaudible],
it's for input and output

00:43:37.806 --> 00:43:42.226 A:middle
of models onto our
frameworks and systems.

00:43:42.306 --> 00:43:45.586 A:middle
Need this so obviously to
bring your data from your apps

00:43:45.586 --> 00:43:48.596 A:middle
where you've created
things, translate objects

00:43:48.646 --> 00:43:50.706 A:middle
between frameworks,
such as SceneKit

00:43:50.706 --> 00:43:52.016 A:middle
and MetalKit, and so on.

00:43:52.526 --> 00:43:56.656 A:middle
And we provide support for a
number of standard file formats.

00:43:57.066 --> 00:44:01.386 A:middle
Now file formats are the
method by which things come

00:43:57.066 --> 00:44:01.386 A:middle
Now file formats are the
method by which things come

00:44:01.386 --> 00:44:03.366 A:middle
from your art program
into your tools.

00:44:03.366 --> 00:44:05.296 A:middle
And historically the formats

00:44:05.446 --> 00:44:08.026 A:middle
that we had have been
quite narrowly specialized.

00:44:08.216 --> 00:44:10.606 A:middle
For example, they might
just bring in a model.

00:44:10.606 --> 00:44:12.496 A:middle
Or they just might
bring in bulk data.

00:44:12.996 --> 00:44:16.566 A:middle
Now really exciting thing that
I'm bringing to you this year,

00:44:16.846 --> 00:44:21.206 A:middle
we're bringing to you, is in
conjunction with our friends

00:44:21.206 --> 00:44:23.406 A:middle
at Pixar we're introducing
support

00:44:23.716 --> 00:44:25.436 A:middle
for Universal Scene Description.

00:44:26.476 --> 00:44:32.116 A:middle
Now Universal Scene Description
is a new open standard.

00:44:32.796 --> 00:44:36.586 A:middle
And the thing that's really
interesting and exciting

00:44:36.586 --> 00:44:41.946 A:middle
about it is it's not only
a file system and a format

00:44:42.236 --> 00:44:45.666 A:middle
that can be either easy to
read in ASCII or efficient

00:44:45.836 --> 00:44:47.116 A:middle
for loading in binary

00:44:47.666 --> 00:44:51.086 A:middle
but it also includes a
scene composition engine.

00:44:51.586 --> 00:44:53.096 A:middle
That really distinguishes it

00:44:53.326 --> 00:44:55.246 A:middle
from any other format
that's come before.

00:44:55.786 --> 00:44:58.676 A:middle
It embodies years of practical
production experience.

00:44:58.676 --> 00:45:00.676 A:middle
Pixar uses this for their films.

00:44:58.676 --> 00:45:00.676 A:middle
Pixar uses this for their films.

00:45:01.026 --> 00:45:03.436 A:middle
And "Finding Dory,"
coming out tomorrow,

00:45:03.436 --> 00:45:06.826 A:middle
is rendered entirely
from USD files.

00:45:07.426 --> 00:45:10.866 A:middle
Now USD has data types that
are specialized for scenes.

00:45:11.326 --> 00:45:14.366 A:middle
And it introduces, once
again unique to this format

00:45:14.436 --> 00:45:17.316 A:middle
as an open format,
is file layering

00:45:17.716 --> 00:45:19.506 A:middle
to enable concurrent workflows.

00:45:19.926 --> 00:45:23.746 A:middle
Now concurrent workflows is
kind of an awesome thing.

00:45:25.186 --> 00:45:29.166 A:middle
Here is a representation
that might get

00:45:29.166 --> 00:45:32.136 A:middle
in Universal Scene Description
for a typical scene in a film.

00:45:32.716 --> 00:45:36.946 A:middle
We have a shot layer, the
layer, the shot is layered

00:45:37.166 --> 00:45:39.496 A:middle
from components,
background, characters.

00:45:39.496 --> 00:45:42.046 A:middle
The characters themselves might
be made out of many components.

00:45:42.616 --> 00:45:44.966 A:middle
Now you can see there's
layers in that image

00:45:44.966 --> 00:45:45.926 A:middle
of a shot layer there.

00:45:46.166 --> 00:45:49.696 A:middle
That's because not only can you
just create the scene with all

00:45:49.696 --> 00:45:53.036 A:middle
of these things composed,
but you can make variations.

00:45:53.106 --> 00:45:56.316 A:middle
And so the scene description
will know that this is

00:45:56.316 --> 00:45:58.726 A:middle
like take three, maybe
the characters come

00:45:58.726 --> 00:46:00.426 A:middle
in a little bit faster
or a little bit slower.

00:45:58.726 --> 00:46:00.426 A:middle
in a little bit faster
or a little bit slower.

00:46:00.836 --> 00:46:03.396 A:middle
And you can have all of
those variations embodied

00:46:03.396 --> 00:46:05.726 A:middle
in one file and for review.

00:46:06.836 --> 00:46:11.646 A:middle
Now another really unique aspect

00:46:12.186 --> 00:46:15.146 A:middle
to Universal Scene Description
is, as far as I know,

00:46:15.146 --> 00:46:16.696 A:middle
it's the only open
source file format

00:46:17.086 --> 00:46:20.856 A:middle
that allows the specification
of classes

00:46:20.856 --> 00:46:22.316 A:middle
in variations of objects.

00:46:22.776 --> 00:46:26.006 A:middle
Now, you can imagine that
you might have some sort

00:46:26.006 --> 00:46:27.806 A:middle
of a situation where you
have lots of monsters,

00:46:27.806 --> 00:46:29.256 A:middle
and they all want to go
to university and stuff,

00:46:29.256 --> 00:46:30.096 A:middle
and there's like books.

00:46:30.586 --> 00:46:34.336 A:middle
Now in a traditional
workflow you're probably going

00:46:34.336 --> 00:46:37.136 A:middle
to find yourself creating
your books and your program,

00:46:37.236 --> 00:46:39.096 A:middle
slaving out millions and
millions of different files

00:46:39.096 --> 00:46:41.596 A:middle
for every little book, and then
placing them on your bookcase,

00:46:41.596 --> 00:46:44.076 A:middle
and getting it out for
rendering like that.

00:46:44.606 --> 00:46:46.436 A:middle
Now that is tedious.

00:46:46.646 --> 00:46:49.946 A:middle
In games you have things
like teams of characters,

00:46:49.946 --> 00:46:52.796 A:middle
maybe they all differ in
like hairstyle and shirt.

00:46:53.196 --> 00:46:55.586 A:middle
And you might have to
bake those all out.

00:46:55.586 --> 00:46:59.586 A:middle
Now Universal Scene Description
allows you to specify

00:46:59.586 --> 00:47:01.946 A:middle
in a single file
classes of objects.

00:46:59.586 --> 00:47:01.946 A:middle
in a single file
classes of objects.

00:47:02.016 --> 00:47:08.116 A:middle
So the class represented
here obviously is a book.

00:47:08.116 --> 00:47:13.446 A:middle
So the file can represent
many different geometrical

00:47:13.446 --> 00:47:15.066 A:middle
interpretations of books.

00:47:15.386 --> 00:47:17.006 A:middle
Like you obviously
got a wide one,

00:47:17.006 --> 00:47:18.866 A:middle
and a tall one, and a thick one.

00:47:19.576 --> 00:47:22.836 A:middle
And when you instantiate
your book

00:47:22.836 --> 00:47:25.736 A:middle
into the bookcase you can tell
Universal Scene Description,

00:47:26.016 --> 00:47:29.546 A:middle
"I want this book and I want it
to be this wide and that tall."

00:47:29.546 --> 00:47:31.696 A:middle
And it will provide the
information that you need

00:47:31.696 --> 00:47:35.026 A:middle
to instantiate that
into your runtime,

00:47:35.026 --> 00:47:36.716 A:middle
or your shot, or whatever.

00:47:39.266 --> 00:47:41.706 A:middle
The variations that you can have

00:47:41.706 --> 00:47:46.126 A:middle
in a single file can
vary along many axes.

00:47:46.486 --> 00:47:48.876 A:middle
In this case I'm changing
some shading properties.

00:47:48.996 --> 00:47:51.146 A:middle
So previously I had
all those books.

00:47:51.146 --> 00:47:52.826 A:middle
I can make them whatever
color I want as well.

00:47:53.356 --> 00:47:58.296 A:middle
And the magic of that is I place
the book and when I finally ask,

00:47:58.426 --> 00:48:00.796 A:middle
for the purposes of rendering,
"What color is the book

00:47:58.426 --> 00:48:00.796 A:middle
for the purposes of rendering,
"What color is the book

00:48:00.796 --> 00:48:02.436 A:middle
on the shelf in this place?"

00:48:02.686 --> 00:48:05.596 A:middle
it will work out,
according to all of the logic

00:48:05.806 --> 00:48:09.466 A:middle
about scene composition that
file and the engine embodies,

00:48:10.066 --> 00:48:11.896 A:middle
the way that it should
be represented.

00:48:13.116 --> 00:48:16.796 A:middle
Now beyond that you can
also represent a simple,

00:48:16.976 --> 00:48:19.626 A:middle
in a single file,
different capabilities.

00:48:19.946 --> 00:48:23.656 A:middle
So what I'm showing here is
that on the very low end,

00:48:23.656 --> 00:48:27.806 A:middle
like say for a wearable device,
I might have a low poly version.

00:48:27.916 --> 00:48:31.566 A:middle
The same file can have one
that's suitable for use

00:48:32.396 --> 00:48:35.266 A:middle
in the highest rendering
capability that you've got.

00:48:36.136 --> 00:48:40.986 A:middle
Now we've integrated Universal
Scene Description across all

00:48:40.986 --> 00:48:42.206 A:middle
of our systems and frameworks.

00:48:42.866 --> 00:48:46.476 A:middle
So at a very nuts
and bolts level.

00:48:46.686 --> 00:48:49.016 A:middle
If you import a Universal
Scene Description file

00:48:49.136 --> 00:48:51.886 A:middle
into Model I/O -- I don't expect
you to be able to read that --

00:48:52.036 --> 00:48:53.976 A:middle
you're going to be
able to get a hierarchy

00:48:54.226 --> 00:48:56.706 A:middle
of familiar Model I/O objects
with all the properties

00:48:56.706 --> 00:48:59.056 A:middle
that were in the Universal
Scene Description file exactly

00:48:59.056 --> 00:49:02.116 A:middle
represented so that you can
use our tools that are provided

00:48:59.056 --> 00:49:02.116 A:middle
represented so that you can
use our tools that are provided

00:49:02.116 --> 00:49:05.606 A:middle
in Model I/O, such as
placing light probes

00:49:05.606 --> 00:49:08.056 A:middle
and evaluating them
towards optimal positions.

00:49:10.286 --> 00:49:15.806 A:middle
However, beyond that, let's say
that you're working on a project

00:49:15.806 --> 00:49:18.256 A:middle
and your art team just gave
you a folder full of stuff.

00:49:19.136 --> 00:49:22.746 A:middle
You can just open that window
in the binder with all the stuff

00:49:22.746 --> 00:49:25.846 A:middle
that you just got and Finder
will prepare thumbnails for you

00:49:25.846 --> 00:49:26.916 A:middle
so you can see what's there.

00:49:27.326 --> 00:49:29.166 A:middle
And Quick Look works
with it as well.

00:49:29.166 --> 00:49:32.016 A:middle
So you can select one of these
things, whack the spacebar,

00:49:32.016 --> 00:49:34.486 A:middle
and it'll pop up and
you can tumble it.

00:49:34.486 --> 00:49:38.156 A:middle
Now, of course Quick Look
shows you one thing at a time.

00:49:38.366 --> 00:49:40.916 A:middle
If you want to hold
things up for comparison

00:49:40.916 --> 00:49:44.086 A:middle
or maybe your USD file has
multiple cameras or something

00:49:44.086 --> 00:49:46.696 A:middle
in it that you want to inspect
individually, you can bring

00:49:46.696 --> 00:49:50.506 A:middle
that up in preview and Universal
Scene Description is working

00:49:50.506 --> 00:49:50.976 A:middle
great there.

00:49:51.056 --> 00:49:55.896 A:middle
And if you're bringing
Universal Scene Description file

00:49:55.896 --> 00:50:00.786 A:middle
into Xcode, it imports via
Model I/O into SceneKit

00:49:55.896 --> 00:50:00.786 A:middle
into Xcode, it imports via
Model I/O into SceneKit

00:50:00.786 --> 00:50:03.126 A:middle
with an exact representation
of what was in that file

00:50:03.266 --> 00:50:06.496 A:middle
so that you can inspect it
in the hierarchy browser,

00:50:06.686 --> 00:50:07.896 A:middle
you can look at the properties,

00:50:08.126 --> 00:50:11.086 A:middle
you can move things
around, you can add cameras.

00:50:11.086 --> 00:50:13.026 A:middle
You make edit scenes,
send it back out to USD.

00:50:13.026 --> 00:50:16.576 A:middle
And then you can send it back
to your artists and say, "Hey,

00:50:16.576 --> 00:50:17.966 A:middle
you know, I've got
some edits for you.

00:50:17.966 --> 00:50:19.336 A:middle
Can you, do you know the rep?"

00:50:20.526 --> 00:50:25.496 A:middle
So finally, it's
incorporated into SceneKit.

00:50:25.496 --> 00:50:27.806 A:middle
And so friends at Pixar supplied

00:50:27.806 --> 00:50:30.056 A:middle
up with Mr. Ray from
"Finding Dory."

00:50:30.616 --> 00:50:34.126 A:middle
And this is just stock
out-of-the-box SceneKit

00:50:34.126 --> 00:50:36.186 A:middle
with the new physically
based shading

00:50:36.296 --> 00:50:37.566 A:middle
that you just heard all about.

00:50:37.996 --> 00:50:42.786 A:middle
And we're just playing the
movie asset with three seconds

00:50:42.786 --> 00:50:45.326 A:middle
of animation, and it
looks really, really nice.

00:50:46.856 --> 00:50:51.366 A:middle
So plugins are the thing that
you're going to need in order

00:50:51.366 --> 00:50:53.626 A:middle
to incorporate Universal Scene
Description into your workflows.

00:50:54.086 --> 00:50:57.756 A:middle
So that will enable the motion
of your assets between people,

00:50:57.946 --> 00:51:00.546 A:middle
your content creation programs,
the apps that you make.

00:50:57.946 --> 00:51:00.546 A:middle
your content creation programs,
the apps that you make.

00:51:01.146 --> 00:51:04.666 A:middle
Now the plugins, and the
open source information,

00:51:04.836 --> 00:51:07.646 A:middle
and all availability,
and schedules, et cetera,

00:51:07.856 --> 00:51:12.296 A:middle
are available on the openusd.org
website which I encourage you

00:51:12.296 --> 00:51:14.536 A:middle
to go visit to find out
how you can use this

00:51:14.886 --> 00:51:16.766 A:middle
in your pipelines and processes.

00:51:17.246 --> 00:51:19.976 A:middle
So that's Universal
Scene Description.

00:51:20.516 --> 00:51:27.616 A:middle
[ Applause ]

00:51:28.116 --> 00:51:29.096 A:middle
So a quick summary.

00:51:29.936 --> 00:51:33.246 A:middle
SceneKit is available
across our entire ecosystem

00:51:33.346 --> 00:51:34.516 A:middle
on every platform.

00:51:34.786 --> 00:51:35.916 A:middle
It's kind of an amazing thing.

00:51:36.456 --> 00:51:38.796 A:middle
We have physically based
rendering for any state

00:51:38.796 --> 00:51:42.686 A:middle
of the art looks and state
of the art representation,

00:51:42.736 --> 00:51:43.696 A:middle
just a beautiful look.

00:51:43.916 --> 00:51:47.726 A:middle
And HDR cameras and
effects give you control

00:51:47.726 --> 00:51:49.376 A:middle
over how things are represented

00:51:49.376 --> 00:51:50.996 A:middle
and how they look,
really high quality.

00:51:51.676 --> 00:51:55.726 A:middle
And we've got support for
Universal Scene Description

00:51:56.136 --> 00:51:59.426 A:middle
which we're really happy to
get behind and think it's going

00:51:59.426 --> 00:52:01.466 A:middle
to make a big difference
in workflows

00:51:59.426 --> 00:52:01.466 A:middle
to make a big difference
in workflows

00:52:02.046 --> 00:52:06.636 A:middle
in coming days and months.

00:52:06.766 --> 00:52:08.946 A:middle
More information on this
session which was 609,

00:52:09.086 --> 00:52:10.806 A:middle
is available on the site.

00:52:13.296 --> 00:52:17.186 A:middle
There's related sessions:
Visual Debugging with Xcode,

00:52:17.186 --> 00:52:19.196 A:middle
Wide Color, Game
Technologies and Apple Watch"

00:52:19.316 --> 00:52:21.916 A:middle
that you can attend
today and tomorrow.

00:52:22.216 --> 00:52:23.466 A:middle
And thank you very much.

00:52:24.516 --> 00:52:27.500 A:middle
[ Applause ]
