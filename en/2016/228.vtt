WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:17.500 A:middle
[ Music ]

00:00:27.516 --> 00:00:35.546 A:middle
[ Applause ]

00:00:36.046 --> 00:00:39.476 A:middle
&gt;&gt; Good afternoon and
welcome to a peek at 3D Touch,

00:00:39.876 --> 00:00:42.016 A:middle
I'm Tyler Fox and
later I'll be joined

00:00:42.016 --> 00:00:43.546 A:middle
by my colleague Peter Hajas.

00:00:43.936 --> 00:00:46.106 A:middle
We're both engineers
on the UIKit Team

00:00:46.366 --> 00:00:49.356 A:middle
and we're really excited
to tell you all today,

00:00:49.466 --> 00:00:51.166 A:middle
how you can adopt 3D Touch

00:00:51.216 --> 00:00:54.096 A:middle
to take your app's user
experience to the next level.

00:00:54.096 --> 00:00:58.366 A:middle
We'd like to start
today by reviewing some

00:00:58.366 --> 00:01:00.116 A:middle
of the fundamentals of 3D Touch


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.366 --> 00:01:00.116 A:middle
of the fundamentals of 3D Touch

00:01:00.116 --> 00:01:02.896 A:middle
and showing you how it
shows up across the system.

00:01:04.046 --> 00:01:08.156 A:middle
From there, we'll talk about
Home Screen Quick Actions.

00:01:08.926 --> 00:01:11.446 A:middle
Home Screen Quick Actions
are one of the easiest ways

00:01:11.446 --> 00:01:13.916 A:middle
that you can add 3D
Touch to your apps today.

00:01:14.846 --> 00:01:17.266 A:middle
They let users jump straight
from the Home screen,

00:01:17.616 --> 00:01:20.416 A:middle
right to those key
activities in your application.

00:01:21.936 --> 00:01:25.266 A:middle
From there, we'll talk
about Peek and Pop.

00:01:25.876 --> 00:01:30.046 A:middle
Peek and Pop are a seamless
way for users to preview

00:01:30.186 --> 00:01:32.606 A:middle
and navigate content
in your applications.

00:01:33.476 --> 00:01:36.626 A:middle
We think that most apps will
benefit greatly from adding,

00:01:36.626 --> 00:01:40.086 A:middle
for adding support with Peek
and Pop to your content.

00:01:41.236 --> 00:01:43.806 A:middle
Finally, we're excited
to tell you all

00:01:43.806 --> 00:01:48.146 A:middle
about UIPreviewInteraction,
this is brand new API in iOS X

00:01:48.146 --> 00:01:52.136 A:middle
that allows you to make 3D
Touch unique to your apps.

00:01:52.916 --> 00:01:55.646 A:middle
It's for those of you
that want advanced control

00:01:56.106 --> 00:01:57.666 A:middle
of the 3D Touch interaction

00:01:57.946 --> 00:02:00.856 A:middle
and it lets you use the
same force processing


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:57.946 --> 00:02:00.856 A:middle
and it lets you use the
same force processing

00:02:01.136 --> 00:02:04.196 A:middle
that we've honed for Peek
and Pop, but bringing

00:02:04.196 --> 00:02:06.066 A:middle
in your own custom
user interface.

00:02:06.426 --> 00:02:08.476 A:middle
It's really great and we can't
wait to tell you all about it.

00:02:09.226 --> 00:02:14.466 A:middle
So with that, let's get started,
by talking about 3D Touch.

00:02:16.296 --> 00:02:20.366 A:middle
Devices that support 3D Touch
have a force sensitive display

00:02:21.066 --> 00:02:22.656 A:middle
that precisely measures
the pressure

00:02:22.656 --> 00:02:24.476 A:middle
of touches on the screen.

00:02:25.536 --> 00:02:29.166 A:middle
Now iOS has always let users
directly manipulate the content

00:02:29.166 --> 00:02:30.266 A:middle
on the user interface.

00:02:31.306 --> 00:02:32.666 A:middle
This has been a hallmark

00:02:32.916 --> 00:02:34.726 A:middle
since the original
iPhone was introduced

00:02:35.356 --> 00:02:36.666 A:middle
with its multi-touch display.

00:02:37.446 --> 00:02:41.496 A:middle
But 3D Touch extends this
even further, allowing users

00:02:41.566 --> 00:02:45.276 A:middle
to connect even more closely
to their content on the screen.

00:02:45.826 --> 00:02:50.386 A:middle
Let's take a look at some of
the ways that 3D Touch shows

00:02:50.386 --> 00:02:53.636 A:middle
up across the operating system,
starting with the Home screen.

00:02:54.666 --> 00:02:56.256 A:middle
When you press on an app icon,

00:02:56.806 --> 00:02:59.336 A:middle
we reveal the Home
Screen Quick Actions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.406 --> 00:03:03.616 A:middle
As you can see here with Camera,
these let you jump straight

00:03:03.616 --> 00:03:06.046 A:middle
into some of the key
activities in each app

00:03:06.486 --> 00:03:07.496 A:middle
that you come to perform.

00:03:08.076 --> 00:03:10.696 A:middle
For example, taking a
selfie in the camera app,

00:03:11.106 --> 00:03:14.416 A:middle
using the front facing camera,
or taking a regular photo

00:03:14.416 --> 00:03:15.626 A:middle
with the rear facing camera,

00:03:16.046 --> 00:03:18.376 A:middle
recording video or
a Slow-mo video.

00:03:19.646 --> 00:03:24.986 A:middle
Now, new in iOS X, if your app
provides a widget it will also

00:03:24.986 --> 00:03:27.856 A:middle
show right alongside the
Home Screen Quick Actions

00:03:28.146 --> 00:03:30.396 A:middle
when the user 3D
touches on your app icon.

00:03:30.986 --> 00:03:34.066 A:middle
And something else to note
is that while you're pressing

00:03:34.066 --> 00:03:35.436 A:middle
on each of this app icons,

00:03:35.746 --> 00:03:38.826 A:middle
the device is playing haptic
feedback to let you know

00:03:38.826 --> 00:03:40.126 A:middle
when you've reached
the threshold

00:03:40.416 --> 00:03:42.416 A:middle
where the quick actions
will spring open.

00:03:42.986 --> 00:03:47.996 A:middle
Now let's move into
messages, to take a look

00:03:48.366 --> 00:03:50.746 A:middle
at an example of Peek and Pop.

00:03:52.196 --> 00:03:55.126 A:middle
Here in messages, you can
see I've received a photo

00:03:55.276 --> 00:03:56.736 A:middle
in a conversation with a friend.

00:03:57.656 --> 00:04:00.566 A:middle
If I start to lightly apply
pressure to that photo,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.656 --> 00:04:00.566 A:middle
If I start to lightly apply
pressure to that photo,

00:04:01.066 --> 00:04:05.406 A:middle
I can peek into it to
reveal a nice large preview

00:04:05.406 --> 00:04:06.196 A:middle
of that content.

00:04:07.306 --> 00:04:10.866 A:middle
Then if I continue to apply
pressure, I'll pop straight

00:04:10.866 --> 00:04:14.516 A:middle
to that photo, which takes it
full screen and lets me interact

00:04:14.516 --> 00:04:16.656 A:middle
with it, just like
I had tapped on it.

00:04:16.966 --> 00:04:20.466 A:middle
Peek and Pop is really
nice because it allows you

00:04:20.466 --> 00:04:23.646 A:middle
to preview content and
perhaps change your mind

00:04:24.066 --> 00:04:26.386 A:middle
and release your touch
without actually having

00:04:26.386 --> 00:04:30.056 A:middle
to go tap the back
button and navigate back.

00:04:30.056 --> 00:04:31.746 A:middle
Now, one thing to
note here is that,

00:04:31.746 --> 00:04:35.476 A:middle
as we're crossing these two
different thresholds for Peek

00:04:35.476 --> 00:04:39.306 A:middle
and Pop, the device, again,
is playing haptic feedback,

00:04:39.746 --> 00:04:42.636 A:middle
to let you know when you've
reached these two thresholds.

00:04:43.096 --> 00:04:45.606 A:middle
That's Peek and Pop.

00:04:46.496 --> 00:04:48.736 A:middle
Let's take a look now at Mail,

00:04:48.796 --> 00:04:53.876 A:middle
at some of the interesting
pieces of the same interaction.

00:04:54.306 --> 00:04:57.056 A:middle
I want you to notice
how fully interactive

00:04:57.226 --> 00:05:00.106 A:middle
and interruptible 3D Touch is.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:57.226 --> 00:05:00.106 A:middle
and interruptible 3D Touch is.

00:05:00.606 --> 00:05:02.636 A:middle
As I modulate the
pressure of the touch

00:05:02.636 --> 00:05:04.496 A:middle
on the screen, as
you'll see here.

00:05:05.196 --> 00:05:08.616 A:middle
We're using blur and scale
effects to let you know

00:05:08.616 --> 00:05:10.916 A:middle
that you can continue to
interact with this content.

00:05:11.416 --> 00:05:12.786 A:middle
And note how fluid

00:05:12.786 --> 00:05:14.976 A:middle
and responsive the
entire interaction is.

00:05:15.476 --> 00:05:17.226 A:middle
This is one of the
hallmark features

00:05:17.566 --> 00:05:20.976 A:middle
that differentiates 3D
Touch from traditional touch

00:05:20.976 --> 00:05:22.596 A:middle
and gesture based interactions.

00:05:23.796 --> 00:05:25.366 A:middle
So you might be wondering,

00:05:26.266 --> 00:05:28.646 A:middle
why should I support 3D
Touch in my application?

00:05:29.266 --> 00:05:32.596 A:middle
Well one of the best
uses for 3D Touch is

00:05:32.596 --> 00:05:36.426 A:middle
that it can quickly accelerate
access to existing features

00:05:36.426 --> 00:05:37.906 A:middle
that your app already provides.

00:05:38.526 --> 00:05:41.466 A:middle
You saw a great example of this
with Home Screen Quick Actions,

00:05:41.876 --> 00:05:44.226 A:middle
letting users go straight
into those screens

00:05:44.226 --> 00:05:48.216 A:middle
within your app just like deep
links and let them get straight

00:05:48.216 --> 00:05:50.056 A:middle
into the action that
they're trying to perform.

00:05:51.366 --> 00:05:54.526 A:middle
But another really great
thing about 3D Touch is

00:05:54.526 --> 00:05:58.436 A:middle
that it makes possible, brand
new immersive interactions

00:05:58.436 --> 00:06:00.016 A:middle
that were never before possible.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.436 --> 00:06:00.016 A:middle
that were never before possible.

00:06:00.886 --> 00:06:04.176 A:middle
We're going to show you a
great example of this later on,

00:06:04.536 --> 00:06:07.896 A:middle
when we go through this new
UIPreviewInteraction API.

00:06:09.676 --> 00:06:14.396 A:middle
Finally, we've adopted 3D Touch
throughout the system in iOS X.

00:06:14.986 --> 00:06:18.606 A:middle
And so users expect all of your
apps to support it as well.

00:06:23.016 --> 00:06:24.716 A:middle
Let's go ahead and talk

00:06:24.716 --> 00:06:27.016 A:middle
about how you can start
adopting 3D Touch today

00:06:27.096 --> 00:06:28.656 A:middle
with Home Screen Quick Actions.

00:06:28.986 --> 00:06:33.406 A:middle
And to do this, I'd like to
introduce you to AppChat.

00:06:34.426 --> 00:06:36.796 A:middle
AppChat is a sample app
that we've been working

00:06:36.796 --> 00:06:39.376 A:middle
on to highlight some
of the great features

00:06:39.376 --> 00:06:41.726 A:middle
of 3D Touch in our application.

00:06:42.536 --> 00:06:45.276 A:middle
Here you can see that 3D Touch,

00:06:45.406 --> 00:06:48.596 A:middle
sorry AppChat is an [inaudible]
messaging application.

00:06:49.166 --> 00:06:52.316 A:middle
You can take a photo and send
it to your friends as a chat

00:06:53.036 --> 00:06:54.886 A:middle
and here you can see
I've received a list

00:06:54.886 --> 00:06:56.426 A:middle
of different chats
from my friends.

00:06:56.426 --> 00:07:00.836 A:middle
I can tap on anyone of them, and
view those chats full screen.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:56.426 --> 00:07:00.836 A:middle
I can tap on anyone of them, and
view those chats full screen.

00:07:03.756 --> 00:07:05.086 A:middle
Just like that.

00:07:05.556 --> 00:07:08.476 A:middle
AppChat is a very
familiar UIKit application.

00:07:09.296 --> 00:07:12.146 A:middle
And we'll show you the different
ways that we've added support

00:07:12.146 --> 00:07:16.586 A:middle
for 3D Touch to it, starting
with Home Screen Quick Actions.

00:07:17.276 --> 00:07:19.366 A:middle
So when you press on
the AppChat app icon,

00:07:19.836 --> 00:07:22.056 A:middle
we'll reveal some Home Screen
Quick Actions for AppChat.

00:07:23.186 --> 00:07:25.406 A:middle
You'll note, I can choose
to create a new chat

00:07:25.406 --> 00:07:27.406 A:middle
that will open the Camera
so I can take a photo

00:07:27.406 --> 00:07:29.456 A:middle
and then choose one of
my friends to send it to.

00:07:30.426 --> 00:07:32.296 A:middle
But alternatively,
I can choose one

00:07:32.296 --> 00:07:36.306 A:middle
of these bottom 3 quick
actions which are quick actions

00:07:36.306 --> 00:07:38.766 A:middle
that will let me send
a chat directly to one

00:07:38.766 --> 00:07:40.186 A:middle
of my top three friends.

00:07:40.506 --> 00:07:43.006 A:middle
The friends that I communicate
with most in AppChat.

00:07:43.546 --> 00:07:46.726 A:middle
So there are actually
two different types

00:07:46.836 --> 00:07:48.166 A:middle
of Home Screen Quick Actions.

00:07:48.646 --> 00:07:49.596 A:middle
Let's talk about them now.

00:07:50.766 --> 00:07:56.246 A:middle
The first type is Static Quick
Cctions, these are specified

00:07:56.246 --> 00:07:58.026 A:middle
by your app at build time.

00:07:58.836 --> 00:08:00.606 A:middle
And they're great
for fixed actions


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.836 --> 00:08:00.606 A:middle
And they're great
for fixed actions

00:08:00.606 --> 00:08:02.356 A:middle
that are always available
in your app.

00:08:02.936 --> 00:08:07.486 A:middle
For example with AppChat, we
have the New Chat Quick Action.

00:08:07.796 --> 00:08:09.296 A:middle
I can always create a new chat

00:08:09.296 --> 00:08:11.026 A:middle
and then send it to
one of my friends.

00:08:12.166 --> 00:08:15.046 A:middle
On the other hand, we have
Dynamic Quick Actions.

00:08:17.036 --> 00:08:19.806 A:middle
Dynamic Quick Actions are also
great because they allow you

00:08:19.806 --> 00:08:21.866 A:middle
to customize and
tailor the quick actions

00:08:21.866 --> 00:08:22.686 A:middle
that are shown to the user.

00:08:22.686 --> 00:08:26.106 A:middle
But let's take a quick look
at Static Quick Actions first.

00:08:26.986 --> 00:08:30.966 A:middle
Static Quick Actions are defined
in your apps info.plist file.

00:08:32.756 --> 00:08:34.645 A:middle
As such they're available
as soon

00:08:34.645 --> 00:08:37.566 A:middle
as your app has been
installed on a user's device.

00:08:38.775 --> 00:08:40.366 A:middle
Now let's take a
look at an example

00:08:40.366 --> 00:08:43.135 A:middle
of how we add a Static
Quick Action to AppChat.

00:08:44.066 --> 00:08:47.426 A:middle
Here's our info.plist file, you
can see with just a few lines

00:08:47.426 --> 00:08:49.786 A:middle
of code, that we
are able to create

00:08:49.936 --> 00:08:51.776 A:middle
and add this New
Chat Quick Action.

00:08:52.456 --> 00:08:53.846 A:middle
I'd like to call out
a few things here.

00:08:53.846 --> 00:08:57.376 A:middle
You'll notice we're specifying
a type, this is a string

00:08:57.376 --> 00:09:00.576 A:middle
that your application
defines which you'll use later


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:57.376 --> 00:09:00.576 A:middle
that your application
defines which you'll use later

00:09:00.576 --> 00:09:03.006 A:middle
on when the user selects
one of these quick actions

00:09:03.396 --> 00:09:05.696 A:middle
to know how to handle it.

00:09:05.856 --> 00:09:08.786 A:middle
We also provide a title,
New Chat in this situation.

00:09:09.596 --> 00:09:14.356 A:middle
And, also an icon type which
is a constant from a list

00:09:14.356 --> 00:09:16.836 A:middle
of system provided icons
that you can display.

00:09:17.066 --> 00:09:19.556 A:middle
So in this case that's how
we get that nice chat bubble.

00:09:20.156 --> 00:09:23.286 A:middle
One thing to keep in
mind is that you'll want

00:09:23.286 --> 00:09:25.506 A:middle
to localize any user
facing strings

00:09:25.746 --> 00:09:29.026 A:middle
in your info plist.strings
file as a best practice.

00:09:30.736 --> 00:09:32.926 A:middle
That's Static Quick
Actions, let's go take a look

00:09:32.926 --> 00:09:35.526 A:middle
at Dynamic Quick Actions
which I eluded to earlier.

00:09:36.766 --> 00:09:40.476 A:middle
So these are defined by your
app at runtime and provided,

00:09:40.776 --> 00:09:43.366 A:middle
from your app to the
system at that point.

00:09:44.036 --> 00:09:47.696 A:middle
As a result though, they're
only available once the user has

00:09:47.696 --> 00:09:49.656 A:middle
launched your app for
the very first time.

00:09:51.436 --> 00:09:53.896 A:middle
Now, Dynamic Quick
Actions are shown

00:09:53.956 --> 00:09:57.246 A:middle
after any Static Quick
Actions, space permitting.

00:09:57.746 --> 00:09:59.496 A:middle
You'll only get to
display a total

00:09:59.496 --> 00:10:01.746 A:middle
of four quick actions
on the home screen.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.496 --> 00:10:01.746 A:middle
of four quick actions
on the home screen.

00:10:02.216 --> 00:10:04.206 A:middle
So you'll want to
make sure to save room

00:10:04.206 --> 00:10:08.746 A:middle
for any Dynamic Quick Actions
if you intend to provide them.

00:10:10.046 --> 00:10:12.986 A:middle
You can also include an
optional system icon,

00:10:13.776 --> 00:10:17.156 A:middle
a custom icon using a template
image from your application.

00:10:18.056 --> 00:10:21.906 A:middle
Or you can even create an icon
using an address book contact

00:10:22.126 --> 00:10:23.226 A:middle
from the user's address book.

00:10:24.086 --> 00:10:26.536 A:middle
This is what AppChat
is doing to pull

00:10:26.536 --> 00:10:29.326 A:middle
in those nice profile
photos, right next to each

00:10:29.326 --> 00:10:31.466 A:middle
of those three Dynamic
Quick Actions

00:10:31.616 --> 00:10:33.056 A:middle
for the top three friends.

00:10:33.926 --> 00:10:35.346 A:middle
Let's walk through
some of the code

00:10:35.656 --> 00:10:38.076 A:middle
to see how we can
implement this.

00:10:39.416 --> 00:10:43.236 A:middle
Well for this example we'll
start by looking for a contact

00:10:43.236 --> 00:10:45.446 A:middle
that matches our
friend Lexi Torres.

00:10:45.956 --> 00:10:50.876 A:middle
The first thing we want to make
sure to do is request permission

00:10:51.136 --> 00:10:53.026 A:middle
from the user to
access their contacts.

00:10:53.466 --> 00:10:56.266 A:middle
Assuming we have that
permission, we can go forward,

00:10:56.976 --> 00:11:00.886 A:middle
and actually query their
contacts for a contact


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:56.976 --> 00:11:00.886 A:middle
and actually query their
contacts for a contact

00:11:01.136 --> 00:11:03.966 A:middle
that matches this friend's
name that we're interested in.

00:11:05.016 --> 00:11:09.706 A:middle
If we get at least one match,
we can then pass that contact

00:11:10.236 --> 00:11:13.486 A:middle
to our UIApplicationShortcutIcon
initializer.

00:11:14.256 --> 00:11:17.376 A:middle
That will go ahead and create
the icon that we'll use

00:11:17.376 --> 00:11:18.316 A:middle
with this quick action.

00:11:19.006 --> 00:11:21.616 A:middle
But of course we may not
have received access,

00:11:22.016 --> 00:11:24.106 A:middle
permission to access
the user's contacts,

00:11:24.766 --> 00:11:27.166 A:middle
or we may not have found
a match for this friend.

00:11:27.506 --> 00:11:29.026 A:middle
So we'll want to
have a fall-back,

00:11:29.256 --> 00:11:32.336 A:middle
in this case we'll use
the system's message style

00:11:33.046 --> 00:11:34.766 A:middle
to display as the icon.

00:11:35.706 --> 00:11:38.016 A:middle
Now that we have
the icon, we can go

00:11:38.016 --> 00:11:40.256 A:middle
and create our actual
quick action.

00:11:40.846 --> 00:11:44.156 A:middle
In this case we'll need to
specify a type, very similar

00:11:44.156 --> 00:11:45.976 A:middle
to how you saw with the
static quick action.

00:11:46.966 --> 00:11:49.796 A:middle
As well as a subtitle,
we'll use send a chat here,

00:11:49.906 --> 00:11:51.826 A:middle
and then we'll pass all of these

00:11:51.826 --> 00:11:54.326 A:middle
over to our [inaudible]
ApplicationshortcutItem

00:11:54.326 --> 00:11:57.766 A:middle
initializer to create our
first Dynamic Quick Action.

00:11:59.096 --> 00:12:03.236 A:middle
From here, we can continue to do
this as many times as we want,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.096 --> 00:12:03.236 A:middle
From here, we can continue to do
this as many times as we want,

00:12:03.856 --> 00:12:05.636 A:middle
to create any additional
quick actions.

00:12:05.866 --> 00:12:08.296 A:middle
And when we're done,
we'll package them all up,

00:12:08.536 --> 00:12:11.146 A:middle
in a nice array,
and hand that over

00:12:11.736 --> 00:12:14.436 A:middle
to UIApplicationsShortcutItems
property.

00:12:15.186 --> 00:12:16.176 A:middle
This has the effect

00:12:16.176 --> 00:12:19.676 A:middle
of registering these Dynamic
Quick Actions with the system,

00:12:20.026 --> 00:12:21.746 A:middle
so that they can display
on the Home screen.

00:12:23.006 --> 00:12:24.156 A:middle
One thing to keep in mind is

00:12:24.156 --> 00:12:28.156 A:middle
that this shortcutItems property
only displays your apps,

00:12:28.516 --> 00:12:31.266 A:middle
only contains your app's
dynamic shortcut items

00:12:31.266 --> 00:12:32.516 A:middle
or Dynamic Quick Actions.

00:12:32.896 --> 00:12:34.926 A:middle
The Static Quick Actions
are only specified

00:12:34.926 --> 00:12:37.676 A:middle
in your info.plist and won't
be contained in that array.

00:12:38.956 --> 00:12:40.686 A:middle
Let's take a look at how all

00:12:40.686 --> 00:12:42.626 A:middle
of this comes together
back on the home screen.

00:12:43.806 --> 00:12:46.906 A:middle
Fantastic, with just those few
lines of code, we were able

00:12:46.906 --> 00:12:49.496 A:middle
to create one Static
Quick Action, New Chat,

00:12:49.916 --> 00:12:52.686 A:middle
as well as three different
Dynamic Quick Actions.

00:12:52.686 --> 00:12:54.796 A:middle
One for each of our
top three friends.

00:12:56.086 --> 00:12:57.976 A:middle
There's now one more thing
that we need to do though,

00:12:58.486 --> 00:13:00.236 A:middle
that's of course to
handle these quick actions


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.486 --> 00:13:00.236 A:middle
that's of course to
handle these quick actions

00:13:00.236 --> 00:13:01.306 A:middle
when the user selects one.

00:13:02.106 --> 00:13:04.866 A:middle
There are two different
scenarios to keep in mind here.

00:13:05.746 --> 00:13:08.856 A:middle
The first one is if your
app is already running

00:13:08.856 --> 00:13:11.366 A:middle
and is being activated,
meaning your app is

00:13:11.366 --> 00:13:13.456 A:middle
in the inactive or
suspended state.

00:13:14.796 --> 00:13:17.366 A:middle
In this case we'll
use the callback

00:13:17.366 --> 00:13:18.796 A:middle
on UIApplicationDelegate,

00:13:18.796 --> 00:13:21.736 A:middle
application
performActionForShortcutItem,

00:13:21.796 --> 00:13:22.776 A:middle
completionHandler.

00:13:24.276 --> 00:13:27.036 A:middle
In here, we'll use the
shortcutItem that's passed

00:13:27.036 --> 00:13:29.356 A:middle
in to actually handle
the quick action.

00:13:29.756 --> 00:13:32.016 A:middle
Now this could mean many
things depending on your app

00:13:32.016 --> 00:13:33.356 A:middle
and which quick action you have,

00:13:33.706 --> 00:13:36.356 A:middle
but generally you're
probably moving the user

00:13:36.406 --> 00:13:38.556 A:middle
to a particular screen
within your application.

00:13:40.096 --> 00:13:43.516 A:middle
If you handle the quick
action, you should make sure

00:13:43.516 --> 00:13:46.286 A:middle
to call the completion
handler, passing a Bool

00:13:46.286 --> 00:13:50.296 A:middle
that indicates whether or
not you actually handled it.

00:13:50.486 --> 00:13:51.726 A:middle
Great, that's the
first scenario.

00:13:52.366 --> 00:13:54.716 A:middle
The second scenario
for us to consider is

00:13:54.716 --> 00:13:58.306 A:middle
if the app was actually launched
as a result of a quick action.

00:13:58.656 --> 00:14:00.806 A:middle
So in this case our
app was not running.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.656 --> 00:14:00.806 A:middle
So in this case our
app was not running.

00:14:01.976 --> 00:14:04.926 A:middle
Here we'll use the
familiar application

00:14:04.926 --> 00:14:07.346 A:middle
didFinishLaunchingWithOptions
callback,

00:14:07.346 --> 00:14:09.226 A:middle
on UIApplicationDelegate.

00:14:09.876 --> 00:14:13.506 A:middle
Inside, we'll access
the shortcutItem key

00:14:13.866 --> 00:14:16.906 A:middle
of the launchOptions dictionary
that's passed in to see

00:14:16.906 --> 00:14:19.056 A:middle
if our app was launched
via a quick action.

00:14:20.056 --> 00:14:23.466 A:middle
If it was, we'll go ahead
and handle the quick action,

00:14:23.716 --> 00:14:25.036 A:middle
just as we would
have done before.

00:14:25.566 --> 00:14:29.176 A:middle
And then we'll make sure to
return false from this method,

00:14:29.646 --> 00:14:32.696 A:middle
that tells the system we did
actually handle a quick action

00:14:33.066 --> 00:14:35.586 A:middle
here, and it will prevent
it from calling the method

00:14:35.586 --> 00:14:36.626 A:middle
on the previous slide.

00:14:37.946 --> 00:14:41.446 A:middle
That's pretty much all there is
to it in terms of both creating

00:14:41.806 --> 00:14:45.196 A:middle
and handling both dynamic
and static shortcutItems.

00:14:45.196 --> 00:14:48.446 A:middle
But let's review some of the
best practices to keep in mind.

00:14:49.456 --> 00:14:52.966 A:middle
First, every app should
provide quick actions,

00:14:53.306 --> 00:14:55.126 A:middle
as you see here they're
really easy to create

00:14:55.126 --> 00:14:58.536 A:middle
and they provide great
value, showing up right

00:14:58.536 --> 00:15:00.456 A:middle
on the Home screen,
letting users go straight


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.536 --> 00:15:00.456 A:middle
on the Home screen,
letting users go straight

00:15:00.456 --> 00:15:02.706 A:middle
to those key activities
that your app provides.

00:15:04.596 --> 00:15:07.646 A:middle
As such, you'll want to focus
on providing quick access

00:15:07.756 --> 00:15:10.456 A:middle
to the highest value tasks
that your app offers.

00:15:10.666 --> 00:15:13.176 A:middle
Remember you only
have 4 different slots

00:15:13.566 --> 00:15:14.886 A:middle
to display quick actions.

00:15:15.336 --> 00:15:17.676 A:middle
So decide wisely
which ones you choose.

00:15:18.636 --> 00:15:21.456 A:middle
To help you with
that, you might want

00:15:21.456 --> 00:15:24.636 A:middle
to use Dynamic Quick
Actions, but it's important

00:15:24.706 --> 00:15:26.756 A:middle
to keep your quick
actions predictable.

00:15:28.046 --> 00:15:30.716 A:middle
Users are going to be quickly
opening your Home Screen Quick

00:15:30.716 --> 00:15:31.886 A:middle
Actions and choosing one.

00:15:32.146 --> 00:15:34.466 A:middle
And if you're doing things
like changing up the order,

00:15:34.936 --> 00:15:36.916 A:middle
that'll probably
confuse your users

00:15:37.316 --> 00:15:39.626 A:middle
and they'll find a
frustrating experience.

00:15:40.956 --> 00:15:44.256 A:middle
One interesting thing to
remember here is that,

00:15:44.776 --> 00:15:47.686 A:middle
you should be prepared to
handle Dynamic Quick Actions

00:15:47.906 --> 00:15:50.166 A:middle
from a previous version
of your application.

00:15:51.016 --> 00:15:52.646 A:middle
The reason is, if you remember,

00:15:52.806 --> 00:15:56.466 A:middle
Dynamic Quick Actions don't
take effect until your app runs

00:15:56.466 --> 00:15:58.736 A:middle
and has the ability to
provide them to the system.

00:15:59.486 --> 00:16:01.956 A:middle
So if your app was
just recently updated,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.486 --> 00:16:01.956 A:middle
So if your app was
just recently updated,

00:16:01.956 --> 00:16:05.006 A:middle
it will still be showing
the Dynamic Quick Actions

00:16:05.186 --> 00:16:06.456 A:middle
from the previous version.

00:16:07.446 --> 00:16:11.176 A:middle
As a result, if the semantics of
your quick actions have changed,

00:16:11.546 --> 00:16:14.486 A:middle
it's a good idea to keep
this in mind when handling it

00:16:14.716 --> 00:16:16.346 A:middle
and to do this you might want

00:16:16.346 --> 00:16:18.566 A:middle
to consider including
your app's version number

00:16:18.916 --> 00:16:22.396 A:middle
in the info plist, I'm sorry,
in the user info dictionary

00:16:22.396 --> 00:16:25.046 A:middle
that you can include with
the Dynamic Quick Actions.

00:16:26.416 --> 00:16:28.286 A:middle
Finally, try not

00:16:28.286 --> 00:16:31.926 A:middle
to add functionality that's only
accessible using quick actions.

00:16:32.096 --> 00:16:35.046 A:middle
And remember, not all of
our devices support 3D Touch

00:16:35.216 --> 00:16:37.726 A:middle
and even on ones that
do, users have the option

00:16:37.726 --> 00:16:38.936 A:middle
to disable 3D Touch

00:16:38.976 --> 00:16:41.156 A:middle
in the accessibility
settings of the system.

00:16:42.336 --> 00:16:46.036 A:middle
With that, I'd like to invite
Peter on stage to tell you all

00:16:46.036 --> 00:16:48.236 A:middle
about Peek and Pop, Peter.

00:16:49.516 --> 00:16:52.676 A:middle
[ Applause ]

00:16:53.176 --> 00:16:55.066 A:middle
Go for it.

00:16:55.066 --> 00:16:55.856 A:middle
&gt;&gt; Thank you, Tyler.

00:16:57.036 --> 00:17:01.396 A:middle
I'm really excited to talk to
you today about Peek and Pop.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:57.036 --> 00:17:01.396 A:middle
I'm really excited to talk to
you today about Peek and Pop.

00:17:02.746 --> 00:17:07.736 A:middle
As Tyler showed you earlier,
Peek and Pop allows people

00:17:07.965 --> 00:17:12.226 A:middle
to quickly preview and navigate
to content inside your app.

00:17:12.346 --> 00:17:15.046 A:middle
And I can speak from
my personal experience,

00:17:15.165 --> 00:17:17.665 A:middle
that it changes the
way you use the phone.

00:17:18.776 --> 00:17:23.276 A:middle
We're going to talk through
Peek and Pop with the sample app

00:17:23.356 --> 00:17:26.965 A:middle
that Tyler showed
you earlier, AppChat.

00:17:27.616 --> 00:17:30.906 A:middle
As Tyler showed you,
in the last section,

00:17:31.556 --> 00:17:34.116 A:middle
AppChat is a standard UIKit app.

00:17:34.986 --> 00:17:37.736 A:middle
So tapping on one of the
messages, in the table,

00:17:38.976 --> 00:17:42.946 A:middle
brings me to the message so I
can check it out full screen.

00:17:44.066 --> 00:17:47.346 A:middle
A general rule of thumb
for adding Peek and Pop

00:17:47.346 --> 00:17:52.546 A:middle
to your app is that if user
accessible content can be tapped

00:17:52.866 --> 00:17:57.816 A:middle
to navigate to it, it should
also support Peek and Pop.

00:17:58.316 --> 00:18:00.806 A:middle
So let's apply that
rule to AppChat.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.316 --> 00:18:00.806 A:middle
So let's apply that
rule to AppChat.

00:18:01.976 --> 00:18:05.926 A:middle
That means that when I apply
pressure to one of the cells

00:18:05.926 --> 00:18:09.846 A:middle
in this table, we
should get a quick Peek.

00:18:10.966 --> 00:18:14.676 A:middle
In our API, we refer
to this as preview,

00:18:14.906 --> 00:18:17.556 A:middle
because we're getting a
preview of the View Controller

00:18:17.556 --> 00:18:18.926 A:middle
that we could navigate to.

00:18:19.946 --> 00:18:21.996 A:middle
Now if we continue
to apply pressure,

00:18:23.336 --> 00:18:27.616 A:middle
that'll Pop full screen,
ready for us to interact with.

00:18:28.496 --> 00:18:33.766 A:middle
In our API, we refer to this as
commit, because we've committed

00:18:34.056 --> 00:18:36.046 A:middle
to navigating to
this View Controller.

00:18:37.396 --> 00:18:39.936 A:middle
Cool, so let's go
through the components

00:18:40.126 --> 00:18:41.816 A:middle
of a Peek and Pop interaction.

00:18:43.336 --> 00:18:46.976 A:middle
First and foremost, we have
our registered View Controller,

00:18:48.036 --> 00:18:49.236 A:middle
this is the View Controller

00:18:49.236 --> 00:18:51.776 A:middle
that contains the user
interface elements

00:18:52.096 --> 00:18:53.556 A:middle
that we'd like to preview.

00:18:54.296 --> 00:18:57.636 A:middle
In our case, these are
our message table cells.

00:18:59.056 --> 00:19:03.476 A:middle
Each registered View Controller
has a whole series of sources,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.056 --> 00:19:03.476 A:middle
Each registered View Controller
has a whole series of sources,

00:19:04.256 --> 00:19:06.736 A:middle
these are individual
interface elements

00:19:06.876 --> 00:19:09.506 A:middle
that each have their own
preview View Controller.

00:19:10.356 --> 00:19:15.156 A:middle
In AppChat, this is a natural
fit for our chat table cells.

00:19:16.656 --> 00:19:20.066 A:middle
Finally, we have the
previewed View Controller,

00:19:21.486 --> 00:19:24.956 A:middle
this is the View Controller that
will show inside of the preview

00:19:25.356 --> 00:19:28.446 A:middle
which represents the element
that we tapped in the table.

00:19:29.506 --> 00:19:32.366 A:middle
Usually this is the same
element that we'd show

00:19:32.496 --> 00:19:34.026 A:middle
after tapping on that content.

00:19:34.616 --> 00:19:38.606 A:middle
So tapping on it, and previewing
on it, by applying pressure,

00:19:39.316 --> 00:19:40.706 A:middle
shows us the same content.

00:19:41.896 --> 00:19:46.026 A:middle
So with that, I'd like to
go step by step with what,

00:19:46.026 --> 00:19:48.506 A:middle
how we adding Peek
and Pop to AppChat

00:19:48.936 --> 00:19:51.166 A:middle
which will closely
mirror how you'll add Peek

00:19:51.166 --> 00:19:52.926 A:middle
and Pop to your app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:03.056 --> 00:20:06.226 A:middle
So we're going to start off in
our registered View Controller.

00:20:06.646 --> 00:20:09.206 A:middle
Remember this is that
table View Controller

00:20:09.376 --> 00:20:12.086 A:middle
which contains our
presentation's source view.

00:20:12.606 --> 00:20:15.176 A:middle
We're going to conform

00:20:15.576 --> 00:20:18.046 A:middle
to the
UIViewControllerPreviewing

00:20:18.046 --> 00:20:19.756 A:middle
Delegate protocol.

00:20:20.556 --> 00:20:22.296 A:middle
This delegate will
be called back

00:20:22.296 --> 00:20:26.126 A:middle
at various stages during
the Peek and Pop interaction

00:20:26.506 --> 00:20:28.696 A:middle
to provide information
to the system.

00:20:29.556 --> 00:20:31.226 A:middle
It's really easy to implement.

00:20:32.646 --> 00:20:35.986 A:middle
Next, we'll want to make sure
we registerForPreviewing.

00:20:36.746 --> 00:20:40.286 A:middle
A great time to do
this is in viewDidLoad.

00:20:41.196 --> 00:20:43.156 A:middle
We're going to
registerForPreviewing

00:20:43.576 --> 00:20:45.236 A:middle
with ourself as the delegate,

00:20:45.886 --> 00:20:48.286 A:middle
passing our tableView
as the sourceView.

00:20:48.986 --> 00:20:51.726 A:middle
Because the tableView
is the common ancestor

00:20:51.956 --> 00:20:57.506 A:middle
for all the interfaced elements
that we'd like to preview.

00:20:57.586 --> 00:21:01.936 A:middle
Now let's go ahead and implement
the two required delegate


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.586 --> 00:21:01.936 A:middle
Now let's go ahead and implement
the two required delegate

00:21:01.936 --> 00:21:04.606 A:middle
methods in the previewing
delegate protocol.

00:21:05.436 --> 00:21:13.136 A:middle
The first is for providing
a preview ViewController.

00:21:14.496 --> 00:21:16.256 A:middle
This will provide
a ViewController

00:21:16.476 --> 00:21:20.336 A:middle
for a particular location
inside the sourceView.

00:21:22.796 --> 00:21:25.286 A:middle
The method is called
previewingContext

00:21:25.546 --> 00:21:29.416 A:middle
ViewControllerForLocation,
and it's easy to implement.

00:21:30.946 --> 00:21:34.266 A:middle
First, we're going to find the
indexPath representing the point

00:21:34.266 --> 00:21:36.866 A:middle
that we were passed in
by the delegate method.

00:21:37.856 --> 00:21:40.466 A:middle
We can do this by hit
testing the tableView.

00:21:42.556 --> 00:21:45.466 A:middle
Next, we're going to
create a ViewController

00:21:45.996 --> 00:21:49.826 A:middle
with the model object
represented by the indexPath,

00:21:50.876 --> 00:21:53.196 A:middle
this is logic that you
probably already have

00:21:53.196 --> 00:21:55.866 A:middle
and did select row at indexPath.

00:21:57.176 --> 00:21:59.806 A:middle
Next, and this is
really important,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.226 --> 00:22:01.876 A:middle
we're going to set
the sourceRect

00:22:02.096 --> 00:22:03.566 A:middle
of the previewingContext.

00:22:04.296 --> 00:22:07.706 A:middle
Remember, the sourceView
is the entire tableView,

00:22:08.256 --> 00:22:11.966 A:middle
and we want to make sure to
lift off just the cell off the

00:22:11.966 --> 00:22:15.796 A:middle
screen, in that beautiful
blur and scale effect

00:22:15.796 --> 00:22:16.756 A:middle
that Tyler showed you.

00:22:17.616 --> 00:22:21.216 A:middle
By setting the sourceRect the
system will appropriately cut

00:22:21.216 --> 00:22:23.586 A:middle
out that element and
lift it off the screen,

00:22:23.806 --> 00:22:24.726 A:middle
it looks really great.

00:22:26.096 --> 00:22:29.156 A:middle
Finally, we'll return
the ViewController back

00:22:29.156 --> 00:22:29.806 A:middle
to the system.

00:22:31.126 --> 00:22:34.366 A:middle
Now there are two
really important parts

00:22:34.526 --> 00:22:37.376 A:middle
about this delegate method that
I'd like to highlight for you.

00:22:37.936 --> 00:22:43.946 A:middle
The first is that this method
will be called every time we

00:22:43.946 --> 00:22:46.226 A:middle
think we're going to
initiate a preview.

00:22:47.306 --> 00:22:51.066 A:middle
As Tyler said before, we want
to keep the interaction fast

00:22:51.066 --> 00:22:53.996 A:middle
and fluid, so we're going
to call it opportunistically

00:22:54.176 --> 00:22:55.726 A:middle
to make sure everything's ready.

00:22:57.306 --> 00:23:01.346 A:middle
As a result, you need to make
sure to not take too much time


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:57.306 --> 00:23:01.346 A:middle
As a result, you need to make
sure to not take too much time

00:23:01.726 --> 00:23:04.156 A:middle
when returning a
ViewController from this method.

00:23:05.156 --> 00:23:07.476 A:middle
If there's asynchronous
work that you can do

00:23:07.586 --> 00:23:10.896 A:middle
in the background, before
preparing this ViewController,

00:23:11.346 --> 00:23:14.306 A:middle
do that there, and don't
block the main queue.

00:23:15.276 --> 00:23:18.716 A:middle
This will keep things feeling
fast, fluid, and responsive

00:23:19.156 --> 00:23:20.506 A:middle
as we apply pressure

00:23:20.876 --> 00:23:23.016 A:middle
to interface elements
inside your app.

00:23:24.316 --> 00:23:27.196 A:middle
The second important piece
of advice I have for you

00:23:27.396 --> 00:23:29.686 A:middle
about this method,
is its return type.

00:23:30.526 --> 00:23:35.176 A:middle
UIViewControllerOptional, that
means we could return nil.

00:23:35.926 --> 00:23:37.906 A:middle
If you return nil
from this method,

00:23:38.306 --> 00:23:40.616 A:middle
we won't lift any
cells off the screen,

00:23:40.826 --> 00:23:43.716 A:middle
we won't do any blurring, we
won't play any haptic feedback,

00:23:43.956 --> 00:23:45.336 A:middle
we won't do a preview.

00:23:46.596 --> 00:23:48.936 A:middle
But you should make
sure to only return nil

00:23:48.936 --> 00:23:52.246 A:middle
if there truly is nothing
to preview at that location.

00:23:53.796 --> 00:23:56.286 A:middle
You should make sure that
similar looking content

00:23:56.286 --> 00:23:59.136 A:middle
in your app is previewable
in a similar way,

00:23:59.876 --> 00:24:02.346 A:middle
this way people won't be
squeezing their phones trying


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.876 --> 00:24:02.346 A:middle
this way people won't be
squeezing their phones trying

00:24:02.346 --> 00:24:05.256 A:middle
to get a preview, because
similar looking stuff will be

00:24:05.256 --> 00:24:06.746 A:middle
previewable similarly.

00:24:07.856 --> 00:24:09.986 A:middle
Great, so with that,

00:24:10.386 --> 00:24:14.396 A:middle
we've implemented the preview
part of this interaction.

00:24:23.136 --> 00:24:24.126 A:middle
But we're not done yet.

00:24:24.556 --> 00:24:27.096 A:middle
We need to implement the
second required method

00:24:27.256 --> 00:24:30.516 A:middle
on this protocol, which is
for providing the commit.

00:24:31.706 --> 00:24:33.726 A:middle
This one's even easier
to implement,

00:24:34.906 --> 00:24:38.246 A:middle
it's called previewingContext
commitViewController.

00:24:39.366 --> 00:24:42.166 A:middle
This will be called by the
system when it's time to commit,

00:24:42.666 --> 00:24:44.356 A:middle
we've crossed that
force threshold,

00:24:44.396 --> 00:24:46.126 A:middle
we're going to place
some haptic feedback,

00:24:46.636 --> 00:24:49.086 A:middle
so let's get the
ViewController on screen.

00:24:51.196 --> 00:24:54.746 A:middle
Here, we're going to do whatever
it is we need to do to get

00:24:54.746 --> 00:24:56.186 A:middle
that ViewController on screen.

00:24:56.916 --> 00:25:00.926 A:middle
AppChat is a simple UIKit app
that uses navigation controller,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:56.916 --> 00:25:00.926 A:middle
AppChat is a simple UIKit app
that uses navigation controller,

00:25:01.446 --> 00:25:03.956 A:middle
so we're just going
to call show.

00:25:05.016 --> 00:25:06.796 A:middle
This will have the
default effect

00:25:06.966 --> 00:25:09.336 A:middle
of pushing the ViewController
onto the nav stack.

00:25:09.996 --> 00:25:12.166 A:middle
But there's something really
cool about this method.

00:25:13.116 --> 00:25:16.256 A:middle
UIKit has made it so that
you can perform any type

00:25:16.256 --> 00:25:20.476 A:middle
of ViewController transition in
this callback, push something

00:25:20.476 --> 00:25:23.676 A:middle
onto the navigation stack,
do a custom presentation,

00:25:24.116 --> 00:25:27.036 A:middle
even move the ViewController
into a custom container.

00:25:27.966 --> 00:25:31.386 A:middle
Do whatever it is you need
to do inside your app to get

00:25:31.386 --> 00:25:32.826 A:middle
that ViewController on screen,

00:25:33.226 --> 00:25:36.036 A:middle
and UIKit will handle the
animation on your behalf.

00:25:37.116 --> 00:25:40.656 A:middle
So great, we've implemented
commit ViewController,

00:25:41.416 --> 00:25:46.986 A:middle
and now we've got that awesome
commit, which will allow us

00:25:46.986 --> 00:25:48.506 A:middle
to navigate full screen

00:25:48.676 --> 00:25:50.836 A:middle
and begin interacting
with that content.

00:25:52.636 --> 00:25:55.586 A:middle
Now we've added Peek
and Pop to our app,

00:25:56.026 --> 00:25:58.066 A:middle
but we can do a little
bit extra work

00:25:58.206 --> 00:26:02.766 A:middle
to take the experience,
to the next level.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.206 --> 00:26:02.766 A:middle
to take the experience,
to the next level.

00:26:05.636 --> 00:26:09.316 A:middle
Another aspect of Peek and Pop
that's really cool is preview

00:26:09.316 --> 00:26:10.156 A:middle
quick actions.

00:26:10.686 --> 00:26:14.066 A:middle
And by adding these to your
app, you can allow users

00:26:14.066 --> 00:26:16.416 A:middle
to access the most
common actions

00:26:16.646 --> 00:26:18.646 A:middle
with the content shown
inside the preview.

00:26:19.416 --> 00:26:21.746 A:middle
This is really powerful
and allows people

00:26:21.746 --> 00:26:24.406 A:middle
to use your apps even
faster than before.

00:26:25.906 --> 00:26:28.706 A:middle
If we go back to our
familiar architecture diagram,

00:26:29.476 --> 00:26:32.336 A:middle
we'll see that these preview
quick actions are owned

00:26:32.596 --> 00:26:34.306 A:middle
by the previewed ViewController.

00:26:35.506 --> 00:26:38.086 A:middle
This is the ViewController
that's capable of responding

00:26:38.086 --> 00:26:42.136 A:middle
to these actions because these
take action on the content shown

00:26:42.136 --> 00:26:43.116 A:middle
in that ViewController.

00:26:44.206 --> 00:26:45.426 A:middle
These are easy to add.

00:26:46.326 --> 00:26:50.246 A:middle
All we have to do is override
the preview action items

00:26:50.246 --> 00:26:52.136 A:middle
function, in UIViewController.

00:26:53.146 --> 00:26:56.366 A:middle
This returns an array
of UIPreviewActionItems.

00:26:56.876 --> 00:27:02.886 A:middle
We can create UIPreviewActions
using API you're already


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:56.876 --> 00:27:02.886 A:middle
We can create UIPreviewActions
using API you're already

00:27:02.946 --> 00:27:04.076 A:middle
probably familiar with.

00:27:04.806 --> 00:27:09.296 A:middle
It resembles UIAlertAction
and UITableViewRowAction.

00:27:10.186 --> 00:27:15.796 A:middle
You just pass a title, a style
and a closure, and we'll call

00:27:15.796 --> 00:27:18.926 A:middle
that closure when the action
is selected by the user.

00:27:20.426 --> 00:27:22.976 A:middle
Next, we'll just
return that array

00:27:22.976 --> 00:27:25.846 A:middle
of actions back to the system.

00:27:26.186 --> 00:27:29.876 A:middle
Now we've got one action here
for applying with a heart,

00:27:30.296 --> 00:27:33.206 A:middle
but AppChat lets you reply
with a whole bunch of emoji.

00:27:33.766 --> 00:27:36.526 A:middle
So what we really want to
do is group those emoji

00:27:36.936 --> 00:27:39.226 A:middle
into one group action.

00:27:40.636 --> 00:27:44.836 A:middle
We've got API for that too,
through UIPreviewActionGroup.

00:27:46.356 --> 00:27:50.536 A:middle
All you have to do is create
an array of preview actions;

00:27:51.366 --> 00:27:54.126 A:middle
here we have them for all of
the emoji you can respond with.

00:27:55.186 --> 00:27:59.776 A:middle
And then create an action
group with a title, style,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.126 --> 00:28:01.996 A:middle
and the array of those actions.

00:28:02.166 --> 00:28:04.336 A:middle
This is a great way for you

00:28:04.336 --> 00:28:08.256 A:middle
to group related actions inside
your preview quick actions.

00:28:09.776 --> 00:28:11.806 A:middle
There are two other
important parts

00:28:11.806 --> 00:28:16.306 A:middle
for the preview action
API that are also handy.

00:28:16.856 --> 00:28:22.496 A:middle
And this is through
the style enumeration

00:28:22.596 --> 00:28:23.706 A:middle
on preview action item.

00:28:24.996 --> 00:28:27.396 A:middle
The first is the selected style

00:28:27.666 --> 00:28:31.066 A:middle
which will show a little
check mark next to that item,

00:28:31.616 --> 00:28:34.036 A:middle
to let the user know that
they may have already selected

00:28:34.036 --> 00:28:35.206 A:middle
that option previously.

00:28:36.146 --> 00:28:38.256 A:middle
Now before we came
out with beta 1

00:28:38.336 --> 00:28:40.176 A:middle
that check mark was
feeling a little shy,

00:28:40.356 --> 00:28:42.956 A:middle
so you'll be noticing that it's
missing from the first seed

00:28:43.236 --> 00:28:45.116 A:middle
but rest assured that
that bug will be fixed.

00:28:46.776 --> 00:28:48.656 A:middle
The other style that's
really handy

00:28:48.656 --> 00:28:52.766 A:middle
to use is the destructive style,
which we can use to indicate

00:28:52.766 --> 00:28:55.636 A:middle
that an action may
perform a destructive act.

00:28:56.326 --> 00:28:59.106 A:middle
You'll see that here behind
me with the block action.

00:28:59.526 --> 00:29:02.546 A:middle
So by adding Peek and Pop,
and preview quick actions,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.526 --> 00:29:02.546 A:middle
So by adding Peek and Pop,
and preview quick actions,

00:29:02.786 --> 00:29:05.396 A:middle
we've taken the experience
inside your app

00:29:05.766 --> 00:29:08.536 A:middle
to the next level and
sped up the interaction

00:29:08.626 --> 00:29:09.966 A:middle
that your users can have.

00:29:10.876 --> 00:29:13.226 A:middle
Let's review some best practices

00:29:13.366 --> 00:29:15.846 A:middle
for adding Peek and
Pop to your app.

00:29:18.016 --> 00:29:21.426 A:middle
First and foremost,
remember the rule of thumb,

00:29:22.396 --> 00:29:26.256 A:middle
content that can be tapped
should also support Peek

00:29:26.446 --> 00:29:27.366 A:middle
and Pop.

00:29:27.866 --> 00:29:30.156 A:middle
You can look to Apple's
system apps

00:29:30.546 --> 00:29:34.326 A:middle
for a great hint
at how to do this.

00:29:34.446 --> 00:29:38.606 A:middle
Next, make sure to return
a preview view controller

00:29:38.716 --> 00:29:41.856 A:middle
consistently from the
delegate call back.

00:29:42.676 --> 00:29:46.266 A:middle
Similar looking content in
your app should be previewable

00:29:46.266 --> 00:29:47.256 A:middle
in a similar way.

00:29:47.876 --> 00:29:53.396 A:middle
In that same previewing
context callback make sure not

00:29:53.396 --> 00:29:54.256 A:middle
to take too long.

00:29:54.956 --> 00:29:57.816 A:middle
Remember, we don't want
to block the main queue

00:29:58.026 --> 00:30:01.596 A:middle
because we want this interaction
to remain fluid and responsive.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.026 --> 00:30:01.596 A:middle
because we want this interaction
to remain fluid and responsive.

00:30:03.616 --> 00:30:07.326 A:middle
Make sure to set the sourceRect
of the previewing context,

00:30:07.616 --> 00:30:11.036 A:middle
to lift the appropriate user
interface element on screen.

00:30:12.336 --> 00:30:14.776 A:middle
So, that's it for Peek and Pop.

00:30:15.736 --> 00:30:17.736 A:middle
Now I'd like to turn
our attention

00:30:18.076 --> 00:30:21.406 A:middle
to some super cool
new API in iOS X.

00:30:22.366 --> 00:30:23.836 A:middle
UIPreviewInteraction.

00:30:24.776 --> 00:30:29.206 A:middle
UIPreviewInteraction lets you
take the Peek and Pop feel,

00:30:29.746 --> 00:30:32.616 A:middle
which is force processing
and haptic feedback,

00:30:33.306 --> 00:30:35.626 A:middle
but bring your own
user interface.

00:30:36.096 --> 00:30:40.166 A:middle
And as we'll see in a moment,
this a really powerful concept.

00:30:40.666 --> 00:30:41.946 A:middle
Let's look at an example.

00:30:42.516 --> 00:30:46.406 A:middle
In AppChat, in our
chat detail view,

00:30:46.856 --> 00:30:49.866 A:middle
we've got this handy Reply
button at the bottom.

00:30:49.866 --> 00:30:54.216 A:middle
On a non-3D Touch
enabled device,

00:30:54.536 --> 00:30:58.356 A:middle
we can tap on that Reply
button to get a whole list

00:30:58.356 --> 00:30:59.926 A:middle
of the emoji we can reply with.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:01.196 --> 00:31:03.426 A:middle
And then we can tap
on one of these emoji,

00:31:04.546 --> 00:31:05.946 A:middle
to send it back to our friend.

00:31:09.176 --> 00:31:11.776 A:middle
But on a 3D Touch
capable device,

00:31:12.376 --> 00:31:15.006 A:middle
we can make this
interaction a lot more fluid

00:31:15.006 --> 00:31:16.106 A:middle
and a lot more fun.

00:31:17.576 --> 00:31:20.666 A:middle
With just a few lines of code
using UIPreviewInteraction,

00:31:21.786 --> 00:31:23.866 A:middle
we added something really neat.

00:31:24.896 --> 00:31:27.806 A:middle
We can apply pressure
to the Reply button

00:31:28.256 --> 00:31:30.616 A:middle
and interactively
present that sheet,

00:31:30.956 --> 00:31:33.236 A:middle
notice how the blur
was fading in and out.

00:31:34.256 --> 00:31:37.896 A:middle
Then while keeping my
finger down on the screen,

00:31:38.116 --> 00:31:42.436 A:middle
I can slide around to pick
an emoji to reply with.

00:31:43.466 --> 00:31:44.636 A:middle
Hopefully we don't
pick the devil.

00:31:44.706 --> 00:31:47.656 A:middle
And then we'll send
it back to our friend.

00:31:48.976 --> 00:31:52.426 A:middle
This type of one touch
interaction is something

00:31:52.426 --> 00:31:54.456 A:middle
that 3D Touch is perfect for.

00:31:56.106 --> 00:31:58.756 A:middle
Another thing that
3D Touch can help us

00:31:58.756 --> 00:32:01.106 A:middle
with is accelerating actions


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.756 --> 00:32:01.106 A:middle
with is accelerating actions

00:32:01.966 --> 00:32:04.266 A:middle
that can live closer
to the user's finger.

00:32:05.346 --> 00:32:09.216 A:middle
In iOS 7, we added
the slide back gesture

00:32:09.376 --> 00:32:11.416 A:middle
as an alternative
for the Back button.

00:32:12.366 --> 00:32:15.126 A:middle
And this is more convenient
because it's right next

00:32:15.126 --> 00:32:17.486 A:middle
to where your finger is, you can
just move it over to the edge

00:32:17.486 --> 00:32:19.886 A:middle
of the screen and slide back.

00:32:20.496 --> 00:32:23.546 A:middle
And by using 3D Touch, we
can add that convenience

00:32:23.716 --> 00:32:25.156 A:middle
to your app's interactions.

00:32:26.226 --> 00:32:29.346 A:middle
So we can actually 3D Touch
anywhere in this photo

00:32:30.146 --> 00:32:32.636 A:middle
to interactively bring
up that reply sheet

00:32:33.156 --> 00:32:37.376 A:middle
and then we can actually
commit that reply sheet open,

00:32:37.966 --> 00:32:39.346 A:middle
by applying some more force,

00:32:39.896 --> 00:32:42.606 A:middle
and then pick an
emoji to reply with.

00:32:44.116 --> 00:32:46.596 A:middle
This type of rich interaction

00:32:47.296 --> 00:32:50.996 A:middle
that can make things feel a lot
more fluid, and a lot more fast,

00:32:51.506 --> 00:32:54.226 A:middle
is exactly the type of thing
that we hope you'll build

00:32:54.406 --> 00:32:55.846 A:middle
with UIPreviewInteraction.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:04.746 --> 00:33:08.616 A:middle
UIPreviewInteraction
takes the same Peek

00:33:08.616 --> 00:33:11.436 A:middle
and Pop force processing
that we've honed

00:33:11.656 --> 00:33:13.706 A:middle
for the system provided
Peek and Pop UI,

00:33:15.086 --> 00:33:18.886 A:middle
and the automatic haptic
feedback as we move

00:33:18.886 --> 00:33:22.646 A:middle
through the stages of the
interaction, but allows your app

00:33:22.736 --> 00:33:24.206 A:middle
to bring the user interface.

00:33:24.756 --> 00:33:27.536 A:middle
And what's really
exciting about this is

00:33:27.536 --> 00:33:31.526 A:middle
that people can now build
muscle memory for Peek and Pop,

00:33:32.156 --> 00:33:34.216 A:middle
and apply that same
muscle memory

00:33:34.616 --> 00:33:37.256 A:middle
in the system standard
previewing appearance,

00:33:37.876 --> 00:33:41.176 A:middle
but also in the custom
interactions that you'll build

00:33:41.406 --> 00:33:42.936 A:middle
with UIPreviewInteraction.

00:33:43.796 --> 00:33:47.106 A:middle
And that muscle memory will
be universally applicable,

00:33:47.756 --> 00:33:49.076 A:middle
this is really cool.

00:33:50.226 --> 00:33:51.946 A:middle
So let's walk through step

00:33:52.236 --> 00:33:57.986 A:middle
by step how you might add
preview interaction to your app.

00:33:59.296 --> 00:34:01.776 A:middle
We're going to start
off by conforming


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.296 --> 00:34:01.776 A:middle
We're going to start
off by conforming

00:34:02.106 --> 00:34:04.586 A:middle
to the
UIPreviewInteractionDelegate

00:34:04.656 --> 00:34:05.536 A:middle
protocol.

00:34:06.326 --> 00:34:07.916 A:middle
This delegate will be informed

00:34:07.996 --> 00:34:10.976 A:middle
at various stages during
the preview interaction

00:34:11.266 --> 00:34:12.626 A:middle
to let you know what's going on.

00:34:13.835 --> 00:34:17.216 A:middle
Next, we'll want to make sure to
create our preview interaction.

00:34:18.606 --> 00:34:21.146 A:middle
Again, viewDidLoad is a
great time to do this.

00:34:21.985 --> 00:34:25.676 A:middle
Here, we'll create our preview
interaction with a sourceView

00:34:26.505 --> 00:34:28.525 A:middle
and set ourselves
as the delegate.

00:34:30.176 --> 00:34:34.496 A:middle
Now, preview interaction is
all about state transitions,

00:34:35.005 --> 00:34:37.585 A:middle
so let's talk through how
these state transitions work.

00:34:37.585 --> 00:34:40.686 A:middle
When the interaction starts,

00:34:41.146 --> 00:34:44.706 A:middle
if your delegate implements the
optional preview interaction

00:34:44.946 --> 00:34:51.085 A:middle
should begin callback, we'll
call that, or if you don't,

00:34:51.516 --> 00:34:52.666 A:middle
we'll begin the interaction.

00:34:53.856 --> 00:34:57.606 A:middle
Now, as the force moves
from the beginning

00:34:57.606 --> 00:35:00.366 A:middle
of the interaction
towards the preview state,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:57.606 --> 00:35:00.366 A:middle
of the interaction
towards the preview state,

00:35:01.186 --> 00:35:04.576 A:middle
we'll message back your delegate
with previewInteraction,

00:35:04.976 --> 00:35:07.476 A:middle
didUpdatePreviewTransition
:ended.

00:35:08.676 --> 00:35:09.226 A:middle
Check it out.

00:35:10.336 --> 00:35:12.726 A:middle
These force progress
updates are given

00:35:12.836 --> 00:35:15.506 A:middle
as a normalized value
from zero to one.

00:35:15.556 --> 00:35:17.086 A:middle
And what's really important

00:35:17.086 --> 00:35:21.006 A:middle
to highlight is this is not just
a direct translation of force.

00:35:21.906 --> 00:35:24.206 A:middle
Because it's using the
algorithms that we developed,

00:35:24.476 --> 00:35:28.976 A:middle
for Peek and Pop, we're actually
detecting the user's intent.

00:35:28.976 --> 00:35:32.746 A:middle
So this is not just some
simple force translation.

00:35:34.336 --> 00:35:38.506 A:middle
As we move between these two
force states, we'll be notified

00:35:38.506 --> 00:35:41.886 A:middle
at every step along the way
with our current progress

00:35:42.156 --> 00:35:43.006 A:middle
through the interaction.

00:35:43.986 --> 00:35:46.526 A:middle
And once we reach the
target state of preview,

00:35:47.606 --> 00:35:50.356 A:middle
we'll hear about it because
the progress will move to one,

00:35:51.236 --> 00:35:53.726 A:middle
and will passed true
for the ended parameter.

00:35:54.206 --> 00:35:57.736 A:middle
And, the device will
automatically play

00:35:57.986 --> 00:35:58.866 A:middle
haptic feedback.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:00.116 --> 00:36:03.176 A:middle
Let's go through a sample
implementation of this method.

00:36:04.876 --> 00:36:07.506 A:middle
Again the method is
previewInteraction,

00:36:07.786 --> 00:36:10.276 A:middle
didUpdatePreviewTransition
:ended.

00:36:11.106 --> 00:36:14.086 A:middle
And here we're just
going to update ourselves

00:36:14.086 --> 00:36:17.206 A:middle
for the current progress
through the transition.

00:36:18.226 --> 00:36:22.066 A:middle
Now notice, this is actually
plug and play with a number

00:36:22.066 --> 00:36:23.406 A:middle
of UIKit technologies.

00:36:24.016 --> 00:36:27.456 A:middle
We can use it to drive a
UIViewPropertyAnimator,

00:36:27.886 --> 00:36:29.916 A:middle
a percent driven
interactive transition,

00:36:30.216 --> 00:36:32.436 A:middle
or even a UIKit dynamic system.

00:36:33.666 --> 00:36:37.226 A:middle
These instantaneous updates
for the state transitions work

00:36:37.226 --> 00:36:38.706 A:middle
with all these technologies.

00:36:40.036 --> 00:36:41.866 A:middle
And if the interaction ends,

00:36:42.286 --> 00:36:45.866 A:middle
we'll want to show our
completed preview appearance.

00:36:46.546 --> 00:36:49.206 A:middle
This is the first
required delegate method

00:36:49.536 --> 00:36:50.846 A:middle
on UIPreviewInteraction.

00:36:51.926 --> 00:36:55.116 A:middle
The second is for
responding to cancellation,

00:36:55.846 --> 00:36:59.006 A:middle
it's called
previewInteractionDidCancel.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.196 --> 00:37:03.436 A:middle
This will be called whenever
the user lifts their finger

00:37:03.986 --> 00:37:06.986 A:middle
or if the interaction should
cancel for any other reason.

00:37:07.286 --> 00:37:12.906 A:middle
For example we got a phone call,
here we'll set our progress back

00:37:12.906 --> 00:37:16.356 A:middle
to zero, and reset ourselves
to our initial appearance.

00:37:17.336 --> 00:37:20.786 A:middle
But notice that we're doing this
inside an animation closure,

00:37:21.556 --> 00:37:24.666 A:middle
we'll want to animate
ourselves back to rest

00:37:24.926 --> 00:37:27.786 A:middle
to avoid things flashing
around when we lift our finger.

00:37:28.336 --> 00:37:33.456 A:middle
So that's how we can respond to
the preview state transition.

00:37:34.696 --> 00:37:38.076 A:middle
But remember in AppChat,
we also want to respond

00:37:38.296 --> 00:37:39.986 A:middle
to the commit state transition

00:37:40.196 --> 00:37:42.406 A:middle
for sticking our
content on screen.

00:37:42.936 --> 00:37:46.526 A:middle
We can implement the
optional delegate method,

00:37:47.186 --> 00:37:50.286 A:middle
previewInteraction
didUpdateCommitTransition

00:37:50.496 --> 00:37:53.766 A:middle
:ended, to respond to our
progress through commit.

00:37:55.476 --> 00:37:58.586 A:middle
So, when we're between the
beginning of the interaction

00:37:58.956 --> 00:38:00.216 A:middle
and the preview state,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.956 --> 00:38:00.216 A:middle
and the preview state,

00:38:00.936 --> 00:38:03.996 A:middle
we'll call back
didUpdatePreviewTransition.

00:38:05.166 --> 00:38:07.426 A:middle
And once we reach the
target state of preview,

00:38:08.266 --> 00:38:12.516 A:middle
we'll pass a progress value of
one and an ended value of true.

00:38:13.006 --> 00:38:15.356 A:middle
And we'll also play
some haptic feedback,

00:38:16.536 --> 00:38:18.546 A:middle
then we'll begin
sending messages

00:38:18.836 --> 00:38:22.986 A:middle
to didUpdateCommitTransition
:ended, with the progress

00:38:23.286 --> 00:38:25.196 A:middle
from preview to commit.

00:38:26.936 --> 00:38:28.556 A:middle
This is the same sort

00:38:28.556 --> 00:38:31.726 A:middle
of progress update normalized
values from zero to one.

00:38:32.756 --> 00:38:35.826 A:middle
And, once we reach the
target state of commit,

00:38:36.526 --> 00:38:40.726 A:middle
we'll pass a progress
value of one ended as true,

00:38:40.876 --> 00:38:44.546 A:middle
and we'll play another different
piece of haptic feedback.

00:38:45.126 --> 00:38:50.216 A:middle
Let's go through a way in which
you might implement this method.

00:38:50.336 --> 00:38:53.986 A:middle
So in our implementation

00:38:54.536 --> 00:38:57.466 A:middle
of previewInteraction
didUpdateCommitTransition

00:38:57.696 --> 00:39:01.956 A:middle
:ended, here we're going to
update our progress for commit.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:57.696 --> 00:39:01.956 A:middle
:ended, here we're going to
update our progress for commit.

00:39:02.536 --> 00:39:04.906 A:middle
Again, this works
with the whole suite

00:39:05.156 --> 00:39:07.596 A:middle
of UIKit animation
and dynamics API.

00:39:09.116 --> 00:39:11.196 A:middle
And once the interaction ends,

00:39:11.786 --> 00:39:14.936 A:middle
we'll just show our
completed commit appearance.

00:39:16.116 --> 00:39:18.466 A:middle
So that's it for
UIPreviewInteraction.

00:39:19.536 --> 00:39:23.106 A:middle
Now if you're building
a game or a drawing app,

00:39:24.016 --> 00:39:27.356 A:middle
there's some low level
force API that you can use.

00:39:29.196 --> 00:39:32.516 A:middle
This API provides
normalized access

00:39:32.676 --> 00:39:36.806 A:middle
to the force values coming
in with each UITouchObject,

00:39:37.216 --> 00:39:39.296 A:middle
through two properties
on UITouch,

00:39:39.726 --> 00:39:42.516 A:middle
force and maximumPossibleForce.

00:39:43.866 --> 00:39:46.716 A:middle
These values will be
populated on all devices

00:39:46.716 --> 00:39:50.306 A:middle
that support 3D Touch,
along with touches coming

00:39:50.306 --> 00:39:53.096 A:middle
from an Apple Pencil that
support Apple Pencil.

00:39:54.216 --> 00:39:57.636 A:middle
And we won't get into them
in more detail here, instead,

00:39:58.086 --> 00:39:59.636 A:middle
I encourage you to
check out the video

00:39:59.776 --> 00:40:02.756 A:middle
for the leveraging
touch input on iOS Talk.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.776 --> 00:40:02.756 A:middle
for the leveraging
touch input on iOS Talk.

00:40:03.146 --> 00:40:06.976 A:middle
It's a really great talk and
goes into these APIs in depth.

00:40:08.386 --> 00:40:09.176 A:middle
So let's review.

00:40:09.926 --> 00:40:12.126 A:middle
As Tyler showed you earlier,

00:40:12.696 --> 00:40:16.406 A:middle
Home Screen Quick Actions allow
your users to jump straight

00:40:16.406 --> 00:40:17.966 A:middle
into action with many

00:40:17.966 --> 00:40:20.326 A:middle
of the common activities
inside your app.

00:40:21.156 --> 00:40:23.796 A:middle
And most applications
will really benefit

00:40:23.956 --> 00:40:25.876 A:middle
from adding Home
Screen Quick Actions.

00:40:27.006 --> 00:40:32.326 A:middle
Next, I showed you how Peek
and Pop allow seamless fluid

00:40:32.486 --> 00:40:36.346 A:middle
and quick interaction like never
before and lets people interact

00:40:36.346 --> 00:40:38.776 A:middle
with your app in
a whole new way.

00:40:38.896 --> 00:40:42.656 A:middle
And we think that many
apps will really benefit

00:40:42.656 --> 00:40:43.856 A:middle
from adding Peek and Pop.

00:40:45.436 --> 00:40:49.056 A:middle
Finally, we looked at
UIPreviewInteraction,

00:40:49.926 --> 00:40:52.866 A:middle
which allows you to explore
new depths in the ocean

00:40:52.866 --> 00:40:56.576 A:middle
that is 3D Touch, and
really take a great look

00:40:56.716 --> 00:40:59.046 A:middle
into the next dimension
of multi-touch.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:00.276 --> 00:41:05.686 A:middle
Finally, it's important to note
that users will expect all apps

00:41:05.686 --> 00:41:07.846 A:middle
on their device to
support 3D touch

00:41:08.356 --> 00:41:11.466 A:middle
so we would highly encourage
you to adopt these features.

00:41:12.616 --> 00:41:16.706 A:middle
For more information and to
download the AppChat sample app

00:41:16.756 --> 00:41:18.746 A:middle
that we showed you
throughout this talk,

00:41:18.996 --> 00:41:20.766 A:middle
which uses all these
technologies,

00:41:21.216 --> 00:41:23.136 A:middle
check out the address behind me.

00:41:23.976 --> 00:41:26.096 A:middle
There are a few related
sessions,

00:41:26.556 --> 00:41:29.746 A:middle
one on the new
UIKitPropertyAnimator API,

00:41:30.156 --> 00:41:32.456 A:middle
which works great with
UIPreviewInteraction.

00:41:33.076 --> 00:41:37.566 A:middle
And another for leveraging the
lower level touch input on iOS.

00:41:37.566 --> 00:41:41.086 A:middle
And that's it, thank you so
much, and have a great rest

00:41:41.086 --> 00:41:42.326 A:middle
of your conference, thank you.

00:41:43.516 --> 00:41:46.500 A:middle
[ Applause ]

