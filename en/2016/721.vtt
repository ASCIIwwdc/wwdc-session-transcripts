WEBVTT

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:24.516 --> 00:00:30.336 A:middle
[ Applause ]

00:00:30.836 --> 00:00:33.266 A:middle
&gt;&gt; Welcome all of you
to the Unified Logging

00:00:33.266 --> 00:00:36.516 A:middle
and Tracing Activity session,
Logging for the Future.

00:00:36.596 --> 00:00:38.346 A:middle
And I'd like to thank
all of you for turning

00:00:38.346 --> 00:00:40.366 A:middle
out this late on a Friday.

00:00:40.366 --> 00:00:42.956 A:middle
So my name is Steve
Szymanski, yes.

00:00:43.516 --> 00:00:47.776 A:middle
[ Applause ]

00:00:48.276 --> 00:00:50.256 A:middle
Certainly, didn't expect
a full room at this time.

00:00:50.776 --> 00:00:53.646 A:middle
So my name is Steven Szymanski
and I'll be doing most

00:00:53.646 --> 00:00:55.616 A:middle
of the talking and a little
bit later I'll be assisted

00:00:55.616 --> 00:00:56.476 A:middle
by Matthieu Lucas.

00:00:57.636 --> 00:01:01.076 A:middle
So let's get into this, there's
a lot to talk about here.

00:00:57.636 --> 00:01:01.076 A:middle
So let's get into this, there's
a lot to talk about here.

00:01:01.076 --> 00:01:03.436 A:middle
I'm going to start with a
little bit of an introduction

00:01:03.436 --> 00:01:04.715 A:middle
and then go into some

00:01:04.715 --> 00:01:07.196 A:middle
of the basic concepts behind
the new logging system

00:01:07.196 --> 00:01:08.356 A:middle
that we've introduced this week.

00:01:08.356 --> 00:01:12.086 A:middle
There will be a short demo, then
I'll come back and start talking

00:01:12.086 --> 00:01:13.206 A:middle
about how to actually use it.

00:01:13.206 --> 00:01:15.736 A:middle
How to use the APIs,
how to use the tools,

00:01:16.306 --> 00:01:18.966 A:middle
and then some discussion of what
we think is the best practices

00:01:18.966 --> 00:01:19.946 A:middle
of how to use this.

00:01:20.576 --> 00:01:22.306 A:middle
A little talk about how

00:01:22.306 --> 00:01:25.586 A:middle
to gather the logs once you've
created them and then finally,

00:01:25.586 --> 00:01:27.586 A:middle
some talk about some
deprecated interfaces.

00:01:28.716 --> 00:01:29.616 A:middle
So let's get started.

00:01:30.606 --> 00:01:32.656 A:middle
A little bit of background.

00:01:33.036 --> 00:01:35.606 A:middle
For those of you who have been
around for a while you'll know

00:01:35.606 --> 00:01:37.296 A:middle
that back in 2014,

00:01:37.746 --> 00:01:40.316 A:middle
Apple introduced the
concept of Activity Tracing.

00:01:40.786 --> 00:01:43.936 A:middle
This is the ability to
keep track of all the work

00:01:44.276 --> 00:01:46.706 A:middle
that is done throughout
the system

00:01:46.706 --> 00:01:47.916 A:middle
on behalf of some operation.

00:01:48.196 --> 00:01:50.886 A:middle
Whether that work is done
inside of an application,

00:01:50.976 --> 00:01:53.386 A:middle
inside of a library of
framework that's called

00:01:53.386 --> 00:01:56.386 A:middle
from that application
or even work that's done

00:01:56.386 --> 00:01:59.066 A:middle
in a separate process on
behalf of the application.

00:02:00.116 --> 00:02:03.746 A:middle
Another thing we introduced at
that same time was the concept

00:02:03.746 --> 00:02:07.086 A:middle
of Faults and Errors, which
are special kinds of log events

00:02:07.456 --> 00:02:11.246 A:middle
that will trigger additional
work to be done by the system

00:02:11.246 --> 00:02:12.556 A:middle
to collect additional data.

00:02:14.086 --> 00:02:15.706 A:middle
The last thing I
want to say by way

00:02:15.706 --> 00:02:17.906 A:middle
of introduction is we recognize

00:02:17.906 --> 00:02:21.636 A:middle
that Apple has several logging
APIs already and hopefully

00:02:21.636 --> 00:02:25.446 A:middle
by the end of this talk you'll
understand why we're introducing

00:02:25.446 --> 00:02:32.086 A:middle
this new API and how that
interrelates with the others.

00:02:32.306 --> 00:02:34.746 A:middle
So what are the goals
of this project?

00:02:35.456 --> 00:02:37.116 A:middle
First and foremost,
what we wanted

00:02:37.116 --> 00:02:41.826 A:middle
to do was build one common
efficient logging mechanism

00:02:41.826 --> 00:02:43.646 A:middle
across the whole system
that could be used

00:02:43.646 --> 00:02:45.416 A:middle
in both user mode
and kernel mode.

00:02:46.996 --> 00:02:49.586 A:middle
One of the purposes of this
was to maximize the amount

00:02:49.796 --> 00:02:53.546 A:middle
of information that we could
collect while minimizing the

00:02:53.546 --> 00:02:54.526 A:middle
observer effect.

00:02:54.936 --> 00:02:57.646 A:middle
By observer effect I mean
the experience that all

00:02:57.646 --> 00:03:00.396 A:middle
of us have had as developers
where you have some problem,

00:02:57.646 --> 00:03:00.396 A:middle
of us have had as developers
where you have some problem,

00:03:00.606 --> 00:03:03.006 A:middle
you stick some logging
into your code

00:03:03.006 --> 00:03:04.726 A:middle
and suddenly the
problem stops happening

00:03:04.726 --> 00:03:05.886 A:middle
because you've changed
the timing.

00:03:06.516 --> 00:03:10.106 A:middle
We want a very, very low
footprint logging interface

00:03:10.106 --> 00:03:14.906 A:middle
that has minimal impact on your
code as you go off and call it.

00:03:15.666 --> 00:03:17.906 A:middle
So the way we accomplish
this as I'll go

00:03:17.906 --> 00:03:19.176 A:middle
into more detail in this talk.

00:03:19.576 --> 00:03:20.996 A:middle
First off, we compress the data.

00:03:21.506 --> 00:03:26.976 A:middle
So you can fit a whole lot
more information on the disk

00:03:26.976 --> 00:03:28.856 A:middle
without using up more space.

00:03:29.896 --> 00:03:31.276 A:middle
Another thing we do that's very,

00:03:31.276 --> 00:03:33.276 A:middle
very important is we
defer a lot of work.

00:03:33.766 --> 00:03:36.496 A:middle
As anything that we
can do at the point

00:03:36.496 --> 00:03:39.166 A:middle
at which you display the
information instead of the point

00:03:39.166 --> 00:03:41.946 A:middle
at which we collect it we
try to defer to that point.

00:03:42.196 --> 00:03:44.846 A:middle
That's one of the key ways
that we avoid observer effect.

00:03:46.216 --> 00:03:50.706 A:middle
And then another thing we do is
we manage the message lifecycle

00:03:50.706 --> 00:03:51.686 A:middle
in new ways.

00:03:52.286 --> 00:03:55.416 A:middle
The idea being that different
kinds of messages may stick

00:03:55.416 --> 00:03:57.506 A:middle
around in the system for
different lengths of time

00:03:57.846 --> 00:03:59.566 A:middle
to maximize the chance
that the messages

00:03:59.566 --> 00:04:02.006 A:middle
that you want will
actually be there

00:03:59.566 --> 00:04:02.006 A:middle
that you want will
actually be there

00:04:02.006 --> 00:04:04.056 A:middle
when you actually go
off and look at them.

00:04:04.466 --> 00:04:07.326 A:middle
The background of all that is
that we want to be able to have

00:04:07.376 --> 00:04:11.066 A:middle
as much logging turned on
all of the time in the system

00:04:11.426 --> 00:04:15.186 A:middle
without having to go back and
say, oh can you turn this on

00:04:15.186 --> 00:04:16.326 A:middle
and give me a new log.

00:04:16.555 --> 00:04:18.666 A:middle
We want it all on
as much as possible.

00:04:20.116 --> 00:04:22.886 A:middle
The other thing that
motivated this is we want

00:04:22.926 --> 00:04:25.736 A:middle
to design privacy into the
system from the ground up

00:04:25.816 --> 00:04:27.646 A:middle
and I'll talk more
about that as well.

00:04:27.646 --> 00:04:32.096 A:middle
So what are the key
features of the new system?

00:04:33.276 --> 00:04:36.596 A:middle
There's new and improved
ways of categorizing

00:04:36.656 --> 00:04:38.246 A:middle
and filtering log messages.

00:04:38.606 --> 00:04:40.356 A:middle
So there's some new tools that
we're going to be providing

00:04:40.356 --> 00:04:43.386 A:middle
to you for you to
categorize your log messages,

00:04:43.666 --> 00:04:46.876 A:middle
so when it comes around to
looking at the logs it's easier

00:04:46.876 --> 00:04:48.836 A:middle
to find log messages
that you care about.

00:04:50.546 --> 00:04:54.066 A:middle
Another important thing is
logging system collects caller

00:04:54.066 --> 00:04:57.736 A:middle
information for you, so there's
no longer any need for you

00:04:57.736 --> 00:05:02.506 A:middle
to pass file, line to identify
where this is called from.

00:04:57.736 --> 00:05:02.506 A:middle
to pass file, line to identify
where this is called from.

00:05:02.846 --> 00:05:04.916 A:middle
We are automatically
collecting that for you.

00:05:07.516 --> 00:05:11.946 A:middle
[ Applause ]

00:05:12.446 --> 00:05:15.776 A:middle
There's also a whole bunch of
new built-in type specifiers

00:05:16.236 --> 00:05:20.706 A:middle
that allow us to format binary
data for you so you don't have

00:05:20.706 --> 00:05:21.726 A:middle
to spend the time doing it.

00:05:22.926 --> 00:05:24.586 A:middle
There's a new Console
application

00:05:24.586 --> 00:05:26.316 A:middle
and a new command
line tool that we use

00:05:26.316 --> 00:05:27.836 A:middle
to access all of these features.

00:05:27.836 --> 00:05:32.836 A:middle
This is supported across all
of our platforms macOS, iOS,

00:05:32.836 --> 00:05:35.936 A:middle
watchOS, tvOS, and
all the Simulators.

00:05:36.556 --> 00:05:47.126 A:middle
It is supported in the
release this week in C, C++,

00:05:47.126 --> 00:05:50.436 A:middle
and Objective-C and support
for Swift is coming real soon.

00:05:54.086 --> 00:05:57.166 A:middle
So to give you a little
foretaste of what's coming.

00:05:57.166 --> 00:05:59.926 A:middle
This is the current Console
application that you see here

00:06:01.616 --> 00:06:04.206 A:middle
and this is what the
new Console looks like.

00:06:04.566 --> 00:06:05.896 A:middle
Now one thing I want to point

00:06:05.896 --> 00:06:13.236 A:middle
out to you here is take a
close look at the section

00:06:13.236 --> 00:06:14.076 A:middle
that I highlighted there.

00:06:14.376 --> 00:06:18.426 A:middle
That is a tree showing you
the graph of a given activity

00:06:18.706 --> 00:06:21.086 A:middle
as it flows from process
to process to process,

00:06:21.086 --> 00:06:24.356 A:middle
so you can see visually all
of the work that's been done

00:06:24.356 --> 00:06:26.726 A:middle
on behalf of some
operation that you requested.

00:06:28.796 --> 00:06:32.436 A:middle
So now let's back up and
talk about the theory

00:06:32.436 --> 00:06:34.316 A:middle
and the abstract
concepts behind us.

00:06:35.256 --> 00:06:36.326 A:middle
First off, adoption.

00:06:36.876 --> 00:06:40.236 A:middle
If you want to use the new
unified logging system all you

00:06:40.236 --> 00:06:42.446 A:middle
need to start doing is
building with the new SDK

00:06:42.446 --> 00:06:43.536 A:middle
that was released this week.

00:06:44.256 --> 00:06:48.406 A:middle
What'll happen if you do that is
all of the legacy APIs, NSLog,

00:06:48.766 --> 00:06:51.226 A:middle
asl log, message syslog,

00:06:51.226 --> 00:06:54.586 A:middle
all of those will get
redirected into the new system.

00:06:54.766 --> 00:06:56.546 A:middle
You don't have to
change a line of code

00:06:56.546 --> 00:06:58.186 A:middle
to start using the system.

00:06:58.186 --> 00:07:01.396 A:middle
Now obviously to use some
of the features you need

00:06:58.186 --> 00:07:01.396 A:middle
Now obviously to use some
of the features you need

00:07:01.396 --> 00:07:06.156 A:middle
to start using the new APIs, but
out-of-the-box if you just build

00:07:06.156 --> 00:07:08.296 A:middle
with the new system
it'll all get directed

00:07:08.296 --> 00:07:09.726 A:middle
into the new logging
architecture.

00:07:10.546 --> 00:07:13.156 A:middle
On the other hand, if for
some reason you don't want

00:07:13.156 --> 00:07:15.856 A:middle
to start using the new logging
system continue to build

00:07:15.856 --> 00:07:20.856 A:middle
with the old SDK and there'll
be no changes in your system.

00:07:21.066 --> 00:07:23.386 A:middle
So new file formats.

00:07:24.016 --> 00:07:28.516 A:middle
In this new system
logging data is kept

00:07:28.636 --> 00:07:31.146 A:middle
in a compressed binary
format on disk,

00:07:31.206 --> 00:07:32.896 A:middle
it's called a .tracev3 file.

00:07:34.186 --> 00:07:37.966 A:middle
Those files are now stored
under /var/db/diagnostics

00:07:38.556 --> 00:07:42.686 A:middle
with additional supporting
files in /var/db/uuidtext.

00:07:44.006 --> 00:07:46.856 A:middle
There are new tools
to access that data,

00:07:46.856 --> 00:07:50.326 A:middle
there's a new Console, a new
log command line tool and one

00:07:50.326 --> 00:07:51.666 A:middle
of the things you have
to keep in mind is

00:07:51.666 --> 00:07:53.686 A:middle
because the data is now stored

00:07:53.686 --> 00:07:57.546 A:middle
in a binary format you must
use the new tools to access it.

00:07:57.606 --> 00:08:00.526 A:middle
So you can no longer grep
through logs you have

00:07:57.606 --> 00:08:00.526 A:middle
So you can no longer grep
through logs you have

00:08:00.526 --> 00:08:02.436 A:middle
to use our tools to do
the surfing through it.

00:08:04.236 --> 00:08:06.866 A:middle
There's also another new
type of file the .logarchive,

00:08:07.626 --> 00:08:09.986 A:middle
which is there for
portability of log data.

00:08:10.466 --> 00:08:13.966 A:middle
Essentially a .logarchive is
a collection of information

00:08:14.006 --> 00:08:18.336 A:middle
out of /var/db/diagnostics and
you uuidtext collected together

00:08:18.336 --> 00:08:22.276 A:middle
into a single file that's
easier to transfer to email,

00:08:22.556 --> 00:08:27.436 A:middle
to attach to bug
reports and the like.

00:08:28.126 --> 00:08:29.496 A:middle
Another new concept that comes

00:08:29.496 --> 00:08:32.155 A:middle
in with this system is
subsystems and categories.

00:08:33.186 --> 00:08:35.145 A:middle
Log messages can
now be associated

00:08:35.145 --> 00:08:38.056 A:middle
with a subsystem and a category.

00:08:38.356 --> 00:08:41.706 A:middle
They can be used to control
how log messages are filtered

00:08:41.706 --> 00:08:42.376 A:middle
and displayed.

00:08:43.506 --> 00:08:47.426 A:middle
A subsystem can in fact maintain
several different categories

00:08:47.876 --> 00:08:50.176 A:middle
and you can use as
many subsystems

00:08:50.266 --> 00:08:52.176 A:middle
and categories as you need.

00:08:53.096 --> 00:08:57.316 A:middle
So as an example, you
may have some application

00:08:57.366 --> 00:08:59.696 A:middle
and you might define
a subsystem com.

00:08:59.846 --> 00:09:00.476 A:middle
your-company.

00:08:59.846 --> 00:09:00.476 A:middle
your-company.

00:09:00.616 --> 00:09:04.476 A:middle
your-application that has
three categories in it setup,

00:09:04.476 --> 00:09:05.936 A:middle
inprogress and teardown.

00:09:06.966 --> 00:09:10.526 A:middle
In that same application you can
define another subsystem com.

00:09:10.696 --> 00:09:12.216 A:middle
your-company.

00:09:12.256 --> 00:09:17.316 A:middle
test.your-application with a
single category of test in it.

00:09:17.816 --> 00:09:19.216 A:middle
And you can then use those

00:09:19.216 --> 00:09:22.116 A:middle
to control how the log
messages get displayed.

00:09:23.706 --> 00:09:26.066 A:middle
Logging behavior, this is kind
of the heart of the system here.

00:09:27.046 --> 00:09:30.496 A:middle
Each log message has a
level determined by the API

00:09:30.496 --> 00:09:32.076 A:middle
that you used to create it.

00:09:32.436 --> 00:09:36.456 A:middle
There are three basic levels
Default, Info and Debug

00:09:36.456 --> 00:09:39.646 A:middle
and there are two special
levels Fault and Error.

00:09:41.896 --> 00:09:45.046 A:middle
Each basic level has
two characteristics

00:09:45.046 --> 00:09:47.276 A:middle
that can be set either
system-wide

00:09:47.686 --> 00:09:49.286 A:middle
for a specific subsystem

00:09:49.646 --> 00:09:52.396 A:middle
or for a specific category
within a subsystem.

00:09:53.246 --> 00:09:54.876 A:middle
The first of those
is, is it enabled,

00:09:54.876 --> 00:09:57.886 A:middle
if you make the call does it
actually generate a log line.

00:09:58.516 --> 00:10:01.836 A:middle
Note that the fault
messages are always enabled,

00:09:58.516 --> 00:10:01.836 A:middle
Note that the fault
messages are always enabled,

00:10:01.946 --> 00:10:03.786 A:middle
you can't turn off
default messages.

00:10:04.736 --> 00:10:07.916 A:middle
The other characteristic
that you can set at all

00:10:07.916 --> 00:10:10.926 A:middle
of those levels is, is it
stored to disk or to memory.

00:10:11.286 --> 00:10:13.736 A:middle
Now storing to disk it's
kind of obvious what we mean,

00:10:14.216 --> 00:10:16.616 A:middle
but what I mean by
storing to memory.

00:10:17.046 --> 00:10:21.156 A:middle
Well the new Unified Logging
System maintains a large set

00:10:21.156 --> 00:10:23.636 A:middle
of in-memory circular buffers

00:10:23.916 --> 00:10:26.376 A:middle
to which some log
messages can be directed.

00:10:26.936 --> 00:10:30.946 A:middle
These messages are then saved to
disk only on a Fault and Error.

00:10:31.826 --> 00:10:35.036 A:middle
This is very useful for messages
that grow stale quickly.

00:10:35.036 --> 00:10:37.016 A:middle
So if you have a
message for instance

00:10:37.336 --> 00:10:41.876 A:middle
that basically the
information becomes stale

00:10:42.126 --> 00:10:44.396 A:middle
and all you ever look
at is the last version

00:10:44.396 --> 00:10:47.326 A:middle
of that message whenever you
get a log, there's no reason

00:10:47.326 --> 00:10:49.606 A:middle
to store hundreds
of different copies

00:10:49.606 --> 00:10:50.916 A:middle
of that log message on disk.

00:10:51.286 --> 00:10:54.756 A:middle
Instead, send it to the memory
buffer and then get it captured

00:10:54.756 --> 00:10:57.406 A:middle
on a Fault and Error and
you'll get that last version

00:10:57.406 --> 00:11:00.026 A:middle
that you need without a lot of
extra things getting stored.

00:10:57.406 --> 00:11:00.026 A:middle
that you need without a lot of
extra things getting stored.

00:11:00.026 --> 00:11:04.526 A:middle
The levels here are
hierarchical, so what I mean

00:11:04.526 --> 00:11:07.536 A:middle
by that is if you set Debug
to go to disk that implies

00:11:07.536 --> 00:11:09.406 A:middle
that info will go
to disk as well.

00:11:10.596 --> 00:11:13.396 A:middle
And all this behavior
can be customized

00:11:13.396 --> 00:11:16.856 A:middle
by installing profiles or on
macOS using the log command.

00:11:16.856 --> 00:11:21.466 A:middle
So what's the standard
behavior out-of-the-box

00:11:21.466 --> 00:11:24.146 A:middle
if you don't install
a special profile?

00:11:25.056 --> 00:11:27.846 A:middle
Well, default level
messages are always enabled

00:11:28.136 --> 00:11:31.956 A:middle
and by standard configuration
they go to disk.

00:11:32.776 --> 00:11:36.276 A:middle
Info level messages are
enabled, but they go to memory.

00:11:37.206 --> 00:11:41.006 A:middle
Debug level messages
are standard off,

00:11:41.346 --> 00:11:43.596 A:middle
they're not enabled
and of course,

00:11:43.596 --> 00:11:44.916 A:middle
since they're off they
don't go anywhere.

00:11:46.466 --> 00:11:48.586 A:middle
So the other two
kinds of messages

00:11:48.586 --> 00:11:50.086 A:middle
that occur are Faults
and Errors.

00:11:50.956 --> 00:11:54.516 A:middle
Faults and Errors are always
enabled and always go to disk.

00:11:54.516 --> 00:11:59.626 A:middle
So let's talk a moment
about privacy.

00:11:59.746 --> 00:12:03.046 A:middle
As you know, Apple values
customer privacy a great deal.

00:11:59.746 --> 00:12:03.046 A:middle
As you know, Apple values
customer privacy a great deal.

00:12:03.046 --> 00:12:05.856 A:middle
As a guiding principle
in everything we design

00:12:05.856 --> 00:12:09.966 A:middle
in our apps, in our services, in
our new versions of the OS users

00:12:09.966 --> 00:12:11.566 A:middle
about their privacy respected.

00:12:12.076 --> 00:12:15.086 A:middle
And all developers, including
everyone in this room shares

00:12:15.086 --> 00:12:16.406 A:middle
that responsibility with us.

00:12:17.076 --> 00:12:18.336 A:middle
So how does it apply to logging?

00:12:18.676 --> 00:12:21.456 A:middle
What we want to prevent
is the accidental logging

00:12:21.456 --> 00:12:25.086 A:middle
of personally identifiable
information in the logs

00:12:25.316 --> 00:12:27.916 A:middle
where someone can actually get
at it through the log data.

00:12:28.966 --> 00:12:33.356 A:middle
So to that end, dynamic strings,
collections, arrays, objects,

00:12:33.356 --> 00:12:36.066 A:middle
and the like are assumed
to contain private data.

00:12:36.336 --> 00:12:39.616 A:middle
Static strings and scalars
are assumed to be public.

00:12:40.686 --> 00:12:42.676 A:middle
And I'll get into
a little bit later

00:12:42.896 --> 00:12:44.226 A:middle
about how you can control that.

00:12:45.616 --> 00:12:46.636 A:middle
Okay, Faults and Errors.

00:12:46.636 --> 00:12:49.516 A:middle
I talked earlier about how
as part of the activity

00:12:49.516 --> 00:12:50.486 A:middle
of Tracing Release,

00:12:50.836 --> 00:12:53.036 A:middle
we introduced the concept
of Faults and Errors.

00:12:53.546 --> 00:12:56.956 A:middle
One of the basic ideas
of Faults and Errors is

00:12:56.956 --> 00:13:01.016 A:middle
that we do additional work
on doing it Fault and Error,

00:12:56.956 --> 00:13:01.016 A:middle
that we do additional work
on doing it Fault and Error,

00:13:01.016 --> 00:13:02.546 A:middle
we save additional information.

00:13:03.356 --> 00:13:06.696 A:middle
So an Error represents
an issue discovered

00:13:06.696 --> 00:13:09.056 A:middle
within the different
application or library.

00:13:09.936 --> 00:13:12.386 A:middle
On an Error what
we do is we look

00:13:12.426 --> 00:13:15.246 A:middle
through the in-memory
buffers and we collect all

00:13:15.246 --> 00:13:18.666 A:middle
of the log messages that were
from that process and save them

00:13:18.666 --> 00:13:20.246 A:middle
out to disk as part
of the Error.

00:13:21.586 --> 00:13:25.426 A:middle
Alternatively, Faults
represent more global problems

00:13:25.426 --> 00:13:27.706 A:middle
in the system where
something larger has happened.

00:13:28.396 --> 00:13:32.736 A:middle
On a Fault we again look through
the memory buffers and collect

00:13:32.736 --> 00:13:36.666 A:middle
up all the log messages from
that process and every process

00:13:36.666 --> 00:13:38.036 A:middle
that was involved
in the activity.

00:13:38.696 --> 00:13:41.946 A:middle
And we also we actually collect
some other additional system

00:13:41.946 --> 00:13:45.076 A:middle
information that
might be useful to us.

00:13:45.556 --> 00:13:48.466 A:middle
Faults and Errors and all of
the log data that's collected

00:13:48.466 --> 00:13:50.616 A:middle
as part of them are
actually captured

00:13:50.616 --> 00:13:53.696 A:middle
into a separate set
of log files.

00:13:54.046 --> 00:13:57.896 A:middle
We do that so that normal
logging won't push them out

00:13:57.896 --> 00:14:00.866 A:middle
and cause them to
exceed their quotas

00:13:57.896 --> 00:14:00.866 A:middle
and cause them to
exceed their quotas

00:14:00.976 --> 00:14:02.486 A:middle
and cause us to reclaim
the space.

00:14:02.856 --> 00:14:05.406 A:middle
So the idea is the Fault
and Error data sticks

00:14:05.406 --> 00:14:08.076 A:middle
around even longer than
normal logging data.

00:14:10.706 --> 00:14:15.216 A:middle
So okay, I'm going to give a
very, very eyelevel overview

00:14:15.216 --> 00:14:17.806 A:middle
of how the system works with a
whole lot of details missing.

00:14:18.076 --> 00:14:20.916 A:middle
So this is like a
broad brush discussion.

00:14:20.986 --> 00:14:26.156 A:middle
Okay within each process there's
a collection of small buffers

00:14:26.156 --> 00:14:27.676 A:middle
into which we log messages.

00:14:28.126 --> 00:14:30.456 A:middle
These buffers are actually
in memory that's shared

00:14:30.456 --> 00:14:31.406 A:middle
with the logging daemon.

00:14:32.476 --> 00:14:35.746 A:middle
As these buffers are filled up
the logging daemon is triggered

00:14:36.086 --> 00:14:37.816 A:middle
to compress that data into a set

00:14:37.816 --> 00:14:39.976 A:middle
of larger buffers
that it maintains.

00:14:40.866 --> 00:14:44.036 A:middle
As those larger buffers are
filled up we either save them

00:14:44.036 --> 00:14:46.696 A:middle
out to disk or we
recycle them as part

00:14:46.696 --> 00:14:48.356 A:middle
of the memory only buffers.

00:14:48.946 --> 00:14:52.896 A:middle
So the other activity
that ends up happening is

00:14:53.036 --> 00:14:55.686 A:middle
if you request livestreaming
of log data,

00:14:55.686 --> 00:14:58.326 A:middle
so you're on the Console
and want to see the logs

00:14:58.496 --> 00:14:59.996 A:middle
that are happening
as they occur.

00:15:00.636 --> 00:15:04.626 A:middle
The way we implement that
is we immediately do an IPC

00:15:04.626 --> 00:15:06.456 A:middle
over to the diagnostic daemon

00:15:06.816 --> 00:15:09.956 A:middle
who then distributes those log
messages out to all the clients.

00:15:10.716 --> 00:15:12.336 A:middle
The side effect of that is

00:15:12.666 --> 00:15:15.086 A:middle
that there is a significant
performance impact

00:15:15.086 --> 00:15:16.866 A:middle
of livestreaming of log data.

00:15:17.376 --> 00:15:20.336 A:middle
Basically, a lot of the work
that we've done to save effort

00:15:20.396 --> 00:15:24.526 A:middle
and speed up logging so it
doesn't have an observer effect

00:15:24.526 --> 00:15:27.536 A:middle
on your code goes away
because we're doing an IPC

00:15:27.536 --> 00:15:30.396 A:middle
on every single call.

00:15:30.456 --> 00:15:34.976 A:middle
The other thing to note is how
individual kinds of messages

00:15:34.976 --> 00:15:38.266 A:middle
from applications or
particular subsystems get routed

00:15:38.316 --> 00:15:43.396 A:middle
through this can be changed
by profiles and such.

00:15:43.626 --> 00:15:45.326 A:middle
So enough of me talking
for a little bit,

00:15:45.326 --> 00:15:47.836 A:middle
at this point I will
invite Matthieu Lucas

00:15:47.946 --> 00:15:49.636 A:middle
up to give a demonstration
of this

00:15:50.346 --> 00:15:52.246 A:middle
in action using the Console app.

00:15:53.516 --> 00:15:58.656 A:middle
[ Applause ]

00:15:59.156 --> 00:16:00.086 A:middle
&gt;&gt; Thanks Steven.

00:15:59.156 --> 00:16:00.086 A:middle
&gt;&gt; Thanks Steven.

00:16:00.726 --> 00:16:03.466 A:middle
So as Steven mentioned
earlier in this talk,

00:16:03.696 --> 00:16:06.356 A:middle
this year we introduced
a brand new Console app.

00:16:06.826 --> 00:16:10.626 A:middle
So we wrote it from
scratch using Swift.

00:16:10.626 --> 00:16:13.986 A:middle
We wanted to leverage
a new logging system

00:16:13.986 --> 00:16:17.906 A:middle
and making your developing
experience easier.

00:16:18.676 --> 00:16:20.866 A:middle
Let's look at the app.

00:16:21.286 --> 00:16:22.266 A:middle
So here's the new look.

00:16:23.756 --> 00:16:26.516 A:middle
As you can see, the layout
hasn't really changed.

00:16:26.646 --> 00:16:31.656 A:middle
You still have your mainstream
on the center, different action

00:16:31.656 --> 00:16:34.756 A:middle
on top, and then different
sources on the sidebar.

00:16:35.286 --> 00:16:38.576 A:middle
Let's look at the
sidebar for a minute.

00:16:38.906 --> 00:16:43.126 A:middle
So you can still see your
different reports, the system

00:16:43.126 --> 00:16:46.536 A:middle
or user reports, the
different legacy logs

00:16:46.536 --> 00:16:48.396 A:middle
that you may have
the system routes.

00:16:48.806 --> 00:16:50.696 A:middle
But here you can see that
there is a new section.

00:16:51.066 --> 00:16:54.136 A:middle
Now we display all the
devices that are connected

00:16:54.136 --> 00:16:56.806 A:middle
to your machine and we also
show the current machine.

00:17:01.716 --> 00:17:07.116 A:middle
So we support iOS, tvOS,
and watchOS devices in here,

00:17:07.116 --> 00:17:10.886 A:middle
so you can plug every
device you have.

00:17:10.935 --> 00:17:13.715 A:middle
So let's just look at the
mainstream for a minute.

00:17:14.195 --> 00:17:16.136 A:middle
So now the log stream
is made of two views.

00:17:16.726 --> 00:17:19.675 A:middle
You have the messages view
and the activities view

00:17:19.776 --> 00:17:22.306 A:middle
as Steven mentioned earlier.

00:17:22.806 --> 00:17:25.156 A:middle
So in the activities view
you can see the [inaudible]

00:17:25.156 --> 00:17:30.506 A:middle
activities and the related
messages if there is any right

00:17:30.756 --> 00:17:33.066 A:middle
in the details it tells
you in the bottom here.

00:17:34.956 --> 00:17:37.396 A:middle
Let's switch to the
messages now.

00:17:38.496 --> 00:17:42.016 A:middle
So here you can see
a bunch of messages,

00:17:42.256 --> 00:17:47.186 A:middle
so in order to include Debug
and Info messages you need

00:17:47.186 --> 00:17:50.666 A:middle
to manually do it in the
Action menu, so that they show

00:17:50.666 --> 00:17:52.206 A:middle
up along the default stream.

00:17:53.406 --> 00:17:57.866 A:middle
So now we should see more
-- I just launch a few apps,

00:17:57.866 --> 00:17:59.996 A:middle
so let's create some logs.

00:18:00.846 --> 00:18:04.406 A:middle
So here now you can see that
we have much more information.

00:18:04.716 --> 00:18:07.736 A:middle
So you can see the
different message type

00:18:08.306 --> 00:18:12.256 A:middle
through those color dots
on the type columns here.

00:18:12.256 --> 00:18:16.626 A:middle
So the gray one are
the Info messages,

00:18:17.226 --> 00:18:20.986 A:middle
the yellow ones are the Errors,
there is a red one for Fault

00:18:21.186 --> 00:18:26.326 A:middle
and the dark gray
are the Debug ones.

00:18:26.446 --> 00:18:29.776 A:middle
Whenever there is no dots
that's just the default type.

00:18:31.366 --> 00:18:35.986 A:middle
So you can also expand

00:18:35.986 --> 00:18:40.196 A:middle
or collapse your messages
directly inline using your left

00:18:40.196 --> 00:18:46.286 A:middle
or right arrows or using the
View menu item here Expand

00:18:46.286 --> 00:18:46.776 A:middle
or Collapse.

00:18:48.196 --> 00:18:49.556 A:middle
Then whenever you are

00:18:49.556 --> 00:18:53.816 A:middle
on the single message you
can now see all the details

00:18:54.046 --> 00:18:56.396 A:middle
of a specific message directly

00:18:56.396 --> 00:18:58.506 A:middle
in the details view
in the bottom.

00:18:59.356 --> 00:19:02.636 A:middle
So we are able to show you all
the information that we have

00:18:59.356 --> 00:19:02.636 A:middle
So we are able to show you all
the information that we have

00:19:03.126 --> 00:19:07.406 A:middle
about a specific log, that's
part of the new logging system.

00:19:07.666 --> 00:19:10.156 A:middle
So now we can show
you the process,

00:19:10.246 --> 00:19:11.916 A:middle
the library where it comes from.

00:19:12.256 --> 00:19:15.166 A:middle
So as you can see for this one,
we can see that it's coming

00:19:15.166 --> 00:19:18.096 A:middle
from accounts D and then
from the account framework.

00:19:18.786 --> 00:19:23.096 A:middle
You can also see
much more information

00:19:23.096 --> 00:19:26.696 A:middle
as we gather during
all the new logging.

00:19:26.956 --> 00:19:30.746 A:middle
So you can see we have now
the subsystem, the category,

00:19:31.196 --> 00:19:34.046 A:middle
the activity ID, the
thread ID or the PID.

00:19:35.796 --> 00:19:39.206 A:middle
Now let's switch to the
iPad that I have here.

00:19:39.496 --> 00:19:44.086 A:middle
So I connected an iPad where
I have just a very basic app

00:19:44.526 --> 00:19:49.796 A:middle
that has some figures and we'll
try to find yours by going

00:19:50.486 --> 00:19:52.526 A:middle
through the different features.

00:19:53.726 --> 00:19:57.766 A:middle
So first, we can start by just
minimizing the column layout,

00:19:57.766 --> 00:20:01.026 A:middle
so to do so I can right
click on the top here

00:19:57.766 --> 00:20:01.026 A:middle
so to do so I can right
click on the top here

00:20:01.336 --> 00:20:05.916 A:middle
and then include or
add some columns.

00:20:06.046 --> 00:20:09.876 A:middle
So I'll just add the subsystem,
I also add the category,

00:20:10.896 --> 00:20:14.196 A:middle
and then I will just
move that here.

00:20:14.196 --> 00:20:17.276 A:middle
So this layout is
then persistent,

00:20:17.596 --> 00:20:19.086 A:middle
so you won't have
to do it twice.

00:20:19.836 --> 00:20:21.876 A:middle
So now we can see
that we have a bunch

00:20:21.876 --> 00:20:24.556 A:middle
of information from this device.

00:20:24.606 --> 00:20:30.056 A:middle
So in order to refine your
search here you have two ways

00:20:30.056 --> 00:20:31.776 A:middle
to do it.

00:20:31.776 --> 00:20:35.186 A:middle
You can first right click
on a specific message

00:20:35.846 --> 00:20:38.576 A:middle
and then you'll get option
to mute the subsystem,

00:20:38.576 --> 00:20:42.566 A:middle
mute the process or
show a specific process.

00:20:42.626 --> 00:20:45.316 A:middle
So in that case we
can just start

00:20:45.416 --> 00:20:48.296 A:middle
by muting a specific category.

00:20:48.296 --> 00:20:49.986 A:middle
Let's say that we
want to mute widgets.

00:20:51.426 --> 00:20:55.556 A:middle
Now you can also the second way

00:20:55.556 --> 00:20:58.496 A:middle
of just refining is
to just [inaudible].

00:20:58.936 --> 00:21:03.056 A:middle
So as you can see, we just
added a custom token for widget.

00:20:58.936 --> 00:21:03.056 A:middle
So as you can see, we just
added a custom token for widget.

00:21:03.936 --> 00:21:07.346 A:middle
Let's say that I want to
just see the Bookmarks app,

00:21:07.726 --> 00:21:09.776 A:middle
that's the app that
[inaudible] on my device here.

00:21:10.936 --> 00:21:15.506 A:middle
So by doing so now I have only
messages coming from Bookmarks

00:21:15.766 --> 00:21:17.606 A:middle
without the category widgets.

00:21:18.106 --> 00:21:23.126 A:middle
Let's just add another token
to show only the Error type.

00:21:24.776 --> 00:21:27.626 A:middle
So now we only have messages
coming from Bookmarks

00:21:27.626 --> 00:21:31.566 A:middle
without the category widgets
and that has an Error type.

00:21:32.176 --> 00:21:36.826 A:middle
So we can see that we have
different Errors coming

00:21:36.826 --> 00:21:39.436 A:middle
from the web view, so
that's [inaudible] for now,

00:21:39.796 --> 00:21:45.666 A:middle
we relate it down to
what we're looking for.

00:21:46.176 --> 00:21:50.886 A:middle
So in order to reuse it later
you can just save it by clicking

00:21:50.946 --> 00:21:53.456 A:middle
on the Save button
on the top right.

00:21:54.956 --> 00:21:58.026 A:middle
So I'll just name
it Bookmark Errors.

00:21:58.916 --> 00:22:02.866 A:middle
So you can see that all your
saved searches will appear

00:21:58.916 --> 00:22:02.866 A:middle
So you can see that all your
saved searches will appear

00:22:02.866 --> 00:22:04.136 A:middle
in this section here.

00:22:04.996 --> 00:22:08.796 A:middle
So you can reorder those as
you want, you can remove those

00:22:08.796 --> 00:22:12.526 A:middle
if you want and you also have
two saved searches by default,

00:22:12.526 --> 00:22:14.526 A:middle
which are All Messages
and Errors and Faults.

00:22:15.066 --> 00:22:18.626 A:middle
Now let's switch to
the activity view see

00:22:18.686 --> 00:22:22.626 A:middle
if we can find more context
about those logs and see

00:22:22.626 --> 00:22:24.376 A:middle
if we can reproduce [inaudible].

00:22:25.796 --> 00:22:29.596 A:middle
So here we can see that we
have different activities.

00:22:29.926 --> 00:22:33.996 A:middle
So the activities view is based
on the same search mechanism,

00:22:34.666 --> 00:22:36.796 A:middle
so we could apply
the same features

00:22:36.796 --> 00:22:39.176 A:middle
and then save it as well.

00:22:39.976 --> 00:22:45.206 A:middle
So here we can see that we
have a Bookmarks activity

00:22:45.206 --> 00:22:47.476 A:middle
with different children.

00:22:47.826 --> 00:22:49.966 A:middle
So we can see that we were
preparing for transition,

00:22:49.966 --> 00:22:55.746 A:middle
then we retrieve an object and
then we push the detail view

00:22:55.746 --> 00:22:57.606 A:middle
and then we configure
the detail view

00:22:57.606 --> 00:22:58.866 A:middle
and then we load the web view.

00:22:59.356 --> 00:23:02.546 A:middle
So as you can see now, the
messages appear directly

00:22:59.356 --> 00:23:02.546 A:middle
So as you can see now, the
messages appear directly

00:23:02.546 --> 00:23:05.496 A:middle
in the bottom of this
view, the messages

00:23:05.496 --> 00:23:06.876 A:middle
that are related
to this activity.

00:23:06.876 --> 00:23:10.506 A:middle
So this message was written

00:23:10.776 --> 00:23:12.946 A:middle
in this specific activity,
so it showed up here.

00:23:13.386 --> 00:23:16.346 A:middle
Now we can see that
those messages,

00:23:16.346 --> 00:23:20.906 A:middle
those two failures were part of
the loading web view activity.

00:23:22.126 --> 00:23:25.806 A:middle
So now we know that we
have all these contexts

00:23:26.346 --> 00:23:29.396 A:middle
of what happened to this Error.

00:23:29.796 --> 00:23:34.506 A:middle
So now we also added the
sharing option to Console,

00:23:34.506 --> 00:23:37.976 A:middle
so you can just select a bunch
of activities or messages

00:23:38.326 --> 00:23:41.686 A:middle
and share it directly
to someone or to a note.

00:23:41.686 --> 00:23:45.336 A:middle
So I'll just add it as a note
so that I can debug it later.

00:23:46.586 --> 00:23:47.856 A:middle
Now the next.

00:23:48.516 --> 00:23:52.746 A:middle
[ Applause ]

00:23:53.246 --> 00:23:58.806 A:middle
The other input that we
can use is a log archive.

00:23:58.806 --> 00:24:00.256 A:middle
So [inaudible] log archive

00:23:58.806 --> 00:24:00.256 A:middle
So [inaudible] log archive

00:24:00.256 --> 00:24:03.646 A:middle
that was previously
generated from another device.

00:24:04.226 --> 00:24:07.556 A:middle
So if you do have one too you
can just double-click on it

00:24:07.676 --> 00:24:08.806 A:middle
and Console will open it.

00:24:09.666 --> 00:24:13.786 A:middle
So as you can see whenever you
click on it and then open it,

00:24:14.076 --> 00:24:15.496 A:middle
it just loads everything.

00:24:15.986 --> 00:24:18.616 A:middle
And then you can see that we
also have the same [inaudible]

00:24:18.816 --> 00:24:21.836 A:middle
filters as we just said before.

00:24:22.146 --> 00:24:26.716 A:middle
So in order to see if this
specific log archive has the

00:24:26.716 --> 00:24:30.556 A:middle
same -- contain the same Error
messages as the current device

00:24:30.876 --> 00:24:33.846 A:middle
that we stream we
can just click on it

00:24:33.846 --> 00:24:38.696 A:middle
and it will automatically
reapply the same filters.

00:24:39.596 --> 00:24:43.616 A:middle
So we can see that we have the
same errors and we can also look

00:24:43.616 --> 00:24:48.686 A:middle
at the activities view to see
the same activities and so on.

00:24:49.376 --> 00:24:51.226 A:middle
So that's it for Console

00:24:51.736 --> 00:24:54.546 A:middle
and I'll let Steven
go back on the slides.

00:24:55.016 --> 00:24:55.316 A:middle
Thank you.

00:24:56.516 --> 00:25:01.500 A:middle
[ Applause ]

00:24:56.516 --> 00:25:01.500 A:middle
[ Applause ]

00:25:06.056 --> 00:25:08.626 A:middle
&gt;&gt; So thank you very
much Matthieu.

00:25:08.626 --> 00:25:12.386 A:middle
I really like the new
Console, it is glorious to use.

00:25:13.176 --> 00:25:17.266 A:middle
So let's talk about the
new Unified Logging System

00:25:17.266 --> 00:25:18.556 A:middle
and how you actually use it.

00:25:19.156 --> 00:25:21.896 A:middle
So to start off with
here's a summary

00:25:21.896 --> 00:25:23.676 A:middle
of all the new APIs
that you'll have.

00:25:24.346 --> 00:25:26.806 A:middle
Os log is your basic logging API

00:25:26.806 --> 00:25:29.786 A:middle
that logs something
with default mode.

00:25:30.096 --> 00:25:34.746 A:middle
Os log info is the call that
by default sends log messages

00:25:34.746 --> 00:25:40.006 A:middle
into memory and that's for the
additional timely information

00:25:40.006 --> 00:25:40.866 A:middle
that you want to gather.

00:25:41.526 --> 00:25:44.186 A:middle
Os log debug is for your
high-frequency debugging.

00:25:44.416 --> 00:25:47.606 A:middle
And then there's os log
error and os log fault

00:25:47.606 --> 00:25:49.566 A:middle
for generating a
fault and an error.

00:25:49.566 --> 00:25:52.076 A:middle
And the last call
here is os log create

00:25:52.336 --> 00:25:54.446 A:middle
that creates a log
object you can then use

00:25:54.446 --> 00:25:55.846 A:middle
to customize your behavior.

00:25:56.226 --> 00:25:58.216 A:middle
So let's dive into that
one a little bit more

00:25:58.216 --> 00:26:00.836 A:middle
because it's probably the one
that's least familiar in terms

00:25:58.216 --> 00:26:00.836 A:middle
because it's probably the one
that's least familiar in terms

00:26:00.836 --> 00:26:02.636 A:middle
of analogy to other stuff.

00:26:03.316 --> 00:26:06.776 A:middle
So we have a call os log
create it takes two parameters,

00:26:06.816 --> 00:26:09.256 A:middle
the name of the subsystem
and the name of the category.

00:26:09.256 --> 00:26:12.876 A:middle
And what it does is it creates
a thread-safe singleton object

00:26:13.166 --> 00:26:14.476 A:middle
that controls the behavior

00:26:14.476 --> 00:26:16.526 A:middle
of the log calls
that you pass it to.

00:26:17.626 --> 00:26:21.006 A:middle
So by default it ends up having
the system-wide behavior,

00:26:21.366 --> 00:26:24.606 A:middle
but you can customize it to
have specific behaviors using

00:26:24.606 --> 00:26:26.666 A:middle
profiles or the log
command line tool.

00:26:26.916 --> 00:26:30.676 A:middle
The way you use it is you simply
pass it as the first parameter

00:26:30.676 --> 00:26:31.686 A:middle
to all of the other calls.

00:26:31.686 --> 00:26:35.786 A:middle
So here I call os log and
that first parameter is log,

00:26:35.786 --> 00:26:39.126 A:middle
which is the value that got
returned from os log create.

00:26:40.846 --> 00:26:44.186 A:middle
What that does is it causes
a reference to the category

00:26:44.186 --> 00:26:47.396 A:middle
and subsystem that was
defined with that log object

00:26:47.636 --> 00:26:50.706 A:middle
to be stored with every log
message that it's used with,

00:26:51.286 --> 00:26:53.766 A:middle
which then can be used
on the backend as you saw

00:26:53.996 --> 00:26:55.656 A:middle
to filter and display messages.

00:26:57.066 --> 00:27:00.686 A:middle
So if you don't care about
having your own subsystem

00:26:57.066 --> 00:27:00.686 A:middle
So if you don't care about
having your own subsystem

00:27:00.686 --> 00:27:02.996 A:middle
and category, then
the other option is

00:27:02.996 --> 00:27:05.036 A:middle
to simply pass an
os log default,

00:27:05.036 --> 00:27:07.726 A:middle
which is a default log object
that we always provide.

00:27:08.026 --> 00:27:11.236 A:middle
It doesn't have a subsystem
or category, but it's useful

00:27:11.236 --> 00:27:13.696 A:middle
if you really don't care
about that kind of control.

00:27:14.196 --> 00:27:17.366 A:middle
Built-in type formatters.

00:27:18.266 --> 00:27:21.446 A:middle
We all spend way
too much code trying

00:27:21.446 --> 00:27:24.106 A:middle
to convert binary
information into strings

00:27:24.106 --> 00:27:25.056 A:middle
so that we can log them.

00:27:25.396 --> 00:27:28.776 A:middle
The Unified Logging System takes
over much of that work for you

00:27:28.776 --> 00:27:31.876 A:middle
by providing built-in
formatters for well-known types.

00:27:32.396 --> 00:27:35.746 A:middle
What's even more
important is that we save

00:27:35.746 --> 00:27:39.006 A:middle
that conversion work until
we display the log message,

00:27:39.266 --> 00:27:41.626 A:middle
so you don't have to
pay for that conversion

00:27:41.626 --> 00:27:43.576 A:middle
at the time you generate
the log message.

00:27:44.096 --> 00:27:49.066 A:middle
Avoiding all of the different
kinds of observer effects.

00:27:50.066 --> 00:27:52.506 A:middle
So just to talk a
little bit about it.

00:27:52.596 --> 00:27:55.206 A:middle
There's built-in decoding
for some common values.

00:27:55.626 --> 00:28:00.066 A:middle
The syntax is instead of doing
%d you would do %(time t)d

00:27:55.626 --> 00:28:00.066 A:middle
The syntax is instead of doing
%d you would do %(time t)d

00:28:00.066 --> 00:28:06.846 A:middle
and that basically says
that that decimal value

00:28:06.846 --> 00:28:10.566 A:middle
that you're passing in is
actually a time t and that

00:28:10.566 --> 00:28:13.686 A:middle
when it gets printed it should
be printed as a time string.

00:28:14.406 --> 00:28:18.546 A:middle
Likewise, for errno, if you
do %(errno)d it converts

00:28:18.546 --> 00:28:21.076 A:middle
that into a human readable
form of that errno.

00:28:23.606 --> 00:28:29.286 A:middle
We also have a new basic time
format % capital P not lowercase

00:28:29.286 --> 00:28:32.236 A:middle
P, which has been around
for a while that you can use

00:28:32.236 --> 00:28:34.126 A:middle
to display arbitrary
binary data.

00:28:34.766 --> 00:28:37.656 A:middle
And there's decoders for
all sorts of common type

00:28:37.656 --> 00:28:39.906 A:middle
so for instance %(uuid t).

00:28:40.776 --> 00:28:45.806 A:middle
And in fact, here is a list
of all of the current codes

00:28:45.806 --> 00:28:48.346 A:middle
which we have, so all the
different kinds of time values,

00:28:48.686 --> 00:28:53.946 A:middle
errno, uuids, all the
different kinds of network IDs.

00:28:54.486 --> 00:28:58.396 A:middle
And we do anticipate having more
coming out in future releases.

00:28:58.966 --> 00:29:02.796 A:middle
So Per Parameter Privacy.

00:28:58.966 --> 00:29:02.796 A:middle
So Per Parameter Privacy.

00:29:04.186 --> 00:29:07.646 A:middle
Privacy is now handled on a
parameter by parameter basis,

00:29:08.176 --> 00:29:11.046 A:middle
scalars and static strings
are assumed to be public.

00:29:11.806 --> 00:29:14.766 A:middle
On the other hand, dynamic
strings, collections

00:29:14.766 --> 00:29:16.436 A:middle
and objects are assumed

00:29:16.436 --> 00:29:20.186 A:middle
to contain private information
unless you tell us otherwise.

00:29:21.226 --> 00:29:23.326 A:middle
So that behavior
can be overridden

00:29:23.746 --> 00:29:25.376 A:middle
on a per-parameter basis.

00:29:25.666 --> 00:29:31.386 A:middle
So instead of doing %@ to say
oh this is an object that I want

00:29:31.386 --> 00:29:34.946 A:middle
to include in my log
you do %(public)@

00:29:35.256 --> 00:29:37.686 A:middle
to tell us it's an
object and everything

00:29:37.686 --> 00:29:40.546 A:middle
in that object is public, so you
don't have to worry about it.

00:29:41.206 --> 00:29:43.606 A:middle
Alternatively, if you
happen to have a case

00:29:43.606 --> 00:29:45.846 A:middle
where you have some integer

00:29:45.846 --> 00:29:50.366 A:middle
that for some reason is secret
you could do a %(private)d

00:29:50.606 --> 00:29:54.116 A:middle
to log that data as being
private information.

00:29:54.676 --> 00:29:59.806 A:middle
You can by the way, combine
privacy and formatting.

00:30:00.046 --> 00:30:01.596 A:middle
So I could do %(public,

00:30:01.836 --> 00:30:06.986 A:middle
uuid t).16P to basically
say there's a uuid,

00:30:06.986 --> 00:30:10.376 A:middle
it's public information and
it gets formatted as such.

00:30:12.116 --> 00:30:14.076 A:middle
So let's give a little
bit of example

00:30:14.076 --> 00:30:18.056 A:middle
of what the difference this
makes to you as you code.

00:30:18.706 --> 00:30:21.366 A:middle
So log message simplification.

00:30:21.536 --> 00:30:23.516 A:middle
Okay, here's the old
way of doing things.

00:30:23.976 --> 00:30:25.726 A:middle
All right, first off
you have to check

00:30:25.726 --> 00:30:29.096 A:middle
and say is the current log level
enabled before you call anything

00:30:29.236 --> 00:30:34.166 A:middle
and then let's say you have a
uuid that you need to display.

00:30:34.166 --> 00:30:36.716 A:middle
Well the first thing you
have to do is call unparse

00:30:36.716 --> 00:30:38.056 A:middle
to convert that into a string.

00:30:38.746 --> 00:30:41.716 A:middle
You also happen to have a socket
address that you then need

00:30:41.716 --> 00:30:43.386 A:middle
to also convert into a string.

00:30:44.386 --> 00:30:46.326 A:middle
Then you call NSLog with all

00:30:46.326 --> 00:30:49.956 A:middle
that stuff that's been
converted, but also of course,

00:30:49.956 --> 00:30:52.146 A:middle
you have to pass the
function name and the file

00:30:52.146 --> 00:30:53.146 A:middle
and the line number for you.

00:30:53.856 --> 00:30:55.986 A:middle
And then when you're done
with that don't forget

00:30:55.986 --> 00:30:58.996 A:middle
to free the string that was
created for the socket address.

00:30:59.606 --> 00:31:00.506 A:middle
And you're done.

00:30:59.606 --> 00:31:00.506 A:middle
And you're done.

00:31:01.256 --> 00:31:02.336 A:middle
Now here's the new way.

00:31:03.306 --> 00:31:06.206 A:middle
You simply call os
log info it takes care

00:31:06.206 --> 00:31:07.606 A:middle
of checking the log
level for you.

00:31:07.996 --> 00:31:10.286 A:middle
In this case I'm passing
the default log object.

00:31:11.366 --> 00:31:16.136 A:middle
I specify in my format string
that a given parameter is a uuid

00:31:16.136 --> 00:31:18.926 A:middle
and a socket address, so I
don't do any conversions then.

00:31:19.216 --> 00:31:22.596 A:middle
None of the work happens now the
work happens when we display it.

00:31:23.286 --> 00:31:26.076 A:middle
And then I simply pass the
parameters, it's that easy.

00:31:27.516 --> 00:31:35.546 A:middle
[ Applause ]

00:31:36.046 --> 00:31:38.046 A:middle
While I'm doing examples let
me give a little bit more

00:31:38.046 --> 00:31:40.286 A:middle
of an example of using
some of the other APIs.

00:31:41.516 --> 00:31:43.186 A:middle
So here I do a log create

00:31:43.506 --> 00:31:46.936 A:middle
and I specify a subsystem
and a category.

00:31:46.936 --> 00:31:49.196 A:middle
The subsystem is
com.apple.logging.example

00:31:49.616 --> 00:31:51.046 A:middle
and the category is general

00:31:51.046 --> 00:31:53.306 A:middle
and so this is my
general log object.

00:31:53.756 --> 00:31:55.986 A:middle
I do the same thing, but
this time I create one

00:31:55.986 --> 00:31:57.486 A:middle
with a category timestamp.

00:31:57.636 --> 00:32:02.206 A:middle
You know, the basic
simple call, I call os log,

00:31:57.636 --> 00:32:02.206 A:middle
You know, the basic
simple call, I call os log,

00:32:02.206 --> 00:32:03.796 A:middle
I use the general log object,

00:32:04.146 --> 00:32:05.896 A:middle
pass it a string,
it gets logged.

00:32:07.146 --> 00:32:08.916 A:middle
Here's a little bit more
of an interesting case.

00:32:09.326 --> 00:32:11.966 A:middle
I call os log info, so this is
something that's going to go

00:32:11.966 --> 00:32:14.076 A:middle
into the memory buffer
and only get saved

00:32:14.116 --> 00:32:15.426 A:middle
if there's a Fault or an Error.

00:32:16.196 --> 00:32:20.176 A:middle
And then in my format
string I specify %(public)s

00:32:20.396 --> 00:32:23.276 A:middle
for the filename because the
filename is a dynamic string

00:32:23.426 --> 00:32:26.386 A:middle
and we would assume that it's
private information unless you

00:32:26.386 --> 00:32:27.496 A:middle
tell us that it's public.

00:32:28.246 --> 00:32:30.136 A:middle
A little bit more
complicated case.

00:32:30.456 --> 00:32:32.646 A:middle
I open the file, I
check on an error

00:32:32.866 --> 00:32:36.266 A:middle
if it returns an error
I then call os log error

00:32:36.906 --> 00:32:39.186 A:middle
and in my format
string I again say

00:32:39.186 --> 00:32:42.466 A:middle
that the filename is
public information and I say

00:32:42.466 --> 00:32:44.686 A:middle
to format the errno as an errno.

00:32:45.786 --> 00:32:49.806 A:middle
Another very example, this
time I'm calling fstat,

00:32:49.866 --> 00:32:52.986 A:middle
but gee I'm calling fstat after
I already have the file open,

00:32:52.986 --> 00:32:55.046 A:middle
so maybe something
weird is happening

00:32:55.046 --> 00:32:56.906 A:middle
if I'm getting an error on that.

00:32:57.236 --> 00:33:00.016 A:middle
So I call os log fault,
same kinds of parameters.

00:32:57.236 --> 00:33:00.016 A:middle
So I call os log fault,
same kinds of parameters.

00:33:00.496 --> 00:33:04.636 A:middle
And then the very last
thing is I call os log info,

00:33:04.876 --> 00:33:07.876 A:middle
but this time I pass
my timestamp log object

00:33:08.446 --> 00:33:11.606 A:middle
and then I basically dump all
the timestamps from that file.

00:33:11.856 --> 00:33:13.876 A:middle
What that means is
when I go off and look

00:33:13.876 --> 00:33:17.986 A:middle
at the Console I can
basically simply filter it

00:33:17.986 --> 00:33:20.426 A:middle
and say all I want to see
is that timestamp data

00:33:20.736 --> 00:33:22.826 A:middle
or I don't want to see
that timestamp data

00:33:22.826 --> 00:33:24.096 A:middle
because I'm looking
at something else.

00:33:24.666 --> 00:33:29.366 A:middle
So the new Unified Logging
System isn't the only change

00:33:29.366 --> 00:33:30.146 A:middle
in this release.

00:33:30.146 --> 00:33:33.396 A:middle
There are also some improvements
to the Activity Tracing System.

00:33:34.356 --> 00:33:36.896 A:middle
Activities are now
first-class objects

00:33:36.926 --> 00:33:38.476 A:middle
that can be stored and re-used.

00:33:39.926 --> 00:33:42.696 A:middle
And the act of creation
gives you control

00:33:42.696 --> 00:33:47.076 A:middle
over the relationships between
the various activity objects

00:33:47.076 --> 00:33:48.516 A:middle
at the point at which
you create them.

00:33:48.516 --> 00:33:51.656 A:middle
There's also some new APIs

00:33:51.656 --> 00:33:55.886 A:middle
that scope the activities
within your code.

00:33:56.976 --> 00:33:59.376 A:middle
So here's all of the new APIs.

00:33:59.676 --> 00:34:03.206 A:middle
So there's a new os activity
create that works just

00:33:59.676 --> 00:34:03.206 A:middle
So there's a new os activity
create that works just

00:34:03.206 --> 00:34:07.076 A:middle
like os log create to create a
log object only this time it's

00:34:07.076 --> 00:34:08.646 A:middle
identifying an activity.

00:34:08.646 --> 00:34:12.616 A:middle
There's two calls that
you can then use to apply

00:34:12.616 --> 00:34:16.826 A:middle
that to your code os activity
scope and os activity apply.

00:34:17.196 --> 00:34:19.045 A:middle
I'll show you examples
in a moment

00:34:19.045 --> 00:34:20.846 A:middle
about how they work differently.

00:34:21.386 --> 00:34:24.536 A:middle
And finally, there's os
activity label useraction

00:34:24.996 --> 00:34:26.596 A:middle
that labels an activity

00:34:26.596 --> 00:34:29.786 A:middle
as a user action UI-based
activity basically.

00:34:31.146 --> 00:34:32.946 A:middle
So let me give an
example of doing this.

00:34:33.376 --> 00:34:36.996 A:middle
First off, I call os activity
create to create an activity

00:34:36.996 --> 00:34:37.886 A:middle
that I'm calling init.

00:34:38.286 --> 00:34:40.726 A:middle
Notice that the second parameter

00:34:40.726 --> 00:34:43.366 A:middle
of this function is a
constant os activity current.

00:34:43.676 --> 00:34:46.815 A:middle
That's basically saying this
init activity is subordinate

00:34:46.856 --> 00:34:49.255 A:middle
to whatever happens to
be the current activity.

00:34:50.416 --> 00:34:54.216 A:middle
Now I go off and do os activity
create for a verify activity,

00:34:54.676 --> 00:34:58.036 A:middle
but my second parameter is the
init activity I just created.

00:34:58.036 --> 00:34:59.756 A:middle
So now I've created
the hierarchy

00:34:59.756 --> 00:35:02.356 A:middle
between these activities
manually.

00:34:59.756 --> 00:35:02.356 A:middle
between these activities
manually.

00:35:04.006 --> 00:35:06.716 A:middle
So now I have a block of
code, you know, if it's ready

00:35:06.716 --> 00:35:09.166 A:middle
and then I have some code
between a couple of braces.

00:35:09.626 --> 00:35:12.716 A:middle
The first thing I do is
I call os activity scope

00:35:13.086 --> 00:35:15.326 A:middle
and I'm passing in this
case the verify activity.

00:35:16.006 --> 00:35:18.546 A:middle
What that does is it means
all of the rest of the code

00:35:18.546 --> 00:35:21.486 A:middle
in that block is considered
in scope of that activity

00:35:21.486 --> 00:35:23.366 A:middle
until I hit that closing brace.

00:35:24.046 --> 00:35:27.946 A:middle
There's no need to have to
remember to call os activity end

00:35:27.946 --> 00:35:30.276 A:middle
at the end it just
automatically does it for you.

00:35:30.966 --> 00:35:32.216 A:middle
And as soon as you leave

00:35:32.216 --> 00:35:35.206 A:middle
that scope you're now no
longer part of that activity.

00:35:36.726 --> 00:35:39.826 A:middle
The other call that we're
providing is os activity apply,

00:35:40.506 --> 00:35:45.126 A:middle
you pass the activity object
and then you pass it a block

00:35:45.126 --> 00:35:47.536 A:middle
and then it basically
executes that block

00:35:47.536 --> 00:35:49.886 A:middle
with that activity as the scope.

00:35:50.776 --> 00:35:55.096 A:middle
Tools, so Matthieu already
gave you a great demo

00:35:55.096 --> 00:35:57.106 A:middle
of the new Console,
I'll just run

00:35:57.106 --> 00:35:59.076 A:middle
through the functionality
very quickly.

00:35:59.266 --> 00:36:02.626 A:middle
You can view live
content from the system.

00:35:59.266 --> 00:36:02.626 A:middle
You can view live
content from the system.

00:36:03.096 --> 00:36:04.616 A:middle
You can open log archives.

00:36:05.196 --> 00:36:08.786 A:middle
You can use the new activity
centric view of logging tracing.

00:36:09.556 --> 00:36:11.636 A:middle
You can use advanced
filtering and searching

00:36:12.376 --> 00:36:14.826 A:middle
and you can see logs
from your devices.

00:36:14.826 --> 00:36:17.926 A:middle
Now let me talk a little bit

00:36:17.926 --> 00:36:22.166 A:middle
about the new log
command line tool.

00:36:22.846 --> 00:36:25.966 A:middle
It provides all of the same
exact functionality as Console,

00:36:25.966 --> 00:36:27.116 A:middle
but from the command line.

00:36:27.666 --> 00:36:32.286 A:middle
So you want to stream live
log messages you simply do

00:36:32.516 --> 00:36:33.296 A:middle
log stream.

00:36:33.996 --> 00:36:36.686 A:middle
If you want to get fancy,
you can do log stream--

00:36:36.686 --> 00:36:41.176 A:middle
predicate eventMessage contains
my message and what it will do

00:36:41.176 --> 00:36:43.566 A:middle
for you is it will stream
all of the log messages

00:36:43.566 --> 00:36:45.286 A:middle
that contain the
string my message.

00:36:47.096 --> 00:36:51.266 A:middle
Just like the Console it could
let you open up a log archives.

00:36:51.566 --> 00:36:56.026 A:middle
You can display a log
archive using the log command.

00:36:56.486 --> 00:36:59.146 A:middle
You do log show and then
give it the name of the file

00:36:59.556 --> 00:37:01.576 A:middle
and it displays the
contents of that log file.

00:36:59.556 --> 00:37:01.576 A:middle
and it displays the
contents of that log file.

00:37:03.446 --> 00:37:07.706 A:middle
Another thing you can do on
macOS is use the log command

00:37:08.016 --> 00:37:09.976 A:middle
to actually change
the configuration

00:37:09.976 --> 00:37:11.786 A:middle
of your subsystems
and categories.

00:37:12.076 --> 00:37:15.976 A:middle
So here's an example,
I do log config --

00:37:16.136 --> 00:37:22.116 A:middle
mode level:debug and then
-system com.mycorp.myapp

00:37:22.296 --> 00:37:24.916 A:middle
and what that does is it
basically enables logging

00:37:24.916 --> 00:37:28.316 A:middle
on that subsystem for
you on your macOS.

00:37:28.886 --> 00:37:32.206 A:middle
So coming soon.

00:37:33.076 --> 00:37:36.126 A:middle
We do appreciate that
many of you are going

00:37:36.126 --> 00:37:40.556 A:middle
to be developing applications
iOS 10, but sticking

00:37:40.556 --> 00:37:44.906 A:middle
with macOS 10.11 on your
Macs, i.e. El Capitan.

00:37:44.906 --> 00:37:51.186 A:middle
Tools for being able to access
the new logs from El Capitan are

00:37:51.186 --> 00:37:58.506 A:middle
in fact coming, but in the
meantime there is a sort

00:37:58.506 --> 00:38:02.746 A:middle
of a hackish workaround, which
is you can run the new tools

00:37:58.506 --> 00:38:02.746 A:middle
of a hackish workaround, which
is you can run the new tools

00:38:02.746 --> 00:38:04.026 A:middle
from inside the simulator.

00:38:04.436 --> 00:38:06.846 A:middle
So xcrun simctl spawn booted

00:38:07.156 --> 00:38:09.956 A:middle
and then you give log show
system logs.logarchive

00:38:09.956 --> 00:38:12.356 A:middle
and you can run all
those commands just

00:38:12.506 --> 00:38:13.856 A:middle
like you would otherwise.

00:38:14.266 --> 00:38:15.956 A:middle
The alternative is
coming at some point.

00:38:16.516 --> 00:38:20.996 A:middle
[ Applause ]

00:38:21.496 --> 00:38:22.446 A:middle
So let me talk a moment

00:38:22.446 --> 00:38:25.236 A:middle
about best practices,
logging etiquette.

00:38:25.996 --> 00:38:30.476 A:middle
Try to ensure that your messages
only contain really useful

00:38:30.476 --> 00:38:33.056 A:middle
information, don't have
a lot of extra whitespace

00:38:33.056 --> 00:38:35.216 A:middle
or filler data in there.

00:38:35.426 --> 00:38:36.556 A:middle
Try to keep it compact.

00:38:38.736 --> 00:38:40.236 A:middle
Let us do the formatting,

00:38:40.476 --> 00:38:43.736 A:middle
leverage the built-in
formatters that we provided.

00:38:44.026 --> 00:38:46.976 A:middle
The more work you do
to format your strings

00:38:46.976 --> 00:38:50.136 A:middle
in advance the more that's going
to slow down your app as opposed

00:38:50.136 --> 00:38:53.326 A:middle
to letting us do the
formatting at the point

00:38:53.326 --> 00:38:55.526 A:middle
at which it gets output.

00:38:55.526 --> 00:38:58.756 A:middle
Avoid wrapping os log
APIs in other functions.

00:38:59.096 --> 00:39:02.356 A:middle
If you wrap it in another
function you then lose our

00:38:59.096 --> 00:39:02.356 A:middle
If you wrap it in another
function you then lose our

00:39:02.356 --> 00:39:06.036 A:middle
ability to collect the file
and line number for you.

00:39:07.176 --> 00:39:11.146 A:middle
If you absolutely have to
wrap our APIs, then wrap them

00:39:11.146 --> 00:39:12.876 A:middle
in macros and not in functions.

00:39:14.326 --> 00:39:17.926 A:middle
Only log what's needed from
dictionaries and archives.

00:39:17.926 --> 00:39:20.266 A:middle
Dictionaries, I mean
dictionaries and arrays.

00:39:21.156 --> 00:39:23.846 A:middle
They take up a lot of space on
disk, which means they're going

00:39:23.846 --> 00:39:26.386 A:middle
to pushing out other log
messages that people may need.

00:39:26.946 --> 00:39:29.616 A:middle
Try to only log the parts
of those that you really,

00:39:29.616 --> 00:39:31.726 A:middle
really need for your logs.

00:39:32.716 --> 00:39:38.536 A:middle
And avoid logging in
tight loops in code.

00:39:38.666 --> 00:39:41.186 A:middle
So a brief word on what
we think the best uses

00:39:41.186 --> 00:39:42.496 A:middle
of our new APIs are.

00:39:43.106 --> 00:39:48.306 A:middle
Os log to log basically
details on your basic details

00:39:48.306 --> 00:39:49.366 A:middle
on logging information.

00:39:49.366 --> 00:39:52.716 A:middle
This is the kind of information
you may need from hours ago

00:39:52.716 --> 00:39:55.416 A:middle
to help debug your problem.

00:39:55.416 --> 00:39:58.236 A:middle
Use os log info for
additional information

00:39:58.236 --> 00:39:59.536 A:middle
that is very, very timely.

00:40:00.046 --> 00:40:01.236 A:middle
So use this first
stuff that's going

00:40:01.236 --> 00:40:02.816 A:middle
to get stale very, very quickly.

00:40:03.826 --> 00:40:07.676 A:middle
Use os log debug for high volume
debugging during development.

00:40:08.636 --> 00:40:12.496 A:middle
Error in the case that you want
additional information collected

00:40:12.496 --> 00:40:13.916 A:middle
and captured for your app.

00:40:14.706 --> 00:40:18.056 A:middle
And fault if you want additional
information you want collected

00:40:18.056 --> 00:40:19.066 A:middle
about the system.

00:40:19.646 --> 00:40:24.506 A:middle
A quick word on gathering logs.

00:40:24.976 --> 00:40:27.206 A:middle
Sydiagnose is the
preferred method

00:40:27.206 --> 00:40:29.946 A:middle
to capture data for bug reports.

00:40:30.326 --> 00:40:32.756 A:middle
If you do sysdiagnose
the logging data

00:40:33.046 --> 00:40:35.976 A:middle
in the system I've just
described will appear

00:40:35.976 --> 00:40:39.486 A:middle
within that archive as a file
called system logs.archive.

00:40:41.416 --> 00:40:44.756 A:middle
You can use key-chords
to trigger sysdiagnose.

00:40:45.166 --> 00:40:47.916 A:middle
If you do a sysdiagnose on an
Apple watch it will trigger

00:40:47.916 --> 00:40:49.876 A:middle
on both the watch
and the paired phone.

00:40:51.006 --> 00:40:54.216 A:middle
And then you can use iTunes
to transfer that archive

00:40:54.216 --> 00:40:58.036 A:middle
over to your Mac to
do something with.

00:40:58.316 --> 00:41:02.006 A:middle
This is the file that Apple
is going to be wanting to have

00:40:58.316 --> 00:41:02.006 A:middle
This is the file that Apple
is going to be wanting to have

00:41:02.006 --> 00:41:04.416 A:middle
from you when you talk
to us about a problem.

00:41:04.616 --> 00:41:07.096 A:middle
So either attaching it to
the radar or delivering it

00:41:07.096 --> 00:41:08.386 A:middle
to developer technical support.

00:41:08.386 --> 00:41:11.466 A:middle
So here's the various
key-chords.

00:41:11.466 --> 00:41:15.556 A:middle
Shift + Control + Option
+ Command + Period (.)

00:41:15.556 --> 00:41:16.396 A:middle
for Mac OS.

00:41:16.706 --> 00:41:20.026 A:middle
Volume up + Volume
Down + Power for iOS.

00:41:20.026 --> 00:41:23.606 A:middle
On the phone you'll get a slight
vibration, on iPad you won't.

00:41:24.266 --> 00:41:27.156 A:middle
On watchOS it's press and
hold the digital crown

00:41:27.156 --> 00:41:28.906 A:middle
and side button for
a full second.

00:41:28.966 --> 00:41:31.026 A:middle
If you don't present it long
enough you'll actually get a

00:41:31.026 --> 00:41:32.196 A:middle
screenshot instead.

00:41:32.196 --> 00:41:37.546 A:middle
There will be a slight haptic
vibration when you trigger it.

00:41:37.546 --> 00:41:42.976 A:middle
Play/Pause + Volume Down tvOS.

00:41:43.576 --> 00:41:47.036 A:middle
Note that on older remotes
for the Apple TV you have

00:41:47.036 --> 00:41:49.416 A:middle
to actually hold it down
for five seconds to trigger.

00:41:50.606 --> 00:41:55.166 A:middle
Deprecations, so as part
of this there be some APIs

00:41:55.166 --> 00:41:56.946 A:middle
that we're going to
be saying farewell to.

00:41:57.286 --> 00:42:02.006 A:middle
First off, all of the ASL
logging APIs are now superseded

00:41:57.286 --> 00:42:02.006 A:middle
First off, all of the ASL
logging APIs are now superseded

00:42:02.006 --> 00:42:03.586 A:middle
by these new APIs
and, therefore,

00:42:03.586 --> 00:42:05.566 A:middle
those old APIs are deprecated.

00:42:06.296 --> 00:42:07.856 A:middle
There is an interesting
edge case though.

00:42:08.466 --> 00:42:11.946 A:middle
A new API for searching
the log data is not going

00:42:11.946 --> 00:42:13.486 A:middle
to be made public
in this release.

00:42:13.516 --> 00:42:15.366 A:middle
What that means is that
there's no equivalent

00:42:15.416 --> 00:42:17.186 A:middle
to asl search functionality.

00:42:17.896 --> 00:42:21.446 A:middle
If you absolutely depend on
asl search in your system

00:42:21.866 --> 00:42:25.326 A:middle
that may be a reason to wait for
adopting the new logging system.

00:42:27.976 --> 00:42:32.196 A:middle
There's also some
APIs from activities

00:42:32.196 --> 00:42:33.186 A:middle
that are being deprecated.

00:42:33.776 --> 00:42:36.796 A:middle
Instead of doing
os activity start

00:42:36.796 --> 00:42:41.336 A:middle
and os activity end we now have
you do the os activity create

00:42:41.336 --> 00:42:44.086 A:middle
as I showed you and then
call either scope or apply

00:42:44.086 --> 00:42:46.486 A:middle
to apply it to a block of code.

00:42:46.486 --> 00:42:48.396 A:middle
Os activity breadcrumb
gets replaced

00:42:48.396 --> 00:42:51.306 A:middle
with os activity user label.

00:42:51.516 --> 00:42:53.786 A:middle
Os trace with payload
gets replaced

00:42:53.786 --> 00:42:55.466 A:middle
by any of the os log calls.

00:42:56.326 --> 00:42:59.366 A:middle
Note that these functions as
of this release are now no ops.

00:42:59.366 --> 00:43:01.236 A:middle
So if you continue calling
these they're not going

00:42:59.366 --> 00:43:01.236 A:middle
So if you continue calling
these they're not going

00:43:01.236 --> 00:43:01.876 A:middle
to do anything.

00:43:03.336 --> 00:43:09.096 A:middle
So in summary, the new logging
system is faster, easier to use

00:43:09.446 --> 00:43:10.696 A:middle
and gives you more control,

00:43:10.856 --> 00:43:13.736 A:middle
but it does require using
new APIs and new tools.

00:43:14.656 --> 00:43:17.656 A:middle
Related sessions, I've
mentioned a few times back

00:43:17.656 --> 00:43:21.276 A:middle
in 2014 Activity
Tracing, this is the talk

00:43:21.526 --> 00:43:22.656 A:middle
in which we talk about that.

00:43:22.656 --> 00:43:24.116 A:middle
So if you want go
back and look at that.

00:43:24.116 --> 00:43:26.936 A:middle
And if you want to
get more information

00:43:26.936 --> 00:43:28.766 A:middle
about this talk, that's the URL.

00:43:29.326 --> 00:43:29.976 A:middle
Thank you very much.

00:43:30.516 --> 00:43:34.500 A:middle
[ Applause ]
