WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:17.500 A:middle
[ Music ]

00:00:24.516 --> 00:00:29.326 A:middle
[ Applause ]

00:00:29.826 --> 00:00:30.266 A:middle
&gt;&gt; Thank you.

00:00:30.306 --> 00:00:30.856 A:middle
Thank you.

00:00:30.856 --> 00:00:31.646 A:middle
Good morning.

00:00:34.066 --> 00:00:35.636 A:middle
Thanks for coming
and being here today.

00:00:35.636 --> 00:00:41.056 A:middle
This is NSURLSession: New
Features and Best Practices.

00:00:41.466 --> 00:00:42.946 A:middle
My name is Jeff Jenkins.

00:00:42.946 --> 00:00:44.246 A:middle
I'm a Software Engineer

00:00:44.246 --> 00:00:46.096 A:middle
in the Internet Technologies
Department.

00:00:46.096 --> 00:00:48.696 A:middle
I think we have some great
information that we'd

00:00:48.696 --> 00:00:51.886 A:middle
like to share with you today
within the NSURLSession.

00:00:51.886 --> 00:00:54.726 A:middle
So why don't we just get started
and jump right into an agenda

00:00:54.726 --> 00:00:57.526 A:middle
and show you some of the
things we're going to look at.

00:00:58.256 --> 00:01:02.626 A:middle
The NSURLSession API provides
really a rich set of classes


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.256 --> 00:01:02.626 A:middle
The NSURLSession API provides
really a rich set of classes

00:01:03.016 --> 00:01:05.286 A:middle
and methods that
simplify the complexities

00:01:05.286 --> 00:01:06.836 A:middle
of modern day networking.

00:01:07.276 --> 00:01:09.636 A:middle
Today I'm going to discuss

00:01:09.636 --> 00:01:12.996 A:middle
with you how the
NSURLSession API has evolved.

00:01:12.996 --> 00:01:15.036 A:middle
And I'm going to share
with you some new features

00:01:15.516 --> 00:01:17.766 A:middle
and enhancements that
we've made to this API.

00:01:17.766 --> 00:01:20.656 A:middle
And we're going to have a
demonstration that'll show you

00:01:20.656 --> 00:01:23.846 A:middle
some of these features and
actions in a real application.

00:01:24.396 --> 00:01:28.696 A:middle
I'll spend some time
discussing security.

00:01:29.406 --> 00:01:31.866 A:middle
It's important for your
users that their data

00:01:32.066 --> 00:01:34.056 A:middle
and privacy be safeguarded.

00:01:34.236 --> 00:01:37.276 A:middle
If it's important to your users,
we know it's important to you

00:01:37.276 --> 00:01:38.646 A:middle
and to your applications.

00:01:39.236 --> 00:01:40.496 A:middle
So I'm going to share
with you some

00:01:40.496 --> 00:01:43.336 A:middle
of the enhancements we've made
to technologies in NSURLSession

00:01:43.336 --> 00:01:44.826 A:middle
with regards to use security.

00:01:45.406 --> 00:01:50.636 A:middle
Now, during the entirety of this
session I'm going to be sharing

00:01:50.636 --> 00:01:53.146 A:middle
with you some best
practices and tips

00:01:53.416 --> 00:01:56.086 A:middle
so that you can make your
apps even more incredible.

00:01:56.086 --> 00:02:02.946 A:middle
Now, let's start by looking at
the highest level APIs available


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:56.086 --> 00:02:02.946 A:middle
Now, let's start by looking at
the highest level APIs available

00:02:02.946 --> 00:02:05.686 A:middle
to applications across
all of Apple's platforms.

00:02:06.956 --> 00:02:09.235 A:middle
For many years, Foundation
provided the

00:02:09.235 --> 00:02:10.816 A:middle
NSURLConnection API.

00:02:11.656 --> 00:02:15.346 A:middle
Now, NSURLConnection was a
great network abstraction.

00:02:15.546 --> 00:02:18.116 A:middle
It enabled a lot of great
fundamental networking

00:02:18.216 --> 00:02:20.466 A:middle
functionality for you
developers in your apps.

00:02:21.096 --> 00:02:22.756 A:middle
But you know, we
asked ourselves:

00:02:23.126 --> 00:02:24.066 A:middle
What could we do better?

00:02:24.796 --> 00:02:27.486 A:middle
And what is it that you
developers are asking us to do?

00:02:27.796 --> 00:02:30.346 A:middle
And we sat down and
we talked about this.

00:02:30.346 --> 00:02:32.616 A:middle
And we found that a lot
of the answers had to do

00:02:32.616 --> 00:02:34.926 A:middle
with configuring networking --

00:02:34.926 --> 00:02:37.586 A:middle
that configuring network
in an app can be difficult,

00:02:37.586 --> 00:02:39.276 A:middle
especially if you need
to do different types

00:02:39.276 --> 00:02:41.786 A:middle
of networking all from
the same application.

00:02:43.456 --> 00:02:44.496 A:middle
So, we took action.

00:02:45.186 --> 00:02:50.626 A:middle
We officially deprecated the
NSURLConnection API in 2015.

00:02:50.626 --> 00:02:53.436 A:middle
And this really means we're not
adding new features to that API.

00:02:53.436 --> 00:02:56.046 A:middle
And it's really receiving
very minimal maintenance.

00:02:57.506 --> 00:03:02.346 A:middle
But prior to the official
deprecation at WWDC 2013,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.506 --> 00:03:02.346 A:middle
But prior to the official
deprecation at WWDC 2013,

00:03:02.806 --> 00:03:06.396 A:middle
we introduced NSURLSession
as the replacement API

00:03:06.396 --> 00:03:08.236 A:middle
for Foundation layer networking.

00:03:09.116 --> 00:03:11.986 A:middle
Now, we encouraged you then, we
continue to encourage you now

00:03:12.576 --> 00:03:14.946 A:middle
to move your networking
code to the NSURLSession API

00:03:15.006 --> 00:03:17.866 A:middle
in your applications today
and apps that you're going

00:03:17.866 --> 00:03:21.416 A:middle
to be developing in the future.

00:03:21.586 --> 00:03:25.036 A:middle
Now, since NSURLSession
is the best high-level API

00:03:25.036 --> 00:03:28.876 A:middle
for network programming
on Apple's platforms,

00:03:29.386 --> 00:03:32.576 A:middle
let's review some of the
basics of NSURLSession.

00:03:33.066 --> 00:03:36.726 A:middle
Now, if you want a real
in-depth detail, you know,

00:03:37.836 --> 00:03:41.396 A:middle
inside into NSURLSession, I
recommend that you go back

00:03:41.396 --> 00:03:47.246 A:middle
to WWDC of 2015, and
especially 2014, and take a look

00:03:47.246 --> 00:03:48.876 A:middle
at the videos and slides

00:03:49.296 --> 00:03:53.986 A:middle
with the sessions
regarding NSURLSession.

00:03:55.656 --> 00:03:57.856 A:middle
So, I've been praising
NSURLSession API

00:03:57.856 --> 00:04:00.756 A:middle
and recommending that
your apps use this API.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.856 --> 00:04:00.756 A:middle
and recommending that
your apps use this API.

00:04:01.726 --> 00:04:04.206 A:middle
So what really makes
NSURLSession worthy

00:04:04.206 --> 00:04:05.366 A:middle
of all this praise?

00:04:05.366 --> 00:04:09.436 A:middle
Well, some of the benefits,
we continue our great support

00:04:09.756 --> 00:04:13.936 A:middle
for the HTTP/1.1 protocol.

00:04:13.936 --> 00:04:16.315 A:middle
We also have support
for the SPDY protocol.

00:04:16.745 --> 00:04:20.136 A:middle
Now, we don't recommend that
you build new Web services based

00:04:20.136 --> 00:04:22.646 A:middle
on SPDY, but really
that you look ahead

00:04:22.876 --> 00:04:26.686 A:middle
to HTTP/2 and that protocol.

00:04:26.906 --> 00:04:31.176 A:middle
We obviously have support
for HTTP/2 in NSURLSession.

00:04:31.806 --> 00:04:34.886 A:middle
Our support is based
on RFC 7540.

00:04:35.436 --> 00:04:41.026 A:middle
And we're adding new features
of this protocol all the time.

00:04:41.236 --> 00:04:43.576 A:middle
The app transport
security, or ATS.

00:04:43.576 --> 00:04:46.706 A:middle
This is a great feature
built into NSURLSession.

00:04:47.176 --> 00:04:50.396 A:middle
It's a security feature
that improves the privacy

00:04:50.666 --> 00:04:52.726 A:middle
and data integrity
of connections

00:04:52.726 --> 00:04:55.526 A:middle
between apps and Web processes.

00:04:56.876 --> 00:04:59.506 A:middle
One of the most important
aspects of ATS is

00:04:59.856 --> 00:05:03.166 A:middle
that your apps must
use the HTTPS protocol.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.856 --> 00:05:03.166 A:middle
that your apps must
use the HTTPS protocol.

00:05:04.016 --> 00:05:06.346 A:middle
Now, at the same time it
allows you, the developer,

00:05:06.346 --> 00:05:09.316 A:middle
to implement best practices
when making connections

00:05:09.696 --> 00:05:12.146 A:middle
to remote servers
over the HTTPS.

00:05:13.746 --> 00:05:18.086 A:middle
The HTTP Strict Transport
Security, or HSTS,

00:05:18.366 --> 00:05:20.716 A:middle
another great feature
built into NSURLSession.

00:05:21.216 --> 00:05:24.086 A:middle
This feature protects your
users' data and privacy.

00:05:24.086 --> 00:05:28.356 A:middle
Now, it can be configured
via an HTTP header delivered

00:05:28.446 --> 00:05:29.716 A:middle
from your Web service.

00:05:30.206 --> 00:05:33.616 A:middle
Or it can be configured using
a preloaded list embedded

00:05:33.926 --> 00:05:35.966 A:middle
in the system along
with your application.

00:05:36.516 --> 00:05:39.986 A:middle
Once configured, all the data
that is transmitted, sent,

00:05:39.986 --> 00:05:41.986 A:middle
received over a secure
connection.

00:05:42.656 --> 00:05:45.586 A:middle
The great thing about HSTS is
it does not require any code

00:05:45.586 --> 00:05:47.316 A:middle
changes in your applications.

00:05:50.096 --> 00:05:53.776 A:middle
All the great built-in
support subsystems built

00:05:53.776 --> 00:05:57.946 A:middle
in for the handling of
caches, cookies, proxies,

00:05:58.336 --> 00:05:59.876 A:middle
authentication challenges,

00:05:59.876 --> 00:06:02.036 A:middle
all these things are
built into NSURLSession.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.876 --> 00:06:02.036 A:middle
all these things are
built into NSURLSession.

00:06:02.036 --> 00:06:05.536 A:middle
And last but not
least, configuration.

00:06:05.536 --> 00:06:08.506 A:middle
As I said, we talked a lot
about how can we make networking

00:06:08.506 --> 00:06:11.676 A:middle
or configuring networking
easier in your applications?

00:06:12.436 --> 00:06:15.056 A:middle
We feel that we need to have
better control over networking.

00:06:15.056 --> 00:06:17.176 A:middle
So, we looked at
configuration hard.

00:06:17.176 --> 00:06:21.406 A:middle
So what we did to achieve
fine-grade and control

00:06:21.406 --> 00:06:23.606 A:middle
over your networking
in NSURLSession,

00:06:23.606 --> 00:06:27.156 A:middle
we created this new class called
NSURLSessionConfiguration.

00:06:27.926 --> 00:06:30.236 A:middle
Now, this class contains
many properties

00:06:30.236 --> 00:06:31.346 A:middle
that you can configure.

00:06:32.746 --> 00:06:34.916 A:middle
You can create configurations
based

00:06:34.916 --> 00:06:38.036 A:middle
on different networking needs
within your application.

00:06:39.466 --> 00:06:42.166 A:middle
Now, here's a sample of
just some of the properties

00:06:42.526 --> 00:06:45.636 A:middle
that you can set with
NSURLSessionConfiguration.

00:06:46.836 --> 00:06:50.806 A:middle
The Transport Layer
Security or TLS version.

00:06:51.836 --> 00:06:54.856 A:middle
You can control the minimum
and maximum versions of TLS

00:06:54.856 --> 00:06:56.806 A:middle
that your app wants to support.

00:06:57.246 --> 00:07:02.666 A:middle
We default the minimum TLS to
1.0 and the maximum TLS to 1.2.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.246 --> 00:07:02.666 A:middle
We default the minimum TLS to
1.0 and the maximum TLS to 1.2.

00:07:03.356 --> 00:07:09.296 A:middle
You can control the use of
cellular by your application.

00:07:09.296 --> 00:07:12.126 A:middle
Do you want to let your app
use the cellular network or no?

00:07:12.416 --> 00:07:14.346 A:middle
Maybe you want Wi-Fi
only networking.

00:07:14.346 --> 00:07:16.276 A:middle
This is the place to do that.

00:07:16.796 --> 00:07:22.106 A:middle
You can specify your
network service type.

00:07:22.626 --> 00:07:24.936 A:middle
Some examples of this
might be just default,

00:07:24.936 --> 00:07:27.906 A:middle
which is the standard
internet data traffic.

00:07:27.906 --> 00:07:33.146 A:middle
Your app might have VoiP control
or video data or voice data.

00:07:33.506 --> 00:07:34.586 A:middle
All sorts of different
types of data.

00:07:34.586 --> 00:07:37.986 A:middle
And really, this is just a
hint to lower networking layers

00:07:38.416 --> 00:07:42.166 A:middle
of what type of data to expect
so that it can create a quality

00:07:42.166 --> 00:07:43.766 A:middle
of service that's
best for your app

00:07:44.156 --> 00:07:46.426 A:middle
on the device that
it's running on.

00:07:48.136 --> 00:07:49.376 A:middle
Cookie policy.

00:07:49.556 --> 00:07:52.776 A:middle
Now, maybe you want your
cookies to be a session duration

00:07:52.776 --> 00:07:54.206 A:middle
or a persistent cookies.

00:07:54.206 --> 00:07:56.156 A:middle
This is the place to
set the policy for that.

00:07:56.636 --> 00:07:57.786 A:middle
Similar for cache.

00:07:57.786 --> 00:07:59.436 A:middle
Maybe you want an
ephemeral cache,

00:07:59.826 --> 00:08:02.746 A:middle
persistent cache that's
used between app launches.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.826 --> 00:08:02.746 A:middle
persistent cache that's
used between app launches.

00:08:03.316 --> 00:08:04.996 A:middle
This is a place to
set that policy.

00:08:06.366 --> 00:08:09.196 A:middle
You can also specify
storage objects.

00:08:09.556 --> 00:08:13.086 A:middle
Well, maybe you want to share
caches between different types

00:08:13.086 --> 00:08:15.936 A:middle
of networking or cookies between
different types of networking,

00:08:15.936 --> 00:08:16.966 A:middle
all within your same app.

00:08:17.586 --> 00:08:20.336 A:middle
This is a place that you
can set the storage object

00:08:20.336 --> 00:08:21.586 A:middle
for that configuration.

00:08:22.716 --> 00:08:24.316 A:middle
And time-out specifiers.

00:08:24.426 --> 00:08:27.896 A:middle
You can set resource
and request time-outs

00:08:28.236 --> 00:08:31.596 A:middle
so that your app can handle
error conditions in the network.

00:08:32.145 --> 00:08:36.635 A:middle
Now, I expect many of
you have some exposure

00:08:36.635 --> 00:08:38.006 A:middle
to NSURLSession API.

00:08:38.385 --> 00:08:40.296 A:middle
If not, really, go
ahead and look back

00:08:40.296 --> 00:08:43.606 A:middle
at the WWDC 2014
on NSURLSession.

00:08:43.606 --> 00:08:45.746 A:middle
You're going to get a lot
more in-depth instruction

00:08:46.176 --> 00:08:47.896 A:middle
on how that API works.

00:08:48.236 --> 00:08:50.836 A:middle
But I think for us in the
remainder of the talk here,

00:08:50.836 --> 00:08:55.136 A:middle
it's good for us to take a
look at how NSURLSession works

00:08:55.286 --> 00:08:56.526 A:middle
from a code perspective.

00:08:57.806 --> 00:09:00.486 A:middle
So very simply, the first
thing we do is we're going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:57.806 --> 00:09:00.486 A:middle
So very simply, the first
thing we do is we're going

00:09:00.486 --> 00:09:02.716 A:middle
to create a configuration
object.

00:09:02.756 --> 00:09:03.556 A:middle
First thing we do.

00:09:03.556 --> 00:09:05.746 A:middle
Here we call
NSURLSessionConfigurations

00:09:06.086 --> 00:09:08.306 A:middle
.defaultSessionConfiguration.

00:09:08.996 --> 00:09:10.686 A:middle
We take all the defaults

00:09:10.996 --> 00:09:13.366 A:middle
and we've got a very
simple config ready to go.

00:09:13.366 --> 00:09:18.746 A:middle
Now, we take that config
and we give it to a session.

00:09:18.746 --> 00:09:21.446 A:middle
We create a session by
calling NSURLSessions emitter

00:09:21.806 --> 00:09:23.126 A:middle
that takes a config object.

00:09:23.296 --> 00:09:26.216 A:middle
And boom! We've got a very
simple session ready to go.

00:09:26.826 --> 00:09:30.386 A:middle
Now that we've got this session,
we're ready to do some work.

00:09:30.386 --> 00:09:34.136 A:middle
Now, the first thing we're
going to do is create an NSURL

00:09:34.756 --> 00:09:37.376 A:middle
and specify what's the
endpoint that we want

00:09:37.376 --> 00:09:39.646 A:middle
to retrieve or request
data from?

00:09:40.366 --> 00:09:43.046 A:middle
Once we have that,
we can create a task.

00:09:43.286 --> 00:09:45.256 A:middle
Here we call the
dataTask function.

00:09:45.256 --> 00:09:47.096 A:middle
And we pass the NSURL object

00:09:47.686 --> 00:09:49.726 A:middle
that we created to
that dataTask.

00:09:51.626 --> 00:09:53.586 A:middle
We also provide a closure.

00:09:54.056 --> 00:09:56.766 A:middle
Now, this closure is
called asynchronously

00:09:57.146 --> 00:09:58.806 A:middle
when our task is
finished loading

00:09:59.196 --> 00:10:02.746 A:middle
and the requested
resource is returned to us.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.196 --> 00:10:02.746 A:middle
and the requested
resource is returned to us.

00:10:04.296 --> 00:10:07.856 A:middle
Now always, don't forget, make
sure you call task.resume.

00:10:08.266 --> 00:10:10.856 A:middle
All of our tasks are
created in a suspended state.

00:10:10.856 --> 00:10:14.406 A:middle
So you must call task.resume
to get that task executed.

00:10:14.896 --> 00:10:16.186 A:middle
All right.

00:10:16.186 --> 00:10:18.346 A:middle
So in review, very
simple review,

00:10:19.056 --> 00:10:21.746 A:middle
NSURLSession is really
a three-step process.

00:10:22.956 --> 00:10:24.846 A:middle
First you're going to create
your configuration object.

00:10:27.516 --> 00:10:30.246 A:middle
Once you have that config you're
going to create your session.

00:10:30.836 --> 00:10:35.276 A:middle
And now you're ready with that
session to make it do some work

00:10:35.276 --> 00:10:37.416 A:middle
and you're going to create
tasks on that session.

00:10:37.906 --> 00:10:40.526 A:middle
Now, I want to suggest to
you a best practice here.

00:10:41.056 --> 00:10:45.736 A:middle
Want to make sure that
you avoid the one-task

00:10:45.736 --> 00:10:47.456 A:middle
to one-session model.

00:10:48.826 --> 00:10:51.866 A:middle
You should really not set
up your networking this way.

00:10:52.756 --> 00:10:55.356 A:middle
Really, what you want
to do and how you want

00:10:55.356 --> 00:10:58.846 A:middle
to design this is have
one session service many,

00:10:58.846 --> 00:10:59.566 A:middle
many tasks.

00:10:59.566 --> 00:11:01.296 A:middle
So of course, you can
have multiple sessions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.566 --> 00:11:01.296 A:middle
So of course, you can
have multiple sessions.

00:11:01.756 --> 00:11:05.936 A:middle
But avoid the one-session
to one-task model.

00:11:06.226 --> 00:11:07.346 A:middle
And the reason for that,

00:11:07.346 --> 00:11:09.056 A:middle
it really boils down
to performance.

00:11:09.436 --> 00:11:11.246 A:middle
You're going to get
better memory management

00:11:11.346 --> 00:11:13.426 A:middle
and OS resource utilization

00:11:13.426 --> 00:11:20.256 A:middle
by having few sessions
servicing many, many tasks.

00:11:20.256 --> 00:11:23.376 A:middle
Now, as I mentioned, the
NSURLSession API is evolving.

00:11:24.006 --> 00:11:27.056 A:middle
I'd like to talk about
the HTTP/2 protocol

00:11:27.056 --> 00:11:28.636 A:middle
and what we've been doing

00:11:28.636 --> 00:11:31.266 A:middle
in this protocol
within NSURLSession.

00:11:32.676 --> 00:11:36.616 A:middle
Now, the support of
the HTTP/2 protocol

00:11:36.616 --> 00:11:39.746 A:middle
within the NSURLSession was
introduced last year at WWDC.

00:11:39.746 --> 00:11:42.946 A:middle
And it's increasing
in popularity.

00:11:43.946 --> 00:11:48.556 A:middle
You know, large Internet service
providers are supporting HTTP/2.

00:11:49.716 --> 00:11:53.196 A:middle
Now, what makes HTTP/2
such a compelling protocol?

00:11:53.196 --> 00:11:55.486 A:middle
Well, let's look at
some of its features.

00:11:55.866 --> 00:11:58.956 A:middle
One of the great features
of HTTP/2 is multiplexing

00:11:58.956 --> 00:12:00.356 A:middle
and concurrency support.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.956 --> 00:12:00.356 A:middle
and concurrency support.

00:12:00.946 --> 00:12:05.116 A:middle
Now, this feature allows
multiple requests and responses

00:12:05.256 --> 00:12:07.386 A:middle
to be in flight concurrently.

00:12:08.046 --> 00:12:11.186 A:middle
Responses can be received
out of order and all

00:12:11.186 --> 00:12:13.606 A:middle
on the same single
TCP connection.

00:12:14.836 --> 00:12:17.736 A:middle
Another great feature of the
protocol is header compression.

00:12:18.256 --> 00:12:22.076 A:middle
This reduces the size
of the HTTP/2 headers.

00:12:22.546 --> 00:12:24.736 A:middle
It cuts down on network
round trips.

00:12:24.986 --> 00:12:27.366 A:middle
This is better for
bandwidth, and really better

00:12:27.366 --> 00:12:29.196 A:middle
for performance for
your application.

00:12:30.566 --> 00:12:33.506 A:middle
Another great feature
is stream priorities.

00:12:33.876 --> 00:12:38.026 A:middle
As a client of HTTP/2 you
can indicate the priority

00:12:38.026 --> 00:12:40.756 A:middle
at which resources are
returned from the server.

00:12:41.076 --> 00:12:42.726 A:middle
And this really allows
you to look out

00:12:42.726 --> 00:12:46.056 A:middle
and tune the networking
for your application.

00:12:47.516 --> 00:12:51.486 A:middle
So in essence, HTTP/2 is
all about performance.

00:12:51.716 --> 00:12:55.216 A:middle
Now, this will result in an
improved end user experience

00:12:55.216 --> 00:12:56.796 A:middle
as they interact with your apps.

00:12:57.396 --> 00:12:59.856 A:middle
Now, there's one more
feature that we have

00:12:59.856 --> 00:13:02.196 A:middle
to take a look at of HTTP/2.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.856 --> 00:13:02.196 A:middle
to take a look at of HTTP/2.

00:13:02.896 --> 00:13:06.176 A:middle
Today we're introducing
support in NSURLSession

00:13:06.176 --> 00:13:10.166 A:middle
for HTTP/2's Server
Push feature.

00:13:11.516 --> 00:13:15.496 A:middle
[ Applause ]

00:13:15.996 --> 00:13:18.016 A:middle
So what is Server Push?

00:13:18.016 --> 00:13:20.476 A:middle
Well, when a client
makes a request,

00:13:20.526 --> 00:13:22.796 A:middle
a server will respond
to that request.

00:13:23.286 --> 00:13:26.776 A:middle
But concurrently, it can
push additional responses

00:13:26.776 --> 00:13:27.506 A:middle
to the client.

00:13:27.716 --> 00:13:30.306 A:middle
So if you think about a Web
page, it's made up of lots

00:13:30.306 --> 00:13:31.566 A:middle
and lots of resources.

00:13:32.006 --> 00:13:35.066 A:middle
Instead of the client having to
fetch each individual resource

00:13:35.066 --> 00:13:37.376 A:middle
over the network, a server can,

00:13:37.696 --> 00:13:42.036 A:middle
in parallel to the original
response, push information

00:13:42.356 --> 00:13:45.326 A:middle
about additional resources
the client is likely to need.

00:13:47.056 --> 00:13:50.296 A:middle
So, Server Push prevents
multiple network round trips

00:13:50.296 --> 00:13:56.526 A:middle
that HTTP/1.1 and non-Server
Push HTTP/2 requires today.

00:13:57.976 --> 00:13:59.896 A:middle
Now, I want to bring to
your attention something

00:13:59.896 --> 00:14:03.396 A:middle
that the server obviously
has to support this protocol,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.896 --> 00:14:03.396 A:middle
that the server obviously
has to support this protocol,

00:14:03.396 --> 00:14:07.436 A:middle
has to support HTTP/2 and
it has to be configured

00:14:07.866 --> 00:14:10.066 A:middle
to enable the Server
Push feature.

00:14:10.896 --> 00:14:13.976 A:middle
Now, Server Push is
available now to applications

00:14:14.916 --> 00:14:16.696 A:middle
that use NSURLSession.

00:14:16.876 --> 00:14:18.616 A:middle
There's no need to opt in.

00:14:18.876 --> 00:14:21.076 A:middle
No funny properties
that you have to set.

00:14:21.326 --> 00:14:22.306 A:middle
It's just there.

00:14:22.386 --> 00:14:23.626 A:middle
And it just works.

00:14:24.256 --> 00:14:26.046 A:middle
So this is all more
reason we feel

00:14:26.046 --> 00:14:28.886 A:middle
that NSURLSession
API is the best API

00:14:28.886 --> 00:14:30.336 A:middle
for your applications today.

00:14:30.926 --> 00:14:34.016 A:middle
Now, let's take a minute here
and look a little bit deeper

00:14:34.016 --> 00:14:36.706 A:middle
about how Server Push
will benefit your app.

00:14:39.306 --> 00:14:42.136 A:middle
Here I've got a graph that
represents an app's use

00:14:42.136 --> 00:14:46.256 A:middle
of NSURLSession using
the HTTP/1.1 protocol

00:14:46.686 --> 00:14:48.146 A:middle
to do some network loading.

00:14:48.736 --> 00:14:50.626 A:middle
Now, as we move down this graph,

00:14:50.786 --> 00:14:52.746 A:middle
we're going to accumulate
more time.

00:14:52.746 --> 00:14:55.086 A:middle
And this will be
our total latency

00:14:55.296 --> 00:14:57.806 A:middle
for our network loading
for our application.

00:14:58.996 --> 00:15:02.396 A:middle
So, first our app is
going to resume a task.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.996 --> 00:15:02.396 A:middle
So, first our app is
going to resume a task.

00:15:02.896 --> 00:15:06.976 A:middle
And that task is going
to request index.html.

00:15:08.096 --> 00:15:09.656 A:middle
We'll assume that
everything's working great

00:15:09.656 --> 00:15:10.936 A:middle
because networks just do that.

00:15:10.936 --> 00:15:14.066 A:middle
And we're going to get our
response from the server

00:15:14.066 --> 00:15:15.386 A:middle
with the requested data.

00:15:16.506 --> 00:15:19.606 A:middle
Now, in addition to the
data for index.html,

00:15:19.866 --> 00:15:21.366 A:middle
we note that time has passed.

00:15:21.806 --> 00:15:24.926 A:middle
And that our total latency has
accumulated, has increased.

00:15:26.346 --> 00:15:29.076 A:middle
Now, our app is going
to resume another task

00:15:29.076 --> 00:15:32.036 A:middle
and request style.css
from the server.

00:15:32.366 --> 00:15:34.506 A:middle
And again, assuming
everything's working properly,

00:15:34.506 --> 00:15:36.206 A:middle
we're going to get
that response.

00:15:36.946 --> 00:15:38.636 A:middle
And now we have style.css

00:15:38.636 --> 00:15:42.686 A:middle
and our total latency has now
increased by the time required

00:15:42.686 --> 00:15:44.666 A:middle
to fetch that resource
over the network.

00:15:45.286 --> 00:15:49.736 A:middle
Here the application will
make the final task resume

00:15:49.736 --> 00:15:51.386 A:middle
and request background.jpg.

00:15:52.266 --> 00:15:54.066 A:middle
We get the response
from the server.

00:15:54.586 --> 00:15:56.456 A:middle
And here we've got
background.jpg.

00:15:56.456 --> 00:16:01.386 A:middle
Our application is now finished
with its network loading.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:56.456 --> 00:16:01.386 A:middle
Our application is now finished
with its network loading.

00:16:01.836 --> 00:16:03.216 A:middle
And we look at the graph,

00:16:03.216 --> 00:16:09.146 A:middle
we see this is our total latency
cost for an HTTP/1.1 load.

00:16:10.256 --> 00:16:13.016 A:middle
Now, let's take a look at our
application when it's able

00:16:13.016 --> 00:16:15.926 A:middle
to use HTTP/2 and Server Push.

00:16:16.396 --> 00:16:19.356 A:middle
And I'm just going to shift
the HTTP/1.1 result graph

00:16:19.356 --> 00:16:20.866 A:middle
over to the side
just for reference.

00:16:21.806 --> 00:16:26.696 A:middle
So again, our app will resume
a task request index.html.

00:16:27.156 --> 00:16:31.426 A:middle
Again, our total latency,
we receive our response.

00:16:31.526 --> 00:16:36.766 A:middle
And our total latency is pretty
much exactly the same as it was

00:16:36.766 --> 00:16:38.726 A:middle
for the non-Server Push case.

00:16:39.436 --> 00:16:40.276 A:middle
That's expected.

00:16:40.276 --> 00:16:44.316 A:middle
What will happen, however,
is that concurrently

00:16:44.316 --> 00:16:47.246 A:middle
to our response for
the original request,

00:16:47.636 --> 00:16:50.836 A:middle
the server will push other
resources to NSURLSession.

00:16:52.296 --> 00:16:55.956 A:middle
Now, this comes along with the
original request or a response

00:16:55.956 --> 00:16:57.246 A:middle
from the original request.

00:16:58.496 --> 00:17:02.016 A:middle
When our application
resumes the second task


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.496 --> 00:17:02.016 A:middle
When our application
resumes the second task

00:17:02.496 --> 00:17:06.896 A:middle
and requests style.css we get
an almost immediate response.

00:17:07.185 --> 00:17:10.185 A:middle
And this is because Server
Push gave us the data before we

00:17:10.496 --> 00:17:12.406 A:middle
really knew we needed it.

00:17:12.986 --> 00:17:16.806 A:middle
Now we have style.css and we
notice that the accumulated time

00:17:16.806 --> 00:17:20.136 A:middle
for style.css is substantially
shorter when compared

00:17:20.136 --> 00:17:24.455 A:middle
to the HTTP/1.1 needed to
load the exact same resource.

00:17:24.455 --> 00:17:29.406 A:middle
Now the app makes
some final task resume

00:17:29.406 --> 00:17:30.536 A:middle
and requests background.jpg.

00:17:30.536 --> 00:17:33.446 A:middle
Again, we get a real
quick response.

00:17:33.916 --> 00:17:35.576 A:middle
The app has background.jpg.

00:17:35.576 --> 00:17:39.566 A:middle
And we add the total time
to our accumulated total.

00:17:39.706 --> 00:17:43.456 A:middle
At this point the app is done
with its network loading.

00:17:44.716 --> 00:17:46.826 A:middle
And we see that the HTTP/2

00:17:46.826 --> 00:17:51.556 A:middle
with Server Push latency is much
smaller than that of the HTTP/1

00:17:51.556 --> 00:17:53.256 A:middle
or the non-Server Push load.

00:17:53.996 --> 00:17:56.046 A:middle
The reason for this
improved performance is

00:17:56.046 --> 00:17:59.776 A:middle
that with Server Push we were
able to save the latency cost

00:17:59.776 --> 00:18:03.386 A:middle
of network round trips needed
when requesting resources.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.776 --> 00:18:03.386 A:middle
of network round trips needed
when requesting resources.

00:18:03.946 --> 00:18:09.816 A:middle
Now, I'd like to
invite Andreas Garkuscha

00:18:10.016 --> 00:18:11.916 A:middle
to show us what Server
Push looks

00:18:11.916 --> 00:18:14.356 A:middle
like in a real application.

00:18:14.486 --> 00:18:15.136 A:middle
Andreas.

00:18:16.516 --> 00:18:19.636 A:middle
[ Applause ]

00:18:20.136 --> 00:18:20.776 A:middle
&gt;&gt; Thank you, Jeff.

00:18:21.886 --> 00:18:22.816 A:middle
Good morning everyone.

00:18:23.516 --> 00:18:26.006 A:middle
Today I'm going to
demonstrate the advantages

00:18:26.006 --> 00:18:30.136 A:middle
of using HTTP/2 Server Push when
loading resources for your apps.

00:18:39.256 --> 00:18:42.276 A:middle
You are looking at the very
common part of an app that many

00:18:42.276 --> 00:18:44.796 A:middle
of you may already
have implemented

00:18:44.796 --> 00:18:47.876 A:middle
or at least have seen while
using some of the existing apps.

00:18:48.776 --> 00:18:52.456 A:middle
What you see now could
be a social network app

00:18:52.456 --> 00:18:55.236 A:middle
for photographers showing
the most popular pictures

00:18:55.726 --> 00:18:58.316 A:middle
where you can list the
most popular picture

00:18:58.316 --> 00:18:59.786 A:middle
for a certain photographer.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.386 --> 00:19:01.836 A:middle
View the individual pictures.

00:19:02.966 --> 00:19:03.946 A:middle
Go to the next.

00:19:04.886 --> 00:19:07.256 A:middle
Go back. Go back
to the top list.

00:19:07.256 --> 00:19:08.406 A:middle
Choose another one to view.

00:19:09.096 --> 00:19:10.006 A:middle
And so on.

00:19:11.206 --> 00:19:14.076 A:middle
This app could be
a food recipe app

00:19:14.286 --> 00:19:16.986 A:middle
or a music streaming app
showing the album artwork.

00:19:17.376 --> 00:19:21.766 A:middle
So an app which is loading
resources from your server.

00:19:22.196 --> 00:19:26.216 A:middle
In this case, it is loading
and showing some images.

00:19:27.116 --> 00:19:30.406 A:middle
Now notice here for demo
purposes there is a switch.

00:19:31.346 --> 00:19:34.006 A:middle
It allows us to choose
between the initial URL

00:19:34.006 --> 00:19:37.216 A:middle
with Server Push configured
and one with no Server Push.

00:19:38.386 --> 00:19:43.426 A:middle
In both cases, first we request
the initial document containing

00:19:43.456 --> 00:19:45.426 A:middle
the image URLs to load.

00:19:46.096 --> 00:19:47.426 A:middle
Then we request the images.

00:19:48.116 --> 00:19:51.316 A:middle
If the Server Push is off,
nothing is getting pushed.

00:19:51.616 --> 00:19:53.126 A:middle
So we need to send the requests

00:19:53.346 --> 00:19:55.576 A:middle
for every image over
the network.

00:19:56.826 --> 00:19:59.616 A:middle
In case of the Server Push,
and now I'm going to switch

00:19:59.616 --> 00:20:05.156 A:middle
to this mode, as Jeff explained
previously, the requesting


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.616 --> 00:20:05.156 A:middle
to this mode, as Jeff explained
previously, the requesting

00:20:05.156 --> 00:20:08.546 A:middle
of the initial document
will trigger the push

00:20:08.546 --> 00:20:11.996 A:middle
of the resources from the
server to your application.

00:20:13.156 --> 00:20:15.166 A:middle
There will be no need
to send the request

00:20:15.166 --> 00:20:17.076 A:middle
for every image over
the network.

00:20:17.486 --> 00:20:20.306 A:middle
The data for your data
tasks will be delivered

00:20:20.306 --> 00:20:24.216 A:middle
out of the Server Push storage
directly to your application.

00:20:26.346 --> 00:20:29.546 A:middle
Now, let's compare the
performance of the Server Push

00:20:29.546 --> 00:20:30.806 A:middle
and non-Server Push loads.

00:20:31.666 --> 00:20:36.326 A:middle
I'm going to switch between the
initial URL with Server Push

00:20:36.326 --> 00:20:43.876 A:middle
and non-Server Push a couple
of times so that you can see

00:20:44.236 --> 00:20:45.956 A:middle
when the Server Push is on,

00:20:47.196 --> 00:20:50.326 A:middle
this entire collection
view is loaded faster.

00:20:51.646 --> 00:20:52.576 A:middle
But how much faster?

00:20:52.886 --> 00:20:54.666 A:middle
Well, let me show you that.

00:20:55.626 --> 00:20:59.836 A:middle
Now the demo application is
going to provide the results.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.456 --> 00:21:01.886 A:middle
It's the bottom of
the current view.

00:21:02.296 --> 00:21:05.686 A:middle
For the fastest non-Server
Push load in red.

00:21:06.206 --> 00:21:09.226 A:middle
And for the fastest
Server Push load in green.

00:21:11.356 --> 00:21:12.736 A:middle
Let me do it a couple of times.

00:21:17.546 --> 00:21:19.716 A:middle
Now the same with
the artist view.

00:21:21.366 --> 00:21:23.856 A:middle
A couple of times.

00:21:23.856 --> 00:21:24.606 A:middle
Server Push off.

00:21:24.606 --> 00:21:25.386 A:middle
Server Push on.

00:21:26.526 --> 00:21:29.756 A:middle
You can see here that
the Server Push load is

00:21:29.756 --> 00:21:32.536 A:middle
at least two times faster.

00:21:34.276 --> 00:21:38.106 A:middle
Pushing the images is about
two to three times faster

00:21:38.246 --> 00:21:42.016 A:middle
than loading them on the high
latency network we are actually

00:21:42.016 --> 00:21:42.716 A:middle
using here.

00:21:43.286 --> 00:21:46.186 A:middle
The kind of network your
applications can experience

00:21:46.566 --> 00:21:48.476 A:middle
when on cellular or slow Wi-Fi.

00:21:49.666 --> 00:21:53.226 A:middle
I prepared a video showing
the Server Push load

00:21:53.226 --> 00:21:56.516 A:middle
and non-Server Push
loads side by side.

00:21:56.736 --> 00:21:57.976 A:middle
Well, let me show you that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:07.356 --> 00:22:11.876 A:middle
So, you can see when the Server
Push user is already viewing the

00:22:11.876 --> 00:22:16.426 A:middle
pictures, the other guy is just
trying to load the artist view.

00:22:16.836 --> 00:22:19.976 A:middle
Let's see it one more time.

00:22:20.766 --> 00:22:25.066 A:middle
Once again, the Server Push
user on the right is getting

00:22:25.436 --> 00:22:27.916 A:middle
through much faster than
the non-Server Push user

00:22:27.916 --> 00:22:28.536 A:middle
on the left.

00:22:36.346 --> 00:22:38.406 A:middle
Two to three times faster.

00:22:38.406 --> 00:22:39.596 A:middle
Just think about it.

00:22:40.156 --> 00:22:43.016 A:middle
Think about the user experience
you can provide your customers

00:22:43.486 --> 00:22:46.906 A:middle
if you configure the Server
Push on your HTTP/2 server.

00:22:47.526 --> 00:22:50.526 A:middle
And you don't even have to
change any code in your app.

00:22:50.626 --> 00:22:51.596 A:middle
And this is great.

00:22:51.876 --> 00:22:52.496 A:middle
Just awesome.

00:22:53.066 --> 00:22:54.566 A:middle
This was the Server Push demo.

00:22:54.566 --> 00:22:55.306 A:middle
Thank you very much.

00:22:55.306 --> 00:22:56.236 A:middle
Have a great conference.

00:22:56.696 --> 00:22:58.956 A:middle
And now, back to Jeff.

00:22:59.516 --> 00:23:03.666 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.516 --> 00:23:03.666 A:middle
[ Applause ]

00:23:04.166 --> 00:23:05.436 A:middle
&gt;&gt; All right, thanks, Andreas.

00:23:07.876 --> 00:23:10.136 A:middle
So let's summarize
what we've seen

00:23:10.136 --> 00:23:14.106 A:middle
and discussed regarding
HTTP/2 and Server Push.

00:23:15.436 --> 00:23:18.736 A:middle
Server Push is supported
only in NSURLSession API.

00:23:18.916 --> 00:23:22.276 A:middle
So if you're writing new apps
or you're on NSURLConnection,

00:23:22.946 --> 00:23:26.786 A:middle
we highly recommend that you
move to NSURLSession APIs today.

00:23:28.076 --> 00:23:30.776 A:middle
There's no coding
that you have to do

00:23:30.776 --> 00:23:32.436 A:middle
to take advantage
of Server Push.

00:23:32.436 --> 00:23:33.336 A:middle
It's not an opt-in.

00:23:33.336 --> 00:23:34.586 A:middle
It just works.

00:23:36.026 --> 00:23:38.436 A:middle
And with Server Push
your apps will perform

00:23:38.436 --> 00:23:39.776 A:middle
in the most optimal manner,

00:23:40.176 --> 00:23:42.806 A:middle
giving your users an
even better experience

00:23:42.806 --> 00:23:44.196 A:middle
with your applications.

00:23:46.336 --> 00:23:51.046 A:middle
Now, another evolution to the
NSURLSession API is the addition

00:23:51.046 --> 00:23:52.876 A:middle
of Network Statistics.

00:23:55.576 --> 00:23:57.846 A:middle
Now, who out here
loves statistics?

00:23:57.846 --> 00:23:59.046 A:middle
We have any statistic people?

00:23:59.046 --> 00:24:00.496 A:middle
We got some folks
that love statistics?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.046 --> 00:24:00.496 A:middle
We got some folks
that love statistics?

00:24:00.496 --> 00:24:01.936 A:middle
All right, I've got
a stat for you.

00:24:01.936 --> 00:24:03.996 A:middle
Are you ready?

00:24:03.996 --> 00:24:05.596 A:middle
Here it is.

00:24:06.306 --> 00:24:07.366 A:middle
All right.

00:24:07.366 --> 00:24:08.246 A:middle
Right. Sorry about that.

00:24:08.246 --> 00:24:11.786 A:middle
Sorry. We're going to get to
some actual useful statistics.

00:24:11.786 --> 00:24:14.436 A:middle
And this is, we believe,
network statistics are part

00:24:14.436 --> 00:24:16.406 A:middle
of that 2% useful values.

00:24:16.906 --> 00:24:19.146 A:middle
So, why is it useful?

00:24:19.146 --> 00:24:21.936 A:middle
Have you ever had slow
network performance

00:24:21.936 --> 00:24:22.976 A:middle
in your applications?

00:24:23.806 --> 00:24:24.896 A:middle
Imagine some of you have.

00:24:24.896 --> 00:24:27.756 A:middle
And how did you go about
figuring out what was wrong?

00:24:28.406 --> 00:24:29.716 A:middle
You know, how did
you debug that?

00:24:30.726 --> 00:24:34.746 A:middle
We believe network statistics is
going to be great for you guys

00:24:34.746 --> 00:24:36.366 A:middle
to be able to use
in the development

00:24:36.366 --> 00:24:37.716 A:middle
and debugging environment.

00:24:37.826 --> 00:24:40.406 A:middle
You could use this to
collect information,

00:24:40.616 --> 00:24:41.766 A:middle
possibly out in the field.

00:24:41.766 --> 00:24:43.366 A:middle
Maybe you could leverage
Test Flight

00:24:43.676 --> 00:24:44.906 A:middle
and collect some information

00:24:44.906 --> 00:24:46.506 A:middle
about your app running
in the field.

00:24:47.746 --> 00:24:50.706 A:middle
Network statistics is
about analyzing performance

00:24:50.846 --> 00:24:52.536 A:middle
of network loading
within your app.

00:24:52.846 --> 00:24:56.356 A:middle
It's about finding and fixing
networking-related bugs.

00:24:56.356 --> 00:24:58.996 A:middle
And it's about giving
you better understanding

00:24:59.156 --> 00:25:02.486 A:middle
of what your networking is doing
inside of your application.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.156 --> 00:25:02.486 A:middle
of what your networking is doing
inside of your application.

00:25:04.116 --> 00:25:07.546 A:middle
Currently, network
statistics is supported in iOS,

00:25:07.756 --> 00:25:10.816 A:middle
macOS and on tvOS platforms.

00:25:12.546 --> 00:25:15.846 A:middle
Now, before we get started with
the actual statistics values,

00:25:15.846 --> 00:25:18.266 A:middle
let me explain to you how you're
going to get all these values.

00:25:18.676 --> 00:25:22.286 A:middle
And to do this, we need to
look at a little bit of code.

00:25:22.476 --> 00:25:25.246 A:middle
Here we have a brand
new delegate called

00:25:25.246 --> 00:25:27.926 A:middle
didFinishCollecting metrics.

00:25:28.416 --> 00:25:29.596 A:middle
This is a delegate method

00:25:29.596 --> 00:25:32.376 A:middle
of the NSURLSession
Task Delegate class.

00:25:33.026 --> 00:25:35.806 A:middle
Now, when you implement
this delegate,

00:25:36.156 --> 00:25:38.326 A:middle
it's going to be passed a task

00:25:38.326 --> 00:25:40.006 A:middle
for which the metrics
were collected

00:25:40.316 --> 00:25:42.086 A:middle
and a new class object.

00:25:42.086 --> 00:25:45.036 A:middle
This is NSURLSessionTaskMetrics.

00:25:47.156 --> 00:25:50.486 A:middle
The NSURLSessionTaskMetrics
class has a property

00:25:50.486 --> 00:25:52.216 A:middle
named taskInterval.

00:25:53.566 --> 00:25:55.816 A:middle
This is the interval of
time from a task creation

00:25:55.816 --> 00:25:58.336 A:middle
to the point in time when all
the statistics are collected

00:25:58.336 --> 00:25:59.776 A:middle
and are ready to be delivered

00:25:59.776 --> 00:26:01.926 A:middle
to your
didFinishCollectingMetrics


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.776 --> 00:26:01.926 A:middle
to your
didFinishCollectingMetrics

00:26:01.926 --> 00:26:02.456 A:middle
delegate.

00:26:03.236 --> 00:26:06.406 A:middle
Another property I'm showing
you here is the redirectCount.

00:26:06.996 --> 00:26:08.376 A:middle
Now, that's fairly
straightforward.

00:26:08.376 --> 00:26:11.176 A:middle
And as the name indicates,
this is the number of times

00:26:11.176 --> 00:26:14.706 A:middle
that an HTTP redirection
occurred during the

00:26:14.706 --> 00:26:16.116 A:middle
task's execution.

00:26:17.216 --> 00:26:18.396 A:middle
The last property

00:26:20.016 --> 00:26:23.966 A:middle
of NSURLSessionTaskMetrics
called transactionMetrics.

00:26:24.486 --> 00:26:26.276 A:middle
Now, this property
is really the core.

00:26:26.276 --> 00:26:28.506 A:middle
This is the meat of
our network statistics.

00:26:28.506 --> 00:26:30.416 A:middle
This is where you get an array

00:26:30.416 --> 00:26:33.966 A:middle
of NSURLTaskTransactionMetric
objects.

00:26:34.096 --> 00:26:37.446 A:middle
Now, let's take a closer look
at this particular new class

00:26:37.446 --> 00:26:38.646 A:middle
because this is really
where some

00:26:38.646 --> 00:26:40.596 A:middle
of the great metrics
are located.

00:26:42.126 --> 00:26:44.826 A:middle
Now, in order to understand
all of these metrics,

00:26:44.826 --> 00:26:47.496 A:middle
we're going to chop them
up into four categories.

00:26:48.006 --> 00:26:53.216 A:middle
Now, the first two properties of
NSURLTaskTransactionMetrics make

00:26:53.216 --> 00:26:54.406 A:middle
up the first category.

00:26:54.406 --> 00:26:57.116 A:middle
And I'm going to call
that Request and Response.

00:26:58.376 --> 00:27:02.986 A:middle
There's two properties here
called Request" and "Response.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.376 --> 00:27:02.986 A:middle
There's two properties here
called Request" and "Response.

00:27:03.676 --> 00:27:05.096 A:middle
And they really allow you

00:27:05.096 --> 00:27:07.596 A:middle
to analyze what was
it that I asked for?

00:27:08.046 --> 00:27:12.686 A:middle
And what was the response
to that original question?

00:27:14.356 --> 00:27:16.816 A:middle
The second category of
statistics has to do

00:27:16.816 --> 00:27:18.916 A:middle
with protocol and connection.

00:27:21.456 --> 00:27:25.416 A:middle
The property networkProtocolName
is just --

00:27:25.416 --> 00:27:26.796 A:middle
it tells you what type

00:27:26.796 --> 00:27:28.596 A:middle
of protocol was used
during the time

00:27:28.596 --> 00:27:31.566 A:middle
at which statistics
were collected.

00:27:31.866 --> 00:27:34.256 A:middle
And here's a possible list
of names you might see here:

00:27:34.766 --> 00:27:37.716 A:middle
HTTP/1.1, HTTP/2, or SPDY.

00:27:37.716 --> 00:27:40.056 A:middle
Now, this list can and
will change over time.

00:27:41.136 --> 00:27:44.376 A:middle
Another property you'll
have is isProxyConnection.

00:27:45.006 --> 00:27:47.976 A:middle
This tells you whether
the transaction was part,

00:27:48.276 --> 00:27:51.106 A:middle
or had a proxy connection
involved during the time

00:27:51.106 --> 00:27:52.336 A:middle
collections were gathered,

00:27:52.946 --> 00:27:55.096 A:middle
or statistics were
gathered or collected.

00:27:55.596 --> 00:27:59.166 A:middle
And the isReusedConnection.

00:27:59.166 --> 00:28:00.976 A:middle
This property is set to Yes


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.166 --> 00:28:00.976 A:middle
This property is set to Yes

00:28:00.976 --> 00:28:04.326 A:middle
if a persistent connection
was used during the fetch

00:28:04.326 --> 00:28:05.256 A:middle
of the resource.

00:28:08.126 --> 00:28:10.876 A:middle
Now, the third category of
metrics has only one property.

00:28:10.876 --> 00:28:12.436 A:middle
And it deals with
the information

00:28:12.436 --> 00:28:15.416 A:middle
about the resource
loading or load info.

00:28:16.706 --> 00:28:19.446 A:middle
The single property
is resourceFetchType.

00:28:20.026 --> 00:28:22.466 A:middle
Now, it tells you how a
resource was obtained.

00:28:22.776 --> 00:28:26.326 A:middle
Now, some of the values you
would see here are network load.

00:28:26.416 --> 00:28:29.246 A:middle
This indicates that the resource
was loaded over a network or,

00:28:29.506 --> 00:28:31.496 A:middle
as commonly referred
to, an origin load.

00:28:32.416 --> 00:28:33.876 A:middle
You might see local cache,

00:28:34.206 --> 00:28:36.616 A:middle
which indicates the resource
was fetched from a local cache.

00:28:36.616 --> 00:28:38.096 A:middle
It was stored local
to your application.

00:28:38.096 --> 00:28:40.776 A:middle
No network transaction
was really required.

00:28:41.346 --> 00:28:42.526 A:middle
And Server Push.

00:28:42.916 --> 00:28:45.096 A:middle
This tells that the resource
was found as a result

00:28:45.096 --> 00:28:50.006 A:middle
of a Server Push cache hit
when you made that request.

00:28:50.876 --> 00:28:53.886 A:middle
The fourth category of
transaction has to do

00:28:53.886 --> 00:28:56.386 A:middle
with connection establishment
and transmission.

00:28:57.576 --> 00:29:01.226 A:middle
Now, the first group of
metrics measure time related


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:57.576 --> 00:29:01.226 A:middle
Now, the first group of
metrics measure time related

00:29:01.226 --> 00:29:03.186 A:middle
to the setup of a
network connection.

00:29:04.476 --> 00:29:08.436 A:middle
The second group of metrics
measure HTTP-related activities

00:29:08.436 --> 00:29:09.326 A:middle
of a network load.

00:29:10.006 --> 00:29:13.346 A:middle
These properties are timestamps
and are taken at a time

00:29:13.346 --> 00:29:15.016 A:middle
when the event actually
occurred.

00:29:15.196 --> 00:29:17.316 A:middle
So let's take a closer
look at these metrics

00:29:17.316 --> 00:29:20.076 A:middle
and when they are collected
during the execution

00:29:20.076 --> 00:29:20.906 A:middle
of a network load.

00:29:21.676 --> 00:29:24.876 A:middle
To do this, we're going to look
at a very simple network load.

00:29:25.076 --> 00:29:28.146 A:middle
Now note that this is just
one model of one type of load.

00:29:28.146 --> 00:29:29.676 A:middle
There's all sorts of activities

00:29:30.076 --> 00:29:31.766 A:middle
that happen during
network loading.

00:29:32.036 --> 00:29:33.276 A:middle
You've got cache lookups.

00:29:33.546 --> 00:29:34.826 A:middle
You've got cookie lookups.

00:29:34.826 --> 00:29:36.406 A:middle
You're dealing with
redirections,

00:29:36.406 --> 00:29:38.166 A:middle
sometimes authentication
challenges.

00:29:38.316 --> 00:29:39.916 A:middle
But we're going to keep
it real simple just

00:29:39.916 --> 00:29:41.326 A:middle
for our purposes here.

00:29:41.606 --> 00:29:47.136 A:middle
The NSURLTaskTransactionMetrics
class contains properties

00:29:47.216 --> 00:29:49.836 A:middle
that contain all these time
stamps at various points.

00:29:50.146 --> 00:29:53.856 A:middle
So, we begin with fetchStart.

00:29:54.476 --> 00:29:57.986 A:middle
fetchStart is a time when the
application begins requesting

00:29:57.986 --> 00:29:58.706 A:middle
a resource.

00:29:58.706 --> 00:30:01.016 A:middle
A fetch could be satisfied
from a local cache,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.706 --> 00:30:01.016 A:middle
A fetch could be satisfied
from a local cache,

00:30:01.426 --> 00:30:03.796 A:middle
or possibly resource
that was origin loaded.

00:30:05.256 --> 00:30:07.576 A:middle
So now we're looking
at domainLookup.

00:30:09.066 --> 00:30:11.266 A:middle
So the domainLookupStart
property.

00:30:11.266 --> 00:30:13.446 A:middle
This is the time just
before a name lookup

00:30:13.446 --> 00:30:14.786 A:middle
for a resource begins.

00:30:15.116 --> 00:30:16.496 A:middle
Now, this is the DNS query.

00:30:16.976 --> 00:30:19.596 A:middle
And this converts a host
name to an IP address.

00:30:20.006 --> 00:30:23.886 A:middle
So, domainLookupEnd is
when that lookup completes.

00:30:24.146 --> 00:30:26.076 A:middle
And an IP address is
sent back to the caller.

00:30:26.646 --> 00:30:30.776 A:middle
Here we're going to take a
look at what metrics we collect

00:30:30.776 --> 00:30:32.456 A:middle
for connection establishment.

00:30:33.596 --> 00:30:37.016 A:middle
The connectStart property is the
time just before an app begins

00:30:37.016 --> 00:30:40.036 A:middle
to start or establish
a TCP connection

00:30:40.036 --> 00:30:41.016 A:middle
with the remote server.

00:30:41.526 --> 00:30:43.106 A:middle
Now, this value could be nil

00:30:43.106 --> 00:30:45.376 A:middle
if the response is
found in a local cache.

00:30:46.256 --> 00:30:48.656 A:middle
I'll discuss the connectEnd
property in just a moment.

00:30:52.236 --> 00:30:57.006 A:middle
If you're doing HTTPS you're
going to need a TLS handshake.

00:30:57.006 --> 00:30:58.606 A:middle
So we've got a statistic
for that.

00:30:59.186 --> 00:31:01.526 A:middle
The secureConnectionStart
metric,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.186 --> 00:31:01.526 A:middle
The secureConnectionStart
metric,

00:31:01.766 --> 00:31:04.176 A:middle
the point in time just before
the application starts the

00:31:04.176 --> 00:31:07.636 A:middle
security handshake to secure
the current connection.

00:31:08.136 --> 00:31:09.606 A:middle
And secureConnectionEnd, well,

00:31:09.606 --> 00:31:12.376 A:middle
that's when the secure
handshake is completed.

00:31:13.156 --> 00:31:14.216 A:middle
It's finished.

00:31:14.256 --> 00:31:16.166 A:middle
Now, as I mentioned, connectEnd.

00:31:16.586 --> 00:31:19.586 A:middle
Now, that's the time immediately
after an app has connected

00:31:19.586 --> 00:31:22.016 A:middle
to the remote server,
including all the

00:31:22.016 --> 00:31:23.756 A:middle
security-related handshakes.

00:31:24.196 --> 00:31:26.536 A:middle
This is the point in
which a connection is

00:31:26.536 --> 00:31:28.016 A:middle
considered established.

00:31:28.476 --> 00:31:31.906 A:middle
Now that we have an
established connection,

00:31:32.136 --> 00:31:35.616 A:middle
we can actually do some HTTP.

00:31:35.846 --> 00:31:37.926 A:middle
So, we have a few stats
that we can collect

00:31:37.926 --> 00:31:40.246 A:middle
for you regarding the
request and response.

00:31:40.246 --> 00:31:42.686 A:middle
So first we have requestStart.

00:31:42.686 --> 00:31:44.656 A:middle
And this is the time when
the app begins requesting the

00:31:44.656 --> 00:31:47.236 A:middle
resource regardless of whether
the resource was fetched

00:31:47.236 --> 00:31:49.556 A:middle
from a local cache
or a remote server.

00:31:50.086 --> 00:31:52.626 A:middle
If an origin load was
needed, this is the time

00:31:52.966 --> 00:31:57.166 A:middle
at which the first byte of the
HTTP header began transmission.

00:31:57.886 --> 00:32:00.676 A:middle
requestEnd is the time
when the last byte


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.886 --> 00:32:00.676 A:middle
requestEnd is the time
when the last byte

00:32:00.676 --> 00:32:02.736 A:middle
of the request was
written to the network.

00:32:06.656 --> 00:32:07.776 A:middle
responseStart.

00:32:08.466 --> 00:32:10.576 A:middle
This represents a time
when the first byte

00:32:10.576 --> 00:32:13.326 A:middle
of the response is
received from the server.

00:32:13.836 --> 00:32:15.116 A:middle
Now, if this is a cache load,

00:32:15.116 --> 00:32:18.956 A:middle
this is when the cache response
was received from the cache.

00:32:19.376 --> 00:32:22.006 A:middle
And responseEnd was
the time immediately

00:32:22.006 --> 00:32:24.586 A:middle
after the application
receives the last byte

00:32:25.476 --> 00:32:27.486 A:middle
of the resource requested.

00:32:27.986 --> 00:32:32.106 A:middle
Now that we've been looking

00:32:32.106 --> 00:32:34.336 A:middle
at stats collected
during an origin load.

00:32:35.016 --> 00:32:37.536 A:middle
That is, we had to send bytes
over a physical network.

00:32:38.136 --> 00:32:42.006 A:middle
It's possible that the
networking could have been

00:32:42.006 --> 00:32:43.466 A:middle
satisfied from a local cache.

00:32:43.466 --> 00:32:44.286 A:middle
And I've mentioned that.

00:32:44.286 --> 00:32:48.026 A:middle
So if a local cache contains
the response for our request,

00:32:48.376 --> 00:32:49.416 A:middle
then there's no need for DNS.

00:32:49.416 --> 00:32:52.756 A:middle
So there's no need to make
a TCP connection, et cetera.

00:32:53.316 --> 00:32:56.366 A:middle
Those statistics will be set
to nil in this cache case.

00:32:56.366 --> 00:32:57.446 A:middle
So just be aware of that

00:32:57.446 --> 00:32:58.946 A:middle
as you're looking
at these statistics.

00:32:59.496 --> 00:33:03.776 A:middle
Now, you might be asking,
"Okay, this is really cool.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.496 --> 00:33:03.776 A:middle
Now, you might be asking,
"Okay, this is really cool.

00:33:03.776 --> 00:33:06.206 A:middle
How do I get these
stats into my code?"

00:33:06.536 --> 00:33:10.146 A:middle
So, to do that, let's
look at some code.

00:33:10.146 --> 00:33:12.366 A:middle
Now, as I showed you earlier,
we start with the delegate.

00:33:12.766 --> 00:33:14.426 A:middle
And here I have an
implementation

00:33:14.426 --> 00:33:17.246 A:middle
of the NSURLSessionTaskDelegate.

00:33:17.736 --> 00:33:21.796 A:middle
This implements the new
didFinishCollectingMetrics

00:33:21.796 --> 00:33:22.686 A:middle
delegate callback.

00:33:23.086 --> 00:33:25.276 A:middle
And the one I'm showing you
here doesn't do really anything

00:33:25.276 --> 00:33:26.666 A:middle
of any interest at the moment.

00:33:26.976 --> 00:33:28.606 A:middle
I totally expect
you guys are going

00:33:28.606 --> 00:33:30.196 A:middle
to do some really
cool stuff here.

00:33:30.196 --> 00:33:31.566 A:middle
Maybe you're going
to do some logging.

00:33:31.956 --> 00:33:33.926 A:middle
A good point to do some
debugging and take a look

00:33:33.926 --> 00:33:35.516 A:middle
at what's happening
with your networking.

00:33:35.816 --> 00:33:38.476 A:middle
Again, maybe leverage Test
Flight and do some logging

00:33:38.766 --> 00:33:40.766 A:middle
so you can collect some
information from the field

00:33:40.766 --> 00:33:44.756 A:middle
about how the networking is
performing in your applications.

00:33:45.696 --> 00:33:46.556 A:middle
That's all up to you.

00:33:47.226 --> 00:33:49.886 A:middle
So, let's keep looking
at this example here.

00:33:49.886 --> 00:33:52.316 A:middle
Maybe a little bit
of housekeeping code.

00:33:52.636 --> 00:33:53.566 A:middle
First thing we have to do

00:33:53.566 --> 00:33:57.376 A:middle
with our delegate implementation
is instantiate an instance

00:33:57.376 --> 00:33:58.246 A:middle
of it.

00:33:59.786 --> 00:34:02.336 A:middle
Now, we're going to create a
default configuration object.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.786 --> 00:34:02.336 A:middle
Now, we're going to create a
default configuration object.

00:34:02.336 --> 00:34:03.726 A:middle
We take all the defaults just

00:34:03.726 --> 00:34:05.976 A:middle
by calling
defaultSessionConfiguration.

00:34:06.406 --> 00:34:10.106 A:middle
Next, we're going to
create an instance --

00:34:10.536 --> 00:34:13.576 A:middle
or we're going to create an
NSOperatonQueue instance.

00:34:13.576 --> 00:34:16.186 A:middle
And we have to do that because
we have to have some place,

00:34:16.186 --> 00:34:23.636 A:middle
some queue, so that our delegate
can actually do some work.

00:34:23.636 --> 00:34:27.826 A:middle
And as I mentioned earlier,
I recreate an NSURLSession

00:34:27.826 --> 00:34:29.226 A:middle
with that configuration object.

00:34:29.226 --> 00:34:32.565 A:middle
But here I'm calling
NSURLSession's init function

00:34:32.966 --> 00:34:34.676 A:middle
that takes additional
parameters.

00:34:34.676 --> 00:34:38.005 A:middle
And namely, those are the
instantiated instant delegate

00:34:38.076 --> 00:34:42.216 A:middle
object and the NSOperationQueue
object that we created.

00:34:42.746 --> 00:34:45.956 A:middle
So now we can actually
do some work.

00:34:45.956 --> 00:34:47.766 A:middle
We create a task
with our session.

00:34:47.766 --> 00:34:50.866 A:middle
And what do we want
our task to do?

00:34:50.866 --> 00:34:53.596 A:middle
Well, let's just simply load
this server's root Web page.

00:34:54.076 --> 00:34:56.906 A:middle
And here I'm using,
again, the dataTask method.

00:34:57.526 --> 00:35:00.936 A:middle
And this requires a
closure as a parameter.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:57.526 --> 00:35:00.936 A:middle
And this requires a
closure as a parameter.

00:35:01.856 --> 00:35:04.116 A:middle
Now, note with this closure

00:35:04.116 --> 00:35:06.506 A:middle
that our
didFinishCollectingMetrics

00:35:06.506 --> 00:35:10.626 A:middle
delegate callback will be
called first and called before

00:35:10.926 --> 00:35:12.626 A:middle
that closure is invoked.

00:35:13.626 --> 00:35:18.196 A:middle
So, oh, and also, don't forget
your good old task.Resume.

00:35:18.326 --> 00:35:19.736 A:middle
Got to make sure
you resume that task

00:35:19.736 --> 00:35:21.526 A:middle
so that the work can
actually execute.

00:35:21.866 --> 00:35:24.746 A:middle
Now, this is an overly
simply review of how

00:35:24.746 --> 00:35:27.356 A:middle
to implement
networkStatisticDelegate

00:35:27.356 --> 00:35:30.356 A:middle
callback and the code
needed to make it work.

00:35:30.736 --> 00:35:31.646 A:middle
I'm sure that you guys are going

00:35:31.646 --> 00:35:34.636 A:middle
to do much more interesting
things and be much more creative

00:35:34.636 --> 00:35:37.576 A:middle
with your use of Network
Statistics that I've been here.

00:35:38.166 --> 00:35:42.026 A:middle
Now, I hope you like what you've
seen with Network Statistics.

00:35:42.026 --> 00:35:42.826 A:middle
What do you think of those?

00:35:43.016 --> 00:35:44.526 A:middle
[ Applause ]

00:35:44.526 --> 00:35:44.876 A:middle
All right.

00:35:47.696 --> 00:35:51.266 A:middle
Now you can access information
about what's really happening

00:35:51.266 --> 00:35:54.306 A:middle
under the hood with your
network transactions.

00:35:55.096 --> 00:35:58.646 A:middle
This will help you in your
debugging and development

00:35:58.826 --> 00:36:00.456 A:middle
to be able to get, you
know, fix your apps


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:58.826 --> 00:36:00.456 A:middle
to be able to get, you
know, fix your apps

00:36:00.456 --> 00:36:03.136 A:middle
and make your apps work
the best that they can be.

00:36:03.406 --> 00:36:07.326 A:middle
And tune, really tune the Web
services and the types of apps

00:36:07.326 --> 00:36:08.556 A:middle
that you're making so
that they will work

00:36:08.556 --> 00:36:09.706 A:middle
in the most optimal way.

00:36:09.796 --> 00:36:14.996 A:middle
And again, this new feature is
available in NSURLSession APIs.

00:36:14.996 --> 00:36:17.876 A:middle
It's a great time to
be using NSURLSession.

00:36:18.026 --> 00:36:22.706 A:middle
Now, in the final
section I'm going

00:36:22.706 --> 00:36:24.926 A:middle
to discuss a topic that's
critical to everybody.

00:36:24.926 --> 00:36:27.196 A:middle
And now, as developers,

00:36:27.356 --> 00:36:30.906 A:middle
we all care about guarding
the privacy of user data.

00:36:31.506 --> 00:36:34.496 A:middle
The NSURLSession API
has some great built-in

00:36:34.496 --> 00:36:35.376 A:middle
security features.

00:36:35.376 --> 00:36:37.286 A:middle
And I want to share with you
just a few enhancements we've

00:36:37.286 --> 00:36:38.986 A:middle
made to these features.

00:36:40.376 --> 00:36:43.156 A:middle
Transport Layer Security,
or TLS, is a protocol

00:36:43.156 --> 00:36:47.506 A:middle
that protects data transmitted
by endpoints over a network.

00:36:47.506 --> 00:36:49.566 A:middle
So sometimes you've
heard the term SSL.

00:36:49.866 --> 00:36:51.526 A:middle
This was the predecessor to TLS.

00:36:51.526 --> 00:36:54.606 A:middle
So, TLS and SSL are sometimes
used interchangeably.

00:36:55.226 --> 00:36:58.996 A:middle
TLS makes use of ciphers
to achieve this protection.

00:36:59.096 --> 00:37:01.226 A:middle
Ciphers scramble
data on one side --


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.096 --> 00:37:01.226 A:middle
Ciphers scramble
data on one side --

00:37:01.536 --> 00:37:03.666 A:middle
scramble data sent
over the network.

00:37:04.036 --> 00:37:06.496 A:middle
And the other receiving
side uses the same cipher

00:37:06.496 --> 00:37:09.556 A:middle
to unscramble that data so that
it can use and understand it.

00:37:09.556 --> 00:37:12.846 A:middle
If somebody were to grab
that data in the middle,

00:37:12.846 --> 00:37:14.856 A:middle
it's just big glob of blah.

00:37:14.856 --> 00:37:15.556 A:middle
They can't use it.

00:37:15.556 --> 00:37:16.646 A:middle
So it protects the data.

00:37:17.666 --> 00:37:19.916 A:middle
Now, one of the things
that has changed,

00:37:19.916 --> 00:37:21.266 A:middle
and I want to make you aware of,

00:37:21.266 --> 00:37:26.366 A:middle
is that Apple's platforms no
longer support the RC4 cipher.

00:37:27.386 --> 00:37:32.236 A:middle
So for more details, I recommend
that you take a look at,

00:37:32.396 --> 00:37:35.606 A:middle
review the security sessions
that occurred on Tuesday.

00:37:36.096 --> 00:37:37.976 A:middle
Possibly attend one
of their labs

00:37:37.976 --> 00:37:39.036 A:middle
and ask some questions there

00:37:39.036 --> 00:37:40.606 A:middle
for a little bit
more detail on that.

00:37:41.256 --> 00:37:44.036 A:middle
So, what this means to
your applications, however,

00:37:44.036 --> 00:37:45.986 A:middle
is that connections
that you used

00:37:45.986 --> 00:37:49.626 A:middle
to make successfully could
possibly fail suddenly.

00:37:50.006 --> 00:37:51.656 A:middle
And this could be due to servers

00:37:51.656 --> 00:37:54.596 A:middle
that are supporting
only the RC4 cipher.

00:37:55.186 --> 00:37:58.036 A:middle
Now, we have a way that you can
kind of test this theory out.

00:37:59.316 --> 00:38:02.786 A:middle
There is a command line
tool on macOS called nscurl.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.316 --> 00:38:02.786 A:middle
There is a command line
tool on macOS called nscurl.

00:38:02.786 --> 00:38:07.236 A:middle
And this could be used to test
for RC4-only ciphers on servers

00:38:07.236 --> 00:38:08.746 A:middle
that your apps communicate with.

00:38:09.316 --> 00:38:12.626 A:middle
Now, here I'm going
to use nscurl simply

00:38:12.626 --> 00:38:15.556 A:middle
to grab the root
document of this server.

00:38:15.986 --> 00:38:18.826 A:middle
So if I execute this
command -- whoa!

00:38:18.826 --> 00:38:22.046 A:middle
I see that, hey, the
HTTP Load failed.

00:38:22.246 --> 00:38:22.876 A:middle
Hmm. That's funny.

00:38:22.876 --> 00:38:24.406 A:middle
I used to be able to
connect that server.

00:38:24.796 --> 00:38:28.196 A:middle
Let's find out if our theory
about RC4 is true or not.

00:38:29.616 --> 00:38:33.666 A:middle
Here I've added a flag to
nscurl called enable-rc4.

00:38:33.786 --> 00:38:37.626 A:middle
And that means that I am
going to force the use of RC4

00:38:37.756 --> 00:38:39.516 A:middle
on the client's side
of the connection.

00:38:39.916 --> 00:38:40.736 A:middle
So I run this.

00:38:41.416 --> 00:38:43.376 A:middle
Wow! This worked
all of a sudden.

00:38:43.376 --> 00:38:46.296 A:middle
So this proves to me that this
server is only supporting RC4.

00:38:46.346 --> 00:38:49.376 A:middle
I'm going to have to go have
a talk with that server admin

00:38:49.736 --> 00:38:52.636 A:middle
and figure out what could we
do to get some secure ciphers

00:38:52.636 --> 00:38:56.036 A:middle
onto that server so we
can protect our user data

00:38:56.036 --> 00:38:57.166 A:middle
within our application.

00:38:57.166 --> 00:38:58.556 A:middle
So I hope you get
the point here.

00:38:59.056 --> 00:39:01.976 A:middle
The RC4 cipher is no longer
supported on our platforms.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.056 --> 00:39:01.976 A:middle
The RC4 cipher is no longer
supported on our platforms.

00:39:01.976 --> 00:39:03.686 A:middle
And this could affect
your applications.

00:39:03.686 --> 00:39:05.226 A:middle
So just be aware of that.

00:39:06.166 --> 00:39:08.266 A:middle
App Transport Security, or ATS.

00:39:08.266 --> 00:39:09.946 A:middle
This is a great security
feature.

00:39:09.946 --> 00:39:13.206 A:middle
It allows you to set the policy,
security policies for your app.

00:39:13.206 --> 00:39:15.516 A:middle
You specify keys that
grant entitlements.

00:39:15.976 --> 00:39:18.496 A:middle
And these become your
policies for your applications.

00:39:18.496 --> 00:39:20.826 A:middle
Now, we've added two new keys
that I want to share with you.

00:39:21.686 --> 00:39:24.806 A:middle
The first one is
NSAllowsArbitraryLoadsIn

00:39:24.806 --> 00:39:25.726 A:middle
WebContent.

00:39:26.066 --> 00:39:30.876 A:middle
So, if you have a WK Web
view and have scoped only

00:39:30.876 --> 00:39:34.466 A:middle
to that class, if you have
that class in your application

00:39:34.466 --> 00:39:37.616 A:middle
and you have this key present,
that object will be allowed

00:39:37.616 --> 00:39:40.326 A:middle
to make any sort of network
loads that you have specified.

00:39:40.326 --> 00:39:43.226 A:middle
It'll ignore whatever other
policy you have in your app.

00:39:43.566 --> 00:39:45.716 A:middle
But again, that's contained
only to that one object.

00:39:45.716 --> 00:39:48.456 A:middle
Any loads outside of
that object will conform

00:39:48.776 --> 00:39:50.256 A:middle
to your security policy.

00:39:52.436 --> 00:39:56.396 A:middle
The other value we have
is NSRequiresCertificate

00:39:56.396 --> 00:39:57.336 A:middle
Transparency.

00:39:57.766 --> 00:39:59.366 A:middle
Now, this requires that certs

00:39:59.796 --> 00:40:03.366 A:middle
that your app receives must
support these certificate


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.796 --> 00:40:03.366 A:middle
that your app receives must
support these certificate

00:40:03.366 --> 00:40:05.166 A:middle
transparency feature.

00:40:05.636 --> 00:40:09.286 A:middle
Certificate Transparency is
a feature of signedCerts.

00:40:09.646 --> 00:40:12.496 A:middle
This allows you to use
a provided certificate

00:40:12.496 --> 00:40:15.866 A:middle
with greater assurance that
the certificate is legitimate.

00:40:15.866 --> 00:40:17.746 A:middle
And that you can
trust the endpoint

00:40:17.746 --> 00:40:19.066 A:middle
that gave you that certificate.

00:40:19.636 --> 00:40:23.826 A:middle
For more details on that
particular subject, again,

00:40:23.826 --> 00:40:26.366 A:middle
recommend that you take a look
at these security sessions

00:40:26.366 --> 00:40:29.046 A:middle
or attend one of their
labs to get more details

00:40:29.046 --> 00:40:30.846 A:middle
on Certificate Transparency.

00:40:31.456 --> 00:40:34.446 A:middle
Everything that I've discussed
relates to the NSURLSession API.

00:40:35.176 --> 00:40:37.086 A:middle
We've seen this API evolve

00:40:37.606 --> 00:40:39.186 A:middle
with new features
that have been added.

00:40:39.476 --> 00:40:42.106 A:middle
And we're really excited to see
what you guys are going to do

00:40:42.106 --> 00:40:44.476 A:middle
with your applications as
you take advantage of some

00:40:44.476 --> 00:40:45.646 A:middle
of these great new features.

00:40:46.546 --> 00:40:51.046 A:middle
I introduced support for the
HTTP/2 Server Push feature.

00:40:51.696 --> 00:40:53.716 A:middle
This means that your
apps are going to be able

00:40:53.716 --> 00:40:54.956 A:middle
to perform even better.

00:40:56.536 --> 00:40:58.826 A:middle
I introduced Network Statistics.

00:40:59.456 --> 00:41:02.596 A:middle
Now you can introspect your
application network behavior


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.456 --> 00:41:02.596 A:middle
Now you can introspect your
application network behavior

00:41:02.596 --> 00:41:03.936 A:middle
like never before.

00:41:04.386 --> 00:41:07.316 A:middle
This will result in an
improved end user experience

00:41:07.426 --> 00:41:08.836 A:middle
for your applications.

00:41:09.786 --> 00:41:13.626 A:middle
I shared with you some
security-related features in ATS

00:41:13.626 --> 00:41:15.786 A:middle
and the deprecation
of the RC4 cipher.

00:41:16.286 --> 00:41:19.456 A:middle
Your apps can now implement
best security practices

00:41:19.456 --> 00:41:22.726 A:middle
and keep your user data
safe and protected.

00:41:22.726 --> 00:41:27.046 A:middle
Now, we hope that you
will use NSURLSession

00:41:27.046 --> 00:41:30.056 A:middle
in your applications for
not just these reasons,

00:41:30.056 --> 00:41:31.346 A:middle
but for all the great features

00:41:31.346 --> 00:41:33.276 A:middle
that are inside of
NSURLSession API.

00:41:35.076 --> 00:41:36.856 A:middle
If you want more information,

00:41:36.856 --> 00:41:38.876 A:middle
this is the URL for
this session.

00:41:38.876 --> 00:41:40.126 A:middle
So you can go back
and review some

00:41:40.126 --> 00:41:41.366 A:middle
of the things we
discussed today.

00:41:42.756 --> 00:41:45.466 A:middle
Some related sessions we think
that you will be interested

00:41:45.466 --> 00:41:48.486 A:middle
in on this subject I've
got listed up here for you.

00:41:49.436 --> 00:41:50.186 A:middle
Well, that's it.

00:41:50.186 --> 00:41:50.666 A:middle
Thank you.

00:41:50.666 --> 00:41:52.956 A:middle
Hope you have a great
rest of the WWDC.

00:41:53.506 --> 00:41:53.856 A:middle
Thank you.

00:41:54.508 --> 00:41:56.508 A:middle
[ Applause ]

