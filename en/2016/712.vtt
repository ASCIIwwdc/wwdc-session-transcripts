WEBVTT

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:21.516 --> 00:00:27.386 A:middle
[ Applause ]

00:00:27.886 --> 00:00:28.706 A:middle
&gt;&gt; Hello and welcome.

00:00:28.756 --> 00:00:31.466 A:middle
I hope that everybody's
having a great WWDC.

00:00:32.116 --> 00:00:34.146 A:middle
My name is Justin Stoyles,
I'm part of our Graphics

00:00:34.146 --> 00:00:35.216 A:middle
and Media Group here at Apple.

00:00:35.736 --> 00:00:37.396 A:middle
And I'm really excited
to talk to you today

00:00:37.396 --> 00:00:38.686 A:middle
about working with wide color.

00:00:39.406 --> 00:00:41.296 A:middle
We're going to cover
a few topics today.

00:00:41.296 --> 00:00:42.256 A:middle
I'm going to start

00:00:42.256 --> 00:00:44.606 A:middle
with discussing some
core color concepts.

00:00:45.066 --> 00:00:47.076 A:middle
And we'll talk a little bit
about what is wide color

00:00:47.226 --> 00:00:48.026 A:middle
and why does it matter.

00:00:48.926 --> 00:00:50.326 A:middle
Then I'm going to hand
it over to Patrick,

00:00:50.556 --> 00:00:52.376 A:middle
who's going to walk you
over some of the processes

00:00:52.666 --> 00:00:55.646 A:middle
of getting wide color assets
into your application.

00:00:55.996 --> 00:00:58.136 A:middle
And then I'm going to
hand it over to Steve,

00:00:58.316 --> 00:01:00.066 A:middle
who's going to talk about
rendering wide color.

00:00:58.316 --> 00:01:00.066 A:middle
who's going to talk about
rendering wide color.

00:01:00.686 --> 00:01:01.426 A:middle
So let's get started.

00:01:02.416 --> 00:01:04.336 A:middle
As I mentioned, I'm
excited to talk to you

00:01:04.336 --> 00:01:06.476 A:middle
about wide color today
and the reason why is

00:01:06.476 --> 00:01:08.236 A:middle
because we're actually
transforming the way

00:01:08.236 --> 00:01:10.756 A:middle
that we handle wide color,
and colors in general

00:01:10.856 --> 00:01:12.266 A:middle
on the Mac and iOS platform.

00:01:12.986 --> 00:01:15.876 A:middle
A good place to start
is in the '90s.

00:01:16.396 --> 00:01:18.226 A:middle
So Apple has always
been at the forefront

00:01:18.226 --> 00:01:20.056 A:middle
of solving the color
problem in computing.

00:01:20.466 --> 00:01:22.076 A:middle
And a good place to
start with ColorSync.

00:01:22.276 --> 00:01:25.046 A:middle
So ColorSync is our color
management platform on the Mac

00:01:25.496 --> 00:01:27.366 A:middle
and it was developed in
the '90s and at the time,

00:01:27.606 --> 00:01:30.076 A:middle
Apple and a number of other
like-minded companies got

00:01:30.076 --> 00:01:32.816 A:middle
together with the idea that
standards in color management

00:01:32.816 --> 00:01:35.096 A:middle
and color reproduction
would begin to solve some

00:01:35.096 --> 00:01:37.226 A:middle
of the problems faced by
engineers and designers

00:01:37.546 --> 00:01:38.326 A:middle
when working with color.

00:01:39.456 --> 00:01:40.746 A:middle
That group later became known

00:01:40.746 --> 00:01:42.966 A:middle
as the International
Color Consortium, or ICC,

00:01:42.966 --> 00:01:44.046 A:middle
which you may be familiar with.

00:01:44.786 --> 00:01:47.546 A:middle
The work of ICC was then
incorporated into ColorSync

00:01:47.546 --> 00:01:49.366 A:middle
and we built that
fundamentally into OS X.

00:01:51.036 --> 00:01:53.716 A:middle
Now Apple has also been at the
forefront of display technology.

00:01:54.036 --> 00:01:55.826 A:middle
We now have these
beautiful retina displays

00:01:55.826 --> 00:01:56.766 A:middle
across our product line.

00:01:56.976 --> 00:01:57.976 A:middle
People really, really love them.

00:01:58.436 --> 00:01:59.896 A:middle
But what really is
the next frontier?

00:02:00.686 --> 00:02:04.796 A:middle
Well, last year we announced
the beautiful new iMacs

00:02:04.796 --> 00:02:05.676 A:middle
with P3 displays.

00:02:06.146 --> 00:02:07.826 A:middle
And the feedback we got
was really tremendous.

00:02:08.186 --> 00:02:09.966 A:middle
They display 25 percent
more color.

00:02:10.316 --> 00:02:11.726 A:middle
And they have the
P3 color space,

00:02:11.726 --> 00:02:12.796 A:middle
which people really,
really love.

00:02:13.326 --> 00:02:14.816 A:middle
And if you fast forward
another year,

00:02:15.136 --> 00:02:18.806 A:middle
we have these new iPad Pro
9.7 displays with True Tones.

00:02:18.806 --> 00:02:20.096 A:middle
So we've taken that
even further.

00:02:20.656 --> 00:02:22.226 A:middle
Now, there's a lot
happening under the hood here,

00:02:22.266 --> 00:02:24.236 A:middle
and we're going to try to get
into some of those topics today.

00:02:24.606 --> 00:02:26.846 A:middle
And I'll start with
Core Color Concepts.

00:02:27.166 --> 00:02:29.436 A:middle
Let's start very,
very, very simple.

00:02:29.576 --> 00:02:31.446 A:middle
So, what is a color space?

00:02:31.446 --> 00:02:33.216 A:middle
Well a color space
is an environment

00:02:33.296 --> 00:02:35.446 A:middle
in which colors can be
compared and represented.

00:02:35.736 --> 00:02:38.626 A:middle
It can be a 1, 2, 3,
or 4 dimensional space

00:02:38.756 --> 00:02:41.856 A:middle
that is defined by the intensity
of its color components.

00:02:43.166 --> 00:02:45.586 A:middle
Those color components
are also often referred

00:02:45.586 --> 00:02:46.386 A:middle
to as color channels.

00:02:47.326 --> 00:02:49.876 A:middle
One representation that you
might be familiar with is RGB.

00:02:50.276 --> 00:02:52.906 A:middle
So, this is very
relevant with displays,

00:02:52.906 --> 00:02:54.726 A:middle
where your subpixels are
red, green, and blue.

00:02:54.726 --> 00:02:57.046 A:middle
And to think about these
color channels you can think

00:02:57.046 --> 00:02:58.446 A:middle
that the intensity of each

00:02:58.446 --> 00:03:00.476 A:middle
of these color channels
defines the color

00:02:58.446 --> 00:03:00.476 A:middle
of these color channels
defines the color

00:03:00.476 --> 00:03:02.086 A:middle
that you see on the other end.

00:03:03.276 --> 00:03:05.356 A:middle
There's many different
types of color spaces.

00:03:05.536 --> 00:03:08.056 A:middle
I mentioned RGB spaces, which
are very popular in displays.

00:03:08.446 --> 00:03:10.626 A:middle
But there's also lots
more, there's gray spaces,

00:03:10.626 --> 00:03:11.966 A:middle
which are used in
monochrome printing.

00:03:12.686 --> 00:03:15.286 A:middle
In color printing we
often use CMYK spaces.

00:03:15.696 --> 00:03:17.646 A:middle
And if you're trying
to do calculations

00:03:17.646 --> 00:03:20.286 A:middle
and transformations, we
generally use color spaces

00:03:20.286 --> 00:03:22.056 A:middle
like LAB, which are
device independent.

00:03:22.666 --> 00:03:28.056 A:middle
So now we have color spaces, and
color channels, and we now want

00:03:28.056 --> 00:03:29.186 A:middle
to create a coordinate system

00:03:29.186 --> 00:03:30.846 A:middle
where we can compare
and compute colors.

00:03:31.246 --> 00:03:33.036 A:middle
So there's the concept
of color primaries.

00:03:33.636 --> 00:03:37.076 A:middle
So color primaries generally
fall at the most intense value

00:03:37.076 --> 00:03:39.456 A:middle
that you can get with that
particular color channel.

00:03:40.296 --> 00:03:43.526 A:middle
So in this example of an RGB
color space, you would see

00:03:43.526 --> 00:03:44.826 A:middle
that the color primaries are

00:03:44.826 --> 00:03:47.766 A:middle
where we anchor 1.0
in our color space.

00:03:48.236 --> 00:03:50.956 A:middle
So for black, I would
have no saturation in each

00:03:50.956 --> 00:03:52.626 A:middle
of my color channels,
so I have 0, 0, 0.

00:03:53.206 --> 00:03:54.676 A:middle
For white I would have 1, 1, 1.

00:03:54.976 --> 00:03:57.116 A:middle
And for red I would only
saturate the red channel,

00:03:57.426 --> 00:03:58.576 A:middle
and I would have 1, 0, 0.

00:03:59.216 --> 00:03:59.656 A:middle
Very simple.

00:04:00.846 --> 00:04:03.576 A:middle
And when we refer to color
gamut, we're actually talking

00:04:03.576 --> 00:04:06.576 A:middle
about all of the colors that
can be defined as a combination

00:04:06.576 --> 00:04:08.046 A:middle
of those individual
color channels.

00:04:09.066 --> 00:04:11.266 A:middle
So now you understand some
of the basic color concepts

00:04:11.296 --> 00:04:13.066 A:middle
that we're going to be
discussing in this presentation.

00:04:13.306 --> 00:04:14.796 A:middle
So then what is wide color?

00:04:15.206 --> 00:04:17.336 A:middle
Well first we should
talk a little bit

00:04:17.375 --> 00:04:19.276 A:middle
about what is the standard
in the industry today.

00:04:20.146 --> 00:04:24.586 A:middle
So standard RGB, or sRGB is the
most widely used color space

00:04:24.586 --> 00:04:25.346 A:middle
in computing today.

00:04:25.916 --> 00:04:28.206 A:middle
It's based on the
BT.709 standard.

00:04:28.206 --> 00:04:30.096 A:middle
We use an approximated
gamma of 2.2.

00:04:30.516 --> 00:04:32.056 A:middle
Typical lighting conditions.

00:04:32.056 --> 00:04:33.456 A:middle
Which in this case is D65.

00:04:34.226 --> 00:04:36.476 A:middle
And it's the default
color space for iOS.

00:04:36.756 --> 00:04:38.236 A:middle
And it's actually the
default color space

00:04:38.236 --> 00:04:39.286 A:middle
for a lot of platforms.

00:04:39.666 --> 00:04:41.706 A:middle
Which is very convenient,
because there are some platforms

00:04:41.706 --> 00:04:42.826 A:middle
out there that are
color managed,

00:04:42.946 --> 00:04:43.826 A:middle
and there are some that are not.

00:04:44.226 --> 00:04:45.756 A:middle
And when a lot of
the content that is

00:04:45.756 --> 00:04:49.016 A:middle
in existence today is sRGB,
you can make some assumptions

00:04:49.126 --> 00:04:50.286 A:middle
on your incoming content

00:04:50.286 --> 00:04:52.396 A:middle
and have it reproduce
faithfully on the other end.

00:04:52.776 --> 00:04:54.336 A:middle
But that's not always
going to be case.

00:04:54.726 --> 00:04:57.496 A:middle
sRGB does a good job of
describing colors that we work

00:04:57.496 --> 00:04:59.926 A:middle
with on a daily basis, and our
systems have been really good

00:04:59.926 --> 00:05:01.236 A:middle
at displaying those
colors to us.

00:04:59.926 --> 00:05:01.236 A:middle
at displaying those
colors to us.

00:05:01.746 --> 00:05:05.486 A:middle
But really there's a lot of
colors that don't fit into sRGB.

00:05:06.316 --> 00:05:09.486 A:middle
A lot of textiles are
designed using inks and dyes

00:05:09.886 --> 00:05:11.826 A:middle
that have lots of colors
that are outside of sRGB,

00:05:11.826 --> 00:05:14.546 A:middle
mainly because these
colors really catch our eye.

00:05:14.546 --> 00:05:16.026 A:middle
They're really vivid
and impressive.

00:05:16.656 --> 00:05:18.296 A:middle
If you're watching
soccer for example,

00:05:18.406 --> 00:05:21.026 A:middle
a lot of the uniforms are
actually outside of sRGB,

00:05:21.026 --> 00:05:22.766 A:middle
because they're striking,
they get our attention.

00:05:23.056 --> 00:05:24.676 A:middle
Whether you're watching
your kid's soccer game,

00:05:24.676 --> 00:05:26.326 A:middle
or you're watching the
Eurocup, you're going

00:05:26.326 --> 00:05:27.886 A:middle
to see a lot these
jerseys with colors

00:05:27.886 --> 00:05:29.746 A:middle
that are actually not
describable within sRGB.

00:05:29.746 --> 00:05:33.896 A:middle
A lot of products are
also designed with colors

00:05:33.896 --> 00:05:34.766 A:middle
that are outside of sRGB.

00:05:34.766 --> 00:05:37.176 A:middle
And these are products that we
interact with on a daily basis.

00:05:38.166 --> 00:05:40.916 A:middle
But really the most compelling
examples are in nature itself.

00:05:41.366 --> 00:05:44.866 A:middle
Sunsets, autumn leaves,
tropical waters.

00:05:45.106 --> 00:05:47.246 A:middle
These are all things in
nature that have colors

00:05:47.246 --> 00:05:48.176 A:middle
that are outside of sRGB.

00:05:48.176 --> 00:05:50.786 A:middle
And we actually want
to show those.

00:05:51.056 --> 00:05:53.896 A:middle
And the nice thing is you
probably have a lot of images

00:05:53.896 --> 00:05:55.006 A:middle
that you've taken
on your camera,

00:05:55.086 --> 00:05:56.516 A:middle
especially if you're
capturing in RAW,

00:05:56.856 --> 00:05:58.616 A:middle
that actually contain a
lot of this color data,

00:05:58.616 --> 00:06:00.316 A:middle
but you're not seeing
it on your display

00:05:58.616 --> 00:06:00.316 A:middle
but you're not seeing
it on your display

00:06:00.316 --> 00:06:01.786 A:middle
if your display is only sRGB.

00:06:02.116 --> 00:06:06.016 A:middle
So what do we do about this?

00:06:06.236 --> 00:06:08.826 A:middle
Well, last year as I mentioned,
we introduced products

00:06:08.826 --> 00:06:09.886 A:middle
with a new color space.

00:06:09.886 --> 00:06:12.246 A:middle
And that color space
is Display P3.

00:06:12.456 --> 00:06:15.356 A:middle
So in our iMacs, and in
our new iPad Pro 9.7,

00:06:15.716 --> 00:06:16.826 A:middle
we use this color space.

00:06:16.826 --> 00:06:19.176 A:middle
And it's based on the
SMPTE standard of DCI-P3.

00:06:19.176 --> 00:06:21.006 A:middle
But it's a little bit different.

00:06:21.566 --> 00:06:25.006 A:middle
DCI-P3 is a color space that is
defined for digital projection.

00:06:25.006 --> 00:06:27.116 A:middle
And it works really great
for those viewing conditions.

00:06:27.616 --> 00:06:30.016 A:middle
But our viewing conditions
are a little bit different.

00:06:30.126 --> 00:06:33.696 A:middle
And sRGB is really great at
defining a standard that works

00:06:33.696 --> 00:06:34.856 A:middle
with our viewing conditions.

00:06:34.856 --> 00:06:37.806 A:middle
So we adopted the same gamma,
and typical lighting conditions

00:06:37.806 --> 00:06:39.516 A:middle
for our white point, as sRGB.

00:06:39.516 --> 00:06:44.536 A:middle
These are the key differences
between Display P3 and DCI-P3.

00:06:44.886 --> 00:06:47.656 A:middle
In order to understand what
colors are actually outside

00:06:47.656 --> 00:06:50.166 A:middle
of sRGB, but can be
described in Display P3,

00:06:50.166 --> 00:06:52.556 A:middle
I'll try to show it
to you in action.

00:06:54.136 --> 00:06:56.136 A:middle
So here's an image
from my photo library,

00:06:56.466 --> 00:06:59.686 A:middle
and I exported it using photos
in a Display P3 color space.

00:07:00.106 --> 00:07:01.376 A:middle
This is a really
beautiful image,

00:07:01.696 --> 00:07:04.186 A:middle
and even though we're viewing
it on an sRGB projector today,

00:07:04.186 --> 00:07:06.706 A:middle
or if you're viewing the video,
you're viewing it in sRGB today.

00:07:06.946 --> 00:07:08.486 A:middle
This image still looks
really, really great.

00:07:08.486 --> 00:07:10.436 A:middle
But there's a lot of
things in this image

00:07:10.436 --> 00:07:13.966 A:middle
that you might not notice right
away, but there's actually a lot

00:07:13.966 --> 00:07:16.726 A:middle
of colors that aren't
actually describable in sRGB.

00:07:16.726 --> 00:07:19.806 A:middle
These are colors that are
outside of the sRGB color gamut.

00:07:20.156 --> 00:07:22.946 A:middle
And in this case what you
end up with is posterization

00:07:22.946 --> 00:07:25.336 A:middle
in those regions, so
those colors are flattened

00:07:25.336 --> 00:07:26.786 A:middle
on the edge of the sRGB gamut.

00:07:28.016 --> 00:07:29.036 A:middle
So how do we fix this?

00:07:29.036 --> 00:07:32.906 A:middle
Well, we're moving more
professional workflows

00:07:33.026 --> 00:07:34.126 A:middle
to our mobile platforms.

00:07:34.936 --> 00:07:36.206 A:middle
And in order to enable that,

00:07:36.326 --> 00:07:38.896 A:middle
it's not just putting a wide
gamut display into your system.

00:07:38.896 --> 00:07:41.726 A:middle
There's a number of other things
that need to come along with it.

00:07:41.996 --> 00:07:43.356 A:middle
One of those things is we need

00:07:43.356 --> 00:07:44.826 A:middle
to upgrade our factory
calibration.

00:07:45.186 --> 00:07:49.016 A:middle
So, now all of our products have
individually calibrated displays

00:07:49.216 --> 00:07:50.866 A:middle
that from device to
device you can count

00:07:50.866 --> 00:07:52.706 A:middle
on those colors being
accurate and consistent.

00:07:53.086 --> 00:07:54.906 A:middle
And then finally, we had

00:07:54.906 --> 00:07:58.116 A:middle
to build full system-wide
color management into iOS.

00:07:58.116 --> 00:07:59.936 A:middle
And that's exactly
what we've done.

00:08:00.486 --> 00:08:04.886 A:middle
But we can't just build the
same color management system

00:08:05.126 --> 00:08:06.836 A:middle
with the same approach
as we did on the Mac.

00:08:07.526 --> 00:08:10.686 A:middle
There's different considerations
and different restrictions

00:08:10.686 --> 00:08:11.936 A:middle
when working with
a mobile platform.

00:08:12.556 --> 00:08:15.386 A:middle
One of those considerations
are the countless applications

00:08:15.386 --> 00:08:17.386 A:middle
that already exist
in the iOS ecosystem.

00:08:17.986 --> 00:08:21.886 A:middle
These are applications that are
built in sRGB, tuned for color

00:08:21.886 --> 00:08:23.356 A:middle
and performance in sRGB.

00:08:23.926 --> 00:08:26.706 A:middle
So how do we make sure that
those applications can still run

00:08:26.706 --> 00:08:28.466 A:middle
on our platforms that
are now color managed,

00:08:28.706 --> 00:08:30.396 A:middle
without any impact
to performance,

00:08:30.616 --> 00:08:32.145 A:middle
without any impact
to your colors.

00:08:32.746 --> 00:08:35.246 A:middle
And what we did is we
built on top of sRGB.

00:08:36.326 --> 00:08:39.706 A:middle
So we've introduced an
extended range sRGB color space.

00:08:40.086 --> 00:08:42.686 A:middle
This is our working space
for working with wide color.

00:08:43.466 --> 00:08:45.696 A:middle
We use the same sRGB primaries.

00:08:47.216 --> 00:08:48.846 A:middle
We use the same gamma 2.2.

00:08:49.256 --> 00:08:50.396 A:middle
The same white point.

00:08:51.176 --> 00:08:53.296 A:middle
But, the interesting
difference here is

00:08:53.296 --> 00:08:55.666 A:middle
that we actually allow values
that are greater than one

00:08:55.806 --> 00:08:58.156 A:middle
and less than zero,
which allows us

00:08:58.156 --> 00:09:00.826 A:middle
to not only keep the same
performance and look of all

00:08:58.156 --> 00:09:00.826 A:middle
to not only keep the same
performance and look of all

00:09:00.826 --> 00:09:04.406 A:middle
of your applications that are
built in sRGB, but using values

00:09:04.406 --> 00:09:05.916 A:middle
that are negative and
values that are greater

00:09:05.916 --> 00:09:09.116 A:middle
than one allow us to express any
color in the visual spectrum,

00:09:09.286 --> 00:09:11.516 A:middle
while still keeping our
anchor points in sRGB.

00:09:12.196 --> 00:09:15.586 A:middle
The best way to describe
this is with a demonstration.

00:09:16.766 --> 00:09:19.796 A:middle
So let's say I want to
take the most saturated red

00:09:19.796 --> 00:09:20.436 A:middle
in Display P3.

00:09:20.436 --> 00:09:22.466 A:middle
So that would be 1, 0, 0.

00:09:23.146 --> 00:09:25.856 A:middle
Now, if want to express
that in extended range sRGB,

00:09:25.856 --> 00:09:28.496 A:middle
it would look a little
bit like this.

00:09:29.076 --> 00:09:31.066 A:middle
So in the red channel,
I actually have a value

00:09:31.066 --> 00:09:32.056 A:middle
that is greater than one.

00:09:32.656 --> 00:09:34.306 A:middle
And in the green
and blue channels,

00:09:34.436 --> 00:09:36.166 A:middle
I'm actually using
negative values.

00:09:36.166 --> 00:09:38.106 A:middle
So I'm subtracting
green and blue,

00:09:38.316 --> 00:09:40.036 A:middle
and adding oversaturated red.

00:09:40.036 --> 00:09:43.286 A:middle
And what that allows me to do
is get a color that is outside

00:09:43.286 --> 00:09:47.736 A:middle
of the sRGB gamut, while using
that same sRGB anchor points

00:09:48.116 --> 00:09:49.926 A:middle
in extended range sRGB.

00:09:51.556 --> 00:09:54.186 A:middle
The interesting thing is if
you're using a pixel format

00:09:54.366 --> 00:09:56.756 A:middle
that allows you to go very
negative, and very positive,

00:09:57.126 --> 00:09:59.386 A:middle
this approach allows
you to express any color

00:09:59.386 --> 00:09:59.976 A:middle
in the visual spectrum.

00:10:00.056 --> 00:10:01.566 A:middle
So this is scalable.

00:10:02.036 --> 00:10:05.906 A:middle
Speaking of pixel formats,

00:10:07.336 --> 00:10:11.506 A:middle
sRGB is largely standardized
in 8 bits.

00:10:11.506 --> 00:10:16.086 A:middle
So 8 bits is largely enough
to describe colors in sRGB,

00:10:16.856 --> 00:10:17.896 A:middle
not perfect, but great.

00:10:18.386 --> 00:10:20.846 A:middle
Now an easy example to
describe the difference

00:10:20.846 --> 00:10:22.996 A:middle
between the precision that
we would want for sRGB,

00:10:22.996 --> 00:10:24.856 A:middle
and the precision
that we would want

00:10:24.926 --> 00:10:27.906 A:middle
for wider gamut, is
with this example.

00:10:27.956 --> 00:10:30.646 A:middle
So say I wanted to build
a staircase in my home

00:10:30.786 --> 00:10:32.076 A:middle
from the basement
to my first floor.

00:10:32.456 --> 00:10:35.116 A:middle
I would use, say 8 stairs, I'd
probably use 12, but let's say

00:10:35.116 --> 00:10:36.306 A:middle
for simplicity I would use 8.

00:10:37.516 --> 00:10:38.946 A:middle
This is the appropriate
height for me.

00:10:39.346 --> 00:10:42.056 A:middle
Now, if I wanted to extend that
staircase up to my second floor,

00:10:42.566 --> 00:10:44.406 A:middle
I wouldn't just use the
same number of stairs.

00:10:44.586 --> 00:10:46.496 A:middle
And when we're using
digital encoding for color,

00:10:46.996 --> 00:10:49.566 A:middle
it makes sense that if you're
trying to express more colors,

00:10:49.866 --> 00:10:51.556 A:middle
you would want to
us more precision.

00:10:57.056 --> 00:11:00.106 A:middle
So if we're talking about using
colors that are outside of sRGB,

00:10:57.056 --> 00:11:00.106 A:middle
So if we're talking about using
colors that are outside of sRGB,

00:11:00.446 --> 00:11:03.606 A:middle
really our recommendation is to
use 16 bits per color channel.

00:11:04.186 --> 00:11:07.876 A:middle
Now, before I hand
it over to Patrick,

00:11:08.006 --> 00:11:09.746 A:middle
I wanted to end with
one more point.

00:11:09.746 --> 00:11:12.726 A:middle
So, we've gone through our
entire system and upgraded all

00:11:12.726 --> 00:11:15.186 A:middle
of our frameworks and
tools to be color savvy.

00:11:15.626 --> 00:11:17.236 A:middle
But if you're building
your application

00:11:17.236 --> 00:11:18.436 A:middle
with open source tools,

00:11:18.776 --> 00:11:21.406 A:middle
or you've built your own
image processing pipeline

00:11:21.406 --> 00:11:24.456 A:middle
from scratch, you need to
take some action to make sure

00:11:24.456 --> 00:11:27.376 A:middle
that the tools that you've
used are color savvy.

00:11:28.036 --> 00:11:29.676 A:middle
Otherwise, we've
got you covered.

00:11:30.136 --> 00:11:32.316 A:middle
And for more on that, I'll
hand it over to Patrick.

00:11:33.516 --> 00:11:36.546 A:middle
[ Applause ]

00:11:37.046 --> 00:11:37.556 A:middle
&gt;&gt; Thank you Justin.

00:11:38.866 --> 00:11:39.806 A:middle
Hi. I'm Patrick Heynen.

00:11:39.806 --> 00:11:42.156 A:middle
I'm a Senior Engineering Manager
in the Cocoa Frameworks Group.

00:11:42.716 --> 00:11:45.716 A:middle
And I'd like to ask where
does wide color come from?

00:11:45.906 --> 00:11:48.066 A:middle
Well the answer is it turns
out, it's not just shirt.

00:11:48.536 --> 00:11:50.326 A:middle
No, it comes from you.

00:11:51.336 --> 00:11:53.956 A:middle
Namely, it comes from
apps and their content,

00:11:54.446 --> 00:11:55.756 A:middle
and the user experiences

00:11:55.756 --> 00:11:57.236 A:middle
that you provide in
your applications.

00:11:58.386 --> 00:12:01.596 A:middle
So what kind of content types
are amenable for wide color?

00:11:58.386 --> 00:12:01.596 A:middle
So what kind of content types
are amenable for wide color?

00:12:02.566 --> 00:12:05.156 A:middle
Well the first one is the one
you're probably most familiar

00:12:05.156 --> 00:12:06.766 A:middle
with and that's static
image resources.

00:12:06.846 --> 00:12:09.406 A:middle
These are the sort
of the PNG, or JPEG,

00:12:09.406 --> 00:12:11.906 A:middle
or individual graphic files
that you may have bundled

00:12:11.906 --> 00:12:13.596 A:middle
into your application
and shipped along

00:12:13.656 --> 00:12:16.056 A:middle
with your application
bundle to your customers.

00:12:17.626 --> 00:12:19.936 A:middle
The next category is document

00:12:19.936 --> 00:12:21.576 A:middle
and network-based
image resources.

00:12:21.576 --> 00:12:24.136 A:middle
These are individual
image content

00:12:24.456 --> 00:12:27.376 A:middle
that you may either download
off of a network service,

00:12:27.666 --> 00:12:31.836 A:middle
or store in your document data.

00:12:32.016 --> 00:12:34.376 A:middle
There's also further
categories, like advanced media,

00:12:34.376 --> 00:12:37.186 A:middle
which refers to things like
live photos, or content acquire

00:12:37.186 --> 00:12:40.566 A:middle
from the build-in
iPhone cameras.

00:12:40.896 --> 00:12:43.426 A:middle
I'm not going to go
into too much detail

00:12:43.426 --> 00:12:47.636 A:middle
about wide color implications
for those kinds of types,

00:12:47.636 --> 00:12:49.966 A:middle
but I refer you to the
Advances in iOS Photography

00:12:50.246 --> 00:12:53.466 A:middle
and Editing Live Photos
and RAW on iOS Sessions

00:12:53.466 --> 00:12:54.476 A:middle
for more details about that.

00:12:55.406 --> 00:12:58.566 A:middle
And lastly, there's also
the concept of GPU textures.

00:12:58.566 --> 00:13:00.716 A:middle
If your program -- if your
application is working

00:12:58.566 --> 00:13:00.716 A:middle
If your program -- if your
application is working

00:13:00.716 --> 00:13:04.266 A:middle
at the GPU level, like your game
engine, or your advance piece

00:13:04.266 --> 00:13:07.416 A:middle
of graphic software, and you're
sending color information

00:13:07.416 --> 00:13:09.366 A:middle
in the form of either
textures or shader values

00:13:09.626 --> 00:13:12.156 A:middle
to the GPU directly, there
are other considerations

00:13:12.156 --> 00:13:13.806 A:middle
as well for wide content.

00:13:14.266 --> 00:13:16.696 A:middle
I'm not going to go into much
detail about those either,

00:13:16.696 --> 00:13:19.946 A:middle
but I refer you to my colleague,
Dan Omachi's excellent treatment

00:13:19.946 --> 00:13:23.296 A:middle
of this in What's
New in Metal Part 2.

00:13:23.536 --> 00:13:26.046 A:middle
Okay. So let's frame
the color problem.

00:13:26.756 --> 00:13:28.646 A:middle
Justin gave a great
explanation earlier.

00:13:28.646 --> 00:13:31.016 A:middle
But how does it apply to apps?

00:13:31.536 --> 00:13:37.286 A:middle
Well app content can come from a
broad range of sources and come

00:13:37.286 --> 00:13:38.706 A:middle
in a broad range
of color richness,

00:13:38.706 --> 00:13:39.926 A:middle
all the way from grayscale,

00:13:39.926 --> 00:13:44.616 A:middle
all the way through to even
16-bit wide color gamut content.

00:13:45.686 --> 00:13:49.756 A:middle
At the same time, devices and
displays come in a broad range

00:13:49.756 --> 00:13:50.946 A:middle
of color capabilities.

00:13:51.116 --> 00:13:54.726 A:middle
For example, in iPhone
5 it was only capable

00:13:54.726 --> 00:13:58.246 A:middle
of representing sRGB, all the
way through the latest iPad Pro

00:13:58.246 --> 00:14:01.146 A:middle
which does a great job
with full P3 colors

00:13:58.246 --> 00:14:01.146 A:middle
which does a great job
with full P3 colors

00:14:01.146 --> 00:14:02.736 A:middle
and extended range sRGB.

00:14:03.266 --> 00:14:05.036 A:middle
So, how do you bridge
the difference?

00:14:06.096 --> 00:14:08.586 A:middle
Well, we're going to
solve this color problem.

00:14:09.206 --> 00:14:12.346 A:middle
And the backbone really
is color management.

00:14:14.676 --> 00:14:16.106 A:middle
So, what is color management?

00:14:17.216 --> 00:14:20.066 A:middle
The job of color
management is to ensure

00:14:20.676 --> 00:14:23.326 A:middle
that an image looks the
same on any output device,

00:14:23.656 --> 00:14:25.896 A:middle
no matter what color
space it is encoded in

00:14:25.896 --> 00:14:27.066 A:middle
or how it was originally
created.

00:14:27.886 --> 00:14:28.726 A:middle
That's pretty much it.

00:14:29.716 --> 00:14:33.526 A:middle
But how does it work?

00:14:33.736 --> 00:14:36.666 A:middle
Color management
starts with every image

00:14:36.666 --> 00:14:38.976 A:middle
or content type having an
associated color space,

00:14:39.166 --> 00:14:40.816 A:middle
sometimes referred
to as color profile.

00:14:42.416 --> 00:14:45.376 A:middle
This informs the system what
the colors actually mean.

00:14:45.516 --> 00:14:49.136 A:middle
And then the color matching
process algorithmically maps

00:14:49.136 --> 00:14:52.016 A:middle
those colors to the
characteristics and output space

00:14:52.076 --> 00:14:53.486 A:middle
of the device that
you're rendering to.

00:14:54.036 --> 00:14:57.646 A:middle
Of course, this is a
computational process,

00:14:57.646 --> 00:14:58.736 A:middle
and it is not for free.

00:14:58.736 --> 00:15:00.686 A:middle
In fact, every single
pixel needs to be touched

00:14:58.736 --> 00:15:00.686 A:middle
In fact, every single
pixel needs to be touched

00:15:00.686 --> 00:15:03.076 A:middle
and converted and matched.

00:15:03.256 --> 00:15:05.636 A:middle
Also, it's important to
note this is a potentially

00:15:05.636 --> 00:15:06.686 A:middle
lossy operation.

00:15:06.916 --> 00:15:09.536 A:middle
Especially if you're going
from a wider color gamut source

00:15:09.906 --> 00:15:13.076 A:middle
down to a narrower one,
say a 16-bit P3 content

00:15:13.076 --> 00:15:16.156 A:middle
down to an sRGB 8-bit,
there's going to be some loss

00:15:16.156 --> 00:15:18.456 A:middle
of color fidelity
in that scenario.

00:15:18.456 --> 00:15:20.026 A:middle
So that's something
to be aware of.

00:15:20.736 --> 00:15:23.996 A:middle
So these are important
aspects, but there's good news.

00:15:24.576 --> 00:15:28.336 A:middle
The first good news is that
the color matching operations,

00:15:28.406 --> 00:15:30.566 A:middle
the way they're algorithmically
defined, I'm not going to go

00:15:30.566 --> 00:15:32.026 A:middle
into the details of the
color science behind them.

00:15:32.026 --> 00:15:33.986 A:middle
But it turns out
that computationally,

00:15:33.986 --> 00:15:35.516 A:middle
they're very easily
hardware accelerated,

00:15:35.876 --> 00:15:37.916 A:middle
either by the CPU or by GPU.

00:15:39.146 --> 00:15:41.016 A:middle
Which leads to the
next good news which is

00:15:41.276 --> 00:15:42.896 A:middle
that we've built
this functionality

00:15:42.896 --> 00:15:46.366 A:middle
into the system itself, so that
it all works automatically via

00:15:46.366 --> 00:15:49.636 A:middle
the Quartz 2D, ColorSync on
the Mac, and Core Animation.

00:15:50.216 --> 00:15:53.546 A:middle
In fact, all you really
need to make sure of is

00:15:53.546 --> 00:15:57.906 A:middle
that your content is tagged
properly, and in that case,

00:15:57.946 --> 00:16:00.266 A:middle
there's no code required to
display your image correctly,

00:15:57.946 --> 00:16:00.266 A:middle
there's no code required to
display your image correctly,

00:16:00.326 --> 00:16:03.326 A:middle
and have the colors
appear correct.

00:16:03.466 --> 00:16:04.876 A:middle
So, platform color management.

00:16:05.416 --> 00:16:08.986 A:middle
Well, macOS, as Justin eluded

00:16:08.986 --> 00:16:10.856 A:middle
to has been color managed
since its inception.

00:16:10.926 --> 00:16:12.966 A:middle
Some might even say since
before its inception,

00:16:12.966 --> 00:16:15.266 A:middle
when it was previously
known as macOS,

00:16:15.266 --> 00:16:16.536 A:middle
during the ColorSync times.

00:16:17.316 --> 00:16:18.236 A:middle
So there's nothing new there,

00:16:18.236 --> 00:16:20.116 A:middle
but there is something
new on the iOS fronts.

00:16:20.116 --> 00:16:22.446 A:middle
We have, since iOS 9.3,

00:16:22.446 --> 00:16:24.296 A:middle
we now have automatic
color management support

00:16:24.446 --> 00:16:25.216 A:middle
on most devices.

00:16:25.636 --> 00:16:28.946 A:middle
So that's color management,
the backbone

00:16:28.946 --> 00:16:30.396 A:middle
of solving the color problem.

00:16:32.316 --> 00:16:36.376 A:middle
But now let's talk about how
some design consideration

00:16:36.376 --> 00:16:39.586 A:middle
and how the toolchain and the
platform services have been

00:16:39.586 --> 00:16:42.736 A:middle
enhanced to accommodate
getting wide content

00:16:42.736 --> 00:16:43.776 A:middle
into your applications.

00:16:44.456 --> 00:16:47.126 A:middle
First, as always it
starts with design.

00:16:48.656 --> 00:16:50.856 A:middle
So, what is important to think

00:16:50.856 --> 00:16:53.116 A:middle
about when you're
approaching the wide color

00:16:53.116 --> 00:16:54.206 A:middle
from a design perspective?

00:16:56.316 --> 00:17:00.336 A:middle
Well, the first thing I would
say is that it's important

00:16:56.316 --> 00:17:00.336 A:middle
Well, the first thing I would
say is that it's important

00:17:00.336 --> 00:17:03.116 A:middle
to use wide gamut content
where it makes sense.

00:17:04.036 --> 00:17:06.596 A:middle
It doesn't mean everywhere,
remember most of the colors

00:17:06.596 --> 00:17:09.726 A:middle
that we interact with on a daily
basis, are in fact contained

00:17:09.726 --> 00:17:11.165 A:middle
within that nice sRGB triangle.

00:17:11.165 --> 00:17:12.526 A:middle
That's where the bulk
of the colors are.

00:17:13.526 --> 00:17:16.776 A:middle
There are however, these nice,
new vivid saturated colors

00:17:17.106 --> 00:17:20.306 A:middle
that may make sense for
your application to use.

00:17:20.715 --> 00:17:22.715 A:middle
So really it's important to
think about wide gamut content

00:17:22.715 --> 00:17:24.205 A:middle
as being a tool that you can use

00:17:24.455 --> 00:17:27.046 A:middle
where vivid colors really
enhance the user experience

00:17:27.046 --> 00:17:28.726 A:middle
and add some value
to your application.

00:17:30.046 --> 00:17:33.716 A:middle
There is no need to go and
update all of your content

00:17:33.966 --> 00:17:35.756 A:middle
and immediately upgrade
it to P3.

00:17:35.756 --> 00:17:37.626 A:middle
This is not that kind
of technology shift.

00:17:38.086 --> 00:17:40.846 A:middle
This is merely a new
creative tool that you use

00:17:41.266 --> 00:17:43.136 A:middle
where you want it,
when you want it.

00:17:43.436 --> 00:17:46.076 A:middle
And the good news is we've
enhanced the toolchain support

00:17:46.356 --> 00:17:49.636 A:middle
to make this gradual opt-in
of wide gamut possible.

00:17:51.636 --> 00:17:54.556 A:middle
So let's say you do want
to upgrade some content

00:17:54.556 --> 00:17:56.216 A:middle
to wide color, what are
some considerations?

00:17:56.586 --> 00:17:58.266 A:middle
It's really important
to be careful

00:17:58.656 --> 00:18:02.616 A:middle
when you upgrade a
design file to wide color.

00:17:58.656 --> 00:18:02.616 A:middle
when you upgrade a
design file to wide color.

00:18:03.226 --> 00:18:07.406 A:middle
A common pitfall is to
just assign a new profile.

00:18:07.586 --> 00:18:10.876 A:middle
It starts out as sRB, assigning
a new wider color profile.

00:18:11.236 --> 00:18:13.916 A:middle
This is a mistake, because this
will just remap the existing

00:18:13.916 --> 00:18:15.476 A:middle
color information
into new color space.

00:18:15.736 --> 00:18:18.206 A:middle
It's a pretty effect, but it's
probably not what you want.

00:18:18.206 --> 00:18:21.066 A:middle
Because it will just stretch
all the colors out to be vivid

00:18:21.066 --> 00:18:24.456 A:middle
and the appearance of the design
file will be inevitably altered.

00:18:25.026 --> 00:18:29.736 A:middle
Instead, it's important to
use convert to P3 instead.

00:18:30.686 --> 00:18:34.086 A:middle
This will actually do a
color match operation,

00:18:34.086 --> 00:18:36.516 A:middle
your resulting design should
not change its appearance,

00:18:36.786 --> 00:18:39.376 A:middle
but it will be prepared
to go and have some

00:18:39.376 --> 00:18:41.386 A:middle
of its content boosted
up into those nice,

00:18:41.386 --> 00:18:43.406 A:middle
vivid saturated P3 colors.

00:18:45.256 --> 00:18:48.746 A:middle
When you're working on wide
gamut designs, it's important

00:18:48.746 --> 00:18:50.316 A:middle
to use, and we recommend
strongly

00:18:50.316 --> 00:18:52.366 A:middle
that you use the
Display P3 color profile

00:18:52.626 --> 00:18:54.336 A:middle
as your working document
profile.

00:18:55.956 --> 00:18:58.606 A:middle
Also to maintain
maximum color precision

00:18:58.606 --> 00:19:00.966 A:middle
and highest quality
it's a good idea to work

00:18:58.606 --> 00:19:00.966 A:middle
and highest quality
it's a good idea to work

00:19:00.966 --> 00:19:02.896 A:middle
in 16-bit per channel
color mode.

00:19:04.156 --> 00:19:08.856 A:middle
And of course, it's nice to
be able to see your designs.

00:19:09.186 --> 00:19:11.606 A:middle
So, if you are going
to be working

00:19:11.706 --> 00:19:14.186 A:middle
with wide color it's good
to do that design work

00:19:14.186 --> 00:19:16.596 A:middle
on a system capable of
rendering wide gamut color

00:19:16.596 --> 00:19:20.116 A:middle
such as the late 2015 iMac,
or other capable hardware.

00:19:20.646 --> 00:19:24.606 A:middle
When it comes time
for production,

00:19:24.606 --> 00:19:27.936 A:middle
for exporting delivering
assets, it's important

00:19:27.936 --> 00:19:32.866 A:middle
to use 16-bit PNG files with an
embedded Display P3 ICC profile.

00:19:33.216 --> 00:19:36.716 A:middle
This is sort of the gold
standard of content interchange

00:19:36.716 --> 00:19:38.356 A:middle
for wide color content.

00:19:40.336 --> 00:19:41.536 A:middle
Now, a brief note.

00:19:42.426 --> 00:19:45.696 A:middle
There are some very popular
content production workflows

00:19:45.696 --> 00:19:46.156 A:middle
out there.

00:19:46.156 --> 00:19:47.516 A:middle
They come under different names.

00:19:47.516 --> 00:19:48.456 A:middle
I'm going to talk specifically

00:19:48.456 --> 00:19:50.536 A:middle
about the Adobe Photoshop
Workflow.

00:19:50.646 --> 00:19:53.886 A:middle
They come under the names of
Save for Web and Export Assets.

00:19:54.176 --> 00:19:56.516 A:middle
Many of these workflows
have not made the transition

00:19:56.516 --> 00:19:59.766 A:middle
to wide color yet, and
they are not compatible

00:19:59.766 --> 00:20:01.876 A:middle
with exporting 16-bit
P3 content.

00:19:59.766 --> 00:20:01.876 A:middle
with exporting 16-bit
P3 content.

00:20:02.176 --> 00:20:04.206 A:middle
So, stay away from them for now.

00:20:04.676 --> 00:20:08.656 A:middle
And instead use the workaround
of using save as PNG format

00:20:09.016 --> 00:20:14.846 A:middle
with 16-bit and embedded
display profile as a workaround.

00:20:14.846 --> 00:20:16.336 A:middle
Okay, so that's the
design process

00:20:16.336 --> 00:20:17.796 A:middle
and how wide color impacts that.

00:20:18.706 --> 00:20:21.966 A:middle
Now, let's talk about tools
and how they can be used

00:20:22.106 --> 00:20:24.566 A:middle
up to incorporate the
content you've produced

00:20:24.566 --> 00:20:25.816 A:middle
out of the design process.

00:20:26.186 --> 00:20:27.706 A:middle
Well the first thing
I'm going to talk about

00:20:27.706 --> 00:20:28.746 A:middle
and really the epicenter

00:20:28.746 --> 00:20:32.036 A:middle
of the content tool story
is Xcode asset catalogs.

00:20:32.486 --> 00:20:33.986 A:middle
Now you may be familiar
with this.

00:20:34.286 --> 00:20:37.526 A:middle
This is the general tool in
Xcode to allow you to organize

00:20:37.526 --> 00:20:40.066 A:middle
and catalog your image
resources, mark it up

00:20:40.066 --> 00:20:40.936 A:middle
and provide metadata,

00:20:40.936 --> 00:20:43.616 A:middle
and deliver it inside
your applications.

00:20:44.126 --> 00:20:47.506 A:middle
What do asset catalogs
do for you?

00:20:47.506 --> 00:20:49.426 A:middle
Well, they're the best
deployment vehicle

00:20:49.426 --> 00:20:50.446 A:middle
for static assets.

00:20:51.786 --> 00:20:56.216 A:middle
We automatically color
correct your source content

00:20:56.216 --> 00:20:58.466 A:middle
and optimize it for the target
that you're building for.

00:20:58.706 --> 00:21:01.606 A:middle
So even if, maybe your
designers are prefect

00:20:58.706 --> 00:21:01.606 A:middle
So even if, maybe your
designers are prefect

00:21:01.606 --> 00:21:03.796 A:middle
and always can deliver their
content with the right profile

00:21:03.796 --> 00:21:06.936 A:middle
and all the right information
in their deliverables,

00:21:06.936 --> 00:21:08.676 A:middle
but that may not
always be the case.

00:21:08.996 --> 00:21:11.376 A:middle
That's where this automatic
color correction comes in handy

00:21:11.376 --> 00:21:13.146 A:middle
to make sure that we
match and normalize it all

00:21:13.146 --> 00:21:17.846 A:middle
into the appropriate working
space for the target device.

00:21:17.976 --> 00:21:20.386 A:middle
Also, we do automatic
pixel format optimization,

00:21:20.386 --> 00:21:21.976 A:middle
making sure that the
right bit depth ends

00:21:21.976 --> 00:21:22.946 A:middle
up in the right device.

00:21:23.466 --> 00:21:27.706 A:middle
And, last, but definitely
not least,

00:21:27.706 --> 00:21:29.916 A:middle
asset catalogs are the
gateway to app slicing

00:21:30.366 --> 00:21:32.316 A:middle
which is an important component
of the thinning feature

00:21:32.316 --> 00:21:35.186 A:middle
that assures that only the
content that's relevant gets

00:21:35.186 --> 00:21:37.436 A:middle
delivered to your customers on
a particular device and none

00:21:37.436 --> 00:21:40.226 A:middle
of the content that doesn't.

00:21:40.296 --> 00:21:43.616 A:middle
So, what have we done in asset
catalogs to make it easier

00:21:43.616 --> 00:21:44.996 A:middle
to work with wide color content?

00:21:46.366 --> 00:21:49.706 A:middle
Well the first important
enhancement is we now support 16

00:21:49.706 --> 00:21:53.086 A:middle
bit source content and
provide a clean end-to-end path

00:21:53.476 --> 00:21:56.446 A:middle
for 16 bit image resources.

00:21:56.446 --> 00:21:58.496 A:middle
This, we store it
in 16 bit half load,

00:21:58.856 --> 00:22:02.196 A:middle
but it is available
for you in Xcode 8.

00:21:58.856 --> 00:22:02.196 A:middle
but it is available
for you in Xcode 8.

00:22:03.126 --> 00:22:05.716 A:middle
The next important thing
we've added is the ability

00:22:05.716 --> 00:22:08.186 A:middle
to catalog a display gamut.

00:22:09.386 --> 00:22:10.046 A:middle
What does this mean?

00:22:10.046 --> 00:22:13.976 A:middle
This means that you really
introduced a new option

00:22:13.976 --> 00:22:18.876 A:middle
in the inspector to provide
and tailor optimized assets

00:22:18.876 --> 00:22:22.126 A:middle
for either the sRGB
or Display P3,

00:22:22.126 --> 00:22:25.136 A:middle
display gamuts matching devices
with those characteristics.

00:22:25.696 --> 00:22:28.966 A:middle
Okay so that's the feature.

00:22:28.966 --> 00:22:31.516 A:middle
That's what Xcode has to
offer for organizing assets.

00:22:31.516 --> 00:22:32.276 A:middle
But how do you use it?

00:22:32.276 --> 00:22:33.416 A:middle
How do you think about using it?

00:22:33.486 --> 00:22:35.566 A:middle
Well, there's really
three easy choices here.

00:22:36.106 --> 00:22:40.926 A:middle
Choice number one, do nothing.

00:22:42.316 --> 00:22:44.616 A:middle
This may seem radical, but it is

00:22:44.616 --> 00:22:47.836 A:middle
in fact a perfectly
valid thing to do.

00:22:48.076 --> 00:22:50.396 A:middle
Because if you make no
changes to your asset catalog,

00:22:50.396 --> 00:22:52.256 A:middle
you may not need any of
these new vivid colors,

00:22:52.256 --> 00:22:55.986 A:middle
we will continue to render your
8 bit sRGB content faithfully

00:22:56.326 --> 00:22:57.246 A:middle
on all devices.

00:22:57.656 --> 00:22:58.606 A:middle
So nothing will change.

00:22:58.606 --> 00:23:00.466 A:middle
You don't need to go
update everything just

00:22:58.606 --> 00:23:00.466 A:middle
You don't need to go
update everything just

00:23:00.466 --> 00:23:02.176 A:middle
to make sure it works
on this new hardware.

00:23:02.246 --> 00:23:04.416 A:middle
So this is a perfectly
valid option.

00:23:04.416 --> 00:23:08.306 A:middle
Of course, this does mean
your app will not contain any

00:23:08.306 --> 00:23:09.026 A:middle
wide colors.

00:23:09.876 --> 00:23:11.836 A:middle
That's a perfectly
fine design choice.

00:23:12.256 --> 00:23:14.586 A:middle
That's the outcome of
this deployment choice.

00:23:15.246 --> 00:23:17.126 A:middle
So let's say you do want

00:23:17.126 --> 00:23:19.606 A:middle
to use some wide color
in your application.

00:23:19.826 --> 00:23:20.986 A:middle
Brings us to choice number two.

00:23:21.066 --> 00:23:24.446 A:middle
Upgrade to P3.

00:23:24.736 --> 00:23:27.366 A:middle
So, the way this
works is something we

00:23:27.366 --> 00:23:28.936 A:middle
like to call Universal P3 Asset.

00:23:29.436 --> 00:23:33.916 A:middle
So, all it involves is taking
a 16 bit Display P3 file

00:23:33.916 --> 00:23:34.956 A:middle
that you may have gotten
from your designer,

00:23:34.956 --> 00:23:37.416 A:middle
and just replace your existing
asset in the asset catalog

00:23:37.676 --> 00:23:39.186 A:middle
with this upgraded asset.

00:23:40.776 --> 00:23:42.556 A:middle
What happens at build
time is we're going

00:23:42.556 --> 00:23:45.266 A:middle
to automatically generate
an sRGB derivative

00:23:45.816 --> 00:23:48.586 A:middle
from that 16 bit
Universal Display P3 master.

00:23:48.786 --> 00:23:51.226 A:middle
We're going to do a
high-quality color match,

00:23:51.296 --> 00:23:53.546 A:middle
and a high quality
dither down to that 8 bit.

00:23:54.046 --> 00:23:56.886 A:middle
And then of course at
thinning and content selection,

00:23:56.886 --> 00:23:59.546 A:middle
we're make sure the right
content variant gets selected

00:23:59.546 --> 00:24:01.216 A:middle
on the appropriate device.

00:23:59.546 --> 00:24:01.216 A:middle
on the appropriate device.

00:24:03.096 --> 00:24:04.836 A:middle
But let's say you're
not really happy

00:24:04.836 --> 00:24:07.536 A:middle
with this automatic conversion
and you want full control.

00:24:08.266 --> 00:24:10.486 A:middle
Well the good news is we
have that for you as well.

00:24:10.486 --> 00:24:13.116 A:middle
And that's choice number
three, optimize assets.

00:24:13.646 --> 00:24:15.366 A:middle
It's a very simple option.

00:24:15.366 --> 00:24:20.806 A:middle
It's basically, you provide
a 16 bit Display P3 content

00:24:20.806 --> 00:24:22.976 A:middle
and your original
8 bit sRGB content.

00:24:23.236 --> 00:24:25.876 A:middle
We provide places for
you to organize both

00:24:25.876 --> 00:24:26.826 A:middle
of those in the asset catalog.

00:24:27.146 --> 00:24:29.346 A:middle
And they'll get built
into your app and selected

00:24:29.346 --> 00:24:30.206 A:middle
and thinned appropriately.

00:24:31.356 --> 00:24:36.876 A:middle
Okay, that's wide color
assets and asset catalogs.

00:24:38.206 --> 00:24:40.296 A:middle
I'd like to now give
a demonstration

00:24:40.296 --> 00:24:45.386 A:middle
of creating content.

00:24:45.386 --> 00:24:49.906 A:middle
Okay, so let's say I've got
this beautiful hue wheel here.

00:24:56.496 --> 00:24:58.586 A:middle
Let's say I have this
beautiful hue wheel here.

00:24:58.706 --> 00:24:59.236 A:middle
There we go.

00:24:59.236 --> 00:25:00.026 A:middle
That's much better.

00:24:59.236 --> 00:25:00.026 A:middle
That's much better.

00:25:00.746 --> 00:25:04.286 A:middle
And I really decided this
really could in fact benefit

00:25:04.286 --> 00:25:06.026 A:middle
from some more vivid
saturated colors.

00:25:06.526 --> 00:25:07.346 A:middle
How is this done?

00:25:07.656 --> 00:25:08.666 A:middle
Let's take a look at this here.

00:25:08.666 --> 00:25:10.766 A:middle
This is just a simple gradient
here, a radial gradient.

00:25:10.766 --> 00:25:13.236 A:middle
And I just want to call
out here this point

00:25:13.236 --> 00:25:16.226 A:middle
in the gradient is a
pure saturated green.

00:25:17.426 --> 00:25:18.706 A:middle
Okay, that's what
I'm starting with.

00:25:20.316 --> 00:25:22.196 A:middle
So what do I do to upgrade it?

00:25:22.196 --> 00:25:24.266 A:middle
Well the first thing
I'm going to do

00:25:24.686 --> 00:25:28.026 A:middle
because I'm an organized type,
is I'm going to create a copy

00:25:28.026 --> 00:25:30.246 A:middle
of this and not just
destroy the existing asset,

00:25:30.246 --> 00:25:34.576 A:middle
I'm going to name it
something new here.

00:25:34.576 --> 00:25:36.706 A:middle
And, okay now I'm ready to work.

00:25:37.326 --> 00:25:39.736 A:middle
So the first thing I'm going to
do is I'm going to update this

00:25:39.736 --> 00:25:41.646 A:middle
to 16 bits per channel.

00:25:42.736 --> 00:25:44.076 A:middle
Now, we're ready
to work in 16 bit.

00:25:44.326 --> 00:25:47.776 A:middle
And now the all-important
convert to profile.

00:25:49.126 --> 00:25:51.806 A:middle
And what I'm going to do
is I'm going to change this

00:25:51.806 --> 00:25:54.416 A:middle
to the Display P3 color profile.

00:25:56.366 --> 00:25:58.216 A:middle
Okay, now we're ready to go.

00:25:58.596 --> 00:26:01.066 A:middle
In fact, I can confirm with
document profile down here,

00:25:58.596 --> 00:26:01.066 A:middle
In fact, I can confirm with
document profile down here,

00:26:01.446 --> 00:26:03.536 A:middle
Display P3, 16 bits
per component.

00:26:03.536 --> 00:26:04.106 A:middle
I'm good to go.

00:26:04.596 --> 00:26:05.526 A:middle
Okay, so now let's take a look

00:26:05.526 --> 00:26:06.626 A:middle
at what happened
to that gradient.

00:26:06.716 --> 00:26:09.576 A:middle
And look at our favorite
green here.

00:26:10.886 --> 00:26:12.096 A:middle
Okay, so that's interesting
right?

00:26:12.536 --> 00:26:13.856 A:middle
That green it didn't change.

00:26:13.856 --> 00:26:16.546 A:middle
Notice that the hue wheel didn't
change its appearance at all.

00:26:16.636 --> 00:26:18.366 A:middle
That was actually the
intended goal of converting,

00:26:18.466 --> 00:26:19.186 A:middle
as opposed to assigning.

00:26:20.056 --> 00:26:21.846 A:middle
But I'm left with
the same green now,

00:26:21.846 --> 00:26:23.356 A:middle
being only 70 percent saturated.

00:26:23.356 --> 00:26:26.026 A:middle
Well this really indicates just
how much head room there really

00:26:26.026 --> 00:26:29.216 A:middle
is to punch out into
that wider gamut

00:26:29.216 --> 00:26:31.156 A:middle
and deploy a more purer green.

00:26:31.736 --> 00:26:34.426 A:middle
So, well let's say I want to
do that, but I don't want to be

00:26:34.426 --> 00:26:37.226 A:middle
on stage all day, I'm just going
to reapply the gradient preset.

00:26:37.606 --> 00:26:41.166 A:middle
Now everything should be
back to what it was before,

00:26:41.166 --> 00:26:43.326 A:middle
100 percent saturated, but now

00:26:43.756 --> 00:26:47.256 A:middle
in that pure P3 wide
color space.

00:26:47.916 --> 00:26:48.496 A:middle
So there we are.

00:26:48.496 --> 00:26:52.726 A:middle
Now I have my beautiful asset,
I'm going to go ahead and save.

00:26:52.936 --> 00:26:56.366 A:middle
And of course this is just a
design file, I can't use it

00:26:56.366 --> 00:26:58.756 A:middle
in my app until I save it.

00:26:58.756 --> 00:26:59.756 A:middle
So I'm going to do that.

00:26:59.826 --> 00:27:01.866 A:middle
I'm going to save it as, whoops
not as a [inaudible] but as PNG.

00:26:59.826 --> 00:27:01.866 A:middle
I'm going to save it as, whoops
not as a [inaudible] but as PNG.

00:27:01.866 --> 00:27:05.166 A:middle
I'm going to make sure to
embed the color profile.

00:27:06.776 --> 00:27:07.806 A:middle
And save it.

00:27:08.876 --> 00:27:10.056 A:middle
And viola I'm done.

00:27:10.276 --> 00:27:11.696 A:middle
Well, actually I'm not done,

00:27:11.696 --> 00:27:12.936 A:middle
I've just finished
the design process.

00:27:12.936 --> 00:27:14.356 A:middle
I haven't incorporated
it into my app.

00:27:15.186 --> 00:27:17.126 A:middle
So, let's go do that.

00:27:20.436 --> 00:27:21.116 A:middle
Where's my app?

00:27:21.166 --> 00:27:21.596 A:middle
There's my app.

00:27:22.116 --> 00:27:24.266 A:middle
So here's my app, unmodified.

00:27:24.566 --> 00:27:27.346 A:middle
Here's my existing
sRGB P3 hue wheel.

00:27:28.706 --> 00:27:30.776 A:middle
Well, what I want to do here
is I want to go over here

00:27:30.776 --> 00:27:35.186 A:middle
to the pop-up here to expose
the sRGB and Display P3 gamut.

00:27:35.536 --> 00:27:37.516 A:middle
This will immediately
reveal a couple

00:27:37.516 --> 00:27:38.896 A:middle
of additional cataloging
options.

00:27:39.446 --> 00:27:41.986 A:middle
And I take my P3 hue wheel

00:27:41.986 --> 00:27:43.936 A:middle
and just drop it
right into that slot.

00:27:43.936 --> 00:27:45.296 A:middle
And I'm ready to go.

00:27:45.296 --> 00:27:48.796 A:middle
Now if I build in run, it
will compile both of these

00:27:48.796 --> 00:27:49.936 A:middle
into my asset catalog.

00:27:50.126 --> 00:27:52.646 A:middle
And if I was running on
an iPad Pro 9.7 inch,

00:27:52.956 --> 00:27:55.976 A:middle
I would be getting the
16-bit Display P3 asset,

00:27:56.296 --> 00:27:59.006 A:middle
whereas on an sRGB
device like an iPhone 6,

00:27:59.276 --> 00:28:01.816 A:middle
I would be getting this asset.

00:27:59.276 --> 00:28:01.816 A:middle
I would be getting this asset.

00:28:02.006 --> 00:28:07.476 A:middle
Okay. That's incorporating
content into your application.

00:28:11.236 --> 00:28:13.286 A:middle
Okay so we talked about tools

00:28:13.286 --> 00:28:15.616 A:middle
and how they work
with live content.

00:28:15.856 --> 00:28:18.096 A:middle
Now it's time to talk about some
of the deployment considerations

00:28:18.096 --> 00:28:19.626 A:middle
and what happens after
you've used that tool

00:28:19.626 --> 00:28:21.966 A:middle
and how it might impact the
running of your application.

00:28:23.216 --> 00:28:27.726 A:middle
So, with asset catalog
deployment, app slicing is going

00:28:27.726 --> 00:28:30.296 A:middle
to ensure that the
appropriate variant is delivered

00:28:30.296 --> 00:28:31.376 A:middle
to a given device.

00:28:31.756 --> 00:28:32.736 A:middle
And this is really important

00:28:32.736 --> 00:28:34.956 A:middle
because this is potentially a
lot more content now that's part

00:28:34.956 --> 00:28:35.706 A:middle
of your application.

00:28:36.456 --> 00:28:38.346 A:middle
And, with that slicing,

00:28:38.626 --> 00:28:40.596 A:middle
we ensure that there's
no payload cost

00:28:40.766 --> 00:28:42.516 A:middle
for your actual end-user
customers

00:28:42.516 --> 00:28:45.676 A:middle
for adding this wide gamut
content into your application,

00:28:45.676 --> 00:28:47.376 A:middle
because we make sure
that with app slicing,

00:28:47.706 --> 00:28:50.066 A:middle
wide gamut content only
goes to wide gamut devices,

00:28:50.426 --> 00:28:52.336 A:middle
sRGB content goes
to all the rest.

00:28:52.806 --> 00:28:54.936 A:middle
And it doesn't waste
space on the devices

00:28:54.936 --> 00:28:55.986 A:middle
that it's not relevant for.

00:28:56.516 --> 00:29:01.926 A:middle
On the Mac, there's
actually nothing new here,

00:28:56.516 --> 00:29:01.926 A:middle
On the Mac, there's
actually nothing new here,

00:29:01.926 --> 00:29:04.476 A:middle
NSImage has always been able to
select the best representation

00:29:04.476 --> 00:29:07.656 A:middle
from available representations
in the asset catalog.

00:29:07.656 --> 00:29:11.086 A:middle
It's going to continue to do
so based on the characteristics

00:29:11.086 --> 00:29:11.966 A:middle
of your target display.

00:29:12.226 --> 00:29:14.906 A:middle
So if you are on a wide
gamut iMac for example

00:29:14.906 --> 00:29:17.856 A:middle
and you have P3 content
available in your asset catalog,

00:29:17.856 --> 00:29:20.466 A:middle
it's going to go
ahead and select

00:29:20.466 --> 00:29:22.386 A:middle
that when rendering its content.

00:29:22.906 --> 00:29:27.046 A:middle
Also, just like the behavior
with 1X and 2X assets

00:29:27.046 --> 00:29:29.296 A:middle
on the Mac, NSImage
and NSImage View

00:29:29.296 --> 00:29:31.116 A:middle
and all the related app
kit classes make sure

00:29:31.116 --> 00:29:33.066 A:middle
to refresh the content
automatically

00:29:33.066 --> 00:29:34.996 A:middle
when the display
characteristics change.

00:29:35.246 --> 00:29:37.266 A:middle
Such as when your window
goes before the internal

00:29:37.266 --> 00:29:40.836 A:middle
and the external display, or
the color characteristics,

00:29:40.836 --> 00:29:42.546 A:middle
or back end scale
factor changes.

00:29:43.736 --> 00:29:44.316 A:middle
So that's great.

00:29:44.976 --> 00:29:47.676 A:middle
Okay, but how is this
data actually stored

00:29:47.676 --> 00:29:50.976 A:middle
and what impact can that
have on your application?

00:29:51.756 --> 00:29:55.566 A:middle
Well the good news is that at
build time we tried really hard

00:29:55.566 --> 00:29:59.066 A:middle
to optimize the pixel formats
and storage characteristics

00:29:59.106 --> 00:30:01.616 A:middle
of all your image content
in the asset catalog.

00:29:59.106 --> 00:30:01.616 A:middle
of all your image content
in the asset catalog.

00:30:02.486 --> 00:30:04.666 A:middle
And do so in as efficient
a way as possible,

00:30:04.666 --> 00:30:06.746 A:middle
to the best of our
ability anyways.

00:30:07.146 --> 00:30:10.176 A:middle
We do now use 16 bit
per component storage

00:30:10.536 --> 00:30:12.426 A:middle
for wide color content.

00:30:12.786 --> 00:30:13.706 A:middle
I mentioned this before.

00:30:13.706 --> 00:30:17.286 A:middle
This really allows you to
have end-to-end 16 bit color

00:30:17.286 --> 00:30:20.186 A:middle
precision in your
application resources.

00:30:21.396 --> 00:30:24.116 A:middle
And, we also have compression.

00:30:25.286 --> 00:30:29.326 A:middle
Now this is quite handy because
more data, 16 bit versus 8 bit.

00:30:29.746 --> 00:30:32.596 A:middle
More information is
inevitably going to lead

00:30:32.716 --> 00:30:35.226 A:middle
to large footprint unless
you apply compression.

00:30:35.226 --> 00:30:36.426 A:middle
Now, we've always
had compression,

00:30:36.426 --> 00:30:37.796 A:middle
we've always had
lossless compression.

00:30:38.426 --> 00:30:40.676 A:middle
Akin to what happens
with say PNG files.

00:30:41.456 --> 00:30:45.496 A:middle
But what's new this year is
some lossy compression options

00:30:45.496 --> 00:30:49.946 A:middle
to help counteract, you
know app footprint size.

00:30:49.946 --> 00:30:53.616 A:middle
The first one of these is what
we call basic compression.

00:30:54.036 --> 00:30:57.366 A:middle
Now this is a compression system
that's almost exactly like JPEG,

00:30:57.366 --> 00:30:59.766 A:middle
except the added bonus that it
actually handles transparency

00:30:59.766 --> 00:31:00.506 A:middle
and alpha as well.

00:30:59.766 --> 00:31:00.506 A:middle
and alpha as well.

00:31:01.086 --> 00:31:04.346 A:middle
It has a similar
visual characteristics

00:31:04.346 --> 00:31:05.906 A:middle
and performance characteristics.

00:31:06.366 --> 00:31:10.606 A:middle
And the great news is it
really performs really well,

00:31:10.836 --> 00:31:13.166 A:middle
on almost all, on
all devices really.

00:31:13.166 --> 00:31:14.116 A:middle
Just like JPEG does.

00:31:14.116 --> 00:31:15.996 A:middle
So it's something you can count

00:31:15.996 --> 00:31:19.676 A:middle
on to give a very slight
reduction in visual quality

00:31:19.676 --> 00:31:21.546 A:middle
to get a really excellent
storage characteristics.

00:31:22.986 --> 00:31:25.076 A:middle
Now, new this year as well,

00:31:25.076 --> 00:31:27.406 A:middle
we have this exciting option
called GPU compression

00:31:27.406 --> 00:31:28.636 A:middle
using ASTC.

00:31:29.886 --> 00:31:32.706 A:middle
So this stands for Advanced
Scalable Texture Compression,

00:31:32.706 --> 00:31:36.556 A:middle
which is a GPU compressed
textured pixel format,

00:31:36.886 --> 00:31:41.306 A:middle
which many modern GPUs
on Apple devices as well

00:31:41.306 --> 00:31:42.506 A:middle
as other systems support.

00:31:44.276 --> 00:31:48.106 A:middle
And we have brought this
option to you in asset catalogs

00:31:48.106 --> 00:31:49.706 A:middle
in two different forms.

00:31:49.946 --> 00:31:54.226 A:middle
One is GPU best quality,
which is a constant bit rate,

00:31:54.226 --> 00:31:56.786 A:middle
4 bits per pixel,
ASTC compression mode.

00:31:57.056 --> 00:31:59.236 A:middle
Which is a great choice,
roughly analogous in terms

00:31:59.236 --> 00:32:02.876 A:middle
of visual performance and visual
fidelity to high quality JPEG.

00:31:59.236 --> 00:32:02.876 A:middle
of visual performance and visual
fidelity to high quality JPEG.

00:32:03.366 --> 00:32:07.716 A:middle
And then we also have
GPU smallest size

00:32:07.716 --> 00:32:10.156 A:middle
where if you're really wanting
to optimize your footprint

00:32:10.386 --> 00:32:11.426 A:middle
and your memory footprint,

00:32:11.786 --> 00:32:14.516 A:middle
greatly then you
choose this size

00:32:14.516 --> 00:32:16.606 A:middle
and that's a 1 bit per pixel
constant bit rate codec

00:32:16.606 --> 00:32:18.286 A:middle
which has excellent
storage characteristics.

00:32:19.576 --> 00:32:23.246 A:middle
Of course, since not
every GPU on every device

00:32:23.246 --> 00:32:27.166 A:middle
that is supported today
can use the ASTC format,

00:32:28.406 --> 00:32:29.636 A:middle
we take an extra step for you

00:32:29.636 --> 00:32:33.716 A:middle
and automatically generate a
software fallback for devices

00:32:33.716 --> 00:32:34.916 A:middle
that lack that capability.

00:32:35.266 --> 00:32:37.286 A:middle
What's great about this is it
means you don't have to worry

00:32:37.286 --> 00:32:40.356 A:middle
about having incompatibilities
of your content

00:32:40.666 --> 00:32:41.916 A:middle
for all the supported devices,

00:32:41.916 --> 00:32:43.486 A:middle
we're going to automatically
generate that fallback,

00:32:43.486 --> 00:32:45.446 A:middle
and use it and thin it,
and route it appropriately

00:32:45.446 --> 00:32:47.576 A:middle
to those devices that
cannot support ASTC.

00:32:48.746 --> 00:32:53.406 A:middle
So you can use GPU compression
without any real risk

00:32:53.406 --> 00:32:54.546 A:middle
of compatibility breakage.

00:32:55.506 --> 00:32:58.396 A:middle
A brief note about how
GPU compression interacts

00:32:58.396 --> 00:33:00.116 A:middle
with wide color assets
specifically.

00:32:58.396 --> 00:33:00.116 A:middle
with wide color assets
specifically.

00:33:01.116 --> 00:33:07.066 A:middle
So, we use the ASTC Low Dynamic
Range, or LDR compression mode,

00:33:07.406 --> 00:33:09.736 A:middle
which really means that
wide content actually needs

00:33:09.736 --> 00:33:12.116 A:middle
to be reduced to 8 bits
before compression,

00:33:12.116 --> 00:33:15.466 A:middle
because LDR is an 8 bits per
sample compression format.

00:33:16.416 --> 00:33:18.916 A:middle
The good news is we
perform this work for you.

00:33:18.916 --> 00:33:21.276 A:middle
We automatically do perform
a high quality dither

00:33:21.676 --> 00:33:24.806 A:middle
down to 8 bit at build time when
we're processing your images.

00:33:26.116 --> 00:33:28.946 A:middle
But we preserve the wide gamut
colors that may be contained

00:33:28.946 --> 00:33:32.016 A:middle
within your original 16 bit
source content by encoding

00:33:32.396 --> 00:33:35.306 A:middle
and compressing in the
Display P3 color space,

00:33:35.516 --> 00:33:38.606 A:middle
thus preserving the ability
to represent all of the colors

00:33:38.606 --> 00:33:40.256 A:middle
within the Display P3 gamut.

00:33:42.506 --> 00:33:44.276 A:middle
Okay, so that's the deployment.

00:33:44.276 --> 00:33:45.976 A:middle
A little talk about
deployment characteristic,

00:33:46.526 --> 00:33:49.176 A:middle
but this talk was
supposedly about colors.

00:33:49.286 --> 00:33:50.346 A:middle
Well what about colors?

00:33:51.406 --> 00:33:52.966 A:middle
Specifically colors in UI.

00:33:53.796 --> 00:33:58.166 A:middle
An important observation is
that most of the pixels you see

00:33:58.166 --> 00:34:00.596 A:middle
on screen drawn by
most applications,

00:33:58.166 --> 00:34:00.596 A:middle
on screen drawn by
most applications,

00:34:00.596 --> 00:34:02.266 A:middle
don't come from images,
even though they tend

00:34:02.266 --> 00:34:04.736 A:middle
to get top billing
in this kind of talk.

00:34:05.006 --> 00:34:07.436 A:middle
Most pixels on screen are
actually solid colors drawn

00:34:07.436 --> 00:34:09.096 A:middle
by your code in your
application.

00:34:10.346 --> 00:34:13.516 A:middle
And wide gamut colors it turns
out, can present new challenges

00:34:13.516 --> 00:34:16.255 A:middle
in just working at
that simple level.

00:34:16.386 --> 00:34:17.676 A:middle
So let's talk about that.

00:34:18.766 --> 00:34:21.045 A:middle
In particular, the first
challenge I'd like to talk

00:34:21.045 --> 00:34:22.795 A:middle
about is actually
talking about colors,

00:34:22.795 --> 00:34:24.446 A:middle
because this is an
under-appreciated problem,

00:34:24.996 --> 00:34:26.246 A:middle
under-appreciate problem.

00:34:27.156 --> 00:34:30.246 A:middle
Usually when designers
and engineers communicate

00:34:30.246 --> 00:34:32.446 A:middle
in written form, or
perhaps even verbal form,

00:34:32.746 --> 00:34:35.676 A:middle
or visual form code is
usually communicated

00:34:35.676 --> 00:34:38.065 A:middle
with an assumed sRGB
color space.

00:34:38.525 --> 00:34:41.136 A:middle
That means you're probably
used to seeing colors written

00:34:41.136 --> 00:34:44.826 A:middle
down as something like
this, RGB 128, 45, 56.

00:34:45.686 --> 00:34:46.406 A:middle
You know very simple.

00:34:46.406 --> 00:34:47.706 A:middle
They don't tell you what
color space they're in.

00:34:48.025 --> 00:34:50.196 A:middle
And it's just assumed everybody
knows what color that is,

00:34:50.226 --> 00:34:52.335 A:middle
because everybody's
using sRGB, aren't they?

00:34:53.085 --> 00:34:54.346 A:middle
Well, not anymore.

00:34:55.476 --> 00:34:58.836 A:middle
This is no longer sufficient for
working with wide gamut colors?

00:34:59.516 --> 00:35:00.276 A:middle
So what do you do?

00:34:59.516 --> 00:35:00.276 A:middle
So what do you do?

00:35:00.406 --> 00:35:02.926 A:middle
Well the most important step
you can take is be specific

00:35:02.926 --> 00:35:05.346 A:middle
about what color space you're
working in when you communicate,

00:35:05.346 --> 00:35:08.976 A:middle
or write down, or, you
know, transmit that color.

00:35:09.166 --> 00:35:12.946 A:middle
Use Display P3, instead of
sRGB when you're working

00:35:12.946 --> 00:35:14.046 A:middle
on wide gamut designs.

00:35:14.576 --> 00:35:15.676 A:middle
And indicate that as such.

00:35:16.236 --> 00:35:18.156 A:middle
And if you need more
precision than 0

00:35:18.156 --> 00:35:21.756 A:middle
to 255 8-bit representation
can give you then go ahead

00:35:21.756 --> 00:35:22.526 A:middle
and use floating point.

00:35:23.076 --> 00:35:26.056 A:middle
So as an example, next time
you're sending colors in email,

00:35:26.656 --> 00:35:28.546 A:middle
maybe you'll refer to them
as something like this,

00:35:28.656 --> 00:35:35.386 A:middle
with an annotation, P3
255, 128, 191, etcetera.

00:35:35.486 --> 00:35:37.436 A:middle
Okay that's how you communicate
a color, but where did

00:35:37.436 --> 00:35:39.396 A:middle
that color come from
in the first place.

00:35:39.396 --> 00:35:40.176 A:middle
You probably picked it,

00:35:40.176 --> 00:35:41.516 A:middle
the designer probably
picked it somewhere.

00:35:41.796 --> 00:35:42.446 A:middle
How do they pick it?

00:35:42.776 --> 00:35:44.706 A:middle
Using a color panel.

00:35:44.876 --> 00:35:47.646 A:middle
This is the standard color panel
that gets shipped with the Mac,

00:35:47.646 --> 00:35:49.826 A:middle
it's part of AppKits,
known as NSColorPanel.

00:35:50.066 --> 00:35:56.346 A:middle
This of course is a very
familiar UI, but it also suffers

00:35:56.346 --> 00:35:57.886 A:middle
from some of the
limitations we just talked

00:35:57.886 --> 00:35:58.906 A:middle
about in calling colors.

00:35:58.906 --> 00:36:00.096 A:middle
Typically, you pick red,

00:35:58.906 --> 00:36:00.096 A:middle
Typically, you pick red,

00:36:00.096 --> 00:36:02.186 A:middle
green and blue values,
0 to 55 numbers.

00:36:02.536 --> 00:36:05.436 A:middle
The color panel is
always supported selecting

00:36:05.436 --> 00:36:06.236 A:middle
in different color spaces,

00:36:06.236 --> 00:36:08.306 A:middle
but that hasn't always
been a very obvious

00:36:08.306 --> 00:36:09.696 A:middle
or easy user experience.

00:36:10.366 --> 00:36:12.786 A:middle
So I'm excited to say that we've
actually made some enhancements

00:36:12.786 --> 00:36:15.566 A:middle
in the color panel, in
macOS Sierra to make working

00:36:15.566 --> 00:36:16.786 A:middle
with wide color a little easier.

00:36:17.596 --> 00:36:21.646 A:middle
The first thing we've done
is we've put the most common

00:36:21.646 --> 00:36:24.676 A:middle
and important working spaces,
mainly Display P3 and sRGB,

00:36:24.976 --> 00:36:28.186 A:middle
right up there in a
context in the action menu

00:36:28.186 --> 00:36:32.626 A:middle
for the number picker, sRGB,
and of course Display P3.

00:36:32.986 --> 00:36:35.596 A:middle
The next thing we've done is
we've actually allowed an option

00:36:35.596 --> 00:36:38.716 A:middle
to change the numerical
representation of the colors

00:36:38.716 --> 00:36:39.896 A:middle
from integer to floating point.

00:36:40.386 --> 00:36:42.796 A:middle
So that you can standardize
on floating point colors

00:36:42.796 --> 00:36:45.176 A:middle
if that works for your workflow.

00:36:46.556 --> 00:36:50.446 A:middle
Another exciting thing we've
done is in the hue wheel,

00:36:50.586 --> 00:36:54.796 A:middle
or wheel picker, we've actually
changed its implementation

00:36:54.796 --> 00:36:58.426 A:middle
so that it can actually render
the full gamut of P3 colors

00:36:58.896 --> 00:37:00.796 A:middle
when placed on an
appropriate display.

00:36:58.896 --> 00:37:00.796 A:middle
when placed on an
appropriate display.

00:37:02.206 --> 00:37:05.446 A:middle
And we've added a new
context menu that allows you

00:37:05.446 --> 00:37:07.626 A:middle
to either use this
automatic behavior,

00:37:07.626 --> 00:37:11.276 A:middle
where it just basically switches
its capability between P3

00:37:11.276 --> 00:37:13.216 A:middle
and sRGB as you cross displays,

00:37:13.216 --> 00:37:15.196 A:middle
or pin it to a specific
color space,

00:37:15.896 --> 00:37:19.356 A:middle
if that's more what
you'd like to see.

00:37:19.596 --> 00:37:22.716 A:middle
Okay, now we've picked
our colors,

00:37:22.716 --> 00:37:23.786 A:middle
we know how to communicate them.

00:37:23.786 --> 00:37:25.056 A:middle
Well, to actually make
anything happen we have

00:37:25.056 --> 00:37:26.146 A:middle
to code them don't we?

00:37:26.416 --> 00:37:28.616 A:middle
How do we construct wide
gamut colors in code?

00:37:29.976 --> 00:37:33.436 A:middle
We've introduced two new
convenience constructors

00:37:33.436 --> 00:37:37.286 A:middle
in AppKit and UIKit to
take Display P3 color

00:37:37.286 --> 00:37:38.016 A:middle
numbers directly.

00:37:38.966 --> 00:37:41.326 A:middle
This is NSColor Display P3
red, green, blue, alpha,

00:37:41.326 --> 00:37:43.586 A:middle
and UIColor Display P3
red, green, blue, alpha.

00:37:43.866 --> 00:37:45.926 A:middle
Great way to work with P3
colors from your designer.

00:37:46.196 --> 00:37:49.056 A:middle
But of course your code
may actually be working

00:37:49.056 --> 00:37:52.386 A:middle
with extended range sRGB
colors that maybe didn't come

00:37:52.386 --> 00:37:54.676 A:middle
from a designer, but maybe came
from a different subsystem,

00:37:55.016 --> 00:37:56.816 A:middle
or an API that might
have vended,

00:37:56.816 --> 00:37:58.776 A:middle
you know extended
range sRGB to colors.

00:37:59.196 --> 00:38:00.256 A:middle
How do you work with those?

00:37:59.196 --> 00:38:00.256 A:middle
How do you work with those?

00:38:00.736 --> 00:38:05.106 A:middle
Well the good news is we've
extended the existing standard

00:38:05.106 --> 00:38:07.676 A:middle
red, green, blue alpha
constructors for NSColor

00:38:07.676 --> 00:38:11.136 A:middle
and UIColor color to not
clamp their input components

00:38:11.136 --> 00:38:13.286 A:middle
and allow values to
be expressed greater

00:38:13.286 --> 00:38:14.596 A:middle
than one and less than zero.

00:38:14.946 --> 00:38:17.786 A:middle
So now you can construct
extended range sRGB colors

00:38:17.786 --> 00:38:18.296 A:middle
very easily.

00:38:20.216 --> 00:38:23.046 A:middle
Okay, now storing colors.

00:38:24.386 --> 00:38:28.046 A:middle
What if you actually
have to like put colors

00:38:28.046 --> 00:38:30.676 A:middle
into your document data, or
archive them in some form?

00:38:31.116 --> 00:38:33.986 A:middle
Well special care really needs
to be taken when doing that,

00:38:34.306 --> 00:38:37.826 A:middle
because like many other
parts of the ecosystem,

00:38:38.206 --> 00:38:40.166 A:middle
there has traditionally
been a lot of assumptions

00:38:40.166 --> 00:38:42.826 A:middle
of assumed color spaces and
assuming everybody's talking

00:38:42.826 --> 00:38:44.246 A:middle
about the same thing
when you pass a red,

00:38:44.246 --> 00:38:45.076 A:middle
green and blue number.

00:38:45.076 --> 00:38:47.366 A:middle
All you should ever need
is three numbers, right?

00:38:47.366 --> 00:38:48.546 A:middle
That's all you need
to represent a color.

00:38:48.546 --> 00:38:49.536 A:middle
What could be wrong with that?

00:38:50.066 --> 00:38:50.986 A:middle
Well it turns out there is.

00:38:51.476 --> 00:38:54.716 A:middle
Because you may not be able to
disambiguate between an sRGB

00:38:54.716 --> 00:38:56.756 A:middle
and a P3 color, and you may
make the wrong choice and end

00:38:56.756 --> 00:38:59.146 A:middle
up with the wrong
color in your document.

00:38:59.216 --> 00:39:02.136 A:middle
So I'd like you to
consider, perhaps,

00:38:59.216 --> 00:39:02.136 A:middle
So I'd like you to
consider, perhaps,

00:39:02.136 --> 00:39:07.166 A:middle
encoding a compatible sRGB color
alongside the new wide gamut

00:39:07.166 --> 00:39:09.986 A:middle
color, which allows
your application,

00:39:09.986 --> 00:39:12.246 A:middle
especially older versions
of your application,

00:39:12.246 --> 00:39:13.916 A:middle
because since this is
document data, you have forward

00:39:13.916 --> 00:39:15.876 A:middle
and backward compatibility
to consider.

00:39:16.486 --> 00:39:19.876 A:middle
Allows the older applications to
continue pulling that sRGB data

00:39:19.876 --> 00:39:21.386 A:middle
and treat it as if it was sRGB,

00:39:21.386 --> 00:39:22.736 A:middle
which is the assumption
it's making.

00:39:23.336 --> 00:39:25.126 A:middle
Whereas the newer
software can know

00:39:25.126 --> 00:39:28.416 A:middle
about this new wide gamut code
that you've stored alongside it.

00:39:28.736 --> 00:39:31.336 A:middle
How do you create that
compatible sRGB color?

00:39:31.336 --> 00:39:33.976 A:middle
On iOS you can use the
CGColor.convert API.

00:39:34.896 --> 00:39:36.726 A:middle
And on the macOS you
can use the venerable

00:39:36.826 --> 00:39:39.756 A:middle
NSColor.usingColorSpace
API to convert those colors

00:39:39.756 --> 00:39:41.006 A:middle
to the sRGB color space.

00:39:42.116 --> 00:39:45.606 A:middle
We actually ran into this in
the system itself in macOS.

00:39:46.176 --> 00:39:49.176 A:middle
You may be familiar
with TextEdit.

00:39:49.176 --> 00:39:51.196 A:middle
And the text editor
app on the Mac.

00:39:51.596 --> 00:39:54.556 A:middle
And its document format is
RTF, or rich text format,

00:39:54.556 --> 00:39:56.886 A:middle
which has been around
and is supported

00:39:56.886 --> 00:39:59.516 A:middle
by the Cocoa Text System as its
needed document storage format.

00:40:00.056 --> 00:40:03.486 A:middle
And it turns out that when you
actually applied a color to say,

00:40:03.486 --> 00:40:05.816 A:middle
a range of text, the way
it would actually store

00:40:05.816 --> 00:40:10.246 A:middle
that in the RTF document was
in fact as just simple red,

00:40:10.246 --> 00:40:12.786 A:middle
green, blue, 0 to 55 values.

00:40:13.326 --> 00:40:15.706 A:middle
Which is kind of a problem, I
think you'll understand now,

00:40:15.706 --> 00:40:18.036 A:middle
because we have no idea which
color space those red, green,

00:40:18.036 --> 00:40:19.746 A:middle
blue values are in, and
it doesn't allow you

00:40:19.746 --> 00:40:20.806 A:middle
to express the full range.

00:40:21.646 --> 00:40:23.236 A:middle
So, we had to take action.

00:40:23.676 --> 00:40:26.946 A:middle
What we ended up doing
is revving the RTF spec

00:40:26.946 --> 00:40:30.546 A:middle
and how we write and read
RTF on our platform at least.

00:40:31.146 --> 00:40:34.566 A:middle
By including an expanded
color table

00:40:35.296 --> 00:40:37.996 A:middle
which actually annotates
each of the color tuples,

00:40:37.996 --> 00:40:40.386 A:middle
which have now been
turned into 16 bit integers

00:40:40.886 --> 00:40:43.546 A:middle
with individual color space
information, allowing you

00:40:43.546 --> 00:40:45.656 A:middle
to specify colors in
multiple color spaces.

00:40:46.176 --> 00:40:48.156 A:middle
Okay. That's great.

00:40:48.226 --> 00:40:50.426 A:middle
But this is California,
we're supposed

00:40:50.426 --> 00:40:51.266 A:middle
to be surfing aren't we?

00:40:51.836 --> 00:40:53.816 A:middle
Well, what does that
have to do with colors?

00:40:53.816 --> 00:40:57.756 A:middle
Well, there's colors on the web.

00:40:58.106 --> 00:41:00.786 A:middle
The good news with wide
gamut colors and the web is

00:40:58.106 --> 00:41:00.786 A:middle
The good news with wide
gamut colors and the web is

00:41:00.786 --> 00:41:04.106 A:middle
that as long as your image
content is tagged appropriately

00:41:04.106 --> 00:41:05.746 A:middle
and has appropriate color
profile information,

00:41:06.426 --> 00:41:08.656 A:middle
all of the content
is color matched

00:41:08.656 --> 00:41:09.996 A:middle
when it's rendered on webpages.

00:41:10.416 --> 00:41:12.526 A:middle
So as long as you do
that you're good to go.

00:41:14.026 --> 00:41:16.256 A:middle
Also, there are now
medial queries available

00:41:16.256 --> 00:41:19.536 A:middle
to resolve assets between
P3 and sRGB capable devices,

00:41:19.536 --> 00:41:22.056 A:middle
which is really handy.

00:41:22.056 --> 00:41:24.386 A:middle
And lastly, there's a WebKit
proposal out right now

00:41:24.686 --> 00:41:28.246 A:middle
for specifying CSS colors
in color spaces other

00:41:28.246 --> 00:41:30.946 A:middle
than the assumed sRGB,
which has been the case

00:41:30.946 --> 00:41:32.006 A:middle
since CSS's inception.

00:41:32.706 --> 00:41:35.636 A:middle
And with that I would like to
hand it over to Steve Holt,

00:41:35.636 --> 00:41:38.316 A:middle
who will tell you a little
bit more about rending

00:41:38.536 --> 00:41:40.166 A:middle
with wide color in your apps.

00:41:40.336 --> 00:41:40.896 A:middle
Thank you.

00:41:41.516 --> 00:41:43.706 A:middle
[ Applause ]

00:41:44.206 --> 00:41:46.376 A:middle
&gt;&gt; Thank you Patrick.

00:41:47.086 --> 00:41:52.286 A:middle
So, in your applications
you often have your assets

00:41:52.286 --> 00:41:53.636 A:middle
that you get from
the asset catalog,

00:41:53.666 --> 00:41:57.286 A:middle
but also you might get some
content generated by your users

00:41:57.286 --> 00:41:59.986 A:middle
or pulled down from the internet
from sources you don't control.

00:42:00.456 --> 00:42:03.396 A:middle
And maybe you want to
generate some additional assets

00:42:03.636 --> 00:42:05.316 A:middle
as part of that.

00:42:05.386 --> 00:42:07.166 A:middle
How do you deal with
this with wide color?

00:42:07.696 --> 00:42:10.736 A:middle
Well, when you're
drawing with wide color,

00:42:10.736 --> 00:42:14.326 A:middle
I'm going to take a
simplified example here.

00:42:14.556 --> 00:42:19.866 A:middle
Now, this is a box where
one-half of the box is rendered

00:42:19.866 --> 00:42:23.046 A:middle
with the most saturated
Display P3 red we can have.

00:42:23.456 --> 00:42:25.266 A:middle
And the other half of
the box is rendered

00:42:25.266 --> 00:42:30.416 A:middle
with the most saturated
sRGB color that we can have.

00:42:30.506 --> 00:42:34.266 A:middle
Unfortunately, because
these videos are recorded,

00:42:34.466 --> 00:42:36.476 A:middle
and you're watching it
live on a projector system

00:42:36.476 --> 00:42:38.856 A:middle
that doesn't have the
same color fidelity

00:42:38.856 --> 00:42:40.926 A:middle
as our new displays
have, we have to cheat.

00:42:42.316 --> 00:42:44.886 A:middle
So, we've actually
de-saturated both colors here.

00:42:44.886 --> 00:42:48.846 A:middle
So what you're seeing isn't
exactly what this code

00:42:49.006 --> 00:42:52.076 A:middle
that I'm going to show you
will output, but render it

00:42:52.076 --> 00:42:53.326 A:middle
on a device and it
will be there.

00:42:54.486 --> 00:42:58.776 A:middle
So, I'm a Frameworks Engineer on
the Cocoa, or on the UIKit Team,

00:42:58.956 --> 00:43:05.116 A:middle
so of course I'm going to start
with Cocoa on the desktop.

00:42:58.956 --> 00:43:05.116 A:middle
so of course I'm going to start
with Cocoa on the desktop.

00:43:05.606 --> 00:43:07.206 A:middle
When you're on the desktop,

00:43:07.266 --> 00:43:10.356 A:middle
it already has some great
color management support

00:43:10.356 --> 00:43:13.126 A:middle
for color profiles in your
images and in your drawing.

00:43:13.716 --> 00:43:17.236 A:middle
If you have to do manual drawing
in your code, and it needs

00:43:17.236 --> 00:43:19.886 A:middle
to be done off screen,
the recommended way

00:43:19.886 --> 00:43:23.976 A:middle
to do this is using the
NSImage with drawinghandler API.

00:43:24.966 --> 00:43:27.176 A:middle
It's called with
the current context.

00:43:27.956 --> 00:43:31.516 A:middle
And you can use this anywhere
you use any other NSImage,

00:43:31.956 --> 00:43:32.706 A:middle
it will just work there.

00:43:33.756 --> 00:43:37.346 A:middle
So, let's look at some code.

00:43:37.536 --> 00:43:40.596 A:middle
So, pretty simple,
just set up a size

00:43:41.466 --> 00:43:46.216 A:middle
and we initialize our
NSImage with the size we want.

00:43:46.216 --> 00:43:47.406 A:middle
We don't want this
to be flipped.

00:43:48.256 --> 00:43:51.206 A:middle
And we configure
our drawing handler.

00:43:53.536 --> 00:43:55.876 A:middle
We get the Rect from the
drawRect that gets passed in.

00:43:56.386 --> 00:43:57.846 A:middle
We divide it up in halves,

00:43:58.796 --> 00:44:01.346 A:middle
allocated displayP3Red
and draw it.

00:43:58.796 --> 00:44:01.346 A:middle
allocated displayP3Red
and draw it.

00:44:02.536 --> 00:44:05.546 A:middle
Then allocate our sRGB
red and then draw that.

00:44:06.456 --> 00:44:09.036 A:middle
And then return true,
because we true successfully.

00:44:09.036 --> 00:44:09.846 A:middle
And we're done.

00:44:10.696 --> 00:44:11.116 A:middle
There you go.

00:44:12.036 --> 00:44:12.866 A:middle
It all just works.

00:44:13.416 --> 00:44:15.096 A:middle
If you're using this in
your application today,

00:44:15.586 --> 00:44:18.476 A:middle
you're already doing
the right thing.

00:44:18.666 --> 00:44:21.696 A:middle
So, that's pretty
much the desktop.

00:44:21.836 --> 00:44:22.816 A:middle
What about iOS?

00:44:23.326 --> 00:44:26.066 A:middle
Should be just as simple right?

00:44:26.286 --> 00:44:30.956 A:middle
So you must all be familiar with
UIGraphicsBeginImageContext.

00:44:31.776 --> 00:44:34.646 A:middle
It's a nice little API.

00:44:34.886 --> 00:44:36.516 A:middle
And, let's see the code again.

00:44:37.106 --> 00:44:39.796 A:middle
We get the size, we made
the context with the size.

00:44:40.996 --> 00:44:46.646 A:middle
We divide our Rects, draw our
P3 color, draw our sRGB color.

00:44:47.596 --> 00:44:51.096 A:middle
We get our image and
then end the context.

00:44:51.096 --> 00:44:53.486 A:middle
And this is what we get out.

00:44:54.356 --> 00:44:58.206 A:middle
That's not correct.

00:44:58.356 --> 00:44:59.616 A:middle
Why didn't this work?

00:45:00.046 --> 00:45:03.196 A:middle
Well, if we look

00:45:03.196 --> 00:45:07.016 A:middle
at the documentation we
have this fun little bit.

00:45:08.096 --> 00:45:11.886 A:middle
We've documented that
BeginImageContext API is

00:45:12.096 --> 00:45:15.386 A:middle
in the UIKit will only
every return you a 32-bit

00:45:15.386 --> 00:45:16.376 A:middle
integer context.

00:45:16.676 --> 00:45:20.456 A:middle
That means you only get 8 bits
per every channel per red,

00:45:20.456 --> 00:45:21.446 A:middle
green, blue, and alpha.

00:45:23.316 --> 00:45:28.016 A:middle
This has a pretty big impact
on what we can draw with this.

00:45:29.396 --> 00:45:31.406 A:middle
Since we can't create
contexts that are larger

00:45:31.406 --> 00:45:37.416 A:middle
than 8 bits per color channel,
it can't represent any colors

00:45:37.416 --> 00:45:41.046 A:middle
in the extended sRGB
color gamut.

00:45:41.046 --> 00:45:44.236 A:middle
And, because of the existing
interface written in C,

00:45:44.566 --> 00:45:48.636 A:middle
well we can't expand
the options.

00:45:48.756 --> 00:45:51.776 A:middle
And we didn't want to make
UIGraphics be an image context

00:45:51.776 --> 00:45:52.756 A:middle
with more options.

00:45:53.886 --> 00:45:57.506 A:middle
So, we have some new
API for you in iOS X.

00:45:58.406 --> 00:46:00.406 A:middle
It's called
UIGraphicsImageRenderer.

00:45:58.406 --> 00:46:00.406 A:middle
It's called
UIGraphicsImageRenderer.

00:46:01.876 --> 00:46:04.066 A:middle
And the way this works is
really straightforward.

00:46:04.066 --> 00:46:07.526 A:middle
So I'm just going to jump
into some code with this.

00:46:07.716 --> 00:46:08.176 A:middle
Here we are.

00:46:08.326 --> 00:46:11.026 A:middle
First we instantiate our
image renderer object.

00:46:11.406 --> 00:46:12.436 A:middle
You can reuse this.

00:46:12.676 --> 00:46:14.436 A:middle
And it retains the
same properties

00:46:14.436 --> 00:46:17.196 A:middle
across every implication
of the image you get

00:46:17.196 --> 00:46:18.206 A:middle
out with the drawing handler.

00:46:20.296 --> 00:46:22.786 A:middle
And you just call
renderer image.

00:46:23.016 --> 00:46:26.236 A:middle
You supply your block,
and you just draw

00:46:27.046 --> 00:46:29.696 A:middle
as you would otherwise.

00:46:30.546 --> 00:46:32.626 A:middle
The bounds you can
get off of the format

00:46:32.626 --> 00:46:34.956 A:middle
which describes the
exact properties

00:46:34.986 --> 00:46:36.926 A:middle
that this particular
renderer has.

00:46:37.686 --> 00:46:40.536 A:middle
And then you just
divide the bounds.

00:46:40.686 --> 00:46:43.506 A:middle
You get and render
the P3 red square.

00:46:44.506 --> 00:46:48.036 A:middle
And then you configure and
render the sRGB red square

00:46:48.716 --> 00:46:50.376 A:middle
and just like we had
before, in AppKit,

00:46:51.096 --> 00:46:55.286 A:middle
we have a correctly rendered
extended range half P3,

00:46:55.546 --> 00:46:57.636 A:middle
half sRGB red square.

00:46:59.316 --> 00:47:01.606 A:middle
So just a few other
notes about this new API.

00:46:59.316 --> 00:47:01.606 A:middle
So just a few other
notes about this new API.

00:47:02.736 --> 00:47:04.896 A:middle
It is fully color
managed by default.

00:47:06.146 --> 00:47:10.146 A:middle
And it also supports the
extended range sRGB color space

00:47:10.146 --> 00:47:10.646 A:middle
by default.

00:47:11.896 --> 00:47:14.086 A:middle
And it's pretty smart
about this.

00:47:14.086 --> 00:47:17.286 A:middle
If you have a device
that has a P3 display,

00:47:17.946 --> 00:47:20.076 A:middle
like the new iPad Pro 9.7 inch,

00:47:20.586 --> 00:47:21.786 A:middle
we'll just turn it
on by default.

00:47:22.146 --> 00:47:23.696 A:middle
You don't need to do
any additional work.

00:47:23.696 --> 00:47:25.366 A:middle
But if you're on a device

00:47:25.366 --> 00:47:27.206 A:middle
that does not have the
extended color display,

00:47:27.206 --> 00:47:30.996 A:middle
like every other iPad and
iPhone, then you're going

00:47:30.996 --> 00:47:33.656 A:middle
to get the more standard
8 bits per channel,

00:47:34.086 --> 00:47:36.866 A:middle
sRGB context to draw into.

00:47:37.696 --> 00:47:39.466 A:middle
So we don't waste
the additional memory

00:47:39.766 --> 00:47:41.666 A:middle
for having the 16
bit float context.

00:47:42.366 --> 00:47:43.626 A:middle
The other thing this does

00:47:43.626 --> 00:47:46.476 A:middle
for you is it manages
the CGContext lifetime.

00:47:47.066 --> 00:47:49.276 A:middle
You don't need to worry
about ending the context

00:47:49.586 --> 00:47:52.656 A:middle
or any other management
yourself.

00:47:53.196 --> 00:47:57.346 A:middle
And for any legacy code that
you have in your application,

00:47:57.906 --> 00:48:00.376 A:middle
it works with
UIGraphicsGetCurrentContext.

00:47:57.906 --> 00:48:00.376 A:middle
it works with
UIGraphicsGetCurrentContext.

00:48:00.786 --> 00:48:03.006 A:middle
So if you call into some
function like a draw Rect,

00:48:03.646 --> 00:48:06.656 A:middle
you'll do the right thing.

00:48:06.856 --> 00:48:09.476 A:middle
So, that's rendering
off the screen.

00:48:10.036 --> 00:48:11.106 A:middle
What about to the screen?

00:48:12.296 --> 00:48:15.056 A:middle
Okay we'll start
a new iKit again.

00:48:15.246 --> 00:48:18.046 A:middle
On [inaudible] view we
have the new Swift 3, well,

00:48:18.366 --> 00:48:20.446 A:middle
newly named in Swift 3, Draw.

00:48:20.846 --> 00:48:23.166 A:middle
And we do the right
thing for you here.

00:48:24.016 --> 00:48:27.666 A:middle
When you call draw in
your UI view subclasses,

00:48:28.456 --> 00:48:34.276 A:middle
if you are on an iPad 9.7 inch,
we will call your draw method

00:48:34.376 --> 00:48:37.956 A:middle
in the correct, extended
range sRGB color space

00:48:37.956 --> 00:48:39.996 A:middle
with the floating
point pixel format.

00:48:41.166 --> 00:48:44.496 A:middle
And if you're not on one
of the new devices, then,

00:48:45.316 --> 00:48:48.846 A:middle
well you get what you get
now, 8 bits per channel sRGB.

00:48:48.846 --> 00:48:53.916 A:middle
And of course if you have
images, we have UIImageView,

00:48:54.576 --> 00:48:58.296 A:middle
which has been color managed
since iOS 9.3 and continues

00:48:58.296 --> 00:49:02.606 A:middle
to be color managed today.

00:48:58.296 --> 00:49:02.606 A:middle
to be color managed today.

00:49:02.796 --> 00:49:06.326 A:middle
If you need to know how
you're rendering, you can look

00:49:06.326 --> 00:49:09.056 A:middle
at a new trait on
UITraitCollection in your views

00:49:09.056 --> 00:49:11.376 A:middle
in view controllers
called display gamut.

00:49:11.976 --> 00:49:17.776 A:middle
It takes a UI display gamut
enum and its properties are P3

00:49:17.776 --> 00:49:22.366 A:middle
if you're on a new, P3 class
display or sRGB if you're

00:49:22.366 --> 00:49:23.786 A:middle
on a new sRGB class display.

00:49:23.786 --> 00:49:26.616 A:middle
And this can be very useful
in the case where you need

00:49:26.616 --> 00:49:31.036 A:middle
to match a particular UI
color with an asset pulled

00:49:31.036 --> 00:49:32.116 A:middle
from your asset catalog.

00:49:32.116 --> 00:49:38.066 A:middle
So you can properly match
colors to your assets.

00:49:38.266 --> 00:49:43.226 A:middle
Now, what if you know
that a view is never going

00:49:43.226 --> 00:49:45.366 A:middle
to need the extended
range sRGB context?

00:49:46.396 --> 00:49:49.566 A:middle
Well, there's a new
property on CALayer

00:49:51.076 --> 00:49:52.736 A:middle
and that is contents format.

00:49:53.146 --> 00:49:58.496 A:middle
And this controls exactly how
deep the context that CA creates

00:49:58.496 --> 00:50:01.146 A:middle
for you when it renders
that view will be.

00:49:58.496 --> 00:50:01.146 A:middle
for you when it renders
that view will be.

00:50:02.046 --> 00:50:04.856 A:middle
By default, on the
iPad Pro 9.7 inch,

00:50:06.016 --> 00:50:08.696 A:middle
it is to use the
extended range context.

00:50:08.916 --> 00:50:10.566 A:middle
And on all of the
devices the default is

00:50:10.566 --> 00:50:13.446 A:middle
to use the traditional,
sRGB context.

00:50:14.336 --> 00:50:15.986 A:middle
And you control it with any one

00:50:15.986 --> 00:50:18.006 A:middle
of these various
format literals.

00:50:19.476 --> 00:50:22.616 A:middle
So on Cocoa, back
on the desktop,

00:50:23.626 --> 00:50:26.906 A:middle
NSView, same thing as UIView.

00:50:27.136 --> 00:50:30.516 A:middle
It will draw with the current
context that NSWindow has.

00:50:31.386 --> 00:50:36.146 A:middle
And you can look at any of the
traditional properties there

00:50:36.426 --> 00:50:38.736 A:middle
with the Window Backing Store,

00:50:38.736 --> 00:50:40.526 A:middle
the screen target
profile, etcetera.

00:50:41.756 --> 00:50:43.206 A:middle
If the window changes displays,

00:50:44.086 --> 00:50:45.436 A:middle
then you get the
view did change back

00:50:45.436 --> 00:50:47.006 A:middle
in properties callback
on your view.

00:50:47.626 --> 00:50:50.736 A:middle
And you can also listen
to the NSWindowDidChange

00:50:50.766 --> 00:50:54.026 A:middle
BackingPropertiesNotification,
which is omitted

00:50:54.026 --> 00:50:55.066 A:middle
from your view's window.

00:50:55.746 --> 00:50:57.776 A:middle
These are the same that
you've been working

00:50:57.776 --> 00:51:02.306 A:middle
with since a very long time now.

00:50:57.776 --> 00:51:02.306 A:middle
with since a very long time now.

00:51:02.306 --> 00:51:03.576 A:middle
And just as a refresher.

00:51:04.396 --> 00:51:05.346 A:middle
The backing properties

00:51:05.346 --> 00:51:12.226 A:middle
on the NSWindow include the
display scale, color space

00:51:12.556 --> 00:51:16.576 A:middle
and the output display gamut.

00:51:16.576 --> 00:51:19.746 A:middle
And just like in iOS, you
can also control how deep

00:51:19.746 --> 00:51:26.826 A:middle
of a context you get in AppKit,
with the WindowDepth property

00:51:26.826 --> 00:51:29.806 A:middle
on NSWindow, and you
can set it to any one

00:51:29.806 --> 00:51:31.146 A:middle
of these depth properties.

00:51:31.146 --> 00:51:35.666 A:middle
So if you are on a wide
gamut display but don't need

00:51:35.666 --> 00:51:40.296 A:middle
that extra precision you can
set this to be 24 bit RGB,

00:51:40.296 --> 00:51:43.696 A:middle
and it will not create the
extended context for you.

00:51:44.866 --> 00:51:47.116 A:middle
So, what did we learn today?

00:51:48.176 --> 00:51:53.696 A:middle
Well, you've seen our vision
for wide color and how to bring

00:51:53.696 --> 00:51:56.496 A:middle
that to the next generation
of displays and your users.

00:51:56.996 --> 00:51:59.286 A:middle
We've talked a little
about color gamuts

00:51:59.286 --> 00:52:02.476 A:middle
and color management,
and how to work

00:51:59.286 --> 00:52:02.476 A:middle
and color management,
and how to work

00:52:02.476 --> 00:52:04.436 A:middle
with that wide gamut
content that you want

00:52:04.436 --> 00:52:05.536 A:middle
to bring to your users.

00:52:06.056 --> 00:52:10.316 A:middle
We've reviewed how to use
colors in your application.

00:52:10.876 --> 00:52:15.576 A:middle
And how to take your drawing
code to the next level of color

00:52:16.946 --> 00:52:19.866 A:middle
by making sure that
it draws properly

00:52:19.866 --> 00:52:21.306 A:middle
in these wide gamut scenarios.

00:52:22.616 --> 00:52:26.796 A:middle
Now for more information you can
of course check out the slides

00:52:27.016 --> 00:52:29.096 A:middle
on the session's website.

00:52:30.006 --> 00:52:33.146 A:middle
And there are a large
number of related sessions.

00:52:34.336 --> 00:52:35.246 A:middle
This is page 1.

00:52:35.816 --> 00:52:38.796 A:middle
So please check them out.

00:52:38.796 --> 00:52:40.306 A:middle
If they've already
passed, I'm not going

00:52:40.306 --> 00:52:43.476 A:middle
to enumerate them,
there are a lot.

00:52:43.476 --> 00:52:45.926 A:middle
See the videos through
the WWDC app

00:52:45.926 --> 00:52:47.776 A:middle
or online at the WWDC website.

00:52:48.396 --> 00:52:48.896 A:middle
Thank you.
