WEBVTT

00:00:07.516 --> 00:00:19.500 A:middle
[ Music ]

00:00:29.516 --> 00:00:34.816 A:middle
[ Applause ]

00:00:35.316 --> 00:00:38.116 A:middle
&gt;&gt; Hello, welcome to
Crafting Modern Cocoa Apps.

00:00:38.516 --> 00:00:40.696 A:middle
My name's Corbin Dunn, and
I'm going to give this talk

00:00:40.696 --> 00:00:41.966 A:middle
with my colleague Jeff.

00:00:42.106 --> 00:00:43.686 A:middle
We're both AppKit
software engineers.

00:00:44.626 --> 00:00:45.826 A:middle
So let's jump right into it.

00:00:46.046 --> 00:00:47.176 A:middle
What are we going
to talk about today?

00:00:47.176 --> 00:00:48.876 A:middle
We have a whole bunch
of subjects.

00:00:49.216 --> 00:00:50.906 A:middle
We're going to talk about
getting a modern look,

00:00:51.406 --> 00:00:53.466 A:middle
drag and drop and how
to do it correctly,

00:00:53.466 --> 00:00:55.466 A:middle
container view controls,
table views,

00:00:56.066 --> 00:00:59.316 A:middle
using some system appearances,
designing with storyboards

00:00:59.456 --> 00:01:01.106 A:middle
and some other cool
Mac features.

00:00:59.456 --> 00:01:01.106 A:middle
and some other cool
Mac features.

00:01:01.416 --> 00:01:03.616 A:middle
Tons of stuff which
we're going to highlight

00:01:03.616 --> 00:01:05.176 A:middle
with a quick demo
app that we have

00:01:05.266 --> 00:01:06.566 A:middle
that we see in this screen shot.

00:01:07.306 --> 00:01:08.656 A:middle
How it's alive in new features

00:01:08.656 --> 00:01:10.206 A:middle
or existing features
they can adopt.

00:01:11.846 --> 00:01:16.446 A:middle
And all these technologies, most
everything you can use already

00:01:16.446 --> 00:01:19.386 A:middle
on Mac OS 10.10 or
10.11, anything new

00:01:19.386 --> 00:01:22.546 A:middle
to 10.12 we will specifically
highlight and point out.

00:01:23.216 --> 00:01:25.656 A:middle
And this demo app we
encourage you to download it.

00:01:25.656 --> 00:01:27.966 A:middle
It's not quite available
yet but it will be soon,

00:01:27.966 --> 00:01:30.956 A:middle
and it will be associated
with the talk.

00:01:31.156 --> 00:01:33.796 A:middle
So let's jump right
into it and talk

00:01:33.796 --> 00:01:37.226 A:middle
about creating a modern
look with modern views

00:01:37.226 --> 00:01:39.646 A:middle
and what you can do there.

00:01:39.816 --> 00:01:43.566 A:middle
So modern look means a modern
window and a modern toolbar

00:01:43.896 --> 00:01:45.606 A:middle
such as shown in
this demo app here.

00:01:46.696 --> 00:01:49.836 A:middle
One thing you want to be
doing is using a full size

00:01:49.896 --> 00:01:50.776 A:middle
content view.

00:01:51.416 --> 00:01:54.616 A:middle
The full size content view
allows your content view

00:01:54.616 --> 00:01:57.436 A:middle
to extend underneath
the toolbar area

00:01:57.586 --> 00:01:59.156 A:middle
that I'm highlighting
here in white.

00:01:59.686 --> 00:02:03.346 A:middle
And that means that full size
content view will have its area

00:01:59.686 --> 00:02:03.346 A:middle
And that means that full size
content view will have its area

00:02:03.406 --> 00:02:06.106 A:middle
automatically blurred by the
titlebar and toolbar area

00:02:06.296 --> 00:02:07.746 A:middle
without you having
to do anything.

00:02:08.205 --> 00:02:11.846 A:middle
Using a full size content
view is really easy.

00:02:12.106 --> 00:02:13.586 A:middle
It's just a window style mask.

00:02:13.756 --> 00:02:16.206 A:middle
You can use the
.fullSizeContentView bit

00:02:16.206 --> 00:02:17.126 A:middle
on it to include it.

00:02:18.096 --> 00:02:20.746 A:middle
Or if you're using Interface
Builder you can just check a

00:02:20.746 --> 00:02:23.626 A:middle
check box, full size
content view, and you get it.

00:02:24.676 --> 00:02:28.536 A:middle
So if you're using the full
size content view you may need

00:02:28.536 --> 00:02:31.566 A:middle
to offset your content
underneath it.

00:02:32.246 --> 00:02:34.916 A:middle
For instance, let's say
that we have something

00:02:34.916 --> 00:02:37.536 A:middle
that we want underneath
that titlebar/toolbar area.

00:02:38.366 --> 00:02:42.426 A:middle
We might want to put like
a label or something there.

00:02:43.806 --> 00:02:45.896 A:middle
If we put that label
there how do we get it

00:02:45.896 --> 00:02:48.996 A:middle
under that titlebar/toolbar
area which might have, say,

00:02:48.996 --> 00:02:52.626 A:middle
a dynamic height that would
change, and we want that label

00:02:52.626 --> 00:02:55.176 A:middle
to not have a hard
coded Y offset

00:02:55.176 --> 00:02:56.966 A:middle
because hard coding
offsets would be really bad.

00:02:57.546 --> 00:03:01.766 A:middle
So what we have is we have the
content layout rec property

00:02:57.546 --> 00:03:01.766 A:middle
So what we have is we have the
content layout rec property

00:03:01.766 --> 00:03:02.616 A:middle
on NSWindow.

00:03:03.116 --> 00:03:06.596 A:middle
This is a key value observable,
a KVO observable property

00:03:07.016 --> 00:03:07.996 A:middle
which you can use to find

00:03:07.996 --> 00:03:10.316 A:middle
out whenever the
contentLayoutRect the area

00:03:10.316 --> 00:03:11.616 A:middle
in turquoise changes.

00:03:12.156 --> 00:03:14.186 A:middle
So you can go and place your
view directly underneath the

00:03:14.296 --> 00:03:16.666 A:middle
titlebar/toolbar based on that.

00:03:17.836 --> 00:03:20.516 A:middle
But we also encourage you
to be using auto layout.

00:03:20.616 --> 00:03:23.326 A:middle
And if you're using auto
layout you can use the

00:03:23.326 --> 00:03:26.446 A:middle
contentLayoutGuide which
is a property on NSWindow.

00:03:27.526 --> 00:03:31.106 A:middle
For instance, inside of your
NSViewController subclass you

00:03:31.106 --> 00:03:33.726 A:middle
might be overriding
updateViewConstraints,

00:03:34.206 --> 00:03:35.456 A:middle
and you want to create
a constraint.

00:03:36.026 --> 00:03:38.296 A:middle
You grab the window's
contentLayoutGuide,

00:03:39.196 --> 00:03:42.286 A:middle
tick the top anchor for it,
and you have your text field,

00:03:42.776 --> 00:03:45.416 A:middle
and you create a constraint

00:03:45.566 --> 00:03:49.066 A:middle
to that text field's top
anchor also and activate it.

00:03:49.066 --> 00:03:53.076 A:middle
And if you do that, that text
view will automatically be below

00:03:53.076 --> 00:03:54.646 A:middle
that titlebar/toolbar area

00:03:54.896 --> 00:03:56.336 A:middle
without you having
to do anything.

00:03:56.686 --> 00:03:59.526 A:middle
It's very simple to do.

00:03:59.766 --> 00:04:02.566 A:middle
Next for a modern app
you might be wanting

00:03:59.766 --> 00:04:02.566 A:middle
Next for a modern app
you might be wanting

00:04:02.566 --> 00:04:04.596 A:middle
to use a streamlined toolbar.

00:04:05.116 --> 00:04:07.656 A:middle
So here's a screen shot
of a normal application.

00:04:08.136 --> 00:04:11.436 A:middle
The things to notice here is
it's got an explicit titlebar

00:04:11.626 --> 00:04:14.396 A:middle
or, sorry, it's got
explicit title up at the top,

00:04:14.846 --> 00:04:16.565 A:middle
and you would have an icon there

00:04:16.565 --> 00:04:18.565 A:middle
if the app actually had
an icon for this document.

00:04:19.586 --> 00:04:23.516 A:middle
If I go to using a streamlined
toolbar that title disappears,

00:04:24.436 --> 00:04:26.486 A:middle
the toolbar is pushed
up a little bit,

00:04:27.186 --> 00:04:29.856 A:middle
and the window buttons,
the close button, etcetera,

00:04:30.726 --> 00:04:33.266 A:middle
are directly in line with
that titlebar/toolbar area.

00:04:34.666 --> 00:04:37.016 A:middle
To do this it's really simple.

00:04:37.266 --> 00:04:40.646 A:middle
And all you have to do is set
the title visibility property

00:04:40.956 --> 00:04:43.826 A:middle
to .hidden, and that
title will be hidden,

00:04:43.826 --> 00:04:46.236 A:middle
the toolbar will be pushed up,
and everything will be in line.

00:04:46.236 --> 00:04:47.996 A:middle
When do you want to do this?

00:04:47.996 --> 00:04:49.776 A:middle
You probably want to do this
for applications that are kind

00:04:49.776 --> 00:04:53.766 A:middle
of like shoebox applications,
for instance maps, calendar,

00:04:54.226 --> 00:04:56.826 A:middle
system preferences, things
of that nature that are kind

00:04:56.826 --> 00:05:03.456 A:middle
of like one window applications
are good for this type of look.

00:04:56.826 --> 00:05:03.456 A:middle
of like one window applications
are good for this type of look.

00:05:03.676 --> 00:05:06.116 A:middle
So what other things
could you want to do?

00:05:06.116 --> 00:05:08.736 A:middle
Well, you might want
to complement

00:05:08.906 --> 00:05:12.666 A:middle
that titlebar/toolbar area with
accessory view controllers.

00:05:13.306 --> 00:05:15.176 A:middle
For instance, you might want

00:05:15.176 --> 00:05:18.056 A:middle
to have an accessory view
controller that's right below

00:05:18.056 --> 00:05:21.426 A:middle
the titlebar, and by
doing this you want it

00:05:21.496 --> 00:05:22.666 A:middle
to automatically be blurred

00:05:22.666 --> 00:05:24.066 A:middle
without you having
to do anything.

00:05:24.706 --> 00:05:26.686 A:middle
The size to be automatically
changing

00:05:26.686 --> 00:05:29.656 A:middle
as the window is resized without
you having to do anything.

00:05:30.166 --> 00:05:30.976 A:middle
So how do you do this?

00:05:32.106 --> 00:05:32.886 A:middle
It's really simple.

00:05:33.006 --> 00:05:35.016 A:middle
We have a view controller
subclass,

00:05:35.156 --> 00:05:38.526 A:middle
called NSTitlebar
AccessoryViewController you can

00:05:38.526 --> 00:05:40.076 A:middle
set the view to that
view controller.

00:05:40.796 --> 00:05:43.046 A:middle
In addition, it exposes
a layout attribute.

00:05:43.046 --> 00:05:46.836 A:middle
So the layout attribute could be
set to .bottom which means, hey,

00:05:46.836 --> 00:05:50.096 A:middle
this accessory is going to be on
the bottom of the titlebar area.

00:05:50.096 --> 00:05:53.596 A:middle
And notice the text appeared
below it because, again,

00:05:53.596 --> 00:05:56.186 A:middle
we're using the proper
content layout wrapped

00:05:56.186 --> 00:05:58.466 A:middle
in content layout guide
without having to do anything.

00:05:59.016 --> 00:06:03.636 A:middle
In addition to the bottom, the
layout attribute could be set

00:05:59.016 --> 00:06:03.636 A:middle
In addition to the bottom, the
layout attribute could be set

00:06:03.636 --> 00:06:05.586 A:middle
to leading or trailing.

00:06:05.726 --> 00:06:09.276 A:middle
And this means you get a
accessory view controller

00:06:09.276 --> 00:06:13.216 A:middle
up in your titlebar area
such as a register me button

00:06:13.216 --> 00:06:14.896 A:middle
or something else that
you might want up there.

00:06:15.936 --> 00:06:19.106 A:middle
New to macOs 10.12 is the
ability to use leading

00:06:19.106 --> 00:06:22.096 A:middle
and trailing as opposed
to using left and right

00:06:22.166 --> 00:06:23.316 A:middle
which were published before.

00:06:24.106 --> 00:06:25.626 A:middle
We prefer you to use
leading and trailing

00:06:25.626 --> 00:06:27.926 A:middle
because it allows your
window to work better

00:06:28.226 --> 00:06:30.746 A:middle
when you're using a right
to left localization.

00:06:31.176 --> 00:06:34.126 A:middle
So, for instance, if I'm just
running this in pseudo right

00:06:34.126 --> 00:06:35.686 A:middle
to left mode you can see

00:06:35.686 --> 00:06:38.936 A:middle
that that accessory view
controller automatically flips

00:06:38.936 --> 00:06:43.636 A:middle
to the other side without
having to do anything.

00:06:43.736 --> 00:06:45.736 A:middle
Next we, the system,

00:06:45.736 --> 00:06:48.466 A:middle
may actually be adding our
own accessory view controllers

00:06:48.566 --> 00:06:49.426 A:middle
to your window.

00:06:49.596 --> 00:06:53.146 A:middle
For instance, we might be using
it for creation of tab windows

00:06:53.146 --> 00:06:54.876 A:middle
where we aggregate
multiple windows

00:06:55.156 --> 00:06:56.976 A:middle
into one sort of virtual window.

00:06:58.286 --> 00:07:01.426 A:middle
So how do we do tab windows, and
what do you do as a developer?

00:06:58.286 --> 00:07:01.426 A:middle
So how do we do tab windows, and
what do you do as a developer?

00:07:01.976 --> 00:07:03.246 A:middle
You don't really
have to do anything.

00:07:03.506 --> 00:07:07.106 A:middle
If you order a window front what
we do is we look for windows

00:07:07.106 --> 00:07:08.716 A:middle
that are similar to that window.

00:07:09.366 --> 00:07:10.846 A:middle
And by similar I mean we look

00:07:10.846 --> 00:07:12.856 A:middle
for the tabbing identifier
property.

00:07:13.116 --> 00:07:16.136 A:middle
If it has the same tabbing
identifier we're going to prefer

00:07:16.136 --> 00:07:19.226 A:middle
to aggregate those windows
into one single tabbed window.

00:07:20.316 --> 00:07:22.526 A:middle
The windows themselves are all
considered visible even though

00:07:22.526 --> 00:07:23.616 A:middle
it might be in a hidden tab.

00:07:24.366 --> 00:07:26.596 A:middle
But we actually hide them
with respect to core graphics.

00:07:27.076 --> 00:07:29.556 A:middle
If you're using NSDocument,
a lot of the things

00:07:29.556 --> 00:07:32.856 A:middle
such as the plus button inside
the tab bar work automatically

00:07:32.856 --> 00:07:34.226 A:middle
without you having
to support anything.

00:07:34.906 --> 00:07:37.026 A:middle
But if you aren't using
NSDocument you can implement a

00:07:37.026 --> 00:07:39.406 A:middle
responder chain method
new window for tab

00:07:39.476 --> 00:07:42.516 A:middle
to create a new document or a
new window on the plus button.

00:07:42.996 --> 00:07:46.356 A:middle
For more information check out
the, What's New in Cocoa talk

00:07:46.976 --> 00:07:51.606 A:middle
to see more details on this.

00:07:51.856 --> 00:07:53.626 A:middle
For more information
on the titlebars,

00:07:53.796 --> 00:07:56.426 A:middle
the accessory view controllers
and how they interact

00:07:56.426 --> 00:07:59.066 A:middle
with full screen, I highly
recommend seeing the talk

00:07:59.066 --> 00:08:02.306 A:middle
from 2015 on improving the
full screen window experience.

00:07:59.066 --> 00:08:02.306 A:middle
from 2015 on improving the
full screen window experience.

00:08:02.306 --> 00:08:08.436 A:middle
Next let's talk a little
bit about core animation.

00:08:09.176 --> 00:08:10.636 A:middle
So what is core animation?

00:08:10.726 --> 00:08:14.266 A:middle
Well, it's a graphics
rendering engine that does a lot

00:08:14.266 --> 00:08:17.416 A:middle
of the work on the
GPU as opposed to CPU.

00:08:17.836 --> 00:08:21.576 A:middle
So everything can be
very fast for scrolling.

00:08:22.256 --> 00:08:24.416 A:middle
We can do very fast
and smooth animations.

00:08:25.446 --> 00:08:27.876 A:middle
And the base component
of this is a CA layer.

00:08:28.476 --> 00:08:32.635 A:middle
How we actually create
your layout

00:08:32.635 --> 00:08:35.635 A:middle
and your views using
layers or views themselves.

00:08:35.635 --> 00:08:38.716 A:middle
So this is an example
animation where you might have

00:08:38.716 --> 00:08:41.525 A:middle
like a background
layer, a middle layer,

00:08:41.525 --> 00:08:43.676 A:middle
and then a front layer
actually doing an animation.

00:08:44.226 --> 00:08:47.166 A:middle
So you want to compose your
views of multiple subviews

00:08:47.696 --> 00:08:48.816 A:middle
to create the final look.

00:08:49.376 --> 00:08:53.406 A:middle
Let's take a look at some of
the properties in core animation

00:08:53.406 --> 00:08:56.896 A:middle
or CALayer that allow
you to set the contents

00:08:56.896 --> 00:08:58.046 A:middle
of what you see on screen.

00:08:59.486 --> 00:09:02.006 A:middle
Speaking of contents, CALayer
has a contents property.

00:08:59.486 --> 00:09:02.006 A:middle
Speaking of contents, CALayer
has a contents property.

00:09:02.346 --> 00:09:05.796 A:middle
The contents property can be
an NS image or a CG image ref

00:09:05.936 --> 00:09:07.906 A:middle
that actually represents
what you see

00:09:08.326 --> 00:09:09.626 A:middle
for that layer's contents.

00:09:10.326 --> 00:09:12.676 A:middle
But you could also set
other properties on CALayer

00:09:12.676 --> 00:09:15.666 A:middle
such as the background
color, the border color,

00:09:15.666 --> 00:09:18.126 A:middle
the border width,
the corner radius.

00:09:18.456 --> 00:09:20.896 A:middle
There are more properties you
can take a look at CALayer

00:09:20.896 --> 00:09:23.816 A:middle
to see the other things that are
available and how to control it.

00:09:24.086 --> 00:09:25.986 A:middle
So these are some of
the intrinsic basic ways

00:09:26.036 --> 00:09:29.616 A:middle
to actually set how
a CALayer will look.

00:09:29.826 --> 00:09:34.376 A:middle
And we're going to talk a little
bit more about this in a second.

00:09:34.486 --> 00:09:36.906 A:middle
But what you should be doing
is you should be using a layer

00:09:36.906 --> 00:09:37.886 A:middle
backed view.

00:09:38.556 --> 00:09:42.686 A:middle
So you're going to be using
NSViews set once layer to yes

00:09:43.066 --> 00:09:44.706 A:middle
which I'll show in a
second how to do that,

00:09:45.366 --> 00:09:47.556 A:middle
and that will implicitly
create a layer for you.

00:09:48.286 --> 00:09:51.046 A:middle
And that means that you can
provide the layer contents via

00:09:51.046 --> 00:09:51.746 A:middle
draw method.

00:09:52.736 --> 00:09:55.786 A:middle
But if you're using layers we'll
actually have two more important

00:09:55.786 --> 00:09:58.366 A:middle
methods, updateLayer
and wantsUpdateLayer.

00:09:59.066 --> 00:10:01.366 A:middle
And in just a second I'm going
to show how these come into play

00:09:59.066 --> 00:10:01.366 A:middle
And in just a second I'm going
to show how these come into play

00:10:01.366 --> 00:10:02.826 A:middle
and when you'll want
to use them.

00:10:03.466 --> 00:10:07.206 A:middle
So what do we actually recommend
for using core animation

00:10:07.206 --> 00:10:09.236 A:middle
or when should you use core
animation and layer backing?

00:10:09.856 --> 00:10:11.826 A:middle
Well, we recommend that
you layer back your windows

00:10:12.036 --> 00:10:13.016 A:middle
content view.

00:10:13.896 --> 00:10:17.446 A:middle
And when you layer back one
particular view all the children

00:10:17.446 --> 00:10:19.476 A:middle
will automatically get
layer backed for you, too,

00:10:19.736 --> 00:10:21.736 A:middle
without you have
to opt into a layer

00:10:21.736 --> 00:10:23.796 A:middle
for every individual child view.

00:10:25.056 --> 00:10:26.996 A:middle
We recommend that
you layer back views

00:10:27.546 --> 00:10:30.896 A:middle
and you not use CALayers
directly added as a sublayer

00:10:31.246 --> 00:10:34.026 A:middle
because that takes care of some
things automatically for you

00:10:34.536 --> 00:10:38.456 A:middle
such as when a layer is
shown on a retina display.

00:10:38.756 --> 00:10:44.296 A:middle
We'll do some more setup
that takes care of the work.

00:10:44.446 --> 00:10:46.106 A:middle
Turning on layer
backing is really simple.

00:10:46.176 --> 00:10:49.286 A:middle
On the content view of your
window you can set wants layer

00:10:49.286 --> 00:10:50.106 A:middle
to true and code.

00:10:50.106 --> 00:10:53.996 A:middle
Or, of course, you can just go
ahead inside interface folder

00:10:53.996 --> 00:10:56.446 A:middle
and check the checkbox
for Core Animation Layer

00:10:56.726 --> 00:11:00.196 A:middle
on a top most view.

00:10:56.726 --> 00:11:00.196 A:middle
on a top most view.

00:11:00.386 --> 00:11:02.606 A:middle
So an important property

00:11:02.856 --> 00:11:07.046 A:middle
on layer backed views is the
layerContents RedrawPolicy.

00:11:07.836 --> 00:11:11.236 A:middle
You want to set this
.onSetNeedsDisplay

00:11:11.806 --> 00:11:14.196 A:middle
which is not the
default value for NSView.

00:11:15.096 --> 00:11:16.306 A:middle
What this means is you

00:11:16.306 --> 00:11:19.736 A:middle
as a developer whenever you
want the contents of your layer

00:11:19.736 --> 00:11:23.266 A:middle
or the view to change you
have to call SetNeedsDisplay.

00:11:24.156 --> 00:11:25.736 A:middle
This is slightly
different semantics

00:11:25.736 --> 00:11:27.436 A:middle
in the way normal
views would work

00:11:27.656 --> 00:11:30.016 A:middle
where they might actually
redisplay as they're moving

00:11:30.016 --> 00:11:32.966 A:middle
across changing a frame origin.

00:11:33.056 --> 00:11:36.496 A:middle
So it's something you need
to explicitly opt into,

00:11:36.496 --> 00:11:39.166 A:middle
and it's better for performance
particularly with animations.

00:11:39.216 --> 00:11:44.026 A:middle
So how do you actually get
contents into your layer?

00:11:44.876 --> 00:11:46.046 A:middle
So let's say your view is dirty.

00:11:46.336 --> 00:11:47.546 A:middle
You mark SetNeedsDisplay.

00:11:48.246 --> 00:11:52.116 A:middle
And what we do is we
ask your view, hey,

00:11:52.556 --> 00:11:54.176 A:middle
what do you do for
wantsUpdateLayer?

00:11:54.466 --> 00:11:56.186 A:middle
What's your answer
for wantsUpdateLayer?

00:11:56.186 --> 00:11:57.736 A:middle
And here we fork.

00:11:57.976 --> 00:11:58.726 A:middle
If you say yes

00:11:58.726 --> 00:12:01.846 A:middle
for wantsUpdateLayer then we're
going to call updateLayer.

00:11:58.726 --> 00:12:01.846 A:middle
for wantsUpdateLayer then we're
going to call updateLayer.

00:12:03.326 --> 00:12:05.776 A:middle
If you say no we're
going to call drawRect.

00:12:06.146 --> 00:12:07.436 A:middle
So this is a complete fork.

00:12:07.726 --> 00:12:08.566 A:middle
It's an either/or.

00:12:10.256 --> 00:12:12.936 A:middle
Then you may be wondering, well,

00:12:12.936 --> 00:12:15.876 A:middle
when should I use
updateLayer versus drawRect.

00:12:17.386 --> 00:12:19.706 A:middle
This gets back to what I was
showing about core animation

00:12:19.896 --> 00:12:21.236 A:middle
and NSLayer properties.

00:12:22.016 --> 00:12:26.836 A:middle
So if you can represent your
views representation directly

00:12:26.836 --> 00:12:30.106 A:middle
by setting CALayer properties
then you probably want

00:12:30.106 --> 00:12:31.136 A:middle
to use updateLayer.

00:12:31.546 --> 00:12:32.896 A:middle
It's going to be more efficient.

00:12:33.436 --> 00:12:35.236 A:middle
So if you can set
the layer contents,

00:12:35.556 --> 00:12:37.716 A:middle
layer background color,
prefer to do that.

00:12:38.376 --> 00:12:40.566 A:middle
If you can't, then that's
the point where you want

00:12:40.566 --> 00:12:42.946 A:middle
to override draw or drawRect

00:12:43.766 --> 00:12:47.676 A:middle
and actually do your manual
drawing inside of the subclass.

00:12:48.186 --> 00:12:50.426 A:middle
The thing about doing
this is that every view

00:12:50.426 --> 00:12:53.056 A:middle
which implements drawRect
will get its own unique little

00:12:53.056 --> 00:12:55.246 A:middle
backing score which you
can think of as an image.

00:12:55.416 --> 00:12:58.146 A:middle
And so if you have a lot of
those it might be expensive

00:12:58.456 --> 00:12:59.416 A:middle
in particular for memory.

00:12:59.926 --> 00:13:05.796 A:middle
Let's take a quick look at an
example of using update layer

00:12:59.926 --> 00:13:05.796 A:middle
Let's take a quick look at an
example of using update layer

00:13:05.796 --> 00:13:06.816 A:middle
and how you would use it.

00:13:07.736 --> 00:13:09.896 A:middle
So first of all you'll
override wantsUpdateLayer,

00:13:10.366 --> 00:13:12.916 A:middle
say that you want to get
an updateLayer callback

00:13:12.916 --> 00:13:14.536 A:middle
by responding with a true.

00:13:15.326 --> 00:13:17.316 A:middle
And then you're going to get
a callback to update layer

00:13:17.316 --> 00:13:18.906 A:middle
where you can actually
set the layer properties.

00:13:19.176 --> 00:13:22.266 A:middle
So we access the view's
property, self.layer contents

00:13:22.686 --> 00:13:24.106 A:middle
and the self.layer
backgroundColor

00:13:24.106 --> 00:13:25.896 A:middle
or whatever other
things you want to set,

00:13:25.896 --> 00:13:27.386 A:middle
and you set it at this time.

00:13:27.966 --> 00:13:34.826 A:middle
So that was talking about modern
views and creating a modern look

00:13:34.826 --> 00:13:35.836 A:middle
for the titlebar/toolbar.

00:13:36.186 --> 00:13:39.426 A:middle
Let's talk about drag and drop
and do some event tracking.

00:13:40.576 --> 00:13:42.426 A:middle
So modern drag and drop,

00:13:43.346 --> 00:13:46.646 A:middle
what you should be doing is
adopting drag flocking as shown

00:13:46.646 --> 00:13:47.666 A:middle
in this video right here.

00:13:48.256 --> 00:13:51.636 A:middle
Drag flocking is where each
individual item will move

00:13:51.636 --> 00:13:55.046 A:middle
independently and flock
together or unflock together.

00:13:55.046 --> 00:13:58.326 A:middle
And when you let go of the mouse
they'll actually all flock back

00:13:58.396 --> 00:14:00.036 A:middle
to where their original
location was.

00:13:58.396 --> 00:14:00.036 A:middle
to where their original
location was.

00:14:01.396 --> 00:14:05.146 A:middle
To use drag flocking you
just use NSViews method

00:14:05.416 --> 00:14:08.366 A:middle
beginDraggingSession,
and you pass an array

00:14:08.726 --> 00:14:11.816 A:middle
of the actual items that you
want to have be dragged around.

00:14:12.566 --> 00:14:14.256 A:middle
It's very simple to do.

00:14:15.466 --> 00:14:18.446 A:middle
For more complex
controls like a table view

00:14:18.756 --> 00:14:21.316 A:middle
or collection view we
provide delegate methods

00:14:21.316 --> 00:14:22.456 A:middle
for you to adopt these.

00:14:22.816 --> 00:14:25.236 A:middle
So for table view you should
really be preferring the

00:14:25.236 --> 00:14:25.916 A:middle
delegate method.

00:14:26.446 --> 00:14:28.466 A:middle
tableView pasteboardWriter
ForRow

00:14:28.936 --> 00:14:32.036 A:middle
where it can provide an
individual NSPasteboard writing

00:14:32.036 --> 00:14:35.196 A:middle
item for every item in a table
view that's being dragged.

00:14:35.686 --> 00:14:39.266 A:middle
As opposed to the older
method, tableView writeRowsWith

00:14:39.636 --> 00:14:42.066 A:middle
to a pasteboard where you
would have written everything

00:14:42.066 --> 00:14:43.596 A:middle
in one go to the pasteboard.

00:14:45.516 --> 00:14:50.426 A:middle
Similarly, collection view
has two delegate methods

00:14:50.426 --> 00:14:51.766 A:middle
that look very similar to that.

00:14:52.096 --> 00:14:54.096 A:middle
And for collection view
you should also prefer the

00:14:54.096 --> 00:14:56.566 A:middle
pasteboardWriter
ForItemAt version

00:14:56.566 --> 00:14:57.966 A:middle
as opposed to the other version.

00:14:58.546 --> 00:15:03.926 A:middle
So with drag flocking new to
macOS 10.12 is the support

00:14:58.546 --> 00:15:03.926 A:middle
So with drag flocking new to
macOS 10.12 is the support

00:15:03.926 --> 00:15:05.616 A:middle
for drag file promises.

00:15:06.076 --> 00:15:08.176 A:middle
This may be a reason why you
weren't using drag flocking

00:15:08.396 --> 00:15:09.266 A:middle
up until this point.

00:15:10.016 --> 00:15:12.036 A:middle
And you can use NSFile
PromiseReceiver

00:15:12.036 --> 00:15:14.736 A:middle
and NSFile PromiseProvider
to do reading

00:15:14.736 --> 00:15:16.066 A:middle
and writing of file promises.

00:15:16.766 --> 00:15:18.586 A:middle
Take a look at the talk,
What's New In Cocoa

00:15:18.586 --> 00:15:23.376 A:middle
for more information and
more details on this.

00:15:23.586 --> 00:15:25.826 A:middle
So let's take a look
at event tracking.

00:15:25.916 --> 00:15:27.516 A:middle
And let's say you
have your window here.

00:15:27.976 --> 00:15:30.006 A:middle
And let's say it has a
button up at the top.

00:15:30.006 --> 00:15:31.896 A:middle
So you have this button.

00:15:32.326 --> 00:15:35.566 A:middle
And what you want to happen
is that when you click

00:15:35.566 --> 00:15:38.736 A:middle
on that button down and up it
works like a normal button.

00:15:38.786 --> 00:15:41.266 A:middle
You will do some action
like showing a popover.

00:15:42.606 --> 00:15:45.866 A:middle
But you also want to be aware
you click on that button,

00:15:46.146 --> 00:15:49.336 A:middle
and if you actually drag the
mouse it starts a window drag.

00:15:49.996 --> 00:15:52.956 A:middle
So how to get both those
behaviors together in a proper,

00:15:52.956 --> 00:15:55.976 A:middle
modern way that works well
with modern system features?

00:15:56.366 --> 00:15:59.626 A:middle
Well, first of all let's
talk about event tracking

00:15:59.626 --> 00:16:01.226 A:middle
and how you'll track
events to do this.

00:15:59.626 --> 00:16:01.226 A:middle
and how you'll track
events to do this.

00:16:01.876 --> 00:16:04.986 A:middle
And this window has a method
track events matching mask

00:16:05.106 --> 00:16:06.646 A:middle
with a timeout mode handler.

00:16:07.106 --> 00:16:09.106 A:middle
And the handler is
a block callback.

00:16:10.066 --> 00:16:12.826 A:middle
We prefer that you use this
as opposed to the older method

00:16:12.886 --> 00:16:16.776 A:middle
on NSApplication which was
nextEvent matchingMask.

00:16:17.576 --> 00:16:19.616 A:middle
With the older method you
would create your own loop.

00:16:20.316 --> 00:16:22.776 A:middle
With the newer method you
just get a block callback

00:16:22.776 --> 00:16:24.166 A:middle
to do your work.

00:16:25.836 --> 00:16:28.306 A:middle
Taking a look at a
block callback let's say

00:16:28.306 --> 00:16:31.456 A:middle
in that button we subclass
and override mouseDown.

00:16:33.076 --> 00:16:34.196 A:middle
The first thing we're going

00:16:34.196 --> 00:16:38.076 A:middle
to do inside this mouseDown
is call window track events.

00:16:38.146 --> 00:16:39.596 A:middle
We want to track
all of the events

00:16:39.596 --> 00:16:41.776 A:middle
for the drag and
the leftMouseUp.

00:16:42.476 --> 00:16:46.676 A:middle
If the user did a click,
just a down and back up,

00:16:47.146 --> 00:16:49.546 A:middle
then we're going to just be
like, oh, we're going to stop

00:16:49.876 --> 00:16:52.406 A:middle
and we're going to say,
oh, we're going to call yes

00:16:52.406 --> 00:16:55.076 A:middle
for super because that way
everything will work normal

00:16:55.076 --> 00:16:55.996 A:middle
like an NS button.

00:16:56.916 --> 00:16:58.226 A:middle
But here's the extra part.

00:16:58.506 --> 00:17:01.396 A:middle
Let's say you click and
you drag, and if you click

00:16:58.506 --> 00:17:01.396 A:middle
Let's say you click and
you drag, and if you click

00:17:01.396 --> 00:17:03.626 A:middle
and drag inside this
button we're going to figure

00:17:03.626 --> 00:17:07.626 A:middle
out if you went far enough, if
you went far enough we're going

00:17:07.705 --> 00:17:10.626 A:middle
to pass off to the window
to do a performDrag.

00:17:12.346 --> 00:17:16.266 A:middle
And so what that means is when
you pass off to the performDrag

00:17:16.266 --> 00:17:19.266 A:middle
of the window the window and
the system is going to take

00:17:19.266 --> 00:17:20.925 A:middle
over dragging the
window at that point.

00:17:21.945 --> 00:17:24.256 A:middle
You should not be dragging
and moving a window

00:17:24.256 --> 00:17:26.646 A:middle
by calling set frame again
and again on a window.

00:17:27.646 --> 00:17:30.676 A:middle
If you pass off to the system
as soon as you pass it off,

00:17:30.896 --> 00:17:35.036 A:middle
if your application hangs,
then that window will continue

00:17:35.036 --> 00:17:37.936 A:middle
to be moveable even if your
application is spinning.

00:17:38.546 --> 00:17:40.866 A:middle
In addition, other
system features will work

00:17:41.366 --> 00:17:44.426 A:middle
such as space switching,
the spaces bar will drop

00:17:44.476 --> 00:17:46.156 A:middle
down when you move to
the top of the window,

00:17:46.666 --> 00:17:48.086 A:middle
window snapping,
window alignment.

00:17:48.746 --> 00:17:50.256 A:middle
Any other new system
features we add

00:17:50.256 --> 00:17:52.306 A:middle
with window movement
will automatically work

00:17:52.476 --> 00:17:53.636 A:middle
without you having
to do anything.

00:17:54.366 --> 00:17:57.386 A:middle
So we encourage you to
pass off to the system

00:17:57.386 --> 00:17:58.366 A:middle
by calling performDrag.

00:17:59.016 --> 00:18:03.286 A:middle
So that was talking
about drag and drop,

00:17:59.016 --> 00:18:03.286 A:middle
So that was talking
about drag and drop,

00:18:03.286 --> 00:18:04.576 A:middle
a little bit about
event handling.

00:18:04.816 --> 00:18:07.846 A:middle
Let's talk about container
view controls and how

00:18:07.846 --> 00:18:08.976 A:middle
to handle those properly.

00:18:09.976 --> 00:18:12.586 A:middle
So container view controls we
should be using the view based

00:18:12.586 --> 00:18:13.656 A:middle
table view at this point.

00:18:14.146 --> 00:18:16.486 A:middle
And you do that by using the
delegate method table view view

00:18:16.486 --> 00:18:20.586 A:middle
40, or inside of an interface
builder you can set things

00:18:21.126 --> 00:18:23.116 A:middle
up directly in interface
builder itself.

00:18:23.646 --> 00:18:27.306 A:middle
And why you want to do it is
so you can get what we saw

00:18:27.306 --> 00:18:30.336 A:middle
on that video new features
such as swipe to delete

00:18:30.606 --> 00:18:32.786 A:middle
which only exists in the
view base table view.

00:18:33.376 --> 00:18:36.196 A:middle
To do the swipe to
delete is very simple.

00:18:36.616 --> 00:18:39.486 A:middle
There's a table view
method, row actions for row

00:18:39.486 --> 00:18:42.516 A:middle
on a particular edge, the left
or the right edge or, sorry,

00:18:42.586 --> 00:18:43.776 A:middle
leading or trailing edge.

00:18:44.006 --> 00:18:46.706 A:middle
And you can return an
array of one or more

00:18:46.706 --> 00:18:48.506 A:middle
or a zero or more row actions.

00:18:49.026 --> 00:18:52.476 A:middle
In the NSTableView
row action allows you

00:18:52.476 --> 00:18:56.586 A:middle
to create a string value for
what the title is of the button

00:18:57.236 --> 00:19:00.776 A:middle
and a handler to actually
do the code that happens

00:18:57.236 --> 00:19:00.776 A:middle
and a handler to actually
do the code that happens

00:19:00.776 --> 00:19:03.516 A:middle
when the user clicks on the
button or swipes far enough

00:19:03.516 --> 00:19:07.426 A:middle
to actually invoke it.

00:19:07.706 --> 00:19:11.516 A:middle
Next let's talk about ScrollView
and that complex control.

00:19:11.996 --> 00:19:14.106 A:middle
So for using all these
technologies we talked

00:19:14.106 --> 00:19:17.306 A:middle
about let's say that we
take the ScrollView --

00:19:17.306 --> 00:19:21.076 A:middle
or let's say we take the window
and set the window property,

00:19:21.216 --> 00:19:22.926 A:middle
titlebar appears transparent

00:19:23.216 --> 00:19:24.926 A:middle
which makes the titlebar
appear transparent.

00:19:25.436 --> 00:19:27.506 A:middle
Applications like Messages
take advantage of this

00:19:28.476 --> 00:19:29.886 A:middle
to allow the contents
to show underneath.

00:19:30.256 --> 00:19:32.356 A:middle
So here we can see
what's happening.

00:19:32.356 --> 00:19:38.026 A:middle
That ScrollView on the side is
showing the content underneath

00:19:38.026 --> 00:19:39.136 A:middle
the titlebar/toolbar area

00:19:39.136 --> 00:19:40.666 A:middle
and would automatically
blur with it.

00:19:41.286 --> 00:19:42.706 A:middle
But this presents a dilemma.

00:19:43.336 --> 00:19:46.756 A:middle
How do you get that ScrollView
to automatically be inset

00:19:46.756 --> 00:19:49.666 A:middle
so that you don't have to add
in like an extra empty row

00:19:49.666 --> 00:19:50.916 A:middle
or anything really weird?

00:19:51.596 --> 00:19:54.056 A:middle
And it's very convenient
and easy to do this.

00:19:54.256 --> 00:19:57.976 A:middle
ScrollView has a method or a
property called contentInsets

00:19:58.376 --> 00:20:01.976 A:middle
that allows you to drop the
content down a little bit.

00:19:58.376 --> 00:20:01.976 A:middle
that allows you to drop the
content down a little bit.

00:20:02.046 --> 00:20:03.766 A:middle
In fact, we can do
it automatically

00:20:03.826 --> 00:20:05.586 A:middle
so we have a property
automaticallyAdjust

00:20:05.586 --> 00:20:06.506 A:middle
ContentInsets.

00:20:07.216 --> 00:20:09.426 A:middle
And if you set that to
true then what we're going

00:20:09.426 --> 00:20:11.486 A:middle
to do is ScrollView
is going to use KVO

00:20:11.556 --> 00:20:14.386 A:middle
to track the contentLayoutRect
that we talked about earlier

00:20:14.826 --> 00:20:16.766 A:middle
and automatically set
the content insets

00:20:16.926 --> 00:20:18.506 A:middle
to be the appropriate
value for you.

00:20:19.076 --> 00:20:23.356 A:middle
But you as a developer may
actually want more control

00:20:23.356 --> 00:20:24.326 A:middle
of the content insets.

00:20:24.616 --> 00:20:26.446 A:middle
You might want to drop
it down even further

00:20:26.806 --> 00:20:28.836 A:middle
and add some other
accessories there such as

00:20:28.836 --> 00:20:30.726 A:middle
like a search field
or something else.

00:20:31.616 --> 00:20:35.236 A:middle
And an example of where we do
this in the system Mail drops it

00:20:35.236 --> 00:20:37.666 A:middle
down a little bit and adds
another sort indicator.

00:20:38.536 --> 00:20:40.296 A:middle
That's how we accomplish
things like that

00:20:40.296 --> 00:20:41.456 A:middle
in our system applications.

00:20:41.936 --> 00:20:45.916 A:middle
Next let's talk about
auto layout.

00:20:46.786 --> 00:20:47.966 A:middle
You should be using auto layout,

00:20:48.586 --> 00:20:50.546 A:middle
and you should be using
base localization.

00:20:51.386 --> 00:20:54.526 A:middle
Which means that all your nymphs
should be in base.lproj instead

00:20:54.526 --> 00:20:57.136 A:middle
of multiple copies
of different folders

00:20:57.136 --> 00:20:58.326 A:middle
and different localizations.

00:20:58.906 --> 00:21:01.006 A:middle
You shouldn't use fixed
width constraints.

00:20:58.906 --> 00:21:01.006 A:middle
You shouldn't use fixed
width constraints.

00:21:01.386 --> 00:21:05.686 A:middle
You want to use controls to have
intrinsic content sizes instead

00:21:05.686 --> 00:21:06.856 A:middle
of hard coding sizes.

00:21:07.576 --> 00:21:08.886 A:middle
Prefer to use StackView.

00:21:09.366 --> 00:21:10.756 A:middle
Use leading and trailing
attributes.

00:21:10.756 --> 00:21:11.566 A:middle
All these things are right

00:21:11.756 --> 00:21:14.426 A:middle
for creating a properly
localized application.

00:21:15.696 --> 00:21:18.186 A:middle
But let's take a look at some of
the localization options in IB.

00:21:18.186 --> 00:21:21.096 A:middle
In particular let's look
at this Text Direction,

00:21:21.196 --> 00:21:22.546 A:middle
Layout and Mirror section.

00:21:23.716 --> 00:21:26.276 A:middle
So the text direction
has three values.

00:21:26.636 --> 00:21:29.326 A:middle
It has natural, left to
right and right to left.

00:21:30.036 --> 00:21:33.726 A:middle
Natural means that the actual
control is going to look

00:21:33.726 --> 00:21:35.976 A:middle
at the string value that
you set on that control

00:21:35.976 --> 00:21:38.126 A:middle
like a text field, look
at the string value.

00:21:38.656 --> 00:21:40.096 A:middle
And if that string is a right

00:21:40.096 --> 00:21:43.776 A:middle
to left string then
we will actually put

00:21:43.776 --> 00:21:45.196 A:middle
in the direction right to left.

00:21:45.566 --> 00:21:49.046 A:middle
If it's a left to right string
we'll put it in left to right.

00:21:49.256 --> 00:21:51.716 A:middle
Or you can manually control
it by setting these to left

00:21:51.716 --> 00:21:52.816 A:middle
to right or right to left.

00:21:53.606 --> 00:21:57.166 A:middle
The next property is the
userInterface LayoutDirection

00:21:58.056 --> 00:21:59.466 A:middle
which is key to layout.

00:21:59.556 --> 00:22:02.436 A:middle
And it has either left to
right or right to left.

00:21:59.556 --> 00:22:02.436 A:middle
And it has either left to
right or right to left.

00:22:03.686 --> 00:22:06.426 A:middle
System controls such as table
view will look at this property

00:22:06.426 --> 00:22:07.186 A:middle
and may do things

00:22:07.186 --> 00:22:09.226 A:middle
like automatically
flipping the table columns

00:22:09.296 --> 00:22:10.466 A:middle
when it's set to right to left.

00:22:11.296 --> 00:22:13.866 A:middle
The default here is
based on the app value.

00:22:14.906 --> 00:22:18.066 A:middle
But the interesting thing
is the mirroring property

00:22:18.146 --> 00:22:19.626 A:middle
because it's a little confusing.

00:22:19.936 --> 00:22:22.476 A:middle
So if mirroring is set
to automatically then

00:22:22.476 --> 00:22:24.076 A:middle
that userInterface
LayoutDirection,

00:22:24.296 --> 00:22:27.296 A:middle
the last property we just
looked at, will automatically go

00:22:27.296 --> 00:22:30.426 A:middle
from left to right to right
to left when it's in a right

00:22:30.426 --> 00:22:33.026 A:middle
to left localization
and vice versa.

00:22:33.576 --> 00:22:38.206 A:middle
And it will also flip other
properties automatically

00:22:38.206 --> 00:22:39.806 A:middle
like the cell image
position for a button.

00:22:40.066 --> 00:22:42.806 A:middle
So the button's image is on
the left and we'll flip it

00:22:42.806 --> 00:22:44.636 A:middle
and put it on the right
for you automatically.

00:22:45.986 --> 00:22:49.046 A:middle
But one property that we won't
flip is on text alignment.

00:22:49.546 --> 00:22:51.016 A:middle
If you have it set
to center, justify

00:22:51.016 --> 00:22:52.936 A:middle
or natural those don't
really make sense to flip

00:22:52.936 --> 00:22:55.256 A:middle
so we won't flip them.

00:22:55.466 --> 00:22:57.516 A:middle
So then you might
be wondering, well,

00:22:57.516 --> 00:22:59.556 A:middle
when do I actually not
want to have mirroring?

00:23:00.086 --> 00:23:02.906 A:middle
Well, you might want to
have mirroring set to no

00:23:03.206 --> 00:23:06.516 A:middle
when you want a control that has
a very physical representation

00:23:06.516 --> 00:23:07.316 A:middle
like a play button,

00:23:07.316 --> 00:23:09.086 A:middle
a fast forward button
or a rewind button.

00:23:09.616 --> 00:23:13.796 A:middle
And then these are all
interface builder things

00:23:13.876 --> 00:23:15.636 A:middle
so how do you actually
do this in code?

00:23:16.516 --> 00:23:19.676 A:middle
So in code you actually have
to look at your controls value

00:23:19.676 --> 00:23:21.256 A:middle
for the user interface
layout direction.

00:23:21.656 --> 00:23:23.906 A:middle
If it's set to left to right
then you're going to have

00:23:23.936 --> 00:23:27.006 A:middle
to say, hey button, I want
that image to be on the left

00:23:27.316 --> 00:23:29.146 A:middle
when it's in a left
to right localization.

00:23:29.496 --> 00:23:31.256 A:middle
And I want that image to
be on the right when it's

00:23:31.256 --> 00:23:32.666 A:middle
in a right to left localization.

00:23:32.986 --> 00:23:34.546 A:middle
You have to manually do this.

00:23:35.126 --> 00:23:37.726 A:middle
But to make it a
little bit easier

00:23:37.726 --> 00:23:40.776 A:middle
in 10.12 we added a
convenience method on button

00:23:41.116 --> 00:23:45.136 A:middle
and an init method which allows
you to pass a string, an image,

00:23:45.136 --> 00:23:48.886 A:middle
a target and an action and
have the flipping automatically

00:23:48.886 --> 00:23:49.526 A:middle
happen for you.

00:23:50.086 --> 00:23:54.916 A:middle
So that's it for
my first section.

00:23:55.096 --> 00:23:57.016 A:middle
I'm going to bring up Jeff
to talk about appearances,

00:23:57.016 --> 00:23:58.686 A:middle
storyboards and some
other Mac features.

00:23:59.166 --> 00:23:59.476 A:middle
Thank you.

00:24:00.516 --> 00:24:04.636 A:middle
[ Applause ]

00:24:05.136 --> 00:24:05.776 A:middle
&gt;&gt; All right, thanks, Corbin.

00:24:06.076 --> 00:24:09.176 A:middle
We got an absolute ton of
stuff to cover in this section

00:24:09.176 --> 00:24:11.606 A:middle
so I'm going to dive right
in with system appearances.

00:24:12.976 --> 00:24:14.416 A:middle
So here's our app.

00:24:14.416 --> 00:24:16.266 A:middle
We've been looking at
it for a while now.

00:24:16.266 --> 00:24:19.776 A:middle
And we're trying to
develop our UI a little bit.

00:24:20.166 --> 00:24:21.376 A:middle
And we've decided that we want

00:24:21.376 --> 00:24:23.776 A:middle
to adopt this really
slick dark look.

00:24:23.776 --> 00:24:27.416 A:middle
This is kind of characteristic
of Pro apps usually.

00:24:27.746 --> 00:24:29.506 A:middle
And we're nothing
if not ambitious

00:24:29.506 --> 00:24:30.746 A:middle
with our little demo app here.

00:24:32.186 --> 00:24:34.416 A:middle
But look at this, this
looks really complicated.

00:24:34.416 --> 00:24:37.816 A:middle
We have an entirely different
system, Window Chrome,

00:24:38.146 --> 00:24:40.216 A:middle
we need all our control
artwork to change,

00:24:40.296 --> 00:24:42.546 A:middle
segmented controls,
buttons, sliders.

00:24:43.086 --> 00:24:46.386 A:middle
And all of our text
labels need to invert

00:24:46.386 --> 00:24:48.216 A:middle
from dark text to light text.

00:24:49.076 --> 00:24:52.016 A:middle
Which seems like an awful lot of
work, but actually we can do it

00:24:52.016 --> 00:24:54.296 A:middle
in one line of code
using NSAppearance.

00:24:55.046 --> 00:24:58.086 A:middle
All we've got to do is create
one of our system appearances,

00:24:58.266 --> 00:24:59.236 A:middle
assign it to the window,

00:24:59.236 --> 00:25:01.266 A:middle
and it's automatically
applied to everything within.

00:24:59.236 --> 00:25:01.266 A:middle
and it's automatically
applied to everything within.

00:25:02.146 --> 00:25:04.896 A:middle
You can think of an appearance
as sort of a pallet of colors

00:25:04.896 --> 00:25:08.386 A:middle
and artwork that we use
to resolve how to draw all

00:25:08.386 --> 00:25:09.966 A:middle
of our standard system controls

00:25:09.966 --> 00:25:12.266 A:middle
and also all of our
named colors.

00:25:12.266 --> 00:25:14.626 A:middle
These are things like
label color, control color.

00:25:14.626 --> 00:25:16.956 A:middle
And for that reason
it's really important

00:25:16.956 --> 00:25:18.896 A:middle
that you use these
colors when applicable.

00:25:19.116 --> 00:25:22.276 A:middle
Not only do you fit in better
with the entire system theme,

00:25:22.646 --> 00:25:25.276 A:middle
but you'll continue to fit in if
that theme changes in the future

00:25:25.276 --> 00:25:27.216 A:middle
or if you change your
appearance in the future.

00:25:28.036 --> 00:25:29.376 A:middle
So let's take a closer look.

00:25:30.076 --> 00:25:30.796 A:middle
Here we've got a panel.

00:25:30.836 --> 00:25:33.656 A:middle
It's got tons of nice labels,
controls, etcetera, on it.

00:25:34.546 --> 00:25:36.556 A:middle
And all we have to do is
just apply dark appearance,

00:25:36.846 --> 00:25:38.716 A:middle
and we see a pretty
dramatic change.

00:25:38.916 --> 00:25:41.626 A:middle
Our control artwork has changed,
and all of our labels have,

00:25:41.626 --> 00:25:43.196 A:middle
of course, inverted
from dark to light.

00:25:43.196 --> 00:25:45.926 A:middle
We can actually take
it one step further

00:25:46.286 --> 00:25:48.996 A:middle
and apply this cool
vibrancy effect.

00:25:48.996 --> 00:25:51.336 A:middle
You may have noticed a slide
ago that the appearance

00:25:51.336 --> 00:25:52.906 A:middle
that we applied is
called vibrant dark.

00:25:53.116 --> 00:25:55.516 A:middle
That doesn't mean that you're
obligated to use vibrancy,

00:25:55.516 --> 00:25:57.186 A:middle
but it does mean that
the artwork looks great

00:25:57.226 --> 00:25:58.536 A:middle
in a vibrant context.

00:25:59.036 --> 00:26:01.976 A:middle
And to get this appearance
all you need to do is add all

00:25:59.036 --> 00:26:01.976 A:middle
And to get this appearance
all you need to do is add all

00:26:01.976 --> 00:26:04.786 A:middle
of your controls as a subview
of NSVisualEffect View.

00:26:05.166 --> 00:26:07.126 A:middle
And you'll automatically
get this great behind window

00:26:07.126 --> 00:26:09.186 A:middle
blurring and also
this cool blend effect

00:26:09.326 --> 00:26:10.176 A:middle
for everything on top.

00:26:10.176 --> 00:26:13.256 A:middle
Now, you might be thinking
that's great and all,

00:26:13.596 --> 00:26:17.146 A:middle
but my designer has this
really cool like specific color

00:26:17.146 --> 00:26:18.666 A:middle
that they want for
our text labels,

00:26:18.976 --> 00:26:20.886 A:middle
and so I'm not going
to use label color.

00:26:20.886 --> 00:26:23.646 A:middle
I think that I'm not planning
on changing from dark to light

00:26:23.646 --> 00:26:26.276 A:middle
or vice versa so I'm
fine, right, I'm safe.

00:26:26.896 --> 00:26:30.716 A:middle
Well, let's have some
food for thought.

00:26:31.046 --> 00:26:33.756 A:middle
Let's check in with
the accessibility pane,

00:26:33.756 --> 00:26:34.716 A:middle
and we're going to
turn on this setting

00:26:34.716 --> 00:26:36.676 A:middle
in the middle here
called Increase contrast.

00:26:36.676 --> 00:26:38.246 A:middle
And let's see what
that does to our UI.

00:26:38.246 --> 00:26:42.076 A:middle
On the left we again
have our standard panel.

00:26:42.636 --> 00:26:44.576 A:middle
But on the right
we have that panel

00:26:44.576 --> 00:26:46.156 A:middle
with Increase contrast
turned on.

00:26:46.736 --> 00:26:49.336 A:middle
And although we haven't
inverted all of our colors,

00:26:49.336 --> 00:26:51.506 A:middle
this transformation is
every bit as dramatic

00:26:51.886 --> 00:26:53.836 A:middle
as the transformation
from light to dark.

00:26:54.266 --> 00:26:56.606 A:middle
You can see that the window
background color has gotten

00:26:56.606 --> 00:26:59.066 A:middle
lighter, our text is
darker at every level,

00:26:59.066 --> 00:27:00.906 A:middle
and all of our controls have
gotten this really nice,

00:26:59.066 --> 00:27:00.906 A:middle
and all of our controls have
gotten this really nice,

00:27:00.906 --> 00:27:01.916 A:middle
bold outline.

00:27:02.116 --> 00:27:04.036 A:middle
It makes it really pop
against the background.

00:27:04.946 --> 00:27:07.906 A:middle
Now, when you provide a
hardcoded color value we can't

00:27:07.906 --> 00:27:09.126 A:middle
really second guess that.

00:27:09.126 --> 00:27:11.046 A:middle
We can't adjust for
settings like this.

00:27:11.486 --> 00:27:16.086 A:middle
And so if you don't supply
things like label color,

00:27:16.086 --> 00:27:18.826 A:middle
secondary label color, you
might be doing a real disservice

00:27:18.826 --> 00:27:21.266 A:middle
to people who need settings
like increased contrast

00:27:21.266 --> 00:27:23.816 A:middle
to get the most out
of their Mac.

00:27:24.136 --> 00:27:27.356 A:middle
Now I hinted a moment ago at
visual effect view and vibrancy.

00:27:27.356 --> 00:27:29.956 A:middle
We're not going to go into
depth on that API right now,

00:27:29.956 --> 00:27:31.826 A:middle
but I would refer
you back to our talk

00:27:31.826 --> 00:27:34.526 A:middle
in 2014 that's Adopting
the Advanced Features

00:27:34.526 --> 00:27:36.396 A:middle
of the new UI of OS X Yosemite.

00:27:36.866 --> 00:27:38.446 A:middle
And that's appearances.

00:27:38.676 --> 00:27:41.626 A:middle
It's a real simple way to theme
your application while remaining

00:27:41.626 --> 00:27:43.976 A:middle
harmonious with the overall
look of the operating system.

00:27:44.426 --> 00:27:46.606 A:middle
Next up storyboards.

00:27:48.266 --> 00:27:49.886 A:middle
Storyboards are a
technology that will allow you

00:27:49.886 --> 00:27:52.746 A:middle
to design not only the
individual components

00:27:52.746 --> 00:27:54.756 A:middle
and the views that comprise
them for your application,

00:27:55.116 --> 00:27:56.906 A:middle
but also visually
design the relationships

00:27:56.906 --> 00:27:58.256 A:middle
between those components.

00:27:59.126 --> 00:28:01.796 A:middle
In this case when I say
component storyboards operate

00:27:59.126 --> 00:28:01.796 A:middle
In this case when I say
component storyboards operate

00:28:01.796 --> 00:28:03.976 A:middle
in terms of controllers,
there's our window controllers

00:28:03.976 --> 00:28:04.956 A:middle
and view controllers.

00:28:05.596 --> 00:28:07.796 A:middle
And we connect them together
with these things called segues,

00:28:07.796 --> 00:28:09.706 A:middle
those are the arrows up
there on my screenshot.

00:28:09.706 --> 00:28:12.986 A:middle
And segues abstract away
all of the glue code

00:28:13.526 --> 00:28:15.056 A:middle
of putting these
components together.

00:28:15.296 --> 00:28:18.236 A:middle
Those are things like adding
subviews, adding constraints,

00:28:18.346 --> 00:28:20.796 A:middle
creating popovers,
really just housekeeping.

00:28:20.796 --> 00:28:29.536 A:middle
Now, one thing that we need to
think about with storyboards is

00:28:30.226 --> 00:28:32.156 A:middle
when we have separable
components like these,

00:28:32.156 --> 00:28:33.626 A:middle
you can see I've got
a split view here,

00:28:33.766 --> 00:28:35.276 A:middle
and you can see the
storyboard that creates it,

00:28:35.276 --> 00:28:37.076 A:middle
all these new little components
do their own little thing,

00:28:37.786 --> 00:28:40.926 A:middle
that every piece of UI
has some kind of data

00:28:40.926 --> 00:28:43.416 A:middle
that it wants to
look at or modify.

00:28:43.896 --> 00:28:47.516 A:middle
And we can't necessarily
just drag outlets or actions

00:28:47.516 --> 00:28:48.606 A:middle
from one scene to another.

00:28:48.606 --> 00:28:51.136 A:middle
Of course, if we did that
they would not be separable

00:28:51.136 --> 00:28:53.866 A:middle
components anymore, and then
we have defeated the purpose

00:28:53.866 --> 00:28:54.456 A:middle
of this whole thing.

00:28:55.036 --> 00:28:57.486 A:middle
But sometimes this
data that we're working

00:28:57.486 --> 00:29:01.046 A:middle
on doesn't really live conically
in the scene that we have here

00:28:57.486 --> 00:29:01.046 A:middle
on doesn't really live conically
in the scene that we have here

00:29:01.046 --> 00:29:02.076 A:middle
in down in our leaf node.

00:29:02.396 --> 00:29:03.516 A:middle
Sometimes it might
live all the way

00:29:03.516 --> 00:29:04.976 A:middle
up on the window
or in the document.

00:29:05.486 --> 00:29:07.856 A:middle
So how do we propagate
that data all the way

00:29:07.856 --> 00:29:11.316 A:middle
up from the top level
down into our leaf nodes?

00:29:11.996 --> 00:29:14.786 A:middle
Well, we have a couple of
rules of thumb, not hard

00:29:14.786 --> 00:29:17.056 A:middle
and fast rules but
just a couple of ideas

00:29:17.056 --> 00:29:19.306 A:middle
that we think are good
for handling this.

00:29:20.216 --> 00:29:23.816 A:middle
For one, dependencies should
generally cascade downward.

00:29:24.236 --> 00:29:26.466 A:middle
If you're wondering, if you
need some kind of rule of thumb

00:29:26.466 --> 00:29:29.606 A:middle
for this just follow the
arrows in your segues.

00:29:30.526 --> 00:29:33.306 A:middle
If nothing else this gives you a
nice unidirectional information

00:29:33.306 --> 00:29:34.486 A:middle
flow in your application,

00:29:34.826 --> 00:29:36.646 A:middle
and that makes it a lot
easier to reason about.

00:29:37.246 --> 00:29:40.586 A:middle
Next try to reduce the
amount of assumptions

00:29:40.586 --> 00:29:43.816 A:middle
about your UI structure that
you hardcode into your code.

00:29:43.816 --> 00:29:47.816 A:middle
Now, you just got done designing
your UI and your storyboard.

00:29:47.816 --> 00:29:50.266 A:middle
And if you hardcode
assumptions about how

00:29:50.266 --> 00:29:53.226 A:middle
that structure is put together
in your code, now when you want

00:29:53.226 --> 00:29:55.616 A:middle
to make a change to your
storyboard you're going back

00:29:55.616 --> 00:29:56.016 A:middle
and forth.

00:29:56.016 --> 00:29:57.676 A:middle
You've got to change your
code, change your storyboard,

00:29:57.676 --> 00:29:58.876 A:middle
and now you're fighting
yourself.

00:29:59.406 --> 00:29:59.976 A:middle
Let's not do that.

00:30:00.236 --> 00:30:03.326 A:middle
Let's have our code focus
on our data and focus

00:30:03.326 --> 00:30:05.446 A:middle
on designing our interface
and interface builder.

00:30:06.486 --> 00:30:09.396 A:middle
And one technique that we
can use to address that is

00:30:09.396 --> 00:30:10.806 A:middle
to use protocol conformances

00:30:10.806 --> 00:30:12.626 A:middle
to work really generically
across our UI.

00:30:12.626 --> 00:30:15.106 A:middle
So here's an example.

00:30:15.816 --> 00:30:16.946 A:middle
Let's say we have
this property here,

00:30:16.946 --> 00:30:18.396 A:middle
it's up on our window
controller,

00:30:18.676 --> 00:30:20.896 A:middle
and we want to automatically
provide that property

00:30:21.096 --> 00:30:23.386 A:middle
to anything in our view
hierarchy that understands it.

00:30:23.996 --> 00:30:25.976 A:middle
So in our didSet we're
going to go ahead

00:30:25.976 --> 00:30:27.216 A:middle
and call this propagate method.

00:30:27.976 --> 00:30:29.026 A:middle
And we've got this protocol

00:30:29.026 --> 00:30:31.596 A:middle
that we've defined off screen
called photoControllerConsumer.

00:30:32.196 --> 00:30:34.396 A:middle
And this just says I
know how to do something

00:30:34.396 --> 00:30:35.346 A:middle
with a photoController.

00:30:36.066 --> 00:30:39.336 A:middle
And so if we look at a
child ViewController and see

00:30:39.336 --> 00:30:41.166 A:middle
that it conforms to
that protocol we can set

00:30:41.166 --> 00:30:41.736 A:middle
the property.

00:30:41.926 --> 00:30:45.306 A:middle
And then we also automatically
propagate recursively

00:30:45.306 --> 00:30:46.536 A:middle
to all of its children.

00:30:49.276 --> 00:30:54.696 A:middle
But what about things like
popovers or sheet presentations,

00:30:54.696 --> 00:30:56.046 A:middle
things that are kind
of on demand?

00:30:56.636 --> 00:30:58.086 A:middle
These probably don't exist

00:30:58.086 --> 00:30:59.596 A:middle
when you're setting
a property like that.

00:31:00.136 --> 00:31:01.996 A:middle
And we need to be able
to provide their data

00:31:02.076 --> 00:31:04.326 A:middle
on demand before they
show up on screen.

00:31:05.026 --> 00:31:07.516 A:middle
And that's exactly what the
prepare for segue method is for.

00:31:08.436 --> 00:31:10.446 A:middle
This is called on the
presenting view controller

00:31:10.486 --> 00:31:13.716 A:middle
or window controller at the time
that the presentation occurs.

00:31:14.136 --> 00:31:17.976 A:middle
And in this case instead of
doing something like inspecting

00:31:17.976 --> 00:31:21.846 A:middle
or segue identifier forcibly
casting to the controller class

00:31:21.846 --> 00:31:23.746 A:middle
that we expect it to be
and then doing some kind

00:31:23.746 --> 00:31:26.796 A:middle
of specific setup, here we're
just doing the exact same thing.

00:31:27.376 --> 00:31:29.376 A:middle
We're checking out what
protocols it conforms to

00:31:29.716 --> 00:31:31.366 A:middle
and then setting the
property appropriately.

00:31:31.936 --> 00:31:34.976 A:middle
And what this does is
it changes our logic

00:31:34.976 --> 00:31:39.296 A:middle
from focusing really strictly
on identity into capability.

00:31:39.296 --> 00:31:41.026 A:middle
We're saying I have
this knowledge,

00:31:41.296 --> 00:31:43.926 A:middle
and anything that's presented
off of me could potentially gain

00:31:43.926 --> 00:31:46.886 A:middle
that knowledge automatically
through a protocol conformance.

00:31:47.106 --> 00:31:47.786 A:middle
It's really handy.

00:31:48.316 --> 00:31:50.506 A:middle
More about actions.

00:31:51.246 --> 00:31:54.146 A:middle
It's really frequent
that the best object

00:31:54.146 --> 00:31:57.496 A:middle
to handle an action that's
triggered in UI is not actually

00:31:57.496 --> 00:32:00.686 A:middle
in the same scene that
the control is defined in.

00:31:57.496 --> 00:32:00.686 A:middle
in the same scene that
the control is defined in.

00:32:00.686 --> 00:32:03.386 A:middle
And this is exemplified
by menu items which are

00:32:03.386 --> 00:32:06.066 A:middle
in their own little scene
completely disconnected

00:32:06.066 --> 00:32:06.616 A:middle
from your UI.

00:32:07.886 --> 00:32:10.316 A:middle
And luckily we have a
really great mechanism

00:32:10.316 --> 00:32:12.916 A:middle
for handling this case, and
that's the responder chain.

00:32:13.626 --> 00:32:15.686 A:middle
If you're coming from
a platform like iOS

00:32:15.686 --> 00:32:17.716 A:middle
where maybe you don't use
the responder chain quite

00:32:17.716 --> 00:32:21.806 A:middle
so heavily, that is that little
orange cube that is in the top

00:32:21.806 --> 00:32:23.246 A:middle
of every storyboard scene.

00:32:23.246 --> 00:32:25.006 A:middle
That's a proxy for
the first responder.

00:32:25.596 --> 00:32:28.156 A:middle
And so if you hook up
an action from a control

00:32:28.156 --> 00:32:31.046 A:middle
to that proxy it will
automatically be sent

00:32:31.046 --> 00:32:33.286 A:middle
up the responder chain when
the control is invoked.

00:32:34.486 --> 00:32:36.486 A:middle
But what if there's no
object in the responder chain

00:32:36.486 --> 00:32:37.306 A:middle
that handles your method?

00:32:38.316 --> 00:32:40.436 A:middle
Or what if in the case of zoom

00:32:40.436 --> 00:32:43.216 A:middle
in it's not always
appropriate to send that action?

00:32:43.666 --> 00:32:46.086 A:middle
For example, we might be
at our maximum zoom level,

00:32:46.086 --> 00:32:49.006 A:middle
and so we don't want our zoom
in button to just do nothing.

00:32:49.406 --> 00:32:51.796 A:middle
We should be able to look
before we leap with our action.

00:32:51.796 --> 00:32:54.196 A:middle
And that's what UI
validation is for.

00:32:55.056 --> 00:32:57.466 A:middle
So let's take a look
at a block of code

00:32:57.466 --> 00:33:00.756 A:middle
that would inspect UI
validation to determine

00:32:57.466 --> 00:33:00.756 A:middle
that would inspect UI
validation to determine

00:33:00.756 --> 00:33:01.976 A:middle
if a control is actionable.

00:33:01.976 --> 00:33:05.226 A:middle
The first thing that we're
going to do is ask NSApp

00:33:05.536 --> 00:33:08.476 A:middle
for the target for an
action from a control.

00:33:09.376 --> 00:33:11.106 A:middle
And what that does is it
automatically walks the

00:33:11.106 --> 00:33:13.326 A:middle
responder chain and
finds some object

00:33:13.326 --> 00:33:14.956 A:middle
that implements that action.

00:33:15.356 --> 00:33:16.966 A:middle
Or it might not find any action,

00:33:17.006 --> 00:33:18.546 A:middle
or it might not find
any object at all.

00:33:20.596 --> 00:33:21.856 A:middle
The first case we want to look

00:33:21.856 --> 00:33:24.236 A:middle
at for the results
there is any object

00:33:24.236 --> 00:33:26.196 A:middle
that implements the
NSUserInterface

00:33:26.196 --> 00:33:27.366 A:middle
validations protocol.

00:33:27.516 --> 00:33:30.146 A:middle
And this just means you
can ask me proactively

00:33:30.416 --> 00:33:31.476 A:middle
if a control is valid.

00:33:31.996 --> 00:33:33.946 A:middle
And so if you're on the
other side of this equation

00:33:33.986 --> 00:33:37.556 A:middle
and you have a control that
is conditionally valid you can

00:33:37.556 --> 00:33:38.466 A:middle
implement this method.

00:33:39.046 --> 00:33:40.736 A:middle
And controls like NSMenuItem

00:33:40.736 --> 00:33:42.626 A:middle
and toolbar item will
automatically validate

00:33:42.626 --> 00:33:43.396 A:middle
against that method.

00:33:43.806 --> 00:33:45.396 A:middle
So we can ask that method.

00:33:45.796 --> 00:33:48.736 A:middle
And then, of course, we also
have the cases of some object

00:33:48.736 --> 00:33:51.966 A:middle
that just handles the method
unconditionally or no object

00:33:51.966 --> 00:33:52.996 A:middle
at all which clearly means

00:33:52.996 --> 00:33:54.606 A:middle
that we're not prepared
to do that action.

00:33:55.256 --> 00:33:58.426 A:middle
And there's just some techniques
for deal with storyboards.

00:33:59.046 --> 00:34:02.076 A:middle
So now we've been talking
a lot about the kind

00:33:59.046 --> 00:34:02.076 A:middle
So now we've been talking
a lot about the kind

00:34:02.326 --> 00:34:05.676 A:middle
of design time facets
of building your app.

00:34:06.116 --> 00:34:07.986 A:middle
Let's look at some more
user facing features

00:34:07.986 --> 00:34:10.126 A:middle
that really help you make
the most out of our platform.

00:34:11.065 --> 00:34:13.585 A:middle
And the first of those
is user activities.

00:34:14.025 --> 00:34:18.496 A:middle
NSUserActivity is this
object that describes kind

00:34:18.496 --> 00:34:21.946 A:middle
of what your app is doing
right now, what is it viewing,

00:34:21.946 --> 00:34:23.686 A:middle
what is it editing, etcetera.

00:34:24.576 --> 00:34:27.396 A:middle
And this is the object
that's used by Handoff

00:34:27.396 --> 00:34:29.536 A:middle
to move those activities
between devices.

00:34:29.536 --> 00:34:32.386 A:middle
It kind of takes your whole
context and moves it between.

00:34:32.806 --> 00:34:37.656 A:middle
I won't have time to go into the
entire API in depth right now,

00:34:37.656 --> 00:34:38.985 A:middle
but I do want to
highlight how simple

00:34:38.985 --> 00:34:40.206 A:middle
of an object this really is.

00:34:41.346 --> 00:34:42.735 A:middle
You construct it
with an activityType,

00:34:43.246 --> 00:34:44.585 A:middle
and that is a unique identifier

00:34:44.585 --> 00:34:46.106 A:middle
that describes the
activity that you're doing.

00:34:46.846 --> 00:34:49.866 A:middle
And this is also a key that you
would put into your info plist

00:34:49.866 --> 00:34:51.775 A:middle
to declare I'm a
good app to pick

00:34:51.775 --> 00:34:53.576 A:middle
up this activity
on another device.

00:34:54.186 --> 00:34:57.486 A:middle
And then you just fill in
some basic configuration info

00:34:57.486 --> 00:35:01.436 A:middle
to describe your activity,
a nice user facing title

00:34:57.486 --> 00:35:01.436 A:middle
to describe your activity,
a nice user facing title

00:35:01.436 --> 00:35:02.636 A:middle
and also some user info.

00:35:03.046 --> 00:35:07.006 A:middle
Basically just the most basic
amount of data necessary

00:35:07.116 --> 00:35:09.656 A:middle
to jump back into that
task at a later time.

00:35:10.326 --> 00:35:11.906 A:middle
We want to keep this
dictionary small

00:35:11.906 --> 00:35:13.756 A:middle
because it's often
transmitted wirelessly,

00:35:13.756 --> 00:35:16.536 A:middle
and we definitely want our
handoff interaction to be fast.

00:35:17.876 --> 00:35:19.616 A:middle
We also get an opportunity
in the delegate

00:35:20.056 --> 00:35:22.676 A:middle
to add the absolute
latest information

00:35:22.676 --> 00:35:24.516 A:middle
about our context right before

00:35:24.516 --> 00:35:27.116 A:middle
or at some point before
we perform a handoff.

00:35:27.686 --> 00:35:30.566 A:middle
And this is called at some
point after you mark an activity

00:35:30.566 --> 00:35:31.656 A:middle
as needing to be saved.

00:35:31.656 --> 00:35:33.046 A:middle
And we'll call this
method for you

00:35:33.176 --> 00:35:34.696 A:middle
so you can fill in
that latest data.

00:35:35.076 --> 00:35:39.566 A:middle
Now, how do we decide
what activity is the

00:35:39.566 --> 00:35:40.326 A:middle
current activity?

00:35:40.326 --> 00:35:41.186 A:middle
Because, of course, we need

00:35:41.186 --> 00:35:44.556 A:middle
to certainly determine what
is being looked at right now.

00:35:45.026 --> 00:35:47.626 A:middle
Well, you can manually manage
that with the become current

00:35:47.626 --> 00:35:49.946 A:middle
and resign current
methods on NSUserActivity.

00:35:50.476 --> 00:35:52.156 A:middle
That means that you're
probably going to have

00:35:52.156 --> 00:35:54.726 A:middle
to follow your user around
your application figuring

00:35:54.726 --> 00:35:56.846 A:middle
out what they clicked
on and trying to figure

00:35:56.846 --> 00:35:57.586 A:middle
out what they're doing.

00:35:58.256 --> 00:36:01.226 A:middle
AppKit can make this a
lot easier by allowing you

00:35:58.256 --> 00:36:01.226 A:middle
AppKit can make this a
lot easier by allowing you

00:36:01.226 --> 00:36:03.756 A:middle
to attach activities
to the responder chain

00:36:03.756 --> 00:36:05.006 A:middle
for automatic management.

00:36:06.436 --> 00:36:08.776 A:middle
For an example of this let's say
we're building a calendar app

00:36:09.146 --> 00:36:11.166 A:middle
which looks a lot
like our calendar app.

00:36:11.786 --> 00:36:14.436 A:middle
And we have two activities
that we want to put

00:36:14.436 --> 00:36:15.356 A:middle
into our responder chain.

00:36:15.796 --> 00:36:18.706 A:middle
We've got a higher level
activity for the view

00:36:18.706 --> 00:36:20.626 A:middle
that we're looking at,
this whole, this day view

00:36:20.626 --> 00:36:22.986 A:middle
that we have here, and then
we have a much more specific

00:36:22.986 --> 00:36:24.816 A:middle
activity for the specific event

00:36:24.946 --> 00:36:27.796 A:middle
that we want to view
right there.

00:36:27.796 --> 00:36:31.856 A:middle
And by attaching these to the
responder chain when we click

00:36:31.856 --> 00:36:33.576 A:middle
that event and make it
their first responder

00:36:34.116 --> 00:36:36.196 A:middle
that activity becomes
the closest thing

00:36:36.196 --> 00:36:38.346 A:middle
in the responder chain
through the first responder.

00:36:38.346 --> 00:36:40.486 A:middle
And it becomes current
automatically.

00:36:42.116 --> 00:36:44.836 A:middle
Now, you may not have
considered Handoff

00:36:44.836 --> 00:36:47.716 A:middle
or the NSUserActivity
API before,

00:36:47.996 --> 00:36:50.206 A:middle
maybe you don't have
a companion iOS app

00:36:50.206 --> 00:36:51.176 A:middle
or you just haven't
really thought

00:36:51.176 --> 00:36:54.816 A:middle
that Handoff is especially
compelling for your application

00:36:54.816 --> 00:36:55.836 A:middle
and your specific needs.

00:36:56.206 --> 00:36:58.656 A:middle
But activities are
not just for Handoff.

00:36:59.316 --> 00:37:01.286 A:middle
New in Sierra we
have Siri on the Mac,

00:36:59.316 --> 00:37:01.286 A:middle
New in Sierra we
have Siri on the Mac,

00:37:01.636 --> 00:37:03.276 A:middle
and Siri uses the
current activity

00:37:03.276 --> 00:37:05.316 A:middle
to provide context to commands.

00:37:06.076 --> 00:37:08.686 A:middle
So, for example, if you
say remind me about this

00:37:08.766 --> 00:37:11.386 A:middle
at some date, Siri is
going to infer this

00:37:11.386 --> 00:37:12.636 A:middle
to mean your current activity.

00:37:12.636 --> 00:37:14.746 A:middle
And it will actually
even take that activity

00:37:14.746 --> 00:37:16.876 A:middle
and embed it inside
of your reminders

00:37:16.876 --> 00:37:18.696 A:middle
so that you can pick
it up in the future.

00:37:19.196 --> 00:37:21.496 A:middle
So we see activities as
a generalized mechanism

00:37:21.496 --> 00:37:23.036 A:middle
for describing this
kind of information.

00:37:23.266 --> 00:37:24.466 A:middle
It's not just for Handoff.

00:37:25.046 --> 00:37:27.026 A:middle
Now, for full information

00:37:27.026 --> 00:37:29.156 A:middle
about the Handoff API I
recommend checking out this talk

00:37:29.156 --> 00:37:33.676 A:middle
from 2014, Adopting
Handoff in OS X and iOS.

00:37:33.806 --> 00:37:35.816 A:middle
That covers a lot more
of the advanced topics

00:37:35.816 --> 00:37:38.456 A:middle
like continuation streams
which allow you to move a lot

00:37:38.456 --> 00:37:39.566 A:middle
of data between devices.

00:37:42.356 --> 00:37:44.346 A:middle
The next feature, resume,

00:37:44.496 --> 00:37:46.256 A:middle
which we sometimes
call state restoration.

00:37:46.906 --> 00:37:48.566 A:middle
It's one of the best
features on the Mac is

00:37:48.566 --> 00:37:50.046 A:middle
that when you quit
an application

00:37:50.046 --> 00:37:52.976 A:middle
and then relaunch it, it
comes back exactly the way you

00:37:52.976 --> 00:37:53.376 A:middle
left it.

00:37:53.426 --> 00:37:56.696 A:middle
In fact, that happens if
you crash an application

00:37:56.696 --> 00:37:57.746 A:middle
or even reboot your machine.

00:37:57.746 --> 00:37:59.926 A:middle
Everything just comes back
exactly the way that it was.

00:38:00.926 --> 00:38:06.766 A:middle
Now, clearly to accomplish
this effect we need to save all

00:38:06.766 --> 00:38:10.676 A:middle
of the UI state that builds up
over time and then restore it

00:38:10.676 --> 00:38:11.766 A:middle
when the app relaunches.

00:38:12.826 --> 00:38:14.986 A:middle
But clearly we don't want to
save that state in our model.

00:38:14.986 --> 00:38:17.036 A:middle
It doesn't really belong there.

00:38:17.566 --> 00:38:21.346 A:middle
So a state restoration API gives
you a distinct place to save

00:38:21.346 --> 00:38:24.186 A:middle
that UI state separately,
and it gives you a good place

00:38:24.186 --> 00:38:26.386 A:middle
to restore that state
when you're launching

00:38:26.656 --> 00:38:28.686 A:middle
but before your UI
has gone up on screen.

00:38:29.776 --> 00:38:31.316 A:middle
You enable it on a
per window basis.

00:38:31.656 --> 00:38:32.326 A:middle
It's pretty simple.

00:38:32.326 --> 00:38:33.836 A:middle
You just say isRestorable
is true.

00:38:33.896 --> 00:38:36.706 A:middle
And then you may provide
a restoration class

00:38:37.046 --> 00:38:40.896 A:middle
that just handles the act
of creating your windows

00:38:41.146 --> 00:38:42.486 A:middle
from the encoded data.

00:38:42.926 --> 00:38:44.716 A:middle
And good news if
you're using NSDocument,

00:38:44.916 --> 00:38:46.586 A:middle
NSDocument handles
this all for you.

00:38:47.496 --> 00:38:49.616 A:middle
Now, what kind of state
might we want to restore?

00:38:50.586 --> 00:38:54.316 A:middle
Well, we might choose
to save the current tool

00:38:54.316 --> 00:38:55.536 A:middle
that we have active in our app.

00:38:56.446 --> 00:38:59.466 A:middle
We might also want to save
the state of the sidebar,

00:38:59.466 --> 00:39:01.956 A:middle
what's selected, what
our scroll offset is.

00:38:59.466 --> 00:39:01.956 A:middle
what's selected, what
our scroll offset is.

00:39:03.106 --> 00:39:03.956 A:middle
How do we do that?

00:39:04.976 --> 00:39:07.776 A:middle
Well, if you've used
NSCoding before it's really,

00:39:07.776 --> 00:39:08.366 A:middle
really simple.

00:39:09.506 --> 00:39:12.676 A:middle
The first method
encodeRestorableState

00:39:12.806 --> 00:39:13.376 A:middle
with coder.

00:39:14.216 --> 00:39:16.066 A:middle
You implement this on
any NSResponder method,

00:39:16.066 --> 00:39:18.206 A:middle
and then it's just
like using NSCoding

00:39:18.206 --> 00:39:19.726 A:middle
but for your controllers
effectively.

00:39:20.186 --> 00:39:25.566 A:middle
Another important call is
invalidateRestorableState.

00:39:25.566 --> 00:39:29.206 A:middle
And this just says
whatever my backing data is

00:39:29.446 --> 00:39:32.396 A:middle
for encodeFestorableState
has changed in some way.

00:39:33.046 --> 00:39:34.646 A:middle
And we'll schedule to
make sure that we save

00:39:34.646 --> 00:39:36.526 A:middle
that state again
sometime in the future.

00:39:37.066 --> 00:39:40.316 A:middle
And then finally
restoring is just as easy.

00:39:40.346 --> 00:39:42.036 A:middle
It's exactly like you'd expect.

00:39:42.036 --> 00:39:43.186 A:middle
It's a lot like a
init with coder.

00:39:43.896 --> 00:39:47.276 A:middle
All you have to do is call
super, decode all the saved data

00:39:47.276 --> 00:39:50.246 A:middle
that you've encoded before,
and then set up your UI based

00:39:50.246 --> 00:39:51.776 A:middle
on that information
that you've encoded.

00:39:52.486 --> 00:39:55.376 A:middle
Now, that's pretty easy,

00:39:55.376 --> 00:39:57.326 A:middle
but we can actually
make it even easier.

00:39:57.996 --> 00:40:00.086 A:middle
All you have to do is
implement a class method

00:39:57.996 --> 00:40:00.086 A:middle
All you have to do is
implement a class method

00:40:00.086 --> 00:40:01.726 A:middle
restorableState KeyPaths.

00:40:02.226 --> 00:40:03.496 A:middle
Of course, we're
going to ask super

00:40:03.496 --> 00:40:04.696 A:middle
because that's the
polite thing to do,

00:40:04.696 --> 00:40:06.986 A:middle
but then we also append
our own key paths.

00:40:07.426 --> 00:40:08.796 A:middle
And these are the
properties that you want

00:40:08.796 --> 00:40:11.186 A:middle
to have automatically
restored or saved

00:40:11.186 --> 00:40:13.306 A:middle
and restored by the system.

00:40:13.706 --> 00:40:15.416 A:middle
These properties need to be KVC,

00:40:15.416 --> 00:40:16.906 A:middle
that's key value
coding accessible

00:40:16.906 --> 00:40:19.186 A:middle
because we access them by
key path, and they also need

00:40:19.186 --> 00:40:22.576 A:middle
to be observable so that we
can observe them and invalidate

00:40:22.576 --> 00:40:23.656 A:middle
or state when they change.

00:40:25.036 --> 00:40:26.776 A:middle
And that's state restoration.

00:40:27.276 --> 00:40:29.856 A:middle
The third and final technology
we want to talk about,

00:40:29.926 --> 00:40:30.966 A:middle
documents in the cloud.

00:40:32.186 --> 00:40:35.196 A:middle
So once upon a time
to opt into documents

00:40:35.196 --> 00:40:37.596 A:middle
in the cloud you actually
had to proactively opt in

00:40:37.596 --> 00:40:38.486 A:middle
and create a container.

00:40:39.096 --> 00:40:40.406 A:middle
But these days with iCloud Drive

00:40:40.406 --> 00:40:42.316 A:middle
and now especially
now iCloud Desktop

00:40:42.316 --> 00:40:45.086 A:middle
and Documents it's
more likely than ever

00:40:45.086 --> 00:40:47.636 A:middle
that your app is working with
documents that live in iCloud.

00:40:48.416 --> 00:40:51.756 A:middle
Now, this is important because
new in 10.12 local copies

00:40:51.756 --> 00:40:54.346 A:middle
of documents might be
evicted to free up space.

00:40:54.536 --> 00:40:56.516 A:middle
And this means that you might
be working with documents

00:40:56.876 --> 00:40:59.496 A:middle
that aren't actually
on the local hard disk.

00:41:00.676 --> 00:41:01.826 A:middle
So how do we handle this?

00:41:01.826 --> 00:41:02.826 A:middle
That seems pretty scary.

00:41:03.706 --> 00:41:06.986 A:middle
Luckily, first off if you're
using NSDocument it handles

00:41:06.986 --> 00:41:08.886 A:middle
everything for you so
you're in great shape.

00:41:09.726 --> 00:41:10.846 A:middle
But if not you need to make sure

00:41:10.846 --> 00:41:12.466 A:middle
that you're using
file coordination.

00:41:13.176 --> 00:41:15.706 A:middle
If you register yourself
as a file presenter

00:41:15.776 --> 00:41:18.016 A:middle
with the file coordination
API we will make sure

00:41:18.016 --> 00:41:20.456 A:middle
that your document is not
evicted out from under you

00:41:20.916 --> 00:41:21.676 A:middle
which is a good thing.

00:41:22.406 --> 00:41:24.646 A:middle
And then next if you
use file coordination

00:41:24.716 --> 00:41:28.266 A:middle
to coordination your IO on
those files we'll make sure

00:41:28.266 --> 00:41:31.526 A:middle
that we schedule
your IO conveniently

00:41:31.666 --> 00:41:33.926 A:middle
after the entire file
has been downloaded.

00:41:34.756 --> 00:41:36.736 A:middle
And that's documents
in the cloud.

00:41:37.596 --> 00:41:39.186 A:middle
Now, there are a
couple of technologies

00:41:39.186 --> 00:41:40.976 A:middle
that we didn't have time
to talk about but I do want

00:41:40.976 --> 00:41:42.286 A:middle
to give an honorable mention to.

00:41:42.626 --> 00:41:46.006 A:middle
The first is asset
catalogs, faster and smaller

00:41:46.006 --> 00:41:47.576 A:middle
than having loose
assets in your bundle.

00:41:47.636 --> 00:41:48.986 A:middle
And they can also
help you with things

00:41:48.986 --> 00:41:50.716 A:middle
like wide gamut and
right to left.

00:41:51.756 --> 00:41:54.206 A:middle
Accessibility, extremely
important.

00:41:54.566 --> 00:41:57.306 A:middle
Cocoa puts really powerful
accessibility technologies

00:41:57.346 --> 00:41:59.106 A:middle
within an arm's reach
of your application.

00:41:59.666 --> 00:42:01.736 A:middle
And it's extremely
important that you make sure

00:41:59.666 --> 00:42:01.736 A:middle
And it's extremely
important that you make sure

00:42:01.736 --> 00:42:04.486 A:middle
that you learn to use voice
over, learn to use all

00:42:04.486 --> 00:42:06.106 A:middle
of these accessible
technologies and make sure

00:42:06.106 --> 00:42:07.356 A:middle
that your app is
doing the right thing.

00:42:07.856 --> 00:42:11.166 A:middle
You would never ship an app with
a visibly broken user interface,

00:42:11.246 --> 00:42:14.176 A:middle
so don't ship an app that
has a UI that's broken

00:42:14.176 --> 00:42:15.016 A:middle
to accessibility.

00:42:16.766 --> 00:42:20.976 A:middle
Sandboxing and also XPC
services, two different

00:42:20.976 --> 00:42:22.426 A:middle
but somewhat related
technologies

00:42:22.756 --> 00:42:25.486 A:middle
in that they help you isolate
code from the rest of the system

00:42:25.486 --> 00:42:26.626 A:middle
and from other processes.

00:42:27.106 --> 00:42:29.896 A:middle
Sandboxing is, of course,
mandatory for the Mac App Store,

00:42:29.896 --> 00:42:31.486 A:middle
but it's appropriate
for every app really.

00:42:32.076 --> 00:42:35.376 A:middle
And XPC services can help
you separate out code

00:42:35.556 --> 00:42:36.986 A:middle
into separate processes.

00:42:38.216 --> 00:42:40.606 A:middle
This is really great
for things like, say,

00:42:40.996 --> 00:42:43.526 A:middle
code that's handling
untrusted data off the network

00:42:43.526 --> 00:42:45.406 A:middle
or doing some kind
of parsing work.

00:42:45.626 --> 00:42:48.946 A:middle
We all like to think that our
code is perfect but, you know,

00:42:49.446 --> 00:42:52.496 A:middle
we also wear seatbelts in our
cars, and we're very happy

00:42:52.496 --> 00:42:56.736 A:middle
that it's there if
something goes wrong.

00:42:56.946 --> 00:43:00.056 A:middle
So we have covered an
absolute ton of content

00:42:56.946 --> 00:43:00.056 A:middle
So we have covered an
absolute ton of content

00:43:00.056 --> 00:43:01.276 A:middle
in a very short amount of time.

00:43:01.276 --> 00:43:03.146 A:middle
So I want to rewind
and recap and make sure

00:43:03.146 --> 00:43:06.266 A:middle
that we all remember what
we just talked about.

00:43:06.426 --> 00:43:09.556 A:middle
And we started off by looking
at creating a modern look

00:43:10.306 --> 00:43:13.066 A:middle
with our modern view and window
pipeline making sure you get

00:43:13.066 --> 00:43:14.476 A:middle
great animation performance.

00:43:15.116 --> 00:43:17.716 A:middle
Then we talked about drag
and drop and event tracking,

00:43:17.816 --> 00:43:20.436 A:middle
making sure that you get the
really cool drag flocking

00:43:20.436 --> 00:43:22.506 A:middle
effect, modern drag
file promises.

00:43:23.456 --> 00:43:26.096 A:middle
Then we covered container views
likes scroll view and table view

00:43:26.416 --> 00:43:28.176 A:middle
and making sure that we
localize them correctly.

00:43:29.656 --> 00:43:32.686 A:middle
Then we walked into system
appearances, storyboards

00:43:33.086 --> 00:43:35.126 A:middle
and also a couple of
modern Mac features

00:43:35.126 --> 00:43:36.936 A:middle
that really make
the platform shine

00:43:36.936 --> 00:43:38.626 A:middle
and really take advantage of it.

00:43:39.296 --> 00:43:40.436 A:middle
Here's the permalink
for our talk.

00:43:40.826 --> 00:43:44.216 A:middle
You should find related
resources there including the

00:43:44.216 --> 00:43:46.096 A:middle
download for our demo
application as soon

00:43:46.096 --> 00:43:47.156 A:middle
as it becomes available.

00:43:47.386 --> 00:43:50.196 A:middle
All of our related
sessions are in the past.

00:43:50.196 --> 00:43:51.486 A:middle
I hope you were able
to attend them.

00:43:51.486 --> 00:43:53.076 A:middle
If not, then you
should definitely check

00:43:53.076 --> 00:43:54.386 A:middle
out the videos online.

00:43:55.296 --> 00:43:56.296 A:middle
And that's a wrap.

00:43:56.296 --> 00:43:56.976 A:middle
Thank you for attending.

00:43:57.516 --> 00:44:01.500 A:middle
[ Applause ]
