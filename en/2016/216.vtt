WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:26.516 --> 00:00:29.576 A:middle
[ Applause ]

00:00:30.076 --> 00:00:30.686 A:middle
&gt;&gt; Good afternoon.

00:00:32.375 --> 00:00:33.746 A:middle
My name is Bruce Nilo.

00:00:33.836 --> 00:00:36.456 A:middle
I'm an Engineering
Manager for UIKit.

00:00:36.856 --> 00:00:41.566 A:middle
And today, my coworker, Mike
Turner, and I are really excited

00:00:41.916 --> 00:00:44.706 A:middle
to talk to you about
some new animation APIs

00:00:44.706 --> 00:00:47.836 A:middle
that we're introducing
to UIKit in iOS 10.

00:00:48.526 --> 00:00:51.806 A:middle
These APIs we're confident are
going to make it even easier

00:00:51.806 --> 00:00:54.876 A:middle
for you to create natural,
and smooth-feeling,

00:00:54.946 --> 00:01:00.046 A:middle
and responsive applications.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:54.946 --> 00:01:00.046 A:middle
and responsive applications.

00:01:01.026 --> 00:01:04.596 A:middle
So we're going to begin our talk
today with a quick refresher

00:01:05.046 --> 00:01:08.366 A:middle
of the existing implicit
animation APIs

00:01:08.646 --> 00:01:09.836 A:middle
that exist in UIKit.

00:01:10.596 --> 00:01:13.006 A:middle
We're then going to dive
into a brand new class

00:01:13.006 --> 00:01:16.256 A:middle
that we are introducing
called UIViewPropertyAnimator.

00:01:17.526 --> 00:01:19.986 A:middle
We're going to talk about
some extensions we've made

00:01:19.986 --> 00:01:21.776 A:middle
to view controller transitioning

00:01:22.046 --> 00:01:24.886 A:middle
so that you can take
advantage of this new class.

00:01:24.886 --> 00:01:29.476 A:middle
Mike is going to come
up and give a great demo

00:01:29.476 --> 00:01:30.906 A:middle
that uses these new APIs

00:01:30.906 --> 00:01:34.446 A:middle
and a brand new sample Photos
application that you'll be able

00:01:34.446 --> 00:01:35.926 A:middle
to download in the near future.

00:01:37.016 --> 00:01:40.226 A:middle
We're then going to talk about
a few subtle issues related

00:01:40.226 --> 00:01:43.346 A:middle
to touch processing and hit
testing for this new class

00:01:44.046 --> 00:01:45.916 A:middle
and how you can use
this new class

00:01:45.916 --> 00:01:49.266 A:middle
to create even interruptible
keyframe animations.

00:01:51.166 --> 00:01:58.096 A:middle
So, implicit property animations
in UIKit basically are there

00:01:58.476 --> 00:02:02.736 A:middle
to -- well, they exist
in a way that allows you


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.476 --> 00:02:02.736 A:middle
to -- well, they exist
in a way that allows you

00:02:02.736 --> 00:02:04.786 A:middle
to create a dynamic context

00:02:04.786 --> 00:02:08.306 A:middle
by which you can update
the properties of a view

00:02:08.306 --> 00:02:10.175 A:middle
that can be animated over time.

00:02:13.066 --> 00:02:17.766 A:middle
It's an implicit API because
UIKit creates the animation

00:02:17.766 --> 00:02:18.826 A:middle
on your behalf.

00:02:18.826 --> 00:02:23.066 A:middle
It notes when the value changes
and uses the original value

00:02:23.066 --> 00:02:28.186 A:middle
and the end value to interpolate
the value over time based

00:02:28.186 --> 00:02:32.156 A:middle
on the duration that you specify
with an optional timing function

00:02:32.156 --> 00:02:34.806 A:middle
that specifies the
pacing of the animation.

00:02:36.396 --> 00:02:38.006 A:middle
So let's make this
a little concrete.

00:02:38.696 --> 00:02:41.126 A:middle
Here's a very simplified
animation.

00:02:41.326 --> 00:02:45.056 A:middle
We're going to use this
throughout the presentation.

00:02:45.056 --> 00:02:46.836 A:middle
We have a circle
that's basically going

00:02:46.836 --> 00:02:48.036 A:middle
from the left to the right.

00:02:48.886 --> 00:02:51.686 A:middle
It's the center property of
that view that's animating.

00:02:51.686 --> 00:02:55.806 A:middle
And when in this graph
we see a dotted circle

00:02:55.806 --> 00:02:57.916 A:middle
or a dotted square, it
means that's the value

00:02:57.916 --> 00:02:59.876 A:middle
that you're actually
seeing animate.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.316 --> 00:03:03.466 A:middle
Whereas the solid shape is going
to indicate the target value.

00:03:03.466 --> 00:03:05.436 A:middle
And we sometimes call
that the model value

00:03:05.436 --> 00:03:06.896 A:middle
versus the presentation value.

00:03:07.476 --> 00:03:12.696 A:middle
So we start the animation,
and it proceeds a pace.

00:03:12.696 --> 00:03:15.746 A:middle
In fact, you'll notice that
the pacing was uniform.

00:03:16.716 --> 00:03:18.536 A:middle
And the question is -
how do we do that today?

00:03:19.186 --> 00:03:20.366 A:middle
Well, today it's really easy.

00:03:21.556 --> 00:03:22.886 A:middle
Most of you are probably
familiar

00:03:22.886 --> 00:03:24.896 A:middle
with the animateWithDuration
API.

00:03:24.896 --> 00:03:30.256 A:middle
And in this case, we're
specifying that the x coordinate

00:03:30.256 --> 00:03:33.176 A:middle
of the center of that circle
should move from 0 to 100.

00:03:33.726 --> 00:03:39.466 A:middle
Now the timing function that
was specified there was .linear,

00:03:39.706 --> 00:03:41.956 A:middle
which basically means it
was the identity function.

00:03:42.156 --> 00:03:45.386 A:middle
Now a quick review of what a
timing function is in UIKit.

00:03:45.836 --> 00:03:52.236 A:middle
It's basically a cubic function
that maps "0 to 1" to "0 to 1"

00:03:52.426 --> 00:03:54.056 A:middle
with a couple of constraints.

00:03:54.056 --> 00:03:56.306 A:middle
Namely, that at the
start of the animation --

00:03:56.306 --> 00:03:58.586 A:middle
meaning when you just started --

00:03:58.856 --> 00:04:01.346 A:middle
the progress of the value
that you're animating is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.856 --> 00:04:01.346 A:middle
the progress of the value
that you're animating is

00:04:01.346 --> 00:04:03.366 A:middle
in fact the start value.

00:04:03.886 --> 00:04:05.476 A:middle
And at the end, it's
the end value.

00:04:06.326 --> 00:04:12.186 A:middle
Now timing functions that
are not identity pace

00:04:12.186 --> 00:04:13.006 A:middle
your animation.

00:04:13.376 --> 00:04:15.516 A:middle
And it's really easy to see this

00:04:15.516 --> 00:04:19.136 A:middle
with this exaggerated
ease-in timing function.

00:04:19.755 --> 00:04:22.806 A:middle
You'll notice that, halfway
through the animation,

00:04:23.326 --> 00:04:25.636 A:middle
the progress has barely moved.

00:04:26.086 --> 00:04:28.716 A:middle
It's really chugging
along pretty slowly.

00:04:29.496 --> 00:04:32.396 A:middle
We're almost 90%
of the way done.

00:04:32.836 --> 00:04:34.376 A:middle
We're still only halfway there.

00:04:34.996 --> 00:04:37.966 A:middle
It's in the last 10% of
the time that you specified

00:04:37.966 --> 00:04:39.776 A:middle
that we're going to make up
the rest of the distance.

00:04:39.826 --> 00:04:41.756 A:middle
Basically, this thing
is accelerating

00:04:41.976 --> 00:04:46.776 A:middle
from a very slow pace to a
high pace towards the end.

00:04:47.156 --> 00:04:48.846 A:middle
So that's what timing
functions give you.

00:04:50.556 --> 00:04:55.386 A:middle
UIKit currently really only
gives you four timing functions.

00:04:55.696 --> 00:04:58.596 A:middle
These are specific instances
of cubic BÃ©zier functions.

00:04:58.596 --> 00:05:00.766 A:middle
There's the identity
function we saw before.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.596 --> 00:05:00.766 A:middle
There's the identity
function we saw before.

00:05:01.076 --> 00:05:02.406 A:middle
There's .easeInOut.

00:05:03.876 --> 00:05:06.806 A:middle
There is .easeIn.

00:05:08.366 --> 00:05:11.636 A:middle
And finally, there's .easeOut.

00:05:11.636 --> 00:05:15.416 A:middle
And these are very subtle
functions that we give you

00:05:15.416 --> 00:05:19.046 A:middle
to kind of affect the
feel of your animations.

00:05:21.586 --> 00:05:23.426 A:middle
Now what about springs?

00:05:24.156 --> 00:05:25.966 A:middle
We also have an implicit
animation API

00:05:25.966 --> 00:05:27.996 A:middle
where you can specify a spring.

00:05:28.606 --> 00:05:31.096 A:middle
And you wouldn't be
wrong if you said, "Well,

00:05:31.096 --> 00:05:32.566 A:middle
that's not really interpolating.

00:05:32.566 --> 00:05:34.856 A:middle
We're kind of overshooting
the value

00:05:34.856 --> 00:05:36.186 A:middle
and kind of bouncing back."

00:05:37.076 --> 00:05:40.526 A:middle
However, in what follows,
I'm going to encourage us all

00:05:40.526 --> 00:05:43.876 A:middle
to think about the spring as
another type of timing function.

00:05:44.486 --> 00:05:46.106 A:middle
And let's see why
we can do that.

00:05:46.656 --> 00:05:48.986 A:middle
Let's look at this
simple application

00:05:48.986 --> 00:05:53.966 A:middle
where we're animating a
square from left to right.

00:05:54.466 --> 00:06:00.046 A:middle
And we're graphing effectively
the position of the square


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:54.466 --> 00:06:00.046 A:middle
And we're graphing effectively
the position of the square

00:06:00.046 --> 00:06:01.666 A:middle
as it proceeds over time.

00:06:01.666 --> 00:06:03.466 A:middle
And it kind of looks
like a timing function.

00:06:03.916 --> 00:06:05.376 A:middle
The thing is it's not a cubic.

00:06:05.726 --> 00:06:09.876 A:middle
It overshoots its values,
but we can still think of it

00:06:09.876 --> 00:06:12.406 A:middle
as affecting the
pacing of the animation.

00:06:12.626 --> 00:06:15.036 A:middle
And in the APIs that follow,
that's how we are going

00:06:15.036 --> 00:06:16.866 A:middle
to classify spring animations.

00:06:18.146 --> 00:06:20.916 A:middle
Now there is another
important edition that was made

00:06:20.916 --> 00:06:22.796 A:middle
to animations in iOS 8.

00:06:23.296 --> 00:06:25.636 A:middle
And I want to talk to you about
them because we're going to look

00:06:25.636 --> 00:06:27.006 A:middle
at them again a little
bit later.

00:06:28.556 --> 00:06:32.486 A:middle
Basically, consider an
animation that changes

00:06:32.746 --> 00:06:34.356 A:middle
in the midst of the animation.

00:06:34.356 --> 00:06:36.166 A:middle
So you're going from one
position to the other.

00:06:36.166 --> 00:06:37.726 A:middle
And halfway through,
you change it.

00:06:38.026 --> 00:06:40.886 A:middle
Now prior to iOS
8, if you did that,

00:06:40.886 --> 00:06:42.896 A:middle
there would be a discontinuity

00:06:43.116 --> 00:06:46.666 A:middle
in the animation unless you
specified a special option --

00:06:46.756 --> 00:06:49.416 A:middle
UIViewAnimationOption

00:06:49.416 --> 00:06:50.546 A:middle
BeginFromCurrentState.

00:06:51.306 --> 00:06:53.946 A:middle
And if you did that, it would
look a little bit better.

00:06:54.766 --> 00:06:56.676 A:middle
There wouldn't be a
discontinuity or a jump,

00:06:57.016 --> 00:06:58.546 A:middle
but it wouldn't be
smooth either.

00:06:58.546 --> 00:07:01.056 A:middle
The velocity changes
rather abruptly.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.546 --> 00:07:01.056 A:middle
The velocity changes
rather abruptly.

00:07:02.056 --> 00:07:07.536 A:middle
In iOS 8, we made a significant
change where animations

00:07:07.956 --> 00:07:10.546 A:middle
for certain properties
were done additively.

00:07:10.546 --> 00:07:13.766 A:middle
We didn't remove the previous
animation, we added to it.

00:07:13.766 --> 00:07:16.386 A:middle
And then that smoothed out
the change in velocity.

00:07:17.596 --> 00:07:19.526 A:middle
With the new
UIViewPropertyAnimator,

00:07:19.526 --> 00:07:22.806 A:middle
it's going to be impossible to
get into the first situation.

00:07:25.436 --> 00:07:27.706 A:middle
OK, let's get to
the new class now

00:07:27.706 --> 00:07:29.986 A:middle
that we have done
the quick refresh.

00:07:31.776 --> 00:07:32.796 A:middle
Some of its features.

00:07:32.846 --> 00:07:33.786 A:middle
It's really familiar.

00:07:34.136 --> 00:07:37.316 A:middle
If you're familiar with the
existing animateWithDuration

00:07:37.316 --> 00:07:41.626 A:middle
suite of APIs, you'll be right
at home with this new API.

00:07:42.166 --> 00:07:43.586 A:middle
It's interruptible.

00:07:43.586 --> 00:07:46.196 A:middle
That means you can pause
and stop the animations.

00:07:46.906 --> 00:07:50.656 A:middle
You can scrub them, meaning you
can move forward-to-back as you

00:07:50.656 --> 00:07:53.376 A:middle
like based on a programmatic
API.

00:07:54.426 --> 00:07:55.326 A:middle
You can reverse them.

00:07:55.376 --> 00:07:56.936 A:middle
You can say, "Never mind.

00:07:56.936 --> 00:07:57.786 A:middle
Go backwards."

00:07:58.496 --> 00:08:00.596 A:middle
We're going to introduce
a whole new plethora


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.496 --> 00:08:00.596 A:middle
We're going to introduce
a whole new plethora

00:08:00.596 --> 00:08:03.856 A:middle
of timing functions, not just
the four that we had before

00:08:03.856 --> 00:08:08.766 A:middle
with one kind of small
subset of spring animations.

00:08:09.826 --> 00:08:11.466 A:middle
And finally, when the
animations are running,

00:08:11.466 --> 00:08:15.166 A:middle
it'll be really easy to add
to the running animations.

00:08:16.866 --> 00:08:21.906 A:middle
So it's kind of hard to talk
about API, and I don't want

00:08:21.906 --> 00:08:24.986 A:middle
to do it by going into
kind of a header crawl.

00:08:25.276 --> 00:08:28.116 A:middle
So let's get an overview of
what this API looks like.

00:08:28.436 --> 00:08:30.386 A:middle
At the center of it all
is this new class --

00:08:30.386 --> 00:08:31.796 A:middle
UIViewPropertyAnimator.

00:08:32.706 --> 00:08:36.426 A:middle
It's implemented in terms
of two new protocols.

00:08:36.666 --> 00:08:41.076 A:middle
And the reason for implementing
them as protocols or conforming

00:08:41.076 --> 00:08:43.966 A:middle
to two new protocols we'll
see is really powerful

00:08:43.966 --> 00:08:46.286 A:middle
when we couple it with view
controller transitions.

00:08:47.116 --> 00:08:49.946 A:middle
When you create a property
animator, you're going

00:08:49.946 --> 00:08:51.716 A:middle
to create a new type of object

00:08:51.716 --> 00:08:54.886 A:middle
which is effectively
specifying the timing function

00:08:54.886 --> 00:08:57.416 A:middle
that you want that
animation to use.

00:08:57.506 --> 00:09:00.176 A:middle
We provide two new
concrete classes for these.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:57.506 --> 00:09:00.176 A:middle
We provide two new
concrete classes for these.

00:09:01.206 --> 00:09:04.556 A:middle
We've introduced a couple of
new enumerations that are used

00:09:04.896 --> 00:09:07.766 A:middle
by the methods defined
in these protocols.

00:09:07.766 --> 00:09:08.876 A:middle
For example, the state

00:09:08.986 --> 00:09:12.846 A:middle
of an animator can be
inactive, active, or stopped.

00:09:13.266 --> 00:09:15.726 A:middle
And we're going to be talking
about that momentarily.

00:09:16.656 --> 00:09:19.966 A:middle
We also introduced a
position, which basically is

00:09:20.296 --> 00:09:21.956 A:middle
where did the animation finish.

00:09:21.956 --> 00:09:24.876 A:middle
Did it go all the way to the
target values that we specified?

00:09:24.876 --> 00:09:26.936 A:middle
Did we reverse it and go
back to the beginning?

00:09:26.936 --> 00:09:31.006 A:middle
Or maybe we interrupted it
and we're somewhere else.

00:09:31.996 --> 00:09:36.036 A:middle
OK. We're going to
start focusing

00:09:36.036 --> 00:09:37.856 A:middle
on the center part
of this graph.

00:09:38.836 --> 00:09:39.986 A:middle
We're then going to
talk a little bit

00:09:39.986 --> 00:09:41.906 A:middle
about all these new
timing functions.

00:09:43.676 --> 00:09:47.516 A:middle
So let's look at kind of
the corner piece of the API

00:09:47.756 --> 00:09:50.776 A:middle
which is defined by the
UIViewAnimating protocol.

00:09:50.776 --> 00:09:51.886 A:middle
This is where all the fun is.

00:09:52.146 --> 00:09:53.536 A:middle
It's really simple actually.

00:09:53.536 --> 00:09:56.616 A:middle
There's a couple of properties
that you can observe and set.

00:09:57.136 --> 00:09:59.636 A:middle
For example, you can set
the fractionComplete.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.046 --> 00:10:01.536 A:middle
You can tell an animation
to start.

00:10:01.536 --> 00:10:03.336 A:middle
You can pause it,
stop it, finish it.

00:10:03.386 --> 00:10:04.846 A:middle
It's kind of self-explanatory.

00:10:06.316 --> 00:10:09.766 A:middle
The next protocol adds the
implicit characteristics

00:10:09.766 --> 00:10:10.786 A:middle
to this animator.

00:10:10.786 --> 00:10:14.456 A:middle
It's where you add blocks
where you set the target values

00:10:14.456 --> 00:10:16.896 A:middle
of the properties that
you wish to animate.

00:10:17.276 --> 00:10:21.736 A:middle
There's also an interesting
method called continueAnimation

00:10:21.736 --> 00:10:24.926 A:middle
which allows you to proceed
from a paused animation

00:10:25.246 --> 00:10:28.306 A:middle
with a completely
different finish duration,

00:10:28.586 --> 00:10:33.016 A:middle
and possibly even a
different timing function.

00:10:33.876 --> 00:10:37.316 A:middle
UIViewPropertyAnimator has
a couple of constructers.

00:10:37.386 --> 00:10:40.386 A:middle
It also has some properties
that control the touch handling

00:10:40.386 --> 00:10:42.566 A:middle
that we're going to get into
at the end of this talk.

00:10:44.486 --> 00:10:48.956 A:middle
So we're going to talk first
about how to use this -- basics.

00:10:49.256 --> 00:10:51.576 A:middle
We're going to talk about some
details that perhaps are not

00:10:51.576 --> 00:10:53.946 A:middle
so obvious that you might
encounter when you pause

00:10:53.946 --> 00:10:55.546 A:middle
and scrub an animation.

00:10:56.456 --> 00:10:58.716 A:middle
There's also some interesting
possibilities in terms

00:10:58.716 --> 00:11:00.416 A:middle
of how you can reverse
an animation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.716 --> 00:11:00.416 A:middle
of how you can reverse
an animation.

00:11:02.066 --> 00:11:03.086 A:middle
Finally, we're going

00:11:03.086 --> 00:11:06.086 A:middle
to introduce all the
timing providers.

00:11:07.096 --> 00:11:09.306 A:middle
So let's start a
really simple animation.

00:11:10.506 --> 00:11:12.406 A:middle
And I've made this one a
little bit more interesting

00:11:12.406 --> 00:11:15.576 A:middle
for pedagogical reasons
that you'll see soon.

00:11:16.276 --> 00:11:17.936 A:middle
And let's ask the question,

00:11:18.936 --> 00:11:21.456 A:middle
"How would you use the
property animator to do this?"

00:11:21.966 --> 00:11:23.356 A:middle
And it's really, really easy.

00:11:23.726 --> 00:11:26.046 A:middle
The first thing you do is
you create a timing object.

00:11:26.396 --> 00:11:31.596 A:middle
This is just like the .easeInOut
enumerations you've used

00:11:31.596 --> 00:11:32.526 A:middle
in the existing API.

00:11:33.296 --> 00:11:37.386 A:middle
You instantiate one of these
objects by specifying a duration

00:11:37.956 --> 00:11:39.246 A:middle
and the timing object.

00:11:40.476 --> 00:11:43.396 A:middle
You add animations
in terms of closures,

00:11:43.396 --> 00:11:46.216 A:middle
which are updating properties
that you want to animate.

00:11:46.816 --> 00:11:48.576 A:middle
You can add an optional
completion.

00:11:48.956 --> 00:11:52.156 A:middle
In this case, that completion
is changing the color back

00:11:52.156 --> 00:11:52.836 A:middle
to orange.

00:11:53.116 --> 00:11:55.276 A:middle
And then you can start
it whenever you want to.

00:11:56.586 --> 00:12:00.006 A:middle
OK, it's kind of verbose
compared to the old API,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:56.586 --> 00:12:00.006 A:middle
OK, it's kind of verbose
compared to the old API,

00:12:00.006 --> 00:12:02.986 A:middle
but now you have an
object and there's all kind

00:12:02.986 --> 00:12:04.116 A:middle
of things you can do with it.

00:12:04.116 --> 00:12:06.076 A:middle
It makes a world of difference.

00:12:07.396 --> 00:12:12.226 A:middle
So let's look at some of the
properties that are available

00:12:12.226 --> 00:12:13.686 A:middle
in UIViewPropertyAnimator.

00:12:13.836 --> 00:12:15.416 A:middle
There's three that
are quite interesting.

00:12:15.416 --> 00:12:17.746 A:middle
There's the state, there's
whether it's running or not,

00:12:18.056 --> 00:12:21.116 A:middle
and whether it is running in the
forward or reverse direction.

00:12:21.526 --> 00:12:24.856 A:middle
These are observable properties
in the KVO sense of the word.

00:12:24.856 --> 00:12:28.096 A:middle
Now the first thing you do
is you add an animation.

00:12:28.216 --> 00:12:30.696 A:middle
We're going to animate the
circle again from left to right.

00:12:31.186 --> 00:12:34.876 A:middle
Once you do and you've
added an animation closure,

00:12:35.466 --> 00:12:37.046 A:middle
you can start the animation.

00:12:37.456 --> 00:12:38.846 A:middle
The second you start
the animation,

00:12:38.846 --> 00:12:40.906 A:middle
the state changes,
it starts running.

00:12:41.286 --> 00:12:45.016 A:middle
The values of the
actual views change now.

00:12:45.016 --> 00:12:46.466 A:middle
There is target value

00:12:46.466 --> 00:12:48.046 A:middle
and there's what you
see on the screen.

00:12:48.716 --> 00:12:50.726 A:middle
And then the animation starts.

00:12:50.726 --> 00:12:53.266 A:middle
Now what's different
now is I can pause

00:12:53.266 --> 00:12:55.076 A:middle
that animation halfway through.

00:12:55.386 --> 00:12:58.246 A:middle
And to do that, I just
tell the animator to pause.

00:12:59.446 --> 00:13:01.506 A:middle
I can tell it that I
want it to continue again


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.446 --> 00:13:01.506 A:middle
I can tell it that I
want it to continue again

00:13:01.506 --> 00:13:02.786 A:middle
in the opposite direction.

00:13:03.186 --> 00:13:04.916 A:middle
I'm still paused when
I do, and you'll notice

00:13:04.916 --> 00:13:06.076 A:middle
that the states change.

00:13:07.146 --> 00:13:09.286 A:middle
And then I can start
it, and it's going

00:13:09.286 --> 00:13:11.026 A:middle
to start going backwards.

00:13:11.726 --> 00:13:15.506 A:middle
And then I can change it again,
and it's going to go forwards.

00:13:16.236 --> 00:13:17.426 A:middle
And when it completes,

00:13:18.256 --> 00:13:20.146 A:middle
we're going to call
any completion handlers

00:13:20.146 --> 00:13:21.006 A:middle
that you've registered.

00:13:21.006 --> 00:13:24.376 A:middle
And in this time, we're
calling it with a .end position

00:13:24.376 --> 00:13:27.866 A:middle
because we made it all the
way to the initial target.

00:13:28.226 --> 00:13:30.476 A:middle
If we hadn't reversed it
again while it was running,

00:13:30.806 --> 00:13:33.166 A:middle
we would have called the
completion with a .start.

00:13:33.216 --> 00:13:34.966 A:middle
That way, your completion
handler knows

00:13:34.966 --> 00:13:37.576 A:middle
where the animation
actually ended.

00:13:38.096 --> 00:13:42.196 A:middle
OK. Instead of pausing
an animation,

00:13:42.196 --> 00:13:44.386 A:middle
there's something
really neat you can do.

00:13:44.696 --> 00:13:46.306 A:middle
You can stop the animation.

00:13:46.656 --> 00:13:47.326 A:middle
Now what does that mean?

00:13:48.016 --> 00:13:50.256 A:middle
Well, the first thing you'll
notice is that, all of a sudden,

00:13:50.396 --> 00:13:53.186 A:middle
that circle became
solid in the center.

00:13:53.656 --> 00:13:57.336 A:middle
We've effectively promoted what
you're seeing on the screen

00:13:57.376 --> 00:14:01.126 A:middle
to the actual model value that's
in the view that's animating.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:57.376 --> 00:14:01.126 A:middle
to the actual model value that's
in the view that's animating.

00:14:01.856 --> 00:14:03.466 A:middle
At that point, you can
do anything you want

00:14:03.466 --> 00:14:04.236 A:middle
with that circle.

00:14:04.916 --> 00:14:08.786 A:middle
But we passed in a
false parameter to stop,

00:14:08.786 --> 00:14:10.536 A:middle
which means don't
jump immediately

00:14:10.536 --> 00:14:13.596 A:middle
to the inactive states, stay
in this quasi-finish state.

00:14:13.596 --> 00:14:16.116 A:middle
And what that means is that,
at some point in the future,

00:14:16.116 --> 00:14:18.986 A:middle
you're going to call
finishAnimation and you're going

00:14:18.986 --> 00:14:23.886 A:middle
to specify a position where the
animation is in fact finishing.

00:14:23.886 --> 00:14:25.716 A:middle
In this case, we're
not finishing neither

00:14:25.716 --> 00:14:27.736 A:middle
at the end or at the beginning.

00:14:28.206 --> 00:14:30.306 A:middle
And you're completion
handlers will be called

00:14:30.306 --> 00:14:31.156 A:middle
with that position.

00:14:31.726 --> 00:14:34.396 A:middle
Now if you called stopAnimation
with a true parameter,

00:14:34.396 --> 00:14:36.546 A:middle
we wouldn't even call
your completion handler.

00:14:36.596 --> 00:14:39.596 A:middle
It's just finished
right then and there.

00:14:40.196 --> 00:14:41.476 A:middle
Now let's look at what happens

00:14:41.476 --> 00:14:44.656 A:middle
if you call
finishWithADifferentPosition.

00:14:45.036 --> 00:14:46.756 A:middle
Let's say we call
finishWithTheEnd.

00:14:46.756 --> 00:14:51.416 A:middle
It immediately jumps to
where the animation was

00:14:51.416 --> 00:14:52.856 A:middle
originally targeted.

00:14:53.496 --> 00:14:56.206 A:middle
Now you might think, "Why
would I want to do that?"

00:14:56.736 --> 00:14:59.966 A:middle
And it actually gives you
a lot of possibilities.

00:14:59.966 --> 00:15:03.026 A:middle
For example, imagine
you're pausing this circle


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.966 --> 00:15:03.026 A:middle
For example, imagine
you're pausing this circle

00:15:03.186 --> 00:15:05.756 A:middle
or you're stopping this
circle when you touch it,

00:15:06.296 --> 00:15:07.936 A:middle
and then you're dragging
the circle around.

00:15:07.936 --> 00:15:10.896 A:middle
And maybe you set up
some UIKit snap behaviors

00:15:10.896 --> 00:15:14.296 A:middle
in the end position and
the target position.

00:15:14.496 --> 00:15:17.726 A:middle
And when you release it, based
on the velocity of your gesture,

00:15:17.946 --> 00:15:20.376 A:middle
it may snap into those
relative positions.

00:15:20.646 --> 00:15:23.566 A:middle
And once it reaches that, you
can then call finishAnimation

00:15:23.816 --> 00:15:25.746 A:middle
with a .end or .begin.

00:15:25.956 --> 00:15:27.656 A:middle
And so you can do some
interesting things

00:15:27.656 --> 00:15:30.766 A:middle
to finalize the animations
that you've started.

00:15:32.516 --> 00:15:39.876 A:middle
[ Applause ]

00:15:40.376 --> 00:15:42.606 A:middle
OK, pausing and scrubbing.

00:15:43.396 --> 00:15:44.856 A:middle
Not much there, right?

00:15:45.566 --> 00:15:47.006 A:middle
Well, it's kind of interesting.

00:15:47.006 --> 00:15:50.506 A:middle
So there's a sample app here
which we are going to --

00:15:51.356 --> 00:15:54.246 A:middle
where we set some gesture
recognizers on the square and on

00:15:54.246 --> 00:15:56.036 A:middle
that little green progress bar.

00:15:56.966 --> 00:16:00.646 A:middle
And we can scrub
that progress bar.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:56.966 --> 00:16:00.646 A:middle
And we can scrub
that progress bar.

00:16:00.646 --> 00:16:03.186 A:middle
We're updating where
the square is.

00:16:03.186 --> 00:16:04.996 A:middle
And then we can continue
the square.

00:16:05.656 --> 00:16:09.886 A:middle
And you'll notice that kind
of the position over time --

00:16:09.886 --> 00:16:12.326 A:middle
there's kind of a weird
protuberance in that graph,

00:16:12.326 --> 00:16:14.056 A:middle
which we're going
to talk to in a bit.

00:16:15.586 --> 00:16:16.746 A:middle
Before we do that, let's look

00:16:16.746 --> 00:16:18.586 A:middle
at what these gesture
recognizers look like.

00:16:18.636 --> 00:16:21.926 A:middle
On the square, we added
a tap gesture recognizer

00:16:22.206 --> 00:16:24.736 A:middle
which checks whether or not
the animation is active.

00:16:25.106 --> 00:16:28.146 A:middle
And if it is, it checks is
it running or not running.

00:16:28.526 --> 00:16:30.216 A:middle
And if it's running,
it's going to pause it.

00:16:30.376 --> 00:16:32.356 A:middle
And if it's not, it's
going to start it up again.

00:16:32.786 --> 00:16:33.776 A:middle
Pretty straightforward.

00:16:35.066 --> 00:16:38.696 A:middle
On the progress bar, we set
up a pan gesture recognizer.

00:16:39.016 --> 00:16:41.916 A:middle
And we're going to just compute
a fraction based on the position

00:16:41.916 --> 00:16:46.676 A:middle
where we are in the pan relative

00:16:46.966 --> 00:16:50.326 A:middle
to the full bounds
of that progress bar.

00:16:50.326 --> 00:16:52.346 A:middle
And based on that fraction
that we've computed,

00:16:52.516 --> 00:16:54.576 A:middle
we're going to update
both the animator

00:16:54.576 --> 00:16:56.826 A:middle
and the progress bar
as fractionComplete.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.566 --> 00:17:07.806 A:middle
OK. So, what's going
on with this graph?

00:17:08.656 --> 00:17:10.976 A:middle
There's actually something
interesting going on here.

00:17:11.516 --> 00:17:13.746 A:middle
[ Laughter ]

00:17:14.246 --> 00:17:17.226 A:middle
And to explain what, I'm
going to go back to this kind

00:17:17.226 --> 00:17:19.566 A:middle
of exaggerated ease-in
curve again.

00:17:20.415 --> 00:17:24.086 A:middle
So let's say this time,
50% of the way in,

00:17:24.086 --> 00:17:26.776 A:middle
we pause the animation and
now we want to scrub it.

00:17:26.996 --> 00:17:31.856 A:middle
The important thing to note
is that the fractionComplete

00:17:32.196 --> 00:17:35.476 A:middle
that you're actually setting
has nothing to do with time.

00:17:35.476 --> 00:17:37.186 A:middle
We've just paused the animation.

00:17:37.186 --> 00:17:40.296 A:middle
What you're really
setting is the fraction

00:17:40.296 --> 00:17:42.636 A:middle
of progress towards
the end value.

00:17:42.996 --> 00:17:46.156 A:middle
And in this case, we've hardly
made any progress at all.

00:17:46.716 --> 00:17:49.396 A:middle
Now we're going to scrub
that line and we're going

00:17:49.396 --> 00:17:50.636 A:middle
to want to continue it again.

00:17:51.236 --> 00:17:56.236 A:middle
We don't want to jump
the perceived position

00:17:56.626 --> 00:17:58.346 A:middle
of the view that
we're animating.

00:17:58.866 --> 00:18:02.276 A:middle
So, in fact, what happens
is we kind of map time back


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.866 --> 00:18:02.276 A:middle
So, in fact, what happens
is we kind of map time back

00:18:02.276 --> 00:18:04.596 A:middle
to the timing function of
the original animation.

00:18:05.006 --> 00:18:08.946 A:middle
Which means when we continue
in this particular case,

00:18:09.936 --> 00:18:11.846 A:middle
the animation is going
to finish really quickly.

00:18:12.876 --> 00:18:16.226 A:middle
So when we go back to the curve
that we actually saw before,

00:18:16.226 --> 00:18:18.366 A:middle
you'll notice that we're
kind of jumping back

00:18:18.566 --> 00:18:22.176 A:middle
onto the timing function
-- that easeInOut function.

00:18:22.716 --> 00:18:24.746 A:middle
And it's important to note
that when you're pausing

00:18:24.746 --> 00:18:26.076 A:middle
and scrubbing, depending

00:18:26.076 --> 00:18:29.316 A:middle
on whatever UI affordance
you may be using to do this,

00:18:29.546 --> 00:18:32.476 A:middle
you may see these
discontinuities and have to kind

00:18:32.476 --> 00:18:33.846 A:middle
of compensate for them.

00:18:34.086 --> 00:18:36.776 A:middle
OK, let's talk a little
bit about reversing.

00:18:37.956 --> 00:18:40.906 A:middle
There's three ways
you can reverse.

00:18:41.486 --> 00:18:46.526 A:middle
One is you can pause reverse --
kind of interact with something

00:18:46.996 --> 00:18:48.086 A:middle
and start it up again.

00:18:48.746 --> 00:18:52.766 A:middle
And you'll notice that you're
literally reversing right back

00:18:52.876 --> 00:18:55.406 A:middle
through the timing function
that you've specified.

00:18:55.896 --> 00:18:57.566 A:middle
You can also reverse on the fly.

00:18:58.116 --> 00:19:00.096 A:middle
Which means that, as the
animation is running,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.116 --> 00:19:00.096 A:middle
Which means that, as the
animation is running,

00:19:00.096 --> 00:19:01.286 A:middle
you can tell it to reverse.

00:19:01.286 --> 00:19:03.386 A:middle
And that's kind of like
hitting a brick wall.

00:19:03.796 --> 00:19:07.086 A:middle
Again, there's going to be this
huge discontinuity in velocity.

00:19:07.506 --> 00:19:10.446 A:middle
And that might be what you
want if you want to kind

00:19:10.446 --> 00:19:14.416 A:middle
of represent, say, a
perfectly-inelastic collision

00:19:14.416 --> 00:19:15.396 A:middle
or something like that.

00:19:16.056 --> 00:19:18.946 A:middle
But if you don't want that and
you want it to be smoother,

00:19:19.276 --> 00:19:21.206 A:middle
you can animate additively.

00:19:21.706 --> 00:19:25.406 A:middle
And in this case, we will
reverse the animation not

00:19:25.406 --> 00:19:28.046 A:middle
by changing the reverse
property, but we're going

00:19:28.046 --> 00:19:31.896 A:middle
to actually change the values
back to the original values.

00:19:32.636 --> 00:19:34.796 A:middle
Now what's different
about this is

00:19:34.796 --> 00:19:36.746 A:middle
that when your completion
handlers are called,

00:19:36.746 --> 00:19:38.986 A:middle
they're going to be called
with a position of .end.

00:19:39.306 --> 00:19:41.156 A:middle
You've basically
changed the target.

00:19:41.156 --> 00:19:45.756 A:middle
You're no longer going
towards the original target.

00:19:45.756 --> 00:19:50.176 A:middle
You're going back towards the
target you just specified.

00:19:51.856 --> 00:19:57.126 A:middle
OK, there's some
interesting timing objects

00:19:58.736 --> 00:20:01.476 A:middle
that we've made available
to you.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.736 --> 00:20:01.476 A:middle
that we've made available
to you.

00:20:02.566 --> 00:20:05.726 A:middle
The first is the
UICubicTimingParameter class.

00:20:05.796 --> 00:20:08.556 A:middle
If you create this class with
no parameters, you're going

00:20:08.556 --> 00:20:11.916 A:middle
to get the default core
animation timing curve.

00:20:11.916 --> 00:20:14.836 A:middle
This was previously
unavailable at the UIKit level.

00:20:15.556 --> 00:20:17.766 A:middle
The second variant

00:20:17.766 --> 00:20:21.916 A:middle
of the constructor is
essentially the existing canned

00:20:21.916 --> 00:20:23.426 A:middle
animation curves.

00:20:23.426 --> 00:20:25.216 A:middle
And finally, we opened up all

00:20:25.216 --> 00:20:27.486 A:middle
of the cubic BÃ©zier
curves available

00:20:27.816 --> 00:20:29.826 A:middle
on the unit square to you.

00:20:30.126 --> 00:20:32.426 A:middle
And as an example of
something that you might do --

00:20:32.426 --> 00:20:35.026 A:middle
this particular BÃ©zier curve,
if I were to give it a name,

00:20:35.026 --> 00:20:36.726 A:middle
it would be "speed
in, speed out".

00:20:36.996 --> 00:20:39.826 A:middle
And you can kind of go wild
with the BÃ©zier curves you want

00:20:39.826 --> 00:20:40.976 A:middle
to create for timing functions.

00:20:41.516 --> 00:20:47.096 A:middle
[ Applause ]

00:20:47.596 --> 00:20:52.116 A:middle
We've given you more ways
to animate like a spring.

00:20:52.216 --> 00:20:54.596 A:middle
And, again, consider that
we consider springs now

00:20:54.596 --> 00:20:56.646 A:middle
to be influencing the timing.

00:20:56.936 --> 00:20:59.636 A:middle
If you create a
UISpringTimingParameter object

00:20:59.636 --> 00:21:01.556 A:middle
with no arguments, you're going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.636 --> 00:21:01.556 A:middle
with no arguments, you're going

00:21:01.556 --> 00:21:03.946 A:middle
to get a critically-damped
spring animation,

00:21:03.946 --> 00:21:05.426 A:middle
which many of you
have asked for.

00:21:05.776 --> 00:21:09.256 A:middle
It's one that we use, for
example, when we push or pop

00:21:09.396 --> 00:21:10.946 A:middle
onto a navigation controller.

00:21:11.516 --> 00:21:16.086 A:middle
[ Applause ]

00:21:16.586 --> 00:21:18.756 A:middle
The second variant
is very similar

00:21:18.756 --> 00:21:22.316 A:middle
to the existing UIKit
spring animation API

00:21:22.546 --> 00:21:25.046 A:middle
with a small difference that
I'm going to get to in a second.

00:21:26.006 --> 00:21:28.276 A:middle
But before we get to
that, we've opened

00:21:28.276 --> 00:21:30.386 A:middle
up basically the
spring equation to you.

00:21:30.426 --> 00:21:33.746 A:middle
You can specify any
coefficients you want,

00:21:33.746 --> 00:21:36.846 A:middle
and we will effectively
honor those.

00:21:37.366 --> 00:21:40.446 A:middle
There's a point here though, and
that is that the duration now

00:21:40.446 --> 00:21:42.616 A:middle
that you specify is ignored.

00:21:42.676 --> 00:21:47.006 A:middle
And we're computing that
duration based on the solution

00:21:47.006 --> 00:21:48.026 A:middle
of the spring equation.

00:21:48.356 --> 00:21:49.826 A:middle
You're going to see
an example of that.

00:21:50.516 --> 00:21:53.546 A:middle
[ Applause ]

00:21:54.046 --> 00:21:55.016 A:middle
I said there was a difference.

00:21:55.076 --> 00:21:58.266 A:middle
You'll notice that the initial
velocity is now a vector.

00:21:58.416 --> 00:21:59.736 A:middle
It's not a scaler.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.726 --> 00:22:03.076 A:middle
Most of the time, we're
actually not going to look

00:22:03.076 --> 00:22:04.946 A:middle
at the y component
of this vector.

00:22:05.446 --> 00:22:09.566 A:middle
However, if you are animating
the center of a view,

00:22:09.876 --> 00:22:11.856 A:middle
we're actually going
to look at both the x

00:22:11.936 --> 00:22:14.086 A:middle
and y components of that vector.

00:22:14.086 --> 00:22:16.896 A:middle
And to see why, look at
this example application

00:22:17.386 --> 00:22:19.736 A:middle
where we drag a square
off the center.

00:22:20.156 --> 00:22:22.336 A:middle
And when we release it,
we're going to spring back

00:22:22.336 --> 00:22:24.836 A:middle
to the center based on the
velocity of the gesture.

00:22:25.776 --> 00:22:31.496 A:middle
Now, up until now, the velocity
was always along the line

00:22:31.496 --> 00:22:34.946 A:middle
connecting those two squares,
which was kind of unfortunate

00:22:34.946 --> 00:22:38.366 A:middle
because my gesture might be
released anywhere along the

00:22:38.366 --> 00:22:41.186 A:middle
plane, and we effectively
really weren't taking

00:22:41.186 --> 00:22:42.066 A:middle
that into account.

00:22:43.076 --> 00:22:44.496 A:middle
However, now we are.

00:22:44.576 --> 00:22:46.296 A:middle
So let's look at
this little video

00:22:46.296 --> 00:22:50.576 A:middle
which shows how we now will
spring back to the center

00:22:50.576 --> 00:22:54.516 A:middle
and take into account the
two-dimensional vector position.

00:22:54.856 --> 00:22:56.376 A:middle
You'll notice that,
when we go off,

00:22:56.376 --> 00:22:58.656 A:middle
we're going to take both
the x and y components.

00:22:58.906 --> 00:22:59.916 A:middle
It's really easy to do that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.516 --> 00:23:06.586 A:middle
[ Applause ]

00:23:07.086 --> 00:23:08.936 A:middle
OK, we have this great
property animator.

00:23:08.936 --> 00:23:09.946 A:middle
And guess what?

00:23:10.346 --> 00:23:11.906 A:middle
I want to take advantage of it

00:23:12.096 --> 00:23:14.126 A:middle
for custom view controller
transitions.

00:23:14.126 --> 00:23:16.546 A:middle
I want them to be
interruptible, too.

00:23:17.326 --> 00:23:21.476 A:middle
Now, three years ago or so,
I gave a whole talk on this,

00:23:21.476 --> 00:23:23.166 A:middle
and so it's a little
bit complicated.

00:23:23.166 --> 00:23:24.896 A:middle
So if you're not familiar

00:23:24.896 --> 00:23:26.646 A:middle
with custom view
controller transitions,

00:23:26.646 --> 00:23:28.476 A:middle
please refer to that talk.

00:23:28.476 --> 00:23:32.656 A:middle
But I'm going to give a quick
run-through to set the stage

00:23:32.656 --> 00:23:34.986 A:middle
of how we've extended
these protocols.

00:23:35.186 --> 00:23:37.806 A:middle
View controller transitions
basically are a bunch

00:23:37.806 --> 00:23:39.166 A:middle
of interlocking protocols --

00:23:39.166 --> 00:23:41.776 A:middle
two of which interactive
transitioning

00:23:41.776 --> 00:23:44.446 A:middle
and animated transitioning
are protocols

00:23:44.446 --> 00:23:46.886 A:middle
that you create objects
which you conform to --

00:23:47.486 --> 00:23:49.576 A:middle
well, the objects that
you create conform to.

00:23:50.746 --> 00:23:53.966 A:middle
The system will create
another object that gets passed

00:23:53.966 --> 00:23:57.186 A:middle
into the methods
of that protocol.

00:23:57.226 --> 00:23:58.776 A:middle
And this will become
clear in a second.

00:23:59.546 --> 00:24:01.486 A:middle
But let's remember why
we want to do this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.546 --> 00:24:01.486 A:middle
But let's remember why
we want to do this.

00:24:01.486 --> 00:24:04.556 A:middle
Imagine you have an app
with a navigation controller

00:24:05.726 --> 00:24:08.286 A:middle
and the pop kind of looks OK.

00:24:08.286 --> 00:24:09.026 A:middle
It's that great,

00:24:09.026 --> 00:24:11.856 A:middle
critically-damped
spring animation.

00:24:12.316 --> 00:24:14.326 A:middle
But, you know, your app
wants something else.

00:24:14.716 --> 00:24:18.736 A:middle
Your app wants to really kind
of have a different look --

00:24:18.736 --> 00:24:20.806 A:middle
something that explodes
out maybe

00:24:20.806 --> 00:24:22.346 A:middle
with a blur effect underneath.

00:24:22.906 --> 00:24:25.186 A:middle
That's what custom view
controller transitions let

00:24:25.216 --> 00:24:25.706 A:middle
you do.

00:24:25.906 --> 00:24:27.796 A:middle
And moreover, it
lets you do those

00:24:27.796 --> 00:24:29.316 A:middle
and drive those interactively.

00:24:30.606 --> 00:24:33.536 A:middle
OK. The way we get the
objects that conform

00:24:33.536 --> 00:24:35.426 A:middle
to these protocols are
just via a delegate.

00:24:35.546 --> 00:24:37.796 A:middle
It might be the navigation
controller delegate,

00:24:37.796 --> 00:24:39.286 A:middle
or it might be a
view controller's

00:24:39.286 --> 00:24:40.516 A:middle
transitioning delegate.

00:24:40.676 --> 00:24:44.126 A:middle
And we're going to ask that
delegate, "Do you have an object

00:24:44.126 --> 00:24:46.936 A:middle
that conforms to animated
transitioning whenever you do a

00:24:46.936 --> 00:24:49.036 A:middle
present, or a push, or a pop?

00:24:49.606 --> 00:24:53.216 A:middle
And if you do, we're going to
bypass the built-in transition.

00:24:53.656 --> 00:24:54.556 A:middle
We're going to create one

00:24:54.556 --> 00:24:56.646 A:middle
of these context
transitioning objects

00:24:56.646 --> 00:24:58.806 A:middle
which give you all the
information you need

00:24:58.806 --> 00:25:00.876 A:middle
to actually animate
a transition.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.806 --> 00:25:00.876 A:middle
to actually animate
a transition.

00:25:01.126 --> 00:25:03.196 A:middle
And we're going to
call animateTransition,

00:25:03.436 --> 00:25:05.216 A:middle
passing in that context to you."

00:25:05.856 --> 00:25:08.556 A:middle
Now how do we make
it interruptible?

00:25:08.556 --> 00:25:12.146 A:middle
Well, what we've done is we've
added a new optional method

00:25:12.186 --> 00:25:14.466 A:middle
called
interruptibleAnimator(using.

00:25:15.166 --> 00:25:18.306 A:middle
And if you implement that,
you're going to return an object

00:25:18.306 --> 00:25:20.826 A:middle
that conforms to
UIViewImplicitlyAnimating.

00:25:21.106 --> 00:25:23.456 A:middle
Now this could be a
UIViewPropertyAnimator,

00:25:23.726 --> 00:25:24.936 A:middle
but it doesn't need to be.

00:25:24.986 --> 00:25:28.376 A:middle
It could be, for example,
another type of animator that,

00:25:28.376 --> 00:25:31.776 A:middle
say, you implement in
terms of UIKit dynamics

00:25:31.776 --> 00:25:33.996 A:middle
or some other animation
strategy.

00:25:35.676 --> 00:25:41.676 A:middle
If you do not implement
the interaction controller,

00:25:42.486 --> 00:25:44.906 A:middle
meaning you only implement a
custom animation controller,

00:25:44.906 --> 00:25:47.036 A:middle
then you need to
implement animateTransition.

00:25:47.136 --> 00:25:50.976 A:middle
And you would do so very
simply, like this method.

00:25:50.976 --> 00:25:54.186 A:middle
You take the interruptible
animator that you would return

00:25:54.696 --> 00:25:56.306 A:middle
and you would basically
tell it to start.

00:25:56.696 --> 00:25:58.186 A:middle
And that's really
all you need to do

00:25:58.186 --> 00:25:59.726 A:middle
to implement animateTransition.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:01.266 --> 00:26:03.056 A:middle
However, we kind of advise

00:26:03.056 --> 00:26:05.436 A:middle
that you use an interaction
controller if you're going

00:26:05.436 --> 00:26:06.646 A:middle
to make it interruptible.

00:26:07.526 --> 00:26:11.966 A:middle
And, again, the first thing
you have to do is conform to

00:26:12.256 --> 00:26:14.456 A:middle
or return an object
that conforms

00:26:14.456 --> 00:26:15.946 A:middle
to animated transitioning.

00:26:15.946 --> 00:26:18.306 A:middle
We will then ask you for
an object that conforms

00:26:18.306 --> 00:26:19.906 A:middle
to interactive transitioning.

00:26:19.906 --> 00:26:22.796 A:middle
And we're going to pass the
object that you return back

00:26:22.796 --> 00:26:24.966 A:middle
to us previously as a parameter.

00:26:26.076 --> 00:26:29.626 A:middle
Often times, you want that
interaction controller

00:26:29.626 --> 00:26:32.856 A:middle
to actually drive the
animation controller.

00:26:33.006 --> 00:26:38.956 A:middle
If you do, we're not going
to call animateTransition.

00:26:38.956 --> 00:26:41.186 A:middle
We're going to call
startInteractiveTransition

00:26:41.186 --> 00:26:43.016 A:middle
and we're going to pass
in the same context

00:26:43.016 --> 00:26:45.306 A:middle
that we would have passed
into animateTransition.

00:26:47.956 --> 00:26:50.716 A:middle
We provide a concrete
class that you can use

00:26:50.716 --> 00:26:52.516 A:middle
that makes this really easy.

00:26:53.976 --> 00:26:57.146 A:middle
Now there was a restriction
before

00:26:57.146 --> 00:26:59.866 A:middle
where if you implemented
UIPercentDriven

00:26:59.866 --> 00:27:00.876 A:middle
InteractiveTransition,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.866 --> 00:27:00.876 A:middle
InteractiveTransition,

00:27:00.876 --> 00:27:04.216 A:middle
you actually needed the
animateTransition method

00:27:04.216 --> 00:27:07.716 A:middle
of the animation controller to
have been implemented in terms

00:27:07.716 --> 00:27:10.566 A:middle
of the existing UIKit
animation APIs.

00:27:11.586 --> 00:27:15.896 A:middle
But now with the interruptible
animator, UIPercentDriven

00:27:15.896 --> 00:27:18.406 A:middle
InteractiveTransition actually
doesn't care about that.

00:27:18.406 --> 00:27:21.936 A:middle
It's just using the
protocol that we've defined

00:27:21.936 --> 00:27:24.016 A:middle
in UIViewImplicitlyAnimating.

00:27:24.146 --> 00:27:25.786 A:middle
And that's it.

00:27:25.786 --> 00:27:28.016 A:middle
So you could actually have a
completely different animation

00:27:28.016 --> 00:27:29.696 A:middle
that's driven by UIPercentDriven

00:27:29.696 --> 00:27:33.746 A:middle
InteractiveTransition,
which is kind of cool.

00:27:34.096 --> 00:27:36.566 A:middle
OK, let's say you already
have one of these things,

00:27:36.566 --> 00:27:38.066 A:middle
you already have a
custom transition.

00:27:38.066 --> 00:27:38.876 A:middle
How do you migrate?

00:27:38.876 --> 00:27:42.626 A:middle
Well, one way to do it would
literally be rename your

00:27:42.626 --> 00:27:46.006 A:middle
animateTransition method
to myAnimateTransition

00:27:46.316 --> 00:27:49.286 A:middle
and build your interruptible
animator in such a way

00:27:49.646 --> 00:27:52.866 A:middle
that you just add that
method call into one

00:27:53.226 --> 00:27:56.276 A:middle
of the animations
of the animator.

00:27:56.716 --> 00:27:57.706 A:middle
Not too difficult.

00:27:58.086 --> 00:28:04.826 A:middle
We did have to extend some other
objects in these protocols.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.086 --> 00:28:04.826 A:middle
We did have to extend some other
objects in these protocols.

00:28:04.826 --> 00:28:07.096 A:middle
For example, context
transitioning now has

00:28:07.096 --> 00:28:08.766 A:middle
a pauseInteractiveTransition.

00:28:09.506 --> 00:28:13.186 A:middle
That's how you enter into
the interactive state now.

00:28:13.586 --> 00:28:16.116 A:middle
Prior to this, you
started interactive

00:28:16.116 --> 00:28:18.006 A:middle
and you ended non-interactive.

00:28:18.176 --> 00:28:19.776 A:middle
Now, you can move
back and forth.

00:28:19.776 --> 00:28:21.336 A:middle
And the way you do that is

00:28:21.336 --> 00:28:27.276 A:middle
by calling pauseInteractive,
or finish, or cancel.

00:28:27.276 --> 00:28:30.556 A:middle
Also, the property
values isInteractive

00:28:30.556 --> 00:28:34.266 A:middle
and transitionWasCancelled can
now change as you move back

00:28:34.266 --> 00:28:37.776 A:middle
and forth between an interactive
and non-interactive transition.

00:28:38.496 --> 00:28:42.916 A:middle
We added a variable called
wantsInteractiveStart.

00:28:43.106 --> 00:28:44.936 A:middle
Because now that you
can move and forth,

00:28:45.526 --> 00:28:47.766 A:middle
maybe you want your
interaction controller to start

00:28:47.766 --> 00:28:49.646 A:middle
out non-interactively.

00:28:49.956 --> 00:28:52.246 A:middle
And this variable
controls that behavior.

00:28:54.216 --> 00:28:57.246 A:middle
Finally, we have UIPercentDriven

00:28:57.686 --> 00:29:00.156 A:middle
InteractiveTransition updated.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:57.686 --> 00:29:00.156 A:middle
InteractiveTransition updated.

00:29:01.366 --> 00:29:02.396 A:middle
There are a few rules.

00:29:02.396 --> 00:29:05.086 A:middle
interruptibleAnimator
-- if you implement it,

00:29:05.276 --> 00:29:07.776 A:middle
we expect it to actually
be there.

00:29:08.136 --> 00:29:09.796 A:middle
Meaning don't do something else.

00:29:09.796 --> 00:29:11.076 A:middle
The system might get grumpy.

00:29:11.476 --> 00:29:13.136 A:middle
We're always going to
call animateTransition

00:29:13.136 --> 00:29:15.096 A:middle
and startInteractiveTransition
first.

00:29:15.486 --> 00:29:17.506 A:middle
So that would be a great place

00:29:17.506 --> 00:29:20.776 A:middle
to create your interruptible
animator because we are going

00:29:20.776 --> 00:29:23.416 A:middle
to be calling it subsequently
with the same context,

00:29:23.416 --> 00:29:26.666 A:middle
and we expect the same
instance of animator

00:29:26.946 --> 00:29:28.166 A:middle
to always be returned.

00:29:28.776 --> 00:29:32.266 A:middle
Finally, the animator survives
the life of the transition.

00:29:32.536 --> 00:29:33.936 A:middle
It shouldn't become inactive

00:29:34.036 --> 00:29:36.456 A:middle
until the entire
transition is over.

00:29:37.306 --> 00:29:38.936 A:middle
Now, Mike is going to
come up and show you how

00:29:38.936 --> 00:29:41.696 A:middle
to use these APIs in a real app.

00:29:42.836 --> 00:29:43.936 A:middle
I didn't give you much time.

00:29:44.516 --> 00:29:50.066 A:middle
[ Applause ]

00:29:50.566 --> 00:29:52.286 A:middle
&gt;&gt; Thanks, Bruce.

00:29:52.946 --> 00:29:53.526 A:middle
All right.

00:29:54.356 --> 00:29:57.376 A:middle
So, let's start with a
demo application here.

00:29:57.816 --> 00:29:59.776 A:middle
We've got an application

00:29:59.776 --> 00:30:02.846 A:middle
that utilizes the
UIViewPropertyAnimator


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.776 --> 00:30:02.846 A:middle
that utilizes the
UIViewPropertyAnimator

00:30:02.846 --> 00:30:05.576 A:middle
and the additions to
UIViewController transitioning

00:30:06.276 --> 00:30:09.346 A:middle
to create a nice
interruptible custom transition

00:30:09.496 --> 00:30:10.136 A:middle
in a basic app.

00:30:10.546 --> 00:30:12.266 A:middle
So, first, we have
an application

00:30:12.346 --> 00:30:13.896 A:middle
that uses a
UINavigationController

00:30:13.896 --> 00:30:15.966 A:middle
and has a Collection View
Controller inside of it.

00:30:15.966 --> 00:30:17.946 A:middle
And we have this grid of
photos we can scroll through.

00:30:18.606 --> 00:30:19.896 A:middle
When we tap one of the photos,

00:30:19.896 --> 00:30:22.166 A:middle
it will push another view
controller on the navstack.

00:30:22.746 --> 00:30:25.166 A:middle
And that kind of
shows a detailed view

00:30:25.166 --> 00:30:25.846 A:middle
of your photos here.

00:30:25.846 --> 00:30:28.586 A:middle
And if we hit the Back button,
we'll pop that off the navstack.

00:30:29.056 --> 00:30:31.966 A:middle
And alternatively, we can slide
from the left edge of the screen

00:30:32.416 --> 00:30:34.276 A:middle
to do an interactive
transition back.

00:30:34.276 --> 00:30:36.476 A:middle
And this is all available
basically for free

00:30:36.476 --> 00:30:37.696 A:middle
in UINavigationController.

00:30:38.036 --> 00:30:41.526 A:middle
And as Bruce just described,
we also have a rich set of APIs

00:30:41.526 --> 00:30:43.916 A:middle
that allow you to
customize that transition.

00:30:44.076 --> 00:30:46.316 A:middle
And, here, if we want the
photo to kind of zoom up out

00:30:46.316 --> 00:30:49.536 A:middle
of the page, we can do
that, which is pretty cool.

00:30:49.536 --> 00:30:51.426 A:middle
When we hit the Back
button, it'll zoom back down.

00:30:51.916 --> 00:30:53.316 A:middle
And this was all
possible before.

00:30:53.496 --> 00:30:55.576 A:middle
In addition to that,
you could pull

00:30:55.576 --> 00:30:58.916 A:middle
down to start the transition
interactively, move around,

00:30:59.076 --> 00:31:01.116 A:middle
and then let it finish
in an animated fashion.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.076 --> 00:31:01.116 A:middle
and then let it finish
in an animated fashion.

00:31:01.856 --> 00:31:03.556 A:middle
So I want to show you
how we've accomplished

00:31:03.556 --> 00:31:05.576 A:middle
that using
UIViewPropertyAnimator.

00:31:13.046 --> 00:31:15.476 A:middle
OK, so the first thing you need
to do is tell the system --

00:31:15.476 --> 00:31:16.906 A:middle
in this case, the
navigation controller --

00:31:17.196 --> 00:31:19.916 A:middle
that you're going to be
providing a custom transition.

00:31:20.066 --> 00:31:21.266 A:middle
So, here, we're going to conform

00:31:21.266 --> 00:31:23.496 A:middle
to the navigation controller's
delegate, and we'll do

00:31:23.496 --> 00:31:25.586 A:middle
so with an
AssetTransitionController.

00:31:25.586 --> 00:31:28.736 A:middle
And that's just an object we've
created that'll implement these

00:31:28.736 --> 00:31:29.796 A:middle
transition protocols.

00:31:30.576 --> 00:31:32.736 A:middle
So, here, we have two methods
that are pretty important.

00:31:32.736 --> 00:31:34.966 A:middle
The first is calling us
for an animation controller

00:31:35.486 --> 00:31:37.466 A:middle
with a particular
operation -- a push or a pop.

00:31:37.716 --> 00:31:40.186 A:middle
We'll save that operation
and we'll return ourselves

00:31:40.186 --> 00:31:41.636 A:middle
since we're going to be
the animation controller.

00:31:41.746 --> 00:31:44.636 A:middle
And then when we return
an object from that API,

00:31:45.426 --> 00:31:47.406 A:middle
the system will call us for
an interaction controller,

00:31:47.896 --> 00:31:50.616 A:middle
at which point we'll also return
ourselves because we're going

00:31:50.616 --> 00:31:51.966 A:middle
to be the interaction
controller as well.

00:31:51.966 --> 00:31:54.656 A:middle
And once we've done that, the
system knows that this is going

00:31:54.656 --> 00:31:55.916 A:middle
to be an interactive transition.

00:31:56.806 --> 00:31:58.996 A:middle
So let's look at
UIViewController

00:31:58.996 --> 00:32:00.046 A:middle
InteractiveTransitioning.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.996 --> 00:32:00.046 A:middle
InteractiveTransitioning.

00:32:01.276 --> 00:32:04.116 A:middle
Here, the system is going to
call startInteractiveTransition

00:32:04.506 --> 00:32:06.826 A:middle
on our object with a
transition context,

00:32:06.826 --> 00:32:08.436 A:middle
and that'll have all the
pertinent information

00:32:08.436 --> 00:32:11.166 A:middle
that you'll need to start
your custom transition.

00:32:12.036 --> 00:32:14.426 A:middle
And at this point, we're going
to create a helper object here

00:32:14.426 --> 00:32:16.716 A:middle
that we'll see a little
bit more of in a moment.

00:32:17.026 --> 00:32:18.236 A:middle
But that's the object
that's going

00:32:18.236 --> 00:32:20.536 A:middle
to create our transition
animator.

00:32:20.536 --> 00:32:23.456 A:middle
And we're going to pass the
context to the operation

00:32:23.456 --> 00:32:24.126 A:middle
that we saved

00:32:24.546 --> 00:32:26.826 A:middle
and a panGestureRecognizer
we were using to start

00:32:26.826 --> 00:32:28.036 A:middle
that transition interactively.

00:32:28.356 --> 00:32:32.496 A:middle
In iOS 10, we also allow you to
start an interactive transition

00:32:32.496 --> 00:32:34.466 A:middle
in two phases -- either
an animation phase

00:32:34.506 --> 00:32:35.646 A:middle
or the interactive phase.

00:32:36.006 --> 00:32:38.256 A:middle
So if we did start from
a panGestureRecognizer,

00:32:38.256 --> 00:32:41.026 A:middle
we're going to set this
initiallyInteractive ivar here

00:32:41.026 --> 00:32:43.066 A:middle
to "true" to let the system know

00:32:43.066 --> 00:32:44.386 A:middle
that we're starting
this interactive

00:32:44.386 --> 00:32:45.836 A:middle
transition interactively.

00:32:47.766 --> 00:32:48.826 A:middle
And next, let's look

00:32:48.826 --> 00:32:51.486 A:middle
at the animated transitioning
implementation.

00:32:51.836 --> 00:32:55.006 A:middle
Here, we're not really concerned
about the animation methods.

00:32:55.006 --> 00:32:57.676 A:middle
As Bruce mentioned, we're using
an interaction controller,

00:32:57.676 --> 00:32:59.746 A:middle
and that's going to call
startInteractiveTransition

00:32:59.746 --> 00:33:01.216 A:middle
as opposed to animateTransition.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.746 --> 00:33:01.216 A:middle
as opposed to animateTransition.

00:33:01.776 --> 00:33:03.906 A:middle
But the new interruptible
animator API

00:33:04.076 --> 00:33:06.146 A:middle
in iOS 10 is what we're
really interested in here.

00:33:06.856 --> 00:33:08.506 A:middle
And, here, our helper
object that we'll see

00:33:08.506 --> 00:33:11.756 A:middle
in just a second creates
a UIViewPropertyAnimator

00:33:11.756 --> 00:33:13.456 A:middle
and returns that for
us to the system.

00:33:13.916 --> 00:33:15.806 A:middle
So, that's where
the system is going

00:33:15.806 --> 00:33:17.456 A:middle
to add any alongside animations.

00:33:17.456 --> 00:33:20.966 A:middle
And in this demo, you'll see the
navigation bar at the top kind

00:33:20.966 --> 00:33:22.556 A:middle
of animating along
with our transition.

00:33:22.556 --> 00:33:24.486 A:middle
The system is going to take
advantage of this animator

00:33:24.846 --> 00:33:26.036 A:middle
to add those animations.

00:33:26.036 --> 00:33:29.226 A:middle
So let's look at the
transition driver helper object

00:33:29.226 --> 00:33:29.646 A:middle
really quick.

00:33:30.826 --> 00:33:31.806 A:middle
All right.

00:33:31.806 --> 00:33:34.066 A:middle
Here, you saw that we
initialized this object

00:33:34.066 --> 00:33:35.386 A:middle
in startInteractiveTransition.

00:33:36.326 --> 00:33:40.036 A:middle
And that's going to call
through -- excuse me.

00:33:40.456 --> 00:33:40.936 A:middle
There we go.

00:33:41.456 --> 00:33:44.096 A:middle
That's going to call
through to this helper method

00:33:44.096 --> 00:33:46.006 A:middle
with some animations, and
it's going to set up some

00:33:46.006 --> 00:33:47.996 A:middle
of the background
animations for the transition.

00:33:48.716 --> 00:33:50.246 A:middle
You saw visual effect
was animating.

00:33:50.246 --> 00:33:52.406 A:middle
And the two view controllers,
alpha, was kind of animating.

00:33:52.786 --> 00:33:56.186 A:middle
We'll talk about the image
changing its frame a little

00:33:56.186 --> 00:33:56.606 A:middle
later on.

00:33:57.046 --> 00:34:00.096 A:middle
And it'll pass in a completion
closure as well to help clean


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:57.046 --> 00:34:00.096 A:middle
And it'll pass in a completion
closure as well to help clean

00:34:00.096 --> 00:34:01.396 A:middle
up some of those
background views.

00:34:01.646 --> 00:34:04.236 A:middle
But, here, let's focus on how
we create that property animator

00:34:04.296 --> 00:34:06.236 A:middle
that we returned to the
interruptibleAnimator API.

00:34:07.216 --> 00:34:09.596 A:middle
So we first get a transition
duration from a helper function,

00:34:09.596 --> 00:34:10.936 A:middle
and we'll look at that
in a second as well.

00:34:11.496 --> 00:34:13.966 A:middle
And we're going to create this
PropertyAnimator with a duration

00:34:14.146 --> 00:34:15.306 A:middle
and a curve of .easeOut.

00:34:15.626 --> 00:34:18.106 A:middle
And we'll pass in those
animations that we were given.

00:34:18.106 --> 00:34:20.406 A:middle
And we'll create a
completion handler here,

00:34:20.406 --> 00:34:23.806 A:middle
and we'll call those completions
that were passed to us.

00:34:23.806 --> 00:34:25.376 A:middle
But the important thing
here is we're going to call

00:34:25.376 --> 00:34:27.985 A:middle
to the transition context
when this animator ends

00:34:28.446 --> 00:34:29.636 A:middle
to inform the system that, "Hey,

00:34:29.636 --> 00:34:31.096 A:middle
we're done with this
transition."

00:34:31.786 --> 00:34:33.436 A:middle
And we can get where we're --

00:34:33.436 --> 00:34:34.206 A:middle
I'm sorry,

00:34:34.206 --> 00:34:36.446 A:middle
the completionTransition
API takes a bool

00:34:36.966 --> 00:34:39.966 A:middle
that we can get the value that
we're supposed to pass through.

00:34:39.966 --> 00:34:41.936 A:middle
So we pass "yes" to that API.

00:34:41.936 --> 00:34:44.025 A:middle
That means we're going
to end the transition.

00:34:44.025 --> 00:34:46.335 A:middle
If we pass "no", it means we're
going to cancel the transition.

00:34:47.036 --> 00:34:48.755 A:middle
So before I go a
little bit further

00:34:48.755 --> 00:34:52.505 A:middle
in the transition animator
helper object here,

00:34:52.815 --> 00:34:54.976 A:middle
I want to show you a few
more features in the demo app

00:34:54.976 --> 00:34:56.976 A:middle
that are made possible by
using UIViewPropertyAnimator.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:02.246 --> 00:35:05.936 A:middle
So if we go back to the demo,
I showed you that you can zoom

00:35:05.936 --> 00:35:08.866 A:middle
out of the screen and zoom back
in hitting the Back button.

00:35:08.866 --> 00:35:11.806 A:middle
But what I didn't show you is
you can pause now midflight.

00:35:12.456 --> 00:35:14.896 A:middle
So we're in the animation
phase, we pause the animation,

00:35:15.036 --> 00:35:16.636 A:middle
and we move into an
interactive phase.

00:35:17.046 --> 00:35:18.426 A:middle
So we're interacting
with this photo

00:35:18.426 --> 00:35:19.336 A:middle
in the middle of
this transition.

00:35:19.336 --> 00:35:21.476 A:middle
When we release our finger,
they'll kind of animate again,

00:35:21.476 --> 00:35:22.826 A:middle
and then we can interrupt
it again.

00:35:22.826 --> 00:35:25.906 A:middle
So we're free to move back and
forth between an animation phase

00:35:25.996 --> 00:35:28.076 A:middle
and an interactive
phase of the transition.

00:35:28.376 --> 00:35:30.416 A:middle
So it's really pretty cool.

00:35:30.966 --> 00:35:33.376 A:middle
So before I go back to the
code and show how we've done

00:35:33.376 --> 00:35:34.826 A:middle
that using the new
view controller APIs,

00:35:34.826 --> 00:35:38.426 A:middle
I want to describe a particular
scenario here that'll help us

00:35:38.426 --> 00:35:39.856 A:middle
understand what the code
is going to be doing.

00:35:40.506 --> 00:35:41.916 A:middle
So imagine we're starting.

00:35:41.916 --> 00:35:44.066 A:middle
We're pulling down with the
panGestureRecognizer here,

00:35:44.066 --> 00:35:45.576 A:middle
starting an interactive
transition.

00:35:46.216 --> 00:35:48.186 A:middle
And then we're going to release
our finger from the screen

00:35:48.236 --> 00:35:50.666 A:middle
and start an animation phase,
and while it's animating,

00:35:50.736 --> 00:35:53.036 A:middle
we're going to pause
midflight and we're going

00:35:53.036 --> 00:35:53.876 A:middle
to interact with it again.

00:35:53.876 --> 00:35:55.296 A:middle
And we're going to
cancel that transition

00:35:55.296 --> 00:35:56.266 A:middle
by pulling it back up.

00:35:56.956 --> 00:35:58.836 A:middle
So that's the scenario that
we're going to describe

00:35:58.836 --> 00:35:59.976 A:middle
when we look at this
next piece of code.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:05.096 --> 00:36:07.176 A:middle
So I've broken that down in
this sample application here

00:36:07.266 --> 00:36:08.496 A:middle
in terms of four methods.

00:36:08.496 --> 00:36:12.036 A:middle
The updateInteraction, which is
the gesture recognizer handler

00:36:12.166 --> 00:36:14.796 A:middle
that's going to update the
interactive transition.

00:36:14.976 --> 00:36:16.166 A:middle
And when our finger lifts,

00:36:16.456 --> 00:36:18.276 A:middle
we're going to call the
endInteraction function.

00:36:18.736 --> 00:36:21.086 A:middle
And then we're going to call
the animate function to animate

00:36:21.086 --> 00:36:22.566 A:middle
to either the begin
or end position.

00:36:22.976 --> 00:36:25.146 A:middle
And then when we
interrupt that animation,

00:36:25.256 --> 00:36:27.006 A:middle
we'll end up calling
pauseAnimation.

00:36:27.006 --> 00:36:29.976 A:middle
So we can do this
loop a few times

00:36:30.156 --> 00:36:31.546 A:middle
in the lifetime of a transition.

00:36:31.546 --> 00:36:33.446 A:middle
We can actually do it as
many times as we'd like.

00:36:33.496 --> 00:36:35.116 A:middle
But in this scenario,
we did it twice.

00:36:35.636 --> 00:36:37.666 A:middle
So we look at updateInteraction.

00:36:38.126 --> 00:36:39.756 A:middle
This is a gesture
recognizer handler.

00:36:39.976 --> 00:36:43.196 A:middle
And when it's called in "state
begin" or "state change",

00:36:43.196 --> 00:36:44.656 A:middle
we're going to look
at the translation

00:36:44.656 --> 00:36:46.546 A:middle
of the gesture recognizer
and we're going to use

00:36:46.546 --> 00:36:48.986 A:middle
that to compute a progress
step that we're going to add

00:36:49.136 --> 00:36:51.086 A:middle
to the transition animator
as fractionComplete.

00:36:52.036 --> 00:36:54.746 A:middle
And then to scrub those
animations in the background --

00:36:54.746 --> 00:36:57.286 A:middle
you saw the navbar in some of
our chrome, the visual effect

00:36:57.286 --> 00:36:58.726 A:middle
in the background
-- it's as simple

00:36:58.726 --> 00:37:01.016 A:middle
as setting the fractionComplete
on this transition animator.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.726 --> 00:37:01.016 A:middle
as setting the fractionComplete
on this transition animator.

00:37:01.016 --> 00:37:04.426 A:middle
And that'll let us scrub through
all these animations basically

00:37:04.426 --> 00:37:04.836 A:middle
for free.

00:37:05.396 --> 00:37:07.366 A:middle
And then we'll call to
the transitionContext

00:37:07.366 --> 00:37:09.536 A:middle
to update the interactive
transitions percentComplete.

00:37:10.046 --> 00:37:11.166 A:middle
And then, finally, we have

00:37:11.166 --> 00:37:12.756 A:middle
that image that's
moving around screen.

00:37:13.046 --> 00:37:15.066 A:middle
When we're in the interactive
phase of this transition,

00:37:15.066 --> 00:37:17.166 A:middle
we're going to handle
setting that frame manually.

00:37:17.166 --> 00:37:18.906 A:middle
So we have a little helper
function here to do that.

00:37:20.246 --> 00:37:22.366 A:middle
And finally, we'll
reset the translation

00:37:22.366 --> 00:37:23.316 A:middle
on this gesture recognizer.

00:37:23.836 --> 00:37:26.666 A:middle
So when we're called, when the
finger lifts off the screen,

00:37:26.666 --> 00:37:28.876 A:middle
we'll get a "state ended"
on the gesture recognizer

00:37:28.876 --> 00:37:30.166 A:middle
and we'll call endInteraction.

00:37:30.986 --> 00:37:32.346 A:middle
If we look at endInteraction,

00:37:32.996 --> 00:37:35.696 A:middle
we first just check is our
transition context interactive.

00:37:35.696 --> 00:37:37.816 A:middle
And we want to make sure
it is before we move it

00:37:37.816 --> 00:37:38.956 A:middle
out of the interactive phase.

00:37:39.386 --> 00:37:41.066 A:middle
And we'll call a
little helper function

00:37:41.066 --> 00:37:42.966 A:middle
that tells us whether
we're going to complete

00:37:42.996 --> 00:37:45.606 A:middle
in the begin position of the
animation or the end position.

00:37:46.126 --> 00:37:48.136 A:middle
If we're completing in the
end position, then we're going

00:37:48.136 --> 00:37:49.536 A:middle
to call to the context
to say, "Hey,

00:37:49.536 --> 00:37:51.496 A:middle
we're finishing the
interactive transition here.

00:37:51.856 --> 00:37:53.296 A:middle
We're going to move to
an animation phase."

00:37:53.296 --> 00:37:55.776 A:middle
If we're called with
the begin position,

00:37:55.776 --> 00:37:57.766 A:middle
we're going to say we're
cancelling the interactive phase

00:37:57.766 --> 00:37:59.356 A:middle
and we're going to move
to the animated phase.

00:37:59.646 --> 00:38:00.566 A:middle
And then we just animate.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.646 --> 00:38:00.566 A:middle
And then we just animate.

00:38:00.676 --> 00:38:02.526 A:middle
So let's look at the
animation method here.

00:38:04.476 --> 00:38:05.966 A:middle
So, previously, I told you

00:38:05.966 --> 00:38:07.766 A:middle
that the transition
animator animates kind

00:38:07.766 --> 00:38:10.806 A:middle
of the background chrome
and the alpha transition.

00:38:11.366 --> 00:38:13.536 A:middle
But, here, we're going to create
a second propertyAnimator.

00:38:13.536 --> 00:38:15.746 A:middle
And we're going to use
that to animate the frames

00:38:15.746 --> 00:38:17.326 A:middle
of these images that are
moving around screen.

00:38:17.446 --> 00:38:20.366 A:middle
And the reason we do that is
we might want those animations

00:38:20.366 --> 00:38:21.846 A:middle
to have a different
timing function

00:38:22.166 --> 00:38:23.496 A:middle
than the animations
in the background.

00:38:23.886 --> 00:38:25.536 A:middle
And we'll see that
in just a moment.

00:38:25.536 --> 00:38:27.466 A:middle
So, here, we're just going
to add animations to that.

00:38:27.966 --> 00:38:30.266 A:middle
Now we're going to
specify the end position,

00:38:30.266 --> 00:38:33.046 A:middle
or basically the target or the
initial frame of the image.

00:38:33.396 --> 00:38:34.196 A:middle
And then we're going to start

00:38:34.196 --> 00:38:36.706 A:middle
that property animator
and keep track of it.

00:38:36.936 --> 00:38:38.996 A:middle
Now, remember, we have this
other transition animator that's

00:38:38.996 --> 00:38:40.646 A:middle
living the lifetime
of this transition

00:38:40.646 --> 00:38:42.746 A:middle
that we gave back to the system.

00:38:43.316 --> 00:38:45.076 A:middle
And we just need to make
sure that that's animating

00:38:45.076 --> 00:38:46.186 A:middle
in the correct direction.

00:38:46.526 --> 00:38:49.246 A:middle
So if we specified a toPosition
of "start", then we need

00:38:49.246 --> 00:38:50.256 A:middle
to reverse that animator.

00:38:51.406 --> 00:38:54.586 A:middle
And finally, if this is the
first time that we're calling

00:38:54.586 --> 00:38:57.076 A:middle
through animate here, our
transition animator is going

00:38:57.076 --> 00:38:58.526 A:middle
to be in an inactive state.

00:38:58.886 --> 00:39:00.916 A:middle
So all we need to do is start
that transition animator


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:58.886 --> 00:39:00.916 A:middle
So all we need to do is start
that transition animator

00:39:00.916 --> 00:39:02.516 A:middle
and we're off to
the animation phase.

00:39:03.676 --> 00:39:06.646 A:middle
Alternatively, if it's been
started and subsequently paused,

00:39:06.956 --> 00:39:08.156 A:middle
we're going to use
something a little different.

00:39:08.446 --> 00:39:10.366 A:middle
We're going to call in
to continueAnimation

00:39:11.016 --> 00:39:13.446 A:middle
(withTimingParameters
and a durationFactor.

00:39:13.656 --> 00:39:16.966 A:middle
So continueAnimation lets you
continue a paused animation

00:39:17.316 --> 00:39:19.846 A:middle
with different timing parameters
and in different duration,

00:39:19.846 --> 00:39:21.106 A:middle
and the remaining
duration if you'd like.

00:39:21.616 --> 00:39:23.356 A:middle
And here, we're going to
pass "nil", indicating we'd

00:39:23.356 --> 00:39:25.686 A:middle
like to use the timing
parameters that were passed

00:39:25.976 --> 00:39:27.826 A:middle
when we initialized this
transition animator.

00:39:27.826 --> 00:39:29.786 A:middle
But we're going to
change the durationFactor

00:39:30.176 --> 00:39:32.196 A:middle
of the continued animation.

00:39:32.196 --> 00:39:34.606 A:middle
And that will allow us to
synchronize the durations

00:39:34.606 --> 00:39:36.706 A:middle
of this new itemFrameAnimator
we just created

00:39:36.706 --> 00:39:38.766 A:middle
above with the duration
remaining

00:39:38.766 --> 00:39:39.876 A:middle
of this transition animator.

00:39:40.466 --> 00:39:42.086 A:middle
So the durationFactor
is just defined

00:39:42.086 --> 00:39:46.326 A:middle
as 1.0 equals the initial
duration that was specified

00:39:46.326 --> 00:39:47.826 A:middle
when you created this
transition animator.

00:39:48.316 --> 00:39:50.946 A:middle
And that's all we have to do to
kick off the animation phase.

00:39:51.496 --> 00:39:52.726 A:middle
And lastly for this cycle,

00:39:52.726 --> 00:39:54.896 A:middle
let's look at the
pauseAnimation step here.

00:39:55.026 --> 00:39:58.286 A:middle
And this is when it's
animating and we paused.

00:39:58.416 --> 00:40:00.006 A:middle
We put our finger down
on the image view.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:58.416 --> 00:40:00.006 A:middle
We put our finger down
on the image view.

00:40:00.326 --> 00:40:01.626 A:middle
And we just put a
gesture recognizer

00:40:01.626 --> 00:40:03.666 A:middle
on that image view
in the sample app.

00:40:04.006 --> 00:40:05.316 A:middle
And we're free to do that now

00:40:05.316 --> 00:40:08.146 A:middle
because UIViewPropertyAnimator
will hit test the animating

00:40:08.146 --> 00:40:08.996 A:middle
view automatically.

00:40:10.146 --> 00:40:12.606 A:middle
So on that itemFrameAnimator
we just created above,

00:40:12.636 --> 00:40:15.396 A:middle
we're going to stop that
entirely with a parameter

00:40:15.396 --> 00:40:19.316 A:middle
of "true", indicating to the
system that we have no intention

00:40:19.316 --> 00:40:20.676 A:middle
on continuing this animation,

00:40:20.676 --> 00:40:22.836 A:middle
that we'd like the model
values written directly --

00:40:24.236 --> 00:40:26.416 A:middle
excuse me, the presentation
values written directly back

00:40:26.416 --> 00:40:26.876 A:middle
to the model.

00:40:26.906 --> 00:40:29.606 A:middle
And then on the transition
animator, we're just going

00:40:29.606 --> 00:40:30.996 A:middle
to call to pauseAnimation.

00:40:31.306 --> 00:40:33.056 A:middle
Because as we saw in
updateInteraction,

00:40:33.056 --> 00:40:34.576 A:middle
we were scrubbing that animation

00:40:34.576 --> 00:40:36.046 A:middle
when we were interacting
with the image.

00:40:36.266 --> 00:40:37.516 A:middle
And then, finally,
we'll indicate

00:40:37.516 --> 00:40:39.286 A:middle
to the transition
context that we're moving

00:40:39.286 --> 00:40:43.516 A:middle
out of the animation phase
back to the interactive phase.

00:40:44.396 --> 00:40:46.876 A:middle
And so I'd like to show
you one more tip and trick,

00:40:47.306 --> 00:40:49.286 A:middle
kind of a little
detail of the demo here.

00:40:49.536 --> 00:40:54.706 A:middle
We saw that this timing is
kind of slow, and I've done

00:40:54.706 --> 00:40:56.146 A:middle
that for illustration purposes.

00:40:56.546 --> 00:40:59.576 A:middle
But you might want to make
that more natural-feeling

00:40:59.576 --> 00:41:01.156 A:middle
and a little bit more lively.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.576 --> 00:41:01.156 A:middle
and a little bit more lively.

00:41:01.886 --> 00:41:04.686 A:middle
So if we look at changing
that timing to a spring,

00:41:04.876 --> 00:41:06.376 A:middle
it kind of jumps out of the page

00:41:06.776 --> 00:41:09.666 A:middle
and only the image is
springing into its position.

00:41:09.666 --> 00:41:11.616 A:middle
And here, those background
animations are continuing

00:41:11.616 --> 00:41:13.926 A:middle
to operate on that .easeOut
curve that we specified.

00:41:14.656 --> 00:41:16.646 A:middle
So we were able to
do this change

00:41:16.646 --> 00:41:19.426 A:middle
and make this feel much more
lively with really one line

00:41:19.426 --> 00:41:21.496 A:middle
of code, and we can still
interact uninterrupted.

00:41:21.646 --> 00:41:25.526 A:middle
So let's take a look at that
line of code really quick.

00:41:27.586 --> 00:41:29.086 A:middle
So we come back to
our demo and we look

00:41:29.086 --> 00:41:31.586 A:middle
at our propertyAnimator
convenience method.

00:41:32.046 --> 00:41:34.606 A:middle
We'll notice that we're
specifying a property animator

00:41:34.606 --> 00:41:36.426 A:middle
with timing parameters
that are linear here.

00:41:36.906 --> 00:41:39.126 A:middle
And that's what gives us
this mechanical feeling.

00:41:39.126 --> 00:41:41.456 A:middle
And a colleague of mine
left this great comment

00:41:41.456 --> 00:41:44.226 A:middle
in here specifying some
SpringTimingParameters

00:41:44.226 --> 00:41:47.366 A:middle
to use instead with a
great mass, stiffness,

00:41:47.396 --> 00:41:48.536 A:middle
damping, initial velocity.

00:41:48.536 --> 00:41:50.676 A:middle
And that fully specifies
this spring.

00:41:51.416 --> 00:41:53.626 A:middle
So when we create the
propertyAnimator down here,

00:41:53.776 --> 00:41:56.476 A:middle
this duration that we're
passing in actually isn't used.

00:41:56.836 --> 00:41:58.776 A:middle
Rather, it'll be computed based

00:41:58.776 --> 00:42:00.836 A:middle
on the properties we've
provided in the spring timing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:58.776 --> 00:42:00.836 A:middle
on the properties we've
provided in the spring timing.

00:42:01.436 --> 00:42:04.476 A:middle
And because of that, we have
animation duration helper

00:42:04.476 --> 00:42:07.896 A:middle
function here that just uses
the propertyAnimator API

00:42:07.896 --> 00:42:11.676 A:middle
that we just saw down below here
to compute the duration for us.

00:42:11.676 --> 00:42:13.986 A:middle
So it basically solves that
spring equation for us.

00:42:13.986 --> 00:42:16.336 A:middle
And we can use that to
match the other duration

00:42:16.336 --> 00:42:17.376 A:middle
of the transition animator.

00:42:18.286 --> 00:42:20.056 A:middle
That's all super simple.

00:42:20.056 --> 00:42:23.386 A:middle
I know this code is looking
a little bit complex,

00:42:23.386 --> 00:42:25.096 A:middle
but it's really only a
few hundred lines of code.

00:42:25.406 --> 00:42:27.676 A:middle
And UIViewPropertyAnimator
made it all possible.

00:42:28.526 --> 00:42:30.976 A:middle
So, with that, I'd like to
give it back over to Bruce.

00:42:31.516 --> 00:42:35.586 A:middle
[ Applause ]

00:42:36.086 --> 00:42:36.636 A:middle
&gt;&gt; Thanks, Mike.

00:42:39.186 --> 00:42:41.726 A:middle
OK, I've got to speed things

00:42:41.726 --> 00:42:43.276 A:middle
up because we're a
little bit over time.

00:42:43.826 --> 00:42:47.036 A:middle
We need to talk a little
bit about hit testing.

00:42:47.126 --> 00:42:52.846 A:middle
We're going to assume that
UserInteractionEnabled is "true"

00:42:53.266 --> 00:42:55.556 A:middle
so that we can actually
hit test our views.

00:42:55.556 --> 00:42:58.216 A:middle
If it was "false", we would
just be swallowing all touches.

00:42:58.836 --> 00:43:01.876 A:middle
We have this property called
isManualHitTestingEnabled


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:58.836 --> 00:43:01.876 A:middle
We have this property called
isManualHitTestingEnabled

00:43:01.876 --> 00:43:03.216 A:middle
that defaults to "false".

00:43:03.726 --> 00:43:06.646 A:middle
And the reason it defaults
to "false" is because we want

00:43:06.646 --> 00:43:08.916 A:middle
to be able to hit
test moving views.

00:43:09.256 --> 00:43:12.286 A:middle
If it were "true", which is the
current behavior of the system,

00:43:12.546 --> 00:43:15.656 A:middle
when you try to touch down
on the position of the view

00:43:15.656 --> 00:43:17.376 A:middle
that you saw, we
wouldn't hit test.

00:43:17.376 --> 00:43:21.786 A:middle
And perhaps, puzzlingly, it
would hit test where it's going.

00:43:22.136 --> 00:43:23.436 A:middle
We don't want that to happen

00:43:23.596 --> 00:43:25.826 A:middle
for an interruptible
property animator.

00:43:26.196 --> 00:43:29.136 A:middle
Now in this talk below, which
I recommend that you see,

00:43:29.586 --> 00:43:32.886 A:middle
a technique was given whereby
you could override hit test,

00:43:32.886 --> 00:43:35.806 A:middle
do some calculation to convert
to the presentation layer

00:43:35.806 --> 00:43:39.296 A:middle
and call "super" so that you
could hit test a moving view.

00:43:40.306 --> 00:43:41.886 A:middle
That technique still works.

00:43:41.886 --> 00:43:45.376 A:middle
But now with propertyAnimators
if you have a moving view,

00:43:45.376 --> 00:43:48.166 A:middle
by default, with manual hit
testing enabled to "false",

00:43:48.166 --> 00:43:50.886 A:middle
we're actually going to
hit test against that view.

00:43:51.576 --> 00:43:53.746 A:middle
So that's pretty cool, and
it's really easy to do.

00:43:53.746 --> 00:43:57.036 A:middle
In fact, that's how everything
we've been looking at on stage

00:43:57.036 --> 00:43:58.236 A:middle
so far has been working.

00:43:58.896 --> 00:44:00.436 A:middle
Now this doesn't
work all the time.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:58.896 --> 00:44:00.436 A:middle
Now this doesn't
work all the time.

00:44:00.436 --> 00:44:02.586 A:middle
If you have deep view
hierarchies and so forth,

00:44:02.586 --> 00:44:04.316 A:middle
we are not going to
do the right thing.

00:44:04.676 --> 00:44:07.786 A:middle
So you may need to use
the other technique talked

00:44:07.786 --> 00:44:08.936 A:middle
about in the other talk.

00:44:10.266 --> 00:44:12.766 A:middle
OK. We have this whole
other piece of API

00:44:12.766 --> 00:44:16.606 A:middle
for keyframe animations
that exist in UIKit today.

00:44:16.866 --> 00:44:18.356 A:middle
How do you make those
interruptible?

00:44:18.916 --> 00:44:21.606 A:middle
To recall, a keyframe
animation is basically kind

00:44:21.606 --> 00:44:24.626 A:middle
of like a regular animation
except you specify the path

00:44:24.696 --> 00:44:27.216 A:middle
that you want to animate from.

00:44:29.336 --> 00:44:31.466 A:middle
We want to make those
interruptible as well.

00:44:32.566 --> 00:44:34.846 A:middle
In fact, we want to do
something like what we're seeing

00:44:34.846 --> 00:44:36.396 A:middle
on this video right now.

00:44:36.396 --> 00:44:37.856 A:middle
We want to pause it, scrub it.

00:44:38.356 --> 00:44:40.536 A:middle
And I guess it's
not too surprising.

00:44:40.536 --> 00:44:41.996 A:middle
In fact, you can do it.

00:44:42.256 --> 00:44:43.446 A:middle
It's really easy to do.

00:44:43.446 --> 00:44:47.346 A:middle
You take the existing API
and you add it as a closure

00:44:47.536 --> 00:44:50.186 A:middle
to an animator's animations.

00:44:50.546 --> 00:44:53.116 A:middle
And with that, you have
interruptible keyframe

00:44:53.116 --> 00:44:53.976 A:middle
animations, too.

00:44:54.516 --> 00:44:58.546 A:middle
[ Applause ]

00:44:59.046 --> 00:45:00.096 A:middle
There's one last thing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:59.046 --> 00:45:00.096 A:middle
There's one last thing.

00:45:00.096 --> 00:45:00.996 A:middle
I kind of lied.

00:45:01.346 --> 00:45:01.816 A:middle
Interactive

00:45:01.816 --> 00:45:03.486 A:middle
PopGestureRecognizers.

00:45:03.486 --> 00:45:05.896 A:middle
That's the built-in
navigation pop.

00:45:06.406 --> 00:45:08.876 A:middle
Currently, if you have an
interaction controller,

00:45:09.506 --> 00:45:10.776 A:middle
you can't use that.

00:45:11.526 --> 00:45:15.006 A:middle
But new in iOS 10, if you
put a failure requirement

00:45:15.126 --> 00:45:17.946 A:middle
on that gesture recognizer
or your own,

00:45:18.376 --> 00:45:22.376 A:middle
we will allow the built-in pop
gesture recognizer to recognize

00:45:22.376 --> 00:45:27.126 A:middle
and use the built-in navigation
transition alongside your

00:45:27.126 --> 00:45:27.976 A:middle
custom interaction.

00:45:28.516 --> 00:45:30.546 A:middle
[ Applause ]

00:45:31.046 --> 00:45:33.926 A:middle
So, in summary, we've
learned how

00:45:33.926 --> 00:45:35.606 A:middle
to create interruptible
animations

00:45:35.606 --> 00:45:37.476 A:middle
with a UIViewPropertyAnimator.

00:45:38.436 --> 00:45:39.466 A:middle
There's a whole new range

00:45:39.466 --> 00:45:41.896 A:middle
of timing functions
available that you can use.

00:45:42.896 --> 00:45:45.796 A:middle
You can use interruptible
propertyAnimators

00:45:45.796 --> 00:45:48.736 A:middle
to create interruptible
view controller transitions.

00:45:49.856 --> 00:45:52.316 A:middle
For more information,
go to this URL.

00:45:52.846 --> 00:45:55.126 A:middle
There's a couple of other
sessions in UIKit that talk

00:45:55.126 --> 00:45:57.776 A:middle
about other types of animations,
two of which are tomorrow.

00:45:57.776 --> 00:45:59.376 A:middle
I encourage you to go see those.

00:45:59.896 --> 00:46:00.816 A:middle
Thank you.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:59.896 --> 00:46:00.816 A:middle
Thank you.

00:46:01.516 --> 00:46:06.500 A:middle
[ Applause ]

