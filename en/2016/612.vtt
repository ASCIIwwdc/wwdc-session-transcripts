WEBVTT

00:00:06.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:22.516 --> 00:00:27.656 A:middle
[ Applause ]

00:00:28.156 --> 00:00:29.626 A:middle
&gt;&gt; Good afternoon and welcome

00:00:29.626 --> 00:00:31.736 A:middle
to Game Technologies
for Apple Watch.

00:00:31.816 --> 00:00:35.796 A:middle
I hope you've had a great WWDC
and are as excited as I am

00:00:35.796 --> 00:00:37.856 A:middle
about all the great
new technologies.

00:00:39.596 --> 00:00:43.176 A:middle
Gaming in iOS has captured
the imagination of users.

00:00:43.756 --> 00:00:47.146 A:middle
As a longtime gamer, I've
marveled at the vast array

00:00:47.146 --> 00:00:49.376 A:middle
of games created by
developers like you.

00:00:49.376 --> 00:00:53.866 A:middle
We've heard that you're
intrigued by the potential

00:00:53.866 --> 00:00:58.436 A:middle
for games on Apple Watch
so today we're pleased

00:00:58.436 --> 00:01:00.806 A:middle
to present gaming for watchOS 3.

00:00:58.436 --> 00:01:00.806 A:middle
to present gaming for watchOS 3.

00:01:03.196 --> 00:01:07.266 A:middle
This session covers everything
you need to create a great game

00:01:07.266 --> 00:01:08.836 A:middle
on this most personal device.

00:01:09.036 --> 00:01:12.206 A:middle
We will first show you
how to use various inputs

00:01:12.206 --> 00:01:15.106 A:middle
on Apple Watch and provide
feedback to your users.

00:01:15.536 --> 00:01:18.586 A:middle
We will then introduce you
to our graphics frameworks

00:01:18.636 --> 00:01:21.326 A:middle
that allow you to create
vibrant 2D and 3D visuals.

00:01:22.276 --> 00:01:24.526 A:middle
In addition we will show you
how to integrate social gaming

00:01:24.526 --> 00:01:26.386 A:middle
and multiplayer into your app.

00:01:26.946 --> 00:01:29.716 A:middle
And finally, we will show
you all the tools available

00:01:29.716 --> 00:01:31.906 A:middle
to use during development,
as well as some

00:01:31.906 --> 00:01:33.056 A:middle
of the best practices.

00:01:35.016 --> 00:01:38.246 A:middle
watchOS provides a rich set of
tools to help you get started.

00:01:39.106 --> 00:01:41.656 A:middle
This includes some things
you may be familiar with such

00:01:41.656 --> 00:01:43.686 A:middle
as WatchKit and rich
notification.

00:01:44.966 --> 00:01:49.376 A:middle
Today, however, we will
focus on what's new.

00:01:49.606 --> 00:01:52.776 A:middle
In WatchKit we offer new
interfaces that allow you

00:01:52.776 --> 00:01:55.166 A:middle
to create your game in Xcode
using Interface Builder.

00:01:55.776 --> 00:01:58.996 A:middle
You can now use just your
recognizers in the Digital Crown

00:01:58.996 --> 00:02:00.816 A:middle
for precise control
over your game.

00:01:58.996 --> 00:02:00.816 A:middle
for precise control
over your game.

00:02:01.896 --> 00:02:04.776 A:middle
There's also haptic feedback
which we think is a good way

00:02:04.776 --> 00:02:09.656 A:middle
to make your experience much
more personal and immersive.

00:02:09.806 --> 00:02:11.706 A:middle
SpriteKit and SceneKit
are frameworks

00:02:11.706 --> 00:02:14.236 A:middle
that let you create rich
visuals to delight your users.

00:02:14.666 --> 00:02:16.636 A:middle
They provide good
places to add audio

00:02:16.776 --> 00:02:21.046 A:middle
and form a simple foundation on
which you can build your game.

00:02:21.256 --> 00:02:25.036 A:middle
Game Center provides API's
for adding social features

00:02:25.036 --> 00:02:27.346 A:middle
to your game including
achievements,

00:02:27.486 --> 00:02:29.386 A:middle
leaderboards, and multiplayer.

00:02:29.946 --> 00:02:34.006 A:middle
But now let me show an
example of what's possible.

00:02:34.626 --> 00:02:37.346 A:middle
This is a game built
with SceneKit

00:02:37.686 --> 00:02:39.076 A:middle
which is our 3D framework.

00:02:40.076 --> 00:02:42.636 A:middle
You start out with a collection
of blocks of various shapes.

00:02:43.956 --> 00:02:45.556 A:middle
Your goal is to rotate them

00:02:45.556 --> 00:02:47.506 A:middle
until they form a
familiar silhouette.

00:02:48.456 --> 00:02:49.826 A:middle
Now let's watch this
for a moment.

00:02:54.756 --> 00:02:56.956 A:middle
When the player, and now
that the player has won,

00:02:57.166 --> 00:02:59.526 A:middle
we're going to play another
round and I'll talk a little bit

00:02:59.526 --> 00:03:02.976 A:middle
about what's happening here.

00:02:59.526 --> 00:03:02.976 A:middle
about what's happening here.

00:03:03.546 --> 00:03:07.466 A:middle
We use pan gestures to control
the left and right rotation.

00:03:08.076 --> 00:03:11.426 A:middle
And when it is in the same plane
we'll use the Digital Crown

00:03:11.766 --> 00:03:13.326 A:middle
to rotate it into
place for the win.

00:03:17.476 --> 00:03:20.066 A:middle
So now that we've introduced
gaming on Apple Watch

00:03:20.216 --> 00:03:22.166 A:middle
and showed a demo, let's dive

00:03:22.166 --> 00:03:24.236 A:middle
into how we can make your
game interact with a user

00:03:24.236 --> 00:03:26.536 A:middle
in a much more natural way.

00:03:27.106 --> 00:03:30.536 A:middle
Apple Watch is our
most intimate device.

00:03:31.216 --> 00:03:35.406 A:middle
We use it up close, usually with
one finger touching the screen

00:03:35.586 --> 00:03:36.776 A:middle
or rotating the crown.

00:03:37.496 --> 00:03:39.456 A:middle
You can read motion
from the accelerometer

00:03:39.916 --> 00:03:42.176 A:middle
or you can even make it
vibrate with a haptic engine.

00:03:42.706 --> 00:03:46.156 A:middle
When used together this
creates the sensation

00:03:46.216 --> 00:03:48.976 A:middle
that you're using a
physical device that operates

00:03:49.136 --> 00:03:51.556 A:middle
and responds in an
almost tangible way.

00:03:52.106 --> 00:03:55.276 A:middle
Let's start with touch.

00:03:55.746 --> 00:04:00.076 A:middle
On watchOS 3 we offer four
types of gestures that work well

00:03:55.746 --> 00:04:00.076 A:middle
On watchOS 3 we offer four
types of gestures that work well

00:04:00.076 --> 00:04:01.806 A:middle
for different kinds of
interactions in your game.

00:04:01.806 --> 00:04:03.456 A:middle
And I'd like to go
through those one by one.

00:04:03.876 --> 00:04:06.706 A:middle
Tap is the simplest.

00:04:07.376 --> 00:04:10.126 A:middle
You touch the screen and
you can select a target

00:04:10.126 --> 00:04:12.386 A:middle
or a position to move to.

00:04:13.306 --> 00:04:16.815 A:middle
Pan is nice scrolling
or for, you know,

00:04:16.815 --> 00:04:18.106 A:middle
movement in a given direction.

00:04:20.755 --> 00:04:23.886 A:middle
Swipe is good when you want
to navigate to another screen

00:04:24.286 --> 00:04:31.016 A:middle
such as your inventory menu,
and you can swipe back to exit.

00:04:31.206 --> 00:04:36.096 A:middle
Long press is a recommended way
to access your game's main menu.

00:04:36.096 --> 00:04:39.456 A:middle
And here you can provide
options such as quit, resume,

00:04:39.456 --> 00:04:41.066 A:middle
or even show Game Center stats.

00:04:41.596 --> 00:04:45.706 A:middle
Now that we've showed
you some examples

00:04:45.706 --> 00:04:48.956 A:middle
of the four gesture types, let's
talk about the classes we offer

00:04:49.166 --> 00:04:50.186 A:middle
for you to adopt these.

00:04:50.576 --> 00:04:54.276 A:middle
So for tap, we give you
WKTap Gesture Recognizer.

00:04:55.176 --> 00:04:58.096 A:middle
For pan, WKPan Gesture
Recognizer.

00:04:58.716 --> 00:05:03.676 A:middle
And similarly for swipe
and for long press.

00:04:58.716 --> 00:05:03.676 A:middle
And similarly for swipe
and for long press.

00:05:04.286 --> 00:05:10.226 A:middle
Now these gestures are available
from Interface Builder.

00:05:10.646 --> 00:05:13.186 A:middle
When you go into the
Object Library and search

00:05:13.186 --> 00:05:14.986 A:middle
for Gesture you'll find
the ones available.

00:05:16.316 --> 00:05:18.606 A:middle
If you select one, you
can add it to your scene.

00:05:18.696 --> 00:05:24.516 A:middle
And in our example we've
added tap, swipe, and pan.

00:05:24.736 --> 00:05:27.336 A:middle
These gestures are various
options you can configure

00:05:27.456 --> 00:05:31.146 A:middle
such making it a right swipe,
or a left, or up or down.

00:05:32.226 --> 00:05:34.946 A:middle
These other options
configure various behavior.

00:05:35.766 --> 00:05:39.426 A:middle
Now if you're using multiple
gestures, you should look

00:05:39.426 --> 00:05:41.726 A:middle
at this last option
because it is important

00:05:41.726 --> 00:05:42.966 A:middle
to specify the priority.

00:05:42.966 --> 00:05:45.156 A:middle
And this is because
gestures can conflict.

00:05:45.256 --> 00:05:47.826 A:middle
And what do I mean
by a conflict?

00:05:48.146 --> 00:05:52.366 A:middle
Well, a right swipe
could also be interpreted

00:05:52.366 --> 00:05:55.416 A:middle
as a tap followed by a pan.

00:05:55.776 --> 00:05:57.986 A:middle
So you, as the developer,
have to decide

00:05:57.986 --> 00:05:59.956 A:middle
which of these takes priority.

00:06:00.826 --> 00:06:06.166 A:middle
And in a game a tap and a pan
represent interactions directly

00:06:06.166 --> 00:06:07.106 A:middle
with your game world.

00:06:08.326 --> 00:06:11.416 A:middle
And we'd rather have that
take priority over a swipe

00:06:11.416 --> 00:06:12.786 A:middle
that would take you
to your inventory.

00:06:13.666 --> 00:06:17.506 A:middle
So going back to Interface
Builder you configure this Must

00:06:17.506 --> 00:06:20.346 A:middle
Fail First field for
in the swipe gesture.

00:06:20.846 --> 00:06:22.056 A:middle
And you set tap and pan.

00:06:22.056 --> 00:06:24.216 A:middle
And this reflects our priority.

00:06:25.206 --> 00:06:31.226 A:middle
Now that we've added gestures
to our storyboard you need

00:06:31.226 --> 00:06:32.966 A:middle
to implement an action method.

00:06:33.676 --> 00:06:36.256 A:middle
This action method takes
the corresponding class

00:06:36.776 --> 00:06:40.816 A:middle
and there are various properties
you can read, for example,

00:06:40.816 --> 00:06:42.796 A:middle
location In Object and Bounds.

00:06:43.306 --> 00:06:44.576 A:middle
And this last one, state.

00:06:44.576 --> 00:06:48.696 A:middle
And I think state is best
shown in a code example.

00:06:49.606 --> 00:06:54.296 A:middle
So from that puzzle app I demoed
we have a handle pan action.

00:06:54.296 --> 00:06:58.596 A:middle
And the first thing we do is we
get the location and the bounds.

00:06:58.996 --> 00:07:02.656 A:middle
And then we look at the state
and if we've begun the pan,

00:06:58.996 --> 00:07:02.656 A:middle
And then we look at the state
and if we've begun the pan,

00:07:03.226 --> 00:07:04.636 A:middle
we're going to set
up our rotation.

00:07:05.326 --> 00:07:09.136 A:middle
If we're in the middle of a
pan, it's either change, ended,

00:07:09.136 --> 00:07:11.606 A:middle
or cancelled, we will update it.

00:07:13.616 --> 00:07:15.636 A:middle
So I'd like to finish
up with the gestures

00:07:15.916 --> 00:07:17.096 A:middle
with some considerations.

00:07:18.036 --> 00:07:20.946 A:middle
Since the user is
wearing Apple Watch each

00:07:20.946 --> 00:07:23.076 A:middle
of these gestures
require both arms

00:07:23.276 --> 00:07:24.966 A:middle
so it's a good idea
to keep them short.

00:07:25.836 --> 00:07:28.946 A:middle
It's also important to
note that in comparison

00:07:28.946 --> 00:07:30.176 A:middle
to our other devices,

00:07:30.756 --> 00:07:33.336 A:middle
your finger is relatively
large compared to the screen.

00:07:34.056 --> 00:07:36.506 A:middle
So please take this into
account and make sure

00:07:36.746 --> 00:07:39.096 A:middle
that content remains visible
as you're interacting with it.

00:07:40.396 --> 00:07:44.586 A:middle
And finally, you know, our
user interface guidelines,

00:07:45.596 --> 00:07:48.726 A:middle
it recommends that we make
our gestures discoverable

00:07:48.926 --> 00:07:53.506 A:middle
so you should follow them.

00:07:53.726 --> 00:07:56.576 A:middle
Now many of you are probably
familiar with gestures

00:07:56.576 --> 00:07:58.696 A:middle
but now let's talk about
something that is unique

00:07:58.696 --> 00:08:01.956 A:middle
to Apple Watch and that
is the Digital Crown.

00:07:58.696 --> 00:08:01.956 A:middle
to Apple Watch and that
is the Digital Crown.

00:08:02.856 --> 00:08:04.916 A:middle
The interface guidelines
say this is good

00:08:04.916 --> 00:08:06.756 A:middle
for selection and scrolling.

00:08:07.746 --> 00:08:11.496 A:middle
But as a gamer, this harkens
back to arcade machines

00:08:11.496 --> 00:08:14.166 A:middle
with a physical dial
that can turn

00:08:14.166 --> 00:08:16.036 A:middle
to rotate a spaceship
or move a paddle.

00:08:17.006 --> 00:08:21.726 A:middle
Or in this example we can
move a ball back and forth

00:08:22.876 --> 00:08:24.766 A:middle
until we decide where
we want to put it.

00:08:24.986 --> 00:08:30.636 A:middle
And when we're ready we can
tap to drop it into position.

00:08:30.736 --> 00:08:32.546 A:middle
Adopting the crown
is really easy.

00:08:33.135 --> 00:08:35.496 A:middle
You access this Crown
Sequencer which is available

00:08:35.496 --> 00:08:37.006 A:middle
on your main interface class

00:08:37.256 --> 00:08:39.826 A:middle
and there are properties
you can read,

00:08:44.216 --> 00:08:47.296 A:middle
such as rotation per second
or whether we're idle.

00:08:47.626 --> 00:08:50.146 A:middle
Or you can define a delegate.

00:08:51.016 --> 00:08:53.136 A:middle
And this delegate
provides two methods.

00:08:53.856 --> 00:08:56.566 A:middle
crownDidRotate which
takes a rotationalDelta.

00:08:57.166 --> 00:09:01.496 A:middle
This rotational Delta represents
the change in the crown

00:08:57.166 --> 00:09:01.496 A:middle
This rotational Delta represents
the change in the crown

00:09:01.496 --> 00:09:03.226 A:middle
since the last time
this method was called.

00:09:03.226 --> 00:09:06.296 A:middle
And it is positive if it's
moving away from the user

00:09:06.656 --> 00:09:08.166 A:middle
and negative if it's
moving towards you.

00:09:08.166 --> 00:09:09.656 A:middle
And this is true
whether Apple Watch is

00:09:09.656 --> 00:09:12.006 A:middle
on the left wrist
or the right wrist.

00:09:12.506 --> 00:09:18.076 A:middle
When the crown stops rotating
crownDidBecomeIdle gets called.

00:09:18.766 --> 00:09:23.546 A:middle
So to recap, we think Digital
Crown is great for games.

00:09:23.776 --> 00:09:25.276 A:middle
It's also really easy to adopt.

00:09:25.586 --> 00:09:28.556 A:middle
And I can't wait to see
what kind of games you make

00:09:28.676 --> 00:09:30.306 A:middle
with this new kind of control.

00:09:30.906 --> 00:09:35.906 A:middle
Now the accelerometer
provides a means

00:09:35.906 --> 00:09:38.366 A:middle
to enhance other
interactions, for example,

00:09:38.366 --> 00:09:39.996 A:middle
adding tilt on a
game of pinball,

00:09:40.966 --> 00:09:43.336 A:middle
or to add spin to a pool shot.

00:09:43.726 --> 00:09:48.496 A:middle
You access the accelerometer
through the CMMotionManager.

00:09:49.896 --> 00:09:51.416 A:middle
And there are some
considerations here.

00:09:51.886 --> 00:09:56.266 A:middle
As you probably know,
when you hold your watch

00:09:56.266 --> 00:09:58.516 A:middle
up here the screen is visible.

00:09:58.516 --> 00:10:00.956 A:middle
But when you lower your arm
to the side it goes blank.

00:09:58.516 --> 00:10:00.956 A:middle
But when you lower your arm
to the side it goes blank.

00:10:01.256 --> 00:10:05.426 A:middle
When this happens it's going to
put the app in the background.

00:10:06.426 --> 00:10:09.736 A:middle
So as you move your wrist
the screen may go blank

00:10:10.406 --> 00:10:12.786 A:middle
so you should account for
that in your game playing.

00:10:12.786 --> 00:10:16.356 A:middle
And a recommendation here is
to use background processing.

00:10:17.306 --> 00:10:18.896 A:middle
You can call the method

00:10:18.896 --> 00:10:22.316 A:middle
in NSProcessInfo performExpiring
ActivityWithReason

00:10:23.806 --> 00:10:26.316 A:middle
to give your game loop
some time to continue

00:10:26.496 --> 00:10:29.116 A:middle
and give your user
a smooth experience.

00:10:29.266 --> 00:10:34.626 A:middle
Now let's show an example
of how to use this in code.

00:10:35.716 --> 00:10:40.056 A:middle
The first thing we need to do
is access the CMMotionManager

00:10:40.056 --> 00:10:43.446 A:middle
singleton so we set it as a
property here to use later.

00:10:44.376 --> 00:10:47.546 A:middle
Then in willActivate in
our main interface we ask

00:10:47.546 --> 00:10:48.956 A:middle
if the accelerometer is visible.

00:10:49.636 --> 00:10:54.306 A:middle
If it is, we configure things
like the Update Interval.

00:10:55.056 --> 00:10:56.536 A:middle
And then we ask the
motionManager

00:10:56.536 --> 00:10:58.516 A:middle
to start sending
us update events.

00:10:58.986 --> 00:11:03.346 A:middle
We provide a block that receives
these events and we can send it

00:10:58.986 --> 00:11:03.346 A:middle
We provide a block that receives
these events and we can send it

00:11:03.346 --> 00:11:05.356 A:middle
to our game to give
the user feedback.

00:11:05.776 --> 00:11:09.866 A:middle
When we are done we should
tell the motion Manager

00:11:09.866 --> 00:11:12.846 A:middle
to stop sending us updates so
we can conserve battery life.

00:11:13.446 --> 00:11:19.366 A:middle
Now to recap, we feel the
accelerometer is a good place

00:11:19.366 --> 00:11:20.826 A:middle
to enhance other interactions.

00:11:21.416 --> 00:11:23.126 A:middle
Be aware that the
screen may blank

00:11:23.256 --> 00:11:25.256 A:middle
so consider using
background processing.

00:11:26.456 --> 00:11:29.326 A:middle
And also make sure that
you use it when it's needed

00:11:29.476 --> 00:11:33.546 A:middle
and you stop listening
when you're done.

00:11:33.746 --> 00:11:35.346 A:middle
Now let's consider haptics.

00:11:36.546 --> 00:11:40.366 A:middle
On iOS you could only
make your device vibrate.

00:11:41.736 --> 00:11:45.116 A:middle
On Apple Watch you can create
a much more personal experience

00:11:45.116 --> 00:11:47.326 A:middle
through the use of
distinct haptic patterns.

00:11:48.596 --> 00:11:51.426 A:middle
Each haptic consists of
a vibration accompanied

00:11:51.426 --> 00:11:52.836 A:middle
by a brief audio tone.

00:11:53.696 --> 00:11:55.676 A:middle
By using the sense
of touch and sound,

00:11:56.256 --> 00:11:58.196 A:middle
in addition to visual
cues on the screen,

00:11:59.496 --> 00:12:01.806 A:middle
you can create a
much more immersive,

00:11:59.496 --> 00:12:01.806 A:middle
you can create a
much more immersive,

00:12:02.096 --> 00:12:04.156 A:middle
interesting game experience.

00:12:05.616 --> 00:12:07.996 A:middle
We offer nine types
of haptic feedback.

00:12:08.216 --> 00:12:09.716 A:middle
I'd like to go through
a few examples

00:12:09.756 --> 00:12:11.206 A:middle
of how they might be
used in your game.

00:12:11.626 --> 00:12:15.646 A:middle
This is the notification haptic.

00:12:16.716 --> 00:12:19.066 A:middle
These magenta triangles
represent the time

00:12:19.066 --> 00:12:20.696 A:middle
when the haptic is vibrating.

00:12:21.266 --> 00:12:25.236 A:middle
The waveform represents the
audio sound that's played along

00:12:25.236 --> 00:12:25.526 A:middle
with it.

00:12:26.036 --> 00:12:26.966 A:middle
Let's hear how this sounds.

00:12:27.291 --> 00:12:29.291 A:middle
[ Audio Tone ]

00:12:29.566 --> 00:12:33.706 A:middle
As this example shows, the
notification haptic is good

00:12:33.706 --> 00:12:36.226 A:middle
for alerting people when
something important has happened

00:12:36.226 --> 00:12:37.376 A:middle
that requires their attention.

00:12:37.966 --> 00:12:41.386 A:middle
Now you get this for free if
you adopt rich notifications.

00:12:41.386 --> 00:12:42.276 A:middle
But when you're in a game

00:12:42.276 --> 00:12:46.066 A:middle
and you're exploring the world
you might use it tell the

00:12:46.066 --> 00:12:48.906 A:middle
player, "Your village
is under attack."

00:12:50.916 --> 00:12:55.466 A:middle
The direction haptics, up and
down, are used to alert people

00:12:55.466 --> 00:12:57.266 A:middle
when an important
value has increased

00:12:57.266 --> 00:12:58.576 A:middle
or decreased significantly.

00:12:59.366 --> 00:13:00.426 A:middle
So in this example,

00:12:59.366 --> 00:13:00.426 A:middle
So in this example,

00:13:01.016 --> 00:13:02.546 A:middle
[ Audio Tone ]

00:13:02.546 --> 00:13:03.356 A:middle
Your health is low.

00:13:04.396 --> 00:13:05.866 A:middle
Or when you drink
a health potion,

00:13:06.061 --> 00:13:08.061 A:middle
[ Audio Tone ]

00:13:08.106 --> 00:13:08.806 A:middle
You feel better.

00:13:11.616 --> 00:13:14.156 A:middle
There's also a tone for
starting an activity

00:13:14.496 --> 00:13:19.096 A:middle
such as beginning a race.

00:13:19.296 --> 00:13:20.976 A:middle
Or when you wish to pause.

00:13:21.516 --> 00:13:25.816 A:middle
[ Audio Tone ]

00:13:26.316 --> 00:13:29.106 A:middle
The success haptic provides
a confirmation tone.

00:13:29.326 --> 00:13:30.976 A:middle
And this is good for
something like --

00:13:31.016 --> 00:13:32.656 A:middle
[ Audio Tone ]

00:13:32.656 --> 00:13:38.746 A:middle
You won. Or if you didn't
make it, please try again.

00:13:40.296 --> 00:13:44.086 A:middle
And as a final example, there's
a very subtle click haptic.

00:13:44.796 --> 00:13:46.206 A:middle
This haptic is a bit special.

00:13:46.886 --> 00:13:49.066 A:middle
As you can see, it's
much quieter

00:13:49.146 --> 00:13:50.356 A:middle
and shorter than the others.

00:13:50.926 --> 00:13:53.076 A:middle
In fact, I'm not sure if you'll
be able to hear the audio

00:13:53.376 --> 00:13:54.786 A:middle
but let's give it a shot.

00:13:58.956 --> 00:14:02.176 A:middle
This haptic provides the
sensation of a dial clicking

00:13:58.956 --> 00:14:02.176 A:middle
This haptic provides the
sensation of a dial clicking

00:14:02.176 --> 00:14:04.006 A:middle
at defined increments
or intervals.

00:14:04.556 --> 00:14:09.266 A:middle
In a game this might be nice
for picking a lock on a chest

00:14:09.266 --> 00:14:10.506 A:middle
or giving the user feedback

00:14:10.506 --> 00:14:11.906 A:middle
that they have bumped
into an obstacle.

00:14:12.436 --> 00:14:18.366 A:middle
Now that I've given some
examples I want to just point

00:14:18.366 --> 00:14:20.876 A:middle
out that it's really easy to
adopt these haptic events.

00:14:20.916 --> 00:14:25.026 A:middle
You call play and you pass
in the constant for the type

00:14:25.056 --> 00:14:27.636 A:middle
that you desire and the
feeling you wish to evoke.

00:14:28.026 --> 00:14:32.436 A:middle
And let me finish
up with haptics

00:14:32.436 --> 00:14:33.586 A:middle
with some considerations.

00:14:34.126 --> 00:14:37.056 A:middle
The Taptic Engine differs
from conventional audio

00:14:37.736 --> 00:14:42.706 A:middle
in that you can only play
one haptic at a time.

00:14:42.906 --> 00:14:45.486 A:middle
Also note that these
effects serve

00:14:45.486 --> 00:14:47.816 A:middle
to draw attention
to important events.

00:14:48.586 --> 00:14:51.946 A:middle
And their effectiveness
diminishes if you have

00:14:51.946 --> 00:14:53.906 A:middle
to make the watch
vibrate constantly.

00:14:54.596 --> 00:14:56.226 A:middle
So please exercise restraint

00:14:56.616 --> 00:14:58.816 A:middle
and I think you'll have a
really awesome experience here.

00:14:59.446 --> 00:15:04.046 A:middle
So to recap, we discussed
gesture recognizers

00:14:59.446 --> 00:15:04.046 A:middle
So to recap, we discussed
gesture recognizers

00:15:04.046 --> 00:15:05.706 A:middle
and some ideas for
using them in the game.

00:15:06.416 --> 00:15:08.336 A:middle
We showed how you can
incorporate the crown

00:15:08.336 --> 00:15:09.966 A:middle
for compelling game play.

00:15:10.926 --> 00:15:13.776 A:middle
We described how to incorporate
the accelerometer into your app.

00:15:14.326 --> 00:15:16.616 A:middle
And finally, we discussed
using haptic feedback

00:15:16.856 --> 00:15:18.306 A:middle
to make your game
more immersive.

00:15:19.506 --> 00:15:21.966 A:middle
And now I'd like to hand
it off to Fatima to talk

00:15:21.966 --> 00:15:23.236 A:middle
about our graphics frameworks.

00:15:23.486 --> 00:15:23.806 A:middle
Thank you.

00:15:24.516 --> 00:15:31.296 A:middle
[ Applause ]

00:15:31.796 --> 00:15:32.556 A:middle
&gt;&gt; Thank you, Christy.

00:15:34.516 --> 00:15:35.256 A:middle
Hi, everyone.

00:15:35.286 --> 00:15:37.876 A:middle
My name is Fatima and in this
section we're going to talk

00:15:37.876 --> 00:15:40.546 A:middle
about our graphics frameworks,
SpriteKit, and SceneKit

00:15:40.926 --> 00:15:45.696 A:middle
that you can use to make really
cool games on Apple Watch.

00:15:46.686 --> 00:15:48.356 A:middle
So what are SpriteKit
and SceneKit?

00:15:48.916 --> 00:15:52.276 A:middle
SpriteKit and SceneKit are
Apple's 2D and 3D frameworks

00:15:52.276 --> 00:15:53.486 A:middle
for games and graphics.

00:15:54.206 --> 00:15:56.056 A:middle
You can use either
framework in your game

00:15:56.056 --> 00:15:57.806 A:middle
or you can even combine
them together.

00:15:58.816 --> 00:16:00.686 A:middle
They are easy to
use and they come

00:15:58.816 --> 00:16:00.686 A:middle
They are easy to
use and they come

00:16:00.686 --> 00:16:03.536 A:middle
with great integrated
tools and editors in Xcode.

00:16:04.376 --> 00:16:08.606 A:middle
They are available
on macOS, iOS, tvOS,

00:16:08.606 --> 00:16:10.866 A:middle
and this year they are
available on watchOS.

00:16:12.646 --> 00:16:17.726 A:middle
On Apple Watch SpriteKit and
SceneKit are bringing you

00:16:17.726 --> 00:16:20.066 A:middle
for the first time
GPU accelerated,

00:16:20.066 --> 00:16:21.076 A:middle
real-time rendering.

00:16:21.886 --> 00:16:25.646 A:middle
And this will enable you to
make really dynamic content

00:16:25.836 --> 00:16:27.966 A:middle
and also make your games
really interactive.

00:16:29.536 --> 00:16:34.186 A:middle
So now let's look at
some of the cool features

00:16:34.186 --> 00:16:35.436 A:middle
that you can use on Apple Watch.

00:16:36.216 --> 00:16:39.366 A:middle
And we're going to
start with animations.

00:16:41.426 --> 00:16:44.906 A:middle
You can create 2D animations
in SpriteKit with SKAction.

00:16:45.436 --> 00:16:49.236 A:middle
And you can create 3D animations
in SceneKit with SDNAction

00:16:49.336 --> 00:16:50.726 A:middle
to make your games interactive.

00:16:52.536 --> 00:16:56.416 A:middle
You can use actions to move,
rotate, and scale your objects

00:16:56.486 --> 00:17:00.126 A:middle
by either applying a single
action or applying a sequence

00:16:56.486 --> 00:17:00.126 A:middle
by either applying a single
action or applying a sequence

00:17:00.126 --> 00:17:02.966 A:middle
of actions to make more
complex animations.

00:17:07.486 --> 00:17:09.296 A:middle
Next we have particles.

00:17:10.316 --> 00:17:13.646 A:middle
You can create particle
simulations in both SpriteKit

00:17:13.646 --> 00:17:16.086 A:middle
and SceneKit to add interesting
effects to your game.

00:17:18.486 --> 00:17:23.796 A:middle
Using particle simulations you
can simulate fire, snow, rain,

00:17:23.836 --> 00:17:25.836 A:middle
and many, many other
interesting effects.

00:17:29.896 --> 00:17:31.606 A:middle
Next we have physics.

00:17:32.636 --> 00:17:36.116 A:middle
Both SpriteKit and SceneKit
have integrated physics

00:17:36.116 --> 00:17:37.906 A:middle
to make your game
even more interesting.

00:17:39.646 --> 00:17:41.506 A:middle
You can turn on physics
for your object

00:17:41.736 --> 00:17:44.046 A:middle
and then define properties
on them like mass,

00:17:44.346 --> 00:17:47.206 A:middle
velocity, and friction.

00:17:47.676 --> 00:17:50.736 A:middle
These properties will then
define how your objects move,

00:17:51.306 --> 00:17:54.056 A:middle
how they respond to
collisions, and how they react

00:17:54.056 --> 00:17:55.556 A:middle
to forces in your simulation.

00:18:00.716 --> 00:18:01.926 A:middle
Next we have lighting.

00:18:02.086 --> 00:18:04.066 A:middle
You can also add light
sources to your game.

00:18:05.296 --> 00:18:07.786 A:middle
And lights is just
another node in your scene.

00:18:08.426 --> 00:18:11.356 A:middle
So now you can apply actions
on it to move it around.

00:18:12.856 --> 00:18:16.026 A:middle
And one cool feature here
that we have for lighting is

00:18:16.026 --> 00:18:18.756 A:middle
that you can automatically
generate your normal maps

00:18:19.396 --> 00:18:20.576 A:middle
using SKTextures.

00:18:27.236 --> 00:18:28.346 A:middle
Next we have camera.

00:18:28.966 --> 00:18:32.586 A:middle
Both SpriteKit and SceneKit
have a camera that you can use.

00:18:33.036 --> 00:18:34.666 A:middle
And if you decide
to use a camera,

00:18:35.096 --> 00:18:38.616 A:middle
then we will render the scene
from the camera's position.

00:18:38.806 --> 00:18:43.226 A:middle
So the camera is really the
center of your viewport.

00:18:45.496 --> 00:18:48.906 A:middle
And the camera is also just like
any other node in your scene.

00:18:49.466 --> 00:18:52.446 A:middle
So now you can move it around
by applying actions on it.

00:18:56.006 --> 00:18:59.296 A:middle
Next we have shapes and text.

00:18:59.396 --> 00:19:01.856 A:middle
Text can be added as
a node to your game.

00:18:59.396 --> 00:19:01.856 A:middle
Text can be added as
a node to your game.

00:19:02.486 --> 00:19:04.976 A:middle
So now it is really
easy to display text

00:19:05.496 --> 00:19:07.796 A:middle
and also apply actions
and physics on it.

00:19:10.956 --> 00:19:15.146 A:middle
We also have shape nodes so
now you can also create dynamic

00:19:15.146 --> 00:19:16.836 A:middle
and geometric shapes
in your game.

00:19:17.436 --> 00:19:21.426 A:middle
And we also have
programmable shaders

00:19:21.876 --> 00:19:23.546 A:middle
in both SpriteKit and SceneKit.

00:19:23.936 --> 00:19:25.786 A:middle
You can create shaders
in SpriteKit

00:19:26.246 --> 00:19:28.916 A:middle
and you can create shader
modifiers in SceneKit

00:19:29.666 --> 00:19:32.326 A:middle
to achieve most custom
looks to your game elements.

00:19:34.466 --> 00:19:38.946 A:middle
So now that we have seen
some of the cool features

00:19:38.946 --> 00:19:42.506 A:middle
that you can use, let's
see how exactly SpriteKit

00:19:42.506 --> 00:19:44.306 A:middle
and SceneKit are
different on Apple Watch.

00:19:45.096 --> 00:19:49.426 A:middle
And I'm going to
start with SpriteKit.

00:19:50.366 --> 00:19:52.916 A:middle
So in SpriteKit we
have an SKView

00:19:53.806 --> 00:19:55.696 A:middle
that we use to present
our scene.

00:19:57.246 --> 00:19:59.166 A:middle
And our scene can
contain many nodes.

00:20:01.836 --> 00:20:04.746 A:middle
For example, we have
SKSprite Node to add sprites.

00:20:05.556 --> 00:20:07.666 A:middle
We have SKLight Node
to add lighting.

00:20:07.666 --> 00:20:10.876 A:middle
And we have SKEmitter Node
to create particle systems.

00:20:12.506 --> 00:20:14.936 A:middle
On watchOS a few
things are different.

00:20:16.596 --> 00:20:21.526 A:middle
First, we don't have an
SKView but now we have

00:20:21.526 --> 00:20:24.316 A:middle
to use WKInterface SKScene
to present our scene.

00:20:28.536 --> 00:20:32.446 A:middle
We also don't have CIFilters but
we can achieve the same effects

00:20:32.766 --> 00:20:34.146 A:middle
with using an SKShader.

00:20:37.076 --> 00:20:40.366 A:middle
We don't have positional audio
but we can play sounds just

00:20:40.366 --> 00:20:44.366 A:middle
like any other platform
using SKAction playSound.

00:20:47.166 --> 00:20:50.466 A:middle
And finally, we don't
have SKVideo Node

00:20:50.636 --> 00:20:54.936 A:middle
but we can use WKInterface
Movie to play a video.

00:21:00.096 --> 00:21:02.986 A:middle
And this table summarizes the
differences for SpriteKit.

00:21:03.806 --> 00:21:06.196 A:middle
For SceneKit we almost
have the same differences.

00:21:06.676 --> 00:21:11.006 A:middle
Instead of SCNView now we have
to use WKInterface SCNScene.

00:21:12.906 --> 00:21:16.256 A:middle
We don't have positional audio
but we do have standard audio.

00:21:17.256 --> 00:21:19.446 A:middle
And we don't have
access to CIFilters

00:21:19.736 --> 00:21:23.156 A:middle
but we can use Shader Modifiers
to achieve the same effects.

00:21:26.036 --> 00:21:27.936 A:middle
So now let's walk
through an example

00:21:27.936 --> 00:21:30.416 A:middle
of creating a game
target on Apple Watch

00:21:30.816 --> 00:21:32.876 A:middle
for an already existing
iOS game.

00:21:37.526 --> 00:21:42.556 A:middle
And here I am using the
SpriteKit template on iOS.

00:21:42.616 --> 00:21:45.686 A:middle
On the left we can
see our project files

00:21:46.176 --> 00:21:48.076 A:middle
and we can take a look
at our game scene.

00:21:49.076 --> 00:21:51.976 A:middle
And we can see here that we are
using a really simple scene.

00:21:55.906 --> 00:21:58.416 A:middle
We can also take a look at
our GameView Controller.

00:21:59.716 --> 00:22:04.786 A:middle
And we can see here that
we are using an SKView

00:21:59.716 --> 00:22:04.786 A:middle
And we can see here that
we are using an SKView

00:22:04.846 --> 00:22:06.006 A:middle
to present our scene.

00:22:08.416 --> 00:22:11.856 A:middle
Now to create a game target on
Apple Watch all we have to do is

00:22:11.936 --> 00:22:13.636 A:middle
to click File, New Target.

00:22:14.826 --> 00:22:19.356 A:middle
Choose the Game App
template under watchOS.

00:22:19.356 --> 00:22:25.186 A:middle
Give it a name and
then press Finish.

00:22:25.786 --> 00:22:33.306 A:middle
Now this template created two
folders for us: The app folder

00:22:33.306 --> 00:22:37.806 A:middle
which contains our storyboard
and our extension folder

00:22:37.806 --> 00:22:41.146 A:middle
which contains our Interface
Controller and our game scenes.

00:22:44.576 --> 00:22:46.876 A:middle
So now let's take a
look at our storyboard.

00:22:47.916 --> 00:22:50.476 A:middle
And this is our storyboard
and we can see

00:22:50.706 --> 00:22:52.796 A:middle
that we have our interface
object in the middle.

00:22:52.796 --> 00:22:55.786 A:middle
And our interface
object was selected

00:22:55.786 --> 00:22:57.086 A:middle
from our object library.

00:22:57.766 --> 00:23:00.096 A:middle
And here we can see
that we have the options

00:22:57.766 --> 00:23:00.096 A:middle
And here we can see
that we have the options

00:23:00.466 --> 00:23:02.516 A:middle
between choosing
a SceneKit Scene

00:23:02.516 --> 00:23:05.536 A:middle
to display SceneKit content
and a SpriteKit Scene

00:23:05.536 --> 00:23:07.466 A:middle
to display SpriteKit content.

00:23:10.896 --> 00:23:14.786 A:middle
Also our interface object
has an outlet defined

00:23:14.786 --> 00:23:17.116 A:middle
in our Interface
Controller so we can use it

00:23:17.116 --> 00:23:18.196 A:middle
to present our scenes.

00:23:19.266 --> 00:23:21.026 A:middle
So let's take a look at that.

00:23:21.156 --> 00:23:25.326 A:middle
And this is that
Interface Controller.

00:23:27.306 --> 00:23:29.576 A:middle
And now let's take a
closer look at this code.

00:23:31.196 --> 00:23:34.266 A:middle
And here we see that we
have our interface object

00:23:35.826 --> 00:23:37.856 A:middle
and in awake(withContext
we can see

00:23:37.856 --> 00:23:39.926 A:middle
that we are loading
the scene just

00:23:39.926 --> 00:23:41.366 A:middle
like the way we do within iOS.

00:23:44.096 --> 00:23:46.676 A:middle
And finally we are using
the interface object

00:23:47.026 --> 00:23:49.466 A:middle
to present our scene
just like the way we did

00:23:49.466 --> 00:23:50.586 A:middle
within an SKView in iOS.

00:23:54.736 --> 00:23:57.836 A:middle
And these are all the steps that
you need to create a game target

00:23:57.836 --> 00:24:00.556 A:middle
on Apple Watch for an
already existing iOS game.

00:23:57.836 --> 00:24:00.556 A:middle
on Apple Watch for an
already existing iOS game.

00:24:03.056 --> 00:24:06.696 A:middle
And now I'm going to
hand it over to Christy

00:24:06.696 --> 00:24:07.976 A:middle
to go over social gaming.

00:24:08.516 --> 00:24:19.406 A:middle
[ Applause ]

00:24:19.906 --> 00:24:20.686 A:middle
&gt;&gt; Christy Warren:
Thank you, Fatima.

00:24:21.776 --> 00:24:23.306 A:middle
Now let's talk about
Game Center.

00:24:24.886 --> 00:24:28.736 A:middle
Today games are a lot about
encouraging engagement

00:24:29.106 --> 00:24:30.626 A:middle
and competition with friends.

00:24:32.036 --> 00:24:35.436 A:middle
Game Center makes it easy to
share achievements and scores

00:24:35.636 --> 00:24:38.596 A:middle
or even play a game together.

00:24:38.666 --> 00:24:42.196 A:middle
For multiplayer on
Apple Watch we'll focus

00:24:42.196 --> 00:24:43.336 A:middle
on turn-based gaming.

00:24:44.756 --> 00:24:45.986 A:middle
Turn-based gaming is something

00:24:45.986 --> 00:24:48.726 A:middle
that we think is a really
excellent match for Apple Watch.

00:24:49.496 --> 00:24:54.126 A:middle
It supports brief
interactions and there's no need

00:24:54.126 --> 00:24:55.986 A:middle
for both players to be present.

00:24:56.686 --> 00:25:00.686 A:middle
I can take a turn and when
I'm done I can pass it to you.

00:24:56.686 --> 00:25:00.686 A:middle
I can take a turn and when
I'm done I can pass it to you.

00:25:01.296 --> 00:25:02.766 A:middle
You'll get a rich notification

00:25:03.586 --> 00:25:05.596 A:middle
and you may take the
turn at your leisure.

00:25:05.596 --> 00:25:10.236 A:middle
There are various details on how
to implement a turn-based game

00:25:10.306 --> 00:25:12.136 A:middle
that we've talked
about in past years.

00:25:13.276 --> 00:25:16.846 A:middle
But today we'll highlight
what is unique to Apple Watch.

00:25:17.796 --> 00:25:20.756 A:middle
For other details please
review our documentation

00:25:21.546 --> 00:25:22.856 A:middle
or view past sessions.

00:25:23.676 --> 00:25:26.256 A:middle
I'd also like to call out
some great new features

00:25:26.256 --> 00:25:28.936 A:middle
for Game Center in iOS 10 that
were covered this morning.

00:25:28.936 --> 00:25:30.806 A:middle
And if you didn't catch that,

00:25:30.806 --> 00:25:32.566 A:middle
I'd encourage you to
watch it on video.

00:25:33.186 --> 00:25:38.206 A:middle
To get started on making
a turn-based game let's

00:25:38.206 --> 00:25:39.206 A:middle
talk authentication.

00:25:39.816 --> 00:25:45.106 A:middle
It is simpler than iOS
in that you do not need

00:25:45.106 --> 00:25:47.876 A:middle
to enter a password
on the Apple Watch.

00:25:48.366 --> 00:25:51.646 A:middle
When you sign in on the phone
you're automatically signed

00:25:51.646 --> 00:25:53.306 A:middle
in on Apple Watch.

00:25:54.316 --> 00:25:58.056 A:middle
Also if you're familiar
with Game Center for iOS,

00:25:58.446 --> 00:26:01.076 A:middle
you may be aware of a View
Controller that you get

00:25:58.446 --> 00:26:01.076 A:middle
you may be aware of a View
Controller that you get

00:26:01.526 --> 00:26:03.786 A:middle
and you have to present
under some circumstances.

00:26:03.786 --> 00:26:06.606 A:middle
On iOS -- I mean on Watch
OS -- that is not necessary.

00:26:08.716 --> 00:26:10.526 A:middle
Now let's show this in code.

00:26:11.496 --> 00:26:14.566 A:middle
For those of you not
familiar with Game Center,

00:26:15.256 --> 00:26:17.616 A:middle
there is the GKLocal Player
singleton which is sort

00:26:17.616 --> 00:26:19.126 A:middle
of the focus of our API's.

00:26:19.496 --> 00:26:22.196 A:middle
In this case we sent an
authentication Handler

00:26:23.156 --> 00:26:24.186 A:middle
and this gets called

00:26:25.106 --> 00:26:28.156 A:middle
when authentication
completes either successfully

00:26:28.156 --> 00:26:28.766 A:middle
or with an error.

00:26:28.766 --> 00:26:31.566 A:middle
If you succeed, you can
give the user feedback

00:26:31.566 --> 00:26:34.526 A:middle
if they have signed in and
you can start game play.

00:26:35.206 --> 00:26:40.336 A:middle
Now that we've authenticated you
can create a turn-based match.

00:26:40.776 --> 00:26:43.286 A:middle
An important decision
here is how to match

00:26:43.286 --> 00:26:44.386 A:middle
up with other players.

00:26:44.956 --> 00:26:47.606 A:middle
Now the easiest way here is

00:26:47.606 --> 00:26:50.006 A:middle
to let Game Center pick
the other player for you

00:26:50.006 --> 00:26:51.376 A:middle
and this is called Automatch.

00:26:52.376 --> 00:26:55.666 A:middle
Alternatively, you can load
a list of recent players

00:26:55.796 --> 00:26:57.256 A:middle
and invite one programmatically.

00:26:58.576 --> 00:26:59.986 A:middle
So let's start with Automatch.

00:27:00.646 --> 00:27:03.206 A:middle
Here you create a
GKMatchRequest.

00:27:04.016 --> 00:27:05.826 A:middle
You pass it to the method find,

00:27:06.366 --> 00:27:09.276 A:middle
the class method find
on GKTurnBasedMatch.

00:27:10.006 --> 00:27:14.036 A:middle
And when this returns it gives
you a new turn-based match

00:27:14.036 --> 00:27:15.566 A:middle
instance that you can use

00:27:15.566 --> 00:27:17.426 A:middle
to store your data
and play your game.

00:27:18.166 --> 00:27:21.946 A:middle
Now please be aware that
this may be a new match or,

00:27:22.836 --> 00:27:25.596 A:middle
if Norman created a
game and took his turn,

00:27:26.366 --> 00:27:28.736 A:middle
I may be joining his
game in an open slot.

00:27:28.846 --> 00:27:32.846 A:middle
So your game needs to take
into account both cases.

00:27:33.856 --> 00:27:35.326 A:middle
So let's show this in code.

00:27:37.066 --> 00:27:40.696 A:middle
You create your Match
Request and you set parameters

00:27:40.696 --> 00:27:45.426 A:middle
such as the maximum number of
players and you call a find.

00:27:45.596 --> 00:27:47.486 A:middle
When that succeeds you
can start your game.

00:27:48.296 --> 00:27:49.406 A:middle
It's really that easy.

00:27:49.996 --> 00:27:54.026 A:middle
And programmatic invites
are almost identical.

00:27:55.026 --> 00:27:58.516 A:middle
You just set another parameter
here which is recipients

00:27:58.676 --> 00:28:01.276 A:middle
and that is from a list of
players that you've chosen.

00:27:58.676 --> 00:28:01.276 A:middle
and that is from a list of
players that you've chosen.

00:28:01.786 --> 00:28:06.056 A:middle
However, to do this you need
to access a list of players

00:28:06.256 --> 00:28:07.116 A:middle
who you can play with.

00:28:08.456 --> 00:28:10.676 A:middle
So I'll show you some
sample code for this.

00:28:11.816 --> 00:28:14.436 A:middle
This shows you how to access
the recent players list.

00:28:14.616 --> 00:28:17.136 A:middle
And a good place to -- and
let's suppose you have a class.

00:28:17.916 --> 00:28:19.196 A:middle
There's a player picker

00:28:19.196 --> 00:28:20.756 A:middle
that will let you
pick from this list.

00:28:21.846 --> 00:28:25.326 A:middle
So in awake we can call

00:28:25.326 --> 00:28:28.306 A:middle
on the Local Player
singleton loadRecentPlayers.

00:28:28.876 --> 00:28:31.136 A:middle
And this assumes that you've
previously authenticated

00:28:31.136 --> 00:28:32.346 A:middle
in your main interface.

00:28:33.546 --> 00:28:36.836 A:middle
And we call loadRecentPlayers
and you receive a list

00:28:36.836 --> 00:28:41.096 A:middle
of players that you, you know,
you have played with recently

00:28:41.096 --> 00:28:45.396 A:middle
on phone, or pad, or on
watch through Automatch.

00:28:45.646 --> 00:28:50.226 A:middle
Now it's important to mention
that once we've loaded this

00:28:50.226 --> 00:28:54.936 A:middle
and saved it away you need to
pick it, pick your opponent.

00:28:56.756 --> 00:28:59.246 A:middle
So in order to help you
present this list of players

00:28:59.246 --> 00:29:01.926 A:middle
and give you a head start on
building a turn-based game,

00:28:59.246 --> 00:29:01.926 A:middle
and give you a head start on
building a turn-based game,

00:29:02.776 --> 00:29:05.126 A:middle
we've created a sample
app, HelloGameKit,

00:29:05.126 --> 00:29:07.296 A:middle
that implements the basics
of a turn-based game.

00:29:07.976 --> 00:29:10.096 A:middle
It's also built on the
new SpriteKit template.

00:29:10.096 --> 00:29:12.156 A:middle
And as a bonus it
will demonstrate how

00:29:12.156 --> 00:29:13.586 A:middle
to use gesture recognizers.

00:29:14.416 --> 00:29:16.236 A:middle
So I'd like to walk
you through a brief,

00:29:16.426 --> 00:29:18.146 A:middle
briefly walk through
this example.

00:29:19.136 --> 00:29:22.696 A:middle
When you launch the app it
brings up a screen like this

00:29:22.736 --> 00:29:23.996 A:middle
and it says, "Authenticating."

00:29:25.106 --> 00:29:28.516 A:middle
When the authenticate completes
it shows your display name

00:29:28.516 --> 00:29:30.246 A:middle
on the top and gives you a place

00:29:30.246 --> 00:29:31.676 A:middle
to pick your opponent
on the bottom.

00:29:32.866 --> 00:29:36.446 A:middle
This counter in the middle
counts the various taps

00:29:36.446 --> 00:29:37.736 A:middle
that you've made
and records them

00:29:37.736 --> 00:29:39.146 A:middle
and saves them into
the game model.

00:29:39.146 --> 00:29:40.476 A:middle
This is just a simple thing

00:29:40.796 --> 00:29:43.056 A:middle
that will save an error
in turn-based match.

00:29:43.956 --> 00:29:46.276 A:middle
Now if you've tapped Pick
an Opponent on the bottom,

00:29:46.856 --> 00:29:48.966 A:middle
it'll bring up a player
picker that loads the list

00:29:48.966 --> 00:29:50.776 A:middle
of recent players and
lets you pick one.

00:29:52.066 --> 00:29:53.826 A:middle
It also gives you the
option to Automatch

00:29:53.826 --> 00:29:56.406 A:middle
but in this case I
want to play with Alan.

00:29:56.976 --> 00:29:58.646 A:middle
So now he's playing with me.

00:29:59.696 --> 00:30:03.636 A:middle
If I want to access the list
of matches, I can swipe left

00:29:59.696 --> 00:30:03.636 A:middle
If I want to access the list
of matches, I can swipe left

00:30:03.796 --> 00:30:05.316 A:middle
and I'll get the Match Browser.

00:30:06.036 --> 00:30:07.946 A:middle
Here I can create a
new match with Alan

00:30:08.546 --> 00:30:10.076 A:middle
or I can pick an existing game.

00:30:10.176 --> 00:30:11.706 A:middle
So I'm going to go
back to that game.

00:30:12.956 --> 00:30:16.606 A:middle
And finally, I can end
my turn with a long press

00:30:16.936 --> 00:30:19.756 A:middle
and that will pass it to Alan
and he can take his turn.

00:30:20.356 --> 00:30:23.076 A:middle
So that's HelloGameKit.

00:30:23.586 --> 00:30:25.226 A:middle
You can download it under
the developers' site

00:30:25.226 --> 00:30:26.596 A:middle
under Session 612.

00:30:26.946 --> 00:30:29.186 A:middle
Click on the Resources
tab to find that sample.

00:30:29.806 --> 00:30:34.376 A:middle
So to recap, Game Center

00:30:34.376 --> 00:30:36.896 A:middle
in watchOS gives you
streamlined authentication.

00:30:37.986 --> 00:30:42.476 A:middle
It is a programmatic API but
we give you the sample app

00:30:42.766 --> 00:30:46.016 A:middle
that has UI for all the
things that you need to do.

00:30:46.136 --> 00:30:48.176 A:middle
So we hope that will
give you a good start.

00:30:49.606 --> 00:30:53.716 A:middle
So with that I'd like to
hand it over to Tyler to talk

00:30:53.716 --> 00:30:54.976 A:middle
about tools and best practices.

00:30:55.516 --> 00:31:01.566 A:middle
[ Applause ]

00:30:55.516 --> 00:31:01.566 A:middle
[ Applause ]

00:31:02.066 --> 00:31:02.986 A:middle
&gt;&gt; Thanks, Christy.

00:31:02.986 --> 00:31:04.026 A:middle
So now you've been
introduced to some

00:31:04.026 --> 00:31:06.106 A:middle
of the frameworks you have
available on Apple Watch.

00:31:06.106 --> 00:31:07.446 A:middle
Let's talk about tools.

00:31:07.446 --> 00:31:09.126 A:middle
Many of you may be
familiar with our rich set

00:31:09.126 --> 00:31:11.526 A:middle
of game tools already
available inside of Xcode.

00:31:11.526 --> 00:31:12.676 A:middle
And I'm happy to
tell you that all

00:31:12.676 --> 00:31:14.526 A:middle
of these tools are
also available for you

00:31:14.526 --> 00:31:16.386 A:middle
for your Apple Watch
development.

00:31:17.696 --> 00:31:20.066 A:middle
This includes our scene
editor which takes the process

00:31:20.066 --> 00:31:22.796 A:middle
of setting up and laying
out your scene from code

00:31:22.866 --> 00:31:25.366 A:middle
and moves it into a visual
editor right inside of Xcode.

00:31:26.266 --> 00:31:28.486 A:middle
So instead of repeatedly
compiling and iterating

00:31:28.486 --> 00:31:30.946 A:middle
on a positioning of your
scene, you're able to see

00:31:30.946 --> 00:31:33.236 A:middle
and manipulate exactly where
your nodes will be placed.

00:31:34.006 --> 00:31:35.236 A:middle
And on top of that you're able

00:31:35.236 --> 00:31:36.686 A:middle
to easily manipulate
the hierarchy

00:31:36.686 --> 00:31:40.296 A:middle
of your scene using the scene
outline views, and create

00:31:40.296 --> 00:31:42.386 A:middle
and modify your physics
bodies for your nodes,

00:31:42.456 --> 00:31:44.166 A:middle
all without touching
a single line of code.

00:31:45.386 --> 00:31:47.726 A:middle
Now our scene editors
also include a built

00:31:47.726 --> 00:31:48.776 A:middle
in action editor.

00:31:49.196 --> 00:31:51.336 A:middle
This lets you easily
create, modify,

00:31:51.336 --> 00:31:54.576 A:middle
and preview complex reusable
animations right inside

00:31:54.576 --> 00:31:55.266 A:middle
of your level.

00:31:55.266 --> 00:31:57.846 A:middle
So whether you're creating
a complex cut scene

00:31:57.846 --> 00:32:00.286 A:middle
to introduce your level
or a character animation

00:31:57.846 --> 00:32:00.286 A:middle
to introduce your level
or a character animation

00:32:00.286 --> 00:32:02.536 A:middle
that you'll be reusing
throughout your code,

00:32:02.726 --> 00:32:04.916 A:middle
it's all easily possible
with this action editor.

00:32:05.476 --> 00:32:08.346 A:middle
Now as you're developing
your game you're going

00:32:08.346 --> 00:32:10.736 A:middle
to find the powerful particle
engines of both SpriteKit

00:32:10.736 --> 00:32:12.456 A:middle
and SceneKit are going
to play an important role

00:32:12.456 --> 00:32:13.586 A:middle
in bringing your game to life.

00:32:14.346 --> 00:32:15.646 A:middle
But creating that
perfect particle

00:32:15.646 --> 00:32:16.936 A:middle
for your game can be difficult

00:32:16.936 --> 00:32:18.256 A:middle
if you're not able
to visualize it.

00:32:18.566 --> 00:32:21.726 A:middle
And fortunately we provide you
a flexible tool for creating

00:32:21.726 --> 00:32:23.066 A:middle
and visualizing your particles.

00:32:23.066 --> 00:32:25.806 A:middle
So you're allowed access to
the huge number of properties

00:32:25.806 --> 00:32:27.066 A:middle
that we have on our particles

00:32:27.066 --> 00:32:28.826 A:middle
so that you can see
their effect immediately

00:32:28.826 --> 00:32:29.756 A:middle
as they are changing them.

00:32:30.286 --> 00:32:33.906 A:middle
And we also have tools to help
you maintain great performance

00:32:33.906 --> 00:32:34.666 A:middle
in Apple Watch.

00:32:34.846 --> 00:32:36.326 A:middle
This includes our
texture atlases.

00:32:37.036 --> 00:32:38.116 A:middle
When you place your images

00:32:38.116 --> 00:32:40.976 A:middle
within a Sprite atlas
we'll automatically rotate

00:32:40.976 --> 00:32:43.176 A:middle
and reposition them to
form a single image.

00:32:43.796 --> 00:32:46.136 A:middle
This reduces the number of draw
calls your game needs to make.

00:32:46.136 --> 00:32:47.176 A:middle
And what's great about this is

00:32:47.176 --> 00:32:48.816 A:middle
that nothing changes
for you in code.

00:32:49.246 --> 00:32:51.076 A:middle
You're still able to
operate on these textures

00:32:51.076 --> 00:32:52.556 A:middle
as if they're individual files.

00:32:53.186 --> 00:32:56.426 A:middle
And when your game is running
we now provide you an SPF

00:32:56.426 --> 00:32:57.376 A:middle
Performance Gauge.

00:32:57.626 --> 00:32:59.566 A:middle
And at the top of the report
you're provided a number

00:32:59.566 --> 00:33:00.936 A:middle
of real-time statistics.

00:32:59.566 --> 00:33:00.936 A:middle
of real-time statistics.

00:33:01.486 --> 00:33:02.926 A:middle
This includes your
current frame rate,

00:33:03.416 --> 00:33:06.346 A:middle
as well as your GP
utilization to see which parts

00:33:06.346 --> 00:33:07.966 A:middle
of your GP are being
used the most.

00:33:08.936 --> 00:33:11.626 A:middle
And your frame time for
both the CPU and the GPU.

00:33:11.856 --> 00:33:13.996 A:middle
And this will help indicate
whether you may CPU bound

00:33:14.126 --> 00:33:14.966 A:middle
or GPU bound.

00:33:15.386 --> 00:33:18.076 A:middle
Now in addition to
real-time statistics,

00:33:18.076 --> 00:33:20.056 A:middle
we also provide you
a timeline history

00:33:20.446 --> 00:33:22.666 A:middle
of our CPU and GPU frame times.

00:33:23.186 --> 00:33:24.836 A:middle
And what's great about
this is that will break

00:33:24.836 --> 00:33:27.526 A:middle
down your CPU frame times
into their individual parts

00:33:27.526 --> 00:33:30.046 A:middle
so you're able to see
exactly how much time it spent

00:33:30.046 --> 00:33:31.756 A:middle
rendering, or running
your update loop,

00:33:31.836 --> 00:33:33.446 A:middle
or evaluating actions
in physics,

00:33:33.686 --> 00:33:35.316 A:middle
as well as how much
time is spent idle.

00:33:36.246 --> 00:33:40.416 A:middle
And when your app is paused you
can scroll through the history

00:33:40.416 --> 00:33:43.016 A:middle
of your app's performance so
you can see how it evolves

00:33:43.016 --> 00:33:44.436 A:middle
as you progress through
your game.

00:33:45.256 --> 00:33:48.476 A:middle
And if there's a particular
interest you can dive deeper

00:33:48.476 --> 00:33:51.536 A:middle
and examine details on it
and get some exact timings.

00:33:52.136 --> 00:33:55.996 A:middle
So now there's some best
practices that you can take

00:33:55.996 --> 00:33:56.796 A:middle
to make sure that you're going

00:33:56.796 --> 00:33:58.546 A:middle
to get great performance
on Apple Watch.

00:33:59.256 --> 00:34:02.596 A:middle
A great way to reduce your
battery consumption is

00:33:59.256 --> 00:34:02.596 A:middle
A great way to reduce your
battery consumption is

00:34:02.596 --> 00:34:04.726 A:middle
to avoid updating your
scene unless you need to.

00:34:05.736 --> 00:34:08.726 A:middle
Both SpriteKit and SceneKit will
now automatically skip rendering

00:34:08.726 --> 00:34:10.926 A:middle
if we detect nothing has
changed within your scene.

00:34:11.985 --> 00:34:14.536 A:middle
And if you're working with large
assets, you should load them

00:34:14.536 --> 00:34:15.696 A:middle
at the start of your scenes

00:34:15.696 --> 00:34:17.396 A:middle
but you don't experience
any hiccups due

00:34:17.396 --> 00:34:19.196 A:middle
to loading those
assets throughout parts

00:34:19.196 --> 00:34:20.755 A:middle
of your game you
expect to be fluid.

00:34:21.876 --> 00:34:23.876 A:middle
And you should also aim for
a frame rate that's going

00:34:23.876 --> 00:34:26.255 A:middle
to provide a consistent
experience for your users.

00:34:26.255 --> 00:34:27.076 A:middle
And you can do this

00:34:27.076 --> 00:34:30.065 A:middle
by explicitly setting your
interfaces' preferred frames

00:34:30.065 --> 00:34:30.646 A:middle
per second.

00:34:31.826 --> 00:34:34.636 A:middle
Now if you do find that you're
experiencing performance issues,

00:34:34.735 --> 00:34:36.735 A:middle
there's a number of measures
that you can take to address it.

00:34:37.076 --> 00:34:39.936 A:middle
And the first being to reduce
the number of particles present

00:34:39.936 --> 00:34:41.676 A:middle
within your scene
at any given time.

00:34:42.636 --> 00:34:44.896 A:middle
You'd also try reducing
the details of your assets

00:34:44.896 --> 00:34:47.706 A:middle
that may be far in the
distance or scaled greatly.

00:34:47.706 --> 00:34:50.786 A:middle
And what' great about this is
you often won't see any change

00:34:50.786 --> 00:34:53.286 A:middle
in your game's visual fidelity
by making that reduction.

00:34:53.735 --> 00:34:55.186 A:middle
And if you're still
seeing issues,

00:34:55.446 --> 00:34:57.706 A:middle
try reducing the complexity
of your scene until you find

00:34:57.706 --> 00:35:00.196 A:middle
that right balance between
performance and content.

00:34:57.706 --> 00:35:00.196 A:middle
that right balance between
performance and content.

00:35:00.196 --> 00:35:03.446 A:middle
Now as you're developing
your game

00:35:03.446 --> 00:35:04.946 A:middle
on Apple Watch there's a number

00:35:04.946 --> 00:35:06.516 A:middle
of design considerations
you should keep

00:35:06.516 --> 00:35:07.816 A:middle
in mind throughout
your development.

00:35:08.436 --> 00:35:11.446 A:middle
Apple Watch, you shouldn't
simply be taking your iOS games

00:35:11.446 --> 00:35:13.036 A:middle
experience and scaling it down.

00:35:13.036 --> 00:35:15.006 A:middle
We want you to be
rethinking the experience.

00:35:15.456 --> 00:35:17.056 A:middle
And the Apple Watch
really lends itself

00:35:17.056 --> 00:35:18.426 A:middle
to lightweight interactions.

00:35:18.766 --> 00:35:20.536 A:middle
Users love to be able
to see the progress

00:35:20.536 --> 00:35:21.646 A:middle
of their game at a glance.

00:35:21.646 --> 00:35:23.156 A:middle
And you should be
designing your interactions

00:35:23.156 --> 00:35:24.466 A:middle
around someone who is on the go.

00:35:26.126 --> 00:35:28.666 A:middle
In addition, you're going to
want an interface that's concise

00:35:28.666 --> 00:35:31.356 A:middle
and simple, and should avoid
displaying too much information,

00:35:31.356 --> 00:35:33.226 A:middle
or being too busy on
the screen at once.

00:35:33.766 --> 00:35:35.476 A:middle
You may even want to
spread out your interactions

00:35:35.476 --> 00:35:37.756 A:middle
across multiple screens so
that you can maximize your

00:35:37.756 --> 00:35:38.536 A:middle
screen space.

00:35:39.276 --> 00:35:41.916 A:middle
And if you have any
buttons or touch targets,

00:35:41.916 --> 00:35:42.876 A:middle
make sure they're large enough

00:35:42.876 --> 00:35:45.066 A:middle
so that your users can
comfortably interact with them.

00:35:45.586 --> 00:35:47.856 A:middle
And you should also aim

00:35:47.856 --> 00:35:49.936 A:middle
to maintain visual
continuity with your app.

00:35:50.156 --> 00:35:52.156 A:middle
What that means is
transitioning from one app

00:35:52.156 --> 00:35:54.976 A:middle
into yours should feel like
a consistent experience.

00:35:55.386 --> 00:35:57.376 A:middle
And part of that can be
to select a color tint

00:35:57.376 --> 00:36:00.036 A:middle
that supports your game's brand
to use throughout your game.

00:35:57.376 --> 00:36:00.036 A:middle
that supports your game's brand
to use throughout your game.

00:36:01.276 --> 00:36:04.306 A:middle
Now we also recommend that
when possible you use a black

00:36:04.306 --> 00:36:05.326 A:middle
background for your game.

00:36:05.326 --> 00:36:06.426 A:middle
And what's great about this is

00:36:06.426 --> 00:36:08.066 A:middle
that the black will
blend seamlessly

00:36:08.066 --> 00:36:10.896 A:middle
with Apple Watch's bezel and
create this great illusion

00:36:10.896 --> 00:36:12.346 A:middle
of having an edgeless screen.

00:36:12.916 --> 00:36:16.016 A:middle
So now you've been
introduced to some

00:36:16.016 --> 00:36:18.596 A:middle
of the awesome input you have
available on Apple Watch,

00:36:18.596 --> 00:36:20.586 A:middle
and the great frameworks
that you can use

00:36:20.586 --> 00:36:23.986 A:middle
to develop your game, and a rich
set of tools that you can use

00:36:23.986 --> 00:36:25.256 A:middle
for your development workflow.

00:36:25.606 --> 00:36:27.396 A:middle
We can't wait to see
what kind of exciting

00:36:27.396 --> 00:36:29.876 A:middle
and fun games you're going to be
making on Apple Watch this year.

00:36:30.446 --> 00:36:33.886 A:middle
If you'd like more information,
please visit the Developer Site

00:36:33.886 --> 00:36:36.566 A:middle
and you can find us
under session ID 612.

00:36:37.156 --> 00:36:38.976 A:middle
And there's been a lot
of great information

00:36:39.076 --> 00:36:40.806 A:middle
from sessions previously
in the week.

00:36:40.886 --> 00:36:43.156 A:middle
This includes What's
New in SpriteKit,

00:36:43.436 --> 00:36:46.766 A:middle
What's New in Game Center,
Advances in SceneKit Rendering,

00:36:46.816 --> 00:36:48.866 A:middle
and Quick Interaction
Techniques for watchOS.

00:36:49.066 --> 00:36:51.216 A:middle
So if you want to dive
deeper into any of the areas

00:36:51.216 --> 00:36:52.176 A:middle
that we touched on today,

00:36:52.606 --> 00:36:54.276 A:middle
we highly recommend you
take a look at these.

00:36:55.286 --> 00:36:56.826 A:middle
And thank you and I
hope you enjoy the rest

00:36:56.826 --> 00:36:57.536 A:middle
of your conference.

00:36:58.516 --> 00:37:02.500 A:middle
[ Applause ]
