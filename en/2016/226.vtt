WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:09.516 --> 00:00:19.500 A:middle
[ Music ]

00:00:24.516 --> 00:00:29.396 A:middle
[ Applause ]

00:00:29.896 --> 00:00:32.586 A:middle
&gt;&gt; Good afternoon and
welcome to session 226,

00:00:32.676 --> 00:00:33.706 A:middle
What's New in CloudKit.

00:00:34.416 --> 00:00:35.576 A:middle
My name is Paul Seligman.

00:00:35.716 --> 00:00:39.116 A:middle
I'm an engineer on the CloudKit
client team and I'm very excited

00:00:39.176 --> 00:00:41.646 A:middle
to be with you here today
to talk about some updates

00:00:41.836 --> 00:00:43.786 A:middle
and new features in
the CloudKit ecosystem.

00:00:44.536 --> 00:00:45.756 A:middle
So, what are we going
to talk about today?

00:00:46.256 --> 00:00:47.266 A:middle
We're going to start off today

00:00:47.266 --> 00:00:49.356 A:middle
with a quick overview
of what is CloudKit.

00:00:49.356 --> 00:00:52.596 A:middle
We're then going to switch
gears and talk about Telemetry,

00:00:52.966 --> 00:00:54.766 A:middle
a new feature which
gives you the ability

00:00:54.766 --> 00:00:57.346 A:middle
to visualize how your
CloudKit-backed applications

00:00:57.346 --> 00:00:57.926 A:middle
are behaving.

00:00:58.506 --> 00:01:01.016 A:middle
We're going to talk about
some improvements to our APIs


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.506 --> 00:01:01.016 A:middle
We're going to talk about
some improvements to our APIs

00:01:01.016 --> 00:01:02.486 A:middle
and their availabilities.

00:01:03.116 --> 00:01:06.356 A:middle
And we're going to talk
about sharing, a new feature

00:01:06.356 --> 00:01:08.146 A:middle
which gives your
users the ability

00:01:08.146 --> 00:01:10.776 A:middle
to share their data while
maintaining full control

00:01:10.776 --> 00:01:14.546 A:middle
over who has access to it.

00:01:14.886 --> 00:01:16.916 A:middle
So, what is CloudKit?

00:01:17.476 --> 00:01:20.156 A:middle
CloudKit is a technology
that gives you the ability

00:01:20.156 --> 00:01:21.406 A:middle
to have your application data

00:01:21.696 --> 00:01:24.136 A:middle
and your user data available
wherever you need it.

00:01:25.336 --> 00:01:27.366 A:middle
CloudKit is a framework
which gives you access

00:01:27.366 --> 00:01:29.096 A:middle
to a database stored on iCloud.

00:01:30.256 --> 00:01:33.156 A:middle
We use CloudKit extensively
inside of Apple.

00:01:33.486 --> 00:01:35.826 A:middle
This gives you the confidence to
know that we are committed to it

00:01:36.016 --> 00:01:38.436 A:middle
and it gives us the confidence
to know that we can scale

00:01:38.436 --> 00:01:39.926 A:middle
to hundreds of millions
of users.

00:01:41.866 --> 00:01:44.426 A:middle
CloudKit is available on
all of Apple's platforms.

00:01:44.996 --> 00:01:49.656 A:middle
Now, I'm going to quickly
summarize an introduction

00:01:49.656 --> 00:01:52.536 A:middle
to CloudKit, covering topics
that we did a few years ago

00:01:52.536 --> 00:01:53.746 A:middle
in introduction to CloudKit.

00:01:54.046 --> 00:01:56.646 A:middle
I recommend you go check out
that session after this one

00:01:56.686 --> 00:01:58.906 A:middle
if you'd like a broader
introduction to the ecosystem.

00:01:59.986 --> 00:02:02.816 A:middle
I'd also like to mention these
talks which go into more detail


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.986 --> 00:02:02.816 A:middle
I'd also like to mention these
talks which go into more detail

00:02:02.816 --> 00:02:04.436 A:middle
about specific aspects
of CloudKit.

00:02:04.946 --> 00:02:06.836 A:middle
You can use these to
find ways that you

00:02:06.836 --> 00:02:09.295 A:middle
and your application can use
CloudKit to your advantage.

00:02:10.205 --> 00:02:12.466 A:middle
Now, all the sessions
are online and are linked

00:02:12.526 --> 00:02:14.936 A:middle
from
developer.apple.com/CloudKit.

00:02:17.046 --> 00:02:19.696 A:middle
Here we see the list of objects

00:02:19.696 --> 00:02:21.426 A:middle
that every developer
using CloudKit needs

00:02:21.426 --> 00:02:22.136 A:middle
to be familiar with.

00:02:23.096 --> 00:02:25.656 A:middle
Let's step through them
starting with Containers.

00:02:26.106 --> 00:02:30.046 A:middle
A Container is the mechanism by
which we silo data up on iCloud.

00:02:30.506 --> 00:02:32.566 A:middle
So, notes uses a Container.

00:02:32.566 --> 00:02:36.206 A:middle
Photos uses a Container and your
Applicationm when built on top

00:02:36.206 --> 00:02:38.846 A:middle
of CloudKit, will also have
access to its own Container.

00:02:39.736 --> 00:02:41.546 A:middle
If we look inside
of a Container,

00:02:41.726 --> 00:02:44.236 A:middle
we see that Containers
contains databases.

00:02:44.716 --> 00:02:47.206 A:middle
And until last week
this is our data model.

00:02:47.686 --> 00:02:50.706 A:middle
A Container had two databases,
the public and the private.

00:02:51.726 --> 00:02:53.036 A:middle
With the introduction
of Sharing,

00:02:53.036 --> 00:02:56.146 A:middle
we introduced a third database
type, the Shared database.

00:02:56.696 --> 00:02:57.896 A:middle
More about that in a little bit.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.296 --> 00:03:02.976 A:middle
The basic unit of storage
inside of CloudKit is a record.

00:03:03.406 --> 00:03:06.896 A:middle
A record is a group of key value
pairs and typically it maps

00:03:06.896 --> 00:03:09.536 A:middle
to an object model, an
object in your data model.

00:03:10.676 --> 00:03:13.286 A:middle
Now, we don't store records
loosely inside of databases.

00:03:13.616 --> 00:03:16.626 A:middle
Rather, we encapsulate
records inside of Record Zones.

00:03:17.616 --> 00:03:19.886 A:middle
Many records can exist
inside of a record zone

00:03:20.206 --> 00:03:23.146 A:middle
and many Record Zones can
exist inside of a database.

00:03:23.916 --> 00:03:27.476 A:middle
Different databases support
different types of Record Zones.

00:03:28.026 --> 00:03:31.056 A:middle
The public and private databases
have a default record zone.

00:03:31.446 --> 00:03:32.866 A:middle
This is where all your
records are going to end

00:03:32.866 --> 00:03:34.736 A:middle
up unless you specify otherwise.

00:03:35.776 --> 00:03:38.486 A:middle
Your private database can also
contain custom Record Zones

00:03:38.916 --> 00:03:41.096 A:middle
which are zones that
your application creates

00:03:41.096 --> 00:03:42.596 A:middle
and uploads into the database.

00:03:43.586 --> 00:03:46.056 A:middle
And lastly, the new
shared database consists

00:03:46.056 --> 00:03:47.226 A:middle
of shared Record Zones.

00:03:48.606 --> 00:03:50.906 A:middle
With the introduction
of sharing,

00:03:50.906 --> 00:03:53.186 A:middle
we're going to add one new
core concept to this list.

00:03:53.436 --> 00:03:54.546 A:middle
The concept of a Share.

00:03:55.676 --> 00:03:58.646 A:middle
A Share is a subclass
of a Record and as such,

00:03:58.886 --> 00:04:01.906 A:middle
lives alongside Records
inside of Record Zones.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.886 --> 00:04:01.906 A:middle
lives alongside Records
inside of Record Zones.

00:04:01.906 --> 00:04:04.596 A:middle
You can think of a Record as
being the thing that you want

00:04:04.596 --> 00:04:07.706 A:middle
to share and Share representing
how you're going to share it,

00:04:07.806 --> 00:04:09.666 A:middle
things like participants
and permissions.

00:04:10.366 --> 00:04:11.866 A:middle
Again, we'll get more
into that in a little bit.

00:04:12.056 --> 00:04:13.276 A:middle
Just know that it exists.

00:04:13.846 --> 00:04:18.286 A:middle
Now, I mentioned that we use
CloudKit extensively inside

00:04:18.286 --> 00:04:20.236 A:middle
of Apple and I wanted
to take a moment

00:04:20.236 --> 00:04:21.896 A:middle
to highlight some
of our clients.

00:04:22.486 --> 00:04:24.906 A:middle
In the public database
are a couple applications

00:04:24.906 --> 00:04:28.376 A:middle
that you've probably used,
the WWDC App and the News App.

00:04:28.836 --> 00:04:32.176 A:middle
The News App in particular
stores article content, images,

00:04:32.176 --> 00:04:33.656 A:middle
etc., in the public database.

00:04:33.956 --> 00:04:35.816 A:middle
And it's a great use
of the public database.

00:04:36.176 --> 00:04:38.556 A:middle
Storing content that you
want generally accessible

00:04:38.556 --> 00:04:39.536 A:middle
to all of your users.

00:04:40.106 --> 00:04:43.046 A:middle
And we can contrast this
with the private database.

00:04:43.496 --> 00:04:45.236 A:middle
The private database
is where you're going

00:04:45.236 --> 00:04:46.646 A:middle
to store the user's
private data.

00:04:47.346 --> 00:04:49.096 A:middle
We have several clients
of this inside

00:04:49.096 --> 00:04:52.266 A:middle
of Apple including iCloud
Backup, iCloud Drive,

00:04:52.586 --> 00:04:54.486 A:middle
iCloud Photo Library and Notes.

00:04:56.106 --> 00:04:58.986 A:middle
And I'm happy to report
that two new features,

00:04:59.296 --> 00:05:02.366 A:middle
Notes Collaboration and
Activity Sharing are both built


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.296 --> 00:05:02.366 A:middle
Notes Collaboration and
Activity Sharing are both built

00:05:02.366 --> 00:05:03.576 A:middle
on top of CloudKit Sharing.

00:05:04.326 --> 00:05:05.876 A:middle
So, as such, the Notes

00:05:05.876 --> 00:05:08.886 A:middle
and Activity Applications are
clients of the shared database.

00:05:12.276 --> 00:05:15.176 A:middle
Two years ago we
introduced CloudKit

00:05:15.176 --> 00:05:16.846 A:middle
by providing two
native frameworks,

00:05:16.846 --> 00:05:18.886 A:middle
one on iOS and one on macOS.

00:05:19.886 --> 00:05:22.796 A:middle
Last year we extended that
family, adding a data framework

00:05:22.796 --> 00:05:26.566 A:middle
for tvOS and two web
frameworks, CloudKit JS

00:05:26.566 --> 00:05:27.996 A:middle
and CloudKit Web Services.

00:05:28.686 --> 00:05:32.206 A:middle
The web frameworks give your
users access to CloudKit data,

00:05:32.476 --> 00:05:34.666 A:middle
whether they're on the
web or on a platform

00:05:34.746 --> 00:05:36.736 A:middle
that doesn't have a native
framework alternative.

00:05:37.736 --> 00:05:40.686 A:middle
And this year we're going to go
ahead and complete the circle

00:05:41.036 --> 00:05:43.316 A:middle
by adding a native
framework on watchOS.

00:05:45.246 --> 00:05:47.976 A:middle
With this, we now have a native
CloudKit framework available

00:05:47.976 --> 00:05:49.536 A:middle
across all of Apple's platforms.

00:05:50.126 --> 00:05:51.636 A:middle
Let's take a moment and step

00:05:51.636 --> 00:05:54.426 A:middle
through some notable
platform-specific changes

00:05:54.466 --> 00:05:54.836 A:middle
this year.

00:05:55.256 --> 00:05:56.596 A:middle
Starting with macOS.

00:05:57.486 --> 00:05:59.896 A:middle
The big news that we
want to share with you is

00:05:59.896 --> 00:06:00.996 A:middle
that you no longer need


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.896 --> 00:06:00.996 A:middle
that you no longer need

00:06:00.996 --> 00:06:04.166 A:middle
to distribute your application
via the Mac App Store in order

00:06:04.166 --> 00:06:06.186 A:middle
to take advantage of CloudKit.

00:06:08.316 --> 00:06:10.316 A:middle
[ Applause ]

00:06:10.616 --> 00:06:12.986 A:middle
Using the new iCloud for
Developer ID feature,

00:06:13.236 --> 00:06:15.706 A:middle
you can directly entitle your
application to use CloudKit

00:06:15.706 --> 00:06:18.886 A:middle
and other iCloud services via
your permissioning profiles.

00:06:20.566 --> 00:06:22.706 A:middle
Next I want to talk
about server to server.

00:06:23.156 --> 00:06:24.866 A:middle
This is a feature that's
been out in the wild

00:06:24.866 --> 00:06:27.736 A:middle
for a few months now and it's
the, gives you the ability

00:06:27.736 --> 00:06:31.326 A:middle
to have your servers directly
talk to CloudKit servers

00:06:31.566 --> 00:06:32.856 A:middle
as administrative users.

00:06:34.086 --> 00:06:35.766 A:middle
Your servers can
authenticate themselves

00:06:35.766 --> 00:06:38.316 A:middle
to CloudKit using a
public/private key pair you've

00:06:38.346 --> 00:06:40.496 A:middle
previously established on
the CloudKit Dashboard.

00:06:41.896 --> 00:06:45.386 A:middle
And you can set your servers
to have full rewrite access

00:06:45.386 --> 00:06:46.346 A:middle
to the public database.

00:06:47.856 --> 00:06:50.126 A:middle
This is a great way for
you to import your data

00:06:50.126 --> 00:06:53.586 A:middle
from your servers into
CloudKit or to export data

00:06:53.586 --> 00:06:55.336 A:middle
from CloudKit to your servers.

00:06:55.866 --> 00:06:58.026 A:middle
Or to keep two sets
of data up-to-date

00:06:58.026 --> 00:06:59.626 A:middle
between your servers
and CloudKit.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.626 --> 00:07:05.356 A:middle
With the introduction of
CloudKit as a native framework

00:07:05.436 --> 00:07:07.946 A:middle
on watchOS, you now
have another mechanism

00:07:07.946 --> 00:07:10.986 A:middle
to keep your watch Apps and
your iOS Apps up-to-date.

00:07:11.966 --> 00:07:14.436 A:middle
In that way, you can think
of CloudKit as an alternative

00:07:14.436 --> 00:07:15.866 A:middle
to the watch connectivity
framework.

00:07:16.306 --> 00:07:18.516 A:middle
And CloudKit comes with
one notable advantage.

00:07:18.846 --> 00:07:20.736 A:middle
That is standalone
functionality.

00:07:22.156 --> 00:07:24.916 A:middle
CloudKit uses NSURL
session and as a result,

00:07:24.916 --> 00:07:25.906 A:middle
we're going to send our network

00:07:25.906 --> 00:07:27.406 A:middle
over the best available
interface.

00:07:27.506 --> 00:07:29.866 A:middle
If your watch is
connected to an iOS device,

00:07:30.036 --> 00:07:31.936 A:middle
we'll send traffic
over that iOS device.

00:07:32.146 --> 00:07:34.696 A:middle
But the watch is also
capable of talking directly

00:07:34.696 --> 00:07:36.936 A:middle
to CloudKit servers
when it's on Wi-Fi.

00:07:39.026 --> 00:07:42.026 A:middle
Now, we are presenting
a full-ish version

00:07:42.216 --> 00:07:43.436 A:middle
of the CloudKit API.

00:07:44.986 --> 00:07:47.186 A:middle
With the introduction of
CloudKit as the native framework

00:07:47.186 --> 00:07:49.106 A:middle
on watchOS, you now
have the ability

00:07:49.106 --> 00:07:51.696 A:middle
to write similar application
code that uses CloudKit

00:07:51.896 --> 00:07:53.596 A:middle
across all of Apple's platforms.

00:07:54.366 --> 00:07:57.306 A:middle
The Activity App for
example has used this

00:07:57.406 --> 00:08:00.896 A:middle
to write similar CloudKit
code on iOS and on watchOS


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:57.406 --> 00:08:00.896 A:middle
to write similar CloudKit
code on iOS and on watchOS

00:08:01.206 --> 00:08:02.936 A:middle
to provide the activity
sharing future.

00:08:03.806 --> 00:08:07.516 A:middle
Now, notice I said similar
code and not identical code.

00:08:07.516 --> 00:08:09.426 A:middle
As you write code and
deploy it to the variety

00:08:09.426 --> 00:08:11.676 A:middle
of Apple's platforms,
you need to keep in mind

00:08:11.676 --> 00:08:13.846 A:middle
that the strengths and
realities of each platform.

00:08:14.816 --> 00:08:15.726 A:middle
In other words, you're going

00:08:15.726 --> 00:08:17.596 A:middle
to hit limited resources
in some cases.

00:08:18.456 --> 00:08:20.646 A:middle
You need to keep in mind
the CPU characteristics,

00:08:20.856 --> 00:08:23.726 A:middle
the storage capacities and
the network characteristics

00:08:23.756 --> 00:08:25.226 A:middle
such as latency and throughput.

00:08:26.016 --> 00:08:29.496 A:middle
You can use this in determining
how often you want to talk

00:08:29.496 --> 00:08:31.406 A:middle
to the servers and how
much data you're willing

00:08:31.406 --> 00:08:32.385 A:middle
to send over the wire.

00:08:33.736 --> 00:08:35.626 A:middle
As always, testing
is the best way

00:08:35.626 --> 00:08:39.265 A:middle
to tune your App appropriately
for the platform and ensure

00:08:39.265 --> 00:08:40.176 A:middle
that your users are going

00:08:40.176 --> 00:08:41.706 A:middle
to have the best
possible experience.

00:08:42.285 --> 00:08:47.636 A:middle
Now I'd like to change gears
and talk about Telemetry.

00:08:48.046 --> 00:08:50.936 A:middle
Telemetry is a new
feature which allows you

00:08:50.936 --> 00:08:52.596 A:middle
to visualize the behavior

00:08:52.596 --> 00:08:54.286 A:middle
of your CloudKit-backed
applications.

00:08:55.566 --> 00:08:58.596 A:middle
We surface Telemetry as a series
of charts which are available

00:08:58.596 --> 00:08:59.696 A:middle
on the CloudKit Dashboard.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:01.316 --> 00:09:03.466 A:middle
You can use these charts
to visualize your behavior

00:09:03.526 --> 00:09:06.686 A:middle
in the public database or an
aggregate of your behavior

00:09:06.686 --> 00:09:08.556 A:middle
across all users'
private databases.

00:09:09.866 --> 00:09:12.086 A:middle
You can scope these charts
so that you're viewing data

00:09:12.086 --> 00:09:14.676 A:middle
on an hourly, daily,
weekly or monthly basis.

00:09:15.686 --> 00:09:18.446 A:middle
And you can choose to view the
entirety of your application

00:09:18.856 --> 00:09:21.646 A:middle
or scope these charts down
to a specific operation type.

00:09:22.356 --> 00:09:24.686 A:middle
So, let's go and see
what this looks like.

00:09:26.166 --> 00:09:28.146 A:middle
Here we have the
CloudKit Dashboard

00:09:28.146 --> 00:09:29.276 A:middle
which you're probably
familiar with.

00:09:29.716 --> 00:09:32.316 A:middle
And I want to call your
attention to this new UI element

00:09:32.316 --> 00:09:34.226 A:middle
in the lower left,
the Performance tab.

00:09:35.386 --> 00:09:37.996 A:middle
When you select the Performance
tab, you now have access

00:09:37.996 --> 00:09:40.076 A:middle
to a series of charts
which gives you information

00:09:40.076 --> 00:09:41.306 A:middle
about how your clients
are behaving.

00:09:41.786 --> 00:09:43.326 A:middle
They fall into two categories.

00:09:44.026 --> 00:09:47.486 A:middle
The first is performance charts
and here we surface information

00:09:47.486 --> 00:09:50.216 A:middle
such as the number of
operations per second

00:09:50.606 --> 00:09:52.556 A:middle
and the average size
of your requests.

00:09:53.376 --> 00:09:55.696 A:middle
And again, you can scope this
so that you're visualizing data

00:09:55.696 --> 00:09:58.246 A:middle
in the public or private
database along a variety

00:09:58.246 --> 00:10:01.986 A:middle
of timescales and potentially
on a per-operation type basis.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.246 --> 00:10:01.986 A:middle
of timescales and potentially
on a per-operation type basis.

00:10:03.436 --> 00:10:05.636 A:middle
The other type of chart that
we surface is what we call our

00:10:05.636 --> 00:10:06.406 A:middle
Correctness chart.

00:10:07.206 --> 00:10:10.106 A:middle
And the one I want to call
attention to is client errors.

00:10:10.966 --> 00:10:14.216 A:middle
This tells you what percentage
of requests that you have issued

00:10:14.216 --> 00:10:16.046 A:middle
that have resulted
in a client error.

00:10:17.136 --> 00:10:19.916 A:middle
Now, a client error is
a subset of the errors

00:10:19.916 --> 00:10:21.656 A:middle
that you might receive
from a CKOperation.

00:10:21.816 --> 00:10:25.406 A:middle
And it is that subset which we
think your application should be

00:10:25.406 --> 00:10:26.916 A:middle
able to resolve and
take action on.

00:10:27.346 --> 00:10:30.546 A:middle
So for example, maybe you
tried to save a record

00:10:30.546 --> 00:10:32.626 A:middle
and there was a conflicting
record change upon the server.

00:10:33.626 --> 00:10:36.176 A:middle
Or perhaps you attempted to
fetch changes from a Record Zone

00:10:36.266 --> 00:10:37.426 A:middle
that the server doesn't
know about.

00:10:38.226 --> 00:10:39.906 A:middle
Both of these would be
considered client errors

00:10:39.906 --> 00:10:41.016 A:middle
and would be surfaced
in this chart.

00:10:42.896 --> 00:10:45.466 A:middle
By being able to
visualize your error trends,

00:10:45.876 --> 00:10:47.906 A:middle
we hope that you can
take advantages to find

00:10:47.906 --> 00:10:49.226 A:middle
when your client's, situations

00:10:49.226 --> 00:10:51.776 A:middle
when your clients are seeing
abnormally frequent number

00:10:51.776 --> 00:10:52.346 A:middle
of errors.

00:10:53.326 --> 00:10:56.776 A:middle
Now, we've said in the past
that error handling is essential

00:10:56.776 --> 00:10:58.216 A:middle
for a CloudKit-backed
Application.

00:10:59.116 --> 00:11:00.736 A:middle
The difference between
an Application


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.116 --> 00:11:00.736 A:middle
The difference between
an Application

00:11:00.736 --> 00:11:02.766 A:middle
that handles errors
well and an application

00:11:02.766 --> 00:11:04.946 A:middle
that handles errors
poorly is the difference

00:11:04.946 --> 00:11:07.346 A:middle
between a functioning App
and a nonfunctioning App.

00:11:07.976 --> 00:11:08.766 A:middle
It's that serious.

00:11:08.766 --> 00:11:11.316 A:middle
It's an integral part in writing
a CloudKit-based Application.

00:11:11.816 --> 00:11:14.366 A:middle
So, we hope that you can
use these charts to figure

00:11:14.366 --> 00:11:15.876 A:middle
out situations in which you need

00:11:15.876 --> 00:11:18.216 A:middle
to go examine how your clients
are handling their errors.

00:11:18.696 --> 00:11:21.696 A:middle
For more information on
how to handle errors well,

00:11:21.696 --> 00:11:23.886 A:middle
I want to invite you
to tomorrow's talk,

00:11:23.936 --> 00:11:25.236 A:middle
CloudKit Best Practices.

00:11:25.486 --> 00:11:28.336 A:middle
We'll spend some time diving
into proper error handling.

00:11:28.926 --> 00:11:33.746 A:middle
Next, I'd like to talk to
you about some improvements

00:11:33.746 --> 00:11:36.006 A:middle
to our APIs, all of which
are new since the last WWDC.

00:11:36.036 --> 00:11:39.726 A:middle
And really, there's four that I
want to call your attention to.

00:11:40.336 --> 00:11:42.466 A:middle
Starting with Long-Lived
Operations.

00:11:43.726 --> 00:11:45.906 A:middle
Long-Lived Operations
give you a mechanism

00:11:46.186 --> 00:11:47.886 A:middle
by which you don't
have to repeat work

00:11:47.886 --> 00:11:49.276 A:middle
that you've already
done gets the server.

00:11:50.046 --> 00:11:53.876 A:middle
So, as it stands now, when your
application goes away, it exits.

00:11:54.226 --> 00:11:55.916 A:middle
Any operations that
were outstanding

00:11:55.916 --> 00:11:57.526 A:middle
on behalf of it are torn down.

00:11:57.946 --> 00:12:00.406 A:middle
Even if that operation was
moments away from completing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:57.946 --> 00:12:00.406 A:middle
Even if that operation was
moments away from completing.

00:12:01.716 --> 00:12:04.296 A:middle
By making your operations
long-lived,

00:12:04.296 --> 00:12:07.016 A:middle
your operations can outlive the
lifetime of your Application.

00:12:08.226 --> 00:12:10.816 A:middle
They will continue running
and CloudKit will continue

00:12:10.816 --> 00:12:14.016 A:middle
to cache responses from the
server in a local cache.

00:12:14.946 --> 00:12:16.766 A:middle
When your Application
is next launched,

00:12:16.766 --> 00:12:18.006 A:middle
you've resumed the operation.

00:12:18.156 --> 00:12:20.766 A:middle
And we're just going to go
ahead and feed you those caches

00:12:20.766 --> 00:12:22.186 A:middle
out of our local cache.

00:12:22.756 --> 00:12:25.636 A:middle
In many cases, this can
completely eliminate the need

00:12:25.636 --> 00:12:26.866 A:middle
for another network round trip.

00:12:27.566 --> 00:12:29.506 A:middle
We're going to talk about
Long-Lived Operations

00:12:29.506 --> 00:12:32.366 A:middle
in more detail at tomorrow's
talk, Best Practices, 9 am,

00:12:32.366 --> 00:12:34.406 A:middle
I hope you can join us.

00:12:35.176 --> 00:12:37.436 A:middle
Next I want to touch on
a topic that we've heard

00:12:37.436 --> 00:12:39.826 A:middle
of from our developers
and it has to do

00:12:39.826 --> 00:12:42.476 A:middle
with CKOperation
behavior on bad network.

00:12:43.186 --> 00:12:44.056 A:middle
And the picture I want to paint

00:12:44.056 --> 00:12:46.076 A:middle
for you here is we've
got a device.

00:12:46.416 --> 00:12:48.216 A:middle
The device has network
that says it's available

00:12:48.216 --> 00:12:49.886 A:middle
but we're not getting
any traffic going

00:12:49.886 --> 00:12:50.866 A:middle
over in either direction.

00:12:50.866 --> 00:12:53.616 A:middle
And as a side note, you
can actually go ahead

00:12:53.616 --> 00:12:56.096 A:middle
and replicate the scenario
yourself using the network link

00:12:56.096 --> 00:12:57.756 A:middle
conditioner, a great
developer tool

00:12:57.756 --> 00:13:00.106 A:middle
for replicating behavior
such as this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:57.756 --> 00:13:00.106 A:middle
for replicating behavior
such as this.

00:13:01.676 --> 00:13:04.516 A:middle
Now, a CKOperation is a
subclass of an NS operation.

00:13:04.746 --> 00:13:06.636 A:middle
And as such, as a
QualityOfService property.

00:13:07.256 --> 00:13:10.016 A:middle
If your operation is
marked as user interactive

00:13:10.016 --> 00:13:13.306 A:middle
or user initiated, then on a bad
network, we're going to tear it

00:13:13.306 --> 00:13:15.586 A:middle
down after 1 minute and give
you a network timeout error.

00:13:16.226 --> 00:13:18.996 A:middle
If your operation has any of
these other QualityOfServices,

00:13:18.996 --> 00:13:19.586 A:middle
we're going to go ahead

00:13:19.586 --> 00:13:21.696 A:middle
and continue attempting
it for up to seven days.

00:13:22.226 --> 00:13:23.526 A:middle
It might not be what
you expected.

00:13:24.516 --> 00:13:25.786 A:middle
What's more, if you choose not

00:13:25.786 --> 00:13:27.576 A:middle
to set an explicit
QualityOfService

00:13:27.626 --> 00:13:29.886 A:middle
on your CKOperation, we
will choose one for you

00:13:30.166 --> 00:13:31.126 A:middle
and we choose utility.

00:13:31.856 --> 00:13:33.836 A:middle
So, if you add all
this up, we get a lot

00:13:33.836 --> 00:13:36.536 A:middle
of developer reports saying,
you know, it's been 5 days,

00:13:36.536 --> 00:13:38.186 A:middle
why is my operation
still outstanding.

00:13:38.706 --> 00:13:40.736 A:middle
So, we want to address
this and we're going

00:13:40.736 --> 00:13:43.056 A:middle
to address this with
two new APIs.

00:13:44.086 --> 00:13:47.276 A:middle
The first covers network
inactivity and we expose it

00:13:47.276 --> 00:13:48.286 A:middle
as the timeout interval

00:13:48.286 --> 00:13:50.636 A:middle
for request property
on a CKOperation.

00:13:51.086 --> 00:13:54.146 A:middle
It defaults to 1 minute
and it's the amount of time

00:13:54.146 --> 00:13:56.766 A:middle
that we're willing to wait for
a packet to go over the wire.

00:13:57.556 --> 00:13:59.946 A:middle
If we don't hear any traffic
received or sent in that amount

00:13:59.946 --> 00:14:02.206 A:middle
of time, we're going to tear
down your operation to tell you


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.946 --> 00:14:02.206 A:middle
of time, we're going to tear
down your operation to tell you

00:14:02.206 --> 00:14:03.166 A:middle
that the network timed out.

00:14:04.076 --> 00:14:07.346 A:middle
We're also going to expose
an end to end timeout,

00:14:07.636 --> 00:14:09.256 A:middle
and we expose this as
the timeout interval

00:14:09.256 --> 00:14:11.666 A:middle
for resource property
on a CKOperation.

00:14:12.566 --> 00:14:15.126 A:middle
This defaults to seven days and
it governs the amount of time

00:14:15.126 --> 00:14:17.456 A:middle
that we're willing to wait for
an entire network round trip

00:14:17.496 --> 00:14:18.816 A:middle
from your device to
the service server

00:14:18.906 --> 00:14:20.666 A:middle
and its completion
back to the device.

00:14:20.666 --> 00:14:22.806 A:middle
Now, I want to make note

00:14:22.806 --> 00:14:25.896 A:middle
that a CKOperation may issue
multiple network requests

00:14:25.896 --> 00:14:27.586 A:middle
as it's going about its job.

00:14:27.856 --> 00:14:31.166 A:middle
So, a CKOperation may take more
time than you expect so long

00:14:31.166 --> 00:14:32.936 A:middle
as you are making
progress in the wire.

00:14:33.666 --> 00:14:39.336 A:middle
Next, I want to talk about how
do we efficiently fetch a series

00:14:39.336 --> 00:14:41.456 A:middle
of record changes when
there are many Record Zones

00:14:41.546 --> 00:14:42.266 A:middle
up on the server.

00:14:42.936 --> 00:14:44.446 A:middle
As we'll learn when
we get into sharing,

00:14:44.656 --> 00:14:47.316 A:middle
your client may see more
Record Zones then you've seen

00:14:47.316 --> 00:14:47.936 A:middle
in the past.

00:14:49.076 --> 00:14:51.696 A:middle
So, our answer to this
used to be that you need

00:14:51.696 --> 00:14:53.386 A:middle
to fetch the entire
list of Record Zones

00:14:53.386 --> 00:14:56.776 A:middle
from a database using a
CKFetchRecordZonesOperation.

00:14:58.006 --> 00:14:59.046 A:middle
There's a couple
problems with this.

00:14:59.046 --> 00:15:00.866 A:middle
We don't want you to poll
and we don't want to have


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.046 --> 00:15:00.866 A:middle
We don't want you to poll
and we don't want to have

00:15:00.866 --> 00:15:03.296 A:middle
to fetch the entire list of
Record Zones down from server.

00:15:03.826 --> 00:15:06.126 A:middle
So, we're no longer going to
recommend this for this approach

00:15:06.426 --> 00:15:08.536 A:middle
and we're going to replace
it with two new concepts.

00:15:09.296 --> 00:15:11.646 A:middle
The first,
CKDatabaseSubscription.

00:15:12.536 --> 00:15:13.766 A:middle
This is a new subscription type

00:15:13.766 --> 00:15:15.926 A:middle
that will fire whenever
any change happens inside

00:15:15.926 --> 00:15:16.626 A:middle
of a database.

00:15:17.146 --> 00:15:19.546 A:middle
Even in a Record Zone that
you haven't learned about yet.

00:15:20.346 --> 00:15:21.326 A:middle
And we're going to couple

00:15:21.326 --> 00:15:23.386 A:middle
that with a
CKFetchDatabaseChanges

00:15:23.386 --> 00:15:23.906 A:middle
operation.

00:15:24.416 --> 00:15:27.566 A:middle
This is an operation that allows
you to ask the server for a list

00:15:27.566 --> 00:15:29.746 A:middle
of Record Zones that
have pending changes

00:15:29.746 --> 00:15:33.116 A:middle
since some point in
time in the past.

00:15:34.046 --> 00:15:36.056 A:middle
Okay, so now you have a list
of Record Zones that you want

00:15:36.056 --> 00:15:37.116 A:middle
to go fetch changes for.

00:15:37.266 --> 00:15:38.776 A:middle
How are you going to do that?

00:15:39.196 --> 00:15:41.276 A:middle
Well, the old way was
that you would issue a

00:15:41.276 --> 00:15:42.916 A:middle
CKFetchRecordChanges operation.

00:15:43.356 --> 00:15:45.326 A:middle
You'd pass in a single Record
Zone and get the changes

00:15:45.326 --> 00:15:46.346 A:middle
for that single Record Zone.

00:15:47.186 --> 00:15:49.366 A:middle
We don't want you to have
to enumerate, you know,

00:15:49.366 --> 00:15:52.036 A:middle
sequentially through all these
Record Zones so we've gone ahead

00:15:52.036 --> 00:15:53.596 A:middle
and deprecated this
operation outright.

00:15:54.466 --> 00:15:56.326 A:middle
And we've replaced it
with a brand-new operation

00:15:56.326 --> 00:15:57.956 A:middle
with a very similar
sounding name,

00:15:58.446 --> 00:16:00.746 A:middle
the CKFetchRecordZone
changes operation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.446 --> 00:16:00.746 A:middle
the CKFetchRecordZone
changes operation.

00:16:02.036 --> 00:16:06.376 A:middle
This is essentially a batch
interface over the old operation

00:16:06.376 --> 00:16:09.296 A:middle
and it gives you the ability
to fetch record changes

00:16:09.296 --> 00:16:11.946 A:middle
across multiple Record Zones
in a single network round trip.

00:16:12.616 --> 00:16:14.476 A:middle
So, let's go ahead
and visualize this.

00:16:16.056 --> 00:16:18.636 A:middle
Here we have a database,
several Record Zones,

00:16:18.636 --> 00:16:20.496 A:middle
each Record Zone has
a series of records.

00:16:20.876 --> 00:16:22.076 A:middle
And the client, which
is up-to-date

00:16:22.076 --> 00:16:23.386 A:middle
with all of these changes.

00:16:23.956 --> 00:16:26.246 A:middle
Now, along come a
couple of new records.

00:16:27.266 --> 00:16:29.966 A:middle
Your client, by virtue of
having previously saved a

00:16:29.966 --> 00:16:33.166 A:middle
CKDatabaseSubscription, will
cause a push to be generated

00:16:33.166 --> 00:16:35.296 A:middle
on the server and
sent to the client.

00:16:36.266 --> 00:16:38.916 A:middle
Next, using a
CKFetchDatabaseChanges

00:16:38.916 --> 00:16:41.376 A:middle
operation, you can ask
the server for a list

00:16:41.376 --> 00:16:43.166 A:middle
of Record Zones that
have pending changes.

00:16:43.346 --> 00:16:45.036 A:middle
In this case, the
first and the third.

00:16:46.796 --> 00:16:48.656 A:middle
Now, armed with that
list of Record Zones,

00:16:49.136 --> 00:16:51.306 A:middle
you can issue a
CKFetchRecordZoneChanges

00:16:51.306 --> 00:16:54.166 A:middle
operation requesting all
those records and all

00:16:54.166 --> 00:16:57.386 A:middle
of the change Record Zones in
a single network round trip.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.646 --> 00:17:02.646 A:middle
And lastly, I'd like to talk

00:17:02.646 --> 00:17:04.786 A:middle
about how do you
efficiently fetch changes

00:17:04.896 --> 00:17:06.455 A:middle
when there are many
records sitting

00:17:06.455 --> 00:17:07.935 A:middle
in a Record Zone
up on the server.

00:17:08.455 --> 00:17:12.205 A:middle
If you've used CloudKit
to do this in the past,

00:17:12.596 --> 00:17:15.435 A:middle
then you're familiar with the
moreComing flag, which was set

00:17:15.435 --> 00:17:18.576 A:middle
on a CKFetchRecordChanges
operation to inform you

00:17:18.685 --> 00:17:21.496 A:middle
that not only have we given you
some changes but there are more

00:17:21.496 --> 00:17:23.195 A:middle
up on the server that
you should go fetch

00:17:23.396 --> 00:17:25.886 A:middle
with a subsequent
CKFetchRecordChanges operation.

00:17:25.965 --> 00:17:29.106 A:middle
Now, there's a couple
problems with this approach.

00:17:29.386 --> 00:17:32.086 A:middle
The first is that we've
distributed the logic

00:17:32.086 --> 00:17:34.486 A:middle
of check the flag and
issue another operation

00:17:34.666 --> 00:17:35.656 A:middle
to all of our clients.

00:17:36.116 --> 00:17:37.516 A:middle
It's another potential
point of failure.

00:17:38.326 --> 00:17:40.866 A:middle
And secondly, while you're
determining that you need

00:17:40.866 --> 00:17:43.896 A:middle
to fetch and cue a new operation
and doing that in cueing.

00:17:44.356 --> 00:17:45.646 A:middle
CloudKit is sitting around idle.

00:17:45.646 --> 00:17:49.426 A:middle
We want to address both of those
so we took advantage of the fact

00:17:49.426 --> 00:17:51.106 A:middle
that we made a brand-new
operation,

00:17:51.306 --> 00:17:54.206 A:middle
CKFetchRecordChanges
operation, to change this model.

00:17:55.046 --> 00:17:56.256 A:middle
Instead of us telling you

00:17:56.256 --> 00:17:57.756 A:middle
when there are more
changes available,

00:17:58.106 --> 00:18:00.606 A:middle
you tell us what your
intention is via the new


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.106 --> 00:18:00.606 A:middle
you tell us what your
intention is via the new

00:18:00.806 --> 00:18:02.676 A:middle
fetchAllChanges property.

00:18:03.936 --> 00:18:07.296 A:middle
When this is set to true, then
CloudKit will fetch a batch

00:18:07.296 --> 00:18:09.476 A:middle
of changes from the server,
hand them to your client,

00:18:09.756 --> 00:18:11.256 A:middle
and then immediately
go back to the server

00:18:11.256 --> 00:18:12.526 A:middle
for the next batch of changes.

00:18:13.276 --> 00:18:15.366 A:middle
This allows us to keep
the pipeline full,

00:18:15.456 --> 00:18:17.966 A:middle
pulling network data over the
network while you're processing.

00:18:19.046 --> 00:18:21.826 A:middle
Now, we think that this is going
to be such a common behavior

00:18:22.006 --> 00:18:24.086 A:middle
that we've gone ahead and we've
made this the default behavior

00:18:24.086 --> 00:18:25.026 A:middle
for this new class.

00:18:26.286 --> 00:18:29.276 A:middle
So, new CKFetchRecordZoneChanges
operations

00:18:29.606 --> 00:18:31.776 A:middle
by default will fetch
the entirety of records

00:18:31.776 --> 00:18:33.336 A:middle
down from a particular
Record Zone.

00:18:34.876 --> 00:18:39.286 A:middle
As you might imagine, if you've
got a large Record Zone, say,

00:18:39.366 --> 00:18:41.546 A:middle
your user's iCloud Photo
Library up on the server,

00:18:42.016 --> 00:18:45.236 A:middle
this means that the subsequent
operation to fetch all records

00:18:45.236 --> 00:18:46.156 A:middle
in the Record Zone is going

00:18:46.156 --> 00:18:47.486 A:middle
to take a very long
time to complete.

00:18:47.486 --> 00:18:50.966 A:middle
We want to make sure that
you are resilient in the face

00:18:50.966 --> 00:18:52.716 A:middle
of operations that
fail part way through.

00:18:52.716 --> 00:18:55.006 A:middle
We don't want to have to go
ahead and re-download batches

00:18:55.006 --> 00:18:56.276 A:middle
that we've already
fetched from the server.

00:18:57.206 --> 00:18:59.506 A:middle
So, we've added a new
callback on this new class.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.146 --> 00:19:02.686 A:middle
RecordZoneChangeTokens
UpdatedBlock.

00:19:03.566 --> 00:19:05.876 A:middle
And after we hand you a batch of
changes, we're going to go ahead

00:19:05.876 --> 00:19:08.146 A:middle
and tell you about an
updated server change token.

00:19:08.646 --> 00:19:10.456 A:middle
And your code is going
to be responsible

00:19:10.456 --> 00:19:12.426 A:middle
for doing two different things.

00:19:12.616 --> 00:19:14.216 A:middle
First, you're going to go ahead

00:19:14.216 --> 00:19:16.246 A:middle
and commit all the
per record changes

00:19:16.246 --> 00:19:17.976 A:middle
that you've received
from the server.

00:19:18.986 --> 00:19:21.496 A:middle
And secondly, you're going to go
ahead and you're going to cache

00:19:21.496 --> 00:19:22.566 A:middle
that server change token.

00:19:23.556 --> 00:19:25.966 A:middle
If the operation fails at
some point in the future,

00:19:26.126 --> 00:19:29.106 A:middle
you can issue a brand-new
CKFetchRecordZoneChanges

00:19:29.106 --> 00:19:32.536 A:middle
operation, pass in this locally
cached server change token

00:19:32.626 --> 00:19:35.146 A:middle
and essentially pick back
up where you left off.

00:19:35.266 --> 00:19:37.316 A:middle
No need to re-download
the batches of changes

00:19:37.376 --> 00:19:38.896 A:middle
that you've already
downloaded from the server.

00:19:40.086 --> 00:19:43.126 A:middle
And so these are just 4 of the
API improvements that we hope

00:19:43.126 --> 00:19:45.956 A:middle
that you can take advantage of
as you write applications backed

00:19:45.956 --> 00:19:47.676 A:middle
by iCloud, backed by CloudKit.

00:19:48.106 --> 00:19:50.626 A:middle
And with that, I'd like to
go ahead and switch gears

00:19:50.626 --> 00:19:53.176 A:middle
and invite up Jacob Farkas to
walk us through the sharing UI.

00:19:55.516 --> 00:19:59.976 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.476 --> 00:20:01.496 A:middle
&gt;&gt; Thanks Paul.

00:20:02.546 --> 00:20:05.096 A:middle
My name is Jacob Farkas
and I'm an engineer

00:20:05.096 --> 00:20:06.076 A:middle
on the CloudKit team.

00:20:06.076 --> 00:20:07.586 A:middle
And today I'm going
to talk to you

00:20:07.586 --> 00:20:10.666 A:middle
about how you can add CloudKit
sharing UI to your application

00:20:10.666 --> 00:20:13.756 A:middle
by only writing a
couple of lines of code.

00:20:15.486 --> 00:20:18.476 A:middle
We've introduced a new class
in CloudKit called CKShare.

00:20:18.846 --> 00:20:21.896 A:middle
It's a subclass of CKRecord
and it's responsible

00:20:21.896 --> 00:20:24.056 A:middle
for storing two important
pieces of information.

00:20:24.666 --> 00:20:27.556 A:middle
One, what is shared, and two,

00:20:28.136 --> 00:20:30.266 A:middle
what that record is
being shared with.

00:20:31.646 --> 00:20:33.136 A:middle
So, let's look at
an example of this.

00:20:33.456 --> 00:20:35.836 A:middle
We've got our private database
here and we have a note

00:20:35.836 --> 00:20:38.226 A:middle
in the private database
that we'd like to share.

00:20:39.906 --> 00:20:43.606 A:middle
To do that, we're going
to create the CKShare

00:20:43.606 --> 00:20:46.266 A:middle
and initialize it using
that record as the record.

00:20:47.296 --> 00:20:49.626 A:middle
You always need to create
a Share with a root record

00:20:49.936 --> 00:20:51.736 A:middle
so there's always
something in the Share.

00:20:52.206 --> 00:20:56.556 A:middle
Next, we're going to save
that Share and the root record

00:20:56.556 --> 00:20:57.986 A:middle
to the server at the same time.

00:20:58.796 --> 00:21:01.066 A:middle
You want to do that because
there's a new property


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.796 --> 00:21:01.066 A:middle
You want to do that because
there's a new property

00:21:01.066 --> 00:21:03.196 A:middle
on CKRecord that's a reference

00:21:03.196 --> 00:21:04.366 A:middle
to the Share that
we're creating.

00:21:04.946 --> 00:21:07.516 A:middle
By saving the root record and
the Share at the same time,

00:21:08.086 --> 00:21:13.866 A:middle
that reference will be set to
the share you just created.

00:21:14.296 --> 00:21:17.236 A:middle
So, now we've defined what
we want to share but we need

00:21:17.236 --> 00:21:19.156 A:middle
to define who we want
to share that with.

00:21:20.166 --> 00:21:23.076 A:middle
To do that, we've created a
new lookup service in CloudKit.

00:21:24.336 --> 00:21:28.776 A:middle
This lookup service takes a
email address and it turns it

00:21:28.776 --> 00:21:30.786 A:middle
into a CKShare participant.

00:21:31.196 --> 00:21:33.376 A:middle
You can set the Share
participant on the Share,

00:21:33.906 --> 00:21:35.926 A:middle
save that Share to
the server and now

00:21:35.926 --> 00:21:40.156 A:middle
that person's iCloud account
has access to the Share.

00:21:40.666 --> 00:21:43.286 A:middle
We also support looking
up users via phone numbers

00:21:43.346 --> 00:21:48.176 A:middle
or CloudKit user record IDs.

00:21:48.406 --> 00:21:51.526 A:middle
Now, we want to let users
have control over what appears

00:21:51.526 --> 00:21:53.906 A:middle
in their shared database so
we don't want to these records

00:21:53.906 --> 00:21:55.136 A:middle
to just instantly appear.

00:21:55.856 --> 00:21:59.086 A:middle
The user should have control so
they should be able to accept

00:21:59.126 --> 00:22:00.206 A:middle
that Share and join it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.126 --> 00:22:00.206 A:middle
that Share and join it.

00:22:01.116 --> 00:22:03.556 A:middle
But that means we need a way
of telling that other user

00:22:03.556 --> 00:22:05.586 A:middle
that we've made a share
for them and invited them

00:22:05.586 --> 00:22:06.586 A:middle
and that they need to join it.

00:22:07.546 --> 00:22:09.196 A:middle
And we do that via URLs.

00:22:10.696 --> 00:22:14.216 A:middle
Every share has a URL which
uniquely identifies it.

00:22:14.876 --> 00:22:19.376 A:middle
If the user taps on this URL in
iOS or clicks on it in macOS,

00:22:19.376 --> 00:22:21.726 A:middle
we're going to show
the accept UI.

00:22:21.726 --> 00:22:24.286 A:middle
We're going to ask them if
they want to join the Share.

00:22:25.106 --> 00:22:27.116 A:middle
And if they do, they'll
be taken to the App

00:22:27.116 --> 00:22:28.976 A:middle
and shown the items
in that Share.

00:22:30.506 --> 00:22:33.286 A:middle
The great thing about a
URL is that if this user is

00:22:33.286 --> 00:22:35.436 A:middle
on an older platform
or on a platform

00:22:35.436 --> 00:22:36.606 A:middle
that doesn't support sharing,

00:22:37.076 --> 00:22:38.736 A:middle
this will take them
to iCloud.com.

00:22:38.736 --> 00:22:40.776 A:middle
And we can show them
information about the Share

00:22:41.236 --> 00:22:43.516 A:middle
and tell them how they can
accept it and join the Share.

00:22:45.376 --> 00:22:49.766 A:middle
So, let's put this URL into
an email and send it off

00:22:49.766 --> 00:22:51.336 A:middle
to the other participant
we invited.

00:22:52.576 --> 00:22:56.366 A:middle
They're going to receive the
email, click on it and now

00:22:56.366 --> 00:22:59.046 A:middle
in their Shared Database they
see the Share and the Note

00:22:59.046 --> 00:23:00.496 A:middle
that we created and
shared with them.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.046 --> 00:23:00.496 A:middle
that we created and
shared with them.

00:23:01.896 --> 00:23:05.756 A:middle
The great thing here is that the
Share Database is actually just

00:23:05.756 --> 00:23:08.016 A:middle
a view into the owner's
private database.

00:23:08.366 --> 00:23:11.566 A:middle
So, if this other user has
the right access to the Share,

00:23:12.066 --> 00:23:14.286 A:middle
if they update that
Note, we're going to see

00:23:14.286 --> 00:23:16.836 A:middle
that same change happen
in our private database.

00:23:18.036 --> 00:23:20.246 A:middle
So, let's take a look at what
this looks like in the UI.

00:23:23.926 --> 00:23:31.806 A:middle
All right, we've got Notes
here and we've added sharing

00:23:31.806 --> 00:23:35.016 A:middle
to Notes in macOS X Sierra.

00:23:35.786 --> 00:23:37.906 A:middle
By using the same
CloudKit sharing APIs

00:23:37.906 --> 00:23:39.986 A:middle
that we're making available
to all of you today.

00:23:40.876 --> 00:23:43.986 A:middle
So, you'll see that there's
a new Share Add Person button

00:23:43.986 --> 00:23:44.326 A:middle
up here.

00:23:44.756 --> 00:23:48.286 A:middle
And if we tap on that,
we get a new sheet

00:23:48.286 --> 00:23:50.696 A:middle
that lets us choose how
we want to share that URL.

00:23:52.336 --> 00:23:56.586 A:middle
When we hit Share, the system
UI is calling into Notes

00:23:56.646 --> 00:23:59.916 A:middle
and telling Notes that it
needs to save that Share

00:23:59.916 --> 00:24:01.376 A:middle
and the root record
to the server.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.916 --> 00:24:01.376 A:middle
and the root record
to the server.

00:24:02.456 --> 00:24:05.406 A:middle
Once it's done that, the system
UI shows a Mail Compose window.

00:24:05.596 --> 00:24:07.146 A:middle
We can invite the other user.

00:24:08.236 --> 00:24:09.286 A:middle
We hit Send.

00:24:09.916 --> 00:24:12.846 A:middle
And the system UI is actually
saving that Share to the server,

00:24:12.846 --> 00:24:14.196 A:middle
looking up the participants

00:24:14.646 --> 00:24:16.606 A:middle
and sending the email
off to the other user.

00:24:17.136 --> 00:24:20.766 A:middle
So, if we switch over to our
iPad here with the other user,

00:24:20.916 --> 00:24:22.296 A:middle
we see the email we just sent.

00:24:23.226 --> 00:24:24.686 A:middle
We can tap on that URL.

00:24:24.686 --> 00:24:27.626 A:middle
And we'll be asked if we
want to join the Share.

00:24:29.356 --> 00:24:31.506 A:middle
When we do that, we're
launched right into Notes.

00:24:31.746 --> 00:24:34.626 A:middle
The Share shows up, the Note
downloads and now we're sharing

00:24:34.626 --> 00:24:35.726 A:middle
that Note with the other user.

00:24:37.376 --> 00:24:39.716 A:middle
If I make changes on the
Note from the originator,

00:24:40.066 --> 00:24:43.756 A:middle
let's say I check off avocados
on the list and I add limes

00:24:43.756 --> 00:24:44.756 A:middle
as something else to pick up.

00:24:45.686 --> 00:24:48.286 A:middle
We'll see those happen in the
note that's being shared to us.

00:24:56.276 --> 00:25:00.976 A:middle
So, let's look at
the code behind that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:56.276 --> 00:25:00.976 A:middle
So, let's look at
the code behind that.

00:25:01.826 --> 00:25:02.716 A:middle
You're probably all familiar

00:25:02.716 --> 00:25:05.656 A:middle
with the CloudKit framework
already which is where CKRecord

00:25:05.656 --> 00:25:07.516 A:middle
and the new CKShare object live.

00:25:08.316 --> 00:25:10.986 A:middle
If you want to use this new
system sharing UI, you're going

00:25:10.986 --> 00:25:15.936 A:middle
to find that on macOS in
AppKit and in iOS on UIKit.

00:25:16.426 --> 00:25:23.636 A:middle
We'll start by looking
at the iOS sharing API.

00:25:24.216 --> 00:25:27.086 A:middle
Before we create a Share,
before we bring up the UI,

00:25:27.086 --> 00:25:28.416 A:middle
we need to create
a Share of course.

00:25:28.416 --> 00:25:30.536 A:middle
So, we'll create a Share
here with our record.

00:25:31.586 --> 00:25:34.986 A:middle
We will set a couple properties
to let the UI show that Share,

00:25:35.636 --> 00:25:37.416 A:middle
title and a thumbnail.

00:25:37.476 --> 00:25:41.536 A:middle
And then we move on
to creating a cloud,

00:25:41.586 --> 00:25:43.036 A:middle
a UI cloud-sharing controller.

00:25:44.436 --> 00:25:46.366 A:middle
We initialize that with
the Share we just made

00:25:46.366 --> 00:25:48.026 A:middle
and we pass it a
preparation handler.

00:25:49.106 --> 00:25:51.266 A:middle
This preparation handler
is going to be called

00:25:51.326 --> 00:25:52.746 A:middle
when it's time to
save that share

00:25:52.746 --> 00:25:53.836 A:middle
in the record to the server.

00:25:54.366 --> 00:25:57.626 A:middle
So, our handler here will create
a CKModifyRecords operation.

00:25:58.226 --> 00:26:01.406 A:middle
Save the record and Share to
the server and when it's done,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.226 --> 00:26:01.406 A:middle
Save the record and Share to
the server and when it's done,

00:26:01.406 --> 00:26:03.096 A:middle
it will call the
completion handler.

00:26:03.586 --> 00:26:08.816 A:middle
Next, we might want
to set some properties

00:26:08.816 --> 00:26:10.726 A:middle
on this UI cloud
sharing controller.

00:26:11.816 --> 00:26:14.576 A:middle
One of the properties we can set
it is the available permissions.

00:26:14.696 --> 00:26:17.826 A:middle
We can say whether we want that
Share to be publicly shared only

00:26:17.826 --> 00:26:19.846 A:middle
or maybe we only want
to give the participants

00:26:19.846 --> 00:26:20.756 A:middle
read/write permissions.

00:26:21.096 --> 00:26:24.016 A:middle
We also want to set the present,

00:26:24.286 --> 00:26:27.636 A:middle
presentation controller source
view so that the pop-up appears

00:26:27.636 --> 00:26:30.236 A:middle
in the same place as the button
that we tapped to add people.

00:26:30.236 --> 00:26:33.326 A:middle
We'll want to set
ourself as a delegate

00:26:33.476 --> 00:26:35.716 A:middle
so that we get callbacks about
what's happening in the UI.

00:26:35.926 --> 00:26:38.256 A:middle
And finally we call Present.

00:26:38.406 --> 00:26:40.536 A:middle
And when we do that, we're
going to get a pop-up

00:26:40.536 --> 00:26:43.336 A:middle
that looks something like this.

00:26:43.546 --> 00:26:45.766 A:middle
Now, if you've already saved
the Share of the server,

00:26:46.136 --> 00:26:49.106 A:middle
you can call UI cloud sharing
control with just the Share.

00:26:49.766 --> 00:26:51.936 A:middle
And it will present a
list of invited users

00:26:51.976 --> 00:26:54.106 A:middle
and let them manage
the users on the Share

00:26:54.106 --> 00:26:55.786 A:middle
and stop sharing if they'd like.

00:26:55.986 --> 00:27:01.286 A:middle
Everything is taken care of
for you by the system UI.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:55.986 --> 00:27:01.286 A:middle
Everything is taken care of
for you by the system UI.

00:27:01.976 --> 00:27:05.176 A:middle
The macOS sharing API is really
similar so we're just going

00:27:05.176 --> 00:27:07.156 A:middle
to go very quickly and
highlight the differences here.

00:27:09.156 --> 00:27:11.416 A:middle
First off, you create
an NSItem provider

00:27:11.746 --> 00:27:14.066 A:middle
and you register your
CloudKit Share with that.

00:27:14.766 --> 00:27:16.876 A:middle
This handler looks the
same as what we saw before.

00:27:16.876 --> 00:27:18.786 A:middle
You save the Share in
the record to the server

00:27:19.136 --> 00:27:21.026 A:middle
and when you're done, you
call the completion handler.

00:27:22.936 --> 00:27:25.486 A:middle
Next, you're going to
create an NSSharingService.

00:27:26.276 --> 00:27:28.236 A:middle
That sharing service is
going to have a delegate

00:27:28.236 --> 00:27:30.796 A:middle
that you set yourself
and you call perform

00:27:30.796 --> 00:27:32.976 A:middle
with the NSItem provider
that you created earlier.

00:27:36.316 --> 00:27:39.986 A:middle
Finally, NSSharingService
is callback based.

00:27:39.986 --> 00:27:43.436 A:middle
So, if you want to set options
on what the share can do,

00:27:43.776 --> 00:27:46.526 A:middle
you'll do that with callback
like options for Share.

00:27:47.106 --> 00:27:52.106 A:middle
On macOS, the Share create
UI will look like this.

00:27:52.526 --> 00:27:54.656 A:middle
And if you want to
modify the participants

00:27:54.656 --> 00:27:58.406 A:middle
on a Share, it'll
look like this.

00:27:59.396 --> 00:28:02.456 A:middle
Next, if a user accepts a
Share for your Application,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.396 --> 00:28:02.456 A:middle
Next, if a user accepts a
Share for your Application,

00:28:02.926 --> 00:28:04.556 A:middle
your Application is
going to get launched

00:28:04.626 --> 00:28:07.816 A:middle
and it'll receive this callback
Application user Accepted

00:28:07.816 --> 00:28:08.606 A:middle
CloudKit Share.

00:28:09.556 --> 00:28:11.936 A:middle
That callback will contain
Share metadata that'll tell you

00:28:11.936 --> 00:28:13.516 A:middle
about the Share in
the root record

00:28:13.516 --> 00:28:14.716 A:middle
that the user just accepted.

00:28:15.776 --> 00:28:18.136 A:middle
It looks really similar
on iOS with the exception

00:28:18.136 --> 00:28:20.826 A:middle
of using UIApplication
instead of NSApplication.

00:28:21.356 --> 00:28:25.456 A:middle
And finally, you need
to tell the system

00:28:25.456 --> 00:28:27.706 A:middle
that your Application
supports CloudKit sharing.

00:28:28.076 --> 00:28:30.686 A:middle
And you do this via the
CKSharingSupported key

00:28:30.686 --> 00:28:31.746 A:middle
in your info P list.

00:28:34.076 --> 00:28:35.566 A:middle
We're also happy to announce

00:28:35.566 --> 00:28:37.346 A:middle
that we've added
full sharing support

00:28:37.346 --> 00:28:40.436 A:middle
to our CloudKit JavaScript
library so if you're on the web,

00:28:40.696 --> 00:28:44.656 A:middle
you can create Shares, accept
them and we've given you some UI

00:28:44.656 --> 00:28:47.186 A:middle
that you can use to
manage the Share.

00:28:47.966 --> 00:28:50.736 A:middle
You can try this all out right
now in the CloudKit catalog.

00:28:51.616 --> 00:28:54.316 A:middle
So, I'm going to hand things off
now to my colleague, Vanessa,

00:28:54.316 --> 00:28:55.776 A:middle
who is going to tell
you a little bit more

00:28:55.776 --> 00:28:57.746 A:middle
about sharing in depth.

00:28:58.516 --> 00:29:01.796 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.516 --> 00:29:01.796 A:middle
[ Applause ]

00:29:02.296 --> 00:29:02.966 A:middle
&gt;&gt; Thank you, Jacob.

00:29:04.236 --> 00:29:05.606 A:middle
Hi. And good afternoon.

00:29:06.526 --> 00:29:08.656 A:middle
My name is Vanessa Hong
and I'm an engineer

00:29:08.866 --> 00:29:09.956 A:middle
on the CloudKit server team.

00:29:10.626 --> 00:29:14.346 A:middle
So, today we will deep dive
into sharing by looking

00:29:14.346 --> 00:29:15.766 A:middle
at some common use cases.

00:29:16.476 --> 00:29:20.066 A:middle
We'll start with the
data that's being shared

00:29:20.066 --> 00:29:22.016 A:middle
and then we'll go
step-by-step all the way

00:29:22.016 --> 00:29:24.186 A:middle
down into the internals
of the CKShare object.

00:29:25.196 --> 00:29:27.846 A:middle
Then I'll talk about how you
can call our sharing APIs

00:29:28.046 --> 00:29:29.956 A:middle
if you want to create
your own custom UI.

00:29:31.016 --> 00:29:33.676 A:middle
And then finally we'll close
it out with some special notes.

00:29:34.336 --> 00:29:38.216 A:middle
So, let's get started.

00:29:38.656 --> 00:29:40.686 A:middle
Jacob showed how to
Share a single record.

00:29:41.186 --> 00:29:44.206 A:middle
But the item the owner wants

00:29:44.206 --> 00:29:45.716 A:middle
to share may not
be a single record.

00:29:46.106 --> 00:29:47.976 A:middle
It may consist of many records.

00:29:48.706 --> 00:29:50.866 A:middle
Possibly already
linked via CKReferences.

00:29:52.536 --> 00:29:54.656 A:middle
And your application
may want a participant

00:29:54.656 --> 00:29:56.686 A:middle
to see only a subset
of these records.

00:29:57.936 --> 00:29:59.656 A:middle
This is why we introduced
a new field

00:29:59.846 --> 00:30:02.556 A:middle
on the CKRecord called
the Parent Reference.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.846 --> 00:30:02.556 A:middle
on the CKRecord called
the Parent Reference.

00:30:03.726 --> 00:30:06.446 A:middle
Set the Parent Reference on
any records that you wish

00:30:06.446 --> 00:30:08.396 A:middle
to be included in
the shared hierarchy.

00:30:09.176 --> 00:30:12.006 A:middle
And you can set this up
even before the user decides

00:30:12.006 --> 00:30:12.436 A:middle
to share.

00:30:13.126 --> 00:30:17.256 A:middle
When the user does share,

00:30:17.406 --> 00:30:19.956 A:middle
you will create the CKShare
only with the root record.

00:30:19.956 --> 00:30:22.256 A:middle
Then, all of the all
the descendent records

00:30:22.456 --> 00:30:25.506 A:middle
that are linked to the root
record via the Parent Reference

00:30:25.916 --> 00:30:28.206 A:middle
are automatically included
in the shared hierarchy.

00:30:28.866 --> 00:30:31.496 A:middle
So, let's see what this looks
like in the shared database.

00:30:32.306 --> 00:30:36.216 A:middle
A shared database is only a view

00:30:36.216 --> 00:30:37.936 A:middle
into the owner's
private database.

00:30:38.466 --> 00:30:40.816 A:middle
So, it doesn't contain
any physical records.

00:30:41.886 --> 00:30:44.436 A:middle
When a participant
accepts a Share,

00:30:45.086 --> 00:30:47.396 A:middle
they only see what
is shared to them.

00:30:47.666 --> 00:30:49.076 A:middle
So, they see the
shared hierarchy.

00:30:50.496 --> 00:30:54.156 A:middle
This means there's no two
copies of these records.

00:30:54.186 --> 00:30:56.096 A:middle
There's only one copy
and that copy lives

00:30:56.096 --> 00:30:57.416 A:middle
in the owner's private DB.

00:30:57.726 --> 00:31:02.226 A:middle
So, this means the owner and all
the participants are interacting


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:57.726 --> 00:31:02.226 A:middle
So, this means the owner and all
the participants are interacting

00:31:02.226 --> 00:31:03.846 A:middle
with the same set of records.

00:31:04.276 --> 00:31:07.726 A:middle
This kind of contention may
end up causing conflicts.

00:31:09.126 --> 00:31:11.826 A:middle
To learn how to deal with
conflicts, I'd like to refer you

00:31:12.176 --> 00:31:15.966 A:middle
to a past WWDC talk called
Advanced CloudKit from 2014.

00:31:15.966 --> 00:31:20.376 A:middle
Now, a read/write
participant can modify,

00:31:20.636 --> 00:31:22.446 A:middle
remove and add records.

00:31:23.026 --> 00:31:26.156 A:middle
But we don't want
them to be able

00:31:26.156 --> 00:31:30.196 A:middle
to add just anything they
want into somebody else's DB.

00:31:30.196 --> 00:31:33.026 A:middle
For instance, they cannot
add a random root record.

00:31:34.306 --> 00:31:37.636 A:middle
They also cannot add a record
without a Parent Reference,

00:31:37.806 --> 00:31:40.476 A:middle
even if it's somehow linked
to the shared hierarchy.

00:31:41.166 --> 00:31:47.236 A:middle
So, the correct way to add a new
record via the shared database

00:31:48.456 --> 00:31:52.266 A:middle
is to set a Parent Reference and
link it to the shared hierarchy.

00:31:53.516 --> 00:31:56.486 A:middle
So, even though you're
adding a new record

00:31:57.046 --> 00:31:59.756 A:middle
for the participant via
the shared database,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:00.276 --> 00:32:03.006 A:middle
that new record lives in
the owner's private DB.

00:32:03.576 --> 00:32:06.886 A:middle
So, what this means is
all records that are added

00:32:06.886 --> 00:32:09.676 A:middle
by the participant are counted
against the owner's quota.

00:32:10.286 --> 00:32:12.456 A:middle
So, the producement's
quota is not affected

00:32:13.036 --> 00:32:17.296 A:middle
and your developer
quota is not affected.

00:32:17.296 --> 00:32:19.616 A:middle
The owner's private
database is the only place

00:32:19.966 --> 00:32:22.076 A:middle
that we store these records
so we can count them only

00:32:22.076 --> 00:32:23.006 A:middle
against the owner's quota.

00:32:23.646 --> 00:32:26.146 A:middle
And that's how you
share multiple records.

00:32:26.826 --> 00:32:30.726 A:middle
Let's take a closer look
at the shared database.

00:32:31.486 --> 00:32:37.736 A:middle
So, here we have two Shares
from two different owners

00:32:38.246 --> 00:32:39.416 A:middle
but the Shares have
the same name,

00:32:39.456 --> 00:32:40.886 A:middle
so how do you tell
the difference?

00:32:42.056 --> 00:32:45.066 A:middle
Well, we glossed over a very
important detail which is

00:32:45.066 --> 00:32:48.146 A:middle
that all records in
CloudKit live in Zones.

00:32:48.516 --> 00:32:52.706 A:middle
And a Zone is identified
by that CKRecord Zone ID.

00:32:54.056 --> 00:32:57.926 A:middle
The Zone name is the name of
the custom Zone that you created

00:32:58.506 --> 00:33:00.576 A:middle
in the owner's private DB.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.506 --> 00:33:00.576 A:middle
in the owner's private DB.

00:33:00.926 --> 00:33:03.806 A:middle
An owner name is the
owner's user record name.

00:33:04.496 --> 00:33:07.246 A:middle
So, in our example, the two
Zones have the same name

00:33:07.246 --> 00:33:08.206 A:middle
but different owners.

00:33:08.526 --> 00:33:11.366 A:middle
So, let's say the first
owner shares something else

00:33:11.516 --> 00:33:12.506 A:middle
but in a different Zone.

00:33:12.866 --> 00:33:15.726 A:middle
So when you call the
FetchDatabaseChanges API,

00:33:16.216 --> 00:33:17.616 A:middle
you will see this
new zone appear.

00:33:17.856 --> 00:33:20.696 A:middle
And then when you call
FetchRecordZoneChanges,

00:33:21.166 --> 00:33:24.126 A:middle
you'll see the new
record and the Share.

00:33:24.676 --> 00:33:27.536 A:middle
Now, let's say the second
owner shares something else

00:33:27.586 --> 00:33:28.736 A:middle
but in the existing Zone.

00:33:28.736 --> 00:33:32.216 A:middle
Well, this Zone already exists
so we won't create a new one.

00:33:32.216 --> 00:33:33.946 A:middle
We'll just reuse it.

00:33:34.056 --> 00:33:36.046 A:middle
When you call the
FetchChanges APIs, you will see

00:33:36.046 --> 00:33:38.916 A:middle
that this Zone has changed and
that there are new records.

00:33:40.076 --> 00:33:41.996 A:middle
And that is our shared database.

00:33:43.086 --> 00:33:45.316 A:middle
So, let's take this
one level down and look

00:33:45.386 --> 00:33:46.616 A:middle
at the CKShare object.

00:33:49.056 --> 00:33:52.056 A:middle
So, before the owner
can create a Share,

00:33:52.136 --> 00:33:53.446 A:middle
they must do something to Share.

00:33:53.806 --> 00:33:56.326 A:middle
So, the records describe
what to Share.

00:33:56.996 --> 00:34:01.196 A:middle
And the CKShare describes how
those records should be shared.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:56.996 --> 00:34:01.196 A:middle
And the CKShare describes how
those records should be shared.

00:34:01.876 --> 00:34:05.436 A:middle
So, we're going to be
looking at the how.

00:34:05.436 --> 00:34:09.255 A:middle
So, as Jacob mentioned,
every CKShare is a CKRecord

00:34:09.255 --> 00:34:10.856 A:middle
but it has some additional
properties.

00:34:11.906 --> 00:34:14.656 A:middle
And we've been looking at
how these properties apply

00:34:14.656 --> 00:34:16.116 A:middle
to the lifecycle of a Share.

00:34:16.315 --> 00:34:17.835 A:middle
So, we're going to
start from the beginning

00:34:18.525 --> 00:34:19.866 A:middle
and the owner will
create a Share.

00:34:20.525 --> 00:34:24.606 A:middle
And the owner has to decide
what is the public permission

00:34:24.606 --> 00:34:25.096 A:middle
for the Share.

00:34:25.545 --> 00:34:27.726 A:middle
So, in this case the owner
says it should be none,

00:34:27.906 --> 00:34:29.795 A:middle
because he wants to
invite participants.

00:34:30.746 --> 00:34:32.456 A:middle
And let's say he
invites two participants.

00:34:33.255 --> 00:34:35.335 A:middle
Their status is automatically
invited.

00:34:35.846 --> 00:34:38.286 A:middle
And then the owner
decides what permission

00:34:38.286 --> 00:34:39.636 A:middle
to give to each participant.

00:34:41.456 --> 00:34:42.946 A:middle
Then, the owner saves the Share

00:34:43.176 --> 00:34:45.065 A:middle
and then he gets a
URL for the Share.

00:34:45.636 --> 00:34:47.696 A:middle
So, there are two
things happening here.

00:34:48.045 --> 00:34:50.485 A:middle
One is that the Share
has a state.

00:34:50.646 --> 00:34:54.376 A:middle
And the State says only these
two participants can accept

00:34:54.376 --> 00:34:54.646 A:middle
the Share.

00:34:55.626 --> 00:34:59.046 A:middle
The owner is the one with the
URL and it is his responsibility

00:34:59.046 --> 00:35:00.726 A:middle
to tell people about this URL.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.046 --> 00:35:00.726 A:middle
to tell people about this URL.

00:35:01.876 --> 00:35:04.026 A:middle
So, even if he tells 100
people about this URL,

00:35:04.026 --> 00:35:06.786 A:middle
only these two participants
can accept the Share.

00:35:08.126 --> 00:35:09.716 A:middle
So, when a participant
accepts the Share,

00:35:10.296 --> 00:35:11.286 A:middle
they accept via the URL.

00:35:11.286 --> 00:35:15.616 A:middle
And after that accept,

00:35:15.756 --> 00:35:18.276 A:middle
their acceptance
status becomes accepted.

00:35:18.636 --> 00:35:20.266 A:middle
And then the permission

00:35:20.266 --> 00:35:22.296 A:middle
in the Share is exactly
what the owner gave them.

00:35:23.216 --> 00:35:25.696 A:middle
So, now let's say
the owner wants

00:35:25.696 --> 00:35:27.096 A:middle
to create a more open share.

00:35:27.586 --> 00:35:28.616 A:middle
So, let's start over.

00:35:30.836 --> 00:35:36.036 A:middle
The owner sets up a
Share and then he decides

00:35:36.036 --> 00:35:37.766 A:middle
that the public permission
should be readOnly

00:35:37.766 --> 00:35:38.246 A:middle
or read/write.

00:35:39.786 --> 00:35:41.116 A:middle
He doesn't add any participants.

00:35:41.116 --> 00:35:42.156 A:middle
He just saves the Share.

00:35:42.426 --> 00:35:44.846 A:middle
And then he gets a
URL for the share.

00:35:45.596 --> 00:35:47.396 A:middle
So, there's still
two things happening.

00:35:47.396 --> 00:35:49.386 A:middle
One is that the Share
has a state

00:35:50.116 --> 00:35:51.826 A:middle
and it says anyone can join.

00:35:52.336 --> 00:35:53.866 A:middle
And the owner has a URL.

00:35:54.816 --> 00:35:57.006 A:middle
And it's his responsibility
to tell people about it.

00:35:57.556 --> 00:36:00.796 A:middle
So, if he tells 100 people,
then all 100 people can join.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:57.556 --> 00:36:00.796 A:middle
So, if he tells 100 people,
then all 100 people can join.

00:36:01.256 --> 00:36:04.606 A:middle
So, when they join, they
would have to join via the URL

00:36:04.606 --> 00:36:06.546 A:middle
and then that participant
appears

00:36:06.546 --> 00:36:08.576 A:middle
in the Share and accepted state.

00:36:09.686 --> 00:36:11.486 A:middle
Their permission is inherited

00:36:11.666 --> 00:36:13.276 A:middle
from the Share's
public permission field.

00:36:13.706 --> 00:36:17.956 A:middle
And that's how you set up the
Share and accept the Share.

00:36:19.216 --> 00:36:22.326 A:middle
So, the next phase of
the Share's lifecycle is

00:36:22.326 --> 00:36:23.366 A:middle
when a participant leaves.

00:36:24.086 --> 00:36:27.736 A:middle
And a participant
can leave a Share

00:36:28.136 --> 00:36:32.406 A:middle
by deleting the CKShare
object from their shared DB.

00:36:33.236 --> 00:36:36.826 A:middle
This will also remove the shared
records from their shared DB.

00:36:37.016 --> 00:36:39.446 A:middle
So, to be clear, the
CKShare still exists.

00:36:39.716 --> 00:36:42.146 A:middle
It exists in the
owner's private DB.

00:36:42.146 --> 00:36:45.376 A:middle
It's just that this
participant no longer is

00:36:45.376 --> 00:36:46.756 A:middle
in the Share in accepted state.

00:36:47.446 --> 00:36:51.736 A:middle
And the owner has full
power over his Share

00:36:52.686 --> 00:36:54.246 A:middle
so he can remove
anybody he wants.

00:36:56.066 --> 00:36:57.466 A:middle
Let's say he wants
to remove everybody.

00:36:57.466 --> 00:37:01.886 A:middle
He would do that by
deleting the CKShared object


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:57.466 --> 00:37:01.886 A:middle
He would do that by
deleting the CKShared object

00:37:01.886 --> 00:37:03.006 A:middle
from his private database.

00:37:03.736 --> 00:37:05.596 A:middle
This will also remove
the pointer

00:37:05.596 --> 00:37:06.826 A:middle
from the root record
to the Share.

00:37:09.136 --> 00:37:12.496 A:middle
And now the owner is back in the
initial state of being unshared.

00:37:14.716 --> 00:37:18.916 A:middle
So, let's move on and talk about
the CKShareParticipant object.

00:37:19.626 --> 00:37:21.696 A:middle
So, if you've seen this object
before in the lifecycle,

00:37:21.936 --> 00:37:23.886 A:middle
you saw the acceptance
status and the permission.

00:37:24.216 --> 00:37:26.476 A:middle
But now let's look at
the user identity field.

00:37:27.716 --> 00:37:28.986 A:middle
This has a look up info.

00:37:28.986 --> 00:37:32.486 A:middle
And the look up info is how
this participant was invited

00:37:32.486 --> 00:37:33.026 A:middle
to the share.

00:37:33.196 --> 00:37:36.916 A:middle
So, it will have their email,
phone or user record ID.

00:37:37.976 --> 00:37:40.186 A:middle
And the name components
are the first and last name

00:37:40.186 --> 00:37:43.476 A:middle
and this is populated with
when the participant accepts

00:37:44.056 --> 00:37:46.056 A:middle
the Share.

00:37:46.606 --> 00:37:49.396 A:middle
Every CKShareParticipant is
mapped to an iCloud account.

00:37:50.026 --> 00:37:53.986 A:middle
So, let's say the owner invites
4 participants and we were able

00:37:53.986 --> 00:37:58.136 A:middle
to find iCloud accounts for
the first two but we couldn't

00:37:58.136 --> 00:37:59.386 A:middle
for participant 3 and 4.

00:37:59.706 --> 00:38:01.076 A:middle
This is perfectly okay.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.706 --> 00:38:01.076 A:middle
This is perfectly okay.

00:38:01.496 --> 00:38:04.186 A:middle
CloudKit will create a
temporary placeholder

00:38:04.306 --> 00:38:05.476 A:middle
for participant 3 and 4.

00:38:05.476 --> 00:38:09.306 A:middle
And the only people who can
accept as participants 3

00:38:09.306 --> 00:38:11.506 A:middle
and 4 are the ones who can prove

00:38:11.656 --> 00:38:13.666 A:middle
that they owned the email
address or phone number

00:38:14.406 --> 00:38:15.456 A:middle
that the owner invited
them with.

00:38:15.916 --> 00:38:17.586 A:middle
This is called the
verification flow.

00:38:18.136 --> 00:38:21.626 A:middle
This will link the email
or phone to their account

00:38:21.736 --> 00:38:23.286 A:middle
so that they never have to go

00:38:23.286 --> 00:38:24.646 A:middle
through the verification
flow again.

00:38:25.186 --> 00:38:29.396 A:middle
And that's all the objects
that we have in sharing.

00:38:29.796 --> 00:38:33.166 A:middle
So, now let's move on and
talk about sharing APIs.

00:38:33.956 --> 00:38:36.746 A:middle
So, if you want to
create your own custom UI,

00:38:36.916 --> 00:38:38.206 A:middle
you can call our APIs.

00:38:38.556 --> 00:38:40.126 A:middle
And there are two
things that you can do.

00:38:40.616 --> 00:38:42.146 A:middle
So, on the behalf of the owner,

00:38:42.766 --> 00:38:43.936 A:middle
you can help them
set up the Share.

00:38:44.756 --> 00:38:46.036 A:middle
On behalf of the participant,

00:38:46.416 --> 00:38:47.776 A:middle
you can help them
accept the Share.

00:38:48.956 --> 00:38:51.996 A:middle
On watchOS and tvOS, there's
no built-in system UI.

00:38:53.226 --> 00:38:56.176 A:middle
So, you can ask your user to go
to a different platform to set

00:38:56.176 --> 00:38:57.476 A:middle
up a Share and accept the Share.

00:38:57.866 --> 00:39:01.276 A:middle
And then the Share data is
available across all platforms.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:57.866 --> 00:39:01.276 A:middle
And then the Share data is
available across all platforms.

00:39:02.376 --> 00:39:05.096 A:middle
Alternatively, you can
just call our sharing APIs.

00:39:05.216 --> 00:39:07.346 A:middle
And this is how you do it.

00:39:09.116 --> 00:39:12.426 A:middle
On behalf of the owner, you
can help them add participants.

00:39:12.426 --> 00:39:16.766 A:middle
You would have to look up by
email, phone or user record ID

00:39:17.346 --> 00:39:21.606 A:middle
and then translate that to
a CKShareParticipant object.

00:39:21.746 --> 00:39:23.836 A:middle
Once you have the
CKShareParticipant object,

00:39:24.016 --> 00:39:25.326 A:middle
add those to the share.

00:39:25.326 --> 00:39:30.146 A:middle
And then call CKModifyRecords
operation to save the Share.

00:39:30.966 --> 00:39:34.146 A:middle
Now your application
has a URL for the share.

00:39:35.126 --> 00:39:38.516 A:middle
And it is up to you, the
application or the owner,

00:39:38.836 --> 00:39:41.926 A:middle
to tell people about the URL.

00:39:41.926 --> 00:39:43.376 A:middle
When a participant
accepts a Share,

00:39:43.376 --> 00:39:44.916 A:middle
we always start with the URL.

00:39:45.596 --> 00:39:50.576 A:middle
You first have to convert the
URL to CKShareMetadata object

00:39:50.996 --> 00:39:53.196 A:middle
and then pass that
metadata object

00:39:53.436 --> 00:39:55.096 A:middle
to the CKAcceptShares operation.

00:39:55.836 --> 00:39:59.466 A:middle
Now, the participant will show
up in a Share in accepted state.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:00.136 --> 00:40:04.196 A:middle
Now, there are some
limitations to the accepted API.

00:40:05.726 --> 00:40:07.576 A:middle
For privacy reasons,
we cannot return

00:40:07.576 --> 00:40:08.936 A:middle
to you their name components.

00:40:09.376 --> 00:40:11.356 A:middle
And the verification
flow is not available.

00:40:11.916 --> 00:40:13.106 A:middle
So, if you get this error

00:40:13.856 --> 00:40:16.656 A:middle
or if it has iCloud
account Boolean is false,

00:40:17.616 --> 00:40:20.306 A:middle
then you can ask your user to
open up the URL themselves.

00:40:20.506 --> 00:40:24.656 A:middle
This will trigger the system
or the web to take them

00:40:24.656 --> 00:40:25.756 A:middle
through the verification flow.

00:40:26.386 --> 00:40:29.376 A:middle
And that's our sharing APIs.

00:40:30.356 --> 00:40:32.616 A:middle
So, now let's talk
about your users.

00:40:34.956 --> 00:40:40.836 A:middle
A user of your application can
invite anyone they want via any

00:40:40.836 --> 00:40:42.556 A:middle
email or any phone number.

00:40:43.276 --> 00:40:46.496 A:middle
Now, what this means is
the potential audience

00:40:46.496 --> 00:40:48.636 A:middle
for your application
is much larger

00:40:48.856 --> 00:40:49.886 A:middle
than your current user base.

00:40:50.806 --> 00:40:53.626 A:middle
So, these MIT's may not
have installed the latest

00:40:53.626 --> 00:40:54.426 A:middle
operating system.

00:40:54.426 --> 00:40:56.286 A:middle
They might not even
own an Apple product.

00:40:56.356 --> 00:41:01.276 A:middle
So, when they click on the
URL, we take them to the web.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:56.356 --> 00:41:01.276 A:middle
So, when they click on the
URL, we take them to the web.

00:41:01.596 --> 00:41:04.316 A:middle
And in the example for Notes,
this is what they'll see.

00:41:04.396 --> 00:41:06.756 A:middle
They will be asked
to join a Share,

00:41:07.226 --> 00:41:09.426 A:middle
after which they'll
see the shared Note.

00:41:10.076 --> 00:41:12.866 A:middle
And they can interact
with this Note just

00:41:12.866 --> 00:41:13.796 A:middle
like they would on a device.

00:41:15.206 --> 00:41:17.336 A:middle
But this is the Notes
Web Application

00:41:17.336 --> 00:41:18.926 A:middle
that lives on iCloud.com.

00:41:19.106 --> 00:41:21.026 A:middle
What about your Application?

00:41:21.766 --> 00:41:24.856 A:middle
Well, by default, your users
will see something like this.

00:41:25.656 --> 00:41:27.416 A:middle
It has your App icon
and it asks your user

00:41:27.416 --> 00:41:28.896 A:middle
to go on the latest device.

00:41:29.706 --> 00:41:32.436 A:middle
Which is not the
ideal user experience.

00:41:33.306 --> 00:41:35.226 A:middle
So, I do have some
good news for you.

00:41:35.796 --> 00:41:38.376 A:middle
You can go to your
CloudKit Dashboard

00:41:38.376 --> 00:41:40.446 A:middle
and configure a fallback URL.

00:41:41.286 --> 00:41:45.326 A:middle
So, when an invitee clicks on
a URL that is shared to them,

00:41:46.166 --> 00:41:48.816 A:middle
we redirect them to
your fallback URL.

00:41:49.866 --> 00:41:52.676 A:middle
We'll append the token
that is from the unique URL

00:41:52.676 --> 00:41:55.926 A:middle
for the Share so that you
can immediately take them

00:41:56.056 --> 00:42:00.216 A:middle
to accept the Share and then
show them the shared data.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:56.056 --> 00:42:00.216 A:middle
to accept the Share and then
show them the shared data.

00:42:00.366 --> 00:42:02.876 A:middle
Now, I hope you're excited
to get started on sharing.

00:42:03.586 --> 00:42:05.366 A:middle
There is just one last
thing that you need to know.

00:42:06.346 --> 00:42:09.486 A:middle
A CKShare is of this
new record type

00:42:09.686 --> 00:42:12.346 A:middle
and this record type
behaves just

00:42:12.346 --> 00:42:13.816 A:middle
like any other record
type in CloudKit.

00:42:14.786 --> 00:42:16.556 A:middle
You can create custom
fields on it.

00:42:16.556 --> 00:42:17.456 A:middle
You can run queries.

00:42:18.426 --> 00:42:22.246 A:middle
You also have the first created
in the development environment.

00:42:22.986 --> 00:42:27.746 A:middle
And the easiest way to create
it is just log in as a user

00:42:27.746 --> 00:42:29.556 A:middle
in your dev environment
and share something

00:42:29.896 --> 00:42:31.146 A:middle
from your private database.

00:42:32.126 --> 00:42:34.516 A:middle
This will trigger the
creation of the record type.

00:42:35.106 --> 00:42:36.676 A:middle
And then go to your
CloudKit Dashboard

00:42:36.676 --> 00:42:38.106 A:middle
and deploy your scheme
into production.

00:42:38.266 --> 00:42:41.306 A:middle
If you don't do this, then users

00:42:41.306 --> 00:42:43.386 A:middle
in the production
environment may get errors

00:42:43.386 --> 00:42:44.166 A:middle
when they create the Share

00:42:44.556 --> 00:42:46.766 A:middle
because the record
type doesn't exist yet.

00:42:47.316 --> 00:42:50.496 A:middle
And that wraps it up.

00:42:51.506 --> 00:42:54.256 A:middle
So, you learned today that
CloudKit is available on all

00:42:54.256 --> 00:42:57.406 A:middle
of our platforms including
watchOS and is available

00:42:57.406 --> 00:43:00.896 A:middle
on the web via CloudKit JS.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:57.406 --> 00:43:00.896 A:middle
on the web via CloudKit JS.

00:43:01.776 --> 00:43:05.296 A:middle
Telemetry is available on
our CloudKit Dashboard.

00:43:05.296 --> 00:43:08.266 A:middle
It's a great way to visualize
your application's behavior

00:43:08.266 --> 00:43:09.636 A:middle
including error trends.

00:43:10.106 --> 00:43:14.016 A:middle
There are many API improvements
including Long-Lived Operations,

00:43:14.816 --> 00:43:17.856 A:middle
[inaudible] and the
new fetch changes APIs.

00:43:18.336 --> 00:43:20.986 A:middle
And now you know all about
our new feature, sharing.

00:43:21.616 --> 00:43:24.716 A:middle
You've seen this system
UI and you know how

00:43:24.716 --> 00:43:28.466 A:middle
to create your own custom UI
by calling our sharing APIs.

00:43:28.526 --> 00:43:29.796 A:middle
And you've seen all the
objects that we used

00:43:29.796 --> 00:43:32.656 A:middle
in sharing including
the sharers lifecycle.

00:43:33.496 --> 00:43:35.936 A:middle
And I bet you will go back and
configure those fallback URLs.

00:43:36.716 --> 00:43:40.716 A:middle
So, I want to thank you for
sharing this experience with us.

00:43:41.056 --> 00:43:45.356 A:middle
I want to draw your attention
to CloudKit Best Practices.

00:43:45.356 --> 00:43:46.746 A:middle
It's tomorrow at 9 AM.

00:43:46.816 --> 00:43:49.356 A:middle
It's a great session on how to
use CloudKit more effectively.

00:43:50.586 --> 00:43:54.926 A:middle
Thank you and enjoy the rest
of your WWDC conference.

00:43:55.016 --> 00:43:57.000 A:middle
[ Applause ]

