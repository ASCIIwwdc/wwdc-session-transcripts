WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:18.516 A:middle
[ Music ]

00:00:19.516 --> 00:00:23.926 A:middle
[ Applause ]

00:00:24.426 --> 00:00:27.556 A:middle
&gt;&gt; Good afternoon.

00:00:27.556 --> 00:00:29.236 A:middle
Welcome to WC 2016.

00:00:30.826 --> 00:00:33.006 A:middle
Quite a bit has happened
since we met about a year ago.

00:00:33.006 --> 00:00:37.776 A:middle
With the addition of tvOS, then
our four Apple OS platforms,

00:00:37.776 --> 00:00:39.336 A:middle
a lot of them with
their own app store,

00:00:40.176 --> 00:00:41.816 A:middle
and all our platforms
are optimized

00:00:41.896 --> 00:00:43.596 A:middle
for their own unique
experiences.

00:00:43.966 --> 00:00:47.246 A:middle
But they share a tremendous
amount of common technologies

00:00:47.246 --> 00:00:49.506 A:middle
and APIs, making it easy
for you to bring your apps

00:00:49.506 --> 00:00:50.966 A:middle
to all four platforms

00:00:51.396 --> 00:00:55.316 A:middle
by leveraging the individual
character at the same time.

00:00:55.316 --> 00:00:58.296 A:middle
Our expert tool chain is the
same for all four platforms.

00:00:59.326 --> 00:01:01.436 A:middle
They share most of their
frameworks and libraries,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.326 --> 00:01:01.436 A:middle
They share most of their
frameworks and libraries,

00:01:02.436 --> 00:01:04.096 A:middle
and the underlying
programming concepts

00:01:04.096 --> 00:01:06.306 A:middle
and programming languages
are the same as well.

00:01:07.756 --> 00:01:11.446 A:middle
And today we are announcing a
ton of new APIs and technologies

00:01:11.446 --> 00:01:13.306 A:middle
that you'll be able
to take advantage of.

00:01:13.856 --> 00:01:16.186 A:middle
You'll find many more ways
to express your ideas,

00:01:16.436 --> 00:01:18.346 A:middle
and you'll be able to
target even more users

00:01:18.346 --> 00:01:19.266 A:middle
in even more markets.

00:01:20.466 --> 00:01:24.706 A:middle
Our iOS X in particular is
huge this year for developers.

00:01:25.446 --> 00:01:27.856 A:middle
In fact, if you take a
look at the iOS at least

00:01:27.856 --> 00:01:30.156 A:middle
that we announced this morning,
you'll find that we are opening

00:01:30.156 --> 00:01:33.526 A:middle
up pretty much the entire user
experience of iOS to developers,

00:01:33.826 --> 00:01:36.416 A:middle
covering everything from
notifications to Phone,

00:01:36.416 --> 00:01:38.486 A:middle
Messages, Maps, and even Siri.

00:01:40.196 --> 00:01:43.586 A:middle
An important concept that we use
to achieve that is extensions,

00:01:43.626 --> 00:01:45.626 A:middle
and you might remember that
we introduced extensions two

00:01:45.626 --> 00:01:46.196 A:middle
years ago.

00:01:46.826 --> 00:01:49.536 A:middle
They represent an increasingly
important mechanism for us

00:01:49.586 --> 00:01:51.726 A:middle
because they allow you to
branch out from your apps

00:01:52.016 --> 00:01:54.486 A:middle
and to participate in
our system functionality.

00:01:55.356 --> 00:01:58.156 A:middle
They allow you to
securely customize our OS's

00:01:58.186 --> 00:02:00.986 A:middle
by running short-lived
sandboxed services


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.186 --> 00:02:00.986 A:middle
by running short-lived
sandboxed services

00:02:01.226 --> 00:02:02.536 A:middle
that are launched on demand.

00:02:04.656 --> 00:02:07.316 A:middle
Our shipping products already
support a broad variety

00:02:07.316 --> 00:02:10.286 A:middle
of extension points, and we're
adding many more this year,

00:02:10.656 --> 00:02:13.836 A:middle
allowing you to hook even
deeper into our OS's and apps.

00:02:15.266 --> 00:02:17.436 A:middle
Perhaps the most exciting
new extension point is

00:02:17.436 --> 00:02:18.826 A:middle
for creating iMessage Apps.

00:02:19.176 --> 00:02:20.206 A:middle
And to tell you all about it,

00:02:20.306 --> 00:02:22.546 A:middle
I'm going to hand
over to Darin Adler.

00:02:23.516 --> 00:02:29.006 A:middle
[ Applause ]

00:02:29.506 --> 00:02:32.926 A:middle
&gt;&gt; So I'm having a great
time with the new Messages,

00:02:32.956 --> 00:02:34.886 A:middle
and I hope you all will too.

00:02:34.886 --> 00:02:38.006 A:middle
iMessage Apps are how you
can be a part of that.

00:02:38.866 --> 00:02:42.236 A:middle
Now, as Andreas mentioned,
iMessage Apps are extensions,

00:02:42.546 --> 00:02:45.136 A:middle
and that means that like other
extensions, you can include them

00:02:45.136 --> 00:02:46.496 A:middle
in your apps on the App Store.

00:02:47.236 --> 00:02:50.006 A:middle
But with iMessage Apps,
there's another option as well.

00:02:50.276 --> 00:02:52.286 A:middle
You can include them in
the iMessage App Store,

00:02:52.546 --> 00:02:54.436 A:middle
which you get at right
from inside Messages.

00:02:55.016 --> 00:02:57.846 A:middle
Looks like this.

00:02:58.096 --> 00:03:04.106 A:middle
Now, when you send interactive
messages with your iMessage App,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.096 --> 00:03:04.106 A:middle
Now, when you send interactive
messages with your iMessage App,

00:03:04.646 --> 00:03:09.306 A:middle
you'll have the icon of
the app up in the corner,

00:03:09.666 --> 00:03:12.126 A:middle
but even more importantly,
if the person you send

00:03:12.126 --> 00:03:15.716 A:middle
that interactive message to
doesn't have the app yet,

00:03:16.126 --> 00:03:19.156 A:middle
they'll have this link that
says, "Get a name of app."

00:03:19.416 --> 00:03:20.646 A:middle
If you tap on that link.

00:03:21.356 --> 00:03:23.566 A:middle
That takes you right to
getting or buying the app,

00:03:23.726 --> 00:03:27.536 A:middle
so it's an amazing way to have
your customers spread your app

00:03:27.536 --> 00:03:29.186 A:middle
from one person to another.

00:03:31.156 --> 00:03:32.966 A:middle
Now, if you're building
a Sticker Pack App,

00:03:33.106 --> 00:03:33.896 A:middle
it's really simple.

00:03:33.896 --> 00:03:35.156 A:middle
There's no coding required.

00:03:35.426 --> 00:03:37.836 A:middle
You just take all of the
graphics for the icons

00:03:37.836 --> 00:03:39.506 A:middle
for the app, the
graphics for the stickers,

00:03:39.746 --> 00:03:44.106 A:middle
put them into Xcode, build, and
then submit to iTunes Connect.

00:03:44.736 --> 00:03:48.006 A:middle
If you want to make a
more sophisticated app

00:03:48.006 --> 00:03:51.036 A:middle
and take advantage of all
the power in iMessage Apps,

00:03:51.526 --> 00:03:54.986 A:middle
you program with Swift
and use UIKit just

00:03:54.986 --> 00:03:56.166 A:middle
like with other extensions.

00:03:56.606 --> 00:03:58.536 A:middle
And there's a new
Messages extension point.

00:03:59.926 --> 00:04:02.856 A:middle
The classes in this Messages
extension point give you access


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.926 --> 00:04:02.856 A:middle
The classes in this Messages
extension point give you access

00:04:02.856 --> 00:04:05.056 A:middle
to everything you need
inside the Messages App.

00:04:05.346 --> 00:04:07.916 A:middle
So there's an object
representing a message

00:04:07.916 --> 00:04:08.706 A:middle
that you send.

00:04:08.706 --> 00:04:11.366 A:middle
There's an object representing
the whole conversation the

00:04:11.366 --> 00:04:12.286 A:middle
message is part of.

00:04:12.286 --> 00:04:14.296 A:middle
There's even an object
representing a thing called a

00:04:14.296 --> 00:04:17.236 A:middle
session, which lets you
group messages together,

00:04:17.236 --> 00:04:20.616 A:middle
and it's a really great way to
do collaborative iMessage Apps.

00:04:20.776 --> 00:04:26.466 A:middle
Now, all of this is done
without compromising the privacy

00:04:26.466 --> 00:04:27.926 A:middle
that Messages is famous for.

00:04:28.776 --> 00:04:31.566 A:middle
Your app doesn't have
any access to anything

00:04:31.566 --> 00:04:34.816 A:middle
in the conversation outside of
what's being done with the app,

00:04:35.236 --> 00:04:39.456 A:middle
and if, it doesn't even
necessarily know who's involved,

00:04:39.456 --> 00:04:44.886 A:middle
who you're sending to, so that
helps keep the privacy intact.

00:04:45.496 --> 00:04:49.506 A:middle
Now, adaptive design
is important

00:04:49.506 --> 00:04:51.246 A:middle
to any iOS app development,

00:04:51.956 --> 00:04:54.616 A:middle
and it's even more
important for iMessage Apps.

00:04:54.686 --> 00:04:59.566 A:middle
That's because Messages runs in
all the different kinds of sizes

00:04:59.646 --> 00:05:01.886 A:middle
and shapes of devices
and all the adaptations.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.646 --> 00:05:01.886 A:middle
and shapes of devices
and all the adaptations.

00:05:02.136 --> 00:05:05.886 A:middle
And so it runs on iPad, it runs
on iPhone, it runs in slide

00:05:05.886 --> 00:05:07.926 A:middle
over an iPad, portrait
and landscape,

00:05:08.196 --> 00:05:10.916 A:middle
and so your iMessage
Apps need to too.

00:05:11.196 --> 00:05:13.556 A:middle
But there's one additional
wrinkle for iMessage Apps,

00:05:13.616 --> 00:05:16.956 A:middle
which is that they run in this
Compact Mode down at the bottom

00:05:16.956 --> 00:05:18.836 A:middle
of the screen where the
keyboard is and you can slide

00:05:18.886 --> 00:05:21.616 A:middle
between them or you
can take that same app

00:05:22.046 --> 00:05:24.086 A:middle
and expand it to its full size.

00:05:24.086 --> 00:05:24.956 A:middle
Sometimes the app will do it.

00:05:24.956 --> 00:05:26.406 A:middle
Sometimes the user will do it.

00:05:26.406 --> 00:05:28.586 A:middle
Adaptive design is
very important

00:05:28.586 --> 00:05:30.066 A:middle
to that experience as well.

00:05:31.496 --> 00:05:34.886 A:middle
Everything you need to develop
iMessage Apps is available,

00:05:34.886 --> 00:05:36.356 A:middle
and so you can really start now.

00:05:36.686 --> 00:05:39.906 A:middle
The SDK has all the things
I talked about everything

00:05:39.906 --> 00:05:42.466 A:middle
from the Messages
extension point.

00:05:42.466 --> 00:05:45.806 A:middle
And the simulator even
has a new, special version

00:05:45.806 --> 00:05:49.196 A:middle
of Messages just for developers
that lets you see both sides

00:05:49.196 --> 00:05:52.796 A:middle
of a conversation and try
out your iMessage Apps

00:05:52.856 --> 00:05:54.376 A:middle
to see how they're
both sent and received.

00:05:55.526 --> 00:05:59.976 A:middle
And now Adele Peterson
will show you how all

00:05:59.976 --> 00:06:01.946 A:middle
of this comes together in iOS X.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.976 --> 00:06:01.946 A:middle
of this comes together in iOS X.

00:06:02.516 --> 00:06:07.636 A:middle
[ Applause ]

00:06:08.136 --> 00:06:09.716 A:middle
&gt;&gt; Thanks, Darin.

00:06:09.716 --> 00:06:10.546 A:middle
As you saw this morning,

00:06:10.546 --> 00:06:13.166 A:middle
our friends at Disney have
made some awesome stickers,

00:06:13.166 --> 00:06:14.806 A:middle
so I'm going to show
you how they did it

00:06:14.806 --> 00:06:18.326 A:middle
by putting together a
sticker app in Xcode.

00:06:18.456 --> 00:06:19.556 A:middle
Now, this only takes a minute,

00:06:19.556 --> 00:06:22.116 A:middle
so even though I'm
starting a new project,

00:06:22.116 --> 00:06:22.896 A:middle
I'm actually almost done.

00:06:22.896 --> 00:06:25.506 A:middle
I'm going to start by
selecting the Sticker Pack

00:06:25.506 --> 00:06:26.396 A:middle
application template.

00:06:27.146 --> 00:06:31.956 A:middle
I'll give it a good name
like Star Wars, save it,

00:06:31.956 --> 00:06:34.976 A:middle
and I'll select the
Stickers Asset Catalog.

00:06:35.776 --> 00:06:38.826 A:middle
Now, I want my stickers to have
a great icon when I look at them

00:06:38.826 --> 00:06:40.836 A:middle
in the Messages app
drawer, so I'll start

00:06:40.836 --> 00:06:43.156 A:middle
by dragging in my icons.

00:06:44.156 --> 00:06:47.456 A:middle
And now I can select my sticker
pack and drag my stickers in.

00:06:49.166 --> 00:06:50.306 A:middle
Okay, let's give that a try.

00:06:50.386 --> 00:06:54.076 A:middle
Now that Messages is in the
simulator, it will be easy

00:06:54.076 --> 00:06:57.816 A:middle
for you to try out your
stickers in iMessage Apps.

00:06:58.566 --> 00:07:02.536 A:middle
Okay, so let's launch
the sticker pack.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.566 --> 00:07:02.536 A:middle
Okay, so let's launch
the sticker pack.

00:07:02.906 --> 00:07:04.826 A:middle
I just love this 8-bit droid.

00:07:05.446 --> 00:07:10.256 A:middle
So I can test out sending one
and I can even test out peeling

00:07:10.656 --> 00:07:12.476 A:middle
and dragging a sticker
onto another message.

00:07:14.306 --> 00:07:14.926 A:middle
Looks great.

00:07:14.926 --> 00:07:17.286 A:middle
And that's how easy it
is to make a sticker app.

00:07:18.516 --> 00:07:25.046 A:middle
[ Applause ]

00:07:25.546 --> 00:07:27.396 A:middle
Now onto iMessage Apps.

00:07:27.736 --> 00:07:32.066 A:middle
So I've got this ice cream app
here, and my daughter's really

00:07:32.066 --> 00:07:33.856 A:middle
into these kinds of
apps that let her design

00:07:33.856 --> 00:07:36.696 A:middle
and create things, so I'm
making an iMessage App for her

00:07:36.696 --> 00:07:38.946 A:middle
to build ice cream
stickers with her friends.

00:07:39.536 --> 00:07:41.006 A:middle
So here in the Compact View,

00:07:41.346 --> 00:07:43.506 A:middle
you have the completed
ice cream stickers,

00:07:43.506 --> 00:07:46.016 A:middle
and when I tap the
plus, the app expands

00:07:46.486 --> 00:07:48.916 A:middle
and shows the ice
cream building UI.

00:07:49.136 --> 00:07:51.156 A:middle
So I'm going to select a
cone here and start this off.

00:07:51.336 --> 00:07:54.916 A:middle
So I'm going to select
it and send.

00:07:54.916 --> 00:07:59.006 A:middle
So now the simulator shows both
the sender and receiver sides

00:07:59.006 --> 00:08:01.966 A:middle
of the conversation,
so you don't even need


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.006 --> 00:08:01.966 A:middle
of the conversation,
so you don't even need

00:08:01.966 --> 00:08:04.246 A:middle
to use two iOS devices to
test your iMessage App.

00:08:04.846 --> 00:08:06.786 A:middle
In this view, I'm
actually John Appleseed

00:08:06.786 --> 00:08:08.986 A:middle
and I'm sending the
cone to Kate Bell.

00:08:09.366 --> 00:08:11.436 A:middle
Let's look at it from the
other side of the conversation.

00:08:12.696 --> 00:08:14.246 A:middle
So here Kate's received
the cone.

00:08:14.776 --> 00:08:18.396 A:middle
You can tap on the message,
launch the app, add some scoops,

00:08:18.466 --> 00:08:19.616 A:middle
and send it back to John.

00:08:19.726 --> 00:08:22.216 A:middle
And then on the other side

00:08:22.216 --> 00:08:25.436 A:middle
of the conversation,
you receive this.

00:08:25.606 --> 00:08:27.616 A:middle
You tap the message,
you add a topping,

00:08:28.266 --> 00:08:32.186 A:middle
and send it back to Kate.

00:08:32.385 --> 00:08:34.086 A:middle
Now, as delicious
as this all looks,

00:08:34.086 --> 00:08:36.666 A:middle
I don't really want my entire
conversation to be filled

00:08:36.666 --> 00:08:38.746 A:middle
with these partially
built ice cream cones.

00:08:38.976 --> 00:08:40.956 A:middle
There's actually a much
cleaner way to build this kind

00:08:40.956 --> 00:08:43.236 A:middle
of collaborative iMessage App.

00:08:43.436 --> 00:08:45.696 A:middle
If I use the same MS session
for each of those messages,

00:08:45.696 --> 00:08:47.566 A:middle
then the earlier steps

00:08:47.566 --> 00:08:49.276 A:middle
of building ice cream
will be replaced

00:08:49.276 --> 00:08:52.396 A:middle
by concise descriptions, and
you'll only see the later,

00:08:52.646 --> 00:08:54.006 A:middle
the latest ice cream message.

00:08:54.006 --> 00:08:55.946 A:middle
So I'm going to make
that change in Xcode

00:08:55.946 --> 00:08:57.146 A:middle
and show you how it looks.

00:08:58.576 --> 00:09:02.146 A:middle
So let me switch over to
the ice cream project.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.576 --> 00:09:02.146 A:middle
So let me switch over to
the ice cream project.

00:09:02.516 --> 00:09:03.126 A:middle
Let's see.

00:09:05.026 --> 00:09:06.516 A:middle
Okay, so here's the
part of my code

00:09:06.516 --> 00:09:08.246 A:middle
that creates the
MS message object.

00:09:08.516 --> 00:09:12.796 A:middle
I'm going to drag in -- oops --
I'm going to drag in this code.

00:09:12.796 --> 00:09:15.816 A:middle
This code looks to see

00:09:15.816 --> 00:09:17.856 A:middle
if there's a selected
message in the conversation.

00:09:18.126 --> 00:09:19.696 A:middle
That's what you get when
you tap that message

00:09:19.696 --> 00:09:21.456 A:middle
and it launches the
app full screen.

00:09:21.766 --> 00:09:23.296 A:middle
So if there is a
selected message,

00:09:23.296 --> 00:09:25.386 A:middle
we'll use the session
associated with that message,

00:09:25.516 --> 00:09:27.846 A:middle
and if there isn't, we'll
pass in a fresh MS session.

00:09:27.916 --> 00:09:33.636 A:middle
So let's give that a try.

00:09:33.876 --> 00:09:38.186 A:middle
Okay, so now we'll
launch this app again.

00:09:38.496 --> 00:09:43.816 A:middle
We'll tap the Plus button,
select a cone, send it to Kate,

00:09:45.906 --> 00:09:53.986 A:middle
add some toppings, send it back
to John, and then finish it off,

00:09:55.756 --> 00:09:56.656 A:middle
and send it back to Kate.

00:09:56.656 --> 00:10:00.426 A:middle
So now you can see those
descriptions describing the


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:56.656 --> 00:10:00.426 A:middle
So now you can see those
descriptions describing the

00:10:00.426 --> 00:10:01.536 A:middle
earlier steps of the process,

00:10:01.536 --> 00:10:03.786 A:middle
and you no longer have those
partially built ice creams

00:10:03.836 --> 00:10:05.036 A:middle
sitting on top of
the finished product.

00:10:05.036 --> 00:10:07.606 A:middle
And that is a little taste

00:10:07.606 --> 00:10:10.166 A:middle
of what you can do
with iMessage Apps.

00:10:10.166 --> 00:10:12.616 A:middle
Next up, Robby Walker
to tell you about Siri.

00:10:13.516 --> 00:10:17.546 A:middle
[ Applause ]

00:10:18.046 --> 00:10:18.646 A:middle
&gt;&gt; Thank you, Adele.

00:10:20.526 --> 00:10:23.466 A:middle
Five years ago, we
announced Siri,

00:10:23.466 --> 00:10:26.006 A:middle
the intelligent assistant
for iPhone.

00:10:26.836 --> 00:10:28.456 A:middle
Since then, Siri has spoken

00:10:28.456 --> 00:10:30.466 A:middle
to people hundreds
of billions of times.

00:10:31.346 --> 00:10:34.106 A:middle
As of today, Siri is now
available on five classes

00:10:34.106 --> 00:10:37.776 A:middle
of devices and in a
whopping 36 locales.

00:10:39.106 --> 00:10:42.576 A:middle
Siri also has many new features
and an improved core experience.

00:10:43.146 --> 00:10:47.056 A:middle
One cool example, on
iPhone 6s and 6s Plus,

00:10:47.056 --> 00:10:49.776 A:middle
you can start talking to Siri
the instant you press the Home

00:10:49.776 --> 00:10:52.726 A:middle
button with literally zero
milliseconds of latency thanks

00:10:52.726 --> 00:10:53.896 A:middle
to an amazing collaboration

00:10:53.896 --> 00:10:55.286 A:middle
between our hardware
and software teams.

00:10:56.056 --> 00:10:58.236 A:middle
But of course, until today,

00:10:58.236 --> 00:11:00.966 A:middle
something really important has
been missing, and that's apps,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.236 --> 00:11:00.966 A:middle
something really important has
been missing, and that's apps,

00:11:01.426 --> 00:11:03.646 A:middle
so we're so excited to
launch the first version

00:11:03.646 --> 00:11:05.376 A:middle
of SiriKit on iOS.

00:11:06.516 --> 00:11:12.836 A:middle
[ Applause ]

00:11:13.336 --> 00:11:15.146 A:middle
We believe the best
experience for people is

00:11:15.146 --> 00:11:17.966 A:middle
to use the apps they love,
the apps you all have created,

00:11:17.966 --> 00:11:20.666 A:middle
and with SiriKit, people
will now be able to interact

00:11:20.666 --> 00:11:23.086 A:middle
with those applications in
a new, conversational way.

00:11:23.166 --> 00:11:26.246 A:middle
I'm going to talk about how
your application will work

00:11:26.246 --> 00:11:28.926 A:middle
with SiriKit to provide a great,
conversational experience.

00:11:29.576 --> 00:11:33.996 A:middle
The first thing Siri does is
understand what the user said,

00:11:33.996 --> 00:11:36.036 A:middle
taking audio and
turning it into text.

00:11:37.156 --> 00:11:39.916 A:middle
Then, Siri understands what the
user means, taking that text

00:11:39.916 --> 00:11:41.996 A:middle
and turning it into
what we call an intent.

00:11:43.366 --> 00:11:46.306 A:middle
Based off that, on that
intent, Siri then takes action

00:11:47.166 --> 00:11:49.376 A:middle
and provides responses,
both visual and verbal.

00:11:50.586 --> 00:11:52.386 A:middle
Your application will
provide three things.

00:11:53.006 --> 00:11:55.546 A:middle
The first is vocabulary to
aid in Siri's understanding.

00:11:55.846 --> 00:11:58.266 A:middle
The second is your app logic,
your core functionality,

00:11:58.576 --> 00:12:00.616 A:middle
and of course, a
great user interface.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.576 --> 00:12:00.616 A:middle
and of course, a
great user interface.

00:12:01.716 --> 00:12:04.736 A:middle
Now, we designed SiriKit so that
Siri handles the conversation

00:12:05.016 --> 00:12:06.776 A:middle
and your application
handles the functionality.

00:12:07.306 --> 00:12:09.906 A:middle
And what's great about that is
it means it's incredibly easy

00:12:09.906 --> 00:12:13.006 A:middle
to adopt SiriKit and your
users can expect a consistent,

00:12:13.006 --> 00:12:14.776 A:middle
high-quality experience
that's natural,

00:12:15.126 --> 00:12:17.426 A:middle
feels like a conversation
and not like a command line.

00:12:18.416 --> 00:12:19.286 A:middle
Let's dig in a bit.

00:12:20.336 --> 00:12:21.516 A:middle
The first role of
your application is

00:12:21.516 --> 00:12:23.546 A:middle
to provide vocabulary,
and there's two kinds.

00:12:24.096 --> 00:12:25.466 A:middle
The first is app vocabulary.

00:12:25.836 --> 00:12:27.136 A:middle
These are terms that
would be known

00:12:27.136 --> 00:12:28.566 A:middle
to any user of your application.

00:12:28.826 --> 00:12:30.246 A:middle
Things like UberX or Pinboard.

00:12:30.896 --> 00:12:32.866 A:middle
The other is user vocabulary.

00:12:33.306 --> 00:12:35.396 A:middle
These are terms that are
specific and important

00:12:35.396 --> 00:12:37.286 A:middle
to an individual user
of your application.

00:12:37.596 --> 00:12:39.836 A:middle
Things like their contact
names or names of photo albums.

00:12:41.546 --> 00:12:43.036 A:middle
The main role of
your application is

00:12:43.036 --> 00:12:44.956 A:middle
to provide your app
logic, and this comes

00:12:45.046 --> 00:12:46.676 A:middle
in an extension at
three key moments.

00:12:47.406 --> 00:12:49.566 A:middle
The first is to help Siri
understand the parameters

00:12:49.566 --> 00:12:50.306 A:middle
of the user's intent.

00:12:50.796 --> 00:12:54.056 A:middle
The second is to help Siri show
the user what will happen if

00:12:54.056 --> 00:12:55.196 A:middle
and when they confirm
their intent.

00:12:55.536 --> 00:12:58.036 A:middle
And the third is to actually
of course handle the intent,

00:12:58.426 --> 00:13:00.436 A:middle
to accomplish what the
user came to accomplish.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.426 --> 00:13:00.436 A:middle
to accomplish what the
user came to accomplish.

00:13:01.956 --> 00:13:04.446 A:middle
And during the conversation,
Siri presents visuals

00:13:04.446 --> 00:13:06.806 A:middle
to the user, and you can
optionally provide a second

00:13:06.806 --> 00:13:09.066 A:middle
extension to customize
these so that using Siri

00:13:09.066 --> 00:13:10.636 A:middle
with your application
still feels

00:13:10.636 --> 00:13:12.126 A:middle
like using your application
anywhere else.

00:13:13.716 --> 00:13:14.836 A:middle
So let's take a look

00:13:14.836 --> 00:13:16.826 A:middle
at a messaging app
integration called Hologram.

00:13:17.256 --> 00:13:19.706 A:middle
Hologram is the number one
app for sending messages

00:13:19.706 --> 00:13:21.316 A:middle
in a galaxy far, far away.

00:13:21.316 --> 00:13:26.286 A:middle
So imagine someone says
to Siri, "Send a hologram

00:13:26.286 --> 00:13:28.246 A:middle
to Obi-Wan saying,
you're my only hope."

00:13:29.646 --> 00:13:32.236 A:middle
Now, it's Siri's job to
take that audio and turn it

00:13:32.236 --> 00:13:34.896 A:middle
into text, but Siri needs
help from your application.

00:13:35.916 --> 00:13:37.296 A:middle
Siri doesn't know on its own

00:13:37.296 --> 00:13:39.816 A:middle
that Obi-Wan is an important
user or important person

00:13:39.816 --> 00:13:42.186 A:middle
in your user's life, and
so by providing that piece

00:13:42.186 --> 00:13:43.946 A:middle
of vocabulary to
Siri, you make sure

00:13:43.946 --> 00:13:45.596 A:middle
that Siri understands
what your user said.

00:13:47.476 --> 00:13:50.206 A:middle
Next, Siri works to understand
what the user is trying to do.

00:13:50.476 --> 00:13:52.466 A:middle
In this case, send a
very important message.

00:13:53.496 --> 00:13:55.396 A:middle
And Siri will also work
to understand parameters,

00:13:55.706 --> 00:13:57.286 A:middle
like the recipient
and the content.

00:13:59.056 --> 00:14:00.386 A:middle
Siri packages all
of this information


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.056 --> 00:14:00.386 A:middle
Siri packages all
of this information

00:14:00.386 --> 00:14:03.396 A:middle
into a structured object
a nice, simple object.

00:14:04.006 --> 00:14:05.326 A:middle
Your application
doesn't have to worry

00:14:05.326 --> 00:14:07.996 A:middle
about the countless ways someone
could express this same idea

00:14:07.996 --> 00:14:09.876 A:middle
to Siri, whether it be
different phrasings,

00:14:10.056 --> 00:14:11.236 A:middle
multi-step interactions.

00:14:11.476 --> 00:14:13.156 A:middle
All of that's handled
and all you have to worry

00:14:13.156 --> 00:14:14.906 A:middle
about is this really
simple object.

00:14:16.546 --> 00:14:19.116 A:middle
SiriKit will then hand this
object to your extension to help

00:14:19.116 --> 00:14:20.416 A:middle
with parameter resolution.

00:14:20.546 --> 00:14:22.326 A:middle
For example, maybe
your application knows

00:14:22.326 --> 00:14:24.556 A:middle
that the user said "Obi-Wan,"
but they usually refer

00:14:24.556 --> 00:14:25.716 A:middle
to this person as
Old Ben Kenobi,

00:14:26.086 --> 00:14:27.986 A:middle
and you can instruct
SiriKit to update the intent.

00:14:29.366 --> 00:14:30.766 A:middle
Then comes the big event.

00:14:30.766 --> 00:14:32.646 A:middle
It's time to actually
handle the user's intent,

00:14:33.036 --> 00:14:34.896 A:middle
and SiriKit will
again hand this object

00:14:34.896 --> 00:14:36.346 A:middle
to your extension
for processing.

00:14:36.486 --> 00:14:38.216 A:middle
In this case, you're going to
send the message, you're going

00:14:38.216 --> 00:14:39.336 A:middle
to get in an escape pod,

00:14:39.336 --> 00:14:41.056 A:middle
roll over some sand dunes,
deal with some Jawas.

00:14:41.056 --> 00:14:43.056 A:middle
You're going to get the
job done for your users.

00:14:44.736 --> 00:14:47.896 A:middle
And along the way, Siri will
provide a default user interface

00:14:47.896 --> 00:14:49.146 A:middle
for this interaction.

00:14:49.146 --> 00:14:52.066 A:middle
And if you want, you can
also bring your application's

00:14:52.066 --> 00:14:54.506 A:middle
experience into Siri so
that it feels more familiar

00:14:54.566 --> 00:14:55.266 A:middle
to your users.

00:14:56.616 --> 00:14:57.616 A:middle
And that's it.

00:14:57.616 --> 00:14:59.736 A:middle
Those are the three things
that your application has to do

00:14:59.736 --> 00:15:01.566 A:middle
because SiriKit handles
the conversation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.736 --> 00:15:01.566 A:middle
because SiriKit handles
the conversation.

00:15:02.906 --> 00:15:04.986 A:middle
And handling the conversation
actually means a lot.

00:15:05.296 --> 00:15:06.686 A:middle
Siri's behavior is
different depending

00:15:06.686 --> 00:15:09.146 A:middle
on how someone starts a
conversation with Siri.

00:15:09.486 --> 00:15:12.286 A:middle
So if you're holding your
phone, pressing the Home button,

00:15:12.476 --> 00:15:13.276 A:middle
looking at your screen,

00:15:13.736 --> 00:15:15.616 A:middle
Siri will provide
more visual responses

00:15:15.716 --> 00:15:16.766 A:middle
and say less things out loud.

00:15:17.186 --> 00:15:18.846 A:middle
But if you say, "Hey,
Siri," or if you're

00:15:18.846 --> 00:15:20.896 A:middle
in the car using
CarPlay, then Siri's going

00:15:20.896 --> 00:15:22.576 A:middle
to show a lot more
and, or sorry,

00:15:22.856 --> 00:15:24.576 A:middle
say a lot more and
show a lot less.

00:15:26.486 --> 00:15:29.856 A:middle
SiriKit is powered by
extensions and NSUserActivity,

00:15:30.066 --> 00:15:32.006 A:middle
the same technologies that
power an increasing number

00:15:32.006 --> 00:15:34.226 A:middle
of OS integrations, and you'll
hear a lot about them this week.

00:15:36.246 --> 00:15:38.896 A:middle
This year, SiriKit will connect
to applications in six domains,

00:15:38.896 --> 00:15:40.806 A:middle
and in each of these
domains, there may be more

00:15:40.806 --> 00:15:42.506 A:middle
than one intent to
provide a complete,

00:15:42.506 --> 00:15:43.596 A:middle
conversational experience.

00:15:43.926 --> 00:15:46.256 A:middle
For example, in Messaging,
you can send messages

00:15:46.256 --> 00:15:48.026 A:middle
or search them, and in Payments,

00:15:48.026 --> 00:15:49.886 A:middle
you can request payment
or send payment.

00:15:51.286 --> 00:15:54.086 A:middle
And SiriKit will be available
in all Siri languages,

00:15:54.596 --> 00:15:57.136 A:middle
and this is a big deal
because when I said earlier

00:15:57.136 --> 00:15:58.606 A:middle
that Siri handles
the conversation,

00:15:59.006 --> 00:16:01.866 A:middle
what I actually mean is Siri
handles the conversation


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.006 --> 00:16:01.866 A:middle
what I actually mean is Siri
handles the conversation

00:16:01.866 --> 00:16:05.526 A:middle
in all 36 locales so that
your application doesn't have

00:16:05.526 --> 00:16:06.216 A:middle
to worry about that.

00:16:08.516 --> 00:16:14.746 A:middle
[ Applause ]

00:16:15.246 --> 00:16:17.686 A:middle
We're so excited to
see what you'll build

00:16:17.686 --> 00:16:19.266 A:middle
and so is someone else we know.

00:16:19.886 --> 00:16:21.446 A:middle
Siri, say hello to apps.

00:16:23.856 --> 00:16:25.776 A:middle
&gt;&gt; I'm swiftly becoming
friends with them.

00:16:27.486 --> 00:16:29.556 A:middle
&gt;&gt; And on that note,
here is Chris Lattner

00:16:29.556 --> 00:16:30.606 A:middle
to talk about Swift.

00:16:31.516 --> 00:16:40.076 A:middle
[ Applause ]

00:16:40.576 --> 00:16:40.976 A:middle
&gt;&gt; All right.

00:16:41.056 --> 00:16:42.116 A:middle
Thanks, Robby.

00:16:42.906 --> 00:16:44.386 A:middle
Let's dive in to
what's new with Swift?

00:16:45.026 --> 00:16:47.026 A:middle
Now, it's easy to forget
that we launched Swift

00:16:47.546 --> 00:16:49.836 A:middle
and released it less
than two years ago,

00:16:49.836 --> 00:16:53.296 A:middle
and in that short time,
you've built and submitted

00:16:53.296 --> 00:16:56.066 A:middle
to the App Store
over 100,000 apps,

00:16:56.876 --> 00:16:58.746 A:middle
including well-known
titles like these.

00:16:59.696 --> 00:17:01.696 A:middle
Now, Swift has also
been very popular


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.696 --> 00:17:01.696 A:middle
Now, Swift has also
been very popular

00:17:01.696 --> 00:17:02.636 A:middle
with the enterprise as well.

00:17:02.636 --> 00:17:05.746 A:middle
Just as a simple example,
IBM's already built

00:17:06.096 --> 00:17:08.586 A:middle
and deployed hundreds of
apps written in Swift.

00:17:10.156 --> 00:17:10.425 A:middle
Now--

00:17:11.516 --> 00:17:14.646 A:middle
[ Applause ]

00:17:15.146 --> 00:17:16.715 A:middle
Now, there's lots of reasons
that people love Swift,

00:17:16.715 --> 00:17:19.066 A:middle
one of which is that
we open sourced it less

00:17:19.066 --> 00:17:20.546 A:middle
than six months ago.

00:17:21.516 --> 00:17:28.546 A:middle
[ Applause ]

00:17:29.046 --> 00:17:31.506 A:middle
And in that time, it's become
the number one most downloaded

00:17:31.506 --> 00:17:35.026 A:middle
language project on GitHub,
the number one most watched,

00:17:35.326 --> 00:17:37.046 A:middle
and the number one
most favorited,

00:17:37.426 --> 00:17:38.866 A:middle
and it's stayed on top.

00:17:39.326 --> 00:17:43.126 A:middle
I think to me, even better than
this is that we've had a ton

00:17:43.126 --> 00:17:45.126 A:middle
of new people get
involved with the project.

00:17:45.586 --> 00:17:48.386 A:middle
We now have hundreds of new
contributors contributing

00:17:48.386 --> 00:17:50.846 A:middle
through open source, and
we've processed thousands

00:17:50.846 --> 00:17:51.856 A:middle
of poll requests.

00:17:51.956 --> 00:17:53.516 A:middle
The response has
just been phenomenal.

00:17:54.966 --> 00:17:56.046 A:middle
Now, one of the reasons

00:17:56.046 --> 00:17:58.696 A:middle
that Swift being open is really
important to us is that we want

00:17:58.696 --> 00:17:59.826 A:middle
to see it go everywhere.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:00.656 --> 00:18:03.646 A:middle
For example, we think that
Swift is awesome for the server,

00:18:03.946 --> 00:18:05.726 A:middle
and so we ported it to Linux.

00:18:05.726 --> 00:18:07.876 A:middle
And the community agrees.

00:18:08.726 --> 00:18:11.126 A:middle
In a very short period of time,
they've started bringing it

00:18:11.126 --> 00:18:14.186 A:middle
to other popular
platforms like FreeBSD,

00:18:14.186 --> 00:18:15.906 A:middle
Android, and even Windows.

00:18:17.516 --> 00:18:23.566 A:middle
[ Applause ]

00:18:24.066 --> 00:18:26.096 A:middle
Now, to help Swift get to
all of these platforms,

00:18:26.406 --> 00:18:28.186 A:middle
we started the Swift
Package Manager.

00:18:28.906 --> 00:18:31.656 A:middle
The Package Manager's a
great way to build, share,

00:18:31.656 --> 00:18:33.816 A:middle
and reuse cross-platform
packages.

00:18:34.886 --> 00:18:36.606 A:middle
It can generate an
Xcode project file

00:18:36.786 --> 00:18:39.566 A:middle
and even compile
projects natively

00:18:39.566 --> 00:18:40.896 A:middle
on platforms like Linux.

00:18:42.126 --> 00:18:44.016 A:middle
Another great thing about Swift
Open Source is you can get

00:18:44.016 --> 00:18:45.766 A:middle
involved with the design
of the language itself.

00:18:46.686 --> 00:18:49.076 A:middle
Swift-evolution has been
an amazing experience

00:18:49.536 --> 00:18:53.106 A:middle
with intense interest in
a completely insane number

00:18:53.106 --> 00:18:54.526 A:middle
of emails on mailing lists.

00:18:54.616 --> 00:18:55.306 A:middle
It's ridiculous.

00:18:56.936 --> 00:18:59.146 A:middle
Now, we published an open
roadmap with the goals

00:18:59.146 --> 00:19:02.196 A:middle
for each release,
and we solicit ideas


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.146 --> 00:19:02.196 A:middle
for each release,
and we solicit ideas

00:19:02.196 --> 00:19:04.696 A:middle
and discuss different
directions we could go

00:19:04.696 --> 00:19:06.686 A:middle
to push the language
forward together.

00:19:07.656 --> 00:19:10.726 A:middle
We then debate these
together openly as a community

00:19:10.966 --> 00:19:12.886 A:middle
and we turn them into
formal proposals.

00:19:13.566 --> 00:19:17.266 A:middle
So far, we've had over 100
proposals to move Swift forward.

00:19:18.336 --> 00:19:22.546 A:middle
This is only in six months, and
this is just an amazing sign

00:19:22.546 --> 00:19:23.726 A:middle
of how fast Swift moves.

00:19:23.726 --> 00:19:27.316 A:middle
But it also shows another
important and interesting point.

00:19:27.536 --> 00:19:30.616 A:middle
Despite its wide use, Swift
is still a relatively new

00:19:30.616 --> 00:19:31.426 A:middle
programming language.

00:19:32.276 --> 00:19:34.666 A:middle
Now, as you've seen
I think, we've chosen

00:19:34.666 --> 00:19:39.946 A:middle
to quickly identify issues in
the Swift language and fix them

00:19:39.946 --> 00:19:42.486 A:middle
because we don't want to be
stuck with issues forever.

00:19:43.606 --> 00:19:46.886 A:middle
We are building Swift as the
next great programming language,

00:19:47.356 --> 00:19:50.226 A:middle
and so we want it to be great
for the decades to come.

00:19:51.066 --> 00:19:52.976 A:middle
And now the problem with this
is that for some developers,

00:19:52.976 --> 00:19:54.396 A:middle
the programming language
changing

00:19:54.396 --> 00:19:58.946 A:middle
out from underneath you can be
concerning, and as Swift goes

00:19:58.946 --> 00:20:02.386 A:middle
to new platforms and new kinds
of users with Swift Playgrounds,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.946 --> 00:20:02.386 A:middle
to new platforms and new kinds
of users with Swift Playgrounds,

00:20:02.756 --> 00:20:04.626 A:middle
this becomes an even
bigger concern.

00:20:06.046 --> 00:20:07.046 A:middle
So with that as context,

00:20:07.396 --> 00:20:10.636 A:middle
let's dive into what's
new with Swift 3.

00:20:10.926 --> 00:20:14.696 A:middle
Swift 3. We announced
it in December as part

00:20:14.696 --> 00:20:17.006 A:middle
of the open source
launch of Swift,

00:20:17.006 --> 00:20:19.256 A:middle
and we've been developing
it completely in the open.

00:20:20.116 --> 00:20:23.506 A:middle
The number one feature and the
number one goal of Swift 3 is

00:20:23.506 --> 00:20:27.396 A:middle
to get these early growing
pains over with and turn Swift

00:20:27.396 --> 00:20:31.006 A:middle
into a stable and mature base
that we can keep compatible

00:20:31.036 --> 00:20:32.356 A:middle
with future versions
of the language.

00:20:34.236 --> 00:20:34.456 A:middle
No?

00:20:35.516 --> 00:20:41.616 A:middle
[ Applause ]

00:20:42.116 --> 00:20:44.146 A:middle
So because of that, we're
focusing on the core essentials

00:20:44.176 --> 00:20:46.496 A:middle
of the language and
making the tools

00:20:46.496 --> 00:20:48.056 A:middle
and the development
experience really great.

00:20:48.426 --> 00:20:49.816 A:middle
And there are a ton
of different ways

00:20:49.816 --> 00:20:51.016 A:middle
that you can see this in Swift.

00:20:51.936 --> 00:20:54.946 A:middle
To give you a simple
example, one common complaint

00:20:54.946 --> 00:20:58.036 A:middle
about Swift 2 is that
the feel of some APIs

00:20:58.036 --> 00:21:00.036 A:middle
in Cocoa didn't feel
natural in Swift.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.036 --> 00:21:00.036 A:middle
in Cocoa didn't feel
natural in Swift.

00:21:00.446 --> 00:21:03.866 A:middle
Swift loves clarity and it aims
to define away boilerplate.

00:21:04.736 --> 00:21:07.836 A:middle
On Swift 3, Cocoa APIs
have an elegant feel.

00:21:08.146 --> 00:21:09.906 A:middle
You could say they're
totally Swifty.

00:21:11.296 --> 00:21:13.986 A:middle
Now, we did this with a number
of different initiatives.

00:21:14.606 --> 00:21:17.146 A:middle
First, we sat down
and thought hard

00:21:17.146 --> 00:21:21.146 A:middle
about what really makes a great
Swift API, and we wrote it

00:21:21.146 --> 00:21:24.086 A:middle
down in a document that's
now available on Swift.org.

00:21:25.336 --> 00:21:28.266 A:middle
We then took that and took
those rules and built them right

00:21:28.266 --> 00:21:31.436 A:middle
into the Swift recompiler, so
it automatically applies them

00:21:31.556 --> 00:21:35.146 A:middle
to Objective-C APIs as it
imports them into Swift.

00:21:36.366 --> 00:21:38.586 A:middle
But Swift goes far
beyond just naming.

00:21:38.586 --> 00:21:39.856 A:middle
Naming's a pretty
hard problem, though,

00:21:40.116 --> 00:21:41.446 A:middle
but it goes beyond just naming.

00:21:41.446 --> 00:21:44.746 A:middle
And if you look at
foundation as a simple example,

00:21:44.746 --> 00:21:47.586 A:middle
you'll find entirely new
Swift native data types.

00:21:48.816 --> 00:21:51.176 A:middle
Date is an example of this, and
if you compare Date to NSDate,

00:21:51.486 --> 00:21:54.156 A:middle
you'll find that it provides
proper value semantics,

00:21:54.156 --> 00:21:56.786 A:middle
it's about twice as
fast to pass around,

00:21:57.666 --> 00:22:00.006 A:middle
and it's about 40 times
faster to change due


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.666 --> 00:22:00.006 A:middle
and it's about 40 times
faster to change due

00:22:00.006 --> 00:22:01.576 A:middle
to reduced MalCon
[phonetic] free traffic.

00:22:02.516 --> 00:22:09.046 A:middle
[ Applause ]

00:22:09.546 --> 00:22:10.906 A:middle
Now, there are examples
everywhere,

00:22:10.906 --> 00:22:12.836 A:middle
and as Calendar becomes
Calendar,

00:22:12.836 --> 00:22:16.396 A:middle
Global Constants become
scoped enums, Date Components,

00:22:16.506 --> 00:22:18.316 A:middle
NSDate Components becomes
a proper value type,

00:22:18.316 --> 00:22:20.526 A:middle
and everything is
just feeling so Swift.

00:22:21.246 --> 00:22:26.246 A:middle
If you move beyond foundation,
Dispatch is another critical API

00:22:26.246 --> 00:22:27.736 A:middle
that we work with
all of the time,

00:22:28.566 --> 00:22:30.956 A:middle
but it provides this
low-level, C-style interface.

00:22:31.706 --> 00:22:34.406 A:middle
With Swift 3, Dispatch has
gotten a major overhaul,

00:22:34.406 --> 00:22:35.986 A:middle
has a beautiful object-oriented
API.

00:22:37.516 --> 00:22:44.546 A:middle
[ Applause ]

00:22:45.046 --> 00:22:47.456 A:middle
And it follows all the best
naming practices that you expect

00:22:47.536 --> 00:22:48.586 A:middle
from a great Swift API.

00:22:49.446 --> 00:22:51.286 A:middle
Core graphics is
another example of that.

00:22:51.726 --> 00:22:54.916 A:middle
Here's some typical core
graphics code, and in Swift 3,

00:22:54.916 --> 00:22:58.426 A:middle
it's elegant, beautiful, and
it works just like you expect.

00:22:59.516 --> 00:23:03.886 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.516 --> 00:23:03.886 A:middle
[ Applause ]

00:23:04.386 --> 00:23:06.666 A:middle
Now, Swift 3 has a
ton of great features

00:23:06.666 --> 00:23:08.246 A:middle
that you can learn
about all week long.

00:23:09.186 --> 00:23:11.296 A:middle
Swift 3 is available in Xcode 8,

00:23:11.626 --> 00:23:14.216 A:middle
and Xcode provides a
fantastic migration assistant

00:23:14.216 --> 00:23:17.666 A:middle
to help move your code from
Swift 2 to Swift 3 syntax.

00:23:18.716 --> 00:23:22.596 A:middle
Even better, Xcode 8
also includes Swift 2.3,

00:23:23.556 --> 00:23:25.836 A:middle
which means that you can
move to Swift 3 syntax

00:23:25.986 --> 00:23:27.386 A:middle
when the time is right for you.

00:23:28.516 --> 00:23:33.646 A:middle
[ Applause ]

00:23:34.146 --> 00:23:35.566 A:middle
So that's all I have
for you today.

00:23:35.926 --> 00:23:37.376 A:middle
Thank you, and I'll hand
it back to Andreas to talk

00:23:37.376 --> 00:23:39.386 A:middle
about the next big
thing, Swift on the iPad.

00:23:40.516 --> 00:23:44.556 A:middle
[ Applause ]

00:23:45.056 --> 00:23:45.526 A:middle
&gt;&gt; Thank you, Chris.

00:23:47.926 --> 00:23:50.596 A:middle
So another aspect of Swift
that excites us is that it's

00:23:50.596 --> 00:23:53.246 A:middle
so simple and so approachable
that it's not just great

00:23:53.246 --> 00:23:55.226 A:middle
for implementing apps
and server components.

00:23:55.556 --> 00:23:59.166 A:middle
It's also great as a first
program language to learn.

00:23:59.556 --> 00:24:01.306 A:middle
In fact, we think this
is super important,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.556 --> 00:24:01.306 A:middle
In fact, we think this
is super important,

00:24:01.306 --> 00:24:02.356 A:middle
and when we designed Swift,

00:24:02.516 --> 00:24:03.946 A:middle
that's also an explicit
goal we had.

00:24:05.146 --> 00:24:06.366 A:middle
And right from the
launch of Swift,

00:24:06.456 --> 00:24:09.486 A:middle
we introduced Xcode Playgrounds,
an interactive environment

00:24:09.486 --> 00:24:11.306 A:middle
where you can quickly
iterate on your code.

00:24:11.906 --> 00:24:12.636 A:middle
And while it's great

00:24:12.636 --> 00:24:15.176 A:middle
for experienced developers
using our Xcode IDE,

00:24:15.826 --> 00:24:17.936 A:middle
and I want to dramatically
expand our focus

00:24:17.936 --> 00:24:20.656 A:middle
and include kits for just
beginning to learn how to code.

00:24:21.116 --> 00:24:23.456 A:middle
So today we are announcing
Swift Playgrounds,

00:24:23.486 --> 00:24:24.656 A:middle
a new app for the iPad.

00:24:24.986 --> 00:24:26.986 A:middle
You've already seen a demo
this morning with the keynote.

00:24:27.846 --> 00:24:30.776 A:middle
It is paired with Xcode
technology, but it's made

00:24:30.776 --> 00:24:32.186 A:middle
from the ground up for learning

00:24:32.186 --> 00:24:33.786 A:middle
and teaching how
to program Swift.

00:24:34.316 --> 00:24:36.746 A:middle
It's both playful and engaging
for the younger audience,

00:24:37.296 --> 00:24:39.786 A:middle
and it's a fun way of
trying out new things

00:24:39.786 --> 00:24:41.126 A:middle
for experienced developers.

00:24:42.216 --> 00:24:45.606 A:middle
It is designed to work with the
touch interface of the iPad.

00:24:46.606 --> 00:24:48.566 A:middle
We created a new Smart Keyboard

00:24:48.566 --> 00:24:50.746 A:middle
that brings you quick type
suggestions for your code,

00:24:50.826 --> 00:24:52.666 A:middle
similar to code completion
in Xcode.

00:24:53.246 --> 00:24:55.546 A:middle
You often can write entire
lines of code without having

00:24:55.546 --> 00:24:56.846 A:middle
to bring up a full keyboard.

00:24:58.466 --> 00:25:01.076 A:middle
When you edit inline values
such as numbers and colors,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.466 --> 00:25:01.076 A:middle
When you edit inline values
such as numbers and colors,

00:25:01.076 --> 00:25:03.226 A:middle
we pop up these quick editing
controls that allow you

00:25:03.226 --> 00:25:05.726 A:middle
to easily select a value,
again, without having

00:25:05.726 --> 00:25:06.896 A:middle
to bring up a full keyboard.

00:25:08.646 --> 00:25:10.916 A:middle
You can quickly change the
code in your Playground simply

00:25:10.916 --> 00:25:12.796 A:middle
by dragging the structural
elements

00:25:12.796 --> 00:25:13.946 A:middle
on the screen with your finger.

00:25:15.416 --> 00:25:17.096 A:middle
And as you would
expect, there's a library

00:25:17.096 --> 00:25:19.886 A:middle
of prebuilt code snippets you
can insert into your code simply

00:25:19.886 --> 00:25:22.366 A:middle
with a tap or again by
dragging them with your finger.

00:25:23.886 --> 00:25:26.016 A:middle
And for the times where you
do bring up a full keyboard

00:25:26.016 --> 00:25:27.326 A:middle
to write some code,
we present you

00:25:27.326 --> 00:25:28.896 A:middle
with a dedicated
coding keyboard,

00:25:29.246 --> 00:25:30.406 A:middle
which makes it super easy

00:25:30.406 --> 00:25:32.916 A:middle
to access the many special
characters and numbers

00:25:32.916 --> 00:25:34.416 A:middle
that you need for
writing Swift code.

00:25:34.806 --> 00:25:37.086 A:middle
Just with a swipe of a finger.

00:25:37.616 --> 00:25:39.386 A:middle
No need to switch
keyboard planes.

00:25:41.366 --> 00:25:44.036 A:middle
The app also ships the
fantastic lesson content.

00:25:45.226 --> 00:25:47.236 A:middle
We're building an
entire series of lessons

00:25:47.236 --> 00:25:49.776 A:middle
that will introduce you to
programming Swift step by step

00:25:49.946 --> 00:25:52.046 A:middle
and we're planning to
rapidly expand this content

00:25:52.046 --> 00:25:55.006 A:middle
over the course of the
next year, but you can go

00:25:55.006 --> 00:25:57.396 A:middle
in to provide learners
with a steam of challenges

00:25:57.396 --> 00:25:58.976 A:middle
that they're going
to update frequently.

00:25:58.976 --> 00:26:01.476 A:middle
So they keep coming back
to the app and stay engaged


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.976 --> 00:26:01.476 A:middle
So they keep coming back
to the app and stay engaged

00:26:01.476 --> 00:26:04.546 A:middle
with the learning process for
the number of deep dive topics.

00:26:05.976 --> 00:26:06.986 A:middle
But you're not limited

00:26:07.416 --> 00:26:09.466 A:middle
to following this
guided lesson content.

00:26:09.786 --> 00:26:12.636 A:middle
You also have the power and the
flexibility to explore coding

00:26:12.636 --> 00:26:15.976 A:middle
on your own with a set
of simple templates.

00:26:16.176 --> 00:26:18.876 A:middle
We created one that makes it
easy to put together a program

00:26:18.876 --> 00:26:22.196 A:middle
with just text input and output
and another one that allows you

00:26:22.196 --> 00:26:24.776 A:middle
to explore and visualize
graphics concepts based

00:26:24.776 --> 00:26:25.396 A:middle
on shapes.

00:26:26.836 --> 00:26:29.296 A:middle
And beyond that, since you
have the entire iOS SDK

00:26:29.296 --> 00:26:31.186 A:middle
at your fingertips, you're free

00:26:31.186 --> 00:26:32.986 A:middle
to create pretty much
any Playground you'd like

00:26:33.056 --> 00:26:34.846 A:middle
and use the app to
teach many topics.

00:26:34.846 --> 00:26:38.326 A:middle
You can even control robots
like this one here on the screen

00:26:38.326 --> 00:26:40.146 A:middle
and other accessories
from your Playground,

00:26:40.726 --> 00:26:42.016 A:middle
so it ends up being
a lot of fun.

00:26:42.256 --> 00:26:43.486 A:middle
And to just show you
a little bit more

00:26:43.486 --> 00:26:46.026 A:middle
about how you can leverage the
app, I'm going to ask Ken Orr

00:26:46.026 --> 00:26:46.956 A:middle
to give us another demo.

00:26:48.516 --> 00:26:54.216 A:middle
[ Applause ]

00:26:54.716 --> 00:26:55.966 A:middle
&gt;&gt; Right. Thanks, Andreas.

00:26:57.186 --> 00:27:01.336 A:middle
Swift Playgrounds makes it easy
to get creative through code,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.186 --> 00:27:01.336 A:middle
Swift Playgrounds makes it easy
to get creative through code,

00:27:01.336 --> 00:27:03.206 A:middle
so let's take a look
at a Playground

00:27:03.206 --> 00:27:05.896 A:middle
that I created earlier and
I'll show you just what I mean.

00:27:06.626 --> 00:27:11.236 A:middle
Now, I started here with
the Shapes template,

00:27:11.536 --> 00:27:14.036 A:middle
and you can see the
beginnings of my picture

00:27:14.036 --> 00:27:14.946 A:middle
over there on the right.

00:27:15.636 --> 00:27:17.836 A:middle
So just some squares
of different sizes

00:27:17.836 --> 00:27:19.876 A:middle
and colors rotated
around the center.

00:27:20.796 --> 00:27:24.236 A:middle
Now, everything over on
the right is a product

00:27:24.236 --> 00:27:25.886 A:middle
of my code on the left.

00:27:25.886 --> 00:27:30.576 A:middle
At the heart of my code
over here is this for loop.

00:27:31.056 --> 00:27:33.496 A:middle
That's where I create
each one of those squares.

00:27:34.306 --> 00:27:36.936 A:middle
And then up at the very
top, I've got a variable

00:27:36.936 --> 00:27:39.906 A:middle
that defines how many
squares I should create.

00:27:40.426 --> 00:27:44.266 A:middle
Well, right now, that's set to
15, but I'd really like to get

00:27:44.266 --> 00:27:47.426 A:middle
that entire right-hand side
to be filled up with color,

00:27:47.846 --> 00:27:50.736 A:middle
so to do that, let me just
try bumping this up to 80,

00:27:51.736 --> 00:27:52.756 A:middle
and then I'll tap Run.

00:27:54.116 --> 00:27:59.576 A:middle
Nice. And I think maybe instead
of maroon, I'll use a nice blue.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:01.316 --> 00:28:02.236 A:middle
That looks good.

00:28:02.696 --> 00:28:05.456 A:middle
And I really like the pattern
that I've got going on here

00:28:05.456 --> 00:28:07.286 A:middle
where the squares,
they're kind of spiraling

00:28:07.286 --> 00:28:08.746 A:middle
down into the center
of the Canvas.

00:28:09.096 --> 00:28:10.336 A:middle
That looks really cool.

00:28:10.726 --> 00:28:12.896 A:middle
I bet I could make
that even more obvious

00:28:13.156 --> 00:28:16.526 A:middle
if I change the size of those
squares more dramatically

00:28:16.526 --> 00:28:17.176 A:middle
over time.

00:28:17.786 --> 00:28:22.286 A:middle
So back down in the for loop
here where I calculate the size,

00:28:22.756 --> 00:28:24.216 A:middle
I'm going to tap on the plus

00:28:24.316 --> 00:28:26.066 A:middle
between these two
different expressions.

00:28:27.206 --> 00:28:28.756 A:middle
Rather than just
adding them together,

00:28:29.276 --> 00:28:30.536 A:middle
why don't I try multiplication?

00:28:31.796 --> 00:28:34.356 A:middle
Run that. That looks good.

00:28:35.166 --> 00:28:38.426 A:middle
So you can start to get an
idea of just how easy it is

00:28:38.426 --> 00:28:42.486 A:middle
to explore and experiment
with code using just a touch.

00:28:44.006 --> 00:28:46.296 A:middle
So next, I'd like to
bring a little bit

00:28:46.296 --> 00:28:47.746 A:middle
of life to my picture.

00:28:48.296 --> 00:28:51.086 A:middle
I'll use some animation
for that.

00:28:51.296 --> 00:28:54.006 A:middle
Now, to do that, I'm going
to use some API that's built

00:28:54.006 --> 00:28:55.406 A:middle
in to the Shapes template,

00:28:56.606 --> 00:29:02.156 A:middle
and I think what I want is I
want the squares to pop and spin


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:56.606 --> 00:29:02.156 A:middle
and I think what I want is I
want the squares to pop and spin

00:29:02.156 --> 00:29:03.826 A:middle
in from the center
of the stream.

00:29:04.886 --> 00:29:08.436 A:middle
So I'm going to tap right here
after I create each square,

00:29:08.876 --> 00:29:11.716 A:middle
and then down in the shortcuts
bar, I'm going to scroll over

00:29:11.716 --> 00:29:13.736 A:middle
and I'm going to tap on
the Animate function.

00:29:14.976 --> 00:29:18.316 A:middle
So I'll have an animation
that's maybe three seconds long

00:29:18.316 --> 00:29:22.776 A:middle
and I'll have it wait for just
one second before it starts,

00:29:23.356 --> 00:29:26.476 A:middle
and then everything that I put
inside of that block there.

00:29:26.476 --> 00:29:30.296 A:middle
It's going to be automatically
animated for me, so I'm going

00:29:30.296 --> 00:29:32.306 A:middle
to pull in the rotation
like that.

00:29:32.566 --> 00:29:36.446 A:middle
And then I also want the size
of the square to animate,

00:29:36.756 --> 00:29:40.776 A:middle
so I think I'll start it out
at zero width and zero height,

00:29:41.566 --> 00:29:43.646 A:middle
and then back in
the Animate block,

00:29:43.826 --> 00:29:45.236 A:middle
I'll set it to what
it was before.

00:29:46.806 --> 00:29:51.816 A:middle
So I'll say square.size
equals size,

00:29:52.496 --> 00:29:55.526 A:middle
and then I already calculated
the size above, so I'll just use

00:29:55.526 --> 00:29:58.906 A:middle
that same variable,
and I'll tap Run.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:01.496 --> 00:30:01.856 A:middle
Very cool.

00:30:01.856 --> 00:30:03.986 A:middle
So it's starting
to come to life.

00:30:04.876 --> 00:30:06.016 A:middle
Thank you.

00:30:07.516 --> 00:30:10.586 A:middle
[ Applause ]

00:30:11.086 --> 00:30:13.106 A:middle
And there's one more thing
that I'd like to do here.

00:30:13.646 --> 00:30:16.366 A:middle
I'd like to add a little
bit of touch handling.

00:30:16.876 --> 00:30:19.386 A:middle
And to do that, I'm going to
use some more API that's built

00:30:19.386 --> 00:30:20.606 A:middle
into the Shapes template.

00:30:21.466 --> 00:30:22.816 A:middle
And down here at the bottom,

00:30:22.816 --> 00:30:26.996 A:middle
I've actually already added
a drag handler to the Canvas.

00:30:27.476 --> 00:30:30.186 A:middle
The block's waiting
for me to fill it in,

00:30:30.186 --> 00:30:31.836 A:middle
and I've also written
a function here

00:30:32.176 --> 00:30:35.146 A:middle
that will rotate each square
around the center of the Canvas.

00:30:35.496 --> 00:30:38.596 A:middle
So I just need to call that
function in this block here.

00:30:39.276 --> 00:30:40.636 A:middle
So back in the shortcuts bar,

00:30:40.636 --> 00:30:44.736 A:middle
I'm going to say
squares.rotateforTouches

00:30:44.736 --> 00:30:46.796 A:middle
and then I'll tap Run.

00:30:48.556 --> 00:30:50.746 A:middle
And now I'm going to
tap my finger and hold

00:30:50.746 --> 00:30:54.176 A:middle
in the top right, and
I'm going to pull down,

00:30:54.846 --> 00:30:58.756 A:middle
and just like that, I've
added Touch Handling.

00:30:59.376 --> 00:30:59.726 A:middle
Thank you.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.516 --> 00:31:03.686 A:middle
[ Applause ]

00:31:04.186 --> 00:31:07.316 A:middle
By the way, you may have
noticed that so far,

00:31:07.316 --> 00:31:10.856 A:middle
I haven't actually needed the
full keyboard for any of this,

00:31:11.086 --> 00:31:12.286 A:middle
and I think that's pretty cool.

00:31:13.696 --> 00:31:17.076 A:middle
There's one more thing that I'd
like to show you this afternoon.

00:31:17.636 --> 00:31:18.456 A:middle
So I'm a UI guy.

00:31:18.626 --> 00:31:21.646 A:middle
I love building custom
controls and playful UI,

00:31:21.646 --> 00:31:23.796 A:middle
and I've been tinkering

00:31:23.796 --> 00:31:26.296 A:middle
around with this custom
color picker here.

00:31:26.546 --> 00:31:27.516 A:middle
I'd love to show you that.

00:31:28.986 --> 00:31:32.966 A:middle
So when you tap on the color
swatch, the Color Chooser pops

00:31:32.966 --> 00:31:35.436 A:middle
out from underneath your
finger and you can drag around

00:31:35.756 --> 00:31:36.996 A:middle
and pick the color you want.

00:31:37.896 --> 00:31:41.536 A:middle
Now, all the code to build
that is over on the left.

00:31:42.546 --> 00:31:45.276 A:middle
So let me make the code bigger
so we can take a quick look.

00:31:46.066 --> 00:31:48.266 A:middle
Now, the first thing you'll
notice, up at the very top,

00:31:49.066 --> 00:31:54.106 A:middle
I'm importing UIKit, so I
have access to the iOS SDK

00:31:54.106 --> 00:31:58.106 A:middle
in this Playground and in
any Playground that I create.

00:31:59.276 --> 00:32:01.286 A:middle
And then all the way
down at the bottom here,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.276 --> 00:32:01.286 A:middle
And then all the way
down at the bottom here,

00:32:02.036 --> 00:32:05.286 A:middle
this is where I tell Swift
Playgrounds to take my view

00:32:05.286 --> 00:32:07.636 A:middle
and show it over on
the right-hand side.

00:32:09.846 --> 00:32:11.946 A:middle
There's one last thing
that I'd like to add

00:32:12.006 --> 00:32:15.206 A:middle
to my Playground here, and
that's I want to add something

00:32:15.206 --> 00:32:16.936 A:middle
that I can set the color of so

00:32:16.936 --> 00:32:18.876 A:middle
that I can try out
my Color Chooser.

00:32:19.896 --> 00:32:22.886 A:middle
So I think to do that, I'll
just add a simple UI Image View,

00:32:23.256 --> 00:32:26.656 A:middle
so let me bring up the coding
keyboard, and I'm going to say,

00:32:27.086 --> 00:32:34.936 A:middle
"Let image view equal
UI Image View."

00:32:34.936 --> 00:32:38.166 A:middle
And I'm going to use the
initializer that takes an image,

00:32:38.486 --> 00:32:40.686 A:middle
and then I'm going to
tap on the third item

00:32:40.686 --> 00:32:42.546 A:middle
in the shortcut bar,
that little picture.

00:32:43.306 --> 00:32:44.576 A:middle
That's an image literal.

00:32:44.816 --> 00:32:47.866 A:middle
So when I tap on it in my
source code, I can choose

00:32:48.296 --> 00:32:50.636 A:middle
from resources that have been
added to this Playground.

00:32:51.516 --> 00:32:55.906 A:middle
[ Applause ]

00:32:56.406 --> 00:32:58.046 A:middle
So I added the Swift
bird earlier,

00:32:58.086 --> 00:32:59.326 A:middle
so I'm going to choose that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:01.256 --> 00:33:04.656 A:middle
And then last thing I need to
do here, I need to get you,

00:33:04.656 --> 00:33:07.356 A:middle
the UI Image View into
the view hierarchy,

00:33:07.856 --> 00:33:16.176 A:middle
so I'll just say
viewController.view.addSubview,

00:33:17.046 --> 00:33:18.816 A:middle
toss in the image view.

00:33:19.196 --> 00:33:22.466 A:middle
We'll run that, then I'm going
to make the view full screen.

00:33:23.226 --> 00:33:25.386 A:middle
And know we can see
I've got my image,

00:33:26.366 --> 00:33:28.976 A:middle
I've got our color picker,
and I actually snuck

00:33:29.086 --> 00:33:30.766 A:middle
in one little other
feature here.

00:33:30.956 --> 00:33:33.156 A:middle
I want it to be a little
bit more fun, set the color

00:33:33.156 --> 00:33:36.926 A:middle
of the bird, figured hey,
why not do it that way?

00:33:37.516 --> 00:33:42.756 A:middle
[ Applause ]

00:33:43.256 --> 00:33:44.776 A:middle
And that's Swift Playgrounds.

00:33:45.076 --> 00:33:45.346 A:middle
Thank you.

00:33:45.826 --> 00:33:46.326 A:middle
Andreas?

00:33:47.516 --> 00:33:51.726 A:middle
[ Applause ]

00:33:52.226 --> 00:33:53.886 A:middle
&gt;&gt; Thank you, Ken.

00:33:57.626 --> 00:34:01.076 A:middle
So as you saw, no matter what
kind of Playground you create,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:57.626 --> 00:34:01.076 A:middle
So as you saw, no matter what
kind of Playground you create,

00:34:01.846 --> 00:34:05.866 A:middle
you always do so by
leveraging the actual iOS SDK,

00:34:05.986 --> 00:34:09.136 A:middle
including the APIs that give you
access to the device's hardware.

00:34:09.576 --> 00:34:11.196 A:middle
And by writing real Swift code,

00:34:11.396 --> 00:34:13.166 A:middle
this is perhaps the
biggest differentiator

00:34:13.426 --> 00:34:15.896 A:middle
to other learning apps that
often use a limited approach

00:34:15.896 --> 00:34:17.326 A:middle
that users quickly outgrow.

00:34:17.686 --> 00:34:19.646 A:middle
In Swift Playgrounds,
you'll always learn how

00:34:19.646 --> 00:34:20.815 A:middle
to write real Swift code.

00:34:21.596 --> 00:34:22.696 A:middle
And by the way, as a side note,

00:34:22.696 --> 00:34:25.176 A:middle
the entire Playgrounds app
itself is also written in Swift.

00:34:27.516 --> 00:34:32.016 A:middle
[ Applause ]

00:34:32.516 --> 00:34:34.996 A:middle
So Swift Playgrounds offers
you many ways to experiment

00:34:35.116 --> 00:34:38.806 A:middle
and to teach and to learn how to
code, and we are very passionate

00:34:38.876 --> 00:34:41.485 A:middle
about letting as many users
as possible, especially kids,

00:34:41.966 --> 00:34:43.835 A:middle
take advantage of
this new opportunity.

00:34:43.906 --> 00:34:47.206 A:middle
And in fact, we hope that you
will help us create an entire

00:34:47.335 --> 00:34:50.106 A:middle
platform for learning by
creating additional content.

00:34:50.545 --> 00:34:53.505 A:middle
And to get you started, we're
going to make documentation

00:34:53.505 --> 00:34:56.406 A:middle
on our Playground's file format
available on our website today.

00:34:57.065 --> 00:34:58.646 A:middle
And later this year,
we are planning

00:34:58.646 --> 00:35:00.296 A:middle
to publish our lesson materials,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:58.646 --> 00:35:00.296 A:middle
to publish our lesson materials,

00:35:00.296 --> 00:35:03.416 A:middle
including the rich 3D
Puzzle World under a license

00:35:03.416 --> 00:35:06.616 A:middle
that will let you copy
and reuse our materials.

00:35:06.616 --> 00:35:07.966 A:middle
Incorporate your own ideas,

00:35:07.966 --> 00:35:10.386 A:middle
and help us reach many
audiences around the world.

00:35:13.106 --> 00:35:14.896 A:middle
So once a user has
created a Playground,

00:35:15.276 --> 00:35:17.596 A:middle
there's numerous ways
for sharing the results.

00:35:18.146 --> 00:35:20.136 A:middle
Playgrounds are simply
documents so you can share them

00:35:20.136 --> 00:35:21.886 A:middle
in all the usual ways
that you're familiar with.

00:35:22.206 --> 00:35:23.266 A:middle
And we didn't stop there.

00:35:23.946 --> 00:35:25.416 A:middle
We made it easier
to take pictures

00:35:25.416 --> 00:35:28.466 A:middle
of your program's output and
even incorporated replay kits

00:35:28.466 --> 00:35:30.206 A:middle
so that you can record
a coding session

00:35:30.426 --> 00:35:32.056 A:middle
and publish your
work as a video.

00:35:33.456 --> 00:35:33.846 A:middle
And for--

00:35:34.516 --> 00:35:40.066 A:middle
[ Applause ]

00:35:40.566 --> 00:35:42.966 A:middle
And for more advanced learners,
the Swift Playgrounds app

00:35:42.966 --> 00:35:46.326 A:middle
on the iPad and Xcode on the Mac
complement each other nicely.

00:35:46.876 --> 00:35:48.406 A:middle
You can move Playgrounds
back and forth

00:35:48.406 --> 00:35:50.746 A:middle
between the two environments
that eventually transition

00:35:50.746 --> 00:35:52.866 A:middle
into developing full
apps in the Xcode IDE.

00:35:54.246 --> 00:35:55.936 A:middle
And so that brings us
nicely to the next topic.

00:35:56.516 --> 00:35:59.576 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:00.076 --> 00:36:01.536 A:middle
To tell you more about
Xcode, I'm going to hand

00:36:01.536 --> 00:36:02.456 A:middle
over to Matthew Furlich
[assumed spelling].

00:36:03.516 --> 00:36:08.546 A:middle
[ Applause ]

00:36:09.046 --> 00:36:09.516 A:middle
&gt;&gt; Thank you, Andreas.

00:36:10.376 --> 00:36:13.386 A:middle
Xcode 8 is a big release
with much to talk about,

00:36:13.516 --> 00:36:15.816 A:middle
so let's just jump right
in and start talking

00:36:15.816 --> 00:36:16.726 A:middle
about our Source Editor.

00:36:17.406 --> 00:36:18.776 A:middle
For this release, we focused

00:36:18.776 --> 00:36:20.926 A:middle
on adding the most
highly requested features

00:36:21.356 --> 00:36:21.826 A:middle
from all of you.

00:36:23.386 --> 00:36:25.446 A:middle
We started by adding in
active line highlighting,

00:36:25.966 --> 00:36:28.206 A:middle
and you can edit this color.

00:36:28.206 --> 00:36:29.726 A:middle
It'd work beautifully
with any Editor theme.

00:36:30.516 --> 00:36:33.916 A:middle
[ Applause ]

00:36:34.416 --> 00:36:34.906 A:middle
It gets better [laughter].

00:36:37.066 --> 00:36:39.176 A:middle
We also did a support
for Swift color literals

00:36:39.176 --> 00:36:42.946 A:middle
so you can now view and define
colors right in your source.

00:36:43.516 --> 00:36:48.646 A:middle
[ Applause ]

00:36:49.146 --> 00:36:49.606 A:middle
Let's go for three.

00:36:49.606 --> 00:36:52.516 A:middle
We added in Swift image literals
too so you can now view images

00:36:52.516 --> 00:36:57.076 A:middle
in your source and as
results for code completion.

00:36:57.076 --> 00:37:02.046 A:middle
And to help you write better
documentation, the editor has,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:57.076 --> 00:37:02.046 A:middle
And to help you write better
documentation, the editor has,

00:37:02.176 --> 00:37:04.286 A:middle
now has a command
to generate mark-up

00:37:04.286 --> 00:37:05.376 A:middle
for documenting your APIs.

00:37:06.516 --> 00:37:11.706 A:middle
[ Applause ]

00:37:12.206 --> 00:37:13.566 A:middle
So these features and a number

00:37:13.566 --> 00:37:16.616 A:middle
of usability improvements really
make Xcode's editing experience

00:37:16.826 --> 00:37:19.486 A:middle
awesome, but we didn't
want to stop there,

00:37:19.826 --> 00:37:21.786 A:middle
so we've added one more
feature, and it turns

00:37:21.786 --> 00:37:23.686 A:middle
out to be your number
one request.

00:37:25.436 --> 00:37:26.976 A:middle
App extensions.

00:37:27.516 --> 00:37:33.706 A:middle
[ Applause ]

00:37:34.206 --> 00:37:36.116 A:middle
With Xcode 8, we are
opening up the IDE.

00:37:37.716 --> 00:37:38.886 A:middle
We're starting with
source editing.

00:37:39.656 --> 00:37:41.726 A:middle
This extension works
with the active editor

00:37:41.836 --> 00:37:44.276 A:middle
to enable transformations,
changes in selection,

00:37:44.486 --> 00:37:45.876 A:middle
and navigation within the file.

00:37:46.506 --> 00:37:49.596 A:middle
And this opens up worlds of
opportunities for commands

00:37:49.696 --> 00:37:51.736 A:middle
such as reformatting,
commenting,

00:37:51.976 --> 00:37:54.006 A:middle
localizations, even to-do items.

00:37:54.916 --> 00:37:57.536 A:middle
Now, you can implement many
actions in each extension,

00:37:58.056 --> 00:38:00.796 A:middle
and each action is listed
as part of the Editor menu.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.056 --> 00:38:00.796 A:middle
and each action is listed
as part of the Editor menu.

00:38:01.986 --> 00:38:05.346 A:middle
Users can set key buttons for
these actions too to enable them

00:38:05.346 --> 00:38:06.276 A:middle
as part of their workforce.

00:38:08.916 --> 00:38:10.876 A:middle
Now, as developers
of extensions--

00:38:11.516 --> 00:38:15.096 A:middle
[ Applause ]

00:38:15.596 --> 00:38:17.226 A:middle
As developers of
extensions, you can ship them

00:38:17.226 --> 00:38:19.576 A:middle
through the App Store or
deploy with Developer ID,

00:38:19.976 --> 00:38:21.916 A:middle
and these extensions
work in Xcode 8

00:38:21.916 --> 00:38:23.826 A:middle
on both Sierra and El Capitan.

00:38:25.516 --> 00:38:29.046 A:middle
[ Applause ]

00:38:29.546 --> 00:38:32.396 A:middle
Now, as a standard extension,
users can feel safe too.

00:38:33.086 --> 00:38:34.986 A:middle
These extensions are run
as a separate process

00:38:35.076 --> 00:38:36.936 A:middle
and have their signatures
verified.

00:38:37.636 --> 00:38:40.446 A:middle
And to further reinforce
safety, Xcode is now secured

00:38:40.446 --> 00:38:42.186 A:middle
by system integrity protection.

00:38:42.676 --> 00:38:44.266 A:middle
Which means only
trusted libraries

00:38:44.336 --> 00:38:47.706 A:middle
and extensions can interact
with the IDE and your code.

00:38:49.576 --> 00:38:52.726 A:middle
So the new source editing
extension is our first step

00:38:52.896 --> 00:38:55.526 A:middle
towards making Xcode an
even more extensible IDE.

00:38:56.346 --> 00:38:57.936 A:middle
We'd love to hear
your feedback on it

00:38:58.016 --> 00:39:01.296 A:middle
and other extensions
you'd like to see.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:58.016 --> 00:39:01.296 A:middle
and other extensions
you'd like to see.

00:39:01.426 --> 00:39:03.036 A:middle
Now, we've also been
working on some improvements

00:39:03.036 --> 00:39:05.396 A:middle
to that way you learn
about code, and for that,

00:39:05.396 --> 00:39:07.946 A:middle
we have a brand new API
reference experience.

00:39:10.206 --> 00:39:12.316 A:middle
We've merged together
the API documentation

00:39:12.316 --> 00:39:15.806 A:middle
for our four platforms into
a single, unified reference.

00:39:16.996 --> 00:39:19.616 A:middle
Now, this reference
makes navigation easy,

00:39:19.986 --> 00:39:21.536 A:middle
working through frameworks
and symbols.

00:39:22.766 --> 00:39:25.266 A:middle
Now, searching the unified
reference means you see a single

00:39:25.266 --> 00:39:28.616 A:middle
result for each API and we've
integrated the same fuzzy

00:39:28.616 --> 00:39:31.276 A:middle
matching we use for code
completion and open quickly.

00:39:32.996 --> 00:39:33.876 A:middle
When browsing the reference,

00:39:34.136 --> 00:39:37.316 A:middle
the platform availabilities are
clearly listed for each API.

00:39:38.636 --> 00:39:40.696 A:middle
And in previous releases,
we ship this

00:39:40.696 --> 00:39:42.906 A:middle
as a separate download
because of its size.

00:39:43.666 --> 00:39:45.236 A:middle
With this release, we've
been able to shrink it

00:39:45.236 --> 00:39:47.526 A:middle
to almost one-tenth to
what it was previously,

00:39:47.796 --> 00:39:49.146 A:middle
so now we've included
it by default,

00:39:49.146 --> 00:39:51.066 A:middle
so you'll always have
the information you need.

00:39:52.516 --> 00:39:58.136 A:middle
[ Applause ]

00:39:58.636 --> 00:40:00.496 A:middle
Now, we also have some
great, new improvements


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:58.636 --> 00:40:00.496 A:middle
Now, we also have some
great, new improvements

00:40:00.556 --> 00:40:01.986 A:middle
to Interface Builder, and I'd

00:40:01.986 --> 00:40:03.416 A:middle
like to show them
to you in a demo.

00:40:11.056 --> 00:40:12.826 A:middle
So here we have a project.

00:40:12.826 --> 00:40:14.336 A:middle
We're calling this Trailblazer.

00:40:14.586 --> 00:40:15.956 A:middle
It's a social application

00:40:15.956 --> 00:40:17.506 A:middle
for sharing your
favorite hiking trails.

00:40:18.806 --> 00:40:22.076 A:middle
Now, in addition to the way
that your interface is laid out,

00:40:22.266 --> 00:40:24.536 A:middle
you'll now notice that Interface
Builder is showing you the way

00:40:24.536 --> 00:40:26.286 A:middle
it's going to render
on a device.

00:40:27.036 --> 00:40:29.876 A:middle
Interface Builder now shows you
visual effects like vibrancy,

00:40:29.876 --> 00:40:32.206 A:middle
blurs, and shadows
right on the Canvas,

00:40:32.726 --> 00:40:37.036 A:middle
making a seamless experience for
designing and running your app.

00:40:37.276 --> 00:40:39.156 A:middle
You'll also notice that we're
displaying the interface

00:40:39.156 --> 00:40:40.516 A:middle
in the dimensions of a device,

00:40:41.196 --> 00:40:43.316 A:middle
and there's a new configuration
bar along the bottom

00:40:43.506 --> 00:40:44.656 A:middle
with common device sizes.

00:40:45.856 --> 00:40:48.486 A:middle
Here we're looking at
it in an iPhone 6s Plus.

00:40:48.486 --> 00:40:52.326 A:middle
I can select one of the other
items, like let me click on one

00:40:52.326 --> 00:40:54.876 A:middle
of the iPads, and I can see
how my interface will be

00:40:54.876 --> 00:40:55.886 A:middle
displayed there.

00:40:56.516 --> 00:41:02.846 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:56.516 --> 00:41:02.846 A:middle
[ Applause ]

00:41:03.346 --> 00:41:05.826 A:middle
Here you see we've designed
an adaptive layout using two

00:41:05.826 --> 00:41:06.886 A:middle
columns on iPad.

00:41:08.496 --> 00:41:11.376 A:middle
To view it in other ways, I can
change the orientation if I want

00:41:11.376 --> 00:41:12.346 A:middle
to view it in landscape.

00:41:12.756 --> 00:41:14.866 A:middle
I can also view it in
one of the adaptations.

00:41:15.166 --> 00:41:18.026 A:middle
For example, let's look at it
in one-third size, which is used

00:41:18.026 --> 00:41:20.126 A:middle
for slide over as
for multitasking.

00:41:21.226 --> 00:41:22.796 A:middle
This is great because
it really allows me

00:41:22.796 --> 00:41:24.976 A:middle
to ensure I've implemented
the right interface

00:41:25.236 --> 00:41:29.166 A:middle
for all the ways users
will experience my app.

00:41:29.356 --> 00:41:30.896 A:middle
Now, we've also improved
the experience

00:41:30.896 --> 00:41:33.686 A:middle
for creating adaptive
layouts using size classes.

00:41:33.686 --> 00:41:35.066 A:middle
Let me give you an example.

00:41:36.306 --> 00:41:39.256 A:middle
The designers of this app wanted
to put an image, a button on top

00:41:39.256 --> 00:41:42.056 A:middle
of the image to show the hiking
trails overlaid on a map.

00:41:42.826 --> 00:41:44.816 A:middle
But because of the size
of the map, they only want

00:41:44.816 --> 00:41:45.986 A:middle
to do it on wider displays.

00:41:47.016 --> 00:41:47.566 A:middle
That's really easy.

00:41:47.566 --> 00:41:51.576 A:middle
In the configuration bar, I'll
click the Vary for Traits button

00:41:51.866 --> 00:41:53.856 A:middle
and I'm presented with the
two size class options,

00:41:54.156 --> 00:41:56.236 A:middle
Width and height.

00:41:56.236 --> 00:41:58.776 A:middle
iPhones and iPads differ
on the width size class,

00:41:59.096 --> 00:42:00.016 A:middle
so I'll check that option.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.096 --> 00:42:00.016 A:middle
so I'll check that option.

00:42:01.496 --> 00:42:03.666 A:middle
The configuration bar
turns blue to remind me

00:42:03.666 --> 00:42:06.576 A:middle
that I'm making customizations
for a specific size class.

00:42:07.576 --> 00:42:10.196 A:middle
But you'll also note the
list of devices have changed

00:42:10.396 --> 00:42:12.956 A:middle
to show me those devices
which will take advantage

00:42:13.156 --> 00:42:14.246 A:middle
of that customization.

00:42:15.046 --> 00:42:18.436 A:middle
Here I can see various iPads and
orientations and adaptations.

00:42:19.196 --> 00:42:22.736 A:middle
The last item, though, is the
iPhone 6s Plus in landscape.

00:42:23.596 --> 00:42:25.676 A:middle
That device and orientation
makes use

00:42:25.726 --> 00:42:28.986 A:middle
of the regular width size class,
and this is great information

00:42:28.986 --> 00:42:31.296 A:middle
because now I can ensure
I'm designing the interface

00:42:31.296 --> 00:42:32.366 A:middle
for the devices I intend.

00:42:33.676 --> 00:42:36.366 A:middle
I think our interface will look
great there, so let's go ahead

00:42:36.366 --> 00:42:37.316 A:middle
and make those changes.

00:42:37.316 --> 00:42:40.426 A:middle
I'll go into the library
and we'll grab a button out

00:42:40.856 --> 00:42:42.336 A:middle
and drag it into the interface.

00:42:43.406 --> 00:42:44.936 A:middle
If your hands weren't so sweaty,

00:42:44.936 --> 00:42:45.776 A:middle
you could grab the
button [laughter].

00:42:48.066 --> 00:42:49.976 A:middle
Come on.

00:42:53.306 --> 00:42:54.426 A:middle
Nobody look for a second.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:00.216 --> 00:43:02.000 A:middle
This is not going to
be funny in a second.

00:43:08.516 --> 00:43:13.766 A:middle
[ Applause ]

00:43:14.266 --> 00:43:15.966 A:middle
There we go.

00:43:16.516 --> 00:43:23.886 A:middle
[ Applause ]

00:43:24.386 --> 00:43:25.976 A:middle
That should not be
the biggest applause.

00:43:26.026 --> 00:43:26.316 A:middle
Okay [laughter].

00:43:27.936 --> 00:43:29.346 A:middle
So let's continue on.

00:43:29.346 --> 00:43:31.986 A:middle
I'm going to delete the title
from this, and we'll go ahead

00:43:31.986 --> 00:43:33.676 A:middle
and set an image for it.

00:43:33.676 --> 00:43:35.706 A:middle
We'll make it this nice
compass icon we're given

00:43:36.206 --> 00:43:37.826 A:middle
and we'll just place
it correctly.

00:43:38.236 --> 00:43:40.826 A:middle
Now, I will connect up this
button a little bit later,

00:43:40.826 --> 00:43:43.176 A:middle
but let's make sure we got
the interface we wanted.

00:43:43.576 --> 00:43:45.626 A:middle
I'll click Done in
the configuration bar

00:43:46.036 --> 00:43:49.616 A:middle
and we'll switch back to the
iPhone 6s Plus in landscape.

00:43:49.726 --> 00:43:50.596 A:middle
Our button appears.

00:43:50.886 --> 00:43:53.906 A:middle
When I switch back to
portrait, it does not,

00:43:54.146 --> 00:43:55.856 A:middle
and that's exactly the
interface I wanted.

00:43:56.496 --> 00:43:58.456 A:middle
So Interface Builder
now makes it really easy

00:43:58.456 --> 00:44:00.076 A:middle
to design adaptive layouts.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:58.456 --> 00:44:00.076 A:middle
to design adaptive layouts.

00:44:01.226 --> 00:44:02.776 A:middle
The configuration bar is going

00:44:02.776 --> 00:44:05.396 A:middle
to show devices for
iOS and watchOS.

00:44:06.136 --> 00:44:08.026 A:middle
It also shows some
helpful options for tvOS.

00:44:08.996 --> 00:44:11.486 A:middle
I'll bring up the tvOS
version of our application,

00:44:11.796 --> 00:44:14.256 A:middle
and you'll see the configuration
bar now shows you options

00:44:14.306 --> 00:44:17.936 A:middle
for the light interface
and the dark interface.

00:44:18.586 --> 00:44:20.556 A:middle
And I can even make
customizations here too.

00:44:20.556 --> 00:44:22.536 A:middle
For example, let's
add a specialization

00:44:22.536 --> 00:44:25.476 A:middle
of the compass icon for
dark mode so that it pops

00:44:25.476 --> 00:44:26.146 A:middle
out a little bit better.

00:44:28.016 --> 00:44:29.066 A:middle
Now, there's one more feature

00:44:29.066 --> 00:44:30.596 A:middle
for Interface Builder
I'd like to show you.

00:44:32.066 --> 00:44:34.356 A:middle
You'll see that the tvOS
Storyboard is zoomed

00:44:34.356 --> 00:44:36.596 A:middle
out so it fits on the
entirety of the Canvas.

00:44:37.676 --> 00:44:40.036 A:middle
Interface Builder now
supports Canvas operations

00:44:40.036 --> 00:44:41.596 A:middle
at any zoom level.

00:44:42.516 --> 00:44:49.206 A:middle
[ Applause ]

00:44:49.706 --> 00:44:51.506 A:middle
So whether you want to
zoom all the way in,

00:44:51.506 --> 00:44:54.756 A:middle
get pixel perfect alignments,
or you want to zoom way back out

00:44:54.756 --> 00:44:56.926 A:middle
and work at an overview,
you can do it all.

00:44:58.516 --> 00:45:02.576 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:58.516 --> 00:45:02.576 A:middle
[ Applause ]

00:45:03.076 --> 00:45:04.906 A:middle
And that's what we have
new for Interface Builder.

00:45:06.516 --> 00:45:14.926 A:middle
[ Applause ]

00:45:15.426 --> 00:45:16.006 A:middle
Thank you.

00:45:16.006 --> 00:45:18.876 A:middle
Designing in Interface Builder
now feels like working directly

00:45:18.876 --> 00:45:20.356 A:middle
on a device, and editing

00:45:20.356 --> 00:45:23.326 A:middle
at any zoom level means you're
no longer constrained by how big

00:45:23.576 --> 00:45:25.676 A:middle
or small those devices
really are.

00:45:28.066 --> 00:45:30.576 A:middle
For this release, we've also
focused on the accessibility

00:45:30.656 --> 00:45:32.466 A:middle
of our tools, and in particular,

00:45:32.466 --> 00:45:35.376 A:middle
we've made Interface Builder
work great with voiceover.

00:45:36.246 --> 00:45:38.736 A:middle
We've also completely rewritten
our AppleScript Dictionary,

00:45:38.806 --> 00:45:40.576 A:middle
making Xcode much
easier to integrate

00:45:40.576 --> 00:45:41.976 A:middle
with desktop automation.

00:45:43.516 --> 00:45:48.096 A:middle
[ Applause ]

00:45:48.596 --> 00:45:51.406 A:middle
Now, with each release, we add
additional support for finding,

00:45:51.686 --> 00:45:53.556 A:middle
diagnosing, and fixing issues.

00:45:53.916 --> 00:45:56.796 A:middle
And with Xcode 8, we are taking
another big step forward.

00:45:58.256 --> 00:46:01.606 A:middle
Over the last year, we've
added over 100 new diagnostics,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:58.256 --> 00:46:01.606 A:middle
Over the last year, we've
added over 100 new diagnostics,

00:46:01.866 --> 00:46:03.716 A:middle
which provide great
insight as you build

00:46:03.916 --> 00:46:05.756 A:middle
and as you edit your
code with live issues.

00:46:07.126 --> 00:46:10.046 A:middle
We've added three new static
analyzers for localization,

00:46:10.246 --> 00:46:11.956 A:middle
malleability, and deallocation.

00:46:12.276 --> 00:46:14.936 A:middle
All common patterns that can
cause issues in your apps.

00:46:16.366 --> 00:46:18.786 A:middle
And we've continued to
invest in our testing system,

00:46:19.116 --> 00:46:21.066 A:middle
improving stability,
performance,

00:46:21.546 --> 00:46:22.606 A:middle
and adding some new options.

00:46:24.756 --> 00:46:28.106 A:middle
Xcode will now capture and
display logs for crashes

00:46:28.526 --> 00:46:29.826 A:middle
that occur during your testing.

00:46:31.516 --> 00:46:35.546 A:middle
[ Applause ]

00:46:36.046 --> 00:46:37.656 A:middle
This is a great option
because you can run your tests,

00:46:38.006 --> 00:46:40.516 A:middle
collect those logs, and
just like crash logs,

00:46:40.516 --> 00:46:43.286 A:middle
you can view them right in the
debugger to diagnose the issues.

00:46:44.566 --> 00:46:46.806 A:middle
We've also enhanced
xcodebuild with a new option

00:46:46.806 --> 00:46:48.306 A:middle
to run prebuilt tests.

00:46:50.516 --> 00:46:54.546 A:middle
[ Applause ]

00:46:55.046 --> 00:46:55.646 A:middle
Woo hoo, indeed.

00:46:55.646 --> 00:46:58.656 A:middle
It means this is perfect for
integrating scalable testing

00:46:58.746 --> 00:47:00.336 A:middle
with your own continuous
integration.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:58.746 --> 00:47:00.336 A:middle
with your own continuous
integration.

00:47:02.816 --> 00:47:05.216 A:middle
So now more than ever, Xcode
will help you with issues

00:47:05.216 --> 00:47:08.176 A:middle
as you build, analyze,
and test your apps.

00:47:08.706 --> 00:47:10.866 A:middle
But oftentimes some of
the most interesting,

00:47:10.866 --> 00:47:13.726 A:middle
if not let's say
diabolical, issues happen

00:47:13.726 --> 00:47:14.896 A:middle
when you run your code.

00:47:15.676 --> 00:47:18.176 A:middle
For that, we're introducing
something new called

00:47:18.176 --> 00:47:19.096 A:middle
Runtime Issues.

00:47:20.516 --> 00:47:24.196 A:middle
[ Applause ]

00:47:24.696 --> 00:47:26.226 A:middle
Runtime Issues are
like our others.

00:47:26.386 --> 00:47:28.306 A:middle
You're alerted to them
in the Activity view,

00:47:28.576 --> 00:47:31.076 A:middle
and you'll see details about
them in the Issue Navigator.

00:47:31.746 --> 00:47:34.896 A:middle
We've added a toggle at
the top to highlight them.

00:47:35.076 --> 00:47:37.636 A:middle
Now, there are three
kinds of runtime issues;

00:47:38.116 --> 00:47:40.176 A:middle
UI, threads, and memory.

00:47:41.026 --> 00:47:41.726 A:middle
Let's start with UI.

00:47:43.466 --> 00:47:46.436 A:middle
The View Debugger is already
a great tool for visualizing

00:47:46.436 --> 00:47:49.106 A:middle
and diagnosing problems
with your interface.

00:47:50.216 --> 00:47:52.736 A:middle
In addition to improved
accuracy and visual rendering,

00:47:53.066 --> 00:47:56.176 A:middle
the View Debugger will now
detect layout issues at runtime.

00:47:58.976 --> 00:48:02.206 A:middle
With each capture, the View
Debugger is able to detect views


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:58.976 --> 00:48:02.206 A:middle
With each capture, the View
Debugger is able to detect views

00:48:02.206 --> 00:48:04.966 A:middle
with ambiguous layouts, and
these are caused by missing

00:48:04.966 --> 00:48:06.386 A:middle
and misconfigured constraints.

00:48:07.516 --> 00:48:12.206 A:middle
[ Applause ]

00:48:12.706 --> 00:48:14.786 A:middle
These issues are surfaced
right in the Navigator

00:48:14.786 --> 00:48:17.626 A:middle
and the Inspector provides
details to help you fix them.

00:48:19.276 --> 00:48:21.906 A:middle
Now, threading issues
are often unpredictable

00:48:21.906 --> 00:48:23.486 A:middle
and can be difficult to debug,

00:48:23.486 --> 00:48:25.566 A:middle
and there are many
potential causes.

00:48:25.816 --> 00:48:28.956 A:middle
Things like unlocking from the
wrong thread or data races.

00:48:28.956 --> 00:48:32.436 A:middle
To help you track down
these kinds of issues,

00:48:32.676 --> 00:48:35.626 A:middle
we're integrating Thread
Sanitizer into Xcode 8.

00:48:36.946 --> 00:48:38.266 A:middle
When enabled for
you application,

00:48:38.436 --> 00:48:41.896 A:middle
the Thread Sanitizer is able to
detect common threading problems

00:48:42.296 --> 00:48:44.106 A:middle
and will surface them
as runtime issues.

00:48:45.146 --> 00:48:47.466 A:middle
You can have Xcode break on
these issues as they occur

00:48:47.686 --> 00:48:49.686 A:middle
or you can collect them
all and review them

00:48:49.686 --> 00:48:50.436 A:middle
at the end of your session.

00:48:51.446 --> 00:48:53.556 A:middle
And the integrated report
provides a breakdown

00:48:53.556 --> 00:48:55.526 A:middle
of these issues,
giving you details

00:48:55.526 --> 00:48:56.746 A:middle
about any race conditions

00:48:57.056 --> 00:48:58.866 A:middle
and giving you stack
frames to help you navigate.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:00.926 --> 00:49:02.046 A:middle
Like -- yes.

00:49:03.516 --> 00:49:06.776 A:middle
[ Applause ]

00:49:07.276 --> 00:49:08.286 A:middle
Now, like threading,

00:49:08.386 --> 00:49:11.856 A:middle
memory issues are often
challenging to identify and fix.

00:49:12.536 --> 00:49:15.726 A:middle
And to debug them effectively,
you often want to view a graph

00:49:15.726 --> 00:49:18.016 A:middle
of your objects and see how
they're all interconnected,

00:49:19.496 --> 00:49:20.306 A:middle
so that's what we
built [laughter].

00:49:22.436 --> 00:49:25.116 A:middle
New in Xcode 8 is a
memory debugger available

00:49:25.116 --> 00:49:27.806 A:middle
in the Debug bar here, which
will help you visualize

00:49:27.906 --> 00:49:30.816 A:middle
and navigate the object graph
for your running application.

00:49:32.516 --> 00:49:44.656 A:middle
[ Applause ]

00:49:45.156 --> 00:49:46.366 A:middle
Will you like it
better if I tell you

00:49:46.366 --> 00:49:47.976 A:middle
that it automatically
finds leaks too?

00:49:48.516 --> 00:49:54.596 A:middle
[ Applause ]

00:49:55.096 --> 00:49:56.636 A:middle
That's good because this
is an amazing new tool

00:49:56.636 --> 00:49:57.936 A:middle
for debugging memory issues,

00:49:58.146 --> 00:49:59.596 A:middle
and I'd like to show
it to you in a demo.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:05.786 --> 00:50:08.386 A:middle
Okay, so here we have the
Trailblazer application.

00:50:08.386 --> 00:50:10.186 A:middle
I'm going to launch
it in the simulator.

00:50:11.166 --> 00:50:12.496 A:middle
Now, I was debugging
this earlier

00:50:12.496 --> 00:50:14.296 A:middle
and I noticed some memory
issues I wanted to look at.

00:50:15.416 --> 00:50:17.366 A:middle
I'll bring up the memory
report while we're doing this

00:50:18.076 --> 00:50:19.266 A:middle
and I'll click on the trail.

00:50:19.776 --> 00:50:20.886 A:middle
You'll see that memory spikes.

00:50:21.376 --> 00:50:21.996 A:middle
That one's okay.

00:50:21.996 --> 00:50:23.696 A:middle
I investigated that
early, and that's just

00:50:23.696 --> 00:50:25.296 A:middle
from loading all the
assets for the trail.

00:50:26.506 --> 00:50:29.036 A:middle
What I noticed, though, was
as I clicked on each review,

00:50:29.206 --> 00:50:32.846 A:middle
our memory spikes, and we
don't reclaim that memory,

00:50:33.206 --> 00:50:34.686 A:middle
even if we go back all the way

00:50:34.686 --> 00:50:36.316 A:middle
to the beginning
of our application.

00:50:37.496 --> 00:50:39.656 A:middle
This is generally indicative
of a memory management problem

00:50:39.816 --> 00:50:42.016 A:middle
and something we can use the
Memory Debugger to investigate,

00:50:43.456 --> 00:50:45.846 A:middle
so I'll click the Memory
Debugger button in the bar here,

00:50:46.226 --> 00:50:47.696 A:middle
and as we pause your
application,

00:50:47.696 --> 00:50:49.606 A:middle
we capture a graph
of the objects.

00:50:50.726 --> 00:50:53.996 A:middle
The debug navigator now shows
me all the objects allocated

00:50:53.996 --> 00:50:56.276 A:middle
in my application,
both those I created

00:50:56.476 --> 00:50:57.966 A:middle
and the ones the
system created for me.

00:50:58.946 --> 00:51:01.416 A:middle
I can filter this down
to only showing the items


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:58.946 --> 00:51:01.416 A:middle
I can filter this down
to only showing the items

00:51:01.416 --> 00:51:02.186 A:middle
from my project.

00:51:02.186 --> 00:51:05.236 A:middle
I can also type in a
string or an address

00:51:05.486 --> 00:51:06.756 A:middle
to look for specific objects.

00:51:07.736 --> 00:51:10.696 A:middle
Here I've typed in "controller"
and I see I have three instances

00:51:10.696 --> 00:51:12.396 A:middle
of the Comment View
Controller around.

00:51:13.016 --> 00:51:14.646 A:middle
That's surprising to me.

00:51:14.946 --> 00:51:17.586 A:middle
When I select any one of
them, we'll see a graph

00:51:17.756 --> 00:51:18.786 A:middle
for this object on the right.

00:51:19.846 --> 00:51:22.196 A:middle
Now, what you're seeing here
are all the reference paths

00:51:22.416 --> 00:51:25.146 A:middle
to this object that are
keeping it around in memory.

00:51:26.966 --> 00:51:30.116 A:middle
One of these objects I see here
is a Swift capture context.

00:51:30.526 --> 00:51:31.606 A:middle
This is somewhere in code

00:51:31.606 --> 00:51:34.536 A:middle
that my View Controller has been
captured as part of a closure.

00:51:35.206 --> 00:51:36.346 A:middle
That's a good place
to start looking.

00:51:37.806 --> 00:51:39.896 A:middle
I'll bring up the Inspector
to look at more details,

00:51:40.326 --> 00:51:42.996 A:middle
and one of the details we show
is the back trace to where

00:51:42.996 --> 00:51:44.036 A:middle
that capture happened.

00:51:44.926 --> 00:51:47.806 A:middle
And of course, I can just click
to navigate directly to the line

00:51:47.806 --> 00:51:49.536 A:middle
of code that caused it.

00:51:50.516 --> 00:51:57.586 A:middle
[ Applause ]

00:51:58.086 --> 00:51:59.466 A:middle
And I can see the
source of my problem.

00:51:59.466 --> 00:52:02.296 A:middle
I've set up an observer for
this View Controller to be told


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:59.466 --> 00:52:02.296 A:middle
I've set up an observer for
this View Controller to be told

00:52:02.296 --> 00:52:03.376 A:middle
when the rating changes.

00:52:04.006 --> 00:52:06.066 A:middle
This API returns an
observation token

00:52:06.326 --> 00:52:08.536 A:middle
that I see I've properly
cleared up down here

00:52:08.536 --> 00:52:09.386 A:middle
when the view goes away,

00:52:09.786 --> 00:52:11.776 A:middle
but I never retained
it in the first place.

00:52:12.386 --> 00:52:14.026 A:middle
That's a common and
simple mistake to make.

00:52:14.516 --> 00:52:16.806 A:middle
It's also one the Memory
Debugger makes really easy

00:52:16.886 --> 00:52:18.136 A:middle
to find and fix.

00:52:19.686 --> 00:52:22.256 A:middle
Now, I mentioned before the
Memory Debugger also finds

00:52:22.316 --> 00:52:24.246 A:middle
leaks, and it's alerting
me to three I have

00:52:24.296 --> 00:52:25.386 A:middle
up here in the Activity view.

00:52:26.416 --> 00:52:28.746 A:middle
I'll click on that and be
taken to the Issue Navigator

00:52:28.946 --> 00:52:31.016 A:middle
where I see three types
of objects I'm leaking.

00:52:31.536 --> 00:52:34.366 A:middle
An array, user review,
and user objects.

00:52:35.426 --> 00:52:37.696 A:middle
I'll click on one of the
reviews, I'm sorry, the users,

00:52:37.936 --> 00:52:39.726 A:middle
and now we see the
reference cycle.

00:52:40.826 --> 00:52:43.596 A:middle
A user has an array of
written reviews, and each one

00:52:43.596 --> 00:52:46.526 A:middle
of those user reviews has a
reference back to that user.

00:52:47.286 --> 00:52:49.056 A:middle
If all these references
are strongly held,

00:52:49.456 --> 00:52:50.836 A:middle
this will leak all
over those objects.

00:52:52.016 --> 00:52:54.146 A:middle
Now, it looks like I'm
leaking them all uniformly.

00:52:54.636 --> 00:52:57.076 A:middle
If I wanted more details though
on any one of these objects,

00:52:57.346 --> 00:52:59.376 A:middle
I can use the context menu
to print something right

00:52:59.376 --> 00:53:01.546 A:middle
to the console or just bring


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:59.376 --> 00:53:01.546 A:middle
to the console or just bring

00:53:01.546 --> 00:53:03.076 A:middle
up a quick look to
see more details.

00:53:05.096 --> 00:53:07.546 A:middle
Now, in this case, the reviewing
user relationship is the one I

00:53:07.546 --> 00:53:11.096 A:middle
want to investigate, and we'll
just navigate just like code.

00:53:11.096 --> 00:53:13.856 A:middle
I'll just command click on it
and be taken right to the line

00:53:13.856 --> 00:53:15.246 A:middle
of code where that
reference came from.

00:53:15.786 --> 00:53:18.026 A:middle
And sure enough, I forgot
to declare that as weak.

00:53:19.206 --> 00:53:20.786 A:middle
So just like that, the
Memory Debugger was able

00:53:20.786 --> 00:53:23.276 A:middle
to show me the leaks I
had and help me fix them.

00:53:24.516 --> 00:53:31.956 A:middle
[ Applause ]

00:53:32.456 --> 00:53:34.126 A:middle
So that's the new Memory
Debugger in Xcode 8.

00:53:36.396 --> 00:53:38.706 A:middle
Now, there is one other kind
of issue I'd like to talk

00:53:38.706 --> 00:53:41.126 A:middle
about today, and that's
with provisioning.

00:53:42.516 --> 00:53:46.546 A:middle
[ Applause ]

00:53:47.046 --> 00:53:49.386 A:middle
There is nothing more
frustrating when you're working

00:53:49.386 --> 00:53:53.116 A:middle
on your projects than having
issues with code signing.

00:53:53.876 --> 00:53:56.726 A:middle
Well, actually, that turns
out to not quite be true

00:53:57.246 --> 00:54:00.406 A:middle
because in some cases, the
solution was more frustrating


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:57.246 --> 00:54:00.406 A:middle
because in some cases, the
solution was more frustrating

00:54:00.486 --> 00:54:01.186 A:middle
than the problem itself.

00:54:02.516 --> 00:54:08.646 A:middle
[ Laughter &amp; Applause ]

00:54:09.146 --> 00:54:10.556 A:middle
So we addressed this in Xcode 8

00:54:10.556 --> 00:54:12.596 A:middle
and we've completely rebuilt
our provisioning system.

00:54:13.516 --> 00:54:18.916 A:middle
[ Applause ]

00:54:19.416 --> 00:54:22.416 A:middle
We started by creating new
signing actions that are faster,

00:54:22.416 --> 00:54:25.096 A:middle
more robust, and built with
new Xcode workflows in mind.

00:54:25.916 --> 00:54:27.706 A:middle
We generated a new
user interface elements

00:54:27.746 --> 00:54:29.966 A:middle
to clearly show you
the profile, team,

00:54:29.966 --> 00:54:33.126 A:middle
and certificate you're using
and clearly show you any issues.

00:54:33.786 --> 00:54:34.526 A:middle
We refined our messages

00:54:34.526 --> 00:54:37.156 A:middle
to ensure they always
included actionable information

00:54:37.676 --> 00:54:40.796 A:middle
and we also were ensuring to
generate a log of the requests

00:54:41.016 --> 00:54:42.876 A:middle
and the results to
be transparent

00:54:42.876 --> 00:54:43.646 A:middle
about what's occurring.

00:54:45.236 --> 00:54:46.886 A:middle
Based on these, we had a
strong foundation on which

00:54:46.886 --> 00:54:49.436 A:middle
to provide two new
provisioning workflows.

00:54:50.456 --> 00:54:52.796 A:middle
Xcode 8 has an option for
automatic code signing.

00:54:53.626 --> 00:54:56.216 A:middle
With this code signing
option, Xcode takes care of all

00:54:56.216 --> 00:54:59.076 A:middle
of the details using
a dedicated profile,

00:54:59.076 --> 00:55:00.526 A:middle
and this profile is
separate from any


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:59.076 --> 00:55:00.526 A:middle
and this profile is
separate from any

00:55:00.526 --> 00:55:02.006 A:middle
that you create or manage.

00:55:03.356 --> 00:55:05.126 A:middle
We'll take care of all
the signing requests

00:55:05.426 --> 00:55:07.956 A:middle
for adding entitlements
and regenerating new items.

00:55:09.386 --> 00:55:11.416 A:middle
For cases where you
would like more control

00:55:11.416 --> 00:55:14.116 A:middle
of your signing setup, you
can disable this option

00:55:14.316 --> 00:55:15.996 A:middle
and use Customized Code Signing.

00:55:17.516 --> 00:55:20.866 A:middle
[ Applause ]

00:55:21.366 --> 00:55:22.486 A:middle
With Customized Code Signing,

00:55:22.486 --> 00:55:25.346 A:middle
you can specify the exact
signing assets you would

00:55:25.346 --> 00:55:29.506 A:middle
like to use and you can specify
them per build configuration,

00:55:29.736 --> 00:55:32.216 A:middle
which is a great option when you
have a variety of signing needs.

00:55:33.516 --> 00:55:37.276 A:middle
[ Applause ]

00:55:37.776 --> 00:55:39.696 A:middle
Customized Code Signing
still takes advantage

00:55:39.696 --> 00:55:41.836 A:middle
of our new foundations to
give you great feedback

00:55:41.996 --> 00:55:43.696 A:middle
and assistance for any issues.

00:55:45.186 --> 00:55:46.896 A:middle
And there's one other area of
provisioning that we wanted

00:55:46.896 --> 00:55:49.086 A:middle
to focus on, which was
development certificates.

00:55:50.176 --> 00:55:52.776 A:middle
To make development easier when
working with many machines,

00:55:53.206 --> 00:55:56.456 A:middle
Xcode now supports multiple
development certificates.

00:55:57.516 --> 00:56:01.546 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:55:57.516 --> 00:56:01.546 A:middle
[ Applause ]

00:56:02.046 --> 00:56:02.876 A:middle
This means when you
get a new Mac,

00:56:03.096 --> 00:56:05.586 A:middle
you just add your
Apple ID and that's it.

00:56:05.586 --> 00:56:08.406 A:middle
You no longer need to revoke
or share a certificate from any

00:56:08.406 --> 00:56:09.066 A:middle
of your other development.

00:56:10.516 --> 00:56:16.546 A:middle
[ Applause ]

00:56:17.046 --> 00:56:20.096 A:middle
So the new provisioning system,
automatic and customized signing

00:56:20.256 --> 00:56:22.046 A:middle
and multiple development
certificates.

00:56:22.206 --> 00:56:24.896 A:middle
Always that Xcode 8
makes provisioning easy

00:56:25.296 --> 00:56:26.516 A:middle
and gives you the
control you need.

00:56:28.726 --> 00:56:30.736 A:middle
And in this release, we
focused on performance,

00:56:31.076 --> 00:56:32.636 A:middle
and we have some great
achievements for you.

00:56:33.686 --> 00:56:36.386 A:middle
Compared to the release we
shipped just a year ago,

00:56:36.606 --> 00:56:39.466 A:middle
you'll find Xcode launches
twice as fast all the way

00:56:39.466 --> 00:56:42.726 A:middle
up to being 50 times faster
at the indexing of tests.

00:56:43.516 --> 00:56:48.546 A:middle
[ Applause ]

00:56:49.046 --> 00:56:50.916 A:middle
These improvements all add
up to make Xcode 8 something

00:56:50.916 --> 00:56:52.776 A:middle
that is fast and fun to use.

00:56:54.426 --> 00:56:56.096 A:middle
So these have been some
of the many features

00:56:56.096 --> 00:56:58.076 A:middle
and enhancements
you'll find in Xcode 8.

00:56:58.826 --> 00:57:00.046 A:middle
Please come by the
labs this week


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:56:58.826 --> 00:57:00.046 A:middle
Please come by the
labs this week

00:57:00.156 --> 00:57:01.506 A:middle
and let us know what you think.

00:57:02.506 --> 00:57:04.546 A:middle
Next, I'd like to invite
up Sebastien Marineau-Mes,

00:57:04.826 --> 00:57:06.826 A:middle
who's going to give you some
information about exciting,

00:57:06.826 --> 00:57:08.116 A:middle
new platform technologies.

00:57:08.676 --> 00:57:09.086 A:middle
Sebastien [applause]?

00:57:12.136 --> 00:57:13.116 A:middle
&gt;&gt; Thank you, Matthew.

00:57:14.066 --> 00:57:14.426 A:middle
Thank you.

00:57:15.486 --> 00:57:17.556 A:middle
Let me now give an
update on a number of key,

00:57:17.556 --> 00:57:19.186 A:middle
foundational technologies,
and I'm going

00:57:19.186 --> 00:57:20.606 A:middle
to start with compression.

00:57:21.576 --> 00:57:24.816 A:middle
Now, if you recall, last
year, we introduced lzfse

00:57:24.816 --> 00:57:26.176 A:middle
as our new mainstream
compression.

00:57:26.636 --> 00:57:29.076 A:middle
At three times the
speed of zlib and less

00:57:29.076 --> 00:57:30.596 A:middle
than half the energy
consumption,

00:57:30.736 --> 00:57:32.176 A:middle
it's a really compelling
technology

00:57:32.496 --> 00:57:34.206 A:middle
and one that's seen
great adoption.

00:57:35.016 --> 00:57:36.586 A:middle
Now, today we're announcing

00:57:36.586 --> 00:57:39.736 A:middle
that we're open-sourcing
lzfse, and we [applause]--

00:57:42.176 --> 00:57:43.966 A:middle
There you go.

00:57:44.066 --> 00:57:46.766 A:middle
And we believe that this will
encourage further adoption,

00:57:47.056 --> 00:57:48.526 A:middle
especially for multiplatform

00:57:48.526 --> 00:57:50.966 A:middle
and backhand offline
compression use cases.

00:57:51.946 --> 00:57:54.196 A:middle
Next, I'd like to
talk about networking.

00:57:55.636 --> 00:57:57.876 A:middle
Now, we know that
the performance

00:57:58.386 --> 00:57:59.986 A:middle
of some applications
really depends

00:57:59.986 --> 00:58:01.866 A:middle
on having a great
network connection,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:57:59.986 --> 00:58:01.866 A:middle
on having a great
network connection,

00:58:02.136 --> 00:58:04.546 A:middle
but today's networks don't
really have a great way

00:58:04.546 --> 00:58:06.516 A:middle
to prioritize the traffic
that's most important.

00:58:07.206 --> 00:58:10.276 A:middle
For example, people
downloading YouTube cat videos

00:58:10.926 --> 00:58:13.326 A:middle
at work can interfere
with your really important

00:58:13.326 --> 00:58:14.036 A:middle
video conference.

00:58:14.956 --> 00:58:17.996 A:middle
And so in working with Cisco,
we've added intelligence

00:58:17.996 --> 00:58:20.066 A:middle
to the network, and what
the network is now able

00:58:20.226 --> 00:58:22.906 A:middle
to do is identify
those trusted devices.

00:58:23.576 --> 00:58:26.846 A:middle
Identify those applications
that are most important

00:58:26.846 --> 00:58:30.866 A:middle
to your business, and then
prioritize that traffic end

00:58:30.866 --> 00:58:32.456 A:middle
to end throughout the network.

00:58:32.796 --> 00:58:34.466 A:middle
Which gives you much
better performance

00:58:34.566 --> 00:58:36.996 A:middle
for those applications that
are most important to you.

00:58:38.126 --> 00:58:38.916 A:middle
That is networking.

00:58:39.696 --> 00:58:40.026 A:middle
Next--

00:58:41.516 --> 00:58:43.846 A:middle
[ Applause ]

00:58:44.346 --> 00:58:46.626 A:middle
Next, let's talk about logging.

00:58:47.286 --> 00:58:49.186 A:middle
Now, logging is a
technology that all

00:58:49.186 --> 00:58:52.056 A:middle
of you use during
development, debugging,

00:58:52.146 --> 00:58:53.396 A:middle
and for field diagnostics.

00:58:54.496 --> 00:58:57.076 A:middle
Traditionally, logging
has been very fragmented.

00:58:57.346 --> 00:58:59.646 A:middle
A number of you roll
your own solutions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:59:00.336 --> 00:59:03.106 A:middle
The solutions that are available
in the platform are often slow,

00:59:03.436 --> 00:59:06.516 A:middle
and so this year, we've
set out to rethink logging,

00:59:07.096 --> 00:59:08.486 A:middle
and we've come up
with a technology

00:59:08.486 --> 00:59:09.886 A:middle
that we think is
very compelling.

00:59:10.536 --> 00:59:11.356 A:middle
It's unified.

00:59:11.606 --> 00:59:13.096 A:middle
It's extremely fast.

00:59:13.096 --> 00:59:15.476 A:middle
It's very compact on how
it stores data on disc.

00:59:16.176 --> 00:59:19.346 A:middle
It also gives you enough
flexibility to support logging

00:59:19.346 --> 00:59:22.536 A:middle
across applications,
daemons, system services.

00:59:22.986 --> 00:59:25.346 A:middle
It has this concept
of in-memory tracing

00:59:25.346 --> 00:59:28.496 A:middle
where you can capture very
high-frequency log messages

00:59:28.836 --> 00:59:30.356 A:middle
that only get persisted to disc

00:59:30.356 --> 00:59:33.126 A:middle
when your application
actually hits an air condition.

00:59:33.766 --> 00:59:36.446 A:middle
And finally, we've
baked privacy right in,

00:59:36.746 --> 00:59:39.496 A:middle
so you can capture very rich
log messages during development

00:59:39.796 --> 00:59:41.816 A:middle
and have those be
automatically redacted

00:59:42.066 --> 00:59:44.496 A:middle
when you ship your application
through end customers.

00:59:46.066 --> 00:59:46.946 A:middle
Now, along with this
[applause] --

00:59:49.166 --> 00:59:52.956 A:middle
We have rewritten the console
application it is much richer

00:59:52.956 --> 00:59:53.646 A:middle
in capability.

00:59:53.646 --> 00:59:56.036 A:middle
It gives you, for example,
the ability to live stream

00:59:56.256 --> 00:59:59.576 A:middle
through development devices,
the ability to advance filtering

00:59:59.796 --> 01:00:02.336 A:middle
and grade system
introspection capabilities,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:59:59.796 --> 01:00:02.336 A:middle
and grade system
introspection capabilities,

01:00:02.856 --> 01:00:04.556 A:middle
so that is the new logging.

01:00:05.406 --> 01:00:06.836 A:middle
Next up--

01:00:07.516 --> 01:00:09.546 A:middle
[ Applause ]

01:00:10.046 --> 01:00:12.786 A:middle
Next up, let's talk
about file systems.

01:00:12.786 --> 01:00:13.666 A:middle
All right.

01:00:16.346 --> 01:00:20.886 A:middle
Now, of course, HFS Plus is the
mainstream file system on Macs,

01:00:21.386 --> 01:00:24.116 A:middle
and it was first
released in 1998.

01:00:24.766 --> 01:00:27.836 A:middle
Today it's deployed
across every Apple product,

01:00:28.056 --> 01:00:30.126 A:middle
over a billion devices.

01:00:30.836 --> 01:00:35.116 A:middle
And of course, HFS Plus was
designed over 18 years ago,

01:00:35.496 --> 01:00:37.816 A:middle
and I think it's really a
testament to the strength

01:00:37.816 --> 01:00:40.216 A:middle
of its original design that
it's still a compelling file

01:00:40.216 --> 01:00:40.956 A:middle
system today.

01:00:41.246 --> 01:00:43.926 A:middle
But of course, when it was
designed, we had floppy drives

01:00:43.926 --> 01:00:48.786 A:middle
on Macs, and so we thought
now may be the time for us

01:00:48.786 --> 01:00:50.546 A:middle
to launch a new file system.

01:00:50.546 --> 01:00:54.676 A:middle
And so today we're announcing
brand new Apple File System.

01:00:55.516 --> 01:01:01.166 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:00:55.516 --> 01:01:01.166 A:middle
[ Applause ]

01:01:01.666 --> 01:01:01.926 A:middle
There you go.

01:01:02.046 --> 01:01:03.466 A:middle
I thought you guys
might be excited by this

01:01:04.156 --> 01:01:05.016 A:middle
or the crowd might be excited.

01:01:05.306 --> 01:01:08.006 A:middle
Now, the Apple File
System is scalable

01:01:08.006 --> 01:01:11.056 A:middle
from our smallest device, the
watch, to high-end Mac Pros

01:01:11.056 --> 01:01:12.716 A:middle
with very large storage
configurations.

01:01:13.606 --> 01:01:14.656 A:middle
It's also modern.

01:01:14.656 --> 01:01:16.746 A:middle
We designed it first
and foremost for today

01:01:16.746 --> 01:01:19.586 A:middle
and tomorrow's storage
technologies, Flash and SSD.

01:01:19.586 --> 01:01:22.486 A:middle
It's resilient and we've
used the opportunity

01:01:22.486 --> 01:01:25.976 A:middle
to unify encryption
across iOS and Mac OS,

01:01:26.156 --> 01:01:28.466 A:middle
which gives us great
flexibility going forward.

01:01:29.476 --> 01:01:32.456 A:middle
Now, the Apple File System has a
number of new, unique features,

01:01:32.456 --> 01:01:34.366 A:middle
and I want to highlight
two of them for you.

01:01:35.126 --> 01:01:36.916 A:middle
The first is called cloning.

01:01:37.316 --> 01:01:38.096 A:middle
Now, why cloning?

01:01:38.626 --> 01:01:40.686 A:middle
It turns out that if you look
at a system that's been running

01:01:40.756 --> 01:01:43.726 A:middle
for a while, you'll find many
duplicates of identical files.

01:01:43.726 --> 01:01:45.796 A:middle
It's kind of human nature
to copy things around.

01:01:46.166 --> 01:01:47.936 A:middle
That's of course inefficient.

01:01:48.186 --> 01:01:49.356 A:middle
It uses up storage space.

01:01:50.016 --> 01:01:53.136 A:middle
But with clones, you're able
to copy files and only pay

01:01:53.136 --> 01:01:56.106 A:middle
for that initial storage when
the files are actually modified.

01:01:56.776 --> 01:01:59.816 A:middle
It's very fast and you can
clone files, directories,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:02:00.126 --> 01:02:01.106 A:middle
and directory hierarchies.

01:02:02.416 --> 01:02:03.596 A:middle
The second feature that I want

01:02:03.596 --> 01:02:05.476 A:middle
to highlight is called
Snapshots.

01:02:05.736 --> 01:02:06.736 A:middle
Now, what are Snapshots?

01:02:07.286 --> 01:02:08.716 A:middle
They're really an
image of the content

01:02:08.716 --> 01:02:10.556 A:middle
of the file system
at a point in time.

01:02:11.366 --> 01:02:12.326 A:middle
Why would you want this?

01:02:12.776 --> 01:02:15.036 A:middle
Well, let's say you're
creating a backup application.

01:02:15.616 --> 01:02:18.746 A:middle
Using Snapshots, you can go
and back up a consistent view

01:02:18.746 --> 01:02:20.486 A:middle
of the file system
at a point in time.

01:02:21.366 --> 01:02:24.176 A:middle
Another great example of
where this is useful is

01:02:24.176 --> 01:02:24.886 A:middle
in the classroom.

01:02:25.546 --> 01:02:28.426 A:middle
You may set up a device for
your students that has content,

01:02:28.486 --> 01:02:30.246 A:middle
configuration files,
applications,

01:02:30.246 --> 01:02:31.926 A:middle
and so on that you're going
to use during a class.

01:02:32.476 --> 01:02:34.416 A:middle
As the students use a device,

01:02:34.956 --> 01:02:37.716 A:middle
they may inadvertently modify
the content or the settings,

01:02:37.926 --> 01:02:39.716 A:middle
and what you can do is you
can use Snapshots at the end

01:02:39.716 --> 01:02:42.456 A:middle
of the class to revert
the device back

01:02:42.456 --> 01:02:44.516 A:middle
to its original state
so that it's ready

01:02:44.516 --> 01:02:45.676 A:middle
for the next class of students.

01:02:46.846 --> 01:02:49.876 A:middle
Now, these are features of
the new Apple File System

01:02:50.406 --> 01:02:52.116 A:middle
with a developer
preview of it that's part

01:02:52.116 --> 01:02:55.676 A:middle
of the Mac OS Sierra release
available to you today.

01:02:55.676 --> 01:02:57.966 A:middle
We'd encourage you all to
download it, check it out,

01:02:57.966 --> 01:03:00.846 A:middle
give us feedback, and the Apple
File System will be coming


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:02:57.966 --> 01:03:00.846 A:middle
give us feedback, and the Apple
File System will be coming

01:03:00.886 --> 01:03:02.886 A:middle
to all Apple devices soon.

01:03:03.516 --> 01:03:08.556 A:middle
[ Applause ]

01:03:09.056 --> 01:03:09.296 A:middle
All right.

01:03:11.876 --> 01:03:13.466 A:middle
Finally, let's talk
about privacy.

01:03:14.096 --> 01:03:16.536 A:middle
You heard about a new, powerful
technique called differential

01:03:16.626 --> 01:03:19.796 A:middle
privacy in this morning's
keynote, and I will attempt

01:03:20.166 --> 01:03:21.446 A:middle
to explain that to you.

01:03:21.976 --> 01:03:25.506 A:middle
I will start with the formal
math behind differential privacy

01:03:27.636 --> 01:03:30.906 A:middle
and remind, just note that
while it does look complex,

01:03:30.906 --> 01:03:32.766 A:middle
I can guarantee you the
math actually works.

01:03:32.766 --> 01:03:34.816 A:middle
And I'm going to actually
instead explain it

01:03:34.816 --> 01:03:36.346 A:middle
to you using a couple
of examples.

01:03:37.126 --> 01:03:38.536 A:middle
So the first example
is we're going

01:03:38.536 --> 01:03:41.046 A:middle
to use differential privacy
to try to resolve once

01:03:41.046 --> 01:03:43.466 A:middle
and for all one of
the most controversial

01:03:43.466 --> 01:03:44.376 A:middle
and important questions

01:03:44.666 --> 01:03:48.446 A:middle
of modern computer science
code formatting [laughter].

01:03:51.066 --> 01:03:52.666 A:middle
This is of course an
important question.

01:03:52.666 --> 01:03:55.706 A:middle
We're going to poll our audience
to get the answer to this.

01:03:55.876 --> 01:03:58.496 A:middle
It's also something that is
where you want your answer

01:03:58.496 --> 01:04:00.816 A:middle
to remain private
because let's face it,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:03:58.496 --> 01:04:00.816 A:middle
to remain private
because let's face it,

01:04:01.126 --> 01:04:03.426 A:middle
some of your coworkers may be
pretty passionate about this.

01:04:04.266 --> 01:04:07.236 A:middle
So how do we do this using
differential privacy?

01:04:07.236 --> 01:04:10.176 A:middle
Well, first, each of you
would provide your preference,

01:04:11.246 --> 01:04:13.996 A:middle
but before we send that over to
Apple to aggregate the results

01:04:13.996 --> 01:04:16.456 A:middle
of the survey, through
differential privacy,

01:04:16.706 --> 01:04:18.176 A:middle
we add noise to each answer.

01:04:18.326 --> 01:04:20.756 A:middle
And after we've added noise,
we actually have no way

01:04:20.756 --> 01:04:21.996 A:middle
to know what you
originally answered.

01:04:22.786 --> 01:04:24.716 A:middle
We send this to Apple,
and the beauty

01:04:24.716 --> 01:04:28.116 A:middle
of differential privacy is that
after we aggregate this data

01:04:28.116 --> 01:04:30.356 A:middle
over a large population,
we're actually able

01:04:30.356 --> 01:04:32.746 A:middle
to recover the answer
to our question.

01:04:32.746 --> 01:04:34.646 A:middle
Now, I'm not going
to pass judgment

01:04:34.646 --> 01:04:36.636 A:middle
on this, the actual answer.

01:04:36.636 --> 01:04:38.756 A:middle
It looks like of course
we're still very divided

01:04:38.756 --> 01:04:41.876 A:middle
in our opinions on this,
but I will remind everyone

01:04:41.876 --> 01:04:43.576 A:middle
that after you've run your
code through the compiler,

01:04:43.816 --> 01:04:48.576 A:middle
this doesn't actually really
matter, so [laughter] that's --

01:04:49.516 --> 01:04:53.546 A:middle
[ Applause ]

01:04:54.046 --> 01:04:56.316 A:middle
Now, how are we actually
applying differential privacy

01:04:56.316 --> 01:04:57.036 A:middle
in iOS X?

01:04:57.036 --> 01:04:58.256 A:middle
Let me give an example of this.

01:04:59.126 --> 01:05:01.856 A:middle
In Spotlight, we provide
suggestions for deep links


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:04:59.126 --> 01:05:01.856 A:middle
In Spotlight, we provide
suggestions for deep links

01:05:02.186 --> 01:05:05.646 A:middle
and we'd of course like to
surface the most relevant

01:05:05.646 --> 01:05:08.026 A:middle
and popular suggestions
to our end users.

01:05:09.236 --> 01:05:11.956 A:middle
And so the way that we do
this, we assign to each

01:05:11.956 --> 01:05:15.166 A:middle
of our deep links a unique
hash, and as users navigate

01:05:15.166 --> 01:05:18.066 A:middle
on their device, whenever
they encounter a deep link,

01:05:18.506 --> 01:05:21.826 A:middle
we take that hash, add noise
to it, extract a fragment

01:05:21.826 --> 01:05:23.506 A:middle
of it, and send it to Apple.

01:05:24.166 --> 01:05:25.516 A:middle
Now, any one of these fragments

01:05:25.666 --> 01:05:27.446 A:middle
on their own is completely
meaningless,

01:05:28.286 --> 01:05:31.166 A:middle
but when we aggregate this
across our entire user base,

01:05:31.586 --> 01:05:34.546 A:middle
we're able to recover the
popularity of our deep links

01:05:34.806 --> 01:05:37.866 A:middle
and then use that to
surface them in Spotlight

01:05:37.976 --> 01:05:39.266 A:middle
and improve our user's
experience.

01:05:40.476 --> 01:05:44.966 A:middle
That is the science behind
differential privacy.

01:05:45.256 --> 01:05:47.486 A:middle
There's one more aspect of it
though that I want to touch on.

01:05:48.096 --> 01:05:51.656 A:middle
You might think, well, if we're
capturing samples from users

01:05:51.796 --> 01:05:54.426 A:middle
and this works by capturing
many samples from many users,

01:05:54.836 --> 01:05:58.596 A:middle
what happens if Apple captures
too many samples from one user?

01:05:58.746 --> 01:06:00.866 A:middle
Could you not then
figure out what I'm doing?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:05:58.746 --> 01:06:00.866 A:middle
Could you not then
figure out what I'm doing?

01:06:01.516 --> 01:06:03.846 A:middle
And this is where the
privacy budget comes in.

01:06:04.426 --> 01:06:06.996 A:middle
The privacy budget limits
the amount of samples

01:06:06.996 --> 01:06:09.956 A:middle
that we can capture from any
given user and it ensures

01:06:09.956 --> 01:06:12.166 A:middle
that in the end, we can
never recover any meaningful

01:06:12.166 --> 01:06:14.236 A:middle
information from any
one of our users.

01:06:15.396 --> 01:06:16.936 A:middle
So that is differential privacy.

01:06:16.936 --> 01:06:19.706 A:middle
It's a powerful technique
that allows us to learn

01:06:19.706 --> 01:06:22.256 A:middle
from our users, improve
user experience,

01:06:22.666 --> 01:06:24.576 A:middle
and still maintain your privacy.

01:06:25.546 --> 01:06:29.006 A:middle
So with this, I'm going to hand
it over to Toby, Toby Paterson,

01:06:29.006 --> 01:06:32.006 A:middle
who will be talking about
higher level features in iOS X.

01:06:32.186 --> 01:06:32.626 A:middle
Toby?

01:06:32.716 --> 01:06:33.886 A:middle
&gt;&gt; Thanks, Sebastien.

01:06:35.516 --> 01:06:39.736 A:middle
[ Applause ]

01:06:40.236 --> 01:06:40.906 A:middle
Good afternoon.

01:06:46.336 --> 01:06:46.736 A:middle
There we go.

01:06:47.586 --> 01:06:52.186 A:middle
So, you know, it's really thanks
to all of you that we have

01:06:52.246 --> 01:06:57.396 A:middle
such a rich ecosystem on iOS,
and we are constantly looking

01:06:57.396 --> 01:07:00.746 A:middle
for new ways to help
users find applications,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:06:57.396 --> 01:07:00.746 A:middle
for new ways to help
users find applications,

01:07:01.336 --> 01:07:03.536 A:middle
get into the apps
they like to use,

01:07:03.996 --> 01:07:05.976 A:middle
and to integrate
your applications

01:07:06.256 --> 01:07:07.266 A:middle
across the rest of the OS.

01:07:07.266 --> 01:07:12.966 A:middle
You saw earlier how your
app can propagate virally

01:07:13.536 --> 01:07:16.566 A:middle
through messages, and
we're making it really easy

01:07:16.566 --> 01:07:19.976 A:middle
to tell people about your
application right here

01:07:20.006 --> 01:07:20.906 A:middle
from the home screen.

01:07:22.566 --> 01:07:25.596 A:middle
We've added a new Share button
to the Quick Actions List.

01:07:26.366 --> 01:07:27.806 A:middle
This brings up the Share Sheet,

01:07:28.186 --> 01:07:31.246 A:middle
and so now you can Tweet your
application to the whole world,

01:07:31.246 --> 01:07:33.836 A:middle
and this is available for
free in every application.

01:07:36.356 --> 01:07:39.806 A:middle
Now, we have a lot of ways
that we try to get users

01:07:40.016 --> 01:07:42.446 A:middle
into the right app at
just the right time.

01:07:42.556 --> 01:07:45.346 A:middle
I'm going to move through them
quickly, so bear with me here.

01:07:47.556 --> 01:07:51.556 A:middle
Handoff lets you carry on a
task from one device to another.

01:07:52.306 --> 01:07:55.616 A:middle
Spotlight can link directly
to your application content.

01:07:56.006 --> 01:07:59.436 A:middle
A Universal Link will take you
to the most appropriate place

01:07:59.436 --> 01:08:02.066 A:middle
for a platform, and
you can link directly


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:07:59.436 --> 01:08:02.066 A:middle
for a platform, and
you can link directly

01:08:02.066 --> 01:08:04.846 A:middle
from one application to another.

01:08:05.606 --> 01:08:09.466 A:middle
Siri will suggest apps here in
Today view and in Spotlight.

01:08:09.926 --> 01:08:12.256 A:middle
We can suggest an app
at just the right time

01:08:12.516 --> 01:08:14.786 A:middle
in the App Switcher
on the lock screen.

01:08:15.356 --> 01:08:17.956 A:middle
We can connect apps based
on common data types

01:08:18.036 --> 01:08:21.345 A:middle
like this and this and this.

01:08:22.336 --> 01:08:23.656 A:middle
Well, I think you get the idea.

01:08:24.216 --> 01:08:27.046 A:middle
There's only one thing I really
want you to take away from all

01:08:27.046 --> 01:08:31.506 A:middle
of this, which is that
NSUserActivity is your gateway

01:08:31.506 --> 01:08:33.316 A:middle
to a whole ton of functionality.

01:08:34.196 --> 01:08:38.036 A:middle
It's how your application tells
the OS what people are doing

01:08:38.036 --> 01:08:40.086 A:middle
in your app, and that allows us

01:08:40.086 --> 01:08:43.095 A:middle
to create intelligent
suggestions and connections

01:08:43.156 --> 01:08:44.736 A:middle
between your applications.

01:08:45.906 --> 01:08:49.935 A:middle
And in iOS X, we're adding two
important pieces of information.

01:08:51.446 --> 01:08:55.136 A:middle
Now, many apps use addresses
in a variety of ways,

01:08:55.486 --> 01:08:57.666 A:middle
and we can use that
to make connections

01:08:57.876 --> 01:08:59.466 A:middle
between your applications.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:09:00.216 --> 01:09:02.536 A:middle
Let me illustrate
with an example.

01:09:03.796 --> 01:09:05.185 A:middle
This is the Yelp page for one

01:09:05.185 --> 01:09:08.156 A:middle
of my favorite restaurants
in San Francisco.

01:09:08.916 --> 01:09:11.586 A:middle
Now, suppose it were to
provide an NSUserActivity

01:09:11.996 --> 01:09:13.975 A:middle
with this address on it.

01:09:14.136 --> 01:09:15.515 A:middle
That would allow me to do things

01:09:15.515 --> 01:09:18.916 A:middle
like asking Siri to
just take me here.

01:09:20.386 --> 01:09:23.376 A:middle
My phone knows that I use
Uber a lot to get around,

01:09:23.506 --> 01:09:25.656 A:middle
and it can make it
really easy for me

01:09:25.656 --> 01:09:28.566 A:middle
to order a ride directly
to the restaurant.

01:09:29.426 --> 01:09:33.595 A:middle
Or when I'm typing in a text
field that's expecting location

01:09:33.595 --> 01:09:37.666 A:middle
data, QuickType can suggest an
address that I was just looking

01:09:37.666 --> 01:09:42.866 A:middle
at and Maps can include that in
its list of suggestions along

01:09:42.866 --> 01:09:45.895 A:middle
with a quick way of getting
back into the application.

01:09:48.095 --> 01:09:51.116 A:middle
Now, we also interact with
people in a variety of ways,

01:09:51.116 --> 01:09:54.966 A:middle
and the OS can learn which
app I use to communicate

01:09:55.086 --> 01:09:56.276 A:middle
with any given person.

01:09:57.196 --> 01:09:58.856 A:middle
To do this, your app needs

01:09:58.856 --> 01:10:00.726 A:middle
to give us three
pieces of information.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:09:58.856 --> 01:10:00.726 A:middle
to give us three
pieces of information.

01:10:01.576 --> 01:10:03.976 A:middle
Enough context so that
we can find an entry

01:10:04.106 --> 01:10:07.636 A:middle
in the address book for this
person, the kind of service

01:10:07.636 --> 01:10:11.436 A:middle
that you're providing, that's a
messages or video chat platform,

01:10:11.796 --> 01:10:14.356 A:middle
and the specific
identifier or handle

01:10:14.526 --> 01:10:17.756 A:middle
that you'll use for this person.

01:10:18.136 --> 01:10:20.416 A:middle
Now, this is the new
Address Book card,

01:10:20.506 --> 01:10:23.866 A:middle
which we're making available a
lot more prominently throughout

01:10:24.426 --> 01:10:26.836 A:middle
the OS, and you'll notice that
we can automatically include

01:10:26.836 --> 01:10:30.186 A:middle
in here information that we
learned from your applications.

01:10:31.646 --> 01:10:35.406 A:middle
Now, when I tap on one of these
new Quick Communication buttons

01:10:35.526 --> 01:10:38.866 A:middle
at the top of the card, we
can also include your app

01:10:39.116 --> 01:10:40.516 A:middle
in the list of options.

01:10:41.326 --> 01:10:44.726 A:middle
When I make my choice,
we'll remember that so

01:10:44.726 --> 01:10:47.176 A:middle
that the next time
when I tap this button,

01:10:47.766 --> 01:10:50.426 A:middle
we can take you straight
into the application.

01:10:51.286 --> 01:10:54.706 A:middle
I should point out that all
of this learning is private

01:10:54.706 --> 01:10:57.826 A:middle
to the user and accessible
only on their devices.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:11:00.676 --> 01:11:04.576 A:middle
Now, we deeply believe
that integrating your apps

01:11:04.576 --> 01:11:09.396 A:middle
across the OS makes for a
much richer user experience.

01:11:10.196 --> 01:11:12.366 A:middle
Extensions, of course,
are how you do that,

01:11:12.366 --> 01:11:15.296 A:middle
and you've heard earlier
about the new iMessage Apps,

01:11:15.496 --> 01:11:17.766 A:middle
Maps extensions, and SiriKit.

01:11:19.136 --> 01:11:20.426 A:middle
Well, I'd like to
tell you a little bit

01:11:20.426 --> 01:11:24.186 A:middle
about two extension points that
we're adding to Notifications.

01:11:25.766 --> 01:11:29.246 A:middle
A service extension runs in
the background and allows you

01:11:29.246 --> 01:11:33.266 A:middle
to modify the push payload
before we show the notification

01:11:33.266 --> 01:11:33.976 A:middle
to the user.

01:11:34.766 --> 01:11:38.416 A:middle
It lets you do things like
downloading an image, a video,

01:11:38.416 --> 01:11:40.406 A:middle
or an audio file
in the background

01:11:40.716 --> 01:11:43.206 A:middle
and embedding it directly
in the notification.

01:11:44.236 --> 01:11:48.426 A:middle
Or you could encrypt your
push payload on your server

01:11:48.526 --> 01:11:52.086 A:middle
and use a service extension to
decrypt it locally on device,

01:11:52.626 --> 01:11:55.176 A:middle
providing for full
end-to-end encryption.

01:11:56.516 --> 01:11:59.096 A:middle
[ Applause ]

01:11:59.596 --> 01:12:01.146 A:middle
Now, I should point
out you may want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:11:59.596 --> 01:12:01.146 A:middle
Now, I should point
out you may want

01:12:01.146 --> 01:12:02.716 A:middle
to use something
a little stronger

01:12:02.716 --> 01:12:05.516 A:middle
than the ROT13 algorithm
that we're proposing here.

01:12:06.066 --> 01:12:08.386 A:middle
We're going to double
ROT13 it next year

01:12:08.446 --> 01:12:09.546 A:middle
for extra security [laughter].

01:12:14.166 --> 01:12:18.736 A:middle
Now, if you want an even
richer user experience,

01:12:19.186 --> 01:12:23.226 A:middle
a content extension can provide
an arbitrary view that we'll use

01:12:23.226 --> 01:12:25.516 A:middle
for the expanded look
of a notification.

01:12:26.236 --> 01:12:27.906 A:middle
This lets you provide a dynamic

01:12:27.906 --> 01:12:31.116 A:middle
and interactive experience
that's really tailored

01:12:31.116 --> 01:12:32.236 A:middle
to your application.

01:12:35.496 --> 01:12:38.826 A:middle
This morning, you got a quick
tour of the revamped Today view

01:12:38.996 --> 01:12:41.466 A:middle
with its vibrant,
new look for widgets.

01:12:41.856 --> 01:12:45.106 A:middle
Now, a widget can still
be any size you want

01:12:45.156 --> 01:12:48.696 A:middle
within reasonable limits,
but we're also adding a new,

01:12:48.696 --> 01:12:53.236 A:middle
compact, fixed size to optimize
for better information density.

01:12:53.776 --> 01:12:55.926 A:middle
And the thing that
we're really excited

01:12:55.926 --> 01:12:59.276 A:middle
about is making these
widgets available right here

01:12:59.276 --> 01:13:00.246 A:middle
from the home screen.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:12:59.276 --> 01:13:00.246 A:middle
from the home screen.

01:13:00.956 --> 01:13:02.436 A:middle
I'm going to tell you
what you need to do

01:13:02.436 --> 01:13:05.176 A:middle
to get this functionality
in your widgets.

01:13:06.136 --> 01:13:09.346 A:middle
The first thing you want to do
is probably update your look

01:13:09.346 --> 01:13:11.206 A:middle
and support the new compact size

01:13:11.206 --> 01:13:12.926 A:middle
so that your widget
doesn't look too funny.

01:13:14.116 --> 01:13:19.246 A:middle
You need to build with the
iOS X SDK, and that's it.

01:13:19.426 --> 01:13:22.626 A:middle
Nothing else has changed about
how you build your widgets.

01:13:23.086 --> 01:13:25.326 A:middle
You just get this new
functionality for free,

01:13:25.616 --> 01:13:26.936 A:middle
and so we're really excited.

01:13:26.936 --> 01:13:29.226 A:middle
We think this is going to
open up a whole new dimension

01:13:29.726 --> 01:13:30.946 A:middle
into your application.

01:13:33.156 --> 01:13:35.896 A:middle
Okay, let's switch gears
now and talk about the Mac.

01:13:37.446 --> 01:13:41.816 A:middle
So Mac OS Sierra is adding full
support for localizing your apps

01:13:42.206 --> 01:13:46.206 A:middle
in right-to-left languages,
including reversing UI elements

01:13:46.206 --> 01:13:47.756 A:middle
in places where that
makes sense.

01:13:49.166 --> 01:13:52.446 A:middle
The Mac now joins
with iOS and watchOS,

01:13:52.446 --> 01:13:56.156 A:middle
which quietly introduced support
for this earlier in the year.

01:13:57.056 --> 01:14:00.886 A:middle
And with so many potential
customers all over the world,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:13:57.056 --> 01:14:00.886 A:middle
And with so many potential
customers all over the world,

01:14:01.126 --> 01:14:03.826 A:middle
it's really more important
now than ever before

01:14:03.996 --> 01:14:07.376 A:middle
that your app be properly
localized and internationalized.

01:14:07.916 --> 01:14:09.646 A:middle
And you can learn
more about that here.

01:14:12.536 --> 01:14:15.316 A:middle
Now, you know, when Sebastien
first started talking about tabs

01:14:15.316 --> 01:14:17.336 A:middle
versus spaces, we were
pretty sure this was

01:14:17.366 --> 01:14:18.306 A:middle
where he was going.

01:14:19.416 --> 01:14:22.396 A:middle
You saw this morning how
people can gather together all

01:14:22.396 --> 01:14:25.176 A:middle
of their windows into
a single tabbed UI.

01:14:26.246 --> 01:14:29.906 A:middle
AppKit will take care of pretty
much everything here for you

01:14:29.906 --> 01:14:32.656 A:middle
and it's smart enough not to
pair your preferences windows

01:14:32.656 --> 01:14:35.686 A:middle
with your document windows,
and so on and so forth.

01:14:36.236 --> 01:14:38.256 A:middle
And in fact, if you're
using NSDocument,

01:14:38.256 --> 01:14:40.856 A:middle
there really is nothing
else that you need

01:14:40.856 --> 01:14:42.176 A:middle
to do in your application.

01:14:43.216 --> 01:14:45.956 A:middle
If you're not using
NSDocument, there's a little bit

01:14:45.956 --> 01:14:48.776 A:middle
of API you need to adopt to
support creating a new tab,

01:14:49.246 --> 01:14:51.106 A:middle
but I'd really encourage
you to take a look

01:14:51.106 --> 01:14:54.696 A:middle
at whether NSDocument isn't
appropriate for your use case.

01:14:55.896 --> 01:14:59.476 A:middle
You see, we also showed you this
morning how we're making it easy

01:14:59.476 --> 01:15:01.736 A:middle
for people to move their
documents and their data


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:14:59.476 --> 01:15:01.736 A:middle
for people to move their
documents and their data

01:15:02.246 --> 01:15:04.376 A:middle
into the cloud, and
we really believe

01:15:04.376 --> 01:15:06.906 A:middle
that this is the
future of file storage.

01:15:07.866 --> 01:15:12.276 A:middle
So it's super important that
your app adopt best practices

01:15:12.726 --> 01:15:15.856 A:middle
in terms of file
coordination and metadata query.

01:15:16.716 --> 01:15:20.586 A:middle
And here too if you're using
NSDocument, it will take care

01:15:20.586 --> 01:15:22.916 A:middle
of pretty much all the
heavy lifting for you,

01:15:23.126 --> 01:15:27.186 A:middle
along with UIDocument
as counterpart on iOS.

01:15:29.076 --> 01:15:32.016 A:middle
Now, I have an important
update for you about iCloud.

01:15:33.296 --> 01:15:35.016 A:middle
As you know, the iCloud
APIs are available on all

01:15:35.016 --> 01:15:39.006 A:middle
of our platforms,
but on the Mac,

01:15:39.576 --> 01:15:42.906 A:middle
use of these APIs has
been restricted just

01:15:42.906 --> 01:15:45.856 A:middle
to those apps distributed
via the Mac App Store.

01:15:46.866 --> 01:15:50.646 A:middle
Well, in Mac OS Sierra, we're
removing that restriction.

01:15:51.516 --> 01:15:57.776 A:middle
[ Applause ]

01:15:58.276 --> 01:15:59.806 A:middle
Now, your app still
needs to be signed

01:15:59.806 --> 01:16:02.856 A:middle
with a valid developer ID, which
by the way, will also get rid


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:15:59.806 --> 01:16:02.856 A:middle
with a valid developer ID, which
by the way, will also get rid

01:16:02.856 --> 01:16:05.546 A:middle
of those pesky, untrusted
developer alerts.

01:16:06.116 --> 01:16:08.536 A:middle
But once you've done
that, you can use all

01:16:08.536 --> 01:16:11.096 A:middle
of these API no matter how
you distribute your app

01:16:11.246 --> 01:16:12.286 A:middle
to your customers.

01:16:15.096 --> 01:16:16.376 A:middle
Next, CloudKit.

01:16:17.526 --> 01:16:20.806 A:middle
We introduced CloudKit two years
ago, and it's the foundation

01:16:20.806 --> 01:16:24.426 A:middle
that we use for building all
of our new cloud services.

01:16:25.216 --> 01:16:28.096 A:middle
Now, it has a fairly
coarse-grained permission model.

01:16:28.826 --> 01:16:32.116 A:middle
Either your data could
be accessed by everybody

01:16:32.116 --> 01:16:36.246 A:middle
in the world or it's restricted
to just a single user.

01:16:37.456 --> 01:16:40.616 A:middle
Well, the new CloudKit
sharing feature opens that up

01:16:40.616 --> 01:16:42.626 A:middle
and gives your app
explicit control

01:16:42.626 --> 01:16:44.386 A:middle
over who can access your data.

01:16:45.516 --> 01:16:50.626 A:middle
[ Applause ]

01:16:51.126 --> 01:16:56.856 A:middle
The new CKShare class gives
you a, governs the permissions,

01:16:56.856 --> 01:16:59.096 A:middle
who can read and write
a given set of records,

01:16:59.196 --> 01:17:02.866 A:middle
and this API is available
on all of our platforms.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:16:59.196 --> 01:17:02.866 A:middle
and this API is available
on all of our platforms.

01:17:04.106 --> 01:17:08.016 A:middle
On the Mac and on iOS,
we're providing standard UI

01:17:08.016 --> 01:17:11.696 A:middle
for taking care of the
mechanics of inviting people

01:17:11.696 --> 01:17:14.286 A:middle
and managing people
in your application.

01:17:15.686 --> 01:17:19.626 A:middle
We use CloudKit sharing for
the new collaboration features

01:17:19.666 --> 01:17:22.776 A:middle
that we've built into Notes,
and I encourage you to check it

01:17:22.776 --> 01:17:24.686 A:middle
out in the developer
preview today.

01:17:26.346 --> 01:17:27.926 A:middle
With that, I'd like to hand off

01:17:27.976 --> 01:17:28.576 A:middle
to Josh Shaffer [assumed
spelling],

01:17:28.576 --> 01:17:30.756 A:middle
who's going to give you
some updates on watchOS.

01:17:31.166 --> 01:17:31.546 A:middle
Thank you.

01:17:32.516 --> 01:17:37.776 A:middle
[ Applause ]

01:17:38.276 --> 01:17:38.866 A:middle
&gt;&gt; Thanks, Toby.

01:17:40.236 --> 01:17:44.076 A:middle
As you heard in the keynote,
watchOS 3 simplifies navigation

01:17:44.076 --> 01:17:45.616 A:middle
and optimizes performance.

01:17:46.816 --> 01:17:49.596 A:middle
These improvements go
beyond just the system level

01:17:49.746 --> 01:17:52.156 A:middle
and include many enhancements
to the apps as well.

01:17:53.526 --> 01:17:54.786 A:middle
These enhancements focus

01:17:54.856 --> 01:17:57.436 A:middle
on three key qualities
for Watch apps.

01:17:58.066 --> 01:18:00.416 A:middle
The first is that
they be glanceable.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:17:58.066 --> 01:18:00.416 A:middle
The first is that
they be glanceable.

01:18:01.246 --> 01:18:03.916 A:middle
Individual interactions
with Apple Watch are short,

01:18:04.456 --> 01:18:06.486 A:middle
so it's important to
present well-designed,

01:18:06.716 --> 01:18:09.506 A:middle
simple information to
the user, focusing just

01:18:09.506 --> 01:18:13.316 A:middle
on what's most relevant to make
sure that it's easy to digest.

01:18:14.686 --> 01:18:16.366 A:middle
The second is that
they be actionable.

01:18:16.366 --> 01:18:19.156 A:middle
Now, this includes
simplifying access

01:18:19.156 --> 01:18:21.556 A:middle
to the most common actions
taken on the watch itself.

01:18:22.486 --> 01:18:25.146 A:middle
For example, we've
redesigned the Fitness app

01:18:25.146 --> 01:18:27.696 A:middle
to reduce the number of steps
necessary to start a workout.

01:18:28.926 --> 01:18:32.226 A:middle
It also means simplifying
access to key information

01:18:32.226 --> 01:18:34.596 A:middle
that your users will
want to act on even

01:18:34.596 --> 01:18:36.626 A:middle
if they won't take the
action on the watch itself.

01:18:36.626 --> 01:18:41.076 A:middle
And the third is ensuring that
your apps remain responsive

01:18:41.436 --> 01:18:43.526 A:middle
by keeping them up to
date and ready to act

01:18:43.526 --> 01:18:44.746 A:middle
as soon as they're needed.

01:18:47.756 --> 01:18:48.586 A:middle
Sure, thanks [laughs].

01:18:48.946 --> 01:18:53.656 A:middle
I agree. Okay, so when you think
about an app, the first thing

01:18:53.656 --> 01:18:56.516 A:middle
that may come to mind is an app
that takes up the full screen.

01:18:56.516 --> 01:18:59.786 A:middle
Now, that's definitely part
of it, but on Apple Watch,

01:18:59.786 --> 01:19:02.236 A:middle
it's important to keep in
mind that your app has access


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:18:59.786 --> 01:19:02.236 A:middle
it's important to keep in
mind that your app has access

01:19:02.306 --> 01:19:04.846 A:middle
to two other great
interfaces in the form

01:19:04.846 --> 01:19:06.916 A:middle
of complications
and notifications.

01:19:08.046 --> 01:19:11.016 A:middle
So these three interfaces are
just three different views

01:19:11.016 --> 01:19:13.396 A:middle
into your one app,
so it's important

01:19:13.396 --> 01:19:15.116 A:middle
that they present
consistent information.

01:19:15.906 --> 01:19:18.536 A:middle
When you update any one of
them, you'll want to update all

01:19:18.536 --> 01:19:20.496 A:middle
of them because if they're
displaying different

01:19:20.496 --> 01:19:23.906 A:middle
information, then your users
won't trust any of them.

01:19:24.706 --> 01:19:27.266 A:middle
Now, you may remember
that in watchOS 2,

01:19:27.266 --> 01:19:28.866 A:middle
there was a fourth
interface called Glances.

01:19:29.956 --> 01:19:33.236 A:middle
Glances provided
simple access to the,

01:19:33.236 --> 01:19:35.236 A:middle
a summary of your
favorite apps' information.

01:19:36.416 --> 01:19:39.926 A:middle
In watchOS 3, this functionality
is now provided by the new Dock

01:19:39.926 --> 01:19:42.616 A:middle
and is instantly
accessible from anywhere

01:19:42.616 --> 01:19:44.526 A:middle
with just a press
of the side button.

01:19:45.746 --> 01:19:48.226 A:middle
If your watchOS 2 app
included a Glance,

01:19:48.436 --> 01:19:51.786 A:middle
that separate interface is no
longer necessary in watchOS 3,

01:19:52.236 --> 01:19:55.466 A:middle
but its simple design can help
you update the primary interface

01:19:55.466 --> 01:19:57.786 A:middle
for your application to
make sure that it looks

01:19:57.786 --> 01:20:00.106 A:middle
and works great when
viewed from the Dock.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:19:57.786 --> 01:20:00.106 A:middle
and works great when
viewed from the Dock.

01:20:01.526 --> 01:20:04.936 A:middle
Apps in the Dock are instantly
responsive, helping to make sure

01:20:04.936 --> 01:20:07.976 A:middle
that the most common tasks taken
on the watch can be accomplished

01:20:08.076 --> 01:20:09.936 A:middle
in just a couple of seconds.

01:20:10.426 --> 01:20:13.206 A:middle
Now, that's obviously a very
short time, but striving

01:20:13.266 --> 01:20:15.016 A:middle
for it can be a great guide

01:20:15.056 --> 01:20:18.186 A:middle
in helping you design the
top-level features of your apps

01:20:18.186 --> 01:20:20.856 A:middle
to make sure that they work
really well on Apple Watch.

01:20:22.616 --> 01:20:24.546 A:middle
While each individual
interaction is short,

01:20:24.926 --> 01:20:26.746 A:middle
some apps may be
used multiple times

01:20:26.866 --> 01:20:28.256 A:middle
over a longer period of time.

01:20:29.106 --> 01:20:30.746 A:middle
For example, I may refer back

01:20:30.746 --> 01:20:33.216 A:middle
to my shopping list many
times while I'm at the store.

01:20:34.416 --> 01:20:36.696 A:middle
In watchOS 3, each
time I raise my wrist,

01:20:36.696 --> 01:20:39.576 A:middle
I can instantly see the
items I still need to get

01:20:39.576 --> 01:20:41.696 A:middle
and check off the ones
I've already picked up.

01:20:42.386 --> 01:20:44.816 A:middle
It's now really easy to design
apps that have this kind

01:20:44.816 --> 01:20:47.896 A:middle
of interaction model because
watchOS 3 will return you

01:20:47.896 --> 01:20:50.876 A:middle
to the last app that you were
using for up to 8 minutes

01:20:50.976 --> 01:20:52.206 A:middle
after you last used it.

01:20:52.996 --> 01:20:53.966 A:middle
Once you're done using it,

01:20:53.966 --> 01:20:54.996 A:middle
you'll be returned
to the watch face.

01:20:56.516 --> 01:21:01.576 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:20:56.516 --> 01:21:01.576 A:middle
[ Applause ]

01:21:02.076 --> 01:21:03.286 A:middle
When your app's not in use,

01:21:03.336 --> 01:21:05.906 A:middle
ensuring that it stays
responsive means keeping it

01:21:05.906 --> 01:21:07.756 A:middle
up to date in the
background so that it's ready

01:21:07.756 --> 01:21:09.516 A:middle
when you do want to use it.

01:21:10.096 --> 01:21:11.336 A:middle
To make this really easy,

01:21:11.436 --> 01:21:13.586 A:middle
watchOS 3 includes
a brand new set

01:21:13.586 --> 01:21:16.026 A:middle
of Background App Refresh APIs.

01:21:16.386 --> 01:21:18.386 A:middle
Background App Refresh
is a critical part

01:21:18.386 --> 01:21:20.656 A:middle
of building responsive
watchOS applications,

01:21:21.236 --> 01:21:22.836 A:middle
and periodically
updating your app

01:21:22.836 --> 01:21:25.796 A:middle
in the background can be a great
enhancement no matter what type

01:21:25.796 --> 01:21:26.556 A:middle
of app you're building.

01:21:27.466 --> 01:21:30.336 A:middle
Now, if you're building a
fitness app, for these types

01:21:30.336 --> 01:21:32.586 A:middle
of apps, it's even more
important that they remain

01:21:32.586 --> 01:21:35.306 A:middle
up to date for the entire
duration of the workout,

01:21:35.386 --> 01:21:37.836 A:middle
so we have some additional
enhancements just for them.

01:21:39.176 --> 01:21:42.566 A:middle
During a workout session, these
apps will now run continually

01:21:42.566 --> 01:21:44.776 A:middle
in the background even
while the screen is off,

01:21:45.286 --> 01:21:47.186 A:middle
ensuring that they can
monitor workout progress

01:21:47.216 --> 01:21:48.916 A:middle
and provide updates to the user

01:21:48.916 --> 01:21:53.356 A:middle
when they reach key
milestones using haptics.

01:21:53.946 --> 01:21:57.076 A:middle
During the workout, they also
remain instantly available even

01:21:57.076 --> 01:21:59.226 A:middle
if you switch to another
app to perform another task.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:22:00.016 --> 01:22:02.546 A:middle
So if I jump out to the Music
app to change the current track,

01:22:02.756 --> 01:22:04.306 A:middle
after I've dropped my wrist,

01:22:04.306 --> 01:22:07.026 A:middle
I'll very shortly be
returned back to my workout.

01:22:07.766 --> 01:22:09.936 A:middle
We've also enhanced the
access to the heart rate

01:22:09.936 --> 01:22:11.186 A:middle
and accelerometer sensors

01:22:11.186 --> 01:22:13.326 A:middle
so that they now
provide continuous values

01:22:13.696 --> 01:22:15.576 A:middle
for the entire duration
of the workout as well.

01:22:16.516 --> 01:22:20.586 A:middle
[ Applause ]

01:22:21.086 --> 01:22:22.366 A:middle
In addition to these
sensor enhancements,

01:22:22.366 --> 01:22:25.706 A:middle
we've also got a whole bunch of
great, new hardware access APIs.

01:22:26.066 --> 01:22:28.666 A:middle
Crown events give you raw
access to rotation events

01:22:28.666 --> 01:22:29.546 A:middle
from the Digital Crown.

01:22:30.566 --> 01:22:32.546 A:middle
Gesture recognizers
make it really easy

01:22:32.546 --> 01:22:36.006 A:middle
to add custom tap interactions
to your apps, touch interactions

01:22:36.006 --> 01:22:39.046 A:middle
such as tap, swipe,
and pan, and of course,

01:22:39.046 --> 01:22:40.796 A:middle
the gyroscope is
now also accessible

01:22:40.796 --> 01:22:42.166 A:middle
in addition to the
accelerometer.

01:22:43.516 --> 01:22:46.546 A:middle
[ Applause ]

01:22:47.046 --> 01:22:48.936 A:middle
To make sure that you can do
really cool things with all

01:22:48.936 --> 01:22:51.546 A:middle
of these hardware access APIs,
we've also brought a bunch

01:22:51.546 --> 01:22:53.506 A:middle
of graphics and media
frameworks to the watchOS SDK.

01:22:53.506 --> 01:22:57.356 A:middle
SpriteKit and SceneKit give
you a ton of flexibility

01:22:57.496 --> 01:22:59.796 A:middle
to enhance the visuals
of your applications


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:23:00.266 --> 01:23:01.976 A:middle
and also your notifications.

01:23:02.986 --> 01:23:05.386 A:middle
AV Foundation makes it
really easy to play sounds

01:23:05.386 --> 01:23:07.716 A:middle
out of the watch
speaker, and in the spirit

01:23:07.716 --> 01:23:09.286 A:middle
of simplifying navigation
in your apps,

01:23:09.556 --> 01:23:11.686 A:middle
you can now play
video back inline

01:23:11.686 --> 01:23:13.416 A:middle
in your application
interfaces as well [applause].

01:23:16.436 --> 01:23:18.646 A:middle
Of course, you also
often need to get data on

01:23:18.646 --> 01:23:20.826 A:middle
and off the watch, and
to help make that easier,

01:23:20.826 --> 01:23:23.836 A:middle
as Toby mentioned, CloudKit is
now part of the watchOS SDK.

01:23:23.836 --> 01:23:28.426 A:middle
Because it's built on top of
NSURL session, it works even

01:23:28.426 --> 01:23:29.466 A:middle
when your phone's not present

01:23:29.466 --> 01:23:31.556 A:middle
and your watch is near
a known Wi-Fi network.

01:23:32.686 --> 01:23:35.916 A:middle
Apple Watch is already a great
way to pay for physical goods

01:23:35.916 --> 01:23:39.946 A:middle
in stores, and in watchOS 3,
you can now offer physical goods

01:23:39.946 --> 01:23:42.666 A:middle
for sale within your
own apps to be purchased

01:23:42.666 --> 01:23:44.616 A:middle
with just a double-tap
of the side button.

01:23:46.046 --> 01:23:48.796 A:middle
Building a great watch app
is just the first step.

01:23:48.796 --> 01:23:50.966 A:middle
It's also important that
you make it easy for users

01:23:50.966 --> 01:23:52.966 A:middle
to discover and install
your apps.

01:23:52.966 --> 01:23:56.106 A:middle
And to help you with that,
the new watch face gallery

01:23:56.106 --> 01:23:59.406 A:middle
in iOS X includes an
entire section devoted just

01:23:59.406 --> 01:24:00.756 A:middle
to displaying all of your apps.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:23:59.406 --> 01:24:00.756 A:middle
to displaying all of your apps.

01:24:02.086 --> 01:24:03.596 A:middle
With just a few simple steps,

01:24:03.596 --> 01:24:06.376 A:middle
you can create a complication
bundle which enables your app

01:24:06.376 --> 01:24:07.836 A:middle
to appear in the
watch face gallery.

01:24:08.736 --> 01:24:11.146 A:middle
It's the first thing that
a new watch owner will see

01:24:11.286 --> 01:24:12.426 A:middle
after they've paired
their watch,

01:24:12.836 --> 01:24:14.376 A:middle
and it displays the
complications

01:24:14.376 --> 01:24:15.886 A:middle
from all their favorite
apps that they use

01:24:15.886 --> 01:24:17.696 A:middle
on their iPhone every day.

01:24:18.106 --> 01:24:21.206 A:middle
This makes it really easy for
them to get their apps installed

01:24:21.206 --> 01:24:22.956 A:middle
and added right to
their watch face.

01:24:24.276 --> 01:24:25.376 A:middle
We've been working really hard

01:24:25.376 --> 01:24:27.956 A:middle
to give you all the tools you
need to build great, glanceable,

01:24:27.956 --> 01:24:31.036 A:middle
actionable, and responsive
apps, and we can't wait

01:24:31.036 --> 01:24:32.276 A:middle
to see what you're
going to do with them.

01:24:32.726 --> 01:24:33.606 A:middle
To give you some ideas

01:24:33.606 --> 01:24:35.936 A:middle
of how this can help
enhance your apps on watchOS.

01:24:36.006 --> 01:24:38.046 A:middle
Eliza Block will now come
up and give us a demo

01:24:38.046 --> 01:24:41.296 A:middle
of Background App Refresh and
some of the new graphics APIs.

01:24:41.406 --> 01:24:41.796 A:middle
Eliza?

01:24:42.516 --> 01:24:47.166 A:middle
[ Applause ]

01:24:47.666 --> 01:24:50.796 A:middle
&gt;&gt; Hi. So I have here an
application that I built

01:24:50.796 --> 01:24:54.326 A:middle
for watchOS 2, which shows
Max the panda, my friend,

01:24:54.566 --> 01:24:58.796 A:middle
and it tells me what his
mood is at different times.

01:24:59.406 --> 01:25:01.896 A:middle
So right now, you can
see that he's happy.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:24:59.406 --> 01:25:01.896 A:middle
So right now, you can
see that he's happy.

01:25:02.416 --> 01:25:03.616 A:middle
If I now suspend the app,

01:25:04.696 --> 01:25:07.366 A:middle
you can see that I have a
complication also telling me

01:25:07.366 --> 01:25:11.176 A:middle
that he's happy, but here is
a notification that tells me

01:25:11.176 --> 01:25:12.786 A:middle
that suddenly Max
has become hungry.

01:25:13.636 --> 01:25:17.066 A:middle
Now, this app for watchOS
2 has a few problems

01:25:17.066 --> 01:25:18.066 A:middle
which I'm going to show you now.

01:25:18.526 --> 01:25:20.936 A:middle
The first is that when I
dismiss the notification,

01:25:21.456 --> 01:25:24.046 A:middle
my complication has not
updated to reflect the fact

01:25:24.256 --> 01:25:25.306 A:middle
that Max is now hungry.

01:25:26.556 --> 01:25:31.136 A:middle
And even worse, when I go
into the Dock, the snapshot

01:25:31.136 --> 01:25:34.886 A:middle
of the app in the Dock also
has not updated, so I'm failing

01:25:34.886 --> 01:25:38.146 A:middle
to show a unified set of data

01:25:38.566 --> 01:25:42.656 A:middle
across all the interfaces
to my app.

01:25:42.886 --> 01:25:46.026 A:middle
So going now to the code,
there's a really easy way new

01:25:46.026 --> 01:25:48.326 A:middle
in watchOS 3 to address
these issues.

01:25:49.866 --> 01:25:52.636 A:middle
In my extension delegate, I
have a single funnel point,

01:25:52.856 --> 01:25:55.806 A:middle
Handle Background Tasks,
which is the perfect place

01:25:55.886 --> 01:25:58.346 A:middle
to update all of these
interfaces as my data changes.

01:25:59.536 --> 01:26:01.946 A:middle
Here in my Snapshot
Refresh background task,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:25:59.536 --> 01:26:01.946 A:middle
Here in my Snapshot
Refresh background task,

01:26:02.176 --> 01:26:03.776 A:middle
I'm going to add just
two lines of code

01:26:03.776 --> 01:26:05.096 A:middle
to address both of
these problems.

01:26:05.556 --> 01:26:07.666 A:middle
The first is to update
my interface

01:26:08.636 --> 01:26:12.436 A:middle
for my current friend's
status, and second,

01:26:12.436 --> 01:26:16.916 A:middle
I'm going to also reload
my complication as well

01:26:16.916 --> 01:26:19.446 A:middle
when the snapshot is taken.

01:26:19.446 --> 01:26:21.936 A:middle
Okay, so that should address
the problems that we saw.

01:26:22.256 --> 01:26:23.406 A:middle
But while we're in here,

01:26:23.406 --> 01:26:27.266 A:middle
let me make this app a little
bit more fun because as you saw,

01:26:27.266 --> 01:26:30.206 A:middle
Max was kind of just a
static image in watchOS 2.

01:26:30.566 --> 01:26:34.696 A:middle
But in watchOS 3, we can
incorporate a SceneKit scene

01:26:34.926 --> 01:26:36.216 A:middle
to make some animation happen.

01:26:37.536 --> 01:26:39.816 A:middle
So I'm going to switch
over here to my interface,

01:26:40.306 --> 01:26:42.046 A:middle
and here's my application
interface.

01:26:42.046 --> 01:26:47.976 A:middle
I'm going to delete the image
and drag in a SceneKit scene.

01:26:51.116 --> 01:26:54.056 A:middle
Now, I wrote a tiny bit
of code earlier just

01:26:54.056 --> 01:26:57.416 A:middle
to populate this scene
with some SceneKit assets

01:26:57.416 --> 01:26:59.676 A:middle
and to make an outlet, which
I'll connect right now.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:27:00.636 --> 01:27:04.196 A:middle
Drag it into my SceneKit
interface.

01:27:05.706 --> 01:27:08.276 A:middle
Now, not only can you
add a SceneKit scene

01:27:08.276 --> 01:27:11.026 A:middle
to your application itself,
but you can also add one

01:27:11.026 --> 01:27:13.696 A:middle
to the notification, which
will be a lot more fun

01:27:13.766 --> 01:27:15.286 A:middle
than a text-based notification.

01:27:15.966 --> 01:27:17.776 A:middle
I'm going to drag one
into there as well.

01:27:17.776 --> 01:27:21.266 A:middle
I need to resize
this a little bit.

01:27:22.496 --> 01:27:24.446 A:middle
Hook it up to the outlet.

01:27:29.566 --> 01:27:31.396 A:middle
All right, and with those
changes, I'm going to go ahead

01:27:31.396 --> 01:27:32.486 A:middle
and run this application again,

01:27:32.596 --> 01:27:35.496 A:middle
and we'll hopefully see
something a little bit more

01:27:35.496 --> 01:27:36.566 A:middle
dynamic this time.

01:27:46.346 --> 01:27:48.506 A:middle
So here we have a much
happier looking version

01:27:48.506 --> 01:27:53.226 A:middle
of Max running around, and when
I now suspend the application,

01:27:54.266 --> 01:27:55.666 A:middle
wait for him to get hungry.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:28:00.226 --> 01:28:02.876 A:middle
We see a really sad,
more convincing version

01:28:03.046 --> 01:28:04.656 A:middle
of Max rubbing his tummy.

01:28:05.516 --> 01:28:08.606 A:middle
[ Applause ]

01:28:09.106 --> 01:28:10.596 A:middle
So I think this is
a lot more fun.

01:28:10.596 --> 01:28:14.376 A:middle
When I dismiss the notification,
my complication has updated

01:28:14.376 --> 01:28:18.216 A:middle
as we hoped to reflect his
current status, and if I look

01:28:18.216 --> 01:28:20.096 A:middle
in the Dock, you can see

01:28:20.096 --> 01:28:22.596 A:middle
that the snapshot has also
now been updated to reflect

01:28:22.656 --> 01:28:23.886 A:middle
that he's hungry
and no longer happy.

01:28:24.386 --> 01:28:27.286 A:middle
So that's just a few of the
new things you can do which,

01:28:27.286 --> 01:28:29.356 A:middle
with the new APIs in watchOS 3.

01:28:29.356 --> 01:28:30.876 A:middle
We're excited to see
what you guys build.

01:28:31.256 --> 01:28:33.116 A:middle
And next up, I'd like
to invite Jim Young

01:28:33.116 --> 01:28:34.666 A:middle
to the stage to talk about tvOS.

01:28:36.516 --> 01:28:42.636 A:middle
[ Applause ]

01:28:43.136 --> 01:28:43.616 A:middle
&gt;&gt; Thanks, Eliza.

01:28:44.196 --> 01:28:46.656 A:middle
We've been super excited
since bringing the App Store

01:28:46.656 --> 01:28:48.546 A:middle
to Apple TV just
this last October

01:28:49.716 --> 01:28:53.176 A:middle
because we believe the future
of TV is apps, and since then,

01:28:53.176 --> 01:28:56.926 A:middle
you guys have been very
busy bringing over 6000 apps

01:28:56.976 --> 01:29:00.166 A:middle
to the App Store, including
entertainment apps, games,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:28:56.976 --> 01:29:00.166 A:middle
to the App Store, including
entertainment apps, games,

01:29:00.386 --> 01:29:02.866 A:middle
health and fitness, and
education apps, and many more.

01:29:03.716 --> 01:29:06.376 A:middle
So let's talk about what it
means to develop on tvOS.

01:29:07.756 --> 01:29:09.156 A:middle
First, it's already
familiar to you.

01:29:09.156 --> 01:29:11.576 A:middle
You use all the tools and
languages you already know.

01:29:13.036 --> 01:29:14.916 A:middle
And tvOS includes the
essential frameworks

01:29:14.916 --> 01:29:16.626 A:middle
that you're familiar
with from iOS.

01:29:17.786 --> 01:29:20.126 A:middle
Plus, we've got some
new frameworks specific

01:29:20.126 --> 01:29:21.076 A:middle
to tvOS that we've built.

01:29:22.556 --> 01:29:24.296 A:middle
There's all the foundational
support you need

01:29:24.296 --> 01:29:25.206 A:middle
for building great apps.

01:29:25.576 --> 01:29:28.366 A:middle
We have a rich media stack
for audio/video apps.

01:29:28.366 --> 01:29:31.506 A:middle
And of course, we've got
excellent support for games.

01:29:31.506 --> 01:29:35.696 A:middle
And we're bringing even more
features to the platform.

01:29:36.456 --> 01:29:38.926 A:middle
With PhotoKit, you can now
create these great apps

01:29:38.956 --> 01:29:41.016 A:middle
that showcase users'
photos on their big screen,

01:29:41.886 --> 01:29:45.726 A:middle
and we've made it super easy to
add support for light and dark,

01:29:46.176 --> 01:29:47.706 A:middle
excuse me, our light/dark
appearance.

01:29:49.986 --> 01:29:51.386 A:middle
So it's a rich set
of technologies,

01:29:51.386 --> 01:29:52.446 A:middle
and this is just a partial list.

01:29:52.446 --> 01:29:53.336 A:middle
There's a whole lot more.

01:29:54.116 --> 01:29:58.546 A:middle
Let's talk about using
all these technologies

01:29:58.546 --> 01:29:59.496 A:middle
and bringing them all together

01:29:59.496 --> 01:30:02.976 A:middle
to deliver a great
experience on tvOS.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:29:59.496 --> 01:30:02.976 A:middle
to deliver a great
experience on tvOS.

01:30:03.126 --> 01:30:05.416 A:middle
And I want to start with Touch.

01:30:05.416 --> 01:30:07.186 A:middle
When designing tvOS,
we knew we wanted

01:30:07.186 --> 01:30:09.536 A:middle
to bring a first-class Touch
experience into the living room.

01:30:10.606 --> 01:30:12.496 A:middle
Now, Touch needs to feel
fluid and connected.

01:30:12.496 --> 01:30:14.116 A:middle
It needs to be predictable.

01:30:14.116 --> 01:30:15.206 A:middle
It needs to be fun.

01:30:16.026 --> 01:30:17.716 A:middle
That's a particular
challenge in the living room

01:30:17.716 --> 01:30:19.006 A:middle
when the TV's 10 feet away.

01:30:21.096 --> 01:30:22.426 A:middle
So let's look at
how we solve this.

01:30:22.896 --> 01:30:26.076 A:middle
We have updated UIKit
so that all the controls

01:30:26.076 --> 01:30:27.896 A:middle
and views look beautiful
on the big screen.

01:30:29.206 --> 01:30:31.876 A:middle
We've added UIFocus to allow
you to indicate which elements

01:30:31.876 --> 01:30:33.126 A:middle
of your UI are focusable.

01:30:34.336 --> 01:30:37.546 A:middle
And we have updated
UIMotionEffect so it takes input

01:30:37.546 --> 01:30:38.506 A:middle
from the focus engine.

01:30:39.586 --> 01:30:41.586 A:middle
Now, altogether this
provides a direct connection

01:30:41.586 --> 01:30:43.256 A:middle
between what the user
is doing with the remote

01:30:43.256 --> 01:30:44.896 A:middle
and what they see
on the big screen.

01:30:46.926 --> 01:30:48.786 A:middle
Good news here is that we've
done all the heavy lifting

01:30:48.846 --> 01:30:49.356 A:middle
for you.

01:30:50.136 --> 01:30:51.766 A:middle
Your UIKit apps will get
all of this for free.

01:30:53.796 --> 01:30:55.126 A:middle
Now, if you have a
server-based app,

01:30:55.416 --> 01:30:56.696 A:middle
apps used to deliver content.

01:30:57.076 --> 01:30:58.996 A:middle
We've got a lot of great apps
like this one from Showtime.

01:30:59.806 --> 01:31:01.646 A:middle
We have a technology
called TVMLKit,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:30:59.806 --> 01:31:01.646 A:middle
We have a technology
called TVMLKit,

01:31:01.646 --> 01:31:02.876 A:middle
a framework called TVMLKit.

01:31:04.036 --> 01:31:07.236 A:middle
TVMLKit is a new, high-level
framework we built specifically

01:31:07.236 --> 01:31:07.756 A:middle
for tvOS.

01:31:08.766 --> 01:31:11.306 A:middle
It's built on top of
UIKit so you get all

01:31:11.306 --> 01:31:13.376 A:middle
that connective Touch
experience that we just showed.

01:31:15.156 --> 01:31:16.496 A:middle
We provide a large
set of templates,

01:31:16.906 --> 01:31:18.826 A:middle
and you can even provide
your own custom templates

01:31:19.096 --> 01:31:20.076 A:middle
and native controls.

01:31:21.936 --> 01:31:24.346 A:middle
TVMLKit has allowed teams
to build these beautiful,

01:31:24.346 --> 01:31:27.296 A:middle
highly stylized, customized
apps in a short amount of time.

01:31:29.666 --> 01:31:32.636 A:middle
Let's now talk about how you can
extend the experience outside

01:31:32.636 --> 01:31:36.116 A:middle
of Apple TV by integrating
with other Apple devices.

01:31:37.646 --> 01:31:39.536 A:middle
One easy thing to do is
to save app and game state

01:31:39.536 --> 01:31:40.666 A:middle
in the cloud using CloudKit.

01:31:41.966 --> 01:31:44.436 A:middle
Making it easier for users to
start a game on their Apple TV

01:31:44.866 --> 01:31:46.466 A:middle
and pick it up and resume
right where they left off

01:31:46.466 --> 01:31:47.946 A:middle
on their iPhone or iPad.

01:31:52.586 --> 01:31:53.726 A:middle
We've also seen some great apps

01:31:53.726 --> 01:31:55.736 A:middle
that use multiple Apple
devices at the same time.

01:31:56.576 --> 01:31:58.496 A:middle
With SongPop Party
from FreshPlanet,

01:31:58.556 --> 01:32:00.586 A:middle
the whole family can
play using their iPhone


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:31:58.556 --> 01:32:00.586 A:middle
the whole family can
play using their iPhone

01:32:01.336 --> 01:32:03.196 A:middle
to answer music trivia
questions.

01:32:03.196 --> 01:32:07.166 A:middle
And to make it even easier
to create apps that talk

01:32:07.196 --> 01:32:08.256 A:middle
to each other across devices,

01:32:08.256 --> 01:32:10.356 A:middle
we're bringing Multipeer
Connectivity to the platform.

01:32:11.256 --> 01:32:12.306 A:middle
Just a few lines of code--

01:32:13.516 --> 01:32:17.146 A:middle
[ Applause ]

01:32:17.646 --> 01:32:19.506 A:middle
Just a few lines of code,
you can easily connect

01:32:19.506 --> 01:32:21.106 A:middle
to your apps running
on a different device.

01:32:23.366 --> 01:32:25.806 A:middle
Now, this morning, we announced
the new Apple TV Remote app.

01:32:26.326 --> 01:32:27.746 A:middle
Now everyone in your household

01:32:27.856 --> 01:32:30.276 A:middle
that has an iPhone can have an
Apple TV Remote in their hands.

01:32:32.306 --> 01:32:33.706 A:middle
To your apps it looks
and behaves just

01:32:33.706 --> 01:32:36.526 A:middle
like the Siri Remote, but
we've added a couple features

01:32:36.526 --> 01:32:37.676 A:middle
to take advantage of the screen.

01:32:38.946 --> 01:32:41.586 A:middle
The Now Playing screen provides
a full set of playback controls

01:32:41.586 --> 01:32:43.016 A:middle
as well as cover
art for your media.

01:32:44.486 --> 01:32:47.506 A:middle
Just like showing art and
controls on the iOS lock screen,

01:32:47.736 --> 01:32:50.316 A:middle
use the Media Player Remote
-- I always get this one --

01:32:50.316 --> 01:32:51.526 A:middle
Media Player Remote Command API

01:32:51.526 --> 01:32:55.106 A:middle
to add this information
to Remote app.

01:32:55.936 --> 01:32:58.386 A:middle
The app also provides a
screen designed for gameplay.

01:32:58.386 --> 01:33:01.286 A:middle
To your game, the new app shows


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:32:58.386 --> 01:33:01.286 A:middle
To your game, the new app shows

01:33:01.286 --> 01:33:04.416 A:middle
up as a micro gamepad
just like the Siri Remote.

01:33:05.296 --> 01:33:07.956 A:middle
To take advantage of multiple
micro gamepads, you need to opt

01:33:07.956 --> 01:33:09.996 A:middle
in by setting an Info.plist key.

01:33:10.516 --> 01:33:14.516 A:middle
In addition to Siri Remote
and the new Remote app,

01:33:14.986 --> 01:33:17.396 A:middle
tvOS also supports
MFi game controllers.

01:33:18.916 --> 01:33:20.776 A:middle
And coming this fall,
tvOS will also support

01:33:20.776 --> 01:33:22.676 A:middle
up to four simultaneous
game controllers.

01:33:23.516 --> 01:33:28.766 A:middle
[ Applause ]

01:33:29.266 --> 01:33:30.746 A:middle
But we didn't want
to stop there.

01:33:31.406 --> 01:33:33.286 A:middle
We wanted to enable
even more awesome games.

01:33:33.826 --> 01:33:36.016 A:middle
We wanted to enable games
that might require these kind

01:33:36.016 --> 01:33:39.126 A:middle
of controllers, so
we're happy to announce

01:33:39.766 --> 01:33:41.756 A:middle
that we're updating
our controller policy.

01:33:42.906 --> 01:33:45.586 A:middle
You can narrow your games to
require a game controller.

01:33:46.516 --> 01:33:53.546 A:middle
[ Applause ]

01:33:54.046 --> 01:33:56.316 A:middle
tvOS will check if the
required controller is present

01:33:56.316 --> 01:33:57.846 A:middle
and prompt the user
if it's necessary.

01:33:59.946 --> 01:34:01.396 A:middle
That's an update on tvOS.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:33:59.946 --> 01:34:01.396 A:middle
That's an update on tvOS.

01:34:01.506 --> 01:34:03.616 A:middle
We're super happy to be here.

01:34:03.616 --> 01:34:04.886 A:middle
We've got a lot of
labs and sessions

01:34:04.956 --> 01:34:07.716 A:middle
with the tvOS engineers there,
so please come by and stop by.

01:34:08.206 --> 01:34:10.186 A:middle
Next, I want to introduce
Geoff Stahl is going to come up

01:34:10.186 --> 01:34:11.616 A:middle
and talk about graphics
technologies.

01:34:11.846 --> 01:34:12.026 A:middle
Geoff?

01:34:13.516 --> 01:34:15.796 A:middle
[ Applause ]

01:34:16.296 --> 01:34:16.706 A:middle
&gt;&gt; Thanks, Jim.

01:34:18.716 --> 01:34:19.726 A:middle
So I'm going to talk
about graphics.

01:34:19.726 --> 01:34:22.706 A:middle
I'm going to talk about a
couple areas of graphics.

01:34:23.176 --> 01:34:25.446 A:middle
We have really great
things to talk about today,

01:34:25.546 --> 01:34:26.696 A:middle
and I'll start with color.

01:34:28.386 --> 01:34:32.236 A:middle
So we're building
astonishing new displays

01:34:32.236 --> 01:34:35.856 A:middle
for our latest iPads and
Macs, ones that are capable

01:34:35.856 --> 01:34:38.266 A:middle
of reproducing absolutely
stunning color.

01:34:39.466 --> 01:34:41.526 A:middle
In fact, as DisplayMate says,

01:34:41.526 --> 01:34:45.956 A:middle
"The color accuracy is visually
indistinguishable from perfect."

01:34:47.386 --> 01:34:48.076 A:middle
So how do we do this?

01:34:48.076 --> 01:34:49.976 A:middle
Well, this is all
about color gamut.

01:34:51.246 --> 01:34:54.476 A:middle
So most displays are built
with the sRGB color gamut,

01:34:54.476 --> 01:34:57.596 A:middle
which is narrow and doesn't
reproduce all the colors you

01:34:57.596 --> 01:35:00.386 A:middle
would see in life accurately
of things like flowers


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:34:57.596 --> 01:35:00.386 A:middle
would see in life accurately
of things like flowers

01:35:00.386 --> 01:35:03.086 A:middle
or paint colors or maybe
even the clothes you wear.

01:35:04.226 --> 01:35:08.786 A:middle
So we're moving to the wide P3
color gamut, which contributes

01:35:08.786 --> 01:35:11.366 A:middle
to our ability to really
accurately reproduce

01:35:11.406 --> 01:35:12.816 A:middle
and render these
real-life objects.

01:35:13.706 --> 01:35:16.046 A:middle
But we're not stopping there.

01:35:16.046 --> 01:35:18.056 A:middle
We're going to go
all in on color.

01:35:18.506 --> 01:35:22.276 A:middle
From our system APIs to
our system applications,

01:35:22.456 --> 01:35:24.156 A:middle
we support deep and
wide color throughout.

01:35:24.576 --> 01:35:27.786 A:middle
And if you're an
application using UIImageView

01:35:28.096 --> 01:35:30.476 A:middle
or UIView, you get it for free.

01:35:30.476 --> 01:35:31.886 A:middle
You get it automatically.

01:35:31.886 --> 01:35:35.936 A:middle
If you have to manipulate wide
colors yourself synthetically,

01:35:35.936 --> 01:35:37.926 A:middle
we also offer APIs for that.

01:35:39.576 --> 01:35:41.356 A:middle
And of course, we have
a great capture story.

01:35:41.936 --> 01:35:44.436 A:middle
Our latest cameras support
capturing deep and wide color.

01:35:45.076 --> 01:35:47.956 A:middle
We have APIs to access
raw images.

01:35:48.986 --> 01:35:52.676 A:middle
And we can also now capture
with APIs LivePhotos.

01:35:52.676 --> 01:35:54.816 A:middle
So that's color.

01:35:56.516 --> 01:36:00.556 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:35:56.516 --> 01:36:00.556 A:middle
[ Applause ]

01:36:01.056 --> 01:36:01.726 A:middle
I'd like to talk

01:36:01.726 --> 01:36:04.046 A:middle
about technology now
that's changed the direction

01:36:04.046 --> 01:36:05.696 A:middle
of industry, and that's Metal.

01:36:06.906 --> 01:36:08.756 A:middle
Metal we introduced
two years ago

01:36:08.756 --> 01:36:10.516 A:middle
and has been wildly successful.

01:36:10.516 --> 01:36:13.126 A:middle
And keep in mind, when
we developed Metal,

01:36:13.326 --> 01:36:16.666 A:middle
when we enhance it, we enhance
it with our devices in mind.

01:36:16.666 --> 01:36:19.676 A:middle
Which allows us to innovate
in a rapid pace with things

01:36:19.676 --> 01:36:22.676 A:middle
like Metal tessellation that
allows high-order surfaces

01:36:22.866 --> 01:36:25.076 A:middle
for rendering accuracy
like never before

01:36:26.146 --> 01:36:27.986 A:middle
or Metal function
specialization.

01:36:28.216 --> 01:36:31.716 A:middle
Which when combined with
Xcode allows you to build a set

01:36:31.716 --> 01:36:34.266 A:middle
of shaders that automatically
handling your material

01:36:34.266 --> 01:36:35.606 A:middle
and lighting properties
in your scene.

01:36:36.206 --> 01:36:39.406 A:middle
And for things like
memoryless render targets,

01:36:39.686 --> 01:36:42.416 A:middle
which use the architecture
of our Tile cash

01:36:42.876 --> 01:36:44.276 A:middle
to reduce the amount
of memory used

01:36:44.276 --> 01:36:46.186 A:middle
in your application
or resource use.

01:36:46.526 --> 01:36:47.896 A:middle
Which allows your application

01:36:47.896 --> 01:36:51.526 A:middle
to specialize the way it handles
memory within a Metal app.

01:36:54.736 --> 01:36:55.906 A:middle
And Metal is everywhere.

01:36:56.226 --> 01:36:59.406 A:middle
Hundreds of millions
of devices use Metal.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:37:00.456 --> 01:37:01.756 A:middle
Our key graphics frameworks

01:37:01.886 --> 01:37:04.026 A:middle
and major game engines
are built on top of it.

01:37:05.776 --> 01:37:07.476 A:middle
So whether you're
using a high-level API

01:37:07.476 --> 01:37:09.806 A:middle
or programming directly
to Metal itself,

01:37:09.836 --> 01:37:13.246 A:middle
you get all the performance
optimizations we've built in.

01:37:14.766 --> 01:37:15.766 A:middle
Another thing about Metal,

01:37:15.996 --> 01:37:18.036 A:middle
it's one of our foundational
technologies

01:37:18.616 --> 01:37:19.626 A:middle
of our games ecosystem.

01:37:19.626 --> 01:37:21.236 A:middle
So let's talk about games.

01:37:23.776 --> 01:37:26.906 A:middle
Over the past few years, we've
built a great games ecosystem,

01:37:27.056 --> 01:37:30.936 A:middle
and the goal of this is to
build the APIs and tools

01:37:30.936 --> 01:37:33.406 A:middle
which allow you to take
your ideas in gaming

01:37:33.526 --> 01:37:34.686 A:middle
and turn them into reality.

01:37:34.856 --> 01:37:37.006 A:middle
I want to cover some
highlights here today.

01:37:38.386 --> 01:37:40.206 A:middle
First, as mentioned this
morning, Replay Kit.

01:37:40.996 --> 01:37:42.416 A:middle
We introduced Replay
Kit last year,

01:37:42.416 --> 01:37:43.996 A:middle
and it's really super
easy to adopt.

01:37:44.676 --> 01:37:48.386 A:middle
It allows your users to start
a recording, play their game,

01:37:49.846 --> 01:37:53.036 A:middle
edit that recording, and then
share with their friends.

01:37:54.196 --> 01:37:56.036 A:middle
Well, this year, we're
going to take it up a notch

01:37:56.576 --> 01:37:59.056 A:middle
with ReplayKit Streaming.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:38:00.186 --> 01:38:03.076 A:middle
Now, Replay Kit can
live stream to services

01:38:03.076 --> 01:38:05.456 A:middle
that support the ReplayKit
Streaming Extension.

01:38:06.016 --> 01:38:11.296 A:middle
This allows your users to not
just go from, not just share

01:38:11.296 --> 01:38:13.396 A:middle
with their friends
but stream live

01:38:13.476 --> 01:38:16.796 A:middle
to the internet automatically
with ReplayKit Live Streaming.

01:38:16.926 --> 01:38:18.566 A:middle
And the -- absolutely.

01:38:19.516 --> 01:38:22.976 A:middle
[ Applause ]

01:38:23.476 --> 01:38:26.586 A:middle
And even better, it's about
three lines of code to adopt

01:38:26.586 --> 01:38:27.716 A:middle
if you already use Replay Kit.

01:38:27.716 --> 01:38:31.096 A:middle
This is super easy and could
really expand the social reach

01:38:31.206 --> 01:38:32.246 A:middle
of your applications.

01:38:33.026 --> 01:38:37.456 A:middle
So speaking of social, let's
talk about Game Center.

01:38:37.616 --> 01:38:40.026 A:middle
We're changing the way that
Game Center Multiplayer works.

01:38:40.526 --> 01:38:42.586 A:middle
Now with our latest OS's,

01:38:42.996 --> 01:38:46.026 A:middle
you can invite anyone you
can send a message to.

01:38:46.026 --> 01:38:47.986 A:middle
So your users can invite
anyone they can reach

01:38:47.986 --> 01:38:50.126 A:middle
out via message,
and it is that easy.

01:38:50.126 --> 01:38:52.366 A:middle
It's just as easy as
sending a message.

01:38:53.716 --> 01:38:55.996 A:middle
And the cool thing here is if
you're already using the games

01:38:55.996 --> 01:38:58.516 A:middle
that are multiplayer APIs,
you don't need to do anything.

01:38:58.846 --> 01:39:00.826 A:middle
With the latest OS's,
this just works,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:38:58.846 --> 01:39:00.826 A:middle
With the latest OS's,
this just works,

01:39:00.826 --> 01:39:04.016 A:middle
and we're not going
to stop with that.

01:39:04.436 --> 01:39:08.716 A:middle
We're going to add new
APIs to Game Center.

01:39:09.046 --> 01:39:10.006 A:middle
Game Center Sessions.

01:39:10.766 --> 01:39:14.456 A:middle
Game Center Sessions creates a
persistent, shared experience

01:39:14.676 --> 01:39:16.166 A:middle
where users can come and go.

01:39:16.436 --> 01:39:19.496 A:middle
This means you can design your
games with the mobile user

01:39:19.496 --> 01:39:21.436 A:middle
in mind the way they come and go

01:39:21.436 --> 01:39:24.206 A:middle
into your application that's
allowing a new paradigm

01:39:24.446 --> 01:39:26.096 A:middle
in multiplayer gaming
in the mobile space.

01:39:28.846 --> 01:39:30.446 A:middle
Finally, GameplayKit.

01:39:30.446 --> 01:39:32.796 A:middle
GameplayKit is our
component-based API

01:39:33.536 --> 01:39:35.896 A:middle
that allows you to instance
and customize these components

01:39:36.336 --> 01:39:38.416 A:middle
and make the building blocks
for your game objects,

01:39:38.706 --> 01:39:40.306 A:middle
letting us do the
heavy lifting for you.

01:39:40.306 --> 01:39:45.886 A:middle
And I'd like to invite Norman
Wang on stage to give a demo

01:39:45.886 --> 01:39:48.276 A:middle
of these components and
our Xcode gameplay tools.

01:39:49.516 --> 01:39:54.606 A:middle
[ Applause ]

01:39:55.106 --> 01:39:55.716 A:middle
&gt;&gt; Thanks, Geoff.

01:39:55.986 --> 01:40:00.186 A:middle
I'd like to show you how quickly
I can build a game in Xcode 8.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:39:55.986 --> 01:40:00.186 A:middle
I'd like to show you how quickly
I can build a game in Xcode 8.

01:40:00.436 --> 01:40:02.396 A:middle
Here's a game project
I'm currently working on.

01:40:03.156 --> 01:40:05.496 A:middle
It's a competitive
game involving a hero

01:40:05.496 --> 01:40:07.936 A:middle
and enemies throwing paint
balloons at each other.

01:40:08.856 --> 01:40:11.456 A:middle
Now, I have been using the
new APIs from SpriteKit

01:40:11.456 --> 01:40:12.656 A:middle
and GameplayKit this year.

01:40:13.076 --> 01:40:15.906 A:middle
As you can see, the game
needs three major elements

01:40:15.946 --> 01:40:20.156 A:middle
to be ready; a map, a hero,
and the gameplay pieces.

01:40:20.836 --> 01:40:25.436 A:middle
I have already implemented the
hero's movement and animation,

01:40:25.616 --> 01:40:28.296 A:middle
but it is clearly
missing the collision

01:40:28.296 --> 01:40:32.616 A:middle
with the island bounds, so
let's go ahead and fix that.

01:40:32.616 --> 01:40:34.496 A:middle
Opening our Xcode
project and looking

01:40:34.496 --> 01:40:35.836 A:middle
at the source code section,

01:40:36.406 --> 01:40:39.436 A:middle
I have already written a
few gameplay behaviors using

01:40:39.436 --> 01:40:41.776 A:middle
GKComponent provided
by GameplayKit,

01:40:42.276 --> 01:40:43.506 A:middle
like the fight component here.

01:40:44.226 --> 01:40:47.656 A:middle
And in Xcode 8, I
can now expose any

01:40:47.656 --> 01:40:52.766 A:middle
of my class properties
that's defined in my class

01:40:52.766 --> 01:40:56.236 A:middle
to the 2D editor then I can
customize whenever the behavior

01:40:56.236 --> 01:40:58.146 A:middle
gets attached to one
entity in the scene.

01:40:59.236 --> 01:41:00.546 A:middle
So to build the island map,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:40:59.236 --> 01:41:00.546 A:middle
So to build the island map,

01:41:01.046 --> 01:41:03.286 A:middle
I've been using the
new Tiled Map Editor.

01:41:03.836 --> 01:41:06.486 A:middle
So in my game, there's
three different tile sets

01:41:06.946 --> 01:41:07.886 A:middle
that I have specified.

01:41:08.516 --> 01:41:10.386 A:middle
There's sand, water, and grass.

01:41:11.416 --> 01:41:15.166 A:middle
Not only do I have the ability
to specify both the interior

01:41:15.166 --> 01:41:18.526 A:middle
and exterior tiles, I can
also introduce variance.

01:41:19.006 --> 01:41:21.556 A:middle
So here for the red
edge, for example,

01:41:21.946 --> 01:41:25.236 A:middle
for this individual tile image,
if I want to add a new look

01:41:25.236 --> 01:41:28.646 A:middle
to it to get rid of the small
rock, I can simply just drag it

01:41:28.646 --> 01:41:29.826 A:middle
in from the Media Library.

01:41:30.316 --> 01:41:32.016 A:middle
And now this tile
set is complete.

01:41:32.496 --> 01:41:34.886 A:middle
Let me go ahead and show
you how I can use this.

01:41:35.576 --> 01:41:41.766 A:middle
So switching back to the island
map, the island is constructed

01:41:41.826 --> 01:41:44.146 A:middle
with the new tile map
functionality with,

01:41:44.146 --> 01:41:47.376 A:middle
provided by SpriteKit, so
to make a modification,

01:41:47.376 --> 01:41:48.976 A:middle
I can simply select
the tile map.

01:41:49.336 --> 01:41:51.946 A:middle
Make a double click, and
select the active tile

01:41:51.946 --> 01:41:53.106 A:middle
that I want to work on.

01:41:53.426 --> 01:41:56.226 A:middle
Now that I think the island
looks a little bit too plain,

01:41:56.646 --> 01:42:00.656 A:middle
and to make such modifications,
I can just simply paint


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:41:56.646 --> 01:42:00.656 A:middle
and to make such modifications,
I can just simply paint

01:42:00.966 --> 01:42:05.286 A:middle
across the level and Xcode will
automatically paint the correct

01:42:05.366 --> 01:42:07.226 A:middle
tiles to make it with
surrounding neighbors.

01:42:07.496 --> 01:42:08.116 A:middle
It's that easy.

01:42:09.096 --> 01:42:11.966 A:middle
So now I think I got the look
I'm going after with the island.

01:42:12.116 --> 01:42:14.016 A:middle
Let's look at some of the
gameplay elements here.

01:42:14.806 --> 01:42:20.346 A:middle
To power the hero, our hero's
movement and animation,

01:42:20.346 --> 01:42:22.966 A:middle
I have already attached
the player input component

01:42:23.016 --> 01:42:24.076 A:middle
and the move component.

01:42:24.836 --> 01:42:29.126 A:middle
And to make the player
respect the island boundaries,

01:42:29.296 --> 01:42:32.296 A:middle
I can simply add a collision
component to have implemented.

01:42:32.886 --> 01:42:35.406 A:middle
So this way, it will
automatically create a physics

01:42:35.406 --> 01:42:37.986 A:middle
body for our hero
and the islands based

01:42:37.986 --> 01:42:40.986 A:middle
on the current tile sets
that's being set up.

01:42:41.336 --> 01:42:43.166 A:middle
And to give the player
the ability

01:42:43.166 --> 01:42:45.006 A:middle
to throw the water balloons,

01:42:45.006 --> 01:42:47.516 A:middle
I can simply add the
fight component to it.

01:42:47.976 --> 01:42:51.246 A:middle
And notice here how the
health property being exposed

01:42:51.246 --> 01:42:53.616 A:middle
by the fight component
class is now visible.

01:42:53.616 --> 01:42:56.316 A:middle
I can give it a custom
value here.

01:42:56.316 --> 01:42:59.706 A:middle
So for example, I can set
the value to be 2 rather

01:42:59.706 --> 01:43:01.786 A:middle
than using the default
value of 1.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:42:59.706 --> 01:43:01.786 A:middle
than using the default
value of 1.

01:43:02.456 --> 01:43:05.736 A:middle
And in addition, I have
a drone that drops the,

01:43:06.046 --> 01:43:08.146 A:middle
these paint balloons
on the level

01:43:08.416 --> 01:43:10.376 A:middle
and I have a enemy
that's in the scene.

01:43:11.026 --> 01:43:14.106 A:middle
So to give the enemy the same
fighting ability by picking

01:43:14.106 --> 01:43:16.676 A:middle
up the paint balloons
and throw at me,

01:43:17.066 --> 01:43:19.146 A:middle
I'm going to give the
same fight component.

01:43:19.676 --> 01:43:21.406 A:middle
And to make this a fair game,

01:43:21.406 --> 01:43:24.126 A:middle
I'm going to give the same
health level of 2 rather

01:43:24.126 --> 01:43:26.616 A:middle
than using the default
value of 1.

01:43:27.796 --> 01:43:30.236 A:middle
Now, I think my level
is set up pretty good.

01:43:30.236 --> 01:43:33.206 A:middle
Let's run it and check it
out, the new implementation.

01:43:34.526 --> 01:43:35.426 A:middle
So the drones are going

01:43:35.426 --> 01:43:38.126 A:middle
to be dropping randomly
the paint balloons

01:43:38.126 --> 01:43:40.376 A:middle
and the paintball
fighter will start.

01:43:40.376 --> 01:43:42.906 A:middle
So looks like all the
elements are all there.

01:43:43.196 --> 01:43:48.186 A:middle
So in Xcode 8, it's very easy to
implement the level of the game

01:43:48.186 --> 01:43:52.826 A:middle
and connect all these
gameplay logics fairly quickly.

01:43:53.076 --> 01:43:55.526 A:middle
Because I'm using
SpriteKit and GameplayKit,

01:43:55.526 --> 01:43:58.386 A:middle
my game will automatically
run on all Apple platforms.

01:43:59.296 --> 01:43:59.756 A:middle
Thank you.

01:43:59.926 --> 01:44:00.706 A:middle
Now, back to Andreas.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:43:59.926 --> 01:44:00.706 A:middle
Now, back to Andreas.

01:44:01.516 --> 01:44:06.546 A:middle
[ Applause ]

01:44:07.046 --> 01:44:08.156 A:middle
&gt;&gt; Thank you, Norman.

01:44:08.156 --> 01:44:10.386 A:middle
All right, so just quickly
review the most important points

01:44:10.386 --> 01:44:11.066 A:middle
we talked about.

01:44:12.146 --> 01:44:15.206 A:middle
There are now four Apple
OS platforms, each of them

01:44:15.306 --> 01:44:17.366 A:middle
with their own App Store that
you can bring your ideas to.

01:44:18.446 --> 01:44:21.996 A:middle
And today we added a large
variety of new extension points

01:44:22.036 --> 01:44:24.916 A:middle
that allow you to hook
even deeper into our OS's.

01:44:25.486 --> 01:44:27.216 A:middle
Perhaps most importantly,
we recommend

01:44:27.216 --> 01:44:30.306 A:middle
that you consider creating
an iMessage App and also

01:44:30.306 --> 01:44:32.086 A:middle
that you integrate
your apps with SiriKit.

01:44:33.066 --> 01:44:33.956 A:middle
But these are just two

01:44:33.956 --> 01:44:36.066 A:middle
of the many new APIs we
are announcing today.

01:44:36.996 --> 01:44:39.336 A:middle
And support for all of
them will be provided

01:44:39.366 --> 01:44:41.376 A:middle
by a new version
of our Xcode IDE.

01:44:41.696 --> 01:44:44.876 A:middle
Xcode 8 is going to run on
Mac OS El Capitan and Sierra.

01:44:44.936 --> 01:44:46.656 A:middle
Now, of course, it
also has support

01:44:46.656 --> 01:44:48.046 A:middle
for developing with Swift 3.

01:44:49.376 --> 01:44:51.736 A:middle
Now, all these technologies
are available for download

01:44:51.736 --> 01:44:53.946 A:middle
from the WWDC Attendee
Portal today,

01:44:53.946 --> 01:44:56.916 A:middle
so you can get early access and
use the time later in the year

01:44:56.916 --> 01:44:59.616 A:middle
when we ship out products to
get ready for all launches,

01:44:59.756 --> 01:45:02.506 A:middle
create even more powerful and
unique apps for your users.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:44:59.756 --> 01:45:02.506 A:middle
create even more powerful and
unique apps for your users.

01:45:03.816 --> 01:45:05.726 A:middle
Also, go and check out the
new Swift Playgrounds app,

01:45:06.216 --> 01:45:07.746 A:middle
which we're including in
the iOS X Developer Preview.

01:45:07.746 --> 01:45:10.286 A:middle
I think you're going to
have a ton of fun with it

01:45:10.666 --> 01:45:12.736 A:middle
and perhaps you'll consider
creating additional content

01:45:12.796 --> 01:45:15.036 A:middle
for your kids to start
learning how to program Swift.

01:45:16.256 --> 01:45:18.096 A:middle
Now, there are many
opportunities here

01:45:18.096 --> 01:45:20.156 A:middle
at the conference for you to
learn more about everything

01:45:20.156 --> 01:45:21.196 A:middle
that we announced today.

01:45:21.196 --> 01:45:23.046 A:middle
There's more than 100
sessions you can attend

01:45:23.046 --> 01:45:23.896 A:middle
and even more labs.

01:45:24.296 --> 01:45:27.106 A:middle
You can meet every engineer
you see on site one on one.

01:45:27.106 --> 01:45:29.296 A:middle
They are here to answer
you specific questions.

01:45:30.296 --> 01:45:32.006 A:middle
So I hope you enjoyed the
session and I'll see you

01:45:32.006 --> 01:45:33.376 A:middle
around later this week.

01:45:34.516 --> 01:45:40.500 A:middle
[ Applause ]
