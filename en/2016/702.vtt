WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:19.460 A:middle
[ Music ]

00:00:22.006 --> 00:00:22.406 A:middle
&gt;&gt; Hello.

00:00:24.516 --> 00:00:28.856 A:middle
[ Applause ]

00:00:29.356 --> 00:00:30.696 A:middle
&gt;&gt; So my name is Dana DuBois.

00:00:30.696 --> 00:00:32.665 A:middle
I'm an engineering
manager on the team

00:00:32.665 --> 00:00:33.796 A:middle
that writes the frameworks

00:00:33.796 --> 00:00:37.216 A:middle
that help power the App
Store on iOS and tvOS.

00:00:37.216 --> 00:00:38.646 A:middle
And today we're going
to talk about one

00:00:38.646 --> 00:00:42.296 A:middle
of those particular
frameworks, and that's StoreKit.

00:00:43.996 --> 00:00:45.056 A:middle
Many of you know,
StoreKit's been

00:00:45.056 --> 00:00:46.966 A:middle
around for a long, long time.

00:00:46.966 --> 00:00:49.816 A:middle
It was introduced in
iOS 3 for the iPhone.

00:00:50.116 --> 00:00:53.246 A:middle
Since then it's been used by
thousands and thousands of apps

00:00:53.246 --> 00:00:55.586 A:middle
to power all sorts
of business models.

00:00:55.866 --> 00:01:00.626 A:middle
Everything from newspapers
and magazines, games,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:55.866 --> 00:01:00.626 A:middle
Everything from newspapers
and magazines, games,

00:01:01.156 --> 00:01:03.276 A:middle
even dating apps
are using StoreKit.

00:01:03.326 --> 00:01:05.066 A:middle
It's really widely used.

00:01:05.325 --> 00:01:09.106 A:middle
And we've talked about
StoreKit a lot at WWDC,

00:01:09.106 --> 00:01:12.656 A:middle
but this year we're going
to do something a little new

00:01:12.656 --> 00:01:14.696 A:middle
and we're going to talk
about it using Swift.

00:01:14.736 --> 00:01:15.786 A:middle
So that's really exciting.

00:01:15.786 --> 00:01:17.026 A:middle
We've got some new APIs.

00:01:18.046 --> 00:01:21.266 A:middle
There's a couple other things
that are new, so Swift API,

00:01:21.266 --> 00:01:22.386 A:middle
so that's really great.

00:01:23.026 --> 00:01:26.036 A:middle
Last week, many of you probably
also heard that we have a lot

00:01:26.036 --> 00:01:28.066 A:middle
of big announcements
around subscriptions.

00:01:28.066 --> 00:01:30.486 A:middle
This is something we're
really excited about as well.

00:01:30.796 --> 00:01:34.016 A:middle
I think a lot of developers are
going to end up taking advantage

00:01:34.246 --> 00:01:37.376 A:middle
of these new enhancements
with subscriptions.

00:01:37.376 --> 00:01:39.296 A:middle
So I'm going to give you
a quick overview on them.

00:01:40.816 --> 00:01:43.306 A:middle
First up, categories.

00:01:43.796 --> 00:01:46.296 A:middle
We're really you know
excited to announce

00:01:46.296 --> 00:01:49.666 A:middle
that category will no longer
be a factor if you're choosing

00:01:49.666 --> 00:01:51.326 A:middle
to use auto renewing
subscriptions

00:01:51.326 --> 00:01:52.496 A:middle
in your applications.

00:01:53.296 --> 00:01:55.336 A:middle
There are still going

00:01:55.336 --> 00:01:58.166 A:middle
to be criteria behind how
you can use auto renewing

00:01:58.166 --> 00:02:01.026 A:middle
subscriptions, but category
will no longer be a factor.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.166 --> 00:02:01.026 A:middle
subscriptions, but category
will no longer be a factor.

00:02:02.406 --> 00:02:05.056 A:middle
Second, everyone's got
to be excited about this,

00:02:05.256 --> 00:02:07.736 A:middle
we're giving more
proceeds to developers.

00:02:08.006 --> 00:02:10.336 A:middle
If you keep your
subscribers for more

00:02:10.336 --> 00:02:12.276 A:middle
than one year, that's
really great.

00:02:12.276 --> 00:02:13.976 A:middle
And I think that's
going to be a big deal.

00:02:14.516 --> 00:02:18.196 A:middle
[ Applause ]

00:02:18.696 --> 00:02:23.226 A:middle
Pricing. A lot of control
now we're going to be giving

00:02:23.226 --> 00:02:26.256 A:middle
to developers through iTunes
connect to set the pricing

00:02:26.256 --> 00:02:28.966 A:middle
for their subscriptions
based on territory

00:02:28.966 --> 00:02:30.966 A:middle
to territory, region to region.

00:02:31.216 --> 00:02:33.996 A:middle
If there's a business reason you
might need to adjust the price

00:02:33.996 --> 00:02:36.926 A:middle
in Europe compared to the
US, there's a lot of control

00:02:36.926 --> 00:02:38.156 A:middle
that you now have over that.

00:02:38.156 --> 00:02:42.306 A:middle
And then along with pricing,
we're giving you the ability

00:02:42.486 --> 00:02:46.966 A:middle
to save the price, to
preserve the price for users

00:02:47.116 --> 00:02:49.366 A:middle
who may have already been
using your subscription while

00:02:49.366 --> 00:02:51.006 A:middle
adjusting it for new users.

00:02:51.006 --> 00:02:54.076 A:middle
So, if you have early adopters
that you want to reward

00:02:54.076 --> 00:02:56.766 A:middle
and you want to keep them using
your subscription, but you want

00:02:56.766 --> 00:03:00.276 A:middle
to adjust the price for newer
users, you have that power now.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:56.766 --> 00:03:00.276 A:middle
to adjust the price for newer
users, you have that power now.

00:03:00.776 --> 00:03:03.636 A:middle
And then upgrades
and downgrades,

00:03:03.636 --> 00:03:06.406 A:middle
this is us giving the
user a lot more power

00:03:06.406 --> 00:03:08.926 A:middle
to control exactly what level

00:03:08.926 --> 00:03:11.456 A:middle
of subscription they might
want within your service.

00:03:11.456 --> 00:03:14.106 A:middle
So if they want to go up
to the platinum level,

00:03:14.106 --> 00:03:17.366 A:middle
or go back down to the basic
level, they can do that right

00:03:17.366 --> 00:03:20.586 A:middle
in the Manage Subscription
UI right on the device.

00:03:21.256 --> 00:03:25.556 A:middle
So that's a quick overview of
what's new in subscriptions.

00:03:26.006 --> 00:03:27.406 A:middle
There's a lot more to it.

00:03:27.406 --> 00:03:29.356 A:middle
I think if you're going
to have subscriptions

00:03:29.356 --> 00:03:31.406 A:middle
in your application,
you really should go

00:03:31.406 --> 00:03:34.506 A:middle
to Introducing Expanded
Subscriptions in iTunes Connect,

00:03:34.796 --> 00:03:36.736 A:middle
that's at Pacific
Heights today at 4.

00:03:37.106 --> 00:03:40.716 A:middle
Really, they're going to get
a lot more in-depth on how

00:03:40.716 --> 00:03:43.306 A:middle
to set this up, how to manage
this in your application

00:03:43.306 --> 00:03:45.526 A:middle
and I really highly
recommend you go to that.

00:03:47.046 --> 00:03:48.626 A:middle
So that's subscriptions.

00:03:48.736 --> 00:03:51.536 A:middle
There's one other new thing that
I'm really excited to announce,

00:03:51.716 --> 00:03:53.616 A:middle
and that's iMessage apps.

00:03:54.096 --> 00:03:56.266 A:middle
We announced that
yesterday at the keynote.

00:03:56.836 --> 00:03:59.506 A:middle
We're bringing apps, a whole
new class of apps right

00:03:59.506 --> 00:04:01.966 A:middle
into the iMessage app, iMessage.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.506 --> 00:04:01.966 A:middle
into the iMessage app, iMessage.

00:04:02.246 --> 00:04:07.026 A:middle
You'll be able to build custom
extensions, and we are going

00:04:07.406 --> 00:04:10.816 A:middle
to allow in-app purchases
right in those extensions,

00:04:10.816 --> 00:04:15.226 A:middle
right in iMessage aps using the
exact same StoreKit APIs you

00:04:15.226 --> 00:04:17.036 A:middle
would use in a normal
application

00:04:17.036 --> 00:04:18.346 A:middle
that you have in
the store today.

00:04:18.636 --> 00:04:21.196 A:middle
So if you have additional
content that you want to market

00:04:21.576 --> 00:04:24.706 A:middle
or provide right inside
the iMessage experience,

00:04:25.396 --> 00:04:26.606 A:middle
that's now supported.

00:04:26.776 --> 00:04:29.006 A:middle
And this will all be
available in iOS 10,

00:04:29.006 --> 00:04:30.806 A:middle
so that's something we're
really excited about

00:04:30.806 --> 00:04:32.126 A:middle
and I think developers are going

00:04:32.126 --> 00:04:34.986 A:middle
to take a lot of
advantage of that.

00:04:35.506 --> 00:04:38.946 A:middle
So as I said before, StoreKit's
been around for a while.

00:04:38.946 --> 00:04:41.656 A:middle
People have been using in-app
purchases for a long, long time,

00:04:41.656 --> 00:04:43.316 A:middle
but maybe some of
you are new to it.

00:04:43.316 --> 00:04:45.136 A:middle
So I'd like to just
give a quick overview

00:04:45.456 --> 00:04:47.546 A:middle
of what exactly in-app
purchases are.

00:04:47.866 --> 00:04:51.156 A:middle
In-app purchases are
digital content or service

00:04:51.566 --> 00:04:53.856 A:middle
that can be bought right
inside your application.

00:04:54.556 --> 00:04:57.336 A:middle
However, to be clear, it's
not for physical goods.

00:04:57.336 --> 00:04:58.696 A:middle
There's other ways
of doing that.

00:04:58.876 --> 00:05:02.036 A:middle
This is really just about
digital content or services.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.876 --> 00:05:02.036 A:middle
This is really just about
digital content or services.

00:05:02.076 --> 00:05:06.116 A:middle
Now when we're talking about
digital contents or services,

00:05:06.116 --> 00:05:07.356 A:middle
there's a bunch of
different types.

00:05:07.356 --> 00:05:09.766 A:middle
When you're configuring this in
iTunes connect, you have a lot

00:05:09.766 --> 00:05:11.496 A:middle
of options and you
need to make sure

00:05:11.796 --> 00:05:15.506 A:middle
that you choose the right
type that fits your content.

00:05:15.756 --> 00:05:17.816 A:middle
So let's take a look
at what those are.

00:05:18.676 --> 00:05:20.196 A:middle
Consumable products.

00:05:20.566 --> 00:05:23.656 A:middle
Everybody's played a game and
they have coins in that game,

00:05:23.856 --> 00:05:27.496 A:middle
currency, or gas in your
racing car, or something

00:05:27.496 --> 00:05:30.066 A:middle
that they user's going
to buy, and buy again,

00:05:30.066 --> 00:05:32.326 A:middle
and buy again, and
use up over time.

00:05:32.326 --> 00:05:34.286 A:middle
That's what a consumable
purchase is.

00:05:35.526 --> 00:05:39.606 A:middle
A non-consumable product is
something that sticks around,

00:05:39.606 --> 00:05:42.186 A:middle
it will stick around for as long
as the user wants to use it.

00:05:42.186 --> 00:05:43.626 A:middle
They'll be able to restore it.

00:05:43.626 --> 00:05:48.006 A:middle
They'll be able to move
it from device to device.

00:05:48.326 --> 00:05:49.776 A:middle
So that's a little different.

00:05:49.776 --> 00:05:52.386 A:middle
And again in a game
you might have a sword,

00:05:52.386 --> 00:05:56.066 A:middle
or you know some sort of weapon,
or you know a racing car,

00:05:56.066 --> 00:05:58.866 A:middle
or a level, or if you
have a utility app,

00:05:58.866 --> 00:06:01.896 A:middle
you might have a basic edition
of your app and you might want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.866 --> 00:06:01.896 A:middle
you might have a basic edition
of your app and you might want

00:06:01.896 --> 00:06:03.676 A:middle
to offer a pro-edition
of your app.

00:06:03.976 --> 00:06:06.696 A:middle
That's kind of a
non-consumable product.

00:06:07.596 --> 00:06:10.146 A:middle
We also have two
types of subscriptions

00:06:10.146 --> 00:06:11.606 A:middle
when we're talking
about subscriptions.

00:06:11.846 --> 00:06:13.836 A:middle
There's non-renewing
subscriptions,

00:06:14.616 --> 00:06:16.636 A:middle
as the name suggests
these are subscriptions

00:06:16.636 --> 00:06:18.966 A:middle
that don't automatically
renew, it's up to you

00:06:18.966 --> 00:06:22.116 A:middle
and your application, and
your back end to manage how

00:06:22.116 --> 00:06:23.886 A:middle
to renew those subscriptions.

00:06:24.046 --> 00:06:27.556 A:middle
But then we also have auto
renewing subscriptions.

00:06:27.556 --> 00:06:31.726 A:middle
And these are subscriptions that
Apple will bill to the customer

00:06:31.776 --> 00:06:34.446 A:middle
on a periodic basis, based
on what you configure.

00:06:34.446 --> 00:06:36.056 A:middle
So if it's a monthly
subscription,

00:06:36.546 --> 00:06:39.646 A:middle
we'll bill the user every month,
as long as they continue to opt

00:06:39.646 --> 00:06:40.806 A:middle
into that subscription.

00:06:41.296 --> 00:06:46.266 A:middle
So these are the types,
let's get into the heart

00:06:46.266 --> 00:06:49.036 A:middle
of adding in-app purchases
to your application.

00:06:49.266 --> 00:06:54.006 A:middle
So, what I'm going to do is I'm
going to do a quick overview

00:06:54.416 --> 00:06:56.676 A:middle
of all the various steps,
and then we're going to dive

00:06:56.676 --> 00:06:57.916 A:middle
into each one and
we're going to talk

00:06:57.916 --> 00:07:00.116 A:middle
about how to do this in Swift.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.916 --> 00:07:00.116 A:middle
about how to do this in Swift.

00:07:00.316 --> 00:07:04.066 A:middle
And you know exactly what you
might need to worry about as far

00:07:04.066 --> 00:07:07.646 A:middle
as pitfalls, or any concerns
you might have along the way.

00:07:07.646 --> 00:07:10.916 A:middle
There's a lot of things that
can get kind of tricky sometimes

00:07:10.916 --> 00:07:13.096 A:middle
when you're developing
against StoreKit.

00:07:13.226 --> 00:07:15.066 A:middle
A couple of things
to keep in mind.

00:07:15.196 --> 00:07:19.376 A:middle
So first off you're
going to want to figure

00:07:19.376 --> 00:07:21.616 A:middle
out exactly what it is
that you're going to sell

00:07:21.616 --> 00:07:24.216 A:middle
to the consumer, the
user of your app.

00:07:24.216 --> 00:07:28.126 A:middle
So this is done just by
determining the identifiers,

00:07:28.126 --> 00:07:31.396 A:middle
those in-app identifiers
of what you're marketing

00:07:31.396 --> 00:07:32.636 A:middle
to the user right
then and there.

00:07:33.386 --> 00:07:36.436 A:middle
Once you have the identifiers,
you go off to the App Store

00:07:37.036 --> 00:07:38.816 A:middle
and you fetch the information,

00:07:39.156 --> 00:07:42.456 A:middle
localized product
information that's related

00:07:42.456 --> 00:07:43.616 A:middle
to those identifiers.

00:07:43.696 --> 00:07:44.446 A:middle
And that's key.

00:07:44.446 --> 00:07:46.086 A:middle
This is localized information.

00:07:46.086 --> 00:07:48.916 A:middle
This is a global marketplace,
you want to make sure

00:07:48.916 --> 00:07:51.516 A:middle
that you're displaying
the information

00:07:51.826 --> 00:07:55.546 A:middle
to your users in
a localized way.

00:07:56.376 --> 00:07:59.706 A:middle
And now once you have that
information you're going

00:07:59.706 --> 00:08:01.666 A:middle
to show off the products.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.706 --> 00:08:01.666 A:middle
to show off the products.

00:08:01.666 --> 00:08:02.446 A:middle
You're going to market them.

00:08:02.446 --> 00:08:03.086 A:middle
You're going to sell them.

00:08:03.236 --> 00:08:05.976 A:middle
These are your products, this is
your application, you're going

00:08:05.976 --> 00:08:09.106 A:middle
to build the best UI you
can to show them off.

00:08:09.366 --> 00:08:12.806 A:middle
The users then are going to be
enticed to make that purchase.

00:08:12.806 --> 00:08:14.646 A:middle
They're going to be you
know, sold, and they're going

00:08:14.646 --> 00:08:17.126 A:middle
to select the product
right then and there.

00:08:17.466 --> 00:08:20.596 A:middle
But it's up to you to
then create a payment

00:08:20.596 --> 00:08:23.136 A:middle
for that product and add
it to the Payment Queue.

00:08:23.216 --> 00:08:24.366 A:middle
And we'll be talking a lot more

00:08:24.366 --> 00:08:26.646 A:middle
about the Payment
Queue as we go on.

00:08:27.676 --> 00:08:30.506 A:middle
As the payment is going through
the Payment Queue your app will

00:08:30.506 --> 00:08:33.076 A:middle
be notified about that
transaction and you're going

00:08:33.076 --> 00:08:35.676 A:middle
to have to make some
response to it,

00:08:35.676 --> 00:08:38.226 A:middle
and that's how you
process these transactions.

00:08:38.606 --> 00:08:41.686 A:middle
Finally, when the payment is
completed, you're going to make

00:08:41.686 --> 00:08:42.866 A:middle
that product available.

00:08:43.285 --> 00:08:44.896 A:middle
Give the user what
they paid for.

00:08:44.996 --> 00:08:47.916 A:middle
And then finally tell the
Payment Queue you're done

00:08:47.916 --> 00:08:49.906 A:middle
with the transaction,
everything's completed,

00:08:50.156 --> 00:08:51.186 A:middle
the product's available,

00:08:51.256 --> 00:08:53.206 A:middle
so that's finishing
the transaction.

00:08:53.956 --> 00:08:56.316 A:middle
So those are all the different
steps you need to take.

00:08:56.316 --> 00:08:56.656 A:middle
Real quick.

00:08:56.656 --> 00:08:59.096 A:middle
We're going to dive into each
of those as we go through,

00:08:59.456 --> 00:09:02.336 A:middle
but first special note
about the Payment Queue.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.456 --> 00:09:02.336 A:middle
but first special note
about the Payment Queue.

00:09:03.316 --> 00:09:05.206 A:middle
The Payment Queue is the center

00:09:05.206 --> 00:09:07.286 A:middle
of your in-app purchase
implementation.

00:09:07.546 --> 00:09:11.726 A:middle
It's the source of truth
for state about purchases

00:09:11.726 --> 00:09:14.626 A:middle
and payments as they're
going through all the way

00:09:14.626 --> 00:09:18.146 A:middle
from when the user selected that
product to when it's paid for.

00:09:19.146 --> 00:09:21.886 A:middle
And it's important to keep
in mind that you should rely

00:09:21.886 --> 00:09:25.896 A:middle
on the queue and only the queue
to know about transactions

00:09:25.896 --> 00:09:29.146 A:middle
that are progress,
payment updates,

00:09:29.576 --> 00:09:32.146 A:middle
and if you're using
hosted downloads,

00:09:32.386 --> 00:09:34.946 A:middle
the Payment Queue will tell
you all about those downloads.

00:09:36.896 --> 00:09:41.446 A:middle
And then another thing
to keep in mind is

00:09:41.446 --> 00:09:44.676 A:middle
that if the Payment Queue
tells you about a payment,

00:09:45.126 --> 00:09:46.866 A:middle
it's a valid and real payment.

00:09:47.496 --> 00:09:50.746 A:middle
In fact, there are
cases we've seen

00:09:50.746 --> 00:09:53.836 A:middle
where developers might
have their own side cache,

00:09:54.426 --> 00:09:57.636 A:middle
where they've noticed that a
user has clicked on a product

00:09:57.976 --> 00:09:59.946 A:middle
and they're managing
state about that payment.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.446 --> 00:10:02.166 A:middle
And then their app will crash,

00:10:02.256 --> 00:10:03.796 A:middle
or something will
happen along the way,

00:10:03.796 --> 00:10:06.216 A:middle
the user will close the
application before finishing the

00:10:06.216 --> 00:10:09.646 A:middle
payment, and they'll come back
into the game, or whatever it is

00:10:09.646 --> 00:10:11.496 A:middle
that they were purchasing
then there.

00:10:11.846 --> 00:10:14.856 A:middle
And they don't necessarily
respect the response coming

00:10:14.856 --> 00:10:17.176 A:middle
from the Payment Queue
because they weren't listening

00:10:17.176 --> 00:10:18.456 A:middle
to those payment transactions

00:10:18.456 --> 00:10:21.636 A:middle
because their own queue no
longer had them in state.

00:10:22.196 --> 00:10:25.266 A:middle
So you should really just
rely on the Payment Queue

00:10:25.266 --> 00:10:27.946 A:middle
to tell what's going
on with those payments

00:10:27.946 --> 00:10:28.706 A:middle
as they're happening.

00:10:28.926 --> 00:10:32.336 A:middle
And in fact it's very
important and we're going to get

00:10:32.336 --> 00:10:34.396 A:middle
into some code here, to listen

00:10:34.506 --> 00:10:38.736 A:middle
and observe the Payment Queue
right when your app starts up.

00:10:38.736 --> 00:10:40.916 A:middle
This can be done in the
example we have here,

00:10:41.266 --> 00:10:43.316 A:middle
we have
didFinishLaunchingWithOptions is

00:10:43.316 --> 00:10:45.556 A:middle
the first thing that
happens with your application

00:10:45.556 --> 00:10:49.746 A:middle
when it starts up and we create
a payment transaction observer,

00:10:49.746 --> 00:10:51.626 A:middle
in this case it's the
app delegate itself.

00:10:51.816 --> 00:10:53.336 A:middle
And we set it right
on the Payment Queue,

00:10:53.336 --> 00:10:54.806 A:middle
we add it to the Payment Queue.

00:10:55.116 --> 00:10:58.616 A:middle
And then if there's
anything in the Payment Queue

00:10:58.766 --> 00:11:00.746 A:middle
that may have been there
before our app launched,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.766 --> 00:11:00.746 A:middle
that may have been there
before our app launched,

00:11:00.966 --> 00:11:02.776 A:middle
we'll get notified
about it right away.

00:11:03.436 --> 00:11:07.486 A:middle
Another kind of case that comes
up is there are applications

00:11:07.486 --> 00:11:10.786 A:middle
that have in-app purchases
where they have redeemed codes.

00:11:11.026 --> 00:11:13.476 A:middle
So the user might have
actually gone into the App Store

00:11:13.476 --> 00:11:16.916 A:middle
and redeemed that in-app
purchase completely outside

00:11:16.916 --> 00:11:17.346 A:middle
of your app.

00:11:17.576 --> 00:11:20.726 A:middle
The user then is exciting about
consuming that in-app purchase,

00:11:21.006 --> 00:11:23.866 A:middle
they launch your application,
and if they're not listening

00:11:23.866 --> 00:11:26.996 A:middle
to the Payment Queue that
product won't become available.

00:11:27.656 --> 00:11:30.166 A:middle
You got to do it right
when the app starts up.

00:11:30.736 --> 00:11:33.756 A:middle
So that's a quick note
about the Payment Queue.

00:11:34.436 --> 00:11:37.816 A:middle
Let's get back into the process
and understand exactly how

00:11:37.816 --> 00:11:39.256 A:middle
to add this to your application.

00:11:40.326 --> 00:11:44.386 A:middle
So the first thing you want
to do is load the identifiers

00:11:44.626 --> 00:11:46.216 A:middle
for your in-app purchases.

00:11:46.866 --> 00:11:48.796 A:middle
These are the same identifiers

00:11:48.796 --> 00:11:50.776 A:middle
that you set up in
iTunes Connect.

00:11:51.016 --> 00:11:53.056 A:middle
You define them, you name them.

00:11:53.376 --> 00:11:54.826 A:middle
And you just need to
get a list of them.

00:11:55.366 --> 00:11:56.656 A:middle
There's a couple
different ways of doing it,

00:11:56.656 --> 00:11:58.026 A:middle
if your app is very simple,

00:11:58.436 --> 00:12:00.506 A:middle
you might just bake
the identifiers right


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.436 --> 00:12:00.506 A:middle
you might just bake
the identifiers right

00:12:00.506 --> 00:12:02.276 A:middle
into your application.

00:12:02.276 --> 00:12:05.186 A:middle
If you have an application
that has a basic version

00:12:05.186 --> 00:12:08.146 A:middle
and a pro version, you might
just have one consumable

00:12:08.206 --> 00:12:10.286 A:middle
and you just baked it right
into your application.

00:12:10.706 --> 00:12:13.876 A:middle
However, we've seen more and
more applications out there

00:12:14.136 --> 00:12:16.036 A:middle
where they're interested
in going out

00:12:16.036 --> 00:12:18.576 A:middle
and fetching those in-app
identifiers from a host

00:12:18.576 --> 00:12:19.866 A:middle
that they provide so that

00:12:19.866 --> 00:12:22.346 A:middle
over time maybe they can
change what they're marketing

00:12:22.346 --> 00:12:26.526 A:middle
to the users, or exactly
what appears where.

00:12:27.486 --> 00:12:28.476 A:middle
That's okay to do.

00:12:28.476 --> 00:12:29.936 A:middle
Completely valid to do.

00:12:30.016 --> 00:12:32.166 A:middle
The thing we want to call
out is if you're doing

00:12:32.166 --> 00:12:36.246 A:middle
that make sure your host
is scalable and reliable.

00:12:36.246 --> 00:12:39.386 A:middle
This is the beginning of
your in-app purchase process.

00:12:39.626 --> 00:12:42.466 A:middle
The worst thing to show a user
right now is just a spinner

00:12:42.466 --> 00:12:44.026 A:middle
while they're waiting
to make a purchase.

00:12:44.566 --> 00:12:49.016 A:middle
This should be, and if you can
fetch in advance, that's great.

00:12:49.496 --> 00:12:51.696 A:middle
If you can cache on the
device that's even better.

00:12:51.956 --> 00:12:54.446 A:middle
Be very cognizant of
how you are fetching

00:12:54.446 --> 00:12:56.156 A:middle
and preserving these
identifiers.

00:12:56.866 --> 00:13:00.586 A:middle
Now that you have the
identifiers you need to go


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:56.866 --> 00:13:00.586 A:middle
Now that you have the
identifiers you need to go

00:13:00.586 --> 00:13:04.056 A:middle
to the App Store to fetch the
localized product information

00:13:04.086 --> 00:13:05.746 A:middle
associated with those products.

00:13:07.006 --> 00:13:09.666 A:middle
This can be done with
an SK Product Request.

00:13:09.966 --> 00:13:12.476 A:middle
You pass in the identifiers
that you're interested in.

00:13:12.946 --> 00:13:15.426 A:middle
Again, for the smoothest
experience possible,

00:13:15.426 --> 00:13:16.726 A:middle
you want to do this in advance.

00:13:16.726 --> 00:13:19.506 A:middle
You want to anticipate when
the user might be interested

00:13:19.506 --> 00:13:21.476 A:middle
in looking at your
in-app purchases,

00:13:21.636 --> 00:13:26.046 A:middle
and have that information
available ahead of time.

00:13:26.156 --> 00:13:28.826 A:middle
So first thing you do, create
your SK Product Request.

00:13:29.056 --> 00:13:31.236 A:middle
You pass in the identifiers
you're interested in.

00:13:32.296 --> 00:13:33.136 A:middle
You set your delegate.

00:13:33.166 --> 00:13:35.536 A:middle
This will give information
back to your application

00:13:35.536 --> 00:13:39.206 A:middle
about when those
products are loaded.

00:13:39.276 --> 00:13:40.766 A:middle
And then you just call start.

00:13:40.936 --> 00:13:41.646 A:middle
That simple.

00:13:44.616 --> 00:13:47.366 A:middle
The delegate looks like this.

00:13:47.746 --> 00:13:50.166 A:middle
We have product request,
didReceive response.

00:13:50.166 --> 00:13:52.026 A:middle
This will pass in
all of the products

00:13:52.026 --> 00:13:53.926 A:middle
that you requested
from the App Store.

00:13:54.196 --> 00:13:56.386 A:middle
And each of those products
will retain information

00:13:56.386 --> 00:13:58.816 A:middle
like a localized
title and description.

00:13:59.046 --> 00:14:01.496 A:middle
As I said before this is
a global market place,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.046 --> 00:14:01.496 A:middle
As I said before this is
a global market place,

00:14:01.496 --> 00:14:04.696 A:middle
you're marketing your in-app
purchases around the world.

00:14:05.096 --> 00:14:06.286 A:middle
So it's important to make sure

00:14:06.286 --> 00:14:09.426 A:middle
that you're actually using
localized information

00:14:09.636 --> 00:14:11.216 A:middle
to make your sales.

00:14:11.306 --> 00:14:13.436 A:middle
So localized title
and description,

00:14:14.616 --> 00:14:17.916 A:middle
even more important is
price and price locale.

00:14:18.096 --> 00:14:20.806 A:middle
You want to present the user the
price of your in-app purchases

00:14:20.996 --> 00:14:22.336 A:middle
and you want to make
sure it's presented

00:14:22.336 --> 00:14:24.736 A:middle
in a format that
they understand.

00:14:24.996 --> 00:14:29.316 A:middle
Currency is represented
differently around the world

00:14:29.906 --> 00:14:33.186 A:middle
and you know it's important
that you do it right.

00:14:33.186 --> 00:14:35.606 A:middle
We'll get into that in a moment.

00:14:36.576 --> 00:14:40.136 A:middle
And then finally if you're
hosting your in-app purchase

00:14:40.136 --> 00:14:43.086 A:middle
content, this is something that
you've set up in iTunes Connect,

00:14:43.086 --> 00:14:45.566 A:middle
we actually give information

00:14:45.566 --> 00:14:47.346 A:middle
about the download
contact length

00:14:47.346 --> 00:14:50.216 A:middle
and versions associated
with those purchases.

00:14:50.636 --> 00:14:52.546 A:middle
So as I mentioned the
price, it's very important

00:14:52.546 --> 00:14:58.666 A:middle
that you do the right thing when
presenting those price strings.

00:14:58.986 --> 00:15:01.396 A:middle
When you're presenting those
prices, you want to use


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.986 --> 00:15:01.396 A:middle
When you're presenting those
prices, you want to use

00:15:01.396 --> 00:15:05.166 A:middle
that price locale and pass that
into an NS number formatter,

00:15:05.416 --> 00:15:06.936 A:middle
and that will get
you information

00:15:07.036 --> 00:15:08.666 A:middle
about that pricing information.

00:15:08.906 --> 00:15:12.026 A:middle
That NS number formatter, will
take that price information,

00:15:12.206 --> 00:15:13.956 A:middle
take the locale associated
with it.

00:15:13.956 --> 00:15:16.696 A:middle
If you set it to a currency
format, you can make sure

00:15:16.696 --> 00:15:18.746 A:middle
that you're getting that
pricing information correct.

00:15:19.206 --> 00:15:22.556 A:middle
The other thing you want to do
is to not bother doing any sort

00:15:22.556 --> 00:15:24.356 A:middle
of currency conversion
of your own.

00:15:24.396 --> 00:15:27.376 A:middle
The App Store knows
how to localize,

00:15:27.626 --> 00:15:28.976 A:middle
convert those currencies.

00:15:29.236 --> 00:15:31.206 A:middle
So you don't need to
bother with that at all.

00:15:31.486 --> 00:15:34.776 A:middle
Just present the price using
the NS number formatter as is.

00:15:35.316 --> 00:15:37.836 A:middle
The next step after that
is to present your UI.

00:15:38.226 --> 00:15:39.946 A:middle
Not really going to talk
too much about that,

00:15:40.136 --> 00:15:42.476 A:middle
these are your products,
these are your applications.

00:15:42.476 --> 00:15:44.286 A:middle
You know how to present
them in your UI

00:15:44.826 --> 00:15:47.686 A:middle
to make the best
sales pitch possible.

00:15:48.826 --> 00:15:51.346 A:middle
However, once the
purchase has been complete,

00:15:51.936 --> 00:15:56.036 A:middle
or once the UI has been shown,
we're going to jump right

00:15:56.106 --> 00:15:57.686 A:middle
into making the purchase itself.

00:15:58.036 --> 00:15:59.996 A:middle
And that can be done by adding

00:15:59.996 --> 00:16:02.436 A:middle
and creating an SK
payment object


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.996 --> 00:16:02.436 A:middle
and creating an SK
payment object

00:16:02.436 --> 00:16:04.026 A:middle
and adding it to
the Payment Queue.

00:16:04.816 --> 00:16:07.266 A:middle
Once you've created that SK
payment object and add it

00:16:07.266 --> 00:16:10.316 A:middle
to the Payment Queue,
you'll get a callback

00:16:10.626 --> 00:16:12.886 A:middle
as the payment is
being processed

00:16:13.086 --> 00:16:14.726 A:middle
through updated transactions.

00:16:14.726 --> 00:16:18.016 A:middle
So this is that Payment Queue
Observer you added right

00:16:18.016 --> 00:16:19.376 A:middle
when the application started.

00:16:19.766 --> 00:16:21.626 A:middle
You created your
Payment Queue Observer.

00:16:21.886 --> 00:16:24.256 A:middle
It called Payment Queue
updated transactions.

00:16:24.396 --> 00:16:26.976 A:middle
And you'll get information
about the payment as it's going

00:16:26.976 --> 00:16:29.976 A:middle
through the process so all
you did was you created your

00:16:29.976 --> 00:16:30.686 A:middle
SK payment.

00:16:31.356 --> 00:16:32.716 A:middle
Added it to the Payment Queue.

00:16:32.716 --> 00:16:36.236 A:middle
The information started
coming in and you're going

00:16:36.236 --> 00:16:38.986 A:middle
to get information about all
the transactions in process.

00:16:38.986 --> 00:16:40.566 A:middle
You might have one,
you might have many.

00:16:40.786 --> 00:16:45.246 A:middle
You should iterate through those
transactions and then listen

00:16:45.246 --> 00:16:47.756 A:middle
to the state for each
of those transactions.

00:16:47.966 --> 00:16:49.086 A:middle
It's a couple different states,

00:16:49.086 --> 00:16:50.656 A:middle
the one you're probably
most interested

00:16:50.656 --> 00:16:51.936 A:middle
in is the purchase state.

00:16:51.976 --> 00:16:54.906 A:middle
This is where you know that
the purchase was completed

00:16:55.086 --> 00:16:57.426 A:middle
and should go ahead and
validate that purchase,

00:16:57.666 --> 00:16:59.696 A:middle
we'll get into that
in a little bit,

00:16:59.696 --> 00:17:01.106 A:middle
and make that content available.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.696 --> 00:17:01.106 A:middle
and make that content available.

00:17:01.786 --> 00:17:04.675 A:middle
However, there's one other state
I'd like to talk about as well

00:17:04.915 --> 00:17:07.316 A:middle
and that's the deferred
transaction state.

00:17:07.986 --> 00:17:11.925 A:middle
Deferred was added
back in iOS 8 and it's

00:17:11.925 --> 00:17:14.316 A:middle
for the Ask to Buy feature.

00:17:14.626 --> 00:17:16.945 A:middle
This was to allow
iCloud families

00:17:16.945 --> 00:17:19.685 A:middle
where children could
attempt to make a purchase,

00:17:19.965 --> 00:17:23.326 A:middle
such as an in-app purchase,
and their parent or guardian,

00:17:23.326 --> 00:17:26.366 A:middle
their approver, will have
to decide whether or not

00:17:26.366 --> 00:17:27.626 A:middle
that purchase will go through.

00:17:27.965 --> 00:17:29.686 A:middle
The deferred state is the state

00:17:29.686 --> 00:17:31.166 A:middle
that you're in-app
purchase lands

00:17:31.166 --> 00:17:36.846 A:middle
on when it's currently pending
approval from the parent.

00:17:37.446 --> 00:17:39.796 A:middle
One thing we've seen
a lot and we want

00:17:39.796 --> 00:17:44.006 A:middle
to make it very clear is you
should not block your UI if it's

00:17:44.006 --> 00:17:44.966 A:middle
in the deferred state.

00:17:44.966 --> 00:17:46.496 A:middle
You should handle that in a way

00:17:46.786 --> 00:17:50.886 A:middle
where maybe the purchase
hasn't even occurred yet,

00:17:50.886 --> 00:17:53.516 A:middle
just let the child who's
actually attempting

00:17:53.516 --> 00:17:56.446 A:middle
to use your app make that
purchase, just let them go back

00:17:56.446 --> 00:17:58.356 A:middle
and continue to use the game

00:17:58.356 --> 00:17:59.906 A:middle
or whatever it is
they're interested in.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:00.226 --> 00:18:01.286 A:middle
Because it might be hours,

00:18:01.286 --> 00:18:03.486 A:middle
it might be days before
the parent goes through

00:18:03.486 --> 00:18:04.846 A:middle
and approves that purchase.

00:18:05.146 --> 00:18:07.826 A:middle
So no spinner, no
modal dialogues.

00:18:08.216 --> 00:18:11.636 A:middle
Just treat deferred state as
if the purchase hasn't even,

00:18:11.636 --> 00:18:13.236 A:middle
you know hasn't even
started yet.

00:18:13.266 --> 00:18:18.616 A:middle
One thing I also want to get
into is it's very important

00:18:18.616 --> 00:18:21.796 A:middle
to test your applications
when using in-app purchases,

00:18:21.796 --> 00:18:24.466 A:middle
just like testing your
application any other way.

00:18:24.926 --> 00:18:27.826 A:middle
And this can be done
through the iTunes store

00:18:27.826 --> 00:18:29.226 A:middle
Sandbox environment.

00:18:29.226 --> 00:18:30.986 A:middle
This is a special environment.

00:18:31.306 --> 00:18:33.116 A:middle
If you're running
your application

00:18:33.116 --> 00:18:36.176 A:middle
and it's a developer signed
application, any purchase

00:18:36.176 --> 00:18:39.166 A:middle
that you make will go to
the Sandbox environment.

00:18:40.126 --> 00:18:46.746 A:middle
However, if you're interested in
testing deferred transactions,

00:18:46.746 --> 00:18:49.386 A:middle
there's really no good
way of creating a family

00:18:49.606 --> 00:18:52.056 A:middle
so that you can actually
test the Ask to Buy flow.

00:18:52.546 --> 00:18:55.686 A:middle
So if you want to test your
deferred transaction in Sandbox,

00:18:55.996 --> 00:18:59.886 A:middle
it can be done using
SimulatesAskToBuyInSandbox.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.246 --> 00:19:04.116 A:middle
This is where you create your
SKMutable payment object.

00:19:04.716 --> 00:19:06.046 A:middle
You pass in that product

00:19:06.196 --> 00:19:10.136 A:middle
and then you set the
SimulatesAskToBuyInSandbox flag.

00:19:10.166 --> 00:19:12.976 A:middle
This is a flag that's going
to tell the App Store, hey,

00:19:13.236 --> 00:19:15.626 A:middle
treat this as if a
child was buying this

00:19:15.626 --> 00:19:17.396 A:middle
and that child was
part of a family.

00:19:18.016 --> 00:19:19.956 A:middle
Once you add it to the
Payment Queue that gets sent

00:19:19.956 --> 00:19:22.856 A:middle
up to the App Store and the
App Store will respond back

00:19:22.856 --> 00:19:25.066 A:middle
with a deferred state
to your application.

00:19:25.066 --> 00:19:28.436 A:middle
This is your way of knowing,
hey my app is going to work

00:19:28.436 --> 00:19:29.506 A:middle
when kids are using it.

00:19:30.086 --> 00:19:34.396 A:middle
We also should talk a little
bit about handling errors.

00:19:34.396 --> 00:19:36.536 A:middle
Not everything is
going to go right.

00:19:36.536 --> 00:19:38.836 A:middle
There's going to be error
states in your application.

00:19:39.366 --> 00:19:41.516 A:middle
Especially with in-app
purchases.

00:19:41.906 --> 00:19:46.396 A:middle
One thing to keep in mind is not
all errors are created equal.

00:19:46.396 --> 00:19:47.826 A:middle
I really encourage you to check

00:19:47.826 --> 00:19:50.656 A:middle
out the In-App Purchase
Programming Guide,

00:19:50.656 --> 00:19:53.046 A:middle
or the StoreKit Framework
Reference Guide

00:19:53.426 --> 00:19:56.066 A:middle
to get a good sense of
all the possible errors

00:19:56.066 --> 00:19:59.326 A:middle
that can be returned in
your application over time.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.106 --> 00:20:03.526 A:middle
One thing to keep
in mind is most

00:20:03.526 --> 00:20:05.606 A:middle
of these errors aren't
something that you need

00:20:05.606 --> 00:20:07.956 A:middle
to inform the user about.

00:20:07.956 --> 00:20:10.526 A:middle
Most of these are just errors
that we're informing you

00:20:10.696 --> 00:20:12.276 A:middle
to handle in your application.

00:20:12.786 --> 00:20:15.496 A:middle
A great example of that
is I'm going through,

00:20:15.496 --> 00:20:17.636 A:middle
I'm using your application,
I'm browsing around,

00:20:17.636 --> 00:20:19.176 A:middle
I'm doing a little bit
of window shopping.

00:20:19.406 --> 00:20:20.616 A:middle
I click on purchase.

00:20:21.046 --> 00:20:24.386 A:middle
I'll get the price confirmation
dialog that StoreKit will show.

00:20:24.386 --> 00:20:26.506 A:middle
And then I change my
mind, I want to go back

00:20:26.506 --> 00:20:27.586 A:middle
and see what else is there.

00:20:27.786 --> 00:20:28.746 A:middle
And I hit cancel.

00:20:29.406 --> 00:20:33.646 A:middle
Cancel error, StoreKit will
return a user did cancel error

00:20:33.646 --> 00:20:34.566 A:middle
to your application.

00:20:34.886 --> 00:20:36.576 A:middle
There's no need to
present the user

00:20:36.576 --> 00:20:38.676 A:middle
with a user did cancel alert.

00:20:39.026 --> 00:20:41.316 A:middle
And we'll see this in
applications from time to time.

00:20:41.316 --> 00:20:42.836 A:middle
The user knows that
they cancelled.

00:20:43.206 --> 00:20:46.956 A:middle
There's no reason to
repeat that back to them.

00:20:47.516 --> 00:20:49.506 A:middle
Let StoreKit handle
the transaction flow

00:20:49.506 --> 00:20:50.496 A:middle
as much as possible.

00:20:50.496 --> 00:20:52.146 A:middle
Again, we got into
the Payment Queue.

00:20:52.146 --> 00:20:55.946 A:middle
The Payment Queue is where
the payment will be processed.

00:20:56.266 --> 00:20:58.026 A:middle
The App Store and StoreKit

00:20:58.086 --> 00:21:01.076 A:middle
for you will confirm the
purchase with the user.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.086 --> 00:21:01.076 A:middle
for you will confirm the
purchase with the user.

00:21:01.296 --> 00:21:02.506 A:middle
They'll present a price.

00:21:02.976 --> 00:21:05.316 A:middle
That price should match
what was inside your app.

00:21:05.316 --> 00:21:06.536 A:middle
So that's why isn't important

00:21:06.536 --> 00:21:09.396 A:middle
to make sure you localize the
pricing information correctly.

00:21:09.746 --> 00:21:11.076 A:middle
We'll authenticate the user.

00:21:11.326 --> 00:21:13.456 A:middle
If there's any issue with
their billing information,

00:21:13.456 --> 00:21:14.496 A:middle
we'll handle that.

00:21:14.986 --> 00:21:17.376 A:middle
No need for you to
pop a confirmation

00:21:17.376 --> 00:21:20.936 A:middle
or do anything special, let
StoreKit handle that for you.

00:21:22.736 --> 00:21:25.836 A:middle
So we talked a little bit about
before the transaction queue

00:21:25.836 --> 00:21:27.306 A:middle
and we talked about the states

00:21:27.306 --> 00:21:29.356 A:middle
that can be returned
for your payment.

00:21:30.296 --> 00:21:33.216 A:middle
Once your payment has made
it to the purchase state,

00:21:33.246 --> 00:21:35.056 A:middle
you have a number
of choices you need

00:21:35.056 --> 00:21:36.406 A:middle
to make in your application.

00:21:38.776 --> 00:21:42.846 A:middle
Specifically, around validating
that that purchase is backed

00:21:42.906 --> 00:21:45.136 A:middle
by a real monetary transaction.

00:21:45.776 --> 00:21:48.976 A:middle
So we'll get into a couple
different ways of doing this.

00:21:49.336 --> 00:21:51.286 A:middle
But again, it's your
application,

00:21:51.286 --> 00:21:52.426 A:middle
they're your products.

00:21:52.656 --> 00:21:53.836 A:middle
So it's really important to keep

00:21:53.836 --> 00:21:57.466 A:middle
in mind exactly what
technologies you're using

00:21:57.686 --> 00:22:01.056 A:middle
and what level of
security you want to use


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.686 --> 00:22:01.056 A:middle
and what level of
security you want to use

00:22:01.056 --> 00:22:02.926 A:middle
to validate your purchase.

00:22:05.236 --> 00:22:09.646 A:middle
So receipt validation, this is
the receipt that is returned

00:22:09.646 --> 00:22:11.936 A:middle
to the application at
the end of the purchase.

00:22:11.986 --> 00:22:17.596 A:middle
It's just like a bill that a
consumer might get when shopping

00:22:17.596 --> 00:22:20.316 A:middle
at a mall or something
like that.

00:22:20.506 --> 00:22:24.146 A:middle
It includes all this information
about the purchasing of the app

00:22:24.146 --> 00:22:25.956 A:middle
and the purchasing
of your in-apps.

00:22:26.376 --> 00:22:28.456 A:middle
And there's kind
of two main ways

00:22:28.456 --> 00:22:30.736 A:middle
that you can attack
validating that receipt.

00:22:31.216 --> 00:22:33.586 A:middle
First is on the device itself.

00:22:33.836 --> 00:22:37.826 A:middle
This receipt comes down, you
can write code right there

00:22:37.826 --> 00:22:40.526 A:middle
on the device to pull
it apart, inspect it,

00:22:40.766 --> 00:22:43.936 A:middle
make sure you know authenticate
that it came from Apple,

00:22:43.936 --> 00:22:47.196 A:middle
make sure that it's from
a valid monetary source.

00:22:47.696 --> 00:22:51.706 A:middle
And this can be done
kind of generally is

00:22:51.706 --> 00:22:54.846 A:middle
for just unlocking features and
content right within the app.

00:22:54.846 --> 00:22:56.926 A:middle
So again, this is one of the
choices you have to make.

00:22:57.206 --> 00:22:59.316 A:middle
Is this a purely client side,

00:22:59.316 --> 00:23:01.446 A:middle
right inside your
app type of purchase?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.316 --> 00:23:01.446 A:middle
right inside your
app type of purchase?

00:23:01.996 --> 00:23:05.626 A:middle
Or if you have a server
side, you might want

00:23:05.626 --> 00:23:07.896 A:middle
to actually have the
server validate the receipt

00:23:07.956 --> 00:23:10.066 A:middle
because you want that
to be the gateway

00:23:10.066 --> 00:23:11.756 A:middle
for your content or service.

00:23:11.986 --> 00:23:14.896 A:middle
And this can be done by taking
that receipt that was sent

00:23:14.896 --> 00:23:18.396 A:middle
to the device, uploading it
to your server and then having

00:23:18.396 --> 00:23:21.716 A:middle
that server send the receipt
over to the App Store,

00:23:21.896 --> 00:23:25.176 A:middle
there's a backend API
to verify that receipt.

00:23:25.596 --> 00:23:28.316 A:middle
And that can be done
server-to-server.

00:23:29.726 --> 00:23:30.976 A:middle
One note with that though,

00:23:30.976 --> 00:23:34.676 A:middle
is yes the App Store does have
a backend API that can take

00:23:34.676 --> 00:23:39.076 A:middle
in that receipt and validate
it, but you should never send

00:23:39.076 --> 00:23:41.926 A:middle
that receipt to that API
directly from the device.

00:23:42.076 --> 00:23:46.836 A:middle
That is not a secure
mechanism and there are limits

00:23:46.836 --> 00:23:50.706 A:middle
to how trustworthy that can
be from your application.

00:23:51.056 --> 00:23:55.086 A:middle
So if you're going to use
the verify receipt endpoint,

00:23:55.086 --> 00:23:57.376 A:middle
it should really be
from your hosted server,

00:23:57.676 --> 00:23:59.326 A:middle
right into the App Store itself.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:01.676 --> 00:24:04.706 A:middle
So let's get a little bit
deeper into what the receipt is.

00:24:05.686 --> 00:24:09.996 A:middle
The receipt is a trusted record
of app and in-app purchases.

00:24:10.576 --> 00:24:13.876 A:middle
It contains information
that will allow you to know

00:24:13.916 --> 00:24:17.326 A:middle
that this app was bought by
this user on this device,

00:24:17.646 --> 00:24:21.246 A:middle
and those in-app were bought
by that user on that device.

00:24:22.096 --> 00:24:23.566 A:middle
Stored right on the device,

00:24:23.566 --> 00:24:27.006 A:middle
right into the application
container of your app itself.

00:24:27.726 --> 00:24:30.986 A:middle
It's issued by the App Store and
it contains information in it

00:24:30.986 --> 00:24:33.636 A:middle
that allow you to verify
that it actually came

00:24:33.636 --> 00:24:35.096 A:middle
from the App Store itself.

00:24:35.706 --> 00:24:39.436 A:middle
And again, it's for your
app, for that device only.

00:24:39.706 --> 00:24:41.696 A:middle
If your app is running

00:24:41.696 --> 00:24:43.716 A:middle
on a different device it will
get a very different, you know,

00:24:43.716 --> 00:24:45.766 A:middle
it will get a different
receipt for a different user.

00:24:47.356 --> 00:24:50.386 A:middle
This is kind of, this
just gives you a sense

00:24:50.386 --> 00:24:52.176 A:middle
of what it looks like.

00:24:52.486 --> 00:24:56.006 A:middle
Again, stored in the app bundle.

00:24:56.436 --> 00:24:57.896 A:middle
We give you an API to get it.

00:24:57.896 --> 00:24:59.566 A:middle
We'll see what that
looks like in a moment.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:00.416 --> 00:25:02.156 A:middle
And it's a single file.

00:25:02.536 --> 00:25:05.846 A:middle
Old, old, old versions
of the receipt there used

00:25:05.846 --> 00:25:07.966 A:middle
to be multiple files for
each in-app purchase,

00:25:07.966 --> 00:25:11.086 A:middle
but since iOS 7 we've
had a unified receipt

00:25:11.086 --> 00:25:13.646 A:middle
that contains all this
information in one single file.

00:25:14.216 --> 00:25:17.746 A:middle
It also, again, contains
certificates and signatures

00:25:17.746 --> 00:25:21.006 A:middle
to allow you to verify
that this receipt is valid.

00:25:21.966 --> 00:25:27.216 A:middle
We do this through a Public
Key Cryptography Standard

00:25:27.216 --> 00:25:28.526 A:middle
7 Container.

00:25:28.726 --> 00:25:31.686 A:middle
This is the container that
contains all this information

00:25:31.686 --> 00:25:33.836 A:middle
in it and this is
an open standard.

00:25:33.876 --> 00:25:36.456 A:middle
So there's a lot of information
that you can use out there

00:25:36.776 --> 00:25:40.426 A:middle
on how to work with
a PKCS7 Container.

00:25:40.936 --> 00:25:43.526 A:middle
The payload of that container,

00:25:43.916 --> 00:25:46.686 A:middle
the thing that contains
the actual information

00:25:46.686 --> 00:25:49.066 A:middle
that you're going to be
parsing out, that's encoded

00:25:49.066 --> 00:25:53.066 A:middle
in an ASN1 format, again
public open standard.

00:25:53.766 --> 00:25:57.576 A:middle
And there's a lot of
great options out there

00:25:57.576 --> 00:26:01.106 A:middle
for verifying this, OpenSSL
is a very common one.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:57.576 --> 00:26:01.106 A:middle
for verifying this, OpenSSL
is a very common one.

00:26:01.726 --> 00:26:03.386 A:middle
Sometimes people
create their own.

00:26:03.826 --> 00:26:06.226 A:middle
But again, something
to stress here is

00:26:06.226 --> 00:26:08.876 A:middle
that this is your
application, this is your money,

00:26:08.946 --> 00:26:10.476 A:middle
this is your business.

00:26:10.766 --> 00:26:12.826 A:middle
So you've got to make
good choices on how best

00:26:12.826 --> 00:26:15.286 A:middle
to verify this receipt and
what technologies you're going

00:26:15.286 --> 00:26:15.906 A:middle
to use.

00:26:17.596 --> 00:26:22.466 A:middle
However, whatever you choose,
there's some similar processes

00:26:22.466 --> 00:26:24.256 A:middle
that you're going to go through.

00:26:24.396 --> 00:26:26.806 A:middle
First up, is you're going
to locate the receipt

00:26:26.806 --> 00:26:29.266 A:middle
in the application
using an NS bundle API.

00:26:30.026 --> 00:26:32.456 A:middle
And again, this is what
it looks like in Swift.

00:26:32.506 --> 00:26:35.706 A:middle
You can call right
in that NS bundle,

00:26:36.056 --> 00:26:37.576 A:middle
and there's an App
Store receipt URL

00:26:37.576 --> 00:26:39.376 A:middle
that will be returned by that.

00:26:39.376 --> 00:26:42.316 A:middle
This is a local URL,
local to the file system.

00:26:42.876 --> 00:26:45.606 A:middle
Once you have that URL,
you pass it into NS data

00:26:45.606 --> 00:26:50.336 A:middle
and you get the binary
payload of that receipt.

00:26:50.826 --> 00:26:52.646 A:middle
Now that you have
that binary payload,

00:26:52.696 --> 00:26:54.316 A:middle
a couple things to keep in mind.

00:26:55.136 --> 00:26:58.446 A:middle
The certificates on there
will have an expiration date,

00:26:58.446 --> 00:26:59.806 A:middle
but you've got to
be very careful

00:26:59.806 --> 00:27:01.506 A:middle
about checking that
expiration date.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.806 --> 00:27:01.506 A:middle
about checking that
expiration date.

00:27:02.506 --> 00:27:06.896 A:middle
Just because it was issued at
a certain time, doesn't mean

00:27:07.266 --> 00:27:09.576 A:middle
that that expiration
date is valid

00:27:09.576 --> 00:27:11.036 A:middle
for all time in the future.

00:27:11.596 --> 00:27:13.626 A:middle
So if you're checking
the expiration date,

00:27:13.786 --> 00:27:17.496 A:middle
compare it against to when
the receipt was issued

00:27:17.496 --> 00:27:21.006 A:middle
from the App Store, not to
what the current date is.

00:27:21.346 --> 00:27:23.726 A:middle
It's not like an SSL
handshake, where you want

00:27:23.726 --> 00:27:24.846 A:middle
to check it every time.

00:27:25.176 --> 00:27:29.756 A:middle
It's only valid for when it
was issued, or it's only valid

00:27:29.756 --> 00:27:31.716 A:middle
to check the date for
when it was issued.

00:27:32.226 --> 00:27:34.736 A:middle
Or it's perfectly valid not
even to check the date at all.

00:27:35.086 --> 00:27:37.536 A:middle
But what you do want
to do is check

00:27:37.536 --> 00:27:40.566 A:middle
up to the root certificate
authority on the receipt.

00:27:41.186 --> 00:27:44.226 A:middle
That will verify that
it came from Apple.

00:27:44.226 --> 00:27:46.996 A:middle
That you can trust it
because it is Apple's receipt.

00:27:47.756 --> 00:27:48.936 A:middle
So check up to the root.

00:27:48.936 --> 00:27:54.526 A:middle
So again, this just kind
of gives you an idea

00:27:54.526 --> 00:27:56.606 A:middle
of what it looks like
inside the receipt.

00:27:57.316 --> 00:28:00.296 A:middle
The payload of it, that ASN1
format that I was talking


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.316 --> 00:28:00.296 A:middle
The payload of it, that ASN1
format that I was talking

00:28:00.296 --> 00:28:02.126 A:middle
about is a series of attributes.

00:28:02.126 --> 00:28:04.356 A:middle
You can think of it
almost as an NS dictionary.

00:28:04.586 --> 00:28:06.826 A:middle
It contains types and values.

00:28:07.166 --> 00:28:09.506 A:middle
And we're going to highlight
some of those types and values.

00:28:09.836 --> 00:28:12.736 A:middle
There's more in there than
we're going to talk about today.

00:28:12.736 --> 00:28:14.236 A:middle
And you can get a
lot of that online

00:28:14.236 --> 00:28:16.996 A:middle
through our Receipt
Validation Programming Guide.

00:28:17.726 --> 00:28:22.646 A:middle
But some of the main ones you're
going to want to use are type 2

00:28:22.646 --> 00:28:25.836 A:middle
and type 3, that includes
the bundle identifier

00:28:25.836 --> 00:28:28.826 A:middle
and the bundle version that
the receipt was meant for.

00:28:29.916 --> 00:28:32.116 A:middle
Hopefully that matches
what's in your application

00:28:32.166 --> 00:28:32.956 A:middle
and you should check it.

00:28:33.986 --> 00:28:35.876 A:middle
So you should check
the bundle identifier.

00:28:35.986 --> 00:28:37.316 A:middle
You should check
the bundle version.

00:28:37.316 --> 00:28:38.576 A:middle
And then one thing to keep

00:28:38.576 --> 00:28:42.916 A:middle
in mind is you should use hard
coded values right inside the

00:28:42.916 --> 00:28:44.286 A:middle
binary of your app.

00:28:44.806 --> 00:28:48.346 A:middle
It's a lot easier for me to go
in and change the info P list,

00:28:48.716 --> 00:28:52.626 A:middle
if that is what you're using to
match a phony receipt than it is

00:28:52.626 --> 00:28:54.206 A:middle
for me to change the payload

00:28:54.206 --> 00:28:56.456 A:middle
of your application
to match the receipt.

00:28:56.586 --> 00:28:59.276 A:middle
So if you really want to make
sure that that receipt is

00:28:59.276 --> 00:29:02.436 A:middle
for your application,
use hard coded values.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.276 --> 00:29:02.436 A:middle
for your application,
use hard coded values.

00:29:04.186 --> 00:29:07.396 A:middle
Now that you know that this
receipt is for your application,

00:29:07.396 --> 00:29:08.206 A:middle
you want to make sure it is

00:29:08.206 --> 00:29:10.616 A:middle
for the device that's
running the receipt right then

00:29:10.616 --> 00:29:11.036 A:middle
and there.

00:29:11.106 --> 00:29:12.766 A:middle
And this is a little trickier.

00:29:13.006 --> 00:29:17.776 A:middle
What you want to do is take
a look at the SHA-1 hash

00:29:17.776 --> 00:29:19.706 A:middle
that is returned in type 5.

00:29:20.516 --> 00:29:22.556 A:middle
Type 5 contains this hash.

00:29:22.786 --> 00:29:26.476 A:middle
The hash is made up of
pieces of information

00:29:26.476 --> 00:29:28.806 A:middle
that the App Store knows
at the time of purchase.

00:29:29.036 --> 00:29:32.476 A:middle
And pieces of information that
you know a time of verification.

00:29:33.176 --> 00:29:35.286 A:middle
That specifically
is the bundle ID.

00:29:36.186 --> 00:29:38.516 A:middle
So again hard coded value
you want to keep in your app,

00:29:38.556 --> 00:29:39.736 A:middle
the bundle ID of your app.

00:29:40.296 --> 00:29:41.746 A:middle
The device identifier.

00:29:42.106 --> 00:29:43.736 A:middle
This is a, there
are APIs for that.

00:29:43.736 --> 00:29:47.456 A:middle
It's a little different on
iOS versus macOS, but you want

00:29:47.456 --> 00:29:49.316 A:middle
to load up that device
identifier.

00:29:49.446 --> 00:29:51.636 A:middle
And then this Opaque Value.

00:29:51.796 --> 00:29:54.636 A:middle
This Opaque Value is
basically it's a little bit

00:29:54.636 --> 00:29:55.896 A:middle
of cryptographic entropy.

00:29:55.896 --> 00:29:58.536 A:middle
It's a secret salt that is
included in the receipt.

00:29:58.536 --> 00:30:02.116 A:middle
It allows the hash to change
over time even if the bundle ID


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.536 --> 00:30:02.116 A:middle
It allows the hash to change
over time even if the bundle ID

00:30:02.116 --> 00:30:03.926 A:middle
and the device identifier
aren't changing.

00:30:04.236 --> 00:30:06.576 A:middle
You should basically take
the Opaque Value that's

00:30:06.576 --> 00:30:09.016 A:middle
in the receipt and
include it in your hash.

00:30:09.626 --> 00:30:14.356 A:middle
Once you have that, SHA-1
hash compare it to attribute 5

00:30:14.356 --> 00:30:17.256 A:middle
and if they match, you know
it was for your device.

00:30:18.036 --> 00:30:24.556 A:middle
And again it's unique to
your app on that device.

00:30:25.586 --> 00:30:29.726 A:middle
The receipt also contains
information about all

00:30:29.726 --> 00:30:31.136 A:middle
of your in-app purchases.

00:30:31.136 --> 00:30:37.376 A:middle
So what we see here is a whole
bunch of, more than one Type 17.

00:30:37.376 --> 00:30:41.286 A:middle
Type 17 is for each and every
purchase that the user's made

00:30:41.286 --> 00:30:44.326 A:middle
with your application it
will include one record

00:30:44.636 --> 00:30:45.856 A:middle
for that in-app purchase.

00:30:46.406 --> 00:30:50.116 A:middle
The pay load for Type
17 won't be a string,

00:30:50.116 --> 00:30:53.806 A:middle
it will actually be
another ASN1 document

00:30:53.856 --> 00:30:56.826 A:middle
and that will have its
own values inside of it.

00:30:57.296 --> 00:30:59.646 A:middle
So what do those look like?

00:30:59.776 --> 00:31:03.806 A:middle
Well 1701, that's the
quantity of purchases made.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.776 --> 00:31:03.806 A:middle
Well 1701, that's the
quantity of purchases made.

00:31:03.846 --> 00:31:05.916 A:middle
So we talked about
consumables before,

00:31:06.326 --> 00:31:09.406 A:middle
the user could have
purchased 10 bags

00:31:09.406 --> 00:31:12.966 A:middle
of coins inside your
game, or 100 bags of coin.

00:31:13.236 --> 00:31:17.666 A:middle
That's going to be the quantity,
the number of purchases

00:31:17.666 --> 00:31:19.966 A:middle
that was made against that
particular identifier.

00:31:21.156 --> 00:31:23.486 A:middle
The product identifier, we
talked about this before.

00:31:23.486 --> 00:31:25.506 A:middle
This is that identifier
that you use

00:31:25.506 --> 00:31:30.336 A:middle
to load your in-app purchase
data from the App Store

00:31:30.336 --> 00:31:32.626 A:middle
and what you set them
up in iTunes Connect as.

00:31:33.676 --> 00:31:36.606 A:middle
The identifier, this is
a transaction identifier.

00:31:36.606 --> 00:31:39.366 A:middle
This is a unique identifier for
the transaction that was used

00:31:39.366 --> 00:31:40.436 A:middle
to make that purchase.

00:31:41.406 --> 00:31:43.246 A:middle
The date of the purchase.

00:31:43.856 --> 00:31:47.486 A:middle
And then finally one
new thing, it's not new,

00:31:47.486 --> 00:31:50.676 A:middle
but one thing I want to
highlight is we also include

00:31:50.906 --> 00:31:52.736 A:middle
for auto-renewing subscriptions,

00:31:52.846 --> 00:31:55.326 A:middle
the subscription
expiration date.

00:31:55.826 --> 00:31:58.326 A:middle
So if you're switching your
app over to subscriptions,

00:31:58.596 --> 00:31:59.996 A:middle
that field's important to you.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:00.366 --> 00:32:02.446 A:middle
You're going to use that to
kind of, you're going to use

00:32:02.446 --> 00:32:04.936 A:middle
that to know is this
subscription still valid?

00:32:05.156 --> 00:32:11.286 A:middle
Do we need to ask the user to,
or you need to double check

00:32:11.286 --> 00:32:13.576 A:middle
that the user is still
in a valid subscription?

00:32:14.036 --> 00:32:15.856 A:middle
So that field is very important.

00:32:17.956 --> 00:32:19.156 A:middle
And then one other note.

00:32:19.376 --> 00:32:21.786 A:middle
If you have an app that's
currently in the Store,

00:32:22.536 --> 00:32:25.076 A:middle
and it's a pay for app
and you're interested

00:32:25.076 --> 00:32:27.456 A:middle
in switching it over to
a subscription model,

00:32:28.146 --> 00:32:31.326 A:middle
one thing you want to make sure
you check is inside the main

00:32:31.326 --> 00:32:34.306 A:middle
receipt, the app receipt
itself is Type 19.

00:32:34.646 --> 00:32:37.416 A:middle
This includes the original
application version

00:32:37.416 --> 00:32:39.126 A:middle
that that app was bought with.

00:32:39.756 --> 00:32:43.156 A:middle
So if I bought it as version
1.0, which was a pay for app

00:32:43.576 --> 00:32:46.316 A:middle
and in version 2.0 you
moved to subscriptions,

00:32:46.746 --> 00:32:49.216 A:middle
I want to take a look at
that original application,

00:32:50.186 --> 00:32:54.266 A:middle
because I want to make sure I
treat that user as the paid user

00:32:54.266 --> 00:32:57.206 A:middle
that they are and not as
the subscription user.

00:32:57.576 --> 00:33:00.486 A:middle
I think it's a really bad
experience if the model moves


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:57.576 --> 00:33:00.486 A:middle
I think it's a really bad
experience if the model moves

00:33:00.486 --> 00:33:03.046 A:middle
over to subscriptions
and you don't respect

00:33:03.046 --> 00:33:05.226 A:middle
that they purchased
that app originally.

00:33:05.586 --> 00:33:06.956 A:middle
So it's important
to keep in mind

00:33:06.956 --> 00:33:10.466 A:middle
if you're switching
to subscriptions.

00:33:12.066 --> 00:33:13.646 A:middle
A couple other notes
about the receipt.

00:33:13.646 --> 00:33:16.106 A:middle
The receipt is issued
at the time of purchase.

00:33:17.016 --> 00:33:20.196 A:middle
But it actually is
also renewable.

00:33:21.146 --> 00:33:22.216 A:middle
But it's only renewable

00:33:22.216 --> 00:33:25.036 A:middle
for certain types
of in-app purchases.

00:33:25.286 --> 00:33:27.346 A:middle
So when we're talking
about consumable

00:33:27.346 --> 00:33:31.116 A:middle
and non-renewing subscriptions,
they are not going

00:33:31.116 --> 00:33:33.326 A:middle
to be refreshed with
the receipt.

00:33:34.136 --> 00:33:38.426 A:middle
So consumable and nonrenewable
subscriptions only appear once.

00:33:38.426 --> 00:33:41.136 A:middle
They appear right after
that transaction was made.

00:33:41.136 --> 00:33:45.046 A:middle
And they're not going to be
there when the user refreshes

00:33:45.046 --> 00:33:47.886 A:middle
that receipt either on that
device or when they switch

00:33:47.886 --> 00:33:49.006 A:middle
to a different device.

00:33:50.166 --> 00:33:54.466 A:middle
However, non-consumable and
auto renewing subscriptions will

00:33:54.466 --> 00:33:56.246 A:middle
always be in the user's receipt.

00:33:56.796 --> 00:33:58.156 A:middle
And you can get those back

00:33:58.156 --> 00:34:01.126 A:middle
and should get those
back via a StoreKit API.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.156 --> 00:34:01.126 A:middle
and should get those
back via a StoreKit API.

00:34:01.126 --> 00:34:04.566 A:middle
We can take a look at
what that looks like.

00:34:04.566 --> 00:34:07.526 A:middle
It's a little different
on IOS versus macOS.

00:34:08.085 --> 00:34:11.525 A:middle
On iOS, the receipt
doesn't exist or is invalid,

00:34:11.525 --> 00:34:14.096 A:middle
you're going to want to use
this StoreKit API to refresh it.

00:34:14.876 --> 00:34:17.775 A:middle
But keep in mind that you're
going to have to have network.

00:34:17.775 --> 00:34:20.025 A:middle
We have to make a
connection to the App Store.

00:34:20.525 --> 00:34:22.176 A:middle
We have to validate the user.

00:34:22.545 --> 00:34:23.856 A:middle
We've got to know
that they're the ones

00:34:23.856 --> 00:34:25.045 A:middle
who have actually
bought this thing.

00:34:25.045 --> 00:34:27.686 A:middle
So they're going to have to
either enter in their password,

00:34:27.686 --> 00:34:30.886 A:middle
or use their thumb print.

00:34:31.396 --> 00:34:33.366 A:middle
And if you're doing anything

00:34:33.366 --> 00:34:37.996 A:middle
like refreshing the receipt
every time the app launches,

00:34:38.166 --> 00:34:40.416 A:middle
which is really not a
great pattern to follow,

00:34:40.686 --> 00:34:41.735 A:middle
or if you're doing anything

00:34:41.735 --> 00:34:43.826 A:middle
where you're checking
the receipt is invalid

00:34:44.156 --> 00:34:47.916 A:middle
and then fetching it because you
know maybe there's something,

00:34:48.056 --> 00:34:50.295 A:middle
something doesn't look
right, you want to be careful

00:34:50.295 --> 00:34:52.616 A:middle
that you don't get stuck in
a loop over and over again.

00:34:52.616 --> 00:34:55.766 A:middle
If your app crashes and you're
constantly checking your receipt

00:34:55.766 --> 00:34:56.496 A:middle
on launch.

00:34:56.976 --> 00:34:59.076 A:middle
Or if you keep checking
and it's invalid

00:34:59.076 --> 00:35:00.716 A:middle
and there's something
not quite right


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.076 --> 00:35:00.716 A:middle
and there's something
not quite right

00:35:00.716 --> 00:35:04.006 A:middle
about your validation code, you
don't want to validate and fetch

00:35:04.006 --> 00:35:06.186 A:middle
that receipt over, and
over, and over again.

00:35:06.426 --> 00:35:08.416 A:middle
So that's something
to be careful about.

00:35:09.556 --> 00:35:13.856 A:middle
This could be done through
again, on iOS, this can be done

00:35:13.856 --> 00:35:16.496 A:middle
through an SKRecipt
Refresh Request.

00:35:17.096 --> 00:35:18.886 A:middle
You set your delegate
and you call start.

00:35:19.266 --> 00:35:21.766 A:middle
This will inform your
application right

00:35:21.766 --> 00:35:25.116 A:middle
on the delegate when the receipt
is updated and you can go

00:35:25.116 --> 00:35:28.046 A:middle
and process the transactions
in that receipt just

00:35:28.046 --> 00:35:30.236 A:middle
as if they were purchased
by the user.

00:35:31.336 --> 00:35:35.306 A:middle
On macOS a little different
if the receipt is invalid,

00:35:35.906 --> 00:35:38.456 A:middle
you're going to want
to exit with code 173,

00:35:38.656 --> 00:35:41.746 A:middle
this will tell Finder, hey
go fetch the receipt for me.

00:35:41.746 --> 00:35:46.996 A:middle
Again, it's going to require
a network and the user's going

00:35:46.996 --> 00:35:48.576 A:middle
to have to be signed
into the Store.

00:35:48.706 --> 00:35:52.766 A:middle
And this can just be
done by calling exit 173.

00:35:53.346 --> 00:35:57.276 A:middle
And then I just want
to re-highlight again

00:35:57.276 --> 00:35:59.086 A:middle
with server-to-server
validation.

00:35:59.086 --> 00:36:01.476 A:middle
If you're doing an auto
renewing receipt and you have,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.086 --> 00:36:01.476 A:middle
If you're doing an auto
renewing receipt and you have,

00:36:01.476 --> 00:36:03.126 A:middle
an auto renewing subscription

00:36:03.336 --> 00:36:05.516 A:middle
of if you have content that's
available on the server,

00:36:05.516 --> 00:36:09.836 A:middle
you probably have a hosted
implementation backing

00:36:09.836 --> 00:36:11.226 A:middle
up your in-app purchases.

00:36:11.626 --> 00:36:14.936 A:middle
And so if you're doing
server-to-server validation this

00:36:14.936 --> 00:36:18.236 A:middle
will allow you to validate on
the server side that the receipt

00:36:18.236 --> 00:36:20.646 A:middle
that the user got for their
in-app purchases were valid.

00:36:21.166 --> 00:36:23.796 A:middle
So again, you take that
receipt that was on the device

00:36:23.796 --> 00:36:25.096 A:middle
and you upload it to the server.

00:36:26.296 --> 00:36:30.986 A:middle
However, I'm going to
highlight it one more time,

00:36:31.096 --> 00:36:34.986 A:middle
don't send the receipt directly
to the verify receipt endpoint.

00:36:35.476 --> 00:36:39.436 A:middle
It's not secure and you
should not be doing that.

00:36:40.246 --> 00:36:43.876 A:middle
One thing to note the verify
receipt endpoint returns a JSON

00:36:43.876 --> 00:36:46.096 A:middle
payload and that will
actually include information

00:36:46.406 --> 00:36:48.866 A:middle
like if the receipt you had
was maybe a little out of date,

00:36:49.166 --> 00:36:51.766 A:middle
you'll get the latest version
right back from the App Store.

00:36:51.976 --> 00:36:55.226 A:middle
And it will include some
information about was it valid

00:36:55.466 --> 00:36:59.256 A:middle
or if there was some other
state wrong with the receipt.

00:36:59.326 --> 00:37:02.006 A:middle
So again, there are
documentation online


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.326 --> 00:37:02.006 A:middle
So again, there are
documentation online

00:37:02.296 --> 00:37:05.226 A:middle
about exactly how the verify
receipt endpoint works.

00:37:07.736 --> 00:37:11.486 A:middle
Okay so now we've gotten through
that, we've made the purchase,

00:37:11.736 --> 00:37:13.436 A:middle
we've processed the transaction.

00:37:14.116 --> 00:37:17.306 A:middle
It's up to you to decide exactly
how you're going to verify

00:37:17.306 --> 00:37:19.446 A:middle
that receipt and what level
of security you're going

00:37:19.446 --> 00:37:21.276 A:middle
to put behind it and what
technologies you're going

00:37:21.276 --> 00:37:21.806 A:middle
to use.

00:37:22.176 --> 00:37:24.156 A:middle
You validated that
that purchase was real.

00:37:24.156 --> 00:37:26.446 A:middle
That there was a monetary
transaction behind it.

00:37:26.446 --> 00:37:30.106 A:middle
It's up to you to make what
the user purchased available

00:37:30.106 --> 00:37:30.506 A:middle
to them.

00:37:30.506 --> 00:37:32.756 A:middle
Make good on your
end of the deal.

00:37:32.936 --> 00:37:36.026 A:middle
And so there's a couple
ways of doing this

00:37:36.356 --> 00:37:37.846 A:middle
and we talked about it before.

00:37:38.146 --> 00:37:40.046 A:middle
You might just have
functionality that's hidden

00:37:40.046 --> 00:37:41.846 A:middle
in your app that
you're about to unlock.

00:37:42.306 --> 00:37:44.046 A:middle
A basic version of
your application.

00:37:44.046 --> 00:37:48.096 A:middle
A free basic version that now is
a pro edition and you just need

00:37:48.096 --> 00:37:50.726 A:middle
to set that state and make
that available to the user.

00:37:51.366 --> 00:37:54.616 A:middle
Or if you have content that's
coming down from the server,

00:37:54.876 --> 00:37:56.666 A:middle
you need to download it.

00:37:57.226 --> 00:37:58.636 A:middle
Whole bunch of different
technologies,

00:37:58.636 --> 00:38:00.156 A:middle
whole bunch of different
ways of doing that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.636 --> 00:38:00.156 A:middle
whole bunch of different
ways of doing that.

00:38:00.156 --> 00:38:01.766 A:middle
I want to highlight
a few of them now.

00:38:02.556 --> 00:38:05.416 A:middle
One that's a little newer

00:38:05.416 --> 00:38:08.626 A:middle
that Apple provides is
on-demand resources.

00:38:08.996 --> 00:38:11.516 A:middle
This is a way of
taking your application

00:38:11.756 --> 00:38:15.156 A:middle
and having the initial
download be as small

00:38:15.156 --> 00:38:16.486 A:middle
and compact as possible.

00:38:16.486 --> 00:38:17.606 A:middle
Just the binary.

00:38:17.606 --> 00:38:20.956 A:middle
And if you're going to have
other resources associated

00:38:20.956 --> 00:38:23.156 A:middle
with that application, if
your games have a bunch

00:38:23.156 --> 00:38:26.676 A:middle
of different levels and
they have you know graphics

00:38:26.676 --> 00:38:29.556 A:middle
or videos associated with
them, you can break that up

00:38:29.556 --> 00:38:33.066 A:middle
into different components
within your apps manifest.

00:38:33.806 --> 00:38:38.916 A:middle
On-demand resources is hosted in
the App Store, so you don't have

00:38:38.916 --> 00:38:40.086 A:middle
to worry about hosting.

00:38:40.346 --> 00:38:41.846 A:middle
It's scalable and reliable.

00:38:41.846 --> 00:38:44.306 A:middle
We have caching all
over the world for this.

00:38:44.676 --> 00:38:46.986 A:middle
Your users will be able
to get their content fast.

00:38:48.156 --> 00:38:52.756 A:middle
One thing to keep in mind is
it can contain any type except

00:38:52.756 --> 00:38:53.896 A:middle
executable code.

00:38:53.896 --> 00:38:56.806 A:middle
So all that code has to be
right in your original binary,

00:38:56.806 --> 00:39:00.056 A:middle
but it can contain any other
content you might want to have.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:56.806 --> 00:39:00.056 A:middle
but it can contain any other
content you might want to have.

00:39:00.146 --> 00:39:05.276 A:middle
And it's also available
only on iOS and tvOS.

00:39:05.276 --> 00:39:08.496 A:middle
macOS doesn't currently
support on-demand resources.

00:39:09.106 --> 00:39:11.366 A:middle
So that's a technology
you may choose to use

00:39:11.366 --> 00:39:14.666 A:middle
to fetch additional content
after a purchase has been made.

00:39:14.666 --> 00:39:16.606 A:middle
If you're interested in
learning more about it,

00:39:16.606 --> 00:39:20.736 A:middle
I highly suggest you check out
Optimizing On-Demand Resources.

00:39:21.106 --> 00:39:26.516 A:middle
It's in Mission, this
room, Thursday at 10 a.m.

00:39:27.266 --> 00:39:30.136 A:middle
Another technology that Apple
provides is hosted in-app

00:39:30.136 --> 00:39:30.976 A:middle
purchase content.

00:39:30.976 --> 00:39:33.486 A:middle
This is content that
you can associate right

00:39:33.486 --> 00:39:37.336 A:middle
with your in-app purchase, right
in iTunes connect and again,

00:39:37.886 --> 00:39:39.656 A:middle
it's hosted on Apple servers.

00:39:40.006 --> 00:39:42.326 A:middle
So you don't have to worry
about hosting them yourself.

00:39:42.606 --> 00:39:44.016 A:middle
Scalable and reliable.

00:39:44.226 --> 00:39:45.676 A:middle
Around the world caching.

00:39:46.076 --> 00:39:50.496 A:middle
One thing to keep in mind
with this and as with the ODR,

00:39:50.496 --> 00:39:53.166 A:middle
is that this will download
your content in the background.

00:39:53.166 --> 00:39:54.836 A:middle
Your app doesn't
need to be running.

00:39:54.836 --> 00:39:58.846 A:middle
So the user makes a purchase,
and then leaves your app,

00:39:58.846 --> 00:40:01.496 A:middle
launches another app, and you
have to download this content,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:58.846 --> 00:40:01.496 A:middle
launches another app, and you
have to download this content,

00:40:01.736 --> 00:40:02.636 A:middle
that will keep running.

00:40:04.186 --> 00:40:07.746 A:middle
You get up to 2 gigabytes per
in-app purchasable product.

00:40:07.746 --> 00:40:09.206 A:middle
So that's not 2 gigabytes

00:40:09.206 --> 00:40:13.696 A:middle
for your whole application
that's 2 gigabytes per product.

00:40:13.696 --> 00:40:17.366 A:middle
And this is supported
on iOS, tvOS, and macOS.

00:40:17.696 --> 00:40:20.986 A:middle
So, again another great way
of having Apple host content

00:40:21.316 --> 00:40:23.176 A:middle
for your in-app purchases.

00:40:24.336 --> 00:40:28.576 A:middle
Let's take a look at what that
might look like a little bit.

00:40:28.576 --> 00:40:32.876 A:middle
A payment came through,
the user, you validated it

00:40:32.876 --> 00:40:34.466 A:middle
and you're ready to
download content.

00:40:34.736 --> 00:40:37.446 A:middle
You're going to be in the
updated transactions call back

00:40:37.446 --> 00:40:38.756 A:middle
of your payment observer.

00:40:38.756 --> 00:40:41.636 A:middle
And you're going to go down
a little bit and you're going

00:40:41.636 --> 00:40:43.616 A:middle
to look at your transactions and
you're going to notice that one

00:40:43.616 --> 00:40:46.876 A:middle
of those transactions
contains one or more downloads.

00:40:47.106 --> 00:40:49.776 A:middle
And all you've got to do is
pass that download right back

00:40:49.776 --> 00:40:52.746 A:middle
into the Payment Queue and that
will kick off the download.

00:40:53.206 --> 00:40:56.356 A:middle
If your application
is interested

00:40:56.356 --> 00:40:59.386 A:middle
in using hosted in-app
purchases, you're going to want

00:40:59.386 --> 00:41:03.666 A:middle
to have a Payment Queue updated
downloads method inside your


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.386 --> 00:41:03.666 A:middle
to have a Payment Queue updated
downloads method inside your

00:41:03.786 --> 00:41:04.886 A:middle
Payment Queue Observer.

00:41:05.396 --> 00:41:10.216 A:middle
And this will give you all this
information about the downloads

00:41:10.216 --> 00:41:13.776 A:middle
as they come in, including
things like progress will call

00:41:13.776 --> 00:41:15.996 A:middle
in and let you know
progress and you'll be able

00:41:15.996 --> 00:41:17.416 A:middle
to use this to update UI.

00:41:17.416 --> 00:41:19.336 A:middle
Or time remaining.

00:41:19.716 --> 00:41:22.336 A:middle
Or if an error occurs and
you have to react to that,

00:41:22.806 --> 00:41:24.026 A:middle
that information will be there.

00:41:24.376 --> 00:41:27.986 A:middle
And then once the download is
finished a URL will be provided,

00:41:28.166 --> 00:41:31.826 A:middle
again that's a local path URL,
where it is on the file system,

00:41:32.106 --> 00:41:33.486 A:middle
so you can grab it and interact

00:41:33.486 --> 00:41:35.006 A:middle
with your content
right then and there.

00:41:35.566 --> 00:41:39.126 A:middle
So that's how hosted
in-app purchases work.

00:41:39.826 --> 00:41:43.716 A:middle
But you may also want to
self-host this content,

00:41:44.056 --> 00:41:45.566 A:middle
perfectly valid thing to do.

00:41:45.786 --> 00:41:48.216 A:middle
If you have a catalog
that changes over time,

00:41:48.216 --> 00:41:50.836 A:middle
of if you have different things
you don't necessarily want

00:41:50.836 --> 00:41:52.706 A:middle
to have Apple host,
perfectly valid

00:41:52.706 --> 00:41:54.016 A:middle
to do self-hosting content.

00:41:54.476 --> 00:41:57.926 A:middle
One thing to keep in mind is
there are background download

00:41:57.926 --> 00:42:01.116 A:middle
APIs that you should
be using NSURL Session.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:57.926 --> 00:42:01.116 A:middle
APIs that you should
be using NSURL Session.

00:42:01.216 --> 00:42:02.906 A:middle
It's the way to host
this content.

00:42:03.616 --> 00:42:07.236 A:middle
Content is downloaded even
when your app is not active.

00:42:07.236 --> 00:42:09.386 A:middle
If you're still using
NSURLConnection

00:42:09.836 --> 00:42:10.776 A:middle
that's deprecated.

00:42:11.066 --> 00:42:13.226 A:middle
And that's not going to be
as great of an experience

00:42:13.226 --> 00:42:15.356 A:middle
for the user as NSURL Session.

00:42:15.726 --> 00:42:20.496 A:middle
So it's very important
that you use these APIs.

00:42:21.426 --> 00:42:23.306 A:middle
This is how it looks in Swift.

00:42:23.866 --> 00:42:26.626 A:middle
You're going to create
a session configuration.

00:42:27.036 --> 00:42:30.946 A:middle
This is a configuration you
want to name is something unique

00:42:30.946 --> 00:42:34.076 A:middle
to your application for what
that session is all about.

00:42:34.596 --> 00:42:37.026 A:middle
You're going to create
your session.

00:42:37.266 --> 00:42:39.496 A:middle
You're going to pass that
configuration in, you're going

00:42:39.496 --> 00:42:43.156 A:middle
to pass in a delegate, this
will be whatever object you want

00:42:43.156 --> 00:42:45.486 A:middle
to get information back
about those downloads.

00:42:45.726 --> 00:42:46.936 A:middle
And you're going
to give the queue,

00:42:47.256 --> 00:42:49.736 A:middle
this operation queue is
actually what's going

00:42:49.736 --> 00:42:51.216 A:middle
to call into your delegate.

00:42:51.456 --> 00:42:53.516 A:middle
What thread or what
operation queue is going

00:42:53.516 --> 00:42:54.746 A:middle
to call into your delegate.

00:42:54.826 --> 00:42:57.706 A:middle
So you're going to want to make
sure you create a dedicated

00:42:57.956 --> 00:43:01.436 A:middle
operation queue for that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:57.956 --> 00:43:01.436 A:middle
operation queue for that.

00:43:01.436 --> 00:43:04.526 A:middle
And then to kick off the
downloads, you create a task

00:43:04.526 --> 00:43:07.286 A:middle
and you hand in the
request and URL associated

00:43:07.286 --> 00:43:08.606 A:middle
with you in-app purchase.

00:43:08.976 --> 00:43:09.996 A:middle
And you call resume.

00:43:10.416 --> 00:43:11.236 A:middle
That will kick off

00:43:11.236 --> 00:43:15.296 A:middle
in the background your
self-hosted in-app

00:43:15.296 --> 00:43:16.226 A:middle
purchase download.

00:43:16.926 --> 00:43:19.816 A:middle
As the download is occurring
your delegate is going

00:43:19.816 --> 00:43:21.476 A:middle
to get information,
it's going to get called

00:43:21.476 --> 00:43:24.796 A:middle
into URL session didWriteData.

00:43:24.896 --> 00:43:27.836 A:middle
And that will give
you the ability,

00:43:28.046 --> 00:43:29.646 A:middle
you can take this
information coming in

00:43:29.646 --> 00:43:31.166 A:middle
and it will give you the
ability to update UI.

00:43:31.166 --> 00:43:34.246 A:middle
You might have a progress bar,
or something that you want

00:43:34.246 --> 00:43:39.336 A:middle
to tell the user about how
your downloads are going.

00:43:39.846 --> 00:43:41.186 A:middle
But it's also important
to keep in mind

00:43:41.186 --> 00:43:44.646 A:middle
that your application
may be exited during the

00:43:44.646 --> 00:43:46.196 A:middle
downloading process.

00:43:46.326 --> 00:43:48.806 A:middle
And so when your
application is re-launched,

00:43:49.396 --> 00:43:51.076 A:middle
you want to actually reattach

00:43:51.076 --> 00:43:53.356 A:middle
to those background
download sessions.

00:43:53.826 --> 00:43:56.616 A:middle
And so in your application
delegate, you're going to want

00:43:56.616 --> 00:44:00.226 A:middle
to implement handle events
for background URL session.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:56.616 --> 00:44:00.226 A:middle
to implement handle events
for background URL session.

00:44:00.766 --> 00:44:03.516 A:middle
This will allow the
operating system to wake

00:44:03.516 --> 00:44:05.456 A:middle
up your application and tell it

00:44:05.456 --> 00:44:09.436 A:middle
about hey this background
download just completed,

00:44:09.436 --> 00:44:12.176 A:middle
or is in progress, or
something's going on with that.

00:44:12.606 --> 00:44:15.386 A:middle
So handle events for
background URL session.

00:44:15.556 --> 00:44:18.776 A:middle
It will pass in the identifier
for that configuration

00:44:18.776 --> 00:44:19.766 A:middle
that you used earlier.

00:44:20.276 --> 00:44:21.156 A:middle
You just recreate

00:44:21.156 --> 00:44:23.136 A:middle
that configuration
with that identifier.

00:44:23.676 --> 00:44:26.576 A:middle
Re-create a session
that will re-attach

00:44:26.576 --> 00:44:28.026 A:middle
to that background session.

00:44:28.026 --> 00:44:31.316 A:middle
And then what you want to do
is there's a completion handle

00:44:31.316 --> 00:44:35.236 A:middle
that's passed into that app
delegate method and you're going

00:44:35.366 --> 00:44:39.626 A:middle
to need to call that completion
handler once you're done doing

00:44:39.626 --> 00:44:41.566 A:middle
whatever you need to
do with that download.

00:44:41.566 --> 00:44:43.896 A:middle
So if the download's complete
and you need to move it

00:44:43.896 --> 00:44:46.396 A:middle
into your container, and
unpack it, and do work,

00:44:46.796 --> 00:44:49.006 A:middle
you need to call that completion
handler once you've done

00:44:49.006 --> 00:44:51.006 A:middle
everything with it
and let the OS know

00:44:51.006 --> 00:44:55.586 A:middle
that you're done doing
what you need to do.

00:44:55.876 --> 00:44:57.806 A:middle
So that's making
assets available,

00:44:58.376 --> 00:44:59.776 A:middle
but you're not quite done yet.

00:44:59.776 --> 00:45:01.406 A:middle
Even though you've
made all this available


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:59.776 --> 00:45:01.406 A:middle
Even though you've
made all this available

00:45:01.406 --> 00:45:02.936 A:middle
and the user has
what they bought,

00:45:03.336 --> 00:45:06.696 A:middle
you've got to do one more thing
and you've got to tell StoreKit

00:45:06.926 --> 00:45:08.936 A:middle
that hey you're done
with the transaction.

00:45:09.046 --> 00:45:12.856 A:middle
This is important because
we keep that transaction

00:45:12.856 --> 00:45:15.876 A:middle
in our purchasing queue, we
keep that in our state machine

00:45:16.236 --> 00:45:18.816 A:middle
and if your application
dies and gets relaunched

00:45:18.816 --> 00:45:21.546 A:middle
or if the user leaves and comes
back, the Payment Queue is going

00:45:21.546 --> 00:45:22.686 A:middle
to keep telling you about it.

00:45:22.986 --> 00:45:24.646 A:middle
It actually might
continue to do it

00:45:24.646 --> 00:45:27.526 A:middle
on your behalf background
API calls, so that's going

00:45:27.526 --> 00:45:29.146 A:middle
to use up user's data.

00:45:29.396 --> 00:45:31.536 A:middle
So it's important to keep
things clean and finish

00:45:31.536 --> 00:45:33.076 A:middle
up the transaction
when you're done.

00:45:33.976 --> 00:45:35.806 A:middle
But you should also
make sure that you do it

00:45:35.806 --> 00:45:37.926 A:middle
when the content is
finished downloading.

00:45:38.316 --> 00:45:41.546 A:middle
If you finish the transaction
and then kickoff the download,

00:45:41.586 --> 00:45:43.156 A:middle
we're not going to tell you

00:45:43.156 --> 00:45:44.686 A:middle
about that transaction
ever again.

00:45:44.686 --> 00:45:47.726 A:middle
So if the download fails,
or if something goes wrong,

00:45:48.126 --> 00:45:49.536 A:middle
you're not going to
get updates on it.

00:45:49.656 --> 00:45:52.256 A:middle
So you want to make sure
that the download is complete

00:45:52.326 --> 00:45:54.666 A:middle
and then call finish
transaction.

00:45:55.516 --> 00:45:57.876 A:middle
So, again, the payment will stay

00:45:57.876 --> 00:45:59.306 A:middle
in the queue until
you finish it.

00:45:59.306 --> 00:46:02.496 A:middle
And if you're downloading hosted
content, another thing to keep


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:59.306 --> 00:46:02.496 A:middle
And if you're downloading hosted
content, another thing to keep

00:46:02.496 --> 00:46:04.796 A:middle
in mind is yes you need
to finish downloading it

00:46:05.076 --> 00:46:06.936 A:middle
and if you finish the
transaction before the

00:46:06.936 --> 00:46:09.196 A:middle
download's complete we
will stop downloading.

00:46:09.716 --> 00:46:14.546 A:middle
And this can be done simply
by calling SKPayment Queue,

00:46:14.596 --> 00:46:18.046 A:middle
Finish Transaction and passing
in that transaction right

00:46:18.046 --> 00:46:18.956 A:middle
into the Payment Queue.

00:46:21.306 --> 00:46:24.976 A:middle
So, the user has
been using your app,

00:46:24.976 --> 00:46:26.676 A:middle
they've been buying
in-app purchases,

00:46:26.676 --> 00:46:29.226 A:middle
they love your content,
and they decide,

00:46:29.726 --> 00:46:31.096 A:middle
you know what I'm
running out of space,

00:46:31.096 --> 00:46:33.996 A:middle
I'm going to delete the app,
maybe I'll re-download it later.

00:46:34.316 --> 00:46:36.126 A:middle
Or they switch to
a different device.

00:46:36.496 --> 00:46:38.726 A:middle
It's always important that
they can get back those

00:46:39.876 --> 00:46:45.406 A:middle
non-consumable and auto-renewing
in-app purchases right back

00:46:45.406 --> 00:46:45.886 A:middle
into the app.

00:46:45.956 --> 00:46:48.076 A:middle
They need to be able to
restore that content.

00:46:48.836 --> 00:46:51.306 A:middle
So restoring transactions
allow the user

00:46:51.306 --> 00:46:56.056 A:middle
to restores non-consumable and
auto renewing subscriptions.

00:46:57.116 --> 00:47:00.446 A:middle
Consumable and non-renewing
subscriptions,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:57.116 --> 00:47:00.446 A:middle
Consumable and non-renewing
subscriptions,

00:47:00.606 --> 00:47:02.526 A:middle
that's up to you to
manage the state.

00:47:02.966 --> 00:47:06.156 A:middle
So it might be something
that you just save locally,

00:47:06.156 --> 00:47:08.886 A:middle
it might be something that you
store in the Cloud, or you store

00:47:08.886 --> 00:47:10.936 A:middle
in your own hosted backend.

00:47:11.236 --> 00:47:13.806 A:middle
That's up to you guys to
manage how exactly you want

00:47:13.806 --> 00:47:16.696 A:middle
to restore those, but
for non-consumable

00:47:16.696 --> 00:47:20.326 A:middle
and auto renewing, you can
restore those using the

00:47:20.326 --> 00:47:24.116 A:middle
restore APIs.

00:47:25.596 --> 00:47:29.236 A:middle
Again, we offer APIs for
that SKPayment Queue Restore

00:47:29.236 --> 00:47:30.566 A:middle
Completed Transactions.

00:47:30.876 --> 00:47:35.026 A:middle
That will pull down a brand
new updated version of the app

00:47:35.446 --> 00:47:37.166 A:middle
and in-app purchase receipt.

00:47:37.986 --> 00:47:40.286 A:middle
Again, you're going to
want to observe the queue.

00:47:40.346 --> 00:47:42.006 A:middle
You added that to
your app delegate,

00:47:42.006 --> 00:47:43.566 A:middle
so of course you're
observing the queue.

00:47:43.566 --> 00:47:44.616 A:middle
You're getting information

00:47:44.616 --> 00:47:46.506 A:middle
about those transactions
as they're coming in.

00:47:46.926 --> 00:47:49.766 A:middle
Because we're going to call
Payment Queue Restored Completed

00:47:49.766 --> 00:47:50.916 A:middle
Transactions Finished.

00:47:50.916 --> 00:47:54.106 A:middle
That's going to tell you all
the restores that occurred

00:47:54.306 --> 00:47:55.836 A:middle
and you're just going
to want to process those

00:47:55.836 --> 00:47:57.926 A:middle
as if they were just
purchased by the user.

00:47:58.326 --> 00:48:00.706 A:middle
Or we're going to give you an
error that something went wrong


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:58.326 --> 00:48:00.706 A:middle
Or we're going to give you an
error that something went wrong

00:48:00.706 --> 00:48:03.056 A:middle
and maybe you need to ask
the user to try it again,

00:48:03.156 --> 00:48:04.856 A:middle
or update your UI accordingly.

00:48:05.326 --> 00:48:09.196 A:middle
So again, it's important
to observe the queue.

00:48:09.756 --> 00:48:12.366 A:middle
Again, once the restore is
completed, you take a look

00:48:12.366 --> 00:48:14.616 A:middle
at the receipt and
unlock content

00:48:14.616 --> 00:48:15.676 A:middle
and features accordingly.

00:48:16.876 --> 00:48:19.906 A:middle
So now we're going to
get into a little bit

00:48:19.906 --> 00:48:22.356 A:middle
of okay you're built your
app, you're ready to submit it

00:48:22.356 --> 00:48:24.546 A:middle
to the App Store you
want to make sure

00:48:24.546 --> 00:48:25.896 A:middle
that you pass app review.

00:48:26.286 --> 00:48:27.786 A:middle
A couple things to keep in mind.

00:48:28.976 --> 00:48:30.936 A:middle
We've just been talking
about restoring.

00:48:31.316 --> 00:48:33.516 A:middle
You really need to have
a restore mechanism.

00:48:33.516 --> 00:48:35.246 A:middle
It doesn't have to
be a UI button,

00:48:35.246 --> 00:48:38.296 A:middle
you need to have some mechanism
inside the app to allow the user

00:48:38.296 --> 00:48:41.236 A:middle
to get their content back, or
else it won't pass app review.

00:48:41.426 --> 00:48:46.426 A:middle
Again, for non-consumable and
auto renewing subscriptions,

00:48:46.526 --> 00:48:47.966 A:middle
you're not going
to get other types

00:48:47.966 --> 00:48:49.986 A:middle
of in-app purchases
back on restores.

00:48:51.686 --> 00:48:56.246 A:middle
One thing to keep in mind though
is we want to keep this separate

00:48:56.246 --> 00:48:57.606 A:middle
from purchases itself.

00:48:57.806 --> 00:48:59.116 A:middle
Restores are free.

00:48:59.366 --> 00:49:02.746 A:middle
The user shouldn't get confused
that if they do a restore


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:59.366 --> 00:49:02.746 A:middle
The user shouldn't get confused
that if they do a restore

00:49:02.746 --> 00:49:05.126 A:middle
and they're getting a password
prompt from the App Store

00:49:05.126 --> 00:49:06.606 A:middle
that it's going to
cost them anything.

00:49:06.606 --> 00:49:09.286 A:middle
This has got to be very
obvious inside your application

00:49:09.526 --> 00:49:12.636 A:middle
that this restore operation
they're doing is not a purchase,

00:49:12.636 --> 00:49:14.166 A:middle
it's completely separate
from that.

00:49:14.366 --> 00:49:17.226 A:middle
So it's one thing you want to
make sure your UI reflects.

00:49:18.976 --> 00:49:22.506 A:middle
Some other information
you want to keep in mind

00:49:22.506 --> 00:49:26.126 A:middle
for auto renewable subscriptions
are about policies,

00:49:26.386 --> 00:49:30.006 A:middle
keeping the information
in marketing text.

00:49:31.356 --> 00:49:34.996 A:middle
And making sure that once
they've subscribed that they get

00:49:34.996 --> 00:49:37.146 A:middle
that content right then and
there, that they don't have

00:49:37.196 --> 00:49:40.986 A:middle
to wait until the next period
begins for anything to appear.

00:49:40.986 --> 00:49:43.646 A:middle
If you subscribe you should get
some information right away.

00:49:44.206 --> 00:49:45.486 A:middle
And you should get
the information

00:49:45.486 --> 00:49:48.356 A:middle
that you should only be able
to get through a subscription,

00:49:48.596 --> 00:49:53.616 A:middle
not bundled products or content
that they would have been able

00:49:53.616 --> 00:49:54.706 A:middle
to get free elsewhere.

00:49:54.706 --> 00:49:57.176 A:middle
So, these are some of
the kind of policies.

00:49:57.176 --> 00:49:59.106 A:middle
I highly recommend
that you check

00:49:59.106 --> 00:50:00.966 A:middle
out the App Review
Policy Guidelines.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:59.106 --> 00:50:00.966 A:middle
out the App Review
Policy Guidelines.

00:50:01.586 --> 00:50:04.316 A:middle
I've heard there's even a
comic book version of that now,

00:50:04.316 --> 00:50:07.196 A:middle
so I would highly recommend
you learn all about these,

00:50:07.446 --> 00:50:09.626 A:middle
because they're changing all the
time and you really should keep

00:50:09.626 --> 00:50:11.286 A:middle
up to date with what's
going on with that.

00:50:11.966 --> 00:50:14.526 A:middle
And with non-renewing
subscriptions there's some other

00:50:14.526 --> 00:50:17.596 A:middle
policies you want to keep
in mind, about privacy

00:50:17.596 --> 00:50:20.226 A:middle
and making sure that he user
has the ability to opt in

00:50:20.516 --> 00:50:22.546 A:middle
or opt out accordingly.

00:50:24.326 --> 00:50:26.756 A:middle
And then finally the
most important thing

00:50:26.756 --> 00:50:28.196 A:middle
to pass app review is

00:50:28.196 --> 00:50:31.996 A:middle
if you have purchases inside
your app they should work.

00:50:32.136 --> 00:50:34.446 A:middle
You make the purchase,
the content should appear.

00:50:34.686 --> 00:50:36.506 A:middle
They should get that
information, they should get

00:50:36.506 --> 00:50:37.966 A:middle
that content right
then and there.

00:50:37.966 --> 00:50:40.316 A:middle
If it's buggy or if
it's error prone,

00:50:40.586 --> 00:50:42.166 A:middle
or if there's something going

00:50:42.166 --> 00:50:47.006 A:middle
on when the reviewer you
know is reviewing it inside

00:50:47.206 --> 00:50:51.066 A:middle
that app review environment,
you're going to have issues

00:50:51.066 --> 00:50:52.376 A:middle
with app review right
then and there.

00:50:52.376 --> 00:50:53.166 A:middle
So test it.

00:50:53.486 --> 00:50:55.896 A:middle
Test it in Sandbox, make
sure everything works

00:50:55.896 --> 00:50:56.756 A:middle
as you want it to.

00:50:57.436 --> 00:51:02.146 A:middle
So just to summarize a little
bit of what we went over today.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:57.436 --> 00:51:02.146 A:middle
So just to summarize a little
bit of what we went over today.

00:51:03.346 --> 00:51:05.396 A:middle
Always observe the
Payment Queue.

00:51:05.396 --> 00:51:06.696 A:middle
I can't stress this enough.

00:51:06.996 --> 00:51:09.596 A:middle
If you're interacting with
in-app purchases in your app,

00:51:09.716 --> 00:51:13.686 A:middle
one of the first things your app
should do is set a Payment Queue

00:51:13.686 --> 00:51:15.446 A:middle
observer to get information

00:51:15.446 --> 00:51:18.806 A:middle
about what's going
on with the payments.

00:51:18.936 --> 00:51:21.496 A:middle
You need to fetch
localized product information

00:51:21.496 --> 00:51:22.406 A:middle
from the App Store.

00:51:22.556 --> 00:51:25.046 A:middle
This is through an
SKProduct request.

00:51:25.356 --> 00:51:27.906 A:middle
That will return
localized information.

00:51:27.906 --> 00:51:31.756 A:middle
So the information for the
users in their country related

00:51:31.756 --> 00:51:34.566 A:middle
to billing that's associated
with their App Store account.

00:51:36.536 --> 00:51:39.276 A:middle
And again use the
product's price locale.

00:51:39.636 --> 00:51:43.656 A:middle
There's the SKProduct that comes
back, has a locale associated

00:51:43.656 --> 00:51:47.096 A:middle
with that, you need to use
that for displaying the pricing

00:51:47.096 --> 00:51:48.326 A:middle
and currency information.

00:51:50.476 --> 00:51:52.476 A:middle
Use the receipt to
validate your purchases.

00:51:52.476 --> 00:51:55.126 A:middle
Again, they're your purchases,
this is your business.

00:51:55.306 --> 00:51:57.256 A:middle
You need to make
decisions about how best

00:51:57.256 --> 00:51:59.416 A:middle
to validate the receipt,
whether you do it locally

00:51:59.416 --> 00:52:01.196 A:middle
or on the server.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:59.416 --> 00:52:01.196 A:middle
or on the server.

00:52:01.196 --> 00:52:03.436 A:middle
What technologies that back it.

00:52:03.436 --> 00:52:06.726 A:middle
Be aware exactly what the
pros and cons of each are

00:52:07.026 --> 00:52:08.526 A:middle
and make your decisions
with that.

00:52:09.776 --> 00:52:11.636 A:middle
And finally make the
content available.

00:52:11.756 --> 00:52:15.826 A:middle
You can just unlock it in your
app right there on the device,

00:52:16.146 --> 00:52:19.976 A:middle
or you can make a hosted request
from the App Store itself,

00:52:20.256 --> 00:52:24.346 A:middle
or you can make a request to
your backend hosting APIs.

00:52:24.656 --> 00:52:25.926 A:middle
Make that content available.

00:52:25.926 --> 00:52:28.246 A:middle
But do it in a reliable
and quick way.

00:52:28.466 --> 00:52:29.686 A:middle
If you're hosting it yourself,

00:52:29.686 --> 00:52:31.986 A:middle
make sure your servers
are scalable

00:52:32.446 --> 00:52:37.316 A:middle
and you know cache appropriately
and are, you know, really ready

00:52:37.316 --> 00:52:39.826 A:middle
for users making
great use of your app.

00:52:41.296 --> 00:52:43.876 A:middle
And then finally, always
finish the transaction.

00:52:43.876 --> 00:52:45.746 A:middle
The last thing you
need to do is make sure

00:52:45.746 --> 00:52:48.196 A:middle
that that transaction is no
longer in the Payment Queue

00:52:48.476 --> 00:52:51.346 A:middle
or else your observer is going
to continually be notified

00:52:51.346 --> 00:52:53.676 A:middle
about it when your
app starts up.

00:52:53.676 --> 00:52:59.106 A:middle
And that will incur weird you
know possibly the user might

00:52:59.106 --> 00:53:01.586 A:middle
have to authenticate
at certain times,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:59.106 --> 00:53:01.586 A:middle
have to authenticate
at certain times,

00:53:01.586 --> 00:53:05.936 A:middle
or there might be backend APIs
that are occurring on behalf

00:53:05.936 --> 00:53:08.156 A:middle
of your app, using
up data for the user

00:53:08.156 --> 00:53:10.046 A:middle
if you don't finish
that transaction.

00:53:10.656 --> 00:53:12.126 A:middle
So always do that.

00:53:13.336 --> 00:53:18.976 A:middle
And then, allow users to
restore completed transactions.

00:53:18.976 --> 00:53:21.346 A:middle
You need to have a restore
mechanism inside your app,

00:53:21.346 --> 00:53:25.126 A:middle
if you have non-consumable or
auto renewing subscriptions.

00:53:25.336 --> 00:53:26.226 A:middle
This will allow the user

00:53:26.226 --> 00:53:28.266 A:middle
to get back what they've
already purchased.

00:53:30.376 --> 00:53:34.616 A:middle
More information will be online
at the developer website.

00:53:34.616 --> 00:53:36.546 A:middle
I highly recommend you go back

00:53:36.546 --> 00:53:39.356 A:middle
and take a look at
that later on.

00:53:39.356 --> 00:53:41.716 A:middle
And then a couple related
sessions we mentioned today,

00:53:41.716 --> 00:53:43.606 A:middle
if you're using subscriptions
in your app,

00:53:43.606 --> 00:53:45.546 A:middle
you should definitely check

00:53:45.546 --> 00:53:47.446 A:middle
out Introducing Expanded
Subscriptions

00:53:47.446 --> 00:53:49.006 A:middle
in iTunes Connect later today.

00:53:49.546 --> 00:53:51.856 A:middle
Or if you're interested in
on-demand resources check

00:53:51.896 --> 00:53:53.766 A:middle
that out Thursday morning.

00:53:53.766 --> 00:53:55.066 A:middle
And that's it.

00:53:55.646 --> 00:53:56.676 A:middle
Thanks a lot.

00:53:57.508 --> 00:53:59.508 A:middle
[ Applause ]

