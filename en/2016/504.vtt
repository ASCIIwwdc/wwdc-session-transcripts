WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:20.936 A:middle
[ Music ]

00:00:21.436 --> 00:00:22.216 A:middle
&gt;&gt; Is this thing on?

00:00:23.516 --> 00:00:25.866 A:middle
[ Applause ]

00:00:26.366 --> 00:00:27.116 A:middle
Good afternoon.

00:00:27.536 --> 00:00:29.226 A:middle
I'm Roger Pantos.

00:00:29.226 --> 00:00:32.046 A:middle
This is what's new in
HTTP Live Streaming.

00:00:32.625 --> 00:00:36.456 A:middle
We have been talking about
HLS now for 7 to 8 years.

00:00:36.526 --> 00:00:40.236 A:middle
And yet, every time I do one
of these, marketing says.

00:00:40.806 --> 00:00:43.536 A:middle
"You've got to tell the
people what's going on!"

00:00:43.826 --> 00:00:45.506 A:middle
And so here we go.

00:00:46.156 --> 00:00:47.666 A:middle
Here's what's new.

00:00:48.166 --> 00:00:52.046 A:middle
But, first, HLS in 20 seconds.

00:00:52.326 --> 00:00:54.456 A:middle
So HLS is about playing
playlists.

00:00:54.456 --> 00:00:55.146 A:middle
What's a playlist?

00:00:55.386 --> 00:00:56.356 A:middle
It's one of these things.

00:00:56.356 --> 00:00:57.216 A:middle
It's a TXT file.

00:00:57.646 --> 00:01:00.586 A:middle
It's got tags, which are
these blue things here.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:57.646 --> 00:01:00.586 A:middle
It's got tags, which are
these blue things here.

00:01:00.926 --> 00:01:02.766 A:middle
And it's got segments, which
are those white things.

00:01:02.766 --> 00:01:04.025 A:middle
Each one is 10 seconds of media.

00:01:04.025 --> 00:01:06.796 A:middle
If you want to play one,
then you go rummaging

00:01:06.796 --> 00:01:09.126 A:middle
through the tags looking for
something interesting like --

00:01:09.126 --> 00:01:11.226 A:middle
I don't know -- this one
says this is an INF segment.

00:01:11.226 --> 00:01:12.456 A:middle
So, load it first.

00:01:12.986 --> 00:01:13.686 A:middle
So you do that.

00:01:14.296 --> 00:01:15.426 A:middle
Then you load segment1.

00:01:15.506 --> 00:01:16.156 A:middle
You play it.

00:01:16.396 --> 00:01:17.306 A:middle
You load segment2.

00:01:17.306 --> 00:01:17.906 A:middle
You play it.

00:01:18.066 --> 00:01:19.266 A:middle
Maybe it's a live playlist.

00:01:19.406 --> 00:01:20.676 A:middle
So you refresh the playlist.

00:01:20.676 --> 00:01:21.636 A:middle
You load segment3.

00:01:21.636 --> 00:01:22.186 A:middle
You play that.

00:01:22.446 --> 00:01:24.576 A:middle
And that is basically
HLS in a nutshell.

00:01:25.136 --> 00:01:27.886 A:middle
So now that we're all on
the same page about that,

00:01:28.696 --> 00:01:29.756 A:middle
let's go on to what's new.

00:01:30.726 --> 00:01:31.946 A:middle
Sweet. OK.

00:01:33.506 --> 00:01:35.246 A:middle
MPEG-4 Fragment Support.

00:01:35.246 --> 00:01:37.766 A:middle
Who is this MPEG-4 guy
and why is he fragmented?

00:01:39.406 --> 00:01:40.966 A:middle
Actually, most of you
are probably familiar

00:01:40.966 --> 00:01:42.266 A:middle
with MPEG-4 files.

00:01:42.266 --> 00:01:45.626 A:middle
If you've got a movie on
your hard disk, it's probably

00:01:45.626 --> 00:01:47.886 A:middle
in MP4 format or one
of its close cousins.

00:01:48.596 --> 00:01:50.526 A:middle
And if you've ever
looked into it,

00:01:50.526 --> 00:01:53.306 A:middle
it consists of one
sample table --

00:01:53.306 --> 00:01:54.776 A:middle
usually it's at the beginning --

00:01:54.836 --> 00:01:57.486 A:middle
and then all the sample
data following that.

00:01:58.476 --> 00:01:59.996 A:middle
And we did that originally.

00:01:59.996 --> 00:02:04.166 A:middle
Then, we introduced a new
segment a little bit later


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.996 --> 00:02:04.166 A:middle
Then, we introduced a new
segment a little bit later

00:02:04.166 --> 00:02:04.966 A:middle
called fragments.

00:02:04.966 --> 00:02:08.246 A:middle
And fragments are basically a
way to take your MPEG-4 file

00:02:08.506 --> 00:02:11.846 A:middle
and divide it up into these
little islands of playable data.

00:02:11.846 --> 00:02:14.336 A:middle
A little sample table,
a little sample data.

00:02:14.336 --> 00:02:16.666 A:middle
A little sample table, a
little more sample data.

00:02:17.286 --> 00:02:20.746 A:middle
And these little islands
are all called "Fragments".

00:02:21.306 --> 00:02:23.596 A:middle
So what we're announcing
today is essentially

00:02:24.026 --> 00:02:28.566 A:middle
that what you can do now is
you'll be able to take one

00:02:28.566 --> 00:02:30.556 A:middle
of these things, these
MPEG-4 fragments,

00:02:30.786 --> 00:02:33.376 A:middle
and use it as a segment
in your HLS playlist just

00:02:33.376 --> 00:02:35.326 A:middle
like you can do with
transport stream files

00:02:35.666 --> 00:02:37.596 A:middle
or elementary audio streams.

00:02:38.476 --> 00:02:40.506 A:middle
And we're updating
the spec to sort

00:02:40.506 --> 00:02:42.046 A:middle
of give you the details of that.

00:02:42.086 --> 00:02:45.146 A:middle
There should be a link to
the session I think now.

00:02:45.456 --> 00:02:52.786 A:middle
But what it allows you to do is
essentially use fMP4 segments,

00:02:52.786 --> 00:02:56.036 A:middle
and you can do anything
you can do

00:02:56.096 --> 00:02:58.806 A:middle
with transport streams
with fMP4.

00:02:59.046 --> 00:03:01.536 A:middle
That includes iframe playlists.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.046 --> 00:03:01.536 A:middle
That includes iframe playlists.

00:03:01.536 --> 00:03:03.116 A:middle
That includes discontinuities.

00:03:03.116 --> 00:03:04.546 A:middle
That includes live streams.

00:03:04.816 --> 00:03:05.506 A:middle
All that stuff.

00:03:05.506 --> 00:03:06.476 A:middle
Same set of features.

00:03:06.786 --> 00:03:10.286 A:middle
And of course, we're delivering
it on all of our HLS platforms

00:03:10.526 --> 00:03:13.976 A:middle
so you can choose to encode
all your streams as fMP4

00:03:13.976 --> 00:03:16.026 A:middle
and deliver them
everywhere we are.

00:03:16.656 --> 00:03:17.576 A:middle
Why would you do that?

00:03:18.166 --> 00:03:20.976 A:middle
Well, in a word,
interoperability.

00:03:21.716 --> 00:03:23.896 A:middle
If you're in a situation
where you have

00:03:23.896 --> 00:03:27.406 A:middle
to encode your entire media
library one way to deliver it

00:03:27.406 --> 00:03:29.906 A:middle
to Apple's platforms,
and then maybe you have

00:03:29.906 --> 00:03:34.016 A:middle
to encode it again in another
way to deliver it to Android

00:03:34.016 --> 00:03:35.596 A:middle
for instance, that
kind of sucks.

00:03:36.746 --> 00:03:39.486 A:middle
But if you could have
a single library,

00:03:40.176 --> 00:03:42.376 A:middle
then your delivery
costs would go down,

00:03:42.376 --> 00:03:43.736 A:middle
your storage costs
would go down,

00:03:43.996 --> 00:03:45.826 A:middle
you would get better
cache utilization

00:03:45.826 --> 00:03:47.686 A:middle
because you're no longer
competing with yourself

00:03:47.976 --> 00:03:52.336 A:middle
on the edge, and as
sort of fringe benefit.

00:03:53.346 --> 00:03:56.616 A:middle
Also, if you've got a
single production chain,

00:03:56.816 --> 00:04:01.966 A:middle
you can use the same set
of tools and validation


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:56.816 --> 00:04:01.966 A:middle
you can use the same set
of tools and validation

00:04:02.036 --> 00:04:04.076 A:middle
across all of your ecosystems.

00:04:04.486 --> 00:04:08.186 A:middle
And as a fringe benefit, because
fMP4 doesn't use the same kind

00:04:08.186 --> 00:04:10.906 A:middle
of packetization that
transport streams do,

00:04:11.466 --> 00:04:17.086 A:middle
you get slightly more
efficiency at lower bit rates.

00:04:17.086 --> 00:04:19.846 A:middle
So that's sort of a gimmie.

00:04:20.065 --> 00:04:24.076 A:middle
So how does that change HLS
for you, the playlist author?

00:04:24.786 --> 00:04:26.386 A:middle
Well, as it turns
out, not very much.

00:04:26.766 --> 00:04:29.426 A:middle
If we take our playlist here
that we were looking at earlier

00:04:29.636 --> 00:04:33.046 A:middle
and we convert it to fMP4,
all we have to do is this.

00:04:33.486 --> 00:04:35.526 A:middle
We change the initialization
segment to point

00:04:35.526 --> 00:04:38.906 A:middle
to a movie box instead, and
then each segment becomes an

00:04:39.086 --> 00:04:40.146 A:middle
MPEG-4 fragment.

00:04:41.086 --> 00:04:42.246 A:middle
And that's it.

00:04:42.246 --> 00:04:45.316 A:middle
Everything else is pretty much
the same at the playlist level.

00:04:45.906 --> 00:04:48.396 A:middle
On the segment level, there's
one other thing I was going

00:04:48.396 --> 00:04:50.106 A:middle
to talk about, which
is encryption.

00:04:50.536 --> 00:04:52.826 A:middle
Now, as you know, HLS
has two different ways

00:04:52.826 --> 00:04:54.076 A:middle
of encrypting your stuff.

00:04:54.076 --> 00:04:56.456 A:middle
You can either just
encrypt the entire segment,

00:04:56.756 --> 00:04:58.396 A:middle
AES CBC the entire thing.

00:04:58.726 --> 00:05:01.686 A:middle
And that's the same whether
it's transport streams or fMP4.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.726 --> 00:05:01.686 A:middle
And that's the same whether
it's transport streams or fMP4.

00:05:02.236 --> 00:05:04.576 A:middle
For sample encryption,
like if you want

00:05:04.576 --> 00:05:08.286 A:middle
to use FairPlay Streaming, it's
a little bit more complicated

00:05:08.746 --> 00:05:10.696 A:middle
because you have
to say what part

00:05:10.696 --> 00:05:12.686 A:middle
of the files are encrypted
and what part aren't.

00:05:13.466 --> 00:05:15.356 A:middle
And this time around --

00:05:15.356 --> 00:05:17.006 A:middle
last time, we did it
for transport streams.

00:05:17.006 --> 00:05:18.456 A:middle
We essentially made
up our own format.

00:05:18.486 --> 00:05:24.206 A:middle
This time, we decided
to use an existing one.

00:05:24.736 --> 00:05:29.726 A:middle
And so this is what MPEG
calls "Common Encryption".

00:05:29.726 --> 00:05:30.406 A:middle
It's a standard.

00:05:30.406 --> 00:05:31.696 A:middle
It came out a couple years ago.

00:05:32.016 --> 00:05:35.746 A:middle
The newest edition of the
standard has a mode called cbcs,

00:05:35.746 --> 00:05:37.446 A:middle
which is compatible
with FairPlay Streaming.

00:05:37.866 --> 00:05:40.256 A:middle
And so if you're doing
sample encryption in HLS,

00:05:40.526 --> 00:05:44.046 A:middle
you'll be using common
encryption cbcs mode for that.

00:05:44.476 --> 00:05:47.266 A:middle
And so with encryption, and
playlist, and everything else,

00:05:47.266 --> 00:05:50.856 A:middle
we pretty much have a whole
story put together for HLS

00:05:51.206 --> 00:05:53.106 A:middle
around fragmented MPEG-4.

00:05:53.596 --> 00:05:57.926 A:middle
But if we're going to get to
the happy, shiny, bouncy world

00:05:57.926 --> 00:06:00.966 A:middle
where everybody can just have
a single copy of their catalog


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:57.926 --> 00:06:00.966 A:middle
where everybody can just have
a single copy of their catalog

00:06:01.216 --> 00:06:04.366 A:middle
and deliver it everywhere,
we have to go beyond HLS.

00:06:04.646 --> 00:06:07.006 A:middle
And one of the things we need
to do is we need to write

00:06:07.006 --> 00:06:09.876 A:middle
down a set of rules that
says, "Here's how you're going

00:06:09.876 --> 00:06:14.186 A:middle
to author your fMP4 segments
or fragments, or what have you,

00:06:14.496 --> 00:06:15.696 A:middle
so that they play everywhere."

00:06:16.316 --> 00:06:17.956 A:middle
And we've been working
on that as well.

00:06:17.986 --> 00:06:21.436 A:middle
It started as sort
of a what-if exercise

00:06:21.796 --> 00:06:23.206 A:middle
between us and Microsoft.

00:06:23.206 --> 00:06:25.606 A:middle
And once we got to the
point where it seemed

00:06:25.606 --> 00:06:29.456 A:middle
like it was practical, it seemed
like it would work, we took it

00:06:29.456 --> 00:06:30.726 A:middle
and proposed it to MPEG.

00:06:31.086 --> 00:06:32.566 A:middle
And a lot of folks there seemed

00:06:32.566 --> 00:06:33.746 A:middle
to think it was a
really good idea.

00:06:34.076 --> 00:06:39.106 A:middle
So what it comes down to is
it's a set of constraints

00:06:39.106 --> 00:06:42.166 A:middle
for how you construct
your fMP4 segments.

00:06:42.546 --> 00:06:45.466 A:middle
So you've got to deliver your
audio and your video separately.

00:06:45.466 --> 00:06:47.516 A:middle
You've got to put an
iframe at the start

00:06:47.516 --> 00:06:48.626 A:middle
of every video segment.

00:06:48.876 --> 00:06:51.326 A:middle
You have to make sure you
rigidly align your segments

00:06:51.326 --> 00:06:52.676 A:middle
across your different bit rates.

00:06:53.496 --> 00:06:54.766 A:middle
You don't have to
do any of this stuff

00:06:54.766 --> 00:06:56.586 A:middle
if all you want to
do is target HLS.

00:06:57.076 --> 00:07:00.296 A:middle
But if you want the broadest
audience for that copy


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.076 --> 00:07:00.296 A:middle
But if you want the broadest
audience for that copy

00:07:00.296 --> 00:07:03.936 A:middle
of your media library, then
we're putting together a set

00:07:03.936 --> 00:07:05.126 A:middle
of recommendations for you.

00:07:05.466 --> 00:07:08.616 A:middle
And so I think that
that will end

00:07:08.616 --> 00:07:11.356 A:middle
up benefiting everyone
-- at least I hope so.

00:07:12.266 --> 00:07:16.056 A:middle
So now I'm going to switch
gears a little bit and talk

00:07:16.056 --> 00:07:17.896 A:middle
about something else --

00:07:18.356 --> 00:07:20.036 A:middle
everyone's favorite
topic -- metadata.

00:07:21.066 --> 00:07:25.646 A:middle
So to sort of frame this,
I'm going to start by talking

00:07:25.646 --> 00:07:28.046 A:middle
about some of the existing
things we already do

00:07:28.046 --> 00:07:29.746 A:middle
for you in HLS for metadata.

00:07:29.746 --> 00:07:32.486 A:middle
Static metadata and ID3.

00:07:33.056 --> 00:07:35.946 A:middle
Static metadata is used
for static metadata.

00:07:36.396 --> 00:07:37.006 A:middle
No surprise.

00:07:37.176 --> 00:07:39.446 A:middle
So it'll offer for
like a content title,

00:07:39.446 --> 00:07:40.186 A:middle
or something like that.

00:07:40.486 --> 00:07:43.586 A:middle
Most of it is text, and that
makes it really easy to put

00:07:43.586 --> 00:07:46.356 A:middle
into the playlist file
either directly as a tag,

00:07:46.666 --> 00:07:50.036 A:middle
or you can package it as a
JSON and refer to it by URL.

00:07:52.686 --> 00:07:55.286 A:middle
Now you only get one
title, or one author,

00:07:55.286 --> 00:07:58.516 A:middle
or one copyright per
presentation it's static.

00:07:59.276 --> 00:08:01.406 A:middle
But the benefit of that is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.276 --> 00:08:01.406 A:middle
But the benefit of that is

00:08:01.406 --> 00:08:03.336 A:middle
that it's available
whenever you want it.

00:08:03.336 --> 00:08:05.876 A:middle
It's available right away.

00:08:06.126 --> 00:08:10.736 A:middle
So let's contrast that to ID3.

00:08:10.736 --> 00:08:14.396 A:middle
Because timed metadata
is linked to the timeline

00:08:14.396 --> 00:08:17.176 A:middle
of the media presentation,
it's often used

00:08:17.176 --> 00:08:19.176 A:middle
for signaling events
in the stream.

00:08:19.176 --> 00:08:22.156 A:middle
For instance, the start of an
ad, the start of a program.

00:08:23.586 --> 00:08:25.916 A:middle
It lives inside the
media format itself,

00:08:25.946 --> 00:08:28.006 A:middle
so it's a binary
format called ID3.

00:08:28.696 --> 00:08:30.006 A:middle
And that makes it compact.

00:08:30.006 --> 00:08:32.296 A:middle
It also makes it kind
of difficult to author

00:08:32.296 --> 00:08:33.895 A:middle
because it requires
specialized tools.

00:08:34.096 --> 00:08:35.836 A:middle
It's kind of a pain in the
butt if you're debugging it.

00:08:36.155 --> 00:08:37.405 A:middle
It's hard to read ID3.

00:08:38.436 --> 00:08:40.346 A:middle
But you can have as
many as you want,

00:08:40.476 --> 00:08:42.856 A:middle
and you can put them anywhere
on the timeline you like.

00:08:43.126 --> 00:08:44.196 A:middle
And so that's powerful.

00:08:45.226 --> 00:08:47.716 A:middle
The flipside of that however
is because it's in the media,

00:08:48.096 --> 00:08:50.766 A:middle
we can't give it to you until
it's actually been played.

00:08:52.236 --> 00:08:55.586 A:middle
So where does the new guy fit?

00:08:56.556 --> 00:08:58.176 A:middle
What we're adding is a way

00:08:58.176 --> 00:09:01.766 A:middle
to author timed metadata
inside the playlist itself.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.176 --> 00:09:01.766 A:middle
to author timed metadata
inside the playlist itself.

00:09:02.806 --> 00:09:04.986 A:middle
And so you can use it
for the same things

00:09:04.986 --> 00:09:07.526 A:middle
that you're using ID3 for today.

00:09:09.556 --> 00:09:11.536 A:middle
You can author them as text.

00:09:11.616 --> 00:09:12.726 A:middle
So that's pretty easy.

00:09:12.996 --> 00:09:15.476 A:middle
You can easily put
them into a playlist,

00:09:16.456 --> 00:09:18.516 A:middle
and you can have as
many as you want.

00:09:18.516 --> 00:09:19.656 A:middle
They can be overlapping.

00:09:19.656 --> 00:09:20.326 A:middle
They can nest.

00:09:20.376 --> 00:09:21.176 A:middle
They can do whatever.

00:09:22.766 --> 00:09:26.596 A:middle
And on the other hand, because
they're in the playlist,

00:09:26.716 --> 00:09:28.636 A:middle
we can give you the
entire set as soon

00:09:28.636 --> 00:09:31.196 A:middle
as we read the playlist
no matter

00:09:31.196 --> 00:09:32.626 A:middle
where the playhead
is in the media.

00:09:33.276 --> 00:09:35.296 A:middle
And so that makes
it pretty nice.

00:09:35.296 --> 00:09:38.376 A:middle
For doing things particularly
like navigation control.

00:09:39.866 --> 00:09:40.946 A:middle
So what does it look like?

00:09:41.176 --> 00:09:45.206 A:middle
How do we make it sort of sit?

00:09:45.616 --> 00:09:48.556 A:middle
Well, we already had the
idea of dates in HLS.

00:09:48.556 --> 00:09:50.836 A:middle
We have the PROGRAM-DATE-TIME
tag that allows you

00:09:50.836 --> 00:09:53.246 A:middle
to precisely signal
times inside a playlist.

00:09:53.246 --> 00:09:55.256 A:middle
So we built on top
of that and we said,

00:09:55.256 --> 00:10:01.276 A:middle
each bit of metadata is going to
be expressed as a range of time


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:55.256 --> 00:10:01.276 A:middle
each bit of metadata is going to
be expressed as a range of time

00:10:01.726 --> 00:10:04.296 A:middle
that has a set of
attributes attached to it.

00:10:04.886 --> 00:10:06.336 A:middle
And some of those are ours.

00:10:06.336 --> 00:10:07.566 A:middle
Some of those are yours.

00:10:07.896 --> 00:10:12.086 A:middle
We set up the syntax so
it'll be really clean to add

00:10:12.086 --> 00:10:13.956 A:middle
and remove these
things for live streams.

00:10:14.266 --> 00:10:16.526 A:middle
So it meshes really well
with the live workflow.

00:10:16.576 --> 00:10:20.466 A:middle
So what does it look like?

00:10:21.336 --> 00:10:23.956 A:middle
Let's take a look at
one of these guys.

00:10:24.816 --> 00:10:27.136 A:middle
We called the new tag
the DATERANGE tag.

00:10:27.376 --> 00:10:28.446 A:middle
Here's another playlist.

00:10:28.676 --> 00:10:30.816 A:middle
The first guy says
basically what time it is.

00:10:31.156 --> 00:10:32.486 A:middle
The second one is
a DATERANGE tag.

00:10:32.486 --> 00:10:35.286 A:middle
And if you look at it, what
you can see is it's composed

00:10:35.286 --> 00:10:36.666 A:middle
of attributes.

00:10:37.116 --> 00:10:39.666 A:middle
These guys here, these
blue ones, are the ones

00:10:39.666 --> 00:10:40.846 A:middle
that are defined by the spec --

00:10:41.186 --> 00:10:43.226 A:middle
the ID, the START-DATE,
the DURATION.

00:10:44.106 --> 00:10:47.776 A:middle
These guys, we reserve
the X-namespace somewhere

00:10:47.776 --> 00:10:50.486 A:middle
to HTTP for all you guys.

00:10:50.486 --> 00:10:51.816 A:middle
So you can use that to put

00:10:51.816 --> 00:10:53.556 A:middle
in whatever attribute
value pairs you want.

00:10:53.916 --> 00:10:55.296 A:middle
In this case, someone
decided to put

00:10:55.296 --> 00:10:57.536 A:middle
in an AD-ID and a beacon URL.

00:10:58.186 --> 00:10:59.776 A:middle
So that's an example.

00:10:59.776 --> 00:11:02.356 A:middle
That's what one of these guys
looks like in a playlist.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.776 --> 00:11:02.356 A:middle
That's what one of these guys
looks like in a playlist.

00:11:03.846 --> 00:11:05.506 A:middle
When you're doing your
content authoring,

00:11:06.456 --> 00:11:08.496 A:middle
you can use it either
live or VOD.

00:11:08.496 --> 00:11:11.166 A:middle
It just has to have a
DATERANGE tag and a date.

00:11:11.226 --> 00:11:14.076 A:middle
You can obviously
put these things

00:11:14.076 --> 00:11:15.936 A:middle
in when you're creating
your playlist.

00:11:16.056 --> 00:11:18.726 A:middle
But the other nice thing is,
because the playlists are easy

00:11:18.726 --> 00:11:20.966 A:middle
to manipulate, if
you've got something

00:11:20.966 --> 00:11:23.536 A:middle
like a post-production workflow
that's doing ad insertion

00:11:23.536 --> 00:11:25.586 A:middle
or something like
that, it's really easy

00:11:25.586 --> 00:11:27.976 A:middle
to augment the playlist
and presentation

00:11:27.976 --> 00:11:29.316 A:middle
with metadata at the same time.

00:11:30.096 --> 00:11:34.926 A:middle
By popular request, we
also included rules for how

00:11:34.926 --> 00:11:38.846 A:middle
to map SCTE-35 that you might
find in your source media

00:11:39.326 --> 00:11:41.076 A:middle
into the DATERANGE tags.

00:11:41.276 --> 00:11:46.196 A:middle
So you can carry SCTE-35
losslessly in HLS.

00:11:47.666 --> 00:11:51.006 A:middle
And finally, we've added support
for the media stream validator.

00:11:51.226 --> 00:11:53.726 A:middle
And I actually wanted to take
a moment to give a shout-out

00:11:53.726 --> 00:11:55.316 A:middle
to the new set of tools we have.

00:11:55.756 --> 00:11:57.446 A:middle
We put together a talk --

00:11:57.446 --> 00:11:59.666 A:middle
we don't have time to talk about
it right now in this session --

00:11:59.666 --> 00:12:02.426 A:middle
but we put together a talk
talking about the new tools.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.666 --> 00:12:02.426 A:middle
but we put together a talk
talking about the new tools.

00:12:02.826 --> 00:12:04.706 A:middle
And so I'd encourage
you to go watch that.

00:12:04.966 --> 00:12:09.136 A:middle
It's on demand on your apps
or whatever you guys have.

00:12:09.136 --> 00:12:10.556 A:middle
And you should check it
and out see what kinds

00:12:10.556 --> 00:12:13.086 A:middle
of new tricks the validator
in particular has learned.

00:12:13.876 --> 00:12:18.236 A:middle
So for playback, when
you want to actually act

00:12:18.236 --> 00:12:20.246 A:middle
on the metadata that's
in the stream,

00:12:20.246 --> 00:12:24.016 A:middle
you have a set of
AVFoundation APIs.

00:12:24.306 --> 00:12:26.816 A:middle
And so you have to be
in an app at this point.

00:12:27.466 --> 00:12:29.266 A:middle
And the APIs are essentially,

00:12:29.396 --> 00:12:31.166 A:middle
give me all the data
you currently got.

00:12:31.626 --> 00:12:33.766 A:middle
And then if you've
got a live playlist,

00:12:33.826 --> 00:12:35.186 A:middle
tell me when something
new shows up.

00:12:36.396 --> 00:12:42.146 A:middle
And it's centered around
a new object called the

00:12:42.146 --> 00:12:44.916 A:middle
AVPlayerItemMetadataCollector.

00:12:45.636 --> 00:12:47.886 A:middle
And so we've got a
little sample up here.

00:12:47.886 --> 00:12:49.616 A:middle
You can see it doing
your typical things.

00:12:49.616 --> 00:12:51.676 A:middle
You create your asset.

00:12:51.676 --> 00:12:52.736 A:middle
You create your PlayerItem.

00:12:52.736 --> 00:12:54.746 A:middle
And then you say, "Hey, I want
to collect some metadata."

00:12:55.036 --> 00:12:57.126 A:middle
So you create the
MetadataCollector.

00:12:57.466 --> 00:12:58.836 A:middle
You set yourself
up as a delegate

00:12:58.836 --> 00:12:59.956 A:middle
so we can tell you stuff,

00:12:59.956 --> 00:13:01.696 A:middle
and then you add it
to the PlayerItem.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.956 --> 00:13:01.696 A:middle
and then you add it
to the PlayerItem.

00:13:02.296 --> 00:13:03.536 A:middle
And that's it.

00:13:03.676 --> 00:13:07.316 A:middle
Then you get all
the metadata items.

00:13:07.856 --> 00:13:10.616 A:middle
And so it's really easy to use.

00:13:10.616 --> 00:13:11.646 A:middle
It's really powerful.

00:13:12.076 --> 00:13:15.466 A:middle
And I think that it's going
to be the preferred way

00:13:15.466 --> 00:13:18.026 A:middle
to carry metadata
in HLS pretty soon.

00:13:18.476 --> 00:13:21.256 A:middle
So the next thing
we're going to talk

00:13:21.256 --> 00:13:27.136 A:middle
about today is another feature
that's come by popular request.

00:13:27.696 --> 00:13:33.846 A:middle
And that is the ability to
play HLS when you're offline.

00:13:35.516 --> 00:13:39.546 A:middle
[ Applause ]

00:13:40.046 --> 00:13:42.076 A:middle
And to talk about that, I'm
going to ask my colleague,

00:13:42.076 --> 00:13:44.906 A:middle
Jordan Schneider, to come
up and explain it to you.

00:13:45.516 --> 00:13:51.716 A:middle
[ Applause ]

00:13:52.216 --> 00:13:57.296 A:middle
&gt;&gt; Hey. So, let's see
if those slides click.

00:13:57.746 --> 00:13:59.066 A:middle
There we go.

00:13:59.856 --> 00:14:04.056 A:middle
In iOS 10, we are bringing
you the ability to download


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.856 --> 00:14:04.056 A:middle
In iOS 10, we are bringing
you the ability to download

00:14:04.056 --> 00:14:06.566 A:middle
and then play HLS content
without a network connection.

00:14:07.426 --> 00:14:09.756 A:middle
So now you can bring
offline media playback

00:14:09.756 --> 00:14:13.006 A:middle
to your users using
your existing streaming

00:14:13.006 --> 00:14:13.696 A:middle
video library.

00:14:14.416 --> 00:14:15.886 A:middle
So as part of this feature,

00:14:15.996 --> 00:14:18.816 A:middle
we are extending the
FairPlay Streaming support

00:14:18.816 --> 00:14:24.146 A:middle
that we introduced to you last
year to work with offline HLS,

00:14:24.766 --> 00:14:27.156 A:middle
and we are providing you a way

00:14:27.156 --> 00:14:29.446 A:middle
to download your HLS
content even while your app

00:14:29.446 --> 00:14:30.366 A:middle
is backgrounded.

00:14:31.156 --> 00:14:33.776 A:middle
And finally, we are
exposing the ability

00:14:33.776 --> 00:14:37.116 A:middle
to play partially-downloaded
content even while your download

00:14:37.116 --> 00:14:38.226 A:middle
might still be in progress.

00:14:39.386 --> 00:14:43.916 A:middle
So the first question - when
and should you use offline HLS?

00:14:44.716 --> 00:14:48.956 A:middle
Well, yes, if you want to
use this feature primarily

00:14:48.956 --> 00:14:53.136 A:middle
when your user might want to
play content when they expect

00:14:53.136 --> 00:14:55.026 A:middle
that they might not have
a network connection,

00:14:55.326 --> 00:14:56.686 A:middle
such as when they go
into airplane mode.

00:14:57.186 --> 00:14:59.736 A:middle
However, this feature is not
targeted toward preemptively

00:14:59.736 --> 00:15:00.426 A:middle
loading media.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.736 --> 00:15:00.426 A:middle
loading media.

00:15:00.946 --> 00:15:03.516 A:middle
We have other ways of doing
that using AVPlayerItem.

00:15:04.746 --> 00:15:08.336 A:middle
So why use HLS for
offline content rather

00:15:08.336 --> 00:15:09.816 A:middle
than just downloading
movie files?

00:15:10.286 --> 00:15:12.616 A:middle
Well, for one, your content
might already be authored

00:15:12.976 --> 00:15:13.426 A:middle
as HLS.

00:15:13.516 --> 00:15:16.836 A:middle
So adopting HLS for offline
content might be a really

00:15:16.836 --> 00:15:19.516 A:middle
convenient story for you from
an engineering perspective.

00:15:20.116 --> 00:15:22.506 A:middle
But also, in addition
to a video track,

00:15:22.976 --> 00:15:25.826 A:middle
movie files can contain
many different audio

00:15:25.826 --> 00:15:28.846 A:middle
and subtitle tracks that your
user might not really need

00:15:28.846 --> 00:15:30.156 A:middle
or want to persist offline.

00:15:31.066 --> 00:15:35.426 A:middle
So in HLS, because all these
tracks are contained separately

00:15:35.426 --> 00:15:38.276 A:middle
on the server into
different playlists,

00:15:38.276 --> 00:15:41.326 A:middle
we can have a little
bit more flexibility.

00:15:41.666 --> 00:15:44.026 A:middle
Specifically, we can
have precise control

00:15:44.026 --> 00:15:45.786 A:middle
over which media
selections are downloaded,

00:15:46.126 --> 00:15:48.266 A:middle
saving your user
time, network data,

00:15:48.266 --> 00:15:50.166 A:middle
and storage space
on their device.

00:15:50.766 --> 00:15:54.656 A:middle
So, for example, by default
we downloaded a user's default

00:15:54.656 --> 00:15:57.756 A:middle
media selection, which is likely
all they're really going to care

00:15:57.756 --> 00:15:58.816 A:middle
about when they play offline.

00:15:58.816 --> 00:16:00.856 A:middle
What we're also providing
you is a way


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.816 --> 00:16:00.856 A:middle
What we're also providing
you is a way

00:16:00.856 --> 00:16:04.796 A:middle
to configure exactly what you
and your user want to download

00:16:04.796 --> 00:16:06.556 A:middle
to have available
for offline playback.

00:16:07.706 --> 00:16:12.996 A:middle
So another cool thing about
playing HLS offline is that,

00:16:13.256 --> 00:16:14.316 A:middle
using the same asset,

00:16:14.356 --> 00:16:16.966 A:middle
we can still download
media selection options

00:16:16.966 --> 00:16:19.946 A:middle
that have not been downloaded so
long as they are still available

00:16:19.946 --> 00:16:21.906 A:middle
on your server, which is nice.

00:16:22.856 --> 00:16:25.036 A:middle
So how do you do this?

00:16:25.336 --> 00:16:27.856 A:middle
In iOS 10, we're
introducing a new class

00:16:27.856 --> 00:16:31.046 A:middle
to download AVAssets
called AVAssetDownloadTask.

00:16:31.696 --> 00:16:35.246 A:middle
This class inherits
features of URL session.

00:16:35.596 --> 00:16:39.256 A:middle
Most importantly, the
ability to download assets

00:16:39.256 --> 00:16:42.286 A:middle
in the background even while
your app isn't running using all

00:16:42.286 --> 00:16:43.206 A:middle
of its mechanisms.

00:16:43.886 --> 00:16:45.696 A:middle
As I mentioned before,
we're giving you the ability

00:16:45.696 --> 00:16:48.346 A:middle
to control which media
selections you want to download.

00:16:48.836 --> 00:16:52.926 A:middle
And because this is HLS,
we have the ability for you

00:16:52.926 --> 00:16:55.306 A:middle
to select the quality of
your asset that you want

00:16:55.306 --> 00:16:56.666 A:middle
to download for offline as well.

00:16:56.666 --> 00:16:59.256 A:middle
So the interface

00:16:59.336 --> 00:17:01.336 A:middle
of AVAssetDownloadTask
looks like this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.336 --> 00:17:01.336 A:middle
of AVAssetDownloadTask
looks like this.

00:17:01.786 --> 00:17:04.266 A:middle
It inherits from URLSessionTask.

00:17:04.266 --> 00:17:06.476 A:middle
I want to mention here
that it does not inherit

00:17:06.476 --> 00:17:08.336 A:middle
from URLSessionDownloadTask.

00:17:08.746 --> 00:17:10.896 A:middle
It behaves similarly, but
there is a few differences

00:17:10.896 --> 00:17:13.626 A:middle
that I'll point out as the
presentation goes along.

00:17:13.626 --> 00:17:15.016 A:middle
So to create one
of these things,

00:17:15.016 --> 00:17:18.816 A:middle
you want to set up a URLSession.

00:17:18.816 --> 00:17:20.896 A:middle
Now we have a specific subclass

00:17:20.896 --> 00:17:23.516 A:middle
of URLSession called
AVAssetDownloadURLSession

00:17:23.516 --> 00:17:24.816 A:middle
that you have to use
for one of these things.

00:17:25.366 --> 00:17:27.425 A:middle
And so you call
makeAssetDownloadTask

00:17:27.425 --> 00:17:28.856 A:middle
to create an asset
download task.

00:17:29.406 --> 00:17:31.756 A:middle
And then for your
selection of quality,

00:17:31.756 --> 00:17:34.196 A:middle
we have a minimum required
bit rate options key,

00:17:34.586 --> 00:17:36.376 A:middle
as well as a media
selection key.

00:17:37.206 --> 00:17:40.796 A:middle
Now I should note here that each
AVAssetDownloadTask corresponds

00:17:40.796 --> 00:17:42.846 A:middle
to a single set of
media selections.

00:17:43.256 --> 00:17:45.306 A:middle
So if you want to download
multiple media selections

00:17:45.306 --> 00:17:47.406 A:middle
on the same asset, then
you're going to want to set

00:17:47.406 --> 00:17:49.776 A:middle
up multiple AVAssetDownloadTasks
to do so.

00:17:50.066 --> 00:17:51.766 A:middle
I'll show you how to do
that in a few slides.

00:17:52.786 --> 00:17:55.366 A:middle
So to use one of these
things, here's what we do.

00:17:55.886 --> 00:17:59.306 A:middle
The first thing is to set
up an AVAssetDownloadTask,

00:17:59.306 --> 00:18:01.356 A:middle
configure it how you want
it, and start the download.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.306 --> 00:18:01.356 A:middle
configure it how you want
it, and start the download.

00:18:02.166 --> 00:18:04.126 A:middle
Next, we want to
respond to any events

00:18:04.126 --> 00:18:05.626 A:middle
that might occur
during the download,

00:18:05.626 --> 00:18:07.326 A:middle
such as monitoring the
progress of the download.

00:18:08.336 --> 00:18:10.336 A:middle
Then once the download
finishes, we're going to want

00:18:10.336 --> 00:18:12.386 A:middle
to store the location
for playback

00:18:12.386 --> 00:18:13.386 A:middle
when we're actually offline.

00:18:14.316 --> 00:18:15.456 A:middle
And then you might want

00:18:15.456 --> 00:18:18.046 A:middle
to download additional media
selections for your user to use.

00:18:18.786 --> 00:18:22.256 A:middle
And finally, you're going
to want to play this thing.

00:18:22.436 --> 00:18:26.796 A:middle
So to set up one of these
downloads, the first thing

00:18:26.796 --> 00:18:30.326 A:middle
after you have your asset set up
is you're going to want to set

00:18:30.326 --> 00:18:31.746 A:middle
up a backgrounConfiguration

00:18:31.746 --> 00:18:34.636 A:middle
from a background
URLSessionConfiguration.

00:18:35.466 --> 00:18:38.676 A:middle
Then you're going to create
your AssetDownloadURLSession,

00:18:39.136 --> 00:18:42.296 A:middle
and then create your
download task.

00:18:42.296 --> 00:18:45.526 A:middle
Here, I have the download
task to download the quality

00:18:45.526 --> 00:18:47.916 A:middle
at about a media bit rate of
about two megabits per second.

00:18:48.296 --> 00:18:51.046 A:middle
But by default, we'll
download the highest-quality

00:18:51.586 --> 00:18:52.696 A:middle
video available.

00:18:53.436 --> 00:18:54.746 A:middle
Then once you have that set up,

00:18:54.746 --> 00:18:56.466 A:middle
because this is a
URLSessionTask,

00:18:56.466 --> 00:18:58.126 A:middle
you just call resume
to set your download.

00:18:59.536 --> 00:19:01.456 A:middle
So once you have your download
going, then you're going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.536 --> 00:19:01.456 A:middle
So once you have your download
going, then you're going

00:19:01.456 --> 00:19:02.246 A:middle
to want to monitor it.

00:19:03.076 --> 00:19:05.216 A:middle
To do this, we have
a new protocol

00:19:05.216 --> 00:19:07.346 A:middle
for you called
AVAssetDownloadDelegate.

00:19:07.676 --> 00:19:09.986 A:middle
So this inherits the
same delegate methods

00:19:09.986 --> 00:19:12.136 A:middle
that URLSessionTaskDelegate has.

00:19:12.676 --> 00:19:15.156 A:middle
But I want to point out two
things that we have on here

00:19:15.156 --> 00:19:16.476 A:middle
that we are introducing to you.

00:19:17.256 --> 00:19:18.806 A:middle
One is our method that we use

00:19:18.806 --> 00:19:21.656 A:middle
to monitor the progress
of downloads.

00:19:22.286 --> 00:19:26.346 A:middle
In this method, we express
our progress of the download

00:19:26.346 --> 00:19:28.216 A:middle
and time ranges as
opposed to bytes

00:19:28.376 --> 00:19:30.696 A:middle
for better parlance
of media interfaces.

00:19:31.336 --> 00:19:34.726 A:middle
And then we have a
didFinishDownloadingTo location

00:19:34.726 --> 00:19:36.026 A:middle
delegate method which
informs you

00:19:36.026 --> 00:19:38.616 A:middle
where the download
gets downloaded to.

00:19:38.716 --> 00:19:39.696 A:middle
So this is similar

00:19:39.696 --> 00:19:43.156 A:middle
to URLSessionDownloadDelegate's
protocol method here.

00:19:43.606 --> 00:19:45.866 A:middle
But your expectation
for what you need to do

00:19:46.636 --> 00:19:49.826 A:middle
when you get this
delegate method is a little

00:19:49.826 --> 00:19:50.436 A:middle
bit differently.

00:19:50.476 --> 00:19:53.566 A:middle
So I'll point that
out in a second.

00:19:53.676 --> 00:19:57.366 A:middle
So here's an example of our
progress delegate method.

00:19:57.366 --> 00:20:00.476 A:middle
Here, I'm just converting
time ranges


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:57.366 --> 00:20:00.476 A:middle
Here, I'm just converting
time ranges

00:20:00.476 --> 00:20:01.976 A:middle
to a percent -- complete
downloaded.

00:20:02.046 --> 00:20:03.876 A:middle
I'm not going to go
into it in detail,

00:20:03.876 --> 00:20:05.226 A:middle
but that's how you
would do that.

00:20:06.466 --> 00:20:09.036 A:middle
Another thing that might happen
during your download is your app

00:20:09.036 --> 00:20:09.746 A:middle
might be killed.

00:20:10.116 --> 00:20:11.506 A:middle
The process might be terminated.

00:20:11.506 --> 00:20:13.666 A:middle
And then what do you do?

00:20:13.666 --> 00:20:14.716 A:middle
Your download continues.

00:20:15.066 --> 00:20:17.706 A:middle
Well, to respond to that, you
respond exactly how you respond

00:20:17.706 --> 00:20:19.496 A:middle
to URLSessionDownloadTasks.

00:20:19.786 --> 00:20:22.546 A:middle
And that's by, when your app
launches, you're going to want

00:20:22.546 --> 00:20:25.286 A:middle
to set up another background
configuration using the same

00:20:25.286 --> 00:20:28.036 A:middle
identifier you used to set up
your download in the first place

00:20:28.366 --> 00:20:30.306 A:middle
and then create a
URLSession from that.

00:20:30.626 --> 00:20:32.676 A:middle
And then from there, call
the getAllTasks method.

00:20:32.676 --> 00:20:35.836 A:middle
And then here, you can restore
your AVAssetDownloadTask

00:20:35.836 --> 00:20:37.916 A:middle
which will have the
current progress of it.

00:20:37.916 --> 00:20:39.406 A:middle
And you can use this
to update any UI

00:20:39.406 --> 00:20:40.366 A:middle
that you might have in the app.

00:20:40.606 --> 00:20:43.896 A:middle
And you can even use it to
grab the original AVAsset

00:20:43.896 --> 00:20:45.386 A:middle
that you used to set
up your download.

00:20:46.306 --> 00:20:50.256 A:middle
So once your download finishes,
the first thing you're going

00:20:50.256 --> 00:20:52.786 A:middle
to want to do is store the
location of the download asset.

00:20:53.496 --> 00:20:56.956 A:middle
So this method is called
whenever anything is deposited

00:20:56.956 --> 00:20:58.746 A:middle
at this location, including

00:20:58.746 --> 00:21:02.116 A:middle
when a partially-downloaded
content is canceled


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.746 --> 00:21:02.116 A:middle
when a partially-downloaded
content is canceled

00:21:02.116 --> 00:21:02.956 A:middle
by your user.

00:21:03.386 --> 00:21:05.676 A:middle
Now you can use this
partially-downloaded,

00:21:05.706 --> 00:21:12.186 A:middle
cancelled download to resume
the download at a future time.

00:21:12.516 --> 00:21:13.376 A:middle
Or you can even use it

00:21:13.376 --> 00:21:16.176 A:middle
to playback whatever has
been partially there.

00:21:16.636 --> 00:21:18.686 A:middle
But if you really don't
want that download there

00:21:18.806 --> 00:21:21.566 A:middle
or that content there on
your app storage anymore,

00:21:21.886 --> 00:21:23.746 A:middle
then here's where you
should probably delete it.

00:21:24.546 --> 00:21:28.066 A:middle
So, unlike
URLSessionDownloadDelegate,

00:21:28.336 --> 00:21:32.056 A:middle
we ask that you do not move
the asset from this location.

00:21:32.536 --> 00:21:34.336 A:middle
And we do this because
it's really important

00:21:34.336 --> 00:21:36.216 A:middle
that the system be able
to find these files

00:21:36.216 --> 00:21:38.606 A:middle
as the system may want
to reclaim disk space

00:21:38.606 --> 00:21:40.556 A:middle
in low disk space
conditions, and might actually

00:21:40.556 --> 00:21:42.626 A:middle
at some point go out
and delete this asset

00:21:42.966 --> 00:21:44.706 A:middle
from your app container.

00:21:45.416 --> 00:21:47.756 A:middle
So what you're going to
want to save is going

00:21:47.756 --> 00:21:50.176 A:middle
to be the relative
path of the location.

00:21:50.176 --> 00:21:53.046 A:middle
And then from there, you will
be able to restore your asset

00:21:53.046 --> 00:21:54.156 A:middle
in the future for playback.

00:21:55.656 --> 00:21:59.966 A:middle
So, now that you have a version
of your asset downloaded,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.396 --> 00:22:02.576 A:middle
let's say you want to download
additional media selections.

00:22:03.266 --> 00:22:04.956 A:middle
A good place to do this would be

00:22:04.956 --> 00:22:08.036 A:middle
in our didCompleteWithError
delegate method.

00:22:08.036 --> 00:22:10.196 A:middle
This is the same one
that URLSessionTask has.

00:22:10.806 --> 00:22:13.456 A:middle
And the reason why it
might be good to do here is

00:22:13.456 --> 00:22:14.506 A:middle
because media selections

00:22:14.506 --> 00:22:16.556 A:middle
on the same asset are
downloaded serially.

00:22:16.876 --> 00:22:20.416 A:middle
And this is generally the
right place to do any cleanup

00:22:20.506 --> 00:22:21.976 A:middle
of the complete download.

00:22:22.636 --> 00:22:26.606 A:middle
So, to augment with an
additional media selection

00:22:26.606 --> 00:22:28.906 A:middle
option -- say, the
Spanish audio --

00:22:28.906 --> 00:22:30.656 A:middle
we would first grab
our spanishOption

00:22:30.656 --> 00:22:31.486 A:middle
that we want to download.

00:22:32.166 --> 00:22:35.676 A:middle
Then we would mutate
the AVMediaSelection

00:22:35.676 --> 00:22:37.876 A:middle
that we originally passed

00:22:37.876 --> 00:22:40.926 A:middle
in to select the
spanishOption from there.

00:22:41.576 --> 00:22:43.816 A:middle
And then once we have that
selected, we're going to want

00:22:43.816 --> 00:22:47.416 A:middle
to create a new
AVAssetDownloadTask preferably

00:22:47.416 --> 00:22:50.626 A:middle
on the same session with passing
the additional media selection

00:22:50.626 --> 00:22:51.676 A:middle
we want to download.

00:22:51.976 --> 00:22:53.046 A:middle
And then we call resume,

00:22:53.046 --> 00:22:55.276 A:middle
and then the whole
process repeats itself.

00:22:55.276 --> 00:22:57.066 A:middle
And then we could download
additional media selection

00:22:57.066 --> 00:22:58.736 A:middle
after that if we wanted to.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.156 --> 00:23:02.056 A:middle
So let's talk about
playing this thing now.

00:23:03.166 --> 00:23:06.846 A:middle
So, say we had a --
here's an example

00:23:07.356 --> 00:23:09.826 A:middle
of how we could create
a download task.

00:23:09.826 --> 00:23:13.186 A:middle
And notice that I pass in an
asset with a networkURL to it.

00:23:13.656 --> 00:23:18.296 A:middle
When we playback offline
HLS, if we still have

00:23:18.296 --> 00:23:21.666 A:middle
that original urlAsset
available, then we should use

00:23:21.666 --> 00:23:25.406 A:middle
that AVAsset instance to play.

00:23:25.776 --> 00:23:28.696 A:middle
And we can grab this from
the urlAsset property off

00:23:28.696 --> 00:23:29.686 A:middle
the AssetDownloadTask.

00:23:30.116 --> 00:23:32.316 A:middle
If you pass in a new
asset with networkURL,

00:23:32.316 --> 00:23:33.436 A:middle
AVFoundation will not know

00:23:33.436 --> 00:23:35.686 A:middle
where to find the
downloaded content from.

00:23:36.066 --> 00:23:37.616 A:middle
So you should use
that same asset,

00:23:37.616 --> 00:23:39.566 A:middle
and then you will
have playback offline.

00:23:40.126 --> 00:23:43.026 A:middle
However, if you no
longer have any references

00:23:43.026 --> 00:23:45.166 A:middle
to that original AVAsset --

00:23:45.626 --> 00:23:48.356 A:middle
for example, a long
period of time later

00:23:48.356 --> 00:23:50.476 A:middle
when your app might not
have been running --

00:23:50.936 --> 00:23:52.626 A:middle
then what you're going to want
to do is you're going to want

00:23:52.676 --> 00:23:56.826 A:middle
to create a new AVAsset
from the download location

00:23:56.826 --> 00:23:57.726 A:middle
that we supplied to you

00:23:57.726 --> 00:24:00.096 A:middle
in the didFinishDownloadingTo
delegate method


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.726 --> 00:24:00.096 A:middle
in the didFinishDownloadingTo
delegate method

00:24:00.526 --> 00:24:02.356 A:middle
and create a PlayerItem
with that.

00:24:03.226 --> 00:24:05.836 A:middle
Now even in this case, if
you want to do an operation

00:24:05.916 --> 00:24:08.896 A:middle
on the asset -- for example,

00:24:08.966 --> 00:24:11.396 A:middle
augment with an additional
media selection download --

00:24:11.716 --> 00:24:13.756 A:middle
you really should
reuse that same asset.

00:24:13.756 --> 00:24:14.706 A:middle
You shouldn't have a bunch

00:24:14.706 --> 00:24:19.586 A:middle
of AVAssets pointing toward
the same fileURL on disk.

00:24:20.096 --> 00:24:21.616 A:middle
This helps AVFoundation
be efficient

00:24:21.616 --> 00:24:24.166 A:middle
about reusing already-downloaded
media data.

00:24:25.356 --> 00:24:29.676 A:middle
So we also have an additional
class to help you be stringent

00:24:29.676 --> 00:24:32.426 A:middle
about what you let your
users play offline,

00:24:32.426 --> 00:24:33.956 A:middle
and this is called AVAssetCache.

00:24:34.406 --> 00:24:37.206 A:middle
You grab this from the asset
cache property on an AVAsset.

00:24:37.206 --> 00:24:38.906 A:middle
And it can do two things.

00:24:39.016 --> 00:24:42.746 A:middle
One is that it can tell
you if any rendition

00:24:42.746 --> 00:24:44.886 A:middle
of this asset is
playable offline.

00:24:45.436 --> 00:24:48.956 A:middle
And the other thing it can do
is it can tell you whether a

00:24:48.956 --> 00:24:50.976 A:middle
specific media selection
option is available offline.

00:24:51.406 --> 00:24:52.786 A:middle
Now, remember, if it's
not available offline,

00:24:52.786 --> 00:24:55.186 A:middle
it's still playable so long as
you're connected to the network

00:24:55.476 --> 00:24:58.286 A:middle
and that media selection option
is still available on the server

00:24:58.286 --> 00:24:59.406 A:middle
that you downloaded it from.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:00.416 --> 00:25:03.206 A:middle
So, that's how you use
AVAssetDownloadTask

00:25:03.326 --> 00:25:06.496 A:middle
and play the subsequent
downloaded asset.

00:25:06.806 --> 00:25:08.576 A:middle
And I should note
that number five here,

00:25:08.576 --> 00:25:10.866 A:middle
playing the download asset
disk, that can happen really

00:25:11.246 --> 00:25:13.086 A:middle
at any point in this process.

00:25:13.086 --> 00:25:16.706 A:middle
It can even happen before
you start the download,

00:25:16.706 --> 00:25:17.866 A:middle
or even during the download.

00:25:17.866 --> 00:25:20.476 A:middle
And AVFoundation will be
efficient about trying

00:25:20.476 --> 00:25:22.976 A:middle
to reuse what has already been
downloaded from the network.

00:25:24.036 --> 00:25:25.866 A:middle
So I want to switch gears
a little bit here and talk

00:25:25.866 --> 00:25:27.816 A:middle
about securing the
offline content.

00:25:28.656 --> 00:25:32.166 A:middle
So, last year, we
introduced FairPlay Streaming

00:25:32.166 --> 00:25:34.786 A:middle
to bring strong content
protection to the HLS ecosystem.

00:25:35.526 --> 00:25:39.176 A:middle
However, in iOS 9, FairPlay
Streaming requires a live

00:25:39.176 --> 00:25:40.486 A:middle
connection to a key server,

00:25:40.486 --> 00:25:43.186 A:middle
which doesn't really work
for offline playback.

00:25:43.766 --> 00:25:46.406 A:middle
So, this year, we've extended
FairPlay Streaming to work

00:25:46.406 --> 00:25:49.866 A:middle
without an internet connection
for the offline HLS case.

00:25:50.406 --> 00:25:54.206 A:middle
Now we do this by packaging your
keys in a manner that is safe

00:25:54.206 --> 00:25:56.796 A:middle
to store on disk and reuse
for offline playback.

00:25:57.266 --> 00:26:00.606 A:middle
But your app is still expected
to store this key itself


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:57.266 --> 00:26:00.606 A:middle
But your app is still expected
to store this key itself

00:26:00.606 --> 00:26:03.876 A:middle
and respond to key
requests from AVFoundation

00:26:03.876 --> 00:26:06.916 A:middle
on every single playback without
hitting the network once it has

00:26:06.916 --> 00:26:07.666 A:middle
its key cached.

00:26:08.636 --> 00:26:11.326 A:middle
So support for these keys
does require a change

00:26:11.326 --> 00:26:14.496 A:middle
in your key servers,
specifically a new TLV value

00:26:14.496 --> 00:26:17.096 A:middle
so your key servers have
to explicitly opt-in keys

00:26:17.096 --> 00:26:19.046 A:middle
to be eligible for
offline playback.

00:26:20.266 --> 00:26:23.536 A:middle
And finally, we have
a caveat for FPS Keys.

00:26:23.866 --> 00:26:26.536 A:middle
They must be declared in your
master playlist as session keys

00:26:26.536 --> 00:26:28.456 A:middle
if you want to make sure
that they are downloaded.

00:26:29.656 --> 00:26:33.956 A:middle
So, storing keys for offline
FairPlay Streaming really builds

00:26:33.956 --> 00:26:37.326 A:middle
off the request flow of
online FairPlay Streaming.

00:26:37.586 --> 00:26:39.706 A:middle
And so what you have to
change really just has to do

00:26:39.706 --> 00:26:41.436 A:middle
with how you modify
this request flow.

00:26:41.886 --> 00:26:43.876 A:middle
I'll give a quick recap
of it here to point

00:26:43.876 --> 00:26:44.896 A:middle
out what you need to do.

00:26:45.246 --> 00:26:47.636 A:middle
But for more information, you
should watch last year's talk

00:26:47.636 --> 00:26:49.226 A:middle
where we go into this
in a lot of detail.

00:26:50.526 --> 00:26:52.996 A:middle
So just like in FairPlay
Streaming for playback,

00:26:52.996 --> 00:26:54.636 A:middle
AVFoundation will
download your playlist

00:26:54.636 --> 00:26:56.896 A:middle
and trigger a key request
if it finds a key tag,

00:26:57.166 --> 00:26:58.946 A:middle
which will give your
app a chance

00:26:58.946 --> 00:27:00.566 A:middle
to save the key for
offline playback.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.946 --> 00:27:00.566 A:middle
to save the key for
offline playback.

00:27:01.146 --> 00:27:04.406 A:middle
So the first thing your app
would do is it would call back

00:27:04.406 --> 00:27:06.876 A:middle
to AVFoundation to get
a streaming key request.

00:27:07.216 --> 00:27:10.966 A:middle
Then it would talk to your
server, which would take

00:27:10.966 --> 00:27:11.836 A:middle
that streaming key request

00:27:11.836 --> 00:27:14.426 A:middle
and give you a content
key context or a CKC.

00:27:14.506 --> 00:27:17.186 A:middle
And then in online
FairPlay Streaming,

00:27:17.186 --> 00:27:19.886 A:middle
this is where you would finish
a request flow and simply return

00:27:19.886 --> 00:27:21.916 A:middle
to AVFoundation with that CKC.

00:27:22.436 --> 00:27:26.476 A:middle
However, in offline FairPlay
Streaming, here's where you need

00:27:26.476 --> 00:27:29.216 A:middle
to give that CKC to AVFoundation

00:27:29.216 --> 00:27:32.486 A:middle
so AVFoundation can freeze-dry
it into a format that is safe

00:27:32.486 --> 00:27:35.426 A:middle
for you to store into
your app storage.

00:27:35.726 --> 00:27:38.156 A:middle
And this is something
that you can also reuse

00:27:38.156 --> 00:27:40.716 A:middle
on subsequent playbacks.

00:27:40.856 --> 00:27:43.196 A:middle
So once you have this thing
written into your app storage,

00:27:43.456 --> 00:27:46.616 A:middle
you want to return that
freeze-dried key to AVFoundation

00:27:46.616 --> 00:27:47.676 A:middle
to complete the request.

00:27:48.016 --> 00:27:50.126 A:middle
Now if your app were offline,
then all you would have

00:27:50.126 --> 00:27:52.766 A:middle
to do is read that freeze-dried
key from your app storage

00:27:53.006 --> 00:27:55.726 A:middle
and return it to AVFoundation
so you could do this

00:27:55.726 --> 00:27:56.556 A:middle
without touching the network.

00:27:58.016 --> 00:27:59.826 A:middle
So let's look at how this
actually changes your code.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.796 --> 00:28:04.866 A:middle
So in online FairPlay Streaming,
these key requests happen

00:28:04.976 --> 00:28:06.676 A:middle
as a part of
AVAssetResourceLoader,

00:28:06.946 --> 00:28:08.536 A:middle
specifically as a
delegate method

00:28:08.536 --> 00:28:11.116 A:middle
on
AVAssetResourceLoadingRequest.

00:28:11.666 --> 00:28:13.016 A:middle
So the first thing you
would do once you get one

00:28:13.016 --> 00:28:15.446 A:middle
of these requests
is ask AVFoundation

00:28:15.446 --> 00:28:19.676 A:middle
to create a streaming
content key request or an SPC,

00:28:19.766 --> 00:28:21.726 A:middle
which sends that to your server.

00:28:21.866 --> 00:28:24.526 A:middle
And then you get a CKC
back, and then you respond

00:28:24.526 --> 00:28:26.066 A:middle
to AVFoundation with that.

00:28:27.596 --> 00:28:30.926 A:middle
Now in offline FairPlay
Streaming, we have a new method.

00:28:30.926 --> 00:28:33.066 A:middle
This is the method that you
use to freeze-dry the key.

00:28:33.066 --> 00:28:36.636 A:middle
You pass in the CKC you
get back from the server,

00:28:36.996 --> 00:28:40.296 A:middle
and it returns back that
data blob that is saved

00:28:40.296 --> 00:28:41.256 A:middle
for you to store offline.

00:28:42.096 --> 00:28:44.926 A:middle
We also have a new content type
as part of this request flow --

00:28:44.926 --> 00:28:46.406 A:middle
the persistentContentKey type --

00:28:46.966 --> 00:28:48.926 A:middle
and a new option to pass

00:28:48.926 --> 00:28:52.666 A:middle
into our streaming content key
request data for app method.

00:28:54.086 --> 00:28:59.846 A:middle
So here is how we would modify
that key request flow for a key

00:28:59.846 --> 00:29:00.876 A:middle
that we want to save offline.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.846 --> 00:29:00.876 A:middle
that we want to save offline.

00:29:01.516 --> 00:29:03.256 A:middle
The first thing that we want

00:29:03.506 --> 00:29:06.026 A:middle
to do is ask AVFoundation
to create an SPC.

00:29:06.626 --> 00:29:08.036 A:middle
The difference here is
that we need to pass

00:29:08.036 --> 00:29:09.826 A:middle
in the required persistentKey
option.

00:29:09.826 --> 00:29:12.616 A:middle
So that way, AVFoundation
and your key server knows

00:29:12.616 --> 00:29:14.886 A:middle
to request a key
that will be eligible

00:29:14.886 --> 00:29:16.276 A:middle
for that freeze-dry process.

00:29:17.016 --> 00:29:19.296 A:middle
So it sends this SPC to
your server to get the CKC.

00:29:19.296 --> 00:29:21.336 A:middle
And then once you
get the CKC back,

00:29:21.486 --> 00:29:23.196 A:middle
you call your
persistentContentKey method

00:29:23.466 --> 00:29:25.796 A:middle
to create this freeze-dried
thing that you can save to disk.

00:29:26.566 --> 00:29:28.256 A:middle
Then, you want to actually
write that thing to your disk.

00:29:28.906 --> 00:29:30.796 A:middle
And then, you want to
set your content type

00:29:30.796 --> 00:29:33.066 A:middle
to a persistentContentKey type

00:29:33.736 --> 00:29:38.086 A:middle
and then finish the downloading
request with that persistent CKC

00:29:38.086 --> 00:29:40.616 A:middle
that you saved to your disk.

00:29:41.506 --> 00:29:43.316 A:middle
So now if you are offline,

00:29:43.316 --> 00:29:45.926 A:middle
or say you already satisfied
this key request previously,

00:29:46.666 --> 00:29:48.566 A:middle
then this is what you will do.

00:29:49.276 --> 00:29:51.466 A:middle
You get your resource
loadingRequest

00:29:52.296 --> 00:29:56.566 A:middle
and you just simply read
your freeze-dried key

00:29:56.566 --> 00:29:58.506 A:middle
from your app storage.

00:29:59.386 --> 00:30:01.106 A:middle
Then you set your
persistentContentKey type,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.386 --> 00:30:01.106 A:middle
Then you set your
persistentContentKey type,

00:30:01.546 --> 00:30:03.386 A:middle
and you respond to the
key loadingRequest all

00:30:03.386 --> 00:30:06.556 A:middle
without hitting the network,
which is obviously required

00:30:06.646 --> 00:30:09.716 A:middle
as you may potentially
be in airplane mode

00:30:09.716 --> 00:30:11.726 A:middle
and don't have any
network connectivity during

00:30:11.726 --> 00:30:12.386 A:middle
this process.

00:30:13.106 --> 00:30:15.906 A:middle
So that's how you modify
FairPlay Streaming to work

00:30:15.906 --> 00:30:18.056 A:middle
with your offline HLS content.

00:30:19.286 --> 00:30:21.446 A:middle
So now I want to talk
about best practices

00:30:21.446 --> 00:30:23.626 A:middle
for managing your assets.

00:30:23.626 --> 00:30:26.556 A:middle
So it's important to note that
these downloads do contribute

00:30:26.556 --> 00:30:27.676 A:middle
to your app's disk usage,

00:30:27.676 --> 00:30:30.126 A:middle
so you want to be a
little bit mindful here.

00:30:30.126 --> 00:30:32.736 A:middle
You should really clean up
any unneeded assets on disk.

00:30:33.126 --> 00:30:35.686 A:middle
Specifically, you should
definitely provide a way

00:30:35.686 --> 00:30:39.416 A:middle
to your users to see everything
that you have downloaded

00:30:39.416 --> 00:30:42.176 A:middle
and allow them to delete things
that they don't want any more.

00:30:44.196 --> 00:30:48.546 A:middle
Remember that downloads that
users cancel do remain on disk.

00:30:48.686 --> 00:30:51.046 A:middle
Now you can use those to
resume downloads in the future

00:30:51.046 --> 00:30:51.916 A:middle
at some point if you like.

00:30:52.236 --> 00:30:54.476 A:middle
But if that's not what you
want, then you should take care

00:30:54.476 --> 00:30:58.016 A:middle
to go ahead and delete those
assets once they are cancelled.

00:30:59.116 --> 00:31:02.716 A:middle
We're asking that you
keep downloads driven


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.116 --> 00:31:02.716 A:middle
We're asking that you
keep downloads driven

00:31:02.716 --> 00:31:04.416 A:middle
by explicit user actions.

00:31:04.416 --> 00:31:06.826 A:middle
So you shouldn't just go ahead
and download a bunch of stuff

00:31:06.826 --> 00:31:08.796 A:middle
that your user might not
actually want offline.

00:31:09.696 --> 00:31:12.096 A:middle
We've gone ahead and taken
the liberty of opting

00:31:12.096 --> 00:31:14.246 A:middle
out these downloads
from iCloud backup.

00:31:15.956 --> 00:31:18.576 A:middle
As I mentioned earlier,
you should be prepared

00:31:18.576 --> 00:31:21.266 A:middle
for the system to delete your
assets to reclaim disk space

00:31:21.266 --> 00:31:22.416 A:middle
in low disk space conditions.

00:31:23.006 --> 00:31:25.366 A:middle
Now this won't happen while
your app is running, ever.

00:31:25.366 --> 00:31:29.806 A:middle
This will only happen while
your app is terminated.

00:31:29.806 --> 00:31:32.966 A:middle
After your app is launched, you
should be a little bit defensive

00:31:33.046 --> 00:31:35.856 A:middle
about assuming whether you
actually have the assets

00:31:35.856 --> 00:31:40.376 A:middle
that you had previously
downloaded on disk.

00:31:40.476 --> 00:31:43.976 A:middle
You do not move your
assets from the location

00:31:43.976 --> 00:31:44.896 A:middle
which we provide them to.

00:31:44.896 --> 00:31:46.126 A:middle
Again, it is very important

00:31:46.126 --> 00:31:48.606 A:middle
that the system be able
to find these assets.

00:31:50.146 --> 00:31:55.456 A:middle
And finally, because these
downloaded assets may contain

00:31:55.546 --> 00:31:58.756 A:middle
media selections that have not
be downloaded, be careful not

00:31:58.756 --> 00:32:01.346 A:middle
to mutate the asset that
you have on your servers.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.756 --> 00:32:01.346 A:middle
to mutate the asset that
you have on your servers.

00:32:01.556 --> 00:32:04.846 A:middle
If you really must change,
say, like the location

00:32:04.846 --> 00:32:09.436 A:middle
of a media playlist
and stuff like that,

00:32:09.436 --> 00:32:11.936 A:middle
and mutate your master playlist,
then you should just host

00:32:11.936 --> 00:32:14.416 A:middle
that modified asset
at a new URL rather

00:32:14.416 --> 00:32:15.996 A:middle
than changing the one
that's already there.

00:32:17.506 --> 00:32:19.466 A:middle
So, that's offline HLS.

00:32:19.606 --> 00:32:21.396 A:middle
And we're really happy
to bring this to you

00:32:21.396 --> 00:32:23.136 A:middle
and excited to see you adopt it.

00:32:24.126 --> 00:32:26.196 A:middle
So, in summary, we
have new features

00:32:26.196 --> 00:32:27.246 A:middle
for you to use this year.

00:32:27.366 --> 00:32:30.096 A:middle
We have our fragmented
MP4 support

00:32:30.496 --> 00:32:34.276 A:middle
which will bring a
common media format

00:32:34.276 --> 00:32:37.326 A:middle
across different platforms
that you may be supporting.

00:32:38.036 --> 00:32:40.906 A:middle
Remember that this is
compatible with all HLS features

00:32:40.906 --> 00:32:43.886 A:middle
and requires minimal changes
to your HLS playlist to adopt.

00:32:45.156 --> 00:32:48.656 A:middle
Next, we have our new
in-playlist metadata using the

00:32:48.656 --> 00:32:49.656 A:middle
DATERANGE tag.

00:32:49.726 --> 00:32:53.566 A:middle
and this is just really
good to use metadata

00:32:53.566 --> 00:32:56.706 A:middle
with any live content that
might have dynamically updating

00:32:56.966 --> 00:32:59.056 A:middle
metadata, like ad boundaries
and stuff like that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.116 --> 00:33:03.466 A:middle
And finally, we're giving
you an offline HLS playback.

00:33:03.876 --> 00:33:07.716 A:middle
So part of this we have a
powerful media downloading

00:33:07.816 --> 00:33:11.336 A:middle
engine as well that you can
configure media selections

00:33:11.336 --> 00:33:12.286 A:middle
and quality to download.

00:33:12.956 --> 00:33:16.766 A:middle
And we're also extending our
FairPlay Streaming support

00:33:16.766 --> 00:33:18.636 A:middle
to work without an
Internet connection.

00:33:19.936 --> 00:33:23.296 A:middle
So for more information,
including some sample code

00:33:23.296 --> 00:33:26.296 A:middle
on how to use
AVAssetDownloadTask

00:33:26.296 --> 00:33:32.656 A:middle
and more documentation on these
new editions, go see our page

00:33:32.656 --> 00:33:34.116 A:middle
on the development
site for this session.

00:33:34.266 --> 00:33:39.326 A:middle
I want to point out the session
that Roger mentioned earlier,

00:33:39.416 --> 00:33:43.266 A:middle
our version of authoring
and validation talk.

00:33:43.266 --> 00:33:47.646 A:middle
You can watch this video
in the WWDC app right now.

00:33:48.166 --> 00:33:50.476 A:middle
I highly recommend watching it.

00:33:50.886 --> 00:33:51.766 A:middle
So, thanks for coming.

00:33:51.766 --> 00:33:52.976 A:middle
And I hope you enjoy the
rest of the conference.

00:33:53.508 --> 00:33:55.508 A:middle
[ Applause ]

