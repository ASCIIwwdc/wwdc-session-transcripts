WEBVTT

00:00:07.516 --> 00:00:17.500 A:middle
[ Music ]

00:00:22.516 --> 00:00:26.986 A:middle
[ Applause ]

00:00:27.486 --> 00:00:28.326 A:middle
&gt;&gt; Good Morning.

00:00:28.506 --> 00:00:30.206 A:middle
My name is David Duncan.

00:00:30.656 --> 00:00:33.446 A:middle
And along with Kurt Revis
we'll be talking to you today

00:00:33.476 --> 00:00:35.596 A:middle
about making your apps adaptive.

00:00:36.116 --> 00:00:41.296 A:middle
So, in the first part,
you got to see the tools

00:00:41.366 --> 00:00:45.176 A:middle
that Interface Builder has
added as well as the foundation

00:00:45.286 --> 00:00:47.856 A:middle
on how you can do adaptively.

00:00:48.876 --> 00:00:50.876 A:middle
But in this part, we're
going to talk to you more

00:00:50.876 --> 00:00:55.156 A:middle
about techniques that you can
use to help make adaptive apps

00:00:56.236 --> 00:00:57.876 A:middle
as well as code that
you can write

00:00:57.936 --> 00:01:01.136 A:middle
to build your own experiences
while still remaining adaptive.

00:00:57.936 --> 00:01:01.136 A:middle
to build your own experiences
while still remaining adaptive.

00:01:02.156 --> 00:01:04.006 A:middle
So, let's look at
the agenda for today.

00:01:05.135 --> 00:01:06.416 A:middle
The first thing we're
going to talk to you

00:01:06.416 --> 00:01:10.356 A:middle
about is just some basics on
sizes and size classes just

00:01:10.356 --> 00:01:11.796 A:middle
to refresh everyone's memory.

00:01:12.996 --> 00:01:16.806 A:middle
In addition, we're going to talk
about things that already exist

00:01:16.806 --> 00:01:19.986 A:middle
in UIKit in the Tools
that can help you along

00:01:19.986 --> 00:01:24.106 A:middle
with Interface Builder and so
you get the most out of UIKit.

00:01:25.106 --> 00:01:28.166 A:middle
And finally, Kurt's going
to come up and talk to you

00:01:28.166 --> 00:01:31.306 A:middle
about how you can go
beyond size classes

00:01:31.306 --> 00:01:32.766 A:middle
to build your experiences.

00:01:33.356 --> 00:01:35.176 A:middle
And so with that,
let's begin with sizes.

00:01:37.036 --> 00:01:39.086 A:middle
So, sizes.

00:01:39.656 --> 00:01:41.956 A:middle
If we go ahead and
bring all of our devices

00:01:41.956 --> 00:01:44.876 A:middle
and their orientations and
their adaptations up on screen,

00:01:44.876 --> 00:01:47.816 A:middle
that's pretty
complicated-looking set

00:01:47.816 --> 00:01:48.146 A:middle
of things.

00:01:48.666 --> 00:01:51.606 A:middle
I don't think anyone wants
to put all of those up,

00:01:51.606 --> 00:01:53.806 A:middle
figure out what their layouts
look like and make that work.

00:01:53.936 --> 00:01:55.666 A:middle
So let's see if we
can draw a diagram

00:01:55.806 --> 00:02:01.056 A:middle
to simplify what all
of this looks like.

00:01:55.806 --> 00:02:01.056 A:middle
to simplify what all
of this looks like.

00:02:01.056 --> 00:02:04.046 A:middle
Well, that's still
pretty complicated.

00:02:04.136 --> 00:02:05.096 A:middle
And I don't want you to read

00:02:05.096 --> 00:02:06.506 A:middle
that because there's a
lot of text in there.

00:02:06.506 --> 00:02:07.506 A:middle
And it's really hard to read.

00:02:07.566 --> 00:02:10.306 A:middle
So let's see if we can
get rid of all that text

00:02:10.306 --> 00:02:11.656 A:middle
and color and make it simpler.

00:02:11.656 --> 00:02:13.276 A:middle
And it's not really helping.

00:02:13.446 --> 00:02:15.146 A:middle
So, what else can we do?

00:02:16.036 --> 00:02:17.436 A:middle
Well, when we thought about this

00:02:17.436 --> 00:02:21.946 A:middle
in UIKit we thought what
are some good places

00:02:22.136 --> 00:02:23.636 A:middle
that we can divide this space

00:02:23.636 --> 00:02:26.846 A:middle
up to create good
experiences for users?

00:02:28.036 --> 00:02:30.696 A:middle
And as you might have guessed
already, what we're talking

00:02:30.696 --> 00:02:32.236 A:middle
about are size classes.

00:02:33.006 --> 00:02:36.386 A:middle
We split the grid
up and we split it

00:02:36.386 --> 00:02:38.616 A:middle
up into the compact
width and regular width,

00:02:38.736 --> 00:02:40.046 A:middle
compact height and
regular height.

00:02:40.776 --> 00:02:42.816 A:middle
And what we decided
was that when you're

00:02:42.816 --> 00:02:46.346 A:middle
in the compact space, you have
a more iPhone-like experience

00:02:46.346 --> 00:02:48.056 A:middle
where you try and make
the best use of space.

00:02:48.806 --> 00:02:51.946 A:middle
But in the regular
experiences, you want to be able

00:02:51.946 --> 00:02:54.576 A:middle
to do more advanced things,
more interesting things

00:02:54.576 --> 00:02:57.086 A:middle
with that space that really
takes advantage of it.

00:02:58.076 --> 00:03:00.496 A:middle
And so that take
away from that is

00:02:58.076 --> 00:03:00.496 A:middle
And so that take
away from that is

00:03:00.496 --> 00:03:04.506 A:middle
that when you see a regular size
class, that's your opportunity

00:03:04.506 --> 00:03:07.076 A:middle
to make a really great
experience for the user

00:03:07.226 --> 00:03:09.976 A:middle
with that space, going
beyond what you might do

00:03:10.176 --> 00:03:11.306 A:middle
in a compact space.

00:03:12.366 --> 00:03:14.686 A:middle
So, let's take a look at
what UIKit already does

00:03:14.686 --> 00:03:18.156 A:middle
for you based on size class.

00:03:18.316 --> 00:03:20.986 A:middle
Most views and controls
don't actually change.

00:03:21.766 --> 00:03:23.376 A:middle
So, you take a look
at that switch.

00:03:23.376 --> 00:03:25.546 A:middle
It's the same whether you're
in compact or regular.

00:03:25.906 --> 00:03:27.486 A:middle
That nav bar is also
the same whether you're

00:03:27.486 --> 00:03:28.506 A:middle
in compact or regular.

00:03:29.006 --> 00:03:30.486 A:middle
But what things do change?

00:03:31.756 --> 00:03:33.426 A:middle
Well, here's a presentation.

00:03:33.826 --> 00:03:35.486 A:middle
It looks like it's a
full screen presentation.

00:03:35.486 --> 00:03:37.736 A:middle
It's on a iPhone 6s Plus.

00:03:37.866 --> 00:03:40.076 A:middle
But, if we rotate
and put the device

00:03:40.076 --> 00:03:42.136 A:middle
in compact, we see a form sheet.

00:03:42.796 --> 00:03:45.386 A:middle
And so one thing you see
is that in presentations,

00:03:45.436 --> 00:03:47.496 A:middle
if you do a form
sheet presentation

00:03:47.496 --> 00:03:51.346 A:middle
in regular size class, if you
move to a compact size class,

00:03:51.596 --> 00:03:52.966 A:middle
we don't have enough
room for it.

00:03:52.966 --> 00:03:55.406 A:middle
And so we change that to a
full screen presentation.

00:03:56.736 --> 00:03:58.896 A:middle
Now, the thing in UIKit

00:03:58.896 --> 00:04:01.326 A:middle
that does most complicated
adaptations based

00:03:58.896 --> 00:04:01.326 A:middle
that does most complicated
adaptations based

00:04:01.326 --> 00:04:03.216 A:middle
on size classes and
space available

00:04:03.616 --> 00:04:05.166 A:middle
is UISplitViewController.

00:04:05.776 --> 00:04:07.246 A:middle
Again, we're looking

00:04:07.246 --> 00:04:10.926 A:middle
at a compact width experience
on an iPhone 6s Plus.

00:04:11.416 --> 00:04:14.186 A:middle
And you see that, as you might
have typically experienced,

00:04:14.186 --> 00:04:15.806 A:middle
you just got a navigation
controller

00:04:15.846 --> 00:04:17.226 A:middle
where we push and pop things.

00:04:17.755 --> 00:04:20.625 A:middle
But again, if we rotate
and go into compact width,

00:04:21.125 --> 00:04:22.256 A:middle
we bring in the sidebar.

00:04:22.686 --> 00:04:26.796 A:middle
And we think that on an iPhone
6s Plus with all of that room

00:04:26.796 --> 00:04:28.596 A:middle
in regular width that having

00:04:28.596 --> 00:04:32.546 A:middle
that side bar is a better
user experience than not.

00:04:33.056 --> 00:04:36.736 A:middle
Even though we only have
so much room for it.

00:04:37.266 --> 00:04:41.116 A:middle
Similarly on iPad, the 9.7
inch iPad in landscape,

00:04:41.586 --> 00:04:45.136 A:middle
you can see that we keep that
sidebar up as well, allowing you

00:04:45.136 --> 00:04:47.136 A:middle
to easily switch
between mail messages.

00:04:47.886 --> 00:04:49.836 A:middle
But what do we do when
you rotate to portrait?

00:04:50.776 --> 00:04:53.396 A:middle
Remember, on an iPad,
it's still regular width.

00:04:53.556 --> 00:04:57.606 A:middle
But we've decided that on iPad
you typically have content

00:04:57.826 --> 00:05:01.386 A:middle
that is much larger, much more
interesting, images inline

00:04:57.826 --> 00:05:01.386 A:middle
that is much larger, much more
interesting, images inline

00:05:01.386 --> 00:05:04.096 A:middle
and so forth, and you
need that extra space

00:05:04.196 --> 00:05:07.306 A:middle
so that you can still
interface with your content.

00:05:08.126 --> 00:05:11.556 A:middle
However, we allow you
to slide in the sidebar

00:05:11.556 --> 00:05:14.696 A:middle
so you can still easily
switch between email messages.

00:05:15.476 --> 00:05:20.386 A:middle
And so those are some things
that we do in UIKit in order

00:05:20.536 --> 00:05:24.556 A:middle
to give you the best experience
based off both size classes

00:05:24.686 --> 00:05:26.546 A:middle
and the actual amount
of space available.

00:05:27.626 --> 00:05:29.696 A:middle
And in order to take
advantage of that,

00:05:29.696 --> 00:05:31.846 A:middle
let's look at some
best practices in UIKit

00:05:31.846 --> 00:05:35.926 A:middle
to make the most out
of what you have.

00:05:36.636 --> 00:05:40.586 A:middle
So, we're going to speak to some
things in Xcode Tools in UIKit.

00:05:41.066 --> 00:05:44.986 A:middle
And in the first part, you saw
Interface Builder's enhancements

00:05:45.036 --> 00:05:46.716 A:middle
to building adaptive
applications.

00:05:47.286 --> 00:05:50.216 A:middle
Being able to easily make
adjustments based on size class

00:05:50.296 --> 00:05:51.666 A:middle
in gamut and other traits.

00:05:52.626 --> 00:05:55.836 A:middle
But, Xcode also provides
Asset Catalogs.

00:05:55.836 --> 00:05:57.216 A:middle
And Asset Catalogs are great,

00:05:57.336 --> 00:06:01.366 A:middle
not just for organizing your
images, but also specifying when

00:05:57.336 --> 00:06:01.366 A:middle
not just for organizing your
images, but also specifying when

00:06:01.366 --> 00:06:02.666 A:middle
and how they should be used.

00:06:03.966 --> 00:06:06.466 A:middle
And of course, UIKit
has lots of technologies

00:06:06.686 --> 00:06:08.726 A:middle
that make building
adaptive apps easier.

00:06:09.616 --> 00:06:11.766 A:middle
We've been talking about
Auto Layout for many years.

00:06:11.766 --> 00:06:14.146 A:middle
There are many sessions
on it if you should,

00:06:14.146 --> 00:06:15.176 A:middle
you should go review those.

00:06:15.546 --> 00:06:17.206 A:middle
And of course, there's
a session later today

00:06:17.306 --> 00:06:18.486 A:middle
on New Things in Auto Layout.

00:06:19.776 --> 00:06:21.606 A:middle
And trait collections
were reviewed

00:06:21.606 --> 00:06:22.696 A:middle
in the first half as well.

00:06:23.776 --> 00:06:26.166 A:middle
But other things
are Dynamic Type,

00:06:26.576 --> 00:06:29.766 A:middle
which allows your application
to adapt to the font size

00:06:29.946 --> 00:06:31.166 A:middle
that users want to use.

00:06:32.516 --> 00:06:34.766 A:middle
Layout Guides are a great way

00:06:34.766 --> 00:06:37.316 A:middle
to pass Auto Layout
information down the hierarchy.

00:06:37.506 --> 00:06:39.046 A:middle
And we're going to discuss
some of the layout guides

00:06:39.046 --> 00:06:40.556 A:middle
that UIKit provides by default.

00:06:41.886 --> 00:06:44.606 A:middle
And finally, UIAppearance
is a great way

00:06:44.606 --> 00:06:48.466 A:middle
to declaratively specify how
you want your applications,

00:06:48.466 --> 00:06:49.856 A:middle
controls and views to look.

00:06:50.876 --> 00:06:53.246 A:middle
So let's go ahead and
start with Asset Catalogs.

00:06:53.496 --> 00:06:59.546 A:middle
Asset catalogs allow you to
adapt images automatically based

00:06:59.546 --> 00:07:02.016 A:middle
on the trait environment
that they're displayed in.

00:06:59.546 --> 00:07:02.016 A:middle
on the trait environment
that they're displayed in.

00:07:02.956 --> 00:07:04.386 A:middle
And here's a small
example of it.

00:07:05.026 --> 00:07:07.426 A:middle
So we've got our picture
of baby Sophia here.

00:07:07.616 --> 00:07:11.226 A:middle
And we have 1, 2 and 3x
versions of that image.

00:07:11.226 --> 00:07:16.546 A:middle
So that whether you're on an
iPad 2 or an iPhone 6s Plus,

00:07:16.816 --> 00:07:18.936 A:middle
you can get the best
possible image

00:07:18.936 --> 00:07:20.726 A:middle
for the resolution
of the device.

00:07:21.916 --> 00:07:23.716 A:middle
But another advantage of it is

00:07:23.716 --> 00:07:27.166 A:middle
that Asset Catalogs lets you
design for application thinning.

00:07:27.166 --> 00:07:31.126 A:middle
And what that means is is that
if I deploy this application

00:07:31.406 --> 00:07:35.036 A:middle
to an iPhone 6s, which is
a 2x device, I don't have

00:07:35.036 --> 00:07:37.506 A:middle
to pay the space penalty
for carrying those 1

00:07:37.506 --> 00:07:38.846 A:middle
and 3x images as well.

00:07:39.716 --> 00:07:43.316 A:middle
Similarly, we'll also trim
based on size classes in Gamut

00:07:43.316 --> 00:07:44.286 A:middle
and a few other things.

00:07:44.486 --> 00:07:46.466 A:middle
So, use the Asset Catalogs

00:07:46.466 --> 00:07:49.036 A:middle
and you can make the best
specification for your images

00:07:49.296 --> 00:07:50.776 A:middle
and carry the least
amount with you

00:07:50.776 --> 00:07:52.486 A:middle
when you actually
deploy to user's devices.

00:07:52.966 --> 00:07:57.896 A:middle
Other things that Asset Catalogs
provide are pieces of metadata

00:07:57.896 --> 00:08:00.636 A:middle
that you can attach to your
image for various purposes.

00:07:57.896 --> 00:08:00.636 A:middle
that you can attach to your
image for various purposes.

00:08:00.966 --> 00:08:03.436 A:middle
And the first one we're going
to discuss are alignment insets.

00:08:03.926 --> 00:08:05.426 A:middle
So let's bring baby
Sophia back here.

00:08:06.266 --> 00:08:08.116 A:middle
And let's say that we
have an application

00:08:08.176 --> 00:08:10.196 A:middle
where sometimes we actually want

00:08:10.196 --> 00:08:12.016 A:middle
to crop this image
to a square crop.

00:08:12.796 --> 00:08:15.416 A:middle
And if we just naively pick
the center part of the image,

00:08:15.416 --> 00:08:16.816 A:middle
we'd miss most of her face.

00:08:17.086 --> 00:08:20.646 A:middle
We really do want that square
that frames her face well.

00:08:21.796 --> 00:08:23.446 A:middle
Now, what are you going to do?

00:08:23.496 --> 00:08:25.926 A:middle
Well, you're going to bring in
some measurements and figure

00:08:25.926 --> 00:08:28.056 A:middle
out how far are you away
from all of the edges?

00:08:28.976 --> 00:08:32.006 A:middle
But, instead of having to put
it in code and associate it

00:08:32.006 --> 00:08:36.035 A:middle
with assets, you can do that
directly in the Asset Catalog.

00:08:36.666 --> 00:08:38.775 A:middle
And UIImage will vend
those values back

00:08:38.895 --> 00:08:40.265 A:middle
to you whenever you need them.

00:08:40.666 --> 00:08:42.866 A:middle
And similarly, of course, you
can create images with them.

00:08:43.275 --> 00:08:44.196 A:middle
But being able to put them

00:08:44.196 --> 00:08:45.656 A:middle
in the Asset Catalog
means you don't have

00:08:45.656 --> 00:08:48.496 A:middle
to have a giant table
associating resource names

00:08:48.836 --> 00:08:49.496 A:middle
with metadata.

00:08:50.856 --> 00:08:54.366 A:middle
Similarly, let's say that you
have some kind of background

00:08:54.366 --> 00:08:57.826 A:middle
for a table view or what have
you that you need to be able

00:08:57.826 --> 00:09:01.206 A:middle
to resize to adapt to whatever
size it's actually displayed at.

00:08:57.826 --> 00:09:01.206 A:middle
to resize to adapt to whatever
size it's actually displayed at.

00:09:01.816 --> 00:09:06.036 A:middle
Well, you can create a nine-part
image, creating slicing edges,

00:09:06.516 --> 00:09:08.866 A:middle
and store those in your
Asset Catalog as well.

00:09:09.506 --> 00:09:12.136 A:middle
And then, when that image
gets sized to its final state,

00:09:13.206 --> 00:09:15.236 A:middle
it resizes nicely
without having carry

00:09:15.236 --> 00:09:18.056 A:middle
around large images
specifically for the sizes

00:09:18.056 --> 00:09:18.906 A:middle
that you're working with.

00:09:20.316 --> 00:09:22.536 A:middle
And so, that's for
Asset Catalogs.

00:09:22.576 --> 00:09:24.776 A:middle
Let's talk about other
adaptations that you'll want

00:09:24.776 --> 00:09:27.306 A:middle
to make for your
application with Dynamic Type.

00:09:28.706 --> 00:09:29.796 A:middle
We love Dynamic Type.

00:09:30.506 --> 00:09:33.216 A:middle
It gives our users the
ability to specify font sizes,

00:09:33.386 --> 00:09:36.456 A:middle
and especially for our users
that need a little extra help

00:09:36.456 --> 00:09:39.026 A:middle
with vision, they can
specify really large sizes

00:09:39.026 --> 00:09:41.066 A:middle
that allow them to
easily read text.

00:09:41.856 --> 00:09:45.006 A:middle
And so this year, we've
made it even easier for you

00:09:45.006 --> 00:09:47.296 A:middle
to adopt Dynamic Type
in your application.

00:09:47.846 --> 00:09:49.246 A:middle
And we've done this in two ways.

00:09:49.886 --> 00:09:52.516 A:middle
The first, we made it part
of the trait environment.

00:09:52.726 --> 00:09:55.976 A:middle
So you don't have to listen
for a notification anymore.

00:09:56.256 --> 00:09:58.566 A:middle
It's just right there for
your custom text views

00:09:58.566 --> 00:10:00.246 A:middle
to take advantage
of if you need it.

00:09:58.566 --> 00:10:00.246 A:middle
to take advantage
of if you need it.

00:10:00.426 --> 00:10:03.246 A:middle
But we figured you
shouldn't have to do

00:10:03.246 --> 00:10:05.446 A:middle
that for regular text
views, for labels,

00:10:05.486 --> 00:10:07.046 A:middle
text fields and text views.

00:10:08.026 --> 00:10:10.216 A:middle
So we've made those
really easy to do.

00:10:10.616 --> 00:10:13.786 A:middle
All you have to do is assign
the font with the style

00:10:13.786 --> 00:10:17.086 A:middle
that you want and set the
flag that adjusts the font

00:10:17.086 --> 00:10:18.486 A:middle
for the content size category.

00:10:18.936 --> 00:10:21.236 A:middle
All your labels, your text
fields, your text views,

00:10:21.436 --> 00:10:24.116 A:middle
they'll automatically adapt to
the current Dynamic Type size

00:10:24.116 --> 00:10:25.546 A:middle
and you don't have
to do anything.

00:10:27.516 --> 00:10:31.506 A:middle
[ Applause ]

00:10:32.006 --> 00:10:33.726 A:middle
So of course, if
you're to adopt this,

00:10:33.726 --> 00:10:36.226 A:middle
be certain to test
your application

00:10:36.226 --> 00:10:37.636 A:middle
in all the Dynamic Type sizes.

00:10:37.636 --> 00:10:39.716 A:middle
As I mentioned, there's
some really large ones.

00:10:40.196 --> 00:10:42.686 A:middle
The Accessibility Inspector
on your Mac can connect

00:10:42.686 --> 00:10:45.516 A:middle
to your application and allow
you to toggle back dynamically

00:10:45.516 --> 00:10:47.246 A:middle
without having to go back
and forth between settings.

00:10:48.096 --> 00:10:50.916 A:middle
And if you're displaying these
in table or collection views,

00:10:51.066 --> 00:10:52.766 A:middle
you'll want to review
the "What's New

00:10:52.766 --> 00:10:54.596 A:middle
in Collection View" session,

00:10:54.916 --> 00:10:57.336 A:middle
because there's some really
great information on performance

00:10:57.336 --> 00:10:59.656 A:middle
and behavior enhancements
in collection view

00:10:59.866 --> 00:11:01.956 A:middle
that you can take advantage
to make this really great.

00:10:59.866 --> 00:11:01.956 A:middle
that you can take advantage
to make this really great.

00:11:03.476 --> 00:11:05.936 A:middle
And so, let's talk
about Layout Guides.

00:11:07.056 --> 00:11:10.076 A:middle
And UIView provides
two layout guides,

00:11:10.646 --> 00:11:13.066 A:middle
a Margin Guide the
Readable Content Guide.

00:11:13.066 --> 00:11:14.326 A:middle
And we'll go through
those in turn.

00:11:15.156 --> 00:11:17.256 A:middle
Both of these start
out with a view.

00:11:18.126 --> 00:11:19.576 A:middle
Whatever content you
happen to have it in.

00:11:20.346 --> 00:11:24.136 A:middle
The Layout Margins
Guide is defined in part

00:11:24.376 --> 00:11:27.556 A:middle
by a property UIView that
is the layout margins,

00:11:28.026 --> 00:11:29.986 A:middle
which defines insets
on all sides.

00:11:31.156 --> 00:11:33.606 A:middle
And so, how do we then
create a layout guide?

00:11:33.956 --> 00:11:37.686 A:middle
Well, that's just a rec
specified in terms of that view.

00:11:38.436 --> 00:11:40.666 A:middle
And that Layout Margin
Guide, of course,

00:11:40.666 --> 00:11:42.966 A:middle
provides auto layout
objects for you

00:11:42.966 --> 00:11:44.646 A:middle
to generate your
own constraints on.

00:11:45.256 --> 00:11:49.226 A:middle
Simple. So, what's the
Readable Content Guide

00:11:49.226 --> 00:11:50.206 A:middle
in relation to this?

00:11:51.436 --> 00:11:55.696 A:middle
The Readable Content Guide
is a guide that provides you

00:11:55.696 --> 00:11:57.706 A:middle
with information on
how to layout text

00:11:57.706 --> 00:12:00.336 A:middle
so that it has a nice,
readable line length.

00:11:57.706 --> 00:12:00.336 A:middle
so that it has a nice,
readable line length.

00:12:00.456 --> 00:12:04.776 A:middle
If you're on one of the
new 12.9 inch iPad Pros,

00:12:05.086 --> 00:12:08.186 A:middle
you can layout text from side
to side and your users will kind

00:12:08.186 --> 00:12:09.766 A:middle
of being turning their
heads as they're reading it.

00:12:10.556 --> 00:12:11.666 A:middle
So, the first thing we want

00:12:11.666 --> 00:12:15.466 A:middle
to calculate is what is the
ideal width for a line of text?

00:12:16.526 --> 00:12:18.116 A:middle
And then, of course,
we don't want the text

00:12:18.116 --> 00:12:19.246 A:middle
to flow outside of the margins.

00:12:19.306 --> 00:12:21.476 A:middle
So we bring in that
margins guide

00:12:21.476 --> 00:12:22.966 A:middle
as part of our calculation.

00:12:23.516 --> 00:12:24.846 A:middle
And we combine these two

00:12:24.846 --> 00:12:27.786 A:middle
to finally form the
readable content guide,

00:12:28.186 --> 00:12:30.496 A:middle
another layout guide
within your UIView

00:12:30.886 --> 00:12:32.266 A:middle
that you can lay
out text within.

00:12:32.736 --> 00:12:35.966 A:middle
Now, the Readable
Content Guide is based

00:12:35.966 --> 00:12:37.166 A:middle
on the dynamic text size.

00:12:37.736 --> 00:12:39.636 A:middle
So, what happens
when that changes?

00:12:40.136 --> 00:12:42.426 A:middle
Well, we increase
the dynamic type size

00:12:42.426 --> 00:12:43.996 A:middle
and the ideal width increases.

00:12:44.546 --> 00:12:47.446 A:middle
And as you can see, because the
readable content guide is based

00:12:47.536 --> 00:12:48.996 A:middle
inside of the layout margins,

00:12:49.466 --> 00:12:52.316 A:middle
the guide doesn't necessarily
extend past those margins.

00:12:52.316 --> 00:12:54.146 A:middle
And then you can
lay out your text

00:12:54.476 --> 00:12:56.016 A:middle
and get a nice readable length

00:12:56.016 --> 00:12:58.666 A:middle
of text that's inside
of your view.

00:12:59.996 --> 00:13:02.586 A:middle
And so with that, let's
talk about UIAppearance.

00:12:59.996 --> 00:13:02.586 A:middle
And so with that, let's
talk about UIAppearance.

00:13:04.126 --> 00:13:06.966 A:middle
UIAppearance, if you haven't
used it, is a declarative way

00:13:07.286 --> 00:13:10.436 A:middle
for you to specify what your
application should look like.

00:13:11.046 --> 00:13:11.846 A:middle
And what does that mean?

00:13:12.736 --> 00:13:15.376 A:middle
Well, that means that
instead of writing code

00:13:15.436 --> 00:13:18.396 A:middle
when you see a new tab bar,
for example, you write this:

00:13:19.156 --> 00:13:21.286 A:middle
You say, for all of my tab bars,

00:13:21.726 --> 00:13:25.196 A:middle
the appearance should have the
unselected tint color is blue.

00:13:25.816 --> 00:13:26.476 A:middle
Really simple.

00:13:26.716 --> 00:13:28.456 A:middle
And that any time
you create a tab bar,

00:13:28.896 --> 00:13:30.106 A:middle
unselected items
are colored blue.

00:13:31.206 --> 00:13:32.506 A:middle
But it's also contextual.

00:13:33.006 --> 00:13:35.596 A:middle
And that means that
you can specify based

00:13:35.596 --> 00:13:40.496 A:middle
on trait collections or based on
the containment of those views.

00:13:40.646 --> 00:13:43.896 A:middle
And what does that look like?

00:13:43.896 --> 00:13:44.836 A:middle
Let's take a look.

00:13:45.506 --> 00:13:48.766 A:middle
So, here we have our
little application.

00:13:49.306 --> 00:13:53.286 A:middle
And as is the style, we want
to have a giant header image

00:13:53.286 --> 00:13:56.016 A:middle
at the top when we're in
regular vertical height.

00:13:56.016 --> 00:13:56.986 A:middle
And we're going to have

00:13:56.986 --> 00:13:59.486 A:middle
that image just replace
the nav bar's background.

00:14:00.226 --> 00:14:02.476 A:middle
However, when we're in
compact vertical height,

00:14:02.476 --> 00:14:04.866 A:middle
we're going to have a
side-by-side layout.

00:14:04.866 --> 00:14:06.656 A:middle
And the image is not going
to necessarily extend

00:14:06.656 --> 00:14:07.656 A:middle
to the navigation bar.

00:14:07.656 --> 00:14:10.546 A:middle
So we want it to use
its default background.

00:14:11.046 --> 00:14:12.786 A:middle
So let's do the default
background first.

00:14:13.836 --> 00:14:17.526 A:middle
We create a TraitCollection
for verticalSizeClassCompact.

00:14:18.836 --> 00:14:21.096 A:middle
We grab the navigation
bar's appearance

00:14:21.096 --> 00:14:22.236 A:middle
for that TraitCollection.

00:14:23.476 --> 00:14:25.266 A:middle
And we say we don't want

00:14:25.266 --> 00:14:27.676 A:middle
to use any background
image for that appearance.

00:14:27.966 --> 00:14:29.986 A:middle
And that will cause the
navigation bar to fall back

00:14:29.986 --> 00:14:31.446 A:middle
to using its default appearance.

00:14:32.656 --> 00:14:36.476 A:middle
Similarly, when we do
the regular vertical,

00:14:37.246 --> 00:14:41.616 A:middle
we create a trait collection
for that, grab that appearance,

00:14:42.666 --> 00:14:45.656 A:middle
and assign an empty image, which
will cause the navigation bar

00:14:45.876 --> 00:14:48.196 A:middle
to construct no background
image whatsoever.

00:14:49.186 --> 00:14:51.696 A:middle
Now, you might note
that the appearance API

00:14:52.046 --> 00:14:54.736 A:middle
for trait collection, that
might read a little funny.

00:14:54.786 --> 00:14:57.436 A:middle
We're actually going to be
changing that API for C2,

00:14:57.436 --> 00:14:58.576 A:middle
so be on the lookout for that.

00:14:59.786 --> 00:15:02.196 A:middle
And so with that,
let's go ahead and wrap

00:14:59.786 --> 00:15:02.196 A:middle
And so with that,
let's go ahead and wrap

00:15:02.196 --> 00:15:03.616 A:middle
up the best practices section

00:15:04.296 --> 00:15:06.536 A:middle
where we reviewed
using Asset Catalogs

00:15:06.536 --> 00:15:07.756 A:middle
to organize your images.

00:15:08.836 --> 00:15:12.306 A:middle
Dynamic Type to adapt to the
user's desire for the font size.

00:15:13.376 --> 00:15:16.456 A:middle
Layout Guides to help you
build your own layouts in ways

00:15:16.456 --> 00:15:20.116 A:middle
that are easily adaptable to
all of your layout situations.

00:15:20.706 --> 00:15:22.706 A:middle
And finally, Appearance

00:15:22.776 --> 00:15:25.466 A:middle
to get your application looking
exactly like you want it.

00:15:25.826 --> 00:15:27.696 A:middle
And so with that, I'll
hand it over to Kurt.

00:15:29.516 --> 00:15:34.816 A:middle
[ Applause ]

00:15:35.316 --> 00:15:35.976 A:middle
&gt;&gt; Thank you, David.

00:15:37.116 --> 00:15:40.446 A:middle
So, if you remember from
"Making Apps Adaptive,

00:15:40.616 --> 00:15:43.946 A:middle
Part 1" you'll remember the
takeaway message, which is:

00:15:44.346 --> 00:15:45.666 A:middle
The system is going to do most

00:15:45.666 --> 00:15:47.246 A:middle
of the work, so you
don't have to.

00:15:47.666 --> 00:15:50.206 A:middle
Now, I'm going to talk today
about how to go beyond that.

00:15:51.006 --> 00:15:54.236 A:middle
So, if you want to go beyond
what the system provides,

00:15:54.836 --> 00:15:55.806 A:middle
here's how to do it.

00:15:56.436 --> 00:15:58.476 A:middle
And the operative word
here is "if you want to."

00:15:58.636 --> 00:15:59.706 A:middle
This isn't required.

00:16:00.466 --> 00:16:03.216 A:middle
However, if you don't -- even
if you don't take advantage

00:16:03.216 --> 00:16:05.236 A:middle
of this, you might learn
some things about how

00:16:05.236 --> 00:16:07.186 A:middle
to work more effectively
with UIKit.

00:16:08.556 --> 00:16:10.926 A:middle
So I'll talk about how
to go beyond the basics.

00:16:11.996 --> 00:16:15.626 A:middle
I'll tell you how to design your
app to handle all combinations

00:16:15.626 --> 00:16:17.526 A:middle
of device orientation and size.

00:16:17.636 --> 00:16:20.426 A:middle
I'll talk about how you
can implement these designs

00:16:20.426 --> 00:16:21.996 A:middle
and change between
them dynamically

00:16:22.076 --> 00:16:23.316 A:middle
as your app changes size.

00:16:23.616 --> 00:16:26.306 A:middle
And then I'll talk about
using reusable elements

00:16:26.306 --> 00:16:29.156 A:middle
to make it quicker and
easier to build your app.

00:16:29.446 --> 00:16:30.746 A:middle
And I'll do this in
the context of an app.

00:16:30.936 --> 00:16:32.046 A:middle
We'll build a real app here.

00:16:32.756 --> 00:16:35.456 A:middle
So, I'll call my app My
Incredibly Adaptive App.

00:16:35.916 --> 00:16:38.176 A:middle
And fortunately, it's
also incredibly simple.

00:16:38.806 --> 00:16:41.486 A:middle
We've only got three things that
we're going to show in this app.

00:16:42.426 --> 00:16:43.216 A:middle
Three items.

00:16:43.346 --> 00:16:44.216 A:middle
Each one has a title.

00:16:44.456 --> 00:16:45.966 A:middle
Here they're just A, B and C.

00:16:46.506 --> 00:16:48.846 A:middle
And then there's a longer
piece of text, a description,

00:16:48.846 --> 00:16:49.796 A:middle
that goes with each one.

00:16:50.626 --> 00:16:52.166 A:middle
So even though this
app is very simple,

00:16:52.166 --> 00:16:53.976 A:middle
I'm going to use
techniques that you can use

00:16:53.976 --> 00:16:57.666 A:middle
in your much more
complicated and bigger apps.

00:16:58.216 --> 00:17:00.146 A:middle
So this is the model of my app.

00:16:58.216 --> 00:17:00.146 A:middle
So this is the model of my app.

00:17:00.396 --> 00:17:01.616 A:middle
This is the data inside of it.

00:17:01.906 --> 00:17:04.195 A:middle
But how should my app look
and how should it act?

00:17:04.646 --> 00:17:05.386 A:middle
What's the design?

00:17:06.726 --> 00:17:08.566 A:middle
Well, when I'm thinking
about these designs,

00:17:08.955 --> 00:17:10.796 A:middle
I need to consider all
these combinations.

00:17:11.425 --> 00:17:14.445 A:middle
But that's far too much to do
a unique design for each one.

00:17:14.526 --> 00:17:15.915 A:middle
That would be far too much work.

00:17:16.486 --> 00:17:17.746 A:middle
So let's try to simplify this.

00:17:18.546 --> 00:17:21.016 A:middle
I think in my app I can do
it with just two designs.

00:17:21.675 --> 00:17:23.086 A:middle
I'll call the first
design "Tall."

00:17:23.215 --> 00:17:25.776 A:middle
And I'll arrange these
items vertically, A, B,

00:17:25.776 --> 00:17:26.976 A:middle
and C vertically in the stack.

00:17:28.036 --> 00:17:29.526 A:middle
My other design will be "Wide."

00:17:29.996 --> 00:17:31.706 A:middle
So I'll arrange these
items horizontally.

00:17:32.886 --> 00:17:35.676 A:middle
Now, I think no matter what
size my app actually is,

00:17:36.056 --> 00:17:37.646 A:middle
for my app I can use one

00:17:37.646 --> 00:17:40.776 A:middle
of these two designs
and make them fit.

00:17:40.776 --> 00:17:42.846 A:middle
So now the question
is: Given a combination

00:17:42.846 --> 00:17:44.456 A:middle
of device orientation and size,

00:17:44.456 --> 00:17:46.376 A:middle
how do I choose what
design to use?

00:17:46.906 --> 00:17:48.326 A:middle
I need to define
a rule for that.

00:17:48.516 --> 00:17:49.916 A:middle
And again, this is
unique to my app.

00:17:51.086 --> 00:17:53.766 A:middle
I think I'm going to
choose: If the width is less

00:17:53.766 --> 00:17:56.756 A:middle
than the height, I'll
use the Tall design.

00:17:56.806 --> 00:17:58.656 A:middle
Otherwise, I'll use
the Wide design.

00:17:59.936 --> 00:18:01.756 A:middle
Now, I can run through
all these combinations

00:17:59.936 --> 00:18:01.756 A:middle
Now, I can run through
all these combinations

00:18:01.756 --> 00:18:02.816 A:middle
and see how it works.

00:18:02.816 --> 00:18:05.306 A:middle
I can do this on paper before
I even start writing any code

00:18:05.306 --> 00:18:05.586 A:middle
at all.

00:18:06.406 --> 00:18:09.636 A:middle
So for instance, this iPhone
in portrait, the width is less

00:18:09.636 --> 00:18:11.826 A:middle
than the height, we'll
use the tall design.

00:18:11.826 --> 00:18:15.146 A:middle
Now, I can continue that
with the iPhone in landscape

00:18:15.436 --> 00:18:19.016 A:middle
and with an iPad, full screen,
or an iPad partial screen,

00:18:19.306 --> 00:18:21.136 A:middle
and go through all the
examples and try them out

00:18:21.136 --> 00:18:23.726 A:middle
and make sure they make sense.

00:18:23.906 --> 00:18:25.286 A:middle
So I'll reiterate
what I just did.

00:18:25.386 --> 00:18:27.266 A:middle
When I'm designing my
app to hand these things,

00:18:27.886 --> 00:18:29.596 A:middle
I thought through
all the combinations.

00:18:30.666 --> 00:18:33.626 A:middle
I came up with designs to
cover all those combinations,

00:18:33.626 --> 00:18:34.276 A:middle
the whole range.

00:18:34.516 --> 00:18:38.806 A:middle
And then I defined rules
to say which design to use.

00:18:40.376 --> 00:18:42.186 A:middle
So when I'm defining
those rules,

00:18:42.556 --> 00:18:43.606 A:middle
there's many ways I can do it.

00:18:43.606 --> 00:18:44.826 A:middle
This is what makes
my app unique.

00:18:45.566 --> 00:18:48.236 A:middle
But you'll note that I
could have checked to see

00:18:48.236 --> 00:18:50.646 A:middle
if the size exactly
matched certain things.

00:18:50.646 --> 00:18:54.146 A:middle
I could have seen is
the size 1024 by 768,

00:18:54.146 --> 00:18:57.256 A:middle
therefore it's an iPad and
made decisions based on that.

00:18:57.256 --> 00:18:59.506 A:middle
I don't want to do that because
there's too many combinations

00:18:59.506 --> 00:18:59.956 A:middle
to handle.

00:19:00.086 --> 00:19:02.166 A:middle
And those sizes will
change over time.

00:19:03.496 --> 00:19:06.136 A:middle
So instead, I defined a
simple Boolean condition

00:19:06.136 --> 00:19:08.076 A:middle
that would tell me
what design to use.

00:19:08.556 --> 00:19:09.936 A:middle
And there's many
ways we can do this.

00:19:10.636 --> 00:19:13.206 A:middle
The first one, and most obvious,
is just use size classes.

00:19:13.236 --> 00:19:14.816 A:middle
Then we've done most
of the work for you.

00:19:15.036 --> 00:19:17.906 A:middle
All you have to do is check
are you compact or regular.

00:19:19.086 --> 00:19:21.386 A:middle
Also, your app will act like
other apps in the system

00:19:21.386 --> 00:19:23.216 A:middle
because you're using
the same size classes.

00:19:23.856 --> 00:19:25.566 A:middle
All the Xcode tooling
will help you out.

00:19:25.736 --> 00:19:27.456 A:middle
You'll get a lot of
things just for free.

00:19:28.116 --> 00:19:29.906 A:middle
But, you can also
do it yourself.

00:19:30.546 --> 00:19:32.866 A:middle
For instance, I could
compare a value like width

00:19:32.866 --> 00:19:34.446 A:middle
or height to a threshold value.

00:19:35.506 --> 00:19:38.296 A:middle
Or I could compare two values
like I did, width versus height.

00:19:38.956 --> 00:19:39.906 A:middle
Or I could combine these.

00:19:40.216 --> 00:19:43.616 A:middle
The point is that I came up with
a simple and unambiguous way

00:19:43.616 --> 00:19:45.306 A:middle
to figure out what
design to use.

00:19:46.806 --> 00:19:48.566 A:middle
So another thing
when you're thinking

00:19:48.566 --> 00:19:50.996 A:middle
about your designs is even
if your size is the same,

00:19:51.316 --> 00:19:53.966 A:middle
you might be, say, on one side
of the iPad or the other side.

00:19:54.646 --> 00:19:58.406 A:middle
So don't make your designs
specific to where the buttons

00:19:58.406 --> 00:20:00.756 A:middle
on the device are, or
where the other app is

00:19:58.406 --> 00:20:00.756 A:middle
on the device are, or
where the other app is

00:20:00.756 --> 00:20:04.816 A:middle
if you're multitasking,
that sort of thing.

00:20:05.046 --> 00:20:06.676 A:middle
I'll need to find
the size of the app.

00:20:07.696 --> 00:20:10.666 A:middle
I'll need to use those rules
to decide what design to use.

00:20:11.346 --> 00:20:13.516 A:middle
And then last, I'll apply
that design to the UI.

00:20:13.856 --> 00:20:16.326 A:middle
So change the views of
my UI to make a match.

00:20:17.616 --> 00:20:19.066 A:middle
Now, where should
I put this code?

00:20:19.886 --> 00:20:22.846 A:middle
If I make a new template in
Xcode, or new view controller,

00:20:23.196 --> 00:20:25.126 A:middle
it gives me this template
with a viewDidLoad method.

00:20:25.126 --> 00:20:27.136 A:middle
And it says do any
additional setup here.

00:20:27.316 --> 00:20:28.566 A:middle
So that's where I
should put it, right?

00:20:29.526 --> 00:20:30.906 A:middle
Unfortunately, it's
not that simple.

00:20:31.486 --> 00:20:33.226 A:middle
The reason you don't
want to do this is

00:20:33.226 --> 00:20:35.086 A:middle
because views get
loaded on demand.

00:20:35.636 --> 00:20:37.596 A:middle
The first time something
asks for that view

00:20:37.596 --> 00:20:39.116 A:middle
in your view controller,
this will get called.

00:20:39.676 --> 00:20:40.706 A:middle
And that's very early.

00:20:41.576 --> 00:20:43.836 A:middle
So we know at that
time your view won't be

00:20:43.836 --> 00:20:44.756 A:middle
in a superview yet.

00:20:45.486 --> 00:20:46.906 A:middle
Layout wont' be valid yet.

00:20:46.906 --> 00:20:49.486 A:middle
So you really can't
count on your view size

00:20:49.486 --> 00:20:52.076 A:middle
or any parent size
or traits or so on.

00:20:52.156 --> 00:20:52.876 A:middle
It's just too early.

00:20:54.016 --> 00:20:57.716 A:middle
So for one-time only things
like initializers, loadView,

00:20:57.716 --> 00:21:00.116 A:middle
viewDidLoad, you only want
to put code that's going

00:20:57.716 --> 00:21:00.116 A:middle
viewDidLoad, you only want
to put code that's going

00:21:00.116 --> 00:21:03.106 A:middle
to be the same across
all of your designs.

00:21:03.226 --> 00:21:05.606 A:middle
A better place for
me to put my code is

00:21:05.606 --> 00:21:07.776 A:middle
in a view controller's
viewWillLayoutSubViews.

00:21:09.596 --> 00:21:10.916 A:middle
And we'll view that because

00:21:10.916 --> 00:21:13.486 A:middle
at that time the view
is in a superview.

00:21:14.076 --> 00:21:15.916 A:middle
Layout of all those
superviews has happened.

00:21:16.236 --> 00:21:17.166 A:middle
Sizes are valid.

00:21:17.306 --> 00:21:18.446 A:middle
My view size is valid.

00:21:18.446 --> 00:21:19.236 A:middle
Traits are valid.

00:21:19.606 --> 00:21:21.526 A:middle
Everything's good.

00:21:21.676 --> 00:21:24.736 A:middle
And also, this is a good time
to manipulate the things inside

00:21:24.736 --> 00:21:25.606 A:middle
of my view controller.

00:21:25.796 --> 00:21:28.026 A:middle
So this is where I should
change this stuff inside my view

00:21:28.026 --> 00:21:31.746 A:middle
controller views and
constraints and so on.

00:21:31.746 --> 00:21:33.726 A:middle
Now, it's important
to be careful here.

00:21:34.176 --> 00:21:36.466 A:middle
Because this is a very hot path.

00:21:36.586 --> 00:21:37.776 A:middle
This is called very often.

00:21:37.776 --> 00:21:39.666 A:middle
Often, for reasons
outside of your control.

00:21:40.656 --> 00:21:44.306 A:middle
So, do as little work as you
possibly can in this method.

00:21:45.176 --> 00:21:47.326 A:middle
Ideally you would find
out what's changed

00:21:47.526 --> 00:21:50.106 A:middle
since the last time it was
called and then do as little

00:21:50.106 --> 00:21:51.836 A:middle
as you can to update
based on that change.

00:21:52.216 --> 00:21:54.336 A:middle
So change only the
attributes of views

00:21:54.336 --> 00:21:56.186 A:middle
that you absolutely
need to change.

00:21:56.396 --> 00:22:00.756 A:middle
And then finally, be careful
not to cause a layout loop.

00:21:56.396 --> 00:22:00.756 A:middle
And then finally, be careful
not to cause a layout loop.

00:22:01.296 --> 00:22:03.336 A:middle
If you invalidate layout
of your superviews,

00:22:03.826 --> 00:22:05.686 A:middle
they might in turn
invalidate your layout.

00:22:05.746 --> 00:22:08.426 A:middle
And soon you're finding that
your app is doing but validating

00:22:08.426 --> 00:22:10.786 A:middle
and invalidating layout and
nothing is actually happening.

00:22:11.486 --> 00:22:13.606 A:middle
So to find out more about
debugging and finding

00:22:13.606 --> 00:22:15.426 A:middle
out about layout loops,
check out the "What's New

00:22:15.426 --> 00:22:16.946 A:middle
in Auto Layout" session
later today.

00:22:19.406 --> 00:22:20.916 A:middle
So, here's my two designs.

00:22:21.696 --> 00:22:22.466 A:middle
We'll go back to this.

00:22:22.716 --> 00:22:24.596 A:middle
How am I actually going
to implement these things?

00:22:25.656 --> 00:22:27.596 A:middle
Well, I think I can
do it with just a view

00:22:27.866 --> 00:22:29.446 A:middle
for each item, A, B, and C.

00:22:29.736 --> 00:22:32.156 A:middle
And then I'll us a UIStackView

00:22:32.156 --> 00:22:34.376 A:middle
to arrange these things
horizontally or vertically.

00:22:34.886 --> 00:22:36.576 A:middle
UIStackView will do
all the work for me.

00:22:36.576 --> 00:22:38.986 A:middle
I don't have to think too hard.

00:22:39.076 --> 00:22:39.716 A:middle
So here's some code.

00:22:40.506 --> 00:22:42.936 A:middle
My simple example view
controller is a subclass

00:22:42.936 --> 00:22:43.906 A:middle
of UIVIewController.

00:22:44.646 --> 00:22:45.966 A:middle
And I made a storyboard
for this.

00:22:45.966 --> 00:22:46.996 A:middle
It's got a stack view in it

00:22:46.996 --> 00:22:48.746 A:middle
and it's already got
those three views inside.

00:22:50.056 --> 00:22:52.636 A:middle
Now, I am going to,

00:22:52.746 --> 00:22:55.366 A:middle
in my viewWillLayoutSubviews
method, I'll override that.

00:22:56.266 --> 00:22:59.106 A:middle
First step, get the size,
which is view.bounds.size.

00:23:00.216 --> 00:23:01.566 A:middle
Second, apply my rules.

00:23:01.976 --> 00:23:04.796 A:middle
So if the width is
greater than the height --

00:23:04.796 --> 00:23:08.246 A:middle
or equal to the height, I will
choose to use the wide design.

00:23:08.246 --> 00:23:11.146 A:middle
And then finally I'll
apply that design.

00:23:11.876 --> 00:23:14.096 A:middle
So, if I'm using
the wide design,

00:23:14.126 --> 00:23:16.686 A:middle
my stack view's access
should be horizontal.

00:23:16.686 --> 00:23:17.766 A:middle
Otherwise it should be vertical.

00:23:18.296 --> 00:23:19.626 A:middle
That's all I have to do.

00:23:20.066 --> 00:23:22.246 A:middle
So you'll note that here
I'm not doing a lot of work.

00:23:23.076 --> 00:23:24.756 A:middle
And I'm also taking
advantage of the fact

00:23:24.836 --> 00:23:25.826 A:middle
that StackView is smart.

00:23:26.576 --> 00:23:29.706 A:middle
If I'm setting the access to
the value that it already had,

00:23:29.826 --> 00:23:31.446 A:middle
it's not going to do
any additional work.

00:23:33.176 --> 00:23:34.456 A:middle
So let's see this in action.

00:23:34.866 --> 00:23:36.716 A:middle
Here's my app on an
iPhone in portrait.

00:23:36.886 --> 00:23:37.986 A:middle
We've got that vertical layout.

00:23:37.986 --> 00:23:40.576 A:middle
And now if I rotate
to horizontal,

00:23:41.246 --> 00:23:44.396 A:middle
we'll see that the app
also rotates to horizontal.

00:23:45.256 --> 00:23:47.096 A:middle
And also I got this
animation for free.

00:23:47.666 --> 00:23:49.476 A:middle
So I'll go back to portrait
and I'll show that again.

00:23:53.136 --> 00:23:53.926 A:middle
There we are.

00:23:54.136 --> 00:23:54.686 A:middle
We rotated.

00:23:55.146 --> 00:23:56.466 A:middle
So, I showed this to David,

00:23:56.466 --> 00:23:57.576 A:middle
because I was especially
impressed

00:23:57.576 --> 00:23:59.386 A:middle
that StackView gave me
this animation for free.

00:23:59.386 --> 00:24:00.256 A:middle
I didn't expect that.

00:23:59.386 --> 00:24:00.256 A:middle
I didn't expect that.

00:24:00.256 --> 00:24:01.816 A:middle
And he said, "Well,
that's great.

00:24:01.926 --> 00:24:02.586 A:middle
That's pretty amazing.

00:24:02.586 --> 00:24:03.836 A:middle
But can you make it better?

00:24:04.076 --> 00:24:04.906 A:middle
Could you make it pop?"

00:24:05.706 --> 00:24:07.896 A:middle
And if you're an app developer,
maybe you've heard this before

00:24:07.896 --> 00:24:08.876 A:middle
from one of your clients.

00:24:09.436 --> 00:24:11.146 A:middle
So I said, "Sure, I
can make this pop."

00:24:11.306 --> 00:24:13.626 A:middle
I can make my app a
little more interesting

00:24:13.626 --> 00:24:14.646 A:middle
and I'll make it pop here.

00:24:15.136 --> 00:24:18.596 A:middle
So I'll do this by,
during the rotation,

00:24:18.596 --> 00:24:20.246 A:middle
I'll make the items
grow towards you.

00:24:21.266 --> 00:24:23.986 A:middle
And then when I'm done, I'll
make them go back to normal,

00:24:24.166 --> 00:24:25.036 A:middle
shrink back to normal.

00:24:25.406 --> 00:24:30.216 A:middle
Now, this isn't something
that we necessarily advocate

00:24:30.516 --> 00:24:31.776 A:middle
that you do in your app.

00:24:32.786 --> 00:24:35.506 A:middle
Not this particular
technique of making it pop.

00:24:35.916 --> 00:24:37.926 A:middle
But the point is where
I'm putting the code

00:24:37.926 --> 00:24:40.206 A:middle
and where I'm exactly
doing this.

00:24:41.116 --> 00:24:44.066 A:middle
So, I'm doing this code
in viewWillTransition

00:24:44.066 --> 00:24:45.556 A:middle
to size with coordinator.

00:24:46.386 --> 00:24:49.256 A:middle
And I'm doing this because it
will be called during an app

00:24:49.346 --> 00:24:50.826 A:middle
size change or a rotation.

00:24:51.416 --> 00:24:53.056 A:middle
And I'm giving this
coordinator that lets me set

00:24:53.056 --> 00:24:55.166 A:middle
up animations alongside
the rotation

00:24:55.196 --> 00:24:56.296 A:middle
and to happen afterwards.

00:24:57.206 --> 00:24:59.586 A:middle
Now, why don't I put all
my layout code in here?

00:25:00.136 --> 00:25:01.856 A:middle
That's because this isn't
called the first time

00:25:01.856 --> 00:25:03.216 A:middle
through when your app launches.

00:25:03.706 --> 00:25:05.276 A:middle
There's other reasons, but
that's the main reason.

00:25:06.676 --> 00:25:09.246 A:middle
So I'll use the coordinator
and I'll set up a block

00:25:09.246 --> 00:25:11.046 A:middle
to animate alongside
the rotation.

00:25:11.556 --> 00:25:13.676 A:middle
And all I have to do in this
block is set the parameter

00:25:13.676 --> 00:25:14.816 A:middle
that I want to be animated.

00:25:15.066 --> 00:25:16.796 A:middle
It'll go alongside the rotation

00:25:16.796 --> 00:25:18.896 A:middle
with the same curve
and the same timing.

00:25:19.576 --> 00:25:22.476 A:middle
And I'm going to set that stack
view's transform to a scale

00:25:22.476 --> 00:25:24.306 A:middle
up of a factor of 1.4.

00:25:24.306 --> 00:25:26.556 A:middle
So a little bit bigger.

00:25:26.716 --> 00:25:28.216 A:middle
Then when I'm done, I get to set

00:25:28.216 --> 00:25:30.096 A:middle
up my own animation
with my own duration.

00:25:30.226 --> 00:25:31.296 A:middle
Here I'm picking .5.

00:25:31.296 --> 00:25:32.346 A:middle
And we'll go back to normal.

00:25:32.346 --> 00:25:34.606 A:middle
We'll set the affine
transform back to the identity.

00:25:35.026 --> 00:25:35.666 A:middle
So back to normal.

00:25:36.616 --> 00:25:37.406 A:middle
So here we go.

00:25:38.096 --> 00:25:40.046 A:middle
Here's the same app just with
that additional code on there.

00:25:41.016 --> 00:25:41.626 A:middle
It'll rotate.

00:25:41.856 --> 00:25:46.196 A:middle
And it popped towards
you and went back.

00:25:46.816 --> 00:25:49.706 A:middle
If we rotate again, it
will do the same thing.

00:25:50.896 --> 00:25:51.496 A:middle
So there we go.

00:25:51.826 --> 00:25:53.266 A:middle
I got to add that pop effect.

00:25:53.266 --> 00:25:54.836 A:middle
I got to make it a
little more interesting.

00:25:54.936 --> 00:25:57.176 A:middle
But I didn't have to
change my core layout code.

00:25:57.306 --> 00:25:58.156 A:middle
It remained the same.

00:25:58.156 --> 00:25:59.436 A:middle
So I just added it on top.

00:25:59.916 --> 00:26:04.756 A:middle
So the last thing I'd like to
talk about is reusable elements.

00:25:59.916 --> 00:26:04.756 A:middle
So the last thing I'd like to
talk about is reusable elements.

00:26:05.686 --> 00:26:08.876 A:middle
And this is a way that you can
build your app out of pieces

00:26:08.876 --> 00:26:11.626 A:middle
that can be reused
across different designs.

00:26:12.506 --> 00:26:15.606 A:middle
This way you can build you app
more quickly and take advantage

00:26:15.606 --> 00:26:17.366 A:middle
of these different
designs without having

00:26:17.366 --> 00:26:18.106 A:middle
to rewrite everything.

00:26:19.396 --> 00:26:21.136 A:middle
We'll do this by using
view controllers.

00:26:21.296 --> 00:26:23.196 A:middle
Each piece will typically
be a view controller.

00:26:23.506 --> 00:26:25.336 A:middle
And that's because
they package up a lot

00:26:25.336 --> 00:26:26.576 A:middle
of useful stuff all together.

00:26:27.066 --> 00:26:29.316 A:middle
For instance, you get
a whole tree of views,

00:26:29.316 --> 00:26:31.626 A:middle
not just a single view,
but a whole tree of views

00:26:32.206 --> 00:26:33.726 A:middle
and all their constraints
that go with them.

00:26:34.976 --> 00:26:36.986 A:middle
You get to make connections
to other view controllers.

00:26:36.986 --> 00:26:40.056 A:middle
So you might perform a segue
to different view controller

00:26:40.096 --> 00:26:43.906 A:middle
or present something, find
your parent view controllers

00:26:43.906 --> 00:26:44.396 A:middle
and so on.

00:26:45.316 --> 00:26:47.136 A:middle
And also, it's a place
to make connections

00:26:47.136 --> 00:26:48.576 A:middle
to the rest of your app.

00:26:48.576 --> 00:26:51.966 A:middle
So you might have a connection
to model objects or an object

00:26:51.966 --> 00:26:54.076 A:middle
that represents network
access or so on.

00:26:54.136 --> 00:26:57.446 A:middle
Now, the view controllers
in your app are going

00:26:57.446 --> 00:26:59.116 A:middle
to perform different roles.

00:26:59.886 --> 00:27:01.566 A:middle
You might have a
container view controller.

00:26:59.886 --> 00:27:01.566 A:middle
You might have a
container view controller.

00:27:02.196 --> 00:27:06.476 A:middle
And it might contain multiple
contained view controllers.

00:27:06.596 --> 00:27:08.446 A:middle
Now, you're probably used

00:27:08.446 --> 00:27:10.576 A:middle
to writing contained
view controllers

00:27:10.576 --> 00:27:13.136 A:middle
and then putting them in
containers that UIKit provides.

00:27:13.786 --> 00:27:15.716 A:middle
For example a navigation
controller

00:27:15.716 --> 00:27:18.326 A:middle
or split view controller or a
tab bar controller and so on.

00:27:18.326 --> 00:27:21.106 A:middle
But you can write your own
container view controllers.

00:27:21.436 --> 00:27:23.756 A:middle
And this lets you really
unlock a lot of power.

00:27:23.756 --> 00:27:25.856 A:middle
You can do a lot of
things with that.

00:27:26.546 --> 00:27:27.876 A:middle
So I'll show how to do this.

00:27:28.116 --> 00:27:29.016 A:middle
Here's my designs again.

00:27:29.016 --> 00:27:33.116 A:middle
And in my case, I think I can
have an outer container view

00:27:33.116 --> 00:27:37.846 A:middle
controller that I'll call
ExampleContainerViewController.

00:27:38.386 --> 00:27:41.226 A:middle
And inside of that I'll have
three element view controllers,

00:27:41.356 --> 00:27:44.166 A:middle
one for each one
of these things.

00:27:44.346 --> 00:27:47.426 A:middle
Now, thinking about it, I think
I need a little refinement

00:27:47.426 --> 00:27:48.206 A:middle
to my design.

00:27:48.606 --> 00:27:51.116 A:middle
So if I don't have much
space, I'm going to need

00:27:51.116 --> 00:27:52.966 A:middle
to show just a preview
of these items.

00:27:52.966 --> 00:27:55.006 A:middle
I don't have room for the
full text, just the title.

00:27:56.076 --> 00:27:59.086 A:middle
So, when I click on one of
these items, or excuse me,

00:27:59.086 --> 00:28:01.436 A:middle
tap on one of these items,
it's going to be a preview.

00:27:59.086 --> 00:28:01.436 A:middle
tap on one of these items,
it's going to be a preview.

00:28:01.946 --> 00:28:04.146 A:middle
I will present another
view controller

00:28:04.146 --> 00:28:05.326 A:middle
that shows the full text.

00:28:06.216 --> 00:28:07.686 A:middle
Then when I tap on
that thing again,

00:28:08.046 --> 00:28:09.426 A:middle
we'll dismiss it, it'll go away.

00:28:10.676 --> 00:28:14.446 A:middle
So I'll do this by having my
ExampleContainerViewController

00:28:14.446 --> 00:28:17.426 A:middle
will have three small
element view controllers.

00:28:17.536 --> 00:28:18.426 A:middle
I'll define this later.

00:28:19.296 --> 00:28:22.416 A:middle
When we present one, when we
tap on that thing, we'll create

00:28:22.416 --> 00:28:24.906 A:middle
and present a new large
element view controller.

00:28:26.306 --> 00:28:29.256 A:middle
Now, if my app is big enough,
I don't have to do all that.

00:28:29.256 --> 00:28:32.756 A:middle
I'd like to just show the large
element view controllers right

00:28:32.796 --> 00:28:35.836 A:middle
here directly in that container.

00:28:36.246 --> 00:28:38.386 A:middle
So my container will
just have three instances

00:28:38.386 --> 00:28:40.586 A:middle
of another class
LargeElementViewController.

00:28:41.266 --> 00:28:44.876 A:middle
And when the app size
changes dynamically,

00:28:45.126 --> 00:28:47.856 A:middle
we'll change the view
controller hierarchy to go

00:28:47.856 --> 00:28:49.106 A:middle
between one of these two states.

00:28:50.226 --> 00:28:51.266 A:middle
So I'll show the code here.

00:28:51.526 --> 00:28:52.406 A:middle
We're going to work our way

00:28:52.406 --> 00:28:55.376 A:middle
up from the contained view
controllers into the containers.

00:28:55.556 --> 00:28:56.906 A:middle
So we'll start with
the storyboard

00:28:56.956 --> 00:28:58.246 A:middle
for these contained
view controllers.

00:28:58.876 --> 00:28:59.636 A:middle
And it's pretty simple.

00:28:59.636 --> 00:29:01.966 A:middle
We've just got a simple
view with the title here.

00:28:59.636 --> 00:29:01.966 A:middle
We've just got a simple
view with the title here.

00:29:02.566 --> 00:29:04.206 A:middle
You'll note that I
set the custom class

00:29:04.206 --> 00:29:05.926 A:middle
to be
SmallElementViewController.

00:29:06.576 --> 00:29:09.816 A:middle
And I also set the storyboard
identifier to small element.

00:29:09.976 --> 00:29:11.916 A:middle
This way I can find these
things in the storyboard

00:29:11.916 --> 00:29:13.076 A:middle
and instantiate them later.

00:29:13.476 --> 00:29:15.996 A:middle
For the
LargeElementViewController

00:29:15.996 --> 00:29:16.436 A:middle
it's bigger.

00:29:16.436 --> 00:29:17.636 A:middle
It's got that extra text in it.

00:29:17.986 --> 00:29:18.656 A:middle
The same idea.

00:29:18.846 --> 00:29:21.416 A:middle
I set my custom class to
LargeElementViewController.

00:29:21.486 --> 00:29:22.956 A:middle
And I set the identifier.

00:29:24.256 --> 00:29:26.606 A:middle
So here's the code for the
SmallElementViewController.

00:29:27.196 --> 00:29:28.006 A:middle
We'll start with this.

00:29:28.066 --> 00:29:30.486 A:middle
And I know that every time I
show this I'm going to want

00:29:30.526 --> 00:29:32.406 A:middle
to tap it to show the large one.

00:29:32.846 --> 00:29:36.256 A:middle
So in my viewDidLoad, this is
an appropriate time to do this,

00:29:36.396 --> 00:29:38.696 A:middle
I'm going to set up my
tap gesture recognizer

00:29:38.816 --> 00:29:40.046 A:middle
and add it to my view.

00:29:41.196 --> 00:29:44.346 A:middle
Later, when that thing is
tapped, this will be called.

00:29:45.386 --> 00:29:48.626 A:middle
We'll go on and find our main
storyboard and instantiate

00:29:48.626 --> 00:29:50.866 A:middle
that LargeElementViewController
using the

00:29:50.866 --> 00:29:52.216 A:middle
identifier largeElement.

00:29:53.066 --> 00:29:57.606 A:middle
Finally, all we have to
do is present that then.

00:29:57.816 --> 00:29:59.246 A:middle
In the
LargeElementViewController,

00:29:59.376 --> 00:30:01.066 A:middle
it's a little more
tricky because we need

00:29:59.376 --> 00:30:01.066 A:middle
it's a little more
tricky because we need

00:30:01.066 --> 00:30:02.926 A:middle
to know are we being
presented or not.

00:30:03.286 --> 00:30:05.486 A:middle
If it's being presented,
we need to tap to dismiss.

00:30:05.566 --> 00:30:06.466 A:middle
If it's not, we don't.

00:30:07.246 --> 00:30:08.936 A:middle
So I'll put this code
in viewWillAppear.

00:30:09.436 --> 00:30:11.546 A:middle
I'm doing that because I
can use this other method

00:30:12.066 --> 00:30:15.076 A:middle
isBeingPresented to find out
am I being presented or not.

00:30:16.126 --> 00:30:18.456 A:middle
So if it is, then I add
the tap gesture recognizer,

00:30:18.456 --> 00:30:19.346 A:middle
the same way as before.

00:30:19.926 --> 00:30:22.146 A:middle
When that's tapped, all
I have to do is dismiss.

00:30:24.876 --> 00:30:27.226 A:middle
So now let's get on to the
ContainerViewController.

00:30:27.226 --> 00:30:30.526 A:middle
And I'm going to add
an additional object

00:30:30.566 --> 00:30:35.696 A:middle
to make this easier
to work with.

00:30:35.876 --> 00:30:37.846 A:middle
We'll call this the
design object.

00:30:38.286 --> 00:30:41.086 A:middle
And the design object
is really going to wrap

00:30:41.086 --> 00:30:44.626 A:middle
up all the information that
describes what a design is.

00:30:45.216 --> 00:30:48.316 A:middle
I'll make it an immutable
struct for safety.

00:30:48.446 --> 00:30:50.416 A:middle
So I can write a function
that returns one of these,

00:30:50.416 --> 00:30:52.386 A:middle
and after it's been
returned, it won't change.

00:30:52.386 --> 00:30:53.296 A:middle
Nobody can change it.

00:30:53.606 --> 00:30:56.566 A:middle
And then finally, I'll
allow comparisons.

00:30:56.566 --> 00:30:59.816 A:middle
So I can see is my design
that I want to use different

00:30:59.816 --> 00:31:01.036 A:middle
than what I'm currently
displaying.

00:30:59.816 --> 00:31:01.036 A:middle
than what I'm currently
displaying.

00:31:02.296 --> 00:31:03.856 A:middle
So let's actually
implement this.

00:31:04.476 --> 00:31:06.966 A:middle
I've got just a simple
Swift struct here.

00:31:07.486 --> 00:31:09.426 A:middle
It's going to have two
pieces of information in it.

00:31:09.826 --> 00:31:11.186 A:middle
The first one is the axis.

00:31:11.606 --> 00:31:13.436 A:middle
I'm reusing this
enum from stackView,

00:31:13.436 --> 00:31:15.036 A:middle
so it's either vertical
or horizontal.

00:31:16.216 --> 00:31:18.636 A:middle
Then I'm going to
define my own enum

00:31:18.636 --> 00:31:21.146 A:middle
for whether I'm using the small
version or the large version

00:31:21.146 --> 00:31:22.356 A:middle
of the view controllers inside.

00:31:22.516 --> 00:31:23.706 A:middle
I call that elementKind.

00:31:24.866 --> 00:31:27.946 A:middle
Finally, I've got a read-only
computed property here

00:31:28.136 --> 00:31:29.426 A:middle
called elementIdentifier.

00:31:29.806 --> 00:31:32.116 A:middle
And this just tells me
what identifier to use

00:31:32.116 --> 00:31:34.146 A:middle
to make those view
controllers from the storyboard.

00:31:36.176 --> 00:31:39.406 A:middle
Finally, I'll implement the
Equatable protocol from Swift.

00:31:39.786 --> 00:31:41.326 A:middle
This is just function
equals equals.

00:31:41.326 --> 00:31:43.706 A:middle
And I just compare the
data inside my two designs

00:31:43.706 --> 00:31:46.566 A:middle
to see if they're the same.

00:31:46.756 --> 00:31:48.986 A:middle
So finally, let's get up into
the container view controller

00:31:48.986 --> 00:31:50.376 A:middle
and actually do this stuff.

00:31:50.376 --> 00:31:51.056 A:middle
You'll remember it's going

00:31:51.056 --> 00:31:52.666 A:middle
to have three child
view controllers.

00:31:53.196 --> 00:31:55.886 A:middle
It's going to use
those rules to create

00:31:55.886 --> 00:31:57.326 A:middle
and decide what design to use.

00:31:58.106 --> 00:31:59.286 A:middle
And then finally we'll update.

00:31:59.286 --> 00:32:02.126 A:middle
Every layout will
reevaluate what design to use

00:31:59.286 --> 00:32:02.126 A:middle
Every layout will
reevaluate what design to use

00:32:02.126 --> 00:32:03.416 A:middle
and change things if we need to.

00:32:04.316 --> 00:32:04.796 A:middle
So here we go.

00:32:05.526 --> 00:32:07.056 A:middle
The
ExampleContainerViewController.

00:32:07.056 --> 00:32:08.986 A:middle
I've got an array
with these three slots

00:32:08.986 --> 00:32:10.746 A:middle
for three optional
view controllers.

00:32:11.366 --> 00:32:12.336 A:middle
And they start out as nil.

00:32:12.336 --> 00:32:14.016 A:middle
Because when this thing
is initially created,

00:32:14.016 --> 00:32:16.146 A:middle
nothing is going to
be showing there yet.

00:32:17.056 --> 00:32:19.186 A:middle
I'll also keep track
of the design

00:32:19.186 --> 00:32:20.446 A:middle
that I'm currently displaying.

00:32:20.646 --> 00:32:22.216 A:middle
And also that's optional
and it's nil

00:32:22.216 --> 00:32:23.396 A:middle
because nothing has
happened yet.

00:32:24.846 --> 00:32:26.616 A:middle
So, in my
viewWillLayoutSubviews,

00:32:26.656 --> 00:32:28.146 A:middle
this should look
very familiar by now.

00:32:28.396 --> 00:32:29.546 A:middle
I'm going to get my size.

00:32:30.176 --> 00:32:33.666 A:middle
I'm going to call a function
called decideDesign based

00:32:33.666 --> 00:32:35.906 A:middle
on the size, return
a new design to use.

00:32:36.766 --> 00:32:38.166 A:middle
And if that design is different

00:32:38.166 --> 00:32:39.456 A:middle
than what I'm currently
displaying,

00:32:39.516 --> 00:32:41.446 A:middle
I'm going to apply
that design to my UI.

00:32:41.856 --> 00:32:43.216 A:middle
So change my UI to match.

00:32:44.116 --> 00:32:47.136 A:middle
So you'll note this
exactly like the pseudocode

00:32:47.136 --> 00:32:48.236 A:middle
that I talked about earlier.

00:32:48.866 --> 00:32:51.426 A:middle
And really, no matter
what your app does,

00:32:51.746 --> 00:32:53.456 A:middle
you can probably follow
this same pattern.

00:32:53.826 --> 00:32:55.426 A:middle
You'll have different
stuff in your design.

00:32:55.986 --> 00:32:57.116 A:middle
Your decideDesign

00:32:57.116 --> 00:32:58.936 A:middle
and applyDesign methods
will be different.

00:32:59.516 --> 00:33:02.916 A:middle
But you'll probably be following
this exact same pattern.

00:32:59.516 --> 00:33:02.916 A:middle
But you'll probably be following
this exact same pattern.

00:33:03.756 --> 00:33:05.986 A:middle
So let's fill in these
functions from my sample app.

00:33:06.796 --> 00:33:11.046 A:middle
decideDesign will first
decide on the axis.

00:33:11.046 --> 00:33:13.526 A:middle
And we've already been over
how we did this with this rule.

00:33:14.036 --> 00:33:16.456 A:middle
For the elementKind I'm going
to use a different rule.

00:33:16.836 --> 00:33:20.386 A:middle
So I'm going to choose
if my app's width is less

00:33:20.386 --> 00:33:22.806 A:middle
than a threshold, choose
to use the small ones.

00:33:22.806 --> 00:33:24.066 A:middle
Otherwise use the large ones.

00:33:24.666 --> 00:33:26.466 A:middle
And here I'm just
comparing against a constant.

00:33:26.516 --> 00:33:28.616 A:middle
This is just an example
that I'm using for my app.

00:33:28.616 --> 00:33:30.956 A:middle
This isn't a value you should
necessarily use in your app.

00:33:30.956 --> 00:33:31.756 A:middle
It's just an example.

00:33:33.096 --> 00:33:36.106 A:middle
Finally, I'm going to wrap up
those two pieces of information

00:33:36.106 --> 00:33:38.126 A:middle
in a design object
and return it.

00:33:39.116 --> 00:33:42.436 A:middle
To apply a design, I need
to apply those two things.

00:33:42.436 --> 00:33:44.196 A:middle
So I need to find out
if they've changed.

00:33:44.686 --> 00:33:46.216 A:middle
So again, for the
axis we'll just pass

00:33:46.216 --> 00:33:47.386 A:middle
that directly to the stack view.

00:33:47.386 --> 00:33:47.896 A:middle
It's smart.

00:33:47.896 --> 00:33:49.426 A:middle
It won't do anything
if doesn't need to.

00:33:50.626 --> 00:33:52.446 A:middle
For the elementKind,
we've got more work to do.

00:33:53.616 --> 00:33:57.146 A:middle
If we have old element
view controllers

00:33:57.396 --> 00:33:59.206 A:middle
and the element kind is
changing, then we need

00:33:59.206 --> 00:34:01.276 A:middle
to destroy the old ones
and create new ones.

00:33:59.206 --> 00:34:01.276 A:middle
to destroy the old ones
and create new ones.

00:34:01.726 --> 00:34:02.746 A:middle
So here's how we'll do that.

00:34:03.866 --> 00:34:05.106 A:middle
We'll iterate through
that array.

00:34:05.256 --> 00:34:07.386 A:middle
And I'm using this
enumerated function here

00:34:07.386 --> 00:34:09.556 A:middle
because it lets me get
the index and the object

00:34:09.556 --> 00:34:11.746 A:middle
at that index simultaneously
while I'm iterating.

00:34:13.146 --> 00:34:15.856 A:middle
And finally, if we've got an
old element view controller,

00:34:16.306 --> 00:34:17.116 A:middle
then I need to remove it.

00:34:17.116 --> 00:34:18.456 A:middle
I'll call this function
to remove it.

00:34:19.716 --> 00:34:22.485 A:middle
Go to my storyboard, create
a new element view controller

00:34:22.485 --> 00:34:24.585 A:middle
using the identifier
that the design gave me.

00:34:24.866 --> 00:34:26.835 A:middle
And then finally call
a function to add

00:34:26.835 --> 00:34:28.065 A:middle
that new child view controller.

00:34:28.646 --> 00:34:31.996 A:middle
And then save it in the array
for the next time through.

00:34:33.516 --> 00:34:35.016 A:middle
So, last slide of code.

00:34:35.016 --> 00:34:36.005 A:middle
Thank you for sticking with me.

00:34:36.476 --> 00:34:37.916 A:middle
These are some things
that we need to do

00:34:37.916 --> 00:34:40.036 A:middle
to be a well-behaved
container view controller.

00:34:40.156 --> 00:34:42.656 A:middle
So it's important to do these
steps in this exact order.

00:34:43.466 --> 00:34:44.815 A:middle
When we're adding a
new view controller,

00:34:44.815 --> 00:34:47.005 A:middle
we first call
addChildViewController.

00:34:47.106 --> 00:34:48.255 A:middle
This adds that view controller

00:34:48.255 --> 00:34:52.775 A:middle
as to self's list
of view controllers.

00:34:53.826 --> 00:34:56.896 A:middle
Then we need to add that
new view controller's view

00:34:56.896 --> 00:34:57.746 A:middle
to the view hierarchy.

00:34:58.656 --> 00:35:00.956 A:middle
We do this by using
the stack view's

00:34:58.656 --> 00:35:00.956 A:middle
We do this by using
the stack view's

00:35:01.026 --> 00:35:02.616 A:middle
addArrangedSubviews method.

00:35:02.706 --> 00:35:04.716 A:middle
And UIKit doesn't
do this for you.

00:35:04.716 --> 00:35:06.976 A:middle
And in fact, can't do it for
you because we don't know

00:35:06.976 --> 00:35:09.656 A:middle
where it's going to go
in the view hierarchy.

00:35:09.766 --> 00:35:11.486 A:middle
Only you can tell us that.

00:35:12.176 --> 00:35:13.796 A:middle
Finally, once that's done,

00:35:13.976 --> 00:35:16.086 A:middle
you tell that view
controller it did move

00:35:16.086 --> 00:35:18.026 A:middle
to a new parent view
controller, and that's "self".

00:35:19.116 --> 00:35:22.426 A:middle
To remove the old one, we
do much the same steps,

00:35:22.456 --> 00:35:23.426 A:middle
just in the opposite order.

00:35:23.836 --> 00:35:25.276 A:middle
So we tell it it will move

00:35:25.276 --> 00:35:27.006 A:middle
to a new parent view
controller, which is nil.

00:35:27.956 --> 00:35:29.566 A:middle
Remove its view from
the view hierarchy.

00:35:30.226 --> 00:35:32.336 A:middle
And then finally, remove
it from self's list

00:35:33.086 --> 00:35:34.236 A:middle
of child view controllers.

00:35:34.516 --> 00:35:36.876 A:middle
So here we are.

00:35:36.876 --> 00:35:38.606 A:middle
I'll actually show
you the app, finally.

00:35:39.156 --> 00:35:41.576 A:middle
Here we are on the
iPad in landscape.

00:35:41.936 --> 00:35:43.026 A:middle
We've got lots of room.

00:35:43.126 --> 00:35:44.676 A:middle
We're using that
horizontal layout

00:35:44.746 --> 00:35:46.796 A:middle
and we're using the
LargeElementViewControllers.

00:35:47.606 --> 00:35:49.206 A:middle
Now, if I slide over another app

00:35:49.206 --> 00:35:53.306 A:middle
and pin it, my app's
now smaller.

00:35:53.336 --> 00:35:54.806 A:middle
I switched to that
vertical layout.

00:35:54.806 --> 00:35:57.146 A:middle
But I'm using those
LargeElementViewControllers

00:35:57.146 --> 00:35:57.436 A:middle
still.

00:35:57.626 --> 00:35:59.676 A:middle
In fact, they're the same
instance of the view controllers

00:35:59.676 --> 00:36:00.726 A:middle
that we were looking at earlier.

00:35:59.676 --> 00:36:00.726 A:middle
that we were looking at earlier.

00:36:01.896 --> 00:36:04.436 A:middle
Now, if I make that
app smaller still,

00:36:04.436 --> 00:36:08.876 A:middle
you'll note that we switch
to that smaller design.

00:36:08.966 --> 00:36:09.946 A:middle
So we're still vertical.

00:36:10.196 --> 00:36:11.706 A:middle
We are using that
smaller design.

00:36:12.206 --> 00:36:14.916 A:middle
I can now tap on one of
those small view controllers,

00:36:14.966 --> 00:36:15.866 A:middle
present the large one.

00:36:16.046 --> 00:36:18.886 A:middle
If I tap again, we'll
dismiss it.

00:36:19.796 --> 00:36:20.736 A:middle
So there's my app.

00:36:21.216 --> 00:36:23.006 A:middle
You'll note that we
went beyond the basics.

00:36:23.006 --> 00:36:25.796 A:middle
We really decided exactly what
we wanted to do by ourselves.

00:36:26.536 --> 00:36:29.006 A:middle
I handled designs of
all those combinations.

00:36:30.256 --> 00:36:31.806 A:middle
I implemented each design.

00:36:31.806 --> 00:36:33.266 A:middle
We changed between
them dynamically

00:36:33.856 --> 00:36:35.006 A:middle
as the app changed size,

00:36:35.816 --> 00:36:38.066 A:middle
and also used reusable
elements to do it.

00:36:39.076 --> 00:36:40.626 A:middle
So my app is an example of this.

00:36:40.626 --> 00:36:42.326 A:middle
Your app can do all
these things, too.

00:36:44.316 --> 00:36:46.056 A:middle
So now we've been
through the basics.

00:36:46.056 --> 00:36:48.496 A:middle
We've shown you what
Xcode can do.

00:36:48.656 --> 00:36:51.286 A:middle
We've shown you some of
the incredible things

00:36:51.286 --> 00:36:54.196 A:middle
that UIKit provides in this
whole Swiss Army knife of tools.

00:36:54.196 --> 00:36:56.956 A:middle
And we've been through
code in a real example app.

00:36:57.426 --> 00:36:59.636 A:middle
So, we've really barely
scratch the surface here.

00:36:59.636 --> 00:37:00.696 A:middle
There's a lot more to go.

00:36:59.636 --> 00:37:00.696 A:middle
There's a lot more to go.

00:37:01.076 --> 00:37:03.756 A:middle
So, check out our
sample code at this URL.

00:37:04.816 --> 00:37:07.716 A:middle
Also, if you didn't see
Session 1, please review that.

00:37:08.016 --> 00:37:10.046 A:middle
There was a great talk
about inclusive app design

00:37:10.046 --> 00:37:11.326 A:middle
that talked about typography.

00:37:11.406 --> 00:37:15.136 A:middle
New stuff in Collection
View and Auto Layout

00:37:15.316 --> 00:37:16.666 A:middle
that David mentioned earlier.

00:37:17.186 --> 00:37:19.916 A:middle
And then also the last two
years at WWDC we've talked

00:37:19.916 --> 00:37:21.796 A:middle
about adaptive apps
and multitasking.

00:37:22.106 --> 00:37:24.676 A:middle
And we really didn't duplicate
too much of that material.

00:37:24.716 --> 00:37:26.196 A:middle
So, please review that stuff.

00:37:26.416 --> 00:37:28.586 A:middle
There's a lot of great
material in those talks.

00:37:29.146 --> 00:37:30.146 A:middle
So thank you.

00:37:30.286 --> 00:37:31.346 A:middle
Have a fantastic Friday.

00:37:32.516 --> 00:37:39.530 A:middle
[ Applause ]
