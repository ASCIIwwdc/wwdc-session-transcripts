WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:08.516 --> 00:00:16.500 A:middle
[ Music ]

00:00:23.516 --> 00:00:28.556 A:middle
[ Applause And Cheering ]

00:00:29.056 --> 00:00:29.566 A:middle
&gt;&gt; Hello everybody.

00:00:30.866 --> 00:00:33.436 A:middle
Welcome back, if you came to
last year's Apple Pay session.

00:00:34.146 --> 00:00:34.836 A:middle
My name is Nick.

00:00:35.576 --> 00:00:37.736 A:middle
I'm here today with
my colleague Anders.

00:00:38.076 --> 00:00:40.846 A:middle
And we are going to talk
about a brand-new feature,

00:00:41.426 --> 00:00:43.496 A:middle
Apple Pay on the web.

00:00:44.656 --> 00:00:47.246 A:middle
But first, I want to
ask you a question.

00:00:48.486 --> 00:00:51.906 A:middle
How many of you, and put your
hands up, or yell at your screen

00:00:52.036 --> 00:00:54.136 A:middle
if you are watching
downstairs or online,

00:00:54.276 --> 00:00:57.566 A:middle
how many of you have tried to
buy something online but given

00:00:57.566 --> 00:00:59.986 A:middle
up because the checkout
was just too confusing?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:00.486 --> 00:01:02.566 A:middle
I'm seeing a lot of hands.

00:01:03.396 --> 00:01:04.495 A:middle
That's true isn't it?

00:01:04.495 --> 00:01:05.226 A:middle
It's a big problem.

00:01:05.406 --> 00:01:08.016 A:middle
Here's a site I went
to yesterday,

00:01:08.146 --> 00:01:09.136 A:middle
completely legitimate.

00:01:10.136 --> 00:01:12.146 A:middle
Ignore the name, Honest
Bob; he's a great guy.

00:01:13.176 --> 00:01:15.156 A:middle
But his checkout was
a little confusing.

00:01:15.806 --> 00:01:18.646 A:middle
And so I typed in my name, which
in this example has been changed

00:01:18.886 --> 00:01:20.706 A:middle
to protect the innocent,
to Johnny Appleseed.

00:01:21.386 --> 00:01:22.626 A:middle
And I typed in my
account number.

00:01:22.626 --> 00:01:24.146 A:middle
And I got this confusing error.

00:01:24.146 --> 00:01:27.606 A:middle
It said the card number needed
to be a series of numbers.

00:01:28.586 --> 00:01:30.606 A:middle
So I thought, "Well,
I guess it didn't

00:01:30.606 --> 00:01:33.106 A:middle
like the fact I had some spaces
there even though that's how it

00:01:33.106 --> 00:01:33.896 A:middle
was written on my card.

00:01:34.686 --> 00:01:35.466 A:middle
So I changed it.

00:01:36.556 --> 00:01:37.616 A:middle
And then I got this other error.

00:01:37.616 --> 00:01:39.736 A:middle
So apparently the
month's not entered,

00:01:39.846 --> 00:01:41.966 A:middle
which wasn't even the month
I'd chosen; didn't exist.

00:01:43.096 --> 00:01:44.686 A:middle
This is very confusing.

00:01:45.426 --> 00:01:47.756 A:middle
Now hopefully the checkouts
you've seen aren't quite

00:01:47.756 --> 00:01:48.546 A:middle
as bad as this.

00:01:49.266 --> 00:01:51.936 A:middle
But Internet checkouts,
they are pretty poor.

00:01:52.756 --> 00:01:53.986 A:middle
And we think we can solve that.

00:01:54.616 --> 00:01:56.666 A:middle
We think we can solve
it with Apple Pay.

00:01:56.666 --> 00:01:59.286 A:middle
And we are going to talk today

00:01:59.736 --> 00:02:02.256 A:middle
about how we can solve
the problem of checkouts


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.736 --> 00:02:02.256 A:middle
about how we can solve
the problem of checkouts

00:02:02.256 --> 00:02:05.546 A:middle
on the web using
the great interface

00:02:05.746 --> 00:02:07.176 A:middle
and the great benefits
of Apple Pay.

00:02:07.176 --> 00:02:09.705 A:middle
We have got a lot to
cover, so we are going

00:02:09.705 --> 00:02:11.026 A:middle
to start off with
an introduction.

00:02:11.026 --> 00:02:14.156 A:middle
We are going to run through some
of the things about Apple Pay,

00:02:14.156 --> 00:02:16.986 A:middle
if you are not familiar with
it, and what it can do for you.

00:02:16.986 --> 00:02:19.606 A:middle
Then we are going to talk
about the actual API,

00:02:19.606 --> 00:02:22.626 A:middle
the new API that we've added
into Safari, the JavaScript API.

00:02:22.626 --> 00:02:25.506 A:middle
And then we'll move on
to payment processing,

00:02:25.506 --> 00:02:27.216 A:middle
how you can actually get paid.

00:02:28.626 --> 00:02:30.536 A:middle
And finally we'll look at
designing for Apple Pay,

00:02:30.726 --> 00:02:33.806 A:middle
how to make your sites
really shine and really work

00:02:33.806 --> 00:02:36.106 A:middle
and have a great
Apple Pay experience.

00:02:36.516 --> 00:02:38.606 A:middle
So let's get started.

00:02:40.316 --> 00:02:41.506 A:middle
What is Apple Pay?

00:02:42.536 --> 00:02:45.016 A:middle
Hopefully most of you are
familiar with Apple Pay.

00:02:45.516 --> 00:02:49.346 A:middle
It's an easy, secure,
and private way to pay.

00:02:50.516 --> 00:02:54.186 A:middle
And you can pay both
in-store and you can pay

00:02:54.356 --> 00:02:56.366 A:middle
within iOS applications.

00:02:57.596 --> 00:02:58.476 A:middle
Maybe you've tried that.

00:02:58.576 --> 00:02:59.686 A:middle
If you haven't, give it a go.

00:02:59.686 --> 00:03:02.966 A:middle
There are some great apps
like Lyft or Uber or DoorDash


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.686 --> 00:03:02.966 A:middle
There are some great apps
like Lyft or Uber or DoorDash

00:03:02.966 --> 00:03:04.886 A:middle
that you can use while you
are here at the conference.

00:03:06.416 --> 00:03:09.636 A:middle
And Apple Pay within apps
enables best-in-class

00:03:09.636 --> 00:03:11.006 A:middle
eCommerce experiences.

00:03:11.366 --> 00:03:13.166 A:middle
They are apps that really shine.

00:03:14.466 --> 00:03:19.136 A:middle
And thousands of applications
have adopted Apple Pay today

00:03:19.666 --> 00:03:23.896 A:middle
across the world, in China,
in the UK, in America.

00:03:25.156 --> 00:03:28.006 A:middle
And these apps are
seeing great results.

00:03:28.176 --> 00:03:31.296 A:middle
They are seeing higher
conversion rates.

00:03:31.716 --> 00:03:33.656 A:middle
Users who pay with Apple
Pay are more likely

00:03:33.656 --> 00:03:35.306 A:middle
to convert to paying customers.

00:03:36.316 --> 00:03:38.696 A:middle
And they are also seeing
increased engagement.

00:03:39.296 --> 00:03:40.876 A:middle
These users aren't
just buying things;

00:03:40.876 --> 00:03:43.776 A:middle
they are spending more
time in these applications.

00:03:44.016 --> 00:03:46.146 A:middle
And finally, users are happier.

00:03:47.156 --> 00:03:50.266 A:middle
Apple Pay has one of the highest
customer satisfaction rates

00:03:50.476 --> 00:03:52.046 A:middle
of any payment method ever.

00:03:52.946 --> 00:03:54.986 A:middle
It's so easy to use,
and users love it.

00:03:55.096 --> 00:03:58.676 A:middle
And that's great
in applications.

00:03:59.366 --> 00:04:00.876 A:middle
But I think there is
something missing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.366 --> 00:04:00.876 A:middle
But I think there is
something missing.

00:04:02.026 --> 00:04:06.416 A:middle
A large amount of
eCommerce happens outside

00:04:06.416 --> 00:04:07.476 A:middle
of the app ecosystem.

00:04:08.336 --> 00:04:09.006 A:middle
Apps are great.

00:04:09.326 --> 00:04:10.016 A:middle
I love apps.

00:04:10.346 --> 00:04:13.396 A:middle
But many of us still pay
for things through the web.

00:04:14.566 --> 00:04:17.406 A:middle
Most payment on the
web is pretty slow.

00:04:17.406 --> 00:04:18.266 A:middle
It's laborious.

00:04:18.266 --> 00:04:19.086 A:middle
And it's unclear.

00:04:19.086 --> 00:04:20.606 A:middle
The checkout flow is different

00:04:20.606 --> 00:04:22.866 A:middle
for every single
merchant, every single site.

00:04:22.936 --> 00:04:23.506 A:middle
It's different.

00:04:23.626 --> 00:04:26.856 A:middle
And so we are going
to solve that today.

00:04:26.896 --> 00:04:28.806 A:middle
And we are going to solve
it by bringing Apple Pay

00:04:28.806 --> 00:04:32.116 A:middle
to more places and
to more people.

00:04:32.656 --> 00:04:35.636 A:middle
And we call that
Apple Pay Everywhere,

00:04:36.056 --> 00:04:38.186 A:middle
because there's three main
places we are bringing it to.

00:04:39.556 --> 00:04:40.666 A:middle
One of them is WatchKit.

00:04:40.666 --> 00:04:42.916 A:middle
You may have seen this
in the keynote yesterday;

00:04:43.126 --> 00:04:45.116 A:middle
and Kevin talked about how
we are bringing Apple Pay

00:04:45.116 --> 00:04:46.066 A:middle
to WatchKit apps.

00:04:46.486 --> 00:04:49.676 A:middle
And we are also bringing it to
all of the great new extensions

00:04:49.676 --> 00:04:53.296 A:middle
that you saw: SiriKit,
maps, and message apps.

00:04:54.106 --> 00:04:56.386 A:middle
But perhaps the biggest
place we are bringing it to,

00:04:56.386 --> 00:05:00.806 A:middle
and the reason you are here
today, is the web and Safari.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:56.386 --> 00:05:00.806 A:middle
and the reason you are here
today, is the web and Safari.

00:05:01.486 --> 00:05:04.816 A:middle
We are going to talk about
WatchKit and extensions

00:05:04.816 --> 00:05:06.246 A:middle
in the session right after this.

00:05:06.346 --> 00:05:08.396 A:middle
So if you like the sound of
my voice, don't go anywhere.

00:05:09.426 --> 00:05:13.366 A:middle
But for now let's focus
on Safari, and let's focus

00:05:13.366 --> 00:05:15.326 A:middle
on Apple Pay on the web.

00:05:15.396 --> 00:05:17.786 A:middle
I have already talked to you

00:05:17.786 --> 00:05:20.946 A:middle
about how eCommerce
today is pretty bad.

00:05:22.476 --> 00:05:24.396 A:middle
Large amounts of retail
happen on the web.

00:05:24.996 --> 00:05:27.876 A:middle
But these checkouts are
lengthy, they are complicated,

00:05:27.876 --> 00:05:29.166 A:middle
and they are hard to use.

00:05:29.286 --> 00:05:31.796 A:middle
And that's doubly
true on mobile.

00:05:32.316 --> 00:05:34.766 A:middle
The screens are smaller, but
the checkouts are still just

00:05:34.766 --> 00:05:35.576 A:middle
as complicated.

00:05:37.046 --> 00:05:39.686 A:middle
Users also want the same
experience that they get

00:05:39.686 --> 00:05:41.376 A:middle
from apps, the same ease of use,

00:05:41.376 --> 00:05:43.586 A:middle
the same security,
the same privacy.

00:05:43.586 --> 00:05:45.516 A:middle
How many of you have
had to get a new card

00:05:45.516 --> 00:05:47.406 A:middle
because you got an
e-mail telling you

00:05:47.406 --> 00:05:50.056 A:middle
that some site you shopped at
three years ago was hacked?

00:05:50.786 --> 00:05:51.566 A:middle
I know I have.

00:05:52.766 --> 00:05:54.946 A:middle
And so Apple Pay solves that.

00:05:55.906 --> 00:05:57.776 A:middle
And Apple Pay on
the web is available

00:05:57.776 --> 00:06:00.306 A:middle
on any Apple Pay device today.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:57.776 --> 00:06:00.306 A:middle
on any Apple Pay device today.

00:06:01.176 --> 00:06:03.326 A:middle
That's iPhone and iPad.

00:06:03.966 --> 00:06:08.836 A:middle
And it's available on Safari
and on SafariViewController.

00:06:09.256 --> 00:06:13.226 A:middle
It's the same Apple Pay
experience but on the web,

00:06:13.316 --> 00:06:16.456 A:middle
the exact UI, the
exact experience.

00:06:16.456 --> 00:06:18.326 A:middle
If you are familiar
with Apple Pay in app,

00:06:18.496 --> 00:06:19.406 A:middle
you'll be right at home.

00:06:20.406 --> 00:06:22.846 A:middle
But there is something
missing there,

00:06:22.846 --> 00:06:26.116 A:middle
and that's on the desktop.

00:06:27.326 --> 00:06:28.736 A:middle
Now in some countries
like China,

00:06:28.806 --> 00:06:31.596 A:middle
mobile eCommerce is the
majority of eCommerce.

00:06:31.596 --> 00:06:34.816 A:middle
But here in the U.S., the
majority of people still pay

00:06:34.816 --> 00:06:36.016 A:middle
for things on their desktop.

00:06:36.356 --> 00:06:39.486 A:middle
You have probably bought
your WWDC ticket on your Mac.

00:06:40.666 --> 00:06:43.436 A:middle
And we think Apple Pay should
be available wherever you are.

00:06:43.986 --> 00:06:49.156 A:middle
And so we are also bringing
Apple Pay to Mac OS Sierra.

00:06:50.386 --> 00:06:53.246 A:middle
Now you can pay directly
from your Mac,

00:06:53.306 --> 00:06:55.916 A:middle
but with the same security
you get from Apple Pay

00:06:56.296 --> 00:06:59.106 A:middle
on your iPhone and
on your Apple Watch.

00:06:59.416 --> 00:07:02.986 A:middle
You can simply tap through
continuity to authorize.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.416 --> 00:07:02.986 A:middle
You can simply tap through
continuity to authorize.

00:07:03.586 --> 00:07:06.526 A:middle
It's really easy to use, and
it's really straightforward.

00:07:06.876 --> 00:07:09.446 A:middle
It's available on any
Handoff-enabled Mac

00:07:09.756 --> 00:07:11.076 A:middle
that can run Mac OS Sierra.

00:07:11.366 --> 00:07:14.706 A:middle
So that's pretty much every Mac
sold for the past four years.

00:07:15.346 --> 00:07:17.106 A:middle
It's fully supported in Safari.

00:07:17.816 --> 00:07:20.196 A:middle
And you authorize the
payment on your iPhone

00:07:20.636 --> 00:07:21.596 A:middle
or on your Apple Watch.

00:07:22.556 --> 00:07:26.336 A:middle
Now because Apple Pay
on Mac OS is so quick,

00:07:26.726 --> 00:07:29.196 A:middle
you might have missed the
demo that we gave yesterday.

00:07:29.196 --> 00:07:30.486 A:middle
So I am going to
give you another one.

00:07:31.026 --> 00:07:31.456 A:middle
Don't worry.

00:07:31.866 --> 00:07:32.486 A:middle
It's very quick.

00:07:33.516 --> 00:07:34.456 A:middle
Let me switch over here.

00:07:34.616 --> 00:07:42.546 A:middle
So I have got, on
the left, a website,

00:07:42.546 --> 00:07:43.846 A:middle
and on the right
I've got an iPhone.

00:07:43.956 --> 00:07:47.576 A:middle
Now Craig booked a few
tickets for an off-site to see

00:07:47.576 --> 00:07:48.876 A:middle
"Finding Dory" on Thursday.

00:07:48.996 --> 00:07:51.156 A:middle
I am going to crash
it, actually Friday.

00:07:51.226 --> 00:07:52.246 A:middle
I am going to crash that.

00:07:52.246 --> 00:07:53.186 A:middle
We are going to join him.

00:07:53.186 --> 00:07:56.516 A:middle
I am going to take 10 of my
engineers, my colleagues, over.

00:07:57.416 --> 00:07:58.936 A:middle
Yeah, we'll go say hi to Craig.

00:07:59.926 --> 00:08:02.036 A:middle
OK. I clicked the buy
with Apple Pay button,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.926 --> 00:08:02.036 A:middle
OK. I clicked the buy
with Apple Pay button,

00:08:02.196 --> 00:08:04.356 A:middle
and that's what happened
instantly.

00:08:04.836 --> 00:08:05.746 A:middle
Let's do that again.

00:08:05.746 --> 00:08:06.696 A:middle
I'm going to cancel it.

00:08:06.696 --> 00:08:08.516 A:middle
And you'll see when I
cancel, it cancels this

00:08:08.516 --> 00:08:09.666 A:middle
from the phone as well.

00:08:09.666 --> 00:08:12.006 A:middle
So I' m going to tap
buy with Apple Pay.

00:08:12.626 --> 00:08:14.776 A:middle
It's immediate.

00:08:15.156 --> 00:08:16.186 A:middle
It came up straightaway.

00:08:16.186 --> 00:08:17.976 A:middle
And then I just Touch
ID on the phone.

00:08:23.336 --> 00:08:23.916 A:middle
And we're done.

00:08:24.366 --> 00:08:25.446 A:middle
We paid in seconds.

00:08:25.796 --> 00:08:27.786 A:middle
It was instant between
these two devices.

00:08:27.786 --> 00:08:30.356 A:middle
And I get a notification telling
me about the payment I've made.

00:08:30.886 --> 00:08:35.106 A:middle
That's how easy and quick
Apple Pay is to use on Mac OS.

00:08:35.436 --> 00:08:38.506 A:middle
It's blindingly fast.

00:08:40.256 --> 00:08:43.086 A:middle
So hopefully I have sold you
on how great Apple Pay is.

00:08:43.676 --> 00:08:46.936 A:middle
Let's talk a bit about
actually integrating it.

00:08:47.716 --> 00:08:50.056 A:middle
Now before we dive into the
web API, I just want to run

00:08:50.056 --> 00:08:51.646 A:middle
over a few basics of Apple Pay

00:08:51.646 --> 00:08:53.886 A:middle
because perhaps you
haven't integrated it

00:08:53.886 --> 00:08:54.796 A:middle
into your application.

00:08:54.796 --> 00:08:56.616 A:middle
Perhaps you are solely
a web developer.

00:08:57.116 --> 00:09:01.806 A:middle
So Apple Pay provides you
with a unique payment token.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:57.116 --> 00:09:01.806 A:middle
So Apple Pay provides you
with a unique payment token.

00:09:03.346 --> 00:09:06.966 A:middle
And you send this token to your
payment processor, like Stripe

00:09:06.966 --> 00:09:09.046 A:middle
or Braintree, or
Chase Paymentech.

00:09:10.416 --> 00:09:13.186 A:middle
Now this token is unique
to that transaction.

00:09:13.186 --> 00:09:14.786 A:middle
It can only be used one time,

00:09:14.846 --> 00:09:16.286 A:middle
and for the amount
that you asked for.

00:09:17.096 --> 00:09:20.296 A:middle
But when you use Apple Pay
in an app or on a website,

00:09:20.386 --> 00:09:22.846 A:middle
it's also unique to
you, the merchant.

00:09:23.166 --> 00:09:23.896 A:middle
It's encrypted.

00:09:24.586 --> 00:09:27.096 A:middle
So even if the token
was compromised somehow,

00:09:27.096 --> 00:09:28.516 A:middle
if the connection the user is

00:09:28.516 --> 00:09:31.116 A:middle
on was an unsecured
WiFi connection,

00:09:31.526 --> 00:09:33.276 A:middle
the token is still
completely safe

00:09:33.316 --> 00:09:35.816 A:middle
because it's encrypted
using a merchant certificate

00:09:36.116 --> 00:09:37.896 A:middle
and a merchant identifier.

00:09:38.396 --> 00:09:41.476 A:middle
Now the merchant identifier

00:09:41.476 --> 00:09:44.536 A:middle
and certificate identify
you as a merchant.

00:09:45.486 --> 00:09:48.256 A:middle
They look like this, like
standard reverse DNS strings.

00:09:48.256 --> 00:09:49.616 A:middle
If you are an iOS developer,

00:09:49.616 --> 00:09:51.026 A:middle
you'll be familiar
with that format.

00:09:51.336 --> 00:09:54.346 A:middle
And they're generated
at our developer portal.

00:09:55.036 --> 00:09:56.336 A:middle
And because they
are unique to you,

00:09:56.336 --> 00:09:59.246 A:middle
and because only you can
decrypt these tokens,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.366 --> 00:10:02.696 A:middle
only you can read your
customer's Apple Pay tokens.

00:10:04.576 --> 00:10:05.996 A:middle
Now let's see how
that flow works

00:10:05.996 --> 00:10:08.656 A:middle
in an actual application today.

00:10:08.656 --> 00:10:12.956 A:middle
So in an iOS app, Apple
Pay starts with the Buy

00:10:12.956 --> 00:10:13.746 A:middle
with Apple Pay button.

00:10:14.346 --> 00:10:18.076 A:middle
Now when the Buy with Apple
Pay button is pressed,

00:10:19.116 --> 00:10:21.376 A:middle
iOS authorizes the payment.

00:10:21.516 --> 00:10:23.356 A:middle
It displays the Apple Pay sheet.

00:10:24.216 --> 00:10:27.056 A:middle
And the user Touch IDs
or uses their passcode.

00:10:27.576 --> 00:10:31.386 A:middle
And so payment data is generated
from the secure elements chip

00:10:31.646 --> 00:10:34.076 A:middle
on the phone; that's the
unique Apple Pay chip

00:10:34.076 --> 00:10:37.016 A:middle
that securely holds
your card data.

00:10:37.196 --> 00:10:40.196 A:middle
Now what happens next
when you're paying

00:10:40.196 --> 00:10:43.916 A:middle
in an app is this data is sent
to our servers, where it goes

00:10:43.916 --> 00:10:45.526 A:middle
through a process
that we call Rewrap.

00:10:45.526 --> 00:10:49.016 A:middle
And that's when it's reencrypted
to you as a merchant.

00:10:49.656 --> 00:10:51.016 A:middle
This happens behind the scenes.

00:10:52.386 --> 00:10:54.106 A:middle
And so when your
app gets a callback,

00:10:54.406 --> 00:10:56.296 A:middle
it just receives
this reencrypted,

00:10:56.296 --> 00:10:59.726 A:middle
rewrapped payment data
that you can then forward


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.716 --> 00:11:04.116 A:middle
to your merchant or your
payment processor's server

00:11:04.116 --> 00:11:07.016 A:middle
and then just dismiss the sheet
once that charge has been made.

00:11:07.596 --> 00:11:11.506 A:middle
Now the flow is very
similar on the web.

00:11:11.936 --> 00:11:13.326 A:middle
There's a couple of differences

00:11:13.546 --> 00:11:16.536 A:middle
around how we actually validate
merchants, because in iOS

00:11:16.536 --> 00:11:18.536 A:middle
when you have an app, it's
an app on the App Store.

00:11:18.686 --> 00:11:19.816 A:middle
It's a signed binary.

00:11:20.586 --> 00:11:22.346 A:middle
Before we go into
that, let me just run

00:11:22.346 --> 00:11:24.656 A:middle
through a few requirements
for Apple Pay.

00:11:25.996 --> 00:11:28.046 A:middle
Apple Pay on the
web is available

00:11:28.046 --> 00:11:29.746 A:middle
to any website that
wants to use it.

00:11:30.596 --> 00:11:33.036 A:middle
But you have to have an
Apple developer account,

00:11:33.556 --> 00:11:39.416 A:middle
and your site has to
be served over HTTPS.

00:11:39.576 --> 00:11:42.896 A:middle
Finally, your site has to comply
with the Apple Pay guidelines.

00:11:43.066 --> 00:11:44.906 A:middle
Now these are very
straightforward guidelines.

00:11:44.906 --> 00:11:47.586 A:middle
Most payment processors have
similar ones about the types

00:11:47.586 --> 00:11:49.116 A:middle
of goods you can
and cannot sell.

00:11:49.686 --> 00:11:55.256 A:middle
Now some eCommerce platforms
will actually support Apple Pay

00:11:55.626 --> 00:11:57.446 A:middle
on your behalf.

00:11:57.756 --> 00:11:59.546 A:middle
We'll talk about the exact
eCommerce platforms we are

00:11:59.546 --> 00:12:02.806 A:middle
partnering with in the next
section on payment processing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.546 --> 00:12:02.806 A:middle
partnering with in the next
section on payment processing.

00:12:02.926 --> 00:12:04.936 A:middle
But if you are partnered with
those eCommerce platforms,

00:12:04.936 --> 00:12:06.566 A:middle
you won't actually need to
have a developer account;

00:12:06.596 --> 00:12:07.786 A:middle
it can be taken care of for you.

00:12:09.776 --> 00:12:12.336 A:middle
So assuming your site
is compliant with all

00:12:12.336 --> 00:12:16.726 A:middle
of these requirements, the
first step to using Apple Pay is

00:12:16.726 --> 00:12:19.706 A:middle
to register your site.

00:12:19.966 --> 00:12:21.816 A:middle
Registering your
site is really easy.

00:12:21.936 --> 00:12:24.426 A:middle
You just create a merchant
identifier and certificate

00:12:24.426 --> 00:12:25.556 A:middle
at the developer portal.

00:12:26.086 --> 00:12:29.726 A:middle
And then you register
your domain and link it

00:12:29.986 --> 00:12:31.416 A:middle
to this merchant identifier.

00:12:31.626 --> 00:12:34.776 A:middle
This is the fully qualified
domain so for example,

00:12:34.776 --> 00:12:39.236 A:middle
store.apple.com, that you want
the actual payment to happen on.

00:12:40.366 --> 00:12:41.776 A:middle
Now when you register
your domain,

00:12:41.906 --> 00:12:43.096 A:middle
we'll go off and validate it.

00:12:44.726 --> 00:12:46.706 A:middle
And you'll also obtain
a certificate back,

00:12:46.846 --> 00:12:48.886 A:middle
a TLS certificate that we issue.

00:12:49.096 --> 00:12:50.776 A:middle
And we call this the
Session certificate.

00:12:50.966 --> 00:12:52.126 A:middle
So I just want to recap.

00:12:52.126 --> 00:12:53.956 A:middle
We have got three
pieces of information

00:12:53.956 --> 00:12:55.486 A:middle
from registering for Apple Pay.

00:12:55.486 --> 00:12:57.186 A:middle
We have got our merchant
identifier

00:12:57.396 --> 00:12:58.556 A:middle
and our merchant certificate.

00:12:58.876 --> 00:13:00.306 A:middle
They identify us as a merchant.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.876 --> 00:13:00.306 A:middle
They identify us as a merchant.

00:13:00.486 --> 00:13:03.196 A:middle
And then we have the Apple
Pay Session certificate,

00:13:03.196 --> 00:13:04.576 A:middle
which identifies our domain.

00:13:04.766 --> 00:13:06.956 A:middle
And when you register
on the portal,

00:13:06.956 --> 00:13:08.496 A:middle
it's very easy, very
straightforward.

00:13:08.726 --> 00:13:09.936 A:middle
It should be enabled right now.

00:13:10.186 --> 00:13:11.266 A:middle
It looks something like this.

00:13:11.926 --> 00:13:12.896 A:middle
And just add a domain.

00:13:13.506 --> 00:13:15.896 A:middle
We validate it by checking
the presence of a file

00:13:15.896 --> 00:13:17.816 A:middle
that we ask you to
place on that domain.

00:13:18.256 --> 00:13:20.206 A:middle
And you're done.

00:13:21.786 --> 00:13:24.176 A:middle
So let's look at how
this fits into our flow.

00:13:24.176 --> 00:13:28.566 A:middle
Let's look at the Apple
Pay on the web flow.

00:13:29.226 --> 00:13:33.326 A:middle
Now just like Apple Pay within
an app, the process starts

00:13:33.426 --> 00:13:36.316 A:middle
when you press or tap the
Buy with Apple Pay button.

00:13:36.796 --> 00:13:39.546 A:middle
Now there's a key
difference on the web.

00:13:40.266 --> 00:13:43.606 A:middle
You create the payment
request; that's the object

00:13:43.606 --> 00:13:45.516 A:middle
that tells us what
you want to charge.

00:13:46.866 --> 00:13:48.576 A:middle
And then something
extra happens.

00:13:48.856 --> 00:13:50.156 A:middle
This is a piece of validation.

00:13:50.256 --> 00:13:52.106 A:middle
You create a merchant session.

00:13:52.506 --> 00:13:55.686 A:middle
And this is requested from
your web server to Apple.

00:13:57.136 --> 00:13:59.856 A:middle
It's returned back to
you, and you forward it

00:13:59.856 --> 00:14:01.446 A:middle
on with your payment request.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.856 --> 00:14:01.446 A:middle
on with your payment request.

00:14:01.926 --> 00:14:05.626 A:middle
That's the only difference.

00:14:05.726 --> 00:14:07.676 A:middle
That's the only difference
in the flow between Apple Pay

00:14:07.676 --> 00:14:10.396 A:middle
within an app and
Apple Pay on the web --

00:14:10.736 --> 00:14:12.326 A:middle
this merchant validation piece.

00:14:12.826 --> 00:14:16.126 A:middle
Let's focus a little more
on this merchant validation.

00:14:16.126 --> 00:14:21.086 A:middle
Let's talk about why we do it.

00:14:22.056 --> 00:14:24.976 A:middle
So I mentioned just a moment ago

00:14:24.976 --> 00:14:27.636 A:middle
that the web is a
little different to apps.

00:14:28.026 --> 00:14:32.076 A:middle
In an iOS app, security of
various features like Apple Pay

00:14:32.076 --> 00:14:35.216 A:middle
or Location is protected
with signed entitlements.

00:14:35.216 --> 00:14:37.216 A:middle
If you are not familiar
with those, these are pieces

00:14:37.216 --> 00:14:39.006 A:middle
of information that
are digitally signed

00:14:39.006 --> 00:14:40.396 A:middle
into your binary
in the App Store.

00:14:40.816 --> 00:14:44.976 A:middle
And this protects both
users and developers and,

00:14:44.976 --> 00:14:46.906 A:middle
in the case of Apple
Pay, merchants.

00:14:47.426 --> 00:14:49.436 A:middle
Now obviously on the web
we don't have an app store,

00:14:49.436 --> 00:14:51.126 A:middle
and we don't have
the entitlements.

00:14:51.306 --> 00:14:53.756 A:middle
So instead we have this
merchant validation process.

00:14:54.736 --> 00:14:58.226 A:middle
It protects both your users, and
it protects you as merchants.

00:14:58.406 --> 00:15:00.746 A:middle
If your site is compromised, for
example, you have an easy way


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.406 --> 00:15:00.746 A:middle
If your site is compromised, for
example, you have an easy way

00:15:00.746 --> 00:15:02.566 A:middle
to stop Apple Pay
from being used there.

00:15:03.056 --> 00:15:05.746 A:middle
Merchant validation
is really simple

00:15:05.746 --> 00:15:06.676 A:middle
and really straightforward.

00:15:06.676 --> 00:15:07.816 A:middle
It's not that tricky.

00:15:08.426 --> 00:15:10.776 A:middle
You take an Apple
Pay server URL,

00:15:11.556 --> 00:15:13.946 A:middle
and this URL is provided
from Safari.

00:15:14.486 --> 00:15:18.246 A:middle
You send this URL
to your web server,

00:15:19.556 --> 00:15:21.266 A:middle
which then requests
the merchant session.

00:15:22.846 --> 00:15:25.686 A:middle
Now to request the merchant
session you simply provide the

00:15:25.686 --> 00:15:28.236 A:middle
TLS certificate that we
generated for that domain.

00:15:28.486 --> 00:15:29.756 A:middle
It's a challenge response.

00:15:30.886 --> 00:15:33.136 A:middle
And if that certificate
looks good, if it's valid,

00:15:33.466 --> 00:15:35.126 A:middle
if it matches the domain

00:15:35.606 --> 00:15:37.296 A:middle
that you are requesting
a payment from,

00:15:37.636 --> 00:15:38.766 A:middle
we'll return a session.

00:15:41.306 --> 00:15:43.686 A:middle
Now this session is opaque.

00:15:43.686 --> 00:15:45.346 A:middle
You don't need to worry
about the contents of it.

00:15:45.606 --> 00:15:47.736 A:middle
It's basically a unique
token that's linked

00:15:47.736 --> 00:15:49.196 A:middle
with a single Apple Pay request.

00:15:49.656 --> 00:15:52.486 A:middle
And it's used to ensure that
your site is still secure.

00:15:52.856 --> 00:15:56.056 A:middle
You have to request this
for every Apple Pay payment,

00:15:56.376 --> 00:15:58.336 A:middle
but it's a very lightweight
call,

00:15:58.336 --> 00:15:59.796 A:middle
it doesn't take very
much to request it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.946 --> 00:16:02.776 A:middle
And you request it
from your web server.

00:16:03.096 --> 00:16:05.146 A:middle
You don't request
it from the client.

00:16:05.236 --> 00:16:09.956 A:middle
I have got some tips for
this merchant validation.

00:16:10.536 --> 00:16:13.506 A:middle
The first one is to always
obtain the session request URL

00:16:13.506 --> 00:16:16.126 A:middle
from the client, because
it may vary depending

00:16:16.126 --> 00:16:17.306 A:middle
on the country the user is in.

00:16:17.346 --> 00:16:19.276 A:middle
Apple Pay has many
servers worldwide,

00:16:19.496 --> 00:16:21.446 A:middle
and we'll use the one
that's closest to the user

00:16:21.446 --> 00:16:23.216 A:middle
in the region they
are currently in.

00:16:23.646 --> 00:16:25.986 A:middle
Now for some of you,
you made need to know

00:16:25.986 --> 00:16:29.556 A:middle
up front the IP addresses
because you'll need to go

00:16:29.556 --> 00:16:31.176 A:middle
through your firewalls
on your web servers.

00:16:31.176 --> 00:16:32.306 A:middle
And we'll provide a list

00:16:32.546 --> 00:16:35.166 A:middle
on developmentalapple.com
so you can do that.

00:16:36.676 --> 00:16:39.136 A:middle
You should also only request a
session where the user interacts

00:16:39.136 --> 00:16:40.036 A:middle
with the Apple Pay button.

00:16:40.126 --> 00:16:42.126 A:middle
Don't request it on every
page load; there is no need.

00:16:42.306 --> 00:16:44.356 A:middle
You only need to request it
when the user taps the button.

00:16:44.646 --> 00:16:46.876 A:middle
We actually display the
Apple Pay sheet while you are

00:16:46.876 --> 00:16:47.876 A:middle
requesting the session.

00:16:48.386 --> 00:16:50.596 A:middle
So from a user's perspective
it's instantaneous.

00:16:50.846 --> 00:16:52.616 A:middle
They tap or click
the Apple Pay button.

00:16:52.616 --> 00:16:55.146 A:middle
They'll see the sheet, and we'll
just hold it in a loading state

00:16:55.146 --> 00:16:56.716 A:middle
until this validation
is complete.

00:16:57.236 --> 00:16:59.376 A:middle
You'll see how that works in
the next section when we talk

00:16:59.376 --> 00:17:01.336 A:middle
about the JavaScript API.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.376 --> 00:17:01.336 A:middle
about the JavaScript API.

00:17:02.016 --> 00:17:05.046 A:middle
Finally, don't generate a
merchant session client-side.

00:17:05.786 --> 00:17:08.576 A:middle
That's because you have to
have this session certificate;

00:17:08.636 --> 00:17:10.546 A:middle
this certificate is
linked to your domain.

00:17:10.546 --> 00:17:12.776 A:middle
You don't want to embed that on
your web pages on your client.

00:17:12.776 --> 00:17:14.675 A:middle
It's very important
that you keep it secret.

00:17:15.695 --> 00:17:19.746 A:middle
And so you perform the
validation on your web server.

00:17:19.925 --> 00:17:21.516 A:middle
OK, let's recap.

00:17:22.016 --> 00:17:23.576 A:middle
We have got ourself set up.

00:17:23.576 --> 00:17:25.195 A:middle
We made sure that
our site complied

00:17:25.896 --> 00:17:26.866 A:middle
with Apple's requirements.

00:17:27.736 --> 00:17:29.386 A:middle
And we created our
virtual identifier

00:17:29.476 --> 00:17:30.576 A:middle
and our merchant certificate,

00:17:30.576 --> 00:17:32.556 A:middle
and we linked it
to our domain name.

00:17:33.096 --> 00:17:36.556 A:middle
And then we learned
how to validate --

00:17:36.556 --> 00:17:39.926 A:middle
how to validate our site
for every Apple Pay payment.

00:17:40.406 --> 00:17:44.916 A:middle
So that covers this
portion of the flow.

00:17:45.706 --> 00:17:47.826 A:middle
What about this portion?

00:17:49.246 --> 00:17:53.996 A:middle
I said it was the same
as Apple Pay within app.

00:17:55.036 --> 00:17:56.696 A:middle
But it's obviously
not the same API

00:17:56.836 --> 00:17:59.686 A:middle
because sadly we can't
call Swift from the web.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:00.676 --> 00:18:02.076 A:middle
And so we are going to talk now

00:18:02.076 --> 00:18:05.236 A:middle
about the new JavaScript API
that's supporting this feature.

00:18:05.696 --> 00:18:07.496 A:middle
And to do that, I'd
like to ask Anders

00:18:07.576 --> 00:18:09.436 A:middle
from the WebKit Team
onto the stage.

00:18:09.706 --> 00:18:09.976 A:middle
Anders.

00:18:10.516 --> 00:18:16.500 A:middle
[ Applause ]

00:18:19.426 --> 00:18:20.366 A:middle
&gt;&gt; Thanks Nick.

00:18:21.826 --> 00:18:24.006 A:middle
I am really excited
to be here today

00:18:24.006 --> 00:18:25.656 A:middle
and show you how easy it is

00:18:25.656 --> 00:18:29.236 A:middle
to use the Apple
Pay JavaScript API.

00:18:30.966 --> 00:18:35.576 A:middle
As Nick mentioned, the Apple
Pay JavaScript API is available

00:18:35.576 --> 00:18:39.886 A:middle
in iOS X in Safari,
as well as apps

00:18:39.886 --> 00:18:41.306 A:middle
that use SafariViewController.

00:18:42.116 --> 00:18:47.456 A:middle
And now, with Mac OS Sierra, you
can use Apple Pay on your Mac,

00:18:48.196 --> 00:18:51.936 A:middle
in Safari, using your
Apple Watch or iPhone

00:18:51.936 --> 00:18:53.546 A:middle
to do the actual authorization.

00:18:54.096 --> 00:18:57.816 A:middle
It's a relatively simple API.

00:18:57.916 --> 00:19:01.026 A:middle
It's got a single entry
point called ApplePaySession.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:57.916 --> 00:19:01.026 A:middle
It's got a single entry
point called ApplePaySession.

00:19:01.546 --> 00:19:04.066 A:middle
And it's influenced
by the PassKit API

00:19:04.066 --> 00:19:06.166 A:middle
for doing Apple Pay with an app.

00:19:06.696 --> 00:19:09.136 A:middle
So if you are familiar
with that API,

00:19:09.136 --> 00:19:10.866 A:middle
you'll notice a lot
of similarities.

00:19:13.106 --> 00:19:16.956 A:middle
Now before we dive
in, I have to tell you

00:19:16.956 --> 00:19:18.386 A:middle
about this friend of mine.

00:19:19.706 --> 00:19:25.746 A:middle
She owns a store that sells
high-end designer clothes

00:19:27.016 --> 00:19:27.896 A:middle
for dogs.

00:19:29.676 --> 00:19:33.466 A:middle
And a couple of months
ago, she launched a website

00:19:33.466 --> 00:19:35.116 A:middle
where you can buy these clothes.

00:19:35.116 --> 00:19:37.676 A:middle
You can order them
online and pay for them

00:19:37.706 --> 00:19:39.186 A:middle
and have them shipped
to your door.

00:19:40.426 --> 00:19:45.076 A:middle
But unfortunately business
has been a little rough.

00:19:47.996 --> 00:19:52.616 A:middle
She's getting a lot of traffic
to the website, but not a lot

00:19:52.616 --> 00:19:54.526 A:middle
of actual orders go through.

00:19:55.016 --> 00:19:57.456 A:middle
So let's take a look
at the website and see

00:19:57.456 --> 00:19:58.716 A:middle
if we can figure out why.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:02.236 --> 00:20:03.916 A:middle
So this is our website.

00:20:04.266 --> 00:20:07.996 A:middle
And let's say I want to
buy this lovely scarf here.

00:20:09.156 --> 00:20:13.436 A:middle
Well first I have to
add it to my cart.

00:20:15.696 --> 00:20:17.076 A:middle
Then I have to check out.

00:20:18.956 --> 00:20:20.906 A:middle
Then I'm at the Checkout page,

00:20:20.906 --> 00:20:23.306 A:middle
and I have to enter
my shipping address.

00:20:23.796 --> 00:20:27.446 A:middle
And then I have to go
and get my credit card

00:20:27.446 --> 00:20:30.386 A:middle
and enter the credit card
number and billing address.

00:20:31.836 --> 00:20:37.096 A:middle
And then I can place my order,
and my scarf will be on its way.

00:20:38.496 --> 00:20:41.516 A:middle
So let's see how we can
use the Apple Pay API

00:20:41.676 --> 00:20:45.156 A:middle
to make this process
simpler and more streamlined.

00:20:46.306 --> 00:20:50.296 A:middle
For example, what if we could
take this Add To Cart button

00:20:50.466 --> 00:20:54.586 A:middle
and supplement it with
an Apple Pay button

00:20:54.806 --> 00:20:59.926 A:middle
so that you can place orders
right on the main product page?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.166 --> 00:21:03.606 A:middle
Now we only want to display
this button if we know

00:21:03.606 --> 00:21:06.056 A:middle
that the user can actually
make payments with Apple Pay.

00:21:06.526 --> 00:21:08.606 A:middle
So in order to do that,

00:21:08.716 --> 00:21:12.596 A:middle
we can use the function
ApplePaySession.canMakePayments.

00:21:13.516 --> 00:21:15.386 A:middle
This is a pretty
simple function to use.

00:21:15.576 --> 00:21:17.136 A:middle
This is how it would
look like in code.

00:21:17.676 --> 00:21:21.026 A:middle
Note here that I am
checking for the existence

00:21:21.026 --> 00:21:25.146 A:middle
of the window.ApplePaySession
object before I try to use it.

00:21:25.146 --> 00:21:26.796 A:middle
So I am not checking

00:21:26.796 --> 00:21:30.106 A:middle
for a specific version
of WebKit or Safari.

00:21:30.106 --> 00:21:32.566 A:middle
I am just checking for the
existence of the object.

00:21:33.466 --> 00:21:35.316 A:middle
And if it exists, I call it --

00:21:35.316 --> 00:21:38.356 A:middle
it returns a boolean and
I check the return value.

00:21:38.776 --> 00:21:42.396 A:middle
If it returns true, I call this
function showApplePayButtons.

00:21:43.066 --> 00:21:44.206 A:middle
And that will show the button.

00:21:45.396 --> 00:21:47.706 A:middle
It's important to note, though,

00:21:47.706 --> 00:21:50.986 A:middle
that this function only tells
you whether Apple Pay is

00:21:50.986 --> 00:21:52.466 A:middle
supported by the device.

00:21:53.026 --> 00:21:55.856 A:middle
So if you are on an
iPhone or an iPad,

00:21:56.076 --> 00:21:58.276 A:middle
it'll tell you whether
it has a secure element.

00:21:58.866 --> 00:22:00.206 A:middle
And if you are on a Mac,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.866 --> 00:22:00.206 A:middle
And if you are on a Mac,

00:22:00.356 --> 00:22:03.666 A:middle
it'll tell you whether there
is an iPhone or Apple Watch

00:22:04.026 --> 00:22:05.436 A:middle
that can authorize the payment.

00:22:06.166 --> 00:22:09.746 A:middle
It does not tell you whether
the user has a card added.

00:22:10.476 --> 00:22:12.126 A:middle
So in order to check for that,

00:22:12.696 --> 00:22:16.486 A:middle
we can use the function
ApplePaySession.canMakePayments

00:22:16.486 --> 00:22:17.446 A:middle
WithActiveCard.

00:22:19.016 --> 00:22:22.536 A:middle
You pass this function,
your merchant identifier.

00:22:23.096 --> 00:22:27.826 A:middle
And it actually goes out to the
Apple Pay servers and validates

00:22:27.856 --> 00:22:30.146 A:middle
that the merchant
identifier is correct

00:22:30.516 --> 00:22:33.816 A:middle
and that it's properly
associated with the domain

00:22:33.816 --> 00:22:35.206 A:middle
where you are making
the call from.

00:22:36.496 --> 00:22:38.436 A:middle
Because of this,
it is asynchronous

00:22:38.466 --> 00:22:40.616 A:middle
and returns a JavaScript
promise.

00:22:41.666 --> 00:22:44.566 A:middle
Now if you don't know what
a JavaScript promise is,

00:22:44.566 --> 00:22:47.276 A:middle
you can just think of
it as a more robust way

00:22:47.276 --> 00:22:49.906 A:middle
of doing callback-based
programming.

00:22:51.016 --> 00:22:54.696 A:middle
There are also some
restrictions as to

00:22:54.696 --> 00:22:56.176 A:middle
when you can use this function.

00:22:56.276 --> 00:22:58.186 A:middle
You can use it if
you want to default

00:22:58.186 --> 00:23:01.756 A:middle
to Apple Pay during your
checkout flow or if you want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.186 --> 00:23:01.756 A:middle
to Apple Pay during your
checkout flow or if you want

00:23:01.826 --> 00:23:04.346 A:middle
to add an Apple Pay button
to your product page.

00:23:04.736 --> 00:23:07.296 A:middle
Now in our case we want
to add an Apple Pay button

00:23:07.296 --> 00:23:10.056 A:middle
to our main product page,
so we can use this function.

00:23:10.366 --> 00:23:13.816 A:middle
Otherwise we would have used
ApplePaySession.canMakePayments.

00:23:14.766 --> 00:23:17.506 A:middle
But here is how we
use the function.

00:23:18.146 --> 00:23:20.096 A:middle
Again, I am checking
for the existence

00:23:20.136 --> 00:23:21.706 A:middle
of the Apple Pay session object.

00:23:22.816 --> 00:23:25.446 A:middle
Then I call canMakePayments
WithActiveCard.

00:23:25.786 --> 00:23:27.646 A:middle
I tap in my merchant identifier.

00:23:28.246 --> 00:23:32.406 A:middle
And then I use this
promise.then function so that

00:23:32.546 --> 00:23:35.536 A:middle
when the promise is resolved,
in this case it's resolved

00:23:35.536 --> 00:23:37.176 A:middle
to a boolean that's
true or false,

00:23:37.746 --> 00:23:40.616 A:middle
the function I specified
inside will be called.

00:23:40.926 --> 00:23:44.466 A:middle
And if canMakePayments is true,
I call showApplePayButton.

00:23:44.466 --> 00:23:49.216 A:middle
So now we've got our
nice-looking buttons

00:23:49.216 --> 00:23:51.216 A:middle
for every single
product on the page.

00:23:51.726 --> 00:23:54.296 A:middle
And the next step is to
present the payment sheet

00:23:54.666 --> 00:23:56.116 A:middle
when the user clicks
on the button.

00:23:56.686 --> 00:23:59.266 A:middle
So in order to do that,

00:23:59.696 --> 00:24:01.686 A:middle
we'll create a new
ApplePaySession


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.696 --> 00:24:01.686 A:middle
we'll create a new
ApplePaySession

00:24:01.686 --> 00:24:02.796 A:middle
JavaScript object.

00:24:03.206 --> 00:24:07.286 A:middle
The ApplePaySession constructor
takes two parameters.

00:24:07.746 --> 00:24:10.296 A:middle
One is an API version number.

00:24:10.996 --> 00:24:12.386 A:middle
This is something
that we've added

00:24:12.386 --> 00:24:15.016 A:middle
so that we can extend
the ApplePaySession API

00:24:15.166 --> 00:24:17.526 A:middle
in a backwards-compatible way

00:24:17.856 --> 00:24:19.576 A:middle
without breaking
existing clients.

00:24:20.426 --> 00:24:25.896 A:middle
The current API version number
is 1 so just always has 1.

00:24:27.636 --> 00:24:31.326 A:middle
The second parameter you pass
in is the payment request.

00:24:31.906 --> 00:24:34.076 A:middle
If you are familiar
with the PassKit API,

00:24:34.076 --> 00:24:36.136 A:middle
this is the JavaScript
equivalent

00:24:36.136 --> 00:24:37.746 A:middle
of a PKPaymentRequest.

00:24:38.486 --> 00:24:41.266 A:middle
So it then takes all the
necessary information needed

00:24:41.266 --> 00:24:44.976 A:middle
to display the sheet, things
like currency and country

00:24:44.976 --> 00:24:48.686 A:middle
where the payment will be
processed, the total amount,

00:24:48.876 --> 00:24:54.096 A:middle
and optional list of line items,
as well as shipping information

00:24:54.096 --> 00:24:55.086 A:middle
that might be required.

00:24:55.896 --> 00:24:59.326 A:middle
And then when you get back your
new ApplePaySession object,

00:24:59.586 --> 00:25:01.976 A:middle
you simply call Begin and
that'll present the sheet.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.586 --> 00:25:01.976 A:middle
you simply call Begin and
that'll present the sheet.

00:25:02.046 --> 00:25:06.476 A:middle
This is what it looks
like in JavaScript code.

00:25:06.906 --> 00:25:10.076 A:middle
So first we declare our
paymentRequest object.

00:25:10.756 --> 00:25:13.836 A:middle
We specify the currencyCode
and countryCode.

00:25:14.976 --> 00:25:17.796 A:middle
And here I specified
the total amount

00:25:18.516 --> 00:25:21.926 A:middle
and the supported
card networks as well

00:25:21.926 --> 00:25:23.486 A:middle
as the merchant capabilities.

00:25:24.056 --> 00:25:28.926 A:middle
And lastly, I specified that
I need the full postal address

00:25:29.176 --> 00:25:30.766 A:middle
for shipping purposes.

00:25:31.316 --> 00:25:35.106 A:middle
And then I simply create
my new ApplePaySession.

00:25:35.286 --> 00:25:37.446 A:middle
I pass in the merchant
number, which is 1,

00:25:37.766 --> 00:25:39.086 A:middle
and the payment request.

00:25:39.626 --> 00:25:45.486 A:middle
And I call sessions up again
on the returned object.

00:25:45.636 --> 00:25:49.726 A:middle
Now with any payment API,
it's really important

00:25:49.726 --> 00:25:52.116 A:middle
that we get all the
details right.

00:25:52.436 --> 00:26:00.086 A:middle
And because of this, before we
present the sheet we perform a


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:52.436 --> 00:26:00.086 A:middle
And because of this, before we
present the sheet we perform a

00:26:00.086 --> 00:26:01.926 A:middle
series of validation steps.

00:26:02.796 --> 00:26:07.696 A:middle
And if any of these
steps fail, we'll stop

00:26:07.696 --> 00:26:09.386 A:middle
and just throw a
JavaScript exception.

00:26:09.876 --> 00:26:14.446 A:middle
And because of this, creating
an Apple Pay session can throw a

00:26:14.446 --> 00:26:15.586 A:middle
JavaScript exception.

00:26:16.056 --> 00:26:19.176 A:middle
For example, if you call
in from an insecure page,

00:26:19.586 --> 00:26:21.306 A:middle
a page that it's not served

00:26:21.306 --> 00:26:26.056 A:middle
over HTTPS using the best
practice encryption protocols.

00:26:27.116 --> 00:26:31.746 A:middle
In fact, every single Apple
Pay session API will throw an

00:26:31.746 --> 00:26:34.906 A:middle
exception if you try to call
it from an insecure web page.

00:26:37.156 --> 00:26:40.306 A:middle
Creating an Apple Pay session
can also throw an exception

00:26:40.306 --> 00:26:42.696 A:middle
if you pass in an
invalid payment request.

00:26:43.156 --> 00:26:45.776 A:middle
For example, if you
didn't specify the list

00:26:45.776 --> 00:26:49.976 A:middle
of supported networks, or
if you have a total amount

00:26:49.976 --> 00:26:51.366 A:middle
that is negative, for example,

00:26:51.796 --> 00:26:54.396 A:middle
or if you spell the
property wrong

00:26:54.396 --> 00:26:56.326 A:middle
so that it's something
we don't recognize,

00:26:56.696 --> 00:26:57.786 A:middle
that will throw an exception.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:00.236 --> 00:27:04.956 A:middle
In addition, calling Begin can
throw an exception if you call

00:27:04.956 --> 00:27:07.106 A:middle
in -- try to call
it in from outside

00:27:07.106 --> 00:27:09.496 A:middle
of an onclick handler,
for example.

00:27:10.006 --> 00:27:13.736 A:middle
We do not allow displaying
the sheet unless the user has

00:27:13.736 --> 00:27:15.366 A:middle
explicitly asked for it

00:27:15.366 --> 00:27:19.026 A:middle
to be presented using
a click or a tap.

00:27:19.426 --> 00:27:23.056 A:middle
Or if there is already a sheet
up, and we try to call Begin,

00:27:23.366 --> 00:27:24.906 A:middle
we'll throw a JavaScript
exception

00:27:25.616 --> 00:27:28.786 A:middle
because we only allow showing
a single sheet at a time.

00:27:29.766 --> 00:27:33.346 A:middle
And if you get one
of these errors,

00:27:33.826 --> 00:27:37.486 A:middle
you can use the Web
Inspector's Error Console

00:27:37.796 --> 00:27:40.616 A:middle
to get a more detailed look
at what could be wrong.

00:27:42.816 --> 00:27:50.536 A:middle
But if everything is good and
all the steps are correct,

00:27:50.906 --> 00:27:52.496 A:middle
we'll display the sheet.

00:27:53.646 --> 00:27:57.706 A:middle
But notice that you can't
actually confirm the payment

00:27:57.706 --> 00:28:00.456 A:middle
yet; we have this
loading spinner going.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.706 --> 00:28:00.456 A:middle
yet; we have this
loading spinner going.

00:28:00.896 --> 00:28:02.096 A:middle
And that's because we haven't

00:28:02.096 --> 00:28:04.096 A:middle
yet handled the merchant
validation

00:28:04.126 --> 00:28:05.346 A:middle
that Nick mentioned earlier.

00:28:06.046 --> 00:28:09.876 A:middle
So shortly after the
sheet is presented,

00:28:10.136 --> 00:28:12.966 A:middle
we will send a validateherchant
DOM event

00:28:13.096 --> 00:28:14.656 A:middle
to the ApplePaySession object.

00:28:15.536 --> 00:28:18.906 A:middle
This DOM event has a
validationURL property,

00:28:19.366 --> 00:28:22.576 A:middle
and this is the URL that
you pass to your server

00:28:22.576 --> 00:28:26.136 A:middle
and have it load to create
the merchant session.

00:28:27.006 --> 00:28:29.916 A:middle
And then when you get back
your merchantsession object

00:28:30.206 --> 00:28:34.106 A:middle
from your server, you simply
call completeMerchantValidation,

00:28:34.406 --> 00:28:36.506 A:middle
pass in the session,
and you're good to go.

00:28:37.706 --> 00:28:40.636 A:middle
Here is what a validatemerchant
event handler looks like.

00:28:42.456 --> 00:28:45.136 A:middle
So here I call this
performvalidation function

00:28:45.136 --> 00:28:45.906 A:middle
that I have written.

00:28:46.256 --> 00:28:49.416 A:middle
It returns a promise,
and the promise resolves

00:28:49.416 --> 00:28:51.216 A:middle
to the merchant session.

00:28:51.756 --> 00:28:53.356 A:middle
So when the promise is resolved,

00:28:53.716 --> 00:28:56.036 A:middle
I simply call
completemerchantvalidation,

00:28:56.336 --> 00:28:57.876 A:middle
I pass in the merchant session,

00:28:58.036 --> 00:28:59.626 A:middle
And that's how you do
merchant validation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:00.556 --> 00:29:04.656 A:middle
So now, when merchant
validation is done,

00:29:04.786 --> 00:29:06.846 A:middle
the user can authorize
the payment

00:29:06.846 --> 00:29:09.176 A:middle
on their phone or
their Apple Watch.

00:29:09.566 --> 00:29:12.456 A:middle
And when the payment
is authorized,

00:29:12.676 --> 00:29:15.256 A:middle
we'll send a paymentauthorized
DOM event

00:29:15.506 --> 00:29:16.986 A:middle
to the Apple Pay session.

00:29:18.606 --> 00:29:20.986 A:middle
This DOM event contains
a payment property

00:29:21.446 --> 00:29:24.516 A:middle
that has all the necessary
information about the payment.

00:29:24.996 --> 00:29:27.836 A:middle
So it's got things like
the full shipping address,

00:29:28.316 --> 00:29:31.756 A:middle
information about the
payment network that was used

00:29:31.756 --> 00:29:35.846 A:middle
to make the payment; and it's
got the encrypted payment token

00:29:35.846 --> 00:29:38.586 A:middle
itself that you send to
your payment processor.

00:29:40.036 --> 00:29:44.706 A:middle
And when you have sent that and
the payment has been processed,

00:29:45.406 --> 00:29:48.276 A:middle
and you get back a reply,
you call completePayment

00:29:48.436 --> 00:29:51.926 A:middle
and that will dismiss
the sheet, like this.

00:29:52.956 --> 00:29:56.046 A:middle
So here we have a
paymentauthorized event handler.

00:29:57.146 --> 00:29:58.826 A:middle
I call sendPaymentToken.

00:29:58.826 --> 00:29:59.976 A:middle
I pass in the token.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.726 --> 00:30:04.346 A:middle
And this returns a promise
that resolves through boolean

00:30:04.916 --> 00:30:06.776 A:middle
that is either true
or false based

00:30:06.776 --> 00:30:10.736 A:middle
on whether the payment was
processed successfully or not.

00:30:11.306 --> 00:30:13.746 A:middle
So if it's true, I set my status

00:30:13.796 --> 00:30:16.276 A:middle
to ApplePaySession.STATUS
SUCCESS.

00:30:17.226 --> 00:30:20.106 A:middle
If it's false, for example, if
the payment didn't go through,

00:30:20.586 --> 00:30:23.646 A:middle
I set my status to
ApplePaySession.STATUS FAILURE.

00:30:25.026 --> 00:30:27.076 A:middle
Then I call completePayment.

00:30:27.076 --> 00:30:30.106 A:middle
I pass in the status, which
will dismiss the sheet.

00:30:30.456 --> 00:30:32.786 A:middle
And then I call this
showConfirmation function,

00:30:32.786 --> 00:30:36.436 A:middle
which will show a nice little
order confirmation pop-up.

00:30:36.436 --> 00:30:38.816 A:middle
And when you call
completePayment and pass

00:30:38.816 --> 00:30:41.806 A:middle
in Success, you get
this nice check mark

00:30:42.016 --> 00:30:44.166 A:middle
and the sheet will be dismissed.

00:30:45.066 --> 00:30:49.336 A:middle
OK. So now let's take a
look at a demo and see how

00:30:49.336 --> 00:30:49.976 A:middle
to do all of these things.

00:30:57.096 --> 00:30:59.216 A:middle
Here we go.

00:30:59.446 --> 00:31:02.646 A:middle
So first of all,
this is the website.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.446 --> 00:31:02.646 A:middle
So first of all,
this is the website.

00:31:04.546 --> 00:31:07.506 A:middle
And now let's take a
look at the source code.

00:31:08.046 --> 00:31:12.066 A:middle
But before we start adding
JavaScript, I'd like to point

00:31:12.066 --> 00:31:13.246 A:middle
out a couple of things.

00:31:13.686 --> 00:31:16.726 A:middle
Here I have added
these touch icons.

00:31:17.206 --> 00:31:20.756 A:middle
These are used in the Safari
Favorites view, for example;

00:31:20.756 --> 00:31:25.066 A:middle
but they are also used in the
Apple Pay authorization sheet,

00:31:25.116 --> 00:31:26.096 A:middle
which we will see later.

00:31:27.636 --> 00:31:30.276 A:middle
And here I have listed
all the products,

00:31:30.316 --> 00:31:33.636 A:middle
and I have actually gone ahead
and added the Apple Pay buttons.

00:31:33.636 --> 00:31:36.486 A:middle
I am just keeping them
invisible with CSS.

00:31:36.486 --> 00:31:40.576 A:middle
So let's take a look at that.

00:31:40.686 --> 00:31:42.866 A:middle
Here is my CSS, and
this is the declaration

00:31:42.866 --> 00:31:44.046 A:middle
for the Apple Pay button.

00:31:44.476 --> 00:31:47.416 A:middle
So I set this visibility
to hidden here.

00:31:47.886 --> 00:31:50.066 A:middle
And for the actual image itself,

00:31:50.066 --> 00:31:52.556 A:middle
I am using this
WebKit-named-image feature

00:31:52.846 --> 00:31:56.166 A:middle
so we can grab the Apple Pay
logo directly from the system

00:31:56.166 --> 00:31:58.216 A:middle
so you don't have to
host it on your website.

00:31:59.466 --> 00:32:01.816 A:middle
OK. So the first thing we want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.466 --> 00:32:01.816 A:middle
OK. So the first thing we want

00:32:01.816 --> 00:32:05.716 A:middle
to do now is add the code
that'll display the buttons

00:32:05.766 --> 00:32:07.806 A:middle
if Apple Pay is enabled.

00:32:08.686 --> 00:32:11.806 A:middle
So I have already started
writing some code here.

00:32:11.806 --> 00:32:15.246 A:middle
I have created an EventListener
for the DOMContentLoaded event.

00:32:15.726 --> 00:32:16.906 A:middle
This event is dispatched

00:32:16.906 --> 00:32:18.896 A:middle
when the main document
is finished loading

00:32:18.896 --> 00:32:21.206 A:middle
but before any remaining images

00:32:21.206 --> 00:32:22.976 A:middle
from other resources
have been loaded.

00:32:22.976 --> 00:32:24.356 A:middle
So it's a good place to do that.

00:32:24.896 --> 00:32:27.186 A:middle
So let me add the
code to do that.

00:32:27.906 --> 00:32:29.686 A:middle
Again, I am checking
for the existence

00:32:29.686 --> 00:32:31.536 A:middle
of the ApplePaySession object.

00:32:31.696 --> 00:32:33.896 A:middle
Then I call
canMakePaymentsWithActiveCard.

00:32:34.526 --> 00:32:37.986 A:middle
And inside my promise function,
I check the return value,

00:32:37.986 --> 00:32:40.396 A:middle
and if it's true I call
showApplePayButton.

00:32:41.026 --> 00:32:43.656 A:middle
So I -- let me save
and go back here.

00:32:44.066 --> 00:32:44.806 A:middle
And we load.

00:32:44.846 --> 00:32:46.836 A:middle
And now we got our
Apple Pay buttons.

00:32:47.766 --> 00:32:50.946 A:middle
So the next step is
to show the sheets

00:32:50.946 --> 00:32:52.616 A:middle
when a user clicks on a button.

00:32:52.616 --> 00:32:55.746 A:middle
So I have written this
applePayButtonClicked function

00:32:56.226 --> 00:32:59.856 A:middle
that is invoked whenever
the user clicks on a button.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.526 --> 00:33:04.766 A:middle
So here is where we want to add
our code to present the sheet.

00:33:05.416 --> 00:33:08.716 A:middle
So again I have declared my
paymentRequest object here.

00:33:08.716 --> 00:33:12.156 A:middle
I have hard-coded the amounts
here and, since this is a demo,

00:33:12.156 --> 00:33:16.206 A:middle
but in real life we would
get this from somewhere else.

00:33:16.466 --> 00:33:19.376 A:middle
And I then create my new
ApplePaySession object,

00:33:19.376 --> 00:33:20.456 A:middle
and I call Begin.

00:33:20.576 --> 00:33:24.616 A:middle
So let me save and reload
and present the sheet.

00:33:28.296 --> 00:33:31.306 A:middle
OK. So it looks like
the sheet did not show.

00:33:31.306 --> 00:33:35.046 A:middle
So let me open the Error console
and try to figure out why.

00:33:37.366 --> 00:33:38.596 A:middle
OK, so it says that

00:33:38.596 --> 00:33:41.596 A:middle
"supportednetwork" is not
a valid property name.

00:33:41.646 --> 00:33:44.236 A:middle
And it looks like I
misspelled "supported" here.

00:33:44.696 --> 00:33:50.906 A:middle
So let me just go back
and fix that and reload.

00:33:52.576 --> 00:33:54.026 A:middle
And now we have the sheet.

00:33:54.646 --> 00:33:57.276 A:middle
But I can still not
confirm the payment

00:33:57.356 --> 00:33:59.566 A:middle
because I haven't handled
the merchant validation.

00:33:59.956 --> 00:34:03.536 A:middle
So let's go ahead and do that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.956 --> 00:34:03.536 A:middle
So let's go ahead and do that.

00:34:03.736 --> 00:34:06.586 A:middle
So I want to add my
validateMerchant event handler.

00:34:06.586 --> 00:34:09.606 A:middle
And I'll do it here after
we have created the session

00:34:09.846 --> 00:34:11.315 A:middle
but before we call Begin.

00:34:11.886 --> 00:34:14.166 A:middle
And again I call
performValidation.

00:34:14.596 --> 00:34:18.116 A:middle
And when the promise that this
function returns is resolved,

00:34:18.536 --> 00:34:20.356 A:middle
I call
completeMerchantValidation.

00:34:20.396 --> 00:34:21.956 A:middle
I pass in my merchant session.

00:34:22.436 --> 00:34:28.356 A:middle
And then I should be able
to confirm the payment.

00:34:28.766 --> 00:34:29.896 A:middle
And the last thing we need

00:34:29.896 --> 00:34:33.206 A:middle
to do now is add our
payment authorization code.

00:34:34.556 --> 00:34:40.356 A:middle
And this will send the
payment token to the server

00:34:40.856 --> 00:34:42.866 A:middle
and confirm the payment.

00:34:42.866 --> 00:34:45.795 A:middle
And if we are successful,
I set my status to SUCCESS;

00:34:46.286 --> 00:34:47.735 A:middle
otherwise I set it to FAILURE.

00:34:48.126 --> 00:34:51.286 A:middle
And then I call completePayment
and showConfirmation.

00:34:51.636 --> 00:34:56.636 A:middle
So now I want to
bring up QuickTime

00:34:56.636 --> 00:34:59.976 A:middle
so we can actually see what this
looks like on the phone as well.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:00.166 --> 00:35:04.066 A:middle
So let me reload, and I hit Pay.

00:35:05.166 --> 00:35:06.476 A:middle
And now I can confirm.

00:35:06.476 --> 00:35:09.546 A:middle
And as you can see, I get
this little site icon.

00:35:09.546 --> 00:35:12.206 A:middle
That's because I added
those link icon attributes.

00:35:12.876 --> 00:35:16.146 A:middle
And now I can pay
and we're done.

00:35:16.636 --> 00:35:17.976 A:middle
And the scarf is on its way.

00:35:21.516 --> 00:35:27.906 A:middle
[ Applause ]

00:35:28.406 --> 00:35:32.016 A:middle
So that's how easy it is to
add Apple Pay to a website.

00:35:32.666 --> 00:35:35.816 A:middle
And I think that
with these changes,

00:35:36.386 --> 00:35:39.546 A:middle
Canine Clothing sales are really
going to be through the woof.

00:35:40.086 --> 00:35:40.946 A:middle
Back to you, Nick.

00:35:41.516 --> 00:35:46.846 A:middle
[ Applause ]

00:35:47.346 --> 00:35:49.956 A:middle
&gt;&gt; You know all this -- I
think whoever on WebKit came

00:35:49.956 --> 00:35:52.136 A:middle
up with all those dog
puns should be thrown

00:35:52.136 --> 00:35:53.136 A:middle
in the doghouse.

00:35:54.286 --> 00:35:56.126 A:middle
Aw, come on.

00:35:56.126 --> 00:35:56.806 A:middle
Throw me a bone.

00:35:59.306 --> 00:36:00.776 A:middle
I'm wasted in software
engineering.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.306 --> 00:36:00.776 A:middle
I'm wasted in software
engineering.

00:36:01.306 --> 00:36:01.936 A:middle
All right.

00:36:02.036 --> 00:36:08.476 A:middle
So we have seen how to build
our sites to enable Apple Pay.

00:36:08.716 --> 00:36:11.176 A:middle
Let's talk about something
that's probably very important

00:36:11.176 --> 00:36:11.476 A:middle
to you.

00:36:11.736 --> 00:36:13.256 A:middle
That's how you'll
actually get paid,

00:36:13.386 --> 00:36:16.476 A:middle
how to get some money
from Apple Pay.

00:36:16.916 --> 00:36:21.886 A:middle
So Anders covered these steps up
to receiving the payment data.

00:36:22.426 --> 00:36:24.246 A:middle
What happens next?

00:36:25.856 --> 00:36:29.346 A:middle
Well you have two options,
really, with the payment token.

00:36:29.896 --> 00:36:35.086 A:middle
The first option is to decrypt
the payment token yourself

00:36:35.086 --> 00:36:36.876 A:middle
on your own servers.

00:36:38.236 --> 00:36:40.606 A:middle
That's a good option if you
are already using Apple Pay

00:36:40.606 --> 00:36:42.836 A:middle
or you have a very large
eCommerce back end.

00:36:42.896 --> 00:36:45.186 A:middle
You're familiar with the
cryptography involved.

00:36:45.186 --> 00:36:46.846 A:middle
It is documented, though,
on our developer site.

00:36:47.576 --> 00:36:50.306 A:middle
But another option
that's a little easier is

00:36:50.306 --> 00:36:52.406 A:middle
to just pass this
encrypted payment data

00:36:52.706 --> 00:36:56.486 A:middle
to your payment provider, and
they can decrypt it for you

00:36:56.486 --> 00:36:58.866 A:middle
on your behalf if you
provide them with the keys.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.456 --> 00:37:02.216 A:middle
This is a really easy option,

00:37:02.216 --> 00:37:05.246 A:middle
and many payment
processors today offer SDKs

00:37:05.246 --> 00:37:06.856 A:middle
to do this in-app.

00:37:06.856 --> 00:37:07.986 A:middle
We are highly confident

00:37:07.986 --> 00:37:10.236 A:middle
that these payment processors
will be offering similar

00:37:10.236 --> 00:37:12.316 A:middle
JavaScript-based SDKs;

00:37:12.316 --> 00:37:14.636 A:middle
these integrate directly
into your websites.

00:37:15.456 --> 00:37:18.476 A:middle
In fact, in the U.S. and Europe

00:37:18.476 --> 00:37:22.036 A:middle
over 40 payment processors
support Apple Pay today --

00:37:22.086 --> 00:37:23.886 A:middle
too many for me to
put on a site.

00:37:24.276 --> 00:37:26.736 A:middle
But there's a full list
on developer.apple.com.

00:37:28.176 --> 00:37:31.026 A:middle
And as I said, many of these
providers offer SDKs today

00:37:31.026 --> 00:37:33.506 A:middle
for in-app; and they'll
be offering SDKs

00:37:33.506 --> 00:37:34.246 A:middle
for the web as well.

00:37:35.516 --> 00:37:39.116 A:middle
I also want to highlight
some new payment processors.

00:37:39.326 --> 00:37:41.886 A:middle
As you may know, Apple
Pay launched in China.

00:37:41.886 --> 00:37:44.366 A:middle
And of course this feature
works in China as well

00:37:44.366 --> 00:37:45.356 A:middle
as in the U.S. and Europe.

00:37:45.676 --> 00:37:47.716 A:middle
And we have four payment
processors in China

00:37:47.956 --> 00:37:49.496 A:middle
that support Apple Pay.

00:37:49.776 --> 00:37:53.856 A:middle
They are China UMS, LianLianPay,
PayEase, and YeePay.

00:37:54.126 --> 00:37:56.306 A:middle
So if you are looking to
distribute an app or a site

00:37:56.306 --> 00:37:58.716 A:middle
in Asia, you have got great
support there as well.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:00.666 --> 00:38:04.736 A:middle
Now one thing I mentioned at the
start is eCommerce platforms.

00:38:05.416 --> 00:38:08.316 A:middle
Many sites don't build
their own eCommerce systems.

00:38:08.316 --> 00:38:11.866 A:middle
They use the platforms provided
by an eCommerce provider.

00:38:12.366 --> 00:38:13.196 A:middle
And we are partnering

00:38:13.196 --> 00:38:16.016 A:middle
with multiple eCommerce
platforms today.

00:38:16.426 --> 00:38:18.466 A:middle
We are partnering with
three major platforms.

00:38:18.786 --> 00:38:20.626 A:middle
They are Demandware,
IBM, and Shopify.

00:38:20.626 --> 00:38:25.036 A:middle
And if you are using any
of these three platforms,

00:38:25.036 --> 00:38:28.016 A:middle
you will be able to use
Apple Pay, and in many cases,

00:38:28.016 --> 00:38:30.386 A:middle
you will be able to use
Apple Pay without even having

00:38:30.386 --> 00:38:31.576 A:middle
to have a developer account.

00:38:32.456 --> 00:38:34.946 A:middle
These platforms can
make that easy for you.

00:38:34.946 --> 00:38:36.846 A:middle
They can handle all
of this process

00:38:36.846 --> 00:38:38.976 A:middle
with their deep Apple
Pay integration.

00:38:43.266 --> 00:38:45.166 A:middle
Now you are probably
pretty desperate

00:38:45.166 --> 00:38:46.066 A:middle
to go off and try this.

00:38:46.066 --> 00:38:46.666 A:middle
I hope you are.

00:38:47.606 --> 00:38:50.066 A:middle
I want to talk a
bit about testing.

00:38:51.386 --> 00:38:53.736 A:middle
So testing your sites:

00:38:54.046 --> 00:38:55.816 A:middle
We are introducing a
new testing environment

00:38:55.816 --> 00:38:58.306 A:middle
for Apple Pay called
the Apple Pay Sandbox.

00:38:58.826 --> 00:39:00.856 A:middle
It's a new way to test.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:58.826 --> 00:39:00.856 A:middle
It's a new way to test.

00:39:00.856 --> 00:39:03.886 A:middle
And initially Apple Pay for
the web will be available

00:39:03.936 --> 00:39:05.046 A:middle
within this sandbox.

00:39:05.746 --> 00:39:07.446 A:middle
Now if you'd like
more information,

00:39:07.536 --> 00:39:09.366 A:middle
we don't quite have enough
time in this session.

00:39:09.616 --> 00:39:12.026 A:middle
But you can check the
session right after this one;

00:39:12.026 --> 00:39:13.726 A:middle
we are going to be
talking about the Sandbox.

00:39:13.876 --> 00:39:16.476 A:middle
Or if you go to our site
at developer.apple.com,

00:39:16.726 --> 00:39:18.606 A:middle
we have some information
about how

00:39:18.606 --> 00:39:19.836 A:middle
to use the Apple Pay Sandbox.

00:39:20.026 --> 00:39:21.986 A:middle
But for the initial seeds,
that's how you'll be able

00:39:21.986 --> 00:39:23.296 A:middle
to test Apple Pay on the web.

00:39:23.586 --> 00:39:25.626 A:middle
Then we'll roll it out into
our production environments

00:39:25.826 --> 00:39:28.946 A:middle
as we near the release of
iOS X and Mac OS Sierra.

00:39:36.856 --> 00:39:39.836 A:middle
Now also, when testing
and developing your sites,

00:39:39.836 --> 00:39:43.456 A:middle
please give us some feedback,
[inaudible] some bugs.

00:39:43.736 --> 00:39:46.926 A:middle
We really want to hear about
all the issues you are having

00:39:46.926 --> 00:39:48.346 A:middle
and all the great
things you're seeing.

00:39:48.346 --> 00:39:49.416 A:middle
If you just have compliments,

00:39:49.466 --> 00:39:51.276 A:middle
I'd love to receive
those as well.

00:39:52.416 --> 00:39:59.116 A:middle
OK. Let's talk about the final
piece: Designing for Apple Pay.

00:39:59.556 --> 00:40:02.976 A:middle
How to build a compelling
experience for your websites.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.556 --> 00:40:02.976 A:middle
How to build a compelling
experience for your websites.

00:40:03.176 --> 00:40:06.716 A:middle
And a lot of these tips are
applicable to apps as well.

00:40:07.276 --> 00:40:10.826 A:middle
At the start of this
session I talked

00:40:10.826 --> 00:40:15.456 A:middle
about how Apple Pay has three
main principles: They're easy,

00:40:15.646 --> 00:40:18.466 A:middle
secure, and private way to pay.

00:40:19.006 --> 00:40:21.846 A:middle
And your designs
should reflect that.

00:40:22.476 --> 00:40:23.686 A:middle
They shouldn't make
it complicated.

00:40:23.726 --> 00:40:26.276 A:middle
They shouldn't make it
hard to use Apple Pay.

00:40:26.816 --> 00:40:29.576 A:middle
There are three main
phases of Apple Pay as well.

00:40:30.096 --> 00:40:31.386 A:middle
There's pre-payment,

00:40:32.016 --> 00:40:35.476 A:middle
that's before you have seen the
Apple Pay sheet, the experience

00:40:35.476 --> 00:40:38.066 A:middle
of using Apple Pay before
the sheet has come onscreen.

00:40:39.316 --> 00:40:42.266 A:middle
There's payment itself,
actually taking payment

00:40:42.356 --> 00:40:44.776 A:middle
when the sheet's
looking towards the user.

00:40:45.226 --> 00:40:46.136 A:middle
You can customize that.

00:40:46.136 --> 00:40:47.196 A:middle
How should you customize it?

00:40:47.376 --> 00:40:47.996 A:middle
We'll find out.

00:40:49.286 --> 00:40:50.726 A:middle
There's also post-payments.

00:40:51.686 --> 00:40:54.566 A:middle
That's the experience after
the sheet has been dismissed.

00:40:55.496 --> 00:40:57.786 A:middle
So let's run through
these three phases

00:40:57.786 --> 00:41:01.446 A:middle
and discuss how your
designs can work


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:57.786 --> 00:41:01.446 A:middle
and discuss how your
designs can work

00:41:01.446 --> 00:41:04.146 A:middle
with Apple Pay for each phase.

00:41:04.956 --> 00:41:07.656 A:middle
Prepayment starts with
the Apple Pay button.

00:41:08.156 --> 00:41:11.056 A:middle
And the Apple Pay button is
available both in Cocoa Touch,

00:41:11.056 --> 00:41:15.606 A:middle
and, as I've just shown you,
we have some artwork in WebKit

00:41:15.606 --> 00:41:16.726 A:middle
that you can use as well.

00:41:17.116 --> 00:41:19.156 A:middle
It's available in a
variety of styles.

00:41:19.236 --> 00:41:20.816 A:middle
Here are a couple of them.

00:41:20.816 --> 00:41:23.346 A:middle
And Anders showed you the CSS,

00:41:23.346 --> 00:41:28.536 A:middle
but just to reiterate we have
a WebKit-image-named property

00:41:28.536 --> 00:41:29.276 A:middle
that you can use.

00:41:29.746 --> 00:41:32.446 A:middle
You can get an Apple
Pay logo, so you can use

00:41:32.446 --> 00:41:34.606 A:middle
that for your buttons
on the web.

00:41:35.516 --> 00:41:37.806 A:middle
There are some do's and
there are some don'ts

00:41:37.846 --> 00:41:38.986 A:middle
when you are using
the Apple Pay button.

00:41:39.636 --> 00:41:41.856 A:middle
Do use the built-in assets.

00:41:42.626 --> 00:41:45.196 A:middle
Sometimes, you never know,
we might change the logo.

00:41:45.196 --> 00:41:46.746 A:middle
You want to make sure
you're up to date.

00:41:47.616 --> 00:41:50.886 A:middle
Also, place wherever a user
might want to purchase.

00:41:50.886 --> 00:41:51.756 A:middle
Don't hide it away.

00:41:51.756 --> 00:41:54.106 A:middle
Don't make it difficult
for the user to pay

00:41:54.106 --> 00:41:56.336 A:middle
with what is a very
easy payment method.

00:41:57.086 --> 00:41:58.726 A:middle
There is also some don'ts.

00:41:59.446 --> 00:42:03.586 A:middle
Don't modify the button, or
don't change its behavior.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.446 --> 00:42:03.586 A:middle
Don't modify the button, or
don't change its behavior.

00:42:04.286 --> 00:42:06.666 A:middle
It's very important
that if a user taps

00:42:06.666 --> 00:42:08.646 A:middle
on an Apple Pay button,
they see an Apple Pay sheet.

00:42:08.646 --> 00:42:10.496 A:middle
We want that expectation
to be there.

00:42:10.996 --> 00:42:12.896 A:middle
And also don't suppress
the button.

00:42:12.896 --> 00:42:16.056 A:middle
As part of the Apple Pay
guidelines, you are not able

00:42:16.056 --> 00:42:17.536 A:middle
to suppress the button.

00:42:17.536 --> 00:42:20.606 A:middle
It needs to be at the same level
as your other payment methods.

00:42:21.106 --> 00:42:25.306 A:middle
Let's talk about where
you can place the button.

00:42:26.706 --> 00:42:28.876 A:middle
Now Anders' demo showed you how

00:42:28.876 --> 00:42:31.436 A:middle
to place the Apple Pay button
early on in your purchase flow.

00:42:32.556 --> 00:42:35.866 A:middle
And placing it on product pages
can increase user engagement.

00:42:35.866 --> 00:42:38.686 A:middle
We've seen some great data from
apps that have adopted Apple Pay

00:42:38.686 --> 00:42:41.226 A:middle
to show they've seen
drastic conversion increases

00:42:41.226 --> 00:42:44.066 A:middle
when they place the Apple Pay
button on their product page.

00:42:44.746 --> 00:42:46.306 A:middle
Now obviously you
can also place it

00:42:46.306 --> 00:42:48.676 A:middle
in regular checkout
and in carts.

00:42:49.376 --> 00:42:50.566 A:middle
Let's look at a few examples.

00:42:50.566 --> 00:42:54.946 A:middle
We gave the Apple Pay API to
some websites, and we asked them

00:42:54.946 --> 00:42:57.186 A:middle
to come up with some designs

00:42:57.696 --> 00:42:59.376 A:middle
and some experiences
that use Apple Pay.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:00.736 --> 00:43:02.106 A:middle
Here's one from StubHub.

00:43:03.636 --> 00:43:05.946 A:middle
Now StubHub has decided to a Buy

00:43:05.946 --> 00:43:08.236 A:middle
with Apple Pay button during
their checkout process.

00:43:08.236 --> 00:43:09.796 A:middle
You select the number
of tickets you want,

00:43:09.796 --> 00:43:12.796 A:middle
and then you just
buy with Apple Pay.

00:43:13.036 --> 00:43:14.746 A:middle
You can also bring
that a step earlier.

00:43:14.746 --> 00:43:17.486 A:middle
You can do what I call
an express checkout.

00:43:17.586 --> 00:43:19.326 A:middle
This is from Warby Parker.

00:43:20.186 --> 00:43:21.926 A:middle
This is after you have
selected a product.

00:43:22.736 --> 00:43:23.716 A:middle
You see we have two options.

00:43:23.716 --> 00:43:26.576 A:middle
We can add the product to our
cart and continue shopping,

00:43:27.126 --> 00:43:29.746 A:middle
or you can just buy it there
and then with Apple Pay.

00:43:31.096 --> 00:43:33.566 A:middle
Finally, you can place
the Apple Pay button

00:43:33.566 --> 00:43:34.946 A:middle
on your actual product pages.

00:43:35.616 --> 00:43:37.396 A:middle
Here's an example
from Lululemon.

00:43:37.786 --> 00:43:40.646 A:middle
The Apple Pay button right
there on the product page.

00:43:40.766 --> 00:43:42.646 A:middle
Let me show you that
on iPad as well.

00:43:42.646 --> 00:43:45.396 A:middle
Here you can see there's
still an Add to Bag.

00:43:45.396 --> 00:43:48.806 A:middle
So if I want to create my
cart as normal, I can do that.

00:43:49.106 --> 00:43:53.506 A:middle
Or I can just buy
it there and then.

00:43:53.716 --> 00:43:55.956 A:middle
Now one thing that
really enhances buying

00:43:55.956 --> 00:43:59.216 A:middle
on the product pages is
enabling a guest checkout.

00:43:59.776 --> 00:44:03.166 A:middle
Required registration is a
major source of user friction.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:59.776 --> 00:44:03.166 A:middle
Required registration is a
major source of user friction.

00:44:03.166 --> 00:44:05.776 A:middle
I don't know about you, but I've
definitely not purchased things

00:44:05.986 --> 00:44:08.316 A:middle
because the site I didn't
really know wanted me

00:44:08.316 --> 00:44:09.836 A:middle
to create an account up front.

00:44:11.486 --> 00:44:14.146 A:middle
And so Apple Pay can help
reduce these abandoned purchases

00:44:14.146 --> 00:44:17.086 A:middle
by making guest checkout
flows really ease to use.

00:44:18.356 --> 00:44:20.876 A:middle
Also, you can optionally
leverage the information you

00:44:20.876 --> 00:44:22.266 A:middle
collect in the Apple Pay sheet

00:44:22.786 --> 00:44:25.296 A:middle
to create accounts
post-purchase.

00:44:25.936 --> 00:44:28.676 A:middle
I'll show you an example of that
in the post-payment section.

00:44:29.226 --> 00:44:33.566 A:middle
Let's move on now to actual
payment, the Apple Pay sheet.

00:44:34.116 --> 00:44:37.946 A:middle
Now the Apple Pay sheet
offers a flexible payment flow

00:44:37.946 --> 00:44:38.746 A:middle
for merchants.

00:44:38.896 --> 00:44:40.256 A:middle
It's highly customizable,

00:44:40.746 --> 00:44:44.826 A:middle
but it also offers a
consistent experience for users.

00:44:45.546 --> 00:44:48.366 A:middle
You can decide what
fields you want to show,

00:44:48.366 --> 00:44:50.956 A:middle
but the user always
knows what to expect.

00:44:51.576 --> 00:44:54.866 A:middle
Here is an example of
an Apple Pay sheet.

00:44:54.866 --> 00:44:56.676 A:middle
I am using the Mac OS sheet.

00:44:57.236 --> 00:45:00.546 A:middle
But the same fields
are available on iOS


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:57.236 --> 00:45:00.546 A:middle
But the same fields
are available on iOS

00:45:00.546 --> 00:45:03.976 A:middle
if you're making a web payment
in Safari, on iPhone, or iPad.

00:45:05.446 --> 00:45:08.606 A:middle
The first field is where
you select your card.

00:45:08.606 --> 00:45:11.346 A:middle
It's also optionally where you
can input your billing address,

00:45:11.386 --> 00:45:13.036 A:middle
although billing
addresses aren't required

00:45:13.036 --> 00:45:14.296 A:middle
to process an Apple Pay payment.

00:45:15.616 --> 00:45:17.606 A:middle
The next field is shipping.

00:45:19.016 --> 00:45:21.666 A:middle
This is where you request
information from your users.

00:45:22.156 --> 00:45:25.816 A:middle
You can request billing,
shipping,

00:45:25.816 --> 00:45:27.806 A:middle
and contact information
if you need it;

00:45:28.126 --> 00:45:31.646 A:middle
and you can also specify
shipping methods or pickup.

00:45:32.256 --> 00:45:33.696 A:middle
You can change the terminology.

00:45:33.696 --> 00:45:34.626 A:middle
If you don't like it saying --

00:45:34.626 --> 00:45:37.286 A:middle
to say "shipping," you can
say "delivery" or "pickup."

00:45:37.896 --> 00:45:39.446 A:middle
It's good if you're
a ridesharing app

00:45:39.446 --> 00:45:41.036 A:middle
or maybe a takeaway service.

00:45:44.276 --> 00:45:46.946 A:middle
Now you can list
shipping costs as well.

00:45:47.396 --> 00:45:49.036 A:middle
You can list them
in summary items,

00:45:49.236 --> 00:45:50.716 A:middle
which we'll talk
about in a second.

00:45:51.086 --> 00:45:54.336 A:middle
But when you're collecting
this information,

00:45:54.336 --> 00:45:56.666 A:middle
make sure you have a
clear privacy policy.

00:45:56.946 --> 00:45:59.506 A:middle
When you use Apple Pay within
an app, when you upload it

00:45:59.506 --> 00:46:00.686 A:middle
to the App Store
you are required


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:59.506 --> 00:46:00.686 A:middle
to the App Store
you are required

00:46:00.686 --> 00:46:02.436 A:middle
to provide a link
to a privacy policy.

00:46:02.876 --> 00:46:04.206 A:middle
Now when you are
designing for the web,

00:46:04.586 --> 00:46:06.266 A:middle
obviously there is
no way to do that.

00:46:06.266 --> 00:46:09.356 A:middle
So instead we just ask that you
place a privacy policy somewhere

00:46:09.356 --> 00:46:12.106 A:middle
on your site that clearly
describes what you are intending

00:46:12.106 --> 00:46:13.166 A:middle
to do with this information.

00:46:13.576 --> 00:46:17.656 A:middle
Now you can also
enable shipping methods

00:46:18.316 --> 00:46:20.276 A:middle
that lets you select
things like delivery.

00:46:21.596 --> 00:46:24.796 A:middle
And just like the shipping
address, it's customizable.

00:46:25.776 --> 00:46:27.566 A:middle
Users can pick from
a list of methods.

00:46:27.656 --> 00:46:29.836 A:middle
Now these methods can
be updated in response

00:46:29.836 --> 00:46:31.316 A:middle
to address changes perhaps

00:46:31.316 --> 00:46:33.866 A:middle
if you already offer express
shipping in New York City,

00:46:34.056 --> 00:46:36.226 A:middle
you can easily reflect that.

00:46:36.636 --> 00:46:39.616 A:middle
Methods could also be free if
you want to offer free shipping.

00:46:40.266 --> 00:46:41.526 A:middle
And just like shipping
addresses,

00:46:41.706 --> 00:46:43.976 A:middle
the naming can be
customized to suit your needs.

00:46:47.606 --> 00:46:49.826 A:middle
Now although you
request address, e-mail,

00:46:49.826 --> 00:46:52.426 A:middle
and phone number in
the same property,

00:46:52.846 --> 00:46:54.426 A:middle
they are separate
fields on the sheet.

00:46:55.266 --> 00:46:56.786 A:middle
So this field here,
the contact field,

00:46:56.786 --> 00:46:58.656 A:middle
is where you enter
the information other

00:46:58.656 --> 00:46:59.546 A:middle
than postal address.

00:46:59.906 --> 00:47:01.746 A:middle
Now we support collecting
phone number.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:59.906 --> 00:47:01.746 A:middle
Now we support collecting
phone number.

00:47:02.296 --> 00:47:03.916 A:middle
We support collecting
e-mail address.

00:47:04.156 --> 00:47:06.186 A:middle
And if you are not
requesting a shipping address,

00:47:06.386 --> 00:47:08.536 A:middle
we also allow you to
request the user's name.

00:47:08.826 --> 00:47:12.516 A:middle
That's useful if maybe you
are a ridesharing app or site

00:47:12.516 --> 00:47:14.046 A:middle
and you want to have
the name of the user

00:47:14.046 --> 00:47:15.826 A:middle
but you don't need
their shipping address.

00:47:18.596 --> 00:47:21.936 A:middle
Now is the most important field,
it's the summary items field.

00:47:22.896 --> 00:47:25.426 A:middle
This highlights the amount
that is being paid to the user,

00:47:25.646 --> 00:47:27.096 A:middle
sorry, that the user
is paying you.

00:47:28.246 --> 00:47:30.066 A:middle
And you can use this
summary of items sheet

00:47:30.296 --> 00:47:33.036 A:middle
to display a concise indication
of what's being charged.

00:47:33.396 --> 00:47:36.406 A:middle
Things like subtotals,
shipping, or discounts.

00:47:36.926 --> 00:47:40.076 A:middle
Now it's not a line-by-line
itemized list.

00:47:40.076 --> 00:47:42.016 A:middle
It's not intended to
be a bill of sale.

00:47:42.416 --> 00:47:44.746 A:middle
So you should keep it concise.

00:47:45.916 --> 00:47:48.616 A:middle
Also, be upfront and clear
about what you're charging.

00:47:49.316 --> 00:47:52.356 A:middle
Make sure that the total amount
reflects what the user is

00:47:52.356 --> 00:47:55.326 A:middle
actually going to be
charged on their card.

00:47:55.326 --> 00:47:57.496 A:middle
That being said,
there are some cases

00:47:57.496 --> 00:47:59.886 A:middle
where you don't necessarily know
the amount you want to charge.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:00.766 --> 00:48:02.396 A:middle
Sometimes you don't
know the final cost.

00:48:02.936 --> 00:48:05.016 A:middle
Maybe it's a hotel
reservation that's open-ended,

00:48:05.316 --> 00:48:07.826 A:middle
or car hire, or a taxi service.

00:48:08.756 --> 00:48:11.016 A:middle
And you can use the
pending item type

00:48:11.016 --> 00:48:12.996 A:middle
on our summary item
to indicate this.

00:48:14.636 --> 00:48:16.836 A:middle
Now again, just make
estimates clear.

00:48:17.486 --> 00:48:19.316 A:middle
Why do I keep saying
"Make estimates clear"?

00:48:19.806 --> 00:48:22.646 A:middle
Well as you may have seen
in the demos, after you pay

00:48:22.646 --> 00:48:25.976 A:middle
with Apple Pay normally you'll
actually see a notification

00:48:26.056 --> 00:48:28.256 A:middle
from your bank with the
amount that's charged.

00:48:28.256 --> 00:48:29.876 A:middle
So you want to make sure
that the amount that's

00:48:29.876 --> 00:48:32.956 A:middle
on the sheet matches this,
at least as best you can

00:48:32.956 --> 00:48:34.556 A:middle
in the case where you
don't necessarily know the

00:48:34.556 --> 00:48:35.806 A:middle
final amount.

00:48:37.456 --> 00:48:40.396 A:middle
Summary items also support
free and discounted items.

00:48:40.936 --> 00:48:42.366 A:middle
Items can be marked as free.

00:48:43.086 --> 00:48:46.216 A:middle
And summary items can also be
negative except for the total.

00:48:46.336 --> 00:48:48.776 A:middle
The total amount needs
to be a positive number.

00:48:49.066 --> 00:48:50.166 A:middle
But anything before that,

00:48:50.166 --> 00:48:52.766 A:middle
if you want to indicate a
discount that's totally fine.

00:48:53.326 --> 00:48:58.766 A:middle
Now there's one other
field on the Mac OS sheet,

00:48:59.266 --> 00:49:03.156 A:middle
and that's the field that tells
you which device to confirm on.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:59.266 --> 00:49:03.156 A:middle
and that's the field that tells
you which device to confirm on.

00:49:04.486 --> 00:49:06.386 A:middle
Which brings me to
a point others raise

00:49:07.766 --> 00:49:09.076 A:middle
around the site icon.

00:49:09.356 --> 00:49:13.056 A:middle
So this is a sheet on iPhone
when you are paying on your Mac.

00:49:13.576 --> 00:49:15.356 A:middle
You can't customize
anything on here.

00:49:15.536 --> 00:49:17.586 A:middle
We inform you of the card,
but you can't change it;

00:49:17.586 --> 00:49:18.716 A:middle
you need to do that on a Mac.

00:49:19.366 --> 00:49:20.656 A:middle
By the way, if you
change any options

00:49:20.656 --> 00:49:22.876 A:middle
on the Mac the price here
will automatically update.

00:49:22.906 --> 00:49:24.866 A:middle
So if you change shipping
methods to something

00:49:24.866 --> 00:49:27.086 A:middle
that costs more, we'll
sync that straight over.

00:49:27.086 --> 00:49:32.006 A:middle
But this site icon is
downloaded from your site.

00:49:32.206 --> 00:49:34.416 A:middle
You can specify it
in a number of ways.

00:49:34.976 --> 00:49:40.126 A:middle
It uses the existing Apple Touch
icon, and you need to provide it

00:49:40.126 --> 00:49:44.686 A:middle
for Apple Pay at 180
and 120-pixel sizes.

00:49:45.266 --> 00:49:49.046 A:middle
The easiest way to specify this
is to just use a link attribute.

00:49:49.856 --> 00:49:54.126 A:middle
But you can also specify at
the root node of your domain.

00:49:55.616 --> 00:49:57.016 A:middle
Whatever works best for you.

00:49:58.216 --> 00:49:59.966 A:middle
I'd also like to briefly
touch upon something else.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:00.086 --> 00:50:01.996 A:middle
That's semantic markup.

00:50:02.346 --> 00:50:05.216 A:middle
So many of you may already
be using semantic markup

00:50:05.216 --> 00:50:08.156 A:middle
on your pages to indicate
the types of products

00:50:08.156 --> 00:50:10.156 A:middle
that are available for
search engine indexing.

00:50:10.466 --> 00:50:13.076 A:middle
We actually index the
product type ourselves

00:50:13.076 --> 00:50:14.986 A:middle
in Spotlight on iOS.

00:50:15.656 --> 00:50:17.886 A:middle
You can also indicate that
your site takes Apple Pay using

00:50:17.886 --> 00:50:19.816 A:middle
appropriate semantic markup.

00:50:19.816 --> 00:50:22.976 A:middle
We think this will benefit,
for example, search engines,

00:50:23.106 --> 00:50:25.256 A:middle
people who want to know where
Apple Pay is being used,

00:50:25.356 --> 00:50:28.056 A:middle
if you'd like to
consider doing that.

00:50:29.126 --> 00:50:31.096 A:middle
OK, let's move on
to the last phase

00:50:31.096 --> 00:50:32.766 A:middle
of payment, the confirmation.

00:50:33.346 --> 00:50:35.686 A:middle
Now in your confirmation
you want

00:50:35.686 --> 00:50:38.286 A:middle
to reflect the appropriate
status in the Apple Pay sheet.

00:50:38.806 --> 00:50:42.036 A:middle
So for example, don't
display a success page

00:50:42.036 --> 00:50:43.046 A:middle
if you returned a failure.

00:50:43.296 --> 00:50:43.956 A:middle
That would be silly.

00:50:43.956 --> 00:50:47.276 A:middle
You can also leverage
information collected

00:50:47.276 --> 00:50:49.226 A:middle
by Apple Pay to offer
account creation.

00:50:49.226 --> 00:50:50.146 A:middle
I mentioned this earlier.

00:50:50.146 --> 00:50:53.266 A:middle
I want to show you an example
of that from Lululemon.

00:50:53.266 --> 00:50:55.196 A:middle
Here's an example.

00:50:55.346 --> 00:50:57.196 A:middle
After you have made
an Apple Pay payment,

00:50:57.736 --> 00:50:58.956 A:middle
you get a confirmation page

00:50:59.376 --> 00:51:03.356 A:middle
and you actually get a create
an account field that's


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:59.376 --> 00:51:03.356 A:middle
and you actually get a create
an account field that's

00:51:03.356 --> 00:51:04.756 A:middle
pre-populated with
the e-mail address

00:51:04.756 --> 00:51:05.676 A:middle
that came from Apple Pay.

00:51:05.896 --> 00:51:08.156 A:middle
So I can create an
account on my own terms.

00:51:08.396 --> 00:51:10.376 A:middle
I can enter into a
relationship if I want to,

00:51:10.506 --> 00:51:11.636 A:middle
and it's easy to do so.

00:51:14.006 --> 00:51:16.446 A:middle
OK. We covered quite
a bit today.

00:51:17.166 --> 00:51:18.286 A:middle
What did we cover?

00:51:19.486 --> 00:51:21.446 A:middle
We covered Apply Pay merchant
validation on the web.

00:51:21.526 --> 00:51:24.696 A:middle
We learned about the differences
between ActiveWeb for Apple Pay.

00:51:25.876 --> 00:51:28.566 A:middle
We also covered the Apple
Pay session JavaScript API

00:51:28.566 --> 00:51:29.116 A:middle
with Anders.

00:51:29.276 --> 00:51:33.176 A:middle
And we also talked
about taking advantage

00:51:33.176 --> 00:51:35.396 A:middle
of Apple Pay in our designs.

00:51:35.396 --> 00:51:39.496 A:middle
Now we have a lot of information
about Apple Pay on the web.

00:51:39.986 --> 00:51:43.096 A:middle
You can check out our developer
page and our microsite here.

00:51:43.806 --> 00:51:45.386 A:middle
We've also got the
related sessions.

00:51:46.176 --> 00:51:47.586 A:middle
Firstly, don't go anywhere.

00:51:48.006 --> 00:51:48.816 A:middle
Stay right here.

00:51:48.976 --> 00:51:49.636 A:middle
Don't you even leave.

00:51:49.636 --> 00:51:52.326 A:middle
I am going to be right back here
at 3 o'clock talking about news

00:51:52.326 --> 00:51:53.336 A:middle
with Wallet &amp; Apple Pay.

00:51:53.586 --> 00:51:54.986 A:middle
We're going to talk
about the Sandbox.

00:51:55.186 --> 00:51:56.416 A:middle
We're going to talk
about WatchKit.

00:51:56.586 --> 00:51:57.876 A:middle
We're going to talk
about extensions.

00:51:57.976 --> 00:52:00.636 A:middle
And we're going to talk about
some of the new things in Wallet


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:57.976 --> 00:52:00.636 A:middle
And we're going to talk about
some of the new things in Wallet

00:52:00.636 --> 00:52:03.036 A:middle
and Apple Pay for
banks and retailers.

00:52:03.366 --> 00:52:06.256 A:middle
There's also a session
for web people:

00:52:06.346 --> 00:52:08.416 A:middle
Optimizing Web Content
in Your App.

00:52:08.866 --> 00:52:10.336 A:middle
That is Friday at 4:00.

00:52:10.966 --> 00:52:12.116 A:middle
That's everything from us.

00:52:12.396 --> 00:52:13.636 A:middle
Thank you so much for coming.

00:52:13.686 --> 00:52:16.126 A:middle
I can't wait to see all the
sites you're going to build

00:52:16.126 --> 00:52:16.956 A:middle
with Apple Pay on the web.

00:52:17.336 --> 00:52:18.976 A:middle
Thank you, and have
a great WWDC.

00:52:19.016 --> 00:52:21.000 A:middle
[ Applause ]

