WEBVTT

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:24.516 --> 00:00:29.546 A:middle
[ Applause ]

00:00:30.046 --> 00:00:30.606 A:middle
&gt;&gt; Hello, everyone.

00:00:30.786 --> 00:00:32.456 A:middle
Welcome to Building
Great Workout Apps.

00:00:33.036 --> 00:00:34.506 A:middle
You are here because you care

00:00:34.586 --> 00:00:36.276 A:middle
about building the
best experiences

00:00:36.366 --> 00:00:38.146 A:middle
for users of your fitness apps.

00:00:39.086 --> 00:00:40.216 A:middle
Some of them are fanatical.

00:00:40.796 --> 00:00:42.816 A:middle
They're spending hours
per week on their fitness,

00:00:43.176 --> 00:00:45.846 A:middle
and they expect responsive,
easy to use apps

00:00:46.196 --> 00:00:47.306 A:middle
that provide accurate data

00:00:47.786 --> 00:00:50.006 A:middle
and integrate seamlessly
with Apple Health.

00:00:51.286 --> 00:00:52.096 A:middle
My name is Dash.

00:00:52.296 --> 00:00:54.276 A:middle
I'm an engineer on Apple's
Health and Fitness team,

00:00:54.646 --> 00:00:56.336 A:middle
and I'll be joined up
here in a little while

00:00:56.486 --> 00:00:57.436 A:middle
by my colleague Jorge.

00:00:58.446 --> 00:01:01.366 A:middle
Today, we're going to show you
how to build great workout apps

00:00:58.446 --> 00:01:01.366 A:middle
Today, we're going to show you
how to build great workout apps

00:01:01.696 --> 00:01:02.706 A:middle
that your users will love.

00:01:07.046 --> 00:01:09.476 A:middle
Working out is an important
aspect of overall health.

00:01:10.286 --> 00:01:13.106 A:middle
It can help you sleep,
make good eating decisions,

00:01:13.106 --> 00:01:13.926 A:middle
and clear your mind.

00:01:20.356 --> 00:01:23.536 A:middle
Many of you have worked hard
to create workout apps on iOS

00:01:24.056 --> 00:01:26.656 A:middle
that inspire users to track
their fitness activities

00:01:27.106 --> 00:01:28.836 A:middle
and reach for new
health and fitness goals.

00:01:29.516 --> 00:01:33.686 A:middle
With Apple Watch,
workout apps come to life

00:01:33.826 --> 00:01:36.016 A:middle
within the moment heart
rate, calorie burn,

00:01:36.076 --> 00:01:37.266 A:middle
and activity detection,

00:01:37.646 --> 00:01:40.366 A:middle
in an experience delivered
exclusively from the wrist.

00:01:41.646 --> 00:01:43.756 A:middle
Today, we're going to
primarily focus on how

00:01:43.756 --> 00:01:46.886 A:middle
to build great workout
apps for Apple Watch.

00:01:49.276 --> 00:01:51.506 A:middle
We'll start by introducing
background running,

00:01:51.996 --> 00:01:55.936 A:middle
a new game changing capability
for workout apps on watchOS 3.

00:01:57.356 --> 00:01:59.106 A:middle
Then, we'll walk
through the lifecycle

00:01:59.106 --> 00:02:01.036 A:middle
of a workout from
start to finish.

00:01:59.106 --> 00:02:01.036 A:middle
of a workout from
start to finish.

00:02:01.576 --> 00:02:05.926 A:middle
Along the way, we'll show
you how your workout app can

00:02:05.926 --> 00:02:07.756 A:middle
contribute to the
user's activity ranks.

00:02:10.036 --> 00:02:13.116 A:middle
Next, we'll discuss some
new APIs that we've added

00:02:13.146 --> 00:02:14.716 A:middle
for workouts in iOS 10.

00:02:15.276 --> 00:02:19.006 A:middle
And finally, we'll review
some best practices.

00:02:20.206 --> 00:02:20.996 A:middle
So let's get started.

00:02:21.676 --> 00:02:26.296 A:middle
At the core of every workout
app is a workout session

00:02:26.366 --> 00:02:27.916 A:middle
that the user can
start and stop.

00:02:28.566 --> 00:02:30.906 A:middle
So we start with
HKWorkoutSession.

00:02:32.146 --> 00:02:33.736 A:middle
This API is simple to use

00:02:33.736 --> 00:02:36.956 A:middle
and provides automatic
benefits to your workout app.

00:02:37.526 --> 00:02:38.796 A:middle
When a workout session
is active,

00:02:39.006 --> 00:02:41.586 A:middle
the sensors on Apple Watch
will use the activity type

00:02:41.716 --> 00:02:44.796 A:middle
of the session to accurately
compute motion and calorimetry.

00:02:45.996 --> 00:02:48.266 A:middle
This will also enable
your app to contribute

00:02:48.266 --> 00:02:49.506 A:middle
to the user's activity rings.

00:02:50.456 --> 00:02:52.256 A:middle
For example, during a workout,

00:02:52.256 --> 00:02:55.786 A:middle
activity will use the workout
type to award exercise minutes

00:02:55.836 --> 00:02:57.786 A:middle
to the user's exercise ring.

00:02:59.496 --> 00:03:00.846 A:middle
During a workout session,

00:02:59.496 --> 00:03:00.846 A:middle
During a workout session,

00:03:01.046 --> 00:03:03.276 A:middle
your app will be displayed
whenever the user wakes

00:03:03.276 --> 00:03:03.876 A:middle
their device.

00:03:04.556 --> 00:03:06.326 A:middle
Users will love having
instant access

00:03:06.326 --> 00:03:08.266 A:middle
to your app while they're
using it to workout.

00:03:11.776 --> 00:03:15.466 A:middle
Finally, we're really excited
to announce that workout apps

00:03:15.466 --> 00:03:18.426 A:middle
in watchOS 3 can now be set
up to run in the background.

00:03:19.686 --> 00:03:21.416 A:middle
Let's talk more about
background running.

00:03:22.516 --> 00:03:26.586 A:middle
[ Applause ]

00:03:27.086 --> 00:03:29.126 A:middle
Background running will
elevate the experience

00:03:29.126 --> 00:03:31.046 A:middle
of your workout app.

00:03:31.046 --> 00:03:32.646 A:middle
Your app will be
able to process data

00:03:32.646 --> 00:03:34.056 A:middle
from the sensors
in the background.

00:03:34.726 --> 00:03:36.716 A:middle
For example, you'll be able

00:03:36.716 --> 00:03:39.126 A:middle
to receive continuous
heart rate values even

00:03:39.126 --> 00:03:40.826 A:middle
when your app isn't
displayed on screen.

00:03:40.826 --> 00:03:45.396 A:middle
You'll also be able to provide
live feedback to the user

00:03:45.546 --> 00:03:47.576 A:middle
at any time during
the workout session.

00:03:48.176 --> 00:03:49.746 A:middle
You can send the
user haptic alerts

00:03:49.776 --> 00:03:51.286 A:middle
to let them know their
current progress.

00:03:53.616 --> 00:03:56.456 A:middle
This will also allow
you to quickly show

00:03:56.456 --> 00:03:58.926 A:middle
up to date data whenever
the user just glances

00:03:58.926 --> 00:04:00.266 A:middle
at their wrist.

00:03:58.926 --> 00:04:00.266 A:middle
at their wrist.

00:04:02.576 --> 00:04:04.506 A:middle
Enabling background
running is simple,

00:04:05.096 --> 00:04:08.636 A:middle
just add workout-processing
to the BackgroundModes

00:04:08.676 --> 00:04:10.486 A:middle
in your extensions Info.plist.

00:04:14.046 --> 00:04:16.435 A:middle
Of course, to maintain high
performance on Apple Watch,

00:04:16.796 --> 00:04:18.456 A:middle
it's critical that you
limit your background work

00:04:18.596 --> 00:04:19.935 A:middle
to only do what's necessary.

00:04:20.005 --> 00:04:24.266 A:middle
If your app uses excessive
CPU while in the background,

00:04:24.796 --> 00:04:29.146 A:middle
watchOS may decide
to suspend it.

00:04:29.416 --> 00:04:31.786 A:middle
We recommend that
you use our tools

00:04:31.786 --> 00:04:34.026 A:middle
to measure your app's
background CPU usage.

00:04:35.146 --> 00:04:37.576 A:middle
You can use the CPU
report tool in Xcode,

00:04:39.016 --> 00:04:40.876 A:middle
or the time profiler
in instruments.

00:04:42.436 --> 00:04:44.796 A:middle
watchOS 3 will also
generate a log

00:04:44.796 --> 00:04:48.166 A:middle
with a backtrace whenever your
app crosses the CPU threshold.

00:04:48.686 --> 00:04:52.516 A:middle
Now that you're set up
for background running,

00:04:52.986 --> 00:04:54.776 A:middle
let's walk through the steps
for starting a workout.

00:04:56.436 --> 00:04:58.516 A:middle
There are three steps
for starting a workout.

00:04:59.896 --> 00:05:02.286 A:middle
First, you need to
request authorization

00:04:59.896 --> 00:05:02.286 A:middle
First, you need to
request authorization

00:05:02.576 --> 00:05:06.726 A:middle
to access data in HealthKit.

00:05:06.726 --> 00:05:08.876 A:middle
Second, you'll create a
workout configuration object

00:05:09.006 --> 00:05:12.896 A:middle
representing the type of workout
that you'd like to start.

00:05:12.896 --> 00:05:14.336 A:middle
And third, you'll create

00:05:14.336 --> 00:05:16.136 A:middle
and start a workout
session using your

00:05:16.136 --> 00:05:17.006 A:middle
workout configuration.

00:05:17.456 --> 00:05:18.876 A:middle
Let's go through
these one-by-one.

00:05:23.046 --> 00:05:25.246 A:middle
All workout apps will want
to request authorization

00:05:25.316 --> 00:05:26.656 A:middle
to write workouts to HealthKit.

00:05:27.626 --> 00:05:29.856 A:middle
This will enable workouts
from your app to show

00:05:29.856 --> 00:05:32.436 A:middle
up in the user's health
and activity apps.

00:05:33.236 --> 00:05:36.156 A:middle
Depending on the specifics of
your workout app, you may want

00:05:36.156 --> 00:05:38.486 A:middle
to request authorization
to read energy burned,

00:05:38.646 --> 00:05:40.286 A:middle
distance, and a heart rate.

00:05:41.256 --> 00:05:44.106 A:middle
If you'd like more information
on how to set up authorization,

00:05:44.456 --> 00:05:46.576 A:middle
we recommend you take a
look at our previous talk,

00:05:46.856 --> 00:05:48.646 A:middle
Getting the Most
out of HealthKit.

00:05:53.106 --> 00:05:54.436 A:middle
Workout sessions are created

00:05:54.436 --> 00:05:56.076 A:middle
with a workoutConfiguration
object.

00:05:57.416 --> 00:06:00.266 A:middle
The workoutConfiguration
includes the workouts activity

00:05:57.416 --> 00:06:00.266 A:middle
The workoutConfiguration
includes the workouts activity

00:06:00.266 --> 00:06:01.996 A:middle
type, such as running
or bicycling,

00:06:02.766 --> 00:06:05.196 A:middle
and the location type,
such as indoor or outdoor.

00:06:07.836 --> 00:06:09.766 A:middle
You will use the
configuration object

00:06:09.866 --> 00:06:13.836 A:middle
to create a workoutSession,
then to start the session,

00:06:14.056 --> 00:06:17.056 A:middle
simply pass it to the start
method on an HK healthStore.

00:06:21.076 --> 00:06:22.166 A:middle
Let's try this out with a demo.

00:06:22.866 --> 00:06:25.256 A:middle
For just today, let's pretend we
all work for the same company.

00:06:25.846 --> 00:06:28.576 A:middle
Our latest project is
to build a workout app

00:06:28.576 --> 00:06:32.166 A:middle
for watchOS 3 that's designed
specifically for sloth lovers.

00:06:33.246 --> 00:06:34.196 A:middle
It's called SpeedySloth.

00:06:35.096 --> 00:06:36.426 A:middle
I've an Xcode project here

00:06:36.516 --> 00:06:39.746 A:middle
that already has the UI
built for this workout app.

00:06:39.746 --> 00:06:40.616 A:middle
Let's take a look together.

00:06:50.046 --> 00:06:51.866 A:middle
So this is the first
view that the user sees

00:06:51.976 --> 00:06:53.566 A:middle
when they open our app.

00:06:53.566 --> 00:06:56.056 A:middle
It has two pickers,
one for activity type,

00:06:56.416 --> 00:06:57.886 A:middle
which can be walking,
running, or hiking.

00:06:59.006 --> 00:07:00.346 A:middle
And another for location type,

00:06:59.006 --> 00:07:00.346 A:middle
And another for location type,

00:07:00.556 --> 00:07:03.056 A:middle
which can be outdoor,
indoor, or unknown.

00:07:03.566 --> 00:07:07.156 A:middle
When I press the Start
button, nothing happens.

00:07:07.546 --> 00:07:08.426 A:middle
Let's fix that together.

00:07:12.046 --> 00:07:13.716 A:middle
The view that you
just saw is controlled

00:07:14.026 --> 00:07:16.416 A:middle
by a class called configuration
interface controller.

00:07:16.756 --> 00:07:20.356 A:middle
I've a method right here
called didTap StartButton,

00:07:20.606 --> 00:07:22.356 A:middle
that's called whenever the
user taps the Start button.

00:07:22.966 --> 00:07:23.666 A:middle
I'll fill it in now.

00:07:28.196 --> 00:07:30.186 A:middle
I'm creating a
workoutConfiguration object,

00:07:30.976 --> 00:07:32.346 A:middle
and I'm setting the
activity type

00:07:32.396 --> 00:07:34.196 A:middle
to be the currently
selected activity type

00:07:34.476 --> 00:07:35.996 A:middle
from that first picker.

00:07:36.856 --> 00:07:38.496 A:middle
Then I'm setting
the location type

00:07:39.706 --> 00:07:41.426 A:middle
to be the currently
selected location type

00:07:41.556 --> 00:07:42.376 A:middle
from that second picker.

00:07:42.796 --> 00:07:46.106 A:middle
I'm passing the
workoutConfiguration object

00:07:46.576 --> 00:07:48.366 A:middle
to a new interface
controller called

00:07:48.366 --> 00:07:49.516 A:middle
WorkoutInterface Controller.

00:07:50.986 --> 00:07:52.906 A:middle
WorkoutInterface
Controller is responsible

00:07:52.906 --> 00:07:54.976 A:middle
for managing the UI
during our workout session.

00:07:55.496 --> 00:07:57.586 A:middle
It will also be responsible
for Starting

00:07:57.586 --> 00:07:58.826 A:middle
and stopping the
workout session.

00:07:59.616 --> 00:08:01.276 A:middle
Let's take a look at
WorkoutInterface Controller.

00:07:59.616 --> 00:08:01.276 A:middle
Let's take a look at
WorkoutInterface Controller.

00:08:07.256 --> 00:08:09.736 A:middle
So, I'm in the awake method of
WorkoutInterface Controller,

00:08:10.076 --> 00:08:12.706 A:middle
and I know that we'll receive
our workoutConfiguration object

00:08:12.706 --> 00:08:14.396 A:middle
as a context object
in this method.

00:08:15.126 --> 00:08:16.556 A:middle
Let's use it to start
a workout session.

00:08:20.306 --> 00:08:22.946 A:middle
First, I'm unwrapping the
context object to make sure

00:08:22.946 --> 00:08:24.456 A:middle
that it's a valid
workout configuration.

00:08:26.316 --> 00:08:29.136 A:middle
Then I'm using it to create a
workout session by passing it

00:08:29.136 --> 00:08:30.976 A:middle
to the initializer
for HKWorkoutSession.

00:08:34.046 --> 00:08:36.135 A:middle
I'm setting the delegate of
my workout session to be self,

00:08:36.346 --> 00:08:37.775 A:middle
so we'll receive
callbacks for things

00:08:37.775 --> 00:08:39.706 A:middle
like state changes and errors.

00:08:42.176 --> 00:08:45.166 A:middle
Then I'm saving the current date
to be our workout start date.

00:08:45.506 --> 00:08:48.126 A:middle
We'll use this later on, when
we save our workout sample

00:08:48.176 --> 00:08:48.946 A:middle
to HealthKit.

00:08:51.556 --> 00:08:53.266 A:middle
Next, I'm passing
the workoutSession

00:08:53.266 --> 00:08:54.926 A:middle
to the start method
on HK healthStore.

00:08:55.926 --> 00:08:56.546 A:middle
Let's try it out.

00:09:11.046 --> 00:09:12.846 A:middle
So here we are at configuration
interface controller.

00:09:12.936 --> 00:09:15.086 A:middle
I'm going to leave it at
outdoor walk and I'm going

00:09:15.086 --> 00:09:16.136 A:middle
to press the Start button again.

00:09:16.706 --> 00:09:20.636 A:middle
So this just opened
WorkoutInterface Controller.

00:09:20.936 --> 00:09:22.976 A:middle
So I've a feeling, that our
workout session did start

00:09:22.976 --> 00:09:25.076 A:middle
correctly, but to be
sure, let's take a look

00:09:25.076 --> 00:09:26.206 A:middle
at the clock face on the device.

00:09:27.536 --> 00:09:28.366 A:middle
You'll see at the top,

00:09:28.366 --> 00:09:29.846 A:middle
that there's a green
running man icon.

00:09:30.336 --> 00:09:32.036 A:middle
This indicates that
one of the apps

00:09:32.036 --> 00:09:34.476 A:middle
on this watch has an
active workout session.

00:09:35.256 --> 00:09:38.376 A:middle
The user can tap this at any
time to get back to the app

00:09:38.526 --> 00:09:39.406 A:middle
with the active session.

00:09:39.966 --> 00:09:43.996 A:middle
So it looks like our session
did indeed start correctly.

00:09:44.376 --> 00:09:45.356 A:middle
Let's review what we just did.

00:09:46.206 --> 00:09:47.726 A:middle
We used information
from the user

00:09:47.926 --> 00:09:49.716 A:middle
to create a workoutConfiguration
object.

00:09:50.756 --> 00:09:53.436 A:middle
Then we used that configuration
to create a workout session.

00:09:54.046 --> 00:09:55.826 A:middle
And we started the
session by passing it

00:09:55.826 --> 00:09:57.246 A:middle
to the start method
on our healthStore.

00:09:57.826 --> 00:10:00.926 A:middle
Now that we have an
active workout session,

00:09:57.826 --> 00:10:00.926 A:middle
Now that we have an
active workout session,

00:10:01.386 --> 00:10:03.406 A:middle
we want to start collecting
some data to display

00:10:03.406 --> 00:10:04.586 A:middle
to the user during the workout.

00:10:05.526 --> 00:10:07.476 A:middle
To talk to you more about
data collection and control,

00:10:07.476 --> 00:10:09.246 A:middle
I'd like to invite up
my colleague Jorge.

00:10:09.646 --> 00:10:09.936 A:middle
Thank you.

00:10:10.516 --> 00:10:15.966 A:middle
[ Applause ]

00:10:16.466 --> 00:10:17.946 A:middle
&gt;&gt; Thank you Dash.

00:10:18.976 --> 00:10:19.486 A:middle
Good morning.

00:10:20.506 --> 00:10:21.316 A:middle
My name is Jorge.

00:10:21.396 --> 00:10:23.676 A:middle
I'm a software engineer
in the HealthKit Team.

00:10:24.446 --> 00:10:28.106 A:middle
So, my colleague Dash just
showed you how to configure

00:10:28.106 --> 00:10:29.846 A:middle
and start a workout session.

00:10:30.316 --> 00:10:32.046 A:middle
Now, we are going to continue

00:10:32.046 --> 00:10:34.206 A:middle
by discussing how
you can collect data

00:10:34.206 --> 00:10:37.966 A:middle
and control the state of your
session during a workout.

00:10:45.046 --> 00:10:47.076 A:middle
We are going to be
calling data collection

00:10:47.136 --> 00:10:50.966 A:middle
and control those different
tasks that you need to perform

00:10:51.146 --> 00:10:54.216 A:middle
from the moment you
start a workout session

00:10:54.416 --> 00:10:56.496 A:middle
and until you decide to end it.

00:10:57.946 --> 00:10:59.816 A:middle
Let's take a look at all
these different steps.

00:11:00.416 --> 00:11:06.126 A:middle
First, we are going to be
observing samples, that is,

00:11:06.196 --> 00:11:10.056 A:middle
retrieving sample information
from HealthKit in order

00:11:10.056 --> 00:11:12.826 A:middle
to incorporate those
into your workout.

00:11:13.186 --> 00:11:17.806 A:middle
Next, we are going to
be observing events.

00:11:18.386 --> 00:11:23.126 A:middle
Events can be generated by
HealthKit or you can detect them

00:11:23.126 --> 00:11:24.816 A:middle
from your user interface.

00:11:25.196 --> 00:11:27.526 A:middle
We're going to be discussing
events a little more

00:11:27.526 --> 00:11:28.676 A:middle
in detail later.

00:11:29.186 --> 00:11:34.286 A:middle
Once you started
those two tasks,

00:11:34.676 --> 00:11:36.346 A:middle
you're in a running state.

00:11:37.106 --> 00:11:40.946 A:middle
At any point, you
could choose to pause,

00:11:41.566 --> 00:11:44.306 A:middle
and then resume the
workout maybe several times.

00:11:45.666 --> 00:11:49.066 A:middle
And later, you will
decide that you want

00:11:49.346 --> 00:11:51.356 A:middle
to end your workout session.

00:11:51.606 --> 00:11:53.866 A:middle
So let's take a look

00:11:53.866 --> 00:11:56.436 A:middle
at all these steps a
little more in detail.

00:12:00.136 --> 00:12:02.586 A:middle
First, we said we wanted
to observe samples.

00:12:02.846 --> 00:12:06.866 A:middle
The way you do this is by
opening an anchor object query

00:12:07.176 --> 00:12:10.156 A:middle
for each of the data tabs
you're interested in.

00:12:10.596 --> 00:12:13.526 A:middle
That could be, maybe,
wheelchair distance,

00:12:13.696 --> 00:12:16.046 A:middle
or it could be active
energy burn.

00:12:16.566 --> 00:12:23.046 A:middle
When you do this, you also will
setup an updateHandler in order

00:12:23.046 --> 00:12:27.206 A:middle
to receive new event, new
samples arriving to HealthKit.

00:12:27.726 --> 00:12:34.926 A:middle
That will allow you to keep
running totals for your workout

00:12:35.706 --> 00:12:38.716 A:middle
such as maybe the total
accumulate distance

00:12:38.826 --> 00:12:41.136 A:middle
or total accumulated
number of calories.

00:12:41.616 --> 00:12:45.166 A:middle
With that, you will be able
to update your UI live.

00:12:45.386 --> 00:12:49.246 A:middle
You will also be able
to display, for example,

00:12:49.556 --> 00:12:51.636 A:middle
the most recent heart
rate measured.

00:12:56.046 --> 00:12:59.856 A:middle
You could also notify users
of certain goals, for example,

00:12:59.986 --> 00:13:02.646 A:middle
whenever they reach the
first mile in their run,

00:12:59.986 --> 00:13:02.646 A:middle
whenever they reach the
first mile in their run,

00:13:02.916 --> 00:13:05.896 A:middle
or whenever they burn
the first 100 calories

00:13:05.896 --> 00:13:07.256 A:middle
in their rowing workout.

00:13:07.256 --> 00:13:10.866 A:middle
So let's now take a
look at some code.

00:13:14.046 --> 00:13:16.416 A:middle
Since we are going to be
using anchor object queries,

00:13:16.636 --> 00:13:18.936 A:middle
the first thing that
you need to do is

00:13:18.936 --> 00:13:20.796 A:middle
to create a predicate
for your query.

00:13:21.336 --> 00:13:27.236 A:middle
We are going to start by using
the start date of your workout.

00:13:27.756 --> 00:13:32.026 A:middle
You do not want samples that the
work generated before that date

00:13:32.366 --> 00:13:34.786 A:middle
to count against your totals.

00:13:35.126 --> 00:13:40.906 A:middle
Next, you're going to
be asking for samples

00:13:40.906 --> 00:13:42.126 A:middle
from the local device.

00:13:42.286 --> 00:13:43.796 A:middle
That means the current watch.

00:13:45.246 --> 00:13:48.626 A:middle
You want to avoid, for
example, getting samples

00:13:48.626 --> 00:13:52.136 A:middle
that are being saved on
your watch as a result

00:13:52.136 --> 00:13:54.106 A:middle
of a sync operation
with your iPhone.

00:13:56.216 --> 00:13:59.136 A:middle
Finally, you're going to
compose those two predicates

00:13:59.136 --> 00:14:03.176 A:middle
into the final predicate you're
going to be using in your query.

00:13:59.136 --> 00:14:03.176 A:middle
into the final predicate you're
going to be using in your query.

00:14:03.666 --> 00:14:09.546 A:middle
Next, you have to set
up a handler in order

00:14:09.546 --> 00:14:12.326 A:middle
to process samples
arriving in from HealthKit.

00:14:13.056 --> 00:14:17.026 A:middle
You will normally accumulate
those samples into your totals

00:14:17.196 --> 00:14:21.416 A:middle
and maybe display some
updated user interface.

00:14:21.966 --> 00:14:26.536 A:middle
Now, we are ready to create
the anchor object query.

00:14:26.906 --> 00:14:30.016 A:middle
You're going to be using the
quantityType you're interested

00:14:30.016 --> 00:14:31.866 A:middle
in, the predicate we just built,

00:14:32.156 --> 00:14:34.456 A:middle
and set up your initial
results handler

00:14:34.676 --> 00:14:36.346 A:middle
as the handle we defined before.

00:14:36.886 --> 00:14:41.396 A:middle
You will also set
up the updateHandler

00:14:42.086 --> 00:14:44.226 A:middle
so you get new samples arriving

00:14:44.226 --> 00:14:46.046 A:middle
to HealthKit during
your workout.

00:14:47.996 --> 00:14:51.976 A:middle
Finally, you're going to execute
your anchor object query.

00:14:58.076 --> 00:15:00.996 A:middle
We also mention that you would
like to notify your users

00:14:58.076 --> 00:15:00.996 A:middle
We also mention that you would
like to notify your users

00:15:00.996 --> 00:15:02.426 A:middle
of certain reached goals.

00:15:02.616 --> 00:15:04.956 A:middle
For example, whenever
they reach the first mile,

00:15:04.956 --> 00:15:07.366 A:middle
or the first 100
calories in their workout.

00:15:07.766 --> 00:15:10.436 A:middle
The way you will normally do
this, is like playing a haptic

00:15:10.436 --> 00:15:12.256 A:middle
to alert the user
of this situation.

00:15:13.266 --> 00:15:15.266 A:middle
When you do that, we recommend

00:15:15.356 --> 00:15:17.486 A:middle
that you update your
user interface

00:15:17.756 --> 00:15:20.866 A:middle
so you reflect what
this reached goal is.

00:15:21.246 --> 00:15:24.036 A:middle
It is very likely when
a user feels the haptic,

00:15:24.816 --> 00:15:28.186 A:middle
they will raise their wrist
and try to see on the screen,

00:15:28.186 --> 00:15:29.416 A:middle
what this haptic was about.

00:15:29.896 --> 00:15:36.236 A:middle
The way to play a haptic
is by using the play method

00:15:36.456 --> 00:15:37.976 A:middle
in WatchKit interface device.

00:15:42.216 --> 00:15:43.926 A:middle
Now let's talk about events.

00:15:44.986 --> 00:15:47.716 A:middle
Events are timestamps
you would use

00:15:47.996 --> 00:15:50.476 A:middle
to highlight certain
points during your workout.

00:15:50.826 --> 00:15:53.886 A:middle
For example, you can use
pause and resume events

00:15:54.136 --> 00:15:56.976 A:middle
to highlight the point where
your workout state changed.

00:16:02.046 --> 00:16:04.616 A:middle
Some events are going to be
created by your application

00:16:04.916 --> 00:16:06.706 A:middle
and saved later into
your workout.

00:16:07.176 --> 00:16:12.476 A:middle
Others are going to be created
by HealthKit and sent to you.

00:16:15.116 --> 00:16:18.906 A:middle
New in watchOS 3, we have
the didGenerate event

00:16:18.906 --> 00:16:23.206 A:middle
in workout session delegate
that HealthKit will use

00:16:23.446 --> 00:16:26.206 A:middle
to send events to
your application.

00:16:27.816 --> 00:16:31.286 A:middle
So let's now take a look at
the different types of events

00:16:31.286 --> 00:16:32.616 A:middle
that we have in watchOS 3.

00:16:37.176 --> 00:16:41.036 A:middle
Laps and markers are two new
events that we just introduced.

00:16:42.376 --> 00:16:47.136 A:middle
These are events that you
want to create yourself

00:16:47.446 --> 00:16:49.096 A:middle
to store in your workout.

00:16:50.876 --> 00:16:54.166 A:middle
This will represent
timestamps you can use later

00:16:54.166 --> 00:16:57.246 A:middle
for displaying your workouts
in graphs or statistics.

00:16:57.836 --> 00:17:03.476 A:middle
There is a difference
between laps and markers.

00:16:57.836 --> 00:17:03.476 A:middle
There is a difference
between laps and markers.

00:17:03.566 --> 00:17:08.976 A:middle
Laps represent events that
partition your workout

00:17:08.976 --> 00:17:10.965 A:middle
in equal distance portion.

00:17:11.536 --> 00:17:16.346 A:middle
For example, if you're in a
running or cycling workout

00:17:16.346 --> 00:17:21.806 A:middle
in a track, you would create
a lap event each time the user

00:17:21.806 --> 00:17:22.906 A:middle
completes a round.

00:17:26.996 --> 00:17:28.926 A:middle
Markers, on the other side,

00:17:29.306 --> 00:17:32.176 A:middle
can be arbitrary
points in your workout.

00:17:32.896 --> 00:17:36.546 A:middle
They don't have to be tied to
distance or to any other metric.

00:17:37.826 --> 00:17:39.476 A:middle
They could represent,
for example,

00:17:39.926 --> 00:17:43.456 A:middle
the moment your user
reached the top of a hill,

00:17:44.206 --> 00:17:48.346 A:middle
or maybe that time where
you saw a sloth in your way.

00:17:55.046 --> 00:17:57.716 A:middle
Now let's talk about pausing
and resuming workouts.

00:17:58.026 --> 00:18:02.366 A:middle
During a workout session,
your user might decide

00:17:58.026 --> 00:18:02.366 A:middle
During a workout session,
your user might decide

00:18:02.366 --> 00:18:04.776 A:middle
to momentarily stop
the activity.

00:18:05.486 --> 00:18:10.156 A:middle
For example, they are on a run,
and they might decide to stop

00:18:10.156 --> 00:18:11.916 A:middle
to buy a bottle of water.

00:18:12.456 --> 00:18:17.446 A:middle
In this case, you will have
some way in your user interface

00:18:17.726 --> 00:18:19.956 A:middle
for your user to let you
know of this situation.

00:18:20.476 --> 00:18:24.396 A:middle
When this happens, you can
now call into HealthKit

00:18:24.796 --> 00:18:26.456 A:middle
to pause your workout.

00:18:27.096 --> 00:18:30.686 A:middle
This will allow HealthKit
to save power on your watch

00:18:30.896 --> 00:18:32.626 A:middle
and space in the database.

00:18:33.136 --> 00:18:38.026 A:middle
Of course, when this happens,
you want to ignore any new data

00:18:38.026 --> 00:18:40.186 A:middle
that arrives to your
application.

00:18:40.646 --> 00:18:44.046 A:middle
You don't want to
accumulate samples

00:18:44.046 --> 00:18:48.686 A:middle
to your totals while
your session is paused.

00:18:51.696 --> 00:18:55.396 A:middle
HealthKit will respond
to pause and resume calls

00:18:55.816 --> 00:18:58.386 A:middle
by generating pause
and your resume events

00:18:58.636 --> 00:19:03.296 A:middle
that you will get using the
workout session delegate.

00:18:58.636 --> 00:19:03.296 A:middle
that you will get using the
workout session delegate.

00:19:03.796 --> 00:19:08.736 A:middle
It's important to know that
after you receive a pause event,

00:19:09.316 --> 00:19:11.956 A:middle
no new events will be
generated by HealthKit,

00:19:12.146 --> 00:19:14.556 A:middle
until you resume your session.

00:19:19.546 --> 00:19:23.466 A:middle
New in watchOS 3, the
function you will use to pause

00:19:23.466 --> 00:19:26.216 A:middle
and resume your workout
are part of HKHealthStore,

00:19:26.606 --> 00:19:28.976 A:middle
pause workoutSession and
resume workoutSession.

00:19:32.166 --> 00:19:34.826 A:middle
Events that you will receive
are paused and resumed,

00:19:35.336 --> 00:19:38.856 A:middle
which you may already know
from previous iOS releases.

00:19:43.436 --> 00:19:45.386 A:middle
Now let's talk about
motion events.

00:19:46.756 --> 00:19:48.116 A:middle
This is new in watchOS 3.

00:19:48.656 --> 00:19:51.196 A:middle
The motion pause and
motion resume events.

00:19:52.536 --> 00:19:56.986 A:middle
Your watch, during a running
workout, is able to detect

00:19:56.986 --> 00:19:59.596 A:middle
that the user stopped moving.

00:19:59.596 --> 00:20:01.576 A:middle
That means they are
not running anymore.

00:19:59.596 --> 00:20:01.576 A:middle
That means they are
not running anymore.

00:20:02.446 --> 00:20:04.606 A:middle
And we will be able to
detect whenever they start

00:20:04.606 --> 00:20:05.956 A:middle
running again.

00:20:06.736 --> 00:20:12.566 A:middle
When you receive these events,
you will stop collecting data

00:20:12.746 --> 00:20:15.906 A:middle
into your workout, the
same way as you did

00:20:16.456 --> 00:20:18.216 A:middle
when the user manually paused.

00:20:18.816 --> 00:20:23.976 A:middle
However, you do not need to
pause your workout session.

00:20:24.506 --> 00:20:28.566 A:middle
Note that this is
implemented only

00:20:28.566 --> 00:20:30.486 A:middle
for the running activity type.

00:20:34.516 --> 00:20:38.316 A:middle
So let's go back into our
SpeedySloth demo application

00:20:38.446 --> 00:20:40.676 A:middle
and see how we can
incorporate some

00:20:40.676 --> 00:20:42.716 A:middle
of the concepts we
just learned about.

00:20:47.216 --> 00:20:51.326 A:middle
So I'm going to be
switching to our demo.

00:20:53.026 --> 00:21:00.646 A:middle
So to recap what we saw before,
we have our workout application,

00:20:53.026 --> 00:21:00.646 A:middle
So to recap what we saw before,
we have our workout application,

00:21:00.916 --> 00:21:04.136 A:middle
which already started our
workout session, but we can see

00:21:04.136 --> 00:21:07.936 A:middle
on the screen that calories
and meters reported as zero.

00:21:08.506 --> 00:21:10.356 A:middle
We are not accumulating
data yet.

00:21:10.856 --> 00:21:16.116 A:middle
So let's go into our workout
and see how we can fix that.

00:21:16.316 --> 00:21:19.236 A:middle
So going back to our workout
interface controller class,

00:21:19.666 --> 00:21:23.456 A:middle
I'm going to be looking
for the delegated callback

00:21:23.456 --> 00:21:25.096 A:middle
when decision changes it state.

00:21:25.456 --> 00:21:30.486 A:middle
This is workoutSession
didChangeTo toState fromState.

00:21:31.346 --> 00:21:35.286 A:middle
Here I have switch statement
which is empty for all cases.

00:21:35.636 --> 00:21:38.486 A:middle
What I'm interested in right
now is the running case.

00:21:39.456 --> 00:21:42.866 A:middle
Whenever we came from a
notStarted state that means

00:21:42.866 --> 00:21:48.196 A:middle
that the application
just started the workout.

00:21:48.306 --> 00:21:51.206 A:middle
So if you are in the running
case and coming from notStarted,

00:21:51.506 --> 00:21:53.936 A:middle
I'm going to be calling
a function called

00:21:53.936 --> 00:21:55.196 A:middle
startAccumulating Data.

00:21:56.626 --> 00:21:58.086 A:middle
So let's take a look
at this function.

00:21:58.626 --> 00:22:03.496 A:middle
What we want to do is to update
those two labels that we saw

00:21:58.626 --> 00:22:03.496 A:middle
What we want to do is to update
those two labels that we saw

00:22:03.496 --> 00:22:05.706 A:middle
on the screen, one
for your distance,

00:22:05.706 --> 00:22:09.146 A:middle
and another one for
your energy burn.

00:22:09.556 --> 00:22:12.786 A:middle
So basically we are going to be
starting two queries for each

00:22:13.036 --> 00:22:14.816 A:middle
of those two data types.

00:22:15.776 --> 00:22:19.356 A:middle
The way you start the query
is exactly what we saw during

00:22:19.356 --> 00:22:20.216 A:middle
the presentation.

00:22:21.296 --> 00:22:22.596 A:middle
We first are going

00:22:22.596 --> 00:22:25.596 A:middle
to be building a predicate
to use in your query.

00:22:25.976 --> 00:22:30.396 A:middle
Next, we are going to
be defining a handler.

00:22:30.856 --> 00:22:35.166 A:middle
In this case, I already have
implemented process function

00:22:35.516 --> 00:22:38.436 A:middle
that will grab those
samples, accumulate those,

00:22:38.626 --> 00:22:40.536 A:middle
and update my user interface.

00:22:44.046 --> 00:22:47.086 A:middle
Now, I'm ready to
create my query,

00:22:47.856 --> 00:22:50.976 A:middle
set up the updateHandler
and execute it.

00:22:53.436 --> 00:22:57.876 A:middle
And finally, what I want to do
is to save that query for later.

00:22:58.216 --> 00:23:02.506 A:middle
Because a query executed
with an updateHandler,

00:22:58.216 --> 00:23:02.506 A:middle
Because a query executed
with an updateHandler,

00:23:02.756 --> 00:23:04.896 A:middle
we want to stop it
at some point.

00:23:06.916 --> 00:23:11.876 A:middle
So let's now go and run
our application again.

00:23:12.296 --> 00:23:15.806 A:middle
Switch to the simulator.

00:23:21.376 --> 00:23:22.536 A:middle
Okay. Here we are.

00:23:22.896 --> 00:23:25.076 A:middle
So we are going to be
choosing, let's say,

00:23:25.076 --> 00:23:27.836 A:middle
a running outdoor workout.

00:23:28.996 --> 00:23:31.546 A:middle
There it is.

00:23:32.956 --> 00:23:36.536 A:middle
When we start, we can see

00:23:36.536 --> 00:23:38.716 A:middle
that we see some numbers
increasing on the screen.

00:23:38.926 --> 00:23:42.806 A:middle
This is because the watch's
simulator is generating some

00:23:42.806 --> 00:23:46.196 A:middle
fake samples for you whenever
you start a workout session.

00:23:47.436 --> 00:23:50.486 A:middle
Great. So if you take
a look at the screen,

00:23:50.586 --> 00:23:51.856 A:middle
we see there are
several buttons,

00:23:51.976 --> 00:23:54.016 A:middle
but they are currently
not doing anything.

00:23:54.756 --> 00:23:59.036 A:middle
We already discussed how you can
pause and generate marker events

00:23:59.476 --> 00:24:01.576 A:middle
for your app, so
let's go into the code

00:23:59.476 --> 00:24:01.576 A:middle
for your app, so
let's go into the code

00:24:01.576 --> 00:24:05.686 A:middle
and see how we can do that.

00:24:05.886 --> 00:24:11.496 A:middle
So here I have the didTapPause
ResumeButton function,

00:24:11.676 --> 00:24:15.076 A:middle
but it's hooked up to the
Pause button on the screen,

00:24:15.256 --> 00:24:17.166 A:middle
so I'm going to be
inserting some code here.

00:24:17.676 --> 00:24:21.886 A:middle
First I'm going to be checking
that I have a workout session,

00:24:22.476 --> 00:24:24.716 A:middle
and I'm going to be
checking the state of it.

00:24:25.286 --> 00:24:29.456 A:middle
If it's running, I'm going to
be pausing the workout session.

00:24:29.906 --> 00:24:32.546 A:middle
If it's paused, I'm
going to be resuming it.

00:24:33.056 --> 00:24:35.846 A:middle
Good. As a result of this,

00:24:36.086 --> 00:24:39.976 A:middle
your workout session will change
state, so if we go back up

00:24:44.046 --> 00:24:46.276 A:middle
to the delegate callback,

00:24:46.546 --> 00:24:50.566 A:middle
whenever your workout session
changes to some certain states,

00:24:50.566 --> 00:24:54.096 A:middle
you're going to see here that
the paused state is empty,

00:24:54.626 --> 00:24:56.606 A:middle
so we're going to be
inserting some code.

00:24:56.606 --> 00:24:59.246 A:middle
In this case I already
have implemented

00:24:59.506 --> 00:25:02.456 A:middle
pauseAccumulatingData,
which is a function

00:24:59.506 --> 00:25:02.456 A:middle
pauseAccumulatingData,
which is a function

00:25:02.456 --> 00:25:05.226 A:middle
that will basically stop
considering new samples

00:25:05.226 --> 00:25:07.596 A:middle
as they arrive into the
totals of my workout.

00:25:08.896 --> 00:25:11.906 A:middle
Similarly, we need to resume
the workout at some point,

00:25:12.266 --> 00:25:16.996 A:middle
so whenever our session
goes back to running state,

00:25:16.996 --> 00:25:21.726 A:middle
we're going to receive
resumeAccumulatingData.

00:25:22.196 --> 00:25:27.406 A:middle
The other button that we have

00:25:27.406 --> 00:25:31.106 A:middle
on the screen was
the Marker button.

00:25:32.036 --> 00:25:34.246 A:middle
In this case, what
we are wanting

00:25:34.246 --> 00:25:36.796 A:middle
to do is create a markerEvent.

00:25:37.736 --> 00:25:39.556 A:middle
We just create the workout event

00:25:39.556 --> 00:25:41.736 A:middle
with a marker type
and the current date.

00:25:42.446 --> 00:25:45.926 A:middle
We're going to be saving
that event into a local array

00:25:46.306 --> 00:25:48.696 A:middle
for later saving
into our workout.

00:25:49.196 --> 00:25:52.736 A:middle
And finally, I have a step
here that will notify the user

00:25:52.736 --> 00:25:55.016 A:middle
on the user interface.

00:25:55.016 --> 00:25:59.186 A:middle
This event just happened.

00:25:59.186 --> 00:26:03.136 A:middle
Also note that we already have
implemented the didGenerate

00:25:59.186 --> 00:26:03.136 A:middle
Also note that we already have
implemented the didGenerate

00:26:03.646 --> 00:26:08.876 A:middle
event that is a callback from
our workout session delegate.

00:26:09.086 --> 00:26:14.216 A:middle
In this case, we also want
to save the event generated

00:26:14.216 --> 00:26:16.936 A:middle
by HealthKit into the
workout events array.

00:26:16.936 --> 00:26:20.546 A:middle
So let's now run our
application again.

00:26:28.226 --> 00:26:29.726 A:middle
Give it a second
for it to launch.

00:26:34.046 --> 00:26:34.546 A:middle
Okay. Here it is.

00:26:34.726 --> 00:26:37.026 A:middle
I'm going to choose
Walking Outdoor now.

00:26:38.286 --> 00:26:39.336 A:middle
And give it a few seconds

00:26:39.336 --> 00:26:41.296 A:middle
so we can have some
numbers on the screen.

00:26:42.216 --> 00:26:44.356 A:middle
You can see at the top of
the screen that it says

00:26:44.356 --> 00:26:45.836 A:middle
that there is an active workout.

00:26:46.616 --> 00:26:50.746 A:middle
Whenever I hit the Pause
button, it goes into pause state

00:26:50.946 --> 00:26:53.826 A:middle
and you can see that the
numbers are not incremented

00:26:53.826 --> 00:26:54.946 A:middle
for calories and meters.

00:26:55.006 --> 00:26:57.686 A:middle
I can probably resume
it right now.

00:26:57.686 --> 00:27:01.646 A:middle
It goes into active state, and
the numbers increase again.

00:26:57.686 --> 00:27:01.646 A:middle
It goes into active state, and
the numbers increase again.

00:27:04.396 --> 00:27:08.416 A:middle
You can also tap on
the Marker button,

00:27:09.096 --> 00:27:11.676 A:middle
which it basically displays
something the user interface.

00:27:11.886 --> 00:27:16.156 A:middle
It is very likely that an actual
watch you can also play a haptic

00:27:16.156 --> 00:27:16.906 A:middle
for your user.

00:27:20.046 --> 00:27:22.976 A:middle
Great. So let's now switch
back to our presentation.

00:27:26.216 --> 00:27:27.536 A:middle
So let's recap what we saw.

00:27:28.136 --> 00:27:33.486 A:middle
We just saw how you can
use anchor object queries

00:27:33.946 --> 00:27:36.096 A:middle
to get information
from HealthKit

00:27:36.096 --> 00:27:38.426 A:middle
and update your workout totals.

00:27:39.286 --> 00:27:42.776 A:middle
Then we implemented
pause and resume events

00:27:43.436 --> 00:27:47.266 A:middle
in your workout application,
and finally, we show you how

00:27:47.266 --> 00:27:50.676 A:middle
to create an event
and save it for later.

00:27:54.286 --> 00:27:57.006 A:middle
Next step will be ending
your workout session.

00:27:57.316 --> 00:27:58.876 A:middle
To talk about that, I'm going

00:27:58.876 --> 00:28:01.556 A:middle
to invite my colleague
Dash again on stage.

00:27:58.876 --> 00:28:01.556 A:middle
to invite my colleague
Dash again on stage.

00:28:02.516 --> 00:28:08.766 A:middle
[ Applause ]

00:28:09.266 --> 00:28:09.786 A:middle
&gt;&gt; Hello again.

00:28:11.116 --> 00:28:12.846 A:middle
Ending and saving a
workout is simple.

00:28:13.566 --> 00:28:15.306 A:middle
With a few steps, workouts saved

00:28:15.306 --> 00:28:17.406 A:middle
from your app will
integrate seamlessly

00:28:17.406 --> 00:28:19.566 A:middle
with the activity
and health apps.

00:28:20.196 --> 00:28:21.926 A:middle
Let's take a look at
the activity app now.

00:28:26.046 --> 00:28:27.966 A:middle
Workouts saved to HealthKit
will automatically show

00:28:27.966 --> 00:28:30.076 A:middle
up in the activity
apps workout list.

00:28:31.136 --> 00:28:32.296 A:middle
Starting in iOS 10,

00:28:32.556 --> 00:28:34.786 A:middle
this includes workouts
saved on the phone.

00:28:35.296 --> 00:28:38.366 A:middle
This means that a user can do a
workout in an app on their phone

00:28:38.476 --> 00:28:39.806 A:middle
when their watch
isn't even nearby,

00:28:40.126 --> 00:28:42.606 A:middle
and they'll still get
credit in the activity app.

00:28:43.516 --> 00:28:47.546 A:middle
[ Applause ]

00:28:48.046 --> 00:28:49.896 A:middle
Workouts saved with
energy samples will be able

00:28:49.896 --> 00:28:51.396 A:middle
to contribute to
the users move ring.

00:28:52.036 --> 00:28:54.806 A:middle
Users will love getting credit
from working out in your app

00:28:55.026 --> 00:28:56.596 A:middle
in their activity day.

00:28:57.576 --> 00:29:00.206 A:middle
Let's walk through the steps
to end and save a workout

00:28:57.576 --> 00:29:00.206 A:middle
Let's walk through the steps
to end and save a workout

00:29:00.356 --> 00:29:02.886 A:middle
so that it shows up in
the user's activity app.

00:29:03.716 --> 00:29:06.146 A:middle
There are three steps
to completing a workout.

00:29:07.556 --> 00:29:09.526 A:middle
First, you end the
workout session.

00:29:12.266 --> 00:29:14.346 A:middle
Second, you save the
workout to HealthKit.

00:29:15.596 --> 00:29:19.276 A:middle
And third, you add related
samples to the saved workout,

00:29:19.386 --> 00:29:20.886 A:middle
such as energy burned
and distance.

00:29:21.876 --> 00:29:22.976 A:middle
Let's go through
these one at a time.

00:29:26.116 --> 00:29:28.686 A:middle
To end the workout
session, you simply call end

00:29:29.046 --> 00:29:31.296 A:middle
on your healthStore, and pass
along the workout session.

00:29:32.026 --> 00:29:34.626 A:middle
This will reset the devices
sensors to their normal mode.

00:29:37.096 --> 00:29:38.966 A:middle
When HealthKit finishes
ending your workout,

00:29:38.966 --> 00:29:41.216 A:middle
your workout session delegate
will receive a callback

00:29:41.216 --> 00:29:42.276 A:middle
in its state change method.

00:29:43.446 --> 00:29:45.426 A:middle
When you see that the
state has changed to ended,

00:29:45.586 --> 00:29:47.586 A:middle
it's time to save the workout.

00:29:49.956 --> 00:29:52.836 A:middle
You'll create an HKWorkout
sample to save to HealthKit.

00:29:53.716 --> 00:29:55.486 A:middle
The information that
you create your workout

00:29:55.486 --> 00:29:58.826 A:middle
with will be displayed in the
user's health and activity apps.

00:30:00.316 --> 00:30:02.866 A:middle
Make sure to use the same
activity type that you used

00:30:02.866 --> 00:30:03.986 A:middle
on your workout configuration.

00:30:04.526 --> 00:30:08.096 A:middle
Set a startDate and an
endDate for the workout,

00:30:08.096 --> 00:30:10.876 A:middle
and include an array
of workout events.

00:30:11.526 --> 00:30:13.946 A:middle
This array can include events
like pausing and resuming,

00:30:14.286 --> 00:30:16.706 A:middle
and markers or laps as
Jorge discussed earlier on.

00:30:20.136 --> 00:30:22.656 A:middle
The totalEnergyBurned
value is an HK quantity

00:30:22.786 --> 00:30:23.876 A:middle
that represents the sum

00:30:23.926 --> 00:30:27.566 A:middle
of all energy burned
during the workout session.

00:30:27.706 --> 00:30:30.516 A:middle
Likewise, the totalDistance
value is an HK quantity

00:30:30.546 --> 00:30:32.456 A:middle
that represents all
distance traveled during the

00:30:32.456 --> 00:30:33.086 A:middle
workout session.

00:30:36.086 --> 00:30:37.806 A:middle
Finally, don't forget
to add metadata.

00:30:39.136 --> 00:30:40.966 A:middle
Set a value for the
IndoorWorkout key

00:30:41.106 --> 00:30:42.976 A:middle
to indicate the location
type of your workout.

00:30:47.166 --> 00:30:49.416 A:middle
You can save this workout
sample to HealthKit simply

00:30:49.416 --> 00:30:51.596 A:middle
by passing it to the save
method on your healthStore.

00:30:52.126 --> 00:30:54.946 A:middle
When you see that it's
been successfully saved,

00:30:55.376 --> 00:30:57.006 A:middle
it's time to add
samples to the workout.

00:30:57.316 --> 00:30:58.876 A:middle
Let's talk more about
adding samples.

00:31:02.126 --> 00:31:03.676 A:middle
When you add samples
to a workout,

00:31:03.926 --> 00:31:06.516 A:middle
HealthKit creates an association
between these samples

00:31:06.586 --> 00:31:07.596 A:middle
and the workout itself.

00:31:08.156 --> 00:31:11.816 A:middle
Apps will be able to query
later on for all samples

00:31:11.816 --> 00:31:14.026 A:middle
that are associated
with a given workout.

00:31:14.616 --> 00:31:17.206 A:middle
This will be useful if you
want to graph detailed data

00:31:17.326 --> 00:31:18.546 A:middle
across your workout timeline.

00:31:21.516 --> 00:31:24.346 A:middle
Adding energy samples to
the workout is necessary

00:31:24.396 --> 00:31:25.716 A:middle
if you want the user
to get credit

00:31:25.716 --> 00:31:26.776 A:middle
in their activity move ring.

00:31:27.466 --> 00:31:30.026 A:middle
Activity will use these
associated energy samples

00:31:30.086 --> 00:31:31.406 A:middle
to compute credit for that ring.

00:31:37.046 --> 00:31:39.246 A:middle
Finally, make sure that the
totals stored previously

00:31:39.246 --> 00:31:41.406 A:middle
on your workout sample
match the sum

00:31:41.406 --> 00:31:42.816 A:middle
of all these associated samples.

00:31:46.126 --> 00:31:48.506 A:middle
To add samples to your
workout, simply pass an array

00:31:48.506 --> 00:31:50.426 A:middle
of HK samples to the add samples

00:31:50.426 --> 00:31:52.046 A:middle
to workout method
on your healthStore.

00:31:56.046 --> 00:31:57.916 A:middle
Let's update SpeedySloth
now to include ending

00:31:57.916 --> 00:31:58.796 A:middle
and saving the workout.

00:32:00.376 --> 00:32:02.636 A:middle
So when we were last in the
app, Jorge showed us how

00:32:02.636 --> 00:32:04.196 A:middle
to collect data to
display to the user.

00:32:05.056 --> 00:32:07.716 A:middle
And also how to control the
event by pausing and resuming.

00:32:08.616 --> 00:32:09.986 A:middle
You may have noticed
at the bottom

00:32:09.986 --> 00:32:11.306 A:middle
of the Workout Interface
Controller,

00:32:11.626 --> 00:32:13.166 A:middle
that there's this button
called End Workout.

00:32:13.966 --> 00:32:15.406 A:middle
When I tap it, it
doesn't do anything yet.

00:32:16.026 --> 00:32:17.536 A:middle
So we'll fix that now.

00:32:18.466 --> 00:32:20.366 A:middle
I'm back in Workout
Interface Controller,

00:32:21.136 --> 00:32:23.236 A:middle
and I have a method
called didTapEndButton.

00:32:24.276 --> 00:32:24.856 A:middle
Let's fill it in.

00:32:29.046 --> 00:32:31.616 A:middle
First, I'm saving the current
date to be our workoutEndDate.

00:32:31.876 --> 00:32:33.166 A:middle
We'll use this in just a second

00:32:33.166 --> 00:32:34.346 A:middle
when we create that
workout sample.

00:32:34.826 --> 00:32:39.726 A:middle
Next, I'm calling the end
method on my healthStore

00:32:39.726 --> 00:32:41.296 A:middle
and passing along
the workout session.

00:32:41.806 --> 00:32:44.946 A:middle
When HealthKit finishes
ending the session,

00:32:45.166 --> 00:32:47.436 A:middle
we can expect a callback
in our state change method.

00:32:48.436 --> 00:32:49.896 A:middle
I'll go back to this
state change method now.

00:32:54.046 --> 00:32:55.396 A:middle
So Jorge showed us earlier,

00:32:55.396 --> 00:32:57.326 A:middle
how to handle the
running and pause states.

00:32:58.486 --> 00:33:00.126 A:middle
Now we want to handle
this ended state.

00:32:58.486 --> 00:33:00.126 A:middle
Now we want to handle
this ended state.

00:33:03.156 --> 00:33:05.706 A:middle
We want to do two things when
the workout session is ended.

00:33:06.216 --> 00:33:08.136 A:middle
First, we want to
stop all the queries.

00:33:08.746 --> 00:33:12.146 A:middle
This method is already
implemented and it just iterates

00:33:12.146 --> 00:33:14.836 A:middle
over the array of open queries
and calls stop for each one.

00:33:17.046 --> 00:33:18.566 A:middle
Next, we want to
save the workout.

00:33:18.886 --> 00:33:19.846 A:middle
Let's implement that now.

00:33:27.086 --> 00:33:28.796 A:middle
I'm creating a workout sample

00:33:28.796 --> 00:33:30.546 A:middle
and I'm using the
activity type straight

00:33:30.546 --> 00:33:31.626 A:middle
from our workout configuration.

00:33:32.126 --> 00:33:35.896 A:middle
Then I'm setting the start
date and the end date

00:33:35.896 --> 00:33:36.996 A:middle
that we saved earlier on.

00:33:37.636 --> 00:33:41.046 A:middle
I'm including the
array of workoutEvents

00:33:41.126 --> 00:33:42.186 A:middle
that Jorge showed us how

00:33:42.186 --> 00:33:43.626 A:middle
to build during the
workout session.

00:33:47.446 --> 00:33:49.426 A:middle
I'm using the quantities
for totalEnergyBurned

00:33:49.426 --> 00:33:51.716 A:middle
and totalDistance
that we accumulated

00:33:51.716 --> 00:33:53.296 A:middle
from our data queries
during the session.

00:33:53.826 --> 00:33:58.236 A:middle
And finally, I'm including
a dictionary for metadata.

00:33:58.456 --> 00:34:01.636 A:middle
I'm setting the indoor workout
key to have a value based

00:33:58.456 --> 00:34:01.636 A:middle
I'm setting the indoor workout
key to have a value based

00:34:01.636 --> 00:34:03.896 A:middle
on the location type of
our workout configuration.

00:34:08.045 --> 00:34:09.916 A:middle
I'm passing this workout
sample to the save method

00:34:09.916 --> 00:34:11.606 A:middle
on my healthStore, which
will save it to HealthKit.

00:34:11.606 --> 00:34:15.136 A:middle
When I see that it's
successfully saved,

00:34:15.556 --> 00:34:17.505 A:middle
I'm going to call
addSamples toWorkout,

00:34:17.576 --> 00:34:19.666 A:middle
which is a function right down
here that we'll implement now.

00:34:25.096 --> 00:34:27.025 A:middle
I want to add two
samples to this workout,

00:34:27.386 --> 00:34:29.856 A:middle
one for totalEnergyBurned,
and one for totalDistance.

00:34:33.136 --> 00:34:35.565 A:middle
For totalEnergyBurned, I'm
creating a quantitySample

00:34:36.176 --> 00:34:38.416 A:middle
and I'm using the quantityType
active energy burned.

00:34:40.016 --> 00:34:42.485 A:middle
Then I'm passing the same
totalEnergyBurned quantity

00:34:42.835 --> 00:34:44.335 A:middle
that I used on my
workout sample.

00:34:45.156 --> 00:34:48.496 A:middle
This means that there will be
one big energy burned sample

00:34:48.496 --> 00:34:50.176 A:middle
that spans the entire
duration of the workout.

00:34:51.045 --> 00:34:53.996 A:middle
If you'd like to, you can create
multiple smaller energy burned

00:34:53.996 --> 00:34:56.755 A:middle
samples, just make sure that
they sum to the same total

00:34:56.755 --> 00:34:58.376 A:middle
that you set on the
HKWorkout sample.

00:35:03.176 --> 00:35:05.176 A:middle
I'm doing the same thing
for the totalDistanceSample.

00:35:06.406 --> 00:35:08.706 A:middle
I'm using the quantity type
distanceWalkingRunning.

00:35:09.316 --> 00:35:11.026 A:middle
HealthKit has three
distance types.

00:35:11.256 --> 00:35:14.006 A:middle
I'm using WalkingRunning because
our workout app only handles

00:35:14.006 --> 00:35:15.176 A:middle
walking and running distance.

00:35:16.086 --> 00:35:18.066 A:middle
If you're building a
cycling workout app,

00:35:18.066 --> 00:35:19.976 A:middle
you'd want to use
cycling distance,

00:35:20.576 --> 00:35:22.786 A:middle
and we've also just added
a new distance type,

00:35:22.936 --> 00:35:24.576 A:middle
wheelchair distance,
that you would use

00:35:24.576 --> 00:35:25.816 A:middle
for wheelchair based workouts.

00:35:29.056 --> 00:35:31.416 A:middle
I'm using the same total
distance quantity that I used

00:35:31.416 --> 00:35:34.426 A:middle
on the workout sample, and I'm
setting the same workout start

00:35:34.426 --> 00:35:34.926 A:middle
and end date.

00:35:35.066 --> 00:35:36.806 A:middle
So again, this is one
big distance sample

00:35:36.806 --> 00:35:37.976 A:middle
that spans the duration
of the workout.

00:35:41.336 --> 00:35:44.176 A:middle
I'm adding these two samples
to the workout by passing them

00:35:44.176 --> 00:35:45.676 A:middle
in an array to the add samples

00:35:45.676 --> 00:35:47.116 A:middle
to workout method
on my healthStore.

00:35:47.676 --> 00:35:51.156 A:middle
When I see that they've
been successfully added,

00:35:51.476 --> 00:35:54.006 A:middle
I know that all my data for this
workout is stored in HealthKit.

00:35:54.906 --> 00:35:56.556 A:middle
Now I want to display
that workout to the user.

00:36:00.086 --> 00:36:02.476 A:middle
I'm doing this by passing
the HKWorkout object

00:36:02.676 --> 00:36:04.206 A:middle
to a new interface
controller called

00:36:04.206 --> 00:36:05.356 A:middle
SummaryInterface Controller.

00:36:06.546 --> 00:36:08.936 A:middle
SummaryInterface Controller
is already built and knows how

00:36:08.936 --> 00:36:11.546 A:middle
to display an HKWorkout to
the user in a summary view.

00:36:11.686 --> 00:36:15.286 A:middle
I'm going to run the app again,

00:36:15.476 --> 00:36:17.806 A:middle
and we'll see how
to end our workout.

00:36:33.086 --> 00:36:34.426 A:middle
Let's do outdoor run again.

00:36:34.856 --> 00:36:35.516 A:middle
I'll press Start.

00:36:36.146 --> 00:36:38.946 A:middle
And we'll wait a few moments
for some data to collect.

00:36:45.046 --> 00:36:46.436 A:middle
Okay I'm going to press
the End Workout button now

00:36:46.436 --> 00:36:49.666 A:middle
because we have some data.

00:36:49.826 --> 00:36:51.076 A:middle
Our workout session was ended

00:36:51.076 --> 00:36:52.786 A:middle
and our sample was
stored in HealthKit.

00:36:53.196 --> 00:36:54.646 A:middle
Here's the summary
view displaying

00:36:54.646 --> 00:36:55.796 A:middle
that workout sample to us now.

00:36:57.106 --> 00:36:59.756 A:middle
To make sure that it did indeed
store properly in HealthKit,

00:37:00.086 --> 00:37:02.306 A:middle
let's take a look at the Health
app on the iPhone simulator.

00:37:05.396 --> 00:37:07.636 A:middle
Here I am in the Workouts
view of the Health app.

00:37:07.636 --> 00:37:10.316 A:middle
I'm going to tap Show
All Data to see a list

00:37:10.316 --> 00:37:11.286 A:middle
of all of our workouts.

00:37:11.876 --> 00:37:15.096 A:middle
At the top you can see a workout

00:37:15.096 --> 00:37:16.846 A:middle
that was just completed
at 11:36.

00:37:17.096 --> 00:37:17.746 A:middle
That's our workout.

00:37:17.746 --> 00:37:21.046 A:middle
I'm going to tap it to see
more information about it.

00:37:22.396 --> 00:37:24.736 A:middle
So you can see that this
is the running workout.

00:37:24.736 --> 00:37:26.596 A:middle
It had an almost
13 second duration,

00:37:26.936 --> 00:37:28.066 A:middle
and there's our start
and end date.

00:37:28.066 --> 00:37:30.056 A:middle
This is all the information
from our workout sample.

00:37:30.576 --> 00:37:32.056 A:middle
You can even see the
metadata down here

00:37:32.056 --> 00:37:33.476 A:middle
that says it's not
an indoor workout.

00:37:33.996 --> 00:37:36.866 A:middle
At the bottom, you can
see those two samples

00:37:36.866 --> 00:37:38.216 A:middle
that we associated
with the workout.

00:37:38.896 --> 00:37:40.986 A:middle
We have almost two calories
for a total energy burn.

00:37:41.206 --> 00:37:41.876 A:middle
Good job everyone.

00:37:42.716 --> 00:37:45.626 A:middle
And we have a 100th of a mile.

00:37:47.026 --> 00:37:49.576 A:middle
So looks like everything did
save to HealthKit correctly.

00:37:50.356 --> 00:37:51.686 A:middle
Let's review what we just did.

00:37:54.456 --> 00:37:57.506 A:middle
We ended our workout session by
calling end on our healthStore.

00:37:58.756 --> 00:38:00.126 A:middle
And then we waited
for our callback

00:37:58.756 --> 00:38:00.126 A:middle
And then we waited
for our callback

00:38:00.126 --> 00:38:01.616 A:middle
in our state change
delegate method.

00:38:02.376 --> 00:38:04.196 A:middle
When we saw that the
state changed to ended,

00:38:04.566 --> 00:38:06.706 A:middle
we created a workout sample
and saved it to HealthKit.

00:38:07.826 --> 00:38:10.296 A:middle
Then, we created two samples
to add to the workout,

00:38:10.646 --> 00:38:12.946 A:middle
one for totalEnergyBurned,
and one for totalDistance.

00:38:13.766 --> 00:38:16.806 A:middle
Remember associating that energy
burned sample is necessary

00:38:16.806 --> 00:38:18.976 A:middle
so that the user will get
credit in their activity ring.

00:38:22.046 --> 00:38:24.386 A:middle
So we've just built an entire
workout app for watchOS 3.

00:38:24.726 --> 00:38:25.456 A:middle
It's that simple.

00:38:26.516 --> 00:38:33.076 A:middle
[ Applause ]

00:38:33.576 --> 00:38:35.526 A:middle
Now every app on WatchOS comes

00:38:35.526 --> 00:38:37.456 A:middle
with a parent application
on iOS.

00:38:37.786 --> 00:38:39.446 A:middle
So we've added some new API's

00:38:39.446 --> 00:38:41.886 A:middle
in iOS 10 specifically
for workout apps.

00:38:42.636 --> 00:38:44.776 A:middle
To talk to you more
about these new API's I'd

00:38:44.776 --> 00:38:46.066 A:middle
like to invite Jorge back up.

00:38:46.516 --> 00:38:46.836 A:middle
Thank you.

00:38:47.516 --> 00:38:53.776 A:middle
[ Applause ]

00:38:54.276 --> 00:38:56.000 A:middle
&gt;&gt; Thank you, Dash.

00:38:59.056 --> 00:39:04.556 A:middle
So you've been developing great
applications for your iPhone.

00:38:59.056 --> 00:39:04.556 A:middle
So you've been developing great
applications for your iPhone.

00:39:05.226 --> 00:39:08.746 A:middle
So workout apps are not
only about your watch.

00:39:09.426 --> 00:39:11.046 A:middle
Starting on iOS 10,

00:39:11.306 --> 00:39:14.596 A:middle
we are providing some
new API's you can use

00:39:14.596 --> 00:39:18.196 A:middle
to implement new functionality
in your iPhone applications.

00:39:20.716 --> 00:39:25.736 A:middle
We mentioned that every
watch application comes

00:39:25.736 --> 00:39:27.786 A:middle
with a parent iPhone app.

00:39:28.966 --> 00:39:31.356 A:middle
You can use that
to your advantage

00:39:31.666 --> 00:39:35.106 A:middle
to build great experiences
for your users.

00:39:35.636 --> 00:39:40.436 A:middle
You might already be using
WatchConnectivity for messaging

00:39:40.436 --> 00:39:41.816 A:middle
between the two applications.

00:39:42.196 --> 00:39:43.646 A:middle
This is an effective way

00:39:43.646 --> 00:39:47.806 A:middle
of implementing features while
your watch is in a workout,

00:39:48.466 --> 00:39:50.046 A:middle
and the application is running.

00:39:50.626 --> 00:39:54.386 A:middle
Now we have background running,

00:39:54.606 --> 00:39:57.826 A:middle
so your application can
be running all the time.

00:39:58.086 --> 00:40:02.816 A:middle
That allows you to implement
great new functionalities.

00:39:58.086 --> 00:40:02.816 A:middle
That allows you to implement
great new functionalities.

00:40:03.346 --> 00:40:06.926 A:middle
However, in order
for this to happen,

00:40:07.286 --> 00:40:12.136 A:middle
you need to have your
watch in the workout state.

00:40:12.326 --> 00:40:16.856 A:middle
So, starting with iOS 10,
we're providing functionality

00:40:17.166 --> 00:40:22.466 A:middle
where you can start a
workout from iPhone.

00:40:24.856 --> 00:40:29.196 A:middle
That is, your watch will
be in a workout state,

00:40:29.456 --> 00:40:33.326 A:middle
without the user having to
intervene in its user interface.

00:40:34.596 --> 00:40:37.176 A:middle
So, let's take a look
at how this works.

00:40:39.806 --> 00:40:44.486 A:middle
On your iPhone application, you
will select an activity type

00:40:44.486 --> 00:40:46.656 A:middle
and a location, and
you will create a

00:40:46.656 --> 00:40:48.506 A:middle
workoutConfiguration object.

00:40:49.996 --> 00:40:54.766 A:middle
Once you have that, you send
that workoutConfiguration object

00:40:54.766 --> 00:40:56.076 A:middle
to the watch application.

00:40:56.766 --> 00:40:59.576 A:middle
If the watch application
is not already running,

00:40:59.926 --> 00:41:00.976 A:middle
it will be launched for you.

00:40:59.926 --> 00:41:00.976 A:middle
it will be launched for you.

00:41:04.046 --> 00:41:08.946 A:middle
Now, the workout application
can grab that configuration

00:41:09.106 --> 00:41:10.576 A:middle
and start a workout session.

00:41:11.156 --> 00:41:15.296 A:middle
In order for this to work,

00:41:15.526 --> 00:41:18.776 A:middle
you need to have the workout
processing background mode we

00:41:18.776 --> 00:41:20.536 A:middle
mentioned earlier in
this presentation.

00:41:23.076 --> 00:41:26.616 A:middle
So let's now take a
look at some code.

00:41:26.816 --> 00:41:28.586 A:middle
You may be familiar
with this code

00:41:28.586 --> 00:41:30.786 A:middle
because we saw it earlier
in this presentation.

00:41:31.046 --> 00:41:33.076 A:middle
This is what you do
whenever you want

00:41:33.076 --> 00:41:35.396 A:middle
to start a workout
on your watch.

00:41:35.956 --> 00:41:39.916 A:middle
You first create a
workoutConfiguration object,

00:41:40.676 --> 00:41:44.986 A:middle
and then use that to create a
workoutSession and start date.

00:41:45.516 --> 00:41:52.326 A:middle
In this case, we want to
separate this code in two parts.

00:41:52.876 --> 00:41:56.756 A:middle
The first part, creating
the workoutConfiguration,

00:41:56.846 --> 00:41:59.056 A:middle
will be executed on
your iPhone application.

00:41:59.996 --> 00:42:01.386 A:middle
Creating a workoutSession

00:41:59.996 --> 00:42:01.386 A:middle
Creating a workoutSession

00:42:01.446 --> 00:42:04.376 A:middle
and start date will be
executed on the watch app.

00:42:08.046 --> 00:42:09.896 A:middle
For this to work, you need
some sort of communicate

00:42:09.896 --> 00:42:13.166 A:middle
between the two applications,
so let's first take a look

00:42:13.166 --> 00:42:15.806 A:middle
at the iPhone application code.

00:42:18.426 --> 00:42:21.786 A:middle
First, you need to check
with WatchConnectivity

00:42:21.786 --> 00:42:23.456 A:middle
if you have an activated
session,

00:42:24.186 --> 00:42:26.806 A:middle
and if you have a watch
application installed.

00:42:27.256 --> 00:42:30.706 A:middle
Once you do that, you're ready

00:42:30.706 --> 00:42:32.486 A:middle
to create your
workoutConfiguration.

00:42:32.966 --> 00:42:37.886 A:middle
Next, in order to pass
this workoutConfiguration

00:42:38.326 --> 00:42:41.496 A:middle
to your watch application,
you're going to be calling

00:42:41.496 --> 00:42:44.356 A:middle
in the new in iOS
10 startWatchApp

00:42:44.406 --> 00:42:45.836 A:middle
with workoutConfiguration,

00:42:46.246 --> 00:42:48.456 A:middle
which is a new method
of HK healthStore.

00:42:49.086 --> 00:42:52.366 A:middle
This will grab your
workoutConfiguration and send it

00:42:52.366 --> 00:42:54.076 A:middle
over to your watch app.

00:42:59.046 --> 00:43:01.026 A:middle
So let's now look at the
watch application code.

00:42:59.046 --> 00:43:01.026 A:middle
So let's now look at the
watch application code.

00:43:01.736 --> 00:43:04.526 A:middle
What you want to do is grab
that workoutConfiguration

00:43:05.356 --> 00:43:08.566 A:middle
to create a session
and start it.

00:43:08.806 --> 00:43:13.766 A:middle
For that, you will implement
handle workoutConfiguration,

00:43:14.216 --> 00:43:17.566 A:middle
which is a new function,
which is part

00:43:17.566 --> 00:43:20.056 A:middle
of WatchKit ExtensionDelegate.

00:43:20.796 --> 00:43:22.456 A:middle
By implementing this function,

00:43:22.756 --> 00:43:24.436 A:middle
you will grab your
workouConfiguration

00:43:24.436 --> 00:43:25.856 A:middle
and are ready to start it.

00:43:27.516 --> 00:43:31.946 A:middle
So, let's now go back into
our SpeedySloth demo app,

00:43:32.356 --> 00:43:36.846 A:middle
and see how we can
actually start our workout

00:43:36.846 --> 00:43:37.976 A:middle
from your iPhone.

00:43:45.046 --> 00:43:50.766 A:middle
So, let's take a look
at our iPhone simulator.

00:43:50.766 --> 00:43:52.346 A:middle
I'm going to create
the health app.

00:43:53.436 --> 00:43:55.896 A:middle
And here I have the
iPhone version

00:43:55.896 --> 00:43:57.626 A:middle
of our SpeedySloth application.

00:43:58.096 --> 00:43:59.206 A:middle
So I'm going to launch it,

00:43:59.506 --> 00:44:02.716 A:middle
and you see that the user
interface looks very similar

00:43:59.506 --> 00:44:02.716 A:middle
and you see that the user
interface looks very similar

00:44:02.716 --> 00:44:05.426 A:middle
to what we did on the watch.

00:44:05.676 --> 00:44:09.716 A:middle
We have a user interface
that allows you

00:44:09.716 --> 00:44:12.696 A:middle
to select an Activity
Type, and a Location Type.

00:44:12.696 --> 00:44:14.226 A:middle
And then we have a Start button

00:44:14.226 --> 00:44:16.226 A:middle
that is currently
not doing anything.

00:44:17.446 --> 00:44:20.886 A:middle
So let's take a look at our code

00:44:20.886 --> 00:44:24.146 A:middle
and see how we can actually
implement that functionality.

00:44:25.586 --> 00:44:28.436 A:middle
So I'm going to be
switching to the code

00:44:28.436 --> 00:44:30.406 A:middle
for the iPhone application

00:44:30.756 --> 00:44:36.156 A:middle
and I have configuration view
controller which is the class

00:44:36.156 --> 00:44:38.096 A:middle
that handles that
screen that we just saw.

00:44:38.766 --> 00:44:40.276 A:middle
In the didTapStart button,

00:44:40.946 --> 00:44:44.476 A:middle
we're going to be
implementing our functionality.

00:44:47.156 --> 00:44:48.466 A:middle
First, we're going

00:44:48.466 --> 00:44:51.746 A:middle
to be creating our
workoutConfiguration object

00:44:52.286 --> 00:44:54.416 A:middle
with the selected activity
types and location.

00:44:54.416 --> 00:45:00.586 A:middle
This is the exact same code
that we have on the watch app.

00:44:54.416 --> 00:45:00.586 A:middle
This is the exact same code
that we have on the watch app.

00:45:00.846 --> 00:45:02.136 A:middle
Next, we are going

00:45:02.136 --> 00:45:05.066 A:middle
to be grabbing our
workoutViewController

00:45:05.316 --> 00:45:06.566 A:middle
for our storyboard.

00:45:06.916 --> 00:45:08.786 A:middle
This is the UI that we're going

00:45:08.786 --> 00:45:11.296 A:middle
to show while the
workout is running.

00:45:11.876 --> 00:45:16.456 A:middle
We are going to set the property
of workoutViewController

00:45:16.696 --> 00:45:19.696 A:middle
in order to pass the
workoutConfiguration we created.

00:45:20.666 --> 00:45:24.946 A:middle
And finally, we are going to be
presenting that user interface.

00:45:24.946 --> 00:45:29.126 A:middle
So let's take a look at
workoutViewController code,

00:45:29.446 --> 00:45:31.876 A:middle
and see what it is doing.

00:45:32.416 --> 00:45:37.286 A:middle
On the viewDidLoad method,
we see that the first thing

00:45:37.286 --> 00:45:39.836 A:middle
that we do is to
initializewatch Connectivity.

00:45:40.076 --> 00:45:43.636 A:middle
This is basically grabbing
our WatchConnectivity session

00:45:43.636 --> 00:45:45.176 A:middle
and make sure it's initialized.

00:45:47.236 --> 00:45:51.586 A:middle
Then, we are going to be calling
into startWatchApp function.

00:45:52.176 --> 00:45:59.446 A:middle
The startWatchApp function
is going to first check

00:45:59.446 --> 00:46:01.526 A:middle
that we have a valid
workoutConfiguration

00:45:59.446 --> 00:46:01.526 A:middle
that we have a valid
workoutConfiguration

00:46:02.296 --> 00:46:04.716 A:middle
that we have a valid
WatchConnectivity session,

00:46:05.206 --> 00:46:08.436 A:middle
and then this is the same code
that we saw in our slides.

00:46:08.696 --> 00:46:11.266 A:middle
We first check that the
connectivity session is

00:46:11.476 --> 00:46:14.356 A:middle
activated and that we have
our watch app installed.

00:46:15.996 --> 00:46:19.586 A:middle
Finally, we are going to be
calling in to startWatchApp

00:46:19.586 --> 00:46:20.966 A:middle
with workoutConfiguration.

00:46:22.236 --> 00:46:27.046 A:middle
Great. So now we have to go
into our WatchKit extension

00:46:27.046 --> 00:46:30.816 A:middle
to make sure that we grab that
workoutConfiguration object.

00:46:31.326 --> 00:46:34.516 A:middle
So, we are going to be
moving into the workout --

00:46:34.516 --> 00:46:38.706 A:middle
into the ExtensionDelegate
for the watch app,

00:46:40.176 --> 00:46:44.136 A:middle
and using the same code to
handle the workoutConfiguration.

00:46:44.716 --> 00:46:48.296 A:middle
When we do that, we want to
wrap that workoutConfiguration

00:46:48.406 --> 00:46:53.746 A:middle
in a context object and pass to
the Workout InterfaceController.

00:46:53.746 --> 00:46:56.936 A:middle
This is the same user interface

00:46:56.936 --> 00:46:59.886 A:middle
that we were showing
whenever you started a workout

00:46:59.886 --> 00:47:00.726 A:middle
on the watch.

00:46:59.886 --> 00:47:00.726 A:middle
on the watch.

00:47:04.126 --> 00:47:12.876 A:middle
One other thing that we want
to note here, if we're going

00:47:12.876 --> 00:47:17.826 A:middle
to Workout InterfaceController,
whenever an application --

00:47:18.316 --> 00:47:21.376 A:middle
let me see -- whenever I said
an active workout session

00:47:21.376 --> 00:47:22.046 A:middle
changes state.

00:47:22.386 --> 00:47:25.696 A:middle
We're going to be calling
this updateState function.

00:47:25.976 --> 00:47:29.076 A:middle
This is something that we
already have implemented

00:47:29.076 --> 00:47:32.726 A:middle
in our code, which is basically
going to grab the current state

00:47:32.726 --> 00:47:35.646 A:middle
of the session, and send in
through WatchConnectivity

00:47:35.886 --> 00:47:37.686 A:middle
to the iPhone application.

00:47:40.046 --> 00:47:43.906 A:middle
So, let's now run our code
switching to the iPhone app,

00:47:48.056 --> 00:47:48.946 A:middle
and take a look.

00:47:54.186 --> 00:47:54.796 A:middle
There it is.

00:47:54.966 --> 00:47:58.936 A:middle
So we are going to be selecting
outdoor walking workout.

00:47:59.686 --> 00:48:01.016 A:middle
When I press the Start button,

00:47:59.686 --> 00:48:01.016 A:middle
When I press the Start button,

00:48:01.016 --> 00:48:03.016 A:middle
you see the workout
session is starting.

00:48:03.016 --> 00:48:05.916 A:middle
If you go back to
the watch simulator,

00:48:05.916 --> 00:48:08.796 A:middle
you see that the app launch,
and it's now workout state.

00:48:09.106 --> 00:48:12.056 A:middle
Going back to the iPhone app,
you can see that now it is

00:48:12.056 --> 00:48:14.416 A:middle
in running state,
if you missed that,

00:48:14.416 --> 00:48:17.276 A:middle
I can probably pause
the workout session,

00:48:18.436 --> 00:48:20.746 A:middle
and you see that we updated
state on the other side.

00:48:20.746 --> 00:48:25.206 A:middle
And we can probably end
it, and now the state

00:48:25.206 --> 00:48:28.916 A:middle
of the workout also
changed on the other side.

00:48:29.516 --> 00:48:35.500 A:middle
[ Applause ]

00:48:38.046 --> 00:48:43.226 A:middle
So to recap, we just saw
how you can put some code

00:48:43.226 --> 00:48:47.306 A:middle
in your iPhone application,
in order to put your watch

00:48:47.606 --> 00:48:51.986 A:middle
in a workout state, and at
no point there was any user

00:48:51.986 --> 00:48:53.976 A:middle
intervention needed
on the watch.

00:48:58.046 --> 00:49:01.166 A:middle
So, let's now talk about some
basic practices we will like you

00:48:58.046 --> 00:49:01.166 A:middle
So, let's now talk about some
basic practices we will like you

00:49:01.166 --> 00:49:05.306 A:middle
to follow whenever you are
developing workout applications.

00:49:09.076 --> 00:49:12.136 A:middle
The first is that we
want you to make sure

00:49:12.386 --> 00:49:17.246 A:middle
that your watch application is
still functional whenever you

00:49:17.246 --> 00:49:20.886 A:middle
reach -- sorry, whenever
you miss reach-ability

00:49:20.886 --> 00:49:21.946 A:middle
from your iPhone.

00:49:23.796 --> 00:49:27.486 A:middle
This is, for example,
a user might expect

00:49:27.996 --> 00:49:32.016 A:middle
to start a running workout
session, leave their house,

00:49:32.016 --> 00:49:34.576 A:middle
and go for a run, leave
their phone behind.

00:49:35.746 --> 00:49:40.226 A:middle
In that situation, we do not
want you to stop the workout.

00:49:44.046 --> 00:49:46.436 A:middle
So, the first thing
that you need to do is

00:49:46.436 --> 00:49:50.356 A:middle
to keep your workout
session active,

00:49:51.016 --> 00:49:54.766 A:middle
even when you lose
connectivity with your iPhone.

00:49:58.176 --> 00:50:00.986 A:middle
Another interesting
point in this scenario,

00:49:58.176 --> 00:50:00.986 A:middle
Another interesting
point in this scenario,

00:50:01.226 --> 00:50:03.456 A:middle
is that you can use
HealthKit distance

00:50:03.836 --> 00:50:09.016 A:middle
because HealthKit is able to
generate distance samples even

00:50:09.016 --> 00:50:11.476 A:middle
when you don't have
a GPS available.

00:50:16.406 --> 00:50:24.716 A:middle
Also, we said that your
user can start a workout

00:50:24.716 --> 00:50:28.186 A:middle
from either their iPhone
or the Apple Watch.

00:50:29.556 --> 00:50:32.716 A:middle
I would advise if you
give your user the choice,

00:50:33.226 --> 00:50:36.416 A:middle
on which device they want
to start the workout from.

00:50:41.136 --> 00:50:45.236 A:middle
Other advice involves
application display

00:50:45.236 --> 00:50:46.506 A:middle
historic workouts.

00:50:47.056 --> 00:50:51.386 A:middle
If you do this, display
workouts from all sources,

00:50:51.506 --> 00:50:53.426 A:middle
not only your own app.

00:50:54.536 --> 00:50:57.286 A:middle
We want you to show
workouts generating

00:50:57.436 --> 00:50:59.896 A:middle
by other applications too.

00:51:02.156 --> 00:51:07.636 A:middle
If you're doing so, don't forget
to observe deleted objects.

00:51:08.906 --> 00:51:11.716 A:middle
You do not want to keep
displaying workouts

00:51:11.896 --> 00:51:13.976 A:middle
that were removed from
HealthKit's database.

00:51:18.406 --> 00:51:22.586 A:middle
So, to finalize today, there are
three things that we want you

00:51:22.646 --> 00:51:24.596 A:middle
to take from this presentation.

00:51:26.026 --> 00:51:28.506 A:middle
First, we learned about
background running,

00:51:28.716 --> 00:51:34.216 A:middle
which is a great way of
keeping your application updated

00:51:34.256 --> 00:51:40.616 A:middle
constantly, and having your
user interface be responsive.

00:51:44.566 --> 00:51:47.516 A:middle
Second, you learned
that you can contribute

00:51:47.616 --> 00:51:51.976 A:middle
to your activity rings by
adding samples to your workout,

00:51:52.976 --> 00:51:56.956 A:middle
either on your watch, or
your iPhone application.

00:52:00.186 --> 00:52:04.666 A:middle
And finally, third, we learned
how you can start a workout

00:52:04.666 --> 00:52:07.996 A:middle
from either your
watch or your iPhone.

00:52:08.566 --> 00:52:14.176 A:middle
So we would like you to
go home or to your office,

00:52:14.806 --> 00:52:18.126 A:middle
take a look at your code, and
apply what you learned today

00:52:18.306 --> 00:52:20.976 A:middle
to implement some great
new features in your app.

00:52:24.046 --> 00:52:26.136 A:middle
For more information, you
can go to this website

00:52:26.436 --> 00:52:28.786 A:middle
where you can see videos
from this presentation.

00:52:29.076 --> 00:52:32.056 A:middle
We have some related sessions.

00:52:32.056 --> 00:52:35.096 A:middle
One from HealthKit and another
one from Core Motion this year.

00:52:35.096 --> 00:52:37.626 A:middle
If you missed them, you can
go online and watch them.

00:52:38.186 --> 00:52:40.066 A:middle
And here are also
a few presentations

00:52:40.066 --> 00:52:42.926 A:middle
from previous years
related to this topic.

00:52:45.266 --> 00:52:46.206 A:middle
This is all for today.

00:52:46.796 --> 00:52:47.636 A:middle
Thank you very much.

00:52:47.966 --> 00:52:48.916 A:middle
Enjoy the rest of your day.

00:52:49.016 --> 00:52:51.000 A:middle
[ Applause ]
