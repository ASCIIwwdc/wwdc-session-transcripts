WEBVTT

00:00:07.516 --> 00:00:19.500 A:middle
[ Music ]

00:00:27.516 --> 00:00:33.546 A:middle
[ Applause ]

00:00:34.046 --> 00:00:35.826 A:middle
&gt;&gt; Hi, my name is Daphne Larose.

00:00:35.826 --> 00:00:37.696 A:middle
I'm a software engineer
on the Foundation Team.

00:00:38.186 --> 00:00:39.066 A:middle
Welcome to my talk.

00:00:39.476 --> 00:00:41.466 A:middle
Thanks to those of you
for sticking around.

00:00:41.466 --> 00:00:44.896 A:middle
I know it's kind
of late in the day.

00:00:45.096 --> 00:00:47.676 A:middle
So, I wanted to start
by thinking about apps

00:00:47.676 --> 00:00:49.906 A:middle
that we commonly
associate with measurements.

00:00:50.656 --> 00:00:52.356 A:middle
The first thing that comes
to mind for me, I don't know

00:00:52.356 --> 00:00:54.036 A:middle
about you, are converter apps.

00:00:54.516 --> 00:00:56.856 A:middle
Makes sense, convert
one unit to another.

00:00:57.796 --> 00:01:00.216 A:middle
But I wonder though,
if there are other apps

00:00:57.796 --> 00:01:00.216 A:middle
But I wonder though,
if there are other apps

00:01:00.566 --> 00:01:03.276 A:middle
that also use measurements but
maybe in a less obvious way.

00:01:04.965 --> 00:01:09.296 A:middle
I don't know, but when I think
about, you know, measurements,

00:01:09.296 --> 00:01:12.706 A:middle
it's interesting, right, because
we use them all the time.

00:01:13.156 --> 00:01:15.296 A:middle
We just don't normally think
about them as explicitly,

00:01:15.456 --> 00:01:17.846 A:middle
and they can pop up in
really surprising ways,

00:01:18.276 --> 00:01:21.476 A:middle
one of those ways being when
they're not in terms of units

00:01:21.506 --> 00:01:24.446 A:middle
that are common for whatever
our current context is.

00:01:24.966 --> 00:01:28.466 A:middle
So, let's say I'm in
France, and I'm using an app

00:01:28.946 --> 00:01:30.626 A:middle
that is calculating
road distance,

00:01:31.246 --> 00:01:34.746 A:middle
and I expect the measurement to
show up in terms of kilometers,

00:01:35.396 --> 00:01:36.956 A:middle
but they show up
in terms of miles.

00:01:37.126 --> 00:01:37.826 A:middle
It's like, hmm.

00:01:38.406 --> 00:01:41.746 A:middle
It makes for kind of a jarring,
not so great user experience.

00:01:42.706 --> 00:01:45.946 A:middle
And so in this talk, we're going
to introduce to you a new suite

00:01:45.946 --> 00:01:48.316 A:middle
of APIs that helps you ensure

00:01:48.316 --> 00:01:51.106 A:middle
that this never happens
in your app.

00:01:52.416 --> 00:01:54.906 A:middle
So, if we think again about
this question of, like,

00:01:54.956 --> 00:01:57.296 A:middle
other apps that we
associate with measurements,

00:01:57.486 --> 00:01:59.926 A:middle
I had mentioned converter
apps, which is still true.

00:02:00.586 --> 00:02:03.036 A:middle
But another example
could be games, right?

00:02:03.906 --> 00:02:08.186 A:middle
So, today we're talking about
this game that I'm working on.

00:02:08.226 --> 00:02:10.596 A:middle
It's called Jammin' in
the Streetz with a z

00:02:10.645 --> 00:02:12.726 A:middle
because z's are cool, and
I want my game to be cool.

00:02:13.806 --> 00:02:16.266 A:middle
So, the premise of the game is
that we have to get our player

00:02:16.266 --> 00:02:18.056 A:middle
to dance from level to level.

00:02:18.636 --> 00:02:22.156 A:middle
I have some pretty set
goals for this game.

00:02:22.466 --> 00:02:24.916 A:middle
One, I need this
game to be super fun.

00:02:24.996 --> 00:02:27.076 A:middle
Like, the most fun a
game has ever been, ever.

00:02:27.706 --> 00:02:30.976 A:middle
Two, tons of emoji,
because I love emoji.

00:02:31.716 --> 00:02:34.406 A:middle
Three, it needs to be
available worldwide.

00:02:34.406 --> 00:02:35.146 A:middle
I want it everywhere.

00:02:35.846 --> 00:02:39.296 A:middle
So, when we think
about some of things

00:02:39.296 --> 00:02:40.896 A:middle
that this game would
include, right,

00:02:41.516 --> 00:02:43.676 A:middle
every round would be
called a jam session,

00:02:44.346 --> 00:02:47.686 A:middle
and within this jam session,
it's tracking the total amount

00:02:47.686 --> 00:02:51.446 A:middle
of time that it takes our player
to get from level to level,

00:02:51.996 --> 00:02:53.766 A:middle
the distance that
they've traveled,

00:02:53.836 --> 00:02:55.996 A:middle
the number of dance
movements they've performed,

00:02:56.456 --> 00:02:59.256 A:middle
and maybe even, like, the rate
at which they're traveling.

00:02:59.256 --> 00:03:04.516 A:middle
But let's think about the things
that I had just mentioned.

00:02:59.256 --> 00:03:04.516 A:middle
But let's think about the things
that I had just mentioned.

00:03:05.376 --> 00:03:06.186 A:middle
Notice anything?

00:03:06.906 --> 00:03:07.846 A:middle
They're all measureable.

00:03:07.906 --> 00:03:10.116 A:middle
They're quantifiable
objects, right?

00:03:10.526 --> 00:03:14.036 A:middle
And so, if we were stop
this presentation right now,

00:03:14.556 --> 00:03:16.326 A:middle
whip out a computer,
and try to code this up,

00:03:17.226 --> 00:03:18.376 A:middle
how would we represent this?

00:03:19.356 --> 00:03:21.856 A:middle
Well, we could represent
them all as doubles.

00:03:22.586 --> 00:03:23.086 A:middle
That's true.

00:03:24.076 --> 00:03:27.586 A:middle
Easy. The problem with that
though is we're actually missing

00:03:27.586 --> 00:03:29.366 A:middle
some context when we do that.

00:03:29.986 --> 00:03:31.236 A:middle
And so let's look at an example.

00:03:32.806 --> 00:03:33.876 A:middle
So we have our little player.

00:03:34.156 --> 00:03:36.026 A:middle
I told you, lots of
emoji, I'm a big fan.

00:03:37.016 --> 00:03:39.886 A:middle
And our little player has
moonwalked, because why not,

00:03:40.556 --> 00:03:42.686 A:middle
and they've moonwalked
a certain distance.

00:03:43.326 --> 00:03:48.906 A:middle
Now, if we stored this distance
as 5, it's like, hmm, okay,

00:03:48.906 --> 00:03:51.146 A:middle
but what does five
actually mean?

00:03:51.516 --> 00:03:53.566 A:middle
It brings up this
question of five what?

00:03:54.836 --> 00:03:57.286 A:middle
But if we say five feet,
it's like oh, okay.

00:03:57.336 --> 00:03:58.616 A:middle
This actually makes sense.

00:03:58.806 --> 00:04:00.706 A:middle
It now has context
in a physical space.

00:03:58.806 --> 00:04:00.706 A:middle
It now has context
in a physical space.

00:04:02.206 --> 00:04:06.616 A:middle
And so now, let's talk
about the way that,

00:04:06.616 --> 00:04:08.896 A:middle
or the API that Foundation
is introducing

00:04:08.896 --> 00:04:11.486 A:middle
to accurately represent
this entire context.

00:04:11.636 --> 00:04:13.626 A:middle
So, you have a new struct.

00:04:14.306 --> 00:04:16.366 A:middle
It's called Measurement, and
it's generic on the UnitType,

00:04:16.366 --> 00:04:19.185 A:middle
and we'll get into what a
UnitType is in a little bit.

00:04:20.745 --> 00:04:24.846 A:middle
Contains a unit as well as
a value, and an initializer.

00:04:25.956 --> 00:04:29.626 A:middle
So, what's cool about this is
that now you're actually able

00:04:29.626 --> 00:04:33.346 A:middle
to represent a measurement
fully with full context.

00:04:33.966 --> 00:04:36.696 A:middle
And so if we go back
to our little player,

00:04:37.336 --> 00:04:39.646 A:middle
let's say in the game we
are not only keeping track

00:04:39.646 --> 00:04:42.466 A:middle
of distance traveled, but
we're also keeping track

00:04:42.466 --> 00:04:44.406 A:middle
of the distance that the
player has left to go.

00:04:45.116 --> 00:04:47.876 A:middle
How would we do this
with this new API?

00:04:48.816 --> 00:04:51.046 A:middle
Well, now we can
represent distance traveled

00:04:51.126 --> 00:04:52.916 A:middle
as a measurement of five feet.

00:04:53.376 --> 00:04:55.936 A:middle
We could also represent
distance to go

00:04:56.266 --> 00:04:58.436 A:middle
as a measurement of,
let's say, six feet.

00:04:59.716 --> 00:05:02.126 A:middle
And so now, you can actually
do some really cool things

00:04:59.716 --> 00:05:02.126 A:middle
And so now, you can actually
do some really cool things

00:05:02.126 --> 00:05:02.496 A:middle
with them.

00:05:02.976 --> 00:05:05.216 A:middle
You can add them together
to get a total distance,

00:05:05.596 --> 00:05:08.126 A:middle
which is a measurement
that represents 11 feet.

00:05:09.586 --> 00:05:12.446 A:middle
You can multiply them
and get, you know,

00:05:12.526 --> 00:05:13.636 A:middle
the value that you expect.

00:05:14.506 --> 00:05:16.016 A:middle
You could also divide them,

00:05:17.196 --> 00:05:19.436 A:middle
and get a similar
value, which is awesome.

00:05:19.436 --> 00:05:23.106 A:middle
So if we go back to
thinking about a unit,

00:05:24.406 --> 00:05:27.946 A:middle
what are some things that we
tend to associate with a unit?

00:05:29.056 --> 00:05:35.516 A:middle
Well, first off, every unit
has a symbol, hands down.

00:05:35.716 --> 00:05:39.866 A:middle
Units can have a dimension, and
so an example of this would be

00:05:39.866 --> 00:05:43.186 A:middle
for the dimension length.

00:05:43.426 --> 00:05:46.936 A:middle
It could use, like, feet
is a unit of length, right?

00:05:47.366 --> 00:05:51.706 A:middle
Units could also be
equivalent to each other,

00:05:51.796 --> 00:05:55.366 A:middle
so one foot could be equivalent
to approximately 0.3 meters.

00:05:56.086 --> 00:05:58.296 A:middle
And so now we have APIs

00:05:58.296 --> 00:06:00.526 A:middle
to actually represent
a unit object.

00:05:58.296 --> 00:06:00.526 A:middle
to actually represent
a unit object.

00:06:01.496 --> 00:06:04.726 A:middle
Now, if you're paying close
attention, before I had said

00:06:04.726 --> 00:06:06.446 A:middle
that every unit has a symbol,

00:06:06.696 --> 00:06:10.416 A:middle
and so in this API we're
representing that here.

00:06:11.016 --> 00:06:13.346 A:middle
We don't necessarily
represent the dimension in here

00:06:13.346 --> 00:06:16.506 A:middle
or the equivalents because not
every unit can be equivalent

00:06:16.506 --> 00:06:19.356 A:middle
to another one, and not
every unit is dimensional.

00:06:20.006 --> 00:06:22.416 A:middle
But at the very least,
every unit has a symbol,

00:06:22.486 --> 00:06:23.596 A:middle
so we're representing that here.

00:06:24.556 --> 00:06:26.026 A:middle
But if we go back
to this concept

00:06:26.026 --> 00:06:28.296 A:middle
of a dimension, what
is a dimension?

00:06:28.296 --> 00:06:29.276 A:middle
What does that actually mean?

00:06:30.206 --> 00:06:33.726 A:middle
Well, dimensions are categories
of units that can be expressed

00:06:34.066 --> 00:06:35.186 A:middle
with different kinds of units.

00:06:35.556 --> 00:06:37.456 A:middle
So, when we think of
length, as an example,

00:06:38.296 --> 00:06:40.436 A:middle
length can be represented
as kilometers,

00:06:40.496 --> 00:06:44.376 A:middle
feet, miles, what have you.

00:06:44.576 --> 00:06:47.236 A:middle
Dimensions also always have
a base unit, so going back

00:06:47.236 --> 00:06:50.226 A:middle
to the length example, the
base unit of length is meter.

00:06:50.306 --> 00:06:54.356 A:middle
You can also perform
conversions within dimensions,

00:06:54.356 --> 00:06:55.446 A:middle
within a single dimension.

00:06:55.446 --> 00:06:58.176 A:middle
So you can convert
kilometers to feet, vice versa,

00:06:58.466 --> 00:07:00.246 A:middle
meters to miles, et cetera.

00:06:58.466 --> 00:07:00.246 A:middle
meters to miles, et cetera.

00:07:00.846 --> 00:07:05.926 A:middle
So now we have API to represent
a dimension, and so you see here

00:07:05.926 --> 00:07:07.356 A:middle
that dimension subclass is Unit,

00:07:07.776 --> 00:07:11.076 A:middle
which means that it inherently
acquires the symbol property.

00:07:12.776 --> 00:07:14.266 A:middle
We have a converter property,

00:07:14.366 --> 00:07:17.376 A:middle
and I'll go into what a unit
converter is in a little bit,

00:07:17.436 --> 00:07:20.486 A:middle
but essentially it defines
the conversion of the unit to

00:07:20.486 --> 00:07:21.686 A:middle
and from its base unit.

00:07:21.686 --> 00:07:24.476 A:middle
We have an initializer,
which takes the symbol

00:07:24.476 --> 00:07:27.886 A:middle
and a converter instance,
and as I've mentioned,

00:07:27.886 --> 00:07:29.236 A:middle
every dimension has a base unit.

00:07:29.236 --> 00:07:30.456 A:middle
So now we have a class property

00:07:30.836 --> 00:07:32.226 A:middle
that will return
that unit for you.

00:07:33.006 --> 00:07:34.636 A:middle
The important thing to
remember here, though,

00:07:35.166 --> 00:07:37.576 A:middle
is that every instance
of a dimension is

00:07:37.746 --> 00:07:40.566 A:middle
in and of itself a unit.

00:07:40.686 --> 00:07:42.936 A:middle
Now, with this new API
that we're introducing,

00:07:42.936 --> 00:07:46.176 A:middle
the cool thing is that
now we are providing

00:07:46.176 --> 00:07:51.086 A:middle
to you some 170-plus units that
you can just use out of the box.

00:07:51.226 --> 00:07:52.556 A:middle
You don't even have to
define them yourself.

00:07:52.556 --> 00:07:55.386 A:middle
You can just use them, like,
after this presentation.

00:07:56.156 --> 00:08:01.236 A:middle
And most of these
units are in accordance

00:07:56.156 --> 00:08:01.236 A:middle
And most of these
units are in accordance

00:08:01.236 --> 00:08:03.706 A:middle
with the International System
of Units, so they're units

00:08:03.706 --> 00:08:05.936 A:middle
that you're already used to
seeing, which is really cool.

00:08:07.396 --> 00:08:08.656 A:middle
Now let's look at an example.

00:08:09.286 --> 00:08:12.906 A:middle
We have the dimension of
length, and it has a whole suite

00:08:13.296 --> 00:08:16.046 A:middle
of units that are class
properties representing

00:08:16.046 --> 00:08:16.786 A:middle
this dimension.

00:08:17.076 --> 00:08:19.136 A:middle
And so, if we go back
to this, you know,

00:08:19.166 --> 00:08:21.596 A:middle
instances of a dimension
are, in fact, units,

00:08:22.376 --> 00:08:24.386 A:middle
what happens is any time you
call these properties you're

00:08:24.386 --> 00:08:26.336 A:middle
getting back an instance
of unit length.

00:08:27.226 --> 00:08:30.036 A:middle
The difference between each
of these instances, that one,

00:08:30.036 --> 00:08:33.035 A:middle
their symbols are different,
and two, the converters

00:08:33.035 --> 00:08:36.696 A:middle
that define their
definition are different.

00:08:39.376 --> 00:08:43.366 A:middle
So, just an overview of all of
the classes that we're providing

00:08:43.366 --> 00:08:44.916 A:middle
to you, all the different
unit types.

00:08:45.126 --> 00:08:48.626 A:middle
Remember I told you there's like
170-plus of them, so, you know,

00:08:49.106 --> 00:08:50.636 A:middle
play with them to
your hearts' content.

00:08:51.296 --> 00:08:53.956 A:middle
But we have some pretty cool
ones here, some common ones,

00:08:53.956 --> 00:08:56.266 A:middle
like area, mass,
temperature, length.

00:08:56.676 --> 00:08:59.586 A:middle
But also, some kind of
uncommon ones like illuminance

00:08:59.586 --> 00:09:04.796 A:middle
and electric current, but sounds
really fun if play with them.

00:08:59.586 --> 00:09:04.796 A:middle
and electric current, but sounds
really fun if play with them.

00:09:05.056 --> 00:09:07.256 A:middle
So, let's go back to
our distance traveled

00:09:07.326 --> 00:09:09.286 A:middle
and our distance
to go measurements.

00:09:09.696 --> 00:09:11.166 A:middle
So, this is code
we've already seen.

00:09:12.326 --> 00:09:13.936 A:middle
Now, we're going to
comment the last two lines

00:09:13.936 --> 00:09:15.176 A:middle
out because we're
going to redefine them.

00:09:15.866 --> 00:09:17.306 A:middle
So, we're leaving
distanceTraveled alone,

00:09:18.146 --> 00:09:20.916 A:middle
but now we're defining
distanceToGo with the same value

00:09:20.916 --> 00:09:23.506 A:middle
of six, but instead of
passing in feet as the unit,

00:09:23.506 --> 00:09:24.626 A:middle
we're passing in kilometers.

00:09:25.426 --> 00:09:29.746 A:middle
Now, this is where things
start to get a little hairy,

00:09:29.836 --> 00:09:32.346 A:middle
because we're now
adding distanceTraveled

00:09:32.456 --> 00:09:35.126 A:middle
and distanceToGo
together, but one's in feet

00:09:35.176 --> 00:09:36.166 A:middle
and one's in kilometers.

00:09:37.076 --> 00:09:38.956 A:middle
What does this mean
for totalDistance?

00:09:39.076 --> 00:09:40.006 A:middle
Is it in terms of feet?

00:09:40.246 --> 00:09:41.536 A:middle
It is in terms of kilometers?

00:09:41.716 --> 00:09:43.756 A:middle
Will this stage just
blow up in five seconds?

00:09:43.826 --> 00:09:44.226 A:middle
I don't know.

00:09:45.286 --> 00:09:46.976 A:middle
But, phew, no, it won't.

00:09:47.066 --> 00:09:49.476 A:middle
Actually what happened is
that the result is in terms

00:09:49.476 --> 00:09:51.156 A:middle
of the base unit,
which is meters.

00:09:51.606 --> 00:09:55.176 A:middle
And so what's cool about this is
that Measurement is handling all

00:09:55.176 --> 00:09:56.916 A:middle
of this implicitly for you.

00:09:57.166 --> 00:09:58.596 A:middle
You don't have to
worry about it at all.

00:09:58.846 --> 00:10:00.676 A:middle
You could just use the
operators as you would

00:09:58.846 --> 00:10:00.676 A:middle
You could just use the
operators as you would

00:10:00.906 --> 00:10:02.086 A:middle
with regular scalar values

00:10:02.086 --> 00:10:05.976 A:middle
and you get the results
that you expect.

00:10:06.056 --> 00:10:09.846 A:middle
So, now let's say, and
again, I wanted to be able

00:10:09.846 --> 00:10:14.336 A:middle
to track the player at certain
points and, for the sake

00:10:14.336 --> 00:10:17.816 A:middle
of the demo we're just printing
out strings, but maybe I want

00:10:17.816 --> 00:10:19.376 A:middle
to do something funkier,

00:10:19.376 --> 00:10:21.056 A:middle
add more functionality
at some point.

00:10:21.256 --> 00:10:22.576 A:middle
But the key here is
that I want to be able

00:10:22.576 --> 00:10:24.966 A:middle
to compare these
measurements, and now you can.

00:10:24.966 --> 00:10:27.776 A:middle
So Measurement has support for
comparison operators for you

00:10:27.776 --> 00:10:28.496 A:middle
to be able to do this.

00:10:28.926 --> 00:10:32.976 A:middle
And so if we were to
friend distanceMarker,

00:10:33.796 --> 00:10:36.136 A:middle
we would get what we expect,
which is barely started,

00:10:36.176 --> 00:10:38.506 A:middle
because Measurement was
properly able to deduce

00:10:38.506 --> 00:10:41.286 A:middle
that distanceTraveled is
less than distanceToGo.

00:10:44.576 --> 00:10:47.326 A:middle
So, let's talk more
about defining a unit

00:10:47.406 --> 00:10:49.216 A:middle
because we haven't really
delved into that yet.

00:10:50.716 --> 00:10:53.196 A:middle
As previously mentioned,
units are always defined

00:10:53.196 --> 00:10:55.246 A:middle
in terms of their base unit.

00:10:56.056 --> 00:11:00.916 A:middle
There are methods that
describe this conversion to

00:10:56.056 --> 00:11:00.916 A:middle
There are methods that
describe this conversion to

00:11:01.246 --> 00:11:04.376 A:middle
and from the base unit
side, but we'll talk

00:11:04.376 --> 00:11:07.406 A:middle
about that a little bit more
when we go into UnitConverter.

00:11:09.276 --> 00:11:12.316 A:middle
The important thing, though,
to remember with this is

00:11:12.316 --> 00:11:15.126 A:middle
that conversion can only happen
within a single dimension.

00:11:15.536 --> 00:11:17.386 A:middle
So, when you think of
length, for example,

00:11:17.666 --> 00:11:22.376 A:middle
you can convert kilometers
to feet, but would you try

00:11:22.376 --> 00:11:25.026 A:middle
to convert kilometers
to seconds?

00:11:25.366 --> 00:11:27.516 A:middle
Conceptually that doesn't
actually make a lot of sense.

00:11:28.086 --> 00:11:30.496 A:middle
And so, in this case, with
Measurement, if you tried

00:11:30.496 --> 00:11:34.126 A:middle
to do that, it would
throw in Objective-C

00:11:34.126 --> 00:11:36.506 A:middle
or it would be a
fatal error in Swift.

00:11:38.896 --> 00:11:42.066 A:middle
So, remember I had
mentioned that we provided

00:11:42.066 --> 00:11:44.606 A:middle
like 170 plus units
for you out of the box.

00:11:45.036 --> 00:11:48.506 A:middle
Chances are, you won't need to
define your own custom units,

00:11:48.976 --> 00:11:51.586 A:middle
but if you do, that's the
only time you have to think

00:11:51.586 --> 00:11:53.826 A:middle
about defining them,
which is pretty cool.

00:11:53.866 --> 00:11:54.956 A:middle
You can actually just use them,

00:11:55.066 --> 00:11:57.306 A:middle
the units that are already
provided for you out of the box,

00:11:57.956 --> 00:12:00.696 A:middle
but if you are creating a
custom unit, then you can think

00:11:57.956 --> 00:12:00.696 A:middle
but if you are creating a
custom unit, then you can think

00:12:00.696 --> 00:12:02.866 A:middle
about how the converter
would be set up.

00:12:04.016 --> 00:12:06.256 A:middle
And so, the cool thing is

00:12:06.256 --> 00:12:08.646 A:middle
that Measurement can
handle the conversion

00:12:08.646 --> 00:12:11.396 A:middle
for you implicitly even
with your custom unit.

00:12:12.326 --> 00:12:15.936 A:middle
It just auto-magically works.

00:12:16.166 --> 00:12:17.766 A:middle
So, let's talk about
some custom units.

00:12:17.766 --> 00:12:19.166 A:middle
We're making some custom
units for the game.

00:12:19.896 --> 00:12:25.106 A:middle
We have a jamz unit here,
because I want to be able

00:12:25.106 --> 00:12:28.126 A:middle
to calculate total time
in a jam session in terms

00:12:28.126 --> 00:12:29.946 A:middle
of this unit called jamz.

00:12:30.286 --> 00:12:31.856 A:middle
Seconds is a little
boring for me.

00:12:32.616 --> 00:12:36.846 A:middle
But if you see here, we have
this UnitConverterLinear object.

00:12:36.946 --> 00:12:37.456 A:middle
What is that?

00:12:37.456 --> 00:12:38.996 A:middle
We haven't really
talked about that yet.

00:12:39.766 --> 00:12:41.176 A:middle
So let's go back to talking

00:12:41.176 --> 00:12:43.956 A:middle
about conversions
a little bit more.

00:12:44.196 --> 00:12:45.936 A:middle
So again, to and
from the base unit.

00:12:46.966 --> 00:12:49.876 A:middle
UnitConverter is a root class
that defines two methods

00:12:50.266 --> 00:12:53.056 A:middle
that describe this conversion.

00:12:53.416 --> 00:12:57.016 A:middle
So baseUnitValue(fromValue),
and value(fromBaseUnitValue).

00:12:58.086 --> 00:13:01.626 A:middle
UnitConverterLinear
overrides those two methods

00:12:58.086 --> 00:13:01.626 A:middle
UnitConverterLinear
overrides those two methods

00:13:01.936 --> 00:13:03.546 A:middle
and defines them linearly.

00:13:03.546 --> 00:13:05.866 A:middle
So, for all the math people
out there, it's in terms

00:13:05.866 --> 00:13:08.146 A:middle
of A X plus B, where
A is the coefficient

00:13:08.146 --> 00:13:09.026 A:middle
and B is the constant.

00:13:09.586 --> 00:13:12.476 A:middle
So, if we go back
to this jamz unit,

00:13:13.216 --> 00:13:17.796 A:middle
we see here that this
coefficient is 30,

00:13:17.796 --> 00:13:19.966 A:middle
a scalar value of
30, so we're saying

00:13:19.966 --> 00:13:24.066 A:middle
that one jamz unit is equivalent
to 30 seconds and so now,

00:13:24.146 --> 00:13:28.116 A:middle
in our linear function, we have
30 times whatever the jamz value

00:13:28.116 --> 00:13:28.436 A:middle
would be.

00:13:28.436 --> 00:13:32.206 A:middle
So, if a jam session was
four total jamz, four jamz,

00:13:32.656 --> 00:13:35.076 A:middle
then if we wanted to
convert it to seconds,

00:13:35.076 --> 00:13:37.486 A:middle
it would be four times 30
to give us 120 seconds,

00:13:38.006 --> 00:13:39.036 A:middle
and you could do the reverse.

00:13:39.036 --> 00:13:41.676 A:middle
120 divided by 30 to
get the jamz value.

00:13:42.636 --> 00:13:47.026 A:middle
Yeah. So let's say I wanted
to define other custom units,

00:13:47.356 --> 00:13:49.606 A:middle
for length, for example,
because I don't want

00:13:49.666 --> 00:13:51.956 A:middle
to calculate distance traveled
in terms of feet or meters,

00:13:51.956 --> 00:13:53.656 A:middle
I wanted to do something a
little bit more interesting,

00:13:53.656 --> 00:13:54.006 A:middle
like hopz.

00:13:55.216 --> 00:13:57.146 A:middle
So, here, same concept.

00:13:57.696 --> 00:14:01.126 A:middle
One hopz is equivalent
to 0.75 meters

00:13:57.696 --> 00:14:01.126 A:middle
One hopz is equivalent
to 0.75 meters

00:14:01.546 --> 00:14:05.226 A:middle
and so we're defining the
formulas for that here,

00:14:05.846 --> 00:14:07.916 A:middle
and same with some
other custom units

00:14:07.916 --> 00:14:09.976 A:middle
that I would create for this.

00:14:09.976 --> 00:14:14.026 A:middle
So, you start to get the idea.

00:14:14.236 --> 00:14:16.476 A:middle
So, if you recall
correctly, when I was talking

00:14:16.476 --> 00:14:19.366 A:middle
about the jam session,
one of the measurements

00:14:19.416 --> 00:14:23.466 A:middle
that I had named was the number
of dance movements performed.

00:14:24.426 --> 00:14:26.836 A:middle
Unfortunately, the
international system

00:14:26.836 --> 00:14:28.616 A:middle
of units does not
have a dimension

00:14:28.616 --> 00:14:30.336 A:middle
that recognizes dance movements.

00:14:30.336 --> 00:14:32.966 A:middle
I'm not entirely sure
why, but it's a thing

00:14:32.966 --> 00:14:34.386 A:middle
that we are defining here today.

00:14:34.506 --> 00:14:36.006 A:middle
And so, we have UnitDanceMove

00:14:36.696 --> 00:14:38.996 A:middle
with a base unit of
wackyArmMovements.

00:14:40.486 --> 00:14:43.746 A:middle
And so you see here that one
wackyArmMovement is equivalent

00:14:43.746 --> 00:14:45.756 A:middle
to another wackyArmMovement,
so what this means,

00:14:45.756 --> 00:14:48.466 A:middle
another way to think about how
you define your units is how

00:14:48.466 --> 00:14:51.626 A:middle
many of the base unit make
up this particular unit.

00:14:52.066 --> 00:14:55.726 A:middle
So, here's one-to-ones so
our coefficient is one.

00:14:55.926 --> 00:14:58.206 A:middle
Let's say we wanted to
define a robot movement.

00:14:58.746 --> 00:14:59.826 A:middle
It's like, approximately

00:14:59.826 --> 00:15:03.866 A:middle
like four wackyArmMovements,
I think [laughter].

00:14:59.826 --> 00:15:03.866 A:middle
like four wackyArmMovements,
I think [laughter].

00:15:04.086 --> 00:15:06.716 A:middle
cabbagePatch is like
three wackyArmMovements.

00:15:06.886 --> 00:15:11.736 A:middle
Sure. And of course, no dance
movement dimension is complete

00:15:11.776 --> 00:15:15.166 A:middle
without jazzHands, which is
about two wackyArmMovements.

00:15:15.636 --> 00:15:17.216 A:middle
I think it's pretty accurate,
we'll stick with that for now.

00:15:18.566 --> 00:15:22.596 A:middle
And so now, let's go back and
actually create this jam session

00:15:22.596 --> 00:15:23.976 A:middle
that I had outlined earlier.

00:15:25.036 --> 00:15:27.886 A:middle
So distance traveled, this
is in terms of steps taken,

00:15:27.886 --> 00:15:30.756 A:middle
which will be in terms of this
unit hopz that we created.

00:15:31.336 --> 00:15:33.736 A:middle
jamTime will be in
jamz, naturally,

00:15:34.706 --> 00:15:37.146 A:middle
and dance moves will be
in terms of the robot.

00:15:37.206 --> 00:15:41.816 A:middle
So our player will be roboting
the entire time, of course.

00:15:42.016 --> 00:15:44.406 A:middle
And so the dance rate
will actually be terms

00:15:44.406 --> 00:15:46.326 A:middle
of meters per second,
but if you recall,

00:15:46.586 --> 00:15:49.496 A:middle
none of the other measurements
were in meters or in seconds,

00:15:49.496 --> 00:15:51.146 A:middle
so how are we going
to derive that value?

00:15:52.216 --> 00:15:54.796 A:middle
Well, we can take stepsTaken
and convert it to meters.

00:15:55.266 --> 00:15:58.086 A:middle
We can also take the jamTime
and convert them to seconds,

00:15:59.126 --> 00:16:01.456 A:middle
and now we can actually
return a measurement that's

00:15:59.126 --> 00:16:01.456 A:middle
and now we can actually
return a measurement that's

00:16:01.456 --> 00:16:03.066 A:middle
in terms of meters per second.

00:16:03.696 --> 00:16:07.096 A:middle
And so the cool thing here
is that in very few lines

00:16:07.096 --> 00:16:08.506 A:middle
of code we were actually able

00:16:08.506 --> 00:16:11.256 A:middle
to completely define
our jamSession.

00:16:11.826 --> 00:16:18.596 A:middle
So, now we know how to actually
represent measurements and units

00:16:18.596 --> 00:16:19.846 A:middle
as model objects,
which is pretty cool.

00:16:20.506 --> 00:16:22.096 A:middle
But I told you, though,

00:16:22.296 --> 00:16:24.776 A:middle
that I want this game
available everywhere.

00:16:25.326 --> 00:16:27.916 A:middle
Now to do that we actually have
to format these measurements.

00:16:28.566 --> 00:16:29.896 A:middle
That's where things
get a little tricky.

00:16:31.196 --> 00:16:34.656 A:middle
So, if we have our player, and
let's say instead of dancing

00:16:34.656 --> 00:16:38.176 A:middle
for only five feet, they danced
the robot for five kilometers.

00:16:38.876 --> 00:16:39.346 A:middle
Hard core.

00:16:39.986 --> 00:16:41.956 A:middle
If we wanted to represent this

00:16:41.956 --> 00:16:43.416 A:middle
across the world,
how would this look?

00:16:44.606 --> 00:16:47.036 A:middle
Well, in Canada, we could
actually just write it

00:16:47.206 --> 00:16:49.516 A:middle
as it was previously written,
which would be five kilometers.

00:16:50.016 --> 00:16:53.486 A:middle
If we were to try to represent
this in Chinese, however,

00:16:53.486 --> 00:16:55.486 A:middle
we'd actually have to
translate the unit.

00:16:56.736 --> 00:16:58.736 A:middle
In Arabic, we'd have
to translate the unit

00:16:58.946 --> 00:17:01.896 A:middle
and change the number
representation and make sure

00:16:58.946 --> 00:17:01.896 A:middle
and change the number
representation and make sure

00:17:01.896 --> 00:17:03.746 A:middle
that our right-to-left
ordering is correct.

00:17:04.316 --> 00:17:06.425 A:middle
So, all of this is more
logic that I'd have

00:17:06.425 --> 00:17:07.705 A:middle
to add manually to my app.

00:17:08.715 --> 00:17:11.876 A:middle
And then finally, in the
U.S., we're like, "Kilometers?

00:17:12.066 --> 00:17:13.116 A:middle
What are those?

00:17:13.116 --> 00:17:14.356 A:middle
What are those things?"

00:17:14.356 --> 00:17:19.256 A:middle
So, then, not only do I have to
handle conversion, just in terms

00:17:19.256 --> 00:17:22.376 A:middle
of my calculations, but I also
have to handle conversions just

00:17:22.376 --> 00:17:25.396 A:middle
for formatting, which is
additional logic I have

00:17:25.396 --> 00:17:26.826 A:middle
to add to my app.

00:17:27.656 --> 00:17:28.946 A:middle
So, what's the solution here?

00:17:29.506 --> 00:17:31.576 A:middle
You let Foundation do
all the work for you.

00:17:32.296 --> 00:17:34.516 A:middle
We have a new formatter
called MeasurementFormatter.

00:17:35.186 --> 00:17:39.376 A:middle
It formatters both measurements
and units, and its locale-aware,

00:17:39.376 --> 00:17:40.836 A:middle
so you don't have to
worry about any of this.

00:17:42.156 --> 00:17:43.166 A:middle
So let's take a look at it.

00:17:43.776 --> 00:17:44.936 A:middle
Its subclass is Formatter.

00:17:44.936 --> 00:17:46.036 A:middle
If you're familiar with any

00:17:46.036 --> 00:17:48.426 A:middle
of our other formatters,
same concept.

00:17:48.936 --> 00:17:52.456 A:middle
It has the unitOptions property,
and we'll talk a little bit more

00:17:52.456 --> 00:17:53.846 A:middle
about unitOptions in a second.

00:17:54.776 --> 00:17:55.746 A:middle
It also has unitStyle.

00:17:55.746 --> 00:17:56.796 A:middle
So, again, if you're familiar

00:17:56.796 --> 00:17:58.856 A:middle
with the other formatter,
short, medium, long.

00:17:59.436 --> 00:18:02.106 A:middle
It has a locale that's setable.

00:17:59.436 --> 00:18:02.106 A:middle
It has a locale that's setable.

00:18:02.276 --> 00:18:05.966 A:middle
Now, chances are, you're
just going to default

00:18:06.076 --> 00:18:08.566 A:middle
to the current locale
of the user,

00:18:08.566 --> 00:18:11.436 A:middle
which is what this locale
will always default to,

00:18:11.816 --> 00:18:15.446 A:middle
but if you needed to set
it explicitly, you can.

00:18:16.626 --> 00:18:18.456 A:middle
It also takes a custom
numberFormatter.

00:18:18.456 --> 00:18:21.596 A:middle
So, let's say you wanted your
value in your measurement

00:18:21.596 --> 00:18:23.926 A:middle
to be represented in terms
of scientific notation,

00:18:24.116 --> 00:18:26.126 A:middle
you can provide a
custom numberFormatter

00:18:26.126 --> 00:18:28.976 A:middle
to do that for you.

00:18:29.046 --> 00:18:30.476 A:middle
It also has methods that take

00:18:30.476 --> 00:18:32.976 A:middle
in both a Measurement
object and a Unit object.

00:18:33.516 --> 00:18:36.916 A:middle
So let's talk a little bit
more about the unit options.

00:18:37.976 --> 00:18:39.866 A:middle
The cool thing is
that out-of-the-box,

00:18:39.986 --> 00:18:43.966 A:middle
by default the formatter formats
according to the preferred unit

00:18:43.966 --> 00:18:45.066 A:middle
of your user's locale.

00:18:45.296 --> 00:18:46.596 A:middle
So, you don't even
have to think about it.

00:18:47.066 --> 00:18:48.776 A:middle
It also takes into account
things like purpose.

00:18:48.806 --> 00:18:52.446 A:middle
So, you know, if you're
calculating a length in terms

00:18:52.446 --> 00:18:55.456 A:middle
of road distance verses in terms
of person height, you're going

00:18:55.456 --> 00:19:00.506 A:middle
to want to use different units
depending on the context.

00:18:55.456 --> 00:19:00.506 A:middle
to want to use different units
depending on the context.

00:19:00.506 --> 00:19:02.726 A:middle
So I'll take a look
at some of the options

00:19:02.726 --> 00:19:04.216 A:middle
that MeasurementFormatter
provides.

00:19:05.466 --> 00:19:08.536 A:middle
One is provided unit, and
so, let's say we have a case

00:19:08.536 --> 00:19:11.686 A:middle
where we want to pass in a
measurement of five kilometers,

00:19:12.006 --> 00:19:15.766 A:middle
but our locale is the U.S. Now
normally in the U.S., we would,

00:19:15.766 --> 00:19:18.616 A:middle
for road distance for
example, change it to miles

00:19:18.936 --> 00:19:20.456 A:middle
because that's what's
common for us here.

00:19:20.956 --> 00:19:23.556 A:middle
But if you set provided
unit, it'll ensure

00:19:23.556 --> 00:19:26.726 A:middle
that whatever unit you
pass in is the unit

00:19:26.726 --> 00:19:27.796 A:middle
that actually gets formatted.

00:19:29.336 --> 00:19:31.416 A:middle
There's also an action
called natural scale.

00:19:31.536 --> 00:19:36.126 A:middle
So, this is great in
particular for, like, UI stuff.

00:19:36.156 --> 00:19:38.366 A:middle
So, if your, you know, your
app is running on the watch,

00:19:38.696 --> 00:19:41.246 A:middle
and you're really concerned
about screen real estate,

00:19:41.996 --> 00:19:44.066 A:middle
then instead of putting
in a thousand meters,

00:19:44.066 --> 00:19:46.376 A:middle
which would take up a
bulk of your screen,

00:19:46.376 --> 00:19:48.876 A:middle
you can actually have it
formatted to one kilometer.

00:19:49.386 --> 00:19:52.896 A:middle
Another is temperature
without unit.

00:19:53.026 --> 00:19:54.456 A:middle
So let's say you
have a measurement

00:19:54.456 --> 00:19:56.236 A:middle
that represents 90
degrees Fahrenheit,

00:19:56.526 --> 00:19:58.086 A:middle
but you don't want
the Fahrenheit unit

00:19:58.086 --> 00:19:58.926 A:middle
to actually show.

00:19:59.356 --> 00:20:03.676 A:middle
You can set this to get the
result that you were expecting.

00:19:59.356 --> 00:20:03.676 A:middle
You can set this to get the
result that you were expecting.

00:20:03.676 --> 00:20:05.356 A:middle
So, let's play around
with some examples.

00:20:05.356 --> 00:20:06.516 A:middle
We have our formatter here,

00:20:07.486 --> 00:20:09.996 A:middle
and we have our original
distance measurement that's

00:20:09.996 --> 00:20:11.876 A:middle
in five kilometers,
because that's how far our

00:20:11.876 --> 00:20:12.456 A:middle
player danced.

00:20:13.336 --> 00:20:16.166 A:middle
And now we want to get a
resulting string from that.

00:20:17.086 --> 00:20:20.756 A:middle
You'll see that the result is
in miles and the coolest thing

00:20:20.756 --> 00:20:22.496 A:middle
about this is that in
three lines of code,

00:20:22.656 --> 00:20:24.756 A:middle
not only did we get the
result that we expected,

00:20:25.056 --> 00:20:28.016 A:middle
but we didn't have to do
anything to the formatter,

00:20:28.246 --> 00:20:30.586 A:middle
just out-of-the-box
without setting anything,

00:20:30.786 --> 00:20:33.046 A:middle
it knew exactly what to do.

00:20:33.456 --> 00:20:36.206 A:middle
Now let's say that we give it
our custom unit, the hopz unit.

00:20:36.716 --> 00:20:38.536 A:middle
And Measurement,
MeasurementFormatter

00:20:38.536 --> 00:20:42.986 A:middle
that has no conception, no idea
that hopz is actually a unit,

00:20:44.296 --> 00:20:48.246 A:middle
but we create this hopz
distance, and we pass it

00:20:48.376 --> 00:20:51.896 A:middle
to the formatter, and
it's actually still able

00:20:51.896 --> 00:20:54.326 A:middle
to do the conversion
implicitly on our behalf.

00:20:54.816 --> 00:20:58.286 A:middle
We don't have to do anything.

00:20:58.286 --> 00:21:01.146 A:middle
Now let's say though, you know,
we have these custom units

00:20:58.286 --> 00:21:01.146 A:middle
Now let's say though, you know,
we have these custom units

00:21:01.146 --> 00:21:02.526 A:middle
and we actually want
people to see them,

00:21:02.936 --> 00:21:04.106 A:middle
so we'll set provided unit.

00:21:05.036 --> 00:21:07.716 A:middle
We'll give it a measurement
that has our hopz unit again.

00:21:08.626 --> 00:21:11.726 A:middle
And now the result will
be in terms of that unit.

00:21:11.726 --> 00:21:16.166 A:middle
Now this case is a
particularly interesting case

00:21:16.246 --> 00:21:19.396 A:middle
because not only are we
providing a custom unit,

00:21:19.466 --> 00:21:21.216 A:middle
but we're also providing
a custom unit that's

00:21:21.216 --> 00:21:22.956 A:middle
within a custom dimension,
right?

00:21:23.326 --> 00:21:25.906 A:middle
And so at this point, it's
like, not really sure,

00:21:25.906 --> 00:21:27.386 A:middle
what will MeasurementFormatter
do?

00:21:28.456 --> 00:21:30.486 A:middle
Oh, well, it'll do
exactly what we expect,

00:21:30.636 --> 00:21:31.376 A:middle
which is pretty awesome.

00:21:32.046 --> 00:21:35.896 A:middle
So, now, I'm going to hand
it over to another member

00:21:35.896 --> 00:21:38.376 A:middle
of the Foundation
team, and he's going

00:21:38.376 --> 00:21:41.436 A:middle
to show how measurements
are used and can be used

00:21:41.436 --> 00:21:43.926 A:middle
and formatted in the High
Scores feature of this game.

00:21:46.766 --> 00:21:46.966 A:middle
Thanks [applause].

00:21:47.166 --> 00:21:49.026 A:middle
&gt;&gt; Thank you, Daphne.

00:21:49.026 --> 00:21:50.666 A:middle
So, my name is Peter Hosey.

00:21:50.906 --> 00:21:53.176 A:middle
I am also an engineer
on the Foundation team,

00:21:53.966 --> 00:21:57.176 A:middle
and like Daphne said, this
is our High Score list,

00:21:57.396 --> 00:21:59.986 A:middle
where we're showing a list
of the levels in the game.

00:22:00.846 --> 00:22:04.236 A:middle
As you tap on each one,
you see some basic facts

00:22:04.236 --> 00:22:06.536 A:middle
about the level, the
name, a picture of it.

00:22:07.196 --> 00:22:09.256 A:middle
You see some important
information

00:22:09.256 --> 00:22:11.356 A:middle
about playing the level,
things you need to know.

00:22:12.496 --> 00:22:15.136 A:middle
And you even see your statistics

00:22:15.136 --> 00:22:17.446 A:middle
of how well you've
done in the game.

00:22:18.676 --> 00:22:21.516 A:middle
You see things like
your high score,

00:22:21.516 --> 00:22:24.586 A:middle
how many wacky arm
movements you've done.

00:22:25.236 --> 00:22:26.566 A:middle
You see how far you've danced.

00:22:26.566 --> 00:22:27.876 A:middle
You see how fast you've danced.

00:22:29.126 --> 00:22:31.956 A:middle
But these values are
all just numbers.

00:22:32.596 --> 00:22:34.496 A:middle
They lack dimension.

00:22:35.936 --> 00:22:39.536 A:middle
So we don't know,
like, how far is 6811?

00:22:40.176 --> 00:22:46.986 A:middle
Now you could implement an
entire unit system yourself.

00:22:47.366 --> 00:22:50.506 A:middle
You could start small by just
tacking a unit onto the end

00:22:50.506 --> 00:22:51.456 A:middle
of each of these numbers.

00:22:52.216 --> 00:22:54.316 A:middle
You could maybe build out
a little more, and like,

00:22:55.706 --> 00:22:57.956 A:middle
have a unit conversion system

00:22:57.956 --> 00:23:00.566 A:middle
that will understand
different locales

00:22:57.956 --> 00:23:00.566 A:middle
that will understand
different locales

00:23:00.566 --> 00:23:02.816 A:middle
and translate the unit
names automatically,

00:23:02.816 --> 00:23:05.156 A:middle
and that's a lot
of work, isn't it?

00:23:05.256 --> 00:23:08.716 A:middle
Like Daphne said, let Foundation
do the work do the work for you.

00:23:08.716 --> 00:23:10.856 A:middle
We now have Measurement
and Unit,

00:23:10.856 --> 00:23:12.556 A:middle
and MeasurementFormatter
types in Foundation,

00:23:13.536 --> 00:23:15.976 A:middle
so let's use them in our game.

00:23:16.566 --> 00:23:21.096 A:middle
So we're going to start by
creating the custom units

00:23:21.286 --> 00:23:23.486 A:middle
that Daphne showed you,
some of them anyway.

00:23:24.016 --> 00:23:27.336 A:middle
We've got a couple of length
units, we've got our speed unit,

00:23:27.896 --> 00:23:31.136 A:middle
and we have our four
custom dance movements

00:23:31.136 --> 00:23:32.916 A:middle
that do not come
with Foundation.

00:23:35.156 --> 00:23:38.346 A:middle
Now that we've got our custom
units, we can bring these

00:23:38.346 --> 00:23:40.876 A:middle
into our model, which
is this levels struct,

00:23:41.626 --> 00:23:44.226 A:middle
which has our basic
facts about the level

00:23:44.976 --> 00:23:47.356 A:middle
and includes the
player's statistics,

00:23:47.356 --> 00:23:49.216 A:middle
which are just numbers.

00:23:49.576 --> 00:23:51.796 A:middle
So let's change them
to measurements.

00:23:52.276 --> 00:23:54.936 A:middle
So, now we have a measurement
of dance moves, a measurement

00:23:54.936 --> 00:23:56.246 A:middle
of length, and a
measurement of speed,

00:23:56.706 --> 00:23:58.346 A:middle
and as we change the properties,

00:23:58.886 --> 00:24:00.596 A:middle
so much we change
the initializer.

00:23:58.886 --> 00:24:00.596 A:middle
so much we change
the initializer.

00:24:01.246 --> 00:24:04.056 A:middle
So, now it's possible to create
a level with measurements,

00:24:04.866 --> 00:24:08.636 A:middle
and we want to do that in
the List ViewController,

00:24:08.826 --> 00:24:10.976 A:middle
which is a controller for this
view here, this is the list.

00:24:12.206 --> 00:24:16.246 A:middle
Our List ViewController
queries are synchronization API,

00:24:16.736 --> 00:24:21.496 A:middle
which returns a JSON list of
dictionaries, one per level,

00:24:21.726 --> 00:24:23.376 A:middle
containing all of
this information.

00:24:24.836 --> 00:24:27.956 A:middle
And particularly includes
the player's statistics

00:24:28.156 --> 00:24:29.166 A:middle
as just numbers.

00:24:29.836 --> 00:24:31.626 A:middle
So, we want to create
measurements

00:24:31.676 --> 00:24:32.976 A:middle
around these numbers,

00:24:34.086 --> 00:24:36.516 A:middle
so now this a number
of wackyArmMovements.

00:24:36.776 --> 00:24:38.136 A:middle
This is a number of Hopz.

00:24:38.276 --> 00:24:40.546 A:middle
This is a number of hopzPerJamz.

00:24:41.286 --> 00:24:48.096 A:middle
Now that this information is in
our model and we've created it

00:24:48.096 --> 00:24:50.036 A:middle
as measurements in our
List ViewController,

00:24:50.866 --> 00:24:52.266 A:middle
and that's the only
change that you had to make

00:24:52.266 --> 00:24:53.116 A:middle
in the List ViewController.

00:24:54.276 --> 00:24:56.426 A:middle
Now we can go over to the
Detail ViewController,

00:24:56.426 --> 00:24:59.886 A:middle
which is what shows this
view here, and shows this

00:25:00.136 --> 00:25:01.716 A:middle
for every one of these levels,

00:25:02.286 --> 00:25:07.386 A:middle
and we can use our
new measurements here.

00:25:07.526 --> 00:25:11.716 A:middle
So, we already have
one formatter in place.

00:25:11.776 --> 00:25:14.756 A:middle
This is a NumberFormatter, and
this is what does this padding

00:25:14.896 --> 00:25:17.736 A:middle
to six digits with zeros,
and we want to keep that,

00:25:18.236 --> 00:25:19.576 A:middle
but we want to build
on top of it.

00:25:19.576 --> 00:25:20.906 A:middle
We want to make this
show the units.

00:25:21.476 --> 00:25:24.336 A:middle
So we're going to add
two more formatters,

00:25:25.566 --> 00:25:27.096 A:middle
and I'll explain
why to in a moment.

00:25:28.336 --> 00:25:29.486 A:middle
Now that we've created them,

00:25:30.176 --> 00:25:32.856 A:middle
we go to the same place we're
already configuring the number

00:25:32.856 --> 00:25:34.806 A:middle
formatter, which is in
our viewedDidLoad method.

00:25:35.146 --> 00:25:37.136 A:middle
This is inherited
from UIViewController,

00:25:37.136 --> 00:25:38.096 A:middle
and here we're overwriting it.

00:25:39.086 --> 00:25:41.236 A:middle
We configure the
highScore NumberFormatter

00:25:41.236 --> 00:25:44.286 A:middle
with our minimum integer
digits, and now we're going

00:25:44.286 --> 00:25:45.976 A:middle
to configure our
MeasurementFormatter

00:25:46.656 --> 00:25:49.226 A:middle
to use our provided unit,
which is wackyArmMovements,

00:25:49.936 --> 00:25:51.066 A:middle
which you can't tell
here, can you?

00:25:52.536 --> 00:25:54.346 A:middle
And use our NumberFormatter

00:25:54.586 --> 00:25:56.886 A:middle
so that we continue
to pad to six digits.

00:25:58.286 --> 00:26:01.056 A:middle
And I mentioned we created
two new MeasurementFormatters,

00:25:58.286 --> 00:26:01.056 A:middle
And I mentioned we created
two new MeasurementFormatters,

00:26:01.056 --> 00:26:02.266 A:middle
so let's configure
the other one.

00:26:03.076 --> 00:26:05.296 A:middle
This one we want to use the
StandardNumberFormatting,

00:26:05.296 --> 00:26:06.846 A:middle
so we're not going to
set this NumberFormatter,

00:26:06.976 --> 00:26:13.186 A:middle
but we're still going to set
it to use the provided unit.

00:26:14.236 --> 00:26:18.986 A:middle
And now if I run that, oops, oh.

00:26:19.646 --> 00:26:21.946 A:middle
So, I've configured
the formatters.

00:26:22.576 --> 00:26:25.666 A:middle
Now I need to actually use the
strings that they'll give me.

00:26:27.316 --> 00:26:29.266 A:middle
So we're already
talking to one formatter,

00:26:29.606 --> 00:26:31.766 A:middle
and we say sting
from this value.

00:26:33.136 --> 00:26:34.496 A:middle
Well that worked fine
when this was a number,

00:26:34.496 --> 00:26:35.326 A:middle
but now it's a measurement.

00:26:35.596 --> 00:26:37.566 A:middle
So now we need to talk to
the MeasurementFormatter.

00:26:37.566 --> 00:26:39.286 A:middle
Now, it's a simple
one-word change.

00:26:40.286 --> 00:26:41.596 A:middle
Otherwise, it's exactly
the same.

00:26:42.496 --> 00:26:43.736 A:middle
Works the same for
any formatter.

00:26:44.906 --> 00:26:47.426 A:middle
The other two we're creating
string directly to the number,

00:26:47.736 --> 00:26:49.806 A:middle
and you can imagine how
this is not very good

00:26:49.806 --> 00:26:50.976 A:middle
for your localization effort.

00:26:52.366 --> 00:26:53.806 A:middle
Here too we want
to use a formatter.

00:26:54.936 --> 00:26:57.916 A:middle
So, we'll use our other
formatter, and it's,

00:26:58.076 --> 00:26:59.006 A:middle
again, the same thing.

00:26:59.006 --> 00:27:01.876 A:middle
We do string from, in this
case a string from Measurement,

00:26:59.006 --> 00:27:01.876 A:middle
We do string from, in this
case a string from Measurement,

00:27:02.016 --> 00:27:06.216 A:middle
and this returns a string,
and we pass that to our label.

00:27:07.276 --> 00:27:08.636 A:middle
So now we can run the app.

00:27:15.226 --> 00:27:17.626 A:middle
And now we see our
custom units show up.

00:27:18.456 --> 00:27:21.196 A:middle
So this is a start, but,

00:27:21.336 --> 00:27:24.346 A:middle
we're still not really
providing real world context,

00:27:24.346 --> 00:27:25.426 A:middle
which is our goal to start with.

00:27:26.216 --> 00:27:28.536 A:middle
We need to show these
in real world units.

00:27:29.326 --> 00:27:33.226 A:middle
So we could do some
conversion logic of our own,

00:27:33.716 --> 00:27:35.926 A:middle
but MeasurementFormatter
can do that for us.

00:27:35.926 --> 00:27:39.596 A:middle
So, we're going to create one
more MeasurementFormatter,

00:27:40.346 --> 00:27:42.806 A:middle
and as we have the custom
units, MeasurementFormatter,

00:27:43.046 --> 00:27:45.056 A:middle
we're also going to
have the Locale-Aware

00:27:45.136 --> 00:27:45.896 A:middle
MeasurementFormatter.

00:27:46.456 --> 00:27:49.666 A:middle
As we create it, same
as we configure it,

00:27:49.666 --> 00:27:52.186 A:middle
except we don't' actually
need to do anything,

00:27:52.776 --> 00:27:55.896 A:middle
because MeasurementFormatter
out-of-the-box converts

00:27:55.896 --> 00:27:58.956 A:middle
automatically to the unit

00:27:58.956 --> 00:28:00.816 A:middle
that the player expects
for their locale.

00:27:58.956 --> 00:28:00.816 A:middle
that the player expects
for their locale.

00:28:02.866 --> 00:28:06.806 A:middle
Now, this is where it's going
to be a little bit tricky,

00:28:06.806 --> 00:28:07.726 A:middle
so bear with me a moment.

00:28:08.646 --> 00:28:11.246 A:middle
We're currently talking
to one formatter,

00:28:11.526 --> 00:28:12.686 A:middle
asking it for one string,

00:28:12.846 --> 00:28:14.186 A:middle
and passing it directly
to the label.

00:28:14.186 --> 00:28:21.016 A:middle
So what we're going to do
instead, is we're going to talk

00:28:21.016 --> 00:28:23.926 A:middle
to the customUnitsMeasurement
Formatter first,

00:28:24.206 --> 00:28:25.996 A:middle
get its string for
this distance.

00:28:27.056 --> 00:28:29.676 A:middle
Then we talk to the
localeAwareMeasurement Formatter

00:28:30.026 --> 00:28:31.836 A:middle
and get its string
for this distance.

00:28:32.726 --> 00:28:35.156 A:middle
And then we'll use a
Swift string interpolation

00:28:35.386 --> 00:28:39.006 A:middle
to put these two things
together and generate one string

00:28:39.006 --> 00:28:42.806 A:middle
that we will pass to the label,
and we did this for the distance

00:28:42.806 --> 00:28:44.306 A:middle
and we do it also
for the dance rate.

00:28:44.836 --> 00:28:46.896 A:middle
And that's all we have to do.

00:28:53.136 --> 00:28:57.766 A:middle
In order to show both our
custom units and the units

00:28:57.766 --> 00:28:59.186 A:middle
that the player expects
for their locale,

00:29:00.526 --> 00:29:01.626 A:middle
their real world distance.

00:29:02.516 --> 00:29:06.596 A:middle
[ Applause ]

00:29:07.096 --> 00:29:08.456 A:middle
But we don't need to stop there,

00:29:08.566 --> 00:29:11.796 A:middle
because remember the goal
here is to have this game all

00:29:11.796 --> 00:29:13.096 A:middle
over the world in every country.

00:29:14.096 --> 00:29:16.026 A:middle
So miles is great in
the United States,

00:29:16.026 --> 00:29:16.896 A:middle
we're in the United States.

00:29:16.896 --> 00:29:17.646 A:middle
We see miles.

00:29:17.646 --> 00:29:20.206 A:middle
But we want to make sure
this works in every country.

00:29:21.236 --> 00:29:25.246 A:middle
So I'm going to make use of
an Xcode feature that's part

00:29:25.246 --> 00:29:28.966 A:middle
of your scheme, so I'm going
to edit my scheme here.

00:29:39.356 --> 00:29:40.846 A:middle
I'm going to duplicate
the scheme,

00:29:41.376 --> 00:29:43.826 A:middle
and when it duplicates
the scheme.

00:29:43.826 --> 00:29:47.556 A:middle
It's going to ask me for a
name for it, so I'm going

00:29:47.726 --> 00:29:49.936 A:middle
to give my scheme a
very distinctive name.

00:29:50.696 --> 00:29:56.766 A:middle
And now, having named my scheme,

00:29:57.346 --> 00:30:00.816 A:middle
I'm going to make one simple
change, under the run verb,

00:29:57.346 --> 00:30:00.816 A:middle
I'm going to make one simple
change, under the run verb,

00:30:03.066 --> 00:30:06.506 A:middle
Options tab, Application Region.

00:30:07.536 --> 00:30:14.586 A:middle
I'm going to our testing into an
exotic locale, like, say Canada.

00:30:15.396 --> 00:30:21.776 A:middle
And now, I'm going to
run with this scheme,

00:30:21.996 --> 00:30:24.256 A:middle
and with no code
change to the app,

00:30:24.256 --> 00:30:26.686 A:middle
with no configuration
changes in the simulator,

00:30:26.906 --> 00:30:29.746 A:middle
just changing the scheme, we
can now see that in Canada,

00:30:29.796 --> 00:30:30.926 A:middle
this shows kilometers.

00:30:32.976 --> 00:30:35.006 A:middle
That's all you have to
do to make this work

00:30:35.006 --> 00:30:36.576 A:middle
with our new Measurement
and Unit

00:30:36.576 --> 00:30:38.666 A:middle
and MeasurementFormatter
types in Foundation.

00:30:38.986 --> 00:30:39.316 A:middle
Thank you [applause].

00:30:40.276 --> 00:30:42.966 A:middle
Thank you, Daphne.

00:30:43.396 --> 00:30:44.316 A:middle
&gt;&gt; Thanks so much, Peter.

00:30:44.316 --> 00:30:46.616 A:middle
So, obviously this game
is going to be a huge hit.

00:30:46.616 --> 00:30:50.446 A:middle
I'm, like, super
pumped about it.

00:30:50.706 --> 00:30:51.946 A:middle
Let's wrap up real quick though.

00:30:52.206 --> 00:30:55.966 A:middle
So, we just saw throughout
this whole talk

00:30:55.966 --> 00:30:59.246 A:middle
and in the demo how Measurements
and Units are now model objects

00:30:59.246 --> 00:31:01.306 A:middle
that we can use in our apps,
which is really awesome.

00:30:59.246 --> 00:31:01.306 A:middle
that we can use in our apps,
which is really awesome.

00:31:01.776 --> 00:31:04.096 A:middle
We also saw that it's
super easy to format them

00:31:04.126 --> 00:31:09.246 A:middle
and they require very little
work on our part, which is cool.

00:31:09.246 --> 00:31:12.556 A:middle
And the best part
is that we get all

00:31:12.556 --> 00:31:15.886 A:middle
of this very powerful
localization for free,

00:31:15.886 --> 00:31:19.126 A:middle
without having to specify
any objects, or any options,

00:31:19.126 --> 00:31:20.316 A:middle
just right out of the box.

00:31:21.216 --> 00:31:22.336 A:middle
So, now you don't actually have

00:31:22.386 --> 00:31:25.056 A:middle
to suddenly become a
polyglot or, you know,

00:31:25.596 --> 00:31:27.876 A:middle
change all the logic
and coding in your app

00:31:27.926 --> 00:31:29.076 A:middle
to be able to support this.

00:31:29.136 --> 00:31:30.786 A:middle
You could just use it as-is.

00:31:31.676 --> 00:31:34.516 A:middle
If you'd like more information,
you should check out the link.

00:31:34.646 --> 00:31:37.776 A:middle
These sessions are
actually already passed,

00:31:37.886 --> 00:31:39.656 A:middle
but if you're super
interested in it,

00:31:39.656 --> 00:31:41.396 A:middle
I would recommend
checking out the videos,

00:31:42.766 --> 00:31:43.816 A:middle
and thank you so much.

00:31:44.516 --> 00:31:48.500 A:middle
[ Applause ]
