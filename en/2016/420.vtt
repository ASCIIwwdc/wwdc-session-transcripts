WEBVTT

00:00:06.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:22.466 --> 00:00:22.956 A:middle
&gt;&gt; Hello.

00:00:23.516 --> 00:00:26.956 A:middle
[ Applause ]

00:00:27.456 --> 00:00:29.636 A:middle
Welcome to optimizing
web content in your app.

00:00:29.846 --> 00:00:31.096 A:middle
My name's Jonathan Davis.

00:00:31.476 --> 00:00:32.996 A:middle
I'm the web technology's
evangelist

00:00:32.996 --> 00:00:34.176 A:middle
for Safari and WebKit.

00:00:34.896 --> 00:00:37.326 A:middle
Now let me get something
out of the way up-front.

00:00:37.326 --> 00:00:40.776 A:middle
I've had people tell me I
look like Edward Snowden,

00:00:40.776 --> 00:00:42.316 A:middle
but I promise you I am not him,

00:00:43.216 --> 00:00:45.206 A:middle
but with all the
satellites flying overhead,

00:00:45.586 --> 00:00:46.956 A:middle
they may be all out to get us.

00:00:47.826 --> 00:00:50.826 A:middle
That aside, I'm really excited
to show you some new things

00:00:50.826 --> 00:00:52.236 A:middle
that will help you
get more performance

00:00:52.236 --> 00:00:53.596 A:middle
out of web content in your app.

00:00:53.856 --> 00:00:57.716 A:middle
And we've all known for a long
time that performance is key

00:00:57.716 --> 00:00:59.396 A:middle
to a great user experience.

00:00:59.396 --> 00:01:02.856 A:middle
So if you're an app
developer that uses WebViews

00:00:59.396 --> 00:01:02.856 A:middle
So if you're an app
developer that uses WebViews

00:01:02.856 --> 00:01:04.446 A:middle
and JSContext in app today.

00:01:05.426 --> 00:01:07.896 A:middle
And you care about performance,
you're in the right place.

00:01:08.576 --> 00:01:09.976 A:middle
So we're talking
about performance.

00:01:10.296 --> 00:01:11.946 A:middle
And in this day and
age, what we really mean

00:01:11.946 --> 00:01:14.096 A:middle
by performance is battery life.

00:01:14.146 --> 00:01:17.396 A:middle
I mean battery life is the
ultimate limited resource.

00:01:17.696 --> 00:01:20.166 A:middle
It can be the difference in
making that one last phone call

00:01:20.336 --> 00:01:23.706 A:middle
or sending that last critical
file before the battery dies.

00:01:24.046 --> 00:01:26.276 A:middle
And performance really
matters to our users,

00:01:26.756 --> 00:01:29.426 A:middle
and they naturally choose
apps that don't slow them down

00:01:29.466 --> 00:01:30.726 A:middle
and don't drain their battery.

00:01:31.316 --> 00:01:34.266 A:middle
So what's we've all learned
together, from users' feedback

00:01:34.266 --> 00:01:37.436 A:middle
and from each other, is that
performance really matters

00:01:37.436 --> 00:01:38.956 A:middle
because battery life matters.

00:01:39.386 --> 00:01:44.236 A:middle
So this year we focused on
giving you better tools to find

00:01:44.236 --> 00:01:46.646 A:middle
and fix performance
issues in your web content.

00:01:47.206 --> 00:01:49.646 A:middle
Now we have tools for
apps like for Swift,

00:01:49.646 --> 00:01:51.776 A:middle
and Objective-C code,
like Instruments.

00:01:52.306 --> 00:01:54.616 A:middle
And we have Web Inspector
for web developers,

00:01:54.616 --> 00:01:56.056 A:middle
creating web pages and sites.

00:01:56.786 --> 00:01:59.356 A:middle
But don't think that
just because you choose

00:01:59.356 --> 00:02:00.976 A:middle
to use web technologies
in your app

00:01:59.356 --> 00:02:00.976 A:middle
to use web technologies
in your app

00:02:01.016 --> 00:02:02.166 A:middle
that you don't have any tools.

00:02:02.476 --> 00:02:05.326 A:middle
In fact, I'm going to show you
today that all the same tools

00:02:05.326 --> 00:02:07.826 A:middle
that are developed to help
people build websites work just

00:02:07.826 --> 00:02:11.015 A:middle
as well for web technologies
in apps.

00:02:11.276 --> 00:02:12.796 A:middle
So I want to start
today by showing you how

00:02:12.796 --> 00:02:15.716 A:middle
to connect Web Inspector to
your WebViews in JSContext,

00:02:15.716 --> 00:02:18.506 A:middle
so you have the right tool
ready to go when you need it.

00:02:18.616 --> 00:02:21.436 A:middle
Then you're going to learn
about some new features

00:02:21.436 --> 00:02:24.086 A:middle
that will help you understand
where time is being spent

00:02:24.086 --> 00:02:27.016 A:middle
in your JavaScript code and how
these new features will help you

00:02:27.016 --> 00:02:29.666 A:middle
find performance
issues lightning fast.

00:02:30.176 --> 00:02:33.556 A:middle
And if you've ever wished you
could see how memory is used

00:02:33.556 --> 00:02:36.966 A:middle
by your web content, we've added
new timelines to Web Inspector

00:02:36.966 --> 00:02:38.396 A:middle
that I can't wait to show you.

00:02:38.606 --> 00:02:39.186 A:middle
They're going to save you

00:02:39.186 --> 00:02:41.576 A:middle
so much time finding
memory growth issues.

00:02:41.986 --> 00:02:42.316 A:middle
All right?

00:02:42.786 --> 00:02:43.806 A:middle
So let's get started.

00:02:45.046 --> 00:02:45.986 A:middle
And the first thing
we're going to need

00:02:45.986 --> 00:02:48.766 A:middle
to do is connect Web
Inspector to our app content.

00:02:49.486 --> 00:02:51.036 A:middle
Now there are all
sorts of reasons

00:02:51.036 --> 00:02:52.846 A:middle
to use web technologies
in your apps.

00:02:53.586 --> 00:02:56.346 A:middle
It could be some modular
JavaScript in a JS context,

00:02:56.346 --> 00:02:58.156 A:middle
so it's easy to swap
out the logic

00:02:58.156 --> 00:02:59.976 A:middle
or add new modules
without re-compiling.

00:03:00.756 --> 00:03:02.626 A:middle
And some of you may
be using JSContext

00:03:02.626 --> 00:03:05.816 A:middle
with TVML in a tvOS app.

00:03:05.986 --> 00:03:08.106 A:middle
And another reason to
use web technologies is

00:03:08.106 --> 00:03:09.676 A:middle
when you want to
show web content.

00:03:10.156 --> 00:03:12.116 A:middle
Like a web page from
a third-party website.

00:03:12.116 --> 00:03:13.716 A:middle
A site you don't control.

00:03:13.976 --> 00:03:16.566 A:middle
And for that, you're probably
using Safari View Controller

00:03:16.566 --> 00:03:18.456 A:middle
and if you're not, you
may want to take a look

00:03:18.456 --> 00:03:20.756 A:middle
at last year's session
Introducing Safari

00:03:20.756 --> 00:03:21.426 A:middle
View Controller.

00:03:22.426 --> 00:03:26.016 A:middle
But if you're showing content
that you own or control

00:03:26.176 --> 00:03:29.956 A:middle
or can customize content that
happens to be written in HTML,

00:03:29.956 --> 00:03:34.276 A:middle
CSS or JavaScript, content that
augments your app experience.

00:03:34.616 --> 00:03:36.346 A:middle
WKWebView is the best choice.

00:03:36.706 --> 00:03:37.946 A:middle
And it's essentially a rectangle

00:03:37.946 --> 00:03:39.796 A:middle
where web content is
drawn into your app.

00:03:40.296 --> 00:03:43.686 A:middle
It was introduced in iOS
8 and OS 10 Yosemite.

00:03:44.476 --> 00:03:47.556 A:middle
And if you're still using
a WebView or UIWebView,

00:03:47.616 --> 00:03:49.266 A:middle
you're really going
to want to take a look

00:03:49.266 --> 00:03:51.176 A:middle
at upgrading to WKWebView.

00:03:51.566 --> 00:03:54.806 A:middle
In fact, upgrading to WKWebView
allows you to take advantage

00:03:54.806 --> 00:03:56.626 A:middle
of the Nitro JavaScript
Core engine

00:03:56.806 --> 00:04:00.016 A:middle
and the four-tier JIT compiler
for a nice speed boost.

00:03:56.806 --> 00:04:00.016 A:middle
and the four-tier JIT compiler
for a nice speed boost.

00:04:00.726 --> 00:04:02.666 A:middle
So if you want to learn
more about WKWebView,

00:04:02.796 --> 00:04:05.086 A:middle
I recommend taking a
look at the 2014 talk

00:04:05.086 --> 00:04:06.806 A:middle
that introduced the
modern WebKit API.

00:04:08.016 --> 00:04:11.496 A:middle
So last year we added some
great new features to WKWebView,

00:04:11.496 --> 00:04:14.386 A:middle
like load file URL,
custom user agent strings

00:04:14.666 --> 00:04:16.596 A:middle
and the WK website
data store API.

00:04:17.476 --> 00:04:20.495 A:middle
And today, with iOS
10 and macOS Sierra,

00:04:20.826 --> 00:04:22.286 A:middle
we've improved 3D-touch support.

00:04:23.066 --> 00:04:25.656 A:middle
And now we allow your app to
implement those sweet Peek

00:04:25.656 --> 00:04:27.666 A:middle
and Pop events in WKWebView.

00:04:29.326 --> 00:04:31.496 A:middle
Now like I said earlier,
just because you've chosen

00:04:31.496 --> 00:04:32.916 A:middle
to use web technologies
in your app,

00:04:33.816 --> 00:04:35.206 A:middle
doesn't mean you
don't have any tools.

00:04:35.206 --> 00:04:37.866 A:middle
In all of these cases, you can
connect Web Inspector to dig

00:04:37.866 --> 00:04:40.206 A:middle
into what your web content
or JavaScript is doing.

00:04:41.066 --> 00:04:42.806 A:middle
But before you can
use Web Inspector,

00:04:42.936 --> 00:04:44.976 A:middle
you'll need to enable
the develop menu.

00:04:45.216 --> 00:04:47.606 A:middle
So just load up Safari
Preferences and go

00:04:47.606 --> 00:04:50.056 A:middle
over to the Advanced
tab and at the bottom,

00:04:50.166 --> 00:04:51.336 A:middle
you'll see this check box.

00:04:51.626 --> 00:04:53.976 A:middle
And it says Show
Develop menu in menu bar.

00:04:54.776 --> 00:04:56.716 A:middle
Just give that a
click to check the box

00:04:56.956 --> 00:04:59.776 A:middle
and the Develop Menu will appear
in the menu bar for Safari.

00:05:00.406 --> 00:05:04.436 A:middle
Now to allow Web Inspector
to connect your iOS devices,

00:05:04.436 --> 00:05:05.836 A:middle
there's a setting
you need to turn on.

00:05:06.546 --> 00:05:10.216 A:middle
So in the Settings app,
on iOS, tap on Safari.

00:05:10.496 --> 00:05:13.226 A:middle
Then down at the
bottom, tap on Advanced

00:05:14.026 --> 00:05:16.026 A:middle
and toggle the Web
Inspector setting On.

00:05:16.876 --> 00:05:19.086 A:middle
Now you can connect your
device to your Mac and check

00:05:19.086 --> 00:05:20.646 A:middle
out the Develop menu in Safari.

00:05:21.656 --> 00:05:24.616 A:middle
Now something that's really
cool in the Develop menu,

00:05:24.616 --> 00:05:26.686 A:middle
something you may not
have ever noticed before,

00:05:26.686 --> 00:05:29.026 A:middle
is you can see a list
of devices attached.

00:05:29.026 --> 00:05:31.546 A:middle
There's an iPhone
connected, a MacBook Pro

00:05:31.746 --> 00:05:32.866 A:middle
and the simulators there.

00:05:33.486 --> 00:05:35.516 A:middle
And all you have to do
to attach to one of these

00:05:35.516 --> 00:05:36.916 A:middle
and start using the tools

00:05:36.916 --> 00:05:39.206 A:middle
for debugging is just
choose the Device menu.

00:05:39.476 --> 00:05:42.166 A:middle
And you get a list of all
the WebViews and JSContexts

00:05:42.166 --> 00:05:43.376 A:middle
that are running on the device.

00:05:43.816 --> 00:05:46.636 A:middle
And this Mac app here
doesn't even use WebKit.

00:05:46.636 --> 00:05:48.016 A:middle
It's using JavaScript.

00:05:48.136 --> 00:05:50.656 A:middle
And I can connect right
to it and use the tools.

00:05:51.576 --> 00:05:54.976 A:middle
Now for iOS, apps will
only show up when you build

00:05:54.976 --> 00:05:56.206 A:middle
and run them from Xcode.

00:05:56.926 --> 00:05:58.426 A:middle
But when we're talking
about a Mac app,

00:05:58.796 --> 00:06:00.186 A:middle
there's just one more
thing you got to do.

00:05:58.796 --> 00:06:00.186 A:middle
there's just one more
thing you got to do.

00:06:01.276 --> 00:06:02.766 A:middle
To protect the integrity
of your app,

00:06:02.766 --> 00:06:05.366 A:middle
we don't let just
anyone download your app

00:06:05.366 --> 00:06:08.156 A:middle
and use Web Inspector
to poke around your app.

00:06:08.676 --> 00:06:10.186 A:middle
So you'll need to
add this entitlement

00:06:10.186 --> 00:06:12.286 A:middle
to your app's Entitlements
File for local development.

00:06:13.306 --> 00:06:15.606 A:middle
You probably already
have an Entitlements file

00:06:15.606 --> 00:06:17.546 A:middle
but if you don't, it's
pretty easy to create one.

00:06:17.546 --> 00:06:20.306 A:middle
You just create a new plist
with a .entitlements extension,

00:06:20.906 --> 00:06:23.496 A:middle
set the code signing
entitlements path to that file

00:06:23.996 --> 00:06:25.416 A:middle
in Xcode's build settings.

00:06:26.506 --> 00:06:28.246 A:middle
So you add this while
you're developing

00:06:28.356 --> 00:06:31.476 A:middle
and then you take it back
out when you ship your app.

00:06:31.786 --> 00:06:33.916 A:middle
Then once you have this
entitlement, your device

00:06:33.916 --> 00:06:35.446 A:middle
and app will show up
in the Develop menu

00:06:35.446 --> 00:06:36.486 A:middle
and you can attach to it.

00:06:36.816 --> 00:06:40.706 A:middle
And it's easy -- just that
easy to connect Web Inspector

00:06:40.706 --> 00:06:42.666 A:middle
to your JSContext and WebViews.

00:06:44.806 --> 00:06:47.666 A:middle
Okay. So we're up and running
with Web Inspector and our apps.

00:06:48.676 --> 00:06:51.186 A:middle
Time to move onto some new
features in Web Inspector.

00:06:51.186 --> 00:06:53.836 A:middle
And I want to start with
profiling your JavaScript code.

00:06:54.796 --> 00:06:57.586 A:middle
So we've had a profiler in
JavaScript for a long time,

00:06:57.646 --> 00:06:59.796 A:middle
and this year we have a
much better one that's going

00:06:59.796 --> 00:07:02.656 A:middle
to be way more effective at
helping you quickly figure

00:06:59.796 --> 00:07:02.656 A:middle
to be way more effective at
helping you quickly figure

00:07:02.656 --> 00:07:05.466 A:middle
out where your most expensive
JavaScript is getting called.

00:07:05.466 --> 00:07:06.496 A:middle
And the reason is simple.

00:07:07.276 --> 00:07:09.826 A:middle
The new profiler uses
a sampling technique

00:07:09.886 --> 00:07:12.636 A:middle
that doesn't affect your
performance anywhere near

00:07:12.636 --> 00:07:13.476 A:middle
as much as before.

00:07:14.146 --> 00:07:17.136 A:middle
So we had a profiler in an
era before there was really

00:07:17.136 --> 00:07:17.586 A:middle
a compiler.

00:07:17.586 --> 00:07:18.506 A:middle
It was an interpreter.

00:07:19.226 --> 00:07:23.136 A:middle
But now we have this very
powerful four-tier JIT compiler,

00:07:23.436 --> 00:07:26.936 A:middle
and the right profiler for that
is really a sampling profiler.

00:07:27.626 --> 00:07:29.536 A:middle
And the sampling
profiler tells you

00:07:29.536 --> 00:07:31.526 A:middle
where time is being
spent in your code.

00:07:31.746 --> 00:07:32.986 A:middle
It helps you answer questions

00:07:32.986 --> 00:07:36.406 A:middle
like what code is
costing us the most time?

00:07:36.576 --> 00:07:38.896 A:middle
It samples the running
program every millisecond,

00:07:39.116 --> 00:07:41.776 A:middle
and it pauses execution
briefly to take a quick snapshot

00:07:41.776 --> 00:07:43.126 A:middle
of all the code that's running.

00:07:43.646 --> 00:07:46.916 A:middle
And it can also take samples
while running your code

00:07:46.916 --> 00:07:48.996 A:middle
with all four tiers
of a JIT enabled.

00:07:48.996 --> 00:07:50.026 A:middle
So that means it's sampling

00:07:50.026 --> 00:07:52.046 A:middle
at near the true
speed of your code.

00:07:52.616 --> 00:07:56.246 A:middle
And since handling breakpoints
can cause code de-optimization,

00:07:56.496 --> 00:07:57.986 A:middle
we temporarily ignore them.

00:07:58.526 --> 00:07:59.776 A:middle
So while you're profiling,

00:08:00.016 --> 00:08:02.596 A:middle
you get the truest
performance for your web app.

00:08:03.046 --> 00:08:05.156 A:middle
There isn't nearly the
same performance cost

00:08:05.416 --> 00:08:06.856 A:middle
to using the sampling profiler.

00:08:07.116 --> 00:08:10.166 A:middle
And that literally means
while profiling your code,

00:08:10.666 --> 00:08:13.226 A:middle
it can run at up
to 30 times faster.

00:08:14.366 --> 00:08:17.256 A:middle
It makes the whole process of
profiling your code much quicker

00:08:17.256 --> 00:08:20.276 A:middle
and easier, and you get much
more accurate data as a result.

00:08:21.576 --> 00:08:24.706 A:middle
This was such an exciting
development that our team,

00:08:24.706 --> 00:08:27.786 A:middle
our Web Inspector team, was
able to take advantage of this

00:08:27.786 --> 00:08:29.676 A:middle
to find places where we
could improve the speed

00:08:29.676 --> 00:08:30.876 A:middle
in Web Inspector itself.

00:08:32.426 --> 00:08:32.666 A:middle
All right.

00:08:32.666 --> 00:08:34.506 A:middle
So we have a sampling profiler.

00:08:34.506 --> 00:08:37.626 A:middle
Let's see how Web Inspector uses
it to help us find problems.

00:08:38.506 --> 00:08:40.046 A:middle
So there's a lot going on here,

00:08:40.046 --> 00:08:41.676 A:middle
but it's actually pretty
easy to break down.

00:08:41.785 --> 00:08:42.765 A:middle
And it's even more helpful

00:08:42.765 --> 00:08:44.006 A:middle
with code you're
already familiar with.

00:08:44.946 --> 00:08:47.226 A:middle
When we're talking about
profiling JavaScript,

00:08:47.226 --> 00:08:49.366 A:middle
what we really mean is
we're recording a timeline

00:08:49.366 --> 00:08:50.606 A:middle
for JavaScript in Events.

00:08:50.676 --> 00:08:53.546 A:middle
And this is the Events
view, and it shows a list

00:08:53.546 --> 00:08:56.266 A:middle
of separate discrete
JavaScript events.

00:08:56.556 --> 00:09:00.136 A:middle
In particular, this is for some
code that uses the D3 library,

00:08:56.556 --> 00:09:00.136 A:middle
In particular, this is for some
code that uses the D3 library,

00:09:00.136 --> 00:09:02.986 A:middle
so it's even helpful
for debugging code

00:09:02.986 --> 00:09:05.606 A:middle
and profiling code that's in
a library that you're using.

00:09:06.036 --> 00:09:09.446 A:middle
And each entry here is an
event where code is executed.

00:09:09.726 --> 00:09:10.896 A:middle
It's where a code enters

00:09:11.146 --> 00:09:13.186 A:middle
and exists the JavaScript
Core engine.

00:09:13.566 --> 00:09:15.936 A:middle
And that includes event
listener callbacks,

00:09:15.936 --> 00:09:17.536 A:middle
like these animation
frame entries

00:09:17.536 --> 00:09:19.206 A:middle
for request animation
frame handlers.

00:09:20.156 --> 00:09:21.506 A:middle
Or script evaluated entries

00:09:21.506 --> 00:09:24.336 A:middle
where we see JavaScript files
are loaded and first evaluated.

00:09:24.696 --> 00:09:27.236 A:middle
And we also have some
timing information here,

00:09:27.686 --> 00:09:30.966 A:middle
showing you the time cost
of code that's being run.

00:09:32.036 --> 00:09:34.796 A:middle
So if anything is more
than 10 or 15 milliseconds,

00:09:34.796 --> 00:09:36.406 A:middle
you're getting really
close to dropping below

00:09:36.406 --> 00:09:38.826 A:middle
that smooth 60-frames-per-second
performance.

00:09:40.356 --> 00:09:43.296 A:middle
Now the Events view is helpful
but there's another view

00:09:43.296 --> 00:09:46.116 A:middle
that we've added for you and
that's the Call Trees view.

00:09:46.576 --> 00:09:48.226 A:middle
If you've used other
profiling tools,

00:09:48.226 --> 00:09:49.796 A:middle
this ought to be
pretty familiar to you.

00:09:51.236 --> 00:09:54.156 A:middle
Just click this Menu and
switch to the Call Trees view.

00:09:55.366 --> 00:09:57.316 A:middle
And now it shows you
the accumulative time

00:09:57.316 --> 00:09:58.976 A:middle
for functions in the call stack.

00:09:59.636 --> 00:10:02.416 A:middle
And this is what we call the Top
Down view, and you can use it

00:09:59.636 --> 00:10:02.416 A:middle
And this is what we call the Top
Down view, and you can use it

00:10:02.416 --> 00:10:04.206 A:middle
to dig down through
the Call Tree

00:10:04.206 --> 00:10:06.706 A:middle
to uncover hot functions
spending lots of time.

00:10:07.776 --> 00:10:10.186 A:middle
But my favorite view
is the Bottom Up view.

00:10:12.266 --> 00:10:15.116 A:middle
It takes me right to the
hottest functions, the functions

00:10:15.116 --> 00:10:16.646 A:middle
that are sampled most often.

00:10:17.546 --> 00:10:19.396 A:middle
And this is the list of
the called functions,

00:10:19.396 --> 00:10:21.686 A:middle
and it's sorted by the
ones costing the most time.

00:10:21.686 --> 00:10:23.226 A:middle
So it inverts the Call Tree

00:10:23.416 --> 00:10:26.596 A:middle
so you can quickly compare
the function costs directly.

00:10:27.316 --> 00:10:29.536 A:middle
And you can see exactly
where most

00:10:29.536 --> 00:10:30.746 A:middle
of your time is being spent.

00:10:31.256 --> 00:10:35.236 A:middle
You can expand the entries and
go back up the path that leads

00:10:35.236 --> 00:10:36.846 A:middle
to the functions
chewing up all the time.

00:10:37.456 --> 00:10:38.536 A:middle
And this tells you when

00:10:38.636 --> 00:10:41.106 A:middle
and where your most expensive
code is getting called.

00:10:41.826 --> 00:10:45.366 A:middle
And to see this in action, I'd
like to invite my colleague,

00:10:45.366 --> 00:10:46.976 A:middle
Brian Burg, to the
stage for a demo.

00:10:47.516 --> 00:10:54.656 A:middle
[ Applause ]

00:10:55.156 --> 00:10:55.726 A:middle
&gt;&gt; Thanks Jon.

00:10:55.906 --> 00:10:58.006 A:middle
So the sampling profiler
is great

00:10:58.006 --> 00:11:00.556 A:middle
because it can take
really complex content

00:10:58.006 --> 00:11:00.556 A:middle
because it can take
really complex content

00:11:00.556 --> 00:11:03.636 A:middle
and still profile it and get
you really accurate information.

00:11:03.636 --> 00:11:05.116 A:middle
And you can make it even faster.

00:11:05.846 --> 00:11:09.476 A:middle
So to show this off, I've
got this iPad app I made.

00:11:09.756 --> 00:11:11.296 A:middle
It's called Satellite Tracker.

00:11:11.296 --> 00:11:11.956 A:middle
Let me get the display here.

00:11:15.666 --> 00:11:19.686 A:middle
So Satellite Tracker will show
you, right now or any time,

00:11:20.086 --> 00:11:21.416 A:middle
where the satellites
are overhead.

00:11:21.866 --> 00:11:24.616 A:middle
So you can choose
different places on Earth.

00:11:25.116 --> 00:11:26.796 A:middle
You can choose different
satellites.

00:11:27.536 --> 00:11:28.916 A:middle
Different times.

00:11:30.016 --> 00:11:30.576 A:middle
So that's great.

00:11:31.716 --> 00:11:33.806 A:middle
If you're worried about
satellites overhead and want

00:11:33.806 --> 00:11:36.346 A:middle
to put on a tinfoil hat when
overhead, this is a great app.

00:11:37.066 --> 00:11:41.686 A:middle
But there's a small problem
is that if we have a lot

00:11:41.686 --> 00:11:44.126 A:middle
of satellites overhead,
or pieces of a satellite

00:11:44.126 --> 00:11:47.216 A:middle
that blew up, in this case, the
frame rate's kind of choppy.

00:11:47.676 --> 00:11:49.676 A:middle
This is definitely not
60 frames per second.

00:11:49.756 --> 00:11:50.876 A:middle
It's jittering all over.

00:11:51.396 --> 00:11:53.846 A:middle
So we can use the
sampling profiler to figure

00:11:53.846 --> 00:11:55.846 A:middle
out what's going on
and why it's so slow.

00:11:57.736 --> 00:11:59.776 A:middle
So what we've got to
do is go over to Safari

00:11:59.776 --> 00:12:03.266 A:middle
and we go to that Develop menu.

00:11:59.776 --> 00:12:03.266 A:middle
and we go to that Develop menu.

00:12:03.966 --> 00:12:06.026 A:middle
Find the iPad here
and attach to it.

00:12:07.596 --> 00:12:09.886 A:middle
And the first thing
I want to do is go

00:12:09.886 --> 00:12:12.596 A:middle
over to the Frames view here and
just see where we are right now,

00:12:12.926 --> 00:12:13.866 A:middle
in terms of frame rate.

00:12:14.066 --> 00:12:16.056 A:middle
So let's just start recording.

00:12:17.136 --> 00:12:18.576 A:middle
I'll switch back to my iPad.

00:12:19.366 --> 00:12:20.776 A:middle
And start doing stuff.

00:12:21.596 --> 00:12:24.246 A:middle
It'll sort of spin around here.

00:12:25.736 --> 00:12:27.506 A:middle
Maybe a change the satellites.

00:12:29.406 --> 00:12:30.096 A:middle
Change the time.

00:12:30.886 --> 00:12:31.976 A:middle
Okay. Let's go back and see.

00:12:35.506 --> 00:12:36.456 A:middle
Okay. Let's zoom way out.

00:12:37.436 --> 00:12:38.006 A:middle
Okay. Wow.

00:12:38.006 --> 00:12:40.186 A:middle
Yeah. Our performance is
all over the place here.

00:12:40.186 --> 00:12:44.046 A:middle
So sometimes we're getting
60 frames per second here

00:12:44.046 --> 00:12:44.426 A:middle
on the left.

00:12:45.286 --> 00:12:47.506 A:middle
In the middle, it's just sort
of going all over the place

00:12:47.506 --> 00:12:48.586 A:middle
as we're changing the views.

00:12:49.126 --> 00:12:52.036 A:middle
And here we're sort
of going too slow.

00:12:52.036 --> 00:12:54.716 A:middle
So if we want to figure
out what's going on here,

00:12:55.736 --> 00:13:00.776 A:middle
we want to switch over
to the Events view,

00:12:55.736 --> 00:13:00.776 A:middle
we want to switch over
to the Events view,

00:13:01.046 --> 00:13:03.336 A:middle
and then we can click on the
JavaScript and Events Timeline

00:13:03.336 --> 00:13:06.026 A:middle
to focus in on that
sampling profiler data.

00:13:07.946 --> 00:13:10.926 A:middle
So as Jon showed before, the
Events view here is going

00:13:10.926 --> 00:13:12.586 A:middle
to show everything that
went into the run loop.

00:13:13.036 --> 00:13:16.206 A:middle
And in this case, it's an
animation or simulation,

00:13:16.206 --> 00:13:18.466 A:middle
so we're just rendering
frames over and over.

00:13:18.466 --> 00:13:21.506 A:middle
So it's not really helpful,
if we want to figure

00:13:21.506 --> 00:13:22.776 A:middle
out what's taking the most time.

00:13:23.536 --> 00:13:28.126 A:middle
So let's switch over to the
Call Trees view, and here we see

00:13:28.126 --> 00:13:30.846 A:middle
that Top Down Call Tree.

00:13:31.226 --> 00:13:35.316 A:middle
And this shows aggregated over
all those rendering frames

00:13:35.946 --> 00:13:37.476 A:middle
where we spent the most time.

00:13:38.366 --> 00:13:42.476 A:middle
And here we can expand this to
see that D3 has a Timer function

00:13:42.476 --> 00:13:45.886 A:middle
and that calls some of our
code, which draws a scene.

00:13:46.946 --> 00:13:50.006 A:middle
And you know we draw some things
in the scene like satellites

00:13:50.006 --> 00:13:52.106 A:middle
and the time and these things.

00:13:52.166 --> 00:13:54.676 A:middle
So this is great, if we want

00:13:54.676 --> 00:13:56.056 A:middle
to understand what
the code is doing.

00:13:56.656 --> 00:13:57.396 A:middle
But if we want to figure

00:13:57.396 --> 00:13:59.366 A:middle
out which functions
specifically are really hot,

00:14:00.066 --> 00:14:03.656 A:middle
it's better to go over
to the Bottom Up view.

00:14:04.056 --> 00:14:08.486 A:middle
So here we've listed all
the Functions regardless

00:14:08.486 --> 00:14:09.326 A:middle
of who called them.

00:14:09.926 --> 00:14:12.766 A:middle
And we can see that fillText

00:14:12.766 --> 00:14:15.326 A:middle
and our tangent [phonetic]
are our two hottest functions,

00:14:15.436 --> 00:14:18.556 A:middle
so why are we calling
our tangent?

00:14:18.786 --> 00:14:21.866 A:middle
We can expand out this row here

00:14:22.216 --> 00:14:23.646 A:middle
and see who's calling
our tangent.

00:14:23.816 --> 00:14:28.206 A:middle
So right here, we're
plotting some satellites.

00:14:28.436 --> 00:14:32.086 A:middle
It looks like we're
computing the transform

00:14:32.086 --> 00:14:33.266 A:middle
so we can draw this globe.

00:14:34.046 --> 00:14:35.876 A:middle
Okay. These things
seem pretty normal.

00:14:36.456 --> 00:14:38.096 A:middle
Maybe I can pull
out my math book

00:14:38.096 --> 00:14:39.156 A:middle
and make it a little faster.

00:14:39.156 --> 00:14:41.746 A:middle
Let's go up to fillText.

00:14:41.746 --> 00:14:45.666 A:middle
So and to refresh you, if
we go back to the app here,

00:14:46.326 --> 00:14:50.246 A:middle
we're drawing text on
the current time up there

00:14:50.246 --> 00:14:51.466 A:middle
and also for every data point.

00:14:51.946 --> 00:14:53.326 A:middle
So that makes sense.

00:14:53.516 --> 00:14:56.076 A:middle
But if we look really
closely here,

00:14:56.606 --> 00:14:57.906 A:middle
we're actually drawing
the time twice,

00:14:58.396 --> 00:14:59.806 A:middle
and that seems kind of strange.

00:15:00.846 --> 00:15:06.026 A:middle
So if we expand this out, we
can see who's calling this,

00:15:06.456 --> 00:15:09.256 A:middle
and it seems that we're seem

00:15:09.256 --> 00:15:11.256 A:middle
to be drawing two different
foreground scenes at once.

00:15:11.786 --> 00:15:14.116 A:middle
This is probably
not what we wanted.

00:15:15.406 --> 00:15:17.726 A:middle
So let's figure out
what's going on.

00:15:17.726 --> 00:15:20.126 A:middle
If it was the case that we were
drawing two foreground scenes,

00:15:20.216 --> 00:15:24.556 A:middle
then we're doing twice as
much work as we need to.

00:15:24.856 --> 00:15:27.506 A:middle
So over here, just to
refresh your memory,

00:15:27.506 --> 00:15:28.716 A:middle
we have this sort of flat map.

00:15:28.716 --> 00:15:31.776 A:middle
And then we have the
globe, which rotates.

00:15:32.846 --> 00:15:33.456 A:middle
So

00:15:34.586 --> 00:15:37.906 A:middle
let's go back into the code,

00:15:37.906 --> 00:15:41.456 A:middle
and figure out what controls
switch in-between these

00:15:41.506 --> 00:15:42.026 A:middle
two maps.

00:15:42.026 --> 00:15:42.976 A:middle
Maybe we messed up somewhere.

00:15:46.516 --> 00:15:48.146 A:middle
So we switch between
the two globes

00:15:48.496 --> 00:15:49.776 A:middle
when we change the location.

00:15:51.036 --> 00:15:52.106 A:middle
So here's updateLocation.

00:15:52.816 --> 00:15:57.196 A:middle
Okay. So when we have one map
up, we don't see the other one.

00:15:57.306 --> 00:16:00.516 A:middle
So that makes sense because here
we're adding the hidden class,

00:15:57.306 --> 00:16:00.516 A:middle
So that makes sense because here
we're adding the hidden class,

00:16:00.546 --> 00:16:02.856 A:middle
and that's just going
to make it not display.

00:16:04.286 --> 00:16:07.776 A:middle
And here for the globeMap,
we set running equal to true

00:16:07.776 --> 00:16:09.046 A:middle
when the whole thing is running.

00:16:09.606 --> 00:16:11.786 A:middle
And also in the place we're
showing it's not a global

00:16:11.786 --> 00:16:13.466 A:middle
projection, so that makes sense.

00:16:13.466 --> 00:16:15.966 A:middle
When we're showing the flat
map, we don't show the globe

00:16:16.016 --> 00:16:16.776 A:middle
when it's not running.

00:16:18.166 --> 00:16:21.136 A:middle
Up here for the flat map, it
seems like it's always running

00:16:21.136 --> 00:16:22.366 A:middle
if the UI is running at all.

00:16:22.526 --> 00:16:26.116 A:middle
So that's kind of strange.

00:16:26.156 --> 00:16:27.926 A:middle
Well let's go back to the
map and try something.

00:16:32.296 --> 00:16:34.406 A:middle
So we'll go up to our
[inaudible] data set here.

00:16:34.986 --> 00:16:39.906 A:middle
And if we go to Earth, it seems
to have a better frame rate

00:16:40.156 --> 00:16:43.026 A:middle
than if we just did
the globe map.

00:16:43.296 --> 00:16:44.586 A:middle
And well, that makes sense.

00:16:44.586 --> 00:16:47.556 A:middle
I think we're drawing two maps
when the globe map is active

00:16:47.556 --> 00:16:49.496 A:middle
but only one map when
we're doing the flat maps.

00:16:49.496 --> 00:16:52.716 A:middle
So if we go in here and
change this condition --

00:16:59.276 --> 00:17:00.976 A:middle
We want it to be the opposite.

00:16:59.276 --> 00:17:00.976 A:middle
We want it to be the opposite.

00:17:04.576 --> 00:17:07.976 A:middle
Okay. So let's stop, and
see if this is the fix.

00:17:12.236 --> 00:17:13.806 A:middle
So go back to our iPad here.

00:17:15.546 --> 00:17:16.806 A:middle
Okay. This looks pretty smooth.

00:17:16.806 --> 00:17:17.685 A:middle
Let's go here.

00:17:18.996 --> 00:17:19.566 A:middle
Oh that's great.

00:17:22.026 --> 00:17:22.876 A:middle
Yeah, it looks really nice.

00:17:22.876 --> 00:17:26.366 A:middle
So let's go and check that
rendering timeline again and see

00:17:27.185 --> 00:17:29.236 A:middle
if it's 60-frames per second.

00:17:30.196 --> 00:17:32.126 A:middle
So I'll switch back
to Frames again

00:17:32.996 --> 00:17:36.336 A:middle
and start recording and yeah.

00:17:36.336 --> 00:17:37.096 A:middle
That's pretty nice.

00:17:37.096 --> 00:17:40.216 A:middle
I'm spinning the globe, and
it slows down a little bit.

00:17:40.216 --> 00:17:42.556 A:middle
But the steady state
seems to be --

00:17:42.556 --> 00:17:45.296 A:middle
okay, we're definitely
under 60-frames per second.

00:17:45.846 --> 00:17:47.816 A:middle
And over here we have
the bar, and if we're

00:17:47.816 --> 00:17:48.976 A:middle
under it, then we're in luck.

00:17:52.956 --> 00:17:57.956 A:middle
Okay. So now Satellite Tracker's
a lot faster, so we know exactly

00:17:57.956 --> 00:17:58.746 A:middle
when to put on our hat.

00:17:58.956 --> 00:17:59.546 A:middle
This is great.

00:18:00.246 --> 00:18:02.216 A:middle
So this is a small example

00:18:02.216 --> 00:18:04.916 A:middle
of how we can use a
sampling profiler to dig

00:18:04.916 --> 00:18:07.366 A:middle
into really busy content
and make it even faster.

00:18:08.696 --> 00:18:09.436 A:middle
Okay. Next.

00:18:09.436 --> 00:18:12.896 A:middle
Jon's going to tell us about
memory and allocations.

00:18:13.516 --> 00:18:21.316 A:middle
[ Applause ]

00:18:21.816 --> 00:18:22.446 A:middle
&gt;&gt; Thank you Brian.

00:18:24.356 --> 00:18:26.646 A:middle
So you can see that
profiling is fast.

00:18:27.276 --> 00:18:29.376 A:middle
It allows you to see the
true speed of your code

00:18:29.506 --> 00:18:31.116 A:middle
so you can get really
accurate data.

00:18:31.686 --> 00:18:34.286 A:middle
So give the JavaScript and
Events Timeline another look

00:18:34.526 --> 00:18:37.996 A:middle
and use it to find slow
callback handlers, slow timers

00:18:37.996 --> 00:18:40.336 A:middle
or slow script initialization
in the Events view.

00:18:41.336 --> 00:18:45.036 A:middle
And use the new Call Trees view
to see time cost, as they pile

00:18:45.036 --> 00:18:46.956 A:middle
up across the time
slice you select.

00:18:48.216 --> 00:18:50.586 A:middle
Remember that Bottom Up
is your new best friend.

00:18:50.586 --> 00:18:54.216 A:middle
It really helps you find the
best places to start optimizing.

00:18:54.796 --> 00:18:58.126 A:middle
Okay. So we've looked at
the new sampling profiler

00:18:58.126 --> 00:19:00.296 A:middle
and new JavaScript
Call Trees view.

00:18:58.126 --> 00:19:00.296 A:middle
and new JavaScript
Call Trees view.

00:19:00.886 --> 00:19:03.096 A:middle
I'm really excited that
we have better tools

00:19:03.096 --> 00:19:04.666 A:middle
for optimizing CPU time.

00:19:04.666 --> 00:19:07.356 A:middle
And we can give our users a fast
experience and save a bit more

00:19:07.356 --> 00:19:08.276 A:middle
of their battery life.

00:19:08.726 --> 00:19:10.176 A:middle
And this is great and
now we're going to move

00:19:10.176 --> 00:19:12.226 A:middle
on to the other side of
the performance coin,

00:19:12.666 --> 00:19:14.256 A:middle
figuring out where
the memory is going.

00:19:14.746 --> 00:19:17.916 A:middle
So you want to be efficient
with memory in your web content

00:19:17.916 --> 00:19:19.526 A:middle
because it's a limited resource.

00:19:19.976 --> 00:19:23.376 A:middle
Being memory efficient helps
your web content be able

00:19:23.376 --> 00:19:26.776 A:middle
to scale really well to
handle large data sets.

00:19:28.056 --> 00:19:31.466 A:middle
Plus, using lots of
memory degrades performance

00:19:31.466 --> 00:19:32.486 A:middle
and we don't want to do that.

00:19:33.276 --> 00:19:35.166 A:middle
and it can also bring
down your web content

00:19:35.256 --> 00:19:36.776 A:middle
and we really don't
want to do that.

00:19:37.326 --> 00:19:39.696 A:middle
Now the good news is if
you're going WKWebView,

00:19:40.086 --> 00:19:41.686 A:middle
it runs in a separate process,

00:19:41.976 --> 00:19:43.476 A:middle
so it won't bring
down your entire app.

00:19:43.516 --> 00:19:45.736 A:middle
But still, it's not a
great user experience.

00:19:46.286 --> 00:19:48.806 A:middle
So to help you with all of this,
we've added two new timelines

00:19:48.806 --> 00:19:50.556 A:middle
to Web Inspector and Safari 10.

00:19:51.106 --> 00:19:53.296 A:middle
When you fire up the
new Web Inspector,

00:19:53.296 --> 00:19:55.356 A:middle
the new timelines will
be off by default,

00:19:55.356 --> 00:19:55.976 A:middle
so you need to turn them on.

00:19:56.796 --> 00:19:59.496 A:middle
You just click the Edit button
and just above the Timelines,

00:20:00.076 --> 00:20:03.606 A:middle
you can now configure the
timelines you want to see.

00:20:03.776 --> 00:20:06.736 A:middle
So you can just work with the
ones you want to work with.

00:20:06.736 --> 00:20:08.646 A:middle
Just like in the
Instruments app.

00:20:09.236 --> 00:20:11.826 A:middle
So just toggle the new
timelines On, and you're ready

00:20:11.826 --> 00:20:12.946 A:middle
to record a new timelines.

00:20:13.296 --> 00:20:14.236 A:middle
But you probably don't want

00:20:14.236 --> 00:20:15.996 A:middle
to keep them all
running at the same time.

00:20:16.566 --> 00:20:18.346 A:middle
The sampling profiler
for the JavaScript

00:20:18.346 --> 00:20:21.176 A:middle
and Events Timeline has less
overhead but there's still some.

00:20:21.706 --> 00:20:24.126 A:middle
And the JavaScript Allocation's
Timeline will add some extra

00:20:24.126 --> 00:20:25.666 A:middle
process during garbage
collection

00:20:25.966 --> 00:20:27.446 A:middle
that can have a performance
impact.

00:20:28.416 --> 00:20:31.676 A:middle
Okay. So we're going to leave
the Memory Timeline turned On.

00:20:32.016 --> 00:20:34.826 A:middle
And when you record a timeline,
you get something like this.

00:20:35.726 --> 00:20:37.756 A:middle
You get this new
Memory Timeline graph

00:20:37.756 --> 00:20:39.936 A:middle
and it shows you how
memory has been allocated

00:20:39.936 --> 00:20:41.986 A:middle
across different
categories over time.

00:20:41.986 --> 00:20:44.956 A:middle
And there are a series
of charts and graphs

00:20:44.956 --> 00:20:47.216 A:middle
to help you understand
how memory is being used

00:20:47.216 --> 00:20:48.336 A:middle
and how it's being divided up.

00:20:49.746 --> 00:20:52.376 A:middle
The Breakdown chart here shows
you how memory is allocated

00:20:52.376 --> 00:20:55.446 A:middle
for JavaScript, for images,
for the layers that make

00:20:55.446 --> 00:20:57.056 A:middle
up your page, and for the rest

00:20:57.056 --> 00:20:58.556 A:middle
of the engine-related
page memory.

00:20:59.636 --> 00:21:02.606 A:middle
And the Max Comparison
chart helps you investigate

00:20:59.636 --> 00:21:02.606 A:middle
And the Max Comparison
chart helps you investigate

00:21:02.606 --> 00:21:03.526 A:middle
memory spikes.

00:21:03.526 --> 00:21:04.926 A:middle
So we have a high watermark here

00:21:04.926 --> 00:21:07.326 A:middle
and that helps you see
memory problems in the past.

00:21:07.456 --> 00:21:10.556 A:middle
And you can even isolate spikes,
by selecting a specific slice

00:21:10.556 --> 00:21:14.026 A:middle
or a specific range of time
around a spike in the timeline.

00:21:14.536 --> 00:21:17.816 A:middle
And then, you can use the
category breakdown below

00:21:18.026 --> 00:21:19.886 A:middle
to see what's contributing
most of the spike.

00:21:20.546 --> 00:21:23.836 A:middle
And each of these graphs here
are independently scaled.

00:21:23.836 --> 00:21:26.516 A:middle
So you can easily see
changes over time.

00:21:26.726 --> 00:21:30.496 A:middle
So if there's a spike in
JavaScript, it shows you places

00:21:30.646 --> 00:21:33.276 A:middle
where lots of new objects are
being created and referenced.

00:21:33.596 --> 00:21:36.776 A:middle
And that includes Objects like
string Objects and functions

00:21:37.166 --> 00:21:39.116 A:middle
and all the engine
data that supports them

00:21:39.116 --> 00:21:41.206 A:middle
like structure data
and compiled code.

00:21:41.916 --> 00:21:44.736 A:middle
So when you see usage
drop in JavaScript,

00:21:44.736 --> 00:21:46.986 A:middle
you're seeing garbage
collection reclaiming memory.

00:21:48.106 --> 00:21:50.866 A:middle
And images shows you the
memory allocated for images

00:21:50.866 --> 00:21:52.406 A:middle
that have been decoded
for display,

00:21:52.986 --> 00:21:56.296 A:middle
so that's the larger image
data, usually used for images

00:21:56.296 --> 00:21:57.556 A:middle
that are visible
in the viewport.

00:21:58.076 --> 00:22:01.506 A:middle
And layers is showing you
graphics layer memory,

00:21:58.076 --> 00:22:01.506 A:middle
And layers is showing you
graphics layer memory,

00:22:01.776 --> 00:22:04.696 A:middle
memory used for WebKit's
tile grid, compositing layers

00:22:04.916 --> 00:22:06.096 A:middle
and other engine layers.

00:22:07.226 --> 00:22:08.956 A:middle
Pages is everything else,

00:22:08.956 --> 00:22:11.006 A:middle
all the other things the
engine's keeping track of,

00:22:11.006 --> 00:22:14.296 A:middle
like the DOM and page
styles, fonts rendering data,

00:22:14.296 --> 00:22:16.486 A:middle
memory caches and
system allocations.

00:22:17.276 --> 00:22:19.376 A:middle
So this breakdown gives
you a great way to ensure

00:22:19.376 --> 00:22:22.246 A:middle
that memory use lines up
with your expectations.

00:22:22.556 --> 00:22:24.566 A:middle
If you have JavaScript-heavy
content,

00:22:24.566 --> 00:22:26.516 A:middle
you'd expect the
largest category --

00:22:26.516 --> 00:22:29.896 A:middle
that JavaScript is the largest
category in the Breakdown chart.

00:22:30.216 --> 00:22:32.036 A:middle
And you'll likely see
more changes over time

00:22:32.036 --> 00:22:33.096 A:middle
in the Timeline graph.

00:22:33.946 --> 00:22:37.826 A:middle
But for an image-heavy page
like a gallery, for example,

00:22:38.196 --> 00:22:40.966 A:middle
then the layers and images
categories would likely be the

00:22:40.966 --> 00:22:42.656 A:middle
largest, with more
changes over time.

00:22:43.836 --> 00:22:47.486 A:middle
So that's the Memory
Timeline, new in Safari 10.

00:22:48.066 --> 00:22:52.356 A:middle
And to complement the Memory
Timeline is the new JavaScript

00:22:52.356 --> 00:22:53.556 A:middle
Allocations Timeline.

00:22:54.076 --> 00:22:56.196 A:middle
It's one thing to see
memory growing over time,

00:22:56.426 --> 00:22:57.826 A:middle
but it's another
thing pinning it

00:22:57.826 --> 00:23:00.426 A:middle
down to see what actual
JavaScript Allocations happen.

00:22:57.826 --> 00:23:00.426 A:middle
down to see what actual
JavaScript Allocations happen.

00:23:00.426 --> 00:23:02.166 A:middle
And a very powerful tool

00:23:02.166 --> 00:23:06.446 A:middle
for this is JavaScript
Allocation Snapshots.

00:23:07.326 --> 00:23:10.306 A:middle
What's powerful about Snapshots
is that you get a snapshot

00:23:10.306 --> 00:23:12.296 A:middle
of a moment in time,
in the JavaScript heap.

00:23:12.496 --> 00:23:15.456 A:middle
And you can dig in to see
everything that's allocated.

00:23:15.756 --> 00:23:18.766 A:middle
But it's even more powerful
when you have two Snapshots,

00:23:19.416 --> 00:23:22.376 A:middle
and this allows you to go back
later and compare the two.

00:23:22.376 --> 00:23:25.696 A:middle
And comparing Snapshots is
one of the most powerful tools

00:23:25.696 --> 00:23:29.126 A:middle
for answering the question, am
I doing unnecessary allocations?

00:23:29.886 --> 00:23:32.646 A:middle
So to really make use of this,
you need multiple Snapshots.

00:23:32.646 --> 00:23:36.526 A:middle
So that's why, by default,
we take one every 10 seconds

00:23:37.206 --> 00:23:39.766 A:middle
and also at the beginning
and end of a recording.

00:23:40.156 --> 00:23:42.056 A:middle
So the Snapshots are
plotted on the Timeline,

00:23:42.056 --> 00:23:43.006 A:middle
so you can correlate them

00:23:43.006 --> 00:23:44.546 A:middle
to things happening
on other timelines.

00:23:44.916 --> 00:23:46.616 A:middle
I just have the others
turned off here for now.

00:23:47.406 --> 00:23:50.386 A:middle
And the Snapshots are listed
below with a few details,

00:23:50.386 --> 00:23:51.906 A:middle
like timing and size
of the heap.

00:23:52.776 --> 00:23:54.566 A:middle
Now, to dig into a
particular problem,

00:23:54.566 --> 00:23:57.006 A:middle
you'll often need a Snapshot,
both before and after

00:23:57.006 --> 00:23:58.736 A:middle
where you think a memory
issue is happening.

00:23:59.176 --> 00:24:00.536 A:middle
And there are three techniques.

00:23:59.176 --> 00:24:00.536 A:middle
And there are three techniques.

00:24:01.086 --> 00:24:03.726 A:middle
You can rely on the automatic
ones, every 10 seconds.

00:24:04.486 --> 00:24:05.566 A:middle
Or you can take one yourself

00:24:05.566 --> 00:24:07.236 A:middle
by pushing the Take
Snapshot button.

00:24:07.856 --> 00:24:09.506 A:middle
Or you can do it from your code.

00:24:10.566 --> 00:24:12.656 A:middle
And really the easiest way
to zoom into an issue is

00:24:12.656 --> 00:24:13.956 A:middle
to modify your code a little.

00:24:14.546 --> 00:24:16.336 A:middle
You call the takeHeapSnapshot
API

00:24:16.516 --> 00:24:19.596 A:middle
and pass it a custom label
argument of really anything

00:24:19.596 --> 00:24:21.016 A:middle
that can help you
identify it later.

00:24:21.666 --> 00:24:24.266 A:middle
And again, you want a pair
of Snapshots, both before

00:24:24.266 --> 00:24:27.116 A:middle
and after the code you think
is causing the problem.

00:24:27.616 --> 00:24:30.596 A:middle
Now you could also use
this by taking a Snapshot

00:24:30.596 --> 00:24:33.366 A:middle
between doing some
work in a loop.

00:24:34.056 --> 00:24:36.496 A:middle
So just some quick
things to keep in mind

00:24:36.836 --> 00:24:38.356 A:middle
about the takeHeapSnapshot API.

00:24:39.186 --> 00:24:41.916 A:middle
Remember that Snapshots do
add some extra process during

00:24:41.916 --> 00:24:44.456 A:middle
garbage collection and that
can impact performance,

00:24:44.456 --> 00:24:45.626 A:middle
which you'll definitely notice

00:24:45.626 --> 00:24:48.086 A:middle
if your code is firing off
a lot of Snapshots rapidly.

00:24:49.176 --> 00:24:51.636 A:middle
You'll also want to capture
the differences before

00:24:51.636 --> 00:24:54.406 A:middle
and after code that's doing
some work or at some point

00:24:54.406 --> 00:24:55.476 A:middle
between work in a loop.

00:24:55.996 --> 00:24:57.676 A:middle
And don't leave this in.

00:24:57.676 --> 00:24:58.956 A:middle
I mean, if you leave this in,

00:24:59.036 --> 00:25:00.526 A:middle
for most customers
it'll be okay.

00:24:59.036 --> 00:25:00.526 A:middle
for most customers
it'll be okay.

00:25:00.526 --> 00:25:02.556 A:middle
But if anybody's running
Web Inspector, they're going

00:25:02.556 --> 00:25:04.276 A:middle
to be taking all
these Snapshots,

00:25:04.276 --> 00:25:05.586 A:middle
and you probably
don't want that.

00:25:05.586 --> 00:25:08.886 A:middle
So just remember to be sure and
take it out before you ship.

00:25:09.436 --> 00:25:11.416 A:middle
So what are these
Snapshots really show you?

00:25:12.046 --> 00:25:13.816 A:middle
Let's take a look.

00:25:14.846 --> 00:25:18.626 A:middle
You just click on the
Snapshot icon on the Timeline

00:25:18.626 --> 00:25:21.566 A:middle
or on the Arrow button of any
of the Snapshot list entries.

00:25:22.126 --> 00:25:23.766 A:middle
And you'll get this
list of Objects

00:25:23.766 --> 00:25:25.026 A:middle
that were allocated in the heap.

00:25:25.296 --> 00:25:27.306 A:middle
And we have two views
for Snapshots.

00:25:27.686 --> 00:25:30.586 A:middle
This is the Instances view, and
it shows you a list of Objects

00:25:30.586 --> 00:25:32.456 A:middle
in the heap, grouped
by their class.

00:25:33.356 --> 00:25:35.536 A:middle
And the other is the
Object Graph view.

00:25:35.536 --> 00:25:37.936 A:middle
And this is really an
overview of everything

00:25:37.936 --> 00:25:40.066 A:middle
and everything that's
owned by everything.

00:25:40.496 --> 00:25:42.166 A:middle
So if you're readily
familiar with the code,

00:25:42.166 --> 00:25:45.106 A:middle
this can be a useful
way to confirm things

00:25:45.106 --> 00:25:45.896 A:middle
or where they should be.

00:25:46.396 --> 00:25:50.416 A:middle
But actually the far more useful
view is back in the other one,

00:25:50.416 --> 00:25:51.556 A:middle
in the Instances view.

00:25:51.866 --> 00:25:54.596 A:middle
And it's powerful because you
can easily find Objects no

00:25:54.696 --> 00:25:57.056 A:middle
matter how deep-down the
property path they are.

00:25:57.516 --> 00:26:00.576 A:middle
And the Count here can help
you realize potential issues

00:25:57.516 --> 00:26:00.576 A:middle
And the Count here can help
you realize potential issues

00:26:00.576 --> 00:26:02.236 A:middle
when they don't meet
your expectations.

00:26:02.236 --> 00:26:05.196 A:middle
Like was I really expecting
over 4000 string Objects?

00:26:06.436 --> 00:26:08.666 A:middle
So you can expand the
Classes and see all

00:26:08.666 --> 00:26:10.476 A:middle
of the allocated
Objects of that class.

00:26:11.246 --> 00:26:14.096 A:middle
Then to figure out what
something is there's all these

00:26:14.096 --> 00:26:14.876 A:middle
different clues.

00:26:15.006 --> 00:26:16.066 A:middle
The Class is a clue.

00:26:16.946 --> 00:26:19.376 A:middle
Another is the actual
properties of the Object.

00:26:19.706 --> 00:26:21.656 A:middle
It's a really quick
way to know what it is.

00:26:22.506 --> 00:26:25.426 A:middle
But the easiest way to know
what an Object is is to hover

00:26:25.426 --> 00:26:30.636 A:middle
over this Object Identifier
here and you get this.

00:26:30.916 --> 00:26:31.426 A:middle
Look at this.

00:26:31.656 --> 00:26:34.786 A:middle
It literally shows you the
shortest path to the Object.

00:26:35.346 --> 00:26:38.096 A:middle
This is telling you exactly what
is keeping the Object alive.

00:26:38.736 --> 00:26:40.856 A:middle
It almost always gives
you answer you need,

00:26:41.756 --> 00:26:45.626 A:middle
especially in a world of
JavaScript's garbage collection.

00:26:45.626 --> 00:26:47.286 A:middle
This is the kind of
thing that cuts right

00:26:47.286 --> 00:26:48.516 A:middle
through the confusion.

00:26:49.656 --> 00:26:52.826 A:middle
But the most important feature
and really the entire point

00:26:52.826 --> 00:26:55.036 A:middle
of this is to be able to
compare two Snapshots.

00:26:55.346 --> 00:26:55.966 A:middle
Now watch this.

00:26:55.966 --> 00:26:57.546 A:middle
Once you've collected
some Snapshots,

00:26:57.996 --> 00:27:00.206 A:middle
you just click the Compare
Snapshots button here,

00:26:57.996 --> 00:27:00.206 A:middle
you just click the Compare
Snapshots button here,

00:27:01.266 --> 00:27:03.096 A:middle
and you select a
Baseline Snapshot

00:27:03.376 --> 00:27:04.986 A:middle
and a second to compare against.

00:27:05.796 --> 00:27:09.276 A:middle
And boom. You get a new
Comparison Snapshot to dig into.

00:27:09.796 --> 00:27:11.136 A:middle
Now this is a really big deal

00:27:11.486 --> 00:27:13.526 A:middle
because now we're only seeing
the Objects that are new

00:27:13.526 --> 00:27:16.646 A:middle
between two points,
between our two Snapshots.

00:27:17.866 --> 00:27:20.226 A:middle
Expanding the Object
Class group we can see all

00:27:20.226 --> 00:27:21.556 A:middle
of these Object Allocations.

00:27:21.556 --> 00:27:23.806 A:middle
And their previews are showing
their names and what looks

00:27:23.806 --> 00:27:24.946 A:middle
like some telemetry data.

00:27:25.396 --> 00:27:27.716 A:middle
And that's a clue that
these are Satellite Objects.

00:27:28.166 --> 00:27:29.806 A:middle
And the pop over here
shows that they're

00:27:29.806 --> 00:27:31.166 A:middle
in the Satellites
Array property.

00:27:32.326 --> 00:27:34.126 A:middle
Since this is a Snapshot
comparison,

00:27:34.126 --> 00:27:36.646 A:middle
these Satellite Objects
are all newly allocated.

00:27:36.926 --> 00:27:39.356 A:middle
And that's a big clue as
to what the code's doing.

00:27:39.886 --> 00:27:42.316 A:middle
So to show you all of these
new memory features in action,

00:27:42.366 --> 00:27:44.806 A:middle
I'd like to invite Brian back up
to the stage for another demo.

00:27:45.516 --> 00:27:50.656 A:middle
[ Applause ]

00:27:51.156 --> 00:27:51.736 A:middle
&gt;&gt; Thanks Jon.

00:27:52.616 --> 00:27:56.706 A:middle
So I gave Satellite Tracker
to my buddy, Ed, and he stayed

00:27:57.156 --> 00:27:58.556 A:middle
up all night playing with it.

00:28:00.116 --> 00:28:02.396 A:middle
And he had a lot of fun,

00:28:02.396 --> 00:28:04.236 A:middle
and he never got tracked
by the satellites.

00:28:04.356 --> 00:28:05.646 A:middle
But there's a problem.

00:28:05.646 --> 00:28:07.406 A:middle
Eventually it just
kept getting slower

00:28:07.406 --> 00:28:09.126 A:middle
and slower the longer it was up.

00:28:09.776 --> 00:28:12.826 A:middle
And to me that sounded like
you know classic memory.

00:28:13.006 --> 00:28:15.096 A:middle
The longer the thing is
open, the slower it goes.

00:28:15.916 --> 00:28:18.716 A:middle
So I want to look
into Satellite Tracker

00:28:18.716 --> 00:28:20.446 A:middle
with these new memory
tools to figure

00:28:20.446 --> 00:28:22.416 A:middle
out if we're leaking
some memory somehow.

00:28:23.646 --> 00:28:26.106 A:middle
So the first thing
I'm going to do.

00:28:26.246 --> 00:28:28.576 A:middle
Okay I've got iPad here.

00:28:29.306 --> 00:28:30.976 A:middle
I'm going to go back
to the Web Inspector --

00:28:34.336 --> 00:28:36.936 A:middle
And inspect the app.

00:28:37.006 --> 00:28:39.166 A:middle
And the first thing
I like to do,

00:28:39.286 --> 00:28:42.636 A:middle
when I don't really know what
the bug is, here is I want

00:28:42.736 --> 00:28:43.866 A:middle
to use the Memory Timeline.

00:28:43.916 --> 00:28:47.686 A:middle
And that's going to show
me sort of like an overview

00:28:47.686 --> 00:28:48.666 A:middle
of what's going on on the page.

00:28:48.666 --> 00:28:50.016 A:middle
So let's start recording.

00:28:51.146 --> 00:28:54.826 A:middle
I'll switch back, and I'm just
going to switch back and forth

00:28:54.946 --> 00:28:57.596 A:middle
between two satellites.

00:28:58.136 --> 00:29:00.446 A:middle
Maybe I'll add some
effects here.

00:28:58.136 --> 00:29:00.446 A:middle
Maybe I'll add some
effects here.

00:29:02.126 --> 00:29:04.216 A:middle
Okay, I'm switching
back and forth.

00:29:06.616 --> 00:29:07.976 A:middle
Okay. Let's see what's
in the Timeline.

00:29:11.506 --> 00:29:15.486 A:middle
So in the Timeline overview you
can see a stacked line graph

00:29:15.486 --> 00:29:17.716 A:middle
showing all the different
parts and the relative size,

00:29:17.856 --> 00:29:21.116 A:middle
but if you click here, you'll
get that more detailed view.

00:29:22.566 --> 00:29:24.586 A:middle
And so there's no
images on this page.

00:29:24.886 --> 00:29:25.776 A:middle
This is all canvas.

00:29:26.386 --> 00:29:27.786 A:middle
The layers is pretty flat.

00:29:28.266 --> 00:29:29.606 A:middle
The page sort of
goes up and down,

00:29:29.606 --> 00:29:30.886 A:middle
stuff's getting garbage
collected.

00:29:30.886 --> 00:29:31.436 A:middle
That's fine.

00:29:32.306 --> 00:29:33.896 A:middle
If you look more
closely at JavaScript,

00:29:34.126 --> 00:29:37.466 A:middle
you see that like you know some
stuff gets garbage collected

00:29:37.546 --> 00:29:40.276 A:middle
but overall, it's really
just going up over time.

00:29:40.606 --> 00:29:42.116 A:middle
And if we had this
running all night, yeah,

00:29:42.166 --> 00:29:44.316 A:middle
it would probably
go up a lot more.

00:29:44.936 --> 00:29:49.196 A:middle
So the next step here is to
start taking heap Snapshots

00:29:49.416 --> 00:29:52.146 A:middle
or allocation Snapshots
so we can figure

00:29:52.146 --> 00:29:54.206 A:middle
out what's being
allocated over time.

00:29:56.626 --> 00:30:02.236 A:middle
So to do that, we're going
to start a new recording.

00:29:56.626 --> 00:30:02.236 A:middle
So to do that, we're going
to start a new recording.

00:30:03.116 --> 00:30:05.306 A:middle
And one cool quick trick here
is you can do Shift Click

00:30:05.446 --> 00:30:07.416 A:middle
or Shift Space, and they'll
start a new recording

00:30:07.536 --> 00:30:08.696 A:middle
and not append to the old one.

00:30:09.526 --> 00:30:11.836 A:middle
Oh wait. I forgot to
change our Timelines here.

00:30:11.836 --> 00:30:13.036 A:middle
So let's put away Memory.

00:30:14.156 --> 00:30:15.906 A:middle
And let's put in
Allocations instead.

00:30:18.256 --> 00:30:19.506 A:middle
Okay. So let's start recording.

00:30:20.386 --> 00:30:21.306 A:middle
Go back to the iPad.

00:30:23.186 --> 00:30:25.706 A:middle
Here I added this little
takeHeapSnapshot button,

00:30:25.826 --> 00:30:27.696 A:middle
so I already added some
calls to the console

00:30:27.696 --> 00:30:29.886 A:middle
about takeHeapSnapshot
when we switch

00:30:29.886 --> 00:30:32.636 A:middle
between the two satellite
groups and some other actions.

00:30:33.796 --> 00:30:38.416 A:middle
So for this recording, I'm going
to rotate and then I'm going

00:30:38.416 --> 00:30:40.936 A:middle
to switch between two
satellites over and over.

00:30:46.266 --> 00:30:47.846 A:middle
We should look at
Spy Satellites.

00:30:47.846 --> 00:30:49.426 A:middle
That seems kind of relevant.

00:30:52.416 --> 00:30:54.326 A:middle
Okay. And you'll notice
it starts to stutter a bit

00:30:54.326 --> 00:30:56.726 A:middle
because we're taking
Snapshots of everything

00:30:56.726 --> 00:30:57.656 A:middle
in the JavaScript heap.

00:30:57.656 --> 00:31:00.126 A:middle
So this you know we're
making lots of Objects,

00:30:57.656 --> 00:31:00.126 A:middle
So this you know we're
making lots of Objects,

00:31:00.126 --> 00:31:01.786 A:middle
so this is going to slow
down your app a lot.

00:31:01.876 --> 00:31:05.336 A:middle
So it's important to not
take lots of Snapshots.

00:31:05.336 --> 00:31:08.446 A:middle
You want to take them
only on important times.

00:31:08.796 --> 00:31:12.046 A:middle
So here, you can see
these Ss in the box

00:31:12.046 --> 00:31:15.736 A:middle
and those are the
Snapshots we took.

00:31:16.046 --> 00:31:17.426 A:middle
So if we zoom in over here,

00:31:17.426 --> 00:31:20.896 A:middle
we can see that there's pretty
steady memory growth over time

00:31:20.896 --> 00:31:22.956 A:middle
as we start switching
between these satellite sets.

00:31:26.746 --> 00:31:29.106 A:middle
So if we want to investigate
this, like Jon said,

00:31:29.106 --> 00:31:31.156 A:middle
we need to start
comparing two of these

00:31:31.156 --> 00:31:35.766 A:middle
to see what's being
retained at the end.

00:31:35.906 --> 00:31:40.166 A:middle
So let's go between
Snapshot 9 and 11.

00:31:41.616 --> 00:31:45.196 A:middle
And right away, we can
see a bunch of stuff

00:31:45.196 --> 00:31:48.136 A:middle
that was allocated
between Snapshot 9 and 11

00:31:48.136 --> 00:31:49.446 A:middle
and is still alive right now.

00:31:49.956 --> 00:31:52.486 A:middle
So that's a pretty good sign
that it's being retained

00:31:52.486 --> 00:31:54.366 A:middle
and you know we probably
didn't mean to do that.

00:31:55.636 --> 00:31:57.546 A:middle
So we can start looking
at what these things are.

00:31:58.736 --> 00:31:59.606 A:middle
There're some Arrays.

00:32:00.306 --> 00:32:03.436 A:middle
It looks like we have
Arrays full of coordinates.

00:32:04.636 --> 00:32:07.266 A:middle
And you know we use coordinates
in lots of different places

00:32:07.266 --> 00:32:09.126 A:middle
in this app, but
if we hover here,

00:32:09.126 --> 00:32:11.156 A:middle
we can see the path
to these things.

00:32:11.256 --> 00:32:14.756 A:middle
So these seem to be saved
in trajectoryHistory,

00:32:14.756 --> 00:32:17.736 A:middle
which is what we use to
make those trails behind

00:32:17.736 --> 00:32:18.436 A:middle
the satellites.

00:32:19.976 --> 00:32:21.436 A:middle
So okay. That's fine,

00:32:21.436 --> 00:32:25.306 A:middle
but I don't think we
should still have this

00:32:25.306 --> 00:32:27.706 A:middle
trajectoryHistory for satellites
who are no longer showing.

00:32:27.776 --> 00:32:31.986 A:middle
That seems kind of like a bug.

00:32:31.986 --> 00:32:33.646 A:middle
We allocate some Objects too.

00:32:33.696 --> 00:32:37.056 A:middle
And this is sort of
strange because you know

00:32:38.096 --> 00:32:39.596 A:middle
between Snapshot 9 and 11,

00:32:39.596 --> 00:32:41.496 A:middle
we've already seen
these satellites before.

00:32:41.856 --> 00:32:44.316 A:middle
So I wouldn't expect that
we're making new Objects

00:32:44.316 --> 00:32:45.086 A:middle
for each satellite.

00:32:45.136 --> 00:32:45.946 A:middle
We should just use them

00:32:45.946 --> 00:32:48.726 A:middle
if we already fetched
the resources for them.

00:32:48.786 --> 00:32:53.216 A:middle
So and then here's a bunch of
coordinates and telemetry stuff,

00:32:53.216 --> 00:32:55.096 A:middle
so it seems like we might be

00:32:55.096 --> 00:32:56.466 A:middle
like re-parsing them
or something.

00:32:57.926 --> 00:33:00.936 A:middle
But I'm not sure, so
one thing I'd like to do

00:32:57.926 --> 00:33:00.936 A:middle
But I'm not sure, so
one thing I'd like to do

00:33:00.936 --> 00:33:03.906 A:middle
in this view is you know
we have lots of Objects.

00:33:03.906 --> 00:33:04.856 A:middle
You can't read all of them,

00:33:05.136 --> 00:33:08.026 A:middle
but what I like to do is find
something that's fairly unique.

00:33:08.856 --> 00:33:12.066 A:middle
And in this Snapshot here,
we have lots of Strings,

00:33:12.066 --> 00:33:13.926 A:middle
lots of Arrays, lots of Objects.

00:33:13.926 --> 00:33:16.656 A:middle
But there's only one
Promise that's retained

00:33:16.656 --> 00:33:17.816 A:middle
between these two Snapshots.

00:33:17.896 --> 00:33:21.566 A:middle
So I think if I want to debug
this, I should start looking

00:33:21.566 --> 00:33:25.036 A:middle
in our code to see where we're
using Promises because it seems

00:33:25.036 --> 00:33:27.266 A:middle
that that's being leaked
with some other stuff.

00:33:27.446 --> 00:33:29.276 A:middle
So we search for Promise.

00:33:30.076 --> 00:33:34.876 A:middle
Okay. There's D3 library, and
here's our code that uses it.

00:33:35.616 --> 00:33:39.046 A:middle
Okay. Let's go to this one.

00:33:39.876 --> 00:33:42.826 A:middle
Okay. So in the [inaudible]
I did,

00:33:42.826 --> 00:33:44.946 A:middle
we switched between
the satellites a lot

00:33:44.946 --> 00:33:46.606 A:middle
and then the code that's
called loadDataset.

00:33:46.806 --> 00:33:50.126 A:middle
So someone left comments.

00:33:50.126 --> 00:33:50.496 A:middle
That's nice.

00:33:50.686 --> 00:33:55.276 A:middle
So here it looks like
someone requests we change

00:33:55.276 --> 00:33:55.896 A:middle
the satellites.

00:33:57.346 --> 00:34:01.246 A:middle
So here we asynchronously
load that data

00:33:57.346 --> 00:34:01.246 A:middle
So here we asynchronously
load that data

00:34:01.336 --> 00:34:03.456 A:middle
for the satellites from the TRL.

00:34:03.766 --> 00:34:06.036 A:middle
When it comes back,
we're going to parse it,

00:34:07.146 --> 00:34:08.525 A:middle
and then we're going
to parse it some more

00:34:08.525 --> 00:34:10.916 A:middle
with the satellite
plotting library.

00:34:11.485 --> 00:34:13.446 A:middle
And then we're going to save
it to our list of satellites.

00:34:15.376 --> 00:34:18.576 A:middle
That's all well and fine,
but back in Inspector,

00:34:18.576 --> 00:34:20.456 A:middle
it seems that we're leaking
this Promise every time.

00:34:20.606 --> 00:34:23.485 A:middle
So if you look more
carefully, what if we switched

00:34:23.485 --> 00:34:25.366 A:middle
to a data set that we
already loaded before?

00:34:26.136 --> 00:34:29.045 A:middle
It seems like we're not
even checking for that case.

00:34:30.226 --> 00:34:34.856 A:middle
So if you look more carefully
up here, every time we switch

00:34:34.856 --> 00:34:36.255 A:middle
between the two satellites,

00:34:37.286 --> 00:34:38.536 A:middle
we're doing a new
network request.

00:34:38.886 --> 00:34:40.176 A:middle
So if we go to this Timeline,

00:34:41.016 --> 00:34:43.786 A:middle
it seems like we're requesting
the same debris field data

00:34:43.786 --> 00:34:44.466 A:middle
over and over.

00:34:45.016 --> 00:34:47.696 A:middle
And that makes sense
because if we go back

00:34:47.775 --> 00:34:49.585 A:middle
to the code, we request that.

00:34:49.585 --> 00:34:51.456 A:middle
Then we make a bunch of
Objects when we parse it.

00:34:51.456 --> 00:34:54.286 A:middle
And then we push it onto
an array of satellites,

00:34:54.346 --> 00:34:56.696 A:middle
and that thing never really gets
cleared as far as I can tell.

00:34:56.815 --> 00:35:00.296 A:middle
So it seems like
we're just doing a lot

00:34:56.815 --> 00:35:00.296 A:middle
So it seems like
we're just doing a lot

00:35:00.296 --> 00:35:02.256 A:middle
of unnecessary work
and then leaking it.

00:35:02.256 --> 00:35:05.286 A:middle
So I think what we can
do here is to check

00:35:05.286 --> 00:35:08.236 A:middle
if we already have this
parsed satellites Object.

00:35:08.726 --> 00:35:11.646 A:middle
Because this is a Promise,
if this thing already exists,

00:35:11.646 --> 00:35:14.076 A:middle
we can still call .then on it.

00:35:14.836 --> 00:35:15.896 A:middle
Since it's already solved,

00:35:16.396 --> 00:35:18.956 A:middle
next time we evaluate
the Promise reactions,

00:35:18.956 --> 00:35:22.266 A:middle
it's going to go through and
set the satellites onto the map.

00:35:23.646 --> 00:35:25.976 A:middle
So let's add a [inaudible] here.

00:35:30.666 --> 00:35:32.976 A:middle
And if this doesn't exist,
then we'll make it --

00:35:42.246 --> 00:35:47.316 A:middle
Okay. Let's stop and rerun
and see if this fixes this.

00:35:49.646 --> 00:35:51.926 A:middle
So we need to go
back and reattach --

00:35:55.936 --> 00:35:58.976 A:middle
And okay, here's our app, and
we're going to start recording.

00:36:02.266 --> 00:36:03.216 A:middle
And when we go back to the app,

00:36:03.216 --> 00:36:04.816 A:middle
I'm going to turn
on the Snapshots.

00:36:05.646 --> 00:36:06.496 A:middle
Turn on some effects.

00:36:06.816 --> 00:36:10.246 A:middle
And we'll go down south.

00:36:10.796 --> 00:36:13.256 A:middle
Okay. So Spy Satellites.

00:36:14.276 --> 00:36:16.246 A:middle
Science Experiments
by Satellites.

00:36:17.796 --> 00:36:18.656 A:middle
Science Experiments.

00:36:19.856 --> 00:36:19.946 A:middle
Okay.

00:36:24.946 --> 00:36:28.456 A:middle
So if we go back here, we're
seeing a lot less memory growth.

00:36:28.536 --> 00:36:32.026 A:middle
Maybe 1 megabyte,
instead of like 4 or 5,

00:36:32.026 --> 00:36:34.216 A:middle
so there might be some
more leaks in here.

00:36:34.216 --> 00:36:38.896 A:middle
But at the end of the Snapshot,
we have about as much memory

00:36:38.896 --> 00:36:41.246 A:middle
as when we started rendering
this thing in the beginning.

00:36:41.246 --> 00:36:43.116 A:middle
So I think we've fixed
that particular leak.

00:36:44.816 --> 00:36:49.636 A:middle
So this shows how we can use the
Allocations and Memory Timelines

00:36:49.766 --> 00:36:51.866 A:middle
to figure out where
we're leaking memory

00:36:52.306 --> 00:36:54.536 A:middle
in apps like this.

00:36:54.536 --> 00:36:58.586 A:middle
And it's great because like this
app has a lot of stuff going on.

00:36:58.646 --> 00:37:01.026 A:middle
But still, with the dipping
[phonetic] functionality,

00:36:58.646 --> 00:37:01.026 A:middle
But still, with the dipping
[phonetic] functionality,

00:37:01.026 --> 00:37:02.896 A:middle
we can really drill
down to what's changing

00:37:02.896 --> 00:37:05.666 A:middle
in some Timeline we care about.

00:37:06.646 --> 00:37:09.056 A:middle
Okay. So that's the end
of Satellite Tracker.

00:37:10.186 --> 00:37:10.786 A:middle
Back to you, Jon.

00:37:11.516 --> 00:37:16.186 A:middle
[ Applause ]

00:37:16.686 --> 00:37:17.356 A:middle
&gt;&gt; Thank you Brian.

00:37:17.746 --> 00:37:20.236 A:middle
You can see how it
really amazingly quick

00:37:20.366 --> 00:37:23.136 A:middle
and simple these new
Timelines make it

00:37:23.136 --> 00:37:24.846 A:middle
to zero in on memory issues.

00:37:25.496 --> 00:37:27.696 A:middle
So remember you want to use
the Memory Timeline to figure

00:37:27.696 --> 00:37:30.396 A:middle
out how memory is being used and
what's driving memory spikes,

00:37:30.396 --> 00:37:31.866 A:middle
so you have an idea
of where to go look.

00:37:32.606 --> 00:37:35.456 A:middle
And then, take multiple
Heap Snapshots

00:37:35.456 --> 00:37:37.816 A:middle
in the JavaScript
Allocations Timeline to zoom

00:37:37.816 --> 00:37:39.616 A:middle
into code that's driving
the memory growth.

00:37:40.766 --> 00:37:43.406 A:middle
Also, don't forget to get
rid of takeHeapSnapshot

00:37:43.406 --> 00:37:44.676 A:middle
from your code before shipping.

00:37:46.056 --> 00:37:47.886 A:middle
And remember the
performance impact

00:37:48.176 --> 00:37:50.606 A:middle
that the JavaScript
Allocations Timeline can have

00:37:50.676 --> 00:37:51.416 A:middle
while recording.

00:37:53.316 --> 00:37:56.586 A:middle
So that's a look at the new
Timeline instruments available

00:37:56.586 --> 00:37:58.306 A:middle
in Web Inspector with Safari 10.

00:37:58.516 --> 00:38:00.526 A:middle
I think you're really
going to love using them.

00:37:58.516 --> 00:38:00.526 A:middle
I think you're really
going to love using them.

00:38:01.846 --> 00:38:03.466 A:middle
And as I wrap this up,
I want to leave you

00:38:03.466 --> 00:38:04.836 A:middle
with some next steps to take.

00:38:05.396 --> 00:38:08.376 A:middle
I want to encourage you
to reconsider WKWebView,

00:38:08.376 --> 00:38:09.616 A:middle
if you've not made
the switch yet.

00:38:10.116 --> 00:38:13.576 A:middle
And turn on the Develop
Menu in Safari Preferences,

00:38:13.576 --> 00:38:16.526 A:middle
connect Web Inspector to your
app and start taking advantage

00:38:16.526 --> 00:38:17.626 A:middle
of these new features.

00:38:18.046 --> 00:38:20.806 A:middle
Save a ton of time using
them with the Bottom Up view

00:38:20.806 --> 00:38:23.316 A:middle
and Call Trees for the best
places to start optimizing.

00:38:23.586 --> 00:38:26.146 A:middle
The Memory Timeline to
quickly see how memory spikes

00:38:26.146 --> 00:38:26.676 A:middle
are happening.

00:38:27.126 --> 00:38:29.226 A:middle
And Heap Snapshots
to easily explore

00:38:29.226 --> 00:38:31.126 A:middle
and compare Object allocations.

00:38:31.646 --> 00:38:33.946 A:middle
And stay updated on features.

00:38:33.946 --> 00:38:36.606 A:middle
There's more this year in
Web Inspector and WebKit

00:38:36.606 --> 00:38:39.366 A:middle
that you can take advantage
of in your app's web content

00:38:39.566 --> 00:38:41.706 A:middle
to deliver great
in-app experiences.

00:38:42.796 --> 00:38:45.016 A:middle
Along with the features
Brian and I showed you today,

00:38:45.276 --> 00:38:46.626 A:middle
our team added some
other features

00:38:46.626 --> 00:38:48.276 A:middle
to Web Inspector
over this past year.

00:38:49.396 --> 00:38:50.996 A:middle
Quick Open will jump you right

00:38:50.996 --> 00:38:53.296 A:middle
into the resources
loaded with your page.

00:38:53.856 --> 00:38:57.296 A:middle
And Tail Call Stacks will now
show you Tail Call optimized

00:38:57.296 --> 00:38:58.416 A:middle
functions in the debugger.

00:38:59.336 --> 00:39:02.646 A:middle
And earlier this spring, we
shipped Safari 9.1 on OS 10,

00:38:59.336 --> 00:39:02.646 A:middle
And earlier this spring, we
shipped Safari 9.1 on OS 10,

00:39:03.236 --> 00:39:05.296 A:middle
and with an updated
Web Inspector with it.

00:39:05.296 --> 00:39:07.386 A:middle
And that shows the
Pseudo Elements

00:39:07.386 --> 00:39:09.056 A:middle
in the DOM Tree of
the Elements tab.

00:39:09.056 --> 00:39:12.096 A:middle
And there's also the new
visual style sidebar.

00:39:12.686 --> 00:39:15.186 A:middle
And if you aren't already aware,

00:39:15.756 --> 00:39:18.446 A:middle
Web Inspector is a developer
tool that's created as part

00:39:18.446 --> 00:39:20.206 A:middle
of the WebKit Open
Source Project.

00:39:21.656 --> 00:39:25.256 A:middle
WebKit is the web browser engine
that's used to power your apps

00:39:25.256 --> 00:39:27.656 A:middle
and drive WebViews
and JSContext.

00:39:28.056 --> 00:39:30.126 A:middle
And of course, it's also
the engine behind Safari.

00:39:30.926 --> 00:39:33.666 A:middle
In this past year, our teams
added great new features

00:39:33.666 --> 00:39:34.286 A:middle
to WebKit.

00:39:34.516 --> 00:39:36.906 A:middle
We hit 100% support for ES6.

00:39:37.606 --> 00:39:40.526 A:middle
We improved support for the
recommended IndexedDB Standard.

00:39:41.216 --> 00:39:45.296 A:middle
We also added Shadow DOM support
and WebDriver, CSS Variables

00:39:45.296 --> 00:39:46.466 A:middle
and the Picture Element.

00:39:47.686 --> 00:39:50.276 A:middle
So there's a lot going on and
as an open source project,

00:39:50.276 --> 00:39:52.546 A:middle
you can follow development
as it occurs.

00:39:53.046 --> 00:39:55.006 A:middle
Most of you here will want
to take advantage of this.

00:39:55.436 --> 00:39:57.936 A:middle
And if there are some of you
here that want to enhance some

00:39:57.936 --> 00:39:59.496 A:middle
of these, you have
that opportunity

00:39:59.496 --> 00:40:01.706 A:middle
because of the way WebKit
is an open source project.

00:39:59.496 --> 00:40:01.706 A:middle
because of the way WebKit
is an open source project.

00:40:02.396 --> 00:40:03.666 A:middle
So you can find out more

00:40:03.666 --> 00:40:05.756 A:middle
about the WebKit
Project on WebKit.org.

00:40:05.756 --> 00:40:08.236 A:middle
And the WebKit team, the
engineers behind WebKit,

00:40:08.496 --> 00:40:09.766 A:middle
blog about development work.

00:40:09.766 --> 00:40:11.636 A:middle
In fact, we have two
blog posts up now

00:40:11.856 --> 00:40:14.726 A:middle
that cover the Memory Timelines
and the Sampling Profiler

00:40:14.726 --> 00:40:15.766 A:middle
that we talked about today.

00:40:15.766 --> 00:40:17.106 A:middle
So if you want to
get more information,

00:40:17.106 --> 00:40:17.956 A:middle
you can dig in there.

00:40:18.556 --> 00:40:19.996 A:middle
We also have a feature
status page

00:40:19.996 --> 00:40:21.436 A:middle
that gives you at-a-glance
updates

00:40:21.436 --> 00:40:22.866 A:middle
for our web standards progress.

00:40:22.866 --> 00:40:24.836 A:middle
And there's also
links to downloads

00:40:24.836 --> 00:40:27.836 A:middle
for WebKit nightly builds
and our latest browser,

00:40:28.116 --> 00:40:29.776 A:middle
the Safari Technology Preview.

00:40:30.526 --> 00:40:32.466 A:middle
It's updated every
couple of weeks,

00:40:32.566 --> 00:40:35.836 A:middle
with an updated WebKit
engine, so you can try out new

00:40:35.836 --> 00:40:37.106 A:middle
and experimental features

00:40:37.106 --> 00:40:39.386 A:middle
in WebKit every two
weeks as it's improved.

00:40:40.496 --> 00:40:42.136 A:middle
Our teams pore a lot of work

00:40:42.136 --> 00:40:44.296 A:middle
into Safari WebKit
and Web Inspector.

00:40:44.486 --> 00:40:45.896 A:middle
And the Web Inspector
team was able

00:40:45.896 --> 00:40:48.526 A:middle
to use these new performance
features we showed you today

00:40:48.766 --> 00:40:50.996 A:middle
to find issues and
deliver faster performance

00:40:50.996 --> 00:40:52.116 A:middle
in Web Inspector itself.

00:40:52.116 --> 00:40:54.226 A:middle
I can't wait to see what
you'll do with them.

00:40:54.626 --> 00:40:56.696 A:middle
So for more information,
you can watch this session

00:40:56.696 --> 00:40:58.956 A:middle
and download the slides
at developer.apple.com.

00:40:59.716 --> 00:41:03.296 A:middle
There are lots of other relevant
sessions earlier this week

00:40:59.716 --> 00:41:03.296 A:middle
There are lots of other relevant
sessions earlier this week

00:41:03.296 --> 00:41:04.826 A:middle
as well as in past years.

00:41:05.106 --> 00:41:07.496 A:middle
You can find those on
developer.apple.com as well.

00:41:08.686 --> 00:41:12.406 A:middle
So on behalf of Brian, myself,
Safari and the WebKit teams,

00:41:12.686 --> 00:41:13.556 A:middle
thank you for being here.

00:41:13.686 --> 00:41:14.976 A:middle
enjoy the rest of WWDC.

00:41:15.508 --> 00:41:17.508 A:middle
[ Applause ]
