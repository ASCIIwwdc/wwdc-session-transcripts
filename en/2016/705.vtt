WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:08.516 --> 00:00:17.500 A:middle
[ Music ]

00:00:26.516 --> 00:00:28.606 A:middle
[ Applause ]

00:00:29.106 --> 00:00:29.526 A:middle
&gt;&gt; Thank you.

00:00:33.046 --> 00:00:35.186 A:middle
You're all amazing for
coming to a security talk

00:00:35.186 --> 00:00:37.146 A:middle
at 4:00 p.m. I know
it's been a long day,

00:00:37.146 --> 00:00:39.036 A:middle
but thank you so
much for coming.

00:00:39.596 --> 00:00:41.866 A:middle
My name is Ivan Krstic, I
head Security Engineering

00:00:41.866 --> 00:00:45.016 A:middle
and Architecture at Apple, which
is the group that built security

00:00:45.016 --> 00:00:47.986 A:middle
from the ground up into every
product we ship to users.

00:00:49.006 --> 00:00:50.936 A:middle
Today the focus is iOS.

00:00:50.936 --> 00:00:52.926 A:middle
And I am so proud to tell you

00:00:52.926 --> 00:00:54.466 A:middle
about the role security
has played

00:00:54.466 --> 00:00:56.976 A:middle
as a key design philosophy
for that platform.

00:00:58.586 --> 00:01:00.806 A:middle
Before we dive in, we
need to set some context.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.586 --> 00:01:00.806 A:middle
Before we dive in, we
need to set some context.

00:01:01.686 --> 00:01:03.556 A:middle
Why is security so
important to Apple,

00:01:03.976 --> 00:01:06.516 A:middle
and why do we believe it is
so critical to our users?

00:01:07.906 --> 00:01:11.816 A:middle
The answer is because our mobile
devices are an unprecedented

00:01:11.816 --> 00:01:12.916 A:middle
record of our lives.

00:01:13.976 --> 00:01:16.896 A:middle
Never before in history
have there been objects

00:01:16.946 --> 00:01:20.466 A:middle
that know so much about us.

00:01:20.736 --> 00:01:21.986 A:middle
About how we spend money.

00:01:23.456 --> 00:01:25.936 A:middle
About the emails we send,
and the photos we take.

00:01:26.856 --> 00:01:27.966 A:middle
About our messages.

00:01:28.266 --> 00:01:31.386 A:middle
From our quickest hellos to our
most intimate conversations.

00:01:34.316 --> 00:01:35.336 A:middle
When you think of it that way,

00:01:35.336 --> 00:01:37.126 A:middle
you realize that protecting
the security of all

00:01:37.126 --> 00:01:39.766 A:middle
that information is so much
more than just about technology.

00:01:40.526 --> 00:01:43.796 A:middle
For us it's a mission, and it's
a mission that is nothing short

00:01:43.796 --> 00:01:46.346 A:middle
of protecting the digital
personal sovereignty

00:01:46.346 --> 00:01:47.016 A:middle
of our users.

00:01:47.626 --> 00:01:51.366 A:middle
And when you think about it
that way, you also realize

00:01:51.366 --> 00:01:53.816 A:middle
that the very definition
of attackers has changed.

00:01:55.496 --> 00:01:58.496 A:middle
Attackers today might
be criminals looking

00:01:58.496 --> 00:01:59.876 A:middle
to hold your data for ransom.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.906 --> 00:02:03.266 A:middle
They might be unscrupulous
business competitors looking

00:02:03.266 --> 00:02:04.876 A:middle
to gain an edge.

00:02:05.336 --> 00:02:07.536 A:middle
They might be internet
service providers looking

00:02:07.536 --> 00:02:11.346 A:middle
to indelibly mark your
online activity for tracking

00:02:11.346 --> 00:02:12.926 A:middle
and advertising without
your consent.

00:02:13.706 --> 00:02:15.676 A:middle
It could be nation states,

00:02:16.076 --> 00:02:18.866 A:middle
like in the 2014 hack
of Sony Pictures.

00:02:19.846 --> 00:02:22.626 A:middle
And sometimes curiosity
can get the better

00:02:22.626 --> 00:02:25.136 A:middle
of even those close to us.

00:02:26.566 --> 00:02:29.316 A:middle
And then, of course, we must
never underestimate the power

00:02:29.316 --> 00:02:30.776 A:middle
of the advanced feline threat.

00:02:31.516 --> 00:02:37.086 A:middle
[ Laughter ]

00:02:37.586 --> 00:02:37.836 A:middle
Thank you.

00:02:40.436 --> 00:02:41.746 A:middle
So when you think about all

00:02:41.746 --> 00:02:43.276 A:middle
of these attackers,
what do they want?

00:02:44.256 --> 00:02:47.566 A:middle
We find that the motives tend
to group in one of three groups.

00:02:47.986 --> 00:02:51.396 A:middle
There is personal stalking and
surveillance, which is trying

00:02:51.396 --> 00:02:53.666 A:middle
to access your photos
and your messages,

00:02:53.666 --> 00:02:56.556 A:middle
gin access to your camera
and your microphone,

00:02:57.446 --> 00:02:58.886 A:middle
then there is corporate
espionage,

00:02:59.436 --> 00:03:02.606 A:middle
which is gaining access to your
business emails and documents


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.436 --> 00:03:02.606 A:middle
which is gaining access to your
business emails and documents

00:03:03.006 --> 00:03:07.266 A:middle
and your intellectual
property, and then finally,

00:03:07.266 --> 00:03:10.926 A:middle
there is direct financial
benefit, stealing money directly

00:03:10.926 --> 00:03:13.616 A:middle
from your online banking
session or injecting ads

00:03:13.616 --> 00:03:15.726 A:middle
and committing click fraud
while you browse the web.

00:03:15.726 --> 00:03:21.626 A:middle
And to do these things,
attackers have created adware,

00:03:21.626 --> 00:03:25.086 A:middle
spyware, ransom ware,
remote access Trojans,

00:03:25.616 --> 00:03:26.986 A:middle
and a variety of other malware.

00:03:27.346 --> 00:03:30.536 A:middle
How do we know this?

00:03:30.576 --> 00:03:31.946 A:middle
Because we've seen it
on other platforms.

00:03:32.516 --> 00:03:41.226 A:middle
[ Applause ]

00:03:41.726 --> 00:03:42.916 A:middle
But not on iOS.

00:03:44.006 --> 00:03:47.196 A:middle
Nearly a decade after
it came into the world,

00:03:47.196 --> 00:03:49.906 A:middle
there hasn't been a
single piece of iOS malware

00:03:49.906 --> 00:03:51.776 A:middle
that has affected
our users at scale.

00:03:53.876 --> 00:03:58.446 A:middle
This is because nearly
10 years ago,

00:03:58.446 --> 00:04:02.136 A:middle
Apple realized what role mobile
devices would come to play


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.446 --> 00:04:02.136 A:middle
Apple realized what role mobile
devices would come to play

00:04:02.396 --> 00:04:03.566 A:middle
in the lives of our users.

00:04:04.626 --> 00:04:06.926 A:middle
We realized that existing
security technologies would be

00:04:06.926 --> 00:04:10.016 A:middle
woefully inadequate, and could
not step up to the challenge,

00:04:11.036 --> 00:04:15.186 A:middle
and so we decided to build
the best security technologies

00:04:15.606 --> 00:04:19.416 A:middle
that we could imagine to
protect our customers,

00:04:19.766 --> 00:04:21.086 A:middle
at a scale that is staggering.

00:04:21.505 --> 00:04:22.956 A:middle
We are protecting users that use

00:04:22.956 --> 00:04:28.076 A:middle
over a billion active iOS
devices all over the globe.

00:04:28.836 --> 00:04:30.016 A:middle
And every single one

00:04:30.016 --> 00:04:32.536 A:middle
of our security features
protects a real user

00:04:32.536 --> 00:04:33.336 A:middle
from real threats.

00:04:33.756 --> 00:04:38.356 A:middle
But we are not in this alone.

00:04:38.846 --> 00:04:41.416 A:middle
There are really three key
pillars to iOS security.

00:04:41.416 --> 00:04:45.526 A:middle
There is platform security
which are the technologies

00:04:45.526 --> 00:04:47.296 A:middle
that we build into our
software and hardware.

00:04:48.086 --> 00:04:50.796 A:middle
There is users who upgrade
their software to the latest

00:04:50.796 --> 00:04:53.356 A:middle
and most secure versions,
and then there's developers

00:04:53.356 --> 00:04:55.766 A:middle
like you, who use our
security technologies

00:04:55.826 --> 00:04:56.776 A:middle
to build secure apps.

00:04:57.016 --> 00:04:59.296 A:middle
We're going to talk about
all three pillars today.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:00.416 --> 00:05:01.756 A:middle
We'll start with
platform security.

00:05:03.486 --> 00:05:06.096 A:middle
When you think about how
security used to work,

00:05:06.096 --> 00:05:10.746 A:middle
especially in enterprise
settings, it was a long

00:05:10.746 --> 00:05:13.146 A:middle
and complex list of
thing that users have

00:05:13.146 --> 00:05:14.616 A:middle
to do to try and be secure.

00:05:15.086 --> 00:05:17.836 A:middle
Loading secure configuration
into their devices,

00:05:18.146 --> 00:05:20.336 A:middle
complex batch management
schemes,

00:05:20.376 --> 00:05:21.976 A:middle
complex password policies.

00:05:22.596 --> 00:05:24.376 A:middle
It was difficult,
it was heavy handed,

00:05:24.686 --> 00:05:26.246 A:middle
and it set up users to fail.

00:05:26.246 --> 00:05:27.806 A:middle
It was so hard to be secure.

00:05:28.726 --> 00:05:32.266 A:middle
But because Apple owns all
the hardware and software,

00:05:32.266 --> 00:05:34.296 A:middle
we were in a position
to address this

00:05:34.296 --> 00:05:35.596 A:middle
in a unique and innovative way.

00:05:37.216 --> 00:05:38.316 A:middle
When you look at iOS security,

00:05:38.316 --> 00:05:40.766 A:middle
we've built security
directly into the silicon.

00:05:40.766 --> 00:05:42.826 A:middle
We have made the
devices that are secure

00:05:42.826 --> 00:05:44.196 A:middle
out of the box by default.

00:05:45.056 --> 00:05:47.616 A:middle
We've made it really easy
for our users to update

00:05:47.616 --> 00:05:49.386 A:middle
and run the latest and
most secure version.

00:05:49.386 --> 00:05:52.076 A:middle
We have made it really
easy to log

00:05:52.076 --> 00:05:53.976 A:middle
into the devices
securely with Touch ID.

00:05:54.966 --> 00:05:58.936 A:middle
We have a curated App Store, and
we've made security easy to use.

00:05:59.296 --> 00:06:04.156 A:middle
IOS platform security consists
of a great deal of features,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.296 --> 00:06:04.156 A:middle
IOS platform security consists
of a great deal of features,

00:06:04.156 --> 00:06:06.286 A:middle
and today I only have
time to highlight five.

00:06:07.096 --> 00:06:08.346 A:middle
We'll start with Secure Boot.

00:06:09.576 --> 00:06:13.826 A:middle
One of the most important
ways of being able

00:06:13.826 --> 00:06:16.536 A:middle
to trust a device is to trust
the software that runs on it.

00:06:17.326 --> 00:06:23.396 A:middle
And the way we do this is by
building trust into the silicon.

00:06:24.836 --> 00:06:31.506 A:middle
The Apple design system chip
inside every iOS device holds

00:06:32.066 --> 00:06:33.976 A:middle
Apple's public keys in an area

00:06:33.976 --> 00:06:36.416 A:middle
of memory called Boot
ROM, which is read only.

00:06:36.786 --> 00:06:39.106 A:middle
It's written in the factory and
cannot be changed after that.

00:06:40.026 --> 00:06:44.266 A:middle
And when your iOS device
starts, we take that public key

00:06:44.926 --> 00:06:48.356 A:middle
and the Boot ROM will validate
the next step in the boot chain,

00:06:48.586 --> 00:06:49.866 A:middle
which is the low-level
boot loader.

00:06:50.426 --> 00:06:54.066 A:middle
And only that validation passes
will we move on to the next step

00:06:54.066 --> 00:06:59.436 A:middle
in the chain, and we'll repeat
this until iOS has fully booted,

00:06:59.486 --> 00:07:02.696 A:middle
which gives us confidence
that every piece of software


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.486 --> 00:07:02.696 A:middle
which gives us confidence
that every piece of software

00:07:02.696 --> 00:07:06.176 A:middle
that was used in boot was
signed with Apple's Private Key.

00:07:11.556 --> 00:07:14.956 A:middle
When you think about secure
boot, it's really interesting

00:07:14.956 --> 00:07:17.746 A:middle
that we don't rely
on any third parties

00:07:18.546 --> 00:07:19.896 A:middle
to deliver secure boot trust.

00:07:19.896 --> 00:07:22.356 A:middle
We don't rely on
certificate authorities

00:07:22.356 --> 00:07:23.846 A:middle
that are outside of our control.

00:07:24.606 --> 00:07:27.956 A:middle
The keys used or secure boot are
generated management provision

00:07:27.956 --> 00:07:28.466 A:middle
by Apple.

00:07:28.946 --> 00:07:30.566 A:middle
The code that does
the verification

00:07:30.566 --> 00:07:32.476 A:middle
that I just showed you
is written by Apple,

00:07:32.526 --> 00:07:35.396 A:middle
and only Apple is in possession
of the private keys required

00:07:35.426 --> 00:07:36.596 A:middle
to sign all the software.

00:07:36.816 --> 00:07:40.156 A:middle
But there is another
interesting element of this,

00:07:40.496 --> 00:07:44.276 A:middle
which is that when an iOS device
goes to update the version

00:07:44.276 --> 00:07:45.826 A:middle
of the software, it has

00:07:45.826 --> 00:07:48.916 A:middle
to contact our installation
authorization server,

00:07:48.916 --> 00:07:51.766 A:middle
and ask for permission to
update to a given version.

00:07:52.076 --> 00:07:54.536 A:middle
And it does this by taking
cryptographic measurements

00:07:54.696 --> 00:07:56.886 A:middle
of the update, sending
them to the server,

00:07:57.126 --> 00:07:58.906 A:middle
and asking whether
it's okay to update.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.136 --> 00:08:03.096 A:middle
We do this because the
server is now in a position

00:08:03.186 --> 00:08:07.246 A:middle
to deny an iOS device the
ability to move to an older,

00:08:07.276 --> 00:08:10.566 A:middle
less secure version of iOS.

00:08:10.656 --> 00:08:12.746 A:middle
And so when you put these
two things together,

00:08:12.746 --> 00:08:16.876 A:middle
you get a strong and trustworthy
mechanism for relying

00:08:16.876 --> 00:08:19.256 A:middle
on the software that
runs every iOS device.

00:08:20.626 --> 00:08:23.026 A:middle
It's not possible to copy
an old version of iOS

00:08:23.366 --> 00:08:24.376 A:middle
from one device to another.

00:08:24.926 --> 00:08:26.676 A:middle
It's not possible to
tamper with the integrity

00:08:26.676 --> 00:08:27.896 A:middle
of the software of this process.

00:08:27.956 --> 00:08:34.086 A:middle
Now, let's talk about
protecting user's data at rest.

00:08:35.535 --> 00:08:39.346 A:middle
If you're really serious about
doing this, you don't want

00:08:39.346 --> 00:08:41.726 A:middle
to take the cryptographic
keys that protect user data

00:08:41.726 --> 00:08:44.226 A:middle
and make them available to
the application processor

00:08:44.226 --> 00:08:46.436 A:middle
or the normal processor
in the device.

00:08:46.876 --> 00:08:48.816 A:middle
That is because the attack
surface there is simply

00:08:48.846 --> 00:08:49.436 A:middle
too large.

00:08:50.056 --> 00:08:52.336 A:middle
If you're serious about
protecting user data at rest,

00:08:52.336 --> 00:08:55.226 A:middle
you build dedicated silicon that
holds those cryptographic keys.

00:08:55.976 --> 00:08:56.526 A:middle
We've done it.

00:08:57.196 --> 00:08:58.446 A:middle
We call it the secure enclave.

00:08:59.316 --> 00:09:02.156 A:middle
Now, when you think
about passcodes,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.316 --> 00:09:02.156 A:middle
Now, when you think
about passcodes,

00:09:02.606 --> 00:09:04.586 A:middle
normally they're very
short, four to six digits.

00:09:05.196 --> 00:09:07.496 A:middle
And if somehow an
attacker were able

00:09:07.496 --> 00:09:11.826 A:middle
to take the encrypted data off
a phone, or off an iOS device,

00:09:12.436 --> 00:09:14.696 A:middle
and attempt every
single possible passcode,

00:09:15.296 --> 00:09:16.466 A:middle
it wouldn't take them very long.

00:09:17.826 --> 00:09:21.236 A:middle
So what we do instead is we
take the user's passcode,

00:09:21.946 --> 00:09:24.586 A:middle
and we derive a key from
it that is untangled

00:09:24.586 --> 00:09:26.876 A:middle
with the hardware key
that is only available

00:09:26.956 --> 00:09:28.076 A:middle
to our secure enclave.

00:09:28.956 --> 00:09:33.106 A:middle
Which means it's not possible
to guess passcodes offline.

00:09:33.436 --> 00:09:35.966 A:middle
Passcode guesses must
happen on the device,

00:09:36.396 --> 00:09:39.386 A:middle
and the device is free to
limit the number of attempts.

00:09:40.026 --> 00:09:44.216 A:middle
In fact, this is exactly
how your iOS devices work.

00:09:46.886 --> 00:09:49.166 A:middle
After a few incorrect
passcode attempts,

00:09:49.466 --> 00:09:51.036 A:middle
we start imposing a time delay.

00:09:52.466 --> 00:09:54.506 A:middle
But after 10 incorrect
passcode attempts,

00:09:54.506 --> 00:09:57.826 A:middle
the secure enclave will simply
not unlock that device again.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.026 --> 00:10:02.076 A:middle
This has nothing to do with
the erase data feature,

00:10:02.896 --> 00:10:06.106 A:middle
where if it's on, the data
will actually be erased

00:10:06.106 --> 00:10:07.726 A:middle
after 10 incorrect
passcode attempts.

00:10:08.136 --> 00:10:09.626 A:middle
Even if you have
this feature off,

00:10:11.576 --> 00:10:13.906 A:middle
once 10 incorrect
passcode attempts are made,

00:10:14.296 --> 00:10:16.266 A:middle
the secure enclave
will not unlock

00:10:16.266 --> 00:10:17.976 A:middle
that device again regardless
of how much time you give it.

00:10:20.636 --> 00:10:24.836 A:middle
So we built the system using
industry standard algorithms.

00:10:25.826 --> 00:10:28.426 A:middle
We've subjected it to rigorous
internal security audits,

00:10:29.156 --> 00:10:30.416 A:middle
and third-party code review,

00:10:30.996 --> 00:10:32.736 A:middle
and then we've taken
it a step further.

00:10:32.736 --> 00:10:35.096 A:middle
We have taken our core
cryptographic libraries

00:10:35.096 --> 00:10:38.626 A:middle
that underpin data protection,
and we've posted them on the web

00:10:39.146 --> 00:10:41.126 A:middle
for everyone to download
and inspect.

00:10:42.046 --> 00:10:43.176 A:middle
Let's talk about sandboxing.

00:10:44.326 --> 00:10:48.576 A:middle
Sandboxing is a method for
isolating data between apps.

00:10:49.646 --> 00:10:52.856 A:middle
This is because even with
the best of intentions,

00:10:52.856 --> 00:10:54.546 A:middle
developers sometimes
make mistakes,

00:10:55.226 --> 00:10:58.066 A:middle
and sandboxing is a
way of mitigating some

00:10:58.066 --> 00:11:00.266 A:middle
of the potential harm
from those mistakes.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.066 --> 00:11:00.266 A:middle
of the potential harm
from those mistakes.

00:11:00.306 --> 00:11:03.736 A:middle
It's a little bit like air
bags or seatbelts in a car

00:11:04.016 --> 00:11:06.496 A:middle
which mitigate the risk
of injury in an accident.

00:11:08.436 --> 00:11:11.926 A:middle
We also use sandboxing to
put some of the choices

00:11:11.926 --> 00:11:14.036 A:middle
around security directly
in the hands of our users.

00:11:14.596 --> 00:11:18.006 A:middle
We have a mechanism called
TCC, or transparency consent

00:11:18.006 --> 00:11:22.026 A:middle
and control, where we can ask a
user whether they trust a given

00:11:22.026 --> 00:11:23.746 A:middle
app with some of
their sensitive data,

00:11:23.746 --> 00:11:25.986 A:middle
like location, photos
and contacts.

00:11:26.456 --> 00:11:29.196 A:middle
And once a user makes a
decision in a dialogue by this,

00:11:29.646 --> 00:11:35.616 A:middle
the sandbox mechanism and the
kernel enforces that decision.

00:11:36.046 --> 00:11:37.166 A:middle
Another critical element

00:11:37.656 --> 00:11:39.756 A:middle
of our platform security
is code signing.

00:11:40.396 --> 00:11:44.696 A:middle
When an attacker is
trying to attack a device,

00:11:44.696 --> 00:11:46.636 A:middle
the very first step
is attempting

00:11:46.636 --> 00:11:48.126 A:middle
to get their malicious
code to run.

00:11:50.386 --> 00:11:53.946 A:middle
Because of this, iOS code
signing doesn't just cover the

00:11:53.946 --> 00:11:54.806 A:middle
operating system.

00:11:55.226 --> 00:11:57.386 A:middle
It covers every app
that runs on the device.

00:11:58.286 --> 00:12:01.536 A:middle
In fact, when you go to upload
your app into the App Store,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.286 --> 00:12:01.536 A:middle
In fact, when you go to upload
your app into the App Store,

00:12:02.066 --> 00:12:04.336 A:middle
X code will calculate
the cryptographic hash

00:12:04.726 --> 00:12:08.166 A:middle
of every executable and
resource in your app bundle,

00:12:08.166 --> 00:12:11.276 A:middle
and will write them into a code
directory alongside the app,

00:12:11.816 --> 00:12:13.076 A:middle
which is then sent
to the App Store.

00:12:13.926 --> 00:12:16.866 A:middle
When the user then
downloads an app and runs it,

00:12:16.866 --> 00:12:21.336 A:middle
our kernel will look at every
executable page of memory

00:12:21.666 --> 00:12:23.816 A:middle
and compare it against the
code directory to make sure

00:12:23.816 --> 00:12:24.976 A:middle
that it hasn't been
tampered with.

00:12:26.706 --> 00:12:30.716 A:middle
As a result, an attacker can't
simply take some malicious code,

00:12:31.016 --> 00:12:33.826 A:middle
inject it into memory and then
divert the control flow to it.

00:12:34.256 --> 00:12:36.676 A:middle
Instead, they have to
resort to much more complex

00:12:37.136 --> 00:12:39.846 A:middle
and difficult schemes to get
their malicious code to run.

00:12:45.656 --> 00:12:48.586 A:middle
Let's talk a bit about Touch ID.

00:12:48.996 --> 00:12:50.586 A:middle
We know that for
our iPhone users

00:12:50.586 --> 00:12:53.506 A:middle
on average they unlock
their phone 80 times a day.

00:12:53.506 --> 00:12:59.496 A:middle
And if you have a passcode
set, it adds friction

00:12:59.496 --> 00:13:01.516 A:middle
to each one of those 80 unlocks.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.496 --> 00:13:01.516 A:middle
to each one of those 80 unlocks.

00:13:03.816 --> 00:13:06.766 A:middle
As a result, almost half

00:13:06.766 --> 00:13:09.766 A:middle
of our users didn't
have a passcode set,

00:13:10.536 --> 00:13:14.616 A:middle
and we knew that because the
passcode is quite literally part

00:13:14.616 --> 00:13:17.366 A:middle
of the key used to protect
the user's data at rest,

00:13:17.696 --> 00:13:19.176 A:middle
this is a problem
we had to solve.

00:13:19.886 --> 00:13:26.656 A:middle
We needed a solution that
was easy, that was fast,

00:13:26.656 --> 00:13:28.206 A:middle
and that provided
great protection

00:13:28.656 --> 00:13:29.736 A:middle
to the data of our users.

00:13:29.736 --> 00:13:33.976 A:middle
For us, that solution
was Touch ID.

00:13:35.646 --> 00:13:37.646 A:middle
But we didn't just take
a fingerprint sensor

00:13:37.646 --> 00:13:39.626 A:middle
and put it in a phone.

00:13:41.726 --> 00:13:43.096 A:middle
You can change your passwords,

00:13:43.306 --> 00:13:45.516 A:middle
but you can't change your
biometric properties.

00:13:45.706 --> 00:13:47.086 A:middle
You can't change
your fingerprint.

00:13:47.706 --> 00:13:49.496 A:middle
And so we knew that we had

00:13:49.496 --> 00:13:51.746 A:middle
to afford the biometric
data the highest level

00:13:51.746 --> 00:13:53.306 A:middle
of protection we could build.

00:13:54.446 --> 00:13:58.396 A:middle
So what we did was we connected
the fingerprint sensor directly

00:13:58.396 --> 00:14:00.716 A:middle
to the secure enclave,
with an encrypted link.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.396 --> 00:14:00.716 A:middle
to the secure enclave,
with an encrypted link.

00:14:01.666 --> 00:14:04.966 A:middle
And we made it so that when you
touch your finger to the sensor,

00:14:06.166 --> 00:14:09.396 A:middle
that fingerprint is transmitted
directly to the secure enclave,

00:14:09.976 --> 00:14:12.216 A:middle
where it is processed,
and then encrypted.

00:14:12.806 --> 00:14:16.736 A:middle
And it's never made available
to the application processor

00:14:16.736 --> 00:14:21.456 A:middle
that runs normal
applications on the phone.

00:14:21.696 --> 00:14:24.216 A:middle
Now, I mentioned
that before Touch ID,

00:14:24.216 --> 00:14:29.296 A:middle
about half of our users
had a passcode set.

00:14:29.526 --> 00:14:31.456 A:middle
Now, 9 out of 10 do.

00:14:32.796 --> 00:14:35.836 A:middle
This is a shining example
of what Apple is amazing at.

00:14:36.256 --> 00:14:38.546 A:middle
It takes our hardware
engineering expertise,

00:14:39.106 --> 00:14:41.786 A:middle
our software engineering
expertise, our dedication

00:14:41.786 --> 00:14:45.096 A:middle
to ease of use, and
combines them in a way

00:14:45.096 --> 00:14:48.446 A:middle
where a normal user doesn't
care about fingerprint sensors,

00:14:49.136 --> 00:14:51.436 A:middle
doesn't care about secure
enclaves or hash functions.

00:14:52.846 --> 00:14:55.196 A:middle
What they get is simply
an amazing step forward

00:14:55.196 --> 00:15:01.066 A:middle
for the security of their data.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:55.196 --> 00:15:01.066 A:middle
for the security of their data.

00:15:01.386 --> 00:15:02.526 A:middle
The second key pillar

00:15:02.526 --> 00:15:07.596 A:middle
of iOS security is users
upgrading their software.

00:15:09.556 --> 00:15:13.626 A:middle
The latest versions of iOS
are always the most secure,

00:15:14.326 --> 00:15:17.546 A:middle
and we're constantly
making iOS more secure based

00:15:17.546 --> 00:15:19.866 A:middle
on the threats we see today and
threats we see in the future.

00:15:20.766 --> 00:15:23.306 A:middle
And we've built all
this deep technology

00:15:23.306 --> 00:15:27.086 A:middle
for trusting the software
that runs on our hardware,

00:15:27.866 --> 00:15:32.546 A:middle
but it doesn't matter how
secure a version of iOS is,

00:15:32.596 --> 00:15:34.906 A:middle
if people are not
installing the latest one,

00:15:34.906 --> 00:15:35.936 A:middle
the one that is most secure.

00:15:37.036 --> 00:15:39.726 A:middle
So when we think about
software updates, it is not just

00:15:39.726 --> 00:15:41.506 A:middle
about the device and
the software it runs,

00:15:41.506 --> 00:15:44.466 A:middle
it is also about our
relationship with carriers,

00:15:44.466 --> 00:15:46.466 A:middle
and our ability to get
updates out there quickly,

00:15:47.186 --> 00:15:48.776 A:middle
and also the user experience

00:15:49.086 --> 00:15:52.366 A:middle
for how a user sees an
update on their device.

00:15:52.906 --> 00:15:58.836 A:middle
One thing we've done with iOS 9
is we greatly shrank the amount

00:15:58.836 --> 00:16:02.056 A:middle
of space it took to install
updates, so that users


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.836 --> 00:16:02.056 A:middle
of space it took to install
updates, so that users

00:16:02.056 --> 00:16:05.006 A:middle
who had relatively little free
space could still get the latest

00:16:05.006 --> 00:16:07.436 A:middle
and more secure version
of the software.

00:16:09.316 --> 00:16:11.466 A:middle
We then took a look
at the user experience

00:16:12.456 --> 00:16:15.326 A:middle
and said sometimes users
don't want to be interrupted

00:16:15.766 --> 00:16:17.846 A:middle
to do an update, so
we'll give them a choice

00:16:17.846 --> 00:16:19.436 A:middle
to install an update
right then and there,

00:16:20.046 --> 00:16:21.406 A:middle
or to install it
later that night

00:16:21.446 --> 00:16:23.286 A:middle
when they're probably
not using their phone

00:16:23.476 --> 00:16:26.236 A:middle
or be reminded the next day.

00:16:26.476 --> 00:16:29.146 A:middle
The results are amazing.

00:16:30.236 --> 00:16:34.636 A:middle
Nearly 85% of our customers
are running the latest version

00:16:34.636 --> 00:16:36.666 A:middle
of iOS, the most
secure version we have,

00:16:37.286 --> 00:16:42.416 A:middle
and if you think this is easy
or obvious, you only need look

00:16:42.416 --> 00:16:43.646 A:middle
at some of the other
platforms [audience murmurs].

00:16:45.426 --> 00:16:50.866 A:middle
This, by the way, is a fair
comparison, because Android 6

00:16:50.866 --> 00:16:53.346 A:middle
and iOS 9 were released
within just a couple of weeks

00:16:53.346 --> 00:16:58.526 A:middle
of each other, and for some
perspective, every version

00:16:58.526 --> 00:17:01.906 A:middle
of Android before 5.1.1 has
a vulnerability called stage


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.526 --> 00:17:01.906 A:middle
of Android before 5.1.1 has
a vulnerability called stage

00:17:01.906 --> 00:17:04.326 A:middle
fright, which is
remotely exploitable.

00:17:04.326 --> 00:17:07.036 A:middle
You can exploit it by sending
a specially crafted message

00:17:07.496 --> 00:17:10.046 A:middle
to a vulnerable device,
and gain complete control

00:17:10.046 --> 00:17:10.836 A:middle
over that device.

00:17:11.445 --> 00:17:13.746 A:middle
And Google patched
this bug very quickly.

00:17:15.066 --> 00:17:16.836 A:middle
But it doesn't matter,
because most

00:17:16.836 --> 00:17:19.156 A:middle
of their users don't
have the fix.

00:17:20.066 --> 00:17:22.955 A:middle
And a fix that is not installed
doesn't do anyone any good,

00:17:23.165 --> 00:17:26.236 A:middle
which is why we invest
so much effort not just

00:17:26.306 --> 00:17:30.096 A:middle
in building secure versions of
iOS, but also making it easy

00:17:30.096 --> 00:17:33.096 A:middle
for our users to have that
last and most secure version.

00:17:33.716 --> 00:17:40.586 A:middle
The third pillar in iOS
security is developers like you,

00:17:41.066 --> 00:17:43.076 A:middle
using the security
technologies we provide,

00:17:43.186 --> 00:17:45.036 A:middle
to build secure apps.

00:17:46.036 --> 00:17:50.686 A:middle
This means following best
practices on the platform.

00:17:50.686 --> 00:17:54.456 A:middle
We have an amazing number of
apps that use Touch ID API

00:17:55.556 --> 00:17:59.436 A:middle
to save their users from having
to remember complex passwords

00:17:59.436 --> 00:18:02.826 A:middle
and type them directly into
the app, and last year,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.436 --> 00:18:02.826 A:middle
and type them directly into
the app, and last year,

00:18:02.826 --> 00:18:05.186 A:middle
we introduced a feature
called App Transport Security

00:18:06.026 --> 00:18:10.546 A:middle
that provides strong protection
to app information as it travels

00:18:10.546 --> 00:18:12.986 A:middle
across the network to
that app's servers.

00:18:15.776 --> 00:18:19.016 A:middle
Today I'm proud to say
that at the end of 2016,

00:18:19.016 --> 00:18:21.666 A:middle
App Transport Security
is becoming a requirement

00:18:21.666 --> 00:18:22.656 A:middle
for App Store apps.

00:18:24.146 --> 00:18:28.326 A:middle
This means that by the end of
2016, when your apps communicate

00:18:28.326 --> 00:18:30.746 A:middle
with your own server
back-ends, they must do

00:18:30.746 --> 00:18:35.756 A:middle
so using a secure TLS
channel, using TLS 1.2,

00:18:35.996 --> 00:18:39.446 A:middle
unless the data being
communicated is bulk data

00:18:39.446 --> 00:18:42.266 A:middle
such as media streaming and
data that is already encrypted.

00:18:43.206 --> 00:18:46.266 A:middle
This is going to provide a
great deal of real security

00:18:46.266 --> 00:18:49.396 A:middle
for our users, and
the communications

00:18:49.396 --> 00:18:50.966 A:middle
that your apps have
over the network.

00:18:52.856 --> 00:18:57.116 A:middle
There is another piece of
responsibility that rests

00:18:57.116 --> 00:18:59.236 A:middle
on you, the developers,
when you build your apps,

00:18:59.236 --> 00:19:01.716 A:middle
and this is to know your code,
and not just the code you write,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.236 --> 00:19:01.716 A:middle
and this is to know your code,
and not just the code you write,

00:19:02.166 --> 00:19:04.516 A:middle
but also any third-party
code you actually include

00:19:04.516 --> 00:19:05.816 A:middle
in your apps.

00:19:06.496 --> 00:19:10.586 A:middle
This is the because libraries
you use may undermine the

00:19:10.586 --> 00:19:11.466 A:middle
security of your app.

00:19:12.256 --> 00:19:14.266 A:middle
Maybe because they're doing
things you're not aware

00:19:14.266 --> 00:19:15.146 A:middle
of behind your back.

00:19:16.156 --> 00:19:20.546 A:middle
But maybe because
there is a more recent

00:19:20.546 --> 00:19:22.036 A:middle
and more secure version
out there.

00:19:22.886 --> 00:19:25.606 A:middle
There is kind of an
amazing example here

00:19:25.606 --> 00:19:29.206 A:middle
where there is a very popular
third-party networking library

00:19:29.886 --> 00:19:33.046 A:middle
that had a critical
flaw in the validation

00:19:33.116 --> 00:19:36.616 A:middle
of security for TLS connections.

00:19:37.136 --> 00:19:40.886 A:middle
And this flaw was patched
very quickly, but for a period

00:19:40.886 --> 00:19:44.166 A:middle
of time, there were up to
25,000 apps in the App Store

00:19:44.166 --> 00:19:46.666 A:middle
that didn't have that
latest, more secure version.

00:19:48.146 --> 00:19:51.126 A:middle
So it's really important that
you get your third-party code

00:19:51.126 --> 00:19:54.266 A:middle
from trustworthy locations,
that you know what it does,

00:19:54.606 --> 00:19:55.706 A:middle
and that you keep it current.

00:19:56.366 --> 00:19:59.976 A:middle
So these are our three key
pillars of iOS security.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.686 --> 00:20:03.986 A:middle
Platform security, which are
the best security technology

00:20:03.986 --> 00:20:06.506 A:middle
mechanisms that we can build
into our hardware and software.

00:20:07.186 --> 00:20:10.766 A:middle
Our users who download the
latest and most secure versions

00:20:10.766 --> 00:20:12.126 A:middle
of iOS and developers like you,

00:20:12.126 --> 00:20:15.236 A:middle
using our security technologies
to build secure apps.

00:20:15.836 --> 00:20:20.656 A:middle
And it's a fair question to
ask, so how are we doing?

00:20:21.946 --> 00:20:23.356 A:middle
How good is iOS security?

00:20:24.736 --> 00:20:27.686 A:middle
Security is interesting,
because unlike performance,

00:20:28.116 --> 00:20:29.236 A:middle
you can't measure it directly.

00:20:29.236 --> 00:20:31.246 A:middle
You can't run a test, and
time how long it takes

00:20:31.246 --> 00:20:32.656 A:middle
to get an objective answer.

00:20:33.936 --> 00:20:38.276 A:middle
So what you're left with
are indirect metrics.

00:20:39.396 --> 00:20:42.676 A:middle
And I have three that
I'll share with you today.

00:20:44.856 --> 00:20:50.096 A:middle
The first one is that after
a decade of its existence,

00:20:50.326 --> 00:20:52.816 A:middle
there has still not
been a single piece

00:20:52.816 --> 00:20:54.996 A:middle
of iOS malware affecting
our users at scale.

00:20:56.266 --> 00:20:58.536 A:middle
This one is the one that
is most important to us.

00:20:59.216 --> 00:21:01.876 A:middle
Our users have been
fantastically well protected


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.216 --> 00:21:01.876 A:middle
Our users have been
fantastically well protected

00:21:01.876 --> 00:21:03.016 A:middle
for nearly 10 years.

00:21:06.536 --> 00:21:09.456 A:middle
The next indirect metric that is
interesting is to look at some

00:21:09.456 --> 00:21:11.916 A:middle
of the unfettered jailbreaks
that are coming out.

00:21:12.916 --> 00:21:15.666 A:middle
These are jailbreaks that
defeat iOS security mechanisms,

00:21:16.836 --> 00:21:19.956 A:middle
and what is interesting
about them is

00:21:19.956 --> 00:21:23.086 A:middle
that the latest launch we've
looked at frequently have

00:21:23.116 --> 00:21:25.426 A:middle
to find and chain
together between five

00:21:25.426 --> 00:21:28.386 A:middle
and ten distinct vulnerabilities
in order to be able

00:21:28.386 --> 00:21:30.686 A:middle
to defeat platform
security mechanisms.

00:21:31.906 --> 00:21:33.986 A:middle
This is much higher than
on any other platform.

00:21:34.816 --> 00:21:38.716 A:middle
And the reason is because iOS
security measures work together

00:21:38.716 --> 00:21:41.956 A:middle
in lock step in such a
way that defeating all

00:21:41.956 --> 00:21:48.036 A:middle
of them takes a long
time and a lot of work.

00:21:48.226 --> 00:21:50.216 A:middle
For my last indirect metric,

00:21:50.776 --> 00:21:52.196 A:middle
I want you to take it
with a grain of salt.

00:21:54.016 --> 00:21:57.056 A:middle
As probably most of you
know, there is a black market

00:21:57.556 --> 00:21:58.956 A:middle
for software vulnerabilities.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.256 --> 00:22:02.796 A:middle
And every once in a
while, some of the prices

00:22:03.196 --> 00:22:05.316 A:middle
on the black market
become known.

00:22:06.866 --> 00:22:10.336 A:middle
Usually these prices are
tens of thousands of dollars,

00:22:10.336 --> 00:22:11.586 A:middle
sometimes a hundred thousand.

00:22:11.586 --> 00:22:15.876 A:middle
But in 2013, the New
York Times learned

00:22:15.876 --> 00:22:21.186 A:middle
that an iOS vulnerability sold
for $500,000 and last year,

00:22:22.086 --> 00:22:25.226 A:middle
Forbes interviewed a
jailbreak developer who said

00:22:25.226 --> 00:22:28.366 A:middle
that most experts agree
that the black market price

00:22:28.986 --> 00:22:33.036 A:middle
of an unfettered iOS
jailbreak is a million dollars.

00:22:37.516 --> 00:22:38.906 A:middle
Take that with a grain of salt,

00:22:38.906 --> 00:22:41.286 A:middle
but it's a fascinating
number to think about.

00:22:43.016 --> 00:22:49.946 A:middle
So where does this leave us?

00:22:50.656 --> 00:22:53.586 A:middle
Clearly, security is a
process and not a destination.

00:22:54.326 --> 00:22:57.066 A:middle
We're not done with iOS
security and we never will be.

00:22:58.986 --> 00:23:01.716 A:middle
It's also not something that we
just got interested in recently.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.986 --> 00:23:01.716 A:middle
It's also not something that we
just got interested in recently.

00:23:01.716 --> 00:23:04.906 A:middle
What you're seeing now
is a result of a decade

00:23:04.906 --> 00:23:07.116 A:middle
of our best work in
protecting our users.

00:23:08.436 --> 00:23:11.076 A:middle
But the bad guys
aren't standing still

00:23:11.766 --> 00:23:14.016 A:middle
and we will constantly
evolve our security

00:23:14.706 --> 00:23:16.786 A:middle
to defeat not only
the threats of today,

00:23:16.786 --> 00:23:18.086 A:middle
but also the threats
of tomorrow.

00:23:19.526 --> 00:23:21.786 A:middle
We will take our
hardware expertise

00:23:21.786 --> 00:23:23.026 A:middle
and our software expertise,

00:23:23.156 --> 00:23:25.426 A:middle
and we will build the
best security technologies

00:23:25.426 --> 00:23:29.136 A:middle
that we can imagine to
protect our customers

00:23:29.136 --> 00:23:31.116 A:middle
and how they use their
mobile devices today

00:23:31.246 --> 00:23:32.856 A:middle
and also how they'll
use them tomorrow,

00:23:34.176 --> 00:23:36.826 A:middle
and protect our customers
against today's attackers

00:23:37.956 --> 00:23:42.016 A:middle
and tomorrow's, even if
they are cats [laughter].

00:23:44.416 --> 00:23:45.426 A:middle
Thank you very much.

00:23:46.516 --> 00:23:54.556 A:middle
[ Applause ]

00:23:55.056 --> 00:23:56.836 A:middle
&gt;&gt; For those of you who want
to learn more, I invite you

00:23:56.836 --> 00:24:00.716 A:middle
to read the iOS security guide,
which creates a great amount


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:56.836 --> 00:24:00.716 A:middle
to read the iOS security guide,
which creates a great amount

00:24:00.716 --> 00:24:03.216 A:middle
of technical detail about
all the great features I just

00:24:03.216 --> 00:24:05.836 A:middle
covered, including many others
that I didn't have time for,

00:24:05.836 --> 00:24:08.516 A:middle
like iCloud keychain and
two-factor authentication,

00:24:08.886 --> 00:24:11.706 A:middle
and a link will be available
at this session site.

00:24:12.516 --> 00:24:12.996 A:middle
Thank you again.

00:24:14.508 --> 00:24:16.508 A:middle
[ Applause ]

