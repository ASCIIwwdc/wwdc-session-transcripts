WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:21.546 A:middle
[ Music ]

00:00:22.046 --> 00:00:23.976 A:middle
&gt;&gt; Good morning everyone,
welcome.

00:00:24.516 --> 00:00:27.746 A:middle
[ Applause ]

00:00:28.246 --> 00:00:31.146 A:middle
Thank you for attending this
session, my name is Sara Raid,

00:00:31.216 --> 00:00:33.366 A:middle
I'm an internationalization
software engineer,

00:00:33.716 --> 00:00:36.306 A:middle
and today with my
colleague, Joaquim Lobo Silva,

00:00:36.386 --> 00:00:38.976 A:middle
we're going to talk about
international user interfaces.

00:00:39.336 --> 00:00:40.166 A:middle
So let's get started.

00:00:40.836 --> 00:00:46.796 A:middle
At Apple we support over 40
localizations in our software

00:00:47.126 --> 00:00:50.346 A:middle
and every language has its
own challenges, but today,

00:00:50.346 --> 00:00:53.626 A:middle
in particular, we are going to
talk about two specific right

00:00:53.626 --> 00:00:55.176 A:middle
to left languages
that we support

00:00:55.606 --> 00:00:57.716 A:middle
which are Arabic and Hebrew.

00:00:58.476 --> 00:01:01.096 A:middle
So this language has
presented a unique challenge


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.476 --> 00:01:01.096 A:middle
So this language has
presented a unique challenge

00:01:01.706 --> 00:01:05.666 A:middle
in building your apps and
that's because of the nature

00:01:05.666 --> 00:01:06.886 A:middle
of the writing direction.

00:01:07.496 --> 00:01:10.096 A:middle
So why are we talking about
these languages specifically?

00:01:10.606 --> 00:01:15.006 A:middle
With over 400 million
people in the Middle East,

00:01:15.376 --> 00:01:16.896 A:middle
this really is a growing market.

00:01:17.556 --> 00:01:20.456 A:middle
So just last year, we
opened two Apple Stores

00:01:20.456 --> 00:01:24.116 A:middle
in the UAE these are images
from the opening in Abu Dhabi,

00:01:25.266 --> 00:01:31.986 A:middle
Dubai and just few weeks ago,
we launched Apple.com in the UAE

00:01:32.176 --> 00:01:33.656 A:middle
in Arabic for the first time.

00:01:33.936 --> 00:01:37.686 A:middle
This is really, really exciting,
but what does it mean to you?

00:01:38.446 --> 00:01:43.146 A:middle
As a developer, you have growth
opportunities in this market

00:01:43.666 --> 00:01:45.226 A:middle
and designing word ready apps

00:01:45.226 --> 00:01:47.636 A:middle
for your customers
is really important.

00:01:48.386 --> 00:01:50.896 A:middle
So in this session we're mainly
going to talk about right

00:01:50.896 --> 00:01:54.526 A:middle
to left languages, but if you
are interested in learning more

00:01:54.526 --> 00:01:57.246 A:middle
about designing word ready
apps, check out these two talks:

00:01:57.516 --> 00:01:59.856 A:middle
Inclusive App Design,
which focuses more

00:01:59.856 --> 00:02:02.206 A:middle
on the human interface
aspect of it


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.856 --> 00:02:02.206 A:middle
on the human interface
aspect of it

00:02:02.556 --> 00:02:05.306 A:middle
and Internationalization Best
Practices if you'd like to learn

00:02:05.306 --> 00:02:06.616 A:middle
about internationalization.

00:02:08.036 --> 00:02:13.476 A:middle
Last year, on iOS 9 we extended
internationalization support

00:02:13.476 --> 00:02:16.076 A:middle
to fully support languages
written from right to left.

00:02:16.456 --> 00:02:20.066 A:middle
And just after that, we
included native Hebrew

00:02:20.066 --> 00:02:23.466 A:middle
and Arabic localizations
into watchOS 2.1.

00:02:24.446 --> 00:02:27.846 A:middle
This year I'm happy to say
that we have been working

00:02:27.846 --> 00:02:30.396 A:middle
on redesigning macOS
for this market.

00:02:31.406 --> 00:02:33.856 A:middle
So now, I would like to
walk you through some,

00:02:34.796 --> 00:02:37.416 A:middle
the agenda to see what we
going to cover in this session.

00:02:38.466 --> 00:02:41.916 A:middle
So first, Joaquim is going
to start with a quick recap

00:02:41.916 --> 00:02:45.756 A:middle
of the APIs we introduced last
year, then he's going to talk

00:02:45.756 --> 00:02:48.856 A:middle
about what's new in iOS
X with image handling,

00:02:48.856 --> 00:02:52.816 A:middle
and how you can evaluate
layout direction.

00:02:54.176 --> 00:02:58.056 A:middle
He will finish up with
watchOS support, then,

00:02:58.386 --> 00:03:02.916 A:middle
I am going to talk about what's
new in macOS, and what's new


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.386 --> 00:03:02.916 A:middle
I am going to talk about what's
new in macOS, and what's new

00:03:02.916 --> 00:03:06.636 A:middle
in text support and how can you
handle displaying mixed text

00:03:06.636 --> 00:03:08.206 A:middle
correctly in your applications.

00:03:08.656 --> 00:03:11.206 A:middle
And with that, I'm going
to hand it over to Joaquim,

00:03:11.346 --> 00:03:13.776 A:middle
to talk about iOS, Joaquim.

00:03:14.516 --> 00:03:17.546 A:middle
[ Applause ]

00:03:18.046 --> 00:03:20.046 A:middle
&gt;&gt; Alright, thank you
Sara, good morning.

00:03:20.136 --> 00:03:21.076 A:middle
Thank you all for coming.

00:03:21.756 --> 00:03:24.646 A:middle
So, my name is Joaquim,
and I'll get things started

00:03:24.736 --> 00:03:27.216 A:middle
by talking about iOS.

00:03:27.396 --> 00:03:32.916 A:middle
So as Sara mentioned, last year
at WWDC we announced full right

00:03:32.916 --> 00:03:36.706 A:middle
to left UISupport on iOS 9
across the entire platform.

00:03:36.916 --> 00:03:40.096 A:middle
When your users run their apps

00:03:40.096 --> 00:03:43.116 A:middle
in these languages they
expect your UI to adapt

00:03:43.326 --> 00:03:44.786 A:middle
to the nature of
these languages.

00:03:45.276 --> 00:03:49.526 A:middle
UIKit does a lot of the work
for you, all of its controls

00:03:49.526 --> 00:03:51.606 A:middle
and views do the correct
thing when running

00:03:51.606 --> 00:03:52.966 A:middle
in a right to left context.

00:03:54.516 --> 00:03:57.296 A:middle
Managing the layout between
these views can be done using

00:03:57.296 --> 00:03:57.876 A:middle
auto layout.

00:03:57.946 --> 00:04:00.146 A:middle
And this can either
mean high level elements


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.946 --> 00:04:00.146 A:middle
And this can either
mean high level elements

00:04:00.146 --> 00:04:03.596 A:middle
such as UIStack view new in iOS
9, also announced last year,

00:04:04.636 --> 00:04:08.526 A:middle
which lets you easily model
and maintain your UI in terms

00:04:09.306 --> 00:04:10.806 A:middle
of easy to use horizontal

00:04:10.806 --> 00:04:12.386 A:middle
and vertical groups
that can be nested.

00:04:12.846 --> 00:04:15.096 A:middle
And the nice thing
about stack view is

00:04:15.096 --> 00:04:17.766 A:middle
that it manages auto
layout constraints for you.

00:04:18.666 --> 00:04:20.755 A:middle
And in particular, for right

00:04:20.755 --> 00:04:23.336 A:middle
to left languages it manages
leading and trailing constraints

00:04:23.336 --> 00:04:25.846 A:middle
and what these are, are
left and right properties

00:04:26.226 --> 00:04:29.676 A:middle
that change automatically to
right and left when running

00:04:29.676 --> 00:04:30.906 A:middle
in a right to left context.

00:04:33.246 --> 00:04:36.906 A:middle
Having said that, it's
important to note that just

00:04:36.906 --> 00:04:39.256 A:middle
because these languages are
written and read from right

00:04:39.256 --> 00:04:42.216 A:middle
to left, this doesn't mean
that every single control

00:04:42.216 --> 00:04:45.466 A:middle
in an aspect of your app should
strictly follow the writing

00:04:45.466 --> 00:04:46.746 A:middle
direction of these languages.

00:04:47.306 --> 00:04:50.706 A:middle
There are nuances and some
exceptions even to keep in mind

00:04:50.706 --> 00:04:52.606 A:middle
when designing for
these languages.

00:04:52.956 --> 00:04:56.506 A:middle
So one example up above is
playback UI, anything related

00:04:56.506 --> 00:05:01.006 A:middle
to playback such as rewind and
fast forward, video and audio,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:56.506 --> 00:05:01.006 A:middle
to playback such as rewind and
fast forward, video and audio,

00:05:01.006 --> 00:05:03.156 A:middle
timeline scrubbers, these
should all stay the same

00:05:03.156 --> 00:05:06.916 A:middle
across layout direction.

00:05:07.096 --> 00:05:09.596 A:middle
Another example is
something we call spatial UI,

00:05:09.746 --> 00:05:12.036 A:middle
this can either refer
to clusters of controls

00:05:12.036 --> 00:05:14.946 A:middle
that don't have a specific
directionality associated

00:05:14.946 --> 00:05:17.776 A:middle
to them, things like left
and right text alignment

00:05:17.776 --> 00:05:19.176 A:middle
which should obviously stay

00:05:19.176 --> 00:05:21.686 A:middle
in the same position
across all languages.

00:05:22.056 --> 00:05:24.246 A:middle
And also the example above
which is the compass,

00:05:24.276 --> 00:05:26.396 A:middle
so things that have a physical

00:05:26.396 --> 00:05:29.396 A:middle
or geographical correspondence
should also stay the same,

00:05:29.396 --> 00:05:32.276 A:middle
north, east and west don't
change in right to left.

00:05:32.916 --> 00:05:37.436 A:middle
On iOS we have semantic content
attribute that helps you manage

00:05:37.766 --> 00:05:40.966 A:middle
and in turn, determine and
fine-tune the layout flow

00:05:40.966 --> 00:05:42.936 A:middle
of individual views
and their sub views.

00:05:43.746 --> 00:05:46.756 A:middle
This exposes an enum it's
a property on UIView,

00:05:46.756 --> 00:05:49.506 A:middle
like I said before, and
it's got all the cases

00:05:49.506 --> 00:05:51.396 A:middle
that I just mentioned,
so one for playback,

00:05:51.886 --> 00:05:55.796 A:middle
one for spatial UI, we have
self-explanatory force direction

00:05:55.796 --> 00:05:58.576 A:middle
cases as well, in
addition to unspecified

00:05:58.576 --> 00:05:59.836 A:middle
which is the default value.

00:05:59.916 --> 00:06:02.816 A:middle
And this is probably where most
of your views will fall into.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.916 --> 00:06:02.816 A:middle
And this is probably where most
of your views will fall into.

00:06:03.416 --> 00:06:08.996 A:middle
So, if you want to look
at these in more detail

00:06:08.996 --> 00:06:11.916 A:middle
and if you're also new to right
to left UI design in general,

00:06:11.916 --> 00:06:14.576 A:middle
I highly recommend you check
out this talk from last year,

00:06:14.656 --> 00:06:16.906 A:middle
New UIKit Ssupport
for International UI.

00:06:17.216 --> 00:06:19.546 A:middle
It goes into all of these
concepts into great detail

00:06:19.546 --> 00:06:22.866 A:middle
and also talks about some of
the new API, or not new anymore,

00:06:22.866 --> 00:06:26.736 A:middle
some of the API we added in
iOS 9 for right to left UI.

00:06:27.416 --> 00:06:30.106 A:middle
So that's a recap of what
we have right now in iOS

00:06:30.106 --> 00:06:33.796 A:middle
for layout, and with that I'd
like to move on over to images.

00:06:34.916 --> 00:06:38.166 A:middle
So images for right to left are
interesting because they tend

00:06:38.166 --> 00:06:40.046 A:middle
to fall into one of
three categories.

00:06:41.876 --> 00:06:45.986 A:middle
The first one is universal
images, so these are probably

00:06:45.986 --> 00:06:49.026 A:middle
where most of your images will
fall into, they're just artwork

00:06:49.026 --> 00:06:52.216 A:middle
or icons, and they don't need
any special consideration

00:06:52.216 --> 00:06:54.476 A:middle
for any language or
writing direction.

00:06:54.476 --> 00:06:58.266 A:middle
So they just stay the same, this
is of course familiar to you

00:06:58.726 --> 00:07:01.756 A:middle
as regular UIImage or
setting a name on a image view


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.726 --> 00:07:01.756 A:middle
as regular UIImage or
setting a name on a image view

00:07:01.756 --> 00:07:02.446 A:middle
and Interface Builder.

00:07:04.496 --> 00:07:06.706 A:middle
The second category is images

00:07:06.706 --> 00:07:09.216 A:middle
that do have the direction
associated to them.

00:07:09.496 --> 00:07:12.576 A:middle
So whether this is
a representation

00:07:12.576 --> 00:07:16.346 A:middle
of navigation arrows such as the
Back button in navigation bars,

00:07:16.676 --> 00:07:19.736 A:middle
or the detail disclosure
or disclosure indicator

00:07:19.736 --> 00:07:22.446 A:middle
on UITableView cells,
or in this case,

00:07:22.446 --> 00:07:24.476 A:middle
a simplified representation
of text,

00:07:24.946 --> 00:07:26.816 A:middle
these should be mirrored
in right to left.

00:07:26.816 --> 00:07:29.556 A:middle
And simply flipping the image
will produce the correct result

00:07:29.916 --> 00:07:32.236 A:middle
for right to left, so in this
case I just flip the image,

00:07:32.236 --> 00:07:34.386 A:middle
and now bullets are
in the correct place.

00:07:35.056 --> 00:07:39.216 A:middle
On iOS you can do this
using imageFlippedForRightTo

00:07:39.216 --> 00:07:42.656 A:middle
LeftLlayoutDirection, we
call this method on a UIImage

00:07:42.826 --> 00:07:45.126 A:middle
and the object returned
by it, when displayed

00:07:45.126 --> 00:07:48.106 A:middle
in the UIImage view, does the
correct thing automatically

00:07:48.376 --> 00:07:50.406 A:middle
if it's running in a
right to left context.

00:07:52.956 --> 00:07:56.466 A:middle
Lastly, the third
category is images

00:07:56.466 --> 00:07:59.696 A:middle
that do have the direction
associated to them but,

00:07:59.916 --> 00:08:01.746 A:middle
they are relatively complex


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.916 --> 00:08:01.746 A:middle
they are relatively complex

00:08:01.776 --> 00:08:04.686 A:middle
such that simply flipping
them would actually produce an

00:08:04.756 --> 00:08:06.946 A:middle
incorrect result
for right to left.

00:08:07.316 --> 00:08:09.336 A:middle
So in this case I have
that same bulleted list,

00:08:09.896 --> 00:08:11.676 A:middle
but instead of bullets
I have checkmarks

00:08:11.676 --> 00:08:14.046 A:middle
and when I flip the image
the checkmarks are now

00:08:14.046 --> 00:08:16.796 A:middle
in the correct place,
but they're also flipped

00:08:16.976 --> 00:08:18.336 A:middle
and they should actually
stay the same

00:08:18.336 --> 00:08:19.666 A:middle
in this example for
right to left.

00:08:20.476 --> 00:08:23.956 A:middle
So really what I need here is
two separate images entirely,

00:08:23.956 --> 00:08:25.496 A:middle
one for each layout direction.

00:08:25.496 --> 00:08:28.576 A:middle
So I can fine-tune my
image for right to left

00:08:28.676 --> 00:08:30.146 A:middle
and now it's displaying
correctly,

00:08:31.026 --> 00:08:32.405 A:middle
but now I have two
different images.

00:08:32.566 --> 00:08:35.466 A:middle
And up until now the way
you would do this on iOS

00:08:35.466 --> 00:08:36.676 A:middle
to display the correct one

00:08:36.676 --> 00:08:38.856 A:middle
at runtime is really
with a runtime check.

00:08:39.275 --> 00:08:42.186 A:middle
You would use our semantic
content attribute API to check

00:08:42.186 --> 00:08:44.896 A:middle
for your layout direction and
then load the correct image

00:08:44.896 --> 00:08:49.146 A:middle
from your bundle at runtime.

00:08:49.146 --> 00:08:51.546 A:middle
On iOS X we're changing
things up a little bit,

00:08:51.546 --> 00:08:54.946 A:middle
and we're starting with the
deprecation of image flip

00:08:54.946 --> 00:08:56.376 A:middle
for right to left
layout direction.

00:08:57.206 --> 00:08:59.606 A:middle
And with it we're
introducing a new concept

00:08:59.676 --> 00:09:01.346 A:middle
that will let you do all three


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.676 --> 00:09:01.346 A:middle
that will let you do all three

00:09:01.346 --> 00:09:04.696 A:middle
of these things using
just regular UIImages

00:09:04.846 --> 00:09:06.426 A:middle
or image names in
Interface Builder.

00:09:07.156 --> 00:09:10.156 A:middle
Introducing, brand new,
directional image assets

00:09:10.366 --> 00:09:12.496 A:middle
in Xcode 8 for your
asset catalogs.

00:09:12.986 --> 00:09:14.816 A:middle
Thank you.

00:09:15.516 --> 00:09:17.546 A:middle
[ Applause ]

00:09:18.046 --> 00:09:19.486 A:middle
So, what does this mean?

00:09:20.076 --> 00:09:24.006 A:middle
So your image assets, in Xcode,
you will now have a new concept

00:09:24.006 --> 00:09:26.986 A:middle
and a new property that you
can set, it's called direction

00:09:27.596 --> 00:09:30.186 A:middle
and the values that you
can set echo the concepts

00:09:30.226 --> 00:09:31.666 A:middle
that I mentioned in
the previous slide.

00:09:31.666 --> 00:09:34.506 A:middle
So an image can either
have a fixed direction,

00:09:35.076 --> 00:09:38.506 A:middle
you can specify also
that an image is designed

00:09:38.506 --> 00:09:40.896 A:middle
for one layout direction
and that it should mirror

00:09:40.896 --> 00:09:43.046 A:middle
for the other, either from
left to right to right

00:09:43.046 --> 00:09:44.246 A:middle
to left or vice versa.

00:09:44.246 --> 00:09:49.266 A:middle
Or you can simply specify
two different images right

00:09:49.266 --> 00:09:51.636 A:middle
in your asset catalogs,
one for each direction.

00:09:52.246 --> 00:09:56.426 A:middle
Now these are image assets and
you might already be familiar

00:09:56.426 --> 00:09:59.706 A:middle
with the technology for other
kinds of image specialization

00:09:59.706 --> 00:10:02.966 A:middle
such as different
pixel densities or for


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.706 --> 00:10:02.966 A:middle
such as different
pixel densities or for

00:10:02.966 --> 00:10:04.356 A:middle
across different platforms.

00:10:04.896 --> 00:10:07.736 A:middle
So really this is the same
concept and all you have

00:10:07.766 --> 00:10:10.476 A:middle
to do is either set an
image in Interface Builder

00:10:10.826 --> 00:10:15.816 A:middle
or load it using
UIImage, image named.

00:10:16.046 --> 00:10:19.826 A:middle
And with that, I'd love
to show you a demo.

00:10:20.226 --> 00:10:26.026 A:middle
Alright so, so I have
here a very simple app

00:10:26.656 --> 00:10:30.166 A:middle
and let me just run it once
to show you how it looks like.

00:10:31.086 --> 00:10:35.816 A:middle
It's called Flags and in
true international fashion,

00:10:35.816 --> 00:10:38.736 A:middle
of course it's a
flag quiz game, yay.

00:10:39.256 --> 00:10:42.576 A:middle
So, this is pretty
straightforward,

00:10:42.576 --> 00:10:44.396 A:middle
it's a lot of fun in groups,

00:10:44.476 --> 00:10:47.856 A:middle
and what you can see
here is very simple UI.

00:10:47.856 --> 00:10:50.186 A:middle
So I've got here the
flag that I should guess

00:10:50.186 --> 00:10:52.286 A:middle
and I have a Reveal
button down at the top,

00:10:52.286 --> 00:10:54.586 A:middle
does anybody know what
this one is by any chance?

00:10:55.016 --> 00:10:57.736 A:middle
I know it's Friday,
early, 9 a.m. yeah?

00:10:58.016 --> 00:10:58.966 A:middle
Yeah, alright, I heard,

00:10:59.306 --> 00:11:00.876 A:middle
I'm hearing France a
lot, that's good, cool.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.306 --> 00:11:00.876 A:middle
I'm hearing France a
lot, that's good, cool.

00:11:01.136 --> 00:11:03.166 A:middle
Okay, so thank you.

00:11:03.396 --> 00:11:07.796 A:middle
We also have two arrows,
so one to go forward

00:11:08.226 --> 00:11:10.176 A:middle
for the next question
and one to go back.

00:11:10.566 --> 00:11:14.176 A:middle
And this is all done using
auto layout constraints

00:11:14.176 --> 00:11:16.006 A:middle
and this is a vertical
stack view as well.

00:11:16.336 --> 00:11:18.136 A:middle
Anybody know what this one is?

00:11:18.646 --> 00:11:22.046 A:middle
Oh, wow, okay, awesome,
listen to that, okay.

00:11:22.746 --> 00:11:25.416 A:middle
Sweet, yeah, that's my
home country, Portugal, so,

00:11:25.526 --> 00:11:26.596 A:middle
you get the idea, right?

00:11:27.486 --> 00:11:31.436 A:middle
So, I'm thinking of adding right
to left support to this app.

00:11:32.166 --> 00:11:35.576 A:middle
Now I don't speak a word of
any language that happens

00:11:35.576 --> 00:11:38.206 A:middle
to be written and read in
right to left, but if I want

00:11:38.206 --> 00:11:40.826 A:middle
to see how my app would
look like, I don't have to.

00:11:41.606 --> 00:11:43.476 A:middle
Xcode allows me to
simulate a right

00:11:43.476 --> 00:11:45.696 A:middle
to left environment
right from itself.

00:11:45.696 --> 00:11:50.926 A:middle
So all I have to do is go to
edit my scheme, so up here

00:11:50.926 --> 00:11:53.016 A:middle
and edit the scheme
right at the top.

00:11:54.036 --> 00:11:57.076 A:middle
So this drops down
and with run selected,

00:11:57.386 --> 00:11:59.016 A:middle
I have Options tab
here at the top.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.066 --> 00:12:03.636 A:middle
And over here I have an
application language override.

00:12:04.526 --> 00:12:06.996 A:middle
So this lists my
supported localizations

00:12:06.996 --> 00:12:08.236 A:middle
which are just English
at the moment

00:12:08.236 --> 00:12:10.926 A:middle
but I could also pick a right
to left pseudo language.

00:12:11.346 --> 00:12:13.566 A:middle
What this is going to do
is it's going to run my app

00:12:13.876 --> 00:12:17.416 A:middle
in my development language which
is English, but it's also going

00:12:17.416 --> 00:12:19.246 A:middle
to make the UI think
that it's running

00:12:19.246 --> 00:12:20.816 A:middle
in a right to left environment.

00:12:21.336 --> 00:12:26.846 A:middle
So I can just do that,
close, and rerun the app.

00:12:31.476 --> 00:12:33.226 A:middle
Yep. So let me start
the game again.

00:12:33.466 --> 00:12:35.526 A:middle
So already we're seeing
a few things right,

00:12:35.526 --> 00:12:37.476 A:middle
the navigation bar is
doing the correct thing,

00:12:37.476 --> 00:12:40.016 A:middle
it's showing the Back
button in the right place.

00:12:41.266 --> 00:12:43.566 A:middle
And my UI largely
looks the same,

00:12:43.806 --> 00:12:45.406 A:middle
except you might
have already noticed

00:12:45.406 --> 00:12:46.956 A:middle
that the arrows are now pointing

00:12:46.956 --> 00:12:49.056 A:middle
at each other which,
looks kind of wrong.

00:12:49.656 --> 00:12:52.456 A:middle
They're actually in the
correct place, so forward is now

00:12:52.456 --> 00:12:54.386 A:middle
on the left, which is
correct for right to left.

00:12:54.836 --> 00:12:57.296 A:middle
But the images themselves
have not adapted,

00:12:57.536 --> 00:12:59.286 A:middle
so I need to do that.

00:12:59.916 --> 00:13:02.876 A:middle
Now all I have to do in Xcode
8 is go to my image assets,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.916 --> 00:13:02.876 A:middle
Now all I have to do in Xcode
8 is go to my image assets,

00:13:02.966 --> 00:13:04.896 A:middle
so I'm going to go ahead
and select them here.

00:13:06.796 --> 00:13:09.526 A:middle
And you'll notice that I
have two different images,

00:13:09.526 --> 00:13:11.756 A:middle
one for the back arrow,
and one for the forward.

00:13:12.096 --> 00:13:14.986 A:middle
And I'm going to go
here in the inspector

00:13:14.986 --> 00:13:17.906 A:middle
and select this new
direction property and instead

00:13:17.906 --> 00:13:21.116 A:middle
of it being a fixed image,
it's a left to right image

00:13:21.336 --> 00:13:23.756 A:middle
that mirrors for the
opposite layout direction.

00:13:24.496 --> 00:13:29.656 A:middle
I'm going to go do the same
for the forward arrow, whoops,

00:13:29.656 --> 00:13:30.696 A:middle
just so you can see that,

00:13:30.796 --> 00:13:33.466 A:middle
left to right mirrors
instead of it being fixed.

00:13:33.636 --> 00:13:35.766 A:middle
And now let me just
run my app again,

00:13:38.456 --> 00:13:41.146 A:middle
and see how it looks like.

00:13:47.146 --> 00:13:48.376 A:middle
Cool, let's start the game.

00:13:49.006 --> 00:13:51.066 A:middle
Alright, that's all I had to do

00:13:51.576 --> 00:13:54.526 A:middle
to now completely
support right to left.

00:13:54.526 --> 00:13:56.776 A:middle
This is without an
extra single line

00:13:56.776 --> 00:13:59.036 A:middle
of code dedicated
to right to left UI.

00:13:59.036 --> 00:14:03.016 A:middle
Auto layout, stack views and
now image assets do the heavy


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.036 --> 00:14:03.016 A:middle
Auto layout, stack views and
now image assets do the heavy

00:14:03.016 --> 00:14:04.666 A:middle
lifting for you at runtime.

00:14:04.976 --> 00:14:07.776 A:middle
And by the way, I forgot to
mention this is also backed

00:14:07.776 --> 00:14:12.376 A:middle
by a page controller that
also, manages the gestures

00:14:12.376 --> 00:14:14.496 A:middle
for going forward and
backwards, so I don't even have

00:14:14.496 --> 00:14:15.416 A:middle
to worry about that either.

00:14:16.256 --> 00:14:22.056 A:middle
So that's the demo on image
assets, let's go back to slides.

00:14:24.156 --> 00:14:26.816 A:middle
Cool. So that's a brief
look at image assets

00:14:26.816 --> 00:14:28.076 A:middle
in the new direction support.

00:14:29.296 --> 00:14:32.346 A:middle
Now you can also do all of this

00:14:32.526 --> 00:14:35.296 A:middle
if your images are not
directly stored in your bundle

00:14:35.296 --> 00:14:36.966 A:middle
and say you're fetching
remote content

00:14:37.026 --> 00:14:39.306 A:middle
that you know has a
particular directionality

00:14:39.396 --> 00:14:41.336 A:middle
and you want display on your UI.

00:14:42.326 --> 00:14:43.956 A:middle
So this is for images
not stored locally,

00:14:43.956 --> 00:14:46.476 A:middle
you can associate these
images using trait collections

00:14:46.476 --> 00:14:47.096 A:middle
in UIKit.

00:14:48.976 --> 00:14:51.456 A:middle
We also have the
convenience method on UIImage

00:14:51.456 --> 00:14:54.336 A:middle
that lets you specify that
one image is a counterpart

00:14:54.336 --> 00:14:56.286 A:middle
of another and that
it should be mirrored

00:14:56.736 --> 00:14:59.066 A:middle
for adding to an image asset.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.076 --> 00:15:02.666 A:middle
It's called imageWith
HorizontallyFlippedOrientation

00:15:03.046 --> 00:15:06.566 A:middle
and it's probably simpler if
I just show it to you in code.

00:15:07.396 --> 00:15:10.596 A:middle
So here it is and all I have
to do is create an image asset,

00:15:11.616 --> 00:15:14.216 A:middle
in this particular example I'm
getting a left to right image

00:15:14.216 --> 00:15:15.746 A:middle
from the remote source,
like a server.

00:15:17.046 --> 00:15:19.416 A:middle
And my right to left image
is just that same object

00:15:19.716 --> 00:15:22.166 A:middle
but horizontally flipped and
I'm using this new method

00:15:22.466 --> 00:15:23.276 A:middle
on UIImage.

00:15:24.816 --> 00:15:27.126 A:middle
Then just register each image,

00:15:27.246 --> 00:15:30.006 A:middle
one for each layout direction
using a trait collection

00:15:30.496 --> 00:15:32.236 A:middle
for left to right
and right to left.

00:15:32.626 --> 00:15:38.626 A:middle
And then really you might
already be using or writing code

00:15:38.626 --> 00:15:41.866 A:middle
that is similar to this, you
just get the image compatible

00:15:41.866 --> 00:15:44.756 A:middle
with a trait collection
for say an image view.

00:15:44.756 --> 00:15:46.226 A:middle
And this probably doesn't
even have to change

00:15:46.226 --> 00:15:49.466 A:middle
because once again, it's the
same concept we just have a new

00:15:49.466 --> 00:15:51.356 A:middle
directionality property
on top of it.

00:15:51.816 --> 00:15:57.896 A:middle
So that's directional
images, new in Xcode 8, iOS X,

00:15:57.896 --> 00:16:00.306 A:middle
and also watchOS and macOS.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.896 --> 00:16:00.306 A:middle
and also watchOS and macOS.

00:16:01.636 --> 00:16:04.576 A:middle
We have a new trait which
is, layout direction

00:16:04.576 --> 00:16:08.706 A:middle
as you saw before, this is a
new UITrait collection in UIKit

00:16:08.706 --> 00:16:11.256 A:middle
and because this is a new trait,
there are some things to keep

00:16:11.256 --> 00:16:14.396 A:middle
in mind when it comes to
evaluating layout direction

00:16:14.396 --> 00:16:16.326 A:middle
on iOS with this new concept.

00:16:17.136 --> 00:16:19.696 A:middle
So let's say just as a very
simple example I have a UIView

00:16:19.696 --> 00:16:22.496 A:middle
subclass and I'm doing
some very custom layout

00:16:22.496 --> 00:16:24.676 A:middle
on layout sub views,
and it's represented

00:16:24.676 --> 00:16:26.096 A:middle
by this very simple blue box.

00:16:27.996 --> 00:16:30.956 A:middle
This is informed by semantic
content attribute whether it

00:16:30.956 --> 00:16:32.416 A:middle
should be left to
right or right to left,

00:16:32.896 --> 00:16:34.846 A:middle
and you can use our
API for this.

00:16:35.486 --> 00:16:37.316 A:middle
Now if this is unspecified,

00:16:37.716 --> 00:16:40.686 A:middle
semantic content attribute can
defer to your app environment

00:16:40.686 --> 00:16:43.086 A:middle
and this can either be
part of a trait environment

00:16:43.546 --> 00:16:44.866 A:middle
which has a trait collection,

00:16:45.206 --> 00:16:48.376 A:middle
or the app's general user
interface layout direction.

00:16:49.936 --> 00:16:54.066 A:middle
Now really, your UIView should
probably really only care

00:16:54.066 --> 00:16:56.366 A:middle
about whether or not it should
be left to right or right

00:16:56.366 --> 00:16:57.646 A:middle
to left, that's it, right.

00:16:57.646 --> 00:16:59.636 A:middle
And this can get pretty
complicated real fast.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.546 --> 00:17:03.746 A:middle
So I'm happy to say that
on iOS X, you can do just

00:17:03.746 --> 00:17:07.076 A:middle
that by using this new
property on UIView,

00:17:07.076 --> 00:17:09.326 A:middle
it's a computed property
called effectiveUserInterface

00:17:09.326 --> 00:17:12.526 A:middle
LayoutDirection and it takes all
of these concepts into account

00:17:12.846 --> 00:17:14.836 A:middle
and tells you immediately
whether you should be laying

00:17:14.836 --> 00:17:17.175 A:middle
yourself out in left to
right or right to left.

00:17:17.816 --> 00:17:22.876 A:middle
If you're not using UIKit or
UIView In particular at all

00:17:22.876 --> 00:17:25.886 A:middle
for your drawing, say you have
a game using a SceneKit view

00:17:25.886 --> 00:17:28.276 A:middle
or a SpriteKit view, but
you still want to make use

00:17:28.276 --> 00:17:29.716 A:middle
of these view controller
concepts.

00:17:29.986 --> 00:17:32.416 A:middle
You can with this new
class method on UIView

00:17:32.856 --> 00:17:36.916 A:middle
that gives you the same, that
same layout evaluation relative

00:17:36.916 --> 00:17:38.336 A:middle
to a semantic content attribute.

00:17:38.786 --> 00:17:43.426 A:middle
And that's a brief look
at what's new in iOS,

00:17:43.646 --> 00:17:47.046 A:middle
so we saw brand new directional
image assets ready for use

00:17:47.046 --> 00:17:49.006 A:middle
with Interface Builder
and regular UI images

00:17:49.286 --> 00:17:50.806 A:middle
with no extra lines
of code needed

00:17:51.056 --> 00:17:52.116 A:middle
for right to left support.

00:17:53.336 --> 00:17:55.066 A:middle
You can do the same
thing with images

00:17:55.066 --> 00:17:56.756 A:middle
that are not directly
stored in your bundle,

00:17:57.936 --> 00:17:59.756 A:middle
and as a result we
are deprecating

00:17:59.756 --> 00:18:03.346 A:middle
imageFlippedForRightToLeft
LayoutDirection in iOS X.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.756 --> 00:18:03.346 A:middle
imageFlippedForRightToLeft
LayoutDirection in iOS X.

00:18:04.576 --> 00:18:06.986 A:middle
We also just took a look at
the new convenience property

00:18:06.986 --> 00:18:10.506 A:middle
on UIView for determining layout
direction in custom layouts,

00:18:11.096 --> 00:18:12.506 A:middle
in addition to a class method

00:18:12.506 --> 00:18:14.966 A:middle
that lets you achieve the
same thing in other contexts.

00:18:15.626 --> 00:18:18.456 A:middle
So that's iOS, and now I'd

00:18:18.456 --> 00:18:21.306 A:middle
like to move swiftly
on over to watchOS.

00:18:23.116 --> 00:18:27.676 A:middle
So watchOS 2.1 added
Arabic and Hebrew

00:18:27.966 --> 00:18:29.606 A:middle
as selectable system languages.

00:18:30.856 --> 00:18:33.126 A:middle
And what this means
for your apps is

00:18:33.126 --> 00:18:36.596 A:middle
that watchKit is now
right to left aware.

00:18:37.396 --> 00:18:39.616 A:middle
So all watchKit elements
now do the right thing

00:18:39.616 --> 00:18:41.246 A:middle
when running in Arabic
or Hebrew.

00:18:42.236 --> 00:18:44.156 A:middle
We have an API that's
similar to iOS

00:18:44.266 --> 00:18:47.006 A:middle
that lets you fine-tune
individual group

00:18:47.006 --> 00:18:48.796 A:middle
or interface object instances.

00:18:49.386 --> 00:18:54.216 A:middle
And it's important to note
also that, having said that,

00:18:54.216 --> 00:18:55.936 A:middle
it's natural that it
should follow that,

00:18:56.006 --> 00:18:58.466 A:middle
a lot of the design
concepts that we saw

00:18:58.466 --> 00:18:59.986 A:middle
in iOS do apply on the watch.

00:18:59.986 --> 00:19:03.666 A:middle
So, the idea of pushing and
popping interface controllers


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.986 --> 00:19:03.666 A:middle
So, the idea of pushing and
popping interface controllers

00:19:03.666 --> 00:19:06.156 A:middle
in their direction, these
should adapt for right to left

00:19:06.156 --> 00:19:08.336 A:middle
and you should keep this
in mind if you have any UI

00:19:08.336 --> 00:19:09.946 A:middle
that reflects this as well.

00:19:11.956 --> 00:19:15.906 A:middle
Any horizontal layout that
prioritizes certain things first

00:19:15.906 --> 00:19:20.206 A:middle
or has an ordering like showing
an image on a table view cell,

00:19:20.636 --> 00:19:22.946 A:middle
and then a label, you
should also adapt.

00:19:23.916 --> 00:19:26.556 A:middle
And, something very particular
to the watch, of course,

00:19:26.556 --> 00:19:28.376 A:middle
is the idea and concept of time

00:19:28.436 --> 00:19:32.196 A:middle
and in particular
clockwise and anti-clockwise.

00:19:32.196 --> 00:19:35.306 A:middle
And this is going back to
those nuances and exceptions,

00:19:35.536 --> 00:19:38.176 A:middle
if you have any radial
or clockwise

00:19:38.176 --> 00:19:40.616 A:middle
and anti-clockwise UI
this should stay the same

00:19:40.806 --> 00:19:43.506 A:middle
across layout directions, just
one of those things to keep

00:19:43.506 --> 00:19:46.296 A:middle
in mind in addition to the
concepts that we talked about.

00:19:46.856 --> 00:19:49.786 A:middle
So how do you do
this using the API?

00:19:50.076 --> 00:19:51.426 A:middle
So like I said before,

00:19:51.426 --> 00:19:53.716 A:middle
all interface objects now do
the right thing when running

00:19:53.716 --> 00:19:55.236 A:middle
in right to left,
these are your buttons,

00:19:55.236 --> 00:19:56.556 A:middle
your sliders and your switches.

00:19:58.226 --> 00:20:00.896 A:middle
In addition to that,
the concept of direction


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.226 --> 00:20:00.896 A:middle
In addition to that,
the concept of direction

00:20:00.896 --> 00:20:03.406 A:middle
and alignment also
change automatically.

00:20:03.406 --> 00:20:06.616 A:middle
So this means that the direction
of horizontal interface groups

00:20:07.096 --> 00:20:11.166 A:middle
and their alignment and also
alignment for any object

00:20:11.166 --> 00:20:13.496 A:middle
in watchKit relative to
its parent also changes.

00:20:13.496 --> 00:20:16.876 A:middle
So in the example, above
I have a very simple app

00:20:17.106 --> 00:20:18.766 A:middle
with a horizontal
group up at the top

00:20:18.766 --> 00:20:20.236 A:middle
with left alignment
and direction.

00:20:21.156 --> 00:20:23.366 A:middle
And a vertical group at the
bottom with left alignment.

00:20:24.146 --> 00:20:27.906 A:middle
When I run this app in Hebrew,
all of these change to right,

00:20:28.116 --> 00:20:29.766 A:middle
so note the ordering
of the elements

00:20:29.766 --> 00:20:31.676 A:middle
at the horizontal
interface group as well.

00:20:32.216 --> 00:20:35.836 A:middle
We have semantic content
attribute just like on iOS

00:20:35.836 --> 00:20:37.886 A:middle
with the same cases
that I talked

00:20:37.886 --> 00:20:40.806 A:middle
about to help manage
individual interface,

00:20:40.806 --> 00:20:43.236 A:middle
interface objects or groups.

00:20:43.856 --> 00:20:46.546 A:middle
And seeing this in action
is really just as simple

00:20:46.726 --> 00:20:49.226 A:middle
as any other property that you
would set on a watchKit object.

00:20:51.506 --> 00:20:53.996 A:middle
If you're not using
watchKit to draw your UI,

00:20:53.996 --> 00:20:55.776 A:middle
say you're using
SceneKit or SpriteKit,

00:20:55.776 --> 00:20:56.956 A:middle
they're new in watchOS 3,

00:20:57.566 --> 00:21:00.296 A:middle
you could still evaluate
a layout direction


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.566 --> 00:21:00.296 A:middle
you could still evaluate
a layout direction

00:21:00.576 --> 00:21:02.556 A:middle
if you have a semantic
content attribute in mind.

00:21:02.556 --> 00:21:06.126 A:middle
So here I just got the
direction using a class method

00:21:06.176 --> 00:21:08.846 A:middle
on interface device and once
I have that I just check

00:21:08.846 --> 00:21:10.716 A:middle
if it's left to right
or right to left.

00:21:11.186 --> 00:21:15.766 A:middle
And that's a brief look at
what we added in watchOS 2.1.

00:21:16.336 --> 00:21:19.366 A:middle
So once again it's the same
ideas and principles as iOS.

00:21:20.866 --> 00:21:23.306 A:middle
All watchKit elements do the
correct thing out of the box

00:21:23.556 --> 00:21:26.956 A:middle
with no extra work needed
and any custom UI or elements

00:21:26.956 --> 00:21:28.436 A:middle
that you have should
also reflect this.

00:21:29.136 --> 00:21:32.046 A:middle
Keeping in mind of course,
the nuances and exceptions

00:21:32.046 --> 00:21:34.646 A:middle
that I mentioned and you can
use semantic content attribute

00:21:34.966 --> 00:21:37.916 A:middle
to help determine the
layout direction at runtime.

00:21:38.356 --> 00:21:41.736 A:middle
And with that, I'd like to
hand it over back to Sara,

00:21:41.966 --> 00:21:44.706 A:middle
to talk to you about macOS and
handling bidirectional text,

00:21:45.046 --> 00:21:47.876 A:middle
thank you very much, I hope you
have a great Friday, thanks.

00:21:48.111 --> 00:21:50.111 A:middle
[ Applause ]

00:21:50.206 --> 00:21:50.666 A:middle
&gt;&gt; Thank you.

00:21:51.646 --> 00:21:53.676 A:middle
So let's talk about macOS.

00:21:53.956 --> 00:21:56.976 A:middle
Just like the other
platforms, iOS and watchOS,

00:21:57.236 --> 00:21:59.596 A:middle
the concepts are exactly
the same for macOS.

00:21:59.946 --> 00:22:02.366 A:middle
So if you are using
standard AppKit controls,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.946 --> 00:22:02.366 A:middle
So if you are using
standard AppKit controls,

00:22:03.106 --> 00:22:05.086 A:middle
you will get the
behavior out of the box

00:22:05.086 --> 00:22:07.226 A:middle
when you're running your app
in a right to left environment.

00:22:07.676 --> 00:22:10.046 A:middle
So now I would like to walk
you through some examples

00:22:10.046 --> 00:22:13.286 A:middle
from our own system to show
you how active controls behave.

00:22:14.276 --> 00:22:17.456 A:middle
So let's start with what we
call system level controls.

00:22:17.976 --> 00:22:19.926 A:middle
So we call these
system level controls

00:22:20.066 --> 00:22:23.506 A:middle
because the layout follow the
system language is running

00:22:23.506 --> 00:22:25.786 A:middle
in instead of your
app layout direction.

00:22:26.176 --> 00:22:28.716 A:middle
But this will make more sense
with some visual examples,

00:22:28.926 --> 00:22:31.336 A:middle
so let's take a look,
at the menu bar here.

00:22:32.656 --> 00:22:35.006 A:middle
So I'm running my system in
a right to left environment

00:22:35.456 --> 00:22:39.016 A:middle
and as you can see here,
the upper menu starts

00:22:39.016 --> 00:22:40.606 A:middle
from the right edge
of the window.

00:22:41.516 --> 00:22:45.606 A:middle
Also, the elements inside the
menu expand from right to left.

00:22:46.606 --> 00:22:51.086 A:middle
And this concept also
applies to NSWindow.

00:22:51.616 --> 00:22:55.266 A:middle
So by design we decided to
keep window controls always

00:22:55.266 --> 00:22:57.956 A:middle
consistent across
all apps regardless

00:22:57.956 --> 00:22:59.566 A:middle
if your app is localized or not.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.246 --> 00:23:01.986 A:middle
So if you are doing
your own logic

00:23:02.156 --> 00:23:04.956 A:middle
and you're doing your own custom
controls you will need to take

00:23:04.956 --> 00:23:07.496 A:middle
that into consideration
and update that logic even

00:23:07.496 --> 00:23:09.876 A:middle
if you don't support Arabic
or Hebrew localizations.

00:23:11.436 --> 00:23:13.436 A:middle
Next, app level controls.

00:23:13.996 --> 00:23:18.156 A:middle
So app level controls here,
we follow the app language,

00:23:18.156 --> 00:23:19.646 A:middle
your layout direction
in your app.

00:23:20.236 --> 00:23:24.626 A:middle
So for example, NSTableView,
so this is a screenshot

00:23:24.656 --> 00:23:28.146 A:middle
from the activity monitor app,
we're using a stack table view

00:23:28.216 --> 00:23:30.746 A:middle
and as you can see the table
view [inaudible] reverse order

00:23:30.746 --> 00:23:33.666 A:middle
automatically when I'm running
my app in Arabic for example.

00:23:34.436 --> 00:23:36.986 A:middle
Another example,
NSCollectionView

00:23:37.936 --> 00:23:39.206 A:middle
and from the finder app

00:23:39.356 --> 00:23:42.086 A:middle
where the collection view flow
layout flows from right to left.

00:23:42.696 --> 00:23:44.086 A:middle
I will give you one
more example.

00:23:45.436 --> 00:23:48.706 A:middle
NSScrollView and the
same concept here,

00:23:49.046 --> 00:23:50.566 A:middle
so we also switch the position

00:23:50.566 --> 00:23:52.766 A:middle
of the scroll bar
inside the scroll view.

00:23:53.186 --> 00:23:54.826 A:middle
And this also will
avoid overlapping

00:23:54.826 --> 00:23:56.646 A:middle
with the content of
your application.

00:23:57.386 --> 00:24:02.356 A:middle
And keep in mind if you are
using web views in your apps,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.386 --> 00:24:02.356 A:middle
And keep in mind if you are
using web views in your apps,

00:24:02.766 --> 00:24:05.286 A:middle
so scroll in there works
a little bit differently.

00:24:05.656 --> 00:24:08.806 A:middle
So WebKit will look at the
content of your webpage

00:24:08.986 --> 00:24:12.336 A:middle
and evaluate its HTML
attributes and based

00:24:12.336 --> 00:24:14.606 A:middle
on that value it will
position the scroll bar.

00:24:15.316 --> 00:24:18.766 A:middle
So for example here, I'm running
Safari in English and I am

00:24:18.766 --> 00:24:20.076 A:middle
in Apple.com in English.

00:24:20.836 --> 00:24:24.586 A:middle
So looking at the content of
my webpage, so I will get,

00:24:25.076 --> 00:24:27.266 A:middle
the dir attribute here
is set to left to right

00:24:27.326 --> 00:24:30.076 A:middle
so we position the scroll
bar on the right side.

00:24:31.576 --> 00:24:33.836 A:middle
If I take the exact
same configuration,

00:24:34.316 --> 00:24:36.576 A:middle
but this time I am in
Apple.com in Arabic,

00:24:36.656 --> 00:24:37.986 A:middle
so looking at the content.

00:24:38.566 --> 00:24:40.196 A:middle
So here my content is in Arabic,

00:24:40.296 --> 00:24:43.136 A:middle
looking at the dir attributes
here again, it's set to right

00:24:43.136 --> 00:24:45.426 A:middle
to left, so we switch the
position of the scroll bar.

00:24:45.726 --> 00:24:48.666 A:middle
So these are just examples
from WebKit controls

00:24:48.776 --> 00:24:51.086 A:middle
and AppKit controls,
and now I would

00:24:51.086 --> 00:24:52.726 A:middle
like to talk to you about API.

00:24:55.666 --> 00:24:57.816 A:middle
So we just saw in
the last example

00:24:57.816 --> 00:25:00.016 A:middle
that WebKit's controls work
a little bit differently


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.816 --> 00:25:00.016 A:middle
that WebKit's controls work
a little bit differently

00:25:00.016 --> 00:25:01.036 A:middle
from AppKit.

00:25:01.666 --> 00:25:04.016 A:middle
So with that we are
providing a new API

00:25:04.616 --> 00:25:08.036 A:middle
in WebKit called
userInterfaceDirectionPolicy.

00:25:08.516 --> 00:25:12.346 A:middle
As I mentioned, the default
value is set to the content

00:25:12.536 --> 00:25:16.816 A:middle
of your webpage, but you can
override this value if you want

00:25:16.816 --> 00:25:18.266 A:middle
for example your scrollers

00:25:18.266 --> 00:25:20.276 A:middle
to follow the system
language instead

00:25:20.356 --> 00:25:22.046 A:middle
of the content of your webpage.

00:25:22.306 --> 00:25:24.996 A:middle
So you can override it to use
system instead of content.

00:25:26.776 --> 00:25:28.856 A:middle
Next, let's talk
about AppKit API.

00:25:29.576 --> 00:25:35.406 A:middle
As a quick recap, if you use
standard AppKit controls you

00:25:35.406 --> 00:25:36.586 A:middle
don't have to do anything,

00:25:36.726 --> 00:25:38.446 A:middle
everything will just
work for free.

00:25:39.176 --> 00:25:43.296 A:middle
Now you might have a specific
design in mind and you want

00:25:43.296 --> 00:25:45.056 A:middle
to layout your views
by yourself.

00:25:45.736 --> 00:25:47.446 A:middle
So in that case we
highly recommend

00:25:47.446 --> 00:25:49.216 A:middle
that you use StackViews
and GridViews.

00:25:49.356 --> 00:25:50.806 A:middle
So grid views are new to macOS,

00:25:50.806 --> 00:25:54.476 A:middle
and both these tools are really
powerful because they will set

00:25:54.476 --> 00:25:56.896 A:middle
up auto layouts constraints
for you under the hood.

00:25:57.496 --> 00:26:00.096 A:middle
And they also use leading
and trailing constraints


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:57.496 --> 00:26:00.096 A:middle
And they also use leading
and trailing constraints

00:26:00.096 --> 00:26:01.946 A:middle
which will flip your
views automatically

00:26:01.946 --> 00:26:03.756 A:middle
when you're running in a
right to left environment.

00:26:03.836 --> 00:26:08.896 A:middle
If you are not using StackViews
or GridViews, use auto layout.

00:26:09.416 --> 00:26:11.586 A:middle
If you're not familiar with
it, there are great sessions

00:26:11.586 --> 00:26:15.256 A:middle
from previous years and there is
a session this afternoon called

00:26:15.256 --> 00:26:17.286 A:middle
What's New in Auto
Layout, check it out.

00:26:17.836 --> 00:26:21.126 A:middle
Finally, if you're
using storyboards

00:26:21.126 --> 00:26:22.926 A:middle
in base approach
we also take care

00:26:22.926 --> 00:26:24.746 A:middle
of flipping the text
alignment for you.

00:26:25.296 --> 00:26:30.256 A:middle
In addition to that, we
have an API in NSView

00:26:30.466 --> 00:26:33.036 A:middle
that will let you get and
set the layout direction

00:26:33.036 --> 00:26:33.756 A:middle
of your views.

00:26:34.426 --> 00:26:37.036 A:middle
So for example here,
I have a banner slider

00:26:37.036 --> 00:26:38.986 A:middle
that has two values,
left and right.

00:26:39.536 --> 00:26:41.736 A:middle
So I want my slider
to be consistent

00:26:41.736 --> 00:26:43.386 A:middle
across all my localizations,

00:26:43.476 --> 00:26:45.306 A:middle
because it makes sense
left should always stay

00:26:45.306 --> 00:26:47.736 A:middle
on the left side and
right should always stay

00:26:47.736 --> 00:26:48.476 A:middle
on the right side.

00:26:48.476 --> 00:26:51.656 A:middle
So here it will make total sense
if I force the layout direction

00:26:51.656 --> 00:26:53.596 A:middle
of my slider to be
always left to right.

00:26:54.686 --> 00:26:57.586 A:middle
So as I mentioned, we
have an API in NSView

00:26:57.866 --> 00:26:59.016 A:middle
that will let you do that.

00:26:59.556 --> 00:27:01.186 A:middle
The default value is set


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.556 --> 00:27:01.186 A:middle
The default value is set

00:27:01.186 --> 00:27:03.676 A:middle
to NSApp.userInterfaceLayout
Direction,

00:27:04.626 --> 00:27:07.886 A:middle
but you can override it
to left or right based

00:27:07.886 --> 00:27:09.496 A:middle
on what you want to
do in your views.

00:27:11.116 --> 00:27:13.476 A:middle
Now let's talk about images.

00:27:14.196 --> 00:27:17.926 A:middle
As we just saw in
Joaquim's demo,

00:27:18.106 --> 00:27:22.146 A:middle
we introduced directional
image assets, in asset catalog.

00:27:22.146 --> 00:27:24.926 A:middle
So assets catalogs
also exist in macOS

00:27:24.926 --> 00:27:28.226 A:middle
and they work exactly the same
way as iOS, so I'm not going

00:27:28.226 --> 00:27:29.466 A:middle
to go through details here.

00:27:30.146 --> 00:27:32.936 A:middle
But again, sometimes you
don't have your images

00:27:32.936 --> 00:27:36.176 A:middle
in your application bundle
but you still want to get them

00:27:36.176 --> 00:27:38.716 A:middle
from a remote location,
let's say a server.

00:27:39.486 --> 00:27:43.466 A:middle
So we also have an API in
NSImageRep that will let you do

00:27:43.466 --> 00:27:45.416 A:middle
that and register
your images in code.

00:27:45.986 --> 00:27:47.836 A:middle
So let's go through an
example together here,

00:27:47.986 --> 00:27:49.546 A:middle
just see how it works.

00:27:51.256 --> 00:27:56.016 A:middle
So as I mentioned, sometimes you
have images in another location

00:27:56.216 --> 00:27:57.616 A:middle
and you want to register them.

00:27:57.616 --> 00:28:00.016 A:middle
So first what you need to
do is to create your left


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.616 --> 00:28:00.016 A:middle
So first what you need to
do is to create your left

00:28:00.016 --> 00:28:02.046 A:middle
to right image by
using NSImage API.

00:28:02.986 --> 00:28:04.376 A:middle
And once you have that you need

00:28:04.376 --> 00:28:06.476 A:middle
to set this layout
direction to be left to right.

00:28:06.956 --> 00:28:09.186 A:middle
So same thing for your
right to left image,

00:28:09.506 --> 00:28:12.436 A:middle
but this time you will
need to use NSImageRep API.

00:28:13.136 --> 00:28:17.806 A:middle
So once you have both images, so
you need to register your right

00:28:17.806 --> 00:28:22.066 A:middle
to left image representation
with the left to right image

00:28:22.066 --> 00:28:24.126 A:middle
and that by using
other presentation API.

00:28:24.886 --> 00:28:28.446 A:middle
So with that, once you have both
images registered we will load

00:28:28.446 --> 00:28:30.766 A:middle
the right image for
you at runtime,

00:28:31.246 --> 00:28:33.046 A:middle
either if you're running
your app in a left

00:28:33.046 --> 00:28:35.386 A:middle
to right localization or a
right to left localization.

00:28:37.616 --> 00:28:41.486 A:middle
Finally, we have new
convenience initializers

00:28:41.926 --> 00:28:43.376 A:middle
for common AppKit controls.

00:28:44.086 --> 00:28:49.336 A:middle
For an accessory for example, it
will set the alignment attribute

00:28:49.336 --> 00:28:51.646 A:middle
and auto layout attributes
correctly for you.

00:28:52.356 --> 00:28:55.806 A:middle
And for NSButton, it
will flip the image,

00:28:56.056 --> 00:28:59.536 A:middle
the checkbox position, and the
Radio button positions also

00:28:59.536 --> 00:29:00.046 A:middle
for free.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.536 --> 00:29:00.046 A:middle
for free.

00:29:00.596 --> 00:29:02.486 A:middle
So with that, I would
like to show you a demo

00:29:02.486 --> 00:29:10.316 A:middle
to summarize what we
just saw in the section.

00:29:15.796 --> 00:29:19.026 A:middle
Alright. Cool, so I got
inspired by Joaquim's demo

00:29:19.026 --> 00:29:23.166 A:middle
and I created a scoreboard
app so we can track our scores

00:29:23.166 --> 00:29:24.586 A:middle
when we are playing
the game together.

00:29:24.746 --> 00:29:29.286 A:middle
So here I have a simple,
app where you can see it

00:29:29.286 --> 00:29:31.806 A:middle
in my view controller, I
just have a table view,

00:29:32.296 --> 00:29:34.766 A:middle
and I already setup my
auto layout constraints.

00:29:35.256 --> 00:29:39.546 A:middle
And inside my table view cell
I have an image, a text field,

00:29:39.966 --> 00:29:41.306 A:middle
and a [inaudible]
so pretty simple.

00:29:41.746 --> 00:29:43.906 A:middle
So here I'm using
StackViews to lay

00:29:43.906 --> 00:29:47.456 A:middle
out the elements inside my table
view cell, so I didn't even need

00:29:47.456 --> 00:29:49.626 A:middle
to worry about setting
up auto layout constraint

00:29:49.626 --> 00:29:52.076 A:middle
because text view just
took care of that for me.

00:29:52.856 --> 00:29:55.606 A:middle
And here at the bottom,
I have a label

00:29:55.606 --> 00:29:58.296 A:middle
where I update my highest
score and my best play.

00:29:58.536 --> 00:29:59.276 A:middle
So pretty simple.

00:29:59.986 --> 00:30:02.806 A:middle
So what I'm going to do now,
I'm going to simulate a right


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.986 --> 00:30:02.806 A:middle
So what I'm going to do now,
I'm going to simulate a right

00:30:02.806 --> 00:30:04.936 A:middle
to left environment
directly on my app

00:30:04.996 --> 00:30:06.716 A:middle
and see how it looks like.

00:30:07.706 --> 00:30:10.376 A:middle
Great. So I'm going to
go to my scheme editor,

00:30:11.056 --> 00:30:14.486 A:middle
to my application language
and choose my right

00:30:14.486 --> 00:30:16.776 A:middle
to left pseudo language
instead of my system language.

00:30:17.586 --> 00:30:21.786 A:middle
I'm going to build
and run my app again.

00:30:21.786 --> 00:30:23.056 A:middle
And it's building, great.

00:30:23.406 --> 00:30:26.036 A:middle
So as you can see here without
writing one line of code,

00:30:26.036 --> 00:30:28.026 A:middle
just by using storyboard,
StackViews,

00:30:28.026 --> 00:30:29.606 A:middle
auto layouts, it just works.

00:30:30.036 --> 00:30:34.366 A:middle
So that's it, so now that my app
looks great in right to left,

00:30:34.496 --> 00:30:40.236 A:middle
what I'm going to do, I want
to go back to my code and,

00:30:40.676 --> 00:30:43.836 A:middle
I'm going to run
my app, this time,

00:30:45.196 --> 00:30:49.376 A:middle
in my system language instead
of right to left pseudo language

00:30:49.546 --> 00:30:51.366 A:middle
So this will just run
the app in English

00:30:51.366 --> 00:30:52.796 A:middle
because my system
now is in English.

00:30:53.486 --> 00:30:55.386 A:middle
Now I'm going to
run my app again.

00:30:57.686 --> 00:31:00.946 A:middle
So why I'm doing this, so I just
want to show you another aspect


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:57.686 --> 00:31:00.946 A:middle
So why I'm doing this, so I just
want to show you another aspect

00:31:00.946 --> 00:31:02.556 A:middle
of international
user interfaces.

00:31:02.916 --> 00:31:06.196 A:middle
So here, so my app looks
great in English as well,

00:31:06.546 --> 00:31:07.856 A:middle
and now I want to join the game.

00:31:07.856 --> 00:31:09.366 A:middle
So I'm going to add
a new player.

00:31:09.936 --> 00:31:15.156 A:middle
I'm going to click here, add
a new player and here just

00:31:15.156 --> 00:31:17.976 A:middle
for fun, I want to write my
name in my native language.

00:31:17.976 --> 00:31:20.106 A:middle
So I'm going to go ahead
and change my keyword

00:31:21.106 --> 00:31:22.746 A:middle
to use Arabic instead
of English.

00:31:23.126 --> 00:31:27.556 A:middle
Alright, so I type my
name in Arabic, great.

00:31:28.856 --> 00:31:31.386 A:middle
And I'm also really good at
guessing flags, so I'm going

00:31:31.386 --> 00:31:33.346 A:middle
to win this game, so I'm
not going to waste time.

00:31:33.346 --> 00:31:34.776 A:middle
So I'm just going to
update my score anyway.

00:31:35.486 --> 00:31:39.476 A:middle
So, alright, see
what happened here?

00:31:39.556 --> 00:31:44.496 A:middle
So just by updating my name, so
my label is completely broken

00:31:44.496 --> 00:31:46.906 A:middle
because it jumps
to the right side

00:31:46.906 --> 00:31:48.676 A:middle
and now my label just reads "!

00:31:48.676 --> 00:31:51.616 A:middle
has the highest score 12, Sara."

00:31:51.616 --> 00:31:53.086 A:middle
That doesn't make any sense.

00:31:53.986 --> 00:31:57.526 A:middle
So in the next section I
would like to show you how

00:31:57.526 --> 00:32:00.186 A:middle
to solve this kind of
problem and how can you render


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.526 --> 00:32:00.186 A:middle
to solve this kind of
problem and how can you render

00:32:00.886 --> 00:32:02.456 A:middle
by directional text correctly.

00:32:02.956 --> 00:32:04.786 A:middle
So let's go back to slides.

00:32:14.196 --> 00:32:16.936 A:middle
So we just saw in the demo
app, just by entering my name

00:32:16.936 --> 00:32:19.866 A:middle
in Arabic, it broke the
rendering of my text.

00:32:20.376 --> 00:32:22.776 A:middle
So now let's see how we can
fix these kind of problems.

00:32:26.886 --> 00:32:30.446 A:middle
So rendering text in
your applications is

00:32:30.446 --> 00:32:31.486 A:middle
really important.

00:32:32.436 --> 00:32:35.136 A:middle
It doesn't matter if
you support localization

00:32:35.286 --> 00:32:36.726 A:middle
of that specific language,

00:32:36.796 --> 00:32:39.386 A:middle
even if you are supporting
only English,

00:32:39.866 --> 00:32:43.336 A:middle
your users can still
read and write content

00:32:43.396 --> 00:32:44.986 A:middle
in any other language.

00:32:45.676 --> 00:32:49.656 A:middle
And when it comes to text, it's
really important to remember

00:32:50.036 --> 00:32:53.216 A:middle
that text alignment and
text directionality are two

00:32:53.216 --> 00:32:54.196 A:middle
different concepts.

00:32:54.836 --> 00:32:57.926 A:middle
So for example here, I have
a paragraph in English,

00:32:58.136 --> 00:33:00.746 A:middle
it's right aligned, it's
fine, it looks great,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.136 --> 00:33:00.746 A:middle
it's right aligned, it's
fine, it looks great,

00:33:01.336 --> 00:33:03.336 A:middle
because you might need
to do that by design,

00:33:03.336 --> 00:33:04.916 A:middle
so it won't break
the text rendering.

00:33:05.836 --> 00:33:10.186 A:middle
But if I take the same example
but this time it's left aligned,

00:33:10.526 --> 00:33:12.886 A:middle
but I'm forcing the writing
direction of it to be right

00:33:12.886 --> 00:33:15.016 A:middle
to left, that will break
the rendering of your text.

00:33:15.296 --> 00:33:17.576 A:middle
As you can see here the
exclamation marks are not

00:33:17.576 --> 00:33:18.666 A:middle
in the correct position.

00:33:19.326 --> 00:33:21.886 A:middle
So let's talk a little
bit for that.

00:33:22.386 --> 00:33:25.646 A:middle
Lateral alignment is
default in all our platforms,

00:33:25.746 --> 00:33:27.556 A:middle
so if you don't override
that value,

00:33:28.076 --> 00:33:30.926 A:middle
so we'll get the right
behavior, in most cases.

00:33:31.426 --> 00:33:33.076 A:middle
So let's talk about
text directionality

00:33:33.076 --> 00:33:34.556 A:middle
because it's a little
bit more complex.

00:33:35.176 --> 00:33:40.596 A:middle
So here I'm just going to give
you a really simplified overview

00:33:40.676 --> 00:33:43.376 A:middle
of the text engine by algorithm.

00:33:43.656 --> 00:33:45.986 A:middle
But if you want to
learn more about Unicode

00:33:45.986 --> 00:33:47.626 A:middle
by the algorithm please check

00:33:47.626 --> 00:33:50.006 A:middle
out the full specification
in Unicode.org.

00:33:50.706 --> 00:33:52.136 A:middle
But let's start with the basics.

00:33:52.796 --> 00:33:56.236 A:middle
So there are three types
of Unicode characters.

00:33:56.816 --> 00:33:59.766 A:middle
So they can be either
strong left to right,

00:33:59.946 --> 00:34:02.696 A:middle
for example scripts
that we are familiar


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.946 --> 00:34:02.696 A:middle
for example scripts
that we are familiar

00:34:02.696 --> 00:34:05.196 A:middle
with Latin, Chinese or Japanese.

00:34:06.396 --> 00:34:10.275 A:middle
They can be strong right to left
characters for example scripts

00:34:10.275 --> 00:34:15.306 A:middle
like Arabic, Hebrew, Farsi or
Urdu and there are characters

00:34:15.516 --> 00:34:17.626 A:middle
that they don't have a
directionality at all,

00:34:18.056 --> 00:34:20.926 A:middle
and we call these neutral
or weak characters.

00:34:21.146 --> 00:34:22.516 A:middle
For example spaces.

00:34:23.176 --> 00:34:28.775 A:middle
So how the text engine decides
about the directionality

00:34:28.775 --> 00:34:30.436 A:middle
of a specific paragraph?

00:34:31.926 --> 00:34:33.946 A:middle
So the text engine just look

00:34:33.946 --> 00:34:37.186 A:middle
at the first strong Unicode
characters, that's it.

00:34:37.565 --> 00:34:39.036 A:middle
And if it's a strong
right to left,

00:34:39.036 --> 00:34:41.036 A:middle
my paragraph would
be right to left.

00:34:41.036 --> 00:34:43.235 A:middle
If it's strong left to right,
my paragraph will have a left

00:34:43.235 --> 00:34:44.166 A:middle
to right directionality.

00:34:44.926 --> 00:34:47.936 A:middle
So let's walk through an example
together to see how it works.

00:34:48.766 --> 00:34:51.005 A:middle
So if I take my label
from the demo app,

00:34:51.295 --> 00:34:53.246 A:middle
%@ has the highest color.

00:34:54.335 --> 00:34:59.336 A:middle
So I have no idea at runtime
what my %@ will be replaced by,

00:34:59.336 --> 00:35:00.956 A:middle
because my user can write


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.336 --> 00:35:00.956 A:middle
because my user can write

00:35:01.056 --> 00:35:03.156 A:middle
or input anything,
use any keyboard.

00:35:03.766 --> 00:35:05.646 A:middle
So let's take the
simple case here,

00:35:06.006 --> 00:35:09.626 A:middle
where my %@ will be
replaced with a Latin name.

00:35:10.596 --> 00:35:14.646 A:middle
So here the first character
is an A, it belongs to Latin,

00:35:14.966 --> 00:35:16.306 A:middle
so it's a strong left to right.

00:35:16.626 --> 00:35:19.776 A:middle
So the directionality of my
paragraph here is left to right

00:35:19.776 --> 00:35:20.946 A:middle
so it renders correctly.

00:35:22.046 --> 00:35:26.506 A:middle
Now if my variable is
replaced with an Arabic name.

00:35:26.926 --> 00:35:30.886 A:middle
So the first strong character
here is an Arabic character

00:35:30.886 --> 00:35:32.616 A:middle
which give the directionality

00:35:32.616 --> 00:35:34.936 A:middle
of my whole paragraph
to be right to left.

00:35:35.076 --> 00:35:38.696 A:middle
So that's why the, my
text rendering was broken,

00:35:38.756 --> 00:35:39.566 A:middle
so this is wrong.

00:35:40.296 --> 00:35:44.606 A:middle
So the right behavior here will
be something, so I will expect

00:35:44.606 --> 00:35:47.126 A:middle
to see something like that,
even my name is in Arabic.

00:35:47.236 --> 00:35:49.646 A:middle
I want it to be on the
left side and the rest

00:35:49.646 --> 00:35:52.566 A:middle
of my paragraph will be rendered
correctly from left to right.

00:35:53.976 --> 00:35:56.536 A:middle
So wouldn't it be great
if I had something

00:35:56.726 --> 00:35:59.306 A:middle
that will take my
variable, will isolate it

00:35:59.726 --> 00:36:02.086 A:middle
and give it its own
writing direction


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.726 --> 00:36:02.086 A:middle
and give it its own
writing direction

00:36:02.136 --> 00:36:04.126 A:middle
without affecting the
rest of my paragraph?

00:36:04.616 --> 00:36:07.456 A:middle
And that's possible
with Isolates supports.

00:36:07.926 --> 00:36:11.746 A:middle
So Isolates are the latest
Unicode [inaudible] characters

00:36:11.746 --> 00:36:13.966 A:middle
that were introduced
in Unicode 6.3

00:36:14.436 --> 00:36:17.506 A:middle
and that our text engine
supports in all our platforms.

00:36:18.156 --> 00:36:22.736 A:middle
So as I mentioned, Isolates will
allow some text to be isolated

00:36:23.166 --> 00:36:26.396 A:middle
and have the directionality
of its first strong character

00:36:26.866 --> 00:36:30.166 A:middle
and that's without affecting
the surrounding text.

00:36:30.166 --> 00:36:32.956 A:middle
And I'm happy to
say, you don't need

00:36:32.956 --> 00:36:36.956 A:middle
to insert these characters
yourself, like in case-by-case

00:36:37.696 --> 00:36:40.436 A:middle
because if you use
localizedStringWithFormat,

00:36:41.146 --> 00:36:42.956 A:middle
we do that for you
automatically.

00:36:43.076 --> 00:36:46.946 A:middle
So localizedStringWithFormat
will isolate %@ automatically

00:36:46.946 --> 00:36:49.036 A:middle
and it will do the
right thing at runtime.

00:36:50.376 --> 00:36:53.456 A:middle
So now, I would like to
go back to the demo app

00:36:53.456 --> 00:36:55.956 A:middle
and fix the issue we introduce
earlier just by one line

00:36:55.956 --> 00:36:57.026 A:middle
of code, so let's do that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:04.726 --> 00:37:06.336 A:middle
Alright, so cool.

00:37:06.456 --> 00:37:09.626 A:middle
So now I'm going to go back
to, my view controller here

00:37:10.376 --> 00:37:12.096 A:middle
and this is where
I update my label.

00:37:12.636 --> 00:37:16.836 A:middle
So just to save some time
I already wrote the code

00:37:16.836 --> 00:37:18.066 A:middle
to use localized standard string

00:37:18.066 --> 00:37:20.126 A:middle
with format instead
of a regular string.

00:37:20.126 --> 00:37:24.046 A:middle
So I'm going to go ahead here
and comment this regular string

00:37:24.486 --> 00:37:27.526 A:middle
and uncomment the line that is
using localizedStringWithFormat.

00:37:28.406 --> 00:37:32.686 A:middle
I'm going to run my app again,
and see if my issue's fixed.

00:37:38.396 --> 00:37:42.346 A:middle
Right, so as you can see
here, so my problem is fixed.

00:37:42.346 --> 00:37:45.266 A:middle
So my name now is on the
left side of my sentence,

00:37:45.366 --> 00:37:46.626 A:middle
I can read it correctly.

00:37:46.956 --> 00:37:49.796 A:middle
So let's see if it works
with English names as well.

00:37:50.506 --> 00:37:54.106 A:middle
So see here if I update
with, Rana, see if it works.

00:37:54.806 --> 00:37:56.316 A:middle
And with Arabic names as well,

00:37:56.596 --> 00:37:59.126 A:middle
and that's Isolates
support in our platforms.

00:37:59.796 --> 00:38:00.976 A:middle
So let's go back to slides.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.796 --> 00:38:00.976 A:middle
So let's go back to slides.

00:38:01.516 --> 00:38:05.986 A:middle
[ Applause ]

00:38:06.486 --> 00:38:07.966 A:middle
Alright so let's summarize.

00:38:07.966 --> 00:38:13.496 A:middle
So in this session we introduced
directional image assets.

00:38:14.086 --> 00:38:17.576 A:middle
So it's easier now for you
to support different images

00:38:17.576 --> 00:38:20.736 A:middle
for both your left to right and
right to left localizations.

00:38:22.076 --> 00:38:26.316 A:middle
We have new APIs for you
on iOS, watchOS and macOS.

00:38:27.566 --> 00:38:31.276 A:middle
And auto layout is your best
friend if you want to lay

00:38:31.276 --> 00:38:33.786 A:middle
out your views and support
other localizations.

00:38:35.436 --> 00:38:38.296 A:middle
And we also improved
our text engine

00:38:38.426 --> 00:38:40.646 A:middle
by supporting Isolates
Unicode characters.

00:38:42.166 --> 00:38:45.956 A:middle
So with all these improvements,
it's really easy for you,

00:38:45.956 --> 00:38:49.386 A:middle
as a developer, to go ahead
and reach new markets.

00:38:50.766 --> 00:38:54.426 A:middle
For more information, please
visit developer.apple.com

00:38:54.496 --> 00:38:57.756 A:middle
to find our session there and
thank you so much for coming.

00:38:58.126 --> 00:38:59.616 A:middle
And those are related sessions

00:38:59.616 --> 00:39:01.036 A:middle
if you didn't watch
them already,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.616 --> 00:39:01.036 A:middle
if you didn't watch
them already,

00:39:01.036 --> 00:39:03.176 A:middle
please check them
out, they are good.

00:39:04.596 --> 00:39:07.456 A:middle
And have a wonderful
day, enjoy the rest

00:39:07.456 --> 00:39:09.416 A:middle
of WWDC, thank you so much.

