WEBVTT
Kind: captions
Language: en

00:00:16.640 --> 00:00:22.550 align:start position:0%
 
good<00:00:17.640><c> morning</c><00:00:19.880><c> so</c><00:00:20.880><c> I</c><00:00:20.939><c> am</c><00:00:21.090><c> up</c><00:00:21.240><c> here</c><00:00:21.270><c> I'm</c><00:00:22.050><c> course</c>

00:00:22.550 --> 00:00:22.560 align:start position:0%
good morning so I am up here I'm course
 

00:00:22.560 --> 00:00:24.170 align:start position:0%
good morning so I am up here I'm course
here<00:00:22.860><c> to</c><00:00:22.980><c> talk</c><00:00:23.189><c> about</c><00:00:23.220><c> programming</c><00:00:23.820><c> for</c><00:00:24.090><c> the</c>

00:00:24.170 --> 00:00:24.180 align:start position:0%
here to talk about programming for the
 

00:00:24.180 --> 00:00:27.109 align:start position:0%
here to talk about programming for the
Mac<00:00:24.330><c> os10</c><00:00:24.720><c> 64-bit</c><00:00:25.500><c> avi</c><00:00:25.770><c> or</c><00:00:26.130><c> more</c><00:00:26.640><c> correctly</c><00:00:26.760><c> to</c>

00:00:27.109 --> 00:00:27.119 align:start position:0%
Mac os10 64-bit avi or more correctly to
 

00:00:27.119 --> 00:00:28.909 align:start position:0%
Mac os10 64-bit avi or more correctly to
talk<00:00:27.270><c> a</c><00:00:27.300><c> little</c><00:00:27.540><c> bit</c><00:00:27.750><c> about</c><00:00:27.900><c> apples</c><00:00:28.470><c> direction</c>

00:00:28.909 --> 00:00:28.919 align:start position:0%
talk a little bit about apples direction
 

00:00:28.919 --> 00:00:30.890 align:start position:0%
talk a little bit about apples direction
with<00:00:29.009><c> respect</c><00:00:29.099><c> to</c><00:00:29.430><c> 64-bit</c><00:00:30.180><c> computing</c><00:00:30.509><c> and</c>

00:00:30.890 --> 00:00:30.900 align:start position:0%
with respect to 64-bit computing and
 

00:00:30.900 --> 00:00:33.620 align:start position:0%
with respect to 64-bit computing and
then<00:00:31.800><c> hand</c><00:00:32.460><c> things</c><00:00:32.640><c> over</c><00:00:32.790><c> to</c><00:00:32.940><c> our</c><00:00:33.150><c> esteemed</c>

00:00:33.620 --> 00:00:33.630 align:start position:0%
then hand things over to our esteemed
 

00:00:33.630 --> 00:00:35.000 align:start position:0%
then hand things over to our esteemed
engineering<00:00:34.170><c> team</c><00:00:34.350><c> who</c><00:00:34.500><c> is</c><00:00:34.620><c> going</c><00:00:34.770><c> to</c><00:00:34.860><c> give</c><00:00:34.980><c> us</c>

00:00:35.000 --> 00:00:35.010 align:start position:0%
engineering team who is going to give us
 

00:00:35.010 --> 00:00:38.120 align:start position:0%
engineering team who is going to give us
a<00:00:35.160><c> lot</c><00:00:35.310><c> more</c><00:00:35.370><c> detail</c><00:00:35.850><c> about</c><00:00:35.880><c> this</c><00:00:37.130><c> first</c>

00:00:38.120 --> 00:00:38.130 align:start position:0%
a lot more detail about this first
 

00:00:38.130 --> 00:00:41.660 align:start position:0%
a lot more detail about this first
things<00:00:38.340><c> first</c><00:00:38.430><c> why</c><00:00:38.970><c> 64-bit</c><00:00:39.750><c> I</c><00:00:40.680><c> think</c><00:00:41.370><c> the</c><00:00:41.460><c> key</c>

00:00:41.660 --> 00:00:41.670 align:start position:0%
things first why 64-bit I think the key
 

00:00:41.670 --> 00:00:43.520 align:start position:0%
things first why 64-bit I think the key
thing<00:00:41.700><c> that</c><00:00:42.239><c> we</c><00:00:42.360><c> see</c><00:00:42.600><c> is</c><00:00:42.840><c> access</c><00:00:43.230><c> to</c><00:00:43.350><c> more</c>

00:00:43.520 --> 00:00:43.530 align:start position:0%
thing that we see is access to more
 

00:00:43.530 --> 00:00:44.990 align:start position:0%
thing that we see is access to more
memory<00:00:43.829><c> than</c><00:00:44.010><c> you</c><00:00:44.309><c> can</c><00:00:44.430><c> imagine</c><00:00:44.519><c> for</c><00:00:44.969><c> now</c>

00:00:44.990 --> 00:00:45.000 align:start position:0%
memory than you can imagine for now
 

00:00:45.000 --> 00:00:46.819 align:start position:0%
memory than you can imagine for now
that's<00:00:45.629><c> always</c><00:00:45.870><c> an</c><00:00:45.960><c> embarrassing</c><00:00:46.410><c> or</c><00:00:46.530><c> mark</c><00:00:46.680><c> of</c>

00:00:46.819 --> 00:00:46.829 align:start position:0%
that's always an embarrassing or mark of
 

00:00:46.829 --> 00:00:48.889 align:start position:0%
that's always an embarrassing or mark of
course<00:00:47.039><c> 640</c><00:00:47.850><c> k</c><00:00:48.030><c> used</c><00:00:48.269><c> to</c><00:00:48.359><c> be</c><00:00:48.449><c> more</c><00:00:48.600><c> memory</c><00:00:48.840><c> than</c>

00:00:48.889 --> 00:00:48.899 align:start position:0%
course 640 k used to be more memory than
 

00:00:48.899 --> 00:00:51.229 align:start position:0%
course 640 k used to be more memory than
some<00:00:49.199><c> people</c><00:00:49.440><c> could</c><00:00:49.530><c> imagine</c><00:00:49.769><c> and</c><00:00:50.239><c> 16</c>

00:00:51.229 --> 00:00:51.239 align:start position:0%
some people could imagine and 16
 

00:00:51.239 --> 00:00:52.729 align:start position:0%
some people could imagine and 16
exabytes<00:00:51.600><c> may</c><00:00:51.750><c> seem</c><00:00:51.960><c> like</c><00:00:52.109><c> that</c><00:00:52.289><c> someday</c><00:00:52.530><c> as</c>

00:00:52.729 --> 00:00:52.739 align:start position:0%
exabytes may seem like that someday as
 

00:00:52.739 --> 00:00:54.560 align:start position:0%
exabytes may seem like that someday as
well<00:00:52.920><c> I</c><00:00:53.100><c> hope</c><00:00:53.429><c> I'm</c><00:00:53.579><c> not</c><00:00:53.789><c> introducing</c><00:00:54.480><c> the</c>

00:00:54.560 --> 00:00:54.570 align:start position:0%
well I hope I'm not introducing the
 

00:00:54.570 --> 00:00:59.209 align:start position:0%
well I hope I'm not introducing the
128-bit<00:00:55.260><c> ABI</c><00:00:55.800><c> session</c><00:00:56.460><c> but</c><00:00:57.890><c> we</c><00:00:58.890><c> do</c><00:00:59.010><c> see</c><00:00:59.190><c> a</c>

00:00:59.209 --> 00:00:59.219 align:start position:0%
128-bit ABI session but we do see a
 

00:00:59.219 --> 00:01:01.220 align:start position:0%
128-bit ABI session but we do see a
number<00:00:59.489><c> of</c><00:00:59.550><c> reasons</c><00:00:59.699><c> for</c><00:01:00.000><c> this</c><00:01:00.120><c> in</c><00:01:00.359><c> some</c><00:01:01.019><c> cases</c>

00:01:01.220 --> 00:01:01.230 align:start position:0%
number of reasons for this in some cases
 

00:01:01.230 --> 00:01:02.060 align:start position:0%
number of reasons for this in some cases
you're<00:01:01.440><c> going</c><00:01:01.559><c> to</c><00:01:01.620><c> see</c><00:01:01.769><c> increased</c>

00:01:02.060 --> 00:01:02.070 align:start position:0%
you're going to see increased
 

00:01:02.070 --> 00:01:04.460 align:start position:0%
you're going to see increased
performance<00:01:02.329><c> for</c><00:01:03.329><c> memory</c><00:01:03.660><c> intensive</c><00:01:04.019><c> tasks</c>

00:01:04.460 --> 00:01:04.470 align:start position:0%
performance for memory intensive tasks
 

00:01:04.470 --> 00:01:05.690 align:start position:0%
performance for memory intensive tasks
now<00:01:04.620><c> i</c><00:01:04.680><c> will</c><00:01:04.890><c> say</c><00:01:05.040><c> that</c><00:01:05.190><c> all</c><00:01:05.309><c> those</c><00:01:05.400><c> things</c>

00:01:05.690 --> 00:01:05.700 align:start position:0%
now i will say that all those things
 

00:01:05.700 --> 00:01:07.490 align:start position:0%
now i will say that all those things
equal<00:01:06.060><c> your</c><00:01:06.720><c> programs</c><00:01:07.020><c> was</c><00:01:07.140><c> likely</c><00:01:07.350><c> going</c><00:01:07.440><c> to</c>

00:01:07.490 --> 00:01:07.500 align:start position:0%
equal your programs was likely going to
 

00:01:07.500 --> 00:01:09.890 align:start position:0%
equal your programs was likely going to
run<00:01:07.650><c> slower</c><00:01:07.980><c> in</c><00:01:08.160><c> 64-bit</c><00:01:08.850><c> but</c><00:01:09.360><c> all</c><00:01:09.720><c> those</c>

00:01:09.890 --> 00:01:09.900 align:start position:0%
run slower in 64-bit but all those
 

00:01:09.900 --> 00:01:11.600 align:start position:0%
run slower in 64-bit but all those
things<00:01:10.170><c> are</c><00:01:10.290><c> not</c><00:01:10.409><c> always</c><00:01:10.470><c> equal</c><00:01:10.890><c> here</c><00:01:11.220><c> one</c><00:01:11.520><c> of</c>

00:01:11.600 --> 00:01:11.610 align:start position:0%
things are not always equal here one of
 

00:01:11.610 --> 00:01:12.770 align:start position:0%
things are not always equal here one of
the<00:01:11.670><c> great</c><00:01:11.730><c> things</c><00:01:12.030><c> is</c><00:01:12.180><c> that</c><00:01:12.240><c> you</c><00:01:12.450><c> have</c><00:01:12.630><c> access</c>

00:01:12.770 --> 00:01:12.780 align:start position:0%
the great things is that you have access
 

00:01:12.780 --> 00:01:14.899 align:start position:0%
the great things is that you have access
to<00:01:12.930><c> a</c><00:01:13.080><c> lot</c><00:01:13.350><c> more</c><00:01:13.530><c> physical</c><00:01:13.980><c> memory</c><00:01:14.100><c> a</c><00:01:14.430><c> lot</c><00:01:14.790><c> more</c>

00:01:14.899 --> 00:01:14.909 align:start position:0%
to a lot more physical memory a lot more
 

00:01:14.909 --> 00:01:16.010 align:start position:0%
to a lot more physical memory a lot more
virtual<00:01:15.240><c> memory</c><00:01:15.390><c> and</c><00:01:15.600><c> we</c><00:01:15.660><c> think</c><00:01:15.780><c> there</c><00:01:15.960><c> are</c>

00:01:16.010 --> 00:01:16.020 align:start position:0%
virtual memory and we think there are
 

00:01:16.020 --> 00:01:18.230 align:start position:0%
virtual memory and we think there are
some<00:01:16.140><c> benefits</c><00:01:16.290><c> of</c><00:01:16.620><c> that</c><00:01:16.670><c> and</c><00:01:17.670><c> obviously</c><00:01:17.790><c> one</c>

00:01:18.230 --> 00:01:18.240 align:start position:0%
some benefits of that and obviously one
 

00:01:18.240 --> 00:01:19.610 align:start position:0%
some benefits of that and obviously one
of<00:01:18.270><c> those</c><00:01:18.450><c> is</c><00:01:18.600><c> that</c><00:01:18.810><c> physical</c><00:01:19.350><c> memory</c><00:01:19.470><c> is</c>

00:01:19.610 --> 00:01:19.620 align:start position:0%
of those is that physical memory is
 

00:01:19.620 --> 00:01:21.620 align:start position:0%
of those is that physical memory is
considerably<00:01:20.220><c> faster</c><00:01:20.430><c> than</c><00:01:20.790><c> disk</c><00:01:21.030><c> I</c><00:01:21.270><c> think</c>

00:01:21.620 --> 00:01:21.630 align:start position:0%
considerably faster than disk I think
 

00:01:21.630 --> 00:01:23.120 align:start position:0%
considerably faster than disk I think
the<00:01:21.720><c> other</c><00:01:21.870><c> one</c><00:01:22.020><c> is</c><00:01:22.080><c> that</c><00:01:22.320><c> you</c><00:01:22.380><c> can</c><00:01:22.620><c> be</c><00:01:22.710><c> lazier</c>

00:01:23.120 --> 00:01:23.130 align:start position:0%
the other one is that you can be lazier
 

00:01:23.130 --> 00:01:24.680 align:start position:0%
the other one is that you can be lazier
programmers<00:01:23.670><c> in</c><00:01:23.790><c> some</c><00:01:23.970><c> instances</c><00:01:24.420><c> because</c>

00:01:24.680 --> 00:01:24.690 align:start position:0%
programmers in some instances because
 

00:01:24.690 --> 00:01:26.210 align:start position:0%
programmers in some instances because
it's<00:01:25.350><c> gonna</c><00:01:25.440><c> be</c><00:01:25.560><c> a</c><00:01:25.590><c> lot</c><00:01:25.710><c> easier</c><00:01:25.740><c> to</c><00:01:26.100><c> access</c>

00:01:26.210 --> 00:01:26.220 align:start position:0%
it's gonna be a lot easier to access
 

00:01:26.220 --> 00:01:27.950 align:start position:0%
it's gonna be a lot easier to access
this<00:01:26.610><c> large</c><00:01:27.270><c> amount</c><00:01:27.540><c> of</c><00:01:27.570><c> them</c><00:01:27.690><c> around</c><00:01:27.810><c> the</c>

00:01:27.950 --> 00:01:27.960 align:start position:0%
this large amount of them around the
 

00:01:27.960 --> 00:01:34.690 align:start position:0%
this large amount of them around the
system<00:01:31.730><c> our</c><00:01:32.730><c> 64-bit</c><00:01:33.330><c> goals</c><00:01:33.540><c> are</c><00:01:33.900><c> quite</c><00:01:34.110><c> simple</c>

00:01:34.690 --> 00:01:34.700 align:start position:0%
system our 64-bit goals are quite simple
 

00:01:34.700 --> 00:01:37.610 align:start position:0%
system our 64-bit goals are quite simple
we<00:01:35.700><c> want</c><00:01:35.940><c> to</c><00:01:36.000><c> provide</c><00:01:36.270><c> the</c><00:01:36.810><c> key</c><00:01:37.050><c> benefits</c><00:01:37.200><c> of</c>

00:01:37.610 --> 00:01:37.620 align:start position:0%
we want to provide the key benefits of
 

00:01:37.620 --> 00:01:40.130 align:start position:0%
we want to provide the key benefits of
64-bit<00:01:38.310><c> computing</c><00:01:38.730><c> for</c><00:01:39.510><c> the</c><00:01:39.630><c> people</c><00:01:39.900><c> who</c><00:01:39.990><c> need</c>

00:01:40.130 --> 00:01:40.140 align:start position:0%
64-bit computing for the people who need
 

00:01:40.140 --> 00:01:42.560 align:start position:0%
64-bit computing for the people who need
it<00:01:40.260><c> the</c><00:01:40.290><c> most</c><00:01:40.760><c> while</c><00:01:41.760><c> making</c><00:01:41.970><c> sure</c><00:01:42.240><c> that</c><00:01:42.450><c> we</c>

00:01:42.560 --> 00:01:42.570 align:start position:0%
it the most while making sure that we
 

00:01:42.570 --> 00:01:45.200 align:start position:0%
it the most while making sure that we
actually<00:01:42.780><c> don't</c><00:01:43.200><c> break</c><00:01:43.620><c> any</c><00:01:43.920><c> of</c><00:01:44.160><c> these</c><00:01:44.370><c> 12,000</c>

00:01:45.200 --> 00:01:45.210 align:start position:0%
actually don't break any of these 12,000
 

00:01:45.210 --> 00:01:46.490 align:start position:0%
actually don't break any of these 12,000
native<00:01:45.420><c> applications</c><00:01:45.930><c> that</c><00:01:46.050><c> we</c><00:01:46.140><c> have</c><00:01:46.320><c> today</c>

00:01:46.490 --> 00:01:46.500 align:start position:0%
native applications that we have today
 

00:01:46.500 --> 00:01:48.590 align:start position:0%
native applications that we have today
and<00:01:47.160><c> we</c><00:01:47.250><c> talk</c><00:01:47.400><c> a</c><00:01:47.430><c> lot</c><00:01:47.550><c> about</c><00:01:47.700><c> this</c><00:01:48.060><c> internally</c>

00:01:48.590 --> 00:01:48.600 align:start position:0%
and we talk a lot about this internally
 

00:01:48.600 --> 00:01:49.880 align:start position:0%
and we talk a lot about this internally
as<00:01:48.690><c> a</c><00:01:48.720><c> goal</c><00:01:48.990><c> we</c><00:01:49.230><c> want</c><00:01:49.410><c> to</c><00:01:49.470><c> make</c><00:01:49.500><c> sure</c><00:01:49.590><c> the</c>

00:01:49.880 --> 00:01:49.890 align:start position:0%
as a goal we want to make sure the
 

00:01:49.890 --> 00:01:51.290 align:start position:0%
as a goal we want to make sure the
people<00:01:50.160><c> in</c><00:01:50.280><c> scientific</c><00:01:50.310><c> computing</c><00:01:50.820><c> and</c>

00:01:51.290 --> 00:01:51.300 align:start position:0%
people in scientific computing and
 

00:01:51.300 --> 00:01:53.030 align:start position:0%
people in scientific computing and
high-performance<00:01:51.810><c> computing</c><00:01:52.230><c> and</c><00:01:52.410><c> media</c>

00:01:53.030 --> 00:01:53.040 align:start position:0%
high-performance computing and media
 

00:01:53.040 --> 00:01:55.310 align:start position:0%
high-performance computing and media
have<00:01:53.280><c> access</c><00:01:53.730><c> to</c><00:01:53.940><c> these</c><00:01:54.030><c> benefits</c><00:01:54.450><c> of</c><00:01:54.600><c> 64</c><00:01:55.050><c> bit</c>

00:01:55.310 --> 00:01:55.320 align:start position:0%
have access to these benefits of 64 bit
 

00:01:55.320 --> 00:01:57.320 align:start position:0%
have access to these benefits of 64 bit
but<00:01:55.860><c> we</c><00:01:55.950><c> don't</c><00:01:56.160><c> want</c><00:01:56.400><c> educational</c><00:01:57.150><c> software</c>

00:01:57.320 --> 00:01:57.330 align:start position:0%
but we don't want educational software
 

00:01:57.330 --> 00:01:58.970 align:start position:0%
but we don't want educational software
vendors<00:01:57.870><c> with</c><00:01:58.050><c> very</c><00:01:58.200><c> simple</c><00:01:58.440><c> titles</c><00:01:58.830><c> for</c>

00:01:58.970 --> 00:01:58.980 align:start position:0%
vendors with very simple titles for
 

00:01:58.980 --> 00:02:00.440 align:start position:0%
vendors with very simple titles for
children<00:01:59.310><c> to</c><00:01:59.430><c> have</c><00:01:59.550><c> to</c><00:01:59.760><c> actually</c><00:01:59.910><c> redo</c>

00:02:00.440 --> 00:02:00.450 align:start position:0%
children to have to actually redo
 

00:02:00.450 --> 00:02:02.660 align:start position:0%
children to have to actually redo
everything<00:02:00.800><c> because</c><00:02:01.800><c> we've</c><00:02:01.980><c> decided</c><00:02:02.310><c> to</c><00:02:02.580><c> move</c>

00:02:02.660 --> 00:02:02.670 align:start position:0%
everything because we've decided to move
 

00:02:02.670 --> 00:02:04.910 align:start position:0%
everything because we've decided to move
into<00:02:02.820><c> the</c><00:02:02.940><c> 64-bit</c><00:02:03.510><c> world</c><00:02:03.720><c> so</c><00:02:04.290><c> our</c><00:02:04.620><c> objective</c>

00:02:04.910 --> 00:02:04.920 align:start position:0%
into the 64-bit world so our objective
 

00:02:04.920 --> 00:02:07.160 align:start position:0%
into the 64-bit world so our objective
is<00:02:05.460><c> one</c><00:02:05.730><c> that</c><00:02:06.270><c> really</c><00:02:06.540><c> stresses</c>

00:02:07.160 --> 00:02:07.170 align:start position:0%
is one that really stresses
 

00:02:07.170 --> 00:02:08.630 align:start position:0%
is one that really stresses
compatibility<00:02:07.860><c> and</c><00:02:07.980><c> performance</c><00:02:08.429><c> for</c><00:02:08.580><c> the</c>

00:02:08.630 --> 00:02:08.640 align:start position:0%
compatibility and performance for the
 

00:02:08.640 --> 00:02:10.070 align:start position:0%
compatibility and performance for the
native<00:02:08.879><c> applications</c><00:02:09.360><c> on</c><00:02:09.479><c> the</c><00:02:09.569><c> system</c><00:02:09.869><c> and</c>

00:02:10.070 --> 00:02:10.080 align:start position:0%
native applications on the system and
 

00:02:10.080 --> 00:02:12.410 align:start position:0%
native applications on the system and
64-bit<00:02:10.890><c> is</c><00:02:11.009><c> an</c><00:02:11.129><c> addition</c><00:02:11.519><c> and</c><00:02:11.700><c> you</c><00:02:12.030><c> learn</c><00:02:12.269><c> more</c>

00:02:12.410 --> 00:02:12.420 align:start position:0%
64-bit is an addition and you learn more
 

00:02:12.420 --> 00:02:14.750 align:start position:0%
64-bit is an addition and you learn more
today<00:02:12.569><c> about</c><00:02:12.780><c> why</c><00:02:13.260><c> we're</c><00:02:13.500><c> able</c><00:02:13.650><c> to</c><00:02:13.800><c> do</c><00:02:13.950><c> that</c><00:02:14.190><c> in</c>

00:02:14.750 --> 00:02:14.760 align:start position:0%
today about why we're able to do that in
 

00:02:14.760 --> 00:02:16.490 align:start position:0%
today about why we're able to do that in
our<00:02:14.910><c> 64-bit</c><00:02:15.510><c> architecture</c><00:02:15.989><c> but</c><00:02:16.140><c> i</c><00:02:16.170><c> think</c><00:02:16.379><c> it's</c>

00:02:16.490 --> 00:02:16.500 align:start position:0%
our 64-bit architecture but i think it's
 

00:02:16.500 --> 00:02:18.140 align:start position:0%
our 64-bit architecture but i think it's
a<00:02:16.560><c> unique</c><00:02:16.830><c> advantage</c><00:02:17.340><c> that</c><00:02:17.519><c> apple</c><00:02:17.819><c> has</c><00:02:17.849><c> with</c>

00:02:18.140 --> 00:02:18.150 align:start position:0%
a unique advantage that apple has with
 

00:02:18.150 --> 00:02:21.440 align:start position:0%
a unique advantage that apple has with
mac<00:02:18.330><c> OS</c><00:02:18.360><c> 10</c><00:02:19.100><c> we</c><00:02:20.100><c> started</c><00:02:20.430><c> the</c><00:02:20.550><c> 64-bit</c><00:02:21.180><c> journey</c>

00:02:21.440 --> 00:02:21.450 align:start position:0%
mac OS 10 we started the 64-bit journey
 

00:02:21.450 --> 00:02:24.050 align:start position:0%
mac OS 10 we started the 64-bit journey
already<00:02:21.840><c> with</c><00:02:22.050><c> panther</c><00:02:22.520><c> we</c><00:02:23.520><c> had</c><00:02:23.760><c> actually</c>

00:02:24.050 --> 00:02:24.060 align:start position:0%
already with panther we had actually
 

00:02:24.060 --> 00:02:24.800 align:start position:0%
already with panther we had actually
system

00:02:24.800 --> 00:02:24.810 align:start position:0%
system
 

00:02:24.810 --> 00:02:28.100 align:start position:0%
system
access<00:02:25.410><c> to</c><00:02:26.239><c> greater</c><00:02:27.239><c> than</c><00:02:27.330><c> 4</c><00:02:27.569><c> gigabytes</c><00:02:27.959><c> of</c>

00:02:28.100 --> 00:02:28.110 align:start position:0%
access to greater than 4 gigabytes of
 

00:02:28.110 --> 00:02:30.440 align:start position:0%
access to greater than 4 gigabytes of
physical<00:02:28.500><c> memory</c><00:02:28.650><c> in</c><00:02:28.980><c> a</c><00:02:29.099><c> machine</c><00:02:29.250><c> but</c><00:02:30.120><c> all</c><00:02:30.330><c> of</c>

00:02:30.440 --> 00:02:30.450 align:start position:0%
physical memory in a machine but all of
 

00:02:30.450 --> 00:02:31.850 align:start position:0%
physical memory in a machine but all of
the<00:02:30.569><c> applications</c><00:02:30.690><c> that</c><00:02:31.290><c> you</c><00:02:31.530><c> could</c><00:02:31.680><c> write</c>

00:02:31.850 --> 00:02:31.860 align:start position:0%
the applications that you could write
 

00:02:31.860 --> 00:02:34.550 align:start position:0%
the applications that you could write
were<00:02:32.010><c> 32</c><00:02:32.430><c> bit</c><00:02:32.670><c> all</c><00:02:33.360><c> of</c><00:02:33.569><c> the</c><00:02:33.690><c> user</c><00:02:33.870><c> texts</c><00:02:34.440><c> were</c>

00:02:34.550 --> 00:02:34.560 align:start position:0%
were 32 bit all of the user texts were
 

00:02:34.560 --> 00:02:36.320 align:start position:0%
were 32 bit all of the user texts were
32<00:02:34.980><c> bit</c><00:02:35.160><c> and</c><00:02:35.280><c> that's</c><00:02:35.459><c> the</c><00:02:35.610><c> address</c><00:02:35.730><c> space</c><00:02:36.090><c> you</c>

00:02:36.320 --> 00:02:36.330 align:start position:0%
32 bit and that's the address space you
 

00:02:36.330 --> 00:02:38.660 align:start position:0%
32 bit and that's the address space you
had<00:02:36.480><c> as</c><00:02:36.599><c> developers</c><00:02:37.140><c> all</c><00:02:38.040><c> applications</c>

00:02:38.660 --> 00:02:38.670 align:start position:0%
had as developers all applications
 

00:02:38.670 --> 00:02:40.960 align:start position:0%
had as developers all applications
however<00:02:38.790><c> couldn't</c><00:02:39.450><c> answer</c><00:02:39.870><c> actually</c><00:02:40.680><c> use</c>

00:02:40.960 --> 00:02:40.970 align:start position:0%
however couldn't answer actually use
 

00:02:40.970 --> 00:02:43.009 align:start position:0%
however couldn't answer actually use
64-bit<00:02:41.970><c> hardware</c><00:02:42.300><c> math</c><00:02:42.450><c> functions</c><00:02:42.900><c> there</c>

00:02:43.009 --> 00:02:43.019 align:start position:0%
64-bit hardware math functions there
 

00:02:43.019 --> 00:02:44.930 align:start position:0%
64-bit hardware math functions there
were<00:02:43.080><c> 64-bit</c><00:02:43.650><c> registers</c><00:02:43.680><c> you</c><00:02:44.489><c> did</c><00:02:44.640><c> have</c><00:02:44.790><c> to</c>

00:02:44.930 --> 00:02:44.940 align:start position:0%
were 64-bit registers you did have to
 

00:02:44.940 --> 00:02:47.540 align:start position:0%
were 64-bit registers you did have to
recompile<00:02:45.360><c> your</c><00:02:45.890><c> binaries</c><00:02:46.890><c> to</c><00:02:47.040><c> actually</c><00:02:47.370><c> take</c>

00:02:47.540 --> 00:02:47.550 align:start position:0%
recompile your binaries to actually take
 

00:02:47.550 --> 00:02:49.640 align:start position:0%
recompile your binaries to actually take
specific<00:02:47.760><c> advantage</c><00:02:48.420><c> of</c><00:02:48.630><c> the</c><00:02:48.870><c> powerpc</c><00:02:49.319><c> g5</c>

00:02:49.640 --> 00:02:49.650 align:start position:0%
specific advantage of the powerpc g5
 

00:02:49.650 --> 00:02:52.100 align:start position:0%
specific advantage of the powerpc g5
architecture<00:02:50.310><c> but</c><00:02:50.790><c> those</c><00:02:51.180><c> were</c><00:02:51.599><c> features</c><00:02:51.989><c> you</c>

00:02:52.100 --> 00:02:52.110 align:start position:0%
architecture but those were features you
 

00:02:52.110 --> 00:02:53.150 align:start position:0%
architecture but those were features you
could<00:02:52.260><c> get</c><00:02:52.410><c> and</c><00:02:52.620><c> once</c><00:02:52.739><c> again</c><00:02:52.890><c> this</c><00:02:53.099><c> is</c>

00:02:53.150 --> 00:02:53.160 align:start position:0%
could get and once again this is
 

00:02:53.160 --> 00:02:55.190 align:start position:0%
could get and once again this is
something<00:02:53.519><c> that</c><00:02:53.550><c> distinguishes</c><00:02:54.200><c> apples</c>

00:02:55.190 --> 00:02:55.200 align:start position:0%
something that distinguishes apples
 

00:02:55.200 --> 00:02:56.690 align:start position:0%
something that distinguishes apples
64-bit<00:02:55.380><c> story</c><00:02:56.099><c> from</c><00:02:56.280><c> some</c><00:02:56.489><c> of</c><00:02:56.580><c> the</c><00:02:56.670><c> other</c>

00:02:56.690 --> 00:02:56.700 align:start position:0%
64-bit story from some of the other
 

00:02:56.700 --> 00:02:58.550 align:start position:0%
64-bit story from some of the other
platforms<00:02:57.390><c> is</c><00:02:57.540><c> that</c><00:02:57.750><c> many</c><00:02:58.319><c> of</c><00:02:58.530><c> the</c>

00:02:58.550 --> 00:02:58.560 align:start position:0%
platforms is that many of the
 

00:02:58.560 --> 00:03:00.650 align:start position:0%
platforms is that many of the
performance<00:02:59.310><c> benefits</c><00:02:59.700><c> of</c><00:02:59.790><c> 64-bit</c><00:03:00.239><c> computing</c>

00:03:00.650 --> 00:03:00.660 align:start position:0%
performance benefits of 64-bit computing
 

00:03:00.660 --> 00:03:02.600 align:start position:0%
performance benefits of 64-bit computing
are<00:03:00.989><c> actually</c><00:03:01.560><c> available</c><00:03:01.650><c> to</c><00:03:02.069><c> 32-bit</c>

00:03:02.600 --> 00:03:02.610 align:start position:0%
are actually available to 32-bit
 

00:03:02.610 --> 00:03:05.150 align:start position:0%
are actually available to 32-bit
applications<00:03:02.880><c> today</c><00:03:03.480><c> on</c><00:03:03.690><c> Mac</c><00:03:03.840><c> OS</c><00:03:03.989><c> 10</c><00:03:04.350><c> if</c>

00:03:05.150 --> 00:03:05.160 align:start position:0%
applications today on Mac OS 10 if
 

00:03:05.160 --> 00:03:07.340 align:start position:0%
applications today on Mac OS 10 if
you're<00:03:05.459><c> going</c><00:03:05.640><c> to</c><00:03:05.940><c> bother</c><00:03:06.780><c> to</c><00:03:07.049><c> actually</c><00:03:07.110><c> do</c>

00:03:07.340 --> 00:03:07.350 align:start position:0%
you're going to bother to actually do
 

00:03:07.350 --> 00:03:08.660 align:start position:0%
you're going to bother to actually do
the<00:03:07.440><c> recompile</c><00:03:07.890><c> and</c><00:03:07.950><c> optimization</c><00:03:08.549><c> for</c>

00:03:08.660 --> 00:03:08.670 align:start position:0%
the recompile and optimization for
 

00:03:08.670 --> 00:03:11.270 align:start position:0%
the recompile and optimization for
powerpc<00:03:08.940><c> g5</c><00:03:09.450><c> but</c><00:03:10.410><c> with</c><00:03:10.530><c> Tiger</c><00:03:10.860><c> we</c><00:03:10.980><c> actually</c>

00:03:11.270 --> 00:03:11.280 align:start position:0%
powerpc g5 but with Tiger we actually
 

00:03:11.280 --> 00:03:12.470 align:start position:0%
powerpc g5 but with Tiger we actually
want<00:03:11.400><c> to</c><00:03:11.459><c> take</c><00:03:11.610><c> it</c><00:03:11.730><c> to</c><00:03:11.819><c> another</c><00:03:11.910><c> level</c><00:03:12.090><c> and</c>

00:03:12.470 --> 00:03:12.480 align:start position:0%
want to take it to another level and
 

00:03:12.480 --> 00:03:14.839 align:start position:0%
want to take it to another level and
we're<00:03:13.080><c> actually</c><00:03:13.200><c> adding</c><00:03:13.500><c> 64-bit</c><00:03:14.280><c> addressing</c>

00:03:14.839 --> 00:03:14.849 align:start position:0%
we're actually adding 64-bit addressing
 

00:03:14.849 --> 00:03:17.870 align:start position:0%
we're actually adding 64-bit addressing
for<00:03:15.209><c> user</c><00:03:15.510><c> tasks</c><00:03:16.040><c> we're</c><00:03:17.040><c> going</c><00:03:17.160><c> to</c><00:03:17.220><c> focus</c><00:03:17.489><c> our</c>

00:03:17.870 --> 00:03:17.880 align:start position:0%
for user tasks we're going to focus our
 

00:03:17.880 --> 00:03:20.479 align:start position:0%
for user tasks we're going to focus our
64-bit<00:03:18.810><c> support</c><00:03:18.930><c> initially</c><00:03:19.530><c> on</c><00:03:20.040><c> the</c>

00:03:20.479 --> 00:03:20.489 align:start position:0%
64-bit support initially on the
 

00:03:20.489 --> 00:03:21.559 align:start position:0%
64-bit support initially on the
applications<00:03:21.000><c> that</c><00:03:21.060><c> we</c><00:03:21.239><c> think</c><00:03:21.450><c> are</c><00:03:21.510><c> most</c>

00:03:21.559 --> 00:03:21.569 align:start position:0%
applications that we think are most
 

00:03:21.569 --> 00:03:23.780 align:start position:0%
applications that we think are most
likely<00:03:22.080><c> and</c><00:03:22.470><c> most</c><00:03:22.680><c> merchant</c><00:03:23.370><c> ly</c><00:03:23.489><c> need</c><00:03:23.670><c> to</c>

00:03:23.780 --> 00:03:23.790 align:start position:0%
likely and most merchant ly need to
 

00:03:23.790 --> 00:03:26.330 align:start position:0%
likely and most merchant ly need to
benefit<00:03:24.180><c> from</c><00:03:24.209><c> 64-bit</c><00:03:25.080><c> addressing</c><00:03:25.530><c> and</c><00:03:25.650><c> so</c><00:03:25.830><c> we</c>

00:03:26.330 --> 00:03:26.340 align:start position:0%
benefit from 64-bit addressing and so we
 

00:03:26.340 --> 00:03:27.620 align:start position:0%
benefit from 64-bit addressing and so we
think<00:03:26.370><c> these</c><00:03:26.640><c> are</c><00:03:26.760><c> going</c><00:03:26.849><c> to</c><00:03:26.910><c> be</c><00:03:26.970><c> scientific</c>

00:03:27.620 --> 00:03:27.630 align:start position:0%
think these are going to be scientific
 

00:03:27.630 --> 00:03:29.509 align:start position:0%
think these are going to be scientific
applications<00:03:28.260><c> rendering</c><00:03:28.769><c> and</c><00:03:28.890><c> computational</c>

00:03:29.509 --> 00:03:29.519 align:start position:0%
applications rendering and computational
 

00:03:29.519 --> 00:03:31.670 align:start position:0%
applications rendering and computational
engines<00:03:29.850><c> and</c><00:03:30.000><c> server</c><00:03:30.209><c> applications</c><00:03:30.900><c> and</c><00:03:31.079><c> the</c>

00:03:31.670 --> 00:03:31.680 align:start position:0%
engines and server applications and the
 

00:03:31.680 --> 00:03:32.930 align:start position:0%
engines and server applications and the
infrastructure<00:03:32.130><c> we're</c><00:03:32.310><c> providing</c><00:03:32.549><c> to</c><00:03:32.790><c> do</c>

00:03:32.930 --> 00:03:32.940 align:start position:0%
infrastructure we're providing to do
 

00:03:32.940 --> 00:03:34.970 align:start position:0%
infrastructure we're providing to do
that<00:03:33.150><c> is</c><00:03:33.420><c> actually</c><00:03:33.810><c> based</c><00:03:33.989><c> on</c><00:03:34.260><c> a</c><00:03:34.320><c> 64-bit</c>

00:03:34.970 --> 00:03:34.980 align:start position:0%
that is actually based on a 64-bit
 

00:03:34.980 --> 00:03:37.520 align:start position:0%
that is actually based on a 64-bit
libsystem<00:03:35.640><c> and</c><00:03:35.820><c> 64-bit</c><00:03:36.750><c> capabilities</c><00:03:37.290><c> in</c><00:03:37.440><c> the</c>

00:03:37.520 --> 00:03:37.530 align:start position:0%
libsystem and 64-bit capabilities in the
 

00:03:37.530 --> 00:03:40.150 align:start position:0%
libsystem and 64-bit capabilities in the
compiler<00:03:38.269><c> so</c><00:03:39.269><c> that</c><00:03:39.420><c> actually</c><00:03:39.540><c> concludes</c>

00:03:40.150 --> 00:03:40.160 align:start position:0%
compiler so that actually concludes
 

00:03:40.160 --> 00:03:42.289 align:start position:0%
compiler so that actually concludes
briefly<00:03:41.160><c> and</c><00:03:41.310><c> mercifully</c><00:03:41.790><c> the</c><00:03:41.940><c> marketing</c>

00:03:42.289 --> 00:03:42.299 align:start position:0%
briefly and mercifully the marketing
 

00:03:42.299 --> 00:03:43.309 align:start position:0%
briefly and mercifully the marketing
portion<00:03:42.630><c> of</c><00:03:42.750><c> this</c><00:03:42.840><c> morning's</c><00:03:43.140><c> presentation</c>

00:03:43.309 --> 00:03:43.319 align:start position:0%
portion of this morning's presentation
 

00:03:43.319 --> 00:03:45.259 align:start position:0%
portion of this morning's presentation
and<00:03:44.190><c> I'm</c><00:03:44.280><c> actually</c><00:03:44.430><c> very</c><00:03:44.640><c> pleased</c><00:03:45.000><c> to</c><00:03:45.120><c> hand</c>

00:03:45.259 --> 00:03:45.269 align:start position:0%
and I'm actually very pleased to hand
 

00:03:45.269 --> 00:03:46.640 align:start position:0%
and I'm actually very pleased to hand
this<00:03:45.359><c> over</c><00:03:45.510><c> to</c><00:03:45.660><c> Nick</c><00:03:45.959><c> Clegg</c><00:03:46.290><c> who's</c><00:03:46.440><c> going</c><00:03:46.590><c> to</c>

00:03:46.640 --> 00:03:46.650 align:start position:0%
this over to Nick Clegg who's going to
 

00:03:46.650 --> 00:03:54.149 align:start position:0%
this over to Nick Clegg who's going to
talk<00:03:46.799><c> more</c><00:03:47.040><c> about</c><00:03:47.160><c> 64-bit</c><00:03:48.060><c> architectures</c>

00:03:54.149 --> 00:03:54.159 align:start position:0%
 
 

00:03:54.159 --> 00:03:56.530 align:start position:0%
 
Thank<00:03:55.159><c> You</c><00:03:55.250><c> Ellie</c><00:03:55.489><c> one</c><00:03:56.150><c> of</c><00:03:56.239><c> the</c><00:03:56.299><c> things</c><00:03:56.420><c> while</c>

00:03:56.530 --> 00:03:56.540 align:start position:0%
Thank You Ellie one of the things while
 

00:03:56.540 --> 00:03:59.470 align:start position:0%
Thank You Ellie one of the things while
I<00:03:56.599><c> mentioned</c><00:03:57.049><c> was</c><00:03:57.260><c> that</c><00:03:57.849><c> 64-bit</c><00:03:58.849><c> computation</c>

00:03:59.470 --> 00:03:59.480 align:start position:0%
I mentioned was that 64-bit computation
 

00:03:59.480 --> 00:04:01.390 align:start position:0%
I mentioned was that 64-bit computation
was<00:03:59.629><c> already</c><00:04:00.019><c> available</c><00:04:00.260><c> to</c><00:04:01.010><c> 32-bit</c>

00:04:01.390 --> 00:04:01.400 align:start position:0%
was already available to 32-bit
 

00:04:01.400 --> 00:04:03.100 align:start position:0%
was already available to 32-bit
applications<00:04:01.610><c> on</c><00:04:02.120><c> Panther</c><00:04:02.450><c> today</c><00:04:02.690><c> and</c><00:04:02.900><c> I</c><00:04:02.930><c> want</c>

00:04:03.100 --> 00:04:03.110 align:start position:0%
applications on Panther today and I want
 

00:04:03.110 --> 00:04:04.630 align:start position:0%
applications on Panther today and I want
to<00:04:03.170><c> start</c><00:04:03.560><c> off</c><00:04:03.650><c> by</c><00:04:03.830><c> going</c><00:04:04.010><c> in</c><00:04:04.190><c> detail</c><00:04:04.459><c> what</c>

00:04:04.630 --> 00:04:04.640 align:start position:0%
to start off by going in detail what
 

00:04:04.640 --> 00:04:07.420 align:start position:0%
to start off by going in detail what
that<00:04:04.790><c> means</c><00:04:05.500><c> when</c><00:04:06.500><c> you</c><00:04:06.560><c> think</c><00:04:06.739><c> about</c><00:04:06.799><c> 32-bit</c>

00:04:07.420 --> 00:04:07.430 align:start position:0%
that means when you think about 32-bit
 

00:04:07.430 --> 00:04:09.580 align:start position:0%
that means when you think about 32-bit
to<00:04:07.459><c> 64-bit</c><00:04:08.180><c> computing</c><00:04:08.900><c> there</c><00:04:09.470><c> are</c><00:04:09.530><c> actually</c>

00:04:09.580 --> 00:04:09.590 align:start position:0%
to 64-bit computing there are actually
 

00:04:09.590 --> 00:04:12.100 align:start position:0%
to 64-bit computing there are actually
four<00:04:09.950><c> aspects</c><00:04:10.430><c> of</c><00:04:10.519><c> that</c><00:04:10.579><c> so</c><00:04:11.480><c> the</c><00:04:11.569><c> first</c><00:04:11.780><c> is</c><00:04:11.930><c> you</c>

00:04:12.100 --> 00:04:12.110 align:start position:0%
four aspects of that so the first is you
 

00:04:12.110 --> 00:04:13.360 align:start position:0%
four aspects of that so the first is you
need<00:04:12.230><c> a</c><00:04:12.260><c> processor</c><00:04:12.739><c> with</c><00:04:12.860><c> 64-bit</c><00:04:13.250><c> registers</c>

00:04:13.360 --> 00:04:13.370 align:start position:0%
need a processor with 64-bit registers
 

00:04:13.370 --> 00:04:15.339 align:start position:0%
need a processor with 64-bit registers
the<00:04:13.940><c> second</c><00:04:14.720><c> you</c><00:04:14.780><c> need</c><00:04:14.900><c> to</c><00:04:14.989><c> be</c><00:04:15.110><c> able</c><00:04:15.200><c> to</c>

00:04:15.339 --> 00:04:15.349 align:start position:0%
the second you need to be able to
 

00:04:15.349 --> 00:04:17.140 align:start position:0%
the second you need to be able to
actually<00:04:15.530><c> load</c><00:04:16.130><c> and</c><00:04:16.310><c> store</c><00:04:16.400><c> the</c><00:04:16.639><c> 64-bit</c>

00:04:17.140 --> 00:04:17.150 align:start position:0%
actually load and store the 64-bit
 

00:04:17.150 --> 00:04:19.539 align:start position:0%
actually load and store the 64-bit
registers<00:04:17.350><c> to</c><00:04:18.350><c> main</c><00:04:18.530><c> memory</c><00:04:18.739><c> and</c><00:04:19.220><c> single</c>

00:04:19.539 --> 00:04:19.549 align:start position:0%
registers to main memory and single
 

00:04:19.549 --> 00:04:22.150 align:start position:0%
registers to main memory and single
instructions<00:04:20.060><c> next</c><00:04:20.959><c> came</c><00:04:21.079><c> to</c><00:04:21.199><c> 64</c><00:04:21.650><c> bit</c><00:04:21.799><c> ALU</c>

00:04:22.150 --> 00:04:22.160 align:start position:0%
instructions next came to 64 bit ALU
 

00:04:22.160 --> 00:04:24.370 align:start position:0%
instructions next came to 64 bit ALU
which<00:04:22.550><c> is</c><00:04:22.729><c> the</c><00:04:22.880><c> computation</c><00:04:23.660><c> unit</c><00:04:23.870><c> of</c><00:04:23.930><c> the</c><00:04:23.960><c> CPU</c>

00:04:24.370 --> 00:04:24.380 align:start position:0%
which is the computation unit of the CPU
 

00:04:24.380 --> 00:04:26.800 align:start position:0%
which is the computation unit of the CPU
so<00:04:25.250><c> that</c><00:04:25.370><c> you</c><00:04:25.460><c> can</c><00:04:25.550><c> do</c><00:04:25.669><c> 64-bit</c><00:04:26.240><c> multiplies</c><00:04:26.780><c> and</c>

00:04:26.800 --> 00:04:26.810 align:start position:0%
so that you can do 64-bit multiplies and
 

00:04:26.810 --> 00:04:29.590 align:start position:0%
so that you can do 64-bit multiplies and
chips<00:04:27.229><c> and</c><00:04:27.320><c> so</c><00:04:27.470><c> forth</c><00:04:27.710><c> and</c><00:04:27.970><c> lastly</c><00:04:28.970><c> if</c><00:04:29.270><c> you</c>

00:04:29.590 --> 00:04:29.600 align:start position:0%
chips and so forth and lastly if you
 

00:04:29.600 --> 00:04:30.850 align:start position:0%
chips and so forth and lastly if you
haven't<00:04:30.020><c> used</c><00:04:30.110><c> when</c><00:04:30.260><c> those</c><00:04:30.380><c> 64-bit</c><00:04:30.830><c> registers</c>

00:04:30.850 --> 00:04:30.860 align:start position:0%
haven't used when those 64-bit registers
 

00:04:30.860 --> 00:04:33.460 align:start position:0%
haven't used when those 64-bit registers
to<00:04:31.400><c> access</c><00:04:31.729><c> memory</c><00:04:32.090><c> that</c><00:04:32.840><c> you</c><00:04:32.870><c> actually</c><00:04:33.229><c> the</c>

00:04:33.460 --> 00:04:33.470 align:start position:0%
to access memory that you actually the
 

00:04:33.470 --> 00:04:34.930 align:start position:0%
to access memory that you actually the
colonel<00:04:33.889><c> has</c><00:04:33.979><c> set</c><00:04:34.130><c> up</c><00:04:34.220><c> to</c><00:04:34.310><c> 64-bit</c><00:04:34.789><c> address</c>

00:04:34.930 --> 00:04:34.940 align:start position:0%
colonel has set up to 64-bit address
 

00:04:34.940 --> 00:04:37.480 align:start position:0%
colonel has set up to 64-bit address
space<00:04:35.300><c> for</c><00:04:35.479><c> you</c><00:04:35.570><c> now</c><00:04:36.410><c> the</c><00:04:36.470><c> first</c><00:04:36.800><c> three</c><00:04:37.220><c> of</c>

00:04:37.480 --> 00:04:37.490 align:start position:0%
space for you now the first three of
 

00:04:37.490 --> 00:04:38.770 align:start position:0%
space for you now the first three of
those<00:04:37.610><c> four</c><00:04:37.669><c> points</c><00:04:38.330><c> are</c><00:04:38.419><c> already</c><00:04:38.720><c> available</c>

00:04:38.770 --> 00:04:38.780 align:start position:0%
those four points are already available
 

00:04:38.780 --> 00:04:41.650 align:start position:0%
those four points are already available
in<00:04:39.169><c> Panther</c><00:04:39.530><c> today</c><00:04:39.800><c> you</c><00:04:40.789><c> can</c><00:04:40.970><c> take</c><00:04:41.570><c> your</c>

00:04:41.650 --> 00:04:41.660 align:start position:0%
in Panther today you can take your
 

00:04:41.660 --> 00:04:43.689 align:start position:0%
in Panther today you can take your
32-bit<00:04:42.110><c> apps</c><00:04:42.289><c> and</c><00:04:42.560><c> take</c><00:04:42.949><c> advantage</c><00:04:43.070><c> of</c><00:04:43.520><c> the</c>

00:04:43.689 --> 00:04:43.699 align:start position:0%
32-bit apps and take advantage of the
 

00:04:43.699 --> 00:04:46.840 align:start position:0%
32-bit apps and take advantage of the
full<00:04:43.910><c> 64-bit</c><00:04:44.600><c> registers</c><00:04:45.100><c> you</c><00:04:46.100><c> can</c><00:04:46.250><c> do</c><00:04:46.340><c> 64-bit</c>

00:04:46.840 --> 00:04:46.850 align:start position:0%
full 64-bit registers you can do 64-bit
 

00:04:46.850 --> 00:04:47.890 align:start position:0%
full 64-bit registers you can do 64-bit
loads<00:04:47.030><c> and</c><00:04:47.120><c> stores</c><00:04:47.300><c> in</c><00:04:47.479><c> you</c><00:04:47.539><c> have</c><00:04:47.630><c> to</c><00:04:47.690><c> make</c>

00:04:47.890 --> 00:04:47.900 align:start position:0%
loads and stores in you have to make
 

00:04:47.900 --> 00:04:50.170 align:start position:0%
loads and stores in you have to make
them<00:04:48.020><c> move</c><00:04:48.770><c> move</c><00:04:48.949><c> faster</c><00:04:49.340><c> and</c><00:04:49.490><c> you</c><00:04:49.940><c> can</c><00:04:50.060><c> take</c>

00:04:50.170 --> 00:04:50.180 align:start position:0%
them move move faster and you can take
 

00:04:50.180 --> 00:04:52.240 align:start position:0%
them move move faster and you can take
advantage<00:04:50.270><c> of</c><00:04:50.570><c> 64</c><00:04:51.350><c> bit</c><00:04:51.470><c> ALU</c><00:04:51.740><c> if</c><00:04:52.070><c> your</c>

00:04:52.240 --> 00:04:52.250 align:start position:0%
advantage of 64 bit ALU if your
 

00:04:52.250 --> 00:04:55.870 align:start position:0%
advantage of 64 bit ALU if your
application<00:04:52.880><c> happens</c><00:04:53.810><c> to</c><00:04:53.990><c> be</c><00:04:54.250><c> 64-bit</c><00:04:55.250><c> integer</c>

00:04:55.870 --> 00:04:55.880 align:start position:0%
application happens to be 64-bit integer
 

00:04:55.880 --> 00:04:57.760 align:start position:0%
application happens to be 64-bit integer
computation<00:04:56.510><c> intensive</c><00:04:56.930><c> you</c><00:04:57.470><c> can</c><00:04:57.620><c> do</c><00:04:57.740><c> all</c>

00:04:57.760 --> 00:04:57.770 align:start position:0%
computation intensive you can do all
 

00:04:57.770 --> 00:04:59.620 align:start position:0%
computation intensive you can do all
those<00:04:58.039><c> things</c><00:04:58.099><c> but</c><00:04:58.550><c> not</c><00:04:58.970><c> have</c><00:04:59.210><c> six</c><00:04:59.389><c> to</c><00:04:59.479><c> go</c><00:04:59.570><c> to</c>

00:04:59.620 --> 00:04:59.630 align:start position:0%
those things but not have six to go to
 

00:04:59.630 --> 00:05:00.940 align:start position:0%
those things but not have six to go to
address<00:04:59.930><c> space</c><00:05:00.139><c> and</c><00:05:00.380><c> get</c><00:05:00.470><c> a</c><00:05:00.500><c> performance</c>

00:05:00.940 --> 00:05:00.950 align:start position:0%
address space and get a performance
 

00:05:00.950 --> 00:05:03.040 align:start position:0%
address space and get a performance
boost<00:05:01.300><c> another</c><00:05:02.300><c> way</c><00:05:02.450><c> of</c><00:05:02.479><c> looking</c><00:05:02.570><c> at</c><00:05:02.840><c> this</c><00:05:02.990><c> is</c>

00:05:03.040 --> 00:05:03.050 align:start position:0%
boost another way of looking at this is
 

00:05:03.050 --> 00:05:05.650 align:start position:0%
boost another way of looking at this is
all<00:05:03.500><c> we're</c><00:05:03.830><c> introducing</c><00:05:04.190><c> in</c><00:05:04.340><c> Tiger</c><00:05:04.669><c> is</c><00:05:05.030><c> 64-bit</c>

00:05:05.650 --> 00:05:05.660 align:start position:0%
all we're introducing in Tiger is 64-bit
 

00:05:05.660 --> 00:05:10.060 align:start position:0%
all we're introducing in Tiger is 64-bit
address<00:05:05.840><c> spaces</c><00:05:08.320><c> so</c><00:05:09.320><c> next</c><00:05:09.470><c> I'd</c><00:05:09.650><c> like</c><00:05:09.680><c> to</c><00:05:09.860><c> talk</c>

00:05:10.060 --> 00:05:10.070 align:start position:0%
address spaces so next I'd like to talk
 

00:05:10.070 --> 00:05:13.120 align:start position:0%
address spaces so next I'd like to talk
a<00:05:10.130><c> bit</c><00:05:10.550><c> about</c><00:05:10.669><c> how</c><00:05:11.450><c> 64-bit</c><00:05:12.440><c> was</c><00:05:12.620><c> implemented</c>

00:05:13.120 --> 00:05:13.130 align:start position:0%
a bit about how 64-bit was implemented
 

00:05:13.130 --> 00:05:14.680 align:start position:0%
a bit about how 64-bit was implemented
in<00:05:13.160><c> PowerPC</c><00:05:13.729><c> because</c><00:05:14.030><c> it</c><00:05:14.150><c> is</c><00:05:14.240><c> a</c><00:05:14.270><c> lot</c><00:05:14.510><c> different</c>

00:05:14.680 --> 00:05:14.690 align:start position:0%
in PowerPC because it is a lot different
 

00:05:14.690 --> 00:05:17.290 align:start position:0%
in PowerPC because it is a lot different
than<00:05:14.990><c> how</c><00:05:15.650><c> some</c><00:05:15.889><c> other</c><00:05:16.099><c> microprocessors</c><00:05:16.700><c> have</c>

00:05:17.290 --> 00:05:17.300 align:start position:0%
than how some other microprocessors have
 

00:05:17.300 --> 00:05:21.540 align:start position:0%
than how some other microprocessors have
added<00:05:18.110><c> 64-bit</c><00:05:18.770><c> fitness</c><00:05:19.310><c> to</c><00:05:20.240><c> their</c><00:05:20.389><c> wine</c>

00:05:21.540 --> 00:05:21.550 align:start position:0%
added 64-bit fitness to their wine
 

00:05:21.550 --> 00:05:23.260 align:start position:0%
added 64-bit fitness to their wine
PowerPC<00:05:22.550><c> is</c><00:05:22.639><c> kind</c><00:05:22.789><c> of</c><00:05:22.880><c> unique</c><00:05:22.970><c> in</c><00:05:23.240><c> that</c>

00:05:23.260 --> 00:05:23.270 align:start position:0%
PowerPC is kind of unique in that
 

00:05:23.270 --> 00:05:26.439 align:start position:0%
PowerPC is kind of unique in that
PowerPC<00:05:24.080><c> started</c><00:05:24.500><c> out</c><00:05:24.710><c> as</c><00:05:25.010><c> a</c><00:05:25.820><c> 64-bit</c>

00:05:26.439 --> 00:05:26.449 align:start position:0%
PowerPC started out as a 64-bit
 

00:05:26.449 --> 00:05:28.719 align:start position:0%
PowerPC started out as a 64-bit
architecture<00:05:26.990><c> way</c><00:05:27.650><c> over</c><00:05:27.919><c> 15</c><00:05:28.430><c> years</c><00:05:28.550><c> ago</c>

00:05:28.719 --> 00:05:28.729 align:start position:0%
architecture way over 15 years ago
 

00:05:28.729 --> 00:05:31.570 align:start position:0%
architecture way over 15 years ago
whenever<00:05:28.970><c> started</c><00:05:29.740><c> only</c><00:05:30.740><c> now</c><00:05:30.889><c> finally</c><00:05:31.400><c> seeing</c>

00:05:31.570 --> 00:05:31.580 align:start position:0%
whenever started only now finally seeing
 

00:05:31.580 --> 00:05:34.469 align:start position:0%
whenever started only now finally seeing
the<00:05:31.639><c> fruition</c><00:05:31.880><c> of</c><00:05:32.210><c> the</c><00:05:32.270><c> full</c><00:05:32.479><c> 64-bit</c><00:05:32.780><c> net</c>

00:05:34.469 --> 00:05:34.479 align:start position:0%
the fruition of the full 64-bit net
 

00:05:34.479 --> 00:05:36.550 align:start position:0%
the fruition of the full 64-bit net
another<00:05:35.479><c> interesting</c><00:05:35.690><c> thing</c><00:05:35.930><c> about</c><00:05:36.080><c> it</c><00:05:36.410><c> is</c>

00:05:36.550 --> 00:05:36.560 align:start position:0%
another interesting thing about it is
 

00:05:36.560 --> 00:05:38.320 align:start position:0%
another interesting thing about it is
that<00:05:36.590><c> there</c><00:05:36.830><c> is</c><00:05:36.979><c> no</c><00:05:37.010><c> mode</c><00:05:37.610><c> some</c><00:05:38.210><c> other</c>

00:05:38.320 --> 00:05:38.330 align:start position:0%
that there is no mode some other
 

00:05:38.330 --> 00:05:40.240 align:start position:0%
that there is no mode some other
processors<00:05:38.900><c> you</c><00:05:39.020><c> have</c><00:05:39.139><c> a</c><00:05:39.169><c> 32-bit</c><00:05:39.740><c> mode</c><00:05:39.919><c> and</c><00:05:40.160><c> a</c>

00:05:40.240 --> 00:05:40.250 align:start position:0%
processors you have a 32-bit mode and a
 

00:05:40.250 --> 00:05:41.710 align:start position:0%
processors you have a 32-bit mode and a
64-bit<00:05:40.849><c> mode</c><00:05:41.000><c> and</c><00:05:41.300><c> when</c><00:05:41.419><c> you're</c><00:05:41.539><c> in</c><00:05:41.630><c> those</c>

00:05:41.710 --> 00:05:41.720 align:start position:0%
64-bit mode and when you're in those
 

00:05:41.720 --> 00:05:42.879 align:start position:0%
64-bit mode and when you're in those
different<00:05:42.020><c> modes</c><00:05:42.169><c> you</c><00:05:42.320><c> have</c><00:05:42.440><c> differences</c><00:05:42.830><c> of</c>

00:05:42.879 --> 00:05:42.889 align:start position:0%
different modes you have differences of
 

00:05:42.889 --> 00:05:44.050 align:start position:0%
different modes you have differences of
registers<00:05:43.340><c> and</c><00:05:43.520><c> differences</c><00:05:43.849><c> of</c>

00:05:44.050 --> 00:05:44.060 align:start position:0%
registers and differences of
 

00:05:44.060 --> 00:05:45.610 align:start position:0%
registers and differences of
instructions<00:05:44.539><c> it's</c><00:05:44.780><c> almost</c><00:05:44.930><c> as</c><00:05:45.139><c> if</c><00:05:45.169><c> it's</c><00:05:45.410><c> two</c>

00:05:45.610 --> 00:05:45.620 align:start position:0%
instructions it's almost as if it's two
 

00:05:45.620 --> 00:05:47.589 align:start position:0%
instructions it's almost as if it's two
processors<00:05:46.130><c> merged</c><00:05:46.490><c> into</c><00:05:46.669><c> one</c><00:05:46.789><c> and</c><00:05:47.180><c> there's</c>

00:05:47.589 --> 00:05:47.599 align:start position:0%
processors merged into one and there's
 

00:05:47.599 --> 00:05:48.969 align:start position:0%
processors merged into one and there's
some<00:05:47.750><c> big</c><00:05:47.930><c> squish</c><00:05:48.229><c> as</c><00:05:48.410><c> to</c><00:05:48.560><c> which</c><00:05:48.680><c> way</c><00:05:48.830><c> you're</c>

00:05:48.969 --> 00:05:48.979 align:start position:0%
some big squish as to which way you're
 

00:05:48.979 --> 00:05:51.490 align:start position:0%
some big squish as to which way you're
doing<00:05:49.479><c> one</c><00:05:50.479><c> of</c><00:05:50.539><c> the</c><00:05:50.630><c> downfalls</c><00:05:50.780><c> of</c><00:05:51.110><c> that</c><00:05:51.289><c> is</c>

00:05:51.490 --> 00:05:51.500 align:start position:0%
doing one of the downfalls of that is
 

00:05:51.500 --> 00:05:53.890 align:start position:0%
doing one of the downfalls of that is
that<00:05:51.740><c> in</c><00:05:52.039><c> the</c><00:05:52.520><c> implementation</c><00:05:53.210><c> of</c><00:05:53.389><c> a</c><00:05:53.690><c> process</c>

00:05:53.890 --> 00:05:53.900 align:start position:0%
that in the implementation of a process
 

00:05:53.900 --> 00:05:55.900 align:start position:0%
that in the implementation of a process
that<00:05:54.080><c> model</c><00:05:54.560><c> the</c><00:05:54.979><c> implementers</c><00:05:55.520><c> have</c><00:05:55.669><c> to</c><00:05:55.789><c> make</c>

00:05:55.900 --> 00:05:55.910 align:start position:0%
that model the implementers have to make
 

00:05:55.910 --> 00:05:57.670 align:start position:0%
that model the implementers have to make
the<00:05:56.090><c> decision</c><00:05:56.120><c> of</c><00:05:56.750><c> how</c><00:05:56.990><c> to</c><00:05:57.050><c> micro</c><00:05:57.380><c> crow</c><00:05:57.500><c> each</c>

00:05:57.670 --> 00:05:57.680 align:start position:0%
the decision of how to micro crow each
 

00:05:57.680 --> 00:05:59.379 align:start position:0%
the decision of how to micro crow each
of<00:05:57.800><c> those</c><00:05:57.889><c> instructions</c><00:05:58.699><c> and</c><00:05:58.849><c> they</c><00:05:58.970><c> tend</c><00:05:59.240><c> to</c>

00:05:59.379 --> 00:05:59.389 align:start position:0%
of those instructions and they tend to
 

00:05:59.389 --> 00:06:00.760 align:start position:0%
of those instructions and they tend to
make<00:05:59.479><c> the</c><00:05:59.599><c> 64-bit</c><00:06:00.110><c> one</c><00:06:00.229><c> faster</c><00:06:00.560><c> and</c><00:06:00.740><c> the</c>

00:06:00.760 --> 00:06:00.770 align:start position:0%
make the 64-bit one faster and the
 

00:06:00.770 --> 00:06:03.909 align:start position:0%
make the 64-bit one faster and the
32-bit<00:06:01.219><c> at</c><00:06:01.490><c> the</c><00:06:01.640><c> cost</c><00:06:01.849><c> of</c><00:06:02.000><c> the</c><00:06:02.090><c> 32-bit</c><00:06:02.919><c> PowerPC</c>

00:06:03.909 --> 00:06:03.919 align:start position:0%
32-bit at the cost of the 32-bit PowerPC
 

00:06:03.919 --> 00:06:06.219 align:start position:0%
32-bit at the cost of the 32-bit PowerPC
does<00:06:04.070><c> not</c><00:06:04.219><c> have</c><00:06:04.370><c> a</c><00:06:04.400><c> problem</c><00:06:04.729><c> there</c><00:06:05.300><c> is</c><00:06:05.510><c> no</c><00:06:05.840><c> mode</c>

00:06:06.219 --> 00:06:06.229 align:start position:0%
does not have a problem there is no mode
 

00:06:06.229 --> 00:06:06.910 align:start position:0%
does not have a problem there is no mode
on

00:06:06.910 --> 00:06:06.920 align:start position:0%
on
 

00:06:06.920 --> 00:06:09.940 align:start position:0%
on
RPC<00:06:07.280><c> between</c><00:06:07.550><c> 64-bit</c><00:06:08.270><c> and</c><00:06:08.420><c> 32-bit</c><00:06:08.480><c> it</c><00:06:09.320><c> is</c>

00:06:09.940 --> 00:06:09.950 align:start position:0%
RPC between 64-bit and 32-bit it is
 

00:06:09.950 --> 00:06:12.280 align:start position:0%
RPC between 64-bit and 32-bit it is
completely<00:06:10.340><c> a</c><00:06:10.460><c> software</c><00:06:10.940><c> convention</c><00:06:11.290><c> whether</c>

00:06:12.280 --> 00:06:12.290 align:start position:0%
completely a software convention whether
 

00:06:12.290 --> 00:06:15.070 align:start position:0%
completely a software convention whether
you're<00:06:12.470><c> doing</c><00:06:12.560><c> 64-bit</c><00:06:13.250><c> or</c><00:06:13.400><c> 32-bit</c><00:06:13.760><c> I</c><00:06:14.480><c> want</c><00:06:15.020><c> to</c>

00:06:15.070 --> 00:06:15.080 align:start position:0%
you're doing 64-bit or 32-bit I want to
 

00:06:15.080 --> 00:06:16.090 align:start position:0%
you're doing 64-bit or 32-bit I want to
go<00:06:15.140><c> into</c><00:06:15.290><c> some</c><00:06:15.470><c> more</c><00:06:15.560><c> detail</c><00:06:15.620><c> than</c><00:06:15.980><c> this</c>

00:06:16.090 --> 00:06:16.100 align:start position:0%
go into some more detail than this
 

00:06:16.100 --> 00:06:17.830 align:start position:0%
go into some more detail than this
because<00:06:16.400><c> once</c><00:06:16.580><c> you</c><00:06:16.700><c> get</c><00:06:16.850><c> this</c><00:06:17.030><c> the</c><00:06:17.540><c> rest</c><00:06:17.750><c> of</c>

00:06:17.830 --> 00:06:17.840 align:start position:0%
because once you get this the rest of
 

00:06:17.840 --> 00:06:20.050 align:start position:0%
because once you get this the rest of
the<00:06:17.900><c> 64-bit</c><00:06:18.350><c> talk</c><00:06:18.530><c> and</c><00:06:18.740><c> how</c><00:06:18.920><c> Apple</c><00:06:19.760><c> is</c><00:06:19.820><c> rolling</c>

00:06:20.050 --> 00:06:20.060 align:start position:0%
the 64-bit talk and how Apple is rolling
 

00:06:20.060 --> 00:06:22.320 align:start position:0%
the 64-bit talk and how Apple is rolling
out<00:06:20.150><c> 64</c><00:06:20.480><c> bits</c><00:06:20.690><c> will</c><00:06:20.780><c> make</c><00:06:20.900><c> a</c><00:06:20.930><c> lot</c><00:06:21.110><c> more</c><00:06:21.140><c> sense</c>

00:06:22.320 --> 00:06:22.330 align:start position:0%
out 64 bits will make a lot more sense
 

00:06:22.330 --> 00:06:25.270 align:start position:0%
out 64 bits will make a lot more sense
if<00:06:23.330><c> you</c><00:06:24.230><c> play</c><00:06:24.440><c> it</c><00:06:24.470><c> around</c><00:06:24.560><c> the</c><00:06:24.830><c> PowerPC</c>

00:06:25.270 --> 00:06:25.280 align:start position:0%
if you play it around the PowerPC
 

00:06:25.280 --> 00:06:26.980 align:start position:0%
if you play it around the PowerPC
instruction<00:06:25.700><c> set</c><00:06:25.850><c> you'll</c><00:06:26.000><c> know</c><00:06:26.120><c> this</c><00:06:26.360><c> being</c><00:06:26.900><c> a</c>

00:06:26.980 --> 00:06:26.990 align:start position:0%
instruction set you'll know this being a
 

00:06:26.990 --> 00:06:28.030 align:start position:0%
instruction set you'll know this being a
risk<00:06:27.140><c> processes</c><00:06:27.620><c> that</c><00:06:27.740><c> there's</c><00:06:27.890><c> basically</c>

00:06:28.030 --> 00:06:28.040 align:start position:0%
risk processes that there's basically
 

00:06:28.040 --> 00:06:30.430 align:start position:0%
risk processes that there's basically
two<00:06:28.310><c> categories</c><00:06:29.120><c> of</c><00:06:29.240><c> instructions</c><00:06:29.720><c> there's</c>

00:06:30.430 --> 00:06:30.440 align:start position:0%
two categories of instructions there's
 

00:06:30.440 --> 00:06:31.690 align:start position:0%
two categories of instructions there's
load<00:06:30.710><c> and</c><00:06:30.890><c> store</c><00:06:30.950><c> instructions</c><00:06:31.310><c> and</c>

00:06:31.690 --> 00:06:31.700 align:start position:0%
load and store instructions and
 

00:06:31.700 --> 00:06:33.880 align:start position:0%
load and store instructions and
everything<00:06:32.030><c> else</c><00:06:32.480><c> now</c><00:06:33.470><c> load</c><00:06:33.680><c> and</c><00:06:33.830><c> store</c>

00:06:33.880 --> 00:06:33.890 align:start position:0%
everything else now load and store
 

00:06:33.890 --> 00:06:35.290 align:start position:0%
everything else now load and store
instructions<00:06:34.010><c> simply</c><00:06:34.760><c> are</c><00:06:34.970><c> the</c><00:06:35.030><c> only</c>

00:06:35.290 --> 00:06:35.300 align:start position:0%
instructions simply are the only
 

00:06:35.300 --> 00:06:36.820 align:start position:0%
instructions simply are the only
instructions<00:06:35.810><c> that</c><00:06:35.930><c> can</c><00:06:36.020><c> access</c><00:06:36.380><c> main</c><00:06:36.560><c> memory</c>

00:06:36.820 --> 00:06:36.830 align:start position:0%
instructions that can access main memory
 

00:06:36.830 --> 00:06:38.560 align:start position:0%
instructions that can access main memory
they<00:06:37.100><c> all</c><00:06:37.340><c> they</c><00:06:37.520><c> do</c><00:06:37.580><c> is</c><00:06:37.670><c> move</c><00:06:37.970><c> between</c><00:06:38.150><c> memory</c>

00:06:38.560 --> 00:06:38.570 align:start position:0%
they all they do is move between memory
 

00:06:38.570 --> 00:06:40.960 align:start position:0%
they all they do is move between memory
and<00:06:38.600><c> registers</c><00:06:39.020><c> all</c><00:06:39.770><c> other</c><00:06:40.400><c> instructions</c>

00:06:40.960 --> 00:06:40.970 align:start position:0%
and registers all other instructions
 

00:06:40.970 --> 00:06:43.570 align:start position:0%
and registers all other instructions
operate<00:06:41.600><c> with</c><00:06:42.290><c> registers</c><00:06:42.800><c> for</c><00:06:43.100><c> instance</c><00:06:43.400><c> at</c>

00:06:43.570 --> 00:06:43.580 align:start position:0%
operate with registers for instance at
 

00:06:43.580 --> 00:06:45.370 align:start position:0%
operate with registers for instance at
our<00:06:43.850><c> three</c><00:06:44.120><c> Darfur</c><00:06:44.570><c> and</c><00:06:44.600><c> store</c><00:06:44.960><c> back</c><00:06:45.140><c> and</c><00:06:45.290><c> our</c>

00:06:45.370 --> 00:06:45.380 align:start position:0%
our three Darfur and store back and our
 

00:06:45.380 --> 00:06:48.130 align:start position:0%
our three Darfur and store back and our
three<00:06:46.090><c> if</c><00:06:47.090><c> you</c><00:06:47.240><c> look</c><00:06:47.360><c> at</c><00:06:47.480><c> those</c><00:06:47.600><c> instructions</c>

00:06:48.130 --> 00:06:48.140 align:start position:0%
three if you look at those instructions
 

00:06:48.140 --> 00:06:50.050 align:start position:0%
three if you look at those instructions
and<00:06:48.260><c> what</c><00:06:48.350><c> they</c><00:06:48.440><c> do</c><00:06:48.530><c> is</c><00:06:48.650><c> registers</c><00:06:49.100><c> you</c><00:06:49.760><c> notice</c>

00:06:50.050 --> 00:06:50.060 align:start position:0%
and what they do is registers you notice
 

00:06:50.060 --> 00:06:52.420 align:start position:0%
and what they do is registers you notice
there's<00:06:50.570><c> no</c><00:06:50.750><c> sighs</c><00:06:51.110><c> designation</c><00:06:51.980><c> on</c><00:06:52.130><c> those</c>

00:06:52.420 --> 00:06:52.430 align:start position:0%
there's no sighs designation on those
 

00:06:52.430 --> 00:06:54.100 align:start position:0%
there's no sighs designation on those
instructions<00:06:52.970><c> there's</c><00:06:53.210><c> no</c><00:06:53.330><c> ad</c><00:06:53.540><c> bite</c><00:06:53.870><c> or</c>

00:06:54.100 --> 00:06:54.110 align:start position:0%
instructions there's no ad bite or
 

00:06:54.110 --> 00:06:55.960 align:start position:0%
instructions there's no ad bite or
Adwords<00:06:54.590><c> or</c><00:06:54.740><c> simply</c><00:06:55.070><c> the</c><00:06:55.280><c> add</c><00:06:55.730><c> instruction</c>

00:06:55.960 --> 00:06:55.970 align:start position:0%
Adwords or simply the add instruction
 

00:06:55.970 --> 00:07:00.880 align:start position:0%
Adwords or simply the add instruction
which<00:06:56.930><c> works</c><00:06:57.410><c> on</c><00:06:57.530><c> the</c><00:06:57.620><c> entire</c><00:06:57.920><c> register</c><00:06:59.890><c> so</c>

00:07:00.880 --> 00:07:00.890 align:start position:0%
which works on the entire register so
 

00:07:00.890 --> 00:07:02.650 align:start position:0%
which works on the entire register so
how<00:07:01.070><c> that</c><00:07:01.220><c> works</c><00:07:01.490><c> is</c><00:07:01.670><c> that</c><00:07:02.030><c> you</c><00:07:02.300><c> want</c><00:07:02.480><c> to</c><00:07:02.570><c> do</c>

00:07:02.650 --> 00:07:02.660 align:start position:0%
how that works is that you want to do
 

00:07:02.660 --> 00:07:06.310 align:start position:0%
how that works is that you want to do
32-bit<00:07:03.410><c> now</c><00:07:03.530><c> or</c><00:07:04.310><c> you're</c><00:07:04.580><c> in</c><00:07:04.910><c> a</c><00:07:05.240><c> 32-bit</c><00:07:05.930><c> program</c>

00:07:06.310 --> 00:07:06.320 align:start position:0%
32-bit now or you're in a 32-bit program
 

00:07:06.320 --> 00:07:08.620 align:start position:0%
32-bit now or you're in a 32-bit program
you<00:07:07.160><c> only</c><00:07:07.430><c> ever</c><00:07:07.640><c> load</c><00:07:07.880><c> the</c><00:07:08.000><c> 32</c><00:07:08.330><c> bits</c><00:07:08.510><c> of</c><00:07:08.600><c> the</c>

00:07:08.620 --> 00:07:08.630 align:start position:0%
you only ever load the 32 bits of the
 

00:07:08.630 --> 00:07:11.110 align:start position:0%
you only ever load the 32 bits of the
register<00:07:09.070><c> you</c><00:07:10.070><c> do</c><00:07:10.220><c> your</c><00:07:10.400><c> addition</c><00:07:10.880><c> whatever</c>

00:07:11.110 --> 00:07:11.120 align:start position:0%
register you do your addition whatever
 

00:07:11.120 --> 00:07:12.970 align:start position:0%
register you do your addition whatever
and<00:07:11.480><c> you</c><00:07:11.540><c> only</c><00:07:11.690><c> ever</c><00:07:11.870><c> look</c><00:07:12.140><c> at</c><00:07:12.260><c> the</c><00:07:12.320><c> low</c><00:07:12.680><c> 32</c>

00:07:12.970 --> 00:07:12.980 align:start position:0%
and you only ever look at the low 32
 

00:07:12.980 --> 00:07:15.820 align:start position:0%
and you only ever look at the low 32
bits<00:07:13.220><c> as</c><00:07:13.520><c> a</c><00:07:13.610><c> result</c><00:07:14.350><c> what</c><00:07:15.350><c> that</c><00:07:15.470><c> allows</c><00:07:15.500><c> you</c><00:07:15.800><c> to</c>

00:07:15.820 --> 00:07:15.830 align:start position:0%
bits as a result what that allows you to
 

00:07:15.830 --> 00:07:20.320 align:start position:0%
bits as a result what that allows you to
do<00:07:16.130><c> is</c><00:07:16.490><c> that</c><00:07:17.830><c> 32-bit</c><00:07:18.830><c> a</c><00:07:19.070><c> program</c><00:07:19.790><c> written</c><00:07:20.030><c> to</c>

00:07:20.320 --> 00:07:20.330 align:start position:0%
do is that 32-bit a program written to
 

00:07:20.330 --> 00:07:22.810 align:start position:0%
do is that 32-bit a program written to
32-bit<00:07:20.630><c> conventions</c><00:07:21.200><c> has</c><00:07:21.890><c> no</c><00:07:22.130><c> concept</c><00:07:22.640><c> of</c>

00:07:22.810 --> 00:07:22.820 align:start position:0%
32-bit conventions has no concept of
 

00:07:22.820 --> 00:07:24.930 align:start position:0%
32-bit conventions has no concept of
weather<00:07:23.120><c> and</c><00:07:23.210><c> authors</c><00:07:23.630><c> actually</c><00:07:23.990><c> higher</c><00:07:24.140><c> bit</c>

00:07:24.930 --> 00:07:24.940 align:start position:0%
weather and authors actually higher bit
 

00:07:24.940 --> 00:07:27.520 align:start position:0%
weather and authors actually higher bit
what<00:07:25.940><c> this</c><00:07:26.060><c> means</c><00:07:26.300><c> is</c><00:07:26.510><c> when</c><00:07:26.840><c> the</c><00:07:26.930><c> piracy</c><00:07:27.260><c> came</c>

00:07:27.520 --> 00:07:27.530 align:start position:0%
what this means is when the piracy came
 

00:07:27.530 --> 00:07:29.170 align:start position:0%
what this means is when the piracy came
out<00:07:27.650><c> even</c><00:07:27.770><c> though</c><00:07:27.980><c> is</c><00:07:28.100><c> a</c><00:07:28.130><c> 64-bit</c><00:07:28.640><c> architecture</c>

00:07:29.170 --> 00:07:29.180 align:start position:0%
out even though is a 64-bit architecture
 

00:07:29.180 --> 00:07:31.360 align:start position:0%
out even though is a 64-bit architecture
of<00:07:29.210><c> the</c><00:07:29.360><c> original</c><00:07:29.750><c> silicon</c><00:07:30.170><c> only</c><00:07:30.920><c> supported</c>

00:07:31.360 --> 00:07:31.370 align:start position:0%
of the original silicon only supported
 

00:07:31.370 --> 00:07:33.700 align:start position:0%
of the original silicon only supported
the<00:07:31.460><c> low</c><00:07:31.580><c> 32</c><00:07:31.880><c> bits</c><00:07:32.120><c> of</c><00:07:32.240><c> registers</c><00:07:32.630><c> all</c><00:07:33.410><c> the</c>

00:07:33.700 --> 00:07:33.710 align:start position:0%
the low 32 bits of registers all the
 

00:07:33.710 --> 00:07:35.770 align:start position:0%
the low 32 bits of registers all the
software<00:07:34.100><c> written</c><00:07:34.220><c> only</c><00:07:34.700><c> looked</c><00:07:35.210><c> at</c><00:07:35.270><c> 32-bit</c>

00:07:35.770 --> 00:07:35.780 align:start position:0%
software written only looked at 32-bit
 

00:07:35.780 --> 00:07:37.450 align:start position:0%
software written only looked at 32-bit
registers<00:07:35.900><c> the</c><00:07:36.470><c> low</c><00:07:36.620><c> 32</c><00:07:36.920><c> bits</c><00:07:37.160><c> because</c><00:07:37.250><c> that</c>

00:07:37.450 --> 00:07:37.460 align:start position:0%
registers the low 32 bits because that
 

00:07:37.460 --> 00:07:39.310 align:start position:0%
registers the low 32 bits because that
all<00:07:37.640><c> there</c><00:07:37.910><c> was</c><00:07:37.940><c> what</c><00:07:38.900><c> they</c><00:07:38.990><c> follow</c><00:07:39.200><c> that</c>

00:07:39.310 --> 00:07:39.320 align:start position:0%
all there was what they follow that
 

00:07:39.320 --> 00:07:41.170 align:start position:0%
all there was what they follow that
convention<00:07:39.860><c> well</c><00:07:40.280><c> the</c><00:07:40.340><c> g5</c><00:07:40.700><c> came</c><00:07:40.910><c> out</c><00:07:41.030><c> there</c>

00:07:41.170 --> 00:07:41.180 align:start position:0%
convention well the g5 came out there
 

00:07:41.180 --> 00:07:44.170 align:start position:0%
convention well the g5 came out there
half<00:07:41.330><c> as</c><00:07:41.510><c> any</c><00:07:41.720><c> more</c><00:07:41.930><c> bits</c><00:07:42.170><c> of</c><00:07:42.350><c> it</c><00:07:42.470><c> there</c><00:07:43.180><c> but</c>

00:07:44.170 --> 00:07:44.180 align:start position:0%
half as any more bits of it there but
 

00:07:44.180 --> 00:07:46.570 align:start position:0%
half as any more bits of it there but
the<00:07:44.450><c> program's</c><00:07:45.200><c> only</c><00:07:45.530><c> love</c><00:07:45.650><c> the</c><00:07:45.770><c> low</c><00:07:46.040><c> 32</c><00:07:46.340><c> bits</c>

00:07:46.570 --> 00:07:46.580 align:start position:0%
the program's only love the low 32 bits
 

00:07:46.580 --> 00:07:48.100 align:start position:0%
the program's only love the low 32 bits
it<00:07:47.150><c> doesn't</c><00:07:47.450><c> really</c><00:07:47.540><c> matter</c><00:07:47.690><c> what's</c><00:07:47.960><c> in</c><00:07:48.080><c> the</c>

00:07:48.100 --> 00:07:48.110 align:start position:0%
it doesn't really matter what's in the
 

00:07:48.110 --> 00:07:49.540 align:start position:0%
it doesn't really matter what's in the
high<00:07:48.260><c> bit</c><00:07:48.440><c> so</c><00:07:48.560><c> it</c><00:07:48.680><c> can</c><00:07:48.770><c> be</c><00:07:48.890><c> sibility</c><00:07:49.220><c> garbage</c>

00:07:49.540 --> 00:07:49.550 align:start position:0%
high bit so it can be sibility garbage
 

00:07:49.550 --> 00:07:51.010 align:start position:0%
high bit so it can be sibility garbage
they<00:07:49.670><c> still</c><00:07:49.910><c> do</c><00:07:50.060><c> the</c><00:07:50.150><c> same</c><00:07:50.330><c> add</c><00:07:50.480><c> instruction</c>

00:07:51.010 --> 00:07:51.020 align:start position:0%
they still do the same add instruction
 

00:07:51.020 --> 00:07:52.540 align:start position:0%
they still do the same add instruction
and<00:07:51.200><c> the</c><00:07:51.560><c> results</c><00:07:51.950><c> they</c><00:07:52.010><c> only</c><00:07:52.190><c> look</c><00:07:52.400><c> at</c><00:07:52.490><c> the</c>

00:07:52.540 --> 00:07:52.550 align:start position:0%
and the results they only look at the
 

00:07:52.550 --> 00:07:56.980 align:start position:0%
and the results they only look at the
low<00:07:52.670><c> 32</c><00:07:53.000><c> bit</c><00:07:53.860><c> so</c><00:07:54.860><c> what</c><00:07:55.250><c> this</c><00:07:55.370><c> means</c><00:07:55.640><c> is</c><00:07:55.990><c> there's</c>

00:07:56.980 --> 00:07:56.990 align:start position:0%
low 32 bit so what this means is there's
 

00:07:56.990 --> 00:08:00.280 align:start position:0%
low 32 bit so what this means is there's
no<00:07:57.230><c> mode</c><00:07:57.530><c> with</c><00:07:58.040><c> PowerPC</c><00:07:58.960><c> it's</c><00:07:59.960><c> only</c>

00:08:00.280 --> 00:08:00.290 align:start position:0%
no mode with PowerPC it's only
 

00:08:00.290 --> 00:08:02.320 align:start position:0%
no mode with PowerPC it's only
conventions<00:08:00.830><c> that</c><00:08:00.980><c> distinguished</c><00:08:01.640><c> 64-bit</c>

00:08:02.320 --> 00:08:02.330 align:start position:0%
conventions that distinguished 64-bit
 

00:08:02.330 --> 00:08:04.900 align:start position:0%
conventions that distinguished 64-bit
from<00:08:02.660><c> 32-bit</c><00:08:03.170><c> processes</c><00:08:03.760><c> another</c><00:08:04.760><c> way</c><00:08:04.880><c> of</c>

00:08:04.900 --> 00:08:04.910 align:start position:0%
from 32-bit processes another way of
 

00:08:04.910 --> 00:08:06.250 align:start position:0%
from 32-bit processes another way of
looking<00:08:05.000><c> at</c><00:08:05.270><c> this</c><00:08:05.420><c> is</c><00:08:05.630><c> that</c><00:08:05.690><c> there's</c><00:08:06.170><c> no</c>

00:08:06.250 --> 00:08:06.260 align:start position:0%
looking at this is that there's no
 

00:08:06.260 --> 00:08:09.130 align:start position:0%
looking at this is that there's no
performance<00:08:07.190><c> penalty</c><00:08:07.540><c> for</c><00:08:08.540><c> running</c><00:08:08.990><c> as</c><00:08:09.110><c> a</c>

00:08:09.130 --> 00:08:09.140 align:start position:0%
performance penalty for running as a
 

00:08:09.140 --> 00:08:11.800 align:start position:0%
performance penalty for running as a
32-bit<00:08:09.680><c> process</c><00:08:10.100><c> in</c><00:08:10.310><c> fact</c><00:08:11.030><c> was</c><00:08:11.180><c> a</c><00:08:11.210><c> learn</c><00:08:11.630><c> later</c>

00:08:11.800 --> 00:08:11.810 align:start position:0%
32-bit process in fact was a learn later
 

00:08:11.810 --> 00:08:13.390 align:start position:0%
32-bit process in fact was a learn later
the<00:08:12.050><c> flight</c><00:08:12.290><c> performance</c><00:08:12.470><c> gain</c><00:08:12.920><c> for</c><00:08:13.160><c> any</c><00:08:13.310><c> of</c>

00:08:13.390 --> 00:08:13.400 align:start position:0%
the flight performance gain for any of
 

00:08:13.400 --> 00:08:16.750 align:start position:0%
the flight performance gain for any of
the<00:08:13.490><c> 32-bit</c><00:08:15.070><c> now</c><00:08:16.070><c> those</c><00:08:16.280><c> of</c><00:08:16.310><c> you</c><00:08:16.460><c> who</c><00:08:16.580><c> is</c><00:08:16.640><c> on</c>

00:08:16.750 --> 00:08:16.760 align:start position:0%
the 32-bit now those of you who is on
 

00:08:16.760 --> 00:08:18.010 align:start position:0%
the 32-bit now those of you who is on
the<00:08:16.820><c> subway</c><00:08:17.060><c> programming</c><00:08:17.510><c> also</c><00:08:17.840><c> know</c><00:08:17.990><c> that</c>

00:08:18.010 --> 00:08:18.020 align:start position:0%
the subway programming also know that
 

00:08:18.020 --> 00:08:19.870 align:start position:0%
the subway programming also know that
there's<00:08:18.500><c> something</c><00:08:18.710><c> called</c><00:08:18.830><c> condition</c><00:08:19.310><c> codes</c>

00:08:19.870 --> 00:08:19.880 align:start position:0%
there's something called condition codes
 

00:08:19.880 --> 00:08:22.120 align:start position:0%
there's something called condition codes
so<00:08:20.600><c> you've</c><00:08:20.990><c> got</c><00:08:21.020><c> this</c><00:08:21.230><c> mental</c><00:08:21.560><c> model</c><00:08:21.830><c> of</c><00:08:21.920><c> how</c>

00:08:22.120 --> 00:08:22.130 align:start position:0%
so you've got this mental model of how
 

00:08:22.130 --> 00:08:24.220 align:start position:0%
so you've got this mental model of how
you<00:08:22.190><c> can</c><00:08:22.520><c> run</c><00:08:22.910><c> within</c><00:08:23.810><c> thirty</c><00:08:24.080><c> two-bit</c>

00:08:24.220 --> 00:08:24.230 align:start position:0%
you can run within thirty two-bit
 

00:08:24.230 --> 00:08:27.370 align:start position:0%
you can run within thirty two-bit
conventions<00:08:24.770><c> on</c><00:08:24.980><c> 64-bit</c><00:08:25.670><c> processor</c><00:08:26.290><c> but</c><00:08:27.290><c> you</c>

00:08:27.370 --> 00:08:27.380 align:start position:0%
conventions on 64-bit processor but you
 

00:08:27.380 --> 00:08:30.550 align:start position:0%
conventions on 64-bit processor but you
may<00:08:27.500><c> ask</c><00:08:27.680><c> well</c><00:08:28.690><c> Howard</c><00:08:29.690><c> condition</c><00:08:30.140><c> codes</c><00:08:30.320><c> it</c>

00:08:30.550 --> 00:08:30.560 align:start position:0%
may ask well Howard condition codes it
 

00:08:30.560 --> 00:08:32.589 align:start position:0%
may ask well Howard condition codes it
now<00:08:31.490><c> condition</c><00:08:31.910><c> codes</c><00:08:32.090><c> the</c><00:08:32.210><c> things</c><00:08:32.360><c> like</c><00:08:32.479><c> they</c>

00:08:32.589 --> 00:08:32.599 align:start position:0%
now condition codes the things like they
 

00:08:32.599 --> 00:08:35.260 align:start position:0%
now condition codes the things like they
carry<00:08:32.810><c> bit</c><00:08:32.990><c> in</c><00:08:33.080><c> the</c><00:08:33.140><c> zero</c><00:08:33.349><c> bit</c><00:08:33.910><c> they</c><00:08:34.910><c> are</c><00:08:35.060><c> set</c>

00:08:35.260 --> 00:08:35.270 align:start position:0%
carry bit in the zero bit they are set
 

00:08:35.270 --> 00:08:37.000 align:start position:0%
carry bit in the zero bit they are set
as<00:08:35.360><c> a</c><00:08:35.390><c> side</c><00:08:35.690><c> effect</c><00:08:35.720><c> of</c><00:08:36.140><c> some</c><00:08:36.320><c> instructions</c><00:08:36.860><c> so</c>

00:08:37.000 --> 00:08:37.010 align:start position:0%
as a side effect of some instructions so
 

00:08:37.010 --> 00:08:38.860 align:start position:0%
as a side effect of some instructions so
you<00:08:37.190><c> do</c><00:08:37.430><c> the</c><00:08:37.460><c> ad</c><00:08:37.700><c> if</c><00:08:38.030><c> there</c><00:08:38.180><c> was</c><00:08:38.330><c> a</c><00:08:38.360><c> carry</c><00:08:38.720><c> out</c>

00:08:38.860 --> 00:08:38.870 align:start position:0%
you do the ad if there was a carry out
 

00:08:38.870 --> 00:08:40.360 align:start position:0%
you do the ad if there was a carry out
from<00:08:39.050><c> the</c><00:08:39.200><c> alley</c><00:08:39.349><c> carry</c><00:08:39.650><c> bit</c><00:08:39.800><c> early</c><00:08:39.950><c> sat</c><00:08:40.160><c> or</c><00:08:40.310><c> if</c>

00:08:40.360 --> 00:08:40.370 align:start position:0%
from the alley carry bit early sat or if
 

00:08:40.370 --> 00:08:42.790 align:start position:0%
from the alley carry bit early sat or if
you<00:08:40.520><c> an</c><00:08:40.640><c> ad</c><00:08:40.789><c> and</c><00:08:40.820><c> the</c><00:08:41.300><c> result</c><00:08:41.570><c> was</c><00:08:41.630><c> 0z</c><00:08:42.560><c> bit</c><00:08:42.710><c> is</c>

00:08:42.790 --> 00:08:42.800 align:start position:0%
you an ad and the result was 0z bit is
 

00:08:42.800 --> 00:08:46.000 align:start position:0%
you an ad and the result was 0z bit is
set<00:08:43.570><c> there</c><00:08:44.570><c> is</c><00:08:44.750><c> one</c><00:08:45.020><c> tiny</c><00:08:45.320><c> bit</c><00:08:45.530><c> of</c><00:08:45.620><c> mode</c><00:08:45.740><c> units</c>

00:08:46.000 --> 00:08:46.010 align:start position:0%
set there is one tiny bit of mode units
 

00:08:46.010 --> 00:08:49.360 align:start position:0%
set there is one tiny bit of mode units
in<00:08:46.070><c> the</c><00:08:46.130><c> powerpc</c><00:08:46.700><c> and</c><00:08:47.740><c> that</c><00:08:48.740><c> is</c><00:08:48.950><c> there's</c><00:08:49.280><c> a</c>

00:08:49.360 --> 00:08:49.370 align:start position:0%
in the powerpc and that is there's a
 

00:08:49.370 --> 00:08:51.580 align:start position:0%
in the powerpc and that is there's a
mode<00:08:49.610><c> of</c><00:08:49.850><c> how</c><00:08:50.210><c> the</c><00:08:50.270><c> condition</c><00:08:50.600><c> codes</c><00:08:51.170><c> are</c><00:08:51.380><c> set</c>

00:08:51.580 --> 00:08:51.590 align:start position:0%
mode of how the condition codes are set
 

00:08:51.590 --> 00:08:53.230 align:start position:0%
mode of how the condition codes are set
as<00:08:51.740><c> a</c><00:08:51.800><c> result</c><00:08:52.070><c> of</c><00:08:52.160><c> the</c><00:08:52.280><c> instruction</c><00:08:52.730><c> whether</c>

00:08:53.230 --> 00:08:53.240 align:start position:0%
as a result of the instruction whether
 

00:08:53.240 --> 00:08:54.970 align:start position:0%
as a result of the instruction whether
the<00:08:53.660><c> process</c><00:08:54.050><c> would</c><00:08:54.140><c> look</c><00:08:54.290><c> as</c><00:08:54.380><c> a</c><00:08:54.470><c> full</c><00:08:54.650><c> 64-bit</c>

00:08:54.970 --> 00:08:54.980 align:start position:0%
the process would look as a full 64-bit
 

00:08:54.980 --> 00:08:58.870 align:start position:0%
the process would look as a full 64-bit
or<00:08:55.400><c> the</c><00:08:55.790><c> low</c><00:08:55.910><c> 32</c><00:08:56.240><c> bit</c><00:08:56.950><c> so</c><00:08:57.950><c> when</c><00:08:58.520><c> the</c><00:08:58.670><c> colonel</c>

00:08:58.870 --> 00:08:58.880 align:start position:0%
or the low 32 bit so when the colonel
 

00:08:58.880 --> 00:09:01.690 align:start position:0%
or the low 32 bit so when the colonel
starts<00:08:59.300><c> the</c><00:08:59.390><c> process</c><00:08:59.510><c> it</c><00:09:00.350><c> looks</c><00:09:01.250><c> at</c><00:09:01.400><c> the</c><00:09:01.490><c> code</c>

00:09:01.690 --> 00:09:01.700 align:start position:0%
starts the process it looks at the code
 

00:09:01.700 --> 00:09:03.550 align:start position:0%
starts the process it looks at the code
in<00:09:01.940><c> the</c><00:09:02.000><c> process</c><00:09:02.360><c> and</c><00:09:02.390><c> basically</c><00:09:02.810><c> a</c><00:09:02.900><c> flag</c><00:09:03.410><c> on</c>

00:09:03.550 --> 00:09:03.560 align:start position:0%
in the process and basically a flag on
 

00:09:03.560 --> 00:09:05.380 align:start position:0%
in the process and basically a flag on
the<00:09:03.620><c> header</c><00:09:03.770><c> in</c><00:09:03.950><c> size</c><00:09:04.310><c> whether</c><00:09:04.580><c> this</c><00:09:04.940><c> piece</c><00:09:05.270><c> of</c>

00:09:05.380 --> 00:09:05.390 align:start position:0%
the header in size whether this piece of
 

00:09:05.390 --> 00:09:07.420 align:start position:0%
the header in size whether this piece of
power<00:09:05.540><c> pc</c><00:09:05.720><c> codes</c><00:09:06.050><c> using</c><00:09:06.410><c> 32-bit</c><00:09:06.830><c> conventions</c>

00:09:07.420 --> 00:09:07.430 align:start position:0%
power pc codes using 32-bit conventions
 

00:09:07.430 --> 00:09:10.180 align:start position:0%
power pc codes using 32-bit conventions
or<00:09:07.580><c> 64-bit</c><00:09:08.390><c> conventions</c><00:09:08.840><c> if</c><00:09:09.650><c> it's</c><00:09:09.920><c> using</c>

00:09:10.180 --> 00:09:10.190 align:start position:0%
or 64-bit conventions if it's using
 

00:09:10.190 --> 00:09:12.280 align:start position:0%
or 64-bit conventions if it's using
32-bit<00:09:10.430><c> conventions</c><00:09:11.060><c> it's</c><00:09:11.720><c> a</c><00:09:11.810><c> little</c><00:09:12.080><c> plugin</c>

00:09:12.280 --> 00:09:12.290 align:start position:0%
32-bit conventions it's a little plugin
 

00:09:12.290 --> 00:09:15.040 align:start position:0%
32-bit conventions it's a little plugin
with<00:09:12.470><c> hard</c><00:09:12.650><c> pc</c><00:09:12.980><c> it</c><00:09:13.100><c> says</c><00:09:13.750><c> when</c><00:09:14.750><c> you</c><00:09:14.870><c> set</c>

00:09:15.040 --> 00:09:15.050 align:start position:0%
with hard pc it says when you set
 

00:09:15.050 --> 00:09:17.380 align:start position:0%
with hard pc it says when you set
condition<00:09:15.470><c> codes</c><00:09:15.710><c> for</c><00:09:16.610><c> this</c><00:09:16.820><c> thing</c><00:09:17.030><c> because</c>

00:09:17.380 --> 00:09:17.390 align:start position:0%
condition codes for this thing because
 

00:09:17.390 --> 00:09:19.630 align:start position:0%
condition codes for this thing because
it's<00:09:17.540><c> using</c><00:09:17.690><c> 32-bit</c><00:09:18.110><c> conventions</c><00:09:18.800><c> it's</c><00:09:19.460><c> only</c>

00:09:19.630 --> 00:09:19.640 align:start position:0%
it's using 32-bit conventions it's only
 

00:09:19.640 --> 00:09:20.770 align:start position:0%
it's using 32-bit conventions it's only
looking<00:09:19.880><c> at</c><00:09:19.940><c> the</c><00:09:20.000><c> loads</c><00:09:20.120><c> of</c><00:09:20.240><c> these</c><00:09:20.330><c> bits</c><00:09:20.480><c> so</c>

00:09:20.770 --> 00:09:20.780 align:start position:0%
looking at the loads of these bits so
 

00:09:20.780 --> 00:09:21.940 align:start position:0%
looking at the loads of these bits so
the<00:09:20.930><c> condition</c><00:09:21.260><c> codes</c><00:09:21.410><c> should</c><00:09:21.500><c> only</c><00:09:21.680><c> look</c><00:09:21.830><c> at</c>

00:09:21.940 --> 00:09:21.950 align:start position:0%
the condition codes should only look at
 

00:09:21.950 --> 00:09:24.700 align:start position:0%
the condition codes should only look at
the<00:09:22.010><c> low</c><00:09:22.100><c> 32</c><00:09:22.400><c> bits</c><00:09:22.610><c> as</c><00:09:22.700><c> well</c><00:09:23.260><c> so</c><00:09:24.260><c> one</c><00:09:24.530><c> other</c>

00:09:24.700 --> 00:09:24.710 align:start position:0%
the low 32 bits as well so one other
 

00:09:24.710 --> 00:09:26.860 align:start position:0%
the low 32 bits as well so one other
thing<00:09:24.920><c> the</c><00:09:25.070><c> colonel</c><00:09:25.310><c> is</c><00:09:25.340><c> a</c><00:09:25.460><c> different</c><00:09:25.880><c> when</c>

00:09:26.860 --> 00:09:26.870 align:start position:0%
thing the colonel is a different when
 

00:09:26.870 --> 00:09:29.620 align:start position:0%
thing the colonel is a different when
launching<00:09:27.140><c> a</c><00:09:27.230><c> 32</c><00:09:27.590><c> vs</c><00:09:27.920><c> 64-bit</c><00:09:28.430><c> process</c><00:09:28.910><c> it's</c>

00:09:29.620 --> 00:09:29.630 align:start position:0%
launching a 32 vs 64-bit process it's
 

00:09:29.630 --> 00:09:31.510 align:start position:0%
launching a 32 vs 64-bit process it's
for<00:09:29.840><c> 32-bit</c><00:09:30.470><c> process</c><00:09:30.830><c> that</c><00:09:30.980><c> also</c><00:09:31.220><c> tells</c><00:09:31.340><c> the</c>

00:09:31.510 --> 00:09:31.520 align:start position:0%
for 32-bit process that also tells the
 

00:09:31.520 --> 00:09:34.060 align:start position:0%
for 32-bit process that also tells the
MMU<00:09:31.850><c> memory</c><00:09:32.390><c> management</c><00:09:32.660><c> unit</c><00:09:32.810><c> to</c><00:09:33.470><c> ignore</c><00:09:33.860><c> the</c>

00:09:34.060 --> 00:09:34.070 align:start position:0%
MMU memory management unit to ignore the
 

00:09:34.070 --> 00:09:35.920 align:start position:0%
MMU memory management unit to ignore the
high<00:09:34.220><c> 32</c><00:09:34.700><c> bits</c><00:09:34.940><c> of</c><00:09:35.120><c> addresses</c><00:09:35.630><c> because</c>

00:09:35.920 --> 00:09:35.930 align:start position:0%
high 32 bits of addresses because
 

00:09:35.930 --> 00:09:37.660 align:start position:0%
high 32 bits of addresses because
they're<00:09:36.230><c> potentially</c><00:09:36.680><c> garbage</c><00:09:37.040><c> and</c><00:09:37.250><c> to</c><00:09:37.550><c> only</c>

00:09:37.660 --> 00:09:37.670 align:start position:0%
they're potentially garbage and to only
 

00:09:37.670 --> 00:09:39.490 align:start position:0%
they're potentially garbage and to only
look<00:09:37.880><c> at</c><00:09:38.000><c> the</c><00:09:38.060><c> low</c><00:09:38.180><c> 32</c><00:09:38.450><c> bit</c><00:09:38.660><c> that</c><00:09:39.200><c> gives</c><00:09:39.440><c> a</c>

00:09:39.490 --> 00:09:39.500 align:start position:0%
look at the low 32 bit that gives a
 

00:09:39.500 --> 00:09:41.350 align:start position:0%
look at the low 32 bit that gives a
32-bit<00:09:39.890><c> process</c><00:09:40.250><c> a</c><00:09:40.400><c> four</c><00:09:40.670><c> gig</c><00:09:40.790><c> address</c><00:09:41.150><c> space</c>

00:09:41.350 --> 00:09:41.360 align:start position:0%
32-bit process a four gig address space
 

00:09:41.360 --> 00:09:48.430 align:start position:0%
32-bit process a four gig address space
a<00:09:41.510><c> 64-bit</c><00:09:42.170><c> process</c><00:09:42.530><c> the</c><00:09:42.920><c> full</c><00:09:43.130><c> 16</c><00:09:43.820><c> exabytes</c><00:09:47.440><c> so</c>

00:09:48.430 --> 00:09:48.440 align:start position:0%
a 64-bit process the full 16 exabytes so
 

00:09:48.440 --> 00:09:49.860 align:start position:0%
a 64-bit process the full 16 exabytes so
what<00:09:48.560><c> are</c><00:09:48.620><c> some</c><00:09:48.680><c> of</c><00:09:48.830><c> the</c><00:09:48.920><c> trade-offs</c><00:09:49.370><c> for</c>

00:09:49.860 --> 00:09:49.870 align:start position:0%
what are some of the trade-offs for
 

00:09:49.870 --> 00:09:52.150 align:start position:0%
what are some of the trade-offs for
compiling<00:09:50.870><c> for</c><00:09:51.170><c> 64</c><00:09:51.530><c> bits</c><00:09:51.680><c> because</c><00:09:51.890><c> now</c><00:09:52.100><c> you</c>

00:09:52.150 --> 00:09:52.160 align:start position:0%
compiling for 64 bits because now you
 

00:09:52.160 --> 00:09:53.530 align:start position:0%
compiling for 64 bits because now you
have<00:09:52.340><c> a</c><00:09:52.370><c> choice</c><00:09:52.670><c> of</c><00:09:52.970><c> whether</c><00:09:53.180><c> to</c><00:09:53.270><c> file</c><00:09:53.510><c> your</c>

00:09:53.530 --> 00:09:53.540 align:start position:0%
have a choice of whether to file your
 

00:09:53.540 --> 00:09:55.240 align:start position:0%
have a choice of whether to file your
same<00:09:53.870><c> barbecue</c><00:09:54.290><c> instructions</c><00:09:54.710><c> using</c><00:09:54.800><c> 32-bit</c>

00:09:55.240 --> 00:09:55.250 align:start position:0%
same barbecue instructions using 32-bit
 

00:09:55.250 --> 00:09:57.790 align:start position:0%
same barbecue instructions using 32-bit
conventions<00:09:55.880><c> or</c><00:09:55.970><c> 64-bit</c><00:09:56.570><c> conventions</c><00:09:57.020><c> well</c>

00:09:57.790 --> 00:09:57.800 align:start position:0%
conventions or 64-bit conventions well
 

00:09:57.800 --> 00:09:58.810 align:start position:0%
conventions or 64-bit conventions well
since<00:09:57.980><c> we</c><00:09:58.100><c> all</c><00:09:58.220><c> know</c><00:09:58.370><c> that</c><00:09:58.400><c> these</c><00:09:58.700><c> bitch</c>

00:09:58.810 --> 00:09:58.820 align:start position:0%
since we all know that these bitch
 

00:09:58.820 --> 00:10:00.370 align:start position:0%
since we all know that these bitch
events<00:09:59.180><c> conventions</c><00:09:59.540><c> what</c><00:09:59.930><c> they</c><00:10:00.020><c> mean</c><00:10:00.170><c> today</c>

00:10:00.370 --> 00:10:00.380 align:start position:0%
events conventions what they mean today
 

00:10:00.380 --> 00:10:02.140 align:start position:0%
events conventions what they mean today
let's<00:10:00.590><c> talk</c><00:10:00.770><c> about</c><00:10:01.220><c> the</c><00:10:01.640><c> trade-offs</c><00:10:01.880><c> of</c>

00:10:02.140 --> 00:10:02.150 align:start position:0%
let's talk about the trade-offs of
 

00:10:02.150 --> 00:10:06.550 align:start position:0%
let's talk about the trade-offs of
changing<00:10:02.810><c> to</c><00:10:02.930><c> 60</c><00:10:03.260><c> word</c><00:10:03.380><c> conventions</c><00:10:05.560><c> well</c>

00:10:06.550 --> 00:10:06.560 align:start position:0%
changing to 60 word conventions well
 

00:10:06.560 --> 00:10:08.500 align:start position:0%
changing to 60 word conventions well
there's<00:10:06.740><c> the</c><00:10:06.830><c> obvious</c><00:10:06.980><c> advantage</c><00:10:07.610><c> that</c><00:10:08.450><c> you</c>

00:10:08.500 --> 00:10:08.510 align:start position:0%
there's the obvious advantage that you
 

00:10:08.510 --> 00:10:10.570 align:start position:0%
there's the obvious advantage that you
now<00:10:08.690><c> get</c><00:10:08.870><c> a</c><00:10:08.900><c> huge</c><00:10:09.230><c> address</c><00:10:09.530><c> space</c><00:10:09.740><c> and</c><00:10:10.340><c> if</c><00:10:10.460><c> you</c>

00:10:10.570 --> 00:10:10.580 align:start position:0%
now get a huge address space and if you
 

00:10:10.580 --> 00:10:12.940 align:start position:0%
now get a huge address space and if you
have<00:10:10.700><c> lots</c><00:10:10.880><c> of</c><00:10:11.000><c> data</c><00:10:11.150><c> and</c><00:10:11.650><c> you</c><00:10:12.650><c> need</c><00:10:12.830><c> that</c>

00:10:12.940 --> 00:10:12.950 align:start position:0%
have lots of data and you need that
 

00:10:12.950 --> 00:10:14.890 align:start position:0%
have lots of data and you need that
address<00:10:13.100><c> space</c><00:10:13.520><c> then</c><00:10:14.330><c> this</c><00:10:14.450><c> is</c><00:10:14.600><c> the</c><00:10:14.630><c> advantage</c>

00:10:14.890 --> 00:10:14.900 align:start position:0%
address space then this is the advantage
 

00:10:14.900 --> 00:10:20.170 align:start position:0%
address space then this is the advantage
you<00:10:15.110><c> want</c><00:10:15.260><c> to</c><00:10:15.320><c> go</c><00:10:15.410><c> for</c><00:10:18.040><c> another</c><00:10:19.040><c> advantage</c><00:10:20.030><c> is</c>

00:10:20.170 --> 00:10:20.180 align:start position:0%
you want to go for another advantage is
 

00:10:20.180 --> 00:10:23.970 align:start position:0%
you want to go for another advantage is
if<00:10:20.480><c> you</c><00:10:21.080><c> are</c><00:10:21.110><c> using</c><00:10:21.640><c> 64-bit</c><00:10:22.640><c> computations</c>

00:10:23.970 --> 00:10:23.980 align:start position:0%
if you are using 64-bit computations
 

00:10:23.980 --> 00:10:26.140 align:start position:0%
if you are using 64-bit computations
64-bit<00:10:24.980><c> integer</c><00:10:25.280><c> commutations</c><00:10:25.820><c> but</c><00:10:26.030><c> you</c>

00:10:26.140 --> 00:10:26.150 align:start position:0%
64-bit integer commutations but you
 

00:10:26.150 --> 00:10:28.360 align:start position:0%
64-bit integer commutations but you
don't<00:10:26.360><c> need</c><00:10:26.570><c> the</c><00:10:26.660><c> full</c><00:10:26.810><c> address</c><00:10:27.140><c> space</c><00:10:27.350><c> one</c><00:10:28.310><c> of</c>

00:10:28.360 --> 00:10:28.370 align:start position:0%
don't need the full address space one of
 

00:10:28.370 --> 00:10:30.460 align:start position:0%
don't need the full address space one of
the<00:10:28.520><c> limitations</c><00:10:28.670><c> of</c><00:10:29.270><c> using</c><00:10:29.780><c> the</c><00:10:30.050><c> 32-bit</c>

00:10:30.460 --> 00:10:30.470 align:start position:0%
the limitations of using the 32-bit
 

00:10:30.470 --> 00:10:32.320 align:start position:0%
the limitations of using the 32-bit
calling<00:10:30.740><c> conventions</c><00:10:31.160><c> is</c><00:10:31.310><c> that</c><00:10:31.520><c> none</c><00:10:32.150><c> of</c><00:10:32.180><c> the</c>

00:10:32.320 --> 00:10:32.330 align:start position:0%
calling conventions is that none of the
 

00:10:32.330 --> 00:10:33.639 align:start position:0%
calling conventions is that none of the
functions<00:10:32.690><c> know</c><00:10:32.810><c> about</c>

00:10:33.639 --> 00:10:33.649 align:start position:0%
functions know about
 

00:10:33.649 --> 00:10:38.319 align:start position:0%
functions know about
I<00:10:33.680><c> a</c><00:10:34.749><c> 32</c><00:10:35.749><c> bits</c><00:10:35.899><c> and</c><00:10:36.050><c> registers</c><00:10:37.180><c> what</c><00:10:38.180><c> that</c>

00:10:38.319 --> 00:10:38.329 align:start position:0%
I a 32 bits and registers what that
 

00:10:38.329 --> 00:10:40.660 align:start position:0%
I a 32 bits and registers what that
means<00:10:38.569><c> is</c><00:10:38.779><c> when</c><00:10:39.019><c> you</c><00:10:39.170><c> compile</c><00:10:39.889><c> today</c><00:10:40.279><c> and</c><00:10:40.550><c> you</c>

00:10:40.660 --> 00:10:40.670 align:start position:0%
means is when you compile today and you
 

00:10:40.670 --> 00:10:42.040 align:start position:0%
means is when you compile today and you
tell<00:10:40.850><c> our</c><00:10:40.999><c> GCC</c><00:10:41.269><c> compiler</c><00:10:41.420><c> that</c><00:10:41.779><c> you're</c>

00:10:42.040 --> 00:10:42.050 align:start position:0%
tell our GCC compiler that you're
 

00:10:42.050 --> 00:10:43.480 align:start position:0%
tell our GCC compiler that you're
building<00:10:42.259><c> for</c><00:10:42.410><c> the</c><00:10:42.559><c> g5</c><00:10:42.889><c> you</c><00:10:43.100><c> want</c><00:10:43.220><c> to</c><00:10:43.279><c> optimize</c>

00:10:43.480 --> 00:10:43.490 align:start position:0%
building for the g5 you want to optimize
 

00:10:43.490 --> 00:10:47.109 align:start position:0%
building for the g5 you want to optimize
for<00:10:43.639><c> the</c><00:10:43.850><c> g5</c><00:10:45.009><c> whenever</c><00:10:46.009><c> in</c><00:10:46.249><c> any</c><00:10:46.430><c> leaf</c><00:10:46.699><c> function</c>

00:10:47.109 --> 00:10:47.119 align:start position:0%
for the g5 whenever in any leaf function
 

00:10:47.119 --> 00:10:49.030 align:start position:0%
for the g5 whenever in any leaf function
the<00:10:47.209><c> compiler</c><00:10:47.569><c> will</c><00:10:47.749><c> basically</c><00:10:48.019><c> make</c><00:10:48.410><c> use</c><00:10:49.009><c> of</c>

00:10:49.030 --> 00:10:49.040 align:start position:0%
the compiler will basically make use of
 

00:10:49.040 --> 00:10:52.540 align:start position:0%
the compiler will basically make use of
the<00:10:49.399><c> full</c><00:10:49.579><c> 64-bit</c><00:10:50.319><c> within</c><00:10:51.319><c> that</c><00:10:51.410><c> function</c><00:10:51.860><c> the</c>

00:10:52.540 --> 00:10:52.550 align:start position:0%
the full 64-bit within that function the
 

00:10:52.550 --> 00:10:54.100 align:start position:0%
the full 64-bit within that function the
compiler<00:10:52.850><c> cannot</c><00:10:53.179><c> do</c><00:10:53.360><c> that</c><00:10:53.480><c> when</c><00:10:53.629><c> I</c><00:10:53.660><c> crosses</c>

00:10:54.100 --> 00:10:54.110 align:start position:0%
compiler cannot do that when I crosses
 

00:10:54.110 --> 00:10:56.739 align:start position:0%
compiler cannot do that when I crosses
function<00:10:54.889><c> boundaries</c><00:10:55.309><c> that</c><00:10:55.790><c> is</c><00:10:55.939><c> if</c><00:10:56.600><c> the</c>

00:10:56.739 --> 00:10:56.749 align:start position:0%
function boundaries that is if the
 

00:10:56.749 --> 00:10:59.470 align:start position:0%
function boundaries that is if the
function<00:10:56.899><c> calls</c><00:10:57.230><c> another</c><00:10:57.410><c> function</c><00:10:58.480><c> the</c>

00:10:59.470 --> 00:10:59.480 align:start position:0%
function calls another function the
 

00:10:59.480 --> 00:11:00.699 align:start position:0%
function calls another function the
compile<00:10:59.749><c> have</c><00:10:59.899><c> to</c><00:10:59.990><c> worry</c><00:11:00.170><c> that</c><00:11:00.230><c> function</c><00:11:00.619><c> may</c>

00:11:00.699 --> 00:11:00.709 align:start position:0%
compile have to worry that function may
 

00:11:00.709 --> 00:11:02.259 align:start position:0%
compile have to worry that function may
trash<00:11:00.949><c> them</c><00:11:01.129><c> upper</c><00:11:01.399><c> it's</c><00:11:01.699><c> registered</c><00:11:01.910><c> so</c>

00:11:02.259 --> 00:11:02.269 align:start position:0%
trash them upper it's registered so
 

00:11:02.269 --> 00:11:04.269 align:start position:0%
trash them upper it's registered so
therefore<00:11:02.600><c> it</c><00:11:02.809><c> doesn't</c><00:11:03.199><c> use</c><00:11:03.439><c> 64</c><00:11:03.769><c> victim</c>

00:11:04.269 --> 00:11:04.279 align:start position:0%
therefore it doesn't use 64 victim
 

00:11:04.279 --> 00:11:06.119 align:start position:0%
therefore it doesn't use 64 victim
conventions<00:11:04.910><c> within</c><00:11:05.300><c> that</c><00:11:05.420><c> that</c><00:11:05.600><c> function</c>

00:11:06.119 --> 00:11:06.129 align:start position:0%
conventions within that that function
 

00:11:06.129 --> 00:11:09.100 align:start position:0%
conventions within that that function
now<00:11:07.129><c> once</c><00:11:07.639><c> you</c><00:11:07.759><c> switch</c><00:11:07.939><c> the</c><00:11:08.240><c> 64</c><00:11:08.569><c> e</c><00:11:08.629><c> conventions</c>

00:11:09.100 --> 00:11:09.110 align:start position:0%
now once you switch the 64 e conventions
 

00:11:09.110 --> 00:11:11.319 align:start position:0%
now once you switch the 64 e conventions
you<00:11:09.649><c> know</c><00:11:09.769><c> that</c><00:11:09.920><c> it's</c><00:11:10.040><c> safe</c><00:11:10.249><c> to</c><00:11:10.550><c> basically</c><00:11:11.209><c> use</c>

00:11:11.319 --> 00:11:11.329 align:start position:0%
you know that it's safe to basically use
 

00:11:11.329 --> 00:11:13.929 align:start position:0%
you know that it's safe to basically use
all<00:11:11.629><c> bits</c><00:11:12.079><c> of</c><00:11:12.259><c> registers</c><00:11:12.649><c> so</c><00:11:13.519><c> there</c><00:11:13.790><c> are</c><00:11:13.819><c> a</c>

00:11:13.929 --> 00:11:13.939 align:start position:0%
all bits of registers so there are a
 

00:11:13.939 --> 00:11:16.210 align:start position:0%
all bits of registers so there are a
small<00:11:14.240><c> cattery</c><00:11:14.660><c> of</c><00:11:14.869><c> applications</c><00:11:15.740><c> that</c><00:11:16.009><c> don't</c>

00:11:16.210 --> 00:11:16.220 align:start position:0%
small cattery of applications that don't
 

00:11:16.220 --> 00:11:17.590 align:start position:0%
small cattery of applications that don't
need<00:11:16.399><c> a</c><00:11:16.459><c> lot</c><00:11:16.639><c> of</c><00:11:16.699><c> data</c><00:11:16.970><c> don't</c><00:11:17.269><c> need</c><00:11:17.420><c> a</c><00:11:17.449><c> large</c>

00:11:17.590 --> 00:11:17.600 align:start position:0%
need a lot of data don't need a large
 

00:11:17.600 --> 00:11:19.480 align:start position:0%
need a lot of data don't need a large
address<00:11:17.749><c> space</c><00:11:18.110><c> but</c><00:11:18.740><c> because</c><00:11:19.069><c> they</c><00:11:19.160><c> use</c><00:11:19.339><c> a</c><00:11:19.369><c> lot</c>

00:11:19.480 --> 00:11:19.490 align:start position:0%
address space but because they use a lot
 

00:11:19.490 --> 00:11:21.579 align:start position:0%
address space but because they use a lot
of<00:11:19.670><c> security</c><00:11:19.910><c> risk</c><00:11:20.540><c> matech</c><00:11:20.869><c> can</c><00:11:21.439><c> take</c>

00:11:21.579 --> 00:11:21.589 align:start position:0%
of security risk matech can take
 

00:11:21.589 --> 00:11:24.059 align:start position:0%
of security risk matech can take
advantage<00:11:21.740><c> of</c><00:11:22.009><c> compiling</c><00:11:22.309><c> for</c><00:11:22.519><c> 64-bit</c><00:11:22.970><c> mode</c>

00:11:24.059 --> 00:11:24.069 align:start position:0%
advantage of compiling for 64-bit mode
 

00:11:24.069 --> 00:11:26.259 align:start position:0%
advantage of compiling for 64-bit mode
so<00:11:25.069><c> what's</c><00:11:25.220><c> a</c><00:11:25.309><c> disadvantage</c><00:11:25.850><c> of</c><00:11:25.970><c> compiling</c>

00:11:26.259 --> 00:11:26.269 align:start position:0%
so what's a disadvantage of compiling
 

00:11:26.269 --> 00:11:29.799 align:start position:0%
so what's a disadvantage of compiling
for<00:11:26.449><c> 64-bit</c><00:11:26.959><c> mode</c><00:11:27.079><c> as</c><00:11:28.059><c> I</c><00:11:29.059><c> said</c><00:11:29.119><c> before</c><00:11:29.240><c> the</c>

00:11:29.799 --> 00:11:29.809 align:start position:0%
for 64-bit mode as I said before the
 

00:11:29.809 --> 00:11:31.419 align:start position:0%
for 64-bit mode as I said before the
instructions<00:11:30.230><c> are</c><00:11:30.350><c> exactly</c><00:11:30.769><c> the</c><00:11:30.949><c> same</c><00:11:30.980><c> on</c>

00:11:31.419 --> 00:11:31.429 align:start position:0%
instructions are exactly the same on
 

00:11:31.429 --> 00:11:33.400 align:start position:0%
instructions are exactly the same on
powerpc<00:11:31.819><c> no</c><00:11:32.480><c> matter</c><00:11:32.629><c> which</c><00:11:32.779><c> way</c><00:11:32.809><c> you</c><00:11:32.929><c> compile</c>

00:11:33.400 --> 00:11:33.410 align:start position:0%
powerpc no matter which way you compile
 

00:11:33.410 --> 00:11:36.280 align:start position:0%
powerpc no matter which way you compile
but<00:11:34.399><c> the</c><00:11:34.490><c> difference</c><00:11:34.819><c> is</c><00:11:35.139><c> pointers</c><00:11:36.139><c> are</c>

00:11:36.280 --> 00:11:36.290 align:start position:0%
but the difference is pointers are
 

00:11:36.290 --> 00:11:39.819 align:start position:0%
but the difference is pointers are
bigger<00:11:36.499><c> in</c><00:11:36.679><c> 64</c><00:11:37.100><c> bits</c><00:11:37.279><c> there</c><00:11:37.610><c> are</c><00:11:37.730><c> 64</c><00:11:38.269><c> bit</c><00:11:38.829><c> what</c>

00:11:39.819 --> 00:11:39.829 align:start position:0%
bigger in 64 bits there are 64 bit what
 

00:11:39.829 --> 00:11:42.100 align:start position:0%
bigger in 64 bits there are 64 bit what
that<00:11:39.949><c> means</c><00:11:40.160><c> is</c><00:11:40.399><c> every</c><00:11:40.660><c> data</c><00:11:41.660><c> structure</c><00:11:42.019><c> you</c>

00:11:42.100 --> 00:11:42.110 align:start position:0%
that means is every data structure you
 

00:11:42.110 --> 00:11:43.540 align:start position:0%
that means is every data structure you
have<00:11:42.139><c> that</c><00:11:42.439><c> has</c><00:11:42.559><c> a</c><00:11:42.589><c> pointer</c><00:11:42.980><c> in</c><00:11:43.069><c> it</c><00:11:43.189><c> is</c><00:11:43.339><c> now</c>

00:11:43.540 --> 00:11:43.550 align:start position:0%
have that has a pointer in it is now
 

00:11:43.550 --> 00:11:45.999 align:start position:0%
have that has a pointer in it is now
bigger<00:11:44.050><c> overall</c><00:11:45.050><c> that</c><00:11:45.230><c> means</c><00:11:45.439><c> the</c><00:11:45.740><c> data</c><00:11:45.889><c> in</c>

00:11:45.999 --> 00:11:46.009 align:start position:0%
bigger overall that means the data in
 

00:11:46.009 --> 00:11:48.460 align:start position:0%
bigger overall that means the data in
the<00:11:46.100><c> application</c><00:11:46.610><c> is</c><00:11:46.759><c> bigger</c><00:11:47.149><c> when</c><00:11:48.110><c> the</c><00:11:48.199><c> data</c>

00:11:48.460 --> 00:11:48.470 align:start position:0%
the application is bigger when the data
 

00:11:48.470 --> 00:11:49.869 align:start position:0%
the application is bigger when the data
in<00:11:48.559><c> the</c><00:11:48.620><c> application</c><00:11:49.069><c> is</c><00:11:49.160><c> bigger</c><00:11:49.339><c> that</c><00:11:49.670><c> means</c>

00:11:49.869 --> 00:11:49.879 align:start position:0%
in the application is bigger that means
 

00:11:49.879 --> 00:11:51.189 align:start position:0%
in the application is bigger that means
you<00:11:49.939><c> need</c><00:11:50.089><c> to</c><00:11:50.209><c> take</c><00:11:50.300><c> up</c><00:11:50.449><c> more</c><00:11:50.629><c> address</c><00:11:50.990><c> space</c>

00:11:51.189 --> 00:11:51.199 align:start position:0%
you need to take up more address space
 

00:11:51.199 --> 00:11:52.960 align:start position:0%
you need to take up more address space
which<00:11:51.589><c> means</c><00:11:51.800><c> you</c><00:11:51.949><c> need</c><00:11:52.160><c> more</c><00:11:52.339><c> pages</c><00:11:52.610><c> and</c><00:11:52.850><c> rams</c>

00:11:52.960 --> 00:11:52.970 align:start position:0%
which means you need more pages and rams
 

00:11:52.970 --> 00:11:55.329 align:start position:0%
which means you need more pages and rams
run<00:11:53.209><c> your</c><00:11:53.329><c> process</c><00:11:53.689><c> on</c><00:11:54.410><c> one</c><00:11:54.589><c> hand</c><00:11:54.800><c> you</c><00:11:54.889><c> can</c><00:11:55.069><c> put</c>

00:11:55.329 --> 00:11:55.339 align:start position:0%
run your process on one hand you can put
 

00:11:55.339 --> 00:11:56.470 align:start position:0%
run your process on one hand you can put
more<00:11:55.429><c> round</c><00:11:55.639><c> on</c><00:11:55.730><c> the</c><00:11:55.790><c> machine</c><00:11:56.029><c> that</c><00:11:56.209><c> solves</c>

00:11:56.470 --> 00:11:56.480 align:start position:0%
more round on the machine that solves
 

00:11:56.480 --> 00:11:58.929 align:start position:0%
more round on the machine that solves
that<00:11:56.540><c> problem</c><00:11:56.620><c> but</c><00:11:57.620><c> there's</c><00:11:57.800><c> also</c><00:11:57.949><c> the</c><00:11:58.490><c> l1</c><00:11:58.819><c> and</c>

00:11:58.929 --> 00:11:58.939 align:start position:0%
that problem but there's also the l1 and
 

00:11:58.939 --> 00:12:01.329 align:start position:0%
that problem but there's also the l1 and
l2<00:11:59.059><c> caches</c><00:11:59.509><c> in</c><00:11:59.720><c> the</c><00:11:59.899><c> processor</c><00:12:00.439><c> and</c><00:12:00.649><c> they</c><00:12:01.160><c> try</c>

00:12:01.329 --> 00:12:01.339 align:start position:0%
l2 caches in the processor and they try
 

00:12:01.339 --> 00:12:03.220 align:start position:0%
l2 caches in the processor and they try
to<00:12:01.399><c> cash</c><00:12:01.670><c> the</c><00:12:01.910><c> most</c><00:12:02.059><c> recently</c><00:12:02.420><c> used</c><00:12:02.509><c> data</c><00:12:02.899><c> from</c>

00:12:03.220 --> 00:12:03.230 align:start position:0%
to cash the most recently used data from
 

00:12:03.230 --> 00:12:05.919 align:start position:0%
to cash the most recently used data from
the<00:12:03.980><c> entire</c><00:12:04.220><c> address</c><00:12:04.399><c> space</c><00:12:04.819><c> well</c><00:12:05.600><c> if</c><00:12:05.749><c> your</c>

00:12:05.919 --> 00:12:05.929 align:start position:0%
the entire address space well if your
 

00:12:05.929 --> 00:12:07.269 align:start position:0%
the entire address space well if your
data<00:12:06.199><c> set</c><00:12:06.410><c> for</c><00:12:06.529><c> your</c><00:12:06.589><c> app</c><00:12:06.679><c> is</c><00:12:06.800><c> larger</c><00:12:07.160><c> because</c>

00:12:07.269 --> 00:12:07.279 align:start position:0%
data set for your app is larger because
 

00:12:07.279 --> 00:12:09.429 align:start position:0%
data set for your app is larger because
your<00:12:07.579><c> pointer</c><00:12:07.850><c> is</c><00:12:07.910><c> a</c><00:12:07.970><c> larger</c><00:12:08.329><c> the</c><00:12:08.990><c> chances</c><00:12:09.410><c> of</c>

00:12:09.429 --> 00:12:09.439 align:start position:0%
your pointer is a larger the chances of
 

00:12:09.439 --> 00:12:11.079 align:start position:0%
your pointer is a larger the chances of
your<00:12:09.800><c> data</c><00:12:09.980><c> being</c><00:12:10.279><c> in</c><00:12:10.370><c> the</c><00:12:10.459><c> cache</c><00:12:10.639><c> is</c><00:12:10.850><c> slightly</c>

00:12:11.079 --> 00:12:11.089 align:start position:0%
your data being in the cache is slightly
 

00:12:11.089 --> 00:12:13.840 align:start position:0%
your data being in the cache is slightly
less<00:12:11.360><c> so</c><00:12:12.290><c> there</c><00:12:12.470><c> will</c><00:12:12.620><c> be</c><00:12:12.769><c> a</c><00:12:12.800><c> small</c><00:12:13.249><c> decreasing</c>

00:12:13.840 --> 00:12:13.850 align:start position:0%
less so there will be a small decreasing
 

00:12:13.850 --> 00:12:15.340 align:start position:0%
less so there will be a small decreasing
performance<00:12:14.300><c> for</c><00:12:14.509><c> compiling</c><00:12:14.749><c> physics</c><00:12:15.139><c> your</c>

00:12:15.340 --> 00:12:15.350 align:start position:0%
performance for compiling physics your
 

00:12:15.350 --> 00:12:17.499 align:start position:0%
performance for compiling physics your
bit<00:12:15.499><c> so</c><00:12:16.429><c> therefore</c><00:12:16.850><c> it</c><00:12:16.910><c> only</c><00:12:17.120><c> makes</c><00:12:17.389><c> sense</c>

00:12:17.499 --> 00:12:17.509 align:start position:0%
bit so therefore it only makes sense
 

00:12:17.509 --> 00:12:19.629 align:start position:0%
bit so therefore it only makes sense
because<00:12:17.959><c> offered</c><00:12:18.319><c> 64</c><00:12:18.620><c> bits</c><00:12:18.799><c> if</c><00:12:19.220><c> you</c><00:12:19.459><c> actually</c>

00:12:19.629 --> 00:12:19.639 align:start position:0%
because offered 64 bits if you actually
 

00:12:19.639 --> 00:12:22.269 align:start position:0%
because offered 64 bits if you actually
find<00:12:20.179><c> that</c><00:12:20.360><c> you</c><00:12:20.540><c> have</c><00:12:20.769><c> your</c><00:12:21.769><c> running</c><00:12:22.069><c> into</c>

00:12:22.269 --> 00:12:22.279 align:start position:0%
find that you have your running into
 

00:12:22.279 --> 00:12:26.139 align:start position:0%
find that you have your running into
limit<00:12:22.549><c> 0</c><00:12:22.639><c> afford</c><00:12:22.939><c> gig</c><00:12:23.120><c> address</c><00:12:23.449><c> space</c><00:12:25.149><c> another</c>

00:12:26.139 --> 00:12:26.149 align:start position:0%
limit 0 afford gig address space another
 

00:12:26.149 --> 00:12:27.759 align:start position:0%
limit 0 afford gig address space another
disadvantage<00:12:26.329><c> is</c><00:12:27.110><c> since</c><00:12:27.410><c> this</c><00:12:27.499><c> is</c><00:12:27.649><c> all</c>

00:12:27.759 --> 00:12:27.769 align:start position:0%
disadvantage is since this is all
 

00:12:27.769 --> 00:12:30.069 align:start position:0%
disadvantage is since this is all
conventions<00:12:28.339><c> is</c><00:12:28.879><c> any</c><00:12:29.149><c> libraries</c><00:12:29.689><c> you</c><00:12:29.779><c> depend</c>

00:12:30.069 --> 00:12:30.079 align:start position:0%
conventions is any libraries you depend
 

00:12:30.079 --> 00:12:31.989 align:start position:0%
conventions is any libraries you depend
on<00:12:30.199><c> also</c><00:12:30.829><c> have</c><00:12:30.949><c> to</c><00:12:31.069><c> be</c><00:12:31.160><c> available</c><00:12:31.610><c> with</c><00:12:31.910><c> the</c>

00:12:31.989 --> 00:12:31.999 align:start position:0%
on also have to be available with the
 

00:12:31.999 --> 00:12:33.519 align:start position:0%
on also have to be available with the
64-bit<00:12:32.509><c> convinced</c><00:12:32.959><c> otherwise</c><00:12:33.049><c> you</c><00:12:33.350><c> can't</c>

00:12:33.519 --> 00:12:33.529 align:start position:0%
64-bit convinced otherwise you can't
 

00:12:33.529 --> 00:12:36.309 align:start position:0%
64-bit convinced otherwise you can't
call<00:12:33.709><c> them</c><00:12:34.209><c> so</c><00:12:35.209><c> you</c><00:12:35.689><c> have</c><00:12:35.839><c> to</c><00:12:35.959><c> wait</c><00:12:36.079><c> till</c>

00:12:36.309 --> 00:12:36.319 align:start position:0%
call them so you have to wait till
 

00:12:36.319 --> 00:12:38.829 align:start position:0%
call them so you have to wait till
everything<00:12:37.220><c> below</c><00:12:37.459><c> you</c><00:12:37.519><c> as</c><00:12:37.850><c> been</c><00:12:38.509><c> converted</c>

00:12:38.829 --> 00:12:38.839 align:start position:0%
everything below you as been converted
 

00:12:38.839 --> 00:12:44.949 align:start position:0%
everything below you as been converted
60<00:12:39.110><c> more</c><00:12:39.230><c> risks</c><00:12:39.470><c> before</c><00:12:39.559><c> you</c><00:12:39.799><c> can</c><00:12:39.949><c> convert</c>

00:12:44.949 --> 00:12:44.959 align:start position:0%
 
 

00:12:44.959 --> 00:12:47.329 align:start position:0%
 
now<00:12:45.959><c> that</c><00:12:46.079><c> explains</c><00:12:46.379><c> it</c><00:12:46.470><c> how</c><00:12:46.709><c> the</c><00:12:46.769><c> powerpc</c>

00:12:47.329 --> 00:12:47.339 align:start position:0%
now that explains it how the powerpc
 

00:12:47.339 --> 00:12:50.059 align:start position:0%
now that explains it how the powerpc
works<00:12:47.579><c> and</c><00:12:47.759><c> how</c><00:12:47.850><c> there's</c><00:12:48.059><c> no</c><00:12:48.119><c> 64-bit</c><00:12:48.899><c> mode</c><00:12:49.110><c> now</c>

00:12:50.059 --> 00:12:50.069 align:start position:0%
works and how there's no 64-bit mode now
 

00:12:50.069 --> 00:12:51.319 align:start position:0%
works and how there's no 64-bit mode now
to<00:12:50.129><c> explain</c><00:12:50.249><c> how</c><00:12:50.850><c> we're</c><00:12:51.059><c> going</c><00:12:51.149><c> to</c><00:12:51.209><c> actually</c>

00:12:51.319 --> 00:12:51.329 align:start position:0%
to explain how we're going to actually
 

00:12:51.329 --> 00:12:55.069 align:start position:0%
to explain how we're going to actually
roll<00:12:51.600><c> out</c><00:12:51.749><c> 64-bit</c><00:12:53.660><c> let</c><00:12:54.660><c> me</c><00:12:54.720><c> explain</c><00:12:54.959><c> what</c>

00:12:55.069 --> 00:12:55.079 align:start position:0%
roll out 64-bit let me explain what
 

00:12:55.079 --> 00:12:57.079 align:start position:0%
roll out 64-bit let me explain what
we're<00:12:55.199><c> not</c><00:12:55.350><c> going</c><00:12:55.619><c> to</c><00:12:55.709><c> do</c><00:12:55.800><c> there's</c><00:12:56.339><c> not</c><00:12:56.759><c> going</c>

00:12:57.079 --> 00:12:57.089 align:start position:0%
we're not going to do there's not going
 

00:12:57.089 --> 00:12:59.449 align:start position:0%
we're not going to do there's not going
to<00:12:57.180><c> be</c><00:12:57.240><c> a</c><00:12:57.360><c> 64-bit</c><00:12:58.139><c> macula</c><00:12:58.529><c> 10</c><00:12:58.740><c> and</c><00:12:58.949><c> a</c><00:12:59.040><c> 32-bit</c>

00:12:59.449 --> 00:12:59.459 align:start position:0%
to be a 64-bit macula 10 and a 32-bit
 

00:12:59.459 --> 00:13:01.970 align:start position:0%
to be a 64-bit macula 10 and a 32-bit
Mac<00:12:59.610><c> os10</c><00:12:59.879><c> there's</c><00:13:00.569><c> only</c><00:13:00.749><c> going</c><00:13:00.990><c> to</c><00:13:01.079><c> be</c><00:13:01.170><c> mac</c><00:13:01.740><c> OS</c>

00:13:01.970 --> 00:13:01.980 align:start position:0%
Mac os10 there's only going to be mac OS
 

00:13:01.980 --> 00:13:05.239 align:start position:0%
Mac os10 there's only going to be mac OS
10<00:13:02.660><c> when</c><00:13:03.660><c> you</c><00:13:03.779><c> happen</c><00:13:04.019><c> to</c><00:13:04.110><c> run</c><00:13:04.199><c> the</c><00:13:04.379><c> g5</c><00:13:04.769><c> the</c>

00:13:05.239 --> 00:13:05.249 align:start position:0%
10 when you happen to run the g5 the
 

00:13:05.249 --> 00:13:07.600 align:start position:0%
10 when you happen to run the g5 the
colonel<00:13:05.579><c> will</c><00:13:05.639><c> recognize</c><00:13:06.119><c> it</c><00:13:06.149><c> and</c><00:13:06.509><c> allow</c>

00:13:07.600 --> 00:13:07.610 align:start position:0%
colonel will recognize it and allow
 

00:13:07.610 --> 00:13:10.220 align:start position:0%
colonel will recognize it and allow
programs<00:13:08.610><c> that</c><00:13:08.850><c> are</c><00:13:09.209><c> marked</c><00:13:09.689><c> as</c><00:13:09.779><c> using</c><00:13:10.019><c> 64-bit</c>

00:13:10.220 --> 00:13:10.230 align:start position:0%
programs that are marked as using 64-bit
 

00:13:10.230 --> 00:13:13.970 align:start position:0%
programs that are marked as using 64-bit
conventions<00:13:11.040><c> to</c><00:13:11.790><c> be</c><00:13:11.910><c> launched</c><00:13:12.300><c> and</c><00:13:12.980><c> they'll</c>

00:13:13.970 --> 00:13:13.980 align:start position:0%
conventions to be launched and they'll
 

00:13:13.980 --> 00:13:19.519 align:start position:0%
conventions to be launched and they'll
be<00:13:14.069><c> set</c><00:13:14.249><c> up</c><00:13:14.339><c> with</c><00:13:14.369><c> 64-bit</c><00:13:14.819><c> address</c><00:13:14.970><c> spaces</c><00:13:18.529><c> for</c>

00:13:19.519 --> 00:13:19.529 align:start position:0%
be set up with 64-bit address spaces for
 

00:13:19.529 --> 00:13:21.350 align:start position:0%
be set up with 64-bit address spaces for
Tiger<00:13:20.009><c> all</c><00:13:20.220><c> Apple</c><00:13:20.579><c> is</c><00:13:20.639><c> committing</c><00:13:20.970><c> to</c><00:13:21.089><c> at</c><00:13:21.209><c> this</c>

00:13:21.350 --> 00:13:21.360 align:start position:0%
Tiger all Apple is committing to at this
 

00:13:21.360 --> 00:13:23.299 align:start position:0%
Tiger all Apple is committing to at this
point<00:13:21.689><c> is</c><00:13:21.899><c> that</c><00:13:22.139><c> lid</c><00:13:22.410><c> system</c><00:13:22.889><c> will</c><00:13:23.220><c> be</c>

00:13:23.299 --> 00:13:23.309 align:start position:0%
point is that lid system will be
 

00:13:23.309 --> 00:13:25.369 align:start position:0%
point is that lid system will be
available<00:13:23.550><c> to</c><00:13:23.819><c> 64-bit</c><00:13:24.329><c> programs</c><00:13:24.689><c> blood</c>

00:13:25.369 --> 00:13:25.379 align:start position:0%
available to 64-bit programs blood
 

00:13:25.379 --> 00:13:27.199 align:start position:0%
available to 64-bit programs blood
system<00:13:25.679><c> is</c><00:13:25.860><c> the</c><00:13:25.980><c> standard</c><00:13:26.339><c> C</c><00:13:26.639><c> library</c><00:13:26.819><c> and</c>

00:13:27.199 --> 00:13:27.209 align:start position:0%
system is the standard C library and
 

00:13:27.209 --> 00:13:29.179 align:start position:0%
system is the standard C library and
most<00:13:27.329><c> of</c><00:13:27.420><c> the</c><00:13:27.509><c> POSIX</c><00:13:27.869><c> functionality</c><00:13:28.470><c> which</c>

00:13:29.179 --> 00:13:29.189 align:start position:0%
most of the POSIX functionality which
 

00:13:29.189 --> 00:13:31.009 align:start position:0%
most of the POSIX functionality which
means<00:13:29.429><c> command-line</c><00:13:29.910><c> applications</c><00:13:30.540><c> and</c>

00:13:31.009 --> 00:13:31.019 align:start position:0%
means command-line applications and
 

00:13:31.019 --> 00:13:32.900 align:start position:0%
means command-line applications and
applications<00:13:31.559><c> with</c><00:13:31.740><c> no</c><00:13:31.889><c> you</c><00:13:31.949><c> I</c><00:13:32.069><c> will</c><00:13:32.730><c> be</c><00:13:32.819><c> able</c>

00:13:32.900 --> 00:13:32.910 align:start position:0%
applications with no you I will be able
 

00:13:32.910 --> 00:13:36.280 align:start position:0%
applications with no you I will be able
to<00:13:33.089><c> convert</c><00:13:34.019><c> to</c><00:13:34.290><c> 64</c><00:13:34.740><c> bits</c><00:13:34.920><c> if</c><00:13:35.129><c> they</c><00:13:35.490><c> so</c><00:13:35.790><c> choose</c>

00:13:36.280 --> 00:13:36.290 align:start position:0%
to convert to 64 bits if they so choose
 

00:13:36.290 --> 00:13:38.480 align:start position:0%
to convert to 64 bits if they so choose
over<00:13:37.290><c> time</c><00:13:37.499><c> I</c><00:13:37.529><c> will</c><00:13:37.829><c> be</c><00:13:37.920><c> rolling</c><00:13:38.160><c> up</c><00:13:38.279><c> more</c>

00:13:38.480 --> 00:13:38.490 align:start position:0%
over time I will be rolling up more
 

00:13:38.490 --> 00:13:40.189 align:start position:0%
over time I will be rolling up more
libraries<00:13:38.699><c> and</c><00:13:39.119><c> one</c><00:13:39.689><c> of</c><00:13:39.779><c> things</c><00:13:39.809><c> we</c><00:13:39.959><c> want</c><00:13:40.170><c> to</c>

00:13:40.189 --> 00:13:40.199 align:start position:0%
libraries and one of things we want to
 

00:13:40.199 --> 00:13:42.079 align:start position:0%
libraries and one of things we want to
hear<00:13:40.319><c> back</c><00:13:40.529><c> from</c><00:13:40.559><c> you</c><00:13:40.800><c> is</c><00:13:41.040><c> what</c><00:13:41.369><c> library</c>

00:13:42.079 --> 00:13:42.089 align:start position:0%
hear back from you is what library
 

00:13:42.089 --> 00:13:43.369 align:start position:0%
hear back from you is what library
should<00:13:42.179><c> we</c><00:13:42.329><c> do</c><00:13:42.449><c> first</c><00:13:42.720><c> what</c><00:13:43.139><c> are</c><00:13:43.230><c> most</c>

00:13:43.369 --> 00:13:43.379 align:start position:0%
should we do first what are most
 

00:13:43.379 --> 00:13:45.769 align:start position:0%
should we do first what are most
important<00:13:43.800><c> to</c><00:13:43.829><c> you</c><00:13:43.920><c> you</c><00:13:44.149><c> being</c><00:13:45.149><c> people</c><00:13:45.449><c> first</c>

00:13:45.769 --> 00:13:45.779 align:start position:0%
important to you you being people first
 

00:13:45.779 --> 00:13:50.540 align:start position:0%
important to you you being people first
converting<00:13:46.379><c> to</c><00:13:46.470><c> 64-bit</c><00:13:49.220><c> now</c><00:13:50.220><c> I</c><00:13:50.249><c> want</c><00:13:50.370><c> to</c><00:13:50.459><c> go</c>

00:13:50.540 --> 00:13:50.550 align:start position:0%
converting to 64-bit now I want to go
 

00:13:50.550 --> 00:13:52.009 align:start position:0%
converting to 64-bit now I want to go
into<00:13:50.639><c> a</c><00:13:50.730><c> little</c><00:13:50.790><c> more</c><00:13:50.910><c> detail</c><00:13:51.569><c> and</c><00:13:51.809><c> you</c><00:13:51.899><c> got</c>

00:13:52.009 --> 00:13:52.019 align:start position:0%
into a little more detail and you got
 

00:13:52.019 --> 00:13:54.139 align:start position:0%
into a little more detail and you got
the<00:13:52.079><c> big</c><00:13:52.230><c> picture</c><00:13:52.439><c> of</c><00:13:52.589><c> how</c><00:13:52.800><c> 64-bit</c><00:13:53.759><c> processing</c>

00:13:54.139 --> 00:13:54.149 align:start position:0%
the big picture of how 64-bit processing
 

00:13:54.149 --> 00:13:56.720 align:start position:0%
the big picture of how 64-bit processing
works<00:13:54.389><c> of</c><00:13:54.509><c> Power</c><00:13:54.629><c> PC</c><00:13:55.220><c> how</c><00:13:56.220><c> actually</c><00:13:56.429><c> going</c><00:13:56.639><c> to</c>

00:13:56.720 --> 00:13:56.730 align:start position:0%
works of Power PC how actually going to
 

00:13:56.730 --> 00:13:58.819 align:start position:0%
works of Power PC how actually going to
roll<00:13:56.850><c> this</c><00:13:56.879><c> out</c><00:13:57.120><c> the</c><00:13:58.110><c> most</c><00:13:58.290><c> interesting</c><00:13:58.679><c> thing</c>

00:13:58.819 --> 00:13:58.829 align:start position:0%
roll this out the most interesting thing
 

00:13:58.829 --> 00:14:01.309 align:start position:0%
roll this out the most interesting thing
is<00:13:58.980><c> a</c><00:13:59.009><c> last</c><00:13:59.249><c> point</c><00:13:59.519><c> here</c><00:14:00.050><c> we're</c><00:14:01.050><c> gonna</c><00:14:01.110><c> have</c><00:14:01.290><c> a</c>

00:14:01.309 --> 00:14:01.319 align:start position:0%
is a last point here we're gonna have a
 

00:14:01.319 --> 00:14:04.579 align:start position:0%
is a last point here we're gonna have a
single<00:14:01.620><c> kernel</c><00:14:02.600><c> the</c><00:14:03.600><c> single</c><00:14:03.959><c> kernel</c><00:14:04.139><c> is</c><00:14:04.410><c> going</c>

00:14:04.579 --> 00:14:04.589 align:start position:0%
single kernel the single kernel is going
 

00:14:04.589 --> 00:14:07.579 align:start position:0%
single kernel the single kernel is going
to<00:14:04.649><c> be</c><00:14:04.740><c> a</c><00:14:04.769><c> 32-bit</c><00:14:05.519><c> Colonel</c><00:14:06.110><c> we</c><00:14:07.110><c> can</c><00:14:07.290><c> do</c><00:14:07.439><c> this</c>

00:14:07.579 --> 00:14:07.589 align:start position:0%
to be a 32-bit Colonel we can do this
 

00:14:07.589 --> 00:14:09.230 align:start position:0%
to be a 32-bit Colonel we can do this
because<00:14:07.769><c> of</c><00:14:07.920><c> the</c><00:14:08.040><c> PowerPC</c><00:14:08.459><c> architecture</c><00:14:08.490><c> it's</c>

00:14:09.230 --> 00:14:09.240 align:start position:0%
because of the PowerPC architecture it's
 

00:14:09.240 --> 00:14:11.179 align:start position:0%
because of the PowerPC architecture it's
just<00:14:09.540><c> conventions</c><00:14:10.110><c> a</c><00:14:10.259><c> third</c><00:14:10.679><c> G</c><00:14:10.800><c> bit</c><00:14:10.949><c> kernel</c>

00:14:11.179 --> 00:14:11.189 align:start position:0%
just conventions a third G bit kernel
 

00:14:11.189 --> 00:14:15.259 align:start position:0%
just conventions a third G bit kernel
can<00:14:11.910><c> launch</c><00:14:12.179><c> a</c><00:14:12.300><c> 64-bit</c><00:14:12.839><c> process</c><00:14:13.699><c> the</c><00:14:14.699><c> single</c>

00:14:15.259 --> 00:14:15.269 align:start position:0%
can launch a 64-bit process the single
 

00:14:15.269 --> 00:14:17.419 align:start position:0%
can launch a 64-bit process the single
kernel<00:14:15.420><c> has</c><00:14:15.600><c> a</c><00:14:15.749><c> number</c><00:14:15.959><c> of</c><00:14:16.079><c> advantages</c><00:14:16.429><c> first</c>

00:14:17.419 --> 00:14:17.429 align:start position:0%
kernel has a number of advantages first
 

00:14:17.429 --> 00:14:19.189 align:start position:0%
kernel has a number of advantages first
of<00:14:17.579><c> all</c><00:14:17.639><c> it</c><00:14:17.759><c> means</c><00:14:17.850><c> we</c><00:14:18.059><c> can</c><00:14:18.209><c> produce</c><00:14:18.360><c> one</c><00:14:18.959><c> disk</c>

00:14:19.189 --> 00:14:19.199 align:start position:0%
of all it means we can produce one disk
 

00:14:19.199 --> 00:14:21.340 align:start position:0%
of all it means we can produce one disk
because<00:14:19.319><c> that</c><00:14:19.499><c> can</c><00:14:19.620><c> boot</c><00:14:19.769><c> on</c><00:14:19.889><c> any</c><00:14:20.040><c> machine</c>

00:14:21.340 --> 00:14:21.350 align:start position:0%
because that can boot on any machine
 

00:14:21.350 --> 00:14:23.660 align:start position:0%
because that can boot on any machine
second<00:14:22.350><c> it</c><00:14:22.439><c> means</c><00:14:22.620><c> all</c><00:14:22.860><c> the</c><00:14:22.889><c> existing</c><00:14:23.160><c> kernel</c>

00:14:23.660 --> 00:14:23.670 align:start position:0%
second it means all the existing kernel
 

00:14:23.670 --> 00:14:25.400 align:start position:0%
second it means all the existing kernel
extensions<00:14:23.970><c> and</c><00:14:24.300><c> device</c><00:14:24.689><c> drivers</c><00:14:25.139><c> that</c><00:14:25.379><c> are</c>

00:14:25.400 --> 00:14:25.410 align:start position:0%
extensions and device drivers that are
 

00:14:25.410 --> 00:14:27.319 align:start position:0%
extensions and device drivers that are
all<00:14:25.559><c> written</c><00:14:25.740><c> 230v</c><00:14:26.429><c> conventions</c><00:14:26.850><c> will</c><00:14:27.120><c> still</c>

00:14:27.319 --> 00:14:27.329 align:start position:0%
all written 230v conventions will still
 

00:14:27.329 --> 00:14:32.900 align:start position:0%
all written 230v conventions will still
run<00:14:27.449><c> within</c><00:14:27.660><c> it</c><00:14:31.370><c> some</c><00:14:32.370><c> of</c><00:14:32.490><c> you</c><00:14:32.579><c> may</c><00:14:32.730><c> have</c><00:14:32.759><c> heard</c>

00:14:32.900 --> 00:14:32.910 align:start position:0%
run within it some of you may have heard
 

00:14:32.910 --> 00:14:36.410 align:start position:0%
run within it some of you may have heard
the<00:14:33.089><c> term</c><00:14:33.149><c> LP</c><00:14:33.929><c> 64</c><00:14:34.470><c> for</c><00:14:34.920><c> data</c><00:14:35.069><c> models</c><00:14:35.429><c> that</c><00:14:36.269><c> is</c>

00:14:36.410 --> 00:14:36.420 align:start position:0%
the term LP 64 for data models that is
 

00:14:36.420 --> 00:14:38.360 align:start position:0%
the term LP 64 for data models that is
the<00:14:36.629><c> convention</c><00:14:37.170><c> that</c><00:14:37.319><c> we</c><00:14:37.499><c> have</c><00:14:37.620><c> chosen</c><00:14:38.129><c> to</c>

00:14:38.360 --> 00:14:38.370 align:start position:0%
the convention that we have chosen to
 

00:14:38.370 --> 00:14:40.639 align:start position:0%
the convention that we have chosen to
adopt<00:14:38.459><c> for</c><00:14:38.939><c> 60</c><00:14:39.569><c> bit</c><00:14:39.720><c> 64-bit</c><00:14:40.439><c> calling</c>

00:14:40.639 --> 00:14:40.649 align:start position:0%
adopt for 60 bit 64-bit calling
 

00:14:40.649 --> 00:14:43.039 align:start position:0%
adopt for 60 bit 64-bit calling
conventions<00:14:41.009><c> on</c><00:14:41.160><c> vaca</c><00:14:41.339><c> was</c><00:14:41.519><c> 10</c><00:14:41.730><c> now</c><00:14:42.689><c> I</c><00:14:42.720><c> want</c><00:14:42.929><c> to</c>

00:14:43.039 --> 00:14:43.049 align:start position:0%
conventions on vaca was 10 now I want to
 

00:14:43.049 --> 00:14:44.720 align:start position:0%
conventions on vaca was 10 now I want to
go<00:14:43.350><c> through</c><00:14:43.860><c> a</c><00:14:43.889><c> little</c><00:14:44.069><c> bit</c><00:14:44.100><c> of</c><00:14:44.189><c> history</c><00:14:44.459><c> of</c>

00:14:44.720 --> 00:14:44.730 align:start position:0%
go through a little bit of history of
 

00:14:44.730 --> 00:14:46.609 align:start position:0%
go through a little bit of history of
where<00:14:44.910><c> these</c><00:14:44.999><c> acronyms</c><00:14:45.389><c> came</c><00:14:45.689><c> from</c><00:14:45.899><c> let's</c><00:14:46.529><c> go</c>

00:14:46.609 --> 00:14:46.619 align:start position:0%
where these acronyms came from let's go
 

00:14:46.619 --> 00:14:48.619 align:start position:0%
where these acronyms came from let's go
back<00:14:46.799><c> in</c><00:14:46.949><c> time</c><00:14:47.069><c> to</c><00:14:47.220><c> the</c><00:14:47.249><c> early</c><00:14:47.549><c> 90s</c><00:14:47.970><c> with</c><00:14:48.509><c> the</c>

00:14:48.619 --> 00:14:48.629 align:start position:0%
back in time to the early 90s with the
 

00:14:48.629 --> 00:14:51.079 align:start position:0%
back in time to the early 90s with the
pioneers<00:14:49.139><c> and</c><00:14:49.199><c> 64-bit</c><00:14:49.799><c> computing</c><00:14:50.100><c> or</c><00:14:50.610><c> prey</c>

00:14:51.079 --> 00:14:51.089 align:start position:0%
pioneers and 64-bit computing or prey
 

00:14:51.089 --> 00:14:54.480 align:start position:0%
pioneers and 64-bit computing or prey
and<00:14:51.240><c> alpha</c>

00:14:54.480 --> 00:14:54.490 align:start position:0%
 
 

00:14:54.490 --> 00:14:56.500 align:start position:0%
 
now<00:14:55.490><c> once</c><00:14:55.670><c> they</c><00:14:55.760><c> got</c><00:14:55.880><c> the</c><00:14:55.970><c> hardware</c><00:14:56.300><c> done</c><00:14:56.420><c> they</c>

00:14:56.500 --> 00:14:56.510 align:start position:0%
now once they got the hardware done they
 

00:14:56.510 --> 00:14:57.730 align:start position:0%
now once they got the hardware done they
started<00:14:56.750><c> looking</c><00:14:56.810><c> at</c><00:14:57.019><c> the</c><00:14:57.079><c> c</c><00:14:57.230><c> language</c><00:14:57.380><c> or</c>

00:14:57.730 --> 00:14:57.740 align:start position:0%
started looking at the c language or
 

00:14:57.740 --> 00:15:00.269 align:start position:0%
started looking at the c language or
like<00:14:57.890><c> well</c><00:14:58.160><c> how</c><00:14:58.579><c> big</c><00:14:58.820><c> shouldn't</c><00:14:59.120><c> in</c><00:14:59.240><c> a</c><00:14:59.510><c> long</c><00:14:59.720><c> be</c>

00:15:00.269 --> 00:15:00.279 align:start position:0%
like well how big shouldn't in a long be
 

00:15:00.279 --> 00:15:02.800 align:start position:0%
like well how big shouldn't in a long be
well<00:15:01.279><c> they</c><00:15:01.459><c> were</c><00:15:01.519><c> gung</c><00:15:01.760><c> ho</c><00:15:01.910><c> /</c><00:15:02.060><c> 64</c><00:15:02.420><c> bit</c><00:15:02.570><c> so</c><00:15:02.720><c> they</c>

00:15:02.800 --> 00:15:02.810 align:start position:0%
well they were gung ho / 64 bit so they
 

00:15:02.810 --> 00:15:04.210 align:start position:0%
well they were gung ho / 64 bit so they
said<00:15:02.990><c> well</c><00:15:03.019><c> we're</c><00:15:03.500><c> going</c><00:15:03.649><c> to</c><00:15:03.709><c> make</c><00:15:03.829><c> an</c><00:15:03.920><c> intent</c>

00:15:04.210 --> 00:15:04.220 align:start position:0%
said well we're going to make an intent
 

00:15:04.220 --> 00:15:07.530 align:start position:0%
said well we're going to make an intent
along<00:15:04.399><c> all</c><00:15:04.640><c> 64</c><00:15:05.120><c> bits</c><00:15:05.300><c> as</c><00:15:05.420><c> well</c><00:15:05.600><c> as</c><00:15:05.690><c> pointers</c>

00:15:07.530 --> 00:15:07.540 align:start position:0%
along all 64 bits as well as pointers
 

00:15:07.540 --> 00:15:09.250 align:start position:0%
along all 64 bits as well as pointers
evasions<00:15:08.540><c> that</c><00:15:08.660><c> rolled</c><00:15:08.839><c> out</c><00:15:08.959><c> to</c><00:15:09.050><c> more</c><00:15:09.200><c> and</c>

00:15:09.250 --> 00:15:09.260 align:start position:0%
evasions that rolled out to more and
 

00:15:09.260 --> 00:15:10.540 align:start position:0%
evasions that rolled out to more and
more<00:15:09.320><c> programmers</c><00:15:09.740><c> and</c><00:15:09.980><c> more</c><00:15:10.130><c> more</c><00:15:10.279><c> programs</c>

00:15:10.540 --> 00:15:10.550 align:start position:0%
more programmers and more more programs
 

00:15:10.550 --> 00:15:12.730 align:start position:0%
more programmers and more more programs
as<00:15:10.730><c> they</c><00:15:10.820><c> use</c><00:15:10.970><c> that</c><00:15:11.180><c> said</c><00:15:11.390><c> bang</c><00:15:12.079><c> it</c><00:15:12.320><c> is</c><00:15:12.470><c> hard</c><00:15:12.680><c> to</c>

00:15:12.730 --> 00:15:12.740 align:start position:0%
as they use that said bang it is hard to
 

00:15:12.740 --> 00:15:14.949 align:start position:0%
as they use that said bang it is hard to
use<00:15:13.010><c> because</c><00:15:13.610><c> I've</c><00:15:14.029><c> got</c><00:15:14.300><c> this</c><00:15:14.390><c> file</c><00:15:14.630><c> format</c>

00:15:14.949 --> 00:15:14.959 align:start position:0%
use because I've got this file format
 

00:15:14.959 --> 00:15:16.300 align:start position:0%
use because I've got this file format
that<00:15:15.079><c> has</c><00:15:15.200><c> 32-bit</c><00:15:15.620><c> values</c><00:15:15.920><c> in</c><00:15:16.040><c> it</c><00:15:16.130><c> or</c><00:15:16.279><c> I</c>

00:15:16.300 --> 00:15:16.310 align:start position:0%
that has 32-bit values in it or I
 

00:15:16.310 --> 00:15:17.710 align:start position:0%
that has 32-bit values in it or I
discusses<00:15:16.730><c> network</c><00:15:17.000><c> packet</c><00:15:17.329><c> with</c><00:15:17.420><c> 32-bit</c>

00:15:17.710 --> 00:15:17.720 align:start position:0%
discusses network packet with 32-bit
 

00:15:17.720 --> 00:15:19.870 align:start position:0%
discusses network packet with 32-bit
values<00:15:18.079><c> in</c><00:15:18.200><c> it</c><00:15:18.290><c> it's</c><00:15:19.190><c> really</c><00:15:19.339><c> hard</c><00:15:19.579><c> to</c><00:15:19.640><c> get</c><00:15:19.730><c> to</c>

00:15:19.870 --> 00:15:19.880 align:start position:0%
values in it it's really hard to get to
 

00:15:19.880 --> 00:15:20.949 align:start position:0%
values in it it's really hard to get to
because<00:15:20.060><c> there's</c><00:15:20.209><c> knows</c><00:15:20.390><c> already</c><00:15:20.690><c> a</c><00:15:20.839><c> bit</c>

00:15:20.949 --> 00:15:20.959 align:start position:0%
because there's knows already a bit
 

00:15:20.959 --> 00:15:25.030 align:start position:0%
because there's knows already a bit
tight<00:15:21.140><c> in</c><00:15:21.410><c> the</c><00:15:21.800><c> C</c><00:15:21.980><c> language</c><00:15:23.140><c> so</c><00:15:24.140><c> when</c><00:15:24.920><c> the</c><00:15:25.010><c> next</c>

00:15:25.030 --> 00:15:25.040 align:start position:0%
tight in the C language so when the next
 

00:15:25.040 --> 00:15:29.829 align:start position:0%
tight in the C language so when the next
generation<00:15:25.790><c> of</c><00:15:28.149><c> 60</c><00:15:29.149><c> words</c><00:15:29.269><c> of</c><00:15:29.390><c> processors</c>

00:15:29.829 --> 00:15:29.839 align:start position:0%
generation of 60 words of processors
 

00:15:29.839 --> 00:15:32.440 align:start position:0%
generation of 60 words of processors
came<00:15:30.019><c> out</c><00:15:30.200><c> for</c><00:15:30.620><c> solaris</c><00:15:31.310><c> and</c><00:15:31.700><c> SGI</c><00:15:32.029><c> and</c>

00:15:32.440 --> 00:15:32.450 align:start position:0%
came out for solaris and SGI and
 

00:15:32.450 --> 00:15:34.060 align:start position:0%
came out for solaris and SGI and
eventually<00:15:32.750><c> linux</c><00:15:33.019><c> and</c><00:15:33.140><c> stuff</c><00:15:33.320><c> they</c><00:15:33.800><c> all</c><00:15:33.920><c> look</c>

00:15:34.060 --> 00:15:34.070 align:start position:0%
eventually linux and stuff they all look
 

00:15:34.070 --> 00:15:35.500 align:start position:0%
eventually linux and stuff they all look
back<00:15:34.310><c> at</c><00:15:34.490><c> the</c><00:15:34.550><c> early</c><00:15:34.640><c> pioneers</c><00:15:34.910><c> and</c><00:15:35.240><c> said</c>

00:15:35.500 --> 00:15:35.510 align:start position:0%
back at the early pioneers and said
 

00:15:35.510 --> 00:15:36.730 align:start position:0%
back at the early pioneers and said
we're<00:15:35.930><c> not</c><00:15:35.959><c> going</c><00:15:36.170><c> to</c><00:15:36.230><c> do</c><00:15:36.290><c> that</c><00:15:36.350><c> we're</c><00:15:36.649><c> going</c>

00:15:36.730 --> 00:15:36.740 align:start position:0%
we're not going to do that we're going
 

00:15:36.740 --> 00:15:39.880 align:start position:0%
we're not going to do that we're going
to<00:15:36.829><c> use</c><00:15:36.920><c> LP</c><00:15:37.279><c> 64</c><00:15:37.820><c> an</c><00:15:38.029><c> LT</c><00:15:38.810><c> 64</c><00:15:39.290><c> Long's</c><00:15:39.649><c> and</c>

00:15:39.880 --> 00:15:39.890 align:start position:0%
to use LP 64 an LT 64 Long's and
 

00:15:39.890 --> 00:15:42.160 align:start position:0%
to use LP 64 an LT 64 Long's and
pointers<00:15:40.279><c> or</c><00:15:40.399><c> 64</c><00:15:40.880><c> bits</c><00:15:41.060><c> but</c><00:15:41.480><c> integers</c><00:15:41.930><c> remain</c>

00:15:42.160 --> 00:15:42.170 align:start position:0%
pointers or 64 bits but integers remain
 

00:15:42.170 --> 00:15:44.650 align:start position:0%
pointers or 64 bits but integers remain
32-bit<00:15:42.910><c> therefore</c><00:15:43.910><c> they</c><00:15:44.149><c> have</c><00:15:44.300><c> the</c><00:15:44.510><c> base</c>

00:15:44.650 --> 00:15:44.660 align:start position:0%
32-bit therefore they have the base
 

00:15:44.660 --> 00:15:48.900 align:start position:0%
32-bit therefore they have the base
types<00:15:44.930><c> and</c><00:15:45.140><c> see</c><00:15:45.350><c> to</c><00:15:46.010><c> have</c><00:15:46.300><c> white</c><00:15:47.300><c> short</c><00:15:47.990><c> I</c><00:15:48.260><c> mean</c>

00:15:48.900 --> 00:15:48.910 align:start position:0%
types and see to have white short I mean
 

00:15:48.910 --> 00:15:52.060 align:start position:0%
types and see to have white short I mean
8-bit<00:15:49.910><c> 16-bit</c><00:15:50.390><c> 32-bit</c><00:15:50.750><c> and</c><00:15:51.230><c> 64-bit</c><00:15:51.350><c> types</c><00:15:51.890><c> are</c>

00:15:52.060 --> 00:15:52.070 align:start position:0%
8-bit 16-bit 32-bit and 64-bit types are
 

00:15:52.070 --> 00:15:55.750 align:start position:0%
8-bit 16-bit 32-bit and 64-bit types are
care<00:15:52.730><c> short</c><00:15:53.089><c> into</c><00:15:53.570><c> in</c><00:15:53.660><c> long</c><00:15:54.430><c> that</c><00:15:55.430><c> was</c><00:15:55.490><c> a</c><00:15:55.550><c> much</c>

00:15:55.750 --> 00:15:55.760 align:start position:0%
care short into in long that was a much
 

00:15:55.760 --> 00:15:57.310 align:start position:0%
care short into in long that was a much
easier<00:15:55.790><c> programming</c><00:15:56.450><c> model</c><00:15:56.690><c> and</c><00:15:56.839><c> that's</c>

00:15:57.310 --> 00:15:57.320 align:start position:0%
easier programming model and that's
 

00:15:57.320 --> 00:15:59.199 align:start position:0%
easier programming model and that's
basically<00:15:57.560><c> if</c><00:15:58.070><c> you</c><00:15:58.220><c> go</c><00:15:58.640><c> searching</c><00:15:58.940><c> for</c><00:15:59.089><c> any</c>

00:15:59.199 --> 00:15:59.209 align:start position:0%
basically if you go searching for any
 

00:15:59.209 --> 00:16:00.880 align:start position:0%
basically if you go searching for any
64-bit<00:15:59.839><c> clean</c><00:16:00.079><c> software</c><00:16:00.529><c> out</c><00:16:00.620><c> there</c><00:16:00.649><c> today</c>

00:16:00.880 --> 00:16:00.890 align:start position:0%
64-bit clean software out there today
 

00:16:00.890 --> 00:16:03.340 align:start position:0%
64-bit clean software out there today
you<00:16:01.490><c> can</c><00:16:01.579><c> see</c><00:16:01.610><c> all</c><00:16:01.760><c> of</c><00:16:01.880><c> it</c><00:16:02.060><c> is</c><00:16:02.149><c> written</c><00:16:02.269><c> to</c><00:16:03.230><c> the</c>

00:16:03.340 --> 00:16:03.350 align:start position:0%
you can see all of it is written to the
 

00:16:03.350 --> 00:16:06.460 align:start position:0%
you can see all of it is written to the
LP<00:16:03.649><c> 64</c><00:16:04.130><c> model</c><00:16:04.959><c> now</c><00:16:05.959><c> the</c><00:16:06.050><c> next</c><00:16:06.170><c> thing</c><00:16:06.290><c> it</c>

00:16:06.460 --> 00:16:06.470 align:start position:0%
LP 64 model now the next thing it
 

00:16:06.470 --> 00:16:07.930 align:start position:0%
LP 64 model now the next thing it
happens<00:16:06.740><c> is</c><00:16:06.860><c> once</c><00:16:07.010><c> all</c><00:16:07.160><c> these</c><00:16:07.339><c> acronyms</c><00:16:07.670><c> came</c>

00:16:07.930 --> 00:16:07.940 align:start position:0%
happens is once all these acronyms came
 

00:16:07.940 --> 00:16:10.509 align:start position:0%
happens is once all these acronyms came
out<00:16:08.060><c> of</c><00:16:08.209><c> a</c><00:16:08.360><c> 64</c><00:16:08.779><c> LT</c><00:16:09.170><c> 64</c><00:16:09.589><c> and</c><00:16:09.680><c> stuff</c><00:16:09.860><c> people</c><00:16:10.310><c> said</c>

00:16:10.509 --> 00:16:10.519 align:start position:0%
out of a 64 LT 64 and stuff people said
 

00:16:10.519 --> 00:16:12.639 align:start position:0%
out of a 64 LT 64 and stuff people said
well<00:16:10.720><c> what</c><00:16:11.720><c> do</c><00:16:11.779><c> we</c><00:16:11.839><c> call</c><00:16:11.990><c> the</c><00:16:12.140><c> old</c><00:16:12.260><c> budget</c>

00:16:12.639 --> 00:16:12.649 align:start position:0%
well what do we call the old budget
 

00:16:12.649 --> 00:16:15.069 align:start position:0%
well what do we call the old budget
model<00:16:13.060><c> so</c><00:16:14.060><c> the</c><00:16:14.149><c> old</c><00:16:14.269><c> sir</c><00:16:14.360><c> demons</c><00:16:14.660><c> model</c><00:16:14.899><c> got</c>

00:16:15.069 --> 00:16:15.079 align:start position:0%
model so the old sir demons model got
 

00:16:15.079 --> 00:16:17.290 align:start position:0%
model so the old sir demons model got
renamed<00:16:15.350><c> its</c><00:16:15.589><c> ILP</c><00:16:15.949><c> 64</c><00:16:16.670><c> which</c><00:16:16.820><c> is</c><00:16:16.940><c> integer</c><00:16:17.149><c> as</c>

00:16:17.290 --> 00:16:17.300 align:start position:0%
renamed its ILP 64 which is integer as
 

00:16:17.300 --> 00:16:20.259 align:start position:0%
renamed its ILP 64 which is integer as
long<00:16:17.449><c> as</c><00:16:17.540><c> appointments</c><00:16:17.930><c> are</c><00:16:17.990><c> all</c><00:16:18.050><c> 32-bit</c><00:16:19.269><c> well</c>

00:16:20.259 --> 00:16:20.269 align:start position:0%
long as appointments are all 32-bit well
 

00:16:20.269 --> 00:16:22.120 align:start position:0%
long as appointments are all 32-bit well
then<00:16:20.390><c> some</c><00:16:20.630><c> of</c><00:16:20.660><c> the</c><00:16:20.810><c> 32-bit</c><00:16:21.199><c> processors</c><00:16:21.949><c> got</c>

00:16:22.120 --> 00:16:22.130 align:start position:0%
then some of the 32-bit processors got
 

00:16:22.130 --> 00:16:23.650 align:start position:0%
then some of the 32-bit processors got
jealous<00:16:22.370><c> of</c><00:16:22.610><c> the</c><00:16:22.670><c> 64-bit</c><00:16:23.209><c> computation</c>

00:16:23.650 --> 00:16:23.660 align:start position:0%
jealous of the 64-bit computation
 

00:16:23.660 --> 00:16:25.420 align:start position:0%
jealous of the 64-bit computation
available<00:16:24.079><c> and</c><00:16:24.170><c> said</c><00:16:24.290><c> well</c><00:16:24.440><c> we</c><00:16:24.649><c> want</c><00:16:24.680><c> a</c><00:16:24.890><c> 64-bit</c>

00:16:25.420 --> 00:16:25.430 align:start position:0%
available and said well we want a 64-bit
 

00:16:25.430 --> 00:16:27.430 align:start position:0%
available and said well we want a 64-bit
type<00:16:25.579><c> in</c><00:16:25.760><c> a.c</c><00:16:25.970><c> language</c><00:16:26.300><c> so</c><00:16:27.019><c> a</c><00:16:27.050><c> budget</c><00:16:27.350><c> even</c>

00:16:27.430 --> 00:16:27.440 align:start position:0%
type in a.c language so a budget even
 

00:16:27.440 --> 00:16:28.930 align:start position:0%
type in a.c language so a budget even
compile<00:16:27.769><c> vendors</c><00:16:28.130><c> added</c><00:16:28.339><c> extensions</c><00:16:28.760><c> and</c>

00:16:28.930 --> 00:16:28.940 align:start position:0%
compile vendors added extensions and
 

00:16:28.940 --> 00:16:30.040 align:start position:0%
compile vendors added extensions and
advantages<00:16:29.329><c> you</c><00:16:29.420><c> get</c><00:16:29.540><c> standardizing</c>

00:16:30.040 --> 00:16:30.050 align:start position:0%
advantages you get standardizing
 

00:16:30.050 --> 00:16:33.189 align:start position:0%
advantages you get standardizing
ratified<00:16:30.380><c> in</c><00:16:30.500><c> c99</c><00:16:30.829><c> as</c><00:16:31.250><c> long</c><00:16:31.790><c> long</c><00:16:32.110><c> then</c><00:16:33.110><c> they</c>

00:16:33.189 --> 00:16:33.199 align:start position:0%
ratified in c99 as long long then they
 

00:16:33.199 --> 00:16:34.509 align:start position:0%
ratified in c99 as long long then they
have<00:16:33.320><c> the</c><00:16:33.380><c> problem</c><00:16:33.680><c> over</c><00:16:33.860><c> what</c><00:16:34.040><c> is</c><00:16:34.160><c> long</c><00:16:34.310><c> long</c>

00:16:34.509 --> 00:16:34.519 align:start position:0%
have the problem over what is long long
 

00:16:34.519 --> 00:16:37.180 align:start position:0%
have the problem over what is long long
lean<00:16:34.730><c> and</c><00:16:34.760><c> LP</c><00:16:35.029><c> 64</c><00:16:35.510><c> and</c><00:16:35.630><c> IL</c><00:16:35.779><c> t</c><00:16:35.930><c> 6</c><00:16:36.110><c> before</c><00:16:36.440><c> well</c>

00:16:37.180 --> 00:16:37.190 align:start position:0%
lean and LP 64 and IL t 6 before well
 

00:16:37.190 --> 00:16:38.590 align:start position:0%
lean and LP 64 and IL t 6 before well
just<00:16:37.459><c> to</c><00:16:37.519><c> make</c><00:16:37.640><c> it</c><00:16:37.670><c> easy</c><00:16:37.850><c> to</c><00:16:38.029><c> say</c><00:16:38.149><c> loss</c><00:16:38.329><c> is</c><00:16:38.510><c> the</c>

00:16:38.590 --> 00:16:38.600 align:start position:0%
just to make it easy to say loss is the
 

00:16:38.600 --> 00:16:40.840 align:start position:0%
just to make it easy to say loss is the
same<00:16:38.779><c> as</c><00:16:38.930><c> long</c><00:16:39.079><c> so</c><00:16:39.500><c> long</c><00:16:39.890><c> long</c><00:16:40.130><c> as</c><00:16:40.279><c> 64</c><00:16:40.699><c> bits</c>

00:16:40.840 --> 00:16:40.850 align:start position:0%
same as long so long long as 64 bits
 

00:16:40.850 --> 00:16:45.220 align:start position:0%
same as long so long long as 64 bits
across<00:16:41.529><c> all</c><00:16:42.529><c> compilers</c><00:16:43.750><c> you</c><00:16:44.750><c> also</c><00:16:44.899><c> may</c><00:16:45.110><c> have</c>

00:16:45.220 --> 00:16:45.230 align:start position:0%
across all compilers you also may have
 

00:16:45.230 --> 00:16:46.300 align:start position:0%
across all compilers you also may have
heard<00:16:45.350><c> recently</c><00:16:45.500><c> that</c><00:16:45.769><c> windows</c><00:16:46.190><c> has</c>

00:16:46.300 --> 00:16:46.310 align:start position:0%
heard recently that windows has
 

00:16:46.310 --> 00:16:49.329 align:start position:0%
heard recently that windows has
announced<00:16:46.490><c> windows</c><00:16:47.360><c> 64</c><00:16:47.899><c> now</c><00:16:48.589><c> they</c><00:16:48.769><c> decided</c><00:16:49.279><c> to</c>

00:16:49.329 --> 00:16:49.339 align:start position:0%
announced windows 64 now they decided to
 

00:16:49.339 --> 00:16:51.939 align:start position:0%
announced windows 64 now they decided to
take<00:16:49.399><c> a</c><00:16:49.459><c> different</c><00:16:49.550><c> path</c><00:16:50.290><c> after</c><00:16:51.290><c> looking</c>

00:16:51.939 --> 00:16:51.949 align:start position:0%
take a different path after looking
 

00:16:51.949 --> 00:16:53.290 align:start position:0%
take a different path after looking
through<00:16:52.010><c> the</c><00:16:52.220><c> source</c><00:16:52.430><c> code</c><00:16:52.640><c> they</c><00:16:52.820><c> decided</c>

00:16:53.290 --> 00:16:53.300 align:start position:0%
through the source code they decided
 

00:16:53.300 --> 00:16:56.230 align:start position:0%
through the source code they decided
that<00:16:53.329><c> they</c><00:16:53.720><c> had</c><00:16:54.050><c> too</c><00:16:54.320><c> many</c><00:16:54.790><c> cases</c><00:16:55.790><c> where</c><00:16:56.120><c> they</c>

00:16:56.230 --> 00:16:56.240 align:start position:0%
that they had too many cases where they
 

00:16:56.240 --> 00:16:58.660 align:start position:0%
that they had too many cases where they
had<00:16:56.660><c> hard-coded</c><00:16:57.260><c> long</c><00:16:57.410><c> to</c><00:16:57.560><c> be</c><00:16:57.649><c> 32</c><00:16:57.980><c> bit</c><00:16:58.130><c> so</c>

00:16:58.660 --> 00:16:58.670 align:start position:0%
had hard-coded long to be 32 bit so
 

00:16:58.670 --> 00:16:59.949 align:start position:0%
had hard-coded long to be 32 bit so
rather<00:16:58.820><c> than</c><00:16:59.000><c> adopting</c><00:16:59.240><c> the</c><00:16:59.630><c> industry</c>

00:16:59.949 --> 00:16:59.959 align:start position:0%
rather than adopting the industry
 

00:16:59.959 --> 00:17:01.569 align:start position:0%
rather than adopting the industry
standard<00:17:00.019><c> LP</c><00:17:00.410><c> 64</c><00:17:00.890><c> they</c><00:17:01.040><c> can't</c><00:17:01.220><c> with</c><00:17:01.339><c> a</c><00:17:01.370><c> new</c>

00:17:01.569 --> 00:17:01.579 align:start position:0%
standard LP 64 they can't with a new
 

00:17:01.579 --> 00:17:04.090 align:start position:0%
standard LP 64 they can't with a new
model<00:17:01.910><c> they</c><00:17:02.029><c> call</c><00:17:02.209><c> p</c><00:17:02.420><c> 64</c><00:17:02.959><c> which</c><00:17:03.410><c> only</c><00:17:03.649><c> pointers</c>

00:17:04.090 --> 00:17:04.100 align:start position:0%
model they call p 64 which only pointers
 

00:17:04.100 --> 00:17:06.790 align:start position:0%
model they call p 64 which only pointers
change<00:17:04.370><c> in</c><00:17:04.520><c> size</c><00:17:04.699><c> to</c><00:17:05.209><c> be</c><00:17:05.329><c> 64</c><00:17:05.750><c> bits</c><00:17:05.959><c> all</c><00:17:06.740><c> the</c>

00:17:06.790 --> 00:17:06.800 align:start position:0%
change in size to be 64 bits all the
 

00:17:06.800 --> 00:17:07.860 align:start position:0%
change in size to be 64 bits all the
others<00:17:07.220><c> integer</c><00:17:07.520><c> types</c>

00:17:07.860 --> 00:17:07.870 align:start position:0%
others integer types
 

00:17:07.870 --> 00:17:10.110 align:start position:0%
others integer types
main<00:17:07.990><c> this</c><00:17:08.110><c> thing</c><00:17:08.459><c> so</c><00:17:09.459><c> those</c><00:17:09.610><c> easy</c><00:17:09.819><c> who</c><00:17:10.030><c> are</c>

00:17:10.110 --> 00:17:10.120 align:start position:0%
main this thing so those easy who are
 

00:17:10.120 --> 00:17:12.540 align:start position:0%
main this thing so those easy who are
investigating<00:17:10.689><c> 64</c><00:17:11.110><c> roots</c><00:17:11.290><c> and</c><00:17:11.500><c> have</c><00:17:12.250><c> code</c><00:17:12.459><c> you</c>

00:17:12.540 --> 00:17:12.550 align:start position:0%
investigating 64 roots and have code you
 

00:17:12.550 --> 00:17:15.240 align:start position:0%
investigating 64 roots and have code you
need<00:17:12.640><c> to</c><00:17:12.730><c> compile</c><00:17:13.000><c> both</c><00:17:13.449><c> for</c><00:17:13.839><c> mac</c><00:17:14.530><c> OS</c><00:17:14.680><c> 10</c><00:17:14.980><c> or</c>

00:17:15.240 --> 00:17:15.250 align:start position:0%
need to compile both for mac OS 10 or
 

00:17:15.250 --> 00:17:16.949 align:start position:0%
need to compile both for mac OS 10 or
the<00:17:15.280><c> UNIX</c><00:17:15.610><c> world</c><00:17:15.819><c> and</c><00:17:16.089><c> the</c><00:17:16.420><c> windows</c><00:17:16.720><c> world</c>

00:17:16.949 --> 00:17:16.959 align:start position:0%
the UNIX world and the windows world
 

00:17:16.959 --> 00:17:19.530 align:start position:0%
the UNIX world and the windows world
have<00:17:17.530><c> a</c><00:17:17.589><c> bit</c><00:17:17.740><c> of</c><00:17:17.770><c> a</c><00:17:17.890><c> conundrum</c><00:17:18.300><c> turns</c><00:17:19.300><c> out</c><00:17:19.390><c> it's</c>

00:17:19.530 --> 00:17:19.540 align:start position:0%
have a bit of a conundrum turns out it's
 

00:17:19.540 --> 00:17:21.600 align:start position:0%
have a bit of a conundrum turns out it's
not<00:17:19.569><c> that</c><00:17:19.870><c> bad</c><00:17:20.079><c> if</c><00:17:20.410><c> all</c><00:17:20.949><c> you</c><00:17:21.100><c> do</c><00:17:21.250><c> is</c><00:17:21.280><c> avoid</c>

00:17:21.600 --> 00:17:21.610 align:start position:0%
not that bad if all you do is avoid
 

00:17:21.610 --> 00:17:23.730 align:start position:0%
not that bad if all you do is avoid
using<00:17:21.819><c> the</c><00:17:22.059><c> raw</c><00:17:22.240><c> long</c><00:17:22.809><c> type</c><00:17:23.140><c> you're</c><00:17:23.500><c> fine</c>

00:17:23.730 --> 00:17:23.740 align:start position:0%
using the raw long type you're fine
 

00:17:23.740 --> 00:17:25.949 align:start position:0%
using the raw long type you're fine
because<00:17:24.339><c> inside</c><00:17:24.730><c> the</c><00:17:24.850><c> same</c><00:17:25.030><c> between</c><00:17:25.240><c> fe</c><00:17:25.510><c> 64</c>

00:17:25.949 --> 00:17:25.959 align:start position:0%
because inside the same between fe 64
 

00:17:25.959 --> 00:17:28.380 align:start position:0%
because inside the same between fe 64
and<00:17:26.110><c> p</c><00:17:26.380><c> 64</c><00:17:26.890><c> and</c><00:17:27.100><c> long</c><00:17:27.520><c> lungs</c><00:17:27.760><c> are</c><00:17:27.910><c> the</c><00:17:28.030><c> same</c><00:17:28.209><c> as</c>

00:17:28.380 --> 00:17:28.390 align:start position:0%
and p 64 and long lungs are the same as
 

00:17:28.390 --> 00:17:30.840 align:start position:0%
and p 64 and long lungs are the same as
you<00:17:29.290><c> learn</c><00:17:29.470><c> later</c><00:17:29.650><c> in</c><00:17:29.830><c> the</c><00:17:29.920><c> talk</c><00:17:30.100><c> using</c><00:17:30.760><c> the</c>

00:17:30.840 --> 00:17:30.850 align:start position:0%
you learn later in the talk using the
 

00:17:30.850 --> 00:17:35.600 align:start position:0%
you learn later in the talk using the
raw<00:17:31.000><c> types</c><00:17:31.270><c> is</c><00:17:31.420><c> kind</c><00:17:31.600><c> of</c><00:17:31.660><c> problems</c><00:17:32.080><c> begin</c><00:17:32.350><c> with</c>

00:17:35.600 --> 00:17:35.610 align:start position:0%
 
 

00:17:35.610 --> 00:17:39.750 align:start position:0%
 
now<00:17:36.610><c> the</c><00:17:36.670><c> API</c><00:17:37.830><c> we</c><00:17:38.830><c> had</c><00:17:38.950><c> a</c><00:17:38.980><c> chance</c><00:17:39.250><c> to</c><00:17:39.490><c> reexamine</c>

00:17:39.750 --> 00:17:39.760 align:start position:0%
now the API we had a chance to reexamine
 

00:17:39.760 --> 00:17:41.549 align:start position:0%
now the API we had a chance to reexamine
the<00:17:40.090><c> power</c><00:17:40.300><c> to</c><00:17:40.450><c> see</c><00:17:40.570><c> avi</c><00:17:40.780><c> for</c><00:17:41.080><c> the</c><00:17:41.140><c> 64</c><00:17:41.530><c> bit</c>

00:17:41.549 --> 00:17:41.559 align:start position:0%
the power to see avi for the 64 bit
 

00:17:41.559 --> 00:17:43.260 align:start position:0%
the power to see avi for the 64 bit
because<00:17:42.010><c> we</c><00:17:42.580><c> need</c><00:17:42.700><c> to</c><00:17:42.790><c> come</c><00:17:42.910><c> up</c><00:17:42.940><c> with</c><00:17:43.059><c> a</c><00:17:43.179><c> new</c>

00:17:43.260 --> 00:17:43.270 align:start position:0%
because we need to come up with a new
 

00:17:43.270 --> 00:17:45.720 align:start position:0%
because we need to come up with a new
64-bit<00:17:43.720><c> convention</c><00:17:44.290><c> and</c><00:17:44.470><c> there's</c><00:17:45.070><c> no</c><00:17:45.280><c> reason</c>

00:17:45.720 --> 00:17:45.730 align:start position:0%
64-bit convention and there's no reason
 

00:17:45.730 --> 00:17:48.240 align:start position:0%
64-bit convention and there's no reason
why<00:17:46.000><c> we</c><00:17:46.360><c> had</c><00:17:46.540><c> to</c><00:17:46.570><c> be</c><00:17:46.780><c> compatible</c><00:17:47.500><c> anyway</c><00:17:48.070><c> with</c>

00:17:48.240 --> 00:17:48.250 align:start position:0%
why we had to be compatible anyway with
 

00:17:48.250 --> 00:17:50.040 align:start position:0%
why we had to be compatible anyway with
the<00:17:48.340><c> old</c><00:17:48.520><c> of</c><00:17:48.700><c> you</c><00:17:48.790><c> big</c><00:17:48.940><c> conventions</c><00:17:49.390><c> so</c><00:17:49.809><c> we</c><00:17:49.900><c> did</c>

00:17:50.040 --> 00:17:50.050 align:start position:0%
the old of you big conventions so we did
 

00:17:50.050 --> 00:17:51.630 align:start position:0%
the old of you big conventions so we did
as<00:17:50.170><c> much</c><00:17:50.290><c> analysis</c><00:17:50.800><c> as</c><00:17:50.920><c> we</c><00:17:51.040><c> could</c><00:17:51.220><c> on</c><00:17:51.250><c> how</c><00:17:51.580><c> the</c>

00:17:51.630 --> 00:17:51.640 align:start position:0%
as much analysis as we could on how the
 

00:17:51.640 --> 00:17:53.100 align:start position:0%
as much analysis as we could on how the
old<00:17:51.880><c> calling</c><00:17:52.240><c> conditions</c><00:17:52.660><c> worked</c><00:17:52.900><c> how</c>

00:17:53.100 --> 00:17:53.110 align:start position:0%
old calling conditions worked how
 

00:17:53.110 --> 00:17:54.930 align:start position:0%
old calling conditions worked how
parameters<00:17:53.920><c> passed</c><00:17:54.070><c> and</c><00:17:54.280><c> registers</c><00:17:54.640><c> and</c><00:17:54.850><c> so</c>

00:17:54.930 --> 00:17:54.940 align:start position:0%
parameters passed and registers and so
 

00:17:54.940 --> 00:17:56.880 align:start position:0%
parameters passed and registers and so
forth<00:17:55.210><c> we</c><00:17:55.809><c> want</c><00:17:55.990><c> to</c><00:17:56.080><c> come</c><00:17:56.140><c> up</c><00:17:56.260><c> the</c><00:17:56.380><c> optimal</c>

00:17:56.880 --> 00:17:56.890 align:start position:0%
forth we want to come up the optimal
 

00:17:56.890 --> 00:18:00.210 align:start position:0%
forth we want to come up the optimal
convention<00:17:57.700><c> for</c><00:17:58.270><c> 64-bit</c><00:17:58.870><c> what</c><00:17:59.800><c> we</c><00:17:59.920><c> decided</c>

00:18:00.210 --> 00:18:00.220 align:start position:0%
convention for 64-bit what we decided
 

00:18:00.220 --> 00:18:01.440 align:start position:0%
convention for 64-bit what we decided
was<00:18:00.340><c> the</c><00:18:00.640><c> original</c><00:18:00.850><c> fuzzy</c><00:18:01.030><c> that</c><00:18:01.179><c> was</c><00:18:01.300><c> pretty</c>

00:18:01.440 --> 00:18:01.450 align:start position:0%
was the original fuzzy that was pretty
 

00:18:01.450 --> 00:18:03.390 align:start position:0%
was the original fuzzy that was pretty
darn<00:18:01.660><c> good</c><00:18:01.750><c> and</c><00:18:02.140><c> hard</c><00:18:02.350><c> to</c><00:18:02.440><c> improve</c><00:18:02.679><c> on</c><00:18:02.860><c> that</c><00:18:03.040><c> we</c>

00:18:03.390 --> 00:18:03.400 align:start position:0%
darn good and hard to improve on that we
 

00:18:03.400 --> 00:18:04.680 align:start position:0%
darn good and hard to improve on that we
found<00:18:03.520><c> a</c><00:18:03.640><c> few</c><00:18:03.760><c> edge</c><00:18:03.910><c> cases</c><00:18:04.179><c> where</c><00:18:04.450><c> we</c><00:18:04.540><c> could</c>

00:18:04.680 --> 00:18:04.690 align:start position:0%
found a few edge cases where we could
 

00:18:04.690 --> 00:18:07.799 align:start position:0%
found a few edge cases where we could
improve<00:18:04.929><c> so</c><00:18:05.170><c> we</c><00:18:05.290><c> did</c><00:18:05.410><c> that</c><00:18:05.559><c> for</c><00:18:05.679><c> 64-bit</c><00:18:06.809><c> the</c>

00:18:07.799 --> 00:18:07.809 align:start position:0%
improve so we did that for 64-bit the
 

00:18:07.809 --> 00:18:09.120 align:start position:0%
improve so we did that for 64-bit the
first<00:18:08.020><c> is</c><00:18:08.170><c> when</c><00:18:08.290><c> you</c><00:18:08.380><c> pass</c><00:18:08.590><c> struck</c><00:18:08.980><c> the</c>

00:18:09.120 --> 00:18:09.130 align:start position:0%
first is when you pass struck the
 

00:18:09.130 --> 00:18:11.490 align:start position:0%
first is when you pass struck the
contains<00:18:09.460><c> slopes</c><00:18:09.760><c> the</c><00:18:10.540><c> old</c><00:18:10.809><c> convention</c><00:18:11.350><c> was</c>

00:18:11.490 --> 00:18:11.500 align:start position:0%
contains slopes the old convention was
 

00:18:11.500 --> 00:18:12.930 align:start position:0%
contains slopes the old convention was
not<00:18:11.650><c> very</c><00:18:11.800><c> efficient</c><00:18:12.250><c> we've</c><00:18:12.429><c> improved</c><00:18:12.760><c> that</c>

00:18:12.930 --> 00:18:12.940 align:start position:0%
not very efficient we've improved that
 

00:18:12.940 --> 00:18:14.940 align:start position:0%
not very efficient we've improved that
for<00:18:13.059><c> 64-bit</c><00:18:13.600><c> the</c><00:18:14.230><c> second</c><00:18:14.559><c> reason</c><00:18:14.620><c> we'd</c>

00:18:14.940 --> 00:18:14.950 align:start position:0%
for 64-bit the second reason we'd
 

00:18:14.950 --> 00:18:16.260 align:start position:0%
for 64-bit the second reason we'd
returns<00:18:15.370><c> of</c><00:18:15.580><c> structs</c><00:18:15.850><c> a</c><00:18:15.880><c> little</c><00:18:16.059><c> bit</c><00:18:16.150><c> more</c>

00:18:16.260 --> 00:18:16.270 align:start position:0%
returns of structs a little bit more
 

00:18:16.270 --> 00:18:18.780 align:start position:0%
returns of structs a little bit more
efficient<00:18:16.840><c> and</c><00:18:17.020><c> last</c><00:18:17.950><c> thing</c><00:18:18.190><c> is</c><00:18:18.340><c> we</c><00:18:18.429><c> decided</c>

00:18:18.780 --> 00:18:18.790 align:start position:0%
efficient and last thing is we decided
 

00:18:18.790 --> 00:18:20.340 align:start position:0%
efficient and last thing is we decided
to<00:18:18.850><c> dedicate</c><00:18:19.030><c> our</c><00:18:19.300><c> 13</c><00:18:19.840><c> which</c><00:18:19.990><c> was</c><00:18:20.140><c> previously</c>

00:18:20.340 --> 00:18:20.350 align:start position:0%
to dedicate our 13 which was previously
 

00:18:20.350 --> 00:18:22.560 align:start position:0%
to dedicate our 13 which was previously
a<00:18:20.620><c> non-volatile</c><00:18:21.160><c> register</c><00:18:21.550><c> to</c><00:18:22.179><c> be</c><00:18:22.270><c> owned</c><00:18:22.480><c> by</c>

00:18:22.560 --> 00:18:22.570 align:start position:0%
a non-volatile register to be owned by
 

00:18:22.570 --> 00:18:24.090 align:start position:0%
a non-volatile register to be owned by
the<00:18:22.690><c> OS</c><00:18:23.110><c> and</c><00:18:23.290><c> in</c><00:18:23.440><c> fact</c><00:18:23.650><c> owned</c><00:18:23.860><c> by</c><00:18:24.040><c> the</c>

00:18:24.090 --> 00:18:24.100 align:start position:0%
the OS and in fact owned by the
 

00:18:24.100 --> 00:18:25.890 align:start position:0%
the OS and in fact owned by the
threading<00:18:24.520><c> package</c><00:18:24.850><c> so</c><00:18:25.179><c> our</c><00:18:25.360><c> 13</c><00:18:25.690><c> will</c><00:18:25.809><c> be</c>

00:18:25.890 --> 00:18:25.900 align:start position:0%
threading package so our 13 will be
 

00:18:25.900 --> 00:18:27.919 align:start position:0%
threading package so our 13 will be
unique<00:18:26.140><c> per</c><00:18:26.350><c> thread</c><00:18:26.620><c> this</c><00:18:27.280><c> allows</c><00:18:27.550><c> faster</c>

00:18:27.919 --> 00:18:27.929 align:start position:0%
unique per thread this allows faster
 

00:18:27.929 --> 00:18:30.480 align:start position:0%
unique per thread this allows faster
pthread<00:18:28.929><c> access</c><00:18:29.320><c> elf</c><00:18:29.590><c> and</c><00:18:29.890><c> particular</c>

00:18:30.480 --> 00:18:30.490 align:start position:0%
pthread access elf and particular
 

00:18:30.490 --> 00:18:32.130 align:start position:0%
pthread access elf and particular
thread-local<00:18:30.850><c> storage</c><00:18:30.880><c> leaf</c><00:18:31.480><c> after</c><00:18:31.809><c> on</c><00:18:31.960><c> the</c>

00:18:32.130 --> 00:18:32.140 align:start position:0%
thread-local storage leaf after on the
 

00:18:32.140 --> 00:18:37.710 align:start position:0%
thread-local storage leaf after on the
64-bit<00:18:35.429><c> next</c><00:18:36.429><c> we</c><00:18:36.520><c> need</c><00:18:36.550><c> to</c><00:18:36.670><c> update</c><00:18:36.910><c> the</c><00:18:37.510><c> file</c>

00:18:37.710 --> 00:18:37.720 align:start position:0%
64-bit next we need to update the file
 

00:18:37.720 --> 00:18:39.600 align:start position:0%
64-bit next we need to update the file
format<00:18:38.110><c> we</c><00:18:38.230><c> use</c><00:18:38.410><c> the</c><00:18:39.190><c> both</c><00:18:39.340><c> of</c><00:18:39.460><c> you</c><00:18:39.520><c> have</c>

00:18:39.600 --> 00:18:39.610 align:start position:0%
format we use the both of you have
 

00:18:39.610 --> 00:18:40.860 align:start position:0%
format we use the both of you have
actually<00:18:39.700><c> looked</c><00:18:39.970><c> the</c><00:18:40.210><c> details</c><00:18:40.540><c> with</c><00:18:40.660><c> nahco</c>

00:18:40.860 --> 00:18:40.870 align:start position:0%
actually looked the details with nahco
 

00:18:40.870 --> 00:18:42.210 align:start position:0%
actually looked the details with nahco
file<00:18:41.140><c> format</c><00:18:41.500><c> you'll</c><00:18:41.710><c> see</c><00:18:41.860><c> that</c><00:18:41.980><c> it</c><00:18:42.100><c> uses</c>

00:18:42.210 --> 00:18:42.220 align:start position:0%
file format you'll see that it uses
 

00:18:42.220 --> 00:18:44.120 align:start position:0%
file format you'll see that it uses
32-bit<00:18:42.820><c> off</c><00:18:42.940><c> thats</c><00:18:43.179><c> everywhere</c><00:18:43.360><c> in</c><00:18:43.570><c> the</c><00:18:43.630><c> file</c>

00:18:44.120 --> 00:18:44.130 align:start position:0%
32-bit off thats everywhere in the file
 

00:18:44.130 --> 00:18:47.549 align:start position:0%
32-bit off thats everywhere in the file
we<00:18:45.130><c> decided</c><00:18:45.460><c> that</c><00:18:45.700><c> in</c><00:18:45.940><c> the</c><00:18:46.059><c> long</c><00:18:46.240><c> term</c><00:18:46.559><c> people</c>

00:18:47.549 --> 00:18:47.559 align:start position:0%
we decided that in the long term people
 

00:18:47.559 --> 00:18:50.190 align:start position:0%
we decided that in the long term people
reading<00:18:47.770><c> 64-bit</c><00:18:48.280><c> code</c><00:18:48.880><c> do</c><00:18:49.870><c> so</c><00:18:50.050><c> because</c>

00:18:50.190 --> 00:18:50.200 align:start position:0%
reading 64-bit code do so because
 

00:18:50.200 --> 00:18:51.510 align:start position:0%
reading 64-bit code do so because
they're<00:18:50.470><c> gonna</c><00:18:50.559><c> have</c><00:18:50.710><c> large</c><00:18:50.980><c> amounts</c><00:18:51.160><c> of</c><00:18:51.370><c> data</c>

00:18:51.510 --> 00:18:51.520 align:start position:0%
they're gonna have large amounts of data
 

00:18:51.520 --> 00:18:53.940 align:start position:0%
they're gonna have large amounts of data
and<00:18:51.670><c> large</c><00:18:51.820><c> amounts</c><00:18:52.150><c> of</c><00:18:52.210><c> code</c><00:18:52.480><c> and</c><00:18:52.780><c> the</c><00:18:53.500><c> 32-bit</c>

00:18:53.940 --> 00:18:53.950 align:start position:0%
and large amounts of code and the 32-bit
 

00:18:53.950 --> 00:18:55.650 align:start position:0%
and large amounts of code and the 32-bit
offsets<00:18:54.309><c> or</c><00:18:54.460><c> four</c><00:18:54.820><c> gig</c><00:18:55.000><c> limitation</c><00:18:55.540><c> on</c><00:18:55.600><c> the</c>

00:18:55.650 --> 00:18:55.660 align:start position:0%
offsets or four gig limitation on the
 

00:18:55.660 --> 00:18:57.510 align:start position:0%
offsets or four gig limitation on the
file<00:18:55.870><c> size</c><00:18:56.080><c> might</c><00:18:56.410><c> be</c><00:18:56.530><c> an</c><00:18:56.620><c> issue</c><00:18:56.740><c> so</c><00:18:57.400><c> we're</c>

00:18:57.510 --> 00:18:57.520 align:start position:0%
file size might be an issue so we're
 

00:18:57.520 --> 00:18:58.590 align:start position:0%
file size might be an issue so we're
going<00:18:57.610><c> to</c><00:18:57.700><c> be</c><00:18:57.760><c> enhancing</c><00:18:58.090><c> the</c><00:18:58.179><c> Moscow</c><00:18:58.420><c> file</c>

00:18:58.590 --> 00:18:58.600 align:start position:0%
going to be enhancing the Moscow file
 

00:18:58.600 --> 00:19:00.180 align:start position:0%
going to be enhancing the Moscow file
format<00:18:58.929><c> to</c><00:18:59.050><c> be</c><00:18:59.140><c> allowed</c><00:18:59.440><c> largest</c><00:18:59.950><c> and</c><00:19:00.070><c> four</c>

00:19:00.180 --> 00:19:00.190 align:start position:0%
format to be allowed largest and four
 

00:19:00.190 --> 00:19:03.630 align:start position:0%
format to be allowed largest and four
gig<00:19:00.340><c> file</c><00:19:01.920><c> but</c><00:19:02.920><c> the</c><00:19:03.010><c> key</c><00:19:03.130><c> point</c><00:19:03.280><c> to</c><00:19:03.400><c> all</c><00:19:03.610><c> this</c>

00:19:03.630 --> 00:19:03.640 align:start position:0%
gig file but the key point to all this
 

00:19:03.640 --> 00:19:05.010 align:start position:0%
gig file but the key point to all this
is<00:19:03.820><c> that</c><00:19:04.000><c> it's</c><00:19:04.300><c> going</c><00:19:04.510><c> to</c><00:19:04.600><c> be</c><00:19:04.690><c> quickly</c>

00:19:05.010 --> 00:19:05.020 align:start position:0%
is that it's going to be quickly
 

00:19:05.020 --> 00:19:10.410 align:start position:0%
is that it's going to be quickly
transparent<00:19:05.650><c> to</c><00:19:05.710><c> you</c><00:19:08.400><c> next</c><00:19:09.400><c> thing</c><00:19:09.520><c> is</c><00:19:09.550><c> some</c><00:19:10.330><c> of</c>

00:19:10.410 --> 00:19:10.420 align:start position:0%
transparent to you next thing is some of
 

00:19:10.420 --> 00:19:11.760 align:start position:0%
transparent to you next thing is some of
you<00:19:10.540><c> may</c><00:19:10.660><c> be</c><00:19:10.690><c> thinking</c><00:19:10.780><c> well</c><00:19:11.290><c> if</c><00:19:11.380><c> there's</c><00:19:11.590><c> no</c>

00:19:11.760 --> 00:19:11.770 align:start position:0%
you may be thinking well if there's no
 

00:19:11.770 --> 00:19:13.500 align:start position:0%
you may be thinking well if there's no
mode<00:19:12.070><c> on</c><00:19:12.220><c> the</c><00:19:12.280><c> PowerPC</c><00:19:12.760><c> I</c><00:19:12.790><c> could</c><00:19:13.059><c> be</c><00:19:13.179><c> clever</c>

00:19:13.500 --> 00:19:13.510 align:start position:0%
mode on the PowerPC I could be clever
 

00:19:13.510 --> 00:19:15.390 align:start position:0%
mode on the PowerPC I could be clever
and<00:19:13.630><c> write</c><00:19:13.900><c> some</c><00:19:14.050><c> function</c><00:19:14.530><c> that</c><00:19:14.890><c> happens</c><00:19:15.280><c> to</c>

00:19:15.390 --> 00:19:15.400 align:start position:0%
and write some function that happens to
 

00:19:15.400 --> 00:19:18.870 align:start position:0%
and write some function that happens to
work<00:19:15.550><c> both</c><00:19:15.820><c> for</c><00:19:16.120><c> 64-bit</c><00:19:17.070><c> callers</c><00:19:18.070><c> and</c><00:19:18.220><c> 32-bit</c>

00:19:18.870 --> 00:19:18.880 align:start position:0%
work both for 64-bit callers and 32-bit
 

00:19:18.880 --> 00:19:19.970 align:start position:0%
work both for 64-bit callers and 32-bit
college

00:19:19.970 --> 00:19:19.980 align:start position:0%
college
 

00:19:19.980 --> 00:19:21.500 align:start position:0%
college
and<00:19:20.070><c> yes</c><00:19:20.640><c> you</c><00:19:20.940><c> can</c><00:19:21.059><c> come</c><00:19:21.179><c> up</c><00:19:21.330><c> with</c><00:19:21.419><c> some</c>

00:19:21.500 --> 00:19:21.510 align:start position:0%
and yes you can come up with some
 

00:19:21.510 --> 00:19:23.299 align:start position:0%
and yes you can come up with some
trivial<00:19:21.780><c> examples</c><00:19:22.169><c> where</c><00:19:22.290><c> that</c><00:19:22.380><c> works</c><00:19:22.590><c> but</c><00:19:23.220><c> as</c>

00:19:23.299 --> 00:19:23.309 align:start position:0%
trivial examples where that works but as
 

00:19:23.309 --> 00:19:24.680 align:start position:0%
trivial examples where that works but as
soon<00:19:23.400><c> as</c><00:19:23.520><c> you</c><00:19:23.580><c> do</c><00:19:23.700><c> anything</c><00:19:24.120><c> interesting</c><00:19:24.330><c> that</c>

00:19:24.680 --> 00:19:24.690 align:start position:0%
soon as you do anything interesting that
 

00:19:24.690 --> 00:19:27.020 align:start position:0%
soon as you do anything interesting that
breaks<00:19:24.929><c> down</c><00:19:25.020><c> so</c><00:19:26.010><c> we're</c><00:19:26.280><c> recommending</c><00:19:26.580><c> and</c>

00:19:27.020 --> 00:19:27.030 align:start position:0%
breaks down so we're recommending and
 

00:19:27.030 --> 00:19:29.180 align:start position:0%
breaks down so we're recommending and
we're<00:19:27.270><c> adding</c><00:19:27.840><c> no</c><00:19:27.990><c> support</c><00:19:28.470><c> for</c><00:19:28.799><c> mixing</c>

00:19:29.180 --> 00:19:29.190 align:start position:0%
we're adding no support for mixing
 

00:19:29.190 --> 00:19:32.840 align:start position:0%
we're adding no support for mixing
32-bit<00:19:29.850><c> and</c><00:19:30.030><c> 64-bit</c><00:19:31.250><c> code</c><00:19:32.250><c> in</c><00:19:32.549><c> the</c><00:19:32.669><c> same</c>

00:19:32.840 --> 00:19:32.850 align:start position:0%
32-bit and 64-bit code in the same
 

00:19:32.850 --> 00:19:35.330 align:start position:0%
32-bit and 64-bit code in the same
process<00:19:33.299><c> the</c><00:19:34.080><c> way</c><00:19:34.200><c> we</c><00:19:34.350><c> do</c><00:19:34.500><c> that</c><00:19:34.679><c> is</c><00:19:34.740><c> our</c><00:19:35.010><c> tools</c>

00:19:35.330 --> 00:19:35.340 align:start position:0%
process the way we do that is our tools
 

00:19:35.340 --> 00:19:37.580 align:start position:0%
process the way we do that is our tools
will<00:19:35.790><c> mark</c><00:19:36.059><c> all</c><00:19:36.360><c> code</c><00:19:36.690><c> even</c><00:19:36.929><c> though</c><00:19:37.049><c> it's</c><00:19:37.169><c> just</c>

00:19:37.580 --> 00:19:37.590 align:start position:0%
will mark all code even though it's just
 

00:19:37.590 --> 00:19:39.440 align:start position:0%
will mark all code even though it's just
power<00:19:37.770><c> of</c><00:19:37.830><c> you</c><00:19:37.919><c> see</c><00:19:38.070><c> instructions</c><00:19:38.520><c> will</c><00:19:39.179><c> mark</c>

00:19:39.440 --> 00:19:39.450 align:start position:0%
power of you see instructions will mark
 

00:19:39.450 --> 00:19:40.880 align:start position:0%
power of you see instructions will mark
it<00:19:39.600><c> with</c><00:19:39.690><c> whether</c><00:19:39.900><c> it's</c><00:19:40.049><c> using</c><00:19:40.140><c> 32-bit</c><00:19:40.559><c> or</c>

00:19:40.880 --> 00:19:40.890 align:start position:0%
it with whether it's using 32-bit or
 

00:19:40.890 --> 00:19:49.640 align:start position:0%
it with whether it's using 32-bit or
64-bit<00:19:41.070><c> calling</c><00:19:41.760><c> conventions</c><00:19:48.530><c> how</c><00:19:49.530><c> we're</c>

00:19:49.640 --> 00:19:49.650 align:start position:0%
64-bit calling conventions how we're
 

00:19:49.650 --> 00:19:51.940 align:start position:0%
64-bit calling conventions how we're
going<00:19:49.740><c> to</c><00:19:49.799><c> do</c><00:19:49.919><c> this</c><00:19:50.040><c> is</c><00:19:50.190><c> something</c><00:19:50.490><c> we</c><00:19:51.299><c> call</c>

00:19:51.940 --> 00:19:51.950 align:start position:0%
going to do this is something we call
 

00:19:51.950 --> 00:19:54.680 align:start position:0%
going to do this is something we call
fat<00:19:52.950><c> libraries</c><00:19:53.370><c> or</c><00:19:53.490><c> fed</c><00:19:53.610><c> binaries</c><00:19:54.030><c> some</c><00:19:54.600><c> of</c>

00:19:54.680 --> 00:19:54.690 align:start position:0%
fat libraries or fed binaries some of
 

00:19:54.690 --> 00:19:56.570 align:start position:0%
fat libraries or fed binaries some of
you<00:19:54.840><c> may</c><00:19:55.049><c> have</c><00:19:55.080><c> seen</c><00:19:55.380><c> different</c><00:19:55.580><c> incantations</c>

00:19:56.570 --> 00:19:56.580 align:start position:0%
you may have seen different incantations
 

00:19:56.580 --> 00:19:59.840 align:start position:0%
you may have seen different incantations
of<00:19:56.700><c> this</c><00:19:57.410><c> concept</c><00:19:58.410><c> of</c><00:19:58.559><c> fatness</c><00:19:58.860><c> before</c><00:19:59.190><c> I</c><00:19:59.370><c> want</c>

00:19:59.840 --> 00:19:59.850 align:start position:0%
of this concept of fatness before I want
 

00:19:59.850 --> 00:20:01.340 align:start position:0%
of this concept of fatness before I want
to<00:19:59.910><c> contrast</c><00:20:00.299><c> this</c><00:20:00.419><c> with</c><00:20:00.480><c> some</c><00:20:00.720><c> other</c><00:20:00.870><c> OS</c><00:20:01.200><c> is</c>

00:20:01.340 --> 00:20:01.350 align:start position:0%
to contrast this with some other OS is
 

00:20:01.350 --> 00:20:04.250 align:start position:0%
to contrast this with some other OS is
that<00:20:01.530><c> when</c><00:20:01.679><c> they</c><00:20:01.830><c> introduced</c><00:20:02.450><c> 64-bit</c><00:20:03.450><c> say</c><00:20:04.110><c> for</c>

00:20:04.250 --> 00:20:04.260 align:start position:0%
that when they introduced 64-bit say for
 

00:20:04.260 --> 00:20:06.020 align:start position:0%
that when they introduced 64-bit say for
instance<00:20:04.290><c> you</c><00:20:04.770><c> put</c><00:20:04.950><c> all</c><00:20:05.100><c> your</c><00:20:05.130><c> libraries</c><00:20:05.850><c> and</c>

00:20:06.020 --> 00:20:06.030 align:start position:0%
instance you put all your libraries and
 

00:20:06.030 --> 00:20:09.260 align:start position:0%
instance you put all your libraries and
flash<00:20:06.179><c> user</c><00:20:06.450><c> live</c><00:20:06.690><c> as</c><00:20:07.290><c> some</c><00:20:07.559><c> OSS</c><00:20:07.919><c> do</c><00:20:08.270><c> when</c>

00:20:09.260 --> 00:20:09.270 align:start position:0%
flash user live as some OSS do when
 

00:20:09.270 --> 00:20:11.810 align:start position:0%
flash user live as some OSS do when
64-bit<00:20:09.780><c> came</c><00:20:09.960><c> out</c><00:20:10.110><c> they</c><00:20:10.320><c> had</c><00:20:11.220><c> two</c><00:20:11.400><c> libraries</c>

00:20:11.810 --> 00:20:11.820 align:start position:0%
64-bit came out they had two libraries
 

00:20:11.820 --> 00:20:13.159 align:start position:0%
64-bit came out they had two libraries
of<00:20:11.910><c> the</c><00:20:12.000><c> same</c><00:20:12.179><c> names</c><00:20:12.419><c> and</c><00:20:12.630><c> they</c><00:20:12.720><c> couldn't</c><00:20:13.020><c> put</c>

00:20:13.159 --> 00:20:13.169 align:start position:0%
of the same names and they couldn't put
 

00:20:13.169 --> 00:20:14.270 align:start position:0%
of the same names and they couldn't put
in<00:20:13.260><c> the</c><00:20:13.320><c> same</c><00:20:13.470><c> directory</c><00:20:13.860><c> so</c><00:20:14.010><c> they</c><00:20:14.100><c> came</c><00:20:14.220><c> up</c>

00:20:14.270 --> 00:20:14.280 align:start position:0%
in the same directory so they came up
 

00:20:14.280 --> 00:20:16.400 align:start position:0%
in the same directory so they came up
with<00:20:14.340><c> a</c><00:20:14.429><c> new</c><00:20:14.549><c> directory</c><00:20:14.910><c> userland</c><00:20:15.360><c> 64</c><00:20:15.929><c> and</c>

00:20:16.400 --> 00:20:16.410 align:start position:0%
with a new directory userland 64 and
 

00:20:16.410 --> 00:20:18.200 align:start position:0%
with a new directory userland 64 and
basically<00:20:16.710><c> they</c><00:20:16.950><c> kept</c><00:20:17.190><c> all</c><00:20:17.370><c> the</c><00:20:17.490><c> 64-bit</c><00:20:18.059><c> and</c>

00:20:18.200 --> 00:20:18.210 align:start position:0%
basically they kept all the 64-bit and
 

00:20:18.210 --> 00:20:19.640 align:start position:0%
basically they kept all the 64-bit and
all<00:20:18.330><c> the</c><00:20:18.510><c> 32</c><00:20:18.809><c> bit</c><00:20:18.840><c> binaries</c><00:20:19.290><c> and</c><00:20:19.320><c> separate</c>

00:20:19.640 --> 00:20:19.650 align:start position:0%
all the 32 bit binaries and separate
 

00:20:19.650 --> 00:20:20.659 align:start position:0%
all the 32 bit binaries and separate
directories<00:20:20.070><c> and</c><00:20:20.190><c> that's</c><00:20:20.309><c> how</c><00:20:20.429><c> they</c><00:20:20.520><c> kept</c>

00:20:20.659 --> 00:20:20.669 align:start position:0%
directories and that's how they kept
 

00:20:20.669 --> 00:20:22.340 align:start position:0%
directories and that's how they kept
track<00:20:20.850><c> of</c><00:20:20.880><c> them</c><00:20:21.090><c> we're</c><00:20:21.990><c> doing</c><00:20:22.169><c> something</c>

00:20:22.340 --> 00:20:22.350 align:start position:0%
track of them we're doing something
 

00:20:22.350 --> 00:20:23.570 align:start position:0%
track of them we're doing something
different<00:20:22.740><c> we're</c><00:20:22.860><c> leveraging</c><00:20:23.100><c> the</c><00:20:23.400><c> fat</c>

00:20:23.570 --> 00:20:23.580 align:start position:0%
different we're leveraging the fat
 

00:20:23.580 --> 00:20:26.780 align:start position:0%
different we're leveraging the fat
technology<00:20:24.179><c> and</c><00:20:25.070><c> this</c><00:20:26.070><c> is</c><00:20:26.160><c> how</c><00:20:26.250><c> it</c><00:20:26.370><c> works</c><00:20:26.490><c> on</c>

00:20:26.780 --> 00:20:26.790 align:start position:0%
technology and this is how it works on
 

00:20:26.790 --> 00:20:27.950 align:start position:0%
technology and this is how it works on
the<00:20:26.910><c> right</c><00:20:27.030><c> hand</c><00:20:27.179><c> side</c><00:20:27.299><c> there</c><00:20:27.630><c> you</c><00:20:27.750><c> see</c><00:20:27.929><c> a</c>

00:20:27.950 --> 00:20:27.960 align:start position:0%
the right hand side there you see a
 

00:20:27.960 --> 00:20:30.289 align:start position:0%
the right hand side there you see a
normal<00:20:28.590><c> macco</c><00:20:29.070><c> file</c><00:20:29.340><c> which</c><00:20:29.640><c> is</c><00:20:29.669><c> it</c><00:20:29.970><c> starts</c>

00:20:30.289 --> 00:20:30.299 align:start position:0%
normal macco file which is it starts
 

00:20:30.299 --> 00:20:32.630 align:start position:0%
normal macco file which is it starts
with<00:20:30.510><c> a</c><00:20:30.870><c> small</c><00:20:31.290><c> header</c><00:20:31.500><c> which</c><00:20:31.740><c> marks</c><00:20:32.100><c> in</c><00:20:32.250><c> this</c>

00:20:32.630 --> 00:20:32.640 align:start position:0%
with a small header which marks in this
 

00:20:32.640 --> 00:20:34.280 align:start position:0%
with a small header which marks in this
case<00:20:32.790><c> that</c><00:20:32.910><c> all</c><00:20:33.030><c> inventions</c><00:20:33.419><c> 32-bit</c><00:20:33.900><c> powerpc</c>

00:20:34.280 --> 00:20:34.290 align:start position:0%
case that all inventions 32-bit powerpc
 

00:20:34.290 --> 00:20:36.680 align:start position:0%
case that all inventions 32-bit powerpc
is<00:20:34.440><c> PVC</c><00:20:34.799><c> and</c><00:20:35.100><c> then</c><00:20:35.880><c> has</c><00:20:36.059><c> the</c><00:20:36.240><c> text</c><00:20:36.510><c> and</c><00:20:36.600><c> data</c>

00:20:36.680 --> 00:20:36.690 align:start position:0%
is PVC and then has the text and data
 

00:20:36.690 --> 00:20:39.950 align:start position:0%
is PVC and then has the text and data
need<00:20:36.929><c> you</c><00:20:37.049><c> for</c><00:20:37.200><c> that</c><00:20:37.230><c> file</c><00:20:38.450><c> we</c><00:20:39.450><c> also</c><00:20:39.630><c> allow</c><00:20:39.840><c> you</c>

00:20:39.950 --> 00:20:39.960 align:start position:0%
need you for that file we also allow you
 

00:20:39.960 --> 00:20:41.539 align:start position:0%
need you for that file we also allow you
to<00:20:40.200><c> create</c><00:20:40.290><c> fat</c><00:20:40.559><c> files</c><00:20:40.830><c> and</c><00:20:41.100><c> our</c><00:20:41.160><c> tools</c><00:20:41.340><c> will</c>

00:20:41.539 --> 00:20:41.549 align:start position:0%
to create fat files and our tools will
 

00:20:41.549 --> 00:20:43.190 align:start position:0%
to create fat files and our tools will
do<00:20:41.669><c> the</c><00:20:41.760><c> three</c><00:20:41.910><c> automatically</c><00:20:42.540><c> or</c><00:20:42.809><c> you</c><00:20:42.990><c> can</c>

00:20:43.190 --> 00:20:43.200 align:start position:0%
do the three automatically or you can
 

00:20:43.200 --> 00:20:45.560 align:start position:0%
do the three automatically or you can
use<00:20:43.230><c> a</c><00:20:43.320><c> lipo</c><00:20:43.620><c> to</c><00:20:43.679><c> lipo</c><00:20:44.490><c> tool</c><00:20:44.700><c> to</c><00:20:45.240><c> pack</c><00:20:45.419><c> these</c>

00:20:45.560 --> 00:20:45.570 align:start position:0%
use a lipo to lipo tool to pack these
 

00:20:45.570 --> 00:20:47.750 align:start position:0%
use a lipo to lipo tool to pack these
things<00:20:45.809><c> together</c><00:20:45.960><c> all</c><00:20:46.860><c> it</c><00:20:47.100><c> is</c><00:20:47.160><c> is</c><00:20:47.220><c> at</c><00:20:47.669><c> the</c>

00:20:47.750 --> 00:20:47.760 align:start position:0%
things together all it is is at the
 

00:20:47.760 --> 00:20:49.010 align:start position:0%
things together all it is is at the
beginning<00:20:47.820><c> has</c><00:20:48.120><c> a</c><00:20:48.150><c> table</c><00:20:48.450><c> of</c><00:20:48.540><c> contents</c><00:20:48.960><c> that</c>

00:20:49.010 --> 00:20:49.020 align:start position:0%
beginning has a table of contents that
 

00:20:49.020 --> 00:20:51.049 align:start position:0%
beginning has a table of contents that
says<00:20:49.200><c> here's</c><00:20:49.440><c> all</c><00:20:49.620><c> the</c><00:20:49.799><c> subs</c><00:20:50.460><c> of</c><00:20:50.610><c> files</c><00:20:50.850><c> of</c>

00:20:51.049 --> 00:20:51.059 align:start position:0%
says here's all the subs of files of
 

00:20:51.059 --> 00:20:52.610 align:start position:0%
says here's all the subs of files of
some<00:20:51.210><c> damages</c><00:20:51.360><c> in</c><00:20:51.720><c> this</c><00:20:51.840><c> file</c><00:20:52.020><c> and</c><00:20:52.260><c> they're</c>

00:20:52.610 --> 00:20:52.620 align:start position:0%
some damages in this file and they're
 

00:20:52.620 --> 00:20:55.640 align:start position:0%
some damages in this file and they're
appended<00:20:53.040><c> one</c><00:20:53.190><c> after</c><00:20:53.400><c> another</c><00:20:54.410><c> this</c><00:20:55.410><c> allows</c>

00:20:55.640 --> 00:20:55.650 align:start position:0%
appended one after another this allows
 

00:20:55.650 --> 00:20:57.500 align:start position:0%
appended one after another this allows
you<00:20:55.830><c> to</c><00:20:55.919><c> ship</c><00:20:56.100><c> one</c><00:20:56.130><c> file</c><00:20:56.669><c> that</c><00:20:57.210><c> has</c><00:20:57.330><c> both</c>

00:20:57.500 --> 00:20:57.510 align:start position:0%
you to ship one file that has both
 

00:20:57.510 --> 00:20:59.720 align:start position:0%
you to ship one file that has both
32-bit<00:20:57.960><c> and</c><00:20:58.260><c> a</c><00:20:58.410><c> 64-bit</c><00:20:58.919><c> implementation</c><00:20:59.490><c> in</c><00:20:59.610><c> it</c>

00:20:59.720 --> 00:20:59.730 align:start position:0%
32-bit and a 64-bit implementation in it
 

00:20:59.730 --> 00:21:03.320 align:start position:0%
32-bit and a 64-bit implementation in it
either<00:20:59.970><c> a</c><00:21:00.090><c> library</c><00:21:00.600><c> or</c><00:21:00.660><c> main</c><00:21:01.080><c> executable</c><00:21:02.330><c> if</c>

00:21:03.320 --> 00:21:03.330 align:start position:0%
either a library or main executable if
 

00:21:03.330 --> 00:21:05.030 align:start position:0%
either a library or main executable if
the<00:21:03.480><c> user</c><00:21:03.660><c> takes</c><00:21:03.960><c> that</c><00:21:04.200><c> and</c><00:21:04.440><c> runs</c><00:21:04.710><c> it</c><00:21:04.890><c> on</c><00:21:04.980><c> a</c>

00:21:05.030 --> 00:21:05.040 align:start position:0%
the user takes that and runs it on a
 

00:21:05.040 --> 00:21:06.890 align:start position:0%
the user takes that and runs it on a
32-bit<00:21:05.460><c> system</c><00:21:05.880><c> while</c><00:21:06.059><c> the</c><00:21:06.150><c> 32-bit</c><00:21:06.630><c> version</c>

00:21:06.890 --> 00:21:06.900 align:start position:0%
32-bit system while the 32-bit version
 

00:21:06.900 --> 00:21:08.120 align:start position:0%
32-bit system while the 32-bit version
of<00:21:06.990><c> that's</c><00:21:07.140><c> Apple</c><00:21:07.500><c> we</c><00:21:07.590><c> run</c><00:21:07.770><c> and</c><00:21:07.919><c> they'll</c><00:21:08.010><c> be</c>

00:21:08.120 --> 00:21:08.130 align:start position:0%
of that's Apple we run and they'll be
 

00:21:08.130 --> 00:21:10.430 align:start position:0%
of that's Apple we run and they'll be
limited<00:21:08.429><c> to</c><00:21:08.460><c> the</c><00:21:08.580><c> 4g</c><00:21:08.760><c> address</c><00:21:09.150><c> space</c><00:21:09.360><c> if</c><00:21:10.260><c> they</c>

00:21:10.430 --> 00:21:10.440 align:start position:0%
limited to the 4g address space if they
 

00:21:10.440 --> 00:21:13.250 align:start position:0%
limited to the 4g address space if they
take<00:21:10.559><c> that</c><00:21:10.620><c> and</c><00:21:10.919><c> run</c><00:21:11.070><c> that</c><00:21:11.250><c> on</c><00:21:11.460><c> a</c><00:21:12.230><c> tiger</c><00:21:13.230><c> or</c>

00:21:13.250 --> 00:21:13.260 align:start position:0%
take that and run that on a tiger or
 

00:21:13.260 --> 00:21:15.409 align:start position:0%
take that and run that on a tiger or
later<00:21:13.620><c> machine</c><00:21:14.010><c> on</c><00:21:14.160><c> a</c><00:21:14.220><c> g5</c><00:21:14.669><c> or</c><00:21:14.820><c> greater</c><00:21:15.000><c> machine</c>

00:21:15.409 --> 00:21:15.419 align:start position:0%
later machine on a g5 or greater machine
 

00:21:15.419 --> 00:21:19.370 align:start position:0%
later machine on a g5 or greater machine
the<00:21:16.200><c> OS</c><00:21:16.470><c> will</c><00:21:16.590><c> automatically</c><00:21:17.280><c> pick</c><00:21:17.490><c> the</c><00:21:18.059><c> 64</c><00:21:18.600><c> 64</c>

00:21:19.370 --> 00:21:19.380 align:start position:0%
the OS will automatically pick the 64 64
 

00:21:19.380 --> 00:21:23.200 align:start position:0%
the OS will automatically pick the 64 64
bit<00:21:19.559><c> version</c><00:21:19.890><c> of</c><00:21:20.010><c> the</c><00:21:20.100><c> file</c><00:21:20.309><c> and</c><00:21:20.580><c> run</c><00:21:20.610><c> that</c><00:21:21.390><c> I</c>

00:21:23.200 --> 00:21:23.210 align:start position:0%
bit version of the file and run that I
 

00:21:23.210 --> 00:21:25.190 align:start position:0%
bit version of the file and run that I
just<00:21:24.210><c> want</c><00:21:24.330><c> to</c><00:21:24.360><c> have</c><00:21:24.480><c> a</c><00:21:24.510><c> little</c><00:21:24.660><c> fun</c><00:21:24.900><c> here</c><00:21:24.960><c> to</c>

00:21:25.190 --> 00:21:25.200 align:start position:0%
just want to have a little fun here to
 

00:21:25.200 --> 00:21:27.620 align:start position:0%
just want to have a little fun here to
talk<00:21:25.320><c> about</c><00:21:25.880><c> what</c><00:21:26.880><c> does</c><00:21:26.970><c> the</c><00:21:27.059><c> 64-bit</c><00:21:27.540><c> address</c>

00:21:27.620 --> 00:21:27.630 align:start position:0%
talk about what does the 64-bit address
 

00:21:27.630 --> 00:21:29.270 align:start position:0%
talk about what does the 64-bit address
space<00:21:27.960><c> really</c><00:21:28.200><c> mean</c><00:21:28.380><c> it's</c><00:21:28.799><c> pretty</c><00:21:28.980><c> easy</c><00:21:29.159><c> to</c>

00:21:29.270 --> 00:21:29.280 align:start position:0%
space really mean it's pretty easy to
 

00:21:29.280 --> 00:21:33.340 align:start position:0%
space really mean it's pretty easy to
say<00:21:29.549><c> but</c><00:21:29.790><c> how</c><00:21:30.120><c> big</c><00:21:30.330><c> is</c><00:21:30.480><c> it</c>

00:21:33.340 --> 00:21:33.350 align:start position:0%
 
 

00:21:33.350 --> 00:21:35.750 align:start position:0%
 
so<00:21:34.350><c> imagine</c><00:21:34.650><c> if</c><00:21:34.740><c> you</c><00:21:34.860><c> will</c><00:21:35.010><c> you</c><00:21:35.310><c> took</c><00:21:35.460><c> a</c><00:21:35.520><c> 50</c><00:21:35.700><c> of</c>

00:21:35.750 --> 00:21:35.760 align:start position:0%
so imagine if you will you took a 50 of
 

00:21:35.760 --> 00:21:37.820 align:start position:0%
so imagine if you will you took a 50 of
your<00:21:35.910><c> pen</c><00:21:36.060><c> and</c><00:21:36.210><c> made</c><00:21:36.300><c> a</c><00:21:36.330><c> little</c><00:21:36.570><c> dot</c><00:21:36.830><c> let's</c>

00:21:37.820 --> 00:21:37.830 align:start position:0%
your pen and made a little dot let's
 

00:21:37.830 --> 00:21:39.620 align:start position:0%
your pen and made a little dot let's
call<00:21:37.980><c> that</c><00:21:38.010><c> one</c><00:21:38.310><c> bit</c><00:21:38.550><c> let's</c><00:21:39.120><c> say</c><00:21:39.240><c> right</c><00:21:39.450><c> next</c>

00:21:39.620 --> 00:21:39.630 align:start position:0%
call that one bit let's say right next
 

00:21:39.630 --> 00:21:40.820 align:start position:0%
call that one bit let's say right next
to<00:21:39.690><c> it</c><00:21:39.780><c> you</c><00:21:39.810><c> tried</c><00:21:40.050><c> to</c><00:21:40.140><c> pack</c><00:21:40.290><c> around</c><00:21:40.470><c> seven</c>

00:21:40.820 --> 00:21:40.830 align:start position:0%
to it you tried to pack around seven
 

00:21:40.830 --> 00:21:43.250 align:start position:0%
to it you tried to pack around seven
other<00:21:40.950><c> dots</c><00:21:41.160><c> to</c><00:21:41.850><c> make</c><00:21:42.000><c> a</c><00:21:42.030><c> bite</c><00:21:42.270><c> few</c>

00:21:43.250 --> 00:21:43.260 align:start position:0%
other dots to make a bite few
 

00:21:43.260 --> 00:21:46.670 align:start position:0%
other dots to make a bite few
millimeters<00:21:43.710><c> on</c><00:21:43.830><c> the</c><00:21:43.890><c> side</c><00:21:45.410><c> now</c><00:21:46.410><c> if</c><00:21:46.590><c> you</c>

00:21:46.670 --> 00:21:46.680 align:start position:0%
millimeters on the side now if you
 

00:21:46.680 --> 00:21:48.680 align:start position:0%
millimeters on the side now if you
extended<00:21:47.370><c> that</c><00:21:47.520><c> and</c><00:21:47.730><c> try</c><00:21:47.850><c> to</c><00:21:47.910><c> draw</c><00:21:48.120><c> actually</c>

00:21:48.680 --> 00:21:48.690 align:start position:0%
extended that and try to draw actually
 

00:21:48.690 --> 00:21:51.050 align:start position:0%
extended that and try to draw actually
four<00:21:48.930><c> billion</c><00:21:49.200><c> of</c><00:21:49.650><c> these</c><00:21:49.830><c> little</c><00:21:50.100><c> bites</c><00:21:50.370><c> how</c>

00:21:51.050 --> 00:21:51.060 align:start position:0%
four billion of these little bites how
 

00:21:51.060 --> 00:21:53.660 align:start position:0%
four billion of these little bites how
big<00:21:51.270><c> of</c><00:21:51.330><c> a</c><00:21:51.390><c> surface</c><00:21:51.600><c> area</c><00:21:51.990><c> would</c><00:21:52.080><c> that</c><00:21:52.230><c> be</c><00:21:52.670><c> well</c>

00:21:53.660 --> 00:21:53.670 align:start position:0%
big of a surface area would that be well
 

00:21:53.670 --> 00:21:55.760 align:start position:0%
big of a surface area would that be well
it<00:21:53.730><c> turns</c><00:21:53.880><c> out</c><00:21:54.000><c> to</c><00:21:54.180><c> be</c><00:21:54.210><c> roughly</c><00:21:54.450><c> the</c><00:21:55.410><c> surface</c>

00:21:55.760 --> 00:21:55.770 align:start position:0%
it turns out to be roughly the surface
 

00:21:55.770 --> 00:21:58.370 align:start position:0%
it turns out to be roughly the surface
of<00:21:55.950><c> the</c><00:21:56.280><c> roadway</c><00:21:56.520><c> and</c><00:21:56.850><c> sidewalk</c><00:21:57.300><c> of</c><00:21:57.720><c> the</c><00:21:58.200><c> gold</c>

00:21:58.370 --> 00:21:58.380 align:start position:0%
of the roadway and sidewalk of the gold
 

00:21:58.380 --> 00:22:00.590 align:start position:0%
of the roadway and sidewalk of the gold
laid<00:21:58.500><c> bridge</c><00:21:58.710><c> including</c><00:21:59.130><c> the</c><00:21:59.190><c> approaches</c><00:21:59.610><c> so</c>

00:22:00.590 --> 00:22:00.600 align:start position:0%
laid bridge including the approaches so
 

00:22:00.600 --> 00:22:02.060 align:start position:0%
laid bridge including the approaches so
we've<00:22:00.750><c> spent</c><00:22:00.990><c> our</c><00:22:01.140><c> professional</c><00:22:01.590><c> career</c><00:22:01.890><c> in</c>

00:22:02.060 --> 00:22:02.070 align:start position:0%
we've spent our professional career in
 

00:22:02.070 --> 00:22:04.520 align:start position:0%
we've spent our professional career in
the<00:22:02.310><c> 32-bit</c><00:22:02.760><c> world</c><00:22:02.970><c> basically</c><00:22:03.810><c> flying</c><00:22:04.260><c> around</c>

00:22:04.520 --> 00:22:04.530 align:start position:0%
the 32-bit world basically flying around
 

00:22:04.530 --> 00:22:06.250 align:start position:0%
the 32-bit world basically flying around
an<00:22:04.680><c> area</c><00:22:04.830><c> besides</c><00:22:05.220><c> the</c><00:22:05.370><c> Golden</c><00:22:05.640><c> Gate</c><00:22:05.700><c> Bridge</c>

00:22:06.250 --> 00:22:06.260 align:start position:0%
an area besides the Golden Gate Bridge
 

00:22:06.260 --> 00:22:09.080 align:start position:0%
an area besides the Golden Gate Bridge
so<00:22:07.260><c> what</c><00:22:07.410><c> a</c><00:22:07.440><c> 64-bit</c><00:22:08.130><c> means</c><00:22:08.340><c> with</c><00:22:08.760><c> that</c><00:22:08.910><c> same</c>

00:22:09.080 --> 00:22:09.090 align:start position:0%
so what a 64-bit means with that same
 

00:22:09.090 --> 00:22:12.170 align:start position:0%
so what a 64-bit means with that same
scale<00:22:09.740><c> well</c><00:22:10.740><c> 64</c><00:22:11.400><c> bits</c><00:22:11.580><c> is</c><00:22:11.700><c> actually</c><00:22:12.060><c> the</c>

00:22:12.170 --> 00:22:12.180 align:start position:0%
scale well 64 bits is actually the
 

00:22:12.180 --> 00:22:15.140 align:start position:0%
scale well 64 bits is actually the
surface<00:22:12.480><c> of</c><00:22:12.570><c> the</c><00:22:12.690><c> earth</c><00:22:13.370><c> it's</c><00:22:14.370><c> not</c><00:22:14.520><c> quite</c><00:22:14.820><c> evie</c>

00:22:15.140 --> 00:22:15.150 align:start position:0%
surface of the earth it's not quite evie
 

00:22:15.150 --> 00:22:18.260 align:start position:0%
surface of the earth it's not quite evie
65<00:22:15.660><c> bits</c><00:22:15.930><c> it's</c><00:22:16.140><c> actually</c><00:22:16.290><c> twice</c><00:22:17.100><c> the</c><00:22:17.910><c> surface</c>

00:22:18.260 --> 00:22:18.270 align:start position:0%
65 bits it's actually twice the surface
 

00:22:18.270 --> 00:22:19.970 align:start position:0%
65 bits it's actually twice the surface
area<00:22:18.390><c> of</c><00:22:18.570><c> all</c><00:22:18.810><c> the</c><00:22:18.960><c> landmasses</c><00:22:19.320><c> on</c><00:22:19.680><c> planet</c>

00:22:19.970 --> 00:22:19.980 align:start position:0%
area of all the landmasses on planet
 

00:22:19.980 --> 00:22:22.010 align:start position:0%
area of all the landmasses on planet
earth<00:22:20.070><c> so</c><00:22:20.640><c> basically</c><00:22:21.030><c> you</c><00:22:21.450><c> can</c><00:22:21.570><c> get</c><00:22:21.690><c> lost</c><00:22:21.810><c> in</c>

00:22:22.010 --> 00:22:22.020 align:start position:0%
earth so basically you can get lost in
 

00:22:22.020 --> 00:22:27.260 align:start position:0%
earth so basically you can get lost in
64<00:22:22.440><c> bits</c><00:22:22.620><c> it's</c><00:22:22.860><c> big</c><00:22:25.730><c> now</c><00:22:26.730><c> how</c><00:22:26.880><c> are</c><00:22:26.940><c> we</c><00:22:27.000><c> going</c><00:22:27.120><c> to</c>

00:22:27.260 --> 00:22:27.270 align:start position:0%
64 bits it's big now how are we going to
 

00:22:27.270 --> 00:22:30.080 align:start position:0%
64 bits it's big now how are we going to
divvy<00:22:27.780><c> up</c><00:22:27.810><c> the</c><00:22:27.900><c> 64-bit</c><00:22:28.470><c> address</c><00:22:28.560><c> space</c><00:22:29.090><c> well</c>

00:22:30.080 --> 00:22:30.090 align:start position:0%
divvy up the 64-bit address space well
 

00:22:30.090 --> 00:22:32.960 align:start position:0%
divvy up the 64-bit address space well
first<00:22:30.270><c> thing</c><00:22:30.360><c> remember</c><00:22:30.690><c> is</c><00:22:31.370><c> the</c><00:22:32.370><c> colonel</c><00:22:32.910><c> is</c>

00:22:32.960 --> 00:22:32.970 align:start position:0%
first thing remember is the colonel is
 

00:22:32.970 --> 00:22:34.220 align:start position:0%
first thing remember is the colonel is
going<00:22:33.150><c> to</c><00:22:33.210><c> set</c><00:22:33.330><c> up</c><00:22:33.450><c> depending</c><00:22:33.720><c> which</c><00:22:33.930><c> calling</c>

00:22:34.220 --> 00:22:34.230 align:start position:0%
going to set up depending which calling
 

00:22:34.230 --> 00:22:35.660 align:start position:0%
going to set up depending which calling
conventions<00:22:34.620><c> you</c><00:22:34.890><c> work</c><00:22:35.070><c> which</c><00:22:35.250><c> convention</c>

00:22:35.660 --> 00:22:35.670 align:start position:0%
conventions you work which convention
 

00:22:35.670 --> 00:22:37.580 align:start position:0%
conventions you work which convention
32-bit<00:22:36.060><c> 64-bit</c><00:22:36.150><c> whether</c><00:22:36.690><c> you</c><00:22:36.810><c> have</c><00:22:36.930><c> a</c><00:22:36.960><c> 64-bit</c>

00:22:37.580 --> 00:22:37.590 align:start position:0%
32-bit 64-bit whether you have a 64-bit
 

00:22:37.590 --> 00:22:39.620 align:start position:0%
32-bit 64-bit whether you have a 64-bit
or<00:22:37.710><c> 32-bit</c><00:22:37.770><c> address</c><00:22:38.490><c> space</c><00:22:38.670><c> all</c><00:22:39.030><c> the</c><00:22:39.480><c> existing</c>

00:22:39.620 --> 00:22:39.630 align:start position:0%
or 32-bit address space all the existing
 

00:22:39.630 --> 00:22:41.870 align:start position:0%
or 32-bit address space all the existing
binaries<00:22:40.260><c> will</c><00:22:40.620><c> load</c><00:22:40.920><c> is</c><00:22:41.100><c> in</c><00:22:41.340><c> the</c><00:22:41.460><c> 32-bit</c>

00:22:41.870 --> 00:22:41.880 align:start position:0%
binaries will load is in the 32-bit
 

00:22:41.880 --> 00:22:42.950 align:start position:0%
binaries will load is in the 32-bit
address<00:22:42.120><c> space</c><00:22:42.300><c> and</c><00:22:42.510><c> still</c><00:22:42.690><c> have</c><00:22:42.780><c> the</c><00:22:42.810><c> same</c>

00:22:42.950 --> 00:22:42.960 align:start position:0%
address space and still have the same
 

00:22:42.960 --> 00:22:47.060 align:start position:0%
address space and still have the same
restrictions<00:22:43.380><c> they've</c><00:22:43.500><c> always</c><00:22:43.620><c> had</c><00:22:45.890><c> 64</c><00:22:46.890><c> bit</c>

00:22:47.060 --> 00:22:47.070 align:start position:0%
restrictions they've always had 64 bit
 

00:22:47.070 --> 00:22:48.740 align:start position:0%
restrictions they've always had 64 bit
you<00:22:47.370><c> can</c><00:22:47.520><c> load</c><00:22:47.670><c> anywhere</c><00:22:48.090><c> in</c><00:22:48.150><c> that</c><00:22:48.210><c> 64-bit</c>

00:22:48.740 --> 00:22:48.750 align:start position:0%
you can load anywhere in that 64-bit
 

00:22:48.750 --> 00:22:51.920 align:start position:0%
you can load anywhere in that 64-bit
address<00:22:48.840><c> space</c><00:22:49.230><c> and</c><00:22:50.300><c> have</c><00:22:51.300><c> access</c><00:22:51.690><c> to</c><00:22:51.840><c> the</c>

00:22:51.920 --> 00:22:51.930 align:start position:0%
address space and have access to the
 

00:22:51.930 --> 00:22:55.430 align:start position:0%
address space and have access to the
entire<00:22:52.110><c> 64</c><00:22:52.590><c> bits</c><00:22:53.780><c> now</c><00:22:54.780><c> one</c><00:22:55.110><c> thing</c><00:22:55.140><c> we're</c>

00:22:55.430 --> 00:22:55.440 align:start position:0%
entire 64 bits now one thing we're
 

00:22:55.440 --> 00:22:57.710 align:start position:0%
entire 64 bits now one thing we're
contemplating<00:22:55.740><c> doing</c><00:22:56.130><c> is</c><00:22:56.400><c> some</c><00:22:56.610><c> of</c><00:22:56.730><c> you</c><00:22:56.910><c> may</c>

00:22:57.710 --> 00:22:57.720 align:start position:0%
contemplating doing is some of you may
 

00:22:57.720 --> 00:22:59.150 align:start position:0%
contemplating doing is some of you may
know<00:22:57.750><c> that</c><00:22:58.200><c> we</c><00:22:58.350><c> currently</c><00:22:58.560><c> have</c><00:22:58.890><c> a</c><00:22:58.950><c> thing</c>

00:22:59.150 --> 00:22:59.160 align:start position:0%
know that we currently have a thing
 

00:22:59.160 --> 00:23:01.430 align:start position:0%
know that we currently have a thing
called<00:22:59.190><c> a</c><00:22:59.400><c> zero</c><00:22:59.610><c> page</c><00:22:59.910><c> where</c><00:23:00.210><c> the</c><00:23:00.330><c> first</c><00:23:00.540><c> 4k</c><00:23:00.900><c> of</c>

00:23:01.430 --> 00:23:01.440 align:start position:0%
called a zero page where the first 4k of
 

00:23:01.440 --> 00:23:03.650 align:start position:0%
called a zero page where the first 4k of
a<00:23:01.560><c> third</c><00:23:01.710><c> ebit</c><00:23:01.920><c> process</c><00:23:02.340><c> is</c><00:23:02.550><c> mapped</c><00:23:02.910><c> to</c><00:23:02.910><c> be</c>

00:23:03.650 --> 00:23:03.660 align:start position:0%
a third ebit process is mapped to be
 

00:23:03.660 --> 00:23:05.570 align:start position:0%
a third ebit process is mapped to be
neither<00:23:03.900><c> readable</c><00:23:04.320><c> a</c><00:23:04.410><c> writable</c><00:23:04.830><c> and</c><00:23:05.010><c> that</c>

00:23:05.570 --> 00:23:05.580 align:start position:0%
neither readable a writable and that
 

00:23:05.580 --> 00:23:07.760 align:start position:0%
neither readable a writable and that
catches<00:23:06.030><c> a</c><00:23:06.060><c> lot</c><00:23:06.240><c> of</c><00:23:06.300><c> null</c><00:23:06.570><c> pointer</c><00:23:06.930><c> or</c><00:23:06.960><c> simple</c>

00:23:07.760 --> 00:23:07.770 align:start position:0%
catches a lot of null pointer or simple
 

00:23:07.770 --> 00:23:09.740 align:start position:0%
catches a lot of null pointer or simple
haces<00:23:08.070><c> awful</c><00:23:08.340><c> no</c><00:23:08.430><c> pointers</c><00:23:08.760><c> so</c><00:23:09.630><c> we're</c>

00:23:09.740 --> 00:23:09.750 align:start position:0%
haces awful no pointers so we're
 

00:23:09.750 --> 00:23:10.940 align:start position:0%
haces awful no pointers so we're
considering<00:23:10.050><c> it</c><00:23:10.260><c> the</c><00:23:10.320><c> same</c><00:23:10.500><c> thing</c><00:23:10.710><c> for</c><00:23:10.890><c> the</c>

00:23:10.940 --> 00:23:10.950 align:start position:0%
considering it the same thing for the
 

00:23:10.950 --> 00:23:14.440 align:start position:0%
considering it the same thing for the
64-bit<00:23:11.580><c> address</c><00:23:11.760><c> space</c><00:23:12.210><c> but</c><00:23:12.900><c> instead</c><00:23:13.200><c> laxity</c>

00:23:14.440 --> 00:23:14.450 align:start position:0%
64-bit address space but instead laxity
 

00:23:14.450 --> 00:23:17.570 align:start position:0%
64-bit address space but instead laxity
map<00:23:15.450><c> illegally</c><00:23:16.080><c> the</c><00:23:16.560><c> first</c><00:23:16.890><c> four</c><00:23:17.160><c> gig</c><00:23:17.370><c> and</c>

00:23:17.570 --> 00:23:17.580 align:start position:0%
map illegally the first four gig and
 

00:23:17.580 --> 00:23:19.250 align:start position:0%
map illegally the first four gig and
last<00:23:17.820><c> four</c><00:23:18.120><c> gigs</c><00:23:18.390><c> of</c><00:23:18.570><c> the</c><00:23:18.690><c> entire</c><00:23:18.930><c> edge</c><00:23:19.080><c> of</c>

00:23:19.250 --> 00:23:19.260 align:start position:0%
last four gigs of the entire edge of
 

00:23:19.260 --> 00:23:21.110 align:start position:0%
last four gigs of the entire edge of
space<00:23:19.320><c> and</c><00:23:20.160><c> once</c><00:23:20.340><c> it's</c><00:23:20.490><c> going</c><00:23:20.610><c> to</c><00:23:20.700><c> cache</c><00:23:20.880><c> is</c>

00:23:21.110 --> 00:23:21.120 align:start position:0%
space and once it's going to cache is
 

00:23:21.120 --> 00:23:23.330 align:start position:0%
space and once it's going to cache is
all<00:23:21.270><c> those</c><00:23:21.480><c> subtle</c><00:23:21.840><c> programming</c><00:23:22.530><c> errors</c><00:23:22.830><c> well</c>

00:23:23.330 --> 00:23:23.340 align:start position:0%
all those subtle programming errors well
 

00:23:23.340 --> 00:23:24.740 align:start position:0%
all those subtle programming errors well
you've<00:23:23.490><c> truncated</c><00:23:24.030><c> the</c><00:23:24.090><c> top</c><00:23:24.270><c> bits</c><00:23:24.510><c> of</c><00:23:24.630><c> your</c>

00:23:24.740 --> 00:23:24.750 align:start position:0%
you've truncated the top bits of your
 

00:23:24.750 --> 00:23:26.990 align:start position:0%
you've truncated the top bits of your
program<00:23:25.110><c> now</c><00:23:26.010><c> if</c><00:23:26.130><c> you</c><00:23:26.250><c> start</c><00:23:26.520><c> off</c><00:23:26.640><c> and</c><00:23:26.880><c> low</c>

00:23:26.990 --> 00:23:27.000 align:start position:0%
program now if you start off and low
 

00:23:27.000 --> 00:23:28.400 align:start position:0%
program now if you start off and low
memory<00:23:27.180><c> and</c><00:23:27.480><c> use</c><00:23:27.600><c> malloc</c><00:23:27.840><c> your</c><00:23:28.050><c> way</c><00:23:28.140><c> up</c><00:23:28.290><c> you</c>

00:23:28.400 --> 00:23:28.410 align:start position:0%
memory and use malloc your way up you
 

00:23:28.410 --> 00:23:29.750 align:start position:0%
memory and use malloc your way up you
may<00:23:28.500><c> never</c><00:23:28.740><c> actually</c><00:23:28.980><c> run</c><00:23:29.340><c> into</c><00:23:29.550><c> that</c><00:23:29.700><c> problem</c>

00:23:29.750 --> 00:23:29.760 align:start position:0%
may never actually run into that problem
 

00:23:29.760 --> 00:23:31.880 align:start position:0%
may never actually run into that problem
until<00:23:30.300><c> out</c><00:23:30.420><c> in</c><00:23:30.480><c> the</c><00:23:30.540><c> field</c><00:23:30.780><c> somewhere</c><00:23:31.110><c> well</c><00:23:31.770><c> by</c>

00:23:31.880 --> 00:23:31.890 align:start position:0%
until out in the field somewhere well by
 

00:23:31.890 --> 00:23:33.830 align:start position:0%
until out in the field somewhere well by
permanently<00:23:32.280><c> taking</c><00:23:32.610><c> out</c><00:23:32.700><c> the</c><00:23:33.120><c> to</c><00:23:33.300><c> end</c><00:23:33.480><c> chunks</c>

00:23:33.830 --> 00:23:33.840 align:start position:0%
permanently taking out the to end chunks
 

00:23:33.840 --> 00:23:35.630 align:start position:0%
permanently taking out the to end chunks
you<00:23:34.290><c> can</c><00:23:34.440><c> immediately</c><00:23:34.680><c> catch</c><00:23:35.070><c> the</c><00:23:35.250><c> software</c>

00:23:35.630 --> 00:23:35.640 align:start position:0%
you can immediately catch the software
 

00:23:35.640 --> 00:23:38.720 align:start position:0%
you can immediately catch the software
problem

00:23:38.720 --> 00:23:38.730 align:start position:0%
 
 

00:23:38.730 --> 00:23:41.260 align:start position:0%
 
so<00:23:39.480><c> let's</c><00:23:39.600><c> get</c><00:23:39.690><c> down</c><00:23:39.750><c> into</c><00:23:40.080><c> how</c><00:23:40.380><c> you</c><00:23:40.440><c> actually</c>

00:23:41.260 --> 00:23:41.270 align:start position:0%
so let's get down into how you actually
 

00:23:41.270 --> 00:23:44.539 align:start position:0%
so let's get down into how you actually
compile<00:23:42.270><c> for</c><00:23:42.450><c> 64</c><00:23:42.840><c> bits</c><00:23:42.990><c> so</c><00:23:43.679><c> in</c><00:23:43.860><c> Xcode</c><00:23:44.250><c> in</c><00:23:44.460><c> the</c>

00:23:44.539 --> 00:23:44.549 align:start position:0%
compile for 64 bits so in Xcode in the
 

00:23:44.549 --> 00:23:45.860 align:start position:0%
compile for 64 bits so in Xcode in the
inspector<00:23:44.790><c> there's</c><00:23:45.179><c> now</c><00:23:45.299><c> a</c><00:23:45.330><c> new</c><00:23:45.540><c> attribute</c>

00:23:45.860 --> 00:23:45.870 align:start position:0%
inspector there's now a new attribute
 

00:23:45.870 --> 00:23:48.799 align:start position:0%
inspector there's now a new attribute
here<00:23:46.350><c> am</c><00:23:46.650><c> I</c><00:23:46.740><c> sure</c><00:23:47.179><c> the</c><00:23:48.179><c> big</c><00:23:48.419><c> enough</c><00:23:48.600><c> to</c><00:23:48.690><c> read</c>

00:23:48.799 --> 00:23:48.809 align:start position:0%
here am I sure the big enough to read
 

00:23:48.809 --> 00:23:52.730 align:start position:0%
here am I sure the big enough to read
this<00:23:48.900><c> is</c><00:23:49.080><c> architectures</c><00:23:50.210><c> that's</c><00:23:51.210><c> new</c><00:23:51.540><c> for</c><00:23:51.870><c> the</c>

00:23:52.730 --> 00:23:52.740 align:start position:0%
this is architectures that's new for the
 

00:23:52.740 --> 00:23:54.950 align:start position:0%
this is architectures that's new for the
preview<00:23:53.309><c> you</c><00:23:53.520><c> have</c><00:23:53.640><c> of</c><00:23:53.760><c> Xcode</c><00:23:54.090><c> in</c><00:23:54.299><c> the</c><00:23:54.809><c> dark</c>

00:23:54.950 --> 00:23:54.960 align:start position:0%
preview you have of Xcode in the dark
 

00:23:54.960 --> 00:23:57.890 align:start position:0%
preview you have of Xcode in the dark
addictive<00:23:55.290><c> field</c><00:23:55.470><c> you</c><00:23:55.620><c> can</c><00:23:55.770><c> type</c><00:23:55.919><c> ppc64</c><00:23:56.900><c> that</c>

00:23:57.890 --> 00:23:57.900 align:start position:0%
addictive field you can type ppc64 that
 

00:23:57.900 --> 00:24:00.049 align:start position:0%
addictive field you can type ppc64 that
is<00:23:58.049><c> our</c><00:23:58.200><c> token</c><00:23:59.190><c> to</c><00:23:59.340><c> denote</c><00:23:59.549><c> that</c><00:23:59.610><c> you're</c><00:23:59.880><c> using</c>

00:24:00.049 --> 00:24:00.059 align:start position:0%
is our token to denote that you're using
 

00:24:00.059 --> 00:24:01.549 align:start position:0%
is our token to denote that you're using
the<00:24:00.179><c> 64-bit</c><00:24:00.780><c> calling</c><00:24:01.049><c> conventions</c><00:24:01.440><c> for</c>

00:24:01.549 --> 00:24:01.559 align:start position:0%
the 64-bit calling conventions for
 

00:24:01.559 --> 00:24:06.140 align:start position:0%
the 64-bit calling conventions for
powerpc<00:24:03.679><c> if</c><00:24:04.679><c> you're</c><00:24:04.860><c> using</c><00:24:04.980><c> GCC</c><00:24:05.610><c> you</c><00:24:05.880><c> can</c><00:24:06.030><c> say</c>

00:24:06.140 --> 00:24:06.150 align:start position:0%
powerpc if you're using GCC you can say
 

00:24:06.150 --> 00:24:10.669 align:start position:0%
powerpc if you're using GCC you can say
dash<00:24:06.360><c> arc</c><00:24:06.630><c> ppc64</c><00:24:07.290><c> from</c><00:24:07.710><c> the</c><00:24:07.770><c> command</c><00:24:08.010><c> line</c><00:24:09.679><c> now</c>

00:24:10.669 --> 00:24:10.679 align:start position:0%
dash arc ppc64 from the command line now
 

00:24:10.679 --> 00:24:13.370 align:start position:0%
dash arc ppc64 from the command line now
I<00:24:10.710><c> talked</c><00:24:10.950><c> a</c><00:24:10.980><c> bit</c><00:24:11.130><c> about</c><00:24:11.270><c> what</c><00:24:12.270><c> is</c><00:24:12.720><c> actually</c><00:24:12.960><c> in</c>

00:24:13.370 --> 00:24:13.380 align:start position:0%
I talked a bit about what is actually in
 

00:24:13.380 --> 00:24:15.140 align:start position:0%
I talked a bit about what is actually in
the<00:24:13.710><c> 64-bit</c><00:24:14.250><c> on</c><00:24:14.429><c> the</c><00:24:14.520><c> preview</c><00:24:14.850><c> you</c><00:24:15.000><c> guys</c>

00:24:15.140 --> 00:24:15.150 align:start position:0%
the 64-bit on the preview you guys
 

00:24:15.150 --> 00:24:16.909 align:start position:0%
the 64-bit on the preview you guys
received<00:24:15.510><c> this</c><00:24:15.630><c> week</c><00:24:15.809><c> and</c><00:24:16.049><c> what</c><00:24:16.740><c> we're</c><00:24:16.830><c> going</c>

00:24:16.909 --> 00:24:16.919 align:start position:0%
received this week and what we're going
 

00:24:16.919 --> 00:24:19.400 align:start position:0%
received this week and what we're going
to<00:24:17.010><c> have</c><00:24:17.070><c> by</c><00:24:17.429><c> the</c><00:24:17.490><c> time</c><00:24:17.580><c> 64</c><00:24:18.510><c> basically</c><00:24:18.840><c> but</c><00:24:19.020><c> I'm</c>

00:24:19.400 --> 00:24:19.410 align:start position:0%
to have by the time 64 basically but I'm
 

00:24:19.410 --> 00:24:23.299 align:start position:0%
to have by the time 64 basically but I'm
Tigers<00:24:19.799><c> on</c><00:24:19.919><c> 64-bit</c><00:24:20.929><c> so</c><00:24:21.929><c> first</c><00:24:22.140><c> of</c><00:24:22.320><c> all</c><00:24:22.380><c> the</c>

00:24:23.299 --> 00:24:23.309 align:start position:0%
Tigers on 64-bit so first of all the
 

00:24:23.309 --> 00:24:25.100 align:start position:0%
Tigers on 64-bit so first of all the
colonel<00:24:23.700><c> currently</c><00:24:24.270><c> does</c><00:24:24.419><c> not</c><00:24:24.570><c> support</c><00:24:24.960><c> the</c>

00:24:25.100 --> 00:24:25.110 align:start position:0%
colonel currently does not support the
 

00:24:25.110 --> 00:24:27.590 align:start position:0%
colonel currently does not support the
full<00:24:25.260><c> 64-bit</c><00:24:25.620><c> address</c><00:24:25.980><c> space</c><00:24:26.450><c> it</c><00:24:27.450><c> only</c>

00:24:27.590 --> 00:24:27.600 align:start position:0%
full 64-bit address space it only
 

00:24:27.600 --> 00:24:29.600 align:start position:0%
full 64-bit address space it only
supports<00:24:27.840><c> basically</c><00:24:28.559><c> two</c><00:24:28.980><c> million</c><00:24:29.309><c> times</c>

00:24:29.600 --> 00:24:29.610 align:start position:0%
supports basically two million times
 

00:24:29.610 --> 00:24:31.460 align:start position:0%
supports basically two million times
before<00:24:30.000><c> gig</c><00:24:30.360><c> address</c><00:24:30.690><c> space</c><00:24:30.900><c> that's</c><00:24:31.200><c> still</c>

00:24:31.460 --> 00:24:31.470 align:start position:0%
before gig address space that's still
 

00:24:31.470 --> 00:24:34.280 align:start position:0%
before gig address space that's still
elba<00:24:32.070><c> hard</c><00:24:32.190><c> time</c><00:24:32.340><c> filling</c><00:24:32.490><c> that</c><00:24:32.640><c> up</c><00:24:33.290><c> the</c>

00:24:34.280 --> 00:24:34.290 align:start position:0%
elba hard time filling that up the
 

00:24:34.290 --> 00:24:35.659 align:start position:0%
elba hard time filling that up the
second<00:24:34.679><c> is</c><00:24:34.830><c> the</c><00:24:34.860><c> only</c><00:24:35.070><c> compile</c><00:24:35.400><c> we</c><00:24:35.549><c> have</c>

00:24:35.659 --> 00:24:35.669 align:start position:0%
second is the only compile we have
 

00:24:35.669 --> 00:24:37.640 align:start position:0%
second is the only compile we have
particular<00:24:35.970><c> it</c><00:24:36.059><c> it's</c><00:24:36.210><c> a</c><00:24:36.270><c> seat</c><00:24:36.480><c> compiler</c><00:24:36.809><c> when</c>

00:24:37.640 --> 00:24:37.650 align:start position:0%
particular it it's a seat compiler when
 

00:24:37.650 --> 00:24:39.230 align:start position:0%
particular it it's a seat compiler when
we<00:24:37.799><c> should</c><00:24:37.950><c> find</c><00:24:38.160><c> the</c><00:24:38.220><c> wall</c><00:24:38.429><c> so</c><00:24:38.580><c> have</c><00:24:38.700><c> the</c><00:24:38.790><c> c++</c>

00:24:39.230 --> 00:24:39.240 align:start position:0%
we should find the wall so have the c++
 

00:24:39.240 --> 00:24:41.870 align:start position:0%
we should find the wall so have the c++
compiler<00:24:39.390><c> available</c><00:24:40.580><c> some</c><00:24:41.580><c> of</c><00:24:41.640><c> you</c><00:24:41.730><c> may</c><00:24:41.790><c> ask</c>

00:24:41.870 --> 00:24:41.880 align:start position:0%
compiler available some of you may ask
 

00:24:41.880 --> 00:24:45.380 align:start position:0%
compiler available some of you may ask
what<00:24:42.179><c> about</c><00:24:42.270><c> it</c><00:24:42.480><c> yet</c><00:24:42.630><c> to</c><00:24:42.780><c> see</c><00:24:44.179><c> that's</c><00:24:45.179><c> actually</c>

00:24:45.380 --> 00:24:45.390 align:start position:0%
what about it yet to see that's actually
 

00:24:45.390 --> 00:24:47.630 align:start position:0%
what about it yet to see that's actually
easy<00:24:45.870><c> to</c><00:24:46.049><c> do</c><00:24:46.290><c> in</c><00:24:46.410><c> the</c><00:24:46.500><c> compiler</c><00:24:46.830><c> the</c><00:24:47.250><c> problem</c>

00:24:47.630 --> 00:24:47.640 align:start position:0%
easy to do in the compiler the problem
 

00:24:47.640 --> 00:24:49.159 align:start position:0%
easy to do in the compiler the problem
is<00:24:47.760><c> as</c><00:24:48.179><c> I</c><00:24:48.360><c> said</c><00:24:48.419><c> earlier</c><00:24:48.540><c> we're</c><00:24:49.049><c> only</c>

00:24:49.159 --> 00:24:49.169 align:start position:0%
is as I said earlier we're only
 

00:24:49.169 --> 00:24:50.960 align:start position:0%
is as I said earlier we're only
committing<00:24:49.559><c> to</c><00:24:49.710><c> lib</c><00:24:49.890><c> system</c><00:24:50.370><c> being</c><00:24:50.700><c> available</c>

00:24:50.960 --> 00:24:50.970 align:start position:0%
committing to lib system being available
 

00:24:50.970 --> 00:24:53.360 align:start position:0%
committing to lib system being available
and<00:24:51.330><c> our</c><00:24:51.900><c> objective-c</c><00:24:52.440><c> runtime</c><00:24:52.559><c> relies</c>

00:24:53.360 --> 00:24:53.370 align:start position:0%
and our objective-c runtime relies
 

00:24:53.370 --> 00:24:54.980 align:start position:0%
and our objective-c runtime relies
heavily<00:24:53.400><c> on</c><00:24:53.880><c> the</c><00:24:53.970><c> foundation</c><00:24:54.480><c> framework</c><00:24:54.630><c> so</c>

00:24:54.980 --> 00:24:54.990 align:start position:0%
heavily on the foundation framework so
 

00:24:54.990 --> 00:24:56.390 align:start position:0%
heavily on the foundation framework so
we<00:24:55.080><c> haven't</c><00:24:55.380><c> committed</c><00:24:55.559><c> yet</c><00:24:55.710><c> to</c><00:24:55.980><c> when</c><00:24:56.190><c> the</c>

00:24:56.390 --> 00:24:56.400 align:start position:0%
we haven't committed yet to when the
 

00:24:56.400 --> 00:24:57.680 align:start position:0%
we haven't committed yet to when the
foundation<00:24:56.850><c> framework</c><00:24:57.030><c> will</c><00:24:57.360><c> be</c><00:24:57.450><c> available</c>

00:24:57.680 --> 00:24:57.690 align:start position:0%
foundation framework will be available
 

00:24:57.690 --> 00:25:00.049 align:start position:0%
foundation framework will be available
using<00:24:58.020><c> 64-bit</c><00:24:58.380><c> conventions</c><00:24:59.160><c> so</c><00:24:59.790><c> we're</c><00:24:59.940><c> not</c>

00:25:00.049 --> 00:25:00.059 align:start position:0%
using 64-bit conventions so we're not
 

00:25:00.059 --> 00:25:01.400 align:start position:0%
using 64-bit conventions so we're not
going<00:25:00.179><c> to</c><00:25:00.240><c> use</c><00:25:00.360><c> to</c><00:25:00.450><c> compile</c><00:25:00.780><c> yet</c><00:25:01.049><c> until</c><00:25:01.290><c> that's</c>

00:25:01.400 --> 00:25:01.410 align:start position:0%
going to use to compile yet until that's
 

00:25:01.410 --> 00:25:05.450 align:start position:0%
going to use to compile yet until that's
done<00:25:02.929><c> next</c><00:25:03.929><c> thing</c><00:25:04.080><c> is</c><00:25:04.110><c> GD</c><00:25:04.679><c> b</c><00:25:04.799><c> can</c><00:25:05.190><c> actually</c>

00:25:05.450 --> 00:25:05.460 align:start position:0%
done next thing is GD b can actually
 

00:25:05.460 --> 00:25:07.430 align:start position:0%
done next thing is GD b can actually
debug<00:25:05.669><c> 64-bit</c><00:25:06.179><c> programs</c><00:25:06.510><c> already</c><00:25:06.870><c> with</c><00:25:07.350><c> this</c>

00:25:07.430 --> 00:25:07.440 align:start position:0%
debug 64-bit programs already with this
 

00:25:07.440 --> 00:25:09.530 align:start position:0%
debug 64-bit programs already with this
preview<00:25:07.770><c> the</c><00:25:08.669><c> assembler</c><00:25:09.090><c> and</c><00:25:09.240><c> the</c><00:25:09.299><c> static</c>

00:25:09.530 --> 00:25:09.540 align:start position:0%
preview the assembler and the static
 

00:25:09.540 --> 00:25:12.320 align:start position:0%
preview the assembler and the static
linker<00:25:09.809><c> can</c><00:25:09.960><c> create</c><00:25:10.200><c> them</c><00:25:10.760><c> but</c><00:25:11.760><c> what</c><00:25:12.090><c> it</c>

00:25:12.320 --> 00:25:12.330 align:start position:0%
linker can create them but what it
 

00:25:12.330 --> 00:25:14.270 align:start position:0%
linker can create them but what it
creates<00:25:12.809><c> our</c><00:25:13.020><c> static</c><00:25:13.740><c> conversions</c><00:25:14.190><c> of</c>

00:25:14.270 --> 00:25:14.280 align:start position:0%
creates our static conversions of
 

00:25:14.280 --> 00:25:16.730 align:start position:0%
creates our static conversions of
executables<00:25:14.900><c> execute</c><00:25:15.900><c> xk</c><00:25:16.200><c> jewels</c><00:25:16.410><c> cannot</c>

00:25:16.730 --> 00:25:16.740 align:start position:0%
executables execute xk jewels cannot
 

00:25:16.740 --> 00:25:18.830 align:start position:0%
executables execute xk jewels cannot
load<00:25:16.950><c> any</c><00:25:17.130><c> libraries</c><00:25:17.640><c> so</c><00:25:18.090><c> just</c><00:25:18.299><c> one</c><00:25:18.480><c> image</c><00:25:18.630><c> is</c>

00:25:18.830 --> 00:25:18.840 align:start position:0%
load any libraries so just one image is
 

00:25:18.840 --> 00:25:22.970 align:start position:0%
load any libraries so just one image is
loaded<00:25:18.870><c> in</c><00:25:19.169><c> that's</c><00:25:19.470><c> it</c><00:25:21.110><c> for</c><00:25:22.110><c> tiger</c><00:25:22.470><c> final</c>

00:25:22.970 --> 00:25:22.980 align:start position:0%
loaded in that's it for tiger final
 

00:25:22.980 --> 00:25:24.650 align:start position:0%
loaded in that's it for tiger final
we're<00:25:23.460><c> no</c><00:25:23.640><c> longer</c><00:25:23.669><c> going</c><00:25:24.000><c> to</c><00:25:24.179><c> support</c><00:25:24.540><c> these</c>

00:25:24.650 --> 00:25:24.660 align:start position:0%
we're no longer going to support these
 

00:25:24.660 --> 00:25:26.990 align:start position:0%
we're no longer going to support these
statics<00:25:25.290><c> cuticles</c><00:25:25.620><c> and</c><00:25:25.799><c> only</c><00:25:26.790><c> going</c><00:25:26.940><c> to</c>

00:25:26.990 --> 00:25:27.000 align:start position:0%
statics cuticles and only going to
 

00:25:27.000 --> 00:25:32.270 align:start position:0%
statics cuticles and only going to
support<00:25:27.240><c> dynamic</c><00:25:27.450><c> executables</c><00:25:30.500><c> for</c><00:25:31.500><c> this</c>

00:25:32.270 --> 00:25:32.280 align:start position:0%
support dynamic executables for this
 

00:25:32.280 --> 00:25:34.909 align:start position:0%
support dynamic executables for this
release<00:25:32.750><c> the</c><00:25:33.750><c> file</c><00:25:34.020><c> format</c><00:25:34.350><c> we're</c><00:25:34.470><c> using</c><00:25:34.620><c> as</c><00:25:34.830><c> a</c>

00:25:34.909 --> 00:25:34.919 align:start position:0%
release the file format we're using as a
 

00:25:34.919 --> 00:25:37.100 align:start position:0%
release the file format we're using as a
standard<00:25:35.190><c> micro</c><00:25:35.520><c> file</c><00:25:35.730><c> format</c><00:25:36.120><c> which</c><00:25:36.750><c> means</c>

00:25:37.100 --> 00:25:37.110 align:start position:0%
standard micro file format which means
 

00:25:37.110 --> 00:25:39.650 align:start position:0%
standard micro file format which means
it's<00:25:37.620><c> limited</c><00:25:38.010><c> to</c><00:25:38.040><c> 30</c><00:25:38.250><c> to</c><00:25:38.460><c> 32</c><00:25:38.910><c> bits</c><00:25:39.179><c> and</c><00:25:39.360><c> which</c>

00:25:39.650 --> 00:25:39.660 align:start position:0%
it's limited to 30 to 32 bits and which
 

00:25:39.660 --> 00:25:42.080 align:start position:0%
it's limited to 30 to 32 bits and which
means<00:25:39.960><c> that</c><00:25:40.320><c> you're</c><00:25:40.830><c> 64</c><00:25:41.190><c> processes</c><00:25:41.820><c> that</c><00:25:41.910><c> will</c>

00:25:42.080 --> 00:25:42.090 align:start position:0%
means that you're 64 processes that will
 

00:25:42.090 --> 00:25:44.539 align:start position:0%
means that you're 64 processes that will
load<00:25:42.299><c> in</c><00:25:42.480><c> the</c><00:25:42.600><c> low</c><00:25:43.140><c> four</c><00:25:43.470><c> gig</c><00:25:43.740><c> we</c><00:25:44.220><c> haven't</c><00:25:44.460><c> done</c>

00:25:44.539 --> 00:25:44.549 align:start position:0%
load in the low four gig we haven't done
 

00:25:44.549 --> 00:25:47.750 align:start position:0%
load in the low four gig we haven't done
the<00:25:44.669><c> trick</c><00:25:44.850><c> yet</c><00:25:44.970><c> of</c><00:25:45.090><c> mapping</c><00:25:45.360><c> it</c><00:25:45.450><c> out</c><00:25:46.700><c> by</c><00:25:47.700><c> the</c>

00:25:47.750 --> 00:25:47.760 align:start position:0%
the trick yet of mapping it out by the
 

00:25:47.760 --> 00:25:51.080 align:start position:0%
the trick yet of mapping it out by the
time<00:25:48.409><c> Tigers</c><00:25:49.409><c> a</c><00:25:49.530><c> final</c><00:25:49.950><c> will</c><00:25:50.460><c> have</c><00:25:50.549><c> an</c><00:25:50.700><c> updated</c>

00:25:51.080 --> 00:25:51.090 align:start position:0%
time Tigers a final will have an updated
 

00:25:51.090 --> 00:25:52.110 align:start position:0%
time Tigers a final will have an updated
file<00:25:51.299><c> format</c><00:25:51.690><c> which</c><00:25:51.960><c> you</c>

00:25:52.110 --> 00:25:52.120 align:start position:0%
file format which you
 

00:25:52.120 --> 00:25:53.910 align:start position:0%
file format which you
load<00:25:52.330><c> your</c><00:25:52.450><c> SQL</c><00:25:52.810><c> anywhere</c><00:25:52.990><c> in</c><00:25:53.470><c> the</c><00:25:53.590><c> four</c><00:25:53.770><c> gig</c>

00:25:53.910 --> 00:25:53.920 align:start position:0%
load your SQL anywhere in the four gig
 

00:25:53.920 --> 00:25:57.810 align:start position:0%
load your SQL anywhere in the four gig
address<00:25:54.190><c> space</c><00:25:55.980><c> lastly</c><00:25:56.980><c> because</c><00:25:57.400><c> the</c>

00:25:57.810 --> 00:25:57.820 align:start position:0%
address space lastly because the
 

00:25:57.820 --> 00:25:59.330 align:start position:0%
address space lastly because the
difference<00:25:58.090><c> being</c><00:25:58.210><c> static</c><00:25:58.390><c> and</c><00:25:58.630><c> dynamic</c>

00:25:59.330 --> 00:25:59.340 align:start position:0%
difference being static and dynamic
 

00:25:59.340 --> 00:26:01.440 align:start position:0%
difference being static and dynamic
Xcode<00:26:00.340><c> is</c><00:26:00.490><c> only</c><00:26:00.610><c> going</c><00:26:00.790><c> to</c><00:26:00.850><c> support</c><00:26:01.150><c> building</c>

00:26:01.440 --> 00:26:01.450 align:start position:0%
Xcode is only going to support building
 

00:26:01.450 --> 00:26:05.580 align:start position:0%
Xcode is only going to support building
standalone<00:26:02.290><c> static</c><00:26:03.120><c> ppc64</c><00:26:04.120><c> executables</c><00:26:04.900><c> not</c>

00:26:05.580 --> 00:26:05.590 align:start position:0%
standalone static ppc64 executables not
 

00:26:05.590 --> 00:26:08.370 align:start position:0%
standalone static ppc64 executables not
fat<00:26:06.010><c> in</c><00:26:06.940><c> finally</c><00:26:07.570><c> be</c><00:26:07.660><c> able</c><00:26:07.750><c> to</c><00:26:07.900><c> build</c><00:26:08.080><c> fatten</c>

00:26:08.370 --> 00:26:08.380 align:start position:0%
fat in finally be able to build fatten
 

00:26:08.380 --> 00:26:10.710 align:start position:0%
fat in finally be able to build fatten
binaries<00:26:08.740><c> and</c><00:26:09.150><c> of</c><00:26:10.150><c> course</c><00:26:10.330><c> the</c><00:26:10.450><c> whole</c><00:26:10.570><c> point</c>

00:26:10.710 --> 00:26:10.720 align:start position:0%
binaries and of course the whole point
 

00:26:10.720 --> 00:26:11.670 align:start position:0%
binaries and of course the whole point
of<00:26:10.810><c> this</c><00:26:10.900><c> preview</c><00:26:11.230><c> is</c><00:26:11.350><c> for</c><00:26:11.470><c> you</c><00:26:11.530><c> to</c><00:26:11.560><c> evaluate</c>

00:26:11.670 --> 00:26:11.680 align:start position:0%
of this preview is for you to evaluate
 

00:26:11.680 --> 00:26:13.020 align:start position:0%
of this preview is for you to evaluate
which<00:26:12.190><c> is</c><00:26:12.280><c> where</c><00:26:12.400><c> rates</c><00:26:12.520><c> and</c><00:26:12.670><c> start</c><00:26:12.820><c> playing</c>

00:26:13.020 --> 00:26:13.030 align:start position:0%
which is where rates and start playing
 

00:26:13.030 --> 00:26:15.750 align:start position:0%
which is where rates and start playing
with<00:26:13.210><c> and</c><00:26:13.360><c> give</c><00:26:13.480><c> the</c><00:26:13.600><c> feedback</c><00:26:14.160><c> once</c><00:26:15.160><c> Tiger</c><00:26:15.550><c> is</c>

00:26:15.750 --> 00:26:15.760 align:start position:0%
with and give the feedback once Tiger is
 

00:26:15.760 --> 00:26:17.640 align:start position:0%
with and give the feedback once Tiger is
final<00:26:16.300><c> then</c><00:26:16.780><c> the</c><00:26:16.900><c> program's</c><00:26:17.230><c> you</c><00:26:17.290><c> make</c><00:26:17.440><c> on</c><00:26:17.560><c> the</c>

00:26:17.640 --> 00:26:17.650 align:start position:0%
final then the program's you make on the
 

00:26:17.650 --> 00:26:19.050 align:start position:0%
final then the program's you make on the
final<00:26:17.890><c> tiger</c><00:26:18.190><c> you</c><00:26:18.280><c> can</c><00:26:18.430><c> ship</c><00:26:18.610><c> an</c><00:26:18.730><c> apple</c><00:26:18.970><c> will</c>

00:26:19.050 --> 00:26:19.060 align:start position:0%
final tiger you can ship an apple will
 

00:26:19.060 --> 00:26:26.010 align:start position:0%
final tiger you can ship an apple will
support<00:26:22.110><c> let</c><00:26:23.110><c> me</c><00:26:23.170><c> summarize</c><00:26:23.500><c> here</c><00:26:24.810><c> g5</c><00:26:25.810><c> is</c>

00:26:26.010 --> 00:26:26.020 align:start position:0%
support let me summarize here g5 is
 

00:26:26.020 --> 00:26:28.020 align:start position:0%
support let me summarize here g5 is
unique<00:26:26.230><c> 64-bit</c><00:26:26.740><c> processor</c><00:26:27.250><c> there</c><00:26:27.490><c> is</c><00:26:27.610><c> no</c><00:26:27.790><c> mode</c>

00:26:28.020 --> 00:26:28.030 align:start position:0%
unique 64-bit processor there is no mode
 

00:26:28.030 --> 00:26:30.000 align:start position:0%
unique 64-bit processor there is no mode
all<00:26:28.720><c> the</c><00:26:28.930><c> instructions</c><00:26:29.230><c> are</c><00:26:29.470><c> exactly</c><00:26:29.830><c> the</c>

00:26:30.000 --> 00:26:30.010 align:start position:0%
all the instructions are exactly the
 

00:26:30.010 --> 00:26:31.830 align:start position:0%
all the instructions are exactly the
same<00:26:30.040><c> the</c><00:26:30.580><c> only</c><00:26:30.610><c> difference</c><00:26:30.850><c> between</c><00:26:31.180><c> 32-bit</c>

00:26:31.830 --> 00:26:31.840 align:start position:0%
same the only difference between 32-bit
 

00:26:31.840 --> 00:26:33.870 align:start position:0%
same the only difference between 32-bit
and<00:26:32.020><c> 64-bit</c><00:26:32.140><c> executables</c><00:26:32.950><c> is</c><00:26:33.130><c> conventions</c>

00:26:33.870 --> 00:26:33.880 align:start position:0%
and 64-bit executables is conventions
 

00:26:33.880 --> 00:26:40.260 align:start position:0%
and 64-bit executables is conventions
they<00:26:34.000><c> use</c><00:26:37.560><c> again</c><00:26:38.560><c> because</c><00:26:38.950><c> once</c><00:26:39.880><c> you</c><00:26:40.000><c> switch</c><00:26:40.120><c> a</c>

00:26:40.260 --> 00:26:40.270 align:start position:0%
they use again because once you switch a
 

00:26:40.270 --> 00:26:41.700 align:start position:0%
they use again because once you switch a
64-bit<00:26:40.750><c> your</c><00:26:40.930><c> data</c><00:26:41.080><c> structures</c><00:26:41.440><c> are</c><00:26:41.560><c> bigger</c>

00:26:41.700 --> 00:26:41.710 align:start position:0%
64-bit your data structures are bigger
 

00:26:41.710 --> 00:26:43.380 align:start position:0%
64-bit your data structures are bigger
you<00:26:41.950><c> have</c><00:26:42.100><c> a</c><00:26:42.130><c> slight</c><00:26:42.400><c> performance</c><00:26:42.910><c> decrease</c>

00:26:43.380 --> 00:26:43.390 align:start position:0%
you have a slight performance decrease
 

00:26:43.390 --> 00:26:45.660 align:start position:0%
you have a slight performance decrease
for<00:26:44.350><c> that</c><00:26:44.500><c> reason</c><00:26:44.680><c> the</c><00:26:44.890><c> only</c><00:26:45.040><c> reason</c><00:26:45.280><c> you</c>

00:26:45.660 --> 00:26:45.670 align:start position:0%
for that reason the only reason you
 

00:26:45.670 --> 00:26:48.090 align:start position:0%
for that reason the only reason you
should<00:26:45.880><c> convert</c><00:26:46.720><c> to</c><00:26:47.050><c> using</c><00:26:47.260><c> 64-bit</c><00:26:47.440><c> calling</c>

00:26:48.090 --> 00:26:48.100 align:start position:0%
should convert to using 64-bit calling
 

00:26:48.100 --> 00:26:50.880 align:start position:0%
should convert to using 64-bit calling
conventions<00:26:48.550><c> is</c><00:26:49.080><c> if</c><00:26:50.080><c> you</c><00:26:50.230><c> actually</c><00:26:50.380><c> need</c><00:26:50.710><c> more</c>

00:26:50.880 --> 00:26:50.890 align:start position:0%
conventions is if you actually need more
 

00:26:50.890 --> 00:26:53.880 align:start position:0%
conventions is if you actually need more
than<00:26:50.920><c> four</c><00:26:51.190><c> gigs</c><00:26:51.220><c> that</c><00:26:51.490><c> address</c><00:26:51.910><c> space</c><00:26:52.890><c> we're</c>

00:26:53.880 --> 00:26:53.890 align:start position:0%
than four gigs that address space we're
 

00:26:53.890 --> 00:26:55.830 align:start position:0%
than four gigs that address space we're
using<00:26:54.070><c> the</c><00:26:54.460><c> architecture</c><00:26:55.330><c> part</c><00:26:55.510><c> of</c><00:26:55.600><c> our</c><00:26:55.690><c> fat</c>

00:26:55.830 --> 00:26:55.840 align:start position:0%
using the architecture part of our fat
 

00:26:55.840 --> 00:26:59.430 align:start position:0%
using the architecture part of our fat
build<00:26:56.080><c> to</c><00:26:57.070><c> enable</c><00:26:57.730><c> a</c><00:26:57.940><c> mixture</c><00:26:58.600><c> of</c><00:26:58.690><c> both</c><00:26:58.900><c> 32</c><00:26:59.320><c> bit</c>

00:26:59.430 --> 00:26:59.440 align:start position:0%
build to enable a mixture of both 32 bit
 

00:26:59.440 --> 00:27:01.410 align:start position:0%
build to enable a mixture of both 32 bit
and<00:26:59.560><c> 64</c><00:26:59.800><c> calling</c><00:27:00.250><c> conventions</c><00:27:00.580><c> of</c><00:27:00.670><c> power</c><00:27:00.910><c> PCT</c>

00:27:01.410 --> 00:27:01.420 align:start position:0%
and 64 calling conventions of power PCT
 

00:27:01.420 --> 00:27:03.660 align:start position:0%
and 64 calling conventions of power PCT
code<00:27:01.810><c> and</c><00:27:02.050><c> we're</c><00:27:02.530><c> calling</c><00:27:02.950><c> the</c><00:27:03.160><c> new</c><00:27:03.310><c> thank</c><00:27:03.520><c> g-d</c>

00:27:03.660 --> 00:27:03.670 align:start position:0%
code and we're calling the new thank g-d
 

00:27:03.670 --> 00:27:08.670 align:start position:0%
code and we're calling the new thank g-d
c64<00:27:04.390><c> and</c><00:27:05.310><c> lastly</c><00:27:06.510><c> we're</c><00:27:07.510><c> only</c><00:27:07.630><c> shipping</c><00:27:07.960><c> lids</c>

00:27:08.670 --> 00:27:08.680 align:start position:0%
c64 and lastly we're only shipping lids
 

00:27:08.680 --> 00:27:09.870 align:start position:0%
c64 and lastly we're only shipping lids
to<00:27:08.770><c> strong</c><00:27:09.130><c> the</c><00:27:09.220><c> committee</c><00:27:09.490><c> to</c><00:27:09.550><c> shipping</c>

00:27:09.870 --> 00:27:09.880 align:start position:0%
to strong the committee to shipping
 

00:27:09.880 --> 00:27:12.030 align:start position:0%
to strong the committee to shipping
libsystem<00:27:10.480><c> as</c><00:27:10.630><c> available</c><00:27:11.200><c> for</c><00:27:11.470><c> 64-bit</c>

00:27:12.030 --> 00:27:12.040 align:start position:0%
libsystem as available for 64-bit
 

00:27:12.040 --> 00:27:15.060 align:start position:0%
libsystem as available for 64-bit
programs<00:27:12.510><c> so</c><00:27:13.510><c> you</c><00:27:13.600><c> need</c><00:27:13.720><c> to</c><00:27:14.500><c> work</c><00:27:14.650><c> around</c><00:27:14.770><c> that</c>

00:27:15.060 --> 00:27:15.070 align:start position:0%
programs so you need to work around that
 

00:27:15.070 --> 00:27:17.310 align:start position:0%
programs so you need to work around that
and<00:27:15.250><c> again</c><00:27:15.790><c> the</c><00:27:16.450><c> program's</c><00:27:16.810><c> you</c><00:27:16.870><c> build</c><00:27:17.110><c> on</c>

00:27:17.310 --> 00:27:17.320 align:start position:0%
and again the program's you build on
 

00:27:17.320 --> 00:27:19.650 align:start position:0%
and again the program's you build on
this<00:27:17.440><c> preview</c><00:27:17.860><c> will</c><00:27:18.400><c> not</c><00:27:18.580><c> run</c><00:27:18.880><c> on</c><00:27:18.910><c> Tiger</c><00:27:19.330><c> final</c>

00:27:19.650 --> 00:27:19.660 align:start position:0%
this preview will not run on Tiger final
 

00:27:19.660 --> 00:27:23.250 align:start position:0%
this preview will not run on Tiger final
it's<00:27:20.050><c> purely</c><00:27:20.410><c> for</c><00:27:20.620><c> evaluation</c><00:27:21.930><c> the</c><00:27:22.930><c> next</c><00:27:23.170><c> I'd</c>

00:27:23.250 --> 00:27:23.260 align:start position:0%
it's purely for evaluation the next I'd
 

00:27:23.260 --> 00:27:24.660 align:start position:0%
it's purely for evaluation the next I'd
like<00:27:23.290><c> to</c><00:27:23.500><c> bring</c><00:27:23.650><c> up</c><00:27:23.800><c> Jess</c><00:27:24.130><c> laughs</c><00:27:24.370><c> and</c><00:27:24.580><c> who's</c>

00:27:24.660 --> 00:27:24.670 align:start position:0%
like to bring up Jess laughs and who's
 

00:27:24.670 --> 00:27:27.320 align:start position:0%
like to bring up Jess laughs and who's
going<00:27:24.820><c> to</c><00:27:24.880><c> give</c><00:27:25.030><c> you</c><00:27:25.120><c> a</c><00:27:25.150><c> short</c><00:27:25.270><c> demo</c><00:27:25.600><c> 64-bit</c>

00:27:27.320 --> 00:27:27.330 align:start position:0%
going to give you a short demo 64-bit
 

00:27:27.330 --> 00:27:33.450 align:start position:0%
going to give you a short demo 64-bit
thanks<00:27:28.330><c> Nick</c><00:27:31.650><c> what</c><00:27:32.650><c> I</c><00:27:32.680><c> wanted</c><00:27:32.920><c> to</c><00:27:32.980><c> show</c><00:27:33.070><c> is</c><00:27:33.370><c> I</c>

00:27:33.450 --> 00:27:33.460 align:start position:0%
thanks Nick what I wanted to show is I
 

00:27:33.460 --> 00:27:35.040 align:start position:0%
thanks Nick what I wanted to show is I
wanted<00:27:33.670><c> to</c><00:27:33.730><c> go</c><00:27:33.850><c> a</c><00:27:33.880><c> little</c><00:27:34.090><c> bit</c><00:27:34.300><c> into</c><00:27:34.630><c> how</c><00:27:34.990><c> to</c>

00:27:35.040 --> 00:27:35.050 align:start position:0%
wanted to go a little bit into how to
 

00:27:35.050 --> 00:27:37.860 align:start position:0%
wanted to go a little bit into how to
build<00:27:35.350><c> a</c><00:27:35.440><c> 64-bit</c><00:27:36.070><c> service</c><00:27:37.000><c> application</c><00:27:37.600><c> using</c>

00:27:37.860 --> 00:27:37.870 align:start position:0%
build a 64-bit service application using
 

00:27:37.870 --> 00:27:39.870 align:start position:0%
build a 64-bit service application using
Xcode<00:27:38.260><c> and</c><00:27:38.470><c> for</c><00:27:39.130><c> those</c><00:27:39.220><c> of</c><00:27:39.280><c> you</c><00:27:39.460><c> that</c><00:27:39.640><c> were</c><00:27:39.760><c> at</c>

00:27:39.870 --> 00:27:39.880 align:start position:0%
Xcode and for those of you that were at
 

00:27:39.880 --> 00:27:42.270 align:start position:0%
Xcode and for those of you that were at
Ed's<00:27:40.230><c> tools</c><00:27:41.230><c> over</c><00:27:41.500><c> each</c><00:27:41.620><c> session</c><00:27:41.830><c> on</c><00:27:42.040><c> Monday</c>

00:27:42.270 --> 00:27:42.280 align:start position:0%
Ed's tools over each session on Monday
 

00:27:42.280 --> 00:27:45.510 align:start position:0%
Ed's tools over each session on Monday
afternoon<00:27:42.670><c> you</c><00:27:42.790><c> saw</c><00:27:42.940><c> the</c><00:27:43.000><c> Celestia</c><00:27:43.570><c> app</c><00:27:44.520><c> what</c>

00:27:45.510 --> 00:27:45.520 align:start position:0%
afternoon you saw the Celestia app what
 

00:27:45.520 --> 00:27:47.280 align:start position:0%
afternoon you saw the Celestia app what
was<00:27:45.640><c> going</c><00:27:45.880><c> on</c><00:27:45.970><c> behind</c><00:27:46.360><c> the</c><00:27:46.450><c> scenes</c><00:27:46.720><c> there</c><00:27:47.050><c> was</c>

00:27:47.280 --> 00:27:47.290 align:start position:0%
was going on behind the scenes there was
 

00:27:47.290 --> 00:27:49.770 align:start position:0%
was going on behind the scenes there was
we<00:27:47.470><c> have</c><00:27:47.590><c> this</c><00:27:47.710><c> 32-bit</c><00:27:48.340><c> GUI</c><00:27:48.520><c> application</c><00:27:49.270><c> with</c>

00:27:49.770 --> 00:27:49.780 align:start position:0%
we have this 32-bit GUI application with
 

00:27:49.780 --> 00:27:51.450 align:start position:0%
we have this 32-bit GUI application with
a<00:27:49.810><c> 64-bit</c><00:27:50.440><c> service</c><00:27:50.740><c> application</c><00:27:51.340><c> in</c><00:27:51.430><c> the</c>

00:27:51.450 --> 00:27:51.460 align:start position:0%
a 64-bit service application in the
 

00:27:51.460 --> 00:27:54.240 align:start position:0%
a 64-bit service application in the
background<00:27:51.940><c> and</c><00:27:52.470><c> that</c><00:27:53.470><c> application</c><00:27:54.070><c> actually</c>

00:27:54.240 --> 00:27:54.250 align:start position:0%
background and that application actually
 

00:27:54.250 --> 00:27:56.100 align:start position:0%
background and that application actually
was<00:27:54.520><c> mapping</c><00:27:54.730><c> six</c><00:27:55.120><c> and</c><00:27:55.270><c> a</c><00:27:55.300><c> half</c><00:27:55.330><c> gigabytes</c><00:27:55.900><c> of</c>

00:27:56.100 --> 00:27:56.110 align:start position:0%
was mapping six and a half gigabytes of
 

00:27:56.110 --> 00:27:57.930 align:start position:0%
was mapping six and a half gigabytes of
terrain<00:27:56.470><c> data</c><00:27:56.650><c> which</c><00:27:56.980><c> I</c><00:27:57.220><c> think</c><00:27:57.460><c> we</c><00:27:57.580><c> left</c><00:27:57.760><c> out</c>

00:27:57.930 --> 00:27:57.940 align:start position:0%
terrain data which I think we left out
 

00:27:57.940 --> 00:28:00.360 align:start position:0%
terrain data which I think we left out
that<00:27:57.970><c> little</c><00:27:58.300><c> statistic</c><00:27:59.260><c> so</c><00:27:59.530><c> it</c><00:27:59.980><c> really</c><00:28:00.160><c> was</c>

00:28:00.360 --> 00:28:00.370 align:start position:0%
that little statistic so it really was
 

00:28:00.370 --> 00:28:02.100 align:start position:0%
that little statistic so it really was
making<00:28:00.670><c> use</c><00:28:00.820><c> of</c><00:28:00.910><c> the</c><00:28:01.030><c> 64-bit</c><00:28:01.630><c> address</c><00:28:01.750><c> space</c>

00:28:02.100 --> 00:28:02.110 align:start position:0%
making use of the 64-bit address space
 

00:28:02.110 --> 00:28:04.530 align:start position:0%
making use of the 64-bit address space
so<00:28:02.830><c> I'm</c><00:28:02.920><c> going</c><00:28:02.950><c> to</c><00:28:03.160><c> show</c><00:28:03.370><c> that</c><00:28:03.670><c> actual</c><00:28:04.180><c> service</c>

00:28:04.530 --> 00:28:04.540 align:start position:0%
so I'm going to show that actual service
 

00:28:04.540 --> 00:28:06.060 align:start position:0%
so I'm going to show that actual service
application<00:28:05.170><c> how</c><00:28:05.350><c> you</c><00:28:05.410><c> would</c><00:28:05.620><c> build</c><00:28:05.770><c> out</c><00:28:05.950><c> an</c>

00:28:06.060 --> 00:28:06.070 align:start position:0%
application how you would build out an
 

00:28:06.070 --> 00:28:07.800 align:start position:0%
application how you would build out an
Xcode<00:28:06.400><c> then</c><00:28:06.670><c> play</c><00:28:06.970><c> some</c><00:28:07.180><c> games</c><00:28:07.390><c> and</c><00:28:07.570><c> step</c>

00:28:07.800 --> 00:28:07.810 align:start position:0%
Xcode then play some games and step
 

00:28:07.810 --> 00:28:10.170 align:start position:0%
Xcode then play some games and step
through<00:28:07.990><c> the</c><00:28:08.080><c> debugger</c><00:28:08.820><c> so</c><00:28:09.820><c> let</c><00:28:09.940><c> me</c><00:28:09.970><c> watch</c>

00:28:10.170 --> 00:28:10.180 align:start position:0%
through the debugger so let me watch
 

00:28:10.180 --> 00:28:14.370 align:start position:0%
through the debugger so let me watch
Xcode<00:28:10.660><c> and</c><00:28:12.180><c> I'm</c><00:28:13.180><c> going</c><00:28:13.390><c> to</c><00:28:13.420><c> do</c><00:28:13.870><c> some</c><00:28:14.080><c> cut</c><00:28:14.230><c> and</c>

00:28:14.370 --> 00:28:14.380 align:start position:0%
Xcode and I'm going to do some cut and
 

00:28:14.380 --> 00:28:15.990 align:start position:0%
Xcode and I'm going to do some cut and
paste<00:28:14.560><c> to</c><00:28:14.770><c> speed</c><00:28:14.980><c> this</c><00:28:15.130><c> up</c><00:28:15.250><c> a</c><00:28:15.400><c> little</c><00:28:15.490><c> bit</c><00:28:15.760><c> but</c>

00:28:15.990 --> 00:28:16.000 align:start position:0%
paste to speed this up a little bit but
 

00:28:16.000 --> 00:28:18.720 align:start position:0%
paste to speed this up a little bit but
you'd<00:28:16.930><c> be</c><00:28:17.080><c> doing</c><00:28:17.290><c> the</c><00:28:17.380><c> same</c><00:28:17.410><c> thing</c><00:28:17.800><c> but</c><00:28:18.250><c> typing</c>

00:28:18.720 --> 00:28:18.730 align:start position:0%
you'd be doing the same thing but typing
 

00:28:18.730 --> 00:28:21.710 align:start position:0%
you'd be doing the same thing but typing
so<00:28:18.910><c> I'm</c><00:28:19.000><c> going</c><00:28:19.150><c> to</c><00:28:19.180><c> create</c><00:28:19.360><c> a</c><00:28:19.450><c> new</c><00:28:19.570><c> project</c><00:28:20.220><c> and</c>

00:28:21.710 --> 00:28:21.720 align:start position:0%
so I'm going to create a new project and
 

00:28:21.720 --> 00:28:28.020 align:start position:0%
so I'm going to create a new project and
just<00:28:22.720><c> a</c><00:28:22.900><c> standard</c><00:28:23.320><c> C</c><00:28:23.560><c> tool</c><00:28:26.340><c> just</c><00:28:27.340><c> call</c><00:28:27.550><c> it</c><00:28:27.670><c> Tara</c>

00:28:28.020 --> 00:28:28.030 align:start position:0%
just a standard C tool just call it Tara
 

00:28:28.030 --> 00:28:32.280 align:start position:0%
just a standard C tool just call it Tara
mapper<00:28:28.560><c> it's</c><00:28:29.560><c> a</c><00:28:29.650><c> good</c><00:28:29.800><c> similar</c><00:28:30.700><c> name</c><00:28:31.170><c> give</c><00:28:32.170><c> it</c>

00:28:32.280 --> 00:28:32.290 align:start position:0%
mapper it's a good similar name give it
 

00:28:32.290 --> 00:28:40.560 align:start position:0%
mapper it's a good similar name give it
a<00:28:32.350><c> second</c><00:28:32.770><c> I</c><00:28:38.490><c> think</c><00:28:39.490><c> my</c><00:28:39.610><c> disks</c><00:28:39.790><c> bun</c><00:28:40.150><c> down</c><00:28:40.360><c> while</c>

00:28:40.560 --> 00:28:40.570 align:start position:0%
a second I think my disks bun down while
 

00:28:40.570 --> 00:28:43.890 align:start position:0%
a second I think my disks bun down while
the<00:28:40.600><c> machine</c><00:28:40.990><c> was</c><00:28:41.110><c> resting</c><00:28:41.880><c> so</c><00:28:42.880><c> I'm</c><00:28:43.450><c> going</c><00:28:43.510><c> to</c>

00:28:43.890 --> 00:28:43.900 align:start position:0%
the machine was resting so I'm going to
 

00:28:43.900 --> 00:28:45.420 align:start position:0%
the machine was resting so I'm going to
do<00:28:44.230><c> this</c><00:28:44.380><c> quicker</c><00:28:44.680><c> instead</c><00:28:45.070><c> of</c><00:28:45.190><c> me</c><00:28:45.280><c> actually</c>

00:28:45.420 --> 00:28:45.430 align:start position:0%
do this quicker instead of me actually
 

00:28:45.430 --> 00:28:47.160 align:start position:0%
do this quicker instead of me actually
typing<00:28:46.120><c> in</c><00:28:46.240><c> the</c><00:28:46.270><c> text</c><00:28:46.360><c> I'm</c><00:28:46.810><c> going</c><00:28:46.840><c> to</c><00:28:46.990><c> actually</c>

00:28:47.160 --> 00:28:47.170 align:start position:0%
typing in the text I'm going to actually
 

00:28:47.170 --> 00:28:49.710 align:start position:0%
typing in the text I'm going to actually
add<00:28:47.590><c> the</c><00:28:48.370><c> source</c><00:28:48.640><c> file</c><00:28:48.940><c> to</c><00:28:49.120><c> the</c><00:28:49.210><c> project</c>

00:28:49.710 --> 00:28:49.720 align:start position:0%
add the source file to the project
 

00:28:49.720 --> 00:28:56.520 align:start position:0%
add the source file to the project
quickly<00:28:51.960><c> and</c><00:28:52.960><c> copy</c><00:28:53.410><c> it</c><00:28:53.680><c> in</c><00:28:53.950><c> and</c><00:28:55.350><c> delete</c><00:28:56.350><c> that</c>

00:28:56.520 --> 00:28:56.530 align:start position:0%
quickly and copy it in and delete that
 

00:28:56.530 --> 00:28:58.380 align:start position:0%
quickly and copy it in and delete that
little<00:28:56.830><c> template</c><00:28:57.250><c> main</c><00:28:57.520><c> that</c><00:28:57.850><c> came</c><00:28:58.090><c> with</c><00:28:58.270><c> the</c>

00:28:58.380 --> 00:28:58.390 align:start position:0%
little template main that came with the
 

00:28:58.390 --> 00:29:03.630 align:start position:0%
little template main that came with the
temp<00:28:58.660><c> project</c><00:29:00.630><c> ok</c><00:29:01.800><c> so</c><00:29:02.800><c> the</c><00:29:03.100><c> first</c><00:29:03.340><c> thing</c><00:29:03.430><c> you</c>

00:29:03.630 --> 00:29:03.640 align:start position:0%
temp project ok so the first thing you
 

00:29:03.640 --> 00:29:05.370 align:start position:0%
temp project ok so the first thing you
need<00:29:03.760><c> to</c><00:29:03.820><c> do</c><00:29:04.060><c> when</c><00:29:04.240><c> you're</c><00:29:04.390><c> building</c><00:29:04.540><c> a</c><00:29:04.750><c> 64-bit</c>

00:29:05.370 --> 00:29:05.380 align:start position:0%
need to do when you're building a 64-bit
 

00:29:05.380 --> 00:29:07.740 align:start position:0%
need to do when you're building a 64-bit
app<00:29:05.560><c> to</c><00:29:05.920><c> make</c><00:29:06.070><c> sure</c><00:29:06.310><c> is</c><00:29:06.640><c> you</c><00:29:07.090><c> want</c><00:29:07.330><c> to</c><00:29:07.420><c> open</c><00:29:07.510><c> up</c>

00:29:07.740 --> 00:29:07.750 align:start position:0%
app to make sure is you want to open up
 

00:29:07.750 --> 00:29:10.320 align:start position:0%
app to make sure is you want to open up
the<00:29:07.960><c> project</c><00:29:08.800><c> inspector</c><00:29:09.550><c> and</c><00:29:09.820><c> as</c><00:29:10.150><c> Nick</c>

00:29:10.320 --> 00:29:10.330 align:start position:0%
the project inspector and as Nick
 

00:29:10.330 --> 00:29:12.930 align:start position:0%
the project inspector and as Nick
mentioned<00:29:10.650><c> there's</c><00:29:11.650><c> a</c><00:29:11.830><c> architecture</c><00:29:12.700><c> flag</c>

00:29:12.930 --> 00:29:12.940 align:start position:0%
mentioned there's a architecture flag
 

00:29:12.940 --> 00:29:14.790 align:start position:0%
mentioned there's a architecture flag
setting<00:29:13.420><c> and</c><00:29:13.630><c> by</c><00:29:13.870><c> default</c><00:29:14.200><c> we</c><00:29:14.470><c> build</c><00:29:14.710><c> for</c>

00:29:14.790 --> 00:29:14.800 align:start position:0%
setting and by default we build for
 

00:29:14.800 --> 00:29:17.190 align:start position:0%
setting and by default we build for
32-bit<00:29:15.460><c> convention</c><00:29:16.000><c> so</c><00:29:16.240><c> I'm</c><00:29:16.690><c> just</c><00:29:16.960><c> going</c><00:29:17.140><c> to</c>

00:29:17.190 --> 00:29:17.200 align:start position:0%
32-bit convention so I'm just going to
 

00:29:17.200 --> 00:29:23.820 align:start position:0%
32-bit convention so I'm just going to
change<00:29:17.470><c> this</c><00:29:17.650><c> to</c><00:29:18.510><c> ppc64</c><00:29:20.970><c> and</c><00:29:21.970><c> then</c><00:29:22.900><c> close</c><00:29:23.410><c> that</c>

00:29:23.820 --> 00:29:23.830 align:start position:0%
change this to ppc64 and then close that
 

00:29:23.830 --> 00:29:27.330 align:start position:0%
change this to ppc64 and then close that
and<00:29:24.660><c> so</c><00:29:25.660><c> now</c><00:29:26.080><c> what</c><00:29:26.350><c> I</c><00:29:26.380><c> want</c><00:29:26.560><c> to</c><00:29:26.620><c> do</c><00:29:26.710><c> and</c><00:29:26.890><c> open</c><00:29:27.280><c> up</c>

00:29:27.330 --> 00:29:27.340 align:start position:0%
and so now what I want to do and open up
 

00:29:27.340 --> 00:29:29.280 align:start position:0%
and so now what I want to do and open up
the<00:29:27.490><c> source</c><00:29:27.700><c> file</c><00:29:27.940><c> and</c><00:29:28.300><c> I'm</c><00:29:28.870><c> going</c><00:29:28.900><c> to</c><00:29:29.080><c> set</c><00:29:29.260><c> a</c>

00:29:29.280 --> 00:29:29.290 align:start position:0%
the source file and I'm going to set a
 

00:29:29.290 --> 00:29:32.310 align:start position:0%
the source file and I'm going to set a
breakpoint<00:29:29.650><c> at</c><00:29:30.280><c> the</c><00:29:30.580><c> start</c><00:29:30.880><c> of</c><00:29:31.320><c> actually</c>

00:29:32.310 --> 00:29:32.320 align:start position:0%
breakpoint at the start of actually
 

00:29:32.320 --> 00:29:33.660 align:start position:0%
breakpoint at the start of actually
before<00:29:32.800><c> I</c><00:29:32.950><c> do</c><00:29:33.010><c> that</c><00:29:33.100><c> I'm</c><00:29:33.370><c> going</c><00:29:33.520><c> to</c><00:29:33.610><c> do</c>

00:29:33.660 --> 00:29:33.670 align:start position:0%
before I do that I'm going to do
 

00:29:33.670 --> 00:29:34.920 align:start position:0%
before I do that I'm going to do
something<00:29:33.910><c> a</c><00:29:33.970><c> little</c><00:29:34.000><c> tricky</c><00:29:34.540><c> to</c><00:29:34.570><c> speed</c><00:29:34.840><c> this</c>

00:29:34.920 --> 00:29:34.930 align:start position:0%
something a little tricky to speed this
 

00:29:34.930 --> 00:29:39.020 align:start position:0%
something a little tricky to speed this
demo<00:29:35.170><c> up</c><00:29:36.270><c> I'm</c><00:29:37.270><c> going</c><00:29:37.600><c> to</c><00:29:37.810><c> actually</c>

00:29:39.020 --> 00:29:39.030 align:start position:0%
demo up I'm going to actually
 

00:29:39.030 --> 00:29:41.010 align:start position:0%
demo up I'm going to actually
pre-allocate<00:29:40.030><c> three</c><00:29:40.270><c> gigabytes</c><00:29:40.570><c> of</c><00:29:40.870><c> my</c>

00:29:41.010 --> 00:29:41.020 align:start position:0%
pre-allocate three gigabytes of my
 

00:29:41.020 --> 00:29:43.970 align:start position:0%
pre-allocate three gigabytes of my
address<00:29:41.410><c> space</c>

00:29:43.970 --> 00:29:43.980 align:start position:0%
 
 

00:29:43.980 --> 00:29:46.900 align:start position:0%
 
and<00:29:44.250><c> count</c><00:29:44.549><c> the</c><00:29:44.669><c> right</c><00:29:44.820><c> number</c><00:29:45.090><c> zeros</c><00:29:45.450><c> here</c>

00:29:46.900 --> 00:29:46.910 align:start position:0%
and count the right number zeros here
 

00:29:46.910 --> 00:29:48.950 align:start position:0%
and count the right number zeros here
this<00:29:47.910><c> is</c><00:29:48.090><c> actually</c><00:29:48.240><c> going</c><00:29:48.540><c> to</c><00:29:48.630><c> speed</c><00:29:48.809><c> things</c>

00:29:48.950 --> 00:29:48.960 align:start position:0%
this is actually going to speed things
 

00:29:48.960 --> 00:29:50.270 align:start position:0%
this is actually going to speed things
up<00:29:49.169><c> some</c><00:29:49.410><c> so</c><00:29:49.559><c> we</c><00:29:49.679><c> don't</c><00:29:49.830><c> actually</c><00:29:49.919><c> have</c><00:29:50.220><c> to</c>

00:29:50.270 --> 00:29:50.280 align:start position:0%
up some so we don't actually have to
 

00:29:50.280 --> 00:29:51.950 align:start position:0%
up some so we don't actually have to
read<00:29:50.520><c> four</c><00:29:50.730><c> gigabytes</c><00:29:51.120><c> of</c><00:29:51.210><c> data</c><00:29:51.360><c> off</c><00:29:51.600><c> the</c><00:29:51.750><c> disk</c>

00:29:51.950 --> 00:29:51.960 align:start position:0%
read four gigabytes of data off the disk
 

00:29:51.960 --> 00:29:56.210 align:start position:0%
read four gigabytes of data off the disk
for<00:29:52.169><c> this</c><00:29:52.290><c> demo</c><00:29:53.690><c> let</c><00:29:54.690><c> me</c><00:29:54.809><c> sit</c><00:29:54.990><c> break</c><00:29:55.290><c> and</c><00:29:55.830><c> then</c>

00:29:56.210 --> 00:29:56.220 align:start position:0%
for this demo let me sit break and then
 

00:29:56.220 --> 00:30:00.710 align:start position:0%
for this demo let me sit break and then
we'll<00:29:56.400><c> build</c><00:29:56.820><c> it</c><00:29:58.040><c> and</c><00:29:59.179><c> actually</c><00:30:00.179><c> let's</c><00:30:00.630><c> go</c>

00:30:00.710 --> 00:30:00.720 align:start position:0%
we'll build it and actually let's go
 

00:30:00.720 --> 00:30:05.270 align:start position:0%
we'll build it and actually let's go
into<00:30:00.990><c> the</c><00:30:01.080><c> debugger</c><00:30:02.120><c> so</c><00:30:03.120><c> Nick</c><00:30:03.360><c> mentioned</c><00:30:04.280><c> gdb</c>

00:30:05.270 --> 00:30:05.280 align:start position:0%
into the debugger so Nick mentioned gdb
 

00:30:05.280 --> 00:30:10.419 align:start position:0%
into the debugger so Nick mentioned gdb
and<00:30:05.520><c> the</c><00:30:05.580><c> Xcode</c><00:30:05.940><c> you</c><00:30:06.090><c> I</c><00:30:06.120><c> all</c><00:30:06.570><c> is</c><00:30:06.960><c> 64-bit</c><00:30:07.590><c> aware</c>

00:30:10.419 --> 00:30:10.429 align:start position:0%
 
 

00:30:10.429 --> 00:30:13.460 align:start position:0%
 
right<00:30:11.429><c> now</c><00:30:11.660><c> this</c><00:30:12.660><c> actually</c><00:30:12.840><c> is</c><00:30:13.080><c> not</c><00:30:13.200><c> going</c><00:30:13.350><c> to</c>

00:30:13.460 --> 00:30:13.470 align:start position:0%
right now this actually is not going to
 

00:30:13.470 --> 00:30:15.049 align:start position:0%
right now this actually is not going to
be<00:30:13.590><c> very</c><00:30:13.860><c> interesting</c><00:30:14.520><c> so</c><00:30:14.640><c> I'm</c><00:30:14.700><c> going</c><00:30:14.820><c> to</c><00:30:14.850><c> step</c>

00:30:15.049 --> 00:30:15.059 align:start position:0%
be very interesting so I'm going to step
 

00:30:15.059 --> 00:30:21.650 align:start position:0%
be very interesting so I'm going to step
a<00:30:15.090><c> couple</c><00:30:15.480><c> steps</c><00:30:19.490><c> okay</c><00:30:20.490><c> so</c><00:30:20.940><c> now</c><00:30:21.150><c> let's</c><00:30:21.179><c> do</c>

00:30:21.650 --> 00:30:21.660 align:start position:0%
a couple steps okay so now let's do
 

00:30:21.660 --> 00:30:23.419 align:start position:0%
a couple steps okay so now let's do
something<00:30:21.990><c> a</c><00:30:22.020><c> little</c><00:30:22.140><c> more</c><00:30:22.230><c> clever</c><00:30:22.740><c> so</c><00:30:23.100><c> I've</c>

00:30:23.419 --> 00:30:23.429 align:start position:0%
something a little more clever so I've
 

00:30:23.429 --> 00:30:24.980 align:start position:0%
something a little more clever so I've
just<00:30:23.490><c> pre-allocated</c><00:30:24.210><c> three</c><00:30:24.450><c> gigabytes</c><00:30:24.720><c> of</c>

00:30:24.980 --> 00:30:24.990 align:start position:0%
just pre-allocated three gigabytes of
 

00:30:24.990 --> 00:30:28.220 align:start position:0%
just pre-allocated three gigabytes of
address<00:30:25.410><c> space</c><00:30:25.940><c> what</c><00:30:26.940><c> I</c><00:30:26.970><c> want</c><00:30:27.270><c> to</c><00:30:27.360><c> do</c><00:30:27.570><c> is</c><00:30:27.600><c> where</c>

00:30:28.220 --> 00:30:28.230 align:start position:0%
address space what I want to do is where
 

00:30:28.230 --> 00:30:29.780 align:start position:0%
address space what I want to do is where
we're<00:30:28.410><c> going</c><00:30:28.530><c> to</c><00:30:28.590><c> start</c><00:30:28.770><c> mapping</c><00:30:29.040><c> the</c><00:30:29.340><c> data</c><00:30:29.640><c> I</c>

00:30:29.780 --> 00:30:29.790 align:start position:0%
we're going to start mapping the data I
 

00:30:29.790 --> 00:30:32.750 align:start position:0%
we're going to start mapping the data I
want<00:30:29.850><c> to</c><00:30:30.059><c> set</c><00:30:30.240><c> a</c><00:30:30.270><c> breakpoint</c><00:30:30.720><c> there</c><00:30:31.559><c> and</c><00:30:31.860><c> now</c><00:30:32.700><c> I</c>

00:30:32.750 --> 00:30:32.760 align:start position:0%
want to set a breakpoint there and now I
 

00:30:32.760 --> 00:30:35.570 align:start position:0%
want to set a breakpoint there and now I
actually<00:30:33.000><c> have</c><00:30:33.299><c> to</c><00:30:33.419><c> drop</c><00:30:33.690><c> to</c><00:30:33.960><c> the</c><00:30:34.190><c> Xcode</c><00:30:35.190><c> comp</c>

00:30:35.570 --> 00:30:35.580 align:start position:0%
actually have to drop to the Xcode comp
 

00:30:35.580 --> 00:30:38.720 align:start position:0%
actually have to drop to the Xcode comp
or<00:30:35.910><c> the</c><00:30:36.059><c> gdb</c><00:30:36.570><c> console</c><00:30:37.080><c> here</c><00:30:37.460><c> because</c><00:30:38.460><c> I</c><00:30:38.549><c> want</c>

00:30:38.720 --> 00:30:38.730 align:start position:0%
or the gdb console here because I want
 

00:30:38.730 --> 00:30:39.980 align:start position:0%
or the gdb console here because I want
to<00:30:38.760><c> actually</c><00:30:38.880><c> set</c><00:30:39.210><c> a</c><00:30:39.240><c> condition</c><00:30:39.450><c> on</c><00:30:39.809><c> that</c>

00:30:39.980 --> 00:30:39.990 align:start position:0%
to actually set a condition on that
 

00:30:39.990 --> 00:30:43.760 align:start position:0%
to actually set a condition on that
break<00:30:40.200><c> point</c><00:30:41.570><c> that</c><00:30:42.570><c> is</c><00:30:42.780><c> actually</c><00:30:43.260><c> break</c><00:30:43.470><c> point</c>

00:30:43.760 --> 00:30:43.770 align:start position:0%
break point that is actually break point
 

00:30:43.770 --> 00:30:47.690 align:start position:0%
break point that is actually break point
to<00:30:44.040><c> so</c><00:30:44.429><c> what</c><00:30:45.120><c> I'm</c><00:30:45.210><c> going</c><00:30:45.419><c> to</c><00:30:45.510><c> do</c><00:30:45.780><c> is</c><00:30:46.669><c> set</c><00:30:47.669><c> a</c>

00:30:47.690 --> 00:30:47.700 align:start position:0%
to so what I'm going to do is set a
 

00:30:47.700 --> 00:30:49.669 align:start position:0%
to so what I'm going to do is set a
condition<00:30:48.059><c> so</c><00:30:48.720><c> that</c><00:30:48.750><c> break</c><00:30:49.169><c> points</c><00:30:49.530><c> only</c>

00:30:49.669 --> 00:30:49.679 align:start position:0%
condition so that break points only
 

00:30:49.679 --> 00:30:51.799 align:start position:0%
condition so that break points only
going<00:30:49.950><c> to</c><00:30:50.010><c> stop</c><00:30:50.309><c> when</c><00:30:50.640><c> my</c><00:30:50.820><c> pointer</c><00:30:51.210><c> value</c><00:30:51.360><c> gets</c>

00:30:51.799 --> 00:30:51.809 align:start position:0%
going to stop when my pointer value gets
 

00:30:51.809 --> 00:30:56.900 align:start position:0%
going to stop when my pointer value gets
above<00:30:52.260><c> 4</c><00:30:52.590><c> gigabytes</c><00:30:55.490><c> again</c><00:30:56.490><c> I</c><00:30:56.520><c> have</c><00:30:56.669><c> to</c><00:30:56.790><c> make</c>

00:30:56.900 --> 00:30:56.910 align:start position:0%
above 4 gigabytes again I have to make
 

00:30:56.910 --> 00:30:59.120 align:start position:0%
above 4 gigabytes again I have to make
sure<00:30:56.970><c> i</c><00:30:57.090><c> type</c><00:30:57.390><c> enough</c><00:30:57.690><c> zeros</c><00:30:58.080><c> because</c><00:30:58.290><c> more</c>

00:30:59.120 --> 00:30:59.130 align:start position:0%
sure i type enough zeros because more
 

00:30:59.130 --> 00:31:02.450 align:start position:0%
sure i type enough zeros because more
than<00:30:59.160><c> I'm</c><00:30:59.340><c> used</c><00:30:59.370><c> to</c><00:30:59.610><c> typing</c><00:31:00.620><c> so</c><00:31:01.620><c> and</c><00:31:01.980><c> now</c><00:31:02.160><c> i</c><00:31:02.190><c> can</c>

00:31:02.450 --> 00:31:02.460 align:start position:0%
than I'm used to typing so and now i can
 

00:31:02.460 --> 00:31:06.409 align:start position:0%
than I'm used to typing so and now i can
continue<00:31:02.730><c> running</c><00:31:03.030><c> so</c><00:31:04.130><c> no</c><00:31:05.130><c> the</c><00:31:05.880><c> demo</c><00:31:06.179><c> gods</c>

00:31:06.409 --> 00:31:06.419 align:start position:0%
continue running so no the demo gods
 

00:31:06.419 --> 00:31:08.990 align:start position:0%
continue running so no the demo gods
have<00:31:06.630><c> not</c><00:31:06.929><c> blessed</c><00:31:07.410><c> me</c><00:31:07.679><c> let</c><00:31:08.160><c> me</c><00:31:08.280><c> try</c><00:31:08.640><c> that</c><00:31:08.820><c> one</c>

00:31:08.990 --> 00:31:09.000 align:start position:0%
have not blessed me let me try that one
 

00:31:09.000 --> 00:31:15.770 align:start position:0%
have not blessed me let me try that one
more<00:31:09.059><c> time</c>

00:31:15.770 --> 00:31:15.780 align:start position:0%
 
 

00:31:15.780 --> 00:31:32.159 align:start position:0%
 
sorry<00:31:16.780><c> Oh</c>

00:31:32.159 --> 00:31:32.169 align:start position:0%
 
 

00:31:32.169 --> 00:31:38.999 align:start position:0%
 
give<00:31:32.830><c> me</c><00:31:33.009><c> one</c><00:31:33.340><c> second</c><00:31:34.119><c> I</c><00:31:37.739><c> quit</c><00:31:38.739><c> and</c><00:31:38.889><c> relaunch</c>

00:31:38.999 --> 00:31:39.009 align:start position:0%
give me one second I quit and relaunch
 

00:31:39.009 --> 00:31:40.680 align:start position:0%
give me one second I quit and relaunch
it<00:31:39.399><c> in</c><00:31:39.519><c> case</c><00:31:39.669><c> there</c><00:31:39.909><c> was</c><00:31:39.999><c> some</c><00:31:40.210><c> stale</c><00:31:40.450><c> data</c>

00:31:40.680 --> 00:31:40.690 align:start position:0%
it in case there was some stale data
 

00:31:40.690 --> 00:31:43.080 align:start position:0%
it in case there was some stale data
there<00:31:41.019><c> remember</c><00:31:41.919><c> this</c><00:31:42.039><c> is</c><00:31:42.100><c> preview</c><00:31:42.639><c> software</c>

00:31:43.080 --> 00:31:43.090 align:start position:0%
there remember this is preview software
 

00:31:43.090 --> 00:31:49.680 align:start position:0%
there remember this is preview software
ah<00:31:46.980><c> I</c><00:31:47.980><c> remember</c><00:31:48.129><c> what's</c><00:31:48.700><c> wrong</c><00:31:48.879><c> I</c><00:31:49.090><c> forgot</c><00:31:49.539><c> to</c>

00:31:49.680 --> 00:31:49.690 align:start position:0%
ah I remember what's wrong I forgot to
 

00:31:49.690 --> 00:31:55.039 align:start position:0%
ah I remember what's wrong I forgot to
give<00:31:49.840><c> it</c><00:31:49.929><c> some</c><00:31:50.080><c> command</c><00:31:50.350><c> line</c><00:31:50.499><c> arguments</c><00:31:51.009><c> I</c>

00:31:55.039 --> 00:31:55.049 align:start position:0%
 
 

00:31:55.049 --> 00:31:57.119 align:start position:0%
 
actually<00:31:56.049><c> need</c><00:31:56.379><c> to</c><00:31:56.409><c> go</c><00:31:56.619><c> here</c><00:31:56.859><c> and</c><00:31:56.889><c> actually</c>

00:31:57.119 --> 00:31:57.129 align:start position:0%
actually need to go here and actually
 

00:31:57.129 --> 00:31:59.940 align:start position:0%
actually need to go here and actually
tell<00:31:57.460><c> it</c><00:31:57.549><c> where</c><00:31:57.669><c> the</c><00:31:57.759><c> data</c><00:31:57.909><c> is</c><00:31:58.499><c> my</c><00:31:59.499><c> fault</c><00:31:59.710><c> not</c>

00:31:59.940 --> 00:31:59.950 align:start position:0%
tell it where the data is my fault not
 

00:31:59.950 --> 00:32:06.060 align:start position:0%
tell it where the data is my fault not
the<00:32:00.070><c> software's</c><00:32:00.460><c> fault</c><00:32:04.859><c> so</c><00:32:05.859><c> I'm</c><00:32:05.919><c> going</c><00:32:05.950><c> to</c>

00:32:06.060 --> 00:32:06.070 align:start position:0%
the software's fault so I'm going to
 

00:32:06.070 --> 00:32:07.409 align:start position:0%
the software's fault so I'm going to
actually<00:32:06.190><c> cut</c><00:32:06.489><c> and</c><00:32:06.639><c> paste</c><00:32:06.820><c> a</c><00:32:06.970><c> whole</c><00:32:07.090><c> bunch</c><00:32:07.269><c> of</c>

00:32:07.409 --> 00:32:07.419 align:start position:0%
actually cut and paste a whole bunch of
 

00:32:07.419 --> 00:32:22.419 align:start position:0%
actually cut and paste a whole bunch of
stuff<00:32:07.629><c> here</c><00:32:13.529><c> okay</c>

00:32:22.419 --> 00:32:22.429 align:start position:0%
 
 

00:32:22.429 --> 00:32:26.890 align:start position:0%
 
alright

00:32:26.890 --> 00:32:26.900 align:start position:0%
 
 

00:32:26.900 --> 00:32:36.650 align:start position:0%
 
ok<00:32:27.900><c> condition</c><00:32:28.790><c> key</c><00:32:35.210><c> I'm</c><00:32:36.210><c> just</c><00:32:36.420><c> being</c><00:32:36.600><c> paranoid</c>

00:32:36.650 --> 00:32:36.660 align:start position:0%
ok condition key I'm just being paranoid
 

00:32:36.660 --> 00:32:39.080 align:start position:0%
ok condition key I'm just being paranoid
with<00:32:37.260><c> you</c><00:32:37.440><c> ll</c><00:32:37.800><c> to</c><00:32:37.980><c> make</c><00:32:38.130><c> sure</c><00:32:38.280><c> gdb</c><00:32:38.730><c> knows</c><00:32:38.940><c> that</c>

00:32:39.080 --> 00:32:39.090 align:start position:0%
with you ll to make sure gdb knows that
 

00:32:39.090 --> 00:32:41.480 align:start position:0%
with you ll to make sure gdb knows that
I'm<00:32:39.210><c> typing</c><00:32:39.420><c> a</c><00:32:39.570><c> 64-bit</c><00:32:40.230><c> canta</c><00:32:40.650><c> 64-bit</c>

00:32:41.480 --> 00:32:41.490 align:start position:0%
I'm typing a 64-bit canta 64-bit
 

00:32:41.490 --> 00:32:43.430 align:start position:0%
I'm typing a 64-bit canta 64-bit
constant<00:32:41.970><c> so</c><00:32:42.180><c> okay</c><00:32:42.870><c> so</c><00:32:43.050><c> now</c><00:32:43.140><c> we're</c><00:32:43.320><c> actually</c>

00:32:43.430 --> 00:32:43.440 align:start position:0%
constant so okay so now we're actually
 

00:32:43.440 --> 00:32:45.620 align:start position:0%
constant so okay so now we're actually
reading<00:32:43.830><c> reading</c><00:32:44.130><c> reading</c><00:32:44.400><c> so</c><00:32:44.700><c> it's</c><00:32:44.970><c> loading</c>

00:32:45.620 --> 00:32:45.630 align:start position:0%
reading reading reading so it's loading
 

00:32:45.630 --> 00:32:47.360 align:start position:0%
reading reading reading so it's loading
about<00:32:45.750><c> a</c><00:32:45.900><c> gigabyte</c><00:32:46.380><c> since</c><00:32:46.650><c> I</c><00:32:46.740><c> pre-allocated</c>

00:32:47.360 --> 00:32:47.370 align:start position:0%
about a gigabyte since I pre-allocated
 

00:32:47.370 --> 00:32:53.660 align:start position:0%
about a gigabyte since I pre-allocated
three<00:32:47.640><c> gigabytes</c><00:32:48.320><c> and</c><00:32:51.200><c> let's</c><00:32:52.200><c> see</c><00:32:52.670><c> we</c>

00:32:53.660 --> 00:32:53.670 align:start position:0%
three gigabytes and let's see we
 

00:32:53.670 --> 00:32:55.970 align:start position:0%
three gigabytes and let's see we
actually<00:32:54.000><c> have</c><00:32:54.120><c> a</c><00:32:54.150><c> pretty</c><00:32:54.630><c> big</c><00:32:54.990><c> value</c><00:32:55.500><c> for</c><00:32:55.770><c> P</c>

00:32:55.970 --> 00:32:55.980 align:start position:0%
actually have a pretty big value for P
 

00:32:55.980 --> 00:32:58.970 align:start position:0%
actually have a pretty big value for P
right<00:32:56.250><c> now</c><00:32:57.140><c> that's</c><00:32:58.140><c> way</c><00:32:58.410><c> up</c><00:32:58.590><c> there</c><00:32:58.620><c> in</c><00:32:58.890><c> the</c>

00:32:58.970 --> 00:32:58.980 align:start position:0%
right now that's way up there in the
 

00:32:58.980 --> 00:33:00.470 align:start position:0%
right now that's way up there in the
address<00:32:59.280><c> space</c><00:32:59.490><c> and</c><00:32:59.790><c> actually</c><00:33:00.090><c> you</c><00:33:00.180><c> can</c><00:33:00.330><c> use</c>

00:33:00.470 --> 00:33:00.480 align:start position:0%
address space and actually you can use
 

00:33:00.480 --> 00:33:02.720 align:start position:0%
address space and actually you can use
all<00:33:00.660><c> the</c><00:33:00.690><c> features</c><00:33:00.960><c> of</c><00:33:01.170><c> Xcode</c><00:33:01.740><c> you</c><00:33:02.550><c> can</c>

00:33:02.720 --> 00:33:02.730 align:start position:0%
all the features of Xcode you can
 

00:33:02.730 --> 00:33:05.270 align:start position:0%
all the features of Xcode you can
actually<00:33:03.090><c> look</c><00:33:03.240><c> in</c><00:33:03.420><c> dereference</c><00:33:03.990><c> it</c><00:33:04.200><c> you</c><00:33:05.160><c> can</c>

00:33:05.270 --> 00:33:05.280 align:start position:0%
actually look in dereference it you can
 

00:33:05.280 --> 00:33:09.530 align:start position:0%
actually look in dereference it you can
bring<00:33:05.400><c> up</c><00:33:05.520><c> the</c><00:33:05.640><c> memory</c><00:33:05.910><c> viewer</c><00:33:06.890><c> which</c><00:33:07.890><c> is</c><00:33:08.540><c> here</c>

00:33:09.530 --> 00:33:09.540 align:start position:0%
bring up the memory viewer which is here
 

00:33:09.540 --> 00:33:22.340 align:start position:0%
bring up the memory viewer which is here
oh<00:33:13.190><c> I</c><00:33:16.100><c> can't</c><00:33:17.100><c> type</c><00:33:19.430><c> so</c><00:33:20.430><c> we</c><00:33:20.790><c> actually</c><00:33:20.970><c> can</c><00:33:21.360><c> look</c>

00:33:22.340 --> 00:33:22.350 align:start position:0%
oh I can't type so we actually can look
 

00:33:22.350 --> 00:33:23.930 align:start position:0%
oh I can't type so we actually can look
at<00:33:22.500><c> that</c><00:33:22.530><c> memory</c><00:33:23.010><c> not</c><00:33:23.370><c> very</c><00:33:23.580><c> interesting</c>

00:33:23.930 --> 00:33:23.940 align:start position:0%
at that memory not very interesting
 

00:33:23.940 --> 00:33:25.340 align:start position:0%
at that memory not very interesting
because<00:33:24.000><c> this</c><00:33:24.240><c> is</c><00:33:24.360><c> actually</c><00:33:24.510><c> map</c><00:33:24.900><c> but</c><00:33:25.080><c> hasn't</c>

00:33:25.340 --> 00:33:25.350 align:start position:0%
because this is actually map but hasn't
 

00:33:25.350 --> 00:33:27.710 align:start position:0%
because this is actually map but hasn't
been<00:33:25.410><c> faulted</c><00:33:25.770><c> in</c><00:33:25.920><c> yet</c><00:33:26.130><c> but</c><00:33:26.340><c> the</c><00:33:27.270><c> tools</c><00:33:27.600><c> are</c>

00:33:27.710 --> 00:33:27.720 align:start position:0%
been faulted in yet but the tools are
 

00:33:27.720 --> 00:33:29.600 align:start position:0%
been faulted in yet but the tools are
all<00:33:27.810><c> ready</c><00:33:28.020><c> for</c><00:33:28.230><c> 64</c><00:33:28.710><c> bits</c><00:33:28.950><c> and</c><00:33:29.160><c> as</c><00:33:29.280><c> we</c><00:33:29.460><c> move</c>

00:33:29.600 --> 00:33:29.610 align:start position:0%
all ready for 64 bits and as we move
 

00:33:29.610 --> 00:33:31.520 align:start position:0%
all ready for 64 bits and as we move
more<00:33:29.820><c> frameworks</c><00:33:30.270><c> along</c><00:33:30.630><c> the</c><00:33:30.780><c> line</c><00:33:30.960><c> and</c><00:33:31.320><c> as</c><00:33:31.410><c> we</c>

00:33:31.520 --> 00:33:31.530 align:start position:0%
more frameworks along the line and as we
 

00:33:31.530 --> 00:33:33.800 align:start position:0%
more frameworks along the line and as we
make<00:33:31.680><c> things</c><00:33:31.920><c> dynamic</c><00:33:32.460><c> I</c><00:33:32.640><c> think</c><00:33:32.940><c> you'll</c><00:33:33.690><c> be</c>

00:33:33.800 --> 00:33:33.810 align:start position:0%
make things dynamic I think you'll be
 

00:33:33.810 --> 00:33:36.140 align:start position:0%
make things dynamic I think you'll be
able<00:33:33.900><c> to</c><00:33:34.140><c> explore</c><00:33:34.830><c> and</c><00:33:35.100><c> give</c><00:33:36.000><c> us</c><00:33:36.120><c> feedback</c>

00:33:36.140 --> 00:33:36.150 align:start position:0%
able to explore and give us feedback
 

00:33:36.150 --> 00:33:38.750 align:start position:0%
able to explore and give us feedback
right<00:33:36.630><c> now</c><00:33:36.780><c> so</c><00:33:37.710><c> that's</c><00:33:37.860><c> all</c><00:33:38.010><c> I</c><00:33:38.040><c> actually</c><00:33:38.490><c> had</c>

00:33:38.750 --> 00:33:38.760 align:start position:0%
right now so that's all I actually had
 

00:33:38.760 --> 00:33:40.400 align:start position:0%
right now so that's all I actually had
to<00:33:38.790><c> show</c><00:33:39.030><c> not</c><00:33:39.420><c> very</c><00:33:39.570><c> interesting</c><00:33:39.990><c> since</c><00:33:40.200><c> the</c>

00:33:40.400 --> 00:33:40.410 align:start position:0%
to show not very interesting since the
 

00:33:40.410 --> 00:33:42.440 align:start position:0%
to show not very interesting since the
GUI<00:33:40.590><c> is</c><00:33:40.800><c> not</c><00:33:41.070><c> 64</c><00:33:41.550><c> bits</c><00:33:41.760><c> and</c><00:33:41.970><c> you</c><00:33:42.030><c> already</c><00:33:42.210><c> saw</c>

00:33:42.440 --> 00:33:42.450 align:start position:0%
GUI is not 64 bits and you already saw
 

00:33:42.450 --> 00:33:43.880 align:start position:0%
GUI is not 64 bits and you already saw
that<00:33:42.480><c> but</c><00:33:42.960><c> with</c><00:33:43.140><c> that</c><00:33:43.290><c> I'd</c><00:33:43.470><c> like</c><00:33:43.500><c> to</c><00:33:43.650><c> introduce</c>

00:33:43.880 --> 00:33:43.890 align:start position:0%
that but with that I'd like to introduce
 

00:33:43.890 --> 00:33:45.830 align:start position:0%
that but with that I'd like to introduce
stan<00:33:44.460><c> shebs</c><00:33:44.700><c> is</c><00:33:45.000><c> going</c><00:33:45.210><c> to</c><00:33:45.270><c> talk</c><00:33:45.450><c> a</c><00:33:45.480><c> little</c><00:33:45.600><c> bit</c>

00:33:45.830 --> 00:33:45.840 align:start position:0%
stan shebs is going to talk a little bit
 

00:33:45.840 --> 00:33:49.430 align:start position:0%
stan shebs is going to talk a little bit
about<00:33:45.960><c> some</c><00:33:46.140><c> pitfalls</c><00:33:46.380><c> with</c><00:33:46.800><c> 64</c><00:33:47.250><c> bits</c>

00:33:49.430 --> 00:33:49.440 align:start position:0%
about some pitfalls with 64 bits
 

00:33:49.440 --> 00:33:55.490 align:start position:0%
 
[Applause]

00:33:55.490 --> 00:33:55.500 align:start position:0%
[Applause]
 

00:33:55.500 --> 00:33:59.730 align:start position:0%
[Applause]
hello<00:33:56.500><c> everybody</c><00:33:58.049><c> so</c><00:33:59.049><c> we're</c><00:33:59.500><c> going</c><00:33:59.590><c> to</c><00:33:59.679><c> go</c>

00:33:59.730 --> 00:33:59.740 align:start position:0%
hello everybody so we're going to go
 

00:33:59.740 --> 00:34:01.950 align:start position:0%
hello everybody so we're going to go
into<00:33:59.909><c> twist</c><00:34:00.909><c> out</c><00:34:01.090><c> and</c><00:34:01.389><c> go</c><00:34:01.539><c> in</c><00:34:01.630><c> a</c><00:34:01.690><c> little</c><00:34:01.840><c> more</c>

00:34:01.950 --> 00:34:01.960 align:start position:0%
into twist out and go in a little more
 

00:34:01.960 --> 00:34:05.669 align:start position:0%
into twist out and go in a little more
detail<00:34:02.529><c> into</c><00:34:02.980><c> the</c><00:34:04.289><c> pitfalls</c><00:34:05.289><c> and</c><00:34:05.500><c> what</c>

00:34:05.669 --> 00:34:05.679 align:start position:0%
detail into the pitfalls and what
 

00:34:05.679 --> 00:34:07.280 align:start position:0%
detail into the pitfalls and what
actually<00:34:05.860><c> happens</c><00:34:06.429><c> when</c><00:34:06.610><c> you</c><00:34:06.669><c> try</c><00:34:06.880><c> and</c><00:34:06.940><c> do</c>

00:34:07.280 --> 00:34:07.290 align:start position:0%
actually happens when you try and do
 

00:34:07.290 --> 00:34:10.440 align:start position:0%
actually happens when you try and do
64-bit<00:34:08.290><c> programming</c><00:34:08.859><c> Jeff</c><00:34:09.790><c> very</c><00:34:10.060><c> narrowly</c>

00:34:10.440 --> 00:34:10.450 align:start position:0%
64-bit programming Jeff very narrowly
 

00:34:10.450 --> 00:34:13.859 align:start position:0%
64-bit programming Jeff very narrowly
skated<00:34:11.079><c> several</c><00:34:11.800><c> errors</c><00:34:12.010><c> and</c><00:34:12.599><c> where</c><00:34:13.599><c> he's</c>

00:34:13.859 --> 00:34:13.869 align:start position:0%
skated several errors and where he's
 

00:34:13.869 --> 00:34:15.569 align:start position:0%
skated several errors and where he's
actually<00:34:14.079><c> quite</c><00:34:14.409><c> lucky</c><00:34:14.770><c> to</c><00:34:14.889><c> God</c><00:34:15.010><c> demo</c><00:34:15.369><c> God's</c>

00:34:15.569 --> 00:34:15.579 align:start position:0%
actually quite lucky to God demo God's
 

00:34:15.579 --> 00:34:17.970 align:start position:0%
actually quite lucky to God demo God's
didn't<00:34:15.940><c> ultimately</c><00:34:16.149><c> smile</c><00:34:16.839><c> on</c><00:34:17.079><c> him</c><00:34:17.260><c> you</c><00:34:17.950><c> know</c>

00:34:17.970 --> 00:34:17.980 align:start position:0%
didn't ultimately smile on him you know
 

00:34:17.980 --> 00:34:20.460 align:start position:0%
didn't ultimately smile on him you know
because<00:34:18.069><c> he</c><00:34:18.609><c> actually</c><00:34:18.730><c> got</c><00:34:19.030><c> 64</c><00:34:19.990><c> bit</c><00:34:20.169><c> numbers</c>

00:34:20.460 --> 00:34:20.470 align:start position:0%
because he actually got 64 bit numbers
 

00:34:20.470 --> 00:34:23.669 align:start position:0%
because he actually got 64 bit numbers
back<00:34:20.710><c> when</c><00:34:20.919><c> he</c><00:34:20.980><c> put</c><00:34:21.159><c> 64</c><00:34:21.669><c> bit</c><00:34:21.819><c> numbers</c><00:34:22.119><c> in</c><00:34:22.679><c> so</c>

00:34:23.669 --> 00:34:23.679 align:start position:0%
back when he put 64 bit numbers in so
 

00:34:23.679 --> 00:34:25.649 align:start position:0%
back when he put 64 bit numbers in so
the<00:34:24.220><c> kinds</c><00:34:24.520><c> of</c><00:34:24.579><c> things</c><00:34:24.669><c> that</c><00:34:24.909><c> can</c><00:34:25.089><c> happen</c><00:34:25.270><c> is</c>

00:34:25.649 --> 00:34:25.659 align:start position:0%
the kinds of things that can happen is
 

00:34:25.659 --> 00:34:28.859 align:start position:0%
the kinds of things that can happen is
that<00:34:26.619><c> the</c><00:34:26.889><c> the</c><00:34:27.220><c> source</c><00:34:27.460><c> code</c><00:34:27.760><c> of</c><00:34:28.089><c> you</c><00:34:28.780><c> know</c>

00:34:28.859 --> 00:34:28.869 align:start position:0%
that the the source code of you know
 

00:34:28.869 --> 00:34:30.540 align:start position:0%
that the the source code of you know
will<00:34:29.050><c> need</c><00:34:29.200><c> changes</c><00:34:29.710><c> because</c><00:34:30.069><c> integers</c>

00:34:30.540 --> 00:34:30.550 align:start position:0%
will need changes because integers
 

00:34:30.550 --> 00:34:32.970 align:start position:0%
will need changes because integers
remain<00:34:31.030><c> 32</c><00:34:31.540><c> bits</c><00:34:31.810><c> and</c><00:34:32.079><c> there's</c><00:34:32.649><c> a</c><00:34:32.710><c> number</c><00:34:32.859><c> of</c>

00:34:32.970 --> 00:34:32.980 align:start position:0%
remain 32 bits and there's a number of
 

00:34:32.980 --> 00:34:35.419 align:start position:0%
remain 32 bits and there's a number of
practices<00:34:33.609><c> the</c><00:34:34.089><c> long-standing</c><00:34:34.659><c> practices</c>

00:34:35.419 --> 00:34:35.429 align:start position:0%
practices the long-standing practices
 

00:34:35.429 --> 00:34:38.460 align:start position:0%
practices the long-standing practices
that<00:34:36.429><c> no</c><00:34:36.819><c> longer</c><00:34:37.149><c> work</c><00:34:37.389><c> for</c><00:34:37.629><c> instance</c>

00:34:38.460 --> 00:34:38.470 align:start position:0%
that no longer work for instance
 

00:34:38.470 --> 00:34:41.129 align:start position:0%
that no longer work for instance
integers<00:34:39.069><c> cannot</c><00:34:39.399><c> hold</c><00:34:39.639><c> pointers</c><00:34:40.060><c> that</c><00:34:40.300><c> seems</c>

00:34:41.129 --> 00:34:41.139 align:start position:0%
integers cannot hold pointers that seems
 

00:34:41.139 --> 00:34:43.530 align:start position:0%
integers cannot hold pointers that seems
fairly<00:34:41.800><c> obvious</c><00:34:41.980><c> but</c><00:34:42.639><c> in</c><00:34:42.760><c> fact</c><00:34:42.879><c> a</c><00:34:43.060><c> lot</c><00:34:43.179><c> of</c><00:34:43.240><c> code</c>

00:34:43.530 --> 00:34:43.540 align:start position:0%
fairly obvious but in fact a lot of code
 

00:34:43.540 --> 00:34:46.050 align:start position:0%
fairly obvious but in fact a lot of code
will<00:34:43.839><c> casually</c><00:34:44.530><c> assign</c><00:34:45.220><c> pointers</c><00:34:45.879><c> to</c>

00:34:46.050 --> 00:34:46.060 align:start position:0%
will casually assign pointers to
 

00:34:46.060 --> 00:34:47.819 align:start position:0%
will casually assign pointers to
integers<00:34:46.419><c> expecting</c><00:34:47.050><c> it</c><00:34:47.200><c> the</c><00:34:47.319><c> pointer</c><00:34:47.649><c> back</c>

00:34:47.819 --> 00:34:47.829 align:start position:0%
integers expecting it the pointer back
 

00:34:47.829 --> 00:34:50.280 align:start position:0%
integers expecting it the pointer back
later<00:34:48.129><c> on</c><00:34:48.250><c> somehow</c><00:34:48.849><c> that</c><00:34:49.599><c> kind</c><00:34:49.839><c> of</c><00:34:49.899><c> practice</c>

00:34:50.280 --> 00:34:50.290 align:start position:0%
later on somehow that kind of practice
 

00:34:50.290 --> 00:34:52.829 align:start position:0%
later on somehow that kind of practice
won't<00:34:50.500><c> work</c><00:34:50.710><c> even</c><00:34:51.669><c> something</c><00:34:51.909><c> as</c><00:34:52.240><c> innocuous</c>

00:34:52.829 --> 00:34:52.839 align:start position:0%
won't work even something as innocuous
 

00:34:52.839 --> 00:34:56.970 align:start position:0%
won't work even something as innocuous
as<00:34:53.349><c> using</c><00:34:53.859><c> a</c><00:34:53.950><c> percent</c><00:34:54.429><c> D</c><00:34:54.669><c> in</c><00:34:55.450><c> a</c><00:34:55.690><c> printf</c><00:34:56.079><c> will</c>

00:34:56.970 --> 00:34:56.980 align:start position:0%
as using a percent D in a printf will
 

00:34:56.980 --> 00:34:58.920 align:start position:0%
as using a percent D in a printf will
not<00:34:57.160><c> actually</c><00:34:57.430><c> show</c><00:34:57.790><c> you</c><00:34:57.910><c> the</c><00:34:58.150><c> entire</c><00:34:58.300><c> numbers</c>

00:34:58.920 --> 00:34:58.930 align:start position:0%
not actually show you the entire numbers
 

00:34:58.930 --> 00:35:00.720 align:start position:0%
not actually show you the entire numbers
and<00:34:59.319><c> that</c><00:34:59.500><c> can</c><00:34:59.650><c> be</c><00:34:59.680><c> very</c><00:34:59.920><c> confusing</c><00:35:00.130><c> if</c><00:35:00.609><c> you</c>

00:35:00.720 --> 00:35:00.730 align:start position:0%
and that can be very confusing if you
 

00:35:00.730 --> 00:35:02.730 align:start position:0%
and that can be very confusing if you
don't<00:35:00.880><c> use</c><00:35:01.030><c> gdb</c><00:35:01.540><c> and</c><00:35:01.780><c> you</c><00:35:01.839><c> try</c><00:35:02.020><c> using</c><00:35:02.230><c> printf</c>

00:35:02.730 --> 00:35:02.740 align:start position:0%
don't use gdb and you try using printf
 

00:35:02.740 --> 00:35:05.670 align:start position:0%
don't use gdb and you try using printf
for<00:35:02.980><c> debugging</c><00:35:03.660><c> the</c><00:35:04.660><c> other</c><00:35:05.109><c> things</c><00:35:05.410><c> we</c><00:35:05.560><c> have</c>

00:35:05.670 --> 00:35:05.680 align:start position:0%
for debugging the other things we have
 

00:35:05.680 --> 00:35:07.319 align:start position:0%
for debugging the other things we have
to<00:35:05.800><c> do</c><00:35:05.920><c> is</c><00:35:06.040><c> a</c><00:35:06.069><c> casting</c><00:35:06.910><c> doesn't</c><00:35:07.210><c> actually</c>

00:35:07.319 --> 00:35:07.329 align:start position:0%
to do is a casting doesn't actually
 

00:35:07.329 --> 00:35:09.390 align:start position:0%
to do is a casting doesn't actually
solve<00:35:07.660><c> the</c><00:35:07.839><c> problem</c><00:35:08.380><c> there's</c><00:35:08.680><c> ways</c><00:35:09.160><c> to</c><00:35:09.310><c> get</c>

00:35:09.390 --> 00:35:09.400 align:start position:0%
solve the problem there's ways to get
 

00:35:09.400 --> 00:35:11.760 align:start position:0%
solve the problem there's ways to get
tricked<00:35:09.700><c> by</c><00:35:09.790><c> sign</c><00:35:10.119><c> extensions</c><00:35:10.780><c> there's</c><00:35:11.530><c> ways</c>

00:35:11.760 --> 00:35:11.770 align:start position:0%
tricked by sign extensions there's ways
 

00:35:11.770 --> 00:35:16.069 align:start position:0%
tricked by sign extensions there's ways
to<00:35:11.950><c> get</c><00:35:12.040><c> tricked</c><00:35:12.339><c> by</c><00:35:12.430><c> function</c><00:35:13.119><c> calls</c><00:35:13.440><c> so</c>

00:35:16.069 --> 00:35:16.079 align:start position:0%
to get tricked by function calls so
 

00:35:16.079 --> 00:35:19.530 align:start position:0%
to get tricked by function calls so
we'll<00:35:17.079><c> start</c><00:35:17.200><c> out</c><00:35:17.530><c> by</c><00:35:17.890><c> recalling</c><00:35:18.790><c> Diogenes</c>

00:35:19.530 --> 00:35:19.540 align:start position:0%
we'll start out by recalling Diogenes
 

00:35:19.540 --> 00:35:22.460 align:start position:0%
we'll start out by recalling Diogenes
and<00:35:19.980><c> the</c><00:35:20.980><c> oddities</c><00:35:21.550><c> of</c><00:35:21.640><c> your</c><00:35:21.790><c> remember</c><00:35:22.030><c> was</c><00:35:22.210><c> a</c>

00:35:22.460 --> 00:35:22.470 align:start position:0%
and the oddities of your remember was a
 

00:35:22.470 --> 00:35:25.050 align:start position:0%
and the oddities of your remember was a
philosopher<00:35:23.470><c> of</c><00:35:23.500><c> ancient</c><00:35:23.980><c> Greece</c><00:35:24.220><c> and</c><00:35:24.250><c> his</c>

00:35:25.050 --> 00:35:25.060 align:start position:0%
philosopher of ancient Greece and his
 

00:35:25.060 --> 00:35:27.420 align:start position:0%
philosopher of ancient Greece and his
one<00:35:25.420><c> of</c><00:35:25.450><c> his</c><00:35:25.569><c> sticks</c><00:35:25.930><c> was</c><00:35:26.290><c> to</c><00:35:26.589><c> wander</c><00:35:27.369><c> around</c>

00:35:27.420 --> 00:35:27.430 align:start position:0%
one of his sticks was to wander around
 

00:35:27.430 --> 00:35:29.490 align:start position:0%
one of his sticks was to wander around
with<00:35:27.730><c> a</c><00:35:27.760><c> lantern</c><00:35:28.030><c> looking</c><00:35:28.630><c> for</c><00:35:28.900><c> honest</c><00:35:29.470><c> people</c>

00:35:29.490 --> 00:35:29.500 align:start position:0%
with a lantern looking for honest people
 

00:35:29.500 --> 00:35:33.030 align:start position:0%
with a lantern looking for honest people
and<00:35:30.069><c> never</c><00:35:30.970><c> finding</c><00:35:31.420><c> any</c><00:35:31.569><c> so</c><00:35:32.380><c> since</c><00:35:32.859><c> we're</c><00:35:33.010><c> in</c>

00:35:33.030 --> 00:35:33.040 align:start position:0%
and never finding any so since we're in
 

00:35:33.040 --> 00:35:36.120 align:start position:0%
and never finding any so since we're in
the<00:35:33.160><c> modern</c><00:35:33.490><c> age</c><00:35:33.700><c> we</c><00:35:34.599><c> have</c><00:35:34.780><c> a</c><00:35:34.810><c> flashlight</c><00:35:35.440><c> LED</c>

00:35:36.120 --> 00:35:36.130 align:start position:0%
the modern age we have a flashlight LED
 

00:35:36.130 --> 00:35:38.130 align:start position:0%
the modern age we have a flashlight LED
flashlight<00:35:36.880><c> and</c><00:35:37.599><c> we're</c><00:35:37.750><c> going</c><00:35:37.900><c> to</c><00:35:37.960><c> be</c><00:35:38.020><c> looking</c>

00:35:38.130 --> 00:35:38.140 align:start position:0%
flashlight and we're going to be looking
 

00:35:38.140 --> 00:35:42.390 align:start position:0%
flashlight and we're going to be looking
for<00:35:38.470><c> honest</c><00:35:38.800><c> programmers</c><00:35:40.079><c> so</c><00:35:41.079><c> so</c><00:35:42.069><c> our</c><00:35:42.190><c> first</c>

00:35:42.390 --> 00:35:42.400 align:start position:0%
for honest programmers so so our first
 

00:35:42.400 --> 00:35:45.300 align:start position:0%
for honest programmers so so our first
question<00:35:43.020><c> how</c><00:35:44.020><c> many</c><00:35:44.230><c> programmers</c><00:35:44.710><c> have</c>

00:35:45.300 --> 00:35:45.310 align:start position:0%
question how many programmers have
 

00:35:45.310 --> 00:35:50.190 align:start position:0%
question how many programmers have
assigned<00:35:45.730><c> a</c><00:35:46.210><c> pointer</c><00:35:46.990><c> to</c><00:35:47.020><c> an</c><00:35:47.349><c> integer</c><00:35:48.810><c> wow</c><00:35:49.810><c> we</c>

00:35:50.190 --> 00:35:50.200 align:start position:0%
assigned a pointer to an integer wow we
 

00:35:50.200 --> 00:35:51.750 align:start position:0%
assigned a pointer to an integer wow we
have<00:35:50.349><c> a</c><00:35:50.380><c> lot</c><00:35:50.650><c> of</c><00:35:50.680><c> honest</c><00:35:51.069><c> programmers</c><00:35:51.550><c> that's</c>

00:35:51.750 --> 00:35:51.760 align:start position:0%
have a lot of honest programmers that's
 

00:35:51.760 --> 00:35:54.480 align:start position:0%
have a lot of honest programmers that's
very<00:35:51.970><c> encouraging</c><00:35:53.040><c> but</c><00:35:54.040><c> I</c><00:35:54.099><c> know</c><00:35:54.190><c> it's</c><00:35:54.400><c> not</c>

00:35:54.480 --> 00:35:54.490 align:start position:0%
very encouraging but I know it's not
 

00:35:54.490 --> 00:35:56.819 align:start position:0%
very encouraging but I know it's not
everyday<00:35:54.910><c> raise</c><00:35:55.210><c> their</c><00:35:55.450><c> hand</c><00:35:55.690><c> as</c><00:35:55.930><c> perhaps</c><00:35:56.710><c> we</c>

00:35:56.819 --> 00:35:56.829 align:start position:0%
everyday raise their hand as perhaps we
 

00:35:56.829 --> 00:36:00.460 align:start position:0%
everyday raise their hand as perhaps we
have<00:35:56.920><c> some</c><00:35:57.099><c> Java</c><00:35:57.339><c> people</c><00:35:57.730><c> in</c><00:35:57.849><c> here</c>

00:36:00.460 --> 00:36:00.470 align:start position:0%
 
 

00:36:00.470 --> 00:36:02.990 align:start position:0%
 
so<00:36:01.470><c> the</c><00:36:01.590><c> key</c><00:36:01.740><c> thing</c><00:36:01.770><c> to</c><00:36:02.010><c> know</c><00:36:02.220><c> about</c><00:36:02.250><c> about</c>

00:36:02.990 --> 00:36:03.000 align:start position:0%
so the key thing to know about about
 

00:36:03.000 --> 00:36:06.020 align:start position:0%
so the key thing to know about about
assigning<00:36:03.390><c> the</c><00:36:04.190><c> pointers</c><00:36:05.190><c> to</c><00:36:05.340><c> integers</c><00:36:05.700><c> is</c><00:36:05.880><c> it</c>

00:36:06.020 --> 00:36:06.030 align:start position:0%
assigning the pointers to integers is it
 

00:36:06.030 --> 00:36:08.240 align:start position:0%
assigning the pointers to integers is it
will<00:36:06.180><c> lose</c><00:36:06.450><c> data</c><00:36:06.900><c> it</c><00:36:07.110><c> will</c><00:36:07.140><c> just</c><00:36:07.500><c> simply</c><00:36:07.680><c> drop</c>

00:36:08.240 --> 00:36:08.250 align:start position:0%
will lose data it will just simply drop
 

00:36:08.250 --> 00:36:10.600 align:start position:0%
will lose data it will just simply drop
off<00:36:08.520><c> the</c><00:36:09.150><c> top</c><00:36:09.390><c> half</c><00:36:09.690><c> of</c><00:36:09.810><c> the</c><00:36:09.870><c> pointer</c><00:36:10.320><c> and</c>

00:36:10.600 --> 00:36:10.610 align:start position:0%
off the top half of the pointer and
 

00:36:10.610 --> 00:36:13.490 align:start position:0%
off the top half of the pointer and
it'll<00:36:11.610><c> just</c><00:36:11.640><c> be</c><00:36:11.940><c> gone</c><00:36:12.150><c> and</c><00:36:12.750><c> this</c><00:36:13.050><c> is</c><00:36:13.170><c> happening</c>

00:36:13.490 --> 00:36:13.500 align:start position:0%
it'll just be gone and this is happening
 

00:36:13.500 --> 00:36:14.930 align:start position:0%
it'll just be gone and this is happening
instruction<00:36:13.890><c> set</c><00:36:14.100><c> level</c><00:36:14.430><c> there's</c><00:36:14.610><c> there's</c>

00:36:14.930 --> 00:36:14.940 align:start position:0%
instruction set level there's there's
 

00:36:14.940 --> 00:36:17.960 align:start position:0%
instruction set level there's there's
there's<00:36:15.000><c> no</c><00:36:15.540><c> way</c><00:36:15.720><c> to</c><00:36:15.780><c> recover</c><00:36:16.020><c> from</c><00:36:16.350><c> it</c><00:36:16.970><c> now</c>

00:36:17.960 --> 00:36:17.970 align:start position:0%
there's no way to recover from it now
 

00:36:17.970 --> 00:36:19.730 align:start position:0%
there's no way to recover from it now
you<00:36:18.030><c> can</c><00:36:18.210><c> assign</c><00:36:18.540><c> too</c><00:36:18.720><c> long</c><00:36:18.990><c> or</c><00:36:19.230><c> a</c><00:36:19.290><c> long</c><00:36:19.500><c> long</c>

00:36:19.730 --> 00:36:19.740 align:start position:0%
you can assign too long or a long long
 

00:36:19.740 --> 00:36:24.110 align:start position:0%
you can assign too long or a long long
both<00:36:20.010><c> of</c><00:36:20.160><c> those</c><00:36:20.280><c> are</c><00:36:20.340><c> perfectly</c><00:36:20.880><c> okay</c><00:36:22.280><c> so</c><00:36:23.280><c> with</c>

00:36:24.110 --> 00:36:24.120 align:start position:0%
both of those are perfectly okay so with
 

00:36:24.120 --> 00:36:26.030 align:start position:0%
both of those are perfectly okay so with
the<00:36:24.300><c> code</c><00:36:24.690><c> example</c><00:36:25.170><c> we</c><00:36:25.230><c> have</c><00:36:25.440><c> here</c><00:36:25.650><c> we</c><00:36:25.770><c> do</c><00:36:25.890><c> the</c>

00:36:26.030 --> 00:36:26.040 align:start position:0%
the code example we have here we do the
 

00:36:26.040 --> 00:36:27.650 align:start position:0%
the code example we have here we do the
Malik<00:36:26.430><c> will</c><00:36:26.580><c> assume</c><00:36:26.880><c> the</c><00:36:26.910><c> mallet</c><00:36:27.270><c> came</c><00:36:27.480><c> back</c>

00:36:27.650 --> 00:36:27.660 align:start position:0%
Malik will assume the mallet came back
 

00:36:27.660 --> 00:36:30.470 align:start position:0%
Malik will assume the mallet came back
with<00:36:27.900><c> a</c><00:36:27.930><c> big</c><00:36:28.500><c> pointer</c><00:36:28.920><c> variable</c><00:36:29.370><c> we</c><00:36:29.940><c> assign</c><00:36:30.270><c> it</c>

00:36:30.470 --> 00:36:30.480 align:start position:0%
with a big pointer variable we assign it
 

00:36:30.480 --> 00:36:33.650 align:start position:0%
with a big pointer variable we assign it
and<00:36:30.830><c> GCC</c><00:36:31.830><c> is</c><00:36:32.130><c> helpful</c><00:36:32.670><c> and</c><00:36:32.850><c> it</c><00:36:32.940><c> does</c><00:36:33.090><c> warn</c><00:36:33.480><c> you</c>

00:36:33.650 --> 00:36:33.660 align:start position:0%
and GCC is helpful and it does warn you
 

00:36:33.660 --> 00:36:37.010 align:start position:0%
and GCC is helpful and it does warn you
that<00:36:34.050><c> the</c><00:36:34.320><c> assignment</c><00:36:34.830><c> will</c><00:36:35.390><c> is</c><00:36:36.390><c> making</c><00:36:36.930><c> an</c>

00:36:37.010 --> 00:36:37.020 align:start position:0%
that the assignment will is making an
 

00:36:37.020 --> 00:36:38.780 align:start position:0%
that the assignment will is making an
integer<00:36:37.230><c> from</c><00:36:37.350><c> a</c><00:36:37.590><c> pointer</c><00:36:38.010><c> but</c><00:36:38.460><c> it</c><00:36:38.550><c> doesn't</c>

00:36:38.780 --> 00:36:38.790 align:start position:0%
integer from a pointer but it doesn't
 

00:36:38.790 --> 00:36:40.250 align:start position:0%
integer from a pointer but it doesn't
tell<00:36:38.820><c> you</c><00:36:39.000><c> that</c><00:36:39.210><c> you're</c><00:36:39.360><c> losing</c><00:36:39.720><c> data</c><00:36:39.900><c> just</c>

00:36:40.250 --> 00:36:40.260 align:start position:0%
tell you that you're losing data just
 

00:36:40.260 --> 00:36:43.130 align:start position:0%
tell you that you're losing data just
warns<00:36:40.620><c> you</c><00:36:40.740><c> that</c><00:36:40.770><c> you're</c><00:36:41.130><c> you're</c><00:36:41.960><c> doing</c><00:36:42.960><c> this</c>

00:36:43.130 --> 00:36:43.140 align:start position:0%
warns you that you're you're doing this
 

00:36:43.140 --> 00:36:45.320 align:start position:0%
warns you that you're you're doing this
without<00:36:43.290><c> a</c><00:36:43.470><c> cast</c><00:36:43.830><c> will</c><00:36:44.310><c> come</c><00:36:44.520><c> back</c><00:36:44.670><c> to</c><00:36:44.700><c> cast</c><00:36:45.090><c> in</c>

00:36:45.320 --> 00:36:45.330 align:start position:0%
without a cast will come back to cast in
 

00:36:45.330 --> 00:36:47.750 align:start position:0%
without a cast will come back to cast in
a<00:36:45.390><c> moment</c><00:36:45.800><c> so</c><00:36:46.800><c> if</c><00:36:46.920><c> you</c><00:36:47.010><c> look</c><00:36:47.130><c> at</c><00:36:47.250><c> the</c><00:36:47.370><c> value</c><00:36:47.520><c> the</c>

00:36:47.750 --> 00:36:47.760 align:start position:0%
a moment so if you look at the value the
 

00:36:47.760 --> 00:36:49.880 align:start position:0%
a moment so if you look at the value the
integer<00:36:48.030><c> variable</c><00:36:48.450><c> at</c><00:36:48.510><c> that</c><00:36:48.600><c> point</c><00:36:48.870><c> it's</c><00:36:49.590><c> just</c>

00:36:49.880 --> 00:36:49.890 align:start position:0%
integer variable at that point it's just
 

00:36:49.890 --> 00:36:52.490 align:start position:0%
integer variable at that point it's just
the<00:36:50.040><c> lower</c><00:36:50.220><c> half</c><00:36:50.460><c> of</c><00:36:50.670><c> the</c><00:36:50.730><c> pointer</c><00:36:51.320><c> now</c><00:36:52.320><c> if</c><00:36:52.410><c> you</c>

00:36:52.490 --> 00:36:52.500 align:start position:0%
the lower half of the pointer now if you
 

00:36:52.500 --> 00:36:55.550 align:start position:0%
the lower half of the pointer now if you
do<00:36:52.620><c> the</c><00:36:52.740><c> same</c><00:36:52.980><c> thing</c><00:36:53.430><c> to</c><00:36:53.460><c> a</c><00:36:53.700><c> long</c><00:36:54.180><c> variable</c><00:36:54.660><c> you</c>

00:36:55.550 --> 00:36:55.560 align:start position:0%
do the same thing to a long variable you
 

00:36:55.560 --> 00:36:58.040 align:start position:0%
do the same thing to a long variable you
get<00:36:55.890><c> the</c><00:36:56.160><c> entire</c><00:36:56.460><c> value</c><00:36:57.030><c> you</c><00:36:57.540><c> can</c><00:36:57.690><c> assign</c><00:36:57.870><c> that</c>

00:36:58.040 --> 00:36:58.050 align:start position:0%
get the entire value you can assign that
 

00:36:58.050 --> 00:37:03.670 align:start position:0%
get the entire value you can assign that
back<00:36:58.260><c> to</c><00:36:58.470><c> a</c><00:36:58.500><c> pointer</c><00:36:58.830><c> later</c><00:36:59.010><c> on</c><00:36:59.220><c> that</c><00:36:59.460><c> works</c>

00:37:03.670 --> 00:37:03.680 align:start position:0%
 
 

00:37:03.680 --> 00:37:09.620 align:start position:0%
 
now<00:37:04.680><c> print</c><00:37:05.040><c> if</c><00:37:05.220><c> how</c><00:37:06.000><c> many</c><00:37:06.210><c> people</c><00:37:08.120><c> yep</c><00:37:09.120><c> okay</c>

00:37:09.620 --> 00:37:09.630 align:start position:0%
now print if how many people yep okay
 

00:37:09.630 --> 00:37:11.990 align:start position:0%
now print if how many people yep okay
how<00:37:10.080><c> many</c><00:37:10.290><c> people</c><00:37:10.650><c> use</c><00:37:10.890><c> the</c><00:37:11.100><c> correct</c><00:37:11.370><c> kind</c><00:37:11.700><c> of</c>

00:37:11.990 --> 00:37:12.000 align:start position:0%
how many people use the correct kind of
 

00:37:12.000 --> 00:37:14.180 align:start position:0%
how many people use the correct kind of
printf<00:37:12.540><c> directive</c><00:37:13.140><c> for</c><00:37:13.440><c> their</c><00:37:13.560><c> lungs</c><00:37:13.860><c> and</c>

00:37:14.180 --> 00:37:14.190 align:start position:0%
printf directive for their lungs and
 

00:37:14.190 --> 00:37:20.960 align:start position:0%
printf directive for their lungs and
long<00:37:14.370><c> long</c><00:37:17.150><c> so</c><00:37:18.290><c> the</c><00:37:19.290><c> most</c><00:37:20.070><c> people</c><00:37:20.400><c> will</c><00:37:20.700><c> just</c>

00:37:20.960 --> 00:37:20.970 align:start position:0%
long long so the most people will just
 

00:37:20.970 --> 00:37:25.760 align:start position:0%
long long so the most people will just
habitually<00:37:21.180><c> tend</c><00:37:21.870><c> to</c><00:37:21.960><c> use</c><00:37:22.490><c> %</c><00:37:23.490><c> d</c><00:37:23.730><c> +</c><00:37:24.140><c> %</c><00:37:25.140><c> d</c><00:37:25.290><c> has</c><00:37:25.500><c> the</c>

00:37:25.760 --> 00:37:25.770 align:start position:0%
habitually tend to use % d + % d has the
 

00:37:25.770 --> 00:37:28.190 align:start position:0%
habitually tend to use % d + % d has the
fatal<00:37:26.370><c> flaw</c><00:37:26.610><c> that</c><00:37:26.640><c> it</c><00:37:27.090><c> will</c><00:37:27.540><c> only</c><00:37:27.690><c> show</c><00:37:27.990><c> you</c><00:37:28.050><c> an</c>

00:37:28.190 --> 00:37:28.200 align:start position:0%
fatal flaw that it will only show you an
 

00:37:28.200 --> 00:37:30.680 align:start position:0%
fatal flaw that it will only show you an
integer<00:37:28.440><c> side</c><00:37:28.800><c> thing</c><00:37:29.160><c> printf</c><00:37:30.030><c> is</c><00:37:30.120><c> not</c><00:37:30.330><c> a</c><00:37:30.360><c> magic</c>

00:37:30.680 --> 00:37:30.690 align:start position:0%
integer side thing printf is not a magic
 

00:37:30.690 --> 00:37:34.190 align:start position:0%
integer side thing printf is not a magic
function<00:37:31.370><c> it</c><00:37:32.370><c> you</c><00:37:33.090><c> handed</c><00:37:33.480><c> all</c><00:37:33.630><c> the</c><00:37:33.840><c> arguments</c>

00:37:34.190 --> 00:37:34.200 align:start position:0%
function it you handed all the arguments
 

00:37:34.200 --> 00:37:36.710 align:start position:0%
function it you handed all the arguments
but<00:37:35.070><c> it</c><00:37:35.220><c> decides</c><00:37:35.580><c> what</c><00:37:35.910><c> to</c><00:37:35.940><c> pull</c><00:37:36.300><c> off</c><00:37:36.510><c> the</c>

00:37:36.710 --> 00:37:36.720 align:start position:0%
but it decides what to pull off the
 

00:37:36.720 --> 00:37:39.380 align:start position:0%
but it decides what to pull off the
stack<00:37:37.050><c> that</c><00:37:37.560><c> you</c><00:37:37.770><c> pass</c><00:37:38.040><c> to</c><00:37:38.280><c> it</c><00:37:38.430><c> based</c><00:37:39.090><c> on</c><00:37:39.240><c> what</c>

00:37:39.380 --> 00:37:39.390 align:start position:0%
stack that you pass to it based on what
 

00:37:39.390 --> 00:37:41.180 align:start position:0%
stack that you pass to it based on what
the<00:37:39.510><c> printf</c><00:37:39.840><c> directives</c><00:37:40.350><c> tell</c><00:37:40.620><c> it</c><00:37:40.770><c> but</c>

00:37:41.180 --> 00:37:41.190 align:start position:0%
the printf directives tell it but
 

00:37:41.190 --> 00:37:44.030 align:start position:0%
the printf directives tell it but
director<00:37:41.610><c> says</c><00:37:41.880><c> pull</c><00:37:42.600><c> four</c><00:37:43.080><c> bytes</c><00:37:43.350><c> it</c><00:37:43.710><c> pulled</c>

00:37:44.030 --> 00:37:44.040 align:start position:0%
director says pull four bytes it pulled
 

00:37:44.040 --> 00:37:46.520 align:start position:0%
director says pull four bytes it pulled
four<00:37:44.370><c> bytes</c><00:37:44.640><c> and</c><00:37:44.910><c> leaves</c><00:37:45.870><c> the</c><00:37:46.050><c> next</c><00:37:46.290><c> four</c>

00:37:46.520 --> 00:37:46.530 align:start position:0%
four bytes and leaves the next four
 

00:37:46.530 --> 00:37:49.070 align:start position:0%
four bytes and leaves the next four
bytes<00:37:46.850><c> for</c><00:37:47.850><c> the</c><00:37:48.000><c> next</c><00:37:48.240><c> thing</c><00:37:48.480><c> that</c><00:37:48.510><c> it's</c><00:37:48.810><c> asked</c>

00:37:49.070 --> 00:37:49.080 align:start position:0%
bytes for the next thing that it's asked
 

00:37:49.080 --> 00:37:50.930 align:start position:0%
bytes for the next thing that it's asked
to<00:37:49.170><c> print</c><00:37:49.440><c> so</c><00:37:50.010><c> you</c><00:37:50.100><c> can</c><00:37:50.190><c> get</c><00:37:50.280><c> some</c><00:37:50.430><c> interesting</c>

00:37:50.930 --> 00:37:50.940 align:start position:0%
to print so you can get some interesting
 

00:37:50.940 --> 00:37:53.630 align:start position:0%
to print so you can get some interesting
behaviors<00:37:51.900><c> and</c><00:37:52.710><c> it'd</c><00:37:52.920><c> be</c><00:37:52.950><c> very</c><00:37:53.040><c> confusing</c>

00:37:53.630 --> 00:37:53.640 align:start position:0%
behaviors and it'd be very confusing
 

00:37:53.640 --> 00:37:56.450 align:start position:0%
behaviors and it'd be very confusing
because<00:37:53.940><c> if</c><00:37:54.180><c> you</c><00:37:54.270><c> use</c><00:37:54.390><c> printf</c><00:37:54.840><c> as</c><00:37:55.170><c> your</c><00:37:55.460><c> window</c>

00:37:56.450 --> 00:37:56.460 align:start position:0%
because if you use printf as your window
 

00:37:56.460 --> 00:37:57.920 align:start position:0%
because if you use printf as your window
into<00:37:56.730><c> what's</c><00:37:56.880><c> happening</c><00:37:56.970><c> inside</c><00:37:57.450><c> the</c><00:37:57.690><c> program</c>

00:37:57.920 --> 00:37:57.930 align:start position:0%
into what's happening inside the program
 

00:37:57.930 --> 00:38:00.350 align:start position:0%
into what's happening inside the program
and<00:37:58.380><c> projeff</c><00:37:59.310><c> is</c><00:37:59.520><c> not</c><00:37:59.670><c> telling</c><00:38:00.090><c> you</c><00:38:00.180><c> what's</c>

00:38:00.350 --> 00:38:00.360 align:start position:0%
and projeff is not telling you what's
 

00:38:00.360 --> 00:38:02.630 align:start position:0%
and projeff is not telling you what's
really<00:38:00.570><c> happening</c><00:38:01.140><c> okay</c><00:38:01.890><c> you</c><00:38:02.310><c> can</c><00:38:02.460><c> have</c><00:38:02.490><c> a</c>

00:38:02.630 --> 00:38:02.640 align:start position:0%
really happening okay you can have a
 

00:38:02.640 --> 00:38:04.460 align:start position:0%
really happening okay you can have a
situation<00:38:02.880><c> where</c><00:38:03.300><c> the</c><00:38:03.360><c> program</c><00:38:03.570><c> is</c><00:38:03.750><c> more</c><00:38:04.350><c> or</c>

00:38:04.460 --> 00:38:04.470 align:start position:0%
situation where the program is more or
 

00:38:04.470 --> 00:38:06.200 align:start position:0%
situation where the program is more or
less<00:38:04.500><c> working</c><00:38:04.980><c> correctly</c><00:38:05.250><c> but</c><00:38:05.580><c> printf</c><00:38:06.000><c> says</c>

00:38:06.200 --> 00:38:06.210 align:start position:0%
less working correctly but printf says
 

00:38:06.210 --> 00:38:09.290 align:start position:0%
less working correctly but printf says
it<00:38:06.360><c> has</c><00:38:06.480><c> to</c><00:38:06.660><c> be</c><00:38:06.780><c> failing</c><00:38:07.280><c> okay</c><00:38:08.280><c> so</c><00:38:08.970><c> I</c><00:38:09.000><c> got</c><00:38:09.180><c> to</c>

00:38:09.290 --> 00:38:09.300 align:start position:0%
it has to be failing okay so I got to
 

00:38:09.300 --> 00:38:10.940 align:start position:0%
it has to be failing okay so I got to
watch<00:38:09.420><c> out</c><00:38:09.630><c> for</c><00:38:09.690><c> that</c><00:38:09.870><c> and</c><00:38:10.200><c> so</c><00:38:10.380><c> the</c><00:38:10.530><c> directives</c>

00:38:10.940 --> 00:38:10.950 align:start position:0%
watch out for that and so the directives
 

00:38:10.950 --> 00:38:13.220 align:start position:0%
watch out for that and so the directives
to<00:38:11.040><c> to</c><00:38:11.460><c> use</c><00:38:11.700><c> theirs</c><00:38:12.570><c> they've</c><00:38:12.930><c> always</c><00:38:13.110><c> been</c>

00:38:13.220 --> 00:38:13.230 align:start position:0%
to to use theirs they've always been
 

00:38:13.230 --> 00:38:13.970 align:start position:0%
to to use theirs they've always been
there<00:38:13.410><c> and</c><00:38:13.680><c> see</c>

00:38:13.970 --> 00:38:13.980 align:start position:0%
there and see
 

00:38:13.980 --> 00:38:16.160 align:start position:0%
there and see
they've<00:38:14.550><c> been</c><00:38:14.700><c> around</c><00:38:14.910><c> you</c><00:38:15.840><c> can</c><00:38:15.990><c> use</c><00:38:16.140><c> a</c>

00:38:16.160 --> 00:38:16.170 align:start position:0%
they've been around you can use a
 

00:38:16.170 --> 00:38:19.250 align:start position:0%
they've been around you can use a
percent<00:38:16.680><c> LD</c><00:38:17.119><c> for</c><00:38:18.119><c> a</c><00:38:18.150><c> decimal</c><00:38:18.600><c> print</c><00:38:18.869><c> out</c><00:38:19.020><c> or</c>

00:38:19.250 --> 00:38:19.260 align:start position:0%
percent LD for a decimal print out or
 

00:38:19.260 --> 00:38:20.599 align:start position:0%
percent LD for a decimal print out or
you<00:38:19.350><c> can</c><00:38:19.470><c> use</c><00:38:19.500><c> percent</c><00:38:19.920><c> LX</c><00:38:20.310><c> for</c><00:38:20.520><c> the</c>

00:38:20.599 --> 00:38:20.609 align:start position:0%
you can use percent LX for the
 

00:38:20.609 --> 00:38:22.970 align:start position:0%
you can use percent LX for the
hexadecimal<00:38:20.910><c> print</c><00:38:21.540><c> for</c><00:38:21.780><c> long</c><00:38:21.960><c> and</c><00:38:22.320><c> for</c><00:38:22.950><c> a</c>

00:38:22.970 --> 00:38:22.980 align:start position:0%
hexadecimal print for long and for a
 

00:38:22.980 --> 00:38:24.200 align:start position:0%
hexadecimal print for long and for a
long<00:38:23.130><c> long</c><00:38:23.340><c> as</c><00:38:23.520><c> it's</c><00:38:23.640><c> always</c><00:38:23.820><c> it's</c><00:38:24.060><c> always</c>

00:38:24.200 --> 00:38:24.210 align:start position:0%
long long as it's always it's always
 

00:38:24.210 --> 00:38:28.430 align:start position:0%
long long as it's always it's always
been<00:38:24.540><c> available</c><00:38:24.660><c> to</c><00:38:25.020><c> to</c><00:38:25.560><c> do</c><00:38:25.800><c> percent</c><00:38:26.609><c> ll</c><00:38:26.970><c> d</c><00:38:27.210><c> +</c><00:38:27.570><c> %</c>

00:38:28.430 --> 00:38:28.440 align:start position:0%
been available to to do percent ll d + %
 

00:38:28.440 --> 00:38:32.750 align:start position:0%
been available to to do percent ll d + %
LX<00:38:29.450><c> and</c><00:38:30.450><c> then</c><00:38:30.990><c> we</c><00:38:31.080><c> also</c><00:38:31.230><c> have</c><00:38:31.380><c> %</c><00:38:31.950><c> p</c><00:38:32.310><c> for</c>

00:38:32.750 --> 00:38:32.760 align:start position:0%
LX and then we also have % p for
 

00:38:32.760 --> 00:38:35.330 align:start position:0%
LX and then we also have % p for
pointers<00:38:33.150><c> the</c><00:38:33.960><c> standard</c><00:38:34.560><c> actually</c><00:38:34.950><c> does</c><00:38:35.160><c> not</c>

00:38:35.330 --> 00:38:35.340 align:start position:0%
pointers the standard actually does not
 

00:38:35.340 --> 00:38:39.140 align:start position:0%
pointers the standard actually does not
define<00:38:35.760><c> what</c><00:38:36.060><c> %</c><00:38:36.450><c> p</c><00:38:36.720><c> does</c><00:38:37.020><c> in</c><00:38:37.410><c> our</c><00:38:38.070><c> case</c><00:38:38.310><c> it</c><00:38:38.340><c> puts</c>

00:38:39.140 --> 00:38:39.150 align:start position:0%
define what % p does in our case it puts
 

00:38:39.150 --> 00:38:41.450 align:start position:0%
define what % p does in our case it puts
a<00:38:39.300><c> zero</c><00:38:40.020><c> X</c><00:38:40.290><c> on</c><00:38:40.470><c> the</c><00:38:40.590><c> front</c><00:38:40.859><c> and</c><00:38:41.010><c> prints</c><00:38:41.310><c> it</c><00:38:41.400><c> out</c>

00:38:41.450 --> 00:38:41.460 align:start position:0%
a zero X on the front and prints it out
 

00:38:41.460 --> 00:38:43.940 align:start position:0%
a zero X on the front and prints it out
in<00:38:41.609><c> hexadecimal</c><00:38:42.109><c> but</c><00:38:43.109><c> that's</c><00:38:43.260><c> actually</c><00:38:43.470><c> not</c><00:38:43.890><c> a</c>

00:38:43.940 --> 00:38:43.950 align:start position:0%
in hexadecimal but that's actually not a
 

00:38:43.950 --> 00:38:47.780 align:start position:0%
in hexadecimal but that's actually not a
cross-platform<00:38:44.990><c> expectation</c><00:38:45.990><c> %</c><00:38:46.410><c> t</c><00:38:46.590><c> P</c><00:38:47.369><c> may</c><00:38:47.640><c> do</c>

00:38:47.780 --> 00:38:47.790 align:start position:0%
cross-platform expectation % t P may do
 

00:38:47.790 --> 00:38:49.730 align:start position:0%
cross-platform expectation % t P may do
something<00:38:48.119><c> different</c><00:38:48.450><c> on</c><00:38:48.570><c> a</c><00:38:48.600><c> on</c><00:38:48.990><c> a</c><00:38:49.050><c> Linux</c><00:38:49.530><c> or</c><00:38:49.650><c> a</c>

00:38:49.730 --> 00:38:49.740 align:start position:0%
something different on a on a Linux or a
 

00:38:49.740 --> 00:38:56.540 align:start position:0%
something different on a on a Linux or a
solaris<00:38:50.190><c> or</c><00:38:50.340><c> what</c><00:38:50.490><c> have</c><00:38:50.640><c> you</c><00:38:54.530><c> now</c><00:38:55.530><c> how</c><00:38:56.490><c> many</c>

00:38:56.540 --> 00:38:56.550 align:start position:0%
solaris or what have you now how many
 

00:38:56.550 --> 00:39:04.160 align:start position:0%
solaris or what have you now how many
people<00:38:57.080><c> use</c><00:38:58.080><c> casting</c><00:39:00.230><c> yes</c><00:39:01.230><c> that's</c><00:39:01.560><c> good</c><00:39:01.910><c> so</c><00:39:03.170><c> so</c>

00:39:04.160 --> 00:39:04.170 align:start position:0%
people use casting yes that's good so so
 

00:39:04.170 --> 00:39:06.530 align:start position:0%
people use casting yes that's good so so
casting<00:39:04.680><c> unfortunately</c><00:39:05.369><c> is</c><00:39:05.490><c> not</c><00:39:05.520><c> a</c><00:39:05.940><c> magical</c>

00:39:06.530 --> 00:39:06.540 align:start position:0%
casting unfortunately is not a magical
 

00:39:06.540 --> 00:39:09.530 align:start position:0%
casting unfortunately is not a magical
process<00:39:07.320><c> that</c><00:39:08.190><c> somehow</c><00:39:08.970><c> makes</c><00:39:09.330><c> the</c>

00:39:09.530 --> 00:39:09.540 align:start position:0%
process that somehow makes the
 

00:39:09.540 --> 00:39:11.570 align:start position:0%
process that somehow makes the
conversion<00:39:10.050><c> work</c><00:39:10.230><c> all</c><00:39:10.619><c> it</c><00:39:10.950><c> does</c><00:39:11.100><c> is</c><00:39:11.160><c> tell</c><00:39:11.550><c> the</c>

00:39:11.570 --> 00:39:11.580 align:start position:0%
conversion work all it does is tell the
 

00:39:11.580 --> 00:39:13.760 align:start position:0%
conversion work all it does is tell the
compiler<00:39:11.970><c> that</c><00:39:12.330><c> you</c><00:39:12.450><c> actually</c><00:39:12.660><c> intended</c><00:39:13.290><c> to</c>

00:39:13.760 --> 00:39:13.770 align:start position:0%
compiler that you actually intended to
 

00:39:13.770 --> 00:39:15.950 align:start position:0%
compiler that you actually intended to
assign<00:39:14.100><c> one</c><00:39:14.369><c> to</c><00:39:14.520><c> the</c><00:39:14.640><c> other</c><00:39:14.670><c> so</c><00:39:15.060><c> as</c><00:39:15.690><c> our</c>

00:39:15.950 --> 00:39:15.960 align:start position:0%
assign one to the other so as our
 

00:39:15.960 --> 00:39:18.710 align:start position:0%
assign one to the other so as our
example<00:39:16.109><c> here</c><00:39:16.500><c> shows</c><00:39:16.920><c> we</c><00:39:17.790><c> can</c><00:39:18.090><c> assign</c><00:39:18.660><c> the</c>

00:39:18.710 --> 00:39:18.720 align:start position:0%
example here shows we can assign the
 

00:39:18.720 --> 00:39:20.630 align:start position:0%
example here shows we can assign the
pointer<00:39:19.170><c> variable</c><00:39:19.619><c> to</c><00:39:19.740><c> an</c><00:39:19.830><c> integer</c><00:39:20.040><c> variable</c>

00:39:20.630 --> 00:39:20.640 align:start position:0%
pointer variable to an integer variable
 

00:39:20.640 --> 00:39:25.160 align:start position:0%
pointer variable to an integer variable
and<00:39:21.320><c> voila</c><00:39:22.320><c> wax</c><00:39:22.740><c> the</c><00:39:22.920><c> top</c><00:39:23.130><c> off</c><00:39:23.340><c> again</c><00:39:24.170><c> but</c>

00:39:25.160 --> 00:39:25.170 align:start position:0%
and voila wax the top off again but
 

00:39:25.170 --> 00:39:27.020 align:start position:0%
and voila wax the top off again but
except<00:39:25.470><c> at</c><00:39:25.560><c> this</c><00:39:25.650><c> time</c><00:39:25.950><c> the</c><00:39:26.340><c> compiler</c><00:39:26.640><c> hasn't</c>

00:39:27.020 --> 00:39:27.030 align:start position:0%
except at this time the compiler hasn't
 

00:39:27.030 --> 00:39:30.440 align:start position:0%
except at this time the compiler hasn't
actually<00:39:27.150><c> said</c><00:39:27.510><c> anything</c><00:39:28.020><c> it</c><00:39:28.260><c> says</c><00:39:28.950><c> hey</c><00:39:29.450><c> we</c>

00:39:30.440 --> 00:39:30.450 align:start position:0%
actually said anything it says hey we
 

00:39:30.450 --> 00:39:32.150 align:start position:0%
actually said anything it says hey we
put<00:39:30.840><c> in</c><00:39:30.930><c> an</c><00:39:31.080><c> inch</c><00:39:31.290><c> cast</c><00:39:31.650><c> in</c><00:39:31.830><c> there</c><00:39:32.010><c> this</c>

00:39:32.150 --> 00:39:32.160 align:start position:0%
put in an inch cast in there this
 

00:39:32.160 --> 00:39:34.250 align:start position:0%
put in an inch cast in there this
program<00:39:32.280><c> must</c><00:39:32.700><c> know</c><00:39:32.910><c> what</c><00:39:33.060><c> they're</c><00:39:33.180><c> doing</c><00:39:33.480><c> so</c>

00:39:34.250 --> 00:39:34.260 align:start position:0%
program must know what they're doing so
 

00:39:34.260 --> 00:39:38.030 align:start position:0%
program must know what they're doing so
it<00:39:34.440><c> doesn't</c><00:39:34.710><c> say</c><00:39:34.830><c> anything</c><00:39:34.859><c> and</c><00:39:36.470><c> again</c><00:39:37.470><c> you</c>

00:39:38.030 --> 00:39:38.040 align:start position:0%
it doesn't say anything and again you
 

00:39:38.040 --> 00:39:40.070 align:start position:0%
it doesn't say anything and again you
can<00:39:38.070><c> do</c><00:39:38.310><c> the</c><00:39:38.460><c> same</c><00:39:38.609><c> thing</c><00:39:38.880><c> with</c><00:39:39.090><c> a</c><00:39:39.119><c> long</c><00:39:39.720><c> cast</c>

00:39:40.070 --> 00:39:40.080 align:start position:0%
can do the same thing with a long cast
 

00:39:40.080 --> 00:39:42.790 align:start position:0%
can do the same thing with a long cast
the<00:39:40.440><c> long</c><00:39:40.619><c> cast</c><00:39:40.890><c> will</c><00:39:41.100><c> do</c><00:39:41.220><c> the</c><00:39:41.310><c> right</c><00:39:41.490><c> thing</c><00:39:41.730><c> so</c>

00:39:42.790 --> 00:39:42.800 align:start position:0%
the long cast will do the right thing so
 

00:39:42.800 --> 00:39:45.650 align:start position:0%
the long cast will do the right thing so
so<00:39:43.800><c> the</c><00:39:43.950><c> basically</c><00:39:44.220><c> bottom</c><00:39:44.609><c> line</c><00:39:44.790><c> is</c><00:39:45.000><c> that</c><00:39:45.030><c> all</c>

00:39:45.650 --> 00:39:45.660 align:start position:0%
so the basically bottom line is that all
 

00:39:45.660 --> 00:39:47.450 align:start position:0%
so the basically bottom line is that all
those<00:39:45.750><c> caps</c><00:39:46.050><c> you</c><00:39:46.260><c> thought</c><00:39:46.470><c> were</c><00:39:46.650><c> we're</c><00:39:47.220><c> going</c>

00:39:47.450 --> 00:39:47.460 align:start position:0%
those caps you thought were we're going
 

00:39:47.460 --> 00:39:49.160 align:start position:0%
those caps you thought were we're going
to<00:39:47.550><c> fix</c><00:39:47.790><c> the</c><00:39:47.940><c> 64-bit</c><00:39:48.660><c> problem</c><00:39:48.990><c> actually</c>

00:39:49.160 --> 00:39:49.170 align:start position:0%
to fix the 64-bit problem actually
 

00:39:49.170 --> 00:39:56.300 align:start position:0%
to fix the 64-bit problem actually
aren't<00:39:49.440><c> doing</c><00:39:49.619><c> you</c><00:39:49.830><c> a</c><00:39:49.859><c> bit</c><00:39:50.040><c> of</c><00:39:50.070><c> good</c><00:39:55.040><c> now</c><00:39:56.040><c> sign</c>

00:39:56.300 --> 00:39:56.310 align:start position:0%
aren't doing you a bit of good now sign
 

00:39:56.310 --> 00:39:58.099 align:start position:0%
aren't doing you a bit of good now sign
extensions<00:39:56.910><c> is</c><00:39:57.030><c> a</c><00:39:57.330><c> little</c><00:39:57.660><c> bit</c><00:39:57.780><c> complicated</c>

00:39:58.099 --> 00:39:58.109 align:start position:0%
extensions is a little bit complicated
 

00:39:58.109 --> 00:40:03.349 align:start position:0%
extensions is a little bit complicated
here<00:39:58.680><c> the</c><00:39:59.960><c> problem</c><00:40:00.960><c> with</c><00:40:01.109><c> is</c><00:40:01.320><c> that</c><00:40:01.560><c> a</c><00:40:02.359><c> unsigned</c>

00:40:03.349 --> 00:40:03.359 align:start position:0%
here the problem with is that a unsigned
 

00:40:03.359 --> 00:40:05.990 align:start position:0%
here the problem with is that a unsigned
64-bit<00:40:04.350><c> number</c><00:40:04.680><c> may</c><00:40:05.190><c> actually</c><00:40:05.400><c> look</c><00:40:05.760><c> like</c><00:40:05.790><c> a</c>

00:40:05.990 --> 00:40:06.000 align:start position:0%
64-bit number may actually look like a
 

00:40:06.000 --> 00:40:09.020 align:start position:0%
64-bit number may actually look like a
signed<00:40:06.420><c> 32-bit</c><00:40:06.869><c> number</c><00:40:07.770><c> and</c><00:40:08.640><c> it's</c><00:40:08.790><c> a</c><00:40:08.850><c> little</c>

00:40:09.020 --> 00:40:09.030 align:start position:0%
signed 32-bit number and it's a little
 

00:40:09.030 --> 00:40:10.400 align:start position:0%
signed 32-bit number and it's a little
bit<00:40:09.119><c> messy</c><00:40:09.450><c> to</c><00:40:09.570><c> set</c><00:40:09.780><c> it</c><00:40:09.900><c> up</c><00:40:09.960><c> but</c><00:40:10.020><c> I</c><00:40:10.200><c> did</c><00:40:10.380><c> check</c>

00:40:10.400 --> 00:40:10.410 align:start position:0%
bit messy to set it up but I did check
 

00:40:10.410 --> 00:40:12.170 align:start position:0%
bit messy to set it up but I did check
this<00:40:10.740><c> out</c><00:40:10.920><c> in</c><00:40:11.010><c> a</c><00:40:11.070><c> code</c><00:40:11.280><c> so</c><00:40:11.460><c> if</c><00:40:11.550><c> you</c><00:40:11.609><c> run</c><00:40:11.790><c> back</c><00:40:11.970><c> to</c>

00:40:12.170 --> 00:40:12.180 align:start position:0%
this out in a code so if you run back to
 

00:40:12.180 --> 00:40:14.150 align:start position:0%
this out in a code so if you run back to
the<00:40:12.210><c> lab</c><00:40:12.480><c> I'm</c><00:40:12.720><c> I'm</c><00:40:12.869><c> reasonably</c><00:40:13.680><c> certain</c><00:40:13.770><c> that</c>

00:40:14.150 --> 00:40:14.160 align:start position:0%
the lab I'm I'm reasonably certain that
 

00:40:14.160 --> 00:40:15.560 align:start position:0%
the lab I'm I'm reasonably certain that
if<00:40:14.340><c> you</c><00:40:14.430><c> type</c><00:40:14.640><c> all</c><00:40:14.820><c> this</c><00:40:15.000><c> and</c><00:40:15.150><c> you'll</c><00:40:15.240><c> get</c><00:40:15.390><c> more</c>

00:40:15.560 --> 00:40:15.570 align:start position:0%
if you type all this and you'll get more
 

00:40:15.570 --> 00:40:17.630 align:start position:0%
if you type all this and you'll get more
or<00:40:15.660><c> less</c><00:40:15.810><c> the</c><00:40:15.930><c> same</c><00:40:15.960><c> result</c><00:40:16.560><c> however</c><00:40:17.400><c> we're</c>

00:40:17.630 --> 00:40:17.640 align:start position:0%
or less the same result however we're
 

00:40:17.640 --> 00:40:19.460 align:start position:0%
or less the same result however we're
destroying<00:40:18.000><c> the</c><00:40:18.210><c> slides</c><00:40:18.480><c> after</c><00:40:18.720><c> this</c><00:40:18.960><c> talk</c><00:40:19.200><c> so</c>

00:40:19.460 --> 00:40:19.470 align:start position:0%
destroying the slides after this talk so
 

00:40:19.470 --> 00:40:20.690 align:start position:0%
destroying the slides after this talk so
you<00:40:19.560><c> won't</c><00:40:19.740><c> actually</c><00:40:19.890><c> you'll</c><00:40:20.310><c> have</c><00:40:20.430><c> to</c><00:40:20.550><c> work</c>

00:40:20.690 --> 00:40:20.700 align:start position:0%
you won't actually you'll have to work
 

00:40:20.700 --> 00:40:23.250 align:start position:0%
you won't actually you'll have to work
from<00:40:20.910><c> memory</c>

00:40:23.250 --> 00:40:23.260 align:start position:0%
 
 

00:40:23.260 --> 00:40:25.620 align:start position:0%
 
so<00:40:23.800><c> let's</c><00:40:24.400><c> say</c><00:40:24.490><c> to</c><00:40:24.610><c> make</c><00:40:24.880><c> an</c><00:40:25.000><c> example</c><00:40:25.330><c> let's</c>

00:40:25.620 --> 00:40:25.630 align:start position:0%
so let's say to make an example let's
 

00:40:25.630 --> 00:40:29.160 align:start position:0%
so let's say to make an example let's
take<00:40:25.950><c> and</c><00:40:26.950><c> assign</c><00:40:27.670><c> 9</c><00:40:27.970><c> bajillion</c><00:40:28.450><c> to</c><00:40:28.900><c> an</c>

00:40:29.160 --> 00:40:29.170 align:start position:0%
take and assign 9 bajillion to an
 

00:40:29.170 --> 00:40:32.040 align:start position:0%
take and assign 9 bajillion to an
unsigned<00:40:29.890><c> integer</c><00:40:30.460><c> variable</c><00:40:30.940><c> so</c><00:40:31.570><c> this</c><00:40:31.810><c> is</c>

00:40:32.040 --> 00:40:32.050 align:start position:0%
unsigned integer variable so this is
 

00:40:32.050 --> 00:40:34.800 align:start position:0%
unsigned integer variable so this is
just<00:40:32.590><c> above</c><00:40:32.890><c> 2</c><00:40:33.130><c> gigabytes</c><00:40:33.610><c> so</c><00:40:33.910><c> so</c><00:40:34.300><c> if</c><00:40:34.420><c> this</c><00:40:34.540><c> as</c>

00:40:34.800 --> 00:40:34.810 align:start position:0%
just above 2 gigabytes so so if this as
 

00:40:34.810 --> 00:40:36.150 align:start position:0%
just above 2 gigabytes so so if this as
assigned<00:40:35.110><c> value</c><00:40:35.500><c> would</c><00:40:35.650><c> actually</c><00:40:35.980><c> come</c><00:40:36.130><c> out</c>

00:40:36.150 --> 00:40:36.160 align:start position:0%
assigned value would actually come out
 

00:40:36.160 --> 00:40:38.640 align:start position:0%
assigned value would actually come out
as<00:40:36.340><c> a</c><00:40:36.430><c> negative</c><00:40:36.730><c> number</c><00:40:36.850><c> well</c><00:40:37.690><c> we're</c><00:40:38.380><c> cleaning</c>

00:40:38.640 --> 00:40:38.650 align:start position:0%
as a negative number well we're cleaning
 

00:40:38.650 --> 00:40:39.990 align:start position:0%
as a negative number well we're cleaning
or<00:40:38.860><c> code</c><00:40:39.070><c> we've</c><00:40:39.250><c> made</c><00:40:39.460><c> it</c><00:40:39.580><c> an</c><00:40:39.670><c> unsigned</c>

00:40:39.990 --> 00:40:40.000 align:start position:0%
or code we've made it an unsigned
 

00:40:40.000 --> 00:40:42.720 align:start position:0%
or code we've made it an unsigned
integer<00:40:40.530><c> we</c><00:40:41.530><c> can</c><00:40:41.680><c> take</c><00:40:41.890><c> that</c><00:40:41.920><c> we</c><00:40:42.280><c> can</c><00:40:42.430><c> assign</c>

00:40:42.720 --> 00:40:42.730 align:start position:0%
integer we can take that we can assign
 

00:40:42.730 --> 00:40:44.970 align:start position:0%
integer we can take that we can assign
it<00:40:42.940><c> to</c><00:40:42.970><c> an</c><00:40:43.210><c> unsigned</c><00:40:43.600><c> long</c><00:40:43.900><c> and</c><00:40:44.290><c> the</c><00:40:44.830><c> right</c>

00:40:44.970 --> 00:40:44.980 align:start position:0%
it to an unsigned long and the right
 

00:40:44.980 --> 00:40:47.850 align:start position:0%
it to an unsigned long and the right
thing<00:40:45.220><c> happened</c><00:40:46.080><c> we</c><00:40:47.080><c> can</c><00:40:47.260><c> but</c><00:40:47.500><c> then</c><00:40:47.650><c> if</c><00:40:47.770><c> we</c>

00:40:47.850 --> 00:40:47.860 align:start position:0%
thing happened we can but then if we
 

00:40:47.860 --> 00:40:50.070 align:start position:0%
thing happened we can but then if we
take<00:40:48.040><c> that</c><00:40:48.100><c> and</c><00:40:48.550><c> we</c><00:40:48.670><c> assign</c><00:40:48.970><c> it</c><00:40:49.180><c> to</c><00:40:49.210><c> a</c><00:40:49.390><c> signed</c>

00:40:50.070 --> 00:40:50.080 align:start position:0%
take that and we assign it to a signed
 

00:40:50.080 --> 00:40:52.050 align:start position:0%
take that and we assign it to a signed
integer<00:40:50.380><c> we</c><00:40:51.250><c> end</c><00:40:51.370><c> up</c><00:40:51.490><c> with</c><00:40:51.520><c> a</c><00:40:51.640><c> value</c><00:40:51.850><c> that's</c>

00:40:52.050 --> 00:40:52.060 align:start position:0%
integer we end up with a value that's
 

00:40:52.060 --> 00:40:56.190 align:start position:0%
integer we end up with a value that's
less<00:40:52.270><c> than</c><00:40:52.690><c> zero</c><00:40:53.040><c> okay</c><00:40:54.040><c> and</c><00:40:54.600><c> if</c><00:40:55.600><c> the</c><00:40:55.900><c> other</c>

00:40:56.190 --> 00:40:56.200 align:start position:0%
less than zero okay and if the other
 

00:40:56.200 --> 00:40:57.660 align:start position:0%
less than zero okay and if the other
thing<00:40:56.470><c> that's</c><00:40:56.800><c> interesting</c><00:40:56.920><c> about</c><00:40:57.250><c> that</c><00:40:57.400><c> if</c>

00:40:57.660 --> 00:40:57.670 align:start position:0%
thing that's interesting about that if
 

00:40:57.670 --> 00:41:00.570 align:start position:0%
thing that's interesting about that if
you<00:40:57.730><c> also</c><00:40:57.880><c> take</c><00:40:58.210><c> that</c><00:40:58.450><c> less</c><00:40:59.050><c> than</c><00:40:59.230><c> zero</c><00:40:59.580><c> value</c>

00:41:00.570 --> 00:41:00.580 align:start position:0%
you also take that less than zero value
 

00:41:00.580 --> 00:41:03.150 align:start position:0%
you also take that less than zero value
and<00:41:00.790><c> then</c><00:41:01.120><c> assign</c><00:41:01.450><c> it</c><00:41:01.600><c> to</c><00:41:01.630><c> assign</c><00:41:02.140><c> long</c><00:41:02.530><c> it's</c>

00:41:03.150 --> 00:41:03.160 align:start position:0%
and then assign it to assign long it's
 

00:41:03.160 --> 00:41:05.910 align:start position:0%
and then assign it to assign long it's
still<00:41:03.460><c> less</c><00:41:03.730><c> than</c><00:41:03.790><c> zero</c><00:41:04.290><c> right</c><00:41:05.290><c> so</c><00:41:05.560><c> now</c><00:41:05.740><c> we've</c>

00:41:05.910 --> 00:41:05.920 align:start position:0%
still less than zero right so now we've
 

00:41:05.920 --> 00:41:09.030 align:start position:0%
still less than zero right so now we've
taken<00:41:06.130><c> our</c><00:41:06.370><c> nice</c><00:41:06.550><c> large</c><00:41:07.410><c> positive</c><00:41:08.410><c> number</c><00:41:08.740><c> and</c>

00:41:09.030 --> 00:41:09.040 align:start position:0%
taken our nice large positive number and
 

00:41:09.040 --> 00:41:12.630 align:start position:0%
taken our nice large positive number and
turn<00:41:09.370><c> it</c><00:41:09.490><c> into</c><00:41:09.610><c> a</c><00:41:09.730><c> large</c><00:41:10.060><c> negative</c><00:41:10.390><c> number</c><00:41:11.640><c> now</c>

00:41:12.630 --> 00:41:12.640 align:start position:0%
turn it into a large negative number now
 

00:41:12.640 --> 00:41:15.390 align:start position:0%
turn it into a large negative number now
the<00:41:12.990><c> juicy</c><00:41:13.990><c> part</c><00:41:14.230><c> about</c><00:41:14.470><c> this</c><00:41:14.710><c> is</c><00:41:14.770><c> then</c><00:41:15.070><c> you</c><00:41:15.220><c> go</c>

00:41:15.390 --> 00:41:15.400 align:start position:0%
the juicy part about this is then you go
 

00:41:15.400 --> 00:41:17.490 align:start position:0%
the juicy part about this is then you go
and<00:41:15.430><c> do</c><00:41:16.000><c> another</c><00:41:16.120><c> assignment</c><00:41:16.720><c> you</c><00:41:17.080><c> assign</c><00:41:17.350><c> it</c>

00:41:17.490 --> 00:41:17.500 align:start position:0%
and do another assignment you assign it
 

00:41:17.500 --> 00:41:21.180 align:start position:0%
and do another assignment you assign it
back<00:41:17.710><c> to</c><00:41:17.950><c> an</c><00:41:18.070><c> unsigned</c><00:41:18.490><c> long</c><00:41:19.290><c> okay</c><00:41:20.290><c> it</c><00:41:20.620><c> now</c>

00:41:21.180 --> 00:41:21.190 align:start position:0%
back to an unsigned long okay it now
 

00:41:21.190 --> 00:41:25.140 align:start position:0%
back to an unsigned long okay it now
comes<00:41:21.550><c> out</c><00:41:21.790><c> as</c><00:41:22.000><c> an</c><00:41:22.420><c> extremely</c><00:41:23.200><c> large</c><00:41:24.150><c> unsigned</c>

00:41:25.140 --> 00:41:25.150 align:start position:0%
comes out as an extremely large unsigned
 

00:41:25.150 --> 00:41:28.470 align:start position:0%
comes out as an extremely large unsigned
number<00:41:25.540><c> and</c><00:41:26.320><c> so</c><00:41:26.920><c> if</c><00:41:27.160><c> you</c><00:41:27.280><c> say</c><00:41:27.490><c> we're</c><00:41:27.730><c> expecting</c>

00:41:28.470 --> 00:41:28.480 align:start position:0%
number and so if you say we're expecting
 

00:41:28.480 --> 00:41:30.600 align:start position:0%
number and so if you say we're expecting
this<00:41:28.600><c> to</c><00:41:28.750><c> be</c><00:41:28.780><c> say</c><00:41:29.110><c> a</c><00:41:29.140><c> number</c><00:41:29.860><c> of</c><00:41:29.980><c> iterations</c>

00:41:30.600 --> 00:41:30.610 align:start position:0%
this to be say a number of iterations
 

00:41:30.610 --> 00:41:32.730 align:start position:0%
this to be say a number of iterations
you<00:41:30.820><c> know</c><00:41:30.940><c> two</c><00:41:31.570><c> billion</c><00:41:32.050><c> iterations</c><00:41:32.590><c> you</c>

00:41:32.730 --> 00:41:32.740 align:start position:0%
you know two billion iterations you
 

00:41:32.740 --> 00:41:35.820 align:start position:0%
you know two billion iterations you
could<00:41:32.920><c> that's</c><00:41:33.130><c> sort</c><00:41:33.370><c> of</c><00:41:33.430><c> plausible</c><00:41:34.830><c> however</c>

00:41:35.820 --> 00:41:35.830 align:start position:0%
could that's sort of plausible however
 

00:41:35.830 --> 00:41:37.950 align:start position:0%
could that's sort of plausible however
large<00:41:36.040><c> that</c><00:41:36.340><c> number</c><00:41:36.670><c> is</c><00:41:36.880><c> that's</c><00:41:37.420><c> an</c><00:41:37.600><c> awful</c><00:41:37.870><c> lot</c>

00:41:37.950 --> 00:41:37.960 align:start position:0%
large that number is that's an awful lot
 

00:41:37.960 --> 00:41:40.170 align:start position:0%
large that number is that's an awful lot
of<00:41:38.020><c> iterations</c><00:41:38.620><c> your</c><00:41:38.920><c> machine</c><00:41:39.220><c> will</c><00:41:39.250><c> spend</c>

00:41:40.170 --> 00:41:40.180 align:start position:0%
of iterations your machine will spend
 

00:41:40.180 --> 00:41:41.580 align:start position:0%
of iterations your machine will spend
quite<00:41:40.420><c> a</c><00:41:40.450><c> bit</c><00:41:40.510><c> of</c><00:41:40.630><c> time</c><00:41:40.750><c> getting</c><00:41:41.290><c> to</c><00:41:41.320><c> the</c><00:41:41.500><c> end</c>

00:41:41.580 --> 00:41:41.590 align:start position:0%
quite a bit of time getting to the end
 

00:41:41.590 --> 00:41:44.730 align:start position:0%
quite a bit of time getting to the end
of<00:41:41.740><c> that</c><00:41:42.510><c> so</c><00:41:43.510><c> that's</c><00:41:43.990><c> kind</c><00:41:44.230><c> of</c><00:41:44.290><c> a</c><00:41:44.410><c> mysterious</c>

00:41:44.730 --> 00:41:44.740 align:start position:0%
of that so that's kind of a mysterious
 

00:41:44.740 --> 00:41:46.590 align:start position:0%
of that so that's kind of a mysterious
looking<00:41:45.250><c> number</c><00:41:45.430><c> but</c><00:41:45.730><c> what</c><00:41:46.120><c> it</c><00:41:46.240><c> really</c><00:41:46.270><c> is</c>

00:41:46.590 --> 00:41:46.600 align:start position:0%
looking number but what it really is
 

00:41:46.600 --> 00:41:48.720 align:start position:0%
looking number but what it really is
it's<00:41:47.320><c> the</c><00:41:47.590><c> nine</c><00:41:47.770><c> bajillion</c><00:41:48.250><c> you</c><00:41:48.580><c> had</c>

00:41:48.720 --> 00:41:48.730 align:start position:0%
it's the nine bajillion you had
 

00:41:48.730 --> 00:41:52.740 align:start position:0%
it's the nine bajillion you had
originally<00:41:49.330><c> but</c><00:41:49.900><c> it</c><00:41:49.990><c> had</c><00:41:50.790><c> FFF</c><00:41:51.790><c> glued</c><00:41:52.420><c> on</c><00:41:52.600><c> the</c>

00:41:52.740 --> 00:41:52.750 align:start position:0%
originally but it had FFF glued on the
 

00:41:52.750 --> 00:41:55.620 align:start position:0%
originally but it had FFF glued on the
front<00:41:53.010><c> essentially</c><00:41:54.010><c> that's</c><00:41:54.250><c> just</c><00:41:55.120><c> being</c><00:41:55.450><c> a</c>

00:41:55.620 --> 00:41:55.630 align:start position:0%
front essentially that's just being a
 

00:41:55.630 --> 00:41:57.810 align:start position:0%
front essentially that's just being a
sign<00:41:55.870><c> extended</c><00:41:56.260><c> in</c><00:41:56.500><c> two's</c><00:41:56.680><c> complement</c><00:41:57.220><c> so</c>

00:41:57.810 --> 00:41:57.820 align:start position:0%
sign extended in two's complement so
 

00:41:57.820 --> 00:41:59.040 align:start position:0%
sign extended in two's complement so
that's<00:41:57.940><c> what</c><00:41:58.060><c> that</c><00:41:58.090><c> value</c><00:41:58.300><c> really</c><00:41:58.690><c> comes</c><00:41:58.960><c> from</c>

00:41:59.040 --> 00:41:59.050 align:start position:0%
that's what that value really comes from
 

00:41:59.050 --> 00:42:01.440 align:start position:0%
that's what that value really comes from
but<00:41:59.800><c> after</c><00:42:00.130><c> a</c><00:42:00.160><c> set</c><00:42:00.370><c> of</c><00:42:00.490><c> transformations</c><00:42:00.880><c> like</c>

00:42:01.440 --> 00:42:01.450 align:start position:0%
but after a set of transformations like
 

00:42:01.450 --> 00:42:03.360 align:start position:0%
but after a set of transformations like
this<00:42:01.690><c> it's</c><00:42:02.050><c> not</c><00:42:02.290><c> obvious</c><00:42:02.770><c> so</c><00:42:02.920><c> that's</c><00:42:03.100><c> what</c><00:42:03.280><c> the</c>

00:42:03.360 --> 00:42:03.370 align:start position:0%
this it's not obvious so that's what the
 

00:42:03.370 --> 00:42:04.740 align:start position:0%
this it's not obvious so that's what the
remember<00:42:03.700><c> where</c><00:42:03.970><c> the</c><00:42:04.090><c> number</c><00:42:04.270><c> really</c><00:42:04.480><c> comes</c>

00:42:04.740 --> 00:42:04.750 align:start position:0%
remember where the number really comes
 

00:42:04.750 --> 00:42:07.110 align:start position:0%
remember where the number really comes
from<00:42:04.840><c> and</c><00:42:05.290><c> what</c><00:42:06.250><c> you</c><00:42:06.370><c> want</c><00:42:06.550><c> to</c><00:42:06.640><c> do</c><00:42:06.760><c> is</c><00:42:06.940><c> when</c>

00:42:07.110 --> 00:42:07.120 align:start position:0%
from and what you want to do is when
 

00:42:07.120 --> 00:42:08.370 align:start position:0%
from and what you want to do is when
you're<00:42:07.240><c> sitting</c><00:42:07.390><c> in</c><00:42:07.510><c> debugger</c><00:42:07.900><c> and</c><00:42:08.050><c> the</c>

00:42:08.370 --> 00:42:08.380 align:start position:0%
you're sitting in debugger and the
 

00:42:08.380 --> 00:42:10.560 align:start position:0%
you're sitting in debugger and the
numbers<00:42:08.680><c> aren't</c><00:42:08.890><c> making</c><00:42:09.070><c> any</c><00:42:09.280><c> sense</c><00:42:09.580><c> look</c><00:42:10.390><c> at</c>

00:42:10.560 --> 00:42:10.570 align:start position:0%
numbers aren't making any sense look at
 

00:42:10.570 --> 00:42:12.930 align:start position:0%
numbers aren't making any sense look at
them<00:42:10.720><c> in</c><00:42:10.840><c> hexadecimal</c><00:42:11.170><c> and</c><00:42:11.800><c> a</c><00:42:12.520><c> lot</c><00:42:12.670><c> of</c><00:42:12.760><c> cases</c>

00:42:12.930 --> 00:42:12.940 align:start position:0%
them in hexadecimal and a lot of cases
 

00:42:12.940 --> 00:42:15.210 align:start position:0%
them in hexadecimal and a lot of cases
you'll<00:42:13.210><c> see</c><00:42:13.450><c> that</c><00:42:14.050><c> in</c><00:42:14.470><c> fact</c><00:42:14.620><c> there's</c><00:42:14.860><c> a</c><00:42:14.950><c> sign</c>

00:42:15.210 --> 00:42:15.220 align:start position:0%
you'll see that in fact there's a sign
 

00:42:15.220 --> 00:42:16.830 align:start position:0%
you'll see that in fact there's a sign
extension<00:42:15.640><c> it's</c><00:42:15.910><c> gone</c><00:42:16.090><c> on</c><00:42:16.270><c> numbers</c><00:42:16.660><c> then</c>

00:42:16.830 --> 00:42:16.840 align:start position:0%
extension it's gone on numbers then
 

00:42:16.840 --> 00:42:24.210 align:start position:0%
extension it's gone on numbers then
turned<00:42:17.110><c> into</c><00:42:17.500><c> a</c><00:42:17.530><c> large</c><00:42:18.250><c> unsigned</c><00:42:18.760><c> value</c>

00:42:24.210 --> 00:42:24.220 align:start position:0%
 
 

00:42:24.220 --> 00:42:26.410 align:start position:0%
 
now<00:42:25.220><c> another</c><00:42:25.430><c> way</c><00:42:25.520><c> to</c><00:42:25.670><c> have</c><00:42:25.849><c> bad</c><00:42:26.060><c> stuff</c>

00:42:26.410 --> 00:42:26.420 align:start position:0%
now another way to have bad stuff
 

00:42:26.420 --> 00:42:29.040 align:start position:0%
now another way to have bad stuff
happening<00:42:26.839><c> through</c><00:42:27.050><c> function</c><00:42:27.500><c> calls</c><00:42:27.940><c> now</c>

00:42:29.040 --> 00:42:29.050 align:start position:0%
happening through function calls now
 

00:42:29.050 --> 00:42:31.120 align:start position:0%
happening through function calls now
most<00:42:30.050><c> of</c><00:42:30.200><c> you</c><00:42:30.290><c> have</c><00:42:30.410><c> probably</c><00:42:30.440><c> done</c>

00:42:31.120 --> 00:42:31.130 align:start position:0%
most of you have probably done
 

00:42:31.130 --> 00:42:32.710 align:start position:0%
most of you have probably done
prototypes<00:42:31.730><c> is</c><00:42:31.880><c> that</c><00:42:32.000><c> true</c><00:42:32.240><c> is</c><00:42:32.390><c> everybody</c>

00:42:32.710 --> 00:42:32.720 align:start position:0%
prototypes is that true is everybody
 

00:42:32.720 --> 00:42:35.280 align:start position:0%
prototypes is that true is everybody
done<00:42:32.869><c> prototypes</c><00:42:33.410><c> for</c><00:42:33.619><c> all</c><00:42:33.740><c> their</c><00:42:33.890><c> functions</c>

00:42:35.280 --> 00:42:35.290 align:start position:0%
done prototypes for all their functions
 

00:42:35.290 --> 00:42:37.540 align:start position:0%
done prototypes for all their functions
as<00:42:36.290><c> it's</c><00:42:36.560><c> going</c><00:42:36.740><c> ok</c><00:42:37.010><c> there</c><00:42:37.040><c> we</c><00:42:37.220><c> go</c><00:42:37.280><c> hey</c>

00:42:37.540 --> 00:42:37.550 align:start position:0%
as it's going ok there we go hey
 

00:42:37.550 --> 00:42:39.640 align:start position:0%
as it's going ok there we go hey
everybody<00:42:38.089><c> does</c><00:42:38.330><c> prototypes</c><00:42:38.839><c> for</c><00:42:38.930><c> all</c><00:42:39.109><c> their</c>

00:42:39.640 --> 00:42:39.650 align:start position:0%
everybody does prototypes for all their
 

00:42:39.650 --> 00:42:42.609 align:start position:0%
everybody does prototypes for all their
functions<00:42:40.330><c> they</c><00:42:41.330><c> add</c><00:42:41.510><c> prototypes</c><00:42:42.140><c> when</c><00:42:42.470><c> the</c>

00:42:42.609 --> 00:42:42.619 align:start position:0%
functions they add prototypes when the
 

00:42:42.619 --> 00:42:44.170 align:start position:0%
functions they add prototypes when the
system<00:42:42.980><c> doesn't</c><00:42:43.190><c> provide</c><00:42:43.550><c> the</c><00:42:43.670><c> prototypes</c>

00:42:44.170 --> 00:42:44.180 align:start position:0%
system doesn't provide the prototypes
 

00:42:44.180 --> 00:42:50.109 align:start position:0%
system doesn't provide the prototypes
and<00:42:45.190><c> fewer</c><00:42:46.190><c> hands</c><00:42:46.460><c> go</c><00:42:46.670><c> up</c><00:42:46.700><c> there</c><00:42:47.500><c> so</c><00:42:48.970><c> so</c><00:42:49.970><c> it</c>

00:42:50.109 --> 00:42:50.119 align:start position:0%
and fewer hands go up there so so it
 

00:42:50.119 --> 00:42:52.570 align:start position:0%
and fewer hands go up there so so it
this<00:42:50.510><c> time</c><00:42:50.540><c> around</c><00:42:50.900><c> for</c><00:42:51.200><c> 64-bit</c><00:42:51.980><c> the</c>

00:42:52.570 --> 00:42:52.580 align:start position:0%
this time around for 64-bit the
 

00:42:52.580 --> 00:42:55.329 align:start position:0%
this time around for 64-bit the
prototypes<00:42:53.240><c> really</c><00:42:54.050><c> really</c><00:42:54.410><c> matter</c><00:42:54.650><c> because</c>

00:42:55.329 --> 00:42:55.339 align:start position:0%
prototypes really really matter because
 

00:42:55.339 --> 00:42:58.329 align:start position:0%
prototypes really really matter because
the<00:42:55.670><c> rules</c><00:42:55.849><c> of</c><00:42:56.150><c> see</c><00:42:56.390><c> our</c><00:42:56.740><c> that</c><00:42:57.740><c> if</c><00:42:57.980><c> you</c><00:42:58.130><c> don't</c>

00:42:58.329 --> 00:42:58.339 align:start position:0%
the rules of see our that if you don't
 

00:42:58.339 --> 00:43:00.400 align:start position:0%
the rules of see our that if you don't
have<00:42:58.520><c> a</c><00:42:58.550><c> prototype</c><00:42:58.970><c> it'll</c><00:42:59.660><c> fall</c><00:42:59.869><c> back</c><00:43:00.109><c> to</c><00:43:00.290><c> its</c>

00:43:00.400 --> 00:43:00.410 align:start position:0%
have a prototype it'll fall back to its
 

00:43:00.410 --> 00:43:02.260 align:start position:0%
have a prototype it'll fall back to its
default<00:43:00.589><c> which</c><00:43:01.099><c> is</c><00:43:01.250><c> to</c><00:43:01.400><c> pass</c><00:43:01.609><c> doubles</c><00:43:02.060><c> for</c>

00:43:02.260 --> 00:43:02.270 align:start position:0%
default which is to pass doubles for
 

00:43:02.270 --> 00:43:04.660 align:start position:0%
default which is to pass doubles for
floats<00:43:02.510><c> which</c><00:43:02.930><c> is</c><00:43:03.080><c> usually</c><00:43:03.380><c> ok</c><00:43:03.470><c> but</c><00:43:04.339><c> to</c><00:43:04.460><c> pass</c>

00:43:04.660 --> 00:43:04.670 align:start position:0%
floats which is usually ok but to pass
 

00:43:04.670 --> 00:43:08.849 align:start position:0%
floats which is usually ok but to pass
integers<00:43:05.410><c> for</c><00:43:06.410><c> the</c><00:43:07.130><c> integer</c><00:43:07.730><c> arguments</c><00:43:08.300><c> and</c>

00:43:08.849 --> 00:43:08.859 align:start position:0%
integers for the integer arguments and
 

00:43:08.859 --> 00:43:12.520 align:start position:0%
integers for the integer arguments and
particular<00:43:09.859><c> that's</c><00:43:10.070><c> not</c><00:43:10.339><c> long</c><00:43:10.630><c> so</c><00:43:11.630><c> and</c><00:43:12.109><c> the</c>

00:43:12.520 --> 00:43:12.530 align:start position:0%
particular that's not long so and the
 

00:43:12.530 --> 00:43:14.170 align:start position:0%
particular that's not long so and the
compiler<00:43:12.890><c> may</c><00:43:13.130><c> or</c><00:43:13.280><c> may</c><00:43:13.369><c> not</c><00:43:13.400><c> say</c><00:43:13.790><c> something</c>

00:43:14.170 --> 00:43:14.180 align:start position:0%
compiler may or may not say something
 

00:43:14.180 --> 00:43:15.910 align:start position:0%
compiler may or may not say something
about<00:43:14.390><c> this</c><00:43:14.450><c> so</c><00:43:15.290><c> we</c><00:43:15.440><c> have</c><00:43:15.560><c> a</c><00:43:15.589><c> here</c><00:43:15.770><c> an</c><00:43:15.830><c> example</c>

00:43:15.910 --> 00:43:15.920 align:start position:0%
about this so we have a here an example
 

00:43:15.920 --> 00:43:19.089 align:start position:0%
about this so we have a here an example
of<00:43:16.430><c> a</c><00:43:16.880><c> function</c><00:43:17.000><c> called</c><00:43:17.570><c> fun</c><00:43:17.839><c> with</c><00:43:18.800><c> its</c>

00:43:19.089 --> 00:43:19.099 align:start position:0%
of a function called fun with its
 

00:43:19.099 --> 00:43:20.829 align:start position:0%
of a function called fun with its
declared<00:43:19.670><c> as</c><00:43:19.820><c> a</c><00:43:19.849><c> function</c><00:43:20.330><c> but</c><00:43:20.510><c> it's</c><00:43:20.660><c> got</c>

00:43:20.829 --> 00:43:20.839 align:start position:0%
declared as a function but it's got
 

00:43:20.839 --> 00:43:23.589 align:start position:0%
declared as a function but it's got
doesn't<00:43:21.260><c> have</c><00:43:21.349><c> a</c><00:43:21.380><c> proper</c><00:43:21.770><c> prototype</c><00:43:22.450><c> we</c><00:43:23.450><c> can</c>

00:43:23.589 --> 00:43:23.599 align:start position:0%
doesn't have a proper prototype we can
 

00:43:23.599 --> 00:43:26.260 align:start position:0%
doesn't have a proper prototype we can
take<00:43:23.780><c> a</c><00:43:23.810><c> long</c><00:43:24.140><c> value</c><00:43:24.560><c> and</c><00:43:24.740><c> assign</c><00:43:25.010><c> it</c><00:43:25.040><c> to</c><00:43:25.369><c> to</c><00:43:26.240><c> a</c>

00:43:26.260 --> 00:43:26.270 align:start position:0%
take a long value and assign it to to a
 

00:43:26.270 --> 00:43:29.109 align:start position:0%
take a long value and assign it to to a
long<00:43:26.570><c> variable</c><00:43:27.050><c> and</c><00:43:27.380><c> that</c><00:43:27.560><c> works</c><00:43:27.820><c> and</c><00:43:28.820><c> we</c><00:43:28.970><c> can</c>

00:43:29.109 --> 00:43:29.119 align:start position:0%
long variable and that works and we can
 

00:43:29.119 --> 00:43:31.089 align:start position:0%
long variable and that works and we can
pass<00:43:29.359><c> that</c><00:43:29.599><c> into</c><00:43:29.780><c> the</c><00:43:29.990><c> function</c><00:43:30.200><c> but</c><00:43:30.740><c> what</c>

00:43:31.089 --> 00:43:31.099 align:start position:0%
pass that into the function but what
 

00:43:31.099 --> 00:43:32.980 align:start position:0%
pass that into the function but what
happens<00:43:31.130><c> is</c><00:43:31.670><c> that</c><00:43:31.700><c> the</c><00:43:32.150><c> function</c><00:43:32.660><c> calling</c>

00:43:32.980 --> 00:43:32.990 align:start position:0%
happens is that the function calling
 

00:43:32.990 --> 00:43:35.890 align:start position:0%
happens is that the function calling
process<00:43:33.609><c> truncates</c><00:43:34.609><c> the</c><00:43:34.910><c> integer</c><00:43:35.270><c> again</c><00:43:35.660><c> a</c>

00:43:35.890 --> 00:43:35.900 align:start position:0%
process truncates the integer again a
 

00:43:35.900 --> 00:43:38.260 align:start position:0%
process truncates the integer again a
fashion<00:43:36.859><c> it</c><00:43:36.950><c> should</c><00:43:37.099><c> be</c><00:43:37.160><c> familiar</c><00:43:37.339><c> by</c><00:43:37.760><c> now</c><00:43:37.790><c> and</c>

00:43:38.260 --> 00:43:38.270 align:start position:0%
fashion it should be familiar by now and
 

00:43:38.270 --> 00:43:40.510 align:start position:0%
fashion it should be familiar by now and
if<00:43:38.810><c> you</c><00:43:38.900><c> look</c><00:43:39.050><c> at</c><00:43:39.140><c> the</c><00:43:39.260><c> value</c><00:43:39.440><c> of</c><00:43:39.830><c> the</c><00:43:40.040><c> variable</c>

00:43:40.510 --> 00:43:40.520 align:start position:0%
if you look at the value of the variable
 

00:43:40.520 --> 00:43:43.420 align:start position:0%
if you look at the value of the variable
inside<00:43:41.089><c> the</c><00:43:41.300><c> function</c><00:43:41.480><c> it's</c><00:43:42.320><c> chopped</c><00:43:43.220><c> off</c>

00:43:43.420 --> 00:43:43.430 align:start position:0%
inside the function it's chopped off
 

00:43:43.430 --> 00:43:46.390 align:start position:0%
inside the function it's chopped off
again<00:43:43.930><c> now</c><00:43:44.930><c> if</c><00:43:45.080><c> you</c><00:43:45.200><c> pass</c><00:43:45.410><c> the</c><00:43:45.650><c> whole</c><00:43:45.830><c> constant</c>

00:43:46.390 --> 00:43:46.400 align:start position:0%
again now if you pass the whole constant
 

00:43:46.400 --> 00:43:48.160 align:start position:0%
again now if you pass the whole constant
it'll<00:43:46.790><c> do</c><00:43:46.880><c> the</c><00:43:47.000><c> same</c><00:43:47.210><c> thing</c><00:43:47.450><c> it'll</c><00:43:47.630><c> still</c><00:43:47.900><c> chop</c>

00:43:48.160 --> 00:43:48.170 align:start position:0%
it'll do the same thing it'll still chop
 

00:43:48.170 --> 00:43:50.950 align:start position:0%
it'll do the same thing it'll still chop
it<00:43:48.320><c> off</c><00:43:48.849><c> in</c><00:43:49.849><c> that</c><00:43:50.030><c> case</c><00:43:50.210><c> the</c><00:43:50.270><c> compiler</c><00:43:50.780><c> will</c>

00:43:50.950 --> 00:43:50.960 align:start position:0%
it off in that case the compiler will
 

00:43:50.960 --> 00:43:52.450 align:start position:0%
it off in that case the compiler will
give<00:43:51.140><c> you</c><00:43:51.290><c> a</c><00:43:51.320><c> warning</c><00:43:51.619><c> that</c><00:43:51.859><c> is</c><00:43:51.980><c> chopping</c><00:43:52.250><c> it</c>

00:43:52.450 --> 00:43:52.460 align:start position:0%
give you a warning that is chopping it
 

00:43:52.460 --> 00:44:00.940 align:start position:0%
give you a warning that is chopping it
off<00:43:52.609><c> which</c><00:43:52.880><c> is</c><00:43:53.000><c> a</c><00:43:53.150><c> small</c><00:43:53.570><c> consolation</c><00:43:59.890><c> ok</c><00:44:00.890><c> so</c>

00:44:00.940 --> 00:44:00.950 align:start position:0%
off which is a small consolation ok so
 

00:44:00.950 --> 00:44:04.150 align:start position:0%
off which is a small consolation ok so
we've<00:44:01.220><c> got</c><00:44:01.369><c> all</c><00:44:01.580><c> these</c><00:44:01.760><c> ways</c><00:44:02.180><c> of</c><00:44:02.690><c> losing</c><00:44:03.440><c> by</c><00:44:03.619><c> by</c>

00:44:04.150 --> 00:44:04.160 align:start position:0%
we've got all these ways of losing by by
 

00:44:04.160 --> 00:44:05.740 align:start position:0%
we've got all these ways of losing by by
getting<00:44:04.520><c> the</c><00:44:04.609><c> values</c><00:44:04.970><c> cut</c><00:44:05.240><c> up</c><00:44:05.390><c> in</c><00:44:05.540><c> ways</c><00:44:05.720><c> that</c>

00:44:05.740 --> 00:44:05.750 align:start position:0%
getting the values cut up in ways that
 

00:44:05.750 --> 00:44:08.620 align:start position:0%
getting the values cut up in ways that
you<00:44:06.020><c> don't</c><00:44:06.170><c> want</c><00:44:06.380><c> so</c><00:44:07.040><c> how</c><00:44:07.820><c> do</c><00:44:07.880><c> you</c><00:44:08.030><c> do</c><00:44:08.210><c> it</c><00:44:08.359><c> right</c>

00:44:08.620 --> 00:44:08.630 align:start position:0%
you don't want so how do you do it right
 

00:44:08.630 --> 00:44:12.490 align:start position:0%
you don't want so how do you do it right
I<00:44:08.900><c> mean</c><00:44:09.050><c> what</c><00:44:09.200><c> do</c><00:44:09.410><c> you</c><00:44:09.440><c> do</c><00:44:10.750><c> you</c><00:44:11.750><c> have</c><00:44:11.930><c> often</c><00:44:12.230><c> a</c>

00:44:12.490 --> 00:44:12.500 align:start position:0%
I mean what do you do you have often a
 

00:44:12.500 --> 00:44:14.230 align:start position:0%
I mean what do you do you have often a
very<00:44:12.530><c> situation</c><00:44:13.339><c> for</c><00:44:13.550><c> instance</c><00:44:13.820><c> you</c><00:44:13.880><c> have</c><00:44:13.940><c> to</c>

00:44:14.230 --> 00:44:14.240 align:start position:0%
very situation for instance you have to
 

00:44:14.240 --> 00:44:15.970 align:start position:0%
very situation for instance you have to
send<00:44:14.690><c> something</c><00:44:14.960><c> out</c><00:44:15.140><c> over</c><00:44:15.410><c> the</c><00:44:15.500><c> wire</c><00:44:15.710><c> you</c>

00:44:15.970 --> 00:44:15.980 align:start position:0%
send something out over the wire you
 

00:44:15.980 --> 00:44:18.220 align:start position:0%
send something out over the wire you
have<00:44:16.099><c> to</c><00:44:16.220><c> send</c><00:44:16.430><c> something</c><00:44:16.700><c> to</c><00:44:16.880><c> a</c><00:44:17.230><c> 32-bit</c>

00:44:18.220 --> 00:44:18.230 align:start position:0%
have to send something to a 32-bit
 

00:44:18.230 --> 00:44:20.650 align:start position:0%
have to send something to a 32-bit
process<00:44:18.740><c> and</c><00:44:19.040><c> you</c><00:44:19.099><c> need</c><00:44:19.250><c> to</c><00:44:19.339><c> preserve</c><00:44:20.180><c> both</c>

00:44:20.650 --> 00:44:20.660 align:start position:0%
process and you need to preserve both
 

00:44:20.660 --> 00:44:23.650 align:start position:0%
process and you need to preserve both
halves<00:44:20.930><c> of</c><00:44:21.140><c> your</c><00:44:21.200><c> big</c><00:44:21.470><c> pointer</c><00:44:22.570><c> there's</c><00:44:23.570><c> a</c>

00:44:23.650 --> 00:44:23.660 align:start position:0%
halves of your big pointer there's a
 

00:44:23.660 --> 00:44:25.450 align:start position:0%
halves of your big pointer there's a
couple<00:44:23.839><c> different</c><00:44:24.050><c> ways</c><00:44:24.320><c> to</c><00:44:24.380><c> do</c><00:44:24.650><c> it</c><00:44:24.800><c> and</c><00:44:24.980><c> I</c>

00:44:25.450 --> 00:44:25.460 align:start position:0%
couple different ways to do it and I
 

00:44:25.460 --> 00:44:27.220 align:start position:0%
couple different ways to do it and I
won't<00:44:25.640><c> try</c><00:44:25.880><c> and</c><00:44:25.910><c> recommend</c><00:44:26.599><c> a</c><00:44:26.720><c> single</c><00:44:27.080><c> way</c>

00:44:27.220 --> 00:44:27.230 align:start position:0%
won't try and recommend a single way
 

00:44:27.230 --> 00:44:28.599 align:start position:0%
won't try and recommend a single way
because<00:44:27.589><c> it</c><00:44:27.710><c> really</c><00:44:27.890><c> depends</c><00:44:28.339><c> on</c><00:44:28.430><c> your</c>

00:44:28.599 --> 00:44:28.609 align:start position:0%
because it really depends on your
 

00:44:28.609 --> 00:44:31.660 align:start position:0%
because it really depends on your
situation<00:44:28.790><c> your</c><00:44:29.330><c> application</c><00:44:30.220><c> one</c><00:44:31.220><c> way</c><00:44:31.400><c> that</c>

00:44:31.660 --> 00:44:31.670 align:start position:0%
situation your application one way that
 

00:44:31.670 --> 00:44:33.609 align:start position:0%
situation your application one way that
works<00:44:31.970><c> reasonably</c><00:44:32.450><c> well</c><00:44:32.540><c> is</c><00:44:32.900><c> to</c><00:44:33.020><c> use</c><00:44:33.140><c> a</c><00:44:33.170><c> union</c>

00:44:33.609 --> 00:44:33.619 align:start position:0%
works reasonably well is to use a union
 

00:44:33.619 --> 00:44:36.430 align:start position:0%
works reasonably well is to use a union
in<00:44:33.800><c> this</c><00:44:34.730><c> case</c><00:44:34.940><c> we</c><00:44:35.150><c> have</c><00:44:35.300><c> a</c><00:44:35.330><c> union</c><00:44:35.630><c> that</c><00:44:35.960><c> exists</c>

00:44:36.430 --> 00:44:36.440 align:start position:0%
in this case we have a union that exists
 

00:44:36.440 --> 00:44:37.460 align:start position:0%
in this case we have a union that exists
only<00:44:36.560><c> for</c><00:44:36.680><c> the</c><00:44:36.920><c> purpose</c><00:44:37.250><c> of</c>

00:44:37.460 --> 00:44:37.470 align:start position:0%
only for the purpose of
 

00:44:37.470 --> 00:44:39.800 align:start position:0%
only for the purpose of
splitting<00:44:37.800><c> up</c><00:44:37.920><c> a</c><00:44:38.040><c> big</c><00:44:38.220><c> value</c><00:44:38.640><c> and</c><00:44:39.359><c> we</c><00:44:39.480><c> have</c><00:44:39.599><c> two</c>

00:44:39.800 --> 00:44:39.810 align:start position:0%
splitting up a big value and we have two
 

00:44:39.810 --> 00:44:41.750 align:start position:0%
splitting up a big value and we have two
fields<00:44:40.170><c> Union</c><00:44:40.470><c> along</c><00:44:40.770><c> and</c><00:44:41.130><c> an</c><00:44:41.220><c> array</c><00:44:41.340><c> of</c><00:44:41.460><c> two</c>

00:44:41.750 --> 00:44:41.760 align:start position:0%
fields Union along and an array of two
 

00:44:41.760 --> 00:44:45.890 align:start position:0%
fields Union along and an array of two
inch<00:44:42.500><c> we</c><00:44:43.500><c> can</c><00:44:43.650><c> assign</c><00:44:43.920><c> it</c><00:44:44.099><c> to</c><00:44:44.130><c> the</c><00:44:44.780><c> we</c><00:44:45.780><c> can</c>

00:44:45.890 --> 00:44:45.900 align:start position:0%
inch we can assign it to the we can
 

00:44:45.900 --> 00:44:47.359 align:start position:0%
inch we can assign it to the we can
assign<00:44:46.109><c> them</c><00:44:46.320><c> to</c><00:44:46.410><c> take</c><00:44:46.560><c> a</c><00:44:46.590><c> long</c><00:44:46.830><c> variable</c>

00:44:47.359 --> 00:44:47.369 align:start position:0%
assign them to take a long variable
 

00:44:47.369 --> 00:44:50.089 align:start position:0%
assign them to take a long variable
assign<00:44:48.180><c> it</c><00:44:48.330><c> to</c><00:44:48.359><c> the</c><00:44:48.540><c> Union</c><00:44:48.930><c> and</c><00:44:49.170><c> then</c><00:44:49.859><c> if</c><00:44:50.010><c> you</c>

00:44:50.089 --> 00:44:50.099 align:start position:0%
assign it to the Union and then if you
 

00:44:50.099 --> 00:44:52.040 align:start position:0%
assign it to the Union and then if you
look<00:44:50.310><c> at</c><00:44:50.430><c> the</c><00:44:50.460><c> two</c><00:44:50.790><c> halves</c><00:44:51.060><c> Union</c><00:44:51.720><c> they</c><00:44:51.840><c> come</c>

00:44:52.040 --> 00:44:52.050 align:start position:0%
look at the two halves Union they come
 

00:44:52.050 --> 00:44:54.770 align:start position:0%
look at the two halves Union they come
out<00:44:52.200><c> as</c><00:44:52.349><c> the</c><00:44:52.500><c> two</c><00:44:52.650><c> halves</c><00:44:52.859><c> of</c><00:44:53.040><c> the</c><00:44:53.190><c> integer</c><00:44:53.780><c> now</c>

00:44:54.770 --> 00:44:54.780 align:start position:0%
out as the two halves of the integer now
 

00:44:54.780 --> 00:44:57.349 align:start position:0%
out as the two halves of the integer now
downside<00:44:55.380><c> a</c><00:44:55.410><c> hazard</c><00:44:55.920><c> of</c><00:44:56.010><c> this</c><00:44:56.250><c> this</c><00:44:56.700><c> is</c><00:44:56.880><c> Indian</c>

00:44:57.349 --> 00:44:57.359 align:start position:0%
downside a hazard of this this is Indian
 

00:44:57.359 --> 00:44:59.720 align:start position:0%
downside a hazard of this this is Indian
dependent<00:44:58.040><c> okay</c><00:44:59.040><c> so</c><00:44:59.099><c> if</c><00:44:59.550><c> you're</c><00:44:59.700><c> just</c>

00:44:59.720 --> 00:44:59.730 align:start position:0%
dependent okay so if you're just
 

00:44:59.730 --> 00:45:02.660 align:start position:0%
dependent okay so if you're just
transmitting<00:45:00.570><c> within</c><00:45:00.840><c> from</c><00:45:01.230><c> one</c><00:45:01.670><c> processor</c>

00:45:02.660 --> 00:45:02.670 align:start position:0%
transmitting within from one processor
 

00:45:02.670 --> 00:45:05.030 align:start position:0%
transmitting within from one processor
to<00:45:02.760><c> the</c><00:45:02.849><c> same</c><00:45:03.060><c> kind</c><00:45:03.359><c> of</c><00:45:03.510><c> processor</c><00:45:04.109><c> this</c><00:45:04.830><c> will</c>

00:45:05.030 --> 00:45:05.040 align:start position:0%
to the same kind of processor this will
 

00:45:05.040 --> 00:45:06.349 align:start position:0%
to the same kind of processor this will
work<00:45:05.070><c> or</c><00:45:05.490><c> if</c><00:45:05.550><c> you're</c><00:45:05.640><c> doing</c><00:45:05.849><c> within</c><00:45:06.030><c> a</c><00:45:06.180><c> single</c>

00:45:06.349 --> 00:45:06.359 align:start position:0%
work or if you're doing within a single
 

00:45:06.359 --> 00:45:08.690 align:start position:0%
work or if you're doing within a single
program<00:45:06.830><c> but</c><00:45:07.830><c> if</c><00:45:08.010><c> you're</c><00:45:08.160><c> splitting</c><00:45:08.490><c> in</c><00:45:08.670><c> half</c>

00:45:08.690 --> 00:45:08.700 align:start position:0%
program but if you're splitting in half
 

00:45:08.700 --> 00:45:11.930 align:start position:0%
program but if you're splitting in half
and<00:45:09.349><c> sending</c><00:45:10.349><c> it</c><00:45:10.440><c> to</c><00:45:10.590><c> has</c><00:45:10.830><c> over</c><00:45:11.280><c> the</c><00:45:11.430><c> wire</c><00:45:11.640><c> to</c>

00:45:11.930 --> 00:45:11.940 align:start position:0%
and sending it to has over the wire to
 

00:45:11.940 --> 00:45:15.410 align:start position:0%
and sending it to has over the wire to
say<00:45:12.270><c> an</c><00:45:12.510><c> x86</c><00:45:12.840><c> machine</c><00:45:13.530><c> chances</c><00:45:14.520><c> are</c><00:45:14.760><c> the</c><00:45:15.240><c> two</c>

00:45:15.410 --> 00:45:15.420 align:start position:0%
say an x86 machine chances are the two
 

00:45:15.420 --> 00:45:18.440 align:start position:0%
say an x86 machine chances are the two
halves<00:45:15.660><c> will</c><00:45:15.900><c> go</c><00:45:16.080><c> out</c><00:45:16.230><c> wrong</c><00:45:16.560><c> and</c><00:45:17.000><c> so</c><00:45:18.000><c> usually</c>

00:45:18.440 --> 00:45:18.450 align:start position:0%
halves will go out wrong and so usually
 

00:45:18.450 --> 00:45:20.330 align:start position:0%
halves will go out wrong and so usually
I<00:45:18.480><c> need</c><00:45:18.720><c> to</c><00:45:18.810><c> be</c><00:45:18.900><c> aware</c><00:45:19.170><c> of</c><00:45:19.230><c> that</c><00:45:19.500><c> which</c><00:45:19.950><c> half</c><00:45:20.160><c> is</c>

00:45:20.330 --> 00:45:20.340 align:start position:0%
I need to be aware of that which half is
 

00:45:20.340 --> 00:45:23.660 align:start position:0%
I need to be aware of that which half is
which<00:45:21.440><c> because</c><00:45:22.440><c> again</c><00:45:22.680><c> in</c><00:45:22.830><c> in</c><00:45:22.950><c> traditional</c>

00:45:23.660 --> 00:45:23.670 align:start position:0%
which because again in in traditional
 

00:45:23.670 --> 00:45:25.609 align:start position:0%
which because again in in traditional
fashion<00:45:23.880><c> you</c><00:45:24.210><c> send</c><00:45:24.420><c> it</c><00:45:24.510><c> out</c><00:45:24.630><c> over</c><00:45:24.930><c> the</c><00:45:25.109><c> wire</c><00:45:25.380><c> it</c>

00:45:25.609 --> 00:45:25.619 align:start position:0%
fashion you send it out over the wire it
 

00:45:25.619 --> 00:45:27.859 align:start position:0%
fashion you send it out over the wire it
comes<00:45:25.859><c> out</c><00:45:26.010><c> wrong</c><00:45:26.280><c> you</c><00:45:27.030><c> sent</c><00:45:27.300><c> to</c><00:45:27.510><c> over</c><00:45:27.780><c> the</c>

00:45:27.859 --> 00:45:27.869 align:start position:0%
comes out wrong you sent to over the
 

00:45:27.869 --> 00:45:30.050 align:start position:0%
comes out wrong you sent to over the
wire<00:45:28.080><c> in</c><00:45:28.290><c> it</c><00:45:28.380><c> and</c><00:45:28.619><c> the</c><00:45:28.830><c> x86</c><00:45:29.430><c> receives</c><00:45:29.880><c> it</c>

00:45:30.050 --> 00:45:30.060 align:start position:0%
wire in it and the x86 receives it
 

00:45:30.060 --> 00:45:33.290 align:start position:0%
wire in it and the x86 receives it
receives<00:45:30.420><c> it</c><00:45:30.599><c> as</c><00:45:30.890><c> 2</c><00:45:31.890><c> times</c><00:45:32.160><c> 4</c><00:45:32.460><c> gigabytes</c><00:45:33.000><c> or</c><00:45:33.150><c> 8</c>

00:45:33.290 --> 00:45:33.300 align:start position:0%
receives it as 2 times 4 gigabytes or 8
 

00:45:33.300 --> 00:45:36.530 align:start position:0%
receives it as 2 times 4 gigabytes or 8
gigabytes<00:45:33.780><c> and</c><00:45:34.340><c> if</c><00:45:35.340><c> for</c><00:45:35.520><c> instance</c><00:45:35.550><c> they</c><00:45:36.000><c> and</c>

00:45:36.530 --> 00:45:36.540 align:start position:0%
gigabytes and if for instance they and
 

00:45:36.540 --> 00:45:38.420 align:start position:0%
gigabytes and if for instance they and
that's<00:45:36.930><c> in</c><00:45:37.290><c> the</c><00:45:37.440><c> header</c><00:45:37.619><c> of</c><00:45:37.710><c> a</c><00:45:37.859><c> packet</c><00:45:38.280><c> and</c>

00:45:38.420 --> 00:45:38.430 align:start position:0%
that's in the header of a packet and
 

00:45:38.430 --> 00:45:40.280 align:start position:0%
that's in the header of a packet and
it's<00:45:38.520><c> expecting</c><00:45:39.000><c> 8</c><00:45:39.150><c> gigabytes</c><00:45:39.630><c> of</c><00:45:39.810><c> data</c><00:45:39.990><c> when</c>

00:45:40.280 --> 00:45:40.290 align:start position:0%
it's expecting 8 gigabytes of data when
 

00:45:40.290 --> 00:45:42.829 align:start position:0%
it's expecting 8 gigabytes of data when
you<00:45:40.380><c> only</c><00:45:40.500><c> sent</c><00:45:40.800><c> to</c><00:45:41.010><c> the</c><00:45:41.790><c> x86</c><00:45:42.390><c> machine</c><00:45:42.750><c> is</c>

00:45:42.829 --> 00:45:42.839 align:start position:0%
you only sent to the x86 machine is
 

00:45:42.839 --> 00:45:44.000 align:start position:0%
you only sent to the x86 machine is
going<00:45:42.990><c> to</c><00:45:43.050><c> be</c><00:45:43.109><c> waiting</c><00:45:43.349><c> for</c><00:45:43.530><c> a</c><00:45:43.560><c> very</c><00:45:43.740><c> long</c><00:45:43.950><c> time</c>

00:45:44.000 --> 00:45:44.010 align:start position:0%
going to be waiting for a very long time
 

00:45:44.010 --> 00:45:47.180 align:start position:0%
going to be waiting for a very long time
on<00:45:44.930><c> the</c><00:45:45.930><c> plus</c><00:45:46.170><c> side</c><00:45:46.200><c> you</c><00:45:46.410><c> can</c><00:45:46.710><c> then</c><00:45:46.800><c> say</c><00:45:46.980><c> that's</c>

00:45:47.180 --> 00:45:47.190 align:start position:0%
on the plus side you can then say that's
 

00:45:47.190 --> 00:45:48.770 align:start position:0%
on the plus side you can then say that's
a<00:45:47.280><c> Windows</c><00:45:47.580><c> bug</c><00:45:47.849><c> and</c><00:45:48.150><c> everybody</c><00:45:48.480><c> will</c><00:45:48.630><c> believe</c>

00:45:48.770 --> 00:45:48.780 align:start position:0%
a Windows bug and everybody will believe
 

00:45:48.780 --> 00:45:54.349 align:start position:0%
a Windows bug and everybody will believe
you<00:45:52.099><c> so</c><00:45:53.099><c> the</c><00:45:53.250><c> other</c><00:45:53.369><c> way</c><00:45:53.520><c> to</c><00:45:53.580><c> do</c><00:45:53.790><c> that</c><00:45:53.970><c> that's</c>

00:45:54.349 --> 00:45:54.359 align:start position:0%
you so the other way to do that that's
 

00:45:54.359 --> 00:45:56.300 align:start position:0%
you so the other way to do that that's
more<00:45:55.109><c> reliable</c><00:45:55.650><c> if</c><00:45:55.800><c> you</c><00:45:55.920><c> have</c><00:45:56.040><c> to</c><00:45:56.160><c> pay</c>

00:45:56.300 --> 00:45:56.310 align:start position:0%
more reliable if you have to pay
 

00:45:56.310 --> 00:45:59.270 align:start position:0%
more reliable if you have to pay
attention<00:45:56.339><c> and</c><00:45:56.910><c> Eunice</c><00:45:57.240><c> is</c><00:45:57.390><c> to</c><00:45:58.140><c> write</c><00:45:59.070><c> out</c>

00:45:59.270 --> 00:45:59.280 align:start position:0%
attention and Eunice is to write out
 

00:45:59.280 --> 00:46:02.660 align:start position:0%
attention and Eunice is to write out
manually<00:46:00.080><c> the</c><00:46:01.080><c> cutting</c><00:46:01.619><c> up</c><00:46:01.740><c> operation</c><00:46:02.430><c> and</c>

00:46:02.660 --> 00:46:02.670 align:start position:0%
manually the cutting up operation and
 

00:46:02.670 --> 00:46:05.030 align:start position:0%
manually the cutting up operation and
written<00:46:03.510><c> out</c><00:46:03.630><c> here</c><00:46:03.839><c> and</c><00:46:03.990><c> I've</c><00:46:04.619><c> tested</c><00:46:04.980><c> this</c>

00:46:05.030 --> 00:46:05.040 align:start position:0%
written out here and I've tested this
 

00:46:05.040 --> 00:46:07.700 align:start position:0%
written out here and I've tested this
one<00:46:05.250><c> too</c><00:46:05.520><c> so</c><00:46:05.820><c> again</c><00:46:06.300><c> you</c><00:46:06.540><c> know</c><00:46:06.599><c> do</c><00:46:07.410><c> it</c><00:46:07.530><c> from</c>

00:46:07.700 --> 00:46:07.710 align:start position:0%
one too so again you know do it from
 

00:46:07.710 --> 00:46:10.400 align:start position:0%
one too so again you know do it from
memory<00:46:08.089><c> on</c><00:46:09.089><c> a</c><00:46:09.150><c> lab</c><00:46:09.570><c> machine</c><00:46:09.930><c> and</c><00:46:10.080><c> see</c><00:46:10.200><c> if</c><00:46:10.320><c> it</c>

00:46:10.400 --> 00:46:10.410 align:start position:0%
memory on a lab machine and see if it
 

00:46:10.410 --> 00:46:11.870 align:start position:0%
memory on a lab machine and see if it
really<00:46:10.530><c> works</c><00:46:10.680><c> and</c><00:46:11.070><c> come</c><00:46:11.250><c> tell</c><00:46:11.400><c> me</c><00:46:11.460><c> if</c><00:46:11.670><c> I</c><00:46:11.760><c> got</c>

00:46:11.870 --> 00:46:11.880 align:start position:0%
really works and come tell me if I got
 

00:46:11.880 --> 00:46:15.470 align:start position:0%
really works and come tell me if I got
it<00:46:12.030><c> wrong</c><00:46:12.200><c> the</c><00:46:13.670><c> game</c><00:46:14.670><c> here</c><00:46:14.940><c> is</c><00:46:15.060><c> we</c><00:46:15.240><c> need</c><00:46:15.390><c> to</c>

00:46:15.470 --> 00:46:15.480 align:start position:0%
it wrong the game here is we need to
 

00:46:15.480 --> 00:46:18.560 align:start position:0%
it wrong the game here is we need to
mask<00:46:15.720><c> off</c><00:46:16.020><c> we</c><00:46:16.200><c> want</c><00:46:16.320><c> to</c><00:46:16.470><c> mask</c><00:46:16.680><c> off</c><00:46:16.920><c> the</c><00:46:17.730><c> low</c><00:46:18.300><c> and</c>

00:46:18.560 --> 00:46:18.570 align:start position:0%
mask off we want to mask off the low and
 

00:46:18.570 --> 00:46:21.970 align:start position:0%
mask off we want to mask off the low and
high<00:46:18.720><c> halves</c><00:46:19.080><c> of</c><00:46:19.410><c> the</c><00:46:20.040><c> of</c><00:46:20.430><c> the</c><00:46:20.760><c> long</c><00:46:21.510><c> number</c>

00:46:21.970 --> 00:46:21.980 align:start position:0%
high halves of the of the long number
 

00:46:21.980 --> 00:46:25.190 align:start position:0%
high halves of the of the long number
now<00:46:22.980><c> it'll</c><00:46:23.130><c> mask</c><00:46:23.369><c> off</c><00:46:23.670><c> the</c><00:46:23.820><c> low</c><00:46:24.000><c> half</c><00:46:24.270><c> you</c><00:46:24.960><c> can</c>

00:46:25.190 --> 00:46:25.200 align:start position:0%
now it'll mask off the low half you can
 

00:46:25.200 --> 00:46:29.240 align:start position:0%
now it'll mask off the low half you can
end<00:46:25.619><c> it</c><00:46:25.920><c> with</c><00:46:26.220><c> lots</c><00:46:27.180><c> of</c><00:46:27.330><c> F</c><00:46:27.540><c> the</c><00:46:28.500><c> trick</c><00:46:28.800><c> here</c><00:46:29.070><c> is</c>

00:46:29.240 --> 00:46:29.250 align:start position:0%
end it with lots of F the trick here is
 

00:46:29.250 --> 00:46:32.060 align:start position:0%
end it with lots of F the trick here is
you<00:46:29.670><c> need</c><00:46:29.849><c> to</c><00:46:29.940><c> end</c><00:46:30.119><c> it</c><00:46:30.420><c> with</c><00:46:30.900><c> lots</c><00:46:31.290><c> of</c><00:46:31.470><c> F</c><00:46:31.740><c> with</c>

00:46:32.060 --> 00:46:32.070 align:start position:0%
you need to end it with lots of F with
 

00:46:32.070 --> 00:46:35.390 align:start position:0%
you need to end it with lots of F with
lots<00:46:33.000><c> of</c><00:46:33.210><c> leading</c><00:46:33.599><c> zeros</c><00:46:34.080><c> okay</c><00:46:34.950><c> if</c><00:46:35.070><c> I</c><00:46:35.190><c> just</c>

00:46:35.390 --> 00:46:35.400 align:start position:0%
lots of leading zeros okay if I just
 

00:46:35.400 --> 00:46:38.630 align:start position:0%
lots of leading zeros okay if I just
said<00:46:35.580><c> 0</c><00:46:35.880><c> X</c><00:46:36.210><c> and</c><00:46:36.839><c> then</c><00:46:37.109><c> 8</c><00:46:37.320><c> f</c><00:46:37.530><c> that</c><00:46:38.310><c> would</c><00:46:38.490><c> get</c>

00:46:38.630 --> 00:46:38.640 align:start position:0%
said 0 X and then 8 f that would get
 

00:46:38.640 --> 00:46:42.470 align:start position:0%
said 0 X and then 8 f that would get
sign<00:46:38.880><c> extended</c><00:46:39.300><c> 20</c><00:46:39.750><c> x</c><00:46:40.050><c> +</c><00:46:40.290><c> 16</c><00:46:40.710><c> apps</c><00:46:40.980><c> and</c><00:46:41.480><c> the</c>

00:46:42.470 --> 00:46:42.480 align:start position:0%
sign extended 20 x + 16 apps and the
 

00:46:42.480 --> 00:46:44.690 align:start position:0%
sign extended 20 x + 16 apps and the
ampersand<00:46:43.020><c> then</c><00:46:43.230><c> would</c><00:46:43.410><c> would</c><00:46:43.650><c> yield</c><00:46:43.920><c> a</c><00:46:44.130><c> big</c>

00:46:44.690 --> 00:46:44.700 align:start position:0%
ampersand then would would yield a big
 

00:46:44.700 --> 00:46:46.730 align:start position:0%
ampersand then would would yield a big
number<00:46:44.910><c> and</c><00:46:45.210><c> then</c><00:46:45.720><c> it</c><00:46:45.839><c> would</c><00:46:45.960><c> be</c><00:46:45.990><c> cut</c><00:46:46.320><c> off</c><00:46:46.500><c> to</c>

00:46:46.730 --> 00:46:46.740 align:start position:0%
number and then it would be cut off to
 

00:46:46.740 --> 00:46:49.579 align:start position:0%
number and then it would be cut off to
get<00:46:47.099><c> the</c><00:46:47.220><c> wrong</c><00:46:47.369><c> half</c><00:46:47.960><c> sorry</c><00:46:48.960><c> no</c><00:46:49.109><c> we</c><00:46:49.470><c> actually</c>

00:46:49.579 --> 00:46:49.589 align:start position:0%
get the wrong half sorry no we actually
 

00:46:49.589 --> 00:46:50.990 align:start position:0%
get the wrong half sorry no we actually
get<00:46:49.830><c> the</c><00:46:49.859><c> right</c><00:46:50.070><c> half</c><00:46:50.280><c> but</c><00:46:50.460><c> it</c><00:46:50.550><c> we</c><00:46:50.609><c> get</c><00:46:50.730><c> it</c><00:46:50.790><c> for</c>

00:46:50.990 --> 00:46:51.000 align:start position:0%
get the right half but it we get it for
 

00:46:51.000 --> 00:46:51.579 align:start position:0%
get the right half but it we get it for
the<00:46:51.060><c> wrong</c>

00:46:51.579 --> 00:46:51.589 align:start position:0%
the wrong
 

00:46:51.589 --> 00:46:56.599 align:start position:0%
the wrong
so<00:46:52.730><c> so</c><00:46:53.730><c> I</c><00:46:53.760><c> recommend</c><00:46:54.030><c> doing</c><00:46:54.450><c> it</c><00:46:54.660><c> this</c><00:46:54.809><c> way</c><00:46:55.609><c> they</c>

00:46:56.599 --> 00:46:56.609 align:start position:0%
so so I recommend doing it this way they
 

00:46:56.609 --> 00:46:58.190 align:start position:0%
so so I recommend doing it this way they
don't<00:46:56.640><c> have</c><00:46:56.940><c> a</c><00:46:56.970><c> slide</c><00:46:57.299><c> actually</c><00:46:57.510><c> for</c><00:46:57.869><c> this</c><00:46:58.020><c> but</c>

00:46:58.190 --> 00:46:58.200 align:start position:0%
don't have a slide actually for this but
 

00:46:58.200 --> 00:47:00.289 align:start position:0%
don't have a slide actually for this but
you<00:46:58.589><c> can</c><00:46:58.770><c> actually</c><00:46:58.950><c> get</c><00:46:59.400><c> into</c><00:46:59.670><c> trouble</c><00:47:00.119><c> if</c><00:47:00.240><c> you</c>

00:47:00.289 --> 00:47:00.299 align:start position:0%
you can actually get into trouble if you
 

00:47:00.299 --> 00:47:03.770 align:start position:0%
you can actually get into trouble if you
don't<00:47:00.390><c> add</c><00:47:00.869><c> the</c><00:47:00.900><c> elves</c><00:47:01.530><c> on</c><00:47:01.680><c> to</c><00:47:02.520><c> the</c><00:47:02.819><c> the</c><00:47:03.390><c> ends</c>

00:47:03.770 --> 00:47:03.780 align:start position:0%
don't add the elves on to the the ends
 

00:47:03.780 --> 00:47:05.450 align:start position:0%
don't add the elves on to the the ends
of<00:47:03.869><c> your</c><00:47:03.900><c> constants</c><00:47:04.530><c> so</c><00:47:04.710><c> I</c><00:47:04.740><c> recommend</c><00:47:04.980><c> you</c><00:47:05.339><c> do</c>

00:47:05.450 --> 00:47:05.460 align:start position:0%
of your constants so I recommend you do
 

00:47:05.460 --> 00:47:07.730 align:start position:0%
of your constants so I recommend you do
that<00:47:05.640><c> everywhere</c><00:47:05.910><c> now</c><00:47:06.440><c> that</c><00:47:07.440><c> you're</c><00:47:07.619><c> doing</c>

00:47:07.730 --> 00:47:07.740 align:start position:0%
that everywhere now that you're doing
 

00:47:07.740 --> 00:47:10.819 align:start position:0%
that everywhere now that you're doing
working<00:47:08.160><c> with</c><00:47:08.369><c> 64-bit</c><00:47:08.910><c> programming</c><00:47:09.680><c> to</c><00:47:10.680><c> get</c>

00:47:10.819 --> 00:47:10.829 align:start position:0%
working with 64-bit programming to get
 

00:47:10.829 --> 00:47:12.859 align:start position:0%
working with 64-bit programming to get
the<00:47:10.920><c> high</c><00:47:11.069><c> half</c><00:47:11.339><c> of</c><00:47:11.520><c> the</c><00:47:11.609><c> number</c><00:47:11.880><c> since</c><00:47:12.720><c> we're</c>

00:47:12.859 --> 00:47:12.869 align:start position:0%
the high half of the number since we're
 

00:47:12.869 --> 00:47:14.660 align:start position:0%
the high half of the number since we're
working<00:47:13.200><c> in</c><00:47:13.260><c> a</c><00:47:13.319><c> signed</c><00:47:13.619><c> regime</c><00:47:14.160><c> the</c><00:47:14.369><c> correct</c>

00:47:14.660 --> 00:47:14.670 align:start position:0%
working in a signed regime the correct
 

00:47:14.670 --> 00:47:16.370 align:start position:0%
working in a signed regime the correct
thing<00:47:14.819><c> to</c><00:47:14.880><c> do</c><00:47:15.089><c> is</c><00:47:15.240><c> to</c><00:47:15.270><c> do</c><00:47:15.480><c> a</c><00:47:15.510><c> shift</c><00:47:15.660><c> you</c><00:47:16.319><c> can</c>

00:47:16.370 --> 00:47:16.380 align:start position:0%
thing to do is to do a shift you can
 

00:47:16.380 --> 00:47:19.220 align:start position:0%
thing to do is to do a shift you can
shift<00:47:16.650><c> down</c><00:47:16.920><c> by</c><00:47:17.160><c> 32</c><00:47:17.549><c> and</c><00:47:18.030><c> in</c><00:47:18.869><c> this</c><00:47:18.960><c> case</c><00:47:19.170><c> we</c>

00:47:19.220 --> 00:47:19.230 align:start position:0%
shift down by 32 and in this case we
 

00:47:19.230 --> 00:47:20.960 align:start position:0%
shift down by 32 and in this case we
don't<00:47:19.530><c> have</c><00:47:19.650><c> to</c><00:47:19.740><c> put</c><00:47:19.890><c> an</c><00:47:20.010><c> L</c><00:47:20.130><c> on</c><00:47:20.160><c> the</c><00:47:20.369><c> 32</c><00:47:20.670><c> because</c>

00:47:20.960 --> 00:47:20.970 align:start position:0%
don't have to put an L on the 32 because
 

00:47:20.970 --> 00:47:23.870 align:start position:0%
don't have to put an L on the 32 because
it's<00:47:21.119><c> just</c><00:47:21.180><c> a</c><00:47:21.390><c> shift</c><00:47:21.660><c> and</c><00:47:21.980><c> that</c><00:47:22.980><c> will</c><00:47:23.160><c> make</c><00:47:23.700><c> the</c>

00:47:23.870 --> 00:47:23.880 align:start position:0%
it's just a shift and that will make the
 

00:47:23.880 --> 00:47:26.750 align:start position:0%
it's just a shift and that will make the
sign<00:47:24.150><c> extended</c><00:47:24.630><c> correctly</c><00:47:25.230><c> if</c><00:47:25.859><c> you</c><00:47:26.490><c> have</c><00:47:26.730><c> a</c>

00:47:26.750 --> 00:47:26.760 align:start position:0%
sign extended correctly if you have a
 

00:47:26.760 --> 00:47:28.130 align:start position:0%
sign extended correctly if you have a
negative<00:47:26.940><c> number</c><00:47:27.299><c> that</c><00:47:27.569><c> you're</c><00:47:27.720><c> cutting</c><00:47:28.020><c> up</c>

00:47:28.130 --> 00:47:28.140 align:start position:0%
negative number that you're cutting up
 

00:47:28.140 --> 00:47:30.589 align:start position:0%
negative number that you're cutting up
and<00:47:28.349><c> if</c><00:47:29.069><c> we</c><00:47:29.190><c> print</c><00:47:29.369><c> printf</c><00:47:29.819><c> it</c><00:47:29.970><c> we</c><00:47:30.180><c> see</c><00:47:30.390><c> that</c>

00:47:30.589 --> 00:47:30.599 align:start position:0%
and if we print printf it we see that
 

00:47:30.599 --> 00:47:38.710 align:start position:0%
and if we print printf it we see that
it's<00:47:31.109><c> cut</c><00:47:31.380><c> up</c><00:47:31.619><c> in</c><00:47:31.770><c> the</c><00:47:31.859><c> two</c><00:47:32.010><c> halves</c><00:47:32.250><c> correctly</c>

00:47:38.710 --> 00:47:38.720 align:start position:0%
 
 

00:47:38.720 --> 00:47:40.970 align:start position:0%
 
so<00:47:39.720><c> what</c><00:47:39.900><c> kind</c><00:47:40.079><c> of</c><00:47:40.170><c> assistance</c><00:47:40.290><c> do</c><00:47:40.859><c> we</c>

00:47:40.970 --> 00:47:40.980 align:start position:0%
so what kind of assistance do we
 

00:47:40.980 --> 00:47:43.069 align:start position:0%
so what kind of assistance do we
actually<00:47:41.130><c> give</c><00:47:41.520><c> you</c><00:47:41.700><c> to</c><00:47:41.910><c> write</c><00:47:42.420><c> compatible</c>

00:47:43.069 --> 00:47:43.079 align:start position:0%
actually give you to write compatible
 

00:47:43.079 --> 00:47:45.200 align:start position:0%
actually give you to write compatible
code<00:47:43.290><c> ok</c><00:47:44.130><c> so</c><00:47:44.520><c> we</c><00:47:44.640><c> have</c><00:47:44.670><c> all</c><00:47:44.849><c> these</c><00:47:44.970><c> problems</c>

00:47:45.200 --> 00:47:45.210 align:start position:0%
code ok so we have all these problems
 

00:47:45.210 --> 00:47:46.670 align:start position:0%
code ok so we have all these problems
all<00:47:45.450><c> these</c><00:47:45.599><c> different</c><00:47:45.780><c> ways</c><00:47:46.049><c> to</c><00:47:46.079><c> lose</c><00:47:46.440><c> you</c>

00:47:46.670 --> 00:47:46.680 align:start position:0%
all these different ways to lose you
 

00:47:46.680 --> 00:47:50.450 align:start position:0%
all these different ways to lose you
know<00:47:46.770><c> what</c><00:47:46.799><c> do</c><00:47:47.099><c> you</c><00:47:47.190><c> do</c><00:47:47.900><c> so</c><00:47:48.900><c> at</c><00:47:49.230><c> the</c><00:47:49.890><c> at</c><00:47:50.430><c> the</c>

00:47:50.450 --> 00:47:50.460 align:start position:0%
know what do you do so at the at the
 

00:47:50.460 --> 00:47:52.460 align:start position:0%
know what do you do so at the at the
language<00:47:50.760><c> level</c><00:47:51.180><c> would</c><00:47:51.839><c> give</c><00:47:52.049><c> you</c><00:47:52.200><c> some</c>

00:47:52.460 --> 00:47:52.470 align:start position:0%
language level would give you some
 

00:47:52.470 --> 00:47:54.589 align:start position:0%
language level would give you some
standard<00:47:52.950><c> types</c><00:47:53.250><c> and</c><00:47:53.520><c> macros</c><00:47:54.000><c> somebody's</c>

00:47:54.589 --> 00:47:54.599 align:start position:0%
standard types and macros somebody's
 

00:47:54.599 --> 00:47:56.000 align:start position:0%
standard types and macros somebody's
have<00:47:54.690><c> been</c><00:47:54.809><c> around</c><00:47:54.990><c> for</c><00:47:55.260><c> a</c><00:47:55.290><c> long</c><00:47:55.410><c> time</c><00:47:55.470><c> we</c><00:47:55.890><c> have</c>

00:47:56.000 --> 00:47:56.010 align:start position:0%
have been around for a long time we have
 

00:47:56.010 --> 00:48:00.680 align:start position:0%
have been around for a long time we have
size<00:47:56.309><c> t</c><00:47:56.700><c> we</c><00:47:57.450><c> have</c><00:47:57.480><c> in</c><00:47:57.900><c> PTR</c><00:47:58.859><c> key</c><00:47:59.160><c> which</c><00:47:59.490><c> is</c><00:47:59.690><c> an</c>

00:48:00.680 --> 00:48:00.690 align:start position:0%
size t we have in PTR key which is an
 

00:48:00.690 --> 00:48:02.900 align:start position:0%
size t we have in PTR key which is an
integer<00:48:01.020><c> type</c><00:48:01.650><c> that</c><00:48:02.160><c> is</c><00:48:02.280><c> large</c><00:48:02.549><c> enough</c><00:48:02.640><c> to</c>

00:48:02.900 --> 00:48:02.910 align:start position:0%
integer type that is large enough to
 

00:48:02.910 --> 00:48:05.180 align:start position:0%
integer type that is large enough to
hold<00:48:03.119><c> a</c><00:48:03.270><c> pointer</c><00:48:03.690><c> and</c><00:48:03.900><c> that'll</c><00:48:04.799><c> have</c><00:48:04.980><c> the</c>

00:48:05.180 --> 00:48:05.190 align:start position:0%
hold a pointer and that'll have the
 

00:48:05.190 --> 00:48:07.670 align:start position:0%
hold a pointer and that'll have the
correct<00:48:05.490><c> type</c><00:48:05.790><c> whether</c><00:48:06.150><c> you're</c><00:48:06.390><c> doing</c><00:48:06.720><c> either</c>

00:48:07.670 --> 00:48:07.680 align:start position:0%
correct type whether you're doing either
 

00:48:07.680 --> 00:48:11.089 align:start position:0%
correct type whether you're doing either
32<00:48:08.220><c> or</c><00:48:08.250><c> 64-bit</c><00:48:09.000><c> programming</c><00:48:09.690><c> we</c><00:48:10.380><c> have</c><00:48:10.530><c> you</c><00:48:10.710><c> NP</c>

00:48:11.089 --> 00:48:11.099 align:start position:0%
32 or 64-bit programming we have you NP
 

00:48:11.099 --> 00:48:15.609 align:start position:0%
32 or 64-bit programming we have you NP
t<00:48:11.250><c> RT</c><00:48:12.170><c> corresponding</c><00:48:13.170><c> type</c><00:48:13.799><c> for</c><00:48:14.160><c> unsigned</c>

00:48:15.609 --> 00:48:15.619 align:start position:0%
t RT corresponding type for unsigned
 

00:48:15.619 --> 00:48:19.069 align:start position:0%
t RT corresponding type for unsigned
there's<00:48:16.619><c> also</c><00:48:16.829><c> an</c><00:48:17.099><c> in</c><00:48:17.250><c> 32</c><00:48:17.790><c> T</c><00:48:18.000><c> and</c><00:48:18.210><c> n</c><00:48:18.420><c> 60</c><00:48:18.839><c> 40</c>

00:48:19.069 --> 00:48:19.079 align:start position:0%
there's also an in 32 T and n 60 40
 

00:48:19.079 --> 00:48:23.180 align:start position:0%
there's also an in 32 T and n 60 40
types<00:48:19.559><c> that</c><00:48:20.069><c> you</c><00:48:20.099><c> can</c><00:48:20.369><c> use</c><00:48:20.579><c> it</c><00:48:21.650><c> for</c><00:48:22.650><c> the</c><00:48:22.890><c> UNIX</c>

00:48:23.180 --> 00:48:23.190 align:start position:0%
types that you can use it for the UNIX
 

00:48:23.190 --> 00:48:25.190 align:start position:0%
types that you can use it for the UNIX
side<00:48:23.400><c> of</c><00:48:23.579><c> the</c><00:48:24.059><c> world</c><00:48:24.210><c> there's</c><00:48:24.900><c> additional</c>

00:48:25.190 --> 00:48:25.200 align:start position:0%
side of the world there's additional
 

00:48:25.200 --> 00:48:27.410 align:start position:0%
side of the world there's additional
types<00:48:25.589><c> that</c><00:48:25.799><c> are</c><00:48:25.829><c> specific</c><00:48:26.490><c> to</c><00:48:26.520><c> unix</c><00:48:27.150><c> are</c><00:48:27.270><c> not</c>

00:48:27.410 --> 00:48:27.420 align:start position:0%
types that are specific to unix are not
 

00:48:27.420 --> 00:48:29.839 align:start position:0%
types that are specific to unix are not
a<00:48:27.450><c> standard</c><00:48:27.990><c> C</c><00:48:28.260><c> type</c><00:48:28.500><c> we</c><00:48:29.339><c> have</c><00:48:29.490><c> things</c><00:48:29.670><c> like</c>

00:48:29.839 --> 00:48:29.849 align:start position:0%
a standard C type we have things like
 

00:48:29.849 --> 00:48:32.030 align:start position:0%
a standard C type we have things like
see<00:48:30.210><c> a</c><00:48:30.240><c> dirty</c><00:48:30.720><c> which</c><00:48:31.020><c> is</c><00:48:31.200><c> the</c><00:48:31.319><c> size</c><00:48:31.530><c> of</c><00:48:31.680><c> a</c><00:48:31.799><c> core</c>

00:48:32.030 --> 00:48:32.040 align:start position:0%
see a dirty which is the size of a core
 

00:48:32.040 --> 00:48:35.359 align:start position:0%
see a dirty which is the size of a core
adder<00:48:32.309><c> which</c><00:48:33.150><c> is</c><00:48:33.329><c> just</c><00:48:33.599><c> a</c><00:48:33.780><c> euphemism</c><00:48:34.619><c> for</c><00:48:35.069><c> a</c>

00:48:35.359 --> 00:48:35.369 align:start position:0%
adder which is just a euphemism for a
 

00:48:35.369 --> 00:48:37.520 align:start position:0%
adder which is just a euphemism for a
pointer<00:48:35.790><c> into</c><00:48:35.970><c> main</c><00:48:36.240><c> memory</c><00:48:36.270><c> so</c><00:48:37.260><c> that's</c><00:48:37.410><c> going</c>

00:48:37.520 --> 00:48:37.530 align:start position:0%
pointer into main memory so that's going
 

00:48:37.530 --> 00:48:39.829 align:start position:0%
pointer into main memory so that's going
to<00:48:37.589><c> be</c><00:48:37.680><c> a</c><00:48:37.740><c> 64-bit</c><00:48:38.520><c> type</c><00:48:38.700><c> in</c><00:48:38.910><c> the</c><00:48:38.970><c> 64-bit</c><00:48:39.660><c> world</c>

00:48:39.829 --> 00:48:39.839 align:start position:0%
to be a 64-bit type in the 64-bit world
 

00:48:39.839 --> 00:48:43.609 align:start position:0%
to be a 64-bit type in the 64-bit world
so<00:48:40.799><c> many</c><00:48:41.010><c> process</c><00:48:41.490><c> IDs</c><00:48:41.910><c> off</c><00:48:42.660><c> t</c><00:48:43.049><c> is</c><00:48:43.230><c> for</c><00:48:43.440><c> file</c>

00:48:43.609 --> 00:48:43.619 align:start position:0%
so many process IDs off t is for file
 

00:48:43.619 --> 00:48:46.670 align:start position:0%
so many process IDs off t is for file
offsets<00:48:44.190><c> and</c><00:48:44.309><c> so</c><00:48:44.940><c> forth</c><00:48:45.210><c> there's</c><00:48:45.750><c> a</c><00:48:45.930><c> if</c><00:48:46.589><c> you</c>

00:48:46.670 --> 00:48:46.680 align:start position:0%
offsets and so forth there's a if you
 

00:48:46.680 --> 00:48:48.230 align:start position:0%
offsets and so forth there's a if you
look<00:48:46.859><c> in</c><00:48:46.980><c> the</c><00:48:47.010><c> user</c><00:48:47.430><c> include</c><00:48:47.849><c> you'll</c><00:48:48.089><c> see</c>

00:48:48.230 --> 00:48:48.240 align:start position:0%
look in the user include you'll see
 

00:48:48.240 --> 00:48:50.569 align:start position:0%
look in the user include you'll see
there's<00:48:48.390><c> quite</c><00:48:48.450><c> a</c><00:48:48.630><c> few</c><00:48:48.720><c> of</c><00:48:49.410><c> these</c><00:48:49.650><c> headers</c><00:48:49.920><c> in</c>

00:48:50.569 --> 00:48:50.579 align:start position:0%
there's quite a few of these headers in
 

00:48:50.579 --> 00:48:53.240 align:start position:0%
there's quite a few of these headers in
fact<00:48:50.880><c> if</c><00:48:51.030><c> you</c><00:48:51.089><c> compare</c><00:48:51.720><c> the</c><00:48:52.440><c> Panther</c><00:48:52.920><c> headers</c>

00:48:53.240 --> 00:48:53.250 align:start position:0%
fact if you compare the Panther headers
 

00:48:53.250 --> 00:48:55.160 align:start position:0%
fact if you compare the Panther headers
the<00:48:53.460><c> Tiger</c><00:48:53.760><c> hitters</c><00:48:53.970><c> you'll</c><00:48:54.240><c> see</c><00:48:54.450><c> a</c><00:48:54.660><c> whole</c>

00:48:55.160 --> 00:48:55.170 align:start position:0%
the Tiger hitters you'll see a whole
 

00:48:55.170 --> 00:48:57.500 align:start position:0%
the Tiger hitters you'll see a whole
bunch<00:48:55.200><c> of</c><00:48:55.500><c> changes</c><00:48:56.000><c> those</c><00:48:57.000><c> places</c><00:48:57.270><c> where</c>

00:48:57.500 --> 00:48:57.510 align:start position:0%
bunch of changes those places where
 

00:48:57.510 --> 00:49:00.710 align:start position:0%
bunch of changes those places where
pants<00:48:57.869><c> are</c><00:48:57.960><c> only</c><00:48:58.079><c> had</c><00:48:58.290><c> 32</c><00:48:58.799><c> bit</c><00:48:58.950><c> headers</c><00:48:59.220><c> so</c><00:48:59.720><c> the</c>

00:49:00.710 --> 00:49:00.720 align:start position:0%
pants are only had 32 bit headers so the
 

00:49:00.720 --> 00:49:02.990 align:start position:0%
pants are only had 32 bit headers so the
the<00:49:01.440><c> obvious</c><00:49:01.770><c> implication</c><00:49:02.430><c> is</c><00:49:02.549><c> beware</c><00:49:02.970><c> of</c>

00:49:02.990 --> 00:49:03.000 align:start position:0%
the obvious implication is beware of
 

00:49:03.000 --> 00:49:05.180 align:start position:0%
the obvious implication is beware of
compiling<00:49:03.510><c> of</c><00:49:03.720><c> stuff</c><00:49:03.930><c> on</c><00:49:04.109><c> Panther</c><00:49:04.559><c> because</c>

00:49:05.180 --> 00:49:05.190 align:start position:0%
compiling of stuff on Panther because
 

00:49:05.190 --> 00:49:09.380 align:start position:0%
compiling of stuff on Panther because
if<00:49:05.369><c> you</c><00:49:06.030><c> can</c><00:49:06.240><c> you</c><00:49:06.599><c> can</c><00:49:08.030><c> Panther</c><00:49:09.030><c> didn't</c><00:49:09.270><c> give</c>

00:49:09.380 --> 00:49:09.390 align:start position:0%
if you can you can Panther didn't give
 

00:49:09.390 --> 00:49:10.730 align:start position:0%
if you can you can Panther didn't give
you<00:49:09.510><c> any</c><00:49:09.660><c> complaints</c><00:49:10.200><c> the</c><00:49:10.319><c> headers</c><00:49:10.589><c> are</c>

00:49:10.730 --> 00:49:10.740 align:start position:0%
you any complaints the headers are
 

00:49:10.740 --> 00:49:12.230 align:start position:0%
you any complaints the headers are
different<00:49:11.190><c> on</c><00:49:11.280><c> tiger</c><00:49:11.700><c> and</c><00:49:11.730><c> so</c><00:49:11.910><c> you</c><00:49:11.970><c> may</c><00:49:12.180><c> see</c>

00:49:12.230 --> 00:49:12.240 align:start position:0%
different on tiger and so you may see
 

00:49:12.240 --> 00:49:14.540 align:start position:0%
different on tiger and so you may see
things<00:49:13.170><c> entire</c><00:49:13.589><c> that</c><00:49:13.859><c> you</c><00:49:13.980><c> didn't</c><00:49:14.190><c> get</c><00:49:14.280><c> out</c><00:49:14.430><c> of</c>

00:49:14.540 --> 00:49:14.550 align:start position:0%
things entire that you didn't get out of
 

00:49:14.550 --> 00:49:17.450 align:start position:0%
things entire that you didn't get out of
Panther<00:49:15.740><c> another</c><00:49:16.740><c> thing</c><00:49:16.980><c> that's</c><00:49:17.130><c> actually</c>

00:49:17.450 --> 00:49:17.460 align:start position:0%
Panther another thing that's actually
 

00:49:17.460 --> 00:49:20.210 align:start position:0%
Panther another thing that's actually
very<00:49:17.490><c> common</c><00:49:18.030><c> for</c><00:49:18.180><c> programs</c><00:49:18.660><c> is</c><00:49:18.930><c> to</c><00:49:19.800><c> that</c>

00:49:20.210 --> 00:49:20.220 align:start position:0%
very common for programs is to that
 

00:49:20.220 --> 00:49:22.220 align:start position:0%
very common for programs is to that
programs<00:49:20.640><c> have</c><00:49:20.819><c> been</c><00:49:20.940><c> ported</c><00:49:21.300><c> a</c><00:49:21.390><c> 32-bit</c><00:49:22.020><c> say</c>

00:49:22.220 --> 00:49:22.230 align:start position:0%
programs have been ported a 32-bit say
 

00:49:22.230 --> 00:49:24.349 align:start position:0%
programs have been ported a 32-bit say
they<00:49:22.349><c> were</c><00:49:22.470><c> on</c><00:49:22.619><c> UNIX</c><00:49:22.980><c> systems</c><00:49:23.310><c> already</c><00:49:23.520><c> they</c>

00:49:24.349 --> 00:49:24.359 align:start position:0%
they were on UNIX systems already they
 

00:49:24.359 --> 00:49:26.720 align:start position:0%
they were on UNIX systems already they
will<00:49:24.540><c> have</c><00:49:24.720><c> their</c><00:49:24.900><c> own</c><00:49:24.960><c> local</c><00:49:25.950><c> definitions</c>

00:49:26.720 --> 00:49:26.730 align:start position:0%
will have their own local definitions
 

00:49:26.730 --> 00:49:29.660 align:start position:0%
will have their own local definitions
for<00:49:26.940><c> types</c><00:49:27.210><c> and</c><00:49:27.950><c> there's</c><00:49:28.950><c> you</c><00:49:29.369><c> know</c><00:49:29.430><c> any</c>

00:49:29.660 --> 00:49:29.670 align:start position:0%
for types and there's you know any
 

00:49:29.670 --> 00:49:31.040 align:start position:0%
for types and there's you know any
number<00:49:30.030><c> of</c><00:49:30.060><c> different</c><00:49:30.510><c> conventions</c><00:49:30.780><c> that</c>

00:49:31.040 --> 00:49:31.050 align:start position:0%
number of different conventions that
 

00:49:31.050 --> 00:49:32.569 align:start position:0%
number of different conventions that
people<00:49:31.349><c> use</c><00:49:31.530><c> I'll</c><00:49:31.740><c> have</c><00:49:31.859><c> macros</c><00:49:32.280><c> all</c>

00:49:32.569 --> 00:49:32.579 align:start position:0%
people use I'll have macros all
 

00:49:32.579 --> 00:49:35.170 align:start position:0%
people use I'll have macros all
uppercase<00:49:33.180><c> they'll</c><00:49:33.599><c> have</c><00:49:33.780><c> funny</c><00:49:34.079><c> names</c><00:49:34.170><c> for</c>

00:49:35.170 --> 00:49:35.180 align:start position:0%
uppercase they'll have funny names for
 

00:49:35.180 --> 00:49:37.730 align:start position:0%
uppercase they'll have funny names for
you'll<00:49:36.180><c> see</c><00:49:36.390><c> all</c><00:49:36.690><c> kinds</c><00:49:37.200><c> of</c><00:49:37.230><c> different</c><00:49:37.349><c> things</c>

00:49:37.730 --> 00:49:37.740 align:start position:0%
you'll see all kinds of different things
 

00:49:37.740 --> 00:49:40.250 align:start position:0%
you'll see all kinds of different things
out<00:49:37.920><c> there</c><00:49:38.180><c> when</c><00:49:39.180><c> one</c><00:49:39.510><c> source</c><00:49:39.780><c> i'll</c><00:49:40.020><c> recommend</c>

00:49:40.250 --> 00:49:40.260 align:start position:0%
out there when one source i'll recommend
 

00:49:40.260 --> 00:49:42.859 align:start position:0%
out there when one source i'll recommend
is<00:49:40.770><c> the</c><00:49:41.069><c> good</c><00:49:41.339><c> news</c><00:49:41.430><c> software</c><00:49:41.910><c> itself</c><00:49:42.180><c> you</c>

00:49:42.859 --> 00:49:42.869 align:start position:0%
is the good news software itself you
 

00:49:42.869 --> 00:49:44.210 align:start position:0%
is the good news software itself you
knew<00:49:42.990><c> has</c><00:49:43.140><c> been</c><00:49:43.290><c> ported</c><00:49:43.619><c> everywhere</c><00:49:44.010><c> in</c><00:49:44.130><c> the</c>

00:49:44.210 --> 00:49:44.220 align:start position:0%
knew has been ported everywhere in the
 

00:49:44.220 --> 00:49:46.250 align:start position:0%
knew has been ported everywhere in the
universe<00:49:44.430><c> has</c><00:49:44.880><c> been</c><00:49:45.000><c> ported</c><00:49:45.329><c> as</c><00:49:45.450><c> native</c><00:49:45.869><c> tools</c>

00:49:46.250 --> 00:49:46.260 align:start position:0%
universe has been ported as native tools
 

00:49:46.260 --> 00:49:48.349 align:start position:0%
universe has been ported as native tools
cross<00:49:46.859><c> compiler</c><00:49:47.400><c> tools</c><00:49:47.670><c> all</c><00:49:47.910><c> that</c><00:49:48.119><c> kind</c><00:49:48.300><c> of</c>

00:49:48.349 --> 00:49:48.359 align:start position:0%
cross compiler tools all that kind of
 

00:49:48.359 --> 00:49:51.109 align:start position:0%
cross compiler tools all that kind of
stuff<00:49:48.420><c> so</c><00:49:49.140><c> every</c><00:49:49.410><c> combination</c><00:49:49.859><c> of</c><00:49:50.220><c> 64</c><00:49:50.790><c> and</c><00:49:50.940><c> 32</c>

00:49:51.109 --> 00:49:51.119 align:start position:0%
stuff so every combination of 64 and 32
 

00:49:51.119 --> 00:49:53.540 align:start position:0%
stuff so every combination of 64 and 32
bits<00:49:51.599><c> you</c><00:49:51.750><c> can</c><00:49:51.780><c> think</c><00:49:52.050><c> of</c><00:49:52.230><c> as</c><00:49:52.380><c> actually</c><00:49:53.160><c> had</c><00:49:53.400><c> to</c>

00:49:53.540 --> 00:49:53.550 align:start position:0%
bits you can think of as actually had to
 

00:49:53.550 --> 00:49:55.309 align:start position:0%
bits you can think of as actually had to
have<00:49:53.640><c> been</c><00:49:53.670><c> handled</c><00:49:54.210><c> and</c><00:49:54.390><c> there</c><00:49:54.869><c> are</c><00:49:55.020><c> a</c><00:49:55.079><c> set</c><00:49:55.290><c> of</c>

00:49:55.309 --> 00:49:55.319 align:start position:0%
have been handled and there are a set of
 

00:49:55.319 --> 00:49:57.620 align:start position:0%
have been handled and there are a set of
definitions<00:49:55.560><c> in</c><00:49:56.160><c> there</c><00:49:56.369><c> that</c><00:49:56.640><c> that</c><00:49:57.300><c> have</c><00:49:57.480><c> been</c>

00:49:57.620 --> 00:49:57.630 align:start position:0%
definitions in there that that have been
 

00:49:57.630 --> 00:49:59.750 align:start position:0%
definitions in there that that have been
proven<00:49:58.170><c> over</c><00:49:58.440><c> time</c><00:49:58.619><c> to</c><00:49:59.099><c> work</c><00:49:59.250><c> well</c><00:49:59.460><c> for</c><00:49:59.640><c> this</c>

00:49:59.750 --> 00:49:59.760 align:start position:0%
proven over time to work well for this
 

00:49:59.760 --> 00:50:03.530 align:start position:0%
proven over time to work well for this
kind<00:50:00.000><c> of</c><00:50:00.060><c> thing</c><00:50:01.310><c> one</c><00:50:02.310><c> of</c><00:50:02.339><c> the</c><00:50:02.579><c> the</c><00:50:03.000><c> special</c>

00:50:03.530 --> 00:50:03.540 align:start position:0%
kind of thing one of the the special
 

00:50:03.540 --> 00:50:05.059 align:start position:0%
kind of thing one of the the special
things<00:50:03.750><c> has</c><00:50:03.930><c> come</c><00:50:04.200><c> up</c><00:50:04.349><c> and</c><00:50:04.530><c> several</c><00:50:04.800><c> people</c>

00:50:05.059 --> 00:50:05.069 align:start position:0%
things has come up and several people
 

00:50:05.069 --> 00:50:07.490 align:start position:0%
things has come up and several people
have<00:50:05.160><c> had</c><00:50:05.310><c> to</c><00:50:05.460><c> solve</c><00:50:05.730><c> this</c><00:50:05.970><c> is</c><00:50:06.200><c> what</c><00:50:07.200><c> to</c><00:50:07.349><c> do</c>

00:50:07.490 --> 00:50:07.500 align:start position:0%
have had to solve this is what to do
 

00:50:07.500 --> 00:50:09.680 align:start position:0%
have had to solve this is what to do
about<00:50:07.589><c> these</c><00:50:07.859><c> print</c><00:50:08.190><c> Jeff</c><00:50:08.369><c> directives</c><00:50:08.880><c> okay</c>

00:50:09.680 --> 00:50:09.690 align:start position:0%
about these print Jeff directives okay
 

00:50:09.690 --> 00:50:11.720 align:start position:0%
about these print Jeff directives okay
there<00:50:10.140><c> turns</c><00:50:10.440><c> out</c><00:50:10.619><c> there's</c><00:50:10.829><c> not</c><00:50:11.040><c> standard</c>

00:50:11.720 --> 00:50:11.730 align:start position:0%
there turns out there's not standard
 

00:50:11.730 --> 00:50:13.700 align:start position:0%
there turns out there's not standard
macros<00:50:12.150><c> for</c><00:50:12.180><c> these</c><00:50:12.630><c> also</c><00:50:12.930><c> it</c><00:50:13.050><c> seems</c><00:50:13.530><c> like</c><00:50:13.680><c> a</c>

00:50:13.700 --> 00:50:13.710 align:start position:0%
macros for these also it seems like a
 

00:50:13.710 --> 00:50:16.280 align:start position:0%
macros for these also it seems like a
really<00:50:13.920><c> good</c><00:50:14.130><c> idea</c><00:50:14.390><c> so</c><00:50:15.390><c> you'll</c><00:50:15.869><c> see</c><00:50:16.050><c> some</c>

00:50:16.280 --> 00:50:16.290 align:start position:0%
really good idea so you'll see some
 

00:50:16.290 --> 00:50:18.319 align:start position:0%
really good idea so you'll see some
programs<00:50:16.710><c> they'll</c><00:50:16.920><c> actually</c><00:50:17.099><c> define</c><00:50:17.640><c> macros</c>

00:50:18.319 --> 00:50:18.329 align:start position:0%
programs they'll actually define macros
 

00:50:18.329 --> 00:50:22.490 align:start position:0%
programs they'll actually define macros
for<00:50:18.740><c> the</c><00:50:19.740><c> printf</c><00:50:20.160><c> directives</c><00:50:21.170><c> so</c><00:50:22.170><c> I</c><00:50:22.200><c> have</c><00:50:22.380><c> an</c>

00:50:22.490 --> 00:50:22.500 align:start position:0%
for the printf directives so I have an
 

00:50:22.500 --> 00:50:25.250 align:start position:0%
for the printf directives so I have an
example<00:50:22.829><c> here</c><00:50:22.980><c> if</c><00:50:23.369><c> you</c><00:50:23.880><c> want</c><00:50:24.089><c> percent</c><00:50:24.540><c> lld</c><00:50:25.050><c> to</c>

00:50:25.250 --> 00:50:25.260 align:start position:0%
example here if you want percent lld to
 

00:50:25.260 --> 00:50:27.620 align:start position:0%
example here if you want percent lld to
do<00:50:25.410><c> the</c><00:50:25.530><c> right</c><00:50:25.680><c> thing</c><00:50:26.010><c> and</c><00:50:26.310><c> you</c><00:50:27.210><c> don't</c><00:50:27.359><c> want</c><00:50:27.510><c> to</c>

00:50:27.620 --> 00:50:27.630 align:start position:0%
do the right thing and you don't want to
 

00:50:27.630 --> 00:50:29.540 align:start position:0%
do the right thing and you don't want to
say<00:50:27.750><c> pass</c><00:50:28.020><c> an</c><00:50:28.230><c> integer</c><00:50:28.470><c> to</c><00:50:28.710><c> present</c><00:50:29.069><c> lld</c>

00:50:29.540 --> 00:50:29.550 align:start position:0%
say pass an integer to present lld
 

00:50:29.550 --> 00:50:32.000 align:start position:0%
say pass an integer to present lld
because<00:50:29.940><c> then</c><00:50:30.089><c> that</c><00:50:30.300><c> will</c><00:50:30.599><c> grab</c><00:50:30.900><c> the</c><00:50:31.589><c> four</c>

00:50:32.000 --> 00:50:32.010 align:start position:0%
because then that will grab the four
 

00:50:32.010 --> 00:50:34.160 align:start position:0%
because then that will grab the four
bytes<00:50:32.250><c> of</c><00:50:32.400><c> your</c><00:50:32.579><c> integer</c><00:50:33.000><c> and</c><00:50:33.210><c> the</c><00:50:33.720><c> four</c><00:50:33.930><c> bytes</c>

00:50:34.160 --> 00:50:34.170 align:start position:0%
bytes of your integer and the four bytes
 

00:50:34.170 --> 00:50:36.800 align:start position:0%
bytes of your integer and the four bytes
of<00:50:34.349><c> the</c><00:50:34.500><c> next</c><00:50:34.740><c> data</c><00:50:34.980><c> the</c><00:50:35.430><c> next</c><00:50:36.089><c> data</c><00:50:36.240><c> item</c><00:50:36.599><c> pass</c>

00:50:36.800 --> 00:50:36.810 align:start position:0%
of the next data the next data item pass
 

00:50:36.810 --> 00:50:40.609 align:start position:0%
of the next data the next data item pass
to<00:50:37.020><c> printf</c><00:50:38.240><c> we</c><00:50:39.240><c> wanted</c><00:50:39.599><c> to</c><00:50:39.630><c> to</c><00:50:40.170><c> encapsulate</c>

00:50:40.609 --> 00:50:40.619 align:start position:0%
to printf we wanted to to encapsulate
 

00:50:40.619 --> 00:50:43.790 align:start position:0%
to printf we wanted to to encapsulate
this<00:50:41.069><c> somehow</c><00:50:41.339><c> and</c><00:50:41.819><c> so</c><00:50:42.630><c> you</c><00:50:43.200><c> can</c><00:50:43.349><c> do</c><00:50:43.530><c> something</c>

00:50:43.790 --> 00:50:43.800 align:start position:0%
this somehow and so you can do something
 

00:50:43.800 --> 00:50:45.530 align:start position:0%
this somehow and so you can do something
with<00:50:43.950><c> that</c><00:50:44.099><c> amounts</c><00:50:44.579><c> to</c><00:50:44.579><c> using</c><00:50:45.119><c> string</c>

00:50:45.530 --> 00:50:45.540 align:start position:0%
with that amounts to using string
 

00:50:45.540 --> 00:50:47.630 align:start position:0%
with that amounts to using string
concatenation<00:50:45.829><c> which</c><00:50:46.829><c> is</c><00:50:46.950><c> the</c><00:50:47.010><c> capability</c><00:50:47.609><c> of</c>

00:50:47.630 --> 00:50:47.640 align:start position:0%
concatenation which is the capability of
 

00:50:47.640 --> 00:50:49.880 align:start position:0%
concatenation which is the capability of
C<00:50:47.940><c> and</c><00:50:48.270><c> you</c><00:50:48.810><c> have</c><00:50:48.930><c> part</c><00:50:49.170><c> of</c><00:50:49.290><c> your</c><00:50:49.380><c> string</c><00:50:49.650><c> you</c>

00:50:49.880 --> 00:50:49.890 align:start position:0%
C and you have part of your string you
 

00:50:49.890 --> 00:50:52.400 align:start position:0%
C and you have part of your string you
have<00:50:50.069><c> the</c><00:50:50.250><c> macro</c><00:50:50.730><c> with</c><00:50:51.480><c> the</c><00:50:51.660><c> directive</c><00:50:52.140><c> in</c><00:50:52.260><c> it</c>

00:50:52.400 --> 00:50:52.410 align:start position:0%
have the macro with the directive in it
 

00:50:52.410 --> 00:50:54.349 align:start position:0%
have the macro with the directive in it
and<00:50:52.560><c> then</c><00:50:53.339><c> you</c><00:50:53.430><c> have</c><00:50:53.550><c> the</c><00:50:53.670><c> rest</c><00:50:53.790><c> of</c><00:50:54.000><c> the</c><00:50:54.060><c> string</c>

00:50:54.349 --> 00:50:54.359 align:start position:0%
and then you have the rest of the string
 

00:50:54.359 --> 00:50:57.140 align:start position:0%
and then you have the rest of the string
and<00:50:55.040><c> that's</c><00:50:56.040><c> why</c><00:50:56.190><c> you</c><00:50:56.250><c> can</c><00:50:56.400><c> get</c><00:50:56.520><c> something</c><00:50:56.760><c> so</c>

00:50:57.140 --> 00:50:57.150 align:start position:0%
and that's why you can get something so
 

00:50:57.150 --> 00:50:59.270 align:start position:0%
and that's why you can get something so
that<00:50:57.420><c> the</c><00:50:57.750><c> compiler</c><00:50:58.079><c> won't</c><00:50:58.500><c> give</c><00:50:59.130><c> you</c>

00:50:59.270 --> 00:50:59.280 align:start position:0%
that the compiler won't give you
 

00:50:59.280 --> 00:51:02.150 align:start position:0%
that the compiler won't give you
warnings<00:50:59.790><c> about</c><00:51:00.180><c> the</c><00:51:00.410><c> printf</c><00:51:01.410><c> directives</c><00:51:01.950><c> not</c>

00:51:02.150 --> 00:51:02.160 align:start position:0%
warnings about the printf directives not
 

00:51:02.160 --> 00:51:08.330 align:start position:0%
warnings about the printf directives not
matching<00:51:02.670><c> up</c><00:51:02.760><c> with</c><00:51:02.819><c> the</c><00:51:03.030><c> data</c><00:51:03.180><c> types</c>

00:51:08.330 --> 00:51:08.340 align:start position:0%
 
 

00:51:08.340 --> 00:51:13.980 align:start position:0%
 
go<00:51:09.840><c> so</c><00:51:10.840><c> further</c><00:51:11.350><c> API</c><00:51:11.830><c> changes</c><00:51:12.340><c> we</c><00:51:12.490><c> have</c><00:51:12.990><c> we</c>

00:51:13.980 --> 00:51:13.990 align:start position:0%
go so further API changes we have we
 

00:51:13.990 --> 00:51:18.990 align:start position:0%
go so further API changes we have we
give<00:51:14.200><c> you</c><00:51:14.410><c> a</c><00:51:15.000><c> LP</c><00:51:16.000><c> 64</c><00:51:16.770><c> macro</c><00:51:18.000><c> double</c>

00:51:18.990 --> 00:51:19.000 align:start position:0%
give you a LP 64 macro double
 

00:51:19.000 --> 00:51:20.100 align:start position:0%
give you a LP 64 macro double
underscores<00:51:19.450><c> on</c><00:51:19.600><c> the</c><00:51:19.720><c> front</c><00:51:19.960><c> and</c><00:51:20.050><c> back</c>

00:51:20.100 --> 00:51:20.110 align:start position:0%
underscores on the front and back
 

00:51:20.110 --> 00:51:21.990 align:start position:0%
underscores on the front and back
because<00:51:20.470><c> it's</c><00:51:20.620><c> a</c><00:51:20.800><c> something</c><00:51:21.340><c> predefined</c><00:51:21.850><c> by</c>

00:51:21.990 --> 00:51:22.000 align:start position:0%
because it's a something predefined by
 

00:51:22.000 --> 00:51:25.200 align:start position:0%
because it's a something predefined by
the<00:51:22.060><c> compiler</c><00:51:22.500><c> and</c><00:51:23.500><c> LP</c><00:51:23.800><c> 64</c><00:51:24.460><c> the</c><00:51:24.700><c> value</c><00:51:25.030><c> of</c><00:51:25.120><c> it</c>

00:51:25.200 --> 00:51:25.210 align:start position:0%
the compiler and LP 64 the value of it
 

00:51:25.210 --> 00:51:30.240 align:start position:0%
the compiler and LP 64 the value of it
is<00:51:25.330><c> one</c><00:51:25.600><c> for</c><00:51:27.570><c> 64-bit</c><00:51:28.570><c> compilation</c><00:51:29.230><c> as</c><00:51:29.440><c> zero</c>

00:51:30.240 --> 00:51:30.250 align:start position:0%
is one for 64-bit compilation as zero
 

00:51:30.250 --> 00:51:34.710 align:start position:0%
is one for 64-bit compilation as zero
for<00:51:30.640><c> 32-bit</c><00:51:31.330><c> compilation</c><00:51:33.090><c> we</c><00:51:34.090><c> also</c><00:51:34.270><c> give</c><00:51:34.540><c> you</c>

00:51:34.710 --> 00:51:34.720 align:start position:0%
for 32-bit compilation we also give you
 

00:51:34.720 --> 00:51:39.540 align:start position:0%
for 32-bit compilation we also give you
a<00:51:35.130><c> ppc64</c><00:51:36.330><c> that's</c><00:51:37.330><c> defined</c><00:51:37.960><c> in</c><00:51:38.430><c> when</c><00:51:39.430><c> you're</c>

00:51:39.540 --> 00:51:39.550 align:start position:0%
a ppc64 that's defined in when you're
 

00:51:39.550 --> 00:51:42.660 align:start position:0%
a ppc64 that's defined in when you're
compiling<00:51:39.850><c> for</c><00:51:40.210><c> 64-bit</c><00:51:40.900><c> PPC</c><00:51:41.470><c> and</c><00:51:41.710><c> it's</c><00:51:42.400><c> not</c>

00:51:42.660 --> 00:51:42.670 align:start position:0%
compiling for 64-bit PPC and it's not
 

00:51:42.670 --> 00:51:45.960 align:start position:0%
compiling for 64-bit PPC and it's not
defined<00:51:43.150><c> for</c><00:51:43.570><c> 32-bit</c><00:51:44.260><c> PPC</c><00:51:44.770><c> and</c><00:51:45.010><c> we</c><00:51:45.700><c> there</c><00:51:45.910><c> was</c>

00:51:45.960 --> 00:51:45.970 align:start position:0%
defined for 32-bit PPC and we there was
 

00:51:45.970 --> 00:51:48.960 align:start position:0%
defined for 32-bit PPC and we there was
the<00:51:46.120><c> existing</c><00:51:46.600><c> macro</c><00:51:47.020><c> double</c><00:51:47.410><c> underscore</c><00:51:47.970><c> EPC</c>

00:51:48.960 --> 00:51:48.970 align:start position:0%
the existing macro double underscore EPC
 

00:51:48.970 --> 00:51:52.470 align:start position:0%
the existing macro double underscore EPC
is<00:51:49.210><c> not</c><00:51:49.960><c> defined</c><00:51:50.410><c> when</c><00:51:51.400><c> you're</c><00:51:51.520><c> doing</c><00:51:51.730><c> 64-bit</c>

00:51:52.470 --> 00:51:52.480 align:start position:0%
is not defined when you're doing 64-bit
 

00:51:52.480 --> 00:51:55.440 align:start position:0%
is not defined when you're doing 64-bit
PowerPC<00:51:53.110><c> compilation</c><00:51:53.740><c> and</c><00:51:54.120><c> we</c><00:51:55.120><c> had</c><00:51:55.270><c> a</c><00:51:55.300><c> little</c>

00:51:55.440 --> 00:51:55.450 align:start position:0%
PowerPC compilation and we had a little
 

00:51:55.450 --> 00:51:58.530 align:start position:0%
PowerPC compilation and we had a little
debate<00:51:55.570><c> on</c><00:51:55.870><c> that</c><00:51:56.050><c> and</c><00:51:56.350><c> we</c><00:51:57.040><c> looked</c><00:51:57.250><c> at</c><00:51:57.340><c> the</c><00:51:57.540><c> uses</c>

00:51:58.530 --> 00:51:58.540 align:start position:0%
debate on that and we looked at the uses
 

00:51:58.540 --> 00:52:00.360 align:start position:0%
debate on that and we looked at the uses
in<00:51:58.660><c> practice</c><00:51:59.200><c> and</c><00:51:59.380><c> they</c><00:51:59.860><c> were</c><00:51:59.920><c> pretty</c><00:52:00.160><c> much</c>

00:52:00.360 --> 00:52:00.370 align:start position:0%
in practice and they were pretty much
 

00:52:00.370 --> 00:52:02.520 align:start position:0%
in practice and they were pretty much
either<00:52:00.640><c> or</c><00:52:00.940><c> theirs</c><00:52:01.360><c> I</c><00:52:01.420><c> either</c><00:52:01.660><c> you're</c><00:52:02.230><c> doing</c>

00:52:02.520 --> 00:52:02.530 align:start position:0%
either or theirs I either you're doing
 

00:52:02.530 --> 00:52:05.250 align:start position:0%
either or theirs I either you're doing
32-bit<00:52:03.130><c> or</c><00:52:03.310><c> you're</c><00:52:03.520><c> doing</c><00:52:03.760><c> 64-bit</c><00:52:04.540><c> and</c><00:52:04.780><c> if</c><00:52:05.170><c> you</c>

00:52:05.250 --> 00:52:05.260 align:start position:0%
32-bit or you're doing 64-bit and if you
 

00:52:05.260 --> 00:52:08.010 align:start position:0%
32-bit or you're doing 64-bit and if you
turned<00:52:05.470><c> on</c><00:52:05.590><c> PPC</c><00:52:06.160><c> and</c><00:52:06.310><c> ppc64</c><00:52:07.120><c> at</c><00:52:07.510><c> the</c><00:52:07.600><c> same</c><00:52:07.780><c> time</c>

00:52:08.010 --> 00:52:08.020 align:start position:0%
turned on PPC and ppc64 at the same time
 

00:52:08.020 --> 00:52:10.260 align:start position:0%
turned on PPC and ppc64 at the same time
it<00:52:08.200><c> would</c><00:52:08.320><c> confuse</c><00:52:08.500><c> a</c><00:52:08.740><c> lot</c><00:52:08.980><c> of</c><00:52:09.100><c> headers</c><00:52:09.370><c> so</c><00:52:09.580><c> we</c>

00:52:10.260 --> 00:52:10.270 align:start position:0%
it would confuse a lot of headers so we
 

00:52:10.270 --> 00:52:12.650 align:start position:0%
it would confuse a lot of headers so we
decided<00:52:10.600><c> to</c><00:52:10.750><c> make</c><00:52:10.900><c> the</c><00:52:11.020><c> mutual</c><00:52:11.350><c> exclusive</c><00:52:11.920><c> in</c>

00:52:12.650 --> 00:52:12.660 align:start position:0%
decided to make the mutual exclusive in
 

00:52:12.660 --> 00:52:15.530 align:start position:0%
decided to make the mutual exclusive in
practice<00:52:13.660><c> you</c><00:52:14.410><c> should</c><00:52:14.440><c> almost</c><00:52:14.770><c> never</c><00:52:15.160><c> use</c>

00:52:15.530 --> 00:52:15.540 align:start position:0%
practice you should almost never use
 

00:52:15.540 --> 00:52:18.630 align:start position:0%
practice you should almost never use
ppc64<00:52:16.540><c> directly</c><00:52:17.470><c> because</c><00:52:18.040><c> that's</c><00:52:18.370><c> going</c><00:52:18.550><c> to</c>

00:52:18.630 --> 00:52:18.640 align:start position:0%
ppc64 directly because that's going to
 

00:52:18.640 --> 00:52:20.430 align:start position:0%
ppc64 directly because that's going to
wire<00:52:18.880><c> in</c><00:52:19.120><c> an</c><00:52:19.240><c> architecture</c><00:52:19.840><c> dependency</c>

00:52:20.430 --> 00:52:20.440 align:start position:0%
wire in an architecture dependency
 

00:52:20.440 --> 00:52:22.380 align:start position:0%
wire in an architecture dependency
unless<00:52:21.190><c> you're</c><00:52:21.400><c> actually</c><00:52:21.520><c> literally</c><00:52:22.000><c> writing</c>

00:52:22.380 --> 00:52:22.390 align:start position:0%
unless you're actually literally writing
 

00:52:22.390 --> 00:52:25.140 align:start position:0%
unless you're actually literally writing
PowerPC<00:52:23.200><c> code</c><00:52:23.500><c> slipped</c><00:52:24.430><c> into</c><00:52:24.610><c> the</c><00:52:24.730><c> middle</c><00:52:25.090><c> of</c>

00:52:25.140 --> 00:52:25.150 align:start position:0%
PowerPC code slipped into the middle of
 

00:52:25.150 --> 00:52:26.640 align:start position:0%
PowerPC code slipped into the middle of
C<00:52:25.360><c> code</c><00:52:25.570><c> or</c><00:52:25.750><c> something</c><00:52:25.870><c> like</c><00:52:26.140><c> that</c><00:52:26.200><c> you</c>

00:52:26.640 --> 00:52:26.650 align:start position:0%
C code or something like that you
 

00:52:26.650 --> 00:52:29.520 align:start position:0%
C code or something like that you
probably<00:52:27.130><c> want</c><00:52:27.580><c> to</c><00:52:27.640><c> use</c><00:52:27.700><c> LP</c><00:52:28.180><c> 64</c><00:52:28.810><c> instead</c><00:52:29.170><c> or</c>

00:52:29.520 --> 00:52:29.530 align:start position:0%
probably want to use LP 64 instead or
 

00:52:29.530 --> 00:52:31.530 align:start position:0%
probably want to use LP 64 instead or
else<00:52:29.860><c> if</c><00:52:30.010><c> at</c><00:52:30.160><c> all</c><00:52:30.220><c> possible</c><00:52:30.520><c> right</c><00:52:30.910><c> to</c><00:52:31.060><c> code</c><00:52:31.300><c> to</c>

00:52:31.530 --> 00:52:31.540 align:start position:0%
else if at all possible right to code to
 

00:52:31.540 --> 00:52:38.250 align:start position:0%
else if at all possible right to code to
be<00:52:31.690><c> the</c><00:52:32.400><c> 32</c><00:52:33.400><c> 64</c><00:52:34.030><c> independent</c><00:52:37.110><c> one</c><00:52:38.110><c> of</c><00:52:38.170><c> the</c>

00:52:38.250 --> 00:52:38.260 align:start position:0%
be the 32 64 independent one of the
 

00:52:38.260 --> 00:52:39.780 align:start position:0%
be the 32 64 independent one of the
things<00:52:38.350><c> you'll</c><00:52:38.560><c> see</c><00:52:38.800><c> is</c><00:52:39.010><c> again</c><00:52:39.460><c> if</c><00:52:39.580><c> you</c><00:52:39.640><c> look</c>

00:52:39.780 --> 00:52:39.790 align:start position:0%
things you'll see is again if you look
 

00:52:39.790 --> 00:52:41.610 align:start position:0%
things you'll see is again if you look
at<00:52:39.910><c> the</c><00:52:40.000><c> tiger</c><00:52:40.330><c> headers</c><00:52:40.690><c> you'll</c><00:52:41.320><c> see</c><00:52:41.470><c> we've</c>

00:52:41.610 --> 00:52:41.620 align:start position:0%
at the tiger headers you'll see we've
 

00:52:41.620 --> 00:52:43.710 align:start position:0%
at the tiger headers you'll see we've
made<00:52:41.830><c> a</c><00:52:41.860><c> bunch</c><00:52:42.130><c> of</c><00:52:42.250><c> API</c><00:52:42.640><c> changes</c><00:52:43.240><c> where</c><00:52:43.420><c> we</c><00:52:43.540><c> had</c>

00:52:43.710 --> 00:52:43.720 align:start position:0%
made a bunch of API changes where we had
 

00:52:43.720 --> 00:52:46.530 align:start position:0%
made a bunch of API changes where we had
to<00:52:43.870><c> choose</c><00:52:44.200><c> whether</c><00:52:45.190><c> a</c><00:52:45.340><c> value</c><00:52:45.820><c> an</c><00:52:46.000><c> argument</c>

00:52:46.530 --> 00:52:46.540 align:start position:0%
to choose whether a value an argument
 

00:52:46.540 --> 00:52:50.300 align:start position:0%
to choose whether a value an argument
was<00:52:46.810><c> a</c><00:52:47.080><c> long</c><00:52:47.560><c> or</c><00:52:47.950><c> an</c><00:52:48.400><c> integer</c><00:52:48.700><c> and</c><00:52:49.480><c> so</c><00:52:49.810><c> I</c><00:52:49.840><c> just</c>

00:52:50.300 --> 00:52:50.310 align:start position:0%
was a long or an integer and so I just
 

00:52:50.310 --> 00:52:52.470 align:start position:0%
was a long or an integer and so I just
thumb<00:52:51.310><c> through</c><00:52:51.610><c> and</c><00:52:51.910><c> found</c><00:52:52.060><c> this</c><00:52:52.270><c> a</c><00:52:52.330><c> little</c>

00:52:52.470 --> 00:52:52.480 align:start position:0%
thumb through and found this a little
 

00:52:52.480 --> 00:52:54.330 align:start position:0%
thumb through and found this a little
bit<00:52:52.660><c> out</c><00:52:52.810><c> of</c><00:52:52.840><c> a</c><00:52:53.170><c> header</c><00:52:53.560><c> file</c><00:52:53.830><c> whose</c><00:52:54.010><c> name</c><00:52:54.220><c> i</c>

00:52:54.330 --> 00:52:54.340 align:start position:0%
bit out of a header file whose name i
 

00:52:54.340 --> 00:52:55.680 align:start position:0%
bit out of a header file whose name i
forgot<00:52:54.610><c> to</c><00:52:54.760><c> write</c><00:52:54.910><c> down</c><00:52:55.150><c> so</c><00:52:55.390><c> i</c><00:52:55.420><c> don't</c><00:52:55.570><c> remember</c>

00:52:55.680 --> 00:52:55.690 align:start position:0%
forgot to write down so i don't remember
 

00:52:55.690 --> 00:52:58.770 align:start position:0%
forgot to write down so i don't remember
which<00:52:55.900><c> one</c><00:52:56.110><c> it</c><00:52:56.140><c> is</c><00:52:56.910><c> but</c><00:52:57.910><c> the</c><00:52:58.060><c> functions</c><00:52:58.210><c> get</c><00:52:58.630><c> at</c>

00:52:58.770 --> 00:52:58.780 align:start position:0%
which one it is but the functions get at
 

00:52:58.780 --> 00:53:01.470 align:start position:0%
which one it is but the functions get at
her<00:52:58.870><c> list</c><00:52:59.140><c> and</c><00:52:59.350><c> in</c><00:53:00.100><c> the</c><00:53:00.310><c> old</c><00:53:00.670><c> in</c><00:53:01.030><c> the</c><00:53:01.120><c> Panther</c>

00:53:01.470 --> 00:53:01.480 align:start position:0%
her list and in the old in the Panther
 

00:53:01.480 --> 00:53:04.800 align:start position:0%
her list and in the old in the Panther
headers<00:53:01.840><c> the</c><00:53:02.490><c> argument</c><00:53:03.490><c> for</c><00:53:03.730><c> them</c><00:53:03.910><c> is</c><00:53:04.090><c> said</c>

00:53:04.800 --> 00:53:04.810 align:start position:0%
headers the argument for them is said
 

00:53:04.810 --> 00:53:07.410 align:start position:0%
headers the argument for them is said
unsigned<00:53:05.230><c> long</c><00:53:05.530><c> and</c><00:53:06.000><c> that</c><00:53:07.000><c> would</c><00:53:07.180><c> have</c><00:53:07.300><c> an</c>

00:53:07.410 --> 00:53:07.420 align:start position:0%
unsigned long and that would have an
 

00:53:07.420 --> 00:53:10.480 align:start position:0%
unsigned long and that would have an
unexpected<00:53:07.690><c> InDesign</c><00:53:08.470><c> will</c><00:53:08.710><c> consequently</c>

00:53:10.480 --> 00:53:10.490 align:start position:0%
unexpected InDesign will consequently
 

00:53:10.490 --> 00:53:12.650 align:start position:0%
unexpected InDesign will consequently
[Music]

00:53:12.650 --> 00:53:12.660 align:start position:0%
[Music]
 

00:53:12.660 --> 00:53:16.770 align:start position:0%
[Music]
it's<00:53:13.660><c> the</c><00:53:13.750><c> unsigned</c><00:53:14.200><c> int</c><00:53:15.030><c> however</c><00:53:16.030><c> the</c>

00:53:16.770 --> 00:53:16.780 align:start position:0%
it's the unsigned int however the
 

00:53:16.780 --> 00:53:19.130 align:start position:0%
it's the unsigned int however the
programs<00:53:17.590><c> that</c><00:53:17.800><c> have</c><00:53:18.370><c> their</c><00:53:18.580><c> own</c>

00:53:19.130 --> 00:53:19.140 align:start position:0%
programs that have their own
 

00:53:19.140 --> 00:53:20.819 align:start position:0%
programs that have their own
declarations<00:53:20.140><c> of</c>

00:53:20.819 --> 00:53:20.829 align:start position:0%
declarations of
 

00:53:20.829 --> 00:53:24.620 align:start position:0%
declarations of
the<00:53:20.890><c> same</c><00:53:22.079><c> system</c><00:53:23.079><c> function</c><00:53:23.499><c> which</c><00:53:23.799><c> happens</c>

00:53:24.620 --> 00:53:24.630 align:start position:0%
the same system function which happens
 

00:53:24.630 --> 00:53:27.209 align:start position:0%
the same system function which happens
would<00:53:25.630><c> be</c><00:53:25.779><c> inconsistent</c><00:53:26.109><c> if</c><00:53:26.619><c> you</c><00:53:26.769><c> if</c><00:53:27.009><c> they</c>

00:53:27.209 --> 00:53:27.219 align:start position:0%
would be inconsistent if you if they
 

00:53:27.219 --> 00:53:32.039 align:start position:0%
would be inconsistent if you if they
continue<00:53:28.180><c> to</c><00:53:28.329><c> say</c><00:53:29.609><c> unsigned</c><00:53:30.609><c> long</c><00:53:30.880><c> and</c><00:53:31.269><c> you</c>

00:53:32.039 --> 00:53:32.049 align:start position:0%
continue to say unsigned long and you
 

00:53:32.049 --> 00:53:34.890 align:start position:0%
continue to say unsigned long and you
had<00:53:32.200><c> unsigned</c><00:53:32.890><c> int</c><00:53:33.219><c> in</c><00:53:33.400><c> the</c><00:53:33.549><c> system</c><00:53:33.880><c> header</c><00:53:34.089><c> so</c>

00:53:34.890 --> 00:53:34.900 align:start position:0%
had unsigned int in the system header so
 

00:53:34.900 --> 00:53:37.289 align:start position:0%
had unsigned int in the system header so
those<00:53:35.499><c> are</c><00:53:35.680><c> mostly</c><00:53:35.979><c> conditional</c><00:53:36.609><c> eyes</c><00:53:36.729><c> on</c><00:53:36.969><c> LP</c>

00:53:37.289 --> 00:53:37.299 align:start position:0%
those are mostly conditional eyes on LP
 

00:53:37.299 --> 00:53:40.079 align:start position:0%
those are mostly conditional eyes on LP
64<00:53:38.099><c> and</c><00:53:39.099><c> this</c><00:53:39.249><c> way</c><00:53:39.400><c> we</c><00:53:39.519><c> get</c><00:53:39.640><c> backwards</c>

00:53:40.079 --> 00:53:40.089 align:start position:0%
64 and this way we get backwards
 

00:53:40.089 --> 00:53:42.449 align:start position:0%
64 and this way we get backwards
compatibility<00:53:40.900><c> anther</c><00:53:41.259><c> code</c><00:53:41.499><c> that</c><00:53:41.709><c> may</c><00:53:41.829><c> refer</c>

00:53:42.449 --> 00:53:42.459 align:start position:0%
compatibility anther code that may refer
 

00:53:42.459 --> 00:53:49.620 align:start position:0%
compatibility anther code that may refer
to<00:53:42.489><c> the</c><00:53:42.670><c> same</c><00:53:42.849><c> prototype</c><00:53:48.089><c> we</c><00:53:49.089><c> have</c><00:53:49.239><c> one</c><00:53:49.479><c> little</c>

00:53:49.620 --> 00:53:49.630 align:start position:0%
to the same prototype we have one little
 

00:53:49.630 --> 00:53:52.109 align:start position:0%
to the same prototype we have one little
API<00:53:50.049><c> change</c><00:53:50.469><c> for</c><00:53:50.709><c> assembly</c><00:53:51.039><c> language</c><00:53:51.430><c> which</c>

00:53:52.109 --> 00:53:52.119 align:start position:0%
API change for assembly language which
 

00:53:52.119 --> 00:53:55.650 align:start position:0%
API change for assembly language which
is<00:53:52.359><c> a</c><00:53:52.660><c> new</c><00:53:53.099><c> directive</c><00:53:54.099><c> to</c><00:53:54.339><c> allocate</c><00:53:54.880><c> a</c><00:53:55.150><c> an</c>

00:53:55.650 --> 00:53:55.660 align:start position:0%
is a new directive to allocate a an
 

00:53:55.660 --> 00:54:00.140 align:start position:0%
is a new directive to allocate a an
8-byte<00:53:56.140><c> object</c><00:53:56.769><c> and</c><00:53:57.180><c> just</c><00:53:58.180><c> call</c><00:53:58.359><c> it</c><00:53:58.390><c> dot</c><00:53:58.630><c> quad</c>

00:54:00.140 --> 00:54:00.150 align:start position:0%
8-byte object and just call it dot quad
 

00:54:00.150 --> 00:54:02.400 align:start position:0%
8-byte object and just call it dot quad
it's<00:54:01.150><c> not</c><00:54:01.329><c> the</c><00:54:01.509><c> greatest</c><00:54:01.719><c> name</c><00:54:01.989><c> in</c><00:54:02.019><c> the</c><00:54:02.229><c> world</c>

00:54:02.400 --> 00:54:02.410 align:start position:0%
it's not the greatest name in the world
 

00:54:02.410 --> 00:54:03.359 align:start position:0%
it's not the greatest name in the world
but<00:54:02.589><c> it's</c><00:54:02.739><c> consistent</c><00:54:03.249><c> with</c><00:54:03.279><c> other</c>

00:54:03.359 --> 00:54:03.369 align:start position:0%
but it's consistent with other
 

00:54:03.369 --> 00:54:05.130 align:start position:0%
but it's consistent with other
assemblers<00:54:03.969><c> to</c><00:54:04.119><c> do</c><00:54:04.269><c> this</c><00:54:04.450><c> so</c><00:54:04.690><c> that's</c><00:54:04.869><c> why</c><00:54:05.019><c> we</c>

00:54:05.130 --> 00:54:05.140 align:start position:0%
assemblers to do this so that's why we
 

00:54:05.140 --> 00:54:08.160 align:start position:0%
assemblers to do this so that's why we
chose<00:54:05.319><c> it</c><00:54:05.969><c> the</c><00:54:06.969><c> dot</c><00:54:07.299><c> quad</c><00:54:07.539><c> here</c><00:54:07.809><c> I'm</c><00:54:07.959><c> just</c>

00:54:08.160 --> 00:54:08.170 align:start position:0%
chose it the dot quad here I'm just
 

00:54:08.170 --> 00:54:10.499 align:start position:0%
chose it the dot quad here I'm just
feeding<00:54:08.499><c> it</c><00:54:08.709><c> a</c><00:54:08.799><c> large</c><00:54:09.009><c> constant</c><00:54:09.640><c> but</c><00:54:10.299><c> it</c><00:54:10.390><c> also</c>

00:54:10.499 --> 00:54:10.509 align:start position:0%
feeding it a large constant but it also
 

00:54:10.509 --> 00:54:14.069 align:start position:0%
feeding it a large constant but it also
works<00:54:10.869><c> to</c><00:54:11.079><c> feed</c><00:54:11.739><c> it</c><00:54:11.890><c> a</c><00:54:12.009><c> relocation</c><00:54:12.910><c> that's</c><00:54:13.869><c> not</c>

00:54:14.069 --> 00:54:14.079 align:start position:0%
works to feed it a relocation that's not
 

00:54:14.079 --> 00:54:15.959 align:start position:0%
works to feed it a relocation that's not
very<00:54:14.109><c> interesting</c><00:54:14.769><c> right</c><00:54:14.950><c> now</c><00:54:15.160><c> but</c><00:54:15.549><c> when</c><00:54:15.819><c> the</c>

00:54:15.959 --> 00:54:15.969 align:start position:0%
very interesting right now but when the
 

00:54:15.969 --> 00:54:20.099 align:start position:0%
very interesting right now but when the
full<00:54:16.209><c> majko</c><00:54:16.930><c> the</c><00:54:17.819><c> 64-bit</c><00:54:18.819><c> majko</c><00:54:19.209><c> file</c><00:54:19.690><c> format</c>

00:54:20.099 --> 00:54:20.109 align:start position:0%
full majko the 64-bit majko file format
 

00:54:20.109 --> 00:54:22.559 align:start position:0%
full majko the 64-bit majko file format
is<00:54:20.200><c> available</c><00:54:20.680><c> you</c><00:54:21.430><c> may</c><00:54:21.579><c> end</c><00:54:22.029><c> up</c><00:54:22.209><c> wanting</c><00:54:22.450><c> to</c>

00:54:22.559 --> 00:54:22.569 align:start position:0%
is available you may end up wanting to
 

00:54:22.569 --> 00:54:28.920 align:start position:0%
is available you may end up wanting to
use<00:54:22.779><c> this</c><00:54:22.989><c> in</c><00:54:23.229><c> assembly</c><00:54:24.069><c> code</c><00:54:27.569><c> so</c><00:54:28.569><c> I've</c>

00:54:28.920 --> 00:54:28.930 align:start position:0%
use this in assembly code so I've
 

00:54:28.930 --> 00:54:31.410 align:start position:0%
use this in assembly code so I've
alluded<00:54:29.170><c> warnings</c><00:54:29.769><c> the</c><00:54:29.859><c> number</c><00:54:30.099><c> of</c><00:54:30.190><c> times</c><00:54:30.459><c> is</c>

00:54:31.410 --> 00:54:31.420 align:start position:0%
alluded warnings the number of times is
 

00:54:31.420 --> 00:54:34.079 align:start position:0%
alluded warnings the number of times is
now<00:54:31.809><c> this</c><00:54:32.529><c> time</c><00:54:32.769><c> you</c><00:54:33.130><c> really</c><00:54:33.160><c> have</c><00:54:33.729><c> to</c><00:54:33.910><c> pay</c>

00:54:34.079 --> 00:54:34.089 align:start position:0%
now this time you really have to pay
 

00:54:34.089 --> 00:54:35.519 align:start position:0%
now this time you really have to pay
attention<00:54:34.119><c> to</c><00:54:34.630><c> the</c><00:54:34.749><c> warnings</c><00:54:35.140><c> if</c><00:54:35.380><c> you're</c>

00:54:35.519 --> 00:54:35.529 align:start position:0%
attention to the warnings if you're
 

00:54:35.529 --> 00:54:37.049 align:start position:0%
attention to the warnings if you're
getting<00:54:35.680><c> a</c><00:54:35.890><c> warning</c><00:54:36.279><c> and</c><00:54:36.489><c> it's</c><00:54:36.729><c> telling</c><00:54:36.999><c> you</c>

00:54:37.049 --> 00:54:37.059 align:start position:0%
getting a warning and it's telling you
 

00:54:37.059 --> 00:54:39.120 align:start position:0%
getting a warning and it's telling you
about<00:54:37.209><c> loss</c><00:54:37.449><c> of</c><00:54:37.690><c> precision</c><00:54:37.989><c> or</c><00:54:38.559><c> casting</c>

00:54:39.120 --> 00:54:39.130 align:start position:0%
about loss of precision or casting
 

00:54:39.130 --> 00:54:41.279 align:start position:0%
about loss of precision or casting
integers<00:54:39.489><c> to</c><00:54:39.670><c> pointers</c><00:54:40.059><c> you</c><00:54:40.299><c> know</c><00:54:40.749><c> this</c><00:54:41.049><c> time</c>

00:54:41.279 --> 00:54:41.289 align:start position:0%
integers to pointers you know this time
 

00:54:41.289 --> 00:54:43.439 align:start position:0%
integers to pointers you know this time
around<00:54:41.440><c> it's</c><00:54:41.829><c> not</c><00:54:41.979><c> just</c><00:54:42.219><c> for</c><00:54:42.369><c> show</c><00:54:42.609><c> you</c><00:54:43.119><c> really</c>

00:54:43.439 --> 00:54:43.449 align:start position:0%
around it's not just for show you really
 

00:54:43.449 --> 00:54:45.209 align:start position:0%
around it's not just for show you really
are<00:54:43.630><c> going</c><00:54:43.839><c> to</c><00:54:44.019><c> lose</c><00:54:44.229><c> data</c><00:54:44.559><c> and</c><00:54:44.799><c> bad</c><00:54:44.979><c> things</c>

00:54:45.209 --> 00:54:45.219 align:start position:0%
are going to lose data and bad things
 

00:54:45.219 --> 00:54:49.319 align:start position:0%
are going to lose data and bad things
will<00:54:45.489><c> happen</c><00:54:47.549><c> one</c><00:54:48.549><c> of</c><00:54:48.640><c> the</c><00:54:48.759><c> things</c><00:54:48.849><c> you</c><00:54:48.999><c> can</c><00:54:49.180><c> do</c>

00:54:49.319 --> 00:54:49.329 align:start position:0%
will happen one of the things you can do
 

00:54:49.329 --> 00:54:51.299 align:start position:0%
will happen one of the things you can do
is<00:54:49.539><c> to</c><00:54:49.690><c> add</c><00:54:49.809><c> additional</c><00:54:50.049><c> compiler</c><00:54:50.859><c> options</c>

00:54:51.299 --> 00:54:51.309 align:start position:0%
is to add additional compiler options
 

00:54:51.309 --> 00:54:54.749 align:start position:0%
is to add additional compiler options
just<00:54:51.969><c> to</c><00:54:52.180><c> be</c><00:54:52.509><c> on</c><00:54:52.599><c> the</c><00:54:52.630><c> safe</c><00:54:52.959><c> side</c><00:54:52.989><c> in</c><00:54:53.549><c> Xcode</c><00:54:54.549><c> you</c>

00:54:54.749 --> 00:54:54.759 align:start position:0%
just to be on the safe side in Xcode you
 

00:54:54.759 --> 00:54:56.999 align:start position:0%
just to be on the safe side in Xcode you
can<00:54:54.910><c> say</c><00:54:55.150><c> ask</c><00:54:55.539><c> for</c><00:54:56.079><c> other</c><00:54:56.259><c> warning</c><00:54:56.680><c> flags</c>

00:54:56.999 --> 00:54:57.009 align:start position:0%
can say ask for other warning flags
 

00:54:57.009 --> 00:55:00.150 align:start position:0%
can say ask for other warning flags
which<00:54:57.640><c> is</c><00:54:57.910><c> the</c><00:54:58.299><c> equivalent</c><00:54:58.449><c> of</c><00:54:58.900><c> dash</c><00:54:59.469><c> W</c><00:54:59.920><c> all</c>

00:55:00.150 --> 00:55:00.160 align:start position:0%
which is the equivalent of dash W all
 

00:55:00.160 --> 00:55:03.150 align:start position:0%
which is the equivalent of dash W all
for<00:55:00.609><c> DCC</c><00:55:01.059><c> users</c><00:55:01.599><c> and</c><00:55:01.869><c> that</c><00:55:02.499><c> will</c><00:55:02.619><c> turn</c><00:55:02.769><c> on</c><00:55:02.949><c> lots</c>

00:55:03.150 --> 00:55:03.160 align:start position:0%
for DCC users and that will turn on lots
 

00:55:03.160 --> 00:55:06.689 align:start position:0%
for DCC users and that will turn on lots
of<00:55:03.339><c> additional</c><00:55:03.489><c> warnings</c><00:55:04.059><c> and</c><00:55:05.609><c> people</c><00:55:06.609><c> are</c>

00:55:06.689 --> 00:55:06.699 align:start position:0%
of additional warnings and people are
 

00:55:06.699 --> 00:55:08.549 align:start position:0%
of additional warnings and people are
often<00:55:06.849><c> annoyed</c><00:55:07.239><c> they</c><00:55:07.449><c> say</c><00:55:07.630><c> well</c><00:55:07.839><c> w</c><00:55:08.170><c> all</c><00:55:08.319><c> it</c>

00:55:08.549 --> 00:55:08.559 align:start position:0%
often annoyed they say well w all it
 

00:55:08.559 --> 00:55:11.370 align:start position:0%
often annoyed they say well w all it
turns<00:55:09.249><c> on</c><00:55:09.430><c> too</c><00:55:09.640><c> many</c><00:55:09.789><c> warnings</c><00:55:10.299><c> but</c><00:55:10.869><c> actually</c>

00:55:11.370 --> 00:55:11.380 align:start position:0%
turns on too many warnings but actually
 

00:55:11.380 --> 00:55:14.099 align:start position:0%
turns on too many warnings but actually
in<00:55:11.499><c> the</c><00:55:11.619><c> in</c><00:55:11.859><c> doing</c><00:55:12.519><c> 64-bit</c><00:55:13.239><c> programming</c><00:55:13.809><c> wall</c>

00:55:14.099 --> 00:55:14.109 align:start position:0%
in the in doing 64-bit programming wall
 

00:55:14.109 --> 00:55:16.140 align:start position:0%
in the in doing 64-bit programming wall
is<00:55:14.289><c> actually</c><00:55:14.709><c> not</c><00:55:14.859><c> all</c><00:55:15.130><c> doesn't</c><00:55:15.640><c> even</c><00:55:15.849><c> list</c>

00:55:16.140 --> 00:55:16.150 align:start position:0%
is actually not all doesn't even list
 

00:55:16.150 --> 00:55:17.609 align:start position:0%
is actually not all doesn't even list
all<00:55:16.390><c> the</c><00:55:16.420><c> bad</c><00:55:16.719><c> things</c><00:55:16.930><c> that</c><00:55:17.049><c> can</c><00:55:17.199><c> happen</c><00:55:17.259><c> to</c>

00:55:17.609 --> 00:55:17.619 align:start position:0%
all the bad things that can happen to
 

00:55:17.619 --> 00:55:19.829 align:start position:0%
all the bad things that can happen to
your<00:55:17.739><c> code</c><00:55:18.029><c> so</c><00:55:19.029><c> we</c><00:55:19.150><c> have</c><00:55:19.239><c> an</c><00:55:19.359><c> additional</c>

00:55:19.829 --> 00:55:19.839 align:start position:0%
your code so we have an additional
 

00:55:19.839 --> 00:55:22.529 align:start position:0%
your code so we have an additional
option<00:55:19.989><c> the</c><00:55:20.859><c> dash</c><00:55:21.219><c> W</c><00:55:21.640><c> conversion</c><00:55:22.180><c> which</c><00:55:22.299><c> gives</c>

00:55:22.529 --> 00:55:22.539 align:start position:0%
option the dash W conversion which gives
 

00:55:22.539 --> 00:55:24.630 align:start position:0%
option the dash W conversion which gives
additional<00:55:22.839><c> warnings</c><00:55:23.440><c> about</c><00:55:23.640><c> conversions</c>

00:55:24.630 --> 00:55:24.640 align:start position:0%
additional warnings about conversions
 

00:55:24.640 --> 00:55:28.380 align:start position:0%
additional warnings about conversions
that<00:55:24.809><c> might</c><00:55:25.809><c> possibly</c><00:55:26.049><c> lose</c><00:55:26.789><c> data</c><00:55:27.789><c> precision</c>

00:55:28.380 --> 00:55:28.390 align:start position:0%
that might possibly lose data precision
 

00:55:28.390 --> 00:55:31.349 align:start position:0%
that might possibly lose data precision
and<00:55:29.039><c> 64-bit</c><00:55:30.039><c> if</c><00:55:30.190><c> it</c><00:55:30.699><c> says</c><00:55:30.880><c> you</c><00:55:31.029><c> might</c><00:55:31.180><c> lose</c>

00:55:31.349 --> 00:55:31.359 align:start position:0%
and 64-bit if it says you might lose
 

00:55:31.359 --> 00:55:33.359 align:start position:0%
and 64-bit if it says you might lose
data<00:55:31.630><c> precision</c><00:55:32.140><c> you</c><00:55:32.199><c> probably</c><00:55:32.589><c> are</c><00:55:32.829><c> losing</c>

00:55:33.359 --> 00:55:33.369 align:start position:0%
data precision you probably are losing
 

00:55:33.369 --> 00:55:33.620 align:start position:0%
data precision you probably are losing
day

00:55:33.620 --> 00:55:33.630 align:start position:0%
day
 

00:55:33.630 --> 00:55:37.880 align:start position:0%
day
so<00:55:34.519><c> we</c><00:55:35.519><c> recommend</c><00:55:35.700><c> using</c><00:55:36.150><c> W</c><00:55:36.569><c> conversion</c><00:55:37.140><c> you</c>

00:55:37.880 --> 00:55:37.890 align:start position:0%
so we recommend using W conversion you
 

00:55:37.890 --> 00:55:39.680 align:start position:0%
so we recommend using W conversion you
can<00:55:38.009><c> also</c><00:55:38.160><c> ask</c><00:55:38.430><c> for</c><00:55:38.730><c> dash</c><00:55:38.910><c> W</c><00:55:39.299><c> require</c>

00:55:39.680 --> 00:55:39.690 align:start position:0%
can also ask for dash W require
 

00:55:39.690 --> 00:55:42.470 align:start position:0%
can also ask for dash W require
prototypes<00:55:40.470><c> and</c><00:55:40.769><c> there's</c><00:55:41.519><c> not</c><00:55:41.670><c> an</c><00:55:41.789><c> Xcode</c><00:55:42.150><c> flag</c>

00:55:42.470 --> 00:55:42.480 align:start position:0%
prototypes and there's not an Xcode flag
 

00:55:42.480 --> 00:55:44.539 align:start position:0%
prototypes and there's not an Xcode flag
for<00:55:42.779><c> it</c><00:55:42.839><c> that</c><00:55:42.990><c> I</c><00:55:43.079><c> could</c><00:55:43.230><c> see</c><00:55:43.410><c> so</c><00:55:43.740><c> send</c><00:55:44.339><c> in</c><00:55:44.460><c> a</c>

00:55:44.539 --> 00:55:44.549 align:start position:0%
for it that I could see so send in a
 

00:55:44.549 --> 00:55:47.539 align:start position:0%
for it that I could see so send in a
radar<00:55:44.849><c> for</c><00:55:45.029><c> that</c><00:55:45.180><c> and</c><00:55:45.920><c> what</c><00:55:46.920><c> it</c><00:55:47.009><c> does</c><00:55:47.160><c> is</c><00:55:47.220><c> it</c>

00:55:47.539 --> 00:55:47.549 align:start position:0%
radar for that and what it does is it
 

00:55:47.549 --> 00:55:48.980 align:start position:0%
radar for that and what it does is it
actually<00:55:47.579><c> insists</c><00:55:48.329><c> that</c><00:55:48.390><c> all</c><00:55:48.569><c> your</c><00:55:48.779><c> functions</c>

00:55:48.980 --> 00:55:48.990 align:start position:0%
actually insists that all your functions
 

00:55:48.990 --> 00:55:50.900 align:start position:0%
actually insists that all your functions
have<00:55:49.349><c> prototypes</c><00:55:49.950><c> so</c><00:55:50.220><c> if</c><00:55:50.670><c> you</c><00:55:50.759><c> have</c><00:55:50.849><c> a</c>

00:55:50.900 --> 00:55:50.910 align:start position:0%
have prototypes so if you have a
 

00:55:50.910 --> 00:55:53.990 align:start position:0%
have prototypes so if you have a
forgotten<00:55:51.420><c> piece</c><00:55:51.599><c> of</c><00:55:51.779><c> code</c><00:55:51.990><c> that</c><00:55:52.410><c> was</c><00:55:53.250><c> always</c>

00:55:53.990 --> 00:55:54.000 align:start position:0%
forgotten piece of code that was always
 

00:55:54.000 --> 00:55:55.819 align:start position:0%
forgotten piece of code that was always
quietly<00:55:54.359><c> taking</c><00:55:54.660><c> integers</c><00:55:55.170><c> and</c><00:55:55.470><c> assuming</c>

00:55:55.819 --> 00:55:55.829 align:start position:0%
quietly taking integers and assuming
 

00:55:55.829 --> 00:55:58.730 align:start position:0%
quietly taking integers and assuming
everything<00:55:56.190><c> was</c><00:55:56.309><c> okay</c><00:55:57.049><c> dash</c><00:55:58.049><c> W</c><00:55:58.470><c> require</c>

00:55:58.730 --> 00:55:58.740 align:start position:0%
everything was okay dash W require
 

00:55:58.740 --> 00:56:00.769 align:start position:0%
everything was okay dash W require
prototypes<00:55:59.309><c> will</c><00:55:59.640><c> will</c><00:56:00.000><c> flag</c><00:56:00.269><c> them</c><00:56:00.480><c> for</c><00:56:00.690><c> you</c>

00:56:00.769 --> 00:56:00.779 align:start position:0%
prototypes will will flag them for you
 

00:56:00.779 --> 00:56:07.099 align:start position:0%
prototypes will will flag them for you
say<00:56:00.960><c> eight</c><00:56:01.140><c> need</c><00:56:01.470><c> prototypes</c><00:56:01.980><c> there</c><00:56:06.079><c> take</c><00:56:07.079><c> a</c>

00:56:07.099 --> 00:56:07.109 align:start position:0%
say eight need prototypes there take a
 

00:56:07.109 --> 00:56:09.079 align:start position:0%
say eight need prototypes there take a
moment<00:56:07.349><c> to</c><00:56:07.589><c> talk</c><00:56:07.619><c> about</c><00:56:08.069><c> what</c><00:56:08.490><c> we</c><00:56:08.579><c> do</c><00:56:08.730><c> at</c><00:56:08.849><c> tools</c>

00:56:09.079 --> 00:56:09.089 align:start position:0%
moment to talk about what we do at tools
 

00:56:09.089 --> 00:56:12.859 align:start position:0%
moment to talk about what we do at tools
and<00:56:09.359><c> utilities</c><00:56:10.130><c> we</c><00:56:11.130><c> have</c><00:56:11.339><c> an</c><00:56:11.609><c> extended</c><00:56:12.299><c> set</c><00:56:12.720><c> of</c>

00:56:12.859 --> 00:56:12.869 align:start position:0%
and utilities we have an extended set of
 

00:56:12.869 --> 00:56:16.249 align:start position:0%
and utilities we have an extended set of
AP<00:56:13.200><c> is</c><00:56:13.319><c> and</c><00:56:13.740><c> a</c><00:56:13.799><c> few</c><00:56:14.039><c> new</c><00:56:14.250><c> AP</c><00:56:14.670><c> is</c><00:56:14.849><c> to</c><00:56:15.569><c> handle</c>

00:56:16.249 --> 00:56:16.259 align:start position:0%
AP is and a few new AP is to handle
 

00:56:16.259 --> 00:56:18.799 align:start position:0%
AP is and a few new AP is to handle
tools<00:56:16.589><c> that</c><00:56:17.069><c> want</c><00:56:17.309><c> to</c><00:56:17.460><c> manipulate</c><00:56:17.809><c> 64-bit</c>

00:56:18.799 --> 00:56:18.809 align:start position:0%
tools that want to manipulate 64-bit
 

00:56:18.809 --> 00:56:21.109 align:start position:0%
tools that want to manipulate 64-bit
processes<00:56:19.559><c> but</c><00:56:20.220><c> don't</c><00:56:20.400><c> necessarily</c><00:56:20.819><c> want</c><00:56:21.029><c> to</c>

00:56:21.109 --> 00:56:21.119 align:start position:0%
processes but don't necessarily want to
 

00:56:21.119 --> 00:56:24.380 align:start position:0%
processes but don't necessarily want to
be<00:56:21.269><c> 64-bit</c><00:56:22.079><c> themselves</c><00:56:22.910><c> an</c><00:56:23.910><c> obvious</c><00:56:24.240><c> example</c>

00:56:24.380 --> 00:56:24.390 align:start position:0%
be 64-bit themselves an obvious example
 

00:56:24.390 --> 00:56:27.829 align:start position:0%
be 64-bit themselves an obvious example
of<00:56:24.839><c> GEB</c><00:56:25.319><c> when</c><00:56:26.069><c> you</c><00:56:26.220><c> run</c><00:56:26.430><c> gb</c><00:56:26.880><c> and</c><00:56:27.089><c> xcode</c><00:56:27.539><c> it's</c>

00:56:27.829 --> 00:56:27.839 align:start position:0%
of GEB when you run gb and xcode it's
 

00:56:27.839 --> 00:56:31.190 align:start position:0%
of GEB when you run gb and xcode it's
actually<00:56:28.259><c> a</c><00:56:28.500><c> 32-bit</c><00:56:29.220><c> program</c><00:56:29.700><c> still</c><00:56:30.119><c> but</c><00:56:31.019><c> it</c>

00:56:31.190 --> 00:56:31.200 align:start position:0%
actually a 32-bit program still but it
 

00:56:31.200 --> 00:56:34.730 align:start position:0%
actually a 32-bit program still but it
is<00:56:31.349><c> manipulating</c><00:56:32.309><c> a</c><00:56:32.430><c> a</c><00:56:32.670><c> 64-bit</c><00:56:33.660><c> process</c><00:56:34.559><c> which</c>

00:56:34.730 --> 00:56:34.740 align:start position:0%
is manipulating a a 64-bit process which
 

00:56:34.740 --> 00:56:37.519 align:start position:0%
is manipulating a a 64-bit process which
is<00:56:34.890><c> the</c><00:56:35.009><c> program</c><00:56:35.220><c> you're</c><00:56:35.519><c> debugging</c><00:56:36.410><c> so</c><00:56:37.410><c> the</c>

00:56:37.519 --> 00:56:37.529 align:start position:0%
is the program you're debugging so the
 

00:56:37.529 --> 00:56:39.529 align:start position:0%
is the program you're debugging so the
way<00:56:37.619><c> we</c><00:56:37.769><c> do</c><00:56:37.920><c> that</c><00:56:38.069><c> is</c><00:56:38.130><c> we</c><00:56:38.309><c> have</c><00:56:38.640><c> things</c><00:56:39.299><c> like</c><00:56:39.390><c> a</c>

00:56:39.529 --> 00:56:39.539 align:start position:0%
way we do that is we have things like a
 

00:56:39.539 --> 00:56:43.970 align:start position:0%
way we do that is we have things like a
type<00:56:40.220><c> vm</c><00:56:41.220><c> address</c><00:56:41.700><c> t</c><00:56:42.000><c> in</c><00:56:42.299><c> the</c><00:56:42.559><c> in</c><00:56:43.559><c> the</c><00:56:43.650><c> system</c>

00:56:43.970 --> 00:56:43.980 align:start position:0%
type vm address t in the in the system
 

00:56:43.980 --> 00:56:47.150 align:start position:0%
type vm address t in the in the system
headers<00:56:44.309><c> and</c><00:56:44.549><c> it</c><00:56:45.119><c> sets</c><00:56:45.329><c> a</c><00:56:45.450><c> 64</c><00:56:46.019><c> it's</c><00:56:46.829><c> set</c><00:56:47.009><c> to</c><00:56:47.039><c> a</c>

00:56:47.150 --> 00:56:47.160 align:start position:0%
headers and it sets a 64 it's set to a
 

00:56:47.160 --> 00:56:52.730 align:start position:0%
headers and it sets a 64 it's set to a
64-bit<00:56:47.940><c> type</c><00:56:48.289><c> this</c><00:56:49.289><c> ppc64</c><00:56:50.160><c> is</c><00:56:50.519><c> enabled</c><00:56:51.740><c> we</c>

00:56:52.730 --> 00:56:52.740 align:start position:0%
64-bit type this ppc64 is enabled we
 

00:56:52.740 --> 00:56:55.130 align:start position:0%
64-bit type this ppc64 is enabled we
also<00:56:52.920><c> have</c><00:56:53.069><c> an</c><00:56:53.279><c> extended</c><00:56:53.789><c> api</c><00:56:54.180><c> such</c><00:56:54.660><c> as</c><00:56:54.809><c> vm</c>

00:56:55.130 --> 00:56:55.140 align:start position:0%
also have an extended api such as vm
 

00:56:55.140 --> 00:56:59.539 align:start position:0%
also have an extended api such as vm
read<00:56:55.440><c> which</c><00:56:56.220><c> will</c><00:56:56.839><c> read</c><00:56:57.980><c> 64-bit</c><00:56:58.980><c> address</c><00:56:59.130><c> it</c>

00:56:59.539 --> 00:56:59.549 align:start position:0%
read which will read 64-bit address it
 

00:56:59.549 --> 00:57:01.880 align:start position:0%
read which will read 64-bit address it
will<00:56:59.910><c> real</c><00:57:00.240><c> read</c><00:57:00.450><c> data</c><00:57:00.690><c> out</c><00:57:00.930><c> of</c><00:57:00.960><c> the</c><00:57:01.109><c> 64-bit</c>

00:57:01.880 --> 00:57:01.890 align:start position:0%
will real read data out of the 64-bit
 

00:57:01.890 --> 00:57:07.249 align:start position:0%
will real read data out of the 64-bit
process<00:57:03.319><c> so</c><00:57:04.319><c> the</c><00:57:04.890><c> OS</c><00:57:05.819><c> guys</c><00:57:06.089><c> have</c><00:57:06.329><c> been</c><00:57:06.420><c> slaving</c>

00:57:07.249 --> 00:57:07.259 align:start position:0%
process so the OS guys have been slaving
 

00:57:07.259 --> 00:57:10.220 align:start position:0%
process so the OS guys have been slaving
away<00:57:07.319><c> hard</c><00:57:07.710><c> on</c><00:57:07.859><c> this</c><00:57:07.980><c> over</c><00:57:08.279><c> the</c><00:57:08.400><c> past</c><00:57:09.230><c> few</c>

00:57:10.220 --> 00:57:10.230 align:start position:0%
away hard on this over the past few
 

00:57:10.230 --> 00:57:16.130 align:start position:0%
away hard on this over the past few
weeks<00:57:10.529><c> due</c><00:57:10.740><c> to</c><00:57:11.009><c> get</c><00:57:11.130><c> all</c><00:57:11.250><c> that</c><00:57:11.400><c> to</c><00:57:11.579><c> work</c><00:57:15.140><c> now</c>

00:57:16.130 --> 00:57:16.140 align:start position:0%
weeks due to get all that to work now
 

00:57:16.140 --> 00:57:19.249 align:start position:0%
weeks due to get all that to work now
device<00:57:16.559><c> drivers</c><00:57:17.039><c> are</c><00:57:17.450><c> running</c><00:57:18.450><c> in</c><00:57:18.539><c> a</c><00:57:18.630><c> 32-bit</c>

00:57:19.249 --> 00:57:19.259 align:start position:0%
device drivers are running in a 32-bit
 

00:57:19.259 --> 00:57:23.120 align:start position:0%
device drivers are running in a 32-bit
environment<00:57:20.480><c> we</c><00:57:21.480><c> have</c><00:57:21.599><c> a</c><00:57:21.660><c> 32-bit</c><00:57:22.380><c> kernel</c><00:57:22.769><c> and</c>

00:57:23.120 --> 00:57:23.130 align:start position:0%
environment we have a 32-bit kernel and
 

00:57:23.130 --> 00:57:26.839 align:start position:0%
environment we have a 32-bit kernel and
this<00:57:23.940><c> is</c><00:57:24.089><c> partly</c><00:57:24.450><c> for</c><00:57:24.690><c> efficiency</c><00:57:25.349><c> and</c><00:57:25.849><c> partly</c>

00:57:26.839 --> 00:57:26.849 align:start position:0%
this is partly for efficiency and partly
 

00:57:26.849 --> 00:57:30.890 align:start position:0%
this is partly for efficiency and partly
for<00:57:27.380><c> two</c><00:57:28.380><c> so</c><00:57:28.890><c> to</c><00:57:28.950><c> have</c><00:57:29.130><c> a</c><00:57:29.190><c> single</c><00:57:29.609><c> kernel</c><00:57:29.900><c> that</c>

00:57:30.890 --> 00:57:30.900 align:start position:0%
for two so to have a single kernel that
 

00:57:30.900 --> 00:57:35.059 align:start position:0%
for two so to have a single kernel that
runs<00:57:31.109><c> on</c><00:57:31.259><c> all</c><00:57:31.380><c> types</c><00:57:31.650><c> of</c><00:57:32.180><c> systems</c><00:57:33.180><c> and</c><00:57:33.890><c> we</c><00:57:34.890><c> can</c>

00:57:35.059 --> 00:57:35.069 align:start position:0%
runs on all types of systems and we can
 

00:57:35.069 --> 00:57:38.170 align:start position:0%
runs on all types of systems and we can
we<00:57:35.309><c> can</c><00:57:35.460><c> do</c><00:57:35.579><c> this</c><00:57:35.789><c> actually</c><00:57:36.420><c> because</c><00:57:36.779><c> the</c><00:57:37.140><c> the</c>

00:57:38.170 --> 00:57:38.180 align:start position:0%
we can do this actually because the the
 

00:57:38.180 --> 00:57:40.249 align:start position:0%
we can do this actually because the the
representation<00:57:39.180><c> of</c><00:57:39.269><c> memory</c><00:57:39.599><c> as</c><00:57:39.900><c> it's</c><00:57:40.079><c> often</c>

00:57:40.249 --> 00:57:40.259 align:start position:0%
representation of memory as it's often
 

00:57:40.259 --> 00:57:41.809 align:start position:0%
representation of memory as it's often
the<00:57:40.410><c> previous</c><00:57:40.799><c> slide</c><00:57:40.980><c> representation</c><00:57:41.730><c> in</c>

00:57:41.809 --> 00:57:41.819 align:start position:0%
the previous slide representation in
 

00:57:41.819 --> 00:57:45.140 align:start position:0%
the previous slide representation in
memory<00:57:42.089><c> is</c><00:57:42.180><c> as</c><00:57:42.690><c> data</c><00:57:42.960><c> structures</c><00:57:43.470><c> so</c><00:57:44.130><c> a</c><00:57:44.160><c> 32-bit</c>

00:57:45.140 --> 00:57:45.150 align:start position:0%
memory is as data structures so a 32-bit
 

00:57:45.150 --> 00:57:47.250 align:start position:0%
memory is as data structures so a 32-bit
the<00:57:45.839><c> compiled</c><00:57:46.349><c> text</c><00:57:46.859><c> can</c>

00:57:47.250 --> 00:57:47.260 align:start position:0%
the compiled text can
 

00:57:47.260 --> 00:57:50.100 align:start position:0%
the compiled text can
actually<00:57:47.470><c> manipulate</c><00:57:48.100><c> the</c><00:57:48.730><c> memory</c><00:57:49.110><c> going</c>

00:57:50.100 --> 00:57:50.110 align:start position:0%
actually manipulate the memory going
 

00:57:50.110 --> 00:57:55.290 align:start position:0%
actually manipulate the memory going
into<00:57:50.470><c> a</c><00:57:51.090><c> 64-bit</c><00:57:52.090><c> task</c><00:57:53.280><c> so</c><00:57:54.280><c> specific</c><00:57:54.910><c> names</c><00:57:55.120><c> of</c>

00:57:55.290 --> 00:57:55.300 align:start position:0%
into a 64-bit task so specific names of
 

00:57:55.300 --> 00:57:57.690 align:start position:0%
into a 64-bit task so specific names of
function<00:57:55.570><c> we</c><00:57:55.630><c> have</c><00:57:55.750><c> a</c><00:57:55.780><c> prepare</c><00:57:56.520><c> method</c><00:57:57.520><c> that</c>

00:57:57.690 --> 00:57:57.700 align:start position:0%
function we have a prepare method that
 

00:57:57.700 --> 00:58:00.200 align:start position:0%
function we have a prepare method that
established<00:57:58.240><c> IO</c><00:57:58.450><c> mappings</c><00:57:59.080><c> and</c><00:57:59.290><c> that</c><00:57:59.950><c> we</c><00:58:00.070><c> have</c>

00:58:00.200 --> 00:58:00.210 align:start position:0%
established IO mappings and that we have
 

00:58:00.210 --> 00:58:03.480 align:start position:0%
established IO mappings and that we have
specific<00:58:01.210><c> routines</c><00:58:01.570><c> both</c><00:58:01.840><c> for</c><00:58:02.170><c> use</c><00:58:02.890><c> with</c><00:58:03.100><c> dma</c>

00:58:03.480 --> 00:58:03.490 align:start position:0%
specific routines both for use with dma
 

00:58:03.490 --> 00:58:08.130 align:start position:0%
specific routines both for use with dma
and<00:58:03.760><c> parallel</c><00:58:04.210><c> i/o</c><00:58:04.390><c> situations</c><00:58:05.760><c> actually</c><00:58:07.140><c> no</c>

00:58:08.130 --> 00:58:08.140 align:start position:0%
and parallel i/o situations actually no
 

00:58:08.140 --> 00:58:10.380 align:start position:0%
and parallel i/o situations actually no
it's<00:58:08.980><c> probably</c><00:58:09.400><c> not</c><00:58:09.610><c> parallel</c><00:58:09.940><c> I</c><00:58:10.030><c> oh</c><00:58:10.060><c> that</c>

00:58:10.380 --> 00:58:10.390 align:start position:0%
it's probably not parallel I oh that
 

00:58:10.390 --> 00:58:12.930 align:start position:0%
it's probably not parallel I oh that
just<00:58:10.420><c> showed</c><00:58:10.720><c> I'm</c><00:58:10.840><c> but</c><00:58:10.990><c> I'm</c><00:58:11.080><c> knows</c><00:58:11.730><c> I'll</c><00:58:12.730><c> let</c>

00:58:12.930 --> 00:58:12.940 align:start position:0%
just showed I'm but I'm knows I'll let
 

00:58:12.940 --> 00:58:16.110 align:start position:0%
just showed I'm but I'm knows I'll let
it<00:58:13.030><c> let</c><00:58:13.300><c> it</c><00:58:13.360><c> go</c><00:58:13.510><c> with</c><00:58:13.840><c> that</c><00:58:14.940><c> programmed</c><00:58:15.940><c> i/o</c>

00:58:16.110 --> 00:58:16.120 align:start position:0%
it let it go with that programmed i/o
 

00:58:16.120 --> 00:58:18.330 align:start position:0%
it let it go with that programmed i/o
thank<00:58:16.600><c> you</c><00:58:16.690><c> God</c><00:58:16.870><c> for</c><00:58:16.900><c> yes</c><00:58:17.320><c> I</c><00:58:17.590><c> like</c><00:58:17.950><c> that</c><00:58:17.980><c> says</c>

00:58:18.330 --> 00:58:18.340 align:start position:0%
thank you God for yes I like that says
 

00:58:18.340 --> 00:58:20.040 align:start position:0%
thank you God for yes I like that says
you<00:58:18.460><c> know</c><00:58:18.490><c> parallel</c><00:58:19.090><c> that's</c><00:58:19.540><c> that's</c><00:58:19.810><c> like</c>

00:58:20.040 --> 00:58:20.050 align:start position:0%
you know parallel that's that's like
 

00:58:20.050 --> 00:58:22.110 align:start position:0%
you know parallel that's that's like
8-bit<00:58:20.560><c> microcomputers</c><00:58:21.370><c> eyes</c><00:58:21.520><c> is</c><00:58:21.700><c> probably</c>

00:58:22.110 --> 00:58:22.120 align:start position:0%
8-bit microcomputers eyes is probably
 

00:58:22.120 --> 00:58:24.540 align:start position:0%
8-bit microcomputers eyes is probably
not<00:58:22.300><c> what</c><00:58:22.360><c> they</c><00:58:22.630><c> meant</c><00:58:22.870><c> an</c><00:58:22.990><c> i/o</c><00:58:23.110><c> kid</c><00:58:23.470><c> land</c><00:58:23.680><c> ok</c>

00:58:24.540 --> 00:58:24.550 align:start position:0%
not what they meant an i/o kid land ok
 

00:58:24.550 --> 00:58:26.850 align:start position:0%
not what they meant an i/o kid land ok
so<00:58:25.090><c> yeah</c><00:58:25.360><c> so</c><00:58:25.540><c> programmed</c><00:58:25.960><c> i/o</c><00:58:26.110><c> we</c><00:58:26.470><c> have</c><00:58:26.620><c> read</c>

00:58:26.850 --> 00:58:26.860 align:start position:0%
so yeah so programmed i/o we have read
 

00:58:26.860 --> 00:58:30.720 align:start position:0%
so yeah so programmed i/o we have read
bites<00:58:27.100><c> and</c><00:58:27.310><c> write</c><00:58:27.460><c> byte</c><00:58:27.700><c> methods</c><00:58:29.250><c> so</c><00:58:30.250><c> at</c><00:58:30.610><c> least</c>

00:58:30.720 --> 00:58:30.730 align:start position:0%
bites and write byte methods so at least
 

00:58:30.730 --> 00:58:33.060 align:start position:0%
bites and write byte methods so at least
at<00:58:31.240><c> least</c><00:58:31.300><c> for</c><00:58:31.630><c> now</c><00:58:31.660><c> and</c><00:58:32.050><c> and</c><00:58:32.530><c> there</c><00:58:32.950><c> is</c><00:58:33.040><c> a</c>

00:58:33.060 --> 00:58:33.070 align:start position:0%
at least for now and and there is a
 

00:58:33.070 --> 00:58:34.530 align:start position:0%
at least for now and and there is a
possibility<00:58:33.580><c> we</c><00:58:33.730><c> may</c><00:58:33.910><c> have</c><00:58:34.060><c> to</c><00:58:34.180><c> do</c><00:58:34.270><c> something</c>

00:58:34.530 --> 00:58:34.540 align:start position:0%
possibility we may have to do something
 

00:58:34.540 --> 00:58:38.070 align:start position:0%
possibility we may have to do something
with<00:58:34.720><c> 64-bit</c><00:58:35.320><c> device</c><00:58:35.800><c> drivers</c><00:58:36.280><c> and</c><00:58:36.690><c> and</c><00:58:37.690><c> you</c>

00:58:38.070 --> 00:58:38.080 align:start position:0%
with 64-bit device drivers and and you
 

00:58:38.080 --> 00:58:39.840 align:start position:0%
with 64-bit device drivers and and you
have<00:58:38.200><c> OS</c><00:58:38.560><c> guys</c><00:58:38.770><c> over</c><00:58:39.130><c> a</c><00:58:39.160><c> nap</c><00:58:39.340><c> side</c><00:58:39.550><c> of</c><00:58:39.640><c> the</c><00:58:39.700><c> room</c>

00:58:39.840 --> 00:58:39.850 align:start position:0%
have OS guys over a nap side of the room
 

00:58:39.850 --> 00:58:42.120 align:start position:0%
have OS guys over a nap side of the room
that<00:58:40.030><c> you</c><00:58:40.150><c> can</c><00:58:40.300><c> button</c><00:58:40.540><c> hole</c><00:58:40.810><c> in</c><00:58:41.770><c> the</c><00:58:41.890><c> Q&amp;A</c>

00:58:42.120 --> 00:58:42.130 align:start position:0%
that you can button hole in the Q&amp;A
 

00:58:42.130 --> 00:58:47.130 align:start position:0%
that you can button hole in the Q&amp;A
period<00:58:42.520><c> to</c><00:58:42.760><c> ask</c><00:58:42.880><c> about</c><00:58:43.150><c> that</c><00:58:45.930><c> now</c><00:58:46.930><c> if</c><00:58:47.020><c> you're</c>

00:58:47.130 --> 00:58:47.140 align:start position:0%
period to ask about that now if you're
 

00:58:47.140 --> 00:58:50.790 align:start position:0%
period to ask about that now if you're
actually<00:58:47.260><c> doing</c><00:58:47.590><c> 64</c><00:58:48.490><c> bit</c><00:58:48.700><c> io</c><00:58:48.940><c> from</c><00:58:49.600><c> the</c><00:58:49.900><c> from</c><00:58:50.590><c> a</c>

00:58:50.790 --> 00:58:50.800 align:start position:0%
actually doing 64 bit io from the from a
 

00:58:50.800 --> 00:58:54.150 align:start position:0%
actually doing 64 bit io from the from a
are<00:58:51.400><c> doing</c><00:58:51.790><c> i/o</c><00:58:51.910><c> from</c><00:58:52.270><c> a</c><00:58:52.330><c> 64-bit</c><00:58:53.020><c> process</c><00:58:53.500><c> the</c>

00:58:54.150 --> 00:58:54.160 align:start position:0%
are doing i/o from a 64-bit process the
 

00:58:54.160 --> 00:58:57.660 align:start position:0%
are doing i/o from a 64-bit process the
same<00:58:55.060><c> positive</c><00:58:55.300><c> api's</c><00:58:55.930><c> work</c><00:58:56.560><c> as</c><00:58:56.770><c> always</c><00:58:56.920><c> ok</c>

00:58:57.660 --> 00:58:57.670 align:start position:0%
same positive api's work as always ok
 

00:58:57.670 --> 00:59:00.570 align:start position:0%
same positive api's work as always ok
they<00:58:57.880><c> say</c><00:58:58.710><c> they've</c><00:58:59.710><c> been</c><00:58:59.860><c> essentially</c>

00:59:00.570 --> 00:59:00.580 align:start position:0%
they say they've been essentially
 

00:59:00.580 --> 00:59:03.270 align:start position:0%
they say they've been essentially
compiled<00:59:01.180><c> to</c><00:59:01.480><c> take</c><00:59:01.870><c> 64-bit</c><00:59:02.620><c> addresses</c><00:59:03.160><c> and</c>

00:59:03.270 --> 00:59:03.280 align:start position:0%
compiled to take 64-bit addresses and
 

00:59:03.280 --> 00:59:06.360 align:start position:0%
compiled to take 64-bit addresses and
all<00:59:03.370><c> that</c><00:59:03.520><c> stuff</c><00:59:03.640><c> has</c><00:59:03.880><c> been</c><00:59:04.030><c> done</c><00:59:04.830><c> and</c><00:59:05.830><c> again</c>

00:59:06.360 --> 00:59:06.370 align:start position:0%
all that stuff has been done and again
 

00:59:06.370 --> 00:59:08.280 align:start position:0%
all that stuff has been done and again
well<00:59:06.550><c> if</c><00:59:06.790><c> people</c><00:59:07.480><c> have</c><00:59:07.600><c> questions</c><00:59:07.630><c> about</c><00:59:08.110><c> I</c>

00:59:08.280 --> 00:59:08.290 align:start position:0%
well if people have questions about I
 

00:59:08.290 --> 00:59:10.800 align:start position:0%
well if people have questions about I
oak<00:59:08.620><c> it</c><00:59:08.860><c> live</c><00:59:09.070><c> and</c><00:59:09.340><c> IO</c><00:59:09.520><c> user</c><00:59:09.880><c> client</c><00:59:10.390><c> plugins</c>

00:59:10.800 --> 00:59:10.810 align:start position:0%
oak it live and IO user client plugins
 

00:59:10.810 --> 00:59:13.620 align:start position:0%
oak it live and IO user client plugins
which<00:59:11.050><c> are</c><00:59:11.200><c> not</c><00:59:11.320><c> available</c><00:59:11.700><c> let's</c><00:59:12.700><c> bring</c><00:59:13.510><c> it</c>

00:59:13.620 --> 00:59:13.630 align:start position:0%
which are not available let's bring it
 

00:59:13.630 --> 00:59:19.470 align:start position:0%
which are not available let's bring it
up<00:59:13.750><c> in</c><00:59:13.930><c> the</c><00:59:14.100><c> Q&amp;A</c><00:59:15.100><c> session</c><00:59:17.910><c> so</c><00:59:18.910><c> I'd</c><00:59:19.000><c> like</c><00:59:19.060><c> to</c><00:59:19.240><c> pop</c>

00:59:19.470 --> 00:59:19.480 align:start position:0%
up in the Q&amp;A session so I'd like to pop
 

00:59:19.480 --> 00:59:22.020 align:start position:0%
up in the Q&amp;A session so I'd like to pop
back<00:59:19.690><c> up</c><00:59:19.750><c> a</c><00:59:20.020><c> little</c><00:59:20.170><c> bit</c><00:59:20.380><c> and</c><00:59:20.560><c> talk</c><00:59:21.220><c> about</c><00:59:21.250><c> the</c>

00:59:22.020 --> 00:59:22.030 align:start position:0%
back up a little bit and talk about the
 

00:59:22.030 --> 00:59:24.510 align:start position:0%
back up a little bit and talk about the
design<00:59:22.780><c> issues</c><00:59:23.170><c> that</c><00:59:23.740><c> you</c><00:59:23.980><c> might</c><00:59:24.100><c> want</c><00:59:24.400><c> to</c>

00:59:24.510 --> 00:59:24.520 align:start position:0%
design issues that you might want to
 

00:59:24.520 --> 00:59:29.040 align:start position:0%
design issues that you might want to
think<00:59:25.000><c> about</c><00:59:25.320><c> the</c><00:59:27.090><c> one</c><00:59:28.090><c> of</c><00:59:28.210><c> the</c><00:59:28.300><c> classic</c><00:59:28.720><c> uses</c>

00:59:29.040 --> 00:59:29.050 align:start position:0%
think about the one of the classic uses
 

00:59:29.050 --> 00:59:33.500 align:start position:0%
think about the one of the classic uses
of<00:59:29.200><c> 64-bit</c><00:59:29.770><c> applications</c><00:59:30.610><c> that</c><00:59:31.360><c> have</c><00:59:32.190><c> become</c>

00:59:33.500 --> 00:59:33.510 align:start position:0%
of 64-bit applications that have become
 

00:59:33.510 --> 00:59:37.110 align:start position:0%
of 64-bit applications that have become
prevalent<00:59:34.510><c> in</c><00:59:34.810><c> recent</c><00:59:35.170><c> years</c><00:59:35.230><c> is</c><00:59:35.710><c> to</c><00:59:36.700><c> to</c><00:59:36.970><c> use</c>

00:59:37.110 --> 00:59:37.120 align:start position:0%
prevalent in recent years is to to use
 

00:59:37.120 --> 00:59:39.780 align:start position:0%
prevalent in recent years is to to use
them<00:59:37.270><c> for</c><00:59:37.450><c> servers</c><00:59:37.840><c> and</c><00:59:38.640><c> servers</c><00:59:39.640><c> are</c>

00:59:39.780 --> 00:59:39.790 align:start position:0%
them for servers and servers are
 

00:59:39.790 --> 00:59:42.630 align:start position:0%
them for servers and servers are
actually<00:59:40.210><c> a</c><00:59:40.240><c> very</c><00:59:41.430><c> interesting</c><00:59:42.430><c> youth</c>

00:59:42.630 --> 00:59:42.640 align:start position:0%
actually a very interesting youth
 

00:59:42.640 --> 00:59:46.380 align:start position:0%
actually a very interesting youth
because<00:59:43.260><c> the</c><00:59:44.260><c> the</c><00:59:44.890><c> class</c><00:59:45.490><c> is</c><00:59:45.670><c> a</c><00:59:45.730><c> classic</c><00:59:46.090><c> model</c>

00:59:46.380 --> 00:59:46.390 align:start position:0%
because the the class is a classic model
 

00:59:46.390 --> 00:59:47.760 align:start position:0%
because the the class is a classic model
now<00:59:46.510><c> what</c><00:59:46.720><c> we've</c><00:59:46.870><c> seen</c><00:59:47.050><c> with</c><00:59:47.110><c> Internet</c><00:59:47.560><c> type</c>

00:59:47.760 --> 00:59:47.770 align:start position:0%
now what we've seen with Internet type
 

00:59:47.770 --> 00:59:49.710 align:start position:0%
now what we've seen with Internet type
servers<00:59:48.250><c> as</c><00:59:48.490><c> the</c><00:59:48.910><c> Internet's</c><00:59:49.210><c> become</c><00:59:49.510><c> popular</c>

00:59:49.710 --> 00:59:49.720 align:start position:0%
servers as the Internet's become popular
 

00:59:49.720 --> 00:59:52.560 align:start position:0%
servers as the Internet's become popular
is<00:59:50.020><c> as</c><00:59:50.200><c> they</c><00:59:50.290><c> need</c><00:59:50.950><c> to</c><00:59:51.100><c> handle</c><00:59:51.820><c> large</c><00:59:52.030><c> numbers</c>

00:59:52.560 --> 00:59:52.570 align:start position:0%
is as they need to handle large numbers
 

00:59:52.570 --> 00:59:55.050 align:start position:0%
is as they need to handle large numbers
of<00:59:52.600><c> clients</c><00:59:53.200><c> in</c><00:59:53.590><c> some</c><00:59:53.860><c> cases</c><00:59:54.100><c> maybe</c><00:59:54.430><c> thousands</c>

00:59:55.050 --> 00:59:55.060 align:start position:0%
of clients in some cases maybe thousands
 

00:59:55.060 --> 00:59:58.920 align:start position:0%
of clients in some cases maybe thousands
of<00:59:55.150><c> clients</c><00:59:55.360><c> simultaneously</c><00:59:56.350><c> and</c><00:59:57.780><c> it's</c><00:59:58.780><c> a</c>

00:59:58.920 --> 00:59:58.930 align:start position:0%
of clients simultaneously and it's a
 

00:59:58.930 --> 01:00:00.450 align:start position:0%
of clients simultaneously and it's a
very<00:59:58.960><c> convenient</c><00:59:59.560><c> to</c><00:59:59.740><c> to</c><01:00:00.040><c> actually</c><01:00:00.340><c> be</c><01:00:00.430><c> able</c>

01:00:00.450 --> 01:00:00.460 align:start position:0%
very convenient to to actually be able
 

01:00:00.460 --> 01:00:01.200 align:start position:0%
very convenient to to actually be able
to<01:00:00.580><c> have</c><01:00:00.760><c> a</c><01:00:00.790><c> very</c>

01:00:01.200 --> 01:00:01.210 align:start position:0%
to have a very
 

01:00:01.210 --> 01:00:02.910 align:start position:0%
to have a very
arge<01:00:01.330><c> address</c><01:00:01.750><c> space</c><01:00:02.020><c> because</c><01:00:02.440><c> then</c><01:00:02.620><c> what</c><01:00:02.800><c> you</c>

01:00:02.910 --> 01:00:02.920 align:start position:0%
arge address space because then what you
 

01:00:02.920 --> 01:00:06.030 align:start position:0%
arge address space because then what you
can<01:00:02.950><c> do</c><01:00:03.190><c> is</c><01:00:03.340><c> have</c><01:00:03.550><c> say</c><01:00:04.300><c> one</c><01:00:04.600><c> thread</c><01:00:04.930><c> per</c><01:00:05.170><c> client</c>

01:00:06.030 --> 01:00:06.040 align:start position:0%
can do is have say one thread per client
 

01:00:06.040 --> 01:00:09.240 align:start position:0%
can do is have say one thread per client
and<01:00:06.360><c> have</c><01:00:07.360><c> access</c><01:00:07.660><c> to</c><01:00:08.050><c> a</c><01:00:08.080><c> single</c><01:00:08.500><c> large</c><01:00:08.770><c> shared</c>

01:00:09.240 --> 01:00:09.250 align:start position:0%
and have access to a single large shared
 

01:00:09.250 --> 01:00:11.130 align:start position:0%
and have access to a single large shared
data<01:00:09.520><c> space</c><01:00:09.820><c> so</c><01:00:10.120><c> for</c><01:00:10.300><c> instance</c><01:00:10.360><c> you're</c>

01:00:11.130 --> 01:00:11.140 align:start position:0%
data space so for instance you're
 

01:00:11.140 --> 01:00:13.530 align:start position:0%
data space so for instance you're
serving<01:00:11.530><c> out</c><01:00:11.650><c> images</c><01:00:12.190><c> you</c><01:00:12.790><c> load</c><01:00:13.030><c> every</c><01:00:13.390><c> last</c>

01:00:13.530 --> 01:00:13.540 align:start position:0%
serving out images you load every last
 

01:00:13.540 --> 01:00:15.270 align:start position:0%
serving out images you load every last
one<01:00:13.750><c> of</c><01:00:13.900><c> your</c><01:00:14.080><c> images</c><01:00:14.410><c> in</c><01:00:14.590><c> the</c><01:00:14.680><c> memory</c><01:00:15.010><c> so</c><01:00:15.250><c> that</c>

01:00:15.270 --> 01:00:15.280 align:start position:0%
one of your images in the memory so that
 

01:00:15.280 --> 01:00:16.980 align:start position:0%
one of your images in the memory so that
is<01:00:15.520><c> readily</c><01:00:15.760><c> available</c><01:00:15.970><c> you</c><01:00:16.630><c> can</c><01:00:16.750><c> serve</c><01:00:16.960><c> it</c>

01:00:16.980 --> 01:00:16.990 align:start position:0%
is readily available you can serve it
 

01:00:16.990 --> 01:00:19.710 align:start position:0%
is readily available you can serve it
out<01:00:17.200><c> to</c><01:00:17.380><c> clients</c><01:00:17.590><c> as</c><01:00:17.830><c> they</c><01:00:18.400><c> ask</c><01:00:18.550><c> for</c><01:00:18.850><c> them</c><01:00:19.000><c> and</c>

01:00:19.710 --> 01:00:19.720 align:start position:0%
out to clients as they ask for them and
 

01:00:19.720 --> 01:00:21.710 align:start position:0%
out to clients as they ask for them and
this<01:00:20.530><c> can</c><01:00:20.740><c> actually</c><01:00:20.860><c> be</c><01:00:21.040><c> a</c><01:00:21.130><c> very</c><01:00:21.370><c> effective</c>

01:00:21.710 --> 01:00:21.720 align:start position:0%
this can actually be a very effective
 

01:00:21.720 --> 01:00:25.110 align:start position:0%
this can actually be a very effective
approach<01:00:22.720><c> for</c><01:00:23.110><c> things</c><01:00:23.500><c> like</c><01:00:23.620><c> databases</c><01:00:24.430><c> where</c>

01:00:25.110 --> 01:00:25.120 align:start position:0%
approach for things like databases where
 

01:00:25.120 --> 01:00:28.590 align:start position:0%
approach for things like databases where
you<01:00:25.750><c> can</c><01:00:25.990><c> lock</c><01:00:26.260><c> on</c><01:00:26.620><c> on</c><01:00:27.360><c> individual</c><01:00:28.360><c> data</c>

01:00:28.590 --> 01:00:28.600 align:start position:0%
you can lock on on individual data
 

01:00:28.600 --> 01:00:30.090 align:start position:0%
you can lock on on individual data
elements<01:00:29.170><c> and</c><01:00:29.290><c> you</c><01:00:29.350><c> can</c><01:00:29.500><c> have</c><01:00:29.680><c> a</c><01:00:29.710><c> single</c>

01:00:30.090 --> 01:00:30.100 align:start position:0%
elements and you can have a single
 

01:00:30.100 --> 01:00:32.250 align:start position:0%
elements and you can have a single
server<01:00:30.280><c> managing</c><01:00:30.970><c> all</c><01:00:31.090><c> of</c><01:00:31.210><c> those</c><01:00:31.390><c> rather</c><01:00:32.050><c> than</c>

01:00:32.250 --> 01:00:32.260 align:start position:0%
server managing all of those rather than
 

01:00:32.260 --> 01:00:34.020 align:start position:0%
server managing all of those rather than
trying<01:00:32.560><c> to</c><01:00:32.650><c> do</c><01:00:32.770><c> something</c><01:00:33.010><c> with</c><01:00:33.250><c> multiple</c>

01:00:34.020 --> 01:00:34.030 align:start position:0%
trying to do something with multiple
 

01:00:34.030 --> 01:00:36.920 align:start position:0%
trying to do something with multiple
server<01:00:34.270><c> processes</c><01:00:35.020><c> managing</c><01:00:35.560><c> shared</c><01:00:35.830><c> files</c>

01:00:36.920 --> 01:00:36.930 align:start position:0%
server processes managing shared files
 

01:00:36.930 --> 01:00:39.870 align:start position:0%
server processes managing shared files
so<01:00:37.930><c> that's</c><01:00:38.230><c> so</c><01:00:38.920><c> the</c><01:00:39.100><c> internet</c><01:00:39.370><c> server</c><01:00:39.700><c> is</c><01:00:39.850><c> a</c>

01:00:39.870 --> 01:00:39.880 align:start position:0%
so that's so the internet server is a
 

01:00:39.880 --> 01:00:42.060 align:start position:0%
so that's so the internet server is a
real<01:00:40.120><c> is</c><01:00:40.330><c> a</c><01:00:40.360><c> really</c><01:00:40.630><c> interesting</c><01:00:40.900><c> area</c><01:00:41.470><c> to</c><01:00:41.740><c> add</c>

01:00:42.060 --> 01:00:42.070 align:start position:0%
real is a really interesting area to add
 

01:00:42.070 --> 01:00:46.590 align:start position:0%
real is a really interesting area to add
to<01:00:42.250><c> do</c><01:00:42.490><c> 64-bit</c><01:00:43.300><c> programming</c><01:00:45.450><c> we</c><01:00:46.450><c> can</c>

01:00:46.590 --> 01:00:46.600 align:start position:0%
to do 64-bit programming we can
 

01:00:46.600 --> 01:00:48.300 align:start position:0%
to do 64-bit programming we can
generalize<01:00:46.960><c> that</c><01:00:47.170><c> a</c><01:00:47.380><c> little</c><01:00:47.650><c> bit</c><01:00:47.800><c> and</c><01:00:48.010><c> talk</c>

01:00:48.300 --> 01:00:48.310 align:start position:0%
generalize that a little bit and talk
 

01:00:48.310 --> 01:00:51.240 align:start position:0%
generalize that a little bit and talk
about<01:00:48.340><c> compute</c><01:00:49.030><c> engines</c><01:00:49.390><c> in</c><01:00:49.540><c> general</c><01:00:49.930><c> and</c><01:00:50.250><c> the</c>

01:00:51.240 --> 01:00:51.250 align:start position:0%
about compute engines in general and the
 

01:00:51.250 --> 01:00:54.660 align:start position:0%
about compute engines in general and the
terror<01:00:51.580><c> vision</c><01:00:52.000><c> demos</c><01:00:52.720><c> you</c><01:00:52.990><c> saw</c><01:00:53.280><c> yesterday</c><01:00:54.280><c> as</c>

01:00:54.660 --> 01:00:54.670 align:start position:0%
terror vision demos you saw yesterday as
 

01:00:54.670 --> 01:00:57.140 align:start position:0%
terror vision demos you saw yesterday as
fee<01:00:54.850><c> Peters</c><01:00:55.210><c> did</c><01:00:55.530><c> there's</c><01:00:56.530><c> actually</c><01:00:56.920><c> a</c>

01:00:57.140 --> 01:00:57.150 align:start position:0%
fee Peters did there's actually a
 

01:00:57.150 --> 01:01:00.390 align:start position:0%
fee Peters did there's actually a
classic<01:00:58.150><c> example</c><01:00:58.660><c> of</c><01:00:58.750><c> that</c><01:00:58.810><c> we</c><01:00:59.470><c> have</c><01:00:59.620><c> a</c><01:00:59.650><c> 32</c><01:01:00.160><c> bit</c>

01:01:00.390 --> 01:01:00.400 align:start position:0%
classic example of that we have a 32 bit
 

01:01:00.400 --> 01:01:03.570 align:start position:0%
classic example of that we have a 32 bit
gooey<01:01:00.760><c> front</c><01:01:01.150><c> end</c><01:01:01.360><c> and</c><01:01:01.570><c> we</c><01:01:02.560><c> use</c><01:01:02.770><c> a</c><01:01:02.800><c> inter</c>

01:01:03.570 --> 01:01:03.580 align:start position:0%
gooey front end and we use a inter
 

01:01:03.580 --> 01:01:05.370 align:start position:0%
gooey front end and we use a inter
process<01:01:03.790><c> communication</c><01:01:04.090><c> in</c><01:01:04.840><c> one</c><01:01:04.990><c> form</c><01:01:05.290><c> or</c>

01:01:05.370 --> 01:01:05.380 align:start position:0%
process communication in one form or
 

01:01:05.380 --> 01:01:07.440 align:start position:0%
process communication in one form or
another<01:01:05.440><c> going</c><01:01:06.340><c> back</c><01:01:06.520><c> to</c><01:01:06.670><c> the</c><01:01:06.760><c> compute</c><01:01:07.120><c> engine</c>

01:01:07.440 --> 01:01:07.450 align:start position:0%
another going back to the compute engine
 

01:01:07.450 --> 01:01:10.950 align:start position:0%
another going back to the compute engine
which<01:01:07.630><c> is</c><01:01:08.140><c> handling</c><01:01:08.770><c> the</c><01:01:09.270><c> very</c><01:01:10.270><c> large</c><01:01:10.510><c> address</c>

01:01:10.950 --> 01:01:10.960 align:start position:0%
which is handling the very large address
 

01:01:10.960 --> 01:01:14.910 align:start position:0%
which is handling the very large address
space<01:01:12.180><c> what</c><01:01:13.180><c> this</c><01:01:13.330><c> does</c><01:01:13.570><c> is</c><01:01:13.930><c> essentially</c><01:01:14.530><c> it</c>

01:01:14.910 --> 01:01:14.920 align:start position:0%
space what this does is essentially it
 

01:01:14.920 --> 01:01:18.690 align:start position:0%
space what this does is essentially it
can<01:01:15.340><c> shift</c><01:01:15.640><c> the</c><01:01:16.050><c> burden</c><01:01:17.050><c> from</c><01:01:18.040><c> your</c>

01:01:18.690 --> 01:01:18.700 align:start position:0%
can shift the burden from your
 

01:01:18.700 --> 01:01:21.450 align:start position:0%
can shift the burden from your
application<01:01:19.420><c> code</c><01:01:19.630><c> to</c><01:01:20.050><c> the</c><01:01:20.290><c> system</c><01:01:20.680><c> okay</c><01:01:21.190><c> a</c>

01:01:21.450 --> 01:01:21.460 align:start position:0%
application code to the system okay a
 

01:01:21.460 --> 01:01:24.350 align:start position:0%
application code to the system okay a
lot<01:01:21.970><c> of</c><01:01:22.060><c> programs</c><01:01:22.450><c> actually</c><01:01:22.720><c> already</c><01:01:23.020><c> have</c>

01:01:24.350 --> 01:01:24.360 align:start position:0%
lot of programs actually already have
 

01:01:24.360 --> 01:01:26.970 align:start position:0%
lot of programs actually already have
mechanisms<01:01:25.360><c> to</c><01:01:25.840><c> handle</c><01:01:26.260><c> large</c><01:01:26.410><c> amounts</c><01:01:26.560><c> of</c>

01:01:26.970 --> 01:01:26.980 align:start position:0%
mechanisms to handle large amounts of
 

01:01:26.980 --> 01:01:29.580 align:start position:0%
mechanisms to handle large amounts of
data<01:01:27.720><c> and</c><01:01:28.720><c> what</c><01:01:29.140><c> they'll</c><01:01:29.260><c> do</c><01:01:29.380><c> is</c><01:01:29.500><c> they'll</c>

01:01:29.580 --> 01:01:29.590 align:start position:0%
data and what they'll do is they'll
 

01:01:29.590 --> 01:01:31.440 align:start position:0%
data and what they'll do is they'll
manually<01:01:30.040><c> page</c><01:01:30.280><c> in</c><01:01:30.520><c> data</c><01:01:30.790><c> isn't</c><01:01:31.030><c> needed</c><01:01:31.210><c> and</c>

01:01:31.440 --> 01:01:31.450 align:start position:0%
manually page in data isn't needed and
 

01:01:31.450 --> 01:01:33.210 align:start position:0%
manually page in data isn't needed and
page<01:01:31.690><c> it</c><01:01:31.840><c> out</c><01:01:31.990><c> and</c><01:01:32.320><c> page</c><01:01:32.530><c> in</c><01:01:32.710><c> different</c><01:01:33.040><c> data</c>

01:01:33.210 --> 01:01:33.220 align:start position:0%
page it out and page in different data
 

01:01:33.220 --> 01:01:38.190 align:start position:0%
page it out and page in different data
and<01:01:34.110><c> with</c><01:01:35.110><c> the</c><01:01:35.230><c> 64-bit</c><01:01:35.980><c> to</c><01:01:36.220><c> a</c><01:01:36.900><c> capability</c><01:01:37.900><c> you</c>

01:01:38.190 --> 01:01:38.200 align:start position:0%
and with the 64-bit to a capability you
 

01:01:38.200 --> 01:01:39.270 align:start position:0%
and with the 64-bit to a capability you
actually<01:01:38.530><c> wouldn't</c><01:01:38.710><c> have</c><01:01:38.860><c> to</c><01:01:39.010><c> do</c><01:01:39.130><c> that</c>

01:01:39.270 --> 01:01:39.280 align:start position:0%
actually wouldn't have to do that
 

01:01:39.280 --> 01:01:42.030 align:start position:0%
actually wouldn't have to do that
anymore<01:01:39.340><c> you</c><01:01:40.120><c> could</c><01:01:40.390><c> just</c><01:01:40.500><c> allocate</c><01:01:41.500><c> large</c>

01:01:42.030 --> 01:01:42.040 align:start position:0%
anymore you could just allocate large
 

01:01:42.040 --> 01:01:44.910 align:start position:0%
anymore you could just allocate large
amounts<01:01:42.460><c> of</c><01:01:42.550><c> memory</c><01:01:42.700><c> and</c><01:01:42.880><c> suck</c><01:01:43.300><c> it</c><01:01:43.330><c> in</c><01:01:43.600><c> and</c><01:01:44.380><c> use</c>

01:01:44.910 --> 01:01:44.920 align:start position:0%
amounts of memory and suck it in and use
 

01:01:44.920 --> 01:01:46.560 align:start position:0%
amounts of memory and suck it in and use
it<01:01:45.130><c> and</c><01:01:45.310><c> never</c><01:01:45.700><c> have</c><01:01:45.910><c> to</c><01:01:46.030><c> worry</c><01:01:46.210><c> about</c><01:01:46.300><c> running</c>

01:01:46.560 --> 01:01:46.570 align:start position:0%
it and never have to worry about running
 

01:01:46.570 --> 01:01:50.490 align:start position:0%
it and never have to worry about running
out<01:01:46.810><c> and</c><01:01:47.110><c> if</c><01:01:47.260><c> you</c><01:01:47.380><c> have</c><01:01:47.590><c> a</c><01:01:49.200><c> piece</c><01:01:50.200><c> of</c><01:01:50.230><c> data</c>

01:01:50.490 --> 01:01:50.500 align:start position:0%
out and if you have a piece of data
 

01:01:50.500 --> 01:01:52.140 align:start position:0%
out and if you have a piece of data
that's<01:01:50.740><c> not</c><01:01:50.920><c> being</c><01:01:51.100><c> used</c><01:01:51.340><c> at</c><01:01:51.550><c> the</c><01:01:51.580><c> moment</c><01:01:52.030><c> you</c>

01:01:52.140 --> 01:01:52.150 align:start position:0%
that's not being used at the moment you
 

01:01:52.150 --> 01:01:53.670 align:start position:0%
that's not being used at the moment you
can<01:01:52.300><c> essentially</c><01:01:52.630><c> rely</c><01:01:53.020><c> on</c><01:01:53.230><c> the</c><01:01:53.350><c> virtual</c>

01:01:53.670 --> 01:01:53.680 align:start position:0%
can essentially rely on the virtual
 

01:01:53.680 --> 01:01:56.520 align:start position:0%
can essentially rely on the virtual
memory<01:01:53.860><c> system</c><01:01:53.980><c> to</c><01:01:54.490><c> page</c><01:01:54.790><c> it</c><01:01:54.970><c> out</c><01:01:55.090><c> for</c><01:01:55.420><c> you</c><01:01:55.630><c> so</c>

01:01:56.520 --> 01:01:56.530 align:start position:0%
memory system to page it out for you so
 

01:01:56.530 --> 01:01:58.560 align:start position:0%
memory system to page it out for you so
in<01:01:56.860><c> a</c><01:01:56.920><c> sense</c><01:01:57.100><c> what</c><01:01:57.340><c> it's</c><01:01:57.460><c> doing</c><01:01:57.760><c> is</c><01:01:57.880><c> it's</c>

01:01:58.560 --> 01:01:58.570 align:start position:0%
in a sense what it's doing is it's
 

01:01:58.570 --> 01:02:00.510 align:start position:0%
in a sense what it's doing is it's
replacing<01:01:59.140><c> your</c><01:01:59.350><c> code</c><01:01:59.590><c> with</c><01:01:59.860><c> a</c><01:01:59.890><c> system</c><01:02:00.250><c> code</c>

01:02:00.510 --> 01:02:00.520 align:start position:0%
replacing your code with a system code
 

01:02:00.520 --> 01:02:02.370 align:start position:0%
replacing your code with a system code
and<01:02:00.790><c> that</c><01:02:01.300><c> can</c><01:02:01.480><c> be</c><01:02:01.510><c> a</c><01:02:01.600><c> great</c><01:02:02.080><c> advantage</c>

01:02:02.370 --> 01:02:02.380 align:start position:0%
and that can be a great advantage
 

01:02:02.380 --> 01:02:04.140 align:start position:0%
and that can be a great advantage
because<01:02:02.650><c> now</c><01:02:03.010><c> it's</c><01:02:03.190><c> not</c><01:02:03.340><c> you</c><01:02:03.580><c> having</c><01:02:03.910><c> to</c><01:02:03.970><c> write</c>

01:02:04.140 --> 01:02:04.150 align:start position:0%
because now it's not you having to write
 

01:02:04.150 --> 01:02:05.790 align:start position:0%
because now it's not you having to write
all<01:02:04.300><c> this</c><01:02:04.420><c> stuff</c><01:02:04.660><c> and</c><01:02:04.900><c> play</c><01:02:05.470><c> computer</c>

01:02:05.790 --> 01:02:05.800 align:start position:0%
all this stuff and play computer
 

01:02:05.800 --> 01:02:07.950 align:start position:0%
all this stuff and play computer
scientists<01:02:06.550><c> and</c><01:02:06.670><c> read</c><01:02:06.790><c> about</c><01:02:06.910><c> vm</c><01:02:07.360><c> memory</c>

01:02:07.950 --> 01:02:07.960 align:start position:0%
scientists and read about vm memory
 

01:02:07.960 --> 01:02:10.170 align:start position:0%
scientists and read about vm memory
items<01:02:08.410><c> you</c><01:02:08.860><c> can</c><01:02:09.010><c> let</c><01:02:09.160><c> the</c><01:02:09.340><c> the</c><01:02:09.820><c> friendly</c>

01:02:10.170 --> 01:02:10.180 align:start position:0%
items you can let the the friendly
 

01:02:10.180 --> 01:02:11.790 align:start position:0%
items you can let the the friendly
experts<01:02:10.570><c> that</c><01:02:10.660><c> Apple</c><01:02:10.990><c> take</c><01:02:11.170><c> care</c><01:02:11.380><c> of</c><01:02:11.470><c> that</c><01:02:11.560><c> for</c>

01:02:11.790 --> 01:02:11.800 align:start position:0%
experts that Apple take care of that for
 

01:02:11.800 --> 01:02:14.820 align:start position:0%
experts that Apple take care of that for
you<01:02:11.890><c> now</c><01:02:12.960><c> it</c><01:02:13.960><c> may</c><01:02:14.110><c> be</c><01:02:14.320><c> that</c><01:02:14.350><c> you</c>

01:02:14.820 --> 01:02:14.830 align:start position:0%
you now it may be that you
 

01:02:14.830 --> 01:02:16.590 align:start position:0%
you now it may be that you
know<01:02:14.920><c> something</c><01:02:15.370><c> about</c><01:02:15.610><c> your</c><01:02:15.970><c> applications</c>

01:02:16.590 --> 01:02:16.600 align:start position:0%
know something about your applications
 

01:02:16.600 --> 01:02:19.200 align:start position:0%
know something about your applications
memory<01:02:16.870><c> usage</c><01:02:17.170><c> that</c><01:02:18.130><c> will</c><01:02:18.310><c> be</c><01:02:18.460><c> actually</c><01:02:18.970><c> more</c>

01:02:19.200 --> 01:02:19.210 align:start position:0%
memory usage that will be actually more
 

01:02:19.210 --> 01:02:22.340 align:start position:0%
memory usage that will be actually more
efficient<01:02:19.780><c> than</c><01:02:20.320><c> the</c><01:02:20.830><c> generic</c><01:02:21.310><c> OS</c><01:02:21.610><c> can</c><01:02:21.820><c> do</c><01:02:22.000><c> and</c>

01:02:22.340 --> 01:02:22.350 align:start position:0%
efficient than the generic OS can do and
 

01:02:22.350 --> 01:02:25.350 align:start position:0%
efficient than the generic OS can do and
you<01:02:23.350><c> basically</c><01:02:23.620><c> have</c><01:02:23.980><c> to</c><01:02:24.100><c> reevaluate</c><01:02:24.370><c> that</c>

01:02:25.350 --> 01:02:25.360 align:start position:0%
you basically have to reevaluate that
 

01:02:25.360 --> 01:02:27.050 align:start position:0%
you basically have to reevaluate that
for<01:02:25.570><c> your</c><01:02:25.660><c> own</c><01:02:25.720><c> application</c><01:02:26.410><c> do</c><01:02:26.590><c> you</c><01:02:26.710><c> have</c><01:02:26.950><c> a</c>

01:02:27.050 --> 01:02:27.060 align:start position:0%
for your own application do you have a
 

01:02:27.060 --> 01:02:29.550 align:start position:0%
for your own application do you have a
usage<01:02:28.060><c> pattern</c><01:02:28.510><c> you</c><01:02:28.660><c> always</c><01:02:29.170><c> have</c><01:02:29.350><c> something</c>

01:02:29.550 --> 01:02:29.560 align:start position:0%
usage pattern you always have something
 

01:02:29.560 --> 01:02:31.580 align:start position:0%
usage pattern you always have something
that's<01:02:29.770><c> a</c><01:02:29.890><c> always</c><01:02:30.220><c> first</c><01:02:30.460><c> in</c><01:02:30.640><c> first</c><01:02:30.910><c> out</c><01:02:31.180><c> and</c>

01:02:31.580 --> 01:02:31.590 align:start position:0%
that's a always first in first out and
 

01:02:31.590 --> 01:02:34.410 align:start position:0%
that's a always first in first out and
that<01:02:32.590><c> doesn't</c><01:02:32.860><c> necessarily</c><01:02:32.950><c> with</c><01:02:33.910><c> a</c><01:02:33.940><c> last</c><01:02:34.210><c> in</c>

01:02:34.410 --> 01:02:34.420 align:start position:0%
that doesn't necessarily with a last in
 

01:02:34.420 --> 01:02:37.230 align:start position:0%
that doesn't necessarily with a last in
first<01:02:34.450><c> out</c><01:02:34.840><c> in</c><01:02:34.900><c> the</c><01:02:35.110><c> vm</c><01:02:35.350><c> system</c><01:02:35.970><c> and</c><01:02:36.970><c> that's</c>

01:02:37.230 --> 01:02:37.240 align:start position:0%
first out in the vm system and that's
 

01:02:37.240 --> 01:02:38.520 align:start position:0%
first out in the vm system and that's
just<01:02:37.360><c> going</c><01:02:37.480><c> to</c><01:02:37.600><c> depend</c><01:02:37.870><c> on</c><01:02:38.050><c> you</c><01:02:38.230><c> as</c><01:02:38.380><c> your</c>

01:02:38.520 --> 01:02:38.530 align:start position:0%
just going to depend on you as your
 

01:02:38.530 --> 01:02:42.090 align:start position:0%
just going to depend on you as your
application<01:02:39.130><c> if</c><01:02:39.310><c> you</c><01:02:39.880><c> already</c><01:02:40.060><c> have</c><01:02:40.450><c> a</c><01:02:41.100><c> memory</c>

01:02:42.090 --> 01:02:42.100 align:start position:0%
application if you already have a memory
 

01:02:42.100 --> 01:02:43.740 align:start position:0%
application if you already have a memory
management<01:02:42.430><c> algorithm</c><01:02:42.940><c> that</c><01:02:43.000><c> you</c><01:02:43.180><c> know</c><01:02:43.390><c> is</c>

01:02:43.740 --> 01:02:43.750 align:start position:0%
management algorithm that you know is
 

01:02:43.750 --> 01:02:45.660 align:start position:0%
management algorithm that you know is
more<01:02:44.350><c> efficient</c><01:02:44.800><c> than</c><01:02:44.830><c> anybody</c><01:02:45.250><c> else</c><01:02:45.460><c> in</c><01:02:45.610><c> the</c>

01:02:45.660 --> 01:02:45.670 align:start position:0%
more efficient than anybody else in the
 

01:02:45.670 --> 01:02:47.730 align:start position:0%
more efficient than anybody else in the
world<01:02:45.820><c> can</c><01:02:46.030><c> do</c><01:02:46.210><c> then</c><01:02:46.930><c> you</c><01:02:47.050><c> probably</c><01:02:47.290><c> want</c><01:02:47.680><c> to</c>

01:02:47.730 --> 01:02:47.740 align:start position:0%
world can do then you probably want to
 

01:02:47.740 --> 01:02:49.680 align:start position:0%
world can do then you probably want to
stick<01:02:47.980><c> with</c><01:02:48.010><c> it</c><01:02:48.220><c> and</c><01:02:48.520><c> maybe</c><01:02:49.030><c> even</c><01:02:49.240><c> stick</c><01:02:49.540><c> with</c>

01:02:49.680 --> 01:02:49.690 align:start position:0%
stick with it and maybe even stick with
 

01:02:49.690 --> 01:02:52.830 align:start position:0%
stick with it and maybe even stick with
using<01:02:49.990><c> a</c><01:02:50.050><c> 32-bit</c><01:02:50.710><c> program</c><01:02:51.670><c> and</c><01:02:51.940><c> continue</c><01:02:52.780><c> to</c>

01:02:52.830 --> 01:02:52.840 align:start position:0%
using a 32-bit program and continue to
 

01:02:52.840 --> 01:02:55.890 align:start position:0%
using a 32-bit program and continue to
exploit<01:02:53.140><c> your</c><01:02:53.350><c> algorithm</c><01:02:54.570><c> but</c><01:02:55.570><c> it's</c><01:02:55.660><c> the</c><01:02:55.720><c> kind</c>

01:02:55.890 --> 01:02:55.900 align:start position:0%
exploit your algorithm but it's the kind
 

01:02:55.900 --> 01:02:57.630 align:start position:0%
exploit your algorithm but it's the kind
of<01:02:55.930><c> thing</c><01:02:56.050><c> you</c><01:02:56.110><c> want</c><01:02:56.380><c> to</c><01:02:56.470><c> actually</c><01:02:56.590><c> to</c><01:02:56.890><c> stop</c>

01:02:57.630 --> 01:02:57.640 align:start position:0%
of thing you want to actually to stop
 

01:02:57.640 --> 01:02:59.190 align:start position:0%
of thing you want to actually to stop
the<01:02:57.760><c> moment</c><01:02:58.090><c> they</c><01:02:58.360><c> take</c><01:02:58.570><c> a</c><01:02:58.600><c> look</c><01:02:58.810><c> at</c><01:02:58.930><c> and</c><01:02:59.080><c> say</c>

01:02:59.190 --> 01:02:59.200 align:start position:0%
the moment they take a look at and say
 

01:02:59.200 --> 01:03:01.500 align:start position:0%
the moment they take a look at and say
you<01:02:59.260><c> know</c><01:02:59.410><c> is</c><01:02:59.620><c> this</c><01:02:59.950><c> the</c><01:03:00.610><c> best</c><01:03:00.760><c> algorithm</c><01:03:01.360><c> or</c>

01:03:01.500 --> 01:03:01.510 align:start position:0%
you know is this the best algorithm or
 

01:03:01.510 --> 01:03:04.620 align:start position:0%
you know is this the best algorithm or
can<01:03:01.870><c> I</c><01:03:01.990><c> in</c><01:03:02.380><c> a</c><01:03:02.590><c> leverage</c><01:03:02.980><c> apple's</c><01:03:03.910><c> vm</c><01:03:04.210><c> system</c>

01:03:04.620 --> 01:03:04.630 align:start position:0%
can I in a leverage apple's vm system
 

01:03:04.630 --> 01:03:13.260 align:start position:0%
can I in a leverage apple's vm system
and<01:03:04.750><c> get</c><01:03:04.840><c> something</c><01:03:05.170><c> better</c><01:03:09.360><c> ok</c><01:03:10.680><c> so</c><01:03:12.270><c> what</c>

01:03:13.260 --> 01:03:13.270 align:start position:0%
and get something better ok so what
 

01:03:13.270 --> 01:03:15.810 align:start position:0%
and get something better ok so what
64-bit<01:03:14.050><c> does</c><01:03:14.260><c> for</c><01:03:14.560><c> us</c><01:03:14.680><c> is</c><01:03:14.890><c> that</c><01:03:14.980><c> it</c><01:03:15.430><c> really</c>

01:03:15.810 --> 01:03:15.820 align:start position:0%
64-bit does for us is that it really
 

01:03:15.820 --> 01:03:19.050 align:start position:0%
64-bit does for us is that it really
opens<01:03:16.270><c> up</c><01:03:16.450><c> a</c><01:03:16.750><c> lot</c><01:03:17.050><c> of</c><01:03:17.410><c> new</c><01:03:17.560><c> vistas</c><01:03:18.010><c> and</c><01:03:18.220><c> I've</c>

01:03:19.050 --> 01:03:19.060 align:start position:0%
opens up a lot of new vistas and I've
 

01:03:19.060 --> 01:03:20.880 align:start position:0%
opens up a lot of new vistas and I've
talked<01:03:19.300><c> about</c><01:03:19.540><c> a</c><01:03:19.570><c> couple</c><01:03:19.870><c> very</c><01:03:20.230><c> specific</c>

01:03:20.880 --> 01:03:20.890 align:start position:0%
talked about a couple very specific
 

01:03:20.890 --> 01:03:23.010 align:start position:0%
talked about a couple very specific
things<01:03:21.130><c> but</c><01:03:21.940><c> you</c><01:03:22.300><c> know</c><01:03:22.390><c> they're</c><01:03:22.570><c> just</c><01:03:22.810><c> there</c>

01:03:23.010 --> 01:03:23.020 align:start position:0%
things but you know they're just there
 

01:03:23.020 --> 01:03:26.040 align:start position:0%
things but you know they're just there
are<01:03:23.080><c> things</c><01:03:23.230><c> we</c><01:03:23.380><c> already</c><01:03:23.560><c> know</c><01:03:23.770><c> about</c><01:03:25.050><c> there's</c>

01:03:26.040 --> 01:03:26.050 align:start position:0%
are things we already know about there's
 

01:03:26.050 --> 01:03:28.380 align:start position:0%
are things we already know about there's
actually<01:03:26.410><c> all</c><01:03:26.980><c> kinds</c><01:03:27.550><c> of</c><01:03:27.610><c> opportunities</c><01:03:27.910><c> that</c>

01:03:28.380 --> 01:03:28.390 align:start position:0%
actually all kinds of opportunities that
 

01:03:28.390 --> 01:03:29.970 align:start position:0%
actually all kinds of opportunities that
we<01:03:28.480><c> really</c><01:03:28.720><c> don't</c><01:03:28.840><c> know</c><01:03:29.050><c> about</c><01:03:29.200><c> I</c><01:03:29.560><c> was</c>

01:03:29.970 --> 01:03:29.980 align:start position:0%
we really don't know about I was
 

01:03:29.980 --> 01:03:32.040 align:start position:0%
we really don't know about I was
actually<01:03:30.130><c> talking</c><01:03:30.430><c> with</c><01:03:30.690><c> one</c><01:03:31.690><c> of</c><01:03:31.780><c> our</c><01:03:31.870><c> guys</c>

01:03:32.040 --> 01:03:32.050 align:start position:0%
actually talking with one of our guys
 

01:03:32.050 --> 01:03:33.990 align:start position:0%
actually talking with one of our guys
last<01:03:32.440><c> night</c><01:03:32.560><c> and</c><01:03:32.950><c> thinking</c><01:03:33.490><c> about</c><01:03:33.760><c> that</c>

01:03:33.990 --> 01:03:34.000 align:start position:0%
last night and thinking about that
 

01:03:34.000 --> 01:03:36.660 align:start position:0%
last night and thinking about that
surface<01:03:34.540><c> of</c><01:03:34.690><c> the</c><01:03:34.750><c> earth</c><01:03:34.780><c> analogy</c><01:03:35.620><c> and</c><01:03:35.890><c> in</c><01:03:36.460><c> fact</c>

01:03:36.660 --> 01:03:36.670 align:start position:0%
surface of the earth analogy and in fact
 

01:03:36.670 --> 01:03:39.090 align:start position:0%
surface of the earth analogy and in fact
if<01:03:36.880><c> you</c><01:03:37.000><c> think</c><01:03:37.210><c> about</c><01:03:37.270><c> it</c><01:03:37.450><c> every</c><01:03:38.410><c> point</c><01:03:38.740><c> on</c><01:03:38.950><c> the</c>

01:03:39.090 --> 01:03:39.100 align:start position:0%
if you think about it every point on the
 

01:03:39.100 --> 01:03:41.520 align:start position:0%
if you think about it every point on the
surface<01:03:39.310><c> of</c><01:03:39.580><c> the</c><01:03:39.640><c> earth</c><01:03:39.730><c> is</c><01:03:40.530><c> identifiable</c>

01:03:41.520 --> 01:03:41.530 align:start position:0%
surface of the earth is identifiable
 

01:03:41.530 --> 01:03:44.460 align:start position:0%
surface of the earth is identifiable
with<01:03:41.890><c> a</c><01:03:41.920><c> 64-bit</c><01:03:42.730><c> number</c><01:03:43.050><c> so</c><01:03:44.050><c> you</c><01:03:44.140><c> could</c><01:03:44.350><c> write</c>

01:03:44.460 --> 01:03:44.470 align:start position:0%
with a 64-bit number so you could write
 

01:03:44.470 --> 01:03:46.130 align:start position:0%
with a 64-bit number so you could write
an<01:03:44.620><c> application</c><01:03:44.770><c> for</c><01:03:45.430><c> instance</c><01:03:45.760><c> in</c><01:03:45.910><c> which</c>

01:03:46.130 --> 01:03:46.140 align:start position:0%
an application for instance in which
 

01:03:46.140 --> 01:03:48.270 align:start position:0%
an application for instance in which
instead<01:03:47.140><c> of</c><01:03:47.260><c> maintaining</c><01:03:47.650><c> say</c><01:03:47.890><c> a</c><01:03:47.920><c> linked</c><01:03:48.250><c> list</c>

01:03:48.270 --> 01:03:48.280 align:start position:0%
instead of maintaining say a linked list
 

01:03:48.280 --> 01:03:52.110 align:start position:0%
instead of maintaining say a linked list
of<01:03:48.670><c> locations</c><01:03:49.410><c> stored</c><01:03:50.410><c> at</c><01:03:50.530><c> 64</c><01:03:51.070><c> bit</c><01:03:51.220><c> values</c><01:03:51.610><c> you</c>

01:03:52.110 --> 01:03:52.120 align:start position:0%
of locations stored at 64 bit values you
 

01:03:52.120 --> 01:03:54.720 align:start position:0%
of locations stored at 64 bit values you
record<01:03:52.540><c> data</c><01:03:52.840><c> about</c><01:03:53.260><c> a</c><01:03:53.620><c> point</c><01:03:54.310><c> on</c><01:03:54.430><c> the</c><01:03:54.550><c> earth</c>

01:03:54.720 --> 01:03:54.730 align:start position:0%
record data about a point on the earth
 

01:03:54.730 --> 01:03:58.950 align:start position:0%
record data about a point on the earth
at<01:03:55.060><c> that</c><01:03:55.120><c> memory</c><01:03:56.020><c> address</c><01:03:56.790><c> ok</c><01:03:57.790><c> so</c><01:03:58.510><c> essentially</c>

01:03:58.950 --> 01:03:58.960 align:start position:0%
at that memory address ok so essentially
 

01:03:58.960 --> 01:04:00.450 align:start position:0%
at that memory address ok so essentially
you're<01:03:59.110><c> storing</c><01:03:59.440><c> data</c><01:03:59.680><c> on</c><01:03:59.890><c> the</c><01:03:59.980><c> earth</c><01:04:00.040><c> you</c><01:04:00.280><c> use</c>

01:04:00.450 --> 01:04:00.460 align:start position:0%
you're storing data on the earth you use
 

01:04:00.460 --> 01:04:02.910 align:start position:0%
you're storing data on the earth you use
the<01:04:00.580><c> entire</c><01:04:00.850><c> 64-bit</c><01:04:01.690><c> address</c><01:04:01.840><c> space</c><01:04:02.320><c> they</c>

01:04:02.910 --> 01:04:02.920 align:start position:0%
the entire 64-bit address space they
 

01:04:02.920 --> 01:04:05.760 align:start position:0%
the entire 64-bit address space they
point<01:04:03.430><c> under</c><01:04:03.640><c> my</c><01:04:03.790><c> feed</c><01:04:04.030><c> you</c><01:04:04.240><c> know</c><01:04:04.360><c> is</c><01:04:04.770><c> 4589</c>

01:04:05.760 --> 01:04:05.770 align:start position:0%
point under my feed you know is 4589
 

01:04:05.770 --> 01:04:08.310 align:start position:0%
point under my feed you know is 4589
bajillion<01:04:06.370><c> and</c><01:04:06.760><c> you</c><01:04:07.180><c> record</c><01:04:07.570><c> you</c><01:04:08.080><c> know</c><01:04:08.170><c> the</c>

01:04:08.310 --> 01:04:08.320 align:start position:0%
bajillion and you record you know the
 

01:04:08.320 --> 01:04:11.550 align:start position:0%
bajillion and you record you know the
color<01:04:08.560><c> of</c><01:04:08.650><c> the</c><01:04:08.920><c> carpet</c><01:04:09.130><c> at</c><01:04:09.430><c> that</c><01:04:09.700><c> location</c><01:04:10.560><c> and</c>

01:04:11.550 --> 01:04:11.560 align:start position:0%
color of the carpet at that location and
 

01:04:11.560 --> 01:04:12.930 align:start position:0%
color of the carpet at that location and
you<01:04:11.680><c> just</c><01:04:11.800><c> record</c><01:04:12.310><c> it</c><01:04:12.370><c> directly</c><01:04:12.700><c> at</c><01:04:12.820><c> that</c>

01:04:12.930 --> 01:04:12.940 align:start position:0%
you just record it directly at that
 

01:04:12.940 --> 01:04:15.150 align:start position:0%
you just record it directly at that
memory<01:04:13.240><c> location</c><01:04:13.690><c> and</c><01:04:13.930><c> as</c><01:04:14.680><c> you</c><01:04:14.800><c> read</c><01:04:15.040><c> and</c>

01:04:15.150 --> 01:04:15.160 align:start position:0%
memory location and as you read and
 

01:04:15.160 --> 01:04:17.010 align:start position:0%
memory location and as you read and
write<01:04:15.280><c> that</c><01:04:15.520><c> data</c><01:04:15.760><c> to</c><01:04:16.090><c> the</c><01:04:16.120><c> vm</c><01:04:16.450><c> system</c><01:04:16.870><c> will</c>

01:04:17.010 --> 01:04:17.020 align:start position:0%
write that data to the vm system will
 

01:04:17.020 --> 01:04:20.010 align:start position:0%
write that data to the vm system will
handle<01:04:17.290><c> the</c><01:04:17.440><c> paging</c><01:04:17.800><c> of</c><01:04:17.890><c> that</c><01:04:18.040><c> blob</c><01:04:18.420><c> so</c><01:04:19.420><c> it's</c>

01:04:20.010 --> 01:04:20.020 align:start position:0%
handle the paging of that blob so it's
 

01:04:20.020 --> 01:04:21.480 align:start position:0%
handle the paging of that blob so it's
kind<01:04:20.230><c> of</c><01:04:20.290><c> exotic</c><01:04:20.620><c> right</c><01:04:21.010><c> you</c><01:04:21.160><c> know</c><01:04:21.250><c> anything</c>

01:04:21.480 --> 01:04:21.490 align:start position:0%
kind of exotic right you know anything
 

01:04:21.490 --> 01:04:22.770 align:start position:0%
kind of exotic right you know anything
about<01:04:21.640><c> that's</c><01:04:21.850><c> kind</c><01:04:22.090><c> of</c><01:04:22.150><c> silly</c><01:04:22.360><c> you</c><01:04:22.540><c> know</c><01:04:22.570><c> who</c>

01:04:22.770 --> 01:04:22.780 align:start position:0%
about that's kind of silly you know who
 

01:04:22.780 --> 01:04:24.150 align:start position:0%
about that's kind of silly you know who
would<01:04:22.900><c> do</c><01:04:23.050><c> that</c><01:04:23.080><c> but</c><01:04:23.710><c> the</c><01:04:23.800><c> thing</c><01:04:23.920><c> is</c><01:04:23.950><c> that's</c>

01:04:24.150 --> 01:04:24.160 align:start position:0%
would do that but the thing is that's
 

01:04:24.160 --> 01:04:26.370 align:start position:0%
would do that but the thing is that's
actually<01:04:24.550><c> something</c><01:04:24.670><c> you</c><01:04:24.910><c> can</c><01:04:25.210><c> do</c><01:04:25.390><c> and</c><01:04:25.690><c> since</c>

01:04:26.370 --> 01:04:26.380 align:start position:0%
actually something you can do and since
 

01:04:26.380 --> 01:04:28.150 align:start position:0%
actually something you can do and since
you<01:04:26.470><c> couldn't</c><01:04:26.740><c> do</c><01:04:26.920><c> previously</c>

01:04:28.150 --> 01:04:28.160 align:start position:0%
you couldn't do previously
 

01:04:28.160 --> 01:04:29.650 align:start position:0%
you couldn't do previously
so<01:04:28.280><c> you</c><01:04:28.549><c> know</c><01:04:28.670><c> maybe</c><01:04:28.849><c> it's</c><01:04:29.030><c> a</c><01:04:29.059><c> good</c><01:04:29.210><c> idea</c><01:04:29.299><c> maybe</c>

01:04:29.650 --> 01:04:29.660 align:start position:0%
so you know maybe it's a good idea maybe
 

01:04:29.660 --> 01:04:32.020 align:start position:0%
so you know maybe it's a good idea maybe
it's<01:04:29.869><c> not</c><01:04:30.099><c> so</c><01:04:31.099><c> there's</c><01:04:31.369><c> a</c><01:04:31.490><c> real</c><01:04:31.520><c> bottom</c><01:04:32.000><c> line</c>

01:04:32.020 --> 01:04:32.030 align:start position:0%
it's not so there's a real bottom line
 

01:04:32.030 --> 01:04:33.910 align:start position:0%
it's not so there's a real bottom line
in<01:04:32.329><c> all</c><01:04:32.450><c> this</c><01:04:32.630><c> is</c><01:04:32.690><c> that</c><01:04:32.869><c> that</c><01:04:33.319><c> these</c><01:04:33.530><c> kinds</c><01:04:33.890><c> of</c>

01:04:33.910 --> 01:04:33.920 align:start position:0%
in all this is that that these kinds of
 

01:04:33.920 --> 01:04:35.650 align:start position:0%
in all this is that that these kinds of
applications<01:04:34.099><c> are</c><01:04:34.760><c> actually</c><01:04:35.089><c> only</c><01:04:35.240><c> limited</c>

01:04:35.650 --> 01:04:35.660 align:start position:0%
applications are actually only limited
 

01:04:35.660 --> 01:04:37.900 align:start position:0%
applications are actually only limited
by<01:04:35.690><c> your</c><01:04:35.839><c> imagination</c><01:04:36.079><c> and</c><01:04:36.920><c> the</c><01:04:37.280><c> final</c><01:04:37.609><c> Tiger</c>

01:04:37.900 --> 01:04:37.910 align:start position:0%
by your imagination and the final Tiger
 

01:04:37.910 --> 01:04:40.270 align:start position:0%
by your imagination and the final Tiger
we're<01:04:38.059><c> going</c><01:04:38.180><c> to</c><01:04:38.240><c> give</c><01:04:38.390><c> you</c><01:04:38.510><c> the</c><01:04:38.720><c> full</c><01:04:39.280><c> 64-bit</c>

01:04:40.270 --> 01:04:40.280 align:start position:0%
we're going to give you the full 64-bit
 

01:04:40.280 --> 01:04:43.420 align:start position:0%
we're going to give you the full 64-bit
address<01:04:40.819><c> space</c><01:04:41.270><c> and</c><01:04:41.799><c> most</c><01:04:42.799><c> other</c><01:04:43.039><c> systems</c>

01:04:43.420 --> 01:04:43.430 align:start position:0%
address space and most other systems
 

01:04:43.430 --> 01:04:44.589 align:start position:0%
address space and most other systems
don't<01:04:43.640><c> give</c><01:04:43.819><c> you</c><01:04:43.910><c> that</c><01:04:44.059><c> much</c><01:04:44.240><c> they</c><01:04:44.390><c> give</c><01:04:44.510><c> you</c>

01:04:44.589 --> 01:04:44.599 align:start position:0%
don't give you that much they give you
 

01:04:44.599 --> 01:04:46.059 align:start position:0%
don't give you that much they give you
somewhat<01:04:44.930><c> less</c><01:04:45.109><c> than</c><01:04:45.289><c> that</c><01:04:45.410><c> so</c><01:04:45.619><c> I</c><01:04:45.859><c> gave</c><01:04:46.010><c> you</c>

01:04:46.059 --> 01:04:46.069 align:start position:0%
somewhat less than that so I gave you
 

01:04:46.069 --> 01:04:47.890 align:start position:0%
somewhat less than that so I gave you
the<01:04:46.190><c> whole</c><01:04:46.369><c> thing</c><01:04:46.400><c> and</c><01:04:46.849><c> we're</c><01:04:47.599><c> actually</c><01:04:47.720><c> very</c>

01:04:47.890 --> 01:04:47.900 align:start position:0%
the whole thing and we're actually very
 

01:04:47.900 --> 01:04:50.829 align:start position:0%
the whole thing and we're actually very
excited<01:04:48.470><c> to</c><01:04:48.589><c> see</c><01:04:48.619><c> what</c><01:04:49.430><c> you'll</c><01:04:49.579><c> think</c><01:04:50.240><c> of</c><01:04:50.660><c> to</c>

01:04:50.829 --> 01:04:50.839 align:start position:0%
excited to see what you'll think of to
 

01:04:50.839 --> 01:04:55.839 align:start position:0%
excited to see what you'll think of to
do<01:04:50.990><c> with</c><01:04:51.109><c> it</c><01:04:51.260><c> in</c><01:04:51.349><c> the</c><01:04:51.410><c> future</c><01:04:52.990><c> so</c><01:04:54.640><c> that's</c><01:04:55.640><c> my</c>

01:04:55.839 --> 01:04:55.849 align:start position:0%
do with it in the future so that's my
 

01:04:55.849 --> 01:04:58.450 align:start position:0%
do with it in the future so that's my
part<01:04:56.119><c> and</c><01:04:56.299><c> I'd</c><01:04:56.599><c> like</c><01:04:56.780><c> to</c><01:04:57.130><c> bring</c><01:04:58.130><c> up</c><01:04:58.250><c> Matt</c>

01:04:58.450 --> 01:04:58.460 align:start position:0%
part and I'd like to bring up Matt
 

01:04:58.460 --> 01:05:01.630 align:start position:0%
part and I'd like to bring up Matt
Formica<01:04:59.059><c> to</c><01:04:59.359><c> run</c><01:04:59.750><c> they</c><01:04:59.960><c> do</c><01:05:00.920><c> the</c><01:05:01.039><c> wrap</c><01:05:01.190><c> up</c><01:05:01.430><c> and</c>

01:05:01.630 --> 01:05:01.640 align:start position:0%
Formica to run they do the wrap up and
 

01:05:01.640 --> 01:05:03.940 align:start position:0%
Formica to run they do the wrap up and
do<01:05:01.760><c> the</c><01:05:01.880><c> Q&amp;A</c><01:05:02.150><c> session</c><01:05:02.599><c> and</c><01:05:03.020><c> thank</c><01:05:03.740><c> you</c><01:05:03.799><c> very</c>

01:05:03.940 --> 01:05:03.950 align:start position:0%
do the Q&amp;A session and thank you very
 

01:05:03.950 --> 01:05:12.279 align:start position:0%
do the Q&amp;A session and thank you very
much<01:05:10.119><c> so</c><01:05:11.119><c> you've</c><01:05:11.240><c> seen</c><01:05:11.420><c> a</c><01:05:11.480><c> lot</c><01:05:11.539><c> of</c><01:05:11.690><c> information</c>

01:05:12.279 --> 01:05:12.289 align:start position:0%
much so you've seen a lot of information
 

01:05:12.289 --> 01:05:15.910 align:start position:0%
much so you've seen a lot of information
about<01:05:12.380><c> 64</c><01:05:13.160><c> bit</c><01:05:13.339><c> today</c><01:05:14.349><c> there</c><01:05:15.349><c> is</c><01:05:15.559><c> further</c>

01:05:15.910 --> 01:05:15.920 align:start position:0%
about 64 bit today there is further
 

01:05:15.920 --> 01:05:18.460 align:start position:0%
about 64 bit today there is further
documentation<01:05:16.299><c> information</c><01:05:17.299><c> available</c><01:05:17.780><c> for</c>

01:05:18.460 --> 01:05:18.470 align:start position:0%
documentation information available for
 

01:05:18.470 --> 01:05:20.890 align:start position:0%
documentation information available for
you<01:05:18.700><c> the</c><01:05:19.700><c> main</c><01:05:19.880><c> thing</c><01:05:19.910><c> right</c><01:05:20.329><c> now</c><01:05:20.390><c> is</c><01:05:20.539><c> the</c>

01:05:20.890 --> 01:05:20.900 align:start position:0%
you the main thing right now is the
 

01:05:20.900 --> 01:05:23.049 align:start position:0%
you the main thing right now is the
64-bit<01:05:21.740><c> transition</c><01:05:22.400><c> guy</c><01:05:22.579><c> that's</c><01:05:22.910><c> been</c>

01:05:23.049 --> 01:05:23.059 align:start position:0%
64-bit transition guy that's been
 

01:05:23.059 --> 01:05:25.900 align:start position:0%
64-bit transition guy that's been
written<01:05:23.329><c> it</c><01:05:24.230><c> provides</c><01:05:24.559><c> kind</c><01:05:24.890><c> of</c><01:05:24.950><c> the</c><01:05:25.069><c> state</c><01:05:25.880><c> of</c>

01:05:25.900 --> 01:05:25.910 align:start position:0%
written it provides kind of the state of
 

01:05:25.910 --> 01:05:27.549 align:start position:0%
written it provides kind of the state of
the<01:05:26.089><c> world</c><01:05:26.210><c> right</c><01:05:26.510><c> now</c><01:05:26.539><c> and</c><01:05:26.869><c> tiger</c><01:05:27.230><c> with</c><01:05:27.440><c> the</c>

01:05:27.549 --> 01:05:27.559 align:start position:0%
the world right now and tiger with the
 

01:05:27.559 --> 01:05:30.160 align:start position:0%
the world right now and tiger with the
preview<01:05:27.950><c> DVD</c><01:05:28.339><c> that</c><01:05:28.490><c> you</c><01:05:28.549><c> have</c><01:05:28.869><c> so</c><01:05:29.869><c> that's</c><01:05:30.049><c> the</c>

01:05:30.160 --> 01:05:30.170 align:start position:0%
preview DVD that you have so that's the
 

01:05:30.170 --> 01:05:32.680 align:start position:0%
preview DVD that you have so that's the
best<01:05:30.289><c> place</c><01:05:30.589><c> to</c><01:05:30.829><c> get</c><01:05:30.950><c> information</c><01:05:31.130><c> about</c><01:05:31.819><c> what</c>

01:05:32.680 --> 01:05:32.690 align:start position:0%
best place to get information about what
 

01:05:32.690 --> 01:05:36.609 align:start position:0%
best place to get information about what
we're<01:05:32.839><c> doing</c><01:05:34.839><c> we're</c><01:05:35.839><c> now</c><01:05:35.960><c> going</c><01:05:36.170><c> to</c><01:05:36.230><c> bring</c><01:05:36.440><c> up</c>

01:05:36.609 --> 01:05:36.619 align:start position:0%
we're doing we're now going to bring up
 

01:05:36.619 --> 01:05:38.680 align:start position:0%
we're doing we're now going to bring up
our<01:05:36.770><c> QA</c><01:05:37.250><c> panel</c><01:05:37.970><c> we</c><01:05:38.180><c> have</c><01:05:38.329><c> a</c><01:05:38.359><c> bunch</c><01:05:38.599><c> of</c>

01:05:38.680 --> 01:05:38.690 align:start position:0%
our QA panel we have a bunch of
 

01:05:38.690 --> 01:05:41.200 align:start position:0%
our QA panel we have a bunch of
engineers<01:05:39.079><c> who</c><01:05:39.230><c> are</c><01:05:39.260><c> going</c><01:05:39.380><c> to</c><01:05:39.440><c> come</c><01:05:39.619><c> up</c><01:05:40.210><c> you</c>

01:05:41.200 --> 01:05:41.210 align:start position:0%
engineers who are going to come up you
 

01:05:41.210 --> 01:05:42.730 align:start position:0%
engineers who are going to come up you
can<01:05:41.390><c> certainly</c><01:05:41.599><c> talk</c><01:05:42.140><c> with</c><01:05:42.319><c> us</c><01:05:42.470><c> gasps</c>

01:05:42.730 --> 01:05:42.740 align:start position:0%
can certainly talk with us gasps
 

01:05:42.740 --> 01:05:45.370 align:start position:0%
can certainly talk with us gasps
questions<01:05:43.220><c> this</c><01:05:43.400><c> week</c><01:05:43.900><c> beyond</c><01:05:44.900><c> this</c><01:05:45.109><c> week</c>

01:05:45.370 --> 01:05:45.380 align:start position:0%
questions this week beyond this week
 

01:05:45.380 --> 01:05:47.589 align:start position:0%
questions this week beyond this week
feel<01:05:46.039><c> free</c><01:05:46.250><c> to</c><01:05:46.430><c> send</c><01:05:46.579><c> me</c><01:05:46.789><c> an</c><01:05:46.880><c> email</c><01:05:47.000><c> I'm</c><01:05:47.450><c> the</c>

01:05:47.589 --> 01:05:47.599 align:start position:0%
feel free to send me an email I'm the
 

01:05:47.599 --> 01:05:49.720 align:start position:0%
feel free to send me an email I'm the
developer<01:05:47.990><c> tools</c><01:05:48.200><c> evangelist</c><01:05:48.890><c> here</c><01:05:49.309><c> at</c><01:05:49.430><c> Apple</c>

01:05:49.720 --> 01:05:49.730 align:start position:0%
developer tools evangelist here at Apple
 

01:05:49.730 --> 01:05:52.599 align:start position:0%
developer tools evangelist here at Apple
my<01:05:50.420><c> email</c><01:05:50.720><c> is</c><01:05:50.869><c> M</c><01:05:51.049><c> formica</c><01:05:51.589><c> at</c><01:05:51.770><c> apple</c><01:05:52.010><c> com</c><01:05:52.369><c> I'd</c>

01:05:52.599 --> 01:05:52.609 align:start position:0%
my email is M formica at apple com I'd
 

01:05:52.609 --> 01:05:56.250 align:start position:0%
my email is M formica at apple com I'd
love<01:05:52.789><c> to</c><01:05:53.230><c> communicate</c><01:05:54.230><c> with</c><01:05:54.380><c> you</c><01:05:54.559><c> via</c><01:05:54.859><c> email</c>

01:05:56.250 --> 01:05:56.260 align:start position:0%
love to communicate with you via email
 

01:05:56.260 --> 01:06:01.240 align:start position:0%
love to communicate with you via email
about<01:05:57.260><c> the</c><01:05:57.410><c> 64-bit</c><01:05:58.010><c> tool</c><01:05:58.190><c> set</c><01:05:58.460><c> on</c><01:05:58.579><c> Mac</c><01:05:58.760><c> OS</c><01:05:58.789><c> 10</c>

