WEBVTT
Kind: captions
Language: en

00:00:12.639 --> 00:00:15.789 align:start position:0%
 
hello<00:00:13.639><c> I'm</c><00:00:13.969><c> here</c><00:00:14.839><c> to</c><00:00:14.869><c> talk</c><00:00:15.289><c> about</c><00:00:15.349><c> network</c>

00:00:15.789 --> 00:00:15.799 align:start position:0%
hello I'm here to talk about network
 

00:00:15.799 --> 00:00:17.560 align:start position:0%
hello I'm here to talk about network
kernel<00:00:16.070><c> extensions</c><00:00:16.340><c> on</c><00:00:16.670><c> tiger</c><00:00:17.000><c> as</c><00:00:17.150><c> you</c>

00:00:17.560 --> 00:00:17.570 align:start position:0%
kernel extensions on tiger as you
 

00:00:17.570 --> 00:00:19.359 align:start position:0%
kernel extensions on tiger as you
probably<00:00:17.779><c> already</c><00:00:18.080><c> heard</c><00:00:18.439><c> we've</c><00:00:19.189><c> made</c><00:00:19.310><c> a</c>

00:00:19.359 --> 00:00:19.369 align:start position:0%
probably already heard we've made a
 

00:00:19.369 --> 00:00:22.810 align:start position:0%
probably already heard we've made a
number<00:00:19.460><c> of</c><00:00:19.730><c> massive</c><00:00:20.240><c> changes</c><00:00:21.730><c> to</c><00:00:22.730><c> the</c>

00:00:22.810 --> 00:00:22.820 align:start position:0%
number of massive changes to the
 

00:00:22.820 --> 00:00:26.109 align:start position:0%
number of massive changes to the
networking<00:00:23.150><c> stack</c><00:00:24.099><c> we</c><00:00:25.099><c> had</c><00:00:25.310><c> a</c><00:00:25.340><c> few</c><00:00:25.520><c> goals</c><00:00:25.699><c> we</c>

00:00:26.109 --> 00:00:26.119 align:start position:0%
networking stack we had a few goals we
 

00:00:26.119 --> 00:00:29.080 align:start position:0%
networking stack we had a few goals we
were<00:00:26.180><c> we've</c><00:00:26.989><c> got</c><00:00:27.489><c> we</c><00:00:28.489><c> needed</c><00:00:28.700><c> to</c><00:00:28.759><c> get</c><00:00:28.910><c> better</c>

00:00:29.080 --> 00:00:29.090 align:start position:0%
were we've got we needed to get better
 

00:00:29.090 --> 00:00:30.729 align:start position:0%
were we've got we needed to get better
SMP<00:00:29.570><c> scalability</c><00:00:30.169><c> we've</c><00:00:30.349><c> been</c><00:00:30.500><c> chipping</c>

00:00:30.729 --> 00:00:30.739 align:start position:0%
SMP scalability we've been chipping
 

00:00:30.739 --> 00:00:32.470 align:start position:0%
SMP scalability we've been chipping
dual-processor<00:00:31.160><c> machines</c><00:00:31.790><c> for</c><00:00:32.000><c> a</c><00:00:32.029><c> long</c><00:00:32.210><c> time</c>

00:00:32.470 --> 00:00:32.480 align:start position:0%
dual-processor machines for a long time
 

00:00:32.480 --> 00:00:34.420 align:start position:0%
dual-processor machines for a long time
and<00:00:32.750><c> the</c><00:00:33.379><c> way</c><00:00:33.469><c> that</c><00:00:33.649><c> the</c><00:00:33.739><c> locking</c><00:00:34.040><c> model</c><00:00:34.309><c> is</c>

00:00:34.420 --> 00:00:34.430 align:start position:0%
and the way that the locking model is
 

00:00:34.430 --> 00:00:36.430 align:start position:0%
and the way that the locking model is
set<00:00:34.579><c> up</c><00:00:34.700><c> in</c><00:00:34.850><c> the</c><00:00:34.940><c> kernel</c><00:00:35.239><c> in</c><00:00:35.390><c> panther</c><00:00:36.289><c> and</c>

00:00:36.430 --> 00:00:36.440 align:start position:0%
set up in the kernel in panther and
 

00:00:36.440 --> 00:00:38.619 align:start position:0%
set up in the kernel in panther and
previous<00:00:36.770><c> releases</c><00:00:37.070><c> really</c><00:00:38.030><c> didn't</c><00:00:38.300><c> give</c><00:00:38.480><c> us</c>

00:00:38.619 --> 00:00:38.629 align:start position:0%
previous releases really didn't give us
 

00:00:38.629 --> 00:00:40.600 align:start position:0%
previous releases really didn't give us
an<00:00:38.809><c> ability</c><00:00:39.289><c> to</c><00:00:39.680><c> take</c><00:00:39.829><c> full</c><00:00:40.070><c> advantage</c><00:00:40.190><c> of</c>

00:00:40.600 --> 00:00:40.610 align:start position:0%
an ability to take full advantage of
 

00:00:40.610 --> 00:00:44.140 align:start position:0%
an ability to take full advantage of
those<00:00:40.789><c> multiple</c><00:00:41.329><c> processors</c><00:00:42.489><c> in</c><00:00:43.489><c> addition</c><00:00:44.120><c> we</c>

00:00:44.140 --> 00:00:44.150 align:start position:0%
those multiple processors in addition we
 

00:00:44.150 --> 00:00:45.850 align:start position:0%
those multiple processors in addition we
wanted<00:00:44.450><c> to</c><00:00:44.480><c> add</c><00:00:44.660><c> support</c><00:00:44.930><c> for</c><00:00:45.170><c> 64-bit</c>

00:00:45.850 --> 00:00:45.860 align:start position:0%
wanted to add support for 64-bit
 

00:00:45.860 --> 00:00:49.180 align:start position:0%
wanted to add support for 64-bit
userspace<00:00:46.210><c> processes</c><00:00:47.210><c> and</c><00:00:47.710><c> these</c><00:00:48.710><c> changes</c>

00:00:49.180 --> 00:00:49.190 align:start position:0%
userspace processes and these changes
 

00:00:49.190 --> 00:00:52.780 align:start position:0%
userspace processes and these changes
required<00:00:50.380><c> in</c><00:00:51.380><c> order</c><00:00:51.530><c> to</c><00:00:51.710><c> implement</c><00:00:52.100><c> this</c><00:00:52.399><c> we</c>

00:00:52.780 --> 00:00:52.790 align:start position:0%
required in order to implement this we
 

00:00:52.790 --> 00:00:54.250 align:start position:0%
required in order to implement this we
needed<00:00:53.060><c> to</c><00:00:53.149><c> make</c><00:00:53.239><c> a</c><00:00:53.300><c> lot</c><00:00:53.510><c> of</c><00:00:53.540><c> changes</c><00:00:53.960><c> to</c><00:00:53.989><c> data</c>

00:00:54.250 --> 00:00:54.260 align:start position:0%
needed to make a lot of changes to data
 

00:00:54.260 --> 00:00:56.860 align:start position:0%
needed to make a lot of changes to data
structures<00:00:54.380><c> and</c><00:00:55.060><c> moving</c><00:00:56.060><c> up</c><00:00:56.180><c> functions</c>

00:00:56.860 --> 00:00:56.870 align:start position:0%
structures and moving up functions
 

00:00:56.870 --> 00:01:02.319 align:start position:0%
structures and moving up functions
around<00:00:57.020><c> and</c><00:00:57.440><c> it</c><00:00:57.860><c> really</c><00:00:58.270><c> led</c><00:00:59.270><c> to</c><00:01:00.640><c> just</c><00:01:01.640><c> massive</c>

00:01:02.319 --> 00:01:02.329 align:start position:0%
around and it really led to just massive
 

00:01:02.329 --> 00:01:05.590 align:start position:0%
around and it really led to just massive
changes<00:01:02.630><c> almost</c><00:01:02.780><c> everywhere</c><00:01:03.549><c> which</c><00:01:04.600><c> broke</c>

00:01:05.590 --> 00:01:05.600 align:start position:0%
changes almost everywhere which broke
 

00:01:05.600 --> 00:01:07.899 align:start position:0%
changes almost everywhere which broke
kernel<00:01:06.110><c> extensions</c><00:01:06.409><c> the</c><00:01:06.979><c> previous</c><00:01:07.640><c> network</c>

00:01:07.899 --> 00:01:07.909 align:start position:0%
kernel extensions the previous network
 

00:01:07.909 --> 00:01:09.880 align:start position:0%
kernel extensions the previous network
kernel<00:01:08.149><c> extensions</c><00:01:08.560><c> so</c><00:01:09.560><c> if</c><00:01:09.649><c> you</c><00:01:09.710><c> have</c><00:01:09.860><c> a</c>

00:01:09.880 --> 00:01:09.890 align:start position:0%
kernel extensions so if you have a
 

00:01:09.890 --> 00:01:11.319 align:start position:0%
kernel extensions so if you have a
network<00:01:10.100><c> crim</c><00:01:10.369><c> o</c><00:01:10.430><c> extension</c><00:01:10.880><c> today</c><00:01:11.000><c> that's</c>

00:01:11.319 --> 00:01:11.329 align:start position:0%
network crim o extension today that's
 

00:01:11.329 --> 00:01:13.149 align:start position:0%
network crim o extension today that's
floating<00:01:11.659><c> on</c><00:01:11.750><c> Panther</c><00:01:12.140><c> it</c><00:01:12.409><c> won't</c><00:01:12.799><c> load</c><00:01:12.979><c> on</c>

00:01:13.149 --> 00:01:13.159 align:start position:0%
floating on Panther it won't load on
 

00:01:13.159 --> 00:01:15.069 align:start position:0%
floating on Panther it won't load on
tiger<00:01:13.520><c> if</c><00:01:14.090><c> you</c><00:01:14.210><c> use</c><00:01:14.390><c> if</c><00:01:14.630><c> you're</c><00:01:14.719><c> just</c><00:01:14.840><c> an</c><00:01:14.990><c> IO</c>

00:01:15.069 --> 00:01:15.079 align:start position:0%
tiger if you use if you're just an IO
 

00:01:15.079 --> 00:01:16.569 align:start position:0%
tiger if you use if you're just an IO
kit<00:01:15.320><c> driver</c><00:01:15.560><c> and</c><00:01:15.860><c> ethernet</c><00:01:16.159><c> driver</c><00:01:16.399><c> or</c>

00:01:16.569 --> 00:01:16.579 align:start position:0%
kit driver and ethernet driver or
 

00:01:16.579 --> 00:01:19.149 align:start position:0%
kit driver and ethernet driver or
something<00:01:16.909><c> you'll</c><00:01:17.509><c> be</c><00:01:17.689><c> okay</c><00:01:17.990><c> but</c><00:01:18.469><c> if</c><00:01:18.740><c> you've</c>

00:01:19.149 --> 00:01:19.159 align:start position:0%
something you'll be okay but if you've
 

00:01:19.159 --> 00:01:22.599 align:start position:0%
something you'll be okay but if you've
been<00:01:19.310><c> using</c><00:01:19.520><c> the</c><00:01:19.759><c> old</c><00:01:19.880><c> dl</c><00:01:20.689><c> IL</c><00:01:20.959><c> layer</c><00:01:21.139><c> or</c><00:01:21.609><c> socket</c>

00:01:22.599 --> 00:01:22.609 align:start position:0%
been using the old dl IL layer or socket
 

00:01:22.609 --> 00:01:24.550 align:start position:0%
been using the old dl IL layer or socket
filters<00:01:23.119><c> protocol</c><00:01:23.719><c> filters</c><00:01:24.079><c> any</c><00:01:24.350><c> of</c><00:01:24.469><c> that</c>

00:01:24.550 --> 00:01:24.560 align:start position:0%
filters protocol filters any of that
 

00:01:24.560 --> 00:01:26.830 align:start position:0%
filters protocol filters any of that
stuff<00:01:25.240><c> you're</c><00:01:26.240><c> going</c><00:01:26.389><c> to</c><00:01:26.450><c> need</c><00:01:26.569><c> to</c><00:01:26.689><c> make</c>

00:01:26.830 --> 00:01:26.840 align:start position:0%
stuff you're going to need to make
 

00:01:26.840 --> 00:01:28.449 align:start position:0%
stuff you're going to need to make
changes<00:01:26.869><c> to</c><00:01:27.229><c> your</c><00:01:27.409><c> nke</c><00:01:27.740><c> to</c><00:01:27.920><c> get</c><00:01:28.039><c> it</c><00:01:28.130><c> to</c><00:01:28.189><c> work</c><00:01:28.279><c> on</c>

00:01:28.449 --> 00:01:28.459 align:start position:0%
changes to your nke to get it to work on
 

00:01:28.459 --> 00:01:32.590 align:start position:0%
changes to your nke to get it to work on
tiger<00:01:30.729><c> some</c><00:01:31.729><c> of</c><00:01:31.819><c> these</c><00:01:31.880><c> changes</c><00:01:32.240><c> involves</c>

00:01:32.590 --> 00:01:32.600 align:start position:0%
tiger some of these changes involves
 

00:01:32.600 --> 00:01:34.480 align:start position:0%
tiger some of these changes involves
moving<00:01:33.079><c> to</c><00:01:33.200><c> using</c><00:01:33.439><c> opaque</c><00:01:33.679><c> data</c><00:01:33.950><c> structures</c>

00:01:34.480 --> 00:01:34.490 align:start position:0%
moving to using opaque data structures
 

00:01:34.490 --> 00:01:38.889 align:start position:0%
moving to using opaque data structures
and<00:01:34.520><c> XS</c><00:01:35.299><c> or</c><00:01:35.420><c> functions</c><00:01:37.149><c> we</c><00:01:38.149><c> provide</c><00:01:38.539><c> colonel</c>

00:01:38.889 --> 00:01:38.899 align:start position:0%
and XS or functions we provide colonel
 

00:01:38.899 --> 00:01:40.239 align:start position:0%
and XS or functions we provide colonel
programming<00:01:39.350><c> interfaces</c><00:01:39.709><c> which</c><00:01:40.100><c> are</c>

00:01:40.239 --> 00:01:40.249 align:start position:0%
programming interfaces which are
 

00:01:40.249 --> 00:01:42.160 align:start position:0%
programming interfaces which are
well-defined<00:01:40.609><c> set</c><00:01:41.090><c> of</c><00:01:41.539><c> interfaces</c><00:01:41.810><c> for</c>

00:01:42.160 --> 00:01:42.170 align:start position:0%
well-defined set of interfaces for
 

00:01:42.170 --> 00:01:43.839 align:start position:0%
well-defined set of interfaces for
interacting<00:01:43.069><c> with</c><00:01:43.189><c> these</c><00:01:43.310><c> data</c><00:01:43.579><c> structures</c>

00:01:43.839 --> 00:01:43.849 align:start position:0%
interacting with these data structures
 

00:01:43.849 --> 00:01:46.989 align:start position:0%
interacting with these data structures
and<00:01:44.090><c> the</c><00:01:44.420><c> stack</c><00:01:45.490><c> the</c><00:01:46.490><c> initial</c><00:01:46.819><c> implementation</c>

00:01:46.989 --> 00:01:46.999 align:start position:0%
and the stack the initial implementation
 

00:01:46.999 --> 00:01:49.779 align:start position:0%
and the stack the initial implementation
of<00:01:47.539><c> those</c><00:01:47.659><c> KPIs</c><00:01:48.109><c> is</c><00:01:48.409><c> available</c><00:01:48.920><c> in</c><00:01:49.099><c> the</c><00:01:49.219><c> WWDC</c>

00:01:49.779 --> 00:01:49.789 align:start position:0%
of those KPIs is available in the WWDC
 

00:01:49.789 --> 00:01:52.660 align:start position:0%
of those KPIs is available in the WWDC
build<00:01:50.209><c> that's</c><00:01:51.020><c> on</c><00:01:51.200><c> your</c><00:01:51.380><c> CD</c><00:01:51.740><c> there</c><00:01:52.459><c> are</c>

00:01:52.660 --> 00:01:52.670 align:start position:0%
build that's on your CD there are
 

00:01:52.670 --> 00:01:55.359 align:start position:0%
build that's on your CD there are
actually<00:01:52.849><c> some</c><00:01:53.179><c> bugs</c><00:01:53.569><c> in</c><00:01:53.869><c> the</c><00:01:54.259><c> kernel</c><00:01:54.590><c> on</c><00:01:54.770><c> that</c>

00:01:55.359 --> 00:01:55.369 align:start position:0%
actually some bugs in the kernel on that
 

00:01:55.369 --> 00:01:57.849 align:start position:0%
actually some bugs in the kernel on that
that<00:01:56.209><c> will</c><00:01:56.419><c> lead</c><00:01:56.659><c> to</c><00:01:56.779><c> a</c><00:01:56.810><c> panic</c><00:01:57.169><c> in</c><00:01:57.349><c> a</c><00:01:57.409><c> few</c>

00:01:57.849 --> 00:01:57.859 align:start position:0%
that will lead to a panic in a few
 

00:01:57.859 --> 00:02:01.209 align:start position:0%
that will lead to a panic in a few
situations<00:01:58.209><c> so</c><00:01:59.209><c> along</c><00:01:59.840><c> with</c><00:01:59.899><c> the</c><00:02:00.889><c> previous</c>

00:02:01.209 --> 00:02:01.219 align:start position:0%
situations so along with the previous
 

00:02:01.219 --> 00:02:04.480 align:start position:0%
situations so along with the previous
session<00:02:01.399><c> session</c><00:02:01.909><c> 103</c><00:02:02.539><c> there's</c><00:02:02.869><c> some</c><00:02:03.490><c> content</c>

00:02:04.480 --> 00:02:04.490 align:start position:0%
session session 103 there's some content
 

00:02:04.490 --> 00:02:06.550 align:start position:0%
session session 103 there's some content
that's<00:02:04.639><c> available</c><00:02:04.729><c> online</c><00:02:05.209><c> and</c><00:02:05.659><c> part</c><00:02:06.380><c> of</c><00:02:06.439><c> that</c>

00:02:06.550 --> 00:02:06.560 align:start position:0%
that's available online and part of that
 

00:02:06.560 --> 00:02:08.620 align:start position:0%
that's available online and part of that
is<00:02:06.619><c> a</c><00:02:06.740><c> new</c><00:02:06.919><c> kernel</c><00:02:07.639><c> that</c><00:02:07.939><c> you</c><00:02:08.060><c> can</c><00:02:08.239><c> use</c><00:02:08.420><c> when</c>

00:02:08.620 --> 00:02:08.630 align:start position:0%
is a new kernel that you can use when
 

00:02:08.630 --> 00:02:09.880 align:start position:0%
is a new kernel that you can use when
you're<00:02:08.750><c> trying</c><00:02:08.959><c> to</c><00:02:09.050><c> test</c><00:02:09.319><c> these</c><00:02:09.500><c> colonel</c>

00:02:09.880 --> 00:02:09.890 align:start position:0%
you're trying to test these colonel
 

00:02:09.890 --> 00:02:12.220 align:start position:0%
you're trying to test these colonel
programming<00:02:10.250><c> interfaces</c><00:02:11.050><c> so</c><00:02:12.050><c> I</c><00:02:12.110><c> encourage</c>

00:02:12.220 --> 00:02:12.230 align:start position:0%
programming interfaces so I encourage
 

00:02:12.230 --> 00:02:13.540 align:start position:0%
programming interfaces so I encourage
you<00:02:12.410><c> to</c><00:02:12.500><c> go</c><00:02:12.650><c> ahead</c><00:02:12.680><c> and</c><00:02:12.920><c> download</c><00:02:13.010><c> that</c><00:02:13.340><c> and</c>

00:02:13.540 --> 00:02:13.550 align:start position:0%
you to go ahead and download that and
 

00:02:13.550 --> 00:02:15.339 align:start position:0%
you to go ahead and download that and
install<00:02:13.670><c> that</c><00:02:14.030><c> there's</c><00:02:14.810><c> a</c><00:02:14.930><c> reading</c><00:02:15.170><c> you</c><00:02:15.230><c> that</c>

00:02:15.339 --> 00:02:15.349 align:start position:0%
install that there's a reading you that
 

00:02:15.349 --> 00:02:16.740 align:start position:0%
install that there's a reading you that
explains<00:02:15.500><c> how</c><00:02:15.709><c> to</c><00:02:15.800><c> get</c><00:02:15.950><c> it</c><00:02:16.069><c> installed</c><00:02:16.220><c> and</c>

00:02:16.740 --> 00:02:16.750 align:start position:0%
explains how to get it installed and
 

00:02:16.750 --> 00:02:19.150 align:start position:0%
explains how to get it installed and
that'll<00:02:17.750><c> let</c><00:02:17.870><c> you</c><00:02:18.020><c> play</c><00:02:18.290><c> around</c><00:02:18.410><c> with</c><00:02:18.590><c> what</c>

00:02:19.150 --> 00:02:19.160 align:start position:0%
that'll let you play around with what
 

00:02:19.160 --> 00:02:22.600 align:start position:0%
that'll let you play around with what
I'm<00:02:19.250><c> about</c><00:02:19.280><c> to</c><00:02:19.540><c> show</c><00:02:20.540><c> you</c><00:02:21.340><c> so</c><00:02:22.340><c> we're</c><00:02:22.430><c> going</c><00:02:22.520><c> to</c>

00:02:22.600 --> 00:02:22.610 align:start position:0%
I'm about to show you so we're going to
 

00:02:22.610 --> 00:02:23.470 align:start position:0%
I'm about to show you so we're going to
go<00:02:22.640><c> over</c><00:02:22.730><c> the</c><00:02:22.910><c> colonel</c><00:02:23.120><c> programming</c>

00:02:23.470 --> 00:02:23.480 align:start position:0%
go over the colonel programming
 

00:02:23.480 --> 00:02:24.600 align:start position:0%
go over the colonel programming
interfaces

00:02:24.600 --> 00:02:24.610 align:start position:0%
interfaces
 

00:02:24.610 --> 00:02:27.570 align:start position:0%
interfaces
yeah<00:02:25.120><c> these</c><00:02:25.270><c> are</c><00:02:25.330><c> available</c><00:02:25.600><c> on</c><00:02:25.840><c> tiger</c><00:02:26.580><c> these</c>

00:02:27.570 --> 00:02:27.580 align:start position:0%
yeah these are available on tiger these
 

00:02:27.580 --> 00:02:29.280 align:start position:0%
yeah these are available on tiger these
should<00:02:27.850><c> give</c><00:02:28.000><c> us</c><00:02:28.120><c> more</c><00:02:28.150><c> stability</c><00:02:28.630><c> so</c><00:02:29.170><c> that</c>

00:02:29.280 --> 00:02:29.290 align:start position:0%
should give us more stability so that
 

00:02:29.290 --> 00:02:30.540 align:start position:0%
should give us more stability so that
when<00:02:29.410><c> we</c><00:02:29.470><c> make</c><00:02:29.620><c> changes</c><00:02:29.800><c> in</c><00:02:30.040><c> the</c><00:02:30.130><c> future</c><00:02:30.430><c> we</c>

00:02:30.540 --> 00:02:30.550 align:start position:0%
when we make changes in the future we
 

00:02:30.550 --> 00:02:31.860 align:start position:0%
when we make changes in the future we
aren't<00:02:30.760><c> going</c><00:02:30.910><c> to</c><00:02:31.000><c> keep</c><00:02:31.330><c> breaking</c><00:02:31.780><c> your</c>

00:02:31.860 --> 00:02:31.870 align:start position:0%
aren't going to keep breaking your
 

00:02:31.870 --> 00:02:35.820 align:start position:0%
aren't going to keep breaking your
kernel<00:02:32.170><c> extensions</c><00:02:32.500><c> and</c><00:02:34.470><c> moving</c><00:02:35.470><c> over</c><00:02:35.620><c> to</c><00:02:35.740><c> the</c>

00:02:35.820 --> 00:02:35.830 align:start position:0%
kernel extensions and moving over to the
 

00:02:35.830 --> 00:02:37.170 align:start position:0%
kernel extensions and moving over to the
colonel<00:02:36.100><c> programming</c><00:02:36.580><c> interfaces</c><00:02:36.880><c> is</c>

00:02:37.170 --> 00:02:37.180 align:start position:0%
colonel programming interfaces is
 

00:02:37.180 --> 00:02:38.910 align:start position:0%
colonel programming interfaces is
required<00:02:37.600><c> to</c><00:02:37.900><c> get</c><00:02:38.110><c> your</c><00:02:38.260><c> text</c><00:02:38.560><c> running</c><00:02:38.830><c> on</c>

00:02:38.910 --> 00:02:38.920 align:start position:0%
required to get your text running on
 

00:02:38.920 --> 00:02:41.250 align:start position:0%
required to get your text running on
tiger<00:02:39.310><c> many</c><00:02:40.240><c> of</c><00:02:40.360><c> the</c><00:02:40.450><c> symbols</c><00:02:40.780><c> that</c><00:02:40.870><c> use</c><00:02:41.080><c> the</c>

00:02:41.250 --> 00:02:41.260 align:start position:0%
tiger many of the symbols that use the
 

00:02:41.260 --> 00:02:47.070 align:start position:0%
tiger many of the symbols that use the
link<00:02:41.440><c> against</c><00:02:41.830><c> are</c><00:02:41.950><c> no</c><00:02:42.160><c> longer</c><00:02:42.370><c> there</c><00:02:45.330><c> so</c><00:02:46.330><c> with</c>

00:02:47.070 --> 00:02:47.080 align:start position:0%
link against are no longer there so with
 

00:02:47.080 --> 00:02:49.050 align:start position:0%
link against are no longer there so with
a<00:02:47.110><c> better</c><00:02:47.290><c> SMP</c><00:02:47.710><c> scalability</c><00:02:48.340><c> as</c><00:02:48.550><c> I</c><00:02:48.760><c> said</c><00:02:48.940><c> we've</c>

00:02:49.050 --> 00:02:49.060 align:start position:0%
a better SMP scalability as I said we've
 

00:02:49.060 --> 00:02:50.190 align:start position:0%
a better SMP scalability as I said we've
been<00:02:49.090><c> shipping</c><00:02:49.360><c> this</c><00:02:49.540><c> dual</c><00:02:49.720><c> processor</c>

00:02:50.190 --> 00:02:50.200 align:start position:0%
been shipping this dual processor
 

00:02:50.200 --> 00:02:52.080 align:start position:0%
been shipping this dual processor
machines<00:02:50.500><c> for</c><00:02:50.709><c> a</c><00:02:50.740><c> long</c><00:02:50.890><c> time</c><00:02:51.100><c> and</c><00:02:51.400><c> we've</c><00:02:51.970><c> been</c>

00:02:52.080 --> 00:02:52.090 align:start position:0%
machines for a long time and we've been
 

00:02:52.090 --> 00:02:54.390 align:start position:0%
machines for a long time and we've been
using<00:02:52.240><c> this</c><00:02:52.450><c> thing</c><00:02:52.510><c> called</c><00:02:52.690><c> a</c><00:02:52.990><c> funnel</c><00:02:53.500><c> the</c>

00:02:54.390 --> 00:02:54.400 align:start position:0%
using this thing called a funnel the
 

00:02:54.400 --> 00:02:55.890 align:start position:0%
using this thing called a funnel the
network<00:02:54.640><c> funnel</c><00:02:54.970><c> to</c><00:02:55.150><c> protect</c><00:02:55.480><c> all</c><00:02:55.750><c> of</c><00:02:55.780><c> the</c>

00:02:55.890 --> 00:02:55.900 align:start position:0%
network funnel to protect all of the
 

00:02:55.900 --> 00:02:57.510 align:start position:0%
network funnel to protect all of the
data<00:02:56.140><c> structures</c><00:02:56.560><c> inside</c><00:02:56.770><c> the</c><00:02:57.040><c> kernel</c><00:02:57.370><c> and</c>

00:02:57.510 --> 00:02:57.520 align:start position:0%
data structures inside the kernel and
 

00:02:57.520 --> 00:03:00.420 align:start position:0%
data structures inside the kernel and
it's<00:02:57.760><c> basically</c><00:02:57.940><c> one</c><00:02:58.330><c> big</c><00:02:58.360><c> lock</c><00:02:59.190><c> we've</c><00:03:00.190><c> taken</c>

00:03:00.420 --> 00:03:00.430 align:start position:0%
it's basically one big lock we've taken
 

00:03:00.430 --> 00:03:01.949 align:start position:0%
it's basically one big lock we've taken
that<00:03:00.610><c> one</c><00:03:00.790><c> big</c><00:03:01.030><c> lock</c><00:03:01.240><c> and</c><00:03:01.510><c> we've</c><00:03:01.630><c> moved</c><00:03:01.810><c> to</c>

00:03:01.949 --> 00:03:01.959 align:start position:0%
that one big lock and we've moved to
 

00:03:01.959 --> 00:03:03.960 align:start position:0%
that one big lock and we've moved to
finer<00:03:02.200><c> grained</c><00:03:02.500><c> locking</c><00:03:02.950><c> where</c><00:03:03.700><c> we</c><00:03:03.820><c> use</c><00:03:03.940><c> a</c>

00:03:03.960 --> 00:03:03.970 align:start position:0%
finer grained locking where we use a
 

00:03:03.970 --> 00:03:06.960 align:start position:0%
finer grained locking where we use a
bunch<00:03:04.209><c> of</c><00:03:04.860><c> blocking</c><00:03:05.860><c> primitives</c><00:03:06.010><c> such</c><00:03:06.400><c> as</c><00:03:06.670><c> the</c>

00:03:06.960 --> 00:03:06.970 align:start position:0%
bunch of blocking primitives such as the
 

00:03:06.970 --> 00:03:08.880 align:start position:0%
bunch of blocking primitives such as the
simple<00:03:07.270><c> lock</c><00:03:07.420><c> a</c><00:03:07.690><c> mutex</c><00:03:08.170><c> and</c><00:03:08.440><c> multiple</c><00:03:08.709><c> reader</c>

00:03:08.880 --> 00:03:08.890 align:start position:0%
simple lock a mutex and multiple reader
 

00:03:08.890 --> 00:03:11.100 align:start position:0%
simple lock a mutex and multiple reader
single<00:03:09.310><c> rider</c><00:03:09.489><c> locks</c><00:03:09.760><c> and</c><00:03:10.030><c> we've</c><00:03:10.870><c> really</c>

00:03:11.100 --> 00:03:11.110 align:start position:0%
single rider locks and we've really
 

00:03:11.110 --> 00:03:12.210 align:start position:0%
single rider locks and we've really
broken<00:03:11.290><c> it</c><00:03:11.470><c> down</c><00:03:11.500><c> so</c><00:03:11.860><c> that</c><00:03:11.890><c> we</c><00:03:12.040><c> can</c><00:03:12.160><c> have</c>

00:03:12.210 --> 00:03:12.220 align:start position:0%
broken it down so that we can have
 

00:03:12.220 --> 00:03:14.010 align:start position:0%
broken it down so that we can have
multiple<00:03:12.400><c> processors</c><00:03:13.150><c> running</c><00:03:13.480><c> through</c><00:03:13.930><c> the</c>

00:03:14.010 --> 00:03:14.020 align:start position:0%
multiple processors running through the
 

00:03:14.020 --> 00:03:17.160 align:start position:0%
multiple processors running through the
stack<00:03:14.230><c> at</c><00:03:14.410><c> the</c><00:03:14.500><c> same</c><00:03:14.650><c> time</c><00:03:15.989><c> one</c><00:03:16.989><c> of</c><00:03:17.110><c> the</c>

00:03:17.160 --> 00:03:17.170 align:start position:0%
stack at the same time one of the
 

00:03:17.170 --> 00:03:18.510 align:start position:0%
stack at the same time one of the
results<00:03:17.620><c> of</c><00:03:17.709><c> this</c><00:03:17.830><c> is</c><00:03:18.040><c> that</c><00:03:18.190><c> the</c><00:03:18.280><c> kernel</c>

00:03:18.510 --> 00:03:18.520 align:start position:0%
results of this is that the kernel
 

00:03:18.520 --> 00:03:19.620 align:start position:0%
results of this is that the kernel
extensions<00:03:18.790><c> are</c><00:03:19.090><c> responsible</c><00:03:19.600><c> for</c>

00:03:19.620 --> 00:03:19.630 align:start position:0%
extensions are responsible for
 

00:03:19.630 --> 00:03:21.660 align:start position:0%
extensions are responsible for
protecting<00:03:19.870><c> their</c><00:03:20.290><c> own</c><00:03:20.380><c> data</c><00:03:20.560><c> since</c><00:03:21.430><c> there's</c>

00:03:21.660 --> 00:03:21.670 align:start position:0%
protecting their own data since there's
 

00:03:21.670 --> 00:03:24.000 align:start position:0%
protecting their own data since there's
no<00:03:21.790><c> longer</c><00:03:22.090><c> one</c><00:03:22.239><c> big</c><00:03:22.450><c> lock</c><00:03:22.660><c> that</c><00:03:22.930><c> goes</c><00:03:23.800><c> the</c>

00:03:24.000 --> 00:03:24.010 align:start position:0%
no longer one big lock that goes the
 

00:03:24.010 --> 00:03:25.410 align:start position:0%
no longer one big lock that goes the
stack<00:03:24.220><c> and</c><00:03:24.520><c> the</c><00:03:24.640><c> kernel</c><00:03:24.910><c> extensions</c><00:03:25.180><c> are</c>

00:03:25.410 --> 00:03:25.420 align:start position:0%
stack and the kernel extensions are
 

00:03:25.420 --> 00:03:26.960 align:start position:0%
stack and the kernel extensions are
running<00:03:25.660><c> under</c><00:03:25.930><c> they</c><00:03:26.200><c> have</c><00:03:26.350><c> to</c><00:03:26.470><c> be</c><00:03:26.560><c> aware</c><00:03:26.770><c> that</c>

00:03:26.960 --> 00:03:26.970 align:start position:0%
running under they have to be aware that
 

00:03:26.970 --> 00:03:31.050 align:start position:0%
running under they have to be aware that
they<00:03:27.970><c> could</c><00:03:28.150><c> be</c><00:03:28.270><c> re-entered</c><00:03:28.720><c> the</c><00:03:30.060><c> internal</c>

00:03:31.050 --> 00:03:31.060 align:start position:0%
they could be re-entered the internal
 

00:03:31.060 --> 00:03:32.550 align:start position:0%
they could be re-entered the internal
locking<00:03:31.180><c> model</c><00:03:31.600><c> that</c><00:03:31.720><c> we</c><00:03:31.810><c> use</c><00:03:32.019><c> is</c><00:03:32.260><c> mostly</c>

00:03:32.550 --> 00:03:32.560 align:start position:0%
locking model that we use is mostly
 

00:03:32.560 --> 00:03:35.940 align:start position:0%
locking model that we use is mostly
transparent<00:03:32.830><c> to</c><00:03:33.220><c> the</c><00:03:33.250><c> n</c><00:03:33.430><c> que</c><00:03:33.640><c> es</c><00:03:33.850><c> and</c><00:03:34.060><c> that</c><00:03:35.019><c> was</c>

00:03:35.940 --> 00:03:35.950 align:start position:0%
transparent to the n que es and that was
 

00:03:35.950 --> 00:03:37.500 align:start position:0%
transparent to the n que es and that was
done<00:03:36.130><c> intentionally</c><00:03:36.280><c> so</c><00:03:36.820><c> that</c><00:03:36.970><c> we</c><00:03:37.060><c> will</c><00:03:37.390><c> be</c>

00:03:37.500 --> 00:03:37.510 align:start position:0%
done intentionally so that we will be
 

00:03:37.510 --> 00:03:38.550 align:start position:0%
done intentionally so that we will be
able<00:03:37.570><c> to</c><00:03:37.720><c> make</c><00:03:37.810><c> changes</c><00:03:38.019><c> to</c><00:03:38.230><c> that</c><00:03:38.320><c> in</c><00:03:38.530><c> the</c>

00:03:38.550 --> 00:03:38.560 align:start position:0%
able to make changes to that in the
 

00:03:38.560 --> 00:03:44.070 align:start position:0%
able to make changes to that in the
future<00:03:38.709><c> as</c><00:03:39.130><c> we</c><00:03:39.370><c> tune</c><00:03:39.880><c> the</c><00:03:40.030><c> performance</c><00:03:42.810><c> so</c><00:03:43.810><c> in</c>

00:03:44.070 --> 00:03:44.080 align:start position:0%
future as we tune the performance so in
 

00:03:44.080 --> 00:03:45.570 align:start position:0%
future as we tune the performance so in
Panther<00:03:44.410><c> we</c><00:03:44.680><c> have</c><00:03:44.860><c> one</c><00:03:45.040><c> big</c><00:03:45.250><c> lock</c><00:03:45.430><c> around</c>

00:03:45.570 --> 00:03:45.580 align:start position:0%
Panther we have one big lock around
 

00:03:45.580 --> 00:03:47.280 align:start position:0%
Panther we have one big lock around
networking<00:03:46.209><c> and</c><00:03:46.450><c> we</c><00:03:46.540><c> have</c><00:03:46.660><c> another</c><00:03:46.870><c> big</c><00:03:47.049><c> lock</c>

00:03:47.280 --> 00:03:47.290 align:start position:0%
networking and we have another big lock
 

00:03:47.290 --> 00:03:50.789 align:start position:0%
networking and we have another big lock
around<00:03:47.440><c> the</c><00:03:47.650><c> file</c><00:03:47.799><c> system</c><00:03:48.010><c> and</c><00:03:48.870><c> in</c><00:03:49.870><c> tiger</c><00:03:50.230><c> so</c>

00:03:50.789 --> 00:03:50.799 align:start position:0%
around the file system and in tiger so
 

00:03:50.799 --> 00:03:52.199 align:start position:0%
around the file system and in tiger so
the<00:03:50.890><c> networking</c><00:03:51.190><c> stack</c><00:03:51.519><c> removed</c><00:03:51.850><c> to</c><00:03:52.000><c> a</c><00:03:52.030><c> bunch</c>

00:03:52.199 --> 00:03:52.209 align:start position:0%
the networking stack removed to a bunch
 

00:03:52.209 --> 00:03:54.860 align:start position:0%
the networking stack removed to a bunch
of<00:03:52.330><c> smaller</c><00:03:52.630><c> lock</c><00:03:52.900><c> in</c><00:03:53.170><c> various</c><00:03:53.769><c> areas</c><00:03:53.920><c> and</c>

00:03:54.860 --> 00:03:54.870 align:start position:0%
of smaller lock in various areas and
 

00:03:54.870 --> 00:03:57.870 align:start position:0%
of smaller lock in various areas and
we're<00:03:55.870><c> going</c><00:03:55.989><c> to</c><00:03:56.019><c> continue</c><00:03:56.140><c> to</c><00:03:56.440><c> fine-tune</c><00:03:56.920><c> the</c>

00:03:57.870 --> 00:03:57.880 align:start position:0%
we're going to continue to fine-tune the
 

00:03:57.880 --> 00:04:00.420 align:start position:0%
we're going to continue to fine-tune the
exact<00:03:58.180><c> locking</c><00:03:58.600><c> model</c><00:03:58.870><c> and</c><00:03:59.080><c> the</c><00:03:59.769><c> KPIs</c><00:04:00.190><c> are</c>

00:04:00.420 --> 00:04:00.430 align:start position:0%
exact locking model and the KPIs are
 

00:04:00.430 --> 00:04:02.070 align:start position:0%
exact locking model and the KPIs are
intended<00:04:00.820><c> to</c><00:04:00.910><c> keep</c><00:04:01.060><c> that</c><00:04:01.269><c> transparent</c><00:04:01.900><c> so</c>

00:04:02.070 --> 00:04:02.080 align:start position:0%
intended to keep that transparent so
 

00:04:02.080 --> 00:04:03.240 align:start position:0%
intended to keep that transparent so
that<00:04:02.110><c> you</c><00:04:02.290><c> don't</c><00:04:02.470><c> have</c><00:04:02.560><c> to</c><00:04:02.680><c> be</c><00:04:02.769><c> involved</c><00:04:02.980><c> with</c>

00:04:03.240 --> 00:04:03.250 align:start position:0%
that you don't have to be involved with
 

00:04:03.250 --> 00:04:05.430 align:start position:0%
that you don't have to be involved with
it<00:04:03.430><c> and</c><00:04:03.610><c> we</c><00:04:04.390><c> won't</c><00:04:04.510><c> break</c><00:04:04.780><c> you</c><00:04:04.959><c> if</c><00:04:05.080><c> we</c><00:04:05.200><c> change</c>

00:04:05.430 --> 00:04:05.440 align:start position:0%
it and we won't break you if we change
 

00:04:05.440 --> 00:04:10.140 align:start position:0%
it and we won't break you if we change
it<00:04:07.590><c> we</c><00:04:08.590><c> did</c><00:04:08.769><c> change</c><00:04:09.040><c> the</c><00:04:09.130><c> data</c><00:04:09.430><c> structures</c><00:04:09.910><c> in</c>

00:04:10.140 --> 00:04:10.150 align:start position:0%
it we did change the data structures in
 

00:04:10.150 --> 00:04:12.870 align:start position:0%
it we did change the data structures in
a<00:04:10.690><c> lot</c><00:04:11.170><c> of</c><00:04:11.290><c> ways</c><00:04:11.410><c> in</c><00:04:11.920><c> order</c><00:04:12.190><c> to</c><00:04:12.280><c> implement</c><00:04:12.519><c> this</c>

00:04:12.870 --> 00:04:12.880 align:start position:0%
a lot of ways in order to implement this
 

00:04:12.880 --> 00:04:15.349 align:start position:0%
a lot of ways in order to implement this
adding<00:04:13.720><c> locks</c><00:04:13.930><c> to</c><00:04:14.140><c> these</c><00:04:14.290><c> structures</c><00:04:14.739><c> and</c>

00:04:15.349 --> 00:04:15.359 align:start position:0%
adding locks to these structures and
 

00:04:15.359 --> 00:04:17.940 align:start position:0%
adding locks to these structures and
moving<00:04:16.359><c> stuff</c><00:04:16.570><c> around</c><00:04:16.660><c> adding</c><00:04:17.590><c> reference</c>

00:04:17.940 --> 00:04:17.950 align:start position:0%
moving stuff around adding reference
 

00:04:17.950 --> 00:04:20.400 align:start position:0%
moving stuff around adding reference
count<00:04:18.630><c> his</c><00:04:19.630><c> did</c><00:04:19.810><c> affect</c><00:04:20.049><c> the</c><00:04:20.109><c> binary</c>

00:04:20.400 --> 00:04:20.410 align:start position:0%
count his did affect the binary
 

00:04:20.410 --> 00:04:23.940 align:start position:0%
count his did affect the binary
compatibility<00:04:22.410><c> we're</c><00:04:23.410><c> going</c><00:04:23.560><c> to</c><00:04:23.770><c> have</c><00:04:23.919><c> all</c>

00:04:23.940 --> 00:04:23.950 align:start position:0%
compatibility we're going to have all
 

00:04:23.950 --> 00:04:25.710 align:start position:0%
compatibility we're going to have all
criminal<00:04:24.640><c> private</c><00:04:25.060><c> data</c><00:04:25.210><c> structures</c><00:04:25.600><c> be</c>

00:04:25.710 --> 00:04:25.720 align:start position:0%
criminal private data structures be
 

00:04:25.720 --> 00:04:27.510 align:start position:0%
criminal private data structures be
opaque<00:04:25.960><c> and</c><00:04:26.229><c> we're</c><00:04:27.070><c> going</c><00:04:27.220><c> to</c><00:04:27.310><c> provide</c>

00:04:27.510 --> 00:04:27.520 align:start position:0%
opaque and we're going to provide
 

00:04:27.520 --> 00:04:29.400 align:start position:0%
opaque and we're going to provide
accessor<00:04:27.940><c> functions</c><00:04:28.360><c> so</c><00:04:28.960><c> that</c><00:04:28.990><c> in</c><00:04:29.290><c> the</c><00:04:29.320><c> future</c>

00:04:29.400 --> 00:04:29.410 align:start position:0%
accessor functions so that in the future
 

00:04:29.410 --> 00:04:30.810 align:start position:0%
accessor functions so that in the future
when<00:04:29.800><c> we</c><00:04:29.890><c> need</c><00:04:30.010><c> to</c><00:04:30.100><c> make</c><00:04:30.280><c> additional</c><00:04:30.760><c> changes</c>

00:04:30.810 --> 00:04:30.820 align:start position:0%
when we need to make additional changes
 

00:04:30.820 --> 00:04:35.400 align:start position:0%
when we need to make additional changes
to<00:04:31.180><c> these</c><00:04:32.340><c> it</c><00:04:33.340><c> won't</c><00:04:33.610><c> cause</c><00:04:33.849><c> problems</c><00:04:34.410><c> we</c>

00:04:35.400 --> 00:04:35.410 align:start position:0%
to these it won't cause problems we
 

00:04:35.410 --> 00:04:36.719 align:start position:0%
to these it won't cause problems we
won't<00:04:35.590><c> have</c><00:04:35.710><c> to</c><00:04:35.740><c> bake</c><00:04:35.919><c> your</c><00:04:36.039><c> text</c><00:04:36.370><c> you</c><00:04:36.580><c> won't</c>

00:04:36.719 --> 00:04:36.729 align:start position:0%
won't have to bake your text you won't
 

00:04:36.729 --> 00:04:37.920 align:start position:0%
won't have to bake your text you won't
have<00:04:36.789><c> to</c><00:04:36.880><c> recompile</c><00:04:37.270><c> you</c><00:04:37.479><c> want</c><00:04:37.630><c> it</c><00:04:37.690><c> to</c><00:04:37.780><c> deal</c>

00:04:37.920 --> 00:04:37.930 align:start position:0%
have to recompile you want it to deal
 

00:04:37.930 --> 00:04:39.779 align:start position:0%
have to recompile you want it to deal
with<00:04:38.020><c> any</c><00:04:38.169><c> of</c><00:04:38.229><c> that</c>

00:04:39.779 --> 00:04:39.789 align:start position:0%
with any of that
 

00:04:39.789 --> 00:04:42.640 align:start position:0%
with any of that
there<00:04:40.789><c> are</c><00:04:40.879><c> five</c><00:04:41.090><c> main</c><00:04:41.360><c> network</c><00:04:41.689><c> KPIs</c><00:04:42.169><c> there's</c>

00:04:42.640 --> 00:04:42.650 align:start position:0%
there are five main network KPIs there's
 

00:04:42.650 --> 00:04:44.589 align:start position:0%
there are five main network KPIs there's
the<00:04:42.860><c> network</c><00:04:43.129><c> interface</c><00:04:43.460><c> KPI</c><00:04:43.849><c> for</c><00:04:44.300><c> providing</c>

00:04:44.589 --> 00:04:44.599 align:start position:0%
the network interface KPI for providing
 

00:04:44.599 --> 00:04:46.149 align:start position:0%
the network interface KPI for providing
new<00:04:44.779><c> interfaces</c><00:04:45.169><c> to</c><00:04:45.349><c> the</c><00:04:45.529><c> networking</c><00:04:45.800><c> stack</c>

00:04:46.149 --> 00:04:46.159 align:start position:0%
new interfaces to the networking stack
 

00:04:46.159 --> 00:04:48.700 align:start position:0%
new interfaces to the networking stack
there's<00:04:47.029><c> the</c><00:04:47.270><c> socket</c><00:04:47.599><c> KPI</c><00:04:47.930><c> for</c><00:04:48.259><c> interacting</c>

00:04:48.700 --> 00:04:48.710 align:start position:0%
there's the socket KPI for interacting
 

00:04:48.710 --> 00:04:50.860 align:start position:0%
there's the socket KPI for interacting
with<00:04:48.830><c> sockets</c><00:04:49.189><c> in</c><00:04:49.279><c> the</c><00:04:49.400><c> stack</c><00:04:49.639><c> and</c><00:04:49.909><c> inside</c><00:04:50.779><c> the</c>

00:04:50.860 --> 00:04:50.870 align:start position:0%
with sockets in the stack and inside the
 

00:04:50.870 --> 00:04:52.600 align:start position:0%
with sockets in the stack and inside the
colonel<00:04:51.139><c> this</c><00:04:51.740><c> is</c><00:04:51.860><c> commonly</c><00:04:52.159><c> used</c><00:04:52.370><c> for</c>

00:04:52.600 --> 00:04:52.610 align:start position:0%
colonel this is commonly used for
 

00:04:52.610 --> 00:04:55.570 align:start position:0%
colonel this is commonly used for
network<00:04:53.449><c> file</c><00:04:53.599><c> system</c><00:04:53.629><c> such</c><00:04:54.169><c> as</c><00:04:54.199><c> NFS</c><00:04:54.620><c> AFP</c><00:04:55.279><c> and</c>

00:04:55.570 --> 00:04:55.580 align:start position:0%
network file system such as NFS AFP and
 

00:04:55.580 --> 00:04:59.619 align:start position:0%
network file system such as NFS AFP and
SMB<00:04:56.919><c> we</c><00:04:57.919><c> also</c><00:04:58.039><c> have</c><00:04:58.159><c> the</c><00:04:58.550><c> socket</c><00:04:58.999><c> filter</c><00:04:59.300><c> KPI</c>

00:04:59.619 --> 00:04:59.629 align:start position:0%
SMB we also have the socket filter KPI
 

00:04:59.629 --> 00:05:01.420 align:start position:0%
SMB we also have the socket filter KPI
for<00:04:59.900><c> filtering</c><00:05:00.199><c> data</c><00:05:00.409><c> and</c><00:05:00.800><c> connections</c><00:05:01.279><c> at</c>

00:05:01.420 --> 00:05:01.430 align:start position:0%
for filtering data and connections at
 

00:05:01.430 --> 00:05:04.089 align:start position:0%
for filtering data and connections at
the<00:05:01.520><c> socket</c><00:05:01.849><c> layer</c><00:05:02.259><c> in</c><00:05:03.259><c> addition</c><00:05:03.499><c> is</c><00:05:03.770><c> the</c><00:05:03.800><c> IP</c>

00:05:04.089 --> 00:05:04.099 align:start position:0%
the socket layer in addition is the IP
 

00:05:04.099 --> 00:05:06.339 align:start position:0%
the socket layer in addition is the IP
filter<00:05:04.610><c> which</c><00:05:05.059><c> lets</c><00:05:05.300><c> you</c><00:05:05.389><c> filter</c><00:05:05.539><c> IP</c><00:05:05.839><c> packets</c>

00:05:06.339 --> 00:05:06.349 align:start position:0%
filter which lets you filter IP packets
 

00:05:06.349 --> 00:05:08.170 align:start position:0%
filter which lets you filter IP packets
at<00:05:06.469><c> the</c><00:05:06.589><c> IP</c><00:05:06.919><c> layer</c><00:05:07.099><c> regardless</c><00:05:07.999><c> of</c><00:05:08.120><c> the</c>

00:05:08.170 --> 00:05:08.180 align:start position:0%
at the IP layer regardless of the
 

00:05:08.180 --> 00:05:10.719 align:start position:0%
at the IP layer regardless of the
interface<00:05:08.509><c> and</c><00:05:09.460><c> finally</c><00:05:10.460><c> we</c><00:05:10.580><c> have</c><00:05:10.699><c> the</c>

00:05:10.719 --> 00:05:10.729 align:start position:0%
interface and finally we have the
 

00:05:10.729 --> 00:05:13.029 align:start position:0%
interface and finally we have the
network<00:05:11.060><c> interface</c><00:05:11.449><c> filter</c><00:05:11.839><c> which</c><00:05:12.620><c> gives</c><00:05:12.860><c> you</c>

00:05:13.029 --> 00:05:13.039 align:start position:0%
network interface filter which gives you
 

00:05:13.039 --> 00:05:14.980 align:start position:0%
network interface filter which gives you
an<00:05:13.520><c> ability</c><00:05:13.789><c> to</c><00:05:13.969><c> filter</c><00:05:14.240><c> packets</c><00:05:14.659><c> at</c><00:05:14.839><c> the</c>

00:05:14.980 --> 00:05:14.990 align:start position:0%
an ability to filter packets at the
 

00:05:14.990 --> 00:05:17.769 align:start position:0%
an ability to filter packets at the
interface<00:05:15.349><c> layer</c><00:05:15.909><c> there</c><00:05:16.909><c> are</c><00:05:17.150><c> a</c><00:05:17.180><c> number</c><00:05:17.419><c> of</c>

00:05:17.769 --> 00:05:17.779 align:start position:0%
interface layer there are a number of
 

00:05:17.779 --> 00:05:19.989 align:start position:0%
interface layer there are a number of
additional<00:05:18.169><c> help</c><00:05:18.379><c> or</c><00:05:18.469><c> KPIs</c><00:05:18.740><c> for</c><00:05:19.729><c> getting</c>

00:05:19.989 --> 00:05:19.999 align:start position:0%
additional help or KPIs for getting
 

00:05:19.999 --> 00:05:21.399 align:start position:0%
additional help or KPIs for getting
access<00:05:20.300><c> to</c><00:05:20.360><c> various</c><00:05:20.719><c> things</c><00:05:20.990><c> such</c><00:05:21.050><c> as</c><00:05:21.199><c> I'm</c>

00:05:21.399 --> 00:05:21.409 align:start position:0%
access to various things such as I'm
 

00:05:21.409 --> 00:05:24.369 align:start position:0%
access to various things such as I'm
buffs<00:05:21.650><c> or</c><00:05:21.889><c> communicating</c><00:05:22.580><c> with</c><00:05:22.729><c> a</c><00:05:23.020><c> user</c><00:05:24.020><c> Damon</c>

00:05:24.369 --> 00:05:24.379 align:start position:0%
buffs or communicating with a user Damon
 

00:05:24.379 --> 00:05:29.739 align:start position:0%
buffs or communicating with a user Damon
in<00:05:24.589><c> user</c><00:05:24.889><c> space</c><00:05:26.499><c> yeah</c><00:05:28.210><c> so</c><00:05:29.210><c> you</c><00:05:29.270><c> have</c><00:05:29.360><c> a</c><00:05:29.389><c> diagram</c>

00:05:29.739 --> 00:05:29.749 align:start position:0%
in user space yeah so you have a diagram
 

00:05:29.749 --> 00:05:31.570 align:start position:0%
in user space yeah so you have a diagram
of<00:05:29.810><c> the</c><00:05:29.960><c> networking</c><00:05:30.199><c> stack</c><00:05:30.589><c> here</c><00:05:30.860><c> and</c><00:05:31.039><c> at</c><00:05:31.490><c> the</c>

00:05:31.570 --> 00:05:31.580 align:start position:0%
of the networking stack here and at the
 

00:05:31.580 --> 00:05:33.760 align:start position:0%
of the networking stack here and at the
top<00:05:31.729><c> layer</c><00:05:31.939><c> we</c><00:05:32.089><c> have</c><00:05:32.210><c> the</c><00:05:32.330><c> sockets</c><00:05:32.779><c> the</c><00:05:33.499><c> items</c>

00:05:33.760 --> 00:05:33.770 align:start position:0%
top layer we have the sockets the items
 

00:05:33.770 --> 00:05:35.139 align:start position:0%
top layer we have the sockets the items
in<00:05:33.889><c> blue</c><00:05:34.069><c> can</c><00:05:34.249><c> be</c><00:05:34.370><c> provided</c><00:05:34.639><c> by</c><00:05:34.849><c> kernel</c>

00:05:35.139 --> 00:05:35.149 align:start position:0%
in blue can be provided by kernel
 

00:05:35.149 --> 00:05:37.929 align:start position:0%
in blue can be provided by kernel
extensions<00:05:35.680><c> so</c><00:05:36.680><c> the</c><00:05:36.979><c> kernel</c><00:05:37.219><c> extensions</c><00:05:37.490><c> can</c>

00:05:37.929 --> 00:05:37.939 align:start position:0%
extensions so the kernel extensions can
 

00:05:37.939 --> 00:05:40.420 align:start position:0%
extensions so the kernel extensions can
interact<00:05:38.629><c> with</c><00:05:38.779><c> the</c><00:05:38.870><c> socket</c><00:05:39.289><c> they</c><00:05:39.979><c> can</c><00:05:40.159><c> create</c>

00:05:40.420 --> 00:05:40.430 align:start position:0%
interact with the socket they can create
 

00:05:40.430 --> 00:05:42.219 align:start position:0%
interact with the socket they can create
a<00:05:40.460><c> socket</c><00:05:40.879><c> filter</c><00:05:41.240><c> they</c><00:05:41.629><c> can</c><00:05:41.779><c> create</c><00:05:41.990><c> an</c><00:05:42.080><c> IP</c>

00:05:42.219 --> 00:05:42.229 align:start position:0%
a socket filter they can create an IP
 

00:05:42.229 --> 00:05:44.379 align:start position:0%
a socket filter they can create an IP
filter<00:05:42.770><c> they</c><00:05:43.550><c> can</c><00:05:43.699><c> create</c><00:05:43.939><c> what</c><00:05:44.270><c> we</c><00:05:44.300><c> call</c>

00:05:44.379 --> 00:05:44.389 align:start position:0%
filter they can create what we call
 

00:05:44.389 --> 00:05:46.749 align:start position:0%
filter they can create what we call
plumbers<00:05:45.069><c> which</c><00:05:46.069><c> I'll</c><00:05:46.189><c> go</c><00:05:46.279><c> into</c><00:05:46.430><c> a</c><00:05:46.550><c> little</c><00:05:46.580><c> bit</c>

00:05:46.749 --> 00:05:46.759 align:start position:0%
plumbers which I'll go into a little bit
 

00:05:46.759 --> 00:05:48.909 align:start position:0%
plumbers which I'll go into a little bit
later<00:05:46.969><c> as</c><00:05:47.180><c> well</c><00:05:47.960><c> as</c><00:05:48.080><c> interfaces</c><00:05:48.740><c> and</c>

00:05:48.909 --> 00:05:48.919 align:start position:0%
later as well as interfaces and
 

00:05:48.919 --> 00:05:53.200 align:start position:0%
later as well as interfaces and
interface<00:05:49.490><c> filters</c><00:05:51.789><c> so</c><00:05:52.789><c> the</c><00:05:52.969><c> network</c>

00:05:53.200 --> 00:05:53.210 align:start position:0%
interface filters so the network
 

00:05:53.210 --> 00:05:56.019 align:start position:0%
interface filters so the network
interface<00:05:53.709><c> layer</c><00:05:54.709><c> it's</c><00:05:55.099><c> actually</c><00:05:55.669><c> broken</c><00:05:55.789><c> up</c>

00:05:56.019 --> 00:05:56.029 align:start position:0%
interface layer it's actually broken up
 

00:05:56.029 --> 00:05:57.429 align:start position:0%
interface layer it's actually broken up
into<00:05:56.149><c> two</c><00:05:56.240><c> different</c><00:05:56.479><c> sections</c><00:05:56.810><c> or</c><00:05:57.349><c> two</c>

00:05:57.429 --> 00:05:57.439 align:start position:0%
into two different sections or two
 

00:05:57.439 --> 00:05:59.379 align:start position:0%
into two different sections or two
different<00:05:57.529><c> layers</c><00:05:57.860><c> there's</c><00:05:58.759><c> the</c><00:05:59.029><c> interface</c>

00:05:59.379 --> 00:05:59.389 align:start position:0%
different layers there's the interface
 

00:05:59.389 --> 00:06:01.719 align:start position:0%
different layers there's the interface
layer<00:05:59.659><c> which</c><00:06:00.529><c> has</c><00:06:00.979><c> the</c><00:06:01.129><c> interface</c><00:06:01.399><c> itself</c>

00:06:01.719 --> 00:06:01.729 align:start position:0%
layer which has the interface itself
 

00:06:01.729 --> 00:06:03.790 align:start position:0%
layer which has the interface itself
such<00:06:02.180><c> as</c><00:06:02.300><c> an</c><00:06:02.389><c> ethernet</c><00:06:02.719><c> interface</c><00:06:03.110><c> or</c><00:06:03.379><c> a</c><00:06:03.409><c> PPP</c>

00:06:03.790 --> 00:06:03.800 align:start position:0%
such as an ethernet interface or a PPP
 

00:06:03.800 --> 00:06:05.800 align:start position:0%
such as an ethernet interface or a PPP
interface<00:06:04.189><c> and</c><00:06:04.430><c> then</c><00:06:05.240><c> there's</c><00:06:05.389><c> the</c><00:06:05.569><c> plumber</c>

00:06:05.800 --> 00:06:05.810 align:start position:0%
interface and then there's the plumber
 

00:06:05.810 --> 00:06:08.559 align:start position:0%
interface and then there's the plumber
layer<00:06:06.050><c> and</c><00:06:06.289><c> the</c><00:06:06.919><c> plumber</c><00:06:07.189><c> is</c><00:06:07.459><c> the</c><00:06:08.330><c> glue</c>

00:06:08.559 --> 00:06:08.569 align:start position:0%
layer and the plumber is the glue
 

00:06:08.569 --> 00:06:10.449 align:start position:0%
layer and the plumber is the glue
between<00:06:08.810><c> a</c><00:06:09.080><c> specific</c><00:06:09.529><c> protocols</c><00:06:09.979><c> such</c><00:06:10.099><c> as</c><00:06:10.159><c> IP</c>

00:06:10.449 --> 00:06:10.459 align:start position:0%
between a specific protocols such as IP
 

00:06:10.459 --> 00:06:13.360 align:start position:0%
between a specific protocols such as IP
and<00:06:10.909><c> an</c><00:06:11.419><c> interface</c><00:06:11.899><c> such</c><00:06:12.110><c> as</c><00:06:12.199><c> ethernet</c><00:06:12.649><c> so</c>

00:06:13.360 --> 00:06:13.370 align:start position:0%
and an interface such as ethernet so
 

00:06:13.370 --> 00:06:15.249 align:start position:0%
and an interface such as ethernet so
ideally<00:06:13.819><c> the</c><00:06:13.909><c> interface</c><00:06:14.330><c> such</c><00:06:14.749><c> as</c><00:06:14.779><c> ethernet</c>

00:06:15.249 --> 00:06:15.259 align:start position:0%
ideally the interface such as ethernet
 

00:06:15.259 --> 00:06:16.659 align:start position:0%
ideally the interface such as ethernet
would<00:06:15.409><c> know</c><00:06:15.560><c> nothing</c><00:06:15.740><c> about</c><00:06:16.009><c> the</c><00:06:16.249><c> protocol</c>

00:06:16.659 --> 00:06:16.669 align:start position:0%
would know nothing about the protocol
 

00:06:16.669 --> 00:06:18.459 align:start position:0%
would know nothing about the protocol
and<00:06:16.939><c> the</c><00:06:16.969><c> protocol</c><00:06:17.479><c> shouldn't</c><00:06:17.810><c> know</c><00:06:17.990><c> anything</c>

00:06:18.459 --> 00:06:18.469 align:start position:0%
and the protocol shouldn't know anything
 

00:06:18.469 --> 00:06:20.439 align:start position:0%
and the protocol shouldn't know anything
about<00:06:18.680><c> the</c><00:06:18.830><c> interface</c><00:06:19.189><c> it's</c><00:06:19.939><c> the</c><00:06:20.149><c> plumbers</c>

00:06:20.439 --> 00:06:20.449 align:start position:0%
about the interface it's the plumbers
 

00:06:20.449 --> 00:06:22.179 align:start position:0%
about the interface it's the plumbers
responsibility<00:06:21.169><c> to</c><00:06:21.289><c> tie</c><00:06:21.680><c> these</c><00:06:21.740><c> two</c><00:06:22.009><c> things</c>

00:06:22.179 --> 00:06:22.189 align:start position:0%
responsibility to tie these two things
 

00:06:22.189 --> 00:06:25.360 align:start position:0%
responsibility to tie these two things
together<00:06:22.930><c> if</c><00:06:23.930><c> you're</c><00:06:24.800><c> familiar</c><00:06:24.919><c> with</c><00:06:25.219><c> the</c>

00:06:25.360 --> 00:06:25.370 align:start position:0%
together if you're familiar with the
 

00:06:25.370 --> 00:06:27.519 align:start position:0%
together if you're familiar with the
datalink<00:06:25.819><c> interface</c><00:06:26.300><c> layer</c><00:06:26.539><c> one</c><00:06:27.379><c> of</c><00:06:27.469><c> the</c>

00:06:27.519 --> 00:06:27.529 align:start position:0%
datalink interface layer one of the
 

00:06:27.529 --> 00:06:29.980 align:start position:0%
datalink interface layer one of the
things<00:06:27.680><c> we've</c><00:06:27.889><c> done</c><00:06:28.009><c> is</c><00:06:28.159><c> eliminate</c><00:06:28.990><c> the</c>

00:06:29.980 --> 00:06:29.990 align:start position:0%
things we've done is eliminate the
 

00:06:29.990 --> 00:06:32.199 align:start position:0%
things we've done is eliminate the
interface<00:06:30.319><c> family</c><00:06:30.709><c> modules</c><00:06:31.129><c> we</c><00:06:31.819><c> found</c><00:06:31.969><c> that</c><00:06:32.089><c> a</c>

00:06:32.199 --> 00:06:32.209 align:start position:0%
interface family modules we found that a
 

00:06:32.209 --> 00:06:33.339 align:start position:0%
interface family modules we found that a
lot<00:06:32.360><c> of</c><00:06:32.479><c> the</c><00:06:32.539><c> functionality</c><00:06:32.689><c> that</c><00:06:33.229><c> was</c>

00:06:33.339 --> 00:06:33.349 align:start position:0%
lot of the functionality that was
 

00:06:33.349 --> 00:06:35.019 align:start position:0%
lot of the functionality that was
provided<00:06:33.589><c> by</c><00:06:33.800><c> the</c><00:06:33.889><c> interface</c><00:06:34.249><c> family</c><00:06:34.639><c> module</c>

00:06:35.019 --> 00:06:35.029 align:start position:0%
provided by the interface family module
 

00:06:35.029 --> 00:06:37.899 align:start position:0%
provided by the interface family module
was<00:06:35.719><c> already</c><00:06:36.159><c> was</c><00:06:37.159><c> usually</c><00:06:37.459><c> tied</c><00:06:37.639><c> to</c><00:06:37.819><c> the</c>

00:06:37.899 --> 00:06:37.909 align:start position:0%
was already was usually tied to the
 

00:06:37.909 --> 00:06:39.579 align:start position:0%
was already was usually tied to the
interface<00:06:38.089><c> so</c><00:06:38.930><c> we</c><00:06:39.020><c> just</c><00:06:39.199><c> went</c><00:06:39.319><c> ahead</c><00:06:39.469><c> and</c>

00:06:39.579 --> 00:06:39.589 align:start position:0%
interface so we just went ahead and
 

00:06:39.589 --> 00:06:41.110 align:start position:0%
interface so we just went ahead and
rolled<00:06:39.860><c> all</c><00:06:40.009><c> that</c><00:06:40.159><c> functionality</c><00:06:40.580><c> into</c><00:06:40.939><c> the</c>

00:06:41.110 --> 00:06:41.120 align:start position:0%
rolled all that functionality into the
 

00:06:41.120 --> 00:06:42.730 align:start position:0%
rolled all that functionality into the
interface<00:06:41.479><c> which</c><00:06:41.930><c> makes</c><00:06:42.139><c> it</c><00:06:42.259><c> a</c><00:06:42.319><c> lot</c><00:06:42.409><c> easier</c><00:06:42.469><c> to</c>

00:06:42.730 --> 00:06:42.740 align:start position:0%
interface which makes it a lot easier to
 

00:06:42.740 --> 00:06:44.199 align:start position:0%
interface which makes it a lot easier to
provide<00:06:43.069><c> a</c><00:06:43.099><c> new</c><00:06:43.279><c> interface</c><00:06:43.490><c> because</c><00:06:43.999><c> instead</c>

00:06:44.199 --> 00:06:44.209 align:start position:0%
provide a new interface because instead
 

00:06:44.209 --> 00:06:46.119 align:start position:0%
provide a new interface because instead
of<00:06:44.330><c> having</c><00:06:44.449><c> to</c><00:06:44.599><c> write</c><00:06:44.749><c> an</c><00:06:44.930><c> interface</c><00:06:45.259><c> and</c><00:06:45.469><c> an</c>

00:06:46.119 --> 00:06:46.129 align:start position:0%
of having to write an interface and an
 

00:06:46.129 --> 00:06:47.980 align:start position:0%
of having to write an interface and an
interface<00:06:46.459><c> family</c><00:06:46.789><c> module</c><00:06:47.149><c> you</c><00:06:47.269><c> just</c><00:06:47.449><c> do</c><00:06:47.870><c> it</c>

00:06:47.980 --> 00:06:47.990 align:start position:0%
interface family module you just do it
 

00:06:47.990 --> 00:06:50.829 align:start position:0%
interface family module you just do it
all<00:06:48.050><c> in</c><00:06:48.169><c> the</c><00:06:48.229><c> interface</c><00:06:49.659><c> we've</c><00:06:50.659><c> also</c>

00:06:50.829 --> 00:06:50.839 align:start position:0%
all in the interface we've also
 

00:06:50.839 --> 00:06:52.390 align:start position:0%
all in the interface we've also
eliminated<00:06:51.409><c> DL</c><00:06:51.649><c> tags</c>

00:06:52.390 --> 00:06:52.400 align:start position:0%
eliminated DL tags
 

00:06:52.400 --> 00:06:53.710 align:start position:0%
eliminated DL tags
so<00:06:52.820><c> when</c><00:06:52.970><c> you're</c><00:06:53.060><c> sending</c><00:06:53.449><c> or</c><00:06:53.660><c> receiving</c>

00:06:53.710 --> 00:06:53.720 align:start position:0%
so when you're sending or receiving
 

00:06:53.720 --> 00:06:57.640 align:start position:0%
so when you're sending or receiving
you'll<00:06:54.680><c> the</c><00:06:55.310><c> package</c><00:06:55.960><c> what</c><00:06:56.960><c> used</c><00:06:57.169><c> to</c><00:06:57.259><c> be</c><00:06:57.320><c> a</c><00:06:57.410><c> dl</c>

00:06:57.640 --> 00:06:57.650 align:start position:0%
you'll the package what used to be a dl
 

00:06:57.650 --> 00:06:59.050 align:start position:0%
you'll the package what used to be a dl
tag<00:06:57.830><c> is</c><00:06:58.009><c> now</c><00:06:58.130><c> identified</c><00:06:58.580><c> by</c><00:06:58.759><c> both</c><00:06:58.910><c> the</c>

00:06:59.050 --> 00:06:59.060 align:start position:0%
tag is now identified by both the
 

00:06:59.060 --> 00:07:03.969 align:start position:0%
tag is now identified by both the
interface<00:06:59.419><c> and</c><00:06:59.660><c> the</c><00:06:59.750><c> protocol</c><00:07:00.199><c> family</c><00:07:02.770><c> so</c><00:07:03.770><c> at</c>

00:07:03.969 --> 00:07:03.979 align:start position:0%
interface and the protocol family so at
 

00:07:03.979 --> 00:07:05.140 align:start position:0%
interface and the protocol family so at
the<00:07:04.039><c> bottom</c><00:07:04.250><c> of</c><00:07:04.340><c> the</c><00:07:04.430><c> stack</c><00:07:04.610><c> we</c><00:07:04.789><c> have</c><00:07:04.910><c> network</c>

00:07:05.140 --> 00:07:05.150 align:start position:0%
the bottom of the stack we have network
 

00:07:05.150 --> 00:07:08.590 align:start position:0%
the bottom of the stack we have network
interfaces<00:07:05.570><c> and</c><00:07:06.610><c> the</c><00:07:07.610><c> network</c><00:07:07.850><c> interface</c><00:07:08.210><c> kpi</c>

00:07:08.590 --> 00:07:08.600 align:start position:0%
interfaces and the network interface kpi
 

00:07:08.600 --> 00:07:10.150 align:start position:0%
interfaces and the network interface kpi
gives<00:07:08.930><c> you</c><00:07:09.050><c> the</c><00:07:09.169><c> ability</c><00:07:09.229><c> to</c><00:07:09.560><c> provide</c><00:07:09.889><c> new</c>

00:07:10.150 --> 00:07:10.160 align:start position:0%
gives you the ability to provide new
 

00:07:10.160 --> 00:07:12.070 align:start position:0%
gives you the ability to provide new
interfaces<00:07:10.610><c> to</c><00:07:10.820><c> the</c><00:07:11.090><c> networking</c><00:07:11.389><c> stack</c><00:07:11.780><c> a</c>

00:07:12.070 --> 00:07:12.080 align:start position:0%
interfaces to the networking stack a
 

00:07:12.080 --> 00:07:14.170 align:start position:0%
interfaces to the networking stack a
network<00:07:13.039><c> interface</c><00:07:13.220><c> has</c><00:07:13.580><c> five</c><00:07:13.850><c> primary</c>

00:07:14.170 --> 00:07:14.180 align:start position:0%
network interface has five primary
 

00:07:14.180 --> 00:07:16.629 align:start position:0%
network interface has five primary
responsibilities<00:07:15.130><c> network</c><00:07:16.130><c> interface</c><00:07:16.490><c> is</c>

00:07:16.629 --> 00:07:16.639 align:start position:0%
responsibilities network interface is
 

00:07:16.639 --> 00:07:18.219 align:start position:0%
responsibilities network interface is
responsible<00:07:17.150><c> for</c><00:07:17.300><c> inputting</c><00:07:17.630><c> packets</c><00:07:18.080><c> into</c>

00:07:18.219 --> 00:07:18.229 align:start position:0%
responsible for inputting packets into
 

00:07:18.229 --> 00:07:20.320 align:start position:0%
responsible for inputting packets into
the<00:07:18.350><c> stack</c><00:07:18.590><c> as</c><00:07:18.830><c> well</c><00:07:19.520><c> as</c><00:07:19.639><c> d</c><00:07:19.850><c> muxing</c><00:07:20.240><c> the</c>

00:07:20.320 --> 00:07:20.330 align:start position:0%
the stack as well as d muxing the
 

00:07:20.330 --> 00:07:22.510 align:start position:0%
the stack as well as d muxing the
packets<00:07:20.690><c> or</c><00:07:20.900><c> determining</c><00:07:21.380><c> which</c><00:07:21.620><c> protocol</c><00:07:22.220><c> a</c>

00:07:22.510 --> 00:07:22.520 align:start position:0%
packets or determining which protocol a
 

00:07:22.520 --> 00:07:27.520 align:start position:0%
packets or determining which protocol a
specific<00:07:23.389><c> packet</c><00:07:23.690><c> belongs</c><00:07:23.960><c> to</c><00:07:26.139><c> as</c><00:07:27.139><c> part</c><00:07:27.500><c> of</c>

00:07:27.520 --> 00:07:27.530 align:start position:0%
specific packet belongs to as part of
 

00:07:27.530 --> 00:07:29.050 align:start position:0%
specific packet belongs to as part of
the<00:07:27.620><c> B</c><00:07:27.710><c> MUX</c><00:07:27.919><c> that</c><00:07:28.010><c> has</c><00:07:28.130><c> to</c><00:07:28.250><c> handle</c><00:07:28.490><c> add</c><00:07:28.760><c> and</c>

00:07:29.050 --> 00:07:29.060 align:start position:0%
the B MUX that has to handle add and
 

00:07:29.060 --> 00:07:31.120 align:start position:0%
the B MUX that has to handle add and
delete<00:07:29.240><c> protocols</c><00:07:29.960><c> so</c><00:07:30.470><c> that</c><00:07:30.500><c> it</c><00:07:30.710><c> can</c><00:07:30.889><c> keep</c>

00:07:31.120 --> 00:07:31.130 align:start position:0%
delete protocols so that it can keep
 

00:07:31.130 --> 00:07:33.879 align:start position:0%
delete protocols so that it can keep
track<00:07:31.370><c> of</c><00:07:31.400><c> the</c><00:07:31.760><c> D</c><00:07:32.690><c> MUX</c><00:07:32.900><c> descriptor</c><00:07:33.350><c> mapping</c><00:07:33.710><c> to</c>

00:07:33.879 --> 00:07:33.889 align:start position:0%
track of the D MUX descriptor mapping to
 

00:07:33.889 --> 00:07:35.469 align:start position:0%
track of the D MUX descriptor mapping to
protocol<00:07:34.220><c> family</c><00:07:34.550><c> mapping</c><00:07:34.910><c> so</c><00:07:35.150><c> it</c><00:07:35.240><c> can</c><00:07:35.360><c> match</c>

00:07:35.469 --> 00:07:35.479 align:start position:0%
protocol family mapping so it can match
 

00:07:35.479 --> 00:07:39.580 align:start position:0%
protocol family mapping so it can match
packets<00:07:35.900><c> when</c><00:07:36.050><c> they</c><00:07:36.139><c> come</c><00:07:36.320><c> in</c><00:07:38.229><c> the</c><00:07:39.229><c> interface</c>

00:07:39.580 --> 00:07:39.590 align:start position:0%
packets when they come in the interface
 

00:07:39.590 --> 00:07:41.439 align:start position:0%
packets when they come in the interface
is<00:07:39.620><c> also</c><00:07:39.979><c> responsible</c><00:07:40.100><c> for</c><00:07:40.699><c> framing</c><00:07:41.090><c> the</c>

00:07:41.439 --> 00:07:41.449 align:start position:0%
is also responsible for framing the
 

00:07:41.449 --> 00:07:43.240 align:start position:0%
is also responsible for framing the
outbound<00:07:41.750><c> packets</c><00:07:42.229><c> basically</c><00:07:42.919><c> putting</c><00:07:43.130><c> an</c>

00:07:43.240 --> 00:07:43.250 align:start position:0%
outbound packets basically putting an
 

00:07:43.250 --> 00:07:45.279 align:start position:0%
outbound packets basically putting an
interface<00:07:43.610><c> header</c><00:07:43.820><c> on</c><00:07:44.000><c> it</c><00:07:44.150><c> as</c><00:07:44.270><c> well</c><00:07:45.139><c> as</c>

00:07:45.279 --> 00:07:45.289 align:start position:0%
interface header on it as well as
 

00:07:45.289 --> 00:07:46.629 align:start position:0%
interface header on it as well as
outputting<00:07:45.740><c> the</c><00:07:45.770><c> actual</c><00:07:46.099><c> packet</c><00:07:46.490><c> and</c>

00:07:46.629 --> 00:07:46.639 align:start position:0%
outputting the actual packet and
 

00:07:46.639 --> 00:07:49.360 align:start position:0%
outputting the actual packet and
handling.i<00:07:47.270><c> octal</c><00:07:47.750><c> for</c><00:07:48.320><c> things</c><00:07:48.500><c> when</c><00:07:48.710><c> for</c>

00:07:49.360 --> 00:07:49.370 align:start position:0%
handling.i octal for things when for
 

00:07:49.370 --> 00:07:51.400 align:start position:0%
handling.i octal for things when for
cases<00:07:49.639><c> where</c><00:07:49.669><c> multicast</c><00:07:50.479><c> filterless</c><00:07:50.810><c> changes</c>

00:07:51.400 --> 00:07:51.410 align:start position:0%
cases where multicast filterless changes
 

00:07:51.410 --> 00:07:57.279 align:start position:0%
cases where multicast filterless changes
or<00:07:51.680><c> other</c><00:07:52.070><c> state</c><00:07:52.580><c> changes</c><00:07:52.970><c> are</c><00:07:53.210><c> requested</c><00:07:56.289><c> the</c>

00:07:57.279 --> 00:07:57.289 align:start position:0%
or other state changes are requested the
 

00:07:57.289 --> 00:07:59.920 align:start position:0%
or other state changes are requested the
network<00:07:58.099><c> interface</c><00:07:58.490><c> is</c><00:07:58.699><c> documented</c><00:07:59.120><c> in</c><00:07:59.240><c> net</c><00:07:59.900><c> /</c>

00:07:59.920 --> 00:07:59.930 align:start position:0%
network interface is documented in net /
 

00:07:59.930 --> 00:08:02.500 align:start position:0%
network interface is documented in net /
KPI<00:08:00.650><c> underscore</c><00:08:01.160><c> interface</c><00:08:01.520><c> by</c><00:08:01.669><c> H</c><00:08:01.820><c> in</c><00:08:02.090><c> the</c>

00:08:02.500 --> 00:08:02.510 align:start position:0%
KPI underscore interface by H in the
 

00:08:02.510 --> 00:08:07.060 align:start position:0%
KPI underscore interface by H in the
kernel<00:08:02.840><c> framework</c><00:08:05.410><c> network</c><00:08:06.410><c> interfaces</c><00:08:06.800><c> go</c>

00:08:07.060 --> 00:08:07.070 align:start position:0%
kernel framework network interfaces go
 

00:08:07.070 --> 00:08:09.010 align:start position:0%
kernel framework network interfaces go
through<00:08:07.250><c> a</c><00:08:07.280><c> typical</c><00:08:07.400><c> lifecycle</c><00:08:08.210><c> the</c><00:08:08.780><c> network</c>

00:08:09.010 --> 00:08:09.020 align:start position:0%
through a typical lifecycle the network
 

00:08:09.020 --> 00:08:11.200 align:start position:0%
through a typical lifecycle the network
interface<00:08:09.380><c> is</c><00:08:09.560><c> allocated</c><00:08:10.159><c> and</c><00:08:10.340><c> then</c><00:08:10.849><c> various</c>

00:08:11.200 --> 00:08:11.210 align:start position:0%
interface is allocated and then various
 

00:08:11.210 --> 00:08:12.760 align:start position:0%
interface is allocated and then various
parameters<00:08:11.479><c> and</c><00:08:11.960><c> properties</c><00:08:12.380><c> of</c><00:08:12.620><c> that</c>

00:08:12.760 --> 00:08:12.770 align:start position:0%
parameters and properties of that
 

00:08:12.770 --> 00:08:15.040 align:start position:0%
parameters and properties of that
interfacer<00:08:13.250><c> set</c><00:08:13.490><c> once</c><00:08:14.300><c> the</c><00:08:14.449><c> interface</c><00:08:14.750><c> is</c><00:08:14.780><c> set</c>

00:08:15.040 --> 00:08:15.050 align:start position:0%
interfacer set once the interface is set
 

00:08:15.050 --> 00:08:16.659 align:start position:0%
interfacer set once the interface is set
up<00:08:15.139><c> correctly</c><00:08:15.169><c> the</c><00:08:15.919><c> interface</c><00:08:16.250><c> is</c><00:08:16.280><c> attached</c>

00:08:16.659 --> 00:08:16.669 align:start position:0%
up correctly the interface is attached
 

00:08:16.669 --> 00:08:19.149 align:start position:0%
up correctly the interface is attached
to<00:08:16.699><c> the</c><00:08:16.970><c> networking</c><00:08:17.300><c> stack</c><00:08:17.770><c> at</c><00:08:18.770><c> that</c><00:08:18.949><c> point</c>

00:08:19.149 --> 00:08:19.159 align:start position:0%
to the networking stack at that point
 

00:08:19.159 --> 00:08:21.640 align:start position:0%
to the networking stack at that point
the<00:08:19.370><c> protocols</c><00:08:19.789><c> attached</c><00:08:20.090><c> and</c><00:08:20.449><c> then</c><00:08:20.650><c> packets</c>

00:08:21.640 --> 00:08:21.650 align:start position:0%
the protocols attached and then packets
 

00:08:21.650 --> 00:08:24.129 align:start position:0%
the protocols attached and then packets
are<00:08:21.800><c> sent</c><00:08:21.830><c> and</c><00:08:22.130><c> received</c><00:08:22.490><c> and</c><00:08:22.729><c> then</c><00:08:23.120><c> the</c><00:08:23.240><c> the</c>

00:08:24.129 --> 00:08:24.139 align:start position:0%
are sent and received and then the the
 

00:08:24.139 --> 00:08:26.170 align:start position:0%
are sent and received and then the the
interface<00:08:24.440><c> can</c><00:08:24.620><c> request</c><00:08:24.860><c> a</c><00:08:25.010><c> detach</c><00:08:25.370><c> the</c>

00:08:26.170 --> 00:08:26.180 align:start position:0%
interface can request a detach the
 

00:08:26.180 --> 00:08:27.700 align:start position:0%
interface can request a detach the
protocols<00:08:26.659><c> detached</c><00:08:27.050><c> from</c><00:08:27.199><c> the</c><00:08:27.380><c> interface</c>

00:08:27.700 --> 00:08:27.710 align:start position:0%
protocols detached from the interface
 

00:08:27.710 --> 00:08:29.409 align:start position:0%
protocols detached from the interface
and<00:08:27.949><c> then</c><00:08:28.550><c> the</c><00:08:28.610><c> interface</c><00:08:28.940><c> itself</c><00:08:29.240><c> is</c>

00:08:29.409 --> 00:08:29.419 align:start position:0%
and then the interface itself is
 

00:08:29.419 --> 00:08:33.790 align:start position:0%
and then the interface itself is
detached<00:08:29.810><c> from</c><00:08:30.020><c> the</c><00:08:30.169><c> stack</c><00:08:32.740><c> for</c><00:08:33.740><c> the</c>

00:08:33.790 --> 00:08:33.800 align:start position:0%
detached from the stack for the
 

00:08:33.800 --> 00:08:36.010 align:start position:0%
detached from the stack for the
allocated<00:08:34.190><c> interface</c><00:08:34.610><c> there's</c><00:08:35.089><c> a</c><00:08:35.209><c> I</c><00:08:35.599><c> F</c><00:08:35.839><c> net</c>

00:08:36.010 --> 00:08:36.020 align:start position:0%
allocated interface there's a I F net
 

00:08:36.020 --> 00:08:37.930 align:start position:0%
allocated interface there's a I F net
allocate<00:08:36.469><c> function</c><00:08:36.890><c> and</c><00:08:37.070><c> you</c><00:08:37.400><c> fill</c><00:08:37.610><c> out</c><00:08:37.760><c> an</c>

00:08:37.930 --> 00:08:37.940 align:start position:0%
allocate function and you fill out an
 

00:08:37.940 --> 00:08:40.029 align:start position:0%
allocate function and you fill out an
if'<00:08:38.240><c> net</c><00:08:38.419><c> in</c><00:08:38.599><c> its</c><00:08:38.750><c> parameter</c><00:08:39.289><c> a</c><00:08:39.469><c> pram</c>

00:08:40.029 --> 00:08:40.039 align:start position:0%
if' net in its parameter a pram
 

00:08:40.039 --> 00:08:42.159 align:start position:0%
if' net in its parameter a pram
structure<00:08:40.550><c> that</c><00:08:41.150><c> defines</c><00:08:41.510><c> most</c><00:08:41.959><c> of</c><00:08:42.110><c> the</c>

00:08:42.159 --> 00:08:42.169 align:start position:0%
structure that defines most of the
 

00:08:42.169 --> 00:08:45.220 align:start position:0%
structure that defines most of the
initial<00:08:42.469><c> parameters</c><00:08:42.620><c> of</c><00:08:43.130><c> the</c><00:08:43.279><c> interface</c><00:08:44.230><c> part</c>

00:08:45.220 --> 00:08:45.230 align:start position:0%
initial parameters of the interface part
 

00:08:45.230 --> 00:08:47.050 align:start position:0%
initial parameters of the interface part
of<00:08:45.320><c> that</c><00:08:45.440><c> is</c><00:08:45.560><c> a</c><00:08:45.589><c> unique</c><00:08:45.890><c> ID</c><00:08:46.100><c> and</c><00:08:46.430><c> an</c><00:08:46.700><c> interface</c>

00:08:47.050 --> 00:08:47.060 align:start position:0%
of that is a unique ID and an interface
 

00:08:47.060 --> 00:08:50.470 align:start position:0%
of that is a unique ID and an interface
family<00:08:47.560><c> right</c><00:08:48.560><c> now</c><00:08:48.709><c> the</c><00:08:49.400><c> networking</c><00:08:50.150><c> stack</c>

00:08:50.470 --> 00:08:50.480 align:start position:0%
family right now the networking stack
 

00:08:50.480 --> 00:08:52.360 align:start position:0%
family right now the networking stack
keeps<00:08:51.020><c> pointers</c><00:08:51.410><c> to</c><00:08:51.560><c> the</c><00:08:51.650><c> network</c><00:08:51.920><c> interface</c>

00:08:52.360 --> 00:08:52.370 align:start position:0%
keeps pointers to the network interface
 

00:08:52.370 --> 00:08:54.190 align:start position:0%
keeps pointers to the network interface
all<00:08:53.060><c> over</c><00:08:53.390><c> the</c><00:08:53.480><c> place</c><00:08:53.690><c> and</c><00:08:53.930><c> it</c><00:08:54.050><c> doesn't</c>

00:08:54.190 --> 00:08:54.200 align:start position:0%
all over the place and it doesn't
 

00:08:54.200 --> 00:08:56.440 align:start position:0%
all over the place and it doesn't
properly<00:08:54.560><c> rest</c><00:08:54.890><c> count</c><00:08:55.130><c> rush</c><00:08:55.610><c> count</c><00:08:55.850><c> its</c>

00:08:56.440 --> 00:08:56.450 align:start position:0%
properly rest count rush count its
 

00:08:56.450 --> 00:08:59.530 align:start position:0%
properly rest count rush count its
references<00:08:56.990><c> to</c><00:08:57.350><c> the</c><00:08:57.500><c> interface</c><00:08:58.209><c> so</c><00:08:59.209><c> we</c><00:08:59.330><c> can't</c>

00:08:59.530 --> 00:08:59.540 align:start position:0%
references to the interface so we can't
 

00:08:59.540 --> 00:09:00.819 align:start position:0%
references to the interface so we can't
just<00:08:59.690><c> get</c><00:08:59.839><c> rid</c><00:08:59.870><c> of</c><00:08:59.990><c> the</c><00:09:00.110><c> interface</c><00:09:00.410><c> when</c><00:09:00.709><c> your</c>

00:09:00.819 --> 00:09:00.829 align:start position:0%
just get rid of the interface when your
 

00:09:00.829 --> 00:09:03.040 align:start position:0%
just get rid of the interface when your
interface<00:09:01.100><c> goes</c><00:09:01.310><c> away</c><00:09:01.480><c> we</c><00:09:02.480><c> end</c><00:09:02.600><c> up</c><00:09:02.720><c> recycling</c>

00:09:03.040 --> 00:09:03.050 align:start position:0%
interface goes away we end up recycling
 

00:09:03.050 --> 00:09:04.660 align:start position:0%
interface goes away we end up recycling
it<00:09:03.410><c> in</c><00:09:03.589><c> the</c><00:09:03.740><c> future</c><00:09:04.040><c> we</c><00:09:04.130><c> hope</c><00:09:04.160><c> to</c><00:09:04.400><c> get</c><00:09:04.490><c> rid</c><00:09:04.640><c> of</c>

00:09:04.660 --> 00:09:04.670 align:start position:0%
it in the future we hope to get rid of
 

00:09:04.670 --> 00:09:06.280 align:start position:0%
it in the future we hope to get rid of
this<00:09:04.880><c> but</c><00:09:05.450><c> for</c><00:09:05.660><c> now</c><00:09:05.779><c> we're</c><00:09:05.930><c> kind</c><00:09:06.079><c> of</c><00:09:06.110><c> stuck</c>

00:09:06.280 --> 00:09:06.290 align:start position:0%
this but for now we're kind of stuck
 

00:09:06.290 --> 00:09:07.290 align:start position:0%
this but for now we're kind of stuck
with

00:09:07.290 --> 00:09:07.300 align:start position:0%
with
 

00:09:07.300 --> 00:09:09.790 align:start position:0%
with
there<00:09:08.300><c> are</c><00:09:08.480><c> some</c><00:09:08.720><c> little</c><00:09:09.170><c> gotchas</c><00:09:09.620><c> though</c>

00:09:09.790 --> 00:09:09.800 align:start position:0%
there are some little gotchas though
 

00:09:09.800 --> 00:09:12.420 align:start position:0%
there are some little gotchas though
with<00:09:09.980><c> this</c><00:09:10.240><c> when</c><00:09:11.240><c> you're</c><00:09:11.390><c> allocating</c><00:09:12.110><c> an</c>

00:09:12.420 --> 00:09:12.430 align:start position:0%
with this when you're allocating an
 

00:09:12.430 --> 00:09:14.890 align:start position:0%
with this when you're allocating an
interface<00:09:13.430><c> and</c><00:09:13.730><c> you</c><00:09:13.910><c> specify</c><00:09:14.330><c> a</c><00:09:14.360><c> unique</c><00:09:14.720><c> ID</c>

00:09:14.890 --> 00:09:14.900 align:start position:0%
interface and you specify a unique ID
 

00:09:14.900 --> 00:09:17.410 align:start position:0%
interface and you specify a unique ID
and<00:09:15.230><c> an</c><00:09:15.620><c> interface</c><00:09:15.980><c> family</c><00:09:16.400><c> there</c><00:09:17.120><c> must</c><00:09:17.360><c> not</c>

00:09:17.410 --> 00:09:17.420 align:start position:0%
and an interface family there must not
 

00:09:17.420 --> 00:09:18.850 align:start position:0%
and an interface family there must not
be<00:09:17.540><c> another</c><00:09:17.810><c> interface</c><00:09:18.140><c> that's</c><00:09:18.470><c> currently</c>

00:09:18.850 --> 00:09:18.860 align:start position:0%
be another interface that's currently
 

00:09:18.860 --> 00:09:20.620 align:start position:0%
be another interface that's currently
attached<00:09:19.250><c> with</c><00:09:19.550><c> that</c><00:09:19.760><c> unique</c><00:09:20.060><c> ID</c><00:09:20.240><c> and</c>

00:09:20.620 --> 00:09:20.630 align:start position:0%
attached with that unique ID and
 

00:09:20.630 --> 00:09:22.570 align:start position:0%
attached with that unique ID and
interface<00:09:21.050><c> family</c><00:09:21.500><c> if</c><00:09:21.680><c> there</c><00:09:22.400><c> is</c><00:09:22.490><c> an</c>

00:09:22.570 --> 00:09:22.580 align:start position:0%
interface family if there is an
 

00:09:22.580 --> 00:09:24.880 align:start position:0%
interface family if there is an
interface<00:09:22.940><c> and</c><00:09:23.120><c> it's</c><00:09:23.270><c> detaching</c><00:09:23.960><c> then</c><00:09:24.650><c> you</c>

00:09:24.880 --> 00:09:24.890 align:start position:0%
interface and it's detaching then you
 

00:09:24.890 --> 00:09:26.830 align:start position:0%
interface and it's detaching then you
may<00:09:25.010><c> block</c><00:09:25.250><c> until</c><00:09:25.490><c> that</c><00:09:25.760><c> detach</c><00:09:26.120><c> is</c><00:09:26.360><c> completed</c>

00:09:26.830 --> 00:09:26.840 align:start position:0%
may block until that detach is completed
 

00:09:26.840 --> 00:09:28.390 align:start position:0%
may block until that detach is completed
so<00:09:27.140><c> that</c><00:09:27.260><c> we</c><00:09:27.350><c> can</c><00:09:27.500><c> recycle</c><00:09:27.770><c> to</c><00:09:28.010><c> use</c><00:09:28.130><c> the</c><00:09:28.250><c> same</c>

00:09:28.390 --> 00:09:28.400 align:start position:0%
so that we can recycle to use the same
 

00:09:28.400 --> 00:09:31.510 align:start position:0%
so that we can recycle to use the same
interface<00:09:29.440><c> again</c><00:09:30.440><c> the</c><00:09:30.530><c> recycle</c><00:09:30.920><c> mechanism</c><00:09:31.340><c> is</c>

00:09:31.510 --> 00:09:31.520 align:start position:0%
interface again the recycle mechanism is
 

00:09:31.520 --> 00:09:34.150 align:start position:0%
interface again the recycle mechanism is
temporary<00:09:32.060><c> and</c><00:09:32.240><c> we</c><00:09:33.170><c> provide</c><00:09:33.500><c> an</c><00:09:33.680><c> if'</c><00:09:33.950><c> net</c>

00:09:34.150 --> 00:09:34.160 align:start position:0%
temporary and we provide an if' net
 

00:09:34.160 --> 00:09:36.130 align:start position:0%
temporary and we provide an if' net
reference<00:09:34.520><c> and</c><00:09:34.700><c> is</c><00:09:34.970><c> net</c><00:09:35.150><c> relief</c><00:09:35.480><c> for</c><00:09:35.900><c> handling</c>

00:09:36.130 --> 00:09:36.140 align:start position:0%
reference and is net relief for handling
 

00:09:36.140 --> 00:09:38.770 align:start position:0%
reference and is net relief for handling
the<00:09:36.260><c> reference</c><00:09:36.620><c> counting</c><00:09:37.240><c> for</c><00:09:38.240><c> now</c><00:09:38.360><c> when</c><00:09:38.690><c> I</c>

00:09:38.770 --> 00:09:38.780 align:start position:0%
the reference counting for now when I
 

00:09:38.780 --> 00:09:40.300 align:start position:0%
the reference counting for now when I
have<00:09:38.930><c> net</c><00:09:39.080><c> release</c><00:09:39.320><c> reaches</c><00:09:39.680><c> zero</c><00:09:39.890><c> the</c>

00:09:40.300 --> 00:09:40.310 align:start position:0%
have net release reaches zero the
 

00:09:40.310 --> 00:09:42.760 align:start position:0%
have net release reaches zero the
interface<00:09:41.090><c> gets</c><00:09:41.330><c> recycled</c><00:09:41.600><c> in</c><00:09:42.020><c> the</c><00:09:42.200><c> future</c><00:09:42.500><c> we</c>

00:09:42.760 --> 00:09:42.770 align:start position:0%
interface gets recycled in the future we
 

00:09:42.770 --> 00:09:46.120 align:start position:0%
interface gets recycled in the future we
will<00:09:42.950><c> free</c><00:09:43.790><c> it</c><00:09:44.530><c> after</c><00:09:45.530><c> you've</c><00:09:45.650><c> allocated</c><00:09:45.770><c> the</c>

00:09:46.120 --> 00:09:46.130 align:start position:0%
will free it after you've allocated the
 

00:09:46.130 --> 00:09:47.320 align:start position:0%
will free it after you've allocated the
interface<00:09:46.520><c> you</c><00:09:46.760><c> can</c><00:09:46.790><c> set</c><00:09:47.090><c> additional</c>

00:09:47.320 --> 00:09:47.330 align:start position:0%
interface you can set additional
 

00:09:47.330 --> 00:09:51.940 align:start position:0%
interface you can set additional
properties<00:09:50.440><c> once</c><00:09:51.440><c> you've</c><00:09:51.590><c> set</c><00:09:51.740><c> up</c><00:09:51.830><c> the</c>

00:09:51.940 --> 00:09:51.950 align:start position:0%
properties once you've set up the
 

00:09:51.950 --> 00:09:53.440 align:start position:0%
properties once you've set up the
interface<00:09:52.280><c> the</c><00:09:52.460><c> way</c><00:09:52.580><c> that</c><00:09:52.700><c> you</c><00:09:52.790><c> want</c><00:09:52.910><c> it</c><00:09:53.060><c> you</c>

00:09:53.440 --> 00:09:53.450 align:start position:0%
interface the way that you want it you
 

00:09:53.450 --> 00:09:55.150 align:start position:0%
interface the way that you want it you
can<00:09:53.600><c> use</c><00:09:53.750><c> I</c><00:09:53.870><c> F</c><00:09:54.020><c> net</c><00:09:54.200><c> attached</c><00:09:54.440><c> to</c><00:09:54.680><c> attach</c><00:09:54.950><c> the</c>

00:09:55.150 --> 00:09:55.160 align:start position:0%
can use I F net attached to attach the
 

00:09:55.160 --> 00:09:57.190 align:start position:0%
can use I F net attached to attach the
interface<00:09:55.520><c> to</c><00:09:55.820><c> the</c><00:09:55.850><c> networking</c><00:09:56.180><c> stack</c><00:09:56.570><c> you</c>

00:09:57.190 --> 00:09:57.200 align:start position:0%
interface to the networking stack you
 

00:09:57.200 --> 00:09:59.200 align:start position:0%
interface to the networking stack you
can<00:09:57.320><c> also</c><00:09:57.440><c> specify</c><00:09:57.770><c> a</c><00:09:58.010><c> link</c><00:09:58.250><c> layer</c><00:09:58.850><c> address</c>

00:09:59.200 --> 00:09:59.210 align:start position:0%
can also specify a link layer address
 

00:09:59.210 --> 00:10:00.460 align:start position:0%
can also specify a link layer address
that<00:09:59.390><c> will</c><00:09:59.480><c> just</c><00:09:59.630><c> be</c><00:09:59.750><c> associated</c><00:10:00.230><c> with</c><00:10:00.260><c> that</c>

00:10:00.460 --> 00:10:00.470 align:start position:0%
that will just be associated with that
 

00:10:00.470 --> 00:10:03.340 align:start position:0%
that will just be associated with that
interface<00:10:01.360><c> at</c><00:10:02.360><c> this</c><00:10:02.600><c> point</c><00:10:02.810><c> the</c><00:10:03.020><c> interface</c>

00:10:03.340 --> 00:10:03.350 align:start position:0%
interface at this point the interface
 

00:10:03.350 --> 00:10:05.650 align:start position:0%
interface at this point the interface
now<00:10:03.530><c> appears</c><00:10:03.830><c> in</c><00:10:03.980><c> ifconfig</c><00:10:04.340><c> and</c><00:10:04.880><c> a</c><00:10:05.390><c> kernel</c>

00:10:05.650 --> 00:10:05.660 align:start position:0%
now appears in ifconfig and a kernel
 

00:10:05.660 --> 00:10:07.450 align:start position:0%
now appears in ifconfig and a kernel
event<00:10:05.870><c> gets</c><00:10:05.990><c> genesis</c><00:10:06.440><c> generated</c><00:10:06.950><c> to</c><00:10:07.070><c> notify</c>

00:10:07.450 --> 00:10:07.460 align:start position:0%
event gets genesis generated to notify
 

00:10:07.460 --> 00:10:10.570 align:start position:0%
event gets genesis generated to notify
the<00:10:08.300><c> stack</c><00:10:08.540><c> and</c><00:10:08.840><c> people</c><00:10:09.230><c> in</c><00:10:09.290><c> user</c><00:10:09.410><c> space</c><00:10:09.580><c> or</c>

00:10:10.570 --> 00:10:10.580 align:start position:0%
the stack and people in user space or
 

00:10:10.580 --> 00:10:12.520 align:start position:0%
the stack and people in user space or
processes<00:10:11.060><c> in</c><00:10:11.180><c> user</c><00:10:11.360><c> space</c><00:10:11.450><c> that</c><00:10:12.350><c> a</c><00:10:12.380><c> new</c>

00:10:12.520 --> 00:10:12.530 align:start position:0%
processes in user space that a new
 

00:10:12.530 --> 00:10:15.040 align:start position:0%
processes in user space that a new
interface<00:10:12.770><c> is</c><00:10:13.070><c> attached</c><00:10:13.400><c> and</c><00:10:13.730><c> that</c><00:10:14.420><c> made</c>

00:10:15.040 --> 00:10:15.050 align:start position:0%
interface is attached and that made
 

00:10:15.050 --> 00:10:19.600 align:start position:0%
interface is attached and that made
sugar<00:10:15.320><c> protocols</c><00:10:16.040><c> to</c><00:10:16.250><c> attach</c><00:10:18.280><c> the</c><00:10:19.280><c> protocol</c>

00:10:19.600 --> 00:10:19.610 align:start position:0%
sugar protocols to attach the protocol
 

00:10:19.610 --> 00:10:20.890 align:start position:0%
sugar protocols to attach the protocol
touch<00:10:19.820><c> is</c><00:10:20.000><c> usually</c><00:10:20.300><c> triggered</c><00:10:20.570><c> from</c><00:10:20.660><c> user</c>

00:10:20.890 --> 00:10:20.900 align:start position:0%
touch is usually triggered from user
 

00:10:20.900 --> 00:10:22.900 align:start position:0%
touch is usually triggered from user
space<00:10:21.200><c> in</c><00:10:21.470><c> response</c><00:10:21.830><c> to</c><00:10:22.130><c> a</c><00:10:22.160><c> kernel</c><00:10:22.490><c> event</c><00:10:22.700><c> that</c>

00:10:22.900 --> 00:10:22.910 align:start position:0%
space in response to a kernel event that
 

00:10:22.910 --> 00:10:25.600 align:start position:0%
space in response to a kernel event that
an<00:10:23.000><c> interface</c><00:10:23.330><c> has</c><00:10:23.480><c> been</c><00:10:23.630><c> attached</c><00:10:24.610><c> the</c>

00:10:25.600 --> 00:10:25.610 align:start position:0%
an interface has been attached the
 

00:10:25.610 --> 00:10:27.280 align:start position:0%
an interface has been attached the
plumber<00:10:25.850><c> code</c><00:10:26.120><c> is</c><00:10:26.360><c> responsible</c><00:10:27.020><c> for</c><00:10:27.170><c> handling</c>

00:10:27.280 --> 00:10:27.290 align:start position:0%
plumber code is responsible for handling
 

00:10:27.290 --> 00:10:30.100 align:start position:0%
plumber code is responsible for handling
the<00:10:27.950><c> attached</c><00:10:28.250><c> it's</c><00:10:29.210><c> plum</c><00:10:29.510><c> function</c><00:10:29.960><c> gets</c>

00:10:30.100 --> 00:10:30.110 align:start position:0%
the attached it's plum function gets
 

00:10:30.110 --> 00:10:31.930 align:start position:0%
the attached it's plum function gets
called<00:10:30.200><c> to</c><00:10:30.800><c> attach</c><00:10:31.100><c> the</c><00:10:31.130><c> protocol</c><00:10:31.730><c> to</c><00:10:31.910><c> the</c>

00:10:31.930 --> 00:10:31.940 align:start position:0%
called to attach the protocol to the
 

00:10:31.940 --> 00:10:34.630 align:start position:0%
called to attach the protocol to the
interface<00:10:32.380><c> which</c><00:10:33.380><c> in</c><00:10:33.710><c> turn</c><00:10:33.980><c> triggers</c><00:10:34.430><c> the</c>

00:10:34.630 --> 00:10:34.640 align:start position:0%
interface which in turn triggers the
 

00:10:34.640 --> 00:10:37.870 align:start position:0%
interface which in turn triggers the
interfaces<00:10:35.210><c> add</c><00:10:35.390><c> protocol</c><00:10:35.930><c> function</c><00:10:36.880><c> the</c>

00:10:37.870 --> 00:10:37.880 align:start position:0%
interfaces add protocol function the
 

00:10:37.880 --> 00:10:40.030 align:start position:0%
interfaces add protocol function the
interfaces<00:10:38.330><c> add</c><00:10:38.510><c> protocol</c><00:10:38.960><c> function</c><00:10:39.410><c> gets</c>

00:10:40.030 --> 00:10:40.040 align:start position:0%
interfaces add protocol function gets
 

00:10:40.040 --> 00:10:41.800 align:start position:0%
interfaces add protocol function gets
passed<00:10:40.280><c> a</c><00:10:40.460><c> list</c><00:10:40.640><c> of</c><00:10:40.730><c> lists</c><00:10:41.150><c> of</c><00:10:41.360><c> G</c><00:10:41.600><c> MUX</c>

00:10:41.800 --> 00:10:41.810 align:start position:0%
passed a list of lists of G MUX
 

00:10:41.810 --> 00:10:45.370 align:start position:0%
passed a list of lists of G MUX
descriptors<00:10:42.350><c> and</c><00:10:43.600><c> those</c><00:10:44.600><c> DMX</c><00:10:44.930><c> descriptors</c>

00:10:45.370 --> 00:10:45.380 align:start position:0%
descriptors and those DMX descriptors
 

00:10:45.380 --> 00:10:47.560 align:start position:0%
descriptors and those DMX descriptors
then<00:10:45.560><c> map</c><00:10:46.130><c> to</c><00:10:46.340><c> a</c><00:10:46.370><c> specific</c><00:10:46.640><c> protocol</c><00:10:47.180><c> family</c>

00:10:47.560 --> 00:10:47.570 align:start position:0%
then map to a specific protocol family
 

00:10:47.570 --> 00:10:49.750 align:start position:0%
then map to a specific protocol family
it's<00:10:48.260><c> the</c><00:10:48.440><c> interfaces</c><00:10:48.920><c> responsibility</c><00:10:49.640><c> to</c>

00:10:49.750 --> 00:10:49.760 align:start position:0%
it's the interfaces responsibility to
 

00:10:49.760 --> 00:10:51.760 align:start position:0%
it's the interfaces responsibility to
keep<00:10:49.880><c> track</c><00:10:50.120><c> track</c><00:10:50.690><c> of</c><00:10:50.870><c> those</c><00:10:50.960><c> mappings</c><00:10:51.230><c> so</c>

00:10:51.760 --> 00:10:51.770 align:start position:0%
keep track track of those mappings so
 

00:10:51.770 --> 00:10:54.640 align:start position:0%
keep track track of those mappings so
that<00:10:51.950><c> when</c><00:10:52.070><c> the</c><00:10:52.160><c> demo</c><00:10:52.400><c> Winnie</c><00:10:53.470><c> interfaces</c><00:10:54.470><c> d</c>

00:10:54.640 --> 00:10:54.650 align:start position:0%
that when the demo Winnie interfaces d
 

00:10:54.650 --> 00:10:56.620 align:start position:0%
that when the demo Winnie interfaces d
MUX<00:10:54.890><c> function</c><00:10:55.250><c> gets</c><00:10:55.430><c> called</c><00:10:55.490><c> to</c><00:10:55.970><c> match</c><00:10:56.480><c> a</c>

00:10:56.620 --> 00:10:56.630 align:start position:0%
MUX function gets called to match a
 

00:10:56.630 --> 00:10:58.870 align:start position:0%
MUX function gets called to match a
packet<00:10:56.960><c> to</c><00:10:57.080><c> a</c><00:10:57.110><c> protocol</c><00:10:57.590><c> it</c><00:10:58.190><c> can</c><00:10:58.400><c> refer</c><00:10:58.700><c> to</c>

00:10:58.870 --> 00:10:58.880 align:start position:0%
packet to a protocol it can refer to
 

00:10:58.880 --> 00:11:02.890 align:start position:0%
packet to a protocol it can refer to
that<00:10:59.000><c> list</c><00:10:59.240><c> that</c><00:10:59.450><c> it's</c><00:10:59.600><c> stored</c><00:11:01.510><c> the</c><00:11:02.510><c> protocol</c>

00:11:02.890 --> 00:11:02.900 align:start position:0%
that list that it's stored the protocol
 

00:11:02.900 --> 00:11:04.450 align:start position:0%
that list that it's stored the protocol
detach<00:11:03.260><c> is</c><00:11:03.470><c> also</c><00:11:03.740><c> handled</c><00:11:04.040><c> by</c><00:11:04.130><c> the</c><00:11:04.160><c> plumber</c>

00:11:04.450 --> 00:11:04.460 align:start position:0%
detach is also handled by the plumber
 

00:11:04.460 --> 00:11:07.210 align:start position:0%
detach is also handled by the plumber
the<00:11:05.390><c> plumber</c><00:11:05.660><c> unplumbed</c><00:11:06.560><c> function</c><00:11:06.950><c> is</c><00:11:07.040><c> called</c>

00:11:07.210 --> 00:11:07.220 align:start position:0%
the plumber unplumbed function is called
 

00:11:07.220 --> 00:11:09.760 align:start position:0%
the plumber unplumbed function is called
which<00:11:07.790><c> then</c><00:11:08.060><c> calls</c><00:11:08.450><c> a</c><00:11:08.570><c> function</c><00:11:08.690><c> to</c><00:11:09.110><c> detach</c>

00:11:09.760 --> 00:11:09.770 align:start position:0%
which then calls a function to detach
 

00:11:09.770 --> 00:11:12.340 align:start position:0%
which then calls a function to detach
the<00:11:10.040><c> protocol</c><00:11:10.430><c> from</c><00:11:10.610><c> the</c><00:11:10.790><c> interface</c><00:11:11.350><c> the</c>

00:11:12.340 --> 00:11:12.350 align:start position:0%
the protocol from the interface the
 

00:11:12.350 --> 00:11:13.900 align:start position:0%
the protocol from the interface the
interface<00:11:12.380><c> is</c><00:11:12.710><c> the</c><00:11:12.980><c> leak</c><00:11:13.130><c> protocol</c><00:11:13.550><c> function</c>

00:11:13.900 --> 00:11:13.910 align:start position:0%
interface is the leak protocol function
 

00:11:13.910 --> 00:11:15.550 align:start position:0%
interface is the leak protocol function
gets<00:11:14.090><c> called</c><00:11:14.150><c> which</c><00:11:14.630><c> gives</c><00:11:14.870><c> the</c><00:11:14.960><c> interface</c><00:11:15.380><c> an</c>

00:11:15.550 --> 00:11:15.560 align:start position:0%
gets called which gives the interface an
 

00:11:15.560 --> 00:11:17.230 align:start position:0%
gets called which gives the interface an
opportunity<00:11:16.130><c> to</c><00:11:16.250><c> clean</c><00:11:16.460><c> up</c><00:11:16.610><c> that</c><00:11:16.820><c> d</c><00:11:17.030><c> MUX</c>

00:11:17.230 --> 00:11:17.240 align:start position:0%
opportunity to clean up that d MUX
 

00:11:17.240 --> 00:11:20.059 align:start position:0%
opportunity to clean up that d MUX
descriptor<00:11:17.690><c> to</c><00:11:17.810><c> protocol</c><00:11:18.170><c> family</c><00:11:18.530><c> mapping</c>

00:11:20.059 --> 00:11:20.069 align:start position:0%
descriptor to protocol family mapping
 

00:11:20.069 --> 00:11:22.799 align:start position:0%
descriptor to protocol family mapping
once<00:11:21.069><c> this</c><00:11:21.249><c> is</c><00:11:21.430><c> done</c><00:11:21.459><c> the</c><00:11:21.999><c> protocol</c><00:11:22.389><c> detached</c>

00:11:22.799 --> 00:11:22.809 align:start position:0%
once this is done the protocol detached
 

00:11:22.809 --> 00:11:24.179 align:start position:0%
once this is done the protocol detached
callback<00:11:23.259><c> is</c><00:11:23.470><c> called</c><00:11:23.680><c> to</c><00:11:23.800><c> notify</c><00:11:24.129><c> the</c>

00:11:24.179 --> 00:11:24.189 align:start position:0%
callback is called to notify the
 

00:11:24.189 --> 00:11:25.769 align:start position:0%
callback is called to notify the
protocol<00:11:24.639><c> that</c><00:11:24.790><c> it</c><00:11:24.879><c> has</c><00:11:25.059><c> been</c><00:11:25.240><c> detached</c><00:11:25.509><c> from</c>

00:11:25.769 --> 00:11:25.779 align:start position:0%
protocol that it has been detached from
 

00:11:25.779 --> 00:11:31.110 align:start position:0%
protocol that it has been detached from
the<00:11:25.959><c> interface</c><00:11:28.559><c> the</c><00:11:29.559><c> outbound</c><00:11:29.829><c> packet</c><00:11:30.220><c> passes</c>

00:11:31.110 --> 00:11:31.120 align:start position:0%
the interface the outbound packet passes
 

00:11:31.120 --> 00:11:35.670 align:start position:0%
the interface the outbound packet passes
a<00:11:31.329><c> little</c><00:11:31.959><c> bit</c><00:11:32.279><c> complex</c><00:11:33.959><c> the</c><00:11:34.959><c> protocol</c><00:11:35.439><c> calls</c>

00:11:35.670 --> 00:11:35.680 align:start position:0%
a little bit complex the protocol calls
 

00:11:35.680 --> 00:11:38.360 align:start position:0%
a little bit complex the protocol calls
is<00:11:36.040><c> net</c><00:11:36.189><c> output</c><00:11:36.399><c> and</c><00:11:36.819><c> the</c><00:11:37.600><c> iaf</c><00:11:37.839><c> net</c><00:11:38.019><c> output</c>

00:11:38.360 --> 00:11:38.370 align:start position:0%
is net output and the iaf net output
 

00:11:38.370 --> 00:11:41.579 align:start position:0%
is net output and the iaf net output
calls<00:11:39.370><c> any</c><00:11:39.759><c> interface</c><00:11:40.209><c> filters</c><00:11:40.660><c> pre</c><00:11:41.199><c> output</c>

00:11:41.579 --> 00:11:41.589 align:start position:0%
calls any interface filters pre output
 

00:11:41.589 --> 00:11:43.350 align:start position:0%
calls any interface filters pre output
functions<00:11:42.040><c> and</c><00:11:42.249><c> give</c><00:11:42.579><c> the</c><00:11:42.730><c> filters</c><00:11:43.029><c> a</c><00:11:43.120><c> chance</c>

00:11:43.350 --> 00:11:43.360 align:start position:0%
functions and give the filters a chance
 

00:11:43.360 --> 00:11:45.030 align:start position:0%
functions and give the filters a chance
to<00:11:43.540><c> process</c><00:11:43.749><c> the</c><00:11:44.050><c> packet</c><00:11:44.410><c> the</c><00:11:44.529><c> floor</c><00:11:44.769><c> and</c>

00:11:45.030 --> 00:11:45.040 align:start position:0%
to process the packet the floor and
 

00:11:45.040 --> 00:11:48.509 align:start position:0%
to process the packet the floor and
interface<00:11:45.430><c> header</c><00:11:45.670><c> has</c><00:11:45.790><c> been</c><00:11:45.970><c> prepended</c><00:11:47.519><c> once</c>

00:11:48.509 --> 00:11:48.519 align:start position:0%
interface header has been prepended once
 

00:11:48.519 --> 00:11:50.670 align:start position:0%
interface header has been prepended once
that's<00:11:48.759><c> done</c><00:11:49.029><c> the</c><00:11:49.660><c> protocols</c><00:11:50.110><c> pre</c><00:11:50.379><c> output</c>

00:11:50.670 --> 00:11:50.680 align:start position:0%
that's done the protocols pre output
 

00:11:50.680 --> 00:11:52.829 align:start position:0%
that's done the protocols pre output
function<00:11:51.040><c> is</c><00:11:51.160><c> called</c><00:11:51.339><c> the</c><00:11:52.209><c> protocols</c><00:11:52.629><c> pre</c>

00:11:52.829 --> 00:11:52.839 align:start position:0%
function is called the protocols pre
 

00:11:52.839 --> 00:11:54.360 align:start position:0%
function is called the protocols pre
output<00:11:53.110><c> function</c><00:11:53.470><c> is</c><00:11:53.649><c> responsible</c><00:11:54.220><c> for</c>

00:11:54.360 --> 00:11:54.370 align:start position:0%
output function is responsible for
 

00:11:54.370 --> 00:11:55.920 align:start position:0%
output function is responsible for
determining<00:11:54.519><c> the</c><00:11:54.910><c> destination</c><00:11:55.480><c> link</c><00:11:55.660><c> layer</c>

00:11:55.920 --> 00:11:55.930 align:start position:0%
determining the destination link layer
 

00:11:55.930 --> 00:11:57.960 align:start position:0%
determining the destination link layer
address<00:11:56.439><c> this</c><00:11:56.920><c> may</c><00:11:57.069><c> require</c><00:11:57.220><c> performing</c><00:11:57.879><c> an</c>

00:11:57.960 --> 00:11:57.970 align:start position:0%
address this may require performing an
 

00:11:57.970 --> 00:12:00.780 align:start position:0%
address this may require performing an
art<00:11:58.089><c> or</c><00:11:58.329><c> whatever</c><00:11:59.309><c> neighborhood</c><00:12:00.309><c> neighbor</c>

00:12:00.780 --> 00:12:00.790 align:start position:0%
art or whatever neighborhood neighbor
 

00:12:00.790 --> 00:12:05.519 align:start position:0%
art or whatever neighborhood neighbor
discovery<00:12:01.059><c> for</c><00:12:01.389><c> ipv6</c><00:12:03.360><c> the</c><00:12:04.360><c> protocols</c><00:12:05.319><c> pre</c>

00:12:05.519 --> 00:12:05.529 align:start position:0%
discovery for ipv6 the protocols pre
 

00:12:05.529 --> 00:12:07.110 align:start position:0%
discovery for ipv6 the protocols pre
output<00:12:05.829><c> function</c><00:12:06.189><c> is</c><00:12:06.279><c> also</c><00:12:06.550><c> responsible</c><00:12:06.699><c> for</c>

00:12:07.110 --> 00:12:07.120 align:start position:0%
output function is also responsible for
 

00:12:07.120 --> 00:12:10.769 align:start position:0%
output function is also responsible for
determining<00:12:07.959><c> the</c><00:12:08.709><c> frame</c><00:12:08.920><c> type</c><00:12:09.600><c> from</c><00:12:10.600><c> there</c>

00:12:10.769 --> 00:12:10.779 align:start position:0%
determining the frame type from there
 

00:12:10.779 --> 00:12:12.840 align:start position:0%
determining the frame type from there
the<00:12:11.110><c> protocol</c><00:12:11.529><c> at</c><00:12:12.009><c> the</c><00:12:12.160><c> destination</c><00:12:12.309><c> link</c>

00:12:12.840 --> 00:12:12.850 align:start position:0%
the protocol at the destination link
 

00:12:12.850 --> 00:12:14.699 align:start position:0%
the protocol at the destination link
layer<00:12:12.999><c> address</c><00:12:13.389><c> and</c><00:12:13.600><c> the</c><00:12:14.050><c> frame</c><00:12:14.230><c> type</c><00:12:14.439><c> are</c>

00:12:14.699 --> 00:12:14.709 align:start position:0%
layer address and the frame type are
 

00:12:14.709 --> 00:12:16.019 align:start position:0%
layer address and the frame type are
passed<00:12:14.889><c> on</c><00:12:15.069><c> to</c><00:12:15.129><c> the</c><00:12:15.309><c> interfaces</c><00:12:15.819><c> framer</c>

00:12:16.019 --> 00:12:16.029 align:start position:0%
passed on to the interfaces framer
 

00:12:16.029 --> 00:12:17.579 align:start position:0%
passed on to the interfaces framer
function<00:12:16.540><c> which</c><00:12:16.839><c> then</c><00:12:17.050><c> generates</c><00:12:17.410><c> the</c>

00:12:17.579 --> 00:12:17.589 align:start position:0%
function which then generates the
 

00:12:17.589 --> 00:12:20.489 align:start position:0%
function which then generates the
interface<00:12:17.980><c> header</c><00:12:18.220><c> at</c><00:12:19.120><c> that</c><00:12:20.110><c> point</c><00:12:20.350><c> the</c>

00:12:20.489 --> 00:12:20.499 align:start position:0%
interface header at that point the
 

00:12:20.499 --> 00:12:21.780 align:start position:0%
interface header at that point the
interface<00:12:20.860><c> filters</c><00:12:21.249><c> are</c><00:12:21.370><c> all</c><00:12:21.459><c> given</c><00:12:21.699><c> an</c>

00:12:21.780 --> 00:12:21.790 align:start position:0%
interface filters are all given an
 

00:12:21.790 --> 00:12:23.999 align:start position:0%
interface filters are all given an
opportunity<00:12:22.029><c> to</c><00:12:22.509><c> filter</c><00:12:23.019><c> the</c><00:12:23.290><c> fully</c><00:12:23.559><c> formed</c>

00:12:23.999 --> 00:12:24.009 align:start position:0%
opportunity to filter the fully formed
 

00:12:24.009 --> 00:12:26.429 align:start position:0%
opportunity to filter the fully formed
packet<00:12:24.610><c> before</c><00:12:25.449><c> the</c><00:12:25.629><c> interfaces</c><00:12:26.110><c> output</c>

00:12:26.429 --> 00:12:26.439 align:start position:0%
packet before the interfaces output
 

00:12:26.439 --> 00:12:27.929 align:start position:0%
packet before the interfaces output
function<00:12:26.769><c> is</c><00:12:26.889><c> called</c><00:12:27.040><c> to</c><00:12:27.429><c> transmit</c><00:12:27.850><c> the</c>

00:12:27.929 --> 00:12:27.939 align:start position:0%
function is called to transmit the
 

00:12:27.939 --> 00:12:32.009 align:start position:0%
function is called to transmit the
packet<00:12:28.300><c> on</c><00:12:29.759><c> the</c><00:12:30.759><c> inbound</c><00:12:31.089><c> side</c><00:12:31.329><c> the</c><00:12:31.660><c> driver</c><00:12:31.870><c> is</c>

00:12:32.009 --> 00:12:32.019 align:start position:0%
packet on the inbound side the driver is
 

00:12:32.019 --> 00:12:34.799 align:start position:0%
packet on the inbound side the driver is
responsible<00:12:32.139><c> for</c><00:12:32.679><c> calling</c><00:12:32.949><c> is</c><00:12:33.129><c> net</c><00:12:33.399><c> input</c><00:12:33.809><c> to</c>

00:12:34.799 --> 00:12:34.809 align:start position:0%
responsible for calling is net input to
 

00:12:34.809 --> 00:12:37.860 align:start position:0%
responsible for calling is net input to
pass<00:12:35.079><c> the</c><00:12:35.259><c> packet</c><00:12:35.589><c> to</c><00:12:35.740><c> the</c><00:12:35.769><c> stack</c><00:12:36.069><c> I</c><00:12:36.720><c> have</c><00:12:37.720><c> net</c>

00:12:37.860 --> 00:12:37.870 align:start position:0%
pass the packet to the stack I have net
 

00:12:37.870 --> 00:12:40.290 align:start position:0%
pass the packet to the stack I have net
input<00:12:38.019><c> cuse</c><00:12:38.620><c> the</c><00:12:38.769><c> packet</c><00:12:39.189><c> and</c><00:12:39.370><c> at</c><00:12:40.029><c> a</c><00:12:40.120><c> later</c>

00:12:40.290 --> 00:12:40.300 align:start position:0%
input cuse the packet and at a later
 

00:12:40.300 --> 00:12:41.999 align:start position:0%
input cuse the packet and at a later
time<00:12:40.389><c> the</c><00:12:40.720><c> input</c><00:12:41.050><c> thread</c><00:12:41.290><c> comes</c><00:12:41.529><c> along</c><00:12:41.800><c> and</c>

00:12:41.999 --> 00:12:42.009 align:start position:0%
time the input thread comes along and
 

00:12:42.009 --> 00:12:44.220 align:start position:0%
time the input thread comes along and
dq's<00:12:42.490><c> the</c><00:12:42.730><c> packet</c><00:12:43.089><c> it</c><00:12:43.300><c> then</c><00:12:43.929><c> calls</c><00:12:44.139><c> the</c>

00:12:44.220 --> 00:12:44.230 align:start position:0%
dq's the packet it then calls the
 

00:12:44.230 --> 00:12:45.720 align:start position:0%
dq's the packet it then calls the
interfaces<00:12:44.709><c> d</c><00:12:44.889><c> MUX</c><00:12:45.069><c> function</c><00:12:45.490><c> to</c><00:12:45.610><c> determine</c>

00:12:45.720 --> 00:12:45.730 align:start position:0%
interfaces d MUX function to determine
 

00:12:45.730 --> 00:12:48.319 align:start position:0%
interfaces d MUX function to determine
which<00:12:46.120><c> protocol</c><00:12:46.569><c> that</c><00:12:46.779><c> packet</c><00:12:47.139><c> belongs</c><00:12:47.439><c> to</c>

00:12:48.319 --> 00:12:48.329 align:start position:0%
which protocol that packet belongs to
 

00:12:48.329 --> 00:12:50.819 align:start position:0%
which protocol that packet belongs to
the<00:12:49.329><c> protocols</c><00:12:49.809><c> interface</c><00:12:50.319><c> filters</c><00:12:50.679><c> have</c>

00:12:50.819 --> 00:12:50.829 align:start position:0%
the protocols interface filters have
 

00:12:50.829 --> 00:12:53.549 align:start position:0%
the protocols interface filters have
been<00:12:50.949><c> called</c><00:12:51.189><c> and</c><00:12:51.569><c> finally</c><00:12:52.569><c> the</c><00:12:53.170><c> protocols</c>

00:12:53.549 --> 00:12:53.559 align:start position:0%
been called and finally the protocols
 

00:12:53.559 --> 00:12:59.429 align:start position:0%
been called and finally the protocols
input<00:12:53.889><c> function</c><00:12:54.069><c> is</c><00:12:54.759><c> called</c><00:12:58.019><c> to</c><00:12:59.019><c> request</c><00:12:59.350><c> a</c>

00:12:59.429 --> 00:12:59.439 align:start position:0%
input function is called to request a
 

00:12:59.439 --> 00:13:02.249 align:start position:0%
input function is called to request a
detach<00:12:59.800><c> from</c><00:13:00.160><c> the</c><00:13:00.579><c> sack</c><00:13:00.970><c> the</c><00:13:01.600><c> driver</c><00:13:01.839><c> can</c><00:13:02.050><c> call</c>

00:13:02.249 --> 00:13:02.259 align:start position:0%
detach from the sack the driver can call
 

00:13:02.259 --> 00:13:04.619 align:start position:0%
detach from the sack the driver can call
is<00:13:02.529><c> met</c><00:13:02.740><c> detach</c><00:13:03.100><c> the</c><00:13:03.970><c> detaches</c><00:13:04.509><c> are</c>

00:13:04.619 --> 00:13:04.629 align:start position:0%
is met detach the detaches are
 

00:13:04.629 --> 00:13:08.160 align:start position:0%
is met detach the detaches are
asynchronous<00:13:04.870><c> with</c><00:13:05.319><c> a</c><00:13:05.350><c> call</c><00:13:05.589><c> back</c><00:13:05.769><c> when</c><00:13:07.170><c> you</c>

00:13:08.160 --> 00:13:08.170 align:start position:0%
asynchronous with a call back when you
 

00:13:08.170 --> 00:13:10.259 align:start position:0%
asynchronous with a call back when you
call<00:13:08.319><c> I've</c><00:13:08.470><c> net</c><00:13:08.679><c> detach</c><00:13:09.009><c> there's</c><00:13:09.699><c> a</c><00:13:09.879><c> kernel</c>

00:13:10.259 --> 00:13:10.269 align:start position:0%
call I've net detach there's a kernel
 

00:13:10.269 --> 00:13:11.879 align:start position:0%
call I've net detach there's a kernel
event<00:13:10.540><c> that</c><00:13:10.629><c> gets</c><00:13:10.779><c> generated</c><00:13:10.899><c> to</c><00:13:11.470><c> notify</c><00:13:11.829><c> the</c>

00:13:11.879 --> 00:13:11.889 align:start position:0%
event that gets generated to notify the
 

00:13:11.889 --> 00:13:15.419 align:start position:0%
event that gets generated to notify the
stack<00:13:12.189><c> and</c><00:13:12.720><c> processes</c><00:13:13.720><c> that</c><00:13:14.290><c> the</c><00:13:14.920><c> interface</c>

00:13:15.419 --> 00:13:15.429 align:start position:0%
stack and processes that the interface
 

00:13:15.429 --> 00:13:17.579 align:start position:0%
stack and processes that the interface
is<00:13:15.459><c> going</c><00:13:15.819><c> away</c><00:13:15.939><c> and</c><00:13:16.240><c> this</c><00:13:16.569><c> can</c><00:13:16.779><c> lead</c><00:13:16.929><c> to</c><00:13:16.990><c> the</c>

00:13:17.579 --> 00:13:17.589 align:start position:0%
is going away and this can lead to the
 

00:13:17.589 --> 00:13:19.049 align:start position:0%
is going away and this can lead to the
protocol<00:13:17.920><c> this</c><00:13:18.279><c> leads</c><00:13:18.490><c> to</c><00:13:18.639><c> the</c><00:13:18.699><c> protocols</c>

00:13:19.049 --> 00:13:19.059 align:start position:0%
protocol this leads to the protocols
 

00:13:19.059 --> 00:13:21.660 align:start position:0%
protocol this leads to the protocols
being<00:13:19.269><c> detached</c><00:13:20.100><c> once</c><00:13:21.100><c> all</c><00:13:21.279><c> the</c><00:13:21.309><c> protocols</c>

00:13:21.660 --> 00:13:21.670 align:start position:0%
being detached once all the protocols
 

00:13:21.670 --> 00:13:23.400 align:start position:0%
being detached once all the protocols
have<00:13:21.939><c> been</c><00:13:22.029><c> detached</c><00:13:22.389><c> the</c><00:13:23.050><c> interface</c><00:13:23.379><c> is</c>

00:13:23.400 --> 00:13:23.410 align:start position:0%
have been detached the interface is
 

00:13:23.410 --> 00:13:25.759 align:start position:0%
have been detached the interface is
removed<00:13:23.860><c> from</c><00:13:23.949><c> the</c><00:13:24.069><c> list</c><00:13:24.249><c> of</c><00:13:24.370><c> interfaces</c><00:13:24.970><c> and</c>

00:13:25.759 --> 00:13:25.769 align:start position:0%
removed from the list of interfaces and
 

00:13:25.769 --> 00:13:28.049 align:start position:0%
removed from the list of interfaces and
the<00:13:26.769><c> interfaces</c><00:13:27.220><c> detached</c><00:13:27.579><c> function</c><00:13:27.970><c> is</c>

00:13:28.049 --> 00:13:28.059 align:start position:0%
the interfaces detached function is
 

00:13:28.059 --> 00:13:29.519 align:start position:0%
the interfaces detached function is
called<00:13:28.209><c> back</c><00:13:28.480><c> to</c><00:13:28.779><c> let</c><00:13:28.929><c> the</c><00:13:29.049><c> interface</c><00:13:29.350><c> know</c>

00:13:29.519 --> 00:13:29.529 align:start position:0%
called back to let the interface know
 

00:13:29.529 --> 00:13:30.809 align:start position:0%
called back to let the interface know
that<00:13:29.679><c> it's</c><00:13:29.799><c> safe</c><00:13:29.920><c> to</c><00:13:30.100><c> unload</c><00:13:30.399><c> and</c><00:13:30.670><c> that</c><00:13:30.759><c> it</c>

00:13:30.809 --> 00:13:30.819 align:start position:0%
that it's safe to unload and that it
 

00:13:30.819 --> 00:13:32.160 align:start position:0%
that it's safe to unload and that it
won't<00:13:30.939><c> be</c><00:13:31.059><c> called</c><00:13:31.269><c> again</c>

00:13:32.160 --> 00:13:32.170 align:start position:0%
won't be called again
 

00:13:32.170 --> 00:13:34.350 align:start position:0%
won't be called again
at<00:13:32.709><c> this</c><00:13:32.950><c> point</c><00:13:33.190><c> to</c><00:13:33.550><c> these</c><00:13:33.700><c> stack</c><00:13:33.910><c> releases</c>

00:13:34.350 --> 00:13:34.360 align:start position:0%
at this point to these stack releases
 

00:13:34.360 --> 00:13:36.420 align:start position:0%
at this point to these stack releases
its<00:13:34.510><c> reference</c><00:13:34.899><c> on</c><00:13:35.019><c> the</c><00:13:35.620><c> interface</c><00:13:35.920><c> and</c><00:13:36.190><c> if</c>

00:13:36.420 --> 00:13:36.430 align:start position:0%
its reference on the interface and if
 

00:13:36.430 --> 00:13:37.560 align:start position:0%
its reference on the interface and if
there<00:13:36.550><c> are</c><00:13:36.579><c> no</c><00:13:36.730><c> other</c><00:13:36.850><c> references</c><00:13:37.389><c> the</c>

00:13:37.560 --> 00:13:37.570 align:start position:0%
there are no other references the
 

00:13:37.570 --> 00:13:42.540 align:start position:0%
there are no other references the
interfaces<00:13:38.079><c> either</c><00:13:38.230><c> recycled</c><00:13:38.560><c> if</c><00:13:38.889><c> read</c><00:13:41.550><c> there</c>

00:13:42.540 --> 00:13:42.550 align:start position:0%
interfaces either recycled if read there
 

00:13:42.550 --> 00:13:43.829 align:start position:0%
interfaces either recycled if read there
are<00:13:42.670><c> some</c><00:13:42.760><c> locking</c><00:13:43.120><c> considerations</c><00:13:43.720><c> when</c>

00:13:43.829 --> 00:13:43.839 align:start position:0%
are some locking considerations when
 

00:13:43.839 --> 00:13:46.079 align:start position:0%
are some locking considerations when
we're<00:13:43.990><c> working</c><00:13:44.529><c> with</c><00:13:44.620><c> or</c><00:13:45.250><c> supplying</c><00:13:45.940><c> an</c>

00:13:46.079 --> 00:13:46.089 align:start position:0%
we're working with or supplying an
 

00:13:46.089 --> 00:13:49.199 align:start position:0%
we're working with or supplying an
interface<00:13:46.420><c> to</c><00:13:46.630><c> the</c><00:13:46.660><c> networking</c><00:13:46.990><c> stack</c><00:13:48.209><c> the</c>

00:13:49.199 --> 00:13:49.209 align:start position:0%
interface to the networking stack the
 

00:13:49.209 --> 00:13:50.819 align:start position:0%
interface to the networking stack the
access<00:13:49.570><c> to</c><00:13:49.720><c> your</c><00:13:49.810><c> network</c><00:13:49.870><c> interface</c><00:13:50.470><c> is</c><00:13:50.680><c> not</c>

00:13:50.819 --> 00:13:50.829 align:start position:0%
access to your network interface is not
 

00:13:50.829 --> 00:13:53.129 align:start position:0%
access to your network interface is not
serialized<00:13:51.459><c> so</c><00:13:52.149><c> you</c><00:13:52.209><c> need</c><00:13:52.420><c> to</c><00:13:52.510><c> protect</c><00:13:52.810><c> any</c><00:13:52.990><c> of</c>

00:13:53.129 --> 00:13:53.139 align:start position:0%
serialized so you need to protect any of
 

00:13:53.139 --> 00:13:55.680 align:start position:0%
serialized so you need to protect any of
your<00:13:53.260><c> data</c><00:13:53.410><c> structures</c><00:13:54.269><c> there</c><00:13:55.269><c> are</c><00:13:55.360><c> also</c><00:13:55.449><c> some</c>

00:13:55.680 --> 00:13:55.690 align:start position:0%
your data structures there are also some
 

00:13:55.690 --> 00:13:57.090 align:start position:0%
your data structures there are also some
limitations<00:13:56.290><c> in</c><00:13:56.440><c> what</c><00:13:56.560><c> you</c><00:13:56.649><c> can</c><00:13:56.769><c> do</c><00:13:56.829><c> from</c><00:13:56.980><c> your</c>

00:13:57.090 --> 00:13:57.100 align:start position:0%
limitations in what you can do from your
 

00:13:57.100 --> 00:13:59.850 align:start position:0%
limitations in what you can do from your
callbacks<00:13:58.019><c> you</c><00:13:59.019><c> cannot</c><00:13:59.350><c> add</c><00:13:59.529><c> another</c>

00:13:59.850 --> 00:13:59.860 align:start position:0%
callbacks you cannot add another
 

00:13:59.860 --> 00:14:01.860 align:start position:0%
callbacks you cannot add another
interface<00:14:00.160><c> or</c><00:14:00.519><c> add</c><00:14:00.760><c> a</c><00:14:00.790><c> protocol</c><00:14:01.269><c> from</c><00:14:01.630><c> any</c><00:14:01.779><c> of</c>

00:14:01.860 --> 00:14:01.870 align:start position:0%
interface or add a protocol from any of
 

00:14:01.870 --> 00:14:04.050 align:start position:0%
interface or add a protocol from any of
the<00:14:01.959><c> callbacks</c><00:14:02.320><c> that</c><00:14:02.410><c> you</c><00:14:02.560><c> supply</c><00:14:03.060><c> through</c>

00:14:04.050 --> 00:14:04.060 align:start position:0%
the callbacks that you supply through
 

00:14:04.060 --> 00:14:06.480 align:start position:0%
the callbacks that you supply through
the<00:14:04.209><c> network</c><00:14:04.540><c> interface</c><00:14:05.019><c> in</c><00:14:05.199><c> addition</c><00:14:06.130><c> if</c>

00:14:06.480 --> 00:14:06.490 align:start position:0%
the network interface in addition if
 

00:14:06.490 --> 00:14:07.740 align:start position:0%
the network interface in addition if
you're<00:14:06.670><c> going</c><00:14:06.850><c> to</c><00:14:06.910><c> try</c><00:14:07.089><c> and</c><00:14:07.120><c> detach</c><00:14:07.540><c> an</c>

00:14:07.740 --> 00:14:07.750 align:start position:0%
you're going to try and detach an
 

00:14:07.750 --> 00:14:09.960 align:start position:0%
you're going to try and detach an
interface<00:14:08.170><c> a</c><00:14:08.380><c> protocol</c><00:14:08.860><c> or</c><00:14:09.339><c> an</c><00:14:09.639><c> interface</c>

00:14:09.960 --> 00:14:09.970 align:start position:0%
interface a protocol or an interface
 

00:14:09.970 --> 00:14:13.100 align:start position:0%
interface a protocol or an interface
filter<00:14:10.389><c> these</c><00:14:10.899><c> operations</c><00:14:11.529><c> will</c><00:14:11.680><c> be</c><00:14:11.800><c> delayed</c>

00:14:13.100 --> 00:14:13.110 align:start position:0%
filter these operations will be delayed
 

00:14:13.110 --> 00:14:15.689 align:start position:0%
filter these operations will be delayed
you<00:14:14.110><c> do</c><00:14:14.260><c> get</c><00:14:14.410><c> some</c><00:14:14.649><c> protection</c><00:14:14.860><c> with</c><00:14:15.459><c> the</c><00:14:15.579><c> D</c>

00:14:15.689 --> 00:14:15.699 align:start position:0%
you do get some protection with the D
 

00:14:15.699 --> 00:14:18.030 align:start position:0%
you do get some protection with the D
mocks<00:14:15.910><c> your</c><00:14:16.810><c> D</c><00:14:16.990><c> max</c><00:14:17.170><c> function</c><00:14:17.410><c> will</c><00:14:17.709><c> never</c><00:14:17.860><c> be</c>

00:14:18.030 --> 00:14:18.040 align:start position:0%
mocks your D max function will never be
 

00:14:18.040 --> 00:14:19.470 align:start position:0%
mocks your D max function will never be
called<00:14:18.279><c> at</c><00:14:18.430><c> the</c><00:14:18.519><c> same</c><00:14:18.699><c> time</c><00:14:18.880><c> that</c><00:14:19.089><c> either</c><00:14:19.240><c> your</c>

00:14:19.470 --> 00:14:19.480 align:start position:0%
called at the same time that either your
 

00:14:19.480 --> 00:14:21.420 align:start position:0%
called at the same time that either your
ad<00:14:19.600><c> protocol</c><00:14:20.110><c> or</c><00:14:20.320><c> delete</c><00:14:20.589><c> protocol</c><00:14:21.010><c> functions</c>

00:14:21.420 --> 00:14:21.430 align:start position:0%
ad protocol or delete protocol functions
 

00:14:21.430 --> 00:14:25.019 align:start position:0%
ad protocol or delete protocol functions
are<00:14:21.550><c> being</c><00:14:21.730><c> called</c><00:14:23.370><c> in</c><00:14:24.370><c> addition</c><00:14:24.790><c> your</c><00:14:24.910><c> ad</c>

00:14:25.019 --> 00:14:25.029 align:start position:0%
are being called in addition your ad
 

00:14:25.029 --> 00:14:26.370 align:start position:0%
are being called in addition your ad
protocol<00:14:25.420><c> function</c><00:14:25.779><c> will</c><00:14:25.899><c> never</c><00:14:26.050><c> be</c><00:14:26.199><c> called</c>

00:14:26.370 --> 00:14:26.380 align:start position:0%
protocol function will never be called
 

00:14:26.380 --> 00:14:27.780 align:start position:0%
protocol function will never be called
at<00:14:26.500><c> the</c><00:14:26.589><c> same</c><00:14:26.709><c> time</c><00:14:26.920><c> as</c><00:14:26.980><c> your</c><00:14:27.160><c> delete</c><00:14:27.399><c> protocol</c>

00:14:27.780 --> 00:14:27.790 align:start position:0%
at the same time as your delete protocol
 

00:14:27.790 --> 00:14:30.150 align:start position:0%
at the same time as your delete protocol
function<00:14:28.120><c> is</c><00:14:28.209><c> called</c><00:14:28.389><c> so</c><00:14:29.260><c> if</c><00:14:29.380><c> you're</c><00:14:29.529><c> using</c><00:14:29.709><c> a</c>

00:14:30.150 --> 00:14:30.160 align:start position:0%
function is called so if you're using a
 

00:14:30.160 --> 00:14:31.560 align:start position:0%
function is called so if you're using a
linked<00:14:30.490><c> list</c><00:14:30.550><c> or</c><00:14:30.880><c> something</c><00:14:30.910><c> to</c><00:14:31.240><c> keep</c><00:14:31.389><c> track</c>

00:14:31.560 --> 00:14:31.570 align:start position:0%
linked list or something to keep track
 

00:14:31.570 --> 00:14:34.050 align:start position:0%
linked list or something to keep track
track<00:14:32.320><c> of</c><00:14:32.470><c> the</c><00:14:32.649><c> Emacs</c><00:14:33.399><c> descriptor</c><00:14:33.910><c> to</c>

00:14:34.050 --> 00:14:34.060 align:start position:0%
track of the Emacs descriptor to
 

00:14:34.060 --> 00:14:36.210 align:start position:0%
track of the Emacs descriptor to
protocol<00:14:34.420><c> family</c><00:14:34.720><c> mappings</c><00:14:35.139><c> you</c><00:14:36.010><c> can</c>

00:14:36.210 --> 00:14:36.220 align:start position:0%
protocol family mappings you can
 

00:14:36.220 --> 00:14:38.130 align:start position:0%
protocol family mappings you can
manipulate<00:14:36.519><c> that</c><00:14:36.970><c> list</c><00:14:37.240><c> in</c><00:14:37.480><c> your</c><00:14:37.540><c> add</c><00:14:37.930><c> and</c>

00:14:38.130 --> 00:14:38.140 align:start position:0%
manipulate that list in your add and
 

00:14:38.140 --> 00:14:39.389 align:start position:0%
manipulate that list in your add and
delete<00:14:38.199><c> protocol</c><00:14:38.769><c> functions</c><00:14:39.190><c> without</c>

00:14:39.389 --> 00:14:39.399 align:start position:0%
delete protocol functions without
 

00:14:39.399 --> 00:14:44.370 align:start position:0%
delete protocol functions without
worrying<00:14:39.940><c> about</c><00:14:40.089><c> locking</c><00:14:40.810><c> it</c><00:14:43.140><c> moving</c><00:14:44.140><c> up</c><00:14:44.260><c> the</c>

00:14:44.370 --> 00:14:44.380 align:start position:0%
worrying about locking it moving up the
 

00:14:44.380 --> 00:14:45.569 align:start position:0%
worrying about locking it moving up the
stack<00:14:44.589><c> a</c><00:14:44.620><c> little</c><00:14:44.890><c> bit</c><00:14:44.980><c> more</c><00:14:45.100><c> we</c><00:14:45.339><c> have</c><00:14:45.490><c> the</c>

00:14:45.569 --> 00:14:45.579 align:start position:0%
stack a little bit more we have the
 

00:14:45.579 --> 00:14:47.310 align:start position:0%
stack a little bit more we have the
protocol<00:14:45.940><c> plumbers</c><00:14:46.360><c> which</c><00:14:46.720><c> are</c><00:14:46.839><c> responsible</c>

00:14:47.310 --> 00:14:47.320 align:start position:0%
protocol plumbers which are responsible
 

00:14:47.320 --> 00:14:51.259 align:start position:0%
protocol plumbers which are responsible
for<00:14:47.350><c> gluing</c><00:14:47.949><c> an</c><00:14:48.550><c> interface</c><00:14:48.970><c> to</c><00:14:49.680><c> protocol</c><00:14:50.680><c> and</c>

00:14:51.259 --> 00:14:51.269 align:start position:0%
for gluing an interface to protocol and
 

00:14:51.269 --> 00:14:53.400 align:start position:0%
for gluing an interface to protocol and
these<00:14:52.269><c> have</c><00:14:52.449><c> the</c><00:14:52.600><c> knowledge</c><00:14:52.750><c> of</c><00:14:53.170><c> how</c><00:14:53.380><c> a</c>

00:14:53.400 --> 00:14:53.410 align:start position:0%
these have the knowledge of how a
 

00:14:53.410 --> 00:14:56.120 align:start position:0%
these have the knowledge of how a
specific<00:14:53.949><c> interface</c><00:14:54.670><c> runs</c><00:14:55.120><c> over</c><00:14:55.510><c> a</c><00:14:55.720><c> specific</c>

00:14:56.120 --> 00:14:56.130 align:start position:0%
specific interface runs over a specific
 

00:14:56.130 --> 00:14:58.290 align:start position:0%
specific interface runs over a specific
specific<00:14:57.130><c> protocol</c><00:14:57.670><c> runs</c><00:14:57.880><c> over</c><00:14:58.120><c> specific</c>

00:14:58.290 --> 00:14:58.300 align:start position:0%
specific protocol runs over specific
 

00:14:58.300 --> 00:15:00.840 align:start position:0%
specific protocol runs over specific
interface<00:14:58.649><c> this</c><00:14:59.649><c> is</c><00:14:59.769><c> where</c><00:14:59.949><c> knowledge</c><00:15:00.550><c> of</c><00:15:00.730><c> how</c>

00:15:00.840 --> 00:15:00.850 align:start position:0%
interface this is where knowledge of how
 

00:15:00.850 --> 00:15:03.600 align:start position:0%
interface this is where knowledge of how
to<00:15:00.910><c> perform</c><00:15:01.240><c> our</c><00:15:01.510><c> or</c><00:15:02.440><c> neighbor</c><00:15:02.769><c> discovery</c><00:15:03.130><c> or</c>

00:15:03.600 --> 00:15:03.610 align:start position:0%
to perform our or neighbor discovery or
 

00:15:03.610 --> 00:15:06.060 align:start position:0%
to perform our or neighbor discovery or
in<00:15:03.940><c> the</c><00:15:04.029><c> case</c><00:15:04.329><c> of</c><00:15:04.390><c> apple</c><00:15:04.720><c> talk</c><00:15:04.899><c> AARP</c><00:15:05.589><c> would</c>

00:15:06.060 --> 00:15:06.070 align:start position:0%
in the case of apple talk AARP would
 

00:15:06.070 --> 00:15:10.050 align:start position:0%
in the case of apple talk AARP would
live<00:15:07.680><c> the</c><00:15:08.680><c> protocol</c><00:15:09.070><c> plumber</c><00:15:09.310><c> registers</c><00:15:10.029><c> a</c>

00:15:10.050 --> 00:15:10.060 align:start position:0%
live the protocol plumber registers a
 

00:15:10.060 --> 00:15:12.150 align:start position:0%
live the protocol plumber registers a
plum<00:15:10.449><c> and</c><00:15:10.480><c> a</c><00:15:10.750><c> nun</c><00:15:10.899><c> plum</c><00:15:11.140><c> function</c><00:15:11.620><c> and</c><00:15:11.769><c> the</c>

00:15:12.150 --> 00:15:12.160 align:start position:0%
plum and a nun plum function and the
 

00:15:12.160 --> 00:15:13.620 align:start position:0%
plum and a nun plum function and the
plum<00:15:12.370><c> function</c><00:15:12.880><c> is</c><00:15:13.000><c> responsible</c><00:15:13.480><c> for</c>

00:15:13.620 --> 00:15:13.630 align:start position:0%
plum function is responsible for
 

00:15:13.630 --> 00:15:15.540 align:start position:0%
plum function is responsible for
attaching<00:15:13.870><c> the</c><00:15:14.140><c> protocol</c><00:15:14.589><c> and</c><00:15:14.829><c> a</c><00:15:15.190><c> nun</c><00:15:15.310><c> plum</c>

00:15:15.540 --> 00:15:15.550 align:start position:0%
attaching the protocol and a nun plum
 

00:15:15.550 --> 00:15:17.220 align:start position:0%
attaching the protocol and a nun plum
function<00:15:16.029><c> is</c><00:15:16.120><c> responsible</c><00:15:16.569><c> for</c><00:15:16.720><c> detaching</c>

00:15:17.220 --> 00:15:17.230 align:start position:0%
function is responsible for detaching
 

00:15:17.230 --> 00:15:19.380 align:start position:0%
function is responsible for detaching
the<00:15:17.290><c> protocol</c><00:15:17.709><c> the</c><00:15:18.579><c> protocol</c><00:15:18.970><c> plumbers</c><00:15:19.269><c> are</c>

00:15:19.380 --> 00:15:19.390 align:start position:0%
the protocol the protocol plumbers are
 

00:15:19.390 --> 00:15:21.540 align:start position:0%
the protocol the protocol plumbers are
documented<00:15:19.750><c> in</c><00:15:20.079><c> net</c><00:15:20.440><c> /</c><00:15:20.589><c> KPI</c><00:15:21.160><c> underscore</c>

00:15:21.540 --> 00:15:21.550 align:start position:0%
documented in net / KPI underscore
 

00:15:21.550 --> 00:15:24.889 align:start position:0%
documented in net / KPI underscore
protocol<00:15:21.940><c> that</c><00:15:22.089><c> H</c><00:15:22.209><c> in</c><00:15:22.480><c> the</c><00:15:22.540><c> kernel</c><00:15:22.870><c> framework</c>

00:15:24.889 --> 00:15:24.899 align:start position:0%
protocol that H in the kernel framework
 

00:15:24.899 --> 00:15:27.780 align:start position:0%
protocol that H in the kernel framework
the<00:15:25.899><c> pump</c><00:15:26.140><c> the</c><00:15:26.740><c> plum</c><00:15:26.949><c> function</c><00:15:27.399><c> typically</c>

00:15:27.780 --> 00:15:27.790 align:start position:0%
the pump the plum function typically
 

00:15:27.790 --> 00:15:30.449 align:start position:0%
the pump the plum function typically
calls<00:15:28.089><c> is</c><00:15:28.329><c> net</c><00:15:28.630><c> attached</c><00:15:28.959><c> protocol</c><00:15:29.529><c> and</c><00:15:29.800><c> it</c>

00:15:30.449 --> 00:15:30.459 align:start position:0%
calls is net attached protocol and it
 

00:15:30.459 --> 00:15:31.740 align:start position:0%
calls is net attached protocol and it
specifies<00:15:30.639><c> a</c><00:15:30.940><c> list</c><00:15:31.209><c> of</c><00:15:31.329><c> democracy</c>

00:15:31.740 --> 00:15:31.750 align:start position:0%
specifies a list of democracy
 

00:15:31.750 --> 00:15:33.420 align:start position:0%
specifies a list of democracy
descriptors<00:15:32.199><c> which</c><00:15:32.440><c> described</c><00:15:33.220><c> in</c><00:15:33.339><c> an</c>

00:15:33.420 --> 00:15:33.430 align:start position:0%
descriptors which described in an
 

00:15:33.430 --> 00:15:35.340 align:start position:0%
descriptors which described in an
interface<00:15:33.760><c> specific</c><00:15:34.269><c> way</c><00:15:34.480><c> the</c><00:15:35.139><c> type</c><00:15:35.319><c> of</c>

00:15:35.340 --> 00:15:35.350 align:start position:0%
interface specific way the type of
 

00:15:35.350 --> 00:15:39.750 align:start position:0%
interface specific way the type of
packets<00:15:35.860><c> that</c><00:15:36.069><c> this</c><00:15:36.910><c> protocol</c><00:15:37.360><c> once</c>

00:15:39.750 --> 00:15:39.760 align:start position:0%
 
 

00:15:39.760 --> 00:15:41.940 align:start position:0%
 
the<00:15:40.090><c> plumber</c><00:15:40.630><c> also</c><00:15:40.930><c> specifies</c><00:15:41.410><c> an</c><00:15:41.560><c> input</c>

00:15:41.940 --> 00:15:41.950 align:start position:0%
the plumber also specifies an input
 

00:15:41.950 --> 00:15:43.440 align:start position:0%
the plumber also specifies an input
function<00:15:42.100><c> that</c><00:15:42.400><c> will</c><00:15:42.520><c> get</c><00:15:42.670><c> called</c><00:15:42.880><c> for</c><00:15:43.000><c> any</c><00:15:43.330><c> of</c>

00:15:43.440 --> 00:15:43.450 align:start position:0%
function that will get called for any of
 

00:15:43.450 --> 00:15:44.910 align:start position:0%
function that will get called for any of
the<00:15:43.540><c> packets</c><00:15:43.930><c> that</c><00:15:44.170><c> are</c><00:15:44.230><c> received</c><00:15:44.590><c> for</c><00:15:44.800><c> this</c>

00:15:44.910 --> 00:15:44.920 align:start position:0%
the packets that are received for this
 

00:15:44.920 --> 00:15:47.100 align:start position:0%
the packets that are received for this
protocol<00:15:45.580><c> as</c><00:15:45.820><c> well</c><00:15:46.480><c> as</c><00:15:46.540><c> a</c><00:15:46.600><c> pre</c><00:15:46.780><c> output</c>

00:15:47.100 --> 00:15:47.110 align:start position:0%
protocol as well as a pre output
 

00:15:47.110 --> 00:15:49.590 align:start position:0%
protocol as well as a pre output
function<00:15:47.530><c> an</c><00:15:47.860><c> event</c><00:15:48.520><c> function</c><00:15:49.000><c> for</c><00:15:49.270><c> handling</c>

00:15:49.590 --> 00:15:49.600 align:start position:0%
function an event function for handling
 

00:15:49.600 --> 00:15:52.620 align:start position:0%
function an event function for handling
events<00:15:50.110><c> on</c><00:15:50.200><c> the</c><00:15:50.590><c> interface</c><00:15:50.920><c> and</c><00:15:51.190><c> I</c><00:15:52.000><c> octal</c><00:15:52.360><c> for</c>

00:15:52.620 --> 00:15:52.630 align:start position:0%
events on the interface and I octal for
 

00:15:52.630 --> 00:15:55.980 align:start position:0%
events on the interface and I octal for
handling<00:15:52.900><c> any</c><00:15:53.050><c> protocol</c><00:15:53.500><c> specific</c><00:15:54.660><c> event</c><00:15:55.660><c> I</c>

00:15:55.980 --> 00:15:55.990 align:start position:0%
handling any protocol specific event I
 

00:15:55.990 --> 00:15:58.380 align:start position:0%
handling any protocol specific event I
octaves<00:15:56.530><c> on</c><00:15:56.680><c> that</c><00:15:56.860><c> interface</c><00:15:57.070><c> and</c><00:15:57.460><c> a</c><00:15:58.030><c> detached</c>

00:15:58.380 --> 00:15:58.390 align:start position:0%
octaves on that interface and a detached
 

00:15:58.390 --> 00:15:59.760 align:start position:0%
octaves on that interface and a detached
function<00:15:58.870><c> to</c><00:15:59.020><c> get</c><00:15:59.140><c> notified</c><00:15:59.380><c> when</c><00:15:59.680><c> the</c>

00:15:59.760 --> 00:15:59.770 align:start position:0%
function to get notified when the
 

00:15:59.770 --> 00:16:04.370 align:start position:0%
function to get notified when the
protocol<00:16:00.160><c> has</c><00:16:00.280><c> been</c><00:16:00.310><c> detached</c><00:16:02.670><c> the</c><00:16:03.670><c> protocols</c>

00:16:04.370 --> 00:16:04.380 align:start position:0%
protocol has been detached the protocols
 

00:16:04.380 --> 00:16:07.800 align:start position:0%
protocol has been detached the protocols
input<00:16:05.380><c> function</c><00:16:05.640><c> is</c><00:16:06.640><c> important</c><00:16:07.300><c> this</c><00:16:07.660><c> is</c>

00:16:07.800 --> 00:16:07.810 align:start position:0%
input function is important this is
 

00:16:07.810 --> 00:16:09.710 align:start position:0%
input function is important this is
where<00:16:07.990><c> any</c><00:16:08.320><c> art</c><00:16:08.590><c> packets</c><00:16:08.980><c> get</c><00:16:09.160><c> handled</c><00:16:09.490><c> or</c>

00:16:09.710 --> 00:16:09.720 align:start position:0%
where any art packets get handled or
 

00:16:09.720 --> 00:16:11.760 align:start position:0%
where any art packets get handled or
something<00:16:10.720><c> similar</c><00:16:11.050><c> depending</c><00:16:11.560><c> on</c><00:16:11.650><c> which</c>

00:16:11.760 --> 00:16:11.770 align:start position:0%
something similar depending on which
 

00:16:11.770 --> 00:16:14.010 align:start position:0%
something similar depending on which
protocol<00:16:12.160><c> you're</c><00:16:12.340><c> supporting</c><00:16:12.850><c> in</c><00:16:13.660><c> addition</c>

00:16:14.010 --> 00:16:14.020 align:start position:0%
protocol you're supporting in addition
 

00:16:14.020 --> 00:16:15.780 align:start position:0%
protocol you're supporting in addition
if<00:16:14.470><c> you</c><00:16:14.560><c> need</c><00:16:14.710><c> to</c><00:16:14.800><c> strip</c><00:16:14.980><c> any</c><00:16:15.160><c> headers</c><00:16:15.340><c> off</c><00:16:15.580><c> or</c>

00:16:15.780 --> 00:16:15.790 align:start position:0%
if you need to strip any headers off or
 

00:16:15.790 --> 00:16:17.130 align:start position:0%
if you need to strip any headers off or
do<00:16:15.880><c> anything</c><00:16:16.060><c> else</c><00:16:16.330><c> so</c><00:16:16.690><c> that</c><00:16:16.720><c> you</c><00:16:16.870><c> can</c><00:16:16.990><c> just</c>

00:16:17.130 --> 00:16:17.140 align:start position:0%
do anything else so that you can just
 

00:16:17.140 --> 00:16:20.430 align:start position:0%
do anything else so that you can just
pass<00:16:17.290><c> a</c><00:16:17.320><c> rob</c><00:16:17.700><c> packet</c><00:16:18.700><c> to</c><00:16:18.820><c> the</c><00:16:18.910><c> protocol</c><00:16:19.320><c> you</c><00:16:20.320><c> do</c>

00:16:20.430 --> 00:16:20.440 align:start position:0%
pass a rob packet to the protocol you do
 

00:16:20.440 --> 00:16:22.530 align:start position:0%
pass a rob packet to the protocol you do
that<00:16:20.620><c> in</c><00:16:20.770><c> the</c><00:16:20.920><c> plumber</c><00:16:21.360><c> input</c><00:16:22.360><c> function</c>

00:16:22.530 --> 00:16:22.540 align:start position:0%
that in the plumber input function
 

00:16:22.540 --> 00:16:26.310 align:start position:0%
that in the plumber input function
before<00:16:23.440><c> you</c><00:16:23.740><c> call</c><00:16:23.980><c> proto</c><00:16:24.370><c> input</c><00:16:24.960><c> proto</c><00:16:25.960><c> input</c>

00:16:26.310 --> 00:16:26.320 align:start position:0%
before you call proto input proto input
 

00:16:26.320 --> 00:16:27.870 align:start position:0%
before you call proto input proto input
is<00:16:26.410><c> the</c><00:16:26.560><c> function</c><00:16:26.890><c> that</c><00:16:26.980><c> you</c><00:16:27.070><c> use</c><00:16:27.220><c> to</c><00:16:27.250><c> pass</c><00:16:27.610><c> a</c>

00:16:27.870 --> 00:16:27.880 align:start position:0%
is the function that you use to pass a
 

00:16:27.880 --> 00:16:29.970 align:start position:0%
is the function that you use to pass a
packet<00:16:28.360><c> to</c><00:16:28.510><c> a</c><00:16:28.540><c> protocol</c><00:16:28.960><c> once</c><00:16:29.230><c> you've</c><00:16:29.410><c> taken</c>

00:16:29.970 --> 00:16:29.980 align:start position:0%
packet to a protocol once you've taken
 

00:16:29.980 --> 00:16:31.590 align:start position:0%
packet to a protocol once you've taken
anything<00:16:30.310><c> out</c><00:16:30.550><c> that's</c><00:16:30.790><c> interface</c><00:16:31.120><c> interface</c>

00:16:31.590 --> 00:16:31.600 align:start position:0%
anything out that's interface interface
 

00:16:31.600 --> 00:16:36.210 align:start position:0%
anything out that's interface interface
specific<00:16:34.290><c> the</c><00:16:35.290><c> protocol</c><00:16:35.680><c> plumbers</c><00:16:35.980><c> pre</c>

00:16:36.210 --> 00:16:36.220 align:start position:0%
specific the protocol plumbers pre
 

00:16:36.220 --> 00:16:37.530 align:start position:0%
specific the protocol plumbers pre
output<00:16:36.520><c> function</c><00:16:36.880><c> gets</c><00:16:37.030><c> called</c><00:16:37.120><c> on</c><00:16:37.420><c> the</c>

00:16:37.530 --> 00:16:37.540 align:start position:0%
output function gets called on the
 

00:16:37.540 --> 00:16:41.580 align:start position:0%
output function gets called on the
outbound<00:16:37.840><c> path</c><00:16:38.400><c> just</c><00:16:39.400><c> before</c><00:16:39.610><c> the</c><00:16:40.590><c> framer</c>

00:16:41.580 --> 00:16:41.590 align:start position:0%
outbound path just before the framer
 

00:16:41.590 --> 00:16:43.650 align:start position:0%
outbound path just before the framer
function<00:16:42.040><c> for</c><00:16:42.190><c> the</c><00:16:42.280><c> interface</c><00:16:42.610><c> and</c><00:16:42.850><c> this</c>

00:16:43.650 --> 00:16:43.660 align:start position:0%
function for the interface and this
 

00:16:43.660 --> 00:16:45.050 align:start position:0%
function for the interface and this
gives<00:16:43.810><c> the</c><00:16:44.080><c> protocol</c><00:16:44.470><c> plumber</c><00:16:44.710><c> an</c>

00:16:45.050 --> 00:16:45.060 align:start position:0%
gives the protocol plumber an
 

00:16:45.060 --> 00:16:47.760 align:start position:0%
gives the protocol plumber an
opportunity<00:16:46.060><c> to</c><00:16:46.150><c> perform</c><00:16:46.300><c> any</c><00:16:46.660><c> arps</c><00:16:46.960><c> the</c>

00:16:47.760 --> 00:16:47.770 align:start position:0%
opportunity to perform any arps the
 

00:16:47.770 --> 00:16:49.470 align:start position:0%
opportunity to perform any arps the
protocol<00:16:48.130><c> plumber</c><00:16:48.340><c> is</c><00:16:48.610><c> responsible</c><00:16:49.210><c> for</c>

00:16:49.470 --> 00:16:49.480 align:start position:0%
protocol plumber is responsible for
 

00:16:49.480 --> 00:16:52.290 align:start position:0%
protocol plumber is responsible for
determining<00:16:50.380><c> the</c><00:16:50.770><c> destination</c><00:16:51.400><c> link</c><00:16:52.120><c> layer</c>

00:16:52.290 --> 00:16:52.300 align:start position:0%
determining the destination link layer
 

00:16:52.300 --> 00:16:55.890 align:start position:0%
determining the destination link layer
address<00:16:52.720><c> and</c><00:16:52.930><c> a</c><00:16:53.440><c> frame</c><00:16:54.070><c> type</c><00:16:54.600><c> so</c><00:16:55.600><c> that</c><00:16:55.810><c> those</c>

00:16:55.890 --> 00:16:55.900 align:start position:0%
address and a frame type so that those
 

00:16:55.900 --> 00:16:57.270 align:start position:0%
address and a frame type so that those
can<00:16:56.050><c> be</c><00:16:56.140><c> passed</c><00:16:56.380><c> to</c><00:16:56.530><c> the</c><00:16:56.680><c> interface</c><00:16:56.860><c> framer</c>

00:16:57.270 --> 00:16:57.280 align:start position:0%
can be passed to the interface framer
 

00:16:57.280 --> 00:17:01.290 align:start position:0%
can be passed to the interface framer
function<00:16:59.760><c> when</c><00:17:00.760><c> you're</c><00:17:00.880><c> working</c><00:17:01.120><c> with</c><00:17:01.210><c> the</c>

00:17:01.290 --> 00:17:01.300 align:start position:0%
function when you're working with the
 

00:17:01.300 --> 00:17:03.420 align:start position:0%
function when you're working with the
protocol<00:17:01.660><c> trump</c><00:17:02.380><c> when</c><00:17:03.100><c> you're</c><00:17:03.190><c> working</c><00:17:03.250><c> with</c>

00:17:03.420 --> 00:17:03.430 align:start position:0%
protocol trump when you're working with
 

00:17:03.430 --> 00:17:05.400 align:start position:0%
protocol trump when you're working with
a<00:17:03.550><c> protocol</c><00:17:03.880><c> plumber</c><00:17:04.120><c> there</c><00:17:04.930><c> are</c><00:17:05.079><c> a</c><00:17:05.140><c> number</c><00:17:05.199><c> of</c>

00:17:05.400 --> 00:17:05.410 align:start position:0%
a protocol plumber there are a number of
 

00:17:05.410 --> 00:17:10.130 align:start position:0%
a protocol plumber there are a number of
locking<00:17:06.510><c> considerations</c><00:17:08.130><c> the</c><00:17:09.130><c> unregister</c><00:17:09.880><c> is</c>

00:17:10.130 --> 00:17:10.140 align:start position:0%
locking considerations the unregister is
 

00:17:10.140 --> 00:17:13.860 align:start position:0%
locking considerations the unregister is
synchronous<00:17:11.140><c> and</c><00:17:12.120><c> the</c><00:17:13.120><c> unregister</c><00:17:13.660><c> won't</c>

00:17:13.860 --> 00:17:13.870 align:start position:0%
synchronous and the unregister won't
 

00:17:13.870 --> 00:17:15.240 align:start position:0%
synchronous and the unregister won't
actually<00:17:14.020><c> detach</c><00:17:14.470><c> your</c><00:17:14.680><c> protocols</c><00:17:15.130><c> from</c>

00:17:15.240 --> 00:17:15.250 align:start position:0%
actually detach your protocols from
 

00:17:15.250 --> 00:17:17.370 align:start position:0%
actually detach your protocols from
interfaces<00:17:15.880><c> so</c><00:17:16.600><c> you</c><00:17:16.690><c> need</c><00:17:16.839><c> to</c><00:17:16.930><c> keep</c><00:17:17.079><c> a</c><00:17:17.170><c> count</c>

00:17:17.370 --> 00:17:17.380 align:start position:0%
interfaces so you need to keep a count
 

00:17:17.380 --> 00:17:18.960 align:start position:0%
interfaces so you need to keep a count
of<00:17:17.530><c> how</c><00:17:17.650><c> many</c><00:17:17.680><c> times</c><00:17:18.040><c> you've</c><00:17:18.310><c> attached</c><00:17:18.640><c> if</c>

00:17:18.960 --> 00:17:18.970 align:start position:0%
of how many times you've attached if
 

00:17:18.970 --> 00:17:20.640 align:start position:0%
of how many times you've attached if
you're<00:17:19.360><c> supplying</c><00:17:19.839><c> any</c><00:17:19.990><c> function</c><00:17:20.350><c> pointers</c>

00:17:20.640 --> 00:17:20.650 align:start position:0%
you're supplying any function pointers
 

00:17:20.650 --> 00:17:22.079 align:start position:0%
you're supplying any function pointers
such<00:17:20.860><c> as</c><00:17:20.980><c> the</c><00:17:21.100><c> input</c><00:17:21.250><c> or</c><00:17:21.579><c> pre</c><00:17:21.760><c> output</c>

00:17:22.079 --> 00:17:22.089 align:start position:0%
such as the input or pre output
 

00:17:22.089 --> 00:17:24.329 align:start position:0%
such as the input or pre output
functions<00:17:22.540><c> because</c><00:17:23.500><c> until</c><00:17:23.800><c> you've</c><00:17:24.280><c> been</c>

00:17:24.329 --> 00:17:24.339 align:start position:0%
functions because until you've been
 

00:17:24.339 --> 00:17:26.340 align:start position:0%
functions because until you've been
detached<00:17:24.699><c> from</c><00:17:24.940><c> every</c><00:17:25.209><c> interface</c><00:17:25.390><c> your</c><00:17:25.930><c> code</c>

00:17:26.340 --> 00:17:26.350 align:start position:0%
detached from every interface your code
 

00:17:26.350 --> 00:17:27.689 align:start position:0%
detached from every interface your code
still<00:17:26.589><c> going</c><00:17:26.709><c> to</c><00:17:26.770><c> get</c><00:17:26.890><c> called</c><00:17:27.130><c> and</c><00:17:27.400><c> if</c><00:17:27.610><c> you</c>

00:17:27.689 --> 00:17:27.699 align:start position:0%
still going to get called and if you
 

00:17:27.699 --> 00:17:30.240 align:start position:0%
still going to get called and if you
unload<00:17:28.030><c> before</c><00:17:29.010><c> before</c><00:17:30.010><c> you've</c><00:17:30.100><c> been</c>

00:17:30.240 --> 00:17:30.250 align:start position:0%
unload before before you've been
 

00:17:30.250 --> 00:17:32.610 align:start position:0%
unload before before you've been
detached<00:17:30.960><c> you're</c><00:17:31.960><c> going</c><00:17:32.110><c> to</c><00:17:32.170><c> lead</c><00:17:32.290><c> you're</c>

00:17:32.610 --> 00:17:32.620 align:start position:0%
detached you're going to lead you're
 

00:17:32.620 --> 00:17:36.030 align:start position:0%
detached you're going to lead you're
going<00:17:32.740><c> to</c><00:17:32.800><c> run</c><00:17:32.890><c> into</c><00:17:32.950><c> a</c><00:17:33.130><c> panic</c><00:17:34.830><c> there</c><00:17:35.830><c> are</c><00:17:35.920><c> some</c>

00:17:36.030 --> 00:17:36.040 align:start position:0%
going to run into a panic there are some
 

00:17:36.040 --> 00:17:37.320 align:start position:0%
going to run into a panic there are some
restrictions<00:17:36.190><c> and</c><00:17:36.670><c> what</c><00:17:36.790><c> you</c><00:17:36.880><c> can</c><00:17:37.030><c> do</c><00:17:37.150><c> and</c>

00:17:37.320 --> 00:17:37.330 align:start position:0%
restrictions and what you can do and
 

00:17:37.330 --> 00:17:39.630 align:start position:0%
restrictions and what you can do and
you're<00:17:37.420><c> plumb</c><00:17:37.630><c> and</c><00:17:37.900><c> unplumbed</c><00:17:38.320><c> functions</c><00:17:38.800><c> you</c>

00:17:39.630 --> 00:17:39.640 align:start position:0%
you're plumb and unplumbed functions you
 

00:17:39.640 --> 00:17:42.090 align:start position:0%
you're plumb and unplumbed functions you
really<00:17:39.970><c> you</c><00:17:40.420><c> must</c><00:17:40.660><c> not</c><00:17:40.810><c> try</c><00:17:41.380><c> and</c><00:17:41.500><c> register</c><00:17:41.650><c> or</c>

00:17:42.090 --> 00:17:42.100 align:start position:0%
really you must not try and register or
 

00:17:42.100 --> 00:17:44.160 align:start position:0%
really you must not try and register or
unregister<00:17:42.670><c> another</c><00:17:42.940><c> plumber</c><00:17:43.240><c> and</c><00:17:43.510><c> you</c><00:17:43.990><c> also</c>

00:17:44.160 --> 00:17:44.170 align:start position:0%
unregister another plumber and you also
 

00:17:44.170 --> 00:17:46.020 align:start position:0%
unregister another plumber and you also
cannot<00:17:44.650><c> trigger</c><00:17:44.980><c> a</c><00:17:45.070><c> plumber</c><00:17:45.430><c> unplumbed</c>

00:17:46.020 --> 00:17:46.030 align:start position:0%
cannot trigger a plumber unplumbed
 

00:17:46.030 --> 00:17:49.620 align:start position:0%
cannot trigger a plumber unplumbed
function<00:17:46.950><c> for</c><00:17:47.950><c> any</c><00:17:48.070><c> other</c><00:17:48.190><c> protocols</c><00:17:48.730><c> if</c><00:17:49.480><c> you</c>

00:17:49.620 --> 00:17:49.630 align:start position:0%
function for any other protocols if you
 

00:17:49.630 --> 00:17:56.330 align:start position:0%
function for any other protocols if you
do<00:17:49.750><c> this</c><00:17:49.870><c> you'll</c><00:17:50.080><c> run</c><00:17:50.230><c> into</c><00:17:50.260><c> a</c><00:17:50.500><c> deadlock</c>

00:17:56.330 --> 00:17:56.340 align:start position:0%
 
 

00:17:56.340 --> 00:17:58.860 align:start position:0%
 
it's<00:17:57.340><c> the</c><00:17:57.700><c> top</c><00:17:57.850><c> layer</c><00:17:58.060><c> we</c><00:17:58.210><c> have</c><00:17:58.330><c> socket</c><00:17:58.750><c> and</c>

00:17:58.860 --> 00:17:58.870 align:start position:0%
it's the top layer we have socket and
 

00:17:58.870 --> 00:18:01.080 align:start position:0%
it's the top layer we have socket and
the<00:17:59.470><c> socket</c><00:17:59.770><c> KPI</c><00:18:00.100><c> gives</c><00:18:00.520><c> you</c><00:18:00.670><c> access</c><00:18:00.850><c> to</c>

00:18:01.080 --> 00:18:01.090 align:start position:0%
the socket KPI gives you access to
 

00:18:01.090 --> 00:18:05.400 align:start position:0%
the socket KPI gives you access to
sockets<00:18:01.720><c> inside</c><00:18:02.290><c> of</c><00:18:02.410><c> the</c><00:18:02.470><c> colonel</c><00:18:03.960><c> the</c><00:18:04.960><c> KPI</c><00:18:05.290><c> is</c>

00:18:05.400 --> 00:18:05.410 align:start position:0%
sockets inside of the colonel the KPI is
 

00:18:05.410 --> 00:18:09.120 align:start position:0%
sockets inside of the colonel the KPI is
based<00:18:05.680><c> on</c><00:18:05.830><c> the</c><00:18:05.950><c> user</c><00:18:06.070><c> space</c><00:18:06.340><c> api's</c><00:18:08.010><c> and</c><00:18:09.010><c> it</c>

00:18:09.120 --> 00:18:09.130 align:start position:0%
based on the user space api's and it
 

00:18:09.130 --> 00:18:12.330 align:start position:0%
based on the user space api's and it
only<00:18:09.220><c> lets</c><00:18:09.520><c> you</c><00:18:09.610><c> get</c><00:18:09.760><c> access</c><00:18:10.360><c> as</c><00:18:10.630><c> a</c><00:18:11.620><c> client</c><00:18:12.250><c> of</c>

00:18:12.330 --> 00:18:12.340 align:start position:0%
only lets you get access as a client of
 

00:18:12.340 --> 00:18:13.890 align:start position:0%
only lets you get access as a client of
the<00:18:12.430><c> socket</c><00:18:12.790><c> you</c><00:18:12.940><c> can't</c><00:18:13.180><c> implement</c><00:18:13.690><c> a</c>

00:18:13.890 --> 00:18:13.900 align:start position:0%
the socket you can't implement a
 

00:18:13.900 --> 00:18:16.110 align:start position:0%
the socket you can't implement a
protocol<00:18:14.320><c> and</c><00:18:14.680><c> interact</c><00:18:15.430><c> with</c><00:18:15.580><c> the</c><00:18:15.640><c> socket</c><00:18:16.000><c> in</c>

00:18:16.110 --> 00:18:16.120 align:start position:0%
protocol and interact with the socket in
 

00:18:16.120 --> 00:18:18.840 align:start position:0%
protocol and interact with the socket in
the<00:18:16.150><c> ways</c><00:18:16.360><c> that</c><00:18:16.510><c> a</c><00:18:16.570><c> protocol</c><00:18:16.990><c> would</c><00:18:17.200><c> in</c><00:18:18.010><c> place</c>

00:18:18.840 --> 00:18:18.850 align:start position:0%
the ways that a protocol would in place
 

00:18:18.850 --> 00:18:21.060 align:start position:0%
the ways that a protocol would in place
of<00:18:18.880><c> a</c><00:18:19.090><c> struct</c><00:18:19.360><c> socket</c><00:18:19.720><c> pointer</c><00:18:20.050><c> you</c><00:18:20.440><c> now</c><00:18:20.860><c> use</c><00:18:21.040><c> a</c>

00:18:21.060 --> 00:18:21.070 align:start position:0%
of a struct socket pointer you now use a
 

00:18:21.070 --> 00:18:23.850 align:start position:0%
of a struct socket pointer you now use a
socket<00:18:21.400><c> t</c><00:18:22.080><c> and</c><00:18:23.080><c> user</c><00:18:23.230><c> space</c><00:18:23.440><c> of</c><00:18:23.590><c> course</c><00:18:23.770><c> you</c>

00:18:23.850 --> 00:18:23.860 align:start position:0%
socket t and user space of course you
 

00:18:23.860 --> 00:18:26.220 align:start position:0%
socket t and user space of course you
use<00:18:24.010><c> file</c><00:18:24.190><c> descriptors</c><00:18:24.730><c> but</c><00:18:25.630><c> since</c><00:18:25.780><c> this</c><00:18:25.960><c> and</c>

00:18:26.220 --> 00:18:26.230 align:start position:0%
use file descriptors but since this and
 

00:18:26.230 --> 00:18:29.010 align:start position:0%
use file descriptors but since this and
in<00:18:26.590><c> the</c><00:18:27.010><c> kernel</c><00:18:27.310><c> since</c><00:18:27.520><c> the</c><00:18:27.780><c> layout</c><00:18:28.780><c> of</c><00:18:28.930><c> a</c>

00:18:29.010 --> 00:18:29.020 align:start position:0%
in the kernel since the layout of a
 

00:18:29.020 --> 00:18:31.320 align:start position:0%
in the kernel since the layout of a
socket<00:18:29.350><c> structure</c><00:18:29.740><c> is</c><00:18:29.980><c> private</c><00:18:30.550><c> we're</c><00:18:31.060><c> moving</c>

00:18:31.320 --> 00:18:31.330 align:start position:0%
socket structure is private we're moving
 

00:18:31.330 --> 00:18:34.980 align:start position:0%
socket structure is private we're moving
to<00:18:31.420><c> be</c><00:18:31.510><c> opaque</c><00:18:31.720><c> type</c><00:18:31.990><c> socket</c><00:18:32.530><c> t</c><00:18:33.900><c> sockets</c><00:18:34.900><c> go</c>

00:18:34.980 --> 00:18:34.990 align:start position:0%
to be opaque type socket t sockets go
 

00:18:34.990 --> 00:18:37.230 align:start position:0%
to be opaque type socket t sockets go
through<00:18:35.200><c> typical</c><00:18:35.560><c> life</c><00:18:35.680><c> cycle</c><00:18:36.160><c> the</c><00:18:36.700><c> socket</c><00:18:37.150><c> is</c>

00:18:37.230 --> 00:18:37.240 align:start position:0%
through typical life cycle the socket is
 

00:18:37.240 --> 00:18:40.320 align:start position:0%
through typical life cycle the socket is
created<00:18:37.690><c> various</c><00:18:38.230><c> options</c><00:18:38.500><c> are</c><00:18:38.860><c> set</c><00:18:39.330><c> the</c>

00:18:40.320 --> 00:18:40.330 align:start position:0%
created various options are set the
 

00:18:40.330 --> 00:18:43.440 align:start position:0%
created various options are set the
socket<00:18:41.290><c> is</c><00:18:41.380><c> connected</c><00:18:41.800><c> data</c><00:18:42.400><c> sent</c><00:18:42.820><c> data</c><00:18:43.330><c> is</c>

00:18:43.440 --> 00:18:43.450 align:start position:0%
socket is connected data sent data is
 

00:18:43.450 --> 00:18:45.810 align:start position:0%
socket is connected data sent data is
received<00:18:43.570><c> in</c><00:18:43.990><c> the</c><00:18:44.080><c> socket</c><00:18:44.440><c> is</c><00:18:44.530><c> close</c><00:18:44.820><c> the</c>

00:18:45.810 --> 00:18:45.820 align:start position:0%
received in the socket is close the
 

00:18:45.820 --> 00:18:48.450 align:start position:0%
received in the socket is close the
socket<00:18:45.970><c> kpi</c><00:18:46.450><c> is</c><00:18:46.570><c> documented</c><00:18:47.020><c> insist</c><00:18:47.590><c> /</c><00:18:48.010><c> kpi</c>

00:18:48.450 --> 00:18:48.460 align:start position:0%
socket kpi is documented insist / kpi
 

00:18:48.460 --> 00:18:53.970 align:start position:0%
socket kpi is documented insist / kpi
socket<00:18:48.940><c> H</c><00:18:49.240><c> in</c><00:18:49.510><c> the</c><00:18:49.570><c> kernel</c><00:18:49.900><c> framework</c><00:18:52.920><c> so</c><00:18:53.920><c> to</c>

00:18:53.970 --> 00:18:53.980 align:start position:0%
socket H in the kernel framework so to
 

00:18:53.980 --> 00:18:55.620 align:start position:0%
socket H in the kernel framework so to
create<00:18:54.220><c> a</c><00:18:54.250><c> socket</c><00:18:54.670><c> we</c><00:18:54.820><c> use</c><00:18:54.940><c> the</c><00:18:55.060><c> function</c><00:18:55.390><c> sock</c>

00:18:55.620 --> 00:18:55.630 align:start position:0%
create a socket we use the function sock
 

00:18:55.630 --> 00:18:57.330 align:start position:0%
create a socket we use the function sock
socket<00:18:56.200><c> and</c><00:18:56.320><c> it's</c><00:18:56.650><c> very</c><00:18:56.830><c> similar</c><00:18:57.040><c> to</c><00:18:57.160><c> the</c>

00:18:57.330 --> 00:18:57.340 align:start position:0%
socket and it's very similar to the
 

00:18:57.340 --> 00:19:00.690 align:start position:0%
socket and it's very similar to the
socket<00:18:58.150><c> function</c><00:18:58.480><c> in</c><00:18:58.570><c> userspace</c><00:18:59.400><c> it</c><00:19:00.400><c> allows</c>

00:19:00.690 --> 00:19:00.700 align:start position:0%
socket function in userspace it allows
 

00:19:00.700 --> 00:19:02.400 align:start position:0%
socket function in userspace it allows
you<00:19:00.850><c> to</c><00:19:00.910><c> discuss</c><00:19:01.150><c> the</c><00:19:01.420><c> major</c><00:19:01.930><c> differences</c>

00:19:02.400 --> 00:19:02.410 align:start position:0%
you to discuss the major differences
 

00:19:02.410 --> 00:19:03.990 align:start position:0%
you to discuss the major differences
that<00:19:02.560><c> it</c><00:19:02.680><c> allows</c><00:19:02.890><c> you</c><00:19:03.040><c> to</c><00:19:03.130><c> specify</c><00:19:03.220><c> an</c><00:19:03.610><c> up</c><00:19:03.790><c> call</c>

00:19:03.990 --> 00:19:04.000 align:start position:0%
that it allows you to specify an up call
 

00:19:04.000 --> 00:19:06.410 align:start position:0%
that it allows you to specify an up call
function<00:19:04.390><c> and</c><00:19:04.540><c> the</c><00:19:05.470><c> up</c><00:19:05.590><c> call</c><00:19:05.770><c> function</c><00:19:06.100><c> will</c>

00:19:06.410 --> 00:19:06.420 align:start position:0%
function and the up call function will
 

00:19:06.420 --> 00:19:08.850 align:start position:0%
function and the up call function will
let<00:19:07.420><c> you</c><00:19:07.540><c> get</c><00:19:07.720><c> notification</c><00:19:08.290><c> when</c><00:19:08.440><c> data</c><00:19:08.770><c> is</c>

00:19:08.850 --> 00:19:08.860 align:start position:0%
let you get notification when data is
 

00:19:08.860 --> 00:19:11.460 align:start position:0%
let you get notification when data is
ready<00:19:09.070><c> so</c><00:19:10.000><c> in</c><00:19:10.090><c> this</c><00:19:10.180><c> example</c><00:19:10.330><c> we're</c><00:19:11.050><c> creating</c>

00:19:11.460 --> 00:19:11.470 align:start position:0%
ready so in this example we're creating
 

00:19:11.470 --> 00:19:14.820 align:start position:0%
ready so in this example we're creating
a<00:19:11.740><c> TCP</c><00:19:12.340><c> socket</c><00:19:12.760><c> and</c><00:19:13.290><c> we're</c><00:19:14.290><c> going</c><00:19:14.440><c> to</c><00:19:14.500><c> get</c><00:19:14.650><c> back</c>

00:19:14.820 --> 00:19:14.830 align:start position:0%
a TCP socket and we're going to get back
 

00:19:14.830 --> 00:19:16.980 align:start position:0%
a TCP socket and we're going to get back
the<00:19:15.190><c> socket</c><00:19:15.580><c> we're</c><00:19:15.910><c> passing</c><00:19:16.240><c> in</c><00:19:16.360><c> my</c><00:19:16.600><c> up</c><00:19:16.750><c> calls</c>

00:19:16.980 --> 00:19:16.990 align:start position:0%
the socket we're passing in my up calls
 

00:19:16.990 --> 00:19:19.080 align:start position:0%
the socket we're passing in my up calls
the<00:19:17.230><c> up</c><00:19:17.320><c> call</c><00:19:17.530><c> function</c><00:19:17.890><c> and</c><00:19:18.100><c> my</c><00:19:18.640><c> cookie</c><00:19:18.970><c> is</c><00:19:19.030><c> a</c>

00:19:19.080 --> 00:19:19.090 align:start position:0%
the up call function and my cookie is a
 

00:19:19.090 --> 00:19:20.520 align:start position:0%
the up call function and my cookie is a
parameter<00:19:19.390><c> that</c><00:19:19.660><c> will</c><00:19:19.780><c> get</c><00:19:19.900><c> passed</c><00:19:20.140><c> to</c><00:19:20.320><c> the</c><00:19:20.440><c> up</c>

00:19:20.520 --> 00:19:20.530 align:start position:0%
parameter that will get passed to the up
 

00:19:20.530 --> 00:19:24.930 align:start position:0%
parameter that will get passed to the up
call<00:19:20.740><c> function</c><00:19:23.040><c> the</c><00:19:24.040><c> sockets</c><00:19:24.400><c> up</c><00:19:24.520><c> call</c><00:19:24.760><c> gets</c>

00:19:24.930 --> 00:19:24.940 align:start position:0%
call function the sockets up call gets
 

00:19:24.940 --> 00:19:26.880 align:start position:0%
call function the sockets up call gets
called<00:19:25.180><c> when</c><00:19:25.450><c> either</c><00:19:25.780><c> data</c><00:19:25.990><c> is</c><00:19:26.170><c> waiting</c><00:19:26.500><c> to</c><00:19:26.770><c> be</c>

00:19:26.880 --> 00:19:26.890 align:start position:0%
called when either data is waiting to be
 

00:19:26.890 --> 00:19:32.040 align:start position:0%
called when either data is waiting to be
read<00:19:27.100><c> or</c><00:19:27.310><c> a</c><00:19:28.240><c> connection</c><00:19:28.720><c> is</c><00:19:28.840><c> completed</c><00:19:31.050><c> access</c>

00:19:32.040 --> 00:19:32.050 align:start position:0%
read or a connection is completed access
 

00:19:32.050 --> 00:19:33.060 align:start position:0%
read or a connection is completed access
to<00:19:32.140><c> your</c><00:19:32.230><c> up</c><00:19:32.320><c> call</c><00:19:32.500><c> function</c><00:19:32.830><c> is</c><00:19:32.920><c> not</c>

00:19:33.060 --> 00:19:33.070 align:start position:0%
to your up call function is not
 

00:19:33.070 --> 00:19:34.680 align:start position:0%
to your up call function is not
serialized<00:19:33.610><c> so</c><00:19:34.030><c> if</c><00:19:34.360><c> you're</c><00:19:34.450><c> going</c><00:19:34.540><c> to</c><00:19:34.600><c> be</c>

00:19:34.680 --> 00:19:34.690 align:start position:0%
serialized so if you're going to be
 

00:19:34.690 --> 00:19:36.420 align:start position:0%
serialized so if you're going to be
manipulating<00:19:35.230><c> data</c><00:19:35.350><c> in</c><00:19:35.620><c> your</c><00:19:35.650><c> up</c><00:19:35.860><c> call</c><00:19:36.070><c> be</c>

00:19:36.420 --> 00:19:36.430 align:start position:0%
manipulating data in your up call be
 

00:19:36.430 --> 00:19:40.110 align:start position:0%
manipulating data in your up call be
sure<00:19:36.580><c> to</c><00:19:36.730><c> take</c><00:19:36.910><c> any</c><00:19:37.090><c> lock</c><00:19:38.700><c> the</c><00:19:39.700><c> up</c><00:19:39.850><c> call</c><00:19:40.030><c> is</c>

00:19:40.110 --> 00:19:40.120 align:start position:0%
sure to take any lock the up call is
 

00:19:40.120 --> 00:19:41.850 align:start position:0%
sure to take any lock the up call is
also<00:19:40.360><c> called</c><00:19:40.570><c> on</c><00:19:40.660><c> the</c><00:19:40.750><c> fastpass</c><00:19:41.230><c> if</c><00:19:41.500><c> you</c><00:19:41.710><c> make</c>

00:19:41.850 --> 00:19:41.860 align:start position:0%
also called on the fastpass if you make
 

00:19:41.860 --> 00:19:44.030 align:start position:0%
also called on the fastpass if you make
a<00:19:41.890><c> blocking</c><00:19:42.340><c> call</c><00:19:42.550><c> in</c><00:19:42.700><c> here</c><00:19:42.910><c> you'll</c><00:19:43.120><c> actually</c>

00:19:44.030 --> 00:19:44.040 align:start position:0%
a blocking call in here you'll actually
 

00:19:44.040 --> 00:19:47.760 align:start position:0%
a blocking call in here you'll actually
stop<00:19:45.040><c> all</c><00:19:45.310><c> incoming</c><00:19:45.790><c> data</c><00:19:46.000><c> if</c><00:19:46.840><c> you</c><00:19:47.230><c> make</c><00:19:47.740><c> a</c>

00:19:47.760 --> 00:19:47.770 align:start position:0%
stop all incoming data if you make a
 

00:19:47.770 --> 00:19:49.830 align:start position:0%
stop all incoming data if you make a
blocking<00:19:48.160><c> call</c><00:19:48.310><c> in</c><00:19:48.370><c> the</c><00:19:48.430><c> socket</c><00:19:48.820><c> in</c><00:19:49.480><c> addition</c>

00:19:49.830 --> 00:19:49.840 align:start position:0%
blocking call in the socket in addition
 

00:19:49.840 --> 00:19:51.120 align:start position:0%
blocking call in the socket in addition
if<00:19:49.900><c> you</c><00:19:49.990><c> do</c><00:19:50.080><c> any</c><00:19:50.260><c> processing</c><00:19:50.380><c> that's</c><00:19:50.950><c> going</c><00:19:51.070><c> to</c>

00:19:51.120 --> 00:19:51.130 align:start position:0%
if you do any processing that's going to
 

00:19:51.130 --> 00:19:52.440 align:start position:0%
if you do any processing that's going to
take<00:19:51.250><c> a</c><00:19:51.310><c> little</c><00:19:51.460><c> while</c><00:19:51.700><c> you</c><00:19:51.970><c> should</c><00:19:52.150><c> really</c><00:19:52.270><c> do</c>

00:19:52.440 --> 00:19:52.450 align:start position:0%
take a little while you should really do
 

00:19:52.450 --> 00:19:53.400 align:start position:0%
take a little while you should really do
it<00:19:52.540><c> elsewhere</c><00:19:52.780><c> because</c><00:19:53.050><c> you're</c><00:19:53.230><c> going</c><00:19:53.320><c> to</c>

00:19:53.400 --> 00:19:53.410 align:start position:0%
it elsewhere because you're going to
 

00:19:53.410 --> 00:19:57.270 align:start position:0%
it elsewhere because you're going to
hold<00:19:53.530><c> up</c><00:19:53.710><c> a</c><00:19:53.890><c> lot</c><00:19:54.220><c> of</c><00:19:54.310><c> other</c><00:19:54.430><c> stuff</c><00:19:55.290><c> in</c><00:19:56.290><c> this</c>

00:19:57.270 --> 00:19:57.280 align:start position:0%
hold up a lot of other stuff in this
 

00:19:57.280 --> 00:19:59.820 align:start position:0%
hold up a lot of other stuff in this
case<00:19:57.460><c> we</c><00:19:57.790><c> have</c><00:19:57.910><c> an</c><00:19:58.060><c> up</c><00:19:58.210><c> call</c><00:19:58.390><c> function</c><00:19:58.830><c> the</c>

00:19:59.820 --> 00:19:59.830 align:start position:0%
case we have an up call function the
 

00:19:59.830 --> 00:20:02.430 align:start position:0%
case we have an up call function the
state's<00:20:00.070><c> stored</c><00:20:00.520><c> on</c><00:20:00.610><c> the</c><00:20:00.700><c> cookie</c><00:20:00.970><c> and</c><00:20:01.440><c> we</c>

00:20:02.430 --> 00:20:02.440 align:start position:0%
state's stored on the cookie and we
 

00:20:02.440 --> 00:20:04.620 align:start position:0%
state's stored on the cookie and we
check<00:20:02.830><c> to</c><00:20:03.130><c> see</c><00:20:03.310><c> if</c><00:20:03.340><c> we're</c><00:20:03.640><c> connected</c><00:20:04.060><c> and</c><00:20:04.390><c> then</c>

00:20:04.620 --> 00:20:04.630 align:start position:0%
check to see if we're connected and then
 

00:20:04.630 --> 00:20:04.830 align:start position:0%
check to see if we're connected and then
we

00:20:04.830 --> 00:20:04.840 align:start position:0%
we
 

00:20:04.840 --> 00:20:07.289 align:start position:0%
we
former<00:20:05.169><c> read</c><00:20:05.350><c> after</c><00:20:05.620><c> taking</c><00:20:06.460><c> the</c><00:20:06.640><c> lock</c><00:20:06.789><c> which</c>

00:20:07.289 --> 00:20:07.299 align:start position:0%
former read after taking the lock which
 

00:20:07.299 --> 00:20:08.760 align:start position:0%
former read after taking the lock which
should<00:20:07.510><c> take</c><00:20:07.659><c> a</c><00:20:07.690><c> lock</c><00:20:07.870><c> with</c><00:20:07.990><c> a</c><00:20:08.049><c> common</c><00:20:08.350><c> set</c><00:20:08.529><c> and</c>

00:20:08.760 --> 00:20:08.770 align:start position:0%
should take a lock with a common set and
 

00:20:08.770 --> 00:20:10.409 align:start position:0%
should take a lock with a common set and
then<00:20:09.400><c> we</c><00:20:09.460><c> deal</c><00:20:09.610><c> with</c><00:20:09.730><c> some</c><00:20:09.850><c> of</c><00:20:09.940><c> the</c><00:20:10.000><c> data</c><00:20:10.120><c> and</c>

00:20:10.409 --> 00:20:10.419 align:start position:0%
then we deal with some of the data and
 

00:20:10.419 --> 00:20:15.570 align:start position:0%
then we deal with some of the data and
then<00:20:10.690><c> we</c><00:20:11.049><c> would</c><00:20:11.200><c> release</c><00:20:11.440><c> the</c><00:20:11.620><c> lock</c><00:20:14.429><c> you</c><00:20:15.429><c> can</c>

00:20:15.570 --> 00:20:15.580 align:start position:0%
then we would release the lock you can
 

00:20:15.580 --> 00:20:19.019 align:start position:0%
then we would release the lock you can
use<00:20:15.789><c> sock</c><00:20:16.299><c> sock</c><00:20:16.330><c> ops</c><00:20:17.140><c> and</c><00:20:17.380><c> sakai</c><00:20:17.980><c> octal</c><00:20:18.400><c> to</c><00:20:18.820><c> set</c>

00:20:19.019 --> 00:20:19.029 align:start position:0%
use sock sock ops and sakai octal to set
 

00:20:19.029 --> 00:20:20.760 align:start position:0%
use sock sock ops and sakai octal to set
various<00:20:19.360><c> options</c><00:20:19.539><c> there's</c><00:20:20.049><c> also</c><00:20:20.200><c> a</c><00:20:20.320><c> sock</c><00:20:20.559><c> get</c>

00:20:20.760 --> 00:20:20.770 align:start position:0%
various options there's also a sock get
 

00:20:20.770 --> 00:20:24.390 align:start position:0%
various options there's also a sock get
saw<00:20:20.980><c> cops</c><00:20:21.220><c> to</c><00:20:21.549><c> retrieve</c><00:20:22.029><c> options</c><00:20:22.919><c> in</c><00:20:23.919><c> this</c>

00:20:24.390 --> 00:20:24.400 align:start position:0%
saw cops to retrieve options in this
 

00:20:24.400 --> 00:20:26.340 align:start position:0%
saw cops to retrieve options in this
example<00:20:24.760><c> we</c><00:20:24.909><c> can</c><00:20:25.120><c> see</c><00:20:25.179><c> Sakai</c><00:20:25.690><c> octos</c><00:20:26.049><c> being</c>

00:20:26.340 --> 00:20:26.350 align:start position:0%
example we can see Sakai octos being
 

00:20:26.350 --> 00:20:28.680 align:start position:0%
example we can see Sakai octos being
used<00:20:26.590><c> to</c><00:20:27.010><c> set</c><00:20:27.520><c> the</c><00:20:27.700><c> socket</c><00:20:28.150><c> to</c><00:20:28.299><c> non-blocking</c>

00:20:28.680 --> 00:20:28.690 align:start position:0%
used to set the socket to non-blocking
 

00:20:28.690 --> 00:20:33.779 align:start position:0%
used to set the socket to non-blocking
i/o<00:20:28.720><c> and</c><00:20:31.409><c> the</c><00:20:32.409><c> socks</c><00:20:32.740><c> at</c><00:20:32.980><c> sock</c><00:20:33.220><c> opt</c><00:20:33.429><c> is</c><00:20:33.580><c> being</c>

00:20:33.779 --> 00:20:33.789 align:start position:0%
i/o and the socks at sock opt is being
 

00:20:33.789 --> 00:20:35.760 align:start position:0%
i/o and the socks at sock opt is being
used<00:20:33.970><c> to</c><00:20:34.570><c> set</c><00:20:34.750><c> the</c><00:20:34.840><c> receive</c><00:20:35.080><c> buffer</c><00:20:35.260><c> size</c><00:20:35.559><c> to</c>

00:20:35.760 --> 00:20:35.770 align:start position:0%
used to set the receive buffer size to
 

00:20:35.770 --> 00:20:42.360 align:start position:0%
used to set the receive buffer size to
about<00:20:35.860><c> 32</c><00:20:36.370><c> k</c><00:20:37.110><c> there</c><00:20:38.110><c> is</c><00:20:38.409><c> no</c><00:20:41.309><c> function</c><00:20:42.309><c> that</c>

00:20:42.360 --> 00:20:42.370 align:start position:0%
about 32 k there is no function that
 

00:20:42.370 --> 00:20:44.549 align:start position:0%
about 32 k there is no function that
you'd<00:20:42.490><c> usually</c><00:20:42.640><c> do</c><00:20:42.909><c> use</c><00:20:43.419><c> to</c><00:20:43.750><c> make</c><00:20:43.929><c> a</c><00:20:44.140><c> file</c>

00:20:44.549 --> 00:20:44.559 align:start position:0%
you'd usually do use to make a file
 

00:20:44.559 --> 00:20:46.019 align:start position:0%
you'd usually do use to make a file
descriptor<00:20:44.919><c> non-blocking</c><00:20:45.279><c> isn't</c><00:20:45.820><c> available</c>

00:20:46.019 --> 00:20:46.029 align:start position:0%
descriptor non-blocking isn't available
 

00:20:46.029 --> 00:20:48.960 align:start position:0%
descriptor non-blocking isn't available
in<00:20:46.390><c> the</c><00:20:47.169><c> colonel</c><00:20:47.490><c> because</c><00:20:48.490><c> you're</c><00:20:48.700><c> not</c>

00:20:48.960 --> 00:20:48.970 align:start position:0%
in the colonel because you're not
 

00:20:48.970 --> 00:20:50.250 align:start position:0%
in the colonel because you're not
working<00:20:49.240><c> with</c><00:20:49.270><c> a</c><00:20:49.360><c> file</c><00:20:49.539><c> descriptor</c><00:20:49.960><c> here</c><00:20:50.110><c> you</c>

00:20:50.250 --> 00:20:50.260 align:start position:0%
working with a file descriptor here you
 

00:20:50.260 --> 00:20:51.960 align:start position:0%
working with a file descriptor here you
just<00:20:50.380><c> have</c><00:20:50.559><c> a</c><00:20:50.590><c> raw</c><00:20:50.770><c> socket</c><00:20:51.220><c> so</c><00:20:51.610><c> in</c><00:20:51.730><c> order</c><00:20:51.850><c> to</c>

00:20:51.960 --> 00:20:51.970 align:start position:0%
just have a raw socket so in order to
 

00:20:51.970 --> 00:20:53.639 align:start position:0%
just have a raw socket so in order to
set<00:20:52.210><c> non-blocking</c><00:20:52.539><c> i/o</c><00:20:52.570><c> you</c><00:20:53.260><c> really</c><00:20:53.500><c> need</c><00:20:53.590><c> to</c>

00:20:53.639 --> 00:20:53.649 align:start position:0%
set non-blocking i/o you really need to
 

00:20:53.649 --> 00:20:59.100 align:start position:0%
set non-blocking i/o you really need to
call<00:20:53.919><c> sock</c><00:20:54.820><c> I</c><00:20:55.059><c> octal</c><00:20:57.630><c> connecting</c><00:20:58.630><c> a</c><00:20:58.720><c> socket</c><00:20:59.020><c> is</c>

00:20:59.100 --> 00:20:59.110 align:start position:0%
call sock I octal connecting a socket is
 

00:20:59.110 --> 00:21:00.810 align:start position:0%
call sock I octal connecting a socket is
pretty<00:20:59.320><c> straightforward</c><00:20:59.559><c> sock</c><00:21:00.279><c> connectors</c>

00:21:00.810 --> 00:21:00.820 align:start position:0%
pretty straightforward sock connectors
 

00:21:00.820 --> 00:21:03.019 align:start position:0%
pretty straightforward sock connectors
based<00:21:01.029><c> on</c><00:21:01.240><c> the</c><00:21:01.600><c> connect</c><00:21:01.870><c> to</c><00:21:01.960><c> userspace</c><00:21:02.169><c> call</c>

00:21:03.019 --> 00:21:03.029 align:start position:0%
based on the connect to userspace call
 

00:21:03.029 --> 00:21:05.340 align:start position:0%
based on the connect to userspace call
the<00:21:04.029><c> difference</c><00:21:04.299><c> between</c><00:21:04.390><c> sock</c><00:21:04.840><c> connect</c><00:21:05.169><c> and</c>

00:21:05.340 --> 00:21:05.350 align:start position:0%
the difference between sock connect and
 

00:21:05.350 --> 00:21:06.870 align:start position:0%
the difference between sock connect and
the<00:21:05.409><c> old</c><00:21:05.529><c> esso</c><00:21:05.890><c> connect</c><00:21:06.220><c> he's</c><00:21:06.520><c> done</c><00:21:06.700><c> any</c>

00:21:06.870 --> 00:21:06.880 align:start position:0%
the old esso connect he's done any
 

00:21:06.880 --> 00:21:08.549 align:start position:0%
the old esso connect he's done any
programming<00:21:07.210><c> and</c><00:21:07.390><c> the</c><00:21:07.450><c> colonel</c><00:21:07.570><c> before</c><00:21:07.899><c> with</c>

00:21:08.549 --> 00:21:08.559 align:start position:0%
programming and the colonel before with
 

00:21:08.559 --> 00:21:10.740 align:start position:0%
programming and the colonel before with
socket<00:21:09.250><c> is</c><00:21:09.399><c> that</c><00:21:10.059><c> sock</c><00:21:10.299><c> connect</c><00:21:10.600><c> will</c>

00:21:10.740 --> 00:21:10.750 align:start position:0%
socket is that sock connect will
 

00:21:10.750 --> 00:21:12.720 align:start position:0%
socket is that sock connect will
actually<00:21:11.049><c> block</c><00:21:11.200><c> if</c><00:21:11.620><c> the</c><00:21:11.950><c> socket</c><00:21:12.309><c> is</c><00:21:12.490><c> a</c>

00:21:12.720 --> 00:21:12.730 align:start position:0%
actually block if the socket is a
 

00:21:12.730 --> 00:21:15.779 align:start position:0%
actually block if the socket is a
blocking<00:21:13.299><c> socket</c><00:21:13.899><c> if</c><00:21:14.590><c> you</c><00:21:14.740><c> set</c><00:21:14.919><c> the</c><00:21:15.070><c> sockets</c><00:21:15.700><c> a</c>

00:21:15.779 --> 00:21:15.789 align:start position:0%
blocking socket if you set the sockets a
 

00:21:15.789 --> 00:21:17.549 align:start position:0%
blocking socket if you set the sockets a
non-blocking<00:21:16.149><c> or</c><00:21:16.600><c> you</c><00:21:16.809><c> specify</c><00:21:17.260><c> message</c>

00:21:17.549 --> 00:21:17.559 align:start position:0%
non-blocking or you specify message
 

00:21:17.559 --> 00:21:19.740 align:start position:0%
non-blocking or you specify message
don't<00:21:17.830><c> wait</c><00:21:18.010><c> is</c><00:21:18.220><c> the</c><00:21:18.340><c> last</c><00:21:18.549><c> parameter</c><00:21:18.760><c> then</c>

00:21:19.740 --> 00:21:19.750 align:start position:0%
don't wait is the last parameter then
 

00:21:19.750 --> 00:21:20.850 align:start position:0%
don't wait is the last parameter then
this<00:21:20.110><c> will</c><00:21:20.200><c> give</c><00:21:20.350><c> you</c><00:21:20.440><c> a</c><00:21:20.470><c> non-blocking</c>

00:21:20.850 --> 00:21:20.860 align:start position:0%
this will give you a non-blocking
 

00:21:20.860 --> 00:21:24.480 align:start position:0%
this will give you a non-blocking
connect<00:21:22.230><c> you</c><00:21:23.230><c> can</c><00:21:23.380><c> use</c><00:21:23.529><c> the</c><00:21:23.649><c> function</c><00:21:23.980><c> sock</c><00:21:24.250><c> is</c>

00:21:24.480 --> 00:21:24.490 align:start position:0%
connect you can use the function sock is
 

00:21:24.490 --> 00:21:25.889 align:start position:0%
connect you can use the function sock is
connected<00:21:25.059><c> to</c><00:21:25.210><c> determine</c><00:21:25.570><c> whether</c><00:21:25.750><c> or</c><00:21:25.809><c> not</c>

00:21:25.889 --> 00:21:25.899 align:start position:0%
connected to determine whether or not
 

00:21:25.899 --> 00:21:28.200 align:start position:0%
connected to determine whether or not
the<00:21:26.110><c> socket</c><00:21:26.409><c> has</c><00:21:26.890><c> completed</c><00:21:27.549><c> its</c><00:21:27.700><c> connection</c>

00:21:28.200 --> 00:21:28.210 align:start position:0%
the socket has completed its connection
 

00:21:28.210 --> 00:21:30.090 align:start position:0%
the socket has completed its connection
and<00:21:28.390><c> you're</c><00:21:29.110><c> up</c><00:21:29.230><c> call</c><00:21:29.409><c> will</c><00:21:29.590><c> get</c><00:21:29.740><c> called</c><00:21:29.980><c> when</c>

00:21:30.090 --> 00:21:30.100 align:start position:0%
and you're up call will get called when
 

00:21:30.100 --> 00:21:31.649 align:start position:0%
and you're up call will get called when
this<00:21:30.279><c> connection</c><00:21:30.880><c> completes</c><00:21:31.270><c> with</c><00:21:31.539><c> either</c>

00:21:31.649 --> 00:21:31.659 align:start position:0%
this connection completes with either
 

00:21:31.659 --> 00:21:36.120 align:start position:0%
this connection completes with either
success<00:21:32.110><c> or</c><00:21:32.320><c> failure</c><00:21:34.590><c> for</c><00:21:35.590><c> sending</c><00:21:35.919><c> there</c><00:21:36.070><c> are</c>

00:21:36.120 --> 00:21:36.130 align:start position:0%
success or failure for sending there are
 

00:21:36.130 --> 00:21:38.010 align:start position:0%
success or failure for sending there are
two<00:21:36.279><c> different</c><00:21:36.610><c> functions</c><00:21:36.789><c> both</c><00:21:37.570><c> of</c><00:21:37.779><c> them</c><00:21:37.899><c> are</c>

00:21:38.010 --> 00:21:38.020 align:start position:0%
two different functions both of them are
 

00:21:38.020 --> 00:21:39.779 align:start position:0%
two different functions both of them are
based<00:21:38.110><c> on</c><00:21:38.380><c> sun</c><00:21:38.620><c> message</c><00:21:39.039><c> so</c><00:21:39.549><c> they</c><00:21:39.580><c> use</c><00:21:39.760><c> a</c>

00:21:39.779 --> 00:21:39.789 align:start position:0%
based on sun message so they use a
 

00:21:39.789 --> 00:21:42.480 align:start position:0%
based on sun message so they use a
message<00:21:40.000><c> header</c><00:21:40.799><c> socks</c><00:21:41.799><c> friends</c><00:21:42.159><c> will</c><00:21:42.279><c> send</c>

00:21:42.480 --> 00:21:42.490 align:start position:0%
message header socks friends will send
 

00:21:42.490 --> 00:21:43.799 align:start position:0%
message header socks friends will send
data<00:21:42.700><c> that's</c><00:21:42.880><c> stored</c><00:21:42.970><c> in</c><00:21:43.330><c> a</c><00:21:43.419><c> kernel</c><00:21:43.690><c> buffer</c>

00:21:43.799 --> 00:21:43.809 align:start position:0%
data that's stored in a kernel buffer
 

00:21:43.809 --> 00:21:46.680 align:start position:0%
data that's stored in a kernel buffer
and<00:21:44.140><c> socks</c><00:21:44.710><c> &amp;</c><00:21:45.010><c> M</c><00:21:45.220><c> buff</c><00:21:45.460><c> will</c><00:21:45.880><c> send</c><00:21:46.299><c> data</c><00:21:46.480><c> that's</c>

00:21:46.680 --> 00:21:46.690 align:start position:0%
and socks &amp; M buff will send data that's
 

00:21:46.690 --> 00:21:49.169 align:start position:0%
and socks &amp; M buff will send data that's
stored<00:21:46.779><c> in</c><00:21:47.169><c> a</c><00:21:47.409><c> chain</c><00:21:47.830><c> of</c><00:21:47.860><c> em</c><00:21:48.070><c> buff</c><00:21:48.250><c> in</c><00:21:48.490><c> this</c>

00:21:49.169 --> 00:21:49.179 align:start position:0%
stored in a chain of em buff in this
 

00:21:49.179 --> 00:21:50.370 align:start position:0%
stored in a chain of em buff in this
example<00:21:49.360><c> we're</c><00:21:49.779><c> filling</c><00:21:50.049><c> out</c><00:21:50.140><c> a</c><00:21:50.169><c> message</c>

00:21:50.370 --> 00:21:50.380 align:start position:0%
example we're filling out a message
 

00:21:50.380 --> 00:21:53.970 align:start position:0%
example we're filling out a message
header<00:21:50.710><c> and</c><00:21:51.059><c> we're</c><00:21:52.059><c> setting</c><00:21:52.360><c> the</c><00:21:52.390><c> IO</c><00:21:52.960><c> Beck</c><00:21:53.350><c> to</c>

00:21:53.970 --> 00:21:53.980 align:start position:0%
header and we're setting the IO Beck to
 

00:21:53.980 --> 00:21:57.210 align:start position:0%
header and we're setting the IO Beck to
the<00:21:54.159><c> kernel</c><00:21:54.700><c> buffer</c><00:21:55.090><c> that</c><00:21:55.299><c> we</c><00:21:55.419><c> have</c><00:21:55.570><c> and</c><00:21:56.220><c> we</c>

00:21:57.210 --> 00:21:57.220 align:start position:0%
the kernel buffer that we have and we
 

00:21:57.220 --> 00:21:59.580 align:start position:0%
the kernel buffer that we have and we
set<00:21:57.640><c> up</c><00:21:57.760><c> the</c><00:21:57.940><c> name</c><00:21:58.570><c> to</c><00:21:59.140><c> point</c><00:21:59.350><c> to</c><00:21:59.470><c> the</c>

00:21:59.580 --> 00:21:59.590 align:start position:0%
set up the name to point to the
 

00:21:59.590 --> 00:22:02.279 align:start position:0%
set up the name to point to the
destination<00:21:59.970><c> that</c><00:22:00.970><c> we</c><00:22:01.059><c> want</c><00:22:01.270><c> and</c><00:22:01.510><c> then</c><00:22:02.200><c> we</c>

00:22:02.279 --> 00:22:02.289 align:start position:0%
destination that we want and then we
 

00:22:02.289 --> 00:22:06.380 align:start position:0%
destination that we want and then we
call<00:22:02.470><c> sock</c><00:22:02.740><c> send</c><00:22:03.070><c> to</c><00:22:03.370><c> send</c><00:22:03.520><c> the</c><00:22:03.669><c> data</c>

00:22:06.380 --> 00:22:06.390 align:start position:0%
 
 

00:22:06.390 --> 00:22:09.600 align:start position:0%
 
receiving<00:22:07.390><c> is</c><00:22:07.539><c> much</c><00:22:07.720><c> is</c><00:22:07.899><c> very</c><00:22:08.169><c> similar</c><00:22:08.610><c> there</c>

00:22:09.600 --> 00:22:09.610 align:start position:0%
receiving is much is very similar there
 

00:22:09.610 --> 00:22:10.919 align:start position:0%
receiving is much is very similar there
are<00:22:09.669><c> two</c><00:22:09.760><c> received</c><00:22:10.090><c> functions</c><00:22:10.510><c> and</c><00:22:10.750><c> they're</c>

00:22:10.919 --> 00:22:10.929 align:start position:0%
are two received functions and they're
 

00:22:10.929 --> 00:22:13.529 align:start position:0%
are two received functions and they're
based<00:22:11.110><c> on</c><00:22:11.380><c> received</c><00:22:12.039><c> message</c><00:22:12.399><c> so</c><00:22:13.299><c> there's</c>

00:22:13.529 --> 00:22:13.539 align:start position:0%
based on received message so there's
 

00:22:13.539 --> 00:22:16.680 align:start position:0%
based on received message so there's
Socrates<00:22:14.320><c> and</c><00:22:14.590><c> sock</c><00:22:14.890><c> receive</c><00:22:15.220><c> mbox</c><00:22:15.690><c> sock</c>

00:22:16.680 --> 00:22:16.690 align:start position:0%
Socrates and sock receive mbox sock
 

00:22:16.690 --> 00:22:18.480 align:start position:0%
Socrates and sock receive mbox sock
receives<00:22:17.049><c> receives</c><00:22:17.440><c> data</c><00:22:17.620><c> into</c><00:22:18.039><c> a</c><00:22:18.070><c> colonel</c>

00:22:18.480 --> 00:22:18.490 align:start position:0%
receives receives data into a colonel
 

00:22:18.490 --> 00:22:20.400 align:start position:0%
receives receives data into a colonel
offer<00:22:18.700><c> and</c><00:22:18.940><c> sock</c><00:22:19.150><c> receive</c><00:22:19.450><c> em</c><00:22:19.630><c> buff</c><00:22:19.870><c> receives</c>

00:22:20.400 --> 00:22:20.410 align:start position:0%
offer and sock receive em buff receives
 

00:22:20.410 --> 00:22:23.250 align:start position:0%
offer and sock receive em buff receives
data<00:22:20.640><c> into</c><00:22:21.640><c> the</c><00:22:22.150><c> received</c><00:22:22.720><c> data</c><00:22:22.780><c> is</c><00:22:23.020><c> the</c><00:22:23.140><c> M</c>

00:22:23.250 --> 00:22:23.260 align:start position:0%
data into the received data is the M
 

00:22:23.260 --> 00:22:27.150 align:start position:0%
data into the received data is the M
buff<00:22:24.900><c> in</c><00:22:25.900><c> this</c><00:22:25.990><c> example</c><00:22:26.170><c> we're</c><00:22:26.710><c> calling</c><00:22:26.950><c> sock</c>

00:22:27.150 --> 00:22:27.160 align:start position:0%
buff in this example we're calling sock
 

00:22:27.160 --> 00:22:29.610 align:start position:0%
buff in this example we're calling sock
receives<00:22:27.520><c> and</c><00:22:27.990><c> we're</c><00:22:28.990><c> filling</c><00:22:29.500><c> out</c><00:22:29.590><c> our</c>

00:22:29.610 --> 00:22:29.620 align:start position:0%
receives and we're filling out our
 

00:22:29.620 --> 00:22:30.990 align:start position:0%
receives and we're filling out our
message<00:22:29.950><c> header</c><00:22:30.100><c> first</c><00:22:30.370><c> and</c><00:22:30.610><c> we're</c>

00:22:30.990 --> 00:22:31.000 align:start position:0%
message header first and we're
 

00:22:31.000 --> 00:22:34.790 align:start position:0%
message header first and we're
specifying<00:22:31.300><c> a</c><00:22:31.720><c> buffering</c><00:22:32.080><c> the</c><00:22:32.260><c> kernel</c><00:22:32.700><c> and</c>

00:22:34.790 --> 00:22:34.800 align:start position:0%
specifying a buffering the kernel and
 

00:22:34.800 --> 00:22:36.900 align:start position:0%
specifying a buffering the kernel and
when<00:22:35.800><c> you're</c><00:22:35.890><c> all</c><00:22:35.980><c> done</c><00:22:36.100><c> with</c><00:22:36.250><c> the</c><00:22:36.340><c> socket</c><00:22:36.700><c> you</c>

00:22:36.900 --> 00:22:36.910 align:start position:0%
when you're all done with the socket you
 

00:22:36.910 --> 00:22:39.930 align:start position:0%
when you're all done with the socket you
use<00:22:37.090><c> sock</c><00:22:37.330><c> close</c><00:22:38.220><c> you</c><00:22:39.220><c> can't</c><00:22:39.460><c> call</c><00:22:39.700><c> sock</c>

00:22:39.930 --> 00:22:39.940 align:start position:0%
use sock close you can't call sock
 

00:22:39.940 --> 00:22:42.510 align:start position:0%
use sock close you can't call sock
clothes<00:22:40.240><c> on</c><00:22:40.480><c> a</c><00:22:40.929><c> socket</c><00:22:41.440><c> that's</c><00:22:42.130><c> associated</c>

00:22:42.510 --> 00:22:42.520 align:start position:0%
clothes on a socket that's associated
 

00:22:42.520 --> 00:22:44.040 align:start position:0%
clothes on a socket that's associated
with<00:22:42.880><c> a</c><00:22:42.910><c> file</c><00:22:43.120><c> descriptor</c><00:22:43.600><c> because</c><00:22:43.840><c> that'll</c>

00:22:44.040 --> 00:22:44.050 align:start position:0%
with a file descriptor because that'll
 

00:22:44.050 --> 00:22:47.760 align:start position:0%
with a file descriptor because that'll
really<00:22:44.170><c> confuse</c><00:22:44.490><c> the</c><00:22:45.490><c> colonel</c><00:22:46.620><c> since</c><00:22:47.620><c> you</c>

00:22:47.760 --> 00:22:47.770 align:start position:0%
really confuse the colonel since you
 

00:22:47.770 --> 00:22:49.980 align:start position:0%
really confuse the colonel since you
since<00:22:48.280><c> the</c><00:22:48.490><c> socialist</c><00:22:49.150><c> API</c><00:22:49.420><c> doesn't</c><00:22:49.780><c> do</c>

00:22:49.980 --> 00:22:49.990 align:start position:0%
since the socialist API doesn't do
 

00:22:49.990 --> 00:22:52.340 align:start position:0%
since the socialist API doesn't do
anything<00:22:50.320><c> with</c><00:22:50.710><c> the</c><00:22:51.460><c> file</c><00:22:51.640><c> descriptors</c>

00:22:52.340 --> 00:22:52.350 align:start position:0%
anything with the file descriptors
 

00:22:52.350 --> 00:22:54.480 align:start position:0%
anything with the file descriptors
you're<00:22:53.350><c> going</c><00:22:53.530><c> behind</c><00:22:53.650><c> the</c><00:22:53.890><c> file</c><00:22:54.070><c> descriptors</c>

00:22:54.480 --> 00:22:54.490 align:start position:0%
you're going behind the file descriptors
 

00:22:54.490 --> 00:22:59.340 align:start position:0%
you're going behind the file descriptors
back<00:22:57.510><c> there</c><00:22:58.510><c> are</c><00:22:58.690><c> some</c><00:22:59.020><c> locking</c>

00:22:59.340 --> 00:22:59.350 align:start position:0%
back there are some locking
 

00:22:59.350 --> 00:23:02.040 align:start position:0%
back there are some locking
considerations<00:23:00.510><c> don't</c><00:23:01.510><c> make</c><00:23:01.630><c> calls</c><00:23:01.900><c> the</c>

00:23:02.040 --> 00:23:02.050 align:start position:0%
considerations don't make calls the
 

00:23:02.050 --> 00:23:04.350 align:start position:0%
considerations don't make calls the
sockets<00:23:02.380><c> concurrently</c><00:23:02.850><c> on</c><00:23:03.850><c> different</c>

00:23:04.350 --> 00:23:04.360 align:start position:0%
sockets concurrently on different
 

00:23:04.360 --> 00:23:05.820 align:start position:0%
sockets concurrently on different
threads<00:23:04.600><c> while</c><00:23:05.050><c> you're</c><00:23:05.260><c> protected</c><00:23:05.710><c> in</c>

00:23:05.820 --> 00:23:05.830 align:start position:0%
threads while you're protected in
 

00:23:05.830 --> 00:23:07.140 align:start position:0%
threads while you're protected in
userspace<00:23:06.100><c> through</c><00:23:06.580><c> the</c><00:23:06.670><c> file</c><00:23:06.820><c> descriptor</c>

00:23:07.140 --> 00:23:07.150 align:start position:0%
userspace through the file descriptor
 

00:23:07.150 --> 00:23:09.060 align:start position:0%
userspace through the file descriptor
layer<00:23:07.390><c> if</c><00:23:07.660><c> you</c><00:23:08.050><c> do</c><00:23:08.200><c> this</c><00:23:08.350><c> in</c><00:23:08.590><c> the</c><00:23:08.650><c> colonel</c>

00:23:09.060 --> 00:23:09.070 align:start position:0%
layer if you do this in the colonel
 

00:23:09.070 --> 00:23:10.620 align:start position:0%
layer if you do this in the colonel
we're<00:23:09.940><c> not</c><00:23:10.090><c> going</c><00:23:10.270><c> through</c><00:23:10.420><c> the</c><00:23:10.480><c> file</c>

00:23:10.620 --> 00:23:10.630 align:start position:0%
we're not going through the file
 

00:23:10.630 --> 00:23:12.030 align:start position:0%
we're not going through the file
descriptor<00:23:10.960><c> layer</c><00:23:11.170><c> so</c><00:23:11.410><c> that</c><00:23:11.500><c> protection</c><00:23:11.980><c> is</c>

00:23:12.030 --> 00:23:12.040 align:start position:0%
descriptor layer so that protection is
 

00:23:12.040 --> 00:23:14.580 align:start position:0%
descriptor layer so that protection is
pretty<00:23:12.280><c> much</c><00:23:12.370><c> gone</c><00:23:12.670><c> and</c><00:23:12.970><c> it</c><00:23:13.690><c> especially</c><00:23:14.380><c> if</c>

00:23:14.580 --> 00:23:14.590 align:start position:0%
pretty much gone and it especially if
 

00:23:14.590 --> 00:23:16.080 align:start position:0%
pretty much gone and it especially if
you're<00:23:14.679><c> reading</c><00:23:14.890><c> on</c><00:23:15.130><c> one</c><00:23:15.280><c> socket</c><00:23:15.550><c> and</c><00:23:15.850><c> close</c>

00:23:16.080 --> 00:23:16.090 align:start position:0%
you're reading on one socket and close
 

00:23:16.090 --> 00:23:17.880 align:start position:0%
you're reading on one socket and close
the<00:23:16.330><c> socket</c><00:23:16.450><c> on</c><00:23:16.690><c> another</c><00:23:16.960><c> socket</c><00:23:17.200><c> you're</c>

00:23:17.880 --> 00:23:17.890 align:start position:0%
the socket on another socket you're
 

00:23:17.890 --> 00:23:19.260 align:start position:0%
the socket on another socket you're
going<00:23:18.040><c> to</c><00:23:18.100><c> run</c><00:23:18.220><c> into</c><00:23:18.370><c> a</c><00:23:18.490><c> kernel</c><00:23:18.760><c> panic</c><00:23:18.790><c> pretty</c>

00:23:19.260 --> 00:23:19.270 align:start position:0%
going to run into a kernel panic pretty
 

00:23:19.270 --> 00:23:21.900 align:start position:0%
going to run into a kernel panic pretty
quickly<00:23:19.860><c> in</c><00:23:20.860><c> addition</c><00:23:21.190><c> you're</c><00:23:21.460><c> up</c><00:23:21.580><c> call</c><00:23:21.730><c> is</c>

00:23:21.900 --> 00:23:21.910 align:start position:0%
quickly in addition you're up call is
 

00:23:21.910 --> 00:23:25.410 align:start position:0%
quickly in addition you're up call is
reentrant<00:23:22.360><c> so</c><00:23:22.960><c> be</c><00:23:23.110><c> sure</c><00:23:23.140><c> to</c><00:23:23.290><c> protect</c><00:23:24.090><c> data</c><00:23:25.090><c> and</c>

00:23:25.410 --> 00:23:25.420 align:start position:0%
reentrant so be sure to protect data and
 

00:23:25.420 --> 00:23:26.900 align:start position:0%
reentrant so be sure to protect data and
if<00:23:25.540><c> you're</c><00:23:25.630><c> going</c><00:23:25.750><c> to</c><00:23:25.809><c> do</c><00:23:25.900><c> reads</c><00:23:26.110><c> in</c><00:23:26.260><c> two</c><00:23:26.380><c> parts</c>

00:23:26.900 --> 00:23:26.910 align:start position:0%
if you're going to do reads in two parts
 

00:23:26.910 --> 00:23:29.400 align:start position:0%
if you're going to do reads in two parts
be<00:23:27.910><c> sure</c><00:23:28.059><c> that</c><00:23:28.090><c> you</c><00:23:28.300><c> take</c><00:23:28.690><c> a</c><00:23:28.720><c> lock</c><00:23:28.960><c> so</c><00:23:29.230><c> that</c>

00:23:29.400 --> 00:23:29.410 align:start position:0%
be sure that you take a lock so that
 

00:23:29.410 --> 00:23:31.440 align:start position:0%
be sure that you take a lock so that
somebody<00:23:29.650><c> else</c><00:23:29.890><c> can't</c><00:23:30.190><c> if</c><00:23:30.400><c> you</c><00:23:30.700><c> do</c><00:23:31.179><c> one</c><00:23:31.360><c> little</c>

00:23:31.440 --> 00:23:31.450 align:start position:0%
somebody else can't if you do one little
 

00:23:31.450 --> 00:23:32.669 align:start position:0%
somebody else can't if you do one little
read<00:23:31.690><c> to</c><00:23:31.809><c> get</c><00:23:31.900><c> a</c><00:23:31.929><c> header</c><00:23:32.140><c> that</c><00:23:32.200><c> tells</c><00:23:32.559><c> you</c><00:23:32.650><c> how</c>

00:23:32.669 --> 00:23:32.679 align:start position:0%
read to get a header that tells you how
 

00:23:32.679 --> 00:23:34.260 align:start position:0%
read to get a header that tells you how
much<00:23:32.830><c> data</c><00:23:33.040><c> to</c><00:23:33.130><c> read</c><00:23:33.370><c> and</c><00:23:33.910><c> you</c><00:23:33.970><c> do</c><00:23:34.059><c> another</c>

00:23:34.260 --> 00:23:34.270 align:start position:0%
much data to read and you do another
 

00:23:34.270 --> 00:23:36.360 align:start position:0%
much data to read and you do another
read<00:23:34.450><c> after</c><00:23:34.720><c> that</c><00:23:34.870><c> there's</c><00:23:35.710><c> always</c><00:23:36.070><c> a</c><00:23:36.160><c> chance</c>

00:23:36.360 --> 00:23:36.370 align:start position:0%
read after that there's always a chance
 

00:23:36.370 --> 00:23:37.410 align:start position:0%
read after that there's always a chance
that<00:23:36.490><c> somebody</c><00:23:36.790><c> might</c><00:23:36.880><c> come</c><00:23:36.940><c> in</c><00:23:37.210><c> and</c><00:23:37.330><c> do</c><00:23:37.390><c> a</c>

00:23:37.410 --> 00:23:37.420 align:start position:0%
that somebody might come in and do a
 

00:23:37.420 --> 00:23:39.540 align:start position:0%
that somebody might come in and do a
read<00:23:37.630><c> between</c><00:23:37.780><c> those</c><00:23:38.110><c> two</c><00:23:38.320><c> so</c><00:23:38.800><c> be</c><00:23:39.250><c> careful</c>

00:23:39.540 --> 00:23:39.550 align:start position:0%
read between those two so be careful
 

00:23:39.550 --> 00:23:44.549 align:start position:0%
read between those two so be careful
about<00:23:39.580><c> that</c><00:23:42.720><c> so</c><00:23:43.720><c> we</c><00:23:43.780><c> have</c><00:23:43.929><c> a</c><00:23:43.960><c> socket</c><00:23:44.290><c> filter</c>

00:23:44.549 --> 00:23:44.559 align:start position:0%
about that so we have a socket filter
 

00:23:44.559 --> 00:23:46.290 align:start position:0%
about that so we have a socket filter
KPI<00:23:44.890><c> that</c><00:23:45.280><c> lets</c><00:23:45.460><c> you</c><00:23:45.550><c> filter</c><00:23:45.700><c> data</c><00:23:46.030><c> and</c>

00:23:46.290 --> 00:23:46.300 align:start position:0%
KPI that lets you filter data and
 

00:23:46.300 --> 00:23:48.000 align:start position:0%
KPI that lets you filter data and
connections<00:23:46.750><c> and</c><00:23:46.960><c> other</c><00:23:47.260><c> socket</c><00:23:47.679><c> related</c>

00:23:48.000 --> 00:23:48.010 align:start position:0%
connections and other socket related
 

00:23:48.010 --> 00:23:52.440 align:start position:0%
connections and other socket related
operations<00:23:48.250><c> at</c><00:23:48.790><c> the</c><00:23:48.850><c> socket</c><00:23:49.360><c> layer</c><00:23:51.300><c> these</c><00:23:52.300><c> are</c>

00:23:52.440 --> 00:23:52.450 align:start position:0%
operations at the socket layer these are
 

00:23:52.450 --> 00:23:54.150 align:start position:0%
operations at the socket layer these are
commonly<00:23:52.750><c> used</c><00:23:52.840><c> for</c><00:23:53.350><c> implementing</c><00:23:53.710><c> a</c><00:23:53.800><c> socket</c>

00:23:54.150 --> 00:23:54.160 align:start position:0%
commonly used for implementing a socket
 

00:23:54.160 --> 00:23:55.740 align:start position:0%
commonly used for implementing a socket
layer<00:23:54.280><c> firewall</c><00:23:54.850><c> so</c><00:23:55.210><c> you</c><00:23:55.270><c> don't</c><00:23:55.450><c> have</c><00:23:55.540><c> to</c><00:23:55.630><c> deal</c>

00:23:55.740 --> 00:23:55.750 align:start position:0%
layer firewall so you don't have to deal
 

00:23:55.750 --> 00:23:57.030 align:start position:0%
layer firewall so you don't have to deal
with<00:23:55.900><c> keeping</c><00:23:56.290><c> track</c><00:23:56.440><c> of</c><00:23:56.500><c> all</c><00:23:56.740><c> the</c><00:23:56.830><c> state</c>

00:23:57.030 --> 00:23:57.040 align:start position:0%
with keeping track of all the state
 

00:23:57.040 --> 00:23:58.350 align:start position:0%
with keeping track of all the state
yourself<00:23:57.400><c> you</c><00:23:57.520><c> can</c><00:23:57.670><c> actually</c><00:23:57.760><c> let</c><00:23:58.000><c> the</c><00:23:58.120><c> stack</c>

00:23:58.350 --> 00:23:58.360 align:start position:0%
yourself you can actually let the stack
 

00:23:58.360 --> 00:24:00.810 align:start position:0%
yourself you can actually let the stack
do<00:23:58.960><c> that</c><00:23:59.140><c> you</c><00:24:00.070><c> can</c><00:24:00.190><c> also</c><00:24:00.309><c> use</c><00:24:00.429><c> it</c><00:24:00.550><c> for</c>

00:24:00.810 --> 00:24:00.820 align:start position:0%
do that you can also use it for
 

00:24:00.820 --> 00:24:02.880 align:start position:0%
do that you can also use it for
implementing<00:24:01.179><c> privacy</c><00:24:01.630><c> controls</c><00:24:01.840><c> or</c><00:24:02.320><c> content</c>

00:24:02.880 --> 00:24:02.890 align:start position:0%
implementing privacy controls or content
 

00:24:02.890 --> 00:24:05.610 align:start position:0%
implementing privacy controls or content
filters<00:24:03.309><c> as</c><00:24:03.540><c> well</c><00:24:04.540><c> as</c><00:24:04.630><c> transparent</c><00:24:05.200><c> proxies</c>

00:24:05.610 --> 00:24:05.620 align:start position:0%
filters as well as transparent proxies
 

00:24:05.620 --> 00:24:08.400 align:start position:0%
filters as well as transparent proxies
and<00:24:05.830><c> the</c><00:24:06.760><c> socket</c><00:24:07.030><c> filter</c><00:24:07.300><c> KPI</c><00:24:07.630><c> is</c><00:24:07.960><c> documented</c>

00:24:08.400 --> 00:24:08.410 align:start position:0%
and the socket filter KPI is documented
 

00:24:08.410 --> 00:24:10.799 align:start position:0%
and the socket filter KPI is documented
in<00:24:08.530><c> this</c><00:24:08.860><c> flash</c><00:24:09.340><c> KPI</c><00:24:09.790><c> underscore</c><00:24:10.510><c> socket</c>

00:24:10.799 --> 00:24:10.809 align:start position:0%
in this flash KPI underscore socket
 

00:24:10.809 --> 00:24:14.120 align:start position:0%
in this flash KPI underscore socket
filthy<00:24:11.050><c> about</c><00:24:11.200><c> H</c><00:24:11.320><c> in</c><00:24:11.559><c> the</c><00:24:11.740><c> kernel</c><00:24:11.980><c> framework</c>

00:24:14.120 --> 00:24:14.130 align:start position:0%
filthy about H in the kernel framework
 

00:24:14.130 --> 00:24:16.590 align:start position:0%
filthy about H in the kernel framework
creating<00:24:15.130><c> a</c><00:24:15.190><c> socket</c><00:24:15.490><c> filter</c><00:24:15.790><c> is</c><00:24:16.059><c> similar</c><00:24:16.480><c> to</c>

00:24:16.590 --> 00:24:16.600 align:start position:0%
creating a socket filter is similar to
 

00:24:16.600 --> 00:24:20.330 align:start position:0%
creating a socket filter is similar to
creating<00:24:16.840><c> an</c><00:24:16.960><c> interface</c><00:24:17.290><c> you</c><00:24:17.559><c> fill</c><00:24:17.740><c> out</c><00:24:17.860><c> a</c>

00:24:20.330 --> 00:24:20.340 align:start position:0%
 
 

00:24:20.340 --> 00:24:22.169 align:start position:0%
 
structure<00:24:21.340><c> that</c><00:24:21.490><c> gives</c><00:24:21.550><c> you</c><00:24:21.730><c> the</c><00:24:21.790><c> initial</c>

00:24:22.169 --> 00:24:22.179 align:start position:0%
structure that gives you the initial
 

00:24:22.179 --> 00:24:24.540 align:start position:0%
structure that gives you the initial
values<00:24:22.450><c> in</c><00:24:23.020><c> this</c><00:24:23.410><c> case</c><00:24:23.590><c> it's</c><00:24:23.770><c> an</c><00:24:23.890><c> S</c><00:24:24.070><c> FLT</c>

00:24:24.540 --> 00:24:24.550 align:start position:0%
values in this case it's an S FLT
 

00:24:24.550 --> 00:24:26.580 align:start position:0%
values in this case it's an S FLT
underscore<00:24:25.059><c> register</c><00:24:25.390><c> structure</c><00:24:25.780><c> and</c><00:24:26.020><c> you</c>

00:24:26.580 --> 00:24:26.590 align:start position:0%
underscore register structure and you
 

00:24:26.590 --> 00:24:29.070 align:start position:0%
underscore register structure and you
call<00:24:26.800><c> SFL</c><00:24:27.490><c> te</c><00:24:27.669><c> underscore</c><00:24:28.120><c> filter</c><00:24:28.450><c> to</c>

00:24:29.070 --> 00:24:29.080 align:start position:0%
call SFL te underscore filter to
 

00:24:29.080 --> 00:24:31.450 align:start position:0%
call SFL te underscore filter to
register<00:24:29.470><c> the</c><00:24:29.620><c> filter</c>

00:24:31.450 --> 00:24:31.460 align:start position:0%
register the filter
 

00:24:31.460 --> 00:24:33.070 align:start position:0%
register the filter
the<00:24:31.520><c> filter</c><00:24:31.760><c> gets</c><00:24:31.880><c> associated</c><00:24:32.210><c> with</c><00:24:32.659><c> a</c><00:24:32.690><c> domain</c>

00:24:33.070 --> 00:24:33.080 align:start position:0%
the filter gets associated with a domain
 

00:24:33.080 --> 00:24:34.750 align:start position:0%
the filter gets associated with a domain
a<00:24:33.110><c> type</c><00:24:33.409><c> and</c><00:24:33.590><c> a</c><00:24:33.620><c> protocol</c><00:24:34.010><c> which</c><00:24:34.340><c> are</c><00:24:34.490><c> the</c><00:24:34.580><c> same</c>

00:24:34.750 --> 00:24:34.760 align:start position:0%
a type and a protocol which are the same
 

00:24:34.760 --> 00:24:36.639 align:start position:0%
a type and a protocol which are the same
ten<00:24:35.690><c> parameters</c><00:24:36.080><c> that</c><00:24:36.169><c> are</c><00:24:36.260><c> used</c><00:24:36.440><c> for</c>

00:24:36.639 --> 00:24:36.649 align:start position:0%
ten parameters that are used for
 

00:24:36.649 --> 00:24:39.850 align:start position:0%
ten parameters that are used for
creating<00:24:36.980><c> a</c><00:24:37.039><c> socket</c><00:24:38.080><c> if</c><00:24:39.080><c> you</c><00:24:39.260><c> specify</c><00:24:39.740><c> that</c>

00:24:39.850 --> 00:24:39.860 align:start position:0%
creating a socket if you specify that
 

00:24:39.860 --> 00:24:41.470 align:start position:0%
creating a socket if you specify that
you<00:24:39.919><c> want</c><00:24:39.980><c> a</c><00:24:40.100><c> global</c><00:24:40.399><c> filter</c><00:24:40.730><c> that</c><00:24:41.149><c> global</c>

00:24:41.470 --> 00:24:41.480 align:start position:0%
you want a global filter that global
 

00:24:41.480 --> 00:24:43.090 align:start position:0%
you want a global filter that global
filter<00:24:41.779><c> will</c><00:24:41.929><c> then</c><00:24:42.049><c> be</c><00:24:42.169><c> attached</c><00:24:42.470><c> to</c><00:24:42.620><c> any</c><00:24:42.830><c> new</c>

00:24:43.090 --> 00:24:43.100 align:start position:0%
filter will then be attached to any new
 

00:24:43.100 --> 00:24:44.740 align:start position:0%
filter will then be attached to any new
sockets<00:24:43.520><c> that</c><00:24:43.669><c> are</c><00:24:43.760><c> created</c><00:24:44.179><c> after</c><00:24:44.600><c> you've</c>

00:24:44.740 --> 00:24:44.750 align:start position:0%
sockets that are created after you've
 

00:24:44.750 --> 00:24:46.779 align:start position:0%
sockets that are created after you've
registered<00:24:44.990><c> your</c><00:24:45.470><c> filter</c><00:24:45.799><c> and</c><00:24:46.010><c> if</c><00:24:46.700><c> you</c>

00:24:46.779 --> 00:24:46.789 align:start position:0%
registered your filter and if you
 

00:24:46.789 --> 00:24:48.730 align:start position:0%
registered your filter and if you
specify<00:24:47.210><c> a</c><00:24:47.240><c> programmatic</c><00:24:47.659><c> filter</c><00:24:48.140><c> those</c>

00:24:48.730 --> 00:24:48.740 align:start position:0%
specify a programmatic filter those
 

00:24:48.740 --> 00:24:50.620 align:start position:0%
specify a programmatic filter those
filters<00:24:49.159><c> will</c><00:24:49.309><c> be</c><00:24:49.399><c> attached</c><00:24:49.700><c> when</c><00:24:50.029><c> somebody</c>

00:24:50.620 --> 00:24:50.630 align:start position:0%
filters will be attached when somebody
 

00:24:50.630 --> 00:24:52.779 align:start position:0%
filters will be attached when somebody
uses<00:24:50.840><c> the</c><00:24:50.870><c> s.o</c><00:24:51.260><c> nke</c><00:24:51.679><c> socket</c><00:24:52.190><c> option</c><00:24:52.520><c> to</c>

00:24:52.779 --> 00:24:52.789 align:start position:0%
uses the s.o nke socket option to
 

00:24:52.789 --> 00:24:54.610 align:start position:0%
uses the s.o nke socket option to
request<00:24:53.000><c> your</c><00:24:53.510><c> filter</c><00:24:53.870><c> be</c><00:24:53.990><c> attached</c><00:24:54.230><c> to</c><00:24:54.470><c> their</c>

00:24:54.610 --> 00:24:54.620 align:start position:0%
request your filter be attached to their
 

00:24:54.620 --> 00:24:58.750 align:start position:0%
request your filter be attached to their
socket<00:24:56.770><c> again</c><00:24:57.770><c> you</c><00:24:57.919><c> get</c><00:24:58.070><c> you</c><00:24:58.279><c> can</c><00:24:58.399><c> be</c><00:24:58.490><c> attached</c>

00:24:58.750 --> 00:24:58.760 align:start position:0%
socket again you get you can be attached
 

00:24:58.760 --> 00:25:00.310 align:start position:0%
socket again you get you can be attached
in<00:24:58.970><c> two</c><00:24:59.120><c> different</c><00:24:59.270><c> ways</c><00:24:59.480><c> the</c><00:24:59.779><c> global</c><00:25:00.049><c> filters</c>

00:25:00.310 --> 00:25:00.320 align:start position:0%
in two different ways the global filters
 

00:25:00.320 --> 00:25:01.510 align:start position:0%
in two different ways the global filters
are<00:25:00.470><c> attached</c><00:25:00.679><c> when</c><00:25:00.890><c> the</c><00:25:01.130><c> sockets</c><00:25:01.429><c> are</c>

00:25:01.510 --> 00:25:01.520 align:start position:0%
are attached when the sockets are
 

00:25:01.520 --> 00:25:03.279 align:start position:0%
are attached when the sockets are
created<00:25:01.880><c> and</c><00:25:02.090><c> the</c><00:25:02.120><c> programmatic</c><00:25:02.480><c> filters</c><00:25:03.020><c> are</c>

00:25:03.279 --> 00:25:03.289 align:start position:0%
created and the programmatic filters are
 

00:25:03.289 --> 00:25:06.180 align:start position:0%
created and the programmatic filters are
attached<00:25:03.529><c> with</c><00:25:03.830><c> the</c><00:25:03.860><c> fon</c><00:25:04.520><c> k</c><00:25:04.669><c> socket</c><00:25:05.179><c> option</c>

00:25:06.180 --> 00:25:06.190 align:start position:0%
attached with the fon k socket option
 

00:25:06.190 --> 00:25:11.500 align:start position:0%
attached with the fon k socket option
when<00:25:07.190><c> a</c><00:25:07.429><c> socket</c><00:25:07.940><c> is</c><00:25:08.090><c> attached</c><00:25:08.510><c> to</c><00:25:10.480><c> when</c><00:25:11.480><c> a</c>

00:25:11.500 --> 00:25:11.510 align:start position:0%
when a socket is attached to when a
 

00:25:11.510 --> 00:25:13.930 align:start position:0%
when a socket is attached to when a
sucker<00:25:12.080><c> filters</c><00:25:12.380><c> attached</c><00:25:12.649><c> to</c><00:25:12.860><c> a</c><00:25:12.890><c> socket</c><00:25:13.279><c> the</c>

00:25:13.930 --> 00:25:13.940 align:start position:0%
sucker filters attached to a socket the
 

00:25:13.940 --> 00:25:15.580 align:start position:0%
sucker filters attached to a socket the
attached<00:25:14.179><c> function</c><00:25:14.630><c> gets</c><00:25:14.809><c> called</c><00:25:14.870><c> and</c><00:25:15.320><c> this</c>

00:25:15.580 --> 00:25:15.590 align:start position:0%
attached function gets called and this
 

00:25:15.590 --> 00:25:17.470 align:start position:0%
attached function gets called and this
gives<00:25:15.740><c> the</c><00:25:16.010><c> socket</c><00:25:16.429><c> filter</c><00:25:16.760><c> an</c><00:25:16.909><c> opportunity</c>

00:25:17.470 --> 00:25:17.480 align:start position:0%
gives the socket filter an opportunity
 

00:25:17.480 --> 00:25:19.389 align:start position:0%
gives the socket filter an opportunity
to<00:25:17.630><c> allocate</c><00:25:18.049><c> some</c><00:25:18.230><c> data</c><00:25:18.470><c> for</c><00:25:18.770><c> storing</c><00:25:19.130><c> state</c>

00:25:19.389 --> 00:25:19.399 align:start position:0%
to allocate some data for storing state
 

00:25:19.399 --> 00:25:21.130 align:start position:0%
to allocate some data for storing state
that<00:25:20.000><c> will</c><00:25:20.120><c> be</c><00:25:20.240><c> associated</c><00:25:20.870><c> with</c><00:25:20.899><c> that</c>

00:25:21.130 --> 00:25:21.140 align:start position:0%
that will be associated with that
 

00:25:21.140 --> 00:25:27.789 align:start position:0%
that will be associated with that
connection<00:25:21.710><c> to</c><00:25:21.740><c> that</c><00:25:21.980><c> socket</c><00:25:25.000><c> if</c><00:25:26.500><c> you</c><00:25:27.500><c> want</c><00:25:27.679><c> to</c>

00:25:27.789 --> 00:25:27.799 align:start position:0%
connection to that socket if you want to
 

00:25:27.799 --> 00:25:30.100 align:start position:0%
connection to that socket if you want to
you<00:25:27.919><c> can</c><00:25:28.070><c> return</c><00:25:28.490><c> an</c><00:25:28.640><c> error</c><00:25:28.850><c> to</c><00:25:29.240><c> prevent</c><00:25:29.600><c> your</c>

00:25:30.100 --> 00:25:30.110 align:start position:0%
you can return an error to prevent your
 

00:25:30.110 --> 00:25:31.600 align:start position:0%
you can return an error to prevent your
socket<00:25:30.470><c> filter</c><00:25:30.679><c> from</c><00:25:30.830><c> being</c><00:25:31.010><c> attached</c><00:25:31.250><c> to</c><00:25:31.490><c> the</c>

00:25:31.600 --> 00:25:31.610 align:start position:0%
socket filter from being attached to the
 

00:25:31.610 --> 00:25:37.750 align:start position:0%
socket filter from being attached to the
socket<00:25:35.080><c> to</c><00:25:36.080><c> unregister</c><00:25:36.890><c> and</c><00:25:37.159><c> detach</c><00:25:37.610><c> your</c>

00:25:37.750 --> 00:25:37.760 align:start position:0%
socket to unregister and detach your
 

00:25:37.760 --> 00:25:40.000 align:start position:0%
socket to unregister and detach your
sockets<00:25:38.210><c> you</c><00:25:38.450><c> can</c><00:25:38.630><c> call</c><00:25:38.779><c> s</c><00:25:39.020><c> FLT</c><00:25:39.470><c> underscore</c>

00:25:40.000 --> 00:25:40.010 align:start position:0%
sockets you can call s FLT underscore
 

00:25:40.010 --> 00:25:41.919 align:start position:0%
sockets you can call s FLT underscore
unregister<00:25:40.610><c> and</c><00:25:40.820><c> this</c><00:25:41.240><c> is</c><00:25:41.360><c> also</c><00:25:41.539><c> an</c>

00:25:41.919 --> 00:25:41.929 align:start position:0%
unregister and this is also an
 

00:25:41.929 --> 00:25:43.990 align:start position:0%
unregister and this is also an
asynchronous<00:25:42.409><c> unregister</c><00:25:43.250><c> with</c><00:25:43.610><c> a</c><00:25:43.640><c> call</c><00:25:43.880><c> back</c>

00:25:43.990 --> 00:25:44.000 align:start position:0%
asynchronous unregister with a call back
 

00:25:44.000 --> 00:25:46.149 align:start position:0%
asynchronous unregister with a call back
to<00:25:44.179><c> let</c><00:25:44.299><c> you</c><00:25:44.390><c> know</c><00:25:44.510><c> when</c><00:25:44.630><c> it's</c><00:25:44.750><c> completed</c><00:25:45.159><c> when</c>

00:25:46.149 --> 00:25:46.159 align:start position:0%
to let you know when it's completed when
 

00:25:46.159 --> 00:25:47.860 align:start position:0%
to let you know when it's completed when
you<00:25:46.250><c> call</c><00:25:46.429><c> this</c><00:25:46.549><c> function</c><00:25:46.760><c> it</c><00:25:47.510><c> will</c><00:25:47.539><c> prevent</c>

00:25:47.860 --> 00:25:47.870 align:start position:0%
you call this function it will prevent
 

00:25:47.870 --> 00:25:49.539 align:start position:0%
you call this function it will prevent
any<00:25:48.049><c> more</c><00:25:48.289><c> sockets</c><00:25:48.710><c> from</c><00:25:48.890><c> being</c><00:25:49.039><c> attached</c><00:25:49.309><c> to</c>

00:25:49.539 --> 00:25:49.549 align:start position:0%
any more sockets from being attached to
 

00:25:49.549 --> 00:25:51.340 align:start position:0%
any more sockets from being attached to
your<00:25:49.669><c> socket</c><00:25:50.000><c> filter</c><00:25:50.360><c> and</c><00:25:50.570><c> it</c><00:25:51.020><c> will</c><00:25:51.140><c> start</c>

00:25:51.340 --> 00:25:51.350 align:start position:0%
your socket filter and it will start
 

00:25:51.350 --> 00:25:53.470 align:start position:0%
your socket filter and it will start
detaching<00:25:51.740><c> your</c><00:25:52.130><c> socket</c><00:25:52.490><c> filter</c><00:25:53.090><c> from</c><00:25:53.270><c> all</c>

00:25:53.470 --> 00:25:53.480 align:start position:0%
detaching your socket filter from all
 

00:25:53.480 --> 00:25:54.850 align:start position:0%
detaching your socket filter from all
the<00:25:53.659><c> sockets</c><00:25:53.870><c> that</c><00:25:54.110><c> it's</c><00:25:54.230><c> currently</c><00:25:54.500><c> attached</c>

00:25:54.850 --> 00:25:54.860 align:start position:0%
the sockets that it's currently attached
 

00:25:54.860 --> 00:25:57.970 align:start position:0%
the sockets that it's currently attached
to<00:25:55.600><c> so</c><00:25:56.600><c> your</c><00:25:56.750><c> socket</c><00:25:57.500><c> filter</c><00:25:57.740><c> will</c><00:25:57.860><c> get</c>

00:25:57.970 --> 00:25:57.980 align:start position:0%
to so your socket filter will get
 

00:25:57.980 --> 00:25:59.860 align:start position:0%
to so your socket filter will get
detached<00:25:58.370><c> when</c><00:25:59.120><c> either</c><00:25:59.240><c> the</c><00:25:59.360><c> socket</c><00:25:59.779><c> is</c>

00:25:59.860 --> 00:25:59.870 align:start position:0%
detached when either the socket is
 

00:25:59.870 --> 00:26:02.649 align:start position:0%
detached when either the socket is
closed<00:26:00.140><c> or</c><00:26:00.440><c> the</c><00:26:00.559><c> filter</c><00:26:00.830><c> is</c><00:26:00.919><c> unregistered</c><00:26:01.659><c> the</c>

00:26:02.649 --> 00:26:02.659 align:start position:0%
closed or the filter is unregistered the
 

00:26:02.659 --> 00:26:04.659 align:start position:0%
closed or the filter is unregistered the
SF<00:26:03.200><c> unregistered</c><00:26:03.860><c> callback</c><00:26:04.250><c> that</c><00:26:04.279><c> you</c><00:26:04.549><c> can</c>

00:26:04.659 --> 00:26:04.669 align:start position:0%
SF unregistered callback that you can
 

00:26:04.669 --> 00:26:07.060 align:start position:0%
SF unregistered callback that you can
specify<00:26:05.080><c> indicates</c><00:26:06.080><c> that</c><00:26:06.200><c> the</c><00:26:06.440><c> detaches</c><00:26:06.919><c> then</c>

00:26:07.060 --> 00:26:07.070 align:start position:0%
specify indicates that the detaches then
 

00:26:07.070 --> 00:26:11.340 align:start position:0%
specify indicates that the detaches then
complete<00:26:07.460><c> and</c><00:26:07.640><c> it's</c><00:26:07.940><c> safe</c><00:26:08.179><c> for</c><00:26:08.330><c> you</c><00:26:08.419><c> to</c><00:26:08.480><c> unload</c>

00:26:11.340 --> 00:26:11.350 align:start position:0%
 
 

00:26:11.350 --> 00:26:14.440 align:start position:0%
 
for<00:26:12.350><c> filtering</c><00:26:12.649><c> inbound</c><00:26:13.010><c> data</c><00:26:13.190><c> in</c><00:26:14.120><c> the</c><00:26:14.240><c> past</c>

00:26:14.440 --> 00:26:14.450 align:start position:0%
for filtering inbound data in the past
 

00:26:14.450 --> 00:26:17.409 align:start position:0%
for filtering inbound data in the past
you<00:26:14.600><c> had</c><00:26:14.720><c> the</c><00:26:15.190><c> filter</c><00:26:16.190><c> or</c><00:26:16.340><c> patch</c><00:26:16.520><c> sb.append</c>

00:26:17.409 --> 00:26:17.419 align:start position:0%
you had the filter or patch sb.append
 

00:26:17.419 --> 00:26:19.029 align:start position:0%
you had the filter or patch sb.append
that's<00:26:17.960><c> the</c><00:26:18.080><c> append</c><00:26:18.350><c> a</c><00:26:18.470><c> door</c><00:26:18.679><c> sb.append</c>

00:26:19.029 --> 00:26:19.039 align:start position:0%
that's the append a door sb.append
 

00:26:19.039 --> 00:26:21.190 align:start position:0%
that's the append a door sb.append
control<00:26:19.610><c> it</c><00:26:19.789><c> was</c><00:26:19.909><c> kind</c><00:26:20.480><c> of</c><00:26:20.510><c> complicated</c><00:26:21.020><c> and</c>

00:26:21.190 --> 00:26:21.200 align:start position:0%
control it was kind of complicated and
 

00:26:21.200 --> 00:26:23.560 align:start position:0%
control it was kind of complicated and
convoluted<00:26:21.460><c> there's</c><00:26:22.460><c> just</c><00:26:22.669><c> one</c><00:26:22.789><c> inbound</c><00:26:23.390><c> data</c>

00:26:23.560 --> 00:26:23.570 align:start position:0%
convoluted there's just one inbound data
 

00:26:23.570 --> 00:26:27.850 align:start position:0%
convoluted there's just one inbound data
filter<00:26:23.899><c> now</c><00:26:24.020><c> called</c><00:26:24.470><c> SF</c><00:26:24.890><c> data</c><00:26:25.100><c> and</c><00:26:26.860><c> this</c>

00:26:27.850 --> 00:26:27.860 align:start position:0%
filter now called SF data and this
 

00:26:27.860 --> 00:26:29.799 align:start position:0%
filter now called SF data and this
function<00:26:28.340><c> is</c><00:26:28.429><c> not</c><00:26:28.610><c> called</c><00:26:28.909><c> in</c><00:26:29.090><c> the</c><00:26:29.179><c> context</c><00:26:29.690><c> of</c>

00:26:29.799 --> 00:26:29.809 align:start position:0%
function is not called in the context of
 

00:26:29.809 --> 00:26:32.950 align:start position:0%
function is not called in the context of
the<00:26:30.080><c> socket</c><00:26:30.409><c> owners</c><00:26:30.679><c> process</c><00:26:31.120><c> so</c><00:26:32.120><c> looking</c><00:26:32.840><c> at</c>

00:26:32.950 --> 00:26:32.960 align:start position:0%
the socket owners process so looking at
 

00:26:32.960 --> 00:26:36.130 align:start position:0%
the socket owners process so looking at
the<00:26:33.080><c> clock</c><00:26:33.380><c> info</c><00:26:33.860><c> to</c><00:26:34.490><c> get</c><00:26:34.640><c> information</c><00:26:35.090><c> is</c><00:26:35.570><c> not</c>

00:26:36.130 --> 00:26:36.140 align:start position:0%
the clock info to get information is not
 

00:26:36.140 --> 00:26:38.590 align:start position:0%
the clock info to get information is not
going<00:26:36.289><c> to</c><00:26:36.350><c> be</c><00:26:36.440><c> useful</c><00:26:37.120><c> from</c><00:26:38.120><c> this</c><00:26:38.210><c> function</c>

00:26:38.590 --> 00:26:38.600 align:start position:0%
going to be useful from this function
 

00:26:38.600 --> 00:26:40.060 align:start position:0%
going to be useful from this function
you<00:26:38.690><c> can</c><00:26:38.720><c> modify</c><00:26:39.169><c> the</c><00:26:39.320><c> data</c><00:26:39.529><c> in</c><00:26:39.679><c> the</c><00:26:39.770><c> unbuffed</c>

00:26:40.060 --> 00:26:40.070 align:start position:0%
you can modify the data in the unbuffed
 

00:26:40.070 --> 00:26:42.310 align:start position:0%
you can modify the data in the unbuffed
chain<00:26:40.419><c> the</c><00:26:41.419><c> return</c><00:26:41.720><c> value</c><00:26:41.929><c> from</c><00:26:42.200><c> this</c>

00:26:42.310 --> 00:26:42.320 align:start position:0%
chain the return value from this
 

00:26:42.320 --> 00:26:44.110 align:start position:0%
chain the return value from this
function<00:26:42.679><c> is</c><00:26:42.740><c> very</c><00:26:42.980><c> important</c><00:26:43.460><c> if</c><00:26:43.880><c> he</c><00:26:43.970><c> returns</c>

00:26:44.110 --> 00:26:44.120 align:start position:0%
function is very important if he returns
 

00:26:44.120 --> 00:26:44.840 align:start position:0%
function is very important if he returns
0

00:26:44.840 --> 00:26:44.850 align:start position:0%
0
 

00:26:44.850 --> 00:26:46.400 align:start position:0%
0
the<00:26:45.030><c> data</c><00:26:45.210><c> continues</c><00:26:45.630><c> being</c><00:26:45.780><c> processed</c><00:26:46.050><c> as</c>

00:26:46.400 --> 00:26:46.410 align:start position:0%
the data continues being processed as
 

00:26:46.410 --> 00:26:48.500 align:start position:0%
the data continues being processed as
normal<00:26:46.770><c> if</c><00:26:47.340><c> you</c><00:26:47.430><c> return</c><00:26:47.670><c> II</c><00:26:47.880><c> just</c><00:26:47.910><c> returned</c>

00:26:48.500 --> 00:26:48.510 align:start position:0%
normal if you return II just returned
 

00:26:48.510 --> 00:26:51.020 align:start position:0%
normal if you return II just returned
the<00:26:49.110><c> processing</c><00:26:49.620><c> is</c><00:26:49.680><c> going</c><00:26:49.920><c> to</c><00:26:50.010><c> stop</c><00:26:50.280><c> and</c><00:26:50.610><c> it's</c>

00:26:51.020 --> 00:26:51.030 align:start position:0%
the processing is going to stop and it's
 

00:26:51.030 --> 00:26:51.860 align:start position:0%
the processing is going to stop and it's
going<00:26:51.180><c> to</c><00:26:51.270><c> assume</c><00:26:51.450><c> that</c><00:26:51.510><c> you've</c><00:26:51.750><c> taken</c>

00:26:51.860 --> 00:26:51.870 align:start position:0%
going to assume that you've taken
 

00:26:51.870 --> 00:26:53.810 align:start position:0%
going to assume that you've taken
responsibility<00:26:52.140><c> for</c><00:26:52.770><c> that</c><00:26:53.010><c> data</c><00:26:53.280><c> and</c><00:26:53.460><c> that</c>

00:26:53.810 --> 00:26:53.820 align:start position:0%
responsibility for that data and that
 

00:26:53.820 --> 00:26:56.600 align:start position:0%
responsibility for that data and that
data<00:26:53.880><c> will</c><00:26:54.240><c> not</c><00:26:54.360><c> be</c><00:26:54.510><c> freed</c><00:26:55.070><c> if</c><00:26:56.070><c> you</c><00:26:56.190><c> return</c><00:26:56.400><c> any</c>

00:26:56.600 --> 00:26:56.610 align:start position:0%
data will not be freed if you return any
 

00:26:56.610 --> 00:26:58.790 align:start position:0%
data will not be freed if you return any
other<00:26:56.880><c> error</c><00:26:57.090><c> the</c><00:26:57.660><c> processing</c><00:26:58.170><c> will</c><00:26:58.350><c> stop</c><00:26:58.590><c> and</c>

00:26:58.790 --> 00:26:58.800 align:start position:0%
other error the processing will stop and
 

00:26:58.800 --> 00:27:01.790 align:start position:0%
other error the processing will stop and
the<00:26:59.340><c> data</c><00:26:59.490><c> will</c><00:26:59.670><c> be</c><00:26:59.700><c> freed</c><00:27:00.030><c> if</c><00:27:00.650><c> you</c><00:27:01.650><c> do</c>

00:27:01.790 --> 00:27:01.800 align:start position:0%
the data will be freed if you do
 

00:27:01.800 --> 00:27:03.260 align:start position:0%
the data will be freed if you do
swallowed<00:27:02.220><c> the</c><00:27:02.310><c> data</c><00:27:02.490><c> if</c><00:27:02.670><c> by</c><00:27:02.790><c> returning</c><00:27:03.120><c> an</c>

00:27:03.260 --> 00:27:03.270 align:start position:0%
swallowed the data if by returning an
 

00:27:03.270 --> 00:27:06.140 align:start position:0%
swallowed the data if by returning an
error<00:27:03.450><c> or</c><00:27:03.690><c> eat</c><00:27:03.870><c> just</c><00:27:04.080><c> returned</c><00:27:04.440><c> the</c><00:27:05.150><c> process</c>

00:27:06.140 --> 00:27:06.150 align:start position:0%
error or eat just returned the process
 

00:27:06.150 --> 00:27:09.760 align:start position:0%
error or eat just returned the process
that<00:27:06.840><c> owns</c><00:27:07.110><c> the</c><00:27:07.380><c> socket</c><00:27:07.710><c> won't</c><00:27:07.920><c> be</c><00:27:08.070><c> woken</c><00:27:08.280><c> up</c>

00:27:09.760 --> 00:27:09.770 align:start position:0%
that owns the socket won't be woken up
 

00:27:09.770 --> 00:27:13.040 align:start position:0%
that owns the socket won't be woken up
if<00:27:10.770><c> you</c><00:27:11.280><c> need</c><00:27:11.400><c> to</c><00:27:11.580><c> inject</c><00:27:11.880><c> data</c><00:27:12.240><c> later</c><00:27:12.510><c> you</c><00:27:12.900><c> can</c>

00:27:13.040 --> 00:27:13.050 align:start position:0%
if you need to inject data later you can
 

00:27:13.050 --> 00:27:17.660 align:start position:0%
if you need to inject data later you can
use<00:27:13.200><c> the</c><00:27:13.440><c> sock</c><00:27:13.680><c> inject</c><00:27:14.100><c> data</c><00:27:14.430><c> in</c><00:27:14.640><c> function</c><00:27:16.670><c> for</c>

00:27:17.660 --> 00:27:17.670 align:start position:0%
use the sock inject data in function for
 

00:27:17.670 --> 00:27:19.490 align:start position:0%
use the sock inject data in function for
outbound<00:27:17.940><c> data</c><00:27:18.210><c> it's</c><00:27:18.420><c> much</c><00:27:18.630><c> the</c><00:27:18.660><c> same</c><00:27:18.870><c> there's</c>

00:27:19.490 --> 00:27:19.500 align:start position:0%
outbound data it's much the same there's
 

00:27:19.500 --> 00:27:22.180 align:start position:0%
outbound data it's much the same there's
an<00:27:19.680><c> SF</c><00:27:19.980><c> data</c><00:27:20.190><c> out</c><00:27:20.400><c> call</c><00:27:20.850><c> back</c><00:27:21.030><c> you</c><00:27:21.510><c> can</c><00:27:21.690><c> specify</c>

00:27:22.180 --> 00:27:22.190 align:start position:0%
an SF data out call back you can specify
 

00:27:22.190 --> 00:27:24.770 align:start position:0%
an SF data out call back you can specify
this<00:27:23.190><c> is</c><00:27:23.400><c> usually</c><00:27:23.760><c> called</c><00:27:23.970><c> in</c><00:27:24.180><c> the</c><00:27:24.270><c> context</c><00:27:24.690><c> of</c>

00:27:24.770 --> 00:27:24.780 align:start position:0%
this is usually called in the context of
 

00:27:24.780 --> 00:27:27.500 align:start position:0%
this is usually called in the context of
the<00:27:24.870><c> socket</c><00:27:25.170><c> owners</c><00:27:25.380><c> process</c><00:27:26.090><c> the</c><00:27:27.090><c> data</c><00:27:27.210><c> can</c>

00:27:27.500 --> 00:27:27.510 align:start position:0%
the socket owners process the data can
 

00:27:27.510 --> 00:27:29.450 align:start position:0%
the socket owners process the data can
be<00:27:27.540><c> modified</c><00:27:27.930><c> and</c><00:27:28.320><c> the</c><00:27:28.770><c> return</c><00:27:28.980><c> values</c><00:27:29.340><c> are</c>

00:27:29.450 --> 00:27:29.460 align:start position:0%
be modified and the return values are
 

00:27:29.460 --> 00:27:31.010 align:start position:0%
be modified and the return values are
just<00:27:29.640><c> the</c><00:27:29.760><c> same</c><00:27:29.910><c> for</c><00:27:30.060><c> data</c><00:27:30.240><c> out</c><00:27:30.450><c> if</c><00:27:30.690><c> you</c><00:27:30.780><c> return</c>

00:27:31.010 --> 00:27:31.020 align:start position:0%
just the same for data out if you return
 

00:27:31.020 --> 00:27:33.050 align:start position:0%
just the same for data out if you return
to<00:27:31.050><c> 0</c><00:27:31.350><c> then</c><00:27:31.650><c> it</c><00:27:31.680><c> processes</c><00:27:32.370><c> as</c><00:27:32.490><c> normal</c><00:27:32.850><c> if</c><00:27:32.910><c> your</c>

00:27:33.050 --> 00:27:33.060 align:start position:0%
to 0 then it processes as normal if your
 

00:27:33.060 --> 00:27:36.560 align:start position:0%
to 0 then it processes as normal if your
turn<00:27:33.210><c> II</c><00:27:33.390><c> just</c><00:27:33.420><c> returned</c><00:27:33.930><c> then</c><00:27:34.880><c> your</c><00:27:35.880><c> the</c>

00:27:36.560 --> 00:27:36.570 align:start position:0%
turn II just returned then your the
 

00:27:36.570 --> 00:27:38.330 align:start position:0%
turn II just returned then your the
processing<00:27:36.990><c> stops</c><00:27:37.230><c> and</c><00:27:37.440><c> you're</c><00:27:37.470><c> free</c><00:27:38.040><c> to</c><00:27:38.160><c> hold</c>

00:27:38.330 --> 00:27:38.340 align:start position:0%
processing stops and you're free to hold
 

00:27:38.340 --> 00:27:40.010 align:start position:0%
processing stops and you're free to hold
on<00:27:38.460><c> to</c><00:27:38.550><c> that</c><00:27:38.640><c> data</c><00:27:38.880><c> if</c><00:27:39.390><c> you</c><00:27:39.510><c> return</c><00:27:39.720><c> any</c><00:27:39.900><c> other</c>

00:27:40.010 --> 00:27:40.020 align:start position:0%
on to that data if you return any other
 

00:27:40.020 --> 00:27:41.960 align:start position:0%
on to that data if you return any other
value<00:27:40.230><c> the</c><00:27:40.800><c> processing</c><00:27:41.280><c> stops</c><00:27:41.520><c> and</c><00:27:41.730><c> the</c><00:27:41.790><c> data</c>

00:27:41.960 --> 00:27:41.970 align:start position:0%
value the processing stops and the data
 

00:27:41.970 --> 00:27:44.900 align:start position:0%
value the processing stops and the data
gets<00:27:42.120><c> freed</c><00:27:42.450><c> if</c><00:27:42.740><c> you</c><00:27:43.740><c> need</c><00:27:43.890><c> to</c><00:27:44.010><c> later</c><00:27:44.490><c> inject</c>

00:27:44.900 --> 00:27:44.910 align:start position:0%
gets freed if you need to later inject
 

00:27:44.910 --> 00:27:46.100 align:start position:0%
gets freed if you need to later inject
some<00:27:45.150><c> data</c><00:27:45.330><c> that</c><00:27:45.540><c> you</c><00:27:45.630><c> would</c><00:27:45.720><c> cute</c><00:27:45.990><c> or</c>

00:27:46.100 --> 00:27:46.110 align:start position:0%
some data that you would cute or
 

00:27:46.110 --> 00:27:48.320 align:start position:0%
some data that you would cute or
something<00:27:46.440><c> you</c><00:27:46.980><c> can</c><00:27:47.160><c> use</c><00:27:47.190><c> sock</c><00:27:47.730><c> inject</c><00:27:48.120><c> data</c>

00:27:48.320 --> 00:27:48.330 align:start position:0%
something you can use sock inject data
 

00:27:48.330 --> 00:27:53.630 align:start position:0%
something you can use sock inject data
out<00:27:50.810><c> you</c><00:27:51.810><c> can</c><00:27:51.930><c> also</c><00:27:52.050><c> filter</c><00:27:52.350><c> binds</c><00:27:52.710><c> this</c><00:27:53.430><c> lets</c>

00:27:53.630 --> 00:27:53.640 align:start position:0%
out you can also filter binds this lets
 

00:27:53.640 --> 00:27:55.160 align:start position:0%
out you can also filter binds this lets
you<00:27:53.820><c> either</c><00:27:54.090><c> bind</c><00:27:54.450><c> to</c><00:27:54.660><c> a</c><00:27:54.690><c> different</c><00:27:55.110><c> address</c>

00:27:55.160 --> 00:27:55.170 align:start position:0%
you either bind to a different address
 

00:27:55.170 --> 00:27:57.380 align:start position:0%
you either bind to a different address
from<00:27:55.560><c> the</c><00:27:55.620><c> requested</c><00:27:56.160><c> one</c><00:27:56.190><c> or</c><00:27:56.850><c> prevent</c><00:27:57.270><c> the</c>

00:27:57.380 --> 00:27:57.390 align:start position:0%
from the requested one or prevent the
 

00:27:57.390 --> 00:27:59.870 align:start position:0%
from the requested one or prevent the
bind<00:27:57.570><c> all</c><00:27:57.750><c> together</c><00:27:57.900><c> if</c><00:27:58.320><c> you</c><00:27:59.280><c> need</c><00:27:59.430><c> to</c><00:27:59.520><c> bind</c><00:27:59.700><c> to</c>

00:27:59.870 --> 00:27:59.880 align:start position:0%
bind all together if you need to bind to
 

00:27:59.880 --> 00:28:02.810 align:start position:0%
bind all together if you need to bind to
a<00:27:59.940><c> different</c><00:28:00.270><c> address</c><00:28:00.920><c> call</c><00:28:01.920><c> sock</c><00:28:02.220><c> bind</c><00:28:02.520><c> again</c>

00:28:02.810 --> 00:28:02.820 align:start position:0%
a different address call sock bind again
 

00:28:02.820 --> 00:28:04.490 align:start position:0%
a different address call sock bind again
on<00:28:03.060><c> the</c><00:28:03.240><c> same</c><00:28:03.390><c> socket</c><00:28:03.780><c> but</c><00:28:04.230><c> with</c><00:28:04.350><c> the</c><00:28:04.470><c> new</c>

00:28:04.490 --> 00:28:04.500 align:start position:0%
on the same socket but with the new
 

00:28:04.500 --> 00:28:06.110 align:start position:0%
on the same socket but with the new
address<00:28:04.980><c> that</c><00:28:05.130><c> you</c><00:28:05.160><c> want</c><00:28:05.370><c> to</c><00:28:05.400><c> bind</c><00:28:05.580><c> to</c><00:28:05.850><c> and</c>

00:28:06.110 --> 00:28:06.120 align:start position:0%
address that you want to bind to and
 

00:28:06.120 --> 00:28:08.960 align:start position:0%
address that you want to bind to and
then<00:28:06.870><c> return</c><00:28:07.200><c> Aegis</c><00:28:07.650><c> return</c><00:28:08.040><c> or</c><00:28:08.310><c> if</c><00:28:08.760><c> you</c><00:28:08.880><c> got</c>

00:28:08.960 --> 00:28:08.970 align:start position:0%
then return Aegis return or if you got
 

00:28:08.970 --> 00:28:10.910 align:start position:0%
then return Aegis return or if you got
an<00:28:09.120><c> error</c><00:28:09.300><c> back</c><00:28:09.540><c> from</c><00:28:09.810><c> your</c><00:28:10.140><c> second</c><00:28:10.590><c> call</c><00:28:10.890><c> to</c>

00:28:10.910 --> 00:28:10.920 align:start position:0%
an error back from your second call to
 

00:28:10.920 --> 00:28:13.160 align:start position:0%
an error back from your second call to
sock<00:28:11.190><c> find</c><00:28:11.490><c> you</c><00:28:12.240><c> need</c><00:28:12.390><c> to</c><00:28:12.480><c> return</c><00:28:12.600><c> that</c><00:28:12.810><c> error</c>

00:28:13.160 --> 00:28:13.170 align:start position:0%
sock find you need to return that error
 

00:28:13.170 --> 00:28:16.550 align:start position:0%
sock find you need to return that error
if<00:28:13.620><c> you</c><00:28:14.430><c> do</c><00:28:14.640><c> intercept</c><00:28:15.150><c> the</c><00:28:15.570><c> bind</c><00:28:15.810><c> and</c><00:28:16.080><c> bind</c><00:28:16.440><c> to</c>

00:28:16.550 --> 00:28:16.560 align:start position:0%
if you do intercept the bind and bind to
 

00:28:16.560 --> 00:28:18.680 align:start position:0%
if you do intercept the bind and bind to
a<00:28:16.590><c> different</c><00:28:16.890><c> address</c><00:28:17.030><c> you</c><00:28:18.030><c> may</c><00:28:18.210><c> want</c><00:28:18.330><c> to</c><00:28:18.510><c> also</c>

00:28:18.680 --> 00:28:18.690 align:start position:0%
a different address you may want to also
 

00:28:18.690 --> 00:28:21.500 align:start position:0%
a different address you may want to also
intercept<00:28:19.620><c> the</c><00:28:19.890><c> get</c><00:28:20.250><c> sock</c><00:28:20.520><c> main</c><00:28:20.790><c> so</c><00:28:21.270><c> that</c><00:28:21.420><c> you</c>

00:28:21.500 --> 00:28:21.510 align:start position:0%
intercept the get sock main so that you
 

00:28:21.510 --> 00:28:23.600 align:start position:0%
intercept the get sock main so that you
can<00:28:21.750><c> keep</c><00:28:22.500><c> the</c><00:28:22.680><c> process</c><00:28:23.070><c> thinking</c><00:28:23.280><c> that</c><00:28:23.520><c> it</c>

00:28:23.600 --> 00:28:23.610 align:start position:0%
can keep the process thinking that it
 

00:28:23.610 --> 00:28:25.070 align:start position:0%
can keep the process thinking that it
connected<00:28:23.970><c> to</c><00:28:24.030><c> the</c><00:28:24.120><c> fact</c><00:28:24.330><c> that</c><00:28:24.510><c> it</c><00:28:24.750><c> found</c><00:28:24.870><c> to</c>

00:28:25.070 --> 00:28:25.080 align:start position:0%
connected to the fact that it found to
 

00:28:25.080 --> 00:28:31.070 align:start position:0%
connected to the fact that it found to
the<00:28:25.170><c> socket</c><00:28:25.500><c> that</c><00:28:26.040><c> it</c><00:28:26.190><c> tried</c><00:28:27.000><c> to</c><00:28:27.030><c> bind</c><00:28:27.360><c> to</c><00:28:30.080><c> you</c>

00:28:31.070 --> 00:28:31.080 align:start position:0%
the socket that it tried to bind to you
 

00:28:31.080 --> 00:28:32.810 align:start position:0%
the socket that it tried to bind to you
can<00:28:31.200><c> also</c><00:28:31.320><c> filter</c><00:28:31.620><c> connects</c><00:28:32.160><c> both</c><00:28:32.460><c> inbound</c>

00:28:32.810 --> 00:28:32.820 align:start position:0%
can also filter connects both inbound
 

00:28:32.820 --> 00:28:34.760 align:start position:0%
can also filter connects both inbound
and<00:28:33.000><c> outbound</c><00:28:33.120><c> for</c><00:28:33.930><c> inbound</c><00:28:34.230><c> connects</c><00:28:34.620><c> you</c>

00:28:34.760 --> 00:28:34.770 align:start position:0%
and outbound for inbound connects you
 

00:28:34.770 --> 00:28:36.290 align:start position:0%
and outbound for inbound connects you
can<00:28:34.920><c> only</c><00:28:35.040><c> allow</c><00:28:35.370><c> them</c><00:28:35.550><c> or</c><00:28:35.670><c> disallow</c><00:28:36.000><c> them</c><00:28:36.180><c> you</c>

00:28:36.290 --> 00:28:36.300 align:start position:0%
can only allow them or disallow them you
 

00:28:36.300 --> 00:28:38.150 align:start position:0%
can only allow them or disallow them you
can't<00:28:36.480><c> change</c><00:28:36.870><c> the</c><00:28:37.140><c> address</c><00:28:37.740><c> that</c><00:28:38.130><c> the</c>

00:28:38.150 --> 00:28:38.160 align:start position:0%
can't change the address that the
 

00:28:38.160 --> 00:28:41.240 align:start position:0%
can't change the address that the
connection<00:28:38.700><c> is</c><00:28:38.760><c> coming</c><00:28:39.060><c> in</c><00:28:39.150><c> from</c><00:28:39.860><c> for</c><00:28:40.860><c> the</c>

00:28:41.240 --> 00:28:41.250 align:start position:0%
connection is coming in from for the
 

00:28:41.250 --> 00:28:43.130 align:start position:0%
connection is coming in from for the
outbound<00:28:41.520><c> connections</c><00:28:41.790><c> you</c><00:28:42.330><c> can</c><00:28:42.510><c> allow</c><00:28:42.990><c> or</c>

00:28:43.130 --> 00:28:43.140 align:start position:0%
outbound connections you can allow or
 

00:28:43.140 --> 00:28:45.620 align:start position:0%
outbound connections you can allow or
disallow<00:28:43.320><c> and</c><00:28:43.920><c> you</c><00:28:44.490><c> can</c><00:28:44.640><c> also</c><00:28:44.790><c> connect</c><00:28:45.480><c> to</c><00:28:45.600><c> a</c>

00:28:45.620 --> 00:28:45.630 align:start position:0%
disallow and you can also connect to a
 

00:28:45.630 --> 00:28:47.330 align:start position:0%
disallow and you can also connect to a
different<00:28:45.930><c> address</c><00:28:45.990><c> if</c><00:28:46.710><c> you</c><00:28:46.860><c> need</c><00:28:47.010><c> to</c><00:28:47.070><c> connect</c>

00:28:47.330 --> 00:28:47.340 align:start position:0%
different address if you need to connect
 

00:28:47.340 --> 00:28:49.100 align:start position:0%
different address if you need to connect
to<00:28:47.430><c> a</c><00:28:47.460><c> different</c><00:28:47.760><c> address</c><00:28:47.820><c> call</c><00:28:48.810><c> stock</c>

00:28:49.100 --> 00:28:49.110 align:start position:0%
to a different address call stock
 

00:28:49.110 --> 00:28:50.780 align:start position:0%
to a different address call stock
connect<00:28:49.470><c> again</c><00:28:49.590><c> and</c><00:28:49.980><c> specify</c><00:28:50.550><c> the</c><00:28:50.610><c> new</c>

00:28:50.780 --> 00:28:50.790 align:start position:0%
connect again and specify the new
 

00:28:50.790 --> 00:28:52.910 align:start position:0%
connect again and specify the new
address<00:28:50.940><c> and</c><00:28:51.420><c> then</c><00:28:51.960><c> return</c><00:28:52.230><c> e</c><00:28:52.260><c> just</c><00:28:52.590><c> return</c>

00:28:52.910 --> 00:28:52.920 align:start position:0%
address and then return e just return
 

00:28:52.920 --> 00:28:54.830 align:start position:0%
address and then return e just return
it's<00:28:53.280><c> not</c><00:28:53.430><c> connect</c><00:28:53.790><c> succeeded</c><00:28:54.330><c> if</c><00:28:54.510><c> sock</c>

00:28:54.830 --> 00:28:54.840 align:start position:0%
it's not connect succeeded if sock
 

00:28:54.840 --> 00:28:56.720 align:start position:0%
it's not connect succeeded if sock
connect<00:28:55.140><c> failed</c><00:28:55.440><c> then</c><00:28:56.130><c> go</c><00:28:56.310><c> ahead</c><00:28:56.400><c> and</c><00:28:56.580><c> return</c>

00:28:56.720 --> 00:28:56.730 align:start position:0%
connect failed then go ahead and return
 

00:28:56.730 --> 00:28:58.220 align:start position:0%
connect failed then go ahead and return
the<00:28:56.880><c> error</c><00:28:57.030><c> that</c><00:28:57.240><c> you</c><00:28:57.300><c> got</c><00:28:57.450><c> some</c><00:28:57.750><c> socks</c>

00:28:58.220 --> 00:28:58.230 align:start position:0%
the error that you got some socks
 

00:28:58.230 --> 00:29:01.010 align:start position:0%
the error that you got some socks
and<00:28:59.190><c> again</c><00:28:59.580><c> you</c><00:28:59.700><c> can</c><00:28:59.730><c> intercept</c><00:29:00.360><c> get</c><00:29:00.750><c> pure</c>

00:29:01.010 --> 00:29:01.020 align:start position:0%
and again you can intercept get pure
 

00:29:01.020 --> 00:29:03.860 align:start position:0%
and again you can intercept get pure
name<00:29:01.200><c> to</c><00:29:02.100><c> keep</c><00:29:02.640><c> the</c><00:29:02.880><c> process</c><00:29:03.390><c> thinking</c><00:29:03.600><c> that</c>

00:29:03.860 --> 00:29:03.870 align:start position:0%
name to keep the process thinking that
 

00:29:03.870 --> 00:29:05.600 align:start position:0%
name to keep the process thinking that
it<00:29:03.960><c> connected</c><00:29:04.380><c> to</c><00:29:04.500><c> the</c><00:29:04.620><c> address</c><00:29:05.190><c> that</c><00:29:05.220><c> it</c><00:29:05.460><c> had</c>

00:29:05.600 --> 00:29:05.610 align:start position:0%
it connected to the address that it had
 

00:29:05.610 --> 00:29:10.039 align:start position:0%
it connected to the address that it had
requested<00:29:08.450><c> there's</c><00:29:09.450><c> some</c><00:29:09.630><c> additional</c>

00:29:10.039 --> 00:29:10.049 align:start position:0%
requested there's some additional
 

00:29:10.049 --> 00:29:13.820 align:start position:0%
requested there's some additional
filtered<00:29:10.590><c> points</c><00:29:10.919><c> for</c><00:29:11.730><c> sockets</c><00:29:12.530><c> the</c><00:29:13.530><c> SF</c>

00:29:13.820 --> 00:29:13.830 align:start position:0%
filtered points for sockets the SF
 

00:29:13.830 --> 00:29:16.100 align:start position:0%
filtered points for sockets the SF
notify<00:29:14.220><c> notifies</c><00:29:14.880><c> you</c><00:29:15.120><c> of</c><00:29:15.150><c> socket</c><00:29:15.900><c> state</c>

00:29:16.100 --> 00:29:16.110 align:start position:0%
notify notifies you of socket state
 

00:29:16.110 --> 00:29:17.659 align:start position:0%
notify notifies you of socket state
changes<00:29:16.500><c> for</c><00:29:16.860><c> example</c><00:29:16.890><c> when</c><00:29:17.400><c> you're</c><00:29:17.520><c> being</c>

00:29:17.659 --> 00:29:17.669 align:start position:0%
changes for example when you're being
 

00:29:17.669 --> 00:29:20.750 align:start position:0%
changes for example when you're being
disconnected<00:29:19.130><c> or</c><00:29:20.130><c> you're</c><00:29:20.640><c> in</c><00:29:20.730><c> the</c>

00:29:20.750 --> 00:29:20.760 align:start position:0%
disconnected or you're in the
 

00:29:20.760 --> 00:29:23.000 align:start position:0%
disconnected or you're in the
disconnecting<00:29:21.360><c> state</c><00:29:21.770><c> you</c><00:29:22.770><c> can</c><00:29:22.890><c> also</c>

00:29:23.000 --> 00:29:23.010 align:start position:0%
disconnecting state you can also
 

00:29:23.010 --> 00:29:25.640 align:start position:0%
disconnecting state you can also
intercept<00:29:23.520><c> socket</c><00:29:23.910><c> options</c><00:29:24.210><c> using</c><00:29:24.450><c> the</c><00:29:25.140><c> SF</c>

00:29:25.640 --> 00:29:25.650 align:start position:0%
intercept socket options using the SF
 

00:29:25.650 --> 00:29:28.370 align:start position:0%
intercept socket options using the SF
sets<00:29:26.130><c> option</c><00:29:26.610><c> and</c><00:29:26.820><c> SF</c><00:29:27.210><c> get</c><00:29:27.419><c> option</c><00:29:27.780><c> callbacks</c>

00:29:28.370 --> 00:29:28.380 align:start position:0%
sets option and SF get option callbacks
 

00:29:28.380 --> 00:29:30.890 align:start position:0%
sets option and SF get option callbacks
you<00:29:28.860><c> can</c><00:29:29.040><c> intercept</c><00:29:29.370><c> I</c><00:29:29.549><c> octal</c><00:29:29.970><c> you</c><00:29:30.660><c> can</c><00:29:30.809><c> either</c>

00:29:30.890 --> 00:29:30.900 align:start position:0%
you can intercept I octal you can either
 

00:29:30.900 --> 00:29:34.250 align:start position:0%
you can intercept I octal you can either
handle<00:29:31.230><c> them</c><00:29:31.350><c> or</c><00:29:31.880><c> block</c><00:29:32.880><c> them</c><00:29:33.120><c> you</c><00:29:34.020><c> can</c><00:29:34.140><c> also</c>

00:29:34.250 --> 00:29:34.260 align:start position:0%
handle them or block them you can also
 

00:29:34.260 --> 00:29:36.380 align:start position:0%
handle them or block them you can also
intercept<00:29:34.679><c> listen</c><00:29:34.980><c> to</c><00:29:35.070><c> prevent</c><00:29:35.390><c> processors</c>

00:29:36.380 --> 00:29:36.390 align:start position:0%
intercept listen to prevent processors
 

00:29:36.390 --> 00:29:37.700 align:start position:0%
intercept listen to prevent processors
from<00:29:36.540><c> being</c><00:29:36.720><c> able</c><00:29:36.809><c> to</c><00:29:36.960><c> create</c><00:29:37.350><c> listening</c>

00:29:37.700 --> 00:29:37.710 align:start position:0%
from being able to create listening
 

00:29:37.710 --> 00:29:42.680 align:start position:0%
from being able to create listening
sockets<00:29:40.970><c> so</c><00:29:41.970><c> moving</c><00:29:42.210><c> down</c><00:29:42.360><c> the</c><00:29:42.480><c> stack</c><00:29:42.660><c> a</c>

00:29:42.680 --> 00:29:42.690 align:start position:0%
sockets so moving down the stack a
 

00:29:42.690 --> 00:29:45.560 align:start position:0%
sockets so moving down the stack a
little<00:29:42.960><c> bit</c><00:29:43.049><c> more</c><00:29:43.200><c> we</c><00:29:43.530><c> have</c><00:29:43.679><c> IP</c><00:29:43.860><c> filters</c><00:29:44.570><c> IP</c>

00:29:45.560 --> 00:29:45.570 align:start position:0%
little bit more we have IP filters IP
 

00:29:45.570 --> 00:29:47.720 align:start position:0%
little bit more we have IP filters IP
filters<00:29:46.049><c> give</c><00:29:46.679><c> you</c><00:29:46.799><c> a</c><00:29:46.860><c> chance</c><00:29:47.130><c> to</c><00:29:47.400><c> filter</c>

00:29:47.720 --> 00:29:47.730 align:start position:0%
filters give you a chance to filter
 

00:29:47.730 --> 00:29:50.390 align:start position:0%
filters give you a chance to filter
packets<00:29:48.450><c> at</c><00:29:48.570><c> the</c><00:29:48.690><c> IP</c><00:29:48.870><c> layer</c><00:29:49.200><c> and</c><00:29:49.470><c> the</c><00:29:50.220><c> really</c>

00:29:50.390 --> 00:29:50.400 align:start position:0%
packets at the IP layer and the really
 

00:29:50.400 --> 00:29:51.770 align:start position:0%
packets at the IP layer and the really
nice<00:29:50.490><c> thing</c><00:29:50.700><c> about</c><00:29:50.730><c> IP</c><00:29:51.030><c> filters</c><00:29:51.450><c> is</c><00:29:51.630><c> that</c>

00:29:51.770 --> 00:29:51.780 align:start position:0%
nice thing about IP filters is that
 

00:29:51.780 --> 00:29:53.659 align:start position:0%
nice thing about IP filters is that
they're<00:29:51.990><c> the</c><00:29:52.620><c> packets</c><00:29:53.220><c> are</c><00:29:53.309><c> passed</c><00:29:53.490><c> to</c><00:29:53.610><c> you</c>

00:29:53.659 --> 00:29:53.669 align:start position:0%
they're the packets are passed to you
 

00:29:53.669 --> 00:29:56.150 align:start position:0%
they're the packets are passed to you
after<00:29:54.000><c> they've</c><00:29:54.150><c> been</c><00:29:54.240><c> reassembled</c><00:29:54.570><c> on</c><00:29:55.160><c> the</c>

00:29:56.150 --> 00:29:56.160 align:start position:0%
after they've been reassembled on the
 

00:29:56.160 --> 00:29:57.650 align:start position:0%
after they've been reassembled on the
inbound<00:29:56.490><c> side</c><00:29:56.730><c> so</c><00:29:57.059><c> you</c><00:29:57.090><c> don't</c><00:29:57.299><c> have</c><00:29:57.390><c> to</c><00:29:57.510><c> deal</c>

00:29:57.650 --> 00:29:57.660 align:start position:0%
inbound side so you don't have to deal
 

00:29:57.660 --> 00:30:00.799 align:start position:0%
inbound side so you don't have to deal
with<00:29:57.809><c> fragments</c><00:29:58.440><c> on</c><00:29:58.760><c> the</c><00:29:59.760><c> outbound</c><00:30:00.059><c> side</c><00:30:00.299><c> you</c>

00:30:00.799 --> 00:30:00.809 align:start position:0%
with fragments on the outbound side you
 

00:30:00.809 --> 00:30:02.380 align:start position:0%
with fragments on the outbound side you
get<00:30:00.990><c> the</c><00:30:01.230><c> packets</c><00:30:01.559><c> before</c><00:30:01.860><c> they've</c><00:30:02.010><c> been</c>

00:30:02.380 --> 00:30:02.390 align:start position:0%
get the packets before they've been
 

00:30:02.390 --> 00:30:06.820 align:start position:0%
get the packets before they've been
fragmented<00:30:03.390><c> and</c><00:30:04.790><c> the</c><00:30:05.790><c> filter</c><00:30:06.059><c> is</c><00:30:06.270><c> also</c>

00:30:06.820 --> 00:30:06.830 align:start position:0%
fragmented and the filter is also
 

00:30:06.830 --> 00:30:08.960 align:start position:0%
fragmented and the filter is also
interface<00:30:07.830><c> independent</c><00:30:08.400><c> so</c><00:30:08.580><c> you</c><00:30:08.669><c> don't</c><00:30:08.820><c> have</c>

00:30:08.960 --> 00:30:08.970 align:start position:0%
interface independent so you don't have
 

00:30:08.970 --> 00:30:10.580 align:start position:0%
interface independent so you don't have
to<00:30:09.179><c> worry</c><00:30:09.360><c> about</c><00:30:09.540><c> attaching</c><00:30:10.080><c> a</c><00:30:10.320><c> different</c>

00:30:10.580 --> 00:30:10.590 align:start position:0%
to worry about attaching a different
 

00:30:10.590 --> 00:30:11.990 align:start position:0%
to worry about attaching a different
filter<00:30:10.799><c> to</c><00:30:11.010><c> every</c><00:30:11.250><c> single</c><00:30:11.400><c> interface</c><00:30:11.700><c> that</c>

00:30:11.990 --> 00:30:12.000 align:start position:0%
filter to every single interface that
 

00:30:12.000 --> 00:30:15.260 align:start position:0%
filter to every single interface that
comes<00:30:12.210><c> up</c><00:30:12.360><c> and</c><00:30:12.570><c> has</c><00:30:12.690><c> IP</c><00:30:12.870><c> attached</c><00:30:13.260><c> to</c><00:30:13.530><c> it</c><00:30:14.270><c> you</c>

00:30:15.260 --> 00:30:15.270 align:start position:0%
comes up and has IP attached to it you
 

00:30:15.270 --> 00:30:17.000 align:start position:0%
comes up and has IP attached to it you
also<00:30:15.419><c> get</c><00:30:15.570><c> an</c><00:30:15.660><c> opportunity</c><00:30:15.870><c> to</c><00:30:16.260><c> process</c><00:30:16.890><c> the</c>

00:30:17.000 --> 00:30:17.010 align:start position:0%
also get an opportunity to process the
 

00:30:17.010 --> 00:30:21.799 align:start position:0%
also get an opportunity to process the
packets<00:30:17.370><c> both</c><00:30:17.549><c> before</c><00:30:17.760><c> and</c><00:30:17.970><c> after</c><00:30:18.240><c> IPSec</c><00:30:20.809><c> the</c>

00:30:21.799 --> 00:30:21.809 align:start position:0%
packets both before and after IPSec the
 

00:30:21.809 --> 00:30:23.120 align:start position:0%
packets both before and after IPSec the
IP<00:30:21.960><c> filters</c><00:30:22.320><c> go</c><00:30:22.470><c> through</c><00:30:22.620><c> a</c><00:30:22.650><c> typical</c><00:30:22.799><c> life</c>

00:30:23.120 --> 00:30:23.130 align:start position:0%
IP filters go through a typical life
 

00:30:23.130 --> 00:30:25.250 align:start position:0%
IP filters go through a typical life
cycle<00:30:23.520><c> they're</c><00:30:23.790><c> attached</c><00:30:24.059><c> to</c><00:30:24.240><c> either</c><00:30:24.299><c> ipv4</c><00:30:24.900><c> or</c>

00:30:25.250 --> 00:30:25.260 align:start position:0%
cycle they're attached to either ipv4 or
 

00:30:25.260 --> 00:30:28.310 align:start position:0%
cycle they're attached to either ipv4 or
ipv6<00:30:25.440><c> and</c><00:30:26.150><c> then</c><00:30:27.150><c> they</c><00:30:27.630><c> filter</c><00:30:27.929><c> inbound</c><00:30:28.260><c> and</c>

00:30:28.310 --> 00:30:28.320 align:start position:0%
ipv6 and then they filter inbound and
 

00:30:28.320 --> 00:30:30.430 align:start position:0%
ipv6 and then they filter inbound and
outbound<00:30:28.380><c> data</c><00:30:28.830><c> and</c><00:30:29.040><c> then</c><00:30:29.429><c> they're</c><00:30:29.610><c> detached</c>

00:30:30.430 --> 00:30:30.440 align:start position:0%
outbound data and then they're detached
 

00:30:30.440 --> 00:30:33.289 align:start position:0%
outbound data and then they're detached
they're<00:30:31.440><c> documented</c><00:30:31.830><c> in</c><00:30:32.070><c> that</c><00:30:32.220><c> I</c><00:30:32.250><c> net</c><00:30:32.549><c> /</c><00:30:32.790><c> KPI</c>

00:30:33.289 --> 00:30:33.299 align:start position:0%
they're documented in that I net / KPI
 

00:30:33.299 --> 00:30:35.450 align:start position:0%
they're documented in that I net / KPI
underscore<00:30:33.840><c> IP</c><00:30:34.080><c> filter</c><00:30:34.470><c> H</c><00:30:34.740><c> in</c><00:30:35.010><c> the</c><00:30:35.190><c> kernel</c>

00:30:35.450 --> 00:30:35.460 align:start position:0%
underscore IP filter H in the kernel
 

00:30:35.460 --> 00:30:41.030 align:start position:0%
underscore IP filter H in the kernel
framework<00:30:39.049><c> the</c><00:30:40.049><c> IP</c><00:30:40.169><c> filters</c><00:30:40.590><c> are</c><00:30:40.770><c> attached</c>

00:30:41.030 --> 00:30:41.040 align:start position:0%
framework the IP filters are attached
 

00:30:41.040 --> 00:30:44.690 align:start position:0%
framework the IP filters are attached
using<00:30:41.429><c> ipf</c><00:30:42.419><c> add</c><00:30:42.630><c> before</c><00:30:42.960><c> an</c><00:30:43.410><c> IPF</c><00:30:43.770><c> add</c><00:30:43.980><c> v6</c><00:30:44.490><c> and</c>

00:30:44.690 --> 00:30:44.700 align:start position:0%
using ipf add before an IPF add v6 and
 

00:30:44.700 --> 00:30:46.640 align:start position:0%
using ipf add before an IPF add v6 and
they<00:30:45.270><c> both</c><00:30:45.419><c> use</c><00:30:45.600><c> the</c><00:30:45.630><c> same</c><00:30:45.780><c> structure</c><00:30:46.320><c> to</c>

00:30:46.640 --> 00:30:46.650 align:start position:0%
they both use the same structure to
 

00:30:46.650 --> 00:30:49.190 align:start position:0%
they both use the same structure to
define<00:30:46.950><c> a</c><00:30:47.450><c> input</c><00:30:48.450><c> and</c><00:30:48.630><c> output</c><00:30:48.960><c> filter</c>

00:30:49.190 --> 00:30:49.200 align:start position:0%
define a input and output filter
 

00:30:49.200 --> 00:30:51.680 align:start position:0%
define a input and output filter
function<00:30:49.940><c> calling</c><00:30:50.940><c> these</c><00:30:51.030><c> functions</c><00:30:51.419><c> returns</c>

00:30:51.680 --> 00:30:51.690 align:start position:0%
function calling these functions returns
 

00:30:51.690 --> 00:30:53.180 align:start position:0%
function calling these functions returns
a<00:30:51.809><c> filter</c><00:30:52.080><c> rep</c><00:30:52.260><c> that</c><00:30:52.440><c> you</c><00:30:52.530><c> use</c><00:30:52.740><c> for</c><00:30:53.010><c> later</c>

00:30:53.180 --> 00:30:53.190 align:start position:0%
a filter rep that you use for later
 

00:30:53.190 --> 00:30:57.770 align:start position:0%
a filter rep that you use for later
detaching<00:30:53.790><c> the</c><00:30:53.880><c> filter</c><00:30:56.059><c> the</c><00:30:57.059><c> IPF</c><00:30:57.419><c> input</c>

00:30:57.770 --> 00:30:57.780 align:start position:0%
detaching the filter the IPF input
 

00:30:57.780 --> 00:31:00.230 align:start position:0%
detaching the filter the IPF input
function<00:30:57.960><c> is</c><00:30:58.380><c> called</c><00:30:58.890><c> for</c><00:30:59.190><c> input</c><00:30:59.549><c> for</c><00:31:00.000><c> inbound</c>

00:31:00.230 --> 00:31:00.240 align:start position:0%
function is called for input for inbound
 

00:31:00.240 --> 00:31:02.930 align:start position:0%
function is called for input for inbound
packets<00:31:00.750><c> and</c><00:31:00.980><c> this</c><00:31:01.980><c> is</c><00:31:02.100><c> called</c><00:31:02.340><c> after</c><00:31:02.910><c> the</c>

00:31:02.930 --> 00:31:02.940 align:start position:0%
packets and this is called after the
 

00:31:02.940 --> 00:31:04.640 align:start position:0%
packets and this is called after the
pack<00:31:03.150><c> has</c><00:31:03.299><c> been</c><00:31:03.390><c> reassembled</c><00:31:03.570><c> and</c><00:31:04.049><c> both</c>

00:31:04.640 --> 00:31:04.650 align:start position:0%
pack has been reassembled and both
 

00:31:04.650 --> 00:31:07.190 align:start position:0%
pack has been reassembled and both
before<00:31:04.860><c> and</c><00:31:05.070><c> after</c><00:31:05.370><c> IPSec</c><00:31:06.000><c> processing</c><00:31:06.570><c> the</c>

00:31:07.190 --> 00:31:07.200 align:start position:0%
before and after IPSec processing the
 

00:31:07.200 --> 00:31:09.350 align:start position:0%
before and after IPSec processing the
output<00:31:07.710><c> function</c><00:31:08.040><c> is</c><00:31:08.159><c> just</c><00:31:08.940><c> the</c><00:31:09.000><c> same</c><00:31:09.179><c> but</c>

00:31:09.350 --> 00:31:09.360 align:start position:0%
output function is just the same but
 

00:31:09.360 --> 00:31:10.499 align:start position:0%
output function is just the same but
it's<00:31:09.450><c> called</c>

00:31:10.499 --> 00:31:10.509 align:start position:0%
it's called
 

00:31:10.509 --> 00:31:15.149 align:start position:0%
it's called
excuse<00:31:11.169><c> me</c><00:31:12.329><c> called</c><00:31:13.589><c> before</c><00:31:14.589><c> we</c><00:31:14.709><c> fragments</c><00:31:15.129><c> a</c>

00:31:15.149 --> 00:31:15.159 align:start position:0%
excuse me called before we fragments a
 

00:31:15.159 --> 00:31:17.069 align:start position:0%
excuse me called before we fragments a
packet<00:31:15.519><c> but</c><00:31:15.999><c> also</c><00:31:16.149><c> before</c><00:31:16.599><c> and</c><00:31:16.719><c> after</c><00:31:16.959><c> we</c>

00:31:17.069 --> 00:31:17.079 align:start position:0%
packet but also before and after we
 

00:31:17.079 --> 00:31:20.069 align:start position:0%
packet but also before and after we
doing<00:31:17.859><c> the</c><00:31:17.919><c> IPSec</c><00:31:18.309><c> processing</c><00:31:18.959><c> so</c><00:31:19.959><c> the</c>

00:31:20.069 --> 00:31:20.079 align:start position:0%
doing the IPSec processing so the
 

00:31:20.079 --> 00:31:21.419 align:start position:0%
doing the IPSec processing so the
function<00:31:20.199><c> gets</c><00:31:20.529><c> called</c><00:31:20.589><c> and</c><00:31:20.949><c> it's</c><00:31:21.070><c> passed</c><00:31:21.249><c> in</c>

00:31:21.419 --> 00:31:21.429 align:start position:0%
function gets called and it's passed in
 

00:31:21.429 --> 00:31:24.169 align:start position:0%
function gets called and it's passed in
the<00:31:21.519><c> protocol</c><00:31:21.999><c> and</c><00:31:22.239><c> the</c><00:31:22.269><c> protocol</c><00:31:23.169><c> is</c>

00:31:24.169 --> 00:31:24.179 align:start position:0%
the protocol and the protocol is
 

00:31:24.179 --> 00:31:26.099 align:start position:0%
the protocol and the protocol is
specifies<00:31:25.179><c> the</c><00:31:25.209><c> protocol</c><00:31:25.899><c> that</c><00:31:25.989><c> we're</c>

00:31:26.099 --> 00:31:26.109 align:start position:0%
specifies the protocol that we're
 

00:31:26.109 --> 00:31:28.199 align:start position:0%
specifies the protocol that we're
currently<00:31:26.169><c> processing</c><00:31:26.559><c> at</c><00:31:27.009><c> and</c><00:31:27.399><c> you</c><00:31:27.879><c> also</c><00:31:28.029><c> get</c>

00:31:28.199 --> 00:31:28.209 align:start position:0%
currently processing at and you also get
 

00:31:28.209 --> 00:31:29.729 align:start position:0%
currently processing at and you also get
an<00:31:28.359><c> offset</c><00:31:28.779><c> from</c><00:31:29.019><c> the</c><00:31:29.169><c> beginning</c><00:31:29.320><c> of</c><00:31:29.559><c> the</c>

00:31:29.729 --> 00:31:29.739 align:start position:0%
an offset from the beginning of the
 

00:31:29.739 --> 00:31:32.430 align:start position:0%
an offset from the beginning of the
packet<00:31:30.429><c> to</c><00:31:31.059><c> that</c><00:31:31.209><c> protocol</c><00:31:31.690><c> so</c><00:31:32.079><c> the</c><00:31:32.169><c> beginning</c>

00:31:32.430 --> 00:31:32.440 align:start position:0%
packet to that protocol so the beginning
 

00:31:32.440 --> 00:31:33.899 align:start position:0%
packet to that protocol so the beginning
of<00:31:32.529><c> the</c><00:31:32.619><c> n</c><00:31:32.739><c> buff</c><00:31:32.889><c> chain</c><00:31:33.099><c> will</c><00:31:33.219><c> always</c><00:31:33.519><c> start</c><00:31:33.699><c> at</c>

00:31:33.899 --> 00:31:33.909 align:start position:0%
of the n buff chain will always start at
 

00:31:33.909 --> 00:31:37.109 align:start position:0%
of the n buff chain will always start at
the<00:31:33.999><c> IP</c><00:31:34.149><c> header</c><00:31:34.329><c> or</c><00:31:35.229><c> ipv6</c><00:31:35.469><c> header</c><00:31:36.009><c> and</c><00:31:36.339><c> then</c>

00:31:37.109 --> 00:31:37.119 align:start position:0%
the IP header or ipv6 header and then
 

00:31:37.119 --> 00:31:39.599 align:start position:0%
the IP header or ipv6 header and then
for<00:31:37.869><c> an</c><00:31:38.229><c> IPSec</c><00:31:38.649><c> process</c><00:31:39.039><c> you'll</c><00:31:39.219><c> get</c><00:31:39.369><c> called</c>

00:31:39.599 --> 00:31:39.609 align:start position:0%
for an IPSec process you'll get called
 

00:31:39.609 --> 00:31:41.759 align:start position:0%
for an IPSec process you'll get called
for<00:31:39.849><c> an</c><00:31:40.059><c> IPSec</c><00:31:40.479><c> packet</c><00:31:41.049><c> you</c><00:31:41.229><c> might</c><00:31:41.409><c> get</c><00:31:41.559><c> called</c>

00:31:41.759 --> 00:31:41.769 align:start position:0%
for an IPSec packet you might get called
 

00:31:41.769 --> 00:31:44.819 align:start position:0%
for an IPSec packet you might get called
one<00:31:42.009><c> with</c><00:31:42.969><c> the</c><00:31:43.179><c> ESP</c><00:31:43.749><c> header</c><00:31:43.959><c> with</c><00:31:44.379><c> the</c><00:31:44.499><c> offset</c>

00:31:44.819 --> 00:31:44.829 align:start position:0%
one with the ESP header with the offset
 

00:31:44.829 --> 00:31:47.039 align:start position:0%
one with the ESP header with the offset
from<00:31:44.949><c> the</c><00:31:45.069><c> IP</c><00:31:45.249><c> packet</c><00:31:45.789><c> to</c><00:31:46.029><c> the</c><00:31:46.059><c> ESP</c><00:31:46.599><c> header</c><00:31:46.809><c> and</c>

00:31:47.039 --> 00:31:47.049 align:start position:0%
from the IP packet to the ESP header and
 

00:31:47.049 --> 00:31:49.559 align:start position:0%
from the IP packet to the ESP header and
once<00:31:47.709><c> IPSec</c><00:31:48.339><c> is</c><00:31:48.519><c> decrypted</c><00:31:49.119><c> the</c><00:31:49.149><c> packet</c>

00:31:49.559 --> 00:31:49.569 align:start position:0%
once IPSec is decrypted the packet
 

00:31:49.569 --> 00:31:52.949 align:start position:0%
once IPSec is decrypted the packet
you'll<00:31:50.019><c> get</c><00:31:50.169><c> called</c><00:31:50.409><c> again</c><00:31:50.709><c> with</c><00:31:51.519><c> beyond</c><00:31:52.299><c> with</c>

00:31:52.949 --> 00:31:52.959 align:start position:0%
you'll get called again with beyond with
 

00:31:52.959 --> 00:31:56.609 align:start position:0%
you'll get called again with beyond with
TCP<00:31:53.559><c> or</c><00:31:53.699><c> ICMP</c><00:31:54.699><c> and</c><00:31:54.969><c> the</c><00:31:55.779><c> offset</c><00:31:56.169><c> from</c><00:31:56.319><c> the</c><00:31:56.409><c> IP</c>

00:31:56.609 --> 00:31:56.619 align:start position:0%
TCP or ICMP and the offset from the IP
 

00:31:56.619 --> 00:32:01.680 align:start position:0%
TCP or ICMP and the offset from the IP
header<00:31:56.769><c> to</c><00:31:57.219><c> the</c><00:31:57.329><c> ICMP</c><00:31:58.329><c> header</c><00:32:00.359><c> you</c><00:32:01.359><c> can</c><00:32:01.509><c> use</c>

00:32:01.680 --> 00:32:01.690 align:start position:0%
header to the ICMP header you can use
 

00:32:01.690 --> 00:32:04.559 align:start position:0%
header to the ICMP header you can use
IPS<00:32:02.229><c> inject</c><00:32:02.619><c> input</c><00:32:03.039><c> and</c><00:32:03.249><c> ipf</c><00:32:03.729><c> inject</c><00:32:04.119><c> outputs</c>

00:32:04.559 --> 00:32:04.569 align:start position:0%
IPS inject input and ipf inject outputs
 

00:32:04.569 --> 00:32:08.749 align:start position:0%
IPS inject input and ipf inject outputs
to<00:32:04.899><c> inject</c><00:32:05.199><c> data</c><00:32:05.549><c> with</c><00:32:06.549><c> ipf</c><00:32:06.969><c> inject</c><00:32:07.299><c> input</c><00:32:07.719><c> it</c>

00:32:08.749 --> 00:32:08.759 align:start position:0%
to inject data with ipf inject input it
 

00:32:08.759 --> 00:32:11.609 align:start position:0%
to inject data with ipf inject input it
injects<00:32:09.759><c> the</c><00:32:09.940><c> data</c><00:32:10.119><c> right</c><00:32:10.929><c> after</c><00:32:11.199><c> the</c><00:32:11.289><c> packets</c>

00:32:11.609 --> 00:32:11.619 align:start position:0%
injects the data right after the packets
 

00:32:11.619 --> 00:32:14.369 align:start position:0%
injects the data right after the packets
have<00:32:11.709><c> been</c><00:32:11.859><c> reassembled</c><00:32:12.279><c> in</c><00:32:12.699><c> IP</c><00:32:12.849><c> input</c><00:32:13.329><c> if</c><00:32:14.259><c> you</c>

00:32:14.369 --> 00:32:14.379 align:start position:0%
have been reassembled in IP input if you
 

00:32:14.379 --> 00:32:15.930 align:start position:0%
have been reassembled in IP input if you
pass<00:32:14.529><c> a</c><00:32:14.589><c> filter</c><00:32:15.009><c> ref</c><00:32:15.190><c> it</c><00:32:15.399><c> will</c><00:32:15.549><c> prevent</c><00:32:15.759><c> this</c>

00:32:15.930 --> 00:32:15.940 align:start position:0%
pass a filter ref it will prevent this
 

00:32:15.940 --> 00:32:17.399 align:start position:0%
pass a filter ref it will prevent this
packet<00:32:16.299><c> from</c><00:32:16.389><c> getting</c><00:32:16.659><c> processed</c><00:32:16.869><c> again</c><00:32:17.289><c> by</c>

00:32:17.399 --> 00:32:17.409 align:start position:0%
packet from getting processed again by
 

00:32:17.409 --> 00:32:19.229 align:start position:0%
packet from getting processed again by
both<00:32:17.589><c> your</c><00:32:17.769><c> filter</c><00:32:18.099><c> and</c><00:32:18.369><c> any</c><00:32:18.519><c> filters</c><00:32:18.879><c> before</c>

00:32:19.229 --> 00:32:19.239 align:start position:0%
both your filter and any filters before
 

00:32:19.239 --> 00:32:21.119 align:start position:0%
both your filter and any filters before
you<00:32:19.389><c> if</c><00:32:19.629><c> you've</c><00:32:20.109><c> modified</c><00:32:20.440><c> the</c><00:32:20.709><c> packet</c><00:32:21.039><c> you</c>

00:32:21.119 --> 00:32:21.129 align:start position:0%
you if you've modified the packet you
 

00:32:21.129 --> 00:32:23.009 align:start position:0%
you if you've modified the packet you
shouldn't<00:32:21.459><c> pass</c><00:32:21.729><c> a</c><00:32:21.759><c> filter</c><00:32:22.209><c> rest</c><00:32:22.389><c> because</c>

00:32:23.009 --> 00:32:23.019 align:start position:0%
shouldn't pass a filter rest because
 

00:32:23.019 --> 00:32:24.779 align:start position:0%
shouldn't pass a filter rest because
that<00:32:23.109><c> will</c><00:32:23.169><c> prevent</c><00:32:23.409><c> any</c><00:32:23.619><c> of</c><00:32:23.859><c> filters</c><00:32:24.699><c> from</c>

00:32:24.779 --> 00:32:24.789 align:start position:0%
that will prevent any of filters from
 

00:32:24.789 --> 00:32:25.889 align:start position:0%
that will prevent any of filters from
having<00:32:25.029><c> a</c><00:32:25.089><c> chance</c><00:32:25.299><c> to</c><00:32:25.419><c> look</c><00:32:25.539><c> at</c><00:32:25.659><c> the</c><00:32:25.779><c> new</c>

00:32:25.889 --> 00:32:25.899 align:start position:0%
having a chance to look at the new
 

00:32:25.899 --> 00:32:32.549 align:start position:0%
having a chance to look at the new
modified<00:32:26.349><c> packet</c><00:32:29.429><c> ipf</c><00:32:30.429><c> inject</c><00:32:30.759><c> output</c><00:32:31.559><c> inject</c>

00:32:32.549 --> 00:32:32.559 align:start position:0%
modified packet ipf inject output inject
 

00:32:32.559 --> 00:32:34.829 align:start position:0%
modified packet ipf inject output inject
the<00:32:32.829><c> data</c><00:32:33.159><c> right</c><00:32:33.399><c> into</c><00:32:33.819><c> the</c><00:32:34.239><c> IP</c><00:32:34.419><c> output</c>

00:32:34.829 --> 00:32:34.839 align:start position:0%
the data right into the IP output
 

00:32:34.839 --> 00:32:37.139 align:start position:0%
the data right into the IP output
function<00:32:35.229><c> and</c><00:32:35.440><c> again</c><00:32:36.339><c> you</c><00:32:36.429><c> can</c><00:32:36.459><c> pass</c><00:32:36.729><c> a</c><00:32:36.759><c> filter</c>

00:32:37.139 --> 00:32:37.149 align:start position:0%
function and again you can pass a filter
 

00:32:37.149 --> 00:32:38.909 align:start position:0%
function and again you can pass a filter
ref<00:32:37.299><c> to</c><00:32:37.749><c> avoid</c><00:32:37.959><c> processing</c><00:32:38.529><c> the</c><00:32:38.619><c> packets</c>

00:32:38.909 --> 00:32:38.919 align:start position:0%
ref to avoid processing the packets
 

00:32:38.919 --> 00:32:43.439 align:start position:0%
ref to avoid processing the packets
twice<00:32:40.679><c> to</c><00:32:41.679><c> detach</c><00:32:41.979><c> your</c><00:32:42.190><c> filter</c><00:32:42.489><c> you</c><00:32:42.759><c> call</c><00:32:43.059><c> ipf</c>

00:32:43.439 --> 00:32:43.449 align:start position:0%
twice to detach your filter you call ipf
 

00:32:43.449 --> 00:32:46.279 align:start position:0%
twice to detach your filter you call ipf
remove<00:32:43.779><c> this</c><00:32:44.619><c> detach</c><00:32:45.009><c> is</c><00:32:45.249><c> asynchronous</c><00:32:45.579><c> and</c>

00:32:46.279 --> 00:32:46.289 align:start position:0%
remove this detach is asynchronous and
 

00:32:46.289 --> 00:32:49.019 align:start position:0%
remove this detach is asynchronous and
your<00:32:47.289><c> ipf</c><00:32:47.709><c> detach</c><00:32:48.009><c> callback</c><00:32:48.489><c> will</c><00:32:48.669><c> get</c><00:32:48.789><c> called</c>

00:32:49.019 --> 00:32:49.029 align:start position:0%
your ipf detach callback will get called
 

00:32:49.029 --> 00:32:51.119 align:start position:0%
your ipf detach callback will get called
to<00:32:49.119><c> notify</c><00:32:49.569><c> you</c><00:32:50.049><c> when</c><00:32:50.349><c> your</c><00:32:50.469><c> filter</c><00:32:50.739><c> has</c><00:32:50.889><c> been</c>

00:32:51.119 --> 00:32:51.129 align:start position:0%
to notify you when your filter has been
 

00:32:51.129 --> 00:32:56.609 align:start position:0%
to notify you when your filter has been
detached<00:32:51.399><c> and</c><00:32:51.759><c> it's</c><00:32:51.909><c> safe</c><00:32:52.089><c> to</c><00:32:52.239><c> unload</c><00:32:55.619><c> there</c>

00:32:56.609 --> 00:32:56.619 align:start position:0%
detached and it's safe to unload there
 

00:32:56.619 --> 00:32:57.989 align:start position:0%
detached and it's safe to unload there
are<00:32:56.739><c> some</c><00:32:56.859><c> considerations</c><00:32:57.159><c> with</c><00:32:57.639><c> locking</c>

00:32:57.989 --> 00:32:57.999 align:start position:0%
are some considerations with locking
 

00:32:57.999 --> 00:33:01.229 align:start position:0%
are some considerations with locking
again<00:32:58.919><c> access</c><00:32:59.919><c> to</c><00:33:00.129><c> your</c><00:33:00.309><c> IP</c><00:33:00.609><c> filter</c><00:33:00.969><c> is</c><00:33:01.059><c> not</c>

00:33:01.229 --> 00:33:01.239 align:start position:0%
again access to your IP filter is not
 

00:33:01.239 --> 00:33:04.799 align:start position:0%
again access to your IP filter is not
serialized<00:33:01.839><c> so</c><00:33:02.709><c> you</c><00:33:03.219><c> need</c><00:33:03.399><c> to</c><00:33:03.609><c> be</c><00:33:04.299><c> sure</c><00:33:04.509><c> and</c>

00:33:04.799 --> 00:33:04.809 align:start position:0%
serialized so you need to be sure and
 

00:33:04.809 --> 00:33:07.379 align:start position:0%
serialized so you need to be sure and
protect<00:33:05.679><c> any</c><00:33:05.829><c> data</c><00:33:06.039><c> structures</c><00:33:06.489><c> that</c><00:33:07.239><c> you've</c>

00:33:07.379 --> 00:33:07.389 align:start position:0%
protect any data structures that you've
 

00:33:07.389 --> 00:33:10.499 align:start position:0%
protect any data structures that you've
got<00:33:07.739><c> in</c><00:33:08.739><c> addition</c><00:33:09.069><c> if</c><00:33:09.489><c> you're</c><00:33:10.029><c> going</c><00:33:10.149><c> to</c><00:33:10.239><c> call</c>

00:33:10.499 --> 00:33:10.509 align:start position:0%
got in addition if you're going to call
 

00:33:10.509 --> 00:33:12.899 align:start position:0%
got in addition if you're going to call
in<00:33:10.809><c> a</c><00:33:10.899><c> call</c><00:33:11.559><c> to</c><00:33:11.589><c> inject</c><00:33:11.979><c> data</c><00:33:12.279><c> you</c><00:33:12.639><c> need</c><00:33:12.819><c> to</c>

00:33:12.899 --> 00:33:12.909 align:start position:0%
in a call to inject data you need to
 

00:33:12.909 --> 00:33:14.279 align:start position:0%
in a call to inject data you need to
drop<00:33:13.059><c> the</c><00:33:13.239><c> locks</c><00:33:13.419><c> before</c><00:33:13.659><c> performing</c><00:33:14.259><c> the</c>

00:33:14.279 --> 00:33:14.289 align:start position:0%
drop the locks before performing the
 

00:33:14.289 --> 00:33:15.569 align:start position:0%
drop the locks before performing the
inject<00:33:14.709><c> because</c><00:33:14.949><c> there's</c><00:33:15.099><c> a</c><00:33:15.190><c> chance</c><00:33:15.369><c> that</c><00:33:15.429><c> you</c>

00:33:15.569 --> 00:33:15.579 align:start position:0%
inject because there's a chance that you
 

00:33:15.579 --> 00:33:17.489 align:start position:0%
inject because there's a chance that you
might<00:33:15.669><c> get</c><00:33:15.849><c> called</c><00:33:16.029><c> reentrant</c><00:33:16.419><c> lee</c><00:33:16.599><c> and</c><00:33:16.779><c> if</c>

00:33:17.489 --> 00:33:17.499 align:start position:0%
might get called reentrant lee and if
 

00:33:17.499 --> 00:33:18.899 align:start position:0%
might get called reentrant lee and if
you<00:33:17.589><c> try</c><00:33:17.739><c> and</c><00:33:17.829><c> take</c><00:33:17.949><c> your</c><00:33:18.069><c> lock</c><00:33:18.190><c> again</c><00:33:18.339><c> then</c>

00:33:18.899 --> 00:33:18.909 align:start position:0%
you try and take your lock again then
 

00:33:18.909 --> 00:33:21.329 align:start position:0%
you try and take your lock again then
you<00:33:19.179><c> end</c><00:33:19.479><c> up</c><00:33:19.539><c> with</c><00:33:19.629><c> a</c><00:33:19.690><c> deadlock</c><00:33:20.159><c> this</c><00:33:21.159><c> is</c>

00:33:21.329 --> 00:33:21.339 align:start position:0%
you end up with a deadlock this is
 

00:33:21.339 --> 00:33:24.150 align:start position:0%
you end up with a deadlock this is
broken<00:33:21.789><c> in</c><00:33:22.059><c> the</c><00:33:22.419><c> WWDC</c><00:33:22.959><c> build</c><00:33:23.349><c> you'll</c><00:33:23.709><c> need</c><00:33:23.829><c> to</c>

00:33:24.150 --> 00:33:24.160 align:start position:0%
broken in the WWDC build you'll need to
 

00:33:24.160 --> 00:33:27.900 align:start position:0%
broken in the WWDC build you'll need to
is<00:33:24.220><c> the</c><00:33:24.960><c> colonel</c><00:33:25.960><c> that</c><00:33:26.440><c> comes</c><00:33:26.920><c> as</c><00:33:27.190><c> part</c><00:33:27.640><c> of</c><00:33:27.760><c> the</c>

00:33:27.900 --> 00:33:27.910 align:start position:0%
is the colonel that comes as part of the
 

00:33:27.910 --> 00:33:37.800 align:start position:0%
is the colonel that comes as part of the
session<00:33:28.950><c> 103</c><00:33:31.470><c> supplemental</c><00:33:32.790><c> stuff</c><00:33:36.810><c> moving</c>

00:33:37.800 --> 00:33:37.810 align:start position:0%
session 103 supplemental stuff moving
 

00:33:37.810 --> 00:33:39.150 align:start position:0%
session 103 supplemental stuff moving
down<00:33:37.960><c> to</c><00:33:38.050><c> the</c><00:33:38.110><c> bottom</c><00:33:38.230><c> of</c><00:33:38.380><c> the</c><00:33:38.470><c> stack</c><00:33:38.680><c> we</c><00:33:39.010><c> have</c>

00:33:39.150 --> 00:33:39.160 align:start position:0%
down to the bottom of the stack we have
 

00:33:39.160 --> 00:33:41.700 align:start position:0%
down to the bottom of the stack we have
the<00:33:39.280><c> interface</c><00:33:39.610><c> filters</c><00:33:40.410><c> the</c><00:33:41.410><c> interface</c>

00:33:41.700 --> 00:33:41.710 align:start position:0%
the interface filters the interface
 

00:33:41.710 --> 00:33:43.290 align:start position:0%
the interface filters the interface
filters<00:33:42.100><c> let</c><00:33:42.280><c> you</c><00:33:42.370><c> filter</c><00:33:42.610><c> inbound</c><00:33:43.090><c> and</c>

00:33:43.290 --> 00:33:43.300 align:start position:0%
filters let you filter inbound and
 

00:33:43.300 --> 00:33:45.840 align:start position:0%
filters let you filter inbound and
outbound<00:33:43.450><c> packet</c><00:33:44.170><c> at</c><00:33:44.350><c> the</c><00:33:44.980><c> interface</c><00:33:45.580><c> layer</c>

00:33:45.840 --> 00:33:45.850 align:start position:0%
outbound packet at the interface layer
 

00:33:45.850 --> 00:33:48.500 align:start position:0%
outbound packet at the interface layer
you<00:33:46.690><c> can</c><00:33:46.840><c> also</c><00:33:46.960><c> filter</c><00:33:47.290><c> the</c><00:33:47.500><c> I</c><00:33:47.530><c> octal</c>

00:33:48.500 --> 00:33:48.510 align:start position:0%
you can also filter the I octal
 

00:33:48.510 --> 00:33:50.880 align:start position:0%
you can also filter the I octal
interface<00:33:49.510><c> filters</c><00:33:49.870><c> are</c><00:33:50.020><c> commonly</c><00:33:50.320><c> used</c><00:33:50.590><c> for</c>

00:33:50.880 --> 00:33:50.890 align:start position:0%
interface filters are commonly used for
 

00:33:50.890 --> 00:33:53.370 align:start position:0%
interface filters are commonly used for
a<00:33:50.920><c> packet</c><00:33:51.490><c> latest</c><00:33:51.730><c> firewall</c><00:33:51.880><c> or</c><00:33:52.690><c> something</c>

00:33:53.370 --> 00:33:53.380 align:start position:0%
a packet latest firewall or something
 

00:33:53.380 --> 00:33:57.270 align:start position:0%
a packet latest firewall or something
like<00:33:53.500><c> a</c><00:33:53.530><c> virtual</c><00:33:53.770><c> packet</c><00:33:54.280><c> switch</c><00:33:56.280><c> the</c>

00:33:57.270 --> 00:33:57.280 align:start position:0%
like a virtual packet switch the
 

00:33:57.280 --> 00:33:59.280 align:start position:0%
like a virtual packet switch the
interface<00:33:57.790><c> filters</c><00:33:58.180><c> are</c><00:33:58.390><c> all</c><00:33:58.570><c> also</c><00:33:59.050><c> the</c>

00:33:59.280 --> 00:33:59.290 align:start position:0%
interface filters are all also the
 

00:33:59.290 --> 00:34:01.470 align:start position:0%
interface filters are all also the
replacements<00:34:00.010><c> for</c><00:34:00.160><c> the</c><00:34:00.220><c> old</c><00:34:00.640><c> protocol</c><00:34:01.150><c> filter</c>

00:34:01.470 --> 00:34:01.480 align:start position:0%
replacements for the old protocol filter
 

00:34:01.480 --> 00:34:05.190 align:start position:0%
replacements for the old protocol filter
we<00:34:01.990><c> no</c><00:34:02.110><c> longer</c><00:34:02.140><c> have</c><00:34:02.530><c> protocol</c><00:34:02.950><c> filters</c><00:34:04.200><c> the</c>

00:34:05.190 --> 00:34:05.200 align:start position:0%
we no longer have protocol filters the
 

00:34:05.200 --> 00:34:07.110 align:start position:0%
we no longer have protocol filters the
interface<00:34:05.530><c> filters</c><00:34:05.890><c> are</c><00:34:06.040><c> documented</c><00:34:06.430><c> in</c><00:34:06.760><c> net</c>

00:34:07.110 --> 00:34:07.120 align:start position:0%
interface filters are documented in net
 

00:34:07.120 --> 00:34:09.750 align:start position:0%
interface filters are documented in net
/<00:34:07.300><c> KPI</c><00:34:07.960><c> underscore</c><00:34:08.500><c> interface</c><00:34:08.860><c> filtered</c><00:34:09.250><c> H</c><00:34:09.490><c> in</c>

00:34:09.750 --> 00:34:09.760 align:start position:0%
/ KPI underscore interface filtered H in
 

00:34:09.760 --> 00:34:14.130 align:start position:0%
/ KPI underscore interface filtered H in
the<00:34:09.820><c> kernel</c><00:34:10.450><c> framework</c><00:34:12.690><c> to</c><00:34:13.690><c> attach</c><00:34:13.929><c> an</c>

00:34:14.130 --> 00:34:14.140 align:start position:0%
the kernel framework to attach an
 

00:34:14.140 --> 00:34:16.770 align:start position:0%
the kernel framework to attach an
interface<00:34:14.470><c> filter</c><00:34:14.890><c> you</c><00:34:15.400><c> fill</c><00:34:15.640><c> out</c><00:34:15.730><c> an</c><00:34:15.970><c> iff</c>

00:34:16.770 --> 00:34:16.780 align:start position:0%
interface filter you fill out an iff
 

00:34:16.780 --> 00:34:19.919 align:start position:0%
interface filter you fill out an iff
filter<00:34:17.290><c> structure</c><00:34:17.770><c> and</c><00:34:17.950><c> then</c><00:34:18.640><c> you</c><00:34:18.730><c> call</c><00:34:18.910><c> I</c><00:34:19.210><c> FLT</c>

00:34:19.919 --> 00:34:19.929 align:start position:0%
filter structure and then you call I FLT
 

00:34:19.929 --> 00:34:22.830 align:start position:0%
filter structure and then you call I FLT
attached<00:34:21.150><c> this</c><00:34:22.150><c> gives</c><00:34:22.510><c> you</c><00:34:22.570><c> an</c><00:34:22.600><c> opportunity</c>

00:34:22.830 --> 00:34:22.840 align:start position:0%
attached this gives you an opportunity
 

00:34:22.840 --> 00:34:26.220 align:start position:0%
attached this gives you an opportunity
to<00:34:23.169><c> specify</c><00:34:23.679><c> a</c><00:34:23.710><c> protocol</c><00:34:24.810><c> it's</c><00:34:25.810><c> important</c><00:34:26.169><c> to</c>

00:34:26.220 --> 00:34:26.230 align:start position:0%
to specify a protocol it's important to
 

00:34:26.230 --> 00:34:28.880 align:start position:0%
to specify a protocol it's important to
note<00:34:26.350><c> that</c><00:34:26.380><c> the</c><00:34:26.590><c> protocol</c><00:34:27.010><c> doesn't</c><00:34:27.840><c> specify</c>

00:34:28.880 --> 00:34:28.890 align:start position:0%
note that the protocol doesn't specify
 

00:34:28.890 --> 00:34:31.710 align:start position:0%
note that the protocol doesn't specify
you<00:34:29.890><c> you</c><00:34:30.460><c> aren't</c><00:34:30.640><c> attached</c><00:34:30.910><c> to</c><00:34:31.179><c> that</c><00:34:31.300><c> protocol</c>

00:34:31.710 --> 00:34:31.720 align:start position:0%
you you aren't attached to that protocol
 

00:34:31.720 --> 00:34:34.200 align:start position:0%
you you aren't attached to that protocol
attachment<00:34:32.200><c> with</c><00:34:33.070><c> the</c><00:34:33.100><c> old</c><00:34:33.340><c> protocol</c><00:34:33.820><c> filters</c>

00:34:34.200 --> 00:34:34.210 align:start position:0%
attachment with the old protocol filters
 

00:34:34.210 --> 00:34:38.640 align:start position:0%
attachment with the old protocol filters
if<00:34:34.720><c> you</c><00:34:34.810><c> want</c><00:34:34.990><c> to</c><00:34:35.110><c> attach</c><00:34:35.380><c> to</c><00:34:35.830><c> IP</c><00:34:36.280><c> /</c><00:34:36.880><c> am0</c><00:34:37.750><c> you</c>

00:34:38.640 --> 00:34:38.650 align:start position:0%
if you want to attach to IP / am0 you
 

00:34:38.650 --> 00:34:40.020 align:start position:0%
if you want to attach to IP / am0 you
could<00:34:38.770><c> only</c><00:34:38.919><c> do</c><00:34:39.130><c> that</c><00:34:39.160><c> when</c><00:34:39.490><c> i</c><00:34:39.550><c> pea</c><00:34:39.669><c> was</c>

00:34:40.020 --> 00:34:40.030 align:start position:0%
could only do that when i pea was
 

00:34:40.030 --> 00:34:42.720 align:start position:0%
could only do that when i pea was
attached<00:34:40.360><c> to</c><00:34:40.570><c> en</c><00:34:41.169><c> 0</c><00:34:41.440><c> with</c><00:34:42.280><c> the</c><00:34:42.400><c> new</c><00:34:42.520><c> interface</c>

00:34:42.720 --> 00:34:42.730 align:start position:0%
attached to en 0 with the new interface
 

00:34:42.730 --> 00:34:45.480 align:start position:0%
attached to en 0 with the new interface
filters<00:34:43.270><c> you</c><00:34:43.570><c> can</c><00:34:43.600><c> specify</c><00:34:44.130><c> that</c><00:34:45.130><c> you</c><00:34:45.190><c> want</c><00:34:45.280><c> to</c>

00:34:45.480 --> 00:34:45.490 align:start position:0%
filters you can specify that you want to
 

00:34:45.490 --> 00:34:47.700 align:start position:0%
filters you can specify that you want to
get<00:34:45.580><c> IP</c><00:34:45.730><c> packets</c><00:34:46.270><c> and</c><00:34:46.390><c> you</c><00:34:46.840><c> can</c><00:34:46.960><c> attach</c><00:34:47.230><c> the</c><00:34:47.470><c> en</c>

00:34:47.700 --> 00:34:47.710 align:start position:0%
get IP packets and you can attach the en
 

00:34:47.710 --> 00:34:50.390 align:start position:0%
get IP packets and you can attach the en
0<00:34:47.950><c> even</c><00:34:48.400><c> when</c><00:34:48.520><c> i</c><00:34:48.550><c> pea</c><00:34:48.669><c> isn't</c><00:34:49.179><c> attached</c><00:34:49.510><c> and</c>

00:34:50.390 --> 00:34:50.400 align:start position:0%
0 even when i pea isn't attached and
 

00:34:50.400 --> 00:34:53.159 align:start position:0%
0 even when i pea isn't attached and
your<00:34:51.400><c> filter</c><00:34:51.940><c> will</c><00:34:52.090><c> remain</c><00:34:52.330><c> attached</c><00:34:52.690><c> until</c>

00:34:53.159 --> 00:34:53.169 align:start position:0%
your filter will remain attached until
 

00:34:53.169 --> 00:34:54.540 align:start position:0%
your filter will remain attached until
the<00:34:53.260><c> interface</c><00:34:53.590><c> goes</c><00:34:53.770><c> away</c><00:34:53.919><c> or</c><00:34:54.250><c> until</c><00:34:54.460><c> you</c>

00:34:54.540 --> 00:34:54.550 align:start position:0%
the interface goes away or until you
 

00:34:54.550 --> 00:34:57.300 align:start position:0%
the interface goes away or until you
detach<00:34:54.880><c> it</c><00:34:55.530><c> you</c><00:34:56.530><c> just</c><00:34:56.770><c> won't</c><00:34:56.890><c> receive</c><00:34:57.220><c> any</c>

00:34:57.300 --> 00:34:57.310 align:start position:0%
detach it you just won't receive any
 

00:34:57.310 --> 00:35:00.320 align:start position:0%
detach it you just won't receive any
packets<00:34:57.790><c> unless</c><00:34:58.000><c> I</c><00:34:58.180><c> p</c><00:34:58.240><c> is</c><00:34:58.450><c> actually</c><00:34:58.810><c> attached</c>

00:35:00.320 --> 00:35:00.330 align:start position:0%
packets unless I p is actually attached
 

00:35:00.330 --> 00:35:02.580 align:start position:0%
packets unless I p is actually attached
when<00:35:01.330><c> you're</c><00:35:01.450><c> ready</c><00:35:01.630><c> to</c><00:35:01.780><c> detach</c><00:35:02.110><c> your</c><00:35:02.290><c> filter</c>

00:35:02.580 --> 00:35:02.590 align:start position:0%
when you're ready to detach your filter
 

00:35:02.590 --> 00:35:04.830 align:start position:0%
when you're ready to detach your filter
you<00:35:02.830><c> call</c><00:35:03.010><c> I</c><00:35:03.220><c> FLT</c><00:35:03.610><c> underscore</c><00:35:04.210><c> detach</c><00:35:04.570><c> and</c>

00:35:04.830 --> 00:35:04.840 align:start position:0%
you call I FLT underscore detach and
 

00:35:04.840 --> 00:35:07.410 align:start position:0%
you call I FLT underscore detach and
this<00:35:05.710><c> is</c><00:35:05.890><c> asynchronous</c><00:35:06.340><c> with</c><00:35:06.850><c> a</c><00:35:06.880><c> call</c><00:35:07.120><c> back</c><00:35:07.240><c> to</c>

00:35:07.410 --> 00:35:07.420 align:start position:0%
this is asynchronous with a call back to
 

00:35:07.420 --> 00:35:09.950 align:start position:0%
this is asynchronous with a call back to
let<00:35:07.540><c> you</c><00:35:07.630><c> know</c><00:35:07.750><c> when</c><00:35:07.870><c> it's</c><00:35:07.990><c> safe</c><00:35:08.140><c> to</c><00:35:08.200><c> unload</c>

00:35:09.950 --> 00:35:09.960 align:start position:0%
let you know when it's safe to unload
 

00:35:09.960 --> 00:35:13.580 align:start position:0%
let you know when it's safe to unload
for<00:35:10.960><c> filtering</c><00:35:11.290><c> inbound</c><00:35:11.650><c> packets</c><00:35:12.540><c> the</c>

00:35:13.580 --> 00:35:13.590 align:start position:0%
for filtering inbound packets the
 

00:35:13.590 --> 00:35:15.540 align:start position:0%
for filtering inbound packets the
interfaces<00:35:14.590><c> d</c><00:35:14.740><c> MUX</c><00:35:14.950><c> function</c><00:35:15.310><c> gets</c><00:35:15.460><c> called</c>

00:35:15.540 --> 00:35:15.550 align:start position:0%
interfaces d MUX function gets called
 

00:35:15.550 --> 00:35:17.550 align:start position:0%
interfaces d MUX function gets called
first<00:35:16.030><c> to</c><00:35:16.420><c> give</c><00:35:16.570><c> it</c><00:35:16.660><c> an</c><00:35:16.720><c> opportunity</c><00:35:17.290><c> to</c><00:35:17.410><c> match</c>

00:35:17.550 --> 00:35:17.560 align:start position:0%
first to give it an opportunity to match
 

00:35:17.560 --> 00:35:20.370 align:start position:0%
first to give it an opportunity to match
the<00:35:18.130><c> packet</c><00:35:18.520><c> to</c><00:35:18.610><c> a</c><00:35:18.640><c> protocol</c><00:35:19.090><c> so</c><00:35:19.990><c> that</c><00:35:20.140><c> we</c><00:35:20.200><c> can</c>

00:35:20.370 --> 00:35:20.380 align:start position:0%
the packet to a protocol so that we can
 

00:35:20.380 --> 00:35:22.800 align:start position:0%
the packet to a protocol so that we can
know<00:35:20.530><c> which</c><00:35:21.130><c> interface</c><00:35:22.090><c> filters</c><00:35:22.510><c> to</c><00:35:22.630><c> pass</c>

00:35:22.800 --> 00:35:22.810 align:start position:0%
know which interface filters to pass
 

00:35:22.810 --> 00:35:24.810 align:start position:0%
know which interface filters to pass
this<00:35:23.020><c> to</c><00:35:23.260><c> if</c><00:35:23.650><c> you</c><00:35:23.770><c> specify</c><00:35:24.220><c> 0</c><00:35:24.520><c> for</c><00:35:24.760><c> the</c>

00:35:24.810 --> 00:35:24.820 align:start position:0%
this to if you specify 0 for the
 

00:35:24.820 --> 00:35:27.000 align:start position:0%
this to if you specify 0 for the
protocol<00:35:25.240><c> then</c><00:35:25.870><c> you</c><00:35:25.960><c> get</c><00:35:26.110><c> all</c><00:35:26.260><c> packets</c><00:35:26.650><c> for</c>

00:35:27.000 --> 00:35:27.010 align:start position:0%
protocol then you get all packets for
 

00:35:27.010 --> 00:35:28.920 align:start position:0%
protocol then you get all packets for
any<00:35:27.190><c> protocol</c><00:35:27.640><c> or</c><00:35:27.850><c> packets</c><00:35:28.510><c> that</c><00:35:28.600><c> don't</c><00:35:28.810><c> match</c>

00:35:28.920 --> 00:35:28.930 align:start position:0%
any protocol or packets that don't match
 

00:35:28.930 --> 00:35:31.700 align:start position:0%
any protocol or packets that don't match
any<00:35:29.140><c> protocol</c><00:35:29.560><c> that's</c><00:35:29.740><c> currently</c><00:35:30.070><c> attached</c>

00:35:31.700 --> 00:35:31.710 align:start position:0%
any protocol that's currently attached
 

00:35:31.710 --> 00:35:34.290 align:start position:0%
any protocol that's currently attached
your<00:35:32.710><c> iff</c><00:35:33.100><c> input</c><00:35:33.460><c> function</c><00:35:33.640><c> will</c><00:35:33.940><c> get</c><00:35:34.090><c> called</c>

00:35:34.290 --> 00:35:34.300 align:start position:0%
your iff input function will get called
 

00:35:34.300 --> 00:35:37.320 align:start position:0%
your iff input function will get called
it's<00:35:35.110><c> allowed</c><00:35:35.350><c> to</c><00:35:35.500><c> modify</c><00:35:35.620><c> the</c><00:35:35.890><c> packet</c><00:35:36.340><c> if</c><00:35:36.520><c> it</c>

00:35:37.320 --> 00:35:37.330 align:start position:0%
it's allowed to modify the packet if it
 

00:35:37.330 --> 00:35:38.220 align:start position:0%
it's allowed to modify the packet if it
does<00:35:37.510><c> need</c><00:35:37.690><c> to</c><00:35:37.750><c> modify</c>

00:35:38.220 --> 00:35:38.230 align:start position:0%
does need to modify
 

00:35:38.230 --> 00:35:41.099 align:start position:0%
does need to modify
packet<00:35:38.650><c> it</c><00:35:38.800><c> should</c><00:35:39.760><c> verify</c><00:35:40.480><c> that</c><00:35:40.840><c> the</c><00:35:40.930><c> check</c>

00:35:41.099 --> 00:35:41.109 align:start position:0%
packet it should verify that the check
 

00:35:41.109 --> 00:35:42.660 align:start position:0%
packet it should verify that the check
sums<00:35:41.320><c> are</c><00:35:41.470><c> correct</c><00:35:41.770><c> it's</c><00:35:42.250><c> going</c><00:35:42.369><c> to</c><00:35:42.430><c> make</c><00:35:42.490><c> any</c>

00:35:42.660 --> 00:35:42.670 align:start position:0%
sums are correct it's going to make any
 

00:35:42.670 --> 00:35:44.820 align:start position:0%
sums are correct it's going to make any
changes<00:35:42.700><c> that</c><00:35:43.180><c> affect</c><00:35:43.270><c> the</c><00:35:43.540><c> checksum</c><00:35:43.900><c> and</c><00:35:44.109><c> it</c>

00:35:44.820 --> 00:35:44.830 align:start position:0%
changes that affect the checksum and it
 

00:35:44.830 --> 00:35:47.340 align:start position:0%
changes that affect the checksum and it
should<00:35:44.980><c> call</c><00:35:45.190><c> em</c><00:35:45.369><c> buff</c><00:35:45.580><c> inbound</c><00:35:46.480><c> modified</c><00:35:47.080><c> and</c>

00:35:47.340 --> 00:35:47.350 align:start position:0%
should call em buff inbound modified and
 

00:35:47.350 --> 00:35:49.230 align:start position:0%
should call em buff inbound modified and
this<00:35:47.920><c> will</c><00:35:48.070><c> clear</c><00:35:48.280><c> all</c><00:35:48.310><c> the</c><00:35:48.580><c> checksum</c><00:35:48.970><c> flags</c>

00:35:49.230 --> 00:35:49.240 align:start position:0%
this will clear all the checksum flags
 

00:35:49.240 --> 00:35:50.670 align:start position:0%
this will clear all the checksum flags
so<00:35:49.630><c> that</c><00:35:49.780><c> we</c><00:35:49.869><c> don't</c><00:35:49.960><c> try</c><00:35:50.200><c> and</c><00:35:50.320><c> perform</c><00:35:50.440><c> a</c>

00:35:50.670 --> 00:35:50.680 align:start position:0%
so that we don't try and perform a
 

00:35:50.680 --> 00:35:52.200 align:start position:0%
so that we don't try and perform a
hardware<00:35:51.010><c> checks</c><00:35:51.160><c> on</c><00:35:51.369><c> later</c><00:35:51.580><c> and</c><00:35:51.880><c> run</c><00:35:52.090><c> into</c>

00:35:52.200 --> 00:35:52.210 align:start position:0%
hardware checks on later and run into
 

00:35:52.210 --> 00:35:57.030 align:start position:0%
hardware checks on later and run into
problems<00:35:54.930><c> the</c><00:35:55.930><c> return</c><00:35:56.200><c> values</c><00:35:56.500><c> are</c><00:35:56.619><c> important</c>

00:35:57.030 --> 00:35:57.040 align:start position:0%
problems the return values are important
 

00:35:57.040 --> 00:35:59.220 align:start position:0%
problems the return values are important
like<00:35:57.760><c> in</c><00:35:57.910><c> the</c><00:35:58.000><c> socket</c><00:35:58.300><c> filter</c><00:35:58.630><c> if</c><00:35:58.810><c> you</c><00:35:58.960><c> return</c>

00:35:59.220 --> 00:35:59.230 align:start position:0%
like in the socket filter if you return
 

00:35:59.230 --> 00:36:01.320 align:start position:0%
like in the socket filter if you return
a<00:35:59.260><c> 0</c><00:35:59.560><c> then</c><00:36:00.250><c> the</c><00:36:00.340><c> processing</c><00:36:00.820><c> continues</c><00:36:01.000><c> as</c>

00:36:01.320 --> 00:36:01.330 align:start position:0%
a 0 then the processing continues as
 

00:36:01.330 --> 00:36:03.300 align:start position:0%
a 0 then the processing continues as
normal<00:36:01.359><c> if</c><00:36:01.840><c> your</c><00:36:02.080><c> turn</c><00:36:02.290><c> II</c><00:36:02.500><c> just</c><00:36:02.530><c> returns</c><00:36:03.100><c> the</c>

00:36:03.300 --> 00:36:03.310 align:start position:0%
normal if your turn II just returns the
 

00:36:03.310 --> 00:36:05.310 align:start position:0%
normal if your turn II just returns the
processing<00:36:03.880><c> stops</c><00:36:04.210><c> but</c><00:36:04.810><c> the</c><00:36:04.900><c> packets</c><00:36:05.260><c> not</c>

00:36:05.310 --> 00:36:05.320 align:start position:0%
processing stops but the packets not
 

00:36:05.320 --> 00:36:07.200 align:start position:0%
processing stops but the packets not
freed<00:36:05.740><c> to</c><00:36:06.070><c> be</c><00:36:06.130><c> responsible</c><00:36:06.700><c> for</c><00:36:06.910><c> either</c>

00:36:07.200 --> 00:36:07.210 align:start position:0%
freed to be responsible for either
 

00:36:07.210 --> 00:36:08.730 align:start position:0%
freed to be responsible for either
queuing<00:36:07.720><c> it</c><00:36:07.810><c> and</c><00:36:07.900><c> rejecting</c><00:36:08.350><c> it</c><00:36:08.410><c> later</c><00:36:08.619><c> or</c>

00:36:08.730 --> 00:36:08.740 align:start position:0%
queuing it and rejecting it later or
 

00:36:08.740 --> 00:36:10.770 align:start position:0%
queuing it and rejecting it later or
freeing<00:36:09.400><c> it</c><00:36:09.640><c> or</c><00:36:09.910><c> doing</c><00:36:10.180><c> whatever</c><00:36:10.300><c> you</c><00:36:10.600><c> want</c>

00:36:10.770 --> 00:36:10.780 align:start position:0%
freeing it or doing whatever you want
 

00:36:10.780 --> 00:36:12.210 align:start position:0%
freeing it or doing whatever you want
with<00:36:10.930><c> it</c><00:36:11.080><c> but</c><00:36:11.650><c> you're</c><00:36:11.770><c> responsible</c><00:36:12.160><c> for</c>

00:36:12.210 --> 00:36:12.220 align:start position:0%
with it but you're responsible for
 

00:36:12.220 --> 00:36:15.980 align:start position:0%
with it but you're responsible for
freeing<00:36:12.520><c> it</c><00:36:12.700><c> he</c><00:36:13.510><c> returned</c><00:36:13.750><c> any</c><00:36:13.960><c> other</c><00:36:14.170><c> value</c>

00:36:15.980 --> 00:36:15.990 align:start position:0%
freeing it he returned any other value
 

00:36:15.990 --> 00:36:18.330 align:start position:0%
freeing it he returned any other value
it'll<00:36:16.990><c> end</c><00:36:17.109><c> up</c><00:36:17.200><c> freeing</c><00:36:17.530><c> the</c><00:36:17.619><c> packet</c><00:36:17.980><c> and</c><00:36:18.160><c> the</c>

00:36:18.330 --> 00:36:18.340 align:start position:0%
it'll end up freeing the packet and the
 

00:36:18.340 --> 00:36:23.400 align:start position:0%
it'll end up freeing the packet and the
processing<00:36:18.790><c> will</c><00:36:18.910><c> stop</c><00:36:21.480><c> on</c><00:36:22.480><c> the</c><00:36:23.109><c> outbound</c>

00:36:23.400 --> 00:36:23.410 align:start position:0%
processing will stop on the outbound
 

00:36:23.410 --> 00:36:24.810 align:start position:0%
processing will stop on the outbound
side<00:36:23.650><c> you</c><00:36:23.830><c> have</c><00:36:23.980><c> two</c><00:36:24.160><c> different</c><00:36:24.430><c> places</c><00:36:24.580><c> that</c>

00:36:24.810 --> 00:36:24.820 align:start position:0%
side you have two different places that
 

00:36:24.820 --> 00:36:26.970 align:start position:0%
side you have two different places that
you<00:36:24.940><c> can</c><00:36:24.970><c> filter</c><00:36:25.420><c> there's</c><00:36:26.320><c> a</c><00:36:26.410><c> pre</c><00:36:26.680><c> output</c>

00:36:26.970 --> 00:36:26.980 align:start position:0%
you can filter there's a pre output
 

00:36:26.980 --> 00:36:29.660 align:start position:0%
you can filter there's a pre output
function<00:36:27.400><c> that</c><00:36:27.670><c> lets</c><00:36:27.820><c> you</c><00:36:28.030><c> handle</c><00:36:28.390><c> the</c><00:36:28.450><c> packet</c>

00:36:29.660 --> 00:36:29.670 align:start position:0%
function that lets you handle the packet
 

00:36:29.670 --> 00:36:32.640 align:start position:0%
function that lets you handle the packet
before<00:36:30.670><c> the</c><00:36:31.450><c> interfaces</c><00:36:32.020><c> framer</c><00:36:32.230><c> has</c><00:36:32.440><c> had</c><00:36:32.619><c> a</c>

00:36:32.640 --> 00:36:32.650 align:start position:0%
before the interfaces framer has had a
 

00:36:32.650 --> 00:36:35.450 align:start position:0%
before the interfaces framer has had a
chance<00:36:32.890><c> to</c><00:36:33.130><c> pretend</c><00:36:33.550><c> be</c><00:36:33.760><c> interface</c><00:36:34.720><c> header</c><00:36:34.960><c> on</c>

00:36:35.450 --> 00:36:35.460 align:start position:0%
chance to pretend be interface header on
 

00:36:35.460 --> 00:36:39.330 align:start position:0%
chance to pretend be interface header on
the<00:36:36.460><c> outbound</c><00:36:37.080><c> you</c><00:36:38.080><c> also</c><00:36:38.350><c> have</c><00:36:38.500><c> the</c><00:36:38.650><c> ifs</c>

00:36:39.330 --> 00:36:39.340 align:start position:0%
the outbound you also have the ifs
 

00:36:39.340 --> 00:36:41.310 align:start position:0%
the outbound you also have the ifs
output<00:36:39.730><c> function</c><00:36:40.150><c> which</c><00:36:40.750><c> gives</c><00:36:40.990><c> you</c><00:36:41.080><c> a</c><00:36:41.140><c> chance</c>

00:36:41.310 --> 00:36:41.320 align:start position:0%
output function which gives you a chance
 

00:36:41.320 --> 00:36:43.890 align:start position:0%
output function which gives you a chance
to<00:36:41.530><c> process</c><00:36:41.740><c> the</c><00:36:42.700><c> fully</c><00:36:42.940><c> formed</c><00:36:43.300><c> packet</c><00:36:43.720><c> which</c>

00:36:43.890 --> 00:36:43.900 align:start position:0%
to process the fully formed packet which
 

00:36:43.900 --> 00:36:48.420 align:start position:0%
to process the fully formed packet which
includes<00:36:44.260><c> the</c><00:36:44.380><c> interface</c><00:36:45.330><c> header</c><00:36:46.530><c> if</c><00:36:47.530><c> you're</c>

00:36:48.420 --> 00:36:48.430 align:start position:0%
includes the interface header if you're
 

00:36:48.430 --> 00:36:50.609 align:start position:0%
includes the interface header if you're
going<00:36:48.580><c> to</c><00:36:48.700><c> modify</c><00:36:48.940><c> the</c><00:36:49.090><c> packet</c><00:36:49.540><c> you</c><00:36:50.440><c> should</c>

00:36:50.609 --> 00:36:50.619 align:start position:0%
going to modify the packet you should
 

00:36:50.619 --> 00:36:52.530 align:start position:0%
going to modify the packet you should
call<00:36:50.770><c> em</c><00:36:50.980><c> buff</c><00:36:51.130><c> outbound</c><00:36:51.490><c> finalize</c><00:36:52.000><c> which</c>

00:36:52.530 --> 00:36:52.540 align:start position:0%
call em buff outbound finalize which
 

00:36:52.540 --> 00:36:54.630 align:start position:0%
call em buff outbound finalize which
will<00:36:52.810><c> force</c><00:36:53.109><c> it</c><00:36:53.230><c> to</c><00:36:53.350><c> do</c><00:36:53.470><c> any</c><00:36:53.710><c> check</c><00:36:54.190><c> sums</c><00:36:54.460><c> and</c>

00:36:54.630 --> 00:36:54.640 align:start position:0%
will force it to do any check sums and
 

00:36:54.640 --> 00:36:56.040 align:start position:0%
will force it to do any check sums and
software<00:36:55.090><c> that</c><00:36:55.240><c> would</c><00:36:55.570><c> have</c><00:36:55.690><c> been</c><00:36:55.810><c> done</c><00:36:55.900><c> in</c>

00:36:56.040 --> 00:36:56.050 align:start position:0%
software that would have been done in
 

00:36:56.050 --> 00:36:57.359 align:start position:0%
software that would have been done in
hardware<00:36:56.440><c> so</c><00:36:56.680><c> you</c><00:36:56.770><c> get</c><00:36:56.890><c> a</c><00:36:56.920><c> fully</c><00:36:57.160><c> formed</c>

00:36:57.359 --> 00:36:57.369 align:start position:0%
hardware so you get a fully formed
 

00:36:57.369 --> 00:36:59.010 align:start position:0%
hardware so you get a fully formed
packet<00:36:57.850><c> and</c><00:36:58.030><c> it</c><00:36:58.119><c> also</c><00:36:58.240><c> clears</c><00:36:58.570><c> all</c><00:36:58.720><c> the</c><00:36:58.810><c> checks</c>

00:36:59.010 --> 00:36:59.020 align:start position:0%
packet and it also clears all the checks
 

00:36:59.020 --> 00:37:00.630 align:start position:0%
packet and it also clears all the checks
on<00:36:59.200><c> flag</c><00:36:59.410><c> so</c><00:36:59.590><c> if</c><00:36:59.680><c> you</c><00:36:59.770><c> reject</c><00:36:59.920><c> it</c><00:37:00.310><c> somewhere</c>

00:37:00.630 --> 00:37:00.640 align:start position:0%
on flag so if you reject it somewhere
 

00:37:00.640 --> 00:37:02.700 align:start position:0%
on flag so if you reject it somewhere
else<00:37:00.670><c> you</c><00:37:00.910><c> don't</c><00:37:01.090><c> run</c><00:37:01.180><c> into</c><00:37:01.330><c> problems</c><00:37:01.710><c> this</c>

00:37:02.700 --> 00:37:02.710 align:start position:0%
else you don't run into problems this
 

00:37:02.710 --> 00:37:04.640 align:start position:0%
else you don't run into problems this
may<00:37:02.950><c> perform</c><00:37:03.250><c> additional</c><00:37:03.790><c> work</c><00:37:03.970><c> such</c><00:37:04.300><c> as</c>

00:37:04.640 --> 00:37:04.650 align:start position:0%
may perform additional work such as
 

00:37:04.650 --> 00:37:07.080 align:start position:0%
may perform additional work such as
inserting<00:37:05.650><c> a</c><00:37:05.800><c> deal</c><00:37:05.980><c> and</c><00:37:06.100><c> header</c><00:37:06.310><c> although</c>

00:37:07.080 --> 00:37:07.090 align:start position:0%
inserting a deal and header although
 

00:37:07.090 --> 00:37:09.150 align:start position:0%
inserting a deal and header although
those<00:37:07.960><c> packets</c><00:37:08.350><c> probably</c><00:37:08.740><c> won't</c><00:37:08.890><c> get</c><00:37:09.010><c> past</c>

00:37:09.150 --> 00:37:09.160 align:start position:0%
those packets probably won't get past
 

00:37:09.160 --> 00:37:15.150 align:start position:0%
those packets probably won't get past
your<00:37:09.400><c> filter</c><00:37:13.410><c> the</c><00:37:14.410><c> return</c><00:37:14.650><c> value</c><00:37:14.800><c> is</c>

00:37:15.150 --> 00:37:15.160 align:start position:0%
your filter the return value is
 

00:37:15.160 --> 00:37:16.650 align:start position:0%
your filter the return value is
important<00:37:15.609><c> and</c><00:37:15.760><c> it's</c><00:37:16.030><c> just</c><00:37:16.210><c> like</c><00:37:16.330><c> the</c><00:37:16.420><c> return</c>

00:37:16.650 --> 00:37:16.660 align:start position:0%
important and it's just like the return
 

00:37:16.660 --> 00:37:19.430 align:start position:0%
important and it's just like the return
values<00:37:16.990><c> for</c><00:37:17.350><c> the</c><00:37:18.130><c> socket</c><00:37:18.490><c> filter</c><00:37:18.760><c> and</c><00:37:18.940><c> the</c>

00:37:19.430 --> 00:37:19.440 align:start position:0%
values for the socket filter and the
 

00:37:19.440 --> 00:37:22.349 align:start position:0%
values for the socket filter and the
inbound<00:37:20.440><c> filter</c><00:37:21.040><c> if</c><00:37:21.430><c> you</c><00:37:21.490><c> return</c><00:37:21.730><c> 0</c><00:37:22.000><c> then</c>

00:37:22.349 --> 00:37:22.359 align:start position:0%
inbound filter if you return 0 then
 

00:37:22.359 --> 00:37:24.630 align:start position:0%
inbound filter if you return 0 then
processing<00:37:23.200><c> continues</c><00:37:23.350><c> as</c><00:37:23.740><c> normal</c><00:37:23.770><c> if</c><00:37:24.520><c> your</c>

00:37:24.630 --> 00:37:24.640 align:start position:0%
processing continues as normal if your
 

00:37:24.640 --> 00:37:27.060 align:start position:0%
processing continues as normal if your
attorney<00:37:24.910><c> just</c><00:37:25.300><c> returned</c><00:37:25.630><c> then</c><00:37:26.080><c> you</c><00:37:26.740><c> get</c><00:37:26.920><c> to</c>

00:37:27.060 --> 00:37:27.070 align:start position:0%
attorney just returned then you get to
 

00:37:27.070 --> 00:37:28.859 align:start position:0%
attorney just returned then you get to
hold<00:37:27.400><c> on</c><00:37:27.520><c> to</c><00:37:27.580><c> the</c><00:37:27.670><c> packet</c><00:37:28.030><c> if</c><00:37:28.390><c> you</c><00:37:28.510><c> return</c><00:37:28.720><c> any</c>

00:37:28.859 --> 00:37:28.869 align:start position:0%
hold on to the packet if you return any
 

00:37:28.869 --> 00:37:30.420 align:start position:0%
hold on to the packet if you return any
error<00:37:29.080><c> values</c><00:37:29.470><c> in</c><00:37:29.710><c> the</c><00:37:29.770><c> packet</c><00:37:30.040><c> gets</c><00:37:30.130><c> free</c><00:37:30.369><c> to</c>

00:37:30.420 --> 00:37:30.430 align:start position:0%
error values in the packet gets free to
 

00:37:30.430 --> 00:37:34.680 align:start position:0%
error values in the packet gets free to
the<00:37:30.580><c> processing</c><00:37:31.030><c> stop</c><00:37:33.359><c> there</c><00:37:34.359><c> are</c><00:37:34.480><c> some</c>

00:37:34.680 --> 00:37:34.690 align:start position:0%
the processing stop there are some
 

00:37:34.690 --> 00:37:36.480 align:start position:0%
the processing stop there are some
additional<00:37:35.020><c> places</c><00:37:35.350><c> additional</c><00:37:36.160><c> filters</c>

00:37:36.480 --> 00:37:36.490 align:start position:0%
additional places additional filters
 

00:37:36.490 --> 00:37:38.460 align:start position:0%
additional places additional filters
stuff<00:37:37.480><c> you</c><00:37:37.630><c> can</c><00:37:37.750><c> set</c><00:37:37.900><c> up</c><00:37:37.990><c> at</c><00:37:38.109><c> the</c><00:37:38.200><c> interface</c>

00:37:38.460 --> 00:37:38.470 align:start position:0%
stuff you can set up at the interface
 

00:37:38.470 --> 00:37:41.010 align:start position:0%
stuff you can set up at the interface
layer<00:37:38.680><c> the</c><00:37:39.430><c> ISS</c><00:37:39.880><c> event</c><00:37:40.240><c> lets</c><00:37:40.630><c> you</c><00:37:40.750><c> receive</c>

00:37:41.010 --> 00:37:41.020 align:start position:0%
layer the ISS event lets you receive
 

00:37:41.020 --> 00:37:44.040 align:start position:0%
layer the ISS event lets you receive
notifications<00:37:41.710><c> of</c><00:37:41.980><c> events</c><00:37:42.340><c> on</c><00:37:42.550><c> the</c><00:37:43.060><c> filter</c><00:37:43.270><c> on</c>

00:37:44.040 --> 00:37:44.050 align:start position:0%
notifications of events on the filter on
 

00:37:44.050 --> 00:37:48.180 align:start position:0%
notifications of events on the filter on
the<00:37:44.320><c> interface</c><00:37:46.290><c> most</c><00:37:47.290><c> common</c><00:37:47.800><c> events</c><00:37:48.070><c> are</c>

00:37:48.180 --> 00:37:48.190 align:start position:0%
the interface most common events are
 

00:37:48.190 --> 00:37:50.099 align:start position:0%
the interface most common events are
protocols<00:37:48.640><c> attaching</c><00:37:49.300><c> and</c><00:37:49.450><c> detaching</c><00:37:49.540><c> and</c>

00:37:50.099 --> 00:37:50.109 align:start position:0%
protocols attaching and detaching and
 

00:37:50.109 --> 00:37:53.600 align:start position:0%
protocols attaching and detaching and
the<00:37:50.680><c> interface</c><00:37:51.070><c> detach</c>

00:37:53.600 --> 00:37:53.610 align:start position:0%
the interface detach
 

00:37:53.610 --> 00:37:57.360 align:start position:0%
 
the<00:37:54.660><c> iffi</c><00:37:55.660><c> octal</c><00:37:56.020><c> lets</c><00:37:56.320><c> you</c><00:37:56.560><c> filter</c><00:37:57.070><c> the</c><00:37:57.340><c> I</c>

00:37:57.360 --> 00:37:57.370 align:start position:0%
the iffi octal lets you filter the I
 

00:37:57.370 --> 00:37:58.830 align:start position:0%
the iffi octal lets you filter the I
Ospital<00:37:57.760><c> functions</c><00:37:58.150><c> so</c><00:37:58.480><c> you</c><00:37:58.570><c> can</c><00:37:58.720><c> either</c>

00:37:58.830 --> 00:37:58.840 align:start position:0%
Ospital functions so you can either
 

00:37:58.840 --> 00:38:01.050 align:start position:0%
Ospital functions so you can either
intercept<00:37:59.530><c> and</c><00:37:59.770><c> handle</c><00:38:00.160><c> your</c><00:38:00.190><c> own</c><00:38:00.340><c> I</c><00:38:00.490><c> octal</c><00:38:00.850><c> or</c>

00:38:01.050 --> 00:38:01.060 align:start position:0%
intercept and handle your own I octal or
 

00:38:01.060 --> 00:38:03.210 align:start position:0%
intercept and handle your own I octal or
you<00:38:01.510><c> can</c><00:38:01.720><c> intercept</c><00:38:02.290><c> cocktails</c><00:38:02.980><c> that</c><00:38:03.040><c> would</c>

00:38:03.210 --> 00:38:03.220 align:start position:0%
you can intercept cocktails that would
 

00:38:03.220 --> 00:38:05.640 align:start position:0%
you can intercept cocktails that would
normally<00:38:03.310><c> go</c><00:38:03.520><c> to</c><00:38:03.640><c> the</c><00:38:03.760><c> interface</c><00:38:03.990><c> if</c><00:38:04.990><c> you</c><00:38:05.500><c> need</c>

00:38:05.640 --> 00:38:05.650 align:start position:0%
normally go to the interface if you need
 

00:38:05.650 --> 00:38:07.410 align:start position:0%
normally go to the interface if you need
to<00:38:05.740><c> inject</c><00:38:06.040><c> inbound</c><00:38:06.430><c> or</c><00:38:06.550><c> outbound</c><00:38:06.610><c> data</c><00:38:07.090><c> you</c>

00:38:07.410 --> 00:38:07.420 align:start position:0%
to inject inbound or outbound data you
 

00:38:07.420 --> 00:38:10.230 align:start position:0%
to inject inbound or outbound data you
can<00:38:07.600><c> use</c><00:38:07.720><c> the</c><00:38:07.930><c> if'</c><00:38:08.230><c> net</c><00:38:08.440><c> input</c><00:38:08.620><c> function</c><00:38:08.980><c> and</c><00:38:09.430><c> i</c>

00:38:10.230 --> 00:38:10.240 align:start position:0%
can use the if' net input function and i
 

00:38:10.240 --> 00:38:15.210 align:start position:0%
can use the if' net input function and i
have<00:38:10.360><c> met</c><00:38:10.540><c> output</c><00:38:10.900><c> functions</c><00:38:13.830><c> if</c><00:38:14.830><c> you</c><00:38:14.980><c> need</c><00:38:15.130><c> to</c>

00:38:15.210 --> 00:38:15.220 align:start position:0%
have met output functions if you need to
 

00:38:15.220 --> 00:38:18.390 align:start position:0%
have met output functions if you need to
communicate<00:38:15.490><c> with</c><00:38:15.940><c> a</c><00:38:16.650><c> user</c><00:38:17.650><c> space</c><00:38:17.920><c> process</c>

00:38:18.390 --> 00:38:18.400 align:start position:0%
communicate with a user space process
 

00:38:18.400 --> 00:38:19.800 align:start position:0%
communicate with a user space process
the<00:38:18.580><c> easiest</c><00:38:18.940><c> way</c><00:38:19.030><c> to</c><00:38:19.090><c> do</c><00:38:19.240><c> that</c><00:38:19.360><c> is</c><00:38:19.420><c> to</c><00:38:19.570><c> use</c><00:38:19.780><c> the</c>

00:38:19.800 --> 00:38:19.810 align:start position:0%
the easiest way to do that is to use the
 

00:38:19.810 --> 00:38:22.950 align:start position:0%
the easiest way to do that is to use the
colonel<00:38:20.200><c> control</c><00:38:20.530><c> KPI</c><00:38:21.660><c> colonel</c><00:38:22.660><c> control</c>

00:38:22.950 --> 00:38:22.960 align:start position:0%
colonel control KPI colonel control
 

00:38:22.960 --> 00:38:25.200 align:start position:0%
colonel control KPI colonel control
gives<00:38:23.110><c> you</c><00:38:23.230><c> a</c><00:38:23.290><c> way</c><00:38:23.440><c> to</c><00:38:23.470><c> send</c><00:38:24.400><c> small</c><00:38:24.700><c> messages</c>

00:38:25.200 --> 00:38:25.210 align:start position:0%
gives you a way to send small messages
 

00:38:25.210 --> 00:38:28.140 align:start position:0%
gives you a way to send small messages
over<00:38:25.450><c> a</c><00:38:25.480><c> socket</c><00:38:25.900><c> to</c><00:38:26.260><c> user</c><00:38:26.470><c> space</c><00:38:27.150><c> it's</c>

00:38:28.140 --> 00:38:28.150 align:start position:0%
over a socket to user space it's
 

00:38:28.150 --> 00:38:29.970 align:start position:0%
over a socket to user space it's
commonly<00:38:28.660><c> used</c><00:38:28.930><c> for</c><00:38:29.170><c> configuring</c><00:38:29.560><c> a</c><00:38:29.680><c> kernel</c>

00:38:29.970 --> 00:38:29.980 align:start position:0%
commonly used for configuring a kernel
 

00:38:29.980 --> 00:38:31.650 align:start position:0%
commonly used for configuring a kernel
extension<00:38:30.460><c> or</c><00:38:30.700><c> for</c><00:38:31.000><c> retrieving</c><00:38:31.420><c> information</c>

00:38:31.650 --> 00:38:31.660 align:start position:0%
extension or for retrieving information
 

00:38:31.660 --> 00:38:34.470 align:start position:0%
extension or for retrieving information
from<00:38:32.110><c> a</c><00:38:32.230><c> kernel</c><00:38:32.530><c> extension</c><00:38:33.180><c> the</c><00:38:34.180><c> colonel</c>

00:38:34.470 --> 00:38:34.480 align:start position:0%
from a kernel extension the colonel
 

00:38:34.480 --> 00:38:37.050 align:start position:0%
from a kernel extension the colonel
control<00:38:34.750><c> KPI</c><00:38:35.080><c> is</c><00:38:35.170><c> documented</c><00:38:35.680><c> insist</c><00:38:36.610><c> flash</c>

00:38:37.050 --> 00:38:37.060 align:start position:0%
control KPI is documented insist flash
 

00:38:37.060 --> 00:38:39.360 align:start position:0%
control KPI is documented insist flash
current<00:38:37.420><c> control</c><00:38:37.750><c> H</c><00:38:38.350><c> in</c><00:38:38.620><c> the</c><00:38:38.680><c> kernel</c>

00:38:39.360 --> 00:38:39.370 align:start position:0%
current control H in the kernel
 

00:38:39.370 --> 00:38:42.960 align:start position:0%
current control H in the kernel
framework<00:38:41.400><c> registering</c><00:38:42.400><c> your</c><00:38:42.430><c> kernel</c><00:38:42.760><c> frame</c>

00:38:42.960 --> 00:38:42.970 align:start position:0%
framework registering your kernel frame
 

00:38:42.970 --> 00:38:44.910 align:start position:0%
framework registering your kernel frame
sorry<00:38:43.600><c> registering</c><00:38:44.110><c> your</c><00:38:44.140><c> kernel</c><00:38:44.410><c> control</c><00:38:44.740><c> is</c>

00:38:44.910 --> 00:38:44.920 align:start position:0%
sorry registering your kernel control is
 

00:38:44.920 --> 00:38:47.160 align:start position:0%
sorry registering your kernel control is
done<00:38:45.220><c> by</c><00:38:45.430><c> filling</c><00:38:45.730><c> out</c><00:38:45.820><c> a</c><00:38:46.060><c> current</c><00:38:46.900><c> control</c>

00:38:47.160 --> 00:38:47.170 align:start position:0%
done by filling out a current control
 

00:38:47.170 --> 00:38:48.870 align:start position:0%
done by filling out a current control
register<00:38:47.620><c> struck</c><00:38:47.890><c> and</c><00:38:48.100><c> calling</c><00:38:48.610><c> control</c>

00:38:48.870 --> 00:38:48.880 align:start position:0%
register struck and calling control
 

00:38:48.880 --> 00:38:53.940 align:start position:0%
register struck and calling control
register<00:38:51.450><c> this</c><00:38:52.450><c> lets</c><00:38:52.720><c> your</c><00:38:52.870><c> kernel</c><00:38:53.230><c> extension</c>

00:38:53.940 --> 00:38:53.950 align:start position:0%
register this lets your kernel extension
 

00:38:53.950 --> 00:38:55.980 align:start position:0%
register this lets your kernel extension
receive<00:38:54.280><c> notification</c><00:38:54.940><c> when</c><00:38:55.330><c> a</c><00:38:55.360><c> socket</c>

00:38:55.980 --> 00:38:55.990 align:start position:0%
receive notification when a socket
 

00:38:55.990 --> 00:38:58.560 align:start position:0%
receive notification when a socket
connects<00:38:56.320><c> to</c><00:38:56.530><c> your</c><00:38:56.560><c> kernel</c><00:38:57.430><c> control</c><00:38:57.760><c> or</c><00:38:58.390><c> when</c>

00:38:58.560 --> 00:38:58.570 align:start position:0%
connects to your kernel control or when
 

00:38:58.570 --> 00:39:00.900 align:start position:0%
connects to your kernel control or when
it<00:38:58.660><c> disconnects</c><00:38:59.170><c> it</c><00:39:00.130><c> also</c><00:39:00.370><c> lets</c><00:39:00.520><c> you</c><00:39:00.610><c> receive</c>

00:39:00.900 --> 00:39:00.910 align:start position:0%
it disconnects it also lets you receive
 

00:39:00.910 --> 00:39:04.140 align:start position:0%
it disconnects it also lets you receive
information<00:39:01.240><c> from</c><00:39:01.570><c> user</c><00:39:01.990><c> land</c><00:39:02.400><c> and</c><00:39:03.400><c> you</c><00:39:03.970><c> can</c>

00:39:04.140 --> 00:39:04.150 align:start position:0%
information from user land and you can
 

00:39:04.150 --> 00:39:06.540 align:start position:0%
information from user land and you can
get<00:39:04.360><c> you</c><00:39:05.050><c> can</c><00:39:05.200><c> handle</c><00:39:05.650><c> get</c><00:39:05.830><c> and</c><00:39:06.010><c> set</c><00:39:06.190><c> socket</c>

00:39:06.540 --> 00:39:06.550 align:start position:0%
get you can handle get and set socket
 

00:39:06.550 --> 00:39:09.780 align:start position:0%
get you can handle get and set socket
options<00:39:08.040><c> when</c><00:39:09.040><c> you're</c><00:39:09.190><c> done</c><00:39:09.220><c> you</c><00:39:09.370><c> can</c><00:39:09.640><c> call</c>

00:39:09.780 --> 00:39:09.790 align:start position:0%
options when you're done you can call
 

00:39:09.790 --> 00:39:11.190 align:start position:0%
options when you're done you can call
control<00:39:10.180><c> be</c><00:39:10.330><c> register</c><00:39:10.750><c> and</c><00:39:10.960><c> that</c><00:39:11.080><c> will</c>

00:39:11.190 --> 00:39:11.200 align:start position:0%
control be register and that will
 

00:39:11.200 --> 00:39:18.440 align:start position:0%
control be register and that will
unregister<00:39:11.800><c> your</c><00:39:12.430><c> control</c>

00:39:18.440 --> 00:39:18.450 align:start position:0%
 
 

00:39:18.450 --> 00:39:20.329 align:start position:0%
 
so<00:39:18.960><c> when</c><00:39:19.260><c> your</c><00:39:19.380><c> control</c><00:39:19.710><c> connect</c><00:39:19.980><c> function</c>

00:39:20.329 --> 00:39:20.339 align:start position:0%
so when your control connect function
 

00:39:20.339 --> 00:39:22.550 align:start position:0%
so when your control connect function
gets<00:39:20.520><c> called</c><00:39:20.609><c> you</c><00:39:21.510><c> can</c><00:39:21.660><c> allocate</c><00:39:21.839><c> any</c><00:39:22.230><c> data</c>

00:39:22.550 --> 00:39:22.560 align:start position:0%
gets called you can allocate any data
 

00:39:22.560 --> 00:39:25.010 align:start position:0%
gets called you can allocate any data
that<00:39:22.980><c> you</c><00:39:23.070><c> need</c><00:39:23.280><c> to</c><00:39:23.670><c> associate</c><00:39:24.630><c> with</c><00:39:24.720><c> that</c>

00:39:25.010 --> 00:39:25.020 align:start position:0%
that you need to associate with that
 

00:39:25.020 --> 00:39:27.230 align:start position:0%
that you need to associate with that
connection<00:39:25.470><c> to</c><00:39:25.589><c> a</c><00:39:25.619><c> specific</c><00:39:25.859><c> socket</c><00:39:26.460><c> and</c><00:39:26.609><c> then</c>

00:39:27.230 --> 00:39:27.240 align:start position:0%
connection to a specific socket and then
 

00:39:27.240 --> 00:39:28.880 align:start position:0%
connection to a specific socket and then
you<00:39:27.329><c> need</c><00:39:27.480><c> to</c><00:39:27.570><c> free</c><00:39:27.750><c> that</c><00:39:27.780><c> on</c><00:39:28.109><c> your</c><00:39:28.530><c> control</c>

00:39:28.880 --> 00:39:28.890 align:start position:0%
you need to free that on your control
 

00:39:28.890 --> 00:39:31.520 align:start position:0%
you need to free that on your control
disconnect<00:39:29.369><c> call</c><00:39:29.820><c> back</c><00:39:29.970><c> if</c><00:39:30.960><c> you</c><00:39:31.109><c> need</c><00:39:31.230><c> to</c><00:39:31.349><c> send</c>

00:39:31.520 --> 00:39:31.530 align:start position:0%
disconnect call back if you need to send
 

00:39:31.530 --> 00:39:34.400 align:start position:0%
disconnect call back if you need to send
data<00:39:31.589><c> to</c><00:39:31.800><c> this</c><00:39:32.010><c> to</c><00:39:32.579><c> the</c><00:39:32.700><c> process</c><00:39:33.630><c> into</c><00:39:34.290><c> the</c>

00:39:34.400 --> 00:39:34.410 align:start position:0%
data to this to the process into the
 

00:39:34.410 --> 00:39:36.380 align:start position:0%
data to this to the process into the
socket<00:39:34.740><c> you</c><00:39:34.920><c> can</c><00:39:35.070><c> use</c><00:39:35.190><c> ctrl</c><00:39:35.550><c> +</c><00:39:35.760><c> Q</c><00:39:35.940><c> data</c><00:39:36.119><c> and</c>

00:39:36.380 --> 00:39:36.390 align:start position:0%
socket you can use ctrl + Q data and
 

00:39:36.390 --> 00:39:39.470 align:start position:0%
socket you can use ctrl + Q data and
control<00:39:36.780><c> and</c><00:39:37.050><c> QM</c><00:39:37.440><c> bus</c><00:39:37.730><c> control</c><00:39:38.730><c> and</c><00:39:38.910><c> Q</c><00:39:39.060><c> data</c>

00:39:39.470 --> 00:39:39.480 align:start position:0%
control and QM bus control and Q data
 

00:39:39.480 --> 00:39:41.420 align:start position:0%
control and QM bus control and Q data
works<00:39:39.750><c> with</c><00:39:39.930><c> a</c><00:39:39.960><c> kernel</c><00:39:40.260><c> kernel</c><00:39:41.010><c> buffer</c><00:39:41.099><c> and</c>

00:39:41.420 --> 00:39:41.430 align:start position:0%
works with a kernel kernel buffer and
 

00:39:41.430 --> 00:39:44.120 align:start position:0%
works with a kernel kernel buffer and
ctrl<00:39:42.390><c> +</c><00:39:42.630><c> qm</c><00:39:42.990><c> buff</c><00:39:43.170><c> works</c><00:39:43.380><c> with</c><00:39:43.619><c> data</c><00:39:43.950><c> that's</c>

00:39:44.120 --> 00:39:44.130 align:start position:0%
ctrl + qm buff works with data that's
 

00:39:44.130 --> 00:39:48.770 align:start position:0%
ctrl + qm buff works with data that's
stored<00:39:44.190><c> in</c><00:39:44.579><c> an</c><00:39:44.820><c> M</c><00:39:45.030><c> buff</c><00:39:45.240><c> chain</c><00:39:47.690><c> with</c><00:39:48.690><c> the</c>

00:39:48.770 --> 00:39:48.780 align:start position:0%
stored in an M buff chain with the
 

00:39:48.780 --> 00:39:50.660 align:start position:0%
stored in an M buff chain with the
colonel<00:39:49.020><c> control</c><00:39:49.349><c> access</c><00:39:49.829><c> to</c><00:39:50.280><c> it</c><00:39:50.400><c> is</c><00:39:50.490><c> not</c>

00:39:50.660 --> 00:39:50.670 align:start position:0%
colonel control access to it is not
 

00:39:50.670 --> 00:39:53.150 align:start position:0%
colonel control access to it is not
serialized<00:39:51.270><c> but</c><00:39:52.200><c> it</c><00:39:52.290><c> is</c><00:39:52.380><c> safe</c><00:39:52.589><c> to</c><00:39:52.619><c> send</c><00:39:52.980><c> to</c><00:39:53.070><c> the</c>

00:39:53.150 --> 00:39:53.160 align:start position:0%
serialized but it is safe to send to the
 

00:39:53.160 --> 00:39:57.680 align:start position:0%
serialized but it is safe to send to the
client<00:39:53.460><c> at</c><00:39:53.550><c> any</c><00:39:53.670><c> time</c><00:39:53.940><c> so</c><00:39:55.760><c> the</c><00:39:56.760><c> with</c><00:39:57.599><c> the</c>

00:39:57.680 --> 00:39:57.690 align:start position:0%
client at any time so the with the
 

00:39:57.690 --> 00:39:58.849 align:start position:0%
client at any time so the with the
nothing<00:39:57.960><c> see</c><00:39:58.109><c> realized</c><00:39:58.349><c> you</c><00:39:58.500><c> really</c><00:39:58.680><c> need</c><00:39:58.800><c> to</c>

00:39:58.849 --> 00:39:58.859 align:start position:0%
nothing see realized you really need to
 

00:39:58.859 --> 00:40:00.170 align:start position:0%
nothing see realized you really need to
protect<00:39:59.130><c> any</c><00:39:59.339><c> data</c><00:39:59.490><c> structures</c><00:39:59.910><c> that</c><00:40:00.089><c> you</c>

00:40:00.170 --> 00:40:00.180 align:start position:0%
protect any data structures that you
 

00:40:00.180 --> 00:40:01.700 align:start position:0%
protect any data structures that you
interact<00:40:00.510><c> with</c><00:40:00.630><c> whenever</c><00:40:01.200><c> you</c><00:40:01.349><c> get</c><00:40:01.470><c> a</c><00:40:01.530><c> call</c>

00:40:01.700 --> 00:40:01.710 align:start position:0%
interact with whenever you get a call
 

00:40:01.710 --> 00:40:07.150 align:start position:0%
interact with whenever you get a call
back<00:40:01.770><c> to</c><00:40:02.550><c> notify</c><00:40:02.910><c> users</c><00:40:03.270><c> data</c><00:40:03.420><c> on</c><00:40:03.630><c> the</c><00:40:03.690><c> socket</c>

00:40:07.150 --> 00:40:07.160 align:start position:0%
 
 

00:40:07.160 --> 00:40:11.540 align:start position:0%
 
in<00:40:08.160><c> addition</c><00:40:08.430><c> is</c><00:40:08.760><c> a</c><00:40:08.790><c> another</c><00:40:09.510><c> helper</c><00:40:09.869><c> KPI</c><00:40:10.550><c> the</c>

00:40:11.540 --> 00:40:11.550 align:start position:0%
in addition is a another helper KPI the
 

00:40:11.550 --> 00:40:14.060 align:start position:0%
in addition is a another helper KPI the
protocol<00:40:11.910><c> layer</c><00:40:12.119><c> and</c><00:40:12.410><c> this</c><00:40:13.410><c> is</c><00:40:13.589><c> documented</c><00:40:13.859><c> in</c>

00:40:14.060 --> 00:40:14.070 align:start position:0%
protocol layer and this is documented in
 

00:40:14.070 --> 00:40:16.550 align:start position:0%
protocol layer and this is documented in
net<00:40:14.579><c> /</c><00:40:14.609><c> KPI</c><00:40:15.240><c> underscore</c><00:40:15.630><c> protocol</c><00:40:15.990><c> that</c><00:40:16.140><c> H</c><00:40:16.260><c> in</c>

00:40:16.550 --> 00:40:16.560 align:start position:0%
net / KPI underscore protocol that H in
 

00:40:16.560 --> 00:40:18.950 align:start position:0%
net / KPI underscore protocol that H in
the<00:40:16.710><c> kernel</c><00:40:16.950><c> framework</c><00:40:17.310><c> this</c><00:40:18.300><c> applies</c><00:40:18.660><c> to</c><00:40:18.690><c> you</c>

00:40:18.950 --> 00:40:18.960 align:start position:0%
the kernel framework this applies to you
 

00:40:18.960 --> 00:40:20.750 align:start position:0%
the kernel framework this applies to you
the<00:40:19.140><c> hooks</c><00:40:19.349><c> for</c><00:40:19.589><c> injecting</c><00:40:20.040><c> packets</c><00:40:20.430><c> into</c><00:40:20.640><c> a</c>

00:40:20.750 --> 00:40:20.760 align:start position:0%
the hooks for injecting packets into a
 

00:40:20.760 --> 00:40:23.870 align:start position:0%
the hooks for injecting packets into a
protocol<00:40:21.380><c> there</c><00:40:22.380><c> are</c><00:40:22.740><c> two</c><00:40:22.950><c> functions</c><00:40:23.369><c> of</c><00:40:23.760><c> the</c>

00:40:23.870 --> 00:40:23.880 align:start position:0%
protocol there are two functions of the
 

00:40:23.880 --> 00:40:25.400 align:start position:0%
protocol there are two functions of the
proto<00:40:24.089><c> input</c><00:40:24.480><c> function</c><00:40:24.660><c> and</c><00:40:25.050><c> the</c><00:40:25.200><c> proto</c>

00:40:25.400 --> 00:40:25.410 align:start position:0%
proto input function and the proto
 

00:40:25.410 --> 00:40:27.980 align:start position:0%
proto input function and the proto
inject<00:40:25.859><c> function</c><00:40:26.310><c> the</c><00:40:27.180><c> proto</c><00:40:27.420><c> input</c><00:40:27.810><c> function</c>

00:40:27.980 --> 00:40:27.990 align:start position:0%
inject function the proto input function
 

00:40:27.990 --> 00:40:30.020 align:start position:0%
inject function the proto input function
is<00:40:28.319><c> intended</c><00:40:28.710><c> for</c><00:40:28.740><c> plumbers</c><00:40:29.220><c> for</c><00:40:29.730><c> passing</c>

00:40:30.020 --> 00:40:30.030 align:start position:0%
is intended for plumbers for passing
 

00:40:30.030 --> 00:40:32.720 align:start position:0%
is intended for plumbers for passing
packets<00:40:30.390><c> up</c><00:40:30.480><c> to</c><00:40:30.599><c> IP</c><00:40:30.780><c> or</c><00:40:31.109><c> ipv6</c><00:40:31.260><c> or</c><00:40:32.160><c> even</c><00:40:32.490><c> Apple</c>

00:40:32.720 --> 00:40:32.730 align:start position:0%
packets up to IP or ipv6 or even Apple
 

00:40:32.730 --> 00:40:35.930 align:start position:0%
packets up to IP or ipv6 or even Apple
talk<00:40:33.290><c> and</c><00:40:34.290><c> they're</c><00:40:35.099><c> really</c><00:40:35.220><c> meant</c><00:40:35.460><c> for</c><00:40:35.550><c> the</c>

00:40:35.930 --> 00:40:35.940 align:start position:0%
talk and they're really meant for the
 

00:40:35.940 --> 00:40:38.000 align:start position:0%
talk and they're really meant for the
inbound<00:40:36.300><c> packet</c><00:40:36.720><c> path</c><00:40:36.900><c> if</c><00:40:37.200><c> you're</c><00:40:37.859><c> going</c><00:40:37.950><c> to</c>

00:40:38.000 --> 00:40:38.010 align:start position:0%
inbound packet path if you're going to
 

00:40:38.010 --> 00:40:39.530 align:start position:0%
inbound packet path if you're going to
be<00:40:38.130><c> injecting</c><00:40:38.579><c> packets</c><00:40:38.970><c> from</c><00:40:39.060><c> anywhere</c><00:40:39.390><c> else</c>

00:40:39.530 --> 00:40:39.540 align:start position:0%
be injecting packets from anywhere else
 

00:40:39.540 --> 00:40:40.910 align:start position:0%
be injecting packets from anywhere else
in<00:40:39.780><c> the</c><00:40:39.810><c> stack</c><00:40:40.079><c> where</c><00:40:40.349><c> you're</c><00:40:40.470><c> not</c><00:40:40.619><c> on</c><00:40:40.829><c> the</c>

00:40:40.910 --> 00:40:40.920 align:start position:0%
in the stack where you're not on the
 

00:40:40.920 --> 00:40:42.920 align:start position:0%
in the stack where you're not on the
inbound<00:40:41.220><c> pass</c><00:40:41.310><c> you</c><00:40:42.030><c> need</c><00:40:42.270><c> to</c><00:40:42.359><c> use</c><00:40:42.480><c> the</c><00:40:42.510><c> proto</c>

00:40:42.920 --> 00:40:42.930 align:start position:0%
inbound pass you need to use the proto
 

00:40:42.930 --> 00:40:45.020 align:start position:0%
inbound pass you need to use the proto
inject<00:40:43.290><c> function</c><00:40:43.740><c> and</c><00:40:43.920><c> these</c><00:40:44.790><c> are</c><00:40:44.849><c> the</c>

00:40:45.020 --> 00:40:45.030 align:start position:0%
inject function and these are the
 

00:40:45.030 --> 00:40:47.410 align:start position:0%
inject function and these are the
replacement<00:40:45.510><c> for</c><00:40:45.690><c> the</c><00:40:45.720><c> net</c><00:40:45.930><c> is</c><00:40:46.079><c> are</c>

00:40:47.410 --> 00:40:47.420 align:start position:0%
replacement for the net is are
 

00:40:47.420 --> 00:40:49.640 align:start position:0%
replacement for the net is are
mechanisms<00:40:48.420><c> that</c><00:40:48.630><c> used</c><00:40:48.810><c> to</c><00:40:48.930><c> cue</c><00:40:49.109><c> packets</c><00:40:49.470><c> and</c>

00:40:49.640 --> 00:40:49.650 align:start position:0%
mechanisms that used to cue packets and
 

00:40:49.650 --> 00:40:54.470 align:start position:0%
mechanisms that used to cue packets and
then<00:40:49.800><c> wake</c><00:40:50.280><c> up</c><00:40:50.460><c> the</c><00:40:50.579><c> input</c><00:40:50.849><c> thread</c><00:40:53.480><c> in</c>

00:40:54.470 --> 00:40:54.480 align:start position:0%
then wake up the input thread in
 

00:40:54.480 --> 00:40:56.809 align:start position:0%
then wake up the input thread in
addition<00:40:55.380><c> there's</c><00:40:55.589><c> an</c><00:40:55.740><c> M</c><00:40:55.859><c> buff</c><00:40:56.040><c> kpi</c><00:40:56.400><c> that</c>

00:40:56.809 --> 00:40:56.819 align:start position:0%
addition there's an M buff kpi that
 

00:40:56.819 --> 00:40:58.190 align:start position:0%
addition there's an M buff kpi that
gives<00:40:57.000><c> you</c><00:40:57.119><c> access</c><00:40:57.300><c> to</c><00:40:57.510><c> the</c><00:40:57.780><c> data</c><00:40:57.930><c> that's</c>

00:40:58.190 --> 00:40:58.200 align:start position:0%
gives you access to the data that's
 

00:40:58.200 --> 00:41:03.890 align:start position:0%
gives you access to the data that's
stored<00:40:58.290><c> in</c><00:40:58.770><c> EM</c><00:40:58.890><c> bus</c><00:41:02.060><c> most</c><00:41:03.060><c> of</c><00:41:03.210><c> the</c><00:41:03.270><c> packets</c><00:41:03.599><c> all</c>

00:41:03.890 --> 00:41:03.900 align:start position:0%
stored in EM bus most of the packets all
 

00:41:03.900 --> 00:41:05.240 align:start position:0%
stored in EM bus most of the packets all
of<00:41:04.020><c> the</c><00:41:04.109><c> packets</c><00:41:04.440><c> in</c><00:41:04.530><c> the</c><00:41:04.619><c> stack</c><00:41:04.800><c> restored</c><00:41:05.160><c> in</c>

00:41:05.240 --> 00:41:05.250 align:start position:0%
of the packets in the stack restored in
 

00:41:05.250 --> 00:41:06.760 align:start position:0%
of the packets in the stack restored in
n<00:41:05.369><c> buff</c><00:41:05.550><c> along</c><00:41:05.940><c> with</c><00:41:06.089><c> a</c><00:41:06.119><c> bunch</c><00:41:06.270><c> of</c><00:41:06.420><c> other</c>

00:41:06.760 --> 00:41:06.770 align:start position:0%
n buff along with a bunch of other
 

00:41:06.770 --> 00:41:11.270 align:start position:0%
n buff along with a bunch of other
useful<00:41:07.770><c> information</c><00:41:09.200><c> the</c><00:41:10.200><c> n</c><00:41:10.319><c> buff</c><00:41:10.470><c> kpi</c><00:41:10.920><c> is</c>

00:41:11.270 --> 00:41:11.280 align:start position:0%
useful information the n buff kpi is
 

00:41:11.280 --> 00:41:13.130 align:start position:0%
useful information the n buff kpi is
based<00:41:11.579><c> on</c><00:41:11.730><c> the</c><00:41:11.880><c> original</c><00:41:11.970><c> n</c><00:41:12.390><c> buff</c><00:41:12.540><c> interfaces</c>

00:41:13.130 --> 00:41:13.140 align:start position:0%
based on the original n buff interfaces
 

00:41:13.140 --> 00:41:17.120 align:start position:0%
based on the original n buff interfaces
and<00:41:13.790><c> we've</c><00:41:14.790><c> added</c><00:41:15.089><c> a</c><00:41:15.240><c> lot</c><00:41:15.359><c> of</c><00:41:15.450><c> accessories</c><00:41:16.130><c> the</c>

00:41:17.120 --> 00:41:17.130 align:start position:0%
and we've added a lot of accessories the
 

00:41:17.130 --> 00:41:19.430 align:start position:0%
and we've added a lot of accessories the
accessor<00:41:17.550><c> functions</c><00:41:17.970><c> names</c><00:41:18.810><c> are</c><00:41:19.050><c> based</c><00:41:19.230><c> on</c>

00:41:19.430 --> 00:41:19.440 align:start position:0%
accessor functions names are based on
 

00:41:19.440 --> 00:41:23.540 align:start position:0%
accessor functions names are based on
the<00:41:19.920><c> field</c><00:41:20.849><c> name</c><00:41:21.060><c> in</c><00:41:21.300><c> the</c><00:41:21.540><c> old</c><00:41:21.660><c> n</c><00:41:21.810><c> buff</c><00:41:22.220><c> so</c><00:41:23.220><c> for</c>

00:41:23.540 --> 00:41:23.550 align:start position:0%
the field name in the old n buff so for
 

00:41:23.550 --> 00:41:25.130 align:start position:0%
the field name in the old n buff so for
example<00:41:23.609><c> n</c><00:41:24.030><c> buff</c><00:41:24.210><c> underscore</c><00:41:24.630><c> lengths</c><00:41:24.930><c> gets</c>

00:41:25.130 --> 00:41:25.140 align:start position:0%
example n buff underscore lengths gets
 

00:41:25.140 --> 00:41:28.160 align:start position:0%
example n buff underscore lengths gets
the<00:41:25.319><c> length</c><00:41:25.530><c> of</c><00:41:25.680><c> the</c><00:41:25.800><c> Amba</c><00:41:26.480><c> the</c><00:41:27.480><c> headers</c><00:41:28.020><c> in</c>

00:41:28.160 --> 00:41:28.170 align:start position:0%
the length of the Amba the headers in
 

00:41:28.170 --> 00:41:29.420 align:start position:0%
the length of the Amba the headers in
the<00:41:28.260><c> M</c><00:41:28.380><c> buffs</c><00:41:28.560><c> have</c><00:41:28.710><c> changed</c><00:41:29.069><c> a</c><00:41:29.130><c> little</c><00:41:29.280><c> bit</c>

00:41:29.420 --> 00:41:29.430 align:start position:0%
the M buffs have changed a little bit
 

00:41:29.430 --> 00:41:31.819 align:start position:0%
the M buffs have changed a little bit
and<00:41:29.750><c> the</c><00:41:30.750><c> result</c><00:41:31.020><c> of</c><00:41:31.109><c> those</c><00:41:31.260><c> changes</c><00:41:31.589><c> may</c><00:41:31.770><c> be</c>

00:41:31.819 --> 00:41:31.829 align:start position:0%
and the result of those changes may be
 

00:41:31.829 --> 00:41:32.180 align:start position:0%
and the result of those changes may be
that

00:41:32.180 --> 00:41:32.190 align:start position:0%
that
 

00:41:32.190 --> 00:41:34.099 align:start position:0%
that
you<00:41:32.310><c> can't</c><00:41:32.550><c> sort</c><00:41:32.849><c> quite</c><00:41:33.030><c> as</c><00:41:33.150><c> much</c><00:41:33.270><c> data</c><00:41:33.540><c> in</c><00:41:33.900><c> the</c>

00:41:34.099 --> 00:41:34.109 align:start position:0%
you can't sort quite as much data in the
 

00:41:34.109 --> 00:41:36.380 align:start position:0%
you can't sort quite as much data in the
namm<00:41:34.290><c> buff</c><00:41:34.500><c> that</c><00:41:34.530><c> has</c><00:41:34.920><c> a</c><00:41:35.190><c> packet</c><00:41:35.940><c> header</c><00:41:36.089><c> or</c>

00:41:36.380 --> 00:41:36.390 align:start position:0%
namm buff that has a packet header or
 

00:41:36.390 --> 00:41:38.960 align:start position:0%
namm buff that has a packet header or
even<00:41:36.750><c> a</c><00:41:36.930><c> regular</c><00:41:37.380><c> n</c><00:41:37.500><c> buff</c><00:41:37.680><c> and</c><00:41:37.859><c> the</c><00:41:38.609><c> cluster</c>

00:41:38.960 --> 00:41:38.970 align:start position:0%
even a regular n buff and the cluster
 

00:41:38.970 --> 00:41:40.940 align:start position:0%
even a regular n buff and the cluster
sizes<00:41:39.300><c> might</c><00:41:39.450><c> also</c><00:41:39.599><c> change</c><00:41:40.020><c> so</c><00:41:40.680><c> don't</c><00:41:40.859><c> make</c>

00:41:40.940 --> 00:41:40.950 align:start position:0%
sizes might also change so don't make
 

00:41:40.950 --> 00:41:43.069 align:start position:0%
sizes might also change so don't make
any<00:41:41.329><c> assumptions</c><00:41:42.329><c> about</c><00:41:42.510><c> the</c><00:41:42.630><c> amount</c><00:41:42.900><c> of</c><00:41:42.930><c> data</c>

00:41:43.069 --> 00:41:43.079 align:start position:0%
any assumptions about the amount of data
 

00:41:43.079 --> 00:41:45.050 align:start position:0%
any assumptions about the amount of data
that<00:41:43.200><c> you</c><00:41:43.380><c> can</c><00:41:43.530><c> store</c><00:41:43.740><c> in</c><00:41:43.829><c> an</c><00:41:43.890><c> n</c><00:41:44.010><c> buff</c><00:41:44.190><c> you</c><00:41:44.880><c> can</c>

00:41:45.050 --> 00:41:45.060 align:start position:0%
that you can store in an n buff you can
 

00:41:45.060 --> 00:41:47.900 align:start position:0%
that you can store in an n buff you can
use<00:41:45.240><c> em</c><00:41:45.510><c> buff</c><00:41:45.750><c> stat</c><00:41:46.020><c> to</c><00:41:46.380><c> get</c><00:41:46.560><c> the</c><00:41:47.310><c> values</c><00:41:47.670><c> of</c>

00:41:47.900 --> 00:41:47.910 align:start position:0%
use em buff stat to get the values of
 

00:41:47.910 --> 00:41:51.589 align:start position:0%
use em buff stat to get the values of
all<00:41:48.660><c> of</c><00:41:48.869><c> the</c><00:41:49.050><c> sizes</c><00:41:49.880><c> for</c><00:41:50.880><c> the</c><00:41:50.940><c> various</c><00:41:51.240><c> m</c><00:41:51.390><c> buffs</c>

00:41:51.589 --> 00:41:51.599 align:start position:0%
all of the sizes for the various m buffs
 

00:41:51.599 --> 00:41:55.700 align:start position:0%
all of the sizes for the various m buffs
with<00:41:51.810><c> headers</c><00:41:52.410><c> and</c><00:41:52.710><c> clusters</c><00:41:54.500><c> we</c><00:41:55.500><c> may</c><00:41:55.680><c> be</c>

00:41:55.700 --> 00:41:55.710 align:start position:0%
with headers and clusters we may be
 

00:41:55.710 --> 00:41:57.290 align:start position:0%
with headers and clusters we may be
changing<00:41:55.920><c> these</c><00:41:56.220><c> things</c><00:41:56.520><c> again</c><00:41:56.819><c> we</c><00:41:57.089><c> change</c>

00:41:57.290 --> 00:41:57.300 align:start position:0%
changing these things again we change
 

00:41:57.300 --> 00:42:00.260 align:start position:0%
changing these things again we change
them<00:41:57.510><c> in</c><00:41:57.690><c> Tiger</c><00:41:58.050><c> to</c><00:41:58.260><c> add</c><00:41:58.380><c> support</c><00:41:58.829><c> for</c><00:41:59.270><c> and</c>

00:42:00.260 --> 00:42:00.270 align:start position:0%
them in Tiger to add support for and
 

00:42:00.270 --> 00:42:05.000 align:start position:0%
them in Tiger to add support for and
buff<00:42:00.480><c> tags</c><00:42:02.660><c> the</c><00:42:03.660><c> M</c><00:42:03.900><c> buff</c><00:42:04.050><c> KPI</c><00:42:04.410><c> is</c><00:42:04.530><c> documented</c>

00:42:05.000 --> 00:42:05.010 align:start position:0%
buff tags the M buff KPI is documented
 

00:42:05.010 --> 00:42:09.430 align:start position:0%
buff tags the M buff KPI is documented
in<00:42:05.339><c> this</c><00:42:05.700><c> flash</c><00:42:06.150><c> KPI</c><00:42:06.599><c> underscore</c><00:42:07.260><c> n</c><00:42:07.410><c> buff</c><00:42:07.619><c> eh</c>

00:42:09.430 --> 00:42:09.440 align:start position:0%
in this flash KPI underscore n buff eh
 

00:42:09.440 --> 00:42:11.240 align:start position:0%
in this flash KPI underscore n buff eh
there's<00:42:10.440><c> still</c><00:42:10.650><c> a</c><00:42:10.710><c> number</c><00:42:10.829><c> of</c><00:42:11.010><c> things</c><00:42:11.130><c> that</c>

00:42:11.240 --> 00:42:11.250 align:start position:0%
there's still a number of things that
 

00:42:11.250 --> 00:42:12.349 align:start position:0%
there's still a number of things that
are<00:42:11.400><c> missing</c><00:42:11.520><c> and</c><00:42:11.819><c> we're</c><00:42:11.940><c> working</c><00:42:12.180><c> to</c><00:42:12.270><c> get</c>

00:42:12.349 --> 00:42:12.359 align:start position:0%
are missing and we're working to get
 

00:42:12.359 --> 00:42:14.800 align:start position:0%
are missing and we're working to get
these<00:42:12.540><c> in</c><00:42:12.750><c> there</c><00:42:13.410><c> as</c><00:42:13.589><c> quickly</c><00:42:13.800><c> as</c><00:42:13.980><c> we</c><00:42:14.040><c> can</c>

00:42:14.800 --> 00:42:14.810 align:start position:0%
these in there as quickly as we can
 

00:42:14.810 --> 00:42:17.359 align:start position:0%
these in there as quickly as we can
there's<00:42:15.810><c> no</c><00:42:15.960><c> access</c><00:42:16.470><c> to</c><00:42:16.500><c> the</c><00:42:16.710><c> routing</c><00:42:17.010><c> tables</c>

00:42:17.359 --> 00:42:17.369 align:start position:0%
there's no access to the routing tables
 

00:42:17.369 --> 00:42:19.280 align:start position:0%
there's no access to the routing tables
which<00:42:18.300><c> makes</c><00:42:18.599><c> it</c><00:42:18.720><c> a</c><00:42:18.810><c> little</c><00:42:18.930><c> bit</c><00:42:19.109><c> difficult</c>

00:42:19.280 --> 00:42:19.290 align:start position:0%
which makes it a little bit difficult
 

00:42:19.290 --> 00:42:20.930 align:start position:0%
which makes it a little bit difficult
for<00:42:19.530><c> the</c><00:42:19.710><c> plumbers</c><00:42:20.010><c> to</c><00:42:20.369><c> perform</c><00:42:20.700><c> their</c><00:42:20.819><c> our</c>

00:42:20.930 --> 00:42:20.940 align:start position:0%
for the plumbers to perform their our
 

00:42:20.940 --> 00:42:24.170 align:start position:0%
for the plumbers to perform their our
code<00:42:21.210><c> correctly</c><00:42:22.400><c> there's</c><00:42:23.400><c> also</c><00:42:23.579><c> no</c><00:42:23.760><c> access</c><00:42:24.150><c> to</c>

00:42:24.170 --> 00:42:24.180 align:start position:0%
code correctly there's also no access to
 

00:42:24.180 --> 00:42:27.050 align:start position:0%
code correctly there's also no access to
BPS<00:42:24.660><c> but</c><00:42:25.230><c> we</c><00:42:25.440><c> will</c><00:42:25.589><c> be</c><00:42:25.710><c> providing</c><00:42:25.890><c> access</c><00:42:26.220><c> for</c>

00:42:27.050 --> 00:42:27.060 align:start position:0%
BPS but we will be providing access for
 

00:42:27.060 --> 00:42:30.620 align:start position:0%
BPS but we will be providing access for
tiger<00:42:28.400><c> there</c><00:42:29.400><c> are</c><00:42:29.490><c> no</c><00:42:29.609><c> accessories</c><00:42:30.150><c> for</c>

00:42:30.620 --> 00:42:30.630 align:start position:0%
tiger there are no accessories for
 

00:42:30.630 --> 00:42:32.180 align:start position:0%
tiger there are no accessories for
indicating<00:42:31.380><c> that</c><00:42:31.560><c> you</c><00:42:31.650><c> support</c><00:42:32.010><c> hardware</c>

00:42:32.180 --> 00:42:32.190 align:start position:0%
indicating that you support hardware
 

00:42:32.190 --> 00:42:35.030 align:start position:0%
indicating that you support hardware
checksums<00:42:32.760><c> or</c><00:42:33.000><c> for</c><00:42:33.750><c> detecting</c><00:42:34.470><c> that</c><00:42:34.560><c> a</c><00:42:34.619><c> packet</c>

00:42:35.030 --> 00:42:35.040 align:start position:0%
checksums or for detecting that a packet
 

00:42:35.040 --> 00:42:37.220 align:start position:0%
checksums or for detecting that a packet
requires<00:42:35.910><c> or</c><00:42:36.270><c> request</c><00:42:36.660><c> some</c><00:42:36.900><c> hardware</c>

00:42:37.220 --> 00:42:37.230 align:start position:0%
requires or request some hardware
 

00:42:37.230 --> 00:42:39.050 align:start position:0%
requires or request some hardware
checksum<00:42:37.619><c> there</c><00:42:38.040><c> are</c><00:42:38.160><c> the</c><00:42:38.310><c> two</c><00:42:38.430><c> functions</c><00:42:38.640><c> for</c>

00:42:39.050 --> 00:42:39.060 align:start position:0%
checksum there are the two functions for
 

00:42:39.060 --> 00:42:40.790 align:start position:0%
checksum there are the two functions for
clearing<00:42:39.540><c> those</c><00:42:39.630><c> flags</c><00:42:39.960><c> on</c><00:42:40.200><c> both</c><00:42:40.380><c> the</c><00:42:40.500><c> inbound</c>

00:42:40.790 --> 00:42:40.800 align:start position:0%
clearing those flags on both the inbound
 

00:42:40.800 --> 00:42:44.390 align:start position:0%
clearing those flags on both the inbound
and<00:42:40.920><c> outbound</c><00:42:40.980><c> side</c><00:42:42.859><c> there</c><00:42:43.859><c> isn't</c><00:42:44.310><c> a</c><00:42:44.369><c> whole</c>

00:42:44.390 --> 00:42:44.400 align:start position:0%
and outbound side there isn't a whole
 

00:42:44.400 --> 00:42:46.370 align:start position:0%
and outbound side there isn't a whole
lot<00:42:44.550><c> of</c><00:42:44.730><c> sample</c><00:42:45.030><c> code</c><00:42:45.180><c> but</c><00:42:45.630><c> we're</c><00:42:46.020><c> working</c><00:42:46.319><c> to</c>

00:42:46.370 --> 00:42:46.380 align:start position:0%
lot of sample code but we're working to
 

00:42:46.380 --> 00:42:49.040 align:start position:0%
lot of sample code but we're working to
change<00:42:46.410><c> that</c><00:42:47.119><c> in</c><00:42:48.119><c> addition</c><00:42:48.359><c> the</c><00:42:48.750><c> colonel</c>

00:42:49.040 --> 00:42:49.050 align:start position:0%
change that in addition the colonel
 

00:42:49.050 --> 00:42:50.450 align:start position:0%
change that in addition the colonel
framework<00:42:49.380><c> hasn't</c><00:42:49.710><c> been</c><00:42:49.800><c> completely</c><00:42:49.980><c> cleaned</c>

00:42:50.450 --> 00:42:50.460 align:start position:0%
framework hasn't been completely cleaned
 

00:42:50.460 --> 00:42:53.630 align:start position:0%
framework hasn't been completely cleaned
up<00:42:50.579><c> yet</c><00:42:50.790><c> for</c><00:42:51.599><c> Tiger</c><00:42:52.410><c> GM</c><00:42:52.710><c> we're</c><00:42:53.099><c> hoping</c><00:42:53.250><c> to</c><00:42:53.490><c> get</c>

00:42:53.630 --> 00:42:53.640 align:start position:0%
up yet for Tiger GM we're hoping to get
 

00:42:53.640 --> 00:42:55.250 align:start position:0%
up yet for Tiger GM we're hoping to get
the<00:42:54.030><c> colonel</c><00:42:54.300><c> framework</c><00:42:54.630><c> clean</c><00:42:54.960><c> so</c><00:42:55.230><c> that</c>

00:42:55.250 --> 00:42:55.260 align:start position:0%
the colonel framework clean so that
 

00:42:55.260 --> 00:42:58.160 align:start position:0%
the colonel framework clean so that
there<00:42:55.530><c> aren't</c><00:42:55.710><c> any</c><00:42:56.359><c> data</c><00:42:57.359><c> structures</c><00:42:57.839><c> or</c>

00:42:58.160 --> 00:42:58.170 align:start position:0%
there aren't any data structures or
 

00:42:58.170 --> 00:43:01.160 align:start position:0%
there aren't any data structures or
functions<00:42:58.680><c> in</c><00:42:58.920><c> that</c><00:42:59.700><c> framework</c><00:43:00.030><c> that</c><00:43:00.750><c> aren't</c>

00:43:01.160 --> 00:43:01.170 align:start position:0%
functions in that framework that aren't
 

00:43:01.170 --> 00:43:05.450 align:start position:0%
functions in that framework that aren't
part<00:43:01.319><c> of</c><00:43:01.440><c> the</c><00:43:01.500><c> KPI</c><00:43:01.920><c> in</c><00:43:02.730><c> addition</c><00:43:03.510><c> the</c><00:43:04.380><c> list</c><00:43:05.280><c> of</c>

00:43:05.450 --> 00:43:05.460 align:start position:0%
part of the KPI in addition the list of
 

00:43:05.460 --> 00:43:07.550 align:start position:0%
part of the KPI in addition the list of
exported<00:43:06.030><c> symbols</c><00:43:06.359><c> to</c><00:43:06.480><c> the</c><00:43:06.569><c> BFC</c><00:43:06.900><c> colonel</c><00:43:07.200><c> text</c>

00:43:07.550 --> 00:43:07.560 align:start position:0%
exported symbols to the BFC colonel text
 

00:43:07.560 --> 00:43:10.250 align:start position:0%
exported symbols to the BFC colonel text
hasn't<00:43:08.490><c> been</c><00:43:08.609><c> cleaned</c><00:43:08.819><c> up</c><00:43:08.970><c> yet</c><00:43:09.119><c> so</c><00:43:09.359><c> that</c><00:43:09.510><c> there</c>

00:43:10.250 --> 00:43:10.260 align:start position:0%
hasn't been cleaned up yet so that there
 

00:43:10.260 --> 00:43:11.870 align:start position:0%
hasn't been cleaned up yet so that there
are<00:43:10.380><c> still</c><00:43:10.619><c> some</c><00:43:10.800><c> symbols</c><00:43:11.190><c> in</c><00:43:11.310><c> there</c><00:43:11.460><c> that</c><00:43:11.730><c> we</c>

00:43:11.870 --> 00:43:11.880 align:start position:0%
are still some symbols in there that we
 

00:43:11.880 --> 00:43:14.290 align:start position:0%
are still some symbols in there that we
don't<00:43:11.910><c> want</c><00:43:12.359><c> to</c><00:43:12.599><c> have</c><00:43:12.750><c> as</c><00:43:12.960><c> part</c><00:43:13.109><c> of</c><00:43:13.200><c> the</c><00:43:13.319><c> KPI</c>

00:43:14.290 --> 00:43:14.300 align:start position:0%
don't want to have as part of the KPI
 

00:43:14.300 --> 00:43:20.980 align:start position:0%
don't want to have as part of the KPI
but<00:43:15.300><c> for</c><00:43:15.450><c> Tiger</c><00:43:15.750><c> GM</c><00:43:16.260><c> we</c><00:43:17.040><c> will</c><00:43:17.250><c> clean</c><00:43:18.000><c> that</c><00:43:18.030><c> up</c>

00:43:20.980 --> 00:43:20.990 align:start position:0%
 
 

00:43:20.990 --> 00:43:23.680 align:start position:0%
 
in<00:43:21.990><c> addition</c><00:43:22.230><c> we</c><00:43:22.410><c> really</c><00:43:22.740><c> need</c><00:43:22.890><c> your</c><00:43:22.980><c> feedback</c>

00:43:23.680 --> 00:43:23.690 align:start position:0%
in addition we really need your feedback
 

00:43:23.690 --> 00:43:26.359 align:start position:0%
in addition we really need your feedback
we<00:43:24.690><c> have</c><00:43:24.839><c> an</c><00:43:24.930><c> email</c><00:43:25.050><c> address</c><00:43:25.349><c> set</c><00:43:25.589><c> up</c><00:43:25.710><c> kpi</c>

00:43:26.359 --> 00:43:26.369 align:start position:0%
we have an email address set up kpi
 

00:43:26.369 --> 00:43:29.180 align:start position:0%
we have an email address set up kpi
feedback<00:43:27.119><c> at</c><00:43:27.329><c> apple</c><00:43:27.599><c> com</c><00:43:27.930><c> and</c><00:43:28.230><c> we</c><00:43:28.859><c> need</c><00:43:28.980><c> you</c><00:43:29.099><c> to</c>

00:43:29.180 --> 00:43:29.190 align:start position:0%
feedback at apple com and we need you to
 

00:43:29.190 --> 00:43:30.890 align:start position:0%
feedback at apple com and we need you to
get<00:43:29.280><c> started</c><00:43:29.670><c> soon</c><00:43:30.060><c> because</c><00:43:30.510><c> the</c><00:43:30.540><c> earlier</c>

00:43:30.890 --> 00:43:30.900 align:start position:0%
get started soon because the earlier
 

00:43:30.900 --> 00:43:33.589 align:start position:0%
get started soon because the earlier
that<00:43:31.050><c> you</c><00:43:31.140><c> give</c><00:43:31.260><c> us</c><00:43:31.380><c> feedback</c><00:43:31.560><c> but</c><00:43:32.599><c> easier</c>

00:43:33.589 --> 00:43:33.599 align:start position:0%
that you give us feedback but easier
 

00:43:33.599 --> 00:43:34.609 align:start position:0%
that you give us feedback but easier
it's<00:43:33.690><c> going</c><00:43:33.780><c> to</c><00:43:33.869><c> be</c><00:43:33.960><c> for</c><00:43:34.140><c> us</c><00:43:34.170><c> to</c><00:43:34.380><c> get</c><00:43:34.500><c> the</c>

00:43:34.609 --> 00:43:34.619 align:start position:0%
it's going to be for us to get the
 

00:43:34.619 --> 00:43:36.740 align:start position:0%
it's going to be for us to get the
changes<00:43:34.950><c> that</c><00:43:34.980><c> you</c><00:43:35.190><c> need</c><00:43:35.400><c> into</c><00:43:35.790><c> the</c><00:43:35.849><c> kernel</c><00:43:36.030><c> so</c>

00:43:36.740 --> 00:43:36.750 align:start position:0%
changes that you need into the kernel so
 

00:43:36.750 --> 00:43:38.240 align:start position:0%
changes that you need into the kernel so
that<00:43:36.900><c> you</c><00:43:36.960><c> can</c><00:43:37.079><c> get</c><00:43:37.200><c> your</c><00:43:37.380><c> network</c><00:43:37.980><c> criminal</c>

00:43:38.240 --> 00:43:38.250 align:start position:0%
that you can get your network criminal
 

00:43:38.250 --> 00:43:42.400 align:start position:0%
that you can get your network criminal
extension<00:43:38.609><c> working</c><00:43:38.910><c> on</c><00:43:39.030><c> tiger</c>

00:43:42.400 --> 00:43:42.410 align:start position:0%
 
 

00:43:42.410 --> 00:43:43.990 align:start position:0%
 
there<00:43:43.039><c> are</c><00:43:43.160><c> some</c><00:43:43.250><c> resources</c><00:43:43.520><c> for</c><00:43:43.970><c> more</c>

00:43:43.990 --> 00:43:44.000 align:start position:0%
there are some resources for more
 

00:43:44.000 --> 00:43:46.630 align:start position:0%
there are some resources for more
information<00:43:44.599><c> Craig</c><00:43:45.530><c> Keithley</c><00:43:45.890><c> is</c><00:43:45.920><c> the</c><00:43:46.400><c> IO</c>

00:43:46.630 --> 00:43:46.640 align:start position:0%
information Craig Keithley is the IO
 

00:43:46.640 --> 00:43:49.510 align:start position:0%
information Craig Keithley is the IO
technology<00:43:47.210><c> invent</c><00:43:47.480><c> evangelist</c><00:43:48.200><c> and</c><00:43:48.520><c> there's</c>

00:43:49.510 --> 00:43:49.520 align:start position:0%
technology invent evangelist and there's
 

00:43:49.520 --> 00:43:52.270 align:start position:0%
technology invent evangelist and there's
the<00:43:49.609><c> KPI</c><00:43:50.329><c> feedback</c><00:43:50.720><c> email</c><00:43:50.960><c> address</c><00:43:51.410><c> kpi</c><00:43:52.010><c> dash</c>

00:43:52.270 --> 00:43:52.280 align:start position:0%
the KPI feedback email address kpi dash
 

00:43:52.280 --> 00:43:56.289 align:start position:0%
the KPI feedback email address kpi dash
feedback<00:43:52.700><c> and</c><00:43:52.910><c> apple</c><00:43:53.089><c> com</c><00:43:54.640><c> in</c><00:43:55.640><c> addition</c><00:43:55.910><c> we</c>

00:43:56.289 --> 00:43:56.299 align:start position:0%
feedback and apple com in addition we
 

00:43:56.299 --> 00:44:00.400 align:start position:0%
feedback and apple com in addition we
have<00:43:56.990><c> the</c><00:43:57.559><c> some</c><00:43:58.369><c> more</c><00:43:58.520><c> reference</c><00:43:58.880><c> stuff</c><00:43:59.510><c> the</c>

00:44:00.400 --> 00:44:00.410 align:start position:0%
have the some more reference stuff the
 

00:44:00.410 --> 00:44:04.210 align:start position:0%
have the some more reference stuff the
NK<00:44:00.710><c> the</c><00:44:01.640><c> network</c><00:44:02.119><c> colonel</c><00:44:02.359><c> extension</c><00:44:03.220><c> KPI</c>

00:44:04.210 --> 00:44:04.220 align:start position:0%
NK the network colonel extension KPI
 

00:44:04.220 --> 00:44:07.359 align:start position:0%
NK the network colonel extension KPI
reference<00:44:04.700><c> is</c><00:44:05.109><c> available</c><00:44:06.109><c> online</c><00:44:06.380><c> and</c><00:44:07.190><c> also</c>

00:44:07.359 --> 00:44:07.369 align:start position:0%
reference is available online and also
 

00:44:07.369 --> 00:44:11.920 align:start position:0%
reference is available online and also
in<00:44:07.849><c> the</c><00:44:08.359><c> developer</c><00:44:08.780><c> folder</c><00:44:10.150><c> that</c><00:44:11.150><c> gets</c>

00:44:11.920 --> 00:44:11.930 align:start position:0%
in the developer folder that gets
 

00:44:11.930 --> 00:44:20.680 align:start position:0%
in the developer folder that gets
installed<00:44:12.559><c> with</c><00:44:12.950><c> Tiger</c><00:44:19.150><c> there's</c><00:44:20.150><c> some</c><00:44:20.569><c> more</c>

00:44:20.680 --> 00:44:20.690 align:start position:0%
installed with Tiger there's some more
 

00:44:20.690 --> 00:44:22.990 align:start position:0%
installed with Tiger there's some more
reference

