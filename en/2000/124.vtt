WEBVTT
Kind: captions
Language: en

00:00:09.220 --> 00:00:11.740 align:start position:0%
 
we're<00:00:10.220><c> going</c><00:00:10.310><c> to</c><00:00:10.370><c> start</c><00:00:10.430><c> by</c><00:00:10.640><c> talking</c><00:00:10.760><c> about</c><00:00:11.120><c> CF</c>

00:00:11.740 --> 00:00:11.750 align:start position:0%
we're going to start by talking about CF
 

00:00:11.750 --> 00:00:13.870 align:start position:0%
we're going to start by talking about CF
role<00:00:12.110><c> in</c><00:00:12.380><c> Mac</c><00:00:12.560><c> OS</c><00:00:12.590><c> 10</c><00:00:13.070><c> as</c><00:00:13.250><c> a</c><00:00:13.280><c> whole</c><00:00:13.520><c> then</c><00:00:13.790><c> we're</c>

00:00:13.870 --> 00:00:13.880 align:start position:0%
role in Mac OS 10 as a whole then we're
 

00:00:13.880 --> 00:00:15.710 align:start position:0%
role in Mac OS 10 as a whole then we're
going<00:00:13.970><c> to</c><00:00:14.059><c> look</c><00:00:14.150><c> at</c><00:00:14.240><c> some</c><00:00:14.450><c> of</c><00:00:14.480><c> the</c><00:00:14.600><c> concert</c>

00:00:15.710 --> 00:00:15.720 align:start position:0%
going to look at some of the concert
 

00:00:15.720 --> 00:00:18.320 align:start position:0%
going to look at some of the concert
there<00:00:16.080><c> and</c><00:00:16.380><c> finally</c><00:00:17.190><c> in</c><00:00:17.550><c> this</c><00:00:17.790><c> talk</c><00:00:18.060><c> will</c><00:00:18.300><c> be</c>

00:00:18.320 --> 00:00:18.330 align:start position:0%
there and finally in this talk will be
 

00:00:18.330 --> 00:00:23.150 align:start position:0%
there and finally in this talk will be
introducing<00:00:18.930><c> the</c><00:00:19.050><c> basic</c><00:00:19.440><c> CF</c><00:00:19.740><c> type</c><00:00:20.900><c> so</c><00:00:22.130><c> when</c><00:00:23.130><c> I</c>

00:00:23.150 --> 00:00:23.160 align:start position:0%
introducing the basic CF type so when I
 

00:00:23.160 --> 00:00:25.160 align:start position:0%
introducing the basic CF type so when I
talk<00:00:23.310><c> about</c><00:00:23.550><c> core</c><00:00:24.000><c> foundation</c><00:00:24.690><c> this</c><00:00:24.840><c> is</c><00:00:24.900><c> the</c>

00:00:25.160 --> 00:00:25.170 align:start position:0%
talk about core foundation this is the
 

00:00:25.170 --> 00:00:27.890 align:start position:0%
talk about core foundation this is the
big<00:00:25.350><c> take-home</c><00:00:25.920><c> point</c><00:00:26.250><c> core</c><00:00:27.029><c> foundation</c><00:00:27.689><c> is</c>

00:00:27.890 --> 00:00:27.900 align:start position:0%
big take-home point core foundation is
 

00:00:27.900 --> 00:00:32.359 align:start position:0%
big take-home point core foundation is
the<00:00:28.140><c> lingua</c><00:00:28.380><c> franca</c><00:00:29.070><c> in</c><00:00:29.279><c> Mac</c><00:00:29.850><c> OS</c><00:00:30.029><c> 10</c><00:00:30.800><c> well</c><00:00:31.800><c> what</c>

00:00:32.359 --> 00:00:32.369 align:start position:0%
the lingua franca in Mac OS 10 well what
 

00:00:32.369 --> 00:00:35.960 align:start position:0%
the lingua franca in Mac OS 10 well what
does<00:00:32.460><c> that</c><00:00:32.579><c> mean</c><00:00:32.880><c> a</c><00:00:34.250><c> lingua</c><00:00:35.250><c> franca</c><00:00:35.730><c> is</c><00:00:35.910><c> a</c>

00:00:35.960 --> 00:00:35.970 align:start position:0%
does that mean a lingua franca is a
 

00:00:35.970 --> 00:00:38.210 align:start position:0%
does that mean a lingua franca is a
medium<00:00:36.420><c> of</c><00:00:36.540><c> communication</c><00:00:36.770><c> between</c><00:00:37.770><c> people</c>

00:00:38.210 --> 00:00:38.220 align:start position:0%
medium of communication between people
 

00:00:38.220 --> 00:00:41.510 align:start position:0%
medium of communication between people
of<00:00:38.579><c> different</c><00:00:38.750><c> different</c><00:00:39.750><c> languages</c><00:00:40.340><c> so</c><00:00:41.340><c> what</c>

00:00:41.510 --> 00:00:41.520 align:start position:0%
of different different languages so what
 

00:00:41.520 --> 00:00:44.860 align:start position:0%
of different different languages so what
are<00:00:41.610><c> the</c><00:00:41.700><c> different</c><00:00:42.000><c> languages</c><00:00:42.450><c> on</c><00:00:42.630><c> Mac</c><00:00:42.810><c> OS</c><00:00:42.840><c> 10</c>

00:00:44.860 --> 00:00:44.870 align:start position:0%
are the different languages on Mac OS 10
 

00:00:44.870 --> 00:00:48.830 align:start position:0%
are the different languages on Mac OS 10
carbon<00:00:45.870><c> and</c><00:00:46.230><c> coco</c><00:00:47.090><c> coir</c><00:00:48.090><c> foundation</c><00:00:48.690><c> is</c><00:00:48.810><c> a</c>

00:00:48.830 --> 00:00:48.840 align:start position:0%
carbon and coco coir foundation is a
 

00:00:48.840 --> 00:00:51.530 align:start position:0%
carbon and coco coir foundation is a
substrate<00:00:49.500><c> layer</c><00:00:49.800><c> that</c><00:00:50.340><c> lives</c><00:00:50.640><c> beneath</c><00:00:50.940><c> both</c>

00:00:51.530 --> 00:00:51.540 align:start position:0%
substrate layer that lives beneath both
 

00:00:51.540 --> 00:00:53.930 align:start position:0%
substrate layer that lives beneath both
carbon<00:00:52.110><c> and</c><00:00:52.260><c> Coco</c><00:00:52.650><c> so</c><00:00:53.070><c> it</c><00:00:53.280><c> provides</c><00:00:53.640><c> the</c>

00:00:53.930 --> 00:00:53.940 align:start position:0%
carbon and Coco so it provides the
 

00:00:53.940 --> 00:00:55.790 align:start position:0%
carbon and Coco so it provides the
common<00:00:54.360><c> language</c><00:00:54.540><c> by</c><00:00:54.990><c> which</c><00:00:55.020><c> those</c><00:00:55.470><c> two</c>

00:00:55.790 --> 00:00:55.800 align:start position:0%
common language by which those two
 

00:00:55.800 --> 00:00:58.360 align:start position:0%
common language by which those two
environments<00:00:56.460><c> speak</c><00:00:56.820><c> to</c><00:00:57.000><c> one</c><00:00:57.150><c> another</c><00:00:57.180><c> as</c>

00:00:58.360 --> 00:00:58.370 align:start position:0%
environments speak to one another as
 

00:00:58.370 --> 00:01:01.520 align:start position:0%
environments speak to one another as
such<00:00:59.370><c> it</c><00:00:59.610><c> bridges</c><00:00:59.910><c> the</c><00:01:00.120><c> basic</c><00:01:00.720><c> types</c><00:01:01.020><c> between</c>

00:01:01.520 --> 00:01:01.530 align:start position:0%
such it bridges the basic types between
 

00:01:01.530 --> 00:01:04.399 align:start position:0%
such it bridges the basic types between
both<00:01:01.800><c> stacks</c><00:01:02.250><c> and</c><00:01:02.700><c> provides</c><00:01:03.510><c> those</c><00:01:03.870><c> common</c>

00:01:04.399 --> 00:01:04.409 align:start position:0%
both stacks and provides those common
 

00:01:04.409 --> 00:01:06.560 align:start position:0%
both stacks and provides those common
services<00:01:04.890><c> that</c><00:01:05.159><c> both</c><00:01:05.400><c> stacks</c><00:01:05.759><c> need</c><00:01:06.119><c> to</c><00:01:06.330><c> share</c>

00:01:06.560 --> 00:01:06.570 align:start position:0%
services that both stacks need to share
 

00:01:06.570 --> 00:01:08.570 align:start position:0%
services that both stacks need to share
things<00:01:07.020><c> like</c><00:01:07.229><c> the</c><00:01:07.409><c> pasteboard</c><00:01:08.009><c> the</c><00:01:08.220><c> event</c>

00:01:08.570 --> 00:01:08.580 align:start position:0%
things like the pasteboard the event
 

00:01:08.580 --> 00:01:14.690 align:start position:0%
things like the pasteboard the event
model<00:01:10.759><c> so</c><00:01:11.759><c> just</c><00:01:12.180><c> as</c><00:01:12.330><c> an</c><00:01:12.540><c> example</c><00:01:12.630><c> here</c><00:01:13.409><c> you</c><00:01:13.700><c> see</c>

00:01:14.690 --> 00:01:14.700 align:start position:0%
model so just as an example here you see
 

00:01:14.700 --> 00:01:16.399 align:start position:0%
model so just as an example here you see
the<00:01:14.729><c> carbon</c><00:01:15.180><c> types</c><00:01:15.390><c> on</c><00:01:15.600><c> the</c><00:01:15.720><c> right</c><00:01:15.930><c> and</c><00:01:16.229><c> the</c>

00:01:16.399 --> 00:01:16.409 align:start position:0%
the carbon types on the right and the
 

00:01:16.409 --> 00:01:18.050 align:start position:0%
the carbon types on the right and the
cocoa<00:01:16.710><c> types</c><00:01:16.979><c> on</c><00:01:17.189><c> the</c><00:01:17.220><c> left</c><00:01:17.520><c> corefoundation</c>

00:01:18.050 --> 00:01:18.060 align:start position:0%
cocoa types on the left corefoundation
 

00:01:18.060 --> 00:01:21.800 align:start position:0%
cocoa types on the left corefoundation
acts<00:01:18.780><c> to</c><00:01:19.350><c> convert</c><00:01:20.159><c> to</c><00:01:20.370><c> and</c><00:01:20.580><c> fun</c><00:01:20.970><c> to</c><00:01:21.420><c> and</c><00:01:21.570><c> from</c>

00:01:21.800 --> 00:01:21.810 align:start position:0%
acts to convert to and fun to and from
 

00:01:21.810 --> 00:01:26.600 align:start position:0%
acts to convert to and fun to and from
the<00:01:21.990><c> types</c><00:01:22.200><c> on</c><00:01:22.409><c> either</c><00:01:22.590><c> side</c><00:01:25.610><c> hopefully</c>

00:01:26.600 --> 00:01:26.610 align:start position:0%
the types on either side hopefully
 

00:01:26.610 --> 00:01:28.850 align:start position:0%
the types on either side hopefully
you've<00:01:27.000><c> seen</c><00:01:27.270><c> this</c><00:01:27.480><c> diagram</c><00:01:28.080><c> by</c><00:01:28.290><c> now</c><00:01:28.500><c> this</c><00:01:28.740><c> is</c>

00:01:28.850 --> 00:01:28.860 align:start position:0%
you've seen this diagram by now this is
 

00:01:28.860 --> 00:01:31.580 align:start position:0%
you've seen this diagram by now this is
the<00:01:28.890><c> basic</c><00:01:29.190><c> architecture</c><00:01:30.120><c> on</c><00:01:30.330><c> Mac</c><00:01:30.600><c> OS</c><00:01:30.810><c> 10</c><00:01:31.290><c> I</c>

00:01:31.580 --> 00:01:31.590 align:start position:0%
the basic architecture on Mac OS 10 I
 

00:01:31.590 --> 00:01:33.680 align:start position:0%
the basic architecture on Mac OS 10 I
want<00:01:32.250><c> to</c><00:01:32.340><c> point</c><00:01:32.550><c> out</c><00:01:32.670><c> the</c><00:01:32.850><c> core</c><00:01:33.090><c> services</c>

00:01:33.680 --> 00:01:33.690 align:start position:0%
want to point out the core services
 

00:01:33.690 --> 00:01:35.750 align:start position:0%
want to point out the core services
layer<00:01:33.960><c> that</c><00:01:34.260><c> lives</c><00:01:34.470><c> below</c><00:01:34.890><c> the</c><00:01:34.920><c> application</c>

00:01:35.750 --> 00:01:35.760 align:start position:0%
layer that lives below the application
 

00:01:35.760 --> 00:01:37.790 align:start position:0%
layer that lives below the application
services<00:01:36.270><c> the</c><00:01:36.479><c> graphical</c><00:01:37.080><c> services</c><00:01:37.620><c> like</c>

00:01:37.790 --> 00:01:37.800 align:start position:0%
services the graphical services like
 

00:01:37.800 --> 00:01:40.790 align:start position:0%
services the graphical services like
quartz<00:01:38.190><c> and</c><00:01:38.460><c> OpenGL</c><00:01:39.090><c> and</c><00:01:39.120><c> QuickTime</c><00:01:39.960><c> but</c>

00:01:40.790 --> 00:01:40.800 align:start position:0%
quartz and OpenGL and QuickTime but
 

00:01:40.800 --> 00:01:44.330 align:start position:0%
quartz and OpenGL and QuickTime but
above<00:01:41.130><c> Darwin</c><00:01:41.850><c> the</c><00:01:42.030><c> operating</c><00:01:42.600><c> system</c><00:01:43.340><c> that</c>

00:01:44.330 --> 00:01:44.340 align:start position:0%
above Darwin the operating system that
 

00:01:44.340 --> 00:01:46.490 align:start position:0%
above Darwin the operating system that
layer<00:01:44.640><c> is</c><00:01:44.940><c> where</c><00:01:45.150><c> we</c><00:01:45.360><c> live</c><00:01:45.659><c> we</c><00:01:45.990><c> provide</c><00:01:46.320><c> the</c>

00:01:46.490 --> 00:01:46.500 align:start position:0%
layer is where we live we provide the
 

00:01:46.500 --> 00:01:48.620 align:start position:0%
layer is where we live we provide the
common<00:01:46.950><c> services</c><00:01:47.430><c> needed</c><00:01:47.790><c> by</c><00:01:48.030><c> everything</c>

00:01:48.620 --> 00:01:48.630 align:start position:0%
common services needed by everything
 

00:01:48.630 --> 00:01:51.200 align:start position:0%
common services needed by everything
above<00:01:48.930><c> us</c><00:01:49.110><c> that</c><00:01:49.950><c> does</c><00:01:50.130><c> not</c><00:01:50.310><c> depend</c><00:01:50.940><c> on</c>

00:01:51.200 --> 00:01:51.210 align:start position:0%
above us that does not depend on
 

00:01:51.210 --> 00:01:54.649 align:start position:0%
above us that does not depend on
graphics<00:01:52.490><c> so</c><00:01:53.490><c> if</c><00:01:53.580><c> you</c><00:01:53.700><c> look</c><00:01:53.850><c> inside</c><00:01:54.000><c> the</c><00:01:54.450><c> core</c>

00:01:54.649 --> 00:01:54.659 align:start position:0%
graphics so if you look inside the core
 

00:01:54.659 --> 00:01:56.660 align:start position:0%
graphics so if you look inside the core
services<00:01:55.200><c> layer</c><00:01:55.470><c> you'll</c><00:01:55.950><c> see</c><00:01:56.130><c> a</c><00:01:56.159><c> number</c><00:01:56.370><c> of</c>

00:01:56.660 --> 00:01:56.670 align:start position:0%
services layer you'll see a number of
 

00:01:56.670 --> 00:01:58.219 align:start position:0%
services layer you'll see a number of
the<00:01:56.790><c> non</c><00:01:56.970><c> graphical</c><00:01:57.630><c> managers</c><00:01:58.080><c> you're</c>

00:01:58.219 --> 00:01:58.229 align:start position:0%
the non graphical managers you're
 

00:01:58.229 --> 00:02:00.080 align:start position:0%
the non graphical managers you're
familiar<00:01:58.409><c> with</c><00:01:58.740><c> things</c><00:01:59.520><c> like</c><00:01:59.610><c> the</c><00:01:59.820><c> file</c>

00:02:00.080 --> 00:02:00.090 align:start position:0%
familiar with things like the file
 

00:02:00.090 --> 00:02:02.539 align:start position:0%
familiar with things like the file
managers<00:02:00.690><c> memory</c><00:02:01.140><c> manager</c><00:02:01.619><c> resource</c><00:02:02.010><c> manager</c>

00:02:02.539 --> 00:02:02.549 align:start position:0%
managers memory manager resource manager
 

00:02:02.549 --> 00:02:05.030 align:start position:0%
managers memory manager resource manager
and<00:02:02.729><c> in</c><00:02:03.720><c> with</c><00:02:03.930><c> all</c><00:02:04.110><c> of</c><00:02:04.260><c> those</c><00:02:04.440><c> is</c><00:02:04.740><c> core</c>

00:02:05.030 --> 00:02:05.040 align:start position:0%
and in with all of those is core
 

00:02:05.040 --> 00:02:07.370 align:start position:0%
and in with all of those is core
foundation<00:02:05.790><c> in</c><00:02:06.030><c> fact</c><00:02:06.060><c> core</c><00:02:06.540><c> foundation</c><00:02:07.200><c> were</c>

00:02:07.370 --> 00:02:07.380 align:start position:0%
foundation in fact core foundation were
 

00:02:07.380 --> 00:02:09.529 align:start position:0%
foundation in fact core foundation were
you<00:02:07.530><c> to</c><00:02:07.680><c> look</c><00:02:07.830><c> inside</c><00:02:07.979><c> the</c><00:02:08.789><c> core</c><00:02:09.000><c> services</c>

00:02:09.529 --> 00:02:09.539 align:start position:0%
you to look inside the core services
 

00:02:09.539 --> 00:02:15.100 align:start position:0%
you to look inside the core services
code<00:02:10.319><c> lies</c><00:02:10.979><c> below</c><00:02:11.340><c> almost</c><00:02:11.909><c> all</c><00:02:12.360><c> of</c><00:02:12.540><c> those</c>

00:02:15.100 --> 00:02:15.110 align:start position:0%
 
 

00:02:15.110 --> 00:02:20.449 align:start position:0%
 
there<00:02:16.110><c> we</c><00:02:16.260><c> go</c><00:02:16.939><c> so</c><00:02:18.140><c> what</c><00:02:19.140><c> is</c><00:02:19.170><c> CF</c><00:02:19.739><c> it's</c><00:02:20.099><c> a</c><00:02:20.250><c> non</c>

00:02:20.449 --> 00:02:20.459 align:start position:0%
there we go so what is CF it's a non
 

00:02:20.459 --> 00:02:23.720 align:start position:0%
there we go so what is CF it's a non
graphical<00:02:21.239><c> substrate</c><00:02:21.840><c> library</c><00:02:22.500><c> available</c><00:02:23.220><c> to</c>

00:02:23.720 --> 00:02:23.730 align:start position:0%
graphical substrate library available to
 

00:02:23.730 --> 00:02:26.449 align:start position:0%
graphical substrate library available to
both<00:02:23.940><c> carbon</c><00:02:24.840><c> and</c><00:02:25.050><c> cocoa</c><00:02:25.560><c> in</c><00:02:25.740><c> fact</c><00:02:26.040><c> it's</c><00:02:26.310><c> even</c>

00:02:26.449 --> 00:02:26.459 align:start position:0%
both carbon and cocoa in fact it's even
 

00:02:26.459 --> 00:02:29.180 align:start position:0%
both carbon and cocoa in fact it's even
below<00:02:26.849><c> classic</c><00:02:27.480><c> it</c><00:02:28.200><c> is</c><00:02:28.500><c> written</c><00:02:28.680><c> in</c>

00:02:29.180 --> 00:02:29.190 align:start position:0%
below classic it is written in
 

00:02:29.190 --> 00:02:31.430 align:start position:0%
below classic it is written in
you're<00:02:29.370><c> see</c><00:02:29.700><c> because</c><00:02:30.030><c> that</c><00:02:30.450><c> is</c><00:02:30.750><c> the</c><00:02:30.960><c> common</c>

00:02:31.430 --> 00:02:31.440 align:start position:0%
you're see because that is the common
 

00:02:31.440 --> 00:02:33.460 align:start position:0%
you're see because that is the common
language<00:02:31.620><c> beneath</c><00:02:32.220><c> all</c><00:02:32.460><c> of</c><00:02:32.490><c> those</c><00:02:32.760><c> layers</c><00:02:32.910><c> and</c>

00:02:33.460 --> 00:02:33.470 align:start position:0%
language beneath all of those layers and
 

00:02:33.470 --> 00:02:36.130 align:start position:0%
language beneath all of those layers and
it's<00:02:34.470><c> designed</c><00:02:34.890><c> around</c><00:02:35.370><c> some</c><00:02:35.640><c> basic</c>

00:02:36.130 --> 00:02:36.140 align:start position:0%
it's designed around some basic
 

00:02:36.140 --> 00:02:42.260 align:start position:0%
it's designed around some basic
object-oriented<00:02:37.140><c> paradigm</c><00:02:39.860><c> so</c><00:02:40.910><c> CF</c><00:02:41.910><c> provides</c>

00:02:42.260 --> 00:02:42.270 align:start position:0%
object-oriented paradigm so CF provides
 

00:02:42.270 --> 00:02:44.930 align:start position:0%
object-oriented paradigm so CF provides
two<00:02:42.570><c> basic</c><00:02:42.960><c> things</c><00:02:43.200><c> to</c><00:02:43.410><c> the</c><00:02:43.530><c> system</c><00:02:43.920><c> the</c><00:02:44.670><c> first</c>

00:02:44.930 --> 00:02:44.940 align:start position:0%
two basic things to the system the first
 

00:02:44.940 --> 00:02:47.480 align:start position:0%
two basic things to the system the first
one<00:02:45.150><c> is</c><00:02:45.180><c> some</c><00:02:45.480><c> basic</c><00:02:45.930><c> types</c><00:02:46.260><c> by</c><00:02:46.830><c> which</c><00:02:47.070><c> all</c><00:02:47.310><c> of</c>

00:02:47.480 --> 00:02:47.490 align:start position:0%
one is some basic types by which all of
 

00:02:47.490 --> 00:02:49.130 align:start position:0%
one is some basic types by which all of
the<00:02:47.580><c> different</c><00:02:47.910><c> substrates</c><00:02:48.390><c> can</c><00:02:48.630><c> speak</c><00:02:48.930><c> so</c>

00:02:49.130 --> 00:02:49.140 align:start position:0%
the different substrates can speak so
 

00:02:49.140 --> 00:02:50.690 align:start position:0%
the different substrates can speak so
that's<00:02:49.290><c> things</c><00:02:49.530><c> like</c><00:02:49.620><c> strings</c><00:02:50.070><c> arrays</c><00:02:50.460><c> and</c>

00:02:50.690 --> 00:02:50.700 align:start position:0%
that's things like strings arrays and
 

00:02:50.700 --> 00:02:52.610 align:start position:0%
that's things like strings arrays and
dictionaries<00:02:50.760><c> and</c><00:02:51.510><c> then</c><00:02:51.960><c> we</c><00:02:52.080><c> combine</c><00:02:52.260><c> them</c>

00:02:52.610 --> 00:02:52.620 align:start position:0%
dictionaries and then we combine them
 

00:02:52.620 --> 00:02:54.320 align:start position:0%
dictionaries and then we combine them
together<00:02:52.770><c> in</c><00:02:53.130><c> an</c><00:02:53.250><c> abstraction</c><00:02:53.700><c> that</c><00:02:53.940><c> we</c><00:02:54.120><c> call</c>

00:02:54.320 --> 00:02:54.330 align:start position:0%
together in an abstraction that we call
 

00:02:54.330 --> 00:02:56.600 align:start position:0%
together in an abstraction that we call
property<00:02:54.810><c> list</c><00:02:55.020><c> the</c><00:02:56.010><c> other</c><00:02:56.190><c> thing</c><00:02:56.490><c> it</c>

00:02:56.600 --> 00:02:56.610 align:start position:0%
property list the other thing it
 

00:02:56.610 --> 00:02:59.240 align:start position:0%
property list the other thing it
provides<00:02:57.000><c> is</c><00:02:57.300><c> the</c><00:02:57.780><c> non</c><00:02:57.930><c> graphical</c><00:02:58.680><c> services</c>

00:02:59.240 --> 00:02:59.250 align:start position:0%
provides is the non graphical services
 

00:02:59.250 --> 00:03:01.820 align:start position:0%
provides is the non graphical services
that<00:02:59.460><c> every</c><00:02:59.790><c> application</c><00:03:00.240><c> needs</c><00:03:00.660><c> so</c><00:03:01.530><c> that's</c>

00:03:01.820 --> 00:03:01.830 align:start position:0%
that every application needs so that's
 

00:03:01.830 --> 00:03:03.830 align:start position:0%
that every application needs so that's
local<00:03:02.190><c> ations</c><00:03:02.490><c> the</c><00:03:02.700><c> localization</c><00:03:03.240><c> support</c>

00:03:03.830 --> 00:03:03.840 align:start position:0%
local ations the localization support
 

00:03:03.840 --> 00:03:06.380 align:start position:0%
local ations the localization support
user<00:03:04.320><c> preferences</c><00:03:05.070><c> as</c><00:03:05.280><c> I</c><00:03:05.700><c> said</c><00:03:05.940><c> also</c><00:03:06.150><c> the</c>

00:03:06.380 --> 00:03:06.390 align:start position:0%
user preferences as I said also the
 

00:03:06.390 --> 00:03:12.980 align:start position:0%
user preferences as I said also the
pasteboard<00:03:07.050><c> and</c><00:03:07.380><c> the</c><00:03:07.500><c> run</c><00:03:07.680><c> loop</c><00:03:10.490><c> in</c><00:03:11.660><c> this</c><00:03:12.660><c> talk</c>

00:03:12.980 --> 00:03:12.990 align:start position:0%
pasteboard and the run loop in this talk
 

00:03:12.990 --> 00:03:14.900 align:start position:0%
pasteboard and the run loop in this talk
we're<00:03:13.380><c> going</c><00:03:13.530><c> to</c><00:03:13.590><c> focus</c><00:03:13.800><c> on</c><00:03:14.190><c> the</c><00:03:14.340><c> basic</c><00:03:14.700><c> data</c>

00:03:14.900 --> 00:03:14.910 align:start position:0%
we're going to focus on the basic data
 

00:03:14.910 --> 00:03:17.060 align:start position:0%
we're going to focus on the basic data
types<00:03:15.240><c> there's</c><00:03:15.870><c> a</c><00:03:15.960><c> follow-on</c><00:03:16.410><c> to</c><00:03:16.530><c> this</c><00:03:16.800><c> talk</c>

00:03:17.060 --> 00:03:17.070 align:start position:0%
types there's a follow-on to this talk
 

00:03:17.070 --> 00:03:19.070 align:start position:0%
types there's a follow-on to this talk
immediately<00:03:17.430><c> after</c><00:03:18.030><c> lunch</c><00:03:18.210><c> in</c><00:03:18.420><c> the</c><00:03:18.540><c> same</c><00:03:18.810><c> room</c>

00:03:19.070 --> 00:03:19.080 align:start position:0%
immediately after lunch in the same room
 

00:03:19.080 --> 00:03:20.870 align:start position:0%
immediately after lunch in the same room
where<00:03:19.500><c> we'll</c><00:03:19.680><c> be</c><00:03:19.710><c> talking</c><00:03:20.010><c> about</c><00:03:20.250><c> the</c><00:03:20.490><c> second</c>

00:03:20.870 --> 00:03:20.880 align:start position:0%
where we'll be talking about the second
 

00:03:20.880 --> 00:03:23.510 align:start position:0%
where we'll be talking about the second
half<00:03:21.060><c> of</c><00:03:21.210><c> that</c><00:03:21.240><c> stack</c><00:03:21.690><c> the</c><00:03:22.230><c> not</c><00:03:22.470><c> the</c><00:03:23.340><c> app</c>

00:03:23.510 --> 00:03:23.520 align:start position:0%
half of that stack the not the app
 

00:03:23.520 --> 00:03:30.410 align:start position:0%
half of that stack the not the app
services<00:03:26.750><c> so</c><00:03:27.750><c> where</c><00:03:27.960><c> is</c><00:03:28.050><c> CF</c><00:03:28.320><c> available</c><00:03:28.890><c> on</c><00:03:29.420><c> Mac</c>

00:03:30.410 --> 00:03:30.420 align:start position:0%
services so where is CF available on Mac
 

00:03:30.420 --> 00:03:33.229 align:start position:0%
services so where is CF available on Mac
OS<00:03:30.450><c> 10</c><00:03:31.020><c> this</c><00:03:31.800><c> core</c><00:03:32.070><c> foundation</c><00:03:32.670><c> is</c><00:03:32.790><c> available</c>

00:03:33.229 --> 00:03:33.239 align:start position:0%
OS 10 this core foundation is available
 

00:03:33.239 --> 00:03:36.260 align:start position:0%
OS 10 this core foundation is available
as<00:03:33.420><c> its</c><00:03:33.660><c> own</c><00:03:33.780><c> library</c><00:03:34.290><c> on</c><00:03:34.560><c> eight</c><00:03:35.520><c> and</c><00:03:35.700><c> nine</c><00:03:35.910><c> it</c>

00:03:36.260 --> 00:03:36.270 align:start position:0%
as its own library on eight and nine it
 

00:03:36.270 --> 00:03:39.199 align:start position:0%
as its own library on eight and nine it
ships<00:03:36.750><c> as</c><00:03:36.930><c> part</c><00:03:37.170><c> of</c><00:03:37.260><c> carbon</c><00:03:37.709><c> live</c><00:03:37.940><c> now</c><00:03:38.940><c> there's</c>

00:03:39.199 --> 00:03:39.209 align:start position:0%
ships as part of carbon live now there's
 

00:03:39.209 --> 00:03:40.729 align:start position:0%
ships as part of carbon live now there's
a<00:03:39.270><c> there</c><00:03:39.600><c> are</c><00:03:39.720><c> some</c><00:03:39.930><c> pieces</c><00:03:40.230><c> of</c><00:03:40.440><c> core</c>

00:03:40.729 --> 00:03:40.739 align:start position:0%
a there are some pieces of core
 

00:03:40.739 --> 00:03:42.320 align:start position:0%
a there are some pieces of core
foundations<00:03:41.310><c> that</c><00:03:41.340><c> are</c><00:03:41.430><c> only</c><00:03:41.640><c> available</c><00:03:41.790><c> on</c>

00:03:42.320 --> 00:03:42.330 align:start position:0%
foundations that are only available on
 

00:03:42.330 --> 00:03:44.150 align:start position:0%
foundations that are only available on
10<00:03:42.600><c> those</c><00:03:43.140><c> centres</c><00:03:43.530><c> around</c><00:03:43.620><c> the</c><00:03:43.950><c> mock</c>

00:03:44.150 --> 00:03:44.160 align:start position:0%
10 those centres around the mock
 

00:03:44.160 --> 00:03:45.920 align:start position:0%
10 those centres around the mock
specific<00:03:44.700><c> pieces</c><00:03:44.940><c> which</c><00:03:45.239><c> obviously</c><00:03:45.600><c> do</c><00:03:45.900><c> not</c>

00:03:45.920 --> 00:03:45.930 align:start position:0%
specific pieces which obviously do not
 

00:03:45.930 --> 00:03:50.060 align:start position:0%
specific pieces which obviously do not
apply<00:03:46.290><c> on</c><00:03:46.739><c> eight</c><00:03:47.190><c> and</c><00:03:47.370><c> nine</c><00:03:48.080><c> finally</c><00:03:49.080><c> a</c><00:03:49.320><c> subset</c>

00:03:50.060 --> 00:03:50.070 align:start position:0%
apply on eight and nine finally a subset
 

00:03:50.070 --> 00:03:52.100 align:start position:0%
apply on eight and nine finally a subset
of<00:03:50.100><c> core</c><00:03:50.370><c> foundation</c><00:03:50.940><c> is</c><00:03:51.150><c> available</c><00:03:51.720><c> inside</c>

00:03:52.100 --> 00:03:52.110 align:start position:0%
of core foundation is available inside
 

00:03:52.110 --> 00:03:53.750 align:start position:0%
of core foundation is available inside
of<00:03:52.290><c> Darwin</c><00:03:52.709><c> so</c><00:03:52.890><c> if</c><00:03:52.980><c> you're</c><00:03:53.130><c> interested</c><00:03:53.730><c> you</c>

00:03:53.750 --> 00:03:53.760 align:start position:0%
of Darwin so if you're interested you
 

00:03:53.760 --> 00:03:55.310 align:start position:0%
of Darwin so if you're interested you
can<00:03:53.970><c> check</c><00:03:54.030><c> out</c><00:03:54.300><c> the</c><00:03:54.450><c> Darwin</c><00:03:54.780><c> source</c><00:03:55.020><c> code</c><00:03:55.290><c> and</c>

00:03:55.310 --> 00:03:55.320 align:start position:0%
can check out the Darwin source code and
 

00:03:55.320 --> 00:04:02.570 align:start position:0%
can check out the Darwin source code and
see<00:03:55.620><c> what</c><00:03:55.770><c> we're</c><00:03:55.920><c> doing</c><00:03:57.830><c> right</c><00:04:00.290><c> so</c><00:04:01.290><c> I</c><00:04:01.680><c> know</c>

00:04:02.570 --> 00:04:02.580 align:start position:0%
see what we're doing right so I know
 

00:04:02.580 --> 00:04:04.160 align:start position:0%
see what we're doing right so I know
that<00:04:02.700><c> it's</c><00:04:02.970><c> a</c><00:04:03.000><c> developer</c><00:04:03.450><c> when</c><00:04:03.630><c> I</c><00:04:03.660><c> go</c><00:04:03.989><c> and</c>

00:04:04.160 --> 00:04:04.170 align:start position:0%
that it's a developer when I go and
 

00:04:04.170 --> 00:04:05.570 align:start position:0%
that it's a developer when I go and
approach<00:04:04.320><c> a</c><00:04:04.590><c> stack</c><00:04:04.860><c> one</c><00:04:05.100><c> of</c><00:04:05.190><c> the</c><00:04:05.250><c> first</c><00:04:05.489><c> things</c>

00:04:05.570 --> 00:04:05.580 align:start position:0%
approach a stack one of the first things
 

00:04:05.580 --> 00:04:08.420 align:start position:0%
approach a stack one of the first things
I<00:04:05.970><c> I</c><00:04:06.300><c> don't</c><00:04:06.750><c> want</c><00:04:07.050><c> to</c><00:04:07.140><c> hear</c><00:04:07.350><c> is</c><00:04:07.560><c> by</c><00:04:08.190><c> the</c><00:04:08.250><c> way</c>

00:04:08.420 --> 00:04:08.430 align:start position:0%
I I don't want to hear is by the way
 

00:04:08.430 --> 00:04:10.610 align:start position:0%
I I don't want to hear is by the way
this<00:04:08.550><c> is</c><00:04:08.730><c> this</c><00:04:09.180><c> other</c><00:04:09.360><c> large</c><00:04:09.690><c> API</c><00:04:10.080><c> I</c><00:04:10.170><c> have</c><00:04:10.470><c> to</c>

00:04:10.610 --> 00:04:10.620 align:start position:0%
this is this other large API I have to
 

00:04:10.620 --> 00:04:13.430 align:start position:0%
this is this other large API I have to
learn<00:04:11.030><c> so</c><00:04:12.030><c> if</c><00:04:12.239><c> you</c><00:04:12.390><c> don't</c><00:04:12.600><c> want</c><00:04:12.840><c> to</c><00:04:12.930><c> learn</c><00:04:13.019><c> CF</c>

00:04:13.430 --> 00:04:13.440 align:start position:0%
learn so if you don't want to learn CF
 

00:04:13.440 --> 00:04:16.220 align:start position:0%
learn so if you don't want to learn CF
relax<00:04:13.920><c> you</c><00:04:14.459><c> don't</c><00:04:14.670><c> really</c><00:04:14.910><c> have</c><00:04:15.209><c> to</c><00:04:15.269><c> you're</c>

00:04:16.220 --> 00:04:16.230 align:start position:0%
relax you don't really have to you're
 

00:04:16.230 --> 00:04:18.920 align:start position:0%
relax you don't really have to you're
missing<00:04:16.560><c> out</c><00:04:16.680><c> but</c><00:04:17.100><c> you</c><00:04:17.220><c> don't</c><00:04:17.340><c> have</c><00:04:17.640><c> to</c><00:04:17.930><c> carbon</c>

00:04:18.920 --> 00:04:18.930 align:start position:0%
missing out but you don't have to carbon
 

00:04:18.930 --> 00:04:21.380 align:start position:0%
missing out but you don't have to carbon
and<00:04:19.080><c> cocoa</c><00:04:19.440><c> are</c><00:04:19.650><c> both</c><00:04:19.919><c> complete</c><00:04:20.370><c> ap</c><00:04:20.760><c> is</c><00:04:20.910><c> on</c><00:04:21.209><c> to</c>

00:04:21.380 --> 00:04:21.390 align:start position:0%
and cocoa are both complete ap is on to
 

00:04:21.390 --> 00:04:23.420 align:start position:0%
and cocoa are both complete ap is on to
themselves<00:04:21.840><c> you</c><00:04:22.320><c> can</c><00:04:22.500><c> write</c><00:04:22.650><c> entirely</c><00:04:23.310><c> to</c>

00:04:23.420 --> 00:04:23.430 align:start position:0%
themselves you can write entirely to
 

00:04:23.430 --> 00:04:25.430 align:start position:0%
themselves you can write entirely to
those<00:04:23.580><c> api's</c><00:04:24.060><c> if</c><00:04:24.270><c> you</c><00:04:24.419><c> wish</c><00:04:24.630><c> and</c><00:04:24.930><c> core</c>

00:04:25.430 --> 00:04:25.440 align:start position:0%
those api's if you wish and core
 

00:04:25.440 --> 00:04:27.140 align:start position:0%
those api's if you wish and core
foundation<00:04:25.980><c> will</c><00:04:26.130><c> silently</c><00:04:26.640><c> help</c><00:04:26.970><c> out</c>

00:04:27.140 --> 00:04:27.150 align:start position:0%
foundation will silently help out
 

00:04:27.150 --> 00:04:29.030 align:start position:0%
foundation will silently help out
underneath<00:04:27.570><c> the</c><00:04:27.720><c> stats</c><00:04:28.200><c> providing</c><00:04:28.770><c> smooth</c>

00:04:29.030 --> 00:04:29.040 align:start position:0%
underneath the stats providing smooth
 

00:04:29.040 --> 00:04:32.810 align:start position:0%
underneath the stats providing smooth
communication<00:04:29.960><c> however</c><00:04:31.460><c> this</c><00:04:32.460><c> is</c><00:04:32.669><c> what</c>

00:04:32.810 --> 00:04:32.820 align:start position:0%
communication however this is what
 

00:04:32.820 --> 00:04:34.730 align:start position:0%
communication however this is what
you're<00:04:32.940><c> going</c><00:04:33.120><c> to</c><00:04:33.240><c> miss</c><00:04:33.419><c> if</c><00:04:33.750><c> you</c><00:04:34.169><c> yourself</c>

00:04:34.730 --> 00:04:34.740 align:start position:0%
you're going to miss if you yourself
 

00:04:34.740 --> 00:04:37.190 align:start position:0%
you're going to miss if you yourself
need<00:04:35.310><c> to</c><00:04:35.520><c> need</c><00:04:36.030><c> to</c><00:04:36.060><c> write</c><00:04:36.360><c> code</c><00:04:36.630><c> that</c><00:04:36.690><c> bridges</c>

00:04:37.190 --> 00:04:37.200 align:start position:0%
need to need to write code that bridges
 

00:04:37.200 --> 00:04:39.260 align:start position:0%
need to need to write code that bridges
between<00:04:37.350><c> carbon</c><00:04:38.070><c> and</c><00:04:38.130><c> cocoa</c><00:04:38.520><c> applications</c>

00:04:39.260 --> 00:04:39.270 align:start position:0%
between carbon and cocoa applications
 

00:04:39.270 --> 00:04:40.730 align:start position:0%
between carbon and cocoa applications
for<00:04:39.840><c> instance</c><00:04:40.140><c> if</c><00:04:40.260><c> you're</c><00:04:40.380><c> writing</c><00:04:40.680><c> a</c>

00:04:40.730 --> 00:04:40.740 align:start position:0%
for instance if you're writing a
 

00:04:40.740 --> 00:04:42.460 align:start position:0%
for instance if you're writing a
low-level<00:04:41.039><c> library</c><00:04:41.729><c> that</c><00:04:41.940><c> several</c>

00:04:42.460 --> 00:04:42.470 align:start position:0%
low-level library that several
 

00:04:42.470 --> 00:04:43.990 align:start position:0%
low-level library that several
several<00:04:42.830><c> different</c><00:04:43.130><c> applications</c><00:04:43.730><c> are</c><00:04:43.820><c> going</c>

00:04:43.990 --> 00:04:44.000 align:start position:0%
several different applications are going
 

00:04:44.000 --> 00:04:46.390 align:start position:0%
several different applications are going
to<00:04:44.120><c> use</c><00:04:44.300><c> you</c><00:04:44.540><c> should</c><00:04:44.990><c> be</c><00:04:45.230><c> using</c><00:04:45.440><c> CF</c><00:04:45.890><c> to</c><00:04:46.070><c> convert</c>

00:04:46.390 --> 00:04:46.400 align:start position:0%
to use you should be using CF to convert
 

00:04:46.400 --> 00:04:48.360 align:start position:0%
to use you should be using CF to convert
the<00:04:46.430><c> types</c><00:04:46.730><c> to</c><00:04:46.880><c> and</c><00:04:47.150><c> from</c>

00:04:48.360 --> 00:04:48.370 align:start position:0%
the types to and from
 

00:04:48.370 --> 00:04:50.650 align:start position:0%
the types to and from
internationalization<00:04:49.370><c> support</c><00:04:50.000><c> is</c><00:04:50.150><c> wired</c>

00:04:50.650 --> 00:04:50.660 align:start position:0%
internationalization support is wired
 

00:04:50.660 --> 00:04:52.390 align:start position:0%
internationalization support is wired
into<00:04:51.110><c> core</c><00:04:51.290><c> foundation</c><00:04:51.950><c> it's</c><00:04:52.070><c> one</c><00:04:52.220><c> of</c><00:04:52.310><c> the</c>

00:04:52.390 --> 00:04:52.400 align:start position:0%
into core foundation it's one of the
 

00:04:52.400 --> 00:04:55.000 align:start position:0%
into core foundation it's one of the
easiest<00:04:52.430><c> places</c><00:04:52.970><c> to</c><00:04:53.270><c> get</c><00:04:53.420><c> it</c><00:04:53.570><c> from</c><00:04:53.950><c> there's</c><00:04:54.950><c> a</c>

00:04:55.000 --> 00:04:55.010 align:start position:0%
easiest places to get it from there's a
 

00:04:55.010 --> 00:04:56.830 align:start position:0%
easiest places to get it from there's a
rich<00:04:55.250><c> simple</c><00:04:55.760><c> set</c><00:04:55.970><c> of</c><00:04:56.000><c> data</c><00:04:56.330><c> types</c><00:04:56.630><c> around</c>

00:04:56.830 --> 00:04:56.840 align:start position:0%
rich simple set of data types around
 

00:04:56.840 --> 00:04:59.440 align:start position:0%
rich simple set of data types around
those<00:04:57.490><c> internationalized</c><00:04:58.490><c> strings</c><00:04:58.940><c> inside</c>

00:04:59.440 --> 00:04:59.450 align:start position:0%
those internationalized strings inside
 

00:04:59.450 --> 00:05:00.880 align:start position:0%
those internationalized strings inside
of<00:04:59.600><c> core</c><00:04:59.780><c> foundation</c><00:05:00.350><c> that's</c><00:05:00.590><c> what</c><00:05:00.770><c> we're</c>

00:05:00.880 --> 00:05:00.890 align:start position:0%
of core foundation that's what we're
 

00:05:00.890 --> 00:05:03.250 align:start position:0%
of core foundation that's what we're
going<00:05:01.010><c> to</c><00:05:01.130><c> focus</c><00:05:01.280><c> on</c><00:05:01.580><c> here</c><00:05:01.880><c> today</c><00:05:02.210><c> and</c><00:05:02.450><c> there</c>

00:05:03.250 --> 00:05:03.260 align:start position:0%
going to focus on here today and there
 

00:05:03.260 --> 00:05:05.110 align:start position:0%
going to focus on here today and there
is<00:05:03.470><c> some</c><00:05:03.740><c> new</c><00:05:03.920><c> functionality</c><00:05:04.670><c> which</c><00:05:04.820><c> you</c><00:05:04.940><c> can</c>

00:05:05.110 --> 00:05:05.120 align:start position:0%
is some new functionality which you can
 

00:05:05.120 --> 00:05:06.940 align:start position:0%
is some new functionality which you can
only<00:05:05.360><c> get</c><00:05:05.720><c> by</c><00:05:06.170><c> talking</c><00:05:06.590><c> to</c><00:05:06.680><c> the</c><00:05:06.770><c> core</c>

00:05:06.940 --> 00:05:06.950 align:start position:0%
only get by talking to the core
 

00:05:06.950 --> 00:05:10.060 align:start position:0%
only get by talking to the core
foundation<00:05:07.520><c> stack</c><00:05:08.500><c> so</c><00:05:09.500><c> what</c><00:05:09.650><c> is</c><00:05:09.770><c> that</c><00:05:09.890><c> new</c>

00:05:10.060 --> 00:05:10.070 align:start position:0%
foundation stack so what is that new
 

00:05:10.070 --> 00:05:13.420 align:start position:0%
foundation stack so what is that new
functionality<00:05:11.260><c> property</c><00:05:12.260><c> lists</c><00:05:12.590><c> is</c><00:05:13.010><c> a</c><00:05:13.070><c> big</c>

00:05:13.420 --> 00:05:13.430 align:start position:0%
functionality property lists is a big
 

00:05:13.430 --> 00:05:14.680 align:start position:0%
functionality property lists is a big
one<00:05:13.580><c> and</c><00:05:13.790><c> that's</c><00:05:13.940><c> the</c><00:05:14.090><c> one</c><00:05:14.210><c> we'll</c><00:05:14.330><c> talk</c><00:05:14.540><c> about</c>

00:05:14.680 --> 00:05:14.690 align:start position:0%
one and that's the one we'll talk about
 

00:05:14.690 --> 00:05:18.160 align:start position:0%
one and that's the one we'll talk about
today<00:05:15.110><c> there's</c><00:05:15.890><c> also</c><00:05:16.070><c> an</c><00:05:16.310><c> an</c><00:05:16.790><c> XML</c><00:05:17.600><c> parser</c>

00:05:18.160 --> 00:05:18.170 align:start position:0%
today there's also an an XML parser
 

00:05:18.170 --> 00:05:20.290 align:start position:0%
today there's also an an XML parser
inside<00:05:19.010><c> of</c><00:05:19.130><c> course</c><00:05:19.340><c> foundation</c><00:05:19.850><c> it's</c><00:05:20.000><c> not</c><00:05:20.150><c> the</c>

00:05:20.290 --> 00:05:20.300 align:start position:0%
inside of course foundation it's not the
 

00:05:20.300 --> 00:05:23.590 align:start position:0%
inside of course foundation it's not the
only<00:05:20.450><c> XML</c><00:05:20.900><c> parser</c><00:05:21.290><c> on</c><00:05:21.410><c> the</c><00:05:21.530><c> system</c><00:05:21.980><c> but</c><00:05:22.640><c> it's</c>

00:05:23.590 --> 00:05:23.600 align:start position:0%
only XML parser on the system but it's
 

00:05:23.600 --> 00:05:25.630 align:start position:0%
only XML parser on the system but it's
the<00:05:23.840><c> only</c><00:05:24.080><c> one</c><00:05:24.230><c> in</c><00:05:24.260><c> C</c><00:05:24.620><c> and</c><00:05:24.650><c> it's</c><00:05:25.100><c> nice</c><00:05:25.280><c> and</c><00:05:25.490><c> low</c>

00:05:25.630 --> 00:05:25.640 align:start position:0%
the only one in C and it's nice and low
 

00:05:25.640 --> 00:05:29.590 align:start position:0%
the only one in C and it's nice and low
level<00:05:26.000><c> for</c><00:05:26.840><c> your</c><00:05:27.020><c> use</c><00:05:27.850><c> user</c><00:05:28.850><c> preferences</c>

00:05:29.590 --> 00:05:29.600 align:start position:0%
level for your use user preferences
 

00:05:29.600 --> 00:05:31.630 align:start position:0%
level for your use user preferences
there's<00:05:29.810><c> a</c><00:05:29.870><c> unified</c><00:05:30.320><c> user</c><00:05:30.620><c> preferences</c><00:05:31.280><c> model</c>

00:05:31.630 --> 00:05:31.640 align:start position:0%
there's a unified user preferences model
 

00:05:31.640 --> 00:05:33.730 align:start position:0%
there's a unified user preferences model
inside<00:05:32.000><c> of</c><00:05:32.150><c> course</c><00:05:32.300><c> foundation</c><00:05:32.960><c> it</c><00:05:33.350><c> will</c><00:05:33.500><c> save</c>

00:05:33.730 --> 00:05:33.740 align:start position:0%
inside of course foundation it will save
 

00:05:33.740 --> 00:05:35.200 align:start position:0%
inside of course foundation it will save
you<00:05:33.950><c> from</c><00:05:33.980><c> having</c><00:05:34.190><c> to</c><00:05:34.580><c> invent</c><00:05:34.970><c> your</c><00:05:35.150><c> own</c>

00:05:35.200 --> 00:05:35.210 align:start position:0%
you from having to invent your own
 

00:05:35.210 --> 00:05:37.990 align:start position:0%
you from having to invent your own
preferences<00:05:36.020><c> file</c><00:05:36.290><c> format</c><00:05:36.860><c> and</c><00:05:37.130><c> doing</c><00:05:37.850><c> your</c>

00:05:37.990 --> 00:05:38.000 align:start position:0%
preferences file format and doing your
 

00:05:38.000 --> 00:05:40.920 align:start position:0%
preferences file format and doing your
own<00:05:38.030><c> work</c><00:05:38.180><c> of</c><00:05:38.540><c> reading</c><00:05:39.320><c> and</c><00:05:39.380><c> writing</c><00:05:39.560><c> to</c><00:05:39.919><c> file</c>

00:05:40.920 --> 00:05:40.930 align:start position:0%
own work of reading and writing to file
 

00:05:40.930 --> 00:05:45.400 align:start position:0%
own work of reading and writing to file
finally<00:05:41.930><c> and</c><00:05:42.169><c> perhaps</c><00:05:42.320><c> most</c><00:05:42.590><c> importantly</c><00:05:44.410><c> the</c>

00:05:45.400 --> 00:05:45.410 align:start position:0%
finally and perhaps most importantly the
 

00:05:45.410 --> 00:05:47.620 align:start position:0%
finally and perhaps most importantly the
bundle<00:05:45.770><c> and</c><00:05:45.919><c> plug-in</c><00:05:46.340><c> model</c><00:05:46.700><c> that</c><00:05:47.000><c> surrounds</c>

00:05:47.620 --> 00:05:47.630 align:start position:0%
bundle and plug-in model that surrounds
 

00:05:47.630 --> 00:05:50.080 align:start position:0%
bundle and plug-in model that surrounds
the<00:05:47.780><c> entire</c><00:05:47.870><c> app</c><00:05:48.470><c> packaging</c><00:05:49.220><c> scheme</c><00:05:49.550><c> on</c><00:05:49.790><c> Mac</c>

00:05:50.080 --> 00:05:50.090 align:start position:0%
the entire app packaging scheme on Mac
 

00:05:50.090 --> 00:05:53.710 align:start position:0%
the entire app packaging scheme on Mac
OS<00:05:50.240><c> 10</c><00:05:50.690><c> is</c><00:05:50.930><c> centered</c><00:05:51.800><c> in</c><00:05:52.010><c> core</c><00:05:52.400><c> foundation</c><00:05:53.180><c> so</c>

00:05:53.710 --> 00:05:53.720 align:start position:0%
OS 10 is centered in core foundation so
 

00:05:53.720 --> 00:05:55.450 align:start position:0%
OS 10 is centered in core foundation so
if<00:05:53.810><c> you</c><00:05:53.900><c> want</c><00:05:54.140><c> to</c><00:05:54.290><c> pull</c><00:05:54.470><c> apart</c><00:05:54.770><c> the</c><00:05:54.800><c> pieces</c><00:05:55.310><c> of</c>

00:05:55.450 --> 00:05:55.460 align:start position:0%
if you want to pull apart the pieces of
 

00:05:55.460 --> 00:05:57.820 align:start position:0%
if you want to pull apart the pieces of
that<00:05:55.669><c> app</c><00:05:55.880><c> packaging</c><00:05:56.510><c> format</c><00:05:56.750><c> you</c><00:05:57.440><c> should</c><00:05:57.680><c> be</c>

00:05:57.820 --> 00:05:57.830 align:start position:0%
that app packaging format you should be
 

00:05:57.830 --> 00:06:02.920 align:start position:0%
that app packaging format you should be
talking<00:05:58.070><c> to</c><00:05:58.310><c> core</c><00:05:58.640><c> foundation</c><00:06:01.330><c> ok</c><00:06:02.330><c> so</c><00:06:02.750><c> now</c><00:06:02.840><c> I'm</c>

00:06:02.920 --> 00:06:02.930 align:start position:0%
talking to core foundation ok so now I'm
 

00:06:02.930 --> 00:06:04.540 align:start position:0%
talking to core foundation ok so now I'm
going<00:06:03.050><c> to</c><00:06:03.110><c> move</c><00:06:03.260><c> on</c><00:06:03.440><c> to</c><00:06:03.470><c> talk</c><00:06:03.800><c> about</c><00:06:03.979><c> the</c><00:06:04.220><c> basic</c>

00:06:04.540 --> 00:06:04.550 align:start position:0%
going to move on to talk about the basic
 

00:06:04.550 --> 00:06:06.490 align:start position:0%
going to move on to talk about the basic
concepts<00:06:05.060><c> and</c><00:06:05.210><c> paradigms</c><00:06:05.660><c> inside</c><00:06:06.169><c> of</c><00:06:06.320><c> core</c>

00:06:06.490 --> 00:06:06.500 align:start position:0%
concepts and paradigms inside of core
 

00:06:06.500 --> 00:06:10.060 align:start position:0%
concepts and paradigms inside of core
foundation<00:06:08.169><c> I'm</c><00:06:09.169><c> going</c><00:06:09.500><c> to</c><00:06:09.560><c> spend</c><00:06:09.890><c> a</c><00:06:09.950><c> moment</c>

00:06:10.060 --> 00:06:10.070 align:start position:0%
foundation I'm going to spend a moment
 

00:06:10.070 --> 00:06:12.100 align:start position:0%
foundation I'm going to spend a moment
on<00:06:10.310><c> the</c><00:06:10.370><c> general</c><00:06:10.790><c> philosophy</c><00:06:11.090><c> of</c><00:06:11.510><c> the</c><00:06:11.630><c> library</c>

00:06:12.100 --> 00:06:12.110 align:start position:0%
on the general philosophy of the library
 

00:06:12.110 --> 00:06:13.810 align:start position:0%
on the general philosophy of the library
then<00:06:12.800><c> I'm</c><00:06:12.890><c> going</c><00:06:13.040><c> to</c><00:06:13.100><c> talk</c><00:06:13.250><c> about</c><00:06:13.460><c> how</c><00:06:13.760><c> we</c>

00:06:13.810 --> 00:06:13.820 align:start position:0%
then I'm going to talk about how we
 

00:06:13.820 --> 00:06:16.150 align:start position:0%
then I'm going to talk about how we
managed<00:06:14.300><c> to</c><00:06:14.330><c> get</c><00:06:14.600><c> some</c><00:06:14.660><c> object</c><00:06:15.160><c> orientation</c>

00:06:16.150 --> 00:06:16.160 align:start position:0%
managed to get some object orientation
 

00:06:16.160 --> 00:06:19.030 align:start position:0%
managed to get some object orientation
inside<00:06:16.790><c> of</c><00:06:16.940><c> what</c><00:06:17.120><c> is</c><00:06:17.240><c> a</c><00:06:17.419><c> purely</c><00:06:18.140><c> see</c><00:06:18.530><c> light</c><00:06:18.770><c> on</c>

00:06:19.030 --> 00:06:19.040 align:start position:0%
inside of what is a purely see light on
 

00:06:19.040 --> 00:06:21.580 align:start position:0%
inside of what is a purely see light on
C<00:06:19.550><c> library</c><00:06:19.729><c> and</c><00:06:20.270><c> finally</c><00:06:21.080><c> I'm</c><00:06:21.290><c> going</c><00:06:21.410><c> to</c><00:06:21.470><c> look</c>

00:06:21.580 --> 00:06:21.590 align:start position:0%
C library and finally I'm going to look
 

00:06:21.590 --> 00:06:23.080 align:start position:0%
C library and finally I'm going to look
at<00:06:21.680><c> the</c><00:06:21.770><c> memory</c><00:06:21.950><c> management</c><00:06:22.400><c> scheme</c><00:06:22.820><c> that</c><00:06:22.940><c> we</c>

00:06:23.080 --> 00:06:23.090 align:start position:0%
at the memory management scheme that we
 

00:06:23.090 --> 00:06:26.950 align:start position:0%
at the memory management scheme that we
use<00:06:24.669><c> the</c><00:06:25.669><c> general</c><00:06:26.060><c> philosophy</c><00:06:26.330><c> of</c><00:06:26.750><c> core</c>

00:06:26.950 --> 00:06:26.960 align:start position:0%
use the general philosophy of core
 

00:06:26.960 --> 00:06:29.590 align:start position:0%
use the general philosophy of core
foundation<00:06:27.560><c> is</c><00:06:27.710><c> to</c><00:06:27.890><c> be</c><00:06:28.040><c> lean</c><00:06:28.370><c> and</c><00:06:28.400><c> mean</c><00:06:28.940><c> we</c><00:06:29.450><c> are</c>

00:06:29.590 --> 00:06:29.600 align:start position:0%
foundation is to be lean and mean we are
 

00:06:29.600 --> 00:06:31.990 align:start position:0%
foundation is to be lean and mean we are
just<00:06:29.870><c> barely</c><00:06:30.470><c> above</c><00:06:30.890><c> the</c><00:06:30.950><c> operating</c><00:06:31.610><c> system</c>

00:06:31.990 --> 00:06:32.000 align:start position:0%
just barely above the operating system
 

00:06:32.000 --> 00:06:34.450 align:start position:0%
just barely above the operating system
layer<00:06:32.380><c> performance</c><00:06:33.380><c> and</c><00:06:33.590><c> efficiency</c><00:06:33.680><c> is</c>

00:06:34.450 --> 00:06:34.460 align:start position:0%
layer performance and efficiency is
 

00:06:34.460 --> 00:06:37.750 align:start position:0%
layer performance and efficiency is
perhaps<00:06:35.000><c> our</c><00:06:35.419><c> primary</c><00:06:35.750><c> goal</c><00:06:36.400><c> for</c><00:06:37.400><c> that</c><00:06:37.520><c> reason</c>

00:06:37.750 --> 00:06:37.760 align:start position:0%
perhaps our primary goal for that reason
 

00:06:37.760 --> 00:06:40.840 align:start position:0%
perhaps our primary goal for that reason
we<00:06:38.060><c> have</c><00:06:38.210><c> exported</c><00:06:38.540><c> a</c><00:06:38.810><c> minimal</c><00:06:39.290><c> API</c><00:06:39.710><c> and</c><00:06:40.220><c> tried</c>

00:06:40.840 --> 00:06:40.850 align:start position:0%
we have exported a minimal API and tried
 

00:06:40.850 --> 00:06:42.940 align:start position:0%
we have exported a minimal API and tried
to<00:06:41.030><c> make</c><00:06:41.180><c> it</c><00:06:41.210><c> as</c><00:06:41.419><c> powerful</c><00:06:42.020><c> and</c><00:06:42.229><c> extensible</c><00:06:42.860><c> as</c>

00:06:42.940 --> 00:06:42.950 align:start position:0%
to make it as powerful and extensible as
 

00:06:42.950 --> 00:06:45.400 align:start position:0%
to make it as powerful and extensible as
possible<00:06:43.520><c> so</c><00:06:43.970><c> you</c><00:06:44.030><c> will</c><00:06:44.270><c> not</c><00:06:44.419><c> find</c><00:06:44.780><c> a</c><00:06:45.080><c> lot</c><00:06:45.290><c> of</c>

00:06:45.400 --> 00:06:45.410 align:start position:0%
possible so you will not find a lot of
 

00:06:45.410 --> 00:06:47.110 align:start position:0%
possible so you will not find a lot of
convenience<00:06:46.010><c> functions</c><00:06:46.250><c> to</c><00:06:46.729><c> do</c><00:06:46.850><c> simple</c>

00:06:47.110 --> 00:06:47.120 align:start position:0%
convenience functions to do simple
 

00:06:47.120 --> 00:06:50.020 align:start position:0%
convenience functions to do simple
operations<00:06:47.960><c> you</c><00:06:48.530><c> will</c><00:06:48.800><c> find</c><00:06:49.130><c> some</c><00:06:49.490><c> complex</c>

00:06:50.020 --> 00:06:50.030 align:start position:0%
operations you will find some complex
 

00:06:50.030 --> 00:06:52.750 align:start position:0%
operations you will find some complex
powerful<00:06:50.960><c> functional</c><00:06:51.470><c> API</c><00:06:51.800><c> where</c><00:06:52.430><c> you</c><00:06:52.610><c> may</c>

00:06:52.750 --> 00:06:52.760 align:start position:0%
powerful functional API where you may
 

00:06:52.760 --> 00:06:53.890 align:start position:0%
powerful functional API where you may
have<00:06:52.970><c> to</c><00:06:53.150><c> you</c><00:06:53.390><c> may</c><00:06:53.479><c> have</c><00:06:53.630><c> to</c><00:06:53.750><c> do</c><00:06:53.870><c> some</c>

00:06:53.890 --> 00:06:53.900 align:start position:0%
have to you may have to do some
 

00:06:53.900 --> 00:06:56.820 align:start position:0%
have to you may have to do some
configuration<00:06:54.710><c> of</c><00:06:54.800><c> the</c><00:06:54.890><c> arguments</c><00:06:55.370><c> going</c><00:06:55.430><c> in</c>

00:06:56.820 --> 00:06:56.830 align:start position:0%
configuration of the arguments going in
 

00:06:56.830 --> 00:06:59.649 align:start position:0%
configuration of the arguments going in
finally<00:06:57.830><c> there</c><00:06:58.189><c> is</c><00:06:58.400><c> no</c><00:06:58.639><c> safety</c><00:06:58.939><c> net</c><00:06:59.120><c> in</c><00:06:59.419><c> course</c>

00:06:59.649 --> 00:06:59.659 align:start position:0%
finally there is no safety net in course
 

00:06:59.659 --> 00:07:02.320 align:start position:0%
finally there is no safety net in course
foundation<00:07:00.259><c> we</c><00:07:00.889><c> follow</c><00:07:01.220><c> the</c><00:07:01.490><c> same</c><00:07:01.699><c> philosophy</c>

00:07:02.320 --> 00:07:02.330 align:start position:0%
foundation we follow the same philosophy
 

00:07:02.330 --> 00:07:04.749 align:start position:0%
foundation we follow the same philosophy
as<00:07:02.449><c> the</c><00:07:02.629><c> C</c><00:07:02.840><c> language</c><00:07:02.870><c> if</c><00:07:03.650><c> you</c><00:07:04.129><c> tell</c><00:07:04.340><c> us</c><00:07:04.370><c> to</c><00:07:04.520><c> do</c>

00:07:04.749 --> 00:07:04.759 align:start position:0%
as the C language if you tell us to do
 

00:07:04.759 --> 00:07:06.100 align:start position:0%
as the C language if you tell us to do
something<00:07:04.789><c> we're</c><00:07:05.419><c> going</c><00:07:05.569><c> to</c><00:07:05.629><c> do</c><00:07:05.780><c> it</c><00:07:05.930><c> no</c>

00:07:06.100 --> 00:07:06.110 align:start position:0%
something we're going to do it no
 

00:07:06.110 --> 00:07:07.990 align:start position:0%
something we're going to do it no
questions<00:07:06.139><c> asked</c><00:07:06.979><c> so</c><00:07:07.159><c> if</c><00:07:07.280><c> you</c><00:07:07.400><c> hand</c><00:07:07.610><c> us</c><00:07:07.729><c> a</c><00:07:07.849><c> bad</c>

00:07:07.990 --> 00:07:08.000 align:start position:0%
questions asked so if you hand us a bad
 

00:07:08.000 --> 00:07:10.679 align:start position:0%
questions asked so if you hand us a bad
pointer<00:07:08.449><c> we're</c><00:07:08.960><c> going</c><00:07:09.050><c> to</c><00:07:09.110><c> try</c><00:07:09.289><c> and</c><00:07:09.530><c> access</c><00:07:09.680><c> it</c>

00:07:10.679 --> 00:07:10.689 align:start position:0%
pointer we're going to try and access it
 

00:07:10.689 --> 00:07:14.770 align:start position:0%
pointer we're going to try and access it
to<00:07:11.689><c> try</c><00:07:11.960><c> and</c><00:07:12.199><c> ease</c><00:07:12.770><c> the</c><00:07:13.099><c> road</c><00:07:13.280><c> a</c><00:07:13.310><c> little</c><00:07:13.580><c> bit</c><00:07:13.780><c> we</c>

00:07:14.770 --> 00:07:14.780 align:start position:0%
to try and ease the road a little bit we
 

00:07:14.780 --> 00:07:16.629 align:start position:0%
to try and ease the road a little bit we
do<00:07:14.930><c> provide</c><00:07:15.110><c> a</c><00:07:15.289><c> debug</c><00:07:15.710><c> library</c><00:07:16.310><c> and</c><00:07:16.520><c> that</c>

00:07:16.629 --> 00:07:16.639 align:start position:0%
do provide a debug library and that
 

00:07:16.639 --> 00:07:18.969 align:start position:0%
do provide a debug library and that
debug<00:07:17.030><c> library</c><00:07:17.599><c> is</c><00:07:17.900><c> available</c><00:07:18.560><c> so</c><00:07:18.680><c> that</c><00:07:18.830><c> as</c>

00:07:18.969 --> 00:07:18.979 align:start position:0%
debug library is available so that as
 

00:07:18.979 --> 00:07:20.860 align:start position:0%
debug library is available so that as
you<00:07:19.219><c> code</c><00:07:19.460><c> you</c><00:07:19.699><c> can</c><00:07:19.819><c> run</c><00:07:20.000><c> against</c><00:07:20.389><c> it</c><00:07:20.569><c> and</c><00:07:20.750><c> it</c>

00:07:20.860 --> 00:07:20.870 align:start position:0%
you code you can run against it and it
 

00:07:20.870 --> 00:07:24.189 align:start position:0%
you code you can run against it and it
will<00:07:20.990><c> catch</c><00:07:21.229><c> a</c><00:07:21.560><c> number</c><00:07:21.949><c> of</c><00:07:22.069><c> common</c><00:07:22.520><c> errors</c><00:07:23.199><c> and</c>

00:07:24.189 --> 00:07:24.199 align:start position:0%
will catch a number of common errors and
 

00:07:24.199 --> 00:07:26.020 align:start position:0%
will catch a number of common errors and
that<00:07:24.469><c> way</c><00:07:24.620><c> you</c><00:07:24.680><c> can</c><00:07:24.919><c> help</c><00:07:25.069><c> you</c><00:07:25.340><c> can</c><00:07:25.520><c> start</c><00:07:25.969><c> to</c>

00:07:26.020 --> 00:07:26.030 align:start position:0%
that way you can help you can start to
 

00:07:26.030 --> 00:07:30.760 align:start position:0%
that way you can help you can start to
debug<00:07:26.330><c> your</c><00:07:26.479><c> program</c><00:07:28.659><c> so</c><00:07:29.659><c> object</c><00:07:30.229><c> orientation</c>

00:07:30.760 --> 00:07:30.770 align:start position:0%
debug your program so object orientation
 

00:07:30.770 --> 00:07:33.100 align:start position:0%
debug your program so object orientation
inside<00:07:31.400><c> of</c><00:07:31.520><c> course</c><00:07:31.699><c> foundation</c><00:07:32.300><c> focuses</c><00:07:32.539><c> on</c>

00:07:33.100 --> 00:07:33.110 align:start position:0%
inside of course foundation focuses on
 

00:07:33.110 --> 00:07:38.159 align:start position:0%
inside of course foundation focuses on
CF<00:07:33.530><c> types</c><00:07:33.860><c> and</c><00:07:34.870><c> we</c><00:07:35.870><c> try</c><00:07:36.139><c> to</c><00:07:36.199><c> make</c><00:07:36.650><c> this</c><00:07:36.830><c> as</c>

00:07:38.159 --> 00:07:38.169 align:start position:0%
CF types and we try to make this as
 

00:07:38.169 --> 00:07:40.450 align:start position:0%
CF types and we try to make this as
available<00:07:39.169><c> as</c><00:07:39.289><c> possible</c><00:07:39.860><c> in</c><00:07:40.069><c> the</c><00:07:40.099><c> maiming</c>

00:07:40.450 --> 00:07:40.460 align:start position:0%
available as possible in the maiming
 

00:07:40.460 --> 00:07:43.629 align:start position:0%
available as possible in the maiming
inside<00:07:41.000><c> of</c><00:07:41.240><c> course</c><00:07:41.389><c> foundation</c><00:07:42.050><c> so</c><00:07:43.009><c> each</c><00:07:43.250><c> type</c>

00:07:43.629 --> 00:07:43.639 align:start position:0%
inside of course foundation so each type
 

00:07:43.639 --> 00:07:45.550 align:start position:0%
inside of course foundation so each type
is<00:07:43.940><c> going</c><00:07:44.180><c> is</c><00:07:44.300><c> opaque</c><00:07:44.659><c> and</c><00:07:44.719><c> represents</c><00:07:45.469><c> a</c>

00:07:45.550 --> 00:07:45.560 align:start position:0%
is going is opaque and represents a
 

00:07:45.560 --> 00:07:47.950 align:start position:0%
is going is opaque and represents a
pseudo<00:07:45.919><c> class</c><00:07:46.250><c> and</c><00:07:46.550><c> each</c><00:07:47.030><c> such</c><00:07:47.360><c> type</c><00:07:47.629><c> is</c><00:07:47.779><c> going</c>

00:07:47.950 --> 00:07:47.960 align:start position:0%
pseudo class and each such type is going
 

00:07:47.960 --> 00:07:50.200 align:start position:0%
pseudo class and each such type is going
to<00:07:48.050><c> be</c><00:07:48.169><c> named</c><00:07:48.379><c> CF</c><00:07:48.800><c> and</c><00:07:49.069><c> then</c><00:07:49.550><c> the</c><00:07:49.669><c> class</c><00:07:49.909><c> name</c>

00:07:50.200 --> 00:07:50.210 align:start position:0%
to be named CF and then the class name
 

00:07:50.210 --> 00:07:54.189 align:start position:0%
to be named CF and then the class name
ref<00:07:51.879><c> the</c><00:07:52.879><c> related</c><00:07:53.330><c> functions</c><00:07:53.840><c> which</c><00:07:54.110><c> are</c>

00:07:54.189 --> 00:07:54.199 align:start position:0%
ref the related functions which are
 

00:07:54.199 --> 00:07:56.529 align:start position:0%
ref the related functions which are
acting<00:07:54.590><c> as</c><00:07:54.680><c> methods</c><00:07:55.219><c> on</c><00:07:55.460><c> the</c><00:07:55.639><c> class</c><00:07:55.909><c> will</c>

00:07:56.529 --> 00:07:56.539 align:start position:0%
acting as methods on the class will
 

00:07:56.539 --> 00:07:58.540 align:start position:0%
acting as methods on the class will
always<00:07:56.870><c> be</c><00:07:57.229><c> prefixed</c><00:07:57.710><c> with</c><00:07:57.889><c> the</c><00:07:58.129><c> name</c><00:07:58.279><c> of</c><00:07:58.460><c> the</c>

00:07:58.540 --> 00:07:58.550 align:start position:0%
always be prefixed with the name of the
 

00:07:58.550 --> 00:08:01.629 align:start position:0%
always be prefixed with the name of the
class<00:07:58.870><c> CS</c><00:07:59.870><c> class</c><00:08:00.379><c> name</c><00:08:00.680><c> and</c><00:08:00.949><c> then</c><00:08:01.069><c> in</c><00:08:01.219><c> action</c>

00:08:01.629 --> 00:08:01.639 align:start position:0%
class CS class name and then in action
 

00:08:01.639 --> 00:08:03.600 align:start position:0%
class CS class name and then in action
describing<00:08:02.150><c> what</c><00:08:02.300><c> the</c><00:08:02.389><c> function</c><00:08:02.659><c> does</c>

00:08:03.600 --> 00:08:03.610 align:start position:0%
describing what the function does
 

00:08:03.610 --> 00:08:06.459 align:start position:0%
describing what the function does
related<00:08:04.610><c> constants</c><00:08:05.180><c> also</c><00:08:05.750><c> are</c><00:08:05.900><c> prefixed</c><00:08:06.289><c> with</c>

00:08:06.459 --> 00:08:06.469 align:start position:0%
related constants also are prefixed with
 

00:08:06.469 --> 00:08:09.640 align:start position:0%
related constants also are prefixed with
the<00:08:06.680><c> class</c><00:08:06.919><c> name</c><00:08:07.190><c> k</c><00:08:07.759><c> CS</c><00:08:08.300><c> class</c><00:08:08.690><c> and</c><00:08:09.050><c> then</c><00:08:09.620><c> a</c>

00:08:09.640 --> 00:08:09.650 align:start position:0%
the class name k CS class and then a
 

00:08:09.650 --> 00:08:12.670 align:start position:0%
the class name k CS class and then a
descriptor<00:08:10.569><c> so</c><00:08:11.569><c> for</c><00:08:11.779><c> example</c><00:08:11.900><c> if</c><00:08:12.319><c> we</c><00:08:12.469><c> look</c><00:08:12.620><c> at</c>

00:08:12.670 --> 00:08:12.680 align:start position:0%
descriptor so for example if we look at
 

00:08:12.680 --> 00:08:16.200 align:start position:0%
descriptor so for example if we look at
CF<00:08:13.009><c> strings</c><00:08:13.460><c> the</c><00:08:14.150><c> type</c><00:08:14.389><c> of</c><00:08:14.419><c> CF</c><00:08:14.960><c> string</c><00:08:15.379><c> ref</c><00:08:15.650><c> an</c>

00:08:16.200 --> 00:08:16.210 align:start position:0%
CF strings the type of CF string ref an
 

00:08:16.210 --> 00:08:18.820 align:start position:0%
CF strings the type of CF string ref an
example<00:08:17.210><c> of</c><00:08:17.270><c> a</c><00:08:17.389><c> function</c><00:08:17.419><c> would</c><00:08:17.960><c> be</c><00:08:18.020><c> CF</c><00:08:18.440><c> string</c>

00:08:18.820 --> 00:08:18.830 align:start position:0%
example of a function would be CF string
 

00:08:18.830 --> 00:08:21.579 align:start position:0%
example of a function would be CF string
append<00:08:19.339><c> and</c><00:08:19.699><c> an</c><00:08:20.389><c> example</c><00:08:20.839><c> of</c><00:08:20.870><c> the</c><00:08:20.990><c> constant</c>

00:08:21.579 --> 00:08:21.589 align:start position:0%
append and an example of the constant
 

00:08:21.589 --> 00:08:26.459 align:start position:0%
append and an example of the constant
would<00:08:21.770><c> be</c><00:08:21.889><c> KCF</c><00:08:22.520><c> string</c><00:08:22.909><c> encoding</c><00:08:23.900><c> ascii</c>

00:08:26.459 --> 00:08:26.469 align:start position:0%
would be KCF string encoding ascii
 

00:08:26.469 --> 00:08:29.170 align:start position:0%
would be KCF string encoding ascii
furthermore<00:08:27.469><c> inside</c><00:08:27.949><c> the</c><00:08:28.129><c> functions</c><00:08:28.669><c> the</c>

00:08:29.170 --> 00:08:29.180 align:start position:0%
furthermore inside the functions the
 

00:08:29.180 --> 00:08:31.149 align:start position:0%
furthermore inside the functions the
first<00:08:29.479><c> argument</c><00:08:29.779><c> is</c><00:08:30.199><c> always</c><00:08:30.770><c> the</c><00:08:30.949><c> type</c>

00:08:31.149 --> 00:08:31.159 align:start position:0%
first argument is always the type
 

00:08:31.159 --> 00:08:32.829 align:start position:0%
first argument is always the type
instance<00:08:31.759><c> what</c><00:08:32.000><c> you</c><00:08:32.089><c> would</c><00:08:32.240><c> consider</c><00:08:32.360><c> the</c>

00:08:32.829 --> 00:08:32.839 align:start position:0%
instance what you would consider the
 

00:08:32.839 --> 00:08:34.600 align:start position:0%
instance what you would consider the
receiver<00:08:33.260><c> if</c><00:08:33.560><c> you</c><00:08:33.709><c> were</c><00:08:33.829><c> writing</c><00:08:34.039><c> in</c><00:08:34.279><c> a</c><00:08:34.339><c> true</c>

00:08:34.600 --> 00:08:34.610 align:start position:0%
receiver if you were writing in a true
 

00:08:34.610 --> 00:08:36.880 align:start position:0%
receiver if you were writing in a true
object-oriented<00:08:35.360><c> language</c><00:08:36.050><c> then</c><00:08:36.740><c> there's</c>

00:08:36.880 --> 00:08:36.890 align:start position:0%
object-oriented language then there's
 

00:08:36.890 --> 00:08:38.409 align:start position:0%
object-oriented language then there's
one<00:08:37.039><c> important</c><00:08:37.459><c> exception</c><00:08:37.519><c> to</c><00:08:38.089><c> that</c><00:08:38.120><c> and</c>

00:08:38.409 --> 00:08:38.419 align:start position:0%
one important exception to that and
 

00:08:38.419 --> 00:08:39.850 align:start position:0%
one important exception to that and
that's<00:08:38.539><c> creators</c><00:08:39.110><c> and</c><00:08:39.349><c> we'll</c><00:08:39.469><c> get</c><00:08:39.620><c> to</c><00:08:39.769><c> those</c>

00:08:39.850 --> 00:08:39.860 align:start position:0%
that's creators and we'll get to those
 

00:08:39.860 --> 00:08:43.750 align:start position:0%
that's creators and we'll get to those
in<00:08:39.919><c> a</c><00:08:40.099><c> minute</c><00:08:41.140><c> we</c><00:08:42.140><c> use</c><00:08:42.380><c> common</c><00:08:42.949><c> verbs</c><00:08:43.250><c> to</c><00:08:43.579><c> have</c>

00:08:43.750 --> 00:08:43.760 align:start position:0%
in a minute we use common verbs to have
 

00:08:43.760 --> 00:08:45.660 align:start position:0%
in a minute we use common verbs to have
common<00:08:44.269><c> meanings</c><00:08:44.690><c> throughout</c><00:08:45.140><c> the</c>

00:08:45.660 --> 00:08:45.670 align:start position:0%
common meanings throughout the
 

00:08:45.670 --> 00:08:49.120 align:start position:0%
common meanings throughout the
throughout<00:08:46.670><c> the</c><00:08:46.940><c> API</c><00:08:47.240><c> so</c><00:08:47.870><c> that</c><00:08:48.050><c> CF</c><00:08:48.380><c> array</c><00:08:48.800><c> get</c>

00:08:49.120 --> 00:08:49.130 align:start position:0%
throughout the API so that CF array get
 

00:08:49.130 --> 00:08:51.250 align:start position:0%
throughout the API so that CF array get
array<00:08:49.820><c> add</c><00:08:50.089><c> is</c><00:08:50.449><c> going</c><00:08:50.660><c> to</c><00:08:50.750><c> work</c><00:08:50.839><c> the</c><00:08:51.019><c> same</c><00:08:51.199><c> way</c>

00:08:51.250 --> 00:08:51.260 align:start position:0%
array add is going to work the same way
 

00:08:51.260 --> 00:08:55.870 align:start position:0%
array add is going to work the same way
as<00:08:51.560><c> CF</c><00:08:51.890><c> dictionary</c><00:08:52.519><c> add</c><00:08:53.890><c> finally</c><00:08:54.890><c> when</c><00:08:55.610><c> we</c><00:08:55.760><c> are</c>

00:08:55.870 --> 00:08:55.880 align:start position:0%
as CF dictionary add finally when we are
 

00:08:55.880 --> 00:08:58.360 align:start position:0%
as CF dictionary add finally when we are
passing<00:08:56.120><c> information</c><00:08:56.540><c> back</c><00:08:57.079><c> to</c><00:08:57.110><c> you</c><00:08:57.589><c> we</c><00:08:58.220><c> will</c>

00:08:58.360 --> 00:08:58.370 align:start position:0%
passing information back to you we will
 

00:08:58.370 --> 00:09:00.430 align:start position:0%
passing information back to you we will
always<00:08:58.699><c> put</c><00:08:58.940><c> those</c><00:08:59.120><c> out</c><00:08:59.360><c> parameters</c><00:08:59.810><c> the</c><00:09:00.260><c> ones</c>

00:09:00.430 --> 00:09:00.440 align:start position:0%
always put those out parameters the ones
 

00:09:00.440 --> 00:09:01.509 align:start position:0%
always put those out parameters the ones
that<00:09:00.589><c> are</c><00:09:00.680><c> going</c><00:09:00.800><c> to</c><00:09:00.890><c> be</c><00:09:01.040><c> passed</c><00:09:01.279><c> by</c><00:09:01.490><c> reference</c>

00:09:01.509 --> 00:09:01.519 align:start position:0%
that are going to be passed by reference
 

00:09:01.519 --> 00:09:06.060 align:start position:0%
that are going to be passed by reference
at<00:09:02.149><c> the</c><00:09:02.209><c> very</c><00:09:02.630><c> end</c>

00:09:06.060 --> 00:09:06.070 align:start position:0%
 
 

00:09:06.070 --> 00:09:09.210 align:start position:0%
 
there<00:09:06.880><c> are</c><00:09:07.210><c> a</c><00:09:07.240><c> small</c><00:09:07.780><c> number</c><00:09:07.960><c> of</c><00:09:08.350><c> polymorphic</c>

00:09:09.210 --> 00:09:09.220 align:start position:0%
there are a small number of polymorphic
 

00:09:09.220 --> 00:09:11.820 align:start position:0%
there are a small number of polymorphic
functions<00:09:09.730><c> inside</c><00:09:10.210><c> of</c><00:09:10.360><c> CF</c><00:09:10.690><c> this</c><00:09:11.530><c> is</c><00:09:11.680><c> the</c>

00:09:11.820 --> 00:09:11.830 align:start position:0%
functions inside of CF this is the
 

00:09:11.830 --> 00:09:15.870 align:start position:0%
functions inside of CF this is the
entire<00:09:12.160><c> list</c><00:09:13.560><c> this</c><00:09:14.560><c> these</c><00:09:15.190><c> functions</c><00:09:15.670><c> can</c><00:09:15.850><c> be</c>

00:09:15.870 --> 00:09:15.880 align:start position:0%
entire list this these functions can be
 

00:09:15.880 --> 00:09:19.260 align:start position:0%
entire list this these functions can be
used<00:09:16.240><c> with</c><00:09:16.450><c> any</c><00:09:16.870><c> CF</c><00:09:17.440><c> type</c><00:09:18.120><c> regardless</c><00:09:19.120><c> of</c>

00:09:19.260 --> 00:09:19.270 align:start position:0%
used with any CF type regardless of
 

00:09:19.270 --> 00:09:23.460 align:start position:0%
used with any CF type regardless of
class<00:09:20.430><c> so</c><00:09:21.430><c> I</c><00:09:21.760><c> equality</c><00:09:22.750><c> and</c><00:09:22.870><c> hashing</c><00:09:23.260><c> so</c><00:09:23.410><c> you</c>

00:09:23.460 --> 00:09:23.470 align:start position:0%
class so I equality and hashing so you
 

00:09:23.470 --> 00:09:26.040 align:start position:0%
class so I equality and hashing so you
have<00:09:23.560><c> to</c><00:09:23.650><c> equal</c><00:09:23.830><c> um</c><00:09:23.920><c> c</c><00:09:24.130><c> of</c><00:09:24.220><c> hash</c><00:09:24.840><c> that's</c><00:09:25.840><c> what</c>

00:09:26.040 --> 00:09:26.050 align:start position:0%
have to equal um c of hash that's what
 

00:09:26.050 --> 00:09:29.280 align:start position:0%
have to equal um c of hash that's what
allows<00:09:26.260><c> us</c><00:09:26.290><c> to</c><00:09:26.620><c> add</c><00:09:26.800><c> at</c><00:09:27.450><c> add</c><00:09:28.450><c> objects</c><00:09:29.020><c> into</c>

00:09:29.280 --> 00:09:29.290 align:start position:0%
allows us to add at add objects into
 

00:09:29.290 --> 00:09:31.940 align:start position:0%
allows us to add at add objects into
collections<00:09:29.860><c> and</c><00:09:30.220><c> retrieve</c><00:09:30.580><c> them</c><00:09:30.820><c> out</c><00:09:31.000><c> of</c><00:09:31.030><c> it</c>

00:09:31.940 --> 00:09:31.950 align:start position:0%
collections and retrieve them out of it
 

00:09:31.950 --> 00:09:33.780 align:start position:0%
collections and retrieve them out of it
there's<00:09:32.950><c> a</c><00:09:33.010><c> little</c><00:09:33.280><c> bit</c><00:09:33.460><c> of</c><00:09:33.520><c> interest</c>

00:09:33.780 --> 00:09:33.790 align:start position:0%
there's a little bit of interest
 

00:09:33.790 --> 00:09:36.660 align:start position:0%
there's a little bit of interest
introspection<00:09:34.690><c> CF</c><00:09:35.170><c> get</c><00:09:35.440><c> type</c><00:09:35.740><c> ID</c><00:09:35.980><c> will</c><00:09:36.400><c> return</c>

00:09:36.660 --> 00:09:36.670 align:start position:0%
introspection CF get type ID will return
 

00:09:36.670 --> 00:09:40.350 align:start position:0%
introspection CF get type ID will return
the<00:09:36.880><c> type</c><00:09:37.120><c> ID</c><00:09:37.360><c> of</c><00:09:37.600><c> the</c><00:09:37.720><c> class</c><00:09:39.060><c> CF</c><00:09:40.060><c> copy</c>

00:09:40.350 --> 00:09:40.360 align:start position:0%
the type ID of the class CF copy
 

00:09:40.360 --> 00:09:43.200 align:start position:0%
the type ID of the class CF copy
description<00:09:41.170><c> will</c><00:09:41.950><c> provide</c><00:09:42.310><c> a</c><00:09:42.640><c> string</c>

00:09:43.200 --> 00:09:43.210 align:start position:0%
description will provide a string
 

00:09:43.210 --> 00:09:45.090 align:start position:0%
description will provide a string
description<00:09:43.540><c> of</c><00:09:44.050><c> the</c><00:09:44.200><c> object</c><00:09:44.350><c> this</c><00:09:44.740><c> is</c><00:09:44.890><c> for</c>

00:09:45.090 --> 00:09:45.100 align:start position:0%
description of the object this is for
 

00:09:45.100 --> 00:09:46.740 align:start position:0%
description of the object this is for
debugging<00:09:45.430><c> purposes</c><00:09:45.580><c> only</c><00:09:46.180><c> these</c><00:09:46.450><c> are</c><00:09:46.600><c> not</c>

00:09:46.740 --> 00:09:46.750 align:start position:0%
debugging purposes only these are not
 

00:09:46.750 --> 00:09:49.320 align:start position:0%
debugging purposes only these are not
intended<00:09:47.080><c> to</c><00:09:47.350><c> show</c><00:09:47.530><c> to</c><00:09:47.590><c> the</c><00:09:47.740><c> user</c><00:09:47.860><c> in</c><00:09:48.460><c> fact</c><00:09:49.150><c> it</c>

00:09:49.320 --> 00:09:49.330 align:start position:0%
intended to show to the user in fact it
 

00:09:49.330 --> 00:09:51.150 align:start position:0%
intended to show to the user in fact it
will<00:09:49.420><c> frequently</c><00:09:49.750><c> have</c><00:09:50.110><c> the</c><00:09:50.230><c> hex</c><00:09:50.440><c> address</c><00:09:50.950><c> of</c>

00:09:51.150 --> 00:09:51.160 align:start position:0%
will frequently have the hex address of
 

00:09:51.160 --> 00:09:54.690 align:start position:0%
will frequently have the hex address of
the<00:09:52.320><c> of</c><00:09:53.320><c> the</c><00:09:53.560><c> object</c><00:09:53.950><c> embedded</c><00:09:54.310><c> in</c><00:09:54.430><c> them</c><00:09:54.550><c> and</c>

00:09:54.690 --> 00:09:54.700 align:start position:0%
the of the object embedded in them and
 

00:09:54.700 --> 00:09:58.050 align:start position:0%
the of the object embedded in them and
finally<00:09:55.450><c> memory</c><00:09:55.900><c> memory</c><00:09:56.260><c> management</c><00:09:56.910><c> we</c><00:09:57.910><c> use</c>

00:09:58.050 --> 00:09:58.060 align:start position:0%
finally memory memory management we use
 

00:09:58.060 --> 00:09:59.580 align:start position:0%
finally memory memory management we use
a<00:09:58.090><c> reference</c><00:09:58.540><c> counting</c><00:09:58.900><c> memory</c><00:09:59.200><c> management</c>

00:09:59.580 --> 00:09:59.590 align:start position:0%
a reference counting memory management
 

00:09:59.590 --> 00:10:02.400 align:start position:0%
a reference counting memory management
scheme<00:10:00.070><c> so</c><00:10:00.400><c> CF</c><00:10:00.700><c> retain</c><00:10:01.060><c> gains</c><00:10:01.570><c> a</c><00:10:01.720><c> reference</c><00:10:02.110><c> CF</c>

00:10:02.400 --> 00:10:02.410 align:start position:0%
scheme so CF retain gains a reference CF
 

00:10:02.410 --> 00:10:05.010 align:start position:0%
scheme so CF retain gains a reference CF
release<00:10:02.710><c> releases</c><00:10:03.250><c> it</c><00:10:03.400><c> CF</c><00:10:04.090><c> def</c><00:10:04.270><c> retain</c><00:10:04.660><c> count</c>

00:10:05.010 --> 00:10:05.020 align:start position:0%
release releases it CF def retain count
 

00:10:05.020 --> 00:10:07.020 align:start position:0%
release releases it CF def retain count
is<00:10:05.230><c> intended</c><00:10:05.710><c> for</c><00:10:05.740><c> debugging</c><00:10:06.220><c> purposes</c><00:10:06.370><c> only</c>

00:10:07.020 --> 00:10:07.030 align:start position:0%
is intended for debugging purposes only
 

00:10:07.030 --> 00:10:09.150 align:start position:0%
is intended for debugging purposes only
so<00:10:07.210><c> you</c><00:10:07.390><c> can</c><00:10:07.630><c> track</c><00:10:07.900><c> how</c><00:10:08.560><c> the</c><00:10:08.590><c> reference</c>

00:10:09.150 --> 00:10:09.160 align:start position:0%
so you can track how the reference
 

00:10:09.160 --> 00:10:10.830 align:start position:0%
so you can track how the reference
counting<00:10:09.490><c> goes</c><00:10:10.090><c> through</c><00:10:10.420><c> an</c><00:10:10.480><c> object's</c>

00:10:10.830 --> 00:10:10.840 align:start position:0%
counting goes through an object's
 

00:10:10.840 --> 00:10:13.320 align:start position:0%
counting goes through an object's
lifetime<00:10:11.320><c> and</c><00:10:11.590><c> then</c><00:10:12.220><c> CF</c><00:10:12.550><c> get</c><00:10:12.790><c> allocator</c>

00:10:13.320 --> 00:10:13.330 align:start position:0%
lifetime and then CF get allocator
 

00:10:13.330 --> 00:10:15.570 align:start position:0%
lifetime and then CF get allocator
allows<00:10:13.660><c> you</c><00:10:13.840><c> to</c><00:10:13.960><c> discover</c><00:10:14.350><c> how</c><00:10:14.920><c> the</c><00:10:14.950><c> object</c>

00:10:15.570 --> 00:10:15.580 align:start position:0%
allows you to discover how the object
 

00:10:15.580 --> 00:10:21.180 align:start position:0%
allows you to discover how the object
was<00:10:15.700><c> allocated</c><00:10:18.240><c> so</c><00:10:19.240><c> as</c><00:10:19.540><c> I</c><00:10:20.290><c> just</c><00:10:20.500><c> said</c><00:10:20.680><c> CF</c><00:10:21.010><c> types</c>

00:10:21.180 --> 00:10:21.190 align:start position:0%
was allocated so as I just said CF types
 

00:10:21.190 --> 00:10:23.190 align:start position:0%
was allocated so as I just said CF types
of<00:10:21.340><c> reference</c><00:10:21.670><c> counted</c><00:10:22.030><c> retained</c><00:10:22.690><c> to</c><00:10:22.810><c> get</c><00:10:23.020><c> to</c>

00:10:23.190 --> 00:10:23.200 align:start position:0%
of reference counted retained to get to
 

00:10:23.200 --> 00:10:25.370 align:start position:0%
of reference counted retained to get to
take<00:10:23.350><c> a</c><00:10:23.380><c> reference</c><00:10:23.860><c> release</c><00:10:24.220><c> to</c><00:10:24.460><c> release</c><00:10:24.970><c> it</c>

00:10:25.370 --> 00:10:25.380 align:start position:0%
take a reference release to release it
 

00:10:25.380 --> 00:10:27.510 align:start position:0%
take a reference release to release it
anytime<00:10:26.380><c> you</c><00:10:26.530><c> have</c><00:10:26.650><c> a</c><00:10:26.710><c> reference</c><00:10:27.130><c> counting</c>

00:10:27.510 --> 00:10:27.520 align:start position:0%
anytime you have a reference counting
 

00:10:27.520 --> 00:10:29.790 align:start position:0%
anytime you have a reference counting
screen<00:10:27.940><c> you</c><00:10:28.450><c> have</c><00:10:28.630><c> this</c><00:10:28.780><c> common</c><00:10:29.020><c> problem</c><00:10:29.620><c> of</c>

00:10:29.790 --> 00:10:29.800 align:start position:0%
screen you have this common problem of
 

00:10:29.800 --> 00:10:32.550 align:start position:0%
screen you have this common problem of
who<00:10:30.520><c> gets</c><00:10:30.910><c> who</c><00:10:31.480><c> has</c><00:10:31.690><c> the</c><00:10:31.900><c> reference</c><00:10:32.290><c> when</c><00:10:32.470><c> an</c>

00:10:32.550 --> 00:10:32.560 align:start position:0%
who gets who has the reference when an
 

00:10:32.560 --> 00:10:35.670 align:start position:0%
who gets who has the reference when an
object<00:10:32.680><c> is</c><00:10:33.010><c> returned</c><00:10:33.370><c> by</c><00:10:33.550><c> a</c><00:10:33.580><c> function</c><00:10:34.680><c> here</c>

00:10:35.670 --> 00:10:35.680 align:start position:0%
object is returned by a function here
 

00:10:35.680 --> 00:10:38.460 align:start position:0%
object is returned by a function here
are<00:10:35.800><c> the</c><00:10:35.860><c> rules</c><00:10:36.070><c> very</c><00:10:36.970><c> very</c><00:10:37.180><c> simple</c><00:10:37.660><c> if</c><00:10:37.840><c> the</c>

00:10:38.460 --> 00:10:38.470 align:start position:0%
are the rules very very simple if the
 

00:10:38.470 --> 00:10:40.260 align:start position:0%
are the rules very very simple if the
function<00:10:38.680><c> you</c><00:10:38.980><c> called</c><00:10:39.250><c> includes</c><00:10:39.880><c> the</c><00:10:40.030><c> word</c>

00:10:40.260 --> 00:10:40.270 align:start position:0%
function you called includes the word
 

00:10:40.270 --> 00:10:43.350 align:start position:0%
function you called includes the word
get<00:10:40.840><c> you</c><00:10:41.590><c> did</c><00:10:41.800><c> not</c><00:10:41.950><c> get</c><00:10:42.220><c> a</c><00:10:42.250><c> reference</c><00:10:42.520><c> the</c>

00:10:43.350 --> 00:10:43.360 align:start position:0%
get you did not get a reference the
 

00:10:43.360 --> 00:10:45.800 align:start position:0%
get you did not get a reference the
object<00:10:43.780><c> you</c><00:10:43.810><c> called</c><00:10:44.140><c> retains</c><00:10:44.740><c> the</c><00:10:44.980><c> reference</c>

00:10:45.800 --> 00:10:45.810 align:start position:0%
object you called retains the reference
 

00:10:45.810 --> 00:10:48.420 align:start position:0%
object you called retains the reference
so<00:10:46.810><c> if</c><00:10:46.930><c> you</c><00:10:47.020><c> intend</c><00:10:47.350><c> to</c><00:10:47.440><c> keep</c><00:10:47.590><c> that</c><00:10:47.650><c> object</c>

00:10:48.420 --> 00:10:48.430 align:start position:0%
so if you intend to keep that object
 

00:10:48.430 --> 00:10:51.260 align:start position:0%
so if you intend to keep that object
you'd<00:10:49.210><c> better</c><00:10:49.450><c> retain</c><00:10:49.810><c> it</c><00:10:49.960><c> yourself</c>

00:10:51.260 --> 00:10:51.270 align:start position:0%
you'd better retain it yourself
 

00:10:51.270 --> 00:10:54.060 align:start position:0%
you'd better retain it yourself
functions<00:10:52.270><c> that</c><00:10:52.420><c> include</c><00:10:52.810><c> the</c><00:10:52.990><c> words</c><00:10:53.230><c> copy</c><00:10:53.680><c> or</c>

00:10:54.060 --> 00:10:54.070 align:start position:0%
functions that include the words copy or
 

00:10:54.070 --> 00:10:56.880 align:start position:0%
functions that include the words copy or
create<00:10:54.820><c> on</c><00:10:55.120><c> the</c><00:10:55.690><c> other</c><00:10:55.840><c> hand</c><00:10:56.080><c> give</c><00:10:56.560><c> you</c><00:10:56.860><c> a</c>

00:10:56.880 --> 00:10:56.890 align:start position:0%
create on the other hand give you a
 

00:10:56.890 --> 00:10:58.590 align:start position:0%
create on the other hand give you a
reference<00:10:57.220><c> and</c><00:10:57.700><c> when</c><00:10:58.180><c> you</c><00:10:58.270><c> are</c><00:10:58.390><c> done</c><00:10:58.540><c> with</c>

00:10:58.590 --> 00:10:58.600 align:start position:0%
reference and when you are done with
 

00:10:58.600 --> 00:11:00.480 align:start position:0%
reference and when you are done with
that<00:10:58.930><c> object</c><00:10:59.110><c> you</c><00:10:59.440><c> must</c><00:10:59.680><c> release</c><00:11:00.010><c> it</c><00:11:00.190><c> or</c><00:11:00.370><c> else</c>

00:11:00.480 --> 00:11:00.490 align:start position:0%
that object you must release it or else
 

00:11:00.490 --> 00:11:06.000 align:start position:0%
that object you must release it or else
you<00:11:00.730><c> will</c><00:11:00.880><c> have</c><00:11:01.090><c> a</c><00:11:01.120><c> leak</c><00:11:04.560><c> there</c><00:11:05.560><c> is</c><00:11:05.650><c> something</c>

00:11:06.000 --> 00:11:06.010 align:start position:0%
you will have a leak there is something
 

00:11:06.010 --> 00:11:07.710 align:start position:0%
you will have a leak there is something
important<00:11:06.340><c> to</c><00:11:06.400><c> keep</c><00:11:06.550><c> in</c><00:11:06.670><c> mind</c><00:11:06.730><c> here</c><00:11:07.360><c> we</c><00:11:07.600><c> are</c>

00:11:07.710 --> 00:11:07.720 align:start position:0%
important to keep in mind here we are
 

00:11:07.720 --> 00:11:12.510 align:start position:0%
important to keep in mind here we are
simply<00:11:08.170><c> using</c><00:11:08.470><c> copy</c><00:11:08.770><c> and</c><00:11:08.980><c> create</c><00:11:09.610><c> as</c><00:11:10.440><c> as</c><00:11:11.440><c> a</c><00:11:11.520><c> way</c>

00:11:12.510 --> 00:11:12.520 align:start position:0%
simply using copy and create as as a way
 

00:11:12.520 --> 00:11:14.490 align:start position:0%
simply using copy and create as as a way
of<00:11:12.550><c> telling</c><00:11:13.120><c> you</c><00:11:13.300><c> the</c><00:11:13.510><c> developer</c><00:11:13.720><c> whether</c><00:11:14.260><c> or</c>

00:11:14.490 --> 00:11:14.500 align:start position:0%
of telling you the developer whether or
 

00:11:14.500 --> 00:11:18.330 align:start position:0%
of telling you the developer whether or
not<00:11:14.680><c> you've</c><00:11:14.950><c> got</c><00:11:15.160><c> a</c><00:11:15.400><c> reference</c><00:11:17.100><c> there</c><00:11:18.100><c> may</c><00:11:18.310><c> be</c>

00:11:18.330 --> 00:11:18.340 align:start position:0%
not you've got a reference there may be
 

00:11:18.340 --> 00:11:19.800 align:start position:0%
not you've got a reference there may be
some<00:11:18.670><c> optimizations</c><00:11:19.360><c> going</c><00:11:19.600><c> on</c>

00:11:19.800 --> 00:11:19.810 align:start position:0%
some optimizations going on
 

00:11:19.810 --> 00:11:21.630 align:start position:0%
some optimizations going on
the<00:11:19.960><c> back</c><00:11:20.170><c> particularly</c><00:11:20.890><c> in</c><00:11:21.130><c> the</c><00:11:21.250><c> case</c><00:11:21.430><c> of</c>

00:11:21.630 --> 00:11:21.640 align:start position:0%
the back particularly in the case of
 

00:11:21.640 --> 00:11:25.050 align:start position:0%
the back particularly in the case of
immutable<00:11:22.390><c> objects</c><00:11:23.250><c> so</c><00:11:24.250><c> even</c><00:11:24.790><c> though</c><00:11:24.820><c> you've</c>

00:11:25.050 --> 00:11:25.060 align:start position:0%
immutable objects so even though you've
 

00:11:25.060 --> 00:11:26.730 align:start position:0%
immutable objects so even though you've
received<00:11:25.450><c> a</c><00:11:25.570><c> reference</c><00:11:25.990><c> copy</c><00:11:26.260><c> may</c><00:11:26.560><c> not</c>

00:11:26.730 --> 00:11:26.740 align:start position:0%
received a reference copy may not
 

00:11:26.740 --> 00:11:29.040 align:start position:0%
received a reference copy may not
actually<00:11:26.980><c> do</c><00:11:27.370><c> any</c><00:11:27.550><c> copy</c><00:11:27.850><c> memory</c><00:11:28.420><c> copying</c><00:11:28.900><c> and</c>

00:11:29.040 --> 00:11:29.050 align:start position:0%
actually do any copy memory copying and
 

00:11:29.050 --> 00:11:30.870 align:start position:0%
actually do any copy memory copying and
likewise<00:11:29.500><c> create</c><00:11:30.040><c> may</c><00:11:30.279><c> not</c><00:11:30.460><c> do</c><00:11:30.700><c> any</c>

00:11:30.870 --> 00:11:30.880 align:start position:0%
likewise create may not do any
 

00:11:30.880 --> 00:11:33.510 align:start position:0%
likewise create may not do any
allocation<00:11:31.600><c> CF</c><00:11:32.500><c> is</c><00:11:32.650><c> simply</c><00:11:33.040><c> being</c><00:11:33.220><c> more</c>

00:11:33.510 --> 00:11:33.520 align:start position:0%
allocation CF is simply being more
 

00:11:33.520 --> 00:11:38.269 align:start position:0%
allocation CF is simply being more
efficient<00:11:34.029><c> and</c><00:11:34.150><c> it</c><00:11:34.390><c> shouldn't</c><00:11:34.720><c> matter</c><00:11:34.930><c> to</c><00:11:35.110><c> you</c>

00:11:38.269 --> 00:11:38.279 align:start position:0%
 
 

00:11:38.279 --> 00:11:42.990 align:start position:0%
 
allocators<00:11:39.279><c> an</c><00:11:40.920><c> alligator</c><00:11:41.920><c> there</c><00:11:42.640><c> is</c><00:11:42.730><c> a</c><00:11:42.760><c> type</c>

00:11:42.990 --> 00:11:43.000 align:start position:0%
allocators an alligator there is a type
 

00:11:43.000 --> 00:11:45.510 align:start position:0%
allocators an alligator there is a type
for<00:11:43.240><c> at</c><00:11:43.330><c> CF</c><00:11:43.570><c> allocator</c><00:11:44.020><c> ref</c><00:11:44.320><c> an</c><00:11:45.040><c> alligator</c>

00:11:45.510 --> 00:11:45.520 align:start position:0%
for at CF allocator ref an alligator
 

00:11:45.520 --> 00:11:49.800 align:start position:0%
for at CF allocator ref an alligator
encapsulate<00:11:46.330><c> an</c><00:11:46.860><c> allocation</c><00:11:47.860><c> scheme</c><00:11:48.430><c> it</c><00:11:49.000><c> you</c>

00:11:49.800 --> 00:11:49.810 align:start position:0%
encapsulate an allocation scheme it you
 

00:11:49.810 --> 00:11:52.260 align:start position:0%
encapsulate an allocation scheme it you
call<00:11:50.050><c> an</c><00:11:50.200><c> alligator</c><00:11:50.620><c> to</c><00:11:50.800><c> allocate</c><00:11:51.279><c> memory</c><00:11:51.490><c> to</c>

00:11:52.260 --> 00:11:52.270 align:start position:0%
call an alligator to allocate memory to
 

00:11:52.270 --> 00:11:55.680 align:start position:0%
call an alligator to allocate memory to
release<00:11:52.630><c> it</c><00:11:52.870><c> to</c><00:11:53.589><c> reallocate</c><00:11:54.100><c> it</c><00:11:54.460><c> and</c><00:11:55.210><c> so</c><00:11:55.510><c> on</c>

00:11:55.680 --> 00:11:55.690 align:start position:0%
release it to reallocate it and so on
 

00:11:55.690 --> 00:11:58.650 align:start position:0%
release it to reallocate it and so on
and<00:11:56.339><c> every</c><00:11:57.339><c> create</c><00:11:57.700><c> function</c><00:11:58.240><c> so</c><00:11:58.390><c> every</c>

00:11:58.650 --> 00:11:58.660 align:start position:0%
and every create function so every
 

00:11:58.660 --> 00:12:00.960 align:start position:0%
and every create function so every
function<00:11:59.050><c> that</c><00:11:59.170><c> could</c><00:11:59.440><c> create</c><00:11:59.800><c> a</c><00:11:59.920><c> CF</c><00:12:00.400><c> object</c>

00:12:00.960 --> 00:12:00.970 align:start position:0%
function that could create a CF object
 

00:12:00.970 --> 00:12:04.140 align:start position:0%
function that could create a CF object
takes<00:12:01.810><c> an</c><00:12:02.020><c> alligator</c><00:12:02.500><c> as</c><00:12:02.740><c> first</c><00:12:03.310><c> argument</c><00:12:03.820><c> and</c>

00:12:04.140 --> 00:12:04.150 align:start position:0%
takes an alligator as first argument and
 

00:12:04.150 --> 00:12:06.630 align:start position:0%
takes an alligator as first argument and
uses<00:12:04.870><c> that</c><00:12:05.020><c> alligator</c><00:12:05.589><c> to</c><00:12:05.770><c> create</c><00:12:06.160><c> the</c><00:12:06.310><c> memory</c>

00:12:06.630 --> 00:12:06.640 align:start position:0%
uses that alligator to create the memory
 

00:12:06.640 --> 00:12:09.540 align:start position:0%
uses that alligator to create the memory
necessary<00:12:07.860><c> normally</c><00:12:08.860><c> you're</c><00:12:09.190><c> going</c><00:12:09.370><c> to</c><00:12:09.460><c> want</c>

00:12:09.540 --> 00:12:09.550 align:start position:0%
necessary normally you're going to want
 

00:12:09.550 --> 00:12:12.720 align:start position:0%
necessary normally you're going to want
to<00:12:09.670><c> pass</c><00:12:09.820><c> KCF</c><00:12:10.540><c> allocator</c><00:12:11.080><c> to</c><00:12:11.290><c> default</c><00:12:12.010><c> which</c>

00:12:12.720 --> 00:12:12.730 align:start position:0%
to pass KCF allocator to default which
 

00:12:12.730 --> 00:12:15.090 align:start position:0%
to pass KCF allocator to default which
asks<00:12:13.300><c> CF</c><00:12:13.720><c> to</c><00:12:14.080><c> use</c><00:12:14.260><c> whatever</c><00:12:14.529><c> the</c><00:12:14.920><c> current</c>

00:12:15.090 --> 00:12:15.100 align:start position:0%
asks CF to use whatever the current
 

00:12:15.100 --> 00:12:18.150 align:start position:0%
asks CF to use whatever the current
default<00:12:15.460><c> allocator</c><00:12:16.240><c> is</c><00:12:16.540><c> there's</c><00:12:17.020><c> one</c><00:12:17.080><c> we</c><00:12:17.950><c> have</c>

00:12:18.150 --> 00:12:18.160 align:start position:0%
default allocator is there's one we have
 

00:12:18.160 --> 00:12:20.430 align:start position:0%
default allocator is there's one we have
one<00:12:18.430><c> that</c><00:12:18.640><c> we</c><00:12:18.730><c> installed</c><00:12:19.089><c> by</c><00:12:19.210><c> default</c><00:12:19.270><c> if</c><00:12:19.870><c> you</c>

00:12:20.430 --> 00:12:20.440 align:start position:0%
one that we installed by default if you
 

00:12:20.440 --> 00:12:22.079 align:start position:0%
one that we installed by default if you
want<00:12:20.650><c> to</c><00:12:20.800><c> you</c><00:12:20.950><c> can</c><00:12:21.070><c> install</c><00:12:21.400><c> your</c><00:12:21.610><c> own</c><00:12:21.670><c> to</c><00:12:21.970><c> do</c>

00:12:22.079 --> 00:12:22.089 align:start position:0%
want to you can install your own to do
 

00:12:22.089 --> 00:12:27.090 align:start position:0%
want to you can install your own to do
custom<00:12:22.480><c> memory</c><00:12:23.080><c> management</c><00:12:25.800><c> that's</c><00:12:26.800><c> all</c><00:12:26.980><c> I'm</c>

00:12:27.090 --> 00:12:27.100 align:start position:0%
custom memory management that's all I'm
 

00:12:27.100 --> 00:12:29.370 align:start position:0%
custom memory management that's all I'm
going<00:12:27.250><c> to</c><00:12:27.310><c> say</c><00:12:27.400><c> on</c><00:12:27.910><c> the</c><00:12:28.390><c> basic</c><00:12:28.810><c> structure</c><00:12:29.200><c> of</c>

00:12:29.370 --> 00:12:29.380 align:start position:0%
going to say on the basic structure of
 

00:12:29.380 --> 00:12:32.430 align:start position:0%
going to say on the basic structure of
CF<00:12:30.040><c> or</c><00:12:30.339><c> the</c><00:12:30.400><c> basic</c><00:12:30.700><c> concepts</c><00:12:31.600><c> and</c><00:12:31.839><c> now</c><00:12:32.380><c> I'm</c>

00:12:32.430 --> 00:12:32.440 align:start position:0%
CF or the basic concepts and now I'm
 

00:12:32.440 --> 00:12:33.870 align:start position:0%
CF or the basic concepts and now I'm
going<00:12:32.620><c> to</c><00:12:32.680><c> move</c><00:12:32.770><c> on</c><00:12:32.950><c> to</c><00:12:32.980><c> talk</c><00:12:33.339><c> about</c><00:12:33.520><c> some</c><00:12:33.850><c> of</c>

00:12:33.870 --> 00:12:33.880 align:start position:0%
going to move on to talk about some of
 

00:12:33.880 --> 00:12:35.550 align:start position:0%
going to move on to talk about some of
the<00:12:34.000><c> basic</c><00:12:34.330><c> types</c><00:12:34.600><c> inside</c><00:12:35.230><c> of</c><00:12:35.350><c> core</c>

00:12:35.550 --> 00:12:35.560 align:start position:0%
the basic types inside of core
 

00:12:35.560 --> 00:12:38.490 align:start position:0%
the basic types inside of core
foundations<00:12:36.540><c> we're</c><00:12:37.540><c> going</c><00:12:37.690><c> to</c><00:12:37.750><c> start</c><00:12:37.960><c> with</c><00:12:38.170><c> CF</c>

00:12:38.490 --> 00:12:38.500 align:start position:0%
foundations we're going to start with CF
 

00:12:38.500 --> 00:12:40.620 align:start position:0%
foundations we're going to start with CF
string<00:12:38.890><c> because</c><00:12:39.280><c> that's</c><00:12:39.490><c> probably</c><00:12:40.150><c> the</c><00:12:40.420><c> most</c>

00:12:40.620 --> 00:12:40.630 align:start position:0%
string because that's probably the most
 

00:12:40.630 --> 00:12:42.329 align:start position:0%
string because that's probably the most
basic<00:12:41.170><c> of</c><00:12:41.290><c> the</c><00:12:41.440><c> types</c><00:12:41.680><c> the</c><00:12:41.950><c> one</c><00:12:42.100><c> that</c><00:12:42.220><c> you're</c>

00:12:42.329 --> 00:12:42.339 align:start position:0%
basic of the types the one that you're
 

00:12:42.339 --> 00:12:44.820 align:start position:0%
basic of the types the one that you're
most<00:12:42.550><c> likely</c><00:12:42.850><c> to</c><00:12:43.089><c> be</c><00:12:43.210><c> using</c><00:12:43.630><c> then</c><00:12:44.560><c> we're</c><00:12:44.710><c> going</c>

00:12:44.820 --> 00:12:44.830 align:start position:0%
most likely to be using then we're going
 

00:12:44.830 --> 00:12:46.980 align:start position:0%
most likely to be using then we're going
to<00:12:44.890><c> talk</c><00:12:45.100><c> briefly</c><00:12:45.280><c> about</c><00:12:45.610><c> CF</c><00:12:46.089><c> array</c><00:12:46.390><c> and</c><00:12:46.720><c> CF</c>

00:12:46.980 --> 00:12:46.990 align:start position:0%
to talk briefly about CF array and CF
 

00:12:46.990 --> 00:12:48.210 align:start position:0%
to talk briefly about CF array and CF
dictionary<00:12:47.500><c> which</c><00:12:47.740><c> are</c><00:12:47.860><c> two</c><00:12:48.010><c> of</c><00:12:48.130><c> our</c>

00:12:48.210 --> 00:12:48.220 align:start position:0%
dictionary which are two of our
 

00:12:48.220 --> 00:12:50.910 align:start position:0%
dictionary which are two of our
collection<00:12:48.790><c> types</c><00:12:49.620><c> once</c><00:12:50.620><c> we're</c><00:12:50.770><c> done</c><00:12:50.860><c> with</c>

00:12:50.910 --> 00:12:50.920 align:start position:0%
collection types once we're done with
 

00:12:50.920 --> 00:12:52.680 align:start position:0%
collection types once we're done with
that<00:12:51.070><c> we'll</c><00:12:51.460><c> look</c><00:12:51.520><c> at</c><00:12:51.730><c> how</c><00:12:51.790><c> collections</c><00:12:52.540><c> and</c>

00:12:52.680 --> 00:12:52.690 align:start position:0%
that we'll look at how collections and
 

00:12:52.690 --> 00:12:54.420 align:start position:0%
that we'll look at how collections and
mutability<00:12:53.170><c> work</c><00:12:53.440><c> together</c><00:12:53.620><c> inside</c><00:12:54.220><c> this</c>

00:12:54.420 --> 00:12:54.430 align:start position:0%
mutability work together inside this
 

00:12:54.430 --> 00:12:56.610 align:start position:0%
mutability work together inside this
library<00:12:54.970><c> and</c><00:12:55.210><c> finally</c><00:12:56.110><c> we're</c><00:12:56.260><c> going</c><00:12:56.350><c> to</c><00:12:56.500><c> see</c>

00:12:56.610 --> 00:12:56.620 align:start position:0%
library and finally we're going to see
 

00:12:56.620 --> 00:12:58.290 align:start position:0%
library and finally we're going to see
how<00:12:56.770><c> all</c><00:12:57.010><c> of</c><00:12:57.040><c> that</c><00:12:57.280><c> comes</c><00:12:57.520><c> together</c><00:12:57.700><c> to</c><00:12:57.970><c> form</c>

00:12:58.290 --> 00:12:58.300 align:start position:0%
how all of that comes together to form
 

00:12:58.300 --> 00:13:03.720 align:start position:0%
how all of that comes together to form
property<00:12:58.780><c> list</c><00:13:01.650><c> conceptually</c><00:13:02.650><c> a</c><00:13:02.890><c> CF</c><00:13:03.370><c> string</c>

00:13:03.720 --> 00:13:03.730 align:start position:0%
property list conceptually a CF string
 

00:13:03.730 --> 00:13:07.640 align:start position:0%
property list conceptually a CF string
is<00:13:03.940><c> simply</c><00:13:04.480><c> an</c><00:13:04.660><c> array</c><00:13:04.990><c> of</c><00:13:05.020><c> Unicode</c><00:13:05.770><c> characters</c>

00:13:07.640 --> 00:13:07.650 align:start position:0%
is simply an array of Unicode characters
 

00:13:07.650 --> 00:13:11.370 align:start position:0%
is simply an array of Unicode characters
the<00:13:08.650><c> goal</c><00:13:08.890><c> in</c><00:13:09.160><c> creating</c><00:13:09.339><c> a</c><00:13:09.790><c> CF</c><00:13:10.089><c> type</c><00:13:10.390><c> whereas</c><00:13:11.230><c> I</c>

00:13:11.370 --> 00:13:11.380 align:start position:0%
the goal in creating a CF type whereas I
 

00:13:11.380 --> 00:13:13.800 align:start position:0%
the goal in creating a CF type whereas I
show<00:13:11.560><c> here</c><00:13:11.920><c> we're</c><00:13:12.730><c> trying</c><00:13:12.910><c> to</c><00:13:13.240><c> get</c><00:13:13.390><c> strength</c>

00:13:13.800 --> 00:13:13.810 align:start position:0%
show here we're trying to get strength
 

00:13:13.810 --> 00:13:15.690 align:start position:0%
show here we're trying to get strength
to<00:13:14.020><c> a</c><00:13:14.050><c> new</c><00:13:14.260><c> level</c><00:13:14.470><c> of</c><00:13:14.709><c> abstraction</c><00:13:14.950><c> we're</c>

00:13:15.690 --> 00:13:15.700 align:start position:0%
to a new level of abstraction we're
 

00:13:15.700 --> 00:13:19.400 align:start position:0%
to a new level of abstraction we're
trying<00:13:15.970><c> to</c><00:13:16.089><c> solve</c><00:13:16.300><c> the</c><00:13:16.570><c> 8-bit</c><00:13:16.930><c> ASCII</c><00:13:17.470><c> problem</c>

00:13:19.400 --> 00:13:19.410 align:start position:0%
trying to solve the 8-bit ASCII problem
 

00:13:19.410 --> 00:13:21.840 align:start position:0%
trying to solve the 8-bit ASCII problem
if<00:13:20.410><c> we</c><00:13:20.950><c> can</c><00:13:21.100><c> do</c><00:13:21.279><c> that</c><00:13:21.520><c> then</c>

00:13:21.840 --> 00:13:21.850 align:start position:0%
if we can do that then
 

00:13:21.850 --> 00:13:23.640 align:start position:0%
if we can do that then
internationalization<00:13:22.750><c> becomes</c><00:13:23.290><c> easy</c>

00:13:23.640 --> 00:13:23.650 align:start position:0%
internationalization becomes easy
 

00:13:23.650 --> 00:13:25.560 align:start position:0%
internationalization becomes easy
because<00:13:24.130><c> the</c><00:13:24.310><c> basic</c><00:13:24.760><c> type</c><00:13:24.970><c> throughout</c><00:13:25.420><c> the</c>

00:13:25.560 --> 00:13:25.570 align:start position:0%
because the basic type throughout the
 

00:13:25.570 --> 00:13:28.110 align:start position:0%
because the basic type throughout the
entire<00:13:25.900><c> system</c><00:13:26.290><c> will</c><00:13:26.680><c> support</c><00:13:27.120><c> Unicode</c>

00:13:28.110 --> 00:13:28.120 align:start position:0%
entire system will support Unicode
 

00:13:28.120 --> 00:13:30.509 align:start position:0%
entire system will support Unicode
characters

00:13:30.509 --> 00:13:30.519 align:start position:0%
characters
 

00:13:30.519 --> 00:13:33.069 align:start position:0%
characters
because<00:13:31.519><c> we're</c><00:13:31.789><c> at</c><00:13:31.849><c> such</c><00:13:32.029><c> a</c><00:13:32.059><c> low</c><00:13:32.269><c> level</c><00:13:32.299><c> we've</c>

00:13:33.069 --> 00:13:33.079 align:start position:0%
because we're at such a low level we've
 

00:13:33.079 --> 00:13:34.869 align:start position:0%
because we're at such a low level we've
worked<00:13:33.109><c> hard</c><00:13:33.439><c> to</c><00:13:33.799><c> assure</c><00:13:34.069><c> performance</c><00:13:34.699><c> so</c>

00:13:34.869 --> 00:13:34.879 align:start position:0%
worked hard to assure performance so
 

00:13:34.879 --> 00:13:36.669 align:start position:0%
worked hard to assure performance so
even<00:13:35.209><c> though</c><00:13:35.239><c> conceptually</c><00:13:36.079><c> you're</c><00:13:36.409><c> looking</c>

00:13:36.669 --> 00:13:36.679 align:start position:0%
even though conceptually you're looking
 

00:13:36.679 --> 00:13:39.339 align:start position:0%
even though conceptually you're looking
at<00:13:36.769><c> an</c><00:13:37.249><c> array</c><00:13:37.609><c> of</c><00:13:37.639><c> Unicode</c><00:13:38.149><c> characters</c><00:13:38.719><c> it</c><00:13:38.899><c> may</c>

00:13:39.339 --> 00:13:39.349 align:start position:0%
at an array of Unicode characters it may
 

00:13:39.349 --> 00:13:41.169 align:start position:0%
at an array of Unicode characters it may
not<00:13:39.379><c> internally</c><00:13:40.039><c> be</c><00:13:40.159><c> stored</c><00:13:40.459><c> that</c><00:13:40.699><c> way</c><00:13:40.879><c> in</c>

00:13:41.169 --> 00:13:41.179 align:start position:0%
not internally be stored that way in
 

00:13:41.179 --> 00:13:43.659 align:start position:0%
not internally be stored that way in
particular<00:13:41.839><c> you're</c><00:13:42.439><c> not</c><00:13:42.649><c> always</c><00:13:43.009><c> going</c><00:13:43.519><c> to</c><00:13:43.639><c> be</c>

00:13:43.659 --> 00:13:43.669 align:start position:0%
particular you're not always going to be
 

00:13:43.669 --> 00:13:48.069 align:start position:0%
particular you're not always going to be
storing<00:13:44.089><c> two</c><00:13:44.299><c> bytes</c><00:13:44.539><c> per</c><00:13:44.719><c> character</c><00:13:45.199><c> and</c><00:13:47.079><c> as</c>

00:13:48.069 --> 00:13:48.079 align:start position:0%
storing two bytes per character and as
 

00:13:48.079 --> 00:13:51.159 align:start position:0%
storing two bytes per character and as
we<00:13:48.319><c> move</c><00:13:48.529><c> forward</c><00:13:49.149><c> CF</c><00:13:50.149><c> strings</c><00:13:50.479><c> are</c><00:13:50.719><c> becoming</c>

00:13:51.159 --> 00:13:51.169 align:start position:0%
we move forward CF strings are becoming
 

00:13:51.169 --> 00:13:54.039 align:start position:0%
we move forward CF strings are becoming
the<00:13:51.469><c> way</c><00:13:51.739><c> to</c><00:13:51.799><c> communicate</c><00:13:52.099><c> strings</c><00:13:52.879><c> in</c><00:13:53.389><c> all</c><00:13:53.869><c> of</c>

00:13:54.039 --> 00:13:54.049 align:start position:0%
the way to communicate strings in all of
 

00:13:54.049 --> 00:13:58.659 align:start position:0%
the way to communicate strings in all of
the<00:13:54.169><c> public</c><00:13:54.469><c> api's</c><00:13:56.859><c> CF</c><00:13:57.859><c> string</c><00:13:58.159><c> maintains</c><00:13:58.549><c> a</c>

00:13:58.659 --> 00:13:58.669 align:start position:0%
the public api's CF string maintains a
 

00:13:58.669 --> 00:14:01.809 align:start position:0%
the public api's CF string maintains a
very<00:13:58.849><c> rich</c><00:13:59.089><c> functionality</c><00:13:59.449><c> set</c><00:14:00.489><c> there</c><00:14:01.489><c> are</c><00:14:01.759><c> a</c>

00:14:01.809 --> 00:14:01.819 align:start position:0%
very rich functionality set there are a
 

00:14:01.819 --> 00:14:03.369 align:start position:0%
very rich functionality set there are a
number<00:14:01.909><c> of</c><00:14:02.149><c> different</c><00:14:02.449><c> creation</c><00:14:02.899><c> functions</c>

00:14:03.369 --> 00:14:03.379 align:start position:0%
number of different creation functions
 

00:14:03.379 --> 00:14:05.079 align:start position:0%
number of different creation functions
depending<00:14:03.619><c> on</c><00:14:03.979><c> where</c><00:14:04.249><c> you</c><00:14:04.489><c> may</c><00:14:04.639><c> have</c><00:14:04.819><c> gotten</c>

00:14:05.079 --> 00:14:05.089 align:start position:0%
depending on where you may have gotten
 

00:14:05.089 --> 00:14:07.269 align:start position:0%
depending on where you may have gotten
the<00:14:05.419><c> your</c><00:14:05.719><c> string</c><00:14:06.049><c> data</c><00:14:06.289><c> from</c><00:14:06.649><c> whether</c><00:14:07.069><c> it's</c>

00:14:07.269 --> 00:14:07.279 align:start position:0%
the your string data from whether it's
 

00:14:07.279 --> 00:14:10.329 align:start position:0%
the your string data from whether it's
coming<00:14:07.579><c> from</c><00:14:07.699><c> a</c><00:14:07.849><c> carbon</c><00:14:08.239><c> stack</c><00:14:08.599><c> or</c><00:14:08.899><c> or</c><00:14:09.739><c> cocoa</c>

00:14:10.329 --> 00:14:10.339 align:start position:0%
coming from a carbon stack or or cocoa
 

00:14:10.339 --> 00:14:12.419 align:start position:0%
coming from a carbon stack or or cocoa
or<00:14:10.579><c> you</c><00:14:10.729><c> just</c><00:14:10.879><c> read</c><00:14:11.149><c> it</c><00:14:11.269><c> out</c><00:14:11.359><c> of</c><00:14:11.509><c> a</c><00:14:11.569><c> file</c>

00:14:12.419 --> 00:14:12.429 align:start position:0%
or you just read it out of a file
 

00:14:12.429 --> 00:14:14.559 align:start position:0%
or you just read it out of a file
there's<00:14:13.429><c> a</c><00:14:13.519><c> lot</c><00:14:13.669><c> of</c><00:14:13.699><c> support</c><00:14:14.119><c> for</c><00:14:14.299><c> encoding</c>

00:14:14.559 --> 00:14:14.569 align:start position:0%
there's a lot of support for encoding
 

00:14:14.569 --> 00:14:16.929 align:start position:0%
there's a lot of support for encoding
conversions<00:14:15.319><c> from</c><00:14:15.649><c> CF</c><00:14:16.039><c> strings</c><00:14:16.399><c> to</c><00:14:16.639><c> whatever</c>

00:14:16.929 --> 00:14:16.939 align:start position:0%
conversions from CF strings to whatever
 

00:14:16.939 --> 00:14:20.709 align:start position:0%
conversions from CF strings to whatever
encoding<00:14:17.479><c> you</c><00:14:17.659><c> need</c><00:14:17.869><c> to</c><00:14:18.079><c> use</c><00:14:19.419><c> we</c><00:14:20.419><c> will</c><00:14:20.569><c> do</c>

00:14:20.709 --> 00:14:20.719 align:start position:0%
encoding you need to use we will do
 

00:14:20.719 --> 00:14:23.889 align:start position:0%
encoding you need to use we will do
comparisons<00:14:21.439><c> find</c><00:14:21.769><c> searches</c><00:14:22.539><c> there</c><00:14:23.539><c> are</c><00:14:23.659><c> some</c>

00:14:23.889 --> 00:14:23.899 align:start position:0%
comparisons find searches there are some
 

00:14:23.899 --> 00:14:26.589 align:start position:0%
comparisons find searches there are some
more<00:14:24.109><c> complex</c><00:14:24.709><c> operations</c><00:14:25.699><c> like</c><00:14:25.939><c> exploding</c><00:14:26.539><c> a</c>

00:14:26.589 --> 00:14:26.599 align:start position:0%
more complex operations like exploding a
 

00:14:26.599 --> 00:14:28.359 align:start position:0%
more complex operations like exploding a
string<00:14:26.899><c> into</c><00:14:27.109><c> its</c><00:14:27.229><c> component</c><00:14:27.739><c> pieces</c><00:14:27.919><c> or</c>

00:14:28.359 --> 00:14:28.369 align:start position:0%
string into its component pieces or
 

00:14:28.369 --> 00:14:29.889 align:start position:0%
string into its component pieces or
combining<00:14:28.729><c> the</c><00:14:28.939><c> component</c><00:14:29.389><c> pieces</c><00:14:29.509><c> back</c>

00:14:29.889 --> 00:14:29.899 align:start position:0%
combining the component pieces back
 

00:14:29.899 --> 00:14:33.609 align:start position:0%
combining the component pieces back
again<00:14:30.289><c> and</c><00:14:30.609><c> there's</c><00:14:31.609><c> even</c><00:14:31.819><c> some</c><00:14:32.269><c> printf</c><00:14:33.169><c> style</c>

00:14:33.609 --> 00:14:33.619 align:start position:0%
again and there's even some printf style
 

00:14:33.619 --> 00:14:38.529 align:start position:0%
again and there's even some printf style
formatting<00:14:34.189><c> and</c><00:14:34.399><c> parsing</c><00:14:34.849><c> available</c><00:14:37.539><c> so</c>

00:14:38.529 --> 00:14:38.539 align:start position:0%
formatting and parsing available so
 

00:14:38.539 --> 00:14:42.429 align:start position:0%
formatting and parsing available so
let's<00:14:39.470><c> look</c><00:14:39.649><c> at</c><00:14:39.769><c> some</c><00:14:39.919><c> of</c><00:14:39.979><c> the</c><00:14:40.129><c> API</c><00:14:41.439><c> for</c>

00:14:42.429 --> 00:14:42.439 align:start position:0%
let's look at some of the API for
 

00:14:42.439 --> 00:14:45.699 align:start position:0%
let's look at some of the API for
creation<00:14:42.979><c> and</c><00:14:43.129><c> access</c><00:14:43.669><c> I</c><00:14:44.079><c> give</c><00:14:45.079><c> an</c><00:14:45.169><c> example</c><00:14:45.470><c> of</c>

00:14:45.699 --> 00:14:45.709 align:start position:0%
creation and access I give an example of
 

00:14:45.709 --> 00:14:48.339 align:start position:0%
creation and access I give an example of
a<00:14:46.099><c> couple</c><00:14:46.399><c> of</c><00:14:46.489><c> the</c><00:14:46.609><c> basic</c><00:14:46.999><c> creation</c><00:14:47.479><c> methods</c>

00:14:48.339 --> 00:14:48.349 align:start position:0%
a couple of the basic creation methods
 

00:14:48.349 --> 00:14:51.069 align:start position:0%
a couple of the basic creation methods
here<00:14:48.529><c> CF</c><00:14:48.859><c> create</c><00:14:49.339><c> with</c><00:14:49.609><c> characters</c><00:14:50.239><c> allows</c>

00:14:51.069 --> 00:14:51.079 align:start position:0%
here CF create with characters allows
 

00:14:51.079 --> 00:14:52.659 align:start position:0%
here CF create with characters allows
you<00:14:51.289><c> to</c><00:14:51.409><c> take</c><00:14:51.679><c> an</c><00:14:51.919><c> array</c><00:14:52.129><c> of</c><00:14:52.159><c> Unicode</c>

00:14:52.659 --> 00:14:52.669 align:start position:0%
you to take an array of Unicode
 

00:14:52.669 --> 00:14:54.189 align:start position:0%
you to take an array of Unicode
characters<00:14:53.119><c> and</c><00:14:53.269><c> create</c><00:14:53.509><c> a</c><00:14:53.539><c> string</c><00:14:53.839><c> out</c><00:14:53.959><c> of</c><00:14:54.109><c> it</c>

00:14:54.189 --> 00:14:54.199 align:start position:0%
characters and create a string out of it
 

00:14:54.199 --> 00:14:56.739 align:start position:0%
characters and create a string out of it
pretty<00:14:54.439><c> straightforward</c><00:14:55.269><c> if</c><00:14:56.269><c> on</c><00:14:56.539><c> the</c><00:14:56.569><c> other</c>

00:14:56.739 --> 00:14:56.749 align:start position:0%
pretty straightforward if on the other
 

00:14:56.749 --> 00:14:58.569 align:start position:0%
pretty straightforward if on the other
hand<00:14:56.869><c> you're</c><00:14:57.229><c> coming</c><00:14:57.499><c> from</c><00:14:57.619><c> a</c><00:14:57.739><c> Pascal</c><00:14:58.220><c> string</c>

00:14:58.569 --> 00:14:58.579 align:start position:0%
hand you're coming from a Pascal string
 

00:14:58.579 --> 00:15:00.729 align:start position:0%
hand you're coming from a Pascal string
for<00:14:58.789><c> instance</c><00:14:59.149><c> you</c><00:14:59.929><c> would</c><00:15:00.049><c> use</c><00:15:00.199><c> the</c><00:15:00.379><c> second</c>

00:15:00.729 --> 00:15:00.739 align:start position:0%
for instance you would use the second
 

00:15:00.739 --> 00:15:03.009 align:start position:0%
for instance you would use the second
function<00:15:00.949><c> CF</c><00:15:01.489><c> string</c><00:15:01.759><c> create</c><00:15:02.179><c> with</c><00:15:02.479><c> Pascal</c>

00:15:03.009 --> 00:15:03.019 align:start position:0%
function CF string create with Pascal
 

00:15:03.019 --> 00:15:05.229 align:start position:0%
function CF string create with Pascal
strength<00:15:03.470><c> there</c><00:15:03.979><c> are</c><00:15:04.129><c> several</c><00:15:04.369><c> other</c><00:15:04.639><c> similar</c>

00:15:05.229 --> 00:15:05.239 align:start position:0%
strength there are several other similar
 

00:15:05.239 --> 00:15:07.119 align:start position:0%
strength there are several other similar
kinds<00:15:05.899><c> of</c><00:15:06.019><c> functions</c><00:15:06.319><c> for</c><00:15:06.619><c> the</c><00:15:06.709><c> other</c><00:15:06.829><c> types</c>

00:15:07.119 --> 00:15:07.129 align:start position:0%
kinds of functions for the other types
 

00:15:07.129 --> 00:15:09.039 align:start position:0%
kinds of functions for the other types
CF<00:15:07.519><c> string</c><00:15:07.879><c> create</c><00:15:08.179><c> with</c><00:15:08.359><c> file</c><00:15:08.569><c> system</c>

00:15:09.039 --> 00:15:09.049 align:start position:0%
CF string create with file system
 

00:15:09.049 --> 00:15:10.569 align:start position:0%
CF string create with file system
representations<00:15:09.829><c> you</c><00:15:09.919><c> have</c><00:15:10.009><c> screen</c><00:15:10.279><c> create</c>

00:15:10.569 --> 00:15:10.579 align:start position:0%
representations you have screen create
 

00:15:10.579 --> 00:15:12.309 align:start position:0%
representations you have screen create
from<00:15:10.759><c> data</c><00:15:10.999><c> where</c><00:15:11.299><c> you</c><00:15:11.389><c> provide</c><00:15:11.569><c> an</c><00:15:11.839><c> encoding</c>

00:15:12.309 --> 00:15:12.319 align:start position:0%
from data where you provide an encoding
 

00:15:12.319 --> 00:15:16.509 align:start position:0%
from data where you provide an encoding
and<00:15:12.470><c> so</c><00:15:13.159><c> on</c><00:15:13.369><c> for</c><00:15:14.499><c> basic</c><00:15:15.499><c> access</c><00:15:15.949><c> you</c><00:15:16.129><c> use</c><00:15:16.339><c> the</c>

00:15:16.509 --> 00:15:16.519 align:start position:0%
and so on for basic access you use the
 

00:15:16.519 --> 00:15:18.999 align:start position:0%
and so on for basic access you use the
next<00:15:16.789><c> two</c><00:15:16.939><c> functions</c><00:15:17.449><c> CF</c><00:15:18.289><c> string</c><00:15:18.559><c> get</c><00:15:18.769><c> length</c>

00:15:18.999 --> 00:15:19.009 align:start position:0%
next two functions CF string get length
 

00:15:19.009 --> 00:15:20.319 align:start position:0%
next two functions CF string get length
return<00:15:19.429><c> to</c><00:15:19.549><c> the</c><00:15:19.609><c> current</c><00:15:19.879><c> length</c><00:15:20.059><c> of</c><00:15:20.239><c> the</c>

00:15:20.319 --> 00:15:20.329 align:start position:0%
return to the current length of the
 

00:15:20.329 --> 00:15:22.569 align:start position:0%
return to the current length of the
string<00:15:20.629><c> CF</c><00:15:21.289><c> string</c><00:15:21.589><c> get</c><00:15:21.739><c> character</c><00:15:22.159><c> at</c><00:15:22.279><c> index</c>

00:15:22.569 --> 00:15:22.579 align:start position:0%
string CF string get character at index
 

00:15:22.579 --> 00:15:24.329 align:start position:0%
string CF string get character at index
returns<00:15:22.999><c> the</c><00:15:23.149><c> character</c><00:15:23.509><c> at</c><00:15:23.599><c> the</c><00:15:23.659><c> given</c><00:15:23.989><c> index</c>

00:15:24.329 --> 00:15:24.339 align:start position:0%
returns the character at the given index
 

00:15:24.339 --> 00:15:27.429 align:start position:0%
returns the character at the given index
if<00:15:25.339><c> you</c><00:15:26.029><c> want</c><00:15:26.239><c> more</c><00:15:26.389><c> efficient</c><00:15:26.839><c> processing</c>

00:15:27.429 --> 00:15:27.439 align:start position:0%
if you want more efficient processing
 

00:15:27.439 --> 00:15:28.809 align:start position:0%
if you want more efficient processing
you<00:15:27.559><c> can</c><00:15:27.709><c> get</c><00:15:27.859><c> a</c><00:15:27.889><c> bunch</c><00:15:28.129><c> a</c><00:15:28.339><c> range</c><00:15:28.639><c> of</c>

00:15:28.809 --> 00:15:28.819 align:start position:0%
you can get a bunch a range of
 

00:15:28.819 --> 00:15:31.269 align:start position:0%
you can get a bunch a range of
characters<00:15:28.999><c> at</c><00:15:29.389><c> once</c><00:15:29.629><c> using</c><00:15:30.289><c> CF</c><00:15:30.739><c> string</c><00:15:31.069><c> get</c>

00:15:31.269 --> 00:15:31.279 align:start position:0%
characters at once using CF string get
 

00:15:31.279 --> 00:15:34.419 align:start position:0%
characters at once using CF string get
characters<00:15:31.849><c> and</c><00:15:32.169><c> if</c><00:15:33.169><c> if</c><00:15:33.529><c> you</c><00:15:33.799><c> have</c><00:15:34.009><c> a</c><00:15:34.039><c> CF</c>

00:15:34.419 --> 00:15:34.429 align:start position:0%
characters and if if you have a CF
 

00:15:34.429 --> 00:15:36.189 align:start position:0%
characters and if if you have a CF
string<00:15:34.759><c> and</c><00:15:34.879><c> find</c><00:15:35.149><c> that</c><00:15:35.329><c> you</c><00:15:35.449><c> need</c><00:15:35.479><c> a</c><00:15:35.659><c> Pascal</c>

00:15:36.189 --> 00:15:36.199 align:start position:0%
string and find that you need a Pascal
 

00:15:36.199 --> 00:15:38.199 align:start position:0%
string and find that you need a Pascal
string<00:15:36.619><c> or</c><00:15:36.829><c> some</c><00:15:37.069><c> other</c><00:15:37.219><c> type</c><00:15:37.519><c> to</c><00:15:37.729><c> communicate</c>

00:15:38.199 --> 00:15:38.209 align:start position:0%
string or some other type to communicate
 

00:15:38.209 --> 00:15:40.629 align:start position:0%
string or some other type to communicate
with<00:15:38.239><c> another</c><00:15:38.509><c> API</c><00:15:39.049><c> you</c><00:15:39.709><c> can</c><00:15:39.739><c> get</c><00:15:40.069><c> it</c><00:15:40.189><c> with</c><00:15:40.220><c> CF</c>

00:15:40.629 --> 00:15:40.639 align:start position:0%
with another API you can get it with CF
 

00:15:40.639 --> 00:15:43.570 align:start position:0%
with another API you can get it with CF
string<00:15:40.999><c> get</c><00:15:41.209><c> Pascal</c><00:15:41.720><c> string</c>

00:15:43.570 --> 00:15:43.580 align:start position:0%
string get Pascal string
 

00:15:43.580 --> 00:15:45.280 align:start position:0%
string get Pascal string
only<00:15:43.730><c> the</c><00:15:43.850><c> last</c><00:15:44.060><c> line</c><00:15:44.420><c> there</c><00:15:44.690><c> shows</c><00:15:44.960><c> you</c><00:15:45.110><c> how</c>

00:15:45.280 --> 00:15:45.290 align:start position:0%
only the last line there shows you how
 

00:15:45.290 --> 00:15:48.400 align:start position:0%
only the last line there shows you how
you<00:15:45.350><c> create</c><00:15:45.860><c> a</c><00:15:45.890><c> constant</c><00:15:46.640><c> CF</c><00:15:46.970><c> string</c><00:15:47.360><c> CF</c><00:15:48.110><c> sir</c>

00:15:48.400 --> 00:15:48.410 align:start position:0%
you create a constant CF string CF sir
 

00:15:48.410 --> 00:15:50.590 align:start position:0%
you create a constant CF string CF sir
all<00:15:48.710><c> caps</c><00:15:49.040><c> and</c><00:15:49.370><c> then</c><00:15:49.850><c> the</c><00:15:49.970><c> string</c><00:15:50.270><c> within</c>

00:15:50.590 --> 00:15:50.600 align:start position:0%
all caps and then the string within
 

00:15:50.600 --> 00:15:52.930 align:start position:0%
all caps and then the string within
quotes<00:15:50.870><c> will</c><00:15:51.200><c> produce</c><00:15:51.410><c> a</c><00:15:51.740><c> constant</c><00:15:52.340><c> CF</c><00:15:52.610><c> string</c>

00:15:52.930 --> 00:15:52.940 align:start position:0%
quotes will produce a constant CF string
 

00:15:52.940 --> 00:15:58.870 align:start position:0%
quotes will produce a constant CF string
for<00:15:53.180><c> your</c><00:15:53.330><c> youth</c><00:15:56.950><c> mutating</c><00:15:57.950><c> some</c><00:15:58.250><c> CF</c><00:15:58.580><c> strings</c>

00:15:58.870 --> 00:15:58.880 align:start position:0%
for your youth mutating some CF strings
 

00:15:58.880 --> 00:16:00.190 align:start position:0%
for your youth mutating some CF strings
are<00:15:59.030><c> mutable</c><00:15:59.330><c> we'll</c><00:15:59.600><c> talk</c><00:15:59.750><c> more</c><00:15:59.960><c> about</c><00:16:00.080><c> that</c>

00:16:00.190 --> 00:16:00.200 align:start position:0%
are mutable we'll talk more about that
 

00:16:00.200 --> 00:16:02.710 align:start position:0%
are mutable we'll talk more about that
in<00:16:00.530><c> a</c><00:16:00.620><c> bit</c><00:16:00.650><c> if</c><00:16:01.070><c> you</c><00:16:01.730><c> have</c><00:16:01.880><c> immutable</c><00:16:02.360><c> strings</c>

00:16:02.710 --> 00:16:02.720 align:start position:0%
in a bit if you have immutable strings
 

00:16:02.720 --> 00:16:04.810 align:start position:0%
in a bit if you have immutable strings
here<00:16:03.320><c> are</c><00:16:03.440><c> the</c><00:16:03.500><c> basic</c><00:16:03.890><c> functions</c><00:16:04.460><c> you'll</c><00:16:04.610><c> use</c>

00:16:04.810 --> 00:16:04.820 align:start position:0%
here are the basic functions you'll use
 

00:16:04.820 --> 00:16:07.750 align:start position:0%
here are the basic functions you'll use
CF<00:16:05.660><c> string</c><00:16:05.990><c> append</c><00:16:06.350><c> append</c><00:16:07.010><c> appends</c><00:16:07.520><c> another</c>

00:16:07.750 --> 00:16:07.760 align:start position:0%
CF string append append appends another
 

00:16:07.760 --> 00:16:10.300 align:start position:0%
CF string append append appends another
string<00:16:08.060><c> onto</c><00:16:08.240><c> the</c><00:16:08.450><c> bass</c><00:16:08.600><c> string</c><00:16:09.010><c> CF</c><00:16:10.010><c> string</c>

00:16:10.300 --> 00:16:10.310 align:start position:0%
string onto the bass string CF string
 

00:16:10.310 --> 00:16:12.280 align:start position:0%
string onto the bass string CF string
replaced<00:16:10.760><c> replaces</c><00:16:11.480><c> a</c><00:16:11.510><c> range</c><00:16:11.930><c> of</c><00:16:12.110><c> characters</c>

00:16:12.280 --> 00:16:12.290 align:start position:0%
replaced replaces a range of characters
 

00:16:12.290 --> 00:16:14.890 align:start position:0%
replaced replaces a range of characters
inside<00:16:13.040><c> the</c><00:16:13.430><c> current</c><00:16:13.760><c> string</c><00:16:14.060><c> with</c><00:16:14.600><c> another</c>

00:16:14.890 --> 00:16:14.900 align:start position:0%
inside the current string with another
 

00:16:14.900 --> 00:16:17.800 align:start position:0%
inside the current string with another
string<00:16:15.430><c> CF</c><00:16:16.430><c> string</c><00:16:16.700><c> insert</c><00:16:17.180><c> performs</c><00:16:17.720><c> a</c>

00:16:17.800 --> 00:16:17.810 align:start position:0%
string CF string insert performs a
 

00:16:17.810 --> 00:16:20.680 align:start position:0%
string CF string insert performs a
straight-up<00:16:18.110><c> insertion</c><00:16:18.770><c> and</c><00:16:19.060><c> CF</c><00:16:20.060><c> string</c><00:16:20.360><c> trim</c>

00:16:20.680 --> 00:16:20.690 align:start position:0%
straight-up insertion and CF string trim
 

00:16:20.690 --> 00:16:22.510 align:start position:0%
straight-up insertion and CF string trim
is<00:16:20.870><c> added</c><00:16:21.230><c> here</c><00:16:21.260><c> is</c><00:16:21.620><c> an</c><00:16:21.770><c> example</c><00:16:21.860><c> of</c><00:16:22.250><c> more</c>

00:16:22.510 --> 00:16:22.520 align:start position:0%
is added here is an example of more
 

00:16:22.520 --> 00:16:25.330 align:start position:0%
is added here is an example of more
complex<00:16:22.780><c> functionality</c><00:16:23.780><c> available</c><00:16:24.340><c> CF</c>

00:16:25.330 --> 00:16:25.340 align:start position:0%
complex functionality available CF
 

00:16:25.340 --> 00:16:27.490 align:start position:0%
complex functionality available CF
string<00:16:25.700><c> trim</c><00:16:26.090><c> will</c><00:16:26.450><c> take</c><00:16:26.630><c> a</c><00:16:26.660><c> trim</c><00:16:26.960><c> string</c><00:16:27.320><c> and</c>

00:16:27.490 --> 00:16:27.500 align:start position:0%
string trim will take a trim string and
 

00:16:27.500 --> 00:16:29.320 align:start position:0%
string trim will take a trim string and
compare<00:16:27.980><c> it</c><00:16:28.010><c> to</c><00:16:28.130><c> the</c><00:16:28.310><c> beginning</c><00:16:28.460><c> and</c><00:16:28.910><c> the</c><00:16:29.120><c> end</c>

00:16:29.320 --> 00:16:29.330 align:start position:0%
compare it to the beginning and the end
 

00:16:29.330 --> 00:16:31.510 align:start position:0%
compare it to the beginning and the end
of<00:16:29.690><c> the</c><00:16:29.900><c> given</c><00:16:30.170><c> string</c><00:16:30.530><c> and</c><00:16:30.710><c> strip</c><00:16:31.280><c> it</c><00:16:31.310><c> off</c>

00:16:31.510 --> 00:16:31.520 align:start position:0%
of the given string and strip it off
 

00:16:31.520 --> 00:16:37.270 align:start position:0%
of the given string and strip it off
however<00:16:31.940><c> many</c><00:16:32.150><c> times</c><00:16:32.390><c> it</c><00:16:32.600><c> may</c><00:16:32.780><c> appear</c><00:16:35.980><c> now</c><00:16:36.980><c> I</c>

00:16:37.270 --> 00:16:37.280 align:start position:0%
however many times it may appear now I
 

00:16:37.280 --> 00:16:38.890 align:start position:0%
however many times it may appear now I
said<00:16:37.490><c> that</c><00:16:37.640><c> CF</c><00:16:37.880><c> strings</c><00:16:38.180><c> are</c><00:16:38.360><c> becoming</c><00:16:38.750><c> the</c>

00:16:38.890 --> 00:16:38.900 align:start position:0%
said that CF strings are becoming the
 

00:16:38.900 --> 00:16:40.930 align:start position:0%
said that CF strings are becoming the
way<00:16:39.170><c> by</c><00:16:39.650><c> which</c><00:16:39.680><c> strings</c><00:16:40.220><c> are</c><00:16:40.340><c> communicated</c>

00:16:40.930 --> 00:16:40.940 align:start position:0%
way by which strings are communicated
 

00:16:40.940 --> 00:16:42.550 align:start position:0%
way by which strings are communicated
throughout<00:16:41.210><c> the</c><00:16:41.420><c> api's</c><00:16:41.840><c> so</c><00:16:42.200><c> here's</c><00:16:42.440><c> an</c>

00:16:42.550 --> 00:16:42.560 align:start position:0%
throughout the api's so here's an
 

00:16:42.560 --> 00:16:45.790 align:start position:0%
throughout the api's so here's an
example<00:16:42.590><c> of</c><00:16:43.100><c> this</c><00:16:44.050><c> if</c><00:16:45.050><c> you</c><00:16:45.230><c> look</c><00:16:45.380><c> inside</c><00:16:45.500><c> the</c>

00:16:45.790 --> 00:16:45.800 align:start position:0%
example of this if you look inside the
 

00:16:45.800 --> 00:16:48.160 align:start position:0%
example of this if you look inside the
carbon<00:16:46.130><c> toolbox</c><00:16:46.550><c> and</c><00:16:46.790><c> some</c><00:16:46.910><c> old</c><00:16:47.090><c> API</c><00:16:47.780><c> you</c><00:16:47.900><c> may</c>

00:16:48.160 --> 00:16:48.170 align:start position:0%
carbon toolbox and some old API you may
 

00:16:48.170 --> 00:16:50.710 align:start position:0%
carbon toolbox and some old API you may
be<00:16:48.230><c> familiar</c><00:16:48.470><c> with</c><00:16:48.800><c> set</c><00:16:49.310><c> W</c><00:16:49.700><c> title</c><00:16:50.060><c> and</c><00:16:50.180><c> get</c><00:16:50.330><c> W</c>

00:16:50.710 --> 00:16:50.720 align:start position:0%
be familiar with set W title and get W
 

00:16:50.720 --> 00:16:52.510 align:start position:0%
be familiar with set W title and get W
title<00:16:51.110><c> which</c><00:16:51.260><c> set</c><00:16:51.500><c> and</c><00:16:51.650><c> get</c><00:16:51.830><c> the</c><00:16:52.010><c> title</c><00:16:52.340><c> of</c><00:16:52.430><c> a</c>

00:16:52.510 --> 00:16:52.520 align:start position:0%
title which set and get the title of a
 

00:16:52.520 --> 00:16:56.650 align:start position:0%
title which set and get the title of a
window<00:16:54.730><c> after</c><00:16:55.730><c> the</c><00:16:55.850><c> introduction</c><00:16:56.240><c> of</c><00:16:56.420><c> core</c>

00:16:56.650 --> 00:16:56.660 align:start position:0%
window after the introduction of core
 

00:16:56.660 --> 00:16:59.530 align:start position:0%
window after the introduction of core
foundation<00:16:57.260><c> the</c><00:16:57.980><c> API</c><00:16:58.640><c> below</c><00:16:59.030><c> it</c><00:16:59.180><c> has</c><00:16:59.360><c> been</c>

00:16:59.530 --> 00:16:59.540 align:start position:0%
foundation the API below it has been
 

00:16:59.540 --> 00:17:01.690 align:start position:0%
foundation the API below it has been
introduced<00:17:00.020><c> set</c><00:17:00.560><c> window</c><00:17:00.860><c> title</c><00:17:01.220><c> with</c><00:17:01.340><c> CF</c>

00:17:01.690 --> 00:17:01.700 align:start position:0%
introduced set window title with CF
 

00:17:01.700 --> 00:17:04.270 align:start position:0%
introduced set window title with CF
string<00:17:02.030><c> copy</c><00:17:02.570><c> window</c><00:17:02.960><c> title</c><00:17:03.320><c> as</c><00:17:03.470><c> CF</c><00:17:03.890><c> string</c>

00:17:04.270 --> 00:17:04.280 align:start position:0%
string copy window title as CF string
 

00:17:04.280 --> 00:17:07.060 align:start position:0%
string copy window title as CF string
which<00:17:04.760><c> allows</c><00:17:05.030><c> you</c><00:17:05.270><c> to</c><00:17:05.420><c> set</c><00:17:05.690><c> the</c><00:17:06.440><c> window</c><00:17:06.709><c> title</c>

00:17:07.060 --> 00:17:07.070 align:start position:0%
which allows you to set the window title
 

00:17:07.070 --> 00:17:17.000 align:start position:0%
which allows you to set the window title
in<00:17:07.220><c> a</c><00:17:07.339><c> richer</c><00:17:07.760><c> Unicode</c><00:17:08.630><c> ready</c><00:17:09.010><c> manner</c>

00:17:17.000 --> 00:17:17.010 align:start position:0%
 
 

00:17:17.010 --> 00:17:20.990 align:start position:0%
 
okay<00:17:17.839><c> another</c><00:17:18.839><c> basic</c><00:17:19.380><c> type</c><00:17:19.589><c> types</c><00:17:20.160><c> inside</c><00:17:20.699><c> of</c>

00:17:20.990 --> 00:17:21.000 align:start position:0%
okay another basic type types inside of
 

00:17:21.000 --> 00:17:24.590 align:start position:0%
okay another basic type types inside of
CF<00:17:21.510><c> is</c><00:17:21.780><c> CF</c><00:17:22.110><c> data</c><00:17:22.579><c> see</c><00:17:23.579><c> if</c><00:17:23.670><c> data</c><00:17:23.910><c> is</c><00:17:24.000><c> simply</c><00:17:24.570><c> a</c>

00:17:24.590 --> 00:17:24.600 align:start position:0%
CF is CF data see if data is simply a
 

00:17:24.600 --> 00:17:26.930 align:start position:0%
CF is CF data see if data is simply a
way<00:17:24.900><c> to</c><00:17:25.470><c> get</c><00:17:25.589><c> an</c><00:17:25.740><c> object</c><00:17:26.160><c> representation</c>

00:17:26.930 --> 00:17:26.940 align:start position:0%
way to get an object representation
 

00:17:26.940 --> 00:17:31.550 align:start position:0%
way to get an object representation
around<00:17:27.329><c> an</c><00:17:27.630><c> array</c><00:17:27.959><c> of</c><00:17:27.990><c> bytes</c><00:17:30.260><c> it's</c><00:17:31.260><c> more</c>

00:17:31.550 --> 00:17:31.560 align:start position:0%
around an array of bytes it's more
 

00:17:31.560 --> 00:17:33.380 align:start position:0%
around an array of bytes it's more
versatile<00:17:32.010><c> than</c><00:17:32.070><c> using</c><00:17:32.370><c> a</c><00:17:32.550><c> simple</c><00:17:32.760><c> void</c><00:17:33.060><c> store</c>

00:17:33.380 --> 00:17:33.390 align:start position:0%
versatile than using a simple void store
 

00:17:33.390 --> 00:17:35.690 align:start position:0%
versatile than using a simple void store
avoid<00:17:33.900><c> star</c><00:17:34.230><c> or</c><00:17:34.470><c> a</c><00:17:34.500><c> struct</c><00:17:34.860><c> pointer</c><00:17:35.250><c> because</c>

00:17:35.690 --> 00:17:35.700 align:start position:0%
avoid star or a struct pointer because
 

00:17:35.700 --> 00:17:37.430 align:start position:0%
avoid star or a struct pointer because
it's<00:17:36.030><c> opaque</c><00:17:36.360><c> and</c><00:17:36.600><c> because</c><00:17:37.050><c> it</c><00:17:37.170><c> encapsulates</c>

00:17:37.430 --> 00:17:37.440 align:start position:0%
it's opaque and because it encapsulates
 

00:17:37.440 --> 00:17:40.310 align:start position:0%
it's opaque and because it encapsulates
the<00:17:37.950><c> notion</c><00:17:38.340><c> of</c><00:17:38.430><c> length</c><00:17:38.700><c> and</c><00:17:39.230><c> there</c><00:17:40.230><c> are</c><00:17:40.290><c> a</c>

00:17:40.310 --> 00:17:40.320 align:start position:0%
the notion of length and there are a
 

00:17:40.320 --> 00:17:42.500 align:start position:0%
the notion of length and there are a
couple<00:17:40.410><c> very</c><00:17:40.710><c> basic</c><00:17:41.100><c> accessors</c><00:17:41.730><c> CF</c><00:17:42.000><c> data</c><00:17:42.240><c> get</c>

00:17:42.500 --> 00:17:42.510 align:start position:0%
couple very basic accessors CF data get
 

00:17:42.510 --> 00:17:47.720 align:start position:0%
couple very basic accessors CF data get
length<00:17:42.750><c> and</c><00:17:42.990><c> CF</c><00:17:43.230><c> data</c><00:17:43.470><c> get</c><00:17:43.680><c> byte</c><00:17:43.890><c> pointer</c><00:17:46.730><c> I'm</c>

00:17:47.720 --> 00:17:47.730 align:start position:0%
length and CF data get byte pointer I'm
 

00:17:47.730 --> 00:17:48.770 align:start position:0%
length and CF data get byte pointer I'm
going<00:17:47.880><c> to</c><00:17:47.940><c> move</c><00:17:48.030><c> on</c><00:17:48.210><c> now</c><00:17:48.390><c> to</c><00:17:48.420><c> talk</c><00:17:48.720><c> about</c>

00:17:48.770 --> 00:17:48.780 align:start position:0%
going to move on now to talk about
 

00:17:48.780 --> 00:17:51.710 align:start position:0%
going to move on now to talk about
collections<00:17:50.300><c> there</c><00:17:51.300><c> are</c><00:17:51.420><c> a</c><00:17:51.450><c> number</c><00:17:51.480><c> of</c>

00:17:51.710 --> 00:17:51.720 align:start position:0%
collections there are a number of
 

00:17:51.720 --> 00:17:53.330 align:start position:0%
collections there are a number of
different<00:17:52.080><c> collections</c><00:17:52.590><c> inside</c><00:17:53.010><c> of</c><00:17:53.130><c> core</c>

00:17:53.330 --> 00:17:53.340 align:start position:0%
different collections inside of core
 

00:17:53.340 --> 00:17:55.250 align:start position:0%
different collections inside of core
foundation<00:17:53.970><c> and</c><00:17:54.120><c> by</c><00:17:54.210><c> a</c><00:17:54.240><c> collection</c><00:17:54.630><c> I</c><00:17:54.810><c> simply</c>

00:17:55.250 --> 00:17:55.260 align:start position:0%
foundation and by a collection I simply
 

00:17:55.260 --> 00:17:58.250 align:start position:0%
foundation and by a collection I simply
implement<00:17:56.190><c> object</c><00:17:57.090><c> which</c><00:17:57.570><c> can</c><00:17:57.780><c> hold</c><00:17:57.960><c> other</c>

00:17:58.250 --> 00:17:58.260 align:start position:0%
implement object which can hold other
 

00:17:58.260 --> 00:18:00.020 align:start position:0%
implement object which can hold other
pointers<00:17:58.770><c> and</c><00:17:58.950><c> most</c><00:17:59.370><c> of</c><00:17:59.550><c> the</c><00:17:59.640><c> time</c><00:17:59.820><c> you're</c>

00:18:00.020 --> 00:18:00.030 align:start position:0%
pointers and most of the time you're
 

00:18:00.030 --> 00:18:03.140 align:start position:0%
pointers and most of the time you're
going<00:18:00.180><c> to</c><00:18:00.270><c> be</c><00:18:00.360><c> holding</c><00:18:00.510><c> other</c><00:18:00.840><c> objects</c><00:18:02.150><c> CF</c>

00:18:03.140 --> 00:18:03.150 align:start position:0%
going to be holding other objects CF
 

00:18:03.150 --> 00:18:05.150 align:start position:0%
going to be holding other objects CF
array<00:18:03.480><c> and</c><00:18:03.780><c> dictionary</c><00:18:04.290><c> are</c><00:18:04.500><c> by</c><00:18:04.620><c> far</c><00:18:04.830><c> the</c><00:18:05.040><c> most</c>

00:18:05.150 --> 00:18:05.160 align:start position:0%
array and dictionary are by far the most
 

00:18:05.160 --> 00:18:06.770 align:start position:0%
array and dictionary are by far the most
common<00:18:05.310><c> of</c><00:18:05.820><c> the</c><00:18:05.940><c> collections</c><00:18:06.420><c> you</c><00:18:06.540><c> would</c><00:18:06.660><c> be</c>

00:18:06.770 --> 00:18:06.780 align:start position:0%
common of the collections you would be
 

00:18:06.780 --> 00:18:08.870 align:start position:0%
common of the collections you would be
using<00:18:06.960><c> and</c><00:18:07.350><c> array</c><00:18:08.340><c> as</c><00:18:08.550><c> you</c><00:18:08.670><c> would</c><00:18:08.790><c> expect</c>

00:18:08.870 --> 00:18:08.880 align:start position:0%
using and array as you would expect
 

00:18:08.880 --> 00:18:11.330 align:start position:0%
using and array as you would expect
holds<00:18:09.510><c> an</c><00:18:09.600><c> ordered</c><00:18:09.900><c> list</c><00:18:09.930><c> of</c><00:18:10.260><c> values</c><00:18:10.470><c> and</c><00:18:10.860><c> a</c>

00:18:11.330 --> 00:18:11.340 align:start position:0%
holds an ordered list of values and a
 

00:18:11.340 --> 00:18:14.090 align:start position:0%
holds an ordered list of values and a
dictionary<00:18:11.850><c> holds</c><00:18:12.630><c> out</c><00:18:12.810><c> values</c><00:18:13.410><c> as</c><00:18:13.590><c> key</c><00:18:13.770><c> value</c>

00:18:14.090 --> 00:18:14.100 align:start position:0%
dictionary holds out values as key value
 

00:18:14.100 --> 00:18:16.280 align:start position:0%
dictionary holds out values as key value
pairs<00:18:14.430><c> you</c><00:18:14.880><c> give</c><00:18:15.030><c> me</c><00:18:15.180><c> the</c><00:18:15.300><c> key</c><00:18:15.510><c> i'll</c><00:18:15.810><c> give</c><00:18:16.170><c> you</c>

00:18:16.280 --> 00:18:16.290 align:start position:0%
pairs you give me the key i'll give you
 

00:18:16.290 --> 00:18:19.340 align:start position:0%
pairs you give me the key i'll give you
the<00:18:16.440><c> value</c><00:18:17.630><c> there</c><00:18:18.630><c> and</c><00:18:18.960><c> there</c><00:18:19.140><c> are</c><00:18:19.230><c> a</c><00:18:19.290><c> number</c>

00:18:19.340 --> 00:18:19.350 align:start position:0%
the value there and there are a number
 

00:18:19.350 --> 00:18:21.230 align:start position:0%
the value there and there are a number
of<00:18:19.560><c> left</c><00:18:19.830><c> common</c><00:18:20.250><c> collections</c><00:18:20.730><c> also</c><00:18:21.030><c> on</c><00:18:21.150><c> the</c>

00:18:21.230 --> 00:18:21.240 align:start position:0%
of left common collections also on the
 

00:18:21.240 --> 00:18:24.830 align:start position:0%
of left common collections also on the
system<00:18:21.600><c> set</c><00:18:21.930><c> bad</c><00:18:22.230><c> bag</c><00:18:22.890><c> bitch</c><00:18:23.610><c> vector</c><00:18:24.120><c> binary</c>

00:18:24.830 --> 00:18:24.840 align:start position:0%
system set bad bag bitch vector binary
 

00:18:24.840 --> 00:18:26.870 align:start position:0%
system set bad bag bitch vector binary
heap<00:18:25.110><c> tree</c><00:18:25.590><c> are</c><00:18:25.890><c> just</c><00:18:26.130><c> a</c><00:18:26.220><c> few</c><00:18:26.250><c> of</c><00:18:26.460><c> them</c><00:18:26.700><c> there</c>

00:18:26.870 --> 00:18:26.880 align:start position:0%
heap tree are just a few of them there
 

00:18:26.880 --> 00:18:31.280 align:start position:0%
heap tree are just a few of them there
are<00:18:26.940><c> actually</c><00:18:27.180><c> several</c><00:18:27.330><c> others</c><00:18:27.720><c> as</c><00:18:27.900><c> well</c><00:18:30.290><c> so</c>

00:18:31.280 --> 00:18:31.290 align:start position:0%
are actually several others as well so
 

00:18:31.290 --> 00:18:35.240 align:start position:0%
are actually several others as well so
let's<00:18:32.040><c> look</c><00:18:32.130><c> at</c><00:18:32.280><c> CF</c><00:18:32.550><c> array</c><00:18:32.850><c> a</c><00:18:33.770><c> couple</c><00:18:34.770><c> creation</c>

00:18:35.240 --> 00:18:35.250 align:start position:0%
let's look at CF array a couple creation
 

00:18:35.250 --> 00:18:37.790 align:start position:0%
let's look at CF array a couple creation
method<00:18:35.430><c> CFRA</c><00:18:36.240><c> create</c><00:18:36.720><c> creates</c><00:18:37.260><c> an</c><00:18:37.410><c> immutable</c>

00:18:37.790 --> 00:18:37.800 align:start position:0%
method CFRA create creates an immutable
 

00:18:37.800 --> 00:18:40.970 align:start position:0%
method CFRA create creates an immutable
array<00:18:38.310><c> you</c><00:18:39.030><c> give</c><00:18:39.180><c> me</c><00:18:39.330><c> an</c><00:18:39.420><c> array</c><00:18:39.660><c> of</c><00:18:39.690><c> values</c><00:18:40.380><c> and</c>

00:18:40.970 --> 00:18:40.980 align:start position:0%
array you give me an array of values and
 

00:18:40.980 --> 00:18:42.500 align:start position:0%
array you give me an array of values and
the<00:18:41.160><c> number</c><00:18:41.460><c> there</c><00:18:41.640><c> and</c><00:18:41.940><c> i'll</c><00:18:42.060><c> create</c><00:18:42.270><c> an</c>

00:18:42.500 --> 00:18:42.510 align:start position:0%
the number there and i'll create an
 

00:18:42.510 --> 00:18:45.500 align:start position:0%
the number there and i'll create an
array<00:18:42.750><c> around</c><00:18:43.080><c> it</c><00:18:43.340><c> CF</c><00:18:44.340><c> array</c><00:18:44.580><c> create</c><00:18:45.000><c> mutable</c>

00:18:45.500 --> 00:18:45.510 align:start position:0%
array around it CF array create mutable
 

00:18:45.510 --> 00:18:48.140 align:start position:0%
array around it CF array create mutable
creates<00:18:45.870><c> a</c><00:18:45.960><c> mutable</c><00:18:46.260><c> array</c><00:18:46.500><c> and</c><00:18:47.030><c> you</c><00:18:48.030><c> will</c>

00:18:48.140 --> 00:18:48.150 align:start position:0%
creates a mutable array and you will
 

00:18:48.150 --> 00:18:51.500 align:start position:0%
creates a mutable array and you will
tell<00:18:48.330><c> us</c><00:18:48.360><c> the</c><00:18:48.810><c> capacity</c><00:18:49.340><c> and</c><00:18:50.340><c> the</c><00:18:50.640><c> callbacks</c>

00:18:51.500 --> 00:18:51.510 align:start position:0%
tell us the capacity and the callbacks
 

00:18:51.510 --> 00:18:53.930 align:start position:0%
tell us the capacity and the callbacks
we'll<00:18:51.720><c> talk</c><00:18:51.870><c> about</c><00:18:52.020><c> that</c><00:18:52.140><c> in</c><00:18:52.440><c> a</c><00:18:52.530><c> moment</c><00:18:52.940><c> once</c>

00:18:53.930 --> 00:18:53.940 align:start position:0%
we'll talk about that in a moment once
 

00:18:53.940 --> 00:18:56.390 align:start position:0%
we'll talk about that in a moment once
you've<00:18:54.060><c> got</c><00:18:54.270><c> an</c><00:18:54.450><c> array</c><00:18:54.690><c> the</c><00:18:54.930><c> basic</c><00:18:55.260><c> API</c><00:18:55.410><c> is</c><00:18:56.040><c> the</c>

00:18:56.390 --> 00:18:56.400 align:start position:0%
you've got an array the basic API is the
 

00:18:56.400 --> 00:18:57.950 align:start position:0%
you've got an array the basic API is the
F<00:18:56.490><c> array</c><00:18:56.700><c> get</c><00:18:56.910><c> count</c><00:18:57.180><c> to</c><00:18:57.420><c> find</c><00:18:57.630><c> out</c><00:18:57.750><c> how</c><00:18:57.900><c> many</c>

00:18:57.950 --> 00:18:57.960 align:start position:0%
F array get count to find out how many
 

00:18:57.960 --> 00:19:00.230 align:start position:0%
F array get count to find out how many
objects<00:18:58.500><c> are</c><00:18:58.620><c> in</c><00:18:58.710><c> the</c><00:18:58.800><c> array</c><00:18:59.070><c> and</c><00:18:59.340><c> then</c><00:18:59.940><c> CF</c>

00:19:00.230 --> 00:19:00.240 align:start position:0%
objects are in the array and then CF
 

00:19:00.240 --> 00:19:02.180 align:start position:0%
objects are in the array and then CF
array<00:19:00.480><c> get</c><00:19:00.690><c> value</c><00:19:01.080><c> at</c><00:19:01.200><c> index</c><00:19:01.530><c> which</c><00:19:01.890><c> will</c><00:19:02.070><c> give</c>

00:19:02.180 --> 00:19:02.190 align:start position:0%
array get value at index which will give
 

00:19:02.190 --> 00:19:04.150 align:start position:0%
array get value at index which will give
you<00:19:02.310><c> the</c><00:19:02.430><c> value</c><00:19:02.550><c> at</c><00:19:02.880><c> the</c><00:19:02.910><c> given</c><00:19:03.240><c> index</c>

00:19:04.150 --> 00:19:04.160 align:start position:0%
you the value at the given index
 

00:19:04.160 --> 00:19:07.720 align:start position:0%
you the value at the given index
mutation<00:19:05.160><c> CFRA</c><00:19:05.850><c> insert</c><00:19:06.360><c> value</c><00:19:06.750><c> at</c><00:19:06.900><c> index</c><00:19:07.230><c> is</c>

00:19:07.720 --> 00:19:07.730 align:start position:0%
mutation CFRA insert value at index is
 

00:19:07.730 --> 00:19:12.500 align:start position:0%
mutation CFRA insert value at index is
is<00:19:08.730><c> the</c><00:19:08.940><c> most</c><00:19:09.120><c> common</c><00:19:09.510><c> mechanism</c><00:19:11.510><c> CS</c>

00:19:12.500 --> 00:19:12.510 align:start position:0%
is the most common mechanism CS
 

00:19:12.510 --> 00:19:14.030 align:start position:0%
is the most common mechanism CS
dictionary<00:19:13.110><c> you'll</c><00:19:13.320><c> notice</c><00:19:13.590><c> the</c><00:19:13.710><c> naming</c>

00:19:14.030 --> 00:19:14.040 align:start position:0%
dictionary you'll notice the naming
 

00:19:14.040 --> 00:19:15.800 align:start position:0%
dictionary you'll notice the naming
between<00:19:14.310><c> CF</c><00:19:14.580><c> dictionary</c><00:19:15.030><c> and</c><00:19:15.120><c> CF</c><00:19:15.390><c> array</c><00:19:15.660><c> is</c>

00:19:15.800 --> 00:19:15.810 align:start position:0%
between CF dictionary and CF array is
 

00:19:15.810 --> 00:19:18.320 align:start position:0%
between CF dictionary and CF array is
very<00:19:16.080><c> consistent</c><00:19:16.800><c> CF</c><00:19:17.550><c> dictionary</c><00:19:17.970><c> create</c>

00:19:18.320 --> 00:19:18.330 align:start position:0%
very consistent CF dictionary create
 

00:19:18.330 --> 00:19:20.450 align:start position:0%
very consistent CF dictionary create
creates<00:19:18.750><c> an</c><00:19:18.840><c> immutable</c><00:19:19.200><c> dictionary</c><00:19:19.860><c> CF</c>

00:19:20.450 --> 00:19:20.460 align:start position:0%
creates an immutable dictionary CF
 

00:19:20.460 --> 00:19:22.160 align:start position:0%
creates an immutable dictionary CF
dictionary<00:19:20.940><c> create</c><00:19:21.300><c> mutable</c><00:19:21.720><c> creates</c><00:19:22.050><c> a</c>

00:19:22.160 --> 00:19:22.170 align:start position:0%
dictionary create mutable creates a
 

00:19:22.170 --> 00:19:25.520 align:start position:0%
dictionary create mutable creates a
mutable<00:19:22.560><c> one</c><00:19:23.270><c> CF</c><00:19:24.270><c> dictionary</c><00:19:24.690><c> getcount</c><00:19:25.170><c> gives</c>

00:19:25.520 --> 00:19:25.530 align:start position:0%
mutable one CF dictionary getcount gives
 

00:19:25.530 --> 00:19:26.930 align:start position:0%
mutable one CF dictionary getcount gives
you<00:19:25.680><c> the</c><00:19:25.800><c> number</c><00:19:26.040><c> of</c><00:19:26.100><c> key</c><00:19:26.280><c> value</c><00:19:26.310><c> pairs</c>

00:19:26.930 --> 00:19:26.940 align:start position:0%
you the number of key value pairs
 

00:19:26.940 --> 00:19:29.540 align:start position:0%
you the number of key value pairs
currently<00:19:27.480><c> stored</c><00:19:27.780><c> in</c><00:19:27.900><c> the</c><00:19:27.990><c> dictionary</c><00:19:28.550><c> get</c>

00:19:29.540 --> 00:19:29.550 align:start position:0%
currently stored in the dictionary get
 

00:19:29.550 --> 00:19:30.230 align:start position:0%
currently stored in the dictionary get
value

00:19:30.230 --> 00:19:30.240 align:start position:0%
value
 

00:19:30.240 --> 00:19:31.970 align:start position:0%
value
you<00:19:30.630><c> provide</c><00:19:30.929><c> the</c><00:19:30.960><c> key</c><00:19:31.290><c> will</c><00:19:31.559><c> give</c><00:19:31.740><c> you</c><00:19:31.860><c> the</c>

00:19:31.970 --> 00:19:31.980 align:start position:0%
you provide the key will give you the
 

00:19:31.980 --> 00:19:35.330 align:start position:0%
you provide the key will give you the
value<00:19:32.130><c> back</c><00:19:32.490><c> associated</c><00:19:33.300><c> with</c><00:19:33.450><c> that</c><00:19:33.600><c> key</c><00:19:34.340><c> and</c>

00:19:35.330 --> 00:19:35.340 align:start position:0%
value back associated with that key and
 

00:19:35.340 --> 00:19:37.430 align:start position:0%
value back associated with that key and
set<00:19:35.970><c> value</c><00:19:36.390><c> allows</c><00:19:36.630><c> you</c><00:19:36.809><c> to</c><00:19:36.900><c> associate</c><00:19:37.410><c> a</c>

00:19:37.430 --> 00:19:37.440 align:start position:0%
set value allows you to associate a
 

00:19:37.440 --> 00:19:42.470 align:start position:0%
set value allows you to associate a
value<00:19:37.830><c> with</c><00:19:38.010><c> a</c><00:19:38.040><c> given</c><00:19:38.250><c> key</c><00:19:41.059><c> so</c><00:19:42.059><c> now</c><00:19:42.179><c> that</c><00:19:42.330><c> we've</c>

00:19:42.470 --> 00:19:42.480 align:start position:0%
value with a given key so now that we've
 

00:19:42.480 --> 00:19:44.150 align:start position:0%
value with a given key so now that we've
looked<00:19:42.630><c> at</c><00:19:42.750><c> those</c><00:19:42.900><c> basic</c><00:19:43.320><c> api's</c><00:19:43.710><c> let's</c><00:19:43.980><c> talk</c>

00:19:44.150 --> 00:19:44.160 align:start position:0%
looked at those basic api's let's talk
 

00:19:44.160 --> 00:19:46.299 align:start position:0%
looked at those basic api's let's talk
about<00:19:44.309><c> collections</c><00:19:45.000><c> in</c><00:19:45.240><c> more</c><00:19:45.870><c> general</c><00:19:46.050><c> terms</c>

00:19:46.299 --> 00:19:46.309 align:start position:0%
about collections in more general terms
 

00:19:46.309 --> 00:19:49.220 align:start position:0%
about collections in more general terms
all<00:19:47.309><c> of</c><00:19:47.670><c> our</c><00:19:47.790><c> collections</c><00:19:48.270><c> contain</c><00:19:48.720><c> pointer</c>

00:19:49.220 --> 00:19:49.230 align:start position:0%
all of our collections contain pointer
 

00:19:49.230 --> 00:19:51.470 align:start position:0%
all of our collections contain pointer
sized<00:19:49.500><c> values</c><00:19:50.070><c> as</c><00:19:50.309><c> I</c><00:19:50.460><c> said</c><00:19:50.640><c> most</c><00:19:50.910><c> of</c><00:19:51.150><c> the</c><00:19:51.240><c> time</c>

00:19:51.470 --> 00:19:51.480 align:start position:0%
sized values as I said most of the time
 

00:19:51.480 --> 00:19:53.360 align:start position:0%
sized values as I said most of the time
you're<00:19:52.050><c> going</c><00:19:52.200><c> to</c><00:19:52.260><c> be</c><00:19:52.320><c> storing</c><00:19:52.650><c> other</c><00:19:52.830><c> objects</c>

00:19:53.360 --> 00:19:53.370 align:start position:0%
you're going to be storing other objects
 

00:19:53.370 --> 00:19:55.610 align:start position:0%
you're going to be storing other objects
but<00:19:53.520><c> not</c><00:19:53.670><c> always</c><00:19:54.050><c> so</c><00:19:55.050><c> how</c><00:19:55.260><c> do</c><00:19:55.320><c> you</c><00:19:55.440><c> configure</c>

00:19:55.610 --> 00:19:55.620 align:start position:0%
but not always so how do you configure
 

00:19:55.620 --> 00:19:58.010 align:start position:0%
but not always so how do you configure
the<00:19:56.010><c> behavior</c><00:19:56.580><c> differently</c><00:19:57.480><c> depending</c><00:19:57.630><c> on</c>

00:19:58.010 --> 00:19:58.020 align:start position:0%
the behavior differently depending on
 

00:19:58.020 --> 00:19:59.780 align:start position:0%
the behavior differently depending on
what's<00:19:58.260><c> being</c><00:19:58.410><c> stored</c><00:19:58.860><c> well</c><00:19:59.429><c> that's</c><00:19:59.580><c> what</c><00:19:59.700><c> the</c>

00:19:59.780 --> 00:19:59.790 align:start position:0%
what's being stored well that's what the
 

00:19:59.790 --> 00:20:02.270 align:start position:0%
what's being stored well that's what the
callbacks<00:20:00.240><c> are</c><00:20:00.450><c> all</c><00:20:00.570><c> about</c><00:20:00.840><c> you</c><00:20:01.830><c> pass</c><00:20:02.070><c> the</c>

00:20:02.270 --> 00:20:02.280 align:start position:0%
callbacks are all about you pass the
 

00:20:02.280 --> 00:20:03.919 align:start position:0%
callbacks are all about you pass the
callbacks<00:20:02.730><c> one</c><00:20:02.940><c> to</c><00:20:03.059><c> create</c><00:20:03.360><c> when</c><00:20:03.750><c> the</c>

00:20:03.919 --> 00:20:03.929 align:start position:0%
callbacks one to create when the
 

00:20:03.929 --> 00:20:05.419 align:start position:0%
callbacks one to create when the
collection<00:20:04.350><c> is</c><00:20:04.440><c> first</c><00:20:04.679><c> created</c><00:20:04.890><c> and</c><00:20:05.400><c> the</c>

00:20:05.419 --> 00:20:05.429 align:start position:0%
collection is first created and the
 

00:20:05.429 --> 00:20:08.780 align:start position:0%
collection is first created and the
callbacks<00:20:06.330><c> tell</c><00:20:06.780><c> the</c><00:20:07.050><c> object</c><00:20:07.559><c> what</c><00:20:08.070><c> to</c><00:20:08.280><c> do</c><00:20:08.460><c> as</c>

00:20:08.780 --> 00:20:08.790 align:start position:0%
callbacks tell the object what to do as
 

00:20:08.790 --> 00:20:11.120 align:start position:0%
callbacks tell the object what to do as
objects<00:20:09.630><c> are</c><00:20:09.750><c> being</c><00:20:09.960><c> added</c><00:20:10.170><c> and</c><00:20:10.500><c> removed</c><00:20:10.559><c> from</c>

00:20:11.120 --> 00:20:11.130 align:start position:0%
objects are being added and removed from
 

00:20:11.130 --> 00:20:17.240 align:start position:0%
objects are being added and removed from
the<00:20:11.280><c> collection</c><00:20:15.770><c> collections</c><00:20:16.770><c> can</c><00:20:16.890><c> also</c><00:20:17.040><c> be</c>

00:20:17.240 --> 00:20:17.250 align:start position:0%
the collection collections can also be
 

00:20:17.250 --> 00:20:19.790 align:start position:0%
the collection collections can also be
created<00:20:17.370><c> created</c><00:20:18.030><c> either</c><00:20:18.500><c> mutable</c><00:20:19.500><c> or</c>

00:20:19.790 --> 00:20:19.800 align:start position:0%
created created either mutable or
 

00:20:19.800 --> 00:20:22.520 align:start position:0%
created created either mutable or
immutable<00:20:20.250><c> and</c><00:20:20.640><c> we'll</c><00:20:21.450><c> go</c><00:20:21.540><c> into</c><00:20:21.720><c> into</c><00:20:22.260><c> both</c>

00:20:22.520 --> 00:20:22.530 align:start position:0%
immutable and we'll go into into both
 

00:20:22.530 --> 00:20:24.110 align:start position:0%
immutable and we'll go into into both
callbacks<00:20:23.040><c> and</c><00:20:23.190><c> mutability</c><00:20:23.730><c> and</c><00:20:23.910><c> greater</c>

00:20:24.110 --> 00:20:24.120 align:start position:0%
callbacks and mutability and greater
 

00:20:24.120 --> 00:20:29.450 align:start position:0%
callbacks and mutability and greater
detail<00:20:25.880><c> okay</c><00:20:27.410><c> so</c><00:20:28.410><c> as</c><00:20:28.530><c> I</c><00:20:28.679><c> said</c><00:20:28.740><c> callbacks</c>

00:20:29.450 --> 00:20:29.460 align:start position:0%
detail okay so as I said callbacks
 

00:20:29.460 --> 00:20:31.460 align:start position:0%
detail okay so as I said callbacks
determine<00:20:29.910><c> what</c><00:20:30.270><c> the</c><00:20:30.720><c> array</c><00:20:31.020><c> or</c><00:20:31.350><c> the</c>

00:20:31.460 --> 00:20:31.470 align:start position:0%
determine what the array or the
 

00:20:31.470 --> 00:20:33.950 align:start position:0%
determine what the array or the
dictionary<00:20:31.980><c> is</c><00:20:32.220><c> going</c><00:20:32.580><c> to</c><00:20:32.700><c> do</c><00:20:32.880><c> as</c><00:20:33.150><c> values</c><00:20:33.780><c> are</c>

00:20:33.950 --> 00:20:33.960 align:start position:0%
dictionary is going to do as values are
 

00:20:33.960 --> 00:20:37.430 align:start position:0%
dictionary is going to do as values are
added<00:20:34.410><c> or</c><00:20:34.590><c> removed</c><00:20:35.929><c> ninety</c><00:20:36.929><c> percent</c><00:20:37.080><c> of</c><00:20:37.350><c> the</c>

00:20:37.430 --> 00:20:37.440 align:start position:0%
added or removed ninety percent of the
 

00:20:37.440 --> 00:20:39.650 align:start position:0%
added or removed ninety percent of the
time<00:20:37.650><c> you're</c><00:20:38.190><c> going</c><00:20:38.400><c> to</c><00:20:38.490><c> be</c><00:20:38.550><c> storing</c><00:20:38.940><c> other</c><00:20:39.179><c> CF</c>

00:20:39.650 --> 00:20:39.660 align:start position:0%
time you're going to be storing other CF
 

00:20:39.660 --> 00:20:41.930 align:start position:0%
time you're going to be storing other CF
objects<00:20:40.170><c> inside</c><00:20:40.650><c> of</c><00:20:40.830><c> the</c><00:20:40.920><c> collection</c><00:20:41.429><c> when</c>

00:20:41.930 --> 00:20:41.940 align:start position:0%
objects inside of the collection when
 

00:20:41.940 --> 00:20:44.150 align:start position:0%
objects inside of the collection when
that<00:20:42.120><c> happens</c><00:20:42.630><c> use</c><00:20:43.080><c> the</c><00:20:43.320><c> default</c><00:20:43.650><c> callbacks</c>

00:20:44.150 --> 00:20:44.160 align:start position:0%
that happens use the default callbacks
 

00:20:44.160 --> 00:20:47.360 align:start position:0%
that happens use the default callbacks
we<00:20:44.370><c> provide</c><00:20:44.760><c> so</c><00:20:45.390><c> for</c><00:20:45.600><c> example</c><00:20:45.690><c> KCF</c><00:20:46.590><c> type</c><00:20:46.890><c> array</c>

00:20:47.360 --> 00:20:47.370 align:start position:0%
we provide so for example KCF type array
 

00:20:47.370 --> 00:20:49.520 align:start position:0%
we provide so for example KCF type array
callbacks<00:20:47.970><c> is</c><00:20:48.210><c> the</c><00:20:48.660><c> set</c><00:20:48.840><c> of</c><00:20:48.929><c> callbacks</c><00:20:49.170><c> you</c>

00:20:49.520 --> 00:20:49.530 align:start position:0%
callbacks is the set of callbacks you
 

00:20:49.530 --> 00:20:51.560 align:start position:0%
callbacks is the set of callbacks you
use<00:20:49.830><c> for</c><00:20:50.100><c> an</c><00:20:50.190><c> array</c><00:20:50.460><c> that's</c><00:20:51.000><c> going</c><00:20:51.179><c> to</c><00:20:51.330><c> store</c>

00:20:51.560 --> 00:20:51.570 align:start position:0%
use for an array that's going to store
 

00:20:51.570 --> 00:20:54.830 align:start position:0%
use for an array that's going to store
CF<00:20:51.870><c> types</c><00:20:52.170><c> as</c><00:20:52.490><c> you</c><00:20:53.490><c> would</c><00:20:53.580><c> expect</c><00:20:53.640><c> as</c><00:20:54.240><c> objects</c>

00:20:54.830 --> 00:20:54.840 align:start position:0%
CF types as you would expect as objects
 

00:20:54.840 --> 00:20:56.930 align:start position:0%
CF types as you would expect as objects
are<00:20:54.960><c> added</c><00:20:55.350><c> to</c><00:20:55.500><c> an</c><00:20:55.620><c> array</c><00:20:55.860><c> this</c><00:20:56.580><c> set</c><00:20:56.820><c> of</c>

00:20:56.930 --> 00:20:56.940 align:start position:0%
are added to an array this set of
 

00:20:56.940 --> 00:20:59.030 align:start position:0%
are added to an array this set of
callbacks<00:20:57.179><c> will</c><00:20:57.660><c> retain</c><00:20:57.960><c> the</c><00:20:58.200><c> objects</c><00:20:58.710><c> on</c><00:20:58.860><c> the</c>

00:20:59.030 --> 00:20:59.040 align:start position:0%
callbacks will retain the objects on the
 

00:20:59.040 --> 00:21:02.200 align:start position:0%
callbacks will retain the objects on the
way<00:20:59.160><c> in</c><00:20:59.400><c> release</c><00:21:00.210><c> them</c><00:21:00.360><c> on</c><00:21:00.510><c> the</c><00:21:00.660><c> way</c><00:21:00.780><c> out</c><00:21:00.809><c> of</c>

00:21:02.200 --> 00:21:02.210 align:start position:0%
way in release them on the way out of
 

00:21:02.210 --> 00:21:04.870 align:start position:0%
way in release them on the way out of
the<00:21:03.210><c> remaining</c><00:21:03.540><c> ten</c><00:21:03.870><c> percent</c><00:21:04.290><c> of</c><00:21:04.380><c> the</c><00:21:04.500><c> time</c>

00:21:04.870 --> 00:21:04.880 align:start position:0%
the remaining ten percent of the time
 

00:21:04.880 --> 00:21:08.000 align:start position:0%
the remaining ten percent of the time
nine<00:21:05.880><c> percent</c><00:21:06.330><c> of</c><00:21:06.450><c> that</c><00:21:06.480><c> is</c><00:21:06.840><c> going</c><00:21:07.230><c> to</c><00:21:07.380><c> your</c>

00:21:08.000 --> 00:21:08.010 align:start position:0%
nine percent of that is going to your
 

00:21:08.010 --> 00:21:09.680 align:start position:0%
nine percent of that is going to your
collections<00:21:08.670><c> are</c><00:21:08.850><c> probably</c><00:21:09.240><c> going</c><00:21:09.390><c> to</c><00:21:09.510><c> hold</c>

00:21:09.680 --> 00:21:09.690 align:start position:0%
collections are probably going to hold
 

00:21:09.690 --> 00:21:11.600 align:start position:0%
collections are probably going to hold
pointers<00:21:10.230><c> that</c><00:21:10.260><c> you</c><00:21:10.470><c> just</c><00:21:10.679><c> want</c><00:21:10.980><c> to</c><00:21:11.250><c> manage</c>

00:21:11.600 --> 00:21:11.610 align:start position:0%
pointers that you just want to manage
 

00:21:11.610 --> 00:21:13.820 align:start position:0%
pointers that you just want to manage
yourself<00:21:11.820><c> you</c><00:21:12.270><c> would</c><00:21:12.450><c> rather</c><00:21:12.630><c> the</c><00:21:12.990><c> collection</c>

00:21:13.820 --> 00:21:13.830 align:start position:0%
yourself you would rather the collection
 

00:21:13.830 --> 00:21:16.370 align:start position:0%
yourself you would rather the collection
does<00:21:14.040><c> not</c><00:21:14.250><c> do</c><00:21:14.429><c> any</c><00:21:14.610><c> management</c><00:21:15.179><c> for</c><00:21:15.390><c> you</c><00:21:15.540><c> when</c>

00:21:16.370 --> 00:21:16.380 align:start position:0%
does not do any management for you when
 

00:21:16.380 --> 00:21:19.010 align:start position:0%
does not do any management for you when
that's<00:21:16.559><c> the</c><00:21:16.740><c> case</c><00:21:16.830><c> simply</c><00:21:17.400><c> pass</c><00:21:17.700><c> null</c><00:21:18.059><c> at</c><00:21:18.330><c> that</c>

00:21:19.010 --> 00:21:19.020 align:start position:0%
that's the case simply pass null at that
 

00:21:19.020 --> 00:21:21.200 align:start position:0%
that's the case simply pass null at that
point<00:21:19.320><c> CFR</c><00:21:19.920><c> ACF</c><00:21:20.429><c> dictionary</c><00:21:20.880><c> all</c><00:21:21.090><c> the</c>

00:21:21.200 --> 00:21:21.210 align:start position:0%
point CFR ACF dictionary all the
 

00:21:21.210 --> 00:21:22.790 align:start position:0%
point CFR ACF dictionary all the
collections<00:21:21.510><c> will</c><00:21:21.840><c> simply</c><00:21:22.110><c> take</c><00:21:22.260><c> their</c><00:21:22.470><c> hands</c>

00:21:22.790 --> 00:21:22.800 align:start position:0%
collections will simply take their hands
 

00:21:22.800 --> 00:21:24.410 align:start position:0%
collections will simply take their hands
off<00:21:22.950><c> you</c><00:21:23.220><c> give</c><00:21:23.340><c> them</c><00:21:23.460><c> you</c><00:21:23.790><c> give</c><00:21:23.970><c> it</c><00:21:24.059><c> a</c><00:21:24.120><c> pointer</c>

00:21:24.410 --> 00:21:24.420 align:start position:0%
off you give them you give it a pointer
 

00:21:24.420 --> 00:21:26.120 align:start position:0%
off you give them you give it a pointer
value<00:21:24.570><c> it</c><00:21:24.929><c> will</c><00:21:25.020><c> hold</c><00:21:25.200><c> the</c><00:21:25.350><c> pointer</c><00:21:25.679><c> value</c><00:21:25.800><c> but</c>

00:21:26.120 --> 00:21:26.130 align:start position:0%
value it will hold the pointer value but
 

00:21:26.130 --> 00:21:29.720 align:start position:0%
value it will hold the pointer value but
it<00:21:26.220><c> won't</c><00:21:26.429><c> do</c><00:21:26.610><c> anything</c><00:21:26.880><c> with</c><00:21:27.240><c> it</c><00:21:28.460><c> once</c><00:21:29.460><c> in</c><00:21:29.640><c> a</c>

00:21:29.720 --> 00:21:29.730 align:start position:0%
it won't do anything with it once in a
 

00:21:29.730 --> 00:21:32.330 align:start position:0%
it won't do anything with it once in a
blue<00:21:29.940><c> moon</c><00:21:30.170><c> you</c><00:21:31.170><c> will</c><00:21:31.320><c> be</c><00:21:31.440><c> trying</c><00:21:31.890><c> you</c><00:21:32.130><c> will</c><00:21:32.250><c> be</c>

00:21:32.330 --> 00:21:32.340 align:start position:0%
blue moon you will be trying you will be
 

00:21:32.340 --> 00:21:35.600 align:start position:0%
blue moon you will be trying you will be
using<00:21:32.520><c> CF</c><00:21:32.940><c> array</c><00:21:33.240><c> or</c><00:21:33.570><c> CF</c><00:21:34.170><c> dictionary</c><00:21:34.710><c> to</c><00:21:35.340><c> store</c>

00:21:35.600 --> 00:21:35.610 align:start position:0%
using CF array or CF dictionary to store
 

00:21:35.610 --> 00:21:37.340 align:start position:0%
using CF array or CF dictionary to store
a<00:21:35.640><c> special</c><00:21:36.179><c> data</c><00:21:36.360><c> structure</c><00:21:36.840><c> that</c><00:21:36.990><c> has</c><00:21:37.140><c> its</c>

00:21:37.340 --> 00:21:37.350 align:start position:0%
a special data structure that has its
 

00:21:37.350 --> 00:21:40.159 align:start position:0%
a special data structure that has its
own<00:21:37.530><c> memory</c><00:21:37.980><c> management</c><00:21:38.370><c> scheme</c><00:21:38.870><c> this</c><00:21:39.870><c> is</c><00:21:40.050><c> the</c>

00:21:40.159 --> 00:21:40.169 align:start position:0%
own memory management scheme this is the
 

00:21:40.169 --> 00:21:41.270 align:start position:0%
own memory management scheme this is the
point<00:21:40.350><c> at</c><00:21:40.530><c> which</c><00:21:40.650><c> you're</c><00:21:40.860><c> going</c><00:21:41.070><c> to</c><00:21:41.160><c> be</c>

00:21:41.270 --> 00:21:41.280 align:start position:0%
point at which you're going to be
 

00:21:41.280 --> 00:21:43.460 align:start position:0%
point at which you're going to be
writing<00:21:41.520><c> your</c><00:21:41.700><c> own</c><00:21:42.059><c> call</c><00:21:42.480><c> back</c>

00:21:43.460 --> 00:21:43.470 align:start position:0%
writing your own call back
 

00:21:43.470 --> 00:21:45.380 align:start position:0%
writing your own call back
you<00:21:43.890><c> will</c><00:21:44.039><c> have</c><00:21:44.190><c> to</c><00:21:44.340><c> add</c><00:21:44.490><c> functions</c><00:21:45.150><c> that</c>

00:21:45.380 --> 00:21:45.390 align:start position:0%
you will have to add functions that
 

00:21:45.390 --> 00:21:47.870 align:start position:0%
you will have to add functions that
define<00:21:45.750><c> how</c><00:21:46.440><c> the</c><00:21:46.470><c> object</c><00:21:47.039><c> is</c><00:21:47.130><c> retained</c><00:21:47.549><c> on</c><00:21:47.760><c> the</c>

00:21:47.870 --> 00:21:47.880 align:start position:0%
define how the object is retained on the
 

00:21:47.880 --> 00:21:49.460 align:start position:0%
define how the object is retained on the
way<00:21:47.970><c> into</c><00:21:48.360><c> the</c><00:21:48.450><c> collection</c><00:21:48.780><c> how</c><00:21:49.169><c> it</c><00:21:49.289><c> should</c><00:21:49.440><c> be</c>

00:21:49.460 --> 00:21:49.470 align:start position:0%
way into the collection how it should be
 

00:21:49.470 --> 00:21:51.590 align:start position:0%
way into the collection how it should be
released<00:21:49.860><c> on</c><00:21:50.010><c> the</c><00:21:50.159><c> way</c><00:21:50.309><c> out</c><00:21:50.340><c> and</c><00:21:50.880><c> then</c><00:21:51.510><c> you</c>

00:21:51.590 --> 00:21:51.600 align:start position:0%
released on the way out and then you
 

00:21:51.600 --> 00:21:54.049 align:start position:0%
released on the way out and then you
will<00:21:51.720><c> pass</c><00:21:51.900><c> those</c><00:21:52.260><c> callbacks</c><00:21:52.770><c> to</c><00:21:53.010><c> CF</c><00:21:53.309><c> array</c><00:21:53.789><c> or</c>

00:21:54.049 --> 00:21:54.059 align:start position:0%
will pass those callbacks to CF array or
 

00:21:54.059 --> 00:21:58.970 align:start position:0%
will pass those callbacks to CF array or
whatever<00:21:54.390><c> collection</c><00:21:54.900><c> you're</c><00:21:55.049><c> using</c><00:21:57.980><c> moving</c>

00:21:58.970 --> 00:21:58.980 align:start position:0%
whatever collection you're using moving
 

00:21:58.980 --> 00:22:01.310 align:start position:0%
whatever collection you're using moving
on<00:21:59.100><c> to</c><00:21:59.250><c> the</c><00:21:59.280><c> mutability</c><00:21:59.960><c> there</c><00:22:00.960><c> are</c><00:22:01.080><c> three</c>

00:22:01.310 --> 00:22:01.320 align:start position:0%
on to the mutability there are three
 

00:22:01.320 --> 00:22:04.180 align:start position:0%
on to the mutability there are three
kinds<00:22:01.470><c> of</c><00:22:01.679><c> mutability</c><00:22:02.190><c> in</c><00:22:02.370><c> the</c><00:22:02.490><c> system</c><00:22:02.970><c> an</c>

00:22:04.180 --> 00:22:04.190 align:start position:0%
kinds of mutability in the system an
 

00:22:04.190 --> 00:22:07.039 align:start position:0%
kinds of mutability in the system an
immutable<00:22:05.190><c> object</c><00:22:05.880><c> as</c><00:22:06.059><c> you</c><00:22:06.240><c> would</c><00:22:06.390><c> expect</c><00:22:06.480><c> you</c>

00:22:07.039 --> 00:22:07.049 align:start position:0%
immutable object as you would expect you
 

00:22:07.049 --> 00:22:08.990 align:start position:0%
immutable object as you would expect you
can<00:22:07.380><c> change</c><00:22:07.650><c> neither</c><00:22:07.919><c> the</c><00:22:08.130><c> content</c><00:22:08.580><c> nor</c><00:22:08.850><c> the</c>

00:22:08.990 --> 00:22:09.000 align:start position:0%
can change neither the content nor the
 

00:22:09.000 --> 00:22:12.289 align:start position:0%
can change neither the content nor the
size<00:22:09.860><c> once</c><00:22:10.860><c> the</c><00:22:11.010><c> object</c><00:22:11.370><c> has</c><00:22:11.520><c> been</c><00:22:11.730><c> created</c>

00:22:12.289 --> 00:22:12.299 align:start position:0%
size once the object has been created
 

00:22:12.299 --> 00:22:14.090 align:start position:0%
size once the object has been created
the<00:22:12.659><c> data</c><00:22:12.870><c> is</c><00:22:12.990><c> going</c><00:22:13.080><c> to</c><00:22:13.200><c> remain</c><00:22:13.409><c> constant</c>

00:22:14.090 --> 00:22:14.100 align:start position:0%
the data is going to remain constant
 

00:22:14.100 --> 00:22:17.990 align:start position:0%
the data is going to remain constant
until<00:22:14.400><c> the</c><00:22:14.520><c> object</c><00:22:14.880><c> is</c><00:22:15.000><c> destroyed</c><00:22:15.179><c> a</c><00:22:17.000><c> fixed</c>

00:22:17.990 --> 00:22:18.000 align:start position:0%
until the object is destroyed a fixed
 

00:22:18.000 --> 00:22:20.120 align:start position:0%
until the object is destroyed a fixed
size<00:22:18.240><c> collection</c><00:22:19.049><c> you</c><00:22:19.440><c> can</c><00:22:19.650><c> change</c><00:22:19.860><c> the</c>

00:22:20.120 --> 00:22:20.130 align:start position:0%
size collection you can change the
 

00:22:20.130 --> 00:22:22.100 align:start position:0%
size collection you can change the
contents<00:22:20.610><c> all</c><00:22:20.789><c> you</c><00:22:20.940><c> want</c><00:22:21.179><c> as</c><00:22:21.419><c> long</c><00:22:21.690><c> as</c><00:22:21.870><c> you</c><00:22:21.990><c> do</c>

00:22:22.100 --> 00:22:22.110 align:start position:0%
contents all you want as long as you do
 

00:22:22.110 --> 00:22:25.610 align:start position:0%
contents all you want as long as you do
not<00:22:22.140><c> exceed</c><00:22:22.679><c> the</c><00:22:22.980><c> given</c><00:22:23.250><c> capacity</c><00:22:23.429><c> and</c><00:22:24.620><c> a</c>

00:22:25.610 --> 00:22:25.620 align:start position:0%
not exceed the given capacity and a
 

00:22:25.620 --> 00:22:27.230 align:start position:0%
not exceed the given capacity and a
fully<00:22:25.860><c> mutable</c><00:22:26.250><c> collection</c><00:22:26.760><c> you</c><00:22:26.850><c> can</c><00:22:27.000><c> change</c>

00:22:27.230 --> 00:22:27.240 align:start position:0%
fully mutable collection you can change
 

00:22:27.240 --> 00:22:31.370 align:start position:0%
fully mutable collection you can change
the<00:22:27.390><c> content</c><00:22:27.840><c> and</c><00:22:27.929><c> the</c><00:22:28.020><c> size</c><00:22:29.990><c> not</c><00:22:30.990><c> all</c><00:22:31.200><c> of</c><00:22:31.289><c> the</c>

00:22:31.370 --> 00:22:31.380 align:start position:0%
the content and the size not all of the
 

00:22:31.380 --> 00:22:32.990 align:start position:0%
the content and the size not all of the
collections<00:22:31.860><c> support</c><00:22:32.220><c> all</c><00:22:32.370><c> of</c><00:22:32.520><c> the</c><00:22:32.610><c> kinds</c><00:22:32.909><c> of</c>

00:22:32.990 --> 00:22:33.000 align:start position:0%
collections support all of the kinds of
 

00:22:33.000 --> 00:22:35.120 align:start position:0%
collections support all of the kinds of
mutability<00:22:33.630><c> both</c><00:22:33.929><c> array</c><00:22:34.230><c> and</c><00:22:34.380><c> dictionary</c><00:22:34.799><c> do</c>

00:22:35.120 --> 00:22:35.130 align:start position:0%
mutability both array and dictionary do
 

00:22:35.130 --> 00:22:36.620 align:start position:0%
mutability both array and dictionary do
when<00:22:35.850><c> you're</c><00:22:36.000><c> in</c><00:22:36.090><c> doubt</c><00:22:36.210><c> check</c><00:22:36.480><c> the</c>

00:22:36.620 --> 00:22:36.630 align:start position:0%
when you're in doubt check the
 

00:22:36.630 --> 00:22:38.630 align:start position:0%
when you're in doubt check the
documentation<00:22:37.200><c> the</c><00:22:37.530><c> documentation</c><00:22:38.220><c> clearly</c>

00:22:38.630 --> 00:22:38.640 align:start position:0%
documentation the documentation clearly
 

00:22:38.640 --> 00:22:40.820 align:start position:0%
documentation the documentation clearly
marked<00:22:38.940><c> what</c><00:22:39.659><c> kinds</c><00:22:40.110><c> of</c><00:22:40.169><c> mutability</c><00:22:40.679><c> are</c>

00:22:40.820 --> 00:22:40.830 align:start position:0%
marked what kinds of mutability are
 

00:22:40.830 --> 00:22:43.789 align:start position:0%
marked what kinds of mutability are
supported<00:22:41.250><c> by</c><00:22:41.370><c> which</c><00:22:41.549><c> collections</c><00:22:42.120><c> and</c><00:22:42.799><c> also</c>

00:22:43.789 --> 00:22:43.799 align:start position:0%
supported by which collections and also
 

00:22:43.799 --> 00:22:45.770 align:start position:0%
supported by which collections and also
I<00:22:43.830><c> wanted</c><00:22:44.340><c> to</c><00:22:44.490><c> mention</c><00:22:44.640><c> here</c><00:22:45.090><c> although</c><00:22:45.419><c> CF</c>

00:22:45.770 --> 00:22:45.780 align:start position:0%
I wanted to mention here although CF
 

00:22:45.780 --> 00:22:47.690 align:start position:0%
I wanted to mention here although CF
string<00:22:46.110><c> and</c><00:22:46.260><c> CF</c><00:22:46.530><c> data</c><00:22:46.799><c> are</c><00:22:47.159><c> not</c><00:22:47.400><c> themselves</c>

00:22:47.690 --> 00:22:47.700 align:start position:0%
string and CF data are not themselves
 

00:22:47.700 --> 00:22:49.490 align:start position:0%
string and CF data are not themselves
collections<00:22:48.570><c> of</c><00:22:48.690><c> other</c><00:22:48.840><c> objects</c>

00:22:49.490 --> 00:22:49.500 align:start position:0%
collections of other objects
 

00:22:49.500 --> 00:22:51.380 align:start position:0%
collections of other objects
conceptually<00:22:50.010><c> a</c><00:22:50.400><c> string</c><00:22:50.789><c> of</c><00:22:50.880><c> the</c><00:22:50.970><c> collection</c>

00:22:51.380 --> 00:22:51.390 align:start position:0%
conceptually a string of the collection
 

00:22:51.390 --> 00:22:53.659 align:start position:0%
conceptually a string of the collection
of<00:22:51.510><c> characters</c><00:22:52.020><c> and</c><00:22:52.320><c> data</c><00:22:53.070><c> is</c><00:22:53.250><c> cool</c><00:22:53.460><c> is</c><00:22:53.640><c> a</c>

00:22:53.659 --> 00:22:53.669 align:start position:0%
of characters and data is cool is a
 

00:22:53.669 --> 00:22:56.360 align:start position:0%
of characters and data is cool is a
collection<00:22:54.090><c> of</c><00:22:54.270><c> bytes</c><00:22:54.870><c> and</c><00:22:55.200><c> therefore</c><00:22:55.980><c> we</c><00:22:56.159><c> use</c>

00:22:56.360 --> 00:22:56.370 align:start position:0%
collection of bytes and therefore we use
 

00:22:56.370 --> 00:22:58.460 align:start position:0%
collection of bytes and therefore we use
these<00:22:56.640><c> mutability</c><00:22:57.179><c> principles</c><00:22:57.750><c> for</c><00:22:57.929><c> both</c><00:22:58.110><c> CF</c>

00:22:58.460 --> 00:22:58.470 align:start position:0%
these mutability principles for both CF
 

00:22:58.470 --> 00:23:01.279 align:start position:0%
these mutability principles for both CF
string<00:22:58.770><c> and</c><00:22:58.890><c> CF</c><00:22:59.159><c> data</c><00:22:59.370><c> as</c><00:22:59.580><c> well</c><00:22:59.880><c> and</c><00:23:00.840><c> they</c><00:23:01.049><c> also</c>

00:23:01.279 --> 00:23:01.289 align:start position:0%
string and CF data as well and they also
 

00:23:01.289 --> 00:23:06.350 align:start position:0%
string and CF data as well and they also
support<00:23:01.770><c> all</c><00:23:01.980><c> three</c><00:23:02.190><c> types</c><00:23:02.400><c> of</c><00:23:02.640><c> mutability</c><00:23:05.360><c> so</c>

00:23:06.350 --> 00:23:06.360 align:start position:0%
support all three types of mutability so
 

00:23:06.360 --> 00:23:08.899 align:start position:0%
support all three types of mutability so
the<00:23:06.480><c> way</c><00:23:06.600><c> it</c><00:23:06.720><c> works</c><00:23:06.960><c> is</c><00:23:07.169><c> this</c><00:23:07.520><c> when</c><00:23:08.520><c> you</c><00:23:08.640><c> call</c>

00:23:08.899 --> 00:23:08.909 align:start position:0%
the way it works is this when you call
 

00:23:08.909 --> 00:23:12.799 align:start position:0%
the way it works is this when you call
CF<00:23:09.870><c> string</c><00:23:10.590><c> creates</c><00:23:11.250><c> the</c><00:23:11.580><c> CF</c><00:23:12.120><c> array</c><00:23:12.450><c> create</c>

00:23:12.799 --> 00:23:12.809 align:start position:0%
CF string creates the CF array create
 

00:23:12.809 --> 00:23:14.960 align:start position:0%
CF string creates the CF array create
whatever<00:23:13.159><c> you're</c><00:23:14.159><c> going</c><00:23:14.370><c> to</c><00:23:14.460><c> get</c><00:23:14.549><c> back</c><00:23:14.789><c> a</c>

00:23:14.960 --> 00:23:14.970 align:start position:0%
whatever you're going to get back a
 

00:23:14.970 --> 00:23:19.130 align:start position:0%
whatever you're going to get back a
fully<00:23:15.299><c> immutable</c><00:23:15.929><c> object</c><00:23:17.330><c> when</c><00:23:18.330><c> you</c><00:23:18.450><c> call</c><00:23:18.690><c> CF</c>

00:23:19.130 --> 00:23:19.140 align:start position:0%
fully immutable object when you call CF
 

00:23:19.140 --> 00:23:21.740 align:start position:0%
fully immutable object when you call CF
array<00:23:19.830><c> create</c><00:23:20.370><c> mutable</c><00:23:20.970><c> you</c><00:23:21.240><c> will</c><00:23:21.360><c> get</c><00:23:21.510><c> back</c><00:23:21.690><c> a</c>

00:23:21.740 --> 00:23:21.750 align:start position:0%
array create mutable you will get back a
 

00:23:21.750 --> 00:23:25.460 align:start position:0%
array create mutable you will get back a
mutable<00:23:22.230><c> object</c><00:23:22.880><c> if</c><00:23:23.880><c> the</c><00:23:23.940><c> specified</c><00:23:24.470><c> capacity</c>

00:23:25.460 --> 00:23:25.470 align:start position:0%
mutable object if the specified capacity
 

00:23:25.470 --> 00:23:28.130 align:start position:0%
mutable object if the specified capacity
is<00:23:25.650><c> greater</c><00:23:26.039><c> than</c><00:23:26.280><c> 0</c><00:23:26.610><c> that</c><00:23:27.090><c> will</c><00:23:27.150><c> be</c><00:23:27.510><c> taken</c><00:23:28.020><c> as</c>

00:23:28.130 --> 00:23:28.140 align:start position:0%
is greater than 0 that will be taken as
 

00:23:28.140 --> 00:23:30.440 align:start position:0%
is greater than 0 that will be taken as
the<00:23:28.289><c> maximum</c><00:23:28.950><c> capacity</c><00:23:29.190><c> for</c><00:23:29.940><c> your</c><00:23:30.120><c> collection</c>

00:23:30.440 --> 00:23:30.450 align:start position:0%
the maximum capacity for your collection
 

00:23:30.450 --> 00:23:34.039 align:start position:0%
the maximum capacity for your collection
so<00:23:30.929><c> CFRA</c><00:23:31.530><c> create</c><00:23:32.419><c> create</c><00:23:33.419><c> mutable</c><00:23:33.870><c> with</c><00:23:34.020><c> a</c>

00:23:34.039 --> 00:23:34.049 align:start position:0%
so CFRA create create mutable with a
 

00:23:34.049 --> 00:23:36.590 align:start position:0%
so CFRA create create mutable with a
capacity<00:23:34.380><c> of</c><00:23:34.679><c> 10</c><00:23:35.039><c> produces</c><00:23:36.030><c> an</c><00:23:36.150><c> array</c><00:23:36.390><c> that</c>

00:23:36.590 --> 00:23:36.600 align:start position:0%
capacity of 10 produces an array that
 

00:23:36.600 --> 00:23:39.620 align:start position:0%
capacity of 10 produces an array that
can<00:23:36.780><c> never</c><00:23:36.990><c> hold</c><00:23:37.350><c> more</c><00:23:37.679><c> than</c><00:23:37.740><c> 10</c><00:23:37.890><c> objects</c><00:23:38.760><c> on</c>

00:23:39.620 --> 00:23:39.630 align:start position:0%
can never hold more than 10 objects on
 

00:23:39.630 --> 00:23:42.409 align:start position:0%
can never hold more than 10 objects on
the<00:23:40.409><c> other</c><00:23:40.620><c> hand</c><00:23:40.860><c> if</c><00:23:41.159><c> you</c><00:23:41.280><c> pass</c><00:23:41.549><c> a</c><00:23:41.580><c> capacity</c><00:23:42.390><c> of</c>

00:23:42.409 --> 00:23:42.419 align:start position:0%
the other hand if you pass a capacity of
 

00:23:42.419 --> 00:23:45.529 align:start position:0%
the other hand if you pass a capacity of
0<00:23:42.870><c> we</c><00:23:43.770><c> will</c><00:23:43.950><c> create</c><00:23:44.159><c> a</c><00:23:44.280><c> fully</c><00:23:44.640><c> mutable</c><00:23:45.090><c> object</c>

00:23:45.529 --> 00:23:45.539 align:start position:0%
0 we will create a fully mutable object
 

00:23:45.539 --> 00:23:47.570 align:start position:0%
0 we will create a fully mutable object
for<00:23:45.780><c> you</c><00:23:45.929><c> and</c><00:23:46.140><c> the</c><00:23:46.260><c> array</c><00:23:46.530><c> or</c><00:23:46.860><c> string</c><00:23:47.309><c> or</c>

00:23:47.570 --> 00:23:47.580 align:start position:0%
for you and the array or string or
 

00:23:47.580 --> 00:23:49.940 align:start position:0%
for you and the array or string or
dictionary<00:23:48.240><c> will</c><00:23:48.570><c> automatically</c><00:23:49.350><c> grow</c><00:23:49.650><c> as</c>

00:23:49.940 --> 00:23:49.950 align:start position:0%
dictionary will automatically grow as
 

00:23:49.950 --> 00:23:55.250 align:start position:0%
dictionary will automatically grow as
new<00:23:50.669><c> objects</c><00:23:51.210><c> are</c><00:23:51.330><c> added</c><00:23:51.659><c> in</c><00:23:53.960><c> so</c><00:23:54.960><c> for</c><00:23:55.140><c> example</c>

00:23:55.250 --> 00:23:55.260 align:start position:0%
new objects are added in so for example
 

00:23:55.260 --> 00:23:57.289 align:start position:0%
new objects are added in so for example
CF<00:23:55.980><c> array</c><00:23:56.280><c> create</c>

00:23:57.289 --> 00:23:57.299 align:start position:0%
CF array create
 

00:23:57.299 --> 00:23:59.149 align:start position:0%
CF array create
it's<00:23:57.600><c> going</c><00:23:57.840><c> to</c><00:23:57.929><c> produce</c><00:23:58.019><c> an</c><00:23:58.289><c> immutable</c><00:23:58.649><c> array</c>

00:23:59.149 --> 00:23:59.159 align:start position:0%
it's going to produce an immutable array
 

00:23:59.159 --> 00:24:01.519 align:start position:0%
it's going to produce an immutable array
you<00:23:59.669><c> just</c><00:23:59.879><c> provide</c><00:24:00.269><c> the</c><00:24:00.299><c> the</c><00:24:00.869><c> objects</c><00:24:01.440><c> that</c>

00:24:01.519 --> 00:24:01.529 align:start position:0%
you just provide the the objects that
 

00:24:01.529 --> 00:24:03.139 align:start position:0%
you just provide the the objects that
are<00:24:01.649><c> going</c><00:24:01.769><c> in</c><00:24:02.039><c> and</c><00:24:02.249><c> the</c><00:24:02.309><c> number</c><00:24:02.610><c> of</c><00:24:02.759><c> them</c><00:24:02.909><c> and</c>

00:24:03.139 --> 00:24:03.149 align:start position:0%
are going in and the number of them and
 

00:24:03.149 --> 00:24:06.499 align:start position:0%
are going in and the number of them and
there<00:24:03.960><c> you</c><00:24:04.080><c> go</c><00:24:04.580><c> CS</c><00:24:05.580><c> dictionary</c><00:24:06.029><c> create</c>

00:24:06.499 --> 00:24:06.509 align:start position:0%
there you go CS dictionary create
 

00:24:06.509 --> 00:24:10.070 align:start position:0%
there you go CS dictionary create
mutable<00:24:07.249><c> passing</c><00:24:08.249><c> a</c><00:24:08.309><c> capacity</c><00:24:08.940><c> of</c><00:24:08.970><c> 10</c><00:24:09.299><c> creates</c>

00:24:10.070 --> 00:24:10.080 align:start position:0%
mutable passing a capacity of 10 creates
 

00:24:10.080 --> 00:24:12.200 align:start position:0%
mutable passing a capacity of 10 creates
a<00:24:10.169><c> mutable</c><00:24:11.039><c> dictionary</c><00:24:11.639><c> that</c><00:24:11.850><c> can</c><00:24:11.999><c> never</c>

00:24:12.200 --> 00:24:12.210 align:start position:0%
a mutable dictionary that can never
 

00:24:12.210 --> 00:24:16.669 align:start position:0%
a mutable dictionary that can never
contain<00:24:12.779><c> more</c><00:24:13.409><c> than</c><00:24:13.470><c> 10</c><00:24:13.860><c> key</c><00:24:14.159><c> value</c><00:24:14.549><c> pairs</c><00:24:15.679><c> CF</c>

00:24:16.669 --> 00:24:16.679 align:start position:0%
contain more than 10 key value pairs CF
 

00:24:16.679 --> 00:24:19.489 align:start position:0%
contain more than 10 key value pairs CF
string<00:24:17.070><c> create</c><00:24:17.519><c> mutable</c><00:24:18.059><c> passing</c><00:24:18.840><c> a</c><00:24:18.899><c> capacity</c>

00:24:19.489 --> 00:24:19.499 align:start position:0%
string create mutable passing a capacity
 

00:24:19.499 --> 00:24:22.789 align:start position:0%
string create mutable passing a capacity
of<00:24:19.529><c> 0</c><00:24:20.149><c> produces</c><00:24:21.149><c> a</c><00:24:21.179><c> fully</c><00:24:21.539><c> fully</c><00:24:22.230><c> mutable</c>

00:24:22.789 --> 00:24:22.799 align:start position:0%
of 0 produces a fully fully mutable
 

00:24:22.799 --> 00:24:24.710 align:start position:0%
of 0 produces a fully fully mutable
string<00:24:23.070><c> of</c><00:24:23.399><c> unlimited</c><00:24:23.820><c> length</c><00:24:24.330><c> and</c><00:24:24.600><c> as</c>

00:24:24.710 --> 00:24:24.720 align:start position:0%
string of unlimited length and as
 

00:24:24.720 --> 00:24:27.379 align:start position:0%
string of unlimited length and as
strings<00:24:25.289><c> and</c><00:24:25.499><c> characters</c><00:24:25.950><c> are</c><00:24:26.159><c> added</c><00:24:26.610><c> to</c><00:24:26.970><c> the</c>

00:24:27.379 --> 00:24:27.389 align:start position:0%
strings and characters are added to the
 

00:24:27.389 --> 00:24:29.629 align:start position:0%
strings and characters are added to the
to<00:24:28.049><c> this</c><00:24:28.289><c> string</c><00:24:28.649><c> it</c><00:24:28.919><c> will</c><00:24:29.369><c> grow</c><00:24:29.580><c> to</c>

00:24:29.629 --> 00:24:29.639 align:start position:0%
to this string it will grow to
 

00:24:29.639 --> 00:24:35.989 align:start position:0%
to this string it will grow to
accommodate<00:24:30.330><c> them</c><00:24:33.470><c> so</c><00:24:34.549><c> how</c><00:24:35.549><c> does</c><00:24:35.609><c> this</c><00:24:35.759><c> all</c>

00:24:35.989 --> 00:24:35.999 align:start position:0%
accommodate them so how does this all
 

00:24:35.999 --> 00:24:38.509 align:start position:0%
accommodate them so how does this all
come<00:24:36.029><c> together</c><00:24:36.499><c> well</c><00:24:37.499><c> given</c><00:24:37.950><c> these</c><00:24:38.100><c> basic</c>

00:24:38.509 --> 00:24:38.519 align:start position:0%
come together well given these basic
 

00:24:38.519 --> 00:24:41.930 align:start position:0%
come together well given these basic
pieces<00:24:38.789><c> of</c><00:24:39.299><c> strings</c><00:24:40.080><c> datas</c><00:24:40.950><c> arrays</c><00:24:41.609><c> and</c>

00:24:41.930 --> 00:24:41.940 align:start position:0%
pieces of strings datas arrays and
 

00:24:41.940 --> 00:24:43.549 align:start position:0%
pieces of strings datas arrays and
dictionaries<00:24:41.999><c> you</c><00:24:42.749><c> can</c><00:24:42.869><c> actually</c><00:24:43.049><c> build</c><00:24:43.379><c> up</c>

00:24:43.549 --> 00:24:43.559 align:start position:0%
dictionaries you can actually build up
 

00:24:43.559 --> 00:24:48.139 align:start position:0%
dictionaries you can actually build up
some<00:24:43.710><c> very</c><00:24:44.009><c> complex</c><00:24:44.609><c> trees</c><00:24:45.029><c> of</c><00:24:45.239><c> objects</c><00:24:47.149><c> you</c>

00:24:48.139 --> 00:24:48.149 align:start position:0%
some very complex trees of objects you
 

00:24:48.149 --> 00:24:50.330 align:start position:0%
some very complex trees of objects you
can<00:24:48.299><c> also</c><00:24:48.419><c> we</c><00:24:49.080><c> also</c><00:24:49.230><c> support</c><00:24:49.769><c> several</c><00:24:50.070><c> other</c>

00:24:50.330 --> 00:24:50.340 align:start position:0%
can also we also support several other
 

00:24:50.340 --> 00:24:52.729 align:start position:0%
can also we also support several other
types<00:24:50.669><c> but</c><00:24:51.149><c> string</c><00:24:52.049><c> data</c><00:24:52.289><c> array</c><00:24:52.590><c> and</c>

00:24:52.729 --> 00:24:52.739 align:start position:0%
types but string data array and
 

00:24:52.739 --> 00:24:56.869 align:start position:0%
types but string data array and
dictionary<00:24:53.220><c> form</c><00:24:53.820><c> the</c><00:24:53.940><c> core</c><00:24:54.179><c> of</c><00:24:54.210><c> them</c><00:24:55.879><c> there</c>

00:24:56.869 --> 00:24:56.879 align:start position:0%
dictionary form the core of them there
 

00:24:56.879 --> 00:24:58.609 align:start position:0%
dictionary form the core of them there
are<00:24:57.029><c> a</c><00:24:57.059><c> couple</c><00:24:57.210><c> restrictions</c><00:24:58.109><c> first</c><00:24:58.409><c> of</c><00:24:58.529><c> all</c>

00:24:58.609 --> 00:24:58.619 align:start position:0%
are a couple restrictions first of all
 

00:24:58.619 --> 00:25:00.529 align:start position:0%
are a couple restrictions first of all
it<00:24:58.710><c> has</c><00:24:58.859><c> to</c><00:24:58.889><c> be</c><00:24:59.129><c> a</c><00:24:59.159><c> true</c><00:24:59.429><c> tree</c><00:24:59.730><c> no</c><00:24:59.970><c> loop</c><00:25:00.179><c> so</c>

00:25:00.529 --> 00:25:00.539 align:start position:0%
it has to be a true tree no loop so
 

00:25:00.539 --> 00:25:02.299 align:start position:0%
it has to be a true tree no loop so
arrays<00:25:00.989><c> can't</c><00:25:01.320><c> include</c><00:25:01.559><c> themselves</c>

00:25:02.299 --> 00:25:02.309 align:start position:0%
arrays can't include themselves
 

00:25:02.309 --> 00:25:04.609 align:start position:0%
arrays can't include themselves
dictionaries<00:25:02.909><c> can't</c><00:25:03.210><c> include</c><00:25:03.600><c> or</c><00:25:03.960><c> it</c><00:25:04.409><c> can't</c>

00:25:04.609 --> 00:25:04.619 align:start position:0%
dictionaries can't include or it can't
 

00:25:04.619 --> 00:25:08.090 align:start position:0%
dictionaries can't include or it can't
include<00:25:04.859><c> themselves</c><00:25:06.619><c> secondly</c><00:25:07.619><c> the</c><00:25:07.739><c> keys</c><00:25:07.950><c> of</c>

00:25:08.090 --> 00:25:08.100 align:start position:0%
include themselves secondly the keys of
 

00:25:08.100 --> 00:25:09.919 align:start position:0%
include themselves secondly the keys of
the<00:25:08.159><c> dictionaries</c><00:25:08.669><c> must</c><00:25:08.940><c> always</c><00:25:09.210><c> be</c><00:25:09.570><c> strings</c>

00:25:09.919 --> 00:25:09.929 align:start position:0%
the dictionaries must always be strings
 

00:25:09.929 --> 00:25:13.129 align:start position:0%
the dictionaries must always be strings
and<00:25:10.519><c> we</c><00:25:11.519><c> create</c><00:25:11.820><c> an</c><00:25:11.940><c> abstraction</c><00:25:12.359><c> on</c><00:25:12.629><c> top</c><00:25:12.690><c> of</c>

00:25:13.129 --> 00:25:13.139 align:start position:0%
and we create an abstraction on top of
 

00:25:13.139 --> 00:25:14.779 align:start position:0%
and we create an abstraction on top of
such<00:25:13.320><c> a</c><00:25:13.350><c> structure</c><00:25:13.769><c> and</c><00:25:14.100><c> call</c><00:25:14.309><c> it</c><00:25:14.429><c> a</c><00:25:14.489><c> CF</c>

00:25:14.779 --> 00:25:14.789 align:start position:0%
such a structure and call it a CF
 

00:25:14.789 --> 00:25:18.049 align:start position:0%
such a structure and call it a CF
property<00:25:15.330><c> list</c><00:25:15.509><c> ref</c><00:25:16.489><c> so</c><00:25:17.489><c> why</c><00:25:17.700><c> are</c><00:25:17.850><c> property</c>

00:25:18.049 --> 00:25:18.059 align:start position:0%
property list ref so why are property
 

00:25:18.059 --> 00:25:21.590 align:start position:0%
property list ref so why are property
lists<00:25:18.539><c> useful</c><00:25:19.700><c> they're</c><00:25:20.700><c> useful</c><00:25:20.909><c> because</c><00:25:21.239><c> we</c>

00:25:21.590 --> 00:25:21.600 align:start position:0%
lists useful they're useful because we
 

00:25:21.600 --> 00:25:24.200 align:start position:0%
lists useful they're useful because we
make<00:25:21.809><c> them</c><00:25:22.049><c> persistent</c><00:25:22.649><c> they</c><00:25:23.489><c> have</c><00:25:23.669><c> a</c><00:25:23.700><c> simple</c>

00:25:24.200 --> 00:25:24.210 align:start position:0%
make them persistent they have a simple
 

00:25:24.210 --> 00:25:26.930 align:start position:0%
make them persistent they have a simple
flattened<00:25:24.720><c> XML</c><00:25:25.200><c> representation</c><00:25:25.649><c> and</c><00:25:26.220><c> you</c><00:25:26.759><c> can</c>

00:25:26.930 --> 00:25:26.940 align:start position:0%
flattened XML representation and you can
 

00:25:26.940 --> 00:25:28.729 align:start position:0%
flattened XML representation and you can
easily<00:25:27.239><c> convert</c><00:25:27.840><c> to</c><00:25:28.139><c> and</c><00:25:28.350><c> from</c><00:25:28.529><c> that</c>

00:25:28.729 --> 00:25:28.739 align:start position:0%
easily convert to and from that
 

00:25:28.739 --> 00:25:31.519 align:start position:0%
easily convert to and from that
flattened<00:25:29.249><c> XML</c><00:25:29.669><c> representation</c><00:25:30.529><c> expresses</c>

00:25:31.519 --> 00:25:31.529 align:start position:0%
flattened XML representation expresses
 

00:25:31.529 --> 00:25:34.999 align:start position:0%
flattened XML representation expresses
the<00:25:31.619><c> data</c><00:25:31.859><c> and</c><00:25:32.129><c> the</c><00:25:32.820><c> rich</c><00:25:32.999><c> tree</c><00:25:33.389><c> structure</c><00:25:34.009><c> now</c>

00:25:34.999 --> 00:25:35.009 align:start position:0%
the data and the rich tree structure now
 

00:25:35.009 --> 00:25:37.279 align:start position:0%
the data and the rich tree structure now
we<00:25:35.070><c> do</c><00:25:35.369><c> not</c><00:25:35.519><c> handle</c><00:25:35.970><c> the</c><00:25:36.029><c> file</c><00:25:36.359><c> access</c><00:25:36.869><c> part</c><00:25:37.169><c> of</c>

00:25:37.279 --> 00:25:37.289 align:start position:0%
we do not handle the file access part of
 

00:25:37.289 --> 00:25:39.109 align:start position:0%
we do not handle the file access part of
this<00:25:37.409><c> as</c><00:25:37.649><c> a</c><00:25:37.679><c> rule</c><00:25:37.950><c> core</c><00:25:38.220><c> foundation</c><00:25:38.759><c> does</c><00:25:38.909><c> not</c>

00:25:39.109 --> 00:25:39.119 align:start position:0%
this as a rule core foundation does not
 

00:25:39.119 --> 00:25:42.229 align:start position:0%
this as a rule core foundation does not
touch<00:25:39.419><c> the</c><00:25:39.690><c> file</c><00:25:39.899><c> system</c><00:25:40.460><c> so</c><00:25:41.460><c> it's</c><00:25:41.820><c> up</c><00:25:41.970><c> to</c><00:25:41.999><c> you</c>

00:25:42.229 --> 00:25:42.239 align:start position:0%
touch the file system so it's up to you
 

00:25:42.239 --> 00:25:43.700 align:start position:0%
touch the file system so it's up to you
to<00:25:42.269><c> read</c><00:25:42.600><c> and</c><00:25:42.749><c> write</c><00:25:42.869><c> the</c><00:25:43.080><c> data</c><00:25:43.230><c> to</c><00:25:43.499><c> and</c><00:25:43.679><c> from</c>

00:25:43.700 --> 00:25:43.710 align:start position:0%
to read and write the data to and from
 

00:25:43.710 --> 00:25:50.690 align:start position:0%
to read and write the data to and from
whatever<00:25:44.369><c> file</c><00:25:44.850><c> you're</c><00:25:45.389><c> taking</c><00:25:45.749><c> it</c><00:25:45.869><c> from</c><00:25:49.700><c> so</c>

00:25:50.690 --> 00:25:50.700 align:start position:0%
whatever file you're taking it from so
 

00:25:50.700 --> 00:25:53.269 align:start position:0%
whatever file you're taking it from so
why<00:25:51.570><c> are</c><00:25:52.049><c> the</c><00:25:52.289><c> properties</c><00:25:52.679><c> why</c><00:25:52.980><c> does</c><00:25:53.159><c> this</c>

00:25:53.269 --> 00:25:53.279 align:start position:0%
why are the properties why does this
 

00:25:53.279 --> 00:25:56.239 align:start position:0%
why are the properties why does this
make<00:25:53.460><c> property</c><00:25:53.879><c> list</c><00:25:54.059><c> useful</c><00:25:54.830><c> it's</c><00:25:55.830><c> useful</c>

00:25:56.239 --> 00:25:56.249 align:start position:0%
make property list useful it's useful
 

00:25:56.249 --> 00:25:58.639 align:start position:0%
make property list useful it's useful
because<00:25:56.399><c> property</c><00:25:57.090><c> lists</c><00:25:57.359><c> are</c><00:25:57.509><c> very</c><00:25:58.320><c> easy</c><00:25:58.529><c> to</c>

00:25:58.639 --> 00:25:58.649 align:start position:0%
because property lists are very easy to
 

00:25:58.649 --> 00:26:02.419 align:start position:0%
because property lists are very easy to
program<00:25:59.570><c> they're</c><00:26:00.570><c> small</c><00:26:00.960><c> they're</c><00:26:01.799><c> very</c><00:26:02.220><c> very</c>

00:26:02.419 --> 00:26:02.429 align:start position:0%
program they're small they're very very
 

00:26:02.429 --> 00:26:04.399 align:start position:0%
program they're small they're very very
flexible<00:26:03.119><c> you</c><00:26:03.210><c> know</c><00:26:03.269><c> just</c><00:26:03.570><c> if</c><00:26:03.840><c> you</c><00:26:03.989><c> need</c><00:26:04.169><c> a</c><00:26:04.200><c> new</c>

00:26:04.399 --> 00:26:04.409 align:start position:0%
flexible you know just if you need a new
 

00:26:04.409 --> 00:26:06.619 align:start position:0%
flexible you know just if you need a new
if<00:26:05.009><c> you</c><00:26:05.399><c> need</c><00:26:05.549><c> to</c><00:26:05.639><c> represent</c><00:26:05.909><c> new</c><00:26:06.179><c> data</c><00:26:06.389><c> just</c>

00:26:06.619 --> 00:26:06.629 align:start position:0%
if you need to represent new data just
 

00:26:06.629 --> 00:26:08.299 align:start position:0%
if you need to represent new data just
hack<00:26:06.840><c> another</c><00:26:07.139><c> object</c><00:26:07.350><c> onto</c><00:26:07.740><c> the</c><00:26:07.950><c> end</c><00:26:08.070><c> of</c><00:26:08.220><c> the</c>

00:26:08.299 --> 00:26:08.309 align:start position:0%
hack another object onto the end of the
 

00:26:08.309 --> 00:26:10.850 align:start position:0%
hack another object onto the end of the
array<00:26:08.429><c> or</c><00:26:08.730><c> create</c><00:26:09.090><c> a</c><00:26:09.119><c> new</c><00:26:09.210><c> string</c><00:26:09.659><c> and</c>

00:26:10.850 --> 00:26:10.860 align:start position:0%
array or create a new string and
 

00:26:10.860 --> 00:26:12.620 align:start position:0%
array or create a new string and
as<00:26:10.920><c> I</c><00:26:11.010><c> said</c><00:26:11.070><c> they're</c><00:26:11.429><c> persistent</c><00:26:11.820><c> the</c><00:26:12.210><c> API</c><00:26:12.510><c> for</c>

00:26:12.620 --> 00:26:12.630 align:start position:0%
as I said they're persistent the API for
 

00:26:12.630 --> 00:26:16.310 align:start position:0%
as I said they're persistent the API for
persistency<00:26:13.440><c> is</c><00:26:13.500><c> very</c><00:26:13.740><c> straightforward</c><00:26:15.320><c> so</c>

00:26:16.310 --> 00:26:16.320 align:start position:0%
persistency is very straightforward so
 

00:26:16.320 --> 00:26:18.830 align:start position:0%
persistency is very straightforward so
if<00:26:17.250><c> you</c><00:26:17.490><c> ever</c><00:26:17.610><c> find</c><00:26:17.880><c> yourself</c><00:26:18.030><c> needing</c><00:26:18.570><c> a</c>

00:26:18.830 --> 00:26:18.840 align:start position:0%
if you ever find yourself needing a
 

00:26:18.840 --> 00:26:21.289 align:start position:0%
if you ever find yourself needing a
small<00:26:19.200><c> flexible</c><00:26:19.770><c> data</c><00:26:20.040><c> format</c><00:26:20.610><c> of</c><00:26:20.790><c> some</c><00:26:21.030><c> time</c>

00:26:21.289 --> 00:26:21.299 align:start position:0%
small flexible data format of some time
 

00:26:21.299 --> 00:26:23.750 align:start position:0%
small flexible data format of some time
try<00:26:22.080><c> out</c><00:26:22.230><c> CF</c><00:26:22.559><c> property</c><00:26:23.010><c> list</c><00:26:23.190><c> see</c><00:26:23.460><c> if</c><00:26:23.490><c> it'll</c>

00:26:23.750 --> 00:26:23.760 align:start position:0%
try out CF property list see if it'll
 

00:26:23.760 --> 00:26:26.830 align:start position:0%
try out CF property list see if it'll
manage<00:26:24.090><c> your</c><00:26:24.299><c> needs</c><00:26:24.679><c> the</c><00:26:25.679><c> one</c><00:26:25.860><c> caveat</c><00:26:26.100><c> here</c><00:26:26.670><c> is</c>

00:26:26.830 --> 00:26:26.840 align:start position:0%
manage your needs the one caveat here is
 

00:26:26.840 --> 00:26:29.210 align:start position:0%
manage your needs the one caveat here is
property<00:26:27.840><c> lists</c><00:26:28.110><c> are</c><00:26:28.260><c> not</c><00:26:28.590><c> useful</c><00:26:28.890><c> as</c><00:26:29.190><c> a</c>

00:26:29.210 --> 00:26:29.220 align:start position:0%
property lists are not useful as a
 

00:26:29.220 --> 00:26:30.830 align:start position:0%
property lists are not useful as a
general<00:26:29.640><c> database</c><00:26:29.760><c> it</c><00:26:30.240><c> does</c><00:26:30.360><c> not</c><00:26:30.510><c> scale</c><00:26:30.780><c> well</c>

00:26:30.830 --> 00:26:30.840 align:start position:0%
general database it does not scale well
 

00:26:30.840 --> 00:26:32.960 align:start position:0%
general database it does not scale well
and<00:26:31.230><c> that's</c><00:26:31.350><c> because</c><00:26:31.530><c> XML</c><00:26:32.100><c> is</c><00:26:32.130><c> a</c><00:26:32.280><c> serialized</c>

00:26:32.960 --> 00:26:32.970 align:start position:0%
and that's because XML is a serialized
 

00:26:32.970 --> 00:26:34.940 align:start position:0%
and that's because XML is a serialized
data<00:26:33.210><c> representation</c><00:26:34.170><c> so</c><00:26:34.679><c> there's</c><00:26:34.830><c> no</c>

00:26:34.940 --> 00:26:34.950 align:start position:0%
data representation so there's no
 

00:26:34.950 --> 00:26:36.710 align:start position:0%
data representation so there's no
ability<00:26:35.340><c> to</c><00:26:35.460><c> scan</c><00:26:35.670><c> into</c><00:26:36.000><c> the</c><00:26:36.240><c> middle</c><00:26:36.540><c> and</c>

00:26:36.710 --> 00:26:36.720 align:start position:0%
ability to scan into the middle and
 

00:26:36.720 --> 00:26:42.080 align:start position:0%
ability to scan into the middle and
locate<00:26:37.290><c> an</c><00:26:37.440><c> object</c><00:26:37.830><c> out</c><00:26:37.950><c> of</c><00:26:38.070><c> the</c><00:26:38.130><c> middle</c><00:26:41.090><c> so</c>

00:26:42.080 --> 00:26:42.090 align:start position:0%
locate an object out of the middle so
 

00:26:42.090 --> 00:26:44.060 align:start position:0%
locate an object out of the middle so
for<00:26:42.299><c> example</c><00:26:42.420><c> if</c><00:26:42.960><c> you</c><00:26:43.110><c> look</c><00:26:43.290><c> in</c><00:26:43.410><c> Mac</c><00:26:43.559><c> OS</c><00:26:43.590><c> 10</c>

00:26:44.060 --> 00:26:44.070 align:start position:0%
for example if you look in Mac OS 10
 

00:26:44.070 --> 00:26:45.980 align:start position:0%
for example if you look in Mac OS 10
where<00:26:44.309><c> we</c><00:26:44.460><c> use</c><00:26:44.669><c> property</c><00:26:45.150><c> lists</c><00:26:45.450><c> ourselves</c>

00:26:45.980 --> 00:26:45.990 align:start position:0%
where we use property lists ourselves
 

00:26:45.990 --> 00:26:49.610 align:start position:0%
where we use property lists ourselves
you'll<00:26:46.950><c> find</c><00:26:47.190><c> them</c><00:26:47.460><c> in</c><00:26:47.610><c> small</c><00:26:48.620><c> configuration</c>

00:26:49.610 --> 00:26:49.620 align:start position:0%
you'll find them in small configuration
 

00:26:49.620 --> 00:26:52.520 align:start position:0%
you'll find them in small configuration
files<00:26:49.860><c> all</c><00:26:50.070><c> over</c><00:26:50.340><c> the</c><00:26:50.429><c> place</c><00:26:50.929><c> we</c><00:26:51.929><c> use</c><00:26:52.140><c> them</c><00:26:52.380><c> to</c>

00:26:52.520 --> 00:26:52.530 align:start position:0%
files all over the place we use them to
 

00:26:52.530 --> 00:26:55.100 align:start position:0%
files all over the place we use them to
configure<00:26:52.950><c> applications</c><00:26:53.760><c> and</c><00:26:54.059><c> provide</c><00:26:54.870><c> much</c>

00:26:55.100 --> 00:26:55.110 align:start position:0%
configure applications and provide much
 

00:26:55.110 --> 00:26:56.630 align:start position:0%
configure applications and provide much
of<00:26:55.290><c> the</c><00:26:55.380><c> information</c><00:26:55.590><c> that</c><00:26:55.890><c> find</c><00:26:56.250><c> your</c><00:26:56.460><c> needs</c>

00:26:56.630 --> 00:26:56.640 align:start position:0%
of the information that find your needs
 

00:26:56.640 --> 00:26:59.200 align:start position:0%
of the information that find your needs
for<00:26:56.880><c> instance</c><00:26:57.299><c> when</c><00:26:57.480><c> viewing</c><00:26:57.750><c> an</c><00:26:57.990><c> app</c><00:26:58.140><c> package</c>

00:26:59.200 --> 00:26:59.210 align:start position:0%
for instance when viewing an app package
 

00:26:59.210 --> 00:27:01.909 align:start position:0%
for instance when viewing an app package
plugins<00:27:00.210><c> use</c><00:27:00.450><c> configuration</c><00:27:01.230><c> files</c><00:27:01.530><c> to</c>

00:27:01.909 --> 00:27:01.919 align:start position:0%
plugins use configuration files to
 

00:27:01.919 --> 00:27:05.120 align:start position:0%
plugins use configuration files to
announce<00:27:02.250><c> their</c><00:27:02.880><c> API</c><00:27:03.210><c> as</c><00:27:03.720><c> well</c><00:27:04.049><c> as</c><00:27:04.169><c> announcing</c>

00:27:05.120 --> 00:27:05.130 align:start position:0%
announce their API as well as announcing
 

00:27:05.130 --> 00:27:08.390 align:start position:0%
announce their API as well as announcing
how<00:27:05.280><c> they</c><00:27:05.820><c> fulfill</c><00:27:06.270><c> the</c><00:27:06.450><c> API</c><00:27:07.250><c> there</c><00:27:08.250><c> are</c><00:27:08.340><c> a</c>

00:27:08.390 --> 00:27:08.400 align:start position:0%
how they fulfill the API there are a
 

00:27:08.400 --> 00:27:10.520 align:start position:0%
how they fulfill the API there are a
number<00:27:08.429><c> of</c><00:27:08.669><c> small</c><00:27:09.120><c> system</c><00:27:09.750><c> eunuch</c><00:27:10.110><c> see</c><00:27:10.260><c> kind</c>

00:27:10.520 --> 00:27:10.530 align:start position:0%
number of small system eunuch see kind
 

00:27:10.530 --> 00:27:12.950 align:start position:0%
number of small system eunuch see kind
of<00:27:10.620><c> parameter</c><00:27:11.580><c> configuration</c><00:27:12.360><c> files</c><00:27:12.630><c> that</c>

00:27:12.950 --> 00:27:12.960 align:start position:0%
of parameter configuration files that
 

00:27:12.960 --> 00:27:14.930 align:start position:0%
of parameter configuration files that
are<00:27:13.049><c> that</c><00:27:13.350><c> have</c><00:27:13.410><c> been</c><00:27:13.919><c> migrated</c><00:27:14.429><c> to</c><00:27:14.520><c> property</c>

00:27:14.930 --> 00:27:14.940 align:start position:0%
are that have been migrated to property
 

00:27:14.940 --> 00:27:17.930 align:start position:0%
are that have been migrated to property
lists<00:27:15.740><c> we</c><00:27:16.740><c> also</c><00:27:16.890><c> use</c><00:27:17.280><c> them</c><00:27:17.490><c> for</c><00:27:17.700><c> the</c><00:27:17.790><c> user</c>

00:27:17.930 --> 00:27:17.940 align:start position:0%
lists we also use them for the user
 

00:27:17.940 --> 00:27:20.090 align:start position:0%
lists we also use them for the user
preferences<00:27:18.630><c> on</c><00:27:18.780><c> the</c><00:27:18.929><c> system</c><00:27:19.410><c> user</c>

00:27:20.090 --> 00:27:20.100 align:start position:0%
preferences on the system user
 

00:27:20.100 --> 00:27:21.980 align:start position:0%
preferences on the system user
preferences<00:27:20.610><c> the</c><00:27:20.790><c> classic</c><00:27:21.240><c> example</c><00:27:21.750><c> of</c><00:27:21.809><c> where</c>

00:27:21.980 --> 00:27:21.990 align:start position:0%
preferences the classic example of where
 

00:27:21.990 --> 00:27:24.680 align:start position:0%
preferences the classic example of where
we<00:27:22.140><c> don't</c><00:27:22.290><c> know</c><00:27:22.620><c> what</c><00:27:23.220><c> information</c><00:27:23.940><c> what</c>

00:27:24.680 --> 00:27:24.690 align:start position:0%
we don't know what information what
 

00:27:24.690 --> 00:27:26.780 align:start position:0%
we don't know what information what
information<00:27:25.049><c> a</c><00:27:25.530><c> given</c><00:27:25.799><c> application</c><00:27:25.919><c> needs</c><00:27:26.610><c> to</c>

00:27:26.780 --> 00:27:26.790 align:start position:0%
information a given application needs to
 

00:27:26.790 --> 00:27:29.299 align:start position:0%
information a given application needs to
store<00:27:27.179><c> but</c><00:27:28.080><c> we</c><00:27:28.230><c> do</c><00:27:28.380><c> know</c><00:27:28.590><c> that</c><00:27:28.620><c> it's</c><00:27:28.890><c> likely</c><00:27:29.220><c> to</c>

00:27:29.299 --> 00:27:29.309 align:start position:0%
store but we do know that it's likely to
 

00:27:29.309 --> 00:27:31.130 align:start position:0%
store but we do know that it's likely to
be<00:27:29.340><c> small</c><00:27:29.790><c> and</c><00:27:29.820><c> we</c><00:27:30.240><c> do</c><00:27:30.390><c> know</c><00:27:30.570><c> that</c><00:27:30.600><c> our</c><00:27:30.840><c> types</c>

00:27:31.130 --> 00:27:31.140 align:start position:0%
be small and we do know that our types
 

00:27:31.140 --> 00:27:34.669 align:start position:0%
be small and we do know that our types
are<00:27:31.380><c> likely</c><00:27:31.710><c> to</c><00:27:31.740><c> accommodate</c><00:27:32.400><c> them</c><00:27:33.679><c> the</c>

00:27:34.669 --> 00:27:34.679 align:start position:0%
are likely to accommodate them the
 

00:27:34.679 --> 00:27:37.549 align:start position:0%
are likely to accommodate them the
pasteboards<00:27:35.750><c> property</c><00:27:36.750><c> list</c><00:27:36.960><c> provides</c><00:27:37.350><c> a</c>

00:27:37.549 --> 00:27:37.559 align:start position:0%
pasteboards property list provides a
 

00:27:37.559 --> 00:27:40.010 align:start position:0%
pasteboards property list provides a
good<00:27:37.910><c> flexible</c><00:27:38.910><c> medium</c><00:27:39.510><c> for</c><00:27:39.900><c> communication</c>

00:27:40.010 --> 00:27:40.020 align:start position:0%
good flexible medium for communication
 

00:27:40.020 --> 00:27:41.990 align:start position:0%
good flexible medium for communication
on<00:27:40.650><c> the</c><00:27:40.679><c> pasteboard</c><00:27:41.280><c> we</c><00:27:41.429><c> use</c><00:27:41.549><c> it</c><00:27:41.669><c> there</c><00:27:41.850><c> as</c>

00:27:41.990 --> 00:27:42.000 align:start position:0%
on the pasteboard we use it there as
 

00:27:42.000 --> 00:27:44.270 align:start position:0%
on the pasteboard we use it there as
well<00:27:42.179><c> and</c><00:27:42.450><c> this</c><00:27:43.260><c> last</c><00:27:43.470><c> point</c><00:27:43.740><c> is</c><00:27:43.980><c> one</c><00:27:44.100><c> of</c><00:27:44.190><c> my</c>

00:27:44.270 --> 00:27:44.280 align:start position:0%
well and this last point is one of my
 

00:27:44.280 --> 00:27:48.560 align:start position:0%
well and this last point is one of my
favorites<00:27:46.700><c> so</c><00:27:47.700><c> you</c><00:27:47.760><c> need</c><00:27:48.000><c> to</c><00:27:48.120><c> deliver</c><00:27:48.360><c> an</c>

00:27:48.560 --> 00:27:48.570 align:start position:0%
favorites so you need to deliver an
 

00:27:48.570 --> 00:27:50.840 align:start position:0%
favorites so you need to deliver an
application<00:27:49.140><c> yesterday</c><00:27:49.460><c> you</c><00:27:50.460><c> might</c><00:27:50.640><c> well</c>

00:27:50.840 --> 00:27:50.850 align:start position:0%
application yesterday you might well
 

00:27:50.850 --> 00:27:52.730 align:start position:0%
application yesterday you might well
prototype<00:27:51.390><c> using</c><00:27:51.600><c> property</c><00:27:52.169><c> lists</c><00:27:52.470><c> as</c><00:27:52.559><c> your</c>

00:27:52.730 --> 00:27:52.740 align:start position:0%
prototype using property lists as your
 

00:27:52.740 --> 00:27:54.919 align:start position:0%
prototype using property lists as your
datastore<00:27:53.070><c> that</c><00:27:53.910><c> will</c><00:27:54.090><c> at</c><00:27:54.179><c> least</c><00:27:54.330><c> save</c><00:27:54.750><c> you</c>

00:27:54.919 --> 00:27:54.929 align:start position:0%
datastore that will at least save you
 

00:27:54.929 --> 00:27:56.600 align:start position:0%
datastore that will at least save you
the<00:27:55.049><c> burden</c><00:27:55.350><c> of</c><00:27:55.440><c> figuring</c><00:27:55.890><c> out</c><00:27:56.040><c> how</c><00:27:56.370><c> you're</c>

00:27:56.600 --> 00:27:56.610 align:start position:0%
the burden of figuring out how you're
 

00:27:56.610 --> 00:27:58.820 align:start position:0%
the burden of figuring out how you're
going<00:27:56.730><c> to</c><00:27:56.880><c> what</c><00:27:57.540><c> your</c><00:27:57.690><c> final</c><00:27:57.900><c> data</c><00:27:58.169><c> format</c><00:27:58.620><c> is</c>

00:27:58.820 --> 00:27:58.830 align:start position:0%
going to what your final data format is
 

00:27:58.830 --> 00:28:01.549 align:start position:0%
going to what your final data format is
and<00:27:59.100><c> we</c><00:27:59.490><c> found</c><00:27:59.520><c> it</c><00:27:59.820><c> remarkably</c><00:28:00.419><c> flexible</c><00:28:01.350><c> for</c>

00:28:01.549 --> 00:28:01.559 align:start position:0%
and we found it remarkably flexible for
 

00:28:01.559 --> 00:28:05.060 align:start position:0%
and we found it remarkably flexible for
doing<00:28:01.799><c> quick</c><00:28:02.010><c> prototyping</c><00:28:02.850><c> in</c><00:28:03.059><c> fact</c><00:28:03.929><c> the</c><00:28:04.169><c> the</c>

00:28:05.060 --> 00:28:05.070 align:start position:0%
doing quick prototyping in fact the the
 

00:28:05.070 --> 00:28:07.520 align:start position:0%
doing quick prototyping in fact the the
original<00:28:05.520><c> HTML</c><00:28:06.030><c> rendering</c><00:28:06.480><c> engine</c><00:28:07.169><c> in</c><00:28:07.350><c> the</c>

00:28:07.520 --> 00:28:07.530 align:start position:0%
original HTML rendering engine in the
 

00:28:07.530 --> 00:28:09.919 align:start position:0%
original HTML rendering engine in the
cocoa<00:28:07.830><c> framework</c><00:28:08.299><c> used</c><00:28:09.299><c> properly</c><00:28:09.660><c> lists</c>

00:28:09.919 --> 00:28:09.929 align:start position:0%
cocoa framework used properly lists
 

00:28:09.929 --> 00:28:15.710 align:start position:0%
cocoa framework used properly lists
entirely<00:28:10.470><c> for</c><00:28:10.679><c> its</c><00:28:10.799><c> backing</c><00:28:10.980><c> store</c><00:28:14.690><c> so</c><00:28:15.690><c> I</c>

00:28:15.710 --> 00:28:15.720 align:start position:0%
entirely for its backing store so I
 

00:28:15.720 --> 00:28:17.060 align:start position:0%
entirely for its backing store so I
mentioned<00:28:15.990><c> there</c><00:28:16.169><c> were</c><00:28:16.260><c> some</c><00:28:16.440><c> other</c><00:28:16.530><c> property</c>

00:28:17.060 --> 00:28:17.070 align:start position:0%
mentioned there were some other property
 

00:28:17.070 --> 00:28:20.540 align:start position:0%
mentioned there were some other property
list<00:28:17.250><c> types</c><00:28:18.110><c> these</c><00:28:19.110><c> are</c><00:28:19.320><c> very</c><00:28:19.500><c> simple</c><00:28:19.890><c> object</c>

00:28:20.540 --> 00:28:20.550 align:start position:0%
list types these are very simple object
 

00:28:20.550 --> 00:28:22.070 align:start position:0%
list types these are very simple object
wrappers<00:28:21.030><c> that</c><00:28:21.059><c> you</c><00:28:21.270><c> would</c><00:28:21.419><c> rarely</c><00:28:21.690><c> use</c>

00:28:22.070 --> 00:28:22.080 align:start position:0%
wrappers that you would rarely use
 

00:28:22.080 --> 00:28:23.480 align:start position:0%
wrappers that you would rarely use
except<00:28:22.500><c> that</c><00:28:22.650><c> you</c><00:28:22.800><c> need</c><00:28:23.010><c> to</c><00:28:23.190><c> store</c><00:28:23.429><c> a</c>

00:28:23.480 --> 00:28:23.490 align:start position:0%
except that you need to store a
 

00:28:23.490 --> 00:28:24.600 align:start position:0%
except that you need to store a
particular<00:28:24.059><c> kind</c><00:28:24.270><c> of</c>

00:28:24.600 --> 00:28:24.610 align:start position:0%
particular kind of
 

00:28:24.610 --> 00:28:28.260 align:start position:0%
particular kind of
value<00:28:24.940><c> in</c><00:28:25.150><c> a</c><00:28:25.240><c> property</c><00:28:25.660><c> list</c><00:28:26.820><c> the</c><00:28:27.820><c> three</c><00:28:28.059><c> most</c>

00:28:28.260 --> 00:28:28.270 align:start position:0%
value in a property list the three most
 

00:28:28.270 --> 00:28:31.230 align:start position:0%
value in a property list the three most
common<00:28:28.390><c> are</c><00:28:28.840><c> listed</c><00:28:29.170><c> here</c><00:28:29.200><c> CF</c><00:28:29.950><c> date</c><00:28:30.309><c> wraps</c>

00:28:31.230 --> 00:28:31.240 align:start position:0%
common are listed here CF date wraps
 

00:28:31.240 --> 00:28:35.160 align:start position:0%
common are listed here CF date wraps
asst<00:28:31.510><c> wraps</c><00:28:32.440><c> a</c><00:28:32.650><c> date</c><00:28:32.860><c> or</c><00:28:33.070><c> time</c><00:28:33.630><c> CF</c><00:28:34.630><c> number</c><00:28:35.020><c> and</c>

00:28:35.160 --> 00:28:35.170 align:start position:0%
asst wraps a date or time CF number and
 

00:28:35.170 --> 00:28:37.620 align:start position:0%
asst wraps a date or time CF number and
CF<00:28:35.440><c> boolean</c><00:28:35.920><c> wrap</c><00:28:36.130><c> simple</c><00:28:36.730><c> numeric</c><00:28:37.240><c> values</c>

00:28:37.620 --> 00:28:37.630 align:start position:0%
CF boolean wrap simple numeric values
 

00:28:37.630 --> 00:28:39.180 align:start position:0%
CF boolean wrap simple numeric values
and<00:28:37.840><c> again</c><00:28:38.080><c> we're</c><00:28:38.260><c> not</c><00:28:38.380><c> suggesting</c><00:28:38.590><c> that</c><00:28:39.070><c> you</c>

00:28:39.180 --> 00:28:39.190 align:start position:0%
and again we're not suggesting that you
 

00:28:39.190 --> 00:28:41.340 align:start position:0%
and again we're not suggesting that you
use<00:28:39.429><c> this</c><00:28:39.640><c> in</c><00:28:39.850><c> place</c><00:28:40.059><c> of</c><00:28:40.090><c> a</c><00:28:40.330><c> raw</c><00:28:40.510><c> integer</c><00:28:41.080><c> or</c><00:28:41.140><c> a</c>

00:28:41.340 --> 00:28:41.350 align:start position:0%
use this in place of a raw integer or a
 

00:28:41.350 --> 00:28:44.460 align:start position:0%
use this in place of a raw integer or a
raw<00:28:41.620><c> boolean</c><00:28:42.570><c> rather</c><00:28:43.570><c> when</c><00:28:43.840><c> you</c><00:28:43.990><c> find</c><00:28:44.260><c> you</c>

00:28:44.460 --> 00:28:44.470 align:start position:0%
raw boolean rather when you find you
 

00:28:44.470 --> 00:28:46.410 align:start position:0%
raw boolean rather when you find you
need<00:28:44.710><c> to</c><00:28:44.920><c> store</c><00:28:45.190><c> such</c><00:28:45.429><c> a</c><00:28:45.460><c> value</c><00:28:45.820><c> in</c><00:28:45.970><c> a</c><00:28:46.030><c> property</c>

00:28:46.410 --> 00:28:46.420 align:start position:0%
need to store such a value in a property
 

00:28:46.420 --> 00:28:48.510 align:start position:0%
need to store such a value in a property
list<00:28:46.720><c> these</c><00:28:47.140><c> rappers</c><00:28:47.620><c> are</c><00:28:47.770><c> available</c><00:28:48.250><c> to</c><00:28:48.370><c> do</c>

00:28:48.510 --> 00:28:48.520 align:start position:0%
list these rappers are available to do
 

00:28:48.520 --> 00:28:57.320 align:start position:0%
list these rappers are available to do
that<00:28:50.640><c> ok</c><00:28:53.160><c> debugging</c><00:28:54.160><c> and</c><00:28:54.220><c> getting</c><00:28:54.580><c> help</c><00:28:54.820><c> I</c>

00:28:57.320 --> 00:28:57.330 align:start position:0%
 
 

00:28:57.330 --> 00:28:59.610 align:start position:0%
 
mentioned<00:28:58.330><c> earlier</c><00:28:58.419><c> that</c><00:28:58.660><c> there</c><00:28:58.960><c> is</c><00:28:59.110><c> a</c><00:28:59.140><c> debug</c>

00:28:59.610 --> 00:28:59.620 align:start position:0%
mentioned earlier that there is a debug
 

00:28:59.620 --> 00:29:01.590 align:start position:0%
mentioned earlier that there is a debug
library<00:29:00.220><c> available</c><00:29:00.640><c> inside</c><00:29:01.270><c> of</c><00:29:01.450><c> course</c>

00:29:01.590 --> 00:29:01.600 align:start position:0%
library available inside of course
 

00:29:01.600 --> 00:29:04.890 align:start position:0%
library available inside of course
foundation<00:29:02.730><c> what</c><00:29:03.730><c> the</c><00:29:03.850><c> debug</c><00:29:04.150><c> library</c><00:29:04.630><c> adds</c>

00:29:04.890 --> 00:29:04.900 align:start position:0%
foundation what the debug library adds
 

00:29:04.900 --> 00:29:07.830 align:start position:0%
foundation what the debug library adds
is<00:29:05.320><c> a</c><00:29:05.350><c> number</c><00:29:05.710><c> of</c><00:29:05.799><c> extra</c><00:29:06.190><c> assertions</c><00:29:06.840><c> argument</c>

00:29:07.830 --> 00:29:07.840 align:start position:0%
is a number of extra assertions argument
 

00:29:07.840 --> 00:29:10.230 align:start position:0%
is a number of extra assertions argument
checking<00:29:08.200><c> that</c><00:29:08.410><c> kind</c><00:29:08.710><c> of</c><00:29:08.770><c> thing</c><00:29:09.010><c> and</c><00:29:09.280><c> what</c>

00:29:10.230 --> 00:29:10.240 align:start position:0%
checking that kind of thing and what
 

00:29:10.240 --> 00:29:11.760 align:start position:0%
checking that kind of thing and what
happens<00:29:10.660><c> is</c><00:29:10.900><c> as</c><00:29:11.049><c> soon</c><00:29:11.260><c> as</c><00:29:11.380><c> one</c><00:29:11.559><c> of</c><00:29:11.590><c> those</c>

00:29:11.760 --> 00:29:11.770 align:start position:0%
happens is as soon as one of those
 

00:29:11.770 --> 00:29:14.039 align:start position:0%
happens is as soon as one of those
assertions<00:29:12.130><c> finds</c><00:29:12.760><c> an</c><00:29:13.030><c> invalid</c><00:29:13.540><c> argument</c>

00:29:14.039 --> 00:29:14.049 align:start position:0%
assertions finds an invalid argument
 

00:29:14.049 --> 00:29:16.110 align:start position:0%
assertions finds an invalid argument
it's<00:29:14.679><c> going</c><00:29:14.919><c> to</c><00:29:15.010><c> log</c><00:29:15.190><c> an</c><00:29:15.370><c> error</c><00:29:15.549><c> and</c><00:29:15.820><c> abort</c>

00:29:16.110 --> 00:29:16.120 align:start position:0%
it's going to log an error and abort
 

00:29:16.120 --> 00:29:17.640 align:start position:0%
it's going to log an error and abort
your<00:29:16.150><c> program</c><00:29:16.720><c> that's</c><00:29:17.140><c> going</c><00:29:17.230><c> to</c><00:29:17.410><c> make</c><00:29:17.500><c> it</c>

00:29:17.640 --> 00:29:17.650 align:start position:0%
your program that's going to make it
 

00:29:17.650 --> 00:29:20.100 align:start position:0%
your program that's going to make it
much<00:29:17.950><c> easier</c><00:29:18.220><c> to</c><00:29:18.580><c> isolate</c><00:29:19.120><c> the</c><00:29:19.299><c> problem</c><00:29:19.570><c> find</c>

00:29:20.100 --> 00:29:20.110 align:start position:0%
much easier to isolate the problem find
 

00:29:20.110 --> 00:29:22.620 align:start position:0%
much easier to isolate the problem find
the<00:29:20.230><c> change</c><00:29:20.410><c> get</c><00:29:20.740><c> a</c><00:29:20.770><c> good</c><00:29:20.950><c> back</c><00:29:21.130><c> trace</c><00:29:21.429><c> and</c><00:29:21.730><c> we</c>

00:29:22.620 --> 00:29:22.630 align:start position:0%
the change get a good back trace and we
 

00:29:22.630 --> 00:29:24.450 align:start position:0%
the change get a good back trace and we
found<00:29:22.870><c> that</c><00:29:23.049><c> many</c><00:29:23.410><c> of</c><00:29:23.620><c> the</c><00:29:23.650><c> most</c><00:29:23.980><c> common</c>

00:29:24.450 --> 00:29:24.460 align:start position:0%
found that many of the most common
 

00:29:24.460 --> 00:29:28.080 align:start position:0%
found that many of the most common
programming<00:29:24.970><c> errors</c><00:29:25.510><c> in</c><00:29:26.190><c> we</c><00:29:27.190><c> see</c><00:29:27.460><c> with</c><00:29:27.850><c> core</c>

00:29:28.080 --> 00:29:28.090 align:start position:0%
programming errors in we see with core
 

00:29:28.090 --> 00:29:29.820 align:start position:0%
programming errors in we see with core
foundation<00:29:28.630><c> can</c><00:29:28.870><c> be</c><00:29:29.049><c> caught</c><00:29:29.290><c> this</c><00:29:29.530><c> way</c><00:29:29.770><c> so</c>

00:29:29.820 --> 00:29:29.830 align:start position:0%
foundation can be caught this way so
 

00:29:29.830 --> 00:29:32.940 align:start position:0%
foundation can be caught this way so
please<00:29:30.400><c> run</c><00:29:31.030><c> against</c><00:29:31.390><c> the</c><00:29:31.809><c> debug</c><00:29:32.140><c> library</c><00:29:32.710><c> as</c>

00:29:32.940 --> 00:29:32.950 align:start position:0%
please run against the debug library as
 

00:29:32.950 --> 00:29:36.810 align:start position:0%
please run against the debug library as
you<00:29:33.160><c> develop</c><00:29:33.340><c> core</c><00:29:33.730><c> foundation</c><00:29:34.270><c> code</c><00:29:35.820><c> I've</c>

00:29:36.810 --> 00:29:36.820 align:start position:0%
you develop core foundation code I've
 

00:29:36.820 --> 00:29:38.820 align:start position:0%
you develop core foundation code I've
also<00:29:37.240><c> put</c><00:29:37.480><c> a</c><00:29:37.540><c> list</c><00:29:37.750><c> here</c><00:29:37.840><c> of</c><00:29:38.020><c> the</c><00:29:38.200><c> most</c><00:29:38.380><c> common</c>

00:29:38.820 --> 00:29:38.830 align:start position:0%
also put a list here of the most common
 

00:29:38.830 --> 00:29:40.500 align:start position:0%
also put a list here of the most common
errors<00:29:39.220><c> in</c><00:29:39.460><c> programming</c><00:29:40.150><c> with</c><00:29:40.299><c> core</c>

00:29:40.500 --> 00:29:40.510 align:start position:0%
errors in programming with core
 

00:29:40.510 --> 00:29:43.650 align:start position:0%
errors in programming with core
foundation<00:29:41.610><c> passing</c><00:29:42.610><c> null</c><00:29:42.820><c> is</c><00:29:43.059><c> CF</c><00:29:43.450><c> type</c>

00:29:43.650 --> 00:29:43.660 align:start position:0%
foundation passing null is CF type
 

00:29:43.660 --> 00:29:46.169 align:start position:0%
foundation passing null is CF type
there's<00:29:43.990><c> a</c><00:29:44.049><c> classic</c><00:29:44.530><c> one</c><00:29:44.740><c> null</c><00:29:45.400><c> is</c><00:29:45.429><c> not</c><00:29:45.760><c> a</c><00:29:45.790><c> CF</c>

00:29:46.169 --> 00:29:46.179 align:start position:0%
there's a classic one null is not a CF
 

00:29:46.179 --> 00:29:48.240 align:start position:0%
there's a classic one null is not a CF
type<00:29:46.390><c> it</c><00:29:46.660><c> is</c><00:29:46.750><c> not</c><00:29:46.960><c> a</c><00:29:46.990><c> valid</c><00:29:47.230><c> argument</c><00:29:47.530><c> to</c><00:29:48.010><c> any</c>

00:29:48.240 --> 00:29:48.250 align:start position:0%
type it is not a valid argument to any
 

00:29:48.250 --> 00:29:51.419 align:start position:0%
type it is not a valid argument to any
of<00:29:48.700><c> them</c><00:29:48.880><c> any</c><00:29:49.150><c> of</c><00:29:49.600><c> the</c><00:29:49.780><c> pseudo</c><00:29:50.110><c> methods</c><00:29:50.590><c> inside</c>

00:29:51.419 --> 00:29:51.429 align:start position:0%
of them any of the pseudo methods inside
 

00:29:51.429 --> 00:29:56.430 align:start position:0%
of them any of the pseudo methods inside
of<00:29:51.610><c> core</c><00:29:51.820><c> foundation</c><00:29:54.840><c> another</c><00:29:55.840><c> common</c><00:29:56.140><c> error</c>

00:29:56.430 --> 00:29:56.440 align:start position:0%
of core foundation another common error
 

00:29:56.440 --> 00:29:58.680 align:start position:0%
of core foundation another common error
is<00:29:56.770><c> releasing</c><00:29:57.340><c> the</c><00:29:57.429><c> return</c><00:29:57.760><c> value</c><00:29:57.970><c> of</c><00:29:58.360><c> a</c><00:29:58.450><c> get</c>

00:29:58.680 --> 00:29:58.690 align:start position:0%
is releasing the return value of a get
 

00:29:58.690 --> 00:30:02.190 align:start position:0%
is releasing the return value of a get
function<00:29:59.320><c> you</c><00:29:59.950><c> call</c><00:30:00.160><c> CF</c><00:30:00.460><c> array</c><00:30:00.790><c> get</c><00:30:01.090><c> value</c><00:30:01.630><c> you</c>

00:30:02.190 --> 00:30:02.200 align:start position:0%
function you call CF array get value you
 

00:30:02.200 --> 00:30:04.260 align:start position:0%
function you call CF array get value you
never<00:30:02.440><c> got</c><00:30:02.650><c> a</c><00:30:02.710><c> reference</c><00:30:03.280><c> to</c><00:30:03.400><c> the</c><00:30:03.460><c> word</c><00:30:03.700><c> the</c>

00:30:04.260 --> 00:30:04.270 align:start position:0%
never got a reference to the word the
 

00:30:04.270 --> 00:30:06.180 align:start position:0%
never got a reference to the word the
function<00:30:04.600><c> includes</c><00:30:04.900><c> the</c><00:30:05.020><c> word</c><00:30:05.169><c> get</c><00:30:05.440><c> but</c><00:30:06.070><c> you</c>

00:30:06.180 --> 00:30:06.190 align:start position:0%
function includes the word get but you
 

00:30:06.190 --> 00:30:08.340 align:start position:0%
function includes the word get but you
release<00:30:06.490><c> it</c><00:30:06.520><c> anyway</c><00:30:07.150><c> well</c><00:30:07.720><c> sooner</c><00:30:08.049><c> or</c><00:30:08.080><c> later</c>

00:30:08.340 --> 00:30:08.350 align:start position:0%
release it anyway well sooner or later
 

00:30:08.350 --> 00:30:10.140 align:start position:0%
release it anyway well sooner or later
that<00:30:08.500><c> array</c><00:30:08.860><c> is</c><00:30:09.040><c> going</c><00:30:09.250><c> to</c><00:30:09.340><c> be</c><00:30:09.429><c> destroyed</c><00:30:09.549><c> or</c>

00:30:10.140 --> 00:30:10.150 align:start position:0%
that array is going to be destroyed or
 

00:30:10.150 --> 00:30:11.970 align:start position:0%
that array is going to be destroyed or
someone<00:30:10.510><c> else</c><00:30:10.690><c> is</c><00:30:10.870><c> going</c><00:30:11.110><c> to</c><00:30:11.169><c> remove</c><00:30:11.590><c> that</c>

00:30:11.970 --> 00:30:11.980 align:start position:0%
someone else is going to remove that
 

00:30:11.980 --> 00:30:14.100 align:start position:0%
someone else is going to remove that
value<00:30:12.370><c> from</c><00:30:12.549><c> the</c><00:30:12.700><c> array</c><00:30:12.940><c> at</c><00:30:13.150><c> that</c><00:30:13.630><c> point</c><00:30:13.900><c> the</c>

00:30:14.100 --> 00:30:14.110 align:start position:0%
value from the array at that point the
 

00:30:14.110 --> 00:30:15.600 align:start position:0%
value from the array at that point the
array<00:30:14.350><c> will</c><00:30:14.590><c> release</c><00:30:14.950><c> the</c><00:30:15.160><c> object</c><00:30:15.520><c> itself</c>

00:30:15.600 --> 00:30:15.610 align:start position:0%
array will release the object itself
 

00:30:15.610 --> 00:30:21.360 align:start position:0%
array will release the object itself
boom<00:30:16.450><c> memory</c><00:30:17.020><c> Smasher</c><00:30:19.679><c> the</c><00:30:20.679><c> other</c><00:30:20.830><c> half</c><00:30:21.160><c> of</c>

00:30:21.360 --> 00:30:21.370 align:start position:0%
boom memory Smasher the other half of
 

00:30:21.370 --> 00:30:23.460 align:start position:0%
boom memory Smasher the other half of
that<00:30:21.400><c> equation</c><00:30:21.790><c> is</c><00:30:22.179><c> failing</c><00:30:22.450><c> to</c><00:30:22.660><c> retain</c><00:30:23.140><c> the</c>

00:30:23.460 --> 00:30:23.470 align:start position:0%
that equation is failing to retain the
 

00:30:23.470 --> 00:30:25.919 align:start position:0%
that equation is failing to retain the
value<00:30:23.860><c> that</c><00:30:24.130><c> came</c><00:30:24.700><c> back</c><00:30:24.880><c> from</c><00:30:25.090><c> a</c><00:30:25.240><c> get</c><00:30:25.390><c> function</c>

00:30:25.919 --> 00:30:25.929 align:start position:0%
value that came back from a get function
 

00:30:25.929 --> 00:30:29.070 align:start position:0%
value that came back from a get function
so<00:30:26.740><c> once</c><00:30:26.950><c> again</c><00:30:27.070><c> you</c><00:30:27.850><c> get</c><00:30:28.030><c> a</c><00:30:28.059><c> value</c><00:30:28.299><c> out</c><00:30:28.630><c> of</c><00:30:28.660><c> CF</c>

00:30:29.070 --> 00:30:29.080 align:start position:0%
so once again you get a value out of CF
 

00:30:29.080 --> 00:30:32.970 align:start position:0%
so once again you get a value out of CF
array<00:30:29.320><c> using</c><00:30:29.559><c> CFRA</c><00:30:30.250><c> get</c><00:30:30.460><c> value</c><00:30:31.440><c> you</c><00:30:32.440><c> intend</c><00:30:32.830><c> to</c>

00:30:32.970 --> 00:30:32.980 align:start position:0%
array using CFRA get value you intend to
 

00:30:32.980 --> 00:30:35.070 align:start position:0%
array using CFRA get value you intend to
keep<00:30:33.160><c> that</c><00:30:33.220><c> value</c><00:30:33.790><c> pass</c><00:30:34.059><c> the</c><00:30:34.390><c> lifetime</c><00:30:34.870><c> of</c><00:30:34.900><c> the</c>

00:30:35.070 --> 00:30:35.080 align:start position:0%
keep that value pass the lifetime of the
 

00:30:35.080 --> 00:30:37.550 align:start position:0%
keep that value pass the lifetime of the
array<00:30:35.520><c> you</c><00:30:36.520><c> need</c><00:30:36.730><c> to</c><00:30:36.880><c> retain</c><00:30:37.179><c> it</c>

00:30:37.550 --> 00:30:37.560 align:start position:0%
array you need to retain it
 

00:30:37.560 --> 00:30:39.320 align:start position:0%
array you need to retain it
if<00:30:37.620><c> you</c><00:30:37.680><c> do</c><00:30:37.830><c> not</c><00:30:37.860><c> when</c><00:30:38.370><c> the</c><00:30:38.490><c> array</c><00:30:38.730><c> disappears</c>

00:30:39.320 --> 00:30:39.330 align:start position:0%
if you do not when the array disappears
 

00:30:39.330 --> 00:30:45.110 align:start position:0%
if you do not when the array disappears
so<00:30:39.630><c> does</c><00:30:39.810><c> your</c><00:30:39.960><c> object</c><00:30:42.710><c> okay</c><00:30:43.850><c> so</c><00:30:44.850><c> there</c><00:30:45.000><c> you</c>

00:30:45.110 --> 00:30:45.120 align:start position:0%
so does your object okay so there you
 

00:30:45.120 --> 00:30:46.490 align:start position:0%
so does your object okay so there you
are<00:30:45.150><c> in</c><00:30:45.330><c> a</c><00:30:45.390><c> debugging</c><00:30:45.690><c> session</c><00:30:46.020><c> you've</c><00:30:46.320><c> got</c><00:30:46.470><c> a</c>

00:30:46.490 --> 00:30:46.500 align:start position:0%
are in a debugging session you've got a
 

00:30:46.500 --> 00:30:48.170 align:start position:0%
are in a debugging session you've got a
CF<00:30:46.860><c> type</c><00:30:47.040><c> you</c><00:30:47.220><c> don't</c><00:30:47.430><c> know</c><00:30:47.550><c> what</c><00:30:47.730><c> it</c><00:30:47.820><c> is</c><00:30:47.970><c> and</c>

00:30:48.170 --> 00:30:48.180 align:start position:0%
CF type you don't know what it is and
 

00:30:48.180 --> 00:30:49.400 align:start position:0%
CF type you don't know what it is and
you're<00:30:48.270><c> trying</c><00:30:48.420><c> to</c><00:30:48.570><c> figure</c><00:30:48.810><c> out</c><00:30:48.870><c> what's</c><00:30:49.260><c> gone</c>

00:30:49.400 --> 00:30:49.410 align:start position:0%
you're trying to figure out what's gone
 

00:30:49.410 --> 00:30:53.090 align:start position:0%
you're trying to figure out what's gone
wrong<00:30:50.570><c> you</c><00:30:51.570><c> see</c><00:30:51.870><c> us</c><00:30:52.020><c> get</c><00:30:52.290><c> type</c><00:30:52.560><c> ID</c><00:30:52.800><c> to</c>

00:30:53.090 --> 00:30:53.100 align:start position:0%
wrong you see us get type ID to
 

00:30:53.100 --> 00:30:54.770 align:start position:0%
wrong you see us get type ID to
determine<00:30:53.550><c> the</c><00:30:53.640><c> class</c><00:30:53.910><c> of</c><00:30:54.150><c> the</c><00:30:54.210><c> object</c><00:30:54.660><c> you've</c>

00:30:54.770 --> 00:30:54.780 align:start position:0%
determine the class of the object you've
 

00:30:54.780 --> 00:30:57.440 align:start position:0%
determine the class of the object you've
got<00:30:54.990><c> you</c><00:30:55.530><c> can</c><00:30:55.740><c> compare</c><00:30:56.100><c> that</c><00:30:56.340><c> with</c><00:30:56.550><c> CF</c>

00:30:57.440 --> 00:30:57.450 align:start position:0%
got you can compare that with CF
 

00:30:57.450 --> 00:31:00.260 align:start position:0%
got you can compare that with CF
typename<00:30:57.990><c> get</c><00:30:58.620><c> type</c><00:30:58.860><c> ID</c><00:30:59.100><c> so</c><00:30:59.430><c> see</c><00:30:59.610><c> a</c><00:30:59.640><c> string</c><00:31:00.030><c> get</c>

00:31:00.260 --> 00:31:00.270 align:start position:0%
typename get type ID so see a string get
 

00:31:00.270 --> 00:31:02.210 align:start position:0%
typename get type ID so see a string get
type<00:31:00.450><c> ID</c><00:31:00.690><c> returns</c><00:31:01.170><c> the</c><00:31:01.380><c> type</c><00:31:01.560><c> ID</c><00:31:01.770><c> for</c><00:31:02.100><c> all</c>

00:31:02.210 --> 00:31:02.220 align:start position:0%
type ID returns the type ID for all
 

00:31:02.220 --> 00:31:04.940 align:start position:0%
type ID returns the type ID for all
strings<00:31:02.640><c> yes</c><00:31:03.030><c> array</c><00:31:03.300><c> get</c><00:31:03.600><c> type</c><00:31:03.780><c> ID</c><00:31:03.990><c> returns</c>

00:31:04.940 --> 00:31:04.950 align:start position:0%
strings yes array get type ID returns
 

00:31:04.950 --> 00:31:09.080 align:start position:0%
strings yes array get type ID returns
the<00:31:05.070><c> type</c><00:31:05.280><c> ID</c><00:31:05.490><c> for</c><00:31:05.760><c> all</c><00:31:05.850><c> arrays</c><00:31:07.250><c> CF</c><00:31:08.250><c> show</c><00:31:08.580><c> will</c>

00:31:09.080 --> 00:31:09.090 align:start position:0%
the type ID for all arrays CF show will
 

00:31:09.090 --> 00:31:11.630 align:start position:0%
the type ID for all arrays CF show will
print<00:31:09.390><c> out</c><00:31:09.540><c> any</c><00:31:09.870><c> CF</c><00:31:10.380><c> object</c><00:31:10.890><c> to</c><00:31:11.040><c> the</c><00:31:11.190><c> console</c>

00:31:11.630 --> 00:31:11.640 align:start position:0%
print out any CF object to the console
 

00:31:11.640 --> 00:31:13.490 align:start position:0%
print out any CF object to the console
or<00:31:11.850><c> wherever</c><00:31:12.180><c> standard</c><00:31:12.630><c> out</c><00:31:12.750><c> happens</c><00:31:13.170><c> to</c><00:31:13.350><c> be</c>

00:31:13.490 --> 00:31:13.500 align:start position:0%
or wherever standard out happens to be
 

00:31:13.500 --> 00:31:18.140 align:start position:0%
or wherever standard out happens to be
in<00:31:14.300><c> gdb</c><00:31:15.380><c> you</c><00:31:16.380><c> can</c><00:31:16.920><c> invoke</c><00:31:17.220><c> CF</c><00:31:17.520><c> show</c><00:31:17.730><c> directly</c>

00:31:18.140 --> 00:31:18.150 align:start position:0%
in gdb you can invoke CF show directly
 

00:31:18.150 --> 00:31:20.300 align:start position:0%
in gdb you can invoke CF show directly
from<00:31:18.300><c> within</c><00:31:18.450><c> a</c><00:31:18.630><c> break</c><00:31:18.810><c> point</c><00:31:19.110><c> very</c><00:31:19.830><c> useful</c>

00:31:20.300 --> 00:31:20.310 align:start position:0%
from within a break point very useful
 

00:31:20.310 --> 00:31:22.190 align:start position:0%
from within a break point very useful
for<00:31:20.340><c> looking</c><00:31:20.760><c> at</c><00:31:20.880><c> what</c><00:31:21.090><c> exactly</c><00:31:21.750><c> has</c><00:31:21.900><c> gotten</c>

00:31:22.190 --> 00:31:22.200 align:start position:0%
for looking at what exactly has gotten
 

00:31:22.200 --> 00:31:25.250 align:start position:0%
for looking at what exactly has gotten
into<00:31:22.320><c> your</c><00:31:22.560><c> string</c><00:31:23.300><c> if</c><00:31:24.300><c> you</c><00:31:24.540><c> would</c><00:31:24.690><c> rather</c><00:31:24.870><c> get</c>

00:31:25.250 --> 00:31:25.260 align:start position:0%
into your string if you would rather get
 

00:31:25.260 --> 00:31:28.130 align:start position:0%
into your string if you would rather get
that<00:31:25.500><c> that</c><00:31:26.010><c> information</c><00:31:26.550><c> into</c><00:31:27.060><c> memory</c><00:31:27.510><c> UCF</c>

00:31:28.130 --> 00:31:28.140 align:start position:0%
that that information into memory UCF
 

00:31:28.140 --> 00:31:29.900 align:start position:0%
that that information into memory UCF
copy<00:31:28.410><c> description</c><00:31:29.100><c> it</c><00:31:29.310><c> will</c><00:31:29.640><c> give</c><00:31:29.790><c> you</c>

00:31:29.900 --> 00:31:29.910 align:start position:0%
copy description it will give you
 

00:31:29.910 --> 00:31:32.240 align:start position:0%
copy description it will give you
exactly<00:31:30.360><c> the</c><00:31:30.540><c> same</c><00:31:30.720><c> output</c><00:31:31.290><c> but</c><00:31:31.710><c> stored</c><00:31:32.040><c> in</c><00:31:32.160><c> a</c>

00:31:32.240 --> 00:31:32.250 align:start position:0%
exactly the same output but stored in a
 

00:31:32.250 --> 00:31:34.340 align:start position:0%
exactly the same output but stored in a
CF<00:31:32.550><c> string</c><00:31:32.940><c> so</c><00:31:33.180><c> you</c><00:31:33.240><c> can</c><00:31:33.540><c> if</c><00:31:33.690><c> you</c><00:31:33.870><c> want</c><00:31:34.020><c> right</c>

00:31:34.340 --> 00:31:34.350 align:start position:0%
CF string so you can if you want right
 

00:31:34.350 --> 00:31:40.000 align:start position:0%
CF string so you can if you want right
it's<00:31:34.530><c> a</c><00:31:34.620><c> file</c><00:31:34.860><c> look</c><00:31:35.100><c> at</c><00:31:35.220><c> it</c><00:31:35.340><c> later</c><00:31:35.520><c> whatever</c>

00:31:40.000 --> 00:31:40.010 align:start position:0%
 
 

00:31:40.010 --> 00:31:42.260 align:start position:0%
 
tracking<00:31:41.010><c> memory</c><00:31:41.340><c> problems</c><00:31:41.820><c> that</c><00:31:42.000><c> occur</c><00:31:42.240><c> in</c>

00:31:42.260 --> 00:31:42.270 align:start position:0%
tracking memory problems that occur in
 

00:31:42.270 --> 00:31:44.900 align:start position:0%
tracking memory problems that occur in
the<00:31:42.540><c> system</c><00:31:43.050><c> CF</c><00:31:43.860><c> get</c><00:31:44.040><c> retain</c><00:31:44.400><c> counts</c><00:31:44.820><c> will</c>

00:31:44.900 --> 00:31:44.910 align:start position:0%
the system CF get retain counts will
 

00:31:44.910 --> 00:31:46.520 align:start position:0%
the system CF get retain counts will
always<00:31:45.300><c> return</c><00:31:45.840><c> the</c><00:31:46.050><c> current</c><00:31:46.320><c> reference</c>

00:31:46.520 --> 00:31:46.530 align:start position:0%
always return the current reference
 

00:31:46.530 --> 00:31:48.470 align:start position:0%
always return the current reference
count<00:31:46.920><c> of</c><00:31:47.130><c> an</c><00:31:47.220><c> object</c><00:31:47.700><c> you</c><00:31:47.820><c> can</c><00:31:48.000><c> use</c><00:31:48.210><c> that</c><00:31:48.420><c> to</c>

00:31:48.470 --> 00:31:48.480 align:start position:0%
count of an object you can use that to
 

00:31:48.480 --> 00:31:50.140 align:start position:0%
count of an object you can use that to
make<00:31:48.750><c> sure</c><00:31:48.960><c> that</c><00:31:49.170><c> the</c><00:31:49.260><c> reference</c><00:31:49.560><c> count</c><00:31:49.860><c> is</c>

00:31:50.140 --> 00:31:50.150 align:start position:0%
make sure that the reference count is
 

00:31:50.150 --> 00:31:52.370 align:start position:0%
make sure that the reference count is
incrementing<00:31:51.150><c> or</c><00:31:51.330><c> decrementing</c><00:31:51.390><c> as</c><00:31:52.200><c> you</c>

00:31:52.370 --> 00:31:52.380 align:start position:0%
incrementing or decrementing as you
 

00:31:52.380 --> 00:31:56.570 align:start position:0%
incrementing or decrementing as you
expect<00:31:53.960><c> you</c><00:31:54.960><c> can</c><00:31:55.200><c> install</c><00:31:55.620><c> a</c><00:31:55.680><c> custom</c><00:31:55.980><c> default</c>

00:31:56.570 --> 00:31:56.580 align:start position:0%
expect you can install a custom default
 

00:31:56.580 --> 00:31:58.700 align:start position:0%
expect you can install a custom default
allocator<00:31:57.120><c> and</c><00:31:57.420><c> use</c><00:31:57.570><c> that</c><00:31:57.600><c> to</c><00:31:57.870><c> locate</c><00:31:58.410><c> leaks</c>

00:31:58.700 --> 00:31:58.710 align:start position:0%
allocator and use that to locate leaks
 

00:31:58.710 --> 00:32:01.880 align:start position:0%
allocator and use that to locate leaks
and<00:31:58.980><c> memory</c><00:31:59.340><c> corruption</c><00:31:59.520><c> and</c><00:32:00.650><c> finally</c><00:32:01.650><c> if</c><00:32:01.770><c> you</c>

00:32:01.880 --> 00:32:01.890 align:start position:0%
and memory corruption and finally if you
 

00:32:01.890 --> 00:32:04.040 align:start position:0%
and memory corruption and finally if you
look<00:32:02.130><c> on</c><00:32:02.340><c> a</c><00:32:02.400><c> vp</c><00:32:03.060><c> for</c><00:32:03.270><c> system</c><00:32:03.720><c> there's</c><00:32:03.930><c> an</c>

00:32:04.040 --> 00:32:04.050 align:start position:0%
look on a vp for system there's an
 

00:32:04.050 --> 00:32:05.870 align:start position:0%
look on a vp for system there's an
application<00:32:04.770><c> in</c><00:32:05.010><c> system</c><00:32:05.460><c> developer</c>

00:32:05.870 --> 00:32:05.880 align:start position:0%
application in system developer
 

00:32:05.880 --> 00:32:08.420 align:start position:0%
application in system developer
applications<00:32:06.570><c> called</c><00:32:06.810><c> object</c><00:32:07.290><c> Alec</c><00:32:07.680><c> you</c><00:32:08.220><c> can</c>

00:32:08.420 --> 00:32:08.430 align:start position:0%
applications called object Alec you can
 

00:32:08.430 --> 00:32:10.220 align:start position:0%
applications called object Alec you can
view<00:32:08.550><c> you</c><00:32:09.030><c> can</c><00:32:09.180><c> run</c><00:32:09.330><c> your</c><00:32:09.480><c> program</c><00:32:09.690><c> under</c>

00:32:10.220 --> 00:32:10.230 align:start position:0%
view you can run your program under
 

00:32:10.230 --> 00:32:12.740 align:start position:0%
view you can run your program under
object<00:32:10.410><c> Alec</c><00:32:11.010><c> and</c><00:32:11.160><c> it</c><00:32:11.670><c> will</c><00:32:11.850><c> show</c><00:32:12.060><c> you</c><00:32:12.090><c> some</c><00:32:12.720><c> of</c>

00:32:12.740 --> 00:32:12.750 align:start position:0%
object Alec and it will show you some of
 

00:32:12.750 --> 00:32:14.750 align:start position:0%
object Alec and it will show you some of
the<00:32:12.930><c> CF</c><00:32:13.200><c> types</c><00:32:13.470><c> as</c><00:32:13.680><c> they</c><00:32:13.950><c> are</c><00:32:14.070><c> allocated</c><00:32:14.670><c> and</c>

00:32:14.750 --> 00:32:14.760 align:start position:0%
the CF types as they are allocated and
 

00:32:14.760 --> 00:32:16.820 align:start position:0%
the CF types as they are allocated and
destroyed<00:32:15.210><c> all</c><00:32:15.540><c> of</c><00:32:15.870><c> the</c><00:32:16.110><c> common</c><00:32:16.470><c> ones</c><00:32:16.620><c> are</c>

00:32:16.820 --> 00:32:16.830 align:start position:0%
destroyed all of the common ones are
 

00:32:16.830 --> 00:32:18.140 align:start position:0%
destroyed all of the common ones are
there<00:32:17.010><c> if</c><00:32:17.100><c> you</c><00:32:17.190><c> have</c><00:32:17.280><c> string</c><00:32:17.520><c> or</c><00:32:17.640><c> a</c><00:32:17.730><c> dictionary</c>

00:32:18.140 --> 00:32:18.150 align:start position:0%
there if you have string or a dictionary
 

00:32:18.150 --> 00:32:22.250 align:start position:0%
there if you have string or a dictionary
all<00:32:18.420><c> that</c><00:32:18.600><c> kind</c><00:32:18.810><c> of</c><00:32:18.840><c> stuff</c><00:32:20.990><c> finally</c><00:32:21.990><c> there's</c><00:32:22.200><c> a</c>

00:32:22.250 --> 00:32:22.260 align:start position:0%
all that kind of stuff finally there's a
 

00:32:22.260 --> 00:32:25.820 align:start position:0%
all that kind of stuff finally there's a
fair<00:32:22.440><c> bit</c><00:32:22.470><c> of</c><00:32:23.330><c> documentation</c><00:32:24.330><c> online</c><00:32:24.750><c> you</c><00:32:25.710><c> can</c>

00:32:25.820 --> 00:32:25.830 align:start position:0%
fair bit of documentation online you can
 

00:32:25.830 --> 00:32:27.290 align:start position:0%
fair bit of documentation online you can
find<00:32:26.130><c> it</c><00:32:26.280><c> in</c><00:32:26.400><c> system</c><00:32:26.820><c> developer</c>

00:32:27.290 --> 00:32:27.300 align:start position:0%
find it in system developer
 

00:32:27.300 --> 00:32:29.660 align:start position:0%
find it in system developer
documentation<00:32:27.570><c> core</c><00:32:28.350><c> foundation</c><00:32:28.980><c> on</c><00:32:29.220><c> the</c><00:32:29.370><c> dt</c>

00:32:29.660 --> 00:32:29.670 align:start position:0%
documentation core foundation on the dt
 

00:32:29.670 --> 00:32:33.010 align:start position:0%
documentation core foundation on the dt
for<00:32:29.940><c> CD</c><00:32:30.360><c> it's</c><00:32:31.080><c> also</c><00:32:31.320><c> available</c><00:32:31.620><c> on</c><00:32:32.250><c> the</c><00:32:32.400><c> web</c><00:32:32.550><c> at</c>

00:32:33.010 --> 00:32:33.020 align:start position:0%
for CD it's also available on the web at
 

00:32:33.020 --> 00:32:36.260 align:start position:0%
for CD it's also available on the web at
developer.apple.com<00:32:34.340><c> tech</c><00:32:35.340><c> pubs</c><00:32:35.670><c> core</c>

00:32:36.260 --> 00:32:36.270 align:start position:0%
developer.apple.com tech pubs core
 

00:32:36.270 --> 00:32:39.710 align:start position:0%
developer.apple.com tech pubs core
foundation<00:32:37.160><c> there</c><00:32:38.160><c> is</c><00:32:38.310><c> some</c><00:32:38.520><c> example</c><00:32:39.000><c> code</c>

00:32:39.710 --> 00:32:39.720 align:start position:0%
foundation there is some example code
 

00:32:39.720 --> 00:32:42.500 align:start position:0%
foundation there is some example code
inside<00:32:40.380><c> of</c><00:32:40.560><c> system</c><00:32:40.950><c> developer</c><00:32:41.550><c> examples</c><00:32:42.210><c> core</c>

00:32:42.500 --> 00:32:42.510 align:start position:0%
inside of system developer examples core
 

00:32:42.510 --> 00:32:45.110 align:start position:0%
inside of system developer examples core
foundation<00:32:43.140><c> and</c><00:32:43.370><c> the</c><00:32:44.370><c> release</c><00:32:44.580><c> notes</c><00:32:44.640><c> are</c>

00:32:45.110 --> 00:32:45.120 align:start position:0%
foundation and the release notes are
 

00:32:45.120 --> 00:32:46.880 align:start position:0%
foundation and the release notes are
available<00:32:45.630><c> in</c><00:32:45.750><c> system</c><00:32:46.440><c> developer</c>

00:32:46.880 --> 00:32:46.890 align:start position:0%
available in system developer
 

00:32:46.890 --> 00:32:48.500 align:start position:0%
available in system developer
documentation<00:32:47.210><c> release</c><00:32:48.210><c> notes</c>

00:32:48.500 --> 00:32:48.510 align:start position:0%
documentation release notes
 

00:32:48.510 --> 00:32:50.730 align:start position:0%
documentation release notes
corefoundation<00:32:49.160><c> HTML</c>

00:32:50.730 --> 00:32:50.740 align:start position:0%
corefoundation HTML
 

00:32:50.740 --> 00:32:52.800 align:start position:0%
corefoundation HTML
you

