WEBVTT

00:00:24.046 --> 00:00:24.556 A:middle
&gt;&gt; Morning everyone.

00:00:25.516 --> 00:00:29.546 A:middle
[ Applause ]

00:00:30.046 --> 00:00:30.476 A:middle
I'm Ross Dexter.

00:00:30.476 --> 00:00:31.186 A:middle
I'm an engineer on the Games

00:00:31.186 --> 00:00:32.176 A:middle
Technologies Team at Apple.

00:00:32.256 --> 00:00:33.196 A:middle
And I'd like to welcome you to

00:00:33.196 --> 00:00:35.096 A:middle
going beyond 2D with SpriteKit.

00:00:37.016 --> 00:00:38.386 A:middle
So before we dive in I'd like to

00:00:38.386 --> 00:00:39.596 A:middle
quickly talk about what

00:00:39.596 --> 00:00:41.056 A:middle
SpriteKit is and where it fits

00:00:41.056 --> 00:00:42.196 A:middle
in the Apple rendering picture.

00:00:42.766 --> 00:00:44.486 A:middle
SpriteKit is Apple's 2D graphics

00:00:44.486 --> 00:00:45.606 A:middle
framework for games.

00:00:45.856 --> 00:00:46.486 A:middle
And it's designed to be

00:00:46.486 --> 00:00:48.826 A:middle
flexible, fast, and easy to use.

00:00:48.826 --> 00:00:50.456 A:middle
It's supported across all of our

00:00:50.456 --> 00:00:51.926 A:middle
platforms and has an Xcode

00:00:51.926 --> 00:00:53.486 A:middle
integrated life editor to make

00:00:53.486 --> 00:00:54.896 A:middle
lying out and previewing your

00:00:54.896 --> 00:00:56.616 A:middle
game content quick and easy.

00:00:58.106 --> 00:00:59.876 A:middle
SpriteKit sits along SceneKit or

00:00:59.876 --> 00:01:01.326 A:middle
other games oriented graphics

00:01:01.326 --> 00:01:02.836 A:middle
framework and both sit on top of

00:01:02.836 --> 00:01:03.136 A:middle
Metal.

00:01:03.876 --> 00:01:04.796 A:middle
Traditionally they've all been

00:01:04.796 --> 00:01:06.156 A:middle
used separately in different

00:01:06.156 --> 00:01:06.896 A:middle
contexts.

00:01:07.436 --> 00:01:09.446 A:middle
SpriteKit for quick and easy 2D,

00:01:09.446 --> 00:01:10.956 A:middle
SceneKit as all ready to use 3D

00:01:10.956 --> 00:01:12.756 A:middle
engine, and Metal to give you

00:01:12.756 --> 00:01:14.236 A:middle
direct access to your devices

00:01:14.346 --> 00:01:15.116 A:middle
rendering hardware.

00:01:15.586 --> 00:01:16.926 A:middle
Instead of keeping all three

00:01:16.926 --> 00:01:18.766 A:middle
separate we think it's time that

00:01:18.766 --> 00:01:20.146 A:middle
SpriteKit breaks out of its 2D

00:01:20.146 --> 00:01:20.476 A:middle
mold.

00:01:21.506 --> 00:01:22.736 A:middle
SpriteKit has a great deal to

00:01:22.736 --> 00:01:23.776 A:middle
offer to make using it in

00:01:23.776 --> 00:01:24.986 A:middle
combination with SceneKit and

00:01:24.986 --> 00:01:25.836 A:middle
Metal attractive.

00:01:26.466 --> 00:01:27.626 A:middle
Since they both use Metal under

00:01:27.626 --> 00:01:28.846 A:middle
the hood, it should be trivial

00:01:28.846 --> 00:01:30.446 A:middle
to render SpriteKit content in

00:01:30.446 --> 00:01:32.866 A:middle
SceneKit or be able to pipe it

00:01:32.896 --> 00:01:34.396 A:middle
back into Metal use however you

00:01:34.396 --> 00:01:34.806 A:middle
wish.

00:01:36.046 --> 00:01:37.116 A:middle
Lots of 3D games and apps

00:01:37.116 --> 00:01:38.916 A:middle
feature 2D content and SpriteKit

00:01:38.916 --> 00:01:40.036 A:middle
provides the perfects means for

00:01:40.036 --> 00:01:41.036 A:middle
creating and rendering that

00:01:41.036 --> 00:01:41.476 A:middle
content.

00:01:42.156 --> 00:01:45.756 A:middle
On top of that this year Apple

00:01:45.756 --> 00:01:47.216 A:middle
is introducing ARKit, which

00:01:47.216 --> 00:01:48.136 A:middle
takes all the hard work out of

00:01:48.136 --> 00:01:49.576 A:middle
creating augmented reality apps.

00:01:50.186 --> 00:01:51.006 A:middle
The addition of this new

00:01:51.006 --> 00:01:52.296 A:middle
framework provides one more

00:01:52.296 --> 00:01:53.096 A:middle
reason why it's time for

00:01:53.096 --> 00:01:55.336 A:middle
SpriteKit to go beyond 2D and

00:01:55.336 --> 00:01:56.316 A:middle
into the third dimension.

00:01:56.946 --> 00:01:57.696 A:middle
And today we're going to show

00:01:57.696 --> 00:01:59.386 A:middle
you how to do it and what you

00:02:00.796 --> 00:02:02.916 A:middle
can achieve.

00:02:03.106 --> 00:02:04.526 A:middle
In this session we're going to

00:02:04.526 --> 00:02:05.886 A:middle
cover how to render SpriteKit

00:02:05.886 --> 00:02:07.616 A:middle
content in ARKit, bringing

00:02:07.616 --> 00:02:08.406 A:middle
SpriteKit to the world of

00:02:08.406 --> 00:02:09.186 A:middle
augmented reality.

00:02:10.176 --> 00:02:11.236 A:middle
Next, we'll show you how to get

00:02:11.236 --> 00:02:12.406 A:middle
your SpriteKit scenes into

00:02:12.406 --> 00:02:13.946 A:middle
SceneKit and how that can

00:02:13.946 --> 00:02:15.096 A:middle
improve your augmented reality

00:02:15.096 --> 00:02:15.556 A:middle
apps.

00:02:16.226 --> 00:02:17.376 A:middle
And then finally we'll introduce

00:02:17.376 --> 00:02:18.986 A:middle
you to SKRenderer, which allows

00:02:18.986 --> 00:02:20.206 A:middle
you to take more control of how

00:02:20.206 --> 00:02:21.966 A:middle
SpriteKit updates and renders.

00:02:22.366 --> 00:02:25.116 A:middle
All right, let's dive right in

00:02:25.116 --> 00:02:26.726 A:middle
with how you can use SpriteKit

00:02:26.726 --> 00:02:27.726 A:middle
and ARKit together.

00:02:29.986 --> 00:02:30.826 A:middle
But first we should talk about

00:02:30.826 --> 00:02:31.976 A:middle
what augmented reality actually

00:02:32.146 --> 00:02:36.486 A:middle
is. Augmented reality combines a

00:02:36.566 --> 00:02:38.046 A:middle
real world view with computer

00:02:38.046 --> 00:02:38.856 A:middle
rendered content.

00:02:39.556 --> 00:02:40.586 A:middle
That content gets attached to

00:02:40.586 --> 00:02:42.326 A:middle
locations in the real world so

00:02:42.326 --> 00:02:43.836 A:middle
that as you move your device and

00:02:43.836 --> 00:02:45.336 A:middle
the view shifts, the content

00:02:45.336 --> 00:02:46.696 A:middle
appears to remain in place.

00:02:47.446 --> 00:02:49.606 A:middle
That allows you to inspect the

00:02:49.606 --> 00:02:51.546 A:middle
content from different angels as

00:02:51.546 --> 00:02:52.796 A:middle
if it were a physical object in

00:02:52.796 --> 00:02:53.976 A:middle
front of your device.

00:02:54.606 --> 00:02:55.816 A:middle
And this requires a lot of

00:02:55.816 --> 00:02:57.226 A:middle
complex tracking and is a real

00:02:57.226 --> 00:02:58.866 A:middle
challenge to implement.

00:03:01.076 --> 00:03:03.316 A:middle
Thankfully ARKit does all the

00:03:03.316 --> 00:03:04.136 A:middle
hard work for you.

00:03:04.866 --> 00:03:06.426 A:middle
When you use ARKit it leverages

00:03:06.426 --> 00:03:07.276 A:middle
your devices camera,

00:03:07.276 --> 00:03:09.446 A:middle
accelerometer and other hardware

00:03:09.636 --> 00:03:11.326 A:middle
to track its position and

00:03:11.816 --> 00:03:13.186 A:middle
orientation in the real world.

00:03:13.586 --> 00:03:14.826 A:middle
All you have to do is provide it

00:03:14.826 --> 00:03:15.896 A:middle
the content you want to appear

00:03:15.896 --> 00:03:17.906 A:middle
in AR, and ARKit automatically

00:03:17.906 --> 00:03:19.316 A:middle
updates the relative positioning

00:03:19.426 --> 00:03:20.646 A:middle
of your content as your device

00:03:20.646 --> 00:03:21.066 A:middle
moves.

00:03:21.956 --> 00:03:23.076 A:middle
If you like a deeper dive into

00:03:23.076 --> 00:03:24.386 A:middle
exactly how this all works, I

00:03:24.386 --> 00:03:25.356 A:middle
highly recommend checking out

00:03:25.606 --> 00:03:26.856 A:middle
the Introducing ARKit session

00:03:26.856 --> 00:03:27.886 A:middle
that happened earlier this week.

00:03:28.526 --> 00:03:31.796 A:middle
ARKit is able to track and

00:03:31.796 --> 00:03:32.686 A:middle
update the position of your

00:03:32.686 --> 00:03:33.916 A:middle
content through the use of

00:03:33.916 --> 00:03:34.556 A:middle
anchors.

00:03:34.736 --> 00:03:35.906 A:middle
They are what make AR work.

00:03:37.596 --> 00:03:39.306 A:middle
Anchors are 3D points that

00:03:39.306 --> 00:03:40.596 A:middle
correspond to real world

00:03:40.596 --> 00:03:42.076 A:middle
features that ARKit detects

00:03:42.356 --> 00:03:43.426 A:middle
through Scene and understanding,

00:03:43.776 --> 00:03:45.356 A:middle
which uses your devices camera

00:03:45.356 --> 00:03:47.456 A:middle
to perceive and process the

00:03:47.456 --> 00:03:48.526 A:middle
world around you.

00:03:49.456 --> 00:03:50.616 A:middle
Anchors are easy to create.

00:03:51.036 --> 00:03:52.606 A:middle
You can request ARKit to detect

00:03:52.606 --> 00:03:54.036 A:middle
one at anytime through the API.

00:03:54.406 --> 00:03:55.696 A:middle
Or you can create one manually

00:03:55.696 --> 00:03:57.176 A:middle
using your devices position and

00:03:57.176 --> 00:03:57.756 A:middle
orientation.

00:03:58.086 --> 00:04:01.646 A:middle
So how do we get ARKit working

00:04:01.646 --> 00:04:02.506 A:middle
with SpriteKit content?

00:04:03.796 --> 00:04:05.586 A:middle
ARKit is designed to interact

00:04:05.586 --> 00:04:06.576 A:middle
directly with SpriteKit.

00:04:07.286 --> 00:04:08.476 A:middle
ARKit will ask that your -- ask

00:04:08.546 --> 00:04:09.896 A:middle
your first SpriteKit nodes is

00:04:09.896 --> 00:04:11.336 A:middle
attached to anchors and then

00:04:11.336 --> 00:04:12.526 A:middle
will automatically position,

00:04:12.836 --> 00:04:14.736 A:middle
rotate, and scale those nodes as

00:04:14.736 --> 00:04:15.556 A:middle
the device moves.

00:04:16.426 --> 00:04:17.946 A:middle
It does this so your SpriteKit

00:04:17.946 --> 00:04:19.536 A:middle
content will stay aligned with

00:04:19.536 --> 00:04:20.806 A:middle
the anchors giving the

00:04:20.836 --> 00:04:22.236 A:middle
appearance that your content is

00:04:22.236 --> 00:04:23.346 A:middle
rooted in the real world.

00:04:24.666 --> 00:04:25.596 A:middle
Sprites are rendered so they are

00:04:25.596 --> 00:04:26.806 A:middle
always facing the camera.

00:04:26.906 --> 00:04:28.016 A:middle
So no matter what angle you view

00:04:28.016 --> 00:04:30.246 A:middle
them from they're always facing

00:04:30.296 --> 00:04:30.656 A:middle
the camera.

00:04:31.436 --> 00:04:32.556 A:middle
This is a technique known as

00:04:32.556 --> 00:04:33.576 A:middle
billboarding and it's commonly

00:04:33.576 --> 00:04:34.766 A:middle
used in early 3D games.

00:04:36.466 --> 00:04:37.526 A:middle
So you may not be familiar with

00:04:37.526 --> 00:04:38.726 A:middle
how billboarding works, so let's

00:04:38.726 --> 00:04:40.356 A:middle
go over a few quick examples of

00:04:40.356 --> 00:04:41.676 A:middle
how you can use it, it lets you

00:04:41.676 --> 00:04:43.166 A:middle
use 2D content in 3D space.

00:04:44.046 --> 00:04:45.746 A:middle
So say we have sprite position

00:04:45.746 --> 00:04:47.186 A:middle
in 3D space and a camera

00:04:47.186 --> 00:04:47.686 A:middle
observing it.

00:04:48.806 --> 00:04:50.316 A:middle
As the camera moves closer to

00:04:50.316 --> 00:04:51.446 A:middle
the sprite the sprite grows

00:04:51.446 --> 00:04:53.006 A:middle
larger as you'd expect taking

00:04:53.006 --> 00:04:53.536 A:middle
more of the view.

00:04:54.296 --> 00:04:56.516 A:middle
As the camera moves further

00:04:56.516 --> 00:04:57.856 A:middle
away, the sprite shrinks.

00:04:58.876 --> 00:04:59.906 A:middle
Now I'll rotate the camera.

00:05:00.576 --> 00:05:03.286 A:middle
As the camera changes its point

00:05:03.286 --> 00:05:04.596 A:middle
of view, the sprite continues to

00:05:04.596 --> 00:05:05.986 A:middle
face the camera at all times.

00:05:06.666 --> 00:05:07.616 A:middle
And this should be the case from

00:05:07.616 --> 00:05:08.576 A:middle
any angle we view it from.

00:05:09.546 --> 00:05:10.896 A:middle
Let's add another sprite to our

00:05:10.896 --> 00:05:11.956 A:middle
3D scene here to show how this

00:05:11.956 --> 00:05:13.686 A:middle
works with multiple 2D objects.

00:05:14.186 --> 00:05:17.136 A:middle
Sprites that are further away

00:05:17.366 --> 00:05:18.706 A:middle
are rendered behind sprites that

00:05:18.706 --> 00:05:19.516 A:middle
are closer to the camera.

00:05:20.236 --> 00:05:22.616 A:middle
As the camera moves the more

00:05:22.616 --> 00:05:24.616 A:middle
distant sprite comes into view.

00:05:26.156 --> 00:05:27.586 A:middle
Both sprites always face the

00:05:27.586 --> 00:05:31.446 A:middle
camera and this simple technique

00:05:31.446 --> 00:05:33.166 A:middle
allows your 2D sprite content to

00:05:33.166 --> 00:05:34.466 A:middle
work in a 3D spaces.

00:05:35.106 --> 00:05:38.566 A:middle
So now that we've shown you how

00:05:38.696 --> 00:05:39.956 A:middle
ARKit and SpriteKit work

00:05:39.956 --> 00:05:41.916 A:middle
together at a conceptual level,

00:05:41.956 --> 00:05:43.176 A:middle
let's talk about the actual

00:05:43.176 --> 00:05:44.226 A:middle
objects you'll need to implement

00:05:44.506 --> 00:05:45.186 A:middle
your app.

00:05:45.526 --> 00:05:47.286 A:middle
To work with ARKit and SpriteKit

00:05:47.286 --> 00:05:48.566 A:middle
there are four important objects

00:05:48.566 --> 00:05:49.246 A:middle
for you to know about --

00:05:50.116 --> 00:05:51.956 A:middle
ARSession, ARAnchor, ARSKView,

00:05:51.956 --> 00:05:54.146 A:middle
and ARSKViewDelegate.

00:05:54.146 --> 00:05:59.096 A:middle
ARSession is the heart of ARKit.

00:05:59.096 --> 00:06:00.636 A:middle
It handles all the device

00:06:00.636 --> 00:06:02.426 A:middle
tracking and orchestrates the

00:06:02.426 --> 00:06:03.856 A:middle
interactions between ARKit and

00:06:03.856 --> 00:06:04.336 A:middle
SpriteKit.

00:06:05.286 --> 00:06:06.696 A:middle
It has methods for adding and

00:06:06.696 --> 00:06:08.446 A:middle
removing anchors that you create

00:06:08.446 --> 00:06:08.866 A:middle
in your app.

00:06:09.346 --> 00:06:10.846 A:middle
To get started up, you just call

00:06:10.846 --> 00:06:12.086 A:middle
the Run method and ARSession

00:06:12.086 --> 00:06:13.496 A:middle
will began tracking your device.

00:06:14.066 --> 00:06:16.376 A:middle
You just need to provide it an

00:06:16.376 --> 00:06:17.966 A:middle
ARSession Configuration which

00:06:17.966 --> 00:06:19.186 A:middle
tells the ARKit which AR

00:06:19.186 --> 00:06:20.586 A:middle
techniques it should use.

00:06:21.056 --> 00:06:22.136 A:middle
So in working with SpriteKit you

00:06:22.136 --> 00:06:23.396 A:middle
should just use the AR World

00:06:23.396 --> 00:06:24.836 A:middle
Tracking Session Configuration,

00:06:24.836 --> 00:06:25.626 A:middle
which enables all the

00:06:25.626 --> 00:06:27.076 A:middle
functionality you'll need from

00:06:27.116 --> 00:06:27.576 A:middle
ARKit.

00:06:27.986 --> 00:06:31.546 A:middle
ARKit defines real-world

00:06:31.546 --> 00:06:33.026 A:middle
features through ARAnchor.

00:06:33.486 --> 00:06:34.626 A:middle
It represents a position in the

00:06:34.626 --> 00:06:35.716 A:middle
real world and contains

00:06:35.716 --> 00:06:36.786 A:middle
transform data as well as a

00:06:36.786 --> 00:06:37.626 A:middle
unique identifier.

00:06:38.746 --> 00:06:40.596 A:middle
ARKit maps ARAnchors to the

00:06:40.596 --> 00:06:42.186 A:middle
SKNodes that we provided to

00:06:42.186 --> 00:06:45.586 A:middle
render our contents.

00:06:45.846 --> 00:06:47.136 A:middle
ARKit interacts with SpriteKit

00:06:47.136 --> 00:06:48.926 A:middle
through ARSKView, which is

00:06:48.926 --> 00:06:50.126 A:middle
derived from SKView.

00:06:51.096 --> 00:06:52.026 A:middle
It creates and contains the

00:06:52.026 --> 00:06:53.346 A:middle
ARSession so you don't need to

00:06:53.346 --> 00:06:54.206 A:middle
create it manually.

00:06:54.206 --> 00:06:55.386 A:middle
And it has methods for getting

00:06:55.386 --> 00:06:56.656 A:middle
related anchors and nodes.

00:06:56.856 --> 00:06:58.066 A:middle
So you need to manually track

00:06:58.436 --> 00:06:59.706 A:middle
which node corresponds to what

00:06:59.706 --> 00:07:00.996 A:middle
anchor and vise versa.

00:07:01.576 --> 00:07:03.086 A:middle
It also has a hitTest method,

00:07:03.446 --> 00:07:04.936 A:middle
which is your primary way of

00:07:04.936 --> 00:07:05.866 A:middle
creating anchors.

00:07:06.206 --> 00:07:07.246 A:middle
It takes a point on your devices

00:07:07.246 --> 00:07:08.736 A:middle
screen and shoots a ray through

00:07:08.736 --> 00:07:08.916 A:middle
it.

00:07:09.216 --> 00:07:10.366 A:middle
So looking for the nearest point

00:07:10.366 --> 00:07:12.686 A:middle
in the real world for you to

00:07:12.686 --> 00:07:15.096 A:middle
attach stuff to.

00:07:15.546 --> 00:07:16.286 A:middle
Finally, there's

00:07:16.386 --> 00:07:17.686 A:middle
ARSKViewDelegate.

00:07:17.876 --> 00:07:18.966 A:middle
A protocol derived from

00:07:18.966 --> 00:07:20.916 A:middle
SKViewDelegate, which helps you

00:07:20.916 --> 00:07:22.126 A:middle
react to anchors being added,

00:07:22.466 --> 00:07:23.766 A:middle
updated, and removed from the

00:07:23.766 --> 00:07:24.196 A:middle
session.

00:07:25.366 --> 00:07:26.566 A:middle
All of its methods are optional

00:07:26.676 --> 00:07:27.596 A:middle
and they're the key to using

00:07:27.596 --> 00:07:29.156 A:middle
SpriteKit and ARKit together.

00:07:29.156 --> 00:07:32.166 A:middle
But we'll come back to that in a

00:07:32.836 --> 00:07:32.936 A:middle
bit.

00:07:33.146 --> 00:07:34.256 A:middle
Let's get started on creating

00:07:34.256 --> 00:07:36.016 A:middle
our first ARKit app with

00:07:36.016 --> 00:07:36.476 A:middle
SpriteKit.

00:07:37.496 --> 00:07:39.066 A:middle
First we'll create a new iOS

00:07:39.066 --> 00:07:40.576 A:middle
project in Xcode.

00:07:41.276 --> 00:07:42.416 A:middle
You'll see that in Xcode 9,

00:07:42.496 --> 00:07:43.716 A:middle
there's a new augmented reality

00:07:43.716 --> 00:07:47.366 A:middle
app template for you to choose.

00:07:47.556 --> 00:07:49.026 A:middle
Once you choose the app template

00:07:49.336 --> 00:07:50.616 A:middle
to get started with SpriteKit

00:07:50.706 --> 00:07:51.676 A:middle
select it as your content

00:07:51.676 --> 00:07:52.256 A:middle
technology.

00:07:52.836 --> 00:07:56.146 A:middle
And that's all there is to it.

00:07:56.186 --> 00:07:57.496 A:middle
You're now ready to enter

00:07:57.496 --> 00:07:58.306 A:middle
augmented reality.

00:07:59.326 --> 00:08:00.586 A:middle
The resulting project looks

00:08:00.586 --> 00:08:02.056 A:middle
pretty standard for an iOS app,

00:08:02.056 --> 00:08:03.316 A:middle
but let's go through the files

00:08:03.316 --> 00:08:04.006 A:middle
that are important to using

00:08:04.006 --> 00:08:05.356 A:middle
SpriteKit and ARKit together.

00:08:07.426 --> 00:08:09.016 A:middle
First there's Scene.sks.

00:08:09.056 --> 00:08:11.036 A:middle
This is a standard SpriteKit

00:08:11.036 --> 00:08:12.276 A:middle
scene and it's where you create

00:08:12.276 --> 00:08:13.736 A:middle
and layout any non-AR content

00:08:13.736 --> 00:08:14.596 A:middle
that you want to appear in your

00:08:14.596 --> 00:08:14.826 A:middle
app.

00:08:15.536 --> 00:08:17.106 A:middle
It will act like an overlay for

00:08:17.106 --> 00:08:17.976 A:middle
the AR content.

00:08:17.976 --> 00:08:18.846 A:middle
And so it's useful for things

00:08:18.846 --> 00:08:20.346 A:middle
like HUD elements, help text,

00:08:20.526 --> 00:08:21.086 A:middle
stuff like that.

00:08:22.396 --> 00:08:23.466 A:middle
Nodes that have a Z position

00:08:23.466 --> 00:08:24.836 A:middle
greater than or equal to 0 will

00:08:24.836 --> 00:08:26.766 A:middle
draw over any AR content that

00:08:26.766 --> 00:08:28.226 A:middle
ARKit adds to the scene.

00:08:29.096 --> 00:08:30.666 A:middle
All nodes are managed by -- that

00:08:30.666 --> 00:08:31.996 A:middle
are managed by ARKit have Z

00:08:31.996 --> 00:08:33.606 A:middle
positions that are less than 0.

00:08:35.356 --> 00:08:37.706 A:middle
Next, Scene.swift.

00:08:38.436 --> 00:08:39.686 A:middle
This is a SpriteKit scene's

00:08:39.726 --> 00:08:40.906 A:middle
corresponding source file.

00:08:41.666 --> 00:08:42.686 A:middle
As with normal SpriteKit apps,

00:08:42.686 --> 00:08:44.386 A:middle
this is where you put code to

00:08:44.416 --> 00:08:46.236 A:middle
manage your scene and Gameplay

00:08:46.236 --> 00:08:47.386 A:middle
and logic and is a good place to

00:08:47.386 --> 00:08:48.876 A:middle
leverage gameplay kits various

00:08:48.876 --> 00:08:49.306 A:middle
features.

00:08:49.986 --> 00:08:53.006 A:middle
And finally we have

00:08:53.006 --> 00:08:54.306 A:middle
ViewController.swift.

00:08:54.806 --> 00:08:56.206 A:middle
The view controller conforms to

00:08:56.206 --> 00:08:58.096 A:middle
ARSKViewDelegate and its

00:08:58.096 --> 00:08:59.206 A:middle
sceneView property is an

00:08:59.236 --> 00:09:00.906 A:middle
instance of ARSKView, which

00:09:00.906 --> 00:09:02.206 A:middle
contains the ARSession.

00:09:03.226 --> 00:09:04.586 A:middle
The view controller class is

00:09:04.586 --> 00:09:05.456 A:middle
your primary means of

00:09:05.456 --> 00:09:06.686 A:middle
interacting with ARKit.

00:09:07.396 --> 00:09:08.436 A:middle
In the template it's

00:09:08.436 --> 00:09:10.256 A:middle
automatically set up to call run

00:09:10.256 --> 00:09:11.996 A:middle
on ARSession with an AR World

00:09:11.996 --> 00:09:13.366 A:middle
Tracking Session Configuration.

00:09:13.716 --> 00:09:14.496 A:middle
So you don't need to add it

00:09:14.496 --> 00:09:15.006 A:middle
yourself.

00:09:15.776 --> 00:09:16.926 A:middle
This is also where you implement

00:09:16.926 --> 00:09:18.216 A:middle
the ARSKView Delegate Methods

00:09:18.316 --> 00:09:19.366 A:middle
that are relevant to you.

00:09:19.366 --> 00:09:23.406 A:middle
Now let's talk about the ARKit

00:09:23.406 --> 00:09:24.996 A:middle
Events that the view controller

00:09:24.996 --> 00:09:25.876 A:middle
would need to react to.

00:09:26.946 --> 00:09:28.546 A:middle
The first event is when a new

00:09:28.546 --> 00:09:30.516 A:middle
anchor gets added to SKSession.

00:09:32.006 --> 00:09:33.516 A:middle
When this happens ARKit will ask

00:09:33.516 --> 00:09:34.516 A:middle
the view controller for the

00:09:34.516 --> 00:09:35.586 A:middle
SpriteKit nodes you want to

00:09:35.586 --> 00:09:37.096 A:middle
associate with an anchor.

00:09:37.636 --> 00:09:39.436 A:middle
So this is when we create our AR

00:09:39.436 --> 00:09:39.856 A:middle
content.

00:09:41.766 --> 00:09:42.906 A:middle
The second event is when an

00:09:42.906 --> 00:09:44.876 A:middle
existing anchor is updated by

00:09:44.876 --> 00:09:45.396 A:middle
the session.

00:09:46.516 --> 00:09:47.836 A:middle
When this occurs ARKit informs a

00:09:47.836 --> 00:09:49.796 A:middle
view controller so you can react

00:09:49.796 --> 00:09:50.336 A:middle
to the update.

00:09:51.736 --> 00:09:52.926 A:middle
And the third and final event is

00:09:52.926 --> 00:09:54.416 A:middle
when an anchor is removed from

00:09:54.416 --> 00:09:54.886 A:middle
the session.

00:09:56.126 --> 00:09:57.336 A:middle
ARKit tells the view controller

00:09:57.336 --> 00:09:58.526 A:middle
so you can form any necessary

00:09:58.526 --> 00:09:59.696 A:middle
cleanup in your app.

00:10:04.046 --> 00:10:04.896 A:middle
ARSKViewDelegate provides

00:10:04.896 --> 00:10:06.016 A:middle
methods tied to each of these

00:10:06.016 --> 00:10:06.476 A:middle
events.

00:10:07.226 --> 00:10:08.596 A:middle
As we mentioned, each of these

00:10:08.596 --> 00:10:10.676 A:middle
methods is optional so you only

00:10:10.676 --> 00:10:11.786 A:middle
need to implement the ones that

00:10:11.786 --> 00:10:12.366 A:middle
matter to you.

00:10:12.876 --> 00:10:14.076 A:middle
Let's go over each one.

00:10:14.776 --> 00:10:18.746 A:middle
First is the node for anchor

00:10:18.746 --> 00:10:19.136 A:middle
method.

00:10:20.006 --> 00:10:21.126 A:middle
This gets called when a new

00:10:21.126 --> 00:10:22.426 A:middle
anchor is added to the session.

00:10:22.426 --> 00:10:24.636 A:middle
An ARKit maps that node return

00:10:24.636 --> 00:10:26.656 A:middle
from this method to the anchor

00:10:26.656 --> 00:10:27.396 A:middle
that's passed in.

00:10:28.326 --> 00:10:29.286 A:middle
You should implement this if you

00:10:29.286 --> 00:10:30.946 A:middle
want to create a custom node for

00:10:30.946 --> 00:10:31.386 A:middle
an anchor.

00:10:31.506 --> 00:10:33.266 A:middle
If you don't implement the

00:10:33.266 --> 00:10:35.446 A:middle
method a default empty SKNode is

00:10:35.446 --> 00:10:36.706 A:middle
created for you automatically.

00:10:37.246 --> 00:10:39.196 A:middle
The node that gets returned from

00:10:39.196 --> 00:10:40.226 A:middle
this method will be moved,

00:10:40.506 --> 00:10:42.576 A:middle
rotated, and scaled by ARKit to

00:10:42.576 --> 00:10:43.756 A:middle
match its anchor.

00:10:44.116 --> 00:10:45.116 A:middle
So if you try and make any

00:10:45.116 --> 00:10:46.676 A:middle
changes to the transform they'll

00:10:46.676 --> 00:10:48.016 A:middle
likely be overwritten by ARKit

00:10:48.016 --> 00:10:49.166 A:middle
when the device moves.

00:10:50.116 --> 00:10:50.946 A:middle
It's useful to know that any

00:10:50.976 --> 00:10:51.976 A:middle
children that are assigned to

00:10:51.976 --> 00:10:53.006 A:middle
this node won't have their

00:10:53.006 --> 00:10:53.946 A:middle
transforms modified.

00:10:53.996 --> 00:10:55.486 A:middle
But we'll talk more about this

00:10:55.586 --> 00:10:56.286 A:middle
with our next method.

00:10:57.986 --> 00:10:59.036 A:middle
Also know that ARKit

00:10:59.036 --> 00:11:00.336 A:middle
automatically adds this node to

00:11:00.336 --> 00:11:02.046 A:middle
the scene graph so you don't

00:11:02.666 --> 00:11:04.336 A:middle
have to.

00:11:04.576 --> 00:11:06.376 A:middle
Next, we have didAdd node for

00:11:06.376 --> 00:11:06.686 A:middle
anchor.

00:11:06.776 --> 00:11:09.076 A:middle
This is called after an SKNode

00:11:09.076 --> 00:11:10.436 A:middle
is mapped to an anchor, so after

00:11:10.436 --> 00:11:11.916 A:middle
the previous node for anchor

00:11:11.916 --> 00:11:13.336 A:middle
method is executed.

00:11:14.746 --> 00:11:15.896 A:middle
If you implemented the node for

00:11:15.896 --> 00:11:17.256 A:middle
anchor method, the node that

00:11:17.256 --> 00:11:18.616 A:middle
gets passed in here will be the

00:11:18.616 --> 00:11:20.126 A:middle
one you returned from there.

00:11:20.126 --> 00:11:22.026 A:middle
If you didn't implement it, it

00:11:22.026 --> 00:11:23.286 A:middle
will be a default empty node.

00:11:23.286 --> 00:11:25.656 A:middle
As we mentioned in the previous

00:11:25.656 --> 00:11:27.176 A:middle
slide the node that's mapped to

00:11:27.176 --> 00:11:28.166 A:middle
the anchor has it transformed

00:11:28.166 --> 00:11:30.086 A:middle
modified ARKit to follow the

00:11:30.086 --> 00:11:31.396 A:middle
anchor as the device moves.

00:11:32.336 --> 00:11:33.686 A:middle
As such, if you want to modify

00:11:33.686 --> 00:11:34.986 A:middle
the transforms of your content,

00:11:34.986 --> 00:11:36.326 A:middle
you should add them as children

00:11:36.326 --> 00:11:39.116 A:middle
in here as ARKit won't modify

00:11:41.496 --> 00:11:41.716 A:middle
them.

00:11:42.076 --> 00:11:43.446 A:middle
Next, we'll update node for

00:11:43.446 --> 00:11:44.866 A:middle
anchor and didUpdate node for

00:11:44.866 --> 00:11:45.166 A:middle
anchor.

00:11:46.116 --> 00:11:47.366 A:middle
These methods are called before

00:11:47.366 --> 00:11:48.846 A:middle
and after the node is updated

00:11:48.906 --> 00:11:49.946 A:middle
with a given anchors data.

00:11:51.056 --> 00:11:52.316 A:middle
True to their names willUpdate

00:11:52.316 --> 00:11:53.426 A:middle
node for anchor is called before

00:11:53.426 --> 00:11:55.016 A:middle
the update, and didUpdate node

00:11:55.066 --> 00:11:56.116 A:middle
for anchor is called after the

00:11:56.116 --> 00:11:56.486 A:middle
update.

00:11:57.396 --> 00:11:58.246 A:middle
This occurs when the device

00:11:58.246 --> 00:11:59.736 A:middle
moves and the view changes.

00:12:00.816 --> 00:12:01.996 A:middle
The nodes position, rotation,

00:12:01.996 --> 00:12:03.046 A:middle
and or scale is subject to

00:12:03.046 --> 00:12:04.556 A:middle
change between calls to these

00:12:04.556 --> 00:12:04.916 A:middle
methods.

00:12:06.156 --> 00:12:09.986 A:middle
Finally, didRemove node for

00:12:09.986 --> 00:12:10.326 A:middle
anchor.

00:12:11.196 --> 00:12:12.316 A:middle
This gets called the node is

00:12:12.316 --> 00:12:13.496 A:middle
removed from the scene graph,

00:12:13.976 --> 00:12:15.496 A:middle
which occurs when its course on

00:12:15.496 --> 00:12:16.796 A:middle
the anchor is removed from

00:12:16.796 --> 00:12:17.336 A:middle
ARSession.

00:12:18.756 --> 00:12:19.826 A:middle
All right, that covers the

00:12:19.826 --> 00:12:21.336 A:middle
important parts of the API.

00:12:21.336 --> 00:12:23.766 A:middle
Let's take a look at some code.

00:12:23.996 --> 00:12:24.826 A:middle
So let's cover creating an

00:12:24.826 --> 00:12:25.186 A:middle
anchor.

00:12:25.556 --> 00:12:27.206 A:middle
Here we're looking at a handler

00:12:27.206 --> 00:12:28.286 A:middle
for the touches began event.

00:12:28.956 --> 00:12:33.216 A:middle
When the device reports a touch,

00:12:33.216 --> 00:12:34.516 A:middle
we get the location of the touch

00:12:34.586 --> 00:12:35.936 A:middle
in our ARSKView.

00:12:36.626 --> 00:12:39.946 A:middle
We then provide the touch

00:12:39.946 --> 00:12:42.556 A:middle
location to the ARSKView's hit

00:12:42.556 --> 00:12:44.376 A:middle
test method, which shoots a ray

00:12:44.376 --> 00:12:45.896 A:middle
out into the real world looking

00:12:45.896 --> 00:12:47.126 A:middle
for feature points that we can

00:12:47.126 --> 00:12:48.346 A:middle
turn into anchors.

00:12:49.366 --> 00:12:50.626 A:middle
It returns an array of all the

00:12:50.626 --> 00:12:52.316 A:middle
hits that it registers sorted

00:12:52.316 --> 00:12:53.686 A:middle
from nearest to furthest.

00:12:53.686 --> 00:12:58.626 A:middle
We take the nearest hit and we

00:12:58.626 --> 00:13:00.006 A:middle
use this world transform to

00:13:00.006 --> 00:13:02.056 A:middle
create and ARAnchor, which we

00:13:02.056 --> 00:13:02.896 A:middle
then add to the session.

00:13:02.896 --> 00:13:05.606 A:middle
And that's all there is to it.

00:13:05.606 --> 00:13:06.786 A:middle
Creating anchors could not be

00:13:06.786 --> 00:13:07.186 A:middle
simpler.

00:13:07.316 --> 00:13:12.246 A:middle
So now that we've added a new

00:13:12.246 --> 00:13:13.506 A:middle
anchor to the session, the

00:13:13.506 --> 00:13:14.436 A:middle
session will ask the view

00:13:14.436 --> 00:13:15.606 A:middle
controller for the SpriteKit

00:13:15.606 --> 00:13:16.616 A:middle
content that we want to attach

00:13:16.616 --> 00:13:17.726 A:middle
to it.

00:13:19.116 --> 00:13:21.386 A:middle
To do this we've implemented

00:13:21.386 --> 00:13:22.996 A:middle
ARSKView Delegates didAdd node

00:13:22.996 --> 00:13:23.766 A:middle
for anchor method.

00:13:24.646 --> 00:13:26.066 A:middle
We haven't implemented node for

00:13:26.066 --> 00:13:27.556 A:middle
anchor, so default empty node

00:13:27.556 --> 00:13:28.746 A:middle
was created for us.

00:13:28.986 --> 00:13:29.686 A:middle
And that's [inaudible] of this

00:13:29.926 --> 00:13:30.606 A:middle
method.

00:13:33.406 --> 00:13:34.476 A:middle
So now all we need to do is

00:13:34.476 --> 00:13:35.426 A:middle
create the content we want to

00:13:35.426 --> 00:13:37.756 A:middle
attach to the anchor and then

00:13:38.816 --> 00:13:40.546 A:middle
add it as a child of the node

00:13:40.546 --> 00:13:41.586 A:middle
that's passed into this method.

00:13:42.586 --> 00:13:43.846 A:middle
ARKit will automatically update

00:13:43.846 --> 00:13:45.236 A:middle
the node so that it will follow

00:13:45.236 --> 00:13:46.586 A:middle
the anchor as the device moves

00:13:46.876 --> 00:13:47.816 A:middle
so you don't need to do anything

00:13:47.816 --> 00:13:48.186 A:middle
else.

00:13:48.186 --> 00:13:52.146 A:middle
So now that we've shown you

00:13:52.146 --> 00:13:53.816 A:middle
exactly how to use the ARKit API

00:13:53.816 --> 00:13:55.196 A:middle
with SpriteKit, let's enter

00:13:55.196 --> 00:13:57.266 A:middle
augmented reality.

00:13:58.516 --> 00:14:07.546 A:middle
[ Applause ]

00:14:08.046 --> 00:14:10.936 A:middle
Let's open our app here.

00:14:11.126 --> 00:14:12.446 A:middle
So we see we're doing our video

00:14:12.446 --> 00:14:13.266 A:middle
pass through now.

00:14:13.266 --> 00:14:15.196 A:middle
We can see our lovely audience

00:14:15.196 --> 00:14:15.656 A:middle
out there.

00:14:15.986 --> 00:14:17.046 A:middle
You're all famous now.

00:14:18.046 --> 00:14:19.456 A:middle
So let's start placing some

00:14:19.456 --> 00:14:20.956 A:middle
content in augmented reality.

00:14:21.546 --> 00:14:23.786 A:middle
As I tap on my screen I'm

00:14:24.596 --> 00:14:28.276 A:middle
placing content half a meter out

00:14:28.276 --> 00:14:29.196 A:middle
in front of me.

00:14:29.716 --> 00:14:30.636 A:middle
Here I'm just placing

00:14:30.826 --> 00:14:32.856 A:middle
SKLabelNode's with Emoji.

00:14:33.006 --> 00:14:34.896 A:middle
Fun fact -- you can use emoji in

00:14:34.896 --> 00:14:35.786 A:middle
your SpriteKit apps by just

00:14:35.786 --> 00:14:36.446 A:middle
using labels.

00:14:36.556 --> 00:14:37.416 A:middle
Just paste them in there.

00:14:37.416 --> 00:14:39.446 A:middle
And you see they have them

00:14:39.576 --> 00:14:40.886 A:middle
floating in 3D space.

00:14:40.886 --> 00:14:43.786 A:middle
And as I move the camera around

00:14:45.536 --> 00:14:46.796 A:middle
they move relative to one

00:14:46.796 --> 00:14:47.136 A:middle
another.

00:14:47.716 --> 00:14:50.196 A:middle
Just placing them in space is a

00:14:50.196 --> 00:14:50.936 A:middle
little boring.

00:14:50.936 --> 00:14:52.926 A:middle
I can also place them on a

00:14:52.926 --> 00:14:53.506 A:middle
surface.

00:14:54.746 --> 00:14:57.426 A:middle
And it will detect intersection

00:14:57.426 --> 00:14:59.756 A:middle
with the surface with the

00:14:59.756 --> 00:15:00.656 A:middle
HitTest method that we were

00:15:00.656 --> 00:15:01.566 A:middle
talking about before.

00:15:01.566 --> 00:15:06.276 A:middle
And then it places the emoji on

00:15:06.276 --> 00:15:07.526 A:middle
the surface of the table that

00:15:07.526 --> 00:15:08.026 A:middle
it's detected.

00:15:08.666 --> 00:15:10.636 A:middle
But placing emoji is just a

00:15:10.636 --> 00:15:11.786 A:middle
little boring.

00:15:12.086 --> 00:15:13.296 A:middle
So now we're going to switch

00:15:13.296 --> 00:15:16.676 A:middle
into blasting mode and then we

00:15:16.676 --> 00:15:18.636 A:middle
can blow up our emoji, which is

00:15:19.166 --> 00:15:20.296 A:middle
a little bit more fun.

00:15:21.486 --> 00:15:23.546 A:middle
Also pay attention to the text

00:15:23.546 --> 00:15:25.216 A:middle
in our -- in the lower left hand

00:15:25.216 --> 00:15:27.786 A:middle
corner here and the way that our

00:15:27.786 --> 00:15:31.146 A:middle
emoji are flipping around when

00:15:31.146 --> 00:15:32.646 A:middle
we destroy them, because that's

00:15:32.726 --> 00:15:33.816 A:middle
going to become relevant in a

00:15:33.816 --> 00:15:34.166 A:middle
moment.

00:15:34.926 --> 00:15:37.256 A:middle
So you see how easy it is to

00:15:37.256 --> 00:15:41.156 A:middle
quickly create an app and use a

00:15:41.156 --> 00:15:43.346 A:middle
SpriteKit content to enter

00:15:43.346 --> 00:15:44.056 A:middle
augmented realty.

00:15:44.266 --> 00:15:45.386 A:middle
This is just a slightly tweaked

00:15:45.386 --> 00:15:47.736 A:middle
version of the template app that

00:15:47.736 --> 00:15:49.416 A:middle
you can create right now using

00:15:49.416 --> 00:15:50.066 A:middle
Xcode 9.

00:15:51.236 --> 00:15:53.526 A:middle
And that's SpriteKit with ARKit.

00:15:54.516 --> 00:15:58.696 A:middle
[ Applause ]

00:15:59.196 --> 00:16:00.316 A:middle
So you see how easy it is to

00:16:00.316 --> 00:16:01.316 A:middle
enter augmented reality when

00:16:01.316 --> 00:16:02.546 A:middle
using ARKit and SpriteKit

00:16:02.546 --> 00:16:02.936 A:middle
together.

00:16:03.746 --> 00:16:04.816 A:middle
As I mentioned there are a few

00:16:04.816 --> 00:16:06.016 A:middle
other SpriteKit features in

00:16:06.016 --> 00:16:06.946 A:middle
there, some of which that were

00:16:06.946 --> 00:16:07.926 A:middle
present in the demo that I'd

00:16:07.926 --> 00:16:08.716 A:middle
like to quickly cover.

00:16:10.056 --> 00:16:11.996 A:middle
So hopefully you notice the text

00:16:11.996 --> 00:16:13.156 A:middle
on the bottom of our screen in

00:16:13.156 --> 00:16:14.316 A:middle
the demo app animating.

00:16:14.756 --> 00:16:15.936 A:middle
This was done with a single

00:16:15.986 --> 00:16:17.306 A:middle
SKLabelNode, thanks to the fact

00:16:17.306 --> 00:16:18.586 A:middle
that they now support attributed

00:16:18.586 --> 00:16:19.026 A:middle
strings.

00:16:20.146 --> 00:16:21.096 A:middle
Attributed strings allows you to

00:16:21.096 --> 00:16:23.376 A:middle
specify the attributes of each

00:16:23.376 --> 00:16:25.026 A:middle
character in a string, letting

00:16:25.026 --> 00:16:26.206 A:middle
you mix things like different

00:16:26.206 --> 00:16:27.946 A:middle
colors and fonts in the same

00:16:27.946 --> 00:16:28.326 A:middle
label.

00:16:28.326 --> 00:16:30.856 A:middle
It uses NSAAttributedString and

00:16:30.856 --> 00:16:31.976 A:middle
all you have to do is set it on

00:16:31.976 --> 00:16:34.226 A:middle
SKLabelNodes new attributedText

00:16:34.226 --> 00:16:34.666 A:middle
property.

00:16:36.996 --> 00:16:38.816 A:middle
The emoji in our augmented

00:16:38.816 --> 00:16:40.026 A:middle
reality apps spun about in ways

00:16:40.026 --> 00:16:41.276 A:middle
that weren't possible until now

00:16:41.276 --> 00:16:42.316 A:middle
thanks to the new

00:16:42.316 --> 00:16:43.096 A:middle
SKTransformNode.

00:16:44.556 --> 00:16:46.886 A:middle
SKNode already had z rotation,

00:16:47.746 --> 00:16:49.176 A:middle
but SKTransformNode adds the

00:16:49.176 --> 00:16:50.436 A:middle
ability for you to rotate around

00:16:50.436 --> 00:16:52.326 A:middle
the x and y-axis as well.

00:16:53.096 --> 00:16:54.646 A:middle
Aligned for full 3D rotations

00:16:54.646 --> 00:16:55.706 A:middle
for SpriteKit content.

00:16:56.526 --> 00:16:58.116 A:middle
And these rotations apply to all

00:16:58.116 --> 00:16:59.006 A:middle
child nodes as well.

00:17:00.006 --> 00:17:01.736 A:middle
SKTransformNode uses

00:17:01.736 --> 00:17:02.956 A:middle
orthographic projection.

00:17:03.256 --> 00:17:04.206 A:middle
So it doesn't apply any

00:17:04.266 --> 00:17:05.316 A:middle
perspective skewing to your

00:17:05.316 --> 00:17:05.846 A:middle
nodes.

00:17:06.736 --> 00:17:08.156 A:middle
You can specify your rotations

00:17:08.156 --> 00:17:10.106 A:middle
through the x, y, and z rotation

00:17:10.106 --> 00:17:11.706 A:middle
properties or you can use a

00:17:11.706 --> 00:17:12.866 A:middle
specialized getters and setters

00:17:12.866 --> 00:17:14.606 A:middle
for Euler angles, rotation

00:17:14.806 --> 00:17:18.186 A:middle
matrices, and quaternions.

00:17:18.616 --> 00:17:19.636 A:middle
Finally, on the ender side of

00:17:19.676 --> 00:17:20.856 A:middle
things, SpriteKit is fully

00:17:20.856 --> 00:17:22.766 A:middle
compatible with Xcode's View

00:17:22.766 --> 00:17:23.206 A:middle
Debugger.

00:17:24.176 --> 00:17:25.416 A:middle
It displays the entire scene

00:17:25.416 --> 00:17:26.796 A:middle
graph and gives you the neat

00:17:26.796 --> 00:17:28.476 A:middle
exploded 3D view of your scene,

00:17:28.806 --> 00:17:29.926 A:middle
which can be a great help when

00:17:29.926 --> 00:17:31.676 A:middle
you're trying to debug layout --

00:17:31.676 --> 00:17:33.176 A:middle
content layout issues.

00:17:33.416 --> 00:17:34.726 A:middle
It also allows you to inspect

00:17:34.726 --> 00:17:35.946 A:middle
all of your node properties so

00:17:36.286 --> 00:17:37.096 A:middle
you can see the state of

00:17:37.096 --> 00:17:38.026 A:middle
everything in your scene as the

00:17:38.026 --> 00:17:39.216 A:middle
moment the app was paused.

00:17:39.556 --> 00:17:40.836 A:middle
This is a really great new

00:17:40.836 --> 00:17:41.816 A:middle
feature, so please check out the

00:17:41.816 --> 00:17:43.136 A:middle
debugging with Xcode 9 session

00:17:43.136 --> 00:17:44.726 A:middle
for more information on it.

00:17:46.356 --> 00:17:48.116 A:middle
We've shown you how quick and

00:17:48.116 --> 00:17:49.976 A:middle
easy it is to get started with

00:17:49.976 --> 00:17:51.736 A:middle
using ARKit and SpriteKit to

00:17:51.736 --> 00:17:53.256 A:middle
create an augmented reality app.

00:17:54.206 --> 00:17:55.586 A:middle
ARKit handles all of the hard

00:17:55.586 --> 00:17:56.916 A:middle
parts of augmented reality for

00:17:56.916 --> 00:17:58.636 A:middle
you and SpriteKit makes

00:17:58.636 --> 00:17:59.916 A:middle
rendering content a snap.

00:18:01.606 --> 00:18:02.396 A:middle
We've also introduced new

00:18:02.396 --> 00:18:03.566 A:middle
features to SpriteKit that give

00:18:03.566 --> 00:18:04.716 A:middle
you greater flexibility in

00:18:04.716 --> 00:18:05.906 A:middle
developing your apps and give

00:18:05.906 --> 00:18:07.206 A:middle
you new options for debugging

00:18:07.206 --> 00:18:08.036 A:middle
SpriteKit content.

00:18:08.726 --> 00:18:12.116 A:middle
But you may have a few lingering

00:18:12.116 --> 00:18:12.786 A:middle
questions.

00:18:13.196 --> 00:18:14.036 A:middle
What if we don't want

00:18:14.036 --> 00:18:15.066 A:middle
billboarded sprites?

00:18:15.636 --> 00:18:16.736 A:middle
What if we want our SpriteKit

00:18:16.736 --> 00:18:17.636 A:middle
content to be effective by

00:18:17.636 --> 00:18:18.156 A:middle
perspective?

00:18:18.156 --> 00:18:21.886 A:middle
What if we want to mix 2D and 3D

00:18:22.126 --> 00:18:23.596 A:middle
content in augmented reality?

00:18:24.286 --> 00:18:26.236 A:middle
What if wanted to take SpriteKit

00:18:26.236 --> 00:18:27.216 A:middle
further into 3D?

00:18:29.056 --> 00:18:31.186 A:middle
The answer lies in combining

00:18:31.186 --> 00:18:33.236 A:middle
SceneKit, SpriteKit, and ARKit

00:18:33.536 --> 00:18:36.206 A:middle
all at once.

00:18:36.736 --> 00:18:38.286 A:middle
SceneKit and SpriteKit's 3D

00:18:38.286 --> 00:18:40.046 A:middle
counterpart, it's a ready to use

00:18:40.076 --> 00:18:41.626 A:middle
3D engine with it's own Xcode

00:18:41.626 --> 00:18:42.866 A:middle
integrated live editor.

00:18:43.866 --> 00:18:44.956 A:middle
What you may not know is that

00:18:44.956 --> 00:18:47.576 A:middle
you can use SpriteKit Scenes as

00:18:47.576 --> 00:18:49.296 A:middle
the material on geometry in

00:18:49.296 --> 00:18:49.876 A:middle
SceneKit.

00:18:50.796 --> 00:18:51.556 A:middle
That allows you to render

00:18:51.556 --> 00:18:53.326 A:middle
SpriteKit content with complex

00:18:53.326 --> 00:18:54.936 A:middle
3D transforms and perspective

00:18:54.936 --> 00:18:55.276 A:middle
effect.

00:18:56.306 --> 00:18:57.726 A:middle
Additionally you can easily mix

00:18:57.726 --> 00:18:59.506 A:middle
2D SpriteKit content with 3D

00:18:59.936 --> 00:19:04.176 A:middle
SceneKit content in the same

00:19:04.256 --> 00:19:04.506 A:middle
context.

00:19:04.936 --> 00:19:06.326 A:middle
Like SpriteKit, SceneKit is also

00:19:06.326 --> 00:19:08.476 A:middle
integrated with ARKit, creating

00:19:08.476 --> 00:19:10.456 A:middle
a project that uses SceneKit in

00:19:10.456 --> 00:19:12.286 A:middle
an augmented reality app is the

00:19:12.286 --> 00:19:13.346 A:middle
same as with SpriteKit.

00:19:14.296 --> 00:19:15.376 A:middle
Just change the content

00:19:15.376 --> 00:19:16.696 A:middle
technology to SceneKit.

00:19:17.146 --> 00:19:21.386 A:middle
The API is designed to be very

00:19:21.386 --> 00:19:22.436 A:middle
similar to the one you use with

00:19:22.436 --> 00:19:22.906 A:middle
SpriteKit.

00:19:23.196 --> 00:19:24.836 A:middle
Only the names of few objects

00:19:25.456 --> 00:19:27.496 A:middle
are different.

00:19:27.496 --> 00:19:30.226 A:middle
ARSKView becomes ARSCNView and

00:19:30.226 --> 00:19:31.726 A:middle
ARSKViewDelegate becomes

00:19:31.786 --> 00:19:32.936 A:middle
ARSCNViewDelegate.

00:19:33.856 --> 00:19:34.866 A:middle
As with SpriteKit the template

00:19:34.896 --> 00:19:37.026 A:middle
creates ARSCNView for you and

00:19:37.026 --> 00:19:38.606 A:middle
the ViewController conforms to

00:19:38.606 --> 00:19:39.636 A:middle
ARSCNViewDelegate.

00:19:40.376 --> 00:19:41.596 A:middle
Now in the interest in brevity

00:19:41.596 --> 00:19:42.456 A:middle
and because the API is so

00:19:42.456 --> 00:19:43.416 A:middle
similar, we won't bother

00:19:43.416 --> 00:19:44.186 A:middle
covering the rest here.

00:19:44.886 --> 00:19:48.356 A:middle
So next we want to get out

00:19:48.356 --> 00:19:49.596 A:middle
SpriteKit content rendering

00:19:49.596 --> 00:19:50.656 A:middle
within a SceneKit scene.

00:19:51.596 --> 00:19:53.226 A:middle
Normally with SpriteKit you have

00:19:53.226 --> 00:19:54.816 A:middle
your scene and you set it on an

00:19:54.816 --> 00:19:55.296 A:middle
SKView.

00:19:56.256 --> 00:19:58.406 A:middle
SKView then works with UIKit or

00:19:58.406 --> 00:20:00.386 A:middle
AppKit on Mac OS to get your

00:20:00.386 --> 00:20:03.236 A:middle
content on screen.

00:20:04.046 --> 00:20:04.886 A:middle
To get your content rendering in

00:20:05.036 --> 00:20:06.336 A:middle
SceneKit things are handled a

00:20:06.336 --> 00:20:07.076 A:middle
little differently.

00:20:07.726 --> 00:20:08.856 A:middle
Instead of setting your scene on

00:20:08.856 --> 00:20:10.406 A:middle
the view, you set it on the

00:20:10.406 --> 00:20:11.986 A:middle
material property of the

00:20:11.986 --> 00:20:13.056 A:middle
geometry on which you want the

00:20:13.056 --> 00:20:14.906 A:middle
SpriteKit content to appear.

00:20:14.906 --> 00:20:17.336 A:middle
And then that material works

00:20:17.336 --> 00:20:18.786 A:middle
with SceneKit to render you

00:20:18.786 --> 00:20:20.346 A:middle
SpriteKit content and then

00:20:20.346 --> 00:20:22.026 A:middle
texture map it onto the geometry

00:20:22.116 --> 00:20:23.276 A:middle
the material is associated with.

00:20:23.456 --> 00:20:27.566 A:middle
So let's go over a few examples

00:20:27.566 --> 00:20:29.086 A:middle
of rendering SpriteKit content

00:20:29.206 --> 00:20:30.426 A:middle
on SceneKit Geometry.

00:20:31.306 --> 00:20:32.856 A:middle
Here was have a basic SpriteKit

00:20:32.856 --> 00:20:33.226 A:middle
scene.

00:20:33.826 --> 00:20:35.866 A:middle
And here's what we get when we

00:20:35.866 --> 00:20:37.426 A:middle
render that on a scene on a

00:20:37.426 --> 00:20:39.226 A:middle
plane in scene kit.

00:20:40.996 --> 00:20:42.606 A:middle
We also apply the SpriteKit's

00:20:42.606 --> 00:20:45.366 A:middle
scene to a cube or even a

00:20:45.366 --> 00:20:45.766 A:middle
sphere.

00:20:45.856 --> 00:20:47.286 A:middle
You can use it just like a

00:20:47.286 --> 00:20:48.756 A:middle
regular texture and the

00:20:48.756 --> 00:20:49.906 A:middle
SpriteKit -- as the SpriteKit

00:20:49.906 --> 00:20:51.416 A:middle
scene updates, your texture will

00:20:51.416 --> 00:20:52.906 A:middle
be updated along with it.

00:20:54.536 --> 00:20:56.226 A:middle
So now I'd like to quickly show

00:20:56.226 --> 00:20:57.476 A:middle
you how easy it is to use

00:20:57.476 --> 00:20:58.856 A:middle
SpriteKit with SceneKit.

00:21:00.986 --> 00:21:03.056 A:middle
First, get the SpriteKit scene

00:21:03.056 --> 00:21:04.316 A:middle
that you want to use in

00:21:04.316 --> 00:21:04.766 A:middle
SceneKit.

00:21:05.366 --> 00:21:08.766 A:middle
Next, create the geometry you

00:21:08.766 --> 00:21:09.856 A:middle
want the SpriteKit scene to be

00:21:09.856 --> 00:21:10.356 A:middle
rendered on.

00:21:11.086 --> 00:21:12.246 A:middle
Here we're creating a simple

00:21:12.246 --> 00:21:12.686 A:middle
plane.

00:21:14.416 --> 00:21:16.466 A:middle
Then you just need to set the

00:21:16.466 --> 00:21:17.996 A:middle
SpriteKit scene as the contents

00:21:17.996 --> 00:21:19.556 A:middle
of the diffuse property of the

00:21:19.556 --> 00:21:20.386 A:middle
planes material.

00:21:21.356 --> 00:21:22.726 A:middle
That will cause the SceneKit to

00:21:22.726 --> 00:21:23.766 A:middle
render the SpriteKit Scene to a

00:21:23.766 --> 00:21:25.496 A:middle
texture and then apply it to the

00:21:25.496 --> 00:21:25.996 A:middle
geometry.

00:21:25.996 --> 00:21:30.686 A:middle
Here we're setting the material

00:21:30.686 --> 00:21:31.796 A:middle
to be double-sided.

00:21:32.286 --> 00:21:33.416 A:middle
This causes the SpriteKit Scene

00:21:33.416 --> 00:21:34.756 A:middle
to appear on both sides of the

00:21:34.756 --> 00:21:35.156 A:middle
plane.

00:21:35.786 --> 00:21:38.826 A:middle
Then we just need to create a

00:21:38.866 --> 00:21:40.196 A:middle
SceneKit node for the plane and

00:21:40.196 --> 00:21:44.146 A:middle
add it to the SceneKit scene.

00:21:44.696 --> 00:21:45.606 A:middle
Now the plane will show up in

00:21:45.606 --> 00:21:46.716 A:middle
the scene with the contents of

00:21:46.716 --> 00:21:48.156 A:middle
your SpriteKit scene texture

00:21:48.156 --> 00:21:49.746 A:middle
mapped onto it.

00:21:51.236 --> 00:21:53.176 A:middle
So now I'd like to show you demo

00:21:53.176 --> 00:21:54.226 A:middle
of some of the things you can do

00:21:54.226 --> 00:21:55.256 A:middle
when you use SpriteKit and

00:21:55.256 --> 00:21:56.746 A:middle
SceneKit together with ARKit.

00:21:58.516 --> 00:22:08.036 A:middle
[ Applause ]

00:22:08.536 --> 00:22:08.926 A:middle
All right.

00:22:11.216 --> 00:22:13.476 A:middle
So here I have a demo that I've

00:22:13.476 --> 00:22:16.546 A:middle
built on top of the sample code

00:22:16.546 --> 00:22:18.036 A:middle
that ARKit has released, that

00:22:18.036 --> 00:22:19.286 A:middle
you can find to their session

00:22:19.286 --> 00:22:19.766 A:middle
website.

00:22:19.766 --> 00:22:23.006 A:middle
And here I just is detecting a

00:22:23.006 --> 00:22:23.896 A:middle
plane for us.

00:22:24.406 --> 00:22:27.116 A:middle
Now if I tap on the screen it

00:22:27.116 --> 00:22:29.696 A:middle
places a SpriteKit scene for us

00:22:29.696 --> 00:22:30.416 A:middle
in the world here.

00:22:30.576 --> 00:22:32.666 A:middle
And you see that this a fully

00:22:32.666 --> 00:22:34.166 A:middle
live SpriteKit scene.

00:22:34.166 --> 00:22:35.926 A:middle
You see the trees are animating.

00:22:36.346 --> 00:22:38.936 A:middle
And in fact I can actually

00:22:38.936 --> 00:22:40.286 A:middle
interact with this directly.

00:22:40.326 --> 00:22:41.796 A:middle
Well, here let's actually --

00:22:41.796 --> 00:22:44.346 A:middle
let's blow it up a little bit.

00:22:44.346 --> 00:22:45.756 A:middle
Since we are in 3D we can do all

00:22:45.756 --> 00:22:46.536 A:middle
kinds of cool things.

00:22:46.536 --> 00:22:48.316 A:middle
We can move this guy around, we

00:22:48.696 --> 00:22:51.286 A:middle
can rotate, and we can scale,

00:22:51.286 --> 00:22:53.216 A:middle
make it a little bigger.

00:22:54.056 --> 00:22:55.786 A:middle
So now I can actually interact

00:22:55.786 --> 00:22:56.726 A:middle
with this scene directly.

00:22:56.726 --> 00:22:58.686 A:middle
I have controls on my device

00:22:58.686 --> 00:23:00.986 A:middle
here, I can move my character

00:23:00.986 --> 00:23:03.166 A:middle
around, you can jump around.

00:23:04.476 --> 00:23:06.336 A:middle
Hard to get over that thing.

00:23:06.696 --> 00:23:07.816 A:middle
Yeah. And so we can jump around

00:23:07.816 --> 00:23:09.576 A:middle
in real time, interact with this

00:23:09.576 --> 00:23:10.716 A:middle
just like a normal SpriteKit

00:23:10.716 --> 00:23:12.996 A:middle
scene rendered in 3D.

00:23:13.856 --> 00:23:15.236 A:middle
But just having it sit here on

00:23:15.236 --> 00:23:16.886 A:middle
the surface is a little boring.

00:23:17.086 --> 00:23:17.986 A:middle
We should do something a little

00:23:17.986 --> 00:23:19.076 A:middle
more interesting, it a little

00:23:19.076 --> 00:23:19.936 A:middle
more 3D.

00:23:20.336 --> 00:23:21.466 A:middle
So if I actually touch this

00:23:21.466 --> 00:23:24.046 A:middle
button up here, the scene flips

00:23:24.046 --> 00:23:26.396 A:middle
up and --

00:23:27.516 --> 00:23:30.576 A:middle
[ Applause ]

00:23:31.076 --> 00:23:32.946 A:middle
If I touch it again it separates

00:23:32.946 --> 00:23:34.146 A:middle
the different layers that I have

00:23:34.146 --> 00:23:34.436 A:middle
in here.

00:23:34.436 --> 00:23:35.566 A:middle
So we don't actually have just

00:23:35.606 --> 00:23:36.706 A:middle
one SpriteKit scene --

00:23:37.516 --> 00:23:40.546 A:middle
[ Applause ]

00:23:41.046 --> 00:23:41.706 A:middle
We actually have three

00:23:41.706 --> 00:23:42.706 A:middle
SpriteKit's scenes here, one for

00:23:42.706 --> 00:23:43.276 A:middle
each layer here.

00:23:43.276 --> 00:23:44.866 A:middle
One for the middle -- front,

00:23:44.866 --> 00:23:46.136 A:middle
middle, and background.

00:23:47.616 --> 00:23:49.436 A:middle
So this shows you the kind of

00:23:49.436 --> 00:23:50.546 A:middle
stuff that you can do when you

00:23:50.546 --> 00:23:51.756 A:middle
use SpriteKit and SceneKit

00:23:51.756 --> 00:23:54.346 A:middle
together with ARKit but maybe

00:23:54.346 --> 00:23:55.366 A:middle
you start to feel a little

00:23:55.366 --> 00:23:58.336 A:middle
constrained by the level here.

00:23:59.146 --> 00:24:00.356 A:middle
And maybe we want to have our

00:24:00.356 --> 00:24:02.176 A:middle
little guy go out on an

00:24:02.176 --> 00:24:02.946 A:middle
adventure on his own.

00:24:03.116 --> 00:24:03.906 A:middle
He can run out into the real

00:24:03.906 --> 00:24:04.386 A:middle
world here.

00:24:04.656 --> 00:24:06.576 A:middle
Oh this button looks kind of

00:24:06.576 --> 00:24:07.056 A:middle
tempting.

00:24:09.446 --> 00:24:11.216 A:middle
Yay.

00:24:12.516 --> 00:24:18.556 A:middle
[ Applause ]

00:24:19.056 --> 00:24:19.826 A:middle
So that gives you an idea of

00:24:19.826 --> 00:24:20.736 A:middle
what you can do when you use

00:24:20.736 --> 00:24:22.606 A:middle
SpriteKit in a 3D context with

00:24:22.606 --> 00:24:24.586 A:middle
SceneKit together with ARKit.

00:24:27.306 --> 00:24:28.946 A:middle
So as you saw using SpriteKit

00:24:28.946 --> 00:24:30.156 A:middle
with SceneKit allows for full 3D

00:24:30.156 --> 00:24:31.456 A:middle
transforms and perspective,

00:24:31.756 --> 00:24:32.436 A:middle
which allows you to do some

00:24:32.436 --> 00:24:33.216 A:middle
pretty neat things.

00:24:33.836 --> 00:24:35.376 A:middle
It allows you to mix 2D and 3D

00:24:35.376 --> 00:24:36.926 A:middle
content within the same context

00:24:37.516 --> 00:24:38.926 A:middle
and it's fully compatible with

00:24:38.926 --> 00:24:41.116 A:middle
the ARKit and it works great in

00:24:41.116 --> 00:24:42.286 A:middle
general 3D apps as well.

00:24:42.286 --> 00:24:46.556 A:middle
So now that we've covered how to

00:24:46.556 --> 00:24:48.176 A:middle
work with ARKit and SceneKit, I

00:24:48.176 --> 00:24:49.106 A:middle
would like to introduce you to a

00:24:49.106 --> 00:24:50.646 A:middle
another new SpriteKit feature --

00:24:51.086 --> 00:24:51.976 A:middle
SKRenderer.

00:24:53.136 --> 00:24:56.056 A:middle
Let's talk a bit about how

00:24:56.056 --> 00:24:57.496 A:middle
SpriteKit works under the hood.

00:24:58.376 --> 00:24:59.006 A:middle
As we've mentioned in the

00:24:59.006 --> 00:25:00.796 A:middle
previous section, with normal

00:25:00.796 --> 00:25:02.046 A:middle
SpriteKit Rendering you have

00:25:02.046 --> 00:25:03.616 A:middle
your scene and you set it on an

00:25:03.616 --> 00:25:05.566 A:middle
SKView, which then works with

00:25:05.566 --> 00:25:07.736 A:middle
UIKit and AppKit to get your

00:25:07.736 --> 00:25:09.046 A:middle
content on the screen.

00:25:10.296 --> 00:25:11.346 A:middle
SKView handles all of the

00:25:11.346 --> 00:25:12.826 A:middle
updating and rendering for you.

00:25:13.926 --> 00:25:14.796 A:middle
The upside of this is that it

00:25:14.796 --> 00:25:15.906 A:middle
makes it very easy to get

00:25:15.906 --> 00:25:16.826 A:middle
started with SpriteKit.

00:25:17.736 --> 00:25:18.666 A:middle
But what if you want to render

00:25:18.666 --> 00:25:20.256 A:middle
SpriteKit content in a 3D

00:25:20.256 --> 00:25:20.776 A:middle
context?

00:25:21.516 --> 00:25:24.276 A:middle
One solution as we showed you is

00:25:24.546 --> 00:25:26.306 A:middle
to use SpriteKit with SceneKit.

00:25:26.806 --> 00:25:28.356 A:middle
Instead of setting your scene on

00:25:28.356 --> 00:25:29.586 A:middle
the view, you use it as a

00:25:29.586 --> 00:25:31.056 A:middle
material in SceneKit.

00:25:31.936 --> 00:25:33.006 A:middle
And this let's you do all kinds

00:25:33.006 --> 00:25:33.616 A:middle
of cool stuff.

00:25:33.616 --> 00:25:35.976 A:middle
But when SpriteKit updates and

00:25:35.976 --> 00:25:37.226 A:middle
renders is still out of your

00:25:37.226 --> 00:25:37.796 A:middle
hands.

00:25:38.796 --> 00:25:40.896 A:middle
What if you want more control?

00:25:41.436 --> 00:25:42.416 A:middle
Maybe you want to update with

00:25:42.416 --> 00:25:45.396 A:middle
exact fixed time steps or update

00:25:45.396 --> 00:25:46.756 A:middle
without rendering or render

00:25:46.756 --> 00:25:48.866 A:middle
without updating or update once

00:25:48.866 --> 00:25:50.346 A:middle
and render twice, each time from

00:25:50.346 --> 00:25:51.076 A:middle
a different viewpoint.

00:25:52.286 --> 00:25:53.596 A:middle
What if we wanted to work

00:25:53.596 --> 00:25:56.186 A:middle
directly with Metal?

00:25:56.306 --> 00:25:57.676 A:middle
Enter SKRenderer.

00:26:00.026 --> 00:26:02.026 A:middle
You use it instead of SKView to

00:26:02.026 --> 00:26:03.196 A:middle
gain more control over

00:26:03.196 --> 00:26:03.866 A:middle
SpriteKit.

00:26:04.686 --> 00:26:07.986 A:middle
Like SKView, to use it you just

00:26:07.986 --> 00:26:09.926 A:middle
set it your scene -- you set

00:26:09.926 --> 00:26:10.876 A:middle
your scene on it on the

00:26:10.876 --> 00:26:11.236 A:middle
renderer.

00:26:11.886 --> 00:26:13.196 A:middle
Unlike SKView however,

00:26:13.526 --> 00:26:15.026 A:middle
SKRenderer let's you determine

00:26:15.026 --> 00:26:16.586 A:middle
when SpriteKit performs updating

00:26:16.586 --> 00:26:17.176 A:middle
and rendering.

00:26:18.136 --> 00:26:19.326 A:middle
It allows you to work directly

00:26:19.326 --> 00:26:20.956 A:middle
with Metal and then you can do

00:26:20.956 --> 00:26:22.326 A:middle
things like render SpriteKit

00:26:22.326 --> 00:26:23.436 A:middle
into an off screen texture to

00:26:23.656 --> 00:26:24.526 A:middle
use however you want.

00:26:25.466 --> 00:26:26.956 A:middle
This by the way is how SceneKit

00:26:26.956 --> 00:26:28.596 A:middle
is able to efficiently render

00:26:28.596 --> 00:26:30.356 A:middle
SpriteKit content in 3D.

00:26:30.386 --> 00:26:32.396 A:middle
It uses SKRenderer under the

00:26:32.966 --> 00:26:33.086 A:middle
hood.

00:26:34.716 --> 00:26:36.486 A:middle
There are four stages to using

00:26:36.556 --> 00:26:38.666 A:middle
SKRenderer -- initialization,

00:26:39.136 --> 00:26:41.756 A:middle
setting the scene, updating, and

00:26:41.756 --> 00:26:42.116 A:middle
rendering.

00:26:43.296 --> 00:26:44.616 A:middle
Initialization occurs once.

00:26:45.256 --> 00:26:46.406 A:middle
You set your scene at the start

00:26:46.406 --> 00:26:47.516 A:middle
and again we want the transition

00:26:47.516 --> 00:26:49.666 A:middle
to a new scene and update and

00:26:49.666 --> 00:26:51.386 A:middle
renderer repeat every frame in

00:26:51.386 --> 00:26:51.626 A:middle
your app.

00:26:51.626 --> 00:26:54.846 A:middle
Let's look at some code for each

00:26:55.706 --> 00:26:57.416 A:middle
of these stages.

00:26:57.506 --> 00:26:59.206 A:middle
Stage one Initialization.

00:26:59.756 --> 00:27:01.796 A:middle
To initialize SKRenderer, all

00:27:01.796 --> 00:27:02.716 A:middle
you need to do is provide it

00:27:02.836 --> 00:27:05.906 A:middle
with a Metal device.

00:27:06.656 --> 00:27:08.656 A:middle
Stage Two, setting the scene.

00:27:09.346 --> 00:27:10.556 A:middle
This works exactly the same as

00:27:10.556 --> 00:27:12.076 A:middle
with SKView, just that your

00:27:12.076 --> 00:27:13.726 A:middle
scene on SKRenderer's scene

00:27:13.726 --> 00:27:14.116 A:middle
property.

00:27:17.376 --> 00:27:18.866 A:middle
Stage Three, updating.

00:27:19.596 --> 00:27:21.096 A:middle
Also very simple, all you need

00:27:21.096 --> 00:27:23.386 A:middle
to do is pass in the current

00:27:25.176 --> 00:27:25.286 A:middle
time.

00:27:25.806 --> 00:27:27.166 A:middle
Stage four, rendering.

00:27:27.776 --> 00:27:28.676 A:middle
This is done by calling the

00:27:28.676 --> 00:27:29.786 A:middle
render method of which there are

00:27:29.786 --> 00:27:30.516 A:middle
two flavors.

00:27:31.266 --> 00:27:32.286 A:middle
Which one you want to use is

00:27:32.326 --> 00:27:33.446 A:middle
situational, depending on how

00:27:33.446 --> 00:27:34.776 A:middle
you want to use your SpriteKit

00:27:34.776 --> 00:27:35.816 A:middle
content with Metal.

00:27:36.506 --> 00:27:39.346 A:middle
Both methods ask you to specify

00:27:39.376 --> 00:27:40.466 A:middle
your viewport you like to render

00:27:40.466 --> 00:27:42.106 A:middle
into, which is just the CGrect

00:27:42.146 --> 00:27:43.076 A:middle
that defines the area of

00:27:43.076 --> 00:27:45.026 A:middle
SpriteKit will draw into in the

00:27:45.026 --> 00:27:48.456 A:middle
render target.

00:27:49.296 --> 00:27:50.886 A:middle
And they both take a Metal

00:27:50.886 --> 00:27:51.986 A:middle
render pass descriptor, which

00:27:51.986 --> 00:27:53.266 A:middle
describes that render target

00:27:53.266 --> 00:27:54.476 A:middle
that you want the SpriteKit

00:27:54.476 --> 00:27:58.616 A:middle
content to draw into.

00:27:59.076 --> 00:28:00.246 A:middle
Now the first method allows you

00:28:00.246 --> 00:28:01.986 A:middle
to specify the command buffer to

00:28:01.986 --> 00:28:03.346 A:middle
which SpriteKit will schedule

00:28:03.576 --> 00:28:04.376 A:middle
rendering commands.

00:28:05.396 --> 00:28:06.436 A:middle
A good case in which to call

00:28:06.436 --> 00:28:07.366 A:middle
this method is if you're not

00:28:07.446 --> 00:28:08.956 A:middle
directly mixing SpriteKit

00:28:08.956 --> 00:28:10.726 A:middle
content with other Metal content

00:28:10.846 --> 00:28:11.966 A:middle
in the same render target.

00:28:12.576 --> 00:28:13.646 A:middle
If you want to render a

00:28:13.646 --> 00:28:15.086 A:middle
SpriteKit scene into a texture

00:28:15.086 --> 00:28:16.176 A:middle
and then apply it through some

00:28:16.176 --> 00:28:17.846 A:middle
3D geometry like we did in the

00:28:17.846 --> 00:28:19.196 A:middle
second demo we showed you this

00:28:19.406 --> 00:28:20.326 A:middle
is the method you'd want to

00:28:20.326 --> 00:28:20.556 A:middle
call.

00:28:23.196 --> 00:28:25.276 A:middle
The second method gives you more

00:28:25.276 --> 00:28:26.656 A:middle
granularity by allowing you to

00:28:26.656 --> 00:28:28.956 A:middle
direct which render command

00:28:28.956 --> 00:28:30.516 A:middle
encoder SpriteKit will encode

00:28:30.566 --> 00:28:31.356 A:middle
its render commands.

00:28:31.886 --> 00:28:33.136 A:middle
This is good if you want to

00:28:33.136 --> 00:28:34.486 A:middle
directly mix SpriteKit and metal

00:28:34.486 --> 00:28:35.966 A:middle
content in the same render

00:28:35.966 --> 00:28:36.376 A:middle
target.

00:28:36.936 --> 00:28:38.326 A:middle
So you want to render some 2D

00:28:38.326 --> 00:28:39.636 A:middle
Metal content along with your

00:28:39.636 --> 00:28:41.266 A:middle
SpriteKit content or maybe you

00:28:41.266 --> 00:28:43.036 A:middle
want to overlay SpriteKit on top

00:28:43.036 --> 00:28:44.456 A:middle
of a Metal scene to display HUD

00:28:44.456 --> 00:28:44.966 A:middle
elements.

00:28:45.706 --> 00:28:47.116 A:middle
By using the same render command

00:28:47.116 --> 00:28:48.436 A:middle
and coder, you can do this much

00:28:48.436 --> 00:28:49.366 A:middle
more efficiently than if you

00:28:49.366 --> 00:28:50.376 A:middle
were using the first method.

00:28:50.376 --> 00:28:54.356 A:middle
All right, that's enough of an

00:28:54.356 --> 00:28:55.076 A:middle
API crawl.

00:28:55.346 --> 00:28:56.286 A:middle
Let's jump into a quick demo

00:28:56.286 --> 00:28:57.366 A:middle
showing SpriteKit rendering in

00:28:57.366 --> 00:28:59.986 A:middle
3D with Metal.

00:29:01.516 --> 00:29:08.836 A:middle
[ Applause ]

00:29:09.336 --> 00:29:11.986 A:middle
SO here we have a 3D scene in

00:29:11.986 --> 00:29:12.416 A:middle
Metal.

00:29:13.136 --> 00:29:14.446 A:middle
See we've got some nice lighting

00:29:14.446 --> 00:29:16.626 A:middle
and some shadows going on here

00:29:16.936 --> 00:29:18.246 A:middle
and we have this very tempting

00:29:18.246 --> 00:29:20.566 A:middle
looking arcade cabinet with our

00:29:20.866 --> 00:29:22.176 A:middle
beautiful SpriteKit framework

00:29:22.176 --> 00:29:22.766 A:middle
logo on it.

00:29:23.896 --> 00:29:26.996 A:middle
We walk up to it, Insert Coin,

00:29:27.296 --> 00:29:28.296 A:middle
that sounds like of tempting.

00:29:28.296 --> 00:29:29.076 A:middle
I've got a quarter here.

00:29:29.076 --> 00:29:30.126 A:middle
Let's plop that baby in.

00:29:30.126 --> 00:29:34.206 A:middle
Oh, you see we've got a full

00:29:34.206 --> 00:29:36.416 A:middle
SpriteKit scene rendering on

00:29:36.846 --> 00:29:38.786 A:middle
this 3D Metal scene.

00:29:39.376 --> 00:29:41.296 A:middle
And see we're using SKRenderer

00:29:41.666 --> 00:29:43.466 A:middle
to render SpriteKit into a

00:29:43.466 --> 00:29:44.936 A:middle
texture, which we're then

00:29:44.936 --> 00:29:46.746 A:middle
mapping onto the front of our

00:29:46.746 --> 00:29:47.836 A:middle
arcade cabinet here.

00:29:47.906 --> 00:29:49.956 A:middle
And then we're just applying a

00:29:49.956 --> 00:29:53.116 A:middle
cool CRT shader to an in Metal

00:29:53.426 --> 00:29:55.316 A:middle
to give it this old school look.

00:29:55.376 --> 00:29:57.166 A:middle
I can actually move around from

00:29:57.166 --> 00:29:58.516 A:middle
any angle I want to here and I

00:29:58.516 --> 00:30:00.926 A:middle
can interact with it like this.

00:30:01.046 --> 00:30:01.806 A:middle
It's a little bit of askew, but

00:30:01.806 --> 00:30:02.766 A:middle
you know, maybe this gives you

00:30:02.766 --> 00:30:04.206 A:middle
some memories of playing on an

00:30:04.206 --> 00:30:05.116 A:middle
arcade cabinet with your

00:30:05.116 --> 00:30:06.016 A:middle
friends, you're all crowded up

00:30:06.016 --> 00:30:06.436 A:middle
against it.

00:30:06.436 --> 00:30:08.716 A:middle
And you can view this from any

00:30:08.716 --> 00:30:10.246 A:middle
angle, you can view this all

00:30:10.246 --> 00:30:14.346 A:middle
from a distance, and it shows

00:30:14.346 --> 00:30:15.836 A:middle
you some of the things that you

00:30:15.896 --> 00:30:17.556 A:middle
can do with SpriteKit when you

00:30:17.556 --> 00:30:18.386 A:middle
use it with Metal.

00:30:18.656 --> 00:30:20.516 A:middle
It let's you use it 3D and then

00:30:20.516 --> 00:30:21.676 A:middle
you can do whatever you want

00:30:21.676 --> 00:30:22.396 A:middle
with that texture.

00:30:29.046 --> 00:30:29.766 A:middle
So that's SpriteKit and Metal

00:30:29.856 --> 00:30:30.456 A:middle
working together.

00:30:31.516 --> 00:30:35.776 A:middle
[ Applause ]

00:30:36.276 --> 00:30:37.446 A:middle
SKRenderer gives you more

00:30:37.446 --> 00:30:38.936 A:middle
control over SpriteKit than ever

00:30:38.936 --> 00:30:39.366 A:middle
before.

00:30:39.816 --> 00:30:40.716 A:middle
It allows you to determine

00:30:40.716 --> 00:30:41.956 A:middle
exactly when it updates and

00:30:41.956 --> 00:30:43.386 A:middle
renders and by interacting

00:30:43.386 --> 00:30:44.936 A:middle
directly with Metal you can use

00:30:44.936 --> 00:30:46.116 A:middle
rendered SpriteKit content

00:30:46.566 --> 00:30:47.496 A:middle
anyway you see fit.

00:30:50.846 --> 00:30:52.066 A:middle
As you've seen today SpriteKit

00:30:52.066 --> 00:30:54.086 A:middle
is useful in both 2D and 3D.

00:30:54.896 --> 00:30:55.976 A:middle
It's built to work well with

00:30:55.976 --> 00:30:57.216 A:middle
other graphics frameworks like

00:30:57.216 --> 00:30:58.436 A:middle
SceneKit and Metal.

00:30:58.436 --> 00:31:00.086 A:middle
And it's closely integrated with

00:31:00.086 --> 00:31:01.266 A:middle
ARKit, so that creating

00:31:01.266 --> 00:31:02.956 A:middle
augmented reality apps is as

00:31:03.056 --> 00:31:04.226 A:middle
easy as possible.

00:31:04.726 --> 00:31:06.306 A:middle
We've introduced new features

00:31:06.306 --> 00:31:07.586 A:middle
that give you more control than

00:31:07.586 --> 00:31:08.826 A:middle
ever allowing you to view

00:31:08.826 --> 00:31:09.916 A:middle
SpriteKit content in the View

00:31:09.916 --> 00:31:11.706 A:middle
Debugger and also giving you the

00:31:11.706 --> 00:31:13.386 A:middle
ability to take direct control

00:31:13.386 --> 00:31:14.646 A:middle
over when and how SpriteKit

00:31:14.646 --> 00:31:15.876 A:middle
updates and renders with a new

00:31:15.986 --> 00:31:16.656 A:middle
SKRenderer.

00:31:17.206 --> 00:31:19.006 A:middle
Today we've shown SpriteKit in

00:31:19.006 --> 00:31:20.156 A:middle
an entirely new light and we

00:31:20.156 --> 00:31:21.226 A:middle
hope that it's given you some

00:31:21.426 --> 00:31:23.036 A:middle
perspective on how you can use

00:31:23.036 --> 00:31:24.166 A:middle
it in ways that you may have

00:31:24.166 --> 00:31:25.136 A:middle
never thought of before.

00:31:26.776 --> 00:31:28.756 A:middle
So for information and access to

00:31:28.756 --> 00:31:29.916 A:middle
this session video please visit

00:31:30.006 --> 00:31:34.246 A:middle
developer.apple.com/wwdc17/609.

00:31:34.246 --> 00:31:36.886 A:middle
And please check out these

00:31:36.886 --> 00:31:37.736 A:middle
related sessions.

00:31:38.106 --> 00:31:39.236 A:middle
We gave just a small taste of

00:31:39.236 --> 00:31:40.206 A:middle
metal in today's section.

00:31:40.406 --> 00:31:41.866 A:middle
So please check out Introducing

00:31:41.866 --> 00:31:42.996 A:middle
Metal 2 if you're interested in

00:31:42.996 --> 00:31:43.566 A:middle
learning more.

00:31:43.636 --> 00:31:45.586 A:middle
I highly recommend watching

00:31:45.656 --> 00:31:46.796 A:middle
"Introducing ARKit" to learn

00:31:46.796 --> 00:31:48.336 A:middle
more about how it works in

00:31:48.336 --> 00:31:48.886 A:middle
detail.

00:31:48.976 --> 00:31:50.776 A:middle
And if our quick look at

00:31:50.776 --> 00:31:52.346 A:middle
SceneKit got your attention you

00:31:52.346 --> 00:31:53.136 A:middle
should look at their main

00:31:53.136 --> 00:31:53.816 A:middle
session this year.

00:31:54.906 --> 00:31:56.296 A:middle
And there's a lot of great stuff

00:31:56.296 --> 00:31:57.986 A:middle
in the Debugging with Xcode 9 on

00:31:57.986 --> 00:32:00.266 A:middle
top of SpriteKit working with a

00:32:00.266 --> 00:32:01.346 A:middle
new View Debugger.

00:32:01.806 --> 00:32:03.076 A:middle
Like wireless debugging which is

00:32:03.076 --> 00:32:04.386 A:middle
really awesome, so I recommend

00:32:04.386 --> 00:32:05.176 A:middle
watching that as well.

00:32:06.586 --> 00:32:07.756 A:middle
Thanks everyone and please enjoy

00:32:07.756 --> 00:32:08.716 A:middle
the rest of the conference.