WEBVTT

00:00:28.836 --> 00:00:29.846 A:middle
&gt;&gt; Hi everybody, I'm Nick

00:00:29.846 --> 00:00:30.336 A:middle
Porcino.

00:00:30.476 --> 00:00:32.116 A:middle
I work in the Games Technologies

00:00:32.116 --> 00:00:34.426 A:middle
Team, and I'm here to talk to

00:00:34.426 --> 00:00:36.736 A:middle
you today about taking your art

00:00:36.826 --> 00:00:39.186 A:middle
from, all the way from Asset to

00:00:39.186 --> 00:00:41.176 A:middle
Engine using Model I/O, so

00:00:41.276 --> 00:00:41.676 A:middle
welcome.

00:00:42.546 --> 00:00:46.006 A:middle
So, I'd like to begin by

00:00:46.006 --> 00:00:48.276 A:middle
refreshing you what's Model I/O.

00:00:49.006 --> 00:00:50.766 A:middle
Model I/O is Apple's toolkit for

00:00:50.766 --> 00:00:51.726 A:middle
building pipelines.

00:00:51.956 --> 00:00:53.776 A:middle
You can import and export 3D

00:00:53.776 --> 00:00:55.646 A:middle
assets in a variety of industry

00:00:55.646 --> 00:00:58.006 A:middle
standard file formats, such as

00:00:58.436 --> 00:01:00.546 A:middle
common ones like Wavefront OBJ

00:00:58.436 --> 00:01:00.546 A:middle
common ones like Wavefront OBJ

00:01:00.656 --> 00:01:02.206 A:middle
and more modern ones like

00:01:02.206 --> 00:01:03.056 A:middle
Pixar's USD.

00:01:03.646 --> 00:01:06.126 A:middle
It represents geometry and

00:01:06.126 --> 00:01:07.986 A:middle
materials, lighting, cameras,

00:01:08.086 --> 00:01:11.416 A:middle
voxels as well as lights and all

00:01:11.416 --> 00:01:12.126 A:middle
kinds of other things.

00:01:12.566 --> 00:01:14.226 A:middle
It does data format conversions,

00:01:14.556 --> 00:01:16.146 A:middle
so you can get your assets

00:01:16.146 --> 00:01:17.506 A:middle
coming in whatever format

00:01:17.506 --> 00:01:18.636 A:middle
they're originally authored in

00:01:18.806 --> 00:01:21.576 A:middle
and you can conform them to

00:01:21.576 --> 00:01:22.866 A:middle
particular strides and layouts

00:01:22.866 --> 00:01:23.896 A:middle
that you might need for Metal.

00:01:24.476 --> 00:01:25.416 A:middle
And, there's a variety of

00:01:25.416 --> 00:01:27.196 A:middle
processing tools and we'll

00:01:27.196 --> 00:01:28.436 A:middle
review them briefly at the end

00:01:28.436 --> 00:01:31.276 A:middle
of the talk.

00:01:31.486 --> 00:01:33.986 A:middle
So, this year, there's a bunch

00:01:33.986 --> 00:01:35.356 A:middle
of improvements in Model I/O.

00:01:35.396 --> 00:01:37.486 A:middle
I'm going to refer you to the

00:01:37.486 --> 00:01:39.196 A:middle
developer website to learn more

00:01:39.416 --> 00:01:41.556 A:middle
details, but just to give you a

00:01:41.896 --> 00:01:43.046 A:middle
taste of what's coming up.

00:01:43.626 --> 00:01:44.676 A:middle
There's improvements to the

00:01:44.676 --> 00:01:45.206 A:middle
importers.

00:01:45.206 --> 00:01:46.936 A:middle
We've got lots of feedback from

00:01:46.936 --> 00:01:49.086 A:middle
people who've loaded one exotic

00:01:49.136 --> 00:01:50.306 A:middle
file format or another and run

00:01:50.306 --> 00:01:50.816 A:middle
into issues.

00:01:50.816 --> 00:01:52.126 A:middle
We've corrected things as

00:01:52.646 --> 00:01:53.486 A:middle
needed.

00:01:53.906 --> 00:01:54.986 A:middle
We've introduced support for

00:01:54.986 --> 00:01:56.276 A:middle
skinned character animation.

00:01:56.676 --> 00:01:57.856 A:middle
And that's going to, that's

00:01:57.856 --> 00:01:59.876 A:middle
going to come up in a bit.

00:02:00.376 --> 00:02:02.026 A:middle
We're supporting blend shapes,

00:02:02.306 --> 00:02:03.656 A:middle
so if you have a character with

00:02:03.656 --> 00:02:04.936 A:middle
a say a smile and a frown, you

00:02:04.936 --> 00:02:06.536 A:middle
can go from one to the other

00:02:06.536 --> 00:02:07.516 A:middle
with this data structure.

00:02:07.966 --> 00:02:09.346 A:middle
And we've got transform stacks

00:02:09.836 --> 00:02:12.426 A:middle
which correspond to how data

00:02:12.426 --> 00:02:13.966 A:middle
looks in a program like for

00:02:13.966 --> 00:02:16.796 A:middle
example Maya where the animation

00:02:16.796 --> 00:02:17.926 A:middle
is going to be separated out

00:02:17.926 --> 00:02:19.326 A:middle
into rotations and skills and

00:02:19.326 --> 00:02:21.046 A:middle
translations and put in certain

00:02:21.046 --> 00:02:21.406 A:middle
orders.

00:02:22.196 --> 00:02:23.566 A:middle
Last year, we just gave you a

00:02:23.566 --> 00:02:25.976 A:middle
matrix, this year we can compose

00:02:26.366 --> 00:02:28.516 A:middle
the components of the animation

00:02:28.626 --> 00:02:30.406 A:middle
just the same as you do in an

00:02:30.406 --> 00:02:31.026 A:middle
authoring tool.

00:02:31.866 --> 00:02:36.096 A:middle
Now, most importantly, Model I/O

00:02:36.346 --> 00:02:38.076 A:middle
gives you a consistent view on

00:02:38.076 --> 00:02:38.446 A:middle
your data.

00:02:39.096 --> 00:02:42.046 A:middle
So, if you open up an asset, no

00:02:42.046 --> 00:02:43.226 A:middle
matter what format it was

00:02:43.226 --> 00:02:45.276 A:middle
originally, Model I/O is going

00:02:45.276 --> 00:02:48.036 A:middle
to normalize it so that as you

00:02:48.036 --> 00:02:49.726 A:middle
traverse it, you can write one

00:02:49.726 --> 00:02:51.096 A:middle
loop of code, it's going to know

00:02:51.096 --> 00:02:51.986 A:middle
how to go through all of the

00:02:51.986 --> 00:02:54.556 A:middle
data in a consistent way every

00:02:54.556 --> 00:02:55.836 A:middle
time and for every asset that

00:02:55.836 --> 00:02:56.836 A:middle
you ever load.

00:02:56.836 --> 00:02:58.306 A:middle
So, this particular asset that

00:02:58.306 --> 00:02:59.756 A:middle
I've got up here on the screen

00:03:00.126 --> 00:03:01.436 A:middle
is just a simple thing with a

00:03:01.466 --> 00:03:01.876 A:middle
car.

00:03:02.056 --> 00:03:03.446 A:middle
It's got a camera, it's got a

00:03:03.446 --> 00:03:03.746 A:middle
light.

00:03:04.036 --> 00:03:05.216 A:middle
The car is broken down into

00:03:05.216 --> 00:03:05.956 A:middle
components.

00:03:05.956 --> 00:03:06.956 A:middle
It's got materials.

00:03:07.836 --> 00:03:09.526 A:middle
No matter what scene I load up,

00:03:09.526 --> 00:03:11.696 A:middle
it's going to come in like this

00:03:11.696 --> 00:03:12.766 A:middle
and it's going to be easy to

00:03:12.766 --> 00:03:13.246 A:middle
traverse.

00:03:13.396 --> 00:03:15.546 A:middle
So, that's why Model I/O is

00:03:16.196 --> 00:03:18.206 A:middle
really easy and helpful in

00:03:18.206 --> 00:03:18.776 A:middle
pipelines.

00:03:20.686 --> 00:03:22.916 A:middle
Now, we want to make something

00:03:22.916 --> 00:03:23.696 A:middle
that looks like this.

00:03:23.696 --> 00:03:25.186 A:middle
So it's going to be my little

00:03:25.936 --> 00:03:26.046 A:middle
game.

00:03:26.046 --> 00:03:28.476 A:middle
And, the game is going to be

00:03:28.476 --> 00:03:30.466 A:middle
composed of art assets that were

00:03:30.466 --> 00:03:32.046 A:middle
prepared in another tool like

00:03:32.166 --> 00:03:33.466 A:middle
Maya for example or Blender or

00:03:33.466 --> 00:03:34.146 A:middle
whatever you like.

00:03:34.706 --> 00:03:36.456 A:middle
And there's going to be models.

00:03:36.456 --> 00:03:37.716 A:middle
There's going to be materials on

00:03:37.716 --> 00:03:38.356 A:middle
those models.

00:03:38.636 --> 00:03:40.086 A:middle
There's going to be animations,

00:03:40.776 --> 00:03:41.896 A:middle
textures of various sorts.

00:03:42.356 --> 00:03:43.546 A:middle
And we're going to put a scene

00:03:43.546 --> 00:03:45.556 A:middle
together from a lot of different

00:03:45.606 --> 00:03:46.126 A:middle
files.

00:03:47.316 --> 00:03:51.626 A:middle
Now, when an artist creates an

00:03:51.626 --> 00:03:54.106 A:middle
asset, they're in a pretty

00:03:54.146 --> 00:03:56.056 A:middle
sophisticated environment with a

00:03:56.056 --> 00:03:57.676 A:middle
lot of tools at their disposal.

00:03:58.066 --> 00:04:00.776 A:middle
So, for an artist the art and

00:03:58.066 --> 00:04:00.776 A:middle
So, for an artist the art and

00:04:00.776 --> 00:04:02.846 A:middle
the tool like Maya or Blender is

00:04:02.846 --> 00:04:04.706 A:middle
very much like source code for a

00:04:04.706 --> 00:04:05.246 A:middle
programmer.

00:04:05.696 --> 00:04:07.106 A:middle
It's got all kinds of things

00:04:07.326 --> 00:04:08.546 A:middle
that are super helpful for

00:04:08.546 --> 00:04:10.026 A:middle
iteration and development, but

00:04:10.076 --> 00:04:11.576 A:middle
that don't actually make it into

00:04:11.576 --> 00:04:12.036 A:middle
the runtime.

00:04:12.036 --> 00:04:12.896 A:middle
You don't ship your code you

00:04:12.896 --> 00:04:13.906 A:middle
ship your object code.

00:04:14.516 --> 00:04:16.495 A:middle
So, just like you compile source

00:04:17.396 --> 00:04:18.666 A:middle
for your object code in your

00:04:18.666 --> 00:04:19.516 A:middle
application, we're going to

00:04:19.516 --> 00:04:21.976 A:middle
compile assets to be optimal for

00:04:21.976 --> 00:04:22.426 A:middle
an engine.

00:04:23.536 --> 00:04:26.296 A:middle
Now, it's pretty tempting to

00:04:26.296 --> 00:04:28.686 A:middle
make nice little UI-based tool.

00:04:29.526 --> 00:04:30.926 A:middle
So maybe some Drag and Drop, and

00:04:30.926 --> 00:04:32.056 A:middle
lots of things to click and

00:04:32.096 --> 00:04:33.206 A:middle
slide around and so on and so

00:04:33.206 --> 00:04:34.756 A:middle
forth, and it's going to be fun

00:04:34.876 --> 00:04:35.866 A:middle
to build that tool and it's

00:04:35.866 --> 00:04:37.106 A:middle
going to be fun to use the first

00:04:37.106 --> 00:04:37.736 A:middle
few times.

00:04:38.306 --> 00:04:40.796 A:middle
But then, I did my first car,

00:04:40.926 --> 00:04:42.136 A:middle
and then the artist gave me 12

00:04:42.136 --> 00:04:43.576 A:middle
more cars, and it's like really,

00:04:43.576 --> 00:04:44.966 A:middle
I have to drag all of them in,

00:04:44.966 --> 00:04:46.326 A:middle
and I have to click all of those

00:04:46.326 --> 00:04:47.416 A:middle
buttons again and again and

00:04:47.416 --> 00:04:47.736 A:middle
again?

00:04:48.146 --> 00:04:49.346 A:middle
That kind of a tool becomes

00:04:49.616 --> 00:04:51.256 A:middle
overwhelming pretty quickly.

00:04:51.886 --> 00:04:52.986 A:middle
What we're going to talk about

00:04:52.986 --> 00:04:56.966 A:middle
is how to scale that work using

00:04:56.966 --> 00:04:57.526 A:middle
a pipeline.

00:04:58.566 --> 00:05:00.566 A:middle
So, we're going to start with

00:04:58.566 --> 00:05:00.566 A:middle
So, we're going to start with

00:05:00.566 --> 00:05:01.156 A:middle
the artwork.

00:05:01.606 --> 00:05:03.506 A:middle
We're going to use an exporter

00:05:03.686 --> 00:05:05.406 A:middle
to turn it into an asset.

00:05:07.026 --> 00:05:08.696 A:middle
We're going to use Model I/O to

00:05:08.696 --> 00:05:10.846 A:middle
transform that asset into

00:05:10.846 --> 00:05:11.846 A:middle
engine-ready data.

00:05:12.426 --> 00:05:14.806 A:middle
We're going to load that

00:05:14.806 --> 00:05:17.686 A:middle
engine-ready data into our

00:05:17.686 --> 00:05:18.026 A:middle
engine.

00:05:18.076 --> 00:05:19.506 A:middle
We're going to convert it into

00:05:19.506 --> 00:05:21.216 A:middle
Metal buffers and then we're

00:05:21.366 --> 00:05:22.336 A:middle
going to make a pretty picture.

00:05:23.586 --> 00:05:28.656 A:middle
So, the very first step is to

00:05:28.856 --> 00:05:29.686 A:middle
export the art.

00:05:30.246 --> 00:05:33.696 A:middle
Now, in the example that we've

00:05:33.696 --> 00:05:35.436 A:middle
put together, we're using Maya

00:05:35.766 --> 00:05:37.236 A:middle
and we have a little Python

00:05:37.236 --> 00:05:38.646 A:middle
script that goes through Maya,

00:05:38.646 --> 00:05:39.566 A:middle
finds all the things.

00:05:40.116 --> 00:05:42.776 A:middle
It traverses complex hierarchies

00:05:42.776 --> 00:05:46.256 A:middle
and files and it exports an

00:05:46.256 --> 00:05:46.826 A:middle
asset file.

00:05:47.556 --> 00:05:50.216 A:middle
Now, as I mentioned before, the

00:05:50.316 --> 00:05:51.796 A:middle
choice of file formats is pretty

00:05:51.796 --> 00:05:53.116 A:middle
important, and we're not going

00:05:53.116 --> 00:05:54.906 A:middle
to use something that's, you

00:05:54.906 --> 00:05:55.896 A:middle
know, a bit long in the tooth

00:05:55.896 --> 00:05:57.476 A:middle
like Wavefront OBJ, we're going

00:05:58.506 --> 00:06:00.156 A:middle
to use something fresh and

00:05:58.506 --> 00:06:00.156 A:middle
to use something fresh and

00:06:00.156 --> 00:06:01.486 A:middle
modern which is Pixar's

00:06:01.486 --> 00:06:02.736 A:middle
Universal Scene Description file

00:06:02.736 --> 00:06:03.146 A:middle
format.

00:06:03.146 --> 00:06:06.956 A:middle
Now, I'm just going to say a few

00:06:06.956 --> 00:06:10.106 A:middle
words about it and first of all,

00:06:10.346 --> 00:06:11.166 A:middle
there is a website.

00:06:11.166 --> 00:06:12.476 A:middle
You can see the URL there.

00:06:12.476 --> 00:06:15.086 A:middle
And you can find out all the

00:06:15.086 --> 00:06:16.186 A:middle
details and information that you

00:06:16.186 --> 00:06:17.476 A:middle
possibly want to know about USD

00:06:18.066 --> 00:06:18.686 A:middle
there.

00:06:18.826 --> 00:06:21.546 A:middle
Now, Pixar's Universal Scene

00:06:21.546 --> 00:06:22.706 A:middle
Description file format has been

00:06:22.706 --> 00:06:25.646 A:middle
in use at their site for years

00:06:25.646 --> 00:06:27.146 A:middle
in the production of feature

00:06:27.146 --> 00:06:27.866 A:middle
animation film.

00:06:28.266 --> 00:06:30.436 A:middle
And as you know, or you might

00:06:30.436 --> 00:06:31.966 A:middle
recall from last year's SceneKit

00:06:31.966 --> 00:06:33.416 A:middle
presentation, we integrated

00:06:33.416 --> 00:06:35.276 A:middle
Universal Scene Description into

00:06:35.276 --> 00:06:37.676 A:middle
the operating system, iOS and on

00:06:37.676 --> 00:06:39.366 A:middle
macOS last year.

00:06:39.836 --> 00:06:41.326 A:middle
And we've been working with

00:06:41.326 --> 00:06:43.126 A:middle
Pixar to improve that

00:06:43.126 --> 00:06:45.166 A:middle
integration over time and add

00:06:45.166 --> 00:06:45.826 A:middle
new features.

00:06:46.536 --> 00:06:49.556 A:middle
Now, what makes Universal Scene

00:06:49.556 --> 00:06:52.006 A:middle
Description like super powerful

00:06:52.836 --> 00:06:54.556 A:middle
compared to what we might have

00:06:54.556 --> 00:06:57.226 A:middle
had before is the fact that we

00:06:57.226 --> 00:06:58.826 A:middle
can take a whole ton of files

00:06:58.996 --> 00:07:00.346 A:middle
and we can compose them together

00:06:58.996 --> 00:07:00.346 A:middle
and we can compose them together

00:07:00.346 --> 00:07:01.486 A:middle
to make a complex scene.

00:07:02.006 --> 00:07:04.376 A:middle
So, in this particular sample

00:07:04.376 --> 00:07:07.426 A:middle
here, I've decomposed the pieces

00:07:07.776 --> 00:07:09.826 A:middle
from our race track, or from our

00:07:09.826 --> 00:07:12.266 A:middle
game with a race track, into the

00:07:12.266 --> 00:07:13.766 A:middle
building, the race track, a tire

00:07:13.766 --> 00:07:15.286 A:middle
wall, a car, and some wheels.

00:07:15.696 --> 00:07:17.566 A:middle
We're hierarchically composing

00:07:17.566 --> 00:07:19.356 A:middle
that all together into a single

00:07:19.356 --> 00:07:19.686 A:middle
file.

00:07:20.256 --> 00:07:22.006 A:middle
And, just like that diagram I

00:07:22.006 --> 00:07:24.496 A:middle
showed earlier where Model I/O

00:07:24.496 --> 00:07:26.296 A:middle
will read everything in into

00:07:27.076 --> 00:07:28.576 A:middle
easy to traverse format, that's

00:07:28.676 --> 00:07:30.396 A:middle
what we're going to get when we

00:07:30.396 --> 00:07:31.806 A:middle
load this file into Model I/O.

00:07:32.476 --> 00:07:34.726 A:middle
Now, the other great thing,

00:07:34.906 --> 00:07:36.416 A:middle
another great thing you get from

00:07:36.416 --> 00:07:37.826 A:middle
Universal Scene Description is

00:07:37.826 --> 00:07:39.196 A:middle
this idea of variations.

00:07:39.556 --> 00:07:42.116 A:middle
So, this is a really powerful

00:07:42.116 --> 00:07:43.556 A:middle
tool for artists to use when

00:07:43.556 --> 00:07:44.156 A:middle
they're putting a scene

00:07:44.156 --> 00:07:44.596 A:middle
together.

00:07:44.596 --> 00:07:46.006 A:middle
If I want to have lots of cars

00:07:46.006 --> 00:07:47.516 A:middle
on that race track, what I can

00:07:47.516 --> 00:07:49.156 A:middle
do with USD is make a single car

00:07:49.156 --> 00:07:50.826 A:middle
file, and I can have some

00:07:50.826 --> 00:07:51.996 A:middle
shading variations.

00:07:52.036 --> 00:07:53.306 A:middle
You can see them here, yellow,

00:07:53.306 --> 00:07:54.176 A:middle
green, red.

00:07:54.486 --> 00:07:56.626 A:middle
And modeling variations, with a

00:07:56.626 --> 00:07:58.026 A:middle
fin and not with a fin.

00:07:58.546 --> 00:07:59.996 A:middle
So, I can reference them into

00:07:59.996 --> 00:08:02.246 A:middle
the file, pick which versions

00:07:59.996 --> 00:08:02.246 A:middle
the file, pick which versions

00:08:02.246 --> 00:08:04.536 A:middle
that I want, and then Model I/O

00:08:04.826 --> 00:08:05.826 A:middle
will essentially flatten that

00:08:05.826 --> 00:08:06.946 A:middle
all down so that when you're

00:08:06.946 --> 00:08:08.426 A:middle
traversing the data structures

00:08:08.426 --> 00:08:10.096 A:middle
and looking to the data to make

00:08:10.096 --> 00:08:12.016 A:middle
your buffers, it's going to find

00:08:12.016 --> 00:08:12.886 A:middle
the right things for you.

00:08:13.586 --> 00:08:16.326 A:middle
And I also want to mention that

00:08:16.376 --> 00:08:17.966 A:middle
Universal Scene Description has

00:08:18.336 --> 00:08:21.536 A:middle
a ASCII format and a fast binary

00:08:21.536 --> 00:08:21.976 A:middle
format.

00:08:22.386 --> 00:08:25.266 A:middle
So, the mesh with all of the

00:08:25.266 --> 00:08:26.546 A:middle
thousands of vertices, normals,

00:08:26.546 --> 00:08:27.626 A:middle
and so on, I'm going to export

00:08:27.626 --> 00:08:28.306 A:middle
as binary.

00:08:28.736 --> 00:08:30.496 A:middle
But on the other hand, if I want

00:08:30.496 --> 00:08:31.816 A:middle
to just noodle around with the

00:08:31.816 --> 00:08:35.285 A:middle
data, I can write text that

00:08:35.285 --> 00:08:37.326 A:middle
looks like this, where here I've

00:08:37.356 --> 00:08:41.285 A:middle
got a world with an animation on

00:08:41.285 --> 00:08:44.626 A:middle
a car and the car is referenced

00:08:45.066 --> 00:08:47.146 A:middle
and I'm actually changing just

00:08:47.146 --> 00:08:49.476 A:middle
the color on this car, and I put

00:08:49.476 --> 00:08:50.686 A:middle
it in the animation scene, and

00:08:50.686 --> 00:08:52.116 A:middle
it's not animated by, you know,

00:08:52.426 --> 00:08:53.536 A:middle
it's general principle here.

00:08:54.356 --> 00:08:56.796 A:middle
And this is really powerful for

00:08:56.796 --> 00:08:58.686 A:middle
just making variations and

00:08:58.686 --> 00:09:00.706 A:middle
iterating your assets offline

00:08:58.686 --> 00:09:00.706 A:middle
iterating your assets offline

00:09:01.116 --> 00:09:01.726 A:middle
experimenting.

00:09:02.486 --> 00:09:06.056 A:middle
So, what we're going to build is

00:09:06.056 --> 00:09:07.746 A:middle
a little tool that's going to

00:09:07.906 --> 00:09:08.796 A:middle
take that Universal Scene

00:09:08.796 --> 00:09:10.736 A:middle
Description asset and turn it

00:09:10.876 --> 00:09:13.856 A:middle
into engine-ready data.

00:09:14.046 --> 00:09:16.016 A:middle
So, command line tool.

00:09:16.816 --> 00:09:19.296 A:middle
The thing that we're going to

00:09:19.296 --> 00:09:20.696 A:middle
get form having a command line

00:09:20.696 --> 00:09:22.356 A:middle
tool is that it's going to be

00:09:22.356 --> 00:09:22.796 A:middle
repeatable.

00:09:22.856 --> 00:09:24.096 A:middle
It's repeatable because it's got

00:09:24.096 --> 00:09:25.076 A:middle
command line arguments.

00:09:26.306 --> 00:09:27.836 A:middle
The operation of tools can be

00:09:28.076 --> 00:09:29.396 A:middle
consistent because we've got

00:09:29.396 --> 00:09:30.896 A:middle
well defined inputs and outputs

00:09:30.896 --> 00:09:31.946 A:middle
and parameters.

00:09:31.946 --> 00:09:34.006 A:middle
It's going to be scriptable.

00:09:34.506 --> 00:09:36.606 A:middle
So, you can batch your tools,

00:09:36.606 --> 00:09:37.846 A:middle
you can sequence your tools.

00:09:39.096 --> 00:09:39.806 A:middle
It's going to give us the

00:09:39.866 --> 00:09:41.406 A:middle
scalability that we didn't have

00:09:41.406 --> 00:09:42.396 A:middle
with the graphical user

00:09:42.396 --> 00:09:44.876 A:middle
interface tool, and because we

00:09:44.876 --> 00:09:46.406 A:middle
can have automation without

00:09:46.406 --> 00:09:47.076 A:middle
intervention.

00:09:47.536 --> 00:09:49.276 A:middle
For example, the artist might

00:09:49.276 --> 00:09:50.786 A:middle
have a Dropbox folder somewhere,

00:09:51.126 --> 00:09:51.966 A:middle
where they're just going to

00:09:51.966 --> 00:09:53.366 A:middle
throw all of their assets in

00:09:53.366 --> 00:09:54.486 A:middle
whenever they're ready to be

00:09:54.486 --> 00:09:55.816 A:middle
integrated into the engine, we

00:09:55.816 --> 00:09:57.076 A:middle
can have a little script

00:09:57.076 --> 00:09:58.386 A:middle
monitoring that directory.

00:09:59.046 --> 00:10:00.316 A:middle
Whenever it notices there's new

00:09:59.046 --> 00:10:00.316 A:middle
Whenever it notices there's new

00:10:00.316 --> 00:10:02.286 A:middle
files, the processes that we're

00:10:02.286 --> 00:10:03.426 A:middle
going to talk about in a moment

00:10:03.476 --> 00:10:05.336 A:middle
can automatically run, make it

00:10:05.336 --> 00:10:07.106 A:middle
engine-ready, and then move it

00:10:07.466 --> 00:10:09.046 A:middle
so that when you build in Xcode,

00:10:09.156 --> 00:10:10.036 A:middle
all the assets will be

00:10:10.036 --> 00:10:11.826 A:middle
automatically imported and ready

00:10:11.826 --> 00:10:12.396 A:middle
for your game.

00:10:13.576 --> 00:10:15.136 A:middle
And finally, this kind of tool

00:10:15.136 --> 00:10:16.616 A:middle
is composable, and that's what

00:10:16.616 --> 00:10:18.266 A:middle
the little arc on the right side

00:10:18.266 --> 00:10:19.676 A:middle
of the diagram indicates.

00:10:20.186 --> 00:10:21.466 A:middle
It's composable in the sense

00:10:21.496 --> 00:10:23.516 A:middle
that if I've got multiple tools

00:10:23.516 --> 00:10:24.536 A:middle
and they can all read and write

00:10:24.536 --> 00:10:26.546 A:middle
the same blocks of data, then I

00:10:26.676 --> 00:10:28.326 A:middle
can feed one tool into another.

00:10:28.326 --> 00:10:30.236 A:middle
I might do one tool and to

00:10:30.236 --> 00:10:32.826 A:middle
extract all the meshes and light

00:10:32.826 --> 00:10:33.446 A:middle
map them.

00:10:33.446 --> 00:10:35.086 A:middle
I might do another tool to find

00:10:35.086 --> 00:10:36.316 A:middle
all the textures and make a list

00:10:36.316 --> 00:10:36.956 A:middle
of textures.

00:10:37.426 --> 00:10:39.016 A:middle
And I make lots of little tools

00:10:39.016 --> 00:10:40.266 A:middle
like that and put them together

00:10:40.716 --> 00:10:41.916 A:middle
into a workflow.

00:10:43.196 --> 00:10:47.136 A:middle
So, in this sample, it's a very

00:10:47.136 --> 00:10:47.656 A:middle
simple one.

00:10:48.006 --> 00:10:49.976 A:middle
And it doesn't go into a whole

00:10:49.976 --> 00:10:52.276 A:middle
lot of you know best practices

00:10:52.276 --> 00:10:54.316 A:middle
but it does give you a

00:10:54.316 --> 00:10:55.866 A:middle
simplified data format that's

00:10:55.866 --> 00:10:57.026 A:middle
really easy to understand so

00:10:57.186 --> 00:10:58.266 A:middle
that you can match what we're

00:10:58.266 --> 00:10:59.276 A:middle
talking about versus what you

00:10:59.276 --> 00:10:59.886 A:middle
see in the code.

00:11:00.386 --> 00:11:01.446 A:middle
There's no compression because

00:11:01.536 --> 00:11:02.646 A:middle
you don't want to obscure

00:11:02.646 --> 00:11:03.746 A:middle
anything about what's going on.

00:11:04.766 --> 00:11:06.036 A:middle
This thing's intended to be a

00:11:06.036 --> 00:11:08.816 A:middle
jumping off point for you to

00:11:08.816 --> 00:11:10.476 A:middle
start to build your own pipeline

00:11:10.476 --> 00:11:11.986 A:middle
tools and elaborate them to

00:11:11.986 --> 00:11:13.336 A:middle
match your own engines and data

00:11:13.336 --> 00:11:13.916 A:middle
formats.

00:11:14.336 --> 00:11:17.196 A:middle
So, also like to talk a little

00:11:17.196 --> 00:11:18.626 A:middle
bit about the toy engine that

00:11:18.626 --> 00:11:19.406 A:middle
we're going to put together.

00:11:20.856 --> 00:11:21.786 A:middle
It's got a really simple

00:11:21.786 --> 00:11:22.576 A:middle
renderer in it.

00:11:22.576 --> 00:11:23.676 A:middle
It's all written in Swift and

00:11:23.676 --> 00:11:23.976 A:middle
Metal.

00:11:24.356 --> 00:11:25.536 A:middle
It's a single-pass forward

00:11:25.536 --> 00:11:26.826 A:middle
renderer, physically-based

00:11:26.826 --> 00:11:28.986 A:middle
shader, mesh instancing, skinned

00:11:28.986 --> 00:11:30.976 A:middle
and animated meshes, multiple

00:11:30.976 --> 00:11:31.456 A:middle
materials.

00:11:32.176 --> 00:11:34.596 A:middle
Ticking off lots of bullet

00:11:34.596 --> 00:11:35.076 A:middle
points there.

00:11:35.806 --> 00:11:37.186 A:middle
It's got a straight forward

00:11:37.186 --> 00:11:37.776 A:middle
rendering loop.

00:11:38.216 --> 00:11:39.846 A:middle
We have on the left side of the

00:11:39.846 --> 00:11:41.796 A:middle
diagram, some meshes to draw.

00:11:42.876 --> 00:11:44.326 A:middle
For everything that we want to

00:11:44.326 --> 00:11:45.526 A:middle
draw, we're going to set

00:11:46.016 --> 00:11:47.736 A:middle
transform buffer, skinning data,

00:11:47.736 --> 00:11:49.466 A:middle
vertex buffers, set our pipeline

00:11:49.466 --> 00:11:51.326 A:middle
state, material uniforms,

00:11:51.646 --> 00:11:52.606 A:middle
fragment textures.

00:11:52.906 --> 00:11:53.836 A:middle
And we're going to draw indexed

00:11:54.106 --> 00:11:55.536 A:middle
primitive to make the pretty

00:11:55.536 --> 00:11:55.896 A:middle
picture.

00:11:56.526 --> 00:11:59.776 A:middle
So, we're going to call that

00:11:59.776 --> 00:12:00.466 A:middle
tool the baker.

00:11:59.776 --> 00:12:00.466 A:middle
tool the baker.

00:12:01.706 --> 00:12:03.666 A:middle
So what are we going to bake?

00:12:06.136 --> 00:12:08.246 A:middle
We're going to bake, first of

00:12:08.246 --> 00:12:09.586 A:middle
all, geometry and

00:12:09.586 --> 00:12:11.246 A:middle
transformations, what something

00:12:11.246 --> 00:12:12.896 A:middle
looks like and where it sits.

00:12:14.006 --> 00:12:16.016 A:middle
Texture paths and materials so

00:12:16.016 --> 00:12:17.146 A:middle
that when we're drawing those

00:12:17.146 --> 00:12:18.076 A:middle
somethings we know what they're

00:12:18.076 --> 00:12:18.776 A:middle
going to look like.

00:12:19.316 --> 00:12:20.836 A:middle
Instancing data so if we have

00:12:21.236 --> 00:12:23.026 A:middle
say more than wheel, we're going

00:12:23.026 --> 00:12:24.296 A:middle
to have information that tells

00:12:24.296 --> 00:12:26.366 A:middle
us where to put many copies of

00:12:26.366 --> 00:12:27.606 A:middle
that wheel in an efficient way.

00:12:28.356 --> 00:12:30.146 A:middle
Transform animation, so that

00:12:30.146 --> 00:12:31.536 A:middle
things can be animated.

00:12:32.216 --> 00:12:33.866 A:middle
And finally, we're going to talk

00:12:33.866 --> 00:12:35.196 A:middle
about skinning and character

00:12:35.196 --> 00:12:35.696 A:middle
animation.

00:12:36.306 --> 00:12:40.116 A:middle
So, first of all, geometry and

00:12:40.116 --> 00:12:41.046 A:middle
transformations.

00:12:42.496 --> 00:12:44.666 A:middle
Now, from basic computer

00:12:44.666 --> 00:12:45.656 A:middle
graphics you're probably

00:12:45.656 --> 00:12:47.046 A:middle
familiar with a scene graph.

00:12:47.806 --> 00:12:48.946 A:middle
We've got a transformational

00:12:48.946 --> 00:12:49.786 A:middle
hierarchy here.

00:12:49.926 --> 00:12:51.926 A:middle
A couple of transform nodes A

00:12:51.926 --> 00:12:52.756 A:middle
and B.

00:12:53.126 --> 00:12:55.426 A:middle
And A is perhaps a world's node

00:12:55.586 --> 00:12:56.826 A:middle
and maybe it doesn't provide

00:12:56.826 --> 00:12:57.816 A:middle
anything but an identity

00:12:57.816 --> 00:12:58.616 A:middle
transformation.

00:12:58.616 --> 00:13:01.196 A:middle
B is a transformation that says

00:12:58.616 --> 00:13:01.196 A:middle
B is a transformation that says

00:13:01.196 --> 00:13:02.436 A:middle
where is the car in the world.

00:13:02.966 --> 00:13:05.686 A:middle
And my racing car as one wheel,

00:13:05.686 --> 00:13:06.566 A:middle
pretend you can see all the

00:13:06.566 --> 00:13:07.776 A:middle
other wheels off the bottom of

00:13:07.776 --> 00:13:08.296 A:middle
my slide here.

00:13:08.806 --> 00:13:10.086 A:middle
And we've got a body.

00:13:10.946 --> 00:13:14.756 A:middle
So, the way a transform

00:13:14.756 --> 00:13:16.976 A:middle
hierarchy works is if I move the

00:13:16.976 --> 00:13:18.236 A:middle
parent node everything

00:13:18.236 --> 00:13:19.286 A:middle
underneath that parent node

00:13:19.446 --> 00:13:23.036 A:middle
moves together as a unit.

00:13:23.176 --> 00:13:25.666 A:middle
So, what we want to do is we

00:13:25.666 --> 00:13:26.976 A:middle
want to get that information

00:13:27.356 --> 00:13:29.316 A:middle
into our engine so that it can

00:13:29.316 --> 00:13:30.196 A:middle
render it ultimately.

00:13:30.526 --> 00:13:32.836 A:middle
So we want to compactly encode

00:13:32.836 --> 00:13:34.736 A:middle
that in a way that's easy to

00:13:34.736 --> 00:13:36.126 A:middle
store and easy to read and

00:13:36.126 --> 00:13:37.586 A:middle
doesn't require me to fix up

00:13:37.586 --> 00:13:39.706 A:middle
pointers or any of that kind of

00:13:40.256 --> 00:13:40.366 A:middle
thing.

00:13:40.586 --> 00:13:42.866 A:middle
So, what I'm going to do is I'm

00:13:42.866 --> 00:13:43.826 A:middle
going to flatten and

00:13:43.826 --> 00:13:46.056 A:middle
linearalize, linearalize that

00:13:46.056 --> 00:13:46.426 A:middle
array.

00:13:46.836 --> 00:13:47.836 A:middle
I hope I don't have to say that

00:13:47.836 --> 00:13:48.216 A:middle
word again.

00:13:48.796 --> 00:13:52.016 A:middle
So, we're going to make an array

00:13:52.186 --> 00:13:53.666 A:middle
of local transformations.

00:13:53.966 --> 00:13:56.446 A:middle
So the first one A is probably

00:13:56.446 --> 00:13:58.216 A:middle
identity, the world, world

00:13:58.276 --> 00:13:59.226 A:middle
matrix.

00:13:59.946 --> 00:14:01.526 A:middle
Then another matrix to tell us

00:13:59.946 --> 00:14:01.526 A:middle
Then another matrix to tell us

00:14:01.526 --> 00:14:02.406 A:middle
where is the car.

00:14:03.276 --> 00:14:05.046 A:middle
Another matrix to tell me where

00:14:05.046 --> 00:14:06.296 A:middle
is the, the wheel.

00:14:07.276 --> 00:14:08.556 A:middle
Another matrix to tell me where

00:14:08.556 --> 00:14:09.436 A:middle
is the car's body.

00:14:09.436 --> 00:14:12.286 A:middle
I'm going to assign indices

00:14:12.286 --> 00:14:13.056 A:middle
because those are going to be

00:14:13.056 --> 00:14:14.126 A:middle
really useful in a moment.

00:14:14.566 --> 00:14:16.586 A:middle
So, 0, 1, 2, 3 that was the

00:14:16.616 --> 00:14:20.386 A:middle
in-order traversal of the scene

00:14:20.956 --> 00:14:21.086 A:middle
graph.

00:14:21.266 --> 00:14:22.776 A:middle
Now, I'm going to encode the

00:14:22.776 --> 00:14:23.336 A:middle
tree.

00:14:24.176 --> 00:14:25.436 A:middle
So, I'm going to make another

00:14:25.436 --> 00:14:26.606 A:middle
array of parent indices.

00:14:26.726 --> 00:14:29.176 A:middle
The first entry is nil.

00:14:29.176 --> 00:14:32.086 A:middle
The world has no parent.

00:14:33.156 --> 00:14:36.626 A:middle
The car's root B has a parent at

00:14:36.626 --> 00:14:38.166 A:middle
index 0, which is the world.

00:14:39.716 --> 00:14:42.926 A:middle
The wheel is parented under the

00:14:43.106 --> 00:14:45.216 A:middle
B, transfer node, as would the

00:14:45.216 --> 00:14:46.246 A:middle
other wheels be.

00:14:47.456 --> 00:14:49.666 A:middle
The body is also parented under

00:14:49.666 --> 00:14:50.156 A:middle
that node.

00:14:51.126 --> 00:14:53.896 A:middle
So, we've encoded a graph.

00:14:54.546 --> 00:14:55.836 A:middle
Finally, we're going to want to

00:14:55.836 --> 00:14:57.516 A:middle
be able to tell the engine what

00:14:57.516 --> 00:14:59.136 A:middle
to draw, so we're going to draw

00:14:59.136 --> 00:15:01.186 A:middle
a wheel, which is at index 2.

00:14:59.136 --> 00:15:01.186 A:middle
a wheel, which is at index 2.

00:15:01.296 --> 00:15:03.196 A:middle
And we're going to draw the body

00:15:03.456 --> 00:15:04.606 A:middle
which is at index 3.

00:15:05.476 --> 00:15:08.756 A:middle
So, we've described our scene in

00:15:08.936 --> 00:15:09.906 A:middle
a way that's really easy to

00:15:09.906 --> 00:15:10.266 A:middle
write out.

00:15:11.586 --> 00:15:13.606 A:middle
And now, we also just need to

00:15:13.606 --> 00:15:14.596 A:middle
tell what to draw.

00:15:15.056 --> 00:15:17.196 A:middle
So, that's going to be a vertex

00:15:17.196 --> 00:15:19.936 A:middle
descriptor, which is an array

00:15:19.936 --> 00:15:21.216 A:middle
that's going to tell Metal these

00:15:21.216 --> 00:15:22.526 A:middle
are normals, these are texture

00:15:22.526 --> 00:15:23.496 A:middle
coordinates, these are

00:15:23.496 --> 00:15:25.476 A:middle
positions, the actual vertex

00:15:25.476 --> 00:15:26.476 A:middle
buffers themselves.

00:15:26.476 --> 00:15:28.316 A:middle
And then the index buffer that

00:15:28.316 --> 00:15:29.876 A:middle
just says, you know, these

00:15:30.096 --> 00:15:31.346 A:middle
indices correspond to these

00:15:31.346 --> 00:15:32.966 A:middle
triangles in the vertex buffers.

00:15:33.526 --> 00:15:38.336 A:middle
So, it's really easy to do this

00:15:38.916 --> 00:15:39.886 A:middle
with our consistent data

00:15:39.886 --> 00:15:40.436 A:middle
structures.

00:15:40.956 --> 00:15:41.986 A:middle
We're going to run through all

00:15:41.986 --> 00:15:44.566 A:middle
of the objects in the MDLAsset

00:15:44.716 --> 00:15:46.656 A:middle
object after we've imported it.

00:15:47.396 --> 00:15:50.036 A:middle
If the object can be casted to

00:15:50.116 --> 00:15:52.956 A:middle
MDLMesh, we're going to fetch

00:15:52.956 --> 00:15:54.896 A:middle
out the vertexDescriptor which

00:15:54.896 --> 00:15:56.166 A:middle
tells us that we've got

00:15:56.166 --> 00:15:59.026 A:middle
positions and normalcy.

00:15:59.086 --> 00:16:00.696 A:middle
For all of the vertex buffers,

00:15:59.086 --> 00:16:00.696 A:middle
For all of the vertex buffers,

00:16:00.816 --> 00:16:02.436 A:middle
that are in that mesh, we're

00:16:02.436 --> 00:16:04.366 A:middle
just going to create an NSData

00:16:04.616 --> 00:16:07.196 A:middle
from the vertex buffer bytes and

00:16:07.476 --> 00:16:09.536 A:middle
how long it is, and the dot dot

00:16:09.536 --> 00:16:10.696 A:middle
dot just tells us that we're

00:16:10.696 --> 00:16:12.016 A:middle
going to store that NSData

00:16:12.016 --> 00:16:13.406 A:middle
somewhere for encoding.

00:16:13.946 --> 00:16:17.166 A:middle
Then, we're going run through

00:16:17.166 --> 00:16:18.356 A:middle
the submeshes and just a quick

00:16:18.576 --> 00:16:20.006 A:middle
note about what is submesh.

00:16:20.396 --> 00:16:21.536 A:middle
And since I've just introduced

00:16:21.536 --> 00:16:22.786 A:middle
that word, if we just think

00:16:22.786 --> 00:16:24.266 A:middle
about that wheel, the wheel had

00:16:24.266 --> 00:16:26.266 A:middle
a rubber tire and a metal rim,

00:16:26.386 --> 00:16:26.606 A:middle
right?

00:16:27.036 --> 00:16:28.356 A:middle
So, we're probably going to have

00:16:28.356 --> 00:16:29.866 A:middle
two materials and therefore two

00:16:29.866 --> 00:16:30.526 A:middle
draw calls.

00:16:30.966 --> 00:16:31.756 A:middle
But it's one mesh.

00:16:31.756 --> 00:16:32.706 A:middle
There are going to share a lot

00:16:32.706 --> 00:16:33.826 A:middle
of vertices, like on the

00:16:33.826 --> 00:16:35.696 A:middle
intersection between the tire

00:16:35.696 --> 00:16:36.106 A:middle
and the rim.

00:16:36.106 --> 00:16:37.426 A:middle
So, we're going to make two

00:16:37.426 --> 00:16:40.336 A:middle
submeshes to just index the rim

00:16:40.586 --> 00:16:42.466 A:middle
and the tire with their own

00:16:42.466 --> 00:16:44.566 A:middle
independent index buffers and

00:16:44.566 --> 00:16:44.976 A:middle
meshes.

00:16:45.196 --> 00:16:47.386 A:middle
So, we run through them, we cast

00:16:47.536 --> 00:16:47.686 A:middle
them.

00:16:47.686 --> 00:16:49.146 A:middle
If we successfully cast them, we

00:16:49.146 --> 00:16:51.896 A:middle
create some NSDatas and stash

00:16:51.896 --> 00:16:52.626 A:middle
them for storage.

00:16:53.256 --> 00:16:55.946 A:middle
Finally, for all of the objects

00:16:57.126 --> 00:16:59.136 A:middle
in the asset, we're just going

00:16:59.136 --> 00:17:01.696 A:middle
to find if there's a transform

00:16:59.136 --> 00:17:01.696 A:middle
to find if there's a transform

00:17:01.696 --> 00:17:04.425 A:middle
on the object, then grab its

00:17:04.425 --> 00:17:05.856 A:middle
matrix and store it in the

00:17:05.856 --> 00:17:06.116 A:middle
array.

00:17:06.766 --> 00:17:08.526 A:middle
Well NSEncode and archive it,

00:17:08.945 --> 00:17:10.316 A:middle
and these are the buffers that

00:17:10.316 --> 00:17:11.876 A:middle
are going to go off to the disc.

00:17:12.276 --> 00:17:14.316 A:middle
And the mesh data, descriptors,

00:17:14.316 --> 00:17:16.336 A:middle
vertex and index buffers, the

00:17:16.336 --> 00:17:18.306 A:middle
scene data which is the

00:17:18.366 --> 00:17:21.746 A:middle
linearalization of the indices

00:17:21.976 --> 00:17:23.646 A:middle
of the hierarchy, and finally

00:17:23.646 --> 00:17:24.935 A:middle
the transformation data the

00:17:24.935 --> 00:17:26.366 A:middle
actual places to put those

00:17:26.366 --> 00:17:26.715 A:middle
things.

00:17:27.165 --> 00:17:31.016 A:middle
Next, we're going to fetch out

00:17:31.336 --> 00:17:33.336 A:middle
all of the material data.

00:17:33.896 --> 00:17:37.076 A:middle
So, for every submesh, we're

00:17:37.076 --> 00:17:38.406 A:middle
going to find out that there's

00:17:38.876 --> 00:17:39.646 A:middle
possibly a material.

00:17:39.646 --> 00:17:41.186 A:middle
And if there's a material, we're

00:17:41.186 --> 00:17:42.926 A:middle
going to find the parameters

00:17:43.186 --> 00:17:45.216 A:middle
that are needed by our shader.

00:17:45.496 --> 00:17:47.036 A:middle
If our shader needs say diffuse

00:17:47.036 --> 00:17:49.086 A:middle
color and roughness, then we'll

00:17:49.086 --> 00:17:50.836 A:middle
ask the MDLMaterial hey have you

00:17:50.836 --> 00:17:52.936 A:middle
got those values, and then we're

00:17:53.046 --> 00:17:54.316 A:middle
going to check is it a scaler

00:17:54.316 --> 00:17:56.956 A:middle
value or is texture and we're

00:17:56.956 --> 00:17:58.466 A:middle
grab that out and record it.

00:17:59.606 --> 00:18:01.026 A:middle
Once again, the code's really

00:17:59.606 --> 00:18:01.026 A:middle
Once again, the code's really

00:18:01.026 --> 00:18:01.646 A:middle
straightforward.

00:18:02.996 --> 00:18:04.206 A:middle
If the submesh has a material,

00:18:04.206 --> 00:18:06.836 A:middle
run through all the properties.

00:18:07.336 --> 00:18:08.456 A:middle
What I'm not showing you here is

00:18:08.456 --> 00:18:10.046 A:middle
just filtering out the ones that

00:18:10.046 --> 00:18:11.206 A:middle
we actually care about for our

00:18:11.206 --> 00:18:11.936 A:middle
run-time shader.

00:18:11.986 --> 00:18:13.676 A:middle
But once we've got to the point

00:18:13.676 --> 00:18:14.576 A:middle
of filtering it out, we're then

00:18:14.576 --> 00:18:17.096 A:middle
going to say, hey property are

00:18:17.096 --> 00:18:18.636 A:middle
you a string or URL?

00:18:19.006 --> 00:18:20.466 A:middle
If so, we're referring to a

00:18:20.466 --> 00:18:21.836 A:middle
texture and we'll just write out

00:18:21.836 --> 00:18:23.056 A:middle
the texture path for later.

00:18:23.876 --> 00:18:25.406 A:middle
Otherwise we're going to check

00:18:25.826 --> 00:18:27.666 A:middle
and are you just a uniform

00:18:27.666 --> 00:18:28.996 A:middle
property like are you a float

00:18:28.996 --> 00:18:31.026 A:middle
value or a color or something

00:18:31.026 --> 00:18:32.536 A:middle
like that, and if that's what

00:18:32.536 --> 00:18:33.276 A:middle
we've found then we'll write

00:18:33.276 --> 00:18:33.636 A:middle
that out.

00:18:33.636 --> 00:18:37.956 A:middle
And then once again, here's the

00:18:37.956 --> 00:18:39.026 A:middle
data that we wrote out in the

00:18:39.026 --> 00:18:40.326 A:middle
previous step which was the

00:18:40.376 --> 00:18:41.326 A:middle
scene graph and the mesh.

00:18:42.436 --> 00:18:43.866 A:middle
Now we'll write out the material

00:18:43.866 --> 00:18:48.416 A:middle
uniforms and the texture paths.

00:18:48.556 --> 00:18:50.566 A:middle
Finally, instancing.

00:18:53.556 --> 00:18:56.756 A:middle
So, this is where our car gets

00:18:56.756 --> 00:18:57.656 A:middle
to have more than one wheel I

00:18:57.716 --> 00:18:57.956 A:middle
think.

00:18:57.956 --> 00:18:59.856 A:middle
So, you're going to probably

00:18:59.856 --> 00:19:01.386 A:middle
want to use a single mesh more

00:18:59.856 --> 00:19:01.386 A:middle
want to use a single mesh more

00:19:01.386 --> 00:19:02.756 A:middle
than one time.

00:19:03.476 --> 00:19:07.206 A:middle
So, now my car has two wheels.

00:19:07.386 --> 00:19:10.386 A:middle
Now, it's kind of a waste to

00:19:10.386 --> 00:19:12.086 A:middle
store that in memory more than

00:19:12.086 --> 00:19:12.556 A:middle
once, right?

00:19:12.556 --> 00:19:14.376 A:middle
It's the same wheel multiplied

00:19:14.376 --> 00:19:15.106 A:middle
lots of times.

00:19:15.626 --> 00:19:18.866 A:middle
So, Model I/O has a thing on the

00:19:18.966 --> 00:19:21.496 A:middle
MDLAsset called a masters array.

00:19:22.186 --> 00:19:24.866 A:middle
When you load one of Pixar's USD

00:19:24.866 --> 00:19:26.886 A:middle
files that uses instancing to

00:19:26.886 --> 00:19:28.686 A:middle
replicate data, Model I/O

00:19:28.686 --> 00:19:30.726 A:middle
notices that, collects all of

00:19:30.726 --> 00:19:32.056 A:middle
those replicated objects into

00:19:32.056 --> 00:19:35.026 A:middle
the masters array, and instead

00:19:35.026 --> 00:19:36.936 A:middle
of storing the individual meshes

00:19:37.096 --> 00:19:39.016 A:middle
in the nodes, instead just refer

00:19:39.136 --> 00:19:40.546 A:middle
it, just stores an MDLObject

00:19:40.546 --> 00:19:42.066 A:middle
that refers back to the master

00:19:42.066 --> 00:19:42.266 A:middle
array.

00:19:42.686 --> 00:19:44.086 A:middle
And so that's how we get reuse.

00:19:44.616 --> 00:19:46.246 A:middle
And since Metal has great

00:19:46.246 --> 00:19:48.076 A:middle
instancing facilities, that's

00:19:48.076 --> 00:19:51.876 A:middle
going to stand us in good stead.

00:19:52.096 --> 00:19:54.396 A:middle
So, once again, we're going to

00:19:54.396 --> 00:19:55.976 A:middle
flatten the hierarchy and

00:19:55.976 --> 00:19:58.596 A:middle
linearalize the arrays, just as

00:19:58.626 --> 00:19:59.376 A:middle
we did before.

00:20:00.206 --> 00:20:02.266 A:middle
And now on the right, you can

00:20:02.266 --> 00:20:03.526 A:middle
see I've got two wheels in that

00:20:03.526 --> 00:20:06.126 A:middle
array at indexes 2, 3, and 4.

00:20:06.536 --> 00:20:07.666 A:middle
But we want to batch those

00:20:07.666 --> 00:20:08.766 A:middle
things together, so let's just

00:20:08.766 --> 00:20:13.086 A:middle
go ahead and do that.

00:20:13.296 --> 00:20:14.536 A:middle
So, we've grouped the tires

00:20:14.536 --> 00:20:16.926 A:middle
together, and now we've got the

00:20:16.926 --> 00:20:17.816 A:middle
body down on the bottom.

00:20:18.396 --> 00:20:19.136 A:middle
So, we're just going to store a

00:20:19.136 --> 00:20:20.706 A:middle
tiny little bit more data, which

00:20:20.706 --> 00:20:22.046 A:middle
is the instance count.

00:20:22.196 --> 00:20:23.766 A:middle
There's two wheels and one body.

00:20:25.046 --> 00:20:25.826 A:middle
Eventually they'll be four

00:20:25.826 --> 00:20:26.496 A:middle
wheels, trust me.

00:20:28.206 --> 00:20:30.656 A:middle
So, we're going to get the data

00:20:30.656 --> 00:20:31.666 A:middle
that we stored out already

00:20:31.666 --> 00:20:33.106 A:middle
earlier and to the scene

00:20:33.106 --> 00:20:35.386 A:middle
composition data, we're just

00:20:35.386 --> 00:20:36.356 A:middle
going to add the instance count.

00:20:37.406 --> 00:20:39.846 A:middle
And that's all it takes to get

00:20:39.846 --> 00:20:41.676 A:middle
an instanced scene with lots of

00:20:41.676 --> 00:20:42.786 A:middle
materials and objects.

00:20:43.346 --> 00:20:46.016 A:middle
Now, with that I'd like to hand

00:20:46.306 --> 00:20:48.136 A:middle
it off to Nicholas to show you

00:20:48.286 --> 00:20:49.266 A:middle
how that's all starting to come

00:20:49.266 --> 00:20:49.586 A:middle
together.

00:20:51.516 --> 00:20:54.500 A:middle
[ Applause ]

00:21:05.096 --> 00:21:06.016 A:middle
&gt;&gt; I'd like to show you how easy

00:21:06.016 --> 00:21:07.846 A:middle
it is to take our assets and

00:21:07.846 --> 00:21:09.206 A:middle
turn them into engine-ready data

00:21:09.206 --> 00:21:10.196 A:middle
using Model I/O.

00:21:10.276 --> 00:21:12.376 A:middle
I have here two folders and in

00:21:12.376 --> 00:21:13.646 A:middle
the first folder we have our art

00:21:13.646 --> 00:21:14.076 A:middle
assets.

00:21:14.616 --> 00:21:16.176 A:middle
It contains animation data,

00:21:16.806 --> 00:21:18.706 A:middle
cars, it has skinned animation,

00:21:18.706 --> 00:21:19.786 A:middle
it has a bunch of materials.

00:21:20.446 --> 00:21:21.476 A:middle
So what we want to do is we want

00:21:21.476 --> 00:21:23.896 A:middle
to create a baker that takes

00:21:23.896 --> 00:21:25.626 A:middle
this data, turns it into engine

00:21:25.626 --> 00:21:26.796 A:middle
data, and puts it into this

00:21:26.796 --> 00:21:27.616 A:middle
second folder here.

00:21:28.246 --> 00:21:31.216 A:middle
So, what we have here is our

00:21:31.216 --> 00:21:32.736 A:middle
baker project and what we're

00:21:32.736 --> 00:21:33.996 A:middle
going to do is we're going to

00:21:34.096 --> 00:21:35.506 A:middle
slowly extend it to extract more

00:21:35.506 --> 00:21:37.256 A:middle
and more data out of those art

00:21:37.256 --> 00:21:37.696 A:middle
assets.

00:21:38.176 --> 00:21:39.126 A:middle
So starting out with the

00:21:39.166 --> 00:21:40.956 A:middle
simplest, let's export the

00:21:40.956 --> 00:21:42.236 A:middle
geometry and transforms.

00:21:42.956 --> 00:21:44.146 A:middle
To do that we're going to walk

00:21:44.146 --> 00:21:46.186 A:middle
the scene graph hierarchy and

00:21:46.186 --> 00:21:47.786 A:middle
look for any object of MDLMesh

00:21:48.526 --> 00:21:48.626 A:middle
type.

00:21:51.076 --> 00:21:52.156 A:middle
Then we're going to store the

00:21:52.156 --> 00:21:55.636 A:middle
vertexDescriptor, all the

00:21:55.636 --> 00:21:58.816 A:middle
vertexBuffers, and then we're

00:21:58.816 --> 00:22:00.326 A:middle
going to iterate through all the

00:21:58.816 --> 00:22:00.326 A:middle
going to iterate through all the

00:22:00.386 --> 00:22:02.696 A:middle
submeshes and grab the index

00:22:02.726 --> 00:22:03.076 A:middle
buffers.

00:22:06.896 --> 00:22:07.896 A:middle
We're going to walk through the

00:22:07.936 --> 00:22:10.256 A:middle
scene graph once again, and this

00:22:10.256 --> 00:22:12.836 A:middle
time we're going to look for any

00:22:12.836 --> 00:22:14.066 A:middle
objects that have a transform

00:22:14.066 --> 00:22:14.576 A:middle
component.

00:22:15.456 --> 00:22:16.906 A:middle
If they do, then we simply store

00:22:16.906 --> 00:22:17.396 A:middle
the matrix.

00:22:17.526 --> 00:22:19.546 A:middle
And that's all for the first

00:22:19.546 --> 00:22:19.846 A:middle
example.

00:22:19.846 --> 00:22:20.726 A:middle
And so let's go ahead and run

00:22:20.726 --> 00:22:20.906 A:middle
this.

00:22:26.076 --> 00:22:27.166 A:middle
And you'll notice in that second

00:22:27.166 --> 00:22:28.446 A:middle
folder we now have a new file

00:22:28.446 --> 00:22:29.726 A:middle
and that's our engine-ready

00:22:30.406 --> 00:22:30.536 A:middle
data.

00:22:31.956 --> 00:22:33.336 A:middle
This second project here will be

00:22:33.336 --> 00:22:34.386 A:middle
our engine and it's going to

00:22:34.386 --> 00:22:35.486 A:middle
read in that data and it's going

00:22:35.486 --> 00:22:36.086 A:middle
to render it.

00:22:36.086 --> 00:22:37.086 A:middle
So let's see what we have so

00:22:37.136 --> 00:22:37.376 A:middle
far.

00:22:37.636 --> 00:22:40.066 A:middle
So as you notice, we have two

00:22:40.066 --> 00:22:41.336 A:middle
cars on a race track, but

00:22:41.336 --> 00:22:42.126 A:middle
there's color.

00:22:42.126 --> 00:22:43.746 A:middle
So let's extend the baker to

00:22:43.746 --> 00:22:45.116 A:middle
also support materials.

00:22:50.046 --> 00:22:52.516 A:middle
So in addition to looking for

00:22:52.516 --> 00:22:53.326 A:middle
the index buffers on the

00:22:53.376 --> 00:22:54.256 A:middle
submesh, we're going to look to

00:22:54.316 --> 00:22:55.206 A:middle
see if it has a material

00:22:55.206 --> 00:22:55.656 A:middle
property.

00:22:56.116 --> 00:22:57.936 A:middle
If it does, then there are five

00:22:57.986 --> 00:22:58.986 A:middle
properties associated with the

00:22:58.986 --> 00:23:01.516 A:middle
semantic baseColor, metallic,

00:22:58.986 --> 00:23:01.516 A:middle
semantic baseColor, metallic,

00:23:02.346 --> 00:23:04.686 A:middle
roughness, bump, and

00:23:04.686 --> 00:23:05.996 A:middle
ambientOcclusion that we care

00:23:05.996 --> 00:23:06.266 A:middle
about.

00:23:07.066 --> 00:23:08.046 A:middle
And when we read in the

00:23:08.076 --> 00:23:09.306 A:middle
property, we're going to iterate

00:23:09.396 --> 00:23:11.116 A:middle
through all the properties and

00:23:11.116 --> 00:23:11.886 A:middle
checking the type.

00:23:12.436 --> 00:23:15.296 A:middle
If the type is of float or

00:23:15.346 --> 00:23:17.486 A:middle
float3 we assume it's a uniform

00:23:17.876 --> 00:23:19.826 A:middle
and we're going to record that.

00:23:20.706 --> 00:23:22.516 A:middle
Otherwise, if it's a string or a

00:23:22.516 --> 00:23:24.156 A:middle
URL we're going to record the

00:23:24.156 --> 00:23:24.806 A:middle
texture paths.

00:23:25.796 --> 00:23:27.036 A:middle
So now, let's run this second

00:23:27.036 --> 00:23:28.026 A:middle
example and see what kind of

00:23:28.026 --> 00:23:29.846 A:middle
output we get in our engine.

00:23:35.046 --> 00:23:36.076 A:middle
So now we have a race track and

00:23:36.076 --> 00:23:36.966 A:middle
two cars, but now with

00:23:36.966 --> 00:23:37.496 A:middle
materials.

00:23:38.256 --> 00:23:40.016 A:middle
Let's further extend this and

00:23:40.016 --> 00:23:41.176 A:middle
support instancing.

00:23:46.256 --> 00:23:48.006 A:middle
So, before, we only considered

00:23:48.006 --> 00:23:49.296 A:middle
meshes while traversing the

00:23:49.346 --> 00:23:49.746 A:middle
scene graph.

00:23:49.896 --> 00:23:51.056 A:middle
But now, we want to consider all

00:23:51.056 --> 00:23:52.436 A:middle
meshes that live in the masters

00:23:52.436 --> 00:23:53.366 A:middle
array of the asset.

00:23:54.196 --> 00:23:55.436 A:middle
So we walk through the masters,

00:23:56.226 --> 00:23:57.246 A:middle
collecting all objects that are

00:23:57.246 --> 00:23:59.006 A:middle
of MDLMesh type and storing in

00:23:59.446 --> 00:24:00.396 A:middle
just like we did before.

00:23:59.446 --> 00:24:00.396 A:middle
just like we did before.

00:24:01.246 --> 00:24:02.336 A:middle
In addition, we also need to

00:24:02.336 --> 00:24:04.566 A:middle
record all objects that refer to

00:24:04.566 --> 00:24:05.236 A:middle
those masters.

00:24:05.236 --> 00:24:06.756 A:middle
And we can find that on the

00:24:06.756 --> 00:24:07.646 A:middle
instance property.

00:24:08.216 --> 00:24:11.836 A:middle
We then, sort the instances by

00:24:11.836 --> 00:24:14.346 A:middle
mesh, and then grab the instance

00:24:14.346 --> 00:24:14.666 A:middle
count.

00:24:15.696 --> 00:24:16.616 A:middle
And that's it.

00:24:21.146 --> 00:24:22.256 A:middle
So, let's go ahead and run our

00:24:22.336 --> 00:24:22.846 A:middle
scene again.

00:24:23.496 --> 00:24:26.126 A:middle
And now we have multiple cars,

00:24:26.126 --> 00:24:27.346 A:middle
rendering using instancing.

00:24:28.146 --> 00:24:28.766 A:middle
Back to you Nick.

00:24:31.516 --> 00:24:36.026 A:middle
[ Applause ]

00:24:36.526 --> 00:24:37.586 A:middle
&gt;&gt; Next, we're going to talk

00:24:37.806 --> 00:24:39.486 A:middle
about transform animation.

00:24:40.106 --> 00:24:43.856 A:middle
So, transform animation is

00:24:43.856 --> 00:24:46.346 A:middle
transforms that vary over time.

00:24:47.776 --> 00:24:49.826 A:middle
So, let's just consider our

00:24:49.826 --> 00:24:51.266 A:middle
little simple scene graph again.

00:24:51.876 --> 00:24:54.556 A:middle
Now, I've got a car sitting on

00:24:54.966 --> 00:24:56.866 A:middle
the start line, and I'm just

00:24:56.866 --> 00:24:58.656 A:middle
going to want to do an animation

00:24:58.766 --> 00:25:00.866 A:middle
where maybe the body is going to

00:24:58.766 --> 00:25:00.866 A:middle
where maybe the body is going to

00:25:00.866 --> 00:25:02.006 A:middle
wiggle a little a bit before it

00:25:02.006 --> 00:25:03.826 A:middle
starts, and then the car is

00:25:03.826 --> 00:25:04.626 A:middle
going to drive away.

00:25:05.266 --> 00:25:06.436 A:middle
So in order to accomplish that,

00:25:06.436 --> 00:25:07.586 A:middle
I'm going to need to record some

00:25:07.586 --> 00:25:10.736 A:middle
animation data on the body node

00:25:10.736 --> 00:25:14.956 A:middle
D and on the root transform of

00:25:14.956 --> 00:25:16.396 A:middle
the whole object to move him

00:25:16.396 --> 00:25:18.406 A:middle
away, which is B.

00:25:18.966 --> 00:25:19.906 A:middle
I'm going to record out

00:25:19.906 --> 00:25:21.986 A:middle
animation tracks for both of

00:25:21.986 --> 00:25:22.786 A:middle
those two nodes.

00:25:24.256 --> 00:25:26.476 A:middle
And once again with Model I/O,

00:25:26.476 --> 00:25:27.836 A:middle
that's really easy to do.

00:25:29.116 --> 00:25:31.186 A:middle
As before, we run over all of

00:25:31.186 --> 00:25:32.326 A:middle
the objects looking for the

00:25:32.326 --> 00:25:34.826 A:middle
transform components, and when

00:25:34.826 --> 00:25:36.356 A:middle
we find them we're going to be

00:25:36.356 --> 00:25:36.916 A:middle
appending them.

00:25:37.446 --> 00:25:38.396 A:middle
But now we're going to do one

00:25:38.396 --> 00:25:40.356 A:middle
more thing, which is, we're

00:25:40.516 --> 00:25:42.366 A:middle
going to ask the transform if

00:25:42.456 --> 00:25:45.086 A:middle
it's got any keyed times on it.

00:25:45.706 --> 00:25:47.796 A:middle
Now, if there's no keyed time,

00:25:48.076 --> 00:25:50.096 A:middle
that's 0 count, then we're just

00:25:50.096 --> 00:25:51.076 A:middle
going to use it as is.

00:25:51.456 --> 00:25:52.956 A:middle
And if there's 1 keyed time,

00:25:53.066 --> 00:25:53.976 A:middle
we're just going to treat it as

00:25:53.976 --> 00:25:54.526 A:middle
constant.

00:25:54.826 --> 00:25:56.726 A:middle
So we're just looking for counts

00:25:56.766 --> 00:25:58.396 A:middle
that are greater than 1.

00:26:01.056 --> 00:26:03.296 A:middle
So, we're going to actually use

00:26:03.526 --> 00:26:04.966 A:middle
a really exotic and cool piece

00:26:04.966 --> 00:26:05.626 A:middle
of Swift here.

00:26:06.066 --> 00:26:06.736 A:middle
I like this part.

00:26:06.736 --> 00:26:08.996 A:middle
We're going to use a map

00:26:09.246 --> 00:26:09.736 A:middle
closure.

00:26:10.306 --> 00:26:12.936 A:middle
So, what we're going to do is

00:26:13.116 --> 00:26:14.956 A:middle
we're going to sample the

00:26:14.956 --> 00:26:17.746 A:middle
animation at times and we're

00:26:17.746 --> 00:26:20.136 A:middle
going to create a new array of

00:26:21.236 --> 00:26:22.496 A:middle
transforms corresponding to

00:26:22.496 --> 00:26:24.446 A:middle
those times that will append to

00:26:24.446 --> 00:26:24.926 A:middle
our buffer.

00:26:25.446 --> 00:26:27.306 A:middle
And to just pick apart that

00:26:27.306 --> 00:26:29.176 A:middle
mapping operation a little bit,

00:26:29.436 --> 00:26:31.076 A:middle
the first line says

00:26:31.076 --> 00:26:32.076 A:middle
samplesTimes.map.

00:26:32.486 --> 00:26:33.546 A:middle
The thing that's not showing on

00:26:33.546 --> 00:26:34.526 A:middle
the slide is where did

00:26:34.526 --> 00:26:36.226 A:middle
sampleTimes come from?

00:26:36.816 --> 00:26:39.796 A:middle
So, it's another array of

00:26:40.416 --> 00:26:42.876 A:middle
keyTimes and you can do two

00:26:42.876 --> 00:26:43.276 A:middle
things here.

00:26:43.646 --> 00:26:45.286 A:middle
One is you can make the

00:26:45.286 --> 00:26:47.286 A:middle
sampleTimes array just the

00:26:47.316 --> 00:26:51.626 A:middle
transform.keyTimes array, or if

00:26:51.626 --> 00:26:53.646 A:middle
you want to instead of just

00:26:53.646 --> 00:26:55.506 A:middle
getting only the times that the

00:26:55.506 --> 00:26:57.216 A:middle
artist put in the file, if you

00:26:57.216 --> 00:26:58.586 A:middle
want to for example sample the

00:26:58.586 --> 00:27:00.166 A:middle
times at a constant frame rate,

00:26:58.586 --> 00:27:00.166 A:middle
times at a constant frame rate,

00:27:00.546 --> 00:27:01.556 A:middle
you could have synthetically

00:27:01.556 --> 00:27:03.886 A:middle
made an array of transform times

00:27:04.056 --> 00:27:05.486 A:middle
at the frame rate that you care

00:27:05.486 --> 00:27:07.226 A:middle
about, say 60 frames a second.

00:27:07.886 --> 00:27:09.536 A:middle
And so, when you do this mapping

00:27:09.536 --> 00:27:12.096 A:middle
operation, the closure takes the

00:27:12.096 --> 00:27:14.126 A:middle
transforms, gets the local

00:27:14.126 --> 00:27:16.546 A:middle
transform from it at the times

00:27:16.546 --> 00:27:17.906 A:middle
corresponding to the values in

00:27:17.906 --> 00:27:18.236 A:middle
the array.

00:27:18.436 --> 00:27:19.936 A:middle
I thought that was really cool.

00:27:21.256 --> 00:27:23.436 A:middle
So, here's the data that we've

00:27:23.436 --> 00:27:24.276 A:middle
output already.

00:27:25.466 --> 00:27:27.986 A:middle
And it's straightforward to just

00:27:27.986 --> 00:27:29.336 A:middle
encode the animated local

00:27:29.336 --> 00:27:30.016 A:middle
transforms.

00:27:30.906 --> 00:27:34.746 A:middle
So, finally, skinning and

00:27:34.746 --> 00:27:35.686 A:middle
character animation.

00:27:36.546 --> 00:27:40.386 A:middle
So, we're just going to take a

00:27:40.386 --> 00:27:42.966 A:middle
little car here and he's a

00:27:42.966 --> 00:27:44.046 A:middle
cartoon car apparently.

00:27:44.406 --> 00:27:46.296 A:middle
We're going to make him able to

00:27:46.296 --> 00:27:48.756 A:middle
wiggle his nose and otherwise

00:27:48.756 --> 00:27:49.026 A:middle
animate.

00:27:50.206 --> 00:27:53.686 A:middle
So, as we've seen before, the

00:27:53.686 --> 00:27:55.546 A:middle
mesh is going to have geometry

00:27:55.656 --> 00:27:56.536 A:middle
and all the same sorts of

00:27:56.536 --> 00:27:57.656 A:middle
buffers and things that we've

00:27:57.656 --> 00:28:00.056 A:middle
already talked about, but it has

00:27:57.656 --> 00:28:00.056 A:middle
already talked about, but it has

00:28:00.056 --> 00:28:02.496 A:middle
a new thing which is an embedded

00:28:02.496 --> 00:28:02.966 A:middle
skeleton.

00:28:03.256 --> 00:28:05.216 A:middle
I hope you can see the little

00:28:05.216 --> 00:28:06.036 A:middle
green bones.

00:28:07.036 --> 00:28:08.186 A:middle
They are going out into the

00:28:08.186 --> 00:28:09.396 A:middle
wheels and there's some going

00:28:09.396 --> 00:28:10.476 A:middle
down the spine of the car.

00:28:11.686 --> 00:28:15.496 A:middle
Now, those bones are bound to

00:28:15.496 --> 00:28:17.876 A:middle
the vertices through a painting

00:28:17.876 --> 00:28:19.186 A:middle
process that the artists do.

00:28:19.616 --> 00:28:22.786 A:middle
So, the one on the left has got

00:28:23.506 --> 00:28:25.156 A:middle
a bone that's bound to the front

00:28:25.216 --> 00:28:26.646 A:middle
of the car and heavily weighted

00:28:26.646 --> 00:28:27.756 A:middle
to the bumper and the nose.

00:28:28.166 --> 00:28:29.506 A:middle
And then the one on the right

00:28:29.826 --> 00:28:32.026 A:middle
we've selected one of the bones

00:28:32.026 --> 00:28:33.536 A:middle
on the back of the car connected

00:28:33.536 --> 00:28:35.086 A:middle
to the wheel, so when that one

00:28:35.086 --> 00:28:37.746 A:middle
moves it's going to affect the

00:28:37.746 --> 00:28:39.316 A:middle
wing on the back of the car and

00:28:40.026 --> 00:28:42.156 A:middle
that wheel.

00:28:42.356 --> 00:28:44.776 A:middle
So, I should also mention that

00:28:44.776 --> 00:28:46.356 A:middle
that kind of data requires a

00:28:46.386 --> 00:28:48.686 A:middle
little bit of extra work in your

00:28:48.686 --> 00:28:49.086 A:middle
shader.

00:28:49.726 --> 00:28:53.696 A:middle
We've got some more information

00:28:53.696 --> 00:28:54.856 A:middle
coming along for the ride that

00:28:54.856 --> 00:28:55.896 A:middle
we didn't have before.

00:28:56.516 --> 00:28:59.236 A:middle
And specifically, we've got the

00:28:59.236 --> 00:29:03.806 A:middle
jointWeights per vertex and the

00:28:59.236 --> 00:29:03.806 A:middle
jointWeights per vertex and the

00:29:03.806 --> 00:29:07.326 A:middle
jointIndices which are a small

00:29:07.326 --> 00:29:11.076 A:middle
array of indices to what we'll

00:29:11.076 --> 00:29:13.186 A:middle
call the matrix palette of

00:29:13.626 --> 00:29:16.226 A:middle
joints that correspond to the

00:29:16.226 --> 00:29:17.196 A:middle
vertex positions.

00:29:17.676 --> 00:29:21.046 A:middle
So, if two joints or bones were

00:29:21.046 --> 00:29:23.426 A:middle
influencing a particular vertex,

00:29:23.796 --> 00:29:25.476 A:middle
then the indices of those bones

00:29:25.476 --> 00:29:27.666 A:middle
will come along with the vertex,

00:29:28.136 --> 00:29:30.076 A:middle
with some weights so that when I

00:29:30.076 --> 00:29:34.276 A:middle
transform them, when I transform

00:29:34.846 --> 00:29:36.986 A:middle
them in the shader it'll all be

00:29:36.986 --> 00:29:39.506 A:middle
combined together and the vertex

00:29:39.506 --> 00:29:41.606 A:middle
will move to its final deformed

00:29:41.606 --> 00:29:42.156 A:middle
position.

00:29:44.656 --> 00:29:47.536 A:middle
So, there's more data involved

00:29:47.836 --> 00:29:50.146 A:middle
in order to encode the skeleton

00:29:50.256 --> 00:29:52.846 A:middle
separately from the geometry and

00:29:52.846 --> 00:29:54.066 A:middle
other transformations that are

00:29:54.066 --> 00:29:54.576 A:middle
going on.

00:29:55.146 --> 00:29:57.036 A:middle
And that's the skeleton down

00:29:57.036 --> 00:29:57.716 A:middle
there at the bottom of the

00:29:57.716 --> 00:29:58.266 A:middle
diagram.

00:29:58.266 --> 00:29:59.886 A:middle
Let's just isolate it.

00:30:02.366 --> 00:30:04.656 A:middle
So, as we did before, we're

00:30:04.656 --> 00:30:07.586 A:middle
going to traverse the graph and

00:30:07.586 --> 00:30:09.976 A:middle
assign indices according to

00:30:10.096 --> 00:30:14.816 A:middle
traversal order 0, 1, 2, 3.

00:30:15.036 --> 00:30:16.896 A:middle
We're going to encode the

00:30:16.946 --> 00:30:20.086 A:middle
parents in the skeleton graph

00:30:20.356 --> 00:30:21.906 A:middle
just as we did for the geometry

00:30:21.906 --> 00:30:22.336 A:middle
graph.

00:30:22.806 --> 00:30:25.046 A:middle
And so, not going to go into

00:30:25.046 --> 00:30:26.576 A:middle
particularly how it works

00:30:26.576 --> 00:30:27.576 A:middle
because it's exactly the same as

00:30:27.576 --> 00:30:27.926 A:middle
before.

00:30:29.156 --> 00:30:32.106 A:middle
Now, we're also going to encode

00:30:32.466 --> 00:30:35.396 A:middle
for each of the bones that

00:30:35.396 --> 00:30:37.886 A:middle
actually influences a vertex,

00:30:38.566 --> 00:30:43.486 A:middle
the index of that bone in the

00:30:43.566 --> 00:30:46.446 A:middle
hierarchy and the inverse bind

00:30:46.446 --> 00:30:46.826 A:middle
pose.

00:30:47.336 --> 00:30:48.806 A:middle
On the previous slide, with the

00:30:48.806 --> 00:30:50.316 A:middle
shader there is a bit of math

00:30:50.486 --> 00:30:52.766 A:middle
there that referred to some sort

00:30:52.766 --> 00:30:53.716 A:middle
of a palette matrix.

00:30:54.286 --> 00:30:56.396 A:middle
The inverse bind pose is going

00:30:56.396 --> 00:30:58.026 A:middle
to be an extra bit of math that

00:30:58.026 --> 00:31:00.236 A:middle
you need in order to get the

00:30:58.026 --> 00:31:00.236 A:middle
you need in order to get the

00:31:00.236 --> 00:31:02.416 A:middle
vertices into the right space to

00:31:02.416 --> 00:31:03.496 A:middle
be easily blended.

00:31:03.786 --> 00:31:05.336 A:middle
And I'd refer you to the sample

00:31:05.336 --> 00:31:06.496 A:middle
for the details of that

00:31:06.496 --> 00:31:07.236 A:middle
transformation.

00:31:08.776 --> 00:31:10.056 A:middle
We're going to go through each

00:31:10.056 --> 00:31:11.916 A:middle
one of those and store those

00:31:12.076 --> 00:31:13.436 A:middle
matrices and indices.

00:31:14.086 --> 00:31:16.026 A:middle
And then finally, to make an

00:31:16.026 --> 00:31:18.326 A:middle
animation clip, we're going to

00:31:18.486 --> 00:31:20.696 A:middle
record the animation that

00:31:20.696 --> 00:31:22.416 A:middle
corresponds to each one of those

00:31:22.476 --> 00:31:26.416 A:middle
bones in the clip.

00:31:26.576 --> 00:31:29.426 A:middle
So, in code it looks very much

00:31:29.426 --> 00:31:30.356 A:middle
like what we've seen before.

00:31:31.246 --> 00:31:32.466 A:middle
We're going to go through the

00:31:32.466 --> 00:31:34.396 A:middle
object and find out if the

00:31:34.396 --> 00:31:35.296 A:middle
object has skin.

00:31:36.486 --> 00:31:38.496 A:middle
The skin, corresponding to the

00:31:38.496 --> 00:31:40.256 A:middle
skeleton et cetera and is

00:31:40.326 --> 00:31:42.286 A:middle
encoded in Model I/O's new

00:31:42.766 --> 00:31:44.576 A:middle
MDLSkinDeformerComponent.

00:31:45.006 --> 00:31:46.826 A:middle
So if we found a skin deformer

00:31:46.826 --> 00:31:49.936 A:middle
component, we're once again

00:31:49.936 --> 00:31:51.316 A:middle
going to take advantage of this

00:31:51.746 --> 00:31:55.536 A:middle
Swift map closure to take the

00:31:55.536 --> 00:31:57.776 A:middle
jointBindTransforms that Model

00:31:57.776 --> 00:31:59.796 A:middle
I/O read from the file and

00:31:59.796 --> 00:32:00.176 A:middle
stored.

00:31:59.796 --> 00:32:00.176 A:middle
stored.

00:32:00.916 --> 00:32:02.546 A:middle
We're going to use this simd

00:32:02.546 --> 00:32:05.406 A:middle
inverse to invert all of them

00:32:05.776 --> 00:32:06.646 A:middle
because that's what the math

00:32:06.646 --> 00:32:08.346 A:middle
needs, and store it in an array.

00:32:09.036 --> 00:32:12.836 A:middle
And then, here's all the data

00:32:12.896 --> 00:32:14.146 A:middle
that we've stored to date.

00:32:15.496 --> 00:32:17.416 A:middle
And we're going to put out the

00:32:17.416 --> 00:32:19.066 A:middle
skeletal data, the inverse bind

00:32:19.066 --> 00:32:20.856 A:middle
transforms, and the joint to

00:32:20.856 --> 00:32:22.786 A:middle
palette mapping, and the

00:32:22.786 --> 00:32:24.466 A:middle
skeleton parent indices.

00:32:25.466 --> 00:32:30.156 A:middle
And so, I'd like to ask Nicholas

00:32:30.216 --> 00:32:32.576 A:middle
to come up again and show us

00:32:32.576 --> 00:32:33.196 A:middle
what it looks like now.

00:32:35.516 --> 00:32:39.500 A:middle
[ Applause ]

00:32:47.506 --> 00:32:48.856 A:middle
&gt;&gt; So where we last left off, we

00:32:48.856 --> 00:32:50.336 A:middle
had a race track with multiple

00:32:50.336 --> 00:32:51.736 A:middle
cars rendering using instancing.

00:32:52.356 --> 00:32:53.576 A:middle
Now, in addition let's also

00:32:53.646 --> 00:32:54.836 A:middle
support animation.

00:32:55.306 --> 00:32:57.106 A:middle
So, before when we traversed the

00:32:57.106 --> 00:32:58.176 A:middle
scene graph and we looked for

00:32:58.176 --> 00:32:59.616 A:middle
any object that had a transform

00:32:59.616 --> 00:33:00.846 A:middle
component, we assumed it was

00:32:59.616 --> 00:33:00.846 A:middle
component, we assumed it was

00:33:00.846 --> 00:33:01.456 A:middle
constant.

00:33:02.146 --> 00:33:02.916 A:middle
Now we want to know if the

00:33:02.916 --> 00:33:04.146 A:middle
transform is time varying.

00:33:04.146 --> 00:33:05.466 A:middle
And the easiest way to find that

00:33:05.466 --> 00:33:06.566 A:middle
out is to see if the

00:33:06.566 --> 00:33:07.996 A:middle
keyTimes.count is greater than

00:33:07.996 --> 00:33:08.246 A:middle
1.

00:33:09.196 --> 00:33:10.796 A:middle
If it is, then for the purposes

00:33:10.796 --> 00:33:12.856 A:middle
of this sample, we're going to

00:33:13.176 --> 00:33:14.316 A:middle
sample it in regular intervals.

00:33:14.436 --> 00:33:16.756 A:middle
So, we sample them and then we

00:33:16.876 --> 00:33:17.376 A:middle
store them.

00:33:17.526 --> 00:33:18.626 A:middle
And that's it for animation.

00:33:18.656 --> 00:33:19.466 A:middle
So, let's go ahead and run this

00:33:19.466 --> 00:33:20.596 A:middle
example and see what kind of

00:33:20.596 --> 00:33:21.686 A:middle
output we get in our engine.

00:33:28.046 --> 00:33:29.186 A:middle
So, now you notice that the

00:33:29.246 --> 00:33:30.406 A:middle
front cars are taking off.

00:33:31.556 --> 00:33:32.926 A:middle
So, finally let's go ahead and

00:33:32.926 --> 00:33:33.706 A:middle
add in skinning.

00:33:33.706 --> 00:33:34.786 A:middle
Let's extend the baker to

00:33:34.786 --> 00:33:35.706 A:middle
support skinning now.

00:33:38.156 --> 00:33:40.276 A:middle
So, in addition to any mesh data

00:33:40.276 --> 00:33:41.376 A:middle
that you may need, there's an

00:33:41.376 --> 00:33:43.436 A:middle
additional skin data that you

00:33:43.436 --> 00:33:45.186 A:middle
might need and so we check to

00:33:45.186 --> 00:33:47.276 A:middle
see if a MDLMesh has a component

00:33:47.276 --> 00:33:48.976 A:middle
conforming to MDLSkinDeformer.

00:33:50.086 --> 00:33:51.906 A:middle
If it does, then two bits of

00:33:51.906 --> 00:33:52.936 A:middle
additional information we need

00:33:52.936 --> 00:33:54.066 A:middle
is we need to know how the

00:33:54.166 --> 00:33:55.706 A:middle
skeleton is bound to the skin

00:33:55.706 --> 00:33:57.366 A:middle
mesh, and we need to know its

00:33:57.366 --> 00:33:58.106 A:middle
animation data.

00:33:58.286 --> 00:34:00.466 A:middle
So, we find that paths of all

00:33:58.286 --> 00:34:00.466 A:middle
So, we find that paths of all

00:34:00.466 --> 00:34:01.646 A:middle
the bound skeleton joints in the

00:34:01.646 --> 00:34:02.856 A:middle
jointPaths array.

00:34:03.476 --> 00:34:06.516 A:middle
And then, we find the bind pose

00:34:06.516 --> 00:34:07.456 A:middle
of the skeleton in the

00:34:07.456 --> 00:34:08.666 A:middle
jointBindTransforms.

00:34:08.666 --> 00:34:11.416 A:middle
So, now that we know what our

00:34:11.416 --> 00:34:12.536 A:middle
skeleton looks like, let's go

00:34:12.536 --> 00:34:15.076 A:middle
ahead and time sample the

00:34:15.196 --> 00:34:16.676 A:middle
skeleton's joints transforms

00:34:16.676 --> 00:34:18.266 A:middle
just like we did objects local

00:34:18.266 --> 00:34:18.906 A:middle
transform.

00:34:20.076 --> 00:34:21.275 A:middle
So we time sample it in regular

00:34:21.275 --> 00:34:24.106 A:middle
intervals, store the matrix, and

00:34:24.106 --> 00:34:25.956 A:middle
then we decompose it into a

00:34:25.956 --> 00:34:27.116 A:middle
quaternion rotation,

00:34:28.335 --> 00:34:30.996 A:middle
translation, and we store it in

00:34:30.996 --> 00:34:31.866 A:middle
an animation clip.

00:34:32.956 --> 00:34:33.806 A:middle
So, let's go ahead and run this

00:34:33.806 --> 00:34:34.295 A:middle
example.

00:34:47.056 --> 00:34:48.146 A:middle
So now we have a skinned car.

00:34:48.996 --> 00:34:50.335 A:middle
So, to recap on what we've done.

00:34:50.545 --> 00:34:51.476 A:middle
We were able to construct a

00:34:51.516 --> 00:34:52.906 A:middle
simple baker using Model I/O

00:34:52.906 --> 00:34:54.036 A:middle
that exported geometry and

00:34:54.036 --> 00:34:55.916 A:middle
transforms, and with a bit of

00:34:55.916 --> 00:34:57.256 A:middle
code we were able to extend it

00:34:57.256 --> 00:34:58.586 A:middle
to support, materials,

00:34:58.586 --> 00:35:00.206 A:middle
instancing, animation, and

00:34:58.586 --> 00:35:00.206 A:middle
instancing, animation, and

00:35:00.206 --> 00:35:01.156 A:middle
skinned animation.

00:35:01.896 --> 00:35:03.266 A:middle
All 5 of these examples and the

00:35:03.266 --> 00:35:04.296 A:middle
engine are available for this

00:35:04.336 --> 00:35:05.746 A:middle
session sample code which you

00:35:05.746 --> 00:35:07.186 A:middle
can modify for your own engine's

00:35:07.186 --> 00:35:07.376 A:middle
needs.

00:35:08.026 --> 00:35:09.726 A:middle
Back to you Nick.

00:35:10.216 --> 00:35:12.216 A:middle
[ Applause ]

00:35:12.416 --> 00:35:13.016 A:middle
&gt;&gt; All right then.

00:35:14.776 --> 00:35:16.206 A:middle
So, quick recap.

00:35:16.906 --> 00:35:19.406 A:middle
We've shown taking artwork all

00:35:19.406 --> 00:35:22.346 A:middle
the way from your asset creation

00:35:22.476 --> 00:35:24.686 A:middle
program to Pixar's Universal

00:35:24.686 --> 00:35:25.816 A:middle
Scene Description file format.

00:35:26.696 --> 00:35:28.916 A:middle
We used Model I/O to transform

00:35:28.916 --> 00:35:31.036 A:middle
that asset into engine-ready

00:35:31.036 --> 00:35:34.916 A:middle
data and we encoded it and

00:35:34.916 --> 00:35:36.246 A:middle
archived it off to the disc.

00:35:36.786 --> 00:35:38.766 A:middle
We put together a little game

00:35:38.816 --> 00:35:41.036 A:middle
engine with a simple renderer

00:35:41.136 --> 00:35:42.136 A:middle
using Swift and Metal.

00:35:42.706 --> 00:35:44.676 A:middle
And we loaded all that data up

00:35:45.226 --> 00:35:47.846 A:middle
and we animated it and we drew

00:35:47.846 --> 00:35:48.726 A:middle
some pretty pictures.

00:35:49.626 --> 00:35:52.576 A:middle
So, what's next?

00:35:52.736 --> 00:35:56.036 A:middle
Well, I'd encourage you to have

00:35:56.036 --> 00:35:58.106 A:middle
a look at the other facilities

00:35:58.316 --> 00:35:59.686 A:middle
that Model I/O's got built into

00:35:59.686 --> 00:35:59.836 A:middle
it.

00:36:00.356 --> 00:36:01.816 A:middle
There's a whole ton of tools

00:36:01.986 --> 00:36:04.076 A:middle
that are useful for building

00:36:04.076 --> 00:36:04.926 A:middle
your own tools.

00:36:05.266 --> 00:36:07.086 A:middle
Your own tools for that pipeline

00:36:07.086 --> 00:36:07.376 A:middle
chain.

00:36:08.036 --> 00:36:10.226 A:middle
For example, if you have a scene

00:36:10.226 --> 00:36:12.376 A:middle
composed of a bunch of objects,

00:36:12.776 --> 00:36:14.266 A:middle
you can perform a light mapping

00:36:14.266 --> 00:36:14.906 A:middle
operation.

00:36:15.096 --> 00:36:17.096 A:middle
Model I/O will cast lots of

00:36:17.096 --> 00:36:18.536 A:middle
rays, it'll bounce light around.

00:36:19.296 --> 00:36:21.066 A:middle
It'll make a prioritization for

00:36:21.066 --> 00:36:22.296 A:middle
the scene, store the data all

00:36:22.296 --> 00:36:22.706 A:middle
out for you.

00:36:23.436 --> 00:36:26.656 A:middle
It's got tools to do things like

00:36:26.656 --> 00:36:28.346 A:middle
UV unwrapping, so we've taken a

00:36:28.346 --> 00:36:30.516 A:middle
little airplane and carved it

00:36:30.516 --> 00:36:32.316 A:middle
apart into the logical chunks

00:36:32.366 --> 00:36:33.366 A:middle
that are ready for painting.

00:36:33.976 --> 00:36:38.326 A:middle
It has other operations like

00:36:38.426 --> 00:36:40.006 A:middle
here we're calculating ambient

00:36:40.006 --> 00:36:40.546 A:middle
occlusion.

00:36:40.906 --> 00:36:42.636 A:middle
So, we've taken the little

00:36:42.636 --> 00:36:44.766 A:middle
airplane, we've done ray casting

00:36:44.766 --> 00:36:47.006 A:middle
to compute accessibility of the

00:36:47.006 --> 00:36:48.256 A:middle
surface from the outside and

00:36:48.256 --> 00:36:49.996 A:middle
encoded that as a signal on the

00:36:49.996 --> 00:36:51.706 A:middle
surface of the plane, so that

00:36:51.706 --> 00:36:54.306 A:middle
your shader can render an object

00:36:54.306 --> 00:36:55.726 A:middle
to be more physically grounded

00:36:56.116 --> 00:36:56.866 A:middle
in your scene.

00:36:56.866 --> 00:37:00.176 A:middle
Here's another fun thing that

00:36:56.866 --> 00:37:00.176 A:middle
Here's another fun thing that

00:37:00.266 --> 00:37:01.246 A:middle
you can do.

00:37:01.936 --> 00:37:04.056 A:middle
We've got all kinds of tools for

00:37:04.056 --> 00:37:06.156 A:middle
dealing with 360-degree imagery,

00:37:06.486 --> 00:37:07.936 A:middle
which would be very helpful for

00:37:08.056 --> 00:37:09.356 A:middle
like making panoramic spheres

00:37:09.356 --> 00:37:10.206 A:middle
for VR and whatnot.

00:37:10.916 --> 00:37:13.516 A:middle
So, on the very left there you

00:37:13.516 --> 00:37:16.546 A:middle
can see a 360-degree picture

00:37:16.546 --> 00:37:17.646 A:middle
that was taken with you know one

00:37:17.646 --> 00:37:18.616 A:middle
of those funny little cameras.

00:37:19.136 --> 00:37:21.056 A:middle
And Model I/O can convert it to

00:37:21.056 --> 00:37:22.396 A:middle
a cube map ready for hardware.

00:37:22.586 --> 00:37:24.136 A:middle
It can also take a cube map and

00:37:24.136 --> 00:37:25.136 A:middle
convert it back to that other

00:37:25.136 --> 00:37:25.596 A:middle
format.

00:37:25.806 --> 00:37:27.416 A:middle
And then the two blurry columns

00:37:27.416 --> 00:37:29.056 A:middle
down on the side are

00:37:29.256 --> 00:37:31.626 A:middle
precomputing the irradiance

00:37:31.626 --> 00:37:35.646 A:middle
convolution for physically-based

00:37:36.246 --> 00:37:36.936 A:middle
shading for you.

00:37:37.226 --> 00:37:38.866 A:middle
So, we're creating a bunch of

00:37:38.866 --> 00:37:40.276 A:middle
coefficients that are ready for

00:37:40.276 --> 00:37:41.276 A:middle
your shader so that if we

00:37:41.276 --> 00:37:42.816 A:middle
dropped an object into the scene

00:37:42.816 --> 00:37:43.776 A:middle
it would feel physically

00:37:43.776 --> 00:37:44.516 A:middle
situated.

00:37:44.906 --> 00:37:46.216 A:middle
So, there's all kinds of things

00:37:46.216 --> 00:37:46.806 A:middle
like that in there.

00:37:46.806 --> 00:37:47.966 A:middle
And I encourage you to go off

00:37:47.966 --> 00:37:48.556 A:middle
and explore.

00:37:49.186 --> 00:37:53.146 A:middle
So, as Nicholas mentioned, this

00:37:53.366 --> 00:37:55.346 A:middle
sample is available for download

00:37:55.546 --> 00:37:57.736 A:middle
on this session's website.

00:37:57.736 --> 00:37:59.746 A:middle
So, please go grab like the

00:37:59.746 --> 00:38:00.976 A:middle
little car and find the other,

00:37:59.746 --> 00:38:00.976 A:middle
little car and find the other,

00:38:01.116 --> 00:38:02.166 A:middle
you know, missing wheels.

00:38:04.466 --> 00:38:05.956 A:middle
And, there's a bunch of other

00:38:05.956 --> 00:38:07.386 A:middle
sessions that are worth

00:38:07.386 --> 00:38:08.966 A:middle
reviewing in order to learn more

00:38:08.966 --> 00:38:09.816 A:middle
about these topics.

00:38:10.286 --> 00:38:13.396 A:middle
There was Introducing Metal 2

00:38:13.396 --> 00:38:15.966 A:middle
and What's New in SceneKit and

00:38:15.966 --> 00:38:18.316 A:middle
I'd also refer you to the What's

00:38:18.316 --> 00:38:19.926 A:middle
New in SceneKit session last

00:38:19.926 --> 00:38:21.856 A:middle
year when we went into some

00:38:21.856 --> 00:38:23.756 A:middle
details about the integration

00:38:23.756 --> 00:38:24.066 A:middle
with USD.

00:38:24.066 --> 00:38:28.006 A:middle
And from 2015 there was also the

00:38:28.146 --> 00:38:30.736 A:middle
introductory session on Model

00:38:30.736 --> 00:38:32.376 A:middle
I/O where we go into quite a lot

00:38:32.376 --> 00:38:33.586 A:middle
of detail about the various data

00:38:33.586 --> 00:38:35.306 A:middle
structures and operations on

00:38:35.306 --> 00:38:36.056 A:middle
those structures.

00:38:36.626 --> 00:38:37.766 A:middle
So, with that.

00:38:38.686 --> 00:38:40.476 A:middle
Thanks for showing up and hope

00:38:40.476 --> 00:38:40.976 A:middle
you enjoyed it.

00:38:41.508 --> 00:38:43.508 A:middle
[ Applause ]
