WEBVTT

00:00:08.516 --> 00:00:15.500 A:middle
[ Cheers ]

00:00:22.516 --> 00:00:28.836 A:middle
[ Applause ]

00:00:29.336 --> 00:00:30.516 A:middle
&gt;&gt; Good afternoon, ladies and

00:00:30.516 --> 00:00:31.216 A:middle
gentleman.

00:00:31.456 --> 00:00:32.516 A:middle
I hope you're having a good

00:00:32.776 --> 00:00:34.256 A:middle
Apple Developer Conference so

00:00:34.256 --> 00:00:34.886 A:middle
far.

00:00:35.386 --> 00:00:37.126 A:middle
My name is Stuart Cheshire and

00:00:37.126 --> 00:00:37.966 A:middle
we're going to be talking about

00:00:37.966 --> 00:00:38.586 A:middle
networking.

00:00:40.616 --> 00:00:41.626 A:middle
We have a lot of material to

00:00:41.626 --> 00:00:43.396 A:middle
cover so let's get right to it.

00:00:44.126 --> 00:00:45.896 A:middle
This is going to be a two-part

00:00:45.896 --> 00:00:46.336 A:middle
session.

00:00:47.196 --> 00:00:49.716 A:middle
In part 1, I'm going to give you

00:00:49.716 --> 00:00:52.136 A:middle
some status updates about

00:00:52.246 --> 00:00:53.806 A:middle
technologies that have been in

00:00:53.806 --> 00:00:54.906 A:middle
the works for many years.

00:00:55.846 --> 00:00:57.756 A:middle
Explicit congestion notification

00:00:58.246 --> 00:01:00.016 A:middle
is a new way to manage flows

00:00:58.246 --> 00:01:00.016 A:middle
is a new way to manage flows

00:01:00.016 --> 00:01:01.746 A:middle
through the internet without the

00:01:01.746 --> 00:01:04.635 A:middle
cost of packet loss, and IPv6,

00:01:04.635 --> 00:01:07.836 A:middle
as I'm sure you're all aware, is

00:01:07.836 --> 00:01:10.076 A:middle
the emerging protocol for the

00:01:10.076 --> 00:01:10.476 A:middle
internet.

00:01:11.646 --> 00:01:12.846 A:middle
We're going to tell you about

00:01:12.986 --> 00:01:15.336 A:middle
some changes in the networking

00:01:15.336 --> 00:01:17.476 A:middle
stack on iOS and some new

00:01:17.476 --> 00:01:18.956 A:middle
facilities that are now

00:01:18.956 --> 00:01:20.956 A:middle
available in network extension.

00:01:20.956 --> 00:01:23.756 A:middle
And then finally, we're going to

00:01:23.756 --> 00:01:25.366 A:middle
give you some very exciting news

00:01:25.676 --> 00:01:27.776 A:middle
about multipath protocols.

00:01:28.346 --> 00:01:30.186 A:middle
The iPhones that we all have are

00:01:30.186 --> 00:01:32.356 A:middle
inherently multi-path devices.

00:01:32.426 --> 00:01:33.746 A:middle
They have multiple radios in

00:01:33.746 --> 00:01:35.276 A:middle
them, and for the most part

00:01:35.276 --> 00:01:37.686 A:middle
today we only use one radio at a

00:01:37.686 --> 00:01:38.016 A:middle
time.

00:01:38.966 --> 00:01:40.446 A:middle
It's time we started having

00:01:40.856 --> 00:01:42.386 A:middle
multipath protocols for our

00:01:42.386 --> 00:01:43.436 A:middle
multipath devices.

00:01:46.236 --> 00:01:48.816 A:middle
After the break, in part 2 we're

00:01:48.816 --> 00:01:50.356 A:middle
going to talk about some new

00:01:50.356 --> 00:01:52.686 A:middle
advances in the URL session,

00:01:52.796 --> 00:01:54.176 A:middle
family of APIs.

00:01:54.596 --> 00:01:56.986 A:middle
We're going to give some tips

00:01:57.086 --> 00:01:58.816 A:middle
and guidance for best practices

00:01:59.676 --> 00:02:00.596 A:middle
and we're going to give you some

00:01:59.676 --> 00:02:00.596 A:middle
and we're going to give you some

00:02:00.596 --> 00:02:02.786 A:middle
news updates on upcoming

00:02:02.786 --> 00:02:04.046 A:middle
developments on the horizon.

00:02:06.016 --> 00:02:07.346 A:middle
So let's start with ECN,

00:02:08.205 --> 00:02:09.306 A:middle
Explicit Congestion

00:02:09.306 --> 00:02:10.086 A:middle
Notification.

00:02:12.616 --> 00:02:14.026 A:middle
You sometimes hear people talk

00:02:14.026 --> 00:02:15.686 A:middle
about a network being congested

00:02:16.356 --> 00:02:18.576 A:middle
as if that's a bad thing, but

00:02:18.936 --> 00:02:20.786 A:middle
the job for transport protocol

00:02:21.116 --> 00:02:22.696 A:middle
is to send as much data as it

00:02:22.696 --> 00:02:24.556 A:middle
can through the network, and the

00:02:24.556 --> 00:02:26.946 A:middle
way it does that is by sending

00:02:26.946 --> 00:02:28.646 A:middle
faster and faster and faster

00:02:28.966 --> 00:02:30.396 A:middle
until it's sending too fast.

00:02:30.776 --> 00:02:32.466 A:middle
In a sense, it's testing the

00:02:32.466 --> 00:02:33.616 A:middle
network to destruction.

00:02:35.716 --> 00:02:37.566 A:middle
So if the networks are

00:02:37.566 --> 00:02:39.156 A:middle
programmed correctly it should

00:02:39.156 --> 00:02:39.836 A:middle
be congested.

00:02:40.946 --> 00:02:43.006 A:middle
On any path between two devices

00:02:43.366 --> 00:02:44.986 A:middle
there will be one link that has

00:02:45.036 --> 00:02:46.116 A:middle
the lowest throughput, the

00:02:46.116 --> 00:02:47.416 A:middle
lowest capacity, and that's the

00:02:47.416 --> 00:02:48.276 A:middle
bottleneck link.

00:02:48.906 --> 00:02:50.786 A:middle
And the job of the transport

00:02:50.786 --> 00:02:53.226 A:middle
protocol is to work out its

00:02:53.226 --> 00:02:54.556 A:middle
share of the bottleneck link.

00:02:55.206 --> 00:02:56.296 A:middle
If you're sending twelve

00:02:56.296 --> 00:02:58.706 A:middle
megabits into a ten megabit

00:02:58.706 --> 00:03:00.836 A:middle
link, inevitably something has

00:02:58.706 --> 00:03:00.836 A:middle
link, inevitably something has

00:03:00.836 --> 00:03:01.656 A:middle
got to go wrong.

00:03:02.106 --> 00:03:03.376 A:middle
For a short time, the package

00:03:03.376 --> 00:03:05.146 A:middle
can be buffered in memory but

00:03:05.146 --> 00:03:06.266 A:middle
when the device runs out of

00:03:06.266 --> 00:03:07.696 A:middle
memory, it has no choice but to

00:03:07.696 --> 00:03:08.426 A:middle
lose packets.

00:03:09.206 --> 00:03:11.146 A:middle
And when it loses packets, that

00:03:11.146 --> 00:03:12.846 A:middle
is a clue to the sender that it

00:03:12.846 --> 00:03:14.216 A:middle
was going too fast and it should

00:03:14.216 --> 00:03:14.896 A:middle
slow down a bit.

00:03:16.086 --> 00:03:18.276 A:middle
The problem is that losing

00:03:18.276 --> 00:03:20.606 A:middle
packets is a very expensive way

00:03:20.606 --> 00:03:21.766 A:middle
of communicating that

00:03:21.766 --> 00:03:22.896 A:middle
information to the sender.

00:03:23.916 --> 00:03:26.096 A:middle
It took battery power to send

00:03:26.096 --> 00:03:27.216 A:middle
those packets if they're coming

00:03:27.216 --> 00:03:28.316 A:middle
from a wireless device.

00:03:28.956 --> 00:03:31.116 A:middle
It used wireless spectrum, a

00:03:31.116 --> 00:03:32.466 A:middle
network capacity, to send those

00:03:32.466 --> 00:03:33.006 A:middle
packets.

00:03:33.866 --> 00:03:36.096 A:middle
And when you drop them, they

00:03:36.096 --> 00:03:37.286 A:middle
have to be retransmitted.

00:03:37.936 --> 00:03:40.316 A:middle
Now, those packet losses and

00:03:40.316 --> 00:03:42.136 A:middle
retransmissions are invisible to

00:03:42.136 --> 00:03:44.036 A:middle
your application because TCP or

00:03:44.036 --> 00:03:45.196 A:middle
the transport protocol just

00:03:45.196 --> 00:03:46.566 A:middle
handles it.

00:03:47.436 --> 00:03:48.676 A:middle
Or I should say almost

00:03:48.676 --> 00:03:49.256 A:middle
invisible.

00:03:49.986 --> 00:03:51.576 A:middle
The loss is invisible but the

00:03:51.576 --> 00:03:52.916 A:middle
delay it causes is not.

00:03:54.396 --> 00:03:55.846 A:middle
Your application will end up

00:03:55.846 --> 00:03:57.586 A:middle
waiting for that retransmitted

00:03:57.586 --> 00:04:00.396 A:middle
data to arrive, and that causes

00:03:57.586 --> 00:04:00.396 A:middle
data to arrive, and that causes

00:04:00.686 --> 00:04:02.326 A:middle
a slower, more sluggish, user

00:04:02.326 --> 00:04:02.976 A:middle
experience.

00:04:04.106 --> 00:04:05.256 A:middle
With explicit congestion

00:04:05.256 --> 00:04:07.206 A:middle
notification, when the

00:04:07.206 --> 00:04:09.966 A:middle
bottleneck gateway notices that

00:04:09.966 --> 00:04:12.066 A:middle
a queue is starting to form, it

00:04:12.066 --> 00:04:13.606 A:middle
doesn't wait until it runs out

00:04:13.606 --> 00:04:16.046 A:middle
of memory, it sets a bit in the

00:04:16.125 --> 00:04:17.596 A:middle
IP packet header saying

00:04:17.596 --> 00:04:19.815 A:middle
congestion experienced, and that

00:04:19.815 --> 00:04:21.836 A:middle
serves as a hint to the sender

00:04:22.125 --> 00:04:24.216 A:middle
to slow down a bit, and that

00:04:24.216 --> 00:04:25.946 A:middle
lets the network adjust the

00:04:25.946 --> 00:04:28.456 A:middle
senders rate without the cost of

00:04:28.456 --> 00:04:29.166 A:middle
losing data.

00:04:30.436 --> 00:04:31.856 A:middle
One of the side of effects of

00:04:32.106 --> 00:04:34.076 A:middle
ECN is it also encourages

00:04:34.106 --> 00:04:36.056 A:middle
deployment of smarter queuing

00:04:36.056 --> 00:04:37.606 A:middle
algorithms in the network, which

00:04:37.606 --> 00:04:38.626 A:middle
is also a good thing.

00:04:39.566 --> 00:04:42.316 A:middle
If you have a very simple-minded

00:04:42.416 --> 00:04:44.866 A:middle
device with a single shared

00:04:44.866 --> 00:04:47.216 A:middle
first-in, first-out queue that

00:04:47.466 --> 00:04:48.596 A:middle
fills up the queue until it runs

00:04:48.596 --> 00:04:49.296 A:middle
out of memory.

00:04:49.896 --> 00:04:51.796 A:middle
When the next packet arrives it

00:04:51.796 --> 00:04:52.576 A:middle
has little choice.

00:04:52.576 --> 00:04:53.566 A:middle
It has to lose data.

00:04:54.276 --> 00:04:56.806 A:middle
So you can't really use ECN with

00:04:56.806 --> 00:04:57.956 A:middle
a dumb 5-0 queue.

00:04:58.656 --> 00:05:00.026 A:middle
You have to have smart queueing,

00:04:58.656 --> 00:05:00.026 A:middle
You have to have smart queueing,

00:05:00.556 --> 00:05:01.736 A:middle
and those intelligent queue

00:05:01.736 --> 00:05:03.726 A:middle
algorithms that keep the queues

00:05:03.776 --> 00:05:06.796 A:middle
short and signal congestion

00:05:06.796 --> 00:05:08.276 A:middle
before it becomes very bad,

00:05:08.766 --> 00:05:10.536 A:middle
that's what helps keep delays in

00:05:10.536 --> 00:05:13.396 A:middle
the network minimized and

00:05:13.396 --> 00:05:14.446 A:middle
eliminate buffer bloat.

00:05:19.046 --> 00:05:20.596 A:middle
There are three participants

00:05:20.596 --> 00:05:22.616 A:middle
that have to cooperate to make

00:05:23.216 --> 00:05:26.396 A:middle
ECN work, the clients, the

00:05:26.396 --> 00:05:28.106 A:middle
servers, and the network itself.

00:05:29.966 --> 00:05:31.686 A:middle
I'm very happy to tell you that

00:05:31.846 --> 00:05:33.806 A:middle
in our latest survey of the

00:05:33.806 --> 00:05:35.506 A:middle
Alexa top million websites,

00:05:35.866 --> 00:05:37.516 A:middle
almost three-quarters of them

00:05:37.516 --> 00:05:38.806 A:middle
already support ECN.

00:05:39.786 --> 00:05:41.646 A:middle
Now for the most part, this was

00:05:41.646 --> 00:05:42.836 A:middle
not because the website

00:05:42.836 --> 00:05:44.316 A:middle
administrator made a conscious

00:05:44.346 --> 00:05:46.626 A:middle
decision to support ECN, it's

00:05:46.626 --> 00:05:48.166 A:middle
simply because it's part of the

00:05:48.166 --> 00:05:50.056 A:middle
default Linux kernel, so they

00:05:50.056 --> 00:05:50.776 A:middle
get it for free.

00:05:51.506 --> 00:05:53.756 A:middle
But the good news is almost

00:05:53.756 --> 00:05:55.266 A:middle
three-quarters of the Alexa top

00:05:55.266 --> 00:05:57.146 A:middle
million websites already support

00:05:57.146 --> 00:05:58.456 A:middle
ECN, so that's the servers taken

00:05:58.456 --> 00:05:58.856 A:middle
care of.

00:06:00.586 --> 00:06:02.976 A:middle
On the client side, we have been

00:06:02.976 --> 00:06:04.646 A:middle
experimenting at Apple.

00:06:05.566 --> 00:06:09.056 A:middle
In iOS 10.3, for all eligible

00:06:09.056 --> 00:06:11.386 A:middle
TCP connections on Wi-Fi,

00:06:11.386 --> 00:06:13.216 A:middle
Ethernet and selected mobile

00:06:13.216 --> 00:06:16.086 A:middle
carriers, we toss a coin and

00:06:16.086 --> 00:06:18.286 A:middle
half of the TCP connections will

00:06:18.416 --> 00:06:18.986 A:middle
request ECN.

00:06:20.256 --> 00:06:21.976 A:middle
We did this to gauge whether the

00:06:21.976 --> 00:06:23.716 A:middle
internet was safe for ECN.

00:06:24.146 --> 00:06:26.066 A:middle
Five years ago, this experiment

00:06:26.066 --> 00:06:27.176 A:middle
would probably have produced

00:06:27.176 --> 00:06:27.996 A:middle
different results.

00:06:27.996 --> 00:06:29.656 A:middle
There were old firewalls and

00:06:29.656 --> 00:06:31.296 A:middle
middle boxes that might have got

00:06:31.296 --> 00:06:32.936 A:middle
confused by the ECN bits.

00:06:33.836 --> 00:06:36.146 A:middle
The good news is we did this

00:06:36.146 --> 00:06:38.446 A:middle
experiment on a massive scale

00:06:38.606 --> 00:06:41.966 A:middle
worldwide and we didn't hear any

00:06:41.966 --> 00:06:42.996 A:middle
news, we didn't hear any

00:06:42.996 --> 00:06:44.116 A:middle
customer complaints that the

00:06:44.116 --> 00:06:45.226 A:middle
internet was broken.

00:06:45.716 --> 00:06:48.346 A:middle
In the AWD metrics that gathered

00:06:48.346 --> 00:06:51.646 A:middle
ourselves to monitor how the

00:06:51.646 --> 00:06:53.706 A:middle
devices were performing, we saw

00:06:53.706 --> 00:06:55.756 A:middle
no discernable difference in

00:06:56.136 --> 00:06:57.836 A:middle
packet loss, retransmission,

00:06:57.836 --> 00:06:59.146 A:middle
reordering, any of the other

00:06:59.146 --> 00:07:00.576 A:middle
metrics that we care about.

00:06:59.146 --> 00:07:00.576 A:middle
metrics that we care about.

00:07:00.986 --> 00:07:03.026 A:middle
So it would appear that the

00:07:03.026 --> 00:07:04.906 A:middle
internet is now safe for ECN.

00:07:05.996 --> 00:07:08.016 A:middle
Now we were not expecting to see

00:07:08.346 --> 00:07:10.896 A:middle
any actual congestion marking

00:07:11.156 --> 00:07:12.636 A:middle
happening because until the

00:07:12.666 --> 00:07:13.916 A:middle
clients and servers are doing

00:07:13.916 --> 00:07:15.646 A:middle
ECN, there's an awful lot of

00:07:15.646 --> 00:07:17.426 A:middle
incentive for the network

00:07:17.426 --> 00:07:18.746 A:middle
operators to start deploying it.

00:07:19.406 --> 00:07:21.836 A:middle
And indeed, we saw very little

00:07:22.486 --> 00:07:24.876 A:middle
congestion marking in most of

00:07:24.876 --> 00:07:25.386 A:middle
the world.

00:07:25.466 --> 00:07:27.606 A:middle
But then we looked a bit further

00:07:28.306 --> 00:07:31.956 A:middle
and we saw in Mexico of all the

00:07:31.956 --> 00:07:34.976 A:middle
device reports we collected 3%

00:07:34.976 --> 00:07:36.426 A:middle
of them had seen at least one

00:07:36.796 --> 00:07:38.486 A:middle
congestion experience mark on a

00:07:38.486 --> 00:07:38.936 A:middle
packet.

00:07:39.916 --> 00:07:41.316 A:middle
In France it was 6%.

00:07:42.106 --> 00:07:43.936 A:middle
In Argentina it was 30%.

00:07:44.786 --> 00:07:45.946 A:middle
I'm not sure what they're doing

00:07:45.946 --> 00:07:47.176 A:middle
in Argentina, but it would

00:07:47.246 --> 00:07:48.766 A:middle
appear that they've already

00:07:48.766 --> 00:07:50.356 A:middle
started deploying ECN, and if

00:07:50.356 --> 00:07:52.056 A:middle
that's true keep up the good

00:07:52.056 --> 00:07:52.836 A:middle
work Argentina.

00:07:52.836 --> 00:07:53.596 A:middle
That's fantastic.

00:07:54.276 --> 00:07:57.886 A:middle
So to summarize, servers are

00:07:57.886 --> 00:08:00.526 A:middle
supporting ECN, clients are

00:07:57.886 --> 00:08:00.526 A:middle
supporting ECN, clients are

00:08:00.526 --> 00:08:03.116 A:middle
supporting ECN, and in iOS 11

00:08:03.116 --> 00:08:04.186 A:middle
now that we've determined it's

00:08:04.186 --> 00:08:06.466 A:middle
safe, 100% of eligible

00:08:07.416 --> 00:08:09.086 A:middle
connections will be using ECN,

00:08:09.306 --> 00:08:11.456 A:middle
on Wi-Fi, Ethernet, and selected

00:08:11.456 --> 00:08:12.026 A:middle
carriers.

00:08:12.196 --> 00:08:14.826 A:middle
If you work for a carrier and

00:08:14.826 --> 00:08:16.026 A:middle
you're not in this program,

00:08:16.296 --> 00:08:18.956 A:middle
contact your carrier relations

00:08:18.956 --> 00:08:21.506 A:middle
person at Apple and they can get

00:08:21.506 --> 00:08:22.926 A:middle
you signed into this program to

00:08:22.926 --> 00:08:24.506 A:middle
support ECN on your networks

00:08:24.506 --> 00:08:24.746 A:middle
too.

00:08:25.486 --> 00:08:26.996 A:middle
So now the stage is set.

00:08:27.196 --> 00:08:28.136 A:middle
The clients are doing it.

00:08:28.346 --> 00:08:29.476 A:middle
The servers are doing it.

00:08:29.936 --> 00:08:32.366 A:middle
Any ISP or network operator in

00:08:32.366 --> 00:08:35.346 A:middle
the world can deploy ECN and see

00:08:35.346 --> 00:08:36.926 A:middle
immediate user experience

00:08:36.966 --> 00:08:38.436 A:middle
benefits for their users.

00:08:39.655 --> 00:08:41.366 A:middle
One common misunderstanding

00:08:41.366 --> 00:08:43.385 A:middle
about ECN is that it has to be

00:08:43.385 --> 00:08:45.536 A:middle
supported end to end on the

00:08:45.536 --> 00:08:46.986 A:middle
entire path across the internet,

00:08:47.246 --> 00:08:48.126 A:middle
and that's not true.

00:08:48.836 --> 00:08:50.836 A:middle
There is only one place that

00:08:50.836 --> 00:08:53.446 A:middle
needs to support ECN for you to

00:08:53.446 --> 00:08:54.146 A:middle
get the benefit.

00:08:56.286 --> 00:08:58.006 A:middle
As I said, on any path between

00:08:58.006 --> 00:08:59.576 A:middle
two devices there is generally

00:08:59.576 --> 00:09:01.646 A:middle
one link which is the bottleneck

00:08:59.576 --> 00:09:01.646 A:middle
one link which is the bottleneck

00:09:01.646 --> 00:09:04.566 A:middle
link, and for most of you at

00:09:04.566 --> 00:09:06.136 A:middle
home with your residential

00:09:06.136 --> 00:09:07.276 A:middle
internet connections that

00:09:07.526 --> 00:09:09.726 A:middle
bottleneck link is an artificial

00:09:09.726 --> 00:09:10.046 A:middle
one.

00:09:10.516 --> 00:09:11.866 A:middle
You may have paid for 10

00:09:11.866 --> 00:09:14.046 A:middle
megabits or 20 megabits or 50

00:09:14.046 --> 00:09:16.526 A:middle
megabits of service and the way

00:09:16.556 --> 00:09:18.956 A:middle
your ISP provides that service

00:09:19.286 --> 00:09:20.746 A:middle
is they artificially throttle

00:09:20.746 --> 00:09:21.916 A:middle
your data to the rate you've

00:09:21.976 --> 00:09:22.536 A:middle
paid for.

00:09:23.066 --> 00:09:25.076 A:middle
So the one queue on your path

00:09:25.076 --> 00:09:27.026 A:middle
for almost all connections is

00:09:27.026 --> 00:09:29.476 A:middle
the one that exists at your

00:09:29.476 --> 00:09:31.726 A:middle
ISP's headend equipment where

00:09:31.826 --> 00:09:33.516 A:middle
they are artificially throttling

00:09:33.516 --> 00:09:34.126 A:middle
your data.

00:09:34.536 --> 00:09:35.866 A:middle
That is the only place on the

00:09:35.866 --> 00:09:37.706 A:middle
path that needs to mark

00:09:37.706 --> 00:09:39.296 A:middle
congestion by setting the bit

00:09:39.356 --> 00:09:40.546 A:middle
instead of by discarding the

00:09:40.546 --> 00:09:43.266 A:middle
packet, and your customers get

00:09:43.266 --> 00:09:45.046 A:middle
the benefit of a faster more

00:09:45.046 --> 00:09:45.876 A:middle
responsive internet.

00:09:46.546 --> 00:09:48.526 A:middle
So with that, I would like to

00:09:48.526 --> 00:09:49.876 A:middle
invite my colleague, David

00:09:49.876 --> 00:09:51.426 A:middle
Schinazzi, to come up on stage

00:09:51.736 --> 00:09:52.776 A:middle
and give you some more news

00:09:52.776 --> 00:09:53.256 A:middle
updates.

00:09:54.516 --> 00:09:59.546 A:middle
[ Applause ]

00:10:00.046 --> 00:10:00.976 A:middle
&gt;&gt; Good afternoon, everyone.

00:10:01.676 --> 00:10:03.606 A:middle
My name is David Schinazzi, I'm

00:10:03.606 --> 00:10:04.866 A:middle
a core networking engineer here

00:10:04.866 --> 00:10:06.306 A:middle
at Apple, and I'm going to start

00:10:06.306 --> 00:10:08.496 A:middle
off by talking about IPv6,

00:10:08.746 --> 00:10:10.036 A:middle
giving you a status update.

00:10:11.156 --> 00:10:13.346 A:middle
And especially if you're writing

00:10:13.346 --> 00:10:14.526 A:middle
apps that use the internet

00:10:14.526 --> 00:10:16.116 A:middle
today, well you actually really

00:10:16.116 --> 00:10:16.436 A:middle
care.

00:10:18.036 --> 00:10:20.176 A:middle
So as some of you might know,

00:10:20.736 --> 00:10:21.916 A:middle
yesterday was the 5th

00:10:21.916 --> 00:10:23.886 A:middle
anniversary of World IPv6

00:10:23.996 --> 00:10:24.486 A:middle
launch.

00:10:25.426 --> 00:10:28.216 A:middle
So five years ago yesterday many

00:10:28.216 --> 00:10:30.346 A:middle
content provider across the

00:10:30.346 --> 00:10:31.896 A:middle
internet got together and

00:10:31.896 --> 00:10:32.686 A:middle
enabled IPv6.

00:10:32.776 --> 00:10:35.346 A:middle
And it worked well so they kept

00:10:35.346 --> 00:10:37.196 A:middle
it on, but what's happened

00:10:37.196 --> 00:10:38.106 A:middle
since?

00:10:38.306 --> 00:10:40.376 A:middle
This is a graph of the client

00:10:40.376 --> 00:10:42.776 A:middle
device adoption over the years.

00:10:42.836 --> 00:10:45.146 A:middle
At the time less than 1% of

00:10:45.146 --> 00:10:46.706 A:middle
devices supported IPv6.

00:10:47.046 --> 00:10:48.506 A:middle
Now we're almost at 20%.

00:10:49.306 --> 00:10:51.076 A:middle
And a really important point is

00:10:51.076 --> 00:10:52.886 A:middle
that if you're writing apps for

00:10:52.886 --> 00:10:54.686 A:middle
Apple devices, on the markets

00:10:54.686 --> 00:10:55.946 A:middle
where we see most Apple devices

00:10:55.946 --> 00:10:56.936 A:middle
these numbers are generally

00:10:56.936 --> 00:10:57.396 A:middle
higher.

00:10:58.356 --> 00:10:59.416 A:middle
Especially in the case of

00:10:59.416 --> 00:11:02.996 A:middle
cellular, almost all carriers

00:10:59.416 --> 00:11:02.996 A:middle
cellular, almost all carriers

00:11:02.996 --> 00:11:04.586 A:middle
that we work with now deploy

00:11:04.586 --> 00:11:06.196 A:middle
dual stack, meaning that they

00:11:06.196 --> 00:11:08.416 A:middle
offer both IPv4 and IPv6.

00:11:08.536 --> 00:11:11.716 A:middle
And the great news is, it works

00:11:11.716 --> 00:11:11.956 A:middle
better.

00:11:12.686 --> 00:11:14.156 A:middle
So we've actually measured this

00:11:14.306 --> 00:11:15.106 A:middle
based on a lot of the

00:11:15.106 --> 00:11:16.476 A:middle
connections our devices make.

00:11:16.976 --> 00:11:19.206 A:middle
The HTP request load in 15 to

00:11:19.206 --> 00:11:22.006 A:middle
30% faster, which means that if

00:11:22.006 --> 00:11:23.166 A:middle
you actually have two apps side

00:11:23.166 --> 00:11:24.836 A:middle
by side, you will notice the

00:11:24.836 --> 00:11:25.526 A:middle
difference.

00:11:25.626 --> 00:11:27.286 A:middle
Your customers will see a

00:11:27.286 --> 00:11:27.946 A:middle
difference.

00:11:28.786 --> 00:11:29.926 A:middle
So if you don't know if your

00:11:29.926 --> 00:11:31.776 A:middle
server supports IPv6 today,

00:11:32.366 --> 00:11:34.356 A:middle
definitely check, contact your

00:11:34.356 --> 00:11:35.726 A:middle
server team and make sure they

00:11:35.726 --> 00:11:36.376 A:middle
support IPv6.

00:11:36.376 --> 00:11:38.216 A:middle
You can't afford to let this

00:11:38.216 --> 00:11:39.366 A:middle
performance wane on the table.

00:11:41.266 --> 00:11:42.536 A:middle
Another important trend that I

00:11:42.536 --> 00:11:43.996 A:middle
like to talk about is NAT64.

00:11:43.996 --> 00:11:46.536 A:middle
So we started talking about this

00:11:46.536 --> 00:11:48.976 A:middle
at WWDC two years ago, and then

00:11:48.976 --> 00:11:49.916 A:middle
we made it an app store

00:11:49.916 --> 00:11:52.316 A:middle
requirement last year but now

00:11:52.316 --> 00:11:52.786 A:middle
it's here.

00:11:52.846 --> 00:11:54.676 A:middle
It's in production for several

00:11:54.676 --> 00:11:56.926 A:middle
months now on a major carrier in

00:11:56.926 --> 00:12:00.336 A:middle
the U.S., every single device is

00:11:56.926 --> 00:12:00.336 A:middle
the U.S., every single device is

00:12:00.606 --> 00:12:01.206 A:middle
v6 only.

00:12:01.726 --> 00:12:03.306 A:middle
They don't have an IPv4 address,

00:12:03.346 --> 00:12:05.456 A:middle
they can only talk using IPv6.

00:12:06.256 --> 00:12:07.486 A:middle
So that doesn't mean that you

00:12:07.486 --> 00:12:08.896 A:middle
can't talk to v4 servers.

00:12:08.896 --> 00:12:10.426 A:middle
Thanks to a box on the network

00:12:10.746 --> 00:12:13.426 A:middle
called the NAT64, devices can

00:12:13.426 --> 00:12:14.846 A:middle
still connect to those servers,

00:12:14.946 --> 00:12:16.046 A:middle
however, you're not getting the

00:12:16.046 --> 00:12:17.226 A:middle
performance benefits that we're

00:12:17.226 --> 00:12:18.356 A:middle
talking about by using v6

00:12:18.356 --> 00:12:19.336 A:middle
natively.

00:12:20.606 --> 00:12:21.966 A:middle
However, what's really important

00:12:21.966 --> 00:12:23.996 A:middle
is that the app needs to make

00:12:23.996 --> 00:12:25.076 A:middle
sure it supports IPv6.

00:12:25.206 --> 00:12:27.096 A:middle
If it tries to connect to IPv4,

00:12:27.096 --> 00:12:28.156 A:middle
that will not work.

00:12:29.126 --> 00:12:30.156 A:middle
So how do you do that?

00:12:30.546 --> 00:12:31.376 A:middle
It's very simple.

00:12:31.976 --> 00:12:33.756 A:middle
If you use our higher level API

00:12:34.006 --> 00:12:35.786 A:middle
such as URLSession CFNetwork,

00:12:36.176 --> 00:12:37.536 A:middle
the system libraries do all the

00:12:37.536 --> 00:12:38.596 A:middle
heavy lifting for you.

00:12:38.966 --> 00:12:39.976 A:middle
You don't need to worry about

00:12:40.006 --> 00:12:42.136 A:middle
IPv4, IPv6, any of that.

00:12:42.136 --> 00:12:43.146 A:middle
It just works.

00:12:43.556 --> 00:12:45.536 A:middle
What you really want to avoid is

00:12:45.536 --> 00:12:47.936 A:middle
using Legacy IPv4 on the APIs,

00:12:48.466 --> 00:12:50.046 A:middle
directly typing in an IPv4

00:12:50.046 --> 00:12:53.146 A:middle
address into your app, or using

00:12:53.146 --> 00:12:54.156 A:middle
preflight checks.

00:12:54.846 --> 00:12:57.346 A:middle
For example, if you check if the

00:12:57.346 --> 00:12:59.036 A:middle
device is IPv4 address before

00:12:59.036 --> 00:13:00.366 A:middle
making connection, that won't

00:12:59.036 --> 00:13:00.366 A:middle
making connection, that won't

00:13:00.366 --> 00:13:00.936 A:middle
work anymore.

00:13:03.486 --> 00:13:05.346 A:middle
And why -- another reason why

00:13:05.346 --> 00:13:06.316 A:middle
you should really care is that

00:13:06.316 --> 00:13:07.916 A:middle
this is an app review

00:13:07.916 --> 00:13:08.946 A:middle
enforcement.

00:13:08.946 --> 00:13:10.496 A:middle
It's required for any app,

00:13:10.856 --> 00:13:12.826 A:middle
either new or an update, to get

00:13:12.826 --> 00:13:13.546 A:middle
on the app store.

00:13:14.076 --> 00:13:16.036 A:middle
Every one of them is tested on

00:13:16.266 --> 00:13:18.666 A:middle
an IPv6 only NAT64 network, and

00:13:18.666 --> 00:13:20.256 A:middle
if it doesn't work you will not

00:13:20.256 --> 00:13:21.236 A:middle
make it onto the store.

00:13:21.886 --> 00:13:23.196 A:middle
However, I really want to

00:13:23.196 --> 00:13:24.776 A:middle
congratulate all you developers

00:13:24.776 --> 00:13:26.676 A:middle
because you've fixed all of your

00:13:26.676 --> 00:13:28.246 A:middle
apps and we now almost never

00:13:28.246 --> 00:13:29.196 A:middle
have to reject anything.

00:13:29.596 --> 00:13:30.356 A:middle
So great job there.

00:13:32.076 --> 00:13:34.066 A:middle
If you want more tips on how to

00:13:34.066 --> 00:13:34.986 A:middle
really make sure everything

00:13:34.986 --> 00:13:37.126 A:middle
works, there is a great section

00:13:37.126 --> 00:13:38.676 A:middle
on the developer website called

00:13:38.676 --> 00:13:40.696 A:middle
supporting IPv6 DNS64/NAT64

00:13:40.696 --> 00:13:41.466 A:middle
networks.

00:13:41.626 --> 00:13:42.896 A:middle
Feel free to also join us in the

00:13:42.896 --> 00:13:45.196 A:middle
labs tomorrow and Friday with

00:13:45.196 --> 00:13:45.846 A:middle
any questions.

00:13:49.046 --> 00:13:50.626 A:middle
Now I'd like to switch gears and

00:13:50.626 --> 00:13:52.426 A:middle
talk about networking on the

00:13:52.426 --> 00:13:54.646 A:middle
device itself, and introduce

00:13:54.646 --> 00:13:55.946 A:middle
something this year that we're

00:13:55.946 --> 00:13:57.416 A:middle
calling user space networking.

00:13:58.646 --> 00:14:00.596 A:middle
You're probably familiar with

00:13:58.646 --> 00:14:00.596 A:middle
You're probably familiar with

00:14:00.666 --> 00:14:01.826 A:middle
the traditional model of a

00:14:01.826 --> 00:14:04.396 A:middle
networking stack where a lot of

00:14:04.396 --> 00:14:05.806 A:middle
the hard work is done inside the

00:14:05.836 --> 00:14:06.296 A:middle
kernel.

00:14:06.436 --> 00:14:08.796 A:middle
So protocol such as Wi-Fi, IP,

00:14:08.796 --> 00:14:10.486 A:middle
TCP are all handled inside the

00:14:10.486 --> 00:14:10.926 A:middle
kernel.

00:14:11.536 --> 00:14:12.796 A:middle
Then there's a boundary called

00:14:12.896 --> 00:14:14.866 A:middle
the BSD socket API, and

00:14:15.256 --> 00:14:16.486 A:middle
everything else is handled

00:14:16.486 --> 00:14:17.126 A:middle
inside the app.

00:14:17.846 --> 00:14:18.906 A:middle
And by that I mean inside the

00:14:18.906 --> 00:14:20.006 A:middle
app process, not necessarily

00:14:20.006 --> 00:14:20.846 A:middle
inside your code.

00:14:21.186 --> 00:14:22.376 A:middle
It could be inside system

00:14:22.376 --> 00:14:24.196 A:middle
libraries, but protocols like

00:14:24.196 --> 00:14:26.096 A:middle
HTP and TLS are handled inside

00:14:26.096 --> 00:14:27.046 A:middle
that process.

00:14:27.456 --> 00:14:29.456 A:middle
What we're introducing for the

00:14:29.456 --> 00:14:31.696 A:middle
first time with iOS 11 is we're

00:14:31.696 --> 00:14:33.456 A:middle
unifying everything inside the

00:14:33.456 --> 00:14:33.726 A:middle
app.

00:14:34.386 --> 00:14:36.216 A:middle
And what this means is that the

00:14:36.216 --> 00:14:37.826 A:middle
protocols can interact much

00:14:37.826 --> 00:14:40.076 A:middle
tighter and everything is more

00:14:40.116 --> 00:14:40.696 A:middle
performant.

00:14:40.756 --> 00:14:42.786 A:middle
We've actually noticed great CPU

00:14:42.786 --> 00:14:44.826 A:middle
usage reductions which allows

00:14:44.826 --> 00:14:46.196 A:middle
you to spend more time on

00:14:46.196 --> 00:14:48.116 A:middle
animations, but also at the end

00:14:48.116 --> 00:14:49.146 A:middle
of the day users have more

00:14:49.146 --> 00:14:49.966 A:middle
battery life.

00:14:51.756 --> 00:14:53.076 A:middle
One point to note is that you

00:14:53.076 --> 00:14:54.806 A:middle
will only be able to get this if

00:14:54.806 --> 00:14:56.006 A:middle
you're using a high level IPI

00:14:56.006 --> 00:14:57.206 A:middle
such as URLSession.

00:14:57.756 --> 00:14:59.226 A:middle
You will not get these benefits

00:14:59.226 --> 00:15:00.246 A:middle
if you're still using like a

00:14:59.226 --> 00:15:00.246 A:middle
if you're still using like a

00:15:00.246 --> 00:15:01.556 A:middle
CBSD sockets.

00:15:02.156 --> 00:15:04.236 A:middle
And another point that I would

00:15:04.236 --> 00:15:05.996 A:middle
like to make about this is that

00:15:05.996 --> 00:15:08.196 A:middle
Network Kernel Extensions, which

00:15:08.196 --> 00:15:10.296 A:middle
rely on these legacy BSD sockets

00:15:10.296 --> 00:15:12.406 A:middle
inside the kernel, will soon be

00:15:12.406 --> 00:15:13.096 A:middle
deprecated.

00:15:13.466 --> 00:15:15.516 A:middle
So if you're using those, please

00:15:15.516 --> 00:15:17.666 A:middle
start right now transitioning to

00:15:17.666 --> 00:15:19.196 A:middle
the network extension framework

00:15:19.596 --> 00:15:20.716 A:middle
and come talk to us if you have

00:15:20.716 --> 00:15:22.016 A:middle
any questions about this.

00:15:23.456 --> 00:15:24.326 A:middle
Speaking of the network

00:15:24.326 --> 00:15:26.726 A:middle
extension framework, I'd like to

00:15:26.726 --> 00:15:29.116 A:middle
introduce two new APIs this year

00:15:29.546 --> 00:15:31.126 A:middle
regarding Wi-Fi configuration

00:15:31.126 --> 00:15:32.366 A:middle
and extending DNS.

00:15:32.976 --> 00:15:35.416 A:middle
So the new framework was

00:15:35.416 --> 00:15:37.536 A:middle
introduced two years ago and was

00:15:37.536 --> 00:15:39.226 A:middle
built with four main temples,

00:15:39.976 --> 00:15:42.736 A:middle
NEVPNManager allows you to

00:15:43.656 --> 00:15:45.356 A:middle
configure the VPN stack on the

00:15:45.356 --> 00:15:45.916 A:middle
device.

00:15:46.446 --> 00:15:48.336 A:middle
NETunnelProvider allow you to

00:15:48.336 --> 00:15:49.706 A:middle
build your own customer VPN

00:15:49.816 --> 00:15:50.436 A:middle
protocols.

00:15:51.076 --> 00:15:52.806 A:middle
NEHotspotHelper allow you to

00:15:53.166 --> 00:15:54.926 A:middle
customize how your device

00:15:55.456 --> 00:15:57.736 A:middle
authenticates to Wi-Fi hotspots.

00:15:58.306 --> 00:16:00.096 A:middle
And finally, NEFilterProvider

00:15:58.306 --> 00:16:00.096 A:middle
And finally, NEFilterProvider

00:16:00.096 --> 00:16:01.786 A:middle
allows you to build a secure

00:16:01.896 --> 00:16:03.246 A:middle
on-device content filter.

00:16:03.916 --> 00:16:05.426 A:middle
I won't go into more details on

00:16:05.426 --> 00:16:07.366 A:middle
these four parts of the API,

00:16:07.366 --> 00:16:09.536 A:middle
however there's a great WWDC

00:16:09.536 --> 00:16:11.536 A:middle
session from two years ago that

00:16:11.586 --> 00:16:12.906 A:middle
goes into more detail.

00:16:13.956 --> 00:16:16.346 A:middle
So let's dive into any hotspot

00:16:16.346 --> 00:16:17.106 A:middle
configuration.

00:16:18.396 --> 00:16:20.616 A:middle
You may have had this experience

00:16:20.616 --> 00:16:22.356 A:middle
before where you bought a really

00:16:22.356 --> 00:16:24.326 A:middle
nice smart camera.

00:16:24.736 --> 00:16:26.296 A:middle
You take it out of the box and

00:16:26.296 --> 00:16:27.746 A:middle
it tells you, oh join this Wi-Fi

00:16:27.746 --> 00:16:30.486 A:middle
network on your iPhone to be

00:16:30.486 --> 00:16:32.256 A:middle
able to configure the app.

00:16:32.256 --> 00:16:33.726 A:middle
And so in the app it tells you,

00:16:33.726 --> 00:16:35.196 A:middle
oh go to settings, Wi-Fi, type

00:16:35.196 --> 00:16:36.976 A:middle
it in, and that's pretty

00:16:36.976 --> 00:16:37.716 A:middle
cumbersome.

00:16:37.716 --> 00:16:38.976 A:middle
The user could mistype the

00:16:38.976 --> 00:16:39.596 A:middle
password.

00:16:39.596 --> 00:16:40.756 A:middle
They could also not remember

00:16:40.756 --> 00:16:42.016 A:middle
where the settings app is.

00:16:42.406 --> 00:16:43.686 A:middle
And we had a lot of requests

00:16:43.686 --> 00:16:45.186 A:middle
from developers for a better

00:16:45.186 --> 00:16:46.186 A:middle
solution for this.

00:16:46.896 --> 00:16:48.666 A:middle
And what we've added is this

00:16:48.666 --> 00:16:50.496 A:middle
simple API that allows you to do

00:16:50.496 --> 00:16:52.946 A:middle
everything from the app.

00:16:53.516 --> 00:16:57.676 A:middle
[ Applause ]

00:16:58.176 --> 00:16:59.786 A:middle
Now the user never has to leave

00:16:59.786 --> 00:17:01.076 A:middle
the app anymore, they just get a

00:16:59.786 --> 00:17:01.076 A:middle
the app anymore, they just get a

00:17:01.076 --> 00:17:02.626 A:middle
prompt to make sure they will

00:17:02.676 --> 00:17:03.886 A:middle
actually want to do this.

00:17:04.165 --> 00:17:05.526 A:middle
They click join, they associate

00:17:05.526 --> 00:17:06.076 A:middle
to the Wi-Fi.

00:17:06.076 --> 00:17:07.256 A:middle
Simple as that.

00:17:07.616 --> 00:17:10.185 A:middle
You can even set up this API to

00:17:10.185 --> 00:17:10.925 A:middle
be temporary.

00:17:10.925 --> 00:17:13.326 A:middle
So if you're building a

00:17:13.326 --> 00:17:14.546 A:middle
configuration app for a smart

00:17:14.546 --> 00:17:16.396 A:middle
device, you only really want to

00:17:16.396 --> 00:17:18.175 A:middle
be connected to that Wi-Fi if

00:17:18.175 --> 00:17:19.146 A:middle
you're inside the app.

00:17:19.146 --> 00:17:20.636 A:middle
So if the user decides to leave

00:17:20.636 --> 00:17:21.695 A:middle
your app and go do something

00:17:21.695 --> 00:17:23.026 A:middle
else, the device will

00:17:23.026 --> 00:17:24.656 A:middle
automatically disassociate from

00:17:24.656 --> 00:17:27.126 A:middle
Wi-Fi and join -- rejoin their

00:17:27.126 --> 00:17:28.256 A:middle
other Wi-Fi networks.

00:17:28.956 --> 00:17:31.096 A:middle
You can also use this API for

00:17:31.256 --> 00:17:32.696 A:middle
the traditional sense of using

00:17:32.696 --> 00:17:33.126 A:middle
Wi-Fi.

00:17:33.126 --> 00:17:34.196 A:middle
For example, if you're building

00:17:34.196 --> 00:17:36.446 A:middle
an app for chain of cafes and

00:17:36.446 --> 00:17:37.336 A:middle
would like your users to

00:17:37.336 --> 00:17:38.656 A:middle
automatically join the Wi-Fi in

00:17:38.656 --> 00:17:39.496 A:middle
these cafes.

00:17:40.236 --> 00:17:41.786 A:middle
And of course, the CPI supports

00:17:41.786 --> 00:17:43.936 A:middle
all the modes of authentication

00:17:43.936 --> 00:17:46.036 A:middle
that our Wi-Fi stack supports

00:17:46.736 --> 00:17:46.856 A:middle
today.

00:17:47.346 --> 00:17:48.566 A:middle
To show you just how easy this

00:17:48.566 --> 00:17:50.876 A:middle
is, here's a little code sample

00:17:50.876 --> 00:17:52.506 A:middle
for these two examples.

00:17:52.506 --> 00:17:53.856 A:middle
So if you want to configure a

00:17:53.856 --> 00:17:55.586 A:middle
camera, just create a

00:17:55.586 --> 00:17:57.356 A:middle
configuration with the name of

00:17:57.356 --> 00:17:58.616 A:middle
the Wi-Fi and the password.

00:17:59.426 --> 00:18:01.136 A:middle
Set the join one's property to

00:17:59.426 --> 00:18:01.136 A:middle
Set the join one's property to

00:18:01.136 --> 00:18:02.276 A:middle
indicate that you want to

00:18:02.276 --> 00:18:04.396 A:middle
dissociate when the device --

00:18:04.606 --> 00:18:07.236 A:middle
when the user leaves your app,

00:18:07.236 --> 00:18:07.836 A:middle
and just apply the

00:18:07.836 --> 00:18:08.586 A:middle
configuration.

00:18:09.606 --> 00:18:11.646 A:middle
Then check the result value for

00:18:11.646 --> 00:18:12.226 A:middle
success.

00:18:12.726 --> 00:18:14.116 A:middle
In the café use case which is

00:18:14.116 --> 00:18:15.516 A:middle
even simpler, just create a

00:18:15.516 --> 00:18:17.946 A:middle
configuration, apply it and

00:18:18.046 --> 00:18:18.356 A:middle
you're done.

00:18:20.516 --> 00:18:21.956 A:middle
Now I'd like to talk about any

00:18:21.956 --> 00:18:23.206 A:middle
DNS proxy provider.

00:18:24.646 --> 00:18:26.716 A:middle
The CPL let's you customize how

00:18:27.826 --> 00:18:29.666 A:middle
the iPhone or other iOS device

00:18:29.666 --> 00:18:33.666 A:middle
interacts with DNS, so this API

00:18:33.846 --> 00:18:35.326 A:middle
allows you to, in its simplest

00:18:35.326 --> 00:18:36.986 A:middle
mode, simply redirect all the

00:18:37.046 --> 00:18:39.106 A:middle
inquiries to a resolver that you

00:18:39.106 --> 00:18:39.486 A:middle
own.

00:18:39.956 --> 00:18:41.496 A:middle
For example, if that resolver

00:18:41.496 --> 00:18:43.756 A:middle
has better features, or you can

00:18:43.756 --> 00:18:44.696 A:middle
even use this to get the

00:18:44.696 --> 00:18:46.576 A:middle
individual DNS queries and send

00:18:46.576 --> 00:18:49.276 A:middle
them over a custom protocol such

00:18:49.446 --> 00:18:53.006 A:middle
as DNS over TLS or DNS over GTP.

00:18:53.796 --> 00:18:55.856 A:middle
So that was an update on network

00:18:55.856 --> 00:18:56.996 A:middle
extension this year.

00:18:57.446 --> 00:18:59.456 A:middle
As a quick reminder, this is a

00:18:59.456 --> 00:19:02.366 A:middle
very powerful API so it requires

00:18:59.456 --> 00:19:02.366 A:middle
very powerful API so it requires

00:19:02.436 --> 00:19:03.606 A:middle
X-code capabilities and

00:19:03.606 --> 00:19:05.686 A:middle
entitlements, and also user

00:19:05.686 --> 00:19:07.266 A:middle
consent for everything it does.

00:19:08.176 --> 00:19:10.286 A:middle
Now I would like to invite

00:19:10.286 --> 00:19:11.586 A:middle
Christoph Paasch on the stage to

00:19:11.586 --> 00:19:13.056 A:middle
talk about multipath devices.

00:19:14.516 --> 00:19:16.706 A:middle
[ Applause ]

00:19:17.206 --> 00:19:17.826 A:middle
&gt;&gt; Thank you, David.

00:19:18.826 --> 00:19:19.716 A:middle
Hello, everybody.

00:19:20.686 --> 00:19:22.016 A:middle
My name is Christoph Paasch.

00:19:22.076 --> 00:19:23.446 A:middle
I'm a networking engineer at

00:19:23.526 --> 00:19:25.506 A:middle
Apple, and I will show you the

00:19:25.506 --> 00:19:27.766 A:middle
new technologies we have in iOS

00:19:27.766 --> 00:19:29.156 A:middle
11 that will improve the

00:19:29.156 --> 00:19:31.186 A:middle
networking of your applications

00:19:31.476 --> 00:19:32.406 A:middle
on mobile devices.

00:19:35.306 --> 00:19:37.386 A:middle
So, you have all experienced it.

00:19:38.096 --> 00:19:39.496 A:middle
You are using your application

00:19:39.736 --> 00:19:41.286 A:middle
and your application is

00:19:41.286 --> 00:19:43.276 A:middle
downloading something from the

00:19:43.276 --> 00:19:45.466 A:middle
internet, and while you're using

00:19:45.466 --> 00:19:47.036 A:middle
it, you are walking out of your

00:19:47.036 --> 00:19:47.386 A:middle
home.

00:19:48.246 --> 00:19:49.326 A:middle
Now as you're walking out of

00:19:49.326 --> 00:19:51.056 A:middle
your home, you're also walking

00:19:51.106 --> 00:19:52.606 A:middle
farther away from your Wi-Fi

00:19:52.606 --> 00:19:54.726 A:middle
access point, which basically

00:19:54.726 --> 00:19:56.706 A:middle
means the connection that you

00:19:56.706 --> 00:19:58.496 A:middle
have created on Wi-Fi is getting

00:19:58.496 --> 00:20:00.656 A:middle
slower and slower, and

00:19:58.496 --> 00:20:00.656 A:middle
slower and slower, and

00:20:00.656 --> 00:20:03.686 A:middle
ultimately your application is

00:20:03.686 --> 00:20:05.236 A:middle
actually getting slower as well

00:20:05.236 --> 00:20:06.416 A:middle
because it cannot download the

00:20:06.416 --> 00:20:07.556 A:middle
content from the internet.

00:20:08.806 --> 00:20:10.156 A:middle
And it will only be able to

00:20:10.156 --> 00:20:12.076 A:middle
continue again when you have

00:20:12.076 --> 00:20:13.976 A:middle
then created a new connection

00:20:14.246 --> 00:20:16.026 A:middle
over to cellular link.

00:20:17.186 --> 00:20:19.096 A:middle
Now, the reason why this happens

00:20:19.206 --> 00:20:21.136 A:middle
is because the protocols that I

00:20:21.136 --> 00:20:23.266 A:middle
use today have been specified

00:20:23.306 --> 00:20:24.926 A:middle
several decades ago and they

00:20:24.926 --> 00:20:26.446 A:middle
have not been designed with

00:20:26.446 --> 00:20:28.296 A:middle
mobile devices in mind.

00:20:29.636 --> 00:20:31.996 A:middle
Now at Apple, we are aware of

00:20:32.046 --> 00:20:33.816 A:middle
this problem since several years

00:20:33.816 --> 00:20:36.246 A:middle
now, and we have technologies in

00:20:36.366 --> 00:20:38.496 A:middle
iOS that try to address exactly

00:20:38.496 --> 00:20:39.316 A:middle
this scenario.

00:20:40.086 --> 00:20:42.206 A:middle
We have Wi-Fi assist since iOS

00:20:42.206 --> 00:20:44.936 A:middle
9, and now in iOS 11 we are

00:20:44.936 --> 00:20:46.246 A:middle
pushing this even farther.

00:20:47.306 --> 00:20:48.566 A:middle
We are introducing a new

00:20:48.566 --> 00:20:50.496 A:middle
multipath transport protocol

00:20:50.766 --> 00:20:52.406 A:middle
that is called Multipath TCP,

00:20:52.406 --> 00:20:54.666 A:middle
and we will open it as a public

00:20:54.666 --> 00:20:56.436 A:middle
API in iOS 11.

00:20:58.516 --> 00:21:00.906 A:middle
Now, let's take a step back

00:20:58.516 --> 00:21:00.906 A:middle
Now, let's take a step back

00:21:00.906 --> 00:21:04.376 A:middle
first and let's take a look at

00:21:04.376 --> 00:21:05.596 A:middle
what are the scenarios that we

00:21:05.596 --> 00:21:08.496 A:middle
are trying to address here.

00:21:08.606 --> 00:21:10.466 A:middle
So when your phone is connected

00:21:10.466 --> 00:21:12.686 A:middle
to a good Wi-Fi network, what

00:21:12.686 --> 00:21:13.856 A:middle
will happen is you create a

00:21:13.856 --> 00:21:15.086 A:middle
connection and you will only

00:21:15.086 --> 00:21:17.336 A:middle
download from the Wi-Fi network.

00:21:18.356 --> 00:21:20.416 A:middle
Now as your user is walking out

00:21:20.416 --> 00:21:22.196 A:middle
of the Wi-Fi, walking away from

00:21:22.196 --> 00:21:24.166 A:middle
it, what happens is the signal

00:21:24.166 --> 00:21:25.486 A:middle
strength will get lower and

00:21:25.486 --> 00:21:27.106 A:middle
lower, and the connection will

00:21:27.106 --> 00:21:28.846 A:middle
get slower and ultimately it

00:21:28.846 --> 00:21:29.856 A:middle
completely stops.

00:21:31.416 --> 00:21:32.946 A:middle
What happens then is you will

00:21:32.946 --> 00:21:34.946 A:middle
need to -- if you want to keep

00:21:34.946 --> 00:21:36.836 A:middle
on downloading your data, you

00:21:36.836 --> 00:21:37.806 A:middle
will need to create a new

00:21:37.806 --> 00:21:39.556 A:middle
connection on the cellular link

00:21:39.556 --> 00:21:41.256 A:middle
and from that moment on you are

00:21:41.256 --> 00:21:42.486 A:middle
good to go again and your

00:21:42.486 --> 00:21:44.736 A:middle
application responds again to

00:21:44.736 --> 00:21:45.876 A:middle
the data that is coming from the

00:21:45.876 --> 00:21:46.206 A:middle
server.

00:21:47.466 --> 00:21:49.036 A:middle
If you want to handle this kind

00:21:49.036 --> 00:21:50.336 A:middle
of scenario, inside your

00:21:50.336 --> 00:21:52.186 A:middle
application at the application

00:21:52.186 --> 00:21:53.786 A:middle
layer, there are quite a few

00:21:53.786 --> 00:21:55.366 A:middle
things that you need to do.

00:21:55.656 --> 00:21:58.006 A:middle
First, you will need to record

00:21:58.006 --> 00:21:59.316 A:middle
everything that you are doing

00:21:59.356 --> 00:22:01.106 A:middle
because you never know when

00:21:59.356 --> 00:22:01.106 A:middle
because you never know when

00:22:01.106 --> 00:22:04.556 A:middle
Wi-Fi is going to drop out so

00:22:04.556 --> 00:22:05.746 A:middle
you will need to remember what

00:22:05.746 --> 00:22:06.856 A:middle
you have been doing and what

00:22:06.856 --> 00:22:08.236 A:middle
were the request that are in

00:22:08.236 --> 00:22:08.616 A:middle
flight.

00:22:09.806 --> 00:22:12.946 A:middle
Second, you will need a way to

00:22:13.046 --> 00:22:15.186 A:middle
detect that Wi-Fi is getting

00:22:15.186 --> 00:22:16.836 A:middle
worse, so you need to somehow

00:22:16.836 --> 00:22:18.206 A:middle
monitor the progress of the

00:22:18.206 --> 00:22:19.226 A:middle
Wi-Fi connection.

00:22:20.496 --> 00:22:22.406 A:middle
Now, once you have finally

00:22:22.406 --> 00:22:24.206 A:middle
detected that Wi-Fi, it's no

00:22:24.206 --> 00:22:26.436 A:middle
longer available and can no

00:22:26.436 --> 00:22:27.766 A:middle
longer deliver the service that

00:22:27.766 --> 00:22:29.266 A:middle
you need, you will need to

00:22:29.266 --> 00:22:30.506 A:middle
create a new connection over

00:22:30.506 --> 00:22:30.986 A:middle
cellular.

00:22:31.146 --> 00:22:32.776 A:middle
That means you need to do a DSN

00:22:32.956 --> 00:22:36.146 A:middle
handshake, a TCP handshake, and

00:22:36.146 --> 00:22:37.136 A:middle
a TLS handshake.

00:22:37.726 --> 00:22:39.596 A:middle
And only after all those steps

00:22:39.946 --> 00:22:41.676 A:middle
you can finally send your

00:22:41.676 --> 00:22:44.366 A:middle
request over the cellular

00:22:44.366 --> 00:22:46.166 A:middle
interface and your application

00:22:46.166 --> 00:22:47.316 A:middle
can make progress again.

00:22:48.786 --> 00:22:49.946 A:middle
Doing this at the application

00:22:49.946 --> 00:22:52.526 A:middle
layer is very cumbersome and

00:22:52.836 --> 00:22:54.166 A:middle
that's one of those scenarios

00:22:54.206 --> 00:22:55.926 A:middle
that we want to address.

00:22:57.736 --> 00:22:59.186 A:middle
Let's take a look at another

00:22:59.186 --> 00:22:59.776 A:middle
scenario.

00:22:59.966 --> 00:23:01.616 A:middle
It's basically when you're in a

00:22:59.966 --> 00:23:01.616 A:middle
It's basically when you're in a

00:23:01.616 --> 00:23:03.236 A:middle
very poor Wi-Fi scenario.

00:23:03.756 --> 00:23:05.856 A:middle
For example, you're sitting in a

00:23:05.996 --> 00:23:07.226 A:middle
café and you're connecting to

00:23:07.226 --> 00:23:08.176 A:middle
the public hotspot.

00:23:09.126 --> 00:23:10.586 A:middle
Now, usually this hotspot

00:23:10.876 --> 00:23:12.386 A:middle
probably works very well,

00:23:13.066 --> 00:23:14.986 A:middle
however, sometimes there is some

00:23:14.986 --> 00:23:16.406 A:middle
other users also in this café

00:23:16.406 --> 00:23:17.876 A:middle
and maybe one of them is

00:23:17.876 --> 00:23:19.226 A:middle
downloading a huge file.

00:23:20.086 --> 00:23:23.126 A:middle
And because very often there's a

00:23:23.126 --> 00:23:24.646 A:middle
lack of smart queue management

00:23:24.646 --> 00:23:27.116 A:middle
in the network, this download of

00:23:27.116 --> 00:23:28.746 A:middle
this huge file will create a

00:23:28.746 --> 00:23:30.086 A:middle
large chunk of buffer bloat

00:23:30.086 --> 00:23:32.076 A:middle
inside the network, and this

00:23:32.076 --> 00:23:35.056 A:middle
buffer bloat is making all other

00:23:35.056 --> 00:23:36.796 A:middle
internet connections also very

00:23:36.796 --> 00:23:37.176 A:middle
slow.

00:23:37.776 --> 00:23:39.796 A:middle
And so it means basically your

00:23:39.796 --> 00:23:42.336 A:middle
application will no more be able

00:23:42.336 --> 00:23:43.776 A:middle
to download the traffic from the

00:23:43.776 --> 00:23:45.636 A:middle
data, from the internet.

00:23:47.266 --> 00:23:48.496 A:middle
If you want to address such kind

00:23:48.496 --> 00:23:49.566 A:middle
of scenarios inside your

00:23:49.566 --> 00:23:51.596 A:middle
application, you would want to

00:23:51.596 --> 00:23:53.226 A:middle
basically create a connection on

00:23:53.226 --> 00:23:55.766 A:middle
Wi-Fi and on cell, and as soon

00:23:55.766 --> 00:23:57.506 A:middle
as you realize that Wi-Fi is no

00:23:57.506 --> 00:23:59.596 A:middle
more good enough because the

00:23:59.596 --> 00:24:01.186 A:middle
delay is just getting too high,

00:23:59.596 --> 00:24:01.186 A:middle
delay is just getting too high,

00:24:01.626 --> 00:24:02.796 A:middle
you want to send a little bit of

00:24:02.796 --> 00:24:04.896 A:middle
data over to cellular network so

00:24:04.896 --> 00:24:06.306 A:middle
that you can make progress

00:24:06.306 --> 00:24:06.656 A:middle
again.

00:24:07.256 --> 00:24:08.936 A:middle
And as soon as Wi-Fi is getting

00:24:08.936 --> 00:24:10.476 A:middle
better again, you want to switch

00:24:10.476 --> 00:24:11.866 A:middle
all your traffic back to Wi-Fi.

00:24:12.846 --> 00:24:14.136 A:middle
Doing this at the application

00:24:14.136 --> 00:24:15.306 A:middle
layer would be extremely

00:24:15.306 --> 00:24:15.826 A:middle
difficult.

00:24:18.746 --> 00:24:22.326 A:middle
So, this brings me to Wi-Fi

00:24:22.326 --> 00:24:24.626 A:middle
Assist, which is a technology

00:24:24.626 --> 00:24:27.066 A:middle
that we since iOS 9 and that

00:24:27.266 --> 00:24:29.376 A:middle
tries to address these kind of

00:24:29.376 --> 00:24:29.996 A:middle
scenarios.

00:24:32.606 --> 00:24:34.896 A:middle
Wi-Fi Assist is triggered

00:24:34.896 --> 00:24:36.556 A:middle
whenever we are in a marginal

00:24:36.556 --> 00:24:38.746 A:middle
Wi-Fi scenario, which means the

00:24:38.746 --> 00:24:40.536 A:middle
signal strength of Wi-Fi is very

00:24:40.536 --> 00:24:40.806 A:middle
low.

00:24:41.526 --> 00:24:44.186 A:middle
And whenever the phone and iOS

00:24:44.186 --> 00:24:46.816 A:middle
is detecting this, what happens

00:24:46.816 --> 00:24:49.126 A:middle
is we will play a fittest wins

00:24:49.126 --> 00:24:50.946 A:middle
out contest which between Wi-Fi

00:24:50.946 --> 00:24:51.606 A:middle
and cell.

00:24:53.446 --> 00:24:55.096 A:middle
So when you are creating a new

00:24:55.096 --> 00:24:56.656 A:middle
connection, we will first

00:24:56.656 --> 00:24:58.486 A:middle
attempt to create disconnection

00:24:58.486 --> 00:24:59.086 A:middle
on Wi-Fi.

00:25:00.406 --> 00:25:02.566 A:middle
And shortly after that where if

00:25:02.566 --> 00:25:03.666 A:middle
this connection hasn't been

00:25:03.666 --> 00:25:05.826 A:middle
established, we will go on and

00:25:05.826 --> 00:25:08.276 A:middle
create a connection over cell so

00:25:08.276 --> 00:25:10.286 A:middle
that way we are able-- if

00:25:10.396 --> 00:25:12.996 A:middle
cellular data wins, we will

00:25:13.096 --> 00:25:15.296 A:middle
start using the cellular link.

00:25:16.386 --> 00:25:19.996 A:middle
So this will include a little

00:25:19.996 --> 00:25:21.836 A:middle
bit of cellular data usage and

00:25:21.836 --> 00:25:24.396 A:middle
so as part of Wi-Fi Assist we

00:25:24.396 --> 00:25:25.846 A:middle
are limiting the amount of data

00:25:26.176 --> 00:25:28.256 A:middle
that your application could use

00:25:28.286 --> 00:25:29.766 A:middle
as part of this scenario.

00:25:30.236 --> 00:25:31.736 A:middle
We have had great success with

00:25:31.736 --> 00:25:33.566 A:middle
using Wi-Fi Assist, because it

00:25:33.566 --> 00:25:34.726 A:middle
is able to establish a

00:25:34.726 --> 00:25:36.576 A:middle
connection even if Wi-Fi is not

00:25:36.616 --> 00:25:37.056 A:middle
good enough.

00:25:38.266 --> 00:25:40.006 A:middle
And we have seen a great

00:25:40.006 --> 00:25:41.866 A:middle
reduction in the terms of the

00:25:41.866 --> 00:25:43.126 A:middle
number of data stalls.

00:25:43.446 --> 00:25:45.436 A:middle
If your application is using the

00:25:45.436 --> 00:25:47.566 A:middle
URLSession API, you will get

00:25:47.566 --> 00:25:48.786 A:middle
Wi-Fi Assist for free.

00:25:49.476 --> 00:25:51.196 A:middle
It is just going to work.

00:25:51.196 --> 00:25:53.436 A:middle
You don't need to do any changes

00:25:53.436 --> 00:25:54.036 A:middle
in your API.

00:25:54.036 --> 00:25:56.186 A:middle
You don't need to do any changes

00:25:56.256 --> 00:25:58.236 A:middle
inside the servers, it just

00:25:58.236 --> 00:25:58.706 A:middle
works.

00:26:01.046 --> 00:26:03.236 A:middle
Now the thing with Wi-Fi Assist

00:26:03.236 --> 00:26:04.866 A:middle
is that it does this at flow

00:26:04.866 --> 00:26:05.836 A:middle
creation time.

00:26:06.646 --> 00:26:08.576 A:middle
And as I explained earlier, once

00:26:08.576 --> 00:26:10.786 A:middle
a flow is established it will

00:26:10.786 --> 00:26:12.126 A:middle
stick to this interface.

00:26:12.486 --> 00:26:16.126 A:middle
So if Wi-Fi Assist was used and

00:26:16.476 --> 00:26:17.806 A:middle
for some reason the Wi-Fi

00:26:17.806 --> 00:26:19.896 A:middle
interface won the race, this

00:26:19.896 --> 00:26:21.156 A:middle
flow that has been established

00:26:21.156 --> 00:26:23.336 A:middle
on a Wi-Fi interface is going to

00:26:23.336 --> 00:26:23.976 A:middle
stay there.

00:26:24.496 --> 00:26:26.166 A:middle
So even if Wi-Fi afterwards is

00:26:26.166 --> 00:26:28.576 A:middle
getting worse, this flow is

00:26:28.576 --> 00:26:30.096 A:middle
going to get slower and slower

00:26:30.096 --> 00:26:31.446 A:middle
and it will eventually stall.

00:26:33.276 --> 00:26:36.686 A:middle
So, the only way to address this

00:26:36.746 --> 00:26:40.096 A:middle
problem is by creating new

00:26:40.096 --> 00:26:42.126 A:middle
protocol that is understood by

00:26:42.126 --> 00:26:44.246 A:middle
the client and the server.

00:26:45.426 --> 00:26:47.346 A:middle
And this brings me to Multipath

00:26:47.346 --> 00:26:47.706 A:middle
TCP.

00:26:49.596 --> 00:26:52.166 A:middle
Multipath TCP is the protocol

00:26:52.166 --> 00:26:53.366 A:middle
that has been designed

00:26:53.626 --> 00:26:56.446 A:middle
specifically for mobile devices.

00:26:59.016 --> 00:27:01.186 A:middle
Multipath TCP is specified by

00:26:59.016 --> 00:27:01.186 A:middle
Multipath TCP is specified by

00:27:01.186 --> 00:27:04.926 A:middle
the IETF as a standard, and it

00:27:04.996 --> 00:27:07.136 A:middle
provides the exact same service

00:27:07.136 --> 00:27:08.916 A:middle
as TCP, which means it is a

00:27:08.916 --> 00:27:11.266 A:middle
reliable byte stream service.

00:27:11.896 --> 00:27:14.096 A:middle
So if you are using HTP, if you

00:27:14.096 --> 00:27:16.596 A:middle
are using TLS, HTTPS, Multipath

00:27:17.116 --> 00:27:19.846 A:middle
TCP can be used just for that.

00:27:20.706 --> 00:27:22.846 A:middle
Additionally, it is built on top

00:27:22.846 --> 00:27:26.216 A:middle
of TCP, so it benefits from the

00:27:26.216 --> 00:27:27.646 A:middle
years and years of experience

00:27:27.646 --> 00:27:29.086 A:middle
that we have with developing

00:27:29.086 --> 00:27:29.486 A:middle
TCP.

00:27:30.626 --> 00:27:32.016 A:middle
And it benefits from the

00:27:32.016 --> 00:27:33.656 A:middle
reliability and from the

00:27:33.656 --> 00:27:35.576 A:middle
congestion control that TCP is

00:27:35.576 --> 00:27:36.146 A:middle
providing.

00:27:37.436 --> 00:27:39.596 A:middle
What it does on top of TCP is

00:27:39.596 --> 00:27:41.246 A:middle
that it provides a way to

00:27:41.246 --> 00:27:42.926 A:middle
seamlessly move traffic from the

00:27:42.926 --> 00:27:44.966 A:middle
Wi-Fi interface over to the

00:27:44.966 --> 00:27:46.856 A:middle
cellular interface whenever it

00:27:46.856 --> 00:27:48.376 A:middle
realizes that Wi-Fi is not good

00:27:48.376 --> 00:27:50.316 A:middle
enough, and it also allows to

00:27:50.316 --> 00:27:52.326 A:middle
move the traffic back again so

00:27:52.326 --> 00:27:53.976 A:middle
that your application is not

00:27:54.236 --> 00:27:55.816 A:middle
consuming cellular data.

00:27:56.706 --> 00:27:59.466 A:middle
It is also able to choose the

00:27:59.466 --> 00:28:01.246 A:middle
best interface if you have a

00:27:59.466 --> 00:28:01.246 A:middle
best interface if you have a

00:28:01.246 --> 00:28:02.906 A:middle
latency-sensitive and

00:28:02.906 --> 00:28:03.826 A:middle
interactive flow.

00:28:07.226 --> 00:28:09.246 A:middle
So, let's dive a little bit

00:28:09.246 --> 00:28:10.896 A:middle
deeper into Multipath TCP.

00:28:10.896 --> 00:28:13.266 A:middle
If you are building your

00:28:13.266 --> 00:28:14.836 A:middle
application on top of the

00:28:14.836 --> 00:28:18.506 A:middle
URLSession API, Multipath TCP

00:28:18.966 --> 00:28:20.196 A:middle
sits just below this.

00:28:20.976 --> 00:28:23.346 A:middle
So as you'll layer, you don't

00:28:23.346 --> 00:28:24.806 A:middle
really need to worry about those

00:28:24.806 --> 00:28:25.866 A:middle
different interfaces.

00:28:27.566 --> 00:28:28.976 A:middle
Now what happens is, when you

00:28:28.976 --> 00:28:31.466 A:middle
are sending data, you're sending

00:28:31.466 --> 00:28:33.146 A:middle
something through the URLSession

00:28:33.146 --> 00:28:35.786 A:middle
API, this data will go through

00:28:35.786 --> 00:28:37.776 A:middle
your URLSession over the MPTCP

00:28:37.776 --> 00:28:40.036 A:middle
stack, and the MPTCP stack is in

00:28:40.036 --> 00:28:41.486 A:middle
charge of scheduling this

00:28:41.536 --> 00:28:43.436 A:middle
traffic over either Wi-Fi or the

00:28:43.436 --> 00:28:44.786 A:middle
cellular link.

00:28:45.936 --> 00:28:47.846 A:middle
Now how does it do this

00:28:47.846 --> 00:28:50.096 A:middle
scheduling over Wi-Fi and Cell,

00:28:50.556 --> 00:28:52.136 A:middle
well it does this by creating

00:28:52.136 --> 00:28:54.316 A:middle
the so-called TCP Subflows.

00:28:55.336 --> 00:28:57.746 A:middle
Those TCP subflows, one for each

00:28:57.746 --> 00:28:59.086 A:middle
interface are actually

00:28:59.216 --> 00:29:00.936 A:middle
full-fledged TCP connections,

00:28:59.216 --> 00:29:00.936 A:middle
full-fledged TCP connections,

00:29:01.816 --> 00:29:03.926 A:middle
and MPTCP is in charge of making

00:29:03.926 --> 00:29:05.666 A:middle
sure that the data gets sent

00:29:05.666 --> 00:29:07.436 A:middle
over either of them.

00:29:08.526 --> 00:29:10.486 A:middle
It is also in charge of creating

00:29:10.486 --> 00:29:11.926 A:middle
and destroying those TCP

00:29:11.926 --> 00:29:12.456 A:middle
subflows.

00:29:12.836 --> 00:29:15.316 A:middle
So again, at your layer on top

00:29:15.316 --> 00:29:17.536 A:middle
of your URLSession, you are not

00:29:17.586 --> 00:29:19.546 A:middle
even aware of those subflows.

00:29:20.076 --> 00:29:22.426 A:middle
MPTCP decides when to create

00:29:22.426 --> 00:29:24.286 A:middle
those subflows and when to

00:29:24.286 --> 00:29:25.236 A:middle
destroy them again.

00:29:26.256 --> 00:29:29.286 A:middle
Now, Multipath TCP is actually

00:29:29.286 --> 00:29:30.166 A:middle
not that new.

00:29:30.946 --> 00:29:32.406 A:middle
We have been using it since

00:29:32.406 --> 00:29:34.436 A:middle
several years now at Apple in

00:29:34.536 --> 00:29:37.466 A:middle
iOS, and we are using since iOS

00:29:37.466 --> 00:29:38.566 A:middle
7 for Siri.

00:29:39.576 --> 00:29:42.036 A:middle
Now, Siri is a very particular

00:29:42.036 --> 00:29:42.706 A:middle
application.

00:29:43.756 --> 00:29:45.776 A:middle
Many people, when they are using

00:29:45.776 --> 00:29:47.216 A:middle
it, they are actually walking

00:29:47.216 --> 00:29:49.216 A:middle
out of their home because, for

00:29:49.216 --> 00:29:50.416 A:middle
example, while walking out of

00:29:50.416 --> 00:29:52.426 A:middle
their home they are asking Siri

00:29:52.926 --> 00:29:54.326 A:middle
to send a message to a friend,

00:29:54.326 --> 00:29:54.896 A:middle
for example.

00:29:55.726 --> 00:29:57.956 A:middle
And so Siri is very often in

00:29:57.956 --> 00:29:59.406 A:middle
this scenerio where Wi-Fi is

00:29:59.406 --> 00:30:00.736 A:middle
getting worse and worse and

00:29:59.406 --> 00:30:00.736 A:middle
getting worse and worse and

00:30:00.736 --> 00:30:02.586 A:middle
ultimately the connection drops.

00:30:03.726 --> 00:30:04.526 A:middle
Now the thing is, this

00:30:04.526 --> 00:30:06.816 A:middle
connection that Siri created to

00:30:06.816 --> 00:30:08.636 A:middle
send the data to the server and

00:30:08.636 --> 00:30:11.376 A:middle
get a response back, this data,

00:30:11.376 --> 00:30:12.786 A:middle
this connection, is very

00:30:12.786 --> 00:30:14.556 A:middle
critical because if this

00:30:14.556 --> 00:30:16.706 A:middle
connection breaks, the response

00:30:16.706 --> 00:30:17.846 A:middle
is not going to come back.

00:30:19.046 --> 00:30:20.546 A:middle
And so it's also very time

00:30:20.546 --> 00:30:22.406 A:middle
sensitive because the user is

00:30:22.406 --> 00:30:24.046 A:middle
often literally looking at the

00:30:24.046 --> 00:30:25.306 A:middle
phone and waiting for the

00:30:25.306 --> 00:30:26.056 A:middle
response.

00:30:26.716 --> 00:30:28.996 A:middle
And it's also a very low volume

00:30:28.996 --> 00:30:29.556 A:middle
connection.

00:30:30.146 --> 00:30:31.486 A:middle
There's not much data being

00:30:31.486 --> 00:30:31.866 A:middle
sent.

00:30:32.396 --> 00:30:33.876 A:middle
So even if we incur -- send a

00:30:33.876 --> 00:30:35.746 A:middle
little bit of data over the

00:30:35.746 --> 00:30:37.736 A:middle
cellular link, it is not going

00:30:37.736 --> 00:30:39.926 A:middle
to be a lot of data, only a few

00:30:39.926 --> 00:30:40.636 A:middle
kilobytes.

00:30:43.486 --> 00:30:45.566 A:middle
Now, because of all those free

00:30:45.566 --> 00:30:47.246 A:middle
characteristics, the way we are

00:30:47.246 --> 00:30:49.266 A:middle
using a Multipath TCP for Siri

00:30:49.856 --> 00:30:52.166 A:middle
is in such a way that whenever a

00:30:52.166 --> 00:30:54.826 A:middle
user uses Siri, we create a

00:30:54.826 --> 00:30:57.726 A:middle
subflow over Wi-Fi and a TCP

00:30:57.726 --> 00:30:59.846 A:middle
subflow over the cellular link.

00:31:00.916 --> 00:31:02.536 A:middle
And we make those subflows ready

00:31:02.536 --> 00:31:04.686 A:middle
to send the data right away so

00:31:04.686 --> 00:31:06.956 A:middle
that we get a very low latency

00:31:06.956 --> 00:31:07.696 A:middle
response.

00:31:08.506 --> 00:31:09.796 A:middle
When we are scheduling traffic

00:31:09.796 --> 00:31:11.706 A:middle
we will prefer the Wi-Fi link,

00:31:12.386 --> 00:31:13.566 A:middle
but if we realize that the

00:31:13.566 --> 00:31:15.606 A:middle
latency on the Wi-Fi link is too

00:31:15.606 --> 00:31:17.676 A:middle
high to get a quick response

00:31:17.676 --> 00:31:21.476 A:middle
back, then we do not hesitate to

00:31:21.476 --> 00:31:23.106 A:middle
send traffic over the cellular

00:31:23.676 --> 00:31:23.806 A:middle
link.

00:31:25.456 --> 00:31:27.736 A:middle
Now, during all of this for

00:31:27.736 --> 00:31:30.116 A:middle
Multipath TCP we have seen great

00:31:30.156 --> 00:31:31.366 A:middle
success.

00:31:32.526 --> 00:31:34.526 A:middle
In one particular metric which

00:31:34.526 --> 00:31:36.526 A:middle
we call the time to first word,

00:31:37.016 --> 00:31:38.646 A:middle
which means the time it takes

00:31:38.646 --> 00:31:40.346 A:middle
until the user sees the first

00:31:40.346 --> 00:31:42.136 A:middle
spoken word appear on the

00:31:42.136 --> 00:31:44.906 A:middle
screen, this metric has been

00:31:44.906 --> 00:31:46.936 A:middle
reduced into worse-case scenario

00:31:47.026 --> 00:31:49.016 A:middle
which means when Wi-Fi was very

00:31:49.016 --> 00:31:51.616 A:middle
bad, which we call like the 95th

00:31:51.616 --> 00:31:55.276 A:middle
percentile, this metric has been

00:31:55.276 --> 00:31:56.956 A:middle
improved by 20%.

00:31:57.296 --> 00:31:58.446 A:middle
So in terms of latency

00:31:58.446 --> 00:32:00.286 A:middle
reduction, we were able to bring

00:31:58.446 --> 00:32:00.286 A:middle
reduction, we were able to bring

00:32:00.286 --> 00:32:02.016 A:middle
down the latency thanks, to

00:32:02.016 --> 00:32:03.036 A:middle
Multipath TCP.

00:32:04.796 --> 00:32:07.716 A:middle
And also as users are typically

00:32:07.836 --> 00:32:10.616 A:middle
walking out of the Wi-Fi zone

00:32:10.616 --> 00:32:13.356 A:middle
when using Siri, we have reduced

00:32:13.356 --> 00:32:14.896 A:middle
the amount of network failures,

00:32:15.226 --> 00:32:16.766 A:middle
and we have reduced it by 5

00:32:16.816 --> 00:32:18.846 A:middle
times compared to when normal

00:32:18.846 --> 00:32:19.916 A:middle
TCP was used.

00:32:21.096 --> 00:32:24.286 A:middle
So, we have seen great success

00:32:24.346 --> 00:32:28.876 A:middle
with Siri and we also received a

00:32:28.876 --> 00:32:30.826 A:middle
lot requests from new developers

00:32:31.256 --> 00:32:32.976 A:middle
that we should open up the API

00:32:32.976 --> 00:32:34.696 A:middle
for Multipath TCP.

00:32:35.846 --> 00:32:38.976 A:middle
Now, in iOS 11 we are making

00:32:38.976 --> 00:32:40.846 A:middle
this step and we are opening up

00:32:40.846 --> 00:32:43.406 A:middle
the API for you to start using

00:32:44.276 --> 00:32:44.343 A:middle
it.

00:32:45.516 --> 00:32:49.500 A:middle
[ Applause ]

00:32:52.046 --> 00:32:54.136 A:middle
So in order to start using the

00:32:54.136 --> 00:32:56.926 A:middle
API, there are three things that

00:32:56.926 --> 00:32:58.996 A:middle
I will have to talk to you about

00:32:58.996 --> 00:33:00.556 A:middle
it, and I would come to each of

00:32:58.996 --> 00:33:00.556 A:middle
it, and I would come to each of

00:33:00.596 --> 00:33:01.356 A:middle
them in a minute.

00:33:02.066 --> 00:33:04.216 A:middle
First of all, because it's a new

00:33:04.216 --> 00:33:06.406 A:middle
protocol we will need service

00:33:06.406 --> 00:33:06.866 A:middle
support.

00:33:08.046 --> 00:33:08.976 A:middle
Once you have the service

00:33:08.976 --> 00:33:10.896 A:middle
support you can start to choose

00:33:11.076 --> 00:33:13.046 A:middle
which of your connections would

00:33:13.046 --> 00:33:14.536 A:middle
benefit from MPTCP.

00:33:15.756 --> 00:33:17.496 A:middle
And then once we've chosen the

00:33:17.496 --> 00:33:19.366 A:middle
connections, you can then as a

00:33:19.366 --> 00:33:21.826 A:middle
third step start opting into the

00:33:21.826 --> 00:33:23.596 A:middle
URLSession API.

00:33:24.196 --> 00:33:26.586 A:middle
So let's start with the server

00:33:26.586 --> 00:33:28.686 A:middle
support for Multipath TCP.

00:33:29.686 --> 00:33:33.696 A:middle
Now, it is a very new protocol

00:33:34.546 --> 00:33:36.856 A:middle
and so by default most server

00:33:36.856 --> 00:33:38.796 A:middle
infrastructures do not support

00:33:38.796 --> 00:33:40.466 A:middle
Multipath TCP.

00:33:41.136 --> 00:33:43.486 A:middle
This means that you will need to

00:33:43.746 --> 00:33:45.416 A:middle
update or change your server

00:33:45.416 --> 00:33:47.796 A:middle
infrastructure to start

00:33:47.796 --> 00:33:49.256 A:middle
supporting Multipath TCP.

00:33:50.016 --> 00:33:51.666 A:middle
However, there is good news.

00:33:51.746 --> 00:33:54.356 A:middle
If you are using one of the many

00:33:54.356 --> 00:33:55.696 A:middle
load balances from one of the

00:33:55.696 --> 00:33:58.346 A:middle
famous venders, there's a very

00:33:58.346 --> 00:34:00.036 A:middle
high chance that this vender

00:33:58.346 --> 00:34:00.036 A:middle
high chance that this vender

00:34:00.036 --> 00:34:01.946 A:middle
already supports Multipath TCP.

00:34:02.986 --> 00:34:06.006 A:middle
So ask your server team, ask

00:34:06.006 --> 00:34:07.606 A:middle
them to check the manual of the

00:34:07.606 --> 00:34:08.616 A:middle
load balancer that they are

00:34:08.616 --> 00:34:09.096 A:middle
using.

00:34:09.335 --> 00:34:11.186 A:middle
Maybe ask the vender if they

00:34:11.186 --> 00:34:13.775 A:middle
support Multipath TCP, and if

00:34:13.775 --> 00:34:17.056 A:middle
they do all you have to do is

00:34:17.056 --> 00:34:18.126 A:middle
you enable it in the

00:34:18.126 --> 00:34:19.746 A:middle
configuration of your servers,

00:34:20.106 --> 00:34:21.696 A:middle
and from that moment on you're

00:34:21.696 --> 00:34:23.525 A:middle
good to go to start using

00:34:23.525 --> 00:34:25.106 A:middle
Multipath TCP.

00:34:26.196 --> 00:34:28.815 A:middle
If, however, you are using Linux

00:34:29.045 --> 00:34:30.666 A:middle
on your server infrastructure,

00:34:31.616 --> 00:34:33.036 A:middle
the mainstream Linux kernel

00:34:33.036 --> 00:34:34.686 A:middle
doesn't yet support Multipath

00:34:34.686 --> 00:34:37.196 A:middle
TCP, however there's the new

00:34:37.196 --> 00:34:38.976 A:middle
Linux kernel which is available

00:34:38.976 --> 00:34:41.085 A:middle
at this website that you can

00:34:41.085 --> 00:34:43.806 A:middle
install and that will be able to

00:34:43.806 --> 00:34:45.666 A:middle
provide Multipath TCP to your

00:34:45.666 --> 00:34:46.755 A:middle
server infrastructure.

00:34:48.036 --> 00:34:50.196 A:middle
On this website, you will find

00:34:50.196 --> 00:34:52.126 A:middle
AWS and instructions for Google

00:34:52.126 --> 00:34:54.886 A:middle
Compute Engine to install

00:34:54.886 --> 00:34:57.126 A:middle
Multipath TCP.

00:34:57.346 --> 00:34:59.626 A:middle
And we are also working together

00:34:59.626 --> 00:35:01.366 A:middle
with the open source community

00:34:59.626 --> 00:35:01.366 A:middle
with the open source community

00:35:01.656 --> 00:35:04.146 A:middle
of this new Linux kernel to

00:35:04.146 --> 00:35:04.886 A:middle
maintain it.

00:35:05.066 --> 00:35:08.066 A:middle
And also we are working with the

00:35:08.066 --> 00:35:10.116 A:middle
open source community to make

00:35:10.116 --> 00:35:12.436 A:middle
this Multipath TCP code

00:35:12.436 --> 00:35:14.026 A:middle
available in the mainstream

00:35:14.026 --> 00:35:15.536 A:middle
kernel, so that all the

00:35:15.536 --> 00:35:17.136 A:middle
distributions, all the Linux

00:35:17.136 --> 00:35:18.956 A:middle
distributions are getting it by

00:35:18.956 --> 00:35:19.486 A:middle
default.

00:35:21.436 --> 00:35:22.606 A:middle
Now if you have your server

00:35:22.606 --> 00:35:23.676 A:middle
infrastructure and you have a

00:35:23.676 --> 00:35:25.516 A:middle
bunch of backend servers that

00:35:25.516 --> 00:35:26.566 A:middle
are sitting behind the load

00:35:26.566 --> 00:35:28.406 A:middle
balancer, a Linux load balancer,

00:35:29.036 --> 00:35:31.176 A:middle
all what you'll need to do in

00:35:31.176 --> 00:35:32.956 A:middle
your server infrastructure to

00:35:32.956 --> 00:35:34.786 A:middle
get Multipath TCP in this

00:35:34.786 --> 00:35:37.436 A:middle
environment, is that you update

00:35:38.216 --> 00:35:39.856 A:middle
the Linux kernel on this load

00:35:39.856 --> 00:35:42.646 A:middle
balancer, you put an HTTP proxy

00:35:42.646 --> 00:35:44.876 A:middle
on top of it like HAProxy or

00:35:44.876 --> 00:35:47.336 A:middle
nginx, and from that moment on

00:35:47.576 --> 00:35:48.996 A:middle
you're good to go and you can

00:35:48.996 --> 00:35:50.546 A:middle
start using Multipath TCP.

00:35:52.036 --> 00:35:54.916 A:middle
So at the end of this week when

00:35:54.916 --> 00:35:56.406 A:middle
you go back to your companies,

00:35:56.946 --> 00:35:58.516 A:middle
go and talk to your server team

00:35:58.716 --> 00:35:59.936 A:middle
and tell them to get the

00:35:59.936 --> 00:36:01.776 A:middle
infrastructure ready for

00:35:59.936 --> 00:36:01.776 A:middle
infrastructure ready for

00:36:01.776 --> 00:36:04.536 A:middle
Multipath TCP.

00:36:05.296 --> 00:36:07.566 A:middle
So, once you have your server

00:36:07.566 --> 00:36:11.136 A:middle
infrastructure ready to go, then

00:36:11.136 --> 00:36:12.196 A:middle
you can start looking at the

00:36:12.196 --> 00:36:13.646 A:middle
connections that you have inside

00:36:13.646 --> 00:36:16.036 A:middle
your applications and which one

00:36:16.036 --> 00:36:17.766 A:middle
would benefit the most from

00:36:17.766 --> 00:36:18.836 A:middle
Multipath TCP.

00:36:19.926 --> 00:36:22.136 A:middle
We are exposing the Multipath

00:36:22.136 --> 00:36:24.856 A:middle
TCP service type which is

00:36:24.856 --> 00:36:26.736 A:middle
providing two types of different

00:36:26.736 --> 00:36:28.646 A:middle
services using MPTCP.

00:36:29.276 --> 00:36:31.436 A:middle
The first one is the handover

00:36:31.436 --> 00:36:33.246 A:middle
mode which provides a high

00:36:33.246 --> 00:36:35.486 A:middle
reliability for your long length

00:36:35.526 --> 00:36:36.306 A:middle
connections.

00:36:37.676 --> 00:36:39.886 A:middle
The second is the interactive

00:36:39.936 --> 00:36:41.886 A:middle
mode, the mode that we are using

00:36:41.886 --> 00:36:42.456 A:middle
for Siri.

00:36:43.386 --> 00:36:44.786 A:middle
And this one provides a low

00:36:44.786 --> 00:36:46.426 A:middle
latency response for your

00:36:46.546 --> 00:36:48.146 A:middle
interactive and latency

00:36:48.146 --> 00:36:49.206 A:middle
sensitive connections.

00:36:50.936 --> 00:36:53.786 A:middle
So let's start with the handover

00:36:54.326 --> 00:36:54.426 A:middle
mode.

00:36:55.016 --> 00:36:57.216 A:middle
The handover mode is able to

00:36:57.216 --> 00:36:59.786 A:middle
move traffic from Wi-Fi to cell

00:37:00.076 --> 00:37:02.676 A:middle
and from cell back to Wi-Fi.

00:37:03.756 --> 00:37:06.946 A:middle
Whenever you are in a network

00:37:06.946 --> 00:37:08.866 A:middle
that has good Wi-Fi coverage and

00:37:08.866 --> 00:37:10.436 A:middle
to choose to opt into the

00:37:10.436 --> 00:37:12.496 A:middle
handover mode, what will happen

00:37:12.496 --> 00:37:13.886 A:middle
is you will create a connection

00:37:14.056 --> 00:37:16.006 A:middle
only on the Wi-Fi link and we

00:37:16.006 --> 00:37:17.956 A:middle
will only be using the Wi-Fi

00:37:17.956 --> 00:37:20.026 A:middle
link, no cellular data usage at

00:37:20.026 --> 00:37:20.246 A:middle
all.

00:37:21.706 --> 00:37:23.626 A:middle
If however now the user is

00:37:23.626 --> 00:37:25.136 A:middle
walking out of the Wi-Fi zone

00:37:25.396 --> 00:37:26.866 A:middle
and the Wi-Fi signal is getting

00:37:26.866 --> 00:37:29.806 A:middle
worse, when we realize that this

00:37:29.806 --> 00:37:32.146 A:middle
is happening, we will bring up

00:37:32.546 --> 00:37:35.796 A:middle
the cellular link and we will

00:37:35.796 --> 00:37:37.726 A:middle
create a TCP subflow on the

00:37:37.796 --> 00:37:39.966 A:middle
cellular interface, so from that

00:37:39.966 --> 00:37:42.116 A:middle
moment on your application will

00:37:42.116 --> 00:37:43.636 A:middle
be using the cellular data.

00:37:45.186 --> 00:37:47.046 A:middle
If now the user is walking back

00:37:47.046 --> 00:37:49.406 A:middle
into good Wi-Fi, what happens is

00:37:49.486 --> 00:37:51.246 A:middle
we will tear down the cellular

00:37:51.246 --> 00:37:53.366 A:middle
link again and move all traffic

00:37:53.836 --> 00:37:55.146 A:middle
back onto the Wi-Fi link.

00:37:56.166 --> 00:37:57.986 A:middle
This allows us to basically

00:37:58.366 --> 00:38:00.356 A:middle
minimize the cellular data usage

00:37:58.366 --> 00:38:00.356 A:middle
minimize the cellular data usage

00:38:00.416 --> 00:38:02.836 A:middle
at all cost.

00:38:03.026 --> 00:38:04.996 A:middle
We encourage you to use it for

00:38:04.996 --> 00:38:07.056 A:middle
your persistent and long length

00:38:07.056 --> 00:38:07.676 A:middle
connections.

00:38:08.496 --> 00:38:10.226 A:middle
Those kind of connections which

00:38:10.396 --> 00:38:12.506 A:middle
you cannot easily restart or

00:38:12.506 --> 00:38:13.586 A:middle
restart from the beginning,

00:38:14.666 --> 00:38:15.936 A:middle
those connections would benefit

00:38:15.936 --> 00:38:17.266 A:middle
the most from the handover mode.

00:38:19.026 --> 00:38:22.036 A:middle
Now, as I mentioned, Multipath

00:38:22.036 --> 00:38:24.616 A:middle
TCP is being part of Wi-Fi

00:38:24.616 --> 00:38:27.206 A:middle
Assist, and in Wi-Fi Assist we

00:38:27.206 --> 00:38:30.116 A:middle
have limits that try to limit

00:38:30.146 --> 00:38:31.586 A:middle
the amount of data that we are

00:38:31.586 --> 00:38:32.886 A:middle
sending on the cellular link.

00:38:34.116 --> 00:38:38.606 A:middle
So we encourage you to use the

00:38:38.606 --> 00:38:40.826 A:middle
handover mode only for low

00:38:40.826 --> 00:38:41.826 A:middle
volume connections,

00:38:43.086 --> 00:38:44.506 A:middle
because if you hit the Wi-Fi

00:38:44.506 --> 00:38:46.156 A:middle
Assist limit we will stop using

00:38:46.156 --> 00:38:47.686 A:middle
the cellular link because we

00:38:47.686 --> 00:38:49.506 A:middle
don't want your application to

00:38:49.506 --> 00:38:50.836 A:middle
show up as the one that is

00:38:50.836 --> 00:38:52.086 A:middle
consuming the most cellular

00:38:52.086 --> 00:38:55.386 A:middle
data, so be mindful when you are

00:38:55.386 --> 00:38:57.126 A:middle
choosing the handover mode for

00:38:57.126 --> 00:38:57.886 A:middle
your connections.

00:38:58.486 --> 00:39:00.106 A:middle
Don't use it for your bulk data

00:38:58.486 --> 00:39:00.106 A:middle
Don't use it for your bulk data

00:39:00.106 --> 00:39:01.526 A:middle
transfer where you are

00:39:01.526 --> 00:39:03.746 A:middle
downloading gigabytes and

00:39:03.746 --> 00:39:04.666 A:middle
gigabytes of data.

00:39:05.226 --> 00:39:07.936 A:middle
And the handover mode is

00:39:07.936 --> 00:39:09.856 A:middle
available right away in the

00:39:09.856 --> 00:39:11.446 A:middle
first beta that you are getting

00:39:12.456 --> 00:39:13.086 A:middle
since Monday.

00:39:14.016 --> 00:39:15.246 A:middle
Now, let's get on to the

00:39:15.246 --> 00:39:17.776 A:middle
interactive mode, the mode that

00:39:17.776 --> 00:39:19.526 A:middle
is trying to reduce the latency

00:39:19.526 --> 00:39:21.226 A:middle
for your latency sensitive and

00:39:21.226 --> 00:39:22.366 A:middle
anti-active connections.

00:39:24.816 --> 00:39:26.296 A:middle
Whenever you're using the

00:39:26.296 --> 00:39:27.536 A:middle
interactive mode, we will bring

00:39:27.536 --> 00:39:29.546 A:middle
up both Wi-Fi and cell right

00:39:29.546 --> 00:39:31.666 A:middle
away, even if Wi-Fi is in a good

00:39:31.666 --> 00:39:33.736 A:middle
state, because we want to

00:39:33.736 --> 00:39:35.096 A:middle
schedule the traffic in such a

00:39:35.096 --> 00:39:38.246 A:middle
way so that we are reducing the

00:39:38.246 --> 00:39:38.816 A:middle
latency.

00:39:39.436 --> 00:39:41.296 A:middle
We will still prefer the Wi-Fi

00:39:41.296 --> 00:39:43.156 A:middle
interface, but as soon as we

00:39:43.156 --> 00:39:44.546 A:middle
realize Wi-Fi is not good

00:39:44.546 --> 00:39:47.276 A:middle
enough, we will not hesitate to

00:39:47.276 --> 00:39:48.566 A:middle
start sending data on the

00:39:48.566 --> 00:39:49.246 A:middle
cellular link.

00:39:50.496 --> 00:39:54.026 A:middle
So use it for your very

00:39:54.026 --> 00:39:56.006 A:middle
interactive latency sensitive

00:39:56.006 --> 00:39:58.116 A:middle
flows, the kinds of flows that

00:39:58.116 --> 00:39:59.386 A:middle
are not transmitting a lot of

00:39:59.386 --> 00:40:01.386 A:middle
data, again, because we have the

00:39:59.386 --> 00:40:01.386 A:middle
data, again, because we have the

00:40:01.386 --> 00:40:03.286 A:middle
Wi-Fi Assist limit that we are

00:40:03.286 --> 00:40:05.386 A:middle
applying and so if your flows

00:40:05.386 --> 00:40:06.926 A:middle
are hitting this limit we will

00:40:06.926 --> 00:40:09.106 A:middle
stop using the cellular link.

00:40:10.216 --> 00:40:12.396 A:middle
Multipath TCP will try to reduce

00:40:12.396 --> 00:40:14.226 A:middle
latency as much as it can for

00:40:14.226 --> 00:40:15.336 A:middle
those kind of connections.

00:40:15.816 --> 00:40:17.946 A:middle
It will incur some cellular data

00:40:17.946 --> 00:40:20.106 A:middle
costs, and we will be giving

00:40:20.106 --> 00:40:22.076 A:middle
this to you in an upcoming Beta

00:40:22.076 --> 00:40:24.656 A:middle
release for you to start using

00:40:24.656 --> 00:40:24.776 A:middle
it.

00:40:27.246 --> 00:40:29.706 A:middle
So now we have the server

00:40:29.706 --> 00:40:32.596 A:middle
infrastructure, we have chosen

00:40:32.596 --> 00:40:33.916 A:middle
which connections would benefit

00:40:33.916 --> 00:40:35.596 A:middle
from the handover mode, which

00:40:35.596 --> 00:40:37.166 A:middle
connections would benefit from

00:40:37.166 --> 00:40:38.146 A:middle
the interactive mode.

00:40:39.676 --> 00:40:41.346 A:middle
Now you can start using the

00:40:41.346 --> 00:40:42.746 A:middle
URLSession configuration

00:40:42.746 --> 00:40:44.806 A:middle
property to opt in your

00:40:44.806 --> 00:40:45.926 A:middle
connections to this API.

00:40:47.456 --> 00:40:49.306 A:middle
And we are exposing it in a very

00:40:49.306 --> 00:40:49.956 A:middle
simple way.

00:40:50.256 --> 00:40:52.136 A:middle
All what you need to do is you

00:40:52.136 --> 00:40:54.066 A:middle
need to set the Multipath

00:40:54.066 --> 00:40:56.306 A:middle
service type in your URLSession

00:40:56.306 --> 00:40:57.376 A:middle
configuration property.

00:40:58.116 --> 00:40:59.046 A:middle
You can choose between the

00:40:59.046 --> 00:41:01.106 A:middle
handover mode or the interactive

00:40:59.046 --> 00:41:01.106 A:middle
handover mode or the interactive

00:41:01.156 --> 00:41:03.136 A:middle
mode, and from that point on

00:41:03.336 --> 00:41:04.206 A:middle
you're good to go.

00:41:04.386 --> 00:41:06.886 A:middle
Your connections will try to use

00:41:06.886 --> 00:41:08.636 A:middle
Multipath TCP and they will

00:41:09.086 --> 00:41:10.976 A:middle
benefit from it.

00:41:12.226 --> 00:41:14.066 A:middle
Now in order to use it, you will

00:41:14.066 --> 00:41:15.766 A:middle
need to add the capability

00:41:15.766 --> 00:41:20.106 A:middle
Multipath in X-code so that you

00:41:20.106 --> 00:41:21.436 A:middle
can start using it.

00:41:22.036 --> 00:41:26.736 A:middle
Now, this brings me to one last

00:41:26.736 --> 00:41:28.316 A:middle
thing that I need to talk about

00:41:28.996 --> 00:41:30.136 A:middle
and this is the Aggregation

00:41:30.136 --> 00:41:30.366 A:middle
Mode.

00:41:32.746 --> 00:41:35.006 A:middle
Now, imagine you're connected to

00:41:35.006 --> 00:41:36.906 A:middle
Wi-Fi and it's providing you one

00:41:36.906 --> 00:41:38.856 A:middle
megabyte per second in terms of

00:41:38.856 --> 00:41:39.356 A:middle
throughput.

00:41:40.486 --> 00:41:41.366 A:middle
On the other side you have

00:41:41.466 --> 00:41:43.236 A:middle
cellular and it is also giving

00:41:43.236 --> 00:41:44.706 A:middle
you one megabyte per second of

00:41:44.706 --> 00:41:45.166 A:middle
throughput.

00:41:46.176 --> 00:41:47.106 A:middle
Wouldn't it be good if you can

00:41:47.106 --> 00:41:48.996 A:middle
combine both together into one

00:41:48.996 --> 00:41:50.636 A:middle
big link that gives you two

00:41:50.636 --> 00:41:51.706 A:middle
megabytes per seconds?

00:41:52.986 --> 00:41:54.856 A:middle
Multipath TCP is providing

00:41:54.856 --> 00:41:55.736 A:middle
exactly this.

00:41:56.536 --> 00:41:58.006 A:middle
It allows for aggregate the

00:41:58.006 --> 00:41:59.666 A:middle
capacities of multiple links

00:41:59.886 --> 00:42:01.866 A:middle
into one byte connection.

00:41:59.886 --> 00:42:01.866 A:middle
into one byte connection.

00:42:04.656 --> 00:42:08.536 A:middle
So this Aggregation Mode is

00:42:08.536 --> 00:42:10.166 A:middle
available to you for

00:42:10.166 --> 00:42:11.146 A:middle
experimentation.

00:42:11.846 --> 00:42:13.356 A:middle
And why is it experimentation?

00:42:14.036 --> 00:42:15.926 A:middle
Well, if we are aggregating the

00:42:15.926 --> 00:42:17.496 A:middle
capacities of both links

00:42:17.496 --> 00:42:19.646 A:middle
together, we are consuming quite

00:42:19.646 --> 00:42:21.286 A:middle
a little bit of cellular data.

00:42:21.916 --> 00:42:25.126 A:middle
So we want you to think about

00:42:25.726 --> 00:42:27.486 A:middle
what kind of connections do you

00:42:27.486 --> 00:42:29.416 A:middle
have in your application that

00:42:29.416 --> 00:42:31.056 A:middle
would benefit from a little bit

00:42:31.126 --> 00:42:34.176 A:middle
higher throughput, at the cost

00:42:34.176 --> 00:42:35.646 A:middle
of cellular data usage?

00:42:37.616 --> 00:42:38.636 A:middle
If you want to use the

00:42:38.636 --> 00:42:40.376 A:middle
Aggregation Mode, what you need

00:42:40.376 --> 00:42:42.366 A:middle
to do is you go into developer

00:42:42.366 --> 00:42:43.786 A:middle
settings on your phones, you

00:42:43.786 --> 00:42:46.446 A:middle
flip the switch to enable the

00:42:46.446 --> 00:42:48.366 A:middle
aggregation mode, and from that

00:42:48.366 --> 00:42:50.036 A:middle
moment on you can start

00:42:50.036 --> 00:42:51.656 A:middle
experimenting with the

00:42:51.656 --> 00:42:53.356 A:middle
aggregation URLSession

00:42:53.356 --> 00:42:54.486 A:middle
configuration property.

00:42:56.586 --> 00:42:58.576 A:middle
This mode on customer devices,

00:42:58.576 --> 00:42:59.816 A:middle
it will not be available.

00:43:01.876 --> 00:43:04.276 A:middle
So you can start experimenting

00:43:04.276 --> 00:43:05.636 A:middle
with the Aggregation Mode in an

00:43:05.636 --> 00:43:08.756 A:middle
upcoming Beta release.

00:43:08.866 --> 00:43:11.176 A:middle
So, let's recap.

00:43:13.386 --> 00:43:16.226 A:middle
In iOS we are very well aware of

00:43:16.226 --> 00:43:18.556 A:middle
this problem of using multiple

00:43:18.556 --> 00:43:20.336 A:middle
interfaces on mobile devices.

00:43:21.836 --> 00:43:24.076 A:middle
We have Wi-Fi Assist since iOS

00:43:24.076 --> 00:43:27.606 A:middle
9, and we see a great benefit in

00:43:27.606 --> 00:43:28.916 A:middle
using Wi-Fi Assist.

00:43:30.056 --> 00:43:32.076 A:middle
Now in iOS 11, we are pushing

00:43:32.076 --> 00:43:32.956 A:middle
this even farther.

00:43:33.336 --> 00:43:34.936 A:middle
We are adding Multipath

00:43:34.936 --> 00:43:37.186 A:middle
protocols into Wi-Fi Assist.

00:43:38.146 --> 00:43:39.916 A:middle
And this protocol Multipath TCP

00:43:39.916 --> 00:43:42.476 A:middle
is open as a public API in iOS

00:43:42.476 --> 00:43:42.896 A:middle
11.

00:43:43.506 --> 00:43:45.136 A:middle
You can use it for the handover

00:43:45.136 --> 00:43:47.186 A:middle
mode or for the Interactive Mode

00:43:48.046 --> 00:43:51.196 A:middle
to improve your user experience

00:43:51.196 --> 00:43:52.476 A:middle
inside your applications.

00:43:54.436 --> 00:43:58.176 A:middle
So with this, you will now have

00:43:58.276 --> 00:43:59.056 A:middle
a little break.

00:43:59.436 --> 00:44:01.296 A:middle
This was the first part of the

00:43:59.436 --> 00:44:01.296 A:middle
This was the first part of the

00:44:01.296 --> 00:44:02.276 A:middle
networking session.

00:44:03.076 --> 00:44:04.536 A:middle
After the break, you will get

00:44:04.536 --> 00:44:06.396 A:middle
the second part.

00:44:06.396 --> 00:44:08.616 A:middle
In this second part we will

00:44:08.616 --> 00:44:11.096 A:middle
talking about new exciting APIs

00:44:11.096 --> 00:44:13.276 A:middle
at URLSession layer that will

00:44:13.276 --> 00:44:14.946 A:middle
improve the networking for your

00:44:14.946 --> 00:44:15.606 A:middle
applications.

00:44:16.466 --> 00:44:16.836 A:middle
Thank you.

00:44:17.516 --> 00:44:21.500 A:middle
[ Applause ]
