WEBVTT

00:00:06.516 --> 00:00:17.516 A:middle
[ Crowd Sounds ]

00:00:18.516 --> 00:00:23.916 A:middle
[ Applause ]

00:00:24.416 --> 00:00:24.746 A:middle
&gt;&gt; Thank you.

00:00:26.246 --> 00:00:26.576 A:middle
Thank you.

00:00:27.146 --> 00:00:28.266 A:middle
Good morning and welcome.

00:00:28.266 --> 00:00:29.306 A:middle
My name is Ali Ozer.

00:00:29.306 --> 00:00:30.666 A:middle
And with my colleague Daphne,

00:00:30.666 --> 00:00:31.546 A:middle
we'll be talking to you about

00:00:31.546 --> 00:00:32.926 A:middle
what's new in Cocoa this year.

00:00:34.366 --> 00:00:35.986 A:middle
For -- on our menu today for

00:00:35.986 --> 00:00:37.196 A:middle
appetizer, we have API

00:00:37.196 --> 00:00:38.966 A:middle
refinements followed by two main

00:00:38.966 --> 00:00:40.686 A:middle
courses AppKit and Foundation.

00:00:41.286 --> 00:00:42.226 A:middle
So let's get started.

00:00:43.696 --> 00:00:45.106 A:middle
So on the API refinements front,

00:00:45.236 --> 00:00:47.396 A:middle
in previous years we've talked

00:00:47.396 --> 00:00:48.636 A:middle
to you about the large efforts

00:00:48.636 --> 00:00:50.366 A:middle
to improve API exposure of our

00:00:50.366 --> 00:00:52.536 A:middle
frameworks: Properties,

00:00:52.536 --> 00:00:54.556 A:middle
nullability, generics, the Swift

00:00:54.556 --> 00:00:56.236 A:middle
3 naming guidelines last year,

00:00:56.476 --> 00:00:57.666 A:middle
and most recently string

00:00:57.666 --> 00:00:59.316 A:middle
enumerations and nested types.

00:00:59.746 --> 00:01:01.546 A:middle
This time, I'll talk a bit about

00:00:59.746 --> 00:01:01.546 A:middle
This time, I'll talk a bit about

00:01:01.546 --> 00:01:02.396 A:middle
the last two.

00:01:02.736 --> 00:01:04.456 A:middle
And I'll do that by giving an

00:01:04.456 --> 00:01:05.616 A:middle
example that covers both.

00:01:05.616 --> 00:01:07.176 A:middle
So in this scenario we focused

00:01:07.176 --> 00:01:09.276 A:middle
on a lot during the last year

00:01:09.276 --> 00:01:11.756 A:middle
and you'll see it in a lot of

00:01:11.756 --> 00:01:12.000 A:middle
our APIs.

00:01:14.006 --> 00:01:16.046 A:middle
So here is NSSharingService as

00:01:16.046 --> 00:01:18.206 A:middle
it comes across is Swift 3.

00:01:18.206 --> 00:01:19.716 A:middle
We have a number of global

00:01:19.716 --> 00:01:21.146 A:middle
symbols, as you can see here,

00:01:21.146 --> 00:01:22.686 A:middle
coming across S strings.

00:01:22.956 --> 00:01:24.206 A:middle
And then we have methods like

00:01:24.206 --> 00:01:26.036 A:middle
let method in a sharing service

00:01:26.256 --> 00:01:27.856 A:middle
that takes an argument of type

00:01:27.856 --> 00:01:28.246 A:middle
string.

00:01:29.086 --> 00:01:31.326 A:middle
Now in Swift 4, we've introduced

00:01:31.326 --> 00:01:32.536 A:middle
a new type called name.

00:01:32.726 --> 00:01:34.916 A:middle
This type is nested inside

00:01:35.046 --> 00:01:36.026 A:middle
NSSharingService.

00:01:36.666 --> 00:01:37.966 A:middle
An init method now takes an

00:01:37.966 --> 00:01:38.906 A:middle
argument of type

00:01:38.906 --> 00:01:40.256 A:middle
NSSharingService.Name.

00:01:40.816 --> 00:01:42.256 A:middle
And, of course, the values now,

00:01:42.256 --> 00:01:43.516 A:middle
the various values you saw

00:01:43.516 --> 00:01:45.056 A:middle
earlier are now declared this

00:01:45.056 --> 00:01:46.356 A:middle
NSSharingService.Name.

00:01:46.646 --> 00:01:47.596 A:middle
And their names are a lot

00:01:47.596 --> 00:01:48.786 A:middle
shorter since they're no longer

00:01:48.786 --> 00:01:49.806 A:middle
in the global context.

00:01:50.296 --> 00:01:52.146 A:middle
So with that, the code becomes a

00:01:52.146 --> 00:01:52.786 A:middle
lot simpler.

00:01:53.236 --> 00:01:55.106 A:middle
Instead of this in Swift 3, you

00:01:55.106 --> 00:01:56.816 A:middle
now can type this in Swift 4.

00:01:57.146 --> 00:01:58.196 A:middle
And, of course, you get a much

00:01:58.196 --> 00:01:59.646 A:middle
[inaudible] set of completions

00:01:59.646 --> 00:02:00.236 A:middle
when typing.

00:01:59.646 --> 00:02:00.236 A:middle
when typing.

00:02:00.816 --> 00:02:01.566 A:middle
Here you are.

00:02:01.566 --> 00:02:02.896 A:middle
And you type your dot and you

00:02:02.896 --> 00:02:04.566 A:middle
get exactly the values that make

00:02:04.566 --> 00:02:05.856 A:middle
sense for that init method

00:02:05.856 --> 00:02:07.556 A:middle
rather than older strings in the

00:02:07.556 --> 00:02:08.175 A:middle
frameworks.

00:02:09.246 --> 00:02:10.515 A:middle
So you might be wondering about

00:02:10.515 --> 00:02:11.696 A:middle
the source compatibility

00:02:11.696 --> 00:02:13.046 A:middle
implications of this change.

00:02:13.576 --> 00:02:15.716 A:middle
In Objective-C, there's no

00:02:15.716 --> 00:02:16.276 A:middle
nesting.

00:02:16.616 --> 00:02:17.806 A:middle
That's only a Swift thing so

00:02:17.806 --> 00:02:18.756 A:middle
that has no impact.

00:02:19.096 --> 00:02:20.076 A:middle
And the string enums are

00:02:20.076 --> 00:02:21.756 A:middle
achieved with a typedef as you

00:02:21.756 --> 00:02:22.506 A:middle
can see here.

00:02:22.506 --> 00:02:23.766 A:middle
And this is totally source

00:02:23.766 --> 00:02:24.286 A:middle
compatible.

00:02:24.286 --> 00:02:26.006 A:middle
So no sourcing compatibility for

00:02:26.006 --> 00:02:26.616 A:middle
Objective-C.

00:02:27.366 --> 00:02:30.566 A:middle
In Swift, the Swift 3 name

00:02:30.566 --> 00:02:31.826 A:middle
remains exactly the same.

00:02:32.126 --> 00:02:33.296 A:middle
So your code is source

00:02:33.296 --> 00:02:33.926 A:middle
compatible.

00:02:34.366 --> 00:02:35.696 A:middle
The Swift 4 has a brand-new

00:02:35.696 --> 00:02:36.026 A:middle
name.

00:02:36.026 --> 00:02:37.276 A:middle
And the old name no longer even

00:02:37.276 --> 00:02:37.626 A:middle
exists.

00:02:37.696 --> 00:02:39.276 A:middle
So Swift 4 is not compatible.

00:02:39.816 --> 00:02:41.686 A:middle
However, we do have a migrator

00:02:42.796 --> 00:02:44.646 A:middle
for moving to Swift 4 so you get

00:02:44.646 --> 00:02:46.166 A:middle
to choose when you want to move

00:02:46.226 --> 00:02:47.616 A:middle
and move your sources over.

00:02:47.616 --> 00:02:49.806 A:middle
So that's it.

00:02:49.806 --> 00:02:50.856 A:middle
That's it as far as API

00:02:50.896 --> 00:02:51.516 A:middle
refinements.

00:02:51.516 --> 00:02:53.346 A:middle
You will see these changes apply

00:02:53.346 --> 00:02:54.386 A:middle
to a number of our APIs.

00:02:55.826 --> 00:02:57.166 A:middle
So next, I'm going to just dive

00:02:57.166 --> 00:02:57.726 A:middle
into AppKit.

00:02:58.066 --> 00:02:59.356 A:middle
And I'll start off by talking

00:02:59.356 --> 00:03:00.386 A:middle
about the big feature we

00:02:59.356 --> 00:03:00.386 A:middle
about the big feature we

00:03:00.386 --> 00:03:02.486 A:middle
introduced last fall, which is

00:03:02.886 --> 00:03:06.326 A:middle
Touch Bar, of course.

00:03:06.506 --> 00:03:09.306 A:middle
Touch Bar so --

00:03:10.016 --> 00:03:11.636 A:middle
[ Applause ]

00:03:11.636 --> 00:03:14.006 A:middle
As many of you are aware, Touch

00:03:14.006 --> 00:03:15.256 A:middle
Bar is an input device that

00:03:15.256 --> 00:03:17.176 A:middle
replaces the top row of keys on

00:03:17.176 --> 00:03:17.806 A:middle
your keyboard.

00:03:18.146 --> 00:03:19.926 A:middle
It provides controls for both

00:03:19.976 --> 00:03:21.976 A:middle
the system and the default, the

00:03:21.976 --> 00:03:23.796 A:middle
active application by default.

00:03:24.426 --> 00:03:25.846 A:middle
Now being a multi-touch input

00:03:25.886 --> 00:03:27.756 A:middle
device, and a beautiful retina

00:03:27.756 --> 00:03:29.966 A:middle
display, Touch Bar provides rich

00:03:29.966 --> 00:03:31.616 A:middle
interactions and also dynamic

00:03:31.706 --> 00:03:32.076 A:middle
content.

00:03:33.236 --> 00:03:34.326 A:middle
So here is some of the Touch

00:03:34.366 --> 00:03:36.486 A:middle
Bars that are part of the system

00:03:36.776 --> 00:03:38.076 A:middle
and a part of our system

00:03:38.116 --> 00:03:39.376 A:middle
applications, as you can see, a

00:03:39.376 --> 00:03:41.986 A:middle
wide variety of rich content and

00:03:41.986 --> 00:03:43.166 A:middle
interaction models in these

00:03:43.166 --> 00:03:43.696 A:middle
controls.

00:03:44.046 --> 00:03:45.286 A:middle
Now, one important thing to note

00:03:45.286 --> 00:03:46.906 A:middle
about the Touch Bar is that

00:03:47.456 --> 00:03:48.366 A:middle
although it is a beautiful

00:03:48.366 --> 00:03:50.446 A:middle
display, the Touch Bar is an

00:03:50.446 --> 00:03:51.176 A:middle
input device.

00:03:51.176 --> 00:03:52.296 A:middle
That's its primary purpose in

00:03:52.296 --> 00:03:52.576 A:middle
life.

00:03:52.836 --> 00:03:53.926 A:middle
So it's not appropriate for

00:03:53.926 --> 00:03:55.586 A:middle
display purposes such as stock

00:03:55.586 --> 00:03:57.666 A:middle
ticker notifications and so on.

00:03:57.666 --> 00:03:59.666 A:middle
So in your applications, treat

00:03:59.666 --> 00:04:00.706 A:middle
it as an extension of the

00:03:59.666 --> 00:04:00.706 A:middle
it as an extension of the

00:04:00.706 --> 00:04:01.146 A:middle
keyboard.

00:04:01.466 --> 00:04:03.066 A:middle
Now I'm going to highlight some

00:04:03.066 --> 00:04:04.786 A:middle
qualities that makes the Touch

00:04:04.786 --> 00:04:06.076 A:middle
Bar such a compelling feature to

00:04:06.076 --> 00:04:07.686 A:middle
support in your applications.

00:04:08.176 --> 00:04:11.406 A:middle
First, Touch Bar is context

00:04:11.406 --> 00:04:12.946 A:middle
sensitive meaning it easily

00:04:12.946 --> 00:04:14.546 A:middle
adapts to whatever the user is

00:04:14.546 --> 00:04:14.846 A:middle
doing.

00:04:14.886 --> 00:04:16.255 A:middle
Let me just give you a quick

00:04:16.255 --> 00:04:16.875 A:middle
example.

00:04:16.875 --> 00:04:18.636 A:middle
Here you are typing in TextEdit.

00:04:19.036 --> 00:04:20.505 A:middle
And as you're typing, the Touch

00:04:20.505 --> 00:04:22.186 A:middle
Bar shows you, by default, quick

00:04:22.186 --> 00:04:23.896 A:middle
type completions for whatever

00:04:23.896 --> 00:04:24.976 A:middle
the user is typing.

00:04:25.406 --> 00:04:26.636 A:middle
Now when you make a selection,

00:04:26.896 --> 00:04:28.126 A:middle
the Touch Bar switches to show

00:04:28.126 --> 00:04:29.836 A:middle
you text formatting controls as

00:04:29.836 --> 00:04:31.606 A:middle
you can see here, colors, bold,

00:04:31.606 --> 00:04:32.786 A:middle
italic and so on.

00:04:33.596 --> 00:04:35.446 A:middle
Now, here we are typing in the

00:04:35.446 --> 00:04:37.136 A:middle
To field of a mail message.

00:04:37.516 --> 00:04:38.706 A:middle
And you can see that the Touch

00:04:38.706 --> 00:04:40.856 A:middle
Bar completions are now giving

00:04:40.856 --> 00:04:42.186 A:middle
you e-mail addresses.

00:04:42.186 --> 00:04:43.376 A:middle
In fact, Mail is using

00:04:43.376 --> 00:04:46.046 A:middle
predictive addressing to predict

00:04:46.046 --> 00:04:47.276 A:middle
what addresses you might want to

00:04:47.326 --> 00:04:47.516 A:middle
type.

00:04:48.356 --> 00:04:50.076 A:middle
And here, when you're typing in

00:04:50.076 --> 00:04:51.376 A:middle
the subject line of Mail, you

00:04:51.376 --> 00:04:52.416 A:middle
again get quick type.

00:04:52.756 --> 00:04:54.306 A:middle
However, you also get the Send

00:04:54.306 --> 00:04:55.376 A:middle
button on the left end of the

00:04:55.376 --> 00:04:56.496 A:middle
Touch Bar because, after all,

00:04:56.496 --> 00:04:57.126 A:middle
you are in Mail.

00:04:57.126 --> 00:04:58.286 A:middle
So these are some of the ways

00:04:58.286 --> 00:04:59.786 A:middle
that the Touch Bar is context

00:04:59.786 --> 00:05:00.196 A:middle
sensitive.

00:04:59.786 --> 00:05:00.196 A:middle
sensitive.

00:05:00.196 --> 00:05:01.196 A:middle
And there are many examples of

00:05:01.246 --> 00:05:01.500 A:middle
this.

00:05:02.726 --> 00:05:04.356 A:middle
Touch Bar, second, is

00:05:04.356 --> 00:05:05.266 A:middle
customizable.

00:05:05.466 --> 00:05:06.676 A:middle
And that enables the user to

00:05:06.676 --> 00:05:07.826 A:middle
arrange things in a way that

00:05:07.826 --> 00:05:08.616 A:middle
makes sense for them.

00:05:09.016 --> 00:05:10.656 A:middle
So the user can customize the

00:05:10.656 --> 00:05:13.046 A:middle
default control strip as you can

00:05:13.046 --> 00:05:13.566 A:middle
see here.

00:05:13.796 --> 00:05:15.506 A:middle
They can choose to expand the

00:05:15.506 --> 00:05:16.596 A:middle
control strip, which they can

00:05:16.596 --> 00:05:18.676 A:middle
also customize in a variety of

00:05:18.736 --> 00:05:19.076 A:middle
ways.

00:05:19.456 --> 00:05:20.866 A:middle
And they can also choose to run

00:05:21.186 --> 00:05:23.466 A:middle
with default function keys on

00:05:23.976 --> 00:05:25.406 A:middle
for specific apps that they

00:05:25.406 --> 00:05:25.826 A:middle
choose.

00:05:26.646 --> 00:05:27.836 A:middle
In addition, the user can

00:05:27.836 --> 00:05:30.106 A:middle
customize the app bars for apps

00:05:30.106 --> 00:05:31.336 A:middle
that provide customization.

00:05:31.726 --> 00:05:32.656 A:middle
For instance, here we are in

00:05:32.656 --> 00:05:33.316 A:middle
calculator.

00:05:33.606 --> 00:05:34.616 A:middle
You can go ahead to the View

00:05:34.616 --> 00:05:36.466 A:middle
menu and choose Customize Tool

00:05:36.466 --> 00:05:36.786 A:middle
Bar.

00:05:38.176 --> 00:05:39.566 A:middle
That puts you in customization

00:05:39.566 --> 00:05:39.926 A:middle
mode.

00:05:39.926 --> 00:05:41.706 A:middle
And you can see that the items

00:05:41.706 --> 00:05:43.086 A:middle
in the Touch Bar are jiggling in

00:05:43.086 --> 00:05:44.106 A:middle
anticipation of being

00:05:44.106 --> 00:05:44.796 A:middle
customized.

00:05:44.896 --> 00:05:45.946 A:middle
Let me zoom this in a bit.

00:05:45.946 --> 00:05:47.786 A:middle
And you have a whole palette of

00:05:47.786 --> 00:05:49.216 A:middle
items that you can drag down to

00:05:49.216 --> 00:05:49.726 A:middle
the Touch Bar.

00:05:50.196 --> 00:05:51.576 A:middle
Now, note that customization is

00:05:51.576 --> 00:05:52.486 A:middle
an opt-in feature.

00:05:52.616 --> 00:05:54.396 A:middle
It's much like an NSToolbar.

00:05:56.046 --> 00:05:57.566 A:middle
Now it's a feature users expect

00:05:57.566 --> 00:06:00.196 A:middle
from your apps, so we encourage

00:05:57.566 --> 00:06:00.196 A:middle
from your apps, so we encourage

00:06:00.196 --> 00:06:01.256 A:middle
you to implement it if it makes

00:06:01.256 --> 00:06:01.816 A:middle
sense at all.

00:06:01.816 --> 00:06:02.956 A:middle
For instance, if you have many

00:06:02.956 --> 00:06:03.866 A:middle
more commands than you can

00:06:03.866 --> 00:06:04.996 A:middle
display in the Touch Bar or you

00:06:04.996 --> 00:06:06.286 A:middle
just want the users to have the

00:06:06.286 --> 00:06:07.916 A:middle
ability to arrange default items

00:06:07.916 --> 00:06:08.136 A:middle
in there.

00:06:09.016 --> 00:06:11.096 A:middle
The last quality of Touch Bar, I

00:06:11.096 --> 00:06:13.256 A:middle
want to highlight, is its

00:06:13.256 --> 00:06:15.126 A:middle
ability to provide unobstructed

00:06:15.126 --> 00:06:16.166 A:middle
access to content.

00:06:16.646 --> 00:06:18.526 A:middle
You can take advantage of the

00:06:18.526 --> 00:06:20.546 A:middle
presence of Touch Bar to hide

00:06:20.576 --> 00:06:22.116 A:middle
controls on-screen to reduce

00:06:22.116 --> 00:06:22.436 A:middle
clutter.

00:06:23.626 --> 00:06:25.146 A:middle
For instance, here is Keynote.

00:06:25.146 --> 00:06:26.446 A:middle
In fact, the app we're using for

00:06:26.446 --> 00:06:27.376 A:middle
these presentations.

00:06:27.766 --> 00:06:29.236 A:middle
Here is Keynote in presentation

00:06:29.236 --> 00:06:29.496 A:middle
mode.

00:06:29.866 --> 00:06:31.096 A:middle
You can see that in presentation

00:06:31.096 --> 00:06:32.566 A:middle
mode, there are no controls on

00:06:32.566 --> 00:06:33.916 A:middle
the display, but the Touch Bar

00:06:33.916 --> 00:06:35.346 A:middle
still reflects controls that

00:06:35.346 --> 00:06:36.586 A:middle
allow me to advance through the

00:06:36.586 --> 00:06:38.296 A:middle
slides and go to any specific

00:06:38.296 --> 00:06:38.986 A:middle
slide if I want.

00:06:39.496 --> 00:06:40.616 A:middle
Another example here is

00:06:40.616 --> 00:06:41.966 A:middle
QuickTime in full-screen mode

00:06:41.966 --> 00:06:43.566 A:middle
where the media controls fade

00:06:43.566 --> 00:06:44.986 A:middle
away from the main screen, but

00:06:44.986 --> 00:06:46.356 A:middle
you can still present them in

00:06:46.356 --> 00:06:46.846 A:middle
the Touch Bar.

00:06:47.236 --> 00:06:49.936 A:middle
Now we do have some important

00:06:49.936 --> 00:06:50.726 A:middle
updates to Touch Bar

00:06:50.726 --> 00:06:52.566 A:middle
functionality and NSTouchBar

00:06:52.566 --> 00:06:54.716 A:middle
APIs in macOS High Sierra.

00:06:54.716 --> 00:06:55.896 A:middle
And I just want to highlight

00:06:55.896 --> 00:06:56.476 A:middle
some of those.

00:06:56.856 --> 00:06:58.916 A:middle
So let's get started with the

00:06:58.916 --> 00:06:59.726 A:middle
color pickers.

00:07:00.976 --> 00:07:02.336 A:middle
You might be aware that the

00:07:02.336 --> 00:07:04.186 A:middle
color pickers in Touch Bar in

00:07:04.186 --> 00:07:06.266 A:middle
macOS Sierra, we have two modes

00:07:06.266 --> 00:07:07.986 A:middle
for color pickers: The simple

00:07:07.986 --> 00:07:09.616 A:middle
mode and the HSB mode.

00:07:10.056 --> 00:07:11.606 A:middle
We've now added a mode selector,

00:07:12.276 --> 00:07:14.616 A:middle
as you can see here, with four

00:07:14.616 --> 00:07:16.926 A:middle
additional modes, the grayscale

00:07:16.926 --> 00:07:19.756 A:middle
mode, RGB mode, CMYK mode, and

00:07:19.916 --> 00:07:20.916 A:middle
the Swatch mode.

00:07:21.336 --> 00:07:22.616 A:middle
Now the colors shown in that

00:07:22.616 --> 00:07:24.516 A:middle
last Swatch mode are the same as

00:07:24.516 --> 00:07:25.866 A:middle
the colors shown in the color

00:07:25.866 --> 00:07:27.426 A:middle
picker in the bottom area of the

00:07:27.426 --> 00:07:27.966 A:middle
color picker.

00:07:27.966 --> 00:07:29.496 A:middle
These are the favorites that are

00:07:29.496 --> 00:07:31.776 A:middle
chosen by the user so the color

00:07:31.776 --> 00:07:32.326 A:middle
is over there.

00:07:32.676 --> 00:07:34.286 A:middle
You'll also note that we have a

00:07:34.286 --> 00:07:35.846 A:middle
button here on the right end of

00:07:35.846 --> 00:07:37.386 A:middle
color pickers, most of them,

00:07:37.596 --> 00:07:39.336 A:middle
that allow you to add currently

00:07:39.336 --> 00:07:41.066 A:middle
selected color as a favorite

00:07:41.066 --> 00:07:42.356 A:middle
swatch directly from the touch

00:07:42.356 --> 00:07:42.546 A:middle
bar.

00:07:43.006 --> 00:07:43.926 A:middle
Now with these additions, the

00:07:43.926 --> 00:07:45.806 A:middle
Touch Bar color picker has

00:07:45.806 --> 00:07:47.516 A:middle
gotten fairly sophisticated and

00:07:47.516 --> 00:07:48.636 A:middle
can replace the main color

00:07:48.636 --> 00:07:50.126 A:middle
picker, the main color panel on

00:07:50.126 --> 00:07:51.956 A:middle
the screen for most use cases.

00:07:52.126 --> 00:07:53.116 A:middle
And this, of course, goes back

00:07:53.116 --> 00:07:54.326 A:middle
to that point I made about

00:07:54.326 --> 00:07:55.916 A:middle
enabling unobstructed access to

00:07:55.916 --> 00:07:56.386 A:middle
content.

00:07:56.386 --> 00:07:57.946 A:middle
So the user cannot actually run

00:07:57.946 --> 00:07:59.196 A:middle
without having the color panel

00:07:59.436 --> 00:08:00.556 A:middle
up in most cases.

00:07:59.436 --> 00:08:00.556 A:middle
up in most cases.

00:08:00.816 --> 00:08:04.406 A:middle
Okay. We have an API update in

00:08:04.406 --> 00:08:05.956 A:middle
this color picker Touch Bar

00:08:05.956 --> 00:08:06.376 A:middle
item.

00:08:06.926 --> 00:08:08.526 A:middle
This new method, this new

00:08:08.526 --> 00:08:10.126 A:middle
property allowed color spaces,

00:08:10.446 --> 00:08:11.886 A:middle
enables specifying the color

00:08:11.886 --> 00:08:15.016 A:middle
space to be used, let's say the

00:08:15.116 --> 00:08:16.006 A:middle
color space of the current

00:08:16.006 --> 00:08:16.506 A:middle
document.

00:08:16.816 --> 00:08:18.086 A:middle
So the color picker can show

00:08:18.086 --> 00:08:20.056 A:middle
colors as they will appear when

00:08:20.056 --> 00:08:21.176 A:middle
used in the document.

00:08:21.466 --> 00:08:22.726 A:middle
Let me just show you an example.

00:08:23.226 --> 00:08:24.896 A:middle
Here is the simple color picker.

00:08:24.896 --> 00:08:26.366 A:middle
Now if you set the

00:08:26.366 --> 00:08:27.866 A:middle
allowedColorSpaces to

00:08:27.866 --> 00:08:30.066 A:middle
genericCMYK, you'll see colors

00:08:30.066 --> 00:08:31.246 A:middle
that are somewhat more muted

00:08:31.246 --> 00:08:31.976 A:middle
because this is the way they

00:08:31.976 --> 00:08:33.025 A:middle
would appear in the CMYK

00:08:33.025 --> 00:08:33.566 A:middle
document.

00:08:34.015 --> 00:08:35.316 A:middle
And here's a more extreme case.

00:08:35.316 --> 00:08:35.936 A:middle
If you're working on a

00:08:35.936 --> 00:08:37.606 A:middle
monochrome document, this is the

00:08:37.606 --> 00:08:38.346 A:middle
colors you would get.

00:08:39.025 --> 00:08:41.015 A:middle
We have some API updates on

00:08:41.015 --> 00:08:42.765 A:middle
NSGroupTouchBarItem as well.

00:08:43.106 --> 00:08:44.866 A:middle
First is the constructor for the

00:08:44.866 --> 00:08:45.566 A:middle
alert style.

00:08:46.126 --> 00:08:47.256 A:middle
Now you may be aware that when

00:08:47.256 --> 00:08:50.206 A:middle
AppKit shows an NSAlert, the

00:08:50.976 --> 00:08:52.326 A:middle
buttons are automatically

00:08:52.326 --> 00:08:53.696 A:middle
reflected in the Touch Bar as

00:08:53.696 --> 00:08:54.576 A:middle
you can see here.

00:08:55.066 --> 00:08:56.056 A:middle
Now if you, yourself, are

00:08:56.056 --> 00:08:57.836 A:middle
showing custom UIs with buttons

00:08:58.206 --> 00:08:59.396 A:middle
and you want to do the same kind

00:08:59.396 --> 00:09:00.646 A:middle
of thing AppKit does with

00:08:59.396 --> 00:09:00.646 A:middle
of thing AppKit does with

00:09:00.646 --> 00:09:02.426 A:middle
regards to placement and sizing

00:09:02.426 --> 00:09:03.966 A:middle
of the buttons, we have an API

00:09:04.116 --> 00:09:04.546 A:middle
for you.

00:09:05.516 --> 00:09:06.436 A:middle
And this is init

00:09:06.436 --> 00:09:07.486 A:middle
AlertStyleGroupItem

00:09:07.486 --> 00:09:08.706 A:middle
WithIdentifier method which

00:09:08.706 --> 00:09:09.416 A:middle
allows you to create a

00:09:09.416 --> 00:09:10.836 A:middle
GroupTouchBarItem and add your

00:09:10.836 --> 00:09:12.096 A:middle
buttons and get the same sort of

00:09:12.096 --> 00:09:13.866 A:middle
sizing and placement behaviors.

00:09:14.826 --> 00:09:17.106 A:middle
Another API on GroupTouchBarItem

00:09:17.786 --> 00:09:20.356 A:middle
provides the ability to specify

00:09:20.356 --> 00:09:21.376 A:middle
compression options.

00:09:21.616 --> 00:09:23.706 A:middle
So this determines how content

00:09:23.706 --> 00:09:25.656 A:middle
is managed if space grows tight

00:09:25.656 --> 00:09:26.206 A:middle
on the bar.

00:09:26.896 --> 00:09:27.846 A:middle
For instance, here is a bar.

00:09:27.846 --> 00:09:29.306 A:middle
In the middle we have four

00:09:29.306 --> 00:09:31.136 A:middle
buttons all with icons and

00:09:31.136 --> 00:09:31.666 A:middle
titles.

00:09:32.196 --> 00:09:33.356 A:middle
In a language like German, which

00:09:33.356 --> 00:09:35.616 A:middle
has bigger titles, by default

00:09:35.616 --> 00:09:36.646 A:middle
one of the buttons would drop

00:09:36.646 --> 00:09:36.966 A:middle
off.

00:09:37.006 --> 00:09:37.916 A:middle
But you'd rather have the

00:09:37.916 --> 00:09:39.916 A:middle
buttons compress than to lose

00:09:39.916 --> 00:09:40.706 A:middle
one of the buttons.

00:09:41.026 --> 00:09:42.306 A:middle
And you might want to choose

00:09:42.306 --> 00:09:43.146 A:middle
between whether you want the

00:09:43.146 --> 00:09:44.826 A:middle
icons to drop off or the titles

00:09:44.826 --> 00:09:46.186 A:middle
to drop off so something like

00:09:46.226 --> 00:09:47.546 A:middle
this or like this.

00:09:47.676 --> 00:09:48.916 A:middle
And also note that when one of

00:09:48.916 --> 00:09:50.396 A:middle
the icons drop off, you probably

00:09:50.396 --> 00:09:51.786 A:middle
want all of them to drop off for

00:09:51.786 --> 00:09:52.506 A:middle
consistency.

00:09:52.886 --> 00:09:54.266 A:middle
So this new API will let you do

00:09:54.266 --> 00:09:54.526 A:middle
that.

00:09:55.296 --> 00:09:56.536 A:middle
You specify to prioritize

00:09:56.536 --> 00:09:58.006 A:middle
compression options to apply.

00:09:58.006 --> 00:09:59.756 A:middle
And these include things like

00:09:59.756 --> 00:10:01.926 A:middle
hide images, hide text, or break

00:09:59.756 --> 00:10:01.926 A:middle
hide images, hide text, or break

00:10:01.926 --> 00:10:02.566 A:middle
[inaudible].

00:10:02.566 --> 00:10:05.256 A:middle
The last API provides support

00:10:05.256 --> 00:10:07.076 A:middle
for right-to-left interfaces in

00:10:07.076 --> 00:10:09.186 A:middle
the GroupTouchBarItem class.

00:10:09.186 --> 00:10:11.746 A:middle
So the previous APIs provided

00:10:11.746 --> 00:10:12.606 A:middle
right-to-left support in

00:10:12.606 --> 00:10:14.116 A:middle
specific cases such as segmented

00:10:14.116 --> 00:10:14.666 A:middle
control.

00:10:15.056 --> 00:10:16.256 A:middle
But now we have an API on

00:10:16.256 --> 00:10:17.526 A:middle
GroupTouchBarItem that allows

00:10:17.526 --> 00:10:18.366 A:middle
more flexibility.

00:10:18.656 --> 00:10:21.136 A:middle
Here is a FaceTime Touch Bar.

00:10:22.326 --> 00:10:24.326 A:middle
And in a right-to-left language,

00:10:24.386 --> 00:10:25.746 A:middle
you want it to appear like this

00:10:25.746 --> 00:10:28.116 A:middle
where those groups are flipped

00:10:28.116 --> 00:10:29.786 A:middle
inside each other but the whole

00:10:29.786 --> 00:10:31.036 A:middle
bar is not flipped and those

00:10:31.036 --> 00:10:33.726 A:middle
groups are not flipped across

00:10:33.726 --> 00:10:35.986 A:middle
the app section of the bar.

00:10:36.536 --> 00:10:38.236 A:middle
And this new API lets you

00:10:38.236 --> 00:10:41.016 A:middle
specify the user interface

00:10:41.016 --> 00:10:42.416 A:middle
layout direction on a per

00:10:42.416 --> 00:10:44.196 A:middle
GroupTouchBarItem basis.

00:10:45.376 --> 00:10:46.956 A:middle
Last thing for Touch Bar that I

00:10:46.956 --> 00:10:48.496 A:middle
want to highlight is Playground

00:10:48.496 --> 00:10:48.886 A:middle
support.

00:10:49.866 --> 00:10:50.716 A:middle
As you know, Playgrounds are

00:10:50.716 --> 00:10:51.316 A:middle
really fun.

00:10:51.426 --> 00:10:52.476 A:middle
Let's see this in action.

00:10:52.476 --> 00:10:53.576 A:middle
So you go ahead and enter your

00:10:53.576 --> 00:10:55.216 A:middle
Touch Bar code in the, sorry the

00:10:55.216 --> 00:10:56.556 A:middle
font is small but you don't need

00:10:56.556 --> 00:10:57.096 A:middle
to read this.

00:10:57.446 --> 00:10:57.966 A:middle
There's no quiz.

00:10:58.356 --> 00:11:00.436 A:middle
And then when you see this in

00:10:58.356 --> 00:11:00.436 A:middle
And then when you see this in

00:11:00.436 --> 00:11:02.026 A:middle
action, you can see your Touch

00:11:02.026 --> 00:11:02.586 A:middle
Bar items.

00:11:02.586 --> 00:11:03.466 A:middle
And, in fact, the whole Touch

00:11:03.466 --> 00:11:04.776 A:middle
Bar just come alive in

00:11:04.776 --> 00:11:05.176 A:middle
Playground.

00:11:06.416 --> 00:11:08.416 A:middle
[ Applause ]

00:11:08.816 --> 00:11:09.946 A:middle
And you can do fairly

00:11:09.946 --> 00:11:11.696 A:middle
sophisticated things: Check for

00:11:11.696 --> 00:11:12.946 A:middle
the placement and sizing and

00:11:12.946 --> 00:11:14.416 A:middle
also do things like replace the

00:11:14.416 --> 00:11:15.636 A:middle
Escape key, which is a fairly

00:11:15.636 --> 00:11:17.426 A:middle
advanced operation that you can

00:11:17.426 --> 00:11:19.876 A:middle
do right there in Playground.

00:11:20.696 --> 00:11:23.176 A:middle
So we have two sessions for

00:11:23.176 --> 00:11:24.506 A:middle
Touch Bar: The Fundamentals

00:11:24.506 --> 00:11:25.956 A:middle
talk, which is right after this,

00:11:26.316 --> 00:11:27.956 A:middle
will give you a great overview

00:11:27.956 --> 00:11:29.206 A:middle
of how to incorporate NSTouchBar

00:11:29.206 --> 00:11:31.536 A:middle
APIs into your application and

00:11:31.536 --> 00:11:32.836 A:middle
advanced talk this afternoon at

00:11:32.836 --> 00:11:34.326 A:middle
5:10, which will take you

00:11:34.326 --> 00:11:35.616 A:middle
further with some powerful

00:11:35.616 --> 00:11:37.126 A:middle
real-world use cases.

00:11:37.406 --> 00:11:38.926 A:middle
And both talks are entertaining

00:11:38.926 --> 00:11:40.276 A:middle
and educational so I encourage

00:11:40.276 --> 00:11:40.886 A:middle
you to attend them.

00:11:41.156 --> 00:11:42.186 A:middle
We also have a lab tomorrow

00:11:42.186 --> 00:11:44.006 A:middle
morning for Touch Bar from 9:00

00:11:44.006 --> 00:11:46.686 A:middle
to 11:00.

00:11:46.736 --> 00:11:48.686 A:middle
Okay. So next let's talk about

00:11:48.686 --> 00:11:49.426 A:middle
document sharing.

00:11:49.726 --> 00:11:51.396 A:middle
In macOS Sierra, we introduce

00:11:51.456 --> 00:11:53.536 A:middle
this sharing service, cloud

00:11:54.006 --> 00:11:55.336 A:middle
sharing, which enabled

00:11:55.336 --> 00:11:58.256 A:middle
persistent cloud-based sharing

00:11:58.256 --> 00:11:59.416 A:middle
sessions with other users.

00:11:59.856 --> 00:12:01.186 A:middle
In this release, we enable

00:11:59.856 --> 00:12:01.186 A:middle
In this release, we enable

00:12:01.186 --> 00:12:02.556 A:middle
iCloud drive-base document

00:12:02.556 --> 00:12:02.916 A:middle
sharing.

00:12:02.916 --> 00:12:03.856 A:middle
And let me show you what this

00:12:03.856 --> 00:12:04.256 A:middle
means.

00:12:04.926 --> 00:12:05.886 A:middle
Here we are in TextEdit.

00:12:06.486 --> 00:12:07.706 A:middle
You can go into the Share menu.

00:12:08.316 --> 00:12:09.646 A:middle
You can choose Add People.

00:12:10.076 --> 00:12:11.206 A:middle
This brings up the Add People

00:12:11.206 --> 00:12:11.816 A:middle
dialogue.

00:12:12.196 --> 00:12:13.106 A:middle
You can choose how you want to

00:12:13.106 --> 00:12:14.116 A:middle
send your invitation.

00:12:14.306 --> 00:12:15.436 A:middle
Let's choose Messages.

00:12:16.026 --> 00:12:19.366 A:middle
Let's invite our friend John

00:12:19.416 --> 00:12:21.786 A:middle
Appleseed, of course, and send

00:12:21.786 --> 00:12:22.126 A:middle
it off.

00:12:22.126 --> 00:12:23.306 A:middle
And you can see the document is

00:12:23.306 --> 00:12:23.826 A:middle
now shared.

00:12:23.826 --> 00:12:24.716 A:middle
And you can see that in the

00:12:24.716 --> 00:12:25.366 A:middle
title bar.

00:12:25.366 --> 00:12:26.726 A:middle
It indicates it's shared.

00:12:27.046 --> 00:12:28.756 A:middle
And John Appleseed can go ahead

00:12:28.756 --> 00:12:29.696 A:middle
and make his valuable

00:12:29.696 --> 00:12:32.216 A:middle
contributions to the document or

00:12:32.336 --> 00:12:33.256 A:middle
not so valuable.

00:12:33.806 --> 00:12:37.916 A:middle
And so the question for you is

00:12:37.916 --> 00:12:38.966 A:middle
how many lines of code in

00:12:38.966 --> 00:12:40.766 A:middle
TextEdit did it take to do this?

00:12:40.766 --> 00:12:42.956 A:middle
Of course, since I'm asking you

00:12:42.956 --> 00:12:44.206 A:middle
it's probably not, you know, 800

00:12:44.206 --> 00:12:46.046 A:middle
lines or thousands but the

00:12:46.046 --> 00:12:47.746 A:middle
answer may shock you because

00:12:47.746 --> 00:12:48.376 A:middle
it's really zero.

00:12:48.436 --> 00:12:50.876 A:middle
And TextEdit is already a

00:12:50.986 --> 00:12:52.446 A:middle
NSDocument based app and already

00:12:52.446 --> 00:12:53.526 A:middle
adopted auto-saving.

00:12:53.526 --> 00:12:54.846 A:middle
And thanks to that, TextEdit

00:12:54.886 --> 00:12:56.346 A:middle
gets all this functionality I

00:12:56.346 --> 00:12:57.326 A:middle
showed you for free.

00:12:57.326 --> 00:12:58.296 A:middle
And this is true for any

00:12:58.296 --> 00:12:59.676 A:middle
NSDocument based app you might

00:12:59.746 --> 00:13:00.006 A:middle
have.

00:12:59.746 --> 00:13:00.006 A:middle
have.

00:13:00.916 --> 00:13:03.416 A:middle
In fact, this whole Share menu

00:13:03.416 --> 00:13:05.166 A:middle
here is new in macOS High

00:13:05.166 --> 00:13:05.526 A:middle
Sierra.

00:13:05.906 --> 00:13:08.576 A:middle
And it includes other classic --

00:13:08.576 --> 00:13:09.816 A:middle
I'll call them classic, you

00:13:09.816 --> 00:13:10.546 A:middle
know, they're from a few years

00:13:10.546 --> 00:13:12.456 A:middle
ago, sharing services such as

00:13:12.456 --> 00:13:14.316 A:middle
Mail, AirDrop, Notes, et cetera.

00:13:14.316 --> 00:13:16.056 A:middle
So this whole menu is free in

00:13:16.056 --> 00:13:16.936 A:middle
your NSDocument based

00:13:16.936 --> 00:13:18.436 A:middle
applications in macOS High

00:13:18.436 --> 00:13:18.796 A:middle
Sierra.

00:13:19.396 --> 00:13:21.416 A:middle
NSDocument, you can on a per

00:13:21.416 --> 00:13:23.556 A:middle
instance basis, indicate whether

00:13:23.556 --> 00:13:25.056 A:middle
a document should be shared or

00:13:25.056 --> 00:13:26.116 A:middle
not, so you can disable the

00:13:26.116 --> 00:13:26.866 A:middle
default sharing.

00:13:27.176 --> 00:13:29.046 A:middle
This method share initiates a

00:13:29.046 --> 00:13:29.466 A:middle
share.

00:13:29.856 --> 00:13:32.156 A:middle
And the prepare method allows

00:13:32.156 --> 00:13:33.816 A:middle
you to make any final changes to

00:13:33.816 --> 00:13:35.136 A:middle
the picker before the menu is

00:13:35.136 --> 00:13:35.666 A:middle
presented.

00:13:36.276 --> 00:13:37.786 A:middle
And NSDocument controller, you

00:13:37.786 --> 00:13:38.946 A:middle
have a property that lets you

00:13:38.946 --> 00:13:40.046 A:middle
pretty much disable this whole

00:13:40.046 --> 00:13:40.796 A:middle
sharing service.

00:13:40.796 --> 00:13:42.116 A:middle
So you can control it yourself

00:13:42.116 --> 00:13:42.546 A:middle
if you want.

00:13:42.806 --> 00:13:44.116 A:middle
And then the StandardShare menu

00:13:44.116 --> 00:13:46.506 A:middle
item will return the menu that

00:13:46.506 --> 00:13:47.826 A:middle
you can place yourself, rather

00:13:47.826 --> 00:13:49.986 A:middle
than let the app get placed in

00:13:50.576 --> 00:13:53.046 A:middle
its default location.

00:13:53.196 --> 00:13:54.106 A:middle
Tabbed Windows.

00:13:54.616 --> 00:13:56.746 A:middle
We added Tabbed Windows in macOS

00:13:56.746 --> 00:13:58.156 A:middle
Sierra in the last release.

00:13:58.446 --> 00:13:59.346 A:middle
And we did it in a way that

00:13:59.346 --> 00:14:00.616 A:middle
pretty much worked automatic for

00:13:59.346 --> 00:14:00.616 A:middle
pretty much worked automatic for

00:14:00.616 --> 00:14:01.716 A:middle
all applications.

00:14:02.776 --> 00:14:03.986 A:middle
So here you can see it in action

00:14:03.986 --> 00:14:06.506 A:middle
in pages, for instance, where I

00:14:06.506 --> 00:14:08.726 A:middle
can go to the Window menu, Merge

00:14:08.726 --> 00:14:09.806 A:middle
All Windows, and bam.

00:14:09.806 --> 00:14:11.306 A:middle
Now I get -- all my documents

00:14:11.306 --> 00:14:12.746 A:middle
are tabs and you can just choose

00:14:12.746 --> 00:14:13.196 A:middle
between them.

00:14:13.196 --> 00:14:15.286 A:middle
It's really nice feature

00:14:15.286 --> 00:14:16.066 A:middle
reducing clutter.

00:14:16.516 --> 00:14:18.786 A:middle
In macOS High Sierra, we added

00:14:18.826 --> 00:14:20.436 A:middle
the Tab Overview feature.

00:14:20.436 --> 00:14:21.096 A:middle
This is new.

00:14:21.096 --> 00:14:23.846 A:middle
And you go to the View menu and

00:14:23.926 --> 00:14:27.126 A:middle
select Show All Tabs and then

00:14:27.276 --> 00:14:29.156 A:middle
this now shows you the tabs much

00:14:29.156 --> 00:14:31.046 A:middle
like Safari has been able to do.

00:14:31.416 --> 00:14:32.346 A:middle
And then you go ahead and

00:14:32.346 --> 00:14:33.606 A:middle
visually select which tab you

00:14:33.606 --> 00:14:33.826 A:middle
want.

00:14:33.826 --> 00:14:35.156 A:middle
So it's all automatic.

00:14:35.156 --> 00:14:36.266 A:middle
Again, your apps will get this

00:14:36.266 --> 00:14:36.666 A:middle
for free.

00:14:37.776 --> 00:14:39.406 A:middle
We do have some APIs that let

00:14:39.406 --> 00:14:41.076 A:middle
you have more control over tabs.

00:14:41.866 --> 00:14:44.196 A:middle
One is the NSWindowTab class.

00:14:44.816 --> 00:14:46.396 A:middle
It represents instances of this,

00:14:46.396 --> 00:14:47.996 A:middle
represent information about a

00:14:47.996 --> 00:14:48.596 A:middle
single tab.

00:14:48.596 --> 00:14:51.076 A:middle
And just using this Safari tab

00:14:51.246 --> 00:14:53.396 A:middle
bar as an example, the title

00:14:53.396 --> 00:14:55.006 A:middle
[inaudible] title properties

00:14:55.276 --> 00:14:56.386 A:middle
allow you to customize the

00:14:56.386 --> 00:14:57.916 A:middle
default title that's shown.

00:14:59.026 --> 00:15:00.856 A:middle
And by the default title is, of

00:14:59.026 --> 00:15:00.856 A:middle
And by the default title is, of

00:15:00.856 --> 00:15:02.176 A:middle
course, the title of the window.

00:15:02.936 --> 00:15:04.146 A:middle
The toolTip property lets you

00:15:04.146 --> 00:15:05.546 A:middle
customize the default toolTip

00:15:05.806 --> 00:15:06.536 A:middle
that's displayed.

00:15:07.206 --> 00:15:08.856 A:middle
And accessoryView property lets

00:15:08.856 --> 00:15:10.136 A:middle
you insert an accessoryView in

00:15:10.136 --> 00:15:10.736 A:middle
the tab bar.

00:15:10.736 --> 00:15:12.366 A:middle
And you can see here, in Safari,

00:15:12.466 --> 00:15:13.966 A:middle
the little speaker icon which

00:15:13.966 --> 00:15:16.086 A:middle
Safari uses to indicate webpages

00:15:16.086 --> 00:15:16.996 A:middle
that are playing audio.

00:15:17.216 --> 00:15:18.506 A:middle
So you can do this now on your

00:15:18.506 --> 00:15:19.286 A:middle
own tabs as well.

00:15:20.756 --> 00:15:22.006 A:middle
The NSWindowTabGroup class

00:15:22.456 --> 00:15:23.686 A:middle
represents information about the

00:15:23.686 --> 00:15:25.066 A:middle
whole tab group in that window.

00:15:25.606 --> 00:15:26.896 A:middle
You can ask for its properties

00:15:26.896 --> 00:15:28.066 A:middle
like whether it's visible or the

00:15:28.066 --> 00:15:29.166 A:middle
overview is visible.

00:15:29.526 --> 00:15:30.856 A:middle
You can integrate the windows.

00:15:30.856 --> 00:15:32.026 A:middle
You can change which window is

00:15:32.026 --> 00:15:32.306 A:middle
front.

00:15:32.536 --> 00:15:33.706 A:middle
And you can also add and remove

00:15:33.706 --> 00:15:35.746 A:middle
windows from the tab group as

00:15:36.246 --> 00:15:36.330 A:middle
well.

00:15:38.436 --> 00:15:40.466 A:middle
Now a new delegate method in

00:15:40.816 --> 00:15:43.946 A:middle
this application for opening

00:15:44.046 --> 00:15:44.156 A:middle
URLs.

00:15:44.156 --> 00:15:45.736 A:middle
As you're likely aware,

00:15:45.736 --> 00:15:47.236 A:middle
NSApplicationDelegate provides

00:15:47.236 --> 00:15:48.756 A:middle
several callouts to open files

00:15:49.266 --> 00:15:50.456 A:middle
but none for handling URLs.

00:15:50.456 --> 00:15:51.946 A:middle
So this new method application

00:15:51.946 --> 00:15:53.926 A:middle
open URLs will be called with

00:15:53.926 --> 00:15:55.856 A:middle
URLs instead of files

00:15:55.856 --> 00:15:57.346 A:middle
[inaudible], but it will also be

00:15:57.346 --> 00:15:58.486 A:middle
called for any custom URL

00:15:58.486 --> 00:15:59.806 A:middle
schemes your application may

00:15:59.806 --> 00:16:00.686 A:middle
have registered for.

00:15:59.806 --> 00:16:00.686 A:middle
have registered for.

00:16:00.986 --> 00:16:02.216 A:middle
So previously this was something

00:16:02.216 --> 00:16:03.156 A:middle
you would have to register an

00:16:03.156 --> 00:16:05.606 A:middle
Apple event handler for and you

00:16:05.606 --> 00:16:06.066 A:middle
don't need to.

00:16:06.066 --> 00:16:07.936 A:middle
And this is now much easier.

00:16:08.306 --> 00:16:09.516 A:middle
And if implemented, this gets

00:16:09.516 --> 00:16:11.046 A:middle
called for all open requests

00:16:11.046 --> 00:16:12.136 A:middle
except those automatically

00:16:12.136 --> 00:16:13.726 A:middle
handled by NSDocument, which are

00:16:13.776 --> 00:16:14.816 A:middle
taken out of this list.

00:16:15.396 --> 00:16:16.366 A:middle
So fairly straightforward.

00:16:16.686 --> 00:16:17.366 A:middle
Thank you.

00:16:20.036 --> 00:16:22.536 A:middle
NSCollectionView will now -- in

00:16:22.536 --> 00:16:23.926 A:middle
macOS High Sierra does

00:16:23.926 --> 00:16:24.926 A:middle
responsive scrolling.

00:16:25.246 --> 00:16:26.226 A:middle
And let me show you what this

00:16:26.226 --> 00:16:26.556 A:middle
means.

00:16:27.196 --> 00:16:28.246 A:middle
Here we have a CollectionView

00:16:28.246 --> 00:16:29.936 A:middle
with six visible items but, of

00:16:29.936 --> 00:16:30.566 A:middle
course, there are many more

00:16:30.566 --> 00:16:32.256 A:middle
items above and below the

00:16:32.256 --> 00:16:33.396 A:middle
collection view, the visible

00:16:33.396 --> 00:16:33.796 A:middle
area.

00:16:34.316 --> 00:16:36.606 A:middle
CollectionView does prefetching

00:16:36.606 --> 00:16:37.906 A:middle
meaning it will go ahead and

00:16:37.906 --> 00:16:39.506 A:middle
prefetch some items that are not

00:16:39.506 --> 00:16:40.886 A:middle
yet visible with the

00:16:40.886 --> 00:16:42.226 A:middle
anticipation of the user

00:16:42.226 --> 00:16:43.346 A:middle
scrolling to that area.

00:16:43.736 --> 00:16:44.776 A:middle
So this is automatic for

00:16:44.776 --> 00:16:46.616 A:middle
applications of linked on 10.13

00:16:47.056 --> 00:16:47.696 A:middle
and you don't need to do

00:16:47.696 --> 00:16:48.036 A:middle
anything.

00:16:49.056 --> 00:16:49.986 A:middle
However, if you do want to

00:16:49.986 --> 00:16:51.086 A:middle
affect the way this works,

00:16:51.456 --> 00:16:52.606 A:middle
there's a new prefetch data

00:16:52.606 --> 00:16:54.616 A:middle
source with two methods you can

00:16:54.616 --> 00:16:55.006 A:middle
implement.

00:16:55.006 --> 00:16:56.316 A:middle
So this prefetchDataSource is

00:16:56.316 --> 00:16:59.596 A:middle
the same delegate API as iOS

00:16:59.596 --> 00:17:01.606 A:middle
has, the same delegate, sorry,

00:16:59.596 --> 00:17:01.606 A:middle
has, the same delegate, sorry,

00:17:01.606 --> 00:17:02.856 A:middle
the same data source method.

00:17:03.166 --> 00:17:05.136 A:middle
And two methods here are -- one

00:17:05.136 --> 00:17:06.496 A:middle
lets you hear about prefetch

00:17:06.566 --> 00:17:07.636 A:middle
items being prefetched.

00:17:07.636 --> 00:17:09.246 A:middle
And the other lets you hear

00:17:09.246 --> 00:17:10.766 A:middle
about prefetch being canceled

00:17:10.766 --> 00:17:11.886 A:middle
say because the user stops

00:17:11.886 --> 00:17:12.366 A:middle
scrolling.

00:17:12.715 --> 00:17:14.076 A:middle
See you can actually use these

00:17:14.076 --> 00:17:15.506 A:middle
to customize the prefetching

00:17:15.506 --> 00:17:17.526 A:middle
behaviors above and beyond

00:17:18.116 --> 00:17:19.136 A:middle
traditional data source

00:17:19.136 --> 00:17:20.076 A:middle
behaviors you're already

00:17:20.076 --> 00:17:21.046 A:middle
implementing but, again, these

00:17:21.046 --> 00:17:21.846 A:middle
are options.

00:17:21.846 --> 00:17:22.656 A:middle
You don't have to implement this

00:17:22.656 --> 00:17:23.766 A:middle
data source at all and things

00:17:23.766 --> 00:17:24.226 A:middle
will still work.

00:17:24.226 --> 00:17:26.435 A:middle
Next, we have a few updates

00:17:26.435 --> 00:17:27.136 A:middle
about colors.

00:17:29.626 --> 00:17:32.636 A:middle
First, new properties NSColor to

00:17:32.636 --> 00:17:33.646 A:middle
implement system colors.

00:17:33.646 --> 00:17:34.936 A:middle
So these are properties such as

00:17:34.936 --> 00:17:36.296 A:middle
systemBlue, systemBrown,

00:17:36.296 --> 00:17:37.786 A:middle
systemGray, et cetera.

00:17:37.786 --> 00:17:38.636 A:middle
You can see the list here.

00:17:39.066 --> 00:17:40.056 A:middle
So these are colors that are

00:17:40.056 --> 00:17:41.326 A:middle
meant to be used when you want

00:17:41.326 --> 00:17:43.676 A:middle
colors that match the system

00:17:43.966 --> 00:17:45.956 A:middle
colors or colors used by system

00:17:45.956 --> 00:17:46.776 A:middle
applications.

00:17:47.486 --> 00:17:49.116 A:middle
So these colors may change

00:17:49.116 --> 00:17:51.206 A:middle
between releases and between

00:17:51.206 --> 00:17:52.276 A:middle
different appearances.

00:17:52.536 --> 00:17:54.756 A:middle
For instance, the same color,

00:17:54.756 --> 00:17:56.706 A:middle
same system color used in the

00:17:56.706 --> 00:17:58.026 A:middle
Touch Bar will appear different

00:17:58.026 --> 00:17:59.436 A:middle
than when used in the window.

00:17:59.916 --> 00:18:01.036 A:middle
So this allows your app to

00:17:59.916 --> 00:18:01.036 A:middle
So this allows your app to

00:18:01.036 --> 00:18:02.366 A:middle
remain fashionable no matter

00:18:02.366 --> 00:18:03.036 A:middle
when or where.

00:18:03.716 --> 00:18:04.836 A:middle
Of course, this also means you

00:18:04.836 --> 00:18:05.976 A:middle
should not make any assumptions

00:18:05.976 --> 00:18:07.196 A:middle
about these exact colors here

00:18:07.196 --> 00:18:08.456 A:middle
since they might change out from

00:18:08.456 --> 00:18:08.836 A:middle
under you.

00:18:09.486 --> 00:18:10.706 A:middle
Now, these are available back to

00:18:10.706 --> 00:18:12.716 A:middle
macOS 10.10, that's Yosemite.

00:18:12.716 --> 00:18:13.876 A:middle
And they're also available in

00:18:13.876 --> 00:18:15.126 A:middle
the Developer list of the color

00:18:15.126 --> 00:18:15.496 A:middle
pickers.

00:18:15.496 --> 00:18:16.416 A:middle
So you can actually directly

00:18:16.416 --> 00:18:17.596 A:middle
pick them and use them in your

00:18:17.596 --> 00:18:18.986 A:middle
application, say in Xcode.

00:18:20.386 --> 00:18:21.526 A:middle
Another update in colors

00:18:22.226 --> 00:18:23.776 A:middle
involves the older standard

00:18:23.806 --> 00:18:24.366 A:middle
colors.

00:18:25.306 --> 00:18:27.256 A:middle
And what do I mean by older

00:18:27.256 --> 00:18:27.996 A:middle
standard colors?

00:18:27.996 --> 00:18:29.946 A:middle
It's these guys, NSColor.red,

00:18:30.126 --> 00:18:31.816 A:middle
.green, .yellow, et cetera that

00:18:31.816 --> 00:18:32.916 A:middle
we've had for many years.

00:18:33.236 --> 00:18:34.096 A:middle
These have traditionally been

00:18:34.096 --> 00:18:35.736 A:middle
defined as saturated business

00:18:35.736 --> 00:18:36.566 A:middle
graphics colors.

00:18:36.936 --> 00:18:38.726 A:middle
For instance, red is 100, green

00:18:38.726 --> 00:18:40.276 A:middle
is 010, et cetera.

00:18:41.416 --> 00:18:42.676 A:middle
These used to be in the generic

00:18:42.676 --> 00:18:44.486 A:middle
RGB or calibrated RGB color

00:18:44.486 --> 00:18:45.086 A:middle
spaces.

00:18:45.386 --> 00:18:47.266 A:middle
Now the values remain the same,

00:18:47.576 --> 00:18:48.646 A:middle
but we've modernized them

00:18:48.646 --> 00:18:49.946 A:middle
kicking and screaming into the

00:18:50.026 --> 00:18:51.286 A:middle
sRGB color spaces.

00:18:51.666 --> 00:18:53.376 A:middle
So what this means, of course,

00:18:53.376 --> 00:18:55.016 A:middle
is that the color values are

00:18:55.016 --> 00:18:55.966 A:middle
somewhat different.

00:18:57.126 --> 00:18:58.626 A:middle
And because of that reason, this

00:18:58.626 --> 00:18:59.596 A:middle
change only occurs for

00:18:59.596 --> 00:19:00.876 A:middle
applications linked against the

00:18:59.596 --> 00:19:00.876 A:middle
applications linked against the

00:19:00.876 --> 00:19:02.406 A:middle
10.13 SDK or later.

00:19:02.706 --> 00:19:04.296 A:middle
And you can see this is the way

00:19:04.296 --> 00:19:05.046 A:middle
the colors come through in

00:19:05.046 --> 00:19:05.726 A:middle
generic RGB.

00:19:05.726 --> 00:19:06.686 A:middle
And here's the way they come

00:19:06.686 --> 00:19:07.446 A:middle
across in sRGB.

00:19:07.446 --> 00:19:08.756 A:middle
And there are some visual

00:19:08.756 --> 00:19:09.306 A:middle
differences.

00:19:09.306 --> 00:19:10.316 A:middle
We didn't want to introduce

00:19:10.316 --> 00:19:11.796 A:middle
visual inconsistencies in your

00:19:11.796 --> 00:19:12.526 A:middle
applications.

00:19:13.816 --> 00:19:15.246 A:middle
The one last color feature I

00:19:15.246 --> 00:19:16.596 A:middle
want to mention is colors in

00:19:16.596 --> 00:19:17.596 A:middle
Asset Catalogs.

00:19:18.126 --> 00:19:20.306 A:middle
Xcode now has the ability to let

00:19:20.306 --> 00:19:21.416 A:middle
you add colors to Asset

00:19:21.416 --> 00:19:22.016 A:middle
Catalogs.

00:19:22.016 --> 00:19:23.226 A:middle
And you can see a simple case

00:19:23.226 --> 00:19:23.416 A:middle
here.

00:19:23.866 --> 00:19:26.636 A:middle
Now you can also -- you cannot

00:19:26.636 --> 00:19:27.796 A:middle
add or provide just one color

00:19:27.796 --> 00:19:29.886 A:middle
for a given named color.

00:19:30.286 --> 00:19:31.476 A:middle
You can also provide multiple

00:19:31.616 --> 00:19:33.586 A:middle
colors, one per gamut.

00:19:33.946 --> 00:19:34.816 A:middle
For instance, here we have the

00:19:34.856 --> 00:19:36.546 A:middle
radioactive color with an sRGB

00:19:36.546 --> 00:19:38.316 A:middle
gamut and a Display P3 gamut

00:19:38.406 --> 00:19:38.676 A:middle
color.

00:19:39.416 --> 00:19:40.696 A:middle
And this is not something you

00:19:40.696 --> 00:19:41.606 A:middle
have to do very often.

00:19:41.606 --> 00:19:42.666 A:middle
This is pretty rare.

00:19:42.926 --> 00:19:44.136 A:middle
But you might need to do it if

00:19:44.136 --> 00:19:45.856 A:middle
you have a number of P3 colors

00:19:46.266 --> 00:19:47.916 A:middle
that are saturated and that when

00:19:48.106 --> 00:19:50.396 A:middle
reduced to sRGB come across as

00:19:50.396 --> 00:19:51.046 A:middle
the same.

00:19:51.306 --> 00:19:52.256 A:middle
So you want to distinguish them

00:19:52.256 --> 00:19:52.816 A:middle
in sRGB.

00:19:52.816 --> 00:19:54.006 A:middle
You might want to provide this

00:19:54.056 --> 00:19:54.856 A:middle
RGB variance.

00:19:54.896 --> 00:19:56.016 A:middle
But, again, it should be fairly

00:19:56.016 --> 00:19:56.986 A:middle
rare to need to do that.

00:19:57.816 --> 00:19:59.566 A:middle
So how do you get at these

00:19:59.566 --> 00:20:00.136 A:middle
colors?

00:19:59.566 --> 00:20:00.136 A:middle
colors?

00:20:00.186 --> 00:20:01.706 A:middle
We have API for this, both and

00:20:01.706 --> 00:20:02.956 A:middle
NSColor and also in UIColor.

00:20:03.046 --> 00:20:05.926 A:middle
You basically create an NSColor

00:20:06.216 --> 00:20:07.256 A:middle
by supplying a name.

00:20:07.646 --> 00:20:09.126 A:middle
You can also supply a bundle if

00:20:09.126 --> 00:20:10.976 A:middle
the Asset Catalog is not in your

00:20:10.976 --> 00:20:11.496 A:middle
main bundle.

00:20:11.496 --> 00:20:15.996 A:middle
We have a number of enhancements

00:20:16.176 --> 00:20:17.516 A:middle
for accessibility as well.

00:20:17.516 --> 00:20:18.316 A:middle
And I'm going to talk about

00:20:18.316 --> 00:20:19.816 A:middle
NSAccessibilityCustomRotor.

00:20:19.816 --> 00:20:21.376 A:middle
You might be aware,

00:20:21.446 --> 00:20:23.036 A:middle
AccessibilityRotors, enable

00:20:23.036 --> 00:20:25.216 A:middle
easier searching of content via

00:20:25.316 --> 00:20:26.546 A:middle
assistive technologies.

00:20:27.416 --> 00:20:28.786 A:middle
For instance, a voiceover user

00:20:28.786 --> 00:20:30.286 A:middle
can browse links in a webpage.

00:20:30.806 --> 00:20:32.446 A:middle
This new API enables you to

00:20:32.446 --> 00:20:33.606 A:middle
invent custom rotors, for

00:20:33.606 --> 00:20:35.036 A:middle
instance headings in a pages

00:20:35.036 --> 00:20:35.656 A:middle
document.

00:20:35.656 --> 00:20:36.796 A:middle
And here's an example of that.

00:20:37.576 --> 00:20:39.246 A:middle
And this is similar -- yeah,

00:20:39.396 --> 00:20:39.886 A:middle
it's a good API.

00:20:40.026 --> 00:20:40.586 A:middle
It's similar to the

00:20:40.586 --> 00:20:42.196 A:middle
UIAccessibilityCustomRotor API

00:20:42.426 --> 00:20:44.156 A:middle
on iOS, which we introduced last

00:20:44.156 --> 00:20:44.556 A:middle
release.

00:20:45.496 --> 00:20:46.746 A:middle
And fairly straightforward, you

00:20:46.746 --> 00:20:47.736 A:middle
implement the

00:20:47.736 --> 00:20:49.706 A:middle
accessibilityCustomRotors method

00:20:50.286 --> 00:20:52.846 A:middle
on the accessibility protocol

00:20:52.846 --> 00:20:54.076 A:middle
and return an array of the

00:20:54.076 --> 00:20:55.276 A:middle
custom rotors you'd like to

00:20:55.276 --> 00:20:55.536 A:middle
vend.

00:20:56.716 --> 00:20:58.056 A:middle
A little property clean-up note.

00:20:58.056 --> 00:21:00.516 A:middle
So we had a number of object

00:20:58.056 --> 00:21:00.516 A:middle
So we had a number of object

00:21:00.516 --> 00:21:03.096 A:middle
properties in AppKit still

00:21:03.096 --> 00:21:04.036 A:middle
[inaudible].

00:21:04.036 --> 00:21:05.476 A:middle
Now these come cross especially

00:21:05.476 --> 00:21:07.866 A:middle
sad in Swift as unknown and then

00:21:07.866 --> 00:21:09.436 A:middle
to add insult to injury, also

00:21:09.436 --> 00:21:10.626 A:middle
unsafe.

00:21:10.686 --> 00:21:12.986 A:middle
And so we changed a bunch here.

00:21:13.396 --> 00:21:14.756 A:middle
Delegates, [inaudible] outlets,

00:21:14.836 --> 00:21:16.506 A:middle
and naturally weak relationships

00:21:16.506 --> 00:21:18.526 A:middle
such as parent pointers or first

00:21:18.526 --> 00:21:19.786 A:middle
responder as you can see here.

00:21:19.786 --> 00:21:20.736 A:middle
These have become weak.

00:21:21.296 --> 00:21:22.936 A:middle
And the contentView here on

00:21:23.056 --> 00:21:24.566 A:middle
NSBox, that's an example of a

00:21:24.566 --> 00:21:25.826 A:middle
property that has become strong.

00:21:25.826 --> 00:21:26.896 A:middle
And you can see the way they

00:21:26.896 --> 00:21:29.086 A:middle
come across now in 10.13.

00:21:29.646 --> 00:21:30.396 A:middle
Now, these changes are

00:21:30.396 --> 00:21:31.586 A:middle
compatible for the most part,

00:21:31.976 --> 00:21:33.136 A:middle
but you should be aware that a

00:21:33.136 --> 00:21:34.476 A:middle
weak property will become

00:21:34.476 --> 00:21:35.756 A:middle
automatically [inaudible] out

00:21:35.756 --> 00:21:37.156 A:middle
when the object being referenced

00:21:37.156 --> 00:21:37.696 A:middle
goes away.

00:21:38.046 --> 00:21:40.296 A:middle
So that could represent some

00:21:40.296 --> 00:21:42.046 A:middle
compatibility, some change in

00:21:42.046 --> 00:21:43.746 A:middle
behavior, risk incompatibility.

00:21:43.746 --> 00:21:45.286 A:middle
So it's something to keep an eye

00:21:45.286 --> 00:21:45.706 A:middle
out for.

00:21:46.466 --> 00:21:48.166 A:middle
And, by the way, one more thing

00:21:48.166 --> 00:21:48.556 A:middle
here.

00:21:48.976 --> 00:21:50.516 A:middle
We can't show you his or her

00:21:50.516 --> 00:21:52.906 A:middle
name or face but in doing this

00:21:52.906 --> 00:21:54.356 A:middle
we fulfilled this developer's

00:21:54.356 --> 00:21:55.506 A:middle
WWDC wish.

00:21:56.226 --> 00:21:57.246 A:middle
So I don't know if you're out

00:21:57.316 --> 00:21:59.146 A:middle
there, but happy WWDC to you.

00:22:00.516 --> 00:22:04.626 A:middle
[ Applause ]

00:22:05.126 --> 00:22:06.156 A:middle
So we listen.

00:22:07.586 --> 00:22:09.196 A:middle
So a few updates on Text.

00:22:10.436 --> 00:22:11.936 A:middle
My first, we have improved

00:22:11.936 --> 00:22:14.336 A:middle
orphan handling in NSTextField.

00:22:14.566 --> 00:22:16.406 A:middle
What this means is we'll reduce

00:22:16.406 --> 00:22:17.666 A:middle
occurrences where you might have

00:22:17.666 --> 00:22:19.076 A:middle
a single Chinese or Japanese

00:22:19.076 --> 00:22:20.876 A:middle
character occurring on a line by

00:22:20.876 --> 00:22:22.346 A:middle
itself, especially in two line

00:22:22.346 --> 00:22:22.786 A:middle
cases.

00:22:22.786 --> 00:22:23.676 A:middle
And this affects, for instance,

00:22:23.676 --> 00:22:25.226 A:middle
the lookup alerts and so on.

00:22:26.186 --> 00:22:28.646 A:middle
We have CGGlyph-based APIs in

00:22:28.686 --> 00:22:29.996 A:middle
NSFont and NSBezierPath.

00:22:30.506 --> 00:22:34.066 A:middle
This provides improved impedance

00:22:34.066 --> 00:22:35.436 A:middle
match with lower-level graphics

00:22:35.436 --> 00:22:36.706 A:middle
APIs and, of course, provides

00:22:36.706 --> 00:22:37.626 A:middle
better performance.

00:22:37.916 --> 00:22:39.496 A:middle
We have a new class called

00:22:39.496 --> 00:22:41.496 A:middle
NSFontAssetRequest for

00:22:41.496 --> 00:22:42.796 A:middle
downloading system fonts.

00:22:42.846 --> 00:22:44.166 A:middle
These are fonts that are part of

00:22:44.216 --> 00:22:46.136 A:middle
the system but that do not ship

00:22:46.136 --> 00:22:46.896 A:middle
with the system.

00:22:47.256 --> 00:22:48.736 A:middle
So with this API now, instead of

00:22:48.736 --> 00:22:49.996 A:middle
getting the default synchronous

00:22:49.996 --> 00:22:51.626 A:middle
UI, you can actually incorporate

00:22:51.626 --> 00:22:53.046 A:middle
an asynchronous UI directly into

00:22:53.046 --> 00:22:53.946 A:middle
your applications.

00:22:54.496 --> 00:22:56.046 A:middle
And last but not least for Text,

00:22:56.046 --> 00:22:57.246 A:middle
we have support for Nastaliq

00:22:57.246 --> 00:22:57.596 A:middle
script.

00:22:58.126 --> 00:22:59.686 A:middle
Nastaliq is a style of writing

00:22:59.686 --> 00:23:01.106 A:middle
in the Arabic script used for

00:22:59.686 --> 00:23:01.106 A:middle
in the Arabic script used for

00:23:01.106 --> 00:23:02.226 A:middle
languages like Urdu.

00:23:02.466 --> 00:23:03.616 A:middle
It's a striking script.

00:23:03.706 --> 00:23:05.656 A:middle
It requires some typesetting in

00:23:05.656 --> 00:23:06.816 A:middle
order to render properly.

00:23:06.816 --> 00:23:08.536 A:middle
And we finally have support for

00:23:08.536 --> 00:23:10.806 A:middle
it in the Cocoa Text system.

00:23:11.266 --> 00:23:12.366 A:middle
And we can just show you an

00:23:12.366 --> 00:23:12.876 A:middle
example.

00:23:13.186 --> 00:23:14.546 A:middle
Here's the word Nastaliq

00:23:14.736 --> 00:23:16.066 A:middle
rendered in traditional script.

00:23:16.406 --> 00:23:17.746 A:middle
And here's the same word

00:23:17.746 --> 00:23:19.146 A:middle
rendered in Nastaliq script.

00:23:19.146 --> 00:23:20.196 A:middle
And you can see why this is a

00:23:20.196 --> 00:23:21.516 A:middle
challenge because of the flowing

00:23:21.516 --> 00:23:22.336 A:middle
diagonal nature.

00:23:24.096 --> 00:23:25.486 A:middle
Now, some honorable AppKit

00:23:25.696 --> 00:23:27.096 A:middle
features mentions.

00:23:27.746 --> 00:23:29.836 A:middle
NSSegmentedControl has alignment

00:23:29.836 --> 00:23:31.296 A:middle
and distribution properties that

00:23:31.786 --> 00:23:33.086 A:middle
provide you with more control

00:23:33.086 --> 00:23:33.666 A:middle
over layout.

00:23:33.666 --> 00:23:35.536 A:middle
NSLevelIndicator has a

00:23:35.536 --> 00:23:37.116 A:middle
beautifully refined new look and

00:23:37.116 --> 00:23:38.486 A:middle
some API refinements as well.

00:23:39.496 --> 00:23:40.876 A:middle
NSMenuItem now allows you to

00:23:40.876 --> 00:23:42.316 A:middle
have a KeyEquivalentWhenHidden

00:23:42.316 --> 00:23:43.076 A:middle
so you can actually have

00:23:43.076 --> 00:23:44.256 A:middle
additional key equivalents in

00:23:44.256 --> 00:23:44.946 A:middle
your menus.

00:23:45.406 --> 00:23:48.316 A:middle
NSTableView allows you to use

00:23:48.456 --> 00:23:50.426 A:middle
auto layout to compute row

00:23:50.426 --> 00:23:51.466 A:middle
heights automatically.

00:23:52.596 --> 00:23:55.026 A:middle
We have asynchronous restorable

00:23:55.026 --> 00:23:56.426 A:middle
state encoding meaning objects

00:23:56.426 --> 00:23:57.756 A:middle
that actually implement states

00:23:57.876 --> 00:23:59.226 A:middle
preservation and restoration can

00:23:59.226 --> 00:24:01.126 A:middle
now do so asynchronously, if

00:23:59.226 --> 00:24:01.126 A:middle
now do so asynchronously, if

00:24:01.126 --> 00:24:02.276 A:middle
there was a performance,

00:24:02.326 --> 00:24:04.636 A:middle
potential performance hit in the

00:24:04.636 --> 00:24:05.596 A:middle
way they were doing it.

00:24:06.396 --> 00:24:08.016 A:middle
We have improved handling of

00:24:08.016 --> 00:24:09.766 A:middle
large items during dragging.

00:24:10.056 --> 00:24:11.046 A:middle
So as you're dragging a large

00:24:11.046 --> 00:24:12.076 A:middle
image around a screen, it will

00:24:12.076 --> 00:24:13.466 A:middle
now be automatically scaled down

00:24:13.466 --> 00:24:14.736 A:middle
so you can actually see what

00:24:14.736 --> 00:24:15.766 A:middle
you're dragging over.

00:24:16.236 --> 00:24:18.146 A:middle
And finally, NSDrawers have been

00:24:18.346 --> 00:24:18.956 A:middle
deprecated.

00:24:19.426 --> 00:24:21.536 A:middle
Now, if you're wondering

00:24:22.806 --> 00:24:23.996 A:middle
NSDrawers, what are they?

00:24:24.126 --> 00:24:25.596 A:middle
Well, don't bother because

00:24:25.716 --> 00:24:26.666 A:middle
they're deprecated.

00:24:28.356 --> 00:24:30.136 A:middle
Okay. And so two more things

00:24:31.706 --> 00:24:32.896 A:middle
before I hand the stage off to

00:24:32.896 --> 00:24:33.336 A:middle
Daphne.

00:24:33.596 --> 00:24:34.606 A:middle
First, Container Views.

00:24:34.966 --> 00:24:35.996 A:middle
So we have a number of Container

00:24:35.996 --> 00:24:38.106 A:middle
Views in Cocoa: NSBrowser,

00:24:38.106 --> 00:24:39.456 A:middle
TableView, OutlineView,

00:24:39.496 --> 00:24:41.226 A:middle
CollectionView, StackView, and

00:24:41.226 --> 00:24:41.686 A:middle
GridView.

00:24:42.036 --> 00:24:43.076 A:middle
And if you ever wondered how to

00:24:43.156 --> 00:24:44.216 A:middle
choose among these, we have a

00:24:44.216 --> 00:24:44.996 A:middle
talk for you.

00:24:45.596 --> 00:24:46.406 A:middle
Choosing the Right Cocoa

00:24:46.406 --> 00:24:48.466 A:middle
Container View this afternoon at

00:24:48.466 --> 00:24:48.966 A:middle
3:10.

00:24:49.666 --> 00:24:50.886 A:middle
So come here once and for all,

00:24:50.886 --> 00:24:52.136 A:middle
which one of these is the best

00:24:52.136 --> 00:24:52.716 A:middle
container view?

00:24:52.716 --> 00:24:54.266 A:middle
Or are there may be more than

00:24:54.266 --> 00:24:55.346 A:middle
one winner, of course.

00:24:55.916 --> 00:24:57.806 A:middle
Next, I have a question for you.

00:24:58.066 --> 00:25:00.116 A:middle
Have you ever tried to call

00:24:58.066 --> 00:25:00.116 A:middle
Have you ever tried to call

00:25:00.116 --> 00:25:01.416 A:middle
print when debugging your

00:25:01.416 --> 00:25:03.196 A:middle
application and instead of

00:25:03.196 --> 00:25:04.686 A:middle
displaying that object, that

00:25:04.726 --> 00:25:05.676 A:middle
darn object you're trying to

00:25:05.726 --> 00:25:06.736 A:middle
print, you get a panel like

00:25:06.836 --> 00:25:07.086 A:middle
this?

00:25:08.376 --> 00:25:09.496 A:middle
Some of you probably have.

00:25:09.666 --> 00:25:11.036 A:middle
So in the subclass of NSView,

00:25:11.036 --> 00:25:12.216 A:middle
print is ambiguous.

00:25:12.396 --> 00:25:13.886 A:middle
And it will hopefully try to get

00:25:13.886 --> 00:25:15.706 A:middle
you to print your app using, you

00:25:15.706 --> 00:25:16.616 A:middle
know, a piece of paper.

00:25:17.156 --> 00:25:18.296 A:middle
Now I'm not saying this was

00:25:18.296 --> 00:25:18.946 A:middle
terrible.

00:25:19.466 --> 00:25:20.596 A:middle
Walking away from the computer,

00:25:20.596 --> 00:25:21.836 A:middle
a few pieces of paper may be the

00:25:21.836 --> 00:25:23.086 A:middle
best way to debug a problem

00:25:23.086 --> 00:25:24.766 A:middle
sometimes, but it's often not

00:25:24.766 --> 00:25:25.636 A:middle
what you really wanted.

00:25:25.946 --> 00:25:27.076 A:middle
So we have an API change for

00:25:27.076 --> 00:25:27.436 A:middle
you.

00:25:28.266 --> 00:25:30.096 A:middle
NSWindow and NSView and

00:25:30.156 --> 00:25:31.146 A:middle
NSWindows print methods have

00:25:31.146 --> 00:25:32.696 A:middle
been renamed to printView and

00:25:32.696 --> 00:25:33.276 A:middle
printWindow.

00:25:33.736 --> 00:25:35.786 A:middle
So now this in Swift 4, so a tip

00:25:35.786 --> 00:25:37.896 A:middle
for you, migrate and profit.

00:25:38.596 --> 00:25:40.636 A:middle
Now speaking of tips, be sure to

00:25:40.636 --> 00:25:41.926 A:middle
head to this presentation Cocoa

00:25:41.926 --> 00:25:43.926 A:middle
Development Tips Friday morning

00:25:43.926 --> 00:25:45.876 A:middle
at 9:00 where you can hear many

00:25:45.876 --> 00:25:46.366 A:middle
more tips.

00:25:46.366 --> 00:25:48.376 A:middle
And really, frankly, I really

00:25:48.406 --> 00:25:49.426 A:middle
don't know how many because

00:25:49.426 --> 00:25:50.416 A:middle
we've lost count of how many

00:25:50.416 --> 00:25:51.006 A:middle
tips we have.

00:25:51.176 --> 00:25:52.406 A:middle
You can count on your own.

00:25:52.956 --> 00:25:53.816 A:middle
Now -- and we also want to give

00:25:53.816 --> 00:25:54.726 A:middle
you the opportunity to share

00:25:54.726 --> 00:25:56.116 A:middle
your own tips with everyone.

00:25:57.276 --> 00:25:59.186 A:middle
So if you know of any handy

00:25:59.186 --> 00:26:00.496 A:middle
Cocoa development tips to share

00:25:59.186 --> 00:26:00.496 A:middle
Cocoa development tips to share

00:26:00.496 --> 00:26:02.156 A:middle
with developers, please tweet

00:26:02.156 --> 00:26:04.736 A:middle
them using the #WWDC17 and

00:26:04.736 --> 00:26:05.386 A:middle
cocoatips.

00:26:05.806 --> 00:26:07.296 A:middle
And who knows, your tip may make

00:26:07.296 --> 00:26:08.466 A:middle
it into this presentation on

00:26:08.466 --> 00:26:08.826 A:middle
Friday.

00:26:09.196 --> 00:26:10.776 A:middle
So with that, I invite my

00:26:10.776 --> 00:26:12.036 A:middle
colleague Daphne on stage.

00:26:12.386 --> 00:26:12.636 A:middle
Thank you.

00:26:13.516 --> 00:26:17.176 A:middle
[ Applause ]

00:26:17.676 --> 00:26:19.476 A:middle
&gt;&gt; Hi. My name is Daphne Larose.

00:26:19.476 --> 00:26:20.586 A:middle
I'm an engineer on the

00:26:20.586 --> 00:26:21.656 A:middle
foundation team.

00:26:22.536 --> 00:26:23.986 A:middle
We'll start off by talking about

00:26:23.986 --> 00:26:25.766 A:middle
two of the new big things in

00:26:25.766 --> 00:26:26.456 A:middle
Foundation.

00:26:27.046 --> 00:26:28.146 A:middle
We have better support now for

00:26:28.146 --> 00:26:28.816 A:middle
Key Paths.

00:26:29.516 --> 00:26:30.666 A:middle
And we also have support for

00:26:30.666 --> 00:26:32.206 A:middle
encoding and decoding in Swift.

00:26:32.996 --> 00:26:33.946 A:middle
We'll start with Key Paths.

00:26:34.716 --> 00:26:35.946 A:middle
So we now have a new literal

00:26:35.946 --> 00:26:37.816 A:middle
syntax that's both type-safe and

00:26:37.816 --> 00:26:38.326 A:middle
performant.

00:26:38.886 --> 00:26:40.196 A:middle
Some of you are probably already

00:26:40.196 --> 00:26:42.136 A:middle
familiar with how it looks in

00:26:42.176 --> 00:26:42.746 A:middle
Swift 3.

00:26:44.206 --> 00:26:45.966 A:middle
Now, it's even simpler in Swift

00:26:45.966 --> 00:26:46.316 A:middle
4.

00:26:46.856 --> 00:26:49.336 A:middle
It has a backslash base type dot

00:26:49.336 --> 00:26:50.246 A:middle
and then the property name.

00:26:50.836 --> 00:26:51.956 A:middle
The simplicity of this has

00:26:51.956 --> 00:26:53.536 A:middle
enabled us to enhance some of

00:26:53.536 --> 00:26:55.496 A:middle
our pre-existing APIs, for

00:26:55.496 --> 00:26:56.616 A:middle
example KVO.

00:26:58.316 --> 00:27:00.436 A:middle
So, in this example here, we're

00:26:58.316 --> 00:27:00.436 A:middle
So, in this example here, we're

00:27:00.436 --> 00:27:01.936 A:middle
trying to observe a particular

00:27:01.936 --> 00:27:03.856 A:middle
property dog on the class

00:27:03.956 --> 00:27:04.556 A:middle
DogOwner.

00:27:04.966 --> 00:27:07.306 A:middle
And so before it was a lot more

00:27:07.396 --> 00:27:08.766 A:middle
set up involved, a lot more code

00:27:08.766 --> 00:27:09.626 A:middle
that you had to write.

00:27:10.436 --> 00:27:12.076 A:middle
Now, you can actually get a

00:27:12.076 --> 00:27:14.126 A:middle
block-based, closure-based

00:27:14.346 --> 00:27:18.196 A:middle
observation back that is much

00:27:18.236 --> 00:27:20.066 A:middle
cleaner, much simpler, only two

00:27:20.066 --> 00:27:21.426 A:middle
lines of code in this example.

00:27:21.886 --> 00:27:23.646 A:middle
And the simplicity of the syntax

00:27:24.056 --> 00:27:25.756 A:middle
makes the Key Paths a lot

00:27:25.756 --> 00:27:26.496 A:middle
simpler to use.

00:27:26.636 --> 00:27:27.766 A:middle
For encoding and decoding in

00:27:27.806 --> 00:27:29.736 A:middle
Swift, we now have support for

00:27:29.736 --> 00:27:31.336 A:middle
converting between your

00:27:31.336 --> 00:27:33.306 A:middle
type-safe Swift [inaudible] and

00:27:33.306 --> 00:27:34.956 A:middle
loser formats like JSON, P

00:27:34.956 --> 00:27:35.776 A:middle
lists, etcetera.

00:27:36.806 --> 00:27:38.946 A:middle
Deeply customizable so it's very

00:27:38.946 --> 00:27:40.046 A:middle
easy to make changes for your

00:27:40.046 --> 00:27:40.986 A:middle
own custom structs.

00:27:41.806 --> 00:27:43.316 A:middle
And it's incredibly easy to use.

00:27:43.586 --> 00:27:45.686 A:middle
So easy, actually, that all it

00:27:45.966 --> 00:27:47.546 A:middle
involves is just declaring your

00:27:47.546 --> 00:27:48.556 A:middle
struct as codable.

00:27:48.926 --> 00:27:49.886 A:middle
And so with doing this, you

00:27:49.886 --> 00:27:50.696 A:middle
don't have to write any

00:27:50.696 --> 00:27:51.566 A:middle
boilerplate code.

00:27:51.566 --> 00:27:52.436 A:middle
You don't have to do anything

00:27:52.436 --> 00:27:52.766 A:middle
extra.

00:27:53.216 --> 00:27:54.596 A:middle
You automatically gain

00:27:54.596 --> 00:27:56.536 A:middle
implementations for encoding and

00:27:56.536 --> 00:27:57.736 A:middle
decoding for free right

00:27:57.736 --> 00:28:00.776 A:middle
out-of-the-box.

00:27:57.736 --> 00:28:00.776 A:middle
out-of-the-box.

00:28:00.776 --> 00:28:01.736 A:middle
So as some of you are probably

00:28:01.736 --> 00:28:02.906 A:middle
well aware, we already have a

00:28:02.906 --> 00:28:04.236 A:middle
What's New in Foundation talk in

00:28:04.236 --> 00:28:06.886 A:middle
about two hours, which is pretty

00:28:06.886 --> 00:28:08.586 A:middle
great for us because it frees us

00:28:08.636 --> 00:28:10.586 A:middle
up to talk about what else is

00:28:10.586 --> 00:28:11.866 A:middle
new in Foundation.

00:28:12.106 --> 00:28:13.266 A:middle
So I'll go into it with a little

00:28:13.266 --> 00:28:13.766 A:middle
bit more detail.

00:28:14.826 --> 00:28:15.806 A:middle
So we have a lot of new API, a

00:28:15.806 --> 00:28:17.566 A:middle
lot of enhanced API that's

00:28:17.766 --> 00:28:20.256 A:middle
available on both macOS and iOS.

00:28:21.016 --> 00:28:21.486 A:middle
We'll start with

00:28:21.486 --> 00:28:23.006 A:middle
NSXPCConnection, which is

00:28:23.006 --> 00:28:24.756 A:middle
available on iOS, by the way.

00:28:25.286 --> 00:28:28.486 A:middle
It allows authors to publish

00:28:28.566 --> 00:28:30.406 A:middle
progress in a way that it didn't

00:28:30.406 --> 00:28:30.826 A:middle
before.

00:28:31.326 --> 00:28:32.566 A:middle
And so we have an example

00:28:32.566 --> 00:28:33.726 A:middle
protocol here that would be

00:28:33.726 --> 00:28:35.436 A:middle
shared by client and server.

00:28:35.936 --> 00:28:36.936 A:middle
Before it would just return

00:28:36.936 --> 00:28:37.376 A:middle
void.

00:28:37.906 --> 00:28:39.426 A:middle
Now it actually can return

00:28:39.566 --> 00:28:40.076 A:middle
NSProgress.

00:28:40.076 --> 00:28:41.756 A:middle
And what's nice about this is

00:28:41.756 --> 00:28:43.096 A:middle
that it allows the server to

00:28:43.096 --> 00:28:45.866 A:middle
return a progress to the client

00:28:45.946 --> 00:28:47.846 A:middle
even before it returns its

00:28:47.846 --> 00:28:48.196 A:middle
reply.

00:28:49.286 --> 00:28:50.956 A:middle
And so the client is actually

00:28:50.956 --> 00:28:52.616 A:middle
able to see these updates live

00:28:52.676 --> 00:28:54.000 A:middle
as they're happening.

00:28:54.846 --> 00:28:57.736 A:middle
[ Applause ]

00:28:58.236 --> 00:29:00.916 A:middle
URLSession now has a new Boolean

00:28:58.236 --> 00:29:00.916 A:middle
URLSession now has a new Boolean

00:29:00.916 --> 00:29:03.226 A:middle
property that allows URLSession

00:29:03.226 --> 00:29:05.336 A:middle
to actually monitor connectivity

00:29:05.336 --> 00:29:06.056 A:middle
on your behalf.

00:29:06.286 --> 00:29:08.736 A:middle
And so it'll wait to start your

00:29:08.736 --> 00:29:10.506 A:middle
URLSessionTasks until

00:29:10.506 --> 00:29:12.206 A:middle
connectivity is satisfactory.

00:29:12.516 --> 00:29:14.456 A:middle
So no more manual retries if

00:29:14.496 --> 00:29:15.856 A:middle
there's insufficient network.

00:29:15.856 --> 00:29:16.856 A:middle
You don't have to worry about

00:29:16.856 --> 00:29:17.436 A:middle
all of that.

00:29:17.436 --> 00:29:18.536 A:middle
Setting this property handles

00:29:18.536 --> 00:29:19.026 A:middle
that for you.

00:29:19.486 --> 00:29:20.726 A:middle
Now, if you choose not to set

00:29:20.726 --> 00:29:21.576 A:middle
it, that's fine.

00:29:21.576 --> 00:29:23.256 A:middle
That's your choice but it goes

00:29:23.256 --> 00:29:24.436 A:middle
back to the old behavior.

00:29:25.596 --> 00:29:27.526 A:middle
Multipath TCP is now available

00:29:27.526 --> 00:29:28.046 A:middle
on iOS.

00:29:28.916 --> 00:29:30.836 A:middle
And URLSessionTask, like

00:29:30.836 --> 00:29:32.816 A:middle
NSXPCConnection now supports

00:29:32.816 --> 00:29:33.556 A:middle
Progress Reporting.

00:29:34.116 --> 00:29:36.436 A:middle
We're going to be talking more

00:29:36.436 --> 00:29:38.536 A:middle
about that in part two of the

00:29:38.536 --> 00:29:39.816 A:middle
advances in networking talk.

00:29:39.816 --> 00:29:40.536 A:middle
That's later on today.

00:29:41.056 --> 00:29:41.976 A:middle
Part one is going to be pretty

00:29:41.976 --> 00:29:43.626 A:middle
awesome too so you might as well

00:29:44.146 --> 00:29:46.336 A:middle
check that out.

00:29:46.336 --> 00:29:48.816 A:middle
NSFileProviderService now has

00:29:48.816 --> 00:29:50.476 A:middle
support for more direct

00:29:50.476 --> 00:29:52.576 A:middle
communication between apps and

00:29:52.576 --> 00:29:53.346 A:middle
file providers.

00:29:53.806 --> 00:29:54.886 A:middle
File providers for those who

00:29:54.886 --> 00:29:56.616 A:middle
don't know are app extension

00:29:56.616 --> 00:29:58.056 A:middle
pairs that own and manage

00:29:58.106 --> 00:29:58.686 A:middle
documents.

00:29:59.026 --> 00:30:00.116 A:middle
They also sync those documents

00:29:59.026 --> 00:30:00.116 A:middle
They also sync those documents

00:30:00.116 --> 00:30:00.976 A:middle
up to private cloud services.

00:30:01.166 --> 00:30:03.046 A:middle
And they can make those

00:30:03.046 --> 00:30:04.386 A:middle
documents available for other

00:30:04.386 --> 00:30:04.556 A:middle
apps.

00:30:06.116 --> 00:30:08.216 A:middle
In this API, apps are now able

00:30:08.216 --> 00:30:10.186 A:middle
to more easily discover file

00:30:10.186 --> 00:30:11.396 A:middle
providers for any URL.

00:30:11.986 --> 00:30:13.366 A:middle
And they can use the specialized

00:30:13.366 --> 00:30:14.316 A:middle
services that these file

00:30:14.316 --> 00:30:15.236 A:middle
providers provide.

00:30:15.956 --> 00:30:16.786 A:middle
There's going to be a talk on

00:30:16.786 --> 00:30:17.676 A:middle
Friday for this.

00:30:17.786 --> 00:30:18.626 A:middle
So if you'd like more

00:30:18.626 --> 00:30:19.576 A:middle
information, you should check it

00:30:19.946 --> 00:30:20.000 A:middle
out.

00:30:21.646 --> 00:30:23.516 A:middle
So the nice thing is that the

00:30:23.516 --> 00:30:24.376 A:middle
changes we made for

00:30:24.496 --> 00:30:26.556 A:middle
NSXPCConnection and the changes

00:30:26.556 --> 00:30:27.726 A:middle
we made for URLSession are

00:30:27.726 --> 00:30:29.286 A:middle
actually all linked to the

00:30:29.286 --> 00:30:30.446 A:middle
changes we made in

00:30:30.486 --> 00:30:31.686 A:middle
NSFileProviderService.

00:30:31.686 --> 00:30:33.286 A:middle
And so to tie it all together,

00:30:33.576 --> 00:30:34.776 A:middle
we'll bring back this protocol

00:30:34.776 --> 00:30:35.596 A:middle
that we talked about earlier.

00:30:35.986 --> 00:30:38.016 A:middle
We have an app, our client, and

00:30:38.266 --> 00:30:39.386 A:middle
we have a file provider, our

00:30:39.386 --> 00:30:39.726 A:middle
server.

00:30:40.296 --> 00:30:41.566 A:middle
The app calls over to the file

00:30:41.566 --> 00:30:44.146 A:middle
provider, gets an NSProgress

00:30:44.976 --> 00:30:46.546 A:middle
object back.

00:30:46.766 --> 00:30:48.536 A:middle
File provider starts downloading

00:30:48.676 --> 00:30:50.136 A:middle
the file that was requested

00:30:50.366 --> 00:30:52.036 A:middle
using URLSession, [inaudible],

00:30:53.166 --> 00:30:54.526 A:middle
then updates the progress.

00:30:54.796 --> 00:30:56.486 A:middle
So now what's cool about this is

00:30:56.486 --> 00:30:58.076 A:middle
that the app is actually seeing

00:30:58.076 --> 00:31:00.106 A:middle
these updates as it's happening.

00:30:58.076 --> 00:31:00.106 A:middle
these updates as it's happening.

00:31:00.806 --> 00:31:01.726 A:middle
The download eventually

00:31:01.726 --> 00:31:03.676 A:middle
finishes, final update is sent,

00:31:04.206 --> 00:31:05.766 A:middle
and now the file provider is

00:31:05.766 --> 00:31:07.166 A:middle
able to reply with the requested

00:31:07.166 --> 00:31:07.386 A:middle
file.

00:31:08.796 --> 00:31:09.876 A:middle
So let's switch gears a little

00:31:09.876 --> 00:31:09.966 A:middle
bit.

00:31:10.506 --> 00:31:12.386 A:middle
We now have API for being able

00:31:12.386 --> 00:31:14.276 A:middle
to check the available storage

00:31:14.336 --> 00:31:16.306 A:middle
space more accurately and with a

00:31:16.306 --> 00:31:17.156 A:middle
sense of intent.

00:31:17.546 --> 00:31:19.576 A:middle
And so we see here important,

00:31:19.636 --> 00:31:22.276 A:middle
opportunistic, it's a little

00:31:22.626 --> 00:31:24.656 A:middle
unclear yet as to what that

00:31:24.656 --> 00:31:25.556 A:middle
specifically means.

00:31:25.556 --> 00:31:26.866 A:middle
So we'll talk in a little bit

00:31:26.866 --> 00:31:27.716 A:middle
more detail about it.

00:31:27.976 --> 00:31:29.876 A:middle
So let's say we have a volume

00:31:29.966 --> 00:31:32.006 A:middle
that has an arbitrary amount of

00:31:32.006 --> 00:31:32.806 A:middle
free disk space.

00:31:34.216 --> 00:31:36.276 A:middle
Opportunistic represents this

00:31:36.276 --> 00:31:39.566 A:middle
free space as well as any files

00:31:39.626 --> 00:31:40.826 A:middle
that the user doesn't

00:31:40.826 --> 00:31:42.326 A:middle
necessarily expect to be there.

00:31:42.516 --> 00:31:44.416 A:middle
So an example of that would be

00:31:44.416 --> 00:31:46.996 A:middle
an old episode of a podcast that

00:31:47.216 --> 00:31:48.296 A:middle
the user has already listened

00:31:48.296 --> 00:31:48.660 A:middle
to.

00:31:50.526 --> 00:31:52.746 A:middle
Important represents free and

00:31:52.866 --> 00:31:54.666 A:middle
opportunistic as well as any

00:31:54.726 --> 00:31:56.546 A:middle
files that the user does expect

00:31:56.546 --> 00:31:58.096 A:middle
to be there but is ultimately

00:31:58.096 --> 00:31:59.176 A:middle
replaceable and purgeable.

00:31:59.466 --> 00:32:00.876 A:middle
So an example of this would be

00:31:59.466 --> 00:32:00.876 A:middle
So an example of this would be

00:32:00.876 --> 00:32:02.286 A:middle
an audio file that the user

00:32:02.286 --> 00:32:03.416 A:middle
requested to download.

00:32:03.836 --> 00:32:05.056 A:middle
They expect it to be there.

00:32:05.056 --> 00:32:07.216 A:middle
However, if it needs to be

00:32:07.216 --> 00:32:08.946 A:middle
removed to make space, they can

00:32:09.066 --> 00:32:10.496 A:middle
also request to download it

00:32:11.116 --> 00:32:11.246 A:middle
again.

00:32:12.316 --> 00:32:13.856 A:middle
So what's nice about this is

00:32:13.856 --> 00:32:15.486 A:middle
y'all, as developers, are now

00:32:15.546 --> 00:32:16.936 A:middle
able to do preflight checks.

00:32:16.936 --> 00:32:18.736 A:middle
And so in this example, we

00:32:18.736 --> 00:32:19.556 A:middle
actually check how much

00:32:19.556 --> 00:32:20.656 A:middle
opportunistic space is

00:32:20.656 --> 00:32:21.256 A:middle
available.

00:32:21.466 --> 00:32:23.156 A:middle
And if it's above 50 Megs then

00:32:23.156 --> 00:32:24.886 A:middle
we go ahead and download an

00:32:24.886 --> 00:32:25.566 A:middle
additional file.

00:32:25.746 --> 00:32:26.616 A:middle
So what's nice about these

00:32:26.646 --> 00:32:28.166 A:middle
checks is that you can do them

00:32:28.166 --> 00:32:29.406 A:middle
beforehand before you actually

00:32:29.406 --> 00:32:30.766 A:middle
write a lot of data to disk.

00:32:31.336 --> 00:32:33.166 A:middle
And so what it's implying here

00:32:33.486 --> 00:32:35.506 A:middle
is it's checking hey, do we have

00:32:35.506 --> 00:32:37.636 A:middle
enough room to make room for the

00:32:37.636 --> 00:32:38.676 A:middle
file that we're actually about

00:32:38.676 --> 00:32:39.330 A:middle
to download?

00:32:41.516 --> 00:32:44.056 A:middle
So NSLinguisticTagger now has

00:32:44.056 --> 00:32:45.226 A:middle
support for tagging a unit.

00:32:45.606 --> 00:32:47.546 A:middle
So you can tag by word, by

00:32:47.826 --> 00:32:50.366 A:middle
sentence, by paragraph, and also

00:32:50.366 --> 00:32:50.756 A:middle
by lemma.

00:32:52.276 --> 00:32:53.436 A:middle
The API has been completely

00:32:53.436 --> 00:32:54.516 A:middle
redone and revamped.

00:32:55.086 --> 00:32:56.686 A:middle
And it now has some convenience

00:32:56.686 --> 00:32:58.036 A:middle
methods that include

00:32:58.036 --> 00:32:58.856 A:middle
dominantLanguage.

00:32:58.856 --> 00:33:00.306 A:middle
So now you can actually detect

00:32:58.856 --> 00:33:00.306 A:middle
So now you can actually detect

00:33:00.306 --> 00:33:01.656 A:middle
the dominantLanguage of a given

00:33:01.656 --> 00:33:01.946 A:middle
string.

00:33:02.986 --> 00:33:04.696 A:middle
JSONSerialization supports

00:33:04.726 --> 00:33:05.346 A:middle
sorted keys.

00:33:05.346 --> 00:33:06.636 A:middle
So now let's say we have a

00:33:06.636 --> 00:33:08.556 A:middle
dictionary that has an arbitrary

00:33:08.556 --> 00:33:09.816 A:middle
set of keys and values.

00:33:10.726 --> 00:33:11.956 A:middle
When you serialize this

00:33:12.036 --> 00:33:13.486 A:middle
dictionary and then print it,

00:33:13.746 --> 00:33:14.556 A:middle
the keys are printed in

00:33:14.556 --> 00:33:15.416 A:middle
arbitrary order.

00:33:16.156 --> 00:33:17.096 A:middle
But now you can add this

00:33:17.096 --> 00:33:18.916 A:middle
sortedKeys option and have them

00:33:18.916 --> 00:33:19.676 A:middle
print in order.

00:33:19.806 --> 00:33:22.016 A:middle
And so a huge use case for this

00:33:22.016 --> 00:33:24.196 A:middle
is being able to dif JSON files.

00:33:24.266 --> 00:33:26.226 A:middle
It makes for much better

00:33:26.226 --> 00:33:28.416 A:middle
readability and it's just much

00:33:28.596 --> 00:33:29.116 A:middle
nicer.

00:33:29.186 --> 00:33:30.526 A:middle
And this was a highly requested

00:33:30.526 --> 00:33:31.616 A:middle
feature, so we're really happy

00:33:31.616 --> 00:33:32.986 A:middle
to be able to provide it to you

00:33:32.986 --> 00:33:33.206 A:middle
guys.

00:33:34.516 --> 00:33:38.026 A:middle
[ Applause ]

00:33:38.526 --> 00:33:40.016 A:middle
NSItemProvider now makes its

00:33:40.016 --> 00:33:41.626 A:middle
operations more explicit.

00:33:42.116 --> 00:33:43.586 A:middle
It also supports progress

00:33:43.586 --> 00:33:46.116 A:middle
reporting like NSXPCConnection

00:33:46.116 --> 00:33:47.036 A:middle
and URLSession.

00:33:47.366 --> 00:33:48.476 A:middle
You're probably seeing a trend

00:33:48.476 --> 00:33:48.706 A:middle
here.

00:33:49.246 --> 00:33:50.676 A:middle
It also allows you to enhance

00:33:50.676 --> 00:33:52.166 A:middle
your custom classes to work with

00:33:52.166 --> 00:33:53.976 A:middle
multiple representations, for

00:33:53.976 --> 00:33:54.636 A:middle
example data.

00:33:56.046 --> 00:33:57.466 A:middle
So a lot of the efforts put into

00:33:57.466 --> 00:33:58.706 A:middle
this API, this release, were

00:33:58.706 --> 00:34:00.586 A:middle
actually motivated by the new

00:33:58.706 --> 00:34:00.586 A:middle
actually motivated by the new

00:34:00.586 --> 00:34:01.266 A:middle
support we have for

00:34:01.266 --> 00:34:02.356 A:middle
drag-and-drop on iOS.

00:34:02.766 --> 00:34:03.506 A:middle
And so if you want to learn

00:34:03.506 --> 00:34:05.506 A:middle
about that, you can check out

00:34:05.506 --> 00:34:06.330 A:middle
the talk on Thursday.

00:34:08.436 --> 00:34:09.755 A:middle
NSUserActivity already had a

00:34:09.755 --> 00:34:12.466 A:middle
property for webpageURL but now

00:34:12.525 --> 00:34:13.976 A:middle
you can actually specify the

00:34:13.976 --> 00:34:15.516 A:middle
link that referred to that

00:34:15.516 --> 00:34:16.985 A:middle
webpageURL, which is really

00:34:17.356 --> 00:34:17.686 A:middle
convenient.

00:34:18.716 --> 00:34:21.226 A:middle
We now have added new available

00:34:21.226 --> 00:34:22.775 A:middle
APIs to several of our classes

00:34:22.826 --> 00:34:23.876 A:middle
which allows for better error

00:34:23.876 --> 00:34:25.886 A:middle
handling as well as convenience

00:34:25.886 --> 00:34:27.755 A:middle
methods that take URLs rather

00:34:27.755 --> 00:34:28.416 A:middle
than strings.

00:34:28.896 --> 00:34:30.406 A:middle
And so as an example on the

00:34:30.406 --> 00:34:32.235 A:middle
[inaudible], NSTasks, you see it

00:34:32.235 --> 00:34:34.676 A:middle
takes a URL as well as returns

00:34:34.676 --> 00:34:35.585 A:middle
an NSError.

00:34:35.946 --> 00:34:39.156 A:middle
And so 4, in process, it throws

00:34:39.156 --> 00:34:40.686 A:middle
rather than raises an exception.

00:34:42.556 --> 00:34:46.815 A:middle
For NSDictionary and NSArray,

00:34:46.815 --> 00:34:49.856 A:middle
there were already methods that

00:34:49.856 --> 00:34:52.016 A:middle
handled errors, but now we have

00:34:52.016 --> 00:34:53.735 A:middle
these convenience methods that

00:34:53.735 --> 00:34:55.755 A:middle
are just much easier to use and

00:34:55.755 --> 00:34:57.256 A:middle
much cleaner and help you do the

00:34:57.256 --> 00:34:58.576 A:middle
right thing from jump, which is

00:34:59.306 --> 00:34:59.426 A:middle
nice.

00:35:00.756 --> 00:35:02.986 A:middle
We have a new key in NSError

00:35:02.986 --> 00:35:05.656 A:middle
that enables you to display the

00:35:05.656 --> 00:35:06.526 A:middle
error in a way that's more

00:35:06.526 --> 00:35:07.796 A:middle
relevant to the user.

00:35:07.796 --> 00:35:09.206 A:middle
So you're able to customize the

00:35:09.206 --> 00:35:10.526 A:middle
"what failed" while still

00:35:10.526 --> 00:35:11.836 A:middle
keeping the "why it failed".

00:35:11.836 --> 00:35:13.026 A:middle
And so to kind of give an

00:35:13.026 --> 00:35:15.476 A:middle
example of this, this error

00:35:15.476 --> 00:35:17.506 A:middle
message, super decent message.

00:35:17.506 --> 00:35:19.026 A:middle
However, it has some information

00:35:19.026 --> 00:35:20.286 A:middle
that may not necessarily be

00:35:20.456 --> 00:35:21.716 A:middle
particularly relevant to the

00:35:21.716 --> 00:35:22.166 A:middle
user.

00:35:22.166 --> 00:35:24.506 A:middle
For example, ImgDatabaseV2, to

00:35:25.076 --> 00:35:26.006 A:middle
them that really could mean

00:35:26.006 --> 00:35:26.626 A:middle
anything, right?

00:35:26.626 --> 00:35:29.536 A:middle
And so now with this new key,

00:35:29.536 --> 00:35:30.506 A:middle
you can actually give them an

00:35:30.506 --> 00:35:31.866 A:middle
error that still conveys the

00:35:31.926 --> 00:35:33.836 A:middle
same message, the same error,

00:35:34.066 --> 00:35:35.896 A:middle
but it's in a way more palatable

00:35:35.896 --> 00:35:36.776 A:middle
and more understandable to the

00:35:36.776 --> 00:35:37.000 A:middle
user.

00:35:39.716 --> 00:35:41.576 A:middle
We now are able to convert

00:35:41.746 --> 00:35:43.256 A:middle
between NSRanges and Swift

00:35:43.256 --> 00:35:44.656 A:middle
ranges much more easily.

00:35:44.996 --> 00:35:47.626 A:middle
And so in this example, yeah,

00:35:47.626 --> 00:35:48.346 A:middle
all right.

00:35:49.106 --> 00:35:50.596 A:middle
In this example, we're using

00:35:50.806 --> 00:35:52.906 A:middle
NSRegularExpression, which only

00:35:52.906 --> 00:35:53.856 A:middle
takes an NSRange.

00:35:53.856 --> 00:35:55.306 A:middle
And so now we have an

00:35:55.306 --> 00:35:57.166 A:middle
initializer on NSRange that

00:35:57.166 --> 00:35:58.586 A:middle
takes a Swift range and a Swift

00:35:58.586 --> 00:35:58.966 A:middle
string.

00:35:59.686 --> 00:36:01.216 A:middle
And, on the flip side, we have

00:35:59.686 --> 00:36:01.216 A:middle
And, on the flip side, we have

00:36:01.216 --> 00:36:02.536 A:middle
an initializer and range that

00:36:02.536 --> 00:36:04.066 A:middle
takes an NSRange and the same

00:36:04.066 --> 00:36:04.596 A:middle
Swift string.

00:36:05.036 --> 00:36:06.766 A:middle
So, as you can see here, much

00:36:06.836 --> 00:36:07.646 A:middle
cleaner, much easier.

00:36:07.646 --> 00:36:09.236 A:middle
And for those who have had to

00:36:09.286 --> 00:36:10.626 A:middle
suffer through writing around

00:36:10.626 --> 00:36:12.146 A:middle
this, I hope this is making you

00:36:12.146 --> 00:36:13.826 A:middle
smile because it's pretty great.

00:36:14.356 --> 00:36:16.646 A:middle
We have a lot of performance

00:36:16.646 --> 00:36:18.036 A:middle
improvements this release in

00:36:18.036 --> 00:36:18.916 A:middle
Foundation, which is pretty

00:36:18.916 --> 00:36:19.326 A:middle
exciting.

00:36:19.896 --> 00:36:21.066 A:middle
So we now have support for

00:36:21.066 --> 00:36:22.676 A:middle
Copy-on-write and several of our

00:36:22.676 --> 00:36:23.586 A:middle
collections.

00:36:23.686 --> 00:36:25.166 A:middle
What this means is that the copy

00:36:25.166 --> 00:36:26.536 A:middle
has been moved from the initial

00:36:26.536 --> 00:36:28.676 A:middle
creation of the collection to

00:36:28.906 --> 00:36:29.986 A:middle
the first time the collection

00:36:29.986 --> 00:36:30.976 A:middle
actually gets mutated.

00:36:30.976 --> 00:36:33.396 A:middle
It makes for a much faster

00:36:33.736 --> 00:36:35.836 A:middle
creation and you can just kind

00:36:35.836 --> 00:36:36.736 A:middle
of create them and throw them

00:36:36.736 --> 00:36:38.006 A:middle
away as you need.

00:36:38.676 --> 00:36:40.396 A:middle
Data is now inlined in your apps

00:36:40.926 --> 00:36:41.926 A:middle
making it much faster.

00:36:42.196 --> 00:36:43.756 A:middle
And it's been generally sped up

00:36:43.876 --> 00:36:45.376 A:middle
and it's now also its own

00:36:45.376 --> 00:36:46.846 A:middle
subsequence type.

00:36:47.576 --> 00:36:49.806 A:middle
Calendrical calculations with

00:36:50.136 --> 00:36:52.526 A:middle
NSCalendar is now much faster

00:36:52.526 --> 00:36:54.596 A:middle
and much more accurate and also

00:36:54.596 --> 00:36:56.416 A:middle
overall take significantly less

00:36:56.516 --> 00:36:56.976 A:middle
memory.

00:36:58.536 --> 00:37:00.386 A:middle
We also support a faster

00:36:58.536 --> 00:37:00.386 A:middle
We also support a faster

00:37:00.386 --> 00:37:02.186 A:middle
bridging of NSNumber to and from

00:37:02.186 --> 00:37:02.516 A:middle
Swift.

00:37:03.136 --> 00:37:04.526 A:middle
And so we have a talk on Friday

00:37:04.526 --> 00:37:06.156 A:middle
at 1:15 that's going to do a

00:37:06.156 --> 00:37:06.936 A:middle
deep dive of these.

00:37:06.936 --> 00:37:07.886 A:middle
I highly recommend that you

00:37:07.886 --> 00:37:09.556 A:middle
check it out.

00:37:10.106 --> 00:37:11.636 A:middle
So I'm sure a lot of you are

00:37:11.636 --> 00:37:13.146 A:middle
aware NSArchiver and

00:37:13.526 --> 00:37:15.556 A:middle
NSUnarchiver were replaced in

00:37:15.556 --> 00:37:16.276 A:middle
10.4.

00:37:16.276 --> 00:37:17.256 A:middle
They've now been formally

00:37:17.256 --> 00:37:18.086 A:middle
deprecated.

00:37:18.406 --> 00:37:19.936 A:middle
However, old formats are still

00:37:19.936 --> 00:37:20.466 A:middle
supported.

00:37:20.516 --> 00:37:22.046 A:middle
So you can still unarchive using

00:37:22.106 --> 00:37:23.026 A:middle
NSUnarchiver.

00:37:23.496 --> 00:37:25.786 A:middle
However, on behalf of the Cocoa

00:37:25.786 --> 00:37:27.456 A:middle
frameworks department, we are

00:37:27.456 --> 00:37:28.946 A:middle
requesting that you now use

00:37:29.356 --> 00:37:30.856 A:middle
NSKeyedArchiver from now on.

00:37:30.916 --> 00:37:33.746 A:middle
Thanks. Core Data now has some

00:37:33.746 --> 00:37:35.416 A:middle
new indexing features as well as

00:37:35.466 --> 00:37:37.036 A:middle
support for persistent history.

00:37:37.586 --> 00:37:38.646 A:middle
Course Spotlight is now

00:37:38.646 --> 00:37:39.686 A:middle
available on macOS.

00:37:39.686 --> 00:37:41.146 A:middle
And Thermal Notifications are

00:37:41.146 --> 00:37:41.986 A:middle
available on iOS.

00:37:42.716 --> 00:37:44.766 A:middle
And so they'll be covering a lot

00:37:44.766 --> 00:37:46.516 A:middle
more detail on these in the

00:37:46.746 --> 00:37:48.306 A:middle
talks that are happening later

00:37:48.306 --> 00:37:48.776 A:middle
this week.

00:37:49.056 --> 00:37:50.416 A:middle
Actually, Core Data's talk is

00:37:50.416 --> 00:37:51.326 A:middle
right after this one.

00:37:52.096 --> 00:37:53.206 A:middle
So you'll have to use your

00:37:53.206 --> 00:37:53.956 A:middle
[inaudible] against you can be

00:37:53.956 --> 00:37:55.376 A:middle
at the Touch Bar talk and that

00:37:55.416 --> 00:37:55.636 A:middle
one.

00:37:56.996 --> 00:37:58.986 A:middle
And just to wrap up, Ali served

00:37:59.016 --> 00:38:01.466 A:middle
you the appetizer of API

00:37:59.016 --> 00:38:01.466 A:middle
you the appetizer of API

00:38:01.466 --> 00:38:03.056 A:middle
refinements and the first main

00:38:03.056 --> 00:38:03.826 A:middle
course of AppKit.

00:38:04.236 --> 00:38:05.446 A:middle
I served you the second,

00:38:05.446 --> 00:38:06.126 A:middle
Foundation.

00:38:06.776 --> 00:38:07.786 A:middle
And for dessert, I'm going to

00:38:07.786 --> 00:38:09.096 A:middle
tell you about the release notes

00:38:09.096 --> 00:38:10.496 A:middle
and recommend that you check

00:38:10.496 --> 00:38:12.526 A:middle
them out to get a lot more

00:38:12.526 --> 00:38:14.426 A:middle
sample code and detailed

00:38:14.426 --> 00:38:15.656 A:middle
explanations of a lot of the

00:38:15.656 --> 00:38:17.046 A:middle
changes and enhancements that we

00:38:17.046 --> 00:38:17.956 A:middle
made this release.

00:38:18.486 --> 00:38:19.586 A:middle
And so for more information, you

00:38:19.586 --> 00:38:20.586 A:middle
can check out this link.

00:38:21.306 --> 00:38:22.646 A:middle
And just another quick reminder

00:38:22.646 --> 00:38:23.876 A:middle
to tweet your tips.

00:38:24.116 --> 00:38:25.936 A:middle
There's a possibility that yours

00:38:25.936 --> 00:38:27.546 A:middle
might end up showing up in the

00:38:27.546 --> 00:38:28.776 A:middle
talk on Friday, which is pretty

00:38:28.776 --> 00:38:29.306 A:middle
exciting.

00:38:30.456 --> 00:38:31.286 A:middle
And here's some related

00:38:31.286 --> 00:38:32.296 A:middle
sessions, a lot of which we

00:38:32.296 --> 00:38:33.486 A:middle
already covered in this talk.

00:38:34.186 --> 00:38:35.306 A:middle
Thank you for your time.

00:38:35.846 --> 00:38:39.500 A:middle
[ Applause ]
