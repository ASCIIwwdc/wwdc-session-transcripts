WEBVTT

00:00:26.516 --> 00:00:31.266 A:middle
[ Applause ]

00:00:31.766 --> 00:00:32.306 A:middle
&gt;&gt; Jeff Tu: Good afternoon,

00:00:32.306 --> 00:00:32.746 A:middle
everyone.

00:00:32.876 --> 00:00:34.116 A:middle
I'd like to welcome to you part

00:00:34.116 --> 00:00:35.996 A:middle
two to Advances in Networking, a

00:00:35.996 --> 00:00:37.356 A:middle
continuation of the session from

00:00:37.356 --> 00:00:38.166 A:middle
the past hour.

00:00:38.956 --> 00:00:40.466 A:middle
My name is Jeff Tu, and I'll be

00:00:40.466 --> 00:00:41.326 A:middle
taking you through the first

00:00:41.326 --> 00:00:41.500 A:middle
topic.

00:00:44.516 --> 00:00:45.936 A:middle
In this session we'll discuss

00:00:45.936 --> 00:00:47.856 A:middle
new URLSession developer API and

00:00:47.856 --> 00:00:49.736 A:middle
enhancements, networking best

00:00:49.736 --> 00:00:51.386 A:middle
practices, and other important

00:00:51.386 --> 00:00:53.000 A:middle
technology areas in networking.

00:00:56.066 --> 00:00:57.516 A:middle
Our first topic is new

00:00:57.516 --> 00:00:58.446 A:middle
URLSession API.

00:00:59.386 --> 00:01:02.556 A:middle
But before that, I'd like to

00:01:02.556 --> 00:01:04.086 A:middle
review the underlying API we'll

00:01:04.086 --> 00:01:05.396 A:middle
be talking about, which is

00:01:05.396 --> 00:01:06.226 A:middle
URLSession.

00:01:07.106 --> 00:01:09.086 A:middle
URLSession is an easy-to-use API

00:01:09.206 --> 00:01:11.176 A:middle
for networking introduced in iOS

00:01:11.176 --> 00:01:12.676 A:middle
7 and OS X Mavericks.

00:01:13.736 --> 00:01:15.236 A:middle
URLSession supports networking

00:01:15.266 --> 00:01:18.816 A:middle
protocols like HTTP/2; HTTP/1.1;

00:01:19.156 --> 00:01:21.646 A:middle
FTP; and custom streams with an

00:01:21.646 --> 00:01:23.756 A:middle
overall emphasis on URL loading.

00:01:24.126 --> 00:01:26.976 A:middle
If you provide it an HTTPS URL,

00:01:27.276 --> 00:01:29.096 A:middle
it also automatically provides

00:01:29.096 --> 00:01:30.906 A:middle
the encryption and decryption of

00:01:30.906 --> 00:01:32.636 A:middle
data between you and the web

00:01:32.636 --> 00:01:32.956 A:middle
server.

00:01:34.286 --> 00:01:35.726 A:middle
Last year we deprecated

00:01:35.866 --> 00:01:36.846 A:middle
NSURLConnection API.

00:01:36.846 --> 00:01:39.476 A:middle
So we encourage any new app

00:01:39.476 --> 00:01:40.596 A:middle
development to occur with

00:01:40.596 --> 00:01:41.416 A:middle
URLSession.

00:01:42.136 --> 00:01:43.486 A:middle
For more information on

00:01:43.486 --> 00:01:44.946 A:middle
URLSession, I encourage you to

00:01:44.946 --> 00:01:47.356 A:middle
review past WWDC sessions and

00:01:47.356 --> 00:01:48.726 A:middle
other online documentation.

00:01:51.936 --> 00:01:53.336 A:middle
Recall that there are different

00:01:53.336 --> 00:01:54.916 A:middle
kinds of URLSession objects that

00:01:54.916 --> 00:01:55.576 A:middle
you can create.

00:01:56.446 --> 00:01:57.896 A:middle
The basic object you can create

00:01:57.966 --> 00:01:59.556 A:middle
is a default configuration

00:01:59.676 --> 00:02:01.126 A:middle
URLSession object.

00:02:02.096 --> 00:02:03.786 A:middle
Default sessions have a behavior

00:02:03.906 --> 00:02:05.616 A:middle
where a task either fetches a

00:02:05.616 --> 00:02:07.896 A:middle
URL immediately; or if the

00:02:07.896 --> 00:02:09.036 A:middle
device can't connect to the web

00:02:09.106 --> 00:02:10.616 A:middle
server, fails immediately.

00:02:11.646 --> 00:02:13.106 A:middle
URL loads can fail because the

00:02:13.106 --> 00:02:14.316 A:middle
device isn't connected to the

00:02:14.316 --> 00:02:15.686 A:middle
Internet or if the server you're

00:02:15.686 --> 00:02:16.826 A:middle
trying to reach happens to be

00:02:16.826 --> 00:02:17.296 A:middle
down.

00:02:18.236 --> 00:02:19.386 A:middle
Those are just a couple of

00:02:19.386 --> 00:02:19.946 A:middle
examples.

00:02:21.146 --> 00:02:22.836 A:middle
Background URLSession objects,

00:02:22.836 --> 00:02:24.506 A:middle
on the other hand, don't have

00:02:24.506 --> 00:02:25.656 A:middle
this immediate fetch or fail

00:02:25.656 --> 00:02:27.256 A:middle
behavior but are scheduled out

00:02:27.256 --> 00:02:28.976 A:middle
of process and continually

00:02:28.976 --> 00:02:30.096 A:middle
monitored for network

00:02:30.346 --> 00:02:31.626 A:middle
connectivity to the server.

00:02:34.436 --> 00:02:36.386 A:middle
There are more examples of a

00:02:36.386 --> 00:02:37.926 A:middle
URLSession task failing because

00:02:37.926 --> 00:02:38.876 A:middle
of bad connectivity.

00:02:39.816 --> 00:02:40.736 A:middle
You might have no Internet

00:02:40.736 --> 00:02:42.556 A:middle
connection, you might be in a

00:02:42.606 --> 00:02:43.666 A:middle
theatre with your device in

00:02:43.666 --> 00:02:45.056 A:middle
Airplane Mode or it should be in

00:02:45.056 --> 00:02:45.626 A:middle
Airplane Mode.

00:02:46.756 --> 00:02:47.776 A:middle
Perhaps you have a session

00:02:47.776 --> 00:02:49.196 A:middle
object where you've disallowed

00:02:49.196 --> 00:02:51.246 A:middle
cell usage but the user only has

00:02:51.246 --> 00:02:52.036 A:middle
cell connectivity.

00:02:52.986 --> 00:02:54.236 A:middle
Or the server might only be

00:02:54.236 --> 00:02:55.726 A:middle
accessible behind a VPN and the

00:02:55.726 --> 00:02:57.406 A:middle
admin recently changed VPN

00:02:57.406 --> 00:02:58.000 A:middle
access.

00:03:01.206 --> 00:03:02.686 A:middle
How do you as an app developer

00:03:02.686 --> 00:03:03.896 A:middle
deal with a network load that

00:03:03.976 --> 00:03:04.476 A:middle
fails?

00:03:05.696 --> 00:03:08.366 A:middle
In the past, we've advised you

00:03:08.366 --> 00:03:10.096 A:middle
to use the SCNetworkReachability

00:03:10.096 --> 00:03:11.576 A:middle
API to monitor when you might

00:03:11.576 --> 00:03:13.116 A:middle
have connectivity again to the

00:03:13.176 --> 00:03:13.566 A:middle
server.

00:03:14.406 --> 00:03:16.006 A:middle
Other approaches are polling

00:03:16.006 --> 00:03:17.856 A:middle
every set period of time or

00:03:17.856 --> 00:03:19.636 A:middle
depending on the user to tap or

00:03:19.636 --> 00:03:21.186 A:middle
drag to refresh the UI.

00:03:22.246 --> 00:03:23.786 A:middle
The problem is that these

00:03:23.786 --> 00:03:25.196 A:middle
approaches add complexity to

00:03:25.196 --> 00:03:26.646 A:middle
your apps and aren't always

00:03:26.646 --> 00:03:27.146 A:middle
effective.

00:03:28.226 --> 00:03:30.256 A:middle
SCNetworkReachability only tells

00:03:30.256 --> 00:03:31.606 A:middle
you that you might be able to

00:03:31.606 --> 00:03:32.936 A:middle
reach the server, not that you

00:03:32.936 --> 00:03:33.276 A:middle
will.

00:03:34.256 --> 00:03:35.616 A:middle
You, our developers, have been

00:03:35.616 --> 00:03:37.000 A:middle
asking for an easier solution.

00:03:39.536 --> 00:03:41.066 A:middle
Wouldn't it be easier to say,

00:03:41.066 --> 00:03:42.956 A:middle
then, "Please fetch me this

00:03:42.956 --> 00:03:44.746 A:middle
resource when the network is

00:03:44.746 --> 00:03:45.366 A:middle
available"?

00:03:48.756 --> 00:03:50.016 A:middle
We're happy to tell you about a

00:03:50.016 --> 00:03:51.126 A:middle
new feature that lets you do

00:03:51.126 --> 00:03:51.436 A:middle
this.

00:03:51.886 --> 00:03:53.396 A:middle
We call this the URLSession

00:03:53.466 --> 00:03:55.036 A:middle
Adaptable Connectivity API.

00:03:56.246 --> 00:03:56.486 A:middle
This --

00:03:57.516 --> 00:04:01.936 A:middle
[ Applause ]

00:04:02.436 --> 00:04:04.706 A:middle
This API is available now on all

00:04:04.706 --> 00:04:05.256 A:middle
platforms.

00:04:07.476 --> 00:04:09.626 A:middle
By opting into this API, you

00:04:09.626 --> 00:04:11.316 A:middle
tell URLSession that in the

00:04:11.316 --> 00:04:13.156 A:middle
event that the task would fail

00:04:13.156 --> 00:04:13.936 A:middle
because of a lack of

00:04:13.936 --> 00:04:15.746 A:middle
connectivity that it should wait

00:04:15.746 --> 00:04:17.176 A:middle
for a connection to the server

00:04:17.176 --> 00:04:18.416 A:middle
instead of failing.

00:04:21.546 --> 00:04:22.436 A:middle
How do you opt in?

00:04:22.766 --> 00:04:24.286 A:middle
There's a new boolean property

00:04:24.286 --> 00:04:26.056 A:middle
called waitsForConnectivity.

00:04:26.826 --> 00:04:28.296 A:middle
Set this to true, and then you

00:04:28.296 --> 00:04:29.246 A:middle
get the new behavior.

00:04:30.226 --> 00:04:31.746 A:middle
I'd like to repeat what this

00:04:31.746 --> 00:04:32.496 A:middle
property does.

00:04:33.056 --> 00:04:34.566 A:middle
You go from the default behavior

00:04:34.566 --> 00:04:36.466 A:middle
of load it now or fail now if I

00:04:36.466 --> 00:04:38.976 A:middle
can't connect to load it now,

00:04:39.306 --> 00:04:40.366 A:middle
but if I can't and would have

00:04:40.366 --> 00:04:42.206 A:middle
failed because of a lack of

00:04:42.206 --> 00:04:44.146 A:middle
connectivity, try again when I

00:04:44.146 --> 00:04:45.426 A:middle
get a real chance to talk to the

00:04:45.426 --> 00:04:45.816 A:middle
server.

00:04:46.526 --> 00:04:48.896 A:middle
The API also waits when it

00:04:48.896 --> 00:04:50.556 A:middle
encounters DNS failures as well

00:04:50.686 --> 00:04:52.426 A:middle
since one network's DNS service

00:04:52.426 --> 00:04:53.986 A:middle
might fail to resolve but

00:04:53.986 --> 00:04:55.946 A:middle
another one may not.

00:04:56.576 --> 00:04:59.046 A:middle
Please note that this boolean is

00:04:59.046 --> 00:05:00.776 A:middle
a no op for background sessions,

00:05:00.776 --> 00:05:02.916 A:middle
as background URLSession objects

00:05:02.916 --> 00:05:04.366 A:middle
get this behavior automatically.

00:05:04.986 --> 00:05:05.966 A:middle
We'll tell you later in this

00:05:05.966 --> 00:05:09.000 A:middle
hour more about the differences.

00:05:11.016 --> 00:05:12.526 A:middle
You may be wondering, "Can my

00:05:12.646 --> 00:05:14.146 A:middle
code get a notification if it's

00:05:14.146 --> 00:05:15.276 A:middle
in this waiting state?"

00:05:15.376 --> 00:05:18.556 A:middle
You might want to have the app

00:05:18.556 --> 00:05:19.836 A:middle
present other behavior while

00:05:19.836 --> 00:05:20.686 A:middle
it's waiting to connect.

00:05:20.936 --> 00:05:22.826 A:middle
For example, having an offline

00:05:22.826 --> 00:05:24.376 A:middle
browsing mode or a mode that

00:05:24.376 --> 00:05:25.946 A:middle
operates when the user is only

00:05:25.946 --> 00:05:26.660 A:middle
on cell.

00:05:29.436 --> 00:05:30.786 A:middle
If you would like to know when

00:05:30.786 --> 00:05:32.076 A:middle
your app is in this waiting

00:05:32.076 --> 00:05:33.766 A:middle
state, you can optionally

00:05:33.766 --> 00:05:35.246 A:middle
implement the URLSession

00:05:35.286 --> 00:05:37.176 A:middle
taskIsWaitingForConnectivity

00:05:37.176 --> 00:05:38.086 A:middle
delegate method.

00:05:39.106 --> 00:05:40.446 A:middle
Note that this delegate method

00:05:40.446 --> 00:05:42.776 A:middle
is only called if you've opted

00:05:42.776 --> 00:05:43.866 A:middle
into the waitsForConnectivity

00:05:43.866 --> 00:05:45.096 A:middle
property with a true value.

00:05:45.806 --> 00:05:47.446 A:middle
If you've done this, the

00:05:47.446 --> 00:05:48.636 A:middle
delegate method itself will be

00:05:48.636 --> 00:05:50.386 A:middle
called only one time or not at

00:05:50.386 --> 00:05:52.256 A:middle
all if the task never had to

00:05:53.016 --> 00:05:53.126 A:middle
wait.

00:05:56.896 --> 00:05:58.566 A:middle
We recommend that your apps

00:05:58.706 --> 00:05:59.726 A:middle
always opt into the

00:05:59.726 --> 00:06:01.046 A:middle
waitsForConnectivity property.

00:06:01.816 --> 00:06:03.306 A:middle
This is because even when you

00:06:03.306 --> 00:06:05.386 A:middle
opt in, the task will still try

00:06:05.386 --> 00:06:06.156 A:middle
to run immediately.

00:06:06.696 --> 00:06:08.106 A:middle
The task will only wait if it

00:06:08.106 --> 00:06:09.146 A:middle
can't connect to the server.

00:06:09.986 --> 00:06:11.146 A:middle
There are rare exceptions to

00:06:11.146 --> 00:06:12.126 A:middle
opting into the property,

00:06:12.126 --> 00:06:12.396 A:middle
though.

00:06:13.126 --> 00:06:14.366 A:middle
For example, if you had a

00:06:14.366 --> 00:06:15.796 A:middle
URLSession task whose purpose

00:06:15.796 --> 00:06:16.916 A:middle
was to buy stock at market

00:06:16.916 --> 00:06:18.516 A:middle
price, you'd want that to run

00:06:18.516 --> 00:06:20.476 A:middle
now or fail now and not wait

00:06:20.476 --> 00:06:22.746 A:middle
until you had an Internet

00:06:23.066 --> 00:06:23.576 A:middle
connection.

00:06:24.556 --> 00:06:26.656 A:middle
I'd also like to mention that

00:06:26.656 --> 00:06:27.376 A:middle
when you opt into

00:06:27.376 --> 00:06:29.236 A:middle
waitsForConnectivity, the

00:06:29.236 --> 00:06:30.796 A:middle
timeout interval for request

00:06:31.086 --> 00:06:33.186 A:middle
timer starts only after you've

00:06:33.226 --> 00:06:34.256 A:middle
connected to the server.

00:06:35.066 --> 00:06:36.756 A:middle
Timeout interval for resource,

00:06:36.756 --> 00:06:38.456 A:middle
however, is always respected.

00:06:39.026 --> 00:06:43.746 A:middle
Let's summarize how we would use

00:06:43.746 --> 00:06:45.326 A:middle
the API and then go through a

00:06:45.326 --> 00:06:45.976 A:middle
code example.

00:06:47.326 --> 00:06:48.956 A:middle
The main thing is to opt into

00:06:48.956 --> 00:06:49.856 A:middle
the waitsForConnectivity

00:06:49.856 --> 00:06:50.336 A:middle
property.

00:06:50.956 --> 00:06:52.286 A:middle
You would create and resume the

00:06:52.286 --> 00:06:53.646 A:middle
URLSessionTask as before.

00:06:54.666 --> 00:06:56.216 A:middle
If the device can't connect to

00:06:56.216 --> 00:06:57.946 A:middle
the server, we'd call a delegate

00:06:57.946 --> 00:06:59.656 A:middle
callback if you implemented it

00:06:59.796 --> 00:07:00.636 A:middle
and only once.

00:07:02.116 --> 00:07:03.756 A:middle
All other URLSession methods are

00:07:03.756 --> 00:07:05.436 A:middle
still called same as before.

00:07:06.496 --> 00:07:08.016 A:middle
Remember, though, that this API

00:07:08.016 --> 00:07:09.316 A:middle
only has an effect for

00:07:09.316 --> 00:07:10.660 A:middle
non-background sessions.

00:07:14.636 --> 00:07:15.826 A:middle
Let's go through a sample code.

00:07:17.186 --> 00:07:18.846 A:middle
First create a session

00:07:18.846 --> 00:07:20.756 A:middle
configuration object and make

00:07:20.756 --> 00:07:24.886 A:middle
one for default session type.

00:07:25.086 --> 00:07:25.756 A:middle
Opt into the

00:07:25.756 --> 00:07:27.056 A:middle
waitsForConnectivity property.

00:07:29.536 --> 00:07:31.286 A:middle
Create the session object and

00:07:31.286 --> 00:07:32.736 A:middle
set the URL you want to load.

00:07:33.366 --> 00:07:37.276 A:middle
Use the session object to create

00:07:37.276 --> 00:07:38.046 A:middle
a task object.

00:07:41.976 --> 00:07:43.606 A:middle
And finally, resume the task to

00:07:43.606 --> 00:07:44.000 A:middle
get it started.

00:07:50.156 --> 00:07:51.346 A:middle
Even with adaptable

00:07:51.346 --> 00:07:52.936 A:middle
connectivity, your request may

00:07:52.936 --> 00:07:54.396 A:middle
still fail for other reasons.

00:07:55.126 --> 00:07:56.736 A:middle
For example, you could connect

00:07:56.736 --> 00:07:58.846 A:middle
to the server, but a new data

00:07:58.846 --> 00:08:00.856 A:middle
center employee might unplug a

00:08:00.856 --> 00:08:02.016 A:middle
server, cause the network

00:08:02.016 --> 00:08:03.086 A:middle
connection to drop, and all your

00:08:03.086 --> 00:08:03.946 A:middle
apps on your phone might

00:08:04.086 --> 00:08:04.660 A:middle
disappear.

00:08:06.666 --> 00:08:08.416 A:middle
Or your device connects to the

00:08:08.466 --> 00:08:10.826 A:middle
server and sends an HTTP

00:08:10.826 --> 00:08:12.226 A:middle
request, but there's so much

00:08:12.226 --> 00:08:13.476 A:middle
traffic that the request times

00:08:13.476 --> 00:08:13.706 A:middle
out.

00:08:14.926 --> 00:08:16.446 A:middle
For situations like these, we'd

00:08:16.446 --> 00:08:17.536 A:middle
like you to consult online

00:08:17.536 --> 00:08:19.696 A:middle
resources that go into more

00:08:19.696 --> 00:08:20.776 A:middle
detail on what you can do.

00:08:22.136 --> 00:08:23.336 A:middle
Retrying network loads in a

00:08:23.336 --> 00:08:24.786 A:middle
tight loop, though, is almost

00:08:24.786 --> 00:08:25.746 A:middle
always a bad idea.

00:08:25.876 --> 00:08:30.876 A:middle
You asked for a better way to

00:08:30.876 --> 00:08:32.116 A:middle
load network resources.

00:08:32.526 --> 00:08:33.846 A:middle
Better than polling for network

00:08:33.846 --> 00:08:35.556 A:middle
connectivity to the server and

00:08:35.556 --> 00:08:36.776 A:middle
better than reachability API

00:08:36.906 --> 00:08:37.876 A:middle
that won't guarantee a

00:08:37.876 --> 00:08:38.906 A:middle
connection to the server.

00:08:40.266 --> 00:08:42.596 A:middle
Let URLSession do the work for

00:08:42.596 --> 00:08:42.836 A:middle
you.

00:08:43.626 --> 00:08:44.476 A:middle
Opt into the

00:08:44.476 --> 00:08:46.116 A:middle
waitsForConnectivity Adaptable

00:08:46.116 --> 00:08:47.056 A:middle
Connectivity API.

00:08:47.686 --> 00:08:49.746 A:middle
If you opt in, the request will

00:08:49.746 --> 00:08:51.516 A:middle
still run immediately with no

00:08:51.516 --> 00:08:53.786 A:middle
performance penalty and only

00:08:53.786 --> 00:08:55.056 A:middle
wait if you can't connect to the

00:08:55.056 --> 00:08:55.476 A:middle
server.

00:08:56.366 --> 00:08:57.756 A:middle
Once it can connect, your

00:08:57.756 --> 00:08:59.396 A:middle
URLSession task behaves just

00:08:59.396 --> 00:09:00.106 A:middle
like it did before.

00:09:02.326 --> 00:09:03.566 A:middle
Continuing our theme of what's

00:09:03.566 --> 00:09:05.126 A:middle
new, I'd like to pass the mic to

00:09:05.126 --> 00:09:06.336 A:middle
my colleague, Jeff Jenkins.

00:09:07.516 --> 00:09:13.016 A:middle
[ Applause ]

00:09:13.516 --> 00:09:14.166 A:middle
&gt;&gt; Jeff Jenkins: Thanks, Jeff.

00:09:15.586 --> 00:09:16.646 A:middle
Well, good afternoon.

00:09:16.686 --> 00:09:17.836 A:middle
Hope you guys are having a great

00:09:17.836 --> 00:09:18.736 A:middle
WWDC.

00:09:18.736 --> 00:09:20.556 A:middle
And I'm exciting to be here and

00:09:20.556 --> 00:09:21.966 A:middle
thrilled to talk to you a little

00:09:21.966 --> 00:09:24.296 A:middle
bit more about some enhancements

00:09:24.296 --> 00:09:27.946 A:middle
we've made to the URLSessionTask

00:09:28.196 --> 00:09:29.000 A:middle
API.

00:09:32.106 --> 00:09:33.606 A:middle
Now, first I want to spend a

00:09:33.606 --> 00:09:34.956 A:middle
little bit of time talking about

00:09:34.956 --> 00:09:37.056 A:middle
background URLSession.

00:09:37.056 --> 00:09:38.036 A:middle
We haven't talked a whole lot

00:09:38.036 --> 00:09:39.156 A:middle
about it, so let me give you a

00:09:39.156 --> 00:09:40.616 A:middle
little bit of background on

00:09:40.616 --> 00:09:40.846 A:middle
that.

00:09:41.246 --> 00:09:42.516 A:middle
The background session

00:09:42.876 --> 00:09:45.716 A:middle
URLSession API allows your

00:09:45.716 --> 00:09:47.086 A:middle
application to perform

00:09:47.086 --> 00:09:49.266 A:middle
networking even if your process,

00:09:49.266 --> 00:09:50.796 A:middle
your application isn't running.

00:09:51.926 --> 00:09:53.696 A:middle
We monitor the system

00:09:53.936 --> 00:09:57.286 A:middle
conditions, CPU, battery, all

00:09:57.286 --> 00:09:59.136 A:middle
sorts of things to really find

00:09:59.136 --> 00:10:01.146 A:middle
of right time to do your

00:10:01.146 --> 00:10:02.496 A:middle
networking tasks.

00:10:03.186 --> 00:10:05.866 A:middle
Now, of course, if you implement

00:10:05.866 --> 00:10:07.786 A:middle
various delegate methods, we're

00:10:07.786 --> 00:10:09.456 A:middle
going to wake up your app and

00:10:09.456 --> 00:10:10.946 A:middle
call those delegate callbacks so

00:10:10.946 --> 00:10:11.976 A:middle
that you can handle that

00:10:11.976 --> 00:10:12.816 A:middle
information.

00:10:13.286 --> 00:10:14.326 A:middle
And, of course, we're going to

00:10:14.326 --> 00:10:15.936 A:middle
make sure your app is running

00:10:16.376 --> 00:10:17.706 A:middle
when your task completes so that

00:10:17.706 --> 00:10:19.316 A:middle
you can then process that data.

00:10:19.316 --> 00:10:24.546 A:middle
Now, one of the great use cases

00:10:24.696 --> 00:10:26.556 A:middle
for background URLSession is

00:10:26.556 --> 00:10:28.106 A:middle
taking advantage of another

00:10:28.516 --> 00:10:30.186 A:middle
feature on the system, which is

00:10:30.496 --> 00:10:32.376 A:middle
background app refresh.

00:10:33.176 --> 00:10:34.716 A:middle
Now, what this really does is

00:10:34.716 --> 00:10:36.876 A:middle
allows your application to have

00:10:36.876 --> 00:10:38.766 A:middle
the most current, the freshest

00:10:38.766 --> 00:10:39.206 A:middle
data, right?

00:10:39.546 --> 00:10:41.166 A:middle
There's nothing more frustrating

00:10:41.576 --> 00:10:42.936 A:middle
than pulling your device out,

00:10:43.136 --> 00:10:44.456 A:middle
launching an app, and the first

00:10:44.456 --> 00:10:45.426 A:middle
thing you're greeted with is

00:10:45.426 --> 00:10:47.476 A:middle
some sort of spinner, right?

00:10:47.476 --> 00:10:48.326 A:middle
You're waiting for this

00:10:48.326 --> 00:10:50.036 A:middle
application to start pulling

00:10:50.036 --> 00:10:50.586 A:middle
down data.

00:10:50.996 --> 00:10:52.416 A:middle
You want that data right away.

00:10:52.416 --> 00:10:53.456 A:middle
You want to be able to get that

00:10:53.456 --> 00:10:55.116 A:middle
data to your user so your user

00:10:55.466 --> 00:10:57.296 A:middle
is excited and happy to use your

00:10:57.296 --> 00:10:57.566 A:middle
app.

00:10:58.106 --> 00:10:59.486 A:middle
Background app refresh is a way

00:10:59.486 --> 00:10:59.806 A:middle
to do this.

00:10:59.806 --> 00:11:01.316 A:middle
It's a way to tell the system

00:11:01.756 --> 00:11:03.286 A:middle
that, "Hey, in the future I want

00:11:03.286 --> 00:11:04.296 A:middle
to be able to be launched so

00:11:04.296 --> 00:11:05.886 A:middle
that I can refresh my data so I

00:11:05.886 --> 00:11:06.766 A:middle
have the most important

00:11:06.766 --> 00:11:08.046 A:middle
information," maybe stock

00:11:08.046 --> 00:11:09.756 A:middle
information, or weather

00:11:09.836 --> 00:11:11.396 A:middle
forecast, other important things

00:11:11.396 --> 00:11:12.356 A:middle
that your app does.

00:11:13.166 --> 00:11:13.996 A:middle
Now, this applies to

00:11:13.996 --> 00:11:16.566 A:middle
applications, as well as watchOS

00:11:16.666 --> 00:11:18.096 A:middle
complications.

00:11:18.426 --> 00:11:19.166 A:middle
And if you want to learn a

00:11:19.166 --> 00:11:20.256 A:middle
little bit more in depth about

00:11:20.256 --> 00:11:22.706 A:middle
background app refresh, you can

00:11:22.706 --> 00:11:26.256 A:middle
go back to 2013 WWDC, as well as

00:11:26.256 --> 00:11:28.996 A:middle
last year's 2016 WWDC and look

00:11:28.996 --> 00:11:30.136 A:middle
at these sessions for more

00:11:30.136 --> 00:11:30.816 A:middle
details.

00:11:31.296 --> 00:11:35.786 A:middle
So let's look at background app

00:11:35.786 --> 00:11:37.986 A:middle
refresh in action; what is it

00:11:37.986 --> 00:11:38.766 A:middle
really doing?

00:11:39.496 --> 00:11:41.246 A:middle
And to do that, we kind of need

00:11:41.246 --> 00:11:42.896 A:middle
to look at the state of your

00:11:43.176 --> 00:11:44.026 A:middle
application.

00:11:44.366 --> 00:11:45.876 A:middle
We're interested in three states

00:11:45.876 --> 00:11:47.476 A:middle
here: A running state, suspended

00:11:47.476 --> 00:11:49.626 A:middle
state, or a background state.

00:11:50.666 --> 00:11:52.786 A:middle
Now, with your app running,

00:11:52.786 --> 00:11:53.616 A:middle
you're going to opt into

00:11:53.616 --> 00:11:54.936 A:middle
background app refresh.

00:11:54.936 --> 00:11:55.756 A:middle
You're going to say, "In the

00:11:55.756 --> 00:11:57.816 A:middle
future, run my app, make sure my

00:11:57.816 --> 00:11:58.936 A:middle
app runs so that I can get the

00:11:58.936 --> 00:12:00.056 A:middle
latest information."

00:12:00.556 --> 00:12:02.216 A:middle
And then your process could be

00:12:02.216 --> 00:12:02.846 A:middle
suspended.

00:12:02.846 --> 00:12:04.846 A:middle
And in the future your process

00:12:04.846 --> 00:12:07.036 A:middle
is now running, your app is now

00:12:07.606 --> 00:12:09.486 A:middle
going to be able to ask for new

00:12:09.486 --> 00:12:09.796 A:middle
data.

00:12:09.796 --> 00:12:12.396 A:middle
And like good developers, this

00:12:12.396 --> 00:12:14.076 A:middle
app is using URLSession API.

00:12:14.246 --> 00:12:15.866 A:middle
In fact, it uses a background

00:12:15.866 --> 00:12:16.596 A:middle
URLSession.

00:12:16.596 --> 00:12:19.046 A:middle
It creates a URLSession task and

00:12:19.046 --> 00:12:21.446 A:middle
schedules this task to run and

00:12:21.446 --> 00:12:22.456 A:middle
grab the data that your

00:12:22.456 --> 00:12:23.576 A:middle
application needs.

00:12:25.396 --> 00:12:28.626 A:middle
Now, your process could go away

00:12:28.626 --> 00:12:30.226 A:middle
at this point, but then at some

00:12:30.226 --> 00:12:32.126 A:middle
point URLSession is going to run

00:12:32.126 --> 00:12:33.216 A:middle
your task and it's going to run

00:12:33.216 --> 00:12:34.636 A:middle
it to completion hopefully if

00:12:34.636 --> 00:12:35.566 A:middle
everything goes well.

00:12:36.046 --> 00:12:36.726 A:middle
And you're going to get the

00:12:36.726 --> 00:12:37.136 A:middle
data.

00:12:37.136 --> 00:12:38.556 A:middle
So we're going to background

00:12:38.556 --> 00:12:40.406 A:middle
launch your application and

00:12:40.406 --> 00:12:41.696 A:middle
allow you to process that

00:12:41.696 --> 00:12:43.936 A:middle
completed task and process that

00:12:43.936 --> 00:12:45.456 A:middle
data that we've fetched for you.

00:12:45.826 --> 00:12:48.856 A:middle
And then at some point the user

00:12:48.856 --> 00:12:49.886 A:middle
is going to launch your app,

00:12:49.886 --> 00:12:50.826 A:middle
it's going to come foreground,

00:12:50.826 --> 00:12:51.746 A:middle
and boom, they've got the

00:12:51.746 --> 00:12:53.016 A:middle
freshest data there.

00:12:53.436 --> 00:12:54.226 A:middle
So this is great.

00:12:54.606 --> 00:12:56.756 A:middle
But we looked at this flow and

00:12:56.756 --> 00:12:57.936 A:middle
said, "Hmm, maybe there's

00:12:57.936 --> 00:13:00.236 A:middle
something we can do to help our

00:13:00.236 --> 00:13:02.116 A:middle
developers improve their

00:13:02.116 --> 00:13:04.386 A:middle
applications on our platforms."

00:13:05.026 --> 00:13:06.756 A:middle
And we think we can do something

00:13:06.756 --> 00:13:07.236 A:middle
for you.

00:13:08.596 --> 00:13:10.746 A:middle
The first problem that we want

00:13:10.746 --> 00:13:13.006 A:middle
to solve is we noticed there's

00:13:13.006 --> 00:13:14.836 A:middle
an extra background launch that

00:13:14.836 --> 00:13:16.186 A:middle
had to happen just for you to

00:13:16.186 --> 00:13:18.166 A:middle
create the URLSession task.

00:13:19.026 --> 00:13:20.466 A:middle
And as we all know, anytime your

00:13:20.466 --> 00:13:21.666 A:middle
process is launched, what does

00:13:21.666 --> 00:13:21.976 A:middle
that do?

00:13:21.976 --> 00:13:23.696 A:middle
It impacts battery life,

00:13:24.116 --> 00:13:25.456 A:middle
requires CPU burden.

00:13:25.456 --> 00:13:27.306 A:middle
So that's not necessarily great

00:13:27.306 --> 00:13:28.316 A:middle
for the device if we're doing

00:13:28.366 --> 00:13:30.226 A:middle
extraneous work, and we really

00:13:30.226 --> 00:13:31.846 A:middle
don't need to be doing that.

00:13:32.936 --> 00:13:34.366 A:middle
The other problem we'd like to

00:13:34.366 --> 00:13:36.146 A:middle
solve are stale network

00:13:36.146 --> 00:13:37.066 A:middle
requests, right?

00:13:37.066 --> 00:13:38.996 A:middle
You're asking URLSession to do

00:13:38.996 --> 00:13:39.446 A:middle
work.

00:13:39.446 --> 00:13:40.906 A:middle
And at some point in the future,

00:13:41.396 --> 00:13:42.686 A:middle
that work is going to complete.

00:13:43.126 --> 00:13:44.766 A:middle
Well, what happens between when

00:13:44.766 --> 00:13:46.036 A:middle
you ask for the work to be done

00:13:46.036 --> 00:13:47.356 A:middle
and when it actually got done?

00:13:47.356 --> 00:13:48.796 A:middle
Maybe there was some change in

00:13:48.796 --> 00:13:50.796 A:middle
context and that original

00:13:50.796 --> 00:13:52.046 A:middle
request doesn't make sense

00:13:52.046 --> 00:13:52.576 A:middle
anymore.

00:13:53.216 --> 00:13:53.956 A:middle
So we need to give you an

00:13:53.956 --> 00:13:55.976 A:middle
opportunity to really, if

00:13:56.026 --> 00:13:57.436 A:middle
there's a context change, let us

00:13:57.436 --> 00:13:59.426 A:middle
know about that and get rid of

00:13:59.426 --> 00:14:01.226 A:middle
these stale network requests.

00:14:01.226 --> 00:14:02.146 A:middle
Because there's nothing worse

00:14:02.146 --> 00:14:03.406 A:middle
than getting data and going, "I

00:14:03.406 --> 00:14:04.376 A:middle
can't do anything with it," and

00:14:04.376 --> 00:14:04.936 A:middle
throw it away.

00:14:05.626 --> 00:14:08.356 A:middle
And the last problem we think we

00:14:08.356 --> 00:14:10.886 A:middle
could help you with is helping

00:14:10.886 --> 00:14:13.556 A:middle
us know how to best schedule

00:14:13.836 --> 00:14:15.596 A:middle
your URLSession tasks.

00:14:16.126 --> 00:14:17.906 A:middle
When is the most optimal, best

00:14:17.906 --> 00:14:19.236 A:middle
time in the system to be able to

00:14:19.236 --> 00:14:20.606 A:middle
run your task so that we can get

00:14:20.606 --> 00:14:21.686 A:middle
your data in the most efficient

00:14:21.686 --> 00:14:23.986 A:middle
way for you to display that so

00:14:23.986 --> 00:14:25.376 A:middle
that your users are excited and

00:14:25.376 --> 00:14:26.346 A:middle
delighted by that data?

00:14:26.346 --> 00:14:29.036 A:middle
Let's look at what we did.

00:14:30.536 --> 00:14:32.206 A:middle
We're introducing the

00:14:32.206 --> 00:14:34.336 A:middle
URLSessionTask scheduling API.

00:14:35.406 --> 00:14:37.216 A:middle
Now, this is available across

00:14:37.216 --> 00:14:38.156 A:middle
all of our platforms.

00:14:38.156 --> 00:14:39.956 A:middle
It's available in the beta

00:14:39.956 --> 00:14:41.296 A:middle
builds that you have received

00:14:41.296 --> 00:14:41.916 A:middle
here at WWDC.

00:14:41.916 --> 00:14:44.566 A:middle
And we encourage you to take a

00:14:44.566 --> 00:14:45.656 A:middle
deep look at this.

00:14:46.516 --> 00:14:49.716 A:middle
Now, what we've done first is we

00:14:49.716 --> 00:14:51.346 A:middle
provided a new property.

00:14:51.556 --> 00:14:52.876 A:middle
This is a property on

00:14:52.876 --> 00:14:54.506 A:middle
URLSessionTask object.

00:14:55.066 --> 00:14:57.456 A:middle
It is called earliestBeginDate.

00:14:58.366 --> 00:14:59.406 A:middle
And what you're going to do here

00:14:59.406 --> 00:15:01.116 A:middle
is provide a date to us in the

00:15:01.116 --> 00:15:03.336 A:middle
future when you want your task

00:15:03.406 --> 00:15:05.586 A:middle
to be eligible for running.

00:15:05.896 --> 00:15:08.266 A:middle
I use that word eligible because

00:15:08.266 --> 00:15:09.016 A:middle
it's important.

00:15:09.016 --> 00:15:10.176 A:middle
It doesn't mean that this is the

00:15:10.176 --> 00:15:11.576 A:middle
point in time when your task

00:15:11.686 --> 00:15:13.486 A:middle
will run, it will do networking;

00:15:13.856 --> 00:15:15.586 A:middle
it's just telling the system, "I

00:15:15.586 --> 00:15:16.706 A:middle
would like my task to be

00:15:16.766 --> 00:15:18.486 A:middle
eligible so that it can run."

00:15:18.796 --> 00:15:20.646 A:middle
And we're still bound by system

00:15:20.646 --> 00:15:23.046 A:middle
policies as to when we can make

00:15:23.046 --> 00:15:25.256 A:middle
the networking happen for this

00:15:25.256 --> 00:15:25.816 A:middle
task.

00:15:26.896 --> 00:15:28.546 A:middle
It's only applicable to

00:15:28.686 --> 00:15:31.326 A:middle
background URLSessions and tasks

00:15:31.326 --> 00:15:33.166 A:middle
built off of background

00:15:33.166 --> 00:15:33.876 A:middle
URLSession.

00:15:34.406 --> 00:15:37.896 A:middle
Let's take a look at how this

00:15:37.946 --> 00:15:39.626 A:middle
property in conjunction with

00:15:39.666 --> 00:15:41.586 A:middle
other existing properties really

00:15:41.586 --> 00:15:43.446 A:middle
allows you to do some fine-grain

00:15:43.446 --> 00:15:44.046 A:middle
scheduling.

00:15:44.606 --> 00:15:46.356 A:middle
So you'll create a

00:15:46.356 --> 00:15:47.776 A:middle
URLSessionTask and, of course,

00:15:47.776 --> 00:15:49.336 A:middle
you'll call resume on it so that

00:15:49.336 --> 00:15:50.796 A:middle
we know that this task can now

00:15:50.796 --> 00:15:53.456 A:middle
be put into the queue so that

00:15:53.456 --> 00:15:54.566 A:middle
work can happen.

00:15:55.206 --> 00:15:57.396 A:middle
You'll -- and at this point the

00:15:57.806 --> 00:16:00.756 A:middle
task will be in a waiting state.

00:16:00.756 --> 00:16:01.486 A:middle
We're waiting for the

00:16:01.566 --> 00:16:03.526 A:middle
earliestBeginDate to happen.

00:16:04.136 --> 00:16:06.506 A:middle
And as soon as that is hit, that

00:16:06.506 --> 00:16:07.836 A:middle
task becomes eligible for

00:16:07.836 --> 00:16:08.116 A:middle
running.

00:16:09.156 --> 00:16:10.516 A:middle
Now, you can use the existing

00:16:10.706 --> 00:16:13.386 A:middle
timeoutIntervalForResource to

00:16:13.386 --> 00:16:15.546 A:middle
really control how long your app

00:16:15.546 --> 00:16:17.326 A:middle
is willing to wait for at that

00:16:17.326 --> 00:16:19.506 A:middle
resource to get loaded, right?

00:16:19.506 --> 00:16:21.596 A:middle
You might set some amount of

00:16:21.596 --> 00:16:23.366 A:middle
time to say, "After this point

00:16:23.526 --> 00:16:25.466 A:middle
in time, this resource isn't

00:16:25.466 --> 00:16:26.706 A:middle
interesting to me anymore."

00:16:27.136 --> 00:16:28.926 A:middle
And that interval of time covers

00:16:29.156 --> 00:16:32.426 A:middle
from resume to when that timeout

00:16:32.426 --> 00:16:34.246 A:middle
happens based on the value you

00:16:34.246 --> 00:16:34.856 A:middle
place in

00:16:34.856 --> 00:16:36.396 A:middle
timeoutIntervalForResource.

00:16:36.716 --> 00:16:41.526 A:middle
Now, I want to go back to the

00:16:41.526 --> 00:16:43.736 A:middle
original background app refresh

00:16:43.736 --> 00:16:45.276 A:middle
workflow that we looked at

00:16:45.276 --> 00:16:45.746 A:middle
earlier.

00:16:46.546 --> 00:16:47.316 A:middle
Right? We noticed there was a

00:16:47.316 --> 00:16:49.676 A:middle
couple of background launches

00:16:49.676 --> 00:16:50.366 A:middle
that occurred.

00:16:50.736 --> 00:16:54.066 A:middle
But with this new API we're able

00:16:54.066 --> 00:16:55.426 A:middle
to get rid of one of those.

00:16:55.426 --> 00:16:56.336 A:middle
So the way that your app will

00:16:56.336 --> 00:16:58.396 A:middle
work is while your running,

00:16:58.466 --> 00:16:59.146 A:middle
you're going to create a

00:16:59.146 --> 00:17:01.616 A:middle
URLSessionTask; you'll opt into

00:17:01.906 --> 00:17:03.606 A:middle
our new scheduling API by

00:17:03.606 --> 00:17:05.376 A:middle
setting an earliestBeginDate;

00:17:05.936 --> 00:17:07.016 A:middle
then your process can go to

00:17:07.016 --> 00:17:07.416 A:middle
sleep.

00:17:07.716 --> 00:17:08.776 A:middle
We're going to complete the work

00:17:08.776 --> 00:17:09.366 A:middle
for you.

00:17:09.956 --> 00:17:11.406 A:middle
And when that work is available,

00:17:11.406 --> 00:17:12.726 A:middle
we're going to background launch

00:17:12.726 --> 00:17:14.196 A:middle
you that one time and allow you

00:17:14.196 --> 00:17:16.136 A:middle
to process the resulting data.

00:17:16.136 --> 00:17:18.486 A:middle
And then when the user brings

00:17:18.486 --> 00:17:19.556 A:middle
your app to the foreground,

00:17:19.556 --> 00:17:21.216 A:middle
boom, it's got the freshest,

00:17:21.416 --> 00:17:22.416 A:middle
most current data.

00:17:23.096 --> 00:17:24.626 A:middle
And we've been able to solve

00:17:24.626 --> 00:17:26.106 A:middle
that one problem of that

00:17:26.106 --> 00:17:27.796 A:middle
additional background app

00:17:27.796 --> 00:17:28.256 A:middle
launch.

00:17:28.256 --> 00:17:29.716 A:middle
And so it's better performing on

00:17:29.716 --> 00:17:30.916 A:middle
the system, and we think that's

00:17:30.916 --> 00:17:31.346 A:middle
great.

00:17:31.846 --> 00:17:35.016 A:middle
So that's problem number one

00:17:35.306 --> 00:17:35.766 A:middle
solved.

00:17:35.766 --> 00:17:36.736 A:middle
Let's look at problem number

00:17:36.736 --> 00:17:40.660 A:middle
two, the stale network fetches.

00:17:42.296 --> 00:17:43.296 A:middle
We want to give you an

00:17:43.296 --> 00:17:45.316 A:middle
opportunity to alter future

00:17:45.316 --> 00:17:45.936 A:middle
requests.

00:17:45.936 --> 00:17:47.046 A:middle
So you might have given us a

00:17:47.046 --> 00:17:49.316 A:middle
request, but the context might

00:17:49.316 --> 00:17:49.916 A:middle
change.

00:17:50.956 --> 00:17:53.856 A:middle
We've introduced a new delegate

00:17:53.856 --> 00:17:55.326 A:middle
callback on a

00:17:55.326 --> 00:17:57.356 A:middle
URLSessionTaskDelegate titled

00:17:57.796 --> 00:18:00.136 A:middle
willBeginDelayedRequest.

00:18:01.406 --> 00:18:03.596 A:middle
With this delegate, you'll be

00:18:03.596 --> 00:18:05.506 A:middle
able to be called at the moment

00:18:05.506 --> 00:18:07.136 A:middle
when your task is about to start

00:18:07.136 --> 00:18:07.736 A:middle
networking.

00:18:08.226 --> 00:18:10.416 A:middle
So it is you've told this that

00:18:10.416 --> 00:18:12.346 A:middle
the task is eligible and the

00:18:12.346 --> 00:18:14.066 A:middle
system now has decided yes, this

00:18:14.066 --> 00:18:15.026 A:middle
is the right time to do the

00:18:15.026 --> 00:18:15.686 A:middle
networking.

00:18:16.116 --> 00:18:17.096 A:middle
We're going to call this

00:18:17.096 --> 00:18:18.216 A:middle
delegate method, if you

00:18:18.216 --> 00:18:20.076 A:middle
implement it, and allow you to

00:18:20.076 --> 00:18:22.436 A:middle
make some decisions about this

00:18:22.436 --> 00:18:23.036 A:middle
task.

00:18:24.986 --> 00:18:26.256 A:middle
Now, this will only be called

00:18:26.256 --> 00:18:27.966 A:middle
one, if you implement it; also,

00:18:27.966 --> 00:18:29.546 A:middle
if you opt into the scheduling

00:18:29.546 --> 00:18:30.736 A:middle
API by setting an

00:18:30.736 --> 00:18:32.046 A:middle
earliestBeginDate.

00:18:32.366 --> 00:18:33.706 A:middle
And, again, this is only

00:18:33.706 --> 00:18:35.116 A:middle
available on background

00:18:35.116 --> 00:18:36.026 A:middle
URLSessions.

00:18:36.566 --> 00:18:39.526 A:middle
And as I mentioned, this is an

00:18:39.526 --> 00:18:40.556 A:middle
optional delegate.

00:18:40.996 --> 00:18:42.806 A:middle
And I want to take a second here

00:18:42.806 --> 00:18:44.016 A:middle
to have you really think about

00:18:44.046 --> 00:18:45.336 A:middle
this because it's important,

00:18:46.036 --> 00:18:47.136 A:middle
this delegate method.

00:18:47.136 --> 00:18:48.656 A:middle
As with all delegate methods,

00:18:48.656 --> 00:18:49.786 A:middle
they're all opt into.

00:18:50.246 --> 00:18:52.776 A:middle
But this one will cause some

00:18:52.846 --> 00:18:53.926 A:middle
interesting side effect that

00:18:53.926 --> 00:18:54.986 A:middle
I'll show you in a minute.

00:18:55.606 --> 00:18:56.586 A:middle
You really need to think about,

00:18:56.676 --> 00:18:58.356 A:middle
"Can my application determine

00:18:58.356 --> 00:19:00.456 A:middle
context, the viability of a

00:19:00.456 --> 00:19:02.396 A:middle
request in the future?"

00:19:02.906 --> 00:19:06.986 A:middle
Now, there's a completion

00:19:06.986 --> 00:19:08.726 A:middle
handler that's passed to this

00:19:08.726 --> 00:19:09.546 A:middle
delegate method.

00:19:10.256 --> 00:19:10.986 A:middle
And you need to give a

00:19:10.986 --> 00:19:12.516 A:middle
disposition to URLSession.

00:19:12.516 --> 00:19:14.456 A:middle
You need to tell us does the

00:19:14.456 --> 00:19:16.276 A:middle
original request, does it still

00:19:16.276 --> 00:19:17.566 A:middle
make sense?

00:19:17.826 --> 00:19:18.756 A:middle
Go ahead and proceed.

00:19:19.226 --> 00:19:21.336 A:middle
Or maybe the context has changed

00:19:21.336 --> 00:19:22.826 A:middle
enough and you need to make some

00:19:22.826 --> 00:19:24.396 A:middle
modifications, maybe a different

00:19:24.396 --> 00:19:26.596 A:middle
URL or maybe a header value's

00:19:26.596 --> 00:19:27.906 A:middle
different and you want to go

00:19:27.906 --> 00:19:29.326 A:middle
ahead and modify that request at

00:19:29.326 --> 00:19:30.736 A:middle
this point in time right before

00:19:30.736 --> 00:19:31.796 A:middle
the networking happens.

00:19:32.226 --> 00:19:33.566 A:middle
Or you might make the decision

00:19:34.086 --> 00:19:35.756 A:middle
this request is just useless at

00:19:35.786 --> 00:19:37.076 A:middle
this point, cancel.

00:19:37.396 --> 00:19:42.596 A:middle
We don't want to do stale

00:19:42.596 --> 00:19:42.836 A:middle
requests.

00:19:42.956 --> 00:19:44.736 A:middle
So now if we go back to this

00:19:44.736 --> 00:19:46.926 A:middle
workflow and we go back to my

00:19:46.926 --> 00:19:48.266 A:middle
comment about really thinking

00:19:48.266 --> 00:19:50.026 A:middle
about this delegate method, you

00:19:50.026 --> 00:19:51.926 A:middle
will see that we're kind of back

00:19:51.926 --> 00:19:53.596 A:middle
to that original workflow where

00:19:54.046 --> 00:19:55.776 A:middle
there's two background launches

00:19:55.776 --> 00:19:59.396 A:middle
in order to satisfy this URL

00:19:59.396 --> 00:19:59.976 A:middle
task.

00:20:00.856 --> 00:20:02.356 A:middle
Right? But we have to stop and

00:20:02.356 --> 00:20:03.196 A:middle
think about that.

00:20:03.476 --> 00:20:04.696 A:middle
What is more expensive,

00:20:05.056 --> 00:20:07.046 A:middle
performing a stale network load

00:20:07.046 --> 00:20:09.756 A:middle
or a mere application background

00:20:09.756 --> 00:20:10.186 A:middle
launch?

00:20:10.606 --> 00:20:12.896 A:middle
It is way more expensive to the

00:20:12.896 --> 00:20:14.516 A:middle
system to do stale loads, get

00:20:14.516 --> 00:20:16.016 A:middle
all this data, and then decide I

00:20:16.016 --> 00:20:17.526 A:middle
don't need it and pitch it.

00:20:18.286 --> 00:20:19.966 A:middle
Okay? So we want you to really

00:20:20.016 --> 00:20:21.536 A:middle
think about this new delegate

00:20:21.536 --> 00:20:22.626 A:middle
method and whether your

00:20:22.626 --> 00:20:24.996 A:middle
application has the ability to

00:20:24.996 --> 00:20:27.066 A:middle
really understand the viability

00:20:27.066 --> 00:20:28.836 A:middle
of your requests in the future.

00:20:29.316 --> 00:20:30.436 A:middle
Hopefully that make sense to

00:20:30.436 --> 00:20:30.586 A:middle
you.

00:20:31.146 --> 00:20:35.986 A:middle
Now, the third problem we want

00:20:35.986 --> 00:20:38.696 A:middle
to solve is how do we schedule

00:20:39.146 --> 00:20:41.806 A:middle
your request in a most optimal,

00:20:41.806 --> 00:20:43.116 A:middle
most intelligent way in our

00:20:43.116 --> 00:20:43.616 A:middle
system?

00:20:43.956 --> 00:20:45.226 A:middle
There's some information that in

00:20:45.226 --> 00:20:46.426 A:middle
URLSession we just don't know

00:20:46.426 --> 00:20:46.776 A:middle
about.

00:20:47.256 --> 00:20:48.496 A:middle
So we're providing a little bit

00:20:48.496 --> 00:20:50.266 A:middle
of change to our API to allow

00:20:50.266 --> 00:20:51.666 A:middle
you to explain to us some

00:20:51.666 --> 00:20:53.676 A:middle
information about your requests

00:20:54.056 --> 00:20:56.076 A:middle
and also about your responses.

00:20:56.596 --> 00:20:58.016 A:middle
We're giving you two properties,

00:20:58.116 --> 00:20:59.946 A:middle
the first one is countOfBytes

00:21:00.016 --> 00:21:02.606 A:middle
ClientExpectsToSend, and the

00:21:02.606 --> 00:21:03.846 A:middle
second one is countOfBytes

00:21:03.846 --> 00:21:05.496 A:middle
ClientExpectsToReceive.

00:21:06.176 --> 00:21:07.686 A:middle
We think you know more about

00:21:07.686 --> 00:21:08.556 A:middle
your requests.

00:21:08.556 --> 00:21:10.696 A:middle
Maybe you have a stream body

00:21:10.696 --> 00:21:11.696 A:middle
that you want to attach to a

00:21:11.696 --> 00:21:12.946 A:middle
request, we don't know about

00:21:12.946 --> 00:21:13.206 A:middle
that.

00:21:13.206 --> 00:21:14.456 A:middle
You probably know the size of

00:21:14.456 --> 00:21:14.746 A:middle
that.

00:21:15.386 --> 00:21:16.926 A:middle
We don't know about your servers

00:21:17.176 --> 00:21:18.456 A:middle
and the size of data your

00:21:18.456 --> 00:21:19.546 A:middle
servers' shipping back.

00:21:19.926 --> 00:21:21.486 A:middle
We believe you have some insight

00:21:21.486 --> 00:21:21.876 A:middle
to that.

00:21:21.876 --> 00:21:23.756 A:middle
And that will give us hints as

00:21:23.756 --> 00:21:25.876 A:middle
how we can in a most optimal,

00:21:25.876 --> 00:21:27.626 A:middle
intelligent way schedule your

00:21:27.656 --> 00:21:28.346 A:middle
tasks.

00:21:28.826 --> 00:21:30.626 A:middle
If you don't know, well, then

00:21:30.626 --> 00:21:31.746 A:middle
you can always specify

00:21:31.746 --> 00:21:34.066 A:middle
NSURLSessionTransferSizeUnknown.

00:21:36.286 --> 00:21:37.396 A:middle
So that solves the third

00:21:37.396 --> 00:21:37.696 A:middle
problem.

00:21:37.696 --> 00:21:38.836 A:middle
Let's take a look at how this

00:21:38.836 --> 00:21:40.006 A:middle
new API works in code.

00:21:40.006 --> 00:21:41.506 A:middle
It's very easy to use.

00:21:42.216 --> 00:21:43.446 A:middle
First thing we're going to do is

00:21:43.446 --> 00:21:46.086 A:middle
create a URLSession background

00:21:46.086 --> 00:21:46.936 A:middle
configuration.

00:21:46.936 --> 00:21:48.626 A:middle
We're then going to create a

00:21:48.626 --> 00:21:50.366 A:middle
session based on that

00:21:50.826 --> 00:21:51.766 A:middle
configuration.

00:21:52.226 --> 00:21:54.926 A:middle
Once we have that, we're going

00:21:54.926 --> 00:21:57.256 A:middle
to now generate a URLRequest,

00:21:57.636 --> 00:21:59.496 A:middle
specify the URL we want to go

00:21:59.496 --> 00:22:02.296 A:middle
to, maybe set a header value,

00:22:02.606 --> 00:22:03.746 A:middle
something that makes sense for

00:22:03.746 --> 00:22:04.346 A:middle
your task.

00:22:04.346 --> 00:22:05.996 A:middle
Again, this is just an example.

00:22:07.586 --> 00:22:08.476 A:middle
And now we're going to create a

00:22:08.476 --> 00:22:09.866 A:middle
task that encapsulates that

00:22:09.866 --> 00:22:11.916 A:middle
request on that session.

00:22:12.566 --> 00:22:13.986 A:middle
And we're going to opt into the

00:22:13.986 --> 00:22:16.316 A:middle
new scheduling API by setting

00:22:16.316 --> 00:22:17.986 A:middle
the earliestBeginDate property

00:22:18.266 --> 00:22:19.116 A:middle
and give us a date.

00:22:19.116 --> 00:22:20.976 A:middle
In this example we say two hours

00:22:20.976 --> 00:22:22.886 A:middle
from now I want this task to be

00:22:22.936 --> 00:22:24.336 A:middle
eligible to be run.

00:22:25.936 --> 00:22:26.916 A:middle
And I'm also going to give some

00:22:26.916 --> 00:22:28.286 A:middle
hints to URLSession and say,

00:22:28.586 --> 00:22:30.126 A:middle
"This is a small request,

00:22:30.126 --> 00:22:31.646 A:middle
there's no body, I've just set

00:22:31.646 --> 00:22:33.896 A:middle
one header, maybe 80 bytes."

00:22:34.216 --> 00:22:36.216 A:middle
And then my server probably is

00:22:36.216 --> 00:22:38.016 A:middle
going to send about a 2K

00:22:38.016 --> 00:22:39.206 A:middle
response to this.

00:22:40.406 --> 00:22:42.026 A:middle
And with all URLSession tasks,

00:22:42.216 --> 00:22:43.376 A:middle
make sure you call resume.

00:22:43.996 --> 00:22:46.406 A:middle
Now, how does the new delegate

00:22:46.406 --> 00:22:46.836 A:middle
work?

00:22:47.146 --> 00:22:50.096 A:middle
Well, we decided I know context.

00:22:50.186 --> 00:22:51.636 A:middle
I can make some intelligent

00:22:51.636 --> 00:22:53.846 A:middle
decisions about my networking

00:22:53.846 --> 00:22:56.006 A:middle
tasks in the future.

00:22:56.546 --> 00:22:57.456 A:middle
So I've implemented

00:22:57.456 --> 00:22:58.896 A:middle
willBeginDelayedRequest.

00:22:59.046 --> 00:23:01.946 A:middle
So in our example here what I've

00:23:01.946 --> 00:23:03.916 A:middle
decided to do is to modify the

00:23:03.916 --> 00:23:04.506 A:middle
request.

00:23:04.506 --> 00:23:05.676 A:middle
I'm going to take the original

00:23:05.676 --> 00:23:06.926 A:middle
request, create a new

00:23:06.926 --> 00:23:08.026 A:middle
updatedRequest.

00:23:08.026 --> 00:23:09.526 A:middle
I'm going to maybe change a

00:23:09.526 --> 00:23:10.896 A:middle
value in the header that makes

00:23:10.896 --> 00:23:13.436 A:middle
more sense now that this task is

00:23:13.436 --> 00:23:14.566 A:middle
actually going to do some

00:23:14.566 --> 00:23:15.266 A:middle
networking.

00:23:15.556 --> 00:23:17.506 A:middle
Time has passed, I have new

00:23:17.506 --> 00:23:18.206 A:middle
information.

00:23:18.526 --> 00:23:20.036 A:middle
I put that information on that

00:23:20.036 --> 00:23:20.426 A:middle
task.

00:23:20.826 --> 00:23:21.956 A:middle
And then I'm going to call the

00:23:21.956 --> 00:23:24.626 A:middle
completionHandler and use a

00:23:24.626 --> 00:23:26.896 A:middle
disposition of useNewRequest and

00:23:26.896 --> 00:23:28.246 A:middle
passed it that new request.

00:23:28.246 --> 00:23:29.076 A:middle
If you take a look at our header

00:23:29.076 --> 00:23:30.266 A:middle
file, you can see other

00:23:30.266 --> 00:23:33.166 A:middle
dispositions available to you in

00:23:33.166 --> 00:23:36.666 A:middle
this completionHandler call.

00:23:36.816 --> 00:23:39.136 A:middle
So let me recap the scheduling

00:23:39.256 --> 00:23:40.756 A:middle
API that we're introducing here.

00:23:41.206 --> 00:23:42.696 A:middle
Background URLSession is an

00:23:42.816 --> 00:23:45.146 A:middle
awesome API for doing networking

00:23:45.146 --> 00:23:46.276 A:middle
that allows your application to

00:23:46.276 --> 00:23:47.496 A:middle
not even be running and have

00:23:47.496 --> 00:23:49.026 A:middle
this networking happen for you.

00:23:50.086 --> 00:23:51.666 A:middle
Our new scheduling API will

00:23:51.716 --> 00:23:54.156 A:middle
allow you to delay your requests

00:23:54.406 --> 00:23:57.226 A:middle
so that they can, you know,

00:23:57.226 --> 00:23:59.356 A:middle
obtain and pull down the

00:23:59.356 --> 00:24:00.786 A:middle
freshest information for your

00:24:00.786 --> 00:24:01.566 A:middle
application.

00:24:02.186 --> 00:24:03.426 A:middle
And it's really we give you an

00:24:03.426 --> 00:24:04.766 A:middle
opportunity to alter those

00:24:04.766 --> 00:24:06.456 A:middle
things based on the context and

00:24:06.456 --> 00:24:07.996 A:middle
the time at when the networking

00:24:07.996 --> 00:24:10.376 A:middle
is actually going to happen.

00:24:10.376 --> 00:24:11.856 A:middle
The other part of this API

00:24:12.036 --> 00:24:13.616 A:middle
change is to allow you to give

00:24:13.616 --> 00:24:14.916 A:middle
hints to us so that we can be

00:24:14.916 --> 00:24:16.836 A:middle
super intelligent and make these

00:24:16.836 --> 00:24:18.446 A:middle
tasks run at the most optimal

00:24:18.446 --> 00:24:20.706 A:middle
time on these devices.

00:24:21.286 --> 00:24:24.936 A:middle
Now, I'd like to turn the time

00:24:24.936 --> 00:24:26.556 A:middle
over to Stuart Cheshire, an

00:24:26.556 --> 00:24:28.086 A:middle
Apple distinguished engineer.

00:24:28.086 --> 00:24:29.466 A:middle
And thank you for your time.

00:24:30.516 --> 00:24:33.826 A:middle
[ Applause ]

00:24:34.326 --> 00:24:36.716 A:middle
&gt;&gt; Stuart Cheshire: Thank you,

00:24:38.576 --> 00:24:38.696 A:middle
Jeff.

00:24:38.896 --> 00:24:40.636 A:middle
Now we're going to talk about

00:24:41.066 --> 00:24:43.006 A:middle
enhancements in URLSession.

00:24:43.456 --> 00:24:45.156 A:middle
We have four things to cover,

00:24:45.466 --> 00:24:46.276 A:middle
let's move through them.

00:24:48.866 --> 00:24:49.876 A:middle
Often you want to show a

00:24:49.876 --> 00:24:51.756 A:middle
progress bar to indicate to the

00:24:51.756 --> 00:24:53.766 A:middle
users how progress is being

00:24:53.766 --> 00:24:54.026 A:middle
made.

00:24:54.676 --> 00:24:56.676 A:middle
And right now this is a little

00:24:56.676 --> 00:24:57.456 A:middle
bit cumbersome.

00:24:57.936 --> 00:24:59.746 A:middle
There are four variables that

00:24:59.746 --> 00:25:00.996 A:middle
you need to monitor with

00:25:00.996 --> 00:25:02.236 A:middle
Key-value Observing.

00:25:02.776 --> 00:25:04.576 A:middle
And sometimes the

00:25:04.576 --> 00:25:07.426 A:middle
countOfBytesExpectedToReceive or

00:25:07.426 --> 00:25:09.000 A:middle
Send is not always available.

00:25:12.266 --> 00:25:15.936 A:middle
The good news now in iOS 11 is

00:25:16.196 --> 00:25:18.386 A:middle
URLSessionTask has adopted the

00:25:18.456 --> 00:25:20.116 A:middle
ProgressReporting protocol.

00:25:21.226 --> 00:25:23.466 A:middle
You can get a progress object

00:25:23.896 --> 00:25:28.066 A:middle
from the URLSessionTask, and

00:25:28.606 --> 00:25:30.876 A:middle
that gives you a variable

00:25:30.876 --> 00:25:32.966 A:middle
fractionCompleted, which is a

00:25:32.966 --> 00:25:35.206 A:middle
number in the range zero to one.

00:25:35.656 --> 00:25:37.676 A:middle
You can also provide strings to

00:25:37.676 --> 00:25:40.056 A:middle
give more detail about what the

00:25:40.056 --> 00:25:40.776 A:middle
operation is.

00:25:41.396 --> 00:25:42.816 A:middle
You can attach that progress

00:25:42.816 --> 00:25:46.186 A:middle
object to a UIProgressView or an

00:25:46.216 --> 00:25:48.536 A:middle
NSProgressIndicator to get an

00:25:48.536 --> 00:25:49.996 A:middle
automatic progress bar.

00:25:50.416 --> 00:25:52.886 A:middle
You can also combine multiple

00:25:52.886 --> 00:25:55.016 A:middle
progress objects into a parent

00:25:55.016 --> 00:25:56.826 A:middle
progress object when you're

00:25:56.826 --> 00:25:58.726 A:middle
performing multiple tasks, such

00:25:58.726 --> 00:26:00.306 A:middle
as downloading a file,

00:26:00.596 --> 00:26:02.536 A:middle
decompressing a file, and then

00:26:02.536 --> 00:26:03.486 A:middle
handling the data.

00:26:04.556 --> 00:26:07.246 A:middle
So that makes your progress

00:26:07.246 --> 00:26:09.126 A:middle
reporting much simpler.

00:26:10.676 --> 00:26:13.166 A:middle
The binding between a

00:26:13.166 --> 00:26:15.616 A:middle
URLSessionTask and the progress

00:26:15.616 --> 00:26:17.036 A:middle
object is bidirectional.

00:26:17.656 --> 00:26:19.866 A:middle
So if you suspend a

00:26:19.866 --> 00:26:21.666 A:middle
URLSessionTask, that is the same

00:26:21.666 --> 00:26:23.936 A:middle
as pausing the progress object.

00:26:23.936 --> 00:26:25.096 A:middle
If you pause the progress

00:26:25.096 --> 00:26:26.616 A:middle
object, that is the same as

00:26:26.616 --> 00:26:28.726 A:middle
suspending the URLSessionTask.

00:26:29.336 --> 00:26:34.656 A:middle
We now have support for the

00:26:34.656 --> 00:26:36.756 A:middle
Brotli compression algorithm.

00:26:37.696 --> 00:26:40.576 A:middle
In tests this compresses about

00:26:40.576 --> 00:26:42.996 A:middle
15% better than gzip, which

00:26:42.996 --> 00:26:45.696 A:middle
results in faster network

00:26:45.696 --> 00:26:46.306 A:middle
access.

00:26:48.006 --> 00:26:49.376 A:middle
Like other new compression

00:26:49.376 --> 00:26:51.706 A:middle
schemes, this is only used over

00:26:51.706 --> 00:26:53.616 A:middle
encrypted connections to avoid

00:26:53.616 --> 00:26:55.496 A:middle
confusing middle boxes that

00:26:55.496 --> 00:26:56.616 A:middle
might not recognize this

00:26:56.616 --> 00:26:57.166 A:middle
compression.

00:26:59.896 --> 00:27:03.466 A:middle
Because Safari uses URLSession,

00:27:03.466 --> 00:27:05.096 A:middle
that's also means Safari gets

00:27:05.096 --> 00:27:07.026 A:middle
the benefit of this new Brotli

00:27:07.026 --> 00:27:08.106 A:middle
compression algorithm.

00:27:08.526 --> 00:27:10.896 A:middle
And many major websites have

00:27:10.896 --> 00:27:12.566 A:middle
already announced support for

00:27:12.566 --> 00:27:14.006 A:middle
Brotli in their web service.

00:27:14.006 --> 00:27:17.776 A:middle
Our next topic is the Public

00:27:17.776 --> 00:27:18.586 A:middle
Suffix List.

00:27:19.216 --> 00:27:20.616 A:middle
The Public Suffix List is

00:27:20.616 --> 00:27:22.846 A:middle
sometimes called the effective

00:27:22.846 --> 00:27:24.076 A:middle
top-level domain list.

00:27:24.836 --> 00:27:27.946 A:middle
And this is important for

00:27:27.946 --> 00:27:29.776 A:middle
determining where administrative

00:27:29.776 --> 00:27:31.566 A:middle
boundaries occur in the

00:27:31.566 --> 00:27:32.756 A:middle
namespace of the Internet.

00:27:34.036 --> 00:27:35.566 A:middle
One thing we don't want to allow

00:27:36.026 --> 00:27:40.126 A:middle
is for a website to set a cookie

00:27:40.126 --> 00:27:42.096 A:middle
on the com domain, which is then

00:27:42.096 --> 00:27:44.006 A:middle
accessible to any other dot com

00:27:44.006 --> 00:27:44.486 A:middle
company.

00:27:45.066 --> 00:27:47.916 A:middle
So you might be tempted to make

00:27:47.916 --> 00:27:50.486 A:middle
a rule that you can't set

00:27:50.656 --> 00:27:52.576 A:middle
cookies on top level domains,

00:27:52.636 --> 00:27:54.546 A:middle
only on second level and lower.

00:27:55.146 --> 00:27:56.926 A:middle
But domains are named

00:27:56.926 --> 00:27:58.416 A:middle
differently in different parts

00:27:58.416 --> 00:27:59.006 A:middle
of the world.

00:28:00.086 --> 00:28:03.276 A:middle
In America, Apple.com and

00:28:03.276 --> 00:28:04.886 A:middle
FileMaker.com are different

00:28:04.886 --> 00:28:05.396 A:middle
companies.

00:28:06.136 --> 00:28:08.236 A:middle
But in Australia many, many

00:28:08.236 --> 00:28:10.526 A:middle
companies are under com.au, and

00:28:10.746 --> 00:28:11.806 A:middle
that doesn't make them all the

00:28:11.806 --> 00:28:12.486 A:middle
same company.

00:28:12.786 --> 00:28:15.196 A:middle
So the Public Suffix List is a

00:28:15.196 --> 00:28:17.706 A:middle
file of rules and patterns that

00:28:17.706 --> 00:28:20.726 A:middle
tells software how to judge

00:28:20.816 --> 00:28:22.396 A:middle
where administrative boundaries

00:28:22.436 --> 00:28:23.226 A:middle
occur.

00:28:24.076 --> 00:28:28.396 A:middle
This is used for partitioning

00:28:28.396 --> 00:28:32.876 A:middle
cookies, and it's used by the

00:28:32.876 --> 00:28:34.296 A:middle
URLSession APIs.

00:28:34.376 --> 00:28:36.046 A:middle
And if you use the

00:28:36.046 --> 00:28:37.876 A:middle
HTTPCookieStorage APIs directly,

00:28:38.036 --> 00:28:39.206 A:middle
it's supported there, too.

00:28:40.346 --> 00:28:41.506 A:middle
We used to update this in

00:28:41.506 --> 00:28:43.576 A:middle
software updates, but now with

00:28:43.616 --> 00:28:46.106 A:middle
the more rapid progress in

00:28:46.106 --> 00:28:47.626 A:middle
creating top level domains,

00:28:48.066 --> 00:28:49.796 A:middle
we've changed to doing this over

00:28:49.796 --> 00:28:50.346 A:middle
the air.

00:28:50.606 --> 00:28:52.046 A:middle
We could push a new list every

00:28:52.046 --> 00:28:56.476 A:middle
two weeks if we wanted to.

00:28:57.416 --> 00:29:01.636 A:middle
URLSessionStreamTask is the API

00:29:01.726 --> 00:29:03.506 A:middle
you would use if you just want a

00:29:03.506 --> 00:29:04.146 A:middle
byte stream.

00:29:04.436 --> 00:29:06.896 A:middle
If you're not doing HTTP Style

00:29:06.896 --> 00:29:08.536 A:middle
Gets but say you want to write a

00:29:08.536 --> 00:29:09.196 A:middle
mail client,

00:29:09.596 --> 00:29:12.676 A:middle
URLSessionStreamTask gives you a

00:29:12.676 --> 00:29:13.626 A:middle
simple byte stream.

00:29:14.766 --> 00:29:16.646 A:middle
It supports upgrading to TLS

00:29:16.646 --> 00:29:18.026 A:middle
with the STARTTLS option.

00:29:18.276 --> 00:29:21.286 A:middle
If you have existing code that

00:29:21.416 --> 00:29:22.866 A:middle
is written using the old

00:29:22.866 --> 00:29:25.526 A:middle
NSInputStream and NSOutputStream

00:29:25.526 --> 00:29:27.796 A:middle
APIs, you can extract those

00:29:27.796 --> 00:29:29.156 A:middle
objects from a

00:29:29.236 --> 00:29:32.016 A:middle
URLSessionStreamTask to use your

00:29:32.016 --> 00:29:32.566 A:middle
old code.

00:29:32.886 --> 00:29:34.016 A:middle
But for any new code you're

00:29:34.016 --> 00:29:36.006 A:middle
writing, we strongly recommend

00:29:36.066 --> 00:29:38.246 A:middle
that you use the new native

00:29:38.526 --> 00:29:40.676 A:middle
URLSessionStreamTask APIs.

00:29:41.486 --> 00:29:42.836 A:middle
We announced this a couple of

00:29:42.836 --> 00:29:46.116 A:middle
years ago at WWDC 2015.

00:29:46.596 --> 00:29:49.336 A:middle
What we have new for you now is

00:29:49.396 --> 00:29:50.836 A:middle
automatic navigation of

00:29:50.836 --> 00:29:52.446 A:middle
authenticating proxies.

00:29:52.666 --> 00:29:53.776 A:middle
If the proxy requires

00:29:53.776 --> 00:29:56.336 A:middle
credentials, then we will

00:29:56.336 --> 00:29:57.886 A:middle
automatically extract those from

00:29:57.886 --> 00:29:59.106 A:middle
the key chain or promptly the

00:29:59.106 --> 00:30:01.326 A:middle
user on your behalf.

00:30:03.136 --> 00:30:05.276 A:middle
So we've covered the

00:30:05.276 --> 00:30:07.346 A:middle
enhancements for URLSession,

00:30:07.816 --> 00:30:08.496 A:middle
let's move on.

00:30:09.516 --> 00:30:15.636 A:middle
[ Applause ]

00:30:16.136 --> 00:30:16.476 A:middle
Thank you.

00:30:18.346 --> 00:30:21.076 A:middle
Tips and hints that we've

00:30:21.076 --> 00:30:23.846 A:middle
learned from our years helping

00:30:23.846 --> 00:30:24.476 A:middle
developers.

00:30:26.816 --> 00:30:29.116 A:middle
Number one rule: Don't use BSD

00:30:29.116 --> 00:30:29.726 A:middle
Sockets.

00:30:33.246 --> 00:30:34.536 A:middle
And by the same token, we

00:30:34.536 --> 00:30:36.436 A:middle
encourage you not to embed

00:30:36.746 --> 00:30:39.156 A:middle
libraries that are based on BSD

00:30:39.156 --> 00:30:39.796 A:middle
Sockets.

00:30:41.356 --> 00:30:44.386 A:middle
Because we do lots of work, as

00:30:44.386 --> 00:30:46.116 A:middle
you've been hearing today, to

00:30:46.116 --> 00:30:48.286 A:middle
provide benefits to your

00:30:48.286 --> 00:30:49.146 A:middle
applications.

00:30:49.556 --> 00:30:51.676 A:middle
We provide Wi-Fi Assist so that

00:30:51.676 --> 00:30:53.246 A:middle
your application succeeds

00:30:53.356 --> 00:30:54.856 A:middle
instead of failing when Wi-Fi

00:30:54.856 --> 00:30:55.596 A:middle
isn't working.

00:30:56.146 --> 00:30:58.386 A:middle
We provide techniques to

00:30:58.796 --> 00:31:01.156 A:middle
minimize CPU use and minimize

00:31:01.196 --> 00:31:02.946 A:middle
battery use to give users longer

00:31:02.946 --> 00:31:03.676 A:middle
battery life.

00:31:04.376 --> 00:31:06.456 A:middle
We have the ability to do tasks

00:31:06.456 --> 00:31:08.116 A:middle
in the background when your

00:31:08.116 --> 00:31:09.536 A:middle
application isn't even running.

00:31:09.796 --> 00:31:11.096 A:middle
And the third-party libraries

00:31:11.096 --> 00:31:12.196 A:middle
just can't do anything when

00:31:12.196 --> 00:31:13.206 A:middle
they're not in memory running.

00:31:14.556 --> 00:31:18.116 A:middle
And final bit of advice: Always

00:31:18.116 --> 00:31:20.396 A:middle
try to use connect-by-name APIs

00:31:20.736 --> 00:31:22.746 A:middle
as opposed to APIs where you

00:31:22.746 --> 00:31:24.916 A:middle
resolve a name to an IP address

00:31:24.976 --> 00:31:26.256 A:middle
and then connect to the address.

00:31:27.036 --> 00:31:28.546 A:middle
We talked earlier about the

00:31:28.546 --> 00:31:30.466 A:middle
requirement for IPv6 support.

00:31:30.996 --> 00:31:33.016 A:middle
And the reason that almost all

00:31:33.276 --> 00:31:36.366 A:middle
of your apps worked perfectly is

00:31:36.416 --> 00:31:37.826 A:middle
because when you use

00:31:37.826 --> 00:31:40.366 A:middle
connect-by-name APIs, you don't

00:31:40.366 --> 00:31:41.506 A:middle
get involved with the IP

00:31:41.506 --> 00:31:41.956 A:middle
addresses.

00:31:42.046 --> 00:31:43.136 A:middle
And if you're not involved with

00:31:43.136 --> 00:31:45.496 A:middle
the IP address, you don't need

00:31:45.496 --> 00:31:47.726 A:middle
to care whether it's v4 or v6,

00:31:48.196 --> 00:31:50.846 A:middle
it just works.

00:31:50.886 --> 00:31:53.366 A:middle
Another question we often get is

00:31:53.366 --> 00:31:54.706 A:middle
about the timeout values.

00:31:55.096 --> 00:31:56.316 A:middle
So I want to recap that.

00:31:57.466 --> 00:31:59.476 A:middle
The timeoutIntervalForResource

00:32:00.456 --> 00:32:02.496 A:middle
is the time limit for fetching

00:32:02.496 --> 00:32:03.566 A:middle
the entire resource.

00:32:03.646 --> 00:32:06.436 A:middle
By default, this is seven days.

00:32:07.346 --> 00:32:08.996 A:middle
If the entire resource has not

00:32:08.996 --> 00:32:10.206 A:middle
been fetched by that time, it

00:32:10.206 --> 00:32:10.666 A:middle
will fail.

00:32:11.716 --> 00:32:14.726 A:middle
timeoutIntervalForRequest is a

00:32:14.726 --> 00:32:17.036 A:middle
timer that only starts once the

00:32:17.036 --> 00:32:18.166 A:middle
transfer starts.

00:32:18.646 --> 00:32:21.386 A:middle
Once it starts, if your transfer

00:32:21.386 --> 00:32:23.796 A:middle
stalls and ceases making

00:32:23.796 --> 00:32:24.986 A:middle
progress for that time-out

00:32:24.986 --> 00:32:26.806 A:middle
value, that when that timer will

00:32:26.806 --> 00:32:27.826 A:middle
fire.

00:32:29.876 --> 00:32:33.356 A:middle
We have seen developers that

00:32:33.356 --> 00:32:35.766 A:middle
take their old NSURLConnection

00:32:35.766 --> 00:32:38.716 A:middle
code and convert it to the new

00:32:38.716 --> 00:32:41.066 A:middle
URLSession code by mechanically

00:32:41.256 --> 00:32:43.946 A:middle
making a URLSession for every

00:32:43.946 --> 00:32:46.186 A:middle
old NSURLConnection they used to

00:32:46.186 --> 00:32:46.406 A:middle
have.

00:32:47.076 --> 00:32:48.566 A:middle
This is very inefficient and

00:32:48.566 --> 00:32:49.006 A:middle
wasteful.

00:32:49.186 --> 00:32:51.486 A:middle
For almost all of your apps what

00:32:51.486 --> 00:32:53.436 A:middle
you want to have is just one

00:32:53.436 --> 00:32:55.446 A:middle
URLSession, which can then have

00:32:55.446 --> 00:32:56.786 A:middle
as many tasks as you want.

00:32:57.696 --> 00:32:59.236 A:middle
The only time you would want

00:32:59.236 --> 00:33:01.446 A:middle
more than one URLSession is when

00:33:01.446 --> 00:33:02.946 A:middle
you have groups of different

00:33:02.946 --> 00:33:04.936 A:middle
operations that have radically

00:33:04.936 --> 00:33:05.926 A:middle
different requirements.

00:33:06.086 --> 00:33:07.786 A:middle
And in that case you might

00:33:07.816 --> 00:33:08.836 A:middle
create two different

00:33:08.836 --> 00:33:11.066 A:middle
configuration objects and create

00:33:11.066 --> 00:33:13.436 A:middle
two different URLSessions using

00:33:13.436 --> 00:33:15.096 A:middle
those two configuration objects.

00:33:15.546 --> 00:33:17.666 A:middle
One example is private browsing

00:33:17.666 --> 00:33:19.686 A:middle
in Safari where each private

00:33:19.686 --> 00:33:21.116 A:middle
browsing window is its own

00:33:21.116 --> 00:33:23.316 A:middle
separate URLSession so that it

00:33:23.316 --> 00:33:24.636 A:middle
doesn't share cookies and other

00:33:24.636 --> 00:33:25.936 A:middle
states with the other sessions.

00:33:27.896 --> 00:33:30.496 A:middle
Most apps can just have one

00:33:30.496 --> 00:33:32.326 A:middle
statically-allocated URLSession,

00:33:32.326 --> 00:33:33.016 A:middle
and that's fine.

00:33:33.376 --> 00:33:34.776 A:middle
But if you do allocate

00:33:34.776 --> 00:33:36.266 A:middle
URLSessions dynamically,

00:33:36.606 --> 00:33:38.266 A:middle
remember to clean up afterwards.

00:33:38.696 --> 00:33:40.096 A:middle
Either finish tasks and

00:33:40.096 --> 00:33:42.526 A:middle
invalidate or invalidate and

00:33:42.526 --> 00:33:42.936 A:middle
cancel.

00:33:43.346 --> 00:33:44.286 A:middle
But if you don't clean up,

00:33:44.496 --> 00:33:45.296 A:middle
you'll leak memory.

00:33:45.856 --> 00:33:50.956 A:middle
We get developers asking us

00:33:51.016 --> 00:33:52.776 A:middle
about convenience methods and

00:33:52.776 --> 00:33:53.836 A:middle
delegate callbacks.

00:33:55.336 --> 00:33:57.426 A:middle
Delegate callbacks give you

00:33:57.426 --> 00:33:59.376 A:middle
detailed step-by-step progress

00:33:59.376 --> 00:34:01.546 A:middle
information on the state of your

00:34:01.546 --> 00:34:01.926 A:middle
task.

00:34:02.506 --> 00:34:04.236 A:middle
The convenience methods, like

00:34:04.236 --> 00:34:06.516 A:middle
the name suggests, are a quick

00:34:06.516 --> 00:34:09.246 A:middle
and easy way of using the API.

00:34:10.796 --> 00:34:13.106 A:middle
With convenience methods you

00:34:13.106 --> 00:34:14.566 A:middle
don't get all the intermediate

00:34:14.566 --> 00:34:16.466 A:middle
delegate callbacks, you just get

00:34:16.466 --> 00:34:18.346 A:middle
the final result reported to the

00:34:18.346 --> 00:34:19.246 A:middle
completionHandler.

00:34:21.006 --> 00:34:22.626 A:middle
Don't mix and match both on the

00:34:22.626 --> 00:34:24.636 A:middle
same URLSession, pick one style

00:34:24.636 --> 00:34:25.456 A:middle
and be consistent.

00:34:26.536 --> 00:34:27.356 A:middle
If you're using the

00:34:27.396 --> 00:34:28.986 A:middle
completionHandler, you will not

00:34:28.986 --> 00:34:30.876 A:middle
get the delegate callbacks with

00:34:30.916 --> 00:34:31.846 A:middle
two exceptions.

00:34:33.296 --> 00:34:35.706 A:middle
If networking is not currently

00:34:35.706 --> 00:34:37.796 A:middle
available and the task is

00:34:37.796 --> 00:34:39.816 A:middle
waiting for connectivity, you'll

00:34:39.816 --> 00:34:41.566 A:middle
be notified of that in case you

00:34:41.566 --> 00:34:42.936 A:middle
want to show some indication in

00:34:42.976 --> 00:34:44.396 A:middle
your UI.

00:34:44.396 --> 00:34:45.786 A:middle
The other delegate method you

00:34:45.786 --> 00:34:47.636 A:middle
may get notified is the

00:34:47.636 --> 00:34:48.376 A:middle
didReceive

00:34:48.376 --> 00:34:49.566 A:middle
AuthenticationChallenge.

00:34:50.266 --> 00:34:54.656 A:middle
So here's a summary of the

00:34:54.706 --> 00:34:58.636 A:middle
options available to you.

00:34:58.636 --> 00:35:00.416 A:middle
Doing URLSessionTasks in your

00:35:00.416 --> 00:35:03.516 A:middle
process with waits for

00:35:03.516 --> 00:35:05.206 A:middle
connectivity as we recommend,

00:35:06.206 --> 00:35:07.486 A:middle
the task will start immediately

00:35:07.486 --> 00:35:10.266 A:middle
if it can; or if it can't, it

00:35:10.266 --> 00:35:11.776 A:middle
will start at the first possible

00:35:11.776 --> 00:35:12.346 A:middle
opportunity.

00:35:13.226 --> 00:35:14.666 A:middle
You also have the option of

00:35:14.666 --> 00:35:16.176 A:middle
doing tasks in the background.

00:35:17.346 --> 00:35:18.516 A:middle
And you can do background

00:35:18.516 --> 00:35:20.346 A:middle
discretionary tasks, which will

00:35:20.346 --> 00:35:22.406 A:middle
wait until the best time in

00:35:22.406 --> 00:35:25.776 A:middle
terms of battery power and Wi-Fi

00:35:25.776 --> 00:35:26.330 A:middle
networking.

00:35:30.356 --> 00:35:31.816 A:middle
Now I have a couple of ongoing

00:35:31.816 --> 00:35:33.606 A:middle
developments to talk about.

00:35:35.386 --> 00:35:36.616 A:middle
I'm sure many people in this

00:35:36.616 --> 00:35:38.686 A:middle
room have heard about TLS 1.3.

00:35:39.596 --> 00:35:41.716 A:middle
TLS, Transport Layer Security is

00:35:41.716 --> 00:35:43.566 A:middle
the protocol that encrypts your

00:35:43.566 --> 00:35:45.516 A:middle
data on the network to prevent

00:35:45.516 --> 00:35:47.966 A:middle
eavesdroppers from seeing it and

00:35:48.276 --> 00:35:50.636 A:middle
perhaps as importantly to make

00:35:50.636 --> 00:35:51.816 A:middle
sure that you have connected to

00:35:51.886 --> 00:35:53.066 A:middle
the server you intended to

00:35:53.066 --> 00:35:53.596 A:middle
connect to.

00:35:54.506 --> 00:35:57.646 A:middle
TLS 1.2 is very old at this

00:35:57.646 --> 00:35:58.116 A:middle
stage.

00:35:58.116 --> 00:35:59.516 A:middle
It has a number of problems that

00:35:59.516 --> 00:36:00.426 A:middle
have been discovered.

00:36:00.996 --> 00:36:04.696 A:middle
And TLS 1.3 is almost finished.

00:36:05.426 --> 00:36:06.706 A:middle
That standard is not quite

00:36:06.706 --> 00:36:07.406 A:middle
finalized.

00:36:07.966 --> 00:36:09.996 A:middle
Apple is participating in that

00:36:09.996 --> 00:36:13.686 A:middle
IETF working group, and we

00:36:13.686 --> 00:36:14.756 A:middle
expect that to be finished by

00:36:14.756 --> 00:36:15.526 A:middle
the end of this year.

00:36:16.256 --> 00:36:17.456 A:middle
In the meantime, we do have a

00:36:17.456 --> 00:36:19.666 A:middle
draft implementation if you want

00:36:19.666 --> 00:36:21.136 A:middle
to experiment with it right now.

00:36:21.816 --> 00:36:23.726 A:middle
And if you check out the

00:36:23.726 --> 00:36:26.146 A:middle
security session from this Apple

00:36:26.146 --> 00:36:27.326 A:middle
Developer Conference, you can

00:36:27.326 --> 00:36:29.566 A:middle
learn how to experiment with

00:36:30.116 --> 00:36:30.226 A:middle
that.

00:36:30.446 --> 00:36:32.036 A:middle
Another thing you may have heard

00:36:32.036 --> 00:36:32.736 A:middle
of is QUIC.

00:36:33.706 --> 00:36:35.786 A:middle
QUIC is a new transport protocol

00:36:36.236 --> 00:36:39.236 A:middle
designed to experiment with new

00:36:39.236 --> 00:36:41.666 A:middle
ideas that are hard to do with

00:36:42.216 --> 00:36:42.500 A:middle
TCP.

00:36:42.716 --> 00:36:43.886 A:middle
QUIC started out as an

00:36:43.886 --> 00:36:45.156 A:middle
experiment by some Google

00:36:45.156 --> 00:36:47.546 A:middle
engineers, and it was a very

00:36:47.896 --> 00:36:49.186 A:middle
successful experiment.

00:36:49.236 --> 00:36:50.096 A:middle
They learned a lot.

00:36:50.256 --> 00:36:52.056 A:middle
Some ideas were good, some

00:36:52.056 --> 00:36:53.446 A:middle
turned out not to work as well

00:36:53.446 --> 00:36:55.116 A:middle
as they hoped.

00:36:55.766 --> 00:36:58.346 A:middle
Those engineers have taken those

00:36:58.346 --> 00:36:59.916 A:middle
lessons they learned to the

00:36:59.916 --> 00:37:00.646 A:middle
IETF.

00:37:00.646 --> 00:37:02.306 A:middle
We have formed a new working

00:37:02.306 --> 00:37:03.916 A:middle
group to develop the IETF

00:37:03.916 --> 00:37:05.346 A:middle
standard QUIC protocol.

00:37:06.316 --> 00:37:07.856 A:middle
Apple is also participating in

00:37:07.856 --> 00:37:08.796 A:middle
that working group.

00:37:08.946 --> 00:37:10.626 A:middle
That is not nearly as far long

00:37:10.796 --> 00:37:12.666 A:middle
as TLS is, but that is also

00:37:12.666 --> 00:37:13.746 A:middle
making good progress.

00:37:17.416 --> 00:37:19.516 A:middle
Before we finish, one other

00:37:19.516 --> 00:37:20.676 A:middle
thing we should talk about,

00:37:21.496 --> 00:37:22.206 A:middle
Bonjour.

00:37:25.036 --> 00:37:27.866 A:middle
Fifteen year ago at this very

00:37:27.866 --> 00:37:29.946 A:middle
convention center in San Jose,

00:37:30.616 --> 00:37:32.506 A:middle
Steve Jobs announced Bonjour to

00:37:32.506 --> 00:37:32.906 A:middle
the world.

00:37:33.246 --> 00:37:35.326 A:middle
And I got the opportunity to

00:37:35.326 --> 00:37:37.056 A:middle
tell you all how it worked.

00:37:37.456 --> 00:37:39.196 A:middle
A lot has happened since then.

00:37:40.356 --> 00:37:44.686 A:middle
Since we launched it in 2004, we

00:37:44.686 --> 00:37:46.786 A:middle
brought out Bonjour for Windows,

00:37:46.786 --> 00:37:47.526 A:middle
for Linux.

00:37:47.606 --> 00:37:49.046 A:middle
We had Java APIs.

00:37:50.356 --> 00:37:52.476 A:middle
The next year Mac OS X 10.4

00:37:52.476 --> 00:37:54.306 A:middle
introduced wide-area Bonjour to

00:37:54.456 --> 00:37:55.596 A:middle
complement the local

00:37:55.596 --> 00:37:57.396 A:middle
multicast-based Bonjour that was

00:37:57.396 --> 00:37:59.886 A:middle
in the original Mac OS 10.2

00:38:00.396 --> 00:38:00.716 A:middle
launch.

00:38:01.726 --> 00:38:03.526 A:middle
The same year the Linux

00:38:03.526 --> 00:38:04.986 A:middle
community came out with a

00:38:04.986 --> 00:38:06.556 A:middle
completely independent

00:38:06.556 --> 00:38:08.456 A:middle
GPL-licensed implementation of

00:38:08.456 --> 00:38:09.776 A:middle
Bonjour called Avahi.

00:38:11.126 --> 00:38:12.566 A:middle
A couple of years after that,

00:38:13.256 --> 00:38:15.226 A:middle
Apple shipped Back to My Mac,

00:38:15.736 --> 00:38:17.956 A:middle
which is built on the wide-area

00:38:17.956 --> 00:38:19.666 A:middle
Bonjour capabilities introduced

00:38:19.666 --> 00:38:20.656 A:middle
in 10.4.

00:38:21.476 --> 00:38:23.796 A:middle
And in 2009 we brought out the

00:38:23.796 --> 00:38:26.026 A:middle
Bonjour Sleep Proxy, which let

00:38:26.026 --> 00:38:27.196 A:middle
you get Back to Your Mac at

00:38:27.196 --> 00:38:28.686 A:middle
Home, even when it was asleep to

00:38:28.686 --> 00:38:29.666 A:middle
save power.

00:38:30.306 --> 00:38:33.216 A:middle
In the years since then, Android

00:38:33.266 --> 00:38:35.566 A:middle
adopted with Bonjour with their

00:38:35.566 --> 00:38:38.386 A:middle
own native APIs in 2012.

00:38:38.386 --> 00:38:40.556 A:middle
That was in API Level 16 for

00:38:40.556 --> 00:38:41.606 A:middle
those of you paying attention.

00:38:42.406 --> 00:38:43.936 A:middle
And a couple of years ago,

00:38:44.076 --> 00:38:45.626 A:middle
Windows 10 added their own

00:38:45.706 --> 00:38:47.206 A:middle
native Bonjour support.

00:38:47.756 --> 00:38:48.936 A:middle
Now, I know a lot of people in

00:38:48.936 --> 00:38:50.376 A:middle
this room are well aware of the

00:38:50.476 --> 00:38:50.926 A:middle
history.

00:38:51.236 --> 00:38:52.846 A:middle
We know about the major OS

00:38:52.846 --> 00:38:54.596 A:middle
vendors adopting Bonjour.

00:38:55.726 --> 00:38:57.116 A:middle
But something else happened that

00:38:57.116 --> 00:38:59.366 A:middle
surprised even me: Bonjour

00:38:59.366 --> 00:39:01.616 A:middle
started showing up in a lot of

00:39:01.616 --> 00:39:02.416 A:middle
other places.

00:39:02.666 --> 00:39:04.066 A:middle
And I want to illustrate this

00:39:04.326 --> 00:39:05.456 A:middle
with just a little personal

00:39:05.456 --> 00:39:06.016 A:middle
anecdote.

00:39:06.066 --> 00:39:07.586 A:middle
I recently bought a new house.

00:39:08.316 --> 00:39:09.716 A:middle
And as part of the process of

00:39:09.716 --> 00:39:11.126 A:middle
buying a new house, you often

00:39:11.126 --> 00:39:12.116 A:middle
end up buying a bunch of new

00:39:12.116 --> 00:39:12.556 A:middle
stuff.

00:39:13.136 --> 00:39:14.816 A:middle
And I started adding things to

00:39:14.816 --> 00:39:16.706 A:middle
my home and connecting things to

00:39:16.706 --> 00:39:17.346 A:middle
the network.

00:39:17.966 --> 00:39:19.426 A:middle
And I started finding a bunch of

00:39:19.426 --> 00:39:20.896 A:middle
stuff showing up in Bonjour.

00:39:20.896 --> 00:39:22.246 A:middle
Now, I bought a new printer; it

00:39:22.246 --> 00:39:23.026 A:middle
had Bonjour.

00:39:23.236 --> 00:39:25.266 A:middle
I bought some Access Network

00:39:25.266 --> 00:39:26.786 A:middle
security cameras, they had

00:39:26.826 --> 00:39:27.316 A:middle
Bonjour.

00:39:27.316 --> 00:39:28.916 A:middle
That didn't surprise me because

00:39:28.916 --> 00:39:30.686 A:middle
we know printers and network

00:39:30.686 --> 00:39:31.956 A:middle
cameras were among the first

00:39:31.956 --> 00:39:33.386 A:middle
devices to adopt Bonjour.

00:39:35.056 --> 00:39:37.326 A:middle
But then I got a surround sound

00:39:37.326 --> 00:39:41.216 A:middle
amplifier and it had Wi-Fi, and

00:39:41.216 --> 00:39:43.276 A:middle
it had an embedded web server

00:39:43.546 --> 00:39:44.536 A:middle
with Bonjour.

00:39:45.066 --> 00:39:46.346 A:middle
Now, you can set up the

00:39:46.346 --> 00:39:47.946 A:middle
amplifier with the TV and the

00:39:47.946 --> 00:39:50.136 A:middle
remote control, but naming the

00:39:50.136 --> 00:39:51.956 A:middle
inputs with up, down, left,

00:39:51.956 --> 00:39:53.286 A:middle
right on the remote control one

00:39:53.286 --> 00:39:54.586 A:middle
character at a time is really

00:39:54.586 --> 00:39:55.056 A:middle
tedious.

00:39:55.396 --> 00:39:56.536 A:middle
Being able to do this on my

00:39:56.536 --> 00:39:58.966 A:middle
laptop or on my 27-inch iMac

00:39:59.126 --> 00:40:00.956 A:middle
with a keyboard and a mouse is

00:40:00.956 --> 00:40:03.206 A:middle
such a nicer way to set up a new

00:40:03.206 --> 00:40:04.046 A:middle
piece of equipment.

00:40:04.166 --> 00:40:06.216 A:middle
I bought another amplifier from

00:40:06.216 --> 00:40:07.536 A:middle
different company, it also had

00:40:07.536 --> 00:40:08.116 A:middle
Bonjour.

00:40:08.826 --> 00:40:10.276 A:middle
I got solar panels on the roof

00:40:10.276 --> 00:40:11.556 A:middle
of the house to save on the

00:40:11.556 --> 00:40:13.516 A:middle
electricity bill, the inverter

00:40:13.836 --> 00:40:16.356 A:middle
has Wi-Fi with an embedded web

00:40:16.356 --> 00:40:18.696 A:middle
server advertised with Bonjour.

00:40:19.016 --> 00:40:21.166 A:middle
So now with one click, I can see

00:40:21.166 --> 00:40:22.966 A:middle
a graph of how much power I've

00:40:23.006 --> 00:40:25.056 A:middle
produced in the day.

00:40:25.056 --> 00:40:27.306 A:middle
My most recent purchase was an

00:40:27.306 --> 00:40:29.846 A:middle
irrigation controller to control

00:40:29.846 --> 00:40:30.996 A:middle
the sprinklers that water my

00:40:30.996 --> 00:40:31.606 A:middle
lawn.

00:40:32.256 --> 00:40:34.136 A:middle
It has Wi-Fi with an embedded

00:40:34.136 --> 00:40:35.896 A:middle
web server advertised with

00:40:35.896 --> 00:40:36.586 A:middle
Bonjour.

00:40:37.166 --> 00:40:38.656 A:middle
Compared to trying to program

00:40:38.656 --> 00:40:40.326 A:middle
your garden sprinkles with a

00:40:40.326 --> 00:40:42.196 A:middle
two-digital LCD display and the

00:40:42.246 --> 00:40:44.186 A:middle
plus minus buttons, this is such

00:40:44.186 --> 00:40:45.916 A:middle
a glorious experience to see it

00:40:45.916 --> 00:40:47.576 A:middle
all on my big iMac screen at the

00:40:47.576 --> 00:40:47.976 A:middle
same time.

00:40:48.516 --> 00:40:54.546 A:middle
[ Applause ]

00:40:55.046 --> 00:40:56.626 A:middle
So thank you to all you device

00:40:56.626 --> 00:40:57.696 A:middle
makers who are making these

00:40:57.696 --> 00:40:58.576 A:middle
wonderful products.

00:40:58.896 --> 00:41:00.646 A:middle
For the app developers in the

00:41:00.646 --> 00:41:03.446 A:middle
room, how does this affect you?

00:41:04.046 --> 00:41:05.906 A:middle
The IETF DNS Service Discovery

00:41:05.906 --> 00:41:07.696 A:middle
Working Group continues to make

00:41:07.726 --> 00:41:08.306 A:middle
progress.

00:41:09.686 --> 00:41:11.566 A:middle
We have new enhancements to do

00:41:11.566 --> 00:41:13.466 A:middle
serve discovery on enterprise

00:41:13.466 --> 00:41:15.266 A:middle
networks where multicast is not

00:41:15.266 --> 00:41:16.926 A:middle
efficient and on new mesh

00:41:16.926 --> 00:41:18.166 A:middle
network technologies that like

00:41:18.266 --> 00:41:19.686 A:middle
Thread that don't support

00:41:19.686 --> 00:41:20.516 A:middle
multicast well.

00:41:21.176 --> 00:41:22.756 A:middle
The good news for app developers

00:41:22.816 --> 00:41:23.826 A:middle
is this is all completely

00:41:23.826 --> 00:41:25.146 A:middle
transparent to your apps.

00:41:25.146 --> 00:41:26.796 A:middle
The APIs haven't changed because

00:41:26.796 --> 00:41:28.716 A:middle
we anticipated these things even

00:41:28.716 --> 00:41:29.666 A:middle
15 years ago.

00:41:30.276 --> 00:41:32.146 A:middle
The only thing to remember is

00:41:32.146 --> 00:41:33.876 A:middle
when you do a browse call and

00:41:33.876 --> 00:41:35.286 A:middle
you get back a name, type, and

00:41:35.286 --> 00:41:37.226 A:middle
domain, pay attention to all

00:41:37.226 --> 00:41:37.636 A:middle
three.

00:41:38.016 --> 00:41:41.256 A:middle
You may be used to see the

00:41:41.256 --> 00:41:43.136 A:middle
domain always being local, but

00:41:43.136 --> 00:41:44.266 A:middle
now it may not be local.

00:41:44.606 --> 00:41:46.816 A:middle
So when you call resolve, make

00:41:46.816 --> 00:41:48.476 A:middle
sure to pass the name, type, and

00:41:48.476 --> 00:41:49.616 A:middle
domain you got from the browse

00:41:49.616 --> 00:41:49.866 A:middle
call.

00:41:50.066 --> 00:41:51.796 A:middle
And for the device makers out

00:41:51.796 --> 00:41:54.006 A:middle
there, don't forget to support

00:41:54.176 --> 00:41:55.226 A:middle
link-local addressing.

00:41:55.326 --> 00:41:56.506 A:middle
Link-local addressing is the

00:41:56.506 --> 00:41:58.156 A:middle
most reliable way to get to a

00:41:58.156 --> 00:41:59.486 A:middle
device on the local network

00:42:00.316 --> 00:42:02.186 A:middle
because if you can't configure

00:42:02.186 --> 00:42:03.726 A:middle
it, you can't misconfigure it.

00:42:04.516 --> 00:42:07.086 A:middle
[ Laughter ]

00:42:07.586 --> 00:42:10.066 A:middle
So to wrap up, in part one we

00:42:10.096 --> 00:42:12.386 A:middle
talked about ongoing progress in

00:42:12.486 --> 00:42:12.826 A:middle
ECN.

00:42:13.196 --> 00:42:14.636 A:middle
It's now supported in clients

00:42:14.636 --> 00:42:16.386 A:middle
and servers, the stage is set.

00:42:16.786 --> 00:42:18.636 A:middle
Any ISP can now see an immediate

00:42:18.636 --> 00:42:20.276 A:middle
benefit for their customers by

00:42:20.276 --> 00:42:21.996 A:middle
turning on ECN at the key

00:42:21.996 --> 00:42:22.896 A:middle
bottleneck links.

00:42:23.776 --> 00:42:25.196 A:middle
Continue testing your apps on

00:42:25.196 --> 00:42:25.626 A:middle
NAT64.

00:42:25.676 --> 00:42:29.026 A:middle
Mostly known use there, we're

00:42:29.026 --> 00:42:30.266 A:middle
very happy everything is going

00:42:30.266 --> 00:42:30.736 A:middle
smoothly.

00:42:32.766 --> 00:42:34.236 A:middle
We have a move to user space

00:42:34.236 --> 00:42:36.216 A:middle
networking, which also doesn't

00:42:36.216 --> 00:42:36.976 A:middle
change the APIs.

00:42:37.036 --> 00:42:39.126 A:middle
But you may notice when you're

00:42:39.166 --> 00:42:40.586 A:middle
debugging and looking at stack

00:42:40.586 --> 00:42:42.196 A:middle
traces, you may see symbols in

00:42:42.196 --> 00:42:43.366 A:middle
the stack trace you're not used

00:42:43.366 --> 00:42:43.496 A:middle
to.

00:42:43.496 --> 00:42:44.886 A:middle
You may see differences in CPU

00:42:44.886 --> 00:42:45.626 A:middle
usage.

00:42:45.986 --> 00:42:46.966 A:middle
We wanted to you to be aware of

00:42:46.966 --> 00:42:48.246 A:middle
that so it didn't surprise you.

00:42:49.196 --> 00:42:51.426 A:middle
We have new capabilities in the

00:42:51.426 --> 00:42:52.836 A:middle
network extension framework.

00:42:53.436 --> 00:42:55.116 A:middle
And the big news, we have

00:42:55.196 --> 00:42:58.346 A:middle
multipath TCP as used by Siri

00:42:58.496 --> 00:42:59.836 A:middle
now available for your apps to

00:42:59.836 --> 00:43:00.736 A:middle
use as well.

00:43:01.996 --> 00:43:02.706 A:middle
Thank you.

00:43:03.516 --> 00:43:07.956 A:middle
[ Applause ]

00:43:08.456 --> 00:43:10.526 A:middle
In part two, we covered some

00:43:10.526 --> 00:43:12.076 A:middle
enhancements in URLSession,

00:43:12.076 --> 00:43:12.736 A:middle
especially the

00:43:12.736 --> 00:43:14.656 A:middle
waitsForConnectivity, which is

00:43:14.656 --> 00:43:16.706 A:middle
really networking APIs done the

00:43:16.706 --> 00:43:18.326 A:middle
way they always should have

00:43:18.326 --> 00:43:18.576 A:middle
done.

00:43:18.856 --> 00:43:20.736 A:middle
When you ask us to do something,

00:43:21.106 --> 00:43:22.476 A:middle
we should just do it, not bother

00:43:22.476 --> 00:43:24.406 A:middle
you with silly error messages

00:43:24.406 --> 00:43:25.636 A:middle
that it can't be done right now.

00:43:25.776 --> 00:43:27.196 A:middle
You ask us, we will do it when

00:43:27.196 --> 00:43:27.566 A:middle
we can.

00:43:28.506 --> 00:43:29.736 A:middle
I gave some tips about best

00:43:29.786 --> 00:43:33.296 A:middle
practices and news about ongoing

00:43:33.296 --> 00:43:33.986 A:middle
developments.

00:43:34.826 --> 00:43:35.946 A:middle
You can get more information

00:43:36.476 --> 00:43:37.706 A:middle
about this session on the web.

00:43:39.186 --> 00:43:41.196 A:middle
We have some other sessions we

00:43:41.196 --> 00:43:42.586 A:middle
recommend you hear that you'll

00:43:42.586 --> 00:43:44.216 A:middle
probably find interesting.

00:43:44.866 --> 00:43:45.216 A:middle
Thank you.

00:43:46.516 --> 00:43:51.500 A:middle
[ Applause ]