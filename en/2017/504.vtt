WEBVTT

00:00:22.786 --> 00:00:23.436 A:middle
&gt;&gt; Hey there!

00:00:23.576 --> 00:00:24.486 A:middle
Hi, everyone.

00:00:24.486 --> 00:00:27.096 A:middle
Good afternoon and welcome to

00:00:27.376 --> 00:00:30.296 A:middle
this year's edition of what the

00:00:30.296 --> 00:00:31.816 A:middle
heck have those HLS folks been

00:00:31.816 --> 00:00:32.555 A:middle
up to lately.

00:00:33.536 --> 00:00:34.926 A:middle
It wouldn't fit on the slide

00:00:34.926 --> 00:00:37.456 A:middle
though so you kind of get what

00:00:37.456 --> 00:00:37.976 A:middle
you get.

00:00:37.976 --> 00:00:39.156 A:middle
My name is Roger Pantos.

00:00:39.156 --> 00:00:40.806 A:middle
I'm going to be your host here

00:00:40.806 --> 00:00:43.306 A:middle
tonight and we have a bunch of

00:00:43.306 --> 00:00:44.296 A:middle
stuff to talk about.

00:00:44.616 --> 00:00:46.916 A:middle
We have some new CODECS that are

00:00:46.916 --> 00:00:48.456 A:middle
interesting, we have some new

00:00:48.456 --> 00:00:50.926 A:middle
streaming features, and we have

00:00:50.926 --> 00:00:53.246 A:middle
some enhancements to our APIs.

00:00:53.986 --> 00:00:57.296 A:middle
But first, we have our own

00:00:57.296 --> 00:00:58.276 A:middle
announcement to make.

00:00:58.806 --> 00:01:01.436 A:middle
I am happy to announce that the

00:00:58.806 --> 00:01:01.436 A:middle
I am happy to announce that the

00:01:01.436 --> 00:01:05.366 A:middle
IETF has approved the

00:01:05.366 --> 00:01:08.036 A:middle
publication of the HLS spec as

00:01:08.036 --> 00:01:08.926 A:middle
an Internet draft.

00:01:09.516 --> 00:01:14.256 A:middle
[ Applause ]

00:01:14.756 --> 00:01:16.826 A:middle
So what this means is that the

00:01:16.826 --> 00:01:19.326 A:middle
current draft that's published

00:01:19.326 --> 00:01:22.086 A:middle
on the site now, which is -23,

00:01:22.356 --> 00:01:23.786 A:middle
will move through the IETF

00:01:23.786 --> 00:01:25.556 A:middle
publication process and once it

00:01:25.556 --> 00:01:27.556 A:middle
does then it will be assigned an

00:01:27.556 --> 00:01:28.276 A:middle
RFC number.

00:01:29.066 --> 00:01:31.796 A:middle
Now we've been sort of

00:01:31.796 --> 00:01:33.366 A:middle
refreshing the draft for like 8

00:01:33.366 --> 00:01:36.096 A:middle
or 9 years now and there's a bit

00:01:36.096 --> 00:01:37.486 A:middle
of question, okay, well why now?

00:01:37.486 --> 00:01:38.326 A:middle
Why publish an RFC?

00:01:38.326 --> 00:01:40.976 A:middle
One of the reasons is that we

00:01:40.976 --> 00:01:42.496 A:middle
have heard feedback from some

00:01:42.496 --> 00:01:44.726 A:middle
people that it's a little scary

00:01:44.726 --> 00:01:46.276 A:middle
to be writing to a spec that's

00:01:46.276 --> 00:01:47.926 A:middle
sort of continuously in draft

00:01:47.926 --> 00:01:48.216 A:middle
mode.

00:01:48.686 --> 00:01:49.606 A:middle
And we get that.

00:01:49.766 --> 00:01:51.016 A:middle
We understand it.

00:01:51.016 --> 00:01:54.016 A:middle
And so publishing the spec as an

00:01:54.016 --> 00:01:56.666 A:middle
RFC will allow it to serve as a

00:01:56.666 --> 00:01:59.636 A:middle
stable reference going forward,

00:01:59.976 --> 00:02:01.846 A:middle
which means that you'll be able

00:01:59.976 --> 00:02:01.846 A:middle
which means that you'll be able

00:02:01.846 --> 00:02:03.736 A:middle
to build on it with confidence,

00:02:03.736 --> 00:02:05.206 A:middle
you'll be able to cite it in

00:02:05.206 --> 00:02:08.295 A:middle
other specifications, and we

00:02:08.295 --> 00:02:10.196 A:middle
hope it will help improve things

00:02:10.196 --> 00:02:12.026 A:middle
a little bit in some areas of

00:02:12.026 --> 00:02:12.506 A:middle
the industry.

00:02:13.496 --> 00:02:15.846 A:middle
Now, are we going to stop

00:02:16.146 --> 00:02:17.456 A:middle
improving HLS?

00:02:17.586 --> 00:02:18.506 A:middle
No, of course not.

00:02:18.506 --> 00:02:20.606 A:middle
We're going to continue to

00:02:21.326 --> 00:02:22.496 A:middle
evolve it.

00:02:22.916 --> 00:02:24.236 A:middle
And we're going to make it

00:02:24.876 --> 00:02:28.126 A:middle
better and better for the user's

00:02:28.126 --> 00:02:30.026 A:middle
streaming experience, starting

00:02:30.026 --> 00:02:30.766 A:middle
with the things we're going to

00:02:30.766 --> 00:02:31.596 A:middle
be talking about today.

00:02:32.186 --> 00:02:33.646 A:middle
And so the way we're going to do

00:02:33.646 --> 00:02:35.936 A:middle
that is we're going to introduce

00:02:35.936 --> 00:02:38.166 A:middle
a new internet draft that will

00:02:38.306 --> 00:02:40.076 A:middle
build upon the coming RFC as a

00:02:40.076 --> 00:02:42.426 A:middle
baseline and so keep an eye out

00:02:43.336 --> 00:02:44.206 A:middle
for that.

00:02:44.206 --> 00:02:45.536 A:middle
Okay. Now, let's move to the

00:02:45.536 --> 00:02:46.986 A:middle
other big news of the conference

00:02:47.106 --> 00:02:48.906 A:middle
which is HEVC.

00:02:49.446 --> 00:02:50.946 A:middle
As you heard at the keynotes and

00:02:50.946 --> 00:02:53.696 A:middle
elsewhere, Apple has chosen HEVC

00:02:53.696 --> 00:02:55.166 A:middle
as our next generation video

00:02:55.166 --> 00:02:55.656 A:middle
CODEC.

00:02:56.326 --> 00:02:58.046 A:middle
Now, why did we do it?

00:02:58.386 --> 00:02:59.766 A:middle
In one word, efficiency.

00:03:00.306 --> 00:03:02.656 A:middle
And primarily, encoding

00:03:04.206 --> 00:03:05.566 A:middle
efficiency.

00:03:05.566 --> 00:03:09.286 A:middle
HEVC is around abouts 40% more

00:03:09.286 --> 00:03:10.386 A:middle
efficient than AVC.

00:03:10.386 --> 00:03:11.806 A:middle
I mean, it depends on your

00:03:11.806 --> 00:03:13.086 A:middle
content and it depends how good

00:03:13.086 --> 00:03:14.806 A:middle
your encoder is, but 40% is a

00:03:14.806 --> 00:03:16.186 A:middle
nice ballpark figure.

00:03:16.966 --> 00:03:18.686 A:middle
And for those of us who spend

00:03:18.686 --> 00:03:20.036 A:middle
our time schlepping media over

00:03:20.036 --> 00:03:22.326 A:middle
network that's exciting because

00:03:22.326 --> 00:03:23.996 A:middle
first of all it means that your

00:03:23.996 --> 00:03:26.826 A:middle
user is going to see startup at

00:03:26.826 --> 00:03:29.276 A:middle
a decent quality 40% faster, and

00:03:29.276 --> 00:03:30.636 A:middle
when the player adapts its way

00:03:30.636 --> 00:03:32.036 A:middle
all the way up they'll see

00:03:32.036 --> 00:03:34.136 A:middle
content that looks 40% better.

00:03:34.986 --> 00:03:37.786 A:middle
And so that's an important thing

00:03:37.786 --> 00:03:38.276 A:middle
for us.

00:03:38.506 --> 00:03:40.016 A:middle
So HEVC is good.

00:03:40.136 --> 00:03:42.136 A:middle
Where can you get it?

00:03:42.136 --> 00:03:44.326 A:middle
Well as we've said, we are

00:03:44.326 --> 00:03:46.176 A:middle
making HEVC widely available.

00:03:46.376 --> 00:03:47.896 A:middle
And in fact, on our newest

00:03:47.896 --> 00:03:49.836 A:middle
devices, our newest iOS devices

00:03:49.836 --> 00:03:52.586 A:middle
with A9 and later and our latest

00:03:52.586 --> 00:03:54.676 A:middle
generation of Macintoshes, we

00:03:54.676 --> 00:03:56.436 A:middle
have support for HEVC built into

00:03:56.436 --> 00:03:57.866 A:middle
the hardware and so that

00:03:57.866 --> 00:03:59.486 A:middle
includes support for FairPlay

00:03:59.486 --> 00:03:59.966 A:middle
Streaming.

00:04:00.466 --> 00:04:02.906 A:middle
Even on devices, on older

00:04:02.906 --> 00:04:05.266 A:middle
devices that don't have that

00:04:05.266 --> 00:04:07.306 A:middle
hardware support, we are still

00:04:07.306 --> 00:04:09.796 A:middle
going to deploy a software HEVC

00:04:09.796 --> 00:04:10.366 A:middle
CODEC.

00:04:10.746 --> 00:04:12.276 A:middle
And so that will be on all the

00:04:12.276 --> 00:04:14.356 A:middle
iOS devices receiving, iOS 11.

00:04:14.626 --> 00:04:16.156 A:middle
That will include the Apple TV

00:04:16.156 --> 00:04:19.245 A:middle
with tvOS 11 and Macintoshes

00:04:19.466 --> 00:04:21.976 A:middle
that are upgraded to High

00:04:21.976 --> 00:04:22.486 A:middle
Sierra.

00:04:23.216 --> 00:04:26.136 A:middle
So, HEVC is going to be a lot of

00:04:26.136 --> 00:04:26.926 A:middle
different places.

00:04:27.216 --> 00:04:29.476 A:middle
We'd like you to use it.

00:04:29.476 --> 00:04:32.226 A:middle
And to use it with HLS there are

00:04:32.226 --> 00:04:33.376 A:middle
a few things you need to keep in

00:04:33.376 --> 00:04:33.736 A:middle
mind.

00:04:34.356 --> 00:04:36.806 A:middle
The first is that HEVC

00:04:36.806 --> 00:04:39.736 A:middle
represents an entirely brand new

00:04:39.736 --> 00:04:42.176 A:middle
encode of your content for a lot

00:04:42.176 --> 00:04:44.636 A:middle
of people, and that means on the

00:04:44.636 --> 00:04:45.546 A:middle
bright side there's no

00:04:45.546 --> 00:04:47.216 A:middle
compatibility version -- burden,

00:04:47.216 --> 00:04:47.526 A:middle
rather.

00:04:47.976 --> 00:04:50.946 A:middle
And so we decided that it was a

00:04:50.946 --> 00:04:53.556 A:middle
good time to refocus our

00:04:53.556 --> 00:04:55.286 A:middle
attention on a single container

00:04:55.286 --> 00:04:56.816 A:middle
format and we looked at the

00:04:56.816 --> 00:04:59.136 A:middle
alternatives and we decided that

00:04:59.136 --> 00:05:01.296 A:middle
fragmented MPEG-4 had the most

00:04:59.136 --> 00:05:01.296 A:middle
fragmented MPEG-4 had the most

00:05:01.296 --> 00:05:02.546 A:middle
legs going forward.

00:05:02.786 --> 00:05:04.596 A:middle
So that means if you're going to

00:05:04.596 --> 00:05:07.726 A:middle
deploy your HEVC content to HLS,

00:05:08.036 --> 00:05:10.746 A:middle
it has to be packaged as MP4

00:05:10.746 --> 00:05:11.516 A:middle
fragments.

00:05:13.516 --> 00:05:16.156 A:middle
[ Applause ]

00:05:16.656 --> 00:05:19.016 A:middle
Now, another nice thing there is

00:05:19.016 --> 00:05:21.836 A:middle
that it makes the encoding story

00:05:21.946 --> 00:05:23.856 A:middle
or rather the encryption story a

00:05:23.856 --> 00:05:27.196 A:middle
little bit simpler because our

00:05:27.196 --> 00:05:29.856 A:middle
old buddy common encryption in

00:05:29.856 --> 00:05:32.116 A:middle
cbcs mode works the same way

00:05:32.116 --> 00:05:34.956 A:middle
with HEVC as it does with H.264.

00:05:35.246 --> 00:05:36.306 A:middle
And so there are no new rules

00:05:36.306 --> 00:05:37.326 A:middle
there, you just have to do the

00:05:37.326 --> 00:05:39.366 A:middle
same sort of thing you do to

00:05:40.946 --> 00:05:43.386 A:middle
your HEVC bit streams.

00:05:43.506 --> 00:05:46.266 A:middle
As with any new CODEC, you're

00:05:46.266 --> 00:05:47.756 A:middle
going to be deploying it to an

00:05:47.756 --> 00:05:49.436 A:middle
ecosystem where some devices

00:05:49.436 --> 00:05:51.656 A:middle
can't speak HEVC and so it is

00:05:51.656 --> 00:05:53.746 A:middle
critically important that you

00:05:53.746 --> 00:05:55.916 A:middle
mark your bit streams as HEVC so

00:05:55.916 --> 00:05:56.776 A:middle
the devices that don't

00:05:56.776 --> 00:05:58.476 A:middle
understand it can steer around

00:05:59.456 --> 00:05:59.546 A:middle
it.

00:05:59.546 --> 00:06:01.326 A:middle
And the way to do that, of

00:05:59.546 --> 00:06:01.326 A:middle
And the way to do that, of

00:06:01.326 --> 00:06:02.516 A:middle
course in HLS, is with the

00:06:02.516 --> 00:06:03.956 A:middle
CODECS attribute in your master

00:06:03.956 --> 00:06:04.576 A:middle
playlist.

00:06:04.636 --> 00:06:07.586 A:middle
I've got an example here of a

00:06:07.816 --> 00:06:09.296 A:middle
CODECS attribute for HEVC.

00:06:09.296 --> 00:06:10.566 A:middle
It's a little bit more

00:06:10.566 --> 00:06:12.296 A:middle
complicated than H.264 but it's

00:06:12.296 --> 00:06:13.386 A:middle
not -- it's got a few more

00:06:13.386 --> 00:06:15.486 A:middle
things in it but it's not too

00:06:15.486 --> 00:06:15.576 A:middle
bad.

00:06:15.576 --> 00:06:17.656 A:middle
And the entire format is

00:06:17.756 --> 00:06:21.456 A:middle
documented in the HEVC spec. So

00:06:21.456 --> 00:06:22.786 A:middle
speaking of older clients in

00:06:22.786 --> 00:06:25.216 A:middle
H.264, there is naturally kind

00:06:25.216 --> 00:06:26.586 A:middle
of a compatibility question

00:06:26.586 --> 00:06:29.546 A:middle
around here of, first of all,

00:06:29.546 --> 00:06:33.436 A:middle
can you deploy a single asset to

00:06:33.436 --> 00:06:35.466 A:middle
both older and new clients?

00:06:35.606 --> 00:06:36.836 A:middle
And the answer is yes.

00:06:39.996 --> 00:06:42.446 A:middle
Here we go.

00:06:42.636 --> 00:06:45.896 A:middle
You can mix HEVC and H.264

00:06:45.896 --> 00:06:47.556 A:middle
variants in the same master

00:06:47.556 --> 00:06:49.606 A:middle
playlist, and that goes for both

00:06:49.606 --> 00:06:51.586 A:middle
the regular video variance and

00:06:51.586 --> 00:06:52.756 A:middle
also the I-frame variance.

00:06:52.756 --> 00:06:54.606 A:middle
You can have HEVC and H.264

00:06:54.606 --> 00:06:55.906 A:middle
versions of those as well.

00:06:56.646 --> 00:06:59.086 A:middle
As I said, you do need to

00:06:59.086 --> 00:07:01.176 A:middle
package your HEVC in MPEG-4

00:06:59.086 --> 00:07:01.176 A:middle
package your HEVC in MPEG-4

00:07:01.176 --> 00:07:02.776 A:middle
fragments, but for backward

00:07:02.776 --> 00:07:04.766 A:middle
compatibility H.264 can either

00:07:04.766 --> 00:07:07.326 A:middle
be in transforce frames or in

00:07:07.326 --> 00:07:09.266 A:middle
fragmented MPEG-4, your choice.

00:07:09.766 --> 00:07:11.566 A:middle
Again, it becomes even more

00:07:11.566 --> 00:07:12.606 A:middle
critically important that you

00:07:12.606 --> 00:07:14.886 A:middle
label your media playlist so

00:07:14.886 --> 00:07:17.306 A:middle
that we know what is what.

00:07:18.736 --> 00:07:20.706 A:middle
And finally, we have actually

00:07:20.706 --> 00:07:22.226 A:middle
updated -- we have -- if

00:07:22.226 --> 00:07:23.756 A:middle
you-guys don't know, we have a

00:07:23.756 --> 00:07:24.966 A:middle
document called the HLS

00:07:24.966 --> 00:07:27.206 A:middle
Authoring guidelines, Best

00:07:27.266 --> 00:07:29.076 A:middle
practices for Apple TV and

00:07:29.076 --> 00:07:30.016 A:middle
stuff.

00:07:30.016 --> 00:07:31.406 A:middle
I think we changed the name.

00:07:31.796 --> 00:07:33.146 A:middle
But anyway, it doesn't matter

00:07:33.146 --> 00:07:35.286 A:middle
because there's actually a video

00:07:35.286 --> 00:07:36.676 A:middle
on demand talk that's available

00:07:36.676 --> 00:07:38.986 A:middle
today called the HLS Authoring

00:07:38.986 --> 00:07:40.476 A:middle
Update, and we've updated that

00:07:40.476 --> 00:07:42.096 A:middle
for HEVC.

00:07:42.316 --> 00:07:44.656 A:middle
And so the Authoring guide now

00:07:44.656 --> 00:07:46.036 A:middle
has some additional

00:07:46.036 --> 00:07:48.216 A:middle
considerations for HEVC as well

00:07:48.216 --> 00:07:50.886 A:middle
as sort of a initial set of

00:07:50.886 --> 00:07:52.346 A:middle
recommended bit-rate tiers to

00:07:52.346 --> 00:07:53.436 A:middle
get you-guys going on that.

00:07:53.436 --> 00:07:54.996 A:middle
So check out that talk.

00:07:55.336 --> 00:07:57.226 A:middle
I hear the guy giving it is

00:07:57.746 --> 00:07:58.366 A:middle
awesome.

00:07:59.606 --> 00:08:03.616 A:middle
Next, we've got a new subtitle

00:07:59.606 --> 00:08:03.616 A:middle
Next, we've got a new subtitle

00:08:03.616 --> 00:08:07.706 A:middle
format, and this is called IMSC.

00:08:08.096 --> 00:08:10.186 A:middle
Now many of you will not have

00:08:10.186 --> 00:08:11.126 A:middle
heard of IMSC.

00:08:11.126 --> 00:08:14.486 A:middle
In the consumer space it's not

00:08:14.486 --> 00:08:17.466 A:middle
quite as big as VTT is yet, but

00:08:18.206 --> 00:08:22.536 A:middle
it is sort of a grandchild of a

00:08:22.536 --> 00:08:23.996 A:middle
more well-known format called

00:08:23.996 --> 00:08:25.266 A:middle
the Timed Text Markup Language

00:08:25.266 --> 00:08:26.116 A:middle
or TTML.

00:08:26.486 --> 00:08:29.446 A:middle
TTML is kind of a extremely

00:08:29.446 --> 00:08:31.386 A:middle
expressive, not particularly

00:08:31.386 --> 00:08:33.716 A:middle
lightweight authoring language,

00:08:33.716 --> 00:08:35.056 A:middle
primarily, for subtitles and

00:08:35.056 --> 00:08:37.405 A:middle
captions and it's used for

00:08:37.405 --> 00:08:39.506 A:middle
mezzanines and interchange and

00:08:39.506 --> 00:08:40.905 A:middle
that kind of thing.

00:08:40.905 --> 00:08:41.905 A:middle
And so what the Timed Text

00:08:41.905 --> 00:08:44.436 A:middle
working group did was they took

00:08:44.436 --> 00:08:47.206 A:middle
TTML and they kind of slimed it

00:08:47.206 --> 00:08:48.346 A:middle
down, streamlined it a little

00:08:48.346 --> 00:08:50.276 A:middle
bit for delivery of regular

00:08:50.276 --> 00:08:51.756 A:middle
captions to consumers over the

00:08:51.756 --> 00:08:52.166 A:middle
Internet.

00:08:52.536 --> 00:08:54.696 A:middle
And so that is called IMSC.

00:08:55.756 --> 00:08:58.696 A:middle
Now, we already do VTT and so it

00:08:58.696 --> 00:08:59.806 A:middle
brings the obvious question of

00:08:59.806 --> 00:09:01.446 A:middle
well why is IMSC different?

00:08:59.806 --> 00:09:01.446 A:middle
well why is IMSC different?

00:09:01.856 --> 00:09:04.696 A:middle
And the primary difference is

00:09:04.696 --> 00:09:07.436 A:middle
that IMSC has much better

00:09:07.436 --> 00:09:09.216 A:middle
support, much more extensive

00:09:09.216 --> 00:09:11.706 A:middle
styling controls than VTT does.

00:09:11.706 --> 00:09:13.636 A:middle
VTT kind of has a few basic

00:09:13.636 --> 00:09:15.616 A:middle
styling controls and then for

00:09:15.706 --> 00:09:18.346 A:middle
the rest of it leans on CSS.

00:09:18.346 --> 00:09:19.446 A:middle
IMSC has a much more

00:09:19.446 --> 00:09:21.786 A:middle
self-contained set of styling

00:09:21.786 --> 00:09:24.576 A:middle
features that are focused on the

00:09:24.576 --> 00:09:26.346 A:middle
kind of stylings you need to do

00:09:26.346 --> 00:09:28.116 A:middle
for subtitles and captions.

00:09:28.786 --> 00:09:32.016 A:middle
And so it's gotten a certain

00:09:32.016 --> 00:09:33.496 A:middle
amount of traction, particularly

00:09:33.496 --> 00:09:34.896 A:middle
in the broadcasting industry,

00:09:35.516 --> 00:09:38.386 A:middle
and so much so that it was

00:09:38.386 --> 00:09:40.946 A:middle
chosen last year as the baseline

00:09:40.946 --> 00:09:42.896 A:middle
format for MPEG's common media

00:09:42.896 --> 00:09:45.236 A:middle
application format that we told

00:09:45.236 --> 00:09:46.016 A:middle
you about last year.

00:09:47.016 --> 00:09:49.456 A:middle
And so what we're doing in iOS

00:09:49.456 --> 00:09:50.906 A:middle
11 and the other various

00:09:50.906 --> 00:09:54.036 A:middle
releases is we are rolling out a

00:09:54.036 --> 00:09:56.526 A:middle
first generation ground-up

00:09:56.686 --> 00:10:01.186 A:middle
implementation of IMSC and so

00:09:56.686 --> 00:10:01.186 A:middle
implementation of IMSC and so

00:10:01.186 --> 00:10:02.406 A:middle
that's in your seat today, and

00:10:02.406 --> 00:10:04.846 A:middle
we expect to refine it going

00:10:04.846 --> 00:10:05.256 A:middle
forward.

00:10:06.006 --> 00:10:10.156 A:middle
So just as with HEVC, there are

00:10:10.156 --> 00:10:11.186 A:middle
a few things you need to know

00:10:11.186 --> 00:10:12.476 A:middle
about IMSC in order to use it

00:10:12.476 --> 00:10:13.216 A:middle
with HLS.

00:10:13.516 --> 00:10:14.516 A:middle
The first thing is how it's

00:10:14.516 --> 00:10:15.136 A:middle
packaged.

00:10:15.496 --> 00:10:17.596 A:middle
Unlike VTT, which the segments

00:10:17.596 --> 00:10:18.836 A:middle
-- where the segments are just

00:10:18.836 --> 00:10:21.216 A:middle
little text files, the carriage

00:10:21.266 --> 00:10:23.296 A:middle
of IMSC is defined by MPEG-4,

00:10:23.296 --> 00:10:25.986 A:middle
part 30 and it basically what it

00:10:25.986 --> 00:10:28.106 A:middle
comes down to is XML text inside

00:10:28.106 --> 00:10:30.036 A:middle
of MPEG-4 fragments, and so it

00:10:30.036 --> 00:10:31.486 A:middle
takes advantage of all the

00:10:31.936 --> 00:10:33.426 A:middle
MPEG-4 timing facilities.

00:10:34.006 --> 00:10:35.866 A:middle
And I say text because IMSC

00:10:35.866 --> 00:10:38.546 A:middle
actually defines 2 profiles, an

00:10:38.546 --> 00:10:39.786 A:middle
image profile and a text

00:10:39.786 --> 00:10:40.286 A:middle
profile.

00:10:40.596 --> 00:10:43.306 A:middle
Our client only supports the

00:10:43.306 --> 00:10:46.846 A:middle
text profile of IMSC, and so

00:10:47.366 --> 00:10:49.586 A:middle
when you label your playlist,

00:10:49.586 --> 00:10:51.096 A:middle
which you should do because you

00:10:51.096 --> 00:10:52.726 A:middle
face the same issue with old

00:10:52.816 --> 00:10:54.266 A:middle
clients not understanding IMSC,

00:10:54.266 --> 00:10:57.116 A:middle
you'll want to add the CODECS

00:10:57.116 --> 00:10:59.676 A:middle
tag for IMSC, and I've included

00:10:59.676 --> 00:11:01.476 A:middle
a sample here which is

00:10:59.676 --> 00:11:01.476 A:middle
a sample here which is

00:11:01.516 --> 00:11:04.586 A:middle
stpp.TTML.im1t, and that

00:11:04.586 --> 00:11:06.146 A:middle
essentially says I have

00:11:06.146 --> 00:11:07.576 A:middle
subtitles in my playlist that

00:11:07.576 --> 00:11:10.646 A:middle
conform to the text profile of

00:11:10.646 --> 00:11:11.166 A:middle
IMSC1.

00:11:13.486 --> 00:11:15.596 A:middle
Now, I've been talking about

00:11:15.696 --> 00:11:17.326 A:middle
IMSC and HEVC sort of in the

00:11:17.326 --> 00:11:17.796 A:middle
same breath.

00:11:17.796 --> 00:11:20.126 A:middle
I just want to sort of emphasize

00:11:20.126 --> 00:11:21.496 A:middle
that they're not linked.

00:11:21.816 --> 00:11:22.856 A:middle
You can use them independently.

00:11:22.856 --> 00:11:23.656 A:middle
You can use HEVC with VTT.

00:11:23.656 --> 00:11:27.366 A:middle
You can use IMSC with H.264.

00:11:27.366 --> 00:11:28.356 A:middle
You can use them all together,

00:11:28.806 --> 00:11:30.826 A:middle
and you can actually even have a

00:11:30.826 --> 00:11:34.016 A:middle
single playlist that has VTT and

00:11:34.016 --> 00:11:36.056 A:middle
IMSC so that newer clients can

00:11:36.056 --> 00:11:37.906 A:middle
get the benefits of IMSC styling

00:11:38.076 --> 00:11:40.256 A:middle
and older clients can continue

00:11:40.256 --> 00:11:41.106 A:middle
to use VTT.

00:11:41.106 --> 00:11:41.996 A:middle
And so let's take a look at a

00:11:41.996 --> 00:11:43.026 A:middle
playlist and show you what that

00:11:43.026 --> 00:11:43.486 A:middle
looks like.

00:11:44.286 --> 00:11:45.516 A:middle
I've got a fragment of a master

00:11:45.516 --> 00:11:47.976 A:middle
playlist here and that first set

00:11:47.976 --> 00:11:49.586 A:middle
of lines up there should be

00:11:49.586 --> 00:11:50.636 A:middle
pretty familiar to you.

00:11:50.636 --> 00:11:51.796 A:middle
That's what your master playlist

00:11:51.796 --> 00:11:53.246 A:middle
would look like if you had a

00:11:53.246 --> 00:11:55.436 A:middle
video variant called bipbop

00:11:55.436 --> 00:11:57.946 A:middle
gear1 and it had VTT based

00:11:57.946 --> 00:11:59.076 A:middle
subtitles in it.

00:11:59.526 --> 00:12:02.676 A:middle
That next set of tags has the

00:11:59.526 --> 00:12:02.676 A:middle
That next set of tags has the

00:12:02.676 --> 00:12:05.316 A:middle
same video tier but in its

00:12:05.316 --> 00:12:07.376 A:middle
CODECS attribute you see it's

00:12:07.376 --> 00:12:08.786 A:middle
labeled as IMSC.

00:12:09.116 --> 00:12:11.766 A:middle
And so the first one will pull

00:12:11.766 --> 00:12:15.086 A:middle
down the VTT.m3u8 playlist, the

00:12:15.086 --> 00:12:16.606 A:middle
second will pull down the IMSC

00:12:16.606 --> 00:12:17.896 A:middle
if the client can understand

00:12:17.896 --> 00:12:18.086 A:middle
that.

00:12:18.156 --> 00:12:20.886 A:middle
If we sort of dive into those

00:12:20.886 --> 00:12:22.126 A:middle
two media playlists they're

00:12:22.126 --> 00:12:23.166 A:middle
actually pretty similar.

00:12:23.166 --> 00:12:26.576 A:middle
You can see that the VTT is, you

00:12:26.816 --> 00:12:28.006 A:middle
know, as you'd expect, just a

00:12:28.006 --> 00:12:31.346 A:middle
list of .VTT segments and the

00:12:31.346 --> 00:12:33.426 A:middle
IMSC is also sort of, in this

00:12:33.426 --> 00:12:34.966 A:middle
case MP4 segments because there

00:12:34.966 --> 00:12:36.816 A:middle
are MPEG-4 fragments and it does

00:12:36.816 --> 00:12:38.626 A:middle
have them tagged because that's

00:12:38.626 --> 00:12:41.116 A:middle
what fragmented MPEG-4 requires

00:12:41.116 --> 00:12:42.466 A:middle
is we need to be able to point

00:12:42.466 --> 00:12:43.826 A:middle
at the movie box.

00:12:44.006 --> 00:12:45.376 A:middle
So, but other than that they're

00:12:45.376 --> 00:12:45.916 A:middle
very similar.

00:12:46.496 --> 00:12:48.946 A:middle
So IMSC, VTT they're very

00:12:48.946 --> 00:12:49.746 A:middle
similar.

00:12:49.816 --> 00:12:53.466 A:middle
They do the same thing.

00:12:53.676 --> 00:12:55.196 A:middle
Why would I switch my HLS

00:12:55.196 --> 00:12:56.176 A:middle
streams for IMSC?

00:12:56.466 --> 00:12:58.666 A:middle
Well, you might switch your

00:12:58.666 --> 00:13:02.066 A:middle
streams if, first of all, if you

00:12:58.666 --> 00:13:02.066 A:middle
streams if, first of all, if you

00:13:02.066 --> 00:13:04.446 A:middle
want more stylist to control and

00:13:04.446 --> 00:13:06.666 A:middle
you don't have an entire CSS

00:13:06.816 --> 00:13:08.956 A:middle
parser to lean on in your

00:13:08.956 --> 00:13:11.396 A:middle
playback devices then IMSC can

00:13:11.396 --> 00:13:12.036 A:middle
be attractive.

00:13:13.336 --> 00:13:16.076 A:middle
A second good reason is that you

00:13:16.076 --> 00:13:17.826 A:middle
may be authoring your captions

00:13:17.826 --> 00:13:20.316 A:middle
already in TTML, or perhaps

00:13:20.316 --> 00:13:21.056 A:middle
you're getting them from a

00:13:21.056 --> 00:13:23.146 A:middle
service provider in one of those

00:13:23.146 --> 00:13:24.186 A:middle
formats.

00:13:24.186 --> 00:13:25.606 A:middle
And you may find that

00:13:25.606 --> 00:13:28.946 A:middle
translating TTML's IMSC is both

00:13:28.946 --> 00:13:30.456 A:middle
simpler and perhaps higher

00:13:30.456 --> 00:13:32.356 A:middle
fidelity than doing the same

00:13:32.356 --> 00:13:34.196 A:middle
translation to VTT because

00:13:34.196 --> 00:13:34.956 A:middle
they're much more similar

00:13:34.956 --> 00:13:35.666 A:middle
formats.

00:13:36.156 --> 00:13:37.516 A:middle
So another good reason.

00:13:37.516 --> 00:13:40.416 A:middle
And a final reason is that you

00:13:40.416 --> 00:13:41.776 A:middle
may find yourself producing

00:13:41.866 --> 00:13:43.536 A:middle
IMSC1 streams anyway.

00:13:44.056 --> 00:13:47.026 A:middle
We mentioned that CMAF is

00:13:47.026 --> 00:13:50.746 A:middle
requiring IMSC for captions in

00:13:50.746 --> 00:13:54.116 A:middle
CMAF presentations, and if you

00:13:54.116 --> 00:13:55.886 A:middle
find yourself wanting to take

00:13:55.886 --> 00:13:57.536 A:middle
advantage of the pool of

00:13:57.536 --> 00:13:58.956 A:middle
compatible devices that we hope

00:13:58.956 --> 00:14:00.656 A:middle
CMAF will produce then you're

00:13:58.956 --> 00:14:00.656 A:middle
CMAF will produce then you're

00:14:00.656 --> 00:14:01.996 A:middle
going to end up with IMSC1

00:14:01.996 --> 00:14:06.876 A:middle
streams and you may be able to

00:14:07.296 --> 00:14:11.686 A:middle
just drop the VTT streams and

00:14:11.686 --> 00:14:12.936 A:middle
that would simplify your tool

00:14:12.936 --> 00:14:13.926 A:middle
chain and your production

00:14:13.926 --> 00:14:14.296 A:middle
workflow.

00:14:14.706 --> 00:14:20.446 A:middle
So now having said all of that,

00:14:20.746 --> 00:14:21.846 A:middle
maybe none of that applies to

00:14:21.846 --> 00:14:24.766 A:middle
you in which case sticking with

00:14:24.766 --> 00:14:26.096 A:middle
VTT is a fine choice.

00:14:26.096 --> 00:14:27.206 A:middle
It's going to continue being

00:14:27.206 --> 00:14:27.416 A:middle
around.

00:14:27.416 --> 00:14:29.716 A:middle
In fact, maybe you're mainly

00:14:29.716 --> 00:14:31.106 A:middle
focused on North American market

00:14:31.106 --> 00:14:33.246 A:middle
in which case 608 is fine too.

00:14:33.306 --> 00:14:34.226 A:middle
It's not going anywhere.

00:14:34.716 --> 00:14:35.966 A:middle
So, we've just got different

00:14:35.966 --> 00:14:36.446 A:middle
choices.

00:14:37.596 --> 00:14:39.466 A:middle
Now, I've been talking a lot

00:14:39.466 --> 00:14:40.666 A:middle
about IMSC1.

00:14:40.666 --> 00:14:41.776 A:middle
There might be a question

00:14:41.776 --> 00:14:43.156 A:middle
lingering as to well is there an

00:14:43.466 --> 00:14:44.406 A:middle
IMSC2?

00:14:44.436 --> 00:14:47.526 A:middle
And the answer is kind of.

00:14:47.526 --> 00:14:49.136 A:middle
It hasn't been finalized yet, in

00:14:49.136 --> 00:14:50.166 A:middle
fact it's still working through

00:14:50.166 --> 00:14:53.036 A:middle
its process but the Time Text

00:14:53.066 --> 00:14:55.086 A:middle
working group is planning on

00:14:55.086 --> 00:14:56.726 A:middle
defining an IMSC2, and one of

00:14:56.726 --> 00:14:58.806 A:middle
the features in it that we're

00:14:58.806 --> 00:15:01.786 A:middle
keeping an eye on is some more

00:14:58.806 --> 00:15:01.786 A:middle
keeping an eye on is some more

00:15:01.786 --> 00:15:03.366 A:middle
silent controls that are

00:15:03.366 --> 00:15:05.316 A:middle
particularly aimed at some

00:15:05.316 --> 00:15:07.206 A:middle
advanced Japanese topography

00:15:07.206 --> 00:15:09.836 A:middle
features such as shatti and

00:15:09.836 --> 00:15:10.626 A:middle
ticochiyoko [phonetically

00:15:10.626 --> 00:15:11.096 A:middle
spelled].

00:15:11.096 --> 00:15:16.136 A:middle
And so the short story is that

00:15:16.136 --> 00:15:18.716 A:middle
IMSC2, we expect the story to

00:15:18.716 --> 00:15:19.936 A:middle
evolve over the next couple of

00:15:19.936 --> 00:15:22.256 A:middle
years and so keep an eye out for

00:15:23.316 --> 00:15:23.526 A:middle
it.

00:15:23.526 --> 00:15:24.936 A:middle
Okay. So that's our CODECS

00:15:24.936 --> 00:15:26.746 A:middle
story, now let's talk about some

00:15:26.746 --> 00:15:27.496 A:middle
streaming features.

00:15:27.816 --> 00:15:30.606 A:middle
And first I'd like to talk about

00:15:30.816 --> 00:15:32.786 A:middle
something that we have that we

00:15:32.786 --> 00:15:34.586 A:middle
hope will make the lives of

00:15:34.586 --> 00:15:36.136 A:middle
those longsuffering produces of

00:15:36.136 --> 00:15:37.826 A:middle
live streams a little bit easier

00:15:38.236 --> 00:15:40.296 A:middle
in terms of helping them

00:15:40.296 --> 00:15:41.986 A:middle
maintain a robust experience

00:15:42.526 --> 00:15:44.996 A:middle
because HLS players are usually

00:15:44.996 --> 00:15:46.876 A:middle
pretty good when everything

00:15:46.876 --> 00:15:48.106 A:middle
going on in the back end is kind

00:15:48.106 --> 00:15:50.496 A:middle
of running tickety-boo, but when

00:15:50.496 --> 00:15:51.896 A:middle
things start to fall over on the

00:15:51.896 --> 00:15:52.916 A:middle
back end the clients could

00:15:52.916 --> 00:15:54.256 A:middle
actually do a little bit better

00:15:54.636 --> 00:15:55.576 A:middle
to help things move along.

00:15:55.576 --> 00:15:56.466 A:middle
Let me show you what I mean.

00:15:57.296 --> 00:16:00.066 A:middle
So here we have -- I guess here

00:15:57.296 --> 00:16:00.066 A:middle
So here we have -- I guess here

00:16:00.536 --> 00:16:03.986 A:middle
we have a -- your typical live

00:16:03.986 --> 00:16:04.846 A:middle
HLS playlist.

00:16:04.846 --> 00:16:05.736 A:middle
Got a ten-second target

00:16:05.736 --> 00:16:07.196 A:middle
duration, segments are you now

00:16:07.196 --> 00:16:09.006 A:middle
10 seconds or thereabouts, after

00:16:09.006 --> 00:16:10.136 A:middle
10 seconds you might want to

00:16:10.136 --> 00:16:10.616 A:middle
reload it.

00:16:11.026 --> 00:16:12.606 A:middle
File sequence 12 is at the

00:16:12.606 --> 00:16:14.356 A:middle
bottom there, but oh now file

00:16:14.356 --> 00:16:15.426 A:middle
sequence 13 appears.

00:16:15.806 --> 00:16:17.056 A:middle
10 seconds later you reload

00:16:17.056 --> 00:16:18.936 A:middle
again, file sequence 14 appears.

00:16:19.266 --> 00:16:20.756 A:middle
Those things aren't appearing by

00:16:20.756 --> 00:16:21.696 A:middle
magic, of course.

00:16:21.926 --> 00:16:23.256 A:middle
You've got some encoder worker

00:16:23.256 --> 00:16:24.286 A:middle
somewhere that's chewing on a

00:16:24.286 --> 00:16:25.826 A:middle
media source, and every 10

00:16:25.826 --> 00:16:26.836 A:middle
seconds it's writing on a new

00:16:26.836 --> 00:16:30.296 A:middle
segment file into the CEN.

00:16:30.916 --> 00:16:33.876 A:middle
What would happen if for

00:16:33.876 --> 00:16:35.096 A:middle
whatever reason the encoder

00:16:35.096 --> 00:16:35.926 A:middle
suddenly rebooted?

00:16:36.186 --> 00:16:37.836 A:middle
Or maybe you knock your

00:16:37.836 --> 00:16:38.906 A:middle
microwave dish with your elbow

00:16:38.906 --> 00:16:39.786 A:middle
or something, you lose your

00:16:39.786 --> 00:16:41.246 A:middle
media feed.

00:16:41.246 --> 00:16:45.116 A:middle
Well, prior to this HLS clients

00:16:45.116 --> 00:16:46.976 A:middle
had no way of knowing that that

00:16:46.976 --> 00:16:48.136 A:middle
had happened and so they had no

00:16:48.136 --> 00:16:48.906 A:middle
way to help out.

00:16:49.436 --> 00:16:51.686 A:middle
But now we defined a new tag

00:16:51.916 --> 00:16:54.486 A:middle
which is called the GAP tag, and

00:16:54.486 --> 00:16:55.946 A:middle
so now what you can do instead

00:16:55.946 --> 00:16:57.766 A:middle
on your back end is when you

00:16:57.766 --> 00:17:00.296 A:middle
lose your encoder or you lose

00:16:57.766 --> 00:17:00.296 A:middle
lose your encoder or you lose

00:17:00.296 --> 00:17:02.106 A:middle
your media source your packager

00:17:02.406 --> 00:17:04.165 A:middle
can continue writing segments

00:17:04.576 --> 00:17:07.746 A:middle
but instead of writing the media

00:17:07.746 --> 00:17:09.226 A:middle
data it can simply write a dummy

00:17:09.226 --> 00:17:11.876 A:middle
URL and affix that with a GAP

00:17:11.876 --> 00:17:12.296 A:middle
tag.

00:17:12.896 --> 00:17:14.506 A:middle
And it can continue doing this

00:17:14.786 --> 00:17:17.215 A:middle
as long as the encoding for that

00:17:17.215 --> 00:17:18.126 A:middle
stream is disabled.

00:17:18.126 --> 00:17:20.576 A:middle
And so 10 seconds later you

00:17:20.576 --> 00:17:22.236 A:middle
might get another segment that

00:17:22.425 --> 00:17:23.526 A:middle
is indicated as a gap.

00:17:24.175 --> 00:17:25.866 A:middle
So this tells the player that

00:17:26.476 --> 00:17:27.776 A:middle
the stream is still alive, it's

00:17:27.776 --> 00:17:29.566 A:middle
still chugging along, it's still

00:17:29.566 --> 00:17:32.466 A:middle
updating but things aren't so

00:17:32.466 --> 00:17:33.706 A:middle
good in actually media data

00:17:33.706 --> 00:17:34.146 A:middle
land.

00:17:34.826 --> 00:17:36.926 A:middle
Once things are restored, once

00:17:36.926 --> 00:17:38.936 A:middle
your encoder comes back or your

00:17:39.446 --> 00:17:40.196 A:middle
-- you've straightened out your

00:17:40.196 --> 00:17:42.616 A:middle
microwave dish or what have you,

00:17:42.616 --> 00:17:44.356 A:middle
then the packager can continue

00:17:44.496 --> 00:17:46.366 A:middle
producing segments as it did

00:17:46.366 --> 00:17:46.756 A:middle
before.

00:17:47.086 --> 00:17:48.976 A:middle
So, what does the GAP tag mean

00:17:49.316 --> 00:17:50.236 A:middle
to you as a client?

00:17:51.276 --> 00:17:54.126 A:middle
Primarily it means that there's

00:17:54.126 --> 00:17:57.516 A:middle
no media data here and so of

00:17:57.516 --> 00:18:00.656 A:middle
course as a first approximation

00:17:57.516 --> 00:18:00.656 A:middle
course as a first approximation

00:18:01.126 --> 00:18:02.086 A:middle
the player shouldn't attempt to

00:18:02.086 --> 00:18:03.536 A:middle
download it because it's not

00:18:03.536 --> 00:18:07.026 A:middle
there, but more interestingly as

00:18:07.026 --> 00:18:08.706 A:middle
soon as the player sees a GAP

00:18:08.706 --> 00:18:10.766 A:middle
tag appear in a media playlist

00:18:11.056 --> 00:18:12.326 A:middle
it can go off and attempt to

00:18:12.326 --> 00:18:13.886 A:middle
find another variant that

00:18:13.886 --> 00:18:15.116 A:middle
doesn't have the same gaps

00:18:15.156 --> 00:18:16.716 A:middle
because you may have multiple

00:18:16.716 --> 00:18:18.506 A:middle
redundant encoders producing

00:18:18.506 --> 00:18:19.716 A:middle
different variants or redundant

00:18:19.716 --> 00:18:21.426 A:middle
variants, and so maybe we're

00:18:21.426 --> 00:18:23.436 A:middle
playing the 2-megabit stream and

00:18:23.436 --> 00:18:24.746 A:middle
we might find that when we find

00:18:24.776 --> 00:18:26.356 A:middle
the 1-megabit stream that oh,

00:18:26.496 --> 00:18:27.686 A:middle
actually he doesn't have a gap

00:18:27.936 --> 00:18:29.096 A:middle
and so we can just cleanly

00:18:29.096 --> 00:18:30.636 A:middle
switch down to it, we can play

00:18:30.636 --> 00:18:31.866 A:middle
through the 1-megabit stream.

00:18:32.206 --> 00:18:33.896 A:middle
Once we're done with the gap we

00:18:33.896 --> 00:18:35.086 A:middle
can switch back up to the

00:18:35.086 --> 00:18:36.326 A:middle
3-megabit stream, the 2-megabit

00:18:36.326 --> 00:18:38.416 A:middle
stream, and it's all good.

00:18:38.556 --> 00:18:39.686 A:middle
The user won't even notice.

00:18:40.276 --> 00:18:47.336 A:middle
So, we have a fallback case

00:18:47.336 --> 00:18:49.466 A:middle
which is that you might just

00:18:49.466 --> 00:18:51.066 A:middle
have one encoder, or like I said

00:18:51.066 --> 00:18:51.926 A:middle
you might have knocked out your

00:18:51.926 --> 00:18:53.406 A:middle
media source, you may have no

00:18:53.406 --> 00:18:55.226 A:middle
media for the entire gap, and

00:18:55.316 --> 00:18:56.576 A:middle
the behavior of our player in

00:18:56.576 --> 00:18:58.466 A:middle
that case is we'll just in a

00:18:58.466 --> 00:18:59.956 A:middle
live stream scenario continue to

00:18:59.956 --> 00:19:01.716 A:middle
play through silence until media

00:18:59.956 --> 00:19:01.716 A:middle
play through silence until media

00:19:01.716 --> 00:19:02.866 A:middle
comes back and we can resume the

00:19:02.866 --> 00:19:03.486 A:middle
presentation.

00:19:04.526 --> 00:19:06.446 A:middle
Now, the new GAP tag amongst

00:19:06.446 --> 00:19:09.276 A:middle
other things is described in a

00:19:09.276 --> 00:19:10.966 A:middle
version of the HLS beta spec

00:19:10.966 --> 00:19:12.056 A:middle
that I was up last night

00:19:12.056 --> 00:19:13.946 A:middle
writing, and so I think we're

00:19:13.946 --> 00:19:15.176 A:middle
posting it today, which is

00:19:15.176 --> 00:19:15.596 A:middle
awesome.

00:19:16.006 --> 00:19:18.976 A:middle
I can't wait to see it.

00:19:23.056 --> 00:19:23.976 A:middle
Yeah. Okay.

00:19:24.316 --> 00:19:26.786 A:middle
Feedback of course is welcome.

00:19:26.846 --> 00:19:30.126 A:middle
So that's the GAP tag.

00:19:30.126 --> 00:19:31.026 A:middle
Let's talk about another new

00:19:31.026 --> 00:19:32.136 A:middle
feature, and this is also kind

00:19:32.136 --> 00:19:33.866 A:middle
of aimed at your back-end folks.

00:19:34.286 --> 00:19:37.076 A:middle
And what we're doing is we are

00:19:37.236 --> 00:19:38.976 A:middle
supporting simple variable

00:19:38.976 --> 00:19:41.726 A:middle
substitution in m3u8 playlists,

00:19:41.726 --> 00:19:42.926 A:middle
and do to that we kind of

00:19:42.926 --> 00:19:44.976 A:middle
barrowed a little bit of syntax

00:19:44.976 --> 00:19:46.186 A:middle
from PHP.

00:19:46.186 --> 00:19:47.606 A:middle
And so what that means is if you

00:19:47.606 --> 00:19:48.566 A:middle
see something like that

00:19:48.566 --> 00:19:50.906 A:middle
highlighted bit in a playlist

00:19:50.906 --> 00:19:52.766 A:middle
what it is saying is take that

00:19:52.766 --> 00:19:53.766 A:middle
thing that's surrounded by the

00:19:53.766 --> 00:19:55.306 A:middle
braces and replace it with the

00:19:55.306 --> 00:19:57.706 A:middle
value of the variable whose name

00:19:57.706 --> 00:19:58.406 A:middle
is file name.

00:19:58.696 --> 00:20:01.096 A:middle
And so if the variable value

00:19:58.696 --> 00:20:01.096 A:middle
And so if the variable value

00:20:01.096 --> 00:20:02.476 A:middle
happens to be foo then you would

00:20:02.476 --> 00:20:03.416 A:middle
end up with a string that is

00:20:03.416 --> 00:20:04.426 A:middle
foo.ts.

00:20:05.896 --> 00:20:10.016 A:middle
Now, to define these things we

00:20:10.016 --> 00:20:12.266 A:middle
defined a new tag and it's

00:20:12.266 --> 00:20:13.306 A:middle
pretty simple, I'll show it to

00:20:13.306 --> 00:20:14.756 A:middle
you in a second, and it either

00:20:14.756 --> 00:20:16.956 A:middle
defines a variable inline the

00:20:16.956 --> 00:20:19.596 A:middle
playlist or it can import it.

00:20:19.916 --> 00:20:22.596 A:middle
Now, this is what makes things

00:20:22.596 --> 00:20:23.926 A:middle
interesting because remember I

00:20:23.926 --> 00:20:25.246 A:middle
said makes life a little bit

00:20:25.246 --> 00:20:26.326 A:middle
better for people producing

00:20:26.326 --> 00:20:26.646 A:middle
streams?

00:20:26.646 --> 00:20:27.566 A:middle
Well how does it do that?

00:20:27.826 --> 00:20:29.516 A:middle
I mean, yeah, you could -- if

00:20:29.516 --> 00:20:31.676 A:middle
you've got big honking URL's you

00:20:31.676 --> 00:20:33.326 A:middle
could use variables to make your

00:20:33.326 --> 00:20:36.126 A:middle
playlist shorter but, I mean,

00:20:36.126 --> 00:20:36.986 A:middle
gsip [phonetic] already does a

00:20:36.986 --> 00:20:38.696 A:middle
better job of that so that's not

00:20:38.696 --> 00:20:40.846 A:middle
-- that's kind of -- but what's

00:20:40.956 --> 00:20:42.746 A:middle
interesting is when you have the

00:20:42.746 --> 00:20:44.666 A:middle
ability to define a variable in

00:20:44.666 --> 00:20:46.936 A:middle
a master playlist and make use

00:20:46.936 --> 00:20:48.876 A:middle
of it in a media playlist that

00:20:48.876 --> 00:20:50.436 A:middle
allows you to construct your

00:20:50.436 --> 00:20:52.386 A:middle
media playlists ahead of time

00:20:52.596 --> 00:20:54.776 A:middle
with little placeholders that

00:20:54.776 --> 00:20:56.466 A:middle
are filled in sort of in a late

00:20:56.466 --> 00:20:58.316 A:middle
binding way when your master

00:20:58.316 --> 00:20:59.396 A:middle
playlist is defined.

00:20:59.396 --> 00:21:01.176 A:middle
So for instance, you could have

00:20:59.396 --> 00:21:01.176 A:middle
So for instance, you could have

00:21:01.176 --> 00:21:03.066 A:middle
a bunch of variables references

00:21:03.066 --> 00:21:04.536 A:middle
in your media playlist on your

00:21:04.586 --> 00:21:05.846 A:middle
CDN and you could produce your

00:21:05.846 --> 00:21:07.456 A:middle
master playlist dynamically from

00:21:07.456 --> 00:21:09.246 A:middle
your application and at that

00:21:09.316 --> 00:21:11.246 A:middle
point you can say I want my

00:21:11.246 --> 00:21:12.756 A:middle
variable to be this, and

00:21:12.756 --> 00:21:13.946 A:middle
suddenly all your media

00:21:13.946 --> 00:21:15.116 A:middle
playlists on the CDN will take

00:21:15.116 --> 00:21:16.266 A:middle
advantage of it.

00:21:16.266 --> 00:21:17.906 A:middle
So let's see what that looks

00:21:18.606 --> 00:21:18.706 A:middle
like.

00:21:18.876 --> 00:21:20.466 A:middle
Here's a master playlist.

00:21:20.466 --> 00:21:21.776 A:middle
It's pretty simple example.

00:21:21.776 --> 00:21:23.896 A:middle
So I've got a define tag here.

00:21:24.156 --> 00:21:25.546 A:middle
It has two attributes, the name

00:21:25.546 --> 00:21:26.916 A:middle
attribute says the variable name

00:21:26.916 --> 00:21:29.376 A:middle
is auth and it has a value which

00:21:29.376 --> 00:21:31.026 A:middle
is this definition of an auth

00:21:31.026 --> 00:21:31.366 A:middle
token.

00:21:32.266 --> 00:21:34.776 A:middle
And you can use this various

00:21:34.776 --> 00:21:36.176 A:middle
places in the master playlist.

00:21:36.176 --> 00:21:38.526 A:middle
For instance, in my gear1 thing

00:21:38.526 --> 00:21:41.076 A:middle
here I've decided to tack on the

00:21:41.076 --> 00:21:43.116 A:middle
auth token to the URL for the

00:21:43.406 --> 00:21:46.216 A:middle
first variant, but now let's

00:21:46.216 --> 00:21:47.506 A:middle
imagine that we load that media

00:21:47.506 --> 00:21:48.176 A:middle
playlist.

00:21:49.236 --> 00:21:51.316 A:middle
Again, media playlists can have

00:21:51.316 --> 00:21:52.406 A:middle
variables just like master

00:21:52.406 --> 00:21:52.966 A:middle
playlists do.

00:21:52.966 --> 00:21:54.256 A:middle
In this case, I've got a path

00:21:54.536 --> 00:21:55.746 A:middle
that has this big long path.

00:21:55.746 --> 00:21:56.516 A:middle
I don't want to type a whole

00:21:56.516 --> 00:21:57.486 A:middle
bunch of different times.

00:21:58.046 --> 00:21:59.106 A:middle
But the second define is a

00:21:59.106 --> 00:21:59.966 A:middle
little more interesting.

00:22:00.266 --> 00:22:02.176 A:middle
In this case, we're importing

00:22:02.336 --> 00:22:03.616 A:middle
that auth variable that we

00:22:03.616 --> 00:22:05.086 A:middle
defined in the master playlist

00:22:05.246 --> 00:22:06.936 A:middle
and we're applying it to

00:22:07.086 --> 00:22:08.406 A:middle
different places such as this

00:22:08.406 --> 00:22:10.836 A:middle
URL in the media playlist, and

00:22:10.836 --> 00:22:14.636 A:middle
so this allows you to sort of

00:22:14.736 --> 00:22:16.426 A:middle
have a loose coupling effect

00:22:16.426 --> 00:22:17.496 A:middle
between your master playlist and

00:22:17.496 --> 00:22:18.156 A:middle
your media playlist.

00:22:18.156 --> 00:22:20.006 A:middle
I think that people are going to

00:22:20.006 --> 00:22:21.336 A:middle
find a lot of interesting uses

00:22:21.336 --> 00:22:22.436 A:middle
for it.

00:22:22.866 --> 00:22:24.016 A:middle
Next, okay.

00:22:24.416 --> 00:22:25.586 A:middle
So we talked about some back-end

00:22:25.586 --> 00:22:26.006 A:middle
features.

00:22:26.186 --> 00:22:27.716 A:middle
Let's talk about something that

00:22:27.716 --> 00:22:30.156 A:middle
you can actually use to provide

00:22:30.156 --> 00:22:31.906 A:middle
a compelling user experience.

00:22:32.326 --> 00:22:33.516 A:middle
Now what do I mean?

00:22:33.516 --> 00:22:35.536 A:middle
Well for instance, what if you

00:22:36.226 --> 00:22:38.156 A:middle
wanted your users to be able to,

00:22:38.156 --> 00:22:39.336 A:middle
when they're watching a match,

00:22:39.686 --> 00:22:42.496 A:middle
to be watching one camera of

00:22:42.496 --> 00:22:43.386 A:middle
someone sort of crossing the

00:22:43.386 --> 00:22:44.746 A:middle
ball but at the same time

00:22:44.966 --> 00:22:46.866 A:middle
watching the goal keeper cameras

00:22:46.866 --> 00:22:47.856 A:middle
so they could see his point of

00:22:47.856 --> 00:22:48.486 A:middle
view as well.

00:22:49.116 --> 00:22:51.266 A:middle
Or what if you're watching a

00:22:51.266 --> 00:22:55.116 A:middle
race and you want to see the car

00:22:55.116 --> 00:22:56.886 A:middle
camera in Hamilton's car but you

00:22:56.886 --> 00:22:58.266 A:middle
also want to keep an eye on

00:22:58.266 --> 00:23:00.206 A:middle
Vettel behind him.

00:22:58.266 --> 00:23:00.206 A:middle
Vettel behind him.

00:23:00.206 --> 00:23:04.596 A:middle
And so in that case what unites

00:23:04.596 --> 00:23:06.786 A:middle
these kind of features is the

00:23:06.786 --> 00:23:08.916 A:middle
ability to play multiple live

00:23:08.916 --> 00:23:10.686 A:middle
streams that are synchronized

00:23:10.686 --> 00:23:12.306 A:middle
with each other so that one

00:23:12.306 --> 00:23:14.846 A:middle
doesn't get ahead of another.

00:23:14.986 --> 00:23:16.326 A:middle
[laughs] This is your future.

00:23:17.996 --> 00:23:22.536 A:middle
So in order to do that, all we

00:23:22.536 --> 00:23:24.676 A:middle
require is that you have two or

00:23:24.676 --> 00:23:26.776 A:middle
more live streams that are

00:23:26.876 --> 00:23:30.126 A:middle
synchronized by the use of a

00:23:30.126 --> 00:23:30.706 A:middle
date-time tag.

00:23:30.706 --> 00:23:31.836 A:middle
That basically means you put

00:23:31.866 --> 00:23:33.406 A:middle
dates in your playlist and the

00:23:33.406 --> 00:23:35.596 A:middle
dates are both derived or are

00:23:35.596 --> 00:23:36.696 A:middle
derived in all the playlists

00:23:36.696 --> 00:23:37.576 A:middle
from a common clock.

00:23:38.066 --> 00:23:39.526 A:middle
And once you've done that then

00:23:39.526 --> 00:23:41.256 A:middle
you can create multiple

00:23:41.256 --> 00:23:44.156 A:middle
independent AVPlayers and you

00:23:44.156 --> 00:23:45.486 A:middle
can start the first one playing

00:23:45.696 --> 00:23:46.826 A:middle
and then start the second one

00:23:46.826 --> 00:23:49.166 A:middle
playing in sync by using the

00:23:49.166 --> 00:23:52.406 A:middle
AVPlayer setRatetime atHostTime

00:23:52.406 --> 00:23:52.766 A:middle
method.

00:23:53.246 --> 00:23:55.206 A:middle
Now, I should be up front here

00:23:55.206 --> 00:23:58.446 A:middle
and say that using this method

00:23:58.446 --> 00:24:00.226 A:middle
in AVPlayer gets you some

00:23:58.446 --> 00:24:00.226 A:middle
in AVPlayer gets you some

00:24:00.226 --> 00:24:02.196 A:middle
serious AVFoundation street cred

00:24:02.546 --> 00:24:04.106 A:middle
because it's not the simplest

00:24:04.106 --> 00:24:04.966 A:middle
API in the world.

00:24:06.716 --> 00:24:08.886 A:middle
But to help you out with that,

00:24:08.886 --> 00:24:10.876 A:middle
we've actually got some sample

00:24:10.876 --> 00:24:11.726 A:middle
code for you this year.

00:24:12.316 --> 00:24:13.716 A:middle
It's an Apple TV app.

00:24:13.716 --> 00:24:17.376 A:middle
It's called SyncStartTV and I

00:24:17.376 --> 00:24:19.026 A:middle
thought rather than just talk

00:24:19.026 --> 00:24:20.036 A:middle
about it maybe I should show it.

00:24:20.036 --> 00:24:20.726 A:middle
You-guys want to see it?

00:24:21.136 --> 00:24:21.646 A:middle
&gt;&gt; Yeah.

00:24:22.206 --> 00:24:22.766 A:middle
&gt;&gt; All right.

00:24:23.236 --> 00:24:23.696 A:middle
Let's do it.

00:24:24.926 --> 00:24:26.136 A:middle
So I'm going to switch us over

00:24:26.136 --> 00:24:28.256 A:middle
to the Apple TV here, if I

00:24:28.256 --> 00:24:29.796 A:middle
remember which device it is.

00:24:29.796 --> 00:24:30.366 A:middle
I think it's this one.

00:24:31.046 --> 00:24:33.406 A:middle
We've got -- I have my little --

00:24:33.846 --> 00:24:36.026 A:middle
in order to demonstrate a live

00:24:36.026 --> 00:24:37.706 A:middle
synchronized stream, I first had

00:24:37.706 --> 00:24:41.156 A:middle
to produce a live streaming

00:24:41.156 --> 00:24:43.636 A:middle
setup and so I'll just talk a

00:24:43.636 --> 00:24:44.946 A:middle
little about what's going on up

00:24:44.946 --> 00:24:45.286 A:middle
here.

00:24:45.636 --> 00:24:48.546 A:middle
I wrote a little app that takes

00:24:48.546 --> 00:24:50.056 A:middle
the feed from the back camera

00:24:50.356 --> 00:24:52.206 A:middle
and chops it up and actually

00:24:52.206 --> 00:24:54.836 A:middle
serves it from the phone as an

00:24:54.876 --> 00:24:55.706 A:middle
HLS stream.

00:24:56.056 --> 00:24:57.236 A:middle
And I've got two of these guys

00:24:57.236 --> 00:24:59.596 A:middle
here, two phones, both sort of

00:24:59.596 --> 00:25:00.626 A:middle
focused on the same thing.

00:24:59.596 --> 00:25:00.626 A:middle
focused on the same thing.

00:25:00.626 --> 00:25:01.726 A:middle
I've got my left and my right

00:25:02.266 --> 00:25:04.346 A:middle
and they're actually connected

00:25:04.586 --> 00:25:06.376 A:middle
over the network and they're

00:25:06.376 --> 00:25:09.106 A:middle
using a clock that is a pretty

00:25:09.106 --> 00:25:10.856 A:middle
precise clock that's being

00:25:10.856 --> 00:25:13.796 A:middle
shared between them, and so they

00:25:13.796 --> 00:25:15.926 A:middle
are off there doing their thing.

00:25:16.296 --> 00:25:18.466 A:middle
So let me start my -- I don't

00:25:19.036 --> 00:25:22.896 A:middle
have a -- I couldn't get the

00:25:22.896 --> 00:25:24.226 A:middle
rights to anything really

00:25:24.226 --> 00:25:25.996 A:middle
exciting so we're going to do

00:25:25.996 --> 00:25:27.986 A:middle
this instead.

00:25:28.516 --> 00:25:29.926 A:middle
So let's see.

00:25:29.926 --> 00:25:33.106 A:middle
I'll start up my -- something

00:25:33.106 --> 00:25:34.086 A:middle
going on here.

00:25:34.696 --> 00:25:37.206 A:middle
And let's start one of the

00:25:37.206 --> 00:25:37.716 A:middle
cameras.

00:25:37.716 --> 00:25:39.096 A:middle
In fact, let's get them both

00:25:39.096 --> 00:25:39.666 A:middle
going here.

00:25:39.666 --> 00:25:42.136 A:middle
So you've got you.

00:25:43.066 --> 00:25:44.386 A:middle
Right is online.

00:25:45.476 --> 00:25:47.426 A:middle
And left is online.

00:25:47.426 --> 00:25:50.746 A:middle
Okay. So here we go.

00:25:53.626 --> 00:25:54.966 A:middle
Get my remote oriented

00:25:54.966 --> 00:25:55.316 A:middle
correctly.

00:25:55.316 --> 00:25:56.276 A:middle
Okay. So SyncStartTV.

00:25:56.276 --> 00:25:57.496 A:middle
When you launch SyncStartTV it

00:25:57.496 --> 00:25:59.956 A:middle
gives you the opportunity to

00:25:59.956 --> 00:26:03.066 A:middle
select either left or right

00:25:59.956 --> 00:26:03.066 A:middle
select either left or right

00:26:03.066 --> 00:26:03.476 A:middle
videos.

00:26:03.476 --> 00:26:04.396 A:middle
So let's select this guy.

00:26:04.876 --> 00:26:06.636 A:middle
Pops up a Bonjour picker and you

00:26:06.636 --> 00:26:07.986 A:middle
can see that both of my streams

00:26:07.986 --> 00:26:08.926 A:middle
show up here in Bonjour.

00:26:08.926 --> 00:26:10.466 A:middle
So let's start with stage right

00:26:10.706 --> 00:26:11.496 A:middle
and see what's going on over

00:26:11.496 --> 00:26:11.736 A:middle
there.

00:26:12.126 --> 00:26:13.156 A:middle
Nothing much going on over

00:26:13.156 --> 00:26:13.496 A:middle
there.

00:26:13.496 --> 00:26:16.456 A:middle
Let's start this guy going in

00:26:16.456 --> 00:26:18.306 A:middle
sort of -- all right.

00:26:18.636 --> 00:26:19.886 A:middle
Now select left video.

00:26:21.066 --> 00:26:24.546 A:middle
And look at that.

00:26:26.136 --> 00:26:27.236 A:middle
They're in sync!

00:26:28.516 --> 00:26:32.556 A:middle
[ Applause ]

00:26:33.056 --> 00:26:33.516 A:middle
Oh my goodness.

00:26:33.976 --> 00:26:34.696 A:middle
Hold on a second.

00:26:56.116 --> 00:26:56.526 A:middle
All right.

00:26:58.376 --> 00:27:00.376 A:middle
[ Applause ]

00:26:58.376 --> 00:27:00.376 A:middle
[ Applause ]

00:27:00.736 --> 00:27:01.156 A:middle
Thank you.

00:27:01.156 --> 00:27:03.926 A:middle
How do I get my slides back?

00:27:04.256 --> 00:27:04.896 A:middle
All right.

00:27:04.896 --> 00:27:05.276 A:middle
Here we go.

00:27:06.466 --> 00:27:08.436 A:middle
Well, this is fun for all ages.

00:27:09.126 --> 00:27:11.596 A:middle
Okay. So I guess I skipped right

00:27:11.596 --> 00:27:12.586 A:middle
past my slide.

00:27:13.066 --> 00:27:14.366 A:middle
Oh well. One of the things I

00:27:14.366 --> 00:27:15.296 A:middle
wanted to mention about this

00:27:15.296 --> 00:27:16.156 A:middle
kind of presentation where

00:27:16.156 --> 00:27:17.076 A:middle
you're showing multiple streams

00:27:17.076 --> 00:27:19.736 A:middle
at once is that you do have to

00:27:19.736 --> 00:27:20.906 A:middle
be careful to make sure one of

00:27:20.906 --> 00:27:22.076 A:middle
your streams doesn't sort of

00:27:22.076 --> 00:27:23.106 A:middle
suck down all your network

00:27:23.106 --> 00:27:24.396 A:middle
bandwidth and leave the other

00:27:24.396 --> 00:27:25.076 A:middle
ones starved.

00:27:25.076 --> 00:27:26.266 A:middle
So normally you would do this by

00:27:26.266 --> 00:27:27.346 A:middle
throttling each stream.

00:27:27.786 --> 00:27:29.316 A:middle
We're giving you another tool

00:27:29.316 --> 00:27:31.796 A:middle
for that this year and that is a

00:27:31.796 --> 00:27:32.726 A:middle
resolution cap.

00:27:33.236 --> 00:27:36.536 A:middle
And so essentially it's as the

00:27:36.536 --> 00:27:37.766 A:middle
name applies, it allows you to

00:27:37.766 --> 00:27:39.376 A:middle
programmatically say you know

00:27:39.376 --> 00:27:40.636 A:middle
what, I'm displaying this in a

00:27:40.636 --> 00:27:42.456 A:middle
little 480p window, there's no

00:27:42.456 --> 00:27:44.426 A:middle
point in switching up the way to

00:27:45.126 --> 00:27:45.856 A:middle
1080p.

00:27:45.856 --> 00:27:48.976 A:middle
And so when you have an app

00:27:48.976 --> 00:27:50.236 A:middle
that's got video thumbnails or

00:27:50.236 --> 00:27:51.786 A:middle
multi-stream or stuff like this

00:27:51.786 --> 00:27:52.586 A:middle
and you don't want to have to

00:27:52.586 --> 00:27:53.726 A:middle
dive into the gory details of

00:27:53.726 --> 00:27:55.026 A:middle
your playlist and set a

00:27:55.026 --> 00:27:57.486 A:middle
bandwidth cap, this is kind of a

00:27:57.486 --> 00:28:00.156 A:middle
handy thing to have.

00:27:57.486 --> 00:28:00.156 A:middle
handy thing to have.

00:28:00.156 --> 00:28:01.456 A:middle
There is a case where you may

00:28:01.456 --> 00:28:03.756 A:middle
set a max resolution is actually

00:28:03.756 --> 00:28:05.516 A:middle
smaller than anything -- any of

00:28:05.516 --> 00:28:06.756 A:middle
the tiers that are available.

00:28:06.756 --> 00:28:07.576 A:middle
In that case we'll just pick the

00:28:07.576 --> 00:28:10.066 A:middle
lowest one and we'll play that.

00:28:10.956 --> 00:28:12.186 A:middle
It's really easy to use.

00:28:12.496 --> 00:28:13.746 A:middle
If you've got a player item you

00:28:13.746 --> 00:28:15.136 A:middle
just set its preferred maximum

00:28:15.136 --> 00:28:17.376 A:middle
resolution to the CG size and in

00:28:17.376 --> 00:28:18.586 A:middle
a few seconds it should take

00:28:18.586 --> 00:28:18.906 A:middle
effect.

00:28:19.996 --> 00:28:21.726 A:middle
Both sort of up and down.

00:28:23.096 --> 00:28:25.026 A:middle
Okay. So let's talk about a few

00:28:25.026 --> 00:28:25.796 A:middle
other things.

00:28:26.036 --> 00:28:29.236 A:middle
Last year we introduced HLS

00:28:29.236 --> 00:28:30.626 A:middle
offline support which is the

00:28:30.626 --> 00:28:31.996 A:middle
ability to download your HLS

00:28:31.996 --> 00:28:33.636 A:middle
streams and play them somewhere

00:28:33.636 --> 00:28:34.606 A:middle
like an airplane where you don't

00:28:34.606 --> 00:28:35.146 A:middle
have a network.

00:28:35.486 --> 00:28:37.276 A:middle
And when we talked about that we

00:28:37.276 --> 00:28:39.556 A:middle
mentioned that we would be at

00:28:39.556 --> 00:28:41.086 A:middle
some point in the future taking

00:28:41.086 --> 00:28:43.096 A:middle
a more active role in managing

00:28:43.096 --> 00:28:43.926 A:middle
that disk space.

00:28:44.216 --> 00:28:46.426 A:middle
Well, the future is now and so

00:28:46.426 --> 00:28:48.216 A:middle
I'd like to introduce you to a

00:28:48.216 --> 00:28:49.936 A:middle
new part of our settings app in

00:28:49.936 --> 00:28:50.676 A:middle
iOS 11.

00:28:51.126 --> 00:28:53.416 A:middle
This has a section where a user

00:28:53.416 --> 00:28:55.656 A:middle
can go and see all the apps that

00:28:55.656 --> 00:28:58.046 A:middle
have offline assets and how much

00:28:58.046 --> 00:29:00.096 A:middle
disk space their using, and the

00:28:58.046 --> 00:29:00.096 A:middle
disk space their using, and the

00:29:00.096 --> 00:29:01.496 A:middle
user can choose to delete them

00:29:01.496 --> 00:29:02.836 A:middle
if they want to free up disk

00:29:02.836 --> 00:29:03.276 A:middle
space.

00:29:03.976 --> 00:29:06.516 A:middle
So what this means for you folks

00:29:06.836 --> 00:29:10.996 A:middle
is primarily that the OS is now

00:29:11.346 --> 00:29:15.106 A:middle
sort of capable of going off and

00:29:15.106 --> 00:29:17.326 A:middle
deleting your assets while your

00:29:17.326 --> 00:29:18.196 A:middle
app is not running.

00:29:18.386 --> 00:29:19.666 A:middle
And there can be a couple

00:29:19.666 --> 00:29:20.506 A:middle
different ways that could

00:29:20.506 --> 00:29:20.836 A:middle
happen.

00:29:20.836 --> 00:29:22.196 A:middle
The user could decide to do it

00:29:22.526 --> 00:29:24.966 A:middle
themselves or we may ask the

00:29:24.966 --> 00:29:26.356 A:middle
user if it's okay to delete some

00:29:26.356 --> 00:29:27.576 A:middle
of their content if we need

00:29:27.576 --> 00:29:29.706 A:middle
space for like an OS update or

00:29:29.706 --> 00:29:30.516 A:middle
something like that.

00:29:30.516 --> 00:29:32.616 A:middle
And so in iOS 11 we're

00:29:32.616 --> 00:29:34.626 A:middle
introducing a new API that

00:29:34.806 --> 00:29:36.766 A:middle
allows you to influence the

00:29:36.766 --> 00:29:38.926 A:middle
choice of what assets get

00:29:39.056 --> 00:29:40.876 A:middle
deleted when, and it's called

00:29:41.186 --> 00:29:41.266 A:middle
the

00:29:41.266 --> 00:29:43.266 A:middle
AVAssetDownloadStorageManager.

00:29:43.886 --> 00:29:46.166 A:middle
And the way it works is you

00:29:46.406 --> 00:29:49.016 A:middle
create a policy on each offline

00:29:49.016 --> 00:29:50.406 A:middle
asset that you have on your disk

00:29:50.726 --> 00:29:52.006 A:middle
and you set it with manger.

00:29:52.626 --> 00:29:55.356 A:middle
Right now the download storage

00:29:55.356 --> 00:29:56.586 A:middle
management policy has two

00:29:56.586 --> 00:29:59.556 A:middle
properties, expiration date and

00:29:59.556 --> 00:30:00.136 A:middle
priority.

00:29:59.556 --> 00:30:00.136 A:middle
priority.

00:30:00.136 --> 00:30:01.206 A:middle
And today we define just two

00:30:01.206 --> 00:30:03.076 A:middle
priorities that are important to

00:30:03.076 --> 00:30:03.446 A:middle
default.

00:30:03.446 --> 00:30:07.046 A:middle
So for most people what you're

00:30:07.046 --> 00:30:09.616 A:middle
going to do is mark assets the

00:30:09.616 --> 00:30:10.726 A:middle
user hasn't watched yet as

00:30:10.726 --> 00:30:12.376 A:middle
important, and once I've watched

00:30:12.376 --> 00:30:13.356 A:middle
them switch them back down to

00:30:13.356 --> 00:30:13.826 A:middle
default.

00:30:14.496 --> 00:30:16.066 A:middle
The expiration date property is

00:30:16.066 --> 00:30:18.996 A:middle
there in case your asset at some

00:30:18.996 --> 00:30:22.036 A:middle
point becomes no longer eligible

00:30:22.036 --> 00:30:22.636 A:middle
to be played.

00:30:22.636 --> 00:30:24.156 A:middle
For instance, you may find that

00:30:24.156 --> 00:30:25.646 A:middle
you may be in a situation where

00:30:25.936 --> 00:30:27.386 A:middle
a particular show may be leaving

00:30:27.386 --> 00:30:28.606 A:middle
your catalog, you no longer have

00:30:28.606 --> 00:30:29.276 A:middle
rights to stream it.

00:30:29.306 --> 00:30:30.856 A:middle
If that's the case you can set

00:30:30.856 --> 00:30:32.446 A:middle
the expiration date and it will

00:30:32.446 --> 00:30:35.096 A:middle
be sort of bumped up in the

00:30:35.096 --> 00:30:35.726 A:middle
deletion queue.

00:30:36.576 --> 00:30:38.816 A:middle
So, using it is fairly straight

00:30:38.816 --> 00:30:39.246 A:middle
forward.

00:30:39.346 --> 00:30:41.376 A:middle
The DownloadStorageManger is the

00:30:41.376 --> 00:30:43.176 A:middle
singleton so you go grab that.

00:30:43.856 --> 00:30:45.646 A:middle
You create a new mutable policy,

00:30:45.646 --> 00:30:47.356 A:middle
you set the attributes, and then

00:30:47.356 --> 00:30:48.606 A:middle
you tell the storage manager to

00:30:48.606 --> 00:30:51.666 A:middle
use that policy for an AVAsset

00:30:51.666 --> 00:30:54.506 A:middle
at a particular file URL.

00:30:54.506 --> 00:30:56.076 A:middle
You can also go back and look up

00:30:56.076 --> 00:30:58.226 A:middle
the current policy later on.

00:30:58.226 --> 00:31:01.036 A:middle
So that's coming your way.

00:30:58.226 --> 00:31:01.036 A:middle
So that's coming your way.

00:31:02.216 --> 00:31:04.756 A:middle
The other thing about offline is

00:31:04.756 --> 00:31:06.886 A:middle
that we got some feedback from

00:31:06.886 --> 00:31:07.666 A:middle
some of the folks who have

00:31:07.666 --> 00:31:11.516 A:middle
adopted it that downloading more

00:31:11.516 --> 00:31:12.786 A:middle
than one rendition, like if you

00:31:12.786 --> 00:31:14.086 A:middle
want your English audio but also

00:31:14.086 --> 00:31:16.096 A:middle
your Spanish audio, is maybe a

00:31:16.096 --> 00:31:17.356 A:middle
little bit harder than it could

00:31:17.356 --> 00:31:19.726 A:middle
be primarily if your application

00:31:19.726 --> 00:31:21.136 A:middle
is subject to going to the

00:31:21.136 --> 00:31:23.236 A:middle
background and being quit half

00:31:23.236 --> 00:31:25.076 A:middle
way through, and so I'm pleased

00:31:25.076 --> 00:31:26.466 A:middle
to say that in iOS 11 we're

00:31:26.466 --> 00:31:29.206 A:middle
introducing a new way to batch

00:31:29.206 --> 00:31:30.506 A:middle
up your offline downloads.

00:31:30.506 --> 00:31:30.996 A:middle
It's called an

00:31:31.066 --> 00:31:33.456 A:middle
AggregateAssetDownloadTask and

00:31:33.456 --> 00:31:35.246 A:middle
it allows you to, for a given

00:31:35.246 --> 00:31:38.736 A:middle
asset, indicate an array of

00:31:38.736 --> 00:31:41.506 A:middle
media selections like this and

00:31:41.506 --> 00:31:43.536 A:middle
then when you kick off the

00:31:43.536 --> 00:31:45.396 A:middle
download task we'll go off,

00:31:45.396 --> 00:31:46.396 A:middle
we'll download each one, we'll

00:31:46.396 --> 00:31:47.696 A:middle
give you progress as we do, and

00:31:47.966 --> 00:31:49.026 A:middle
then we'll let you know when the

00:31:49.026 --> 00:31:50.366 A:middle
whole thing is done so hopefully

00:31:50.366 --> 00:31:51.206 A:middle
it will make things a little bit

00:31:51.206 --> 00:31:51.536 A:middle
easier.

00:31:52.516 --> 00:31:55.556 A:middle
[ Applause ]

00:31:56.056 --> 00:31:58.246 A:middle
Okay. The next set of things

00:31:58.246 --> 00:31:59.096 A:middle
we're going to talk about here

00:31:59.096 --> 00:32:01.546 A:middle
today all revolve around

00:31:59.096 --> 00:32:01.546 A:middle
today all revolve around

00:32:02.116 --> 00:32:03.976 A:middle
managing content keys on your

00:32:03.976 --> 00:32:05.736 A:middle
device, and it's a fairly

00:32:05.736 --> 00:32:08.196 A:middle
complicated topic and so what

00:32:08.196 --> 00:32:10.936 A:middle
I'm going to do is hand you-guys

00:32:10.936 --> 00:32:13.396 A:middle
over to our very own HLS key

00:32:13.396 --> 00:32:15.246 A:middle
master, Anil Katti, and he's

00:32:15.246 --> 00:32:16.006 A:middle
going to walk you through it.

00:32:16.006 --> 00:32:16.976 A:middle
Thank you very much.

00:32:17.516 --> 00:32:21.500 A:middle
[ Applause ]

00:32:26.196 --> 00:32:26.906 A:middle
Thank you, Roger.

00:32:27.976 --> 00:32:28.966 A:middle
Good evening everyone.

00:32:29.086 --> 00:32:29.806 A:middle
Welcome to WWDC.

00:32:29.806 --> 00:32:34.406 A:middle
So two years ago we introduced

00:32:34.406 --> 00:32:36.056 A:middle
FairPlay Streaming, a content

00:32:36.056 --> 00:32:37.676 A:middle
protection technology that helps

00:32:37.676 --> 00:32:40.286 A:middle
protect your HLS assets.

00:32:41.606 --> 00:32:43.276 A:middle
Since this introduction we have

00:32:43.276 --> 00:32:44.496 A:middle
seen phenomenal growth.

00:32:45.596 --> 00:32:46.936 A:middle
FairPlay Streaming is used

00:32:46.936 --> 00:32:48.846 A:middle
protect premium content that is

00:32:48.846 --> 00:32:51.296 A:middle
delivered on our platforms, and

00:32:51.336 --> 00:32:54.026 A:middle
today we are excited to announce

00:32:54.026 --> 00:32:55.526 A:middle
a few enhancements to the

00:32:55.526 --> 00:32:56.986 A:middle
FairPlay Streaming key delivery

00:32:56.986 --> 00:32:59.576 A:middle
process that will allow you to

00:32:59.576 --> 00:33:02.526 A:middle
simplify your workflow, scale

00:32:59.576 --> 00:33:02.526 A:middle
simplify your workflow, scale

00:33:02.526 --> 00:33:03.376 A:middle
your FairPlay Streaming

00:33:03.376 --> 00:33:06.586 A:middle
adoption, and support new

00:33:06.586 --> 00:33:07.736 A:middle
content production features.

00:33:08.386 --> 00:33:10.876 A:middle
But before we talk about the

00:33:10.876 --> 00:33:12.626 A:middle
enhancements I would like to

00:33:12.626 --> 00:33:13.906 A:middle
start with a quick overview of

00:33:13.906 --> 00:33:14.646 A:middle
FairPlay Streaming.

00:33:16.876 --> 00:33:19.616 A:middle
FairPlay Streaming specifies how

00:33:19.616 --> 00:33:21.606 A:middle
to deliver -- how to securely

00:33:21.606 --> 00:33:23.006 A:middle
deliver content decryption keys.

00:33:24.026 --> 00:33:25.866 A:middle
There are three main elements in

00:33:25.866 --> 00:33:27.286 A:middle
the FairPlay Streaming system,

00:33:28.006 --> 00:33:29.546 A:middle
your media-centric application,

00:33:30.666 --> 00:33:32.096 A:middle
the one that holds the playback

00:33:32.096 --> 00:33:33.196 A:middle
session is at the center.

00:33:34.236 --> 00:33:36.216 A:middle
You have your key server on one

00:33:36.216 --> 00:33:38.006 A:middle
side that provides the

00:33:38.006 --> 00:33:40.156 A:middle
decryption keys, and

00:33:40.156 --> 00:33:41.436 A:middle
AVFoundation is on the other

00:33:41.436 --> 00:33:43.796 A:middle
side that gives you support for

00:33:43.796 --> 00:33:45.206 A:middle
decryption and playback of the

00:33:45.206 --> 00:33:45.726 A:middle
content.

00:33:47.516 --> 00:33:49.936 A:middle
There are five steps involved in

00:33:49.936 --> 00:33:51.066 A:middle
delivering content decryption

00:33:51.066 --> 00:33:52.766 A:middle
keys and it all starts when the

00:33:52.766 --> 00:33:54.676 A:middle
user is browsing through your

00:33:54.676 --> 00:33:56.676 A:middle
app trying to pick something to

00:33:56.676 --> 00:33:59.266 A:middle
play, and when it does that your

00:33:59.266 --> 00:34:01.346 A:middle
app creates an asset and as

00:33:59.266 --> 00:34:01.346 A:middle
app creates an asset and as

00:34:01.346 --> 00:34:03.476 A:middle
AVFoundation decide to playback.

00:34:04.996 --> 00:34:06.326 A:middle
When AVFoundation receives the

00:34:06.326 --> 00:34:08.146 A:middle
playback request it starts

00:34:08.146 --> 00:34:10.106 A:middle
passing the playlist and when it

00:34:10.106 --> 00:34:11.016 A:middle
sees that the content is

00:34:11.016 --> 00:34:12.505 A:middle
encrypted and uses FairPlay

00:34:12.505 --> 00:34:14.786 A:middle
Streaming for key delivery asks

00:34:14.786 --> 00:34:17.206 A:middle
your app for the key by sending

00:34:17.206 --> 00:34:18.916 A:middle
you a key request through the

00:34:18.916 --> 00:34:19.746 A:middle
delegate call back.

00:34:21.096 --> 00:34:23.156 A:middle
At that point, you could use the

00:34:23.156 --> 00:34:24.956 A:middle
key request object to create

00:34:24.956 --> 00:34:27.166 A:middle
what we call server playback

00:34:27.166 --> 00:34:30.916 A:middle
context or SPC in short, which

00:34:30.916 --> 00:34:32.706 A:middle
is an encrypted data blob that

00:34:32.706 --> 00:34:34.456 A:middle
contains the information your

00:34:34.496 --> 00:34:36.806 A:middle
key server requires to create

00:34:37.085 --> 00:34:38.936 A:middle
content decryption keys.

00:34:39.246 --> 00:34:40.585 A:middle
Your app then sends the content

00:34:40.585 --> 00:34:41.686 A:middle
decryption key to your key

00:34:41.686 --> 00:34:44.766 A:middle
server and obtains content key

00:34:44.766 --> 00:34:48.206 A:middle
context in return, or CKC, which

00:34:48.206 --> 00:34:49.556 A:middle
is another encrypted data blob

00:34:49.996 --> 00:34:51.136 A:middle
that contains the actual

00:34:51.136 --> 00:34:51.956 A:middle
decryption keys.

00:34:52.576 --> 00:34:57.166 A:middle
As a last step, your application

00:34:57.166 --> 00:35:00.706 A:middle
provides the CKC as a response

00:34:57.166 --> 00:35:00.706 A:middle
provides the CKC as a response

00:35:01.136 --> 00:35:02.356 A:middle
to the key request object that

00:35:02.356 --> 00:35:03.436 A:middle
it initially received.

00:35:04.836 --> 00:35:07.336 A:middle
So assuming AVFoundation has

00:35:07.336 --> 00:35:08.846 A:middle
already loaded playlist and

00:35:08.846 --> 00:35:11.456 A:middle
media data by now it now has the

00:35:11.456 --> 00:35:13.016 A:middle
FairPlay Streaming keys that it

00:35:13.016 --> 00:35:15.306 A:middle
requires to decrypt the content

00:35:15.386 --> 00:35:18.026 A:middle
and start the playback.

00:35:18.136 --> 00:35:20.196 A:middle
Well in a sense, FairPlay

00:35:20.196 --> 00:35:21.676 A:middle
Streaming keys are similar to

00:35:21.676 --> 00:35:24.256 A:middle
these other resources, and in

00:35:24.256 --> 00:35:26.086 A:middle
fact if you recall, if you're

00:35:26.086 --> 00:35:27.326 A:middle
using FairPlay Streaming for key

00:35:27.326 --> 00:35:29.376 A:middle
delivery today FairPlay

00:35:29.376 --> 00:35:30.806 A:middle
Streaming keys are delivered

00:35:30.806 --> 00:35:32.726 A:middle
with AVAsset accessory APIs,

00:35:32.726 --> 00:35:33.706 A:middle
similar to other custom

00:35:33.706 --> 00:35:36.376 A:middle
resources, but that's pretty

00:35:36.376 --> 00:35:38.036 A:middle
much where the similarity ends,

00:35:38.876 --> 00:35:39.176 A:middle
right?

00:35:39.176 --> 00:35:40.456 A:middle
FairPlay Streaming keys are

00:35:40.456 --> 00:35:42.026 A:middle
specialized resources that have

00:35:42.386 --> 00:35:44.626 A:middle
very specific operations defined

00:35:44.626 --> 00:35:45.146 A:middle
on them.

00:35:45.626 --> 00:35:46.446 A:middle
I'll give you a couple of

00:35:46.446 --> 00:35:48.826 A:middle
examples now.

00:35:49.056 --> 00:35:51.826 A:middle
So AVFoundation allows you to

00:35:51.926 --> 00:35:53.806 A:middle
free FairPlay Streaming keys so

00:35:53.806 --> 00:35:55.136 A:middle
that you could save them in your

00:35:55.136 --> 00:35:56.816 A:middle
app storage and use them later

00:35:56.816 --> 00:35:58.866 A:middle
on like when the user is trying

00:35:58.866 --> 00:36:00.516 A:middle
to play content offline.

00:35:58.866 --> 00:36:00.516 A:middle
to play content offline.

00:36:01.086 --> 00:36:04.146 A:middle
And you could also define

00:36:04.146 --> 00:36:05.686 A:middle
FairPlay Streaming keys to

00:36:05.686 --> 00:36:07.386 A:middle
expire after a certain duration

00:36:08.346 --> 00:36:09.766 A:middle
and the keys have to be renewed

00:36:09.766 --> 00:36:11.216 A:middle
before they expired in order to

00:36:11.216 --> 00:36:12.156 A:middle
continue decryption.

00:36:12.656 --> 00:36:15.346 A:middle
As content production features

00:36:15.376 --> 00:36:17.406 A:middle
continue to evolve, FairPlay

00:36:17.406 --> 00:36:18.836 A:middle
Streaming keys will continue to

00:36:18.836 --> 00:36:20.686 A:middle
get more specialized and so does

00:36:20.686 --> 00:36:21.996 A:middle
the key delivery process.

00:36:22.476 --> 00:36:26.416 A:middle
Further, FairPlay Streaming keys

00:36:26.546 --> 00:36:28.256 A:middle
do not have to be associated

00:36:28.256 --> 00:36:29.676 A:middle
with assets at the time of

00:36:29.796 --> 00:36:30.146 A:middle
loading.

00:36:30.806 --> 00:36:32.726 A:middle
So we think by decoupling the

00:36:32.726 --> 00:36:35.166 A:middle
key loading from media loading

00:36:35.166 --> 00:36:37.176 A:middle
or even the playback, we'll be

00:36:37.176 --> 00:36:38.336 A:middle
able to provide you more

00:36:38.336 --> 00:36:40.146 A:middle
flexibility that can be

00:36:40.146 --> 00:36:41.486 A:middle
exploited to address some of the

00:36:41.486 --> 00:36:43.846 A:middle
existence pain points and also

00:36:43.986 --> 00:36:45.656 A:middle
provide better user experience.

00:36:46.806 --> 00:36:48.296 A:middle
So with all these things in mind

00:36:48.766 --> 00:36:50.186 A:middle
we are so glad to introduce a

00:36:50.186 --> 00:36:52.976 A:middle
new API that will allow you to

00:36:53.116 --> 00:36:54.946 A:middle
better manage and deliver

00:36:54.946 --> 00:36:55.936 A:middle
content decryption keys.

00:36:56.866 --> 00:36:58.846 A:middle
Introducing AVContentKeySession.

00:37:00.136 --> 00:37:02.396 A:middle
AVContentKeySession is an

00:37:02.396 --> 00:37:03.656 A:middle
AVFoundation class that was

00:37:03.656 --> 00:37:04.706 A:middle
designed around content

00:37:04.706 --> 00:37:05.376 A:middle
decryption keys.

00:37:06.016 --> 00:37:07.856 A:middle
It allows you to decouple key

00:37:07.856 --> 00:37:10.816 A:middle
loading from media loading or

00:37:10.816 --> 00:37:12.276 A:middle
even playback, for that matter.

00:37:13.406 --> 00:37:15.036 A:middle
And it also gives you a better

00:37:15.036 --> 00:37:17.166 A:middle
control over the lifecycle of

00:37:17.206 --> 00:37:18.126 A:middle
content decryption keys.

00:37:19.596 --> 00:37:21.656 A:middle
So if you recall, your

00:37:21.656 --> 00:37:24.026 A:middle
application loads keys only when

00:37:24.026 --> 00:37:26.796 A:middle
it receives a key request from

00:37:26.796 --> 00:37:31.506 A:middle
AVFoundation and but that -- you

00:37:31.506 --> 00:37:32.386 A:middle
can change that with

00:37:32.386 --> 00:37:33.246 A:middle
AVContentKeySession.

00:37:34.086 --> 00:37:35.746 A:middle
With AVContentKeySession you get

00:37:35.746 --> 00:37:36.916 A:middle
to decide when you would like to

00:37:36.916 --> 00:37:37.346 A:middle
load keys.

00:37:38.396 --> 00:37:39.946 A:middle
However, if you choose not to

00:37:39.946 --> 00:37:41.186 A:middle
load keys before requesting

00:37:41.186 --> 00:37:43.366 A:middle
playback, AVFoundation still

00:37:43.366 --> 00:37:45.036 A:middle
sends you a key request on

00:37:45.036 --> 00:37:47.756 A:middle
demand like it does today.

00:37:47.926 --> 00:37:50.126 A:middle
So now we provide you two ways

00:37:50.626 --> 00:37:52.026 A:middle
to trigger the key loading

00:37:52.026 --> 00:37:52.386 A:middle
process.

00:37:53.056 --> 00:37:55.656 A:middle
You could use -- your

00:37:55.656 --> 00:37:56.786 A:middle
application could use

00:37:56.786 --> 00:37:58.276 A:middle
AVContentKeySession to

00:37:58.276 --> 00:37:59.546 A:middle
explicitly initiate the key

00:37:59.546 --> 00:38:02.706 A:middle
loading process, or AVFoundation

00:37:59.546 --> 00:38:02.706 A:middle
loading process, or AVFoundation

00:38:02.706 --> 00:38:03.656 A:middle
initiates the key loading

00:38:03.656 --> 00:38:05.166 A:middle
process on demand when it sees

00:38:05.166 --> 00:38:06.276 A:middle
the content is encrypted.

00:38:07.666 --> 00:38:09.696 A:middle
So let's see how using

00:38:09.696 --> 00:38:11.136 A:middle
AVContentKeySession to initiate

00:38:11.136 --> 00:38:12.786 A:middle
the key loading process could be

00:38:12.786 --> 00:38:13.256 A:middle
helpful.

00:38:13.966 --> 00:38:15.616 A:middle
And the first, use keys that I

00:38:15.616 --> 00:38:16.866 A:middle
have for you today is around

00:38:17.206 --> 00:38:17.916 A:middle
playback startup.

00:38:20.156 --> 00:38:21.966 A:middle
Key loading time could be a

00:38:21.966 --> 00:38:23.516 A:middle
significant portion of your

00:38:23.516 --> 00:38:25.386 A:middle
playback startup time because

00:38:25.726 --> 00:38:27.516 A:middle
applications normally load keys

00:38:28.336 --> 00:38:29.586 A:middle
when they receive an on-demand

00:38:29.586 --> 00:38:30.256 A:middle
key request.

00:38:30.716 --> 00:38:33.226 A:middle
You could improve the playback

00:38:33.226 --> 00:38:34.646 A:middle
startup experience your user

00:38:34.646 --> 00:38:37.046 A:middle
receives if you could load keys

00:38:37.046 --> 00:38:39.376 A:middle
even before the user has picked

00:38:39.376 --> 00:38:40.006 A:middle
something to play.

00:38:41.476 --> 00:38:42.956 A:middle
Well, AVContentKeySession allows

00:38:42.956 --> 00:38:43.466 A:middle
you to do that.

00:38:43.936 --> 00:38:44.936 A:middle
So you could use

00:38:44.936 --> 00:38:47.046 A:middle
AVContentKeySession to initiate

00:38:47.046 --> 00:38:49.016 A:middle
a key loading process and then

00:38:49.016 --> 00:38:50.646 A:middle
use the key request that you get

00:38:51.356 --> 00:38:53.846 A:middle
to load the keys independent of

00:38:53.846 --> 00:38:54.616 A:middle
the playback session.

00:38:55.976 --> 00:38:57.616 A:middle
Now we call this key preloading

00:38:59.136 --> 00:39:00.626 A:middle
and after loading the keys you

00:38:59.136 --> 00:39:00.626 A:middle
and after loading the keys you

00:39:00.626 --> 00:39:02.516 A:middle
could request a playback so

00:39:03.046 --> 00:39:04.286 A:middle
during playback you don't have

00:39:04.286 --> 00:39:05.296 A:middle
to load any keys, and the

00:39:05.296 --> 00:39:06.706 A:middle
playback -- the decryption could

00:39:06.706 --> 00:39:07.726 A:middle
start immediately.

00:39:08.896 --> 00:39:10.616 A:middle
The second use case I have for

00:39:10.616 --> 00:39:11.896 A:middle
you today is gaining a lot of

00:39:11.896 --> 00:39:14.466 A:middle
prominence day by day and it is

00:39:14.466 --> 00:39:15.756 A:middle
around live playback.

00:39:16.276 --> 00:39:19.306 A:middle
We have seen an explosion in the

00:39:19.396 --> 00:39:20.756 A:middle
amount of live content that

00:39:20.756 --> 00:39:21.966 A:middle
delivered on our platforms,

00:39:22.546 --> 00:39:24.096 A:middle
thanks to a more immersive and

00:39:24.096 --> 00:39:25.716 A:middle
integrated experience users

00:39:25.716 --> 00:39:26.706 A:middle
receive on our devices.

00:39:28.116 --> 00:39:29.596 A:middle
With more users looking to

00:39:29.596 --> 00:39:31.366 A:middle
consume sports and other live

00:39:31.366 --> 00:39:33.766 A:middle
events on our devices,

00:39:34.716 --> 00:39:35.996 A:middle
developers are using more

00:39:35.996 --> 00:39:37.266 A:middle
advanced content production

00:39:37.266 --> 00:39:39.466 A:middle
features like key rotation and

00:39:39.466 --> 00:39:41.466 A:middle
key renewal to add an extra

00:39:41.466 --> 00:39:42.386 A:middle
layer of protection while

00:39:42.386 --> 00:39:43.846 A:middle
delivering premium live content.

00:39:44.426 --> 00:39:47.726 A:middle
Due to the nature of live

00:39:47.726 --> 00:39:50.496 A:middle
streaming, your keys servers get

00:39:50.496 --> 00:39:51.926 A:middle
bombarded with millions of key

00:39:51.926 --> 00:39:53.406 A:middle
requests all at once when the

00:39:53.406 --> 00:39:54.666 A:middle
keys are being rotated or

00:39:54.666 --> 00:39:55.076 A:middle
renewed.

00:39:56.296 --> 00:39:57.266 A:middle
Well, you could use

00:39:57.266 --> 00:40:00.266 A:middle
AVContentKeySession to alleviate

00:39:57.266 --> 00:40:00.266 A:middle
AVContentKeySession to alleviate

00:40:00.266 --> 00:40:02.686 A:middle
the situation by load balancing

00:40:02.686 --> 00:40:04.136 A:middle
key requests at the point of

00:40:04.136 --> 00:40:04.526 A:middle
origin.

00:40:05.526 --> 00:40:08.566 A:middle
Let me explain how you could do

00:40:08.566 --> 00:40:09.906 A:middle
this with a simple illustration

00:40:09.906 --> 00:40:10.156 A:middle
here.

00:40:13.046 --> 00:40:14.046 A:middle
Consider the scenario in which

00:40:14.046 --> 00:40:16.036 A:middle
millions of users are watching a

00:40:16.036 --> 00:40:17.596 A:middle
popular live stream like Apple's

00:40:17.666 --> 00:40:18.086 A:middle
Keynote.

00:40:19.106 --> 00:40:20.436 A:middle
It's possible that they all

00:40:20.436 --> 00:40:21.606 A:middle
started at different points in

00:40:21.606 --> 00:40:23.886 A:middle
time but when it's time to renew

00:40:23.886 --> 00:40:25.846 A:middle
or update the key they all send

00:40:25.916 --> 00:40:27.266 A:middle
requests to your key server at

00:40:27.266 --> 00:40:28.196 A:middle
the exact same time.

00:40:28.546 --> 00:40:31.146 A:middle
That presents a huge load on the

00:40:31.146 --> 00:40:33.176 A:middle
key server for a short duration

00:40:33.176 --> 00:40:35.246 A:middle
of time and then things get back

00:40:35.246 --> 00:40:37.416 A:middle
to normal, until it's time to

00:40:37.416 --> 00:40:38.626 A:middle
renew or update the key again,

00:40:39.826 --> 00:40:40.146 A:middle
right?

00:40:40.476 --> 00:40:41.876 A:middle
So this pattern continues

00:40:42.626 --> 00:40:44.006 A:middle
leading to input load on your

00:40:44.006 --> 00:40:44.596 A:middle
key serer.

00:40:45.646 --> 00:40:46.186 A:middle
You could use

00:40:46.186 --> 00:40:48.856 A:middle
AVContentKeySession to spread

00:40:48.856 --> 00:40:51.606 A:middle
out key requests by picking like

00:40:51.606 --> 00:40:53.346 A:middle
a random point within a small

00:40:53.346 --> 00:40:55.406 A:middle
time window before the key

00:40:55.406 --> 00:40:57.756 A:middle
actually expires and initiating

00:40:57.756 --> 00:40:58.926 A:middle
the key loading yourself.

00:41:00.096 --> 00:41:02.186 A:middle
So what this allows you to do is

00:41:02.316 --> 00:41:04.616 A:middle
scale your live offering without

00:41:04.676 --> 00:41:05.766 A:middle
having to throw mode or

00:41:05.766 --> 00:41:06.796 A:middle
[inaudible] of your key server.

00:41:08.836 --> 00:41:10.746 A:middle
So now that we have seen some

00:41:10.746 --> 00:41:13.086 A:middle
use cases where initiating key

00:41:13.086 --> 00:41:14.226 A:middle
loading process with

00:41:14.226 --> 00:41:15.946 A:middle
AVContentKeySession was helpful,

00:41:16.656 --> 00:41:17.966 A:middle
let's see how to do it in terms

00:41:17.966 --> 00:41:18.386 A:middle
of code.

00:41:18.916 --> 00:41:21.856 A:middle
You could initiate a key loading

00:41:21.856 --> 00:41:23.406 A:middle
process which is three lines of

00:41:23.466 --> 00:41:25.906 A:middle
code, it's that simple, and here

00:41:25.906 --> 00:41:26.276 A:middle
it is.

00:41:27.336 --> 00:41:29.756 A:middle
So the first thing you do is

00:41:30.176 --> 00:41:31.086 A:middle
create an instance of

00:41:31.086 --> 00:41:33.086 A:middle
AVContentKeySession for FairPlay

00:41:33.086 --> 00:41:33.526 A:middle
Streaming.

00:41:34.046 --> 00:41:36.796 A:middle
You then set up your app as a

00:41:36.796 --> 00:41:37.876 A:middle
contentKeySession Delegate.

00:41:39.126 --> 00:41:40.696 A:middle
You should expect to receive all

00:41:40.696 --> 00:41:41.886 A:middle
delegate callbacks on the

00:41:41.886 --> 00:41:43.136 A:middle
delegate queue that you specify

00:41:43.136 --> 00:41:43.396 A:middle
here.

00:41:44.056 --> 00:41:48.076 A:middle
The third step is to invoke

00:41:48.076 --> 00:41:49.706 A:middle
processContentKeyRequest method

00:41:50.256 --> 00:41:51.586 A:middle
and that will initiate the key

00:41:51.586 --> 00:41:52.356 A:middle
loading process.

00:41:54.266 --> 00:41:55.286 A:middle
So have to note a couple of

00:41:55.316 --> 00:41:55.906 A:middle
things here.

00:41:57.556 --> 00:41:59.366 A:middle
There are no changes required in

00:41:59.366 --> 00:42:01.196 A:middle
your keys or your key server

00:41:59.366 --> 00:42:01.196 A:middle
your keys or your key server

00:42:01.196 --> 00:42:02.586 A:middle
module implementation in order

00:42:02.586 --> 00:42:03.376 A:middle
to use this feature.

00:42:04.606 --> 00:42:06.106 A:middle
This is -- all implementation

00:42:06.106 --> 00:42:07.346 A:middle
here is on the client side which

00:42:07.346 --> 00:42:07.766 A:middle
is great.

00:42:08.706 --> 00:42:12.596 A:middle
Second, the identifier that you

00:42:12.596 --> 00:42:15.616 A:middle
specify here should match with

00:42:15.616 --> 00:42:17.146 A:middle
the identifier that you specify

00:42:17.146 --> 00:42:19.346 A:middle
in your EXT-X-KEY tag in your

00:42:19.346 --> 00:42:21.706 A:middle
media playlist.

00:42:21.706 --> 00:42:23.486 A:middle
What that allows us to do is

00:42:23.486 --> 00:42:25.756 A:middle
match the keys that you loaded

00:42:25.756 --> 00:42:27.396 A:middle
here with the keys that you

00:42:27.396 --> 00:42:28.566 A:middle
would request during playback.

00:42:29.096 --> 00:42:33.456 A:middle
And third, you should have an

00:42:33.456 --> 00:42:35.596 A:middle
out-of-band process to obtain

00:42:35.596 --> 00:42:38.306 A:middle
the keys for a particular asset

00:42:38.686 --> 00:42:40.566 A:middle
from your key server so that you

00:42:40.566 --> 00:42:42.836 A:middle
could load all these keys at

00:42:43.616 --> 00:42:45.406 A:middle
this point.

00:42:45.526 --> 00:42:46.436 A:middle
When you invoke

00:42:46.436 --> 00:42:47.786 A:middle
processContentKeyRequest method

00:42:47.786 --> 00:42:50.186 A:middle
on AVContentKeySession, we send

00:42:50.186 --> 00:42:52.026 A:middle
you an AVContentKey request

00:42:52.026 --> 00:42:54.226 A:middle
object through a delegate call

00:42:54.226 --> 00:42:56.486 A:middle
back, and this is exact same

00:42:56.486 --> 00:42:57.946 A:middle
delegate method that gets called

00:42:58.156 --> 00:42:59.906 A:middle
even when AVFoundation initiates

00:42:59.906 --> 00:43:00.906 A:middle
the key loading process.

00:42:59.906 --> 00:43:00.906 A:middle
the key loading process.

00:43:02.236 --> 00:43:03.466 A:middle
So now you could use the key

00:43:03.466 --> 00:43:05.166 A:middle
request object to do all the

00:43:05.166 --> 00:43:06.306 A:middle
FairPlay Streamings plus

00:43:06.366 --> 00:43:08.136 A:middle
[inaudible] operations like you

00:43:08.176 --> 00:43:10.426 A:middle
could request an SPC, this is

00:43:10.426 --> 00:43:12.176 A:middle
very similar to the way you do

00:43:12.416 --> 00:43:13.856 A:middle
your request SPC with AVAsset

00:43:13.856 --> 00:43:15.466 A:middle
key sorting request.

00:43:16.746 --> 00:43:18.166 A:middle
You then send SPC to your key

00:43:18.216 --> 00:43:21.676 A:middle
server, obtain the CKC and as

00:43:21.676 --> 00:43:23.656 A:middle
the last step you would create a

00:43:23.656 --> 00:43:26.106 A:middle
response object with the CKC and

00:43:26.106 --> 00:43:27.956 A:middle
set that as a response the

00:43:27.956 --> 00:43:29.046 A:middle
ContentKeyRequest object.

00:43:29.106 --> 00:43:33.056 A:middle
So you have to keep a couple of

00:43:33.056 --> 00:43:34.526 A:middle
things in mind while responding

00:43:34.526 --> 00:43:35.396 A:middle
to a key request.

00:43:36.356 --> 00:43:38.226 A:middle
As soon as you set the CKC as a

00:43:38.226 --> 00:43:41.186 A:middle
response to the key request, you

00:43:41.406 --> 00:43:42.986 A:middle
would consume a secure decrypt

00:43:42.986 --> 00:43:44.776 A:middle
slot on the device and there are

00:43:44.776 --> 00:43:46.066 A:middle
a limited number of those.

00:43:47.166 --> 00:43:48.836 A:middle
So it's okay to initiate key

00:43:48.836 --> 00:43:50.326 A:middle
loading process for any number

00:43:50.326 --> 00:43:52.356 A:middle
of keys and you can obtain the

00:43:52.356 --> 00:43:53.626 A:middle
CKC's as well for all those

00:43:53.626 --> 00:43:56.066 A:middle
different key requests, but be

00:43:56.066 --> 00:43:57.086 A:middle
careful with the last step.

00:43:58.206 --> 00:44:00.056 A:middle
You should set CKCs on only

00:43:58.206 --> 00:44:00.056 A:middle
You should set CKCs on only

00:44:00.056 --> 00:44:01.596 A:middle
those keys that you predict

00:44:01.596 --> 00:44:02.886 A:middle
might be used during playback,

00:44:03.676 --> 00:44:04.976 A:middle
and do it just before you

00:44:04.976 --> 00:44:06.406 A:middle
request a playback.

00:44:10.046 --> 00:44:12.996 A:middle
So with that background, let's

00:44:13.086 --> 00:44:15.366 A:middle
shift gears and see how we could

00:44:15.366 --> 00:44:17.866 A:middle
use AVContentKeySession in the

00:44:17.866 --> 00:44:19.766 A:middle
context of offline HLS playback.

00:44:21.676 --> 00:44:24.546 A:middle
We introduced persistent keys

00:44:24.546 --> 00:44:26.156 A:middle
last year when we modified

00:44:26.156 --> 00:44:28.446 A:middle
FairPlay Streaming to protect

00:44:28.446 --> 00:44:30.656 A:middle
your offline HLS assets.

00:44:31.196 --> 00:44:32.626 A:middle
AVContentKeySession could be

00:44:32.626 --> 00:44:35.056 A:middle
used to create persistent keys

00:44:35.736 --> 00:44:36.686 A:middle
as well.

00:44:36.986 --> 00:44:39.586 A:middle
Before requesting the download

00:44:40.006 --> 00:44:43.946 A:middle
of HLS assets, you could use

00:44:43.946 --> 00:44:45.936 A:middle
AVContentKeySession to initiate

00:44:45.936 --> 00:44:47.716 A:middle
key loading process and use the

00:44:47.716 --> 00:44:49.646 A:middle
key request object to create

00:44:49.646 --> 00:44:50.366 A:middle
persistent keys.

00:44:51.516 --> 00:44:52.596 A:middle
Then you could store the

00:44:52.596 --> 00:44:53.706 A:middle
persistent keys in your app

00:44:53.706 --> 00:44:54.866 A:middle
storage for future use.

00:44:55.576 --> 00:44:58.036 A:middle
With that, this will make your

00:44:58.036 --> 00:44:59.396 A:middle
workflow a little bit simpler

00:44:59.396 --> 00:45:00.566 A:middle
because now you don't have to

00:44:59.396 --> 00:45:00.566 A:middle
because now you don't have to

00:45:00.566 --> 00:45:02.766 A:middle
define the EXT-X Session keys in

00:45:02.766 --> 00:45:04.356 A:middle
your master playlist and so on,

00:45:05.136 --> 00:45:05.726 A:middle
you could just use

00:45:05.726 --> 00:45:06.556 A:middle
AVContentKeySession.

00:45:08.976 --> 00:45:11.776 A:middle
Further, while creating and

00:45:11.776 --> 00:45:14.386 A:middle
using persistent keys, you

00:45:14.386 --> 00:45:16.246 A:middle
should work with the sub class

00:45:16.246 --> 00:45:18.046 A:middle
of AVContentKeyRequest, which is

00:45:18.046 --> 00:45:18.316 A:middle
an

00:45:18.316 --> 00:45:19.706 A:middle
AVPersistableContentKeyRequest.

00:45:20.536 --> 00:45:21.936 A:middle
I'll explain in terms of code

00:45:21.936 --> 00:45:24.386 A:middle
how to request and

00:45:24.386 --> 00:45:25.846 A:middle
AVPersistableContentKeyRequest

00:45:25.846 --> 00:45:28.016 A:middle
and also to work -- also how to

00:45:28.016 --> 00:45:28.686 A:middle
work with an

00:45:28.686 --> 00:45:30.026 A:middle
AVPersistableContentKeyRequest.

00:45:30.586 --> 00:45:33.076 A:middle
So if you recall, this is the

00:45:33.076 --> 00:45:34.546 A:middle
delegate method that gets called

00:45:34.716 --> 00:45:36.516 A:middle
when you initiate a key loading

00:45:36.516 --> 00:45:37.006 A:middle
process.

00:45:37.446 --> 00:45:40.636 A:middle
At this point, if you're trying

00:45:40.636 --> 00:45:42.846 A:middle
to create a persistent key you

00:45:42.846 --> 00:45:44.216 A:middle
should just respond to the key

00:45:44.216 --> 00:45:45.776 A:middle
request and request for

00:45:45.996 --> 00:45:47.306 A:middle
PersistableContentKeyRequest,

00:45:48.206 --> 00:45:49.956 A:middle
and we would send you an

00:45:49.956 --> 00:45:51.286 A:middle
AVPersistableContentKeyRequest

00:45:51.286 --> 00:45:53.696 A:middle
object through a new delegate

00:45:53.696 --> 00:45:54.136 A:middle
callback.

00:45:54.656 --> 00:45:57.036 A:middle
You could use

00:45:57.036 --> 00:45:58.376 A:middle
AVPersistableContentKeyRequest

00:45:58.536 --> 00:45:59.716 A:middle
to do all your FairPlay

00:45:59.716 --> 00:46:01.166 A:middle
Streaming specific operations,

00:45:59.716 --> 00:46:01.166 A:middle
Streaming specific operations,

00:46:01.956 --> 00:46:04.666 A:middle
like create SPC, send SPC to

00:46:04.716 --> 00:46:06.876 A:middle
your key server, get a CKC and

00:46:06.876 --> 00:46:09.406 A:middle
use the CKC to now create a

00:46:09.406 --> 00:46:11.336 A:middle
persistent key which you can

00:46:11.336 --> 00:46:13.146 A:middle
store in your app storage so

00:46:13.146 --> 00:46:14.566 A:middle
that you could use it later when

00:46:14.566 --> 00:46:15.506 A:middle
the user is offline.

00:46:16.696 --> 00:46:17.726 A:middle
When it's time to use the

00:46:17.726 --> 00:46:20.036 A:middle
persistent key, all you have to

00:46:20.036 --> 00:46:22.106 A:middle
do is create a response object

00:46:22.106 --> 00:46:23.196 A:middle
with the persistent key data

00:46:23.196 --> 00:46:26.256 A:middle
blob and set that as a response

00:46:26.356 --> 00:46:27.766 A:middle
on the ContentKeyRequest object.

00:46:28.956 --> 00:46:29.326 A:middle
That's it.

00:46:31.456 --> 00:46:33.146 A:middle
So if you're using FairPlay

00:46:33.146 --> 00:46:35.556 A:middle
Streaming for key delivery today

00:46:35.646 --> 00:46:36.656 A:middle
you would have observed that

00:46:37.096 --> 00:46:38.976 A:middle
AVContentKeySession is designed

00:46:38.976 --> 00:46:40.616 A:middle
to work similarly to what you're

00:46:40.616 --> 00:46:41.626 A:middle
already used today,

00:46:41.626 --> 00:46:42.836 A:middle
AVAssetRsourceLoader API.

00:46:43.496 --> 00:46:45.246 A:middle
In place of

00:46:45.246 --> 00:46:46.876 A:middle
AVAssetResourceLoading request,

00:46:47.546 --> 00:46:49.186 A:middle
we have AVContentKeyRequest.

00:46:50.626 --> 00:46:51.766 A:middle
AVAsset is just where the

00:46:51.766 --> 00:46:53.196 A:middle
delegates call apart, it's

00:46:53.196 --> 00:46:54.296 A:middle
called AVContentKeySession

00:46:54.296 --> 00:46:54.616 A:middle
delegate.

00:46:56.456 --> 00:46:57.686 A:middle
However, that is a key

00:46:57.686 --> 00:46:58.346 A:middle
difference.

00:46:58.796 --> 00:47:00.556 A:middle
Unlike AVAssetResourceLoader,

00:46:58.796 --> 00:47:00.556 A:middle
Unlike AVAssetResourceLoader,

00:47:00.906 --> 00:47:02.826 A:middle
AVContentKeySession is not tied

00:47:03.256 --> 00:47:04.856 A:middle
to an asset at the time of

00:47:04.926 --> 00:47:08.936 A:middle
creation, so you could create an

00:47:08.936 --> 00:47:11.716 A:middle
AVContentKeySession at any point

00:47:12.586 --> 00:47:13.836 A:middle
and use that to load all the

00:47:13.836 --> 00:47:16.516 A:middle
keys, and just before you

00:47:16.516 --> 00:47:18.546 A:middle
request playback you should add

00:47:18.886 --> 00:47:21.256 A:middle
your AVasset as a content key

00:47:21.256 --> 00:47:21.816 A:middle
recipient.

00:47:23.056 --> 00:47:25.106 A:middle
That will allow your AVAsset to

00:47:25.106 --> 00:47:26.476 A:middle
access all the keys that you

00:47:26.476 --> 00:47:27.316 A:middle
preloaded with the

00:47:27.316 --> 00:47:28.286 A:middle
ContentKeySession object.

00:47:30.856 --> 00:47:33.826 A:middle
So now we have 2 API's,

00:47:34.176 --> 00:47:35.326 A:middle
AVContentKeySession and

00:47:35.326 --> 00:47:36.516 A:middle
AVAssetResourceLoader, and you

00:47:36.516 --> 00:47:38.126 A:middle
might be wondering which API to

00:47:38.166 --> 00:47:39.856 A:middle
use for loading different types

00:47:39.856 --> 00:47:41.886 A:middle
of resources, and here's what we

00:47:41.886 --> 00:47:42.346 A:middle
recommend.

00:47:43.486 --> 00:47:45.736 A:middle
Use AVContentKeySession for

00:47:45.736 --> 00:47:47.036 A:middle
loading content decryption keys,

00:47:47.546 --> 00:47:49.276 A:middle
and use AVAssetResourceLoader

00:47:49.756 --> 00:47:51.126 A:middle
for loading everything else.

00:47:52.116 --> 00:47:53.506 A:middle
I have to point out that we are

00:47:53.506 --> 00:47:55.476 A:middle
not duplicating key handling

00:47:55.476 --> 00:47:57.036 A:middle
aspects of AVAssetResourceLoader

00:47:57.036 --> 00:47:58.946 A:middle
at this point so you could

00:47:58.946 --> 00:47:59.986 A:middle
continue using

00:47:59.986 --> 00:48:02.056 A:middle
AVAssetResourceLoader like you

00:47:59.986 --> 00:48:02.056 A:middle
AVAssetResourceLoader like you

00:48:02.056 --> 00:48:03.326 A:middle
do today for loading FairPlay

00:48:03.326 --> 00:48:04.936 A:middle
Streaming keys, but we highly

00:48:04.936 --> 00:48:07.016 A:middle
recommend that you switch over

00:48:07.016 --> 00:48:09.446 A:middle
to AVContentKeySession for that

00:48:10.336 --> 00:48:10.526 A:middle
purpose.

00:48:10.656 --> 00:48:12.536 A:middle
So, who is responsible for

00:48:12.536 --> 00:48:14.036 A:middle
loading decryption keys if an

00:48:14.036 --> 00:48:15.266 A:middle
asset has both

00:48:15.266 --> 00:48:16.856 A:middle
AVAssetResourceLoader delegate

00:48:16.856 --> 00:48:18.546 A:middle
and AVContentKeySession delegate

00:48:18.546 --> 00:48:19.356 A:middle
associated with it?

00:48:20.686 --> 00:48:22.836 A:middle
Well, to be consistent we

00:48:22.836 --> 00:48:24.376 A:middle
enforce that all content

00:48:24.376 --> 00:48:26.116 A:middle
decryption keys are loaded

00:48:26.116 --> 00:48:27.626 A:middle
exclusively with

00:48:27.626 --> 00:48:29.116 A:middle
AVContentKeySession delegate.

00:48:30.796 --> 00:48:32.886 A:middle
So your AVAssetResourceLoader

00:48:32.886 --> 00:48:34.376 A:middle
delegate receives all resource

00:48:34.376 --> 00:48:37.056 A:middle
loading requests including those

00:48:37.056 --> 00:48:38.546 A:middle
four content decryption keys.

00:48:39.796 --> 00:48:41.906 A:middle
The app is expected to just

00:48:41.906 --> 00:48:43.176 A:middle
defer all the content decryption

00:48:43.176 --> 00:48:46.696 A:middle
key loading by calling finish

00:48:46.696 --> 00:48:48.386 A:middle
loading on the loading request

00:48:48.736 --> 00:48:50.506 A:middle
so AVFoundation could re allow

00:48:50.506 --> 00:48:51.546 A:middle
the request to the

00:48:51.546 --> 00:48:52.796 A:middle
AVContentKeySession delegate.

00:48:53.226 --> 00:48:54.356 A:middle
Let me show you how to do that

00:48:54.356 --> 00:48:54.806 A:middle
in code.

00:48:55.156 --> 00:48:56.136 A:middle
It's really simple.

00:48:56.896 --> 00:48:58.286 A:middle
So here's a delegate method that

00:48:58.286 --> 00:49:00.266 A:middle
gets called when AVFoundation is

00:48:58.286 --> 00:49:00.266 A:middle
gets called when AVFoundation is

00:49:00.266 --> 00:49:02.796 A:middle
trying to load a resource, and

00:49:02.796 --> 00:49:03.866 A:middle
when you see that the resource

00:49:03.866 --> 00:49:05.296 A:middle
is for a content decryption key

00:49:05.996 --> 00:49:07.046 A:middle
you should just set the content

00:49:07.046 --> 00:49:08.696 A:middle
pipe to say that it's a content

00:49:08.696 --> 00:49:11.456 A:middle
key and call finish loading.

00:49:11.946 --> 00:49:13.796 A:middle
So at that point we will send a

00:49:13.796 --> 00:49:16.706 A:middle
new content key loading request

00:49:16.916 --> 00:49:18.246 A:middle
to AVContentKeySession delegate.

00:49:18.706 --> 00:49:21.366 A:middle
If it's any other resource you

00:49:21.366 --> 00:49:22.376 A:middle
could just continue loading the

00:49:22.376 --> 00:49:22.926 A:middle
resource here.

00:49:23.606 --> 00:49:26.916 A:middle
So I hope this whirlwind tour of

00:49:26.966 --> 00:49:28.506 A:middle
the new API provided you some

00:49:28.506 --> 00:49:29.776 A:middle
context around what you can

00:49:29.776 --> 00:49:30.646 A:middle
accomplish with

00:49:30.926 --> 00:49:31.946 A:middle
AVContentKeySession.

00:49:33.156 --> 00:49:34.636 A:middle
Before I wrap up the talk I have

00:49:34.636 --> 00:49:37.076 A:middle
one more exciting feature to

00:49:37.206 --> 00:49:38.856 A:middle
share with you, and this is

00:49:38.856 --> 00:49:40.106 A:middle
available through

00:49:40.106 --> 00:49:40.916 A:middle
AVContentKeySession.

00:49:43.336 --> 00:49:46.376 A:middle
We are providing double expiry

00:49:46.376 --> 00:49:49.596 A:middle
windows support for FairPlay

00:49:49.596 --> 00:49:50.986 A:middle
Streaming persistent keys.

00:49:51.606 --> 00:49:52.936 A:middle
Now, what does this double

00:49:52.936 --> 00:49:54.186 A:middle
expiry window thing?

00:49:55.236 --> 00:49:56.956 A:middle
If you've ever rented a movie on

00:49:56.956 --> 00:49:59.246 A:middle
iTunes you would see that you

00:49:59.246 --> 00:50:00.966 A:middle
have -- once you rent a movie

00:49:59.246 --> 00:50:00.966 A:middle
have -- once you rent a movie

00:50:00.966 --> 00:50:03.406 A:middle
you have 30 days to watch it.

00:50:03.666 --> 00:50:05.286 A:middle
And once you start watching the

00:50:05.286 --> 00:50:06.836 A:middle
moving you have 24 hours to

00:50:06.836 --> 00:50:07.336 A:middle
finish it.

00:50:08.046 --> 00:50:10.076 A:middle
We call this dual expiry window

00:50:10.076 --> 00:50:10.916 A:middle
model for rentals.

00:50:13.116 --> 00:50:14.936 A:middle
So what this feature allows you

00:50:14.936 --> 00:50:18.286 A:middle
to do is define and customize

00:50:18.776 --> 00:50:20.966 A:middle
two expiry windows for FairPlay

00:50:20.966 --> 00:50:22.076 A:middle
Streaming persistent keys.

00:50:23.016 --> 00:50:25.736 A:middle
That will allow you to support

00:50:26.296 --> 00:50:27.876 A:middle
items like rental feature

00:50:28.976 --> 00:50:32.366 A:middle
without much engineering effort

00:50:32.366 --> 00:50:34.816 A:middle
on the silver side and the best

00:50:34.816 --> 00:50:36.116 A:middle
thing is it works on both

00:50:36.296 --> 00:50:37.936 A:middle
offline and online playback.

00:50:39.276 --> 00:50:41.066 A:middle
So in order to use this feature,

00:50:41.676 --> 00:50:42.756 A:middle
you have to first opt in by

00:50:42.756 --> 00:50:44.166 A:middle
sending suitable descriptor in

00:50:44.376 --> 00:50:46.696 A:middle
CKC and that will allow you to

00:50:46.696 --> 00:50:48.256 A:middle
specify two expiry windows.

00:50:49.056 --> 00:50:49.916 A:middle
The first one is called a

00:50:49.916 --> 00:50:51.716 A:middle
storage expiry window which

00:50:51.716 --> 00:50:54.096 A:middle
starts as soon as the persistent

00:50:54.096 --> 00:50:56.266 A:middle
key is created, and then we have

00:50:56.266 --> 00:50:57.926 A:middle
a playback expiry window which

00:50:57.926 --> 00:51:00.106 A:middle
starts when the persistent key

00:50:57.926 --> 00:51:00.106 A:middle
starts when the persistent key

00:51:00.106 --> 00:51:01.936 A:middle
is used to start the playback.

00:51:02.996 --> 00:51:04.726 A:middle
To explain this feature better

00:51:04.726 --> 00:51:07.316 A:middle
let me just give you -- let me

00:51:07.316 --> 00:51:08.596 A:middle
just take you over a timeline of

00:51:08.596 --> 00:51:09.766 A:middle
events and the context of

00:51:09.766 --> 00:51:10.956 A:middle
offline playback.

00:51:11.766 --> 00:51:15.706 A:middle
When the user rents a movie to

00:51:15.706 --> 00:51:18.566 A:middle
play offline you would create a

00:51:18.566 --> 00:51:20.896 A:middle
persistent key with a CKC that

00:51:20.946 --> 00:51:22.146 A:middle
opts in to use this feature.

00:51:23.586 --> 00:51:25.226 A:middle
This persistent key is said to

00:51:25.226 --> 00:51:27.126 A:middle
expire at the end of storage

00:51:27.126 --> 00:51:30.246 A:middle
expiry window which was 30 days

00:51:30.246 --> 00:51:31.016 A:middle
from our example.

00:51:31.566 --> 00:51:35.736 A:middle
You would typically store this

00:51:35.936 --> 00:51:37.126 A:middle
persistent key in your apps

00:51:37.126 --> 00:51:39.626 A:middle
storage and use it to answer a

00:51:39.626 --> 00:51:40.626 A:middle
key request later on.

00:51:41.396 --> 00:51:42.676 A:middle
Now when the user comes back

00:51:42.676 --> 00:51:44.796 A:middle
within these 30 days and asks

00:51:44.796 --> 00:51:47.076 A:middle
you to start play -- ask you to

00:51:47.076 --> 00:51:49.266 A:middle
play the content, you will get a

00:51:49.266 --> 00:51:50.826 A:middle
key request and you would use

00:51:50.826 --> 00:51:52.236 A:middle
this persistent key to answer

00:51:52.236 --> 00:51:53.066 A:middle
the key request.

00:51:53.786 --> 00:51:56.286 A:middle
At that point, we will send you

00:51:56.286 --> 00:51:58.766 A:middle
an updated persistent key which

00:51:58.766 --> 00:52:00.596 A:middle
is set to expire at the end of

00:51:58.766 --> 00:52:00.596 A:middle
is set to expire at the end of

00:52:01.136 --> 00:52:02.966 A:middle
playback experiment which was 24

00:52:02.966 --> 00:52:03.916 A:middle
hours from our example.

00:52:05.156 --> 00:52:06.376 A:middle
Along with that we'll also

00:52:06.376 --> 00:52:08.256 A:middle
explicitly expire the original

00:52:08.256 --> 00:52:09.246 A:middle
persistent key that you've

00:52:09.246 --> 00:52:11.366 A:middle
created, so you're expected to

00:52:11.366 --> 00:52:13.756 A:middle
save the updated persistent key

00:52:13.756 --> 00:52:15.546 A:middle
in your app storage and use that

00:52:15.946 --> 00:52:17.636 A:middle
to answer future key loading

00:52:17.636 --> 00:52:18.096 A:middle
requests.

00:52:18.766 --> 00:52:20.156 A:middle
That is when the user stops and

00:52:20.156 --> 00:52:22.176 A:middle
resumes playback within the next

00:52:22.176 --> 00:52:22.786 A:middle
24 hours.

00:52:24.256 --> 00:52:25.716 A:middle
In terms of code this is very

00:52:25.716 --> 00:52:27.286 A:middle
similar to the persistent key

00:52:27.786 --> 00:52:29.046 A:middle
workflow that we just saw a few

00:52:29.046 --> 00:52:31.536 A:middle
slides ago, however, we'll send

00:52:31.536 --> 00:52:33.186 A:middle
you this new updated persistent

00:52:33.186 --> 00:52:34.946 A:middle
key through a new

00:52:34.996 --> 00:52:36.296 A:middle
AVContentKeySession delegate

00:52:36.356 --> 00:52:36.816 A:middle
callback.

00:52:37.276 --> 00:52:40.066 A:middle
So those were all the

00:52:40.066 --> 00:52:41.716 A:middle
enhancements that we had for

00:52:41.716 --> 00:52:43.176 A:middle
FairPlay Streaming key delivery

00:52:43.176 --> 00:52:44.006 A:middle
process this year.

00:52:45.536 --> 00:52:48.686 A:middle
In conclusion, we introduced two

00:52:48.686 --> 00:52:49.316 A:middle
new CODECS.

00:52:49.636 --> 00:52:52.986 A:middle
We introduced a [inaudible] this

00:52:52.986 --> 00:52:56.116 A:middle
year, HEVC and IMSC1.

00:52:56.266 --> 00:52:59.166 A:middle
We added the EXT-X-GAP tag that

00:52:59.166 --> 00:53:00.806 A:middle
allows you to indicate gaps in

00:52:59.166 --> 00:53:00.806 A:middle
allows you to indicate gaps in

00:53:00.806 --> 00:53:01.836 A:middle
your livestreams.

00:53:02.776 --> 00:53:05.546 A:middle
And now you can define and use

00:53:06.006 --> 00:53:09.116 A:middle
PHP style variables in your HLS

00:53:09.116 --> 00:53:09.596 A:middle
streams.

00:53:10.206 --> 00:53:13.036 A:middle
You can now synchronize two or

00:53:13.036 --> 00:53:16.796 A:middle
more HLS streams, and we

00:53:17.016 --> 00:53:19.896 A:middle
provided new APIs that will

00:53:19.896 --> 00:53:22.516 A:middle
allow you to have better control

00:53:22.516 --> 00:53:24.566 A:middle
over offline HLS assets.

00:53:25.106 --> 00:53:27.596 A:middle
Now there is a new API

00:53:27.596 --> 00:53:29.336 A:middle
AVContentKeySession that allows

00:53:29.336 --> 00:53:31.786 A:middle
you to get better manage and

00:53:31.786 --> 00:53:33.146 A:middle
deliver content decryption keys.

00:53:34.666 --> 00:53:37.866 A:middle
And finally, we added dual

00:53:37.866 --> 00:53:39.406 A:middle
expiry window support for all

00:53:39.536 --> 00:53:40.916 A:middle
FairPlay Streaming persistent

00:53:40.916 --> 00:53:43.216 A:middle
keys so that will allow you to

00:53:44.186 --> 00:53:45.686 A:middle
support rental model with your

00:53:45.686 --> 00:53:46.866 A:middle
offline HLS assets.

00:53:48.276 --> 00:53:49.656 A:middle
It was really exciting for all

00:53:49.656 --> 00:53:51.316 A:middle
of us to work on these new

00:53:51.316 --> 00:53:53.506 A:middle
features and we look forward to

00:53:53.506 --> 00:53:54.056 A:middle
the adoption.

00:53:55.516 --> 00:53:56.956 A:middle
Thanks a lot for attending this

00:53:56.956 --> 00:53:57.366 A:middle
session.

00:53:58.046 --> 00:54:00.046 A:middle
You can get more information by

00:53:58.046 --> 00:54:00.046 A:middle
You can get more information by

00:54:00.046 --> 00:54:01.666 A:middle
visiting our session page on the

00:54:01.666 --> 00:54:02.426 A:middle
developer site.

00:54:03.146 --> 00:54:04.996 A:middle
You can also download all the

00:54:04.996 --> 00:54:07.366 A:middle
sample code for different things

00:54:07.416 --> 00:54:08.886 A:middle
that we covered during this

00:54:08.886 --> 00:54:09.146 A:middle
talk.

00:54:09.876 --> 00:54:12.766 A:middle
We have a bunch of related

00:54:12.766 --> 00:54:13.496 A:middle
sessions for you.

00:54:14.096 --> 00:54:16.426 A:middle
I strongly recommend watching

00:54:16.426 --> 00:54:18.246 A:middle
Error Handling Best Practices,

00:54:18.356 --> 00:54:19.826 A:middle
and Authoring Update for HLS.

00:54:20.736 --> 00:54:22.426 A:middle
These are available as on-demand

00:54:22.426 --> 00:54:25.106 A:middle
videos and your WWDC app, and if

00:54:25.106 --> 00:54:26.676 A:middle
you miss any of the other live

00:54:26.676 --> 00:54:28.266 A:middle
sessions you could always go to

00:54:28.266 --> 00:54:31.436 A:middle
your WWDC app to watch them

00:54:32.256 --> 00:54:34.936 A:middle
offline or watch them on demand.

00:54:35.646 --> 00:54:36.626 A:middle
Thank you so much.

00:54:36.766 --> 00:54:38.026 A:middle
Have a great rest of the week.

00:54:38.266 --> 00:54:38.586 A:middle
Good night.
