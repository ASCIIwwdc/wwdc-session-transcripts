WEBVTT

00:00:07.516 --> 00:00:16.500 A:middle
[ Crowd Sounds ]

00:00:24.516 --> 00:00:26.736 A:middle
[ Applause ]

00:00:27.236 --> 00:00:28.126 A:middle
&gt;&gt; Good morning, everyone.

00:00:28.746 --> 00:00:30.476 A:middle
Welcome to VR with Metal 2.

00:00:31.156 --> 00:00:32.646 A:middle
My name is Rav Dhiraj, and I'm a

00:00:32.646 --> 00:00:34.466 A:middle
member of the GPU Software Team

00:00:34.716 --> 00:00:35.226 A:middle
at Apple.

00:00:35.676 --> 00:00:37.446 A:middle
So, as you saw in our

00:00:37.446 --> 00:00:39.006 A:middle
Introducing Metal 2 Session,

00:00:39.416 --> 00:00:40.726 A:middle
we've enabled some great new

00:00:40.726 --> 00:00:41.626 A:middle
features this year.

00:00:42.436 --> 00:00:43.546 A:middle
And in this session, I'll be

00:00:43.606 --> 00:00:45.476 A:middle
focusing specifically on the

00:00:45.476 --> 00:00:46.986 A:middle
support for VR that we're adding

00:00:46.986 --> 00:00:47.666 A:middle
with Metal 2.

00:00:48.226 --> 00:00:51.426 A:middle
So, I'll start with a brief

00:00:51.506 --> 00:00:53.396 A:middle
summary of what we've enabled in

00:00:53.396 --> 00:00:54.626 A:middle
macOS High Sierra.

00:00:54.626 --> 00:00:57.106 A:middle
And then, take a deep dive into

00:00:57.106 --> 00:00:58.386 A:middle
what's required to build a VR

00:00:58.386 --> 00:00:58.866 A:middle
app.

00:00:59.186 --> 00:01:00.976 A:middle
And then, end by providing some

00:00:59.186 --> 00:01:00.976 A:middle
And then, end by providing some

00:01:00.976 --> 00:01:02.576 A:middle
details on how you can take

00:01:02.576 --> 00:01:04.046 A:middle
advantage of the new external

00:01:04.046 --> 00:01:05.906 A:middle
GPU support that we've added to

00:01:05.906 --> 00:01:06.436 A:middle
the OS.

00:01:09.256 --> 00:01:09.516 A:middle
All right.

00:01:09.516 --> 00:01:11.166 A:middle
I hope everyone here knows what

00:01:11.216 --> 00:01:12.276 A:middle
virtual reality is.

00:01:12.786 --> 00:01:14.706 A:middle
But just in case, it's am

00:01:14.706 --> 00:01:17.526 A:middle
immersive 360-degree 3D

00:01:17.606 --> 00:01:20.246 A:middle
experience, with direct object

00:01:20.246 --> 00:01:21.726 A:middle
manipulation using controllera.

00:01:22.366 --> 00:01:24.476 A:middle
And an interactive room sized

00:01:24.476 --> 00:01:25.676 A:middle
environment that you can

00:01:25.676 --> 00:01:27.476 A:middle
explore, thanks to highly

00:01:27.476 --> 00:01:28.826 A:middle
accurate motion tracking.

00:01:30.036 --> 00:01:31.306 A:middle
Now, we at Apple think that this

00:01:31.306 --> 00:01:32.716 A:middle
is a great new medium for

00:01:32.716 --> 00:01:34.786 A:middle
developers like you to create

00:01:34.786 --> 00:01:36.646 A:middle
new experiences for our users.

00:01:37.276 --> 00:01:40.956 A:middle
And Metal 2 enables this support

00:01:40.956 --> 00:01:41.846 A:middle
in three ways.

00:01:42.516 --> 00:01:46.766 A:middle
First, by providing a fast path

00:01:46.846 --> 00:01:48.316 A:middle
to present the frame directly to

00:01:48.316 --> 00:01:49.776 A:middle
the VR headset with our new

00:01:50.296 --> 00:01:52.006 A:middle
Direct to Display capability.

00:01:53.616 --> 00:01:56.136 A:middle
Second, by enabling new features

00:01:56.136 --> 00:01:57.696 A:middle
like Viewport Array that are

00:01:57.756 --> 00:02:00.026 A:middle
specifically targeting VR.

00:01:57.756 --> 00:02:00.026 A:middle
specifically targeting VR.

00:02:01.506 --> 00:02:03.006 A:middle
And finally, by providing that

00:02:03.076 --> 00:02:04.366 A:middle
foundational support for

00:02:04.366 --> 00:02:06.096 A:middle
external GPUs, so that

00:02:06.096 --> 00:02:07.796 A:middle
developers have a broader range

00:02:07.796 --> 00:02:08.705 A:middle
of Mac hardware.

00:02:08.946 --> 00:02:10.616 A:middle
Of VR capable Mac hardware to

00:02:10.616 --> 00:02:11.066 A:middle
work on.

00:02:11.606 --> 00:02:13.566 A:middle
So, let's get right into what

00:02:13.566 --> 00:02:15.566 A:middle
we've enabled with macOS High

00:02:15.696 --> 00:02:16.036 A:middle
Sierra.

00:02:17.056 --> 00:02:18.726 A:middle
So, we've added built-in plug

00:02:18.726 --> 00:02:20.186 A:middle
and play support for the HTC

00:02:20.396 --> 00:02:21.616 A:middle
Vive VR headset.

00:02:21.616 --> 00:02:24.286 A:middle
And this headset works in

00:02:24.286 --> 00:02:26.346 A:middle
conjunction with Valve SteamVR

00:02:26.346 --> 00:02:28.436 A:middle
runtime, which provides a number

00:02:28.436 --> 00:02:30.206 A:middle
of services, including the VR

00:02:30.206 --> 00:02:31.086 A:middle
compositor.

00:02:32.556 --> 00:02:33.946 A:middle
Valve is also bringing their

00:02:34.006 --> 00:02:36.796 A:middle
open VR APIs to macOS, so that

00:02:36.796 --> 00:02:39.136 A:middle
you guys can create VR apps that

00:02:39.136 --> 00:02:40.136 A:middle
work with SteamVR.

00:02:40.416 --> 00:02:41.466 A:middle
We've been working really

00:02:41.466 --> 00:02:43.006 A:middle
closely with Valve over the last

00:02:43.106 --> 00:02:45.216 A:middle
year to align our releases, and

00:02:45.216 --> 00:02:47.256 A:middle
both SteamVR and OpenVR are

00:02:47.726 --> 00:02:49.566 A:middle
available to download in beta

00:02:49.636 --> 00:02:50.746 A:middle
form, this week.

00:02:51.386 --> 00:02:55.376 A:middle
So, before I go on, I'd like to

00:02:55.406 --> 00:02:57.156 A:middle
describe what the VR compositor

00:02:57.156 --> 00:02:57.856 A:middle
actually does.

00:02:59.056 --> 00:03:00.616 A:middle
So, in a nutshell, it distorts

00:02:59.056 --> 00:03:00.616 A:middle
So, in a nutshell, it distorts

00:03:00.716 --> 00:03:02.766 A:middle
the image that your app renders

00:03:02.816 --> 00:03:05.106 A:middle
to account for the lens optics

00:03:05.106 --> 00:03:06.156 A:middle
in the VR headset.

00:03:07.186 --> 00:03:08.526 A:middle
In this example, you can see the

00:03:08.686 --> 00:03:10.296 A:middle
barrel distortion that the

00:03:10.296 --> 00:03:12.106 A:middle
compositor is applying to

00:03:12.106 --> 00:03:13.516 A:middle
account for the pincushion

00:03:13.516 --> 00:03:14.676 A:middle
effect of the lenses.

00:03:15.676 --> 00:03:16.696 A:middle
Now, in practice, there's

00:03:16.696 --> 00:03:18.306 A:middle
actually a lot more complexity

00:03:18.306 --> 00:03:19.056 A:middle
under the covers.

00:03:19.356 --> 00:03:20.746 A:middle
And the compositor had to handle

00:03:20.746 --> 00:03:21.916 A:middle
things like chromatic

00:03:21.916 --> 00:03:24.316 A:middle
aberration, and also presenting

00:03:24.316 --> 00:03:26.176 A:middle
a Chaperone UI, so that

00:03:26.206 --> 00:03:28.146 A:middle
developers know the bounds of

00:03:28.286 --> 00:03:31.256 A:middle
their VR space.

00:03:31.466 --> 00:03:32.316 A:middle
All right.

00:03:32.316 --> 00:03:33.436 A:middle
Now, that you have built-in

00:03:33.486 --> 00:03:36.386 A:middle
support for a VR headset, a VR

00:03:36.896 --> 00:03:39.066 A:middle
compositor with SteamVR, and an

00:03:39.066 --> 00:03:41.296 A:middle
API to write to, let's dive

00:03:41.396 --> 00:03:42.976 A:middle
right into how you build a VR

00:03:42.976 --> 00:03:43.286 A:middle
app.

00:03:44.756 --> 00:03:46.096 A:middle
Well, we have two options.

00:03:46.866 --> 00:03:49.156 A:middle
You first, is to use an existing

00:03:49.156 --> 00:03:50.996 A:middle
game engine that has VR support.

00:03:51.786 --> 00:03:53.426 A:middle
This is a great option that many

00:03:53.426 --> 00:03:55.126 A:middle
developers prefer, because it

00:03:55.126 --> 00:03:56.566 A:middle
hides some of the complexities

00:03:56.566 --> 00:03:57.726 A:middle
of the VR compositor.

00:03:58.456 --> 00:04:00.356 A:middle
It also provides a familiar

00:03:58.456 --> 00:04:00.356 A:middle
It also provides a familiar

00:04:00.356 --> 00:04:01.786 A:middle
content creation tool chain.

00:04:03.156 --> 00:04:04.916 A:middle
Now, your second option, is to

00:04:04.916 --> 00:04:06.906 A:middle
write a native VR app that calls

00:04:06.906 --> 00:04:08.106 A:middle
open VR, directly.

00:04:08.926 --> 00:04:10.766 A:middle
This gives your app full control

00:04:11.086 --> 00:04:12.716 A:middle
of rendering and synchronization

00:04:12.716 --> 00:04:13.756 A:middle
with the VR compositor.

00:04:14.236 --> 00:04:15.236 A:middle
But at the cost of some

00:04:15.236 --> 00:04:16.366 A:middle
additional complexity.

00:04:16.935 --> 00:04:19.906 A:middle
Which path you take depends on

00:04:19.906 --> 00:04:20.875 A:middle
the goals of your app.

00:04:21.486 --> 00:04:23.346 A:middle
Let's start by talking a bit

00:04:23.846 --> 00:04:24.946 A:middle
about the game engines.

00:04:26.796 --> 00:04:29.306 A:middle
So, you saw Epic's Unreal Engine

00:04:29.426 --> 00:04:31.316 A:middle
4 in action in the keynote, and

00:04:31.316 --> 00:04:32.976 A:middle
it's a powerful platform on

00:04:32.976 --> 00:04:34.066 A:middle
which to build your VR

00:04:34.066 --> 00:04:34.966 A:middle
experiences.

00:04:36.246 --> 00:04:38.416 A:middle
VR support will be coming later,

00:04:38.416 --> 00:04:40.676 A:middle
this year, and you can find

00:04:40.676 --> 00:04:42.646 A:middle
tutorials and other information

00:04:42.646 --> 00:04:43.586 A:middle
on Epic's website.

00:04:44.966 --> 00:04:46.656 A:middle
We're also really excited that

00:04:46.696 --> 00:04:48.936 A:middle
Unity is bringing VR support to

00:04:48.936 --> 00:04:50.596 A:middle
macOS in a future release of

00:04:50.626 --> 00:04:51.216 A:middle
their engine.

00:04:51.896 --> 00:04:53.116 A:middle
We've been working closely with

00:04:53.116 --> 00:04:54.296 A:middle
them to ensure that the engine

00:04:54.296 --> 00:04:56.266 A:middle
is optimized for both VR

00:04:56.266 --> 00:04:58.586 A:middle
playback and development using

00:04:58.586 --> 00:04:58.876 A:middle
Metal.

00:05:02.076 --> 00:05:03.396 A:middle
So, I'd like to take a moment,

00:05:03.396 --> 00:05:04.636 A:middle
at this point, to talk about a

00:05:04.766 --> 00:05:06.936 A:middle
specific Unity title called

00:05:06.936 --> 00:05:08.336 A:middle
Space Pirate Trainer.

00:05:08.806 --> 00:05:10.396 A:middle
So, we've been collaborating

00:05:10.396 --> 00:05:12.556 A:middle
with Unity and I-Illusions to

00:05:12.556 --> 00:05:14.596 A:middle
bring an early preview of Space

00:05:14.666 --> 00:05:16.196 A:middle
Pirate Trainer to macOS.

00:05:16.916 --> 00:05:19.836 A:middle
And the speed at with I-Illusion

00:05:20.066 --> 00:05:21.916 A:middle
was able to bring their app to

00:05:21.916 --> 00:05:23.176 A:middle
our platform was truly

00:05:23.236 --> 00:05:23.716 A:middle
astounding.

00:05:23.716 --> 00:05:25.916 A:middle
They had a working build in just

00:05:25.916 --> 00:05:28.536 A:middle
a few hours, then a stable fully

00:05:28.536 --> 00:05:30.386 A:middle
playable game in just a handful

00:05:30.386 --> 00:05:30.786 A:middle
of days.

00:05:31.926 --> 00:05:33.476 A:middle
We've been having tremendous fun

00:05:33.566 --> 00:05:35.166 A:middle
playing with this game, and

00:05:35.206 --> 00:05:36.336 A:middle
think that it's a great

00:05:36.336 --> 00:05:38.516 A:middle
representation of the type of VR

00:05:38.516 --> 00:05:39.886 A:middle
experience that you can build

00:05:40.146 --> 00:05:40.766 A:middle
with unity.

00:05:42.176 --> 00:05:43.166 A:middle
We hope you get a chance to

00:05:43.166 --> 00:05:44.136 A:middle
check it out at WWDC.

00:05:44.136 --> 00:05:45.936 A:middle
We think you'll love it, as

00:05:45.936 --> 00:05:46.226 A:middle
well.

00:05:47.556 --> 00:05:50.636 A:middle
So, Unity and Unreal Engine 4

00:05:50.636 --> 00:05:52.376 A:middle
are two great options for VR

00:05:52.376 --> 00:05:53.136 A:middle
development.

00:05:54.536 --> 00:05:56.536 A:middle
But you can, of course, choose

00:05:56.536 --> 00:05:58.136 A:middle
to write a native SteamVR app,

00:05:58.496 --> 00:05:59.756 A:middle
that calls the open VR

00:05:59.846 --> 00:06:00.766 A:middle
framework, directly.

00:05:59.846 --> 00:06:00.766 A:middle
framework, directly.

00:06:01.566 --> 00:06:02.906 A:middle
Now, we'll have details on how

00:06:02.906 --> 00:06:03.996 A:middle
you can add the framework to

00:06:03.996 --> 00:06:05.756 A:middle
your app, later in the session.

00:06:06.006 --> 00:06:07.436 A:middle
But you can download binaries

00:06:07.476 --> 00:06:09.386 A:middle
and API documentation at the

00:06:09.386 --> 00:06:10.366 A:middle
OpenVR GitHub.

00:06:12.776 --> 00:06:14.286 A:middle
There'll also be a Metal

00:06:14.346 --> 00:06:16.416 A:middle
specific sample app available to

00:06:16.416 --> 00:06:17.786 A:middle
download in the near future.

00:06:18.626 --> 00:06:19.676 A:middle
But to give you a taste of

00:06:19.676 --> 00:06:21.556 A:middle
what's involved, I'd like to

00:06:21.556 --> 00:06:23.616 A:middle
now, provide a primer on VR app

00:06:23.616 --> 00:06:25.316 A:middle
development in a segment that I

00:06:25.316 --> 00:06:27.026 A:middle
like to call VR App Building

00:06:27.026 --> 00:06:27.526 A:middle
101.

00:06:28.666 --> 00:06:29.856 A:middle
So, we're going to cover a few

00:06:29.856 --> 00:06:30.356 A:middle
things, here.

00:06:31.106 --> 00:06:32.706 A:middle
We'll start with an overview of

00:06:32.766 --> 00:06:34.176 A:middle
some of the challenges involved

00:06:34.176 --> 00:06:35.246 A:middle
in VR development.

00:06:36.496 --> 00:06:38.376 A:middle
And then, talk a bit about some

00:06:38.376 --> 00:06:40.206 A:middle
unique considerations on our

00:06:40.206 --> 00:06:40.836 A:middle
platform.

00:06:40.916 --> 00:06:43.096 A:middle
And then, take a deep dive into

00:06:43.096 --> 00:06:45.306 A:middle
the anatomy of a VR frame.

00:06:46.156 --> 00:06:47.136 A:middle
And then, end with some best

00:06:47.226 --> 00:06:48.826 A:middle
practices specific to VR apps.

00:06:50.326 --> 00:06:51.246 A:middle
So, we've got a lot to cover,

00:06:51.246 --> 00:06:51.446 A:middle
here.

00:06:51.636 --> 00:06:53.066 A:middle
So, let's get started with the

00:06:53.066 --> 00:06:53.536 A:middle
overview.

00:06:54.106 --> 00:06:57.586 A:middle
So, a traditional non-VR work

00:06:57.586 --> 00:07:00.166 A:middle
load targeting a 60Hz display

00:06:57.586 --> 00:07:00.166 A:middle
load targeting a 60Hz display

00:07:00.706 --> 00:07:03.696 A:middle
has around 16.7 milliseconds to

00:07:03.696 --> 00:07:06.986 A:middle
do work for the frame.

00:07:07.166 --> 00:07:09.986 A:middle
And in many cases, the app has

00:07:10.396 --> 00:07:12.856 A:middle
the entire frame budget to do

00:07:12.856 --> 00:07:14.016 A:middle
work on the GPU.

00:07:14.566 --> 00:07:17.266 A:middle
A VR workload, on the other

00:07:17.326 --> 00:07:19.656 A:middle
hand, has to target a 90 frame

00:07:19.656 --> 00:07:20.676 A:middle
per second display.

00:07:20.676 --> 00:07:22.766 A:middle
And it needs to hit this target

00:07:22.806 --> 00:07:24.686 A:middle
to achieve a smooth stutter-free

00:07:24.686 --> 00:07:26.446 A:middle
experience on a headset like the

00:07:26.446 --> 00:07:26.806 A:middle
Vive.

00:07:27.756 --> 00:07:29.186 A:middle
So, this reduces the available

00:07:29.186 --> 00:07:31.116 A:middle
frame budget to around 11

00:07:31.116 --> 00:07:31.886 A:middle
milliseconds.

00:07:33.276 --> 00:07:35.186 A:middle
Additionally, the VR compositor

00:07:35.186 --> 00:07:37.296 A:middle
has to do work on the GPU to

00:07:37.296 --> 00:07:39.136 A:middle
prepare the frame for the VR

00:07:39.136 --> 00:07:39.616 A:middle
headset.

00:07:40.716 --> 00:07:42.136 A:middle
This can take up to 1

00:07:42.136 --> 00:07:44.266 A:middle
millisecond, leaving you app an

00:07:44.266 --> 00:07:46.446 A:middle
effective frame time budget of

00:07:46.446 --> 00:07:48.026 A:middle
around 10 milliseconds.

00:07:48.796 --> 00:07:51.726 A:middle
Which is about 60% of the non-VR

00:07:51.726 --> 00:07:52.036 A:middle
case.

00:07:52.776 --> 00:07:55.636 A:middle
And if that wasn't enough, your

00:07:55.636 --> 00:07:57.656 A:middle
app also has to do more work

00:07:57.656 --> 00:07:58.276 A:middle
every frame.

00:07:59.306 --> 00:08:01.256 A:middle
This includes stereo rendering

00:07:59.306 --> 00:08:01.256 A:middle
This includes stereo rendering

00:08:01.556 --> 00:08:03.106 A:middle
for the left and right eye.

00:08:04.096 --> 00:08:05.786 A:middle
And also, rendering to a higher

00:08:05.786 --> 00:08:07.416 A:middle
resolution, in many cases.

00:08:08.476 --> 00:08:10.086 A:middle
The Vive headset has a

00:08:10.086 --> 00:08:12.836 A:middle
resolution of 2160 x 1200.

00:08:13.186 --> 00:08:15.476 A:middle
That's 25% more pixels than a

00:08:15.476 --> 00:08:16.586 A:middle
1080 display.

00:08:17.576 --> 00:08:19.676 A:middle
Additionally, many VR apps

00:08:19.676 --> 00:08:22.696 A:middle
render at a 1.2 to 1.4 X scale

00:08:22.746 --> 00:08:24.216 A:middle
factor to further improve

00:08:24.216 --> 00:08:24.776 A:middle
quality.

00:08:25.366 --> 00:08:28.316 A:middle
So, in summary, your app has a

00:08:28.316 --> 00:08:30.246 A:middle
lot more work to do in less

00:08:30.336 --> 00:08:30.626 A:middle
time.

00:08:31.526 --> 00:08:32.645 A:middle
Welcome to VR development.

00:08:34.596 --> 00:08:35.186 A:middle
All right.

00:08:35.186 --> 00:08:36.535 A:middle
Let's talk about some platform

00:08:36.535 --> 00:08:37.336 A:middle
specifics.

00:08:38.336 --> 00:08:40.535 A:middle
So, Metal 2 introduces a new

00:08:40.535 --> 00:08:42.806 A:middle
Direct to Display capability for

00:08:42.806 --> 00:08:44.166 A:middle
supported headsets like the

00:08:44.166 --> 00:08:44.596 A:middle
Vive.

00:08:45.476 --> 00:08:47.886 A:middle
This is a low latency path that

00:08:47.926 --> 00:08:49.446 A:middle
bypasses the OS window

00:08:49.446 --> 00:08:51.376 A:middle
compositor, and gives the VR

00:08:51.376 --> 00:08:54.256 A:middle
compositor, like SteamVR, the

00:08:54.256 --> 00:08:55.896 A:middle
direct ability to present a

00:08:55.896 --> 00:08:57.646 A:middle
surface onto the VR headset.

00:08:58.326 --> 00:09:00.146 A:middle
This avoids any pixel processing

00:08:58.326 --> 00:09:00.146 A:middle
This avoids any pixel processing

00:09:00.146 --> 00:09:03.546 A:middle
or additional copies by the OS.

00:09:03.806 --> 00:09:05.276 A:middle
Now, it's worth noting that in

00:09:05.346 --> 00:09:06.926 A:middle
order to guarantee this fast

00:09:06.996 --> 00:09:09.846 A:middle
path, that macOS does not treat

00:09:09.896 --> 00:09:11.366 A:middle
VR headsets as displays.

00:09:11.956 --> 00:09:13.146 A:middle
They're hidden from the system

00:09:13.286 --> 00:09:15.376 A:middle
and offer no extended desktop

00:09:15.376 --> 00:09:16.056 A:middle
capabilities.

00:09:16.746 --> 00:09:20.676 A:middle
So, to summarize, we move from a

00:09:20.676 --> 00:09:22.976 A:middle
model where you can present or

00:09:23.516 --> 00:09:25.276 A:middle
an app presents to a display

00:09:25.366 --> 00:09:26.336 A:middle
through the OS window

00:09:26.336 --> 00:09:27.026 A:middle
compositor.

00:09:28.316 --> 00:09:30.086 A:middle
To one where a VR app can

00:09:30.136 --> 00:09:32.456 A:middle
present to a headset directly

00:09:32.496 --> 00:09:33.756 A:middle
through the VR compositor.

00:09:34.566 --> 00:09:36.446 A:middle
And that's our Direct to Display

00:09:36.516 --> 00:09:39.716 A:middle
capability for VR with Metal 2.

00:09:41.416 --> 00:09:41.976 A:middle
All right.

00:09:42.206 --> 00:09:43.556 A:middle
Keeping with the theme of macOS

00:09:43.616 --> 00:09:46.126 A:middle
platform specifics, let's talk a

00:09:46.126 --> 00:09:48.026 A:middle
bit about how your app selects a

00:09:48.026 --> 00:09:49.296 A:middle
Metal device to use.

00:09:50.276 --> 00:09:52.266 A:middle
So, in macOS, the VR compositor

00:09:52.316 --> 00:09:54.546 A:middle
can query the OS to find the

00:09:54.546 --> 00:09:57.006 A:middle
Metal device for the GPU that

00:09:57.006 --> 00:09:58.346 A:middle
the headset is attached to.

00:09:59.556 --> 00:10:00.786 A:middle
And for performance reasons,

00:09:59.556 --> 00:10:00.786 A:middle
And for performance reasons,

00:10:01.356 --> 00:10:02.776 A:middle
your app will want to select the

00:10:02.776 --> 00:10:04.766 A:middle
same device that the compositor

00:10:04.766 --> 00:10:04.976 A:middle
is using.

00:10:06.266 --> 00:10:07.226 A:middle
So, we've worked with Valve to

00:10:07.226 --> 00:10:08.476 A:middle
make sure that there's an API to

00:10:08.476 --> 00:10:10.566 A:middle
do this, simply called

00:10:10.856 --> 00:10:13.186 A:middle
GetOutputDevice to get the Metal

00:10:13.186 --> 00:10:14.266 A:middle
device that you should render

00:10:14.266 --> 00:10:14.506 A:middle
to.

00:10:14.876 --> 00:10:15.486 A:middle
It's that simple.

00:10:18.486 --> 00:10:20.416 A:middle
Now, let's talk about managing

00:10:20.416 --> 00:10:22.236 A:middle
drawable surfaces on macOS.

00:10:23.576 --> 00:10:25.376 A:middle
So, the VR compositor and your

00:10:25.376 --> 00:10:28.126 A:middle
app each maintain separate pools

00:10:28.396 --> 00:10:29.576 A:middle
of drawable surfaces.

00:10:30.196 --> 00:10:32.276 A:middle
And in a typical frame your app

00:10:32.556 --> 00:10:34.176 A:middle
will render to textures that it

00:10:34.176 --> 00:10:36.926 A:middle
owns, submit these to the VR

00:10:36.926 --> 00:10:37.736 A:middle
compositor.

00:10:38.806 --> 00:10:40.666 A:middle
These will get composited onto a

00:10:40.666 --> 00:10:42.186 A:middle
surface that the compositor

00:10:42.186 --> 00:10:44.076 A:middle
owns, and that's the surface

00:10:44.076 --> 00:10:45.246 A:middle
that'll get presented to the

00:10:45.246 --> 00:10:45.766 A:middle
headset.

00:10:47.006 --> 00:10:49.716 A:middle
And on macOS, IO surfaces are

00:10:49.716 --> 00:10:51.376 A:middle
ideal for transferring this

00:10:51.556 --> 00:10:53.496 A:middle
rendered data from your app to

00:10:53.496 --> 00:10:54.286 A:middle
the compositor.

00:10:54.816 --> 00:10:56.346 A:middle
So, make sure that you create

00:10:56.346 --> 00:10:58.066 A:middle
Metal textures that are backed

00:10:58.416 --> 00:10:59.566 A:middle
by IO surfaces.

00:11:01.076 --> 00:11:02.596 A:middle
As a refresher, let's take a

00:11:02.656 --> 00:11:03.926 A:middle
quick look at how you create

00:11:03.926 --> 00:11:04.606 A:middle
those textures.

00:11:06.616 --> 00:11:08.046 A:middle
So, you'll want to build a

00:11:08.156 --> 00:11:09.766 A:middle
texture descriptor that

00:11:09.766 --> 00:11:11.436 A:middle
specifies the Render Target

00:11:11.476 --> 00:11:13.266 A:middle
Usage flag, since your app will

00:11:13.266 --> 00:11:14.406 A:middle
be rendering into it.

00:11:15.276 --> 00:11:17.416 A:middle
But also, the Shader Read Usage

00:11:17.416 --> 00:11:17.766 A:middle
flag.

00:11:18.146 --> 00:11:19.336 A:middle
Since the compositor will be

00:11:19.426 --> 00:11:20.926 A:middle
sourcing it as an input.

00:11:21.406 --> 00:11:24.726 A:middle
And then, to create your left

00:11:24.946 --> 00:11:26.976 A:middle
and right eye Textures, you

00:11:27.066 --> 00:11:29.966 A:middle
simply pass IO surfaces that you

00:11:29.966 --> 00:11:31.586 A:middle
previously allocated and this

00:11:31.626 --> 00:11:33.096 A:middle
Texture descriptor to

00:11:33.096 --> 00:11:34.696 A:middle
newTextureWithDescriptor.

00:11:35.366 --> 00:11:35.596 A:middle
All right.

00:11:35.716 --> 00:11:36.786 A:middle
I'd like to now, take a few

00:11:36.786 --> 00:11:39.266 A:middle
minutes to talk or to describe a

00:11:39.266 --> 00:11:40.676 A:middle
typical frame in a VR app.

00:11:41.576 --> 00:11:43.076 A:middle
This is important, because your

00:11:43.076 --> 00:11:45.086 A:middle
app and the VR compositor need

00:11:45.086 --> 00:11:46.376 A:middle
to work in lock step.

00:11:47.436 --> 00:11:49.186 A:middle
As I noted before, the rendered

00:11:49.186 --> 00:11:50.826 A:middle
output of your app will be

00:11:50.826 --> 00:11:53.096 A:middle
passed to the VR compositor for

00:11:53.096 --> 00:11:54.336 A:middle
additional processing on the

00:11:54.336 --> 00:11:54.926 A:middle
GPU.

00:11:55.726 --> 00:11:57.756 A:middle
And since the GPU is a shared

00:11:57.806 --> 00:12:00.596 A:middle
resource, synchronization and

00:11:57.806 --> 00:12:00.596 A:middle
resource, synchronization and

00:12:00.596 --> 00:12:02.486 A:middle
when work is scheduled matters.

00:12:03.086 --> 00:12:05.436 A:middle
So, let's start at the beginning

00:12:05.436 --> 00:12:06.026 A:middle
of the frame.

00:12:06.946 --> 00:12:08.706 A:middle
Your app will need to query the

00:12:08.706 --> 00:12:10.506 A:middle
VR system to get the headset

00:12:10.506 --> 00:12:12.196 A:middle
poses that it needs to render

00:12:12.196 --> 00:12:12.746 A:middle
the frame.

00:12:13.936 --> 00:12:15.766 A:middle
For SteamVr, this is done by the

00:12:15.866 --> 00:12:17.316 A:middle
WaitGetPoses call.

00:12:18.366 --> 00:12:20.406 A:middle
And then, your app can encode

00:12:20.406 --> 00:12:22.116 A:middle
the rendered commands for that

00:12:22.246 --> 00:12:24.246 A:middle
frame immediately after getting

00:12:24.246 --> 00:12:24.946 A:middle
those inputs.

00:12:25.536 --> 00:12:28.406 A:middle
And then, once you've encoded

00:12:28.406 --> 00:12:30.136 A:middle
your command buffer, you can

00:12:30.176 --> 00:12:31.836 A:middle
commit it to Metal to queue onto

00:12:31.836 --> 00:12:32.576 A:middle
the GPU.

00:12:33.146 --> 00:12:35.296 A:middle
And then, submit your left and

00:12:35.296 --> 00:12:37.956 A:middle
right eye textures to SteamVR.

00:12:38.946 --> 00:12:40.666 A:middle
This'll wake the compositor so

00:12:40.666 --> 00:12:42.606 A:middle
it can start encoding its GPU

00:12:42.606 --> 00:12:43.896 A:middle
work for the frame.

00:12:44.476 --> 00:12:46.976 A:middle
And then, since ordered

00:12:46.976 --> 00:12:49.286 A:middle
execution matters, your app will

00:12:49.286 --> 00:12:50.816 A:middle
also need to signal the VR

00:12:50.816 --> 00:12:53.526 A:middle
compositor when work that is

00:12:53.596 --> 00:12:54.896 A:middle
sent to the GPU has been

00:12:54.896 --> 00:12:55.436 A:middle
scheduled.

00:12:56.656 --> 00:12:58.566 A:middle
So, for a Metal SteamVR app, you

00:12:58.646 --> 00:13:00.706 A:middle
simply wait until your command

00:12:58.646 --> 00:13:00.706 A:middle
simply wait until your command

00:13:00.706 --> 00:13:02.746 A:middle
buffer has been scheduled, and

00:13:02.746 --> 00:13:04.496 A:middle
then, you can call the SteamVR

00:13:04.496 --> 00:13:06.406 A:middle
PostPresentHandoff function.

00:13:07.136 --> 00:13:08.886 A:middle
This'll signal the VR compositor

00:13:09.136 --> 00:13:10.726 A:middle
that it can commit its work to

00:13:10.726 --> 00:13:13.026 A:middle
the GPU and it'll get queued up

00:13:13.476 --> 00:13:14.366 A:middle
in the right order.

00:13:14.366 --> 00:13:16.886 A:middle
So, let's see what that would

00:13:16.886 --> 00:13:18.346 A:middle
look like in your draw loop.

00:13:18.706 --> 00:13:20.276 A:middle
So, at the top of your loop

00:13:20.686 --> 00:13:22.006 A:middle
you'd have your WaitGetPoses

00:13:22.006 --> 00:13:23.876 A:middle
call, to gather the inputs from

00:13:23.876 --> 00:13:24.396 A:middle
the headset.

00:13:25.656 --> 00:13:27.196 A:middle
You then, build your command

00:13:27.196 --> 00:13:29.536 A:middle
buffer to render your scene and

00:13:29.536 --> 00:13:30.706 A:middle
commit it to the GPU.

00:13:31.826 --> 00:13:33.146 A:middle
And then, at this point, you'll

00:13:33.236 --> 00:13:35.086 A:middle
submit your left and right eye

00:13:35.186 --> 00:13:36.576 A:middle
textures to SteamVR.

00:13:37.906 --> 00:13:39.876 A:middle
And then, once you've waited for

00:13:39.876 --> 00:13:40.796 A:middle
that command buffer to be

00:13:40.836 --> 00:13:43.466 A:middle
scheduled, you can call

00:13:43.466 --> 00:13:45.086 A:middle
PostPresentHandoff to tell the

00:13:45.086 --> 00:13:47.226 A:middle
VR compositor that it's now free

00:13:47.456 --> 00:13:49.966 A:middle
to commit work to the GPU, as

00:13:50.856 --> 00:13:51.016 A:middle
well.

00:13:51.926 --> 00:13:53.496 A:middle
So, one more note before I move

00:13:53.496 --> 00:13:53.726 A:middle
on.

00:13:55.056 --> 00:13:57.046 A:middle
It's worth noting that as we

00:13:57.046 --> 00:13:58.486 A:middle
extend this diagram to include

00:13:58.486 --> 00:14:00.676 A:middle
the next frame, it's

00:13:58.486 --> 00:14:00.676 A:middle
the next frame, it's

00:14:00.986 --> 00:14:04.086 A:middle
WaitGetPoses and not the

00:14:04.196 --> 00:14:06.556 A:middle
vertical blank that defines the

00:14:06.556 --> 00:14:08.046 A:middle
start of the frame for your app.

00:14:08.896 --> 00:14:09.956 A:middle
This is an important thing to

00:14:09.956 --> 00:14:11.026 A:middle
keep in mind, and we'll be

00:14:11.026 --> 00:14:12.116 A:middle
coming back to this, very

00:14:12.116 --> 00:14:12.556 A:middle
shortly.

00:14:13.136 --> 00:14:15.016 A:middle
All right.

00:14:15.986 --> 00:14:17.396 A:middle
Let's move on to talk about some

00:14:17.396 --> 00:14:18.416 A:middle
best practices.

00:14:19.026 --> 00:14:22.626 A:middle
So, the first is to avoid

00:14:22.626 --> 00:14:24.596 A:middle
introducing a GPU bubble at the

00:14:24.596 --> 00:14:26.146 A:middle
start of your frame, while

00:14:26.146 --> 00:14:27.836 A:middle
encoding commands on the CPU.

00:14:29.036 --> 00:14:31.646 A:middle
So, helpfully, SteamVR offers a

00:14:31.646 --> 00:14:33.216 A:middle
useful mechanism to let you

00:14:33.216 --> 00:14:35.206 A:middle
start work for that frame early,

00:14:35.626 --> 00:14:37.216 A:middle
by giving your app a two to

00:14:37.276 --> 00:14:38.856 A:middle
three millisecond running start.

00:14:40.286 --> 00:14:41.226 A:middle
So, his should look very

00:14:41.276 --> 00:14:41.786 A:middle
familiar.

00:14:42.456 --> 00:14:43.836 A:middle
By aligning the start of your

00:14:43.836 --> 00:14:46.126 A:middle
frame with WaitGetPoses, you'll

00:14:46.126 --> 00:14:47.416 A:middle
ensure that you're taking

00:14:47.416 --> 00:14:48.966 A:middle
advantage of this optimization

00:14:49.226 --> 00:14:50.576 A:middle
and getting that running start.

00:14:54.076 --> 00:14:54.636 A:middle
All right.

00:14:54.716 --> 00:14:57.076 A:middle
Next, make sure that your app is

00:14:57.076 --> 00:14:59.146 A:middle
not building large monolithic

00:14:59.196 --> 00:15:00.396 A:middle
command buffers before

00:14:59.196 --> 00:15:00.396 A:middle
command buffers before

00:15:00.396 --> 00:15:02.146 A:middle
committing them to the GPU, as

00:15:02.146 --> 00:15:03.936 A:middle
this can also introduce GPU

00:15:03.936 --> 00:15:04.456 A:middle
bubbles.

00:15:05.496 --> 00:15:07.966 A:middle
Instead, you want to split your

00:15:07.966 --> 00:15:09.416 A:middle
command buffers where possible

00:15:09.656 --> 00:15:11.206 A:middle
and commit them as you go, to

00:15:11.206 --> 00:15:13.466 A:middle
maximize GPU utilization in the

00:15:13.466 --> 00:15:13.866 A:middle
frame.

00:15:14.406 --> 00:15:18.246 A:middle
So, the next optimization that

00:15:18.246 --> 00:15:19.886 A:middle
we recommend is to try and

00:15:19.956 --> 00:15:22.046 A:middle
coalesce your left and right eye

00:15:22.046 --> 00:15:22.846 A:middle
draws, together.

00:15:25.036 --> 00:15:26.836 A:middle
The Metal 2 Viewport Array

00:15:26.836 --> 00:15:28.296 A:middle
feature provides a great

00:15:28.296 --> 00:15:30.296 A:middle
mechanism for you to do this, by

00:15:30.296 --> 00:15:32.036 A:middle
letting your app select a per

00:15:32.096 --> 00:15:34.176 A:middle
primitive destination viewport

00:15:34.596 --> 00:15:35.546 A:middle
in the vertex shader.

00:15:36.326 --> 00:15:37.796 A:middle
This can substantially reduce

00:15:37.796 --> 00:15:39.666 A:middle
your draw call overhead, as you

00:15:39.666 --> 00:15:41.256 A:middle
can now render to both the left

00:15:41.916 --> 00:15:43.626 A:middle
and the right eye with a single

00:15:43.626 --> 00:15:44.186 A:middle
draw call.

00:15:45.386 --> 00:15:46.726 A:middle
So, let's take a look at an

00:15:46.726 --> 00:15:48.296 A:middle
example of how you can adopt

00:15:48.676 --> 00:15:50.236 A:middle
Viewport Array for your Metal

00:15:50.236 --> 00:15:51.746 A:middle
app using instancing.

00:15:53.136 --> 00:15:54.016 A:middle
So, the first thing I want to

00:15:54.016 --> 00:15:55.616 A:middle
point out is that you'll need to

00:15:55.616 --> 00:15:57.446 A:middle
create a texture that's twice as

00:15:57.446 --> 00:15:58.956 A:middle
wide, because you'll now be

00:15:58.956 --> 00:16:00.356 A:middle
rendering both the left and

00:15:58.956 --> 00:16:00.356 A:middle
rendering both the left and

00:16:00.356 --> 00:16:02.266 A:middle
right eye scene to the same

00:16:02.436 --> 00:16:02.906 A:middle
texture.

00:16:03.836 --> 00:16:05.766 A:middle
And then, you simply create your

00:16:05.766 --> 00:16:07.386 A:middle
Viewpoint array that defines the

00:16:07.386 --> 00:16:10.026 A:middle
bounds for your left and your

00:16:10.026 --> 00:16:11.596 A:middle
right eye viewports.

00:16:12.786 --> 00:16:13.906 A:middle
And then, you can pass this

00:16:13.946 --> 00:16:15.216 A:middle
Viewport array to your render

00:16:15.216 --> 00:16:16.976 A:middle
commanding coder using the new

00:16:17.416 --> 00:16:18.426 A:middle
setViewports API.

00:16:19.586 --> 00:16:20.586 A:middle
And then, at this point, you'll

00:16:20.586 --> 00:16:21.826 A:middle
want to make an instance to

00:16:21.976 --> 00:16:23.706 A:middle
DrawPrimitives call with an

00:16:23.766 --> 00:16:26.286 A:middle
instance count of 2 to issue the

00:16:26.286 --> 00:16:27.366 A:middle
draw to your left and right

00:16:27.416 --> 00:16:28.066 A:middle
Viewports.

00:16:29.286 --> 00:16:31.046 A:middle
We'll be using the instance ID

00:16:31.366 --> 00:16:33.836 A:middle
as our eye index in the vertex

00:16:33.836 --> 00:16:34.146 A:middle
shader.

00:16:35.286 --> 00:16:36.136 A:middle
So, let's take a look at that

00:16:36.136 --> 00:16:36.786 A:middle
vertex shader.

00:16:37.406 --> 00:16:39.536 A:middle
So, the first thing I want to

00:16:39.536 --> 00:16:42.126 A:middle
point out is that the viewport

00:16:42.456 --> 00:16:44.096 A:middle
is selected by the new viewport

00:16:44.316 --> 00:16:45.436 A:middle
underscore array underscore

00:16:45.436 --> 00:16:46.276 A:middle
index attribute.

00:16:47.756 --> 00:16:49.276 A:middle
And then, as I previously noted,

00:16:49.406 --> 00:16:50.166 A:middle
we're using the instance

00:16:50.166 --> 00:16:52.486 A:middle
underscore id as our eye index.

00:16:52.826 --> 00:16:54.186 A:middle
And we'll be able to use it to

00:16:54.186 --> 00:16:56.416 A:middle
access our viewport dependent

00:16:56.416 --> 00:16:57.936 A:middle
data like this model view

00:16:57.966 --> 00:16:59.646 A:middle
projection matrix in this

00:16:59.646 --> 00:17:00.176 A:middle
example.

00:16:59.646 --> 00:17:00.176 A:middle
example.

00:17:00.716 --> 00:17:03.166 A:middle
And then, finally, you do want

00:17:03.166 --> 00:17:05.006 A:middle
to associate your viewport index

00:17:05.476 --> 00:17:06.705 A:middle
with the instance underscore id

00:17:06.746 --> 00:17:08.006 A:middle
so that the right viewport is

00:17:08.066 --> 00:17:10.056 A:middle
selected when rasterizing your

00:17:10.056 --> 00:17:10.435 A:middle
image.

00:17:11.465 --> 00:17:13.465 A:middle
And that's how you use the new

00:17:13.465 --> 00:17:15.286 A:middle
Viewport Array feature to reduce

00:17:15.346 --> 00:17:17.906 A:middle
the draw call cost in your VR

00:17:18.856 --> 00:17:18.976 A:middle
apps.

00:17:20.296 --> 00:17:20.846 A:middle
All right.

00:17:21.006 --> 00:17:22.386 A:middle
The final optimization that I

00:17:22.386 --> 00:17:24.006 A:middle
want to talk about, today, is

00:17:24.066 --> 00:17:25.465 A:middle
really a general best practice.

00:17:25.465 --> 00:17:27.406 A:middle
You want to try and reduce the

00:17:27.406 --> 00:17:29.716 A:middle
number of pixels that you're

00:17:29.716 --> 00:17:30.876 A:middle
shading every frame.

00:17:31.406 --> 00:17:33.236 A:middle
So, due to the nature of the

00:17:33.236 --> 00:17:35.816 A:middle
lens warp, about 15% of your

00:17:35.816 --> 00:17:37.876 A:middle
rendered scene is not actually

00:17:37.876 --> 00:17:39.386 A:middle
visible on the VR headset.

00:17:40.136 --> 00:17:41.626 A:middle
This is represented by the blue

00:17:41.626 --> 00:17:42.586 A:middle
regions in this image.

00:17:43.536 --> 00:17:45.976 A:middle
Luckily, SteamVR offers a mesh

00:17:46.056 --> 00:17:47.786 A:middle
based stencil mask that is

00:17:47.866 --> 00:17:49.466 A:middle
specific to the Vive headset

00:17:49.626 --> 00:17:51.006 A:middle
that you can use to cull these

00:17:51.066 --> 00:17:51.576 A:middle
pixels.

00:17:52.096 --> 00:17:54.296 A:middle
It's really easy to use and

00:17:54.326 --> 00:17:55.996 A:middle
provides a substantial benefit.

00:17:55.996 --> 00:17:56.866 A:middle
All right.

00:17:57.876 --> 00:18:00.586 A:middle
That brings us to the end of our

00:17:57.876 --> 00:18:00.586 A:middle
That brings us to the end of our

00:18:00.666 --> 00:18:01.976 A:middle
brief journey into building a VR

00:18:01.976 --> 00:18:02.306 A:middle
app.

00:18:02.766 --> 00:18:03.716 A:middle
So, with that background

00:18:03.716 --> 00:18:05.256 A:middle
covered, I'd like to now

00:18:05.256 --> 00:18:06.916 A:middle
introduce Nat Brown from Valve

00:18:06.996 --> 00:18:08.836 A:middle
Software, to come onstage and

00:18:08.836 --> 00:18:10.886 A:middle
talk a bit more about SteamVR on

00:18:10.886 --> 00:18:11.386 A:middle
macOS.

00:18:12.016 --> 00:18:13.726 A:middle
[ Applause ]

00:18:13.726 --> 00:18:14.126 A:middle
Thanks, Nat.

00:18:14.356 --> 00:18:14.746 A:middle
&gt;&gt; Thanks, Rav.

00:18:16.146 --> 00:18:17.516 A:middle
Hi, everybody.

00:18:17.566 --> 00:18:20.486 A:middle
I'm Nat. I work on VR at Valve.

00:18:20.786 --> 00:18:22.546 A:middle
So, if you don't know Valve,

00:18:22.546 --> 00:18:24.076 A:middle
we're a game company.

00:18:24.076 --> 00:18:25.186 A:middle
We distribute games and we have

00:18:25.186 --> 00:18:28.636 A:middle
a community of gamers that play

00:18:28.636 --> 00:18:29.276 A:middle
on Steam.

00:18:29.636 --> 00:18:30.896 A:middle
It turns out, games are actually

00:18:30.896 --> 00:18:33.266 A:middle
a super-interesting crucible for

00:18:33.266 --> 00:18:34.186 A:middle
user interface and

00:18:34.186 --> 00:18:35.226 A:middle
human/computer interaction.

00:18:35.676 --> 00:18:36.766 A:middle
And at Valve, we do a lot of

00:18:36.766 --> 00:18:39.006 A:middle
experiments around games and

00:18:39.006 --> 00:18:39.306 A:middle
input.

00:18:40.156 --> 00:18:42.356 A:middle
So, years of VR prototypes

00:18:42.886 --> 00:18:44.186 A:middle
really didn't click, for us, for

00:18:44.186 --> 00:18:45.346 A:middle
making games or any other kind

00:18:45.346 --> 00:18:45.826 A:middle
of content.

00:18:46.366 --> 00:18:47.866 A:middle
Until we found this sweet

00:18:47.866 --> 00:18:50.106 A:middle
combination of 90 hertz low

00:18:50.106 --> 00:18:52.096 A:middle
persistence displays, accurate

00:18:52.096 --> 00:18:53.716 A:middle
room scale tracking, with two

00:18:53.716 --> 00:18:54.536 A:middle
track controllers.

00:18:55.276 --> 00:18:57.056 A:middle
We consider this a magical

00:18:57.056 --> 00:18:58.076 A:middle
threshold for VR.

00:18:58.726 --> 00:19:00.826 A:middle
I like to think of it as kind of

00:18:58.726 --> 00:19:00.826 A:middle
I like to think of it as kind of

00:19:00.826 --> 00:19:02.776 A:middle
similar to how when you first

00:19:03.246 --> 00:19:04.546 A:middle
used a smartphone with low

00:19:04.546 --> 00:19:06.216 A:middle
latency accurate touch, it

00:19:06.216 --> 00:19:07.066 A:middle
really felt magical.

00:19:07.396 --> 00:19:08.536 A:middle
That's what this magical

00:19:08.536 --> 00:19:11.526 A:middle
threshold is, for VR.

00:19:11.746 --> 00:19:12.916 A:middle
Once room scale VR really

00:19:12.916 --> 00:19:14.216 A:middle
clicked for us, we knew that we

00:19:14.216 --> 00:19:16.166 A:middle
could build VR games and VR

00:19:16.166 --> 00:19:16.496 A:middle
content.

00:19:17.516 --> 00:19:19.366 A:middle
We license aspects of our VR

00:19:19.366 --> 00:19:22.296 A:middle
technology like base stations,

00:19:22.466 --> 00:19:24.686 A:middle
headset lens designs, and so

00:19:24.686 --> 00:19:26.686 A:middle
forth, non-exclusively to

00:19:26.686 --> 00:19:28.156 A:middle
partners like HTC and LG.

00:19:28.156 --> 00:19:30.016 A:middle
And we have a big program that

00:19:30.016 --> 00:19:31.486 A:middle
licenses Lighthouse tracking

00:19:31.486 --> 00:19:32.816 A:middle
technology to lots of different

00:19:32.816 --> 00:19:33.216 A:middle
partners.

00:19:33.756 --> 00:19:37.196 A:middle
Our approach to the software

00:19:37.196 --> 00:19:38.336 A:middle
stack you've heard a little bit

00:19:38.336 --> 00:19:39.906 A:middle
about, already, is called the

00:19:39.906 --> 00:19:42.186 A:middle
SteamVr runtime.

00:19:42.416 --> 00:19:43.936 A:middle
SteamVr has an application

00:19:43.936 --> 00:19:45.506 A:middle
model, up above, and a hardware

00:19:45.506 --> 00:19:46.876 A:middle
and driver model, down below.

00:19:47.016 --> 00:19:49.266 A:middle
Our goal here, is to promote

00:19:49.266 --> 00:19:50.606 A:middle
experiments in VR, because we're

00:19:50.606 --> 00:19:52.096 A:middle
really in the early days of what

00:19:52.096 --> 00:19:53.546 A:middle
VR is and what the content's

00:19:53.546 --> 00:19:55.006 A:middle
going to be like.

00:19:55.546 --> 00:19:57.236 A:middle
We wanted to make this model so

00:19:57.236 --> 00:19:58.746 A:middle
that people could experiment in

00:19:58.746 --> 00:19:59.576 A:middle
VR hardware and content and

00:19:59.576 --> 00:19:59.976 A:middle
reduce risk.

00:20:00.046 --> 00:20:03.036 A:middle
So, you can go out, maybe not

00:20:03.036 --> 00:20:04.246 A:middle
you, but some of you can go out

00:20:04.536 --> 00:20:06.186 A:middle
and design a new headset or a

00:20:06.186 --> 00:20:08.346 A:middle
new tracking system, or new

00:20:08.346 --> 00:20:08.896 A:middle
controllers.

00:20:09.066 --> 00:20:10.526 A:middle
And then, you can come to an

00:20:10.526 --> 00:20:12.146 A:middle
Open VR platform, and you can

00:20:12.146 --> 00:20:13.526 A:middle
write a driver that plugs right

00:20:13.526 --> 00:20:13.726 A:middle
in.

00:20:14.036 --> 00:20:15.116 A:middle
And you'll have access to all

00:20:15.116 --> 00:20:16.606 A:middle
the existing content that's

00:20:16.606 --> 00:20:17.336 A:middle
already running.

00:20:18.056 --> 00:20:19.596 A:middle
That will give you real world

00:20:19.596 --> 00:20:21.666 A:middle
tests that make your hardware

00:20:21.666 --> 00:20:21.966 A:middle
better.

00:20:21.966 --> 00:20:23.266 A:middle
Because you and your customers

00:20:23.496 --> 00:20:25.426 A:middle
can compare your new idea

00:20:25.426 --> 00:20:26.566 A:middle
directly with other hardware

00:20:26.566 --> 00:20:27.326 A:middle
that's already out there.

00:20:27.826 --> 00:20:29.246 A:middle
So, hardware developers don't

00:20:29.246 --> 00:20:30.566 A:middle
have to develop custom content

00:20:30.916 --> 00:20:32.206 A:middle
and content developers don't

00:20:32.206 --> 00:20:33.926 A:middle
have to bet on which hardware

00:20:33.926 --> 00:20:34.486 A:middle
will win.

00:20:34.486 --> 00:20:36.476 A:middle
They can just focus on making

00:20:37.236 --> 00:20:38.906 A:middle
great content.

00:20:38.906 --> 00:20:41.486 A:middle
So, applications link to the

00:20:41.486 --> 00:20:42.336 A:middle
Open VR framework.

00:20:42.336 --> 00:20:44.286 A:middle
It's a really tiny library, and

00:20:44.286 --> 00:20:45.786 A:middle
all it knows how to do is define

00:20:46.106 --> 00:20:47.166 A:middle
the runtime that's currently

00:20:47.166 --> 00:20:47.576 A:middle
installed.

00:20:47.576 --> 00:20:49.336 A:middle
So, it finds this VR client

00:20:49.336 --> 00:20:50.546 A:middle
library, that's a shared

00:20:50.546 --> 00:20:51.816 A:middle
library, and that either

00:20:51.816 --> 00:20:53.556 A:middle
connects to or launches the

00:20:53.556 --> 00:20:55.006 A:middle
other runtime processes of

00:20:55.006 --> 00:20:55.596 A:middle
SteamVr.

00:20:55.996 --> 00:20:57.156 A:middle
The vrmonitor process.

00:20:57.156 --> 00:20:58.516 A:middle
You're going to see a lot of

00:20:58.516 --> 00:21:00.066 A:middle
that little window.

00:20:58.516 --> 00:21:00.066 A:middle
that little window.

00:21:00.066 --> 00:21:01.486 A:middle
It's a UI and a setting

00:21:01.486 --> 00:21:02.066 A:middle
application.

00:21:02.066 --> 00:21:03.586 A:middle
It shows you the state of any

00:21:03.586 --> 00:21:04.536 A:middle
attached headsets and

00:21:04.536 --> 00:21:05.886 A:middle
controllers, and the tracking

00:21:05.886 --> 00:21:06.326 A:middle
sensors.

00:21:06.836 --> 00:21:11.896 A:middle
The vrserver is in charge of

00:21:12.006 --> 00:21:13.656 A:middle
keeping track of drivers,

00:21:13.836 --> 00:21:14.976 A:middle
loading alternate drivers.

00:21:14.976 --> 00:21:16.806 A:middle
And it puts poses and other

00:21:16.806 --> 00:21:19.076 A:middle
information into shared memory.

00:21:19.076 --> 00:21:21.136 A:middle
So, that your application and

00:21:21.136 --> 00:21:22.656 A:middle
the rest of the SteamVR runtime

00:21:22.706 --> 00:21:24.836 A:middle
have access to it.

00:21:25.106 --> 00:21:26.336 A:middle
The vrcompositor, you just heard

00:21:26.336 --> 00:21:28.066 A:middle
a little bit about, this process

00:21:28.276 --> 00:21:30.696 A:middle
is sort of like the Windows

00:21:30.696 --> 00:21:31.086 A:middle
server.

00:21:31.326 --> 00:21:33.026 A:middle
It draws scenes and overlays to

00:21:33.026 --> 00:21:33.636 A:middle
the headset.

00:21:33.636 --> 00:21:35.506 A:middle
And it corrects images for lens

00:21:35.536 --> 00:21:36.666 A:middle
distortion, color.

00:21:36.886 --> 00:21:37.716 A:middle
And one of the things that's

00:21:37.716 --> 00:21:39.526 A:middle
sort of under the hood, that you

00:21:39.526 --> 00:21:42.656 A:middle
may not understand, is it

00:21:42.656 --> 00:21:43.746 A:middle
corrects for smearing and

00:21:43.746 --> 00:21:44.726 A:middle
ghosting under motion.

00:21:45.086 --> 00:21:48.506 A:middle
And it also, fades into a stable

00:21:48.506 --> 00:21:50.216 A:middle
tracking area when applications

00:21:50.216 --> 00:21:51.446 A:middle
fail to meet frame rate.

00:21:51.716 --> 00:21:52.846 A:middle
Because we don't want people to

00:21:52.846 --> 00:21:53.846 A:middle
fall over or bump into

00:21:53.846 --> 00:21:54.186 A:middle
something.

00:21:54.526 --> 00:21:55.926 A:middle
So, the vrcompositor

00:21:55.926 --> 00:21:56.946 A:middle
communicates with Metal, like

00:21:56.946 --> 00:21:57.386 A:middle
you heard.

00:21:57.596 --> 00:21:59.066 A:middle
It presents directly to the

00:21:59.066 --> 00:22:00.026 A:middle
headset through the Direct to

00:21:59.066 --> 00:22:00.026 A:middle
headset through the Direct to

00:22:00.026 --> 00:22:01.546 A:middle
Display Metal 2 API.

00:22:03.146 --> 00:22:03.526 A:middle
Let's see.

00:22:03.526 --> 00:22:05.216 A:middle
Last, but not least, the mighty

00:22:05.496 --> 00:22:06.266 A:middle
vrdashboard.

00:22:06.486 --> 00:22:09.216 A:middle
That is a piece of UI that lets

00:22:09.216 --> 00:22:10.606 A:middle
you select applications.

00:22:10.936 --> 00:22:12.176 A:middle
It lets you control volume,

00:22:12.576 --> 00:22:13.636 A:middle
other system settings.

00:22:14.486 --> 00:22:16.256 A:middle
We provide a default one that

00:22:16.256 --> 00:22:17.586 A:middle
shows you your Steam library,

00:22:17.586 --> 00:22:18.606 A:middle
unless you choose applications.

00:22:18.956 --> 00:22:20.096 A:middle
But there's actually an API.

00:22:20.096 --> 00:22:21.206 A:middle
So, you can write your own

00:22:21.446 --> 00:22:22.736 A:middle
dashboard application, as well.

00:22:22.966 --> 00:22:24.646 A:middle
So, Valve and Apple, we started

00:22:24.646 --> 00:22:25.886 A:middle
working together more closely,

00:22:26.086 --> 00:22:27.336 A:middle
about a year ago.

00:22:27.646 --> 00:22:28.776 A:middle
And our port to Metal from

00:22:28.776 --> 00:22:30.286 A:middle
OpenGL, it didn't cost us very

00:22:30.286 --> 00:22:30.566 A:middle
much.

00:22:30.686 --> 00:22:31.856 A:middle
Metal is a really cool API.

00:22:31.856 --> 00:22:34.116 A:middle
And it was critical for us to

00:22:34.116 --> 00:22:35.716 A:middle
get VR up and performing.

00:22:35.876 --> 00:22:38.166 A:middle
Our biggest request to Apple, a

00:22:38.166 --> 00:22:39.836 A:middle
year ago, was for this Direct to

00:22:39.836 --> 00:22:40.536 A:middle
Display feature.

00:22:40.986 --> 00:22:42.126 A:middle
Because it's critical to ensure

00:22:42.126 --> 00:22:43.476 A:middle
that the VR compositor has the

00:22:43.476 --> 00:22:45.846 A:middle
fastest time predictable path to

00:22:45.846 --> 00:22:46.966 A:middle
the headset display panels.

00:22:47.906 --> 00:22:50.046 A:middle
We also, really needed super

00:22:50.046 --> 00:22:52.166 A:middle
accurate low variance VBL,

00:22:52.276 --> 00:22:53.606 A:middle
vertical blank, events.

00:22:53.956 --> 00:22:54.726 A:middle
So, that we could set the

00:22:54.726 --> 00:22:56.216 A:middle
cadence of the VR frame

00:22:56.216 --> 00:22:57.856 A:middle
presentation timing, and we

00:22:57.856 --> 00:22:58.936 A:middle
could predict those poses

00:22:58.936 --> 00:23:00.086 A:middle
accurately.

00:22:58.936 --> 00:23:00.086 A:middle
accurately.

00:23:00.316 --> 00:23:01.736 A:middle
Predicting the pose accurately

00:23:01.966 --> 00:23:04.156 A:middle
is actually more important than

00:23:04.156 --> 00:23:06.016 A:middle
the time between motion happens

00:23:06.316 --> 00:23:07.366 A:middle
and when the display happens.

00:23:07.366 --> 00:23:08.496 A:middle
If we know when it's going to

00:23:08.496 --> 00:23:09.436 A:middle
be, that's actually more

00:23:09.436 --> 00:23:09.886 A:middle
important.

00:23:10.656 --> 00:23:12.816 A:middle
Finally, we hit some speed bumps

00:23:12.816 --> 00:23:13.836 A:middle
around inter-process and

00:23:13.836 --> 00:23:15.456 A:middle
inter-thread synchronization.

00:23:15.816 --> 00:23:17.196 A:middle
Once everything else was working

00:23:17.196 --> 00:23:18.516 A:middle
really well, Metal was blazing

00:23:18.516 --> 00:23:21.596 A:middle
fast, we had really tight VBL,

00:23:21.596 --> 00:23:22.816 A:middle
but we still were having some

00:23:22.816 --> 00:23:24.116 A:middle
synchronization problems.

00:23:24.316 --> 00:23:25.906 A:middle
But Apple helped us find better

00:23:25.906 --> 00:23:28.066 A:middle
ways to signal and synchronize

00:23:28.066 --> 00:23:29.446 A:middle
with low scheduling variance

00:23:29.446 --> 00:23:30.716 A:middle
between all the processes and

00:23:30.716 --> 00:23:31.376 A:middle
thread involved.

00:23:33.286 --> 00:23:37.416 A:middle
Okay. So, my diagram of a VR

00:23:37.496 --> 00:23:38.306 A:middle
frame is a little more

00:23:38.306 --> 00:23:39.236 A:middle
complicated.

00:23:39.466 --> 00:23:40.686 A:middle
Most of you are never going to

00:23:40.686 --> 00:23:41.776 A:middle
look under the hood, this far.

00:23:41.776 --> 00:23:42.686 A:middle
But I thought I'd show it to

00:23:42.686 --> 00:23:43.066 A:middle
you, anyway.

00:23:43.556 --> 00:23:46.746 A:middle
So, the low persistence OLED of

00:23:46.746 --> 00:23:48.646 A:middle
the HTC Vibe uses global

00:23:48.646 --> 00:23:49.126 A:middle
illumination.

00:23:49.996 --> 00:23:52.146 A:middle
All of the pixels of the display

00:23:52.146 --> 00:23:54.226 A:middle
flash for a tiny period, all at

00:23:54.226 --> 00:23:54.726 A:middle
once.

00:23:54.726 --> 00:23:56.276 A:middle
And this is common in VR,

00:23:56.276 --> 00:23:57.556 A:middle
because heads move really

00:23:57.556 --> 00:23:57.936 A:middle
quickly.

00:23:58.426 --> 00:24:00.676 A:middle
And we want to make sure that

00:23:58.426 --> 00:24:00.676 A:middle
And we want to make sure that

00:24:00.676 --> 00:24:02.506 A:middle
the image doesn't smear or tear

00:24:02.506 --> 00:24:03.526 A:middle
in front of the user.

00:24:03.886 --> 00:24:05.566 A:middle
So, the panel illuminates for

00:24:05.566 --> 00:24:07.776 A:middle
about two milliseconds, one

00:24:07.776 --> 00:24:09.266 A:middle
frame after it is presented by

00:24:09.266 --> 00:24:10.966 A:middle
the GPU, because the panel takes

00:24:11.036 --> 00:24:12.326 A:middle
time to charge before it can do

00:24:12.326 --> 00:24:14.096 A:middle
that global illumination pulse.

00:24:14.916 --> 00:24:16.266 A:middle
So, over here, that's the

00:24:16.266 --> 00:24:17.076 A:middle
photons coming out.

00:24:17.076 --> 00:24:18.046 A:middle
We're going to follow this red

00:24:18.106 --> 00:24:19.246 A:middle
frame through this sequence.

00:24:19.636 --> 00:24:23.436 A:middle
So, way out here is the photons

00:24:23.436 --> 00:24:24.236 A:middle
coming out.

00:24:24.836 --> 00:24:25.916 A:middle
Because of this timing,

00:24:26.316 --> 00:24:27.706 A:middle
applications typically pick up a

00:24:27.756 --> 00:24:28.926 A:middle
pose, like you heard before,

00:24:28.986 --> 00:24:30.986 A:middle
from IVR compositor wakeup

00:24:30.986 --> 00:24:31.406 A:middle
poses.

00:24:31.646 --> 00:24:33.946 A:middle
So, wakeup poses stalls and

00:24:33.946 --> 00:24:36.096 A:middle
returns with a pose for that

00:24:36.096 --> 00:24:37.356 A:middle
future firing of photons.

00:24:37.616 --> 00:24:39.526 A:middle
So, the rendering is happening

00:24:39.526 --> 00:24:41.146 A:middle
here, and you present it there,

00:24:41.366 --> 00:24:42.386 A:middle
here in the middle.

00:24:42.516 --> 00:24:43.796 A:middle
But the photons don't go out

00:24:43.796 --> 00:24:44.056 A:middle
there.

00:24:44.056 --> 00:24:46.916 A:middle
So, we've had to predict a pose

00:24:46.916 --> 00:24:49.426 A:middle
about 25 milliseconds out.

00:24:50.076 --> 00:24:54.206 A:middle
So, 25 milliseconds is two

00:24:54.206 --> 00:24:56.206 A:middle
frames plus the little tiny bit

00:24:56.366 --> 00:24:57.186 A:middle
of running start.

00:24:57.236 --> 00:24:58.036 A:middle
And you heard how running

00:24:58.036 --> 00:25:00.516 A:middle
start's very important, because

00:24:58.036 --> 00:25:00.516 A:middle
start's very important, because

00:25:00.516 --> 00:25:01.706 A:middle
we want to give you as much of

00:25:01.706 --> 00:25:04.146 A:middle
that 11 milliseconds of GPU to

00:25:04.146 --> 00:25:05.826 A:middle
get the most excellent pixels up

00:25:05.826 --> 00:25:07.376 A:middle
in front of the users, that you

00:25:08.216 --> 00:25:08.306 A:middle
can.

00:25:08.396 --> 00:25:11.006 A:middle
So, one last thing that's

00:25:11.006 --> 00:25:11.656 A:middle
happening, here.

00:25:11.726 --> 00:25:12.736 A:middle
You see this frame actually

00:25:12.736 --> 00:25:14.156 A:middle
stretches back all the way to

00:25:14.156 --> 00:25:14.926 A:middle
the beginning of the slide.

00:25:15.416 --> 00:25:16.906 A:middle
And that's because this

00:25:16.906 --> 00:25:19.486 A:middle
application, and your game

00:25:19.486 --> 00:25:20.526 A:middle
engine might be doing this under

00:25:20.526 --> 00:25:22.566 A:middle
the covers, is kind of more

00:25:22.566 --> 00:25:23.136 A:middle
complicated.

00:25:23.356 --> 00:25:24.726 A:middle
It has some physics and input

00:25:24.726 --> 00:25:26.586 A:middle
event processing, that it needs

00:25:26.586 --> 00:25:27.116 A:middle
to do.

00:25:27.146 --> 00:25:28.386 A:middle
And that's costly work that's

00:25:28.386 --> 00:25:29.526 A:middle
going to take some CPU time,

00:25:29.526 --> 00:25:29.916 A:middle
over here.

00:25:30.496 --> 00:25:32.046 A:middle
But that code actually needs

00:25:32.106 --> 00:25:33.286 A:middle
pose information, also.

00:25:33.936 --> 00:25:35.346 A:middle
It needs to know when the

00:25:35.346 --> 00:25:36.526 A:middle
buttons were pressed and where

00:25:36.526 --> 00:25:37.366 A:middle
the controllers were.

00:25:37.366 --> 00:25:38.456 A:middle
Maybe it's interpolating

00:25:38.746 --> 00:25:39.576 A:middle
something having to do with

00:25:39.576 --> 00:25:41.546 A:middle
motion, or you're blocking

00:25:41.796 --> 00:25:42.796 A:middle
something, or you're firing

00:25:42.796 --> 00:25:43.136 A:middle
something.

00:25:43.556 --> 00:25:47.026 A:middle
So, this thread actually, it's

00:25:47.026 --> 00:25:48.146 A:middle
going to wake up at around the

00:25:48.146 --> 00:25:49.626 A:middle
same time, because wakeup poses

00:25:49.626 --> 00:25:51.476 A:middle
gives it this important kind of

00:25:51.586 --> 00:25:52.126 A:middle
synch point.

00:25:52.466 --> 00:25:53.866 A:middle
But it's going to be calling a

00:25:53.866 --> 00:25:55.346 A:middle
different API, because it's

00:25:55.346 --> 00:25:56.756 A:middle
trying to get a pose much

00:25:56.756 --> 00:25:57.346 A:middle
further out.

00:25:57.536 --> 00:25:59.106 A:middle
It's looking 36 milliseconds

00:25:59.106 --> 00:26:00.776 A:middle
out, and so, it's going to be

00:25:59.106 --> 00:26:00.776 A:middle
out, and so, it's going to be

00:26:00.776 --> 00:26:02.746 A:middle
calling the getDevice to

00:26:02.746 --> 00:26:04.026 A:middle
absolute tracking poses.

00:26:04.406 --> 00:26:06.946 A:middle
So, I tell you this just so you

00:26:06.946 --> 00:26:09.636 A:middle
know, Open VR has some pretty

00:26:09.636 --> 00:26:12.706 A:middle
deep APIs for you to tune your

00:26:12.706 --> 00:26:13.746 A:middle
applications so that you're

00:26:13.746 --> 00:26:15.856 A:middle
predicting where the headset and

00:26:15.856 --> 00:26:16.806 A:middle
where the controllers are going

00:26:16.806 --> 00:26:18.806 A:middle
to be very accurately, based on

00:26:19.236 --> 00:26:21.696 A:middle
where you need them to be, where

00:26:21.696 --> 00:26:23.106 A:middle
your code needs them to be.

00:26:23.106 --> 00:26:24.946 A:middle
So, the point of wakeup poses is

00:26:24.946 --> 00:26:26.526 A:middle
it gives you a predictable point

00:26:26.526 --> 00:26:28.176 A:middle
in time at running start, so you

00:26:28.176 --> 00:26:29.376 A:middle
always know when those photons

00:26:29.376 --> 00:26:30.506 A:middle
are going to come out.

00:26:31.536 --> 00:26:35.316 A:middle
So, last but not least, let's

00:26:35.316 --> 00:26:36.276 A:middle
talk about what you need to do

00:26:36.276 --> 00:26:37.426 A:middle
to get up and running with

00:26:37.426 --> 00:26:38.366 A:middle
SteamVr and macOS.

00:26:38.366 --> 00:26:39.656 A:middle
So, first of all, it's a tool in

00:26:39.656 --> 00:26:41.816 A:middle
Steam, as a developer gets

00:26:41.816 --> 00:26:43.546 A:middle
started by installing Steam and

00:26:43.546 --> 00:26:44.906 A:middle
registering for a free account.

00:26:45.696 --> 00:26:47.626 A:middle
And if you don't use Steam, you

00:26:47.626 --> 00:26:47.996 A:middle
should.

00:26:49.336 --> 00:26:51.086 A:middle
Next, install SteamVR itself.

00:26:51.166 --> 00:26:53.066 A:middle
SteamVR is under the Library

00:26:53.066 --> 00:26:53.946 A:middle
menu in Tools.

00:26:54.296 --> 00:26:56.046 A:middle
Search for SteamVR, right click

00:26:56.046 --> 00:26:58.366 A:middle
on it, choose the Properties,

00:26:58.366 --> 00:27:00.246 A:middle
choose the Beta tab, and opt

00:26:58.366 --> 00:27:00.246 A:middle
choose the Beta tab, and opt

00:27:00.246 --> 00:27:00.776 A:middle
into the Beta.

00:27:01.246 --> 00:27:02.006 A:middle
For now, it's a beta.

00:27:02.316 --> 00:27:03.206 A:middle
Then, install it.

00:27:03.206 --> 00:27:04.566 A:middle
We'll be keeping SteamVr up to

00:27:04.566 --> 00:27:05.946 A:middle
date as we fix any bugs that you

00:27:05.946 --> 00:27:06.246 A:middle
find.

00:27:07.166 --> 00:27:08.346 A:middle
Finally, you want to download

00:27:08.346 --> 00:27:09.896 A:middle
the Open VR headers and the

00:27:09.896 --> 00:27:11.686 A:middle
framework from GitHub.

00:27:11.686 --> 00:27:12.796 A:middle
And I've put a link, right up

00:27:12.846 --> 00:27:15.406 A:middle
there, for you in the slides.

00:27:15.556 --> 00:27:17.096 A:middle
So, here's the funky part.

00:27:17.656 --> 00:27:18.886 A:middle
You need to include that Open VR

00:27:18.886 --> 00:27:20.766 A:middle
bootstrapping framework inside

00:27:20.766 --> 00:27:21.526 A:middle
of your application.

00:27:22.106 --> 00:27:24.166 A:middle
The Open VR framework that you

00:27:24.166 --> 00:27:25.756 A:middle
link to, that conveys the

00:27:25.756 --> 00:27:27.216 A:middle
version of the interfaces of the

00:27:27.216 --> 00:27:28.436 A:middle
runtime you've built and tested

00:27:28.436 --> 00:27:28.866 A:middle
against.

00:27:29.146 --> 00:27:30.866 A:middle
And that allows us to upgrade

00:27:30.946 --> 00:27:32.736 A:middle
the runtime and to version

00:27:32.736 --> 00:27:33.616 A:middle
forward, gracefully.

00:27:33.616 --> 00:27:35.306 A:middle
Because we move this forward

00:27:35.536 --> 00:27:36.196 A:middle
quite actively.

00:27:36.386 --> 00:27:38.376 A:middle
In XCode, instead of just adding

00:27:38.376 --> 00:27:39.146 A:middle
the framework to your link

00:27:39.146 --> 00:27:40.796 A:middle
phase, go into General Settings

00:27:40.986 --> 00:27:42.216 A:middle
and make it an embedded binary.

00:27:42.216 --> 00:27:43.786 A:middle
So, it will be installed into

00:27:43.786 --> 00:27:45.136 A:middle
the contents frameworks portion

00:27:45.136 --> 00:27:46.086 A:middle
of your application bundle.

00:27:46.896 --> 00:27:50.506 A:middle
Okay. Finally, we really want

00:27:50.506 --> 00:27:51.296 A:middle
your feedback.

00:27:51.476 --> 00:27:53.016 A:middle
So, we put some things right

00:27:53.016 --> 00:27:54.426 A:middle
into the UI of vrmonitor.

00:27:54.426 --> 00:27:56.266 A:middle
There's a pointer to SteamVR's

00:27:56.266 --> 00:27:57.756 A:middle
support site and the community

00:27:57.756 --> 00:27:58.756 A:middle
hardware discussions.

00:27:59.046 --> 00:28:00.646 A:middle
And you can report a bug, create

00:27:59.046 --> 00:28:00.646 A:middle
And you can report a bug, create

00:28:00.646 --> 00:28:01.976 A:middle
a system report, and send it to

00:28:01.976 --> 00:28:03.306 A:middle
us or probably send it to me.

00:28:03.306 --> 00:28:05.476 A:middle
You can reach me at

00:28:05.476 --> 00:28:07.736 A:middle
natb@valvesoftware.com, but I'd

00:28:07.736 --> 00:28:08.586 A:middle
rather you use the tool.

00:28:09.196 --> 00:28:12.396 A:middle
And with that, thanks very much.

00:28:12.396 --> 00:28:13.826 A:middle
I'm really looking forward to

00:28:13.826 --> 00:28:15.306 A:middle
what you guys make with VR.

00:28:15.376 --> 00:28:16.616 A:middle
And thanks, to everybody at

00:28:16.616 --> 00:28:18.246 A:middle
Apple for making VR shine on

00:28:18.246 --> 00:28:18.756 A:middle
macOS.

00:28:19.336 --> 00:28:19.716 A:middle
Thank you.

00:28:20.516 --> 00:28:22.636 A:middle
[ Applause ]

00:28:23.136 --> 00:28:23.576 A:middle
&gt;&gt; Thanks, Nat.

00:28:24.886 --> 00:28:25.926 A:middle
It's been great working with

00:28:25.926 --> 00:28:27.376 A:middle
Valve, and I'm still astounded

00:28:27.376 --> 00:28:28.236 A:middle
about what we've been able to

00:28:28.236 --> 00:28:29.636 A:middle
achieve, over the last year.

00:28:31.206 --> 00:28:31.816 A:middle
All right.

00:28:31.816 --> 00:28:33.506 A:middle
Let's move on to talk about the

00:28:33.506 --> 00:28:35.466 A:middle
external GPU support that we've

00:28:35.466 --> 00:28:37.296 A:middle
added with macOS High Sierra.

00:28:37.986 --> 00:28:40.816 A:middle
So, an external GPU is a

00:28:40.816 --> 00:28:42.196 A:middle
standalone chassis with a

00:28:42.306 --> 00:28:44.436 A:middle
desktop class GPU in it, that

00:28:44.436 --> 00:28:47.146 A:middle
you can plug directly to your

00:28:47.146 --> 00:28:48.926 A:middle
host system via Thunderbolt.

00:28:49.856 --> 00:28:52.186 A:middle
And as noted previously, the

00:28:52.466 --> 00:28:54.216 A:middle
primary motivation here, was to

00:28:54.216 --> 00:28:55.876 A:middle
enable developers like you to

00:28:55.876 --> 00:28:58.166 A:middle
build great VR apps using a

00:28:58.256 --> 00:28:59.936 A:middle
broader range of Mac hardware.

00:29:00.686 --> 00:29:02.196 A:middle
There's a great workflow story,

00:29:02.196 --> 00:29:03.436 A:middle
here, where you can use your

00:29:03.436 --> 00:29:05.996 A:middle
MacBook Pro with an external GPU

00:29:06.236 --> 00:29:07.946 A:middle
to get the rendering horsepower

00:29:07.946 --> 00:29:08.696 A:middle
that you need for VR.

00:29:08.696 --> 00:29:11.466 A:middle
But of course, there's also

00:29:11.466 --> 00:29:12.896 A:middle
additional performance benefit

00:29:12.936 --> 00:29:15.086 A:middle
to be had for other GPU bound

00:29:15.086 --> 00:29:17.506 A:middle
cases, like games and pro apps,

00:29:17.506 --> 00:29:17.976 A:middle
as well.

00:29:18.576 --> 00:29:22.706 A:middle
And as you saw on Monday, we've

00:29:22.706 --> 00:29:24.246 A:middle
been partnering with Sonnet and

00:29:24.246 --> 00:29:26.426 A:middle
AMD to offer you an external

00:29:26.426 --> 00:29:28.666 A:middle
graphics developer kit with an

00:29:28.706 --> 00:29:32.226 A:middle
AMD Radeon RX-580 GPU in it.

00:29:32.556 --> 00:29:34.616 A:middle
This kit is optimized for use

00:29:34.616 --> 00:29:36.106 A:middle
with all our Thunderbolt 3

00:29:36.106 --> 00:29:37.966 A:middle
capable Macs, and is available

00:29:37.966 --> 00:29:38.906 A:middle
for purchase through our

00:29:38.906 --> 00:29:40.626 A:middle
developer program, today.

00:29:41.236 --> 00:29:41.966 A:middle
All right.

00:29:42.246 --> 00:29:44.066 A:middle
Let's dive right into how you

00:29:44.066 --> 00:29:45.846 A:middle
identify the external GPU.

00:29:46.556 --> 00:29:48.116 A:middle
This device enumeration code

00:29:48.116 --> 00:29:49.196 A:middle
should look very familiar to

00:29:49.246 --> 00:29:49.476 A:middle
you.

00:29:50.616 --> 00:29:52.646 A:middle
CopyAllDevices will give you all

00:29:52.646 --> 00:29:54.166 A:middle
the Metal devices in the system.

00:29:54.906 --> 00:29:56.336 A:middle
And then, you can identify the

00:29:56.336 --> 00:29:58.626 A:middle
external GPU by simply looking

00:29:58.626 --> 00:30:00.576 A:middle
for the removable property in

00:29:58.626 --> 00:30:00.576 A:middle
for the removable property in

00:30:00.576 --> 00:30:00.976 A:middle
the device.

00:30:01.976 --> 00:30:03.466 A:middle
This is very similar to how you

00:30:03.546 --> 00:30:04.936 A:middle
previously identified the low

00:30:04.936 --> 00:30:06.646 A:middle
power devices on our platforms.

00:30:06.646 --> 00:30:10.336 A:middle
Now, let's talk a bit about

00:30:10.336 --> 00:30:11.246 A:middle
Thunderbolt bandwidth

00:30:11.276 --> 00:30:12.066 A:middle
capabilities.

00:30:12.816 --> 00:30:15.086 A:middle
So, Thunderbolt 3 offers twice

00:30:15.146 --> 00:30:16.386 A:middle
the theoretical bandwidth of

00:30:16.436 --> 00:30:18.326 A:middle
Thunderbolt 2, which is great.

00:30:19.166 --> 00:30:20.406 A:middle
But you have to keep in mind

00:30:20.406 --> 00:30:21.806 A:middle
that this is still a quarter the

00:30:21.806 --> 00:30:24.056 A:middle
bandwidth of the PCI bus

00:30:24.306 --> 00:30:25.956 A:middle
available to the internal GPUs

00:30:25.956 --> 00:30:27.116 A:middle
in our platforms.

00:30:28.356 --> 00:30:29.286 A:middle
So, this is important.

00:30:29.906 --> 00:30:31.586 A:middle
You have a choice, now, between

00:30:31.586 --> 00:30:33.896 A:middle
using the internal GPU with a

00:30:34.006 --> 00:30:36.426 A:middle
high bandwidth link, or a high

00:30:36.516 --> 00:30:38.656 A:middle
performance external GPU with a

00:30:38.656 --> 00:30:39.926 A:middle
link at about a quarter the

00:30:39.926 --> 00:30:40.466 A:middle
bandwidth.

00:30:41.126 --> 00:30:43.536 A:middle
So, you need to treat the link

00:30:43.536 --> 00:30:45.056 A:middle
and the GPU as a pair when

00:30:45.056 --> 00:30:47.486 A:middle
deciding which GPU you use.

00:30:48.816 --> 00:30:50.606 A:middle
Additionally, users can now

00:30:50.606 --> 00:30:52.706 A:middle
attach displays to different

00:30:52.706 --> 00:30:52.896 A:middle
GPUs.

00:30:52.896 --> 00:30:55.746 A:middle
And in this environment, there's

00:30:55.746 --> 00:30:57.746 A:middle
a penalty to render on one GPU

00:30:58.006 --> 00:30:59.576 A:middle
and then, display on another, as

00:30:59.576 --> 00:31:00.516 A:middle
that date needs to be

00:30:59.576 --> 00:31:00.516 A:middle
that date needs to be

00:31:00.516 --> 00:31:02.226 A:middle
transferred across the link.

00:31:03.736 --> 00:31:05.046 A:middle
So, where your content is

00:31:05.106 --> 00:31:08.946 A:middle
displayed clearly is a huge

00:31:08.946 --> 00:31:10.526 A:middle
consideration when you decide

00:31:10.646 --> 00:31:12.176 A:middle
which GPU you want to use, as

00:31:12.176 --> 00:31:12.406 A:middle
well.

00:31:13.606 --> 00:31:14.206 A:middle
So, there's additional

00:31:14.206 --> 00:31:15.106 A:middle
complexity, here.

00:31:15.856 --> 00:31:16.806 A:middle
But fortunately, there's a

00:31:16.866 --> 00:31:18.566 A:middle
couple simple things that you

00:31:18.566 --> 00:31:20.156 A:middle
can do to make your app a good

00:31:20.216 --> 00:31:21.656 A:middle
citizen in a multi-GPU

00:31:21.656 --> 00:31:22.196 A:middle
environment.

00:31:23.136 --> 00:31:24.116 A:middle
So, let's start with GPU

00:31:24.166 --> 00:31:24.746 A:middle
selection.

00:31:25.646 --> 00:31:27.066 A:middle
The best advice that we can give

00:31:27.066 --> 00:31:29.836 A:middle
you is to render on the same GPU

00:31:29.836 --> 00:31:31.516 A:middle
that's driving the display your

00:31:31.516 --> 00:31:31.916 A:middle
app is on.

00:31:32.506 --> 00:31:34.306 A:middle
I call this the golden rule of

00:31:34.306 --> 00:31:35.116 A:middle
GPU selection.

00:31:36.216 --> 00:31:37.356 A:middle
So, let's extend this and build

00:31:37.356 --> 00:31:38.306 A:middle
a decision tree.

00:31:39.756 --> 00:31:41.186 A:middle
So, if the content your app is

00:31:41.226 --> 00:31:43.226 A:middle
rendering will be presented to a

00:31:43.226 --> 00:31:46.006 A:middle
display, you want to select the

00:31:46.656 --> 00:31:48.436 A:middle
GPU that's driving that display.

00:31:48.656 --> 00:31:49.596 A:middle
This is our golden rule.

00:31:50.776 --> 00:31:51.936 A:middle
However, if your app is doing

00:31:51.976 --> 00:31:53.986 A:middle
compute or other offline

00:31:53.986 --> 00:31:55.956 A:middle
rendering operations, then you

00:31:55.956 --> 00:31:57.616 A:middle
need to decide if you prefer to

00:31:57.616 --> 00:31:59.526 A:middle
use the low power GPU is it's

00:31:59.526 --> 00:32:00.116 A:middle
available.

00:31:59.526 --> 00:32:00.116 A:middle
available.

00:32:01.126 --> 00:32:02.646 A:middle
This can be particularly useful

00:32:02.646 --> 00:32:04.006 A:middle
on our portables, where

00:32:04.276 --> 00:32:05.596 A:middle
selecting this device can have a

00:32:05.666 --> 00:32:07.136 A:middle
substantial battery savings.

00:32:07.916 --> 00:32:09.066 A:middle
But of course, if you need the

00:32:09.066 --> 00:32:11.186 A:middle
GPU horsepower for things like

00:32:11.186 --> 00:32:12.546 A:middle
VR, you're going to want to

00:32:12.546 --> 00:32:14.216 A:middle
select the external GPU.

00:32:14.216 --> 00:32:17.126 A:middle
So, let's get back to our golden

00:32:17.126 --> 00:32:19.256 A:middle
rule and find out how you

00:32:19.256 --> 00:32:21.196 A:middle
identify the Metal device that's

00:32:21.196 --> 00:32:22.556 A:middle
driving a particular display.

00:32:23.866 --> 00:32:24.806 A:middle
Well, it turns out that this is

00:32:24.876 --> 00:32:25.766 A:middle
really easy to do.

00:32:26.496 --> 00:32:27.576 A:middle
There's an existing core

00:32:27.576 --> 00:32:29.416 A:middle
graphics API that will give you

00:32:29.416 --> 00:32:30.176 A:middle
this device.

00:32:30.996 --> 00:32:32.646 A:middle
You simply have to get the ID

00:32:33.216 --> 00:32:34.586 A:middle
for the display that your window

00:32:34.586 --> 00:32:36.026 A:middle
is on, by querying the

00:32:36.026 --> 00:32:36.906 A:middle
NSScreenNumber.

00:32:37.636 --> 00:32:39.516 A:middle
And then, call

00:32:39.576 --> 00:32:42.116 A:middle
CGDirectDisplayCopyCurrentMetal

00:32:42.116 --> 00:32:44.076 A:middle
Device to get the Metal device

00:32:44.146 --> 00:32:45.346 A:middle
that's driving that display.

00:32:46.036 --> 00:32:46.606 A:middle
It's that simple.

00:32:46.606 --> 00:32:47.306 A:middle
All right.

00:32:49.236 --> 00:32:51.586 A:middle
Now, that we've established that

00:32:51.586 --> 00:32:53.056 A:middle
each display can be attached to

00:32:53.056 --> 00:32:55.346 A:middle
a different GPU, your app will

00:32:55.346 --> 00:32:57.656 A:middle
need to handle GPU migration as

00:32:57.656 --> 00:32:58.706 A:middle
your displays are moved.

00:32:59.116 --> 00:33:00.566 A:middle
Sorry, as your window is moved

00:32:59.116 --> 00:33:00.566 A:middle
Sorry, as your window is moved

00:33:00.566 --> 00:33:01.706 A:middle
across those displays.

00:33:03.776 --> 00:33:05.586 A:middle
So, you can do that by

00:33:05.656 --> 00:33:07.646 A:middle
registering for the new, well,

00:33:07.646 --> 00:33:08.946 A:middle
it's not new, our existing

00:33:09.376 --> 00:33:10.926 A:middle
notification handler called

00:33:11.206 --> 00:33:12.896 A:middle
WindowDidChangeScreen.

00:33:12.896 --> 00:33:14.416 A:middle
So, let's take a look at what

00:33:14.416 --> 00:33:15.826 A:middle
you do with this notification

00:33:15.826 --> 00:33:16.146 A:middle
handler.

00:33:16.406 --> 00:33:18.506 A:middle
So, you'll want to start by

00:33:18.596 --> 00:33:21.406 A:middle
finding the Metal device for the

00:33:21.406 --> 00:33:23.286 A:middle
display your app is now on, by

00:33:23.286 --> 00:33:24.626 A:middle
calling the core graphics API

00:33:24.626 --> 00:33:26.196 A:middle
that we previously discussed.

00:33:27.476 --> 00:33:28.586 A:middle
You can early out if it's the

00:33:28.586 --> 00:33:29.646 A:middle
same device that you're

00:33:29.686 --> 00:33:31.106 A:middle
currently rendering to, since no

00:33:31.106 --> 00:33:33.036 A:middle
GPU migration will be required.

00:33:33.036 --> 00:33:35.336 A:middle
And then, you'll want to perform

00:33:35.566 --> 00:33:37.606 A:middle
your device migration and switch

00:33:37.606 --> 00:33:39.316 A:middle
to using the new device for all

00:33:39.316 --> 00:33:39.966 A:middle
your rendering.

00:33:41.016 --> 00:33:43.236 A:middle
So, that's how you use a display

00:33:43.236 --> 00:33:45.246 A:middle
change notification to handle

00:33:45.246 --> 00:33:46.376 A:middle
GPU migration.

00:33:46.376 --> 00:33:48.166 A:middle
But what about the case where

00:33:48.166 --> 00:33:50.076 A:middle
the external GPU is plugged in,

00:33:50.366 --> 00:33:51.756 A:middle
or unplugged from your system?

00:33:53.116 --> 00:33:54.786 A:middle
Well, Metal 2 introduces three

00:33:54.786 --> 00:33:56.526 A:middle
new notifications to help you

00:33:56.526 --> 00:33:57.146 A:middle
with this case.

00:33:58.316 --> 00:34:01.016 A:middle
These are DeviceWasAdded when an

00:33:58.316 --> 00:34:01.016 A:middle
These are DeviceWasAdded when an

00:34:01.016 --> 00:34:02.616 A:middle
external GPU was plugged in,

00:34:03.726 --> 00:34:05.076 A:middle
DeviceWasRemoved when it's

00:34:05.116 --> 00:34:06.336 A:middle
unplugged, and

00:34:06.336 --> 00:34:08.735 A:middle
DeviceRemovalRequested when the

00:34:08.735 --> 00:34:10.896 A:middle
OS signals an intent to remove a

00:34:10.896 --> 00:34:12.795 A:middle
GPU at some point in the future.

00:34:14.235 --> 00:34:15.406 A:middle
So, let's take a look at how you

00:34:15.406 --> 00:34:16.716 A:middle
would register for, and then,

00:34:16.716 --> 00:34:18.706 A:middle
respond to these notifications.

00:34:19.815 --> 00:34:21.315 A:middle
So, you'll want to use the new

00:34:21.416 --> 00:34:24.016 A:middle
CopyAllDevicesWithObserver API

00:34:24.686 --> 00:34:25.786 A:middle
that we've introduced with Metal

00:34:25.786 --> 00:34:26.085 A:middle
2.

00:34:26.846 --> 00:34:27.936 A:middle
This will let you register a

00:34:28.045 --> 00:34:30.416 A:middle
handler for these new device

00:34:30.416 --> 00:34:31.686 A:middle
change notifications.

00:34:32.686 --> 00:34:34.136 A:middle
In this case, we're simply

00:34:34.136 --> 00:34:35.536 A:middle
invoking a function called

00:34:35.896 --> 00:34:37.266 A:middle
handleGPUHotPlug.

00:34:37.976 --> 00:34:38.876 A:middle
So, let's take a look at it.

00:34:39.666 --> 00:34:41.126 A:middle
It's really straightforward.

00:34:41.616 --> 00:34:43.446 A:middle
All you have to do is check for

00:34:43.446 --> 00:34:45.216 A:middle
and directly respond to each

00:34:45.216 --> 00:34:45.946 A:middle
notification.

00:34:46.686 --> 00:34:47.676 A:middle
But I want to point out a couple

00:34:47.676 --> 00:34:48.275 A:middle
of things, here.

00:34:49.315 --> 00:34:50.966 A:middle
The first is that your app

00:34:50.966 --> 00:34:51.896 A:middle
should treat the

00:34:51.946 --> 00:34:53.436 A:middle
DeviceRemovalRequested

00:34:53.436 --> 00:34:55.696 A:middle
notification as a hint to start

00:34:55.795 --> 00:34:57.966 A:middle
migrating off the external GPU.

00:34:58.446 --> 00:35:02.216 A:middle
And second, if your app did not

00:34:58.446 --> 00:35:02.216 A:middle
And second, if your app did not

00:35:02.216 --> 00:35:02.796 A:middle
receive the

00:35:02.796 --> 00:35:04.116 A:middle
DeviceRemovalRequested

00:35:04.116 --> 00:35:06.016 A:middle
notification, then it should

00:35:06.016 --> 00:35:08.186 A:middle
treat DeviceWasRemoved as an

00:35:08.286 --> 00:35:10.246 A:middle
unexpected GPU removal.

00:35:10.826 --> 00:35:13.646 A:middle
So, an unexpected GPU removal is

00:35:13.646 --> 00:35:15.316 A:middle
when your external GPU is

00:35:15.436 --> 00:35:17.036 A:middle
disconnected or powered down

00:35:17.156 --> 00:35:18.566 A:middle
without the OS being aware.

00:35:19.926 --> 00:35:20.986 A:middle
So, this is the equivalent of

00:35:20.986 --> 00:35:22.196 A:middle
somebody reaching into your

00:35:22.196 --> 00:35:24.116 A:middle
system and yanking out that GPU.

00:35:24.896 --> 00:35:26.126 A:middle
And since the hardware is no

00:35:26.126 --> 00:35:28.286 A:middle
longer there, some Metal API

00:35:28.286 --> 00:35:30.086 A:middle
calls will start returning

00:35:30.086 --> 00:35:30.496 A:middle
errors.

00:35:30.646 --> 00:35:32.486 A:middle
So, you'll want to add defensive

00:35:32.536 --> 00:35:33.986 A:middle
code to your app to protect

00:35:33.986 --> 00:35:34.556 A:middle
against this.

00:35:35.146 --> 00:35:36.516 A:middle
So, it can survive until it

00:35:36.616 --> 00:35:37.786 A:middle
receives a migration

00:35:37.786 --> 00:35:39.236 A:middle
notification and it can

00:35:39.236 --> 00:35:41.076 A:middle
gracefully switch to another GPU

00:35:41.076 --> 00:35:41.696 A:middle
in the system.

00:35:42.876 --> 00:35:44.116 A:middle
It's also worth pointing out

00:35:44.296 --> 00:35:45.756 A:middle
that if you had any transient

00:35:45.756 --> 00:35:47.916 A:middle
data on the external GPU's local

00:35:47.916 --> 00:35:49.646 A:middle
memory, your app may need to

00:35:49.646 --> 00:35:50.926 A:middle
regenerate this, as it's no

00:35:50.926 --> 00:35:51.386 A:middle
longer there.

00:35:51.386 --> 00:35:52.066 A:middle
All right.

00:35:53.346 --> 00:35:55.666 A:middle
Now, on to some best practices.

00:35:56.456 --> 00:35:57.916 A:middle
So, we recommend that you don't

00:35:57.916 --> 00:35:59.716 A:middle
immediately release devices

00:35:59.966 --> 00:36:02.466 A:middle
after you migrate, as users tend

00:35:59.966 --> 00:36:02.466 A:middle
after you migrate, as users tend

00:36:02.466 --> 00:36:04.106 A:middle
to move windows back and forth

00:36:04.106 --> 00:36:05.066 A:middle
across displays.

00:36:05.946 --> 00:36:08.356 A:middle
Instead, employ a lazy teardown

00:36:08.426 --> 00:36:10.126 A:middle
policy with some reasonable

00:36:10.276 --> 00:36:10.636 A:middle
timeout.

00:36:12.136 --> 00:36:14.566 A:middle
Additionally, if your app has a

00:36:14.566 --> 00:36:16.936 A:middle
complex UI with a number of

00:36:16.936 --> 00:36:19.366 A:middle
windows, you may, may, need to

00:36:19.366 --> 00:36:21.476 A:middle
handle GPU migrations separately

00:36:21.526 --> 00:36:22.306 A:middle
for each window.

00:36:23.426 --> 00:36:25.526 A:middle
And then, finally, we recommend

00:36:25.526 --> 00:36:27.086 A:middle
that you profile your app in

00:36:27.086 --> 00:36:29.516 A:middle
multi-GPU situations, to ensure

00:36:29.516 --> 00:36:30.736 A:middle
that you're not needlessly

00:36:30.736 --> 00:36:32.356 A:middle
transferring data back and

00:36:32.426 --> 00:36:35.986 A:middle
forth, across the GPUs.

00:36:36.186 --> 00:36:36.446 A:middle
All right.

00:36:36.696 --> 00:36:38.196 A:middle
Let's tie it back to VR with

00:36:38.196 --> 00:36:39.816 A:middle
some best practices specific to

00:36:39.816 --> 00:36:40.676 A:middle
this use case.

00:36:41.816 --> 00:36:44.156 A:middle
First and most obvious, make

00:36:44.156 --> 00:36:45.616 A:middle
sure you attach the VR headset

00:36:45.736 --> 00:36:47.536 A:middle
directly to the external GPU.

00:36:48.836 --> 00:36:50.076 A:middle
Less obvious, but equally

00:36:50.076 --> 00:36:51.766 A:middle
important, you want to make sure

00:36:51.766 --> 00:36:53.256 A:middle
that your app is presenting its

00:36:53.256 --> 00:36:56.256 A:middle
UI or the mirrored VR content to

00:36:56.256 --> 00:36:57.746 A:middle
a display that's also being

00:36:57.746 --> 00:36:59.336 A:middle
driven by the external GPU.

00:37:00.036 --> 00:37:01.206 A:middle
This will ensure that both the

00:37:01.206 --> 00:37:03.626 A:middle
VR compositor and your app are

00:37:03.626 --> 00:37:05.316 A:middle
rendering with the external GPU.

00:37:05.906 --> 00:37:08.396 A:middle
And finally, make sure you cache

00:37:08.396 --> 00:37:10.846 A:middle
as many resources as possible on

00:37:10.846 --> 00:37:12.556 A:middle
the external GPU's local memory,

00:37:12.906 --> 00:37:14.226 A:middle
so that you're not streaming

00:37:14.226 --> 00:37:15.416 A:middle
data across the Thunderbolt

00:37:15.416 --> 00:37:17.016 A:middle
link, unless absolutely

00:37:17.016 --> 00:37:17.596 A:middle
required.

00:37:18.216 --> 00:37:19.236 A:middle
All right.

00:37:20.376 --> 00:37:22.096 A:middle
So, this brings us to the end of

00:37:22.096 --> 00:37:22.826 A:middle
our session.

00:37:23.046 --> 00:37:24.386 A:middle
So, let's quickly review what

00:37:24.386 --> 00:37:25.196 A:middle
we've covered, today.

00:37:25.476 --> 00:37:27.676 A:middle
So, the big news is that you can

00:37:27.676 --> 00:37:29.526 A:middle
now, develop VR content on

00:37:29.526 --> 00:37:30.316 A:middle
macOS.

00:37:31.376 --> 00:37:32.886 A:middle
We've added built-in support for

00:37:33.126 --> 00:37:34.716 A:middle
the HTC Vibe headset.

00:37:35.336 --> 00:37:37.366 A:middle
And we've partnered with Valve

00:37:37.366 --> 00:37:39.296 A:middle
to enable an optimized version,

00:37:39.546 --> 00:37:41.046 A:middle
an optimized Metal version of

00:37:41.046 --> 00:37:43.106 A:middle
the SteamVR runtime on our

00:37:43.106 --> 00:37:43.576 A:middle
platform.

00:37:44.966 --> 00:37:46.216 A:middle
Additionally, two of the most

00:37:46.306 --> 00:37:48.486 A:middle
popular game engines, Unity and

00:37:48.486 --> 00:37:50.566 A:middle
Unreal Engine 4 will be bringing

00:37:50.636 --> 00:37:52.596 A:middle
VR support to the Mac, in the

00:37:52.596 --> 00:37:53.276 A:middle
near future.

00:37:53.766 --> 00:37:55.406 A:middle
But of course, we also encourage

00:37:55.406 --> 00:37:56.806 A:middle
you to build your own native VR

00:37:56.806 --> 00:37:57.296 A:middle
app.

00:37:58.126 --> 00:37:59.726 A:middle
And finally, we added support

00:37:59.726 --> 00:38:00.626 A:middle
for external GPUs.

00:37:59.726 --> 00:38:00.626 A:middle
for external GPUs.

00:38:00.626 --> 00:38:02.846 A:middle
And we hope that this motivates

00:38:02.846 --> 00:38:04.606 A:middle
you to ensure that your app is a

00:38:04.746 --> 00:38:06.946 A:middle
good citizen in a multi-GPU

00:38:06.946 --> 00:38:08.326 A:middle
environment, so that you can

00:38:08.376 --> 00:38:09.376 A:middle
take advantage of that

00:38:09.376 --> 00:38:10.706 A:middle
additional GPU horsepower.

00:38:12.696 --> 00:38:14.746 A:middle
We're really excited to see what

00:38:14.746 --> 00:38:15.696 A:middle
you guys are going to be able to

00:38:15.696 --> 00:38:17.206 A:middle
build with this new technology.

00:38:18.436 --> 00:38:19.396 A:middle
So, be sure to check out the

00:38:19.396 --> 00:38:20.406 A:middle
other sessions on the Metal

00:38:20.406 --> 00:38:20.756 A:middle
Track.

00:38:21.086 --> 00:38:22.666 A:middle
We had a great Introducing Metal

00:38:22.666 --> 00:38:23.706 A:middle
2 session, yesterday.

00:38:23.706 --> 00:38:24.826 A:middle
If you didn't get a chance to

00:38:24.926 --> 00:38:26.126 A:middle
see it, I encourage you to watch

00:38:26.176 --> 00:38:27.186 A:middle
the video online.

00:38:28.076 --> 00:38:29.466 A:middle
We have two additional sessions

00:38:29.466 --> 00:38:30.766 A:middle
in the afternoon, tomorrow,

00:38:31.336 --> 00:38:32.726 A:middle
Metal 2 Optimization and

00:38:32.726 --> 00:38:34.696 A:middle
Debugging, and Using Metal 2 for

00:38:34.696 --> 00:38:35.136 A:middle
Compute.

00:38:35.326 --> 00:38:36.636 A:middle
We hope to see you, there.

00:38:37.516 --> 00:38:38.196 A:middle
I'll see you, there.

00:38:38.196 --> 00:38:39.286 A:middle
Thank you, very much, and have a

00:38:39.336 --> 00:38:40.476 A:middle
great WWDC.

00:38:41.016 --> 00:38:43.000 A:middle
[ Applause ]
