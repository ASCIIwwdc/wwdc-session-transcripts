WEBVTT

00:00:21.016 --> 00:00:22.806 A:middle
[ Applause ]

00:00:22.806 --> 00:00:23.406 A:middle
&gt;&gt; Good morning.

00:00:27.586 --> 00:00:29.776 A:middle
Welcome to Session 227, Data

00:00:29.776 --> 00:00:30.926 A:middle
Delivery with Drag and Drop.

00:00:31.556 --> 00:00:33.196 A:middle
My name is Dave Rahardja, and

00:00:33.196 --> 00:00:34.446 A:middle
I'm joined here, today, by my

00:00:34.446 --> 00:00:35.636 A:middle
colleague Tanu, who's going to

00:00:35.636 --> 00:00:36.476 A:middle
be operating the demos.

00:00:40.406 --> 00:00:41.596 A:middle
So, if you've been following

00:00:41.596 --> 00:00:43.106 A:middle
along in our series of Drag and

00:00:43.106 --> 00:00:44.886 A:middle
Drop sessions, this diagram

00:00:44.886 --> 00:00:46.146 A:middle
should be pretty familiar to

00:00:46.386 --> 00:00:46.656 A:middle
you.

00:00:47.476 --> 00:00:48.886 A:middle
During this session, we're going

00:00:48.886 --> 00:00:50.636 A:middle
to be focusing on this part of

00:00:50.636 --> 00:00:53.026 A:middle
the diagram, Item Providers.

00:00:53.706 --> 00:00:55.236 A:middle
Now, Item Providers are

00:00:55.236 --> 00:00:57.246 A:middle
fundamental to the way data is

00:00:57.246 --> 00:00:58.966 A:middle
transferred between applications

00:00:58.966 --> 00:00:59.766 A:middle
in drag and drop.

00:01:00.656 --> 00:01:02.346 A:middle
So, in this session, we're going

00:01:02.346 --> 00:01:05.066 A:middle
to cover four topics about item

00:01:05.066 --> 00:01:05.606 A:middle
providers.

00:01:05.916 --> 00:01:07.016 A:middle
We're going to cover some

00:01:07.016 --> 00:01:07.746 A:middle
basics.

00:01:08.456 --> 00:01:09.716 A:middle
We're going to talk about how

00:01:09.716 --> 00:01:11.996 A:middle
uniform type identifiers help

00:01:11.996 --> 00:01:13.556 A:middle
your apps to be more compatible

00:01:13.556 --> 00:01:16.066 A:middle
with others in the system.

00:01:16.836 --> 00:01:18.416 A:middle
We're going to cover how you can

00:01:18.416 --> 00:01:20.606 A:middle
create model classes that work

00:01:20.606 --> 00:01:21.916 A:middle
really well with drag and drop.

00:01:23.266 --> 00:01:24.086 A:middle
And finally, we're going to

00:01:24.086 --> 00:01:25.626 A:middle
close out by covering some

00:01:25.626 --> 00:01:27.656 A:middle
advanced topics that'll add some

00:01:27.656 --> 00:01:29.166 A:middle
real polish to your apps in our

00:01:29.166 --> 00:01:29.686 A:middle
ecosystem.

00:01:30.906 --> 00:01:31.806 A:middle
So, let's get started.

00:01:34.176 --> 00:01:35.206 A:middle
Let's talk about some

00:01:35.206 --> 00:01:36.766 A:middle
NSItemProvider basics.

00:01:37.256 --> 00:01:38.696 A:middle
So, what's an NSItemProvider?

00:01:39.756 --> 00:01:43.406 A:middle
Simply put, an NSItemProvider is

00:01:43.406 --> 00:01:44.226 A:middle
a data promise.

00:01:46.056 --> 00:01:47.916 A:middle
All data is loaded through drag

00:01:47.916 --> 00:01:50.616 A:middle
and drop asynchronously and on

00:01:50.616 --> 00:01:50.996 A:middle
demand.

00:01:52.506 --> 00:01:54.996 A:middle
An NSItemProvider can also, help

00:01:54.996 --> 00:01:57.306 A:middle
you to provide progress and

00:01:57.306 --> 00:01:58.906 A:middle
cancellation of data transfer.

00:02:00.326 --> 00:02:01.736 A:middle
And it is supported widely in

00:02:01.736 --> 00:02:02.196 A:middle
our API.

00:02:02.196 --> 00:02:04.676 A:middle
Of course, in drag and drop, but

00:02:04.676 --> 00:02:06.886 A:middle
also in UIPasteConfiguration.

00:02:07.536 --> 00:02:08.686 A:middle
And we've added API for

00:02:08.736 --> 00:02:10.246 A:middle
UIPasteboard, so that you can

00:02:10.246 --> 00:02:12.126 A:middle
use NSItemProvider directly with

00:02:12.736 --> 00:02:12.806 A:middle
it.

00:02:15.676 --> 00:02:17.306 A:middle
So, what does it mean to provide

00:02:17.306 --> 00:02:18.516 A:middle
data or promise data?

00:02:19.796 --> 00:02:21.286 A:middle
Providing data to an

00:02:21.286 --> 00:02:23.006 A:middle
NSItemProvider is really simple.

00:02:23.886 --> 00:02:25.356 A:middle
All you have to do is create an

00:02:25.356 --> 00:02:27.266 A:middle
NSItemProvider and pass it an

00:02:27.266 --> 00:02:29.136 A:middle
object that is suitable for use.

00:02:29.586 --> 00:02:31.126 A:middle
Now, a lot of our system

00:02:31.326 --> 00:02:33.036 A:middle
provided classes, such as

00:02:33.036 --> 00:02:35.656 A:middle
UIImage in a string, in its

00:02:35.656 --> 00:02:37.466 A:middle
attributed string can be used

00:02:37.466 --> 00:02:37.846 A:middle
this way.

00:02:38.006 --> 00:02:39.246 A:middle
And we'll see in a few slides

00:02:39.246 --> 00:02:40.156 A:middle
now, how you can make your

00:02:40.156 --> 00:02:41.736 A:middle
classes work in this fashion, as

00:02:41.736 --> 00:02:41.896 A:middle
well.

00:02:43.576 --> 00:02:46.356 A:middle
Once you provide the data, it

00:02:46.356 --> 00:02:47.546 A:middle
can be retrieved by the

00:02:47.546 --> 00:02:49.296 A:middle
receiving application equally

00:02:49.296 --> 00:02:51.256 A:middle
simply, by calling the

00:02:51.256 --> 00:02:52.876 A:middle
loadObject method on the

00:02:52.876 --> 00:02:56.826 A:middle
itemProvider, therein.

00:02:57.116 --> 00:02:59.956 A:middle
Remember that data transfer is

00:02:59.956 --> 00:03:01.886 A:middle
asynchronous and that your

00:03:01.886 --> 00:03:03.456 A:middle
completionHandlers will be

00:03:03.456 --> 00:03:05.836 A:middle
called on a nonmain cue.

00:03:06.196 --> 00:03:07.606 A:middle
So, if you're going to update

00:03:07.756 --> 00:03:10.616 A:middle
the UI with your received data,

00:03:11.246 --> 00:03:12.986 A:middle
be sure to dispatch back to the

00:03:12.986 --> 00:03:15.246 A:middle
main queue before you call UIKit

00:03:15.516 --> 00:03:15.956 A:middle
methods.

00:03:15.956 --> 00:03:16.906 A:middle
And you're going to see this

00:03:17.006 --> 00:03:18.526 A:middle
brought up a few times.

00:03:19.216 --> 00:03:21.376 A:middle
So, to show you how easy it is

00:03:21.376 --> 00:03:23.126 A:middle
to use NSItemProviders, we're

00:03:23.126 --> 00:03:24.576 A:middle
going to start with a demo.

00:03:24.676 --> 00:03:24.896 A:middle
Tanu.

00:03:26.516 --> 00:03:32.776 A:middle
[ Applause ]

00:03:33.276 --> 00:03:34.346 A:middle
&gt;&gt; Good morning, everyone.

00:03:35.116 --> 00:03:36.436 A:middle
You've now heard of drag and

00:03:36.436 --> 00:03:38.186 A:middle
drop and NSItemProviders.

00:03:38.946 --> 00:03:39.866 A:middle
But now, you're probably

00:03:39.866 --> 00:03:41.486 A:middle
wondering how to use these in

00:03:41.486 --> 00:03:42.016 A:middle
your own apps.

00:03:42.946 --> 00:03:44.616 A:middle
My name is Tanu Singhal, and

00:03:44.616 --> 00:03:46.466 A:middle
I'll show you a simple demo that

00:03:46.466 --> 00:03:47.806 A:middle
will help you get started with

00:03:48.016 --> 00:03:48.946 A:middle
NSItemProviders.

00:04:01.556 --> 00:04:03.766 A:middle
We have an app, here, that has a

00:04:03.766 --> 00:04:05.196 A:middle
list of customers for our

00:04:05.246 --> 00:04:05.766 A:middle
product.

00:04:05.766 --> 00:04:08.156 A:middle
Now, I met some new people who

00:04:08.156 --> 00:04:09.796 A:middle
are also interested in trying

00:04:09.796 --> 00:04:10.646 A:middle
out this product.

00:04:11.156 --> 00:04:12.716 A:middle
So, I noted their names down in

00:04:12.716 --> 00:04:13.326 A:middle
Reminders.

00:04:14.506 --> 00:04:16.546 A:middle
It would be nice if could drag a

00:04:16.546 --> 00:04:19.306 A:middle
name and drop it into my app.

00:04:19.816 --> 00:04:20.836 A:middle
So, how do we do this?

00:04:22.006 --> 00:04:22.736 A:middle
Let's look at the

00:04:22.736 --> 00:04:24.316 A:middle
TableViewController for our

00:04:24.316 --> 00:04:25.766 A:middle
Contacts app.

00:04:26.556 --> 00:04:28.716 A:middle
Before I start typing I want you

00:04:28.716 --> 00:04:30.496 A:middle
to know that we made the sample

00:04:30.496 --> 00:04:31.846 A:middle
code for this available on the

00:04:31.846 --> 00:04:32.766 A:middle
developer website.

00:04:33.166 --> 00:04:34.316 A:middle
So, you don't have to worry

00:04:34.316 --> 00:04:35.716 A:middle
about jotting down everything,

00:04:35.716 --> 00:04:36.166 A:middle
right now.

00:04:36.956 --> 00:04:41.096 A:middle
In the TableViewController, I'll

00:04:41.246 --> 00:04:42.686 A:middle
add a TableViewDropDelegate.

00:04:44.036 --> 00:04:45.616 A:middle
Let's also set this delegate.

00:04:45.726 --> 00:04:49.516 A:middle
You may have heard of the

00:04:49.516 --> 00:04:51.516 A:middle
TableViewDropDelegate in

00:04:51.516 --> 00:04:52.356 A:middle
previous sessions.

00:04:53.046 --> 00:04:54.956 A:middle
But if you haven't, then don't

00:04:54.956 --> 00:04:55.316 A:middle
worry.

00:04:55.666 --> 00:04:57.636 A:middle
Because for now, we only need to

00:04:57.636 --> 00:04:59.416 A:middle
implement one method called

00:04:59.416 --> 00:05:00.956 A:middle
TableView performDropWith

00:05:00.956 --> 00:05:01.636 A:middle
coordinator.

00:05:02.196 --> 00:05:05.456 A:middle
In this method, I'll iterate

00:05:05.456 --> 00:05:08.206 A:middle
over the drag items provided by

00:05:08.206 --> 00:05:09.126 A:middle
the ItemProvider.

00:05:09.496 --> 00:05:10.726 A:middle
Sorry, the dragItems provider by

00:05:10.726 --> 00:05:11.396 A:middle
the coordinator.

00:05:11.856 --> 00:05:15.536 A:middle
Now, each dragItem has its own

00:05:15.536 --> 00:05:16.426 A:middle
itemProvider.

00:05:16.426 --> 00:05:18.796 A:middle
And we can check whether the

00:05:18.956 --> 00:05:20.786 A:middle
itemProvider can load objects of

00:05:20.786 --> 00:05:21.556 A:middle
a certain type.

00:05:22.466 --> 00:05:23.646 A:middle
So, I'm going to check if the

00:05:23.646 --> 00:05:25.576 A:middle
itemProvider can load a string.

00:05:26.256 --> 00:05:27.696 A:middle
For that, I'll call the

00:05:27.696 --> 00:05:29.216 A:middle
canLoadObject method.

00:05:30.246 --> 00:05:32.836 A:middle
If it can load it, then I'll

00:05:32.836 --> 00:05:34.506 A:middle
call the loadObject method.

00:05:34.636 --> 00:05:36.796 A:middle
And the completionHandler of

00:05:36.796 --> 00:05:39.086 A:middle
this loadObject method will give

00:05:39.086 --> 00:05:40.866 A:middle
me an object which will be a

00:05:40.866 --> 00:05:43.146 A:middle
string that I can use to update

00:05:43.146 --> 00:05:45.226 A:middle
my data models, as well as my

00:05:45.226 --> 00:05:45.476 A:middle
UI.

00:05:46.416 --> 00:05:50.206 A:middle
One thing to note is that the

00:05:50.206 --> 00:05:51.836 A:middle
completionHandler is on the

00:05:51.836 --> 00:05:52.756 A:middle
background thread.

00:05:53.496 --> 00:05:55.026 A:middle
So, if you want to make any

00:05:55.026 --> 00:05:56.456 A:middle
changes to your UI, then you

00:05:56.456 --> 00:05:57.756 A:middle
need to go back to the main

00:05:57.756 --> 00:05:58.986 A:middle
thread, and then make those

00:05:59.026 --> 00:05:59.516 A:middle
changes.

00:06:00.316 --> 00:06:03.886 A:middle
So, let me dispatch my main

00:06:03.886 --> 00:06:04.356 A:middle
queue.

00:06:05.226 --> 00:06:06.606 A:middle
And in the main thread I'll use

00:06:06.976 --> 00:06:09.226 A:middle
the string object, and I'll

00:06:09.226 --> 00:06:10.726 A:middle
insert it into the TableView.

00:06:11.936 --> 00:06:13.536 A:middle
This code is ready to run, now.

00:06:17.656 --> 00:06:19.116 A:middle
Wait just a moment.

00:06:19.816 --> 00:06:22.646 A:middle
And this time, I can drag a name

00:06:22.646 --> 00:06:24.746 A:middle
from Reminders and drop it into

00:06:24.746 --> 00:06:25.886 A:middle
my app.

00:06:31.386 --> 00:06:33.466 A:middle
The canLoadObject and LoadObject

00:06:33.466 --> 00:06:35.116 A:middle
methods can also be used for

00:06:35.166 --> 00:06:36.976 A:middle
other system types, like

00:06:36.976 --> 00:06:38.486 A:middle
attributed strings, URLs,

00:06:38.606 --> 00:06:40.116 A:middle
images, and even colors.

00:06:40.196 --> 00:06:42.126 A:middle
So, now that you've seen how

00:06:42.186 --> 00:06:44.256 A:middle
straightforward it is to handle

00:06:44.256 --> 00:06:46.566 A:middle
system objects in your using

00:06:46.566 --> 00:06:48.616 A:middle
itemProviders, I would encourage

00:06:48.686 --> 00:06:50.806 A:middle
all of you to try out these

00:06:50.806 --> 00:06:51.266 A:middle
APIs.

00:06:51.786 --> 00:06:53.556 A:middle
Up next, Dave will talk about

00:06:53.556 --> 00:06:54.816 A:middle
Progress and Cancellation.

00:06:58.516 --> 00:07:01.616 A:middle
[ Applause ]

00:07:02.116 --> 00:07:02.906 A:middle
&gt;&gt; Thank you, Tanu.

00:07:06.736 --> 00:07:08.636 A:middle
So, that covers the basics about

00:07:08.636 --> 00:07:10.196 A:middle
how to use NSItemProviders in

00:07:10.196 --> 00:07:10.966 A:middle
your application.

00:07:11.196 --> 00:07:12.116 A:middle
It was really simple.

00:07:12.866 --> 00:07:13.936 A:middle
Now, let's talk about progress

00:07:13.936 --> 00:07:14.676 A:middle
and cancellation.

00:07:16.096 --> 00:07:18.056 A:middle
When you retrieve data using

00:07:18.096 --> 00:07:20.936 A:middle
NSItemProviders, we return a

00:07:20.936 --> 00:07:22.926 A:middle
progress object to you that

00:07:23.536 --> 00:07:25.346 A:middle
allows you to track the progress

00:07:25.346 --> 00:07:27.056 A:middle
of data transfer as it occurs.

00:07:27.276 --> 00:07:30.436 A:middle
The progress object has two

00:07:30.436 --> 00:07:31.596 A:middle
interesting properties on it,

00:07:31.596 --> 00:07:32.726 A:middle
that you might want to observe.

00:07:33.556 --> 00:07:34.676 A:middle
The first, is the

00:07:34.676 --> 00:07:36.386 A:middle
fractionCompleted property,

00:07:36.696 --> 00:07:38.306 A:middle
which tells you from zero to

00:07:38.306 --> 00:07:40.116 A:middle
one, how much of the data has

00:07:40.116 --> 00:07:40.706 A:middle
been transferred.

00:07:41.446 --> 00:07:44.156 A:middle
And the second, is an isFinished

00:07:44.156 --> 00:07:46.196 A:middle
property that tells you that the

00:07:46.196 --> 00:07:47.156 A:middle
data transfer has been

00:07:47.156 --> 00:07:48.686 A:middle
completed, whether it is

00:07:48.686 --> 00:07:49.456 A:middle
successful or not.

00:07:51.286 --> 00:07:53.126 A:middle
You can use key value observing

00:07:53.126 --> 00:07:55.936 A:middle
to watch these two properties

00:07:56.196 --> 00:07:58.986 A:middle
and update your UI accordingly.

00:07:59.396 --> 00:08:00.896 A:middle
Such as by providing your own

00:08:00.936 --> 00:08:02.276 A:middle
progress indicator and

00:08:02.276 --> 00:08:03.966 A:middle
cancellation button.

00:08:05.296 --> 00:08:07.476 A:middle
There is a cancel method on the

00:08:07.476 --> 00:08:09.006 A:middle
progress object that will

00:08:09.006 --> 00:08:10.286 A:middle
immediately cancel the data

00:08:10.286 --> 00:08:11.206 A:middle
transfer, as well.

00:08:11.716 --> 00:08:14.536 A:middle
When you call he cancel method

00:08:14.746 --> 00:08:16.206 A:middle
on the return progress object,

00:08:16.816 --> 00:08:18.266 A:middle
your receiving application will

00:08:18.266 --> 00:08:20.306 A:middle
receive, will get a callback on

00:08:20.306 --> 00:08:22.156 A:middle
the completionHandler with an

00:08:22.196 --> 00:08:23.926 A:middle
error in it, regardless of

00:08:23.926 --> 00:08:24.936 A:middle
whether or not the source

00:08:24.936 --> 00:08:26.806 A:middle
application has cancelled their

00:08:27.086 --> 00:08:27.696 A:middle
data providing.

00:08:30.766 --> 00:08:32.956 A:middle
You get one progress object per

00:08:32.956 --> 00:08:33.876 A:middle
load request.

00:08:34.436 --> 00:08:36.056 A:middle
However, there's an overall

00:08:36.056 --> 00:08:37.736 A:middle
progress object that you can get

00:08:37.736 --> 00:08:39.916 A:middle
from the UIDropSession that

00:08:39.916 --> 00:08:42.286 A:middle
allows you to monitor and cancel

00:08:42.286 --> 00:08:44.756 A:middle
the entire remaining data

00:08:44.806 --> 00:08:46.126 A:middle
transfer in progress.

00:08:46.126 --> 00:08:49.716 A:middle
So, now that we've covered the

00:08:49.716 --> 00:08:51.596 A:middle
basics, let's talk about

00:08:51.596 --> 00:08:53.156 A:middle
maximizing compatibility.

00:08:53.656 --> 00:08:57.506 A:middle
You want your application to

00:08:57.786 --> 00:08:59.486 A:middle
provide data to as many other

00:08:59.486 --> 00:09:01.276 A:middle
applications on the system, as

00:09:01.276 --> 00:09:01.696 A:middle
possible.

00:09:02.886 --> 00:09:05.466 A:middle
And receive drops from as many

00:09:05.466 --> 00:09:06.836 A:middle
applications, as possible, as

00:09:06.836 --> 00:09:07.046 A:middle
well.

00:09:07.896 --> 00:09:10.836 A:middle
The key to understanding how to

00:09:10.836 --> 00:09:13.346 A:middle
maximize compatibility is

00:09:13.346 --> 00:09:15.136 A:middle
understanding uniform type

00:09:15.136 --> 00:09:15.826 A:middle
identifiers.

00:09:16.936 --> 00:09:18.306 A:middle
So, let's recap.

00:09:19.466 --> 00:09:22.466 A:middle
One NSItemProvider represents

00:09:22.466 --> 00:09:24.356 A:middle
one thing that the user is

00:09:24.356 --> 00:09:25.986 A:middle
dragging across the glass.

00:09:27.006 --> 00:09:29.186 A:middle
However, there can be multiple

00:09:29.186 --> 00:09:30.376 A:middle
representations that you can

00:09:30.376 --> 00:09:32.106 A:middle
make available for every item

00:09:32.106 --> 00:09:33.446 A:middle
that the user is dragging.

00:09:33.446 --> 00:09:35.596 A:middle
Let me give you an example.

00:09:36.666 --> 00:09:37.816 A:middle
If you're writing a vector

00:09:37.816 --> 00:09:39.476 A:middle
drawing program, for example,

00:09:40.106 --> 00:09:41.496 A:middle
you could offer a native file

00:09:41.496 --> 00:09:43.816 A:middle
format for best quality as the

00:09:43.816 --> 00:09:44.766 A:middle
thing that you're dragging.

00:09:46.126 --> 00:09:47.546 A:middle
But you might also offer

00:09:47.546 --> 00:09:51.056 A:middle
conversions to PDF, PNG, or even

00:09:51.056 --> 00:09:53.176 A:middle
JPG, so that you can drop this

00:09:53.176 --> 00:09:55.036 A:middle
item on a variety of destination

00:09:55.036 --> 00:09:55.746 A:middle
applications.

00:09:56.016 --> 00:09:59.386 A:middle
Uniform type identifiers allow

00:09:59.386 --> 00:10:01.666 A:middle
you to tag these representations

00:10:01.796 --> 00:10:02.786 A:middle
with unique strings that

00:10:02.786 --> 00:10:05.456 A:middle
identify the kinds of data that

00:10:05.456 --> 00:10:07.976 A:middle
you're putting up for the drag.

00:10:09.576 --> 00:10:11.046 A:middle
For a native file format, you

00:10:11.046 --> 00:10:12.256 A:middle
can define your own strings,

00:10:12.256 --> 00:10:12.766 A:middle
such as

00:10:12.766 --> 00:10:14.536 A:middle
com.yourcompany.vector-drawing.

00:10:15.786 --> 00:10:17.986 A:middle
And for commonly known types,

00:10:18.016 --> 00:10:21.326 A:middle
such as PDF and PNG, you can use

00:10:21.416 --> 00:10:22.976 A:middle
the symbols defined in mobile

00:10:22.976 --> 00:10:28.206 A:middle
core services to tag them.

00:10:28.416 --> 00:10:30.186 A:middle
Now, fidelity order matters.

00:10:30.896 --> 00:10:32.776 A:middle
The order in which you register

00:10:32.876 --> 00:10:35.086 A:middle
your representations should

00:10:35.156 --> 00:10:36.746 A:middle
correspond to the order of

00:10:36.746 --> 00:10:38.986 A:middle
quality that you're making

00:10:38.986 --> 00:10:40.446 A:middle
available to the destination.

00:10:41.266 --> 00:10:42.766 A:middle
Usually, the highest fidelity

00:10:42.766 --> 00:10:43.916 A:middle
would be your internal data

00:10:43.916 --> 00:10:44.846 A:middle
representation type.

00:10:45.196 --> 00:10:47.886 A:middle
And then, followed by the next

00:10:47.886 --> 00:10:49.926 A:middle
high fidelity common type, and

00:10:49.926 --> 00:10:51.426 A:middle
so on and so forth.

00:10:52.016 --> 00:10:55.176 A:middle
Now, one tip to remember when

00:10:55.176 --> 00:10:57.046 A:middle
using type identifiers to

00:10:57.046 --> 00:10:59.336 A:middle
register your representations,

00:10:59.856 --> 00:11:03.216 A:middle
is that there are uniform type

00:11:03.216 --> 00:11:04.926 A:middle
identifiers that correspond to

00:11:04.926 --> 00:11:06.356 A:middle
abstract types.

00:11:06.536 --> 00:11:09.626 A:middle
Such as data, or plain text, or

00:11:09.656 --> 00:11:10.096 A:middle
image.

00:11:11.516 --> 00:11:12.926 A:middle
Avoid these.

00:11:13.786 --> 00:11:16.916 A:middle
Instead, use concrete data types

00:11:17.406 --> 00:11:18.906 A:middle
that help the consumer of your

00:11:18.906 --> 00:11:21.476 A:middle
data interpret the bytes that

00:11:21.476 --> 00:11:22.486 A:middle
you're going to send over to

00:11:22.486 --> 00:11:22.716 A:middle
them.

00:11:23.736 --> 00:11:25.226 A:middle
So, for example, use

00:11:25.226 --> 00:11:26.926 A:middle
utf8-plain-text, instead of

00:11:27.156 --> 00:11:28.236 A:middle
plain-text.

00:11:28.946 --> 00:11:30.556 A:middle
Or probably .png instead of

00:11:30.556 --> 00:11:32.516 A:middle
image, so that the receiver can

00:11:32.516 --> 00:11:33.386 A:middle
interpret your data.

00:11:35.716 --> 00:11:37.436 A:middle
Of course, for your private type

00:11:37.436 --> 00:11:38.616 A:middle
identifier, you're free to

00:11:38.616 --> 00:11:40.326 A:middle
define your own data types and

00:11:40.326 --> 00:11:40.996 A:middle
byte layouts.

00:11:43.576 --> 00:11:46.596 A:middle
So, you've seen how these

00:11:46.596 --> 00:11:48.536 A:middle
multiple representations allow

00:11:48.536 --> 00:11:50.196 A:middle
you to maximize compatibility.

00:11:50.906 --> 00:11:52.396 A:middle
But you didn't see any of this

00:11:52.536 --> 00:11:54.416 A:middle
type identifiers being used in

00:11:54.416 --> 00:11:56.016 A:middle
our initial example code of

00:11:56.076 --> 00:11:58.126 A:middle
creating NSItemProviders.

00:11:58.446 --> 00:11:59.636 A:middle
So, how did this work together?

00:12:01.376 --> 00:12:04.196 A:middle
This is where we talk about

00:12:04.196 --> 00:12:05.986 A:middle
creating model classes that

00:12:05.986 --> 00:12:07.496 A:middle
harness the power of both

00:12:07.496 --> 00:12:08.786 A:middle
multiple representations for

00:12:08.786 --> 00:12:09.566 A:middle
compatibility.

00:12:10.416 --> 00:12:12.006 A:middle
And the simplicity of using

00:12:12.006 --> 00:12:13.516 A:middle
objects to initialize

00:12:13.516 --> 00:12:14.346 A:middle
itemProviders.

00:12:15.266 --> 00:12:19.366 A:middle
To create model classes that

00:12:19.366 --> 00:12:21.246 A:middle
work well with drag and drop,

00:12:21.366 --> 00:12:23.676 A:middle
we're going to talk about two

00:12:24.276 --> 00:12:26.466 A:middle
protocols that help you to do

00:12:26.466 --> 00:12:26.696 A:middle
this.

00:12:27.396 --> 00:12:29.556 A:middle
NSItemProviderReading and

00:12:29.556 --> 00:12:30.806 A:middle
NSItemProviderWriting.

00:12:32.036 --> 00:12:32.966 A:middle
Let's talk about the writing

00:12:32.966 --> 00:12:33.716 A:middle
protocol, first.

00:12:34.756 --> 00:12:36.946 A:middle
NSItemProviderWriting exports

00:12:36.946 --> 00:12:39.546 A:middle
data from your model object and

00:12:40.256 --> 00:12:43.246 A:middle
NSItemProviderReading imports

00:12:43.246 --> 00:12:45.406 A:middle
data and creates a model object

00:12:45.816 --> 00:12:47.226 A:middle
from a representation.

00:12:47.776 --> 00:12:52.336 A:middle
And by adopting these protocols,

00:12:52.666 --> 00:12:54.716 A:middle
you can maintain the conversion

00:12:54.716 --> 00:12:56.836 A:middle
between your model objects and

00:12:56.836 --> 00:12:58.446 A:middle
multiple representations with

00:12:58.446 --> 00:13:02.546 A:middle
your model object and not with

00:13:04.236 --> 00:13:04.706 A:middle
the UI code.

00:13:05.046 --> 00:13:06.216 A:middle
So, let's take a look at

00:13:06.216 --> 00:13:07.326 A:middle
NSItemProviderWriting.

00:13:07.446 --> 00:13:10.796 A:middle
This is what it looks like.

00:13:11.806 --> 00:13:13.476 A:middle
There are only two things that

00:13:13.476 --> 00:13:15.766 A:middle
you need to implement to conform

00:13:15.766 --> 00:13:16.476 A:middle
to this protocol.

00:13:17.356 --> 00:13:18.796 A:middle
The first is a

00:13:18.796 --> 00:13:21.036 A:middle
writableTypeIdentifiersForItem

00:13:21.036 --> 00:13:22.236 A:middle
Provider property.

00:13:23.046 --> 00:13:24.696 A:middle
This is the list of the type

00:13:24.696 --> 00:13:26.516 A:middle
identifiers that you can export

00:13:27.116 --> 00:13:28.046 A:middle
in fidelity order.

00:13:28.466 --> 00:13:29.736 A:middle
Highest fidelity first.

00:13:30.276 --> 00:13:33.646 A:middle
And then, a loadData method

00:13:34.706 --> 00:13:35.986 A:middle
which will take that

00:13:35.986 --> 00:13:37.056 A:middle
typeIdentifier that has been

00:13:37.056 --> 00:13:38.286 A:middle
requested by the other

00:13:38.336 --> 00:13:39.186 A:middle
application.

00:13:39.266 --> 00:13:40.506 A:middle
Which will call a

00:13:40.756 --> 00:13:43.216 A:middle
completionHandler, either with

00:13:43.216 --> 00:13:44.256 A:middle
the data that you've made

00:13:44.256 --> 00:13:47.566 A:middle
available or with an error.

00:13:47.766 --> 00:13:49.266 A:middle
By implementing this protocol,

00:13:49.716 --> 00:13:52.746 A:middle
the UI code can look like this

00:13:54.296 --> 00:13:56.526 A:middle
and our framework code will do

00:13:56.526 --> 00:13:58.626 A:middle
the equivalent of this, for you.

00:13:59.136 --> 00:14:03.606 A:middle
All right.

00:14:03.776 --> 00:14:05.236 A:middle
Let's take a look at the reading

00:14:05.236 --> 00:14:05.636 A:middle
protocol.

00:14:06.036 --> 00:14:07.476 A:middle
The reading protocol is, of

00:14:07.476 --> 00:14:08.896 A:middle
course, the other end of the

00:14:08.896 --> 00:14:09.126 A:middle
pipe.

00:14:09.716 --> 00:14:13.906 A:middle
It too, has two things that you

00:14:13.906 --> 00:14:14.556 A:middle
need to implement.

00:14:15.436 --> 00:14:17.126 A:middle
The first is the list of

00:14:17.126 --> 00:14:19.756 A:middle
readable type identifiers in

00:14:19.756 --> 00:14:20.866 A:middle
fidelity order, also.

00:14:21.256 --> 00:14:23.386 A:middle
And the second, is that

00:14:23.386 --> 00:14:26.306 A:middle
initializer that will take a NS

00:14:26.306 --> 00:14:28.676 A:middle
data block, a NS data object,

00:14:29.336 --> 00:14:31.316 A:middle
which should be used to

00:14:32.306 --> 00:14:33.586 A:middle
initialize the instance of your

00:14:33.636 --> 00:14:33.976 A:middle
object.

00:14:39.046 --> 00:14:40.526 A:middle
When you implement this protocol

00:14:40.966 --> 00:14:42.736 A:middle
the UI code can look like this,

00:14:42.876 --> 00:14:43.866 A:middle
a canLoadObject.

00:14:44.636 --> 00:14:45.736 A:middle
You can pass it to your vector

00:14:45.736 --> 00:14:46.566 A:middle
drawing object.

00:14:47.586 --> 00:14:48.936 A:middle
And when you call the

00:14:48.936 --> 00:14:51.406 A:middle
loadObject, our framework code

00:14:51.406 --> 00:14:53.916 A:middle
will matchmake the two lists of

00:14:53.996 --> 00:14:55.286 A:middle
type identifiers, both from the

00:14:55.286 --> 00:14:56.486 A:middle
provider and the consumer.

00:14:56.996 --> 00:14:59.306 A:middle
To find the best match to ensure

00:14:59.306 --> 00:15:00.886 A:middle
that the highest quality data is

00:15:00.886 --> 00:15:02.116 A:middle
used to create an instance of

00:15:02.116 --> 00:15:03.046 A:middle
your object.

00:15:04.446 --> 00:15:07.096 A:middle
So, in short, to make model

00:15:07.096 --> 00:15:08.846 A:middle
classes that work well with drag

00:15:08.846 --> 00:15:10.926 A:middle
and drop, you should create,

00:15:11.106 --> 00:15:13.646 A:middle
these classes should conform to

00:15:13.696 --> 00:15:15.886 A:middle
NSItemProvider reading and

00:15:15.886 --> 00:15:16.846 A:middle
writing protocols.

00:15:17.816 --> 00:15:18.976 A:middle
Because these are Objective-C

00:15:18.976 --> 00:15:20.916 A:middle
protocols, your model classes

00:15:20.916 --> 00:15:22.306 A:middle
should also inherit from

00:15:22.306 --> 00:15:22.866 A:middle
NSObject.

00:15:23.286 --> 00:15:25.886 A:middle
And when you do this, you can

00:15:25.886 --> 00:15:27.486 A:middle
use your classes and your

00:15:27.486 --> 00:15:29.556 A:middle
objects wherever NSItemProvider

00:15:29.556 --> 00:15:31.886 A:middle
is supported, drag and drop, and

00:15:32.006 --> 00:15:34.526 A:middle
UIPasteConfiguration, and also,

00:15:34.526 --> 00:15:35.826 A:middle
with the new API in

00:15:36.176 --> 00:15:37.026 A:middle
UIPasteboard.

00:15:38.406 --> 00:15:39.726 A:middle
So, to show you how this is done

00:15:39.726 --> 00:15:41.496 A:middle
in code, I'm going to ask Tanu

00:15:41.746 --> 00:15:42.556 A:middle
to do another demo.

00:15:45.516 --> 00:15:48.576 A:middle
[ Applause ]

00:15:49.076 --> 00:15:49.806 A:middle
&gt;&gt; Hello, again.

00:15:50.776 --> 00:15:52.296 A:middle
In the previous demo, we learned

00:15:52.296 --> 00:15:54.296 A:middle
to load simple system objects

00:15:54.296 --> 00:15:54.926 A:middle
like strings.

00:15:55.606 --> 00:15:57.966 A:middle
Now, let's see how we can drag a

00:15:57.966 --> 00:15:59.886 A:middle
rich contact card from the

00:15:59.886 --> 00:16:02.176 A:middle
Contacts app and drop that into

00:16:02.176 --> 00:16:02.916 A:middle
our app.

00:16:07.626 --> 00:16:09.756 A:middle
To do this, I've created a class

00:16:10.186 --> 00:16:11.376 A:middle
called ContactCard.

00:16:12.266 --> 00:16:13.736 A:middle
This holds the name, phone

00:16:13.736 --> 00:16:15.436 A:middle
number, and photo for a contact.

00:16:15.436 --> 00:16:18.486 A:middle
Now, I'm going to go back into

00:16:18.486 --> 00:16:20.016 A:middle
the TableView controller, and

00:16:20.296 --> 00:16:22.076 A:middle
this is the performDrop method

00:16:22.076 --> 00:16:23.586 A:middle
that we implemented, before.

00:16:24.756 --> 00:16:26.716 A:middle
Last time, we were trying to

00:16:26.716 --> 00:16:27.556 A:middle
load a string.

00:16:28.186 --> 00:16:30.336 A:middle
Now, we want to load a contact

00:16:30.336 --> 00:16:30.736 A:middle
card.

00:16:31.686 --> 00:16:33.496 A:middle
So, I'll replace all instances

00:16:33.576 --> 00:16:35.806 A:middle
of NSSTring with ContactCard.

00:16:40.196 --> 00:16:41.596 A:middle
Since we are requesting a

00:16:41.596 --> 00:16:43.166 A:middle
contact card the

00:16:43.166 --> 00:16:44.896 A:middle
completionHandler will directly

00:16:44.896 --> 00:16:46.706 A:middle
give me a contact card object,

00:16:46.706 --> 00:16:49.286 A:middle
and I can use that to insert

00:16:49.286 --> 00:16:50.276 A:middle
into my TableView.

00:16:50.276 --> 00:16:52.926 A:middle
Now, this should have worked,

00:16:52.926 --> 00:16:53.256 A:middle
right?

00:16:53.966 --> 00:16:55.376 A:middle
But the reason we're getting

00:16:55.466 --> 00:16:57.336 A:middle
errors, here, is because the

00:16:57.336 --> 00:16:59.066 A:middle
NSItemProvider does not

00:16:59.066 --> 00:17:00.896 A:middle
recognize my ContactCard class.

00:17:01.356 --> 00:17:03.326 A:middle
So, we need to do a little work

00:17:03.326 --> 00:17:04.196 A:middle
to conform to the

00:17:04.196 --> 00:17:05.386 A:middle
NSItemProvider.

00:17:05.446 --> 00:17:08.596 A:middle
Let's look at the ContactCard

00:17:08.596 --> 00:17:09.126 A:middle
class, again.

00:17:09.126 --> 00:17:12.086 A:middle
And here, I'm going to implement

00:17:12.146 --> 00:17:14.016 A:middle
the NSItemProviderReading

00:17:14.016 --> 00:17:14.576 A:middle
protocol.

00:17:15.276 --> 00:17:16.136 A:middle
This will tell the

00:17:16.136 --> 00:17:18.456 A:middle
NSItemProvider that I can read

00:17:18.456 --> 00:17:19.736 A:middle
data that it provides.

00:17:21.216 --> 00:17:24.056 A:middle
Now, I need to specify the types

00:17:24.216 --> 00:17:26.026 A:middle
of identifiers that I can read.

00:17:26.506 --> 00:17:29.306 A:middle
My ContactCard class can read

00:17:29.306 --> 00:17:31.626 A:middle
either a vCard, or it can read

00:17:31.686 --> 00:17:33.056 A:middle
plain text.

00:17:33.366 --> 00:17:34.956 A:middle
Note that these need to be

00:17:35.026 --> 00:17:37.536 A:middle
specified in descending order of

00:17:37.576 --> 00:17:38.086 A:middle
fidelity.

00:17:38.936 --> 00:17:40.576 A:middle
If we specified plain text

00:17:40.686 --> 00:17:43.006 A:middle
first, then we would always get

00:17:43.006 --> 00:17:44.366 A:middle
called back for plain text.

00:17:44.866 --> 00:17:46.796 A:middle
Even when a more rich vCard type

00:17:46.796 --> 00:17:47.546 A:middle
was available.

00:17:48.016 --> 00:17:50.656 A:middle
So, after we've specified the

00:17:50.656 --> 00:17:52.916 A:middle
types we can read, we're going

00:17:53.036 --> 00:17:55.616 A:middle
to set up an initializer where

00:17:55.616 --> 00:17:56.926 A:middle
we'll actually read the data

00:17:57.036 --> 00:17:58.166 A:middle
from the itemProvider.

00:17:58.166 --> 00:18:01.196 A:middle
One of the arguments in this

00:18:01.246 --> 00:18:02.226 A:middle
initializer is the

00:18:02.266 --> 00:18:03.256 A:middle
typeIdentifier.

00:18:04.046 --> 00:18:06.036 A:middle
So, I can use that to figure out

00:18:06.386 --> 00:18:08.126 A:middle
what type of data I received.

00:18:08.556 --> 00:18:11.156 A:middle
If I got a vCard, I'll use a

00:18:11.206 --> 00:18:12.936 A:middle
helper method to set the phone

00:18:12.936 --> 00:18:14.246 A:middle
number, picture, and all the

00:18:14.246 --> 00:18:15.516 A:middle
other information I need.

00:18:15.516 --> 00:18:17.616 A:middle
If I just got plain text, I'm

00:18:18.076 --> 00:18:19.376 A:middle
going to set the name for my

00:18:19.376 --> 00:18:20.236 A:middle
contact card.

00:18:21.586 --> 00:18:24.376 A:middle
Now, when we run this, those

00:18:24.446 --> 00:18:25.576 A:middle
errors are resolved.

00:18:26.296 --> 00:18:26.926 A:middle
This is because the

00:18:26.926 --> 00:18:29.206 A:middle
NSItemProvider understands our

00:18:29.206 --> 00:18:29.926 A:middle
class, now.

00:18:30.506 --> 00:18:33.656 A:middle
So, this time, I can drag and

00:18:33.656 --> 00:18:35.056 A:middle
name from the Contacts app on

00:18:35.056 --> 00:18:37.196 A:middle
the right, and drop it into my

00:18:37.196 --> 00:18:37.306 A:middle
app.

00:18:38.116 --> 00:18:40.416 A:middle
As you can see, we loaded the

00:18:40.416 --> 00:18:41.926 A:middle
name, phone number, as well as

00:18:41.926 --> 00:18:43.406 A:middle
the photo for this contact.

00:18:44.026 --> 00:18:47.316 A:middle
Note that we can still drag out

00:18:47.316 --> 00:18:50.296 A:middle
plain text, like from the

00:18:50.356 --> 00:18:51.776 A:middle
Reminders app, again.

00:18:52.526 --> 00:18:54.246 A:middle
And this works, because our

00:18:54.836 --> 00:18:56.836 A:middle
ContactCard class not only

00:18:56.836 --> 00:18:58.446 A:middle
handles vCards, but it also

00:18:58.496 --> 00:18:59.496 A:middle
handles plain text.

00:18:59.706 --> 00:19:01.726 A:middle
So, this is what we wanted.

00:19:02.016 --> 00:19:03.396 A:middle
And our users really like this

00:19:03.436 --> 00:19:03.846 A:middle
feature.

00:19:04.566 --> 00:19:06.706 A:middle
But now, we have another feature

00:19:06.706 --> 00:19:07.176 A:middle
request.

00:19:07.856 --> 00:19:09.786 A:middle
They want the ability to drag

00:19:09.786 --> 00:19:12.276 A:middle
out contacts from our app and

00:19:12.276 --> 00:19:14.926 A:middle
drop it into other apps.

00:19:15.476 --> 00:19:16.796 A:middle
In order to implement that,

00:19:17.636 --> 00:19:20.336 A:middle
we'll have to conform to another

00:19:20.336 --> 00:19:21.826 A:middle
protocol called

00:19:21.826 --> 00:19:23.906 A:middle
NSItemProviderWriting protocol.

00:19:24.476 --> 00:19:28.166 A:middle
As part of this protocol, I'll

00:19:28.166 --> 00:19:31.376 A:middle
specify the types of identifiers

00:19:31.376 --> 00:19:32.116 A:middle
that I can write.

00:19:33.246 --> 00:19:34.866 A:middle
My class can again, write either

00:19:34.866 --> 00:19:38.366 A:middle
a vCard or plain text.

00:19:38.366 --> 00:19:40.756 A:middle
After this, we need to specify a

00:19:40.756 --> 00:19:41.796 A:middle
loadData method.

00:19:41.796 --> 00:19:45.096 A:middle
In this method, we'll create the

00:19:45.156 --> 00:19:47.506 A:middle
data that we want to provide to

00:19:47.506 --> 00:19:48.496 A:middle
the itemProvider.

00:19:49.126 --> 00:19:51.466 A:middle
So, based on the type

00:19:51.466 --> 00:19:52.846 A:middle
identifier, I can create

00:19:52.846 --> 00:19:55.326 A:middle
different types of data and I'll

00:19:55.326 --> 00:19:56.426 A:middle
just pass it to the

00:19:56.426 --> 00:19:57.476 A:middle
completionHandler.

00:19:57.996 --> 00:19:59.996 A:middle
Now, we have completed the

00:19:59.996 --> 00:20:02.106 A:middle
implementation for the

00:20:02.106 --> 00:20:03.976 A:middle
NSItemProviderWriting protocol.

00:20:05.466 --> 00:20:06.876 A:middle
There's just one last thing to

00:20:06.876 --> 00:20:07.126 A:middle
do.

00:20:07.126 --> 00:20:09.716 A:middle
We need to go back into our

00:20:09.716 --> 00:20:12.186 A:middle
TableViewController and tell the

00:20:12.186 --> 00:20:14.316 A:middle
TableView that it can be used to

00:20:14.316 --> 00:20:15.546 A:middle
drag out items.

00:20:16.526 --> 00:20:19.286 A:middle
To do this, I'll implement the

00:20:19.286 --> 00:20:20.606 A:middle
TableViewDragDelegate.

00:20:21.256 --> 00:20:23.456 A:middle
We need to set this delegate,

00:20:23.506 --> 00:20:23.986 A:middle
too.

00:20:24.536 --> 00:20:27.886 A:middle
And for this delegate, we'll

00:20:27.886 --> 00:20:30.186 A:middle
implement one method called

00:20:30.186 --> 00:20:31.556 A:middle
itemsForBeginning session.

00:20:32.116 --> 00:20:35.676 A:middle
In this method, I'm going to

00:20:35.676 --> 00:20:37.096 A:middle
create an itemProvider.

00:20:37.096 --> 00:20:39.586 A:middle
And you can see that I'm able to

00:20:39.586 --> 00:20:42.166 A:middle
pass a ContactCard object

00:20:42.236 --> 00:20:44.196 A:middle
directly to the itemProvider's

00:20:44.256 --> 00:20:45.056 A:middle
initializer.

00:20:45.586 --> 00:20:47.646 A:middle
This works only because we

00:20:47.646 --> 00:20:48.666 A:middle
implemented the

00:20:48.666 --> 00:20:50.356 A:middle
NSItemProviderWriting protocol.

00:20:51.686 --> 00:20:53.446 A:middle
Let's run this code, now.

00:21:02.126 --> 00:21:03.356 A:middle
And I would like to share a

00:21:03.356 --> 00:21:05.186 A:middle
contact with my colleague on

00:21:05.336 --> 00:21:05.916 A:middle
Messages.

00:21:07.206 --> 00:21:09.606 A:middle
So, let me drag out Dinesh's

00:21:09.606 --> 00:21:11.086 A:middle
contact and drop it.

00:21:11.876 --> 00:21:16.456 A:middle
As you can see, we were able to

00:21:16.806 --> 00:21:18.356 A:middle
send out the name, phone number,

00:21:18.356 --> 00:21:19.316 A:middle
as well as the photo.

00:21:19.676 --> 00:21:20.856 A:middle
Which is what we were trying to

00:21:20.856 --> 00:21:21.466 A:middle
accomplish.

00:21:21.756 --> 00:21:24.796 A:middle
So, now we have learned how the

00:21:24.796 --> 00:21:26.326 A:middle
NSItemProvider reading and

00:21:26.326 --> 00:21:30.326 A:middle
writing protocols can be used to

00:21:31.056 --> 00:21:33.556 A:middle
transfer data using custom class

00:21:33.556 --> 00:21:34.146 A:middle
objects.

00:21:35.036 --> 00:21:36.286 A:middle
These are really powerful

00:21:36.286 --> 00:21:38.186 A:middle
protocols and we think you'll

00:21:38.216 --> 00:21:39.806 A:middle
find them extremely useful when

00:21:39.806 --> 00:21:41.266 A:middle
you implement drag and drop in

00:21:41.266 --> 00:21:41.826 A:middle
your own apps.

00:21:42.416 --> 00:21:44.516 A:middle
Up next, Dave will cover some

00:21:44.516 --> 00:21:45.446 A:middle
advanced topics.

00:21:46.516 --> 00:21:51.956 A:middle
[ Applause ]

00:21:52.456 --> 00:21:53.176 A:middle
&gt;&gt; Thanks, Tanu.

00:21:54.396 --> 00:21:57.936 A:middle
So, cool. All right.

00:21:58.066 --> 00:21:59.206 A:middle
Next, we're going to cover some

00:21:59.206 --> 00:22:00.066 A:middle
advanced topics.

00:22:00.426 --> 00:22:01.966 A:middle
These are just some collection

00:22:01.966 --> 00:22:03.586 A:middle
of things that is very good to

00:22:03.586 --> 00:22:04.466 A:middle
know, when you're going to

00:22:04.466 --> 00:22:05.556 A:middle
polish your app so that it

00:22:05.556 --> 00:22:06.946 A:middle
shines in the drag-and-drop

00:22:06.946 --> 00:22:07.496 A:middle
environment.

00:22:09.226 --> 00:22:10.056 A:middle
The first thing we're going to

00:22:10.056 --> 00:22:11.616 A:middle
cover is data marshaling.

00:22:12.866 --> 00:22:14.016 A:middle
So, if you look at the

00:22:14.016 --> 00:22:16.706 A:middle
NSItemProvider API in iOS 11,

00:22:17.266 --> 00:22:18.556 A:middle
you'll discover that there are

00:22:18.556 --> 00:22:20.416 A:middle
three ways you can provide data.

00:22:21.546 --> 00:22:23.326 A:middle
You can provide data as a data

00:22:23.326 --> 00:22:24.416 A:middle
object, obviously.

00:22:25.406 --> 00:22:27.176 A:middle
But you can also provide data as

00:22:27.176 --> 00:22:30.306 A:middle
a file or a folder on your file

00:22:30.306 --> 00:22:30.776 A:middle
storage.

00:22:31.296 --> 00:22:35.126 A:middle
Third, you can provide the data

00:22:35.126 --> 00:22:37.296 A:middle
as a reference into a File

00:22:37.296 --> 00:22:37.796 A:middle
Provider.

00:22:38.226 --> 00:22:39.346 A:middle
We'll talk about File Providers

00:22:39.346 --> 00:22:39.816 A:middle
more, later.

00:22:42.316 --> 00:22:45.026 A:middle
Similarly, the receiver of the

00:22:45.026 --> 00:22:46.756 A:middle
data can retrieve data in three

00:22:46.756 --> 00:22:47.596 A:middle
different ways.

00:22:48.346 --> 00:22:50.526 A:middle
They can copy it as their own NS

00:22:50.526 --> 00:22:51.106 A:middle
data object.

00:22:52.306 --> 00:22:54.436 A:middle
They can copy a file or a folder

00:22:54.436 --> 00:22:55.326 A:middle
into their container.

00:22:55.866 --> 00:22:59.086 A:middle
And they can attempt to open the

00:22:59.086 --> 00:23:00.366 A:middle
file in place.

00:23:02.496 --> 00:23:04.936 A:middle
So, three ways to provide data,

00:23:04.936 --> 00:23:07.096 A:middle
and three ways to consume it.

00:23:07.376 --> 00:23:08.606 A:middle
What do you have to do to make

00:23:08.606 --> 00:23:10.286 A:middle
sure that data transfer happens

00:23:10.286 --> 00:23:11.716 A:middle
seamlessly, and that the data is

00:23:11.716 --> 00:23:12.866 A:middle
made available in the correct

00:23:12.926 --> 00:23:13.266 A:middle
format?

00:23:14.716 --> 00:23:15.856 A:middle
Well, the good news is you have

00:23:15.856 --> 00:23:16.466 A:middle
to do nothing.

00:23:16.736 --> 00:23:19.296 A:middle
We do it for you.

00:23:19.566 --> 00:23:21.406 A:middle
Data marshaling makes sure that

00:23:21.406 --> 00:23:22.836 A:middle
the provider of the data can

00:23:22.836 --> 00:23:24.196 A:middle
provide and consume the

00:23:24.196 --> 00:23:26.416 A:middle
information in the way that's

00:23:26.796 --> 00:23:29.016 A:middle
most convenient for them.

00:23:29.616 --> 00:23:31.666 A:middle
If you provide a file and then,

00:23:31.666 --> 00:23:33.536 A:middle
you consume it as a data, we

00:23:33.536 --> 00:23:34.886 A:middle
will read the file into an

00:23:34.886 --> 00:23:35.906 A:middle
NSData object for you.

00:23:36.416 --> 00:23:39.206 A:middle
If you provide an NSData and you

00:23:39.206 --> 00:23:40.656 A:middle
ask for a file copy, we'll write

00:23:40.656 --> 00:23:43.066 A:middle
it to file storage and give you

00:23:43.066 --> 00:23:44.226 A:middle
your L reference to it.

00:23:45.156 --> 00:23:47.246 A:middle
If they provided a folder and

00:23:47.246 --> 00:23:49.106 A:middle
you asked for NSData, we will

00:23:49.106 --> 00:23:50.276 A:middle
zip up the contents of the

00:23:50.276 --> 00:23:52.176 A:middle
folder and give you an NSData of

00:23:52.206 --> 00:23:52.896 A:middle
the zip file.

00:23:53.426 --> 00:23:56.826 A:middle
And if they provide a reference

00:23:56.826 --> 00:23:59.286 A:middle
to a file provider and you ask

00:23:59.286 --> 00:24:02.856 A:middle
for a file copy, we will call in

00:24:02.856 --> 00:24:03.916 A:middle
the promises for the file

00:24:03.916 --> 00:24:05.796 A:middle
provider and make a copy on your

00:24:05.796 --> 00:24:05.976 A:middle
behalf.

00:24:10.076 --> 00:24:10.326 A:middle
All right.

00:24:11.126 --> 00:24:12.906 A:middle
So, we've seen how progress and

00:24:12.906 --> 00:24:14.286 A:middle
cancellation worked from the

00:24:14.286 --> 00:24:14.986 A:middle
consumer side.

00:24:15.536 --> 00:24:17.036 A:middle
So, I want to talk a little bit

00:24:17.036 --> 00:24:18.026 A:middle
about how progress and

00:24:18.026 --> 00:24:19.926 A:middle
cancellation works on the

00:24:19.926 --> 00:24:20.616 A:middle
provider's side.

00:24:21.646 --> 00:24:22.946 A:middle
I'm going to show you a block of

00:24:22.946 --> 00:24:23.536 A:middle
code, here.

00:24:23.846 --> 00:24:25.096 A:middle
Don't worry that it's a dense

00:24:25.126 --> 00:24:26.086 A:middle
block of code, because I'm going

00:24:26.086 --> 00:24:27.206 A:middle
to highlight the parts that are

00:24:27.206 --> 00:24:28.426 A:middle
most important.

00:24:29.376 --> 00:24:30.966 A:middle
This is a loadData

00:24:31.776 --> 00:24:33.426 A:middle
implementation for our

00:24:33.426 --> 00:24:34.806 A:middle
NSItemProviderWriting.

00:24:36.156 --> 00:24:38.366 A:middle
In which you are going to use a

00:24:38.366 --> 00:24:39.466 A:middle
dataLoader object to

00:24:39.466 --> 00:24:40.986 A:middle
incrementally load data.

00:24:41.486 --> 00:24:44.966 A:middle
To provide progress and

00:24:44.966 --> 00:24:47.136 A:middle
cancellation support, the first

00:24:47.136 --> 00:24:48.076 A:middle
thing you have to do is create

00:24:48.076 --> 00:24:49.256 A:middle
your own progress object.

00:24:50.296 --> 00:24:51.446 A:middle
In this case, we're creating one

00:24:51.446 --> 00:24:53.086 A:middle
with a UnitCount of 100 as a

00:24:53.086 --> 00:24:53.606 A:middle
percentage.

00:24:54.156 --> 00:24:57.046 A:middle
On that progress object, you can

00:24:57.046 --> 00:24:58.686 A:middle
attach a cancellationHandler

00:24:58.966 --> 00:25:00.026 A:middle
that will be called when the

00:25:00.026 --> 00:25:01.526 A:middle
consumer of your data calls

00:25:01.646 --> 00:25:03.096 A:middle
cancel on their instance of the

00:25:03.096 --> 00:25:03.826 A:middle
progress object.

00:25:03.906 --> 00:25:06.656 A:middle
In this case, all we're doing is

00:25:06.656 --> 00:25:08.076 A:middle
setting a local variable from

00:25:08.076 --> 00:25:10.406 A:middle
true to false, which should stop

00:25:10.406 --> 00:25:12.596 A:middle
the dataLoader from loading the

00:25:12.596 --> 00:25:13.226 A:middle
next chunk.

00:25:14.166 --> 00:25:17.716 A:middle
As the dataLoader progresses,

00:25:17.716 --> 00:25:18.616 A:middle
you can update the

00:25:18.616 --> 00:25:20.066 A:middle
completedUnitCount on your

00:25:20.066 --> 00:25:22.186 A:middle
progress object to drive the

00:25:22.186 --> 00:25:23.216 A:middle
progress indicator on the

00:25:23.216 --> 00:25:23.626 A:middle
receiver.

00:25:24.666 --> 00:25:25.976 A:middle
And of course, you have to

00:25:25.976 --> 00:25:27.376 A:middle
return your own progress object

00:25:27.946 --> 00:25:30.026 A:middle
so that we can type it over to

00:25:30.116 --> 00:25:33.416 A:middle
the other side.

00:25:33.626 --> 00:25:33.866 A:middle
All right.

00:25:33.906 --> 00:25:34.626 A:middle
Switching gears, now.

00:25:35.066 --> 00:25:36.006 A:middle
We're going to talk about some

00:25:36.006 --> 00:25:40.576 A:middle
features that help you to polish

00:25:40.576 --> 00:25:43.576 A:middle
your data representations when

00:25:43.576 --> 00:25:45.596 A:middle
creating suites of apps.

00:25:45.596 --> 00:25:48.046 A:middle
So, we're going to talk about

00:25:48.046 --> 00:25:49.576 A:middle
Per-Representation Visibility.

00:25:50.076 --> 00:25:51.636 A:middle
Remember, you can provide

00:25:51.636 --> 00:25:53.026 A:middle
multiple representations of your

00:25:53.026 --> 00:25:54.616 A:middle
data in NSItemProvider.

00:25:55.726 --> 00:25:57.146 A:middle
You can restrict the visibility

00:25:57.146 --> 00:25:59.556 A:middle
of each representation to either

00:25:59.556 --> 00:26:01.316 A:middle
visible to only your source

00:26:01.316 --> 00:26:02.006 A:middle
application.

00:26:02.826 --> 00:26:04.816 A:middle
To the applications that are

00:26:04.816 --> 00:26:06.966 A:middle
assigned by your team, so in

00:26:06.966 --> 00:26:08.846 A:middle
your suite of apps, or to

00:26:08.846 --> 00:26:09.286 A:middle
everyone.

00:26:09.816 --> 00:26:12.506 A:middle
You can use this property to

00:26:12.506 --> 00:26:15.986 A:middle
hide private types that you are

00:26:15.986 --> 00:26:18.116 A:middle
rapidly maintaining with

00:26:18.116 --> 00:26:19.406 A:middle
versions of your application

00:26:19.406 --> 00:26:19.756 A:middle
suite.

00:26:20.056 --> 00:26:20.926 A:middle
So, you don't have to worry

00:26:20.926 --> 00:26:23.466 A:middle
about third parties serializing

00:26:23.466 --> 00:26:24.846 A:middle
your data to disc.

00:26:25.336 --> 00:26:29.586 A:middle
In a similar vein, you have a

00:26:29.756 --> 00:26:30.956 A:middle
team data property on

00:26:31.056 --> 00:26:31.836 A:middle
NSItemProvider.

00:26:32.656 --> 00:26:35.396 A:middle
This is an eight kilobyte data

00:26:35.396 --> 00:26:37.176 A:middle
block that you can attach

00:26:37.176 --> 00:26:38.866 A:middle
through an NSItemProvider.

00:26:39.186 --> 00:26:40.896 A:middle
They are only visible to other

00:26:40.896 --> 00:26:42.416 A:middle
applications in your team.

00:26:43.596 --> 00:26:45.706 A:middle
You can use this to improve your

00:26:45.706 --> 00:26:46.916 A:middle
UI in any way you see fit,

00:26:47.206 --> 00:26:48.226 A:middle
during a drag.

00:26:48.316 --> 00:26:50.016 A:middle
This is metadata, and can be

00:26:50.016 --> 00:26:51.556 A:middle
retrieved even before the user

00:26:51.556 --> 00:26:52.326 A:middle
lifts their finger.

00:26:56.016 --> 00:26:56.586 A:middle
All right.

00:26:56.956 --> 00:26:58.286 A:middle
There is a suggestedName

00:26:58.316 --> 00:27:00.246 A:middle
property on the NSItemProvider.

00:27:01.426 --> 00:27:02.916 A:middle
If you provide a string for the

00:27:02.916 --> 00:27:04.926 A:middle
suggested name, we will use it

00:27:04.926 --> 00:27:06.116 A:middle
as a file name when the

00:27:06.116 --> 00:27:08.646 A:middle
retriever writes your data to

00:27:08.946 --> 00:27:09.576 A:middle
disc.

00:27:10.596 --> 00:27:11.986 A:middle
This is especially useful, of

00:27:11.986 --> 00:27:13.076 A:middle
course, when you're providing an

00:27:13.076 --> 00:27:13.416 A:middle
NSData.

00:27:17.496 --> 00:27:18.836 A:middle
And the last property I want to

00:27:18.836 --> 00:27:20.706 A:middle
talk about is Preferred

00:27:21.006 --> 00:27:22.436 A:middle
Presentation Size.

00:27:23.186 --> 00:27:26.906 A:middle
This is a CG size property that

00:27:26.906 --> 00:27:28.646 A:middle
you can provide to give a hint

00:27:28.916 --> 00:27:31.126 A:middle
to the receiver about how big

00:27:31.126 --> 00:27:32.446 A:middle
your representation's going to

00:27:32.446 --> 00:27:34.096 A:middle
end up after they've laid out.

00:27:34.736 --> 00:27:36.326 A:middle
This is used, for example, by

00:27:36.326 --> 00:27:38.946 A:middle
Mail, to drop images into the

00:27:38.946 --> 00:27:40.626 A:middle
Mail Compose sheet, into the

00:27:40.626 --> 00:27:42.876 A:middle
destination layout, even before

00:27:42.876 --> 00:27:43.616 A:middle
the data arrives.

00:27:47.676 --> 00:27:49.016 A:middle
And finally, I'm going to talk

00:27:49.016 --> 00:27:50.546 A:middle
about File Providers.

00:27:51.076 --> 00:27:52.556 A:middle
So, File Providers is a whole

00:27:52.556 --> 00:27:53.626 A:middle
other topic, on its own.

00:27:54.456 --> 00:27:57.046 A:middle
But a short summary can be said

00:27:57.046 --> 00:27:57.746 A:middle
as follows.

00:27:58.246 --> 00:27:59.596 A:middle
A File Provider is an app

00:27:59.596 --> 00:28:00.116 A:middle
extension.

00:28:00.646 --> 00:28:03.576 A:middle
This app extension allows data

00:28:03.576 --> 00:28:05.196 A:middle
transfer from a network

00:28:05.196 --> 00:28:06.906 A:middle
download, for example, to

00:28:06.906 --> 00:28:08.486 A:middle
continue even if your main

00:28:08.486 --> 00:28:10.156 A:middle
application has been terminated.

00:28:11.416 --> 00:28:14.066 A:middle
For long running drags, this is

00:28:14.066 --> 00:28:15.126 A:middle
especially useful.

00:28:15.236 --> 00:28:17.886 A:middle
Because as the user waits for a

00:28:17.886 --> 00:28:19.686 A:middle
download to occur, they may

00:28:19.686 --> 00:28:21.486 A:middle
navigate away from your app, and

00:28:21.696 --> 00:28:23.566 A:middle
your app could get terminated.

00:28:25.336 --> 00:28:28.196 A:middle
If you provide a URL to a file

00:28:28.196 --> 00:28:29.356 A:middle
inside a File Provider

00:28:29.356 --> 00:28:31.956 A:middle
container, the File Provider

00:28:31.956 --> 00:28:33.456 A:middle
extension will continue to serve

00:28:33.456 --> 00:28:35.376 A:middle
the data transfer request, even

00:28:35.376 --> 00:28:36.886 A:middle
though your UI application is

00:28:36.886 --> 00:28:37.426 A:middle
terminated.

00:28:37.906 --> 00:28:39.226 A:middle
And that increases the chances

00:28:39.226 --> 00:28:40.196 A:middle
that your data is going to be

00:28:40.196 --> 00:28:41.196 A:middle
transferred successfully.

00:28:41.746 --> 00:28:45.906 A:middle
And as an added bonus, if you

00:28:46.226 --> 00:28:47.446 A:middle
create a File Provider that

00:28:47.446 --> 00:28:49.246 A:middle
appears in the file's app, we

00:28:49.626 --> 00:28:51.366 A:middle
will allow you to drag and drop

00:28:51.366 --> 00:28:52.856 A:middle
URLs that can be opened in

00:28:52.856 --> 00:28:53.236 A:middle
place.

00:28:53.736 --> 00:28:54.836 A:middle
Which means that multiple

00:28:54.836 --> 00:28:57.086 A:middle
applications can access that

00:28:57.086 --> 00:28:58.896 A:middle
same file, instead of getting

00:28:58.896 --> 00:28:59.566 A:middle
their own copy.

00:29:01.416 --> 00:29:02.436 A:middle
There's some really great

00:29:02.436 --> 00:29:03.806 A:middle
information available in the

00:29:03.806 --> 00:29:04.936 A:middle
following two sessions.

00:29:05.986 --> 00:29:06.966 A:middle
I highly recommend that you

00:29:06.966 --> 00:29:08.346 A:middle
attend them, if you are

00:29:08.346 --> 00:29:09.486 A:middle
interested in providing File

00:29:09.486 --> 00:29:11.636 A:middle
Providers in the context of drag

00:29:12.076 --> 00:29:14.566 A:middle
and drop.

00:29:14.746 --> 00:29:15.046 A:middle
All right.

00:29:16.596 --> 00:29:17.866 A:middle
Next, we're going to take a look

00:29:17.866 --> 00:29:18.996 A:middle
at what we can do with files in

00:29:18.996 --> 00:29:20.546 A:middle
drag and drop, by having Tanu do

00:29:20.546 --> 00:29:20.976 A:middle
another demo.

00:29:21.516 --> 00:29:25.996 A:middle
[ Applause ]

00:29:26.496 --> 00:29:27.246 A:middle
&gt;&gt; Hope you are ready for

00:29:27.246 --> 00:29:28.006 A:middle
another demo.

00:29:28.736 --> 00:29:30.976 A:middle
In the previous demo, we saw how

00:29:30.976 --> 00:29:32.606 A:middle
we could drag and drop simple

00:29:32.656 --> 00:29:34.196 A:middle
system objects, as well as

00:29:34.276 --> 00:29:35.526 A:middle
custom class objects.

00:29:36.206 --> 00:29:38.026 A:middle
Now, let's see how we can handle

00:29:38.116 --> 00:29:38.566 A:middle
files.

00:29:38.866 --> 00:29:40.856 A:middle
We'll look at our customer's

00:29:40.856 --> 00:29:41.266 A:middle
app, again.

00:29:41.266 --> 00:29:43.676 A:middle
And for some people, here, we

00:29:43.676 --> 00:29:45.796 A:middle
have additional data.

00:29:46.976 --> 00:29:48.416 A:middle
Like for Adam, we know what

00:29:48.486 --> 00:29:49.646 A:middle
products he's purchased.

00:29:49.906 --> 00:29:52.586 A:middle
Now, I would like to drag out

00:29:52.586 --> 00:29:55.416 A:middle
this file into another app and

00:29:55.416 --> 00:29:56.736 A:middle
potentially edit it, there.

00:29:57.976 --> 00:30:00.666 A:middle
To implement this, I'll look at

00:30:00.666 --> 00:30:02.796 A:middle
the ContactDetailsViewController

00:30:02.796 --> 00:30:03.946 A:middle
in my customer's app.

00:30:04.286 --> 00:30:09.696 A:middle
Over here, we will add a drag

00:30:09.696 --> 00:30:12.156 A:middle
interaction to the attachment

00:30:12.156 --> 00:30:13.496 A:middle
image that we just saw.

00:30:15.136 --> 00:30:17.386 A:middle
Let's also, implement the Drag

00:30:17.386 --> 00:30:18.426 A:middle
Interaction Delegate, right

00:30:18.426 --> 00:30:19.806 A:middle
here, because we have set the

00:30:19.806 --> 00:30:20.836 A:middle
delegate to self.

00:30:22.136 --> 00:30:23.426 A:middle
You may have heard of the drag

00:30:23.426 --> 00:30:24.816 A:middle
interaction delegate in previous

00:30:24.846 --> 00:30:25.326 A:middle
sessions.

00:30:26.156 --> 00:30:27.316 A:middle
If you're interested in learning

00:30:27.316 --> 00:30:28.756 A:middle
more about this delegate, I

00:30:28.756 --> 00:30:30.596 A:middle
would encourage you to check out

00:30:30.596 --> 00:30:32.536 A:middle
the video for Session 213 on

00:30:32.536 --> 00:30:33.516 A:middle
Mastering Drag and Drop.

00:30:33.586 --> 00:30:35.726 A:middle
For the purposes of this demo,

00:30:35.726 --> 00:30:37.516 A:middle
though, we'll only look at one

00:30:37.676 --> 00:30:39.356 A:middle
method, called itemsForBeginning

00:30:39.416 --> 00:30:39.886 A:middle
session.

00:30:40.436 --> 00:30:44.066 A:middle
In this method, we'll create a

00:30:44.066 --> 00:30:47.046 A:middle
new itemProvider, and on the

00:30:47.256 --> 00:30:50.316 A:middle
itemProvider we'll call a method

00:30:50.476 --> 00:30:50.676 A:middle
called

00:30:50.676 --> 00:30:52.346 A:middle
registerFileRepresentation.

00:30:52.606 --> 00:30:54.766 A:middle
This method takes four

00:30:54.816 --> 00:30:55.396 A:middle
arguments.

00:30:56.126 --> 00:30:58.176 A:middle
The first one is the type

00:30:58.176 --> 00:30:58.796 A:middle
identifier.

00:30:58.796 --> 00:31:01.136 A:middle
Our attachment file was actually

00:31:01.136 --> 00:31:01.676 A:middle
an image.

00:31:01.676 --> 00:31:03.576 A:middle
So, I've set the type identifier

00:31:03.666 --> 00:31:04.336 A:middle
to JPEG.

00:31:05.446 --> 00:31:07.176 A:middle
The second parameter is file

00:31:07.176 --> 00:31:07.766 A:middle
options.

00:31:08.576 --> 00:31:10.786 A:middle
This can be used to specify if

00:31:10.786 --> 00:31:12.756 A:middle
we want other apps to open our

00:31:12.756 --> 00:31:14.956 A:middle
file in place, or if we want

00:31:14.956 --> 00:31:15.856 A:middle
them to make a copy.

00:31:15.856 --> 00:31:17.986 A:middle
We would like them to open our

00:31:17.986 --> 00:31:19.716 A:middle
file in place, so we can see the

00:31:19.746 --> 00:31:20.496 A:middle
changes they make.

00:31:20.496 --> 00:31:23.206 A:middle
The third parameter is

00:31:23.206 --> 00:31:23.896 A:middle
visibility.

00:31:24.606 --> 00:31:26.296 A:middle
This can be your own process,

00:31:26.636 --> 00:31:28.236 A:middle
your team, or all.

00:31:28.376 --> 00:31:29.896 A:middle
I've just set it to all.

00:31:30.786 --> 00:31:32.176 A:middle
Finally, we have the

00:31:32.176 --> 00:31:33.196 A:middle
completionHandler.

00:31:33.196 --> 00:31:35.556 A:middle
And we are going to pass the URL

00:31:35.626 --> 00:31:38.026 A:middle
file into this

00:31:39.096 --> 00:31:40.586 A:middle
completionHandler.

00:31:40.586 --> 00:31:44.146 A:middle
So, let's get the URL, first.

00:31:44.146 --> 00:31:45.896 A:middle
Over here, I have a helper

00:31:45.896 --> 00:31:48.466 A:middle
method that grabs the URL for my

00:31:48.626 --> 00:31:50.356 A:middle
file from a File Provider.

00:31:50.556 --> 00:31:52.946 A:middle
I need to use a File Provider

00:31:53.086 --> 00:31:54.746 A:middle
only when I'm opening files in

00:31:54.806 --> 00:31:55.276 A:middle
place.

00:31:56.026 --> 00:31:57.646 A:middle
If I wanted other apps to make a

00:31:57.706 --> 00:31:59.796 A:middle
copy, then I do not need a File

00:31:59.796 --> 00:32:00.266 A:middle
Provider.

00:32:00.266 --> 00:32:01.596 A:middle
I could have just provided a

00:32:01.596 --> 00:32:02.546 A:middle
local URL.

00:32:03.036 --> 00:32:04.756 A:middle
We'll pass this URL to the

00:32:04.756 --> 00:32:06.106 A:middle
completionHandler.

00:32:06.106 --> 00:32:10.026 A:middle
Now, our itemProvider is set up.

00:32:10.026 --> 00:32:11.826 A:middle
And we can use this to create a

00:32:11.826 --> 00:32:12.766 A:middle
drag item.

00:32:13.296 --> 00:32:16.336 A:middle
With this, the code is ready to

00:32:16.336 --> 00:32:16.746 A:middle
run.

00:32:23.656 --> 00:32:26.076 A:middle
So, now I can drag out this

00:32:26.176 --> 00:32:26.606 A:middle
file.

00:32:27.966 --> 00:32:30.436 A:middle
And let me open another app

00:32:30.736 --> 00:32:31.566 A:middle
where I'll drop it.

00:32:38.216 --> 00:32:39.726 A:middle
So, we'll drag out the data,

00:32:40.226 --> 00:32:42.196 A:middle
drop it into a document editing

00:32:42.196 --> 00:32:42.276 A:middle
app.

00:32:42.996 --> 00:32:45.356 A:middle
And I'm concerned now, that Adam

00:32:45.356 --> 00:32:46.736 A:middle
is buying a lot of products from

00:32:46.736 --> 00:32:47.696 A:middle
our competitor.

00:32:48.166 --> 00:32:51.176 A:middle
So, let me highlight this and

00:32:51.176 --> 00:32:52.226 A:middle
save these changes.

00:32:52.826 --> 00:32:54.826 A:middle
So, since our document editing

00:32:54.826 --> 00:32:56.146 A:middle
app actually used the URL

00:32:56.146 --> 00:32:57.756 A:middle
provided by the customer's app,

00:32:58.546 --> 00:33:00.846 A:middle
you'll see that we got the same

00:33:00.846 --> 00:33:02.436 A:middle
changes back in our customer's

00:33:02.436 --> 00:33:02.506 A:middle
app.

00:33:03.516 --> 00:33:07.336 A:middle
[ Applause ]

00:33:07.836 --> 00:33:08.806 A:middle
Glad you like that.

00:33:10.216 --> 00:33:12.276 A:middle
We've now seen how to handle

00:33:12.276 --> 00:33:14.366 A:middle
system objects, custom class

00:33:14.366 --> 00:33:16.756 A:middle
objects, as well as files.

00:33:17.946 --> 00:33:19.466 A:middle
We have a wide range of APIs

00:33:19.466 --> 00:33:21.156 A:middle
that you can adopt.

00:33:21.156 --> 00:33:22.566 A:middle
And we look forward to seeing

00:33:22.726 --> 00:33:23.666 A:middle
how you use them.

00:33:23.896 --> 00:33:25.586 A:middle
Back to Dave, to summarize.

00:33:27.516 --> 00:33:30.896 A:middle
[ Applause ]

00:33:31.396 --> 00:33:32.516 A:middle
&gt;&gt; Thank you, Tanu.

00:33:34.076 --> 00:33:35.136 A:middle
All right.

00:33:35.326 --> 00:33:36.266 A:middle
Let's recap.

00:33:37.736 --> 00:33:39.286 A:middle
During this session, we've seen

00:33:39.516 --> 00:33:41.666 A:middle
how an NSItemProvider is

00:33:41.786 --> 00:33:43.586 A:middle
fundamental to the way data is

00:33:43.586 --> 00:33:45.716 A:middle
transferred between applications

00:33:46.096 --> 00:33:46.786 A:middle
in Drag and Drop.

00:33:48.196 --> 00:33:49.326 A:middle
We've seen how multiple

00:33:49.326 --> 00:33:50.846 A:middle
representations allow your

00:33:50.846 --> 00:33:52.866 A:middle
applications to maximize

00:33:52.866 --> 00:33:54.206 A:middle
compatibility with other

00:33:54.206 --> 00:33:55.026 A:middle
applications.

00:33:56.126 --> 00:33:57.936 A:middle
And we've seen how data is

00:33:57.936 --> 00:34:00.256 A:middle
transferred asynchronously with

00:34:00.326 --> 00:34:02.256 A:middle
progress in a cancellable

00:34:02.256 --> 00:34:02.936 A:middle
fashion.

00:34:05.316 --> 00:34:06.246 A:middle
We've also seen how

00:34:06.246 --> 00:34:07.906 A:middle
NSItemProvider reading and

00:34:07.906 --> 00:34:09.426 A:middle
writing protocols allow you to

00:34:09.426 --> 00:34:11.976 A:middle
make model classes that work

00:34:11.976 --> 00:34:13.966 A:middle
well with drag-and-drop UI code.

00:34:14.486 --> 00:34:18.476 A:middle
And how visibility and team data

00:34:18.726 --> 00:34:20.716 A:middle
allows you to create suites of

00:34:20.716 --> 00:34:22.256 A:middle
apps that work in especially

00:34:22.256 --> 00:34:24.906 A:middle
well together during drag and

00:34:26.336 --> 00:34:26.686 A:middle
drop.

00:34:26.686 --> 00:34:28.486 A:middle
And finally, we've seen how File

00:34:28.486 --> 00:34:30.766 A:middle
Providers afford you the ability

00:34:30.766 --> 00:34:32.986 A:middle
to open files in place as the

00:34:32.986 --> 00:34:36.816 A:middle
result of drag and drop.

00:34:36.936 --> 00:34:38.236 A:middle
For more information, please

00:34:38.236 --> 00:34:39.576 A:middle
visit our developer website,

00:34:39.576 --> 00:34:41.226 A:middle
Session 227.

00:34:41.716 --> 00:34:45.366 A:middle
And I highly encourage you to

00:34:45.366 --> 00:34:47.356 A:middle
attend the File Provider related

00:34:47.356 --> 00:34:50.026 A:middle
sessions, today and tomorrow, to

00:34:50.026 --> 00:34:51.196 A:middle
learn more about how to create

00:34:51.196 --> 00:34:53.026 A:middle
File Providers for your own

00:34:53.026 --> 00:34:53.636 A:middle
applications.

00:34:53.636 --> 00:34:56.036 A:middle
If you haven't seen the first

00:34:56.036 --> 00:34:57.806 A:middle
three sessions on Drag and Drop,

00:34:57.806 --> 00:34:58.986 A:middle
I highly recommend that you

00:34:58.986 --> 00:34:59.926 A:middle
review them on video.

00:35:00.426 --> 00:35:02.606 A:middle
Thank you, for your attention,

00:35:02.606 --> 00:35:03.976 A:middle
and have a great WWDC.

00:35:04.516 --> 00:35:08.500 A:middle
[ Applause ]