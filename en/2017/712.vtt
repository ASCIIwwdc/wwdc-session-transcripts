WEBVTT

00:00:23.516 --> 00:00:26.866 A:middle
[ Applause ]

00:00:27.366 --> 00:00:29.126 A:middle
&gt;&gt; Thank you and good morning.

00:00:30.016 --> 00:00:31.776 A:middle
This is Session 712, What's New

00:00:31.776 --> 00:00:32.735 A:middle
In Core Bluetooth.

00:00:33.326 --> 00:00:34.266 A:middle
My name is Craig Dooley.

00:00:34.266 --> 00:00:36.056 A:middle
I'm a Bluetooth Engineer here at

00:00:36.056 --> 00:00:36.356 A:middle
Apple.

00:00:36.926 --> 00:00:39.416 A:middle
I think we have some really good

00:00:39.416 --> 00:00:40.286 A:middle
stuff to talk to you about

00:00:40.286 --> 00:00:42.656 A:middle
today, so we'll start with a

00:00:42.846 --> 00:00:44.776 A:middle
brief introduction of where Core

00:00:44.776 --> 00:00:45.726 A:middle
Bluetooth is right now.

00:00:46.336 --> 00:00:47.306 A:middle
We'll talk about some of the

00:00:47.306 --> 00:00:48.906 A:middle
enhanced reliability features

00:00:48.906 --> 00:00:50.066 A:middle
that we built for this year.

00:00:50.516 --> 00:00:52.146 A:middle
Talk about platform support.

00:00:52.146 --> 00:00:53.916 A:middle
We announced watchOS support

00:00:53.916 --> 00:00:54.686 A:middle
this year and we're really

00:00:54.686 --> 00:00:56.446 A:middle
excited about that.

00:00:56.446 --> 00:00:57.806 A:middle
A new feature for this year is

00:00:57.806 --> 00:00:58.906 A:middle
L2CAP channels.

00:00:59.226 --> 00:01:00.146 A:middle
Then we'll go over some of the

00:00:59.226 --> 00:01:00.146 A:middle
Then we'll go over some of the

00:01:00.146 --> 00:01:01.336 A:middle
best practices we've learned

00:01:01.336 --> 00:01:03.076 A:middle
over the years, and finally

00:01:03.076 --> 00:01:05.256 A:middle
we'll do a real world example of

00:01:05.256 --> 00:01:06.336 A:middle
how to get the most out of Core

00:01:06.336 --> 00:01:06.776 A:middle
Bluetooth.

00:01:07.256 --> 00:01:09.996 A:middle
So I'd like to start with a

00:01:09.996 --> 00:01:11.036 A:middle
brief introduction.

00:01:11.256 --> 00:01:13.746 A:middle
Hopefully everybody knows but,

00:01:14.106 --> 00:01:15.396 A:middle
if you don't, Core Bluetooth is

00:01:15.396 --> 00:01:16.676 A:middle
our framework that we released

00:01:16.676 --> 00:01:19.116 A:middle
in 2011 to interact with

00:01:19.116 --> 00:01:20.956 A:middle
Bluetooth low energy peripherals

00:01:20.956 --> 00:01:21.796 A:middle
and accessories.

00:01:22.196 --> 00:01:25.226 A:middle
And since we initially shipped

00:01:25.226 --> 00:01:27.166 A:middle
the framework, we've just seen

00:01:27.166 --> 00:01:28.816 A:middle
amazing creativity come out of

00:01:28.816 --> 00:01:30.226 A:middle
accessory manufacturers and app

00:01:30.226 --> 00:01:30.836 A:middle
developers.

00:01:30.836 --> 00:01:32.066 A:middle
We're so pleased to see what

00:01:32.066 --> 00:01:34.836 A:middle
you've done with it.

00:01:35.026 --> 00:01:36.276 A:middle
So when we started off, we knew

00:01:36.276 --> 00:01:37.356 A:middle
that health and fitness and were

00:01:37.356 --> 00:01:38.576 A:middle
going to be big areas.

00:01:39.166 --> 00:01:40.256 A:middle
We've seen lots of things like

00:01:40.326 --> 00:01:42.946 A:middle
smart scales, running sensors,

00:01:43.526 --> 00:01:44.806 A:middle
fitness devices that you can

00:01:44.806 --> 00:01:45.456 A:middle
wear all day.

00:01:45.806 --> 00:01:47.976 A:middle
But the creativity has been

00:01:47.976 --> 00:01:48.666 A:middle
awesome to watch.

00:01:48.666 --> 00:01:50.146 A:middle
So things like toys and

00:01:50.146 --> 00:01:51.646 A:middle
connected accessories for kids.

00:01:52.016 --> 00:01:53.626 A:middle
We were really excited to see

00:01:53.626 --> 00:01:54.466 A:middle
the Swift Playground's

00:01:54.466 --> 00:01:56.096 A:middle
announcements this year, and

00:01:56.296 --> 00:01:57.396 A:middle
really making things more

00:01:57.396 --> 00:01:58.666 A:middle
interactive for children and

00:01:58.666 --> 00:02:00.796 A:middle
people who are first learning to

00:01:58.666 --> 00:02:00.796 A:middle
people who are first learning to

00:02:01.376 --> 00:02:01.476 A:middle
code.

00:02:01.686 --> 00:02:04.456 A:middle
And we love seeing how easy it

00:02:04.456 --> 00:02:06.036 A:middle
is for people to take things

00:02:06.036 --> 00:02:07.706 A:middle
like sensors or buttons or

00:02:07.706 --> 00:02:09.726 A:middle
switches and enable those

00:02:09.726 --> 00:02:11.146 A:middle
through their apps and enable

00:02:11.146 --> 00:02:11.976 A:middle
them wirelessly.

00:02:12.956 --> 00:02:14.516 A:middle
And then things have gone in

00:02:14.516 --> 00:02:16.646 A:middle
directions that we couldn't have

00:02:16.646 --> 00:02:17.806 A:middle
even imagined.

00:02:18.806 --> 00:02:21.026 A:middle
Things like connected goggles

00:02:21.026 --> 00:02:22.836 A:middle
with head-mounted displays, just

00:02:23.026 --> 00:02:24.346 A:middle
awesome creativity that's come

00:02:24.346 --> 00:02:25.166 A:middle
out of this community.

00:02:25.556 --> 00:02:26.936 A:middle
So I want to start this talk

00:02:26.936 --> 00:02:28.856 A:middle
just by saying thank you.

00:02:30.516 --> 00:02:32.546 A:middle
[ Applause ]

00:02:33.046 --> 00:02:34.746 A:middle
It's awesome for us to see what

00:02:34.746 --> 00:02:35.706 A:middle
you've been able to build with

00:02:35.706 --> 00:02:36.866 A:middle
this technology, and we can't

00:02:36.866 --> 00:02:39.176 A:middle
wait to see how you build even

00:02:39.176 --> 00:02:40.736 A:middle
better accessories going forward

00:02:40.736 --> 00:02:42.076 A:middle
with these enhancements we want

00:02:42.076 --> 00:02:45.766 A:middle
to talk to you about today.

00:02:45.886 --> 00:02:48.036 A:middle
And before we start, I just want

00:02:48.036 --> 00:02:49.246 A:middle
to mention there's a lot of

00:02:49.246 --> 00:02:50.336 A:middle
types of accessories that you

00:02:50.336 --> 00:02:51.466 A:middle
don't have to write any software

00:02:51.466 --> 00:02:51.766 A:middle
for.

00:02:52.226 --> 00:02:53.436 A:middle
So if you want to see things

00:02:53.436 --> 00:02:54.596 A:middle
like what the currently playing

00:02:54.596 --> 00:02:56.676 A:middle
music is on your device, you can

00:02:56.676 --> 00:02:57.676 A:middle
implement the Apple Media

00:02:57.676 --> 00:02:59.866 A:middle
Service and the device will take

00:02:59.866 --> 00:03:00.966 A:middle
care of all of that for you.

00:02:59.866 --> 00:03:00.966 A:middle
care of all of that for you.

00:03:01.376 --> 00:03:03.756 A:middle
Things like iBeacon or HID

00:03:03.756 --> 00:03:05.326 A:middle
devices, you don't have to write

00:03:05.326 --> 00:03:06.486 A:middle
any software for those.

00:03:06.486 --> 00:03:07.166 A:middle
And we've seen really good

00:03:07.166 --> 00:03:07.976 A:middle
adoption for those as well.

00:03:10.976 --> 00:03:12.576 A:middle
But today is going to be about

00:03:12.726 --> 00:03:14.536 A:middle
Core Bluetooth and how your

00:03:14.536 --> 00:03:15.666 A:middle
device can talk to your

00:03:15.666 --> 00:03:16.176 A:middle
accessory.

00:03:16.696 --> 00:03:19.136 A:middle
So stepping back to stage 1,

00:03:19.316 --> 00:03:21.416 A:middle
Bluetooth Low Energy has two

00:03:21.416 --> 00:03:21.866 A:middle
roles.

00:03:22.036 --> 00:03:23.446 A:middle
There's a central that can look

00:03:23.446 --> 00:03:25.166 A:middle
for devices that are around your

00:03:25.166 --> 00:03:27.396 A:middle
environment, and there are

00:03:27.396 --> 00:03:28.726 A:middle
peripherals that can beacon to

00:03:28.726 --> 00:03:30.236 A:middle
the world that they're there.

00:03:30.236 --> 00:03:31.946 A:middle
They can either send out data or

00:03:31.946 --> 00:03:32.926 A:middle
just let their presence be

00:03:32.926 --> 00:03:33.286 A:middle
known.

00:03:34.056 --> 00:03:35.166 A:middle
So if you have simple things

00:03:35.166 --> 00:03:36.106 A:middle
that you want to send out like

00:03:36.106 --> 00:03:37.616 A:middle
the current temperature or the

00:03:37.616 --> 00:03:42.286 A:middle
time, you can do that and you

00:03:42.286 --> 00:03:43.596 A:middle
can actually connect device to

00:03:43.596 --> 00:03:44.406 A:middle
device as well.

00:03:44.916 --> 00:03:46.716 A:middle
iOS and Mac devices are allowed

00:03:46.716 --> 00:03:47.936 A:middle
to be both the central and the

00:03:48.046 --> 00:03:48.676 A:middle
peripheral side of the

00:03:48.676 --> 00:03:48.976 A:middle
connection.

00:03:52.306 --> 00:03:53.706 A:middle
After you find this device

00:03:53.706 --> 00:03:54.696 A:middle
that's around you, you can

00:03:54.696 --> 00:03:56.296 A:middle
connect to your device and then

00:03:56.296 --> 00:03:57.186 A:middle
you have bidirectional

00:03:57.186 --> 00:03:59.156 A:middle
communication through what's

00:03:59.156 --> 00:04:00.236 A:middle
called the GATT Protocol.

00:03:59.156 --> 00:04:00.236 A:middle
called the GATT Protocol.

00:04:00.806 --> 00:04:02.226 A:middle
The GATT Protocol takes all of

00:04:02.226 --> 00:04:04.996 A:middle
your data and it exposes them in

00:04:04.996 --> 00:04:06.556 A:middle
a hierarchy called services and

00:04:06.556 --> 00:04:07.376 A:middle
characteristics.

00:04:08.176 --> 00:04:09.376 A:middle
We represent these in Core

00:04:09.376 --> 00:04:11.386 A:middle
Bluetooth as a CB service.

00:04:11.956 --> 00:04:13.956 A:middle
And a CB service can contain

00:04:13.956 --> 00:04:16.495 A:middle
characteristics inside of it.

00:04:16.745 --> 00:04:19.055 A:middle
Most of the time, your Apple

00:04:19.055 --> 00:04:19.926 A:middle
device is going to be the

00:04:19.926 --> 00:04:21.236 A:middle
central side of this connection

00:04:21.745 --> 00:04:22.456 A:middle
and you connect to your

00:04:22.456 --> 00:04:22.996 A:middle
peripheral.

00:04:24.436 --> 00:04:25.836 A:middle
But you can also do this in

00:04:25.836 --> 00:04:26.206 A:middle
reverse.

00:04:26.206 --> 00:04:27.666 A:middle
So one example of this is your

00:04:27.666 --> 00:04:30.116 A:middle
phone has its own GATT database

00:04:30.166 --> 00:04:31.426 A:middle
that exposes something like the

00:04:31.426 --> 00:04:32.436 A:middle
current time service.

00:04:32.836 --> 00:04:34.536 A:middle
So if it's useful for your

00:04:34.536 --> 00:04:35.816 A:middle
accessory to get the current

00:04:35.816 --> 00:04:38.356 A:middle
time, you can actually read that

00:04:38.586 --> 00:04:39.416 A:middle
off of your phone.

00:04:40.476 --> 00:04:41.556 A:middle
If you're looking to build these

00:04:41.556 --> 00:04:43.186 A:middle
type of iDirectional

00:04:43.186 --> 00:04:47.126 A:middle
communications on CB Central

00:04:47.126 --> 00:04:49.456 A:middle
manager, you can either retrieve

00:04:49.456 --> 00:04:50.746 A:middle
the connected peripherals if you

00:04:50.746 --> 00:04:52.336 A:middle
know that your device is already

00:04:52.336 --> 00:04:53.356 A:middle
connected by calling

00:04:53.356 --> 00:04:55.916 A:middle
retrieveConnectedPeripherals or

00:04:55.916 --> 00:04:57.486 A:middle
if you have an identifier for an

00:04:57.486 --> 00:04:58.406 A:middle
accessory you can call

00:04:58.406 --> 00:04:59.386 A:middle
retrievePeripherals

00:04:59.386 --> 00:05:01.376 A:middle
(withidentifiers) and get

00:04:59.386 --> 00:05:01.376 A:middle
(withidentifiers) and get

00:05:01.376 --> 00:05:02.776 A:middle
handled back to your accessory.

00:05:09.246 --> 00:05:10.406 A:middle
So let's move onto something new

00:05:10.406 --> 00:05:10.956 A:middle
for this year.

00:05:11.366 --> 00:05:14.066 A:middle
As I mentioned, the health and

00:05:14.066 --> 00:05:15.416 A:middle
fitness space has really popped

00:05:15.416 --> 00:05:16.996 A:middle
up since Core Bluetooth was

00:05:16.996 --> 00:05:17.786 A:middle
first announced.

00:05:18.246 --> 00:05:19.346 A:middle
And we find there's a whole

00:05:19.346 --> 00:05:20.736 A:middle
class of devices that want to be

00:05:20.736 --> 00:05:21.566 A:middle
connected all day.

00:05:22.526 --> 00:05:24.556 A:middle
Users want access to their data

00:05:25.006 --> 00:05:26.276 A:middle
as they're wearing it or

00:05:26.276 --> 00:05:28.336 A:middle
throughout the night, and you

00:05:28.336 --> 00:05:29.496 A:middle
want to make sure that your

00:05:29.496 --> 00:05:30.646 A:middle
connection to your Accessories

00:05:30.646 --> 00:05:31.296 A:middle
is reliable.

00:05:33.436 --> 00:05:35.156 A:middle
So on iOS we allow you to be a

00:05:35.156 --> 00:05:36.336 A:middle
background application.

00:05:36.736 --> 00:05:38.086 A:middle
You can continue connecting out

00:05:38.086 --> 00:05:39.546 A:middle
to your accessory or you can

00:05:39.546 --> 00:05:41.796 A:middle
continue beaconing to the world

00:05:41.796 --> 00:05:42.736 A:middle
that you have data that's

00:05:42.736 --> 00:05:44.716 A:middle
available by using these two

00:05:44.876 --> 00:05:45.856 A:middle
options in Xcode.

00:05:45.856 --> 00:05:48.076 A:middle
In you can either choose to use

00:05:48.076 --> 00:05:49.856 A:middle
your Bluetooth LE accessories or

00:05:49.856 --> 00:05:51.496 A:middle
act as a Bluetooth LE accessory

00:05:51.496 --> 00:05:52.466 A:middle
if a peripheral is the role that

00:05:52.466 --> 00:05:52.976 A:middle
you want to implement.

00:05:57.156 --> 00:05:58.346 A:middle
But we allow you to go even

00:05:58.346 --> 00:06:00.616 A:middle
further than that, so if you're

00:05:58.346 --> 00:06:00.616 A:middle
further than that, so if you're

00:06:00.616 --> 00:06:02.436 A:middle
acting as a central, you can do

00:06:02.436 --> 00:06:04.086 A:middle
things like Scan for new devices

00:06:04.086 --> 00:06:06.046 A:middle
by specifying a service or

00:06:06.046 --> 00:06:07.096 A:middle
Connect to an accessory you

00:06:07.096 --> 00:06:08.946 A:middle
already known about and even if

00:06:08.946 --> 00:06:10.596 A:middle
your application is Jetson from

00:06:10.596 --> 00:06:11.866 A:middle
the system from memory reasons,

00:06:12.326 --> 00:06:13.706 A:middle
Core Bluetooth will continue to

00:06:13.706 --> 00:06:15.166 A:middle
look for those devices for you.

00:06:17.216 --> 00:06:18.866 A:middle
If we were to do this in code,

00:06:19.226 --> 00:06:20.796 A:middle
at the time that you initialize

00:06:20.796 --> 00:06:22.566 A:middle
a CBCentralManager, you pass

00:06:22.566 --> 00:06:23.896 A:middle
this RestoreIdentifier.

00:06:24.286 --> 00:06:25.486 A:middle
This is just a string that

00:06:25.486 --> 00:06:26.856 A:middle
identifies your session that you

00:06:26.856 --> 00:06:28.076 A:middle
want to continue going.

00:06:29.536 --> 00:06:31.896 A:middle
And if we can complete those

00:06:31.896 --> 00:06:33.366 A:middle
actions on your behalf, like

00:06:33.366 --> 00:06:34.506 A:middle
connecting to your accessory,

00:06:34.506 --> 00:06:35.636 A:middle
even if it's a week after your

00:06:35.636 --> 00:06:37.516 A:middle
application was launched, we'll

00:06:37.516 --> 00:06:38.896 A:middle
relaunch your application and

00:06:38.896 --> 00:06:39.856 A:middle
give you this callback.

00:06:39.856 --> 00:06:41.506 A:middle
CentralManager will restore

00:06:41.506 --> 00:06:41.986 A:middle
state.

00:06:42.716 --> 00:06:44.326 A:middle
This is when we'll tell you what

00:06:44.326 --> 00:06:45.586 A:middle
the current state of the system

00:06:45.586 --> 00:06:47.056 A:middle
is so you can reconcile where we

00:06:47.056 --> 00:06:48.796 A:middle
are now versus the time that

00:06:48.796 --> 00:06:50.046 A:middle
your application was killed.

00:06:50.586 --> 00:06:52.066 A:middle
We'll tell you about the

00:06:52.066 --> 00:06:53.736 A:middle
currently connected peripherals

00:06:53.966 --> 00:06:55.296 A:middle
and we'll also tell you what we

00:06:55.296 --> 00:06:56.846 A:middle
are scanning for at the time

00:06:56.846 --> 00:06:58.386 A:middle
that you're relaunched.

00:06:59.356 --> 00:07:00.456 A:middle
Now there will be times where

00:06:59.356 --> 00:07:00.456 A:middle
Now there will be times where

00:07:00.456 --> 00:07:02.046 A:middle
these can be null as well, so

00:07:02.376 --> 00:07:03.996 A:middle
you have to be able to be

00:07:03.996 --> 00:07:06.456 A:middle
flexible with this and know that

00:07:06.456 --> 00:07:08.376 A:middle
you can rebuild your state after

00:07:08.376 --> 00:07:09.106 A:middle
you're relaunched.

00:07:11.596 --> 00:07:13.356 A:middle
Similarly, if you're acting as a

00:07:13.356 --> 00:07:16.236 A:middle
peripheral we can keep doing

00:07:16.236 --> 00:07:17.556 A:middle
things on your behalf even after

00:07:17.556 --> 00:07:18.926 A:middle
your application is no longer

00:07:18.926 --> 00:07:21.666 A:middle
and we'll relaunch you when

00:07:21.666 --> 00:07:22.606 A:middle
that's interesting for your

00:07:22.606 --> 00:07:23.186 A:middle
application.

00:07:23.966 --> 00:07:25.336 A:middle
So if you had a local service

00:07:25.336 --> 00:07:26.686 A:middle
published in the GATT database

00:07:27.026 --> 00:07:28.676 A:middle
or you're advertising a service,

00:07:28.676 --> 00:07:30.076 A:middle
we can keep those things going

00:07:30.076 --> 00:07:31.136 A:middle
and let you know when something

00:07:31.136 --> 00:07:34.336 A:middle
interesting happens.

00:07:34.446 --> 00:07:35.756 A:middle
Again, you have to start with a

00:07:35.756 --> 00:07:38.476 A:middle
restoration identifier, which

00:07:38.476 --> 00:07:39.906 A:middle
needs to be unique on the system

00:07:40.586 --> 00:07:41.986 A:middle
and we'll tell you the current

00:07:41.986 --> 00:07:43.166 A:middle
state of the system after you

00:07:43.166 --> 00:07:43.536 A:middle
come back.

00:07:44.146 --> 00:07:45.886 A:middle
We'll tell you either through

00:07:45.886 --> 00:07:47.566 A:middle
the restored state services key

00:07:48.866 --> 00:07:51.166 A:middle
what services are still

00:07:51.766 --> 00:07:53.286 A:middle
published on the system for you

00:07:54.106 --> 00:07:56.726 A:middle
and through the state

00:07:56.726 --> 00:07:59.006 A:middle
advertising data key we'll tell

00:07:59.006 --> 00:08:00.406 A:middle
you what we're advertising on

00:07:59.006 --> 00:08:00.406 A:middle
you what we're advertising on

00:08:00.406 --> 00:08:00.996 A:middle
your behalf.

00:08:04.006 --> 00:08:05.356 A:middle
So state preservation and

00:08:05.356 --> 00:08:06.576 A:middle
restoration that has actually

00:08:06.576 --> 00:08:07.606 A:middle
been in the system for a couple

00:08:07.606 --> 00:08:09.796 A:middle
of years, but this year we've

00:08:09.796 --> 00:08:11.456 A:middle
enhanced it to be even more

00:08:11.456 --> 00:08:12.726 A:middle
reliable for your application.

00:08:13.246 --> 00:08:15.506 A:middle
So we're excited to tell you,

00:08:15.906 --> 00:08:17.156 A:middle
even if there are Bluetooth

00:08:17.156 --> 00:08:19.386 A:middle
system level events that

00:08:19.386 --> 00:08:20.566 A:middle
previously would have stopped

00:08:20.566 --> 00:08:22.046 A:middle
these things from occurring on

00:08:22.046 --> 00:08:24.366 A:middle
your behalf, we'll keep doing

00:08:24.366 --> 00:08:25.046 A:middle
them for you now.

00:08:25.366 --> 00:08:26.796 A:middle
And even if a user reboots the

00:08:26.796 --> 00:08:28.576 A:middle
device, we can keep connecting

00:08:28.576 --> 00:08:29.256 A:middle
to your accessory.

00:08:30.516 --> 00:08:33.576 A:middle
[ Applause ]

00:08:34.076 --> 00:08:36.405 A:middle
Thank you.

00:08:36.606 --> 00:08:39.196 A:middle
And one thing we just want to

00:08:39.196 --> 00:08:41.746 A:middle
mention is that in order to keep

00:08:41.866 --> 00:08:43.155 A:middle
the power profile of these

00:08:43.155 --> 00:08:45.026 A:middle
features low, we actually do

00:08:45.026 --> 00:08:46.096 A:middle
have to do a lot of things in

00:08:46.096 --> 00:08:46.616 A:middle
Hardware.

00:08:47.266 --> 00:08:49.606 A:middle
So, we are limited in the number

00:08:49.606 --> 00:08:50.676 A:middle
of things we can look for at a

00:08:50.676 --> 00:08:52.286 A:middle
time, especially the number of

00:08:52.556 --> 00:08:54.006 A:middle
services we can scan for.

00:08:54.476 --> 00:08:55.876 A:middle
So the less things you ask for,

00:08:55.876 --> 00:08:57.926 A:middle
the better the chances that we

00:08:58.346 --> 00:08:59.716 A:middle
can keep your actions running

00:08:59.716 --> 00:09:00.436 A:middle
all the time.

00:08:59.716 --> 00:09:00.436 A:middle
all the time.

00:09:03.866 --> 00:09:05.566 A:middle
The other thing about this is

00:09:05.566 --> 00:09:08.276 A:middle
there's no UI to control what

00:09:08.276 --> 00:09:09.686 A:middle
applications are allowed to do

00:09:09.686 --> 00:09:11.696 A:middle
what in the background, so we

00:09:11.696 --> 00:09:12.956 A:middle
will stop doing things on your

00:09:12.956 --> 00:09:14.666 A:middle
app's behalf if the user either

00:09:14.906 --> 00:09:16.146 A:middle
force quits the app through the

00:09:16.146 --> 00:09:18.846 A:middle
task switcher or if the user

00:09:18.846 --> 00:09:20.266 A:middle
turns off Bluetooth manually

00:09:20.266 --> 00:09:22.336 A:middle
through Bluetooth settings we'll

00:09:22.336 --> 00:09:23.816 A:middle
stop doing background activities

00:09:23.816 --> 00:09:27.616 A:middle
on your behalf.

00:09:27.616 --> 00:09:28.696 A:middle
Another thing we've enhanced for

00:09:28.696 --> 00:09:29.846 A:middle
this year is Write Without

00:09:29.846 --> 00:09:30.406 A:middle
Response.

00:09:31.086 --> 00:09:32.206 A:middle
So previously you could call

00:09:32.206 --> 00:09:33.976 A:middle
Write Without Response, and as

00:09:33.976 --> 00:09:36.156 A:middle
the name implies you don't hear

00:09:36.156 --> 00:09:37.146 A:middle
anything back from that.

00:09:37.146 --> 00:09:39.736 A:middle
And there are times when your

00:09:39.736 --> 00:09:40.906 A:middle
writes would be dropped if you

00:09:40.906 --> 00:09:42.576 A:middle
pushed too many into the system.

00:09:43.036 --> 00:09:44.226 A:middle
And we had no way to tell you

00:09:44.226 --> 00:09:45.356 A:middle
that those packets were dropped

00:09:45.356 --> 00:09:46.446 A:middle
so if you were trying to send a

00:09:46.446 --> 00:09:48.036 A:middle
large amount of data you had to

00:09:48.036 --> 00:09:49.296 A:middle
come up with schemes to try to

00:09:49.296 --> 00:09:50.276 A:middle
make sure that that data was

00:09:50.276 --> 00:09:50.766 A:middle
reliable.

00:09:51.266 --> 00:09:53.516 A:middle
For this year, we've enhanced

00:09:53.516 --> 00:09:55.916 A:middle
CBPeripheral with a new property

00:09:55.916 --> 00:09:56.186 A:middle
called

00:09:56.186 --> 00:09:57.796 A:middle
canSendWriteWithoutResponse.

00:09:57.896 --> 00:09:59.666 A:middle
So if you call this before you

00:09:59.666 --> 00:10:00.926 A:middle
do a write and it and it returns

00:09:59.666 --> 00:10:00.926 A:middle
do a write and it and it returns

00:10:00.926 --> 00:10:02.776 A:middle
yes, that's our promise to you

00:10:02.776 --> 00:10:04.286 A:middle
that your data will not be

00:10:04.286 --> 00:10:05.796 A:middle
dropped in software before we

00:10:05.796 --> 00:10:06.826 A:middle
get a chance to send it to the

00:10:06.826 --> 00:10:07.576 A:middle
remote peripheral.

00:10:08.136 --> 00:10:10.906 A:middle
If that returns no, you'll also

00:10:10.906 --> 00:10:12.026 A:middle
get a delegate callback when

00:10:12.026 --> 00:10:14.126 A:middle
we're ready and we'll call back

00:10:14.126 --> 00:10:15.156 A:middle
peripheralIsReady

00:10:15.156 --> 00:10:16.466 A:middle
(toSendWritewithoutResponse.

00:10:18.516 --> 00:10:23.016 A:middle
[ Applause ]

00:10:23.516 --> 00:10:25.406 A:middle
Thank you.

00:10:25.586 --> 00:10:29.376 A:middle
Okay. So when we first launched

00:10:29.376 --> 00:10:32.106 A:middle
in 2011 we support macOS 10.7

00:10:32.106 --> 00:10:33.006 A:middle
and iOS 5.

00:10:34.076 --> 00:10:35.216 A:middle
We supported those this whole

00:10:35.216 --> 00:10:38.366 A:middle
time, and on tvOS 9 we added

00:10:38.366 --> 00:10:39.586 A:middle
support for tvOS.

00:10:39.896 --> 00:10:41.166 A:middle
This is actually the first time

00:10:41.166 --> 00:10:42.216 A:middle
we've been on stage to talk to

00:10:42.216 --> 00:10:45.126 A:middle
you about that so we'd like to

00:10:45.126 --> 00:10:46.366 A:middle
go over that as well.

00:10:46.776 --> 00:10:47.896 A:middle
And new for this year, we're

00:10:47.896 --> 00:10:49.106 A:middle
supporting watchOS.

00:10:49.426 --> 00:10:50.896 A:middle
We think this opens a lot of

00:10:50.896 --> 00:10:52.706 A:middle
cool opportunities, especially

00:10:52.706 --> 00:10:53.916 A:middle
in the health and fitness space

00:10:53.916 --> 00:10:55.476 A:middle
for places where it was

00:10:55.476 --> 00:10:56.926 A:middle
unpractical to bring your phone

00:10:56.926 --> 00:10:57.506 A:middle
previously.

00:11:00.516 --> 00:11:02.426 A:middle
So iOS and macOS were the first

00:11:02.426 --> 00:11:03.576 A:middle
platforms that we supported.

00:11:04.426 --> 00:11:05.926 A:middle
They support both foreground and

00:11:05.926 --> 00:11:07.616 A:middle
background applications, and

00:11:07.616 --> 00:11:08.896 A:middle
both central and peripheral mode

00:11:08.896 --> 00:11:09.456 A:middle
operation.

00:11:13.366 --> 00:11:15.736 A:middle
We allow you to go down to 15 ms

00:11:15.736 --> 00:11:16.866 A:middle
starting this year for your

00:11:16.866 --> 00:11:17.606 A:middle
connection interval.

00:11:17.836 --> 00:11:18.686 A:middle
So if you're trying to get the

00:11:18.686 --> 00:11:19.716 A:middle
most throughput to your

00:11:19.716 --> 00:11:21.316 A:middle
accessories or the lowest

00:11:21.316 --> 00:11:23.166 A:middle
latency, these are the platforms

00:11:23.166 --> 00:11:24.556 A:middle
that provide you the most

00:11:24.556 --> 00:11:25.556 A:middle
opportunities there.

00:11:26.126 --> 00:11:28.516 A:middle
And as I mentioned, state

00:11:28.516 --> 00:11:30.236 A:middle
preservation and restoration are

00:11:30.236 --> 00:11:32.296 A:middle
supported on iOS so you can try

00:11:32.616 --> 00:11:33.786 A:middle
-- maintain connections to your

00:11:33.786 --> 00:11:35.136 A:middle
accessories throughout the day

00:11:35.346 --> 00:11:36.686 A:middle
and even across major device

00:11:36.726 --> 00:11:38.156 A:middle
events like a system reboot.

00:11:41.636 --> 00:11:44.166 A:middle
tvOS was supported as of tvOS 9,

00:11:44.166 --> 00:11:46.126 A:middle
and it was interesting for us

00:11:46.126 --> 00:11:47.516 A:middle
because it was the first that we

00:11:47.516 --> 00:11:49.556 A:middle
wanted to support third party

00:11:49.556 --> 00:11:51.346 A:middle
accessories on a platform that

00:11:51.346 --> 00:11:52.776 A:middle
relies on Bluetooth as the main

00:11:52.776 --> 00:11:53.466 A:middle
system input.

00:11:53.466 --> 00:11:54.746 A:middle
So we have to coexist between

00:11:54.746 --> 00:11:56.346 A:middle
those two opportunities or those

00:11:56.346 --> 00:11:57.106 A:middle
two activities.

00:11:58.296 --> 00:11:59.856 A:middle
So in this case we had to put

00:12:00.066 --> 00:12:01.826 A:middle
some restrictions into the

00:12:01.826 --> 00:12:02.836 A:middle
system to make sure that we

00:12:02.836 --> 00:12:04.836 A:middle
don't interfere with core

00:12:04.836 --> 00:12:05.936 A:middle
operating things like the Apple

00:12:05.936 --> 00:12:06.556 A:middle
Siri Remote.

00:12:07.066 --> 00:12:09.926 A:middle
So we decided for accessory or

00:12:09.926 --> 00:12:12.936 A:middle
for tvOS, you can only act as a

00:12:12.936 --> 00:12:16.106 A:middle
Central device, and you can only

00:12:16.106 --> 00:12:18.686 A:middle
connect to two simultaneous

00:12:18.686 --> 00:12:19.226 A:middle
devices.

00:12:20.356 --> 00:12:21.266 A:middle
You can be paired with an

00:12:21.266 --> 00:12:22.906 A:middle
unlimited amount but you can

00:12:22.906 --> 00:12:24.006 A:middle
only use two at a time.

00:12:24.556 --> 00:12:28.986 A:middle
And we don't allow 15 ms

00:12:28.986 --> 00:12:30.646 A:middle
connection intervals on tvOS, we

00:12:30.646 --> 00:12:32.746 A:middle
set the minimum at 30 ms. So

00:12:33.256 --> 00:12:34.936 A:middle
this still allows you to get low

00:12:35.266 --> 00:12:37.376 A:middle
latency for your accessories and

00:12:37.376 --> 00:12:39.286 A:middle
good user interaction but it

00:12:39.286 --> 00:12:40.696 A:middle
leaves more system resources

00:12:40.696 --> 00:12:40.976 A:middle
available.

00:12:44.376 --> 00:12:45.736 A:middle
And when your application is

00:12:46.056 --> 00:12:47.676 A:middle
suspended or moved to the

00:12:47.676 --> 00:12:48.956 A:middle
background, we're going to

00:12:48.956 --> 00:12:50.206 A:middle
automatically disconnect those

00:12:50.206 --> 00:12:50.826 A:middle
accessories.

00:12:54.576 --> 00:12:56.756 A:middle
And similarly, to watch OS, tvOS

00:12:56.756 --> 00:12:58.586 A:middle
is a platform that relies on

00:12:58.586 --> 00:13:00.216 A:middle
Bluetooth for its core system

00:12:58.586 --> 00:13:00.216 A:middle
Bluetooth for its core system

00:13:00.216 --> 00:13:00.916 A:middle
functionality.

00:13:02.436 --> 00:13:03.966 A:middle
So we are allowing access to

00:13:03.966 --> 00:13:06.036 A:middle
Core Bluetooth whenever the

00:13:06.036 --> 00:13:07.596 A:middle
system allows your application

00:13:07.596 --> 00:13:08.086 A:middle
to be run.

00:13:08.556 --> 00:13:09.646 A:middle
So if a user is in your

00:13:09.646 --> 00:13:11.536 A:middle
application and directly

00:13:11.536 --> 00:13:12.966 A:middle
interacting with it, you can use

00:13:12.966 --> 00:13:13.576 A:middle
Core Bluetooth.

00:13:13.626 --> 00:13:14.286 A:middle
You can connect your

00:13:14.286 --> 00:13:16.046 A:middle
accessories, you can interact

00:13:16.046 --> 00:13:17.976 A:middle
with them, but this also means

00:13:17.976 --> 00:13:18.886 A:middle
that if you're allowed to run

00:13:18.886 --> 00:13:19.956 A:middle
for other reasons, like

00:13:19.956 --> 00:13:21.706 A:middle
complication updates or a

00:13:21.706 --> 00:13:24.076 A:middle
workout session, you can stay

00:13:24.076 --> 00:13:25.166 A:middle
connected to your accessories

00:13:25.166 --> 00:13:26.426 A:middle
and continue getting that data.

00:13:28.666 --> 00:13:31.326 A:middle
Similarly, if the tvOS -- you

00:13:31.326 --> 00:13:32.636 A:middle
can only act as a Central,

00:13:32.696 --> 00:13:33.906 A:middle
meaning that you can connect out

00:13:33.906 --> 00:13:35.986 A:middle
tier accessories but you can't

00:13:35.986 --> 00:13:38.016 A:middle
act as a peripheral to other

00:13:38.016 --> 00:13:38.596 A:middle
devices.

00:13:41.716 --> 00:13:45.076 A:middle
And the same two simultaneous

00:13:45.076 --> 00:13:47.246 A:middle
connection limitation is in

00:13:47.246 --> 00:13:50.626 A:middle
place on watchOS as on tvOS, and

00:13:50.666 --> 00:13:52.086 A:middle
the same connection interval

00:13:52.086 --> 00:13:52.736 A:middle
limitation.

00:13:56.456 --> 00:13:58.376 A:middle
Also, when the system decides

00:13:58.376 --> 00:13:59.656 A:middle
that your application needs to

00:13:59.656 --> 00:14:01.196 A:middle
be suspended, that's the

00:13:59.656 --> 00:14:01.196 A:middle
be suspended, that's the

00:14:01.196 --> 00:14:02.406 A:middle
indication to Core Bluetooth

00:14:02.676 --> 00:14:05.496 A:middle
that the accessories connected

00:14:05.496 --> 00:14:06.936 A:middle
on that application's behalf

00:14:07.996 --> 00:14:08.986 A:middle
should be disconnected.

00:14:12.596 --> 00:14:13.946 A:middle
And this is supported on Apple

00:14:13.946 --> 00:14:14.886 A:middle
Watch Series 2.

00:14:15.986 --> 00:14:18.286 A:middle
As I mentioned, we think this is

00:14:18.286 --> 00:14:20.386 A:middle
a really cool opportunity to see

00:14:20.386 --> 00:14:21.726 A:middle
accessories connected to Apple

00:14:21.726 --> 00:14:24.096 A:middle
Watch and can be used all day.

00:14:24.816 --> 00:14:26.806 A:middle
You can be in places where you

00:14:26.806 --> 00:14:27.996 A:middle
don't want to bring your phone

00:14:28.246 --> 00:14:31.336 A:middle
or places where it's just more

00:14:31.336 --> 00:14:32.496 A:middle
convenient to have data

00:14:32.496 --> 00:14:33.526 A:middle
available on your wrist.

00:14:33.526 --> 00:14:34.856 A:middle
So if you want things like

00:14:34.856 --> 00:14:35.896 A:middle
battery updates throughout the

00:14:35.896 --> 00:14:37.516 A:middle
day, your complication can

00:14:37.516 --> 00:14:38.976 A:middle
connect your accessory, get a

00:14:38.976 --> 00:14:40.616 A:middle
quick bit of data, and always be

00:14:40.616 --> 00:14:41.726 A:middle
up to date on the home screen.

00:14:46.216 --> 00:14:47.466 A:middle
New for this year, we're

00:14:47.466 --> 00:14:48.946 A:middle
allowing access to L2CAP

00:14:49.056 --> 00:14:49.486 A:middle
Channels.

00:14:51.536 --> 00:14:54.396 A:middle
So, an L2CAP channel at the

00:14:54.396 --> 00:14:56.596 A:middle
lowest level is just this stream

00:14:56.596 --> 00:14:59.466 A:middle
of data between two devices, and

00:14:59.466 --> 00:15:01.476 A:middle
it's actually the protocol that

00:14:59.466 --> 00:15:01.476 A:middle
it's actually the protocol that

00:15:01.476 --> 00:15:03.266 A:middle
we use under the covers for all

00:15:03.266 --> 00:15:04.346 A:middle
communication between these

00:15:04.346 --> 00:15:04.836 A:middle
devices.

00:15:05.266 --> 00:15:06.706 A:middle
So L2CAP Channels have been used

00:15:06.706 --> 00:15:08.106 A:middle
on the platform.

00:15:08.206 --> 00:15:09.896 A:middle
Since day one of Bluetooth this

00:15:09.896 --> 00:15:10.786 A:middle
is the first time that we're

00:15:10.786 --> 00:15:12.696 A:middle
opening up for your applications

00:15:12.696 --> 00:15:14.016 A:middle
to directly talk over these

00:15:14.016 --> 00:15:14.516 A:middle
channels.

00:15:17.576 --> 00:15:18.936 A:middle
It actually stands for the

00:15:18.936 --> 00:15:20.386 A:middle
Logical Link Control and

00:15:20.386 --> 00:15:23.856 A:middle
Adaptation Protocol, and the

00:15:23.856 --> 00:15:25.226 A:middle
support for dynamically

00:15:25.226 --> 00:15:26.986 A:middle
allocated connection or into

00:15:26.986 --> 00:15:28.866 A:middle
channels is new for Bluetooth

00:15:28.866 --> 00:15:30.636 A:middle
Core Spec 4.1.

00:15:34.426 --> 00:15:35.946 A:middle
So unlike all the other

00:15:35.946 --> 00:15:36.786 A:middle
interactions that you've done

00:15:36.786 --> 00:15:37.886 A:middle
with your accessories before

00:15:37.886 --> 00:15:39.546 A:middle
where you have to work through

00:15:39.546 --> 00:15:41.746 A:middle
the GATT Database to get your

00:15:42.526 --> 00:15:43.946 A:middle
data, L2CAP Channels allow you

00:15:43.946 --> 00:15:45.506 A:middle
to open a side channel and

00:15:45.506 --> 00:15:48.226 A:middle
directly read and write without

00:15:48.586 --> 00:15:50.736 A:middle
any framing limitations, packet

00:15:50.736 --> 00:15:51.826 A:middle
size limitations.

00:15:52.166 --> 00:15:53.376 A:middle
It's a direct way to talk

00:15:53.376 --> 00:15:55.956 A:middle
between your device and your

00:15:55.956 --> 00:15:56.546 A:middle
accessory.

00:16:00.236 --> 00:16:02.226 A:middle
So we think this API is very

00:16:02.546 --> 00:16:03.536 A:middle
simple to use.

00:16:04.026 --> 00:16:05.646 A:middle
If you have already connected to

00:16:05.646 --> 00:16:07.236 A:middle
a peripheral, all you have to do

00:16:07.236 --> 00:16:08.866 A:middle
is call openL2CAPChannel and

00:16:08.866 --> 00:16:11.076 A:middle
specify as the PSM, and you'll

00:16:11.556 --> 00:16:12.836 A:middle
get a callback data

00:16:12.836 --> 00:16:14.666 A:middle
openL2CAPChannel will hand you

00:16:14.666 --> 00:16:15.976 A:middle
back the object that represents

00:16:15.976 --> 00:16:16.436 A:middle
this channel.

00:16:19.086 --> 00:16:21.976 A:middle
So the PSM is a -- it's the

00:16:22.036 --> 00:16:24.946 A:middle
Protocol Service Multiplexer but

00:16:25.326 --> 00:16:26.636 A:middle
you should think of it as

00:16:26.636 --> 00:16:28.506 A:middle
analogous to say TCP port.

00:16:28.886 --> 00:16:30.116 A:middle
It's just a number that you give

00:16:30.116 --> 00:16:32.246 A:middle
to us that uniquely identifies

00:16:32.246 --> 00:16:34.096 A:middle
the service you want to open on

00:16:34.096 --> 00:16:35.126 A:middle
the peripheral side of the

00:16:35.126 --> 00:16:35.616 A:middle
connection.

00:16:37.926 --> 00:16:39.226 A:middle
And what's interesting about

00:16:39.226 --> 00:16:41.196 A:middle
this is that there are some

00:16:41.196 --> 00:16:43.026 A:middle
profiles that are published by

00:16:43.026 --> 00:16:44.686 A:middle
the Bluetooth SIG that have a

00:16:44.686 --> 00:16:45.926 A:middle
hard coded PSM.

00:16:46.136 --> 00:16:47.996 A:middle
So if you're trying to do things

00:16:47.996 --> 00:16:49.066 A:middle
like the Object Transfer

00:16:49.066 --> 00:16:51.286 A:middle
Protocol, the PSM will be known

00:16:51.286 --> 00:16:52.576 A:middle
to you even before you connect

00:16:52.576 --> 00:16:53.246 A:middle
to the device.

00:16:53.616 --> 00:16:56.676 A:middle
But in every other case, the PSM

00:16:56.806 --> 00:16:58.156 A:middle
is unique to the device you're

00:16:58.156 --> 00:16:59.786 A:middle
talking to, which means it's

00:16:59.786 --> 00:17:01.456 A:middle
locally assigned and can even be

00:16:59.786 --> 00:17:01.456 A:middle
locally assigned and can even be

00:17:01.456 --> 00:17:03.226 A:middle
reused by other applications.

00:17:04.296 --> 00:17:05.276 A:middle
So it's important that you

00:17:05.276 --> 00:17:07.195 A:middle
discover what PSM to connect to

00:17:07.415 --> 00:17:09.146 A:middle
before you try to open it.

00:17:10.486 --> 00:17:12.126 A:middle
What we've done to make this a

00:17:12.126 --> 00:17:13.935 A:middle
little bit simpler is we're

00:17:13.935 --> 00:17:15.465 A:middle
publishing a UUID that you can

00:17:15.465 --> 00:17:16.986 A:middle
use and put within your service

00:17:18.036 --> 00:17:20.026 A:middle
to help you specify what PSM to

00:17:20.026 --> 00:17:23.486 A:middle
open that's associated with your

00:17:23.486 --> 00:17:24.356 A:middle
CB service.

00:17:27.736 --> 00:17:29.346 A:middle
We're also opening L2CAP

00:17:29.346 --> 00:17:30.726 A:middle
Channels if you're acting as a

00:17:30.726 --> 00:17:31.246 A:middle
peripheral.

00:17:31.726 --> 00:17:34.286 A:middle
So if you want to have a L2CAP

00:17:34.396 --> 00:17:35.536 A:middle
Channel that's associated with

00:17:35.536 --> 00:17:37.286 A:middle
your service, you can call

00:17:37.286 --> 00:17:39.306 A:middle
publishL2CAPChannel and we will

00:17:39.306 --> 00:17:41.766 A:middle
return you what PSM was assigned

00:17:41.766 --> 00:17:43.516 A:middle
by the system in the callback

00:17:43.516 --> 00:17:44.466 A:middle
peripheralManger

00:17:44.466 --> 00:17:46.716 A:middle
didPublishL2CAPChannel.

00:17:48.456 --> 00:17:50.836 A:middle
Another thing we've allowed is

00:17:50.836 --> 00:17:52.546 A:middle
we allow you to specify whether

00:17:52.546 --> 00:17:54.516 A:middle
your L2CAP Channel requires

00:17:54.516 --> 00:17:56.246 A:middle
encryption or not.

00:17:56.386 --> 00:17:58.546 A:middle
So most of the time, the safe

00:17:58.546 --> 00:18:00.036 A:middle
bet is to say yes, I want

00:17:58.546 --> 00:18:00.036 A:middle
bet is to say yes, I want

00:18:00.036 --> 00:18:00.546 A:middle
encryption.

00:18:00.616 --> 00:18:01.766 A:middle
It protects you from things like

00:18:01.766 --> 00:18:03.276 A:middle
man-in-the-middle attacks, it

00:18:03.276 --> 00:18:04.586 A:middle
protects you from things like

00:18:04.586 --> 00:18:05.696 A:middle
people eavesdropping on the

00:18:05.696 --> 00:18:06.536 A:middle
packets that you're sending

00:18:06.536 --> 00:18:07.646 A:middle
between your two devices.

00:18:08.126 --> 00:18:09.996 A:middle
But there are time when you

00:18:09.996 --> 00:18:11.676 A:middle
might want to build more

00:18:11.676 --> 00:18:12.616 A:middle
advanced types of

00:18:12.616 --> 00:18:14.156 A:middle
authentication, like using

00:18:14.426 --> 00:18:16.486 A:middle
public key cryptography you

00:18:16.486 --> 00:18:17.866 A:middle
could build your own account

00:18:17.866 --> 00:18:20.706 A:middle
system and protect your data

00:18:20.706 --> 00:18:21.076 A:middle
that way.

00:18:24.056 --> 00:18:25.426 A:middle
So let's go through an example

00:18:25.426 --> 00:18:26.486 A:middle
of how you would actually

00:18:26.676 --> 00:18:27.936 A:middle
negotiate an L2CAP Channel

00:18:27.936 --> 00:18:29.026 A:middle
between two devices.

00:18:29.866 --> 00:18:31.096 A:middle
If you're acting as a

00:18:31.096 --> 00:18:34.076 A:middle
peripheral, you would ask the

00:18:34.076 --> 00:18:36.786 A:middle
system to publish an L2CAP

00:18:36.876 --> 00:18:37.196 A:middle
Channel.

00:18:38.256 --> 00:18:39.746 A:middle
Again you get to specify whether

00:18:39.746 --> 00:18:41.066 A:middle
this channel requires encryption

00:18:41.066 --> 00:18:41.536 A:middle
or not.

00:18:41.846 --> 00:18:42.836 A:middle
In this case we're going to say

00:18:42.836 --> 00:18:43.126 A:middle
true.

00:18:43.516 --> 00:18:44.836 A:middle
And when that's successful,

00:18:45.596 --> 00:18:46.386 A:middle
you'll get a callback

00:18:46.386 --> 00:18:47.116 A:middle
peripheralManager

00:18:47.116 --> 00:18:48.746 A:middle
didPublishL2CAPChannel.

00:18:48.746 --> 00:18:50.676 A:middle
And as I mentioned, we'll tell

00:18:50.676 --> 00:18:52.046 A:middle
you what PSM has been locally

00:18:52.046 --> 00:18:53.106 A:middle
assigned for your service.

00:18:54.216 --> 00:18:57.276 A:middle
So this is your opportunity to

00:18:57.276 --> 00:18:59.126 A:middle
make the PSM known to incoming

00:18:59.126 --> 00:19:01.486 A:middle
connections so that they can

00:18:59.126 --> 00:19:01.486 A:middle
connections so that they can

00:19:01.486 --> 00:19:03.956 A:middle
discover what channel to open

00:19:03.956 --> 00:19:04.836 A:middle
that's associated with your

00:19:04.836 --> 00:19:05.346 A:middle
service.

00:19:09.696 --> 00:19:11.516 A:middle
As a Central, you can read the

00:19:11.516 --> 00:19:12.956 A:middle
PSM and that's all the

00:19:12.956 --> 00:19:14.176 A:middle
information you need to actually

00:19:14.176 --> 00:19:14.816 A:middle
open that channel.

00:19:14.816 --> 00:19:15.796 A:middle
So now you can call

00:19:15.796 --> 00:19:17.866 A:middle
openL2CAPChannel with the PSM

00:19:17.866 --> 00:19:19.136 A:middle
that you read from the remote

00:19:19.136 --> 00:19:22.916 A:middle
device and you'll get the

00:19:22.916 --> 00:19:25.106 A:middle
callback didOpenL2CAPChannel.

00:19:28.726 --> 00:19:31.946 A:middle
So CB L2CAP Channel encapsulates

00:19:31.946 --> 00:19:33.816 A:middle
all the information you need to

00:19:33.816 --> 00:19:35.786 A:middle
know who you're talking to and

00:19:35.786 --> 00:19:37.286 A:middle
how you can talk to it.

00:19:37.486 --> 00:19:38.466 A:middle
In this case we tell you the

00:19:38.466 --> 00:19:39.536 A:middle
peer, which is either the

00:19:39.536 --> 00:19:40.786 A:middle
central or the peripheral on the

00:19:40.786 --> 00:19:41.876 A:middle
remote side of the connection.

00:19:42.446 --> 00:19:43.836 A:middle
We tell you what PSM was

00:19:43.836 --> 00:19:45.066 A:middle
connected in case you have

00:19:45.066 --> 00:19:47.356 A:middle
multiple services that you've

00:19:47.356 --> 00:19:47.846 A:middle
published.

00:19:47.846 --> 00:19:49.876 A:middle
And then we just give you an

00:19:49.876 --> 00:19:51.156 A:middle
InputStream and OutputStream.

00:19:52.186 --> 00:19:53.626 A:middle
We didn't want to build our own

00:19:53.626 --> 00:19:55.456 A:middle
API and make you have to learn

00:19:55.456 --> 00:19:57.466 A:middle
how to use a new Read Write API.

00:19:58.056 --> 00:19:59.476 A:middle
We didn't want you to have to

00:19:59.606 --> 00:20:00.876 A:middle
adapt your code to deal

00:19:59.606 --> 00:20:00.876 A:middle
adapt your code to deal

00:20:00.876 --> 00:20:02.016 A:middle
specifically with Bluetooth

00:20:02.016 --> 00:20:02.626 A:middle
connections.

00:20:02.956 --> 00:20:04.026 A:middle
If you already know how to deal

00:20:04.026 --> 00:20:05.066 A:middle
with the socket and an

00:20:05.066 --> 00:20:06.236 A:middle
InputStream and OutputStream,

00:20:06.236 --> 00:20:08.276 A:middle
you can deal with an L2CAP

00:20:08.356 --> 00:20:08.626 A:middle
Channel.

00:20:11.126 --> 00:20:13.066 A:middle
So we use all the same stream

00:20:13.066 --> 00:20:14.126 A:middle
events that you would get off

00:20:14.126 --> 00:20:16.146 A:middle
of, say, a socket after you're

00:20:16.146 --> 00:20:18.036 A:middle
connected, and there's bytes

00:20:18.036 --> 00:20:19.066 A:middle
available to be read.

00:20:19.366 --> 00:20:20.246 A:middle
You'll get the callback

00:20:20.246 --> 00:20:21.356 A:middle
hasBytesAvailable.

00:20:22.376 --> 00:20:23.976 A:middle
If you're writing data and you

00:20:23.976 --> 00:20:25.126 A:middle
fill all those queues, you get

00:20:25.126 --> 00:20:26.346 A:middle
the same callback you would on a

00:20:26.346 --> 00:20:28.016 A:middle
socket of hasSpaceAvailable.

00:20:29.236 --> 00:20:30.486 A:middle
We think this is really powerful

00:20:30.486 --> 00:20:31.966 A:middle
because if you already have code

00:20:31.966 --> 00:20:33.156 A:middle
that knows how to talk over

00:20:33.376 --> 00:20:34.916 A:middle
other network interfaces like

00:20:34.916 --> 00:20:35.906 A:middle
Ethernet or Wi-Fi.

00:20:36.356 --> 00:20:37.436 A:middle
That code can be directly

00:20:37.436 --> 00:20:39.046 A:middle
adapted to run on top of L2CAP

00:20:39.166 --> 00:20:39.646 A:middle
Channels.

00:20:41.136 --> 00:20:42.376 A:middle
And when the channel has been

00:20:42.376 --> 00:20:43.636 A:middle
closed, you get the same

00:20:43.636 --> 00:20:44.796 A:middle
endEncountered.Event that you

00:20:44.796 --> 00:20:44.976 A:middle
would get.

00:20:48.306 --> 00:20:49.296 A:middle
So after you've opened your

00:20:49.296 --> 00:20:51.376 A:middle
connection, you can read data to

00:20:51.376 --> 00:20:52.746 A:middle
that connection, you can write

00:20:52.746 --> 00:20:53.146 A:middle
to it.

00:20:53.346 --> 00:20:55.146 A:middle
Eventually when it's closed you

00:20:55.146 --> 00:20:57.806 A:middle
get the endEncounterd.Event, and

00:20:57.896 --> 00:20:59.036 A:middle
it can be closed for a couple of

00:20:59.036 --> 00:20:59.446 A:middle
reasons.

00:20:59.586 --> 00:21:01.586 A:middle
So if the overall Bluetooth link

00:20:59.586 --> 00:21:01.586 A:middle
So if the overall Bluetooth link

00:21:01.586 --> 00:21:04.066 A:middle
is lost we'll tell you that the

00:21:04.066 --> 00:21:05.426 A:middle
L2CAP Channel has been closed.

00:21:06.136 --> 00:21:08.146 A:middle
As the Central side, you can

00:21:08.146 --> 00:21:09.646 A:middle
manually ask to close that

00:21:09.646 --> 00:21:10.156 A:middle
connection.

00:21:11.256 --> 00:21:12.576 A:middle
Now on the peripheral side, you

00:21:12.576 --> 00:21:13.696 A:middle
can either un-publish the

00:21:13.696 --> 00:21:18.126 A:middle
service or if you drop the

00:21:18.126 --> 00:21:19.506 A:middle
object and allow it to be

00:21:20.006 --> 00:21:22.356 A:middle
deallocated that's an implicit

00:21:22.356 --> 00:21:23.116 A:middle
sign to us through Core

00:21:23.116 --> 00:21:24.156 A:middle
Bluetooth that you're no longer

00:21:24.156 --> 00:21:24.716 A:middle
interested.

00:21:24.716 --> 00:21:26.326 A:middle
That will also close the L2CAP

00:21:26.326 --> 00:21:26.626 A:middle
Channel.

00:21:33.046 --> 00:21:34.366 A:middle
So when should you use L2CAP

00:21:34.366 --> 00:21:34.716 A:middle
Channels?

00:21:36.336 --> 00:21:38.176 A:middle
In general, if you're already

00:21:38.176 --> 00:21:39.746 A:middle
doing well with GATT and your

00:21:39.746 --> 00:21:41.706 A:middle
data model fits well into a GATT

00:21:41.706 --> 00:21:43.446 A:middle
database, you should continue

00:21:43.446 --> 00:21:44.016 A:middle
using that.

00:21:44.496 --> 00:21:46.046 A:middle
GATT makes it very simple to

00:21:46.046 --> 00:21:47.956 A:middle
discover your data, to get quick

00:21:47.956 --> 00:21:48.576 A:middle
updates.

00:21:48.576 --> 00:21:50.976 A:middle
You don't have to frame any of

00:21:50.976 --> 00:21:51.606 A:middle
your data.

00:21:52.146 --> 00:21:53.506 A:middle
So keep using that if that

00:21:53.506 --> 00:21:54.006 A:middle
worked for you.

00:21:54.986 --> 00:21:56.656 A:middle
But if there are times where it

00:21:56.656 --> 00:21:57.996 A:middle
was previously hard to make your

00:21:57.996 --> 00:22:00.526 A:middle
data fit into the GATT database,

00:21:57.996 --> 00:22:00.526 A:middle
data fit into the GATT database,

00:22:00.636 --> 00:22:01.976 A:middle
either because you had more data

00:22:01.976 --> 00:22:02.806 A:middle
that you could fit into a

00:22:02.806 --> 00:22:05.266 A:middle
characteristic, or you're

00:22:05.266 --> 00:22:06.396 A:middle
finding that GATT is kind of

00:22:06.396 --> 00:22:07.836 A:middle
getting in the way, L2CAP

00:22:07.936 --> 00:22:09.226 A:middle
Channels are a great opportunity

00:22:09.226 --> 00:22:10.906 A:middle
to get the lowest overhead best

00:22:10.906 --> 00:22:12.546 A:middle
performance when talking between

00:22:12.546 --> 00:22:13.206 A:middle
your accessories.

00:22:14.386 --> 00:22:15.546 A:middle
And if you're doing large data

00:22:15.546 --> 00:22:17.326 A:middle
transfers, say like a firmware

00:22:17.326 --> 00:22:19.226 A:middle
update, L2CAP Channels are a

00:22:19.226 --> 00:22:20.616 A:middle
good opportunity to help you get

00:22:20.616 --> 00:22:21.366 A:middle
it there faster.

00:22:22.616 --> 00:22:24.146 A:middle
And if you have a streaming

00:22:24.146 --> 00:22:25.606 A:middle
protocol that's already defined

00:22:25.606 --> 00:22:26.676 A:middle
somewhere that you want to run

00:22:26.676 --> 00:22:28.516 A:middle
between your two devices, L2CAP

00:22:28.596 --> 00:22:29.536 A:middle
Channels make that a really

00:22:29.536 --> 00:22:29.976 A:middle
natural fit.

00:22:33.546 --> 00:22:34.796 A:middle
I'd like to talk to you about

00:22:34.796 --> 00:22:36.286 A:middle
some of the best practices that

00:22:36.286 --> 00:22:37.386 A:middle
we've learned over the years.

00:22:37.906 --> 00:22:41.256 A:middle
So the first one I have, please

00:22:41.256 --> 00:22:42.516 A:middle
follow the Bluetooth Accessory

00:22:42.516 --> 00:22:43.566 A:middle
Design Guidelines.

00:22:44.256 --> 00:22:45.716 A:middle
We have a great set of

00:22:46.096 --> 00:22:47.796 A:middle
guidelines that are published

00:22:47.796 --> 00:22:50.266 A:middle
that give you lots of data to

00:22:50.266 --> 00:22:51.556 A:middle
help you build the best

00:22:51.556 --> 00:22:52.176 A:middle
accessories.

00:22:52.566 --> 00:22:55.796 A:middle
They're not mandatory but they

00:22:55.796 --> 00:22:56.666 A:middle
are things we've learned over

00:22:56.666 --> 00:22:57.796 A:middle
the year that help you build

00:22:58.076 --> 00:23:00.166 A:middle
accessories without running into

00:22:58.076 --> 00:23:00.166 A:middle
accessories without running into

00:23:00.336 --> 00:23:01.946 A:middle
the same pitfalls and problems

00:23:01.946 --> 00:23:03.076 A:middle
that we've seen across the

00:23:03.076 --> 00:23:03.466 A:middle
years.

00:23:06.096 --> 00:23:07.716 A:middle
And if possible, use existing

00:23:07.716 --> 00:23:08.836 A:middle
profiles and services.

00:23:09.516 --> 00:23:11.976 A:middle
We've defined our own protocols

00:23:11.976 --> 00:23:13.226 A:middle
for things like Notification

00:23:13.226 --> 00:23:15.976 A:middle
Center and Apple Media, and the

00:23:15.976 --> 00:23:17.186 A:middle
Bluetooth site has a bunch of

00:23:17.186 --> 00:23:18.466 A:middle
really good profiles for things

00:23:18.466 --> 00:23:20.346 A:middle
like batter updates and device

00:23:20.346 --> 00:23:20.956 A:middle
information.

00:23:21.496 --> 00:23:23.126 A:middle
So if there's already a profile

00:23:23.126 --> 00:23:23.976 A:middle
that does what you need,

00:23:24.506 --> 00:23:25.766 A:middle
implement that and it will help

00:23:25.766 --> 00:23:27.486 A:middle
you get a head start on getting

00:23:27.486 --> 00:23:28.346 A:middle
the data you want.

00:23:31.726 --> 00:23:33.096 A:middle
A common question we get is,

00:23:33.096 --> 00:23:34.216 A:middle
"Why does it take so long to

00:23:34.216 --> 00:23:35.496 A:middle
connect to my accessory?"

00:23:37.626 --> 00:23:39.446 A:middle
So before your two devices are

00:23:39.446 --> 00:23:41.596 A:middle
connected, they're each running

00:23:41.596 --> 00:23:42.606 A:middle
on their own timelines.

00:23:42.856 --> 00:23:43.916 A:middle
Your peripheral is going to be

00:23:43.916 --> 00:23:45.336 A:middle
advertising things to the world,

00:23:46.186 --> 00:23:47.296 A:middle
and your Central is going to be

00:23:47.296 --> 00:23:48.606 A:middle
looking for devices that are

00:23:48.606 --> 00:23:49.106 A:middle
around.

00:23:49.496 --> 00:23:51.596 A:middle
But each one of these uses small

00:23:51.596 --> 00:23:52.886 A:middle
windows, and until those two

00:23:52.886 --> 00:23:54.486 A:middle
events line up you can't

00:23:54.486 --> 00:23:55.546 A:middle
discover your accessory.

00:23:56.086 --> 00:23:58.546 A:middle
So the easiest way you can get a

00:23:58.546 --> 00:23:59.586 A:middle
quick connection between your

00:23:59.586 --> 00:24:01.396 A:middle
two devices or a quick discovery

00:23:59.586 --> 00:24:01.396 A:middle
two devices or a quick discovery

00:24:01.396 --> 00:24:03.646 A:middle
when you're scanning is to use

00:24:03.646 --> 00:24:04.726 A:middle
the shortest advertising

00:24:04.726 --> 00:24:05.566 A:middle
interval possible.

00:24:06.516 --> 00:24:08.036 A:middle
That ensures that no matter what

00:24:08.036 --> 00:24:09.546 A:middle
state your central is in,

00:24:09.626 --> 00:24:11.376 A:middle
whether it's screen on, screen

00:24:11.376 --> 00:24:12.966 A:middle
off, directly in the app, in the

00:24:12.966 --> 00:24:14.736 A:middle
background, it will get you the

00:24:14.736 --> 00:24:18.646 A:middle
shortest time to find.

00:24:18.646 --> 00:24:19.936 A:middle
Now using a short advertising

00:24:19.936 --> 00:24:22.296 A:middle
interval takes extra battery for

00:24:22.296 --> 00:24:24.426 A:middle
your accessory, so you can't do

00:24:24.426 --> 00:24:26.556 A:middle
that all the time but what we

00:24:26.556 --> 00:24:27.936 A:middle
strongly recommend is if you

00:24:27.936 --> 00:24:30.276 A:middle
know through any means

00:24:30.276 --> 00:24:32.326 A:middle
necessary, through the user

00:24:32.326 --> 00:24:34.026 A:middle
touching the accessory, user

00:24:34.026 --> 00:24:36.106 A:middle
picking it up, accelerometer,

00:24:36.356 --> 00:24:37.586 A:middle
buttons, use that as an

00:24:37.586 --> 00:24:38.746 A:middle
indication to start doing

00:24:38.746 --> 00:24:40.356 A:middle
aggressive advertising and then

00:24:40.356 --> 00:24:41.316 A:middle
you can go into a lower

00:24:41.316 --> 00:24:43.686 A:middle
advertising interval later when

00:24:43.686 --> 00:24:44.686 A:middle
you're trying to save battery.

00:24:47.536 --> 00:24:48.586 A:middle
If you're trying to save

00:24:48.586 --> 00:24:49.706 A:middle
battery, you can go to the

00:24:49.706 --> 00:24:50.916 A:middle
Bluetooth Accessory Design

00:24:50.916 --> 00:24:51.516 A:middle
Guidelines.

00:24:51.516 --> 00:24:55.096 A:middle
We have a whole bunch of power

00:24:55.096 --> 00:24:56.696 A:middle
optimized but also discovery

00:24:56.696 --> 00:24:58.016 A:middle
time optimize advertising

00:24:58.016 --> 00:24:59.036 A:middle
intervals you can use.

00:25:06.056 --> 00:25:07.116 A:middle
Another thing that we see is

00:25:07.116 --> 00:25:09.386 A:middle
that if you've previously used

00:25:09.386 --> 00:25:11.156 A:middle
an accessory and you want to

00:25:11.156 --> 00:25:13.146 A:middle
reconnect to that accessory you

00:25:13.146 --> 00:25:14.526 A:middle
don't have to scan every time.

00:25:14.876 --> 00:25:16.676 A:middle
If you know that the device is

00:25:16.676 --> 00:25:18.306 A:middle
advertising or you just want to

00:25:18.306 --> 00:25:19.586 A:middle
connect as quickly as possible,

00:25:20.106 --> 00:25:21.036 A:middle
connect directly to the

00:25:21.036 --> 00:25:21.586 A:middle
accessory.

00:25:22.956 --> 00:25:24.676 A:middle
If you have the identifier, you

00:25:24.676 --> 00:25:26.446 A:middle
can call retrievePeripherals

00:25:26.446 --> 00:25:28.316 A:middle
(WithIdentifiers) and directly

00:25:28.316 --> 00:25:30.246 A:middle
get a CBPeripheral object that

00:25:30.246 --> 00:25:31.966 A:middle
you can connect to.

00:25:31.966 --> 00:25:33.526 A:middle
If you were to scan for your

00:25:33.526 --> 00:25:35.026 A:middle
accessory and then connect to it

00:25:35.476 --> 00:25:36.526 A:middle
it's actually going to take us

00:25:36.526 --> 00:25:38.236 A:middle
twice as long to do that

00:25:38.236 --> 00:25:39.916 A:middle
operation as if we could have

00:25:39.916 --> 00:25:40.936 A:middle
connected the first time we

00:25:40.936 --> 00:25:41.946 A:middle
found it.

00:25:47.546 --> 00:25:48.796 A:middle
Something we get asked a lot is

00:25:48.796 --> 00:25:50.386 A:middle
why does it take so long to

00:25:50.386 --> 00:25:51.846 A:middle
discover the GATT database after

00:25:51.846 --> 00:25:53.126 A:middle
I've connected to my accessory?

00:25:54.226 --> 00:25:55.136 A:middle
And in this case there's a

00:25:55.136 --> 00:25:56.696 A:middle
couple of things you can do to

00:25:56.696 --> 00:25:58.046 A:middle
speed that up.

00:25:58.996 --> 00:26:00.546 A:middle
The first recommendation we have

00:25:58.996 --> 00:26:00.546 A:middle
The first recommendation we have

00:26:00.876 --> 00:26:02.226 A:middle
is use as few services or

00:26:02.226 --> 00:26:03.736 A:middle
characteristics as possible.

00:26:04.226 --> 00:26:05.506 A:middle
Every time you add a service to

00:26:05.506 --> 00:26:07.146 A:middle
your GATT Database, that takes

00:26:07.146 --> 00:26:08.606 A:middle
extra time over the air that we

00:26:08.606 --> 00:26:10.086 A:middle
have to ask for those services

00:26:10.356 --> 00:26:11.206 A:middle
and discover those.

00:26:11.506 --> 00:26:13.476 A:middle
So by getting rid of services

00:26:13.476 --> 00:26:15.726 A:middle
that you don't need, or packing

00:26:15.726 --> 00:26:16.976 A:middle
multiple characteristics into

00:26:16.976 --> 00:26:18.856 A:middle
one service, that speeds up your

00:26:18.856 --> 00:26:20.126 A:middle
service discovery every time

00:26:20.126 --> 00:26:20.976 A:middle
your user connects to your

00:26:20.976 --> 00:26:21.456 A:middle
accessory.

00:26:25.056 --> 00:26:26.986 A:middle
Another one that's a really

00:26:26.986 --> 00:26:28.336 A:middle
simple thing you can do but that

00:26:28.386 --> 00:26:31.046 A:middle
helps is group your services by

00:26:31.046 --> 00:26:32.026 A:middle
the UUID size.

00:26:33.376 --> 00:26:34.906 A:middle
So if you have multiple 16 bit

00:26:34.906 --> 00:26:37.226 A:middle
UUIDs and then a service with

00:26:37.226 --> 00:26:40.056 A:middle
128 bit UUID we can discover all

00:26:40.056 --> 00:26:42.106 A:middle
the 16 bit services in one

00:26:42.106 --> 00:26:44.836 A:middle
roundtrip instead of having to

00:26:44.836 --> 00:26:45.906 A:middle
go back and forth for every

00:26:45.906 --> 00:26:46.366 A:middle
service.

00:26:50.316 --> 00:26:51.886 A:middle
And then finally to speed up

00:26:51.886 --> 00:26:54.036 A:middle
your service discovery, if we

00:26:54.036 --> 00:26:55.456 A:middle
can cash your GATT database we

00:26:55.456 --> 00:26:56.356 A:middle
actually will, so that on

00:26:56.356 --> 00:26:57.356 A:middle
reconnect we don't have to

00:26:57.356 --> 00:26:58.226 A:middle
discover anything.

00:26:59.116 --> 00:27:00.376 A:middle
If you're in an Accessory that

00:26:59.116 --> 00:27:00.376 A:middle
If you're in an Accessory that

00:27:00.606 --> 00:27:02.246 A:middle
requires pairing or bonding,

00:27:02.896 --> 00:27:04.266 A:middle
that means that you have to have

00:27:04.266 --> 00:27:05.086 A:middle
the service change

00:27:05.086 --> 00:27:06.696 A:middle
characteristic in your GATT

00:27:06.696 --> 00:27:07.166 A:middle
database.

00:27:07.926 --> 00:27:08.606 A:middle
The Service Change

00:27:08.606 --> 00:27:09.556 A:middle
Characteristic is part of the

00:27:09.556 --> 00:27:11.816 A:middle
Bluetooth Spec that allows you

00:27:11.816 --> 00:27:15.046 A:middle
to tell us when the services and

00:27:15.046 --> 00:27:16.136 A:middle
characteristics on your device

00:27:16.136 --> 00:27:17.546 A:middle
have changed and when it's safe

00:27:17.796 --> 00:27:19.536 A:middle
for us to reuse the last known

00:27:19.536 --> 00:27:20.716 A:middle
version of the GATT Database.

00:27:22.176 --> 00:27:23.746 A:middle
And if you're an Accessory that

00:27:23.746 --> 00:27:25.456 A:middle
does not allow pairing or

00:27:25.456 --> 00:27:27.716 A:middle
bonding, this means that if you

00:27:27.716 --> 00:27:28.706 A:middle
have the Service Changed

00:27:28.706 --> 00:27:30.546 A:middle
characteristic we can't cache

00:27:30.546 --> 00:27:31.456 A:middle
your database anymore.

00:27:32.536 --> 00:27:35.166 A:middle
So in those cases, if you do not

00:27:35.166 --> 00:27:37.046 A:middle
have a Serviced Changed

00:27:37.046 --> 00:27:39.446 A:middle
characteristic, we will cache

00:27:39.826 --> 00:27:41.336 A:middle
your entire service database

00:27:41.336 --> 00:27:42.076 A:middle
which gives you quick

00:27:42.076 --> 00:27:43.226 A:middle
reconnections to your device.

00:27:43.806 --> 00:27:44.996 A:middle
But you have to be careful if

00:27:44.996 --> 00:27:47.006 A:middle
you do not support pairing and

00:27:47.006 --> 00:27:47.796 A:middle
you want to do things like

00:27:47.796 --> 00:27:48.596 A:middle
firmware update.

00:27:48.596 --> 00:27:50.406 A:middle
Even if it's a rare event,

00:27:50.976 --> 00:27:52.306 A:middle
there's no way for you tell us

00:27:52.306 --> 00:27:54.906 A:middle
that the services have changed

00:27:54.906 --> 00:27:55.706 A:middle
on your peripheral.

00:28:01.246 --> 00:28:02.856 A:middle
And then, finally, if you are

00:28:02.856 --> 00:28:05.386 A:middle
building a new accessory we

00:28:05.386 --> 00:28:06.656 A:middle
recommend that you always look

00:28:06.656 --> 00:28:08.566 A:middle
and see the newest chipsets that

00:28:08.566 --> 00:28:10.236 A:middle
are available to you.

00:28:10.336 --> 00:28:11.586 A:middle
Since we came out with Core

00:28:11.586 --> 00:28:13.986 A:middle
Bluetooth, Bluetooth 4.2 and now

00:28:13.986 --> 00:28:15.336 A:middle
5.0 have been released.

00:28:15.826 --> 00:28:17.496 A:middle
All the features in those

00:28:17.496 --> 00:28:18.486 A:middle
releases are backwards

00:28:18.486 --> 00:28:19.056 A:middle
compatible.

00:28:19.056 --> 00:28:20.306 A:middle
So even if you build an

00:28:20.306 --> 00:28:21.926 A:middle
accessory that's Bluetooth 5.0,

00:28:22.126 --> 00:28:23.736 A:middle
it will work with all the Apple

00:28:23.736 --> 00:28:26.286 A:middle
devices that you want to connect

00:28:26.286 --> 00:28:27.956 A:middle
to that are 4.0 only.

00:28:28.486 --> 00:28:31.926 A:middle
And then, like I said, follow

00:28:31.926 --> 00:28:33.416 A:middle
the Accessory Design Guidelines.

00:28:33.826 --> 00:28:35.106 A:middle
If you read through those

00:28:35.106 --> 00:28:36.926 A:middle
upfront it can save you a lot of

00:28:36.926 --> 00:28:38.376 A:middle
hassle later in your project.

00:28:42.676 --> 00:28:44.036 A:middle
Now I'd like to hand it to Duy,

00:28:44.036 --> 00:28:45.666 A:middle
who's going to walk through how

00:28:45.666 --> 00:28:46.756 A:middle
to get the most out of Core

00:28:46.756 --> 00:28:47.166 A:middle
Bluetooth.

00:28:47.466 --> 00:28:48.546 A:middle
&gt;&gt; Thank you, Craig.

00:28:49.516 --> 00:28:54.666 A:middle
[ Applause ]

00:28:55.166 --> 00:28:56.066 A:middle
&gt;&gt; I am Duy.

00:28:56.066 --> 00:28:57.156 A:middle
Today I'll talk about getting

00:28:57.156 --> 00:28:58.176 A:middle
the most out of Core Bluetooth.

00:28:59.296 --> 00:29:00.576 A:middle
Let's walk through a scenario

00:28:59.296 --> 00:29:00.576 A:middle
Let's walk through a scenario

00:29:00.576 --> 00:29:02.106 A:middle
where we have a lot of data to

00:29:02.106 --> 00:29:03.776 A:middle
send from where updating a

00:29:03.776 --> 00:29:04.336 A:middle
device.

00:29:04.746 --> 00:29:06.426 A:middle
Today it takes about 3,000

00:29:06.426 --> 00:29:08.546 A:middle
seconds to transfer 1MB of data

00:29:08.656 --> 00:29:12.706 A:middle
at about 2.5kbps if we use Write

00:29:12.766 --> 00:29:15.286 A:middle
With Response and all defaults.

00:29:15.566 --> 00:29:17.506 A:middle
So this is obviously very slow.

00:29:17.776 --> 00:29:20.046 A:middle
What are the problems?

00:29:20.046 --> 00:29:21.096 A:middle
There's two main problems.

00:29:21.096 --> 00:29:22.576 A:middle
The first is all of the protocol

00:29:22.576 --> 00:29:23.426 A:middle
overhead in LE.

00:29:23.996 --> 00:29:25.486 A:middle
The Bluetooth Specification

00:29:25.486 --> 00:29:26.816 A:middle
defines the LE maximum

00:29:26.816 --> 00:29:28.786 A:middle
application datalink to be 27

00:29:28.786 --> 00:29:31.346 A:middle
Bytes, but we lose 7 of that

00:29:31.476 --> 00:29:33.326 A:middle
because your data has to

00:29:33.326 --> 00:29:34.676 A:middle
traverse from the application

00:29:34.676 --> 00:29:35.996 A:middle
through GATT, through ATT and

00:29:35.996 --> 00:29:38.286 A:middle
through L2CAP, so you lose about

00:29:38.286 --> 00:29:40.726 A:middle
25% of the packet, and in the

00:29:40.726 --> 00:29:42.276 A:middle
end the useable data length is

00:29:42.276 --> 00:29:43.116 A:middle
only 20 Bytes.

00:29:43.766 --> 00:29:46.536 A:middle
And in addition, once your data

00:29:46.536 --> 00:29:48.266 A:middle
gets through the controller the

00:29:48.676 --> 00:29:50.906 A:middle
hardware also adds link layer

00:29:50.906 --> 00:29:53.216 A:middle
security and CRC which adds even

00:29:53.216 --> 00:29:55.566 A:middle
more time to transmit a packet.

00:29:56.206 --> 00:29:59.406 A:middle
So in order to improve

00:29:59.406 --> 00:30:00.336 A:middle
performance, we'll have to

00:29:59.406 --> 00:30:00.336 A:middle
performance, we'll have to

00:30:00.336 --> 00:30:01.506 A:middle
reduce both the software and

00:30:01.506 --> 00:30:02.786 A:middle
hardware overhead.

00:30:03.556 --> 00:30:05.696 A:middle
The second problem is previously

00:30:05.696 --> 00:30:08.446 A:middle
in GATT the only way to reliably

00:30:08.446 --> 00:30:10.006 A:middle
write is to use Write With

00:30:10.006 --> 00:30:11.916 A:middle
Response which take two

00:30:11.916 --> 00:30:14.106 A:middle
intervals to complete, one to

00:30:14.106 --> 00:30:15.346 A:middle
write and one to wait for the

00:30:15.346 --> 00:30:15.966 A:middle
response.

00:30:16.316 --> 00:30:17.826 A:middle
So your writes are actually very

00:30:17.826 --> 00:30:18.386 A:middle
sparse.

00:30:18.386 --> 00:30:19.906 A:middle
You're not fully utilizing the

00:30:19.906 --> 00:30:22.916 A:middle
available bandwidth because, as

00:30:22.916 --> 00:30:24.376 A:middle
you know, there's multiple

00:30:24.376 --> 00:30:26.156 A:middle
opportunities to transmit per

00:30:26.156 --> 00:30:28.136 A:middle
interval and we want to pack as

00:30:28.136 --> 00:30:30.626 A:middle
many writes as we can into all

00:30:30.626 --> 00:30:31.696 A:middle
of the connection events.

00:30:32.076 --> 00:30:33.126 A:middle
So how do we do this?

00:30:33.706 --> 00:30:36.446 A:middle
As Craig mentioned, we've

00:30:36.446 --> 00:30:37.956 A:middle
improved Write Without Response.

00:30:38.286 --> 00:30:39.766 A:middle
You can now write and continue

00:30:39.766 --> 00:30:41.186 A:middle
to write into Core Bluetooth

00:30:41.186 --> 00:30:42.486 A:middle
sets can send holds write

00:30:43.226 --> 00:30:45.846 A:middle
without response to false, in

00:30:45.846 --> 00:30:47.446 A:middle
which case then your application

00:30:47.446 --> 00:30:48.886 A:middle
can wait for a delegate to

00:30:48.886 --> 00:30:50.216 A:middle
signal when it's safe to resume

00:30:50.216 --> 00:30:50.566 A:middle
writing.

00:30:51.076 --> 00:30:52.376 A:middle
And when you follow the APIs the

00:30:52.376 --> 00:30:53.646 A:middle
write will be reliable.

00:30:54.356 --> 00:30:55.946 A:middle
And you can use the Write

00:30:55.946 --> 00:30:57.766 A:middle
Without Response to make sure

00:30:57.766 --> 00:30:58.806 A:middle
that Core Bluetooth is

00:30:58.806 --> 00:31:01.256 A:middle
sufficiently buffered so we can

00:30:58.806 --> 00:31:01.256 A:middle
sufficiently buffered so we can

00:31:01.256 --> 00:31:02.296 A:middle
use all of the available

00:31:02.296 --> 00:31:03.786 A:middle
connection events to send all of

00:31:03.786 --> 00:31:04.816 A:middle
your application data.

00:31:06.016 --> 00:31:09.796 A:middle
And in iOS 10, we also enlarged

00:31:09.796 --> 00:31:11.716 A:middle
the Connection Event Length so

00:31:11.716 --> 00:31:13.206 A:middle
now you have even more room to

00:31:13.206 --> 00:31:14.726 A:middle
write using Write For That

00:31:14.726 --> 00:31:15.206 A:middle
Response.

00:31:17.096 --> 00:31:18.626 A:middle
And when you pack all of the

00:31:18.626 --> 00:31:19.786 A:middle
connection events in all of the

00:31:19.786 --> 00:31:21.616 A:middle
interval, your throughput will

00:31:21.616 --> 00:31:24.116 A:middle
improve from 2.5 to 37 kbps.

00:31:24.656 --> 00:31:27.406 A:middle
And coming back to reducing

00:31:27.406 --> 00:31:31.506 A:middle
software protocol overhead, all

00:31:31.506 --> 00:31:32.716 A:middle
of the discussion thus far

00:31:32.716 --> 00:31:34.976 A:middle
assumes an ATT MTU of 23 Bytes,

00:31:35.326 --> 00:31:37.276 A:middle
this is why there are red

00:31:37.276 --> 00:31:38.956 A:middle
portion overhead in each viewer

00:31:38.956 --> 00:31:41.926 A:middle
packets but we can enlarge the

00:31:41.926 --> 00:31:44.146 A:middle
MTU and enlarge the writes to

00:31:44.146 --> 00:31:45.346 A:middle
align to the MTU.

00:31:45.936 --> 00:31:47.426 A:middle
This will improve your

00:31:47.426 --> 00:31:49.016 A:middle
throughput because L2CAP will

00:31:49.016 --> 00:31:50.396 A:middle
now fragment your data for you.

00:31:50.896 --> 00:31:53.106 A:middle
You only have to pay in overhead

00:31:53.146 --> 00:31:54.396 A:middle
on the first fragment of your

00:31:54.426 --> 00:31:54.846 A:middle
MTU.

00:31:55.266 --> 00:31:58.306 A:middle
The rest of the fragments can be

00:31:58.306 --> 00:32:00.936 A:middle
as the full 27 Bytes, so when

00:31:58.306 --> 00:32:00.936 A:middle
as the full 27 Bytes, so when

00:32:00.936 --> 00:32:02.266 A:middle
you do this your throughput

00:32:02.266 --> 00:32:04.316 A:middle
should improve to 48 kbps.

00:32:05.086 --> 00:32:08.936 A:middle
And so how do you configure MTU

00:32:09.736 --> 00:32:12.446 A:middle
in Core Bluetooth?

00:32:12.446 --> 00:32:13.836 A:middle
If you're running Core Bluetooth

00:32:13.836 --> 00:32:15.196 A:middle
to Core Bluetooth, there's

00:32:15.196 --> 00:32:16.166 A:middle
nothing much you have to do.

00:32:16.166 --> 00:32:18.566 A:middle
We will calculate the MTU for

00:32:18.566 --> 00:32:19.886 A:middle
you based on the connection

00:32:19.886 --> 00:32:21.286 A:middle
event length and other system

00:32:21.286 --> 00:32:23.856 A:middle
configurations but in this

00:32:23.856 --> 00:32:25.666 A:middle
example we're from we're

00:32:25.666 --> 00:32:26.776 A:middle
updating an accessory.

00:32:27.256 --> 00:32:29.996 A:middle
So if you recall the ATT MTU

00:32:29.996 --> 00:32:31.456 A:middle
exchange as a transaction

00:32:31.456 --> 00:32:32.726 A:middle
between the client and the

00:32:32.726 --> 00:32:35.916 A:middle
server, so the two minimum of

00:32:35.916 --> 00:32:37.256 A:middle
the -- the minimum of the two

00:32:37.256 --> 00:32:38.666 A:middle
proposed value is actually the

00:32:38.666 --> 00:32:40.756 A:middle
ATT MTU, so your accessory

00:32:40.756 --> 00:32:42.816 A:middle
should also use a large MTU to

00:32:42.816 --> 00:32:44.676 A:middle
take advantage of this more

00:32:44.676 --> 00:32:47.326 A:middle
optimized behavior.

00:32:47.556 --> 00:32:49.576 A:middle
And to use a large MTU that's

00:32:49.576 --> 00:32:51.506 A:middle
aligned to the -- to use a

00:32:51.506 --> 00:32:53.186 A:middle
larger attribute write that is

00:32:53.186 --> 00:32:55.456 A:middle
aligned to the MTU, you can use

00:32:55.456 --> 00:32:58.746 A:middle
the below interfaces to look at

00:32:58.746 --> 00:33:00.896 A:middle
what is the maximum write length

00:32:58.746 --> 00:33:00.896 A:middle
what is the maximum write length

00:33:01.046 --> 00:33:01.976 A:middle
aligned to the MTU.

00:33:05.896 --> 00:33:08.366 A:middle
So thus far we've talked about

00:33:08.366 --> 00:33:11.516 A:middle
how to pack as much writes as we

00:33:11.516 --> 00:33:13.306 A:middle
can into the intervals and how

00:33:13.306 --> 00:33:16.226 A:middle
to utilize -- fully utilize all

00:33:16.226 --> 00:33:17.426 A:middle
of the bandwidth available.

00:33:17.716 --> 00:33:20.356 A:middle
We talked about how to reduce

00:33:20.356 --> 00:33:21.796 A:middle
overhead, software overhead.

00:33:22.336 --> 00:33:27.466 A:middle
But the fact that LE is 27 Bytes

00:33:27.536 --> 00:33:29.746 A:middle
per packet and we have to pay

00:33:29.746 --> 00:33:30.876 A:middle
the hardware overhead per

00:33:30.876 --> 00:33:33.216 A:middle
packet, this really limits how

00:33:33.216 --> 00:33:35.306 A:middle
much further we can improve LE

00:33:35.306 --> 00:33:37.826 A:middle
performance using just software.

00:33:39.076 --> 00:33:40.816 A:middle
So we've added extended data

00:33:40.816 --> 00:33:41.406 A:middle
length support.

00:33:42.246 --> 00:33:44.336 A:middle
Extended data length is a 4.2

00:33:44.336 --> 00:33:46.106 A:middle
feature that increases the

00:33:46.106 --> 00:33:48.956 A:middle
maximum application data length

00:33:48.956 --> 00:33:50.886 A:middle
from 27 to 251.

00:33:52.496 --> 00:33:55.046 A:middle
This means that per packet now

00:33:55.046 --> 00:33:56.416 A:middle
you can send 10 times the amount

00:33:56.416 --> 00:33:58.536 A:middle
of data so you've eliminated all

00:33:58.536 --> 00:33:59.596 A:middle
of the hardware overhead and

00:33:59.596 --> 00:34:02.816 A:middle
software overhead previously and

00:33:59.596 --> 00:34:02.816 A:middle
software overhead previously and

00:34:03.846 --> 00:34:05.546 A:middle
we can now use more of the

00:34:05.546 --> 00:34:07.236 A:middle
available time to transmit your

00:34:07.236 --> 00:34:07.956 A:middle
application data.

00:34:09.106 --> 00:34:12.696 A:middle
And in fact, we can send a full

00:34:12.696 --> 00:34:16.436 A:middle
-- an entire maximum GATTs write

00:34:16.436 --> 00:34:18.096 A:middle
of 512 Bytes in a single

00:34:18.096 --> 00:34:20.606 A:middle
interval using Extended Data

00:34:20.606 --> 00:34:22.396 A:middle
Length, and this should be about

00:34:22.396 --> 00:34:23.876 A:middle
3 times the throughput of your

00:34:23.876 --> 00:34:24.926 A:middle
normal performance.

00:34:26.516 --> 00:34:32.036 A:middle
[ Applause ]

00:34:32.536 --> 00:34:33.985 A:middle
Extended Data Length is the new

00:34:33.985 --> 00:34:35.446 A:middle
feature in Bluetooth 4.2.

00:34:35.866 --> 00:34:36.996 A:middle
It extends the maximum

00:34:36.996 --> 00:34:38.766 A:middle
application data length from 27

00:34:38.766 --> 00:34:40.446 A:middle
to 251.

00:34:40.446 --> 00:34:42.116 A:middle
It's completely transparent to

00:34:42.116 --> 00:34:42.846 A:middle
your application.

00:34:42.966 --> 00:34:44.396 A:middle
If you're running Core Bluetooth

00:34:44.396 --> 00:34:46.416 A:middle
to Core Bluetooth we've done

00:34:46.416 --> 00:34:47.065 A:middle
everything for you.

00:34:47.065 --> 00:34:48.676 A:middle
We'll negotiate the write data

00:34:48.676 --> 00:34:50.496 A:middle
length and MTU appropriate to

00:34:50.496 --> 00:34:52.585 A:middle
your hardware configuration, but

00:34:52.585 --> 00:34:54.306 A:middle
in this example again we're

00:34:54.306 --> 00:34:57.186 A:middle
updating a firmware device so

00:34:57.186 --> 00:34:58.646 A:middle
remember you have to also add

00:34:58.646 --> 00:35:00.706 A:middle
support for extended data length

00:34:58.646 --> 00:35:00.706 A:middle
support for extended data length

00:35:00.706 --> 00:35:02.056 A:middle
in the accessory for this to

00:35:02.056 --> 00:35:02.346 A:middle
work.

00:35:03.226 --> 00:35:05.786 A:middle
And it has four times the

00:35:05.786 --> 00:35:07.126 A:middle
throughput in the same amount of

00:35:07.126 --> 00:35:08.856 A:middle
radio time so it's also very

00:35:08.856 --> 00:35:09.626 A:middle
power efficient.

00:35:09.966 --> 00:35:12.446 A:middle
It's now available on iPhone 7

00:35:12.446 --> 00:35:14.266 A:middle
and Apple Watch Series 2, and

00:35:14.266 --> 00:35:16.616 A:middle
the newly announced iPad Pro.

00:35:17.006 --> 00:35:19.346 A:middle
So please try it out and use

00:35:19.346 --> 00:35:20.826 A:middle
this as a reference to develop

00:35:20.826 --> 00:35:22.606 A:middle
your new Extended Data Length

00:35:22.606 --> 00:35:23.276 A:middle
Accessory.

00:35:24.516 --> 00:35:29.816 A:middle
[ Applause ]

00:35:30.316 --> 00:35:34.016 A:middle
And because we're -- the example

00:35:34.016 --> 00:35:35.406 A:middle
is from we're updating a device,

00:35:35.756 --> 00:35:38.246 A:middle
this is a good example of where

00:35:38.246 --> 00:35:39.626 A:middle
you should use L2CAP Connection

00:35:39.626 --> 00:35:40.456 A:middle
Oriented Channel.

00:35:40.986 --> 00:35:42.576 A:middle
This will eliminate all of the

00:35:42.576 --> 00:35:45.046 A:middle
overhead previously in GATT and

00:35:45.046 --> 00:35:47.036 A:middle
ATTs, but more importantly it

00:35:47.036 --> 00:35:49.496 A:middle
eliminates limitations and

00:35:49.496 --> 00:35:50.736 A:middle
restriction in GATT like the

00:35:50.736 --> 00:35:53.696 A:middle
maximum attribute size of 512,

00:35:54.136 --> 00:35:57.106 A:middle
so we can now write much larger

00:35:57.106 --> 00:35:58.986 A:middle
values and use much larger MTU.

00:35:59.636 --> 00:36:01.146 A:middle
When we do that the throughput

00:35:59.636 --> 00:36:01.146 A:middle
When we do that the throughput

00:36:01.146 --> 00:36:03.516 A:middle
will increase to almost 200

00:36:04.366 --> 00:36:04.826 A:middle
kbps.

00:36:05.646 --> 00:36:08.416 A:middle
This really shows how powerful

00:36:08.486 --> 00:36:10.456 A:middle
Extended Data Length can be if

00:36:10.456 --> 00:36:12.056 A:middle
it is not limited by software

00:36:12.056 --> 00:36:12.536 A:middle
protocol.

00:36:15.616 --> 00:36:17.086 A:middle
As you know, another way to

00:36:17.086 --> 00:36:19.536 A:middle
improve performance is to ask

00:36:19.536 --> 00:36:20.476 A:middle
for a faster connection

00:36:20.476 --> 00:36:21.046 A:middle
interval.

00:36:21.396 --> 00:36:23.936 A:middle
All of the discussion thus far

00:36:23.936 --> 00:36:26.626 A:middle
assumes a connection interval of

00:36:26.626 --> 00:36:28.986 A:middle
30 ms, but in Core Bluetooth we

00:36:28.986 --> 00:36:30.406 A:middle
made a change to lower the

00:36:30.406 --> 00:36:32.026 A:middle
connection interval minimum for

00:36:32.026 --> 00:36:35.626 A:middle
iOS to 15 ms, so when your

00:36:35.626 --> 00:36:36.826 A:middle
firmware is updating your device

00:36:36.826 --> 00:36:38.396 A:middle
you can ask for a parameter

00:36:38.676 --> 00:36:40.816 A:middle
update request and set the

00:36:40.816 --> 00:36:43.536 A:middle
interval min and max to 15 ms in

00:36:43.846 --> 00:36:44.726 A:middle
which we will honor.

00:36:45.616 --> 00:36:47.046 A:middle
And when you do that, your

00:36:47.046 --> 00:36:50.476 A:middle
throughput can double to 394,

00:36:50.476 --> 00:36:52.906 A:middle
almost 400 kbps.

00:36:53.516 --> 00:36:57.736 A:middle
[ Applause ]

00:36:58.236 --> 00:37:00.306 A:middle
So this is a summary of where we

00:36:58.236 --> 00:37:00.306 A:middle
So this is a summary of where we

00:37:00.306 --> 00:37:01.746 A:middle
were and where we are now.

00:37:02.116 --> 00:37:04.356 A:middle
We started with Write With

00:37:04.356 --> 00:37:06.476 A:middle
Response at 2.5 kbps.

00:37:07.706 --> 00:37:09.676 A:middle
Then we did Write Without

00:37:09.676 --> 00:37:11.646 A:middle
Response but writing only once

00:37:11.686 --> 00:37:14.596 A:middle
per interval, which only doubles

00:37:14.596 --> 00:37:15.276 A:middle
the performance.

00:37:16.006 --> 00:37:17.986 A:middle
But if you packed all of the

00:37:17.986 --> 00:37:19.786 A:middle
opportunities to transmit with

00:37:20.526 --> 00:37:21.756 A:middle
writes your throughput can

00:37:21.756 --> 00:37:22.996 A:middle
improve to 37.

00:37:22.996 --> 00:37:25.496 A:middle
And if you reduce overhead using

00:37:25.496 --> 00:37:28.236 A:middle
larger MTU, your performance can

00:37:28.236 --> 00:37:29.726 A:middle
go up to 48 kbps.

00:37:30.386 --> 00:37:31.986 A:middle
And we made a major leap forward

00:37:31.986 --> 00:37:33.336 A:middle
with Extended Data Length and

00:37:33.596 --> 00:37:36.906 A:middle
tripled that which will yield

00:37:36.906 --> 00:37:38.446 A:middle
135 kbps.

00:37:39.196 --> 00:37:40.966 A:middle
And if we eliminate the software

00:37:41.016 --> 00:37:43.076 A:middle
limitations using L2CAP plus

00:37:43.076 --> 00:37:44.936 A:middle
Extended Data Length, it can

00:37:44.936 --> 00:37:47.436 A:middle
improve to almost 200 kbps.

00:37:48.716 --> 00:37:51.806 A:middle
And we increase the -- made the

00:37:51.806 --> 00:37:53.766 A:middle
connection interval faster which

00:37:53.766 --> 00:37:55.356 A:middle
allows you to transmit more

00:37:55.356 --> 00:37:57.816 A:middle
often, then the throughput will

00:37:57.816 --> 00:37:59.586 A:middle
improve to 400 kbps.

00:37:59.956 --> 00:38:02.396 A:middle
So we started with about 3,000

00:37:59.956 --> 00:38:02.396 A:middle
So we started with about 3,000

00:38:02.506 --> 00:38:04.206 A:middle
seconds to download 1 MB of data

00:38:04.206 --> 00:38:06.576 A:middle
and we end it with 20 seconds to

00:38:06.576 --> 00:38:07.666 A:middle
download 1 MB of data.

00:38:08.516 --> 00:38:12.796 A:middle
[ Applause ]

00:38:13.296 --> 00:38:14.946 A:middle
So in summary, please request a

00:38:14.946 --> 00:38:16.616 A:middle
shorter connection interval.

00:38:16.886 --> 00:38:20.226 A:middle
The new minimum is 15 MS on iOS

00:38:20.226 --> 00:38:20.756 A:middle
if you need it.

00:38:21.346 --> 00:38:23.066 A:middle
Take advantage of all the GATT

00:38:23.066 --> 00:38:24.686 A:middle
optimizations we have like Write

00:38:24.686 --> 00:38:26.226 A:middle
Without Response.

00:38:26.226 --> 00:38:27.706 A:middle
Use L2CAP Channel for larger

00:38:27.706 --> 00:38:28.286 A:middle
transfer.

00:38:28.936 --> 00:38:30.826 A:middle
All of this is free and all in

00:38:30.826 --> 00:38:33.806 A:middle
software, and also update your

00:38:33.806 --> 00:38:34.836 A:middle
hardware with the latest

00:38:34.836 --> 00:38:36.746 A:middle
specification of Bluetooth

00:38:36.746 --> 00:38:38.746 A:middle
Specification and Hardware for

00:38:38.746 --> 00:38:40.206 A:middle
best performance and best

00:38:40.206 --> 00:38:40.816 A:middle
battery life.

00:38:41.646 --> 00:38:41.976 A:middle
Thank you.

00:38:42.516 --> 00:38:49.456 A:middle
[ Applause ]

00:38:49.956 --> 00:38:52.936 A:middle
&gt;&gt; Thank you, Duy.

00:38:53.066 --> 00:38:54.066 A:middle
So we've talked about a lot of

00:38:54.066 --> 00:38:55.116 A:middle
really exciting stuff here.

00:38:55.506 --> 00:38:59.006 A:middle
There's a lot to go over, but if

00:38:59.006 --> 00:39:00.156 A:middle
you're the type of Application

00:38:59.006 --> 00:39:00.156 A:middle
you're the type of Application

00:39:00.156 --> 00:39:01.216 A:middle
that wants to be connected

00:39:01.216 --> 00:39:02.806 A:middle
throughout the day, look into

00:39:02.806 --> 00:39:04.426 A:middle
the new optimizations we've put

00:39:04.426 --> 00:39:05.516 A:middle
in for State Restoration.

00:39:05.616 --> 00:39:07.006 A:middle
Try to build more reliable

00:39:07.006 --> 00:39:08.466 A:middle
experiences for your customers.

00:39:09.386 --> 00:39:11.056 A:middle
If it makes sense, you can now

00:39:11.056 --> 00:39:12.586 A:middle
take your existing applications

00:39:12.936 --> 00:39:13.906 A:middle
and make them available to

00:39:13.906 --> 00:39:15.736 A:middle
people on tvOS and watchOS.

00:39:17.166 --> 00:39:19.036 A:middle
If you're trying to do things

00:39:19.036 --> 00:39:20.636 A:middle
like streaming protocols or

00:39:20.636 --> 00:39:22.676 A:middle
transfer a large amount of data,

00:39:22.676 --> 00:39:24.036 A:middle
L2CAP Channels are a great fit

00:39:24.036 --> 00:39:25.186 A:middle
for that and we think that's a

00:39:25.186 --> 00:39:26.386 A:middle
really powerful feature that's

00:39:26.386 --> 00:39:27.356 A:middle
going to help you build even

00:39:27.356 --> 00:39:28.276 A:middle
better accessories.

00:39:28.776 --> 00:39:30.856 A:middle
And then if you're building new

00:39:30.856 --> 00:39:32.856 A:middle
accessories, always look for the

00:39:32.856 --> 00:39:34.576 A:middle
newest Bluetooth specifications

00:39:34.576 --> 00:39:36.236 A:middle
and chipsets available and

00:39:36.236 --> 00:39:37.386 A:middle
follow the Accessory Design

00:39:37.386 --> 00:39:37.996 A:middle
Guidelines.

00:39:40.616 --> 00:39:42.806 A:middle
For more information, we have a

00:39:42.806 --> 00:39:43.976 A:middle
website up here that will have

00:39:43.976 --> 00:39:45.106 A:middle
links to the Core Bluetooth

00:39:45.106 --> 00:39:47.476 A:middle
Developer Documentation Sample

00:39:47.476 --> 00:39:49.216 A:middle
Code and other great resources

00:39:49.216 --> 00:39:50.176 A:middle
to help you get started.

00:39:51.916 --> 00:39:53.546 A:middle
We also have two historical

00:39:53.546 --> 00:39:54.656 A:middle
sessions that we've done at WWDC

00:39:54.656 --> 00:39:56.406 A:middle
that are available online, so

00:39:56.406 --> 00:39:57.256 A:middle
you can go back and watch the

00:39:57.256 --> 00:39:59.156 A:middle
videos and get a bunch of great

00:39:59.156 --> 00:40:01.456 A:middle
information about Core Bluetooth

00:39:59.156 --> 00:40:01.456 A:middle
information about Core Bluetooth

00:40:01.496 --> 00:40:02.536 A:middle
both as a Central and a

00:40:02.536 --> 00:40:02.986 A:middle
Peripheral.

00:40:03.826 --> 00:40:04.346 A:middle
Thank you.

00:40:04.656 --> 00:40:06.166 A:middle
We can't wait to see build with

00:40:06.166 --> 00:40:07.246 A:middle
all these new enhancements.

00:40:08.516 --> 00:40:14.500 A:middle
[ Applause ]
