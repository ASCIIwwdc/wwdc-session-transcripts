WEBVTT

00:00:20.516 --> 00:00:24.546 A:middle
[ Applause ]

00:00:25.046 --> 00:00:27.656 A:middle
&gt;&gt; Good afternoon and welcome to

00:00:27.656 --> 00:00:28.826 A:middle
what's new in testing.

00:00:29.656 --> 00:00:31.196 A:middle
My name is Wil and I work on

00:00:31.236 --> 00:00:33.066 A:middle
Xcode and on XCTest.

00:00:34.166 --> 00:00:36.456 A:middle
So, what is new in testing?

00:00:37.206 --> 00:00:38.376 A:middle
The answer is a lot.

00:00:38.956 --> 00:00:40.316 A:middle
In fact, so much that we don't

00:00:40.316 --> 00:00:41.176 A:middle
have time to do all of the

00:00:41.176 --> 00:00:44.076 A:middle
justice here today, so let's get

00:00:44.076 --> 00:00:44.466 A:middle
started.

00:00:45.656 --> 00:00:47.656 A:middle
First off, we have a bunch of

00:00:47.656 --> 00:00:50.066 A:middle
enhancements in both Xcode 8.3

00:00:50.396 --> 00:00:51.446 A:middle
and Xcode 9.

00:00:51.646 --> 00:00:53.566 A:middle
I'm going to just call these out

00:00:53.566 --> 00:00:54.646 A:middle
and then I'm going to let you

00:00:54.646 --> 00:00:56.036 A:middle
read up on them in the reference

00:00:56.036 --> 00:00:58.196 A:middle
documentation for XCTest which

00:00:58.196 --> 00:00:59.456 A:middle
has just gotten a major

00:00:59.456 --> 00:00:59.916 A:middle
overhaul.

00:01:01.016 --> 00:01:03.016 A:middle
Then we'll take a look at new

00:01:03.096 --> 00:01:05.006 A:middle
APIs for asynchronous testing

00:01:05.626 --> 00:01:08.126 A:middle
followed by multi-app testing

00:01:09.296 --> 00:01:10.626 A:middle
and some great performance

00:01:10.626 --> 00:01:12.016 A:middle
improvements in UI testing.

00:01:12.806 --> 00:01:15.056 A:middle
Finally, we'll wrap things up

00:01:15.056 --> 00:01:16.326 A:middle
with a group of technologies

00:01:16.326 --> 00:01:18.416 A:middle
called activities, attachments,

00:01:18.706 --> 00:01:19.586 A:middle
and screenshots.

00:01:21.076 --> 00:01:22.426 A:middle
Let's look at those

00:01:22.426 --> 00:01:23.226 A:middle
enhancements.

00:01:24.516 --> 00:01:27.826 A:middle
So, in Xcode 8.3, we added UI

00:01:27.826 --> 00:01:30.066 A:middle
testing for Siri intents with

00:01:30.066 --> 00:01:32.566 A:middle
the new XCUISiriService.

00:01:33.366 --> 00:01:35.576 A:middle
We also introduced UI testing

00:01:35.576 --> 00:01:38.216 A:middle
support for the Touch Bar on

00:01:38.216 --> 00:01:38.946 A:middle
macOS.

00:01:39.576 --> 00:01:44.526 A:middle
In XCTest for Xcode 9 we have

00:01:44.556 --> 00:01:46.146 A:middle
refined the framework Swift

00:01:46.146 --> 00:01:47.946 A:middle
interface as part of the Swift 4

00:01:48.106 --> 00:01:50.356 A:middle
effort and we've also added a

00:01:50.356 --> 00:01:52.766 A:middle
new block-based teardown API

00:01:53.066 --> 00:01:55.266 A:middle
that lets you structure context

00:01:55.266 --> 00:01:57.526 A:middle
specific teardown in your test

00:01:57.526 --> 00:01:59.526 A:middle
methods without additional state

00:01:59.866 --> 00:02:01.176 A:middle
or properties in your test

00:01:59.866 --> 00:02:01.176 A:middle
or properties in your test

00:02:01.176 --> 00:02:01.726 A:middle
classes.

00:02:03.136 --> 00:02:05.406 A:middle
In UI testing we've introduced a

00:02:05.406 --> 00:02:07.426 A:middle
new element type for the macOS

00:02:07.456 --> 00:02:08.455 A:middle
menu bar items.

00:02:09.526 --> 00:02:11.266 A:middle
In addition, there's new API on

00:02:11.386 --> 00:02:13.676 A:middle
XCUI element that waits on the

00:02:13.676 --> 00:02:15.706 A:middle
existence of an element reducing

00:02:15.706 --> 00:02:17.336 A:middle
the need for sleep or other

00:02:17.336 --> 00:02:19.576 A:middle
artificial delays in your tests.

00:02:20.516 --> 00:02:24.546 A:middle
[ Applause ]

00:02:25.046 --> 00:02:27.296 A:middle
Xcodebuild now launches tests

00:02:27.296 --> 00:02:29.426 A:middle
directly via core simulator so

00:02:29.426 --> 00:02:30.276 A:middle
you'll no longer see the

00:02:30.276 --> 00:02:31.726 A:middle
simulator app launch when

00:02:31.726 --> 00:02:33.096 A:middle
running tests from the command

00:02:33.096 --> 00:02:33.296 A:middle
line.

00:02:33.536 --> 00:02:35.646 A:middle
We're also very excited to

00:02:35.646 --> 00:02:37.586 A:middle
announce Xcodebuild now supports

00:02:37.846 --> 00:02:39.566 A:middle
parallel device testing.

00:02:40.516 --> 00:02:44.546 A:middle
[ Applause ]

00:02:45.046 --> 00:02:46.426 A:middle
This means if you pass multiple

00:02:46.426 --> 00:02:48.126 A:middle
destination specifiers to

00:02:48.126 --> 00:02:50.236 A:middle
Xcodebuild it will build once

00:02:50.686 --> 00:02:52.266 A:middle
for all specifiers sharing the

00:02:52.266 --> 00:02:54.466 A:middle
same platform and then run the

00:02:54.466 --> 00:02:55.876 A:middle
test for those destinations

00:02:55.876 --> 00:02:56.826 A:middle
simultaneously.

00:02:57.286 --> 00:02:58.676 A:middle
This should give a huge speedup

00:02:59.036 --> 00:03:00.586 A:middle
to many continuous integration

00:02:59.036 --> 00:03:00.586 A:middle
to many continuous integration

00:03:00.586 --> 00:03:01.316 A:middle
scenarios.

00:03:02.476 --> 00:03:05.106 A:middle
On the localization side, in

00:03:05.106 --> 00:03:06.916 A:middle
Xcode 9 you can set the language

00:03:06.916 --> 00:03:08.436 A:middle
and region for your test to run

00:03:08.436 --> 00:03:08.686 A:middle
in.

00:03:09.366 --> 00:03:11.256 A:middle
This scheme option allows you to

00:03:11.256 --> 00:03:12.836 A:middle
easily test many different

00:03:12.836 --> 00:03:14.936 A:middle
localizations for your projects.

00:03:16.176 --> 00:03:18.346 A:middle
I also want to take a moment to

00:03:18.466 --> 00:03:19.686 A:middle
call your attention to some

00:03:19.946 --> 00:03:21.586 A:middle
improvements in Xcode Server.

00:03:22.536 --> 00:03:25.386 A:middle
So first of all, as of Xcode 9

00:03:25.386 --> 00:03:27.326 A:middle
you no longer need macOS server,

00:03:28.266 --> 00:03:30.346 A:middle
you can turn on Xcode Server for

00:03:30.346 --> 00:03:31.756 A:middle
your team with just the flick of

00:03:31.756 --> 00:03:33.596 A:middle
a switch by going to the new

00:03:33.596 --> 00:03:35.296 A:middle
preferences pane directly in

00:03:35.326 --> 00:03:35.766 A:middle
Xcode.

00:03:37.376 --> 00:03:39.176 A:middle
Xcode Server also has an

00:03:39.176 --> 00:03:40.756 A:middle
improved provisioning workflow

00:03:41.356 --> 00:03:43.106 A:middle
and adopts the Xcodebuild

00:03:43.106 --> 00:03:44.756 A:middle
improvements for CoreSimulator

00:03:45.186 --> 00:03:46.116 A:middle
and parallel testing.

00:03:46.826 --> 00:03:47.966 A:middle
And those per scheme

00:03:47.966 --> 00:03:49.116 A:middle
localization support

00:03:49.356 --> 00:03:50.946 A:middle
automatically extends to all of

00:03:50.946 --> 00:03:51.536 A:middle
your bots.

00:03:52.086 --> 00:03:55.546 A:middle
So that is our whirlwind tour of

00:03:55.546 --> 00:03:56.516 A:middle
the most exciting new

00:03:56.516 --> 00:03:57.246 A:middle
enhancements.

00:03:57.576 --> 00:03:59.656 A:middle
Now let's slow down a bit and

00:03:59.656 --> 00:04:01.066 A:middle
take a closer look at

00:03:59.656 --> 00:04:01.066 A:middle
take a closer look at

00:04:01.186 --> 00:04:02.196 A:middle
asynchronous testing.

00:04:03.566 --> 00:04:05.836 A:middle
Async testing allows you to

00:04:05.836 --> 00:04:07.206 A:middle
validate code which doesn't

00:04:07.206 --> 00:04:09.206 A:middle
finish immediately, but instead

00:04:09.546 --> 00:04:11.346 A:middle
calls back later with closures,

00:04:11.566 --> 00:04:13.136 A:middle
delegate methods or other

00:04:13.136 --> 00:04:14.266 A:middle
delayed completions.

00:04:15.126 --> 00:04:17.016 A:middle
This includes tasks like opening

00:04:17.016 --> 00:04:18.815 A:middle
documents, work done on

00:04:18.815 --> 00:04:19.926 A:middle
background threads,

00:04:20.366 --> 00:04:21.435 A:middle
communicating with other

00:04:21.435 --> 00:04:23.876 A:middle
processes, network activity,

00:04:24.026 --> 00:04:26.246 A:middle
animations, and a range of UI

00:04:26.246 --> 00:04:27.316 A:middle
testing scenarios.

00:04:27.896 --> 00:04:31.056 A:middle
We introduced APIs for async

00:04:31.056 --> 00:04:33.596 A:middle
testing in Xcode 6 several years

00:04:33.596 --> 00:04:34.036 A:middle
ago now.

00:04:34.826 --> 00:04:36.986 A:middle
These methods on XCTestCase let

00:04:36.986 --> 00:04:38.636 A:middle
you define conditions or

00:04:38.676 --> 00:04:40.726 A:middle
expectations as we call them and

00:04:40.726 --> 00:04:41.916 A:middle
then have your test wait for

00:04:41.916 --> 00:04:43.186 A:middle
them to complete or be

00:04:43.186 --> 00:04:43.726 A:middle
fulfilled.

00:04:45.356 --> 00:04:47.756 A:middle
So, here's a simple example.

00:04:48.236 --> 00:04:50.226 A:middle
This fragment of test code opens

00:04:50.226 --> 00:04:51.606 A:middle
a document, waits for it to

00:04:51.606 --> 00:04:53.336 A:middle
finish, and asserts that it was

00:04:53.336 --> 00:04:53.866 A:middle
successful.

00:04:54.586 --> 00:04:55.966 A:middle
The expectation object is

00:04:55.966 --> 00:04:57.596 A:middle
created before the document is

00:04:57.596 --> 00:04:57.966 A:middle
opened.

00:04:58.566 --> 00:05:00.436 A:middle
The test waits for it below the

00:04:58.566 --> 00:05:00.436 A:middle
The test waits for it below the

00:05:00.436 --> 00:05:02.406 A:middle
call to open and fulfills it

00:05:02.496 --> 00:05:04.546 A:middle
inside the closure which allows

00:05:04.546 --> 00:05:06.186 A:middle
the test to then continue on and

00:05:06.186 --> 00:05:08.106 A:middle
execute the test code after the

00:05:08.106 --> 00:05:08.686 A:middle
call to wait.

00:05:09.396 --> 00:05:10.736 A:middle
But this is the original API

00:05:10.736 --> 00:05:12.416 A:middle
that we had in Xcode 6.

00:05:13.436 --> 00:05:14.686 A:middle
It works well enough, but it has

00:05:14.686 --> 00:05:15.576 A:middle
some limitations.

00:05:16.286 --> 00:05:18.106 A:middle
First, timeout string waiting

00:05:18.106 --> 00:05:19.216 A:middle
are always treated as test

00:05:19.216 --> 00:05:19.796 A:middle
failures.

00:05:20.346 --> 00:05:22.486 A:middle
Second, waiting requires the

00:05:22.486 --> 00:05:24.426 A:middle
test object itself which makes

00:05:24.426 --> 00:05:26.096 A:middle
it hard to factor out into any

00:05:26.096 --> 00:05:27.876 A:middle
kind of test library or support

00:05:27.916 --> 00:05:28.156 A:middle
code.

00:05:29.186 --> 00:05:31.076 A:middle
It's also not possible to have

00:05:31.076 --> 00:05:32.606 A:middle
what we call nested waiting.

00:05:33.076 --> 00:05:34.256 A:middle
Nested waiting involves

00:05:34.256 --> 00:05:35.256 A:middle
additional groups of

00:05:35.256 --> 00:05:37.526 A:middle
expectations that get waited on

00:05:37.916 --> 00:05:39.966 A:middle
inside an outer weight context.

00:05:40.776 --> 00:05:42.866 A:middle
To solve these problems, we've

00:05:42.866 --> 00:05:44.166 A:middle
introduced a new class

00:05:44.446 --> 00:05:45.426 A:middle
XCTWaiter.

00:05:46.236 --> 00:05:48.126 A:middle
This class extracts the logic of

00:05:48.126 --> 00:05:49.076 A:middle
waiting that used to be

00:05:49.076 --> 00:05:51.296 A:middle
contained in XCTestCase and

00:05:51.296 --> 00:05:53.156 A:middle
allows you to explicitly declare

00:05:53.156 --> 00:05:54.556 A:middle
the expectations you're waiting

00:05:54.556 --> 00:05:54.716 A:middle
on.

00:05:55.586 --> 00:05:57.536 A:middle
Timeouts and other events are

00:05:57.606 --> 00:05:59.056 A:middle
handled through a delegate API

00:05:59.056 --> 00:06:01.066 A:middle
and are also returned from the

00:05:59.056 --> 00:06:01.066 A:middle
and are also returned from the

00:06:01.066 --> 00:06:03.466 A:middle
wait API as a result value.

00:06:04.456 --> 00:06:06.316 A:middle
This provides considerably more

00:06:06.316 --> 00:06:07.596 A:middle
flexibility in how you can

00:06:07.596 --> 00:06:09.096 A:middle
structure your asynchronous

00:06:09.096 --> 00:06:09.656 A:middle
tests.

00:06:10.206 --> 00:06:12.726 A:middle
If we return to the previous

00:06:12.726 --> 00:06:14.526 A:middle
example, let's take a look at

00:06:14.526 --> 00:06:16.006 A:middle
what the options are now for

00:06:16.006 --> 00:06:16.406 A:middle
waiting.

00:06:17.766 --> 00:06:20.416 A:middle
In the original code, note that

00:06:20.416 --> 00:06:22.076 A:middle
no expectations are mentioned.

00:06:22.446 --> 00:06:23.146 A:middle
This is because the

00:06:23.146 --> 00:06:25.386 A:middle
implementation is implicit, it

00:06:25.386 --> 00:06:27.706 A:middle
waits on all active expectations

00:06:27.736 --> 00:06:29.336 A:middle
the test object has created.

00:06:30.026 --> 00:06:32.846 A:middle
With just a small change now the

00:06:32.846 --> 00:06:34.916 A:middle
test is waiting explicitly on

00:06:34.916 --> 00:06:36.396 A:middle
the document expectation.

00:06:37.426 --> 00:06:38.976 A:middle
Now another equivalent way of

00:06:38.976 --> 00:06:41.356 A:middle
constructing this is to create

00:06:41.356 --> 00:06:43.496 A:middle
an instance of XCTWaiter with a

00:06:43.496 --> 00:06:45.066 A:middle
test case as delegate.

00:06:46.376 --> 00:06:49.636 A:middle
And yet another option is to

00:06:49.696 --> 00:06:51.486 A:middle
wait using a class method on

00:06:51.486 --> 00:06:53.176 A:middle
XCTWaiter and then handle the

00:06:53.176 --> 00:06:53.916 A:middle
result value.

00:06:54.916 --> 00:06:56.726 A:middle
This flexibility makes it really

00:06:56.726 --> 00:06:58.826 A:middle
easy to use XCTWaiter in helper

00:06:58.826 --> 00:07:01.516 A:middle
method, nested contexts or in

00:06:58.826 --> 00:07:01.516 A:middle
method, nested contexts or in

00:07:01.516 --> 00:07:02.776 A:middle
test library code that's

00:07:02.776 --> 00:07:04.366 A:middle
completely decoupled from your

00:07:04.366 --> 00:07:05.216 A:middle
test cases.

00:07:06.676 --> 00:07:09.046 A:middle
Now in addition, to creating

00:07:09.046 --> 00:07:10.996 A:middle
XCTWaiter we've also expanded

00:07:10.996 --> 00:07:13.076 A:middle
the API for XCTTestExpectation.

00:07:13.586 --> 00:07:15.876 A:middle
The initializer is now public

00:07:15.876 --> 00:07:17.886 A:middle
API which also decouples the

00:07:17.886 --> 00:07:19.656 A:middle
creation of expectations from

00:07:19.706 --> 00:07:20.676 A:middle
XCTestCase.

00:07:21.486 --> 00:07:22.696 A:middle
We've also introduced an

00:07:22.696 --> 00:07:24.456 A:middle
expected fulfillment count

00:07:24.546 --> 00:07:25.846 A:middle
property, this is where

00:07:25.846 --> 00:07:27.296 A:middle
expectations representing

00:07:27.296 --> 00:07:29.206 A:middle
conditions which occur multiple

00:07:29.206 --> 00:07:29.716 A:middle
times.

00:07:30.706 --> 00:07:31.976 A:middle
Now for conditions which should

00:07:31.976 --> 00:07:33.956 A:middle
not occur at all there's an

00:07:33.956 --> 00:07:36.806 A:middle
inverted API for expectations

00:07:37.116 --> 00:07:38.346 A:middle
which will cause the waiter to

00:07:38.346 --> 00:07:39.826 A:middle
raise a failure only if the

00:07:39.826 --> 00:07:41.726 A:middle
expectation is fulfilled before

00:07:41.726 --> 00:07:43.026 A:middle
the timeout collapses.

00:07:43.876 --> 00:07:46.596 A:middle
Finally, XCTWaiter allows you to

00:07:46.596 --> 00:07:48.206 A:middle
enforce the order in which

00:07:48.206 --> 00:07:50.356 A:middle
expectations are fulfilled using

00:07:50.356 --> 00:07:52.706 A:middle
an optional flag with the wait

00:07:53.506 --> 00:07:53.706 A:middle
APIs.

00:07:54.236 --> 00:07:56.596 A:middle
So, those are the updates to

00:07:56.596 --> 00:07:59.176 A:middle
asynchronous testing, XCTWaiter,

00:07:59.636 --> 00:08:01.456 A:middle
our new API for managing

00:07:59.636 --> 00:08:01.456 A:middle
our new API for managing

00:08:01.456 --> 00:08:03.566 A:middle
expectations and a bunch of

00:08:03.566 --> 00:08:04.856 A:middle
improvements to XCTest

00:08:04.856 --> 00:08:05.546 A:middle
expectation.

00:08:06.376 --> 00:08:08.036 A:middle
Both of these classes are fully

00:08:08.036 --> 00:08:10.486 A:middle
decoupled from XCTestCase giving

00:08:10.486 --> 00:08:11.996 A:middle
you a much easier and more

00:08:12.086 --> 00:08:13.766 A:middle
powerful system to use.

00:08:14.326 --> 00:08:17.596 A:middle
Now I'd like to talk about UI

00:08:17.596 --> 00:08:19.876 A:middle
testing and in particular, UI

00:08:19.876 --> 00:08:21.006 A:middle
testing with multiple

00:08:21.006 --> 00:08:21.876 A:middle
applications.

00:08:23.216 --> 00:08:25.056 A:middle
The starting point of almost

00:08:25.136 --> 00:08:26.916 A:middle
every UI test is an

00:08:27.016 --> 00:08:28.976 A:middle
XCUIApplication instance.

00:08:29.476 --> 00:08:32.035 A:middle
This class lets you launch and

00:08:32.155 --> 00:08:33.066 A:middle
terminate the app you're

00:08:33.066 --> 00:08:34.736 A:middle
testing, as well as create

00:08:34.736 --> 00:08:36.726 A:middle
queries for finding the user

00:08:36.726 --> 00:08:38.306 A:middle
interface elements which you

00:08:38.306 --> 00:08:39.645 A:middle
then automate by sending

00:08:39.645 --> 00:08:40.616 A:middle
synthetic events.

00:08:42.176 --> 00:08:43.986 A:middle
UI testing has a target

00:08:43.986 --> 00:08:46.066 A:middle
application concept which is the

00:08:46.066 --> 00:08:47.376 A:middle
application your tests are

00:08:47.376 --> 00:08:48.526 A:middle
primarily testing.

00:08:48.526 --> 00:08:50.356 A:middle
In your project settings for

00:08:50.356 --> 00:08:52.356 A:middle
your tests you designate an app

00:08:52.406 --> 00:08:54.426 A:middle
in the same project as being the

00:08:54.466 --> 00:08:55.666 A:middle
target application.

00:08:56.506 --> 00:08:57.786 A:middle
This enables you to call the

00:08:57.786 --> 00:08:59.336 A:middle
default initializer for

00:08:59.336 --> 00:09:01.776 A:middle
XCUIApplication and the instance

00:08:59.336 --> 00:09:01.776 A:middle
XCUIApplication and the instance

00:09:01.776 --> 00:09:02.616 A:middle
will be created with the

00:09:02.616 --> 00:09:04.406 A:middle
information for installing,

00:09:04.566 --> 00:09:06.336 A:middle
launching and interacting with

00:09:06.386 --> 00:09:07.376 A:middle
that application.

00:09:08.866 --> 00:09:09.916 A:middle
This mechanism is very

00:09:09.916 --> 00:09:11.196 A:middle
convenient, but it doesn't give

00:09:11.196 --> 00:09:12.366 A:middle
you a way to test other

00:09:12.366 --> 00:09:13.206 A:middle
applications.

00:09:13.966 --> 00:09:15.306 A:middle
Some examples of what we would

00:09:15.306 --> 00:09:17.476 A:middle
call multi-app scenarios include

00:09:17.476 --> 00:09:19.466 A:middle
app groups where you have more

00:09:19.466 --> 00:09:20.516 A:middle
than one application in your

00:09:20.516 --> 00:09:21.906 A:middle
project and they somehow

00:09:21.906 --> 00:09:23.406 A:middle
interact together and pass data

00:09:23.406 --> 00:09:24.226 A:middle
back and forth.

00:09:25.196 --> 00:09:26.366 A:middle
Another example would be

00:09:26.366 --> 00:09:28.166 A:middle
settings if you need to automate

00:09:28.246 --> 00:09:30.116 A:middle
the settings for your app and

00:09:30.116 --> 00:09:31.636 A:middle
change preferences for different

00:09:31.636 --> 00:09:32.516 A:middle
test scenarios.

00:09:33.246 --> 00:09:34.856 A:middle
And yet another example, our app

00:09:34.856 --> 00:09:35.696 A:middle
extensions.

00:09:36.646 --> 00:09:39.036 A:middle
All of these require more than a

00:09:39.036 --> 00:09:40.716 A:middle
single target application.

00:09:42.016 --> 00:09:43.766 A:middle
To solve this, we've added some

00:09:43.766 --> 00:09:46.166 A:middle
new APIs to XCUIApplication.

00:09:47.076 --> 00:09:48.836 A:middle
First, there are initializers

00:09:49.206 --> 00:09:50.686 A:middle
that allow you to specify an app

00:09:50.866 --> 00:09:52.766 A:middle
by its bundle ID or

00:09:52.766 --> 00:09:54.916 A:middle
alternatively on macOS you can

00:09:54.916 --> 00:09:58.056 A:middle
also use a file URL to designate

00:09:58.056 --> 00:09:59.766 A:middle
the location of the app on disk.

00:10:00.626 --> 00:10:02.686 A:middle
Second, we've added an activate

00:10:02.686 --> 00:10:04.156 A:middle
method that will bring the app

00:10:04.186 --> 00:10:05.256 A:middle
from the background to the

00:10:05.256 --> 00:10:06.696 A:middle
foreground if it's already

00:10:06.696 --> 00:10:08.296 A:middle
running and launch a new

00:10:08.296 --> 00:10:09.526 A:middle
instance if it's not.

00:10:10.336 --> 00:10:12.226 A:middle
But launch API would terminate

00:10:12.226 --> 00:10:14.556 A:middle
any previous running instance

00:10:14.556 --> 00:10:16.306 A:middle
first, so you always have a

00:10:16.386 --> 00:10:17.586 A:middle
cleaner slate when you start

00:10:17.586 --> 00:10:18.166 A:middle
your test.

00:10:18.616 --> 00:10:20.026 A:middle
Activate is useful for those

00:10:20.026 --> 00:10:21.576 A:middle
scenarios when you're not

00:10:21.576 --> 00:10:22.786 A:middle
interested in wiping out

00:10:22.786 --> 00:10:24.276 A:middle
previous state, but you actually

00:10:24.276 --> 00:10:26.056 A:middle
want to resume from some earlier

00:10:26.056 --> 00:10:26.986 A:middle
point in the test.

00:10:28.086 --> 00:10:29.706 A:middle
Finally, there's a new state

00:10:29.706 --> 00:10:30.996 A:middle
property that you can use to

00:10:30.996 --> 00:10:32.416 A:middle
monitor changes in the

00:10:32.416 --> 00:10:33.666 A:middle
applications you're testing.

00:10:34.586 --> 00:10:36.686 A:middle
So, here's some example of using

00:10:36.686 --> 00:10:37.466 A:middle
these APIs.

00:10:38.166 --> 00:10:39.416 A:middle
This code creates two

00:10:39.416 --> 00:10:41.736 A:middle
XCUIApplication instances with

00:10:41.776 --> 00:10:42.546 A:middle
bundle IDs.

00:10:42.896 --> 00:10:44.916 A:middle
This is a pair of apps perhaps

00:10:44.916 --> 00:10:45.796 A:middle
in an app group.

00:10:46.576 --> 00:10:48.856 A:middle
After launching and interacting

00:10:49.016 --> 00:10:51.126 A:middle
the readerApp the test then

00:10:51.126 --> 00:10:53.186 A:middle
launches the writerApp and

00:10:53.186 --> 00:10:54.116 A:middle
finally, after some more

00:10:54.116 --> 00:10:55.886 A:middle
interaction it uses the activate

00:10:55.886 --> 00:10:58.286 A:middle
API to bring the readerApp back

00:10:58.286 --> 00:11:00.596 A:middle
to the foreground without

00:10:58.286 --> 00:11:00.596 A:middle
to the foreground without

00:11:00.596 --> 00:11:01.596 A:middle
terminating it first.

00:11:02.176 --> 00:11:04.636 A:middle
So now let's see that in action,

00:11:04.866 --> 00:11:06.736 A:middle
here's Warren Ma with a demo of

00:11:06.736 --> 00:11:07.976 A:middle
multi-app UI testing.

00:11:08.516 --> 00:11:15.556 A:middle
[ Applause ]

00:11:16.056 --> 00:11:16.756 A:middle
&gt;&gt; Thanks Wil.

00:11:16.996 --> 00:11:19.016 A:middle
So as Wil just described, now in

00:11:19.016 --> 00:11:21.126 A:middle
Xcode 9 you can write UI tests

00:11:21.126 --> 00:11:21.946 A:middle
that involve multiple

00:11:21.946 --> 00:11:23.536 A:middle
applications and I'm excited to

00:11:23.536 --> 00:11:24.776 A:middle
show you guys how you might

00:11:24.776 --> 00:11:26.206 A:middle
incorporate the new APIs into

00:11:26.206 --> 00:11:27.026 A:middle
your own test suites.

00:11:27.866 --> 00:11:32.676 A:middle
So, let me go ahead and start by

00:11:32.676 --> 00:11:33.816 A:middle
showing you these two related

00:11:33.816 --> 00:11:34.666 A:middle
apps that I have here.

00:11:35.436 --> 00:11:36.206 A:middle
I'm running them on a

00:11:36.206 --> 00:11:37.576 A:middle
development device and I'm using

00:11:37.576 --> 00:11:38.886 A:middle
QuickTime to show you what's on

00:11:38.886 --> 00:11:39.306 A:middle
the screen.

00:11:40.136 --> 00:11:41.816 A:middle
The first one is a message

00:11:41.816 --> 00:11:43.636 A:middle
posting app, the writerApp.

00:11:44.946 --> 00:11:47.086 A:middle
Here we have a username, we have

00:11:47.086 --> 00:11:48.556 A:middle
a text view that we can tap

00:11:48.556 --> 00:11:51.826 A:middle
into, we can type out a test

00:11:51.826 --> 00:11:54.996 A:middle
message, tap return on the

00:11:54.996 --> 00:11:56.846 A:middle
keyboard and post it to the

00:11:56.846 --> 00:11:58.196 A:middle
server by tapping on the Send

00:11:58.196 --> 00:11:58.546 A:middle
button.

00:11:59.736 --> 00:12:00.776 A:middle
Great, so it's been posted.

00:11:59.736 --> 00:12:00.776 A:middle
Great, so it's been posted.

00:12:01.436 --> 00:12:02.176 A:middle
Now how do we view these

00:12:02.176 --> 00:12:02.646 A:middle
messages?

00:12:03.466 --> 00:12:04.996 A:middle
Well that's the purpose of our

00:12:04.996 --> 00:12:06.336 A:middle
second app the readerApp.

00:12:08.316 --> 00:12:10.086 A:middle
Here is a list of all messages

00:12:10.086 --> 00:12:10.986 A:middle
that have been posted to the

00:12:10.986 --> 00:12:12.876 A:middle
server and at the very top is

00:12:12.876 --> 00:12:14.736 A:middle
the most recent message posted

00:12:14.736 --> 00:12:16.426 A:middle
the one I just sent and we can

00:12:16.426 --> 00:12:17.926 A:middle
tap into that to view it in

00:12:17.926 --> 00:12:18.356 A:middle
detail.

00:12:18.356 --> 00:12:20.406 A:middle
And then we can return to that

00:12:20.406 --> 00:12:21.626 A:middle
list of messages using the

00:12:21.706 --> 00:12:23.426 A:middle
button at the top left All

00:12:23.426 --> 00:12:23.836 A:middle
Messages.

00:12:24.776 --> 00:12:26.736 A:middle
So, let's say you want to test

00:12:26.736 --> 00:12:28.536 A:middle
this process of typing out a

00:12:28.536 --> 00:12:29.746 A:middle
test message in the writerApp,

00:12:30.146 --> 00:12:31.776 A:middle
posing it to the server and then

00:12:31.776 --> 00:12:33.096 A:middle
verifying that it appears at the

00:12:33.096 --> 00:12:34.546 A:middle
top of the list of messages from

00:12:34.546 --> 00:12:35.516 A:middle
the second application.

00:12:36.076 --> 00:12:37.796 A:middle
Well before Xcode 9 you would

00:12:37.796 --> 00:12:39.206 A:middle
have to write separate UI tests

00:12:39.306 --> 00:12:41.026 A:middle
for each application and even

00:12:41.026 --> 00:12:42.446 A:middle
then, you wouldn't really have a

00:12:42.446 --> 00:12:43.996 A:middle
way of verifying the behavior

00:12:43.996 --> 00:12:44.756 A:middle
between both.

00:12:45.406 --> 00:12:47.186 A:middle
But now with multi-app testing

00:12:47.416 --> 00:12:49.556 A:middle
in Xcode 9, multi-UI testing in

00:12:49.556 --> 00:12:51.526 A:middle
Xcode 9 we can easily test

00:12:51.526 --> 00:12:53.096 A:middle
real-world scenarios between

00:12:53.096 --> 00:12:54.086 A:middle
multiple applications.

00:12:54.496 --> 00:12:56.356 A:middle
To show you how that looks let's

00:12:56.356 --> 00:12:58.256 A:middle
write a quick UI test to

00:12:58.456 --> 00:12:59.626 A:middle
automate the workflow I just

00:12:59.626 --> 00:13:00.176 A:middle
demonstrated.

00:12:59.626 --> 00:13:00.176 A:middle
demonstrated.

00:13:01.266 --> 00:13:05.046 A:middle
All right, the first step in our

00:13:05.046 --> 00:13:08.946 A:middle
test is to launch our Reader

00:13:08.946 --> 00:13:09.536 A:middle
application.

00:13:10.506 --> 00:13:12.366 A:middle
In order to do that we're going

00:13:12.366 --> 00:13:13.636 A:middle
to initialize it using its

00:13:13.676 --> 00:13:14.496 A:middle
bundle ID.

00:13:15.516 --> 00:13:16.786 A:middle
Afterwards we can go ahead and

00:13:16.786 --> 00:13:20.116 A:middle
launch it from a clean state.

00:13:20.306 --> 00:13:21.346 A:middle
Once our readerApp has been

00:13:21.346 --> 00:13:23.066 A:middle
launched we're just going to go

00:13:23.066 --> 00:13:24.236 A:middle
ahead and verify the first

00:13:24.236 --> 00:13:25.226 A:middle
message in that list of

00:13:25.226 --> 00:13:25.726 A:middle
messages.

00:13:26.456 --> 00:13:28.466 A:middle
To do that we'll tap into the

00:13:28.796 --> 00:13:31.266 A:middle
first message in the list, we'll

00:13:31.266 --> 00:13:32.656 A:middle
verify that its contents are

00:13:32.656 --> 00:13:34.996 A:middle
what we expect and finally,

00:13:34.996 --> 00:13:36.186 A:middle
we'll return to the list of

00:13:36.186 --> 00:13:37.466 A:middle
messages using that button at

00:13:37.466 --> 00:13:38.126 A:middle
the top left.

00:13:39.596 --> 00:13:40.646 A:middle
Once we verified the first

00:13:40.646 --> 00:13:42.036 A:middle
message in the list we want to

00:13:42.036 --> 00:13:43.196 A:middle
type out our test message and

00:13:43.196 --> 00:13:44.326 A:middle
post it to the server into the

00:13:44.326 --> 00:13:44.766 A:middle
writerApp.

00:13:45.616 --> 00:13:48.566 A:middle
To do that the first step once

00:13:48.566 --> 00:13:50.616 A:middle
again is to initialize the

00:13:50.616 --> 00:13:52.456 A:middle
writerApp using its bundle ID,

00:13:52.456 --> 00:13:54.066 A:middle
in this case it's

00:13:54.066 --> 00:13:55.596 A:middle
com.mycompany.Writer.

00:13:56.506 --> 00:13:58.116 A:middle
Afterwards, it's as easy as just

00:13:58.116 --> 00:13:58.816 A:middle
calling Activate.

00:13:59.396 --> 00:14:01.186 A:middle
Now Activate also waits for the

00:13:59.396 --> 00:14:01.186 A:middle
Now Activate also waits for the

00:14:01.186 --> 00:14:02.496 A:middle
application state to become

00:14:02.496 --> 00:14:03.556 A:middle
running foreground before

00:14:03.556 --> 00:14:05.136 A:middle
returning, so we don't need to

00:14:05.136 --> 00:14:07.276 A:middle
do any sort of manual waiting on

00:14:07.276 --> 00:14:08.186 A:middle
the application state.

00:14:08.776 --> 00:14:10.236 A:middle
Once Activate has returned we

00:14:10.236 --> 00:14:11.446 A:middle
know that the test is good to

00:14:11.446 --> 00:14:11.856 A:middle
continue.

00:14:12.296 --> 00:14:15.006 A:middle
Once the writerApp is running

00:14:15.006 --> 00:14:16.706 A:middle
foreground we can go ahead and

00:14:16.706 --> 00:14:18.206 A:middle
compose our test message and

00:14:18.206 --> 00:14:19.016 A:middle
post it to the server.

00:14:19.746 --> 00:14:21.616 A:middle
To do that we'll tap into the

00:14:21.616 --> 00:14:23.736 A:middle
text field, we'll type out our

00:14:23.736 --> 00:14:26.116 A:middle
test message, we'll tap on the

00:14:26.116 --> 00:14:27.536 A:middle
return button on the keyboard,

00:14:28.356 --> 00:14:29.606 A:middle
and then we'll tap on the send

00:14:29.606 --> 00:14:30.936 A:middle
button to post it to the server.

00:14:32.826 --> 00:14:33.956 A:middle
Now we want to make sure that it

00:14:33.956 --> 00:14:35.236 A:middle
appears on the top of the list

00:14:35.446 --> 00:14:36.416 A:middle
of the messages in the

00:14:36.416 --> 00:14:36.836 A:middle
readerApp.

00:14:38.006 --> 00:14:39.176 A:middle
Earlier we used Activate to

00:14:39.176 --> 00:14:40.046 A:middle
switch between the two

00:14:40.046 --> 00:14:41.586 A:middle
applications, but in this case,

00:14:41.846 --> 00:14:43.086 A:middle
let's make use of that back to

00:14:43.086 --> 00:14:44.466 A:middle
app button that's built into iOS

00:14:44.946 --> 00:14:45.946 A:middle
which appears at the top left

00:14:45.946 --> 00:14:46.636 A:middle
corner of the screen.

00:14:47.246 --> 00:14:50.276 A:middle
So, to do that we're going to

00:14:50.276 --> 00:14:52.726 A:middle
tap on the back to app button.

00:14:52.966 --> 00:14:54.356 A:middle
However, in this case because

00:14:54.356 --> 00:14:55.826 A:middle
we're not using Activate we do

00:14:55.826 --> 00:14:58.036 A:middle
need to manually wait on the

00:14:58.106 --> 00:14:59.716 A:middle
application state to become

00:14:59.716 --> 00:15:00.756 A:middle
running foreground before

00:14:59.716 --> 00:15:00.756 A:middle
running foreground before

00:15:00.756 --> 00:15:01.936 A:middle
continuing with the test.

00:15:02.726 --> 00:15:04.016 A:middle
So, to do that let's make use of

00:15:04.016 --> 00:15:05.146 A:middle
the new predicate based

00:15:05.146 --> 00:15:06.146 A:middle
expectation API.

00:15:08.596 --> 00:15:10.866 A:middle
So, we want to make sure that

00:15:10.866 --> 00:15:13.716 A:middle
the Reader app state has become

00:15:13.716 --> 00:15:14.766 A:middle
running foreground before

00:15:14.766 --> 00:15:15.286 A:middle
returning.

00:15:16.636 --> 00:15:18.066 A:middle
After we've defined our

00:15:18.066 --> 00:15:20.186 A:middle
expectation we'll go ahead and

00:15:20.186 --> 00:15:21.416 A:middle
wait for that expectation to

00:15:21.416 --> 00:15:23.246 A:middle
become true with a timeout of 10

00:15:23.246 --> 00:15:24.346 A:middle
seconds which should be more

00:15:24.346 --> 00:15:24.986 A:middle
than sufficient.

00:15:25.456 --> 00:15:28.076 A:middle
Once the Reader app has become

00:15:28.076 --> 00:15:30.056 A:middle
running foreground we can go

00:15:30.056 --> 00:15:31.536 A:middle
ahead and continue with the

00:15:31.536 --> 00:15:33.386 A:middle
final step of our test which is

00:15:33.386 --> 00:15:34.666 A:middle
to verify that the message

00:15:34.666 --> 00:15:36.226 A:middle
appears at the top of the list.

00:15:36.686 --> 00:15:37.886 A:middle
Similar to what we did before,

00:15:38.396 --> 00:15:39.236 A:middle
we'll tape into the first

00:15:39.236 --> 00:15:41.246 A:middle
message in the list, we'll

00:15:41.246 --> 00:15:42.596 A:middle
verify that its contents are the

00:15:42.596 --> 00:15:45.056 A:middle
message that we just posted, and

00:15:45.146 --> 00:15:46.306 A:middle
then we'll return to the list of

00:15:46.306 --> 00:15:46.766 A:middle
messages.

00:15:47.786 --> 00:15:48.966 A:middle
So, let's go ahead and run the

00:15:48.966 --> 00:15:50.336 A:middle
test to see it in action.

00:15:50.886 --> 00:15:52.426 A:middle
To do that I'll click on the

00:15:52.426 --> 00:15:53.756 A:middle
test diamond in the left-hand

00:15:53.756 --> 00:15:53.976 A:middle
gutter.

00:15:59.046 --> 00:16:00.716 A:middle
So, when you run UI tests in

00:15:59.046 --> 00:16:00.716 A:middle
So, when you run UI tests in

00:16:00.716 --> 00:16:02.186 A:middle
general it has to install what

00:16:02.186 --> 00:16:03.366 A:middle
is called the UI test runner and

00:16:03.716 --> 00:16:04.986 A:middle
that is the test process in

00:16:04.986 --> 00:16:07.046 A:middle
which UI tests run in addition

00:16:07.046 --> 00:16:07.646 A:middle
to installing the app.

00:16:07.866 --> 00:16:09.386 A:middle
So, it just takes a bit of time

00:16:09.386 --> 00:16:10.166 A:middle
for that to launch.

00:16:10.636 --> 00:16:13.256 A:middle
Once it's launched the test can

00:16:13.256 --> 00:16:14.466 A:middle
go ahead and continue to run.

00:16:16.836 --> 00:16:18.306 A:middle
So once again, the first step of

00:16:18.306 --> 00:16:19.656 A:middle
our test was to launch the

00:16:19.656 --> 00:16:21.806 A:middle
Reader app and verify the first

00:16:21.806 --> 00:16:23.466 A:middle
message in the list of messages.

00:16:25.296 --> 00:16:27.516 A:middle
Then we use Activate to open the

00:16:27.516 --> 00:16:29.196 A:middle
Writer app, type out our test

00:16:29.196 --> 00:16:30.936 A:middle
message and post it to the

00:16:30.936 --> 00:16:31.346 A:middle
server.

00:16:32.156 --> 00:16:33.106 A:middle
And we use the back to app

00:16:33.106 --> 00:16:34.206 A:middle
button to switch back to the

00:16:34.206 --> 00:16:35.296 A:middle
Reader app and verify that the

00:16:35.296 --> 00:16:36.426 A:middle
message appeared at the top the

00:16:36.426 --> 00:16:36.846 A:middle
list.

00:16:37.456 --> 00:16:39.336 A:middle
So [inaudible] how easy it is to

00:16:39.336 --> 00:16:40.706 A:middle
make use of the awesome new

00:16:40.946 --> 00:16:43.006 A:middle
multi-UI testing APIs available

00:16:43.006 --> 00:16:44.736 A:middle
in Xcode 9 to test multiple

00:16:44.736 --> 00:16:45.356 A:middle
applications.

00:16:45.626 --> 00:16:46.496 A:middle
And with that I'd like to hand

00:16:46.496 --> 00:16:46.936 A:middle
it back to Wil.

00:16:47.516 --> 00:16:51.546 A:middle
[ Applause ]

00:16:52.046 --> 00:16:53.546 A:middle
&gt;&gt; Thanks Warren, that's really

00:16:53.546 --> 00:16:54.136 A:middle
great stuff.

00:16:54.746 --> 00:16:56.696 A:middle
With just a few additions the

00:16:56.696 --> 00:16:57.796 A:middle
realm of UI testing

00:16:57.796 --> 00:16:59.186 A:middle
possibilities has gotten much

00:16:59.316 --> 00:16:59.806 A:middle
broader.

00:17:00.606 --> 00:17:01.856 A:middle
The new initializers let you

00:17:01.856 --> 00:17:03.626 A:middle
test any application and the

00:17:03.626 --> 00:17:04.955 A:middle
Activate API means you can

00:17:04.955 --> 00:17:06.086 A:middle
switch between multiple

00:17:06.086 --> 00:17:08.236 A:middle
applications without restarting

00:17:08.236 --> 00:17:10.596 A:middle
them, multi-app UI testing.

00:17:11.616 --> 00:17:14.126 A:middle
So, let's switch gears and talk

00:17:14.126 --> 00:17:16.226 A:middle
about performance in UI testing.

00:17:17.656 --> 00:17:20.096 A:middle
At the heart of UI testing are

00:17:20.096 --> 00:17:21.756 A:middle
the user interface elements that

00:17:21.756 --> 00:17:23.195 A:middle
your test will want to interact

00:17:24.036 --> 00:17:24.296 A:middle
with.

00:17:24.296 --> 00:17:26.236 A:middle
These are the buttons, labels,

00:17:26.236 --> 00:17:27.346 A:middle
table views, etcetera.

00:17:27.935 --> 00:17:30.026 A:middle
The UI tests create queries to

00:17:30.026 --> 00:17:32.206 A:middle
describe how elements are found.

00:17:32.816 --> 00:17:35.466 A:middle
For example, here a button

00:17:35.466 --> 00:17:37.126 A:middle
element has the query

00:17:38.076 --> 00:17:40.696 A:middle
app.navigationBars.buttons with

00:17:40.696 --> 00:17:41.896 A:middle
the subscript of done.

00:17:42.646 --> 00:17:43.886 A:middle
That means that the element has

00:17:43.936 --> 00:17:46.506 A:middle
the type of a button, the label

00:17:46.506 --> 00:17:48.556 A:middle
or title of done and can be

00:17:48.556 --> 00:17:50.406 A:middle
found in a navigation bar.

00:17:51.206 --> 00:17:53.116 A:middle
So how do these queries work?

00:17:54.486 --> 00:17:56.476 A:middle
Queries use accessibility data,

00:17:56.946 --> 00:17:58.996 A:middle
the same semantic information

00:17:59.116 --> 00:18:00.876 A:middle
used by VoiceOver technologies

00:17:59.116 --> 00:18:00.876 A:middle
used by VoiceOver technologies

00:18:01.376 --> 00:18:02.446 A:middle
as a kind of searchable

00:18:02.446 --> 00:18:03.916 A:middle
structure for the application.

00:18:05.136 --> 00:18:07.126 A:middle
To evaluate a query the test

00:18:07.166 --> 00:18:09.616 A:middle
process requests what we call a

00:18:09.616 --> 00:18:11.556 A:middle
snapshot of the current data.

00:18:12.186 --> 00:18:14.086 A:middle
This request is sent from the

00:18:14.086 --> 00:18:15.816 A:middle
test process to the application

00:18:15.816 --> 00:18:17.466 A:middle
so these are separate processes,

00:18:17.466 --> 00:18:18.706 A:middle
we're using interprocess

00:18:18.706 --> 00:18:19.536 A:middle
communication here.

00:18:20.676 --> 00:18:21.806 A:middle
The request is sent from the

00:18:21.806 --> 00:18:23.356 A:middle
test process to the application,

00:18:23.356 --> 00:18:25.036 A:middle
now the application captures the

00:18:25.036 --> 00:18:28.176 A:middle
snapshot data, serializes it and

00:18:28.176 --> 00:18:30.326 A:middle
transmits it back to the test

00:18:30.376 --> 00:18:30.986 A:middle
process.

00:18:31.596 --> 00:18:32.856 A:middle
Once the test process has

00:18:32.856 --> 00:18:34.606 A:middle
unpacked the data it can

00:18:34.606 --> 00:18:36.546 A:middle
evaluate the query by searching

00:18:36.546 --> 00:18:37.576 A:middle
through the snapshot.

00:18:38.356 --> 00:18:40.386 A:middle
Snapshotting works and because

00:18:40.606 --> 00:18:42.526 A:middle
of how it works it takes a

00:18:42.526 --> 00:18:45.026 A:middle
single atomic representation of

00:18:45.026 --> 00:18:46.956 A:middle
the state of the UI at that

00:18:46.956 --> 00:18:48.906 A:middle
moment, but it introduces some

00:18:48.906 --> 00:18:50.306 A:middle
performance challenges.

00:18:50.866 --> 00:18:52.616 A:middle
If we consider two axes of

00:18:52.616 --> 00:18:54.656 A:middle
performance, time on one hand

00:18:54.656 --> 00:18:55.806 A:middle
and memory on the other,

00:18:56.556 --> 00:18:58.496 A:middle
snapshots have potential

00:18:58.496 --> 00:18:59.896 A:middle
problems with both.

00:19:00.836 --> 00:19:02.546 A:middle
Snapshots that take too long for

00:19:02.546 --> 00:19:04.626 A:middle
apps that have many UI elements,

00:19:04.626 --> 00:19:06.086 A:middle
for example tables with

00:19:06.086 --> 00:19:07.866 A:middle
thousands of rows, large

00:19:07.866 --> 00:19:09.436 A:middle
collection views these will

00:19:09.436 --> 00:19:11.436 A:middle
cause timeouts that in turn

00:19:11.436 --> 00:19:12.586 A:middle
trigger test failures.

00:19:13.396 --> 00:19:15.426 A:middle
If the snapshot data is too

00:19:15.426 --> 00:19:16.986 A:middle
large memory pressure on the

00:19:16.986 --> 00:19:19.386 A:middle
system may also result in

00:19:19.386 --> 00:19:20.836 A:middle
processes being terminated.

00:19:21.656 --> 00:19:23.056 A:middle
So, these challenges led us to

00:19:23.056 --> 00:19:25.076 A:middle
the question of how can we

00:19:25.076 --> 00:19:26.976 A:middle
improve snapshot performance.

00:19:27.466 --> 00:19:28.896 A:middle
And we came up with several

00:19:28.896 --> 00:19:29.426 A:middle
approaches.

00:19:30.636 --> 00:19:32.416 A:middle
First of all, we wanted to cut

00:19:32.416 --> 00:19:33.536 A:middle
down on the overhead of

00:19:33.606 --> 00:19:35.116 A:middle
transporting all this data

00:19:35.116 --> 00:19:36.336 A:middle
between processes.

00:19:37.006 --> 00:19:38.406 A:middle
To do that we implemented what

00:19:38.406 --> 00:19:40.156 A:middle
we are calling remote queries.

00:19:40.836 --> 00:19:42.656 A:middle
With remote queries, instead of

00:19:42.656 --> 00:19:44.596 A:middle
the test process requesting the

00:19:44.596 --> 00:19:47.076 A:middle
snapshot it actually transmits

00:19:47.106 --> 00:19:48.286 A:middle
the query itself, which is a

00:19:48.286 --> 00:19:49.586 A:middle
very small amount of data.

00:19:50.466 --> 00:19:51.616 A:middle
The app will still create a

00:19:51.616 --> 00:19:53.306 A:middle
snapshot, but instead of

00:19:53.306 --> 00:19:55.226 A:middle
transporting it anywhere it

00:19:55.256 --> 00:19:56.996 A:middle
simply evaluates the query right

00:19:56.996 --> 00:19:58.076 A:middle
there in process.

00:19:58.576 --> 00:20:00.146 A:middle
And at the end, it sends back

00:19:58.576 --> 00:20:00.146 A:middle
And at the end, it sends back

00:20:00.146 --> 00:20:02.376 A:middle
just the results, again a tiny

00:20:02.376 --> 00:20:04.966 A:middle
amount of data, to test process.

00:20:06.106 --> 00:20:09.516 A:middle
So how does all this perform?

00:20:09.516 --> 00:20:11.876 A:middle
Well remote query performance

00:20:11.876 --> 00:20:13.736 A:middle
turned out to speed things up by

00:20:13.736 --> 00:20:16.116 A:middle
as much as 20% and reduce memory

00:20:16.116 --> 00:20:18.426 A:middle
spiking by about 30%.

00:20:18.936 --> 00:20:20.416 A:middle
Now this was a good start, but

00:20:20.526 --> 00:20:22.146 A:middle
it was nowhere near what we had

00:20:22.146 --> 00:20:23.106 A:middle
in mind to achieve.

00:20:23.106 --> 00:20:25.286 A:middle
So that brought us to our second

00:20:25.626 --> 00:20:27.116 A:middle
optimization which is query

00:20:27.116 --> 00:20:27.846 A:middle
analysis.

00:20:28.286 --> 00:20:30.306 A:middle
Our goal here was to reduce the

00:20:30.306 --> 00:20:32.226 A:middle
size of the snapshot itself, to

00:20:32.226 --> 00:20:34.256 A:middle
simply collect less data.

00:20:35.256 --> 00:20:37.406 A:middle
Snapshot uses a fixed set of

00:20:37.406 --> 00:20:39.366 A:middle
accessibility attributes, but we

00:20:39.366 --> 00:20:41.046 A:middle
determined by analyzing your

00:20:41.046 --> 00:20:43.746 A:middle
queries we could identify a

00:20:43.746 --> 00:20:45.446 A:middle
minimal set of attributes,

00:20:45.736 --> 00:20:47.286 A:middle
roughly half the full set for

00:20:47.286 --> 00:20:49.446 A:middle
many common queries, greatly

00:20:49.446 --> 00:20:50.796 A:middle
reducing the amount of data

00:20:50.796 --> 00:20:51.366 A:middle
collected.

00:20:52.126 --> 00:20:53.746 A:middle
Other properties that you might

00:20:53.746 --> 00:20:56.106 A:middle
need for assertions afterwards

00:20:56.146 --> 00:20:57.806 A:middle
could still be fetched on demand

00:20:57.806 --> 00:21:00.266 A:middle
for specific elements, but the

00:20:57.806 --> 00:21:00.266 A:middle
for specific elements, but the

00:21:00.266 --> 00:21:02.686 A:middle
snapshot itself will now be much

00:21:02.686 --> 00:21:03.386 A:middle
slimmer.

00:21:04.686 --> 00:21:06.066 A:middle
So, query analysis turned out to

00:21:06.066 --> 00:21:07.616 A:middle
be an even better performance

00:21:07.676 --> 00:21:10.846 A:middle
optimization, roughly 50% faster

00:21:11.126 --> 00:21:12.836 A:middle
in the common cases and having a

00:21:12.836 --> 00:21:15.896 A:middle
memory high watermark around 35%

00:21:15.986 --> 00:21:16.346 A:middle
lower.

00:21:17.136 --> 00:21:18.996 A:middle
So things are looking pretty

00:21:18.996 --> 00:21:21.016 A:middle
good, but we wanted to step back

00:21:21.016 --> 00:21:22.936 A:middle
and see if by really getting

00:21:22.936 --> 00:21:24.876 A:middle
outside the box we could

00:21:25.016 --> 00:21:26.726 A:middle
reimagine the system in a way

00:21:26.726 --> 00:21:28.226 A:middle
that would transform things.

00:21:28.536 --> 00:21:30.866 A:middle
That brought us to the idea of

00:21:30.866 --> 00:21:33.336 A:middle
eliminating snapshots entirely.

00:21:33.776 --> 00:21:35.196 A:middle
So how could we do that,

00:21:35.246 --> 00:21:37.366 A:middle
snapshots gave us this guarantee

00:21:37.706 --> 00:21:39.916 A:middle
of an atomic representation of

00:21:39.916 --> 00:21:40.646 A:middle
the state of the UI?

00:21:41.216 --> 00:21:42.956 A:middle
Well it turns out because of the

00:21:42.956 --> 00:21:45.036 A:middle
remote query infrastructure we

00:21:45.036 --> 00:21:46.966 A:middle
now have that just because we

00:21:46.966 --> 00:21:48.796 A:middle
were already running our query

00:21:48.796 --> 00:21:49.786 A:middle
in the process of the

00:21:49.786 --> 00:21:50.456 A:middle
application.

00:21:51.146 --> 00:21:53.636 A:middle
So, where traditional queries

00:21:53.636 --> 00:21:55.686 A:middle
work by examining the snapshot

00:21:55.686 --> 00:21:58.556 A:middle
data exhaustively we have

00:21:58.716 --> 00:22:01.006 A:middle
introduced an API called first

00:21:58.716 --> 00:22:01.006 A:middle
introduced an API called first

00:22:01.006 --> 00:22:03.526 A:middle
match that tells the query stop

00:22:03.526 --> 00:22:05.536 A:middle
as soon as you find the first

00:22:05.536 --> 00:22:07.526 A:middle
thing that matches because many

00:22:07.526 --> 00:22:09.186 A:middle
times it's excessive to search

00:22:09.276 --> 00:22:10.886 A:middle
all through the data to find

00:22:10.886 --> 00:22:12.876 A:middle
every possible match because you

00:22:12.876 --> 00:22:14.656 A:middle
can specify elements with

00:22:14.756 --> 00:22:17.236 A:middle
precision that really makes them

00:22:17.236 --> 00:22:17.686 A:middle
unique.

00:22:18.656 --> 00:22:21.796 A:middle
So, first match causes the query

00:22:21.796 --> 00:22:23.836 A:middle
to return early and you can add

00:22:23.836 --> 00:22:25.196 A:middle
it to any query that you already

00:22:26.516 --> 00:22:26.606 A:middle
have.

00:22:27.186 --> 00:22:28.336 A:middle
Here's an example where first

00:22:28.336 --> 00:22:29.786 A:middle
match has been added to a query

00:22:29.786 --> 00:22:30.646 A:middle
we looked at earlier.

00:22:31.456 --> 00:22:33.586 A:middle
And if you imagine that the app

00:22:33.636 --> 00:22:35.536 A:middle
we were testing was one with a

00:22:35.536 --> 00:22:37.566 A:middle
navigation bar and a table view

00:22:37.936 --> 00:22:39.606 A:middle
and the table had thousands of

00:22:39.606 --> 00:22:41.846 A:middle
rows in it, traditional

00:22:41.846 --> 00:22:43.496 A:middle
evaluation would've examined

00:22:43.556 --> 00:22:45.166 A:middle
every single row in the table

00:22:45.166 --> 00:22:46.046 A:middle
even though we're looking for a

00:22:46.046 --> 00:22:47.696 A:middle
button in the navigation bar.

00:22:48.166 --> 00:22:50.316 A:middle
But first match allows us to

00:22:50.316 --> 00:22:51.846 A:middle
stop as soon as we find that

00:22:51.846 --> 00:22:53.566 A:middle
button and we never look at a

00:22:53.566 --> 00:22:56.576 A:middle
single row in that table.

00:22:56.746 --> 00:22:59.156 A:middle
So how does first match perform?

00:22:59.916 --> 00:23:01.056 A:middle
Well it's safe to say first

00:22:59.916 --> 00:23:01.056 A:middle
Well it's safe to say first

00:23:01.056 --> 00:23:02.316 A:middle
match is a game changer.

00:23:02.796 --> 00:23:04.306 A:middle
For many queries, it's as much

00:23:04.306 --> 00:23:06.306 A:middle
as an order of magnitude faster

00:23:06.776 --> 00:23:08.686 A:middle
and eliminates memory spiking

00:23:08.826 --> 00:23:09.606 A:middle
entirely.

00:23:10.516 --> 00:23:16.546 A:middle
[ Applause ]

00:23:17.046 --> 00:23:18.696 A:middle
Now the performance improvements

00:23:18.696 --> 00:23:20.396 A:middle
in first match are fantastic,

00:23:20.396 --> 00:23:22.226 A:middle
but it is important to notice

00:23:22.226 --> 00:23:23.466 A:middle
the difference between

00:23:23.466 --> 00:23:25.516 A:middle
traditional queries and not

00:23:25.516 --> 00:23:27.766 A:middle
simply litter first match

00:23:27.766 --> 00:23:29.206 A:middle
throughout your code without

00:23:29.206 --> 00:23:30.166 A:middle
some consideration.

00:23:30.906 --> 00:23:32.486 A:middle
Traditional query evaluation

00:23:32.486 --> 00:23:34.586 A:middle
finds all matches, this helps

00:23:34.636 --> 00:23:37.106 A:middle
detect ambiguous queries because

00:23:37.106 --> 00:23:38.526 A:middle
will raise a failure if you

00:23:38.526 --> 00:23:39.716 A:middle
attempt to interact with an

00:23:39.716 --> 00:23:41.376 A:middle
element that has multiple

00:23:41.376 --> 00:23:41.946 A:middle
matches.

00:23:42.836 --> 00:23:44.286 A:middle
First match is removing that

00:23:44.316 --> 00:23:45.756 A:middle
protection, your test will get

00:23:45.756 --> 00:23:46.586 A:middle
the first match.

00:23:47.146 --> 00:23:48.416 A:middle
And if something in your app's

00:23:48.416 --> 00:23:50.916 A:middle
UI has changed so that query is

00:23:50.916 --> 00:23:53.576 A:middle
actually not particularly

00:23:53.726 --> 00:23:55.646 A:middle
precise and results would be a

00:23:55.646 --> 00:23:58.506 A:middle
non-unique result first match

00:23:58.676 --> 00:23:59.866 A:middle
won't protect you and the

00:23:59.866 --> 00:24:01.546 A:middle
results could be surprising.

00:23:59.866 --> 00:24:01.546 A:middle
results could be surprising.

00:24:02.096 --> 00:24:03.936 A:middle
So, let's take a look at some

00:24:04.046 --> 00:24:05.526 A:middle
example queries and consider

00:24:05.526 --> 00:24:07.086 A:middle
whether they're good candidates

00:24:07.086 --> 00:24:07.946 A:middle
for first match.

00:24:08.726 --> 00:24:13.486 A:middle
So app.buttons.firstMatch is not

00:24:13.486 --> 00:24:15.626 A:middle
a good idea, this is like going

00:24:15.626 --> 00:24:16.846 A:middle
into the grocery store and just

00:24:16.846 --> 00:24:18.296 A:middle
saying I want food.

00:24:18.976 --> 00:24:20.726 A:middle
You might get a frozen chicken

00:24:20.726 --> 00:24:21.816 A:middle
or a piece of bubblegum or

00:24:21.816 --> 00:24:23.316 A:middle
banana there's no telling right.

00:24:23.816 --> 00:24:26.136 A:middle
So, this kind of query is simply

00:24:26.136 --> 00:24:27.886 A:middle
not precise enough for first

00:24:27.886 --> 00:24:28.306 A:middle
match.

00:24:29.306 --> 00:24:30.756 A:middle
Now this is a little better

00:24:30.756 --> 00:24:32.536 A:middle
because we've added an

00:24:32.536 --> 00:24:34.236 A:middle
identifying string to it as

00:24:34.236 --> 00:24:34.536 A:middle
well.

00:24:34.536 --> 00:24:36.456 A:middle
So many apps this might be

00:24:36.456 --> 00:24:37.536 A:middle
sufficient right there.

00:24:38.026 --> 00:24:40.936 A:middle
But taking it a step further and

00:24:41.146 --> 00:24:43.156 A:middle
adding more precision, more

00:24:43.156 --> 00:24:44.526 A:middle
level of detail to the query

00:24:44.756 --> 00:24:46.156 A:middle
makes it a better candidate for

00:24:46.156 --> 00:24:48.116 A:middle
first match and more likely to

00:24:48.116 --> 00:24:50.146 A:middle
just be robust everywhere while

00:24:50.146 --> 00:24:51.576 A:middle
still giving you the performance

00:24:51.576 --> 00:24:53.176 A:middle
improvements that come with

00:24:53.176 --> 00:24:53.866 A:middle
first match.

00:24:55.966 --> 00:24:58.266 A:middle
So while talking about all these

00:24:58.266 --> 00:25:00.336 A:middle
optimizations we need to tell

00:24:58.266 --> 00:25:00.336 A:middle
optimizations we need to tell

00:25:00.336 --> 00:25:01.666 A:middle
you a little bit about

00:25:01.906 --> 00:25:03.876 A:middle
block-based NSPredicates and

00:25:03.876 --> 00:25:05.116 A:middle
using them in your queries.

00:25:07.136 --> 00:25:09.306 A:middle
Unfortunately, they are at odds

00:25:09.306 --> 00:25:11.956 A:middle
with these optimizations, they

00:25:11.956 --> 00:25:13.476 A:middle
effectively inhibit them.

00:25:13.526 --> 00:25:15.136 A:middle
That is because first of all,

00:25:15.136 --> 00:25:16.866 A:middle
blocks can't be serialized, you

00:25:17.096 --> 00:25:18.356 A:middle
can't pass them around between

00:25:18.356 --> 00:25:21.136 A:middle
processes so that means no

00:25:21.136 --> 00:25:23.256 A:middle
remote query and no first match.

00:25:23.966 --> 00:25:25.196 A:middle
The other problem is that we

00:25:25.196 --> 00:25:26.856 A:middle
can't introspect, we can't look

00:25:26.856 --> 00:25:29.386 A:middle
into a block at runtime and no

00:25:29.516 --> 00:25:30.896 A:middle
which attributes your query

00:25:30.896 --> 00:25:31.896 A:middle
actually needs.

00:25:32.326 --> 00:25:33.576 A:middle
So that means the reduced

00:25:33.576 --> 00:25:34.856 A:middle
snapshot performance

00:25:34.856 --> 00:25:36.396 A:middle
improvements are also off the

00:25:36.396 --> 00:25:38.116 A:middle
table when you're using

00:25:38.116 --> 00:25:39.656 A:middle
block-based NSPredicates.

00:25:40.346 --> 00:25:42.256 A:middle
Fortunately, the use of

00:25:42.256 --> 00:25:44.096 A:middle
block-based NSPredicates in UI

00:25:44.096 --> 00:25:45.796 A:middle
testing queries is relatively

00:25:45.796 --> 00:25:48.066 A:middle
rare and can almost always be

00:25:48.066 --> 00:25:50.366 A:middle
replaced with a format string or

00:25:50.366 --> 00:25:52.106 A:middle
an NSExpression based predicate

00:25:52.106 --> 00:25:52.616 A:middle
instead.

00:25:53.496 --> 00:25:55.366 A:middle
Now if you find yourself with a

00:25:55.366 --> 00:25:57.566 A:middle
case that does require a

00:25:57.566 --> 00:25:58.946 A:middle
block-based predicate, I mean

00:25:58.946 --> 00:25:59.936 A:middle
they're still supported, they

00:25:59.936 --> 00:26:02.216 A:middle
still work or even something

00:25:59.936 --> 00:26:02.216 A:middle
still work or even something

00:26:02.216 --> 00:26:03.796 A:middle
where it's much more convenient

00:26:03.796 --> 00:26:05.226 A:middle
to use one.

00:26:05.386 --> 00:26:06.916 A:middle
We'd like to know about it, we'd

00:26:06.916 --> 00:26:08.496 A:middle
like you to file a bug so that

00:26:08.496 --> 00:26:11.196 A:middle
we can give you an API that does

00:26:11.246 --> 00:26:13.466 A:middle
the same thing, but in a way

00:26:13.466 --> 00:26:15.086 A:middle
that works well with the query

00:26:15.086 --> 00:26:15.826 A:middle
optimization.

00:26:15.826 --> 00:26:17.216 A:middle
So, we'd like to hear from you

00:26:17.706 --> 00:26:19.596 A:middle
if you feel you have cases where

00:26:19.596 --> 00:26:20.826 A:middle
you need a block-based

00:26:20.826 --> 00:26:21.196 A:middle
predicate.

00:26:21.706 --> 00:26:24.926 A:middle
That wraps up our discussion of

00:26:24.926 --> 00:26:26.086 A:middle
UI testing performance

00:26:26.086 --> 00:26:26.756 A:middle
improvements.

00:26:27.336 --> 00:26:29.236 A:middle
Queries should be all around

00:26:29.236 --> 00:26:30.766 A:middle
faster in Xcode 9.

00:26:31.266 --> 00:26:32.546 A:middle
Some of the improvements, the

00:26:32.546 --> 00:26:35.126 A:middle
remote query and first match do

00:26:35.126 --> 00:26:36.996 A:middle
also require the newest OS as

00:26:36.996 --> 00:26:39.326 A:middle
the newest macOS, iOS and tvOS.

00:26:40.006 --> 00:26:42.686 A:middle
But the query analysis benefits

00:26:42.686 --> 00:26:45.126 A:middle
should work even on older OS's.

00:26:45.546 --> 00:26:47.076 A:middle
So, UI testing performance we've

00:26:47.076 --> 00:26:49.036 A:middle
done a lot of work here and we

00:26:49.036 --> 00:26:50.416 A:middle
look forward to seeing your

00:26:50.416 --> 00:26:51.386 A:middle
tests running faster.

00:26:51.896 --> 00:26:54.146 A:middle
So finally, I'd like to share

00:26:54.146 --> 00:26:55.646 A:middle
with you a new group of

00:26:55.646 --> 00:26:57.816 A:middle
technologists called activities,

00:26:57.816 --> 00:26:59.636 A:middle
attachments and screenshots.

00:27:00.596 --> 00:27:01.976 A:middle
So, let's start with activities

00:27:01.976 --> 00:27:03.716 A:middle
which are a new way to create

00:27:03.716 --> 00:27:05.666 A:middle
additional structure and longer

00:27:05.666 --> 00:27:07.666 A:middle
running UI and integration

00:27:07.666 --> 00:27:08.246 A:middle
tests.

00:27:09.166 --> 00:27:11.216 A:middle
There's a single API that lets

00:27:11.216 --> 00:27:12.706 A:middle
you group together sections of

00:27:12.736 --> 00:27:14.006 A:middle
code by wrapping them in

00:27:14.006 --> 00:27:16.156 A:middle
closures passed to a new class

00:27:16.456 --> 00:27:17.646 A:middle
XCTContext.

00:27:18.186 --> 00:27:20.696 A:middle
Now here's part of the test

00:27:20.696 --> 00:27:22.636 A:middle
report from Warren's demo

00:27:22.636 --> 00:27:23.636 A:middle
earlier, which we didn't get a

00:27:23.636 --> 00:27:25.196 A:middle
chance to look at, but here it

00:27:25.196 --> 00:27:25.646 A:middle
is now.

00:27:25.776 --> 00:27:26.996 A:middle
And that test wasn't

00:27:26.996 --> 00:27:28.966 A:middle
particularly long or complex,

00:27:28.966 --> 00:27:30.416 A:middle
but you can see there's quite a

00:27:30.416 --> 00:27:31.176 A:middle
lot going on here.

00:27:31.766 --> 00:27:33.396 A:middle
So, consider these four actions.

00:27:34.156 --> 00:27:35.376 A:middle
Let's look at the code that

00:27:35.376 --> 00:27:35.916 A:middle
caused them.

00:27:37.146 --> 00:27:38.666 A:middle
We have a query to find the

00:27:38.666 --> 00:27:40.406 A:middle
view, we tap on it, type some

00:27:40.406 --> 00:27:42.196 A:middle
text and interact with a few

00:27:42.196 --> 00:27:42.636 A:middle
buttons.

00:27:43.316 --> 00:27:44.966 A:middle
This code makes a good logical

00:27:44.966 --> 00:27:46.176 A:middle
grouping, it's the code that

00:27:46.176 --> 00:27:48.276 A:middle
composes the any good coffee

00:27:48.276 --> 00:27:49.616 A:middle
places message.

00:27:50.076 --> 00:27:52.286 A:middle
So, creating an XCTActivity for

00:27:52.286 --> 00:27:54.166 A:middle
this code is very simple.

00:27:54.556 --> 00:27:56.486 A:middle
We simply wrap it in this run

00:27:56.486 --> 00:27:58.456 A:middle
activity call, we give it a nice

00:27:58.456 --> 00:27:59.776 A:middle
label because that's what we'll

00:27:59.776 --> 00:28:01.236 A:middle
show in the test report.

00:27:59.776 --> 00:28:01.236 A:middle
show in the test report.

00:28:01.816 --> 00:28:02.846 A:middle
Now let's look at how that

00:28:02.846 --> 00:28:03.956 A:middle
changes the test report.

00:28:04.776 --> 00:28:06.436 A:middle
We have the original four

00:28:06.436 --> 00:28:08.576 A:middle
activities now enclosed in this

00:28:08.576 --> 00:28:10.756 A:middle
new activity compose coffee

00:28:10.756 --> 00:28:12.596 A:middle
message and you can expand it

00:28:12.596 --> 00:28:14.406 A:middle
still and see the original, more

00:28:14.406 --> 00:28:16.236 A:middle
granular details underneath.

00:28:16.776 --> 00:28:18.566 A:middle
But for the high level first

00:28:18.566 --> 00:28:19.586 A:middle
pass when you're looking at your

00:28:19.586 --> 00:28:21.366 A:middle
test report things will now be

00:28:21.366 --> 00:28:22.946 A:middle
more concise and semantically

00:28:22.946 --> 00:28:23.616 A:middle
meaningful.

00:28:24.556 --> 00:28:26.056 A:middle
Using this API throughout your

00:28:26.056 --> 00:28:27.466 A:middle
longer running tests and in

00:28:27.466 --> 00:28:29.266 A:middle
helper methods will just make

00:28:29.316 --> 00:28:31.086 A:middle
the test reports much easier to

00:28:31.086 --> 00:28:31.586 A:middle
explore.

00:28:32.466 --> 00:28:35.206 A:middle
Now along with activities we've

00:28:35.206 --> 00:28:36.686 A:middle
introduced something called

00:28:36.866 --> 00:28:37.646 A:middle
attachments.

00:28:38.086 --> 00:28:39.796 A:middle
For a long time now we've wanted

00:28:39.796 --> 00:28:41.596 A:middle
the ability to attach richer

00:28:41.596 --> 00:28:43.096 A:middle
data to test reports.

00:28:43.686 --> 00:28:45.526 A:middle
The primary motivation is to

00:28:45.526 --> 00:28:46.876 A:middle
make it easier to triage

00:28:46.876 --> 00:28:49.046 A:middle
failures with additional logs or

00:28:49.046 --> 00:28:50.506 A:middle
other data that give insight

00:28:50.626 --> 00:28:51.966 A:middle
into the conditions at the time

00:28:51.966 --> 00:28:52.436 A:middle
of failure.

00:28:53.496 --> 00:28:54.856 A:middle
In addition, this could be used

00:28:54.856 --> 00:28:55.876 A:middle
to support various

00:28:55.936 --> 00:28:57.556 A:middle
postprocessing workflows.

00:28:57.596 --> 00:28:59.156 A:middle
For example, sitting down with

00:28:59.156 --> 00:29:00.346 A:middle
your designers and looking at

00:28:59.156 --> 00:29:00.346 A:middle
your designers and looking at

00:29:00.346 --> 00:29:01.406 A:middle
screenshots together.

00:29:02.846 --> 00:29:04.576 A:middle
Now attachment support any kind

00:29:04.576 --> 00:29:07.096 A:middle
of binary data with convenience

00:29:07.096 --> 00:29:09.226 A:middle
APIs for strings, property

00:29:09.226 --> 00:29:11.996 A:middle
lists, codable objects, files

00:29:12.586 --> 00:29:13.536 A:middle
and images.

00:29:14.106 --> 00:29:15.856 A:middle
Any of these types can easily be

00:29:16.096 --> 00:29:17.806 A:middle
attached to your test so when

00:29:17.806 --> 00:29:18.866 A:middle
you look at the test report

00:29:18.866 --> 00:29:19.966 A:middle
there that data is.

00:29:20.496 --> 00:29:22.206 A:middle
And that brings us to the third

00:29:22.206 --> 00:29:23.516 A:middle
edition in our group of

00:29:23.556 --> 00:29:24.766 A:middle
technologies which are

00:29:24.766 --> 00:29:25.626 A:middle
screenshots.

00:29:26.506 --> 00:29:27.916 A:middle
Many of you have been asking us

00:29:27.916 --> 00:29:29.716 A:middle
over the years for an API to

00:29:29.716 --> 00:29:31.676 A:middle
explicitly capture screenshots

00:29:31.816 --> 00:29:32.626 A:middle
on demand.

00:29:32.836 --> 00:29:34.406 A:middle
Well we're happy to say that

00:29:34.406 --> 00:29:35.896 A:middle
here it is, we hope you enjoy

00:29:35.896 --> 00:29:35.963 A:middle
it.

00:29:36.516 --> 00:29:41.876 A:middle
[ Applause ]

00:29:42.376 --> 00:29:44.416 A:middle
This new XCUI screenshot

00:29:44.416 --> 00:29:45.596 A:middle
providing protocol is

00:29:45.596 --> 00:29:48.196 A:middle
implemented by both XCUIElement

00:29:48.576 --> 00:29:50.976 A:middle
and a new class XCUIScreen.

00:29:51.456 --> 00:29:52.966 A:middle
So, when you use an element and

00:29:52.966 --> 00:29:54.366 A:middle
you capture a screenshot it'll

00:29:54.366 --> 00:29:56.246 A:middle
be clipped to just the frame of

00:29:56.246 --> 00:29:56.946 A:middle
that element.

00:29:56.946 --> 00:29:58.136 A:middle
So, a button, you'll just see

00:29:58.136 --> 00:29:59.886 A:middle
the button, a window you'll see

00:29:59.886 --> 00:30:00.976 A:middle
the full window and so forth.

00:29:59.886 --> 00:30:00.976 A:middle
the full window and so forth.

00:30:01.076 --> 00:30:03.176 A:middle
And if you use the screen API

00:30:03.636 --> 00:30:04.686 A:middle
you'll get the full screen

00:30:04.916 --> 00:30:06.386 A:middle
regardless of what application

00:30:06.386 --> 00:30:08.216 A:middle
or applications are present on

00:30:09.516 --> 00:30:09.596 A:middle
it.

00:30:09.966 --> 00:30:11.496 A:middle
Now with attachments and

00:30:11.496 --> 00:30:13.396 A:middle
screenshots, some of you may be

00:30:13.396 --> 00:30:16.096 A:middle
wondering how quickly will this

00:30:16.096 --> 00:30:17.476 A:middle
fill up my hard drive.

00:30:18.996 --> 00:30:20.876 A:middle
Well the default policies for

00:30:20.876 --> 00:30:22.186 A:middle
attachments and also for

00:30:22.186 --> 00:30:23.686 A:middle
screenshots that are captured

00:30:23.686 --> 00:30:25.406 A:middle
automatically during UI testing

00:30:25.846 --> 00:30:27.916 A:middle
is that if your test passes we

00:30:27.916 --> 00:30:28.926 A:middle
delete these for you.

00:30:29.546 --> 00:30:30.916 A:middle
The assumption is in the common

00:30:30.916 --> 00:30:33.286 A:middle
case you don't need them, but if

00:30:33.286 --> 00:30:34.806 A:middle
your test fails they're present

00:30:34.806 --> 00:30:35.196 A:middle
for you.

00:30:35.966 --> 00:30:38.056 A:middle
Now you can override this policy

00:30:38.406 --> 00:30:39.196 A:middle
in your scheme.

00:30:39.196 --> 00:30:40.756 A:middle
In the same part of the UI where

00:30:40.756 --> 00:30:42.946 A:middle
that localization control exists

00:30:43.026 --> 00:30:44.816 A:middle
you can tell us whether you want

00:30:44.816 --> 00:30:46.976 A:middle
screenshots captured at all

00:30:47.276 --> 00:30:48.936 A:middle
automatically and whether to

00:30:48.936 --> 00:30:50.856 A:middle
delete these and attachments

00:30:50.856 --> 00:30:52.376 A:middle
when tests succeed or not.

00:30:53.156 --> 00:30:54.996 A:middle
There is also API on the

00:30:54.996 --> 00:30:57.066 A:middle
attachment class that lets you

00:30:57.066 --> 00:30:59.576 A:middle
on a per instance basis say keep

00:30:59.576 --> 00:31:01.066 A:middle
this, don't keep that, and that

00:30:59.576 --> 00:31:01.066 A:middle
this, don't keep that, and that

00:31:01.066 --> 00:31:01.596 A:middle
sort of thing.

00:31:02.186 --> 00:31:04.116 A:middle
So, you'll see that in the next

00:31:04.116 --> 00:31:06.576 A:middle
demo with attachments and

00:31:06.576 --> 00:31:08.156 A:middle
activities and screenshots in

00:31:08.156 --> 00:31:08.586 A:middle
action.

00:31:08.916 --> 00:31:10.796 A:middle
Please welcome Honza Dvorsky to

00:31:10.796 --> 00:31:10.976 A:middle
the stage.

00:31:11.516 --> 00:31:17.566 A:middle
[ Applause ]

00:31:18.066 --> 00:31:18.646 A:middle
&gt;&gt; Thank you Wil.

00:31:19.316 --> 00:31:21.616 A:middle
Good afternoon, my name is Honza

00:31:21.716 --> 00:31:23.546 A:middle
and today I'd like to show you

00:31:26.636 --> 00:31:29.836 A:middle
how we can organize your tests

00:31:29.836 --> 00:31:33.036 A:middle
using activities, then how to

00:31:33.036 --> 00:31:35.016 A:middle
screenshot your UI with the new

00:31:35.016 --> 00:31:37.696 A:middle
screenshot API, and finally how

00:31:37.696 --> 00:31:39.536 A:middle
to attach arbitrary data with

00:31:39.536 --> 00:31:40.286 A:middle
your tests.

00:31:40.996 --> 00:31:42.656 A:middle
So, we'll start by looking at

00:31:43.156 --> 00:31:44.606 A:middle
the test report of Warren's

00:31:44.606 --> 00:31:44.926 A:middle
test.

00:31:45.986 --> 00:31:46.816 A:middle
We can do that by

00:31:46.816 --> 00:31:48.116 A:middle
Control-clicking on the test

00:31:48.116 --> 00:31:49.796 A:middle
diamond and selecting

00:31:49.896 --> 00:31:50.696 A:middle
[inaudible] the report.

00:31:53.636 --> 00:31:55.506 A:middle
When we disclose the test, we

00:31:55.506 --> 00:31:56.946 A:middle
reveal the test to transcript.

00:31:57.486 --> 00:31:59.396 A:middle
The test transcript contains all

00:31:59.396 --> 00:32:01.756 A:middle
the details about our test, but

00:31:59.396 --> 00:32:01.756 A:middle
the details about our test, but

00:32:01.756 --> 00:32:03.166 A:middle
when it gets longer it can be

00:32:03.166 --> 00:32:04.166 A:middle
difficult to navigate.

00:32:07.076 --> 00:32:08.826 A:middle
In addition, what we see here

00:32:08.826 --> 00:32:10.726 A:middle
are these leveled steps like

00:32:10.726 --> 00:32:12.596 A:middle
these tabs and swipes, but it

00:32:12.596 --> 00:32:14.266 A:middle
would help us to organize our

00:32:14.266 --> 00:32:15.776 A:middle
test around these higher-level

00:32:15.776 --> 00:32:18.586 A:middle
tasks like launch the app or

00:32:18.586 --> 00:32:19.876 A:middle
compose in send a new message.

00:32:20.956 --> 00:32:23.356 A:middle
So, we'll use activities to do

00:32:23.356 --> 00:32:25.436 A:middle
just that.

00:32:27.096 --> 00:32:28.236 A:middle
We'll jump back to the source

00:32:28.606 --> 00:32:30.366 A:middle
and look for good candidates to

00:32:30.366 --> 00:32:31.376 A:middle
wrap in our first activity.

00:32:32.006 --> 00:32:33.366 A:middle
For example, this piece of code,

00:32:33.606 --> 00:32:34.976 A:middle
compose and send a new message

00:32:35.326 --> 00:32:36.016 A:middle
takes care of that.

00:32:36.406 --> 00:32:39.916 A:middle
So, we wrap it in an activity by

00:32:39.916 --> 00:32:42.316 A:middle
calling XCTContext.runActivity.

00:32:43.006 --> 00:32:44.356 A:middle
It takes two parameters, the

00:32:44.356 --> 00:32:45.406 A:middle
first is the name of the

00:32:45.406 --> 00:32:47.536 A:middle
activity, compose and send a new

00:32:47.536 --> 00:32:49.356 A:middle
message in our case, and the

00:32:49.356 --> 00:32:51.246 A:middle
second is the block, the block

00:32:51.246 --> 00:32:52.466 A:middle
represents the scope of the

00:32:52.466 --> 00:32:52.906 A:middle
activity.

00:32:53.786 --> 00:32:56.006 A:middle
But we'll close it down here and

00:32:57.216 --> 00:32:59.036 A:middle
that's it, that's all you need

00:32:59.036 --> 00:33:00.736 A:middle
to do to wrap a piece of code in

00:32:59.036 --> 00:33:00.736 A:middle
to do to wrap a piece of code in

00:33:00.736 --> 00:33:01.226 A:middle
an activity.

00:33:02.776 --> 00:33:04.276 A:middle
Now I'll sprinkle more

00:33:04.276 --> 00:33:09.066 A:middle
activities around this test.

00:33:09.066 --> 00:33:10.826 A:middle
And we'll rerun the test to see

00:33:10.826 --> 00:33:12.126 A:middle
how the test report changed.

00:33:12.736 --> 00:33:16.736 A:middle
You can see that I wrapped the

00:33:16.736 --> 00:33:18.986 A:middle
launching of the Reader app, the

00:33:18.986 --> 00:33:20.006 A:middle
verification of the first

00:33:20.006 --> 00:33:22.446 A:middle
message, the activation of the

00:33:22.446 --> 00:33:24.306 A:middle
Writer app, the composing and

00:33:24.306 --> 00:33:25.886 A:middle
sending a new message and so on.

00:33:26.886 --> 00:33:29.066 A:middle
Now this is the same exact test

00:33:29.166 --> 00:33:31.446 A:middle
that Warren wrote here, but this

00:33:31.486 --> 00:33:33.246 A:middle
time the activities and the

00:33:33.246 --> 00:33:35.206 A:middle
names we give them are getting

00:33:35.206 --> 00:33:37.766 A:middle
included in the output as

00:33:37.766 --> 00:33:38.916 A:middle
first-class citizens.

00:33:39.586 --> 00:33:43.936 A:middle
So, we send our message, verify

00:33:43.936 --> 00:33:45.866 A:middle
that it's the right one, and

00:33:47.936 --> 00:33:48.816 A:middle
we're done.

00:33:49.016 --> 00:33:50.516 A:middle
So, let's go back to the test

00:33:50.516 --> 00:33:50.976 A:middle
report now.

00:33:55.176 --> 00:33:56.876 A:middle
When we reveal the transcript

00:33:56.876 --> 00:33:58.566 A:middle
now we can see it's much shorter

00:33:59.086 --> 00:34:00.206 A:middle
and in addition, it better

00:33:59.086 --> 00:34:00.206 A:middle
and in addition, it better

00:34:00.206 --> 00:34:02.106 A:middle
describes what our test does.

00:34:02.466 --> 00:34:04.026 A:middle
It launches the Reader app,

00:34:04.536 --> 00:34:06.006 A:middle
verifies the first message,

00:34:06.386 --> 00:34:07.656 A:middle
activates the Writer app,

00:34:07.806 --> 00:34:09.306 A:middle
composes and sends a new message

00:34:09.306 --> 00:34:09.766 A:middle
and so on.

00:34:10.485 --> 00:34:11.656 A:middle
But if you still need to know

00:34:11.656 --> 00:34:13.166 A:middle
all the details about that

00:34:13.166 --> 00:34:15.156 A:middle
activity all the sub activities

00:34:15.226 --> 00:34:16.755 A:middle
are hidden one level deeper.

00:34:17.726 --> 00:34:19.556 A:middle
So, activities are a great way

00:34:19.556 --> 00:34:23.226 A:middle
to organize your tests.

00:34:23.275 --> 00:34:25.166 A:middle
Now let's switch gears a little

00:34:25.536 --> 00:34:25.676 A:middle
bit.

00:34:25.676 --> 00:34:27.926 A:middle
Our designers that helped us

00:34:27.926 --> 00:34:30.676 A:middle
with our app wanted to make sure

00:34:30.676 --> 00:34:32.255 A:middle
that our message cells here

00:34:32.746 --> 00:34:33.866 A:middle
follow their beautiful

00:34:33.866 --> 00:34:35.216 A:middle
specification exactly.

00:34:35.956 --> 00:34:37.565 A:middle
So, what we'll do is write a UI

00:34:37.565 --> 00:34:39.795 A:middle
test which captures the visual

00:34:39.795 --> 00:34:42.315 A:middle
state of the app and then we'll

00:34:42.315 --> 00:34:44.076 A:middle
run this test every night on our

00:34:44.076 --> 00:34:44.456 A:middle
bots.

00:34:44.906 --> 00:34:46.346 A:middle
This way, our designers can come

00:34:46.346 --> 00:34:47.926 A:middle
in and see what the app looks

00:34:47.956 --> 00:34:49.036 A:middle
like anytime they want.

00:34:49.696 --> 00:34:53.426 A:middle
So, this is a new class visual

00:34:53.426 --> 00:34:54.315 A:middle
validation tests.

00:34:54.315 --> 00:34:56.806 A:middle
I already have the code to

00:34:56.876 --> 00:34:58.186 A:middle
launch the app in the state I

00:34:58.186 --> 00:35:00.196 A:middle
want it in and I also have this

00:34:58.186 --> 00:35:00.196 A:middle
want it in and I also have this

00:35:00.196 --> 00:35:01.376 A:middle
empty activity gather

00:35:01.376 --> 00:35:03.156 A:middle
screenshots and this is where

00:35:03.156 --> 00:35:04.546 A:middle
we'll place our screenshots now.

00:35:05.386 --> 00:35:06.746 A:middle
We'll capture two screenshots,

00:35:06.746 --> 00:35:08.436 A:middle
the first of the full-screen of

00:35:08.436 --> 00:35:11.056 A:middle
the app and one of just the

00:35:11.056 --> 00:35:11.986 A:middle
first message cell.

00:35:12.516 --> 00:35:16.076 A:middle
So, to capture the full screen

00:35:16.366 --> 00:35:18.566 A:middle
we use the new XCUIScreen API to

00:35:18.566 --> 00:35:20.416 A:middle
get a handle to the main screen.

00:35:21.546 --> 00:35:23.456 A:middle
Now as Wil mentioned, XCUIScreen

00:35:23.456 --> 00:35:25.336 A:middle
conforms to XCUI screenshot

00:35:25.336 --> 00:35:27.216 A:middle
providing so we can just simply

00:35:27.216 --> 00:35:29.006 A:middle
ask it for a screenshot of

00:35:29.006 --> 00:35:29.396 A:middle
itself.

00:35:29.426 --> 00:35:32.676 A:middle
Now we have the screenshot in

00:35:32.676 --> 00:35:34.106 A:middle
memory and we somehow want to

00:35:34.186 --> 00:35:36.476 A:middle
persist it with our test and

00:35:36.476 --> 00:35:37.726 A:middle
this is where attachments come

00:35:37.726 --> 00:35:37.926 A:middle
in.

00:35:38.256 --> 00:35:41.766 A:middle
Attachments can hold any data

00:35:42.086 --> 00:35:43.666 A:middle
and XCTAttachment provides

00:35:43.666 --> 00:35:45.096 A:middle
convenience initializers for

00:35:45.096 --> 00:35:46.846 A:middle
types like strings, files,

00:35:46.846 --> 00:35:48.056 A:middle
images and screenshots.

00:35:48.446 --> 00:35:50.986 A:middle
So, we'll create a new

00:35:50.986 --> 00:35:52.156 A:middle
attachment to hold our

00:35:52.156 --> 00:35:52.786 A:middle
screenshots.

00:35:54.276 --> 00:35:56.936 A:middle
Now as Wil mentioned, the

00:35:56.936 --> 00:35:58.686 A:middle
attachments get deleted whenever

00:35:58.686 --> 00:36:00.146 A:middle
the test passes, it's a default

00:35:58.686 --> 00:36:00.146 A:middle
the test passes, it's a default

00:36:00.146 --> 00:36:00.596 A:middle
behavior.

00:36:01.606 --> 00:36:02.946 A:middle
But in our case here we want to

00:36:02.946 --> 00:36:04.266 A:middle
persist these attachments

00:36:04.316 --> 00:36:05.876 A:middle
regardless of the test result.

00:36:06.416 --> 00:36:07.926 A:middle
We can do a separate attachment

00:36:08.396 --> 00:36:10.936 A:middle
by customizing its lifetime to

00:36:10.936 --> 00:36:11.906 A:middle
keep always.

00:36:13.176 --> 00:36:14.496 A:middle
And finally, we add this

00:36:14.496 --> 00:36:16.526 A:middle
attachment to an activity, we'll

00:36:16.526 --> 00:36:18.386 A:middle
add it to this activity that

00:36:18.386 --> 00:36:19.366 A:middle
represents our gather

00:36:19.366 --> 00:36:19.976 A:middle
screenshots.

00:36:24.286 --> 00:36:25.676 A:middle
Now we captured the full screen,

00:36:25.676 --> 00:36:27.276 A:middle
we also wanted to capture just

00:36:27.276 --> 00:36:28.416 A:middle
the first message cell.

00:36:28.506 --> 00:36:31.586 A:middle
So, we first used the existing

00:36:31.936 --> 00:36:33.696 A:middle
UI testing API to get an

00:36:33.696 --> 00:36:35.266 A:middle
XCUIElement for the cell.

00:36:36.166 --> 00:36:38.036 A:middle
An XCUIElement also conforms to

00:36:38.036 --> 00:36:40.156 A:middle
XCUI screenshot providing so we

00:36:40.156 --> 00:36:41.576 A:middle
can just follow the same steps

00:36:41.576 --> 00:36:41.806 A:middle
here.

00:36:42.306 --> 00:36:44.336 A:middle
We ask the cell for a screenshot

00:36:44.336 --> 00:36:46.056 A:middle
of itself, we create an

00:36:46.056 --> 00:36:47.556 A:middle
attachment for it, customize its

00:36:47.556 --> 00:36:49.426 A:middle
lifetime and add the attachment

00:36:49.426 --> 00:36:50.036 A:middle
to the activity.

00:36:51.416 --> 00:36:52.986 A:middle
So, let's run the test now and

00:36:52.986 --> 00:36:53.576 A:middle
see what we get.

00:36:59.046 --> 00:37:01.136 A:middle
This is a simple test that just

00:36:59.046 --> 00:37:01.136 A:middle
This is a simple test that just

00:37:01.136 --> 00:37:03.956 A:middle
launches our app and captures

00:37:03.956 --> 00:37:06.516 A:middle
the two screenshots, adds those

00:37:06.516 --> 00:37:08.176 A:middle
two screenshots as attachments

00:37:08.176 --> 00:37:08.976 A:middle
and finishes.

00:37:14.186 --> 00:37:14.536 A:middle
That's it.

00:37:14.856 --> 00:37:16.636 A:middle
So, we go to the test report.

00:37:17.176 --> 00:37:23.076 A:middle
Now when we reveal the test we

00:37:23.076 --> 00:37:25.096 A:middle
see our gather screenshots

00:37:25.096 --> 00:37:28.246 A:middle
activity and it contains our two

00:37:28.246 --> 00:37:29.086 A:middle
attachments and [inaudible]

00:37:29.086 --> 00:37:29.816 A:middle
activity.

00:37:30.226 --> 00:37:32.086 A:middle
So, this is the attachment that

00:37:32.086 --> 00:37:34.416 A:middle
represents the first main screen

00:37:34.416 --> 00:37:36.496 A:middle
screenshot and this represents

00:37:36.496 --> 00:37:37.616 A:middle
the screenshot of just the

00:37:37.616 --> 00:37:38.196 A:middle
message cell.

00:37:38.986 --> 00:37:41.146 A:middle
We could use this QuickLook icon

00:37:41.146 --> 00:37:43.226 A:middle
here to get a preview window for

00:37:43.226 --> 00:37:45.296 A:middle
it, but in fact I want to use

00:37:45.296 --> 00:37:47.486 A:middle
this the Assistant Editor to do

00:37:47.486 --> 00:37:47.766 A:middle
that.

00:37:52.046 --> 00:37:53.476 A:middle
So, we just select the right

00:37:53.736 --> 00:37:56.286 A:middle
screenshot and this is our

00:37:56.386 --> 00:37:59.426 A:middle
full-screen screenshot and this

00:37:59.426 --> 00:38:00.626 A:middle
is the screenshot of just the

00:37:59.426 --> 00:38:00.626 A:middle
is the screenshot of just the

00:38:00.626 --> 00:38:01.516 A:middle
first message cell.

00:38:02.446 --> 00:38:04.226 A:middle
So, now you can see how super

00:38:04.226 --> 00:38:06.146 A:middle
easy it is to capture, oh

00:38:06.146 --> 00:38:06.396 A:middle
thanks.

00:38:07.516 --> 00:38:12.546 A:middle
[ Applause ]

00:38:13.046 --> 00:38:14.216 A:middle
Now you can see how easy it is

00:38:14.216 --> 00:38:15.946 A:middle
to really capture any screen or

00:38:15.946 --> 00:38:17.036 A:middle
element you have in your app

00:38:17.526 --> 00:38:19.236 A:middle
with the new screenshot API and

00:38:19.616 --> 00:38:21.276 A:middle
attach it to the test with the

00:38:21.276 --> 00:38:22.376 A:middle
new attachments API.

00:38:22.376 --> 00:38:25.806 A:middle
I really hope you give it a try.

00:38:25.976 --> 00:38:27.516 A:middle
Okay and with that I would like

00:38:27.516 --> 00:38:28.826 A:middle
to invite Wil back to wrap

00:38:28.826 --> 00:38:29.536 A:middle
things up for us.

00:38:29.806 --> 00:38:29.976 A:middle
Wil.

00:38:30.516 --> 00:38:36.686 A:middle
[ Applause ]

00:38:37.186 --> 00:38:38.866 A:middle
&gt;&gt; Thanks Honza, that is pretty

00:38:38.866 --> 00:38:40.396 A:middle
awesome stuff, you can see just

00:38:40.396 --> 00:38:41.956 A:middle
how easy activities make it to

00:38:41.956 --> 00:38:43.956 A:middle
improve the test structure and

00:38:43.956 --> 00:38:45.176 A:middle
capturing rich data with

00:38:45.176 --> 00:38:46.956 A:middle
attachments will make fixing

00:38:46.956 --> 00:38:48.346 A:middle
your test failures simpler than

00:38:48.346 --> 00:38:50.596 A:middle
ever and screenshots, I mean who

00:38:50.596 --> 00:38:51.606 A:middle
doesn't love screenshots.

00:38:52.216 --> 00:38:53.436 A:middle
Activities, attachments and

00:38:53.436 --> 00:38:54.926 A:middle
screenshots it's a great new set

00:38:54.926 --> 00:38:56.606 A:middle
of technologies for use in your

00:38:56.606 --> 00:38:57.126 A:middle
tests.

00:38:57.626 --> 00:39:00.346 A:middle
So, we started off with what's

00:38:57.626 --> 00:39:00.346 A:middle
So, we started off with what's

00:39:00.346 --> 00:39:01.636 A:middle
new in testing and as you can

00:39:01.636 --> 00:39:02.396 A:middle
see, quite a lot.

00:39:03.156 --> 00:39:04.996 A:middle
We have many new APIs for you to

00:39:04.996 --> 00:39:06.476 A:middle
use and we didn't even touch on

00:39:06.476 --> 00:39:07.416 A:middle
all of them here today.

00:39:08.236 --> 00:39:11.656 A:middle
So, we have lots of new APIs and

00:39:12.086 --> 00:39:14.376 A:middle
we have the new workflow and

00:39:14.376 --> 00:39:15.896 A:middle
continuous integration features

00:39:15.986 --> 00:39:18.216 A:middle
in Xcode, Xcodebuild and Xcode

00:39:18.216 --> 00:39:20.346 A:middle
Server and we have those great

00:39:20.346 --> 00:39:21.986 A:middle
performance improvements in UI

00:39:21.986 --> 00:39:22.406 A:middle
testing.

00:39:22.486 --> 00:39:25.676 A:middle
So, thanks for coming today.

00:39:26.066 --> 00:39:27.876 A:middle
The session, page session of

00:39:27.906 --> 00:39:30.346 A:middle
that link above has all the

00:39:30.346 --> 00:39:31.746 A:middle
related resources and

00:39:31.746 --> 00:39:33.076 A:middle
documentation, everything you're

00:39:33.076 --> 00:39:33.626 A:middle
looking for.

00:39:34.376 --> 00:39:36.036 A:middle
And of course, we have lots of

00:39:36.036 --> 00:39:38.076 A:middle
sessions in the past and one

00:39:38.076 --> 00:39:39.156 A:middle
tomorrow that I encourage you to

00:39:39.156 --> 00:39:39.686 A:middle
check out.

00:39:40.286 --> 00:39:42.196 A:middle
Also, the previous years'

00:39:42.196 --> 00:39:43.646 A:middle
sessions have some really great

00:39:43.646 --> 00:39:45.206 A:middle
information about other parts of

00:39:45.206 --> 00:39:47.426 A:middle
testing in Xcode that we didn't

00:39:47.426 --> 00:39:48.656 A:middle
really take a close look at

00:39:48.746 --> 00:39:49.016 A:middle
today.

00:39:49.516 --> 00:39:49.846 A:middle
Thanks.
