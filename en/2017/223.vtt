WEBVTT

00:00:18.516 --> 00:00:22.066 A:middle
[ Applause ]

00:00:22.566 --> 00:00:23.626 A:middle
&gt;&gt; Good morning.

00:00:24.006 --> 00:00:25.986 A:middle
Welcome to Drag and Drop with

00:00:25.986 --> 00:00:27.436 A:middle
collection and table view.

00:00:28.096 --> 00:00:29.016 A:middle
I'm Tyler Fox.

00:00:29.016 --> 00:00:30.106 A:middle
I'll later be joined by my

00:00:30.106 --> 00:00:31.536 A:middle
colleague Mohammed Jisrawi.

00:00:32.166 --> 00:00:32.996 A:middle
And unfortunately our

00:00:32.996 --> 00:00:34.506 A:middle
co-presenter Steve Breen had a

00:00:34.506 --> 00:00:36.116 A:middle
last minute medical emergency

00:00:36.446 --> 00:00:38.686 A:middle
earlier this week, so he's been

00:00:38.686 --> 00:00:40.216 A:middle
an amazing trooper and has been

00:00:40.216 --> 00:00:41.786 A:middle
recovering quickly but

00:00:41.786 --> 00:00:42.776 A:middle
unfortunately can't join us on

00:00:42.776 --> 00:00:43.366 A:middle
stage today.

00:00:43.756 --> 00:00:44.576 A:middle
So just a quick round of

00:00:44.576 --> 00:00:45.586 A:middle
applause, because he contributed

00:00:45.586 --> 00:00:46.666 A:middle
a lot to the stuff we're going

00:00:46.666 --> 00:00:48.956 A:middle
to talk about today.

00:00:50.076 --> 00:00:52.876 A:middle
So with that, let's talk about

00:00:52.876 --> 00:00:54.446 A:middle
Drag and Drop in collection and

00:00:54.446 --> 00:00:55.306 A:middle
table views.

00:00:56.156 --> 00:00:58.466 A:middle
We built a nice little app to

00:00:58.466 --> 00:01:00.006 A:middle
showcase some of the ways that

00:01:00.006 --> 00:01:01.506 A:middle
you can use Drag and Drop in

00:01:01.506 --> 00:01:02.576 A:middle
collection and table view.

00:01:03.226 --> 00:01:04.706 A:middle
In this app, it's a nice photo

00:01:04.706 --> 00:01:06.276 A:middle
library where we have albums and

00:01:06.276 --> 00:01:07.546 A:middle
photos in each of those albums,

00:01:07.776 --> 00:01:09.146 A:middle
and you can drag photos around

00:01:09.146 --> 00:01:10.416 A:middle
from one album to another.

00:01:10.846 --> 00:01:12.736 A:middle
You can even actually drop them

00:01:12.736 --> 00:01:14.396 A:middle
directly into that table view of

00:01:14.396 --> 00:01:15.416 A:middle
each of the albums.

00:01:15.826 --> 00:01:17.436 A:middle
And you can reorder photos

00:01:17.506 --> 00:01:19.026 A:middle
within the actual collection

00:01:19.026 --> 00:01:19.396 A:middle
views.

00:01:19.686 --> 00:01:21.066 A:middle
So we're going to show you how

00:01:21.066 --> 00:01:22.546 A:middle
you can actually use our new

00:01:22.546 --> 00:01:24.886 A:middle
APIs and iOS 11 to add Drag and

00:01:24.886 --> 00:01:25.976 A:middle
Drop to collection and table

00:01:25.976 --> 00:01:28.446 A:middle
views in all of your apps.

00:01:28.916 --> 00:01:30.476 A:middle
Now, you've probably been to

00:01:30.476 --> 00:01:31.686 A:middle
some of the sessions earlier

00:01:31.686 --> 00:01:33.876 A:middle
this week about all of this new

00:01:33.876 --> 00:01:35.706 A:middle
great API that we have in UIKit

00:01:35.706 --> 00:01:36.486 A:middle
for Drag and Drop.

00:01:37.306 --> 00:01:38.966 A:middle
So we have this great new drag

00:01:38.966 --> 00:01:40.576 A:middle
interaction and drop interaction

00:01:40.576 --> 00:01:41.506 A:middle
API layer.

00:01:41.856 --> 00:01:43.296 A:middle
We have new enhancements to NS

00:01:43.296 --> 00:01:45.796 A:middle
item provider in iOS 11, but

00:01:45.796 --> 00:01:47.236 A:middle
today, we're going to focus on

00:01:47.236 --> 00:01:48.216 A:middle
UICollectionView and

00:01:48.216 --> 00:01:49.526 A:middle
UITtableView, of course.

00:01:49.876 --> 00:01:51.446 A:middle
And we have new higher level

00:01:51.446 --> 00:01:53.666 A:middle
APIs specific for those classes.

00:01:53.666 --> 00:01:56.226 A:middle
So you might be wondering why do

00:01:56.226 --> 00:01:57.916 A:middle
we need new APIs just for

00:01:57.916 --> 00:01:59.166 A:middle
collection and table view?

00:01:59.546 --> 00:02:00.516 A:middle
It's a great question.

00:02:01.356 --> 00:02:03.446 A:middle
We wanted to build some specific

00:02:03.446 --> 00:02:05.246 A:middle
APIs that are focused around

00:02:05.376 --> 00:02:06.996 A:middle
cells and index paths.

00:02:06.996 --> 00:02:08.216 A:middle
As you know, collection and

00:02:08.216 --> 00:02:10.046 A:middle
table view are composite views

00:02:10.046 --> 00:02:11.826 A:middle
that build up a lot of smaller

00:02:11.826 --> 00:02:13.276 A:middle
cells to display on screen.

00:02:14.226 --> 00:02:15.556 A:middle
And so we realized we can help

00:02:15.556 --> 00:02:16.936 A:middle
you out a lot by speaking in

00:02:16.936 --> 00:02:18.616 A:middle
those native cell and index path

00:02:18.716 --> 00:02:19.956 A:middle
terms that you're familiar with.

00:02:20.956 --> 00:02:22.756 A:middle
We also wanted to make it easy

00:02:22.756 --> 00:02:24.456 A:middle
to build fluid animations and

00:02:24.456 --> 00:02:25.656 A:middle
get consistent behavior with

00:02:25.656 --> 00:02:26.886 A:middle
your collection and table views

00:02:26.886 --> 00:02:27.836 A:middle
across the system.

00:02:29.036 --> 00:02:30.396 A:middle
And we also recognized there are

00:02:30.396 --> 00:02:32.006 A:middle
some specific challenges with

00:02:32.006 --> 00:02:33.456 A:middle
collection and table view to

00:02:33.456 --> 00:02:34.716 A:middle
handle a synchronous data

00:02:34.716 --> 00:02:35.106 A:middle
loading.

00:02:35.106 --> 00:02:36.396 A:middle
We have some really cool new

00:02:36.396 --> 00:02:37.516 A:middle
stuff that we're really excited

00:02:37.516 --> 00:02:38.456 A:middle
to share with you later in the

00:02:38.456 --> 00:02:38.916 A:middle
session.

00:02:39.936 --> 00:02:41.876 A:middle
Finally I'd like to make a note

00:02:41.876 --> 00:02:42.936 A:middle
that throughout this talk we're

00:02:42.936 --> 00:02:44.536 A:middle
going to be showing examples of

00:02:44.536 --> 00:02:45.826 A:middle
collection view and table view

00:02:45.826 --> 00:02:47.976 A:middle
code but you should know that we

00:02:47.976 --> 00:02:49.796 A:middle
have a consistent API for both

00:02:49.796 --> 00:02:51.056 A:middle
of these classes, so sometimes

00:02:51.056 --> 00:02:52.046 A:middle
we're going to show one or the

00:02:52.046 --> 00:02:53.696 A:middle
other and you should know that

00:02:53.696 --> 00:02:54.746 A:middle
[inaudible] some small naming

00:02:54.746 --> 00:02:56.146 A:middle
differences, everything applies

00:02:56.146 --> 00:02:57.006 A:middle
equally to both.

00:02:57.006 --> 00:02:58.306 A:middle
We'll call out the differences

00:02:58.306 --> 00:02:58.986 A:middle
when there are some.

00:02:59.266 --> 00:03:00.716 A:middle
With that, let's go through our

00:03:00.716 --> 00:03:01.436 A:middle
agenda for today.

00:03:01.436 --> 00:03:03.476 A:middle
We're going to start by covering

00:03:03.556 --> 00:03:04.376 A:middle
the basics.

00:03:04.486 --> 00:03:05.846 A:middle
How you can very quickly just

00:03:05.846 --> 00:03:07.116 A:middle
get Drag and Drop up and running

00:03:07.116 --> 00:03:08.406 A:middle
in collection and table views.

00:03:08.876 --> 00:03:10.716 A:middle
And then we're going to focus on

00:03:10.906 --> 00:03:12.106 A:middle
perfecting drops.

00:03:12.466 --> 00:03:13.666 A:middle
With just a little bit more

00:03:13.666 --> 00:03:15.816 A:middle
work, you can make your Drag and

00:03:15.816 --> 00:03:17.296 A:middle
Drop experience in collection

00:03:17.296 --> 00:03:18.356 A:middle
and table view just look

00:03:18.466 --> 00:03:18.966 A:middle
awesome.

00:03:18.966 --> 00:03:19.806 A:middle
And we'll show you some really

00:03:19.806 --> 00:03:21.606 A:middle
cool animations you can add and

00:03:21.606 --> 00:03:22.556 A:middle
a whole bunch of great stuff.

00:03:23.166 --> 00:03:24.386 A:middle
And finally we'll talk about

00:03:24.386 --> 00:03:26.486 A:middle
final touches, some really nice

00:03:26.756 --> 00:03:28.136 A:middle
customizations and additional

00:03:28.136 --> 00:03:28.926 A:middle
things that you can take

00:03:28.926 --> 00:03:30.346 A:middle
advantage of to make that

00:03:30.346 --> 00:03:31.636 A:middle
experience really shine.

00:03:32.426 --> 00:03:33.606 A:middle
To start, I'd like to bring up

00:03:33.606 --> 00:03:35.286 A:middle
Mohammed to tell you all about

00:03:35.286 --> 00:03:36.636 A:middle
the basics of getting Drag and

00:03:36.636 --> 00:03:37.806 A:middle
Drop in your collection and

00:03:37.806 --> 00:03:38.426 A:middle
table views.

00:03:38.466 --> 00:03:38.976 A:middle
Mohammed.

00:03:39.516 --> 00:03:44.636 A:middle
[ Applause ]

00:03:45.136 --> 00:03:45.746 A:middle
&gt;&gt; Thanks Tyler.

00:03:47.066 --> 00:03:48.576 A:middle
We wanted to make adopting Drag

00:03:48.576 --> 00:03:50.176 A:middle
and Drop in your apps with

00:03:50.176 --> 00:03:51.206 A:middle
collection and table view as

00:03:51.266 --> 00:03:52.256 A:middle
easy as possible.

00:03:52.456 --> 00:03:54.336 A:middle
So to help you do that we're

00:03:54.336 --> 00:03:56.446 A:middle
introducing two new delegates on

00:03:56.446 --> 00:03:58.166 A:middle
both collection and table view.

00:03:59.036 --> 00:04:00.946 A:middle
The first is the dragDelegate,

00:04:01.416 --> 00:04:04.566 A:middle
which has methods for initiating

00:04:04.566 --> 00:04:05.926 A:middle
and customizing drags.

00:04:06.656 --> 00:04:08.596 A:middle
And second is the dropDelegate,

00:04:08.986 --> 00:04:11.286 A:middle
which has methods for completing

00:04:11.286 --> 00:04:11.596 A:middle
drags.

00:04:11.596 --> 00:04:13.416 A:middle
So basically data transfer,

00:04:13.786 --> 00:04:15.826 A:middle
customizing drop animations,

00:04:15.886 --> 00:04:17.126 A:middle
things like that.

00:04:17.986 --> 00:04:19.966 A:middle
It's important to note that

00:04:19.966 --> 00:04:21.116 A:middle
these two protocols are

00:04:21.116 --> 00:04:22.586 A:middle
completely independent.

00:04:22.986 --> 00:04:25.176 A:middle
You can use one or the other, if

00:04:25.176 --> 00:04:26.276 A:middle
you want one-half of the

00:04:26.276 --> 00:04:29.916 A:middle
experience or you can use both

00:04:30.016 --> 00:04:31.736 A:middle
to have both Drag and Drop.

00:04:32.016 --> 00:04:33.706 A:middle
Using both also unlocks

00:04:33.706 --> 00:04:35.136 A:middle
additional functionality like

00:04:35.136 --> 00:04:36.846 A:middle
reordering within your

00:04:36.846 --> 00:04:38.096 A:middle
collection or table view.

00:04:39.386 --> 00:04:40.906 A:middle
Implementing drags is pretty

00:04:40.906 --> 00:04:41.566 A:middle
straightforward.

00:04:41.846 --> 00:04:45.156 A:middle
You conform to dragDelegate and

00:04:45.156 --> 00:04:49.196 A:middle
implement one required method.

00:04:49.226 --> 00:04:50.956 A:middle
Items for beginning session at

00:04:50.956 --> 00:04:52.866 A:middle
index paths is called when the

00:04:52.866 --> 00:04:54.676 A:middle
user initiates a drag out of

00:04:54.676 --> 00:04:55.516 A:middle
your collection view, so

00:04:55.516 --> 00:04:56.346 A:middle
basically when they start

00:04:56.346 --> 00:04:57.376 A:middle
dragging a cell.

00:04:57.976 --> 00:05:01.116 A:middle
It's the app's responsibility to

00:05:01.266 --> 00:05:03.706 A:middle
use the input session and index

00:05:03.706 --> 00:05:06.716 A:middle
path to figure out how to handle

00:05:06.716 --> 00:05:07.486 A:middle
that drag.

00:05:08.446 --> 00:05:11.236 A:middle
So returning an array of

00:05:11.236 --> 00:05:13.346 A:middle
UIDragItems initiates the drag,

00:05:13.856 --> 00:05:16.046 A:middle
whereas returning an empty array

00:05:16.046 --> 00:05:16.976 A:middle
causes the drag to be ignored.

00:05:20.386 --> 00:05:22.396 A:middle
You might remember that tapping

00:05:22.466 --> 00:05:24.256 A:middle
other items, or other views, in

00:05:24.256 --> 00:05:26.116 A:middle
your app to add them to a drag

00:05:26.116 --> 00:05:27.246 A:middle
that's already in progress is a

00:05:27.246 --> 00:05:28.956 A:middle
key experience of Drag and Drop

00:05:28.956 --> 00:05:29.606 A:middle
on iOS.

00:05:29.726 --> 00:05:32.776 A:middle
Opting into this behavior in

00:05:32.776 --> 00:05:34.146 A:middle
collection and table view is

00:05:34.146 --> 00:05:35.166 A:middle
really easy.

00:05:36.206 --> 00:05:37.786 A:middle
There's an optional method on

00:05:37.786 --> 00:05:39.676 A:middle
dragDelegate that's called

00:05:39.676 --> 00:05:41.846 A:middle
whenever you tap a cell in the

00:05:41.846 --> 00:05:44.226 A:middle
collection view while a drag

00:05:44.226 --> 00:05:45.486 A:middle
session's already in progress.

00:05:46.466 --> 00:05:48.096 A:middle
Items for adding to session at

00:05:48.096 --> 00:05:49.966 A:middle
index path point gives you the

00:05:49.966 --> 00:05:52.656 A:middle
opportunity to return drag items

00:05:52.936 --> 00:05:55.206 A:middle
to add to your in-progress drag.

00:05:56.076 --> 00:05:58.296 A:middle
Returning an empty array from

00:05:58.296 --> 00:05:59.786 A:middle
this method causes the tap to be

00:05:59.786 --> 00:06:00.646 A:middle
handled normally.

00:06:00.646 --> 00:06:02.476 A:middle
So it could be interpreted as a

00:06:02.476 --> 00:06:03.976 A:middle
cell selection, for example.

00:06:07.996 --> 00:06:10.496 A:middle
Accepting a drop is equally

00:06:10.496 --> 00:06:10.816 A:middle
easy.

00:06:10.906 --> 00:06:13.256 A:middle
Similar to the dragDelegate,

00:06:13.256 --> 00:06:14.776 A:middle
there's a single required method

00:06:15.226 --> 00:06:15.976 A:middle
to get you started.

00:06:17.326 --> 00:06:19.206 A:middle
Perform drop with coordinator

00:06:19.246 --> 00:06:21.686 A:middle
gets called when the user lifts

00:06:21.686 --> 00:06:23.056 A:middle
their finger over your

00:06:23.056 --> 00:06:24.386 A:middle
collection view releasing the

00:06:24.386 --> 00:06:25.316 A:middle
dragged items.

00:06:25.566 --> 00:06:28.726 A:middle
This method gives you the

00:06:28.726 --> 00:06:31.206 A:middle
opportunity to handle the drop

00:06:31.206 --> 00:06:33.446 A:middle
using the drop coordinator.

00:06:33.796 --> 00:06:35.386 A:middle
The drop coordinator provides a

00:06:35.386 --> 00:06:36.906 A:middle
lot of convenience methods for

00:06:36.906 --> 00:06:38.486 A:middle
you for doing things like

00:06:39.026 --> 00:06:41.086 A:middle
accessing the dropped items so

00:06:41.086 --> 00:06:42.196 A:middle
you can actually perform the

00:06:42.196 --> 00:06:43.126 A:middle
data transfer.

00:06:44.426 --> 00:06:46.216 A:middle
It gives you some really great

00:06:46.216 --> 00:06:47.916 A:middle
convenience methods for updating

00:06:47.916 --> 00:06:49.616 A:middle
your collection and table view.

00:06:49.966 --> 00:06:54.716 A:middle
And finally it gives you some

00:06:54.806 --> 00:06:57.366 A:middle
ways to specify some default

00:06:57.366 --> 00:06:59.166 A:middle
system animations for your drop.

00:06:59.726 --> 00:07:02.736 A:middle
So now that we've talked about

00:07:02.736 --> 00:07:04.126 A:middle
how easy it is to adopt Drag and

00:07:04.126 --> 00:07:05.386 A:middle
Drop in your collection table

00:07:05.386 --> 00:07:06.626 A:middle
views, let's take a look at it

00:07:06.626 --> 00:07:06.976 A:middle
with a demo.

00:07:17.096 --> 00:07:18.706 A:middle
So I'm going to start out with a

00:07:18.706 --> 00:07:20.586 A:middle
basic gallery application that

00:07:20.586 --> 00:07:21.836 A:middle
uses a collection view to

00:07:21.836 --> 00:07:23.436 A:middle
display a grid of photos.

00:07:23.756 --> 00:07:24.456 A:middle
And we're going to add the

00:07:24.456 --> 00:07:26.186 A:middle
ability to drag images out of

00:07:26.186 --> 00:07:27.486 A:middle
the collection view and to

00:07:27.516 --> 00:07:29.226 A:middle
import images back in by

00:07:29.226 --> 00:07:32.036 A:middle
dropping them from other apps.

00:07:32.036 --> 00:07:33.326 A:middle
So, as you see, I've already

00:07:33.326 --> 00:07:35.106 A:middle
started with kind of a stub

00:07:35.106 --> 00:07:35.966 A:middle
implementation of

00:07:35.966 --> 00:07:37.486 A:middle
itemsForBeginning Session at

00:07:37.486 --> 00:07:38.726 A:middle
IndexPath.

00:07:39.066 --> 00:07:41.936 A:middle
And I'm just going to add some

00:07:41.936 --> 00:07:45.266 A:middle
basic code that goes to our data

00:07:45.266 --> 00:07:48.916 A:middle
source, retrieves a photo model

00:07:48.916 --> 00:07:51.466 A:middle
object, and then pulls out a UI

00:07:51.466 --> 00:07:53.666 A:middle
image from this photo using our

00:07:54.016 --> 00:07:54.796 A:middle
image property.

00:07:55.546 --> 00:07:57.106 A:middle
Since UI image already conforms

00:07:57.106 --> 00:07:59.356 A:middle
to NSItemProvider writing, we

00:07:59.356 --> 00:08:00.906 A:middle
can just use it to create an

00:08:00.906 --> 00:08:01.816 A:middle
NSItemProvider.

00:08:02.516 --> 00:08:04.026 A:middle
For your own model object, if

00:08:04.026 --> 00:08:04.806 A:middle
you're dragging something other

00:08:04.806 --> 00:08:06.806 A:middle
than images, you'll have to make

00:08:06.806 --> 00:08:07.976 A:middle
sure that those objects conform

00:08:07.976 --> 00:08:09.046 A:middle
to NSItemProvider writing.

00:08:09.046 --> 00:08:10.016 A:middle
There's a great session about

00:08:10.016 --> 00:08:11.016 A:middle
that just after this.

00:08:12.356 --> 00:08:13.856 A:middle
Once we have the NSItemProvider,

00:08:13.856 --> 00:08:15.026 A:middle
we can use it to create a

00:08:15.026 --> 00:08:17.036 A:middle
UIDragItem which will return to

00:08:17.036 --> 00:08:18.626 A:middle
the system to start the drag.

00:08:19.316 --> 00:08:20.136 A:middle
So I'm good to go to start

00:08:20.136 --> 00:08:21.576 A:middle
dragging things, but I also want

00:08:21.576 --> 00:08:23.076 A:middle
to add the ability to flock

00:08:23.076 --> 00:08:24.876 A:middle
things to my in progress drag,

00:08:24.876 --> 00:08:26.676 A:middle
so I'm going to add an

00:08:26.676 --> 00:08:28.436 A:middle
implementation of items for

00:08:28.436 --> 00:08:30.506 A:middle
adding to session at IndexPath,

00:08:30.616 --> 00:08:30.976 A:middle
point.

00:08:30.976 --> 00:08:32.106 A:middle
And I'm just going to do the

00:08:32.106 --> 00:08:33.356 A:middle
same thing that I did in my

00:08:33.446 --> 00:08:35.126 A:middle
itemsForBeginning Session method

00:08:35.356 --> 00:08:37.806 A:middle
to just return a bunch of drag

00:08:37.806 --> 00:08:38.246 A:middle
items.

00:08:38.296 --> 00:08:40.266 A:middle
So let's build this real quick

00:08:40.266 --> 00:08:40.976 A:middle
and see what it looks like.

00:08:48.176 --> 00:08:49.616 A:middle
So I'm going to pull up the

00:08:49.616 --> 00:08:52.626 A:middle
photos app and pin it next to my

00:08:52.626 --> 00:08:53.866 A:middle
gallery app.

00:08:54.966 --> 00:08:55.936 A:middle
You'll see that I can now start

00:08:55.936 --> 00:08:57.036 A:middle
dragging things out of my

00:08:57.036 --> 00:08:59.306 A:middle
collection view, and, if I tap

00:08:59.586 --> 00:09:01.086 A:middle
some of these other cells, they

00:09:01.086 --> 00:09:02.686 A:middle
flock over to my in-progress

00:09:02.686 --> 00:09:04.186 A:middle
drag, and I can carry them over

00:09:04.186 --> 00:09:09.486 A:middle
to photos and let go to drop.

00:09:09.656 --> 00:09:11.286 A:middle
So now that we have dragging

00:09:11.286 --> 00:09:12.546 A:middle
items, let's look at adding --

00:09:12.726 --> 00:09:13.746 A:middle
accepting drops.

00:09:13.896 --> 00:09:16.656 A:middle
So, as we discussed earlier,

00:09:16.656 --> 00:09:17.866 A:middle
we'll have to implement the one

00:09:17.866 --> 00:09:19.396 A:middle
required method on collection

00:09:19.396 --> 00:09:20.236 A:middle
view dropDelegate,

00:09:20.706 --> 00:09:22.446 A:middle
performDropWith Coordinator.

00:09:23.886 --> 00:09:24.966 A:middle
Here we're going to take

00:09:24.966 --> 00:09:26.366 A:middle
advantage of the coordinator's

00:09:26.436 --> 00:09:28.156 A:middle
convenience methods to get some

00:09:28.156 --> 00:09:29.716 A:middle
information about the drop and

00:09:29.776 --> 00:09:30.866 A:middle
then actually perform it.

00:09:31.236 --> 00:09:32.906 A:middle
The first thing we'll want to do

00:09:32.906 --> 00:09:34.656 A:middle
is ask the coordinator for the

00:09:34.656 --> 00:09:36.206 A:middle
destination index path.

00:09:36.946 --> 00:09:39.446 A:middle
This IndexPath is derived from

00:09:39.446 --> 00:09:40.626 A:middle
the point at which the user

00:09:40.676 --> 00:09:42.346 A:middle
releases the dragged items.

00:09:42.956 --> 00:09:44.616 A:middle
Since that point could be over a

00:09:44.616 --> 00:09:45.756 A:middle
region of the collection or

00:09:45.756 --> 00:09:47.166 A:middle
table view that's completely

00:09:47.166 --> 00:09:48.686 A:middle
empty, it could be nil.

00:09:48.796 --> 00:09:50.386 A:middle
So we'll just handle that case

00:09:50.386 --> 00:09:53.076 A:middle
here by returning a zero zero

00:09:53.076 --> 00:09:53.866 A:middle
and inserting it at the --

00:09:53.956 --> 00:09:55.356 A:middle
inserting it at the beginning of

00:09:55.356 --> 00:09:56.296 A:middle
our collection view.

00:09:58.896 --> 00:10:01.306 A:middle
Next, we're going to take

00:10:01.306 --> 00:10:02.446 A:middle
advantage of a convenience

00:10:02.446 --> 00:10:04.546 A:middle
method on the drop session to

00:10:04.546 --> 00:10:06.146 A:middle
load all objects of a specific

00:10:06.146 --> 00:10:07.896 A:middle
class in the scenario UI image.

00:10:07.896 --> 00:10:08.816 A:middle
That's what we're interested in.

00:10:08.816 --> 00:10:11.126 A:middle
And then in load objects'

00:10:11.126 --> 00:10:13.966 A:middle
completion closure we'll update

00:10:13.966 --> 00:10:14.976 A:middle
our collection view, like we

00:10:14.976 --> 00:10:16.116 A:middle
normally would, by calling

00:10:16.116 --> 00:10:18.666 A:middle
perform match updates with some

00:10:18.666 --> 00:10:19.926 A:middle
data source updates using a

00:10:19.926 --> 00:10:21.836 A:middle
convenience method that we've

00:10:21.836 --> 00:10:23.136 A:middle
written in the past.

00:10:23.626 --> 00:10:25.096 A:middle
And we'll ask the collection

00:10:25.096 --> 00:10:26.596 A:middle
view to reload the first

00:10:26.596 --> 00:10:27.196 A:middle
section.

00:10:27.626 --> 00:10:28.976 A:middle
So let's give that a quick try.

00:10:38.226 --> 00:10:39.886 A:middle
So now I'm going to pick up a

00:10:40.326 --> 00:10:41.576 A:middle
couple of these photos from the

00:10:41.576 --> 00:10:43.326 A:middle
photo's app and I'm going to

00:10:43.326 --> 00:10:45.356 A:middle
just drop them over my

00:10:45.356 --> 00:10:48.066 A:middle
collection view to accept the

00:10:48.066 --> 00:10:48.406 A:middle
drop.

00:10:49.746 --> 00:10:53.266 A:middle
So I can pick up some items from

00:10:53.266 --> 00:10:54.746 A:middle
photos actually this time.

00:10:55.576 --> 00:10:57.596 A:middle
Go back over to my app and let

00:10:57.596 --> 00:10:58.716 A:middle
go to accept the drop.

00:11:02.016 --> 00:11:03.866 A:middle
[ Applause ]

00:11:03.866 --> 00:11:06.346 A:middle
Thank you.

00:11:07.036 --> 00:11:08.376 A:middle
So now that we've actually seen

00:11:08.376 --> 00:11:09.336 A:middle
what it looks like [laughter],

00:11:09.876 --> 00:11:12.076 A:middle
just by adding a couple of

00:11:12.076 --> 00:11:13.306 A:middle
methods, it was easy to get

00:11:13.306 --> 00:11:13.686 A:middle
started.

00:11:13.686 --> 00:11:15.586 A:middle
Now Tyler is going to talk about

00:11:16.006 --> 00:11:17.256 A:middle
how we can build some really

00:11:17.256 --> 00:11:18.596 A:middle
awesome drop animations.

00:11:19.646 --> 00:11:20.676 A:middle
&gt;&gt; Thank you.

00:11:21.516 --> 00:11:24.286 A:middle
[ Applause ]

00:11:24.786 --> 00:11:25.486 A:middle
Thanks Mohammed.

00:11:25.986 --> 00:11:26.486 A:middle
All right.

00:11:26.676 --> 00:11:27.926 A:middle
So let's turn our attention to

00:11:27.926 --> 00:11:29.276 A:middle
really focus in now on

00:11:29.456 --> 00:11:31.016 A:middle
perfecting these drops.

00:11:31.576 --> 00:11:33.866 A:middle
And I'll start by talking about

00:11:33.866 --> 00:11:34.596 A:middle
something called a drop

00:11:34.596 --> 00:11:35.066 A:middle
proposal.

00:11:35.386 --> 00:11:36.736 A:middle
So if you've been to some of the

00:11:36.736 --> 00:11:38.326 A:middle
earlier sessions on the other

00:11:38.326 --> 00:11:39.256 A:middle
APIs that are available in

00:11:39.256 --> 00:11:40.416 A:middle
UIKit, this might be familiar.

00:11:40.416 --> 00:11:42.576 A:middle
But a drop proposal is your way

00:11:42.736 --> 00:11:44.376 A:middle
to communicate to the system how

00:11:44.376 --> 00:11:45.616 A:middle
you'd like to handle the drop

00:11:45.616 --> 00:11:47.186 A:middle
session before the user actually

00:11:47.186 --> 00:11:48.786 A:middle
releases their touch to perform

00:11:48.786 --> 00:11:49.416 A:middle
the drop.

00:11:49.726 --> 00:11:51.046 A:middle
The system is going to ask you

00:11:51.046 --> 00:11:52.676 A:middle
to create and return a drop

00:11:52.676 --> 00:11:54.526 A:middle
proposal multiple times while

00:11:54.526 --> 00:11:55.966 A:middle
the user is dragging over the

00:11:55.966 --> 00:11:56.866 A:middle
collection or table view.

00:11:57.646 --> 00:11:59.066 A:middle
Now collection and table view,

00:11:59.116 --> 00:12:00.836 A:middle
each have subclasses of

00:12:00.836 --> 00:12:02.716 A:middle
UIDropProposal, and, as a

00:12:02.716 --> 00:12:03.786 A:middle
result, that means they each

00:12:03.786 --> 00:12:05.176 A:middle
have that same property that

00:12:05.176 --> 00:12:06.726 A:middle
comes from UIDropProposal, which

00:12:06.726 --> 00:12:07.536 A:middle
is an operation.

00:12:08.116 --> 00:12:10.176 A:middle
So this is a value like copy,

00:12:10.416 --> 00:12:12.906 A:middle
move, cancel, or forbidden, and

00:12:12.906 --> 00:12:14.376 A:middle
generally indicates whether or

00:12:14.376 --> 00:12:15.866 A:middle
not you're interested in this

00:12:15.866 --> 00:12:17.906 A:middle
particular drop session and how

00:12:17.906 --> 00:12:19.306 A:middle
you intend to handle the actual

00:12:19.306 --> 00:12:20.876 A:middle
data inside of that drop

00:12:20.876 --> 00:12:21.246 A:middle
session.

00:12:22.266 --> 00:12:23.516 A:middle
But collection and table view

00:12:23.646 --> 00:12:25.146 A:middle
drop proposals don't stop there.

00:12:25.246 --> 00:12:26.576 A:middle
They also have an additional

00:12:26.576 --> 00:12:28.706 A:middle
value, which is a drop intent.

00:12:29.306 --> 00:12:30.026 A:middle
What is this?

00:12:30.896 --> 00:12:31.816 A:middle
This is some additional

00:12:31.816 --> 00:12:33.136 A:middle
information that your app can

00:12:33.136 --> 00:12:34.506 A:middle
provide to the collection or

00:12:34.506 --> 00:12:36.346 A:middle
table view which will let the

00:12:36.346 --> 00:12:37.246 A:middle
collection or table view

00:12:37.246 --> 00:12:38.866 A:middle
actually update their appearance

00:12:38.866 --> 00:12:40.546 A:middle
during the drop session to

00:12:40.546 --> 00:12:43.296 A:middle
reflect what you intend to do.

00:12:43.936 --> 00:12:44.886 A:middle
So let's look at some of the

00:12:44.886 --> 00:12:46.366 A:middle
actual values for this drop

00:12:46.366 --> 00:12:47.926 A:middle
intent to understand it better.

00:12:48.396 --> 00:12:49.886 A:middle
We will start with the default

00:12:49.886 --> 00:12:51.826 A:middle
one, which is the drop intent

00:12:51.826 --> 00:12:52.646 A:middle
unspecified.

00:12:53.336 --> 00:12:55.156 A:middle
With this drop intent,

00:12:55.416 --> 00:12:56.706 A:middle
collection or table view won't

00:12:56.706 --> 00:12:58.246 A:middle
actually change their appearance

00:12:58.246 --> 00:12:59.726 A:middle
at all during the drop session.

00:13:00.076 --> 00:13:00.996 A:middle
As you can see here, when the

00:13:00.996 --> 00:13:02.426 A:middle
user's dragging around over it,

00:13:02.716 --> 00:13:04.266 A:middle
there's just a nice little badge

00:13:04.266 --> 00:13:06.016 A:middle
next to the drag preview and

00:13:06.016 --> 00:13:06.586 A:middle
that's it.

00:13:06.956 --> 00:13:07.976 A:middle
You might choose this drop

00:13:07.976 --> 00:13:09.356 A:middle
intent if you don't yet know,

00:13:09.356 --> 00:13:10.686 A:middle
for example, where the items

00:13:10.686 --> 00:13:11.906 A:middle
will end up when the user

00:13:11.906 --> 00:13:13.056 A:middle
actually realizes their finger

00:13:13.056 --> 00:13:13.886 A:middle
to perform the drop.

00:13:14.386 --> 00:13:15.866 A:middle
Or perhaps the drag session

00:13:15.866 --> 00:13:17.626 A:middle
contains a mix of items, where

00:13:17.626 --> 00:13:18.676 A:middle
they're going to end up in

00:13:18.676 --> 00:13:20.036 A:middle
different locations when the

00:13:20.036 --> 00:13:21.076 A:middle
actual drop occurs.

00:13:21.686 --> 00:13:23.266 A:middle
So that's the first drop intent.

00:13:23.266 --> 00:13:23.986 A:middle
Unspecified.

00:13:24.476 --> 00:13:25.936 A:middle
The second drop intent is

00:13:25.976 --> 00:13:28.026 A:middle
insertAtDestinationIndexPath.

00:13:28.826 --> 00:13:30.406 A:middle
With this drop intent, it means

00:13:30.406 --> 00:13:32.016 A:middle
that you intend to insert a new

00:13:32.016 --> 00:13:33.496 A:middle
item or row into the collection

00:13:33.496 --> 00:13:35.076 A:middle
or table view at the destination

00:13:35.076 --> 00:13:35.956 A:middle
index path.

00:13:36.206 --> 00:13:37.676 A:middle
And, as you can see, collection

00:13:37.676 --> 00:13:38.656 A:middle
and table view will actually

00:13:38.656 --> 00:13:40.776 A:middle
open up a gap at this location

00:13:40.956 --> 00:13:42.136 A:middle
to let the user know that's the

00:13:42.136 --> 00:13:43.336 A:middle
location where their drop will

00:13:43.336 --> 00:13:43.966 A:middle
be accepted.

00:13:44.976 --> 00:13:47.176 A:middle
The third drop intent is

00:13:47.246 --> 00:13:49.386 A:middle
insertIntoDestinationIndexPath.

00:13:50.356 --> 00:13:52.476 A:middle
This is something that you want

00:13:52.476 --> 00:13:54.256 A:middle
to use when the user is dragging

00:13:54.256 --> 00:13:56.426 A:middle
over a cell that represents some

00:13:56.426 --> 00:13:58.176 A:middle
sort of container of items.

00:13:58.176 --> 00:14:00.266 A:middle
For example, here we have photo

00:14:00.266 --> 00:14:02.396 A:middle
albums, containers of photos, or

00:14:02.396 --> 00:14:04.026 A:middle
maybe you have a folder cell or

00:14:04.026 --> 00:14:04.866 A:middle
a list cell.

00:14:05.646 --> 00:14:06.856 A:middle
In this case, you intend to

00:14:06.856 --> 00:14:09.016 A:middle
insert the dropped items inside

00:14:09.016 --> 00:14:09.796 A:middle
of that container.

00:14:10.236 --> 00:14:11.776 A:middle
And so, table view, for example,

00:14:11.776 --> 00:14:13.276 A:middle
is going to highlight the row at

00:14:13.276 --> 00:14:14.546 A:middle
the destination index path so

00:14:14.546 --> 00:14:15.986 A:middle
the user knows that the drop

00:14:15.986 --> 00:14:17.356 A:middle
will be accepted inside that

00:14:17.356 --> 00:14:17.616 A:middle
row.

00:14:18.246 --> 00:14:20.926 A:middle
Now there's one more drop intent

00:14:20.926 --> 00:14:22.426 A:middle
value which is specific to

00:14:22.426 --> 00:14:24.186 A:middle
UITableView and that's the

00:14:24.236 --> 00:14:25.746 A:middle
automatic drop intent.

00:14:26.796 --> 00:14:27.656 A:middle
This is something that you

00:14:27.656 --> 00:14:28.986 A:middle
should use instead of

00:14:29.136 --> 00:14:31.306 A:middle
insertIntoDestinationIndexPath.

00:14:31.626 --> 00:14:33.246 A:middle
And this drop intent means that

00:14:33.246 --> 00:14:34.996 A:middle
you can either drop into an

00:14:34.996 --> 00:14:37.006 A:middle
existing container row at that

00:14:37.006 --> 00:14:38.996 A:middle
index path or you could move the

00:14:38.996 --> 00:14:40.046 A:middle
container row down out of the

00:14:40.046 --> 00:14:41.876 A:middle
way and insert a new row into

00:14:41.876 --> 00:14:43.276 A:middle
the table view at the same index

00:14:43.276 --> 00:14:43.706 A:middle
path.

00:14:44.106 --> 00:14:45.056 A:middle
And table view is going to

00:14:45.056 --> 00:14:46.866 A:middle
automatically tell you, when the

00:14:46.866 --> 00:14:48.536 A:middle
drop occurs, which one it is.

00:14:48.536 --> 00:14:49.386 A:middle
It'll pick between

00:14:49.386 --> 00:14:51.616 A:middle
insertAtDestinationIndexPath and

00:14:51.616 --> 00:14:53.316 A:middle
insertIntoDestinationIndexPath

00:14:53.316 --> 00:14:53.786 A:middle
for you.

00:14:54.586 --> 00:14:56.626 A:middle
So let's look at an example of

00:14:56.626 --> 00:14:57.736 A:middle
how you can provide a drop

00:14:57.736 --> 00:14:58.676 A:middle
proposal in code.

00:14:59.286 --> 00:15:00.756 A:middle
It starts by implementing this

00:15:00.756 --> 00:15:01.536 A:middle
optional method,

00:15:01.836 --> 00:15:02.886 A:middle
dropSessionDidUpdate,

00:15:02.886 --> 00:15:04.286 A:middle
withDestinationIndexPath.

00:15:05.086 --> 00:15:06.426 A:middle
Here this will be called

00:15:06.876 --> 00:15:08.126 A:middle
whenever the table view or

00:15:08.126 --> 00:15:09.406 A:middle
collection view detects that

00:15:09.406 --> 00:15:10.496 A:middle
there's a drop session moving

00:15:10.496 --> 00:15:11.436 A:middle
over it.

00:15:11.796 --> 00:15:12.926 A:middle
Now this method is optional, but

00:15:12.926 --> 00:15:14.196 A:middle
we strongly recommend that you

00:15:14.196 --> 00:15:15.396 A:middle
implement it because this is how

00:15:15.396 --> 00:15:16.786 A:middle
you provide your drop proposal.

00:15:17.746 --> 00:15:19.326 A:middle
Now because this is called all

00:15:19.326 --> 00:15:20.486 A:middle
the time when the collection or

00:15:20.486 --> 00:15:21.876 A:middle
table view sees a drop session

00:15:21.876 --> 00:15:22.986 A:middle
over it and whenever that drop

00:15:22.986 --> 00:15:24.446 A:middle
session moves, it's going to be

00:15:24.446 --> 00:15:25.316 A:middle
called very frequently.

00:15:25.536 --> 00:15:27.036 A:middle
And so your implementation needs

00:15:27.036 --> 00:15:28.316 A:middle
to be very efficient and return

00:15:28.316 --> 00:15:30.276 A:middle
quickly to avoid hanging the

00:15:30.276 --> 00:15:32.036 A:middle
main thread.

00:15:32.376 --> 00:15:33.576 A:middle
Now I'd like to call your

00:15:33.576 --> 00:15:34.306 A:middle
attention to this

00:15:34.306 --> 00:15:35.556 A:middle
destinationIndexPath that's

00:15:35.556 --> 00:15:36.126 A:middle
passed in.

00:15:36.446 --> 00:15:37.906 A:middle
Once again, this is our proposal

00:15:37.906 --> 00:15:39.376 A:middle
of where we think that you would

00:15:39.376 --> 00:15:41.426 A:middle
like to insert any items into

00:15:41.426 --> 00:15:42.346 A:middle
the collection or table view.

00:15:43.196 --> 00:15:45.086 A:middle
Now this destinationIndexPath

00:15:45.136 --> 00:15:46.856 A:middle
will be nil in some cases.

00:15:46.856 --> 00:15:48.536 A:middle
In particular, when the user's

00:15:48.536 --> 00:15:50.096 A:middle
dragging over a region of the

00:15:50.096 --> 00:15:51.066 A:middle
collection or table view where

00:15:51.066 --> 00:15:52.216 A:middle
there are no cells.

00:15:52.676 --> 00:15:54.656 A:middle
And another very important point

00:15:54.656 --> 00:15:56.086 A:middle
about this that might trip you

00:15:56.086 --> 00:15:57.176 A:middle
up, so be careful.

00:15:57.676 --> 00:15:59.306 A:middle
When the user drags over the end

00:15:59.306 --> 00:16:00.926 A:middle
of an existing section in the

00:16:00.926 --> 00:16:01.846 A:middle
collection or table view.

00:16:02.356 --> 00:16:04.026 A:middle
This index path might be equal

00:16:04.026 --> 00:16:05.606 A:middle
to the count of the number of

00:16:05.606 --> 00:16:07.116 A:middle
items in that section, which

00:16:07.116 --> 00:16:08.846 A:middle
means it may not correspond to

00:16:08.846 --> 00:16:10.096 A:middle
an existing item in that

00:16:10.096 --> 00:16:10.576 A:middle
section.

00:16:10.966 --> 00:16:12.146 A:middle
So be careful because that's an

00:16:12.146 --> 00:16:13.406 A:middle
insert at the very end of the

00:16:13.406 --> 00:16:13.816 A:middle
section.

00:16:14.626 --> 00:16:16.326 A:middle
So let's look at a quick example

00:16:16.326 --> 00:16:17.396 A:middle
of how you could implement this.

00:16:17.626 --> 00:16:18.846 A:middle
In this example, we'll look at

00:16:18.876 --> 00:16:20.696 A:middle
the local drag session property

00:16:20.936 --> 00:16:22.436 A:middle
on the drop session to see if

00:16:22.436 --> 00:16:24.146 A:middle
the drag originated from our app

00:16:24.146 --> 00:16:24.576 A:middle
or not.

00:16:24.986 --> 00:16:26.226 A:middle
If it's from our app, we can use

00:16:26.226 --> 00:16:28.066 A:middle
a drop operation of move and

00:16:28.406 --> 00:16:29.436 A:middle
otherwise we'll use a drop

00:16:29.436 --> 00:16:30.466 A:middle
operation of copy.

00:16:30.926 --> 00:16:31.986 A:middle
Both cases here we're going to

00:16:31.986 --> 00:16:33.046 A:middle
insert a new item into the

00:16:33.046 --> 00:16:34.156 A:middle
collection view, so we'll use

00:16:34.156 --> 00:16:36.456 A:middle
insertAtDestinationIndexPath as

00:16:36.876 --> 00:16:38.076 A:middle
our intent.

00:16:38.076 --> 00:16:40.156 A:middle
Okay. So that's drop proposals

00:16:40.156 --> 00:16:41.406 A:middle
which you provide while the

00:16:41.406 --> 00:16:42.816 A:middle
user's still dragging over the

00:16:42.816 --> 00:16:43.676 A:middle
collection or table view.

00:16:44.336 --> 00:16:45.576 A:middle
Let's switch gears now to talk

00:16:45.576 --> 00:16:47.056 A:middle
about dropping when the user

00:16:47.056 --> 00:16:48.466 A:middle
actually releases their touch

00:16:48.636 --> 00:16:49.556 A:middle
and you need to perform the

00:16:49.556 --> 00:16:49.856 A:middle
drop.

00:16:51.226 --> 00:16:52.846 A:middle
To set up some great animations,

00:16:53.076 --> 00:16:54.496 A:middle
you can use the drop coordinator

00:16:54.496 --> 00:16:56.016 A:middle
that we pass in to perform drop

00:16:56.016 --> 00:16:56.686 A:middle
with coordinator.

00:16:57.496 --> 00:16:58.966 A:middle
Collection and table view will

00:16:58.966 --> 00:17:00.486 A:middle
provide some basic animations by

00:17:00.486 --> 00:17:01.466 A:middle
default if you do nothing.

00:17:01.996 --> 00:17:03.676 A:middle
But for the best effects, you

00:17:03.676 --> 00:17:04.916 A:middle
can use the drop coordinator to

00:17:04.916 --> 00:17:06.986 A:middle
set up specific animations for

00:17:06.986 --> 00:17:08.886 A:middle
each item independently in the

00:17:08.886 --> 00:17:09.576 A:middle
drop session.

00:17:10.496 --> 00:17:11.306 A:middle
Let's look at some of the

00:17:11.306 --> 00:17:12.056 A:middle
methods that we've made

00:17:12.056 --> 00:17:13.746 A:middle
available for you to do that.

00:17:14.416 --> 00:17:16.966 A:middle
The first one is dropping to an

00:17:17.026 --> 00:17:17.736 A:middle
item or row.

00:17:18.426 --> 00:17:20.466 A:middle
This is a drop animation that

00:17:20.466 --> 00:17:21.836 A:middle
you'll use with the intent

00:17:21.936 --> 00:17:23.756 A:middle
insertAtDestinationIndexPath.

00:17:24.546 --> 00:17:25.846 A:middle
And you want to use this when

00:17:25.846 --> 00:17:27.256 A:middle
you've already performed an

00:17:27.286 --> 00:17:29.386 A:middle
update to insert a new item or

00:17:29.386 --> 00:17:30.606 A:middle
row into the collection or table

00:17:30.606 --> 00:17:30.826 A:middle
view.

00:17:31.206 --> 00:17:32.676 A:middle
So let's look at an example in

00:17:32.676 --> 00:17:33.786 A:middle
code to see how we can implement

00:17:33.786 --> 00:17:33.976 A:middle
this.

00:17:38.016 --> 00:17:39.206 A:middle
Inside of performDropWith

00:17:39.206 --> 00:17:40.696 A:middle
coordinator, we need to start by

00:17:40.696 --> 00:17:41.786 A:middle
gathering up a few local

00:17:41.786 --> 00:17:42.856 A:middle
variables that we need.

00:17:42.856 --> 00:17:44.026 A:middle
In particular, we'll need our

00:17:44.026 --> 00:17:46.046 A:middle
destinationIndexPath, and we'll

00:17:46.046 --> 00:17:47.736 A:middle
also use the local object

00:17:47.736 --> 00:17:49.476 A:middle
property on the drag item to

00:17:49.476 --> 00:17:51.326 A:middle
actually get at the underlying

00:17:51.326 --> 00:17:52.306 A:middle
data synchronously.

00:17:52.306 --> 00:17:53.166 A:middle
This is something that you can

00:17:53.166 --> 00:17:54.806 A:middle
do when the drag session starts

00:17:54.806 --> 00:17:56.426 A:middle
from your own app.

00:17:57.046 --> 00:17:58.666 A:middle
Next, because we have that data

00:17:58.666 --> 00:17:59.926 A:middle
right away we can perform an

00:17:59.926 --> 00:18:01.326 A:middle
immediate insertion into our

00:18:01.326 --> 00:18:02.436 A:middle
collection view, so we'll call

00:18:02.436 --> 00:18:03.526 A:middle
performBatchUpdates.

00:18:03.756 --> 00:18:04.986 A:middle
And inside, of course, we'll do

00:18:04.986 --> 00:18:06.616 A:middle
the usual update of our data

00:18:06.616 --> 00:18:07.846 A:middle
source incorporating that new

00:18:07.846 --> 00:18:08.316 A:middle
image.

00:18:08.636 --> 00:18:09.806 A:middle
And we'll insert an item in the

00:18:09.806 --> 00:18:10.366 A:middle
collection view.

00:18:10.886 --> 00:18:12.386 A:middle
And now, because we've actually

00:18:12.386 --> 00:18:14.166 A:middle
already inserted that cell, we

00:18:14.166 --> 00:18:15.886 A:middle
can tell the drop coordinator to

00:18:15.886 --> 00:18:18.356 A:middle
drop the item to that specific

00:18:18.426 --> 00:18:19.766 A:middle
cell at that index path.

00:18:20.076 --> 00:18:20.916 A:middle
This is going to set up that

00:18:20.916 --> 00:18:22.246 A:middle
nice animation you saw where the

00:18:22.246 --> 00:18:23.856 A:middle
drag preview morphs right to the

00:18:23.856 --> 00:18:25.086 A:middle
final cell that we inserted.

00:18:25.946 --> 00:18:27.336 A:middle
All right.

00:18:27.666 --> 00:18:29.416 A:middle
The next drop animation is

00:18:29.416 --> 00:18:31.306 A:middle
dropping into an item or row.

00:18:32.116 --> 00:18:33.136 A:middle
As you might imagine, this is

00:18:33.136 --> 00:18:34.536 A:middle
generally used with the intent

00:18:34.536 --> 00:18:36.656 A:middle
insertIntoDestinationIndexPath.

00:18:37.316 --> 00:18:38.536 A:middle
In this case, we're inserting

00:18:38.536 --> 00:18:40.146 A:middle
the item inside of a container

00:18:40.396 --> 00:18:40.846 A:middle
cell.

00:18:41.436 --> 00:18:43.326 A:middle
And so the item is going -- we

00:18:43.326 --> 00:18:44.206 A:middle
want the animation to kind of

00:18:44.206 --> 00:18:46.146 A:middle
scale down with this nice

00:18:46.146 --> 00:18:47.626 A:middle
animation right to some region

00:18:47.626 --> 00:18:48.856 A:middle
inside of that cell to show the

00:18:48.856 --> 00:18:50.186 A:middle
user where this drop was

00:18:50.366 --> 00:18:50.846 A:middle
accepted.

00:18:51.716 --> 00:18:52.626 A:middle
So let's look at an example of

00:18:52.626 --> 00:18:54.006 A:middle
how we could set this one up in

00:18:54.006 --> 00:18:54.516 A:middle
some code.

00:18:55.366 --> 00:18:56.856 A:middle
Once again, we're back in our

00:18:57.226 --> 00:18:59.676 A:middle
performDropWith coordinator and

00:18:59.896 --> 00:19:01.246 A:middle
we have basically the same code

00:19:01.246 --> 00:19:01.986 A:middle
here that you saw from the

00:19:01.986 --> 00:19:02.886 A:middle
previous example.

00:19:03.256 --> 00:19:04.606 A:middle
So just gathering up our

00:19:04.606 --> 00:19:05.906 A:middle
destinationIndexPath and the

00:19:05.906 --> 00:19:07.526 A:middle
image that actually was in the

00:19:07.526 --> 00:19:08.236 A:middle
drag session.

00:19:09.346 --> 00:19:10.496 A:middle
Now there's one additional check

00:19:10.496 --> 00:19:11.756 A:middle
that we do want to do, in this

00:19:11.756 --> 00:19:13.206 A:middle
case, which is to make sure that

00:19:13.206 --> 00:19:14.646 A:middle
that destinationIndexPath

00:19:14.736 --> 00:19:16.606 A:middle
corresponds to an actual row in

00:19:16.606 --> 00:19:17.216 A:middle
our table view.

00:19:17.506 --> 00:19:18.796 A:middle
Otherwise, we can't drop into

00:19:18.796 --> 00:19:20.096 A:middle
anything in that album.

00:19:20.766 --> 00:19:21.946 A:middle
If it does, we can actually

00:19:21.946 --> 00:19:23.726 A:middle
incorporate the data inside the

00:19:23.726 --> 00:19:25.056 A:middle
underlying data structure for

00:19:25.056 --> 00:19:25.846 A:middle
that photo album.

00:19:26.566 --> 00:19:27.816 A:middle
And then we're ready to set up

00:19:27.816 --> 00:19:28.506 A:middle
our animation.

00:19:28.906 --> 00:19:30.436 A:middle
So, in this case, we'll get the

00:19:30.436 --> 00:19:32.756 A:middle
cell for that particular row and

00:19:32.756 --> 00:19:33.556 A:middle
we're going to animate to the

00:19:33.556 --> 00:19:34.406 A:middle
image view in that cell.

00:19:34.406 --> 00:19:35.396 A:middle
So we'll get the image view.

00:19:35.776 --> 00:19:37.416 A:middle
Then we call coordinator drop

00:19:37.416 --> 00:19:40.006 A:middle
item IntoRowAt index path rect.

00:19:40.496 --> 00:19:41.586 A:middle
We're passing a rect that it's

00:19:41.586 --> 00:19:42.816 A:middle
in the coordinate space of the

00:19:42.816 --> 00:19:44.636 A:middle
cell, so we translate that image

00:19:44.636 --> 00:19:46.746 A:middle
view's bounds up to the cell's

00:19:46.746 --> 00:19:48.376 A:middle
coordinate space.

00:19:48.976 --> 00:19:49.856 A:middle
So to recap.

00:19:49.856 --> 00:19:51.086 A:middle
Now, we've talked about two drop

00:19:51.086 --> 00:19:51.546 A:middle
animations.

00:19:51.546 --> 00:19:52.816 A:middle
We have dropping to a newly

00:19:52.816 --> 00:19:53.546 A:middle
inserted cell.

00:19:54.226 --> 00:19:55.866 A:middle
We have dropping to a rect

00:19:55.866 --> 00:19:57.066 A:middle
inside a container cell.

00:19:57.796 --> 00:19:59.076 A:middle
There's a third drop animation

00:19:59.076 --> 00:20:00.656 A:middle
method available which is

00:20:00.656 --> 00:20:01.746 A:middle
dropping to a target.

00:20:02.386 --> 00:20:03.516 A:middle
This is how you can perform

00:20:03.586 --> 00:20:04.976 A:middle
completely custom animations.

00:20:04.976 --> 00:20:06.446 A:middle
For example, animating to a

00:20:06.446 --> 00:20:08.096 A:middle
location anywhere in your app

00:20:08.206 --> 00:20:09.366 A:middle
with an optional transform.

00:20:09.766 --> 00:20:11.116 A:middle
So maybe you want to animate to

00:20:11.116 --> 00:20:12.686 A:middle
a tab bar or bar button item or

00:20:12.686 --> 00:20:13.386 A:middle
something like that.

00:20:14.526 --> 00:20:15.636 A:middle
Those are the three basic drop

00:20:15.636 --> 00:20:16.326 A:middle
animations.

00:20:16.466 --> 00:20:19.006 A:middle
But I'd like to step back to the

00:20:19.006 --> 00:20:20.206 A:middle
first one that we talked about

00:20:20.526 --> 00:20:21.676 A:middle
and revisit that just for a

00:20:21.676 --> 00:20:21.936 A:middle
second.

00:20:21.986 --> 00:20:23.376 A:middle
Dropping to a newly inserted

00:20:23.376 --> 00:20:24.016 A:middle
item or row.

00:20:24.886 --> 00:20:26.306 A:middle
As we've discussed, you actually

00:20:26.306 --> 00:20:27.746 A:middle
need to already have performed

00:20:27.746 --> 00:20:28.826 A:middle
the update on the collection or

00:20:28.826 --> 00:20:30.176 A:middle
table view to insert that new

00:20:30.176 --> 00:20:31.576 A:middle
cell before you can use this

00:20:31.576 --> 00:20:31.936 A:middle
method.

00:20:32.596 --> 00:20:33.576 A:middle
But what if the data hasn't

00:20:33.576 --> 00:20:34.076 A:middle
loaded yet?

00:20:36.456 --> 00:20:37.846 A:middle
If you're dragging between

00:20:37.846 --> 00:20:40.416 A:middle
applications on iOS, we always

00:20:40.416 --> 00:20:42.086 A:middle
have an asynchronous data load.

00:20:42.766 --> 00:20:44.676 A:middle
But these animations need to be

00:20:44.676 --> 00:20:47.016 A:middle
specified immediately before you

00:20:47.016 --> 00:20:48.296 A:middle
return from performDropWith

00:20:48.296 --> 00:20:48.796 A:middle
coordinator.

00:20:49.286 --> 00:20:51.366 A:middle
So to solve for that, that would

00:20:51.366 --> 00:20:52.456 A:middle
mean you'd have to do some

00:20:52.456 --> 00:20:53.616 A:middle
pretty difficult bookkeeping,

00:20:53.836 --> 00:20:54.696 A:middle
because you're going to have to

00:20:54.696 --> 00:20:56.196 A:middle
do temporary insertions in the

00:20:56.196 --> 00:20:57.556 A:middle
collection or table view, just

00:20:57.556 --> 00:20:58.856 A:middle
to set up these animations.

00:20:59.126 --> 00:20:59.916 A:middle
Which, of course, would mean

00:20:59.916 --> 00:21:01.046 A:middle
updating your data source with

00:21:01.046 --> 00:21:02.796 A:middle
temporary model objects, and

00:21:02.796 --> 00:21:03.816 A:middle
that's not going to be easy.

00:21:04.356 --> 00:21:05.526 A:middle
Remember these asynchronous

00:21:05.526 --> 00:21:06.846 A:middle
loads can even come in out of

00:21:06.846 --> 00:21:07.246 A:middle
order.

00:21:08.726 --> 00:21:10.256 A:middle
We know this is a big challenge,

00:21:10.456 --> 00:21:12.366 A:middle
and we are extremely excited to

00:21:12.366 --> 00:21:13.596 A:middle
tell you about brand new

00:21:13.596 --> 00:21:15.566 A:middle
technology in iOS 11 for

00:21:15.566 --> 00:21:16.606 A:middle
collection and table view,

00:21:16.726 --> 00:21:17.996 A:middle
specifically designed for this

00:21:17.996 --> 00:21:18.556 A:middle
problem.

00:21:18.806 --> 00:21:19.636 A:middle
I'd like to introduce

00:21:19.636 --> 00:21:19.976 A:middle
placeholders.

00:21:20.516 --> 00:21:25.086 A:middle
[ Applause ]

00:21:25.586 --> 00:21:27.046 A:middle
Okay. What are placeholders?

00:21:27.326 --> 00:21:28.506 A:middle
So, as the name suggests, these

00:21:28.506 --> 00:21:29.946 A:middle
are temporary items or rows that

00:21:29.946 --> 00:21:31.156 A:middle
you insert into your collection

00:21:31.156 --> 00:21:31.776 A:middle
or table view.

00:21:32.336 --> 00:21:33.816 A:middle
And the key thing about them is

00:21:33.816 --> 00:21:35.506 A:middle
that you can defer updating your

00:21:35.506 --> 00:21:36.966 A:middle
data source until the data

00:21:36.966 --> 00:21:38.656 A:middle
finishes loading when you insert

00:21:38.656 --> 00:21:39.376 A:middle
placeholders.

00:21:40.226 --> 00:21:41.866 A:middle
So for placeholders, you can use

00:21:41.866 --> 00:21:42.976 A:middle
any cell that you want.

00:21:43.316 --> 00:21:44.376 A:middle
You can provide it to us.

00:21:44.376 --> 00:21:45.656 A:middle
We'll do all the difficult

00:21:45.656 --> 00:21:47.376 A:middle
bookkeeping on the back end

00:21:47.446 --> 00:21:48.466 A:middle
until your data finishes

00:21:48.466 --> 00:21:48.796 A:middle
loading.

00:21:49.956 --> 00:21:50.806 A:middle
The way this works is that

00:21:50.806 --> 00:21:51.936 A:middle
collection and table view will

00:21:51.936 --> 00:21:53.656 A:middle
never actually call out to ask

00:21:53.656 --> 00:21:54.886 A:middle
your delegate or data source

00:21:54.976 --> 00:21:56.706 A:middle
about placeholders, so your

00:21:56.706 --> 00:21:58.246 A:middle
delegates can remain blissfully

00:21:58.246 --> 00:21:59.726 A:middle
unaware that they even exist.

00:22:00.786 --> 00:22:01.756 A:middle
You can insert as many

00:22:01.756 --> 00:22:02.956 A:middle
placeholders as you want,

00:22:02.956 --> 00:22:03.806 A:middle
anywhere you want in the

00:22:03.806 --> 00:22:05.126 A:middle
collection or table view, and

00:22:05.126 --> 00:22:06.866 A:middle
you can even perform incremental

00:22:06.866 --> 00:22:08.806 A:middle
updates while placeholders exist

00:22:08.806 --> 00:22:10.956 A:middle
to put new rows or items in the

00:22:10.956 --> 00:22:12.006 A:middle
collection view, table view, or

00:22:12.006 --> 00:22:13.076 A:middle
move some existing one.

00:22:13.406 --> 00:22:14.176 A:middle
Anything like that.

00:22:14.676 --> 00:22:15.766 A:middle
So this provides users with a

00:22:15.766 --> 00:22:17.156 A:middle
great experience while their

00:22:17.156 --> 00:22:18.496 A:middle
data is loading across

00:22:18.496 --> 00:22:19.986 A:middle
applications, because you can

00:22:19.986 --> 00:22:21.526 A:middle
keep your user interface live

00:22:21.526 --> 00:22:23.096 A:middle
and responsive during these data

00:22:23.096 --> 00:22:23.616 A:middle
transfers.

00:22:23.616 --> 00:22:25.036 A:middle
So how do you create

00:22:25.036 --> 00:22:25.736 A:middle
placeholders?

00:22:26.336 --> 00:22:27.616 A:middle
Well, you're creating them using

00:22:27.616 --> 00:22:28.936 A:middle
the drop coordinator, of course.

00:22:29.546 --> 00:22:31.056 A:middle
To insert and animate it to a

00:22:31.056 --> 00:22:31.586 A:middle
placeholder.

00:22:31.826 --> 00:22:32.946 A:middle
Let's dive into some code and

00:22:32.946 --> 00:22:33.516 A:middle
see how it's done.

00:22:34.116 --> 00:22:35.496 A:middle
So we're back in our

00:22:35.496 --> 00:22:36.646 A:middle
performDropWith coordinator

00:22:36.646 --> 00:22:37.096 A:middle
method.

00:22:37.616 --> 00:22:38.266 A:middle
Again, we'll need a

00:22:38.266 --> 00:22:39.686 A:middle
destinationIndexPath that we're

00:22:39.686 --> 00:22:40.926 A:middle
actually going to drop to.

00:22:41.566 --> 00:22:42.986 A:middle
And now here we do things a

00:22:42.986 --> 00:22:43.796 A:middle
little bit differently.

00:22:44.346 --> 00:22:45.536 A:middle
Now we're going to iterate over

00:22:45.606 --> 00:22:46.856 A:middle
each of the items in the drop

00:22:46.856 --> 00:22:48.886 A:middle
session independently and for

00:22:48.886 --> 00:22:50.676 A:middle
each item, we're going to insert

00:22:50.676 --> 00:22:51.226 A:middle
a placeholder.

00:22:51.796 --> 00:22:53.736 A:middle
So we call coordinator drop item

00:22:53.736 --> 00:22:55.316 A:middle
toPlaceholderInsertedAt index

00:22:55.316 --> 00:22:56.696 A:middle
path withReuseIdentifier.

00:22:57.846 --> 00:22:58.716 A:middle
This will actually insert a

00:22:58.716 --> 00:22:59.516 A:middle
placeholder at the

00:22:59.516 --> 00:23:01.096 A:middle
destinationIndexPath for this

00:23:01.096 --> 00:23:01.886 A:middle
particular item.

00:23:02.396 --> 00:23:03.576 A:middle
You'll notice we pass over use

00:23:03.576 --> 00:23:04.096 A:middle
identifier.

00:23:04.096 --> 00:23:05.066 A:middle
This is something that you've

00:23:05.066 --> 00:23:06.356 A:middle
already registered with the

00:23:06.356 --> 00:23:07.796 A:middle
collection or table view and

00:23:07.796 --> 00:23:08.786 A:middle
we're going to use that to

00:23:08.786 --> 00:23:10.056 A:middle
dequeue a cell for this

00:23:10.086 --> 00:23:10.586 A:middle
placeholder.

00:23:11.696 --> 00:23:12.986 A:middle
You'll also notice, of course,

00:23:12.986 --> 00:23:13.856 A:middle
that there's a closure at the

00:23:13.856 --> 00:23:15.446 A:middle
end and that there's a comment

00:23:15.446 --> 00:23:16.596 A:middle
configure your placeholder cell

00:23:16.596 --> 00:23:16.826 A:middle
here.

00:23:17.366 --> 00:23:19.296 A:middle
Well, as you recall, collection

00:23:19.296 --> 00:23:20.606 A:middle
and table view, they're not

00:23:20.606 --> 00:23:21.706 A:middle
going to call out to your

00:23:21.706 --> 00:23:22.966 A:middle
delegate or data source about

00:23:22.966 --> 00:23:23.586 A:middle
placeholders.

00:23:23.916 --> 00:23:24.816 A:middle
That mean you're not going to

00:23:24.816 --> 00:23:26.326 A:middle
get a call for cell for row or

00:23:26.326 --> 00:23:28.106 A:middle
cell for item in index path for

00:23:28.106 --> 00:23:29.856 A:middle
placeholders, so this closure

00:23:30.176 --> 00:23:31.936 A:middle
serves as your replacement for

00:23:31.936 --> 00:23:33.026 A:middle
the configuration that you might

00:23:33.026 --> 00:23:34.666 A:middle
normally do in cell for row at

00:23:34.666 --> 00:23:35.866 A:middle
index path or cell for item in

00:23:35.866 --> 00:23:36.536 A:middle
index path.

00:23:37.536 --> 00:23:38.936 A:middle
Okay. There's one more thing.

00:23:39.476 --> 00:23:40.166 A:middle
Once you've inserted the

00:23:40.166 --> 00:23:42.666 A:middle
placeholder, it actually returns

00:23:42.666 --> 00:23:44.086 A:middle
something back to you, and

00:23:44.086 --> 00:23:45.656 A:middle
that's this placeholderContext.

00:23:46.026 --> 00:23:46.646 A:middle
What is this?

00:23:47.316 --> 00:23:48.496 A:middle
The placeholderContext is

00:23:48.496 --> 00:23:49.646 A:middle
returned for each placeholder

00:23:49.646 --> 00:23:50.286 A:middle
independently.

00:23:50.746 --> 00:23:52.426 A:middle
And this is how you're actually

00:23:52.426 --> 00:23:53.786 A:middle
going to commit the insertion of

00:23:53.786 --> 00:23:55.236 A:middle
the placeholder to exchange it

00:23:55.236 --> 00:23:56.426 A:middle
for the final cell once your

00:23:56.426 --> 00:23:57.416 A:middle
data finishes loading.

00:23:58.146 --> 00:24:00.276 A:middle
Or, if the data transfer failed.

00:24:00.526 --> 00:24:01.596 A:middle
Or maybe it was cancelled by the

00:24:01.596 --> 00:24:02.006 A:middle
user.

00:24:02.366 --> 00:24:02.956 A:middle
You can use the

00:24:02.956 --> 00:24:04.426 A:middle
placeholderContex to actually

00:24:04.426 --> 00:24:05.416 A:middle
delete the placeholder because

00:24:05.416 --> 00:24:06.906 A:middle
it'll no longer be needed.

00:24:07.946 --> 00:24:09.466 A:middle
So let's jump back to our code

00:24:09.466 --> 00:24:10.346 A:middle
and see how we use this

00:24:10.346 --> 00:24:11.206 A:middle
placeholderContext.

00:24:11.556 --> 00:24:12.596 A:middle
We're picking up right where we

00:24:12.596 --> 00:24:13.206 A:middle
left off.

00:24:13.206 --> 00:24:14.326 A:middle
We inserted our placeholder.

00:24:14.596 --> 00:24:15.766 A:middle
We got the placeholderContext

00:24:15.766 --> 00:24:16.106 A:middle
back.

00:24:16.586 --> 00:24:18.506 A:middle
Now we can actually go and load

00:24:18.506 --> 00:24:18.806 A:middle
the data.

00:24:19.596 --> 00:24:20.916 A:middle
Again, this is asynchronous, so

00:24:20.916 --> 00:24:22.556 A:middle
we use this load object of class

00:24:22.556 --> 00:24:23.506 A:middle
method to do that.

00:24:24.056 --> 00:24:25.266 A:middle
When the closure completion

00:24:25.266 --> 00:24:27.046 A:middle
handler runs, that'll be called

00:24:27.046 --> 00:24:27.926 A:middle
on a background queue.

00:24:27.926 --> 00:24:29.136 A:middle
So we make sure to transition

00:24:29.136 --> 00:24:30.596 A:middle
back onto the main queue before

00:24:30.596 --> 00:24:31.296 A:middle
we update our UI.

00:24:32.686 --> 00:24:34.036 A:middle
And now we can check did we

00:24:34.036 --> 00:24:35.566 A:middle
actually get any data loaded?

00:24:36.096 --> 00:24:37.436 A:middle
If we did, we'll have an image

00:24:37.436 --> 00:24:38.596 A:middle
in this local variable here.

00:24:38.966 --> 00:24:40.676 A:middle
And now we call commitInsertion

00:24:40.716 --> 00:24:42.036 A:middle
on the placeholder context,

00:24:42.366 --> 00:24:44.056 A:middle
which again, we'll swap out that

00:24:44.056 --> 00:24:45.506 A:middle
placeholder cell and insert the

00:24:45.506 --> 00:24:47.476 A:middle
real cell at this particular

00:24:47.476 --> 00:24:47.956 A:middle
location.

00:24:48.816 --> 00:24:50.036 A:middle
Now you pass a closure to

00:24:50.036 --> 00:24:50.816 A:middle
commitInsertion.

00:24:51.146 --> 00:24:52.296 A:middle
Inside of that closure, it's

00:24:52.296 --> 00:24:53.916 A:middle
your responsibility to update

00:24:53.916 --> 00:24:55.446 A:middle
your data source to incorporate

00:24:55.446 --> 00:24:57.376 A:middle
the new data for the actual row

00:24:57.376 --> 00:24:57.586 A:middle
here.

00:24:58.156 --> 00:25:00.426 A:middle
Or item in the collection view.

00:25:00.786 --> 00:25:02.326 A:middle
Now one other important thing.

00:25:02.546 --> 00:25:03.996 A:middle
Take a look at that index path

00:25:03.996 --> 00:25:05.196 A:middle
that's being passed inside that

00:25:05.196 --> 00:25:06.906 A:middle
closure, the insertionIndexPath.

00:25:07.576 --> 00:25:08.796 A:middle
You need to be very careful to

00:25:08.796 --> 00:25:10.496 A:middle
actually use that one and not

00:25:10.496 --> 00:25:11.096 A:middle
the original

00:25:11.096 --> 00:25:12.946 A:middle
destinationIndexPath that you

00:25:12.946 --> 00:25:13.646 A:middle
originally inserted the

00:25:13.646 --> 00:25:14.376 A:middle
placeholder at.

00:25:14.686 --> 00:25:16.546 A:middle
This is because between the time

00:25:16.546 --> 00:25:17.086 A:middle
when you inserted the

00:25:17.086 --> 00:25:18.226 A:middle
placeholder and when the data

00:25:18.226 --> 00:25:19.736 A:middle
finished loading, if other

00:25:19.736 --> 00:25:20.936 A:middle
updates happen in the collection

00:25:20.936 --> 00:25:22.016 A:middle
or table view, the placeholder

00:25:22.016 --> 00:25:22.866 A:middle
might have moved.

00:25:23.286 --> 00:25:24.886 A:middle
And so you use this index path,

00:25:24.886 --> 00:25:26.496 A:middle
which we provide to you, to tell

00:25:26.496 --> 00:25:28.266 A:middle
you the final location when the

00:25:28.266 --> 00:25:29.366 A:middle
placeholder insertion is

00:25:29.366 --> 00:25:29.946 A:middle
committed.

00:25:30.896 --> 00:25:31.936 A:middle
Okay, one other thing.

00:25:31.936 --> 00:25:33.716 A:middle
Of course, if our data transfer

00:25:33.716 --> 00:25:35.276 A:middle
didn't work for some reason, or

00:25:35.276 --> 00:25:36.996 A:middle
maybe it was cancelled, we can

00:25:36.996 --> 00:25:38.126 A:middle
just delete the placeholder

00:25:38.276 --> 00:25:39.896 A:middle
because we no longer need it.

00:25:40.486 --> 00:25:41.976 A:middle
Now one quick note about working

00:25:41.976 --> 00:25:42.746 A:middle
with placeholders.

00:25:42.986 --> 00:25:43.976 A:middle
It's very important that you

00:25:43.976 --> 00:25:45.606 A:middle
avoid calling reload data on the

00:25:45.606 --> 00:25:46.786 A:middle
collection or table view when

00:25:46.786 --> 00:25:47.616 A:middle
you have placeholders.

00:25:47.906 --> 00:25:49.426 A:middle
Instead, you should use

00:25:49.476 --> 00:25:50.796 A:middle
performBatchUpdates.

00:25:51.416 --> 00:25:52.386 A:middle
This is so you can perform

00:25:52.386 --> 00:25:53.626 A:middle
incremental updates on the

00:25:53.626 --> 00:25:54.676 A:middle
collection or table view.

00:25:55.306 --> 00:25:56.516 A:middle
And the reason why you want to

00:25:56.516 --> 00:25:57.896 A:middle
avoid reload data is because

00:25:57.896 --> 00:25:59.566 A:middle
that just resets everything in

00:25:59.566 --> 00:26:00.546 A:middle
the collection or table view.

00:26:00.546 --> 00:26:01.876 A:middle
And, as a result, it's going to

00:26:01.876 --> 00:26:03.166 A:middle
strip out any existing

00:26:03.166 --> 00:26:04.226 A:middle
placeholders that you still

00:26:04.226 --> 00:26:04.586 A:middle
have.

00:26:05.396 --> 00:26:06.866 A:middle
If you use performBatchUpdates,

00:26:07.066 --> 00:26:08.426 A:middle
you'll be performing incremental

00:26:08.426 --> 00:26:10.306 A:middle
insertions and deletions, and we

00:26:10.306 --> 00:26:11.496 A:middle
can keep those placeholders

00:26:11.496 --> 00:26:13.146 A:middle
alive while you update your

00:26:13.146 --> 00:26:14.326 A:middle
collection view in real time.

00:26:14.606 --> 00:26:17.016 A:middle
You can use the new property

00:26:17.016 --> 00:26:18.486 A:middle
hasUncommittedUpdates on

00:26:18.486 --> 00:26:19.776 A:middle
collection and table view, if

00:26:19.776 --> 00:26:20.686 A:middle
you would like to check if it

00:26:20.686 --> 00:26:22.236 A:middle
has placeholders still around.

00:26:23.036 --> 00:26:23.986 A:middle
With that, I'd like to hand it

00:26:23.986 --> 00:26:25.446 A:middle
back to Mohammed to show you an

00:26:25.446 --> 00:26:26.826 A:middle
amazing demo of all this

00:26:26.826 --> 00:26:28.326 A:middle
placeholder goodness in action.

00:26:28.696 --> 00:26:28.976 A:middle
Mohammed.

00:26:29.516 --> 00:26:31.796 A:middle
[ Applause ]

00:26:32.296 --> 00:26:32.776 A:middle
Yeah. I can hold it.

00:26:35.036 --> 00:26:35.646 A:middle
&gt;&gt; Thanks Tyler.

00:26:36.056 --> 00:26:37.636 A:middle
Wow. Placeholders sound amazing,

00:26:37.636 --> 00:26:38.016 A:middle
don't they?

00:26:38.486 --> 00:26:40.266 A:middle
I can't wait to actually build

00:26:40.266 --> 00:26:41.176 A:middle
them in our app and build a

00:26:41.176 --> 00:26:42.616 A:middle
really awesome drop animation.

00:26:43.366 --> 00:26:43.976 A:middle
Let's get started.

00:26:47.596 --> 00:26:49.256 A:middle
So the first thing we'll want to

00:26:49.256 --> 00:26:50.786 A:middle
do is implement another optional

00:26:50.786 --> 00:26:53.256 A:middle
method on the drop delegate to

00:26:53.256 --> 00:26:56.266 A:middle
indicate to the collection view

00:26:56.266 --> 00:26:58.086 A:middle
that we'd like to animate our

00:26:58.086 --> 00:27:00.666 A:middle
dropped items to the drop point.

00:27:00.936 --> 00:27:03.846 A:middle
So let's add an implementation

00:27:03.846 --> 00:27:06.056 A:middle
for dropSessionDidUpdate

00:27:06.056 --> 00:27:07.676 A:middle
withDestinationIndexPath.

00:27:08.436 --> 00:27:10.076 A:middle
And we'll start returning a

00:27:10.076 --> 00:27:11.596 A:middle
collection view drop proposal

00:27:11.596 --> 00:27:14.446 A:middle
with a drop operation of copy

00:27:14.446 --> 00:27:15.626 A:middle
and an intent of

00:27:15.626 --> 00:27:17.826 A:middle
insertAtDestinationIndexPath.

00:27:18.926 --> 00:27:20.746 A:middle
Next, we'll head back to our

00:27:21.856 --> 00:27:23.066 A:middle
performDropWith coordinator

00:27:23.066 --> 00:27:24.466 A:middle
method and we're going to remove

00:27:24.466 --> 00:27:26.006 A:middle
our existing coordinator code

00:27:26.006 --> 00:27:26.946 A:middle
because we're going to do

00:27:26.946 --> 00:27:27.846 A:middle
something a little different.

00:27:28.536 --> 00:27:29.966 A:middle
The first thing we'll want to do

00:27:29.966 --> 00:27:31.586 A:middle
is iterate the coordinator's

00:27:31.586 --> 00:27:33.266 A:middle
drop items or self, and we're

00:27:33.266 --> 00:27:35.966 A:middle
going to check if each drop

00:27:35.966 --> 00:27:38.196 A:middle
item, drag item item provider

00:27:38.196 --> 00:27:40.196 A:middle
can be used to load an object of

00:27:40.196 --> 00:27:40.956 A:middle
class image.

00:27:41.186 --> 00:27:42.736 A:middle
If it can, then we'll do a

00:27:42.736 --> 00:27:43.416 A:middle
couple of things.

00:27:43.856 --> 00:27:47.106 A:middle
First, we'll ask the coordinator

00:27:47.106 --> 00:27:50.186 A:middle
to drop a placeholder at the

00:27:50.186 --> 00:27:51.506 A:middle
destinationIndexPath.

00:27:52.196 --> 00:27:53.596 A:middle
And we'll pass it a reuse

00:27:53.596 --> 00:27:55.306 A:middle
identifier for a placeholder

00:27:55.306 --> 00:27:56.536 A:middle
cell that we've registered with

00:27:56.536 --> 00:27:57.996 A:middle
the collection view previously.

00:27:58.756 --> 00:27:59.676 A:middle
We're going to hang onto the

00:27:59.676 --> 00:28:01.026 A:middle
placeholder context, because

00:28:01.026 --> 00:28:02.106 A:middle
we're going to need it to update

00:28:02.106 --> 00:28:04.256 A:middle
the collection view later on.

00:28:05.716 --> 00:28:08.046 A:middle
Next, we'll actually trigger the

00:28:08.046 --> 00:28:09.776 A:middle
data load by calling load object

00:28:09.776 --> 00:28:11.296 A:middle
on the item provider and

00:28:11.956 --> 00:28:13.276 A:middle
loadObjects is completion

00:28:13.276 --> 00:28:13.696 A:middle
handler.

00:28:13.986 --> 00:28:15.946 A:middle
We'll go ahead and handle the

00:28:15.946 --> 00:28:16.306 A:middle
drop.

00:28:17.256 --> 00:28:18.646 A:middle
Note that I'm dispatching back

00:28:18.646 --> 00:28:20.756 A:middle
to the main queue here, since

00:28:20.756 --> 00:28:21.996 A:middle
loadObjects is completion

00:28:21.996 --> 00:28:23.176 A:middle
handler is called on a

00:28:23.176 --> 00:28:24.286 A:middle
background queue, and we're

00:28:24.286 --> 00:28:25.826 A:middle
going to be updating our UI.

00:28:26.206 --> 00:28:29.066 A:middle
If the data transfer succeeded,

00:28:29.526 --> 00:28:31.746 A:middle
we'll finalize the drop by

00:28:31.746 --> 00:28:33.086 A:middle
calling commitInsertion on the

00:28:33.086 --> 00:28:34.236 A:middle
placeholderContext.

00:28:34.236 --> 00:28:36.826 A:middle
And we'll pass it a set of data

00:28:36.826 --> 00:28:39.456 A:middle
source updates that use the

00:28:39.456 --> 00:28:42.776 A:middle
insertionIndexPath to insert our

00:28:42.776 --> 00:28:44.006 A:middle
new image in our [inaudible].

00:28:44.006 --> 00:28:49.776 A:middle
Then if the data transfer failed

00:28:49.776 --> 00:28:51.336 A:middle
for some reason, we'll make sure

00:28:51.336 --> 00:28:52.606 A:middle
to clean things up by calling

00:28:52.606 --> 00:28:54.326 A:middle
deletePlaceholder on a context.

00:28:55.106 --> 00:28:56.046 A:middle
There's one more thing we should

00:28:56.046 --> 00:28:57.666 A:middle
do here and that's to disable

00:28:57.666 --> 00:29:00.106 A:middle
the default system progress UI

00:29:00.106 --> 00:29:01.536 A:middle
for long-running data transfers,

00:29:01.806 --> 00:29:03.366 A:middle
because we have our own inline

00:29:03.366 --> 00:29:04.066 A:middle
one now.

00:29:04.776 --> 00:29:07.016 A:middle
So we'll go ahead and do that by

00:29:07.446 --> 00:29:09.026 A:middle
setting the drop session's

00:29:09.026 --> 00:29:10.456 A:middle
progress indicator style to

00:29:10.456 --> 00:29:10.886 A:middle
none.

00:29:11.886 --> 00:29:12.516 A:middle
That's it.

00:29:12.516 --> 00:29:14.186 A:middle
Let's see what it looks like on

00:29:14.186 --> 00:29:14.976 A:middle
our device.

00:29:18.156 --> 00:29:20.646 A:middle
So to get the full effect of

00:29:20.646 --> 00:29:21.986 A:middle
what we've just done, I'm going

00:29:22.106 --> 00:29:23.736 A:middle
to -- instead of dragging out a

00:29:23.736 --> 00:29:25.236 A:middle
photo, I'm going to switch over

00:29:25.236 --> 00:29:27.246 A:middle
to a different app, which I've

00:29:27.246 --> 00:29:29.326 A:middle
called Slow Photos, which

00:29:29.326 --> 00:29:31.486 A:middle
intentionally slows down data

00:29:31.486 --> 00:29:32.246 A:middle
transfers.

00:29:33.276 --> 00:29:35.326 A:middle
I'm going to pick up a few of

00:29:35.326 --> 00:29:36.916 A:middle
these images here and I'm going

00:29:36.916 --> 00:29:37.866 A:middle
to head back to my collection

00:29:37.866 --> 00:29:38.196 A:middle
view.

00:29:39.066 --> 00:29:39.836 A:middle
Notice the first thing you'll

00:29:39.836 --> 00:29:41.376 A:middle
notice here is that when I hover

00:29:41.376 --> 00:29:43.016 A:middle
over the collection view, the

00:29:43.016 --> 00:29:44.886 A:middle
cells start moving apart and we

00:29:44.886 --> 00:29:46.086 A:middle
get this cool kind of

00:29:46.766 --> 00:29:48.736 A:middle
springboard-like reordering

00:29:48.976 --> 00:29:49.726 A:middle
look.

00:29:50.556 --> 00:29:52.426 A:middle
This is because we started

00:29:52.426 --> 00:29:53.116 A:middle
returning the

00:29:53.116 --> 00:29:55.186 A:middle
insertAtDestinationIndexPath

00:29:55.786 --> 00:29:56.456 A:middle
intent.

00:29:57.806 --> 00:29:59.696 A:middle
If I let go of the dropped items

00:29:59.936 --> 00:30:01.606 A:middle
-- oh, I love that animation

00:30:01.606 --> 00:30:02.906 A:middle
[laughter].

00:30:02.906 --> 00:30:05.596 A:middle
So note that the first thing we

00:30:05.596 --> 00:30:06.946 A:middle
get are the placeholder cells

00:30:06.946 --> 00:30:08.526 A:middle
with this inline progress UI.

00:30:08.806 --> 00:30:10.166 A:middle
And a few seconds later, when

00:30:10.166 --> 00:30:12.076 A:middle
the data transfer completes, we

00:30:12.076 --> 00:30:14.086 A:middle
actually have the cells, the

00:30:14.086 --> 00:30:15.806 A:middle
real cells with the real images

00:30:15.806 --> 00:30:15.976 A:middle
loaded.

00:30:16.516 --> 00:30:21.776 A:middle
[ Applause ]

00:30:22.276 --> 00:30:23.366 A:middle
So now I'm going to hand it back

00:30:23.366 --> 00:30:24.686 A:middle
to Tyler who's going to talk

00:30:24.686 --> 00:30:26.576 A:middle
about some final touches that

00:30:26.576 --> 00:30:27.616 A:middle
can really help you make the

00:30:27.616 --> 00:30:28.976 A:middle
drag and drop experience in our

00:30:28.976 --> 00:30:29.976 A:middle
app uniquely awesome.

00:30:34.306 --> 00:30:35.486 A:middle
&gt;&gt; Okay. Thanks Mohammed.

00:30:36.126 --> 00:30:37.606 A:middle
So let's wrap up by quickly

00:30:37.606 --> 00:30:38.726 A:middle
jumping through some of the

00:30:39.056 --> 00:30:41.176 A:middle
final touches that you can adopt

00:30:41.176 --> 00:30:42.606 A:middle
using our wonderful APIs here.

00:30:43.126 --> 00:30:44.436 A:middle
The first one that might be very

00:30:44.436 --> 00:30:45.836 A:middle
interesting to you is supporting

00:30:45.866 --> 00:30:46.426 A:middle
reordering.

00:30:47.356 --> 00:30:48.206 A:middle
So now that we have Drag and

00:30:48.206 --> 00:30:49.856 A:middle
Drop, it might be obvious that

00:30:49.926 --> 00:30:50.786 A:middle
you might want to use that for

00:30:50.786 --> 00:30:51.316 A:middle
reordering.

00:30:51.526 --> 00:30:52.836 A:middle
Well you can of course do that

00:30:53.126 --> 00:30:54.086 A:middle
and it's really easy.

00:30:54.796 --> 00:30:55.936 A:middle
You start by implementing the

00:30:55.936 --> 00:30:56.886 A:middle
dropDelegate method,

00:30:56.986 --> 00:30:57.946 A:middle
dropSessionDidUpdate

00:30:57.946 --> 00:30:59.416 A:middle
withDestinationIndexPath.

00:30:59.806 --> 00:31:00.776 A:middle
The reason why, of course,

00:31:00.776 --> 00:31:01.966 A:middle
that's how you provide your drop

00:31:01.966 --> 00:31:03.116 A:middle
proposal to the system.

00:31:03.536 --> 00:31:04.966 A:middle
And, in particular, you need a

00:31:04.966 --> 00:31:06.386 A:middle
very specific drop proposal if

00:31:06.386 --> 00:31:08.196 A:middle
you like reorder, which is the

00:31:08.196 --> 00:31:09.636 A:middle
drop proposal with an operation

00:31:09.636 --> 00:31:11.646 A:middle
of move and an intent of

00:31:11.676 --> 00:31:13.426 A:middle
insertAtDestinationIndexPath.

00:31:13.856 --> 00:31:15.246 A:middle
That serves as a signal to the

00:31:15.246 --> 00:31:16.516 A:middle
collection or table view that

00:31:16.516 --> 00:31:17.796 A:middle
you're interested in supporting

00:31:17.796 --> 00:31:19.566 A:middle
reordering, when the item that's

00:31:19.566 --> 00:31:20.616 A:middle
being dragged comes from the

00:31:20.616 --> 00:31:21.626 A:middle
same source view.

00:31:22.936 --> 00:31:23.906 A:middle
Now here's where things get a

00:31:23.906 --> 00:31:24.936 A:middle
little bit different for table

00:31:24.936 --> 00:31:25.676 A:middle
view and collection view.

00:31:25.676 --> 00:31:26.496 A:middle
We'll start with table view.

00:31:27.146 --> 00:31:29.256 A:middle
With table view, table view has

00:31:29.346 --> 00:31:30.596 A:middle
already supported reordering for

00:31:30.596 --> 00:31:31.896 A:middle
a very long time and you're

00:31:31.896 --> 00:31:33.136 A:middle
familiar with this very

00:31:33.666 --> 00:31:36.046 A:middle
longstanding data source method.

00:31:36.456 --> 00:31:38.356 A:middle
Table view moveRowAt IndexPath

00:31:38.356 --> 00:31:39.186 A:middle
to IndexPath.

00:31:39.696 --> 00:31:40.956 A:middle
You can continue to implement

00:31:40.956 --> 00:31:42.176 A:middle
this, if you like, to support

00:31:42.176 --> 00:31:43.486 A:middle
reordering, using Drag and Drop.

00:31:43.846 --> 00:31:44.926 A:middle
Because table view is actually

00:31:44.926 --> 00:31:46.336 A:middle
going to call this instead of

00:31:46.336 --> 00:31:47.486 A:middle
calling through perform drop

00:31:47.486 --> 00:31:48.796 A:middle
with coordinator, if you've

00:31:48.796 --> 00:31:49.856 A:middle
returned that magic drop

00:31:49.856 --> 00:31:51.376 A:middle
proposal and a single row is

00:31:51.376 --> 00:31:52.296 A:middle
actually being reordered.

00:31:52.926 --> 00:31:53.856 A:middle
This makes it really easy,

00:31:53.856 --> 00:31:54.836 A:middle
because you can use the same

00:31:54.836 --> 00:31:56.836 A:middle
code to ship on an iPhone.

00:31:56.836 --> 00:31:57.806 A:middle
For example, maybe where you

00:31:57.806 --> 00:31:59.546 A:middle
don't have Drag and Drop using

00:31:59.546 --> 00:32:00.936 A:middle
the existing style of

00:32:00.936 --> 00:32:01.506 A:middle
reordering.

00:32:01.616 --> 00:32:03.556 A:middle
And, if you are on an iPad, you

00:32:03.556 --> 00:32:04.556 A:middle
can use the new style of

00:32:04.556 --> 00:32:05.186 A:middle
reordering here.

00:32:06.096 --> 00:32:07.486 A:middle
So that's table view.

00:32:07.776 --> 00:32:08.546 A:middle
Pretty straightforward.

00:32:08.816 --> 00:32:10.246 A:middle
Collection view is also equally

00:32:10.246 --> 00:32:10.946 A:middle
easy, though.

00:32:11.216 --> 00:32:11.966 A:middle
Collection view.

00:32:12.006 --> 00:32:12.866 A:middle
You just need to make sure

00:32:12.866 --> 00:32:14.286 A:middle
you're implementing both a drag

00:32:14.286 --> 00:32:15.216 A:middle
and drop delegate.

00:32:15.216 --> 00:32:16.036 A:middle
So both sides.

00:32:16.996 --> 00:32:18.666 A:middle
And inside of perform drop with

00:32:18.666 --> 00:32:22.036 A:middle
coordinator, you'll actually

00:32:22.036 --> 00:32:24.226 A:middle
look at the drop items that we

00:32:24.226 --> 00:32:25.206 A:middle
passed to you in that

00:32:25.206 --> 00:32:25.836 A:middle
coordinator.

00:32:26.126 --> 00:32:27.426 A:middle
We actually are providing a

00:32:27.426 --> 00:32:28.986 A:middle
sourceIndexPath for each of

00:32:28.986 --> 00:32:30.096 A:middle
those items, which will be

00:32:30.096 --> 00:32:32.476 A:middle
non-nil, if the item represents

00:32:32.776 --> 00:32:34.246 A:middle
a particular item in the

00:32:34.246 --> 00:32:35.256 A:middle
collection view that it came

00:32:35.256 --> 00:32:35.556 A:middle
from.

00:32:35.926 --> 00:32:37.926 A:middle
So you can delete the item at

00:32:37.926 --> 00:32:39.886 A:middle
that sourceIndexPath and insert

00:32:40.276 --> 00:32:41.286 A:middle
a new item at the

00:32:41.286 --> 00:32:42.676 A:middle
destinationIndexPath.

00:32:42.676 --> 00:32:44.366 A:middle
And that's going to affect the

00:32:44.366 --> 00:32:45.166 A:middle
actual reorder.

00:32:45.466 --> 00:32:46.876 A:middle
So you'll have that cell move

00:32:46.986 --> 00:32:48.216 A:middle
seamlessly from the start to the

00:32:48.216 --> 00:32:48.786 A:middle
destination.

00:32:49.606 --> 00:32:51.456 A:middle
Now collection view has some

00:32:51.456 --> 00:32:52.656 A:middle
extra functionality for

00:32:52.656 --> 00:32:54.356 A:middle
reordering, though, and that's

00:32:54.356 --> 00:32:56.056 A:middle
this new concept of reordering

00:32:56.056 --> 00:32:56.626 A:middle
cadence.

00:32:58.096 --> 00:32:59.136 A:middle
As you know, collection views

00:32:59.136 --> 00:33:00.726 A:middle
often have these two-dimensional

00:33:00.726 --> 00:33:01.836 A:middle
grid-like layouts.

00:33:01.836 --> 00:33:02.936 A:middle
For example, the flow layout you

00:33:02.936 --> 00:33:03.606 A:middle
see behind me.

00:33:04.256 --> 00:33:05.876 A:middle
And when you're reordering,

00:33:06.006 --> 00:33:08.336 A:middle
sometimes you can get the kind

00:33:08.336 --> 00:33:09.666 A:middle
of behavior where the items are

00:33:09.666 --> 00:33:11.096 A:middle
reflowing out as you're moving

00:33:11.096 --> 00:33:11.616 A:middle
your finger.

00:33:11.616 --> 00:33:12.696 A:middle
And that's great when you're

00:33:12.696 --> 00:33:13.666 A:middle
actually trying to reorder.

00:33:13.996 --> 00:33:15.436 A:middle
But you don't always want that

00:33:15.436 --> 00:33:15.856 A:middle
behavior.

00:33:15.856 --> 00:33:16.826 A:middle
Maybe if you're trying to just

00:33:16.826 --> 00:33:18.096 A:middle
drag to a different location

00:33:18.096 --> 00:33:19.206 A:middle
outside of the collection view

00:33:19.276 --> 00:33:20.336 A:middle
and it happens to support

00:33:20.336 --> 00:33:20.776 A:middle
reordering.

00:33:21.366 --> 00:33:22.496 A:middle
So the reordering cadence has

00:33:22.556 --> 00:33:23.586 A:middle
three different values to help

00:33:23.586 --> 00:33:25.066 A:middle
you tune how responsive the

00:33:25.066 --> 00:33:26.296 A:middle
collection view is going to be

00:33:26.536 --> 00:33:27.986 A:middle
when it shuffles and reflows its

00:33:27.986 --> 00:33:28.386 A:middle
layout.

00:33:28.736 --> 00:33:30.176 A:middle
So the default, of course, is

00:33:30.176 --> 00:33:31.516 A:middle
immediate, which you've seen in

00:33:31.516 --> 00:33:32.376 A:middle
the demos so far.

00:33:32.616 --> 00:33:33.506 A:middle
Where once you start moving

00:33:33.506 --> 00:33:34.856 A:middle
around, it immediately is going

00:33:34.856 --> 00:33:35.996 A:middle
to reflow the collection view

00:33:35.996 --> 00:33:37.556 A:middle
layout as you're -- you know,

00:33:37.556 --> 00:33:38.846 A:middle
almost in real time reordering.

00:33:39.386 --> 00:33:40.606 A:middle
If you'd like to add a little

00:33:40.606 --> 00:33:42.446 A:middle
bit more deliberance here, you

00:33:42.446 --> 00:33:44.826 A:middle
can switch to the fast mode.

00:33:45.476 --> 00:33:47.516 A:middle
Where, if you move very quickly,

00:33:47.556 --> 00:33:48.886 A:middle
it won't actually immediately

00:33:48.886 --> 00:33:50.606 A:middle
reshuffle all the layout around.

00:33:50.606 --> 00:33:51.796 A:middle
And so you can see you have to

00:33:51.796 --> 00:33:53.326 A:middle
pause just a little bit longer.

00:33:53.746 --> 00:33:55.996 A:middle
And then for slow, it

00:33:55.996 --> 00:33:57.246 A:middle
exaggerates that even further.

00:33:57.246 --> 00:33:58.276 A:middle
So the user really has to be

00:33:58.276 --> 00:33:59.786 A:middle
deliberate about wanting to stop

00:33:59.786 --> 00:34:00.776 A:middle
and reorder to a specific

00:34:00.776 --> 00:34:01.286 A:middle
location.

00:34:01.576 --> 00:34:02.456 A:middle
This is how you're going to get

00:34:02.456 --> 00:34:03.816 A:middle
behavior very consistent with

00:34:04.096 --> 00:34:05.576 A:middle
the behavior you see on the iOS

00:34:05.576 --> 00:34:06.886 A:middle
Home screen when reordering app

00:34:06.886 --> 00:34:07.786 A:middle
icons, for example.

00:34:08.356 --> 00:34:09.786 A:middle
So that's reordering.

00:34:09.916 --> 00:34:11.236 A:middle
Let's talk about spring loading.

00:34:11.956 --> 00:34:13.206 A:middle
Spring loading, as you probably

00:34:13.206 --> 00:34:14.796 A:middle
know by now, is a way to

00:34:14.796 --> 00:34:16.266 A:middle
actually navigate and activate

00:34:16.266 --> 00:34:17.536 A:middle
controls throughout the system

00:34:17.536 --> 00:34:18.366 A:middle
while you're in the middle of a

00:34:18.366 --> 00:34:19.056 A:middle
drag session.

00:34:19.326 --> 00:34:20.166 A:middle
You just hover over the

00:34:20.166 --> 00:34:20.756 A:middle
controls.

00:34:20.826 --> 00:34:22.216 A:middle
It starts highlighting and then

00:34:22.216 --> 00:34:23.016 A:middle
it's going to activate.

00:34:23.636 --> 00:34:24.736 A:middle
So, in collection and table

00:34:24.736 --> 00:34:26.346 A:middle
view, it's dropped at easy to

00:34:26.346 --> 00:34:27.816 A:middle
adopt spring loading and that's

00:34:27.816 --> 00:34:29.866 A:middle
because both of them conform to

00:34:29.866 --> 00:34:32.026 A:middle
the protocol UISpringLoaded

00:34:32.026 --> 00:34:32.986 A:middle
InteractionSupporting.

00:34:33.506 --> 00:34:34.646 A:middle
Basically that just means they

00:34:34.646 --> 00:34:35.616 A:middle
each have a property

00:34:35.616 --> 00:34:37.176 A:middle
isSpringLoaded, which you set to

00:34:37.176 --> 00:34:38.946 A:middle
true, and spring loading works.

00:34:39.646 --> 00:34:41.236 A:middle
When users spring load on a

00:34:41.236 --> 00:34:42.356 A:middle
particular cell, we're going to

00:34:42.356 --> 00:34:43.346 A:middle
call -- we're going to select

00:34:43.456 --> 00:34:44.506 A:middle
that item or row in the

00:34:44.506 --> 00:34:45.366 A:middle
collection or table view.

00:34:46.166 --> 00:34:47.266 A:middle
And you can customize spring

00:34:47.266 --> 00:34:48.556 A:middle
loading using a new delegate

00:34:48.556 --> 00:34:50.516 A:middle
method shouldSpringLoadItemAt

00:34:50.516 --> 00:34:51.736 A:middle
IndexPath with context.

00:34:51.866 --> 00:34:53.176 A:middle
This is how you can opt out

00:34:53.176 --> 00:34:54.566 A:middle
specific rows of spring loading.

00:34:54.946 --> 00:34:56.976 A:middle
Or you can even customize spring

00:34:56.976 --> 00:34:58.716 A:middle
loading effects a bit using that

00:34:58.716 --> 00:34:59.126 A:middle
context.

00:34:59.126 --> 00:35:00.476 A:middle
For example, you can change the

00:35:00.476 --> 00:35:01.846 A:middle
view that actually flashes

00:35:01.846 --> 00:35:02.536 A:middle
during the spring load

00:35:02.536 --> 00:35:03.096 A:middle
interaction.

00:35:04.086 --> 00:35:06.786 A:middle
So next, let's talk a little bit

00:35:06.786 --> 00:35:08.416 A:middle
about customizing appearance.

00:35:09.326 --> 00:35:10.776 A:middle
We have some new ways that you

00:35:10.776 --> 00:35:12.096 A:middle
can customize the appearance of

00:35:12.096 --> 00:35:13.776 A:middle
cells that are participating in

00:35:13.836 --> 00:35:14.636 A:middle
drag sessions.

00:35:15.306 --> 00:35:17.096 A:middle
So cells start -- they have a

00:35:17.096 --> 00:35:18.376 A:middle
new notion of a drag state, and

00:35:18.376 --> 00:35:19.686 A:middle
they all start in the none

00:35:19.806 --> 00:35:21.186 A:middle
state, and that's before

00:35:21.186 --> 00:35:21.946 A:middle
anything's happened.

00:35:22.276 --> 00:35:23.266 A:middle
But when the user actually puts

00:35:23.266 --> 00:35:24.306 A:middle
their finger on the glass and

00:35:24.306 --> 00:35:25.296 A:middle
starts lifting one of those

00:35:25.296 --> 00:35:26.746 A:middle
cells, we're going to transition

00:35:26.746 --> 00:35:28.086 A:middle
the cell to the lifting state.

00:35:28.406 --> 00:35:29.696 A:middle
And, as you can see here, in

00:35:29.696 --> 00:35:31.036 A:middle
this example, we have a little

00:35:31.036 --> 00:35:32.226 A:middle
banner showing on each of the

00:35:32.226 --> 00:35:32.666 A:middle
cells.

00:35:32.666 --> 00:35:33.846 A:middle
And we'd rather not actually

00:35:33.846 --> 00:35:35.176 A:middle
show that banner when the user's

00:35:35.176 --> 00:35:36.776 A:middle
dragging the cell all around

00:35:36.776 --> 00:35:37.506 A:middle
across the system.

00:35:37.886 --> 00:35:39.606 A:middle
So we can use this transition of

00:35:39.606 --> 00:35:41.136 A:middle
the state to the lifting state

00:35:41.446 --> 00:35:43.106 A:middle
to actually hide that banner.

00:35:44.386 --> 00:35:45.676 A:middle
When the user actually moves

00:35:45.676 --> 00:35:46.986 A:middle
their finger to actually begin

00:35:46.986 --> 00:35:48.696 A:middle
the drag session, once the cell

00:35:48.696 --> 00:35:50.236 A:middle
finishes the lift, we'll

00:35:50.236 --> 00:35:52.016 A:middle
transition the cell that remains

00:35:52.016 --> 00:35:53.096 A:middle
behind in the collection or

00:35:53.096 --> 00:35:54.396 A:middle
table view to the dragging

00:35:54.396 --> 00:35:54.786 A:middle
state.

00:35:55.186 --> 00:35:56.606 A:middle
And by default, this is going to

00:35:56.606 --> 00:35:58.396 A:middle
result in a faded appearance,

00:35:58.396 --> 00:36:00.066 A:middle
where we'll reduce the alpha of

00:36:00.066 --> 00:36:00.636 A:middle
that cell.

00:36:01.376 --> 00:36:03.566 A:middle
Now you can respond to these

00:36:03.566 --> 00:36:05.156 A:middle
state transitions by overriding

00:36:05.156 --> 00:36:06.916 A:middle
the method on your cell class,

00:36:07.036 --> 00:36:09.476 A:middle
subclass, dragStateDidChange.

00:36:09.826 --> 00:36:10.856 A:middle
Just use the new state that's

00:36:10.856 --> 00:36:11.566 A:middle
being passed in.

00:36:11.566 --> 00:36:13.326 A:middle
You can optionally call super to

00:36:13.326 --> 00:36:14.596 A:middle
get the default appearance and

00:36:14.596 --> 00:36:14.956 A:middle
behavior.

00:36:15.226 --> 00:36:16.326 A:middle
Or you can just choose to

00:36:16.326 --> 00:36:17.756 A:middle
override it and provide your own

00:36:17.756 --> 00:36:18.766 A:middle
behavior and implementation.

00:36:18.766 --> 00:36:20.636 A:middle
We will even make sure to call

00:36:20.636 --> 00:36:22.096 A:middle
these state transitions inside

00:36:22.096 --> 00:36:23.926 A:middle
and alongside animation closure

00:36:24.356 --> 00:36:25.826 A:middle
with the actual lift animations,

00:36:25.826 --> 00:36:26.286 A:middle
for example.

00:36:26.286 --> 00:36:28.056 A:middle
So if you make changes here,

00:36:28.056 --> 00:36:28.896 A:middle
they're going to be animated

00:36:28.896 --> 00:36:30.216 A:middle
running forwards and backwards

00:36:30.216 --> 00:36:30.936 A:middle
with those lifts.

00:36:31.526 --> 00:36:33.116 A:middle
So that's how we customize the

00:36:33.116 --> 00:36:35.386 A:middle
actual cell that is in the

00:36:35.386 --> 00:36:36.456 A:middle
collection or table view, but

00:36:36.716 --> 00:36:37.656 A:middle
what about the actual drag

00:36:37.656 --> 00:36:39.126 A:middle
preview that you drag around?

00:36:39.526 --> 00:36:41.166 A:middle
As you see here, in this

00:36:41.266 --> 00:36:44.006 A:middle
example, we have a cell that is

00:36:44.006 --> 00:36:45.076 A:middle
basically a square shape.

00:36:45.366 --> 00:36:46.416 A:middle
But, if the content that's

00:36:46.416 --> 00:36:48.726 A:middle
visible is a wider aspect ratio,

00:36:49.116 --> 00:36:50.736 A:middle
it's showing a nice image and so

00:36:50.736 --> 00:36:51.946 A:middle
we result in, you know, these

00:36:52.346 --> 00:36:54.316 A:middle
not very pretty white bars at

00:36:54.316 --> 00:36:55.036 A:middle
the top and bottom.

00:36:55.036 --> 00:36:56.246 A:middle
Probably don't really want this

00:36:56.246 --> 00:36:57.106 A:middle
appearance while the user's

00:36:57.106 --> 00:36:58.396 A:middle
dragging this, you know, photo

00:36:58.396 --> 00:36:58.996 A:middle
around the system.

00:36:59.286 --> 00:37:00.216 A:middle
So how can we fix that?

00:37:00.986 --> 00:37:03.356 A:middle
Well, by default, it's happening

00:37:03.356 --> 00:37:04.906 A:middle
because we use the entire cell

00:37:04.906 --> 00:37:05.866 A:middle
as the drag preview.

00:37:06.146 --> 00:37:07.436 A:middle
But, of course, you can change

00:37:07.436 --> 00:37:07.656 A:middle
that.

00:37:08.236 --> 00:37:09.636 A:middle
And so you can provide drag

00:37:09.636 --> 00:37:10.816 A:middle
preview parameters by

00:37:10.816 --> 00:37:12.156 A:middle
implementing an optional method

00:37:12.156 --> 00:37:13.086 A:middle
on the dragDelegate,

00:37:13.486 --> 00:37:14.886 A:middle
dragPreviewParametersForItemAt

00:37:14.886 --> 00:37:15.476 A:middle
IndexPath.

00:37:15.576 --> 00:37:16.916 A:middle
And, if you provide these,

00:37:17.246 --> 00:37:18.116 A:middle
there's, for example, an

00:37:18.116 --> 00:37:19.456 A:middle
opportunity for you to provide a

00:37:19.456 --> 00:37:21.136 A:middle
bezier path, which will clip to

00:37:21.136 --> 00:37:22.356 A:middle
a specific region within the

00:37:22.356 --> 00:37:22.726 A:middle
cell.

00:37:23.046 --> 00:37:24.476 A:middle
So if we look back at our

00:37:24.476 --> 00:37:26.246 A:middle
example, if we return a bezier

00:37:26.246 --> 00:37:27.796 A:middle
path that clips to the actual

00:37:27.796 --> 00:37:29.266 A:middle
rect where there's a visible

00:37:29.266 --> 00:37:30.966 A:middle
photo, we can just lift just

00:37:30.966 --> 00:37:32.466 A:middle
that photo off the screen even

00:37:32.466 --> 00:37:33.796 A:middle
though the cell is still a

00:37:33.796 --> 00:37:34.766 A:middle
square in this example.

00:37:35.516 --> 00:37:38.196 A:middle
[ Applause ]

00:37:38.696 --> 00:37:39.376 A:middle
Okay. Wow.

00:37:39.406 --> 00:37:40.716 A:middle
We've covered a lot today.

00:37:41.066 --> 00:37:42.246 A:middle
So what are the next steps for

00:37:42.246 --> 00:37:42.386 A:middle
you?

00:37:43.636 --> 00:37:45.486 A:middle
Well, first of all, we hope when

00:37:45.486 --> 00:37:46.756 A:middle
you leave here you go and add

00:37:46.756 --> 00:37:47.666 A:middle
Drag and Drop to all the

00:37:47.666 --> 00:37:48.776 A:middle
collection and table views in

00:37:48.776 --> 00:37:49.686 A:middle
your applications.

00:37:49.686 --> 00:37:50.876 A:middle
You saw how easy it is just to

00:37:50.876 --> 00:37:52.306 A:middle
get the basics up and running

00:37:52.566 --> 00:37:53.176 A:middle
very quickly.

00:37:53.736 --> 00:37:54.896 A:middle
And users are going to expect

00:37:54.896 --> 00:37:56.126 A:middle
that your apps support Drag and

00:37:56.126 --> 00:37:57.276 A:middle
Drop in iOS 11.

00:37:58.176 --> 00:37:59.196 A:middle
Now you should definitely

00:37:59.196 --> 00:38:00.326 A:middle
consider providing a drop

00:38:00.326 --> 00:38:02.116 A:middle
proposal and setting up those

00:38:02.116 --> 00:38:03.506 A:middle
great animations, because we

00:38:03.506 --> 00:38:04.966 A:middle
made it really easy to do so.

00:38:05.306 --> 00:38:06.876 A:middle
And it will provide the best

00:38:06.876 --> 00:38:08.286 A:middle
look and feel for your users.

00:38:08.676 --> 00:38:10.946 A:middle
And, of course, don't forget

00:38:10.946 --> 00:38:11.746 A:middle
about placeholders.

00:38:12.116 --> 00:38:13.076 A:middle
When your data is loading

00:38:13.076 --> 00:38:14.746 A:middle
asynchronously, use placeholders

00:38:14.746 --> 00:38:16.636 A:middle
to very easily manage that

00:38:16.756 --> 00:38:18.756 A:middle
asynchronous data load and keep

00:38:18.756 --> 00:38:20.496 A:middle
the UI completely responsive and

00:38:20.496 --> 00:38:21.776 A:middle
interactive during any

00:38:21.776 --> 00:38:22.816 A:middle
long-running transfers.

00:38:23.396 --> 00:38:24.966 A:middle
And finally, don't forget to

00:38:24.966 --> 00:38:25.836 A:middle
polish the details.

00:38:26.426 --> 00:38:27.696 A:middle
We can't wait to see what you

00:38:27.696 --> 00:38:29.136 A:middle
will do with all of these really

00:38:29.136 --> 00:38:31.306 A:middle
awesome APIs, and we're going to

00:38:31.496 --> 00:38:32.866 A:middle
be super excited to see the

00:38:32.866 --> 00:38:33.396 A:middle
results.

00:38:33.936 --> 00:38:35.826 A:middle
For more information and to

00:38:35.826 --> 00:38:36.986 A:middle
download the sample app that

00:38:36.986 --> 00:38:38.086 A:middle
we've been showing you today,

00:38:38.086 --> 00:38:39.646 A:middle
which has fleshed-out examples

00:38:39.646 --> 00:38:41.096 A:middle
of all sorts of great Drag and

00:38:41.096 --> 00:38:41.956 A:middle
Drop with collection view and

00:38:41.956 --> 00:38:42.766 A:middle
table view code.

00:38:43.276 --> 00:38:45.166 A:middle
Go to this URL, it's really

00:38:45.166 --> 00:38:45.446 A:middle
great.

00:38:46.306 --> 00:38:47.826 A:middle
There's a session immediately

00:38:47.826 --> 00:38:49.576 A:middle
following this one, in this room

00:38:49.576 --> 00:38:50.696 A:middle
right here, so you can just stay

00:38:50.696 --> 00:38:51.106 A:middle
seated.

00:38:51.366 --> 00:38:52.526 A:middle
Data delivery with Drag and

00:38:52.526 --> 00:38:53.796 A:middle
Drop, which is going to go into

00:38:53.796 --> 00:38:55.376 A:middle
some more details about loading

00:38:55.376 --> 00:38:56.756 A:middle
and transferring the actual data

00:38:56.756 --> 00:38:57.816 A:middle
and item providers.

00:38:58.276 --> 00:38:58.826 A:middle
Really cool.

00:38:59.216 --> 00:38:59.956 A:middle
Stick around for that.

00:39:00.176 --> 00:39:00.946 A:middle
And, of course, we had some

00:39:00.946 --> 00:39:02.216 A:middle
other sessions earlier this week

00:39:02.216 --> 00:39:03.566 A:middle
on Drag and Drop, introducing

00:39:03.566 --> 00:39:04.556 A:middle
Drag and Drop, and mastering

00:39:04.556 --> 00:39:05.076 A:middle
Drag and Drop.

00:39:05.326 --> 00:39:06.916 A:middle
Check those out on video to

00:39:06.916 --> 00:39:07.366 A:middle
learn more.

00:39:08.016 --> 00:39:09.586 A:middle
Finally, we hope you've enjoyed

00:39:09.586 --> 00:39:10.506 A:middle
the presentation and have a

00:39:10.506 --> 00:39:11.756 A:middle
great WWDC.

00:39:12.516 --> 00:39:15.500 A:middle
[ Applause ]