WEBVTT

99:59:59.999 --> 99:59:59.999
I'm Patrick Beard, and I work on Objective-C.

99:59:59.999 --> 99:59:59.999
[applause]

99:59:59.999 --> 99:59:59.999
Let me tell you, it's a real honor to get to work on this 30-year-old language.

99:59:59.999 --> 99:59:59.999
So Objective-C's popular. And I can see that by how many of you are here today.

99:59:59.999 --> 99:59:59.999
In the last five years, the popularity according to the TIOBE Programming Community Index has gone up from number 45 -

99:59:59.999 --> 99:59:59.999
and this is popularity in terms of search engine hits on the popular search engines - to number six last year,

99:59:59.999 --> 99:59:59.999
and this year, we've broken the top five!

99:59:59.999 --> 99:59:59.999
[applause]

99:59:59.999 --> 99:59:59.999
I won't mention number five.

99:59:59.999 --> 99:59:59.999
So let's talk about some of the history, just a little bit of the history of the language.

99:59:59.999 --> 99:59:59.999
Started back in the late - early 80's, Brad Cox StepStone, in Object-Oriented C.

99:59:59.999 --> 99:59:59.999
Very small language, I sort of think of it as the ukulele of languages: it's a very powerful but small language.

99:59:59.999 --> 99:59:59.999
Then a little company you may have heard of: NEXT got hold of it, added some nice features to the language:

99:59:59.999 --> 99:59:59.999
Protocols, which are wonderful, and retain and release, a memory management model that allows you to write more scalable programs.

99:59:59.999 --> 99:59:59.999
And some great frameworks, many of which we are still using today.

99:59:59.999 --> 99:59:59.999
When we got a hold of it - Apple, that is - we added some new features.

99:59:59.999 --> 99:59:59.999
We streamlined your code by providing properties, which automate the accessor pattern.

99:59:59.999 --> 99:59:59.999
And we added fast enumeration, which makes your code more efficient, more concise.

99:59:59.999 --> 99:59:59.999
Tell you, there's a theme here. We're simplifying a language, we like to say. We're adding features.

99:59:59.999 --> 99:59:59.999
We added blocks, which make it a lot easier to do multi-threaded programming,

99:59:59.999 --> 99:59:59.999
and finally, ARC, which automates retain and release, makes the memory management a lot simpler in your program.

99:59:59.999 --> 99:59:59.999
So we haven't been idle. This past year we've been adding some additional features to the language that I'm happy to present to you today.

99:59:59.999 --> 99:59:59.999
These are gonna help simplify your code and help you avoid making common mistakes.

99:59:59.999 --> 99:59:59.999
So let's start off with a very fundamental feature of the language: methods.

99:59:59.999 --> 99:59:59.999
Methods are how you give behavior to your objects.

99:59:59.999 --> 99:59:59.999
So everybody has written, hopefully a class like this. It has a public method, which is used by the customers of your code, and it has a private method.

99:59:59.999 --> 99:59:59.999
In this case, the public method says: "let's play a song", we have some sort of song object.

99:59:59.999 --> 99:59:59.999
The private method is used to manage the audio, manage the audio engines underlying the song player.

99:59:59.999 --> 99:59:59.999
Now if you write it like I've written here, with the current compilers, the previous compilers, you're going to get a warning.

99:59:59.999 --> 99:59:59.999
It says basically: "Hey! I have not seen this method. You're calling it before you've even declared it. What's up with that?"
