WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:12.496 --> 00:00:13.356 A:middle
&gt;&gt; Good morning everyone.

00:00:13.706 --> 00:00:14.976 A:middle
My name is Elizabeth Reid

00:00:14.976 --> 00:00:16.726 A:middle
and I'm an engineer
on the iWork Team.

00:00:17.546 --> 00:00:19.936 A:middle
And I'm here today with one
my co-workers to talk to you

00:00:19.936 --> 00:00:23.816 A:middle
about how to share code
between iOS and OS X.

00:00:24.336 --> 00:00:27.916 A:middle
So, you know, what we're going
to do today is first talk

00:00:27.916 --> 00:00:30.166 A:middle
about what code it's
possible for us to share

00:00:30.166 --> 00:00:31.856 A:middle
and what we probably
don't want to share.

00:00:32.496 --> 00:00:35.106 A:middle
And then how we can share
more code or have it easier

00:00:35.106 --> 00:00:36.906 A:middle
to write shared code
using some frameworks.

00:00:37.626 --> 00:00:39.576 A:middle
And specifically
also give an example

00:00:39.576 --> 00:00:40.776 A:middle
of some shared rendering code.

00:00:40.776 --> 00:00:43.206 A:middle
And then we're going to
talk about file formats

00:00:43.206 --> 00:00:45.806 A:middle
and how you can optimize
and build those

00:00:45.806 --> 00:00:48.106 A:middle
for a better multiplatform
experience.

00:00:48.726 --> 00:00:50.846 A:middle
And finally, my co-worker
Chris is going to talk to you

00:00:50.846 --> 00:00:52.526 A:middle
about how to set up
your XCode projects

00:00:52.886 --> 00:00:54.196 A:middle
to compile cross-platform.

00:00:54.606 --> 00:00:59.226 A:middle
Last fall iWork had a release

00:00:59.226 --> 00:01:01.256 A:middle
where we took our
iOS applications


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.226 --> 00:01:01.256 A:middle
where we took our
iOS applications

00:01:01.256 --> 00:01:04.236 A:middle
on our modern code base
and we took that code base

00:01:04.366 --> 00:01:06.336 A:middle
and brought it over
to compile for OS X.

00:01:06.916 --> 00:01:10.116 A:middle
So now we have all of
our applications for iOS

00:01:10.216 --> 00:01:12.386 A:middle
and OS X compiling from
a single code base.

00:01:12.616 --> 00:01:14.636 A:middle
And that was a really
big deal for us.

00:01:14.636 --> 00:01:18.246 A:middle
We really wanted to have
a single location for all

00:01:18.246 --> 00:01:21.046 A:middle
of our features, to have
a better user experience

00:01:21.046 --> 00:01:22.576 A:middle
and better engineering
experience

00:01:22.576 --> 00:01:23.636 A:middle
so that everyone's happier.

00:01:24.336 --> 00:01:25.386 A:middle
And so we're going
to talk to you

00:01:25.386 --> 00:01:28.856 A:middle
about that specific transform
from iOS code to OS X.

00:01:29.706 --> 00:01:32.076 A:middle
But, the concepts and
examples we're going

00:01:32.076 --> 00:01:34.906 A:middle
to give you are meant to
be, you know, examples

00:01:34.906 --> 00:01:37.906 A:middle
and not specific directives
on what you should do.

00:01:37.906 --> 00:01:41.256 A:middle
And so the ideas and concepts
should apply if you're going

00:01:41.256 --> 00:01:43.616 A:middle
in the other direction, you're
taking an OS X application

00:01:43.616 --> 00:01:44.486 A:middle
and bringing it to iOS.

00:01:45.266 --> 00:01:47.226 A:middle
Or even if you're building
both at the same time.

00:01:47.786 --> 00:01:49.586 A:middle
These are just, you
know, principles rather

00:01:49.586 --> 00:01:53.306 A:middle
than an obvious iOS
only to OS X only.

00:01:54.076 --> 00:01:55.516 A:middle
And we have a lot of
different examples

00:01:55.546 --> 00:01:58.726 A:middle
because iWork is a really
big suite of applications.

00:01:58.916 --> 00:02:00.676 A:middle
We have well over a
million lines of code


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.916 --> 00:02:00.676 A:middle
We have well over a
million lines of code

00:02:01.416 --> 00:02:03.216 A:middle
and over 10,000 unique classes.

00:02:03.996 --> 00:02:07.486 A:middle
And of these 10,000 unique
classes, over 75 percent

00:02:07.486 --> 00:02:10.316 A:middle
of them are shared
between iOS and OS X.

00:02:11.326 --> 00:02:15.236 A:middle
Now, note that this number
is not nearly 100 percent.

00:02:15.666 --> 00:02:18.626 A:middle
It's a large chunk of
code, a lot of the code,

00:02:19.056 --> 00:02:20.196 A:middle
but not all of the code.

00:02:20.196 --> 00:02:22.426 A:middle
And that was intentional
on our part.

00:02:22.456 --> 00:02:25.046 A:middle
We wanted to choose which
code we wanted to share

00:02:25.536 --> 00:02:27.446 A:middle
and which code is really
meant to be only run

00:02:27.446 --> 00:02:29.066 A:middle
on one platform or the other.

00:02:29.066 --> 00:02:33.366 A:middle
And that gives us a really good
common experience for our users

00:02:33.366 --> 00:02:35.746 A:middle
in our applications
while still targeting

00:02:35.746 --> 00:02:38.216 A:middle
and embracing the strengths of
each device we're running on.

00:02:38.756 --> 00:02:40.326 A:middle
And that was really,
you know, a helpful way

00:02:40.326 --> 00:02:42.736 A:middle
to build the best
applications we possibly could.

00:02:44.706 --> 00:02:45.546 A:middle
So where did we start?

00:02:46.236 --> 00:02:48.026 A:middle
We started with our
iOS applications.

00:02:48.226 --> 00:02:51.346 A:middle
We already had iWork running
on iPad and on iPhone.

00:02:51.866 --> 00:02:53.886 A:middle
And we had a team of
really, you know, excited

00:02:53.886 --> 00:02:56.816 A:middle
and passionate developers
who wanted to take this code

00:02:57.236 --> 00:02:59.586 A:middle
and bring it to our Mac platform

00:02:59.586 --> 00:03:01.896 A:middle
and have everything
running from one location.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.586 --> 00:03:01.896 A:middle
and have everything
running from one location.

00:03:02.546 --> 00:03:04.116 A:middle
And our code was
set up something

00:03:04.116 --> 00:03:05.836 A:middle
like this, a rough estimate.

00:03:05.876 --> 00:03:07.666 A:middle
Hopefully you guys are
familiar with this pattern.

00:03:07.666 --> 00:03:11.026 A:middle
But just a review, the Model
View Controller design pattern

00:03:11.136 --> 00:03:14.136 A:middle
is where the model is the
data of your application.

00:03:14.136 --> 00:03:15.076 A:middle
It's the content.

00:03:15.386 --> 00:03:17.426 A:middle
And maybe you're sending it over
the wires, saving it on disk.

00:03:18.316 --> 00:03:21.046 A:middle
The view is what your user is
looking at or interacting with.

00:03:21.446 --> 00:03:23.116 A:middle
And you don't really
want those two ever

00:03:23.116 --> 00:03:25.216 A:middle
to talk directly to each other.

00:03:25.216 --> 00:03:28.356 A:middle
If your model changes, and you
don't want your view to change,

00:03:28.576 --> 00:03:30.206 A:middle
if they're tied directly
to each other, that's -

00:03:30.326 --> 00:03:32.696 A:middle
you have to change both
sides or vice versa.

00:03:33.276 --> 00:03:35.306 A:middle
And so instead, we have
controllers that we use

00:03:35.306 --> 00:03:38.086 A:middle
as a translator to negotiate
between the two of them

00:03:38.086 --> 00:03:41.626 A:middle
so that you don't need to
worry about having your model

00:03:41.626 --> 00:03:43.306 A:middle
and your view too
tightly intertwined.

00:03:44.906 --> 00:03:46.366 A:middle
So we look at each
section of this.

00:03:46.366 --> 00:03:47.296 A:middle
We started with a model.

00:03:48.006 --> 00:03:50.496 A:middle
And we want to figure out if
we could share our model code.

00:03:50.496 --> 00:03:52.956 A:middle
And for us that was part
of one of the major points

00:03:53.146 --> 00:03:54.346 A:middle
of this particular rewrite.

00:03:54.686 --> 00:03:58.186 A:middle
We really wanted our files
to be the same everywhere.

00:03:58.756 --> 00:04:00.636 A:middle
And most - and a
very important part


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.756 --> 00:04:00.636 A:middle
And most - and a
very important part

00:04:00.636 --> 00:04:02.386 A:middle
of that is having our
model code that talks

00:04:02.386 --> 00:04:04.526 A:middle
to our files also be
the same everywhere.

00:04:05.066 --> 00:04:07.456 A:middle
And since our model code isn't
talking to the view code -

00:04:07.456 --> 00:04:09.976 A:middle
we have our controllers in
between - we should be able

00:04:09.976 --> 00:04:11.146 A:middle
to share our model code.

00:04:11.576 --> 00:04:14.376 A:middle
I'll talk a bit more later about
the actual content of the model.

00:04:14.546 --> 00:04:15.656 A:middle
But for now we're going to say

00:04:15.656 --> 00:04:17.375 A:middle
that the model code,
we're going to share.

00:04:17.826 --> 00:04:19.196 A:middle
We'll mean shared
in this context.

00:04:20.146 --> 00:04:22.986 A:middle
Next, we looked at
the view code.

00:04:23.556 --> 00:04:24.896 A:middle
Can we share our view code?

00:04:25.596 --> 00:04:26.986 A:middle
We want to share our view code.

00:04:26.986 --> 00:04:29.936 A:middle
We really want our applications
to have the same content

00:04:29.936 --> 00:04:32.096 A:middle
for our users', you
know files, when we open

00:04:32.096 --> 00:04:33.386 A:middle
and display them onscreen.

00:04:33.686 --> 00:04:35.416 A:middle
We want those to look
the same everywhere,

00:04:35.416 --> 00:04:38.396 A:middle
because our users carefully
crafted their documents

00:04:38.426 --> 00:04:39.796 A:middle
to look exactly how they want.

00:04:40.666 --> 00:04:42.866 A:middle
But, there's some problems
with sharing view code.

00:04:43.636 --> 00:04:47.056 A:middle
First of all, there's actual
interaction per platform.

00:04:47.696 --> 00:04:49.586 A:middle
On OS X, the way
that users interact

00:04:49.696 --> 00:04:52.126 A:middle
with your applications are
with a mouse and a keyboard.

00:04:52.126 --> 00:04:52.996 A:middle
They have hot keys.

00:04:53.786 --> 00:04:55.076 A:middle
You know, they're
using the cursor,

00:04:55.076 --> 00:04:56.986 A:middle
which is a very precise
single pointer.

00:04:57.466 --> 00:05:00.326 A:middle
Whereas on iOS, you
have Multi-Touch.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:57.466 --> 00:05:00.326 A:middle
Whereas on iOS, you
have Multi-Touch.

00:05:00.356 --> 00:05:04.986 A:middle
And you have 10 very wonderful
but less-precise fingers.

00:05:05.606 --> 00:05:06.956 A:middle
The human interface
guideline says

00:05:06.956 --> 00:05:10.856 A:middle
on iOS you need your buttons to
be at least 44 by 44 points just

00:05:10.856 --> 00:05:12.826 A:middle
to make sure that your
users are able to tap them.

00:05:13.246 --> 00:05:15.006 A:middle
And that's, you know,
less precise

00:05:15.386 --> 00:05:17.216 A:middle
than your OS X interactions.

00:05:17.856 --> 00:05:19.336 A:middle
And so that's, you know, one
thing we're going to have

00:05:19.336 --> 00:05:20.726 A:middle
to take into account
with our view code.

00:05:21.726 --> 00:05:23.966 A:middle
Another thing we need
to consider is the fact

00:05:24.056 --> 00:05:25.516 A:middle
that the actual display size

00:05:25.626 --> 00:05:28.036 A:middle
between the different devices
is going to be different.

00:05:28.536 --> 00:05:31.146 A:middle
The kinds of content we
can show, the space we have

00:05:31.146 --> 00:05:33.976 A:middle
for controls, is going to
vary based on platform.

00:05:33.976 --> 00:05:36.076 A:middle
It's even more extreme
on iPhone versus Mac.

00:05:36.856 --> 00:05:39.046 A:middle
And so we want to
take advantage of all

00:05:39.046 --> 00:05:41.716 A:middle
of the space we have available
to us when it is available

00:05:42.086 --> 00:05:43.546 A:middle
and handle the fact
that sometimes

00:05:43.546 --> 00:05:46.176 A:middle
that space won't be
available on smaller devices.

00:05:46.176 --> 00:05:48.536 A:middle
And we're going to
have to craft our code

00:05:48.976 --> 00:05:53.316 A:middle
for each platform a little
bit in that view space.

00:05:53.796 --> 00:05:56.806 A:middle
Also, on iOS your user
is looking directly

00:05:56.806 --> 00:06:00.116 A:middle
at your content, your
application and nothing else.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:56.806 --> 00:06:00.116 A:middle
at your content, your
application and nothing else.

00:06:00.236 --> 00:06:02.186 A:middle
That's how iOS devices work.

00:06:02.916 --> 00:06:05.936 A:middle
And on OS X you can
have multiple windows,

00:06:05.936 --> 00:06:06.946 A:middle
multiple applications.

00:06:06.946 --> 00:06:08.646 A:middle
They're doing multiple
things at the same time.

00:06:09.046 --> 00:06:11.046 A:middle
And you really need to take that
into account that there's going

00:06:11.046 --> 00:06:14.626 A:middle
to be other things happening
on your OS X platforms.

00:06:14.626 --> 00:06:16.156 A:middle
And you need to build
your view accordingly.

00:06:16.186 --> 00:06:20.136 A:middle
You don't get to use all of
the room all of the time.

00:06:20.326 --> 00:06:21.366 A:middle
On a more technical note,

00:06:21.996 --> 00:06:24.476 A:middle
you literally can't compile
view code cross-platform.

00:06:24.886 --> 00:06:27.846 A:middle
If you take a class that
inherits from UIView and you try

00:06:27.846 --> 00:06:31.126 A:middle
to compile it on OS X, XCode
will look something like this

00:06:31.126 --> 00:06:32.166 A:middle
and get kind of mad at you.

00:06:32.726 --> 00:06:35.976 A:middle
And so there's that
technical hurdle as well.

00:06:36.156 --> 00:06:38.326 A:middle
Now some of you may be
looking at this saying ah,

00:06:39.026 --> 00:06:39.996 A:middle
I know how to handle this.

00:06:39.996 --> 00:06:40.996 A:middle
I can fix this problem.

00:06:41.706 --> 00:06:43.916 A:middle
And you might be thinking of
something that looks like this.

00:06:44.386 --> 00:06:45.986 A:middle
We call this shimming in iWork.

00:06:46.376 --> 00:06:48.136 A:middle
It's also known as
conditional compilation.

00:06:48.826 --> 00:06:51.816 A:middle
And it's where your have
your subclass inheriting

00:06:51.816 --> 00:06:55.926 A:middle
from either UIView on
iOS or NSView on OS X.

00:06:55.926 --> 00:06:58.786 A:middle
And that change has
made it compile time.

00:06:58.956 --> 00:07:00.076 A:middle
And so you write the same code.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.956 --> 00:07:00.076 A:middle
And so you write the same code.

00:07:00.076 --> 00:07:03.196 A:middle
And it has a different super
class on each platform.

00:07:03.796 --> 00:07:06.566 A:middle
Now, you know, this will
compile, absolutely.

00:07:06.566 --> 00:07:07.846 A:middle
And it does work.

00:07:08.226 --> 00:07:09.866 A:middle
But there are some
problems with shimming.

00:07:11.066 --> 00:07:14.706 A:middle
Now, views have - you
know, UIView and NSView -

00:07:14.846 --> 00:07:15.986 A:middle
have many similarities.

00:07:16.056 --> 00:07:17.896 A:middle
They serve the same basic
purpose in your code.

00:07:18.476 --> 00:07:20.976 A:middle
They're there to handle
user interaction events

00:07:20.976 --> 00:07:22.416 A:middle
and put content onscreen.

00:07:23.056 --> 00:07:24.426 A:middle
But there are a number

00:07:24.426 --> 00:07:25.746 A:middle
of differences between
them as well.

00:07:26.196 --> 00:07:28.666 A:middle
They have different APIs, they
support different features.

00:07:28.666 --> 00:07:29.906 A:middle
And there's some
subtle differences

00:07:29.906 --> 00:07:31.826 A:middle
in their common behavior
as well.

00:07:32.346 --> 00:07:34.836 A:middle
And so if you build, for
example, Drag and Drop support

00:07:35.056 --> 00:07:38.546 A:middle
on your OS X application with
your view, and you go compile

00:07:38.546 --> 00:07:41.286 A:middle
that on iOS, those
APIs don't exist.

00:07:41.286 --> 00:07:42.666 A:middle
And your code won't compile.

00:07:43.186 --> 00:07:46.546 A:middle
And so if you shim, you're going
to break the build fairly often

00:07:46.716 --> 00:07:49.066 A:middle
because of the differences
in APIs between platforms.

00:07:50.796 --> 00:07:53.886 A:middle
Also, it's going to be very
hard to target your fix

00:07:54.466 --> 00:07:56.896 A:middle
to the platform that
you're trying to fix.

00:07:56.986 --> 00:08:00.936 A:middle
So if you a particular issue
or change you want to make only


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:56.986 --> 00:08:00.936 A:middle
So if you a particular issue
or change you want to make only

00:08:00.936 --> 00:08:04.166 A:middle
on OS X, but your code is
compiled in both places,

00:08:04.516 --> 00:08:06.986 A:middle
you're now going to have
trouble getting that code

00:08:06.986 --> 00:08:09.266 A:middle
to only fix OS X and not iOS.

00:08:10.046 --> 00:08:11.986 A:middle
And so you could do more
conditional compilation,

00:08:11.986 --> 00:08:12.696 A:middle
absolutely.

00:08:12.856 --> 00:08:13.896 A:middle
You could have that
in your code.

00:08:14.406 --> 00:08:16.046 A:middle
That makes your code
really hard to read

00:08:16.236 --> 00:08:17.696 A:middle
and also really hard
to maintain.

00:08:17.696 --> 00:08:20.656 A:middle
And so over time, more and
more problems may arise

00:08:21.016 --> 00:08:22.946 A:middle
as you reach the edge
cases of your behavior.

00:08:24.456 --> 00:08:27.386 A:middle
Also, if you build a
view hierarchy on iOS

00:08:27.776 --> 00:08:32.166 A:middle
and it looks great on your iPad
or your iPhone, and you shim it

00:08:32.366 --> 00:08:34.336 A:middle
to bring it over to OS
X, and you get everything

00:08:34.336 --> 00:08:36.716 A:middle
that can compile compiling,
and you put on screen,

00:08:37.096 --> 00:08:39.066 A:middle
your UI is going to look
like it's built for iOS.

00:08:39.066 --> 00:08:41.976 A:middle
And remember how our buttons
are supposed to be larger

00:08:41.976 --> 00:08:45.206 A:middle
for the fingers to tap them than
you would use for your cursor?

00:08:45.206 --> 00:08:48.706 A:middle
If you build the same
view code in both places

00:08:48.706 --> 00:08:49.996 A:middle
that view code is going to look

00:08:49.996 --> 00:08:52.666 A:middle
like it was designed wherever
you built it in the first place

00:08:52.836 --> 00:08:55.266 A:middle
and will look a little
unnatural for the platform

00:08:55.266 --> 00:08:57.576 A:middle
where it wasn't intentionally
designed.

00:08:57.986 --> 00:09:00.296 A:middle
And you really want to have
the best experience possible


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:57.986 --> 00:09:00.296 A:middle
And you really want to have
the best experience possible

00:09:00.636 --> 00:09:03.346 A:middle
and embrace the human interface
guidelines and UI styles

00:09:03.816 --> 00:09:05.956 A:middle
of the platform on
which you're running.

00:09:06.616 --> 00:09:09.176 A:middle
So in general, we think that
shimming is something, that,

00:09:09.656 --> 00:09:11.826 A:middle
it's not - you know, it's
helpful in select cases.

00:09:11.826 --> 00:09:14.166 A:middle
It's not definitely the wrong
thing to do all of the time.

00:09:14.416 --> 00:09:16.486 A:middle
You know, it has its moments.

00:09:16.896 --> 00:09:19.596 A:middle
But just be aware of some of
the problems that may arise

00:09:19.966 --> 00:09:21.686 A:middle
if you're using shimming
in your own code.

00:09:22.466 --> 00:09:24.766 A:middle
If nothing else, you're
pushing all of the complexity

00:09:24.766 --> 00:09:26.906 A:middle
of understanding what the
platform differences are

00:09:27.196 --> 00:09:30.296 A:middle
onto your clients in a way
that isn't necessarily obvious

00:09:30.296 --> 00:09:32.356 A:middle
from the beginning,
rather than keeping it all

00:09:32.596 --> 00:09:34.396 A:middle
in a single location
where you could handle all

00:09:34.396 --> 00:09:37.236 A:middle
of the details yourself and
let everybody else not worry

00:09:37.236 --> 00:09:37.606 A:middle
about it.

00:09:38.886 --> 00:09:40.086 A:middle
Also a note about Swift.

00:09:40.786 --> 00:09:44.146 A:middle
If you literally translate how
you would shim with Objective-C,

00:09:44.426 --> 00:09:45.796 A:middle
this will not compile in Swift.

00:09:46.306 --> 00:09:48.686 A:middle
There are ways to shim
your code in Swift.

00:09:48.686 --> 00:09:49.946 A:middle
But it gets more complicated

00:09:49.946 --> 00:09:52.396 A:middle
than your basic conditional
compilation

00:09:52.646 --> 00:09:53.746 A:middle
that we can use in Objective-C.

00:09:53.806 --> 00:09:55.036 A:middle
So just a side note about Swift.

00:09:55.996 --> 00:09:57.906 A:middle
So for now we're going to
say that our view code needs

00:09:57.906 --> 00:09:59.926 A:middle
to be platform specific
so that we don't run

00:09:59.926 --> 00:10:00.706 A:middle
into these problems.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.926 --> 00:10:00.706 A:middle
into these problems.

00:10:02.506 --> 00:10:03.886 A:middle
Next up is the controller code.

00:10:04.886 --> 00:10:06.356 A:middle
Can we share our controllers?

00:10:06.886 --> 00:10:09.426 A:middle
We found that it really depended
on the kind of controller

00:10:09.426 --> 00:10:10.166 A:middle
that we're dealing with.

00:10:10.756 --> 00:10:12.376 A:middle
Some things that are
called controllers,

00:10:12.376 --> 00:10:14.396 A:middle
like ViewControllers,
UIViewController

00:10:14.396 --> 00:10:17.376 A:middle
or an NSViewController,
are really tightly coupled

00:10:17.376 --> 00:10:18.686 A:middle
with the views themselves.

00:10:18.686 --> 00:10:20.986 A:middle
And like the views themselves,
they won't cross compile.

00:10:21.536 --> 00:10:25.516 A:middle
And so controllers that are
meant to be used for, you know,

00:10:25.516 --> 00:10:28.086 A:middle
platform-specific behaviors,
user interaction events,

00:10:28.086 --> 00:10:32.146 A:middle
hot keys, mouse handling,
Multi-Touch gestures,

00:10:32.506 --> 00:10:35.416 A:middle
all of those are very
platform-specific controllers.

00:10:35.416 --> 00:10:36.996 A:middle
We probably don't
want to share those

00:10:36.996 --> 00:10:38.096 A:middle
for the same reasons
we don't want

00:10:38.096 --> 00:10:39.196 A:middle
to share the views themselves.

00:10:39.916 --> 00:10:41.226 A:middle
However, a lot

00:10:41.226 --> 00:10:44.426 A:middle
of our controllers do
contain more shared logic -

00:10:44.426 --> 00:10:46.786 A:middle
they're talking to the
model more directly rather

00:10:46.786 --> 00:10:49.726 A:middle
than dealing with the
intricacies of the view itself.

00:10:50.346 --> 00:10:52.856 A:middle
And so, we would like to
share those controllers

00:10:52.856 --> 00:10:54.586 A:middle
if we possibly can,
because that's where a lot

00:10:54.586 --> 00:10:57.696 A:middle
of the core logic of
our applications live.

00:10:57.696 --> 00:11:00.226 A:middle
So we're going to say that
you share some controllers,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:57.696 --> 00:11:00.226 A:middle
So we're going to say that
you share some controllers,

00:11:00.296 --> 00:11:00.926 A:middle
but not all.

00:11:01.256 --> 00:11:03.306 A:middle
Hopefully you're going to share
more controllers than not.

00:11:03.306 --> 00:11:05.236 A:middle
It really depends on
how your code is set up.

00:11:06.496 --> 00:11:08.276 A:middle
To give you an example
of what this might look

00:11:08.276 --> 00:11:12.416 A:middle
like within your controller
code, in iWork, we had a file.

00:11:12.416 --> 00:11:14.056 A:middle
It was called Canvas
View Controller.

00:11:14.786 --> 00:11:16.866 A:middle
It inherited from
UIViewController

00:11:16.866 --> 00:11:18.876 A:middle
and it had a lot of stuff in it.

00:11:18.876 --> 00:11:21.076 A:middle
It did a lot of different
things for us.

00:11:21.076 --> 00:11:23.476 A:middle
And we realized that, you
know, the split of the code

00:11:23.476 --> 00:11:27.136 A:middle
in that file was kind of
similar ratio here where some

00:11:27.136 --> 00:11:29.316 A:middle
of the code was absolutely
platform specific.

00:11:29.316 --> 00:11:31.626 A:middle
It was part of its job
as a UIViewController.

00:11:31.956 --> 00:11:33.956 A:middle
It was controlling
the view as specified.

00:11:34.486 --> 00:11:37.696 A:middle
But a lot of the stuff we had in
there was more shareable logic.

00:11:37.696 --> 00:11:39.876 A:middle
It was about, you
know, managing states

00:11:39.876 --> 00:11:42.366 A:middle
and handling some rendering
stuff and, you know,

00:11:42.366 --> 00:11:43.456 A:middle
scrolling and zooming.

00:11:43.826 --> 00:11:46.806 A:middle
Some of the things that we can
handle in a more shared way.

00:11:47.266 --> 00:11:48.906 A:middle
And so we really
wanted to keep that code

00:11:48.906 --> 00:11:50.206 A:middle
and use it on both platforms.

00:11:50.276 --> 00:11:53.236 A:middle
So to solve this problem
we split it in half.

00:11:53.876 --> 00:11:57.066 A:middle
And now we have the iOS Canvas
View Controller that's really

00:11:57.066 --> 00:11:59.916 A:middle
in charge of actual view
controller behavior rather

00:11:59.916 --> 00:12:02.636 A:middle
than view controller behavior
plus some other stuff.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.916 --> 00:12:02.636 A:middle
than view controller behavior
plus some other stuff.

00:12:03.186 --> 00:12:05.706 A:middle
And then we have a shared Canvas
Controller whose job it is is

00:12:05.746 --> 00:12:08.446 A:middle
to actually control our
shared Canvas Object,

00:12:08.476 --> 00:12:09.836 A:middle
which I'll talk more
about later.

00:12:10.626 --> 00:12:12.906 A:middle
And then we created a
counterpart on OS X,

00:12:13.346 --> 00:12:14.936 A:middle
the OS X Canvas View Controller,

00:12:15.286 --> 00:12:17.706 A:middle
to handle the platform-specific
view controller needs

00:12:17.806 --> 00:12:18.756 A:middle
on that side as well.

00:12:19.206 --> 00:12:21.866 A:middle
And here we have a very
clear separation of concerns.

00:12:22.466 --> 00:12:24.696 A:middle
So we know exactly what
each object's job is.

00:12:25.166 --> 00:12:27.186 A:middle
And you can put the code
in the right place based

00:12:27.186 --> 00:12:30.496 A:middle
on what its real purpose is
and how it should be used.

00:12:32.656 --> 00:12:36.066 A:middle
A real-life example of this,
you know, with actual pictures

00:12:36.066 --> 00:12:37.536 A:middle
and so forth, is rotation.

00:12:37.536 --> 00:12:39.926 A:middle
And in iWork there are a
few different ways you can

00:12:39.926 --> 00:12:40.656 A:middle
rotate objects.

00:12:40.986 --> 00:12:43.656 A:middle
And it also really depends
on the platform you're using.

00:12:44.166 --> 00:12:47.246 A:middle
On iOS you put two fingers down
and you rotate them relative

00:12:47.246 --> 00:12:49.366 A:middle
to each other, and the
object will rotate.

00:12:50.026 --> 00:12:52.406 A:middle
On OS X you hold down
the Command Hot Key,

00:12:52.776 --> 00:12:54.476 A:middle
you click on the
handle and you drag it,

00:12:54.886 --> 00:12:55.896 A:middle
and the object will rotate.

00:12:56.306 --> 00:12:58.706 A:middle
And those are really different
interaction paradigms.

00:12:59.146 --> 00:13:00.096 A:middle
It's really - you know, both


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.146 --> 00:13:00.096 A:middle
It's really - you know, both

00:13:00.096 --> 00:13:03.656 A:middle
of them are very much using the
platform-specific interactions

00:13:03.656 --> 00:13:05.286 A:middle
that you can't do on
the other platform.

00:13:05.786 --> 00:13:08.906 A:middle
But the underlying model changes
are, in fact, exactly the same.

00:13:08.906 --> 00:13:10.986 A:middle
It's just an angle that
we're applying to an object

00:13:11.496 --> 00:13:12.986 A:middle
and all the math that
goes along with it.

00:13:13.836 --> 00:13:16.046 A:middle
So we wanted to share as
much of that code as possible

00:13:16.046 --> 00:13:18.596 A:middle
because there are some, you
know, exciting math in there,

00:13:18.936 --> 00:13:20.376 A:middle
while keeping the
platform-specific

00:13:20.376 --> 00:13:21.166 A:middle
logic separate.

00:13:21.766 --> 00:13:23.836 A:middle
So we set our code up like this.

00:13:23.836 --> 00:13:26.526 A:middle
We have a shared rotation
controller that does all of the,

00:13:26.526 --> 00:13:29.016 A:middle
you know, the real math
and state management.

00:13:29.406 --> 00:13:31.576 A:middle
And it talks to our model
object when appropriate.

00:13:32.156 --> 00:13:35.006 A:middle
And we have a platform-specific
gesture recognizer on iOS

00:13:35.336 --> 00:13:38.116 A:middle
that handles the Multi-Touch and
translates that into an angle

00:13:38.116 --> 00:13:40.086 A:middle
that our rotation
controller can understand.

00:13:40.946 --> 00:13:43.576 A:middle
And we have a platform-specific
mouse and keyboard handler

00:13:43.756 --> 00:13:46.196 A:middle
on OS X that handles
both our hot key

00:13:46.196 --> 00:13:49.176 A:middle
and clicking interactions
to tell us that, you know,

00:13:49.256 --> 00:13:50.826 A:middle
to again translate
that into an angle

00:13:51.306 --> 00:13:52.426 A:middle
for our rotation controller.

00:13:53.496 --> 00:13:54.846 A:middle
So that's already
pretty helpful.

00:13:54.846 --> 00:13:57.466 A:middle
We have shared code here and we
have platform-specific logic.

00:13:58.306 --> 00:14:00.096 A:middle
But there's actually more
ways for us to rotate


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.306 --> 00:14:00.096 A:middle
But there's actually more
ways for us to rotate

00:14:00.306 --> 00:14:02.116 A:middle
in our iWork applications.

00:14:02.736 --> 00:14:04.496 A:middle
On OS X we have inspectors.

00:14:04.876 --> 00:14:06.636 A:middle
And you can actually just
type an angle directly

00:14:06.636 --> 00:14:09.716 A:middle
into a text field, hit Enter
and it will rotate the object.

00:14:10.396 --> 00:14:13.076 A:middle
And so, we also have
a handler that calls

00:14:13.076 --> 00:14:15.456 A:middle
into the exact same rotation
code that you would call

00:14:15.766 --> 00:14:18.986 A:middle
if you were doing it with your
mouse, or if you were doing it

00:14:18.986 --> 00:14:20.226 A:middle
with your fingers on iOS.

00:14:20.636 --> 00:14:22.766 A:middle
And everything is exactly
the same except the thing

00:14:22.766 --> 00:14:25.986 A:middle
that translates the user
interaction into an angle

00:14:25.986 --> 00:14:27.196 A:middle
for our rotation controller.

00:14:28.106 --> 00:14:31.726 A:middle
Also new in OS X Yosemite we
have NSGestureRecognizer APIs.

00:14:31.726 --> 00:14:35.516 A:middle
And they handle a lot like
iOS UIGestureRecognizer.

00:14:35.926 --> 00:14:38.536 A:middle
And we could also theoretically
plug the same thing

00:14:38.536 --> 00:14:41.936 A:middle
into our rotation logic and have
yet a third way for our user

00:14:41.936 --> 00:14:44.896 A:middle
to interact and rotate
our objects.

00:14:45.746 --> 00:14:48.816 A:middle
So if you look at just the
bottom half of this diagram,

00:14:49.296 --> 00:14:51.426 A:middle
you know, sharing code
between platforms aside,

00:14:51.426 --> 00:14:53.976 A:middle
this is a really powerful
abstraction for us.

00:14:54.036 --> 00:14:55.656 A:middle
We have three completely
different ways

00:14:55.656 --> 00:14:59.336 A:middle
to rotate an object, but most
of our logic is still shared.

00:14:59.766 --> 00:15:01.806 A:middle
And we could also plug this
in for things like testing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.766 --> 00:15:01.806 A:middle
And we could also plug this
in for things like testing.

00:15:01.806 --> 00:15:03.766 A:middle
If we wanted to just
test our rotation logic,

00:15:03.766 --> 00:15:06.936 A:middle
we could add a fourth path,
add just a tester that says:

00:15:06.936 --> 00:15:08.916 A:middle
I would like you to
rotate it by 10 degrees.

00:15:09.356 --> 00:15:11.146 A:middle
And all the rest of
the code is the same.

00:15:11.146 --> 00:15:13.016 A:middle
So we're actually
testing our logic

00:15:13.126 --> 00:15:14.206 A:middle
and not just our interface.

00:15:14.766 --> 00:15:16.416 A:middle
We can also use this
sort of abstraction

00:15:16.416 --> 00:15:17.646 A:middle
for Quick Look or plug-ins.

00:15:18.026 --> 00:15:20.326 A:middle
There's a lot of different ways
you can apply this abstraction

00:15:21.166 --> 00:15:22.666 A:middle
in your own code.

00:15:23.316 --> 00:15:26.016 A:middle
So now we have shared
model code.

00:15:27.126 --> 00:15:30.636 A:middle
Not shared U code and some
controller shared and some not.

00:15:30.926 --> 00:15:32.926 A:middle
And we wanted to share
more code than that.

00:15:33.256 --> 00:15:37.096 A:middle
So we looked at the - at the
frameworks supplied by Apple.

00:15:37.736 --> 00:15:41.636 A:middle
And we noticed that most of them
are the same one both platforms.

00:15:41.756 --> 00:15:44.156 A:middle
They have the same APIs,
they have the same behaviors.

00:15:44.716 --> 00:15:46.616 A:middle
And so we could use
them in both places.

00:15:46.616 --> 00:15:48.226 A:middle
If you write some
core data code,

00:15:48.276 --> 00:15:49.866 A:middle
it's going to run the
same on both sides.

00:15:50.596 --> 00:15:51.896 A:middle
There are some frameworks
that, however,

00:15:51.896 --> 00:15:53.346 A:middle
that aren't the same
on both sides.

00:15:53.846 --> 00:15:56.676 A:middle
If you're using QTKit,
that won't compile on iOS.

00:15:56.856 --> 00:15:57.836 A:middle
It's just not supported.

00:15:57.836 --> 00:15:59.626 A:middle
We recommend you try
out AVFoundation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.396 --> 00:16:03.936 A:middle
And an important thing to
note is that AppKit and UIKit,

00:16:04.296 --> 00:16:06.386 A:middle
while they serve the same
purpose in your code,

00:16:06.386 --> 00:16:07.656 A:middle
are not the same framework.

00:16:07.716 --> 00:16:09.046 A:middle
They have many similar APIs.

00:16:09.046 --> 00:16:11.576 A:middle
You can use them in
many similar ways.

00:16:12.236 --> 00:16:13.806 A:middle
But you should treat
them as separate objects

00:16:13.806 --> 00:16:16.406 A:middle
in your own architecture
and handle them accordingly.

00:16:17.936 --> 00:16:19.776 A:middle
We looked at this
list and we thought

00:16:19.976 --> 00:16:22.216 A:middle
that we could use Core
Animation and Core Graphics

00:16:22.216 --> 00:16:24.526 A:middle
to have more shared
rendering code that none.

00:16:24.526 --> 00:16:26.376 A:middle
Right now we have
non-rendering code shared.

00:16:26.806 --> 00:16:29.456 A:middle
And we'd really like to have
some commented code there.

00:16:30.336 --> 00:16:32.896 A:middle
Core Animation is useful because
it has these things called

00:16:33.026 --> 00:16:33.616 A:middle
CA layers.

00:16:34.026 --> 00:16:35.506 A:middle
CA Layers are used
to put content

00:16:35.506 --> 00:16:36.726 A:middle
on the screen and animate them.

00:16:37.356 --> 00:16:39.506 A:middle
And they behave exactly
the same on both platforms.

00:16:39.866 --> 00:16:41.196 A:middle
And that's really
helpful for us.

00:16:42.206 --> 00:16:45.326 A:middle
Core Graphics is good for more
advanced graphics operations.

00:16:45.326 --> 00:16:47.626 A:middle
You can build content with Core
Graphics that you can't build

00:16:47.626 --> 00:16:48.946 A:middle
with Core Animation alone.

00:16:48.946 --> 00:16:51.936 A:middle
You can take that content and
put it into Core Animation Layer

00:16:52.316 --> 00:16:53.716 A:middle
to get it on screen
and animate it.

00:16:55.066 --> 00:16:55.986 A:middle
There are some caveats.

00:16:56.746 --> 00:16:59.776 A:middle
Core Graphics contexts
in UIViews

00:16:59.776 --> 00:17:03.356 A:middle
and NSViews are flipped relative
to each other in the y-axis.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.776 --> 00:17:03.356 A:middle
and NSViews are flipped relative
to each other in the y-axis.

00:17:03.866 --> 00:17:05.925 A:middle
The origin for UIViews
is on the upper left.

00:17:06.476 --> 00:17:08.016 A:middle
And for NSViews is
on the lower left.

00:17:08.705 --> 00:17:10.976 A:middle
And, you know, that makes
our math more complicated.

00:17:11.066 --> 00:17:15.256 A:middle
But, you can fix this by
overriding isFlipped on NSView.

00:17:15.675 --> 00:17:17.106 A:middle
And that makes our origins

00:17:17.106 --> 00:17:18.596 A:middle
in the same location
in both places.

00:17:18.596 --> 00:17:21.715 A:middle
And this is really helpful
for us not to shim our views,

00:17:21.756 --> 00:17:23.626 A:middle
but instead to have
shared rendering code.

00:17:23.925 --> 00:17:24.756 A:middle
It doesn't need to worry

00:17:24.756 --> 00:17:27.016 A:middle
about that extra flip
while we're calculating

00:17:27.286 --> 00:17:28.966 A:middle
where things should
appear on the screen.

00:17:29.506 --> 00:17:33.626 A:middle
And so we use Core
Animation and Core Graphics

00:17:33.686 --> 00:17:37.416 A:middle
to build our layer tree, a layer
tree for our - the iWork Canvas.

00:17:38.056 --> 00:17:39.956 A:middle
The iWork Canvas
is this part here.

00:17:39.956 --> 00:17:41.986 A:middle
It's the actual user content

00:17:41.986 --> 00:17:43.516 A:middle
that they interact
with onscreen.

00:17:44.186 --> 00:17:45.416 A:middle
And the code that renders

00:17:45.416 --> 00:17:48.556 A:middle
that canvas is exactly the
same on both platforms.

00:17:48.776 --> 00:17:50.596 A:middle
We use Core Animation
and Core Graphics

00:17:50.736 --> 00:17:52.986 A:middle
to have the same rendering
code in both places

00:17:52.986 --> 00:17:55.346 A:middle
so we can make sure that
the user's content will look

00:17:55.346 --> 00:17:55.756 A:middle
the same.

00:17:56.436 --> 00:17:58.126 A:middle
Now, because Core Animation

00:17:58.126 --> 00:18:00.176 A:middle
and Core Graphics are
platform specific,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.126 --> 00:18:00.176 A:middle
and Core Graphics are
platform specific,

00:18:00.396 --> 00:18:01.916 A:middle
or are not platform
specific, rather,

00:18:02.146 --> 00:18:03.936 A:middle
we're losing the
platform-specific support

00:18:03.936 --> 00:18:05.546 A:middle
that we could get using Views.

00:18:06.326 --> 00:18:09.686 A:middle
So, you know, on iOS, if you
have your content and, you know,

00:18:09.686 --> 00:18:13.076 A:middle
you have a chart that's in its
own view, you can put a gesture

00:18:13.076 --> 00:18:14.776 A:middle
on that view directly
to turn it -

00:18:14.776 --> 00:18:16.546 A:middle
to interact with
just that chart.

00:18:17.036 --> 00:18:19.046 A:middle
However, if that chart
is in just a layer,

00:18:19.346 --> 00:18:22.116 A:middle
you can't directly target
a gesture to a layer,

00:18:22.116 --> 00:18:24.536 A:middle
so you have to add an
extra layer of support

00:18:24.606 --> 00:18:26.546 A:middle
to handle the platform-specific
aspects

00:18:26.816 --> 00:18:27.846 A:middle
of that rendering system.

00:18:27.906 --> 00:18:29.346 A:middle
So there are some
downsides to this.

00:18:29.406 --> 00:18:31.786 A:middle
But we found it was very
helpful for us in iWork.

00:18:32.766 --> 00:18:34.866 A:middle
So now we have a little
bit of shared view code.

00:18:34.866 --> 00:18:36.726 A:middle
But that view code was
very carefully crafted

00:18:36.786 --> 00:18:38.926 A:middle
to have a stronger
user experience

00:18:38.926 --> 00:18:41.436 A:middle
and a more unified
rendering situation.

00:18:42.456 --> 00:18:43.886 A:middle
But there's one last step

00:18:43.886 --> 00:18:45.976 A:middle
that we need before
we can actually get

00:18:45.976 --> 00:18:47.546 A:middle
that shared rendering
logic to compile.

00:18:49.986 --> 00:18:51.366 A:middle
We render a lot of images.

00:18:51.826 --> 00:18:55.946 A:middle
And you have NSImage on an
OS X and UIImage on iOS.

00:18:56.496 --> 00:18:57.906 A:middle
And they're both
really fantastic

00:18:57.906 --> 00:18:59.036 A:middle
and really helpful objects

00:18:59.496 --> 00:19:01.536 A:middle
that do some really
powerful things for us.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.496 --> 00:19:01.536 A:middle
that do some really
powerful things for us.

00:19:01.586 --> 00:19:03.636 A:middle
They help, you know, memory
management and caching.

00:19:03.636 --> 00:19:05.556 A:middle
They get information
out of your bundle.

00:19:05.836 --> 00:19:08.066 A:middle
And we don't really want to
reproduce that logic ourselves.

00:19:09.246 --> 00:19:11.136 A:middle
But we also don't want our
shared rendering code to have

00:19:11.176 --> 00:19:12.506 A:middle
to care which one
it's talking to.

00:19:12.996 --> 00:19:15.936 A:middle
For us, all we really wanted
from our images was the ability

00:19:15.986 --> 00:19:18.926 A:middle
to get a CG image out from
the image or to render

00:19:18.926 --> 00:19:21.186 A:middle
that image directly into
a Core Graphics context.

00:19:21.796 --> 00:19:23.886 A:middle
And because those
behaviors are pretty simple,

00:19:24.256 --> 00:19:25.696 A:middle
we built what we call
an Image Wrapper.

00:19:26.186 --> 00:19:29.136 A:middle
And Image Wrapper is a way for
the calling code to not care

00:19:29.136 --> 00:19:31.016 A:middle
about the platform-specific
issues

00:19:31.016 --> 00:19:33.206 A:middle
or the implementation details.

00:19:33.766 --> 00:19:38.166 A:middle
You define a simple API,
and you implement it twice,

00:19:38.786 --> 00:19:41.976 A:middle
one for each subclass
that's private internal

00:19:42.266 --> 00:19:43.076 A:middle
for a class cluster.

00:19:43.076 --> 00:19:45.696 A:middle
So we have a myImage
super class.

00:19:46.356 --> 00:19:47.516 A:middle
It's an abstract super class.

00:19:48.176 --> 00:19:49.966 A:middle
And a platform-specific
implementation

00:19:49.966 --> 00:19:53.606 A:middle
that talks either directly to an
NSImage or directly to a UIImage

00:19:53.896 --> 00:19:57.336 A:middle
and translates our APIs based
on how each of them work.

00:19:58.216 --> 00:19:59.266 A:middle
And this is really helpful

00:19:59.266 --> 00:20:02.136 A:middle
because we're not losing the
power of NSImage and UIImage.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.266 --> 00:20:02.136 A:middle
because we're not losing the
power of NSImage and UIImage.

00:20:02.136 --> 00:20:04.276 A:middle
All of their great features
we still get to use.

00:20:04.616 --> 00:20:06.046 A:middle
But our shared code
doesn't have to worry

00:20:06.046 --> 00:20:08.116 A:middle
about which one is
actually getting used

00:20:08.586 --> 00:20:09.686 A:middle
when it's calling the code.

00:20:11.376 --> 00:20:13.756 A:middle
Now note here that we're going
to have to translate each

00:20:13.756 --> 00:20:17.166 A:middle
of our API calls directly
ourselves in our wrapper layer.

00:20:17.756 --> 00:20:19.906 A:middle
And that means that, you know,
wrappers are really useful

00:20:19.906 --> 00:20:21.666 A:middle
for simpler objects like images.

00:20:22.196 --> 00:20:24.446 A:middle
But it's harder to wrap
things like view controllers,

00:20:24.446 --> 00:20:27.256 A:middle
which are very complicated and
powerful and behave a little,

00:20:27.256 --> 00:20:29.786 A:middle
you know, there's enough
different behaviors that trying

00:20:29.786 --> 00:20:32.306 A:middle
to translate them all yourself
would be rather difficult.

00:20:32.346 --> 00:20:35.776 A:middle
So we found that wrappers are
most useful for simple objects.

00:20:36.326 --> 00:20:39.656 A:middle
So now we have our
application compiling

00:20:39.656 --> 00:20:41.066 A:middle
and running on both platforms.

00:20:41.066 --> 00:20:42.646 A:middle
We have a shared
rendering system,

00:20:42.646 --> 00:20:45.646 A:middle
so our content should look
the same in both places.

00:20:46.356 --> 00:20:47.886 A:middle
And one of our designers
made a deck.

00:20:47.886 --> 00:20:50.046 A:middle
And they put this image in it.

00:20:50.506 --> 00:20:51.456 A:middle
And they opened it on their Mac.

00:20:51.566 --> 00:20:52.286 A:middle
It looks like this.

00:20:53.026 --> 00:20:54.586 A:middle
But then they opened
it on their iPad,

00:20:54.586 --> 00:20:56.236 A:middle
and the image looked funny.

00:20:56.386 --> 00:20:57.346 A:middle
The colors were off.

00:20:57.946 --> 00:21:00.436 A:middle
And since we really wanted
our content to look the same,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.946 --> 00:21:00.436 A:middle
And since we really wanted
our content to look the same,

00:21:00.436 --> 00:21:01.176 A:middle
that was part of the point

00:21:01.176 --> 00:21:03.166 A:middle
of having a shared rendering
system, we, you know,

00:21:03.516 --> 00:21:05.206 A:middle
scratched our heads and
debugged for a while.

00:21:05.746 --> 00:21:08.036 A:middle
And we realized that the
problem was that the image

00:21:08.376 --> 00:21:11.406 A:middle
that we had used had
a CMYK color profile.

00:21:11.406 --> 00:21:16.116 A:middle
For those of you unfamiliar
with color models, CMYK is cyan,

00:21:16.116 --> 00:21:17.166 A:middle
magenta, yellow, black.

00:21:17.166 --> 00:21:20.496 A:middle
It's designed - best
used for printers.

00:21:20.496 --> 00:21:22.556 A:middle
Those are the standard
printer ink colors.

00:21:23.076 --> 00:21:26.856 A:middle
And so, computers don't,
you know, your pixels -

00:21:27.016 --> 00:21:29.176 A:middle
you have pixels on your
screen rather than ink.

00:21:29.906 --> 00:21:34.686 A:middle
And so a lot of our content on
computers is made with the RGB

00:21:34.686 --> 00:21:36.276 A:middle
or red, green, blue color model.

00:21:37.566 --> 00:21:39.966 A:middle
And there are other color
models out in the world.

00:21:39.966 --> 00:21:40.746 A:middle
And so, you know, there's a lot

00:21:40.746 --> 00:21:43.106 A:middle
of different ways you can
specify colors in the universe.

00:21:44.136 --> 00:21:48.786 A:middle
But iOS devices do the best
job of rendering sRGB content,

00:21:48.786 --> 00:21:50.686 A:middle
which is this particular
kind of RGB.

00:21:51.776 --> 00:21:53.256 A:middle
And so we found that, you know,

00:21:53.256 --> 00:21:55.766 A:middle
any image that wasn't
sRGB was probably going

00:21:55.766 --> 00:21:56.636 A:middle
to look a little bit different

00:21:56.856 --> 00:21:58.486 A:middle
when you open it
on an iOS device.

00:21:58.946 --> 00:22:00.006 A:middle
And we didn't want
that to happen.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.946 --> 00:22:00.006 A:middle
And we didn't want
that to happen.

00:22:00.186 --> 00:22:02.396 A:middle
So what we did is we
took all of our content

00:22:02.396 --> 00:22:05.856 A:middle
that wasn't already sRGB
and we converted it to sRGB

00:22:05.856 --> 00:22:07.706 A:middle
when the user inserted
it into our documents.

00:22:08.696 --> 00:22:11.966 A:middle
And so that was - and that way
our content could look the same

00:22:11.966 --> 00:22:12.806 A:middle
on both platforms.

00:22:13.036 --> 00:22:14.496 A:middle
So this is, you know, if
you want to learn more

00:22:14.496 --> 00:22:16.216 A:middle
about color management
in general,

00:22:16.776 --> 00:22:19.856 A:middle
there's a session you can
see online, "Best Practices

00:22:19.856 --> 00:22:20.806 A:middle
for Color Management."

00:22:21.156 --> 00:22:24.056 A:middle
There's also a lab right after
this talk downstairs at 10:15.

00:22:25.716 --> 00:22:27.496 A:middle
So now we have our
images looking the same

00:22:27.496 --> 00:22:28.356 A:middle
on both platforms.

00:22:29.616 --> 00:22:32.046 A:middle
So now we can open
our documents.

00:22:32.046 --> 00:22:34.616 A:middle
And they look the same, for real
this time, on both platforms.

00:22:35.286 --> 00:22:37.596 A:middle
But we built some large
documents with lots of images.

00:22:37.596 --> 00:22:38.916 A:middle
We were testing out
this behavior.

00:22:39.266 --> 00:22:41.466 A:middle
And we noticed that it took
a while to open the documents

00:22:41.466 --> 00:22:42.396 A:middle
when they got big enough.

00:22:43.076 --> 00:22:46.626 A:middle
And we figured, you know,
OS X devices have a lot

00:22:46.626 --> 00:22:47.856 A:middle
of resources available to us.

00:22:47.856 --> 00:22:50.316 A:middle
We should be able to make
this a better user experience

00:22:50.556 --> 00:22:51.266 A:middle
and be faster.

00:22:52.256 --> 00:22:54.316 A:middle
So what are the different
resources we have available

00:22:54.316 --> 00:22:54.586 A:middle
to us?

00:22:55.336 --> 00:22:58.036 A:middle
Well, there's, first
of all, between iOS

00:22:58.146 --> 00:22:59.696 A:middle
and OS X there are
different chips

00:22:59.766 --> 00:23:01.036 A:middle
that are actually
running in your hardware.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.766 --> 00:23:01.036 A:middle
that are actually
running in your hardware.

00:23:01.166 --> 00:23:02.266 A:middle
And that's going to, you know,

00:23:02.486 --> 00:23:04.546 A:middle
those will affect how
the hardware behaves.

00:23:05.276 --> 00:23:06.996 A:middle
The performance will
be slightly different.

00:23:06.996 --> 00:23:08.776 A:middle
You know, things are
going to be faster

00:23:08.776 --> 00:23:09.996 A:middle
on one platform or the other.

00:23:10.406 --> 00:23:11.856 A:middle
Also, the memory
bin, what's available

00:23:11.856 --> 00:23:12.896 A:middle
to you is different based

00:23:12.896 --> 00:23:14.376 A:middle
on the device upon
which you're running.

00:23:15.016 --> 00:23:17.336 A:middle
The total RAM you have
available is also going to vary.

00:23:17.856 --> 00:23:20.436 A:middle
And the exact media that's
supported will be different,

00:23:20.586 --> 00:23:21.646 A:middle
again, based on the chips.

00:23:22.346 --> 00:23:23.506 A:middle
And so this, you know,

00:23:23.506 --> 00:23:24.826 A:middle
it's a combination
of all these factors.

00:23:24.826 --> 00:23:27.226 A:middle
We could have slightly different
performance profiles depending

00:23:27.226 --> 00:23:29.066 A:middle
on both the platform
we're running on

00:23:29.066 --> 00:23:30.436 A:middle
and also the specific hardware.

00:23:31.446 --> 00:23:34.016 A:middle
And so we wanted to optimize,
you know, various parts

00:23:34.016 --> 00:23:36.196 A:middle
of our applications
per platform.

00:23:37.516 --> 00:23:40.026 A:middle
In the case of opening
the document slowly,

00:23:40.026 --> 00:23:42.946 A:middle
and we want to get quickly,
we made a lazily loaded model.

00:23:43.286 --> 00:23:45.156 A:middle
Different parts of our
documents, you know,

00:23:45.156 --> 00:23:47.846 A:middle
each slide in Keynote is
a self-contained unit.

00:23:48.236 --> 00:23:49.586 A:middle
It doesn't need to
reference things

00:23:49.586 --> 00:23:51.596 A:middle
on other slides immediately
when you open them.

00:23:52.036 --> 00:23:55.756 A:middle
And so if I have a 300-slide
deck, and I'm only looking

00:23:55.756 --> 00:23:58.546 A:middle
at the first 10 slides on
my screen, I don't need

00:23:58.546 --> 00:24:01.336 A:middle
to read the 300th
slide from disk.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.546 --> 00:24:01.336 A:middle
to read the 300th
slide from disk.

00:24:02.406 --> 00:24:04.676 A:middle
So we're only going
to read the parts

00:24:04.676 --> 00:24:06.666 A:middle
of the model the user
is actually looking at

00:24:06.966 --> 00:24:08.466 A:middle
and what they actually
need to interact with.

00:24:09.576 --> 00:24:12.106 A:middle
And also we can load each
of those in parallel,

00:24:12.536 --> 00:24:14.026 A:middle
because again, they aren't
referencing each other.

00:24:14.026 --> 00:24:17.746 A:middle
And these things combined will
give us a faster experience

00:24:17.796 --> 00:24:19.696 A:middle
opening our documents because
we're reading less data

00:24:19.696 --> 00:24:21.966 A:middle
and we're doing more
of it at the same time.

00:24:22.386 --> 00:24:24.116 A:middle
And again, this was
an optimization for,

00:24:24.166 --> 00:24:25.056 A:middle
you know, multicore.

00:24:25.476 --> 00:24:26.936 A:middle
You know, the more
cores we have,

00:24:26.936 --> 00:24:28.886 A:middle
the more our parallel
reading would help us.

00:24:29.516 --> 00:24:32.016 A:middle
And so this was kind of
targeted for OS X specifically.

00:24:32.516 --> 00:24:34.286 A:middle
We also had other
optimizations on iOS.

00:24:34.596 --> 00:24:36.846 A:middle
But you know, this is just to
give you an example of the kinds

00:24:36.846 --> 00:24:37.706 A:middle
of things you're going to want

00:24:37.706 --> 00:24:40.766 A:middle
to do while building your
applications for each platform.

00:24:41.706 --> 00:24:45.206 A:middle
So now we have, you know, our
documents and we have a model

00:24:45.206 --> 00:24:48.456 A:middle
that we can load
lazily and in parallel.

00:24:48.786 --> 00:24:50.516 A:middle
What's actually in our model?

00:24:50.586 --> 00:24:51.526 A:middle
What's in our documents?

00:24:52.746 --> 00:24:55.516 A:middle
One thing to keep in mind is
that your user's not going

00:24:55.516 --> 00:24:57.166 A:middle
to update all of
your applications

00:24:57.166 --> 00:24:58.566 A:middle
at exactly the same time.

00:24:58.786 --> 00:25:00.216 A:middle
They're going to be
running different versions


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.786 --> 00:25:00.216 A:middle
They're going to be
running different versions

00:25:00.626 --> 00:25:03.136 A:middle
on different devices
at the same time.

00:25:03.636 --> 00:25:05.336 A:middle
And you're, unfortunately,
just - you know, this is a fact

00:25:05.336 --> 00:25:06.626 A:middle
of life and you'll
have to deal with this.

00:25:07.296 --> 00:25:09.566 A:middle
And so, you know, the most
fundamental first step

00:25:09.566 --> 00:25:12.066 A:middle
of this is you need to version
your data so that you know

00:25:12.066 --> 00:25:15.406 A:middle
for a fact what version of your
application actually built this

00:25:15.446 --> 00:25:18.416 A:middle
document so that if you change
how your model is written

00:25:18.416 --> 00:25:20.956 A:middle
to disk, you can handle
that appropriately.

00:25:20.956 --> 00:25:22.886 A:middle
So that's the first
important step.

00:25:23.556 --> 00:25:26.176 A:middle
However, you can do something
a little bit more interesting

00:25:26.176 --> 00:25:26.406 A:middle
than that.

00:25:26.716 --> 00:25:28.336 A:middle
Just instead of versioning
it purely

00:25:28.336 --> 00:25:30.806 A:middle
on the application version,
you can version it based

00:25:30.806 --> 00:25:32.276 A:middle
on the features in the document.

00:25:33.146 --> 00:25:35.146 A:middle
So, if I have a version
of Keynote

00:25:35.146 --> 00:25:38.036 A:middle
that has some great features
and kinds of things we write

00:25:38.396 --> 00:25:40.916 A:middle
to disk, and we update
our application,

00:25:40.916 --> 00:25:42.506 A:middle
and we add a chart feature

00:25:42.786 --> 00:25:44.276 A:middle
so that our chart
model will be different

00:25:44.636 --> 00:25:48.476 A:middle
but everything else is exactly
the same, if I have a document

00:25:48.476 --> 00:25:50.486 A:middle
in my new Keynote and I send it

00:25:50.486 --> 00:25:52.356 A:middle
to somebody who's using the
older version of Keynote

00:25:52.356 --> 00:25:55.376 A:middle
or I open it on my own device
that's running an older version

00:25:55.376 --> 00:25:57.686 A:middle
of Keynote, and my document
doesn't have a chart

00:25:57.686 --> 00:25:59.366 A:middle
in it, that should open.

00:25:59.436 --> 00:26:01.726 A:middle
Ideally, you know, if you're
not using a new feature,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.436 --> 00:26:01.726 A:middle
Ideally, you know, if you're
not using a new feature,

00:26:02.096 --> 00:26:03.636 A:middle
you should still be able
to open your document.

00:26:03.676 --> 00:26:05.916 A:middle
And that way you have
- you're more likely

00:26:05.916 --> 00:26:07.906 A:middle
to have your users have
a positive experience

00:26:07.906 --> 00:26:11.896 A:middle
if they can open their
documents as much as possible.

00:26:12.226 --> 00:26:13.386 A:middle
One real life example of this

00:26:13.456 --> 00:26:16.076 A:middle
that you might be more
familiar with are XCode xibs.

00:26:16.576 --> 00:26:17.676 A:middle
You can actually save a xib.

00:26:17.676 --> 00:26:18.776 A:middle
There's two different formats.

00:26:18.826 --> 00:26:20.616 A:middle
And you can choose
the format based

00:26:20.616 --> 00:26:22.396 A:middle
on the features you
actually want to use,

00:26:22.816 --> 00:26:24.586 A:middle
and XCode will handle that.

00:26:25.796 --> 00:26:27.656 A:middle
Another thing to keep in mind

00:26:27.686 --> 00:26:29.746 A:middle
when you're building
your on-disk model

00:26:30.176 --> 00:26:33.876 A:middle
and also translating it to your
memory in Memory Model, is that,

00:26:34.526 --> 00:26:37.996 A:middle
you know, the way that you store
your application data in memory,

00:26:38.686 --> 00:26:39.966 A:middle
if you rearrange that,

00:26:40.956 --> 00:26:42.516 A:middle
that doesn't necessarily
mean you're going to have

00:26:42.516 --> 00:26:44.216 A:middle
to change your on
disk representation.

00:26:44.586 --> 00:26:46.976 A:middle
They don't need to look
exactly the same as long

00:26:46.976 --> 00:26:50.096 A:middle
as the overall data that you're
saving on disk is the same.

00:26:50.126 --> 00:26:51.656 A:middle
And you can translate
from one to the other.

00:26:51.656 --> 00:26:54.106 A:middle
And this way, even if
you update how you are

00:26:54.106 --> 00:26:56.496 A:middle
in fact handling things
in your application

00:26:56.496 --> 00:26:57.606 A:middle
to make your life easier,

00:26:58.136 --> 00:27:00.376 A:middle
try not to change the actual
document model unless you


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.136 --> 00:27:00.376 A:middle
try not to change the actual
document model unless you

00:27:00.376 --> 00:27:02.176 A:middle
absolutely have to.

00:27:03.236 --> 00:27:06.276 A:middle
Finally, if you're working with
a document-based application,

00:27:06.676 --> 00:27:07.746 A:middle
we recommend that
you check out the

00:27:07.746 --> 00:27:09.896 A:middle
"Creating Document-Based
Apps" session,

00:27:10.396 --> 00:27:12.996 A:middle
which is probably online
now because it's Friday.

00:27:15.176 --> 00:27:17.546 A:middle
So, just to summarize what
we've been talking about.

00:27:18.636 --> 00:27:21.426 A:middle
When you're trying to share
code between iOS and OS X,

00:27:21.576 --> 00:27:23.686 A:middle
first look at how the
code is actually used.

00:27:23.686 --> 00:27:25.966 A:middle
Is it used in a way
that should be shared?

00:27:26.416 --> 00:27:28.916 A:middle
Or is it handling something that
should be platform specific?

00:27:29.486 --> 00:27:31.536 A:middle
In which case, you don't
necessarily want to share it.

00:27:32.676 --> 00:27:34.316 A:middle
Also, really recognize
and embrace

00:27:34.686 --> 00:27:36.876 A:middle
that the platforms do have
differences in the way

00:27:36.876 --> 00:27:38.326 A:middle
that users should
use them and the way

00:27:38.326 --> 00:27:41.316 A:middle
that your UI should look
should be different based

00:27:41.316 --> 00:27:42.806 A:middle
on the platform upon
which you're running.

00:27:43.836 --> 00:27:46.286 A:middle
Also, consider using shared
frameworks when possible,

00:27:46.286 --> 00:27:48.846 A:middle
which will make your life
easier and make it so that a lot

00:27:48.846 --> 00:27:51.766 A:middle
of your code doesn't need to
be rewritten per platform.

00:27:53.226 --> 00:27:54.746 A:middle
And investigate the
design patterns

00:27:54.746 --> 00:27:57.536 A:middle
of Model View Controller
and Wrappers.

00:27:58.756 --> 00:28:00.946 A:middle
And again, keep in mind
that we're not saying


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.756 --> 00:28:00.946 A:middle
And again, keep in mind
that we're not saying

00:28:00.946 --> 00:28:03.776 A:middle
that these examples that I'm
giving you are absolutely going

00:28:03.776 --> 00:28:06.746 A:middle
to apply for you in your
applications, and what works

00:28:06.746 --> 00:28:08.696 A:middle
for us won't necessarily
work for you.

00:28:09.226 --> 00:28:11.356 A:middle
But these are meant to be
more like universal concepts

00:28:11.796 --> 00:28:13.116 A:middle
that we're giving
you examples of,

00:28:13.206 --> 00:28:14.636 A:middle
rather than universal solutions.

00:28:14.636 --> 00:28:17.236 A:middle
And now I'm going to
hand this over to Chris.

00:28:17.456 --> 00:28:18.686 A:middle
And he's going to talk
to you about how to set

00:28:18.686 --> 00:28:19.576 A:middle
up your XCode projects.

00:28:19.966 --> 00:28:20.266 A:middle
Thank you.

00:28:21.516 --> 00:28:26.496 A:middle
[ Applause ]

00:28:26.996 --> 00:28:27.536 A:middle
&gt;&gt; Thanks Elizabeth.

00:28:28.806 --> 00:28:30.806 A:middle
So now that we've learned
patterns in technologies

00:28:31.176 --> 00:28:34.046 A:middle
that made sharing code easier
for us, I'd love to walk you

00:28:34.046 --> 00:28:35.716 A:middle
through how we made
this transition

00:28:35.816 --> 00:28:37.746 A:middle
from an XCode configuration
perspective.

00:28:38.306 --> 00:28:42.796 A:middle
So as Elizabeth was saying
earlier, we had three iOS apps

00:28:42.886 --> 00:28:44.066 A:middle
that we were very proud of.

00:28:44.446 --> 00:28:46.716 A:middle
And we wanted to bring
each back to the Mac.

00:28:47.746 --> 00:28:50.616 A:middle
I work as a large code base,
so all of the things I'm going

00:28:50.616 --> 00:28:52.596 A:middle
to share with you may
not impact you now.

00:28:53.306 --> 00:28:55.266 A:middle
And in the event that
they do not today,

00:28:55.616 --> 00:28:58.296 A:middle
you'll be all the more prepared
should your app ever evolve

00:28:58.296 --> 00:29:00.056 A:middle
in a direction similar to ours.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.296 --> 00:29:00.056 A:middle
in a direction similar to ours.

00:29:00.566 --> 00:29:04.656 A:middle
And since the techniques I'll
be sharing with you transcend

00:29:04.656 --> 00:29:08.046 A:middle
into all of our apps, I'm going
to focus just on what we did

00:29:08.046 --> 00:29:11.956 A:middle
with Keynote, because the same
overarching principles apply

00:29:11.956 --> 00:29:14.326 A:middle
to both pages and
numbers as well.

00:29:15.616 --> 00:29:19.966 A:middle
The first small, yet pivotal
step to moving Keynote

00:29:19.966 --> 00:29:24.766 A:middle
to the Mac was to create a
new Mac target for the app.

00:29:25.446 --> 00:29:27.066 A:middle
So, what's a target?

00:29:28.086 --> 00:29:31.126 A:middle
A target contains instructions
for building a single product.

00:29:31.706 --> 00:29:34.416 A:middle
The most common type of target
is an application target,

00:29:34.496 --> 00:29:35.476 A:middle
which builds apps.

00:29:35.806 --> 00:29:38.516 A:middle
But there's also unit test
targets, among many others.

00:29:39.736 --> 00:29:42.576 A:middle
Targets also organize
everything that gets passed

00:29:42.576 --> 00:29:45.266 A:middle
into XCode Build, which
is XCode's build system.

00:29:45.966 --> 00:29:48.906 A:middle
And lastly, targets
are a part of projects.

00:29:49.496 --> 00:29:53.296 A:middle
It's pretty easy to
add the Mac target

00:29:53.296 --> 00:29:54.666 A:middle
to the current iOS projects.

00:29:55.106 --> 00:29:57.636 A:middle
All we need to do is click on
the project in the navigator

00:29:57.716 --> 00:29:59.716 A:middle
on the left hand side and click

00:29:59.716 --> 00:30:01.186 A:middle
on the Plus button
on the bottom.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.716 --> 00:30:01.186 A:middle
on the Plus button
on the bottom.

00:30:02.476 --> 00:30:04.896 A:middle
Then, we select the Cocoa
Application Template

00:30:05.056 --> 00:30:06.306 A:middle
from the OS X category.

00:30:06.976 --> 00:30:09.036 A:middle
We give it a witty name,
something profound.

00:30:09.036 --> 00:30:11.626 A:middle
In this case, Keynote for Mac.

00:30:11.626 --> 00:30:12.616 A:middle
And we press Finish.

00:30:13.306 --> 00:30:13.976 A:middle
And voila!

00:30:14.566 --> 00:30:16.996 A:middle
We've accomplished the
first fundamental step.

00:30:17.676 --> 00:30:20.746 A:middle
We now have two application
targets, one for the Keynote

00:30:20.746 --> 00:30:22.506 A:middle
for iOS, and one for the Mac.

00:30:23.636 --> 00:30:25.746 A:middle
So right now, it doesn't
do anything too fancy.

00:30:26.146 --> 00:30:28.786 A:middle
We press Build and Run, we'd see
something that looks like this.

00:30:30.446 --> 00:30:33.476 A:middle
And this is, of course, a far
cry from the Keynote experience.

00:30:34.116 --> 00:30:34.936 A:middle
And the reason for this is

00:30:35.046 --> 00:30:37.246 A:middle
because we haven't
added any functionality

00:30:37.306 --> 00:30:38.286 A:middle
to our Mac target yet.

00:30:39.466 --> 00:30:42.016 A:middle
So let's take a look at what
functionality there is available

00:30:43.076 --> 00:30:43.926 A:middle
to add.

00:30:44.196 --> 00:30:46.746 A:middle
Luckily for us, we have a
fair number of subsystems

00:30:46.856 --> 00:30:47.906 A:middle
that we'll want to
take advantage

00:30:47.906 --> 00:30:49.196 A:middle
of for our Mac application.

00:30:50.436 --> 00:30:52.376 A:middle
One example is the iWork Canvas,

00:30:52.536 --> 00:30:54.446 A:middle
which Elizabeth was
sharing with us earlier.

00:30:55.206 --> 00:30:57.336 A:middle
Being able to use the
same canvas in all

00:30:57.336 --> 00:30:59.406 A:middle
of our apps is incredibly
important to us

00:30:59.756 --> 00:31:02.326 A:middle
because we want all of our
documents to look the same


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.756 --> 00:31:02.326 A:middle
because we want all of our
documents to look the same

00:31:02.506 --> 00:31:05.226 A:middle
across all of the
devices that we support.

00:31:06.036 --> 00:31:08.546 A:middle
We also want to make
sure that our file format

00:31:08.666 --> 00:31:10.686 A:middle
and model is the
same for both the iOS

00:31:10.796 --> 00:31:12.566 A:middle
and OS X versions of our apps.

00:31:13.236 --> 00:31:14.536 A:middle
So, we would want to pull

00:31:14.536 --> 00:31:16.346 A:middle
in our common persistence
framework as well.

00:31:16.906 --> 00:31:21.006 A:middle
And we also want to bring over
all of our common utilities.

00:31:21.566 --> 00:31:23.736 A:middle
These utilities include
mechanisms for logging,

00:31:23.856 --> 00:31:26.046 A:middle
convenience methods,
common data types

00:31:26.356 --> 00:31:28.686 A:middle
and many other classes
whose functionalities span

00:31:28.686 --> 00:31:29.946 A:middle
across our entire suite.

00:31:30.886 --> 00:31:33.106 A:middle
These elements we've
separated into libraries.

00:31:34.416 --> 00:31:36.376 A:middle
So, what's a library?

00:31:37.616 --> 00:31:39.946 A:middle
Simply put, it's a
bundled collection of code.

00:31:40.636 --> 00:31:43.276 A:middle
More specifically, they
are targets in XCode,

00:31:43.596 --> 00:31:44.856 A:middle
but they are not executable.

00:31:45.346 --> 00:31:47.616 A:middle
They just exist as a way
for you to share code,

00:31:48.036 --> 00:31:49.406 A:middle
primarily across projects.

00:31:49.976 --> 00:31:53.836 A:middle
To that end, we found it
didn't make sense to break code

00:31:53.836 --> 00:31:55.756 A:middle
into libraries unless
it was going

00:31:55.756 --> 00:31:57.336 A:middle
to be shared by multiple
projects.

00:31:58.066 --> 00:32:01.276 A:middle
Otherwise, we could just add
the shared code to both the iOS


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.066 --> 00:32:01.276 A:middle
Otherwise, we could just add
the shared code to both the iOS

00:32:01.376 --> 00:32:02.776 A:middle
and Mac targets for our app.

00:32:02.776 --> 00:32:04.796 A:middle
And it's important to note

00:32:05.116 --> 00:32:06.636 A:middle
that if you have a
single project app,

00:32:07.126 --> 00:32:08.556 A:middle
this may be all you need to do.

00:32:08.756 --> 00:32:10.206 A:middle
And that is absolutely fine.

00:32:11.046 --> 00:32:14.166 A:middle
Again, we feel that sharing
libraries makes sense as a means

00:32:14.166 --> 00:32:15.906 A:middle
to share code across projects

00:32:16.276 --> 00:32:18.946 A:middle
and not necessarily
inside projects.

00:32:19.966 --> 00:32:23.816 A:middle
And lastly, libraries can
be either static or dynamic.

00:32:24.556 --> 00:32:27.076 A:middle
So, what does that mean?

00:32:28.556 --> 00:32:30.006 A:middle
All static libraries are built

00:32:30.006 --> 00:32:32.746 A:middle
with a project whenever any
other targets reference them.

00:32:33.246 --> 00:32:36.506 A:middle
And, they're included as part
of the final app that you build.

00:32:38.256 --> 00:32:40.496 A:middle
Dynamic libraries can be
external to the project.

00:32:40.676 --> 00:32:42.506 A:middle
And this makes them
favorable for a few reasons.

00:32:43.196 --> 00:32:46.246 A:middle
First, once you build them, you
don't need to build them again

00:32:46.276 --> 00:32:47.116 A:middle
until you change them.

00:32:47.996 --> 00:32:51.346 A:middle
And second, they can be put in
a shared location and not rolled

00:32:51.346 --> 00:32:52.936 A:middle
into the final application
you build,

00:32:53.306 --> 00:32:54.766 A:middle
which makes your
application smaller.

00:32:55.366 --> 00:32:59.986 A:middle
A concrete example of a
dynamic library is a framework.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:01.036 --> 00:33:02.636 A:middle
Simply put, they're
a packaged up

00:33:02.686 --> 00:33:04.906 A:middle
and pre-compiled
dynamic library.

00:33:06.406 --> 00:33:08.446 A:middle
Frameworks have just
been brought to iOS 8.

00:33:08.696 --> 00:33:10.106 A:middle
And if you'd like to
learn more about how

00:33:10.106 --> 00:33:12.616 A:middle
to make modern frameworks, I
encourage you to look at the

00:33:12.616 --> 00:33:15.406 A:middle
"Building Modern Frameworks"
talk video available

00:33:15.406 --> 00:33:16.756 A:middle
on the Apple Developer Website.

00:33:17.286 --> 00:33:21.856 A:middle
So we currently have a framework
encapsulating functionality

00:33:21.856 --> 00:33:24.306 A:middle
shared across all
iWork for iOS apps.

00:33:25.456 --> 00:33:27.046 A:middle
And let's see what
happens when we try

00:33:27.046 --> 00:33:29.496 A:middle
to extend our shared
app framework to work

00:33:29.496 --> 00:33:31.846 A:middle
with OS X as well as iOS.

00:33:32.476 --> 00:33:35.626 A:middle
So here's the iWork
shared XCode project.

00:33:35.876 --> 00:33:38.246 A:middle
And we're going to add a
new framework target just

00:33:38.246 --> 00:33:40.976 A:middle
like we did earlier, by pressing
the Plus button on the bottom.

00:33:42.286 --> 00:33:43.386 A:middle
We select Cocoa Framework.

00:33:43.726 --> 00:33:44.366 A:middle
We click Next.

00:33:45.326 --> 00:33:46.646 A:middle
Again, we give it a name.

00:33:47.756 --> 00:33:48.536 A:middle
We press Finish.

00:33:49.896 --> 00:33:51.896 A:middle
And again, we have a new target.

00:33:52.506 --> 00:33:54.096 A:middle
The first part of
the battle is won.

00:33:55.146 --> 00:33:57.786 A:middle
So let's roll up our sleeves,
break out the sledgehammer

00:33:58.366 --> 00:34:00.566 A:middle
and create a new
common group in XCode.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.366 --> 00:34:00.566 A:middle
and create a new
common group in XCode.

00:34:01.906 --> 00:34:03.796 A:middle
So let's talk about what
sort of things we might want

00:34:03.796 --> 00:34:04.916 A:middle
to put in this common group.

00:34:06.806 --> 00:34:09.545 A:middle
So we currently have a class in
iOS that represents a document.

00:34:09.906 --> 00:34:12.696 A:middle
And it's platform specific
because it extends UIDocument.

00:34:14.085 --> 00:34:16.136 A:middle
UIDocument does not
exist in OS X.

00:34:16.485 --> 00:34:18.416 A:middle
So we'll need to
introduce a new Mac document

00:34:18.636 --> 00:34:20.275 A:middle
that extends something
else as a basis

00:34:20.275 --> 00:34:21.545 A:middle
for our document functionality.

00:34:22.306 --> 00:34:25.525 A:middle
Luckily for us, NSDocument does
everything we need to read,

00:34:25.806 --> 00:34:27.505 A:middle
update and save our documents.

00:34:28.045 --> 00:34:32.746 A:middle
That said, we'd like all callers
of our model to be as agnostic

00:34:32.746 --> 00:34:33.985 A:middle
as the platform as possible.

00:34:34.505 --> 00:34:36.286 A:middle
So we'll want to expose
a common interface

00:34:36.366 --> 00:34:37.466 A:middle
between both documents.

00:34:37.946 --> 00:34:40.396 A:middle
And this we can express

00:34:40.396 --> 00:34:42.846 A:middle
in a shared interface
called iWorkDocument.

00:34:43.636 --> 00:34:46.766 A:middle
This interface that can
declare common behavior shared

00:34:46.766 --> 00:34:48.416 A:middle
across both the iOS and the Mac.

00:34:49.616 --> 00:34:51.976 A:middle
So let's take a look at what
iWorkDocument might look like.

00:34:53.956 --> 00:34:55.616 A:middle
Here's the shared
iWorkDocument interface.

00:34:56.116 --> 00:34:57.526 A:middle
It declares methods
for retrieving,

00:34:57.726 --> 00:34:59.986 A:middle
saving and updating
objects in a document.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:01.156 --> 00:35:03.826 A:middle
And then, we can create
a Mac NSDocument subclass

00:35:04.896 --> 00:35:05.846 A:middle
and declare conformance

00:35:05.886 --> 00:35:07.596 A:middle
to the shared interface
we just created.

00:35:08.986 --> 00:35:11.406 A:middle
And then, we implement
the required methods

00:35:11.566 --> 00:35:15.716 A:middle
as declared in the interface.

00:35:15.926 --> 00:35:18.026 A:middle
Now, let's dive into
the project itself.

00:35:18.556 --> 00:35:19.116 A:middle
Bear with me.

00:35:19.356 --> 00:35:21.236 A:middle
I know this is going
to be a little tedious,

00:35:21.436 --> 00:35:22.806 A:middle
which is actually
part of our point.

00:35:23.396 --> 00:35:25.636 A:middle
I'll show you how to later
make this easier to manage,

00:35:25.856 --> 00:35:28.326 A:middle
but we want to show you what's
happening under the hood.

00:35:29.036 --> 00:35:32.656 A:middle
So let's - so there's
one thing we need to do

00:35:32.656 --> 00:35:34.526 A:middle
to the iWork shared
project before we move

00:35:34.526 --> 00:35:35.636 A:middle
on to the Keynote project.

00:35:36.046 --> 00:35:37.486 A:middle
And it's very important
that we do so.

00:35:38.576 --> 00:35:40.666 A:middle
Let's click on the iWork
App Shared Mac target

00:35:40.666 --> 00:35:42.526 A:middle
in the middle sidebar
and double click

00:35:42.526 --> 00:35:44.576 A:middle
on the Public Headers
Folder Path option.

00:35:45.796 --> 00:35:46.876 A:middle
A popover appears.

00:35:47.776 --> 00:35:52.096 A:middle
Let's remove what's in there
already and give it a name.

00:35:52.356 --> 00:35:53.916 A:middle
This name is the
first part that goes

00:35:53.986 --> 00:35:57.446 A:middle
after our import declaration
and before the slash in classes

00:35:57.476 --> 00:36:01.006 A:middle
that import logic
from this framework.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:57.476 --> 00:36:01.006 A:middle
that import logic
from this framework.

00:36:01.116 --> 00:36:03.656 A:middle
OK. Now we're ready
to go back to Keynote

00:36:03.846 --> 00:36:05.866 A:middle
and use this new
Mac document object.

00:36:06.426 --> 00:36:10.306 A:middle
So I've opened up my document
window controller and the header

00:36:10.676 --> 00:36:11.986 A:middle
for the Keynote for Mac project.

00:36:13.556 --> 00:36:14.966 A:middle
I add the import declaration.

00:36:15.196 --> 00:36:15.856 A:middle
I press Build.

00:36:16.736 --> 00:36:17.526 A:middle
And it fails.

00:36:18.346 --> 00:36:18.906 A:middle
What happened?

00:36:19.866 --> 00:36:23.046 A:middle
I thought I had just declared
the iWork Shared Header

00:36:23.046 --> 00:36:23.446 A:middle
Folder path.

00:36:25.026 --> 00:36:27.406 A:middle
Well, we still need to
tell the Mac target to look

00:36:27.406 --> 00:36:29.086 A:middle
in the place we just
said we were going

00:36:29.086 --> 00:36:29.996 A:middle
to deposit the headers.

00:36:29.996 --> 00:36:32.856 A:middle
So we navigate to the
Header Search Path section

00:36:32.856 --> 00:36:33.916 A:middle
of the Mac Build Settings.

00:36:34.786 --> 00:36:35.786 A:middle
We double-click on the item.

00:36:35.786 --> 00:36:37.476 A:middle
A popover appears.

00:36:38.346 --> 00:36:45.556 A:middle
We type $(CONFIGURATION BUILD
DIR) and then we hit Enter.

00:36:46.406 --> 00:36:49.006 A:middle
This tells XCode that when we're
building Keynote for the Mac,

00:36:49.396 --> 00:36:51.086 A:middle
that it should look in
the Headers directory

00:36:51.086 --> 00:36:54.046 A:middle
where things are built, which
in this case is the location

00:36:54.046 --> 00:36:54.876 A:middle
of the shared framework.

00:36:55.386 --> 00:36:58.026 A:middle
Then we dismiss the popover.

00:36:58.456 --> 00:37:00.536 A:middle
And now the Keynote Mac
target knows how to look


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.456 --> 00:37:00.536 A:middle
And now the Keynote Mac
target knows how to look

00:37:00.536 --> 00:37:02.316 A:middle
for the shared Mac
library headers.

00:37:04.406 --> 00:37:07.566 A:middle
So, I start coding
my implementation

00:37:08.006 --> 00:37:09.596 A:middle
and then I try to
build it again.

00:37:10.606 --> 00:37:12.086 A:middle
And I get a bunch
of linker errors.

00:37:12.806 --> 00:37:15.496 A:middle
Yikes! So, what happened here is

00:37:15.496 --> 00:37:17.916 A:middle
that I didn't link the Mac
app target with the library.

00:37:18.086 --> 00:37:19.976 A:middle
Nor did I list the
library as a dependency.

00:37:20.466 --> 00:37:21.646 A:middle
So that's why it failed.

00:37:22.156 --> 00:37:24.166 A:middle
Let's fix that.

00:37:24.396 --> 00:37:26.116 A:middle
So I go back to the
Keynote for Mac Target

00:37:26.116 --> 00:37:27.056 A:middle
in the Keynote project.

00:37:27.336 --> 00:37:28.746 A:middle
I click on the Build Phases tab.

00:37:29.466 --> 00:37:33.876 A:middle
I expand the disclosure triangle
next to Target Dependencies.

00:37:34.726 --> 00:37:35.736 A:middle
I click the Plus button.

00:37:37.036 --> 00:37:38.966 A:middle
I select our library,
and I press Add.

00:37:39.996 --> 00:37:41.946 A:middle
Note that if you're not seeing
the library as an option,

00:37:41.946 --> 00:37:44.886 A:middle
you will need to drag in the
project owning the library

00:37:44.976 --> 00:37:49.226 A:middle
into your containing
app project.

00:37:49.326 --> 00:37:51.306 A:middle
Our shared library now
shows up as a dependency.

00:37:51.606 --> 00:37:53.916 A:middle
This means that before we build
the Keynote for Mac target,

00:37:54.196 --> 00:37:56.736 A:middle
XCode will make sure this
library is built first.

00:37:57.146 --> 00:38:01.166 A:middle
Next, we need to link the app
binary with the framework.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:57.146 --> 00:38:01.166 A:middle
Next, we need to link the app
binary with the framework.

00:38:01.776 --> 00:38:04.336 A:middle
To do this, we click on the
disclosure triangle next

00:38:04.336 --> 00:38:06.496 A:middle
to the Link Binary
With Libraries section

00:38:06.796 --> 00:38:10.256 A:middle
and click on the plus.

00:38:10.566 --> 00:38:11.546 A:middle
We select our framework.

00:38:11.546 --> 00:38:11.966 A:middle
We press Add.

00:38:11.966 --> 00:38:14.136 A:middle
And then it shows up.

00:38:14.926 --> 00:38:18.416 A:middle
Then, when we try to
build and run, it works.

00:38:19.026 --> 00:38:21.536 A:middle
So now, Keynote for
Mac is building on top

00:38:21.536 --> 00:38:22.666 A:middle
of the shared Mac framework.

00:38:23.066 --> 00:38:26.096 A:middle
And it's not too hard to imagine
extending the same process

00:38:26.096 --> 00:38:27.176 A:middle
to other frameworks

00:38:27.176 --> 00:38:29.146 A:middle
and libraries used
by Keynote as well.

00:38:29.786 --> 00:38:33.156 A:middle
So combined with extending
our shared frameworks

00:38:33.156 --> 00:38:36.296 A:middle
to be Mac friendly, we also need
to create Mac-specific views

00:38:36.346 --> 00:38:38.636 A:middle
and view controllers
that use these frameworks

00:38:38.666 --> 00:38:41.366 A:middle
to produce the Keynote
experience on the Mac.

00:38:42.166 --> 00:38:45.136 A:middle
And with a bit of time,
elbow grease and hand waving,

00:38:45.246 --> 00:38:46.236 A:middle
a wonderful thing happens.

00:38:46.446 --> 00:38:48.406 A:middle
We have a fully functioning
Mac app.

00:38:48.606 --> 00:38:53.266 A:middle
So at a high level, one can now
imagine our projects looking

00:38:53.266 --> 00:38:53.966 A:middle
something like this.

00:38:54.456 --> 00:38:57.276 A:middle
We have XCode projects for
pages, numbers and Keynote.

00:38:57.756 --> 00:39:00.226 A:middle
And each project has
a Mac and iOS target.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:57.756 --> 00:39:00.226 A:middle
And each project has
a Mac and iOS target.

00:39:01.686 --> 00:39:04.666 A:middle
These targets build on top
of app-specific libraries,

00:39:05.106 --> 00:39:07.826 A:middle
which in turn build on top
of the cross-platform Canvas,

00:39:08.186 --> 00:39:10.876 A:middle
Persistence and Shared
Core utilities frameworks.

00:39:11.556 --> 00:39:16.356 A:middle
So while this is great, we're
not quite out of the woods yet.

00:39:16.586 --> 00:39:18.686 A:middle
One big problem is that
our build settings are

00:39:18.686 --> 00:39:21.396 A:middle
somewhat disorganized.

00:39:21.626 --> 00:39:23.926 A:middle
Remember how we manually
set the header search path

00:39:24.056 --> 00:39:26.406 A:middle
on the Keynote Mac
target and the same thing

00:39:26.406 --> 00:39:27.776 A:middle
with the public header
search path?

00:39:27.816 --> 00:39:31.936 A:middle
So at present, each target
has its own build settings

00:39:31.936 --> 00:39:32.826 A:middle
associated with it.

00:39:33.246 --> 00:39:35.016 A:middle
While this works,
if ever I wanted

00:39:35.016 --> 00:39:37.366 A:middle
to change the build setting
somewhere, I would need

00:39:37.366 --> 00:39:39.246 A:middle
to change it for every
target in the project.

00:39:39.366 --> 00:39:41.276 A:middle
And I would need to
trust myself to make

00:39:41.276 --> 00:39:43.106 A:middle
that change everywhere
consistently.

00:39:43.106 --> 00:39:47.156 A:middle
How we fix this is with
XCode Config files.

00:39:48.596 --> 00:39:49.336 A:middle
And they look like this.

00:39:50.136 --> 00:39:52.276 A:middle
They simply contain
a title and a value.

00:39:52.846 --> 00:39:54.516 A:middle
Each line controls
something specific

00:39:54.556 --> 00:39:55.616 A:middle
about your build process.

00:39:55.976 --> 00:39:58.466 A:middle
And you can customize every
aspect of your build here.

00:39:59.076 --> 00:40:01.026 A:middle
Some common examples


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.076 --> 00:40:01.026 A:middle
Some common examples

00:40:01.026 --> 00:40:03.426 A:middle
of properties you can set
are header search paths,

00:40:03.786 --> 00:40:05.886 A:middle
which dictate the
directories in the file system

00:40:05.946 --> 00:40:07.976 A:middle
that XCode should use for
finding public headers.

00:40:09.256 --> 00:40:11.706 A:middle
Compiler warnings or what
sorts of potential bugs

00:40:11.706 --> 00:40:13.686 A:middle
in the code you'd like
XCode to tell you about.

00:40:14.666 --> 00:40:16.706 A:middle
Architecture, which
defines the types

00:40:16.706 --> 00:40:18.196 A:middle
of CPUs your target can build.

00:40:19.206 --> 00:40:22.776 A:middle
SDKs, which define the
platform and version of the SDK

00:40:22.776 --> 00:40:24.436 A:middle
of the target you'd like to use.

00:40:25.426 --> 00:40:27.956 A:middle
And deployment targets, which
declare the minimum version

00:40:27.956 --> 00:40:31.186 A:middle
of OS X and iOS a user
needs to have in order

00:40:31.186 --> 00:40:32.346 A:middle
to build and run your app.

00:40:33.576 --> 00:40:35.666 A:middle
These are a few of the
examples of popular properties,

00:40:35.856 --> 00:40:36.836 A:middle
but many other remain.

00:40:37.816 --> 00:40:39.896 A:middle
And, for the full
list, you can look

00:40:39.896 --> 00:40:43.196 A:middle
at for configuring your
XCode configuration files,

00:40:43.626 --> 00:40:46.576 A:middle
please refer to the XCode Build
Settings Reference available

00:40:46.576 --> 00:40:47.866 A:middle
on Apple's Developer Website.

00:40:49.576 --> 00:40:52.466 A:middle
The real advantage of
XCode Config files is

00:40:52.466 --> 00:40:53.706 A:middle
that you can use inheritance.

00:40:54.366 --> 00:40:58.076 A:middle
In other words, you can create a
common XCode Config file for iOS

00:40:58.246 --> 00:41:00.876 A:middle
and Mac, and then have
that extend a common one.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.246 --> 00:41:00.876 A:middle
and Mac, and then have
that extend a common one.

00:41:01.716 --> 00:41:04.846 A:middle
In a common file, you would
place build settings that apply

00:41:04.846 --> 00:41:06.086 A:middle
to your whole project.

00:41:06.786 --> 00:41:08.886 A:middle
And in a platform-specific
configuration files,

00:41:09.216 --> 00:41:10.776 A:middle
you would add directives
that are specific

00:41:10.776 --> 00:41:14.256 A:middle
to either iOS or the Mac.

00:41:14.466 --> 00:41:16.596 A:middle
Another strength of
XCode Config files is

00:41:16.596 --> 00:41:18.666 A:middle
that they can be
reused across projects.

00:41:19.006 --> 00:41:22.246 A:middle
In other words, you can write
an iOS Config file for numbers,

00:41:22.356 --> 00:41:24.896 A:middle
pages and Keynote
and then have all

00:41:24.896 --> 00:41:27.656 A:middle
of your iOS apps use
the same iOS Config.

00:41:28.726 --> 00:41:31.226 A:middle
So let's create an XCode
Config file for our Mac target

00:41:31.546 --> 00:41:33.956 A:middle
and implement it together.

00:41:34.326 --> 00:41:37.506 A:middle
To create an XCode Config
file, we select File New

00:41:37.716 --> 00:41:38.916 A:middle
from the XCode Main Menu.

00:41:39.416 --> 00:41:42.236 A:middle
And we select the Configuration
Settings File and press Next.

00:41:43.606 --> 00:41:45.696 A:middle
We give it a name,
in this case Mac.

00:41:47.236 --> 00:41:48.896 A:middle
And for starters,
let's associate it

00:41:48.896 --> 00:41:50.006 A:middle
with the Keynote Mac target.

00:41:51.546 --> 00:41:52.276 A:middle
We click Finish.

00:41:53.076 --> 00:41:55.246 A:middle
And now we have an XCode
Config file for the Mac.

00:41:56.276 --> 00:41:57.836 A:middle
But this Config file
does not know

00:41:57.836 --> 00:42:00.356 A:middle
about the common configuration
it is building on top of yet.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:57.836 --> 00:42:00.356 A:middle
about the common configuration
it is building on top of yet.

00:42:01.086 --> 00:42:03.806 A:middle
To accomplish this,
we simply add #include

00:42:03.806 --> 00:42:05.926 A:middle
to this child config
followed by the name

00:42:05.926 --> 00:42:08.096 A:middle
of the xcconfig file
we'd like to extend.

00:42:09.176 --> 00:42:12.616 A:middle
And of course, we later add
any Mac-specific settings

00:42:12.686 --> 00:42:13.286 A:middle
that we care about.

00:42:16.176 --> 00:42:18.306 A:middle
Once we've done that, we
can associate our target

00:42:18.306 --> 00:42:20.426 A:middle
with these configurations
using the project editor.

00:42:20.976 --> 00:42:23.966 A:middle
We'll still need to set this up
for each target in each project.

00:42:24.496 --> 00:42:26.926 A:middle
But after we set this
up, we may never need

00:42:26.926 --> 00:42:29.066 A:middle
to touch build settings
of each target ever again.

00:42:30.206 --> 00:42:32.136 A:middle
So, let's try it for
the Keynote project.

00:42:32.936 --> 00:42:34.896 A:middle
We can do this by
expanding the Configurations

00:42:34.896 --> 00:42:35.716 A:middle
disclosure triangle.

00:42:36.406 --> 00:42:37.896 A:middle
And then for every
configuration,

00:42:38.216 --> 00:42:39.656 A:middle
setting the appropriate
Config file.

00:42:40.246 --> 00:42:42.906 A:middle
And we can verify
that these settings

00:42:42.906 --> 00:42:45.266 A:middle
of our Config files
propagated to the targets

00:42:45.386 --> 00:42:47.446 A:middle
when we take a closer look
at their build settings.

00:42:49.056 --> 00:42:51.736 A:middle
And here is what's provided
by the Mac XCode Config file.

00:42:52.506 --> 00:42:54.656 A:middle
For example, we can see
here that we're building

00:42:54.656 --> 00:42:58.196 A:middle
against the latest OS X SDK
as opposed to the current SDK.

00:42:58.196 --> 00:43:01.586 A:middle
And we can also see that the
Config file had an impact


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:58.196 --> 00:43:01.586 A:middle
And we can also see that the
Config file had an impact

00:43:01.686 --> 00:43:04.426 A:middle
on the supported platforms
and valid architectures

00:43:04.656 --> 00:43:07.256 A:middle
of the Mac target as well.

00:43:07.496 --> 00:43:09.116 A:middle
So now we have a sustainable,

00:43:09.356 --> 00:43:11.326 A:middle
highly customizable
build process

00:43:12.286 --> 00:43:15.096 A:middle
and a great native Keynote
experience running on the Mac.

00:43:15.956 --> 00:43:17.966 A:middle
And as such, our
work is done here.

00:43:18.696 --> 00:43:20.586 A:middle
So let's take a step back

00:43:20.826 --> 00:43:22.786 A:middle
and review what we accomplished
together this morning.

00:43:23.706 --> 00:43:25.256 A:middle
We made a target
for each platform

00:43:25.256 --> 00:43:26.276 A:middle
that we wanted to support.

00:43:26.926 --> 00:43:28.406 A:middle
Then we broke some
of the functionality

00:43:28.406 --> 00:43:30.406 A:middle
across multiple projects
and platforms

00:43:30.456 --> 00:43:31.946 A:middle
into reusable frameworks.

00:43:32.996 --> 00:43:35.596 A:middle
We told the app targets how to
use these shared frameworks.

00:43:36.296 --> 00:43:38.466 A:middle
And then we streamlined
our build configuration

00:43:38.706 --> 00:43:44.236 A:middle
across every one of our targets
using XCode Config files.

00:43:44.836 --> 00:43:46.746 A:middle
So, while there's
no silver bullet,

00:43:46.746 --> 00:43:49.606 A:middle
as Elizabeth mentioned earlier,
we found the design principles

00:43:49.736 --> 00:43:52.516 A:middle
and XCode Project Configuration
we shared with you this morning

00:43:52.656 --> 00:43:54.026 A:middle
to be incredibly helpful to us.

00:43:54.026 --> 00:43:57.356 A:middle
And we can only hope that you
find the ideas we've shared

00:43:57.356 --> 00:44:01.546 A:middle
with you as useful to
you as they were to us.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:57.356 --> 00:44:01.546 A:middle
with you as useful to
you as they were to us.

00:44:01.836 --> 00:44:04.796 A:middle
Also, we compiled a simple
project called Photo Memories,

00:44:05.106 --> 00:44:07.596 A:middle
which exercises some of
the cross-platform concepts

00:44:07.856 --> 00:44:10.026 A:middle
and XCode Configurations
mentioned in this talk.

00:44:10.666 --> 00:44:13.276 A:middle
This sample code is available
on Apple's Developer Website

00:44:13.686 --> 00:44:15.766 A:middle
and explains how to
implement some of the patterns

00:44:15.766 --> 00:44:17.626 A:middle
and practices that
we talked about today

00:44:17.876 --> 00:44:19.016 A:middle
in even deeper detail.

00:44:19.576 --> 00:44:22.766 A:middle
If you're interested
in learning more

00:44:22.766 --> 00:44:24.346 A:middle
about cross-platform
applications,

00:44:24.616 --> 00:44:27.366 A:middle
there is no shortage of other
sessions that take a deep dive

00:44:27.646 --> 00:44:29.466 A:middle
into some of the topics we
touched on this morning.

00:44:30.036 --> 00:44:32.816 A:middle
And if you're interested, all
the session presentation videos

00:44:32.916 --> 00:44:34.626 A:middle
and demo materials
will be available

00:44:34.656 --> 00:44:35.986 A:middle
on Apple's Developer Website.

00:44:37.366 --> 00:44:39.206 A:middle
And finally, if you
have any questions

00:44:39.206 --> 00:44:41.226 A:middle
about what you heard
today, please don't hesitate

00:44:41.226 --> 00:44:43.496 A:middle
to contact Jake Behrens
or Dave DeLong

00:44:43.916 --> 00:44:47.856 A:middle
or consult the developer
forums at devforums.apple.com.

00:44:48.736 --> 00:44:50.606 A:middle
And with that, we wish
you the best of luck

00:44:50.606 --> 00:44:52.486 A:middle
in your cross-platform
application adventures,

00:44:52.676 --> 00:44:54.556 A:middle
and enjoy the rest of your
time in San Francisco.

00:44:54.856 --> 00:44:55.336 A:middle
Thank you very much.

00:44:56.516 --> 00:44:59.130 A:middle
[ Applause ]

