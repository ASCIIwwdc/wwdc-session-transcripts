WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:11.536 A:middle
[ Silence ]

00:00:12.036 --> 00:00:14.796 A:middle
&gt;&gt; Thanks so much for
coming to What's New

00:00:14.796 --> 00:00:16.236 A:middle
in Table and Collection Views.

00:00:16.976 --> 00:00:20.566 A:middle
This is a topic of special
dearness to my heart

00:00:20.896 --> 00:00:22.126 A:middle
as we give it every year.

00:00:22.306 --> 00:00:24.336 A:middle
Well, not exactly at this
session but something

00:00:24.336 --> 00:00:27.406 A:middle
on collection and table views
we usually to get to talk about.

00:00:27.406 --> 00:00:30.026 A:middle
And that's really
because table views

00:00:30.026 --> 00:00:33.096 A:middle
and collection views
are a tool that get used

00:00:33.096 --> 00:00:37.186 A:middle
in nearly every single
application and we recognized

00:00:37.246 --> 00:00:40.346 A:middle
that as we went through to add
a lot of improvements to iOS 8.

00:00:40.696 --> 00:00:42.326 A:middle
We really wanted to do things

00:00:42.836 --> 00:00:47.286 A:middle
that made your life
easier doing awesome things

00:00:47.286 --> 00:00:50.466 A:middle
with the tools that, as I said,
just about everybody uses.

00:00:51.356 --> 00:00:53.056 A:middle
So, what we're going to talk

00:00:53.056 --> 00:00:55.536 A:middle
about today is a few
fundamental improvements

00:00:56.016 --> 00:00:57.966 A:middle
to both table view
and collection view.

00:00:58.486 --> 00:01:00.376 A:middle
And we'll be beginning
with table view.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.486 --> 00:01:00.376 A:middle
And we'll be beginning
with table view.

00:01:01.306 --> 00:01:04.036 A:middle
In particular, the big thing
that we're going to be talking

00:01:04.036 --> 00:01:07.896 A:middle
about today is how to
do Dynamic Type adoption

00:01:07.896 --> 00:01:08.826 A:middle
in your table views.

00:01:09.716 --> 00:01:13.876 A:middle
We're going to be asking that
all applications that deal

00:01:13.876 --> 00:01:18.196 A:middle
with text in iOS 8 adopt Dynamic
Type and you'll see in fact

00:01:18.316 --> 00:01:20.856 A:middle
that all of our system apps
have already done this.

00:01:21.276 --> 00:01:23.826 A:middle
So users are going to expect
that your application do this.

00:01:23.826 --> 00:01:26.926 A:middle
And I'm going to show you that
it's really quite simple to do

00:01:27.156 --> 00:01:29.056 A:middle
and I think you'll have
a lot of fun with it.

00:01:29.226 --> 00:01:31.216 A:middle
The mechanism that
we're giving you

00:01:31.706 --> 00:01:35.636 A:middle
for adopting Dynamic Type
is self-sizing cells.

00:01:36.856 --> 00:01:39.466 A:middle
We think this strategy--
thank you.

00:01:40.516 --> 00:01:44.106 A:middle
[ Applause ]

00:01:44.606 --> 00:01:48.316 A:middle
This strategy is really
going to improve the way

00:01:48.316 --> 00:01:51.166 A:middle
that we architect our
table views, number 1,

00:01:51.556 --> 00:01:55.076 A:middle
because you can encapsulate
logic right in the cells, and 2,

00:01:55.076 --> 00:01:57.976 A:middle
the fact that you can do that
will make it so much easier

00:01:57.976 --> 00:02:02.826 A:middle
to have cells that are not a
hard coded compile time known


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:57.976 --> 00:02:02.826 A:middle
to have cells that are not a
hard coded compile time known

00:02:02.946 --> 00:02:06.566 A:middle
height which means you can
easily adopt the dynamic

00:02:06.976 --> 00:02:07.836 A:middle
font changes.

00:02:08.795 --> 00:02:11.506 A:middle
So, additionally, we've got some
new things in collection view.

00:02:11.826 --> 00:02:15.086 A:middle
And number one, really great is
we're bringing self-sizing cells

00:02:15.086 --> 00:02:16.606 A:middle
to collection view also.

00:02:17.516 --> 00:02:21.396 A:middle
[ Applause ]

00:02:21.896 --> 00:02:25.796 A:middle
And for all of you custom layout
authors, I know there's a lot

00:02:25.796 --> 00:02:29.986 A:middle
of you out there because every
week at least I see a new app

00:02:30.236 --> 00:02:33.336 A:middle
that has a really great layout
that really impresses me.

00:02:34.026 --> 00:02:36.396 A:middle
We have something
we want to talk

00:02:36.396 --> 00:02:39.276 A:middle
about which is smart
invalidation

00:02:39.596 --> 00:02:42.236 A:middle
which will allow you
to write great layouts

00:02:42.236 --> 00:02:44.756 A:middle
that are also super performant.

00:02:45.516 --> 00:02:49.516 A:middle
[ Applause ]

00:02:50.016 --> 00:02:52.516 A:middle
So, we begin by talking
about table view

00:02:52.826 --> 00:02:54.186 A:middle
and Dynamic Type adoption.

00:02:55.036 --> 00:02:58.726 A:middle
If you've never seen
this screen from iOS 7,

00:02:58.726 --> 00:03:01.546 A:middle
is when we introduced
Dynamic Type, this is a screen


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.726 --> 00:03:01.546 A:middle
is when we introduced
Dynamic Type, this is a screen

00:03:01.546 --> 00:03:06.976 A:middle
in Settings where you
can change the text size

00:03:07.076 --> 00:03:09.456 A:middle
to fit what feels
appropriate for you.

00:03:10.036 --> 00:03:12.456 A:middle
And if you're somebody who
likes text a little bit bigger

00:03:12.976 --> 00:03:15.886 A:middle
so that you can see things
easier, then you can slide

00:03:15.886 --> 00:03:20.056 A:middle
that over and magically the
text changes in the interface

00:03:20.406 --> 00:03:23.876 A:middle
and in fact in iOS 8, all
internal apps will adapt

00:03:24.326 --> 00:03:26.236 A:middle
and change their text size based

00:03:26.236 --> 00:03:29.786 A:middle
on this slider value
that you've set.

00:03:29.986 --> 00:03:33.516 A:middle
So that's great because it
makes your phone truly feel

00:03:33.516 --> 00:03:36.036 A:middle
like your phone, and then
adopts to your needs.

00:03:36.466 --> 00:03:39.496 A:middle
And since all of the internal
apps are doing this adaption,

00:03:40.016 --> 00:03:43.966 A:middle
we will expect third party
apps to do that as well.

00:03:44.786 --> 00:03:48.256 A:middle
So, let's talk briefly about
what it takes to get there.

00:03:48.746 --> 00:03:53.116 A:middle
Well, we can do it by
using built-in labels.

00:03:53.226 --> 00:03:57.776 A:middle
Built-in labels in table
view cells have dynamic fonts

00:03:57.776 --> 00:03:59.876 A:middle
on them automatically in iOS 8.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:00.246 --> 00:04:04.246 A:middle
So, if you're using the text
label, the detail text label,

00:04:04.516 --> 00:04:06.856 A:middle
they have already dynamic fonts

00:04:06.856 --> 00:04:08.856 A:middle
and as the user changes
the text size,

00:04:09.176 --> 00:04:10.636 A:middle
those labels are
going to change size.

00:04:11.616 --> 00:04:14.936 A:middle
If you have your own custom
labels, it's really as simple

00:04:14.936 --> 00:04:19.226 A:middle
as adding a preferred
font to that label.

00:04:19.495 --> 00:04:23.406 A:middle
This is another API that existed
in iOS 7 so it's not new.

00:04:23.776 --> 00:04:26.456 A:middle
We're just expecting
everyone to use it now.

00:04:26.456 --> 00:04:29.736 A:middle
So, simply changing
your font from something

00:04:29.736 --> 00:04:31.786 A:middle
that may have been, you
know, setting a font

00:04:31.786 --> 00:04:35.386 A:middle
of a particular size to
instead using a preferred font,

00:04:36.226 --> 00:04:38.396 A:middle
you now have Dynamic
Type in your label.

00:04:39.246 --> 00:04:42.366 A:middle
But that brings in
a wrinkle to things

00:04:42.836 --> 00:04:48.536 A:middle
and that wrinkle is now things
are dynamic and it's dynamic

00:04:48.616 --> 00:04:51.696 A:middle
because of the size of the
text that can change based

00:04:51.696 --> 00:04:52.696 A:middle
on what the user has set.

00:04:53.276 --> 00:04:57.726 A:middle
So, if we think of simple
table views like Settings

00:04:58.106 --> 00:05:01.346 A:middle
or like Messages-- I guess
that Notes actually--


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.106 --> 00:05:01.346 A:middle
or like Messages-- I guess
that Notes actually--

00:05:01.786 --> 00:05:08.166 A:middle
Messages and Mail or Contacts,
these are all simple table views

00:05:08.166 --> 00:05:12.866 A:middle
that in iOS 7, the row height
was known at build time.

00:05:12.866 --> 00:05:14.976 A:middle
You could say, hey,
that's a 44-point high row

00:05:14.976 --> 00:05:16.456 A:middle
and that's always true.

00:05:17.196 --> 00:05:19.636 A:middle
But on iOS 8, that's not true.

00:05:19.766 --> 00:05:24.026 A:middle
A user changes their text size,
all of those row heights change.

00:05:24.466 --> 00:05:29.856 A:middle
So, even the simplest of table
views from iOS 7 now need

00:05:29.906 --> 00:05:33.216 A:middle
to think about being
dynamic in iOS 8.

00:05:34.196 --> 00:05:37.416 A:middle
So we have a few strategies
to achieve dynamism.

00:05:37.466 --> 00:05:41.976 A:middle
One is the simplest case.

00:05:42.276 --> 00:05:45.696 A:middle
If you're like one of those very
simple table views that we saw

00:05:46.016 --> 00:05:50.616 A:middle
on the previous page, then you
can use the already existing

00:05:50.616 --> 00:05:52.266 A:middle
property rowHeight.

00:05:53.166 --> 00:05:56.346 A:middle
And even though you're dynamic,
you can still use that property

00:05:56.636 --> 00:05:58.966 A:middle
because when the
text size changes,

00:05:58.966 --> 00:06:02.056 A:middle
when you get a new height,
you can change the value


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.966 --> 00:06:02.056 A:middle
when you get a new height,
you can change the value

00:06:02.056 --> 00:06:04.696 A:middle
of that property to
something different.

00:06:05.116 --> 00:06:11.626 A:middle
And in fact, this strategy has
an advantage if you truly are,

00:06:11.716 --> 00:06:16.056 A:middle
you know, a known height that
will be the same for each cell

00:06:16.546 --> 00:06:18.776 A:middle
because if you can
set this property

00:06:18.776 --> 00:06:20.896 A:middle
for all same size cells,

00:06:21.256 --> 00:06:23.946 A:middle
then you'll get the best
scrolling performance possible

00:06:24.156 --> 00:06:26.346 A:middle
because no calculations
need to be done

00:06:26.786 --> 00:06:28.796 A:middle
on the fly while scrolling.

00:06:30.156 --> 00:06:32.856 A:middle
The next strategy is something
you're probably all familiar

00:06:32.856 --> 00:06:35.886 A:middle
with for using dynamic-sized
cells

00:06:36.356 --> 00:06:38.296 A:middle
and that's implementing
the delegate method,

00:06:38.636 --> 00:06:39.786 A:middle
tableView:heightForRow

00:06:39.786 --> 00:06:40.436 A:middle
AtIndexPath.

00:06:41.216 --> 00:06:45.216 A:middle
That strategy is still valid and
something you can use in iOS 8

00:06:45.216 --> 00:06:50.206 A:middle
if you'd like to size your cells
one at a time, give a height

00:06:50.206 --> 00:06:53.826 A:middle
for each row, you
can still do that.

00:06:54.336 --> 00:06:56.986 A:middle
Of course, the disadvantage
to this

00:06:57.246 --> 00:07:01.726 A:middle
and why we wanted something
new is that if you implement


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.246 --> 00:07:01.726 A:middle
and why we wanted something
new is that if you implement

00:07:01.726 --> 00:07:04.646 A:middle
that delegate method, all of
your row heights are asked

00:07:04.926 --> 00:07:07.546 A:middle
for upfront when
the table is loaded.

00:07:07.816 --> 00:07:11.926 A:middle
Even if you have 20,000
rows, we're going to ask

00:07:11.926 --> 00:07:14.966 A:middle
for the height of all of those
rows when we load the table.

00:07:14.966 --> 00:07:17.926 A:middle
And of course, no cells
have yet been created

00:07:17.926 --> 00:07:20.116 A:middle
so your delegate
needs to understand,

00:07:20.236 --> 00:07:25.096 A:middle
without creating cells, what
height to make those cells based

00:07:25.096 --> 00:07:27.556 A:middle
on your content, and that's been
the challenge up to this point.

00:07:28.626 --> 00:07:31.026 A:middle
So that's why we have
the third strategy

00:07:31.306 --> 00:07:32.856 A:middle
which is self-sizing cells.

00:07:33.516 --> 00:07:38.166 A:middle
[ Applause ]

00:07:38.666 --> 00:07:41.886 A:middle
So, let's talk a little bit
about, you know, why this is

00:07:41.976 --> 00:07:44.176 A:middle
and why, you know,
this is a big deal?

00:07:44.356 --> 00:07:48.426 A:middle
If we take a simple table cell
like that in Mail, there's a lot

00:07:48.426 --> 00:07:51.886 A:middle
of parameters around
sizing the cell.

00:07:52.776 --> 00:07:54.896 A:middle
We, you know, we
look at this and OK,

00:07:54.896 --> 00:07:56.286 A:middle
there's actually a
lot going on here.

00:07:56.546 --> 00:07:58.136 A:middle
There are three different fonts.

00:07:58.646 --> 00:08:01.606 A:middle
And in order to size the cell
correctly, we need to know


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.646 --> 00:08:01.606 A:middle
And in order to size the cell
correctly, we need to know

00:08:01.606 --> 00:08:04.226 A:middle
about the size of all of those
fonts and how big they draw.

00:08:05.006 --> 00:08:09.906 A:middle
Additionally, there are
margins between the texts.

00:08:10.366 --> 00:08:12.046 A:middle
We need to know how
big those margins are

00:08:12.046 --> 00:08:13.166 A:middle
and there are several of them.

00:08:13.456 --> 00:08:14.986 A:middle
So we have to know
these fonts and we have

00:08:14.986 --> 00:08:15.846 A:middle
to know these margins.

00:08:16.526 --> 00:08:18.336 A:middle
That's a lot of knowledge
if we were

00:08:18.336 --> 00:08:20.666 A:middle
to do dynamic sizing
in the delegate.

00:08:21.566 --> 00:08:25.426 A:middle
So, in 8, I'll show you how
things work and I'll get

00:08:25.426 --> 00:08:28.346 A:middle
out of the way so you
can really see this.

00:08:28.976 --> 00:08:31.186 A:middle
Imagine that we've got
a few rows on screen,

00:08:32.086 --> 00:08:35.586 A:middle
and then we've got a fourth
row that's not yet on screen.

00:08:36.566 --> 00:08:39.885 A:middle
In iOS 8, if you're using
self-sizing cells, and in fact,

00:08:40.336 --> 00:08:43.186 A:middle
part of this is going to
be using the iOS 7 API

00:08:43.826 --> 00:08:46.846 A:middle
which is giving an
estimated height for a row,

00:08:46.846 --> 00:08:48.226 A:middle
something we introduced
last year.

00:08:48.656 --> 00:08:51.096 A:middle
So that fourth row is going

00:08:51.096 --> 00:08:53.606 A:middle
to be sized using an estimated
height that you provide,

00:08:53.796 --> 00:08:56.666 A:middle
either via the property
estimated height

00:08:57.186 --> 00:08:59.086 A:middle
or there's a delegate
method for that, too.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.086 --> 00:09:04.196 A:middle
Now, when you scroll or when
you use the scrolls rather,

00:09:05.036 --> 00:09:10.346 A:middle
at that time, we need to
bring on screen row 4,

00:09:10.566 --> 00:09:12.866 A:middle
which up to this point only
has an estimated height.

00:09:13.196 --> 00:09:17.156 A:middle
So at that time, we
will create the cell.

00:09:17.356 --> 00:09:21.386 A:middle
After creating it, we will ask
the cell how big it should be.

00:09:22.656 --> 00:09:25.396 A:middle
Then, we use that
size if it's different

00:09:25.396 --> 00:09:26.686 A:middle
from the estimated size

00:09:27.286 --> 00:09:30.626 A:middle
to adjust the content
size of the table view.

00:09:31.706 --> 00:09:34.846 A:middle
And only then after we've
adjusted the content size

00:09:34.846 --> 00:09:36.146 A:middle
and taken the size
from the cell,

00:09:36.576 --> 00:09:39.896 A:middle
do we actually put
that cell on screen.

00:09:40.436 --> 00:09:44.366 A:middle
And so, what you
probably all want

00:09:44.366 --> 00:09:47.496 A:middle
to know is what happens
in step 2?

00:09:47.746 --> 00:09:48.986 A:middle
How do we actually
size the cell?

00:09:48.986 --> 00:09:50.736 A:middle
So, we're going to
talk about that now.

00:09:51.106 --> 00:09:54.086 A:middle
And there are two ways that
you can communicate information

00:09:54.086 --> 00:09:57.816 A:middle
about how big your cell is from
the cell back to the table view

00:09:58.026 --> 00:10:00.486 A:middle
so that we can get
you the right thing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.026 --> 00:10:00.486 A:middle
so that we can get
you the right thing.

00:10:00.846 --> 00:10:03.826 A:middle
And number 1 is you
can use Autolayout.

00:10:04.516 --> 00:10:08.886 A:middle
[ Applause ]

00:10:09.386 --> 00:10:12.096 A:middle
If you're already using
Autolayout, and I know that many

00:10:12.096 --> 00:10:15.116 A:middle
of you are, you may essentially
have to do nothing here.

00:10:15.376 --> 00:10:19.626 A:middle
Your constraints, if they
already determined unambiguously

00:10:19.946 --> 00:10:23.846 A:middle
the size of the cell, then we
will just use those constraints.

00:10:24.736 --> 00:10:28.756 A:middle
In fact, the way that we've
implemented this in iOS 8 is

00:10:28.756 --> 00:10:32.276 A:middle
that table view calls
systemLayoutSizeFittingSize

00:10:33.136 --> 00:10:33.856 A:middle
on your cell.

00:10:34.526 --> 00:10:37.786 A:middle
And systemLayoutSizeFittingSize
is smart enough to understand

00:10:38.246 --> 00:10:41.356 A:middle
if you've implemented
constraints in your cell

00:10:41.766 --> 00:10:45.036 A:middle
and if so, the Autolayout
engine delivers the size.

00:10:45.886 --> 00:10:48.656 A:middle
And if you haven't implemented
Autolayout constraints,

00:10:49.166 --> 00:10:53.226 A:middle
systemLayoutSizeFittingSize
calls sizeThatFits.

00:10:53.226 --> 00:10:57.826 A:middle
And then, you can simply
return a size manually based

00:10:57.826 --> 00:10:59.326 A:middle
on your own logic.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.246 --> 00:11:03.456 A:middle
So by adding sizeThatFits,
you don't have

00:11:03.516 --> 00:11:05.406 A:middle
to use Autolayout if
you don't want to.

00:11:05.646 --> 00:11:07.906 A:middle
If you are using Autolayout
as it notes up there,

00:11:08.166 --> 00:11:11.476 A:middle
you want to add your constraints
to the content view of the cell.

00:11:12.656 --> 00:11:15.596 A:middle
You always think about
whatever content you have goes

00:11:15.596 --> 00:11:16.756 A:middle
in the cells content view.

00:11:17.266 --> 00:11:20.546 A:middle
And this plays into
what the API contract is

00:11:20.886 --> 00:11:25.276 A:middle
when we are sizing your cell
because there's sort of a--

00:11:25.976 --> 00:11:27.586 A:middle
there's an in and out situation.

00:11:28.116 --> 00:11:30.516 A:middle
The in to your cell is a width

00:11:31.266 --> 00:11:33.756 A:middle
and that width is the
width of the content view.

00:11:34.756 --> 00:11:39.196 A:middle
What your cell returns is the
height of the content view.

00:11:39.846 --> 00:11:43.636 A:middle
So, when you're implementing
sizeThatFits, for example,

00:11:43.886 --> 00:11:47.036 A:middle
the size that we send you
will have the resolved width,

00:11:47.036 --> 00:11:48.996 A:middle
what the width of the
content view is going to be.

00:11:49.246 --> 00:11:52.696 A:middle
And then, the value that you
return has a resolved height.

00:11:53.016 --> 00:11:55.426 A:middle
And even still with your
constraints, you should think

00:11:55.426 --> 00:11:58.636 A:middle
about how you build your
constraints as assuming

00:11:58.636 --> 00:12:01.796 A:middle
that you've got a width,
the content view has a width


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.636 --> 00:12:01.796 A:middle
that you've got a width,
the content view has a width

00:12:01.796 --> 00:12:04.476 A:middle
and that was predetermined
by the table view based

00:12:04.476 --> 00:12:06.696 A:middle
on how wide the table
view is, you know,

00:12:06.696 --> 00:12:08.466 A:middle
whether you have an image
view or accessory views

00:12:08.496 --> 00:12:10.396 A:middle
that will make us
shrink the content view.

00:12:11.056 --> 00:12:12.556 A:middle
And then from that width,

00:12:12.816 --> 00:12:15.076 A:middle
your constraints
define a height based

00:12:15.076 --> 00:12:17.266 A:middle
on the content that you have.

00:12:17.756 --> 00:12:20.266 A:middle
So I'd like to spend the
rest of the time, well,

00:12:20.266 --> 00:12:23.656 A:middle
actually the table view time,
telling you or showing you

00:12:23.656 --> 00:12:26.376 A:middle
in code how to actually do this.

00:12:26.916 --> 00:12:30.916 A:middle
We're going to see that this
is quite simple at its base

00:12:31.546 --> 00:12:36.076 A:middle
but I also kind of want
to run through gotchas

00:12:36.566 --> 00:12:40.376 A:middle
that you might run into,
that other people have run

00:12:40.376 --> 00:12:45.076 A:middle
into in the past so that you
can kind of keep the idea

00:12:45.076 --> 00:12:47.966 A:middle
in your head that, hey, this
is simple, but if I go back

00:12:48.036 --> 00:12:50.266 A:middle
to my hotel or if I
go back to my company

00:12:50.316 --> 00:12:52.556 A:middle
and I start implementing
this and it just doesn't seem

00:12:52.556 --> 00:12:55.376 A:middle
to work, come back
and watch this video

00:12:55.776 --> 00:12:59.056 A:middle
because there's a good chance
I will have covered what is

00:12:59.056 --> 00:13:02.976 A:middle
causing your code to not do
what you think it's going to do.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.056 --> 00:13:02.976 A:middle
causing your code to not do
what you think it's going to do.

00:13:03.886 --> 00:13:10.946 A:middle
So let's start off
by going to Settings

00:13:11.246 --> 00:13:13.256 A:middle
and looking at our Text Size.

00:13:13.256 --> 00:13:16.766 A:middle
Right now, I've got it set
to be the smallest thing.

00:13:17.326 --> 00:13:19.956 A:middle
I'll just put it to regular.

00:13:21.526 --> 00:13:25.456 A:middle
And this application I've got
right now just has a very simple

00:13:25.456 --> 00:13:29.406 A:middle
table view and it
doesn't do a whole lot.

00:13:29.406 --> 00:13:34.746 A:middle
It just has a one-line
text label in cells

00:13:34.746 --> 00:13:38.926 A:middle
that are all predetermined
to be 44 points tall.

00:13:40.026 --> 00:13:45.736 A:middle
So, one thing about this that
is interesting, if I'm on iOS 8,

00:13:45.736 --> 00:13:50.866 A:middle
is you take a look at that
and if I change my text size

00:13:51.806 --> 00:14:00.866 A:middle
and I bring it all the way
up, then run the app again.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:51.806 --> 00:14:00.866 A:middle
and I bring it all the way
up, then run the app again.

00:14:01.076 --> 00:14:03.356 A:middle
You see nothing changes
and that's the problem.

00:14:03.536 --> 00:14:05.646 A:middle
We want something
to change on iOS 8.

00:14:05.906 --> 00:14:09.046 A:middle
We want our app to be adaptive
to what the user wants.

00:14:10.086 --> 00:14:13.936 A:middle
So, since in this case
I'm using a custom label

00:14:14.396 --> 00:14:16.196 A:middle
that I've called
headlineLabel here.

00:14:16.356 --> 00:14:19.076 A:middle
I create it right in
my cells initializer.

00:14:19.626 --> 00:14:23.916 A:middle
The problem is that I have
set the headline labels font

00:14:24.176 --> 00:14:25.666 A:middle
to be a specific size.

00:14:26.536 --> 00:14:31.236 A:middle
And actually what I want is to
use a dynamic if I typed font.

00:14:31.646 --> 00:14:35.606 A:middle
And so I'll just change this to
preferred font for text style,

00:14:36.976 --> 00:14:41.576 A:middle
UIFontTextStyleHeadline
is perfect.

00:14:41.646 --> 00:14:45.846 A:middle
And if I run that now, we'll see

00:14:45.846 --> 00:14:48.506 A:middle
that the text did get
bigger and that's great.

00:14:48.506 --> 00:14:50.556 A:middle
It adapted to what
the user wanted.

00:14:50.866 --> 00:14:53.926 A:middle
But this looks a
little weird now

00:14:54.126 --> 00:14:57.946 A:middle
because the cells are the same
size that they were before

00:14:57.946 --> 00:15:01.686 A:middle
and I want the cells to
grow along with the text


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:57.946 --> 00:15:01.686 A:middle
and I want the cells to
grow along with the text

00:15:02.466 --> 00:15:06.756 A:middle
because if I have giant texts,
small cells, things are weird.

00:15:08.226 --> 00:15:18.086 A:middle
So, what I'm going to do is
use constraints via Autolayout

00:15:18.276 --> 00:15:19.596 A:middle
and I've got a whole
bunch of them here,

00:15:19.596 --> 00:15:20.856 A:middle
I'm going to walk through them.

00:15:21.586 --> 00:15:25.906 A:middle
We could do this in Interface
Builder as well but I thought

00:15:26.226 --> 00:15:27.796 A:middle
if we walk through this in code,

00:15:27.796 --> 00:15:31.586 A:middle
it will cause a little
bit more understanding

00:15:31.586 --> 00:15:33.336 A:middle
about what we're actually doing.

00:15:33.666 --> 00:15:37.326 A:middle
So, I have 4 sets of
constraint logic here.

00:15:37.786 --> 00:15:42.536 A:middle
What I'm doing with this first
one is setting what happens

00:15:42.766 --> 00:15:43.636 A:middle
at the top.

00:15:43.636 --> 00:15:46.436 A:middle
I'm setting some spacing
at the top of my label.

00:15:46.756 --> 00:15:52.956 A:middle
So I'm saying that the first
baseline is equal to the top

00:15:52.956 --> 00:15:57.476 A:middle
of the content view plus a
constant and a multiplier.

00:15:58.056 --> 00:15:59.556 A:middle
And the reason that I, you know,

00:15:59.556 --> 00:16:01.806 A:middle
I've picked these values
somewhat arbitrarily,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.556 --> 00:16:01.806 A:middle
I've picked these values
somewhat arbitrarily,

00:16:02.156 --> 00:16:05.296 A:middle
but the reason that there's a
multiplier is I want the space

00:16:05.346 --> 00:16:11.016 A:middle
between the first baseline and
the top to grow not simply equal

00:16:11.016 --> 00:16:15.466 A:middle
to the growth of the
font but I want it

00:16:15.516 --> 00:16:20.096 A:middle
to grow a little bit more so
that we get even more space

00:16:20.226 --> 00:16:24.156 A:middle
between the top of the text
in the top as the font grows.

00:16:24.686 --> 00:16:28.116 A:middle
So then I do something
very similar,

00:16:29.016 --> 00:16:31.876 A:middle
setting a padding at the bottom.

00:16:31.986 --> 00:16:35.256 A:middle
So that's just setting
in attribute bottom

00:16:35.426 --> 00:16:40.236 A:middle
for my content view to be
based off of the last baseline

00:16:40.596 --> 00:16:45.896 A:middle
of the label, again, with sort
of a constant that I just picked

00:16:46.516 --> 00:16:50.436 A:middle
and a multiplier for the same
reason I have a multiplier

00:16:50.826 --> 00:16:51.646 A:middle
up here again.

00:16:51.916 --> 00:16:53.686 A:middle
These values are
not magic values.

00:16:53.686 --> 00:16:56.366 A:middle
They're largely values that
I picked out of thin air.

00:16:56.796 --> 00:17:00.186 A:middle
So that gives me
padding at the top


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:56.796 --> 00:17:00.186 A:middle
So that gives me
padding at the top

00:17:00.426 --> 00:17:02.276 A:middle
and the bottom of my content.

00:17:02.336 --> 00:17:05.276 A:middle
And as the content grows, then
I will still have that padding

00:17:05.276 --> 00:17:08.826 A:middle
and the cell will
actually grow with it.

00:17:09.556 --> 00:17:11.626 A:middle
The last thing I did here

00:17:11.626 --> 00:17:14.685 A:middle
for height is I wanted
to have a minimum.

00:17:14.866 --> 00:17:16.695 A:middle
The human interface
guideline says,

00:17:16.695 --> 00:17:18.935 A:middle
"We want to have touchable
things like table views be

00:17:18.935 --> 00:17:20.746 A:middle
at least 44 point tall."

00:17:21.386 --> 00:17:23.415 A:middle
So, I've set a constraint
that says,

00:17:23.415 --> 00:17:26.965 A:middle
"I want my content view's height
to be greater than or equal

00:17:26.965 --> 00:17:29.996 A:middle
to 44," simple as that.

00:17:29.996 --> 00:17:32.746 A:middle
So even if the text
size gets very small,

00:17:32.916 --> 00:17:34.546 A:middle
I actually still want
to keep the cell to be

00:17:34.546 --> 00:17:38.246 A:middle
at least 44 points tall to meet
the human interface guideline.

00:17:39.376 --> 00:17:42.166 A:middle
For the horizontal axis,

00:17:42.696 --> 00:17:47.086 A:middle
I've just used a simple
visual format language to say

00:17:47.366 --> 00:17:51.646 A:middle
that I want 15 point margins
around my headlineLabel

00:17:52.146 --> 00:17:53.696 A:middle
and I'm just adding
those to the array.

00:17:53.816 --> 00:17:56.556 A:middle
I had all those constraints
in my content view.

00:17:56.556 --> 00:17:59.846 A:middle
And now that I've done that,

00:17:59.846 --> 00:18:04.836 A:middle
let's run it and
see what happens.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.846 --> 00:18:04.836 A:middle
let's run it and
see what happens.

00:18:05.486 --> 00:18:09.096 A:middle
Well, it actually
looks the same.

00:18:09.316 --> 00:18:12.136 A:middle
And, I have something
really scary here.

00:18:12.676 --> 00:18:16.806 A:middle
I have a bunch of Autolayout
constraints failing messages.

00:18:17.516 --> 00:18:24.926 A:middle
[ Applause ]

00:18:25.426 --> 00:18:27.686 A:middle
Thankfully, there is a solution.

00:18:29.306 --> 00:18:34.176 A:middle
So, I mentioned this
earlier but part of being--

00:18:34.526 --> 00:18:38.416 A:middle
or self-sizing cell
aware and using

00:18:38.416 --> 00:18:40.146 A:middle
that in your application is

00:18:40.146 --> 00:18:44.016 A:middle
that you use row
height estimation rather

00:18:44.016 --> 00:18:46.946 A:middle
than literal row heights
in your table view.

00:18:47.446 --> 00:18:50.626 A:middle
So if we look at my
ViewController, in viewDidLoad,

00:18:51.006 --> 00:18:53.516 A:middle
previously I was setting
the row height to 44.

00:18:54.166 --> 00:18:56.906 A:middle
Well, if we do that and
we have self-sizing cells,

00:18:57.726 --> 00:18:59.106 A:middle
the self-sizing doesn't kick

00:18:59.266 --> 00:19:02.376 A:middle
in because I've said row
height is 44 and that's sort


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.266 --> 00:19:02.376 A:middle
in because I've said row
height is 44 and that's sort

00:19:02.376 --> 00:19:03.796 A:middle
of the end-all be-all
for table view.

00:19:05.046 --> 00:19:07.606 A:middle
What I really want
now in iOS 8 is

00:19:08.386 --> 00:19:11.056 A:middle
to set the estimated row height.

00:19:12.266 --> 00:19:14.696 A:middle
So, when you run
into this problem,

00:19:14.696 --> 00:19:17.996 A:middle
try to remember Luke said
use estimated row height,

00:19:18.216 --> 00:19:20.116 A:middle
not row height on iOS 8.

00:19:20.616 --> 00:19:22.856 A:middle
And then when you run this--

00:19:24.166 --> 00:19:27.966 A:middle
oh God, Luke's solution
didn't even work.

00:19:30.846 --> 00:19:33.186 A:middle
Well, so here's one
of the gotcha here

00:19:33.666 --> 00:19:37.766 A:middle
which actually will be
fixed in the next seed,

00:19:38.016 --> 00:19:39.556 A:middle
but I wanted to show you--

00:19:40.516 --> 00:19:43.636 A:middle
[ Applause ]

00:19:44.136 --> 00:19:49.266 A:middle
I wanted to show you so
you don't think I'm a liar

00:19:49.306 --> 00:19:52.696 A:middle
when we go back to your rooms.

00:19:52.696 --> 00:19:56.296 A:middle
So, if your cell or if
your table view is coming

00:19:56.296 --> 00:20:00.446 A:middle
out of a nib or a
storyboard, then it's--


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:56.296 --> 00:20:00.446 A:middle
out of a nib or a
storyboard, then it's--

00:20:01.226 --> 00:20:04.076 A:middle
row height property will
be set when it comes

00:20:04.076 --> 00:20:05.366 A:middle
out of that storyboard.

00:20:07.006 --> 00:20:08.946 A:middle
We want it to be the default.

00:20:08.946 --> 00:20:11.176 A:middle
This is actually the new
default for rowHeight

00:20:11.906 --> 00:20:18.126 A:middle
in iOS 8 is
UITableViewAutomaticDimension.

00:20:18.986 --> 00:20:21.226 A:middle
That means, hey, I
don't have a row height,

00:20:21.556 --> 00:20:24.566 A:middle
figure it out based
on other information.

00:20:24.936 --> 00:20:27.466 A:middle
And this is already the default

00:20:27.576 --> 00:20:30.916 A:middle
for programmatically created
table views and, as of seed 2,

00:20:31.086 --> 00:20:34.346 A:middle
will be the default for
table views that come

00:20:34.346 --> 00:20:36.356 A:middle
out of storyboards
and nibs as well.

00:20:36.756 --> 00:20:40.396 A:middle
It's interesting actually
to know this in general

00:20:40.516 --> 00:20:43.006 A:middle
that this default has-- this
default value has changed

00:20:43.036 --> 00:20:46.736 A:middle
because it used to be 44 and
now it's automatic dimension.

00:20:47.256 --> 00:20:51.266 A:middle
Because if you were doing
math based on the value

00:20:51.266 --> 00:20:55.596 A:middle
of tableViewrowHeight and just
expecting the default value

00:20:55.596 --> 00:20:59.766 A:middle
to be something that is
reasonable to do math on,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.066 --> 00:21:03.126 A:middle
that's not true unless
you have actually set the

00:21:03.126 --> 00:21:04.046 A:middle
rowHeight value.

00:21:04.746 --> 00:21:07.656 A:middle
So, if you run into
weird things like all

00:21:07.656 --> 00:21:11.206 A:middle
of your table cells
suddenly shrunk to no width

00:21:11.466 --> 00:21:15.086 A:middle
or no height rather, look
and see if you're doing math

00:21:15.526 --> 00:21:16.666 A:middle
with the rowHeight property.

00:21:17.126 --> 00:21:24.716 A:middle
So, now that I've done that--
oh, thank God, no more weird,

00:21:24.806 --> 00:21:26.126 A:middle
layout constraint messages.

00:21:26.126 --> 00:21:29.656 A:middle
And actually, my cells
have grown a bit.

00:21:29.656 --> 00:21:33.216 A:middle
They look more natural
for this text size.

00:21:34.236 --> 00:21:38.566 A:middle
So now that that is true,
there's something else

00:21:38.566 --> 00:21:46.246 A:middle
that I can do here, and that is
go back to my cell and I want

00:21:46.816 --> 00:21:51.516 A:middle
to make those labels which
are all clipping off the end

00:21:51.516 --> 00:21:54.656 A:middle
of the screen not
do that anymore.

00:21:56.136 --> 00:22:03.116 A:middle
So, let me take headlineLabel,
numberOfLines,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:56.136 --> 00:22:03.116 A:middle
So, let me take headlineLabel,
numberOfLines,

00:22:03.686 --> 00:22:10.306 A:middle
make it 0 so it should grow the
height of the label according

00:22:10.306 --> 00:22:12.026 A:middle
to the content that's in it.

00:22:12.936 --> 00:22:18.586 A:middle
If I run that now, now my cells
all become the right size based

00:22:18.586 --> 00:22:21.986 A:middle
on this content that's in them.

00:22:23.191 --> 00:22:25.191 A:middle
[ Applause ]

00:22:25.366 --> 00:22:26.956 A:middle
And that's it.

00:22:26.956 --> 00:22:29.566 A:middle
I don't have any
delegate methods at all.

00:22:29.566 --> 00:22:31.166 A:middle
I'll prove it to you, nothing.

00:22:32.486 --> 00:22:34.406 A:middle
Except for
cellForRowAtIndexPath, I mean,

00:22:34.496 --> 00:22:36.156 A:middle
got to have that, right?

00:22:36.546 --> 00:22:37.596 A:middle
So that's it.

00:22:38.696 --> 00:22:43.286 A:middle
That's all you need to
know to migrate your table

00:22:44.886 --> 00:22:49.946 A:middle
from an iOS 7 style table
to an iOS 8 style table.

00:22:50.416 --> 00:22:53.256 A:middle
And I encourage you to go do
this right away because you want

00:22:53.256 --> 00:22:55.576 A:middle
to be ready by the
time we shift iOS 8

00:22:55.576 --> 00:22:59.526 A:middle
to have your fully adaptive apps
that respond to Dynamic Type

00:22:59.846 --> 00:23:01.746 A:middle
and are just fabulous for users.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.846 --> 00:23:01.746 A:middle
and are just fabulous for users.

00:23:02.086 --> 00:23:05.486 A:middle
So that's table view in
iOS 8 and we're going

00:23:05.486 --> 00:23:07.576 A:middle
to spend the rest
of this talk talking

00:23:07.576 --> 00:23:10.496 A:middle
about collection view features
that I mentioned earlier.

00:23:10.786 --> 00:23:16.116 A:middle
And Olivier Gutknecht will come
up to enlighten us as it were.

00:23:17.516 --> 00:23:21.336 A:middle
[ Applause ]

00:23:21.836 --> 00:23:23.096 A:middle
&gt;&gt; Thank you.

00:23:23.366 --> 00:23:27.086 A:middle
Hi, my name is Olivier Gutknecht
and I love collection views.

00:23:27.726 --> 00:23:33.736 A:middle
So today, we have
two new features

00:23:34.356 --> 00:23:35.466 A:middle
in collection view for you.

00:23:36.686 --> 00:23:39.976 A:middle
So first one, of course,
is self-sizing cells.

00:23:41.296 --> 00:23:44.436 A:middle
We added that to table
view and, of course,

00:23:44.436 --> 00:23:47.976 A:middle
we had to enhance
collection view

00:23:47.976 --> 00:23:50.126 A:middle
to support self-sizing cells.

00:23:50.766 --> 00:23:58.376 A:middle
But collection view is quite a
generic class and a key thing

00:23:58.376 --> 00:24:03.216 A:middle
in collection view is you can
actually build your own layout.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.376 --> 00:24:03.216 A:middle
in collection view is you can
actually build your own layout.

00:24:04.496 --> 00:24:07.896 A:middle
And when we implemented
the self-sizing cells,

00:24:08.886 --> 00:24:12.046 A:middle
we added a new infrastructure
to do that.

00:24:13.056 --> 00:24:15.696 A:middle
And what we wanted to
do is to actually open

00:24:15.696 --> 00:24:18.016 A:middle
that for your custom layouts.

00:24:18.996 --> 00:24:21.066 A:middle
So if you have a custom layout,

00:24:21.566 --> 00:24:25.246 A:middle
you can actually implement
the same self-sizing cells

00:24:25.316 --> 00:24:29.266 A:middle
techniques we have in
all different layout.

00:24:31.096 --> 00:24:37.116 A:middle
So, self-sizing cells, we
think it's a major new feature

00:24:37.536 --> 00:24:40.616 A:middle
in collection view because
with self-sizing cells,

00:24:40.676 --> 00:24:43.846 A:middle
you can support easily
Dynamic Type.

00:24:44.616 --> 00:24:48.836 A:middle
We're making that available
in UICollectionViewFlowLayout

00:24:49.506 --> 00:24:55.176 A:middle
which is our default
layout we provide in UIKit.

00:24:56.456 --> 00:25:01.126 A:middle
And it's really for
your own custom layouts.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:56.456 --> 00:25:01.126 A:middle
And it's really for
your own custom layouts.

00:25:02.316 --> 00:25:09.756 A:middle
But first, I'd like to do a very
quick demo of self-sizing cell

00:25:10.266 --> 00:25:12.316 A:middle
in UICollectionViewFlowLayout.

00:25:12.316 --> 00:25:18.916 A:middle
So, this is a very
simple collection view.

00:25:20.336 --> 00:25:23.496 A:middle
I actually tried to make
that simpler but I couldn't.

00:25:23.496 --> 00:25:30.026 A:middle
So, it's a flow layout and
we just set the item size

00:25:30.686 --> 00:25:35.016 A:middle
of all elements of the
screen to be the same CGSize.

00:25:35.626 --> 00:25:38.706 A:middle
So we don't even
have a delegate.

00:25:39.746 --> 00:25:43.036 A:middle
We just used the
itemSize property

00:25:43.556 --> 00:25:45.196 A:middle
on UICollectionViewFlowLayout

00:25:46.216 --> 00:25:52.476 A:middle
and UICollectionViewCells
here are extremely simple.

00:25:52.476 --> 00:25:55.276 A:middle
It's basically just a label

00:25:55.276 --> 00:25:57.586 A:middle
and everything is
sized the same way.

00:25:58.526 --> 00:26:01.766 A:middle
So, of course, it's not great.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.526 --> 00:26:01.766 A:middle
So, of course, it's not great.

00:26:02.806 --> 00:26:08.586 A:middle
And when you want to actually
adjust your item size based

00:26:08.586 --> 00:26:12.886 A:middle
on the content of that cell, you
can actually do that right now.

00:26:13.626 --> 00:26:15.496 A:middle
You have to implement a delegate

00:26:16.046 --> 00:26:17.596 A:middle
on the
UICollectionViewFlowLayout

00:26:17.596 --> 00:26:22.196 A:middle
to compute the correct
size for a given item

00:26:23.116 --> 00:26:26.376 A:middle
and then the cell
is going to be sized

00:26:26.966 --> 00:26:29.576 A:middle
with what the layout returns.

00:26:29.976 --> 00:26:32.666 A:middle
But it's a bit inconvenient.

00:26:33.596 --> 00:26:37.876 A:middle
Because basically in your
data source, in your delegate,

00:26:38.526 --> 00:26:41.966 A:middle
you have to compute a size based

00:26:41.966 --> 00:26:44.876 A:middle
on the font you're going
to use in this label.

00:26:45.726 --> 00:26:50.366 A:middle
And then, your cell is
implemented with the label.

00:26:50.366 --> 00:26:55.506 A:middle
So, you're basically duplicating
code and that's not great.

00:26:55.556 --> 00:27:00.536 A:middle
So, what I'm going to
do now is I'm going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:55.556 --> 00:27:00.536 A:middle
So, what I'm going to
do now is I'm going

00:27:00.536 --> 00:27:02.386 A:middle
to use the exact
same collection view

00:27:02.546 --> 00:27:05.506 A:middle
to same flow layout,
to same cell class.

00:27:06.206 --> 00:27:09.626 A:middle
I'm not going to change
to a different layout.

00:27:10.486 --> 00:27:14.086 A:middle
I'm just going to
enable self-sizing cells

00:27:14.846 --> 00:27:16.556 A:middle
on UICollectionViewFlowLayout.

00:27:17.146 --> 00:27:20.126 A:middle
And that's what we have.

00:27:20.986 --> 00:27:22.846 A:middle
It's dynamically sized.

00:27:24.306 --> 00:27:28.156 A:middle
The flow layout still
worked the same usual way

00:27:28.406 --> 00:27:34.116 A:middle
by dynamically flowing
adding cells line by line

00:27:35.166 --> 00:27:38.126 A:middle
and it's a new feature in
UICollectionViewFlowLayout.

00:27:38.446 --> 00:27:40.936 A:middle
The only thing you have to do is

00:27:40.936 --> 00:27:45.106 A:middle
to have your cell class
implemented with Autolayout

00:27:45.836 --> 00:27:47.416 A:middle
or using sizeThatFits.

00:27:52.516 --> 00:27:57.196 A:middle
[ Applause ]

00:27:57.696 --> 00:28:03.306 A:middle
So, how do you size cells
with UICollectionView?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.696 --> 00:28:03.306 A:middle
So, how do you size cells
with UICollectionView?

00:28:05.096 --> 00:28:09.226 A:middle
The usual way, the classic
way to size items on screen

00:28:10.496 --> 00:28:11.756 A:middle
with the collection view is

00:28:11.756 --> 00:28:15.986 A:middle
to actually have the
layout compute items,

00:28:16.556 --> 00:28:18.226 A:middle
size and position on screen.

00:28:18.896 --> 00:28:24.066 A:middle
So in that case-- and that was
what was happening with iOS 6

00:28:24.116 --> 00:28:31.226 A:middle
and iOS 7, the collection view
layout decides everything.

00:28:32.366 --> 00:28:36.896 A:middle
The cell is just-- We are just
enforcing a size for this cell.

00:28:38.256 --> 00:28:44.146 A:middle
So, in iOS 8, we're adding
these self-sizing cells mode

00:28:44.836 --> 00:28:48.546 A:middle
which mean that just
like with table view,

00:28:49.206 --> 00:28:53.326 A:middle
you can actually use constraints
on your cell content view.

00:28:54.086 --> 00:28:57.856 A:middle
Or, if you are using
manual layout, you just have

00:28:57.886 --> 00:28:59.826 A:middle
to override sizeThatFits.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:01.856 --> 00:29:07.386 A:middle
But when setting cells on
screen with a collection view,

00:29:08.466 --> 00:29:12.006 A:middle
a layout basically computes
a set of attributes.

00:29:12.616 --> 00:29:18.226 A:middle
And in these attributes, we have
position, size, but only things

00:29:18.226 --> 00:29:20.906 A:middle
like alpha are even transformed.

00:29:22.186 --> 00:29:27.616 A:middle
And we are actually opening
that also at the cell level.

00:29:28.516 --> 00:29:32.976 A:middle
It mean that if you override
preferredLayoutAttributes

00:29:34.096 --> 00:29:39.146 A:middle
FittingAttributes in your cell
class, you can actually tweak

00:29:40.256 --> 00:29:42.886 A:middle
or the layout itself compute it.

00:29:43.746 --> 00:29:45.036 A:middle
It's extremely powerful.

00:29:45.246 --> 00:29:49.326 A:middle
So, to summarize,
the first mode,

00:29:50.116 --> 00:29:53.066 A:middle
the classic mode,
the layout, the size.

00:29:53.856 --> 00:29:56.016 A:middle
Computes attributes and the
collection view is going

00:29:56.016 --> 00:29:59.726 A:middle
to create a cell and
enforce that size.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.936 --> 00:30:03.986 A:middle
The second mode is
the layout is going

00:30:03.986 --> 00:30:08.766 A:middle
to compute an approximation,
provide attributes.

00:30:09.766 --> 00:30:12.776 A:middle
The collection view is
going to do the usual thing

00:30:12.776 --> 00:30:18.006 A:middle
if you create cell and
then the cell is going

00:30:18.006 --> 00:30:21.186 A:middle
to adjust if needed, that size.

00:30:21.796 --> 00:30:29.446 A:middle
And the third mode, the layout
again estimate the attributes

00:30:30.376 --> 00:30:34.646 A:middle
but then the cell can
actually tweak any property

00:30:35.476 --> 00:30:38.016 A:middle
on the layout attributes
including transform.

00:30:39.516 --> 00:30:44.976 A:middle
[ Applause ]

00:30:45.476 --> 00:30:48.866 A:middle
So, we are making that
available as a new feature

00:30:48.866 --> 00:30:51.466 A:middle
of UICollectionViewFlowLayout.

00:30:52.146 --> 00:30:56.426 A:middle
How can you use that?

00:30:57.046 --> 00:30:59.136 A:middle
It's actually easy.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.406 --> 00:31:03.136 A:middle
Step one, we have
a new property.

00:31:04.326 --> 00:31:06.566 A:middle
It's estimatedItemSize.

00:31:07.846 --> 00:31:13.096 A:middle
Because on collection view
we're really talking about width

00:31:13.096 --> 00:31:15.566 A:middle
and height, it's a CGSize.

00:31:16.596 --> 00:31:18.186 A:middle
But apart from that,

00:31:18.186 --> 00:31:23.396 A:middle
it's basically the same model
Luke described for table views.

00:31:23.956 --> 00:31:26.566 A:middle
How do you enable that?

00:31:27.576 --> 00:31:32.066 A:middle
You just set this property
to a non-zero CGsize.

00:31:32.776 --> 00:31:33.716 A:middle
That was step 1.

00:31:34.216 --> 00:31:38.496 A:middle
Step 2 is there is no step 2.

00:31:39.696 --> 00:31:42.706 A:middle
If you want to use
self-sizing cells

00:31:43.976 --> 00:31:47.046 A:middle
in UICollectionViewFlowLayout,
it's one line.

00:31:48.256 --> 00:31:49.266 A:middle
That was my demo.

00:31:49.386 --> 00:31:55.096 A:middle
I replaced ItemSize with
estimatedItemSize and that's it.

00:31:56.316 --> 00:31:56.946 A:middle
That's pretty cool.

00:31:57.516 --> 00:32:02.666 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.516 --> 00:32:02.666 A:middle
[ Applause ]

00:32:03.166 --> 00:32:09.276 A:middle
Now, I'd like to talk about
how that works and how

00:32:09.276 --> 00:32:13.176 A:middle
that changed things in
the collection view model.

00:32:14.136 --> 00:32:17.446 A:middle
Self-sizing is really
a collaboration

00:32:17.446 --> 00:32:20.766 A:middle
between three things,
the layout,

00:32:21.636 --> 00:32:26.456 A:middle
the collection view
and the cell.

00:32:26.676 --> 00:32:30.886 A:middle
The first thing a flow
layout is going to do is

00:32:31.336 --> 00:32:33.816 A:middle
to compute a first pass,

00:32:34.476 --> 00:32:37.286 A:middle
the first approximation
of your layout.

00:32:38.806 --> 00:32:40.556 A:middle
And based on this
information, what's going

00:32:40.556 --> 00:32:45.216 A:middle
to happen is the
collection view is going

00:32:45.216 --> 00:32:49.296 A:middle
to the queue, create
these cells.

00:32:49.806 --> 00:32:57.386 A:middle
We're going to self-size these
items again using Autolayout

00:32:57.466 --> 00:33:00.736 A:middle
or sizeThatFits or
preferred layout attributes


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:57.466 --> 00:33:00.736 A:middle
or sizeThatFits or
preferred layout attributes

00:33:00.736 --> 00:33:03.596 A:middle
for fitting attributes.

00:33:04.196 --> 00:33:08.866 A:middle
And then, we are
actually sending back

00:33:10.076 --> 00:33:14.066 A:middle
that updated information
to the layout.

00:33:15.136 --> 00:33:21.706 A:middle
The layout can now decide
if it wants to react to that

00:33:21.916 --> 00:33:27.486 A:middle
and actually send the final
layout attributes we need

00:33:27.486 --> 00:33:30.386 A:middle
to actually display
cells on screen.

00:33:31.486 --> 00:33:33.956 A:middle
So, a very important thing

00:33:34.736 --> 00:33:39.136 A:middle
about this model is it's
actually the same model we're

00:33:39.136 --> 00:33:40.946 A:middle
using with collection view.

00:33:41.366 --> 00:33:46.156 A:middle
So, layout is in charge
and is always in charge.

00:33:47.106 --> 00:33:54.526 A:middle
But the catch is now we have
a way to actually communicate

00:33:54.986 --> 00:34:00.026 A:middle
to the layout that maybe we
should actually adjust things


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:54.986 --> 00:34:00.026 A:middle
to the layout that maybe we
should actually adjust things

00:34:01.106 --> 00:34:03.216 A:middle
because the cell size
might be slightly different

00:34:04.286 --> 00:34:08.076 A:middle
from this first approximation
we computed before.

00:34:09.516 --> 00:34:14.286 A:middle
That's a very generic and
extremely powerful mechanism.

00:34:16.076 --> 00:34:21.646 A:middle
So, now, I'd like to
talk about custom layouts

00:34:22.376 --> 00:34:23.406 A:middle
and smart invalidation.

00:34:24.136 --> 00:34:29.406 A:middle
But first I'm going
to refresh your memory

00:34:29.406 --> 00:34:34.426 A:middle
about how collection view
layout and validation works.

00:34:34.886 --> 00:34:41.646 A:middle
So, if you have a custom layout,
if you got a custom layout,

00:34:42.286 --> 00:34:46.856 A:middle
you know that the first
time we try to present cells

00:34:47.045 --> 00:34:50.505 A:middle
or supplementary views or
decoration views on screen,

00:34:52.025 --> 00:34:54.656 A:middle
the first method we are coding

00:34:54.656 --> 00:34:57.766 A:middle
on your custom layout
is prepareLayout.

00:34:59.756 --> 00:35:05.166 A:middle
Usually, that's when you can
actually pre-compute things


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.756 --> 00:35:05.166 A:middle
Usually, that's when you can
actually pre-compute things

00:35:06.306 --> 00:35:11.786 A:middle
or cache some attributes,
have a generic idea

00:35:11.786 --> 00:35:14.486 A:middle
about what your layout
is going to be.

00:35:14.956 --> 00:35:19.706 A:middle
Because the next
thing we're going

00:35:19.706 --> 00:35:27.156 A:middle
to ask you is the overall
size of your custom layout.

00:35:27.736 --> 00:35:32.746 A:middle
And based on that and
based on what section

00:35:33.726 --> 00:35:36.786 A:middle
of this layout we want
to show on screen,

00:35:37.916 --> 00:35:46.746 A:middle
then to ask the layout to
provide a list of attributes

00:35:47.316 --> 00:35:49.686 A:middle
for items in a given rect.

00:35:50.716 --> 00:35:53.806 A:middle
For instance, usually
the visible bounds

00:35:54.406 --> 00:35:59.776 A:middle
of the collection view.

00:35:59.776 --> 00:36:01.316 A:middle
Based on these attributes,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.776 --> 00:36:01.316 A:middle
Based on these attributes,

00:36:01.806 --> 00:36:05.676 A:middle
the next thing is the
collection view is going

00:36:05.676 --> 00:36:11.846 A:middle
to do the usual work of
dequeuing, creating cells,

00:36:12.606 --> 00:36:16.716 A:middle
possibly coding sizeThatFits or
applying Autolayout constraints.

00:36:16.716 --> 00:36:22.916 A:middle
So, in that case,
you would return 6

00:36:23.476 --> 00:36:28.736 A:middle
and 6 plus the several
[inaudible] attributes

00:36:29.746 --> 00:36:35.486 A:middle
describing what is in this rect.

00:36:36.266 --> 00:36:40.866 A:middle
Now, you might actually
later invalidate this layout,

00:36:42.076 --> 00:36:46.216 A:middle
for instance, because you want
to apply some special effect

00:36:46.626 --> 00:36:51.946 A:middle
when you scroll like a
cover flow like effect.

00:36:53.046 --> 00:36:55.946 A:middle
In that case, you have
to call invalidateLayout

00:36:55.946 --> 00:37:00.816 A:middle
which is basically a way to tell
the collection view that OK,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:55.946 --> 00:37:00.816 A:middle
which is basically a way to tell
the collection view that OK,

00:37:01.216 --> 00:37:02.316 A:middle
we are starting again.

00:37:02.986 --> 00:37:08.116 A:middle
What's going to happen is begin
to call prepareLayout again.

00:37:09.036 --> 00:37:12.606 A:middle
And that full cycle
starts again.

00:37:14.056 --> 00:37:19.946 A:middle
So, obviously, there is
a small problem here.

00:37:20.836 --> 00:37:26.156 A:middle
If each time we call or
you call invalidateLayout,

00:37:26.716 --> 00:37:29.776 A:middle
you have to re-compute
all these attributes.

00:37:29.776 --> 00:37:33.926 A:middle
That's the best way to have
a high performance layout.

00:37:34.666 --> 00:37:40.856 A:middle
So, we actually have
a great solution

00:37:40.856 --> 00:37:42.396 A:middle
for you for this problem.

00:37:43.416 --> 00:37:47.626 A:middle
Be lazy or smart
or lazy and smart

00:37:48.766 --> 00:37:52.286 A:middle
which basically means
re-compute only what you need

00:37:53.836 --> 00:37:58.796 A:middle
and that strategy you can
use right now in iOS 7

00:37:59.736 --> 00:38:02.856 A:middle
with something we call
invalidation contexts,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.736 --> 00:38:02.856 A:middle
with something we call
invalidation contexts,

00:38:03.916 --> 00:38:07.696 A:middle
because that's a class
that we introduce in iOS 7.

00:38:08.856 --> 00:38:14.856 A:middle
And this class is basically
a tool for your custom layout

00:38:15.846 --> 00:38:20.036 A:middle
to indicate what changed
because it's your layout

00:38:20.926 --> 00:38:23.036 A:middle
so you know what to do.

00:38:23.036 --> 00:38:27.276 A:middle
So, invalidation context in
iOS 7 were basically a way

00:38:27.276 --> 00:38:32.356 A:middle
to provide fine-grain
information to your layout

00:38:33.076 --> 00:38:34.766 A:middle
when things are invalidated.

00:38:35.456 --> 00:38:41.156 A:middle
We were actually using this
invalidation context class

00:38:41.266 --> 00:38:46.806 A:middle
already for things like rotation
in UICollectionViewFlowLayout.

00:38:47.396 --> 00:38:52.046 A:middle
And now, we are using that
for self-sizing cells.

00:38:52.046 --> 00:38:59.146 A:middle
So, in iOS 7, when using
an invalidation context,

00:38:59.836 --> 00:39:00.706 A:middle
it's actually easy.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.836 --> 00:39:00.706 A:middle
it's actually easy.

00:39:01.306 --> 00:39:05.336 A:middle
You have to define a collection
view invalidation context

00:39:05.336 --> 00:39:10.096 A:middle
subclass exposed at
your layout level.

00:39:11.106 --> 00:39:14.886 A:middle
And instead of coding
invalidateLayout

00:39:14.946 --> 00:39:16.846 A:middle
which is the very generic,

00:39:17.576 --> 00:39:20.686 A:middle
remove everything
invalidation method,

00:39:21.276 --> 00:39:25.266 A:middle
we can actually call
invalidateLayoutWithContext

00:39:26.166 --> 00:39:29.126 A:middle
and pass an instance
of your class

00:39:29.606 --> 00:39:32.576 A:middle
where you're probably
adding some information

00:39:32.576 --> 00:39:36.746 A:middle
about what you should do in a
given invalidation situation.

00:39:39.436 --> 00:39:44.386 A:middle
We also provided an override
point for bounds change

00:39:44.676 --> 00:39:48.216 A:middle
which is a common
thing you want to do.

00:39:48.216 --> 00:39:52.046 A:middle
So if your layout is
continuously invalidating

00:39:52.046 --> 00:39:56.686 A:middle
on scrolling on bounds
change or rotation,

00:39:56.686 --> 00:39:59.146 A:middle
you can actually
just override that

00:39:59.426 --> 00:40:02.046 A:middle
and return your invalidation
context


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.426 --> 00:40:02.046 A:middle
and return your invalidation
context

00:40:02.156 --> 00:40:03.956 A:middle
with information
you can use then

00:40:03.956 --> 00:40:06.386 A:middle
in your layout implementation.

00:40:09.336 --> 00:40:12.266 A:middle
We actually added in iOS 7

00:40:12.266 --> 00:40:15.896 A:middle
in this invalidation context
two additional information.

00:40:16.906 --> 00:40:19.716 A:middle
Sometimes when we invalidate,

00:40:20.736 --> 00:40:23.416 A:middle
it's because the
data source changed.

00:40:24.496 --> 00:40:30.826 A:middle
You have items coming in
on or out or we just have

00:40:30.826 --> 00:40:33.156 A:middle
to invalidate everything
in some situations.

00:40:33.806 --> 00:40:35.436 A:middle
These were two properties.

00:40:36.326 --> 00:40:39.936 A:middle
The collection view was setting
up for you and you could use

00:40:39.936 --> 00:40:41.916 A:middle
in your layout implementation.

00:40:42.026 --> 00:40:48.116 A:middle
So, iOS 7 invalidation
contexts were really a class

00:40:48.476 --> 00:40:49.736 A:middle
for your own use basically.

00:40:51.126 --> 00:40:53.706 A:middle
So what's changing in iOS 8?

00:40:54.836 --> 00:41:00.336 A:middle
In iOS 8, invalidation
contexts are really a way


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:54.836 --> 00:41:00.336 A:middle
In iOS 8, invalidation
contexts are really a way

00:41:00.336 --> 00:41:04.566 A:middle
to establish a communication
between your layout

00:41:05.596 --> 00:41:06.416 A:middle
and the collection view.

00:41:07.886 --> 00:41:10.816 A:middle
You can tell the
collection view that,

00:41:12.446 --> 00:41:15.886 A:middle
"Here is my invalidation
situation.

00:41:15.886 --> 00:41:17.966 A:middle
Maybe you can actually
help me with that."

00:41:19.156 --> 00:41:21.786 A:middle
And the information you can pass

00:41:21.906 --> 00:41:24.856 A:middle
to the collection view
can be useful for things

00:41:24.856 --> 00:41:29.036 A:middle
like high-performance floating
headers, sticky headers

00:41:29.036 --> 00:41:31.416 A:middle
like in table view
when you scroll

00:41:31.776 --> 00:41:37.606 A:middle
and you have this
section header on top.

00:41:37.806 --> 00:41:43.376 A:middle
Another use case is
self-sizing cells.

00:41:48.216 --> 00:41:52.196 A:middle
Oops. Because when cells can
actually change their size,

00:41:53.086 --> 00:41:56.226 A:middle
it might actually change
the overall collection view

00:41:56.226 --> 00:41:57.056 A:middle
content size.

00:41:57.436 --> 00:41:58.726 A:middle
It might change the offset

00:41:59.696 --> 00:42:02.696 A:middle
and invalidation
context are a great way


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.696 --> 00:42:02.696 A:middle
and invalidation
context are a great way

00:42:02.696 --> 00:42:07.596 A:middle
to tell the collection view
that your layout is adapting

00:42:08.276 --> 00:42:09.646 A:middle
to a self-sizing change.

00:42:10.226 --> 00:42:16.366 A:middle
So, first, fine-grain
invalidation.

00:42:16.366 --> 00:42:24.626 A:middle
We added three new methods on
invalidation context in iOS 8,

00:42:25.616 --> 00:42:30.606 A:middle
invalidateItemsAtIndexPaths,
invalidateSupplementary

00:42:30.946 --> 00:42:33.386 A:middle
ElementsOfKind atIndexPaths

00:42:33.776 --> 00:42:38.206 A:middle
and
invalidateDecorationViewsOfKind

00:42:38.716 --> 00:42:44.036 A:middle
atIndexPaths and you
can access this later.

00:42:44.756 --> 00:42:45.846 A:middle
What's great about that?

00:42:47.526 --> 00:42:52.106 A:middle
First, you can actually call
these methods several times.

00:42:52.606 --> 00:42:55.016 A:middle
You're going to aggregate
that information.

00:42:55.586 --> 00:42:59.366 A:middle
What does that mean
for your layout?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:00.086 --> 00:43:06.776 A:middle
Let's take a very
simple grid-like layout

00:43:07.506 --> 00:43:08.426 A:middle
with section headers.

00:43:09.466 --> 00:43:15.866 A:middle
And you want to implement
a sticky header on top.

00:43:18.596 --> 00:43:25.366 A:middle
In iOS 7, you basically had
to invalidate the entire rect.

00:43:26.596 --> 00:43:31.926 A:middle
In iOS 8, the only thing
that is actually moving is

00:43:31.926 --> 00:43:33.796 A:middle
that supplementary view.

00:43:34.456 --> 00:43:39.016 A:middle
So what you really want to use
is on your invalidation context,

00:43:40.316 --> 00:43:43.416 A:middle
tell us that I'm invalidating

00:43:43.956 --> 00:43:48.286 A:middle
that supplementaryView
atIndexPath throughout.

00:43:48.896 --> 00:43:55.376 A:middle
In that case, we know that only
one thing is actually changing.

00:43:55.376 --> 00:43:58.766 A:middle
So, we're going to
ask your layout, OK,

00:43:58.766 --> 00:44:04.156 A:middle
give me an updated version
of that supplementary view.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:58.766 --> 00:44:04.156 A:middle
give me an updated version
of that supplementary view.

00:44:04.426 --> 00:44:07.836 A:middle
So we are directly going to
call this fine-grain method

00:44:07.946 --> 00:44:14.356 A:middle
on your layout which is already
here, layoutAttributesFor

00:44:14.926 --> 00:44:19.556 A:middle
SupplementaryViewOfKind
section header atIndexPath.

00:44:20.976 --> 00:44:22.866 A:middle
And one thing we are not going

00:44:23.756 --> 00:44:26.726 A:middle
to do is calling
layoutAttributes

00:44:26.726 --> 00:44:27.656 A:middle
ForElementsInRect.

00:44:27.656 --> 00:44:34.906 A:middle
So instead of asking
you for 14 attributes

00:44:35.986 --> 00:44:38.306 A:middle
in that invalidation situation,

00:44:38.826 --> 00:44:40.676 A:middle
we are just going
to ask you for one.

00:44:42.026 --> 00:44:45.516 A:middle
It's amazing for
high-performance layouts.

00:44:46.516 --> 00:44:52.156 A:middle
[ Applause ]

00:44:52.656 --> 00:44:54.106 A:middle
Here's a situation
where you want

00:44:54.106 --> 00:44:58.606 A:middle
to use an invalidation context
is for self-sizing cells.

00:44:58.956 --> 00:45:02.036 A:middle
If you want to implement
self-sizing cell


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:58.956 --> 00:45:02.036 A:middle
If you want to implement
self-sizing cell

00:45:02.036 --> 00:45:05.206 A:middle
in your own custom layout, well,

00:45:05.676 --> 00:45:08.386 A:middle
you can actually tell
the collection view

00:45:08.386 --> 00:45:11.336 A:middle
that the content-size
is going to change

00:45:11.826 --> 00:45:17.086 A:middle
because that cell was bigger
than expected so you have

00:45:17.176 --> 00:45:20.416 A:middle
to enlarge the overall
content-size.

00:45:21.776 --> 00:45:26.416 A:middle
And you can do that with
a very simple property

00:45:27.106 --> 00:45:30.446 A:middle
on the validation context which
is a contentSizedAdjustment.

00:45:30.446 --> 00:45:33.746 A:middle
So you can give us the delta,

00:45:34.736 --> 00:45:37.086 A:middle
the change between what
was computed before

00:45:37.086 --> 00:45:38.946 A:middle
and the new size.

00:45:39.466 --> 00:45:45.766 A:middle
But, of course, because a cell
might not be what you expected,

00:45:47.036 --> 00:45:49.596 A:middle
it means that the
offset where you are

00:45:50.866 --> 00:45:52.166 A:middle
in the collection
view can change

00:45:52.566 --> 00:45:54.166 A:middle
and you can tell that too.

00:45:55.266 --> 00:45:58.096 A:middle
You can set to
contentOffsetAdjustment

00:45:59.106 --> 00:46:00.496 A:middle
in the invalidation context


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:59.106 --> 00:46:00.496 A:middle
in the invalidation context

00:46:01.226 --> 00:46:04.056 A:middle
and then the collection view
is going to do the right thing

00:46:05.036 --> 00:46:10.006 A:middle
and adjust the position so
you don't see and they jump

00:46:10.006 --> 00:46:12.426 A:middle
from one position
to another just

00:46:12.426 --> 00:46:15.626 A:middle
because your layout
updated itself.

00:46:18.676 --> 00:46:23.836 A:middle
The other feature we're
adding to help you

00:46:23.836 --> 00:46:28.596 A:middle
with self-sizing cells in
your custom layout is a way

00:46:28.596 --> 00:46:32.506 A:middle
to invalidate for
specific attributes.

00:46:33.046 --> 00:46:37.146 A:middle
And that's a new method
on UICollectionViewLayout.

00:46:37.836 --> 00:46:42.926 A:middle
If a cell, return a
different size, for instance,

00:46:42.926 --> 00:46:46.106 A:middle
or different layout attributes,
we're going to ask you

00:46:46.106 --> 00:46:49.056 A:middle
if we should invalidate
the layout.

00:46:50.586 --> 00:46:54.296 A:middle
And because we want
fine-grain invalidation,

00:46:54.956 --> 00:46:59.986 A:middle
we have an override
point, InvalidationContext


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:00.316 --> 00:47:06.156 A:middle
ForPrefferedAttributes based
on the original attributes.

00:47:07.656 --> 00:47:10.186 A:middle
So again, first step,

00:47:10.766 --> 00:47:14.266 A:middle
your layout computes
the first approximation.

00:47:16.016 --> 00:47:20.336 A:middle
We self-size the cells which
might change its attribute

00:47:20.756 --> 00:47:25.066 A:middle
and we pass you these
attributes in your layout.

00:47:25.066 --> 00:47:29.886 A:middle
And again, the layout is
still the final decision-maker

00:47:29.886 --> 00:47:32.226 A:middle
on what should be on screen.

00:47:35.056 --> 00:47:37.986 A:middle
So, we just like to summarize

00:47:38.286 --> 00:47:40.156 A:middle
that technique for
a custom layout.

00:47:40.156 --> 00:47:45.826 A:middle
It's a very simple line
based custom layout,

00:47:46.996 --> 00:47:47.766 A:middle
something like that.

00:47:47.766 --> 00:47:51.846 A:middle
So that's my overall
collection view layout.

00:47:51.876 --> 00:47:56.546 A:middle
I have five cells and
I'm going to compute

00:47:57.626 --> 00:48:02.306 A:middle
that first approximation by
using the usual layoutAttributes


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:57.626 --> 00:48:02.306 A:middle
that first approximation by
using the usual layoutAttributes

00:48:02.356 --> 00:48:03.636 A:middle
ForElementsInRect.

00:48:03.676 --> 00:48:08.866 A:middle
So I'm going to assume that
all my cells are exactly the

00:48:08.866 --> 00:48:09.606 A:middle
same size.

00:48:10.126 --> 00:48:15.976 A:middle
But then, collection
view is going

00:48:15.976 --> 00:48:18.976 A:middle
to create these cells
and self-size.

00:48:20.006 --> 00:48:26.116 A:middle
In the first cell, let's say,
adjust to this size based

00:48:26.116 --> 00:48:29.626 A:middle
on sizeThatFits or
through layout

00:48:29.626 --> 00:48:31.866 A:middle
or preferredLayoutAttributes.

00:48:32.416 --> 00:48:36.006 A:middle
And obviously because
of that size change,

00:48:37.006 --> 00:48:40.146 A:middle
my layout is no longer
what I want.

00:48:40.146 --> 00:48:47.366 A:middle
So I will have to update the
position for these other cells.

00:48:48.746 --> 00:48:53.876 A:middle
So, in my layout
implementation, I can decide

00:48:53.876 --> 00:48:57.936 A:middle
if a cell has different
attributes

00:48:57.936 --> 00:48:59.766 A:middle
from what I computed before


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:00.346 --> 00:49:05.316 A:middle
that I should actually update
these other cells' attributes.

00:49:05.886 --> 00:49:08.906 A:middle
Of course, there is
one last problem.

00:49:10.126 --> 00:49:14.606 A:middle
My collection view content
size is no longer correct.

00:49:14.646 --> 00:49:17.016 A:middle
So, I want to make
that consistent.

00:49:17.016 --> 00:49:19.746 A:middle
So, in my invalidation context,

00:49:23.816 --> 00:49:25.756 A:middle
I'm going to tell
the collection view

00:49:25.756 --> 00:49:30.696 A:middle
that we should adjust the
collection view content size.

00:49:31.226 --> 00:49:37.746 A:middle
And actually it's not the
only thing I need to do

00:49:38.186 --> 00:49:42.096 A:middle
because my previous
state was three cells

00:49:42.676 --> 00:49:43.936 A:middle
in these visible bounds.

00:49:44.776 --> 00:49:46.756 A:middle
A little bit of the first
cell, the second cell

00:49:47.196 --> 00:49:48.686 A:middle
and part of the third cell.

00:49:48.686 --> 00:49:55.216 A:middle
But the next thing is telling
the collection view that based

00:49:55.216 --> 00:49:58.616 A:middle
on this new cell
information we need

00:49:58.616 --> 00:50:03.566 A:middle
to actually adjust the
offset, so visually we are


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:58.616 --> 00:50:03.566 A:middle
to actually adjust the
offset, so visually we are

00:50:03.566 --> 00:50:05.596 A:middle
in the exact same state.

00:50:06.516 --> 00:50:10.876 A:middle
[ Applause ]

00:50:11.376 --> 00:50:13.696 A:middle
It's, of course,
completely layout specific.

00:50:14.436 --> 00:50:18.546 A:middle
You can imagine using this
technique for circle layouts,

00:50:19.046 --> 00:50:22.906 A:middle
line layouts, grid
layouts, base board layouts.

00:50:23.236 --> 00:50:29.566 A:middle
It's an amazing way to implement
extremely high performance

00:50:30.076 --> 00:50:33.866 A:middle
layout and add new
features like Dynamic Type.

00:50:35.196 --> 00:50:39.386 A:middle
And to conclude I like
to bring back Luke.

00:50:40.516 --> 00:50:46.446 A:middle
[ Applause ]

00:50:46.946 --> 00:50:48.056 A:middle
&gt;&gt; Thanks so much, Olivier.

00:50:48.176 --> 00:50:53.556 A:middle
Well, you probably
got a theme here

00:50:54.326 --> 00:50:57.636 A:middle
that is we've brought
self-sizing cells to table view,

00:50:58.146 --> 00:51:01.146 A:middle
we've brought self-sizing cells
to collection view in the form


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:58.146 --> 00:51:01.146 A:middle
we've brought self-sizing cells
to collection view in the form

00:51:01.146 --> 00:51:04.566 A:middle
of flow layout and we've also
brought self-sizing cells

00:51:04.926 --> 00:51:07.456 A:middle
to your custom layouts
if you choose

00:51:07.456 --> 00:51:09.516 A:middle
to adopt that methodology.

00:51:10.546 --> 00:51:13.826 A:middle
So, what I want you to
go home with is remember

00:51:13.826 --> 00:51:17.036 A:middle
that every app should
be adopting Dynamic Type

00:51:17.136 --> 00:51:19.036 A:middle
if you've got text
in your app that is,

00:51:19.036 --> 00:51:20.886 A:middle
which I imagine is
every single one of you.

00:51:21.766 --> 00:51:25.806 A:middle
When you're doing
this, you might think

00:51:25.806 --> 00:51:27.436 A:middle
about using self-sizing cells.

00:51:27.436 --> 00:51:29.456 A:middle
It will probably
help your cause.

00:51:30.476 --> 00:51:34.156 A:middle
And if you're using
collection view, specifically,

00:51:34.426 --> 00:51:38.126 A:middle
if you are the author of a
custom collection view layout,

00:51:38.496 --> 00:51:43.066 A:middle
this I can't stress enough,
use invalidation contexts.

00:51:43.356 --> 00:51:45.456 A:middle
This is like the
key to the world

00:51:45.856 --> 00:51:49.406 A:middle
for writing high performance
layouts in collection view.

00:51:49.586 --> 00:51:53.496 A:middle
In fact, since we're going to
have a lab right after this,

00:51:54.156 --> 00:51:56.986 A:middle
and I know some people
are going to come

00:51:56.986 --> 00:52:01.806 A:middle
with performance questions,
I'm going to tell you


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:56.986 --> 00:52:01.806 A:middle
with performance questions,
I'm going to tell you

00:52:02.436 --> 00:52:04.586 A:middle
that my first question
for you will be,

00:52:04.586 --> 00:52:06.546 A:middle
are you using invalidation
context.

00:52:07.076 --> 00:52:10.426 A:middle
And so, if you're not,
learn how to use them.

00:52:10.426 --> 00:52:11.246 A:middle
They're spectacular.

00:52:12.036 --> 00:52:14.496 A:middle
There's another great talk

00:52:14.496 --> 00:52:18.146 A:middle
on collection view later today
particularly for those of you

00:52:18.396 --> 00:52:20.066 A:middle
who are writing custom layouts.

00:52:20.626 --> 00:52:23.956 A:middle
This is Advanced User
Interfaces with Collection Views

00:52:24.206 --> 00:52:27.396 A:middle
and there are some really
great tips in here for how

00:52:27.396 --> 00:52:31.016 A:middle
to accomplish non-standard
things, you know,

00:52:31.016 --> 00:52:33.856 A:middle
things that aren't built into
the flow layout that we shipped

00:52:34.136 --> 00:52:37.626 A:middle
and get truly great interfaces
that use collection view.

00:52:38.076 --> 00:52:40.496 A:middle
For more information,
always feel free

00:52:40.496 --> 00:52:43.036 A:middle
to contact our frameworks
evangelist, Jake Behrens,

00:52:43.036 --> 00:52:44.356 A:middle
and check out the documentation.

00:52:44.356 --> 00:52:44.916 A:middle
Thanks for coming.

00:52:45.516 --> 00:52:49.500 A:middle
[ Applause ]

