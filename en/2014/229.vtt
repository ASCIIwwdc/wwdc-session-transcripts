WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:10.516 A:middle
[ Silence ]

00:00:11.016 --> 00:00:14.000 A:middle
[ Applause ]

00:00:15.176 --> 00:00:15.816 A:middle
&gt;&gt; Thank you.

00:00:16.796 --> 00:00:17.616 A:middle
Thank you very much.

00:00:18.206 --> 00:00:19.366 A:middle
My name is Andy Matuschak.

00:00:19.366 --> 00:00:21.686 A:middle
I work on the UIKit Framework.

00:00:22.326 --> 00:00:25.466 A:middle
And later I'm going to be joined
by my colleague, Colin Barrett,

00:00:25.466 --> 00:00:27.026 A:middle
who also works on UIKit.

00:00:27.026 --> 00:00:28.956 A:middle
And today we're going to talk

00:00:29.356 --> 00:00:36.276 A:middle
about Advanced iOS Architectural
Patterns, which is going to sort

00:00:36.276 --> 00:00:39.326 A:middle
of be a continuation of Bill
Dudney's talk from this morning,

00:00:39.326 --> 00:00:41.976 A:middle
the Core iOS Application
Architecture and Patterns.

00:00:41.976 --> 00:00:44.676 A:middle
We're going to be taking some
of those ideas a little further

00:00:45.336 --> 00:00:47.776 A:middle
and just in case you didn't see
that talk this morning or even

00:00:47.776 --> 00:00:50.276 A:middle
if you did, I want to
tell a little story

00:00:50.946 --> 00:00:53.096 A:middle
that explains I think
how we all got here.

00:00:54.006 --> 00:00:56.106 A:middle
So maybe you start
off by yourself

00:00:56.106 --> 00:00:58.606 A:middle
and the project starts
small, your well intentioned,

00:00:59.156 --> 00:01:02.326 A:middle
you're keeping everything
orderly, you're adding features


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.156 --> 00:01:02.326 A:middle
you're keeping everything
orderly, you're adding features

00:01:03.036 --> 00:01:04.066 A:middle
and everything is still good.

00:01:04.066 --> 00:01:07.666 A:middle
You add more features
and they kind of pile up

00:01:07.666 --> 00:01:09.266 A:middle
and you got momentum
behind you now.

00:01:09.266 --> 00:01:11.086 A:middle
You have all these users
and they're demanding.

00:01:11.086 --> 00:01:13.926 A:middle
You had some more developers
because maybe that will help,

00:01:14.416 --> 00:01:16.896 A:middle
but it doesn't seem to
have quite the impact

00:01:16.896 --> 00:01:18.896 A:middle
on your progress that
you'd been hoping for

00:01:18.896 --> 00:01:24.016 A:middle
and you're making changes
faster and faster and bugs seem

00:01:24.016 --> 00:01:26.296 A:middle
to be appearing faster
and faster.

00:01:27.396 --> 00:01:30.016 A:middle
And it seems like all you're
doing is spending your time

00:01:30.016 --> 00:01:30.586 A:middle
fighting bugs.

00:01:32.086 --> 00:01:35.136 A:middle
And you think, OK, well
I'll knock a few down

00:01:35.136 --> 00:01:36.376 A:middle
and a few more come back.

00:01:36.966 --> 00:01:38.156 A:middle
You're not adding new features.

00:01:38.156 --> 00:01:42.056 A:middle
You had some unit tests
to try to get a handle

00:01:42.056 --> 00:01:42.886 A:middle
on what's going on here.

00:01:42.886 --> 00:01:46.116 A:middle
Somebody's told you that's going
to help things, but it seems

00:01:46.116 --> 00:01:49.636 A:middle
to help initially and then
the bugs start coming back.

00:01:50.256 --> 00:01:54.836 A:middle
And then you learn actually your
unit test can have bugs too.

00:01:55.516 --> 00:01:57.796 A:middle
[ Laughter ]

00:01:58.296 --> 00:02:01.026 A:middle
What do we do?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.296 --> 00:02:01.026 A:middle
What do we do?

00:02:01.256 --> 00:02:04.086 A:middle
People say: Software
Architecture.

00:02:04.086 --> 00:02:06.976 A:middle
And you go, "All right, cool.

00:02:08.036 --> 00:02:08.705 A:middle
Software Architecture.

00:02:09.006 --> 00:02:09.826 A:middle
All right."

00:02:10.376 --> 00:02:11.566 A:middle
What's Software Architecture?

00:02:12.896 --> 00:02:16.466 A:middle
You search around the Internet,
you get a whole bunch of blogs.

00:02:16.596 --> 00:02:17.826 A:middle
They're listing like, "Oh man.

00:02:17.826 --> 00:02:20.716 A:middle
Never do this stuff it's going
to make your architecture bad."

00:02:20.716 --> 00:02:23.596 A:middle
And it seems like there's a
lot of contradicting opinions.

00:02:23.596 --> 00:02:25.686 A:middle
Some people say start
small and some people want

00:02:25.686 --> 00:02:26.886 A:middle
to design everything up front.

00:02:27.926 --> 00:02:30.736 A:middle
Seems like these discussions
just keep coming back

00:02:31.066 --> 00:02:35.436 A:middle
to taste, maybe dogma.

00:02:35.586 --> 00:02:37.376 A:middle
All you really know maybe is

00:02:37.416 --> 00:02:43.036 A:middle
that your taste is improving a
lot faster than your ability.

00:02:44.086 --> 00:02:46.086 A:middle
[ Laughter ]

00:02:46.156 --> 00:02:48.206 A:middle
You can tell that something
is starting to get smelly.

00:02:48.206 --> 00:02:49.816 A:middle
You can tell you've
got a problem,

00:02:50.586 --> 00:02:52.826 A:middle
but maybe you don't know
what to do about it.

00:02:53.996 --> 00:02:55.666 A:middle
So we're going to try to help.

00:02:56.436 --> 00:02:58.386 A:middle
We can only scratched
the surface today.

00:02:59.066 --> 00:03:02.336 A:middle
The idea is to take some
time honored concepts


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.066 --> 00:03:02.336 A:middle
The idea is to take some
time honored concepts

00:03:02.786 --> 00:03:04.566 A:middle
from computer science
and software engineering

00:03:04.566 --> 00:03:09.076 A:middle
and to present them, hopefully,
less abstractly and in a way

00:03:09.076 --> 00:03:13.716 A:middle
that might make sense to you as
an iOS developer with your apps.

00:03:14.456 --> 00:03:17.916 A:middle
Today, we're hoping to
provide insight, not dogma.

00:03:18.016 --> 00:03:19.656 A:middle
[ Applause ]

00:03:19.656 --> 00:03:19.976 A:middle
We're not--

00:03:20.016 --> 00:03:21.396 A:middle
[ Applause ]

00:03:21.396 --> 00:03:21.936 A:middle
I'm so glad.

00:03:21.936 --> 00:03:24.096 A:middle
I'm so glad to hear that.

00:03:24.616 --> 00:03:25.846 A:middle
Epistemology is important.

00:03:26.816 --> 00:03:30.756 A:middle
You need to know why you're
having architectural problems.

00:03:31.146 --> 00:03:35.926 A:middle
Not just a bag of tricks
that you can use when faced

00:03:35.986 --> 00:03:37.716 A:middle
with any particular issue.

00:03:38.946 --> 00:03:41.136 A:middle
That way, hopefully you'll
have a real objective measure

00:03:41.316 --> 00:03:42.916 A:middle
that you can use to
compare approaches.

00:03:43.126 --> 00:03:45.086 A:middle
That way, when your
colleagues disagree with you,

00:03:45.086 --> 00:03:47.126 A:middle
you can actually talk
about what might be better

00:03:47.126 --> 00:03:49.156 A:middle
and what might be
worse and why rather

00:03:49.156 --> 00:03:50.786 A:middle
than just citing a
bunch of catch phrases.

00:03:50.786 --> 00:03:51.526 A:middle
All right.

00:03:52.556 --> 00:03:56.326 A:middle
So today, we're going to
talk about 3 broad approaches

00:03:57.586 --> 00:04:00.266 A:middle
that you can use to consider the
complexity of your application


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.586 --> 00:04:00.266 A:middle
that you can use to consider the
complexity of your application

00:04:00.266 --> 00:04:01.906 A:middle
and evaluate approaches
to dealing with it.

00:04:03.316 --> 00:04:07.636 A:middle
First, when we have tangled
meshes of information networks

00:04:07.696 --> 00:04:09.216 A:middle
like this, we're
going to clean them

00:04:09.216 --> 00:04:12.156 A:middle
up by actually designing
the information flow

00:04:12.156 --> 00:04:13.166 A:middle
in our application rather

00:04:13.166 --> 00:04:15.476 A:middle
than just letting it
grow ad hoc like a weed.

00:04:16.505 --> 00:04:20.666 A:middle
And then when our objects start
to become amorphous blobs,

00:04:21.426 --> 00:04:23.846 A:middle
we're going to separate them
actually define what their

00:04:23.846 --> 00:04:27.076 A:middle
responsibilities are
and hopefully get each

00:04:27.076 --> 00:04:28.326 A:middle
of those circles
a little smaller.

00:04:29.336 --> 00:04:32.956 A:middle
And finally when the very ground
seems to be shifting out from

00:04:32.956 --> 00:04:36.086 A:middle
under you, we're going to
take advantage of immutability

00:04:36.086 --> 00:04:38.956 A:middle
and in particular, some
new features of Swift

00:04:40.016 --> 00:04:41.196 A:middle
to really get a handle
on things.

00:04:41.986 --> 00:04:44.546 A:middle
So those are the big
concepts from today.

00:04:44.546 --> 00:04:49.136 A:middle
And we'll start by talking about
designing information flow.

00:04:49.726 --> 00:04:53.646 A:middle
Now, much of the complexity

00:04:53.646 --> 00:04:55.626 A:middle
in a modern application
is really just shuffling

00:04:55.626 --> 00:04:57.766 A:middle
information at events around.

00:04:58.306 --> 00:05:02.706 A:middle
You have delegate handlers,
and target action callbacks,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.306 --> 00:05:02.706 A:middle
You have delegate handlers,
and target action callbacks,

00:05:02.706 --> 00:05:05.426 A:middle
you have completion blocks,
and you have some signals.

00:05:06.336 --> 00:05:09.806 A:middle
And how should those
information and events go

00:05:09.876 --> 00:05:10.876 A:middle
through your application?

00:05:10.876 --> 00:05:13.086 A:middle
You start wiring stuff up.

00:05:13.086 --> 00:05:14.386 A:middle
You set these object
as a delegate

00:05:14.386 --> 00:05:15.926 A:middle
of this other object over here.

00:05:16.536 --> 00:05:19.176 A:middle
You say add target action, and
every time you're doing that,

00:05:20.226 --> 00:05:21.926 A:middle
you're adding a little
node to this network.

00:05:22.646 --> 00:05:25.666 A:middle
And that network is getting
gnarlier and gnarlier

00:05:25.666 --> 00:05:28.116 A:middle
and maybe you've drawn
networks like this for say,

00:05:28.846 --> 00:05:31.066 A:middle
object ownership in
your application.

00:05:31.346 --> 00:05:34.446 A:middle
Which object owns which other
object or maybe for a workflow.

00:05:34.716 --> 00:05:37.096 A:middle
But in this section,
we're going to talk

00:05:37.096 --> 00:05:39.906 A:middle
about thinking conceptually
about this diagram

00:05:39.906 --> 00:05:42.746 A:middle
as it pertains to information
flow in your application.

00:05:43.446 --> 00:05:45.846 A:middle
Where is information coming
from and where is it going?

00:05:46.636 --> 00:05:49.456 A:middle
And the first question
I'll ask is

00:05:50.176 --> 00:05:52.826 A:middle
where is truth in
my application?

00:05:53.716 --> 00:05:55.786 A:middle
And in order to do
that, and in order

00:05:55.786 --> 00:05:57.626 A:middle
to keep things hopefully
somewhat concrete,

00:05:57.626 --> 00:06:01.006 A:middle
we're going to turn
to a demo application


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:57.626 --> 00:06:01.006 A:middle
we're going to turn
to a demo application

00:06:01.526 --> 00:06:05.666 A:middle
which is having its own
problems with information flow.

00:06:05.666 --> 00:06:07.926 A:middle
All right.

00:06:09.696 --> 00:06:13.926 A:middle
So over here, we have an
application and it's going

00:06:13.926 --> 00:06:14.786 A:middle
to be written in Swift.

00:06:14.786 --> 00:06:18.546 A:middle
And that's just because
I like Swift quite a lot.

00:06:18.896 --> 00:06:20.736 A:middle
But the topics we're discussing

00:06:20.736 --> 00:06:24.936 A:middle
in this particular section
really don't require Swift.

00:06:25.946 --> 00:06:26.186 A:middle
All right.

00:06:26.186 --> 00:06:27.306 A:middle
So with the journaling
application,

00:06:28.006 --> 00:06:30.446 A:middle
write down what's going on in
your life, keep track of things.

00:06:30.766 --> 00:06:31.776 A:middle
Maybe you're Abraham Lincoln.

00:06:32.546 --> 00:06:35.096 A:middle
And like any good
journaling app,

00:06:35.096 --> 00:06:36.786 A:middle
there's a UI to add an entry.

00:06:36.786 --> 00:06:40.646 A:middle
You've gotten a bug report
from a user talking about a bug

00:06:40.646 --> 00:06:43.636 A:middle
with the photo edition
UI in your application.

00:06:44.676 --> 00:06:47.426 A:middle
So we'll go ahead and start
making a journal entry.

00:06:49.256 --> 00:06:54.646 A:middle
We will add a photo, taken
this one from apple.com

00:06:55.246 --> 00:07:00.366 A:middle
and there's this feature that
lets me show and hide the photos


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:55.246 --> 00:07:00.366 A:middle
and there's this feature that
lets me show and hide the photos

00:07:00.366 --> 00:07:02.086 A:middle
that I've attached
to my journal entry.

00:07:03.006 --> 00:07:04.316 A:middle
Everything is looking
good so far.

00:07:05.236 --> 00:07:09.676 A:middle
But this bug report I got said
that the app seems to break

00:07:10.256 --> 00:07:11.516 A:middle
when I'm playing
with this button.

00:07:12.416 --> 00:07:15.706 A:middle
So, I'll play with the button.

00:07:17.136 --> 00:07:19.206 A:middle
Something really glitchy
is happening there

00:07:19.206 --> 00:07:20.276 A:middle
and we have a crash.

00:07:22.526 --> 00:07:23.336 A:middle
That's no good.

00:07:23.776 --> 00:07:25.726 A:middle
Now we could look
at this back trace

00:07:25.726 --> 00:07:30.546 A:middle
but probably the problem
has already happened.

00:07:31.656 --> 00:07:32.946 A:middle
And we can see the issue is--

00:07:33.176 --> 00:07:36.456 A:middle
now this exclamation
point here is going awry.

00:07:37.676 --> 00:07:41.116 A:middle
Rather than trying to
address this specific crasher,

00:07:41.726 --> 00:07:45.386 A:middle
I'd like to draw your attention
to the infrastructural problem

00:07:45.846 --> 00:07:47.316 A:middle
which is underlying
this crasher.

00:07:47.956 --> 00:07:51.246 A:middle
So let's take a look at
how exactly this expanding

00:07:51.246 --> 00:07:53.486 A:middle
and collapsing of the
PhotoDrawer feature is working.

00:07:54.076 --> 00:07:55.316 A:middle
Here's expandPhotoDrawer.

00:07:55.766 --> 00:07:57.836 A:middle
And first we say, OK do
we have a PhotoDrawerView?

00:07:58.696 --> 00:08:02.516 A:middle
If we don't, make
one, get it all laid


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.696 --> 00:08:02.516 A:middle
If we don't, make
one, get it all laid

00:08:02.516 --> 00:08:04.406 A:middle
out so it'll expand
from zero height.

00:08:05.366 --> 00:08:09.176 A:middle
Animate it to full height and,
you know, update that button,

00:08:09.176 --> 00:08:10.106 A:middle
a little bit of bookkeeping.

00:08:10.686 --> 00:08:14.186 A:middle
Of course then, in
collapsePhotoDrawer,

00:08:14.186 --> 00:08:16.056 A:middle
if we already have a
PhotoDrawer which we want

00:08:16.056 --> 00:08:17.976 A:middle
to collapse, we animate it shut.

00:08:18.836 --> 00:08:21.366 A:middle
And when the animation
is done, we remove it.

00:08:22.486 --> 00:08:24.056 A:middle
It seems pretty straightforward.

00:08:24.546 --> 00:08:27.046 A:middle
You know, you might
say, well this option,

00:08:27.596 --> 00:08:28.856 A:middle
this option seems
to be the problem.

00:08:28.856 --> 00:08:30.306 A:middle
Like you're letting
users interact

00:08:30.306 --> 00:08:32.216 A:middle
with your UI while the
animation is going on.

00:08:32.696 --> 00:08:33.515 A:middle
You shouldn't do that.

00:08:34.285 --> 00:08:37.385 A:middle
And, OK, so you could
remove this option.

00:08:37.926 --> 00:08:43.826 A:middle
But you know, we do actually
want to keep things fluid.

00:08:43.826 --> 00:08:45.816 A:middle
There's no reason that the
world should have to stop just

00:08:45.816 --> 00:08:47.206 A:middle
because this PhotoDrawer
is opening up.

00:08:48.006 --> 00:08:50.836 A:middle
And furthermore, we're
starting to get a little sense

00:08:50.836 --> 00:08:53.336 A:middle
of that taste versus ability
tradeoff we were talking

00:08:53.336 --> 00:08:53.736 A:middle
about earlier.

00:08:53.736 --> 00:08:56.156 A:middle
I mean, hopefully you're looking
at this and you're saying that

00:08:56.156 --> 00:08:59.426 A:middle
"Well, I don't exactly
see anything wrong.

00:08:59.426 --> 00:09:01.586 A:middle
So trying to work
around this bug


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.426 --> 00:09:01.586 A:middle
So trying to work
around this bug

00:09:01.586 --> 00:09:03.266 A:middle
by just disabling the
button doesn't seem

00:09:03.266 --> 00:09:04.586 A:middle
like the best thing to do.

00:09:05.336 --> 00:09:06.526 A:middle
What's really going on?"

00:09:07.196 --> 00:09:09.206 A:middle
And even if we were to
disable this button,

00:09:10.016 --> 00:09:12.016 A:middle
things get somewhat worse.

00:09:12.576 --> 00:09:14.136 A:middle
If I rerun this application,

00:09:14.136 --> 00:09:15.766 A:middle
I'll show you there's
sort of a side feature.

00:09:16.056 --> 00:09:19.806 A:middle
So say that it was the case
that you could not interact

00:09:21.096 --> 00:09:24.236 A:middle
with the Show Photos button
while the animation is going on.

00:09:25.356 --> 00:09:30.886 A:middle
Well, down here is our body
and as we start typing into it,

00:09:31.546 --> 00:09:35.816 A:middle
we hide that PhotoDrawer
because we want

00:09:35.816 --> 00:09:37.156 A:middle
to have more space
for the keyboard.

00:09:38.366 --> 00:09:41.796 A:middle
So it's actually not good enough
just to disable this button

00:09:42.426 --> 00:09:44.886 A:middle
to make this problem go away.

00:09:45.306 --> 00:09:46.736 A:middle
The problem will still exist

00:09:46.736 --> 00:09:48.996 A:middle
because we collapsed
this PhotoDrawer

00:09:50.476 --> 00:09:51.856 A:middle
when we focused the body.

00:09:52.166 --> 00:09:54.156 A:middle
If I were to keep going on
like that, it would crash.

00:09:55.296 --> 00:09:57.666 A:middle
So there's something more
fundamental at play here.

00:09:57.666 --> 00:10:02.856 A:middle
There's some mold growing in the
corner and I'd like to return


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:57.666 --> 00:10:02.856 A:middle
There's some mold growing in the
corner and I'd like to return

00:10:03.046 --> 00:10:09.976 A:middle
to a diagrammatic approach
to examine that mold.

00:10:10.046 --> 00:10:13.236 A:middle
Now this is boxes and
arrows representation

00:10:13.236 --> 00:10:14.956 A:middle
of the information flow
on our application.

00:10:16.286 --> 00:10:18.886 A:middle
We've got this photos
drawer tap action

00:10:19.356 --> 00:10:21.466 A:middle
and we've also got a
text view focus action,

00:10:21.626 --> 00:10:24.696 A:middle
and they're both doing something
based on a piece of information.

00:10:24.696 --> 00:10:26.536 A:middle
And that piece of
information is:

00:10:27.446 --> 00:10:29.646 A:middle
does that photos drawer exist,

00:10:29.806 --> 00:10:31.606 A:middle
does that drawer
view exist already?

00:10:31.856 --> 00:10:34.226 A:middle
And we saw in the code, if it
doesn't exist, OK we'll make it.

00:10:34.596 --> 00:10:36.556 A:middle
And if does exist, we'll
start an animation.

00:10:36.556 --> 00:10:38.156 A:middle
When that animation is
done, we'll throw it out.

00:10:38.156 --> 00:10:40.846 A:middle
That's fundamentally
what's going on here.

00:10:42.226 --> 00:10:45.666 A:middle
This bug is occurring because
we're getting our information

00:10:45.666 --> 00:10:46.376 A:middle
from the wrong place.

00:10:47.056 --> 00:10:49.306 A:middle
There's another piece
of state, which is,

00:10:49.306 --> 00:10:52.186 A:middle
is the drawer semantically
expanded?

00:10:52.186 --> 00:10:56.106 A:middle
And that's separate from,
does the drawer view exist.

00:10:56.246 --> 00:10:57.636 A:middle
Because the draw view isn't torn

00:10:57.636 --> 00:11:00.046 A:middle
down until the animation
completes.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:57.636 --> 00:11:00.046 A:middle
down until the animation
completes.

00:11:01.306 --> 00:11:05.796 A:middle
If we start collapsing the
drawer, then we want to think

00:11:05.796 --> 00:11:09.246 A:middle
about the state of the system
as the drawer is collapsed now,

00:11:09.856 --> 00:11:11.856 A:middle
just like if you start animating
a view to the other side

00:11:11.856 --> 00:11:14.556 A:middle
of the screen, its model value
is already at its destination.

00:11:15.756 --> 00:11:17.346 A:middle
The drawer view's
existence is more

00:11:17.346 --> 00:11:18.866 A:middle
like the presentation
value of the view.

00:11:18.976 --> 00:11:21.376 A:middle
It's like a proxy for
that underlying truth.

00:11:22.086 --> 00:11:24.156 A:middle
Should the drawer
view be expanded,

00:11:24.156 --> 00:11:26.636 A:middle
you can module any
animations that are going on.

00:11:27.516 --> 00:11:30.806 A:middle
So we can deal with this problem
by reifying that piece of state.

00:11:31.366 --> 00:11:32.166 A:middle
We can make a property.

00:11:32.326 --> 00:11:34.826 A:middle
Say, you know, is the drawer
view expanded right now,

00:11:34.826 --> 00:11:36.976 A:middle
updated immediately
when we start collapsing

00:11:36.976 --> 00:11:39.256 A:middle
that drawer view and
when we start expanding

00:11:39.256 --> 00:11:39.806 A:middle
that drawer view.

00:11:41.206 --> 00:11:44.646 A:middle
And then once we do that,
we can look at this diagram

00:11:44.646 --> 00:11:45.446 A:middle
and say, "Wait, wait, wait.

00:11:46.096 --> 00:11:52.016 A:middle
Why are these actions getting
their truth from whether

00:11:52.016 --> 00:11:53.166 A:middle
or not the drawer view exists?"

00:11:53.166 --> 00:11:55.926 A:middle
What really matters is whether
or not the drawer is supposed

00:11:55.926 --> 00:11:56.896 A:middle
to be expanded or not.

00:11:57.516 --> 00:11:59.006 A:middle
And when you tap
in the text view,

00:11:59.106 --> 00:12:01.396 A:middle
you should only really be
collapsing the PhotoDrawer


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.106 --> 00:12:01.396 A:middle
you should only really be
collapsing the PhotoDrawer

00:12:02.496 --> 00:12:04.406 A:middle
if it is actually expanded.

00:12:04.686 --> 00:12:07.666 A:middle
You don't want to try to
collapse the PhotoDrawer if it's

00:12:07.876 --> 00:12:10.806 A:middle
in the process of
being collapsed already

00:12:11.726 --> 00:12:13.886 A:middle
but that drawer view
hasn't been removed yet.

00:12:13.886 --> 00:12:16.906 A:middle
Now in this talk, I'm
not actually going

00:12:16.906 --> 00:12:18.956 A:middle
to make the code changes
that we're talking about here

00:12:18.956 --> 00:12:20.696 A:middle
because we have a lot of
material to get through

00:12:20.696 --> 00:12:21.626 A:middle
and I want to cover it quickly.

00:12:22.176 --> 00:12:24.326 A:middle
But here we've been able
to solve this problem,

00:12:24.816 --> 00:12:28.636 A:middle
at a conceptual level at least,
by thinking about our system

00:12:28.796 --> 00:12:31.976 A:middle
in terms of how information
is moving through it:

00:12:32.096 --> 00:12:33.816 A:middle
where are we getting data,
how we're making decisions.

00:12:34.656 --> 00:12:37.066 A:middle
And considering first:
where is truth?

00:12:38.356 --> 00:12:41.486 A:middle
Who really knows that state

00:12:42.066 --> 00:12:44.406 A:middle
which one place should
be consulted for it?

00:12:44.406 --> 00:12:47.426 A:middle
And that will help
us get all the boxes

00:12:47.426 --> 00:12:48.836 A:middle
that we need in our diagram.

00:12:49.566 --> 00:12:51.946 A:middle
Now, once we've gotten all the
boxes we need in our diagram,

00:12:52.076 --> 00:12:55.386 A:middle
I want to draw your
attention to the difference

00:12:55.586 --> 00:12:59.646 A:middle
between that root level
truth, that one place

00:12:59.646 --> 00:13:01.216 A:middle
in your application
that actually knows


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.646 --> 00:13:01.216 A:middle
in your application
that actually knows

00:13:01.216 --> 00:13:04.676 A:middle
where things are supposed
to be and the values

00:13:04.676 --> 00:13:06.486 A:middle
which are merely
derived from it.

00:13:06.836 --> 00:13:09.406 A:middle
So in order to do that,
again, let's return

00:13:09.406 --> 00:13:10.856 A:middle
to our demo application.

00:13:11.156 --> 00:13:17.526 A:middle
And you'll see here that
as I continue typing,

00:13:18.006 --> 00:13:19.866 A:middle
there's a character counter.

00:13:20.066 --> 00:13:21.176 A:middle
And that character
counter is there

00:13:21.176 --> 00:13:23.736 A:middle
because you might be
an extremely outgoing

00:13:23.736 --> 00:13:25.806 A:middle
and extroverted person with
your journal and you might want

00:13:25.806 --> 00:13:28.056 A:middle
to take advantage of
this feature that we have

00:13:28.056 --> 00:13:30.016 A:middle
which automatically shares all

00:13:30.016 --> 00:13:31.616 A:middle
of your journal entries
to Twitter.

00:13:32.246 --> 00:13:36.216 A:middle
So we gave you a character count
in order to help you make sure

00:13:36.436 --> 00:13:38.626 A:middle
that it's actually going to
fit when you post to Twitter.

00:13:38.946 --> 00:13:39.446 A:middle
Simple enough.

00:13:39.996 --> 00:13:41.246 A:middle
It goes up as we delete,

00:13:41.666 --> 00:13:44.656 A:middle
and it goes down as
we add new characters.

00:13:44.656 --> 00:13:45.656 A:middle
And that's all fine.

00:13:46.006 --> 00:13:51.626 A:middle
But if we think about this
photo's feature that we have,

00:13:53.036 --> 00:13:57.076 A:middle
you know, when we post to
Twitter, we're going to have

00:13:57.076 --> 00:14:00.176 A:middle
to put a URL for that photo
in the body of the tweet.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:57.076 --> 00:14:00.176 A:middle
to put a URL for that photo
in the body of the tweet.

00:14:00.176 --> 00:14:03.496 A:middle
So that needs to be included
in the character count.

00:14:04.486 --> 00:14:08.036 A:middle
And we got a bug from users
saying that they tried

00:14:08.036 --> 00:14:12.816 A:middle
to make a post and Twitter
rejected it even though the UI

00:14:12.816 --> 00:14:15.526 A:middle
said it was OK.

00:14:15.776 --> 00:14:18.916 A:middle
So, I added this photo,
you could see it's added

00:14:18.916 --> 00:14:21.426 A:middle
to this entry, and we
can see that the number

00:14:21.426 --> 00:14:23.046 A:middle
of remaining characters
is still 140.

00:14:23.686 --> 00:14:27.696 A:middle
And if I start typing,
watch I'll enter one key,

00:14:27.696 --> 00:14:30.076 A:middle
and we jump down to 118.

00:14:30.076 --> 00:14:34.076 A:middle
It's like it immediately
reconsidered the URL.

00:14:34.076 --> 00:14:36.586 A:middle
I'm sure you've all seen
this kind of bug quite a lot.

00:14:36.646 --> 00:14:37.636 A:middle
Something is stale.

00:14:38.016 --> 00:14:40.666 A:middle
Something that was supposed
to happen has not happened,

00:14:41.096 --> 00:14:42.216 A:middle
and unfortunately, that kind

00:14:42.216 --> 00:14:44.116 A:middle
of problem is really
difficult to debug.

00:14:44.116 --> 00:14:46.726 A:middle
There's nowhere to break.

00:14:46.946 --> 00:14:48.676 A:middle
So, we can look at
the code and say, "OK,

00:14:48.676 --> 00:14:49.766 A:middle
what's supposed to happen?"

00:14:51.056 --> 00:14:54.656 A:middle
There is an updateCharacterCount
method here

00:14:55.366 --> 00:14:56.366 A:middle
and it's very simple.

00:14:56.366 --> 00:15:00.506 A:middle
It just updates this character
count label with the result


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:56.366 --> 00:15:00.506 A:middle
It just updates this character
count label with the result

00:15:00.536 --> 00:15:02.286 A:middle
of our Twitter entry encoder.

00:15:02.286 --> 00:15:04.926 A:middle
So there's 2 possible
problems here.

00:15:05.706 --> 00:15:07.246 A:middle
Possible problem number 1 is:

00:15:07.446 --> 00:15:09.276 A:middle
the Twitter entry
encoder is at fault.

00:15:09.656 --> 00:15:10.776 A:middle
It's returning a wrong value.

00:15:12.026 --> 00:15:13.156 A:middle
Possible problem number 2 is:

00:15:13.156 --> 00:15:15.746 A:middle
this method is simply not being
called when we add a photo.

00:15:17.106 --> 00:15:20.846 A:middle
So, we can look to invalidate
one of these hypotheses.

00:15:20.846 --> 00:15:22.556 A:middle
We can look to sort of guide

00:15:22.986 --> 00:15:26.336 A:middle
to where we should be addressing
our debugging abilities.

00:15:26.336 --> 00:15:29.706 A:middle
We can do that by just
adding a break point here

00:15:30.666 --> 00:15:34.926 A:middle
and I will go ahead and create
a new journal entry here

00:15:34.926 --> 00:15:35.816 A:middle
to set this up again.

00:15:36.396 --> 00:15:37.186 A:middle
I'll add a photo.

00:15:37.186 --> 00:15:38.776 A:middle
And we see

00:15:38.776 --> 00:15:40.416 A:middle
that updateCharacterCount
is never called.

00:15:40.826 --> 00:15:43.316 A:middle
But when I enter a key
here, it is called.

00:15:43.316 --> 00:15:46.066 A:middle
So our problem appears to be

00:15:46.066 --> 00:15:48.666 A:middle
that this method is just
not even getting called

00:15:48.666 --> 00:15:50.806 A:middle
when it should be
called, and let's continue

00:15:50.806 --> 00:15:54.076 A:middle
to follow this rabbit
hole upwards, I guess,

00:15:54.076 --> 00:15:56.396 A:middle
and see who calls
updateCharacterCount.

00:15:56.926 --> 00:16:02.716 A:middle
Now it's only called in
one place and it's called


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:56.926 --> 00:16:02.716 A:middle
Now it's only called in
one place and it's called

00:16:02.716 --> 00:16:04.296 A:middle
on "textViewDidChange".

00:16:04.906 --> 00:16:12.456 A:middle
Now kind of an esoteric
factoid about the UIKit

00:16:12.456 --> 00:16:15.866 A:middle
and at AppKit APIs is that
if you programatically set a

00:16:15.936 --> 00:16:20.526 A:middle
textViews value, the textView
does not emit delegate callbacks

00:16:21.116 --> 00:16:22.736 A:middle
saying that the textViews
value changed.

00:16:22.946 --> 00:16:25.826 A:middle
And then the same thing is true
for basically anything else

00:16:25.876 --> 00:16:27.136 A:middle
that has a delegate callback.

00:16:27.136 --> 00:16:29.916 A:middle
If you programatically set the
value that is corresponding

00:16:29.916 --> 00:16:33.016 A:middle
to that callback, UIKit/AppKit
will not call you back.

00:16:33.016 --> 00:16:36.596 A:middle
So, you could react to
this by saying, oh geez,

00:16:37.186 --> 00:16:39.846 A:middle
got to work around this
weird UIKit behavior.

00:16:40.276 --> 00:16:43.606 A:middle
I guess we'll add an extra
call to updateCharacterCount

00:16:44.206 --> 00:16:47.696 A:middle
when we add a photo
which happens down here,

00:16:47.696 --> 00:16:48.526 A:middle
somewhere, right here.

00:16:49.046 --> 00:16:52.726 A:middle
You know, we could-- we can call
updateCharacterCount there but,

00:16:53.026 --> 00:16:56.506 A:middle
you know, what if we added
an audio recording feature.

00:16:56.596 --> 00:16:58.996 A:middle
You know, take a voice note
about how your day is going.

00:16:58.996 --> 00:17:00.476 A:middle
What if we added a
video recording feature?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.996 --> 00:17:00.476 A:middle
What if we added a
video recording feature?

00:17:00.476 --> 00:17:01.976 A:middle
All of these things are
going to have to remember

00:17:01.976 --> 00:17:06.156 A:middle
to update the character
count, and, I hope anyway

00:17:06.156 --> 00:17:08.695 A:middle
that you're starting to
get that sort of taste

00:17:08.695 --> 00:17:11.026 A:middle
versus ability smell again.

00:17:11.326 --> 00:17:12.786 A:middle
Something seems amiss here,

00:17:13.346 --> 00:17:17.336 A:middle
and it's not exactly
clear what it is.

00:17:18.925 --> 00:17:22.646 A:middle
So again, I propose that
the solution is thinking

00:17:22.646 --> 00:17:25.336 A:middle
about the information flow

00:17:25.336 --> 00:17:26.965 A:middle
of your application
diagrammatically.

00:17:28.185 --> 00:17:30.996 A:middle
Here again is a diagram

00:17:30.996 --> 00:17:32.576 A:middle
of the information flow
in the application.

00:17:33.836 --> 00:17:35.196 A:middle
There's a text view and
there's a character count.

00:17:36.466 --> 00:17:39.386 A:middle
Both of these things are getting
their values from the model.

00:17:39.386 --> 00:17:41.726 A:middle
So that seems OK.

00:17:42.886 --> 00:17:45.226 A:middle
We've got truth, the
model is holding the truth

00:17:46.336 --> 00:17:50.736 A:middle
and we're using the right
inputs in our information flow,

00:17:50.736 --> 00:17:53.106 A:middle
but we're still not
getting the right behavior.

00:17:54.586 --> 00:17:58.026 A:middle
The reason for that is
that derived values have

00:17:58.066 --> 00:17:59.186 A:middle
to be treated differently.

00:17:59.746 --> 00:18:05.186 A:middle
Let's think about what these
derived values are in comparison


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.746 --> 00:18:05.186 A:middle
Let's think about what these
derived values are in comparison

00:18:05.546 --> 00:18:07.946 A:middle
to the truth which
provides their inputs.

00:18:09.106 --> 00:18:10.356 A:middle
Now, if you have
a derived value,

00:18:10.356 --> 00:18:12.216 A:middle
it does a couple of things.

00:18:12.216 --> 00:18:14.906 A:middle
It computes some other
value like a character count

00:18:15.156 --> 00:18:16.576 A:middle
from some set of inputs.

00:18:17.896 --> 00:18:20.036 A:middle
That's straightforward; we saw
that in updateCharacterCount.

00:18:21.306 --> 00:18:26.466 A:middle
Separately, it needs to
recompute that output when one

00:18:26.466 --> 00:18:28.026 A:middle
of the inputs changes.

00:18:29.296 --> 00:18:33.216 A:middle
These requirements are really
very much like a cache.

00:18:33.756 --> 00:18:37.496 A:middle
And I propose to you that
everywhere in your program

00:18:37.496 --> 00:18:40.246 A:middle
where you have something
like a character count,

00:18:40.436 --> 00:18:42.336 A:middle
which seems like a very
straightforward thing,

00:18:42.336 --> 00:18:45.356 A:middle
it's just a value derived
from another value.

00:18:45.576 --> 00:18:50.456 A:middle
All of those things have many of
the same properties of a cache,

00:18:51.016 --> 00:18:54.146 A:middle
which means that they're
subject to the same problems

00:18:54.206 --> 00:18:55.406 A:middle
that a cache has as well.

00:18:56.176 --> 00:18:58.986 A:middle
For instance, when your
original data changes,

00:18:58.986 --> 00:19:00.786 A:middle
you need to make sure
to update the cash data


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.986 --> 00:19:00.786 A:middle
you need to make sure
to update the cash data

00:19:00.786 --> 00:19:03.366 A:middle
or else you are going
to have staleness bugs.

00:19:04.596 --> 00:19:08.176 A:middle
And on the flip side, if the
original data hasn't changed,

00:19:09.106 --> 00:19:10.246 A:middle
then you shouldn't be going

00:19:10.246 --> 00:19:13.016 A:middle
about generating new
cache representations

00:19:13.016 --> 00:19:14.666 A:middle
of that information
either, or else you're going

00:19:14.666 --> 00:19:15.706 A:middle
to have efficiency problems.

00:19:17.146 --> 00:19:21.676 A:middle
Now our problem here is
staleness, and you can see

00:19:21.676 --> 00:19:27.846 A:middle
that the same issues apply for
truth versus derived values

00:19:28.146 --> 00:19:32.626 A:middle
as they do for caches and the
values which are being cached.

00:19:32.626 --> 00:19:36.776 A:middle
So let's focus on the
staleness issue here and try

00:19:36.776 --> 00:19:39.166 A:middle
to understand what's going
on with our application.

00:19:39.166 --> 00:19:39.986 A:middle
How do we get here?

00:19:40.106 --> 00:19:40.986 A:middle
Where did we go wrong?

00:19:41.916 --> 00:19:43.876 A:middle
And how do we model it with
these information diagrams?

00:19:43.906 --> 00:19:46.976 A:middle
So, returning to this diagram,

00:19:48.046 --> 00:19:52.116 A:middle
we see that the model's value
defines the text view value.

00:19:53.406 --> 00:19:56.096 A:middle
I guess I didn't show it to you,
but take me on my word on that,

00:19:56.156 --> 00:19:57.236 A:middle
you know, the model's
value changes

00:19:57.236 --> 00:19:58.336 A:middle
and we set the text view values.

00:19:58.336 --> 00:19:59.216 A:middle
It's very straight forward.

00:19:59.216 --> 00:20:00.976 A:middle
We haven't seen any bugs with
that, at least not yet anyway.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.216 --> 00:20:00.976 A:middle
We haven't seen any bugs with
that, at least not yet anyway.

00:20:01.126 --> 00:20:03.496 A:middle
So let's go ahead and assume
that this is how it works ,

00:20:03.526 --> 00:20:07.116 A:middle
nd when the model is changed,
the text view is invalidated.

00:20:07.116 --> 00:20:08.326 A:middle
So, all of that is fine.

00:20:08.606 --> 00:20:10.616 A:middle
The problem that we're having
is with the character count.

00:20:11.516 --> 00:20:13.506 A:middle
We've seen the definition
of updateCharacterCount.

00:20:13.506 --> 00:20:16.716 A:middle
We know that the character
count is deriving its value

00:20:16.716 --> 00:20:17.426 A:middle
from the model.

00:20:18.026 --> 00:20:21.596 A:middle
But when the model changes,

00:20:21.596 --> 00:20:23.076 A:middle
the character count
is not invalidated.

00:20:23.616 --> 00:20:26.396 A:middle
Rather it's when the
text view changes,

00:20:27.236 --> 00:20:29.156 A:middle
the character count
is being invalidated.

00:20:29.686 --> 00:20:33.306 A:middle
And the lopsidedness of this
diagram should hopefully

00:20:33.306 --> 00:20:34.316 A:middle
indicate something to you.

00:20:34.316 --> 00:20:37.216 A:middle
You know, each of these arrows
is basically doing half a job.

00:20:37.426 --> 00:20:39.496 A:middle
You're splitting up
these responsibilities

00:20:39.806 --> 00:20:40.656 A:middle
in 2 different places,

00:20:41.606 --> 00:20:43.376 A:middle
and that's really
the cause of our bug.

00:20:43.376 --> 00:20:46.676 A:middle
We can solve our bug by merging
those responsibilities back

00:20:46.676 --> 00:20:47.216 A:middle
to one place.

00:20:47.516 --> 00:20:48.966 A:middle
We can solve the
staleness problem by saying,

00:20:48.966 --> 00:20:50.746 A:middle
"OK whenever the model
changes, we need to make sure

00:20:50.746 --> 00:20:54.276 A:middle
to update all the values which
are derived from that model."

00:20:55.716 --> 00:20:57.326 A:middle
It's really easy
to do this in Swift

00:20:57.326 --> 00:21:00.336 A:middle
because we've got these
fancy new property observers.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.326 --> 00:21:00.336 A:middle
because we've got these
fancy new property observers.

00:21:01.576 --> 00:21:03.176 A:middle
All we have to do is add

00:21:03.176 --> 00:21:05.286 A:middle
that updateCharacterCount
call to our didSet block.

00:21:06.166 --> 00:21:09.576 A:middle
And in general, you're
going to be way better off

00:21:10.216 --> 00:21:12.356 A:middle
if you always keep those
arrows merged together;

00:21:12.906 --> 00:21:14.936 A:middle
unless there's a very
pressing reason not to.

00:21:16.316 --> 00:21:19.296 A:middle
So, that's just one more tool
in your tool bag for thinking

00:21:19.296 --> 00:21:22.036 A:middle
about the complexity
in your application.

00:21:22.436 --> 00:21:24.606 A:middle
Actually draw out these
information flows.

00:21:25.176 --> 00:21:26.036 A:middle
What are the boxes?

00:21:26.266 --> 00:21:27.046 A:middle
What are the arrows?

00:21:27.486 --> 00:21:30.966 A:middle
Do each of those arrows
actually mean both definition

00:21:31.076 --> 00:21:32.146 A:middle
and invalidation?

00:21:32.666 --> 00:21:33.816 A:middle
Because they need to.

00:21:34.246 --> 00:21:35.506 A:middle
Or else you might have
staleness problems.

00:21:36.246 --> 00:21:41.066 A:middle
Now, finally, I'd like to turn
your attention to the text view.

00:21:42.466 --> 00:21:45.326 A:middle
Now we said, OK, the text
view is getting its value

00:21:45.606 --> 00:21:48.556 A:middle
from the model, and that
part appears to work.

00:21:48.556 --> 00:21:51.046 A:middle
But we know that when the
user types into the text view,

00:21:51.046 --> 00:21:52.386 A:middle
that model must be
getting updated.

00:21:52.716 --> 00:21:54.716 A:middle
After all, I can make
a new journal entry

00:21:55.216 --> 00:21:58.516 A:middle
and it appears to get saved.

00:21:58.706 --> 00:22:01.506 A:middle
So there must be some reverse
relationship here, too.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.706 --> 00:22:01.506 A:middle
So there must be some reverse
relationship here, too.

00:22:02.086 --> 00:22:05.296 A:middle
How do we think about that
schematically in the same way?

00:22:05.296 --> 00:22:08.206 A:middle
And in particular, this looks

00:22:08.206 --> 00:22:11.716 A:middle
like an infinite
loop, but it's not.

00:22:13.016 --> 00:22:14.086 A:middle
We don't have a stack overflow.

00:22:14.386 --> 00:22:16.766 A:middle
So these arrows must be
asymmetric in some way.

00:22:17.346 --> 00:22:20.116 A:middle
And I propose to
you that in thinking

00:22:20.116 --> 00:22:22.716 A:middle
about how new truth is created,

00:22:23.506 --> 00:22:26.406 A:middle
you need to carefully
consider the asymmetry

00:22:26.766 --> 00:22:29.036 A:middle
of those relationships
in your application.

00:22:29.116 --> 00:22:29.666 A:middle
All right.

00:22:30.276 --> 00:22:36.206 A:middle
So let's return to our app and
talk about creating new truth.

00:22:36.396 --> 00:22:38.146 A:middle
Now our application has
another feature I haven't told

00:22:38.146 --> 00:22:38.526 A:middle
you about.

00:22:39.086 --> 00:22:42.226 A:middle
That feature is that I can share
my journal with a loved one.

00:22:43.016 --> 00:22:45.256 A:middle
I can let my fiancée see
all these entries I write.

00:22:45.896 --> 00:22:50.686 A:middle
And that's a great feature,
but it's complicated somewhat

00:22:50.686 --> 00:22:52.306 A:middle
by the fact that there's
this Edit button here.

00:22:53.976 --> 00:22:56.946 A:middle
You know, if I were to
start editing this entry,

00:22:57.076 --> 00:22:59.126 A:middle
and you see our character
count issue on display again,

00:22:59.766 --> 00:23:01.146 A:middle
if I were to start
editing this entry--


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.766 --> 00:23:01.146 A:middle
if I were to start
editing this entry--

00:23:01.146 --> 00:23:03.486 A:middle
oh, you don't need this
break point anymore.

00:23:05.796 --> 00:23:11.446 A:middle
Then, we don't expect for
my fiancée if she's staring

00:23:11.446 --> 00:23:15.106 A:middle
at her phone to actually see
this edited journal entry,

00:23:15.146 --> 00:23:15.416 A:middle
right.

00:23:15.416 --> 00:23:19.626 A:middle
Because I could hit Cancel,
and I'd be throwing it out,

00:23:19.626 --> 00:23:21.496 A:middle
presumably the old entry
would still be there.

00:23:22.766 --> 00:23:25.626 A:middle
So, I said that we're
working with the model here,

00:23:25.626 --> 00:23:29.026 A:middle
but we must not be
working with the model.

00:23:29.026 --> 00:23:32.186 A:middle
We must be working
with some other model

00:23:32.576 --> 00:23:34.996 A:middle
that has a relationship
to the first model.

00:23:35.436 --> 00:23:38.046 A:middle
Because if there were
really one model,

00:23:38.546 --> 00:23:41.296 A:middle
then there will be no real way
to implement this cancel button

00:23:41.296 --> 00:23:44.416 A:middle
and she would be seeing those
changes as soon as I made them.

00:23:44.976 --> 00:23:51.236 A:middle
I'm going to suggest that
thinking about the relationship

00:23:51.236 --> 00:23:55.696 A:middle
between this editing UIs model
and the underlying model,

00:23:55.866 --> 00:24:00.086 A:middle
which it is editing, is actually
the same as the relationship


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:55.866 --> 00:24:00.086 A:middle
which it is editing, is actually
the same as the relationship

00:24:00.506 --> 00:24:04.716 A:middle
between the model underlying
the text view and the new values

00:24:04.716 --> 00:24:06.476 A:middle
that the text view is
emitting to the model.

00:24:07.066 --> 00:24:10.226 A:middle
But if we're going to think
about this effectively,

00:24:11.116 --> 00:24:15.676 A:middle
we really need to be
able to think about it

00:24:15.776 --> 00:24:18.626 A:middle
from a diagrammatic
perspective so that we can see

00:24:18.866 --> 00:24:20.876 A:middle
where everything is
and how it's going.

00:24:21.176 --> 00:24:24.006 A:middle
So, let's talk about
these arrows.

00:24:24.596 --> 00:24:26.586 A:middle
Let's talk about what they mean.

00:24:27.766 --> 00:24:28.816 A:middle
What's that asymmetry?

00:24:29.706 --> 00:24:32.346 A:middle
We know if we start
with just a text view,

00:24:33.816 --> 00:24:36.046 A:middle
that the text views value is
defined by the models value.

00:24:36.786 --> 00:24:38.296 A:middle
We also know that if
we edit the text view,

00:24:38.296 --> 00:24:39.986 A:middle
somehow that model value
is getting updated.

00:24:41.176 --> 00:24:45.966 A:middle
But, the text view is
deferent to the model value.

00:24:46.816 --> 00:24:48.996 A:middle
If the model value
were to change out from

00:24:48.996 --> 00:24:51.106 A:middle
out of the text view, somebody
were to just set the body

00:24:51.106 --> 00:24:54.566 A:middle
to something else, that text
view would probably just update

00:24:54.566 --> 00:24:57.496 A:middle
immediately to that new
value and if some other piece

00:24:57.496 --> 00:25:01.496 A:middle
of the program were wondering
what is the body value


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.496 --> 00:25:01.496 A:middle
of the program were wondering
what is the body value

00:25:01.646 --> 00:25:04.646 A:middle
of this journal entry, they
wouldn't ask the text view,

00:25:05.046 --> 00:25:07.406 A:middle
or at least we hope that they
wouldn't as we saw earlier.

00:25:07.746 --> 00:25:10.476 A:middle
Instead, we hope, that
they would ask the model.

00:25:11.836 --> 00:25:16.106 A:middle
The model is truth, and these
derived values are deferent

00:25:16.106 --> 00:25:16.766 A:middle
to truth.

00:25:16.886 --> 00:25:19.346 A:middle
These new values they
emit, as you edit,

00:25:20.206 --> 00:25:23.776 A:middle
are like suggestions
flowing back up the graph

00:25:24.146 --> 00:25:26.716 A:middle
to the model along
these dashed arrows.

00:25:26.956 --> 00:25:29.086 A:middle
Truth: new pieces
of information.

00:25:29.086 --> 00:25:33.306 A:middle
Fact: these things flow from
the model to the derived values

00:25:34.256 --> 00:25:37.126 A:middle
and suggested new pieces
of information flow back

00:25:37.126 --> 00:25:38.156 A:middle
from the text view to the model;

00:25:38.436 --> 00:25:40.106 A:middle
because of course there
could be validation.

00:25:40.656 --> 00:25:43.386 A:middle
The behavior of our
application with respect

00:25:43.656 --> 00:25:45.866 A:middle
to that 140-character
Twitter limit could be

00:25:45.866 --> 00:25:46.726 A:middle
that we just truncate.

00:25:47.456 --> 00:25:49.176 A:middle
So, it could be that that
suggested value is not

00:25:49.176 --> 00:25:50.946 A:middle
applied exactly.

00:25:51.496 --> 00:25:54.626 A:middle
In this way, this
relationship is asymmetrical,

00:25:55.716 --> 00:25:59.476 A:middle
and we can use the same
structure of thinking to think

00:25:59.476 --> 00:26:03.476 A:middle
about the "entry viewing
controller", which presented


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.476 --> 00:26:03.476 A:middle
about the "entry viewing
controller", which presented

00:26:03.476 --> 00:26:07.236 A:middle
that editing controller, and
the "entry editing controller".

00:26:07.786 --> 00:26:10.256 A:middle
There's some original model, and
that's what my fiancée is seeing

00:26:10.256 --> 00:26:11.076 A:middle
if she looks at the app.

00:26:11.076 --> 00:26:14.406 A:middle
And that's the one that's
going to still be there

00:26:14.506 --> 00:26:17.026 A:middle
if we hit Cancel and
then there's the model

00:26:17.026 --> 00:26:21.146 A:middle
that we're editing
which began from a copy

00:26:21.526 --> 00:26:22.436 A:middle
of the original model.

00:26:23.296 --> 00:26:24.956 A:middle
So in the same way as
these other relationships

00:26:24.956 --> 00:26:27.946 A:middle
in our graph, the model that
we're editing is derived

00:26:27.946 --> 00:26:28.816 A:middle
from the original model.

00:26:30.286 --> 00:26:32.486 A:middle
And when we hit that
Done button,

00:26:33.056 --> 00:26:37.696 A:middle
our editing controller
is suggesting a new value

00:26:37.696 --> 00:26:39.746 A:middle
for the model to the
viewing controller.

00:26:40.776 --> 00:26:43.606 A:middle
That is how new truth
is created.

00:26:43.606 --> 00:26:48.986 A:middle
I want you to imagine with me,
because it isn't on the slide,

00:26:49.436 --> 00:26:53.436 A:middle
that there is a dashed arrow
coming from the model back

00:26:53.436 --> 00:26:56.396 A:middle
up to the original model;
that is how you can think

00:26:56.396 --> 00:26:57.386 A:middle
about this relationship.

00:26:58.256 --> 00:27:01.706 A:middle
Just as the model may
validate the text views value


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.256 --> 00:27:01.706 A:middle
Just as the model may
validate the text views value

00:27:01.706 --> 00:27:03.556 A:middle
as it's coming out
of the text view,

00:27:03.756 --> 00:27:07.996 A:middle
the original entry view
controller may be validating the

00:27:08.036 --> 00:27:08.896 A:middle
edited entry.

00:27:09.846 --> 00:27:10.996 A:middle
For instance, if she were able

00:27:10.996 --> 00:27:12.646 A:middle
to edit those journal
entries also,

00:27:12.726 --> 00:27:13.826 A:middle
there could be a conflict now.

00:27:14.066 --> 00:27:16.256 A:middle
And so when the new
model value is suggested,

00:27:16.596 --> 00:27:19.606 A:middle
some UI might be presented to
allow that merge to happen.

00:27:20.286 --> 00:27:24.396 A:middle
In the same way, the editing
controller, its value is derived

00:27:24.396 --> 00:27:25.486 A:middle
from the viewing controller

00:27:25.846 --> 00:27:27.586 A:middle
and the new value
is only a suggestion

00:27:28.286 --> 00:27:29.236 A:middle
to the viewing controller.

00:27:29.806 --> 00:27:34.216 A:middle
So, we've worked through how
these techniques can help us

00:27:34.216 --> 00:27:36.166 A:middle
solve several real world
application problems

00:27:37.086 --> 00:27:39.906 A:middle
and hopefully they
suggest to you ways

00:27:39.906 --> 00:27:41.946 A:middle
that you can solve the
kinds of problems you face

00:27:41.946 --> 00:27:42.786 A:middle
in your app every day.

00:27:43.056 --> 00:27:45.236 A:middle
You just have to actually
think about how information

00:27:45.236 --> 00:27:46.856 A:middle
and events are flowing
through your application.

00:27:47.426 --> 00:27:48.776 A:middle
First, where is truth?

00:27:48.776 --> 00:27:51.206 A:middle
Who really knows?

00:27:51.276 --> 00:27:54.596 A:middle
Who is really responsible
for those fundamental pieces

00:27:54.596 --> 00:27:57.726 A:middle
of state, information and
events in your application?

00:27:58.586 --> 00:28:00.466 A:middle
And then once you start
thinking about how they flow


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.586 --> 00:28:00.466 A:middle
And then once you start
thinking about how they flow

00:28:00.466 --> 00:28:03.466 A:middle
through your application,
remember the difference

00:28:03.466 --> 00:28:06.276 A:middle
between truth and the
values derived from truth.

00:28:07.566 --> 00:28:09.576 A:middle
Remember that values derived
from truth are in many ways

00:28:09.576 --> 00:28:12.786 A:middle
like a cache and needed
to be treated as such.

00:28:13.716 --> 00:28:16.266 A:middle
And finally, remember that
when new truth is created,

00:28:17.576 --> 00:28:20.696 A:middle
that relationship is
asymmetrical by necessity

00:28:20.786 --> 00:28:22.526 A:middle
in order to avoid some
kind of infinite loop.

00:28:23.466 --> 00:28:25.906 A:middle
One direction -- facts flow.

00:28:25.906 --> 00:28:29.556 A:middle
And then the other direction
-- suggested new values flow,

00:28:29.746 --> 00:28:31.636 A:middle
which may need to be merged
or validated in some way.

00:28:31.636 --> 00:28:34.576 A:middle
And by thinking systematically
about the information flow

00:28:34.576 --> 00:28:36.806 A:middle
in your application, you
can really get a handle

00:28:37.016 --> 00:28:37.746 A:middle
on complexity.

00:28:37.746 --> 00:28:38.366 A:middle
All right.

00:28:39.736 --> 00:28:42.106 A:middle
So, now let's move on.

00:28:43.496 --> 00:28:45.856 A:middle
I'm going to invite
Colin Barrett up to talk

00:28:45.856 --> 00:28:48.066 A:middle
about defining clear
responsibilities

00:28:48.066 --> 00:28:48.826 A:middle
for your application.

00:28:49.516 --> 00:28:55.616 A:middle
[ Applause ]

00:28:56.116 --> 00:28:56.976 A:middle
&gt;&gt; Thank you, Andy.

00:28:57.386 --> 00:28:58.356 A:middle
Good afternoon, everybody.

00:28:59.256 --> 00:29:03.946 A:middle
In this next section, I'm going
to show you how to identify


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.256 --> 00:29:03.946 A:middle
In this next section, I'm going
to show you how to identify

00:29:04.826 --> 00:29:08.646 A:middle
and tease apart responsibilities
in your application.

00:29:09.386 --> 00:29:14.746 A:middle
Let's start with an
example: form validation.

00:29:16.126 --> 00:29:18.486 A:middle
We've all at least
used a form like this.

00:29:19.516 --> 00:29:21.166 A:middle
Many of us have,
maybe, implemented one.

00:29:22.716 --> 00:29:26.096 A:middle
You know, it's not as simple as
just putting some text fields

00:29:26.096 --> 00:29:27.796 A:middle
on the screen and a button.

00:29:29.776 --> 00:29:32.556 A:middle
There are rules about
what values are allowed

00:29:32.816 --> 00:29:35.586 A:middle
in the different text
fields, the four we have here,

00:29:36.206 --> 00:29:38.906 A:middle
and how the other
interface elements

00:29:39.496 --> 00:29:45.186 A:middle
in this view are enabled and
disabled, or shown and hidden,

00:29:46.296 --> 00:29:49.666 A:middle
depending on the values
of these text fields.

00:29:49.776 --> 00:29:55.826 A:middle
So, let's say we're
implementing this view here.

00:29:56.806 --> 00:29:57.576 A:middle
Where would we start?

00:29:58.256 --> 00:30:01.146 A:middle
Well, we'll need to know


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.256 --> 00:30:01.146 A:middle
Well, we'll need to know

00:30:01.146 --> 00:30:03.026 A:middle
when the user finishes
editing a text field.

00:30:04.066 --> 00:30:06.896 A:middle
So, we'll implement
the text field "did

00:30:07.426 --> 00:30:11.136 A:middle
and editing" delegate message
on our view controller.

00:30:12.546 --> 00:30:15.326 A:middle
And in that delegate
message we're going to need

00:30:15.326 --> 00:30:18.776 A:middle
to consider each text field
and if they're all valid,

00:30:19.466 --> 00:30:20.516 A:middle
enable the sign-up button.

00:30:22.216 --> 00:30:27.566 A:middle
But, we can't exactly consider
all of these fields uniformly.

00:30:28.336 --> 00:30:29.816 A:middle
They all have different rules.

00:30:29.816 --> 00:30:33.766 A:middle
Let's look at the rules
for the username field.

00:30:33.766 --> 00:30:39.306 A:middle
We have this regular expression
that our server engineers gave

00:30:39.306 --> 00:30:41.586 A:middle
to us and we have to match
that against the contents

00:30:41.586 --> 00:30:42.676 A:middle
of the username text field.

00:30:43.256 --> 00:30:46.036 A:middle
If we don't have any--
If it doesn't match,

00:30:46.796 --> 00:30:48.376 A:middle
we're going to need to
show the users somehow

00:30:48.376 --> 00:30:51.106 A:middle
that they've messed up
and then you go back

00:30:51.106 --> 00:30:53.926 A:middle
and correct the mistake.

00:30:54.066 --> 00:30:56.996 A:middle
Now, there's one other
complication here and that's

00:30:56.996 --> 00:30:58.606 A:middle
if our text fields are empty.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:01.316 --> 00:31:04.826 A:middle
If our text field is empty
when we're checking each field,

00:31:06.256 --> 00:31:07.466 A:middle
we're going to want
to leave it alone.

00:31:07.986 --> 00:31:13.516 A:middle
But when we're considering the
state of the sign-up button,

00:31:13.676 --> 00:31:17.976 A:middle
we're going to want to leave
the sign-up button disabled.

00:31:18.586 --> 00:31:21.946 A:middle
So, we're going to want
to leave it disabled

00:31:21.946 --> 00:31:23.986 A:middle
because we don't want
the user to proceed

00:31:23.986 --> 00:31:27.016 A:middle
with a partially
filled out form.

00:31:27.176 --> 00:31:30.106 A:middle
So, let's go back to this
username part and see what

00:31:30.106 --> 00:31:31.656 A:middle
that would look like in code.

00:31:31.656 --> 00:31:36.466 A:middle
So, yes, this is a lot of code,

00:31:36.566 --> 00:31:40.206 A:middle
but it's all different
sorts of things.

00:31:40.206 --> 00:31:41.796 A:middle
It's intermingled.

00:31:41.796 --> 00:31:46.096 A:middle
We have local variables to track
the state of the text fields

00:31:46.096 --> 00:31:47.686 A:middle
and of empty text fields.

00:31:48.626 --> 00:31:51.536 A:middle
We have a bunch of regular
expression code right next

00:31:51.536 --> 00:31:56.466 A:middle
to that, and in between all of
that, we have these 2 lines,

00:31:57.126 --> 00:31:58.956 A:middle
which are really
the most important

00:31:59.366 --> 00:32:02.326 A:middle
for what the view controller
does, which is to manage


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.366 --> 00:32:02.326 A:middle
for what the view controller
does, which is to manage

00:32:02.756 --> 00:32:05.216 A:middle
and configure its
constituent views.

00:32:07.256 --> 00:32:10.056 A:middle
So, much like we can
diagram information flow

00:32:10.056 --> 00:32:15.246 A:middle
in our application, we can
also diagram responsibilities.

00:32:15.776 --> 00:32:16.546 A:middle
Who does what?

00:32:17.856 --> 00:32:20.856 A:middle
Here is the diagram that we've
been thinking about so far.

00:32:20.856 --> 00:32:24.016 A:middle
We have our view
controller, which manages

00:32:24.016 --> 00:32:27.456 A:middle
and configures its constituent
views, and we have our views,

00:32:28.266 --> 00:32:30.026 A:middle
which display the
data they're given

00:32:30.526 --> 00:32:33.216 A:middle
with core animation
and core graphics.

00:32:33.956 --> 00:32:38.156 A:middle
But we've identified a third
overlapping responsibility:

00:32:38.766 --> 00:32:39.436 A:middle
validation.

00:32:40.956 --> 00:32:46.216 A:middle
This may not seem so bad, but if
we add another view controller

00:32:46.216 --> 00:32:49.926 A:middle
that also has to do similar
validation, they don't have

00:32:49.926 --> 00:32:51.256 A:middle
that same logic in two places.

00:32:51.626 --> 00:32:55.556 A:middle
A bug in one has to
be fixed in the other.

00:32:55.786 --> 00:32:58.066 A:middle
And since these are
in different places,

00:32:58.266 --> 00:33:00.456 A:middle
it's likely that they'll
diverge over time.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.266 --> 00:33:00.456 A:middle
it's likely that they'll
diverge over time.

00:33:00.926 --> 00:33:04.476 A:middle
A type of rule get added in
one place but not the other

00:33:04.476 --> 00:33:05.656 A:middle
because it's not
necessary there,

00:33:06.086 --> 00:33:08.266 A:middle
making it even more
difficult to change

00:33:08.796 --> 00:33:13.686 A:middle
and fix these common
issues over time.

00:33:13.946 --> 00:33:18.466 A:middle
So, what we want to do is
separate that responsibility

00:33:18.466 --> 00:33:22.726 A:middle
out into one place that can be
shared by both view controllers.

00:33:27.096 --> 00:33:29.856 A:middle
So, to do that, we first need

00:33:29.856 --> 00:33:33.766 A:middle
to identify what
validation actually is.

00:33:34.806 --> 00:33:36.606 A:middle
When thinking about
these types of questions,

00:33:37.456 --> 00:33:40.786 A:middle
it's useful to think of
the inputs and outputs.

00:33:41.686 --> 00:33:45.816 A:middle
Or, to put in another way,
what information do I need

00:33:45.816 --> 00:33:48.446 A:middle
and what questions am
I trying to answer?

00:33:49.266 --> 00:33:53.436 A:middle
So, as I build through this
common sense explanation

00:33:53.436 --> 00:33:56.446 A:middle
of what validation is, I'm
going to fill in the inputs

00:33:56.616 --> 00:33:59.456 A:middle
and outputs in this table.

00:33:59.616 --> 00:34:05.306 A:middle
So, validation seems to be that
if you give me an input value,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.616 --> 00:34:05.306 A:middle
So, validation seems to be that
if you give me an input value,

00:34:06.626 --> 00:34:07.836 A:middle
I can tell you if it's valid.

00:34:08.866 --> 00:34:10.866 A:middle
And if it's not valid,
I can tell you why.

00:34:11.576 --> 00:34:15.235 A:middle
These pretty directly translate
to fairly simple data types.

00:34:16.585 --> 00:34:19.826 A:middle
And if we look at what that
looks like here in Swift --

00:34:21.916 --> 00:34:23.376 A:middle
forgive the syntax
error there --

00:34:23.856 --> 00:34:26.666 A:middle
we have our output
types right here

00:34:26.666 --> 00:34:28.446 A:middle
but we're missing our input.

00:34:29.726 --> 00:34:32.315 A:middle
That's because we want to
leave this actually open

00:34:32.315 --> 00:34:33.966 A:middle
to interpretation in this case.

00:34:34.656 --> 00:34:37.126 A:middle
Because a good technique
for dealing

00:34:37.126 --> 00:34:40.146 A:middle
with complicated
responsibilities is to be able

00:34:40.146 --> 00:34:43.646 A:middle
to build larger units
out of smaller ones.

00:34:43.916 --> 00:34:45.956 A:middle
So, in this case, we'll
build larger validators

00:34:46.966 --> 00:34:47.926 A:middle
out of smaller ones.

00:34:48.786 --> 00:34:52.576 A:middle
So for those larger validators,
the input will be implicit

00:34:53.626 --> 00:34:56.216 A:middle
in the constituent
validator's input.

00:34:57.186 --> 00:34:59.126 A:middle
This technique is
called composition.

00:34:59.496 --> 00:35:02.666 A:middle
We're composing a larger
validator out of smaller ones


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.496 --> 00:35:02.666 A:middle
We're composing a larger
validator out of smaller ones

00:35:03.666 --> 00:35:06.196 A:middle
and it works totally
fine in Objective-C, too.

00:35:06.756 --> 00:35:08.616 A:middle
I also really like Swift.

00:35:10.016 --> 00:35:14.086 A:middle
So, let's look at what
a username object,

00:35:14.256 --> 00:35:15.736 A:middle
username validator object,

00:35:15.806 --> 00:35:18.216 A:middle
that implements this validation
protocol would look like.

00:35:19.426 --> 00:35:21.726 A:middle
Well, we have our input
here, it's a String,

00:35:22.426 --> 00:35:28.156 A:middle
and this validateWitherror
function is where we're going

00:35:28.156 --> 00:35:30.436 A:middle
to have our regular
expression code.

00:35:30.676 --> 00:35:32.076 A:middle
It's now isolated.

00:35:32.496 --> 00:35:34.936 A:middle
It's not intermingled with
all of these other code.

00:35:35.556 --> 00:35:40.296 A:middle
We can do likewise for
password validation.

00:35:41.756 --> 00:35:46.536 A:middle
But, maybe wondering that this
only represents the validity

00:35:46.536 --> 00:35:49.716 A:middle
of a single password
field, then that's correct.

00:35:49.876 --> 00:35:53.516 A:middle
We need to represent that two
password fields match in value,

00:35:53.886 --> 00:35:55.876 A:middle
in addition to not
being too short,

00:35:55.976 --> 00:35:58.366 A:middle
not being high MoM,
things like that.

00:35:59.186 --> 00:36:01.926 A:middle
So, we'll create a
SetPasswordValidator


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.186 --> 00:36:01.926 A:middle
So, we'll create a
SetPasswordValidator

00:36:02.076 --> 00:36:04.136 A:middle
that has two password
validators.

00:36:04.396 --> 00:36:05.696 A:middle
This is composition in action.

00:36:06.396 --> 00:36:07.316 A:middle
It's going to represent,

00:36:08.186 --> 00:36:11.176 A:middle
in addition so that the password
fields individually are valid,

00:36:12.016 --> 00:36:13.616 A:middle
that they're also
matching in value.

00:36:14.856 --> 00:36:17.326 A:middle
We can also apply this
composition technique

00:36:17.746 --> 00:36:18.786 A:middle
to our overall form.

00:36:19.356 --> 00:36:23.856 A:middle
We have our usernameValidator,
setPasswordValidator

00:36:24.266 --> 00:36:25.596 A:middle
and emailAddressValidator.

00:36:29.656 --> 00:36:32.186 A:middle
This is also where we'll
handle the behavior of nil,

00:36:32.186 --> 00:36:33.086 A:middle
we talked about earlier.

00:36:33.736 --> 00:36:38.706 A:middle
The constituent validators
will allow nil,

00:36:38.956 --> 00:36:41.156 A:middle
because we don't want the
individual text fields

00:36:41.156 --> 00:36:43.506 A:middle
to show any sort of error
state when they're empty.

00:36:43.686 --> 00:36:44.736 A:middle
That would be just confusing.

00:36:46.126 --> 00:36:49.386 A:middle
But, this SignUpValidator
will check

00:36:49.636 --> 00:36:53.156 A:middle
that its constituent
validators have non-nil input.

00:36:54.036 --> 00:36:57.876 A:middle
And if any of those inputs are
nil, it'll say it's not valid,

00:36:58.136 --> 00:37:00.486 A:middle
allowing us to easily
disable sign-up button.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.136 --> 00:37:00.486 A:middle
allowing us to easily
disable sign-up button.

00:37:01.576 --> 00:37:03.786 A:middle
So, let's return to that
workflow we were looking

00:37:03.786 --> 00:37:08.326 A:middle
at earlier and see
what that looks like.

00:37:08.596 --> 00:37:11.466 A:middle
Now, we're able to consider
each text field uniformly

00:37:12.036 --> 00:37:14.166 A:middle
because all we do
is set the input

00:37:14.166 --> 00:37:15.566 A:middle
on the corresponding validator.

00:37:16.256 --> 00:37:18.866 A:middle
We're also able to decorate all

00:37:18.866 --> 00:37:20.376 A:middle
of the text fields
uniformly as well.

00:37:20.846 --> 00:37:23.166 A:middle
The logic and that
responsibility has been

00:37:23.166 --> 00:37:23.836 A:middle
moved elsewhere.

00:37:24.206 --> 00:37:27.286 A:middle
We're only talking to
an abstract interface.

00:37:28.376 --> 00:37:30.706 A:middle
So, let's define clear
responsibilities.

00:37:31.566 --> 00:37:35.316 A:middle
We've separated out the
responsibility of validation

00:37:35.466 --> 00:37:38.516 A:middle
from the rest of our program.

00:37:38.606 --> 00:37:41.986 A:middle
We've used composition to build

00:37:41.986 --> 00:37:44.626 A:middle
up larger pieces
from smaller ones.

00:37:45.076 --> 00:37:47.276 A:middle
Let's move on now to
our third section,

00:37:48.266 --> 00:37:49.516 A:middle
simplifying with immutability.

00:37:51.676 --> 00:37:54.496 A:middle
You may have heard on the
internet that mutability is

00:37:54.496 --> 00:37:57.566 A:middle
"bad", and you should
feel bad for using it.

00:37:58.116 --> 00:38:01.176 A:middle
But nobody's really
told you why.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.116 --> 00:38:01.176 A:middle
But nobody's really
told you why.

00:38:02.416 --> 00:38:03.286 A:middle
Why is it bad?

00:38:03.286 --> 00:38:06.016 A:middle
I mean, it's easy to use,
you just set it, right.

00:38:06.016 --> 00:38:08.716 A:middle
We're working in an imperative
oriented languages here.

00:38:08.716 --> 00:38:09.576 A:middle
We have statements.

00:38:11.466 --> 00:38:14.506 A:middle
So, to illustrate that, let's
look at another diagram.

00:38:15.006 --> 00:38:21.656 A:middle
In this diagram, the red box
represents immutable object,

00:38:21.836 --> 00:38:23.876 A:middle
which has the value of five,

00:38:24.646 --> 00:38:28.376 A:middle
and these circles here
represent other objects

00:38:28.376 --> 00:38:30.266 A:middle
that are passing this
mutable data around.

00:38:31.286 --> 00:38:34.686 A:middle
So, when A passes this
mutable object to B,

00:38:35.176 --> 00:38:39.366 A:middle
B probably doesn't want

00:38:39.366 --> 00:38:40.926 A:middle
that object changing
out from under it.

00:38:41.886 --> 00:38:45.526 A:middle
So, how do we ensure
that that happens?

00:38:45.526 --> 00:38:50.256 A:middle
Well, A still has a
reference to this object.

00:38:50.306 --> 00:38:56.626 A:middle
So, B depends on-oh, sorry, if--
yes, exactly, if A changes it,

00:38:56.626 --> 00:38:57.936 A:middle
then B sees that change.

00:38:58.506 --> 00:39:02.126 A:middle
So, B depends on A
behaving in a specific way.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:58.506 --> 00:39:02.126 A:middle
So, B depends on A
behaving in a specific way.

00:39:02.606 --> 00:39:04.326 A:middle
They're linked in this sort

00:39:04.656 --> 00:39:07.636 A:middle
of responsibility
and dependency graph.

00:39:07.936 --> 00:39:11.766 A:middle
Now, likewise if this
object now gets passed to C,

00:39:12.676 --> 00:39:15.096 A:middle
these other objects could
still have references to it.

00:39:15.096 --> 00:39:16.076 A:middle
They could still change it.

00:39:17.276 --> 00:39:19.516 A:middle
So, C may depend on A and B.

00:39:20.066 --> 00:39:25.346 A:middle
But it actually gets a little
bit worse than that, because A

00:39:25.346 --> 00:39:28.016 A:middle
or B could be waiting for C
to make some sort of change.

00:39:28.346 --> 00:39:32.146 A:middle
Maybe A has registered
for KVO observation.

00:39:32.666 --> 00:39:35.316 A:middle
Maybe B is the delegate of
this object and is waiting

00:39:35.316 --> 00:39:36.626 A:middle
for some sort of
callback to happen.

00:39:37.156 --> 00:39:39.086 A:middle
The specific timing
of that could be part

00:39:39.086 --> 00:39:40.566 A:middle
of B's implementation.

00:39:41.266 --> 00:39:45.536 A:middle
If C changes when it calls some
setter, that could screw up B.

00:39:46.496 --> 00:39:49.946 A:middle
So, we're seeing here
how mutability ties all

00:39:49.946 --> 00:39:50.996 A:middle
of these things together.

00:39:51.616 --> 00:39:54.916 A:middle
It's one of the biggest
reasons why you feel that drag

00:39:55.286 --> 00:39:57.866 A:middle
that Andy was talking about as
your application grows bigger.

00:39:58.756 --> 00:40:02.636 A:middle
And it also explains why adding
abstraction often doesn't help.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:58.756 --> 00:40:02.636 A:middle
And it also explains why adding
abstraction often doesn't help.

00:40:03.256 --> 00:40:05.936 A:middle
As long as you're passing
around the same mutable data,

00:40:06.396 --> 00:40:08.436 A:middle
it doesn't matter how
many layers you have.

00:40:08.966 --> 00:40:12.576 A:middle
You're in fact just
lashing more mutable layers

00:40:12.576 --> 00:40:14.346 A:middle
onto this big ball.

00:40:15.116 --> 00:40:17.876 A:middle
So, let's look at
what would happen

00:40:17.876 --> 00:40:19.416 A:middle
if this object was
immutable instead.

00:40:20.706 --> 00:40:21.946 A:middle
We couldn't change its value.

00:40:23.106 --> 00:40:28.036 A:middle
When A passes it to B, well,
A still has a reference to it,

00:40:28.036 --> 00:40:30.306 A:middle
but it can't change it.

00:40:30.436 --> 00:40:31.286 A:middle
No one can change it.

00:40:31.456 --> 00:40:32.436 A:middle
It can never change.

00:40:32.946 --> 00:40:35.756 A:middle
If B does need to make a
change, it has to make a copy

00:40:36.726 --> 00:40:38.056 A:middle
and pass that copy to C.

00:40:38.056 --> 00:40:41.066 A:middle
There are no arrows here;
there's no dependencies.

00:40:41.396 --> 00:40:47.146 A:middle
Everything has the data that
they have and that's it.

00:40:47.376 --> 00:40:50.546 A:middle
So, there is a tradeoff
here though, right?

00:40:51.176 --> 00:40:54.796 A:middle
Mutability is easier
to think about locally.

00:40:55.936 --> 00:40:58.366 A:middle
Think about building up
a string or an array.

00:40:59.726 --> 00:41:02.226 A:middle
It's also wasteful to
create intermediate copies


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.726 --> 00:41:02.226 A:middle
It's also wasteful to
create intermediate copies

00:41:02.806 --> 00:41:05.366 A:middle
when no else is mutating our--

00:41:05.366 --> 00:41:08.316 A:middle
when no one else can
see those mutations yet.

00:41:08.966 --> 00:41:10.296 A:middle
You may be wondering
is there a better way?

00:41:11.816 --> 00:41:14.096 A:middle
Happy to say this, Swift
Structs are that better way.

00:41:14.446 --> 00:41:18.546 A:middle
They have opt-in mutability
via the mutating keyword.

00:41:19.606 --> 00:41:23.066 A:middle
This lets you choose whether
or not a struct is mutable

00:41:23.066 --> 00:41:26.056 A:middle
or immutable, based on
using the let or our keyword

00:41:26.056 --> 00:41:29.716 A:middle
to introduce the binding to
the name when you declare it.

00:41:29.816 --> 00:41:34.736 A:middle
So, Swift Structs also have the
property that they are called

00:41:34.736 --> 00:41:36.176 A:middle
by value which just means

00:41:36.176 --> 00:41:39.376 A:middle
that a new copy is automatically
created from you when you pass

00:41:39.376 --> 00:41:41.586 A:middle
that struct from one
function to another.

00:41:42.206 --> 00:41:44.676 A:middle
You don't pass a reference
or a pointer like you do

00:41:44.676 --> 00:41:48.016 A:middle
with an Objective-C
or Swift object.

00:41:49.266 --> 00:41:51.306 A:middle
So, let's go back to
that diagram and see what

00:41:51.306 --> 00:41:52.756 A:middle
that would look like
one more time.

00:41:53.276 --> 00:41:57.916 A:middle
Here we have our Swift
Struct, happy green box,

00:41:57.916 --> 00:42:03.506 A:middle
and when we pass it from A to
B, an implicit copy is made


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:57.916 --> 00:42:03.506 A:middle
and when we pass it from A to
B, an implicit copy is made

00:42:03.726 --> 00:42:05.066 A:middle
and that's what's passed to B.

00:42:05.956 --> 00:42:07.426 A:middle
B can happily mutate.

00:42:08.216 --> 00:42:12.456 A:middle
A won't see those changes
and again when we pass it,

00:42:13.386 --> 00:42:15.696 A:middle
another copy is made,
and C gets its own copy.

00:42:17.056 --> 00:42:20.026 A:middle
So, that's one sort
of immutability,

00:42:20.336 --> 00:42:23.336 A:middle
and that's how Swift
Structs can help us be--

00:42:23.976 --> 00:42:25.946 A:middle
get a lot of the
benefits of immutability

00:42:26.736 --> 00:42:30.406 A:middle
without sacrificing programming,
ease of programability.

00:42:31.036 --> 00:42:31.786 A:middle
But there's another kind

00:42:31.786 --> 00:42:33.276 A:middle
of immutability I
want to talk about.

00:42:33.836 --> 00:42:35.526 A:middle
We can see that in
UIMotionEffect.

00:42:36.036 --> 00:42:37.496 A:middle
You're not familiar
with UIMotionEffect?

00:42:38.756 --> 00:42:42.946 A:middle
It simply adjusts properties on
views based on gyroscope data.

00:42:42.946 --> 00:42:47.226 A:middle
We use this to achieve
the parallax effects

00:42:47.226 --> 00:42:51.646 A:middle
on the Home screen and
elsewhere throughout the OS.

00:42:51.916 --> 00:42:54.256 A:middle
MotionEffects are
reusable across many views.

00:42:54.256 --> 00:42:56.416 A:middle
If you have one type of motion,

00:42:56.416 --> 00:42:58.866 A:middle
you only have to
create one effect.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:00.876 --> 00:43:03.696 A:middle
MotionEffects also have very
low latency requirements.

00:43:03.726 --> 00:43:05.976 A:middle
We don't want to get
behind the gyro data

00:43:06.746 --> 00:43:10.556 A:middle
because that looks laggy and it
really ruins the magical effect

00:43:10.556 --> 00:43:14.236 A:middle
of parallax on the Home
screen and other places.

00:43:15.636 --> 00:43:23.526 A:middle
So, again, we're going to show
how this is also immutability.

00:43:23.746 --> 00:43:26.536 A:middle
Once again by considering
the inputs and outputs

00:43:26.866 --> 00:43:30.216 A:middle
of the MotionEffect process.

00:43:30.336 --> 00:43:32.946 A:middle
MotionEffects take
a device pose,

00:43:33.096 --> 00:43:34.996 A:middle
which is simply a description

00:43:35.106 --> 00:43:37.536 A:middle
of the device's orientation
in space.

00:43:38.566 --> 00:43:42.066 A:middle
In return, a relative
offset for each key path

00:43:42.556 --> 00:43:43.716 A:middle
that we want to change.

00:43:44.276 --> 00:43:47.786 A:middle
It may be somewhat surprising

00:43:47.786 --> 00:43:49.536 A:middle
to describe a motion
effect as immutable.

00:43:49.536 --> 00:43:51.146 A:middle
It doesn't really have a bunch

00:43:51.146 --> 00:43:53.846 A:middle
of properties not
unless we're dealing

00:43:53.846 --> 00:43:55.246 A:middle
UIInterpolatingMotionEffect.

00:43:56.036 --> 00:43:58.056 A:middle
It feels more like a function.

00:43:59.066 --> 00:44:03.346 A:middle
But immutability is actually a
deep idea, and has deep power.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:59.066 --> 00:44:03.346 A:middle
But immutability is actually a
deep idea, and has deep power.

00:44:04.906 --> 00:44:08.506 A:middle
Because motion effects take
an absolute device pose

00:44:08.506 --> 00:44:09.986 A:middle
and return relative offsets,

00:44:10.576 --> 00:44:12.896 A:middle
they can always return
the same dictionary

00:44:13.426 --> 00:44:15.266 A:middle
for the same input device pose.

00:44:16.456 --> 00:44:18.726 A:middle
In much the same way that
if you don't have a setter,

00:44:18.786 --> 00:44:22.516 A:middle
you'll always return the
same value for your getter.

00:44:22.686 --> 00:44:27.256 A:middle
So, to really show that
this design is immutable,

00:44:27.606 --> 00:44:30.856 A:middle
let's look at some alternative
designs for motion effects.

00:44:32.186 --> 00:44:33.196 A:middle
Let's say that we thought

00:44:33.196 --> 00:44:37.306 A:middle
that having delta inputs rather
then an actual absolute device

00:44:37.306 --> 00:44:40.696 A:middle
pose was a better design.

00:44:40.846 --> 00:44:43.586 A:middle
Well, we would still have
our device pose data,

00:44:43.586 --> 00:44:45.756 A:middle
but it will be deltas and
we'd still be giving back

00:44:45.756 --> 00:44:46.786 A:middle
relative offsets.

00:44:47.716 --> 00:44:51.096 A:middle
But to calculate those offsets,
we would actually need to figure

00:44:51.096 --> 00:44:53.636 A:middle
out what the current
orientation of the device was.

00:44:54.506 --> 00:44:57.316 A:middle
So, we would depend
upon all previous poses

00:44:57.906 --> 00:45:01.726 A:middle
as an implicit form of input.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:57.906 --> 00:45:01.726 A:middle
as an implicit form of input.

00:45:01.856 --> 00:45:05.236 A:middle
Now our inputs are not just
all-possible device poses

00:45:05.646 --> 00:45:08.996 A:middle
but all possible sequences
of device pose deltas.

00:45:09.716 --> 00:45:11.376 A:middle
That's a lot bigger input space.

00:45:11.706 --> 00:45:14.106 A:middle
It's harder to test, it's
harder to reason about

00:45:15.066 --> 00:45:17.226 A:middle
and it's also not immutable

00:45:17.296 --> 00:45:19.496 A:middle
because as our application
changes over time,

00:45:19.876 --> 00:45:23.046 A:middle
we're going to get
different answers.

00:45:23.046 --> 00:45:26.976 A:middle
Likewise, if we had
absolute offsets rather

00:45:26.976 --> 00:45:31.656 A:middle
than relative offsets, we would
have a value for each key path

00:45:31.656 --> 00:45:33.616 A:middle
that we're returning
in absolute offset,

00:45:33.616 --> 00:45:35.776 A:middle
we would be dependent
on a particular view.

00:45:35.776 --> 00:45:40.006 A:middle
And that particular view would
make this MotionEffect not

00:45:40.006 --> 00:45:42.326 A:middle
something that was reusable
across many different places,

00:45:42.586 --> 00:45:45.266 A:middle
and again would make
it so that its value

00:45:45.796 --> 00:45:50.536 A:middle
for a particular device
pose would change over time.

00:45:50.716 --> 00:45:53.856 A:middle
So, that's simplifying
with immutability.

00:45:54.206 --> 00:45:56.906 A:middle
We've seen two different
forms of immutability,

00:45:57.526 --> 00:46:01.456 A:middle
and how we can leverage
those to build simpler,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:57.526 --> 00:46:01.456 A:middle
and how we can leverage
those to build simpler,

00:46:01.456 --> 00:46:05.226 A:middle
more easy to reason about,
portions of our application.

00:46:06.346 --> 00:46:08.536 A:middle
Being able to reason
abstractly about pieces

00:46:08.536 --> 00:46:10.076 A:middle
of your application is critical.

00:46:10.076 --> 00:46:13.326 A:middle
If you have to know every
nook and cranny of the system

00:46:13.426 --> 00:46:16.506 A:middle
and wonder if changing one thing
is going to cause something else

00:46:16.506 --> 00:46:19.586 A:middle
to break, your app just
becomes this big spider web,

00:46:19.626 --> 00:46:21.136 A:middle
that you can never
really escape from.

00:46:21.646 --> 00:46:25.956 A:middle
We've talked about a lot today.

00:46:26.156 --> 00:46:30.086 A:middle
So, let's just review everything
we've gone over right now.

00:46:30.716 --> 00:46:33.146 A:middle
First, we talked about how

00:46:33.146 --> 00:46:35.306 A:middle
to design information
flow in your application.

00:46:36.236 --> 00:46:39.626 A:middle
We learned the difference
between truth and derived value,

00:46:39.626 --> 00:46:41.796 A:middle
and how new truth is created.

00:46:42.356 --> 00:46:45.626 A:middle
We saw how to define
clear responsibilities,

00:46:45.996 --> 00:46:48.656 A:middle
how to tease apart
different portions of your app

00:46:48.656 --> 00:46:50.126 A:middle
and how to isolate them.

00:46:50.616 --> 00:46:53.346 A:middle
We also saw how to
use that isolation

00:46:53.606 --> 00:46:54.966 A:middle
to build things with
composition.

00:46:56.536 --> 00:46:59.036 A:middle
We also saw how to
simplify with immutability

00:46:59.406 --> 00:47:01.916 A:middle
to increase our ability
to abstractly reason


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:59.406 --> 00:47:01.916 A:middle
to increase our ability
to abstractly reason

00:47:02.286 --> 00:47:03.426 A:middle
about our application.

00:47:04.626 --> 00:47:05.186 A:middle
So, what now?

00:47:05.636 --> 00:47:08.876 A:middle
You've heard this talk; maybe,
hopefully, you're all fired

00:47:08.876 --> 00:47:10.246 A:middle
up about these concepts.

00:47:10.246 --> 00:47:15.936 A:middle
Go back to your app; put
some of these in action.

00:47:16.186 --> 00:47:17.436 A:middle
When you're designing a feature,

00:47:17.676 --> 00:47:19.086 A:middle
think about the information
flow,

00:47:19.246 --> 00:47:20.656 A:middle
think about the
responsibilities.

00:47:21.696 --> 00:47:23.526 A:middle
Share this talk with
your coworkers.

00:47:24.576 --> 00:47:27.536 A:middle
Tell them about a time in your
app, specifically your app,

00:47:27.746 --> 00:47:30.756 A:middle
where there was a bug, where you
were maybe updating some sort

00:47:30.756 --> 00:47:33.266 A:middle
of cache, that you didn't
really even realize was a cache

00:47:33.266 --> 00:47:33.976 A:middle
until just now.

00:47:37.656 --> 00:47:39.016 A:middle
That's all we've got today.

00:47:39.016 --> 00:47:42.076 A:middle
For more information,
contact Jake Behrens.

00:47:42.956 --> 00:47:47.386 A:middle
Bill gave a talk this
morning about some other types

00:47:47.386 --> 00:47:49.116 A:middle
of design patterns
in our frameworks.

00:47:50.566 --> 00:47:51.386 A:middle
Thank you for listening.

00:47:51.686 --> 00:47:52.476 A:middle
Have a great afternoon.

00:47:53.516 --> 00:47:59.760 A:middle
[ Applause ]

