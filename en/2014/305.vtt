WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:11.686 A:middle
[ Silence ]

00:00:12.186 --> 00:00:14.796 A:middle
&gt;&gt; Hi. My name is James Wilson
and I'm an engineering manager.

00:00:14.796 --> 00:00:18.636 A:middle
And one of the things that my
team works is on the frameworks

00:00:18.636 --> 00:00:21.936 A:middle
that power the App Store
and the iBookstore in OS X,

00:00:21.936 --> 00:00:24.826 A:middle
which in course -- of course
includes the unified receipt

00:00:24.826 --> 00:00:26.446 A:middle
format that we introduced
last year.

00:00:27.726 --> 00:00:30.296 A:middle
So in this session, Preventing
Unauthorized Purchases

00:00:30.296 --> 00:00:33.016 A:middle
with Receipts, what we're
specifically going to talk

00:00:33.016 --> 00:00:37.896 A:middle
about is a way in which you can
use this concept of a receipt

00:00:38.176 --> 00:00:40.386 A:middle
to protect your revenue
and enforce protection

00:00:40.386 --> 00:00:42.856 A:middle
of your business model
directly into your app,

00:00:43.206 --> 00:00:46.476 A:middle
as well as into your servers
that are issuing content based

00:00:46.476 --> 00:00:48.136 A:middle
on an in-app purchase
having been made.

00:00:50.396 --> 00:00:51.796 A:middle
Ultimately, we use receipts

00:00:51.796 --> 00:00:54.226 A:middle
to know exactly what the
customer has paid for.

00:00:54.406 --> 00:00:58.946 A:middle
And you can do this both within
your app, so you can build logic

00:00:58.946 --> 00:01:01.706 A:middle
into your app binary itself
that verifies the receipt,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.946 --> 00:01:01.706 A:middle
into your app binary itself
that verifies the receipt,

00:01:02.176 --> 00:01:03.486 A:middle
knows that it came from Apple,

00:01:03.486 --> 00:01:05.576 A:middle
and knows exactly what
the user has paid for,

00:01:06.156 --> 00:01:09.286 A:middle
as well as you can engineer
logic into your servers to do

00:01:09.286 --> 00:01:13.036 A:middle
that same verification to make
sure a real monetary transaction

00:01:13.036 --> 00:01:15.206 A:middle
has occurred with the
App Store to make sure

00:01:15.206 --> 00:01:16.556 A:middle
that you're going
to be paid for it.

00:01:18.126 --> 00:01:20.016 A:middle
All this comes down
to one simple thing,

00:01:20.376 --> 00:01:21.886 A:middle
protecting your revenue.

00:01:23.876 --> 00:01:27.456 A:middle
Now, the receipt is a lot like
the physical proof of purchase,

00:01:27.516 --> 00:01:30.076 A:middle
docket, or receipt that you get
when you're shopping in a store.

00:01:30.706 --> 00:01:31.996 A:middle
It's the same sort of concept.

00:01:32.946 --> 00:01:35.046 A:middle
It's a trusted record of the app

00:01:35.046 --> 00:01:36.966 A:middle
and in-app purchases
that have been made.

00:01:37.846 --> 00:01:39.766 A:middle
And just like that physical
receipt that you get

00:01:39.766 --> 00:01:41.946 A:middle
when you're shopping in
a store, it's the way

00:01:41.946 --> 00:01:45.286 A:middle
that you can build security
into your app to make sure

00:01:45.286 --> 00:01:48.146 A:middle
that you are going to be paid
for those features and content

00:01:48.146 --> 00:01:50.256 A:middle
that you're unlocking and
providing to your users.

00:01:51.056 --> 00:01:53.936 A:middle
You know, just like a department
store can look at your receipt

00:01:53.936 --> 00:01:56.106 A:middle
and know exactly what you
paid for before you walk

00:01:56.106 --> 00:01:59.376 A:middle
out with goods, you can do the
exact same thing in your app,

00:01:59.376 --> 00:02:00.996 A:middle
and that's what we're going
to show you in this session.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.376 --> 00:02:00.996 A:middle
and that's what we're going
to show you in this session.

00:02:02.066 --> 00:02:05.546 A:middle
The receipt itself is stored
on the device and there's APIs

00:02:05.546 --> 00:02:06.936 A:middle
that you can use to access it.

00:02:07.636 --> 00:02:09.636 A:middle
And the receipt is
issued by the App Store.

00:02:09.636 --> 00:02:12.696 A:middle
We issue a receipt every time
a transaction takes place.

00:02:13.716 --> 00:02:15.916 A:middle
So when an app is
purchased and installed,

00:02:16.276 --> 00:02:17.226 A:middle
there's a receipt in there.

00:02:18.036 --> 00:02:20.946 A:middle
When an in-app purchase
occurs, a receipt is issued

00:02:21.216 --> 00:02:23.466 A:middle
and it's available to you
to verify that purchase.

00:02:23.906 --> 00:02:27.406 A:middle
Likewise, when previous
transactions are restored,

00:02:27.786 --> 00:02:29.656 A:middle
another receipt is
issued that will allow you

00:02:29.656 --> 00:02:32.496 A:middle
to verify the authenticity
of those purchases.

00:02:33.596 --> 00:02:36.576 A:middle
And we achieve that by having
the receipts signed in a way

00:02:36.576 --> 00:02:39.096 A:middle
that is verifiable by
you at the code level.

00:02:39.696 --> 00:02:42.376 A:middle
So once you get this receipt,
you can confirm it really came

00:02:42.376 --> 00:02:44.666 A:middle
from Apple and hasn't
been tampered with at all.

00:02:44.666 --> 00:02:48.726 A:middle
But most importantly, the
receipt file is unique

00:02:48.806 --> 00:02:51.376 A:middle
to your app on a single device.

00:02:52.336 --> 00:02:54.646 A:middle
It makes sure that when
you verify that receipt,

00:02:54.646 --> 00:02:57.576 A:middle
you can be absolutely certain
that this purchase happened

00:02:57.576 --> 00:03:01.926 A:middle
for your app, from this user,
on this single device alone.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.576 --> 00:03:01.926 A:middle
for your app, from this user,
on this single device alone.

00:03:02.336 --> 00:03:06.596 A:middle
Now, when we're working
with receipts, as you'll see

00:03:06.596 --> 00:03:09.176 A:middle
in this session, it's
a lot like a recipe.

00:03:10.286 --> 00:03:13.936 A:middle
There's a recipe that Apple
gives you, but there are things

00:03:13.936 --> 00:03:16.146 A:middle
that you are going to need to
bring to the table as well.

00:03:16.666 --> 00:03:18.886 A:middle
There's decisions that you
will need to make along the way

00:03:19.276 --> 00:03:22.756 A:middle
to make sure that your receipt
implementation, your ability

00:03:22.756 --> 00:03:26.586 A:middle
to protect your revenue in your
app, suits your unique needs.

00:03:27.836 --> 00:03:30.296 A:middle
There's a lot of flexibility
built into this system.

00:03:31.596 --> 00:03:33.556 A:middle
Now, in particular,
what Apple provides you

00:03:33.556 --> 00:03:36.016 A:middle
with is the receipt
format specification,

00:03:36.356 --> 00:03:39.296 A:middle
and we've built this receipt
on a bunch of open standards.

00:03:39.606 --> 00:03:42.156 A:middle
There's nothing proprietary
about these receipts

00:03:42.646 --> 00:03:43.896 A:middle
and the great thing
about that is,

00:03:43.936 --> 00:03:45.916 A:middle
because they're all open
standards that are very,

00:03:45.916 --> 00:03:48.966 A:middle
very widely used in many
places, you have lots

00:03:48.966 --> 00:03:51.846 A:middle
of options available for you
for how to work with receipts.

00:03:52.206 --> 00:03:55.786 A:middle
We give you the receipt itself
and there's APIs to find

00:03:55.786 --> 00:03:56.946 A:middle
where the receipt is located.

00:03:57.956 --> 00:03:59.656 A:middle
And we're giving you
instructions on how

00:03:59.656 --> 00:04:01.526 A:middle
to do on-device receipt
validation,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.656 --> 00:04:01.526 A:middle
to do on-device receipt
validation,

00:04:01.526 --> 00:04:03.316 A:middle
and that'll be the main
focus of this session.

00:04:04.036 --> 00:04:07.786 A:middle
And we also provide an online
service that allows your servers

00:04:07.976 --> 00:04:09.886 A:middle
to verify the authenticity
of a receipt.

00:04:10.836 --> 00:04:14.976 A:middle
But what you, as the developer,
need to choose, is the level

00:04:14.976 --> 00:04:17.516 A:middle
of security that's
appropriate for your product.

00:04:18.755 --> 00:04:20.276 A:middle
And likewise, that
will translate

00:04:20.276 --> 00:04:22.856 A:middle
into determining the
level of complexity

00:04:23.156 --> 00:04:25.466 A:middle
in your implementation
that suits your needs.

00:04:28.036 --> 00:04:30.296 A:middle
There's three key decisions that
you're going to need to make,

00:04:30.586 --> 00:04:32.746 A:middle
and we'll call these out as
we go through this session

00:04:32.746 --> 00:04:33.526 A:middle
to help you with that.

00:04:34.146 --> 00:04:35.616 A:middle
The first decision
you're going to need

00:04:35.616 --> 00:04:38.746 A:middle
to make is how will you verify
the signature in the receipt?

00:04:39.186 --> 00:04:43.116 A:middle
What will you use to determine
that the receipt definitely came

00:04:43.116 --> 00:04:44.836 A:middle
from Apple and hasn't
been tampered

00:04:44.876 --> 00:04:45.936 A:middle
with since we minted it?

00:04:47.226 --> 00:04:51.196 A:middle
Second is how will you verify
that the receipt is intended

00:04:51.196 --> 00:04:52.926 A:middle
for your app on this device?

00:04:54.076 --> 00:04:57.916 A:middle
And lastly, you will need to
decide how you wish to interpret

00:04:57.916 --> 00:04:59.576 A:middle
that purchase data
that's contained

00:04:59.576 --> 00:05:00.966 A:middle
within the receipt itself


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.576 --> 00:05:00.966 A:middle
within the receipt itself

00:05:01.016 --> 00:05:03.226 A:middle
so you know exactly
what the user paid for.

00:05:06.036 --> 00:05:09.216 A:middle
When you're making these
decisions, the primary thing

00:05:09.216 --> 00:05:12.916 A:middle
that factors into this is
the value of your products

00:05:13.556 --> 00:05:15.946 A:middle
and therefore how much
importance you place

00:05:16.466 --> 00:05:18.106 A:middle
on protecting that revenue.

00:05:19.196 --> 00:05:20.256 A:middle
Here's one way to look at it.

00:05:21.106 --> 00:05:23.246 A:middle
If you are a very
high value product,

00:05:23.996 --> 00:05:25.046 A:middle
you're typically selling

00:05:25.046 --> 00:05:27.346 A:middle
in perhaps an in-app
purchase that's designed

00:05:27.346 --> 00:05:30.156 A:middle
to be a one-off purchase,
large value,

00:05:30.546 --> 00:05:33.996 A:middle
and that one single in-app
purchase is the primary revenue

00:05:33.996 --> 00:05:36.656 A:middle
stream for your app
and the primary enabler

00:05:36.656 --> 00:05:39.576 A:middle
for all the features and content
that you're selling to the user.

00:05:40.796 --> 00:05:43.296 A:middle
Now, in that sense, you're a lot
like a high-end jewelry store.

00:05:44.196 --> 00:05:46.176 A:middle
And when you think about
your shopping experience

00:05:46.176 --> 00:05:47.796 A:middle
in a jewelry store, you notice

00:05:47.796 --> 00:05:52.046 A:middle
that they implement very complex
levels of security to make sure

00:05:52.046 --> 00:05:54.636 A:middle
that not one single pearl
can walk out that door

00:05:55.026 --> 00:05:56.376 A:middle
without having been paid for.

00:05:57.816 --> 00:05:59.336 A:middle
You know, when you go
to a jewelry store,

00:05:59.336 --> 00:06:01.816 A:middle
you see jewelry hidden
behind glass cases.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.336 --> 00:06:01.816 A:middle
you see jewelry hidden
behind glass cases.

00:06:02.366 --> 00:06:04.556 A:middle
You see security staff
positioned at the door.

00:06:04.996 --> 00:06:06.906 A:middle
You might see security
wandering through,

00:06:06.906 --> 00:06:08.536 A:middle
making sure that
everything's okay.

00:06:09.236 --> 00:06:11.186 A:middle
There might be metal
detectors, you know,

00:06:11.186 --> 00:06:12.856 A:middle
proof of purchase
checking, et cetera.

00:06:13.176 --> 00:06:16.466 A:middle
It's a very high level of
security and quite complex.

00:06:17.096 --> 00:06:19.796 A:middle
But the reason they
go to these lengths is

00:06:19.796 --> 00:06:21.816 A:middle
because their business
model is centered

00:06:21.816 --> 00:06:25.776 A:middle
around that one-off large
purchase that you're not going

00:06:25.776 --> 00:06:27.006 A:middle
to make very frequently.

00:06:27.526 --> 00:06:30.836 A:middle
But at the complete other end

00:06:30.836 --> 00:06:33.866 A:middle
of the spectrum is
lower value product

00:06:34.566 --> 00:06:37.926 A:middle
and these are typically the
lower value in-app purchases,

00:06:38.006 --> 00:06:41.716 A:middle
dollar, $2, maybe up to $5,
and they're typically things

00:06:41.716 --> 00:06:45.356 A:middle
that are consumables and your
business model probably relies

00:06:45.356 --> 00:06:47.316 A:middle
on customers coming
back again and again

00:06:47.576 --> 00:06:50.586 A:middle
to enjoy the same product,
buying more currency,

00:06:50.906 --> 00:06:52.436 A:middle
buying more gas for their car,

00:06:52.436 --> 00:06:54.556 A:middle
more blocks so they can
build amazing things.

00:06:55.676 --> 00:06:59.636 A:middle
In this sense, you're a lot
more like a grocery store.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.566 --> 00:07:02.986 A:middle
Think about your shopping
experience in a grocery store.

00:07:03.336 --> 00:07:06.256 A:middle
The grocery store wants you
to feel incredibly comfortable

00:07:06.256 --> 00:07:09.446 A:middle
and happy shopping there so that
you'll come back again and again

00:07:09.446 --> 00:07:11.776 A:middle
and again and keep
spending with them.

00:07:12.926 --> 00:07:15.386 A:middle
Grocery stores filled
with hundreds and hundreds

00:07:15.386 --> 00:07:17.386 A:middle
of products that are
probably selling for $1

00:07:17.386 --> 00:07:18.616 A:middle
or $2 and not much more.

00:07:19.596 --> 00:07:22.056 A:middle
They rely on the same sort of
business model that you would

00:07:22.056 --> 00:07:24.316 A:middle
if you were selling those
low-value consumables.

00:07:24.856 --> 00:07:27.016 A:middle
They want you to have a
great shopping experience

00:07:27.396 --> 00:07:28.846 A:middle
to feel comfortable and welcome

00:07:29.136 --> 00:07:31.216 A:middle
and to enjoy it every
single time.

00:07:31.656 --> 00:07:33.366 A:middle
And they're not going to
care too much if a couple

00:07:33.366 --> 00:07:35.676 A:middle
of grapes walk out of the
store without being paid for,

00:07:36.046 --> 00:07:37.726 A:middle
unless you keep coming
back again and again

00:07:37.726 --> 00:07:38.536 A:middle
and stealing the grapes.

00:07:38.536 --> 00:07:42.886 A:middle
So let's take a look
at how we work

00:07:42.886 --> 00:07:44.156 A:middle
with receipts in the workflow.

00:07:45.486 --> 00:07:49.596 A:middle
Starting off with the basics,
the receipt itself is stored

00:07:49.596 --> 00:07:51.946 A:middle
in the App Bundle or in
your Sandbox container,

00:07:52.406 --> 00:07:55.806 A:middle
and there's an API and NS bundle
that gets you the URL to locate

00:07:55.806 --> 00:07:56.826 A:middle
where that receipt is.

00:07:57.786 --> 00:07:59.546 A:middle
It's a single flat file.

00:07:59.916 --> 00:08:01.556 A:middle
So it's really easy
to work with.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.916 --> 00:08:01.556 A:middle
So it's really easy
to work with.

00:08:01.986 --> 00:08:03.166 A:middle
It's not too complicated.

00:08:04.056 --> 00:08:07.186 A:middle
Contained within that single
flat file is purchased data

00:08:07.186 --> 00:08:08.656 A:middle
about the app purchase itself,

00:08:08.656 --> 00:08:10.726 A:middle
as well as in-app purchases
that have been made.

00:08:11.636 --> 00:08:13.996 A:middle
And there's also a
signature that allows us

00:08:14.306 --> 00:08:15.546 A:middle
to check the authenticity.

00:08:15.546 --> 00:08:18.326 A:middle
You see, we take that
purchase information,

00:08:18.726 --> 00:08:20.996 A:middle
what you're particularly
interested in as a developer,

00:08:21.436 --> 00:08:25.096 A:middle
and wrap it around certificates
and signatures that make sure

00:08:25.096 --> 00:08:27.766 A:middle
that when we write that purchase
information into the receipt,

00:08:28.406 --> 00:08:31.906 A:middle
we sign it and add a signature
that means you can verify

00:08:32.015 --> 00:08:35.285 A:middle
that it's exactly as we intended
when we minted the receipt

00:08:35.426 --> 00:08:38.496 A:middle
and no one's tried to fake
it by adding in any products,

00:08:38.765 --> 00:08:40.796 A:middle
changing purchase
information, et cetera.

00:08:41.376 --> 00:08:44.826 A:middle
And we built this
on open standards.

00:08:45.306 --> 00:08:49.376 A:middle
In particular, the signing that
we use to wrap that payload

00:08:49.376 --> 00:08:52.356 A:middle
of data in a signature so it
can't be tampered with is known

00:08:52.356 --> 00:08:55.266 A:middle
as a PKCS#7 Cryptographic
Container.

00:08:55.936 --> 00:08:57.376 A:middle
Don't let the acronyms
fool you here.

00:08:57.696 --> 00:08:59.606 A:middle
There's a lot of
information available online

00:08:59.606 --> 00:09:02.276 A:middle
and these are very widely
used in many, many places.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.606 --> 00:09:02.276 A:middle
and these are very widely
used in many, many places.

00:09:03.876 --> 00:09:06.116 A:middle
The data itself in that payload,

00:09:06.246 --> 00:09:08.996 A:middle
the purchase information,
we encode that.

00:09:09.196 --> 00:09:10.966 A:middle
That is, we structure
it at the byte level,

00:09:11.426 --> 00:09:13.426 A:middle
using a standard called ASN.1.

00:09:14.086 --> 00:09:16.886 A:middle
Now, you would be
amazed at the huge number

00:09:16.976 --> 00:09:18.996 A:middle
of places that ASN.1 is used.

00:09:19.476 --> 00:09:21.676 A:middle
It's a standard that has
been around for a very,

00:09:21.676 --> 00:09:24.006 A:middle
very long time, which is great

00:09:24.036 --> 00:09:25.866 A:middle
because when you combine
the fact that both

00:09:25.866 --> 00:09:28.936 A:middle
of these are very widely used,
it means that you're going

00:09:28.936 --> 00:09:31.126 A:middle
to find that you're not
the first person to try

00:09:31.126 --> 00:09:32.526 A:middle
and implement support for this.

00:09:33.376 --> 00:09:35.486 A:middle
In fact, as we progress
through this session,

00:09:36.126 --> 00:09:38.446 A:middle
you'll see that all those
decisions you need to make,

00:09:38.736 --> 00:09:40.176 A:middle
they generally span this gamut.

00:09:40.626 --> 00:09:43.276 A:middle
From at one end of the extreme,

00:09:43.276 --> 00:09:45.016 A:middle
there will be off
the shelf offerings

00:09:45.016 --> 00:09:47.166 A:middle
that you can simply pick up
and run with straight away.

00:09:48.286 --> 00:09:50.406 A:middle
In the middle ground, there's
probably a lot of sample code

00:09:50.406 --> 00:09:53.676 A:middle
out there that you can find
and maybe copy and adjust it

00:09:53.676 --> 00:09:54.906 A:middle
to suit your needs somewhat.

00:09:54.906 --> 00:09:58.006 A:middle
But then, because these
are open standards

00:09:58.496 --> 00:10:00.636 A:middle
and the specifications
are freely available,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.496 --> 00:10:00.636 A:middle
and the specifications
are freely available,

00:10:00.636 --> 00:10:03.306 A:middle
you're completely empowered to
write your own implementation

00:10:03.636 --> 00:10:05.286 A:middle
if that was important to you.

00:10:06.126 --> 00:10:08.166 A:middle
That is, if you want
complete control

00:10:09.076 --> 00:10:13.856 A:middle
over how you protect your
revenue, you can do that.

00:10:14.306 --> 00:10:15.326 A:middle
So some of the options.

00:10:17.206 --> 00:10:19.626 A:middle
OpenSSL, which I'm sure
everyone has heard of,

00:10:19.786 --> 00:10:21.896 A:middle
is a cryptographic library

00:10:22.036 --> 00:10:24.276 A:middle
that serves many
functions beyond just HTDPS

00:10:24.276 --> 00:10:26.936 A:middle
and secure sockets that
it's more widely known for.

00:10:27.636 --> 00:10:31.256 A:middle
OpenSSL includes support for not
only doing the PKCS#7 signature

00:10:31.256 --> 00:10:34.106 A:middle
verification, but also
for reading asn.1.

00:10:34.186 --> 00:10:35.516 A:middle
So it's kind of a one-stop shop.

00:10:35.516 --> 00:10:37.326 A:middle
If you wanted a library
that was available

00:10:37.326 --> 00:10:38.196 A:middle
that could do this for you.

00:10:39.266 --> 00:10:41.306 A:middle
There's also some other command
line tools that can help you

00:10:41.306 --> 00:10:42.746 A:middle
out with this, and I'm
sure there is a lot

00:10:42.746 --> 00:10:43.856 A:middle
of other offerings out there.

00:10:44.706 --> 00:10:46.326 A:middle
But you can still
create your own

00:10:46.526 --> 00:10:48.286 A:middle
if that's what you want to do.

00:10:49.126 --> 00:10:51.146 A:middle
So what I'm going to take you

00:10:51.146 --> 00:10:53.886 A:middle
through in this session
is a three-step process

00:10:53.886 --> 00:10:56.476 A:middle
that you can use to
verify these receipts.

00:10:56.996 --> 00:10:59.806 A:middle
The first thing we have
to do is make sure we know

00:10:59.806 --> 00:11:03.296 A:middle
that the receipt is
authentic and trusted.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.806 --> 00:11:03.296 A:middle
that the receipt is
authentic and trusted.

00:11:04.106 --> 00:11:06.956 A:middle
That is, it came from Apple
and no one's tampered with it.

00:11:08.026 --> 00:11:10.756 A:middle
Once we know we have a receipt
that is authentic and trusted,

00:11:11.616 --> 00:11:14.506 A:middle
we can move on to confirming
that the receipt was

00:11:14.506 --> 00:11:17.756 A:middle
in fact intended for
our app on this device.

00:11:18.826 --> 00:11:20.716 A:middle
Because just as it's
important to make sure

00:11:20.716 --> 00:11:22.606 A:middle
that no one's tampered with
the receipt, we also want

00:11:22.606 --> 00:11:24.976 A:middle
to make sure no one's just
copied it from another device.

00:11:27.396 --> 00:11:30.456 A:middle
Now, once we have a receipt
that we know we trust and it's

00:11:30.456 --> 00:11:33.196 A:middle
for our app on this single
device, we can go ahead

00:11:33.196 --> 00:11:35.106 A:middle
and start interpreting
that purchase data

00:11:35.316 --> 00:11:37.286 A:middle
to know exactly what
the user has paid for.

00:11:38.056 --> 00:11:40.366 A:middle
I'm going to start
this off with a demo.

00:11:41.446 --> 00:11:46.036 A:middle
I have here a very simple
project that's just going

00:11:46.036 --> 00:11:48.616 A:middle
to get us started in terms of
getting a receipt to work with.

00:11:49.346 --> 00:11:51.356 A:middle
I mean, all of this is great,
but if you haven't been able

00:11:51.356 --> 00:11:54.216 A:middle
to get a receipt to actually
start verifying the signature

00:11:54.216 --> 00:11:55.976 A:middle
with, this process
can be difficult.

00:11:55.976 --> 00:11:57.536 A:middle
So let's see how we
go about doing that.

00:11:58.066 --> 00:11:58.946 A:middle
Really simple app.

00:11:59.496 --> 00:12:00.956 A:middle
Application did finish launching


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.496 --> 00:12:00.956 A:middle
Application did finish launching

00:12:01.126 --> 00:12:04.156 A:middle
and the first thing I do
is I call this NSBundle API

00:12:04.746 --> 00:12:06.666 A:middle
to get the URL to the
App Store receipt.

00:12:07.586 --> 00:12:10.486 A:middle
I'm simply going to use
NSFileManager here to determine

00:12:10.486 --> 00:12:11.836 A:middle
if the file exists or not.

00:12:11.996 --> 00:12:13.696 A:middle
That is, do we have a
receipt to work with?

00:12:14.746 --> 00:12:17.306 A:middle
If we do, I've set myself up a
method that can go ahead and do

00:12:17.306 --> 00:12:18.456 A:middle
that validation for me.

00:12:19.116 --> 00:12:24.786 A:middle
But if not, if I don't have a
receipt, what I do is on OS X,

00:12:24.786 --> 00:12:27.956 A:middle
I exit my app with this
special exit code of 173.

00:12:28.876 --> 00:12:30.806 A:middle
That tells the OS
and the App Store

00:12:30.806 --> 00:12:32.966 A:middle
that you believe your
receipt is bad or missing

00:12:32.966 --> 00:12:35.536 A:middle
and it lets the App Store go
and get a receipt for you.

00:12:36.586 --> 00:12:38.816 A:middle
So this is all in
the documentation

00:12:38.816 --> 00:12:40.506 A:middle
and it seems pretty straight
forward at this point.

00:12:41.126 --> 00:12:42.346 A:middle
So I'm going to clean
this project

00:12:42.346 --> 00:12:43.576 A:middle
to make sure we have no receipt.

00:12:43.576 --> 00:12:44.926 A:middle
I'm going to build it.

00:12:45.006 --> 00:12:46.816 A:middle
I'm going to run it.

00:12:47.556 --> 00:12:49.606 A:middle
Now, notice I've got two
break points set up here.

00:12:49.606 --> 00:12:52.656 A:middle
The first is I wanted to check
that I got my App Store receipt.

00:12:52.656 --> 00:12:55.896 A:middle
And if we see down here in the
debug console, I definitely did.

00:12:57.296 --> 00:13:00.406 A:middle
And I'm going to ask FileManager
if that receipt exists.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:57.296 --> 00:13:00.406 A:middle
And I'm going to ask FileManager
if that receipt exists.

00:13:01.076 --> 00:13:01.746 A:middle
It says no.

00:13:01.746 --> 00:13:04.486 A:middle
Of course, because I'm running
from Xcode and I have not

00:13:04.486 --> 00:13:05.586 A:middle
yet put my app on the store.

00:13:05.586 --> 00:13:06.996 A:middle
So of course we don't
have a receipt.

00:13:07.296 --> 00:13:09.826 A:middle
But we want one so we can
start testing out validation.

00:13:10.696 --> 00:13:13.726 A:middle
So the documentation
says to exit 173.

00:13:13.726 --> 00:13:17.036 A:middle
Let's do that.

00:13:17.196 --> 00:13:18.136 A:middle
And nothing happens.

00:13:19.226 --> 00:13:20.956 A:middle
This is the first point
the developers kind

00:13:20.956 --> 00:13:21.696 A:middle
of get stuck with.

00:13:22.226 --> 00:13:24.816 A:middle
They get started with receipt
validation, put their code

00:13:24.816 --> 00:13:27.656 A:middle
in place, run it in Xcode, and
go why doesn't this do anything?

00:13:27.886 --> 00:13:32.226 A:middle
The reason for that is when you
run your app in Xcode like that

00:13:32.226 --> 00:13:36.786 A:middle
and it hits that exit 173 code,
only Xcode sees that exit code.

00:13:37.296 --> 00:13:39.036 A:middle
So the OS and the App
Store is not aware

00:13:39.036 --> 00:13:40.196 A:middle
that you're actually
running your app

00:13:40.196 --> 00:13:41.326 A:middle
and wanting to get a receipt.

00:13:41.796 --> 00:13:43.246 A:middle
So here's a trick
to help you do that.

00:13:43.976 --> 00:13:46.216 A:middle
This time when I run the app
and I hit the same break point,

00:13:46.696 --> 00:13:49.946 A:middle
I'm going to go down here
to the Dock, control click

00:13:49.946 --> 00:13:54.536 A:middle
on the app icon down here, and
I use options, show in Finder.

00:13:55.726 --> 00:13:58.566 A:middle
That brings up Finder to
my debug-built version

00:13:58.566 --> 00:13:59.676 A:middle
of the app that we're running.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:00.276 --> 00:14:02.956 A:middle
Because remember, I want this
to exit with that special code

00:14:02.956 --> 00:14:04.716 A:middle
and for the App Store
to see that exit code

00:14:04.916 --> 00:14:06.276 A:middle
so it gets me a new receipt.

00:14:06.766 --> 00:14:07.866 A:middle
So watch what I do here.

00:14:07.866 --> 00:14:10.456 A:middle
I go back to Xcode and I stop
that instance of the app.

00:14:11.706 --> 00:14:15.006 A:middle
Back to Finder and now I
run the app from Finder.

00:14:15.006 --> 00:14:15.846 A:middle
And look what happened.

00:14:16.166 --> 00:14:19.726 A:middle
We did the same logic, receipt
wasn't there, and we exited 173.

00:14:20.106 --> 00:14:23.206 A:middle
Now, the App Store has seen
that and is prompting me to sign

00:14:23.206 --> 00:14:25.976 A:middle
in so that we can go and get a
receipt to start working with.

00:14:26.616 --> 00:14:29.156 A:middle
And because my app was signed
with my development certificate,

00:14:29.316 --> 00:14:32.166 A:middle
I'm connected to the App Store's
test environment using my

00:14:32.166 --> 00:14:35.456 A:middle
iTunes-connected test accounts
to get a test receipt for us

00:14:35.456 --> 00:14:36.356 A:middle
to start working with.

00:14:36.956 --> 00:14:38.926 A:middle
So I sign in, we
get our receipt,

00:14:39.226 --> 00:14:41.326 A:middle
and my really simple app
has finished launching

00:14:41.326 --> 00:14:41.906 A:middle
with the receipt.

00:14:43.156 --> 00:14:45.686 A:middle
Now, just to double check,
if I go back here into Xcode,

00:14:46.566 --> 00:14:48.026 A:middle
we go to our URL to the receipt,

00:14:48.506 --> 00:14:50.976 A:middle
and this time we have the
receipt and we're ready

00:14:50.976 --> 00:14:53.046 A:middle
to start working with the
validation of that receipt.

00:14:54.626 --> 00:14:58.686 A:middle
Now, if you are working with
iOS receipts, one other tip

00:14:58.716 --> 00:14:59.996 A:middle
that you might find handy is

00:14:59.996 --> 00:15:01.476 A:middle
if you're having
trouble getting a receipt


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.996 --> 00:15:01.476 A:middle
if you're having
trouble getting a receipt

00:15:01.476 --> 00:15:04.236 A:middle
in the test environment,
make an in-app purchase.

00:15:04.606 --> 00:15:05.926 A:middle
When you make an
in-app purchase,

00:15:05.926 --> 00:15:07.566 A:middle
you will get a new
receipt and you can use

00:15:07.566 --> 00:15:11.076 A:middle
that to test your
validation code.

00:15:12.746 --> 00:15:13.936 A:middle
So let's go to first step,

00:15:14.036 --> 00:15:15.836 A:middle
verifying the signature
in that receipt.

00:15:15.836 --> 00:15:17.796 A:middle
So we know that this
receipt is authentic,

00:15:17.996 --> 00:15:19.496 A:middle
untrusted, and unaltered.

00:15:21.596 --> 00:15:26.176 A:middle
So this verification
of the signature,

00:15:26.176 --> 00:15:27.896 A:middle
make sure the receipt
hasn't been altered

00:15:27.896 --> 00:15:30.096 A:middle
since it left Apple, because
we don't want anyone tampering

00:15:30.096 --> 00:15:32.226 A:middle
with it, and that
it came from Apple

00:15:32.466 --> 00:15:34.436 A:middle
so that no one else can
just mint their own receipts

00:15:34.436 --> 00:15:37.196 A:middle
that look otherwise valid,
but are in fact frauds.

00:15:38.786 --> 00:15:41.476 A:middle
This is where the PKCS#7
cryptographic container

00:15:41.476 --> 00:15:42.026 A:middle
comes in.

00:15:42.096 --> 00:15:45.856 A:middle
It's how we wrap that protected
body of purchase information

00:15:46.186 --> 00:15:47.886 A:middle
around those signatures
and certificates

00:15:48.106 --> 00:15:49.706 A:middle
so that we can confirm
authenticity.

00:15:50.846 --> 00:15:52.316 A:middle
Now, your options
available for you

00:15:52.316 --> 00:15:54.016 A:middle
for doing this authenticity
check,

00:15:54.696 --> 00:15:57.096 A:middle
we mentioned before there's --
OpenSSL can do this for you,

00:15:57.096 --> 00:15:59.036 A:middle
there's no doubt many
other frameworks out there

00:15:59.036 --> 00:16:00.056 A:middle
that can do this for you.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.036 --> 00:16:00.056 A:middle
that can do this for you.

00:16:00.056 --> 00:16:03.456 A:middle
But of course, you can roll
your own if you choose.

00:16:03.936 --> 00:16:07.246 A:middle
To get you started, though,
the first thing we need

00:16:07.246 --> 00:16:08.526 A:middle
to do is find that receipt.

00:16:08.806 --> 00:16:11.526 A:middle
We call NSBundle mainBundle
appStoreReceiptURL.

00:16:11.826 --> 00:16:13.556 A:middle
That gives a URL to the receipt.

00:16:14.716 --> 00:16:18.046 A:middle
Once we've got that URL, we
need to get it read into memory

00:16:18.046 --> 00:16:20.096 A:middle
so we can start working on
it, and that's as simple

00:16:20.096 --> 00:16:23.406 A:middle
as using something like NSData
initWith ContentsOfURL..

00:16:23.406 --> 00:16:28.066 A:middle
I'm going to walk you through
here an OpenSSL example of how

00:16:28.066 --> 00:16:29.516 A:middle
to do this signature
verification.

00:16:29.896 --> 00:16:32.236 A:middle
This is straight out of our
documentation we have online.

00:16:33.016 --> 00:16:35.936 A:middle
But one thing to note is, this
example makes two assumptions.

00:16:36.536 --> 00:16:39.456 A:middle
We assume that you've already
read the receipt into memory

00:16:39.456 --> 00:16:41.676 A:middle
and have stored it in this
variable called asterick b

00:16:41.676 --> 00:16:42.956 A:middle
underscore receipt;.

00:16:42.956 --> 00:16:46.216 A:middle
And we also assume that you've
got a copy of Apple's root CA,

00:16:46.216 --> 00:16:48.726 A:middle
our Route Certificate Authority,
which you can find online,

00:16:49.326 --> 00:16:51.266 A:middle
and you have that in your
app bundle and you've read it

00:16:51.266 --> 00:16:52.356 A:middle
into memory and stored it

00:16:52.356 --> 00:16:54.606 A:middle
in this variable called
asterick b underscore x509;.

00:16:54.776 --> 00:16:57.836 A:middle
Why 509? Because
x509 is the standard

00:16:57.836 --> 00:16:59.836 A:middle
by which that CA is encoded.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.906 --> 00:17:02.966 A:middle
So once we've got those
two key ingredients,

00:17:03.676 --> 00:17:07.636 A:middle
the first thing we want to do
is convert that blob of binary

00:17:07.636 --> 00:17:09.175 A:middle
that represents the
receipt in memory

00:17:09.596 --> 00:17:12.175 A:middle
into a useful data structure
that we can start working with.

00:17:12.665 --> 00:17:14.685 A:middle
And we do that by
calling the really simply

00:17:14.685 --> 00:17:18.626 A:middle
and aptly named d2i
underscore PKCS7 underscore bio.

00:17:20.415 --> 00:17:21.685 A:middle
Don't let these names fool you.

00:17:22.266 --> 00:17:24.806 A:middle
What you'll see here is despite
the fact that these were named

00:17:24.846 --> 00:17:28.165 A:middle
by someone very arcane,
these are simple concepts.

00:17:28.566 --> 00:17:30.836 A:middle
We're reading a file into
memory, we're setting it

00:17:30.836 --> 00:17:33.616 A:middle
up in a structure so we can work
with it, and we're checking --

00:17:33.726 --> 00:17:36.346 A:middle
we're calling some functions
on it and checking the result.

00:17:36.766 --> 00:17:37.816 A:middle
Anyone can do that.

00:17:38.936 --> 00:17:40.386 A:middle
So once we've got
our data structure,

00:17:41.006 --> 00:17:42.316 A:middle
we've got our receipt
in one hand.

00:17:42.596 --> 00:17:45.726 A:middle
But the other thing we
need is our certificate

00:17:45.806 --> 00:17:48.216 A:middle
that we expect this
receipt to match up against.

00:17:48.826 --> 00:17:50.476 A:middle
Right? We want to
compare these two things.

00:17:50.476 --> 00:17:52.996 A:middle
We have a receipt, but we
want to make sure that it came

00:17:52.996 --> 00:17:55.266 A:middle
from Apple and hasn't been
altered since Apple created it.

00:17:55.746 --> 00:17:58.396 A:middle
So we set up this
certificate store and we add

00:17:58.396 --> 00:18:00.166 A:middle
into that store Apple's Root CA.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.396 --> 00:18:00.166 A:middle
into that store Apple's Root CA.

00:18:00.746 --> 00:18:02.166 A:middle
Because if the certificate --

00:18:02.166 --> 00:18:05.356 A:middle
if the signature in the receipt
is valid, it has to appear

00:18:05.356 --> 00:18:08.256 A:middle
that it's come from
Apple's Root CA.

00:18:08.636 --> 00:18:10.106 A:middle
Now, we get into
the meat of this.

00:18:10.636 --> 00:18:13.406 A:middle
We call the much better
named PKCS7 underscore verify

00:18:13.406 --> 00:18:15.666 A:middle
function, pass into
it our receipt

00:18:16.306 --> 00:18:19.486 A:middle
and our certificate store,
and we just check the result.

00:18:20.946 --> 00:18:22.426 A:middle
If the result is equal to one,

00:18:22.806 --> 00:18:24.756 A:middle
that means our receipt
signature is valid.

00:18:25.126 --> 00:18:28.536 A:middle
It came from Apple, is
trusted, hasn't be altered

00:18:28.536 --> 00:18:30.076 A:middle
since Apple minted the receipt.

00:18:31.026 --> 00:18:33.236 A:middle
Now, you also get another bonus
from calling this function

00:18:33.236 --> 00:18:37.946 A:middle
and that is that it will return
back to you the actual payload

00:18:37.946 --> 00:18:39.126 A:middle
of the receipt itself.

00:18:39.276 --> 00:18:41.106 A:middle
So that body of purchase
information

00:18:41.106 --> 00:18:43.516 A:middle
that you can start inspecting
to know what the user paid for.

00:18:43.896 --> 00:18:45.566 A:middle
And you get that
back in this example

00:18:45.566 --> 00:18:47.246 A:middle
in the b underscore
receiptPayload variable.

00:18:49.136 --> 00:18:51.926 A:middle
So I have another project
here that builds upon

00:18:51.926 --> 00:18:53.696 A:middle
that simple example
that we saw before.

00:18:54.766 --> 00:18:59.516 A:middle
You see here that I have my
same did finish launching method

00:18:59.516 --> 00:19:00.516 A:middle
where I check the receipt.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.516 --> 00:19:00.516 A:middle
where I check the receipt.

00:19:01.086 --> 00:19:03.006 A:middle
We know we've got a
receipt from the last demo.

00:19:03.176 --> 00:19:06.106 A:middle
And so, I've fleshed out my
validate receipted URL method

00:19:06.766 --> 00:19:08.456 A:middle
with these exact same calls

00:19:09.096 --> 00:19:11.246 A:middle
that we just saw in
that slide before.

00:19:11.246 --> 00:19:16.546 A:middle
So I'm going to build
this -- huh.

00:19:16.846 --> 00:19:19.666 A:middle
Twelve warnings, 12 errors.

00:19:20.706 --> 00:19:21.826 A:middle
Not a great start.

00:19:22.286 --> 00:19:23.446 A:middle
Again, this is another point

00:19:23.446 --> 00:19:25.196 A:middle
that the developers can
find really frustrating

00:19:25.196 --> 00:19:26.046 A:middle
with this process.

00:19:26.916 --> 00:19:29.406 A:middle
When you take this example code
and try and use it, you're going

00:19:29.406 --> 00:19:30.796 A:middle
to run into a few roadblocks.

00:19:30.906 --> 00:19:32.446 A:middle
But we can get through this.

00:19:33.576 --> 00:19:37.626 A:middle
The first thing is, the reason
you're getting all these

00:19:37.896 --> 00:19:39.856 A:middle
compiler warnings
here, telling you

00:19:39.856 --> 00:19:41.446 A:middle
that all these methods
were deprecated,

00:19:41.966 --> 00:19:43.586 A:middle
is because, in fact, they are.

00:19:43.956 --> 00:19:45.456 A:middle
Why am I up here on
stage telling you

00:19:45.456 --> 00:19:46.706 A:middle
to use deprecated methods?

00:19:47.746 --> 00:19:52.966 A:middle
We deprecated these in OS X
10.7 because we want developers

00:19:53.556 --> 00:19:55.436 A:middle
that especially if you're
concerned about, you know,

00:19:55.436 --> 00:19:58.606 A:middle
strong cryptography and security
like this, we want developers

00:19:58.606 --> 00:20:01.716 A:middle
to create and roll their
own build of OpenSSL


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.606 --> 00:20:01.716 A:middle
to create and roll their
own build of OpenSSL

00:20:01.716 --> 00:20:04.036 A:middle
as a static library
and integrate

00:20:04.036 --> 00:20:08.266 A:middle
that OpenSSL build straight
into your application's binary.

00:20:10.046 --> 00:20:10.576 A:middle
Think of it this way.

00:20:11.306 --> 00:20:14.176 A:middle
When you build your app and
link against things like UIKit

00:20:14.176 --> 00:20:17.536 A:middle
and AppKit, that's an
external dependency.

00:20:18.436 --> 00:20:21.096 A:middle
Your app can run on one machine,
on one version of the OS,

00:20:21.096 --> 00:20:23.386 A:middle
and run just fine on
another version of the OS,

00:20:23.386 --> 00:20:25.836 A:middle
even thought AppKit and UIKit
might be very different.

00:20:26.286 --> 00:20:28.476 A:middle
They're external dependencies
that can be swapped out from

00:20:28.476 --> 00:20:30.646 A:middle
under you and as long
as those APIs match

00:20:30.646 --> 00:20:33.076 A:middle
up to what your app is
expecting, it'll run.

00:20:33.796 --> 00:20:38.936 A:middle
But imagine how easy it would
be for someone who wanted to try

00:20:38.936 --> 00:20:42.736 A:middle
and attack your app, to try
and rip you off, to simply swap

00:20:42.736 --> 00:20:46.956 A:middle
out an external dependency,
like OpenSSL, for a version

00:20:46.956 --> 00:20:48.866 A:middle
of OpenSSL that they
brought themselves

00:20:48.866 --> 00:20:49.846 A:middle
that simply said, yeah.

00:20:49.846 --> 00:20:50.596 A:middle
Everything's fine.

00:20:51.286 --> 00:20:52.126 A:middle
This receipt's valid.

00:20:53.056 --> 00:20:54.786 A:middle
Trust me. You see?

00:20:54.866 --> 00:20:56.626 A:middle
When you use that
external dependency

00:20:56.626 --> 00:20:59.176 A:middle
for strong cryptography and
privacy sort of stuff like this,

00:20:59.706 --> 00:21:02.296 A:middle
you can run into problems where
you create a big attack vector


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.706 --> 00:21:02.296 A:middle
you can run into problems where
you create a big attack vector

00:21:02.296 --> 00:21:04.186 A:middle
that makes it really
easy for someone

00:21:04.186 --> 00:21:06.356 A:middle
to circumvent the logic
you're putting in your app

00:21:06.356 --> 00:21:08.976 A:middle
to protect your revenue and
enforce your business model.

00:21:10.326 --> 00:21:12.996 A:middle
So what we need to do here
is build our own OpenSSL.

00:21:13.286 --> 00:21:16.166 A:middle
Now, that's not as nearly
as scary as it sounds

00:21:16.166 --> 00:21:17.996 A:middle
and I've got some tips
for you in the next slide.

00:21:19.026 --> 00:21:21.986 A:middle
In fact, I've already built my
own OpenSSL and I have it here

00:21:22.566 --> 00:21:25.946 A:middle
on the desktop in a
folder called OpenSSL.

00:21:26.196 --> 00:21:28.936 A:middle
Now, when you build OpenSSL,
it produces two things for you,

00:21:29.836 --> 00:21:32.226 A:middle
a folder called include,
full of the header files

00:21:32.226 --> 00:21:34.716 A:middle
for what we want to work
with, and also a lib folder

00:21:34.716 --> 00:21:37.586 A:middle
that contains that .a static
library that we've built.

00:21:38.596 --> 00:21:41.146 A:middle
Now, using this is
actually pretty simple.

00:21:41.456 --> 00:21:44.066 A:middle
I like to keep my projects
pretty clean, so I'm going

00:21:44.066 --> 00:21:50.096 A:middle
to go ahead and create myself
a group here called OpenSSL,

00:21:51.056 --> 00:21:51.656 A:middle
if I can spell.

00:21:53.446 --> 00:21:54.056 A:middle
There we go.

00:21:54.266 --> 00:21:57.286 A:middle
And all I have to do is simply
drag and drop this built product

00:21:57.286 --> 00:21:59.446 A:middle
from OpenSSL straight
into my project,

00:21:59.446 --> 00:22:01.366 A:middle
header files and
static libraries.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.446 --> 00:22:01.366 A:middle
header files and
static libraries.

00:22:01.976 --> 00:22:04.556 A:middle
Make sure you click
this copy items

00:22:04.556 --> 00:22:06.516 A:middle
into destination group folder.

00:22:06.886 --> 00:22:08.666 A:middle
That makes sure that
we copy those headers

00:22:08.746 --> 00:22:10.876 A:middle
and the static library
you've built directly

00:22:10.926 --> 00:22:12.326 A:middle
into your project itself.

00:22:12.326 --> 00:22:14.226 A:middle
Otherwise, you'll have a
dangling external dependency

00:22:14.226 --> 00:22:14.986 A:middle
that might go away.

00:22:16.456 --> 00:22:17.016 A:middle
So finish.

00:22:17.676 --> 00:22:20.256 A:middle
I add in my freshly built
OpenSSL to my product.

00:22:20.626 --> 00:22:24.016 A:middle
Cool. Build it.

00:22:24.276 --> 00:22:27.276 A:middle
Build succeeds, but I still
have 11 compiler warnings

00:22:27.456 --> 00:22:28.816 A:middle
and if you're like
me, you care a lot

00:22:28.816 --> 00:22:30.756 A:middle
about your project
building with 0 warnings.

00:22:31.396 --> 00:22:33.506 A:middle
So why are we still getting
these deprecated warnings?

00:22:33.506 --> 00:22:38.156 A:middle
Because Xcode is trying to
build against the SDK that ships

00:22:38.156 --> 00:22:40.536 A:middle
with the OS that has
that deprecated OpenSSL.

00:22:41.456 --> 00:22:43.996 A:middle
The way we get around that
is we have to tell Xcode

00:22:44.456 --> 00:22:47.446 A:middle
that for this app that we're
building, we actually want Xcode

00:22:47.446 --> 00:22:50.926 A:middle
to use our OpenSSL that we
just added to the project.

00:22:51.786 --> 00:22:53.966 A:middle
So I went to my project
settings here.

00:22:54.326 --> 00:22:57.436 A:middle
I have clicked on this
target and I'm going

00:22:57.436 --> 00:22:58.486 A:middle
to go to build settings.

00:22:58.886 --> 00:23:01.366 A:middle
And as an option, you'll find
called Header Search Paths.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.886 --> 00:23:01.366 A:middle
And as an option, you'll find
called Header Search Paths.

00:23:01.366 --> 00:23:04.806 A:middle
I'm going to double
click on that and I need

00:23:04.806 --> 00:23:07.746 A:middle
to tell Xcode here where
to find those OpenSSL files

00:23:07.746 --> 00:23:08.406 A:middle
that we just added.

00:23:09.106 --> 00:23:12.226 A:middle
An easy trick for doing
that is pop this open here

00:23:12.226 --> 00:23:14.596 A:middle
on the side panel, find
one of the headers,

00:23:15.266 --> 00:23:19.026 A:middle
open up this side inspector, and
there you'll see the full path

00:23:19.596 --> 00:23:22.306 A:middle
to where that header file
is located in the project.

00:23:22.986 --> 00:23:27.276 A:middle
Now, notice in this case, I've
got it within my project folder

00:23:27.426 --> 00:23:30.656 A:middle
and it's in a folder hierarchy
called Include/include.

00:23:31.136 --> 00:23:34.846 A:middle
Okay. So we just need to tell
Xcode to go and allow files

00:23:34.846 --> 00:23:37.066 A:middle
to be imported from that
location for headers.

00:23:38.046 --> 00:23:40.856 A:middle
So I double click here
and rather than having

00:23:40.856 --> 00:23:43.596 A:middle
to enter the full directory
path, I can use a shortcut

00:23:43.596 --> 00:23:48.156 A:middle
of saying it's in SourceRoot
/Include/include, because that's

00:23:48.156 --> 00:23:49.536 A:middle
where we saw the
file just before.

00:23:50.516 --> 00:23:52.816 A:middle
I add that in, put it to
the top, because I want

00:23:52.816 --> 00:23:54.686 A:middle
that before anything
else in the system.

00:23:54.906 --> 00:23:57.876 A:middle
I want to make sure we look
at my OpenSSL files first.

00:23:59.036 --> 00:24:03.046 A:middle
Done. We see that was updated
there and close this file


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.036 --> 00:24:03.046 A:middle
Done. We see that was updated
there and close this file

00:24:03.046 --> 00:24:05.226 A:middle
and go back to our AppDelegate,
where we had all these warnings.

00:24:06.856 --> 00:24:11.076 A:middle
Done. All those compiler
warnings went away.

00:24:11.796 --> 00:24:14.566 A:middle
Because now, we're building
our project against our OpenSSL

00:24:14.566 --> 00:24:18.436 A:middle
that we built, that we know the
integrity of, that we're going

00:24:18.436 --> 00:24:21.566 A:middle
to ship built into our app
binary to protect our revenue

00:24:21.566 --> 00:24:22.596 A:middle
and check our receipts.

00:24:24.056 --> 00:24:25.576 A:middle
So let's run this
and see how it goes.

00:24:26.796 --> 00:24:29.266 A:middle
So we've already got a
receipt from the earlier demo

00:24:29.266 --> 00:24:32.326 A:middle
that we did and now we can
enter our validateReceipt AtURL

00:24:32.436 --> 00:24:32.976 A:middle
method here.

00:24:34.156 --> 00:24:36.486 A:middle
These are the same calls we
saw just on the slide before.

00:24:36.486 --> 00:24:37.736 A:middle
I load the receipt into memory.

00:24:37.796 --> 00:24:39.176 A:middle
I load the Root CA
in the memory.

00:24:39.956 --> 00:24:43.976 A:middle
d2i underscore PKCS7 underscore
bio to load that ball of receipt

00:24:43.976 --> 00:24:46.326 A:middle
into a usable data
structure called P7.

00:24:46.986 --> 00:24:50.376 A:middle
Create my certificate store and
now I'm ready to do the magic.

00:24:51.006 --> 00:24:52.836 A:middle
Does this receipt
stack up against

00:24:52.836 --> 00:24:54.016 A:middle
that Root CA Certificate?

00:24:54.556 --> 00:24:58.606 A:middle
I step over that and
if I look down here

00:24:58.606 --> 00:25:00.066 A:middle
in the console, sure enough.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.606 --> 00:25:00.066 A:middle
in the console, sure enough.

00:25:00.566 --> 00:25:01.456 A:middle
Result is 1.

00:25:02.486 --> 00:25:04.206 A:middle
That means we can now
move forward knowing

00:25:04.206 --> 00:25:06.736 A:middle
that we have a real
valid and trusted receipt

00:25:06.876 --> 00:25:09.486 A:middle
that we can start getting
purchase information out of.

00:25:09.606 --> 00:25:12.546 A:middle
And well, before we do that, we
need to confirm that it's for --

00:25:12.546 --> 00:25:14.156 A:middle
intended for our
app on this device.

00:25:15.566 --> 00:25:17.396 A:middle
But now, we're over the
hurdle of not only working

00:25:17.396 --> 00:25:19.356 A:middle
with the receipt that we got
from the test environment,

00:25:19.656 --> 00:25:22.436 A:middle
but we're now got OpenSSL
integrated into our project

00:25:22.926 --> 00:25:25.766 A:middle
to be ready to be built
for both iOS and OS X.

00:25:26.346 --> 00:25:28.896 A:middle
Although I'm demoing
everything here using OS X,

00:25:29.876 --> 00:25:32.796 A:middle
everything I cover here applies
to iOS, just as it does on OS X,

00:25:32.796 --> 00:25:34.666 A:middle
and if there's any
platform differences,

00:25:34.696 --> 00:25:35.686 A:middle
I'll call them out for you.

00:25:36.746 --> 00:25:39.236 A:middle
A couple of tips on
building OpenSSL for you.

00:25:39.456 --> 00:25:42.716 A:middle
First is, you need to build
it as a static library,

00:25:43.386 --> 00:25:45.756 A:middle
not a dylib, not a
framework, not something

00:25:45.756 --> 00:25:47.936 A:middle
that can be external
to your binary.

00:25:48.426 --> 00:25:50.726 A:middle
You need it to be a
static library so that

00:25:50.726 --> 00:25:54.086 A:middle
when you build your app and
link it, it takes that .a

00:25:54.086 --> 00:25:56.886 A:middle
and puts it right
into your app's binary

00:25:56.966 --> 00:25:58.716 A:middle
so no one else can
swap it out from you.

00:25:58.716 --> 00:26:01.696 A:middle
Now, if you're building
for multiple architectures,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.716 --> 00:26:01.696 A:middle
Now, if you're building
for multiple architectures,

00:26:01.696 --> 00:26:04.086 A:middle
which you almost certainly will
be if you're building for iOS,

00:26:04.086 --> 00:26:05.636 A:middle
for all the different
arm architectures,

00:26:06.616 --> 00:26:08.576 A:middle
then what you need to do
is build a separate .a,

00:26:08.576 --> 00:26:11.936 A:middle
a separate static library,
for each architecture you want

00:26:11.936 --> 00:26:15.186 A:middle
to support, be it
arm, armv7, arm 64,

00:26:15.186 --> 00:26:16.876 A:middle
whatever you might
need to build for.

00:26:17.076 --> 00:26:21.086 A:middle
Or for x86 underscore
64 in OS X.

00:26:21.376 --> 00:26:24.426 A:middle
Now, when you create those
individual .a static libraries

00:26:24.426 --> 00:26:27.656 A:middle
for each of those architectures,
you use the lipo command tool

00:26:28.156 --> 00:26:30.826 A:middle
to take all of those little
.a architecture slices

00:26:30.826 --> 00:26:32.866 A:middle
and combine them
into one fat binary

00:26:32.866 --> 00:26:36.956 A:middle
that is one single .a static
library that combines all

00:26:36.956 --> 00:26:38.266 A:middle
of our slices for all

00:26:38.266 --> 00:26:39.906 A:middle
of our architectures
we want to support.

00:26:40.946 --> 00:26:42.926 A:middle
And then, you can just drag
that straight into your project,

00:26:42.926 --> 00:26:44.046 A:middle
like we did just before.

00:26:44.966 --> 00:26:46.296 A:middle
Now, when you build OpenSSL,

00:26:46.876 --> 00:26:48.686 A:middle
the first thing you do
is use a configure script

00:26:48.686 --> 00:26:51.676 A:middle
to configure OpenSSL for the
platforms you're building on.

00:26:52.226 --> 00:26:53.786 A:middle
Here's two tips that
you'll find handy.

00:26:54.216 --> 00:26:57.056 A:middle
If you're building for
OS X 64bit, configure it

00:26:57.056 --> 00:27:01.506 A:middle
with the darwind64-x86
underscore 64-cc host type.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.056 --> 00:27:01.506 A:middle
with the darwind64-x86
underscore 64-cc host type.

00:27:01.646 --> 00:27:04.376 A:middle
If you see documentation
trying to tell you to use some

00:27:04.376 --> 00:27:05.786 A:middle
of the BASD generic types,

00:27:06.176 --> 00:27:07.456 A:middle
you're going to run
into trouble.

00:27:07.996 --> 00:27:10.406 A:middle
So this is much easier and
it ensures a proper build

00:27:10.406 --> 00:27:12.536 A:middle
of OpenSSL on x86 underscore 64.

00:27:12.536 --> 00:27:16.006 A:middle
But if you're using -- if
you're building for iOS,

00:27:16.666 --> 00:27:18.986 A:middle
try using the iphoneos-cross
host type

00:27:18.986 --> 00:27:19.856 A:middle
in the configure script

00:27:19.856 --> 00:27:21.646 A:middle
to configure it for
iOS accordingly.

00:27:22.176 --> 00:27:25.426 A:middle
But you will definitely not
be the first person ever

00:27:25.426 --> 00:27:28.836 A:middle
that has tried to build
OpenSSL for either OS X or iOS.

00:27:29.286 --> 00:27:32.026 A:middle
We deprecated OpenSSL
a while back in OS X

00:27:32.026 --> 00:27:35.976 A:middle
and we never shipped and OpenSSL
in iOS that developers can use.

00:27:36.256 --> 00:27:37.786 A:middle
So lots of folks have
been through this

00:27:37.786 --> 00:27:38.966 A:middle
for lots of different reasons.

00:27:39.256 --> 00:27:41.336 A:middle
There's lots of examples
available to you online.

00:27:44.956 --> 00:27:46.756 A:middle
Two notes about doing
the verification.

00:27:46.806 --> 00:27:49.636 A:middle
No matter how you do the
verification, be it OpenSSL,

00:27:49.636 --> 00:27:51.106 A:middle
roll your own, or
another offering,

00:27:51.966 --> 00:27:54.896 A:middle
do not check the expiry
date on the certificate.

00:27:56.086 --> 00:27:59.576 A:middle
When you're contacting a web
server via HTTPS, it's important


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.116 --> 00:28:03.616 A:middle
that you verify the expiry
date of the signature.

00:28:04.236 --> 00:28:06.056 A:middle
You don't want to be
talking to a web server

00:28:06.056 --> 00:28:08.786 A:middle
out there using a secured
transport with a certificate

00:28:08.786 --> 00:28:09.906 A:middle
that has since expired.

00:28:10.956 --> 00:28:13.046 A:middle
But the reverse is
true here for receipts.

00:28:13.306 --> 00:28:16.036 A:middle
Keep in mind the fact that we
mint this receipt at a point

00:28:16.036 --> 00:28:19.626 A:middle
in time and that comes with your
app when someone downloads it

00:28:19.626 --> 00:28:20.816 A:middle
or makes an in-app purchase.

00:28:21.576 --> 00:28:22.756 A:middle
Now, at that point in time,

00:28:22.756 --> 00:28:24.626 A:middle
there will be certificates
included in that receipt

00:28:24.946 --> 00:28:25.926 A:middle
that have an expiry date.

00:28:27.586 --> 00:28:30.776 A:middle
If that -- if someone buys
your app today and then a year

00:28:30.776 --> 00:28:33.416 A:middle
down the track, that certificate
expires within the receipt,

00:28:33.806 --> 00:28:35.746 A:middle
that does not make
the receipt invalid.

00:28:36.916 --> 00:28:39.296 A:middle
The receipt is just as
valid as it was the day

00:28:39.296 --> 00:28:40.106 A:middle
that you purchased it.

00:28:40.886 --> 00:28:44.446 A:middle
And it would be a terrible
experience for that user if all

00:28:44.446 --> 00:28:46.716 A:middle
of a sudden your app
stopped working only

00:28:46.716 --> 00:28:49.316 A:middle
because the receipt has
a certificate in there

00:28:49.316 --> 00:28:50.366 A:middle
that has since expired.

00:28:51.596 --> 00:28:54.306 A:middle
But what you do absolutely
want to make sure you do

00:28:54.306 --> 00:28:57.526 A:middle
when you do your receipt
validation is evaluate the trust

00:28:57.526 --> 00:29:00.186 A:middle
of the certificates
right up to the Root CA.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:57.526 --> 00:29:00.186 A:middle
of the certificates
right up to the Root CA.

00:29:00.186 --> 00:29:02.876 A:middle
You see, the certificates
exist in a chain.

00:29:04.086 --> 00:29:05.796 A:middle
But at the head of the
chain, at the root,

00:29:05.946 --> 00:29:08.296 A:middle
has to be Apple's Root
Certificate Authority.

00:29:08.746 --> 00:29:11.236 A:middle
That's the only way you can be
absolutely certain that it came

00:29:11.236 --> 00:29:15.006 A:middle
from us and not from someone
else trying to pose as Apple.

00:29:15.486 --> 00:29:19.416 A:middle
Want to take a quick
word, though,

00:29:19.416 --> 00:29:21.266 A:middle
about examples and sample code.

00:29:21.886 --> 00:29:23.546 A:middle
I've mentioned a lot
throughout this session

00:29:23.546 --> 00:29:27.266 A:middle
that there are a lot of samples
out there, there's examples.

00:29:27.266 --> 00:29:29.326 A:middle
I'm sure there's off
the shelf offerings

00:29:29.326 --> 00:29:31.046 A:middle
that you could literally
download and put straight

00:29:31.046 --> 00:29:32.576 A:middle
in your project that
would do this for you.

00:29:32.786 --> 00:29:36.156 A:middle
But that convenience
comes at a price.

00:29:37.316 --> 00:29:40.436 A:middle
You have to keep in mind
that reusing code brings

00:29:40.436 --> 00:29:41.996 A:middle
with it bugs and
vulnerabilities.

00:29:42.336 --> 00:29:44.156 A:middle
No matter how good
the developer is,

00:29:45.236 --> 00:29:47.276 A:middle
no matter how well you
use the sample code,

00:29:47.276 --> 00:29:51.976 A:middle
is no matter how much you might
have paid for it, any code comes

00:29:51.976 --> 00:29:53.976 A:middle
with bugs and possible
vulnerabilities.

00:29:54.506 --> 00:29:58.576 A:middle
And the more people that
use the exact same way

00:29:58.576 --> 00:30:01.756 A:middle
of doing receipt validation,
the more there is the chance


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.576 --> 00:30:01.756 A:middle
of doing receipt validation,
the more there is the chance

00:30:01.756 --> 00:30:04.966 A:middle
of one exploit affecting
many, many apps.

00:30:06.026 --> 00:30:08.266 A:middle
You know back in that
jewelry example imagine

00:30:08.266 --> 00:30:11.636 A:middle
if every jewelry shop around
the world used the same lock

00:30:11.636 --> 00:30:14.596 A:middle
on their cabinets, and
then one day someone finds

00:30:14.596 --> 00:30:16.306 A:middle
out a really easy way
to open that lock.

00:30:16.916 --> 00:30:20.166 A:middle
Not going to be good for anyone
owning a jewelry store, right?

00:30:21.116 --> 00:30:22.306 A:middle
Same sort of principle here.

00:30:23.456 --> 00:30:25.516 A:middle
Although this can seem
so convenient to just go

00:30:25.516 --> 00:30:27.226 A:middle
and grab something off
GitHub or somewhere else,

00:30:27.226 --> 00:30:28.566 A:middle
and drop it into your
project, and, "Hey,

00:30:28.566 --> 00:30:30.436 A:middle
I've got receipt validation
and protected revenue."

00:30:31.126 --> 00:30:33.926 A:middle
You need to understand the
risks of what you're bringing

00:30:33.926 --> 00:30:37.326 A:middle
in because that's your revenue
stream at the end of the day,

00:30:37.706 --> 00:30:39.376 A:middle
not the third-party
that wrote that code,

00:30:39.486 --> 00:30:42.206 A:middle
not the nice individual
that put up some sample code

00:30:42.206 --> 00:30:43.226 A:middle
to help you get this done.

00:30:43.486 --> 00:30:44.356 A:middle
It's not their revenue.

00:30:44.356 --> 00:30:45.316 A:middle
It's your revenue.

00:30:46.826 --> 00:30:49.196 A:middle
So make sure you make decisions
that suit your product.

00:30:50.366 --> 00:30:52.626 A:middle
Maybe you're okay with those
sorts of vulnerabilities,

00:30:52.626 --> 00:30:53.946 A:middle
and bugs, and the possibility

00:30:53.946 --> 00:30:55.666 A:middle
of a single exploit
affecting your app.

00:30:55.956 --> 00:30:58.156 A:middle
Maybe that suits the
business model and level

00:30:58.156 --> 00:30:59.146 A:middle
of protection you want.

00:30:59.896 --> 00:31:03.946 A:middle
But either way know the risks
and own those risks yourself.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.896 --> 00:31:03.946 A:middle
But either way know the risks
and own those risks yourself.

00:31:05.256 --> 00:31:08.696 A:middle
All right, so we've got a
receipt that we know is trusted

00:31:08.696 --> 00:31:10.196 A:middle
and verified, and
it came from Apple.

00:31:10.986 --> 00:31:12.956 A:middle
Now we need to make
sure that it is intended

00:31:12.956 --> 00:31:15.186 A:middle
for your app on this
device only.

00:31:15.986 --> 00:31:20.256 A:middle
To do that we need to look at
the receipt payload itself.

00:31:20.556 --> 00:31:22.616 A:middle
Now this is a very
high-level look

00:31:22.616 --> 00:31:24.116 A:middle
at how a receipt is structured.

00:31:24.496 --> 00:31:26.726 A:middle
It's structured as a
series of attributes.

00:31:27.306 --> 00:31:28.996 A:middle
You could think of these
attributes as a cross

00:31:28.996 --> 00:31:31.056 A:middle
between an NSArray
and an NSDictionary.

00:31:32.166 --> 00:31:35.026 A:middle
They're like an NSDictionary
because they have things

00:31:35.026 --> 00:31:36.436 A:middle
like a type and a value,

00:31:36.436 --> 00:31:38.756 A:middle
a lot like a dictionary
has a key and an object.

00:31:38.986 --> 00:31:41.926 A:middle
But they're like an Array
because there is a sequence

00:31:41.926 --> 00:31:43.766 A:middle
of these throughout the receipt

00:31:43.766 --> 00:31:45.916 A:middle
that you can loop
over to interpret.

00:31:46.936 --> 00:31:49.886 A:middle
They also have a version on
each of these attributes,

00:31:50.226 --> 00:31:51.996 A:middle
but that's not too
important to us right now.

00:31:51.996 --> 00:31:55.716 A:middle
The key thing we need to know
is inside that body of data

00:31:55.716 --> 00:31:58.156 A:middle
in the receipt is a
series of attributes.

00:31:58.226 --> 00:32:00.596 A:middle
Each attribute has a type
that tells us what it is,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.226 --> 00:32:00.596 A:middle
Each attribute has a type
that tells us what it is,

00:32:00.596 --> 00:32:03.796 A:middle
what it means, and then
a value that corresponds

00:32:03.796 --> 00:32:05.586 A:middle
to what this attribute
is telling us.

00:32:06.046 --> 00:32:10.256 A:middle
So the first thing we
need to do is check

00:32:10.256 --> 00:32:12.946 A:middle
if this receipt was actually
intended for our app.

00:32:13.066 --> 00:32:15.316 A:middle
In those attributes
there'll be one called Type 2

00:32:15.506 --> 00:32:16.746 A:middle
and one called Type 3.

00:32:17.196 --> 00:32:18.926 A:middle
All the attributes
are named by a number.

00:32:19.566 --> 00:32:21.646 A:middle
So attribute Type
2 in the receipt,

00:32:21.756 --> 00:32:24.196 A:middle
if you read that attribute's
value it will be the Bundle

00:32:24.196 --> 00:32:26.186 A:middle
Identifier that this
receipt was intended for.

00:32:26.766 --> 00:32:28.566 A:middle
And then Type 3 is
the Bundle Version

00:32:28.566 --> 00:32:30.056 A:middle
that this receipt
was intended for.

00:32:31.046 --> 00:32:33.006 A:middle
So you can check the
bundle identifier,

00:32:33.006 --> 00:32:34.316 A:middle
make sure it's for your app.

00:32:34.726 --> 00:32:35.906 A:middle
You can check the bundle version

00:32:35.906 --> 00:32:37.786 A:middle
if you want an even
higher level of security.

00:32:37.786 --> 00:32:39.676 A:middle
Perhaps you want to
make absolutely certain

00:32:39.676 --> 00:32:42.286 A:middle
that someone's not using a
receipt from an older version

00:32:42.286 --> 00:32:44.756 A:middle
of your app that perhaps
doesn't have the same features

00:32:44.756 --> 00:32:45.306 A:middle
and content.

00:32:45.846 --> 00:32:49.836 A:middle
The one thing to note
is use hardcoded values

00:32:49.836 --> 00:32:50.696 A:middle
for the comparison.

00:32:51.256 --> 00:32:54.616 A:middle
Why? Because if you
simply grab the values

00:32:54.616 --> 00:32:57.816 A:middle
out of your Info.plist and
compare them against the values

00:32:57.816 --> 00:33:00.476 A:middle
in the receipt it's all
too easy for someone to go


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:57.816 --> 00:33:00.476 A:middle
in the receipt it's all
too easy for someone to go

00:33:00.476 --> 00:33:02.756 A:middle
and edit your Info.plist
and make it look exactly

00:33:02.756 --> 00:33:04.676 A:middle
like the receipt that they're
trying to fake you with.

00:33:05.526 --> 00:33:08.966 A:middle
So hardcode those values into
your app that you're expecting,

00:33:09.316 --> 00:33:11.416 A:middle
that way they're part of
the code signed at binary,

00:33:11.946 --> 00:33:13.406 A:middle
much harder to try
and circumvent.

00:33:13.916 --> 00:33:16.976 A:middle
Now that was a very
high-level look

00:33:17.596 --> 00:33:19.316 A:middle
at how this receipt
data is structured

00:33:19.316 --> 00:33:20.366 A:middle
in terms of attributes.

00:33:20.456 --> 00:33:22.126 A:middle
But as I said before,
this is encoded,

00:33:22.446 --> 00:33:26.456 A:middle
as in the bytes are arranged,
using a standard called ASN.1.

00:33:27.796 --> 00:33:31.096 A:middle
There's two other attributes
along with Type 2 and Type 3.

00:33:31.846 --> 00:33:34.536 A:middle
So we use Type 2 and Type 3 to
confirm that this receipt was

00:33:34.536 --> 00:33:37.596 A:middle
for our app, but now
we need to confirm

00:33:37.596 --> 00:33:39.926 A:middle
that it was actually
intended for this device only

00:33:40.176 --> 00:33:42.706 A:middle
because we don't want someone
to simply be able to copy a --

00:33:42.706 --> 00:33:44.346 A:middle
a receipt around
to their friends

00:33:44.716 --> 00:33:47.546 A:middle
so that they can use the
app without paying for it.

00:33:47.546 --> 00:33:50.676 A:middle
So included in the receipt
is an attribute called Type 4

00:33:50.676 --> 00:33:52.866 A:middle
which is an opaque value,
just a blob of bytes,

00:33:53.576 --> 00:33:56.066 A:middle
and Type 5 which
is a SHA-1 hash.

00:33:56.186 --> 00:33:58.916 A:middle
Now if you're not familiar
with hashing, hashing is a way

00:33:58.916 --> 00:34:02.546 A:middle
to take a large bit of data
and boil it down to a unique,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.916 --> 00:34:02.546 A:middle
to take a large bit of data
and boil it down to a unique,

00:34:02.726 --> 00:34:05.416 A:middle
smaller data that will
be absolutely unique

00:34:05.416 --> 00:34:08.016 A:middle
to that larger data set that
was the input to the hash.

00:34:10.085 --> 00:34:14.606 A:middle
So this Type 5 attribute is
a SHA-1 hash of 3 key values.

00:34:15.366 --> 00:34:19.606 A:middle
It's a bundle ID, plus a unique
device identifier like the GUI

00:34:19.606 --> 00:34:23.536 A:middle
on OS X or the device
for vendor on iOS,

00:34:24.295 --> 00:34:26.065 A:middle
and also this opaque value.

00:34:26.956 --> 00:34:29.795 A:middle
How does this work to actually
confirm that it's intended

00:34:29.795 --> 00:34:32.286 A:middle
for your device,
for a single device?

00:34:33.726 --> 00:34:36.835 A:middle
You see, the App Store
knows these three key pieces

00:34:36.835 --> 00:34:39.186 A:middle
of information at the time
that purchase is made.

00:34:39.786 --> 00:34:41.556 A:middle
When someone taps the
buy button on your app

00:34:41.556 --> 00:34:43.056 A:middle
or on an in-app purchase
and completes

00:34:43.056 --> 00:34:45.775 A:middle
that transaction the app
store knows three key things.

00:34:46.186 --> 00:34:48.806 A:middle
One, we know the bundle ID of
the app making the purchase.

00:34:49.496 --> 00:34:52.476 A:middle
Two, we know the device
identifier from that device

00:34:52.476 --> 00:34:54.815 A:middle
because it's sent to the store
when that transaction is made.

00:34:55.525 --> 00:34:59.176 A:middle
And three, on service side
we create this opaque value,

00:34:59.176 --> 00:35:01.756 A:middle
this bit of random entropy that
we inject into this process


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.176 --> 00:35:01.756 A:middle
this bit of random entropy that
we inject into this process

00:35:02.076 --> 00:35:03.186 A:middle
to make it harder to attack.

00:35:03.926 --> 00:35:06.536 A:middle
So the app store knows these
three key things at the time

00:35:06.536 --> 00:35:08.666 A:middle
of purchase, creates
the SHA-1 hash,

00:35:09.166 --> 00:35:10.496 A:middle
bakes it into the receipt along

00:35:10.496 --> 00:35:12.116 A:middle
with that opaque
value that we used.

00:35:12.546 --> 00:35:16.206 A:middle
But the great thing is that your
app can know these same three

00:35:16.206 --> 00:35:18.776 A:middle
values at the time of
doing receipt validation.

00:35:20.076 --> 00:35:21.986 A:middle
So because you know
these three values,

00:35:22.316 --> 00:35:24.726 A:middle
and you can string them together
in that long concatenation

00:35:24.726 --> 00:35:26.096 A:middle
of bytes and create the hash,

00:35:26.826 --> 00:35:28.946 A:middle
and the App Store knew
these three key values

00:35:28.946 --> 00:35:31.016 A:middle
and created the same hash
and put it in the receipt,

00:35:31.076 --> 00:35:35.346 A:middle
if the hash you calculate
exactly matches the hash

00:35:35.346 --> 00:35:36.696 A:middle
that the App Store
created and put

00:35:36.696 --> 00:35:38.656 A:middle
in the receipt then
you're certain

00:35:38.976 --> 00:35:40.326 A:middle
that this receipt was intended

00:35:40.326 --> 00:35:42.086 A:middle
for your app on this
device only.

00:35:42.846 --> 00:35:45.476 A:middle
It's completely unique
to this device.

00:35:48.086 --> 00:35:52.906 A:middle
Now about ASN.1,
these high-level --

00:35:52.906 --> 00:35:54.486 A:middle
this high-level look
at the attributes

00:35:55.256 --> 00:35:57.536 A:middle
that explains how we structured
them, and how you work

00:35:57.536 --> 00:35:59.406 A:middle
with the different attributes,
and how we store them

00:35:59.406 --> 00:36:01.556 A:middle
as an array of attributes
with a type and a value.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.406 --> 00:36:01.556 A:middle
as an array of attributes
with a type and a value.

00:36:01.556 --> 00:36:04.076 A:middle
But how are they encoded
at the actual byte level?

00:36:04.076 --> 00:36:05.456 A:middle
How do you work with
this in code?

00:36:06.396 --> 00:36:09.076 A:middle
The way you do that is
by harnessing ASN.1.

00:36:09.076 --> 00:36:13.496 A:middle
ASN.1 is this way in which we
can use a textual definition

00:36:13.496 --> 00:36:14.666 A:middle
that you see here onscreen

00:36:15.116 --> 00:36:18.556 A:middle
to describe how the bytes
are arranged in the receipt.

00:36:19.756 --> 00:36:21.836 A:middle
We provide you with
this ASN.1 definition

00:36:21.836 --> 00:36:24.366 A:middle
of how we've structured the
receipt, and what you're seeing

00:36:24.366 --> 00:36:27.806 A:middle
up onscreen is that you have
a receipt module defined,

00:36:28.446 --> 00:36:30.256 A:middle
and in that receipt
there is a payload,

00:36:30.826 --> 00:36:33.536 A:middle
and that payload is a set
of receipt attributes.

00:36:34.376 --> 00:36:36.726 A:middle
And the receipt attribute
will be part of a sequence,

00:36:37.026 --> 00:36:39.896 A:middle
and it contains a type
which relates to that type

00:36:39.896 --> 00:36:42.816 A:middle
that we just saw before
as well as a value

00:36:42.816 --> 00:36:44.896 A:middle
that is an octet string
or a bunch of bytes.

00:36:45.516 --> 00:36:47.856 A:middle
And that refers to things
like that opaque value

00:36:47.856 --> 00:36:52.216 A:middle
in the SHA-1 hash that
we looked at just before.

00:36:52.216 --> 00:36:57.676 A:middle
Working with ASN.1, the trick
is you need to find a way to go

00:36:57.676 --> 00:37:00.026 A:middle
from that textual
definition that's based


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:57.676 --> 00:37:00.026 A:middle
from that textual
definition that's based

00:37:00.026 --> 00:37:03.336 A:middle
on the open standard of OpenSSL
to actually being able to read,

00:37:03.336 --> 00:37:06.056 A:middle
and write, and work
with it in a code level.

00:37:06.056 --> 00:37:07.976 A:middle
So there's a few options for you

00:37:07.976 --> 00:37:10.126 A:middle
because of course this
is very widely used.

00:37:11.476 --> 00:37:12.946 A:middle
One option is, again, OpenSSL.

00:37:13.036 --> 00:37:17.016 A:middle
Just as it did the PKCS7
verification it can read ASN.1

00:37:17.016 --> 00:37:17.636 A:middle
just fine.

00:37:18.886 --> 00:37:20.686 A:middle
You can create your own
parser if you wanted to,

00:37:20.686 --> 00:37:22.376 A:middle
to again have full
control over this.

00:37:23.676 --> 00:37:25.276 A:middle
Let's look at an
OpenSSL example.

00:37:26.066 --> 00:37:29.646 A:middle
When we did the first of
verifying the recipe we got back

00:37:29.646 --> 00:37:31.036 A:middle
that Pay 7 data structure.

00:37:31.036 --> 00:37:31.806 A:middle
Remember that?

00:37:32.766 --> 00:37:35.376 A:middle
Now we can use that same data
structure to actually get

00:37:35.376 --> 00:37:38.306 A:middle
that payload of receipt data
that's encoded in ASN.1.

00:37:38.746 --> 00:37:41.226 A:middle
It's buried in there in
the Pay 7 data structure

00:37:41.226 --> 00:37:41.906 A:middle
that we see there.

00:37:42.556 --> 00:37:45.066 A:middle
Once we've got that we can
call this function called ASN1

00:37:45.066 --> 00:37:47.526 A:middle
underscore get underscore object
to start pulling those objects

00:37:47.586 --> 00:37:50.126 A:middle
out of that ASN.1
encoded byte stream.

00:37:51.026 --> 00:37:52.656 A:middle
The objects are things
like there'll be an object

00:37:52.656 --> 00:37:53.816 A:middle
for the top level receipt.

00:37:54.836 --> 00:37:57.616 A:middle
There'll be an object in
there for the Payload.

00:37:58.066 --> 00:38:00.456 A:middle
There'll be an object in there
for the ReceiptAttribute,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.066 --> 00:38:00.456 A:middle
There'll be an object in there
for the ReceiptAttribute,

00:38:00.456 --> 00:38:02.106 A:middle
and then subjects
under there for each

00:38:02.106 --> 00:38:03.506 A:middle
of the type, value, and version.

00:38:03.506 --> 00:38:06.176 A:middle
You see, it's arranged
very hierarchically,

00:38:06.816 --> 00:38:09.276 A:middle
and that follows the same
structure that we just saw

00:38:09.276 --> 00:38:11.196 A:middle
in this ASN.1 textual
definition.

00:38:12.766 --> 00:38:16.626 A:middle
Now this is not perfectly coded,
but it gives you an example

00:38:16.626 --> 00:38:20.076 A:middle
of how in which you would
work with ASN.1 in OpenSSL

00:38:20.076 --> 00:38:21.666 A:middle
if that's how you
choose to do this.

00:38:22.896 --> 00:38:26.526 A:middle
You'd set up a while loop
to essentially move a --

00:38:26.526 --> 00:38:29.686 A:middle
move a pointer throughout
that stream of bytes

00:38:29.686 --> 00:38:30.806 A:middle
that represents the receipt.

00:38:31.316 --> 00:38:32.406 A:middle
We want to basically walk

00:38:32.406 --> 00:38:34.096 A:middle
through the receipt
ad read it as we go.

00:38:35.136 --> 00:38:36.196 A:middle
So we set up the while loop

00:38:36.196 --> 00:38:38.386 A:middle
and start calling ASN1
underscore get underscore object

00:38:38.386 --> 00:38:41.486 A:middle
to pull those attributes and
values out of the receipt.

00:38:42.046 --> 00:38:44.256 A:middle
So I make one call to get
my attribute, for example.

00:38:45.026 --> 00:38:47.766 A:middle
Another call to get the
type, and notice I'm moving

00:38:47.766 --> 00:38:50.886 A:middle
that pointer value around
like a finger following words

00:38:50.886 --> 00:38:51.276 A:middle
in a book.

00:38:51.276 --> 00:38:53.706 A:middle
And I'm calling ASN1
underscore get underscore object

00:38:53.706 --> 00:38:56.316 A:middle
to read each of those words
out and so I can use them.

00:38:56.976 --> 00:38:59.956 A:middle
After a few more calls to ASN1
underscore get underscore object

00:38:59.956 --> 00:39:02.126 A:middle
I'm ready to switch
on that attribute type


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.956 --> 00:39:02.126 A:middle
I'm ready to switch
on that attribute type

00:39:02.126 --> 00:39:03.516 A:middle
so I can see what
I'm looking for.

00:39:04.386 --> 00:39:06.336 A:middle
In this case just for a
simple example I'm looking

00:39:06.336 --> 00:39:08.936 A:middle
for Attribute Type 2 which
we know is a BundleID.

00:39:08.936 --> 00:39:10.756 A:middle
And then I can start processing

00:39:10.756 --> 00:39:12.956 A:middle
that by calling ASN1
underscore get underscore object

00:39:13.296 --> 00:39:15.196 A:middle
to actually read the
string value and compare it

00:39:15.196 --> 00:39:16.526 A:middle
against my hardcoded BundleID.

00:39:16.526 --> 00:39:20.686 A:middle
But of course I want to show you
that this is a real world thing

00:39:20.686 --> 00:39:22.416 A:middle
that anyone can do,
so here's my demo.

00:39:23.096 --> 00:39:25.306 A:middle
Now same as before, I've
got a third project here

00:39:25.306 --> 00:39:27.866 A:middle
that builds upon the same two
samples that we've seen so far.

00:39:29.336 --> 00:39:32.486 A:middle
You see here we have
the old familiar loading

00:39:32.486 --> 00:39:34.106 A:middle
up of the receipt,
certificate store,

00:39:34.106 --> 00:39:36.406 A:middle
and then calling PKCS7
underscore verify.

00:39:36.526 --> 00:39:38.166 A:middle
But now when we get
our result of one,

00:39:38.166 --> 00:39:40.366 A:middle
and we know this thing
is valid and unaltered,

00:39:41.056 --> 00:39:43.056 A:middle
and we want to start reading
the purchase information

00:39:43.056 --> 00:39:46.286 A:middle
out I'm going to go ahead and
start using OpenSSL to do that,

00:39:46.286 --> 00:39:49.046 A:middle
to actually read the information
about what someone purchased.

00:39:50.576 --> 00:39:54.366 A:middle
So just like we saw before I
find the actual octet string,

00:39:54.366 --> 00:39:56.376 A:middle
that stream of bytes that
represents the receipt,

00:39:56.966 --> 00:39:58.656 A:middle
buried within my
p7 data structure.

00:39:59.246 --> 00:40:01.496 A:middle
I start calling this ASN1
underscore get underscore object


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.246 --> 00:40:01.496 A:middle
I start calling this ASN1
underscore get underscore object

00:40:01.546 --> 00:40:03.876 A:middle
method to start reading those
bits of information out of

00:40:03.876 --> 00:40:04.936 A:middle
that byte stream one at a time.

00:40:06.696 --> 00:40:09.366 A:middle
When I start doing that in my
while loop to walk over each

00:40:09.366 --> 00:40:11.936 A:middle
of those bytes you see
that I set up that pointer,

00:40:11.936 --> 00:40:14.426 A:middle
and each time I call ASN1
underscore get underscore object

00:40:14.666 --> 00:40:16.566 A:middle
here I advance that
pointer along,

00:40:16.716 --> 00:40:18.446 A:middle
just like the finger
following the words in a book.

00:40:18.446 --> 00:40:21.286 A:middle
So I make a few calls to ASN1
underscore get underscore object

00:40:21.286 --> 00:40:23.096 A:middle
because I want to get things
like the attribute type,

00:40:23.096 --> 00:40:25.666 A:middle
attribute version, and then
the actual object itself.

00:40:26.176 --> 00:40:29.276 A:middle
Set up my switch statement, and
I've got a case 2 here looking

00:40:29.276 --> 00:40:31.996 A:middle
for BundleID, and a
final call here looking

00:40:31.996 --> 00:40:33.926 A:middle
for ASN1 underscore get
underscore object that allows me

00:40:33.926 --> 00:40:35.886 A:middle
to form the string which
will be a bundle ID.

00:40:36.686 --> 00:40:37.746 A:middle
Let's run it and see it work.

00:40:40.416 --> 00:40:44.386 A:middle
Notice by the fact that I had
done the OpenSSL integration

00:40:44.386 --> 00:40:46.446 A:middle
before in this project
I don't have to mess

00:40:46.446 --> 00:40:47.216 A:middle
around with that again.

00:40:47.216 --> 00:40:49.496 A:middle
This project is already set
up just like we had before.

00:40:51.936 --> 00:40:53.506 A:middle
So I've got a receipt, great.

00:40:53.506 --> 00:40:55.066 A:middle
We move into our
validateReceipt.

00:40:55.926 --> 00:40:59.776 A:middle
We've gone and called the
PKCS7 underscore verify here

00:40:59.776 --> 00:41:01.036 A:middle
to make sure the
receipt is trusted


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.776 --> 00:41:01.036 A:middle
to make sure the
receipt is trusted

00:41:01.036 --> 00:41:02.446 A:middle
and unaltered, and it is.

00:41:02.976 --> 00:41:04.126 A:middle
Now we can start reading it.

00:41:04.666 --> 00:41:05.946 A:middle
So I've got the byte stream.

00:41:06.636 --> 00:41:08.356 A:middle
I start calling ASN1
underscore get underscore object

00:41:08.356 --> 00:41:09.626 A:middle
to read that receipt in.

00:41:10.006 --> 00:41:12.946 A:middle
Then I set up my while loop to
iterate over each of that series

00:41:12.946 --> 00:41:14.146 A:middle
of attributes in the receipt.

00:41:15.426 --> 00:41:18.166 A:middle
And as we see as we sail
down this first attempt

00:41:18.166 --> 00:41:22.426 A:middle
at getting an object out of
the receipt, we get all the way

00:41:22.426 --> 00:41:25.646 A:middle
down to our Switch
statement, and if we pull

00:41:25.646 --> 00:41:28.276 A:middle
up the debug console
here you'll see, in fact,

00:41:28.276 --> 00:41:31.556 A:middle
what found first is
Attribute Type 4.

00:41:32.486 --> 00:41:35.096 A:middle
So as you iterate over this
While loop it's essentially

00:41:35.096 --> 00:41:37.856 A:middle
finding each of those attributes
that we saw in the receipt,

00:41:38.206 --> 00:41:40.316 A:middle
and you set up the Switch
statement here to work

00:41:40.316 --> 00:41:41.156 A:middle
with them accordingly.

00:41:42.566 --> 00:41:46.236 A:middle
So in fact, if we let this
run we would see a bunch

00:41:46.236 --> 00:41:49.906 A:middle
of breakpoints hit here in our
Switch statement, switching

00:41:49.906 --> 00:41:51.576 A:middle
and -- as we looped over each

00:41:51.576 --> 00:41:54.246 A:middle
of those attributes we can see
this time we've got Type 4.

00:41:54.556 --> 00:41:56.416 A:middle
Advance it again and
we get different values

00:41:56.416 --> 00:41:57.356 A:middle
as we go forward.

00:41:58.486 --> 00:42:00.566 A:middle
And we can begin working
with those to pull out things


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:58.486 --> 00:42:00.566 A:middle
And we can begin working
with those to pull out things

00:42:00.566 --> 00:42:03.486 A:middle
like the bundle ID to
confirm that, the hash value,

00:42:03.486 --> 00:42:05.266 A:middle
perform that hash to confirm

00:42:05.266 --> 00:42:09.996 A:middle
that it is intended
for this device.

00:42:10.456 --> 00:42:12.236 A:middle
All right, we're nearly there.

00:42:12.236 --> 00:42:13.796 A:middle
We have a receipt that
we know is trusted.

00:42:14.526 --> 00:42:16.536 A:middle
We've confirmed it's for
our app on this device.

00:42:16.956 --> 00:42:19.976 A:middle
Now we can get down to the
money end of this and find

00:42:19.976 --> 00:42:22.886 A:middle
out what the user has in
fact paid for so we know what

00:42:22.886 --> 00:42:24.916 A:middle
to unlock, and we know what
content to provide them.

00:42:25.906 --> 00:42:29.346 A:middle
Now along with those
Attributes Type 2, 3, 4,

00:42:29.346 --> 00:42:32.286 A:middle
and 5 that we just looked
at you will also see one

00:42:32.286 --> 00:42:34.446 A:middle
or more attributes of Type 17.

00:42:34.966 --> 00:42:37.896 A:middle
Type 17 is a record of an in-app
purchase having been made,

00:42:38.286 --> 00:42:40.946 A:middle
and this is how you verify that
that in-app purchase was real

00:42:40.946 --> 00:42:42.706 A:middle
and authentic and
is going to result

00:42:42.706 --> 00:42:44.046 A:middle
in money making its way to you.

00:42:45.716 --> 00:42:47.926 A:middle
The value of the
Type 17 attribute is

00:42:47.926 --> 00:42:51.456 A:middle
in fact a nested set
of attributes itself.

00:42:51.966 --> 00:42:54.866 A:middle
So you find the Type 17
attribute, get the value,

00:42:55.206 --> 00:42:57.996 A:middle
and that value is going to
be a nested set of attributes

00:42:57.996 --> 00:43:00.506 A:middle
that tell you the
quantity, product identifier,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:57.996 --> 00:43:00.506 A:middle
that tell you the
quantity, product identifier,

00:43:00.506 --> 00:43:02.736 A:middle
and the transaction
identifier and purchase date

00:43:02.916 --> 00:43:04.786 A:middle
for an in-app purchase
that has been made.

00:43:05.316 --> 00:43:08.406 A:middle
And again, we give you the
ASN.1 representation of that

00:43:08.406 --> 00:43:09.676 A:middle
so you know how it's structured.

00:43:12.206 --> 00:43:14.726 A:middle
Now if you have a paid app in
the Store and have been wanting

00:43:14.726 --> 00:43:17.606 A:middle
to make the transition to making
a freemium app, that is free

00:43:17.606 --> 00:43:20.816 A:middle
with in-app purchases,
one thing you don't want

00:43:20.816 --> 00:43:22.156 A:middle
to do is leave those loyal,

00:43:22.156 --> 00:43:23.826 A:middle
paying customers
out in the cold.

00:43:24.356 --> 00:43:25.826 A:middle
If they've already
paid the full price

00:43:25.826 --> 00:43:28.036 A:middle
for your app they shouldn't
have to go and do a bunch

00:43:28.036 --> 00:43:29.236 A:middle
of in-app purchases just

00:43:29.236 --> 00:43:30.696 A:middle
to get back what
they've already paid for,

00:43:31.246 --> 00:43:32.386 A:middle
so here's a trick you can do.

00:43:32.906 --> 00:43:36.236 A:middle
Included in the receipt now is
this Type 19 attribute called

00:43:36.236 --> 00:43:37.776 A:middle
Original Application Version.

00:43:38.556 --> 00:43:40.086 A:middle
That is the application version

00:43:40.556 --> 00:43:42.546 A:middle
that the user originally
purchased.

00:43:43.066 --> 00:43:46.376 A:middle
So if two years ago I purchased
this app the receipt will always

00:43:46.376 --> 00:43:49.746 A:middle
reflect the version that was
in the store at the time I made

00:43:49.746 --> 00:43:51.216 A:middle
that purchase all
those years ago.

00:43:52.366 --> 00:43:55.466 A:middle
And that's your way of knowing
whether to treat the app

00:43:55.466 --> 00:43:58.576 A:middle
as a paid version and give them
what they've paid for or to know

00:43:58.576 --> 00:44:00.566 A:middle
that they purchased the app
when you were a freemium app


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:58.576 --> 00:44:00.566 A:middle
that they purchased the app
when you were a freemium app

00:44:01.276 --> 00:44:02.816 A:middle
to not unlock features
and content

00:44:02.816 --> 00:44:04.756 A:middle
until you see those in-app
purchases being made.

00:44:05.976 --> 00:44:08.916 A:middle
Now in terms of in-app
purchases, different types

00:44:08.916 --> 00:44:11.196 A:middle
of content have different
lifecycles in terms

00:44:11.196 --> 00:44:13.026 A:middle
of what is seen in the receipt.

00:44:14.026 --> 00:44:16.306 A:middle
If you are dealing
with consumable

00:44:16.306 --> 00:44:21.486 A:middle
and non-renewing subscriptions,
so things like gas in a racecar

00:44:21.486 --> 00:44:26.576 A:middle
in a racing game, coins, blocks,
currency, non-consumable --

00:44:26.576 --> 00:44:29.056 A:middle
sorry, consumables are
things that you buy,

00:44:29.606 --> 00:44:31.766 A:middle
use on a single device,
and they get used up.

00:44:32.906 --> 00:44:35.176 A:middle
Those sorts of items,
because they are that purchase

00:44:35.176 --> 00:44:37.136 A:middle
that you can make again
and again and are intended

00:44:37.136 --> 00:44:41.716 A:middle
to be used on a single
device, they only appear once

00:44:41.716 --> 00:44:44.726 A:middle
in the receipt, and only in
the receipt that's issued

00:44:44.726 --> 00:44:45.916 A:middle
at the time of purchase.

00:44:46.846 --> 00:44:49.576 A:middle
So when that purchase is made --
if you have 500 gallons of gas

00:44:49.576 --> 00:44:52.796 A:middle
in the racecar -- you need
to interpret the receipt

00:44:52.796 --> 00:44:55.306 A:middle
at that point in time and
validate it, and then stash

00:44:55.306 --> 00:44:58.486 A:middle
that state -- that is up
the gas tank by 500 gallons

00:44:58.486 --> 00:44:59.346 A:middle
or whatever it might be --

00:44:59.836 --> 00:45:02.406 A:middle
you need to stash
that state yourself.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:59.836 --> 00:45:02.406 A:middle
you need to stash
that state yourself.

00:45:02.896 --> 00:45:04.786 A:middle
That transaction
will not be present

00:45:04.786 --> 00:45:07.686 A:middle
in any subsequent receipts that
we issue, nor will it be present

00:45:07.686 --> 00:45:10.236 A:middle
if you perform the restore
completed transactions.

00:45:10.576 --> 00:45:11.976 A:middle
They're a one-shot deal.

00:45:12.476 --> 00:45:15.856 A:middle
When the transaction is done
you inspect the receipt,

00:45:16.016 --> 00:45:17.506 A:middle
stash that state yourself.

00:45:17.786 --> 00:45:20.686 A:middle
Now the total opposite
to that is non-consumable

00:45:20.686 --> 00:45:22.246 A:middle
and auto-renewable
subscriptions.

00:45:22.836 --> 00:45:25.636 A:middle
If you're selling
non-consumables like levels

00:45:25.636 --> 00:45:27.656 A:middle
in a game, for example,
those are things

00:45:27.656 --> 00:45:30.936 A:middle
that a user buys once, and they
would rightly expect to be able

00:45:30.936 --> 00:45:33.136 A:middle
to use that game level
on other devices.

00:45:33.506 --> 00:45:36.826 A:middle
If I go and buy a new phone and
re-download your app I expect

00:45:36.826 --> 00:45:39.206 A:middle
to get back all the lower levels
that I've already paid for.

00:45:40.336 --> 00:45:41.866 A:middle
So because these non-consumables

00:45:41.866 --> 00:45:44.626 A:middle
and auto-renewable subscriptions
have that sense of permanency

00:45:44.626 --> 00:45:47.036 A:middle
about them they are
always in the receipt.

00:45:48.016 --> 00:45:49.836 A:middle
And you can use the
StoreKit APIs

00:45:49.836 --> 00:45:51.456 A:middle
to restore completed
transactions

00:45:51.756 --> 00:45:54.586 A:middle
which is how the user gets back
all those things they've bought

00:45:54.586 --> 00:45:57.136 A:middle
from you before in
terms of non-consumable

00:45:57.496 --> 00:46:00.156 A:middle
and auto-renewable subscriptions
that are still valid.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:57.496 --> 00:46:00.156 A:middle
and auto-renewable subscriptions
that are still valid.

00:46:00.156 --> 00:46:05.816 A:middle
What we've talked about so far
is all about the happy path

00:46:05.816 --> 00:46:07.806 A:middle
of a receipt being
valid and true.

00:46:08.676 --> 00:46:10.456 A:middle
What if receipts are invalid?

00:46:10.786 --> 00:46:13.056 A:middle
What if when you validate
this it's either missing

00:46:13.286 --> 00:46:14.676 A:middle
or something appears
wrong with it?

00:46:16.236 --> 00:46:20.016 A:middle
The fact is that doesn't mean
something bad has happened.

00:46:20.616 --> 00:46:23.306 A:middle
That does not necessarily
mean someone is trying

00:46:23.306 --> 00:46:24.986 A:middle
to rip you off.

00:46:25.256 --> 00:46:27.266 A:middle
There are many real
world scenarios

00:46:27.676 --> 00:46:29.276 A:middle
that your app will
definitely run

00:46:29.276 --> 00:46:34.246 A:middle
into where a receipt is missing
or invalid through no fault

00:46:34.246 --> 00:46:37.056 A:middle
of the user, not because
anyone's trying to rip you off.

00:46:38.046 --> 00:46:39.726 A:middle
But if you see this
happen what you need

00:46:39.726 --> 00:46:41.246 A:middle
to do is refresh the receipt.

00:46:42.176 --> 00:46:44.476 A:middle
On iOS if the receipt
doesn't exist or appears

00:46:44.476 --> 00:46:46.656 A:middle
to be invalid you'd
refresh it using StoreKit.

00:46:47.356 --> 00:46:49.886 A:middle
StoreKit has the
SKReceipt Refresh operation

00:46:50.756 --> 00:46:52.586 A:middle
which allows you
to -- you can alloc

00:46:52.586 --> 00:46:56.536 A:middle
and init this SKReceiptRefresh
Request object, set a delegate

00:46:56.536 --> 00:46:58.466 A:middle
so you get the callbacks
when the refresh is done,

00:46:58.466 --> 00:46:59.836 A:middle
and then start the refresh.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:01.276 --> 00:47:03.856 A:middle
When that request completes you
should get back a new receipt

00:47:03.856 --> 00:47:05.576 A:middle
that you can then re-verify.

00:47:06.186 --> 00:47:09.126 A:middle
But note that getting
a new receipt we have

00:47:09.126 --> 00:47:10.086 A:middle
to talk to the App Store.

00:47:10.836 --> 00:47:12.936 A:middle
So of course a network
connection will be required

00:47:13.026 --> 00:47:14.566 A:middle
which your user may
not always have.

00:47:15.836 --> 00:47:18.756 A:middle
Store sign-in will be required
so that we can go and verify

00:47:18.756 --> 00:47:20.256 A:middle
that this person really is them

00:47:20.256 --> 00:47:22.526 A:middle
and check their purchase history
before we issue the receipt.

00:47:23.936 --> 00:47:27.146 A:middle
But what you need to do is avoid
continuous loops of refresh,

00:47:27.146 --> 00:47:28.806 A:middle
validate, refresh
validate, refresh,

00:47:28.806 --> 00:47:31.526 A:middle
validate because each time
you do that the user's going

00:47:31.526 --> 00:47:33.666 A:middle
to get stuck in this horrible
loop of prompt for off.

00:47:33.666 --> 00:47:34.646 A:middle
"Yes, I signed in."

00:47:35.436 --> 00:47:36.296 A:middle
Still bad.

00:47:36.486 --> 00:47:37.626 A:middle
"Oh, sign in again."

00:47:37.856 --> 00:47:40.046 A:middle
And all this network traffic
goes back and forward.

00:47:40.466 --> 00:47:43.766 A:middle
So what you should do is on
launch validate the receipt.

00:47:44.336 --> 00:47:46.886 A:middle
If it's missing or invalid
you can refresh it once.

00:47:47.306 --> 00:47:49.526 A:middle
If it's still missing
and invalid that's it.

00:47:50.636 --> 00:47:51.886 A:middle
Don't call refresh again.

00:47:53.246 --> 00:47:55.456 A:middle
But OS X is of course
a little different.

00:47:55.456 --> 00:47:59.606 A:middle
As we saw before if the receipt
is invalid or missing you exit

00:47:59.606 --> 00:48:02.346 A:middle
with code 173 to tell
the OS and the App Store


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:59.606 --> 00:48:02.346 A:middle
with code 173 to tell
the OS and the App Store

00:48:02.346 --> 00:48:03.666 A:middle
that you need to
get a new receipt.

00:48:05.546 --> 00:48:08.536 A:middle
The OS sees that exit
code, tells the App Store,

00:48:08.536 --> 00:48:11.026 A:middle
and the App Store will go and
get a new receipt for you.

00:48:11.026 --> 00:48:14.776 A:middle
But just like on iOS it will
require a network connection

00:48:15.826 --> 00:48:17.416 A:middle
and store sign-in
will be requested.

00:48:18.236 --> 00:48:20.066 A:middle
So this is definitely
not something you want

00:48:20.066 --> 00:48:21.536 A:middle
to do automatically on launch.

00:48:22.576 --> 00:48:27.116 A:middle
Now when you -- do you receive
validation, and it appears

00:48:27.116 --> 00:48:31.246 A:middle
to be invalid or missing, and
you request a new receipt even

00:48:31.246 --> 00:48:34.406 A:middle
if then you still don't have
a receipt or it still appears

00:48:34.406 --> 00:48:38.806 A:middle
to be invalid what you do
next is entirely up to you.

00:48:40.796 --> 00:48:43.376 A:middle
Invalid or missing
receipts will happen.

00:48:44.046 --> 00:48:46.706 A:middle
Everyone's app will see a
condition where this happens,

00:48:46.706 --> 00:48:48.176 A:middle
and it could be entirely
legitimate.

00:48:48.526 --> 00:48:49.356 A:middle
Here's an example.

00:48:49.846 --> 00:48:54.366 A:middle
If I sync an app from iTunes
to my iOS device it lands

00:48:54.366 --> 00:48:56.446 A:middle
on the iOS device
with no receipt.

00:48:56.946 --> 00:48:59.766 A:middle
Because it wasn't
purchased directly

00:48:59.766 --> 00:49:01.396 A:middle
from the App Store the
App store doesn't have


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:59.766 --> 00:49:01.396 A:middle
from the App Store the
App store doesn't have

00:49:01.396 --> 00:49:02.776 A:middle
that unique device identifier.

00:49:02.776 --> 00:49:04.126 A:middle
We can't issue a receipt.

00:49:04.796 --> 00:49:06.566 A:middle
So it lands on the
device with no receipt,

00:49:06.846 --> 00:49:09.046 A:middle
and when your app launches
it'll find no receipt and need

00:49:09.046 --> 00:49:10.996 A:middle
to refresh it if you want
to validate the receipt.

00:49:12.296 --> 00:49:15.336 A:middle
So it's a real world scenario
that will happen, but you need

00:49:15.336 --> 00:49:17.166 A:middle
to configure the -- you
need to consider the case

00:49:17.166 --> 00:49:19.596 A:middle
that that refresh of the
receipt may not be possible.

00:49:19.656 --> 00:49:22.846 A:middle
All right, what if I got my
wonderful app from the --

00:49:22.966 --> 00:49:26.046 A:middle
from the iTunes Store or the App
Store, and I'm really excited

00:49:26.046 --> 00:49:28.036 A:middle
about using it on the plane
flight I'm about to get on.

00:49:28.586 --> 00:49:31.986 A:middle
I plug my iOS device in,
sync the app across, unplug,

00:49:32.406 --> 00:49:34.976 A:middle
jump on the plane, no Wi-Fi.

00:49:36.026 --> 00:49:37.816 A:middle
"Ah, I can't get a receipt."

00:49:38.486 --> 00:49:42.606 A:middle
It's up to you now to decide
how you want to handle that.

00:49:42.606 --> 00:49:46.786 A:middle
Okay, you should ideally
match the user experience

00:49:46.786 --> 00:49:47.976 A:middle
to the value of your app.

00:49:47.976 --> 00:49:50.876 A:middle
And this comes back to the
concepts we were talking before.

00:49:50.876 --> 00:49:54.086 A:middle
I mean, you can allow full
access to the app's content

00:49:54.086 --> 00:49:56.936 A:middle
and features even if the
receipt's invalid if you choose.

00:49:57.676 --> 00:49:59.986 A:middle
You could maybe have a -- you
could maybe have a grace period


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:00.146 --> 00:50:01.776 A:middle
where you will allow
some use of the app.

00:50:02.436 --> 00:50:04.726 A:middle
You could limit access to
certain areas of the app;

00:50:04.726 --> 00:50:06.116 A:middle
perhaps there's one
area of the app

00:50:06.606 --> 00:50:09.066 A:middle
that is particularly valuable
that you wouldn't want

00:50:09.066 --> 00:50:11.396 A:middle
to let them access even if
they can't get a receipt.

00:50:12.726 --> 00:50:14.656 A:middle
Or you could block
functionality entirely.

00:50:15.216 --> 00:50:16.386 A:middle
You could have the
app do nothing

00:50:16.386 --> 00:50:17.826 A:middle
until a valid receipt is seen.

00:50:18.836 --> 00:50:21.386 A:middle
On OS X only you could in
fact force that app to quit

00:50:21.386 --> 00:50:24.276 A:middle
if you wanted to, but that
concept does not exist on iOS.

00:50:24.426 --> 00:50:26.126 A:middle
On iOS the app is
always running,

00:50:26.566 --> 00:50:28.246 A:middle
so it's up to you to
decide what to do.

00:50:28.246 --> 00:50:32.196 A:middle
But again, think about
which business model you are

00:50:32.196 --> 00:50:32.796 A:middle
more like.

00:50:32.956 --> 00:50:35.356 A:middle
Are you like the grocery store
that wants a comfortable,

00:50:35.596 --> 00:50:39.126 A:middle
really happy buying experience
and usage experience every time,

00:50:39.586 --> 00:50:40.776 A:middle
and maybe you don't care if one

00:50:40.776 --> 00:50:42.306 A:middle
or two bananas goes
out the door?

00:50:42.616 --> 00:50:44.816 A:middle
Maybe you don't care too
much if a receipt's invalid

00:50:44.816 --> 00:50:47.226 A:middle
for a little bit of time.

00:50:47.436 --> 00:50:50.386 A:middle
Or maybe you are more like
that high-end jewelry store,

00:50:50.616 --> 00:50:53.776 A:middle
and maybe it's totally not
okay for your app to be used

00:50:53.776 --> 00:50:55.636 A:middle
in any way unless
there's a valid receipt.

00:50:56.056 --> 00:50:58.936 A:middle
It's up to you, but you should
really think about the value

00:50:58.936 --> 00:51:02.036 A:middle
of your product and how you
want the user's experience to be


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:58.936 --> 00:51:02.036 A:middle
of your product and how you
want the user's experience to be

00:51:02.266 --> 00:51:03.426 A:middle
if they don't have a receipt.

00:51:04.026 --> 00:51:06.946 A:middle
Now everything we've talked
about so far is about validating

00:51:06.946 --> 00:51:09.146 A:middle
that receipt on a device,
but you can also do

00:51:09.146 --> 00:51:11.106 A:middle
that same process
on your servers.

00:51:11.306 --> 00:51:13.616 A:middle
If you have servers
issuing content based

00:51:13.616 --> 00:51:16.266 A:middle
on an in-app purchase being
made here's what you can do.

00:51:16.966 --> 00:51:19.576 A:middle
When you request that
content send the receipt

00:51:19.576 --> 00:51:20.516 A:middle
up to your server.

00:51:20.846 --> 00:51:23.286 A:middle
Your server can talk to
Apple's validation servers,

00:51:23.656 --> 00:51:25.696 A:middle
and we will return
back a block of JSON

00:51:26.376 --> 00:51:29.476 A:middle
that will tell you whether
or not the receipt is valid,

00:51:29.476 --> 00:51:31.656 A:middle
and it will also include
the purchase information.

00:51:32.246 --> 00:51:34.326 A:middle
Your server can interpret
the purchase information

00:51:34.326 --> 00:51:37.776 A:middle
and decide only to hand
back that content based

00:51:37.776 --> 00:51:40.476 A:middle
on that real monetary
transaction having taken place.

00:51:40.846 --> 00:51:43.166 A:middle
It's a great way to secure
and lock down the access

00:51:43.166 --> 00:51:45.146 A:middle
to that content that
you're hosting online.

00:51:45.146 --> 00:51:47.116 A:middle
Now for this server --

00:51:47.116 --> 00:51:50.686 A:middle
server-to-server validation it's
only designed for your servers

00:51:50.686 --> 00:51:53.116 A:middle
to validate the receipt
before they issue content.

00:51:53.746 --> 00:51:56.996 A:middle
And it's your app that needs to
send the receipt to your server.

00:51:57.546 --> 00:51:58.376 A:middle
You need to secure

00:51:58.376 --> 00:51:59.986 A:middle
that end-to-end communication
channel,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:00.376 --> 00:52:03.166 A:middle
and then only your
server sends the receipt

00:52:03.296 --> 00:52:04.796 A:middle
to Apple's validation server.

00:52:05.636 --> 00:52:09.856 A:middle
Never, never, never, ever
send the receipt directly

00:52:09.856 --> 00:52:12.736 A:middle
from your app on a device
to the validation servers.

00:52:13.386 --> 00:52:15.206 A:middle
Way too easy for someone
to sit in the middle

00:52:15.206 --> 00:52:16.446 A:middle
and return a false positive,

00:52:16.816 --> 00:52:19.186 A:middle
and you'll also be exposing
your shared secret for using

00:52:19.186 --> 00:52:20.396 A:middle
that validation service.

00:52:21.256 --> 00:52:23.996 A:middle
But the good thing is the
response you get back is in JSON

00:52:23.996 --> 00:52:24.886 A:middle
which is really easy to pass

00:52:24.886 --> 00:52:28.426 A:middle
for virtually any server
platform out there.

00:52:29.476 --> 00:52:31.846 A:middle
Now what you absolutely
have to make sure you do

00:52:31.916 --> 00:52:34.046 A:middle
if you're implementing
receipt validation is test

00:52:34.046 --> 00:52:34.576 A:middle
it thoroughly.

00:52:35.066 --> 00:52:37.826 A:middle
A bug in this area of code
could be disastrous for you

00:52:38.596 --> 00:52:40.416 A:middle
because it could lock
someone out of the features

00:52:40.416 --> 00:52:42.106 A:middle
and content they
really have paid for,

00:52:42.356 --> 00:52:43.916 A:middle
and I guarantee you
that's a one-way trip

00:52:43.916 --> 00:52:44.986 A:middle
to one-star reviews.

00:52:46.146 --> 00:52:47.226 A:middle
So test really thoroughly.

00:52:47.226 --> 00:52:49.036 A:middle
How does your app behave
when there's no receipt?

00:52:49.336 --> 00:52:51.486 A:middle
How does it behave when the
receipt looks to be invalid?

00:52:51.756 --> 00:52:53.416 A:middle
How does it behave
when the app --

00:52:53.416 --> 00:52:55.796 A:middle
when the receipt appears
to be valid after refresh?

00:52:56.176 --> 00:52:58.516 A:middle
What if the refresh failed
and it's still invalid?

00:52:58.516 --> 00:52:59.606 A:middle
How does your app behave?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:00.086 --> 00:53:02.166 A:middle
And if you're selling your
app using the Volume Purchase

00:53:02.166 --> 00:53:04.736 A:middle
Program for business
and education be aware

00:53:04.736 --> 00:53:06.496 A:middle
of the extra fields
that are in the receipt

00:53:06.816 --> 00:53:08.896 A:middle
to tell you whether your
app has been allocated

00:53:08.896 --> 00:53:10.586 A:middle
to a user or revoked.

00:53:11.006 --> 00:53:15.076 A:middle
But the really important message
that I want to make sure gets

00:53:15.076 --> 00:53:17.866 A:middle
through is that these
are not edge cases.

00:53:18.366 --> 00:53:20.266 A:middle
Your app will launch
without a receipt.

00:53:20.366 --> 00:53:22.476 A:middle
Your app will launch with a
receipt that looks invalid.

00:53:22.476 --> 00:53:24.256 A:middle
You know that example
before I gave you

00:53:24.256 --> 00:53:26.186 A:middle
of an iOS app being
synced from iTunes?

00:53:26.706 --> 00:53:30.306 A:middle
When you buy a new Mac and you
move your apps from your old Mac

00:53:30.306 --> 00:53:32.246 A:middle
to your new Mac, guess what?

00:53:32.246 --> 00:53:34.376 A:middle
The receipt moves from the
old Mac to the new Mac.

00:53:34.876 --> 00:53:37.516 A:middle
So when your app launches
it's going to see a receipt

00:53:37.516 --> 00:53:39.496 A:middle
that was not intended
for the new Mac.

00:53:40.026 --> 00:53:41.776 A:middle
So these are real
things that happen.

00:53:41.776 --> 00:53:44.466 A:middle
They're definitely
not edge cases at all.

00:53:45.396 --> 00:53:47.876 A:middle
Now testing this on iOS you need

00:53:47.876 --> 00:53:49.766 A:middle
to use the App Store's
test environment.

00:53:50.156 --> 00:53:51.906 A:middle
To do that you run
the app in Xcode,

00:53:52.056 --> 00:53:53.896 A:middle
perform an in-app purchase
to get the receipt,

00:53:54.126 --> 00:53:56.486 A:middle
but you must have
your app signed

00:53:56.486 --> 00:53:57.886 A:middle
with a development certificate.

00:53:59.766 --> 00:54:01.756 A:middle
OS X, similar but different.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:59.766 --> 00:54:01.756 A:middle
OS X, similar but different.

00:54:01.896 --> 00:54:05.026 A:middle
Build it in Xcode, run the
app from Finder, remember.

00:54:05.026 --> 00:54:07.946 A:middle
So Finder in the OS, and the
App Store sees that exit code,

00:54:07.946 --> 00:54:09.376 A:middle
and we know you need
to get a receipt.

00:54:11.296 --> 00:54:14.426 A:middle
When you exit with that
receipt you must make sure --

00:54:14.426 --> 00:54:16.556 A:middle
exit with that code,
sorry, you must make sure

00:54:16.556 --> 00:54:19.716 A:middle
that your app is signed with
its development certificate.

00:54:22.236 --> 00:54:25.026 A:middle
Now in case you missed the
very, very deliberate repetition

00:54:25.026 --> 00:54:29.556 A:middle
in those last two slides,
your app must be signed

00:54:29.706 --> 00:54:30.876 A:middle
with your development
certificate.

00:54:30.876 --> 00:54:34.086 A:middle
Why? Well, because
the first thing we do

00:54:34.086 --> 00:54:35.986 A:middle
at the App Store Layer
when your app says, "Hey,

00:54:35.986 --> 00:54:36.946 A:middle
I want a new receipt," or, "Hey,

00:54:36.946 --> 00:54:38.126 A:middle
I want to make an
in-app purchase,"

00:54:38.426 --> 00:54:40.066 A:middle
is we inspect your
code signature.

00:54:40.736 --> 00:54:42.316 A:middle
If the app appears to be signed

00:54:42.316 --> 00:54:43.956 A:middle
with your development
certificate we know you're a

00:54:43.956 --> 00:54:46.646 A:middle
developer testing your app
so we route those requests

00:54:46.646 --> 00:54:49.596 A:middle
to the test environment so that
you can make in-app purchases,

00:54:49.636 --> 00:54:50.946 A:middle
test your receipt validation

00:54:50.946 --> 00:54:52.736 A:middle
without actually
buying something.

00:54:53.786 --> 00:54:55.076 A:middle
But if we see the app is signed

00:54:55.076 --> 00:54:57.746 A:middle
with a production App Store
certificate we know this is an

00:54:57.746 --> 00:54:59.786 A:middle
app that's been purchased;
it's out there in the wheel --

00:54:59.786 --> 00:55:02.446 A:middle
real world, so therefore,
we route those requests


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:59.786 --> 00:55:02.446 A:middle
real world, so therefore,
we route those requests

00:55:02.446 --> 00:55:04.756 A:middle
to the production store
so that you get paid

00:55:04.976 --> 00:55:06.836 A:middle
for the transactions
the customer is making.

00:55:09.486 --> 00:55:11.926 A:middle
Lastly, a quick word on
the app submission process,

00:55:12.366 --> 00:55:14.436 A:middle
especially as how it
pertains to receipts.

00:55:14.926 --> 00:55:18.816 A:middle
When you're developing your app
Development signed, of course,

00:55:19.026 --> 00:55:21.076 A:middle
and you're working with the
App Store's test environment

00:55:21.076 --> 00:55:23.266 A:middle
to test your in-app purchase
and receipt validation.

00:55:23.686 --> 00:55:26.426 A:middle
The receipts you get back are
test environment receipts.

00:55:27.206 --> 00:55:29.546 A:middle
Now because your app may not
already be on the Store yet,

00:55:29.546 --> 00:55:31.566 A:middle
and you're using the test
environment there'll be some

00:55:31.566 --> 00:55:33.126 A:middle
difference in the
fields that are present.

00:55:34.656 --> 00:55:36.636 A:middle
When your app is on
sale in the App Store

00:55:36.636 --> 00:55:40.226 A:middle
and it's Production signed you
will see production receipts

00:55:40.346 --> 00:55:43.216 A:middle
that have some more fields in
them because your app is real

00:55:43.216 --> 00:55:44.406 A:middle
and live on the Store.

00:55:45.596 --> 00:55:48.386 A:middle
But App Review is different.

00:55:49.336 --> 00:55:54.266 A:middle
App Review uses test receipts
using a Production signed app.

00:55:54.936 --> 00:55:58.016 A:middle
That's not something you can
do, only App Review can do.

00:55:58.196 --> 00:56:01.466 A:middle
But what you need
to be aware of is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:55:58.196 --> 00:56:01.466 A:middle
But what you need
to be aware of is

00:56:01.466 --> 00:56:04.566 A:middle
that when you're testing your
app if you try to get too clever

00:56:04.566 --> 00:56:06.536 A:middle
and think, "Oh, I've
found a way to determine

00:56:06.536 --> 00:56:09.206 A:middle
that these receipts are from the
test environment, and I never,

00:56:09.206 --> 00:56:10.956 A:middle
ever, ever, ever want
someone out there

00:56:10.956 --> 00:56:13.586 A:middle
to be getting a receipt using my
app from the test environment,"

00:56:14.206 --> 00:56:15.706 A:middle
if you try and implement code

00:56:15.706 --> 00:56:18.156 A:middle
that rejects a test
environment receipt

00:56:18.156 --> 00:56:21.226 A:middle
because you're Production
signed, guess what?

00:56:21.686 --> 00:56:23.056 A:middle
App Review can't
review your app.

00:56:24.196 --> 00:56:26.236 A:middle
We won't be able to use
your in-app purchases,

00:56:27.506 --> 00:56:29.326 A:middle
and therefore, it'll
get rejected.

00:56:29.896 --> 00:56:33.756 A:middle
So just be aware that you will
have your live Production signed

00:56:33.756 --> 00:56:35.086 A:middle
version of the app
that you submitted.

00:56:35.396 --> 00:56:38.136 A:middle
It will see test receipts
during app review.

00:56:38.686 --> 00:56:43.306 A:middle
So if you'd like more
information you can contact

00:56:43.306 --> 00:56:44.256 A:middle
our Evangelists.

00:56:44.696 --> 00:56:46.236 A:middle
There's also documentation
online

00:56:46.236 --> 00:56:48.236 A:middle
with the Receipt
Validation Programming Guide.

00:56:48.636 --> 00:56:50.336 A:middle
And of course there's the
Apple Developer Forums

00:56:50.336 --> 00:56:52.736 A:middle
which are a great place to
discuss this and ask for help.

00:56:53.916 --> 00:56:56.496 A:middle
Some related sessions, on
Wednesday I gave a session

00:56:56.496 --> 00:56:58.376 A:middle
about optimizing your
in-app purchases.

00:56:58.516 --> 00:57:00.296 A:middle
That was around creating
a trouble-free


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:56:58.516 --> 00:57:00.296 A:middle
That was around creating
a trouble-free

00:57:00.296 --> 00:57:03.296 A:middle
and smooth in-app purchase
experience every single time.

00:57:04.586 --> 00:57:06.956 A:middle
And my colleague Rachel gave
an excellent session earlier

00:57:06.956 --> 00:57:09.256 A:middle
that morning that was
about how to design

00:57:09.256 --> 00:57:10.966 A:middle
for a great in-app
purchase experience.

00:57:11.456 --> 00:57:12.876 A:middle
It's great to protect
your revenue,

00:57:13.226 --> 00:57:15.326 A:middle
even better to have a
trouble-free in-app experience

00:57:15.406 --> 00:57:17.476 A:middle
every time, but you've
got to also create

00:57:17.476 --> 00:57:19.296 A:middle
that irresistible
sales experience.

00:57:19.556 --> 00:57:21.036 A:middle
So do go and check
out these sessions.

00:57:21.036 --> 00:57:21.666 A:middle
They were really good.

00:57:22.736 --> 00:57:23.376 A:middle
Thanks very much.

00:57:24.508 --> 00:57:26.508 A:middle
[ Applause ]

