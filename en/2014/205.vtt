WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:12.516 --> 00:00:19.976 A:middle
[ Applause ]

00:00:20.476 --> 00:00:24.766 A:middle
&gt;&gt; Hello. I'm Ian Baird,
iOS Frameworks Engineer,

00:00:24.826 --> 00:00:26.696 A:middle
and today I'm here to tell you

00:00:26.696 --> 00:00:31.016 A:middle
about creating extensions
for iOS and OS X.

00:00:31.496 --> 00:00:33.566 A:middle
Going to lay out a quick
agenda for today's talk.

00:00:33.976 --> 00:00:37.046 A:middle
First, we're going to talk about
extensions and extension points.

00:00:38.166 --> 00:00:40.596 A:middle
Then I'm going to invite
my colleague, Matt Gamble,

00:00:40.976 --> 00:00:43.546 A:middle
from the Notification
Center Team to the stage

00:00:43.846 --> 00:00:47.076 A:middle
to tell you more and show
you more about creating one

00:00:47.076 --> 00:00:51.236 A:middle
of the hottest new tickets
at WWDC14, Today Extensions.

00:00:51.826 --> 00:00:57.736 A:middle
And then, following
on from that,

00:00:57.856 --> 00:01:00.386 A:middle
we're going to invite our
colleague, Guy Fullerton,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:57.856 --> 00:01:00.386 A:middle
we're going to invite our
colleague, Guy Fullerton,

00:01:00.916 --> 00:01:03.176 A:middle
onto the stage to tell
you more about how

00:01:03.176 --> 00:01:06.196 A:middle
to create Share Extensions
like the one you saw

00:01:06.396 --> 00:01:07.866 A:middle
in the keynote with Pinterest.

00:01:10.176 --> 00:01:13.296 A:middle
Moving along, what
are extensions?

00:01:13.656 --> 00:01:19.256 A:middle
Well, extensions are almost
like, it's a way for you

00:01:19.606 --> 00:01:23.976 A:middle
to extend the system
and other applications.

00:01:24.126 --> 00:01:26.686 A:middle
It's almost like more surface
area for you to be able

00:01:26.686 --> 00:01:29.156 A:middle
to apply bits and
pieces of your app.

00:01:29.676 --> 00:01:33.426 A:middle
As you can see here, we have a
screenshot of the Apple homepage

00:01:33.616 --> 00:01:37.376 A:middle
on an iPad showing the new
activity ViewController,

00:01:37.376 --> 00:01:39.996 A:middle
and you'll notice a
lot of familiar faces,

00:01:39.996 --> 00:01:43.016 A:middle
a lot of familiar icons in
that activity ViewController.

00:01:43.066 --> 00:01:44.576 A:middle
You can see messages, mail,

00:01:44.576 --> 00:01:47.596 A:middle
and we have a new
one, the Butterfly.

00:01:47.666 --> 00:01:50.026 A:middle
And Butterfly is a
sharing extension.

00:01:50.026 --> 00:01:53.726 A:middle
You can see it's at home right
there with its brethren right

00:01:53.856 --> 00:01:55.926 A:middle
in the midst of the
sharing extensions.

00:01:56.466 --> 00:02:00.396 A:middle
And we also support
sharing extensions on OS X.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:56.466 --> 00:02:00.396 A:middle
And we also support
sharing extensions on OS X.

00:02:00.396 --> 00:02:02.936 A:middle
You can see we have the
Butterfly sharing extension

00:02:03.216 --> 00:02:04.056 A:middle
on Yosemite.

00:02:05.676 --> 00:02:09.356 A:middle
We support Notification
Center Extensions also known

00:02:09.356 --> 00:02:11.056 A:middle
as Today Extensions.

00:02:11.686 --> 00:02:15.606 A:middle
And as you can see, notification
extensions are really good

00:02:15.606 --> 00:02:17.976 A:middle
for giving you at-a-glance
information;

00:02:18.296 --> 00:02:19.946 A:middle
something where you just
want to pull your phone

00:02:19.946 --> 00:02:23.796 A:middle
out of your pocket, take a quick
look, check some sports scores,

00:02:24.136 --> 00:02:26.016 A:middle
maybe traffic conditions,
the weather,

00:02:26.016 --> 00:02:27.796 A:middle
and then put it back
in your pocket.

00:02:27.796 --> 00:02:32.106 A:middle
It gives you at-a-glance, quick
access to information you want.

00:02:33.096 --> 00:02:35.686 A:middle
And of course, we
support this on Yosemite

00:02:35.686 --> 00:02:38.666 A:middle
and you can see it looks
gorgeous blended right

00:02:38.666 --> 00:02:39.836 A:middle
over that new background.

00:02:39.836 --> 00:02:41.586 A:middle
It's just beautiful,
stunningly beautiful.

00:02:41.586 --> 00:02:42.706 A:middle
The team did a great job.

00:02:45.726 --> 00:02:49.076 A:middle
Next, I want to show you the
Custom Action Extensions.

00:02:49.496 --> 00:02:52.676 A:middle
You can see here we have our
new Annotate Image Extension,

00:02:52.676 --> 00:02:54.546 A:middle
which I'm going to show
you how to build tomorrow,

00:02:54.936 --> 00:02:56.936 A:middle
right in that row of actions.

00:02:57.296 --> 00:03:00.066 A:middle
Actions can be UI
and non-UI actions,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.296 --> 00:03:00.066 A:middle
Actions can be UI
and non-UI actions,

00:03:00.066 --> 00:03:01.966 A:middle
as you saw with the Bing
Translate Extension.

00:03:02.586 --> 00:03:06.036 A:middle
And we support custom
actions on OS X as well.

00:03:06.036 --> 00:03:08.106 A:middle
As a matter of fact, this
is the infrastructure

00:03:08.526 --> 00:03:11.196 A:middle
for the Markup Extension
on OS X.

00:03:11.196 --> 00:03:13.946 A:middle
And you'll notice this
is a very common theme.

00:03:14.226 --> 00:03:15.666 A:middle
We're sharing infrastructure.

00:03:15.856 --> 00:03:19.066 A:middle
We're making it easy for you to
build things for both platforms.

00:03:20.756 --> 00:03:25.566 A:middle
Next, on iOS only we have
the photo extensions.

00:03:26.056 --> 00:03:28.196 A:middle
Now, if there is a photo filter

00:03:28.196 --> 00:03:30.886 A:middle
that you've been
missing-I don't know,

00:03:30.886 --> 00:03:34.886 A:middle
maybe?-or an annotation
extension you would like to make

00:03:34.886 --> 00:03:38.586 A:middle
for photos, you can build it
now right into the photos UI.

00:03:38.896 --> 00:03:39.706 A:middle
This is really cool.

00:03:40.326 --> 00:03:44.326 A:middle
And we also support
Document Providers.

00:03:44.636 --> 00:03:47.956 A:middle
Document Providers bring
storage and things like that

00:03:47.956 --> 00:03:51.776 A:middle
from the Cloud right into
applications inside of iOS.

00:03:52.016 --> 00:03:52.866 A:middle
This is a first.

00:03:52.866 --> 00:03:54.796 A:middle
It really breaks down
a lot of barriers

00:03:54.836 --> 00:03:58.046 A:middle
that we've all been living with
for, I believe, seven releases.

00:03:58.496 --> 00:04:03.596 A:middle
And next I want to tell you
about Finder Extensions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.496 --> 00:04:03.596 A:middle
And next I want to tell you
about Finder Extensions.

00:04:03.676 --> 00:04:05.366 A:middle
Finder Extensions
are really cool.

00:04:05.366 --> 00:04:09.096 A:middle
In the past if you wanted to be
able to badge or annotate items

00:04:09.096 --> 00:04:12.056 A:middle
and folders inside of the
finder, you may have to resort

00:04:12.056 --> 00:04:16.736 A:middle
to sort of sketchy behavior
like mock inject or some sort

00:04:16.736 --> 00:04:19.156 A:middle
of hackery and now you
don't have to do that.

00:04:19.156 --> 00:04:22.376 A:middle
Now, you actually have a
supported way to badge items

00:04:22.376 --> 00:04:24.326 A:middle
in the finder and we
think this is really cool.

00:04:26.256 --> 00:04:31.886 A:middle
And then last, but not
least, third-party keyboards.

00:04:31.986 --> 00:04:34.086 A:middle
We're supporting
third-party keyboards

00:04:34.366 --> 00:04:36.626 A:middle
in iOS now, using extensions.

00:04:37.206 --> 00:04:41.466 A:middle
So, I've told you about
extensions and some

00:04:41.466 --> 00:04:45.006 A:middle
of the extension points that
we're offering in iOS and OS X,

00:04:45.006 --> 00:04:48.396 A:middle
and next I'd like to tell you
about delivering extensions.

00:04:48.776 --> 00:04:51.466 A:middle
Extensions are delivered
as part of your app known

00:04:51.466 --> 00:04:53.056 A:middle
as the Extension Container.

00:04:53.416 --> 00:04:57.616 A:middle
An Extension Container can
contain many different types

00:04:57.696 --> 00:04:58.526 A:middle
of extensions.

00:04:58.706 --> 00:05:01.776 A:middle
For example, it could
contain a Today View Widget.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.706 --> 00:05:01.776 A:middle
For example, it could
contain a Today View Widget.

00:05:01.776 --> 00:05:04.496 A:middle
It could contain a
sharing extension

00:05:04.846 --> 00:05:08.296 A:middle
and it could also contain
maybe multiple custom

00:05:08.346 --> 00:05:09.486 A:middle
action extensions.

00:05:09.666 --> 00:05:12.546 A:middle
They're all bound up within
your application's bundle

00:05:12.746 --> 00:05:16.366 A:middle
and delivered via the App Store.

00:05:16.776 --> 00:05:19.096 A:middle
Extension Points-so
I've talked a little bit

00:05:19.096 --> 00:05:22.236 A:middle
about Extension Points earlier,
but I'll tell you what they are.

00:05:22.236 --> 00:05:24.976 A:middle
Extension Points, again,
are the new bits and pieces

00:05:24.976 --> 00:05:27.566 A:middle
of surface area that we've
exposed on the system

00:05:27.826 --> 00:05:29.536 A:middle
for your extensions to bind to.

00:05:29.766 --> 00:05:33.106 A:middle
For example, a Today
View Widget binds

00:05:33.106 --> 00:05:36.326 A:middle
to the Notification Center
via the Notification Center

00:05:36.326 --> 00:05:39.126 A:middle
Extension or the Today
View Extension point.

00:05:39.796 --> 00:05:42.816 A:middle
This means you're never going
to see a Today View Extension

00:05:43.096 --> 00:05:45.246 A:middle
in the activity ViewController,
for example.

00:05:47.276 --> 00:05:50.036 A:middle
And one thing to remember
about all extensions is

00:05:50.036 --> 00:05:52.086 A:middle
that they're purpose
built binaries.

00:05:52.176 --> 00:05:53.536 A:middle
See, these are not apps.

00:05:53.586 --> 00:05:55.916 A:middle
These are not even
a piece of your app.

00:05:55.916 --> 00:05:58.496 A:middle
It's not a special mode
that we launch your app in.

00:05:59.206 --> 00:06:01.066 A:middle
It's a special purpose binary.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.206 --> 00:06:01.066 A:middle
It's a special purpose binary.

00:06:01.066 --> 00:06:03.056 A:middle
It has its own code signature.

00:06:03.056 --> 00:06:05.196 A:middle
It has its own set
of entitlements

00:06:05.456 --> 00:06:06.946 A:middle
and it has its own container.

00:06:07.366 --> 00:06:09.906 A:middle
Damien's going to speak to this
further in tomorrow's session.

00:06:11.306 --> 00:06:13.126 A:middle
So, as I said, they're not apps.

00:06:13.126 --> 00:06:16.686 A:middle
And they're always accessed
via Apple Frameworks code.

00:06:17.146 --> 00:06:18.756 A:middle
You never really
directly launch them.

00:06:18.756 --> 00:06:21.666 A:middle
Apple Frameworks code is in
charge of discovering them

00:06:21.726 --> 00:06:24.346 A:middle
for you and providing
usually the user interaction

00:06:24.346 --> 00:06:26.416 A:middle
by which they're launched, and
I'll talk about that later.

00:06:28.036 --> 00:06:30.556 A:middle
And, as I was talking
with a developer at lunch

00:06:30.556 --> 00:06:32.036 A:middle
about this right
before we came here,

00:06:32.036 --> 00:06:34.546 A:middle
these are not facilitating
app-to-app IPC.

00:06:34.676 --> 00:06:38.706 A:middle
You don't get, like, a pipe
back to the containing app

00:06:38.766 --> 00:06:40.416 A:middle
for your extension to
be able to talk to it.

00:06:40.876 --> 00:06:43.106 A:middle
If you want to build workflows

00:06:43.216 --> 00:06:46.156 A:middle
that incorporate app-to-app
IPC you can still use things

00:06:46.156 --> 00:06:48.786 A:middle
like UIApplication openURL.

00:06:48.786 --> 00:06:52.626 A:middle
But, what I would ask you
to do is reconsider some

00:06:52.626 --> 00:06:55.576 A:middle
of these workflows that you
had before that involved sort

00:06:55.576 --> 00:06:57.986 A:middle
of contextually switching from
one application to another

00:06:57.986 --> 00:07:01.366 A:middle
on a user's phone and reconsider
casting this, maybe in terms


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.986 --> 00:07:01.366 A:middle
on a user's phone and reconsider
casting this, maybe in terms

00:07:01.366 --> 00:07:04.596 A:middle
of custom actions, which are
really the spiritual successors

00:07:04.596 --> 00:07:05.786 A:middle
to services.

00:07:07.546 --> 00:07:10.426 A:middle
So next, what are
Extension Points?

00:07:10.426 --> 00:07:11.096 A:middle
They're very high level.

00:07:11.096 --> 00:07:13.106 A:middle
They mark extensible
parts of the system.

00:07:14.066 --> 00:07:16.176 A:middle
They're always packaged
in System Frameworks.

00:07:16.306 --> 00:07:19.476 A:middle
We don't support
third-party extension points

00:07:20.086 --> 00:07:23.206 A:middle
and they combine API and
Policy, as you can imagine.

00:07:23.206 --> 00:07:24.966 A:middle
Again, with the Today
View Widget.

00:07:25.386 --> 00:07:27.866 A:middle
The Today View Widget,
it's very simple.

00:07:27.866 --> 00:07:29.436 A:middle
It's largely, as Matt's
going to tell you.

00:07:29.606 --> 00:07:30.586 A:middle
a ViewController.

00:07:31.236 --> 00:07:32.856 A:middle
But, this ViewController
also comes

00:07:32.856 --> 00:07:36.266 A:middle
with its own policy-policy,
which incorporates things

00:07:36.266 --> 00:07:37.686 A:middle
like launch characteristics.

00:07:38.116 --> 00:07:40.496 A:middle
Now, an important thing to
remember about extensions,

00:07:40.496 --> 00:07:44.286 A:middle
most extensions on the
system are bound one-to-one

00:07:44.446 --> 00:07:45.416 A:middle
with their hosting app.

00:07:45.866 --> 00:07:47.796 A:middle
So, let me give you
an example of this.

00:07:47.896 --> 00:07:49.906 A:middle
Let's say you write
a sharing extension

00:07:50.086 --> 00:07:52.726 A:middle
and the sharing extension
is invoked in Safari.

00:07:53.376 --> 00:07:56.246 A:middle
An instance of your extension,
a new process is going

00:07:56.246 --> 00:07:58.506 A:middle
to be spun up to serve Safari.

00:07:58.876 --> 00:08:01.536 A:middle
Now, if the user homes
out and goes over to mail


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.876 --> 00:08:01.536 A:middle
Now, if the user homes
out and goes over to mail

00:08:01.536 --> 00:08:04.056 A:middle
and launches your
extension again-let's say,

00:08:04.056 --> 00:08:07.446 A:middle
maybe to share an attachment-a
brand new process is going

00:08:07.446 --> 00:08:09.606 A:middle
to be spun up for
your extension.

00:08:09.676 --> 00:08:12.536 A:middle
Those processes are not
going to share address spaces

00:08:12.846 --> 00:08:14.916 A:middle
and this protects you from
mistakes in your code.

00:08:14.916 --> 00:08:16.336 A:middle
If you're still using
Objective-C

00:08:16.336 --> 00:08:18.406 A:middle
and you have a wild pointer
or something like that,

00:08:18.726 --> 00:08:21.476 A:middle
you're not going to be able to
bring down all of the instances

00:08:21.476 --> 00:08:23.906 A:middle
of your extension that
are running on the system.

00:08:23.986 --> 00:08:24.686 A:middle
It's really cool.

00:08:25.816 --> 00:08:29.616 A:middle
The extension point also
governs the presentation

00:08:29.616 --> 00:08:30.486 A:middle
of your extension.

00:08:30.626 --> 00:08:32.446 A:middle
An important thing
to remember is

00:08:32.446 --> 00:08:34.166 A:middle
that extensions are
UI ViewControllers.

00:08:34.166 --> 00:08:35.676 A:middle
You're going to hear that
multiple times today.

00:08:35.676 --> 00:08:38.106 A:middle
But, UI ViewControllers
can be exposed

00:08:38.106 --> 00:08:39.525 A:middle
to the user in multiple ways.

00:08:39.525 --> 00:08:42.066 A:middle
And usually since
extensions live inside

00:08:42.066 --> 00:08:45.426 A:middle
of the user interface
of another application,

00:08:45.996 --> 00:08:48.326 A:middle
it's up to that application
and up to the system

00:08:48.576 --> 00:08:50.336 A:middle
as to how it decides
to present you.

00:08:50.536 --> 00:08:52.926 A:middle
You can either be
contained or presented.

00:08:53.496 --> 00:08:55.196 A:middle
Notification Center Widgets,

00:08:55.346 --> 00:08:58.896 A:middle
Today View Extensions are
contained while sharing

00:08:58.896 --> 00:09:00.266 A:middle
extensions are presented.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.896 --> 00:09:00.266 A:middle
extensions are presented.

00:09:01.676 --> 00:09:04.706 A:middle
And when many extension
points support

00:09:04.706 --> 00:09:07.156 A:middle
or a few extension points
support view controller

00:09:07.156 --> 00:09:10.226 A:middle
and non-view controller
variance of the extension point.

00:09:10.356 --> 00:09:13.456 A:middle
For instance, custom actions,
as you'll see tomorrow,

00:09:13.676 --> 00:09:16.816 A:middle
support a view controller
variant, which allows the user

00:09:16.816 --> 00:09:19.096 A:middle
to interact with the content
before it's transformed

00:09:19.096 --> 00:09:20.956 A:middle
and sent back to the host.

00:09:20.956 --> 00:09:22.176 A:middle
As you saw during the keynote,

00:09:22.226 --> 00:09:24.386 A:middle
when Craig tapped the
Bing translate extension,

00:09:24.696 --> 00:09:27.536 A:middle
there was no UI and that
was a non-view extension,

00:09:27.646 --> 00:09:29.386 A:middle
and we'll tell you
more about that later.

00:09:31.016 --> 00:09:33.616 A:middle
So, how are extensions invoked?

00:09:33.836 --> 00:09:35.976 A:middle
This is-again, going
back to our example,

00:09:35.976 --> 00:09:38.856 A:middle
we're going to show you what
happens when the user decides

00:09:38.856 --> 00:09:40.956 A:middle
to tap on the Butterfly
sharing extension.

00:09:40.956 --> 00:09:45.236 A:middle
The user taps and the
extension host, which is Safari

00:09:45.236 --> 00:09:47.496 A:middle
at this time, goes and talks

00:09:47.496 --> 00:09:49.726 A:middle
to the Notification
Center Framework.

00:09:50.076 --> 00:09:51.076 A:middle
The notification-sorry,

00:09:51.076 --> 00:09:53.006 A:middle
not notification,
the Social Framework.

00:09:53.256 --> 00:09:56.306 A:middle
And the Social Framework
goes and discovers and loads

00:09:56.306 --> 00:09:57.776 A:middle
and presents the extension.

00:09:58.206 --> 00:10:02.766 A:middle
You'll notice that Safari is not
directly launching the extension


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.206 --> 00:10:02.766 A:middle
You'll notice that Safari is not
directly launching the extension

00:10:02.766 --> 00:10:03.566 A:middle
at any point.

00:10:03.566 --> 00:10:06.096 A:middle
It's bouncing through Apple
Frameworks to do this.

00:10:07.386 --> 00:10:12.316 A:middle
So, in summary, extensions are
small pieces of functionality.

00:10:12.426 --> 00:10:14.416 A:middle
They're purpose built
to do one thing

00:10:14.416 --> 00:10:16.336 A:middle
and then get out of the way.

00:10:16.736 --> 00:10:19.936 A:middle
They extend the system in
new and interesting ways.

00:10:20.176 --> 00:10:22.766 A:middle
We can't wait to see what you
guys do with these things.

00:10:23.856 --> 00:10:26.946 A:middle
And they mark extendable parts
of the system, as I said,

00:10:26.946 --> 00:10:29.666 A:middle
new surface area for you
to attach the functionality

00:10:29.666 --> 00:10:32.846 A:middle
of your app in interesting and
meaningful ways for our users.

00:10:33.126 --> 00:10:35.056 A:middle
And now, to tell you more

00:10:35.056 --> 00:10:37.216 A:middle
about Notification
Center Extensions I'd

00:10:37.216 --> 00:10:38.976 A:middle
like to invite my colleague,
Matt Gamble, to the stage.

00:10:39.516 --> 00:10:46.776 A:middle
[ Applause ]

00:10:47.276 --> 00:10:49.056 A:middle
&gt;&gt; Hello, I'm Matt Gamble.

00:10:49.136 --> 00:10:51.736 A:middle
I'm an Engineer on the
iOS Notifications Team,

00:10:51.736 --> 00:10:53.136 A:middle
and today I'm going to tell you

00:10:53.136 --> 00:10:55.036 A:middle
about Notification
Center Extensions,

00:10:55.276 --> 00:10:57.406 A:middle
or widgets as we call them.

00:10:57.936 --> 00:10:59.946 A:middle
Now, we've had widgets
in some fashion

00:10:59.946 --> 00:11:02.006 A:middle
on the system for a while now.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.946 --> 00:11:02.006 A:middle
on the system for a while now.

00:11:02.536 --> 00:11:06.166 A:middle
But, for the first time in iOS
8 we are giving developers the

00:11:06.166 --> 00:11:07.716 A:middle
power to add their own content

00:11:07.766 --> 00:11:12.096 A:middle
to the Notification
Center's Today View.

00:11:12.316 --> 00:11:15.996 A:middle
Now, perhaps most fundamentally
widgets are view controllers

00:11:16.346 --> 00:11:17.276 A:middle
so that means everything
you know

00:11:17.276 --> 00:11:20.006 A:middle
about view controllers
including the lifecycle

00:11:20.006 --> 00:11:22.886 A:middle
and containment behavior
in API will serve you well

00:11:22.886 --> 00:11:24.076 A:middle
when you're constructing
your widget.

00:11:25.136 --> 00:11:26.566 A:middle
For example, the
appearance calls.

00:11:27.156 --> 00:11:29.866 A:middle
These will tell you when your
widget is coming and going

00:11:30.196 --> 00:11:31.336 A:middle
in the Notification Center.

00:11:32.066 --> 00:11:34.256 A:middle
And of particular
interest is viewWillAppear,

00:11:34.626 --> 00:11:37.536 A:middle
as you want to be sure that your
view is up and ready to be used

00:11:37.536 --> 00:11:40.506 A:middle
by the user by the time you're
returning from viewWillAppear.

00:11:41.516 --> 00:11:43.856 A:middle
So, speaking of getting
ready, it's important

00:11:43.856 --> 00:11:44.796 A:middle
that you get ready fast.

00:11:44.896 --> 00:11:47.476 A:middle
Performance is a very
big consideration

00:11:47.476 --> 00:11:48.816 A:middle
with Notification
Center widgets.

00:11:49.456 --> 00:11:50.806 A:middle
So, a couple tips.

00:11:50.806 --> 00:11:53.666 A:middle
Be sure to load cached
data, so you're bringing

00:11:53.666 --> 00:11:55.466 A:middle
up your view quickly
and you're ready to go.

00:11:55.466 --> 00:11:57.386 A:middle
And if you have some
new data that comes

00:11:57.386 --> 00:11:59.686 A:middle
in you can do your
own custom transition.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:01.236 --> 00:12:04.766 A:middle
Also, kick off your expensive
operations as early as possible

00:12:04.766 --> 00:12:06.306 A:middle
and definitely in
the background.

00:12:07.046 --> 00:12:10.126 A:middle
And when those expensive
operations return be sure

00:12:10.126 --> 00:12:13.756 A:middle
to cache this data.

00:12:13.996 --> 00:12:15.466 A:middle
So, layout is another concern.

00:12:15.466 --> 00:12:19.056 A:middle
Of course, your widgets
and your widget has control

00:12:19.056 --> 00:12:22.756 A:middle
over its sub view hierarchy and
laying all of your content out.

00:12:22.916 --> 00:12:25.936 A:middle
But, just as with any other
parent-child view controller

00:12:25.936 --> 00:12:28.596 A:middle
relationship, the Notification
Center will be laying

00:12:28.596 --> 00:12:30.616 A:middle
out your views frame.

00:12:31.296 --> 00:12:33.656 A:middle
So, that means that the
Notification Center is setting

00:12:33.736 --> 00:12:34.296 A:middle
the frames.

00:12:34.516 --> 00:12:36.916 A:middle
You don't set your own
widgets views frame.

00:12:37.366 --> 00:12:39.956 A:middle
But, of course, not all
content is created equal.

00:12:40.256 --> 00:12:43.446 A:middle
So, if you might have,
need some more room

00:12:43.446 --> 00:12:46.606 A:middle
for your content you can
indicate your preferred height

00:12:46.606 --> 00:12:49.076 A:middle
and you can do this in two ways.

00:12:49.516 --> 00:12:50.946 A:middle
The first is through
auto layout.

00:12:51.416 --> 00:12:55.016 A:middle
If you can describe
your widget's height

00:12:55.196 --> 00:12:57.856 A:middle
with constraints then those
will be honored automatically

00:12:57.856 --> 00:12:58.926 A:middle
in the Notification Center.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.026 --> 00:13:01.956 A:middle
Otherwise, if you're
using more manual layout,

00:13:02.276 --> 00:13:05.646 A:middle
you can use the view controller
method setPreferredContentSize.

00:13:06.686 --> 00:13:11.806 A:middle
And both of these systems
work across both iOS and OS X.

00:13:12.536 --> 00:13:16.076 A:middle
So, while you will definitely
want to set your size as early

00:13:16.076 --> 00:13:17.096 A:middle
as possible to ensure

00:13:17.096 --> 00:13:20.106 A:middle
that you're showing your
content the right way

00:13:20.106 --> 00:13:21.056 A:middle
in Notification Center,

00:13:21.536 --> 00:13:23.696 A:middle
that's not the only time
that you can call it.

00:13:24.276 --> 00:13:27.096 A:middle
If, for some reason, you are
showing different content

00:13:27.096 --> 00:13:28.866 A:middle
or changes you can
call this later.

00:13:29.376 --> 00:13:31.726 A:middle
For instance, let's say
that we had a button

00:13:31.726 --> 00:13:33.546 A:middle
that would show a
little bit more content

00:13:33.716 --> 00:13:35.646 A:middle
or a little bit more
detail about some content

00:13:35.646 --> 00:13:36.636 A:middle
that we have in our widget.

00:13:36.636 --> 00:13:40.416 A:middle
You could tie this up to this
action, calculate the new height

00:13:40.416 --> 00:13:42.326 A:middle
for this new content
and then just

00:13:42.326 --> 00:13:44.256 A:middle
call setPreferredContentSize.

00:13:44.776 --> 00:13:47.116 A:middle
The Notification Center
will take care of this.

00:13:47.116 --> 00:13:48.946 A:middle
It'll automatically
resize your widget,

00:13:49.576 --> 00:13:50.956 A:middle
but that's only half the story.

00:13:51.476 --> 00:13:53.316 A:middle
What you probably
want to do is ensure

00:13:53.416 --> 00:13:56.676 A:middle
that your content animates
along with this transition

00:13:57.096 --> 00:13:58.486 A:middle
and you can do that on iOS

00:13:59.216 --> 00:14:02.856 A:middle
with the new method
viewWillTransitionToSize


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.216 --> 00:14:02.856 A:middle
with the new method
viewWillTransitionToSize

00:14:02.956 --> 00:14:04.186 A:middle
with TransitionCoordinator.

00:14:04.916 --> 00:14:07.996 A:middle
So, if your widget implements
this method it'll get called

00:14:07.996 --> 00:14:10.186 A:middle
and pass in the
TransitionCoordinator

00:14:10.526 --> 00:14:12.136 A:middle
and with this coordinator
you can call

00:14:12.136 --> 00:14:16.026 A:middle
animateAlongsideTransition
passing in your block

00:14:16.026 --> 00:14:19.166 A:middle
with your animations and
these will be run in parallel

00:14:19.166 --> 00:14:22.116 A:middle
with the systems resize
animation, and then again,

00:14:22.116 --> 00:14:25.126 A:middle
and then a completion to know
when everything's finished up.

00:14:25.756 --> 00:14:28.216 A:middle
Now, there's a similar
story on OS X.

00:14:28.686 --> 00:14:31.486 A:middle
In this case it's
viewWillTransitionToSize.

00:14:31.676 --> 00:14:34.306 A:middle
Again, this will be called
and you can take advantage

00:14:34.306 --> 00:14:38.286 A:middle
of NSAnimationContext to
run your own animation group

00:14:38.576 --> 00:14:41.026 A:middle
and again pass in a
completionHandler so you know

00:14:41.026 --> 00:14:42.866 A:middle
when everything is finished up.

00:14:44.566 --> 00:14:48.716 A:middle
Now, new to iOS 8 is a
protocol, NCWidgetProviding.

00:14:49.336 --> 00:14:51.486 A:middle
And one of the optional methods

00:14:51.486 --> 00:14:54.756 A:middle
in this protocol is
widgetPerformUpdateWith

00:14:54.756 --> 00:14:55.476 A:middle
CompletionHandler.

00:14:55.826 --> 00:14:58.886 A:middle
And it's important to implement
this one, as it'll ensure

00:14:59.076 --> 00:15:01.346 A:middle
that your widget's
content stays up to date.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.076 --> 00:15:01.346 A:middle
that your widget's
content stays up to date.

00:15:01.896 --> 00:15:04.206 A:middle
So, if this is implemented
you will be passed a

00:15:04.206 --> 00:15:07.396 A:middle
completionHandler, you want
to perform your own update

00:15:07.396 --> 00:15:10.726 A:middle
and then determine what
is the appropriate result

00:15:10.936 --> 00:15:12.966 A:middle
to pass back in that block.

00:15:13.306 --> 00:15:15.286 A:middle
So, if you have some
new data go ahead

00:15:15.286 --> 00:15:18.826 A:middle
and use NCUpdateResultNewData.

00:15:19.066 --> 00:15:22.156 A:middle
If there's nothing new
go ahead and use no data.

00:15:22.156 --> 00:15:26.656 A:middle
And if something went horribly
wrong, pass failed and we'll try

00:15:26.656 --> 00:15:28.126 A:middle
to leave well enough alone.

00:15:28.126 --> 00:15:31.196 A:middle
And then finally, be sure to
call the completionHandler

00:15:31.486 --> 00:15:36.376 A:middle
with the result that you have.

00:15:36.476 --> 00:15:40.496 A:middle
Alright, let's take
a look at this.

00:15:40.706 --> 00:15:42.136 A:middle
So, some of you may remember

00:15:42.136 --> 00:15:44.676 A:middle
from last year we
had a presentation

00:15:44.676 --> 00:15:48.876 A:middle
and we showed off an awesome iOS
application for staying in touch

00:15:48.996 --> 00:15:52.076 A:middle
with all of the clowns that
are in your clown network.

00:15:52.176 --> 00:15:52.986 A:middle
We called it ClownTown.

00:15:54.106 --> 00:15:56.816 A:middle
Well, we're going to take this
application a little bit further

00:15:56.816 --> 00:15:59.216 A:middle
by adding a widget for
the Notification Center.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:01.196 --> 00:16:03.776 A:middle
Now, adding a widget
is as simple as opening

00:16:03.776 --> 00:16:07.876 A:middle
up an existing application
project and adding a new target.

00:16:09.136 --> 00:16:13.066 A:middle
For both iOS and OS X you'll see
there's an application extension

00:16:13.066 --> 00:16:16.236 A:middle
section and you can just
select the Today Extension.

00:16:17.336 --> 00:16:19.646 A:middle
But, I've actually
already started work on one

00:16:20.146 --> 00:16:23.646 A:middle
so we're going to go right
into our view controller here,

00:16:24.016 --> 00:16:25.376 A:middle
because widgets are
ViewControllers.

00:16:26.276 --> 00:16:28.326 A:middle
And the first thing I'm
going to do is ensure

00:16:28.326 --> 00:16:30.126 A:middle
that my widget has
the right height.

00:16:31.046 --> 00:16:35.756 A:middle
So, I'm using an
Interface Builder storyboard

00:16:35.756 --> 00:16:36.686 A:middle
for my interface.

00:16:36.996 --> 00:16:39.786 A:middle
So, awakeFromNib is
a pretty handy place

00:16:39.966 --> 00:16:40.866 A:middle
to take care of this.

00:16:41.166 --> 00:16:43.966 A:middle
So, after calling
super and then setting

00:16:43.966 --> 00:16:46.486 A:middle
up a little state
I'm going to go ahead

00:16:46.486 --> 00:16:48.056 A:middle
and get the most recent posts.

00:16:49.156 --> 00:16:52.506 A:middle
Once I've gotten those
I'll update my table view.

00:16:52.756 --> 00:16:53.936 A:middle
This doesn't need
to be animated.

00:16:53.936 --> 00:16:55.026 A:middle
We're just initializing here.

00:16:55.026 --> 00:16:57.906 A:middle
And then the important
step is just making sure

00:16:58.006 --> 00:17:00.676 A:middle
to set my preferred content
size to, in this case,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.006 --> 00:17:00.676 A:middle
to set my preferred content
size to, in this case,

00:17:00.676 --> 00:17:02.646 A:middle
just the content size
of my table view.

00:17:04.076 --> 00:17:06.945 A:middle
So, this will make sure that
we're initializing the state

00:17:06.945 --> 00:17:09.685 A:middle
where we're showing a
single post in our widget,

00:17:09.826 --> 00:17:12.846 A:middle
which is nice, but perhaps you
want to see a little bit more

00:17:12.846 --> 00:17:14.836 A:middle
of what's going on in
your clown network.

00:17:15.556 --> 00:17:19.856 A:middle
Well, how about we add a button
and an action for our button

00:17:19.856 --> 00:17:23.096 A:middle
to show a little bit more.

00:17:23.185 --> 00:17:25.356 A:middle
So, the first thing we'll
do is update our state

00:17:25.356 --> 00:17:28.956 A:middle
and then calculate our
preferred height, which,

00:17:28.956 --> 00:17:31.126 A:middle
since we're using a table view,
we want to count the number

00:17:31.126 --> 00:17:34.086 A:middle
of rows and also make sure to
account for our footer view.

00:17:34.646 --> 00:17:38.136 A:middle
Once we have our
preferred height we want

00:17:38.136 --> 00:17:40.226 A:middle
to set our preferred
content size

00:17:40.226 --> 00:17:43.306 A:middle
and then make sure we
tell ourselves that we had

00:17:43.306 --> 00:17:45.116 A:middle
to do an update in the future.

00:17:45.336 --> 00:17:46.376 A:middle
That'll come in handy later.

00:17:48.016 --> 00:17:50.836 A:middle
So, again, we've set our
preferred content size

00:17:51.006 --> 00:17:53.186 A:middle
so this will be sure
to animate the widget

00:17:53.186 --> 00:17:54.136 A:middle
to the appropriate height.

00:17:54.866 --> 00:17:57.376 A:middle
But, we want to make sure
that our content comes

00:17:57.376 --> 00:17:59.426 A:middle
in in a really nice
animated fashion.

00:17:59.986 --> 00:18:03.446 A:middle
And so to do that
we'll implement


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.986 --> 00:18:03.446 A:middle
And so to do that
we'll implement

00:18:03.446 --> 00:18:06.336 A:middle
viewWillTransitionToSize
withTransitionCoordinator.

00:18:06.926 --> 00:18:10.246 A:middle
And so, if we have a
coordinator then we know

00:18:10.246 --> 00:18:11.706 A:middle
that this is an animated
transition

00:18:12.766 --> 00:18:15.076 A:middle
and so we'll call
animateAlongsideTransition

00:18:15.076 --> 00:18:15.636 A:middle
completion.

00:18:16.226 --> 00:18:19.596 A:middle
So, we'll make sure to
update our table view

00:18:19.596 --> 00:18:24.526 A:middle
in an animated fashion and
in the completion be sure

00:18:24.526 --> 00:18:27.286 A:middle
to update the title
of our button.

00:18:27.836 --> 00:18:30.356 A:middle
Then, if for some reason we
didn't get a coordinator,

00:18:30.876 --> 00:18:33.046 A:middle
then we'll just update our
table without animation

00:18:33.046 --> 00:18:35.566 A:middle
and then update the button.

00:18:35.816 --> 00:18:40.976 A:middle
So, this will make sure that
our adding of our rows comes

00:18:40.976 --> 00:18:44.646 A:middle
in a nice animated way alongside
the system animation that's

00:18:44.646 --> 00:18:45.916 A:middle
resizing our widget.

00:18:46.596 --> 00:18:49.276 A:middle
Now, one more thing I want to
do before we give this a try

00:18:49.876 --> 00:18:54.866 A:middle
and that is making sure that
our content stays up to date.

00:18:55.206 --> 00:18:57.816 A:middle
So, I'm going to implement
the method widgetPerformUpdate

00:18:57.896 --> 00:18:58.836 A:middle
withCompletionHandler.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.236 --> 00:19:03.206 A:middle
So, I'll start by getting the
recent, most recent posts,

00:19:03.206 --> 00:19:07.316 A:middle
make sure I get any updates,
and then calculate the result.

00:19:07.816 --> 00:19:10.626 A:middle
So, if we already know that
we needed to do an update

00:19:11.016 --> 00:19:14.316 A:middle
or if we actually did get
some new content then we want

00:19:14.316 --> 00:19:16.306 A:middle
to use NCUpdateResultNewData.

00:19:16.986 --> 00:19:21.596 A:middle
Otherwise, we can just
go ahead and use No Data.

00:19:22.146 --> 00:19:25.826 A:middle
So, if we actually did
get some new data we want

00:19:25.826 --> 00:19:26.766 A:middle
to do a couple things.

00:19:27.096 --> 00:19:29.066 A:middle
We'll definitely want to
update our table view to ensure

00:19:29.066 --> 00:19:31.136 A:middle
that it's reflecting
our most recent content

00:19:31.686 --> 00:19:35.026 A:middle
and then update our
preferred size to ensure

00:19:35.026 --> 00:19:36.196 A:middle
that our widget is
the right height.

00:19:36.276 --> 00:19:40.536 A:middle
And in either case we certainly
don't need any more updates

00:19:40.576 --> 00:19:43.636 A:middle
and we'll call our
completionHandler

00:19:43.636 --> 00:19:44.436 A:middle
with our result.

00:19:45.566 --> 00:19:48.766 A:middle
Alright, I think we can go
ahead and give this a shot.

00:19:48.766 --> 00:19:51.906 A:middle
So, I'm going to go ahead and
build and run for the simulator.

00:19:54.576 --> 00:20:02.286 A:middle
I'll switch over to
the simulator now.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:54.576 --> 00:20:02.286 A:middle
I'll switch over to
the simulator now.

00:20:02.286 --> 00:20:05.396 A:middle
Oh, and here we have our
ClownTown application.

00:20:05.936 --> 00:20:07.776 A:middle
Well, I'm going to
home out of this

00:20:07.776 --> 00:20:09.396 A:middle
and present the Notification
Center.

00:20:10.096 --> 00:20:15.626 A:middle
Go to the edit menu and
our widget is not there.

00:20:16.866 --> 00:20:20.926 A:middle
Excellent, let's give
that one more shot.

00:20:21.516 --> 00:20:25.666 A:middle
[ Clicking Sounds ]

00:20:26.166 --> 00:20:27.786 A:middle
Oh yes, there we go.

00:20:28.516 --> 00:20:32.596 A:middle
[ Clicking Sounds ]

00:20:33.096 --> 00:20:34.486 A:middle
There's our application.

00:20:35.176 --> 00:20:38.766 A:middle
Bring down this, one
new widget available.

00:20:38.766 --> 00:20:38.976 A:middle
There it is.

00:20:39.516 --> 00:20:46.446 A:middle
[ Applause ]

00:20:46.946 --> 00:20:50.266 A:middle
Alright, so hit done
and here's our widget.

00:20:51.146 --> 00:20:53.586 A:middle
Well, we can see that Corbin
the Clown has some multicolored

00:20:53.586 --> 00:20:54.856 A:middle
suspenders he's giving away,

00:20:55.396 --> 00:20:57.666 A:middle
got to make sure to
take care of that.

00:20:57.666 --> 00:20:59.546 A:middle
Alright, now here's
our More button.

00:20:59.846 --> 00:21:03.876 A:middle
If we tap that, get some new
rows animate in nicely-wow,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.846 --> 00:21:03.876 A:middle
If we tap that, get some new
rows animate in nicely-wow,

00:21:03.876 --> 00:21:04.916 A:middle
lots of weddings happening.

00:21:05.486 --> 00:21:10.346 A:middle
Less collapses everything back
down in a nice animated fashion.

00:21:10.876 --> 00:21:11.846 A:middle
This is looking pretty good.

00:21:12.726 --> 00:21:13.736 A:middle
Well, I definitely
want to know more

00:21:13.736 --> 00:21:15.296 A:middle
about these multicolored
suspenders, so I'm going

00:21:15.296 --> 00:21:18.326 A:middle
to go ahead and-huh, okay.

00:21:19.406 --> 00:21:21.636 A:middle
Well, we've definitely
seen-if you've looked

00:21:21.636 --> 00:21:24.416 A:middle
at the system widgets it's
a pretty common pattern

00:21:24.416 --> 00:21:27.646 A:middle
to tap something in the
widget and then transition

00:21:27.856 --> 00:21:30.596 A:middle
to the application and
maybe see some more details

00:21:30.596 --> 00:21:31.616 A:middle
or get some more content.

00:21:31.996 --> 00:21:33.126 A:middle
Well, that's definitely
something

00:21:33.126 --> 00:21:34.316 A:middle
that we're interested in doing.

00:21:34.766 --> 00:21:37.566 A:middle
So, let's return to Xcode.

00:21:37.566 --> 00:21:39.766 A:middle
I'm going to stop the debugger.

00:21:40.106 --> 00:21:43.276 A:middle
And since I'm using a
table view I'll want

00:21:43.276 --> 00:21:46.846 A:middle
to implement tableView
didSelectRowAtIndexPath.

00:21:47.776 --> 00:21:51.816 A:middle
So, after we make sure we
have a valid post I'm going

00:21:51.816 --> 00:21:54.236 A:middle
to take advantage of an object
called the extensionContext.

00:21:54.736 --> 00:21:57.806 A:middle
Now, the extensionContext is an
object that you'll have access

00:21:57.906 --> 00:22:01.026 A:middle
to in your widget or in any
extension that's running


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.906 --> 00:22:01.026 A:middle
to in your widget or in any
extension that's running

00:22:01.026 --> 00:22:01.506 A:middle
in a host.

00:22:02.226 --> 00:22:04.426 A:middle
And it has-tells you
some interesting things

00:22:04.426 --> 00:22:06.296 A:middle
about what's happening
in your current host.

00:22:06.296 --> 00:22:09.016 A:middle
It also has a couple of
really interesting methods.

00:22:09.416 --> 00:22:10.866 A:middle
In our case we're
going to take advantage

00:22:10.866 --> 00:22:12.846 A:middle
of openURL completionHandler.

00:22:13.536 --> 00:22:15.926 A:middle
Now, I've defined a custom
URL scheme that's shared

00:22:15.926 --> 00:22:17.426 A:middle
between my widget
and my application

00:22:17.796 --> 00:22:20.516 A:middle
so I can construct the
URL with this scheme

00:22:20.516 --> 00:22:23.606 A:middle
and then add some identifying
information for my post.

00:22:24.016 --> 00:22:28.716 A:middle
And then one final thing I'll
want to do is just make sure

00:22:28.716 --> 00:22:31.816 A:middle
to deselect this row so it's not
selected the next time the user

00:22:31.816 --> 00:22:33.076 A:middle
pulls down Notification Center.

00:22:33.986 --> 00:22:36.446 A:middle
Alright, so let's build
and run this again.

00:22:36.996 --> 00:22:41.256 A:middle
And here's our application.

00:22:42.286 --> 00:22:50.546 A:middle
Let's present here, add this
back, and here's Corbin again.

00:22:50.846 --> 00:22:51.556 A:middle
So, let's see.

00:22:51.556 --> 00:22:53.046 A:middle
If I tap this, hopefully
I'll be able

00:22:53.046 --> 00:22:55.206 A:middle
to get some more information
about those suspenders.

00:22:55.436 --> 00:22:56.016 A:middle
There we go.

00:22:56.016 --> 00:22:57.516 A:middle
It brings us right
to the application

00:22:57.726 --> 00:22:59.496 A:middle
and get some more detail
and make sure we don't miss

00:22:59.496 --> 00:22:59.976 A:middle
out on those suspenders.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.516 --> 00:23:03.516 A:middle
[ Background Sounds]

00:23:04.016 --> 00:23:10.000 A:middle
[ Applause ]

00:23:11.466 --> 00:23:12.056 A:middle
So, a few things

00:23:12.056 --> 00:23:14.856 A:middle
to remember-widgets
are ViewControllers.

00:23:15.176 --> 00:23:17.256 A:middle
So, everything you know about
ViewControllers and the API

00:23:17.256 --> 00:23:19.366 A:middle
and the behavior is going
to serve you really well

00:23:19.576 --> 00:23:23.236 A:middle
when you're constructing
your widget.

00:23:24.046 --> 00:23:26.516 A:middle
Also, be sure your
widgets resume immediately.

00:23:26.516 --> 00:23:27.726 A:middle
You don't want the
users bringing

00:23:27.726 --> 00:23:29.306 A:middle
down Notification
Center and tapping

00:23:29.306 --> 00:23:30.576 A:middle
and not having anything happen.

00:23:32.136 --> 00:23:35.236 A:middle
Now, while the Notification
Center handles the layout not

00:23:35.236 --> 00:23:36.416 A:middle
all widgets are created equal.

00:23:36.416 --> 00:23:38.956 A:middle
You'll want different
heights, and you can so this

00:23:38.956 --> 00:23:41.996 A:middle
with the preferred height
with either constraints

00:23:41.996 --> 00:23:45.536 A:middle
and auto layout or explicitly
through preferredContentSize,

00:23:45.536 --> 00:23:47.146 A:middle
and this is across
both platforms.

00:23:48.536 --> 00:23:51.256 A:middle
Also, you want to be sure to-if
you animate your content along

00:23:51.256 --> 00:23:54.956 A:middle
with the resize animation, this
again, we have APIs on both iOS

00:23:54.956 --> 00:23:59.086 A:middle
and OS X to help you do this.

00:23:59.086 --> 00:24:02.176 A:middle
And then be sure to handle
update requests to make sure


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.086 --> 00:24:02.176 A:middle
And then be sure to handle
update requests to make sure

00:24:02.176 --> 00:24:06.366 A:middle
that all of the content
looks up to date.

00:24:06.496 --> 00:24:08.126 A:middle
Now, I'd like to invite
Guy up on stage to tell us

00:24:08.126 --> 00:24:08.886 A:middle
about Share Extensions.

00:24:09.516 --> 00:24:15.216 A:middle
[ Applause ]

00:24:15.716 --> 00:24:19.046 A:middle
&gt;&gt; Hi. So, my name is Guy
Fullerton and I am an Engineer

00:24:19.046 --> 00:24:21.846 A:middle
on the iOS Social and
Accounts teams, and I'm going

00:24:21.886 --> 00:24:22.986 A:middle
to give you everything
you need to know

00:24:22.986 --> 00:24:24.246 A:middle
to implement Share Extensions.

00:24:25.046 --> 00:24:29.506 A:middle
So, Share Extensions are
a way to take the sharing

00:24:29.546 --> 00:24:33.966 A:middle
and upload functionality in your
app and package it up and get

00:24:33.966 --> 00:24:37.396 A:middle
that presented in the standard
activity and sharing affordances

00:24:37.396 --> 00:24:38.276 A:middle
in the operating system.

00:24:39.216 --> 00:24:40.176 A:middle
Actually, let's go back.

00:24:40.556 --> 00:24:45.816 A:middle
So, like, the UI activity view
and the share menu in Mac OS X.

00:24:45.996 --> 00:24:48.946 A:middle
So, this is particularly
useful for social network apps

00:24:49.386 --> 00:24:52.616 A:middle
or for apps that like to
do video or photo hosting,

00:24:52.616 --> 00:24:55.686 A:middle
for example, and
lots of other stuff.

00:24:56.646 --> 00:24:58.956 A:middle
So, let's go through
a concrete example.

00:24:59.346 --> 00:25:01.206 A:middle
Let's say I've got a
photo blogging application


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.346 --> 00:25:01.206 A:middle
Let's say I've got a
photo blogging application

00:25:01.206 --> 00:25:04.366 A:middle
that normally allows my user
to launch the app, pick a photo

00:25:04.406 --> 00:25:07.676 A:middle
from the photos library,
annotate that a little bit,

00:25:07.676 --> 00:25:10.076 A:middle
maybe make a-choose an
audience to present it to

00:25:10.076 --> 00:25:11.516 A:middle
and then upload it
to a photo blog.

00:25:11.516 --> 00:25:14.476 A:middle
But, wouldn't it be great if I
could do that upload directly

00:25:14.476 --> 00:25:15.616 A:middle
from within photos app?

00:25:16.046 --> 00:25:18.106 A:middle
Well, that's what a Share
Extension would let you do.

00:25:18.456 --> 00:25:23.296 A:middle
So, let's say I'm in photos,
I select a photo that I like,

00:25:24.266 --> 00:25:26.576 A:middle
tap the share button, up
pops the activity view

00:25:26.646 --> 00:25:30.846 A:middle
and you can see my Photo
Blog application icon there

00:25:30.846 --> 00:25:31.616 A:middle
in the activity view.

00:25:32.366 --> 00:25:35.786 A:middle
Tap that and up slides a
compose sheet for Photo Blog,

00:25:36.276 --> 00:25:39.356 A:middle
lets your user type some text to
annotate it, choose an audience,

00:25:39.526 --> 00:25:41.596 A:middle
whether they want to limit
the exposure of that photo

00:25:41.596 --> 00:25:43.986 A:middle
and whatnot, and then post it.

00:25:46.096 --> 00:25:47.666 A:middle
So, we're going to
hammer this home a lot

00:25:47.666 --> 00:25:48.356 A:middle
in the next couple days,

00:25:48.476 --> 00:25:51.366 A:middle
but a lot of extensions are
basically just ViewControllers.

00:25:51.446 --> 00:25:52.616 A:middle
That's where most of the work is

00:25:52.616 --> 00:25:54.496 A:middle
and you're probably already
familiar with how to do that.

00:25:54.986 --> 00:25:57.656 A:middle
But, Share Extensions have a
couple other concerns having

00:25:57.656 --> 00:25:58.556 A:middle
to do with their packaging,

00:25:58.856 --> 00:26:00.816 A:middle
specifically the
extensions Info.plist,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.856 --> 00:26:00.816 A:middle
specifically the
extensions Info.plist,

00:26:01.196 --> 00:26:05.366 A:middle
so let's talk about that.

00:26:05.576 --> 00:26:08.106 A:middle
So, normally when a Share
Extension shows up in one

00:26:08.106 --> 00:26:11.326 A:middle
of these sharing affordances you
generally want that extension

00:26:11.326 --> 00:26:13.216 A:middle
to have the app's name.

00:26:13.526 --> 00:26:15.306 A:middle
That's going to be the thing
the user's most familiar

00:26:15.496 --> 00:26:17.826 A:middle
with looking for when they
want to select that extension.

00:26:18.766 --> 00:26:21.796 A:middle
But, some applications may have
multiple share affordances.

00:26:21.886 --> 00:26:23.446 A:middle
The Photo Blog, for example,

00:26:23.446 --> 00:26:26.176 A:middle
might want a basic
posting share functionality

00:26:26.446 --> 00:26:27.396 A:middle
and maybe it wants a way

00:26:27.396 --> 00:26:30.006 A:middle
to specifically set the blog's
header photo, for example.

00:26:30.866 --> 00:26:32.146 A:middle
So, it's important to be able

00:26:32.206 --> 00:26:34.276 A:middle
to customize your
Share Extension's name.

00:26:34.586 --> 00:26:36.116 A:middle
And the way you do that is

00:26:36.116 --> 00:26:38.756 A:middle
with CFBundleDisplayName
in your Info.plist.

00:26:39.226 --> 00:26:41.356 A:middle
Just set that to the name
you want your Share Extension

00:26:41.356 --> 00:26:43.746 A:middle
to show up with and the
sharing UI will display

00:26:43.746 --> 00:26:45.396 A:middle
that name appropriately
for your extension.

00:26:46.106 --> 00:26:52.666 A:middle
So, the next thing to talk
about are activation rules,

00:26:52.876 --> 00:26:55.146 A:middle
and this is probably best
explained through an example.

00:26:55.786 --> 00:26:56.946 A:middle
Let's say you're in photos

00:26:56.946 --> 00:27:00.076 A:middle
and you have a set-a
trio of things selected.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:56.946 --> 00:27:00.076 A:middle
and you have a set-a
trio of things selected.

00:27:00.206 --> 00:27:01.676 A:middle
You've got two photos
and a video

00:27:02.766 --> 00:27:04.266 A:middle
and the user wants
to share that.

00:27:04.646 --> 00:27:08.726 A:middle
So, they tap the share button,
up pops the UI activity view

00:27:08.986 --> 00:27:10.356 A:middle
or the share menu on OS X

00:27:10.626 --> 00:27:14.096 A:middle
and behind the scenes we've
created an extension context

00:27:14.356 --> 00:27:16.466 A:middle
and that extension
context is the conduit

00:27:16.856 --> 00:27:18.926 A:middle
that your extension
will use to pull data

00:27:19.116 --> 00:27:20.876 A:middle
from the host application
into itself.

00:27:21.446 --> 00:27:22.596 A:middle
So, this extension context

00:27:22.596 --> 00:27:24.946 A:middle
for this particular scenario
has three things on it.

00:27:25.146 --> 00:27:27.396 A:middle
It's got a reference to two of
those images, and of course,

00:27:27.396 --> 00:27:28.786 A:middle
a reference to the
video as well.

00:27:28.786 --> 00:27:32.806 A:middle
Now, the user might a bunch of
Share Extensions on their system

00:27:33.136 --> 00:27:34.566 A:middle
and each of them
wants to get invoked

00:27:34.566 --> 00:27:35.936 A:middle
in different kinds
of situations.

00:27:36.406 --> 00:27:39.346 A:middle
And so the activation rules are
what lets the system make the

00:27:39.386 --> 00:27:41.776 A:middle
right decision about
which extensions to put

00:27:41.776 --> 00:27:44.616 A:middle
in the activity view or the
share menu based on the kind

00:27:44.616 --> 00:27:46.486 A:middle
of data that's in the
extension context.

00:27:46.966 --> 00:27:52.166 A:middle
So, there are two ways
for your extension

00:27:52.166 --> 00:27:53.776 A:middle
to supply its activation rules.

00:27:54.366 --> 00:27:55.346 A:middle
The first is a predicate.

00:27:55.926 --> 00:27:58.846 A:middle
Now, every extension's
Info.plist has an

00:27:58.846 --> 00:27:59.906 A:middle
NSExtension dictionary.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.446 --> 00:28:02.526 A:middle
And within that NSExtension
dictionary is

00:28:02.526 --> 00:28:03.776 A:middle
the NSExtensionAttributes.

00:28:04.176 --> 00:28:06.386 A:middle
The system uses those
attributes as part

00:28:06.386 --> 00:28:09.166 A:middle
of its decisionmaking process
about which extensions to show.

00:28:09.496 --> 00:28:13.036 A:middle
But, importantly for Share
Extensions the NSActivationRule

00:28:13.796 --> 00:28:16.786 A:middle
within the NSExtensionAttributes
is what you need to set.

00:28:17.316 --> 00:28:19.656 A:middle
If you set that to a
string that's a predicate,

00:28:20.426 --> 00:28:22.626 A:middle
we will run that predicate
in the host app and figure

00:28:22.626 --> 00:28:24.336 A:middle
out if your extension
is appropriate.

00:28:24.736 --> 00:28:27.136 A:middle
And that predicate can be as
detailed as you need it be

00:28:27.306 --> 00:28:28.556 A:middle
or it can be simple
if you want it

00:28:28.556 --> 00:28:30.416 A:middle
to be-whatever you need
to get the job done.

00:28:30.776 --> 00:28:32.486 A:middle
And this will serve the
needs of a lot of extensions.

00:28:34.656 --> 00:28:35.896 A:middle
Other extensions, however,

00:28:36.396 --> 00:28:38.626 A:middle
may have a little
more fine grain needs.

00:28:39.056 --> 00:28:40.786 A:middle
What we found internally
is that a lot

00:28:40.786 --> 00:28:44.246 A:middle
of our extensions just wanted to
know basic or just wanted to say

00:28:44.246 --> 00:28:46.686 A:middle
that they support a
basic set of images

00:28:46.866 --> 00:28:48.946 A:middle
or videos or some URLs or text.

00:28:49.566 --> 00:28:52.316 A:middle
So, we offer these condensed
rules that allow extensions

00:28:52.376 --> 00:28:54.716 A:middle
to specify just those
particular things without having

00:28:54.716 --> 00:28:55.876 A:middle
to write a complex predicate.

00:28:56.336 --> 00:28:58.736 A:middle
Now, ultimately these
condensed rules boil

00:28:58.736 --> 00:29:00.586 A:middle
down to a predicate
behind the scenes,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.736 --> 00:29:00.586 A:middle
down to a predicate
behind the scenes,

00:29:00.586 --> 00:29:02.016 A:middle
but you don't need
to worry about that.

00:29:02.506 --> 00:29:05.516 A:middle
So, to specify condensed
rules you still put

00:29:05.516 --> 00:29:08.596 A:middle
in an NSActivationRule inside
your NSExtensionAttributes.

00:29:08.906 --> 00:29:10.996 A:middle
But, this time it's a dictionary
and there are a number

00:29:10.996 --> 00:29:12.326 A:middle
of keys you can put
in the dictionary

00:29:12.326 --> 00:29:13.766 A:middle
that indicate the
amount of that type

00:29:13.766 --> 00:29:16.046 A:middle
of data your extension
is interested in.

00:29:16.726 --> 00:29:22.386 A:middle
Now, the bottom of those two
activation rules both had to do

00:29:22.386 --> 00:29:24.846 A:middle
with web content and
they're slightly different.

00:29:25.196 --> 00:29:29.206 A:middle
We have a WebURL support and a
WebPage support and I want to go

00:29:29.206 --> 00:29:30.746 A:middle
into the details about these.

00:29:31.376 --> 00:29:34.126 A:middle
So, some Share Extensions
are all

00:29:34.126 --> 00:29:36.796 A:middle
about taking the link you're
currently looking at in Safari

00:29:37.026 --> 00:29:39.056 A:middle
and posting it someplace
else to some feed

00:29:39.096 --> 00:29:40.526 A:middle
so somebody else can
click on that link

00:29:40.526 --> 00:29:41.446 A:middle
and go see the webpage.

00:29:42.126 --> 00:29:44.676 A:middle
For those kinds of Sharing
Extensions you want to specify

00:29:44.676 --> 00:29:46.416 A:middle
that you support the
WebURLWithMaxCount.

00:29:47.846 --> 00:29:51.016 A:middle
Now, another class of Sharing
Extensions are all about looking

00:29:51.016 --> 00:29:53.406 A:middle
at the page that Safari's
currently got displayed

00:29:53.406 --> 00:29:55.506 A:middle
and pulling data
out of that page.

00:29:55.846 --> 00:29:59.326 A:middle
And for those Sharing Extensions
we have the WebPageWithMaxCount


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.036 --> 00:30:01.736 A:middle
activation rule.

00:30:01.906 --> 00:30:04.626 A:middle
Now, in order to support
the WebPageWithMaxCount your

00:30:04.626 --> 00:30:07.506 A:middle
extension also needs to
supply a JavaScript that's run

00:30:07.736 --> 00:30:10.796 A:middle
to determine what part of the
web content to actually stick

00:30:10.796 --> 00:30:11.886 A:middle
on the extension context.

00:30:12.316 --> 00:30:14.046 A:middle
I'm not going to go into
detail on that here,

00:30:14.256 --> 00:30:16.956 A:middle
but in tomorrow's session
we dive into detail on that

00:30:16.956 --> 00:30:17.946 A:middle
so please check that
session out.

00:30:18.046 --> 00:30:23.266 A:middle
Hammering it home yet again,

00:30:23.266 --> 00:30:26.886 A:middle
extensions are basically just
ViewControllers so it's a lot

00:30:26.886 --> 00:30:28.046 A:middle
of familiar territory.

00:30:28.816 --> 00:30:30.726 A:middle
Share Extensions
can be implemented

00:30:30.726 --> 00:30:32.476 A:middle
with two kinds of
ViewControllers.

00:30:32.476 --> 00:30:34.716 A:middle
We support them on
both iOS and OS X

00:30:35.416 --> 00:30:37.176 A:middle
and you can subclass
UIViewController

00:30:37.176 --> 00:30:38.656 A:middle
or NSViewController as you wish.

00:30:39.296 --> 00:30:43.526 A:middle
You probably already
have ViewController code

00:30:43.526 --> 00:30:46.246 A:middle
in your apps today that you can
repurpose for a Share Extension.

00:30:46.396 --> 00:30:48.666 A:middle
Sure, maybe you want to
make some tweaks to it

00:30:48.666 --> 00:30:52.046 A:middle
to conform better to maybe the
limited amount of space you have

00:30:52.046 --> 00:30:53.026 A:middle
on the screen or whatnot.

00:30:53.296 --> 00:30:56.006 A:middle
But you can take that existing
code, massage it a little bit

00:30:56.126 --> 00:30:58.266 A:middle
and deploy it in an
extension, and you can get it

00:30:58.266 --> 00:31:00.796 A:middle
to look exactly how you
want using your own branding


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.266 --> 00:31:00.796 A:middle
to look exactly how you
want using your own branding

00:31:00.796 --> 00:31:02.106 A:middle
or existing UI or whatever.

00:31:04.116 --> 00:31:06.656 A:middle
Some extensions,
however, want to conform

00:31:06.656 --> 00:31:08.336 A:middle
to the standard system
share sheet look.

00:31:08.866 --> 00:31:12.116 A:middle
And for them we offer the
SLComposeService ViewController

00:31:12.306 --> 00:31:14.666 A:middle
that you can subclass to
get, among other things,

00:31:14.766 --> 00:31:18.756 A:middle
the standard look, the standard
animations, text editing,

00:31:18.976 --> 00:31:21.256 A:middle
a indication of the
remaining characters based

00:31:21.256 --> 00:31:25.506 A:middle
on the characters typed so far,
the post and cancel buttons,

00:31:25.506 --> 00:31:28.576 A:middle
built-in previewing and
other limited amounts

00:31:29.376 --> 00:31:31.156 A:middle
of customization.

00:31:31.466 --> 00:31:33.986 A:middle
So, once you've implemented your
ViewController the next thing

00:31:33.986 --> 00:31:36.606 A:middle
you need to be concerned about
is actually doing the upload

00:31:36.606 --> 00:31:39.186 A:middle
or post to wherever you're
sharing this data to.

00:31:39.876 --> 00:31:42.656 A:middle
The key here is that you
need to use NSURLSession

00:31:43.146 --> 00:31:46.636 A:middle
with a background session
configuration, reason being,

00:31:46.916 --> 00:31:50.396 A:middle
your extension does not live
beyond its presentation-at least

00:31:50.396 --> 00:31:52.766 A:middle
not very long, and we'll talk
more about that tomorrow.

00:31:53.146 --> 00:31:54.046 A:middle
So, you need to make sure

00:31:54.046 --> 00:31:57.116 A:middle
that by using a background
NSURLSession you're allowing the

00:31:57.196 --> 00:31:59.126 A:middle
system to handle
the upload for you.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:00.666 --> 00:32:03.736 A:middle
So, you create a background
NSURLSessionConfiguration,

00:32:04.136 --> 00:32:09.336 A:middle
build an NSURLSession around
that, build an NSURLRequest

00:32:09.456 --> 00:32:12.926 A:middle
that encompasses the items
that are being shared

00:32:13.596 --> 00:32:17.966 A:middle
and create an upload task
wrapped around that NSURLRequest

00:32:18.356 --> 00:32:21.076 A:middle
and then start that upload task.

00:32:21.266 --> 00:32:23.266 A:middle
Once you've done that
the system is going

00:32:23.266 --> 00:32:24.326 A:middle
to handle the upload for you.

00:32:25.166 --> 00:32:28.306 A:middle
At that point your extension
needs to tell the host app

00:32:28.306 --> 00:32:30.706 A:middle
that it's done and it can
tear down the presentation

00:32:30.706 --> 00:32:33.316 A:middle
of your ViewController and you
do that by calling a method

00:32:33.316 --> 00:32:36.486 A:middle
on the extension context called
completeRequestReturningItems

00:32:36.586 --> 00:32:37.336 A:middle
completionHandler.

00:32:41.176 --> 00:32:43.966 A:middle
If the user chooses
to cancel your sheet,

00:32:44.076 --> 00:32:45.806 A:middle
or whatever you're
presentation happens to be,

00:32:46.036 --> 00:32:48.226 A:middle
there's another extension
context method you need to call.

00:32:48.566 --> 00:32:50.326 A:middle
This is called
cancelRequestWithError.

00:32:52.976 --> 00:32:54.436 A:middle
So, Matt already
talked about performance

00:32:54.436 --> 00:32:58.486 A:middle
with request-with respect to the
today widgets and I want to talk

00:32:58.486 --> 00:33:00.096 A:middle
about that in a little
bit different way


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.486 --> 00:33:00.096 A:middle
about that in a little
bit different way

00:33:00.096 --> 00:33:01.236 A:middle
in terms of Share Extensions.

00:33:02.076 --> 00:33:04.936 A:middle
Share Extensions often
have to grab a bunch

00:33:04.936 --> 00:33:06.336 A:middle
of data from the host app.

00:33:06.336 --> 00:33:09.116 A:middle
They might be dealing with 10
photos or an enormous video

00:33:09.576 --> 00:33:11.296 A:middle
and it can be expensive
to be pulling

00:33:11.296 --> 00:33:14.176 A:middle
that from the host app while
the presentation is happening.

00:33:14.676 --> 00:33:18.656 A:middle
So, if you notice that your
presentation animation is

00:33:18.696 --> 00:33:21.536 A:middle
stuttering you may need to
defer some of that heavy lifting

00:33:21.536 --> 00:33:23.226 A:middle
until after the presentation
is completed.

00:33:23.956 --> 00:33:27.496 A:middle
If you subclass UIViewController
or NSViewController,

00:33:27.716 --> 00:33:29.566 A:middle
do whatever makes sense
for the rest of your code.

00:33:29.566 --> 00:33:32.116 A:middle
Just defer that task so it's
not impacting the animation.

00:33:33.446 --> 00:33:36.886 A:middle
If you subclass SLComposeService
ViewController, however,

00:33:36.886 --> 00:33:39.846 A:middle
we will call your subclass'
presentationAnimationDidFinish

00:33:39.846 --> 00:33:42.756 A:middle
method giving your
ViewController a good hook

00:33:43.066 --> 00:33:44.606 A:middle
with which to start
that heavy lifting.

00:33:44.606 --> 00:33:49.516 A:middle
So, let's take a look
at the Photo Blog app

00:33:49.516 --> 00:33:51.806 A:middle
and the Photo Blog Share
Extension real quick.

00:33:57.076 --> 00:34:00.036 A:middle
Before going into
the code I'm going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:57.076 --> 00:34:00.036 A:middle
Before going into
the code I'm going

00:34:00.036 --> 00:34:03.356 A:middle
to show you the Share
Extension running so some

00:34:03.356 --> 00:34:04.816 A:middle
of the code will make a
little bit more sense.

00:34:05.126 --> 00:34:06.626 A:middle
So, we're going to go into
photos just like that set

00:34:06.626 --> 00:34:07.686 A:middle
of screenshots I showed.

00:34:08.496 --> 00:34:12.406 A:middle
Let's pick a different one.

00:34:14.315 --> 00:34:15.846 A:middle
Puppies-we'll do just one.

00:34:15.926 --> 00:34:17.196 A:middle
Oh, let's not do that.

00:34:18.436 --> 00:34:18.936 A:middle
There we go.

00:34:19.866 --> 00:34:21.525 A:middle
Click on the Photo
Blog Share Extension

00:34:21.525 --> 00:34:23.116 A:middle
and up comes the compose view.

00:34:23.116 --> 00:34:26.616 A:middle
So, this is clearly using the
standard system compose sheet

00:34:26.616 --> 00:34:28.996 A:middle
look derived from
SLComposeService ViewController,

00:34:29.376 --> 00:34:30.815 A:middle
and it can do a couple
different things.

00:34:30.815 --> 00:34:35.386 A:middle
You can type some text
and as I'm typing text,

00:34:35.536 --> 00:34:37.386 A:middle
it's kind of hard to see, but
there's a little indicator

00:34:37.386 --> 00:34:38.516 A:middle
of the remaining characters,

00:34:38.516 --> 00:34:41.266 A:middle
and once I type too much
text it goes negative

00:34:41.266 --> 00:34:42.516 A:middle
and the Post button disables.

00:34:42.966 --> 00:34:44.966 A:middle
This is all happening
more or less for free.

00:34:44.966 --> 00:34:46.525 A:middle
You'll see some details
when we look at the code.

00:34:47.246 --> 00:34:50.176 A:middle
The image preview there,
it happens for free,

00:34:50.315 --> 00:34:51.656 A:middle
the base class will
do that for you.

00:34:52.275 --> 00:34:56.946 A:middle
We also, this particular
subclass adds an audience picker

00:34:57.336 --> 00:35:00.056 A:middle
so this Photo Blog supports
the notion of posting publicly


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:57.336 --> 00:35:00.056 A:middle
so this Photo Blog supports
the notion of posting publicly

00:35:00.336 --> 00:35:02.856 A:middle
or only to my friends
or completely privately.

00:35:02.856 --> 00:35:04.446 A:middle
And you can choose a
different audience.

00:35:04.976 --> 00:35:06.706 A:middle
Let's delete some
text here so we're

00:35:06.706 --> 00:35:11.306 A:middle
within the allowed
range, then we can post.

00:35:11.966 --> 00:35:15.526 A:middle
So, let's go back into Xcode
and see how we implemented that.

00:35:17.216 --> 00:35:20.436 A:middle
So, the first thing I did-and
it's hard to see, sorry,

00:35:20.526 --> 00:35:22.746 A:middle
but this is as good as I
can do with the Info.plist.

00:35:22.746 --> 00:35:24.816 A:middle
The first thing I did was
set the bundle display name

00:35:24.816 --> 00:35:28.196 A:middle
for my extension to
Photo Blog and then I set

00:35:28.196 --> 00:35:29.976 A:middle
up an activation rule.

00:35:30.236 --> 00:35:33.576 A:middle
This particular activation rule
says my Share Extension only

00:35:33.576 --> 00:35:34.266 A:middle
wants one image.

00:35:34.406 --> 00:35:35.406 A:middle
That's all you need to give me.

00:35:35.406 --> 00:35:36.536 A:middle
I don't care about
anything else.

00:35:36.646 --> 00:35:38.556 A:middle
This is one I'm relevant.

00:35:39.266 --> 00:35:42.256 A:middle
And now my ViewController.

00:35:42.256 --> 00:35:45.046 A:middle
So, my ViewController subclasses

00:35:45.046 --> 00:35:47.216 A:middle
from SLComposeService
ViewController.

00:35:48.076 --> 00:35:49.406 A:middle
Now, let's go look at
the implementation.

00:35:49.726 --> 00:35:52.126 A:middle
But, before I start adding
code to this, I want to talk

00:35:52.126 --> 00:35:54.346 A:middle
about a couple artificial
constraints for this demo app.

00:35:54.696 --> 00:35:58.096 A:middle
So, for purposes of showing off
the remaining characters count

00:35:58.406 --> 00:36:01.296 A:middle
and generally updating the
Post button, I'm going to say


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:58.406 --> 00:36:01.296 A:middle
and generally updating the
Post button, I'm going to say

00:36:01.296 --> 00:36:04.216 A:middle
that my photo blog has two
constraints associated with it.

00:36:04.566 --> 00:36:06.946 A:middle
The first is that no photo
can be posted with more

00:36:06.946 --> 00:36:10.136 A:middle
than 20 characters alongside
the photo, because it's meant

00:36:10.136 --> 00:36:11.596 A:middle
to just let you see the photo

00:36:11.596 --> 00:36:12.866 A:middle
and not get distracted
by the text.

00:36:13.316 --> 00:36:15.706 A:middle
And also it's supposed to
be a lightweight photo blog.

00:36:15.706 --> 00:36:18.086 A:middle
It doesn't want to spend a ton
of storage space on the photos.

00:36:18.326 --> 00:36:21.176 A:middle
So, no photo that you post can
be bigger than one megabyte.

00:36:22.356 --> 00:36:24.806 A:middle
And this last constraint
is particularly important,

00:36:24.876 --> 00:36:28.446 A:middle
because when you pull data from
the host application you're not

00:36:28.446 --> 00:36:30.056 A:middle
in control of the data's size.

00:36:30.596 --> 00:36:31.716 A:middle
If you've got a photo coming

00:36:31.716 --> 00:36:33.556 A:middle
from photos app it
might be quite large

00:36:33.656 --> 00:36:35.816 A:middle
and therefore it's your
extension's responsibility

00:36:35.816 --> 00:36:37.696 A:middle
to down sample that
image data to fit

00:36:37.696 --> 00:36:38.926 A:middle
within your size constraints.

00:36:41.416 --> 00:36:43.886 A:middle
So, let's start implementing
the ViewController.

00:36:44.896 --> 00:36:47.386 A:middle
So, I'm going to add an image
data property to my subclass.

00:36:47.666 --> 00:36:49.916 A:middle
This is going to be the
fully down sampled image data

00:36:49.916 --> 00:36:52.696 A:middle
that I'm going to ultimately
upload to the photo blog.

00:36:54.196 --> 00:36:55.926 A:middle
I'm going to keep
track of the audience

00:36:56.276 --> 00:36:58.546 A:middle
that the user wants
to post it to.

00:36:59.726 --> 00:37:01.416 A:middle
And I'm going to keep
a configuration item


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.726 --> 00:37:01.416 A:middle
And I'm going to keep
a configuration item

00:37:01.416 --> 00:37:03.396 A:middle
that I'm going to talk
about a little bit later on.

00:37:03.756 --> 00:37:06.616 A:middle
Basically, this represents
that AudiencePicker table cell

00:37:06.616 --> 00:37:07.936 A:middle
down in the bottom
of the compose view.

00:37:13.426 --> 00:37:16.276 A:middle
Alright, so in viewDidLoad
we're going

00:37:16.276 --> 00:37:18.026 A:middle
to initialize the audience.

00:37:18.166 --> 00:37:19.806 A:middle
We already have a
utility routine in our app

00:37:19.956 --> 00:37:22.066 A:middle
that knows how to fetch the
right defaultAudience based

00:37:22.066 --> 00:37:22.916 A:middle
on a number of factors.

00:37:22.916 --> 00:37:27.226 A:middle
So, we're just going to
reuse that code from the app.

00:37:27.866 --> 00:37:30.176 A:middle
Now, those constraints
I was talking about,

00:37:30.176 --> 00:37:32.496 A:middle
the 20-character limit
and the down sampling,

00:37:32.776 --> 00:37:36.316 A:middle
both need to affect whether
the Post button is enabled.

00:37:36.906 --> 00:37:38.166 A:middle
So, if the user has typed more

00:37:38.166 --> 00:37:41.336 A:middle
than 20 characters we don't
want them to be able to post.

00:37:41.776 --> 00:37:43.876 A:middle
If the down sample is
not finished, likewise,

00:37:44.076 --> 00:37:45.646 A:middle
we don't want them
to be able to post,

00:37:45.906 --> 00:37:47.666 A:middle
so we need to make sure
the Post button is disabled

00:37:47.666 --> 00:37:48.386 A:middle
in those cases.

00:37:49.116 --> 00:37:52.016 A:middle
Also, since we're using the
remaining character count

00:37:52.016 --> 00:37:54.786 A:middle
indicator we need to make sure
that's up to date at all times.

00:37:55.126 --> 00:37:57.916 A:middle
The right place to do that
is the isContentValid method.

00:37:58.566 --> 00:38:01.106 A:middle
The SLComposeService
ViewController calls your


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.566 --> 00:38:01.106 A:middle
The SLComposeService
ViewController calls your

00:38:01.106 --> 00:38:03.756 A:middle
subclass' isContentValid
method whenever it needs

00:38:03.756 --> 00:38:05.346 A:middle
to update the status
of the Post button

00:38:05.346 --> 00:38:07.016 A:middle
so it gives you your
chance to do those things.

00:38:07.436 --> 00:38:09.926 A:middle
So, let's implement
some of that.

00:38:10.356 --> 00:38:12.106 A:middle
The first thing I'm going
to do is look at the number

00:38:12.106 --> 00:38:14.586 A:middle
of characters that the
user has typed so far.

00:38:15.056 --> 00:38:18.216 A:middle
SLComposeService ViewController
has a content text property,

00:38:18.456 --> 00:38:20.466 A:middle
which is the text that
the user has typed so far,

00:38:20.466 --> 00:38:23.156 A:middle
so we grab its length.

00:38:23.836 --> 00:38:26.176 A:middle
Next, we calculate the number
of characters remaining based

00:38:26.176 --> 00:38:27.676 A:middle
on our Photo Blog's constraints.

00:38:30.206 --> 00:38:32.766 A:middle
Then we set SLComposeService
ViewController's

00:38:32.886 --> 00:38:34.056 A:middle
charactersRemaining property.

00:38:34.586 --> 00:38:36.576 A:middle
This is an NS number
and by setting

00:38:36.576 --> 00:38:40.576 A:middle
that to an NS number the base
class automatically updates the

00:38:40.576 --> 00:38:44.006 A:middle
text on the compose sheet
to-sorry, to reflect the number

00:38:44.006 --> 00:38:44.976 A:middle
of characters you
still have left.

00:38:54.136 --> 00:38:54.946 A:middle
And I just add it here.

00:38:54.946 --> 00:38:57.146 A:middle
So, next we are going to say

00:38:57.146 --> 00:38:58.536 A:middle
that the Post button
should be enabled

00:38:58.536 --> 00:39:01.076 A:middle
if the user has not
typed too much text


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:58.536 --> 00:39:01.076 A:middle
if the user has not
typed too much text

00:39:01.446 --> 00:39:03.936 A:middle
and if we already have our
fully down-sampled image data.

00:39:05.336 --> 00:39:07.506 A:middle
Otherwise, don't
enable the Post button.

00:39:08.436 --> 00:39:11.046 A:middle
Now, we got to get our fully
down-sampled image data and,

00:39:11.046 --> 00:39:13.326 A:middle
like I said, this can be a
potentially expensive operation,

00:39:13.326 --> 00:39:14.566 A:middle
because we don't know
how much data is going

00:39:14.566 --> 00:39:15.646 A:middle
to coming over from the host.

00:39:16.046 --> 00:39:18.956 A:middle
So, we want to defer that to
presentationAnimationDidFinish.

00:39:19.336 --> 00:39:22.546 A:middle
This method is called by
sub-called on subclasses

00:39:22.546 --> 00:39:24.156 A:middle
of SLComposeService
ViewController

00:39:24.516 --> 00:39:26.756 A:middle
after the compose sheet
has slid up onscreen.

00:39:28.876 --> 00:39:31.036 A:middle
So, the first thing
we're going to do is look

00:39:31.036 --> 00:39:32.506 A:middle
at the extension context again

00:39:32.506 --> 00:39:34.196 A:middle
and in particular look
at the input items.

00:39:34.726 --> 00:39:35.716 A:middle
Now, I'm going to go off

00:39:35.716 --> 00:39:38.396 A:middle
in the weeds a little bit
here, but bear with me.

00:39:38.396 --> 00:39:41.286 A:middle
The extension context can have
multiple input items on it.

00:39:41.866 --> 00:39:47.346 A:middle
Each input item represents
a separate upload blob.

00:39:48.256 --> 00:39:50.796 A:middle
For most Share Extensions
you only care

00:39:50.796 --> 00:39:52.626 A:middle
about doing one upload
at a time.

00:39:53.066 --> 00:39:55.626 A:middle
But, you might imagine a
particular Sharing Extension

00:39:55.626 --> 00:39:59.396 A:middle
that's allowed to do five posts
to one social network at one go.

00:39:59.926 --> 00:40:00.826 A:middle
So, for that kind


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.926 --> 00:40:00.826 A:middle
So, for that kind

00:40:00.826 --> 00:40:02.906 A:middle
of hypothetical Share Extension
you're going to need to look

00:40:02.906 --> 00:40:03.886 A:middle
at all the input items.

00:40:04.646 --> 00:40:06.816 A:middle
But, since this Photo
Blog extension only cares

00:40:06.816 --> 00:40:09.516 A:middle
about posting one photo
at a time with one post

00:40:09.516 --> 00:40:13.326 A:middle
at a time we just look
at the first input item.

00:40:14.876 --> 00:40:17.406 A:middle
Next, we're going to iterate
over all of the attachments

00:40:17.736 --> 00:40:20.216 A:middle
on that extension item.

00:40:20.216 --> 00:40:22.846 A:middle
Each extension-each
post request could come

00:40:22.846 --> 00:40:24.136 A:middle
with multiple pieces of data.

00:40:24.206 --> 00:40:26.846 A:middle
Like, you could go into
photos and select two photos

00:40:26.936 --> 00:40:28.176 A:middle
and choose to share that.

00:40:28.536 --> 00:40:30.356 A:middle
You would have an
extension context

00:40:30.356 --> 00:40:32.746 A:middle
with one item with
two attachments.

00:40:33.356 --> 00:40:34.866 A:middle
So, we're going to iterate
over the attachments

00:40:34.866 --> 00:40:37.526 A:middle
and find the photo
that we care about.

00:40:39.056 --> 00:40:42.026 A:middle
So, what we do is we iterate
over all the item providers

00:40:42.026 --> 00:40:42.856 A:middle
in the extension item

00:40:43.506 --> 00:40:46.206 A:middle
and we call hasItemConforming
ToTypeIdentifier

00:40:46.356 --> 00:40:48.036 A:middle
passing kUTTypeImage.

00:40:48.406 --> 00:40:51.126 A:middle
This says, 'Hey, item provider,
do you have an image in you?'

00:40:51.676 --> 00:40:54.266 A:middle
And if we find out
that the answer is yes,

00:40:55.136 --> 00:40:56.226 A:middle
we are going to do some work.

00:40:56.226 --> 00:40:58.766 A:middle
We're going to need to pull that
particular item provider's data

00:40:58.766 --> 00:41:01.346 A:middle
and we're going to want to do
that on a background cue so as


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.766 --> 00:41:01.346 A:middle
and we're going to want to do
that on a background cue so as

00:41:01.376 --> 00:41:03.696 A:middle
to not disrupt the main thread.

00:41:04.186 --> 00:41:05.686 A:middle
And since we've found
the one image

00:41:05.726 --> 00:41:07.546 A:middle
that we support we can
stop iterating now.

00:41:08.796 --> 00:41:12.406 A:middle
So, the actual work of
pulling the data happens

00:41:12.896 --> 00:41:15.736 A:middle
with the
LoadItemForTypeIdentifier

00:41:16.096 --> 00:41:18.726 A:middle
options completionHandler
method, again,

00:41:18.996 --> 00:41:22.086 A:middle
saying 'Give me some
UTTypeImage, please.'

00:41:22.506 --> 00:41:24.146 A:middle
And the completionHandler

00:41:24.146 --> 00:41:26.706 A:middle
that you pass actually has
a flexible first parameter

00:41:26.706 --> 00:41:28.306 A:middle
that indicates the way you would

00:41:28.306 --> 00:41:30.216 A:middle
like the item provider
to supply your data.

00:41:31.046 --> 00:41:34.106 A:middle
In this case, my Share Extension
is interested in NSData,

00:41:34.106 --> 00:41:36.146 A:middle
so that's what my
completionHandler's

00:41:36.146 --> 00:41:37.116 A:middle
prototype is.

00:41:37.536 --> 00:41:41.096 A:middle
And when I get the-scroll
up for me,

00:41:41.696 --> 00:41:44.076 A:middle
let's see if I can make
this a little wider,

00:41:44.756 --> 00:41:48.906 A:middle
not wrap so much It's
important to note

00:41:49.026 --> 00:41:53.196 A:middle
that loadItemForTypeIdentifier
completes on an arbitrary cue

00:41:53.346 --> 00:41:55.256 A:middle
and since we're going to do
view controller work I'm going

00:41:55.256 --> 00:41:56.966 A:middle
to need to dispatch
async onto the main cue

00:41:56.966 --> 00:41:57.766 A:middle
to actually do that work.

00:41:59.436 --> 00:42:00.816 A:middle
Then I'm going to call a method


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.436 --> 00:42:00.816 A:middle
Then I'm going to call a method

00:42:00.816 --> 00:42:03.086 A:middle
on my subclass called
imageDataLoadDidFinish

00:42:03.086 --> 00:42:04.046 A:middle
and pass it that data.

00:42:04.596 --> 00:42:05.576 A:middle
So let's go implement that.

00:42:16.046 --> 00:42:18.736 A:middle
So, my application already
has Downsampling code, right?

00:42:18.736 --> 00:42:20.656 A:middle
And it's what it would
in the normal case

00:42:20.656 --> 00:42:21.736 A:middle
in the normal application case.

00:42:21.736 --> 00:42:23.996 A:middle
So, I'm just going to
repurpose that and ask it

00:42:23.996 --> 00:42:26.566 A:middle
to downsample the image
data, passing my map size.

00:42:27.026 --> 00:42:29.316 A:middle
And that's going to complete
on an arbitrary queue,

00:42:29.316 --> 00:42:32.136 A:middle
so once that completes I'm going
to do view controller work,

00:42:32.136 --> 00:42:34.016 A:middle
so I dispatch async
onto the main queue

00:42:35.016 --> 00:42:37.356 A:middle
and then I remember the
downsampled imageData.

00:42:37.696 --> 00:42:40.536 A:middle
Now that I've got that image
data, I need that Post button

00:42:40.536 --> 00:42:43.096 A:middle
to get updated, and the way
I do that is call a method

00:42:43.096 --> 00:42:45.456 A:middle
on SL composer ViewController
called validateContent.

00:42:46.416 --> 00:42:50.196 A:middle
ValidateContent calls your
subclasses IsContentValid method

00:42:50.196 --> 00:42:52.996 A:middle
and gives it another chance
to determine whether or not

00:42:52.996 --> 00:42:53.976 A:middle
to enable the Post button.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:02.166 --> 00:43:05.776 A:middle
Okay, so, when the user
taps the Post button

00:43:05.956 --> 00:43:09.356 A:middle
on an SL composer
ViewController subclass

00:43:09.356 --> 00:43:11.716 A:middle
that subclasses didSelectPost
method.

00:43:12.736 --> 00:43:14.036 A:middle
So let's react to that.

00:43:15.396 --> 00:43:17.496 A:middle
The first thing we're going
to do is perform the upload

00:43:18.386 --> 00:43:20.426 A:middle
and after that we
need to tell the host

00:43:20.706 --> 00:43:21.776 A:middle
that our extension is done

00:43:21.906 --> 00:43:23.226 A:middle
and you can dismiss
our ViewController.

00:43:23.226 --> 00:43:24.976 A:middle
And, again, we do that
by calling a method

00:43:24.976 --> 00:43:27.616 A:middle
on the extension context called
completeRequestReturningItems

00:43:27.796 --> 00:43:28.506 A:middle
completionHandler.

00:43:29.576 --> 00:43:31.056 A:middle
So let's look at
the upload again.

00:43:31.276 --> 00:43:33.276 A:middle
So the upload is going
to be very similar

00:43:33.276 --> 00:43:35.276 A:middle
to what I already showed
on the slides, but let's go

00:43:35.276 --> 00:43:37.676 A:middle
through it again because it's
very important for extensions

00:43:37.796 --> 00:43:39.066 A:middle
because they have
a short lifespan.

00:43:39.656 --> 00:43:41.616 A:middle
The first thing we're going

00:43:41.616 --> 00:43:45.646 A:middle
to do is create a background
NSURLSessionConfiguration,

00:43:47.796 --> 00:43:51.016 A:middle
create a NSURLSession
from that configuration

00:43:52.726 --> 00:43:55.306 A:middle
and create a request
representing the upload.

00:43:55.536 --> 00:43:58.136 A:middle
Now, again, this is code
we stole, well, not stole,

00:43:58.136 --> 00:43:59.996 A:middle
but code we borrowed
from the main application


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:00.336 --> 00:44:03.246 A:middle
that builds an NSURLRequest
from the photo data

00:44:03.576 --> 00:44:06.406 A:middle
from the content text that the
user has typed and the audience.

00:44:08.026 --> 00:44:09.916 A:middle
Build an UploadTask
around that request

00:44:11.436 --> 00:44:16.566 A:middle
and then start that upload.

00:44:17.086 --> 00:44:20.806 A:middle
Now, in this particular
case-well, let's see,

00:44:20.806 --> 00:44:21.646 A:middle
let's step back for a second.

00:44:21.876 --> 00:44:23.886 A:middle
So, we implemented
didSelectPost method.

00:44:24.006 --> 00:44:27.006 A:middle
SL compose service
ViewController will also call a

00:44:27.006 --> 00:44:30.036 A:middle
DidSelect cancel
method on your subclass,

00:44:30.366 --> 00:44:33.616 A:middle
but in this particular case
we don't need to implement it.

00:44:33.616 --> 00:44:35.886 A:middle
The default implementation of
didSelectCancel will go ahead

00:44:35.886 --> 00:44:38.216 A:middle
and cancel the extension
context for you automatically.

00:44:38.696 --> 00:44:41.436 A:middle
But if your extension needs to
do some cleanup work in response

00:44:41.436 --> 00:44:43.846 A:middle
to a cancel, you can
override didSelectCancel.

00:44:45.436 --> 00:44:48.976 A:middle
So that's enough to handle the
basic uploading and interaction

00:44:48.976 --> 00:44:50.816 A:middle
with the sheet, but
at the bottom

00:44:50.816 --> 00:44:53.116 A:middle
of the sheet-remember there was
that little audiencePicker cell.

00:44:54.016 --> 00:44:55.126 A:middle
I'll show you how
to implement that.

00:44:56.746 --> 00:44:59.936 A:middle
The base class will call your
subclasses configuration items

00:44:59.936 --> 00:45:03.406 A:middle
method as a way to give your
subclass a chance to supply


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:59.936 --> 00:45:03.406 A:middle
method as a way to give your
subclass a chance to supply

00:45:03.446 --> 00:45:05.286 A:middle
that set of table cells to put

00:45:05.286 --> 00:45:06.966 A:middle
on the bottom of
the share sheet.

00:45:07.346 --> 00:45:09.286 A:middle
So, we're going to implement
the configurationItems method.

00:45:09.816 --> 00:45:12.036 A:middle
It's our subclass'
responsibility

00:45:12.116 --> 00:45:13.616 A:middle
to return an array

00:45:13.836 --> 00:45:15.996 A:middle
of SLComposeSheet
ConfigurationItems,

00:45:16.406 --> 00:45:18.396 A:middle
one for each configuration
item in the table.

00:45:18.916 --> 00:45:21.636 A:middle
Now, the example here only
has one configuration item,

00:45:21.846 --> 00:45:24.816 A:middle
but you might imagine a share
extension that needs multiples.

00:45:24.816 --> 00:45:27.906 A:middle
In fact, some of the built-in
system extensions have multiple

00:45:28.096 --> 00:45:29.436 A:middle
configuration items
on the bottom.

00:45:30.266 --> 00:45:33.656 A:middle
So, we instantiate one
and we set its title.

00:45:33.936 --> 00:45:36.216 A:middle
The title is what's displayed on
the left side of the table cell.

00:45:37.246 --> 00:45:38.996 A:middle
Then we set its value,
which is the audience,

00:45:39.076 --> 00:45:40.606 A:middle
displayed on the right
side of the table cell.

00:45:41.156 --> 00:45:44.426 A:middle
And then we need to react to
when that table cell is tapped.

00:45:44.966 --> 00:45:47.086 A:middle
And the way we do that is
by setting a tapHandler

00:45:47.116 --> 00:45:48.156 A:middle
on the configuration item.

00:45:49.096 --> 00:45:52.246 A:middle
Now, I'm going to avoid a retain
cycle between my view controller

00:45:52.286 --> 00:45:54.636 A:middle
and the configuration item
by capturing a weak reference

00:45:54.636 --> 00:45:56.646 A:middle
to myself inside the tapHandler.

00:45:57.436 --> 00:45:59.636 A:middle
And then what we do is we
grab a strong reference and do

00:45:59.636 --> 00:46:00.566 A:middle
that weak strong dance.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:59.636 --> 00:46:00.566 A:middle
that weak strong dance.

00:46:00.776 --> 00:46:03.846 A:middle
And if our view controller
is still around.

00:46:04.006 --> 00:46:05.956 A:middle
At that point we know the
table cell has been tapped.

00:46:06.276 --> 00:46:08.196 A:middle
We want to show that
audiencePicker UI.

00:46:08.766 --> 00:46:11.396 A:middle
So we've already implemented
inAudienceViewPickerController.

00:46:11.506 --> 00:46:13.876 A:middle
It's just a basic table
view controller that happens

00:46:13.876 --> 00:46:15.746 A:middle
to be audience specific
for this particular use.

00:46:16.636 --> 00:46:19.456 A:middle
So we instantiate that.

00:46:19.976 --> 00:46:21.806 A:middle
We set ourselves
to be its delegate.

00:46:22.126 --> 00:46:23.676 A:middle
Our custom
AudiencePickerViewController

00:46:23.676 --> 00:46:25.556 A:middle
class has a delegate
method that's called

00:46:25.856 --> 00:46:29.056 A:middle
when the user taps an audience,
so that we get to react

00:46:29.136 --> 00:46:30.356 A:middle
to the specific audience chosen.

00:46:32.286 --> 00:46:34.216 A:middle
We're going to tell it what the
currently selected audience is

00:46:34.216 --> 00:46:34.866 A:middle
so it can check the right thing.

00:46:41.046 --> 00:46:42.216 A:middle
And then we're going
to call a method

00:46:42.216 --> 00:46:43.456 A:middle
on
SLComposeServiceViewController

00:46:43.456 --> 00:46:45.566 A:middle
telling it to please animate
this other ViewController

00:46:45.566 --> 00:46:48.196 A:middle
onscreen and that method is
pushConfigurationViewController.

00:46:48.646 --> 00:46:51.266 A:middle
So, this slides your
new view controller

00:46:51.266 --> 00:46:53.276 A:middle
in a navigation controller-like
style

00:46:53.276 --> 00:46:54.786 A:middle
and it resizes the
composed sheet

00:46:54.876 --> 00:46:57.496 A:middle
to fit your view
controller's desired size.

00:46:58.186 --> 00:47:02.926 A:middle
And then, finally, now
that we've implemented


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:58.186 --> 00:47:02.926 A:middle
And then, finally, now
that we've implemented

00:47:02.926 --> 00:47:06.166 A:middle
that we can return our
single configuration item

00:47:06.236 --> 00:47:07.926 A:middle
from configuration items.

00:47:09.636 --> 00:47:12.596 A:middle
All right, so here is our
delegate method that is called

00:47:12.596 --> 00:47:14.226 A:middle
when the
audiencePickerViewController

00:47:14.746 --> 00:47:15.896 A:middle
sees the user tap a cell.

00:47:16.326 --> 00:47:17.246 A:middle
We need to react to that.

00:47:17.336 --> 00:47:20.556 A:middle
We're going to remember
the selected audience.

00:47:22.306 --> 00:47:23.736 A:middle
We're going to tell
our configuration item

00:47:23.736 --> 00:47:24.906 A:middle
that hey, it's got a new value.

00:47:24.906 --> 00:47:27.726 A:middle
And by doing that the table cell
is updated automatically showing

00:47:27.726 --> 00:47:28.316 A:middle
the new audience.

00:47:29.026 --> 00:47:32.476 A:middle
And then finally we
want to auto dismiss

00:47:32.686 --> 00:47:34.636 A:middle
that
audiencePickerViewController.

00:47:34.796 --> 00:47:36.136 A:middle
You don't have to do this.

00:47:36.186 --> 00:47:39.316 A:middle
It really depends on what your
configuration item's needs are.

00:47:39.436 --> 00:47:41.506 A:middle
But generally, for this kind
of simple audiencePicker,

00:47:41.506 --> 00:47:42.876 A:middle
once you tap a cell you want it

00:47:42.916 --> 00:47:45.626 A:middle
to swipe away revealing
the main compose sheet.

00:47:45.936 --> 00:47:47.476 A:middle
So this is just some
boiler-plate code

00:47:47.526 --> 00:47:49.416 A:middle
for executing code
after a short delay.

00:47:49.936 --> 00:47:53.136 A:middle
And then we call
popConfigurationViewController.

00:47:53.526 --> 00:47:55.216 A:middle
So, in a navigation
controller-like way,

00:47:55.216 --> 00:47:57.606 A:middle
this says remove the topmost
view controller from the stack,

00:47:57.926 --> 00:47:59.366 A:middle
and since we only had one there,

00:47:59.566 --> 00:48:02.306 A:middle
it restores the default
share sheet appearance.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:59.566 --> 00:48:02.306 A:middle
it restores the default
share sheet appearance.

00:48:02.906 --> 00:48:04.906 A:middle
So, that is it.

00:48:04.906 --> 00:48:07.166 A:middle
Let's go ahead and
rerun this guy

00:48:07.166 --> 00:48:07.976 A:middle
and take a look at
it one more time.

00:48:18.056 --> 00:48:18.426 A:middle
Photo Blog app.

00:48:18.426 --> 00:48:22.376 A:middle
Let's home out and
go back to photos.

00:48:23.496 --> 00:48:24.436 A:middle
There's our photo.

00:48:24.476 --> 00:48:27.876 A:middle
We can bring up the photo blog
extension and there it is.

00:48:27.936 --> 00:48:36.456 A:middle
We can choose an audience,
make our comment and post away.

00:48:38.316 --> 00:48:40.316 A:middle
So, that's how you make a
share extension for iOS.

00:48:41.056 --> 00:48:44.466 A:middle
But if you are looking at that
Xcode project closely you can

00:48:44.466 --> 00:48:46.866 A:middle
see that there's a couple
OS X targets in there.

00:48:47.316 --> 00:48:51.406 A:middle
Now, it turns out
that share-yeah,

00:48:51.406 --> 00:48:54.086 A:middle
let's hide some more
stuff-that share extensions are

00:48:54.086 --> 00:48:54.866 A:middle
very portable.

00:48:54.866 --> 00:48:58.106 A:middle
It was pretty easy for me to
take my iOS share extension

00:48:58.346 --> 00:49:01.316 A:middle
and massage the code
a little bit for OS X


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:58.346 --> 00:49:01.316 A:middle
and massage the code
a little bit for OS X

00:49:01.316 --> 00:49:03.546 A:middle
and so that is working here.

00:49:03.606 --> 00:49:09.376 A:middle
I can go to some photos and
select a photo, preview it,

00:49:09.506 --> 00:49:12.646 A:middle
bring up the share menu.

00:49:12.646 --> 00:49:14.116 A:middle
Hey, there's my photo blog item

00:49:15.396 --> 00:49:17.876 A:middle
and there's my OS X photo
blog share extension.

00:49:18.516 --> 00:49:27.756 A:middle
[ Applause ]

00:49:28.256 --> 00:49:30.106 A:middle
So, that demo was
all about a subclass

00:49:30.106 --> 00:49:31.706 A:middle
of SLComposeService
ViewController.

00:49:32.006 --> 00:49:34.326 A:middle
But we know a lot of extension
developers are going to want

00:49:34.326 --> 00:49:36.236 A:middle
to just subclass
from UIViewController

00:49:36.236 --> 00:49:37.956 A:middle
and NSViewController
and we'd love you to do

00:49:37.956 --> 00:49:40.076 A:middle
that because you can go to
town and customize the UI

00:49:40.076 --> 00:49:41.576 A:middle
and put your branding
in and what not.

00:49:42.216 --> 00:49:44.006 A:middle
But the basic work that you need

00:49:44.006 --> 00:49:46.446 A:middle
to do beyond implementing the
view controller is pretty much

00:49:46.446 --> 00:49:47.736 A:middle
what I already showed
you in the demo.

00:49:48.236 --> 00:49:50.106 A:middle
You've got those
Info.plist concerns you need

00:49:50.106 --> 00:49:52.866 A:middle
to still set your display name.

00:49:53.276 --> 00:49:55.166 A:middle
You need to still provide
your activation rules

00:49:55.296 --> 00:49:56.876 A:middle
and you still need
to do your upload

00:49:56.876 --> 00:50:00.726 A:middle
with NSURL background session.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:56.876 --> 00:50:00.726 A:middle
with NSURL background session.

00:50:02.596 --> 00:50:05.246 A:middle
So, you just learned all
about app extensions.

00:50:05.786 --> 00:50:08.096 A:middle
You learned a little bit
about how they're packaged,

00:50:08.396 --> 00:50:09.766 A:middle
about the different
extension points,

00:50:10.026 --> 00:50:11.906 A:middle
how the communication
works between the host

00:50:12.316 --> 00:50:13.666 A:middle
and the extension itself.

00:50:14.406 --> 00:50:16.476 A:middle
You learned how to
make a Today widget

00:50:16.786 --> 00:50:20.096 A:middle
and a share extension
on both iOS and OS X.

00:50:20.866 --> 00:50:22.606 A:middle
So go take a look
at your application,

00:50:23.046 --> 00:50:25.206 A:middle
figure out what pieces of
your sharing functionality

00:50:25.206 --> 00:50:27.066 A:middle
or other functionality
you can package

00:50:27.066 --> 00:50:28.886 A:middle
up into an app extension
and deploy.

00:50:29.296 --> 00:50:31.246 A:middle
So, we think this is
really cool technology

00:50:31.246 --> 00:50:33.826 A:middle
and we're really looking forward
to all of the good features

00:50:33.826 --> 00:50:36.126 A:middle
and functionality you're
able to supply users

00:50:36.306 --> 00:50:37.126 A:middle
with your app extensions.

00:50:38.516 --> 00:50:45.096 A:middle
[ Applause ]

00:50:45.596 --> 00:50:47.356 A:middle
Jake Behrens is our
super Evangelist.

00:50:47.546 --> 00:50:50.756 A:middle
We have a really comprehensive
app extensions programming guide

00:50:50.816 --> 00:50:53.206 A:middle
that goes into tons of detail
on all the share points

00:50:53.206 --> 00:50:54.566 A:middle
and all the mechanics
of all this.

00:50:55.566 --> 00:50:58.146 A:middle
Tomorrow, we have another great
Extensions session where we go

00:50:58.146 --> 00:51:00.136 A:middle
into detail on more
share points.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:58.146 --> 00:51:00.136 A:middle
into detail on more
share points.

00:51:00.576 --> 00:51:04.066 A:middle
We also talk about more of
the underlying infrastructure.

00:51:04.316 --> 00:51:05.806 A:middle
We also go into great detail

00:51:05.806 --> 00:51:08.476 A:middle
on the JavaScript
support for web content.

00:51:08.886 --> 00:51:10.666 A:middle
And importantly, more detail

00:51:10.666 --> 00:51:12.846 A:middle
on the extension context
in NSI to providers.

00:51:12.846 --> 00:51:14.196 A:middle
So there's tons of
good information.

00:51:14.196 --> 00:51:15.276 A:middle
I urge you to check those out.

00:51:15.936 --> 00:51:18.816 A:middle
We have two labs where you can
talk to us Apple engineers.

00:51:18.816 --> 00:51:20.556 A:middle
We'd love to get you
started implementing your

00:51:20.556 --> 00:51:21.306 A:middle
share extensions.

00:51:21.576 --> 00:51:23.326 A:middle
One of those labs is
immediately after this.

00:51:23.386 --> 00:51:25.676 A:middle
So, please meet us downstairs
and we'd love to chat.

00:51:26.086 --> 00:51:26.446 A:middle
Thank you.

00:51:27.508 --> 00:51:29.508 A:middle
[ Applause ]

