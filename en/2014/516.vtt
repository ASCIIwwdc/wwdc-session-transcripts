WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:11.856 --> 00:00:14.416 A:middle
&gt;&gt; Good morning, everyone,
my name is Jesse Bunch.

00:00:14.526 --> 00:00:16.436 A:middle
I'm an engineer on
Apple's Productivity team,

00:00:16.436 --> 00:00:18.976 A:middle
and today I'm going to
be talking to you about

00:00:18.976 --> 00:00:21.486 A:middle
"Improving the Accessibility
and Usability

00:00:21.686 --> 00:00:23.246 A:middle
of Complex Web Applications."

00:00:23.806 --> 00:00:27.146 A:middle
So my teammates and
I have been hard

00:00:27.146 --> 00:00:29.346 A:middle
at work improving the
accessibility of iWork

00:00:29.346 --> 00:00:31.786 A:middle
for iCloud, which is
a sophisticated suite

00:00:31.906 --> 00:00:34.836 A:middle
of web applications designed
to allow you to create

00:00:34.836 --> 00:00:38.586 A:middle
and edit your Pages documents,
your Numbers spreadsheets,

00:00:39.356 --> 00:00:42.916 A:middle
and your Keynote presentations
all across platforms and all

00:00:42.916 --> 00:00:45.616 A:middle
from within your web browser.

00:00:45.776 --> 00:00:47.456 A:middle
While there is still
more work to be done

00:00:47.456 --> 00:00:50.686 A:middle
in making them accessible, we
found that a lot of the issues

00:00:50.686 --> 00:00:53.816 A:middle
that we were fixing in
iWork for iCloud are issues

00:00:54.016 --> 00:00:56.106 A:middle
that are commonplace in
web applications today.

00:00:56.526 --> 00:00:59.056 A:middle
And so we thought it would
be really great to highlight

00:00:59.056 --> 00:01:01.576 A:middle
for you some of these specific
accessibility challenges,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.056 --> 00:01:01.576 A:middle
for you some of these specific
accessibility challenges,

00:01:01.576 --> 00:01:04.846 A:middle
as well as provide practical
solutions for these challenges

00:01:05.135 --> 00:01:06.676 A:middle
and give you tips on
how you may be able

00:01:06.676 --> 00:01:07.656 A:middle
to avoid them altogether.

00:01:08.956 --> 00:01:12.136 A:middle
So today, we're going
to cover accessibility

00:01:12.316 --> 00:01:13.386 A:middle
at a fundamental level.

00:01:13.386 --> 00:01:15.436 A:middle
We're going to cover
the latest research

00:01:15.436 --> 00:01:17.516 A:middle
and statistics regarding
users with disabilities.

00:01:17.596 --> 00:01:20.786 A:middle
And then we're going to cover
Web Accessibility Standards

00:01:20.966 --> 00:01:22.646 A:middle
as well as some of
the tools you can use

00:01:22.646 --> 00:01:23.896 A:middle
to help meet those standards.

00:01:24.456 --> 00:01:26.746 A:middle
And then finally, we're
going to apply everything

00:01:26.746 --> 00:01:28.586 A:middle
that we've learned
to help diagnose

00:01:28.586 --> 00:01:30.466 A:middle
and fix some accessibility
issues

00:01:30.466 --> 00:01:32.606 A:middle
in a text editing
application that I've created.

00:01:32.876 --> 00:01:34.206 A:middle
And I'll even show you some

00:01:34.206 --> 00:01:38.216 A:middle
of the new accessibility
debugging tools found

00:01:38.216 --> 00:01:40.586 A:middle
in the Safari Node
Inspector in OS X Yosemite.

00:01:40.586 --> 00:01:44.086 A:middle
So let's get started.

00:01:44.356 --> 00:01:47.786 A:middle
This is the 1992 version
of the very first website.

00:01:48.236 --> 00:01:49.666 A:middle
It's still on the
Internet today.

00:01:50.396 --> 00:01:52.796 A:middle
It's just a page full of
data and links that go

00:01:52.796 --> 00:01:54.836 A:middle
out to other pages
full of data and links.

00:01:55.556 --> 00:01:57.436 A:middle
And it was revolutionary
in its time.

00:01:58.016 --> 00:02:01.116 A:middle
And while it was revolutionary,
it was also very simple.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.016 --> 00:02:01.116 A:middle
And while it was revolutionary,
it was also very simple.

00:02:01.426 --> 00:02:03.276 A:middle
In fact, the argument
can be made

00:02:03.276 --> 00:02:05.756 A:middle
that this website was
accessible by default.

00:02:06.236 --> 00:02:10.216 A:middle
After all, it's just text-based
content, and it's rather trivial

00:02:10.216 --> 00:02:13.586 A:middle
to disseminate purely text-based
content to a screen reader.

00:02:14.536 --> 00:02:17.036 A:middle
But if you fast forward
to web applications today,

00:02:17.366 --> 00:02:19.666 A:middle
modern web applications
sometimes use completely

00:02:19.666 --> 00:02:20.606 A:middle
custom controls.

00:02:21.066 --> 00:02:23.026 A:middle
They have real-time
content and data coming

00:02:23.026 --> 00:02:24.036 A:middle
in and out of the page.

00:02:24.546 --> 00:02:26.576 A:middle
They use charts and graphs.

00:02:27.006 --> 00:02:29.246 A:middle
And most of this content
was initially designed

00:02:29.406 --> 00:02:30.956 A:middle
with only the mouse
user in mind.

00:02:31.666 --> 00:02:34.466 A:middle
But what if you don't
prefer using a mouse?

00:02:35.096 --> 00:02:36.786 A:middle
Or what if you can't
use a mouse due

00:02:36.786 --> 00:02:38.766 A:middle
to some dexterity
issue in your hands?

00:02:39.556 --> 00:02:43.116 A:middle
Well, in fact millions of people
every day use accessible web

00:02:43.116 --> 00:02:44.916 A:middle
applications, some of them

00:02:44.996 --> 00:02:47.656 A:middle
with only a single switch
using Switch Control software.

00:02:48.146 --> 00:02:51.696 A:middle
This lady can control an
entire iOS device as well

00:02:51.696 --> 00:02:55.616 A:middle
as your accessible web
applications using only the

00:02:55.616 --> 00:02:57.476 A:middle
single switch that's
mounted by her forehead.

00:02:58.006 --> 00:02:59.266 A:middle
It's absolutely incredible.

00:02:59.266 --> 00:03:02.946 A:middle
And accessibility
is a broad field


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.266 --> 00:03:02.946 A:middle
And accessibility
is a broad field

00:03:02.946 --> 00:03:04.806 A:middle
that means different
things to different people.

00:03:05.276 --> 00:03:08.676 A:middle
But in short, accessibility is
about supporting real people

00:03:08.676 --> 00:03:11.286 A:middle
with real needs, whatever
those needs may be.

00:03:11.666 --> 00:03:13.936 A:middle
And sometimes we do that
by providing an alternate

00:03:13.936 --> 00:03:17.156 A:middle
interaction model, such as a
keyboard or a switch control,

00:03:17.896 --> 00:03:20.636 A:middle
that's more appropriate given
the user's specific needs.

00:03:21.436 --> 00:03:25.036 A:middle
And as web engineers, it is our
most basic duty to make sure

00:03:25.036 --> 00:03:28.136 A:middle
that our web applications work
well with assistive technology.

00:03:29.426 --> 00:03:33.606 A:middle
That's true, and we do that by
handling the right JavaScript

00:03:33.606 --> 00:03:35.706 A:middle
events, by adding the
right markup in our code.

00:03:35.706 --> 00:03:37.896 A:middle
But what if we took
it a step further?

00:03:38.826 --> 00:03:41.816 A:middle
What if we designed our
applications so thoughtfully

00:03:42.186 --> 00:03:45.116 A:middle
that they would be useable by
everyone, regardless of whether

00:03:45.116 --> 00:03:46.256 A:middle
or not they had a disability?

00:03:47.346 --> 00:03:50.236 A:middle
The term "universal design"
deals with this specifically,

00:03:50.266 --> 00:03:51.996 A:middle
and the quintessential example

00:03:51.996 --> 00:03:53.996 A:middle
of universal design
is the curb cut.

00:03:55.296 --> 00:03:59.246 A:middle
This is now required by law,
and it's crucial for someone

00:03:59.246 --> 00:04:02.036 A:middle
who needs a wheelchair for
mobility, but it is just


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.246 --> 00:04:02.036 A:middle
who needs a wheelchair for
mobility, but it is just

00:04:02.036 --> 00:04:04.376 A:middle
as useful for someone
who is pushing a stroller

00:04:04.376 --> 00:04:06.876 A:middle
down the street, or
movers moving you

00:04:06.876 --> 00:04:07.946 A:middle
into your new apartment.

00:04:09.176 --> 00:04:10.246 A:middle
Another great example

00:04:10.246 --> 00:04:11.986 A:middle
of universal design
is closed captioning.

00:04:12.696 --> 00:04:16.036 A:middle
Here, we have a baseball game
and the announcer is talking

00:04:16.036 --> 00:04:18.356 A:middle
about this guy's swing -- which
looks beautiful by the way --

00:04:19.206 --> 00:04:20.726 A:middle
and we're using closed
captioning

00:04:20.726 --> 00:04:22.446 A:middle
to provide a text-based
alternative

00:04:22.446 --> 00:04:23.866 A:middle
for the audio track
in this movie.

00:04:24.706 --> 00:04:27.396 A:middle
This is absolutely vital for
someone who is hearing impaired

00:04:27.396 --> 00:04:30.516 A:middle
or deaf, but it is just
as useful in an airport

00:04:30.516 --> 00:04:33.346 A:middle
or a doctor's office or
somewhere else where sound needs

00:04:33.346 --> 00:04:36.476 A:middle
to be regulated and therefore
they may not have audio playing.

00:04:36.996 --> 00:04:40.956 A:middle
For web applications,
a great example

00:04:40.956 --> 00:04:43.516 A:middle
of universal design is
full keyboard access.

00:04:44.146 --> 00:04:47.206 A:middle
This is the idea that your
application should be usable

00:04:47.426 --> 00:04:48.566 A:middle
using only the keyboard.

00:04:49.376 --> 00:04:51.966 A:middle
If we take a look at the Pages
for iCloud user interface,

00:04:52.636 --> 00:04:56.076 A:middle
you'll see that when the user
hits the Tab key, focus is going

00:04:56.076 --> 00:04:57.916 A:middle
to go to the button at
the top of the page.

00:04:57.916 --> 00:05:00.616 A:middle
This is the Zoom popup
button, and you know this


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:57.916 --> 00:05:00.616 A:middle
This is the Zoom popup
button, and you know this

00:05:00.656 --> 00:05:02.786 A:middle
because of the blue outline
that appeared over the button.

00:05:02.846 --> 00:05:05.286 A:middle
And I've highlighted
that with that box.

00:05:06.256 --> 00:05:08.396 A:middle
Now, keyboard users
expect to be able

00:05:08.396 --> 00:05:10.786 A:middle
to select a button
using the Space bar

00:05:10.786 --> 00:05:12.006 A:middle
or sometimes the Return key.

00:05:12.376 --> 00:05:15.036 A:middle
So if the user hits the Space
bar to activate this button,

00:05:15.296 --> 00:05:17.106 A:middle
you'll see that the
menu is activated just

00:05:17.106 --> 00:05:18.686 A:middle
as if they had clicked
it with the mouse.

00:05:19.556 --> 00:05:22.156 A:middle
Then we can navigate the menu
with the Arrow keys and go

00:05:22.156 --> 00:05:24.216 A:middle
down to the 75 percent
Zoom level.

00:05:24.586 --> 00:05:28.806 A:middle
And when we get to the
75 percent Zoom level,

00:05:28.806 --> 00:05:30.896 A:middle
a keyboard user expects to be
able to press the Space bar

00:05:30.896 --> 00:05:32.656 A:middle
to activate and select
that menu item.

00:05:33.016 --> 00:05:35.456 A:middle
And so when they do that, you'll
see that the menu goes away,

00:05:35.456 --> 00:05:37.156 A:middle
just as if they had
clicked that with the mouse,

00:05:37.526 --> 00:05:40.526 A:middle
and the Zoom level of the
page obviously changes.

00:05:40.696 --> 00:05:42.686 A:middle
And then you'll notice
an important detail,

00:05:42.866 --> 00:05:44.876 A:middle
that we've set the
keyboard focus back

00:05:44.876 --> 00:05:46.236 A:middle
to the button that
opened the menu.

00:05:46.546 --> 00:05:49.236 A:middle
This small detail is very
important for keyboard users

00:05:49.236 --> 00:05:52.086 A:middle
to be able to save the context
to where they were at prior

00:05:52.086 --> 00:05:54.886 A:middle
to some interactive
element popping up onscreen.

00:05:55.226 --> 00:05:58.386 A:middle
And being able to interact with
the user interface of Pages

00:05:58.386 --> 00:06:01.606 A:middle
for iCloud in this way is
absolutely crucial for someone


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.386 --> 00:06:01.606 A:middle
for iCloud in this way is
absolutely crucial for someone

00:06:01.606 --> 00:06:03.316 A:middle
who has a dexterity
issue in their hand

00:06:03.316 --> 00:06:04.906 A:middle
and therefore they
cannot use a mouse.

00:06:05.626 --> 00:06:08.316 A:middle
But it is just as important
for someone who has a lot

00:06:08.316 --> 00:06:11.426 A:middle
of document editing to do in
perhaps a short amount of time

00:06:11.686 --> 00:06:13.696 A:middle
and they want to be as
efficient as possible.

00:06:15.126 --> 00:06:18.186 A:middle
While we're mostly
focused on the human aspect

00:06:18.186 --> 00:06:20.406 A:middle
of accessibility, it
is worth mentioning

00:06:20.406 --> 00:06:22.636 A:middle
that applying the
principals of universal design

00:06:22.636 --> 00:06:26.236 A:middle
and making your web applications
accessible will make them easier

00:06:26.236 --> 00:06:26.946 A:middle
to automate.

00:06:27.316 --> 00:06:29.816 A:middle
And automation has
numerous benefits for you

00:06:29.816 --> 00:06:30.746 A:middle
and your organization.

00:06:31.316 --> 00:06:34.236 A:middle
And for more information about
automation and how it relates

00:06:34.236 --> 00:06:37.656 A:middle
to accessibility, I've included
a link to a previous year's talk

00:06:37.796 --> 00:06:38.956 A:middle
at the end of this presentation.

00:06:39.476 --> 00:06:43.446 A:middle
So as you saw from
the previous examples,

00:06:43.826 --> 00:06:46.416 A:middle
the reasons for making your web
application accessible are not

00:06:46.416 --> 00:06:49.126 A:middle
limited to simply caring
for those with disabilities.

00:06:49.446 --> 00:06:51.686 A:middle
Rather, all users can
benefit from the work

00:06:51.686 --> 00:06:52.676 A:middle
that you do in this area.

00:06:53.396 --> 00:06:56.406 A:middle
But for the purposes of this
talk and our topic of web apps,

00:06:56.666 --> 00:06:58.806 A:middle
we're going to be focusing
specifically on users

00:06:58.806 --> 00:07:01.126 A:middle
with visual impairments
that may or may not be able


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.806 --> 00:07:01.126 A:middle
with visual impairments
that may or may not be able

00:07:01.126 --> 00:07:03.436 A:middle
to use our applications
without some sort

00:07:03.436 --> 00:07:05.616 A:middle
of assistive technology,
such as a screen reader

00:07:05.736 --> 00:07:06.706 A:middle
or braille device.

00:07:06.936 --> 00:07:10.046 A:middle
And in fact, that user
base is no small figure:

00:07:10.756 --> 00:07:14.736 A:middle
285 million people across the
world are visually impaired

00:07:14.736 --> 00:07:18.906 A:middle
worldwide, such that they
cannot read some or all

00:07:19.166 --> 00:07:21.486 A:middle
of the given content
of a given web page.

00:07:22.396 --> 00:07:26.156 A:middle
And out of that 285 million
people, 40 million people

00:07:26.156 --> 00:07:27.906 A:middle
across the world
are completely blind

00:07:28.266 --> 00:07:30.326 A:middle
and therefore require the
use of a screen reader

00:07:30.326 --> 00:07:32.666 A:middle
or braille device to
be able to benefit

00:07:32.666 --> 00:07:33.916 A:middle
from your web application.

00:07:34.806 --> 00:07:38.016 A:middle
So for more than 40 million
people around the world,

00:07:38.196 --> 00:07:40.976 A:middle
accessibility is not just
a nice-to-have feature;

00:07:40.976 --> 00:07:43.606 A:middle
it is a vital part
of their lives.

00:07:44.406 --> 00:07:46.986 A:middle
And for some, it is a
prerequisite from being able

00:07:46.986 --> 00:07:50.216 A:middle
to benefit from your application
or the hard work that you

00:07:50.216 --> 00:07:55.046 A:middle
and your teams have put into it.

00:07:55.306 --> 00:07:57.886 A:middle
So now that I've hopefully
sold you on the idea

00:07:57.886 --> 00:07:59.646 A:middle
of making your application
accessible,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.126 --> 00:08:03.136 A:middle
let's talk about some of the
web standards that are out there

00:08:03.136 --> 00:08:04.256 A:middle
to help you along the way.

00:08:04.316 --> 00:08:06.896 A:middle
And specifically, I
want to talk about the

00:08:06.896 --> 00:08:08.976 A:middle
"Web Content Accessibility
Guidelines,"

00:08:09.276 --> 00:08:11.206 A:middle
abbreviated WCAG for short.

00:08:12.296 --> 00:08:15.776 A:middle
Now, the WCAG document is quite
lengthy, but for the purposes

00:08:15.776 --> 00:08:19.296 A:middle
of this talk we can boil it
down to four basic principles,

00:08:19.716 --> 00:08:22.916 A:middle
which are: perceivable,
operable,

00:08:23.516 --> 00:08:25.916 A:middle
understandable, and robust.

00:08:26.326 --> 00:08:28.016 A:middle
And we're going to go
through the four of these

00:08:28.016 --> 00:08:29.986 A:middle
in more detail starting
with perceivable.

00:08:31.166 --> 00:08:34.326 A:middle
Perceivable basically means,
"Do I know it is there?"

00:08:35.166 --> 00:08:38.126 A:middle
In this, we're going back to
the closed captioned example.

00:08:38.126 --> 00:08:42.176 A:middle
In this example we have, you
know, some text-based content

00:08:42.226 --> 00:08:45.126 A:middle
that is an alternative for
the audio track in a movie.

00:08:45.126 --> 00:08:47.616 A:middle
And this is just one example.

00:08:48.106 --> 00:08:50.436 A:middle
In fact, having text-based
descriptions

00:08:50.436 --> 00:08:52.616 A:middle
for non-textual content is one

00:08:52.616 --> 00:08:55.126 A:middle
of the most common accessibility
issues on the web today,

00:08:55.346 --> 00:08:57.536 A:middle
specifically for web
applications because we

00:08:57.536 --> 00:09:00.006 A:middle
like to use buttons
with beautiful icons.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:57.536 --> 00:09:00.006 A:middle
like to use buttons
with beautiful icons.

00:09:00.226 --> 00:09:02.426 A:middle
And we oftentimes
forget to add the labels

00:09:02.426 --> 00:09:03.726 A:middle
for these buttons
into the markup.

00:09:05.546 --> 00:09:08.716 A:middle
Operable means, "Can I use it?"

00:09:10.056 --> 00:09:12.376 A:middle
This goes back to our full
keyboard access example.

00:09:12.796 --> 00:09:16.086 A:middle
Simply put, if you can navigate
to an element with the mouse

00:09:16.086 --> 00:09:18.606 A:middle
and perform some action on
that element with the mouse,

00:09:18.996 --> 00:09:20.496 A:middle
you should be able to
get to that element

00:09:20.496 --> 00:09:23.236 A:middle
and perform the very same
action using the keyboard alone.

00:09:23.596 --> 00:09:25.636 A:middle
Now, this can be
tricky at times,

00:09:25.636 --> 00:09:28.636 A:middle
especially if you're using
custom controls, but we're going

00:09:28.636 --> 00:09:30.696 A:middle
to discuss a common
approach in the demo later

00:09:30.696 --> 00:09:32.576 A:middle
on that you can take
back and use

00:09:32.576 --> 00:09:34.026 A:middle
in your own web applications.

00:09:35.616 --> 00:09:37.996 A:middle
Understandable should
be fairly obvious:

00:09:38.986 --> 00:09:41.856 A:middle
Does your website's
content make sense?

00:09:42.226 --> 00:09:44.116 A:middle
Does it perform in
predictable ways?

00:09:44.216 --> 00:09:46.716 A:middle
An example of this
would be a segmented

00:09:46.716 --> 00:09:49.186 A:middle
or [inaudible] control, such
as the one found in the Keynote

00:09:49.186 --> 00:09:50.386 A:middle
for iCloud Theme Chooser.

00:09:50.926 --> 00:09:55.786 A:middle
Now, this control might be
perceivable and operable

00:09:55.786 --> 00:09:59.086 A:middle
to a screen reader user, but
unless it's marked up correctly,

00:09:59.326 --> 00:10:01.156 A:middle
the user, when they
land on this control,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.326 --> 00:10:01.156 A:middle
the user, when they
land on this control,

00:10:01.336 --> 00:10:02.906 A:middle
might hear something like this.

00:10:06.006 --> 00:10:08.016 A:middle
&gt;&gt; Standard, wide.

00:10:08.806 --> 00:10:12.166 A:middle
&gt;&gt; So voiceover on the Mac
said, "Standard, wide."

00:10:12.866 --> 00:10:14.786 A:middle
That doesn't tell them
all of the information

00:10:14.786 --> 00:10:17.566 A:middle
that a sighted user sees, in
that there are two buttons

00:10:17.566 --> 00:10:19.876 A:middle
on this page, they are
mutually exclusive,

00:10:20.036 --> 00:10:21.246 A:middle
and one of them is selected.

00:10:22.056 --> 00:10:25.026 A:middle
Instead, a better experience
would be to mark up this element

00:10:25.026 --> 00:10:27.516 A:middle
in such a way that the
user hears something

00:10:27.516 --> 00:10:28.556 A:middle
like this instead.

00:10:30.026 --> 00:10:34.486 A:middle
&gt;&gt; Standard, selected tab, one
of two, wide tab two of two.

00:10:34.856 --> 00:10:39.066 A:middle
&gt;&gt; So, again, voiceover said,
"Standard, selected tab,

00:10:39.286 --> 00:10:42.166 A:middle
one of two, wide
tab two of two,"

00:10:42.466 --> 00:10:44.866 A:middle
which tells the user everything
that the sighted user sees

00:10:44.866 --> 00:10:45.966 A:middle
when they look at this control

00:10:46.146 --> 00:10:48.486 A:middle
and is a much better
experience for a voiceover user.

00:10:50.596 --> 00:10:52.796 A:middle
Now, robust is a bit
more complicated,

00:10:52.796 --> 00:10:55.076 A:middle
and we can really divide it
up into two different parts.

00:10:55.576 --> 00:10:58.036 A:middle
The first part of robust
is simply making sure

00:10:58.036 --> 00:10:59.896 A:middle
that your markup is
semantic and correct,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.366 --> 00:11:03.496 A:middle
such that it is displayed
correctly across user agents

00:11:03.776 --> 00:11:06.666 A:middle
and is more resilient to the
change in technology around it.

00:11:07.726 --> 00:11:10.666 A:middle
The second part of robust
is having alternatives

00:11:10.666 --> 00:11:12.056 A:middle
for the presentation
of your content.

00:11:12.746 --> 00:11:15.506 A:middle
So a good example of this
would be iCloud in general,

00:11:15.506 --> 00:11:18.046 A:middle
but let's look at
specifically Pages for iCloud.

00:11:18.336 --> 00:11:21.866 A:middle
If you're editing a document
in Pages and you discover a bug

00:11:22.136 --> 00:11:24.666 A:middle
that prevents you from being
able to access your content,

00:11:25.216 --> 00:11:28.086 A:middle
you could simply open this
document in either the OS X

00:11:28.346 --> 00:11:31.486 A:middle
or the iOS applications and
use the built-in accessibility

00:11:31.486 --> 00:11:32.166 A:middle
support there.

00:11:33.136 --> 00:11:36.016 A:middle
Another great example of
having robust content would be

00:11:36.126 --> 00:11:40.806 A:middle
exporting your data through some
sort of feed, like RSS or Atom.

00:11:40.806 --> 00:11:43.236 A:middle
And this allows the
user to use any number

00:11:43.236 --> 00:11:46.006 A:middle
of accessible applications to
be able to consume your content.

00:11:46.916 --> 00:11:48.576 A:middle
And in other words, no one bug

00:11:48.576 --> 00:11:51.486 A:middle
or issue should completely
prevent users from being able

00:11:51.486 --> 00:11:52.566 A:middle
to access your content.

00:11:52.566 --> 00:11:54.706 A:middle
Now, it's worth mentioning

00:11:54.706 --> 00:11:57.676 A:middle
that having robust content
is not mutually exclusive

00:11:57.676 --> 00:11:59.046 A:middle
with having accessible content.

00:11:59.656 --> 00:12:01.276 A:middle
They are meant to
complement each other


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.656 --> 00:12:01.276 A:middle
They are meant to
complement each other

00:12:01.346 --> 00:12:04.326 A:middle
and give your users options
should they encounter issues.

00:12:04.856 --> 00:12:12.316 A:middle
So as we just saw, your content
should be perceivable, operable,

00:12:12.316 --> 00:12:13.916 A:middle
understandable, and robust.

00:12:14.496 --> 00:12:17.226 A:middle
Now I want to get a bit more
tactical and talk about some

00:12:17.226 --> 00:12:19.316 A:middle
of the ways you actually
accomplish these things,

00:12:19.656 --> 00:12:21.196 A:middle
starting with semantic markup.

00:12:23.596 --> 00:12:26.686 A:middle
So using semantic markup is one
of the first things you can do

00:12:26.686 --> 00:12:28.946 A:middle
to help improve your web
applications' accessibility.

00:12:29.666 --> 00:12:32.266 A:middle
Here are two screenshots
of the very same web page.

00:12:32.746 --> 00:12:36.146 A:middle
The screenshot on the left was
implemented using only div tags

00:12:36.146 --> 00:12:37.706 A:middle
for the headings that
you see on the screen.

00:12:38.796 --> 00:12:41.626 A:middle
The screenshot on the right was
implemented using semantic h1

00:12:41.626 --> 00:12:44.186 A:middle
tags for the headings that
you see on the screen.

00:12:45.346 --> 00:12:48.706 A:middle
Now, to a sighted user, these
two web pages are going to look

00:12:48.706 --> 00:12:50.336 A:middle
and perform in identical ways.

00:12:50.576 --> 00:12:53.136 A:middle
In fact, the sighted user is not
going to be able to know at all

00:12:53.266 --> 00:12:55.586 A:middle
that they were implemented
one way or the other.

00:12:56.176 --> 00:12:58.116 A:middle
But to a user of
assistive technology,

00:12:58.116 --> 00:13:00.266 A:middle
these two pages are going
to appear and they're going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.116 --> 00:13:00.266 A:middle
these two pages are going
to appear and they're going

00:13:00.266 --> 00:13:02.016 A:middle
to perform in completely
different ways.

00:13:02.446 --> 00:13:04.246 A:middle
And to find out why,
let's take a look

00:13:04.246 --> 00:13:05.496 A:middle
at the markup behind the scenes.

00:13:06.036 --> 00:13:11.086 A:middle
As I said, the image on the left
was implemented using only a

00:13:11.086 --> 00:13:11.766 A:middle
div tag.

00:13:11.766 --> 00:13:14.226 A:middle
And, in fact, the style
was actually inlined

00:13:14.226 --> 00:13:15.196 A:middle
in the tag itself.

00:13:15.826 --> 00:13:17.606 A:middle
Now, an assistive
technology user,

00:13:17.606 --> 00:13:20.536 A:middle
specifically a screen reader
user, is going to hear this

00:13:20.536 --> 00:13:21.636 A:middle
when they land on this heading.

00:13:23.046 --> 00:13:23.776 A:middle
&gt;&gt; All about widgets.

00:13:24.446 --> 00:13:27.096 A:middle
&gt;&gt; So voiceover said,
"All about widgets."

00:13:27.606 --> 00:13:28.846 A:middle
And you could argue, "Yeah,

00:13:28.846 --> 00:13:30.836 A:middle
so they got the content
of that heading."

00:13:31.276 --> 00:13:33.656 A:middle
But there's really no
semantic information

00:13:33.656 --> 00:13:34.536 A:middle
that is conveyed here.

00:13:34.596 --> 00:13:36.766 A:middle
And we're especially not
conveying the same information

00:13:36.766 --> 00:13:39.466 A:middle
that a sighted user sees
in that this is a heading.

00:13:39.756 --> 00:13:42.476 A:middle
And in fact it's one of the most
prominent headings on the page.

00:13:43.156 --> 00:13:45.486 A:middle
So this is obviously not the
best experience for the user.

00:13:46.476 --> 00:13:49.606 A:middle
Instead, if we were to
use a semantic h1 tag,

00:13:50.206 --> 00:13:53.206 A:middle
the user using a screen reader
would hear this instead.

00:13:54.636 --> 00:13:56.456 A:middle
&gt;&gt; Heading level 1,
all about widgets.

00:13:57.416 --> 00:13:58.216 A:middle
&gt;&gt; So the voiceover said,

00:13:58.216 --> 00:14:00.656 A:middle
"Heading level 1,
all about widgets."


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.216 --> 00:14:00.656 A:middle
"Heading level 1,
all about widgets."

00:14:01.116 --> 00:14:03.396 A:middle
That conveys way more
information to the user

00:14:03.566 --> 00:14:06.046 A:middle
and is obviously exactly
what the sighted user sees.

00:14:06.266 --> 00:14:07.996 A:middle
So this is a much
better experience.

00:14:08.716 --> 00:14:10.056 A:middle
It's also worth noting

00:14:10.176 --> 00:14:12.396 A:middle
that screen readers
oftentimes allow a user

00:14:12.396 --> 00:14:14.396 A:middle
to navigate the page
heading by heading.

00:14:14.946 --> 00:14:18.106 A:middle
And so using a semantic
h1 tag allows them

00:14:18.106 --> 00:14:21.416 A:middle
to quickly find their content,
especially on long pages.

00:14:21.466 --> 00:14:23.756 A:middle
And so that's also a better
experience for a user.

00:14:24.286 --> 00:14:29.346 A:middle
Now, next up is using
standard controls.

00:14:29.686 --> 00:14:32.436 A:middle
And using standard controls
wherever possible will not only

00:14:32.436 --> 00:14:35.506 A:middle
make the experience better for
users of assistive technology

00:14:35.926 --> 00:14:37.936 A:middle
because the controls
will be more consistent

00:14:37.936 --> 00:14:39.506 A:middle
with what they're used
to on their system,

00:14:40.136 --> 00:14:42.106 A:middle
but it also saves
you a lot of work

00:14:42.106 --> 00:14:44.176 A:middle
in making them usable
and accessible.

00:14:45.306 --> 00:14:47.696 A:middle
Say for instance you wanted
to create a custom slider.

00:14:48.236 --> 00:14:50.226 A:middle
This is the markup that
you might actually use,

00:14:50.466 --> 00:14:52.396 A:middle
and with some CSS magic,

00:14:52.436 --> 00:14:54.216 A:middle
that might be the actual
look of the control.

00:14:55.456 --> 00:14:56.806 A:middle
Now, let's say you wanted

00:14:56.806 --> 00:14:58.446 A:middle
to make this control
work with the mouse.

00:14:58.856 --> 00:15:01.756 A:middle
So you would have to handle
several mouse events in order


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.856 --> 00:15:01.756 A:middle
So you would have to handle
several mouse events in order

00:15:01.756 --> 00:15:05.406 A:middle
to make that happen:
mouse down to be able

00:15:05.406 --> 00:15:06.466 A:middle
to start tracking the mouse,

00:15:06.786 --> 00:15:08.956 A:middle
mouse move to update the
control, and mouse end

00:15:09.256 --> 00:15:11.476 A:middle
to finally commit that
value back to the model.

00:15:11.856 --> 00:15:14.276 A:middle
Now let's say you wanted to make
it work with a touch device.

00:15:14.676 --> 00:15:17.046 A:middle
So in that case you would have
to handle similar methods,

00:15:18.146 --> 00:15:20.066 A:middle
except you have this
added complexity

00:15:20.286 --> 00:15:23.606 A:middle
that a touch can be cancelled
if you drag it off of the screen

00:15:23.606 --> 00:15:24.736 A:middle
or up to the browser chrome.

00:15:24.736 --> 00:15:25.866 A:middle
And so you have to
account for that.

00:15:27.086 --> 00:15:29.776 A:middle
You can begin to understand
or think about the kind

00:15:29.776 --> 00:15:31.496 A:middle
of state machine that you're
going to need to be able

00:15:31.496 --> 00:15:32.656 A:middle
to keep track of this control.

00:15:32.656 --> 00:15:35.926 A:middle
Now, so, that's the mouse
and that's touch devices,

00:15:35.926 --> 00:15:37.096 A:middle
but let's say you
wanted to make this work

00:15:37.096 --> 00:15:38.236 A:middle
with the keyboard,
as you should.

00:15:39.066 --> 00:15:40.256 A:middle
So let's scroll everything up

00:15:40.256 --> 00:15:42.196 A:middle
and let's implement
our keyboard methods.

00:15:43.166 --> 00:15:44.936 A:middle
We're going to handle focus

00:15:44.936 --> 00:15:47.396 A:middle
so that we can update the
visual style of the control

00:15:47.696 --> 00:15:50.476 A:middle
when the control gains
keyboard focus to show the user

00:15:50.476 --> 00:15:52.136 A:middle
that they can begin
interacting with it.

00:15:52.506 --> 00:15:54.716 A:middle
Then we have to handle
blur so that we can remove

00:15:54.716 --> 00:15:56.796 A:middle
that visual style when
focus goes elsewhere.

00:15:56.796 --> 00:15:59.786 A:middle
And then we have to handle key
down so that we can respond

00:15:59.786 --> 00:16:03.366 A:middle
to Arrow keys, Home,
and Page Up, Page Down,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.786 --> 00:16:03.366 A:middle
to Arrow keys, Home,
and Page Up, Page Down,

00:16:03.366 --> 00:16:05.786 A:middle
all of the different key
combinations that a user

00:16:05.786 --> 00:16:07.176 A:middle
of the keyboard would
expect to be able

00:16:07.176 --> 00:16:08.866 A:middle
to modify the value
of that slider.

00:16:09.966 --> 00:16:13.126 A:middle
This is a lot of work, and you
should avoid it wherever you can

00:16:13.126 --> 00:16:14.516 A:middle
by using standard controls.

00:16:15.306 --> 00:16:18.686 A:middle
The example here would be using
a native input range control,

00:16:19.076 --> 00:16:21.236 A:middle
giving it a minimum
and a maximum value

00:16:21.506 --> 00:16:22.706 A:middle
as well as the current value.

00:16:22.706 --> 00:16:25.966 A:middle
If you do this, the browser
is going to handle everything

00:16:25.966 --> 00:16:28.926 A:middle
for you from mouse events
to touch events, keyboard,

00:16:28.926 --> 00:16:32.186 A:middle
it's going to handle state
tracking, observer notification,

00:16:32.426 --> 00:16:34.786 A:middle
and you're going to get
accessibility out of the box.

00:16:34.876 --> 00:16:36.486 A:middle
So you literally have
to do nothing else

00:16:36.486 --> 00:16:39.156 A:middle
to make this control work if
you just use a standard control.

00:16:40.426 --> 00:16:42.716 A:middle
But you and I both know

00:16:43.056 --> 00:16:45.326 A:middle
that HTML controls can
be difficult to style.

00:16:45.706 --> 00:16:46.916 A:middle
I mean, they're getting better,

00:16:47.166 --> 00:16:48.596 A:middle
but they're still
not quite there.

00:16:49.236 --> 00:16:53.466 A:middle
And so if you couple that fact
with a really great designer

00:16:53.466 --> 00:16:55.806 A:middle
who just handed you a
really beautiful visual spec

00:16:55.966 --> 00:16:58.766 A:middle
for a slider, you're probably
going to have to role your own.

00:16:59.266 --> 00:17:01.616 A:middle
And so let's go back to our
custom slider control and talk


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.266 --> 00:17:01.616 A:middle
And so let's go back to our
custom slider control and talk

00:17:01.616 --> 00:17:03.446 A:middle
about how you can make
it more accessible.

00:17:04.006 --> 00:17:06.976 A:middle
So this is the markup
that we used,

00:17:06.976 --> 00:17:08.766 A:middle
and we implemented
these JavaScript events.

00:17:09.396 --> 00:17:11.945 A:middle
But you may be surprised to know

00:17:11.945 --> 00:17:14.205 A:middle
that this control is absolutely
inaccessible for someone

00:17:14.205 --> 00:17:16.286 A:middle
who is using a screen
reader or a braille device.

00:17:16.286 --> 00:17:19.606 A:middle
After all, there's nothing in
this markup that tells the user

00:17:19.606 --> 00:17:23.036 A:middle
that this is a slider at all,
much less its current state

00:17:23.106 --> 00:17:27.136 A:middle
with a minimum and maximum value
as well as a current value.

00:17:27.205 --> 00:17:30.486 A:middle
And what's worse is that HTML
doesn't really give us any

00:17:30.486 --> 00:17:33.966 A:middle
ability to be able to tell
the user this information.

00:17:34.496 --> 00:17:35.816 A:middle
So we need something else.

00:17:36.116 --> 00:17:38.396 A:middle
And that's where ARIA comes in.

00:17:38.776 --> 00:17:41.856 A:middle
ARIA stands for Accessible
Rich Internet Applications.

00:17:42.166 --> 00:17:45.086 A:middle
And it was specifically
designed to help bridge this gap

00:17:45.426 --> 00:17:48.026 A:middle
between HTML and
assistive technology

00:17:48.816 --> 00:17:51.156 A:middle
by defining additional
properties that allow us

00:17:51.156 --> 00:17:54.576 A:middle
to describe what an element is
as well as its current state.

00:17:55.426 --> 00:17:58.946 A:middle
So going back to our custom
slider, ARIA allows us

00:17:58.946 --> 00:18:01.776 A:middle
to give this div tag
a role of slider.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.946 --> 00:18:01.776 A:middle
to give this div tag
a role of slider.

00:18:02.826 --> 00:18:04.916 A:middle
Now, it's worth mentioning
that ARIA defines

00:18:04.916 --> 00:18:07.536 A:middle
over 50 different
roles that you can give

00:18:07.536 --> 00:18:10.176 A:middle
in many different
situations in your markup,

00:18:10.556 --> 00:18:12.356 A:middle
but for this one we're
going to use slider.

00:18:12.356 --> 00:18:16.346 A:middle
And for any given role,
ARIA also specifies a list

00:18:16.456 --> 00:18:19.036 A:middle
of properties and
attributes that you can use

00:18:19.306 --> 00:18:22.276 A:middle
to describe what the control is
as well as its current state.

00:18:22.566 --> 00:18:25.216 A:middle
So in the case of a slider,
we need to tell the user

00:18:25.216 --> 00:18:28.796 A:middle
about the minimum value and the
maximum value using ARIA Value

00:18:28.796 --> 00:18:30.966 A:middle
Min and ARIA Value
Max, respectively.

00:18:31.756 --> 00:18:34.246 A:middle
We also need to tell the user
what the current value is,

00:18:34.426 --> 00:18:36.136 A:middle
so we'll add ARIA Value Now.

00:18:37.626 --> 00:18:40.766 A:middle
It's worth mentioning that
while we had to handle all

00:18:40.766 --> 00:18:43.006 A:middle
of the JavaScript events
manually, we also have

00:18:43.006 --> 00:18:45.786 A:middle
to handle updating
ARIA Value Now

00:18:45.786 --> 00:18:48.216 A:middle
when the slider's value changes,
so that's yet another thing

00:18:48.216 --> 00:18:51.126 A:middle
that you have to keep track of
if you're using custom controls.

00:18:51.736 --> 00:18:55.546 A:middle
But ARIA has now allowed us to
give the semantic equivalent

00:18:55.846 --> 00:18:58.766 A:middle
of a slider using just a
little bit more markup.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:01.136 --> 00:19:04.576 A:middle
Now, ARIA is not just for
creating custom controls.

00:19:04.886 --> 00:19:07.126 A:middle
You can also use it to
retrofit old content

00:19:07.126 --> 00:19:08.466 A:middle
without actually
having to gut it.

00:19:09.146 --> 00:19:10.876 A:middle
So going back to our
headings example,

00:19:11.086 --> 00:19:13.166 A:middle
let's say that it was too
risky for you to be able

00:19:13.166 --> 00:19:16.996 A:middle
to change your code to spit out
an h1 tag instead of a div tag.

00:19:17.366 --> 00:19:21.396 A:middle
In that case, we could apply
an ARIA role of Heading as well

00:19:21.396 --> 00:19:23.256 A:middle
as ARIA Level 1 to be able

00:19:23.256 --> 00:19:26.896 A:middle
to give this tag the semantic
equivalent of h1 as far

00:19:26.896 --> 00:19:28.436 A:middle
as assistive technology
is concerned.

00:19:29.086 --> 00:19:30.856 A:middle
Now, obviously for other
reasons, it would be better

00:19:30.856 --> 00:19:31.616 A:middle
for us to use an h1 tag,

00:19:31.616 --> 00:19:34.656 A:middle
but this gives you an option
should that not be possible.

00:19:35.726 --> 00:19:38.746 A:middle
Conversely, let's say that
you were using an h1 tag

00:19:39.236 --> 00:19:42.116 A:middle
and for whatever reason this is
not a heading; it was just used

00:19:42.116 --> 00:19:44.726 A:middle
for styling or whatever
else you might use it for.

00:19:45.386 --> 00:19:47.806 A:middle
ARIA has this idea
of implicit roles.

00:19:48.076 --> 00:19:51.306 A:middle
And so an h1 tag would
automatically get a role

00:19:51.306 --> 00:19:53.976 A:middle
of Heading in an ARIA level
of 1, so you wouldn't need

00:19:53.976 --> 00:19:55.496 A:middle
to specify it in that case.

00:19:55.996 --> 00:19:58.746 A:middle
But if you were using an h1 tag
where you didn't want to convey

00:19:58.746 --> 00:20:02.126 A:middle
that semantic meaning, you could
give it a role of Presentation,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.746 --> 00:20:02.126 A:middle
that semantic meaning, you could
give it a role of Presentation,

00:20:02.646 --> 00:20:05.996 A:middle
which would basically strip all
of the semantic information away

00:20:05.996 --> 00:20:08.826 A:middle
from this tag from
assistive technology

00:20:08.826 --> 00:20:11.106 A:middle
and give it the equivalent of
being just a plain div tag.

00:20:11.886 --> 00:20:15.466 A:middle
So that can be useful in time.

00:20:15.636 --> 00:20:17.046 A:middle
Next up is focus management.

00:20:17.596 --> 00:20:19.816 A:middle
Now, ARIA allows you
to mark up your content

00:20:19.816 --> 00:20:21.716 A:middle
to be both perceivable
and understandable,

00:20:22.006 --> 00:20:24.726 A:middle
while keyboard accessibility is
important to making it operable.

00:20:25.306 --> 00:20:28.676 A:middle
But another important aspect of
operability is focus management.

00:20:29.466 --> 00:20:31.456 A:middle
And if you're using
custom controls,

00:20:31.766 --> 00:20:34.346 A:middle
like interactive elements and
menus, you're going to need

00:20:34.346 --> 00:20:36.586 A:middle
to handle the focus
management portion yourself.

00:20:37.026 --> 00:20:39.156 A:middle
And you do that using tabindex.

00:20:40.416 --> 00:20:43.816 A:middle
So HTML's tabindex
property controls,

00:20:44.286 --> 00:20:45.996 A:middle
or basically allows
you to specify

00:20:45.996 --> 00:20:48.136 A:middle
which elements can
gain keyboard focus,

00:20:48.496 --> 00:20:50.656 A:middle
either by the user tabbing
to it with the keyboard

00:20:51.136 --> 00:20:52.736 A:middle
or manually using JavaScript.

00:20:52.736 --> 00:20:59.836 A:middle
And a tabindex of 0 means
that an element is focusable

00:20:59.936 --> 00:21:02.936 A:middle
with JavaScript and it is
in the default tab order.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.936 --> 00:21:02.936 A:middle
with JavaScript and it is
in the default tab order.

00:21:03.186 --> 00:21:05.576 A:middle
In other words, a user can
get to it simply by tabbing

00:21:05.576 --> 00:21:06.416 A:middle
to it with the keyboard.

00:21:07.296 --> 00:21:10.416 A:middle
A tabindex of negative 1 means
that an element is focusable

00:21:10.516 --> 00:21:13.436 A:middle
with JavaScript, but it is
not in the default tab order.

00:21:13.816 --> 00:21:15.166 A:middle
In other words, the
user can't get

00:21:15.166 --> 00:21:16.566 A:middle
to it simply by tabbing to it.

00:21:16.566 --> 00:21:20.096 A:middle
And then finally,
leaving tabindex off

00:21:20.096 --> 00:21:22.746 A:middle
of your control will mean
that the element is not going

00:21:22.746 --> 00:21:26.056 A:middle
to get keyboard focus,
either by calling focus on it

00:21:26.056 --> 00:21:29.156 A:middle
with JavaScript or by the user
tabbing to it with the keyboard.

00:21:29.306 --> 00:21:32.596 A:middle
In fact, some older user agents
will actually throw a JavaScript

00:21:32.596 --> 00:21:34.636 A:middle
error if you try to
call focus on an element

00:21:34.866 --> 00:21:35.776 A:middle
that is not focusable.

00:21:36.236 --> 00:21:39.026 A:middle
Now, there's a big asterisk
there because native controls,

00:21:39.026 --> 00:21:41.706 A:middle
like links, and buttons,
and form elements,

00:21:41.796 --> 00:21:44.156 A:middle
all get an implicit
tabindex of 0.

00:21:44.376 --> 00:21:47.086 A:middle
And so you don't need to specify
it for those kinds of controls.

00:21:47.496 --> 00:21:51.906 A:middle
Now, for an example of how
to use tabindex properly

00:21:52.186 --> 00:21:54.006 A:middle
to achieve great
focus management,

00:21:54.556 --> 00:21:57.326 A:middle
let's look at a common
setup in web applications

00:21:57.526 --> 00:22:00.456 A:middle
where you have some focusable
content at the top of the page,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.526 --> 00:22:00.456 A:middle
where you have some focusable
content at the top of the page,

00:22:00.716 --> 00:22:02.156 A:middle
then you have a list of items,

00:22:02.156 --> 00:22:03.836 A:middle
and then you have
some focusable content

00:22:03.836 --> 00:22:04.896 A:middle
at the bottom of the page.

00:22:05.616 --> 00:22:07.996 A:middle
Now, if the user hits
the Tab key on this page,

00:22:08.206 --> 00:22:10.006 A:middle
you can see that focus is
going to go to the link

00:22:10.006 --> 00:22:12.096 A:middle
at the top because,
as you remember,

00:22:12.366 --> 00:22:13.976 A:middle
it has a tabindex of 0.

00:22:13.976 --> 00:22:16.876 A:middle
And the tab order
follows the DOM order.

00:22:16.876 --> 00:22:20.006 A:middle
And so this is the first element
in the DOM with a tabindex of 0.

00:22:20.966 --> 00:22:23.626 A:middle
If they hit the Tab key
again, focus will go

00:22:23.626 --> 00:22:24.716 A:middle
to the link at the bottom.

00:22:25.256 --> 00:22:29.806 A:middle
And this is because none of
the menu items have a tabindex

00:22:29.806 --> 00:22:31.206 A:middle
and they're just plain divs.

00:22:32.986 --> 00:22:34.216 A:middle
Now, let's say you wanted

00:22:34.216 --> 00:22:37.436 A:middle
to make these menu items
accessible with the keyboard.

00:22:37.956 --> 00:22:40.046 A:middle
You could simply
add a tabindex of 0

00:22:40.046 --> 00:22:41.556 A:middle
to each one of these menu items.

00:22:42.496 --> 00:22:44.896 A:middle
But you can imagine if
this menu were quite long,

00:22:44.896 --> 00:22:47.286 A:middle
it would be very frustrating
for the user to have to tab

00:22:47.286 --> 00:22:49.506 A:middle
through each and every
item in the menu to get

00:22:49.506 --> 00:22:51.526 A:middle
to the focusable
content at the bottom.

00:22:51.776 --> 00:22:53.606 A:middle
So a better experience would be

00:22:53.606 --> 00:22:57.736 A:middle
to only expose the currently
selected item in the tab order.

00:22:57.786 --> 00:23:00.946 A:middle
And we do that by giving
every other element a tabindex


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:57.786 --> 00:23:00.946 A:middle
And we do that by giving
every other element a tabindex

00:23:00.946 --> 00:23:01.696 A:middle
of negative 1.

00:23:02.486 --> 00:23:04.286 A:middle
So now the behavior
is like this:

00:23:04.696 --> 00:23:06.946 A:middle
If the user hits the Tab
key, focus is going to go

00:23:06.946 --> 00:23:09.756 A:middle
to the first element in the
DOM that has a tabindex of 0,

00:23:10.746 --> 00:23:12.656 A:middle
then it's going to go to
the next element in the DOM

00:23:12.656 --> 00:23:13.926 A:middle
that has a tabindex of 0.

00:23:14.166 --> 00:23:18.496 A:middle
In this case, it's going to be
the selected item in the list.

00:23:18.496 --> 00:23:22.566 A:middle
And then, if they navigate
this list using the Arrow keys,

00:23:22.756 --> 00:23:25.226 A:middle
you can see that we
are moving tabindex 0

00:23:25.226 --> 00:23:28.176 A:middle
to the currently selected
item each time and making sure

00:23:28.176 --> 00:23:30.776 A:middle
that all of the nonselected
items have a tabindex

00:23:30.776 --> 00:23:31.486 A:middle
of negative 1.

00:23:31.996 --> 00:23:34.726 A:middle
This is called the
Roaming TabIndex Technique.

00:23:34.726 --> 00:23:38.436 A:middle
Now if the user hits the
Tab key, they're going

00:23:38.436 --> 00:23:40.976 A:middle
to leave the list and skip
over all of the elements

00:23:40.976 --> 00:23:43.996 A:middle
with a tabindex of negative
1 and go to the next element

00:23:43.996 --> 00:23:45.996 A:middle
that has a tabindex of
0, which is the link

00:23:45.996 --> 00:23:47.046 A:middle
at the bottom of the page.

00:23:48.566 --> 00:23:50.186 A:middle
This has the added benefit

00:23:50.186 --> 00:23:52.866 A:middle
of saving the user's selected
state, so if they were

00:23:52.866 --> 00:23:54.996 A:middle
to Shift-Tab from this
link at the bottom,

00:23:55.386 --> 00:23:58.806 A:middle
they would go directly back to
the currently selected menu item

00:23:58.806 --> 00:24:01.256 A:middle
in the list, which is a
really great experience


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.806 --> 00:24:01.256 A:middle
in the list, which is a
really great experience

00:24:01.256 --> 00:24:02.196 A:middle
for keyboard users.

00:24:02.616 --> 00:24:05.876 A:middle
Now, they only have to hit
Tab twice to get all the way

00:24:05.876 --> 00:24:08.186 A:middle
to the bottom of the page to
find what they're looking for.

00:24:10.856 --> 00:24:13.446 A:middle
So to recap a bit, we've talked

00:24:13.446 --> 00:24:16.396 A:middle
about how content should
be perceivable, operable,

00:24:16.566 --> 00:24:18.386 A:middle
understandable, and robust.

00:24:18.996 --> 00:24:21.276 A:middle
And we talked about how
using semantic markup

00:24:21.276 --> 00:24:23.696 A:middle
and standard controls will
get us most of the way there.

00:24:24.276 --> 00:24:27.776 A:middle
We also talked about how you
can use ARIA to fill the gaps

00:24:27.826 --> 00:24:29.156 A:middle
and make our custom controls

00:24:29.156 --> 00:24:31.996 A:middle
and old content more
accessible and understandable.

00:24:32.976 --> 00:24:35.236 A:middle
And we talked about how to
use proper focus management

00:24:35.236 --> 00:24:37.326 A:middle
and keyboard accessibility
to really clean

00:24:37.326 --> 00:24:38.536 A:middle
up the user experience.

00:24:39.476 --> 00:24:42.286 A:middle
But now we're going to apply all
of that knowledge to diagnose

00:24:42.286 --> 00:24:45.596 A:middle
and fix several accessibility
issues and usability issues

00:24:45.926 --> 00:24:48.276 A:middle
in a text editing application
that I built for this talk.

00:24:49.396 --> 00:24:52.606 A:middle
So here we have a text
editor that I created.

00:24:52.656 --> 00:24:56.576 A:middle
And if you look at it and kind
of click around with the mouse,

00:24:56.576 --> 00:24:57.886 A:middle
you can see that we can zoom.

00:24:57.956 --> 00:25:00.816 A:middle
This is very similar to the
Pages for iCloud user interface


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.956 --> 00:25:00.816 A:middle
This is very similar to the
Pages for iCloud user interface

00:25:00.816 --> 00:25:01.796 A:middle
that we looked at earlier.

00:25:02.406 --> 00:25:04.826 A:middle
We can also go in here

00:25:04.826 --> 00:25:07.246 A:middle
and we can add text;
we can remove text.

00:25:07.366 --> 00:25:11.726 A:middle
So to a mouse user and to a
visual user, this thing works,

00:25:11.726 --> 00:25:14.186 A:middle
and you wouldn't even know that
it is completely inaccessible.

00:25:15.086 --> 00:25:17.816 A:middle
Now, when you approach an
application and you start

00:25:17.816 --> 00:25:20.266 A:middle
to look at how to make it
accessible, I like to divide it

00:25:20.266 --> 00:25:21.476 A:middle
up into two different parts.

00:25:22.016 --> 00:25:24.166 A:middle
The first part is the
keyboard accessibility part.

00:25:24.216 --> 00:25:27.186 A:middle
Get it working with the keyboard
alone, and then you can turn

00:25:27.186 --> 00:25:29.286 A:middle
on the screen reader and
start looking at some

00:25:29.286 --> 00:25:31.936 A:middle
of the more finer points for
users who cannot see the page.

00:25:32.626 --> 00:25:34.746 A:middle
So, to begin testing
this with the keyboard,

00:25:34.746 --> 00:25:37.176 A:middle
we simply just start hitting the
Tab key and see what happens.

00:25:38.156 --> 00:25:41.126 A:middle
You can see that I'm hitting
the Tab key repeatedly

00:25:41.446 --> 00:25:45.586 A:middle
and you just see that the Safari
Address bar is getting focused.

00:25:45.586 --> 00:25:47.366 A:middle
Nothing on the page
is actually changing.

00:25:47.366 --> 00:25:51.896 A:middle
And that's because none of these
elements are really interactive

00:25:51.896 --> 00:25:53.286 A:middle
and none of them
have a tabindex set.

00:25:53.766 --> 00:25:55.566 A:middle
Because if we look
at the markup,

00:25:55.836 --> 00:25:58.596 A:middle
you can see that the buttons
I have here are just made

00:25:58.596 --> 00:26:01.216 A:middle
with standard div tags.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.596 --> 00:26:01.216 A:middle
with standard div tags.

00:26:01.396 --> 00:26:03.776 A:middle
And standard div tags don't
have an implicit tabindex

00:26:03.776 --> 00:26:04.936 A:middle
like interactive elements.

00:26:05.376 --> 00:26:09.436 A:middle
So to get these buttons
working with the keyboard,

00:26:09.436 --> 00:26:12.146 A:middle
we need to just add a tabindex
of 0 to each one of those.

00:26:12.646 --> 00:26:14.916 A:middle
So let me go ahead and just
add that to these buttons.

00:26:15.976 --> 00:26:19.336 A:middle
So you can see that the Zoom
popup button now has a tabindex

00:26:19.336 --> 00:26:19.846 A:middle
of 0.

00:26:20.286 --> 00:26:23.216 A:middle
And the Save button next
to it has a tabindex of 0.

00:26:23.816 --> 00:26:26.366 A:middle
And so now if we save and we
go back to our application

00:26:27.236 --> 00:26:29.596 A:middle
and we refresh, you can see now

00:26:29.596 --> 00:26:33.146 A:middle
that the Zoom popup button has
this blue outline at the top.

00:26:33.736 --> 00:26:36.256 A:middle
And so we know that this
thing has keyboard focus.

00:26:36.866 --> 00:26:39.296 A:middle
But this blue outline
is also applied

00:26:39.296 --> 00:26:42.166 A:middle
when you simply just click
on any of these buttons,

00:26:42.166 --> 00:26:44.426 A:middle
and you can see that
it kind of looks weird.

00:26:44.426 --> 00:26:47.626 A:middle
And so our QA team and our
designers are getting upset

00:26:47.626 --> 00:26:49.676 A:middle
with us because they want us
to remove this blue outline

00:26:49.676 --> 00:26:50.836 A:middle
because it doesn't
look very good.

00:26:51.256 --> 00:26:53.766 A:middle
Well, removing the blue
outline would get us right back

00:26:53.766 --> 00:26:55.976 A:middle
where we started, where these
controls are not accessible

00:26:55.976 --> 00:26:58.756 A:middle
with the keyboard at all because
a keyboard user will never know

00:26:58.756 --> 00:27:00.826 A:middle
that they have focus, and
therefore they'll never know


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.756 --> 00:27:00.826 A:middle
that they have focus, and
therefore they'll never know

00:27:00.826 --> 00:27:02.176 A:middle
that they'll be able
to interact with them.

00:27:02.796 --> 00:27:05.196 A:middle
And so a better experience
would be rather

00:27:05.196 --> 00:27:08.026 A:middle
than removing the blue outline,
which is default in the system,

00:27:08.686 --> 00:27:10.806 A:middle
let's style it to make it
look a little bit better.

00:27:11.236 --> 00:27:16.456 A:middle
And so if we jump over to
our CSS, which is right here,

00:27:16.586 --> 00:27:19.406 A:middle
this is the CSS for our popup
button, and let me just add

00:27:19.406 --> 00:27:23.556 A:middle
in a little bit of
code to style that CSS.

00:27:23.756 --> 00:27:29.646 A:middle
So here I've added a focus
selector to the button,

00:27:29.956 --> 00:27:32.916 A:middle
and I'm removing the default
outline with Outline None,

00:27:33.076 --> 00:27:35.546 A:middle
so that gets rid of the blue
outline that they hated.

00:27:35.986 --> 00:27:39.906 A:middle
And then I'm adding border
color to the button itself,

00:27:40.046 --> 00:27:41.366 A:middle
which makes it look
a little bit better.

00:27:41.456 --> 00:27:45.146 A:middle
So if we save that and
we go back to our app

00:27:45.146 --> 00:27:47.266 A:middle
and we hit the Tab
key, you'll see now

00:27:47.266 --> 00:27:49.266 A:middle
that we have this really
beautiful blue outline

00:27:49.266 --> 00:27:49.756 A:middle
on the button.

00:27:49.906 --> 00:27:51.796 A:middle
And our designers and
our QA team is happy,

00:27:52.046 --> 00:27:53.446 A:middle
and our keyboard
users are happy.

00:27:53.886 --> 00:27:56.106 A:middle
So the next thing we want
to start doing is looking

00:27:56.106 --> 00:27:58.856 A:middle
at whether or not we can
actually activate these controls

00:27:58.856 --> 00:27:59.496 A:middle
with the keyboard.

00:27:59.836 --> 00:28:01.846 A:middle
So if I press the Space
bar, I would expect


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.836 --> 00:28:01.846 A:middle
So if I press the Space
bar, I would expect

00:28:01.846 --> 00:28:04.786 A:middle
that the menu would come up just
as it did when we clicked it.

00:28:05.116 --> 00:28:07.446 A:middle
And, alas, there is
no menu coming up.

00:28:08.046 --> 00:28:10.616 A:middle
So what we need to do is
we need to actually go back

00:28:10.616 --> 00:28:14.286 A:middle
to the JavaScript and add some
very basic keyboard handlers

00:28:14.486 --> 00:28:16.896 A:middle
to be able to tap into the
same code that gets run

00:28:16.896 --> 00:28:18.416 A:middle
when the user clicks
on it with the mouse.

00:28:18.996 --> 00:28:21.786 A:middle
So let's do that now.

00:28:21.786 --> 00:28:22.086 A:middle
All right.

00:28:22.086 --> 00:28:25.486 A:middle
So we jumped over to our
JavaScript for our popup button.

00:28:25.486 --> 00:28:28.736 A:middle
And I have separated this
code out so that we have kind

00:28:28.736 --> 00:28:30.416 A:middle
of a clean slate for
working with the keyboard.

00:28:30.936 --> 00:28:35.086 A:middle
And I'm going to add some
additional handlers here

00:28:36.006 --> 00:28:38.996 A:middle
that basically just handle
a key down on the button.

00:28:39.576 --> 00:28:43.056 A:middle
And then we check to see whether
or not the event is a key code

00:28:43.056 --> 00:28:45.986 A:middle
of 32 or 13, which is the
Space bar or the Return key.

00:28:45.986 --> 00:28:49.276 A:middle
And then when that happens,
we just call the open method

00:28:49.276 --> 00:28:51.106 A:middle
that is the same
method that is called

00:28:51.106 --> 00:28:52.746 A:middle
when the mouse click
is registered.

00:28:53.136 --> 00:28:55.056 A:middle
And so we're just tapping
into the main code.

00:28:55.056 --> 00:28:57.386 A:middle
We haven't had to really
write anything extra for this.

00:28:57.536 --> 00:28:58.996 A:middle
All right.

00:28:58.996 --> 00:29:04.996 A:middle
So if we save and go back to
the menu, we hit the Tab key


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.996 --> 00:29:04.996 A:middle
So if we save and go back to
the menu, we hit the Tab key

00:29:04.996 --> 00:29:07.176 A:middle
and now we want to hit the
Space bar to activate the menu.

00:29:07.356 --> 00:29:09.726 A:middle
And you can see the menu comes
up, so we're getting there.

00:29:10.356 --> 00:29:11.096 A:middle
Next, we should be able

00:29:11.096 --> 00:29:13.576 A:middle
to navigate this menu
with the Arrow keys.

00:29:13.576 --> 00:29:15.356 A:middle
And I'm pressing them
and nothing's happening.

00:29:15.746 --> 00:29:17.796 A:middle
So this is where we're going
to have to write a little bit

00:29:17.796 --> 00:29:20.236 A:middle
of extra code to change
the focus of the menu

00:29:20.236 --> 00:29:22.736 A:middle
as the user uses the Arrow keys.

00:29:23.056 --> 00:29:24.476 A:middle
So let's go back there.

00:29:25.646 --> 00:29:27.366 A:middle
And let's just build
on this right here

00:29:27.676 --> 00:29:30.236 A:middle
and add some additional
keyboard handlers to the menu

00:29:31.166 --> 00:29:32.946 A:middle
for focusing the next
and previous item.

00:29:33.336 --> 00:29:35.566 A:middle
So as you can see here,
we're handling a key down

00:29:36.336 --> 00:29:39.336 A:middle
and we're checking the key code
for a Down Arrow or an Up Arrow.

00:29:40.046 --> 00:29:42.576 A:middle
And when we get a Down Arrow or
an Up Arrow, we're simply going

00:29:42.576 --> 00:29:44.156 A:middle
to focus the next or
the previous item.

00:29:44.796 --> 00:29:47.126 A:middle
And so let's jump over to that
code and see what that does.

00:29:48.256 --> 00:29:52.256 A:middle
So Focus Next Item just gets
the currently focused item.

00:29:52.256 --> 00:29:54.286 A:middle
And if there isn't one
focused it gets the first item.

00:29:54.986 --> 00:29:59.706 A:middle
It calls focus item with the
next item to focus in the list.

00:29:59.706 --> 00:30:00.946 A:middle
And so if we look
at that method,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.706 --> 00:30:00.946 A:middle
And so if we look
at that method,

00:30:01.476 --> 00:30:03.816 A:middle
you can see that we're setting
the tabindex of negative 1

00:30:03.816 --> 00:30:06.666 A:middle
and then we're just calling
focus on this with JavaScript.

00:30:07.366 --> 00:30:10.286 A:middle
Now, as you can remember
from our talk about tabindex,

00:30:11.056 --> 00:30:14.416 A:middle
calling focus on an element
that is not focusable, i.e., a,

00:30:14.416 --> 00:30:17.956 A:middle
you know, normal div tag,

00:30:18.016 --> 00:30:19.656 A:middle
which doesn't get an
implicit tabindex,

00:30:19.846 --> 00:30:21.456 A:middle
could cause issues
in older clients.

00:30:21.656 --> 00:30:23.886 A:middle
And so we want to be sure
that we have a tabindex set

00:30:23.886 --> 00:30:25.866 A:middle
for this element
before we call focus.

00:30:26.216 --> 00:30:27.746 A:middle
So we're setting
it to negative 1.

00:30:27.746 --> 00:30:30.626 A:middle
And you might be asking,
"Why not set it to 0?"

00:30:31.226 --> 00:30:32.496 A:middle
Well, if we set it to 0,

00:30:32.666 --> 00:30:35.766 A:middle
as the user navigates this
list those elements are going

00:30:35.766 --> 00:30:38.886 A:middle
to be put into the default tab
order, which isn't what we want.

00:30:38.956 --> 00:30:39.946 A:middle
We want the user to be able

00:30:39.946 --> 00:30:41.716 A:middle
to navigate the list
with the Arrow keys.

00:30:41.716 --> 00:30:44.446 A:middle
And then if they were to hit
the Tab key, we want focus

00:30:44.446 --> 00:30:46.996 A:middle
to jump away from the menu to
the next button in the toolbar.

00:30:47.356 --> 00:30:49.696 A:middle
And so that's why we're using
negative 1 here, to keep them

00:30:49.696 --> 00:30:52.666 A:middle
out of the tab order and let
us just focus them manually

00:30:52.666 --> 00:30:53.376 A:middle
with JavaScript.

00:30:54.026 --> 00:30:56.636 A:middle
So if we save that and
jump back to the menu

00:30:56.636 --> 00:30:58.716 A:middle
and then we hit the Space bar.

00:30:59.166 --> 00:31:01.486 A:middle
So now you can see that the
currently selected item is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.166 --> 00:31:01.486 A:middle
So now you can see that the
currently selected item is

00:31:01.486 --> 00:31:03.426 A:middle
automatically focused
when we open the menu,

00:31:03.426 --> 00:31:05.166 A:middle
which is a good experience
for our users.

00:31:05.746 --> 00:31:07.996 A:middle
Then we can navigate this
list using the Arrow keys

00:31:08.726 --> 00:31:11.806 A:middle
and then try to select an
element with the Space bar.

00:31:12.136 --> 00:31:13.086 A:middle
And that doesn't work either.

00:31:13.086 --> 00:31:15.776 A:middle
So we need to again go in
and hook into the main code

00:31:16.146 --> 00:31:17.406 A:middle
to select this menu item.

00:31:17.866 --> 00:31:19.316 A:middle
But I wanted to show
you quickly what happens

00:31:19.316 --> 00:31:20.586 A:middle
if we press the Tab
key from here.

00:31:21.186 --> 00:31:23.766 A:middle
If we press the Tab
key, the menu goes away

00:31:23.766 --> 00:31:26.896 A:middle
and focus is returned to
the next item in the menu.

00:31:27.366 --> 00:31:29.336 A:middle
That's why we set
tabindex to negative 1.

00:31:29.456 --> 00:31:30.156 A:middle
All right.

00:31:30.156 --> 00:31:31.316 A:middle
So let's go back to our menu

00:31:31.316 --> 00:31:33.806 A:middle
and let's get this
working with the Space bar.

00:31:35.666 --> 00:31:38.136 A:middle
OK, so all I'm going
to do is go back

00:31:38.136 --> 00:31:41.246 A:middle
up to our switch statement
here that handles our key down,

00:31:41.476 --> 00:31:43.146 A:middle
and we're going to add
additional handlers

00:31:43.406 --> 00:31:46.086 A:middle
for both the Space bar
and the Return key as well

00:31:46.086 --> 00:31:48.236 A:middle
as the Escape key to be
able to close the menu.

00:31:51.186 --> 00:31:55.896 A:middle
OK, so actually we did
not handle the Escape key;

00:31:55.896 --> 00:31:57.096 A:middle
we're going to do that next.

00:31:57.526 --> 00:32:01.286 A:middle
So we've added Space bar
and Return, 32 and 13,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.526 --> 00:32:01.286 A:middle
So we've added Space bar
and Return, 32 and 13,

00:32:01.286 --> 00:32:03.676 A:middle
and then all we're doing is
we're selecting the currently

00:32:04.046 --> 00:32:04.506 A:middle
focused item.

00:32:04.786 --> 00:32:06.356 A:middle
So that just gets the
currently focused item

00:32:06.356 --> 00:32:09.576 A:middle
and then it calls the select
code that we have, the same code

00:32:09.576 --> 00:32:11.066 A:middle
that the user uses
with the mouse.

00:32:11.886 --> 00:32:16.646 A:middle
So we can go back to our
menu and refresh the page.

00:32:17.336 --> 00:32:19.396 A:middle
And then as we go to
say 75 percent zoom,

00:32:19.396 --> 00:32:21.176 A:middle
you can hit the Space bar
and see that that works.

00:32:21.426 --> 00:32:23.496 A:middle
But where did keyboard focus go?

00:32:23.646 --> 00:32:27.216 A:middle
The menu went away, but there's
nothing highlighted on the page

00:32:27.216 --> 00:32:30.486 A:middle
and there's no insertion point
in the actual editor itself.

00:32:31.156 --> 00:32:33.686 A:middle
So in this case, we have no
idea where keyboard focus went,

00:32:33.686 --> 00:32:35.606 A:middle
and it probably went to
the body of the page,

00:32:35.876 --> 00:32:36.976 A:middle
which isn't very useful.

00:32:37.346 --> 00:32:38.596 A:middle
So the keyboard user,
if they wanted

00:32:38.596 --> 00:32:41.246 A:middle
to change the Zoom level
again, would have to tab back

00:32:41.246 --> 00:32:45.056 A:middle
to that menu and then
activate it again.

00:32:45.056 --> 00:32:47.026 A:middle
And then, again,
keyboard focus is lost.

00:32:47.626 --> 00:32:50.476 A:middle
As you can remember, it's a
much better experience for us

00:32:50.476 --> 00:32:53.416 A:middle
to focus the element
that opened the menu

00:32:54.056 --> 00:32:55.346 A:middle
after the menu goes away.

00:32:56.096 --> 00:32:57.786 A:middle
And so that's going
to be very simple.

00:32:57.786 --> 00:33:00.616 A:middle
We're just going
to add that code.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:57.786 --> 00:33:00.616 A:middle
We're just going
to add that code.

00:33:00.616 --> 00:33:02.456 A:middle
And then we're going to go in

00:33:02.456 --> 00:33:04.986 A:middle
and when the Escape
key is pressed,

00:33:05.316 --> 00:33:07.446 A:middle
we're going to focus the
button that opened the menu

00:33:07.446 --> 00:33:09.016 A:middle
and then we're going
to close the menu.

00:33:09.836 --> 00:33:14.236 A:middle
Similarly, when Enter
or Return is pressed

00:33:14.236 --> 00:33:16.086 A:middle
and we select the
currently focused item,

00:33:16.496 --> 00:33:18.286 A:middle
we're going to focus the
button that opened the menu

00:33:18.286 --> 00:33:19.496 A:middle
and then close the menu.

00:33:19.916 --> 00:33:20.906 A:middle
So very simple stuff,

00:33:20.906 --> 00:33:25.016 A:middle
but it really improves the
usability for this code.

00:33:25.226 --> 00:33:28.956 A:middle
So going back to Safari,
we go to the menu,

00:33:28.956 --> 00:33:31.326 A:middle
we select 50 percent
and you can see

00:33:31.326 --> 00:33:33.226 A:middle
that the Zoom popup
button is selected now

00:33:33.226 --> 00:33:34.046 A:middle
when the menu goes away.

00:33:34.786 --> 00:33:35.836 A:middle
Really great usability.

00:33:36.396 --> 00:33:39.186 A:middle
And now the user can quickly
change all the zoom levels just

00:33:39.186 --> 00:33:41.026 A:middle
by a couple of keyboard presses.

00:33:41.486 --> 00:33:43.116 A:middle
So that's really nice.

00:33:43.886 --> 00:33:47.836 A:middle
OK, so now we've made this
Zoom popup button completely

00:33:47.836 --> 00:33:51.286 A:middle
accessible, which is really
great for a keyboard user.

00:33:51.936 --> 00:33:53.886 A:middle
But now we want to kind of
switch over and start talking

00:33:53.886 --> 00:33:56.226 A:middle
about screen readers and
making sure that someone

00:33:56.226 --> 00:33:58.526 A:middle
who can't see this page
is able to interact

00:33:58.526 --> 00:33:59.696 A:middle
with these elements correctly.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:00.146 --> 00:34:02.346 A:middle
So the way I'm going to do
that is I'm going to turn

00:34:02.346 --> 00:34:04.886 A:middle
on voiceover and just start
kind of navigating the page

00:34:04.886 --> 00:34:05.866 A:middle
and seeing what I hear.

00:34:06.326 --> 00:34:07.836 A:middle
So I'm going to turn
on voiceover

00:34:07.836 --> 00:34:09.686 A:middle
on your Mac with Command-F5.

00:34:10.076 --> 00:34:14.545 A:middle
&gt;&gt; Voiceover on, Safari editor
window, editor HTML content.

00:34:15.216 --> 00:34:18.295 A:middle
&gt;&gt; OK, so voiceover came
on and told us that we are

00:34:18.295 --> 00:34:20.056 A:middle
on the editor HTML content.

00:34:20.376 --> 00:34:22.956 A:middle
Now, we can kind of navigate
through this page and kind

00:34:22.956 --> 00:34:23.856 A:middle
of see what's going on.

00:34:23.856 --> 00:34:28.005 A:middle
I'm going to quickly jump
over to the Zoom button.

00:34:28.206 --> 00:34:29.856 A:middle
&gt;&gt; Edit interact with canvas,

00:34:30.226 --> 00:34:32.446 A:middle
tool interact 5-0
percent clickable.

00:34:33.085 --> 00:34:35.616 A:middle
&gt;&gt; OK, so we got to the Zoom
button and voiceover said,

00:34:35.706 --> 00:34:37.266 A:middle
"5-0 percent clickable."

00:34:37.856 --> 00:34:39.985 A:middle
Now, that does tell
us what the content is

00:34:39.985 --> 00:34:41.956 A:middle
of that particular
div, and it tells us

00:34:41.956 --> 00:34:43.386 A:middle
that they can do
something with it,

00:34:43.716 --> 00:34:46.045 A:middle
but it doesn't really
give them any information

00:34:46.045 --> 00:34:48.646 A:middle
about what this button is
or really what it does.

00:34:49.356 --> 00:34:51.246 A:middle
We want to instead tell the user

00:34:51.246 --> 00:34:54.366 A:middle
that this is the Zoom popup
button, give its current value,

00:34:54.666 --> 00:34:57.686 A:middle
and let them know that when
they click on this button

00:34:57.686 --> 00:34:59.066 A:middle
or when they activate
this button

00:34:59.156 --> 00:35:00.126 A:middle
that they're going
to get a menu.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.156 --> 00:35:00.126 A:middle
that they're going
to get a menu.

00:35:00.856 --> 00:35:02.316 A:middle
And so let's turn off voiceover

00:35:02.316 --> 00:35:05.116 A:middle
and let's go add some ARIA
attributes to this div tag

00:35:05.476 --> 00:35:07.256 A:middle
to convey this information
to the user.

00:35:07.606 --> 00:35:08.496 A:middle
&gt;&gt; Voiceover off.

00:35:09.396 --> 00:35:11.736 A:middle
&gt;&gt; So switching back
to Xcode I'm going

00:35:11.736 --> 00:35:12.776 A:middle
to go back to our markup.

00:35:13.446 --> 00:35:18.346 A:middle
And I'm going to add just a few
ARIA attributes to the markup

00:35:18.646 --> 00:35:20.156 A:middle
to be able to tell the
user a little bit more

00:35:20.156 --> 00:35:20.946 A:middle
about this control.

00:35:21.526 --> 00:35:23.956 A:middle
So as we covered earlier
you can add a role.

00:35:24.046 --> 00:35:25.556 A:middle
And we've added the
role of button.

00:35:25.556 --> 00:35:30.056 A:middle
And then we've also added the
ARIA property haspopup=true.

00:35:30.746 --> 00:35:32.016 A:middle
And what that tells the user is

00:35:32.016 --> 00:35:33.696 A:middle
that when they activate
this button,

00:35:33.696 --> 00:35:35.176 A:middle
a popup menu is going
to come up.

00:35:35.176 --> 00:35:36.816 A:middle
And so they kind of know
that there's something else

00:35:36.816 --> 00:35:39.306 A:middle
that they can interact with.

00:35:39.496 --> 00:35:41.006 A:middle
Similarly, for the Save button,

00:35:41.076 --> 00:35:42.346 A:middle
I've just added a
role of button.

00:35:42.346 --> 00:35:44.076 A:middle
And that's really
all we need to do

00:35:44.076 --> 00:35:47.486 A:middle
because the label is pure
text inside of the div tag.

00:35:47.486 --> 00:35:49.386 A:middle
And so voiceover is going
to get that automatically.

00:35:50.776 --> 00:35:51.306 A:middle
All right.

00:35:51.346 --> 00:35:56.246 A:middle
So if we jump over to
Safari and refresh the page

00:35:56.246 --> 00:35:57.156 A:middle
and we turn on voiceover --

00:35:59.866 --> 00:36:00.896 A:middle
&gt;&gt; Voiceover on.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.866 --> 00:36:00.896 A:middle
&gt;&gt; Voiceover on.

00:36:00.946 --> 00:36:03.516 A:middle
Safari 1-0-0 percent
popup button.

00:36:04.096 --> 00:36:07.126 A:middle
&gt;&gt; OK, so voiceover said,
"1-0-0 percent popup button."

00:36:07.496 --> 00:36:08.866 A:middle
And that's a lot better,

00:36:08.866 --> 00:36:10.776 A:middle
but we're still not
getting the actual --

00:36:11.256 --> 00:36:12.706 A:middle
we're still not telling them

00:36:12.706 --> 00:36:14.236 A:middle
that this is a Zoom
popup button.

00:36:14.506 --> 00:36:16.606 A:middle
So we're going to go add
some ARIA labels to this.

00:36:16.606 --> 00:36:19.166 A:middle
And I'm going to show you how
to add the ARIA label along

00:36:19.166 --> 00:36:20.716 A:middle
with the current
value of the control

00:36:20.716 --> 00:36:23.746 A:middle
to make this control really
usable for a voiceover user.

00:36:24.106 --> 00:36:27.176 A:middle
&gt;&gt; 1-0-0. Voiceover off.

00:36:27.176 --> 00:36:29.886 A:middle
&gt;&gt; OK, so let's add the
ARIA label to the control.

00:36:29.886 --> 00:36:31.926 A:middle
And if we go back into here.

00:36:31.926 --> 00:36:34.936 A:middle
So here is the JavaScript that
actually handles selection.

00:36:35.406 --> 00:36:38.016 A:middle
And so we've added this
method called sync value,

00:36:38.396 --> 00:36:42.216 A:middle
which basically what it does
is when the selection changes

00:36:42.216 --> 00:36:45.346 A:middle
for this menu, it finds out
what the currently selected Zoom

00:36:45.346 --> 00:36:46.016 A:middle
level is.

00:36:46.206 --> 00:36:48.866 A:middle
And then it modifies the markup
to show the current Zoom level.

00:36:49.176 --> 00:36:50.366 A:middle
And we've hooked into that

00:36:50.366 --> 00:36:52.786 A:middle
to also update the ARIA
label attribute here.

00:36:52.786 --> 00:36:57.956 A:middle
And what we're doing is we're
just prepending the value along

00:36:57.956 --> 00:37:00.226 A:middle
with a localized string of Zoom.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:57.956 --> 00:37:00.226 A:middle
with a localized string of Zoom.

00:37:00.226 --> 00:37:03.086 A:middle
And that allows us to tell
the voiceover user a lot more

00:37:03.086 --> 00:37:04.236 A:middle
information about this control.

00:37:04.236 --> 00:37:08.276 A:middle
So flip back over to
Safari, turn on voiceover.

00:37:08.276 --> 00:37:11.286 A:middle
&gt;&gt; Voiceover on 1-0-0
percent Zoom popup button.

00:37:11.646 --> 00:37:13.336 A:middle
&gt;&gt; OK, so that tells the
user everything they need

00:37:13.336 --> 00:37:14.346 A:middle
to know about this control.

00:37:14.576 --> 00:37:16.016 A:middle
Now, if we activate
this control --

00:37:16.536 --> 00:37:17.786 A:middle
&gt;&gt; You are currently
on a popup button.

00:37:18.376 --> 00:37:20.746 A:middle
&gt;&gt; Notice voiceover doesn't tell
us anything about this menu.

00:37:21.286 --> 00:37:23.076 A:middle
&gt;&gt; 5-0 percent Zoom
popup button.

00:37:23.516 --> 00:37:25.056 A:middle
&gt;&gt; But when the menus
value changes,

00:37:25.246 --> 00:37:26.566 A:middle
we do get the updated value.

00:37:26.856 --> 00:37:27.776 A:middle
So the next thing that we want

00:37:27.776 --> 00:37:30.046 A:middle
to do is make this menu more
accessible for voiceover.

00:37:30.926 --> 00:37:31.856 A:middle
&gt;&gt; Voiceover off.

00:37:32.676 --> 00:37:34.846 A:middle
&gt;&gt; So if we flip back
over to the markup,

00:37:36.676 --> 00:37:40.176 A:middle
you can see that the menu is
implemented using only div tags,

00:37:40.426 --> 00:37:42.496 A:middle
which is typically how
you would use a menu.

00:37:42.966 --> 00:37:46.166 A:middle
And so all we want to do is add
some ARIA markup to this menu

00:37:46.166 --> 00:37:47.526 A:middle
to get it usable with voiceover.

00:37:48.236 --> 00:37:53.326 A:middle
So we add it to the menu, a
role of menu, and then for each

00:37:53.326 --> 00:37:56.606 A:middle
of the items we add role of menu
item radio, which tells the user

00:37:56.606 --> 00:38:00.436 A:middle
that they can only select one
of these menu items at a time.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:56.606 --> 00:38:00.436 A:middle
that they can only select one
of these menu items at a time.

00:38:00.536 --> 00:38:02.456 A:middle
You know, you can
use a menu item

00:38:02.456 --> 00:38:03.946 A:middle
if there are multiple
things you can select.

00:38:03.946 --> 00:38:05.636 A:middle
You can use check states,
that kind of thing,

00:38:05.906 --> 00:38:08.726 A:middle
but for this purpose we're only
going to use menu item radio.

00:38:08.726 --> 00:38:11.866 A:middle
And then we're going
to add ARIAchecked=true

00:38:11.906 --> 00:38:13.446 A:middle
for the currently
selected menu item.

00:38:13.446 --> 00:38:15.466 A:middle
And, again, we're
going to update this

00:38:15.466 --> 00:38:16.826 A:middle
as the selection changes.

00:38:17.846 --> 00:38:18.166 A:middle
All right.

00:38:18.196 --> 00:38:21.846 A:middle
So let's jump back to the menu
and see how this changes things.

00:38:22.556 --> 00:38:25.856 A:middle
&gt;&gt; Voiceover on 1-0-0
percent Zoom popup button.

00:38:26.276 --> 00:38:27.226 A:middle
&gt;&gt; So that works out great.

00:38:27.226 --> 00:38:30.746 A:middle
&gt;&gt; One checkmark 1-0-0
percent check, checkmark 1-0-0.

00:38:31.176 --> 00:38:32.656 A:middle
&gt;&gt; Okay. So voiceover
is telling us that we're

00:38:32.656 --> 00:38:35.516 A:middle
on the 100 percent menu
item, that there are 5 items,

00:38:35.516 --> 00:38:37.666 A:middle
and that this one that we're
currently on is selected.

00:38:38.066 --> 00:38:39.956 A:middle
Now, if we navigate
to say 75 percent --

00:38:39.956 --> 00:38:41.746 A:middle
&gt;&gt; 7-5 percent menu, 5 items.

00:38:42.706 --> 00:38:44.176 A:middle
&gt;&gt; Tells us that there
are 5 items in the menu

00:38:44.176 --> 00:38:45.336 A:middle
and that we're on 75 percent.

00:38:45.986 --> 00:38:49.286 A:middle
&gt;&gt; 5-0 percent, one
checkmark, 1-0-0 percent check.

00:38:49.576 --> 00:38:50.176 A:middle
&gt;&gt; OK, great.

00:38:50.236 --> 00:38:53.206 A:middle
&gt;&gt; 7-5 percent, 7-5
percent Zoom popup button.

00:38:53.336 --> 00:38:54.776 A:middle
&gt;&gt; So we've selected 75 percent.

00:38:54.776 --> 00:38:56.456 A:middle
And we just want to go back
into the menu and make sure

00:38:56.456 --> 00:38:58.626 A:middle
that the selection
state was updated.

00:38:59.076 --> 00:39:01.216 A:middle
&gt;&gt; One checkmark
7-5 percent check.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.076 --> 00:39:01.216 A:middle
&gt;&gt; One checkmark
7-5 percent check.

00:39:01.596 --> 00:39:03.096 A:middle
5-0 percent, 5-0 --

00:39:03.296 --> 00:39:05.936 A:middle
one checkmark 7-5
percent check, check.

00:39:06.186 --> 00:39:08.636 A:middle
&gt;&gt; Great. So this menu is
now completely accessible

00:39:08.636 --> 00:39:10.356 A:middle
with voiceover, which
is really, really great.

00:39:11.186 --> 00:39:13.926 A:middle
OK, so as you saw from the
demo, using just a little bit

00:39:13.926 --> 00:39:16.236 A:middle
of extra HTML markup, tapping

00:39:16.236 --> 00:39:18.026 A:middle
into our existing
JavaScript code

00:39:18.336 --> 00:39:20.876 A:middle
and handling a few keyboard
events, we were able

00:39:20.876 --> 00:39:22.786 A:middle
to really improve
the user experience

00:39:22.786 --> 00:39:24.056 A:middle
of our text editing application.

00:39:24.056 --> 00:39:27.476 A:middle
And we were able to make it
fully accessible using a screen

00:39:27.476 --> 00:39:29.266 A:middle
reader, in this case
voiceover on the Mac.

00:39:30.866 --> 00:39:34.006 A:middle
So to begin wrapping up, I'd
like to re-emphasize four

00:39:34.006 --> 00:39:35.746 A:middle
of the most important
points of this talk.

00:39:37.016 --> 00:39:40.926 A:middle
You should strive to make your
content perceivable, operable,

00:39:41.186 --> 00:39:43.096 A:middle
understandable, and Robust.

00:39:45.636 --> 00:39:47.206 A:middle
Using standard controls

00:39:47.206 --> 00:39:50.036 A:middle
and semantic markup wherever
possible will make this a lot

00:39:50.036 --> 00:39:53.486 A:middle
easier, but you can use
ARIA to fill the gaps

00:39:54.796 --> 00:39:57.146 A:middle
where HTML doesn't
provide you enough control.

00:39:57.146 --> 00:40:00.936 A:middle
And then finally, test your
applications with the keyboard.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:57.146 --> 00:40:00.936 A:middle
And then finally, test your
applications with the keyboard.

00:40:01.546 --> 00:40:03.966 A:middle
All mouse interactions should
be able to be duplicated

00:40:03.966 --> 00:40:04.896 A:middle
with the keyboard alone.

00:40:04.896 --> 00:40:06.726 A:middle
And then fire up a screen reader

00:40:06.726 --> 00:40:08.566 A:middle
and really thoroughly
test your application.

00:40:08.566 --> 00:40:11.206 A:middle
And be asking yourself,
"If I can't see it,

00:40:11.266 --> 00:40:12.676 A:middle
does this really make sense?

00:40:12.916 --> 00:40:15.016 A:middle
Am I really getting all of
the information that's here

00:40:15.016 --> 00:40:16.186 A:middle
that a sighted user sees?"

00:40:16.186 --> 00:40:18.896 A:middle
And then use ARIA to kind
of fill in those gaps

00:40:19.256 --> 00:40:22.356 A:middle
and make your user
experience a lot better.

00:40:23.176 --> 00:40:26.376 A:middle
For more information you
can contact Jake Behrens,

00:40:26.376 --> 00:40:28.266 A:middle
who is our App Frameworks
Evangelist.

00:40:28.266 --> 00:40:29.456 A:middle
I've included links to the

00:40:29.456 --> 00:40:31.926 A:middle
"Web Content Accessibility
Guidelines" as well

00:40:31.926 --> 00:40:34.126 A:middle
as the ARIA documentation
so you can learn all

00:40:34.126 --> 00:40:35.356 A:middle
about roles and properties.

00:40:35.956 --> 00:40:38.346 A:middle
And I've also included the link
to the talk that I promised you

00:40:38.346 --> 00:40:40.136 A:middle
about "Using Accessibility
in Automation."

00:40:40.596 --> 00:40:42.416 A:middle
And of course you can
always reach out to us

00:40:42.716 --> 00:40:44.146 A:middle
through the Apple
Developer Forums.

00:40:45.376 --> 00:40:48.386 A:middle
In case you want a little bit
more information these talks,

00:40:48.506 --> 00:40:50.806 A:middle
I would highly recommend
you check out the videos

00:40:50.806 --> 00:40:52.966 A:middle
of accessibility on OS X iOS.

00:40:52.966 --> 00:40:55.446 A:middle
And then more information
about the "Web Inspector

00:40:55.446 --> 00:40:58.096 A:middle
and Modern JavaScript" can be
found in the talk on Thursday.

00:40:58.626 --> 00:41:00.936 A:middle
Thank you, guys, so
much for listening.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.626 --> 00:41:00.936 A:middle
Thank you, guys, so
much for listening.

00:41:00.936 --> 00:41:03.916 A:middle
I hope you have a wonderful
day and safe travels back home.

00:41:03.916 --> 00:41:04.856 A:middle
Thank you.

