WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:11.316 --> 00:00:11.666 A:middle
&gt;&gt; Hi.

00:00:12.826 --> 00:00:13.216 A:middle
&gt;&gt; Hi.

00:00:13.406 --> 00:00:16.006 A:middle
&gt;&gt; Hope you all had
a good lunch.

00:00:16.006 --> 00:00:18.486 A:middle
This is Session 220,
Adopting Advanced Features

00:00:18.486 --> 00:00:20.306 A:middle
of the New UI in
Mac OS X Yosemite.

00:00:21.146 --> 00:00:26.126 A:middle
I'm Chris Dreessen, and let
me start by showing off some

00:00:26.126 --> 00:00:28.296 A:middle
of those new UI features
in Yosemite.

00:00:29.796 --> 00:00:33.206 A:middle
So to begin with here's
a simple Finder window,

00:00:33.416 --> 00:00:36.266 A:middle
and the big changes here,
you'll notice the dock is kind

00:00:36.266 --> 00:00:39.206 A:middle
of just grabbing the color
from the desktop picture.

00:00:39.586 --> 00:00:43.946 A:middle
Likewise, the Finder sidebar is
infused with the bright pinks

00:00:43.946 --> 00:00:46.106 A:middle
and oranges of the
desktop picture,

00:00:46.466 --> 00:00:49.626 A:middle
and it's really complimenting
the user's content onscreen.

00:00:50.486 --> 00:00:56.136 A:middle
Likewise, we have a picture of
Safari here, and the content

00:00:56.136 --> 00:00:57.136 A:middle
in the Safari window
is very different

00:00:57.136 --> 00:01:00.896 A:middle
than the Finder window, but
the toolbar is just grabbing


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:57.136 --> 00:01:00.896 A:middle
than the Finder window, but
the toolbar is just grabbing

00:01:00.896 --> 00:01:04.495 A:middle
that color from the webpage
and making the UI really,

00:01:04.495 --> 00:01:06.636 A:middle
really compliment
the web content here.

00:01:07.226 --> 00:01:11.696 A:middle
And finally, we have
Notification Center,

00:01:11.726 --> 00:01:14.406 A:middle
which has been around
a little while now,

00:01:14.826 --> 00:01:19.006 A:middle
but in Yosemite you can see it's
using one of our new appearances

00:01:19.446 --> 00:01:21.736 A:middle
and it's pulling up the
really bright reds and oranges

00:01:21.736 --> 00:01:23.056 A:middle
and yellows from
the desktop picture.

00:01:23.296 --> 00:01:24.326 A:middle
And it's not just
the background,

00:01:24.326 --> 00:01:25.416 A:middle
also the text is pulling it up

00:01:25.416 --> 00:01:27.676 A:middle
and the buttons are pulling
it up, and we're going

00:01:27.676 --> 00:01:30.806 A:middle
to show you how to build
UI's that also grab color

00:01:30.806 --> 00:01:32.706 A:middle
from the environment like this.

00:01:33.716 --> 00:01:37.136 A:middle
So to start with I'm going
to mention a few changes

00:01:37.136 --> 00:01:40.586 A:middle
in existing AppKit API's,
especially NSColor, NSImage.

00:01:40.586 --> 00:01:43.556 A:middle
Then I'm going to spend a
while talking about title bars

00:01:43.556 --> 00:01:45.636 A:middle
and toolbars in a
section I like to call,

00:01:45.636 --> 00:01:46.886 A:middle
title bars and toolbars.

00:01:48.226 --> 00:01:52.086 A:middle
And after that I'll invite
Corbin on stage to talk

00:01:52.236 --> 00:01:56.396 A:middle
about some important new
classes that allow you

00:01:56.396 --> 00:01:59.026 A:middle
to use these visual effects,
particularly a visual effect we

00:01:59.026 --> 00:02:00.506 A:middle
like to refer to as Vibrancy.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.026 --> 00:02:00.506 A:middle
like to refer to as Vibrancy.

00:02:01.396 --> 00:02:03.696 A:middle
And finally we'll top
that off with discussion

00:02:03.696 --> 00:02:07.176 A:middle
of performance regarding
these new effects.

00:02:07.536 --> 00:02:11.886 A:middle
So to begin reviewing our
oldie but goodie API's,

00:02:12.366 --> 00:02:15.386 A:middle
this is NSSegmentedControl
in Yosemite.

00:02:15.416 --> 00:02:20.166 A:middle
You'll notice we have Finder in
the background in this picture,

00:02:20.166 --> 00:02:21.116 A:middle
Safari in the foreground,

00:02:21.146 --> 00:02:22.526 A:middle
and these are the
back/forward controls,

00:02:22.526 --> 00:02:24.366 A:middle
and these are separate
elements now,

00:02:24.816 --> 00:02:27.446 A:middle
but they're not actually
separate NSControls.

00:02:27.856 --> 00:02:30.436 A:middle
This is the same
NSSegmentedControl as always,

00:02:30.786 --> 00:02:35.686 A:middle
we just configured its segment
style property with a new value.

00:02:35.686 --> 00:02:37.786 A:middle
The NSSegmentStyle
enumeration has been augmented

00:02:37.786 --> 00:02:39.386 A:middle
with NSSegmentStyleSeparated,

00:02:39.656 --> 00:02:41.486 A:middle
and this gives you the
disjoint appearance

00:02:41.486 --> 00:02:42.796 A:middle
between the back
and forward buttons.

00:02:43.176 --> 00:02:45.206 A:middle
So, when you replicate
that appearance,

00:02:45.206 --> 00:02:46.486 A:middle
don't throw two NS
buttons at it,

00:02:46.486 --> 00:02:49.246 A:middle
just use an NSSegmentedControl,
and just NSSegmentStyle.

00:02:49.246 --> 00:02:55.496 A:middle
So, I'd like to talk
about NSImage now,

00:02:55.566 --> 00:02:57.726 A:middle
especially if you've been using
UIImage you'll be familiar

00:02:57.726 --> 00:02:58.966 A:middle
with some of the things
I'm talking about.

00:02:59.446 --> 00:03:02.276 A:middle
But let's just start with
this little sample image here.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.446 --> 00:03:02.276 A:middle
But let's just start with
this little sample image here.

00:03:02.276 --> 00:03:04.626 A:middle
This is kind of a button
or a bubble or a background

00:03:04.626 --> 00:03:06.506 A:middle
of some sort, and if you tried

00:03:06.506 --> 00:03:08.836 A:middle
to stretch it using the
NSImage API right now,

00:03:08.836 --> 00:03:10.686 A:middle
you put it in NSImage view
or you draw it yourself,

00:03:11.206 --> 00:03:14.226 A:middle
you're going to notice the
image is stretched uniformly.

00:03:14.566 --> 00:03:17.546 A:middle
So the corners here distort
as the image is resized,

00:03:17.856 --> 00:03:20.986 A:middle
and that's kind of neat but
if we're going for a button

00:03:21.456 --> 00:03:24.636 A:middle
or a window background it's
not really the effect we want.

00:03:24.636 --> 00:03:28.186 A:middle
And UIImage has had this
for quite a few releases,

00:03:28.546 --> 00:03:30.086 A:middle
but NSImage now joins it

00:03:30.086 --> 00:03:31.836 A:middle
in introducing the
capInsets property,

00:03:32.406 --> 00:03:33.926 A:middle
and this takes an
NSEdgeinsets struct [applause].

00:03:34.386 --> 00:03:34.796 A:middle
Thank you.

00:03:35.056 --> 00:03:35.396 A:middle
Thank you.

00:03:37.206 --> 00:03:38.676 A:middle
This takes an NSEdgeinsets
struct

00:03:38.676 --> 00:03:40.296 A:middle
which lets you specify
the distance

00:03:40.326 --> 00:03:42.026 A:middle
to the edges to make these caps.

00:03:42.576 --> 00:03:46.336 A:middle
And those capInsets are in
the image coordinate system,

00:03:46.446 --> 00:03:49.796 A:middle
so to review, the NSImage
coordinate system begins at a --

00:03:49.796 --> 00:03:51.996 A:middle
sorry, zero, zero on the
lower left, the image size

00:03:51.996 --> 00:03:52.816 A:middle
and height on the right.

00:03:53.416 --> 00:03:56.076 A:middle
Anyway, if you set the capInsets
on an image and draw it

00:03:56.076 --> 00:03:57.376 A:middle
like you used to
resize you'll note

00:03:57.376 --> 00:03:58.886 A:middle
that we're now holding the edges

00:03:59.136 --> 00:04:02.776 A:middle
and corners constant while
resizing the interiors


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.136 --> 00:04:02.776 A:middle
and corners constant while
resizing the interiors

00:04:02.776 --> 00:04:05.266 A:middle
of the image, so this lets you
get those stretchable buttons,

00:04:05.486 --> 00:04:08.176 A:middle
those stretchable
backgrounds quite easily.

00:04:08.366 --> 00:04:11.306 A:middle
There's one other thing I
want to mention about this.

00:04:11.666 --> 00:04:13.386 A:middle
So again, if you're familiar

00:04:13.386 --> 00:04:15.876 A:middle
with UIImage you know
the UIImageResizingMode,

00:04:16.076 --> 00:04:17.696 A:middle
we now have NSImageResizingMode,

00:04:17.745 --> 00:04:19.255 A:middle
which offers Stretch
and Tile options.

00:04:19.636 --> 00:04:22.336 A:middle
Stretch is the default, it
matches the behavior we've used

00:04:22.336 --> 00:04:24.106 A:middle
on Mac OS X, pretty
much forever now.

00:04:24.516 --> 00:04:26.986 A:middle
Tile is a new option,
and these are exposed

00:04:26.986 --> 00:04:29.366 A:middle
on the surprisingly named
or resizing mode property

00:04:29.396 --> 00:04:30.056 A:middle
on NSImage [applause].

00:04:30.686 --> 00:04:31.196 A:middle
Thank you, again.

00:04:31.746 --> 00:04:34.766 A:middle
So, as an example here, this
is setting the resizing mode

00:04:34.766 --> 00:04:38.396 A:middle
to Tile, and Keynote
doesn't quite do it justice.

00:04:38.396 --> 00:04:39.176 A:middle
There's a crossfade here,

00:04:39.176 --> 00:04:41.166 A:middle
but you can see how the
image is actually being tiled

00:04:41.166 --> 00:04:42.226 A:middle
into these larger sizes.

00:04:42.766 --> 00:04:45.416 A:middle
So if you have interesting
detail you don't want stretched,

00:04:45.416 --> 00:04:46.576 A:middle
you want replicated instead.

00:04:46.856 --> 00:04:48.616 A:middle
This is how you would pull
it off, and you can use

00:04:48.616 --> 00:04:50.466 A:middle
that with an NSButton
or any NSImage view.

00:04:51.276 --> 00:04:54.456 A:middle
So, to set up the slicing,
I've taught you how

00:04:54.456 --> 00:04:56.546 A:middle
to do it programmatically
now, but you can also do this

00:04:56.546 --> 00:04:59.426 A:middle
with Xcode, and to do that
you just open your image

00:04:59.426 --> 00:05:01.516 A:middle
in your asset catalog, and you
get a nice preview of it here.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.426 --> 00:05:01.516 A:middle
in your asset catalog, and you
get a nice preview of it here.

00:05:01.516 --> 00:05:03.616 A:middle
Here's the nine slice
checkerboard image,

00:05:04.196 --> 00:05:07.266 A:middle
and you can set this up
using the IB Inspector

00:05:07.736 --> 00:05:09.646 A:middle
in this area here.

00:05:09.846 --> 00:05:12.416 A:middle
We've got the slicing
mode, you have horizontal

00:05:12.416 --> 00:05:13.976 A:middle
and vertical here for
a nine slice image.

00:05:13.976 --> 00:05:17.346 A:middle
You can also do three slice,
just horizontal, just vertical.

00:05:18.616 --> 00:05:21.496 A:middle
And if you want to change
the tiling mode we have the

00:05:21.496 --> 00:05:22.436 A:middle
Stretches option here.

00:05:22.436 --> 00:05:23.676 A:middle
So you can do that graphically

00:05:23.676 --> 00:05:24.956 A:middle
without ever having
to change your code.

00:05:25.716 --> 00:05:29.416 A:middle
That covered NSImage, I'd
like to mention a few things

00:05:29.416 --> 00:05:30.926 A:middle
about NSAppearance in Yosemite.

00:05:31.656 --> 00:05:37.746 A:middle
So, NSAppearance is an API we've
had a reinterest in Mavericks.

00:05:37.746 --> 00:05:41.146 A:middle
We offer two appearances in
Mavericks, which you could get

00:05:41.146 --> 00:05:43.286 A:middle
at using the appearanceNamed
class method

00:05:43.636 --> 00:05:44.646 A:middle
on the NSAppearance class.

00:05:45.856 --> 00:05:49.206 A:middle
And the default is
NSAppearanceNameAqua,

00:05:49.206 --> 00:05:50.816 A:middle
which is what we've
used forever.

00:05:50.816 --> 00:05:52.586 A:middle
We continue to use this
as the default appearance,

00:05:52.936 --> 00:05:54.526 A:middle
and we had this other
appearance called

00:05:54.526 --> 00:05:57.276 A:middle
NSAppearanceNameLightContent,
which was used by popovers.

00:05:57.886 --> 00:06:00.736 A:middle
And in Yosemite we
are saying goodbye


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:57.886 --> 00:06:00.736 A:middle
And in Yosemite we
are saying goodbye

00:06:01.006 --> 00:06:02.966 A:middle
to LightContent,
don't use it anymore.

00:06:03.476 --> 00:06:06.186 A:middle
Instead, popovers use one
of our new appearance names,

00:06:06.666 --> 00:06:09.606 A:middle
which is VibrantLight
and VibrantDark.

00:06:09.796 --> 00:06:11.926 A:middle
And Corbin's going to talk a
lot about these in his section.

00:06:12.346 --> 00:06:14.086 A:middle
But let me just give you a
preview to what these look like.

00:06:14.086 --> 00:06:15.446 A:middle
We have VibrantLight
on the left,

00:06:15.956 --> 00:06:17.036 A:middle
and VibrantDark on the right.

00:06:17.036 --> 00:06:19.866 A:middle
And you can see how the
background and the elements are

00:06:19.866 --> 00:06:22.206 A:middle
like what's pulling up that
color from beneath the window

00:06:22.206 --> 00:06:27.396 A:middle
in this case, and how the house
image offers much more contrast

00:06:27.396 --> 00:06:29.246 A:middle
against that background
that it might have before.

00:06:29.246 --> 00:06:33.626 A:middle
So I mentioned color here, so it
probably won't surprise anyone

00:06:33.626 --> 00:06:36.726 A:middle
to know that NSColor has
some notable mentions here.

00:06:37.326 --> 00:06:40.266 A:middle
The big one is that system
colors are appearance sensitive,

00:06:40.266 --> 00:06:41.866 A:middle
so if you use VibrantLight
or VibrantDark,

00:06:42.026 --> 00:06:43.196 A:middle
the system colors are going

00:06:43.196 --> 00:06:45.146 A:middle
to return different
effective values.

00:06:45.246 --> 00:06:46.386 A:middle
So system colors are things

00:06:46.386 --> 00:06:48.356 A:middle
like controlBackgroundColor,
controlTextColor.

00:06:48.686 --> 00:06:51.426 A:middle
There's dozens more,
they're in the NSColor header

00:06:51.426 --> 00:06:52.426 A:middle
and the documentation.

00:06:53.056 --> 00:06:57.036 A:middle
We also have two new system
colors and that's labelColor

00:06:57.036 --> 00:06:58.266 A:middle
and SecondaryLabelColor,

00:06:58.846 --> 00:07:01.716 A:middle
and Corbin will also talk
about these in depth.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.846 --> 00:07:01.716 A:middle
and Corbin will also talk
about these in depth.

00:07:01.716 --> 00:07:05.476 A:middle
All right, this is my
favorite section here,

00:07:05.706 --> 00:07:06.786 A:middle
title bars and toolbars.

00:07:06.836 --> 00:07:09.096 A:middle
We're all familiar with
title bars and toolbars,

00:07:09.786 --> 00:07:12.826 A:middle
but in Yosemite they have
new default appearance,

00:07:13.106 --> 00:07:16.086 A:middle
and one of the key elements of
that new default appearance is

00:07:16.086 --> 00:07:17.976 A:middle
that they blur document content.

00:07:19.076 --> 00:07:22.686 A:middle
So here's a slightly awkward
video of me scrolling a picture

00:07:22.686 --> 00:07:26.366 A:middle
and preview, and you can see
that as I scroll the title bar

00:07:26.366 --> 00:07:28.236 A:middle
and toolbar are actually
absorbing and blurring

00:07:28.236 --> 00:07:31.266 A:middle
that content in real-time,
and preview didn't have

00:07:31.326 --> 00:07:32.836 A:middle
to do anything to
gain this state,

00:07:32.836 --> 00:07:34.386 A:middle
they got that feature for free.

00:07:35.356 --> 00:07:37.736 A:middle
Let me explain how that works.

00:07:38.206 --> 00:07:41.196 A:middle
So, if you have a scroll
view and it's adjacent

00:07:41.196 --> 00:07:43.066 A:middle
to your title bar or toolbar,

00:07:43.066 --> 00:07:44.586 A:middle
we're going to automatically
draw

00:07:44.866 --> 00:07:48.096 A:middle
that previously obscured content
and we'll blur it for you.

00:07:48.546 --> 00:07:51.666 A:middle
If your scroll view isn't
adjacent to the title bar,

00:07:51.666 --> 00:07:52.536 A:middle
we're going to ignore it.

00:07:52.536 --> 00:07:54.006 A:middle
So you can see on
the left I've kind

00:07:54.006 --> 00:07:55.956 A:middle
of made a mock-up showing
the title bar blurring

00:07:55.956 --> 00:07:57.306 A:middle
that orange document content,

00:07:57.306 --> 00:07:59.846 A:middle
and on the right it's not
adjacent to the title bar

00:07:59.956 --> 00:08:02.066 A:middle
so we're not blurring it
or absorbing it at all.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.956 --> 00:08:02.066 A:middle
so we're not blurring it
or absorbing it at all.

00:08:02.556 --> 00:08:06.426 A:middle
And that works really well for
almost all content out there,

00:08:06.706 --> 00:08:08.426 A:middle
but there's a few
cases I want to call

00:08:08.426 --> 00:08:13.016 A:middle
out where our magic there
can use a little bit of help.

00:08:13.016 --> 00:08:17.836 A:middle
So, one of those is movie
views, this is a big area

00:08:17.836 --> 00:08:19.396 A:middle
where we can't just
automatically replicate the

00:08:19.396 --> 00:08:19.996 A:middle
content for you.

00:08:20.496 --> 00:08:25.646 A:middle
Likewise, OpenGL views
are in a similar place.

00:08:25.646 --> 00:08:27.776 A:middle
You may notice kind of a
hardware accelerated theme going

00:08:27.776 --> 00:08:30.366 A:middle
on using the GPU, and
that's a good observation.

00:08:30.706 --> 00:08:33.326 A:middle
Some types of layers
also need a little bit

00:08:33.326 --> 00:08:34.106 A:middle
of help in these areas.

00:08:34.346 --> 00:08:36.826 A:middle
Movie layers and OpenGL layers
kind of get grandfathered

00:08:36.826 --> 00:08:39.135 A:middle
in with the views, but
other things like layers

00:08:39.135 --> 00:08:41.246 A:middle
with 3D transforms and layers

00:08:41.246 --> 00:08:44.216 A:middle
with Core Image filters also
require a little bit of help

00:08:44.376 --> 00:08:45.956 A:middle
to show up in a title
bar and toolbar.

00:08:46.526 --> 00:08:47.936 A:middle
Let me show you how
you can do that.

00:08:48.806 --> 00:08:51.646 A:middle
We have to place them
there explicitly,

00:08:51.706 --> 00:08:54.756 A:middle
and we can do this using this
new window style mask called

00:08:54.806 --> 00:08:56.786 A:middle
NSFullSize ContentView
WindowMask.

00:08:56.786 --> 00:09:00.236 A:middle
This is a simple demo
app I threw together.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:56.786 --> 00:09:00.236 A:middle
This is a simple demo
app I threw together.

00:09:00.586 --> 00:09:02.206 A:middle
This is using a style mask

00:09:02.206 --> 00:09:04.536 A:middle
that does not include the
full size content view flag,

00:09:04.666 --> 00:09:08.046 A:middle
and you can see our content view
is vertically beneath the title

00:09:08.046 --> 00:09:11.196 A:middle
bar and toolbar, and this
content view just has a slightly

00:09:11.196 --> 00:09:13.276 A:middle
odd red box and black box.

00:09:13.756 --> 00:09:15.856 A:middle
If we add the full size
ContentView WindowMask,

00:09:16.806 --> 00:09:19.276 A:middle
all of a sudden the content
view size hasn't changed

00:09:19.746 --> 00:09:21.366 A:middle
but the title bar and
toolbar are overlaid

00:09:21.366 --> 00:09:22.346 A:middle
on top of that content.

00:09:22.346 --> 00:09:24.296 A:middle
You can see it blurring
the red and the black

00:09:24.296 --> 00:09:25.666 A:middle
in the title bar there.

00:09:26.476 --> 00:09:27.866 A:middle
So, if you look at this mock-up

00:09:27.866 --> 00:09:30.326 A:middle
and you use the FullSize
ContentView WindowMask,

00:09:30.706 --> 00:09:33.566 A:middle
a problem you'll notice is that
those controls you used to have

00:09:33.566 --> 00:09:35.966 A:middle
at the top of your window are
still at the top of your window

00:09:36.336 --> 00:09:38.576 A:middle
but the title bar overlays them.

00:09:39.256 --> 00:09:42.966 A:middle
And unless you're trying to
play a very intricate mind game

00:09:42.966 --> 00:09:44.926 A:middle
with your user, and if
you are your job is done,

00:09:44.926 --> 00:09:47.566 A:middle
congratulations, you're going
to want figure out a way

00:09:47.646 --> 00:09:50.506 A:middle
to get your controls to
be anchored at the bottom

00:09:50.506 --> 00:09:51.306 A:middle
of the title bar again.

00:09:52.046 --> 00:09:56.346 A:middle
And probably the easiest way to
do this is by using Auto Layout.

00:09:57.016 --> 00:10:00.476 A:middle
So, NSWindow offers
a new property called


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:57.016 --> 00:10:00.476 A:middle
So, NSWindow offers
a new property called

00:10:00.476 --> 00:10:04.446 A:middle
contentLayoutGuide and
this returns an object

00:10:04.446 --> 00:10:06.206 A:middle
that you can use in
a layout constraint,

00:10:06.206 --> 00:10:07.676 A:middle
just like you would
use in NSView.

00:10:08.226 --> 00:10:11.606 A:middle
The example here I'm creating a
constraint which binds the top

00:10:11.606 --> 00:10:14.586 A:middle
of my view to the top of the
windows contentLayoutGuide,

00:10:14.586 --> 00:10:16.416 A:middle
and that means that
the top coordinate

00:10:16.416 --> 00:10:18.626 A:middle
of both our views is going to be
at the same place in the window

00:10:18.656 --> 00:10:21.046 A:middle
when Auto Layout lays them out.

00:10:21.416 --> 00:10:25.116 A:middle
If you're not using Auto
Layout, sorry, we have a new API

00:10:25.336 --> 00:10:28.886 A:middle
in Yosemite on layout
constraints called the active

00:10:28.956 --> 00:10:31.446 A:middle
property, and you can now
install a constraint just

00:10:31.446 --> 00:10:33.576 A:middle
by setting it to be
active, you don't need

00:10:33.576 --> 00:10:37.796 A:middle
to find a common ancestor
to add the constraint to.

00:10:38.326 --> 00:10:39.246 A:middle
In this case,

00:10:39.346 --> 00:10:41.536 A:middle
the contentLayoutGuide doesn't
necessarily have a common

00:10:41.536 --> 00:10:45.976 A:middle
ancestor and this API
takes care of it for you.

00:10:46.056 --> 00:10:48.466 A:middle
If you're not using Auto
Layout we have another property

00:10:48.466 --> 00:10:50.176 A:middle
for you called
contentLayoutRect,

00:10:50.326 --> 00:10:51.426 A:middle
and that's just an NSRect

00:10:51.426 --> 00:10:56.356 A:middle
that represents the
unobscured area of the window.

00:10:56.956 --> 00:10:58.466 A:middle
Its key-value observing
compliant,

00:10:58.996 --> 00:11:01.196 A:middle
which means if you register
as a key-value observer


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.996 --> 00:11:01.196 A:middle
which means if you register
as a key-value observer

00:11:01.236 --> 00:11:03.026 A:middle
for it you're going to get
called back when it changes,

00:11:03.426 --> 00:11:05.696 A:middle
and that's important
because it can change.

00:11:05.846 --> 00:11:09.026 A:middle
The title bar can change height,
the toolbar can have items added

00:11:09.026 --> 00:11:11.006 A:middle
or removed or labels
added and removed.

00:11:11.006 --> 00:11:12.806 A:middle
You can go from small icon
mode to large icon mode,

00:11:13.126 --> 00:11:14.796 A:middle
so it's important
to be aware of it.

00:11:15.646 --> 00:11:16.816 A:middle
Anyway, assuming we use one

00:11:16.816 --> 00:11:19.616 A:middle
of those methods we can now
layout our buttons beneath the

00:11:19.616 --> 00:11:20.536 A:middle
title bar the way we want.

00:11:20.536 --> 00:11:21.746 A:middle
They're accessible
to the user again,

00:11:22.286 --> 00:11:25.336 A:middle
but the scroll view presents
kind of a challenge for us.

00:11:25.586 --> 00:11:29.106 A:middle
We want it to start off
unobscured by the title bar

00:11:29.106 --> 00:11:31.506 A:middle
and we don't want the
scroller to be obscured

00:11:31.506 --> 00:11:32.696 A:middle
by the title bar either.

00:11:32.986 --> 00:11:36.076 A:middle
However, if we just leave the
scroll view positioned to take

00:11:36.076 --> 00:11:38.476 A:middle
up the entire height of the
content view, it will be.

00:11:38.476 --> 00:11:42.286 A:middle
So we need a way to fix that,
and we have a way to fix that.

00:11:42.966 --> 00:11:43.866 A:middle
We have a new API

00:11:43.866 --> 00:11:46.456 A:middle
on NSScrollView called
contentInsets,

00:11:46.706 --> 00:11:49.596 A:middle
and this just adds margins
around the scroll view

00:11:50.006 --> 00:11:51.806 A:middle
where we'll inset
the content view.

00:11:52.316 --> 00:11:56.266 A:middle
So, in this example I'm using
the contentLayoutRect property

00:11:56.266 --> 00:11:59.486 A:middle
of the window and the windows
frame to infer the offset

00:11:59.556 --> 00:12:02.376 A:middle
between the top of the window
and the top of the content area,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.556 --> 00:12:02.376 A:middle
between the top of the window
and the top of the content area,

00:12:02.376 --> 00:12:04.836 A:middle
and I had just gone ahead,
and set a contentInsets

00:12:04.836 --> 00:12:06.756 A:middle
where its top property
is equal to that offset,

00:12:07.466 --> 00:12:09.106 A:middle
there's an easier
way of doing this.

00:12:09.106 --> 00:12:10.616 A:middle
If you do this you're
going to need a key-value

00:12:10.616 --> 00:12:12.816 A:middle
to observe the contentLayoutRect
notice when it changes.

00:12:13.466 --> 00:12:15.866 A:middle
NSScroll view also
offers a Boolean called

00:12:15.866 --> 00:12:17.736 A:middle
automaticallyAdjusts
ContentInsets.

00:12:17.736 --> 00:12:19.786 A:middle
And if you set this to Yes,

00:12:20.296 --> 00:12:23.736 A:middle
it will automatically
adjust your contents

00:12:23.736 --> 00:12:25.676 A:middle
so the scroller isn't
obscured by the title bar

00:12:25.676 --> 00:12:27.746 A:middle
and the content itself
will start unobscured

00:12:27.746 --> 00:12:28.446 A:middle
by the title bar.

00:12:28.446 --> 00:12:32.036 A:middle
So if we hit back our little
simplified example here,

00:12:32.326 --> 00:12:33.786 A:middle
this is how the window will look

00:12:33.786 --> 00:12:35.976 A:middle
like when it's opened
by the user.

00:12:36.476 --> 00:12:38.916 A:middle
When they begin scrolling the
scroll view content can still

00:12:38.916 --> 00:12:41.156 A:middle
slide under the title
bar just the way we want

00:12:41.156 --> 00:12:45.146 A:middle
and we can get this appearance
of blurring the document content

00:12:45.146 --> 00:12:47.876 A:middle
or the title bar without
[inaudible] replicating it

00:12:47.926 --> 00:12:48.216 A:middle
for you.

00:12:48.276 --> 00:12:53.266 A:middle
So I'd like to show you
another screenshot here.

00:12:53.266 --> 00:12:57.236 A:middle
This is a picture of Safari, and
something you're going to notice

00:12:57.236 --> 00:13:00.356 A:middle
about it is that the title
of the window isn't there,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:57.236 --> 00:13:00.356 A:middle
about it is that the title
of the window isn't there,

00:13:00.356 --> 00:13:03.856 A:middle
instead the window widgets and
the toolbar share the same row.

00:13:04.416 --> 00:13:06.036 A:middle
Likewise here's a
picture of Maps.

00:13:06.496 --> 00:13:07.496 A:middle
It's doing a similar thing.

00:13:07.866 --> 00:13:10.196 A:middle
Notice the title bar is
grabbing that content

00:13:10.196 --> 00:13:13.396 A:middle
from the window again,
but it's also leaving

00:13:13.396 --> 00:13:14.456 A:middle
out the title of the window.

00:13:15.396 --> 00:13:18.326 A:middle
So, if you want to do this in
your apps, it's not difficult.

00:13:18.796 --> 00:13:21.646 A:middle
We have a new enumeration
called NSWindow TitleVisiblity,

00:13:21.646 --> 00:13:24.846 A:middle
it has three states, Visible,
Hidden, and Hidden When Active.

00:13:25.446 --> 00:13:27.716 A:middle
Hidden When Active adds
a little bit of context

00:13:27.716 --> 00:13:29.826 A:middle
so when a window goes to the
background the title comes back.

00:13:29.826 --> 00:13:33.956 A:middle
That could distinguish it from
otherwise similar windows.

00:13:34.006 --> 00:13:37.366 A:middle
These are settable through the
NSWindowTitleVisiblity property.

00:13:37.696 --> 00:13:40.306 A:middle
So just a quick example, here's
that Finder window again,

00:13:40.746 --> 00:13:43.506 A:middle
this is TitleVisible, and you
can see it has a separate row

00:13:43.506 --> 00:13:47.666 A:middle
for the widgets and the title,
followed by the toolbar.

00:13:47.666 --> 00:13:51.416 A:middle
Whereas NSWindowTitleHidden,
it's gone, the title's gone,

00:13:51.416 --> 00:13:53.496 A:middle
the window widgets and the
toolbar share the same row.

00:13:54.186 --> 00:13:56.776 A:middle
Here's another picture, this
is an app called Reminders.

00:13:56.996 --> 00:13:58.706 A:middle
If you didn't know
this was Reminders,

00:13:58.936 --> 00:14:01.176 A:middle
there's a hint at the top.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.936 --> 00:14:01.176 A:middle
there's a hint at the top.

00:14:01.646 --> 00:14:04.696 A:middle
But you can see the window
is divided into two sections.

00:14:04.696 --> 00:14:08.516 A:middle
They have a sidebar that runs
all the way from the bottom

00:14:08.516 --> 00:14:10.216 A:middle
of the window to the
top of the window,

00:14:10.216 --> 00:14:12.026 A:middle
but you'll note the
sidebar is not being blurred

00:14:12.026 --> 00:14:12.736 A:middle
by the title bar.

00:14:14.166 --> 00:14:15.356 A:middle
Likewise, here's a
picture of Notes,

00:14:15.706 --> 00:14:16.886 A:middle
and they're doing
a similar thing,

00:14:17.226 --> 00:14:19.906 A:middle
the note on the right actually
has this nice paper texture

00:14:19.906 --> 00:14:21.996 A:middle
to it and that paper
texture goes all the way

00:14:21.996 --> 00:14:23.066 A:middle
to the top of the window again.

00:14:23.626 --> 00:14:25.396 A:middle
And this is also
easy to accomplish,

00:14:25.856 --> 00:14:28.506 A:middle
NSWindow has a new
property called

00:14:28.506 --> 00:14:29.786 A:middle
titlebarAppearsTransparent.

00:14:30.296 --> 00:14:33.196 A:middle
So, if we go back to my
silly little red box,

00:14:33.196 --> 00:14:34.526 A:middle
black box example, this is

00:14:34.586 --> 00:14:37.076 A:middle
at when titlebar
AppearsTransparent equals No,

00:14:37.076 --> 00:14:37.916 A:middle
and that's the default.

00:14:37.916 --> 00:14:40.546 A:middle
So you can see the title
bar is blurring our content.

00:14:40.866 --> 00:14:44.986 A:middle
If we set it to Yes, the red box

00:14:44.986 --> 00:14:46.306 A:middle
and the black box
are unobscured.

00:14:46.606 --> 00:14:48.816 A:middle
So you can do tricks like
put views that go all the way

00:14:48.816 --> 00:14:50.416 A:middle
from the bottom of
the window to the top

00:14:50.626 --> 00:14:54.146 A:middle
or otherwise augment
the title bar.

00:14:54.366 --> 00:14:56.586 A:middle
So, I'd like to invite
Corbin on stage.

00:14:56.586 --> 00:14:59.036 A:middle
He's going to talk about some
new API's that'll let you take

00:14:59.036 --> 00:15:02.136 A:middle
advantage of our visual effects,
especially one called Vibrancy.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.036 --> 00:15:02.136 A:middle
advantage of our visual effects,
especially one called Vibrancy.

00:15:02.696 --> 00:15:03.286 A:middle
Welcome, Corbin.

00:15:03.686 --> 00:15:04.166 A:middle
&gt;&gt; Thanks, Chris.

00:15:04.516 --> 00:15:07.486 A:middle
So, my name's Corbin Dunn, and
I'm an AppKit Software Engineer.

00:15:08.626 --> 00:15:10.356 A:middle
So, what am I going
to talk about today?

00:15:10.356 --> 00:15:12.566 A:middle
I'm going to talk about
a new class in AppKit

00:15:12.826 --> 00:15:14.396 A:middle
to do these blurring
and visual effects

00:15:14.426 --> 00:15:15.756 A:middle
called NSVisualEffectView.

00:15:15.756 --> 00:15:18.706 A:middle
I'm going to talk about
NSAppearance and some materials

00:15:18.706 --> 00:15:21.776 A:middle
and how to get the custom
colors and whatnot that we have.

00:15:22.556 --> 00:15:24.776 A:middle
Then we'll talk about Vibrancy
and how to get that vibrancy

00:15:24.956 --> 00:15:26.166 A:middle
and how to do it
in your controls

00:15:26.376 --> 00:15:27.646 A:middle
and standard controls in AppKit.

00:15:28.086 --> 00:15:30.306 A:middle
And then finally I'm going
to discuss briefly some

00:15:30.306 --> 00:15:33.096 A:middle
of the standard controls in
AppKit that adopt these features

00:15:33.176 --> 00:15:35.156 A:middle
and how we do it and
how it affects you.

00:15:36.126 --> 00:15:39.476 A:middle
So, first of all let's jump
right in and go to a demo.

00:15:40.166 --> 00:15:42.866 A:middle
This demo is called
VisualEffectPlayground,

00:15:43.416 --> 00:15:45.676 A:middle
and it's not an actual
playground app

00:15:45.676 --> 00:15:50.116 A:middle
like you might think, but what
it has here is it shows a lot

00:15:50.116 --> 00:15:52.486 A:middle
of the features that I'm
going to discuss today.

00:15:52.486 --> 00:15:53.806 A:middle
There are a lot of
buttons in this app,

00:15:54.196 --> 00:15:56.026 A:middle
and they show each
thing that I talk about.

00:15:56.556 --> 00:15:58.566 A:middle
Search on the developer's
site for Yosemite

00:15:58.566 --> 00:16:00.916 A:middle
for VisualEffectPlayground
and you can find this,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.566 --> 00:16:00.916 A:middle
for VisualEffectPlayground
and you can find this,

00:16:01.286 --> 00:16:03.116 A:middle
take it apart, and play around
with it and figure out how

00:16:03.116 --> 00:16:04.266 A:middle
to create apps like this.

00:16:04.966 --> 00:16:06.416 A:middle
So some things that it
does, if I click one

00:16:06.416 --> 00:16:08.226 A:middle
of these images here
it shows how

00:16:08.336 --> 00:16:10.506 A:middle
to create basically your
own type of sidebar,

00:16:10.506 --> 00:16:11.896 A:middle
how to do some vibrancy.

00:16:12.396 --> 00:16:16.576 A:middle
There's a couple examples of
how to do some type of blurring

00:16:16.576 --> 00:16:19.906 A:middle
with a maps type of application,
how to get to blur here,

00:16:19.906 --> 00:16:23.686 A:middle
and it also will blur
under the title bar, too.

00:16:23.936 --> 00:16:26.106 A:middle
Another one showing off
our dark look too and how

00:16:26.106 --> 00:16:28.486 A:middle
to do something similar
to what FaceTime does.

00:16:29.826 --> 00:16:31.736 A:middle
So these new visual
effects, I'm going to talk

00:16:31.736 --> 00:16:33.986 A:middle
about a new class called
NSVisualEffectView,

00:16:34.266 --> 00:16:37.116 A:middle
and here's a screenshot of it,
and we see that it's blending

00:16:37.116 --> 00:16:38.876 A:middle
with stuff behind the window.

00:16:40.276 --> 00:16:42.176 A:middle
Here's another screenshot
of the demo application

00:16:42.176 --> 00:16:44.516 A:middle
and it's blending with
stuff inside the window.

00:16:45.846 --> 00:16:48.126 A:middle
And now this is an
important difference to note

00:16:48.276 --> 00:16:49.976 A:middle
because we have two
concepts here.

00:16:50.316 --> 00:16:53.736 A:middle
We have behind window blending,
where whatever's behind the view

00:16:53.736 --> 00:16:56.706 A:middle
and behind the window is blended
with what you see and we have

00:16:56.706 --> 00:16:57.866 A:middle
within window blending.

00:16:58.166 --> 00:16:59.726 A:middle
So there are two
different modes for this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.436 --> 00:17:03.346 A:middle
And so that's reflected in the
API for NSVisualEffectView.

00:17:03.776 --> 00:17:06.836 A:middle
There's an ENUM and it's
NSVisualEffect BlendingMode

00:17:06.836 --> 00:17:09.836 A:middle
and it has two options,
blending mode behind window,

00:17:10.136 --> 00:17:12.566 A:middle
and a blending mode
within window,

00:17:12.945 --> 00:17:14.826 A:middle
and then property to set it.

00:17:15.636 --> 00:17:19.195 A:middle
So, you can just set
and code or you can open

00:17:19.195 --> 00:17:23.136 A:middle
up your application
inside of Interface Builder

00:17:23.246 --> 00:17:25.685 A:middle
and you can go ahead and set
the blending mode directly here.

00:17:26.036 --> 00:17:28.215 A:middle
It's really easy to do,
to get that behind window

00:17:28.215 --> 00:17:29.106 A:middle
or in-window blending.

00:17:31.256 --> 00:17:32.856 A:middle
So how does this work?

00:17:33.066 --> 00:17:36.396 A:middle
How does the behind window
blending actually behave

00:17:36.396 --> 00:17:37.336 A:middle
and what does it do?

00:17:37.726 --> 00:17:40.366 A:middle
Well, our implementation
is in Core Graphics

00:17:40.366 --> 00:17:41.306 A:middle
and the Windows Server.

00:17:41.546 --> 00:17:43.736 A:middle
This means that as your
window is moving around,

00:17:44.056 --> 00:17:46.576 A:middle
none of the content in your
window is actually redrawn,

00:17:47.026 --> 00:17:48.796 A:middle
it's managed for
you automatically

00:17:48.796 --> 00:17:49.816 A:middle
by our Window Server.

00:17:50.626 --> 00:17:54.056 A:middle
What NSWindow EffectView does
is it kind of finds regions

00:17:54.056 --> 00:17:56.676 A:middle
with the Window Server to
tell it, hey, this is the area

00:17:56.676 --> 00:17:58.776 A:middle
that I want to be
vibrant or to be blurred,

00:17:58.916 --> 00:18:00.316 A:middle
and do it automatically.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.916 --> 00:18:00.316 A:middle
and do it automatically.

00:18:01.016 --> 00:18:03.696 A:middle
The visual effect view
also implements Vibrancy,

00:18:03.766 --> 00:18:09.316 A:middle
and I'm going to discuss about
that in detail in a little bit.

00:18:09.576 --> 00:18:12.776 A:middle
So, one thing to note about
this and the visual effect view

00:18:12.776 --> 00:18:13.956 A:middle
with behind window blending,

00:18:14.456 --> 00:18:17.586 A:middle
whatever is behind your view
inside your application is going

00:18:17.586 --> 00:18:19.626 A:middle
to be poked out or knocked out.

00:18:20.186 --> 00:18:22.726 A:middle
So if I have this view inside
my window and it's on top

00:18:22.726 --> 00:18:24.676 A:middle
of an image view, a
picture of this elephant,

00:18:25.086 --> 00:18:26.906 A:middle
it's going to poke out
whatever's behind it,

00:18:27.156 --> 00:18:29.686 A:middle
and so it kind of
just knocks it out.

00:18:30.096 --> 00:18:32.286 A:middle
So it's something to be
aware of in your application.

00:18:32.886 --> 00:18:37.726 A:middle
So, how does within
window blending work?

00:18:38.156 --> 00:18:40.746 A:middle
Within window blending
utilizes Core Animation

00:18:40.746 --> 00:18:41.556 A:middle
to achieve this effect.

00:18:42.636 --> 00:18:46.066 A:middle
NSVisualEffectView uses special
layers and special filters

00:18:46.066 --> 00:18:47.836 A:middle
to do this work behind
the scenes.

00:18:48.606 --> 00:18:50.596 A:middle
Core Animation is also used
to implement the Vibrancy,

00:18:50.596 --> 00:18:52.786 A:middle
which I'll talk about
more in a little bit.

00:18:54.016 --> 00:18:56.096 A:middle
Now, if it's used
in Core Animation

00:18:56.506 --> 00:18:58.616 A:middle
and you set the property
to be within window,

00:18:59.386 --> 00:19:01.036 A:middle
it requires layer backing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.386 --> 00:19:01.036 A:middle
it requires layer backing.

00:19:01.456 --> 00:19:03.386 A:middle
And so this is a
screenshot of what happens

00:19:03.386 --> 00:19:05.416 A:middle
in Interface Builder if you
don't have it layer-backed.

00:19:05.946 --> 00:19:07.806 A:middle
It'll show it has
red, to indicate, hey,

00:19:07.806 --> 00:19:08.806 A:middle
you're doing something wrong

00:19:09.036 --> 00:19:10.456 A:middle
and should probably
make it layer-backed.

00:19:11.256 --> 00:19:13.216 A:middle
But you probably don't want

00:19:13.216 --> 00:19:15.346 A:middle
to make just your visual
effect view the thing that's

00:19:15.346 --> 00:19:17.476 A:middle
layer-backed, you
want to make the thing

00:19:17.476 --> 00:19:19.666 A:middle
that contains it
be layer-backed.

00:19:20.136 --> 00:19:21.516 A:middle
So in this case,
the content view

00:19:21.516 --> 00:19:22.546 A:middle
of your window would
be the thing

00:19:22.546 --> 00:19:24.486 A:middle
that you make layer-backed,
because it needs

00:19:24.486 --> 00:19:25.696 A:middle
to blend those things together

00:19:25.696 --> 00:19:27.636 A:middle
and they both need
Core Animation layers

00:19:27.816 --> 00:19:29.506 A:middle
in order to achieve that.

00:19:31.616 --> 00:19:33.086 A:middle
So, how can you set it?

00:19:33.616 --> 00:19:39.146 A:middle
Well, you can also set this
easily inside of Xcode,

00:19:39.566 --> 00:19:41.226 A:middle
if you don't do any code
for the [inaudible] layer,

00:19:41.226 --> 00:19:43.816 A:middle
and you can just check that box
if you're not familiar with it,

00:19:43.816 --> 00:19:45.666 A:middle
it's been around for a
while, Core Animation layer.

00:19:46.116 --> 00:19:50.026 A:middle
Now let me talk about
some state.

00:19:50.546 --> 00:19:53.116 A:middle
The visual effect view
has an active state,

00:19:53.246 --> 00:19:55.346 A:middle
which we see here
blending with the window.

00:19:56.586 --> 00:19:59.986 A:middle
And it also has a
non-key or inactive state,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.186 --> 00:20:03.666 A:middle
so it automatically removes
the blurring and just goes

00:20:03.666 --> 00:20:05.646 A:middle
to being a solid color fill.

00:20:06.676 --> 00:20:08.746 A:middle
This is also represented in API.

00:20:09.476 --> 00:20:12.786 A:middle
So the visual effect view
has a property called state

00:20:13.226 --> 00:20:16.476 A:middle
and it's an ENUM value
NSVisualEffectState

00:20:17.036 --> 00:20:20.916 A:middle
and it has NSVisualEffect
StateFollows WindowActiveState,

00:20:20.916 --> 00:20:22.736 A:middle
which is probably
what you want to do.

00:20:22.736 --> 00:20:25.206 A:middle
And what this means is
when your window is key

00:20:25.206 --> 00:20:28.156 A:middle
and your window is active that
visual effect view will be key

00:20:28.156 --> 00:20:31.086 A:middle
and active, but you may want
to control it more explicitly.

00:20:31.466 --> 00:20:33.376 A:middle
So you can explicitly
set the active state

00:20:34.056 --> 00:20:38.276 A:middle
or explicitly set the inactive
state and actually full power,

00:20:38.276 --> 00:20:39.286 A:middle
and full control over this.

00:20:40.546 --> 00:20:42.726 A:middle
Now the things about
that, as I said before,

00:20:42.726 --> 00:20:46.596 A:middle
you want probably always use the
FollowsWindowsActiveState value

00:20:46.596 --> 00:20:49.096 A:middle
because if your window
becomes key and non-key,

00:20:49.096 --> 00:20:50.656 A:middle
it'll automatically
do the work for you

00:20:50.656 --> 00:20:51.876 A:middle
and you don't have
to do anything.

00:20:52.076 --> 00:20:55.576 A:middle
You want to use the active state
explicitly, very sparingly.

00:20:56.176 --> 00:20:57.746 A:middle
It can affect performance
and battery life,

00:20:57.746 --> 00:20:59.406 A:middle
because if you have a lot
of visual effect views

00:20:59.406 --> 00:21:02.876 A:middle
around they're always active,
but you probably want to use it


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.406 --> 00:21:02.876 A:middle
around they're always active,
but you probably want to use it

00:21:02.876 --> 00:21:04.736 A:middle
in places where you know
that view is always going

00:21:04.736 --> 00:21:06.706 A:middle
to be active and
maybe it's a panel

00:21:06.706 --> 00:21:08.676 A:middle
that can't become key
for whatever reason.

00:21:09.376 --> 00:21:11.856 A:middle
Internally we use it in things
like popovers and sheets,

00:21:11.856 --> 00:21:14.106 A:middle
which always want to have
that particular look.

00:21:16.296 --> 00:21:19.196 A:middle
So, that was discussing
some of the basic properties

00:21:19.196 --> 00:21:22.946 A:middle
of visual effect view, now
let me discuss how do set the

00:21:22.946 --> 00:21:25.546 A:middle
material and how it
works with NSAppearance

00:21:25.836 --> 00:21:27.386 A:middle
and visual effect view itself.

00:21:27.906 --> 00:21:32.346 A:middle
As Chris mentioned, here are
two screenshots showing two

00:21:32.346 --> 00:21:33.226 A:middle
different appearances.

00:21:33.666 --> 00:21:36.056 A:middle
We have the NSAppearance
NameVibrantLight

00:21:36.426 --> 00:21:39.206 A:middle
to get this light
appearance and light controls.

00:21:39.206 --> 00:21:42.556 A:middle
And we have NSAppearance
NameVibrantDark

00:21:42.916 --> 00:21:45.146 A:middle
to get the dark look
and dark appearance.

00:21:45.516 --> 00:21:47.686 A:middle
And notice the controls
automatically look different

00:21:48.196 --> 00:21:50.766 A:middle
and automatically are
changing the colors as needed.

00:21:51.336 --> 00:21:55.406 A:middle
It's easy to do this,
you can just use

00:21:55.876 --> 00:21:58.586 A:middle
visualEffectView.appearance
and set the appearance

00:21:58.636 --> 00:22:00.286 A:middle
to either VibrantLight
or VibrantDark


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.636 --> 00:22:00.286 A:middle
to either VibrantLight
or VibrantDark

00:22:00.546 --> 00:22:02.316 A:middle
and do it in code, very simple.

00:22:03.096 --> 00:22:06.206 A:middle
Or, as usual, you can go
into Interface Builder,

00:22:06.716 --> 00:22:08.026 A:middle
select Visual Effect View,

00:22:08.636 --> 00:22:12.016 A:middle
and when you select the Visual
Effect View the appearance

00:22:12.256 --> 00:22:13.986 A:middle
property will now
have Vibrant Light

00:22:14.276 --> 00:22:15.706 A:middle
and Vibrant Dark as options.

00:22:16.186 --> 00:22:17.816 A:middle
Other views won't
have this option.

00:22:18.666 --> 00:22:24.016 A:middle
So, the vibrant appearances
require and NSVisualEffectView.

00:22:24.016 --> 00:22:26.436 A:middle
I'm going to say more
about this in a bit, why.

00:22:27.106 --> 00:22:32.266 A:middle
That visual effect view can
be a direct ancestor or has

00:22:32.266 --> 00:22:35.096 A:middle
to be a direct ancestor of
your child views in order

00:22:35.096 --> 00:22:37.056 A:middle
to get the vibrant look
in the vibrant effect.

00:22:38.496 --> 00:22:40.216 A:middle
However, whatever
materials shown

00:22:40.216 --> 00:22:42.986 A:middle
by the visual effect
view may be different

00:22:43.496 --> 00:22:46.886 A:middle
than what the appearance is
saying, and let me describe

00:22:46.886 --> 00:22:47.956 A:middle
that a little bit differently.

00:22:48.636 --> 00:22:51.356 A:middle
Visual effect view has a
property called material.

00:22:51.996 --> 00:22:57.076 A:middle
The NSVisual EffectMaterial
has several ENUM values.

00:22:57.686 --> 00:23:00.566 A:middle
The first one is what you
will probably use the majority


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:57.686 --> 00:23:00.566 A:middle
The first one is what you
will probably use the majority

00:23:00.566 --> 00:23:02.646 A:middle
of the time, and
it's NSVisualEffect

00:23:02.646 --> 00:23:04.336 A:middle
MaterialAppearanceBased.

00:23:04.886 --> 00:23:06.406 A:middle
So let me show you
how that one works.

00:23:06.996 --> 00:23:11.426 A:middle
If you have a visual
effect view and it's set

00:23:11.476 --> 00:23:14.056 A:middle
to NSVisualEffect
MaterialAppearanceBased,

00:23:14.886 --> 00:23:16.406 A:middle
the actual materials shown

00:23:16.406 --> 00:23:19.226 A:middle
by the visual effect view
is automatically determined

00:23:19.726 --> 00:23:20.746 A:middle
by the appearance.

00:23:21.126 --> 00:23:22.676 A:middle
So if you set the
VibrantLight appearance,

00:23:23.496 --> 00:23:26.396 A:middle
the MaterialLight will appear
for that visual effect view.

00:23:26.396 --> 00:23:28.596 A:middle
If you set the VibrantDark
appearance,

00:23:29.126 --> 00:23:31.806 A:middle
the MaterialDark will appear
for the visual effect view.

00:23:32.786 --> 00:23:34.616 A:middle
Now you can explicitly
set the material

00:23:34.616 --> 00:23:35.836 A:middle
and not set the appearance,

00:23:35.836 --> 00:23:37.416 A:middle
which is why it's
an ENUM option.

00:23:37.916 --> 00:23:42.466 A:middle
So the last option here is
NSVisual EffectMaterialTitlebar.

00:23:43.166 --> 00:23:45.556 A:middle
And so what this
material is for is for you

00:23:45.556 --> 00:23:48.176 A:middle
to create your own
title bar like views.

00:23:48.416 --> 00:23:50.616 A:middle
So you may have a need
in your application

00:23:50.916 --> 00:23:53.446 A:middle
to replicate the titlebar
that we do inside the AppKit,

00:23:53.476 --> 00:23:56.826 A:middle
and we just use this and this
VisualEffect MaterialTitle Bar

00:23:56.856 --> 00:23:58.606 A:middle
internally, and so
you can also use it

00:23:58.606 --> 00:24:01.066 A:middle
to create your own title
bars if you need to.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.606 --> 00:24:01.066 A:middle
to create your own title
bars if you need to.

00:24:01.356 --> 00:24:04.206 A:middle
All right, so that was
discussing visual effect view,

00:24:04.546 --> 00:24:06.736 A:middle
appearance, and some
of the materials.

00:24:06.886 --> 00:24:10.066 A:middle
So now I'm going to talk about
Vibrancy and custom controls.

00:24:11.416 --> 00:24:13.676 A:middle
First of all, well,
what is Vibrancy?

00:24:14.256 --> 00:24:16.796 A:middle
And Vibrancy is just
basically a special blend mode

00:24:16.796 --> 00:24:18.626 A:middle
where we're taking
two difference pixels,

00:24:18.626 --> 00:24:21.146 A:middle
combining them together, and
getting a different result

00:24:21.146 --> 00:24:23.666 A:middle
that looks more vibrant when
they're combined together.

00:24:24.656 --> 00:24:27.566 A:middle
Vibrancy is just an abstract
term that we coined in AppKit,

00:24:27.966 --> 00:24:29.416 A:middle
and that way you
don't have to worry

00:24:29.416 --> 00:24:30.756 A:middle
about the actual implementation.

00:24:31.286 --> 00:24:32.756 A:middle
The actual implementation
and blending

00:24:32.756 --> 00:24:34.756 A:middle
that we do could
be a Linear Burn,

00:24:34.916 --> 00:24:36.096 A:middle
a Color Dodge, PlusD, PlusL.

00:24:36.096 --> 00:24:39.396 A:middle
It doesn't matter, we're
abstracting it for you.

00:24:40.126 --> 00:24:41.926 A:middle
But if you don't know
what those terms mean,

00:24:42.426 --> 00:24:43.576 A:middle
let me give an example.

00:24:44.346 --> 00:24:48.346 A:middle
So here's just a simple
image of some flowers,

00:24:48.346 --> 00:24:51.246 A:middle
and if I drop a little
square onto it,

00:24:51.606 --> 00:24:54.766 A:middle
it's just a solid gray
square with a darker border,

00:24:55.136 --> 00:24:56.636 A:middle
and if I set it to
be color burned,

00:24:57.006 --> 00:24:58.786 A:middle
as you can see it
looks more vibrant.

00:24:59.506 --> 00:25:01.856 A:middle
So effectively this is what
we're doing to our controls,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.506 --> 00:25:01.856 A:middle
So effectively this is what
we're doing to our controls,

00:25:01.856 --> 00:25:04.616 A:middle
and this is just a very simple
example of what color burn

00:25:04.936 --> 00:25:06.436 A:middle
and what we mean by Vibrancy.

00:25:07.026 --> 00:25:11.466 A:middle
So how does this work
with visual effect view,

00:25:12.156 --> 00:25:14.116 A:middle
and how does the
text become vibrant?

00:25:15.066 --> 00:25:17.926 A:middle
Let's take a look at
what you have to do.

00:25:18.436 --> 00:25:20.516 A:middle
First of all, in order to
get any sort of Vibrancy,

00:25:20.516 --> 00:25:22.506 A:middle
you have to use the
vibrant appearance.

00:25:22.506 --> 00:25:24.216 A:middle
So you have to set
the VibrantLight

00:25:24.416 --> 00:25:27.776 A:middle
or VibrantDark appearance, and
then Vibrancy is automatically

00:25:27.776 --> 00:25:28.886 A:middle
and abstractly applied.

00:25:29.306 --> 00:25:36.016 A:middle
So for this little piece of text
here in order to get this text

00:25:36.016 --> 00:25:38.736 A:middle
to look vibrant, and it
might be difficult to see,

00:25:38.736 --> 00:25:41.716 A:middle
but it is actually blending with
the contents behind the window,

00:25:42.486 --> 00:25:45.566 A:middle
you just use NSColor labelColor,
and it looks more vibrant.

00:25:47.216 --> 00:25:50.746 A:middle
You may also have a need for
a secondary vibrant look,

00:25:50.746 --> 00:25:52.656 A:middle
and this one's just
slightly lighter

00:25:52.896 --> 00:25:54.226 A:middle
and it looks a little
bit different.

00:25:55.336 --> 00:25:58.526 A:middle
And again, we have a new color,
NSColor secondaryLabelColor

00:25:58.866 --> 00:26:03.946 A:middle
to achieve this Vibrancy
in this text field.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.866 --> 00:26:03.946 A:middle
to achieve this Vibrancy
in this text field.

00:26:04.116 --> 00:26:07.406 A:middle
Now, let me remind you
about some template images.

00:26:07.526 --> 00:26:08.466 A:middle
You may or may not be aware

00:26:08.466 --> 00:26:12.996 A:middle
that NSImage has had a
template property since 10.5

00:26:13.386 --> 00:26:16.856 A:middle
and it's really simple, you can
create your image as a black

00:26:16.856 --> 00:26:19.606 A:middle
and white image and
do Set Template Yes.

00:26:19.826 --> 00:26:21.396 A:middle
We'll have a specific
naming convention

00:26:21.396 --> 00:26:23.626 A:middle
to make it a template, and
that gives you a template image

00:26:23.926 --> 00:26:26.416 A:middle
where we can apply effects on
top of it instead of AppKit.

00:26:26.926 --> 00:26:29.686 A:middle
So if you're using
a template image,

00:26:30.326 --> 00:26:33.006 A:middle
NSImageView will
automatically apply Vibrancy.

00:26:34.316 --> 00:26:37.386 A:middle
So here's an example
of a regular image,

00:26:37.636 --> 00:26:38.646 A:middle
not a template image,

00:26:39.036 --> 00:26:41.266 A:middle
and it automatically
does not have Vibrancy.

00:26:42.506 --> 00:26:45.986 A:middle
However, this image below
automatically has Vibrancy

00:26:46.056 --> 00:26:47.666 A:middle
because it's using
a template image.

00:26:48.306 --> 00:26:51.146 A:middle
So if you and your application
use template images you can

00:26:51.206 --> 00:26:52.436 A:middle
automatically get Vibrancy.

00:26:53.006 --> 00:26:55.756 A:middle
So that begs the question,
well how does something

00:26:55.756 --> 00:26:59.616 A:middle
like Image View say, hey, I want
to be vibrant or not be vibrant?

00:26:59.616 --> 00:27:01.746 A:middle
And how does it dynamically
choose its answer?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.616 --> 00:27:01.746 A:middle
And how does it dynamically
choose its answer?

00:27:02.106 --> 00:27:06.546 A:middle
And the answer is we have new
API and NSView to do this,

00:27:06.966 --> 00:27:09.486 A:middle
and this is basically
the implementation inside

00:27:09.556 --> 00:27:13.306 A:middle
of NSImageView, it says
allowsVibrancy is the new API,

00:27:14.006 --> 00:27:15.996 A:middle
and the answer to
allows Vibrancy is

00:27:16.436 --> 00:27:18.896 A:middle
self.image.isTemplate,
which is saying, hey,

00:27:18.896 --> 00:27:20.536 A:middle
if I'm a template
I can be vibrant,

00:27:20.616 --> 00:27:22.616 A:middle
if I'm not a template,
I can't be vibrant.

00:27:23.106 --> 00:27:23.666 A:middle
Very simple.

00:27:23.666 --> 00:27:29.086 A:middle
So you may be wondering
then, well, how do I signal

00:27:29.086 --> 00:27:30.686 A:middle
to the system that
that's changed?

00:27:30.686 --> 00:27:33.716 A:middle
What if my answer is changing
based on something that I said,

00:27:33.716 --> 00:27:35.126 A:middle
like change the image
or whatnot?

00:27:35.766 --> 00:27:39.326 A:middle
And just like normal AppKit
things if you change the state

00:27:39.326 --> 00:27:40.906 A:middle
of Vibrancy or need the question

00:27:40.906 --> 00:27:42.836 A:middle
to be intAskedYouAgain
[phonetic],

00:27:43.136 --> 00:27:46.146 A:middle
just call setNeedsDisplay and
we'll automatically call back

00:27:46.286 --> 00:27:48.696 A:middle
and update the Vibrancy
effect for your view.

00:27:51.436 --> 00:27:54.706 A:middle
Now, NSTextField
also is vibrant.

00:27:55.296 --> 00:27:58.576 A:middle
NSTextField behaves very
similar to NSImageView

00:27:58.576 --> 00:28:01.186 A:middle
and it answers Yes
to allowsVibrancy


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.576 --> 00:28:01.186 A:middle
and it answers Yes
to allowsVibrancy

00:28:01.596 --> 00:28:03.686 A:middle
if you're using our
particular vibrant colors.

00:28:04.076 --> 00:28:05.966 A:middle
So, if you're inside
of a vibrant appearance

00:28:05.966 --> 00:28:08.696 A:middle
and you're using labelColor,
secondaryLabelColor,

00:28:09.236 --> 00:28:12.086 A:middle
or any other colors which might
be custom for that appearance,

00:28:12.506 --> 00:28:14.266 A:middle
they will probably
appear vibrant.

00:28:14.976 --> 00:28:17.066 A:middle
If you don't want the
text to appear vibrant,

00:28:17.316 --> 00:28:21.606 A:middle
you need to explicitly opt out
by setting the controlTextColor

00:28:21.856 --> 00:28:23.486 A:middle
or some other color
that's not there.

00:28:24.086 --> 00:28:28.766 A:middle
NSAppearance also has a method
called allowsVibrancy on it.

00:28:29.156 --> 00:28:31.526 A:middle
This is so you and
your API can know

00:28:31.526 --> 00:28:34.356 A:middle
if a particular appearance
needs Vibrancy or not.

00:28:34.356 --> 00:28:37.006 A:middle
I'm going to discuss more
about this in detail later.

00:28:37.946 --> 00:28:41.326 A:middle
But what this gives us
is it gives us a recipe

00:28:42.146 --> 00:28:43.386 A:middle
to let you know

00:28:43.386 --> 00:28:45.366 A:middle
when a particular view
is going to be vibrant.

00:28:46.276 --> 00:28:47.636 A:middle
Any view will be vibrant

00:28:47.926 --> 00:28:49.856 A:middle
if all these conditions
up here are true.

00:28:50.396 --> 00:28:53.366 A:middle
The appearance has to say
Yes from allowsVibrancy.

00:28:54.016 --> 00:28:56.266 A:middle
Which means currently,
that is, the VibrantLight

00:28:56.266 --> 00:28:57.356 A:middle
or VibrantDark appearance.

00:28:58.796 --> 00:29:01.716 A:middle
Your view subclass has to
override allowsVibrancy


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.796 --> 00:29:01.716 A:middle
Your view subclass has to
override allowsVibrancy

00:29:01.896 --> 00:29:05.146 A:middle
and say Yes, have you expressing
that it can be vibrant.

00:29:05.216 --> 00:29:09.176 A:middle
And that view has to be
inside of a VisualEffectView.

00:29:09.666 --> 00:29:12.246 A:middle
The VisualEffectView
is sort of the glue

00:29:12.246 --> 00:29:13.526 A:middle
that binds it all together.

00:29:14.056 --> 00:29:16.096 A:middle
If it's not contained inside
of a VisualEffectView,

00:29:16.216 --> 00:29:17.286 A:middle
Vibrancy will not work.

00:29:17.786 --> 00:29:20.156 A:middle
So when all these conditions
are met your control will

00:29:20.156 --> 00:29:20.826 A:middle
become vibrant.

00:29:20.826 --> 00:29:25.316 A:middle
So let's talk about custom
controls and Vibrancy

00:29:25.316 --> 00:29:27.886 A:middle
and what you can do in your
control to make them vibrant.

00:29:28.676 --> 00:29:34.676 A:middle
So here we have a custom view,
it's just drawing a gray oval

00:29:34.676 --> 00:29:36.336 A:middle
and then another gray
oval inside of it.

00:29:36.416 --> 00:29:38.066 A:middle
And this ones appearing vibrant,

00:29:38.446 --> 00:29:40.466 A:middle
you can see how it's
a deeper orange color,

00:29:40.856 --> 00:29:43.176 A:middle
the gray is being blended
with what's behind the window

00:29:43.176 --> 00:29:44.316 A:middle
to produce this vibrant effect.

00:29:45.036 --> 00:29:48.656 A:middle
And when it's not in
the VisualEffectView

00:29:48.986 --> 00:29:51.586 A:middle
that same exact view is
drawing non-vibrantly,

00:29:51.726 --> 00:29:54.366 A:middle
it's drawing its normal
gray colors with no work

00:29:54.366 --> 00:29:55.266 A:middle
from you the developer.

00:29:56.546 --> 00:29:59.086 A:middle
In addition, another thing
to point out in this view,

00:29:59.756 --> 00:30:03.726 A:middle
this bottom view here, it is
inside of a VisualEffectView


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.756 --> 00:30:03.726 A:middle
this bottom view here, it is
inside of a VisualEffectView

00:30:04.006 --> 00:30:05.736 A:middle
yet it's not appearing vibrant.

00:30:05.796 --> 00:30:07.416 A:middle
I'm going to discuss
how to achieve

00:30:07.416 --> 00:30:09.166 A:middle
that effect, too,
in a short bit.

00:30:09.886 --> 00:30:12.276 A:middle
How do you actually go
ahead and implement this?

00:30:12.326 --> 00:30:14.996 A:middle
Well, first of all, in
your custom view subclass,

00:30:15.346 --> 00:30:18.086 A:middle
as I mentioned before, you'll
override allowsVibrancy

00:30:18.276 --> 00:30:20.586 A:middle
and you'll prior return
Yes, that way when you're

00:30:20.586 --> 00:30:22.486 A:middle
in a vibrant appearance
you automatically will

00:30:22.486 --> 00:30:23.096 A:middle
appear vibrant.

00:30:24.186 --> 00:30:26.486 A:middle
And then inside of your drawRect
you'll probably just do whatever

00:30:26.516 --> 00:30:31.406 A:middle
you're doing today, you set your
particular colors, fill a path,

00:30:31.936 --> 00:30:33.576 A:middle
or do whatever type
of drawing you want

00:30:33.976 --> 00:30:35.436 A:middle
and you'll automatically
become vibrant.

00:30:35.936 --> 00:30:38.326 A:middle
Here I'm just drawing
with some regular colors,

00:30:38.326 --> 00:30:41.776 A:middle
I have a variation of black
with a different Alpha value,

00:30:42.326 --> 00:30:44.286 A:middle
and this view automatically
becomes vibrant.

00:30:44.846 --> 00:30:49.906 A:middle
Now, because that view
says Yes to allowsVibrancy,

00:30:50.436 --> 00:30:53.176 A:middle
anything drawn inside of
that view will automatically

00:30:53.176 --> 00:30:53.866 A:middle
become vibrant.

00:30:54.516 --> 00:30:57.726 A:middle
Even if you drew images,
any text, any color,

00:30:57.796 --> 00:30:59.326 A:middle
everything inside of
it will be vibrant.

00:30:59.856 --> 00:31:02.756 A:middle
You don't have to use labelColor
or secondarylabelColor


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.856 --> 00:31:02.756 A:middle
You don't have to use labelColor
or secondarylabelColor

00:31:03.006 --> 00:31:07.036 A:middle
to get Vibrancy in that view.

00:31:07.236 --> 00:31:11.316 A:middle
However, what you can do is you
can utilize the system colors

00:31:11.316 --> 00:31:12.886 A:middle
to have your application

00:31:12.886 --> 00:31:16.086 A:middle
and your custom view be more
dynamic depending on what kind

00:31:16.086 --> 00:31:17.036 A:middle
of appearance it's in.

00:31:17.336 --> 00:31:19.186 A:middle
If it's in a light
appearance or dark appearance.

00:31:20.016 --> 00:31:20.876 A:middle
So, for instance, something

00:31:20.876 --> 00:31:24.886 A:middle
like NSColor controlTextColor
now is dark when it's

00:31:24.886 --> 00:31:28.176 A:middle
on a light appearance and light
when it's on a dark appearance.

00:31:28.606 --> 00:31:32.146 A:middle
Something to be aware of, if
you're taking these colors

00:31:32.146 --> 00:31:34.856 A:middle
and storing them in your
app, store the name color,

00:31:35.216 --> 00:31:38.516 A:middle
don't convert that color to
a CGColor or don't convert it

00:31:38.516 --> 00:31:41.116 A:middle
to a colorspace, don't
extract the RGB elements

00:31:41.116 --> 00:31:44.056 A:middle
and save them off, because
if you do that you'll lose

00:31:44.056 --> 00:31:45.606 A:middle
that dynamic nature
of the color.

00:31:45.956 --> 00:31:47.616 A:middle
Instead just save
the color itself,

00:31:47.616 --> 00:31:49.166 A:middle
like the NSColor
controlTextColor

00:31:49.486 --> 00:31:51.626 A:middle
and utilize it again and again.

00:31:52.056 --> 00:31:54.116 A:middle
Now again, if you
change your appearance

00:31:54.116 --> 00:31:57.086 A:middle
on your particular view it'll
automatically invalidate the

00:31:57.086 --> 00:32:00.056 A:middle
subviews so you're holding
onto that color, you don't have


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.086 --> 00:32:00.056 A:middle
subviews so you're holding
onto that color, you don't have

00:32:00.056 --> 00:32:02.626 A:middle
to worry about invalidating
things it's done automatically.

00:32:02.966 --> 00:32:08.056 A:middle
So let's take a look at some
code that uses a system color,

00:32:08.056 --> 00:32:09.646 A:middle
because you may not
be familiar with it.

00:32:10.026 --> 00:32:13.466 A:middle
We have ColorList, and
so you can easily grab a

00:32:13.466 --> 00:32:14.696 A:middle
colorListNamed System.

00:32:15.316 --> 00:32:17.746 A:middle
And what this sample
code is doing, and again,

00:32:17.746 --> 00:32:19.876 A:middle
this is provided in that
demo application I mentioned

00:32:19.876 --> 00:32:22.266 A:middle
at the start, it's
going to go ahead

00:32:22.266 --> 00:32:23.306 A:middle
and set up some attributes.

00:32:23.306 --> 00:32:25.716 A:middle
It's going to enumerate through
all the colors in the ColorList,

00:32:26.226 --> 00:32:28.716 A:middle
grab a particular color
out based on its key,

00:32:28.716 --> 00:32:31.426 A:middle
the key is the name of
the color, do a set of it,

00:32:31.426 --> 00:32:35.556 A:middle
and just do a RectFill to fill
that color, one after another.

00:32:36.856 --> 00:32:38.296 A:middle
So if we look at a view

00:32:38.296 --> 00:32:40.416 A:middle
where all it's doing is
drawing those colors,

00:32:40.606 --> 00:32:44.436 A:middle
and this looks very busy,
so let me explain it.

00:32:45.216 --> 00:32:46.656 A:middle
This is what we would
get, this is what

00:32:46.656 --> 00:32:47.896 A:middle
that demo application does.

00:32:48.986 --> 00:32:51.616 A:middle
So in the first column this
is just drawing the name

00:32:52.036 --> 00:32:53.016 A:middle
of the particular color.

00:32:53.546 --> 00:32:57.446 A:middle
Next column is drawing
the same color, same view,

00:32:57.686 --> 00:32:58.876 A:middle
in the Aqua Appearance.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.136 --> 00:33:02.306 A:middle
Same color, same view in the
Vibrant Light Appearance.

00:33:03.466 --> 00:33:05.776 A:middle
Same color and same view in
the Vibrant Dark Appearance.

00:33:06.946 --> 00:33:09.366 A:middle
And if we zoom in so you
can see one particular row,

00:33:09.686 --> 00:33:13.196 A:middle
this is the controlTextColor,
and as you can see, the Aqua,

00:33:13.196 --> 00:33:14.616 A:middle
Vibrant Light, and Vibrant Dark,

00:33:14.856 --> 00:33:17.206 A:middle
the colors are all
slightly different depending

00:33:17.206 --> 00:33:19.906 A:middle
on what we decide in
AppKit to make it look

00:33:19.906 --> 00:33:20.976 A:middle
for a particular appearance.

00:33:20.976 --> 00:33:22.836 A:middle
The point here is
they are different,

00:33:22.946 --> 00:33:23.926 A:middle
depending on your appearance.

00:33:25.236 --> 00:33:27.596 A:middle
So if we take a look at
that CustomView again

00:33:27.936 --> 00:33:31.726 A:middle
that was drawing the circles,
if we use NSColor labelColor,

00:33:31.726 --> 00:33:35.436 A:middle
NSColor secondaryLabelColor,
that view would look good

00:33:35.436 --> 00:33:38.456 A:middle
if it's in a light
appearance or a dark appearance

00:33:38.566 --> 00:33:40.086 A:middle
without you having
to do anything.

00:33:40.756 --> 00:33:42.436 A:middle
Now one of the things
to note in this view,

00:33:42.746 --> 00:33:44.546 A:middle
at the bottom there is one

00:33:44.546 --> 00:33:47.156 A:middle
of these CustomViews that's
not drawing vibrantly.

00:33:47.506 --> 00:33:50.306 A:middle
So how did it opt-out of
Vibrancy and what did it do?

00:33:51.166 --> 00:33:52.196 A:middle
It's very simple.

00:33:52.696 --> 00:33:55.166 A:middle
All that view is doing, and
this is just done inside

00:33:55.166 --> 00:33:56.896 A:middle
of Interface Builder,
you can do it in code,

00:33:57.336 --> 00:33:59.236 A:middle
is I have it selected
and I go ahead

00:33:59.236 --> 00:34:01.026 A:middle
and set the appearance
back to aqua,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.236 --> 00:34:01.026 A:middle
and set the appearance
back to aqua,

00:34:01.596 --> 00:34:03.306 A:middle
and so it no longer
meets the criteria

00:34:03.666 --> 00:34:06.386 A:middle
of being a vibrant control
and it won't draw vibrantly.

00:34:07.006 --> 00:34:11.706 A:middle
So the things to note is

00:34:11.706 --> 00:34:13.335 A:middle
that you can opt-out
your particular controls

00:34:13.335 --> 00:34:16.096 A:middle
from Vibrancy, one at a
time, or you can do it

00:34:16.096 --> 00:34:17.235 A:middle
on a whole view hierarchy.

00:34:17.235 --> 00:34:19.826 A:middle
So you could have a hierarchy
controls, opt in or out

00:34:19.826 --> 00:34:23.746 A:middle
by setting a container to be one
particular appearance or not.

00:34:24.246 --> 00:34:27.235 A:middle
You can opt it in or out
depending on what you need.

00:34:27.956 --> 00:34:32.956 A:middle
One think to note is your view
that's apparent can't have

00:34:32.956 --> 00:34:34.676 A:middle
already said Yes
to allowsVibrancy,

00:34:35.096 --> 00:34:36.576 A:middle
because there are
caveats with that,

00:34:36.786 --> 00:34:38.576 A:middle
which I will discuss
in a little bit.

00:34:39.126 --> 00:34:43.576 A:middle
Let's discuss how you would
actually achieve something

00:34:43.576 --> 00:34:46.076 A:middle
like this where the same view --

00:34:46.126 --> 00:34:49.565 A:middle
where it's in a VisualEffectView
it draws one way and when it's

00:34:49.565 --> 00:34:51.866 A:middle
in a the regular Aqua appearance
it's drawing another way.

00:34:51.946 --> 00:34:53.376 A:middle
And in this case, when it's

00:34:53.376 --> 00:34:56.346 A:middle
in the Aqua appearance I'm
drawing red and purple just

00:34:56.346 --> 00:34:57.826 A:middle
to be dramatically different.

00:34:58.696 --> 00:34:59.956 A:middle
So why would you
want to do this?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:00.456 --> 00:35:02.326 A:middle
Well, in your application
you might want

00:35:02.326 --> 00:35:05.426 A:middle
to provide different artwork
for when you're inside

00:35:05.426 --> 00:35:09.516 A:middle
of a vibrant appearance
than when you're not inside

00:35:09.516 --> 00:35:11.346 A:middle
of a vibrant appearance,
and when you're inside

00:35:11.346 --> 00:35:12.986 A:middle
of a regular Aqua appearance.

00:35:13.996 --> 00:35:15.876 A:middle
Or you could use
different colors

00:35:15.916 --> 00:35:17.946 A:middle
or something along that line.

00:35:18.346 --> 00:35:20.956 A:middle
In this particular case, I'm
just using different colors.

00:35:21.296 --> 00:35:23.216 A:middle
And it's really easy to use.

00:35:23.926 --> 00:35:26.816 A:middle
As I mentioned before
NSAppearance has an

00:35:26.816 --> 00:35:30.586 A:middle
allowsVibrancy property,
and it's Yes when it's

00:35:30.586 --> 00:35:31.436 A:middle
in a vibrant appearance.

00:35:32.006 --> 00:35:33.486 A:middle
And so your code
can key off that.

00:35:34.406 --> 00:35:37.296 A:middle
NSView has a method
called effectiveAppearance

00:35:37.516 --> 00:35:40.426 A:middle
where it finds out what
the appearance set on it

00:35:40.876 --> 00:35:44.036 A:middle
or somewhere up the chain
and you can query that

00:35:44.036 --> 00:35:45.606 A:middle
and see if it allowsVibrancy.

00:35:45.606 --> 00:35:48.096 A:middle
And if it does you can
set one particular color,

00:35:48.376 --> 00:35:49.856 A:middle
if it doesn't you can
set another color.

00:35:50.186 --> 00:35:52.306 A:middle
So here it's just saying
the redColor when it's

00:35:52.306 --> 00:35:54.006 A:middle
in a vibrant appearance.

00:35:55.126 --> 00:35:58.346 A:middle
So let me discuss some caveats
with Vibrancy and blending.

00:35:58.706 --> 00:36:01.576 A:middle
This is the within
window blending mode


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:58.706 --> 00:36:01.576 A:middle
This is the within
window blending mode

00:36:01.576 --> 00:36:02.676 A:middle
and some caveats with it.

00:36:03.626 --> 00:36:06.726 A:middle
So let's say that we have
this super view here,

00:36:07.006 --> 00:36:10.706 A:middle
the one with the gray or
darker square around it,

00:36:11.306 --> 00:36:12.416 A:middle
and it has some subviews.

00:36:12.996 --> 00:36:16.906 A:middle
Now if that super view says Yes
to allowsVibrancy, what's going

00:36:16.906 --> 00:36:20.906 A:middle
to happen is all the subviews
are going to always be vibrant,

00:36:21.216 --> 00:36:24.066 A:middle
and so it's a little
difficult to see here but now

00:36:24.606 --> 00:36:28.726 A:middle
that subview, that image view
is doing a different blending

00:36:28.726 --> 00:36:30.406 A:middle
and it looks a little
bit murky and muddy

00:36:30.546 --> 00:36:32.516 A:middle
because it's doing
a vibrant blending.

00:36:32.726 --> 00:36:36.296 A:middle
And that's not desired.

00:36:36.406 --> 00:36:38.996 A:middle
So, the thing to
be aware of here is

00:36:38.996 --> 00:36:41.796 A:middle
if your custom view is returning
Yes from allowsVibrancy,

00:36:41.796 --> 00:36:43.976 A:middle
all your subviews are
going to be vibrant.

00:36:44.716 --> 00:36:46.656 A:middle
So if you're designing
applications,

00:36:46.956 --> 00:36:49.546 A:middle
you need to keep this in mind
and design all your subviews

00:36:49.546 --> 00:36:53.306 A:middle
to be vibrant or to be aware

00:36:53.306 --> 00:36:54.276 A:middle
that they're going
to be vibrant.

00:36:54.856 --> 00:36:58.926 A:middle
Or design it so that your
parent view is not saying Yes

00:36:58.926 --> 00:37:00.876 A:middle
to allowsVibrancy, overlapping


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.926 --> 00:37:00.876 A:middle
to allowsVibrancy, overlapping

00:37:00.876 --> 00:37:02.996 A:middle
with the siblings
-- or children.

00:37:03.516 --> 00:37:07.486 A:middle
There are also some
other caveats

00:37:07.486 --> 00:37:10.646 A:middle
with behind window blending
that has that same once vibrant,

00:37:10.646 --> 00:37:11.486 A:middle
always vibrant effect,

00:37:12.276 --> 00:37:14.856 A:middle
but there's an additional
problem here

00:37:14.856 --> 00:37:15.826 A:middle
that I'm going to highlight.

00:37:17.226 --> 00:37:21.166 A:middle
And what is happening here
is I have this blue box,

00:37:21.536 --> 00:37:24.016 A:middle
which is saying, no I
don't want vibrancy.

00:37:24.746 --> 00:37:26.716 A:middle
However, there's a text
field alongside of it

00:37:27.126 --> 00:37:30.596 A:middle
which is using labelColor,
which as you know from before,

00:37:30.596 --> 00:37:32.506 A:middle
is saying Yes to allowsVibrancy.

00:37:32.506 --> 00:37:34.886 A:middle
So the text wants to be vibrant,

00:37:35.376 --> 00:37:37.806 A:middle
but the thing drawn behind
it wants to not be vibrant,

00:37:38.356 --> 00:37:39.986 A:middle
however, those areas
are overlapping,

00:37:39.986 --> 00:37:42.386 A:middle
and we just described
this to the Window Server

00:37:42.676 --> 00:37:45.026 A:middle
and so what's going to happen
is anything in that square

00:37:45.026 --> 00:37:46.676 A:middle
of the text is going
to be vibrant,

00:37:47.066 --> 00:37:49.466 A:middle
including what was drawn
behind it, that blue area.

00:37:49.466 --> 00:37:52.346 A:middle
And so it gets also
vibrancy applied to it.

00:37:53.166 --> 00:37:54.416 A:middle
So this is another caveat

00:37:54.416 --> 00:37:57.196 A:middle
which you should be
aware of and not do.

00:37:57.406 --> 00:38:00.046 A:middle
Instead, you probably want to
opt your text to not be vibrant


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:57.406 --> 00:38:00.046 A:middle
Instead, you probably want to
opt your text to not be vibrant

00:38:00.766 --> 00:38:02.606 A:middle
or have that blue
control to be vibrant

00:38:02.606 --> 00:38:03.586 A:middle
so that everything is vibrant.

00:38:04.306 --> 00:38:08.576 A:middle
Another thing that we have is
visual effect view can have a

00:38:08.576 --> 00:38:10.056 A:middle
maskImage property.

00:38:10.856 --> 00:38:13.356 A:middle
The mask image allows you to it.

00:38:14.026 --> 00:38:15.586 A:middle
So right here are two
visual effect views,

00:38:15.586 --> 00:38:17.456 A:middle
one using the light
appearance or light material,

00:38:17.456 --> 00:38:18.816 A:middle
and another using
the dark material.

00:38:18.816 --> 00:38:21.256 A:middle
And if I set a mask
image on each of them,

00:38:22.156 --> 00:38:25.216 A:middle
just the area blending behind
it, to behind the window,

00:38:25.766 --> 00:38:27.416 A:middle
is only inside of
that masked area.

00:38:28.026 --> 00:38:30.466 A:middle
So you just see that for
the actual house icon,

00:38:30.546 --> 00:38:32.996 A:middle
or the gear icon,
and what was drawn

00:38:32.996 --> 00:38:35.216 A:middle
in the window you can
now see the poppy flower.

00:38:35.576 --> 00:38:37.436 A:middle
And again, the demo
application shows this.

00:38:38.036 --> 00:38:44.056 A:middle
You can easily set a maskImage,
or you can use NSImage with size

00:38:44.536 --> 00:38:47.046 A:middle
and do the block handler
to create it on the fly.

00:38:47.596 --> 00:38:50.626 A:middle
And so here's setting
it to be a BezierPath,

00:38:50.766 --> 00:38:51.786 A:middle
that's just a RoundRect.

00:38:52.436 --> 00:38:53.656 A:middle
And when you do something
like this,

00:38:54.846 --> 00:38:57.176 A:middle
it's how you would achieve
this shown in the demo app

00:38:57.266 --> 00:38:58.186 A:middle
where it's a RoundRect

00:38:58.186 --> 00:39:01.056 A:middle
for my entire window using
the maskImage property.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:58.186 --> 00:39:01.056 A:middle
for my entire window using
the maskImage property.

00:39:01.696 --> 00:39:04.976 A:middle
Some notes about mask image.

00:39:05.356 --> 00:39:08.166 A:middle
Chris highlighted some of
the new features that we use

00:39:08.166 --> 00:39:11.206 A:middle
with NSImage, so you
know, set those capInsets

00:39:11.206 --> 00:39:12.996 A:middle
so we can properly
stretch the mask image

00:39:13.676 --> 00:39:15.286 A:middle
and everything will work fine.

00:39:16.776 --> 00:39:20.166 A:middle
Okay, so that was discussing
VisualEffectView, mask image,

00:39:20.646 --> 00:39:23.056 A:middle
appearance, and how
to get Vibrancy.

00:39:23.356 --> 00:39:26.326 A:middle
Let me talk about some of our
Standard controls in AppKit

00:39:26.326 --> 00:39:28.926 A:middle
and how they do Vibrancy,
and things to be aware of.

00:39:30.006 --> 00:39:33.936 A:middle
First of all, table view and
outline view, and a table view

00:39:33.936 --> 00:39:35.176 A:middle
and an outline view configured

00:39:35.176 --> 00:39:38.416 A:middle
as a source list is
automatically opting

00:39:38.416 --> 00:39:39.896 A:middle
into a vibrant appearance now.

00:39:40.416 --> 00:39:42.666 A:middle
So you see that in
something like the side bar

00:39:42.866 --> 00:39:45.556 A:middle
in mail, calendars, et cetera.

00:39:46.186 --> 00:39:49.886 A:middle
So how does this work,
and how does this work

00:39:49.886 --> 00:39:51.086 A:middle
with your applications already?

00:39:51.086 --> 00:39:53.906 A:middle
If you're using the
selectionHighlightStyle

00:39:54.226 --> 00:39:55.956 A:middle
of NSTableView
SelectionHighlight

00:39:55.956 --> 00:39:59.236 A:middle
StyleSourceList, that tells the
table, or our only view of that,

00:39:59.586 --> 00:40:01.136 A:middle
it wants to be a source list.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.586 --> 00:40:01.136 A:middle
it wants to be a source list.

00:40:01.686 --> 00:40:04.186 A:middle
And as soon as you set
that, either in code

00:40:04.186 --> 00:40:07.336 A:middle
or in Interface Builder, it
has always had side effects,

00:40:07.446 --> 00:40:09.726 A:middle
and these are documented in
the release notes I'm going

00:40:09.726 --> 00:40:10.946 A:middle
to reiterate them here.

00:40:12.066 --> 00:40:14.486 A:middle
OutlineView's indentation
is automatically affected

00:40:14.486 --> 00:40:16.396 A:middle
and controlled to
meet specific metrics.

00:40:16.656 --> 00:40:20.596 A:middle
New to 10.10 we start tweaking
the intercell spacing just

00:40:20.596 --> 00:40:22.086 A:middle
slightly to make it
meet new metrics.

00:40:23.506 --> 00:40:25.856 A:middle
If you're using a TableCellView,
its position of the imageView

00:40:25.856 --> 00:40:27.476 A:middle
and textView are
automatically controlled

00:40:27.476 --> 00:40:28.476 A:middle
to whatever it needs to be.

00:40:29.146 --> 00:40:32.036 A:middle
And we apply attributes to the
texts to make it appear correct.

00:40:32.376 --> 00:40:34.326 A:middle
So if your application was
using a source list highlighting

00:40:34.326 --> 00:40:36.996 A:middle
before, and doesn't make
any significant changes,

00:40:36.996 --> 00:40:38.996 A:middle
it will automatically
get the new 10.10 look

00:40:39.036 --> 00:40:40.536 A:middle
for SourceList in the side bar.

00:40:41.686 --> 00:40:43.996 A:middle
The last little bit here
is the backgroundColor

00:40:44.216 --> 00:40:47.456 A:middle
for the actual source list
for table is set to a magical,

00:40:47.456 --> 00:40:52.576 A:middle
internal color, and it's
important to be aware of this.

00:40:52.796 --> 00:40:56.446 A:middle
Because it has this magical
color, what's happening inside

00:40:56.446 --> 00:40:58.706 A:middle
of AppKit when we
see that you're using

00:40:58.706 --> 00:41:01.456 A:middle
that special background
color, we're going to go ahead


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.706 --> 00:41:01.456 A:middle
that special background
color, we're going to go ahead

00:41:01.966 --> 00:41:04.546 A:middle
and put a VisualEffectView
behind your TableView

00:41:04.926 --> 00:41:07.056 A:middle
and do the blurring
automatically for you.

00:41:07.316 --> 00:41:08.726 A:middle
So you don't have
to do anything.

00:41:09.326 --> 00:41:10.756 A:middle
If you don't want that behavior,

00:41:11.406 --> 00:41:13.526 A:middle
after you set the
selectionHighlightStyle

00:41:13.526 --> 00:41:16.016 A:middle
to SourceList, you can
change the backgroundColor

00:41:16.016 --> 00:41:16.796 A:middle
to anything else.

00:41:16.906 --> 00:41:18.876 A:middle
You can change it back
to clear or to nothing,

00:41:18.876 --> 00:41:21.026 A:middle
and it will not do
the operation.

00:41:21.026 --> 00:41:23.086 A:middle
And this is the way
it's always worked,

00:41:23.086 --> 00:41:25.936 A:middle
and so we respect old
behavior of opting out of

00:41:25.936 --> 00:41:27.776 A:middle
that backgroundColor
or the background blur.

00:41:27.996 --> 00:41:30.346 A:middle
So you could do it manually
in some other super view

00:41:30.526 --> 00:41:31.826 A:middle
if you need to for some reason.

00:41:34.036 --> 00:41:37.776 A:middle
Another note, or thing to be
aware of, is now automatically

00:41:37.776 --> 00:41:41.536 A:middle
in 10.10, the sidebar
SourceList for TableViews,

00:41:41.826 --> 00:41:43.326 A:middle
automatically get
their appearance set

00:41:43.496 --> 00:41:45.386 A:middle
to the VibrantLight
appearance for you,

00:41:45.506 --> 00:41:47.346 A:middle
and you don't have to do that.

00:41:49.596 --> 00:41:51.156 A:middle
Another control inside
of AppKit,

00:41:51.726 --> 00:41:56.446 A:middle
Popover is now utilizing
the Light and Dark materials

00:41:56.446 --> 00:41:59.246 A:middle
as necessary, and it will
have its appearance set

00:41:59.246 --> 00:42:01.516 A:middle
to Vibrant Light or
Vibrant Dark, as necessary,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.246 --> 00:42:01.516 A:middle
to Vibrant Light or
Vibrant Dark, as necessary,

00:42:01.516 --> 00:42:03.966 A:middle
and you don't have to
do anything for that.

00:42:05.496 --> 00:42:07.606 A:middle
So, that was an overview

00:42:07.606 --> 00:42:10.076 A:middle
of the standard AppKit
controls inside of AppKit.

00:42:10.336 --> 00:42:12.686 A:middle
I'm going to bring it
back to Chris to talk more

00:42:12.686 --> 00:42:15.226 A:middle
about performance and what you
can do to make your app fast

00:42:15.226 --> 00:42:16.236 A:middle
with these new visual
effects [applause].

00:42:17.276 --> 00:42:17.846 A:middle
&gt;&gt; Thank you, Corbin.

00:42:18.596 --> 00:42:20.416 A:middle
All right, so that was fun.

00:42:20.416 --> 00:42:22.386 A:middle
Let's talk about
performance, which is also fun.

00:42:23.226 --> 00:42:28.116 A:middle
So you notice that blur we had
and this may not surprise you

00:42:28.866 --> 00:42:31.136 A:middle
but the blur effect
isn't exactly free.

00:42:31.796 --> 00:42:34.656 A:middle
It does cost something, and
that something is graphics

00:42:34.656 --> 00:42:36.236 A:middle
performance and battery usage.

00:42:36.956 --> 00:42:40.856 A:middle
And sometimes, though, the
cost is worth the results.

00:42:42.066 --> 00:42:44.146 A:middle
So, something you
should be aware

00:42:44.146 --> 00:42:46.236 A:middle
of here is you're not trying
to not use this effect.

00:42:46.236 --> 00:42:47.266 A:middle
You want your app
to look beautiful.

00:42:47.636 --> 00:42:49.536 A:middle
You just need to pay
attention to striking a balance

00:42:49.596 --> 00:42:52.436 A:middle
between that appearance and
the resource utilization.

00:42:53.126 --> 00:42:55.046 A:middle
So, here's a small example.

00:42:55.046 --> 00:42:56.996 A:middle
These two images on the left
and right appear [inaudible],

00:42:57.096 --> 00:42:59.686 A:middle
it's actually controlled
with three image views


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:00.126 --> 00:43:01.926 A:middle
and these vibrant
template houses.

00:43:02.496 --> 00:43:04.976 A:middle
And you recall that Vibrancy
requires a VisualEffectView.

00:43:05.386 --> 00:43:07.806 A:middle
So there's actually a few
ways of accomplishing this,

00:43:08.066 --> 00:43:11.466 A:middle
but on the left we
choose to accomplish this

00:43:11.966 --> 00:43:13.446 A:middle
with a single visual
effect view.

00:43:14.386 --> 00:43:16.396 A:middle
Meanwhile on the right,
we can accomplish this

00:43:16.396 --> 00:43:19.886 A:middle
with three visual effect views
and there's some obvious reasons

00:43:19.886 --> 00:43:21.856 A:middle
to structure things on the
right versus on the left.

00:43:22.256 --> 00:43:23.716 A:middle
One of them would
be flexibility.

00:43:23.716 --> 00:43:24.926 A:middle
If you needed different
appearances

00:43:24.926 --> 00:43:26.756 A:middle
or difference materials
for those houses

00:43:26.756 --> 00:43:28.386 A:middle
on the right you would need
to use VisualEffectViews.

00:43:28.796 --> 00:43:31.546 A:middle
However, you should be conscious

00:43:31.546 --> 00:43:33.206 A:middle
about how many VisualEffectViews
you're using

00:43:33.286 --> 00:43:34.196 A:middle
and when you're using them.

00:43:34.806 --> 00:43:37.136 A:middle
In this case, the number
of pixels affected here,

00:43:37.136 --> 00:43:39.916 A:middle
the surface area of these
houses is almost identical

00:43:40.096 --> 00:43:41.466 A:middle
between the left and the right.

00:43:42.066 --> 00:43:45.006 A:middle
And in that case a single
VisualEffectView is going

00:43:45.006 --> 00:43:46.026 A:middle
to mean more performance,

00:43:46.026 --> 00:43:47.836 A:middle
if there's less information
for us to track.

00:43:48.456 --> 00:43:50.646 A:middle
The opposite of this
case is also true.

00:43:50.686 --> 00:43:53.606 A:middle
If you had a window with,
say, some very small areas

00:43:53.606 --> 00:43:56.486 A:middle
of Vibrancy and they were on
different edges of the window,

00:43:56.706 --> 00:43:57.576 A:middle
it might be more efficient

00:43:57.576 --> 00:43:59.356 A:middle
to use two VisualEffectViews
instead

00:43:59.356 --> 00:44:00.956 A:middle
of a single enormous
VisualEffectView.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:59.356 --> 00:44:00.956 A:middle
of a single enormous
VisualEffectView.

00:44:02.036 --> 00:44:04.986 A:middle
Something else to be aware of,
especially for in window blurs,

00:44:05.696 --> 00:44:07.006 A:middle
is frequently updated content.

00:44:07.006 --> 00:44:08.656 A:middle
And what do I mean by
frequently updated content?

00:44:08.906 --> 00:44:10.046 A:middle
Well, I mean movies.

00:44:10.236 --> 00:44:11.026 A:middle
I mean animations.

00:44:11.226 --> 00:44:12.476 A:middle
I even mean blinking cursors.

00:44:12.476 --> 00:44:15.996 A:middle
These are going to be
updating at 24 or 35ths,

00:44:15.996 --> 00:44:18.836 A:middle
or 65ths for animation, or
even 2/5 for blinking cursors.

00:44:19.066 --> 00:44:21.526 A:middle
And the thing is whenever these
update we're going to have

00:44:21.526 --> 00:44:22.826 A:middle
to recompute that blur.

00:44:22.826 --> 00:44:25.536 A:middle
This is also true for
behind window blurs,

00:44:25.726 --> 00:44:27.966 A:middle
but you don't usually control
the content behind the window

00:44:27.966 --> 00:44:29.846 A:middle
in your app, so that's not
something you really need

00:44:29.846 --> 00:44:30.976 A:middle
to worry about.

00:44:31.516 --> 00:44:34.696 A:middle
Corbin mentioned that
layers are often required,

00:44:34.696 --> 00:44:36.436 A:middle
especially for in window blurs,

00:44:36.776 --> 00:44:38.776 A:middle
and layer usage is
increasing just in general.

00:44:38.776 --> 00:44:41.456 A:middle
But something I wanted
to mention is

00:44:41.456 --> 00:44:45.146 A:middle
that if you're using layers, the
dirty shapes on screen are going

00:44:45.146 --> 00:44:47.526 A:middle
to be different than if
you're not using layers.

00:44:47.806 --> 00:44:50.966 A:middle
So, here's an example of a
mock text view that just blinks

00:44:50.966 --> 00:44:53.076 A:middle
at insertion point
in this R rectangle,

00:44:53.396 --> 00:44:54.366 A:middle
when it's not layer-backed.

00:44:55.886 --> 00:44:58.176 A:middle
And you can see here we
have this blinking cursor.

00:44:58.466 --> 00:45:00.616 A:middle
What you probably can't
see is I've actually turned


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:58.466 --> 00:45:00.616 A:middle
What you probably can't
see is I've actually turned

00:45:00.616 --> 00:45:02.376 A:middle
on color flush in one
of our de-bug tools,

00:45:02.716 --> 00:45:05.416 A:middle
and this rectangle is
turning yellow every time the

00:45:05.416 --> 00:45:06.296 A:middle
cursor updates.

00:45:06.726 --> 00:45:08.166 A:middle
For a non-layer backed view,

00:45:08.356 --> 00:45:10.926 A:middle
that small rectangle is all
that's flushed on screen.

00:45:12.166 --> 00:45:14.816 A:middle
If, however, we say we do
want to layer for this,

00:45:14.946 --> 00:45:16.556 A:middle
we're still using
the small dirty rect,

00:45:17.186 --> 00:45:20.896 A:middle
but whenever the view
updates we see this instead.

00:45:21.626 --> 00:45:22.746 A:middle
The entire layer is flushed.

00:45:22.946 --> 00:45:24.326 A:middle
It's not that we're
drawing anymore,

00:45:24.326 --> 00:45:27.366 A:middle
our application is still just
drawing that tiny cursor rect,

00:45:27.586 --> 00:45:30.056 A:middle
it's just that Core Animation
has been built for GPU's,

00:45:30.356 --> 00:45:32.506 A:middle
which involve submitting
Geometry in large batches,

00:45:32.826 --> 00:45:34.756 A:middle
so we just flush
the entire contents

00:45:34.756 --> 00:45:35.606 A:middle
of the layer to the screen.

00:45:36.266 --> 00:45:38.396 A:middle
If, for example, you
had a VisualEffectView

00:45:38.396 --> 00:45:40.586 A:middle
that overlaid the right
side of this view,

00:45:40.926 --> 00:45:44.476 A:middle
even though only the insertion
point on the left is blinking

00:45:44.876 --> 00:45:46.536 A:middle
that blurs going to
have to be recomputed.

00:45:47.186 --> 00:45:49.386 A:middle
So, that is something
to keep in mind.

00:45:50.316 --> 00:45:53.246 A:middle
Something else to be aware of,
if you're using a updateLayer

00:45:53.246 --> 00:45:54.366 A:middle
or you have your own layer tree

00:45:54.366 --> 00:45:55.756 A:middle
and you're setting your
own layer properties,

00:45:55.756 --> 00:45:57.956 A:middle
like the corner radius or
other elements directly,

00:45:58.376 --> 00:46:01.926 A:middle
the entire layer is still going
to be flushed in one pass there.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:58.376 --> 00:46:01.926 A:middle
the entire layer is still going
to be flushed in one pass there.

00:46:02.386 --> 00:46:05.896 A:middle
So that caveat applies to
update layer users also.

00:46:06.406 --> 00:46:08.376 A:middle
Often, though, you can fix this

00:46:08.376 --> 00:46:11.056 A:middle
by just re-factoring your
view hierarchy a little.

00:46:11.256 --> 00:46:13.986 A:middle
So, for example, if you have
frequently updating content,

00:46:14.236 --> 00:46:16.396 A:middle
try to put it in a
small view and have --

00:46:16.396 --> 00:46:20.266 A:middle
reserve large views for static
or unfrequently updated content.

00:46:21.506 --> 00:46:23.956 A:middle
Something unrelated, but very
important to be aware of,

00:46:24.336 --> 00:46:27.076 A:middle
is NSWindow has an opaque
property and you shouldn't mess

00:46:27.076 --> 00:46:28.616 A:middle
with it if you're using
visual effect views.

00:46:28.616 --> 00:46:31.426 A:middle
In the past if you needed to
punch a hole through your window

00:46:31.426 --> 00:46:33.616 A:middle
or have transparency you
had to set this to Yes.

00:46:34.056 --> 00:46:36.436 A:middle
However, if you're using
VisualEffectViews you don't have

00:46:36.436 --> 00:46:38.236 A:middle
to do that, we take care
of it automatically.

00:46:38.636 --> 00:46:40.836 A:middle
If you set this to No, you're
going to take away a lot

00:46:40.836 --> 00:46:44.326 A:middle
of information the Window Server
uses to call obscured windows

00:46:44.476 --> 00:46:46.576 A:middle
and it'll be doing a lot
more drawing than necessary.

00:46:46.826 --> 00:46:50.506 A:middle
So, avoid this unless
you're already using it

00:46:51.676 --> 00:46:52.486 A:middle
for other reasons.

00:46:52.486 --> 00:46:55.396 A:middle
I want to point out this option
in the Accessibility preference,

00:46:55.636 --> 00:46:57.286 A:middle
this is in the Display
subsection called

00:46:57.286 --> 00:46:58.336 A:middle
reduce transparency.

00:46:58.426 --> 00:47:00.676 A:middle
And that'll actually
turn off our blurs


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:58.426 --> 00:47:00.676 A:middle
And that'll actually
turn off our blurs

00:47:00.676 --> 00:47:01.866 A:middle
on a system-wide basis.

00:47:02.246 --> 00:47:04.736 A:middle
And I'm not suggesting
this as a user feature,

00:47:05.186 --> 00:47:07.086 A:middle
instead I'm suggesting
this as a diagnostic tool.

00:47:07.616 --> 00:47:09.586 A:middle
If you add a lot of
VisualEffectViews to your app

00:47:09.586 --> 00:47:10.626 A:middle
and all of the sudden you notice

00:47:10.666 --> 00:47:12.276 A:middle
that maybe your window
resizing animations

00:47:12.276 --> 00:47:14.476 A:middle
or your full screen
transitions have become slow,

00:47:14.986 --> 00:47:16.276 A:middle
you can set this to Yes,

00:47:16.586 --> 00:47:21.076 A:middle
and this will avoid the cost
we pay when doing that blur.

00:47:21.636 --> 00:47:23.006 A:middle
So if you notice
when this is turned

00:47:23.006 --> 00:47:24.616 A:middle
on your performance is fine,

00:47:24.616 --> 00:47:27.416 A:middle
and when this is turned off your
performance is kind of sluggish,

00:47:27.766 --> 00:47:30.786 A:middle
it's probably you're using a
VisualEffectView that's too

00:47:30.786 --> 00:47:32.916 A:middle
large or too many
VisualEffectViews,

00:47:33.136 --> 00:47:36.296 A:middle
and that's a cue to dial
down the transparency

00:47:36.296 --> 00:47:37.636 A:middle
and blurring in the app.

00:47:38.896 --> 00:47:39.656 A:middle
Some other things I want

00:47:39.656 --> 00:47:43.836 A:middle
to mention is some performance
tools we can use for this.

00:47:44.066 --> 00:47:48.106 A:middle
So I used Quartz Debug to turn
on a coloring of dirty areas

00:47:48.156 --> 00:47:49.546 A:middle
that the Windows
Server had to redraw,

00:47:49.546 --> 00:47:52.146 A:middle
and that can be very
useful for diagnosing cases

00:47:52.146 --> 00:47:54.316 A:middle
where you may be drawing more
content than you're expecting,

00:47:54.566 --> 00:47:56.796 A:middle
or when you're using layers
and you're drawing a little bit

00:47:56.796 --> 00:47:58.616 A:middle
of content but it's
affecting an entire view.

00:47:59.296 --> 00:48:01.106 A:middle
Something I want to
point out about a lot


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:59.296 --> 00:48:01.106 A:middle
Something I want to
point out about a lot

00:48:01.106 --> 00:48:04.806 A:middle
of our drawing here is that the
blur effect actually happens

00:48:04.806 --> 00:48:06.616 A:middle
out of process, it happens
in the Windows Server,

00:48:06.616 --> 00:48:09.216 A:middle
and furthermore, it happens
on the GPU, and that means

00:48:09.216 --> 00:48:12.286 A:middle
that profiling your own process
won't necessarily tell you

00:48:12.286 --> 00:48:13.356 A:middle
as much as you would hope.

00:48:13.756 --> 00:48:16.096 A:middle
I'm still, however, going to
call out the instruments tool,

00:48:16.716 --> 00:48:20.186 A:middle
because the Windows Server and
your app are kind of competing

00:48:20.186 --> 00:48:22.496 A:middle
to get frames on the screen
in a single display cycle,

00:48:23.306 --> 00:48:24.976 A:middle
and the faster you
can make your app

00:48:24.976 --> 00:48:28.226 A:middle
and the less GPU it utilizes
the more that is available

00:48:28.226 --> 00:48:28.986 A:middle
for the Windows Server.

00:48:29.046 --> 00:48:30.846 A:middle
So you can still improve the
performance of the system

00:48:30.846 --> 00:48:33.126 A:middle
as a whole by just improving
the performance of your app,

00:48:33.126 --> 00:48:36.016 A:middle
and instruments gives you the
tools to monitor all that.

00:48:36.286 --> 00:48:39.476 A:middle
If you're just doing a lighter
development on your app,

00:48:39.476 --> 00:48:41.556 A:middle
having activity monitor open
can sometimes be useful.

00:48:41.766 --> 00:48:43.926 A:middle
It's certainly not as
in-depth as instruments

00:48:44.266 --> 00:48:46.066 A:middle
but it will tell you how
much CPU you're using

00:48:46.066 --> 00:48:49.386 A:middle
and more importantly it'll tell
you how much energy your app is

00:48:49.386 --> 00:48:50.856 A:middle
taking to do what it's doing.

00:48:50.856 --> 00:48:52.686 A:middle
And if you see that
operating a little higher

00:48:52.686 --> 00:48:54.846 A:middle
than you're expecting
that may be another cue

00:48:54.846 --> 00:48:58.486 A:middle
that your VisualEffectView usage
has gotten a little excessive.

00:48:59.236 --> 00:49:02.436 A:middle
Finally, for the purists amongst
you who really don't want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:59.236 --> 00:49:02.436 A:middle
Finally, for the purists amongst
you who really don't want

00:49:02.436 --> 00:49:05.516 A:middle
to impact what their app is
doing by adding some gooey stuff

00:49:05.516 --> 00:49:07.696 A:middle
to profile it, you can access
[inaudible] a new sample

00:49:07.696 --> 00:49:09.806 A:middle
for example, which will tell
you what your app is doing.

00:49:10.806 --> 00:49:11.626 A:middle
So we've covered a lot.

00:49:11.626 --> 00:49:13.836 A:middle
So let me give you a quick
summary of these things.

00:49:14.386 --> 00:49:16.026 A:middle
I mentioned the NSImage
drawing enhancements,

00:49:16.146 --> 00:49:17.256 A:middle
especially capInsets.

00:49:17.256 --> 00:49:20.056 A:middle
I also mentioned the new
behaviors of NSColor,

00:49:20.056 --> 00:49:23.486 A:middle
the importance of NSAppearance,
and some SegmentedControl API.

00:49:23.486 --> 00:49:26.166 A:middle
We covered new window features,

00:49:26.436 --> 00:49:28.166 A:middle
especially the full
size content view,

00:49:28.706 --> 00:49:31.246 A:middle
but also the title
visibility options

00:49:31.246 --> 00:49:33.586 A:middle
so you can make your title
bars look like Safari and Maps.

00:49:33.696 --> 00:49:37.236 A:middle
We also covered the transparent
title bar, which is what Notes

00:49:37.236 --> 00:49:38.496 A:middle
and Reminders are using to have

00:49:38.496 --> 00:49:40.856 A:middle
that crisp appearance all
the way from the bottom

00:49:40.856 --> 00:49:43.956 A:middle
to the top of their windows.

00:49:43.956 --> 00:49:45.206 A:middle
Corbin gave you a
huge run-through

00:49:45.206 --> 00:49:46.856 A:middle
on NSVisualEffectView
and what you can do

00:49:46.856 --> 00:49:48.806 A:middle
with our visual effects
and how appearances

00:49:48.806 --> 00:49:49.966 A:middle
and Vibrancy are accomplished.

00:49:50.436 --> 00:49:52.076 A:middle
And finally, you folks remember

00:49:52.076 --> 00:49:54.436 A:middle
like 40 seconds ago we talked
a little bit about performance,

00:49:54.776 --> 00:49:57.286 A:middle
and I do hope you'll take some
of those performance messages

00:49:57.286 --> 00:49:58.976 A:middle
to heart when you leave.

00:49:59.846 --> 00:50:00.696 A:middle
Oh, thank you, Riley.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:59.846 --> 00:50:00.696 A:middle
Oh, thank you, Riley.

00:50:01.056 --> 00:50:02.436 A:middle
One other thing I failed
to mention, though,

00:50:02.436 --> 00:50:05.566 A:middle
is the new NSScrollView API that
you would use in conjunction

00:50:05.566 --> 00:50:07.546 A:middle
with full size content
view didn't make it

00:50:07.546 --> 00:50:09.096 A:middle
into the CU Guide
earlier this week,

00:50:09.376 --> 00:50:10.806 A:middle
but it will be available
to you shortly.

00:50:12.646 --> 00:50:16.166 A:middle
So, I'd like to point
out Jake Behrens,

00:50:16.166 --> 00:50:19.726 A:middle
our Frameworks Evangelist,
he's here in the plaid shirt

00:50:19.726 --> 00:50:21.766 A:middle
and the dark vibrant
appearance shoes.

00:50:22.066 --> 00:50:24.156 A:middle
We have taken to
describing his appearance

00:50:24.156 --> 00:50:25.986 A:middle
in great detail throughout
the course of the week.

00:50:25.986 --> 00:50:27.896 A:middle
I'm eager to see what we
come up with tomorrow.

00:50:28.336 --> 00:50:31.036 A:middle
We also, of course, have
documentation available online.

00:50:31.416 --> 00:50:33.036 A:middle
At developer.apple.com is also

00:50:33.036 --> 00:50:34.766 A:middle
where you can get the Quartz
Debug tool I mentioned.

00:50:35.146 --> 00:50:36.496 A:middle
And of course our
developer forums.

00:50:36.926 --> 00:50:40.656 A:middle
There's some related
sessions, Adapting Your App

00:50:40.656 --> 00:50:43.306 A:middle
to the New UI was a session
yesterday that's available

00:50:43.306 --> 00:50:44.156 A:middle
online now.

00:50:44.716 --> 00:50:46.946 A:middle
Additionally, later this
afternoon there's What's New

00:50:46.946 --> 00:50:48.986 A:middle
in Interface Builder, which
will cover not only a bit

00:50:48.986 --> 00:50:50.916 A:middle
of what we showed you during
Interface Builder today

00:50:50.916 --> 00:50:52.816 A:middle
but other useful
Interface Builder tools

00:50:52.816 --> 00:50:54.416 A:middle
for designing your app.

00:50:54.416 --> 00:50:57.616 A:middle
And tomorrow morning is
creating Modern Cocoa Apps,

00:50:57.616 --> 00:50:59.546 A:middle
which if you found some of
these new APIs interesting,

00:50:59.546 --> 00:51:02.356 A:middle
that'll cover a lot more of
what's gone into Cocoa recently.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:59.546 --> 00:51:02.356 A:middle
that'll cover a lot more of
what's gone into Cocoa recently.

00:51:02.676 --> 00:51:03.366 A:middle
Thank you very much.

00:51:04.516 --> 00:51:11.230 A:middle
[ Applause ]

