WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:12.516 --> 00:00:19.546 A:middle
[ Applause ]

00:00:20.046 --> 00:00:22.466 A:middle
&gt;&gt; Thanks so much for coming
to What's New in Cocoa Touch.

00:00:23.236 --> 00:00:25.686 A:middle
It's really great to see
a packed house here today.

00:00:25.736 --> 00:00:28.666 A:middle
I know that we have a
lot of new attendees

00:00:29.136 --> 00:00:32.286 A:middle
in the house this week,
and so for those of you

00:00:32.286 --> 00:00:35.296 A:middle
who have never been to a
WWDC, who have never been

00:00:35.296 --> 00:00:37.426 A:middle
to a What's New in
Cocoa Touch talk,

00:00:37.916 --> 00:00:40.586 A:middle
this is really a great
opportunity for you

00:00:40.586 --> 00:00:44.126 A:middle
to get a taste of all of the
new things that we're releasing

00:00:44.126 --> 00:00:48.556 A:middle
in the SDK this year, and as
you know this is actually the

00:00:48.786 --> 00:00:52.086 A:middle
biggest SDK release
since the SDK itself.

00:00:52.086 --> 00:00:55.936 A:middle
So this WWDC is going
to be absolutely huge,

00:00:56.476 --> 00:00:59.196 A:middle
and this session is your
opportunity to get a taste

00:00:59.196 --> 00:01:02.126 A:middle
of those technologies, and
I'll be pointing throughout the


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.196 --> 00:01:02.126 A:middle
of those technologies, and
I'll be pointing throughout the

00:01:02.126 --> 00:01:04.275 A:middle
session and, again at
the end of the session,

00:01:04.596 --> 00:01:07.826 A:middle
to all of the other related
sessions to the technologies

00:01:07.826 --> 00:01:10.356 A:middle
that I'm talking about
so you can get an idea

00:01:10.546 --> 00:01:13.606 A:middle
of what other talks that you
want to see this week and one

00:01:13.606 --> 00:01:18.166 A:middle
of the labs you're going to want
to go to and that sort of thing.

00:01:18.376 --> 00:01:22.406 A:middle
So to begin, I want to
talk about this core idea

00:01:23.036 --> 00:01:27.146 A:middle
of what we've set up of
what iOS 8 is really all

00:01:27.146 --> 00:01:28.966 A:middle
about from the SDK perspective,

00:01:29.226 --> 00:01:31.296 A:middle
and that's this idea
of Adaptivity.

00:01:31.566 --> 00:01:34.936 A:middle
Adaptivity is going to
pervade everything that we do

00:01:34.936 --> 00:01:40.066 A:middle
in Cocoa Touch in iOS 8, and
adaptivity means several things.

00:01:41.086 --> 00:01:45.026 A:middle
On one hand, adaptivity
is a design philosophy.

00:01:45.286 --> 00:01:48.296 A:middle
It's a way of architecting
your app, and we're going

00:01:48.366 --> 00:01:53.156 A:middle
to give you an idea of how we
want apps to be built from now

00:01:53.156 --> 00:01:57.876 A:middle
on using a design philosophy
that encourages code reuse,

00:01:58.596 --> 00:02:04.836 A:middle
generic code that adapts from
context to context and is able


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.596 --> 00:02:04.836 A:middle
generic code that adapts from
context to context and is able

00:02:04.836 --> 00:02:08.966 A:middle
to go from devices like
iPhone and iPad seamlessly.

00:02:09.856 --> 00:02:13.446 A:middle
Additionally, adaptivity
encompasses a whole set

00:02:13.746 --> 00:02:18.616 A:middle
of things that we are providing
directly from UIKit to you.

00:02:19.106 --> 00:02:21.796 A:middle
Things like Adaptive
View Controllers.

00:02:22.486 --> 00:02:25.646 A:middle
Adaptive view controllers are
something that we have written

00:02:25.826 --> 00:02:30.126 A:middle
with the design philosophy of
adaptivity that when you use

00:02:30.126 --> 00:02:32.086 A:middle
in your app can allow
you to do things

00:02:32.086 --> 00:02:35.586 A:middle
like take a simple primary,

00:02:35.586 --> 00:02:38.796 A:middle
secondary view controller
pattern, have it on iPhone,

00:02:39.396 --> 00:02:43.316 A:middle
have the same code that puts
that on iPhone put on interface

00:02:43.316 --> 00:02:48.226 A:middle
that you'd expect on iPad and do
that without any device checks,

00:02:48.226 --> 00:02:51.736 A:middle
and it will all be the same
code running on both devices.

00:02:51.736 --> 00:02:52.766 A:middle
We'll show you how to do that.

00:02:53.126 --> 00:02:56.716 A:middle
Similarly we've taken the
philosophy of adaptivity

00:02:56.716 --> 00:03:00.366 A:middle
to view controller presentations
and we'll show you how


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:56.716 --> 00:03:00.366 A:middle
to view controller presentations
and we'll show you how

00:03:00.366 --> 00:03:02.536 A:middle
to build code that
presents something

00:03:02.536 --> 00:03:05.346 A:middle
like a full screen modal
view controller on iPhone

00:03:06.276 --> 00:03:09.926 A:middle
and something more appropriate
like a popover on iPad.

00:03:10.216 --> 00:03:12.246 A:middle
Again, without any
device-specific checks

00:03:12.516 --> 00:03:16.036 A:middle
because we're focusing
on reusable adaptive code

00:03:16.316 --> 00:03:20.986 A:middle
that is the theme of
Cocoa Touch on iOS 8.

00:03:21.996 --> 00:03:22.746 A:middle
Additionally, we're going

00:03:22.746 --> 00:03:26.336 A:middle
to be pushing a new
user interface concept

00:03:26.336 --> 00:03:30.446 A:middle
that we want all applications
to adopt and that's dynamic

00:03:30.446 --> 00:03:34.146 A:middle
or dynamic text and
adapting to dynamic text.

00:03:34.726 --> 00:03:37.956 A:middle
This was actually a feature
that was introduced in iOS 7

00:03:38.786 --> 00:03:41.016 A:middle
that users can change
their preferred text size.

00:03:41.526 --> 00:03:45.476 A:middle
In iOS 8, we've extended the
idea such that all apps built

00:03:45.476 --> 00:03:50.386 A:middle
into iOS respond to dynamic
type and are adaptive to that,

00:03:50.386 --> 00:03:53.296 A:middle
and we want to show you
how you can do that.

00:03:53.296 --> 00:03:56.376 A:middle
We recognize that one
of the common places

00:03:56.376 --> 00:04:00.116 A:middle
that users interact with
text is actually in lists


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:56.376 --> 00:04:00.116 A:middle
that users interact with
text is actually in lists

00:04:00.116 --> 00:04:01.336 A:middle
in the form of table views.

00:04:01.636 --> 00:04:04.956 A:middle
So we took it upon
ourselves to make it easier

00:04:05.146 --> 00:04:07.916 A:middle
to take a simple table like
what you would see in settings,

00:04:08.436 --> 00:04:11.116 A:middle
respond to the user's
dynamic text choice,

00:04:11.606 --> 00:04:16.236 A:middle
make the text bigger, and
make the rows bigger as well.

00:04:16.426 --> 00:04:20.406 A:middle
Finally, adaptivity
refers to the ability,

00:04:20.546 --> 00:04:24.006 A:middle
this opportunity actually
to extend the system,

00:04:24.256 --> 00:04:28.186 A:middle
to adapt the system to your
user's needs and desires

00:04:28.186 --> 00:04:31.736 A:middle
by bringing your functionality
into system apps as well

00:04:31.736 --> 00:04:32.866 A:middle
as other third-party apps.

00:04:32.866 --> 00:04:34.516 A:middle
We saw in the keynote
that we can do things

00:04:34.886 --> 00:04:38.056 A:middle
like add a photo filter
right within the Photos app

00:04:38.306 --> 00:04:40.546 A:middle
without ever having to
go to your application.

00:04:41.406 --> 00:04:44.116 A:middle
So these are the kind of things
that we're going to be talking

00:04:44.116 --> 00:04:45.136 A:middle
about throughout the talk.

00:04:45.406 --> 00:04:49.446 A:middle
The first part is particularly
about the design philosophy,

00:04:50.236 --> 00:04:53.706 A:middle
and then we'll move into
listing off a lot of the things

00:04:53.756 --> 00:04:55.726 A:middle
that are especially
new about the API.

00:04:57.096 --> 00:04:58.586 A:middle
So to begin, we'll talk

00:04:58.586 --> 00:05:01.696 A:middle
about this design
philosophy of Adaptive Layout.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.586 --> 00:05:01.696 A:middle
about this design
philosophy of Adaptive Layout.

00:05:01.696 --> 00:05:07.226 A:middle
So, I said it before
but I'll say it again,

00:05:07.226 --> 00:05:08.236 A:middle
the key of what we mean

00:05:08.236 --> 00:05:12.306 A:middle
by adaptive layout is
something that is reusable.

00:05:12.436 --> 00:05:14.246 A:middle
A bit of code that is generic,

00:05:14.506 --> 00:05:16.756 A:middle
that transcends device
boundaries

00:05:17.036 --> 00:05:18.676 A:middle
and orientation boundaries.

00:05:18.676 --> 00:05:21.986 A:middle
So the first thing we want to
talk about is the simple idea

00:05:22.226 --> 00:05:23.926 A:middle
of interface orientation.

00:05:24.916 --> 00:05:28.776 A:middle
This has been a stalwart
concept through the API

00:05:29.136 --> 00:05:32.886 A:middle
since the SDK was introduced,
and we actually want to move now

00:05:33.176 --> 00:05:35.846 A:middle
to a place where when
we're writing our apps,

00:05:35.846 --> 00:05:37.286 A:middle
our layout code doesn't have

00:05:37.356 --> 00:05:40.406 A:middle
to care what the interface
orientation is and that's going

00:05:40.406 --> 00:05:42.216 A:middle
to be the theme of what
we're talking about now.

00:05:42.856 --> 00:05:46.096 A:middle
So we can imagine that a
designer gave us a design

00:05:46.096 --> 00:05:50.516 A:middle
for a Photos app, and they
say, okay, this Photos app

00:05:50.886 --> 00:05:54.456 A:middle
on portrait in an
iPad looks like a grid

00:05:54.456 --> 00:05:56.706 A:middle
of rectangular thumbnail photos

00:05:57.266 --> 00:05:58.876 A:middle
and there's five
columns in that grid.

00:05:59.756 --> 00:06:02.776 A:middle
Similarly, they give us the
spec and say, if that iPad is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.756 --> 00:06:02.776 A:middle
Similarly, they give us the
spec and say, if that iPad is

00:06:02.776 --> 00:06:06.716 A:middle
in landscape, show us similar,
show similar thumbnails

00:06:06.996 --> 00:06:08.166 A:middle
but seven columns of them.

00:06:08.806 --> 00:06:12.386 A:middle
Now, the naive way to
approach this would be, okay,

00:06:12.836 --> 00:06:17.186 A:middle
let's hard code in five
columns of things for portrait

00:06:17.726 --> 00:06:20.836 A:middle
and seven columns of
things for landscape.

00:06:21.576 --> 00:06:26.846 A:middle
But to become adaptive, we want
to take a deeper understanding

00:06:26.916 --> 00:06:29.666 A:middle
of why we have five
columns in portrait

00:06:29.666 --> 00:06:32.576 A:middle
and why we have seven
columns in landscape.

00:06:33.336 --> 00:06:36.156 A:middle
It's pretty easy to
understand with this example

00:06:36.156 --> 00:06:41.256 A:middle
that the reason is the portrait
view is 768 points wide,

00:06:41.926 --> 00:06:44.616 A:middle
and based on the thumbnail
size that we want to achieve,

00:06:44.616 --> 00:06:46.876 A:middle
it just so happens
that we can fit five

00:06:46.876 --> 00:06:49.556 A:middle
across so we have five columns.

00:06:50.656 --> 00:06:52.876 A:middle
Similarly when we
go to landscape,

00:06:53.046 --> 00:06:56.586 A:middle
we now have 1024 points
in the width dimension,

00:06:56.956 --> 00:07:00.846 A:middle
and based on the thumbnail
size that we wanted to achieve,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:56.956 --> 00:07:00.846 A:middle
and based on the thumbnail
size that we wanted to achieve,

00:07:00.846 --> 00:07:02.546 A:middle
we can now fit seven columns.

00:07:03.456 --> 00:07:07.246 A:middle
The difference here is that when
we take that logic that we say,

00:07:07.246 --> 00:07:11.726 A:middle
okay, we can fit this many
columns in this space as opposed

00:07:11.726 --> 00:07:14.246 A:middle
to there are seven columns

00:07:14.246 --> 00:07:19.316 A:middle
in landscape then the actual
interface orientation is not a

00:07:19.316 --> 00:07:22.746 A:middle
relevant thing in determining
what your layout looks

00:07:22.746 --> 00:07:23.416 A:middle
like anymore.

00:07:23.876 --> 00:07:27.026 A:middle
All that matters is what
the canvas size looks like.

00:07:28.436 --> 00:07:32.116 A:middle
So there's also another decision
being made under the hood here

00:07:32.116 --> 00:07:33.776 A:middle
if we just sort of
focus in on this view,

00:07:34.306 --> 00:07:39.856 A:middle
and that's we've made
these rectangular spread

00:07:39.856 --> 00:07:42.096 A:middle
out thumbnails, but
the Photos app

00:07:42.096 --> 00:07:45.496 A:middle
on the iPhone has actually
much more compacted thumbnails

00:07:45.496 --> 00:07:46.596 A:middle
that are square in shape.

00:07:47.066 --> 00:07:48.266 A:middle
And the reason it's that way

00:07:48.266 --> 00:07:50.786 A:middle
on the iPhone is a very
similar vein reason.

00:07:51.036 --> 00:07:53.746 A:middle
It's because the size of
the iPhone is different.

00:07:54.366 --> 00:07:59.376 A:middle
And so, we compact the layout
when we are in a compacted size,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.416 --> 00:08:04.426 A:middle
and so we can actually
think about that decision,

00:08:04.426 --> 00:08:07.286 A:middle
the compacted iPhone style
layout versus what you see

00:08:07.286 --> 00:08:08.316 A:middle
up here-the more spread

00:08:08.316 --> 00:08:12.106 A:middle
out rectangular thumbnail
layout-as also being determined

00:08:12.106 --> 00:08:14.276 A:middle
by the size and not
actually based

00:08:14.276 --> 00:08:16.636 A:middle
on a device, iPhone versus iPad.

00:08:17.146 --> 00:08:19.786 A:middle
So we're now going to begin
to think of this interface

00:08:19.836 --> 00:08:25.176 A:middle
as determined by the idea that
it has regular-sized dimensions.

00:08:25.646 --> 00:08:28.486 A:middle
The height is regular;
the width is regular.

00:08:29.466 --> 00:08:33.466 A:middle
And we're thinking of this
semantic-based sizing idea

00:08:33.876 --> 00:08:36.846 A:middle
as a new thing that
we call Size Classes.

00:08:37.765 --> 00:08:41.556 A:middle
Size classes are a
very simple enumeration

00:08:42.186 --> 00:08:44.956 A:middle
that gets us thinking
about canvas size

00:08:44.956 --> 00:08:48.626 A:middle
when we do layouts rather
than interface orientation.

00:08:50.386 --> 00:08:54.116 A:middle
We have independent horizontal
and vertical size classes,

00:08:54.116 --> 00:08:58.716 A:middle
and either one of these axis can
be either compact or regular.

00:08:58.816 --> 00:09:01.966 A:middle
And that simple choice
can allow us to choose


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.816 --> 00:09:01.966 A:middle
And that simple choice
can allow us to choose

00:09:01.966 --> 00:09:04.816 A:middle
between what we may now think
of as an iPhone style interface

00:09:05.116 --> 00:09:06.766 A:middle
and an iPad style interface.

00:09:07.156 --> 00:09:08.656 A:middle
It really isn't about
the device.

00:09:08.716 --> 00:09:11.256 A:middle
It's about the canvas
size that we have.

00:09:11.476 --> 00:09:12.726 A:middle
And we'll continue to talk

00:09:12.726 --> 00:09:16.506 A:middle
about this idea throughout the
session, but part of what makes

00:09:16.506 --> 00:09:20.706 A:middle
that key is that you may
end up in a situation

00:09:20.706 --> 00:09:24.366 A:middle
where you are showing
something, displaying your view

00:09:24.366 --> 00:09:27.906 A:middle
on say an iPad where the size

00:09:27.906 --> 00:09:31.486 A:middle
of that canvas is actually
comparable to that of just being

00:09:31.486 --> 00:09:35.196 A:middle
on an iPhone, and if
you've written adaptive code

00:09:35.586 --> 00:09:38.766 A:middle
that simply uses the size
rather than the device

00:09:38.856 --> 00:09:42.206 A:middle
to do its layout, you'll
get an iPhone style layout

00:09:42.206 --> 00:09:46.296 A:middle
when appropriate in
smaller spaces on an iPad.

00:09:46.296 --> 00:09:48.936 A:middle
So, the situations that
we can end up in are

00:09:48.936 --> 00:09:51.416 A:middle
on the iPad having regular
height and regular width.

00:09:51.416 --> 00:09:52.816 A:middle
This is true in either
orientation.

00:09:53.786 --> 00:09:58.256 A:middle
On the iPhone, the width becomes
compacted and using that bit

00:09:58.256 --> 00:10:00.816 A:middle
of information, the Photos
app can choose to shrink


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.256 --> 00:10:00.816 A:middle
of information, the Photos
app can choose to shrink

00:10:00.816 --> 00:10:05.286 A:middle
to its more compacted square
thumbnail-based layout.

00:10:05.656 --> 00:10:08.426 A:middle
Similarly, when the
iPhone goes to landscape,

00:10:08.696 --> 00:10:12.256 A:middle
it still has a compact width but
also takes on a compact height.

00:10:12.956 --> 00:10:15.076 A:middle
So you can use both of
those pieces of information

00:10:15.356 --> 00:10:19.886 A:middle
to decide what happens in
your layout in your app.

00:10:20.106 --> 00:10:23.646 A:middle
So, we've wrapped up this
concept of size classes

00:10:23.886 --> 00:10:26.636 A:middle
and are exposing it
to you via a new class

00:10:26.636 --> 00:10:28.936 A:middle
in UIKit called UI
Trait Collection.

00:10:30.006 --> 00:10:33.116 A:middle
UI trait collection is a
handy bringing together

00:10:33.116 --> 00:10:34.966 A:middle
of a few pieces of
information including the

00:10:35.016 --> 00:10:37.956 A:middle
horizontalSizeClass,
the verticalSizeClass,

00:10:38.486 --> 00:10:41.856 A:middle
the displayScale, and
the userInterfaceIdiom.

00:10:42.626 --> 00:10:46.666 A:middle
Now what makes trait collections
convenient is they're hung right

00:10:46.736 --> 00:10:48.806 A:middle
as a property on
UIViewController.

00:10:48.806 --> 00:10:50.996 A:middle
So you can access them
from your view controller.

00:10:50.996 --> 00:10:55.276 A:middle
You can also get them from the
current screen, and then using

00:10:55.276 --> 00:10:57.416 A:middle
that information, you
have your size class.

00:10:57.846 --> 00:10:59.306 A:middle
You can make the determination

00:10:59.526 --> 00:11:01.656 A:middle
of what is the right
thing to do for you.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.526 --> 00:11:01.656 A:middle
of what is the right
thing to do for you.

00:11:01.916 --> 00:11:04.746 A:middle
So as a simple example, we can
think of what we did with Photos

00:11:05.306 --> 00:11:09.966 A:middle
and implement a size
class did change method.

00:11:10.516 --> 00:11:12.996 A:middle
And for Photos, it just needs

00:11:12.996 --> 00:11:17.036 A:middle
to consider what the
new size class is,

00:11:17.616 --> 00:11:21.886 A:middle
and based on whether the
horizontalSizeClass is compact

00:11:21.946 --> 00:11:24.536 A:middle
or not, the Photos
layout chooses

00:11:24.856 --> 00:11:28.486 A:middle
to use either its compact
squares-based layout,

00:11:28.786 --> 00:11:31.496 A:middle
if it is a compact
horizontalSizeClass,

00:11:32.066 --> 00:11:36.336 A:middle
or otherwise it uses its
rectangular thumbnail,

00:11:36.336 --> 00:11:37.956 A:middle
more spread out layout.

00:11:38.536 --> 00:11:41.706 A:middle
And then this particular
snippet is modeled to be

00:11:41.706 --> 00:11:44.526 A:middle
on a collection view
controller, so it just takes

00:11:44.526 --> 00:11:48.186 A:middle
that layout object and applies
it to its collection view

00:11:48.436 --> 00:11:50.946 A:middle
as a new layout object.

00:11:51.046 --> 00:11:54.426 A:middle
Now, some of you may be
noticing this unfamiliar scribe

00:11:54.476 --> 00:11:55.636 A:middle
to you on the screen.

00:11:56.546 --> 00:11:59.626 A:middle
If this is your first time
seeing Swift, congratulations.

00:11:59.696 --> 00:12:04.466 A:middle
Here is your intro, and you
can see just how easy it is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.696 --> 00:12:04.466 A:middle
Here is your intro, and you
can see just how easy it is

00:12:04.466 --> 00:12:05.536 A:middle
to understand.

00:12:05.956 --> 00:12:08.926 A:middle
And this will give you
an idea of how easy it is

00:12:09.116 --> 00:12:10.886 A:middle
to start adopting
Swift immediately

00:12:10.886 --> 00:12:13.116 A:middle
with all Cocoa and
Cocoa Touch APIs.

00:12:14.486 --> 00:12:18.456 A:middle
So with that, I'll talk
about quickly another new API

00:12:18.646 --> 00:12:21.006 A:middle
that we've added to
support your layout

00:12:21.306 --> 00:12:23.516 A:middle
in iOS 8, which is Margins.

00:12:24.226 --> 00:12:28.946 A:middle
So margins coincide with
an API release in iOS 7,

00:12:28.946 --> 00:12:29.826 A:middle
which is layout guides.

00:12:30.946 --> 00:12:34.756 A:middle
Layout guides help you know
about hard lines on the screen.

00:12:34.756 --> 00:12:37.526 A:middle
In this case, the top and
the bottom of the screen,

00:12:37.526 --> 00:12:40.036 A:middle
where the top is denoting
there's a navigation bar there.

00:12:40.376 --> 00:12:43.626 A:middle
So the layout guide tells
you about that navigation bar

00:12:43.626 --> 00:12:45.466 A:middle
in case you'd like to avoid it.

00:12:45.626 --> 00:12:47.376 A:middle
If there was a toolbar at
the bottom of the screen,

00:12:47.376 --> 00:12:50.246 A:middle
your layout guide would also
denote the top of that toolbar.

00:12:50.246 --> 00:12:52.056 A:middle
In this case, it just
denotes the hard line

00:12:52.466 --> 00:12:53.776 A:middle
that is the bottom
of the screen.

00:12:54.256 --> 00:12:58.576 A:middle
But there's another concept
in this UI that isn't covered

00:12:58.576 --> 00:13:02.796 A:middle
by layout guides and that is
the whitespace that is inset


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.576 --> 00:13:02.796 A:middle
by layout guides and that is
the whitespace that is inset

00:13:02.796 --> 00:13:04.576 A:middle
in the content from the
edges of the screen.

00:13:04.976 --> 00:13:08.526 A:middle
So, in iOS 8, we're
introducing an API on UIView,

00:13:08.926 --> 00:13:12.826 A:middle
which is layout guides which
tells you about that whitespace

00:13:12.826 --> 00:13:15.866 A:middle
and allows you to set
whatever whitespace you want

00:13:15.866 --> 00:13:16.526 A:middle
for your layout.

00:13:16.526 --> 00:13:18.186 A:middle
So that's a property on UIView.

00:13:18.516 --> 00:13:22.246 A:middle
It also comes with native
support for autolayout,

00:13:22.336 --> 00:13:25.136 A:middle
and that's in the form of
new NS layout attributes,

00:13:25.136 --> 00:13:30.346 A:middle
including left, right,
leading, trailing, et cetera.

00:13:30.346 --> 00:13:31.166 A:middle
There's a bunch of these.

00:13:31.366 --> 00:13:33.566 A:middle
If you've been using
autolayout in your code,

00:13:33.566 --> 00:13:35.886 A:middle
you'll find this
natural and familiar.

00:13:37.366 --> 00:13:40.916 A:middle
So, to learn more tricks about
building adaptive layout apps,

00:13:41.016 --> 00:13:43.416 A:middle
there's going to be
a great talk tomorrow

00:13:43.416 --> 00:13:46.636 A:middle
in the Mission called Building
Adaptive Apps with UIKit.

00:13:48.206 --> 00:13:50.926 A:middle
So now I'm going to be moving
on to talking about some

00:13:50.926 --> 00:13:54.636 A:middle
of the ways that we have
adopted the philosophy

00:13:54.946 --> 00:13:59.656 A:middle
of adaptive size class-based
design to build things

00:13:59.656 --> 00:14:02.976 A:middle
that you can use out of
the box that are adaptive


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.656 --> 00:14:02.976 A:middle
that you can use out of
the box that are adaptive

00:14:03.166 --> 00:14:05.136 A:middle
without you having
to do any work.

00:14:05.736 --> 00:14:08.756 A:middle
So we'll start by talking about
Adaptive View Controllers.

00:14:08.756 --> 00:14:09.816 A:middle
This is a great new feature.

00:14:11.296 --> 00:14:14.236 A:middle
And to begin to dive into this,
I'm actually going to go back

00:14:14.236 --> 00:14:18.706 A:middle
and talk a little bit more about
this idea of orientation which,

00:14:18.816 --> 00:14:20.236 A:middle
or rotation, which we touched

00:14:20.776 --> 00:14:24.126 A:middle
on with the orientation
segment of the talk.

00:14:24.766 --> 00:14:26.776 A:middle
So, now I'm going
to have us kind

00:14:26.946 --> 00:14:31.696 A:middle
of ask ourselves this question,
what is rotation, really?

00:14:32.106 --> 00:14:35.316 A:middle
Because asking ourselves
that question yields a result

00:14:35.316 --> 00:14:37.156 A:middle
that helps us write
adaptive code.

00:14:37.696 --> 00:14:42.896 A:middle
And that result is, it's
just an animated change

00:14:42.896 --> 00:14:44.326 A:middle
of the size of the view.

00:14:45.366 --> 00:14:49.236 A:middle
So, if we consider a
view that's onscreen,

00:14:50.546 --> 00:14:54.306 A:middle
we might have been thinking
of when the device rotates,

00:14:54.806 --> 00:14:59.656 A:middle
that view rotates with it
and this is a rotating view.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.816 --> 00:15:05.156 A:middle
That perspective actually
complicates the idea

00:15:05.156 --> 00:15:07.276 A:middle
of what we have to
do in our layout.

00:15:07.826 --> 00:15:11.016 A:middle
And so, beginning in iOS
8 we're encouraging you

00:15:11.016 --> 00:15:14.776 A:middle
to take a different perspective
towards how rotation works,

00:15:15.176 --> 00:15:19.086 A:middle
which is just think of it as
a view that happens to have,

00:15:19.636 --> 00:15:22.376 A:middle
in this case, a regular
height and a compact width,

00:15:23.136 --> 00:15:26.956 A:middle
and when the device rotates,
something happens to that view.

00:15:27.306 --> 00:15:28.546 A:middle
And the thing that happens

00:15:28.546 --> 00:15:32.066 A:middle
to that view is it undergoes
an animated size change,

00:15:32.546 --> 00:15:36.526 A:middle
and perhaps it goes to a compact
height and a regular width.

00:15:36.526 --> 00:15:41.986 A:middle
I don't want to confuse you
in that standard on an iPhone

00:15:42.776 --> 00:15:44.836 A:middle
in landscape, the width
is actually compact,

00:15:45.316 --> 00:15:47.026 A:middle
but this is an illustrative
example

00:15:47.206 --> 00:15:48.756 A:middle
of what might happen
to your view.

00:15:48.756 --> 00:15:52.936 A:middle
As your view changes size,
it can go to any new size

00:15:52.936 --> 00:15:53.876 A:middle
and any new size class,

00:15:53.876 --> 00:15:55.456 A:middle
and that's really
all that's happening

00:15:55.816 --> 00:15:58.176 A:middle
when you're undergoing
a rotation.

00:15:58.556 --> 00:16:00.446 A:middle
And part of the advantage
of thinking


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.556 --> 00:16:00.446 A:middle
And part of the advantage
of thinking

00:16:00.446 --> 00:16:04.586 A:middle
about rotations this way
is merely as size change is

00:16:04.586 --> 00:16:08.656 A:middle
that once you handle
rotations as size changes,

00:16:09.366 --> 00:16:11.866 A:middle
any other situation
that you might end up in

00:16:12.096 --> 00:16:15.166 A:middle
where your size changes,
you will have handled

00:16:15.976 --> 00:16:18.666 A:middle
because you will have
written your code in a way

00:16:18.666 --> 00:16:20.996 A:middle
that it can handle size
changes especially those

00:16:21.286 --> 00:16:21.996 A:middle
that are animated.

00:16:22.606 --> 00:16:26.596 A:middle
So in order to move in this new
direction, we're taking a lot

00:16:26.596 --> 00:16:31.236 A:middle
of API that used to exist in
iOS 7 while it still exists

00:16:31.236 --> 00:16:34.136 A:middle
in iOS 8, but we're
deprecating it.

00:16:34.346 --> 00:16:36.986 A:middle
This is just a subset
of the rotation API

00:16:36.986 --> 00:16:38.906 A:middle
that is deprecated in iOS 8.

00:16:39.516 --> 00:16:45.616 A:middle
[ Applause ]

00:16:46.116 --> 00:16:49.576 A:middle
And what I really like is what
we're replacing this with.

00:16:50.046 --> 00:16:52.136 A:middle
Thinking about things
as size changes,

00:16:52.866 --> 00:16:54.626 A:middle
you can just implement
one method.

00:16:55.376 --> 00:16:56.766 A:middle
We'll transition to size.

00:16:57.866 --> 00:17:00.036 A:middle
And since that takes a
transition coordinator,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:57.866 --> 00:17:00.036 A:middle
And since that takes a
transition coordinator,

00:17:00.386 --> 00:17:02.566 A:middle
if there's interesting things
you want to do-if you want

00:17:02.656 --> 00:17:05.516 A:middle
to animate along with that size
change whether it be rotation

00:17:05.516 --> 00:17:07.786 A:middle
or anything else
that changes the size

00:17:08.046 --> 00:17:12.476 A:middle
of your view controller-you can
use that transition coordinator

00:17:12.836 --> 00:17:15.266 A:middle
to do an animation, and
you just send in a block

00:17:15.665 --> 00:17:17.766 A:middle
with that transition coordinator

00:17:17.945 --> 00:17:20.465 A:middle
and those changes
will be animated along

00:17:20.465 --> 00:17:23.066 A:middle
with the size change,
which may be a rotation

00:17:23.376 --> 00:17:24.136 A:middle
of your view controller.

00:17:24.136 --> 00:17:26.576 A:middle
So in this case, I've
used the size change

00:17:26.796 --> 00:17:28.636 A:middle
to simply change the
number of columns

00:17:28.856 --> 00:17:32.116 A:middle
in my photo layout
based on the new size.

00:17:33.836 --> 00:17:39.416 A:middle
So beyond just view controllers
themselves with rotation,

00:17:39.666 --> 00:17:42.666 A:middle
we've built some view
controllers that allow you

00:17:42.766 --> 00:17:47.416 A:middle
to adapt to the hierarchy
from device to device in a way

00:17:47.416 --> 00:17:49.376 A:middle
that makes it so that
you write less code.

00:17:51.056 --> 00:17:52.766 A:middle
And so, many of you have
probably written something

00:17:52.766 --> 00:17:55.476 A:middle
like you see on the
screen, a primary,

00:17:55.476 --> 00:17:57.406 A:middle
secondary view controller
pattern

00:17:57.406 --> 00:17:59.676 A:middle
and you do this using a
split view controller,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:00.446 --> 00:18:02.986 A:middle
and then you embed a
navigation controller

00:18:03.346 --> 00:18:07.556 A:middle
as the master view controller
of that split view controller.

00:18:08.286 --> 00:18:11.266 A:middle
And then when you would go and
take this same design pattern

00:18:11.266 --> 00:18:14.056 A:middle
of a primary, secondary view
controller, you would end

00:18:14.056 --> 00:18:17.206 A:middle
up on the iPhone with
a navigation controller

00:18:17.276 --> 00:18:18.556 A:middle
as your view controller,

00:18:19.066 --> 00:18:23.266 A:middle
and that meant you would have
a device idiom check saying,

00:18:23.436 --> 00:18:24.546 A:middle
am I on an iPad?

00:18:24.796 --> 00:18:27.486 A:middle
If so, build this view
controller hierarchy.

00:18:27.736 --> 00:18:31.086 A:middle
If not, build this other
view controller hierarchy

00:18:31.086 --> 00:18:33.406 A:middle
with a navigation
controller as an iPhone.

00:18:34.816 --> 00:18:37.506 A:middle
While on iPad just
as we want to make it

00:18:37.506 --> 00:18:38.676 A:middle
so that you no longer need

00:18:38.676 --> 00:18:43.266 A:middle
to care what your interface
orientation is, we also want

00:18:43.266 --> 00:18:44.696 A:middle
to make it so that
you no longer need

00:18:44.696 --> 00:18:47.516 A:middle
to care what your
interface idiom is.

00:18:47.856 --> 00:18:49.156 A:middle
And to do that we're making it

00:18:49.156 --> 00:18:51.086 A:middle
so that you can build this
interface on an iPhone

00:18:51.436 --> 00:18:54.466 A:middle
with the split view controller
as the root view controller.

00:18:55.526 --> 00:18:58.056 A:middle
And it will still contain
a navigation controller

00:18:58.406 --> 00:18:59.986 A:middle
as its master view controller.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.516 --> 00:19:04.266 A:middle
Then when you want to, you
know, push another view

00:19:04.266 --> 00:19:06.956 A:middle
onto the stack, you can just
call show view controller

00:19:06.956 --> 00:19:07.336 A:middle
on this.

00:19:07.366 --> 00:19:08.946 A:middle
It will do exactly
what you would expect

00:19:09.066 --> 00:19:13.196 A:middle
from a navigation experience,
pushing a view onto the stack,

00:19:13.596 --> 00:19:15.916 A:middle
and when you would
execute something

00:19:15.916 --> 00:19:19.866 A:middle
that would be the equivalent
of showing a detail on iPad,

00:19:19.866 --> 00:19:22.166 A:middle
you can just call show
detail view controller.

00:19:22.576 --> 00:19:25.516 A:middle
And on the phone, it will do
exactly what you would expect a

00:19:25.576 --> 00:19:28.876 A:middle
phone interface to
do, which is push it

00:19:28.916 --> 00:19:30.456 A:middle
onto the navigation controller

00:19:30.456 --> 00:19:33.216 A:middle
because that's all that's
available on the phone.

00:19:33.576 --> 00:19:35.306 A:middle
But that same set of APIs,

00:19:35.606 --> 00:19:38.436 A:middle
that same call sequence
calling show view controller

00:19:38.566 --> 00:19:42.256 A:middle
and show detailed view
controller on iPad,

00:19:42.606 --> 00:19:46.656 A:middle
will yield what the user
would expect on iPad,

00:19:46.936 --> 00:19:48.366 A:middle
which is a detailed
view controller

00:19:48.656 --> 00:19:49.936 A:middle
over on the right
of the split view.

00:19:51.496 --> 00:19:54.796 A:middle
So, UISplitViewController
is really a workhorse

00:19:54.886 --> 00:19:56.626 A:middle
to be used in iOS 8.

00:19:57.166 --> 00:20:00.316 A:middle
The key to it is that it's
now available on all devices,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:57.166 --> 00:20:00.316 A:middle
The key to it is that it's
now available on all devices,

00:20:00.596 --> 00:20:02.976 A:middle
allowing you to build view
controller hierarchies

00:20:03.246 --> 00:20:05.596 A:middle
that don't depend on
what device you're on.

00:20:05.646 --> 00:20:08.946 A:middle
It's the same hierarchy
on iPad and iPhone,

00:20:09.646 --> 00:20:12.246 A:middle
and split view controller
will adapt for you.

00:20:12.696 --> 00:20:14.596 A:middle
So with that it handles
the primary,

00:20:14.596 --> 00:20:17.576 A:middle
secondary controller pattern
transparently for you,

00:20:17.876 --> 00:20:19.726 A:middle
and also to go along with this,

00:20:19.726 --> 00:20:23.646 A:middle
split view controller has
a whole host of new updates

00:20:23.646 --> 00:20:25.046 A:middle
to its API and its release.

00:20:25.046 --> 00:20:27.676 A:middle
I can't even begin to
talk about what they are.

00:20:27.906 --> 00:20:29.376 A:middle
If you'd like to
learn more about them,

00:20:29.376 --> 00:20:31.956 A:middle
there will be a great talk
tomorrow morning called View

00:20:31.956 --> 00:20:35.326 A:middle
Controller Advancements
in iOS 8.

00:20:36.046 --> 00:20:39.206 A:middle
So, moving on to
Adaptive Presentations.

00:20:39.526 --> 00:20:42.906 A:middle
This is another way that the
view controller system is

00:20:43.026 --> 00:20:48.276 A:middle
helping you have code that
is simple and device agnostic

00:20:49.116 --> 00:20:51.826 A:middle
but that does the right
thing on each device.

00:20:52.126 --> 00:20:54.116 A:middle
We want to help you
build something

00:20:54.116 --> 00:20:57.726 A:middle
like a full screen modal
presentation on iPhone

00:20:57.906 --> 00:21:00.606 A:middle
and get something more
appropriate like a form sheet


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.906 --> 00:21:00.606 A:middle
and get something more
appropriate like a form sheet

00:21:00.606 --> 00:21:05.766 A:middle
on iPad or even a popover,
and do this without code

00:21:05.766 --> 00:21:07.416 A:middle
that checks what
device you're on.

00:21:07.416 --> 00:21:09.726 A:middle
It'll be the same
code on every device.

00:21:11.126 --> 00:21:13.586 A:middle
So in particular, one thing

00:21:13.586 --> 00:21:18.296 A:middle
that is really changing
its paradigm is popovers.

00:21:19.206 --> 00:21:22.776 A:middle
Prior to iOS 8 popovers
were only available on iPad,

00:21:23.046 --> 00:21:26.136 A:middle
and we would use them in the
form of UI popover controller.

00:21:27.116 --> 00:21:29.476 A:middle
Well, that paradigm is
changing significantly

00:21:29.786 --> 00:21:31.976 A:middle
because we're now no
longer requiring the use

00:21:31.976 --> 00:21:34.306 A:middle
of UI popover controller
to present a popover.

00:21:35.316 --> 00:21:38.096 A:middle
Instead, popovers are
presented via the API

00:21:38.666 --> 00:21:42.976 A:middle
as a presentation style
for view controller.

00:21:43.516 --> 00:21:48.546 A:middle
[ Applause ]

00:21:49.046 --> 00:21:51.976 A:middle
So that means if you present
a popover or a view controller

00:21:51.976 --> 00:21:53.716 A:middle
with a popover presentation
style

00:21:54.056 --> 00:21:57.796 A:middle
and the presenting view
controller horizontalSizeClass

00:21:57.796 --> 00:21:59.736 A:middle
is regular, it would just appear

00:21:59.736 --> 00:22:02.356 A:middle
as you expect a popover
to appear.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.736 --> 00:22:02.356 A:middle
as you expect a popover
to appear.

00:22:02.786 --> 00:22:05.686 A:middle
With that same code using a
popover presentation style,

00:22:05.986 --> 00:22:07.626 A:middle
if the presenting view
controller is compact

00:22:08.356 --> 00:22:10.776 A:middle
in the horizontal dimension
like you would see on an iPhone,

00:22:11.176 --> 00:22:15.466 A:middle
it would just appear
as an oversheet

00:22:16.476 --> 00:22:19.406 A:middle
so that you get what you
would expect on iPhone.

00:22:20.066 --> 00:22:23.076 A:middle
So we're taking this,
these concepts,

00:22:23.076 --> 00:22:26.126 A:middle
and we're bringing adaptivity
to some other view controllers

00:22:26.126 --> 00:22:30.196 A:middle
that we ran like search results,
which you may be thinking, well,

00:22:30.196 --> 00:22:31.076 A:middle
that's not a view controller.

00:22:31.076 --> 00:22:34.886 A:middle
Well, we're fixing that because
UISearchDisplayController is

00:22:34.886 --> 00:22:37.156 A:middle
replaced by UISearchController,

00:22:37.886 --> 00:22:40.776 A:middle
and UISearchController is
crucially a view controller

00:22:40.776 --> 00:22:44.796 A:middle
subclass, and that means that
it can take advantage of all

00:22:44.796 --> 00:22:47.916 A:middle
of the power of adaptive
hierarchies and presentations

00:22:48.166 --> 00:22:49.416 A:middle
that we've just talked about.

00:22:49.646 --> 00:22:52.956 A:middle
That's all at your fingertips
with the new UISearchController.

00:22:54.226 --> 00:22:58.626 A:middle
This new UISearchController is
also able to be fully customized

00:22:58.686 --> 00:23:02.176 A:middle
in the way that its UI
appears and how it's presented


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.686 --> 00:23:02.176 A:middle
in the way that its UI
appears and how it's presented

00:23:02.386 --> 00:23:05.156 A:middle
so that you can adapt
the search controller

00:23:05.156 --> 00:23:08.106 A:middle
into your application even if
you have a fully customized UI

00:23:08.666 --> 00:23:10.896 A:middle
like that in FaceTime,
it will look the way

00:23:10.896 --> 00:23:11.956 A:middle
that you want it to look.

00:23:12.716 --> 00:23:15.656 A:middle
We're doing something
similar with alerts in iOS 8,

00:23:16.036 --> 00:23:20.316 A:middle
and we're taking UIAlertView and
UIActionSheet and replacing them

00:23:20.526 --> 00:23:21.816 A:middle
with UIAlertController.

00:23:22.516 --> 00:23:27.686 A:middle
[ Applause ]

00:23:28.186 --> 00:23:30.586 A:middle
I kind of thought you
guys might like that one.

00:23:30.776 --> 00:23:33.976 A:middle
UIAlertController is also
a UIViewController subclass

00:23:33.976 --> 00:23:37.496 A:middle
so that we can internally
use all of the power

00:23:37.496 --> 00:23:41.696 A:middle
of adaptive presentations to our
advantage and to your advantage

00:23:41.836 --> 00:23:42.996 A:middle
so that things look great.

00:23:43.196 --> 00:23:46.266 A:middle
Of course, UIAlertController
adapts its styling

00:23:46.546 --> 00:23:50.196 A:middle
to the context so that when
you present it on an iPhone

00:23:50.646 --> 00:23:54.226 A:middle
or on anything that has a
compact horizontalSizeClass,

00:23:54.566 --> 00:23:56.746 A:middle
you get an action
sheet appearance.

00:23:56.746 --> 00:23:58.116 A:middle
You can get an alert
appearance also

00:23:58.116 --> 00:24:00.856 A:middle
but in the action sheet style,
you get something that looks


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.116 --> 00:24:00.856 A:middle
but in the action sheet style,
you get something that looks

00:24:00.856 --> 00:24:02.856 A:middle
like what you expect an
action sheet to look like,

00:24:03.496 --> 00:24:06.876 A:middle
and the same code that presents
that action sheet on an iPhone,

00:24:08.006 --> 00:24:11.206 A:middle
in a regular horizontalSizeClass
like an iPad will appear

00:24:11.206 --> 00:24:12.936 A:middle
in a popover without you having

00:24:12.936 --> 00:24:14.986 A:middle
to write any device-checking
code.

00:24:16.046 --> 00:24:18.246 A:middle
So you can learn
more about how all

00:24:18.246 --> 00:24:21.646 A:middle
of this adaptive presentation
machinery works by checking

00:24:21.646 --> 00:24:23.466 A:middle
out A Look Inside
View Controllers,

00:24:23.536 --> 00:24:24.826 A:middle
Thursday morning in the Mission.

00:24:25.146 --> 00:24:26.796 A:middle
I've seen this talk
a couple of times.

00:24:27.016 --> 00:24:28.506 A:middle
It's really great if you want

00:24:28.506 --> 00:24:31.416 A:middle
to understand the nitty-gritty
behind how all these

00:24:31.446 --> 00:24:33.776 A:middle
presentation controllers
work, and especially

00:24:33.776 --> 00:24:35.016 A:middle
if you're thinking, hey,

00:24:35.016 --> 00:24:37.456 A:middle
this built-in UIKit
stuff is fantastic.

00:24:37.816 --> 00:24:40.636 A:middle
I want to build my own
presentation controllers

00:24:40.866 --> 00:24:42.196 A:middle
that are also adaptive.

00:24:42.346 --> 00:24:45.066 A:middle
This talk will teach
you how to do that.

00:24:45.336 --> 00:24:49.326 A:middle
So, what we've been talking
about for a while is tools

00:24:49.326 --> 00:24:53.066 A:middle
that we're giving you via the
API to write adaptive code,

00:24:53.666 --> 00:24:56.316 A:middle
but there's another step

00:24:56.606 --> 00:24:58.656 A:middle
to writing great code
and that's Testing.

00:24:59.416 --> 00:25:01.896 A:middle
So we're giving you another
great tool that we're excited


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.416 --> 00:25:01.896 A:middle
So we're giving you another
great tool that we're excited

00:25:01.896 --> 00:25:06.106 A:middle
about in the iOS simulator
and that is the ability

00:25:06.166 --> 00:25:10.296 A:middle
to resize the physical
simulated hardware.

00:25:11.746 --> 00:25:14.056 A:middle
And, so I don't know if you
can see it on the screen.

00:25:14.056 --> 00:25:17.526 A:middle
It's a little small, but
you'll find in your SDK

00:25:17.526 --> 00:25:21.176 A:middle
if you haven't found it yet, and
you launch the iOS simulator,

00:25:21.176 --> 00:25:23.536 A:middle
there are two new devices
that you can select.

00:25:24.036 --> 00:25:27.826 A:middle
One is a resizable iPad and
one is a resizable iPhone.

00:25:28.596 --> 00:25:32.236 A:middle
You can use these to actually
punch in custom values

00:25:32.466 --> 00:25:35.906 A:middle
for the hardware size of
the iPad or the iPhone

00:25:36.306 --> 00:25:40.136 A:middle
and test the adaptivity
of your code on the fly.

00:25:41.516 --> 00:25:46.676 A:middle
[ Applause ]

00:25:47.176 --> 00:25:51.156 A:middle
We're really excited for how
this kind of thing can make,

00:25:51.156 --> 00:25:52.876 A:middle
can change the way
we architect apps

00:25:53.076 --> 00:25:56.316 A:middle
because we can architect
things the way that we intend

00:25:56.316 --> 00:25:58.976 A:middle
and then test that our
intentions are doing what we

00:25:59.036 --> 00:26:00.366 A:middle
thought that they
were going to do.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.036 --> 00:26:00.366 A:middle
thought that they
were going to do.

00:26:01.096 --> 00:26:03.646 A:middle
So I actually stole this
app you see on-screen

00:26:04.006 --> 00:26:07.176 A:middle
from the A Look Inside
Presentation Controllers talk

00:26:07.176 --> 00:26:08.066 A:middle
that I just mentioned,

00:26:08.446 --> 00:26:12.656 A:middle
and it has a custom presentation
controller, which is the view

00:26:12.656 --> 00:26:14.916 A:middle
that slides out from the right
and it's designed to take

00:26:14.916 --> 00:26:16.136 A:middle
to take up a third
of the screen.

00:26:16.476 --> 00:26:20.166 A:middle
I went and tested it in the
resizable iPad to make sure

00:26:20.166 --> 00:26:21.696 A:middle
that if it was in
a compact width,

00:26:22.096 --> 00:26:24.156 A:middle
it would do the right
thing, and sure enough,

00:26:24.156 --> 00:26:26.036 A:middle
the guys who wrote
this are really great

00:26:26.036 --> 00:26:27.366 A:middle
and it does do the right thing.

00:26:27.696 --> 00:26:30.206 A:middle
It presents as an
OverFullScreen presentation

00:26:30.866 --> 00:26:31.996 A:middle
in the compact width.

00:26:33.036 --> 00:26:37.476 A:middle
So, let's talk about some of the
new things in iOS 8 for UIKit

00:26:37.476 --> 00:26:39.066 A:middle
for customizing user interface.

00:26:39.676 --> 00:26:42.966 A:middle
Of a new class called
UIVisualEffectView,

00:26:43.366 --> 00:26:45.646 A:middle
the UIView is subclass,
and it's a view

00:26:45.646 --> 00:26:48.106 A:middle
that takes UIVisualEffectObject

00:26:48.446 --> 00:26:50.966 A:middle
that parameterizes
custom rendering modes

00:26:50.966 --> 00:26:53.006 A:middle
for the view itself and
the content inside it.

00:26:54.156 --> 00:26:56.266 A:middle
So we're shipping a
couple of different effects

00:26:56.576 --> 00:27:00.656 A:middle
that you can use with the visual
effect view to get the effect


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:56.576 --> 00:27:00.656 A:middle
that you can use with the visual
effect view to get the effect

00:27:00.656 --> 00:27:03.686 A:middle
that you want, and the first
one is the UIBlurEffect.

00:27:04.516 --> 00:27:12.066 A:middle
[ Applause ]

00:27:12.566 --> 00:27:14.476 A:middle
Believe me I've been
waiting for you guys to get

00:27:14.476 --> 00:27:17.426 A:middle
to be able to use this too.

00:27:17.576 --> 00:27:19.776 A:middle
So UIBlurEffect will
give you a live blur

00:27:19.776 --> 00:27:21.716 A:middle
over the content
where you use it.

00:27:22.316 --> 00:27:24.486 A:middle
The second effect
that we're shipping is

00:27:24.486 --> 00:27:25.756 A:middle
the UIVibrancyEffect.

00:27:26.676 --> 00:27:29.866 A:middle
Now, a vibrancy effect if
you don't know what that is,

00:27:30.016 --> 00:27:33.536 A:middle
that refers to the separators
in Notification Center.

00:27:34.056 --> 00:27:36.396 A:middle
It may be a little bit
hard to see on this screen,

00:27:36.396 --> 00:27:38.666 A:middle
but you can pull out your phone,
pull down Notification Center.

00:27:39.016 --> 00:27:40.976 A:middle
Take a look at those
beautiful color-changing,

00:27:40.976 --> 00:27:43.566 A:middle
color-dodging separators,
and that's vibrancy.

00:27:44.556 --> 00:27:47.306 A:middle
Another thing-I heard a clap
over there, thanks [laughter].

00:27:49.076 --> 00:27:52.416 A:middle
Another thing that we're
introducing is Image Assets.

00:27:52.416 --> 00:27:55.656 A:middle
Image assets are something that
encapsulate the 1X, the 2X,

00:27:55.776 --> 00:27:59.546 A:middle
the iPhone, the iPad
representations of your image

00:27:59.546 --> 00:28:02.276 A:middle
in the home matrix thereof,
and it comes with some API


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.546 --> 00:28:02.276 A:middle
in the home matrix thereof,
and it comes with some API

00:28:02.276 --> 00:28:05.636 A:middle
that makes it really easy
to get the right images

00:28:05.816 --> 00:28:08.396 A:middle
out of the image catalog
because we can use something

00:28:08.396 --> 00:28:11.546 A:middle
like image named and
add a parameter to it

00:28:11.876 --> 00:28:13.306 A:middle
that takes TraitCollection.

00:28:14.246 --> 00:28:15.976 A:middle
And since TraitCollections
are hung right

00:28:15.976 --> 00:28:18.986 A:middle
on your view controllers, you
can take that TraitCollection

00:28:18.986 --> 00:28:22.166 A:middle
from self and viewDidAppear or
something and apply it directly

00:28:22.406 --> 00:28:24.636 A:middle
to an image view in
your view controller,

00:28:24.636 --> 00:28:25.916 A:middle
and you'll have the right image.

00:28:26.186 --> 00:28:30.886 A:middle
The if statement that is implied
in figuring out 1X, 2X, iPhone,

00:28:30.976 --> 00:28:33.846 A:middle
iPad, et cetera, is all encoded
within the TraitCollection,

00:28:34.046 --> 00:28:35.616 A:middle
which you don't have
to do any work for.

00:28:35.616 --> 00:28:38.026 A:middle
It comes directly with
your view controller.

00:28:38.906 --> 00:28:39.546 A:middle
Thank you.

00:28:40.516 --> 00:28:43.636 A:middle
[ Applause ]

00:28:44.136 --> 00:28:47.436 A:middle
Another UI feature
is Condensing Bars.

00:28:47.436 --> 00:28:51.946 A:middle
You may be familiar with this
if you've used Safari on iOS 7,

00:28:51.946 --> 00:28:53.736 A:middle
and it has a similar concept.

00:28:53.736 --> 00:28:55.966 A:middle
When the user scrolls, the
search bars [inaudible] shrink.

00:28:56.736 --> 00:29:01.256 A:middle
Well, we've extended that
concept throughout the iOS 8 SDK


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:56.736 --> 00:29:01.256 A:middle
Well, we've extended that
concept throughout the iOS 8 SDK

00:29:01.256 --> 00:29:05.066 A:middle
and given you access to that
sort of behavior in your app.

00:29:05.326 --> 00:29:07.606 A:middle
So if you have a navigation
bar, you can make it so that

00:29:07.606 --> 00:29:10.036 A:middle
when a user scrolls the
navigation bar gets a little bit

00:29:10.036 --> 00:29:14.806 A:middle
smaller, or if you have a
view that has a navigation bar

00:29:14.806 --> 00:29:17.466 A:middle
and a toolbar, you can make it
so that when a user scrolls,

00:29:17.466 --> 00:29:18.556 A:middle
the navigation bar shrinks

00:29:18.556 --> 00:29:20.356 A:middle
and the toolbar disappears
all together.

00:29:21.516 --> 00:29:26.546 A:middle
[ Applause ]

00:29:27.046 --> 00:29:29.026 A:middle
So to learn all about some
great things you can do

00:29:29.126 --> 00:29:31.896 A:middle
with interface customizations,
we have a talk

00:29:32.036 --> 00:29:35.476 A:middle
that is tomorrow called Creating
Custom iOS User Interfaces.

00:29:36.916 --> 00:29:40.356 A:middle
So, I alluded earlier
to a feature that is,

00:29:40.406 --> 00:29:41.876 A:middle
that we're pushing in iOS 8,

00:29:42.276 --> 00:29:43.896 A:middle
which is dynamic
type everywhere.

00:29:44.026 --> 00:29:48.206 A:middle
All of Apple's apps have adapted
or have adopted dynamic type

00:29:48.256 --> 00:29:52.006 A:middle
and are adapting to the changes
that are required for that.

00:29:52.856 --> 00:29:54.256 A:middle
One of the things
that we realize is

00:29:54.306 --> 00:29:57.636 A:middle
that table views are
a very common place

00:29:57.636 --> 00:30:00.036 A:middle
where text is displayed and
something that we would want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:57.636 --> 00:30:00.036 A:middle
where text is displayed and
something that we would want

00:30:00.036 --> 00:30:03.376 A:middle
to respond to user
text size changes.

00:30:03.846 --> 00:30:08.806 A:middle
And so we have made it easier
in iOS 8 for you to respond

00:30:08.806 --> 00:30:11.106 A:middle
to these types of
changes by allowing you

00:30:11.106 --> 00:30:12.726 A:middle
to have dynamic type rows

00:30:12.836 --> 00:30:14.786 A:middle
without actually
implementing the delegate method

00:30:14.786 --> 00:30:15.966 A:middle
tableView:heightForRow
AtIndexPath:.

00:30:16.516 --> 00:30:22.746 A:middle
[ Applause ]

00:30:23.246 --> 00:30:25.356 A:middle
I know that a lot of you
have been asking for this

00:30:25.356 --> 00:30:27.566 A:middle
over the years, and
so now our solution

00:30:27.566 --> 00:30:30.136 A:middle
to that is cells can
encapsulate their size

00:30:30.136 --> 00:30:30.976 A:middle
and logic inside themselves.

00:30:31.516 --> 00:30:37.566 A:middle
[ Applause ]

00:30:38.066 --> 00:30:39.656 A:middle
It gets better, actually,

00:30:40.216 --> 00:30:44.096 A:middle
because the cells natively
support autolayout.

00:30:45.036 --> 00:30:49.556 A:middle
So, yeah, it does
get better, right?

00:30:49.556 --> 00:30:51.656 A:middle
And so if you have
constraints in your cells,

00:30:51.876 --> 00:30:55.246 A:middle
UIKit can derive the appropriate
height for those cells

00:30:55.246 --> 00:30:56.846 A:middle
from the content in
them and the constraints

00:30:56.846 --> 00:30:57.706 A:middle
that you place on them.

00:30:58.456 --> 00:31:00.106 A:middle
You can do something like this


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.456 --> 00:31:00.106 A:middle
You can do something like this

00:31:00.276 --> 00:31:02.036 A:middle
where I'm not implementing
the delegate

00:31:02.036 --> 00:31:03.546 A:middle
method heightForRowAtIndexPath.

00:31:03.896 --> 00:31:07.166 A:middle
Instead in my cells initializer,
I set some constraints.

00:31:07.526 --> 00:31:09.416 A:middle
In this particular
cell, I have a text view

00:31:09.416 --> 00:31:10.576 A:middle
that will hold some content.

00:31:10.876 --> 00:31:13.576 A:middle
I set a vertical constraint
that just adds some padding

00:31:13.866 --> 00:31:16.516 A:middle
around that text view using
the visual format language.

00:31:16.676 --> 00:31:20.126 A:middle
I do the same thing on the
horizontal axis, adding padding

00:31:20.126 --> 00:31:22.316 A:middle
on the right and left
of that text view,

00:31:23.206 --> 00:31:24.836 A:middle
and then when this
cell is created,

00:31:24.836 --> 00:31:26.086 A:middle
it will be populated
with some text.

00:31:26.696 --> 00:31:28.716 A:middle
The table view will
know how wide it is.

00:31:29.386 --> 00:31:32.056 A:middle
We'll be able to take the
content that's in that text view

00:31:32.346 --> 00:31:34.786 A:middle
and the margins that I've
set up with autolayout

00:31:34.786 --> 00:31:36.466 A:middle
and determine what
the appropriate height

00:31:36.516 --> 00:31:38.566 A:middle
for that cell should be
based on that content

00:31:38.566 --> 00:31:39.486 A:middle
and the width of the table.

00:31:40.796 --> 00:31:43.996 A:middle
If you really like to learn
more about that or if you just

00:31:43.996 --> 00:31:47.256 A:middle
like to hear me talk, come
back to this same room two days

00:31:47.256 --> 00:31:49.386 A:middle
from now where I'll
be presenting along

00:31:49.386 --> 00:31:51.236 A:middle
with my very esteemed colleague,

00:31:51.236 --> 00:31:53.196 A:middle
the beloved Dr. Olivia
Gunish [phonetic],

00:31:53.666 --> 00:31:55.566 A:middle
and we'll be telling
you all about what's new

00:31:55.566 --> 00:31:57.226 A:middle
in table and collection views.

00:31:58.246 --> 00:32:03.806 A:middle
So moving on to my favorite
feature of iOS 8 SDK.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.246 --> 00:32:03.806 A:middle
So moving on to my favorite
feature of iOS 8 SDK.

00:32:03.806 --> 00:32:05.846 A:middle
It was actually kind of
hard to wait until this part

00:32:05.846 --> 00:32:07.956 A:middle
of the presentation,
but App Extensions.

00:32:08.426 --> 00:32:09.716 A:middle
App extensions are
just fantastic.

00:32:10.516 --> 00:32:13.546 A:middle
[ Applause ]

00:32:14.046 --> 00:32:14.746 A:middle
You've seen this in the keynote,

00:32:14.906 --> 00:32:18.036 A:middle
but app extensions are just
going to change the way

00:32:18.036 --> 00:32:20.186 A:middle
that we write apps and the way

00:32:20.356 --> 00:32:23.436 A:middle
that users enjoy what
we produce for them.

00:32:23.796 --> 00:32:28.486 A:middle
We can do things like in
Photos, taking a photo,

00:32:28.676 --> 00:32:31.346 A:middle
bringing up a sheet that shows
the extensions that we have,

00:32:31.346 --> 00:32:34.116 A:middle
selecting your extension
right there in Photos,

00:32:34.356 --> 00:32:36.856 A:middle
applying something like
a filter to that photo,

00:32:37.046 --> 00:32:40.066 A:middle
and ending up in Photos
where we always were.

00:32:40.326 --> 00:32:42.936 A:middle
We never had to leave the app.

00:32:43.366 --> 00:32:45.536 A:middle
And your content is right there

00:32:45.576 --> 00:32:47.146 A:middle
for the user at their
fingertips.

00:32:47.886 --> 00:32:51.876 A:middle
We can also have sharing
extensions, which allow users

00:32:51.876 --> 00:32:55.046 A:middle
to share to your
sharing service right

00:32:55.046 --> 00:32:56.196 A:middle
from whatever app they're in.

00:32:56.196 --> 00:32:59.036 A:middle
They can share photos,
videos, text, and other content

00:32:59.286 --> 00:33:01.646 A:middle
without having to do a
do-si-do over to your app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.286 --> 00:33:01.646 A:middle
without having to do a
do-si-do over to your app.

00:33:02.206 --> 00:33:03.886 A:middle
This will be a better
experience for the user,

00:33:03.886 --> 00:33:07.896 A:middle
and it means more people
can share to your app

00:33:08.036 --> 00:33:10.416 A:middle
because it will be less
work for them to do so.

00:33:11.326 --> 00:33:14.636 A:middle
We also have Notification
Center widgets.

00:33:14.966 --> 00:33:17.626 A:middle
You can write a fantastic
Notification Center widget

00:33:17.856 --> 00:33:21.076 A:middle
that can end up on my phone
and I can see it every day,

00:33:21.076 --> 00:33:24.766 A:middle
and I can be extremely grateful
for you, to you for doing that.

00:33:25.696 --> 00:33:28.306 A:middle
So app extensions
open a lot of doors.

00:33:28.866 --> 00:33:31.346 A:middle
Some of the big things in iOS 8

00:33:31.346 --> 00:33:34.016 A:middle
that you can use app extensions
for, of course, Photos,

00:33:34.506 --> 00:33:37.136 A:middle
sharing, Notification Center.

00:33:37.476 --> 00:33:40.536 A:middle
It's also possible
to build extensions

00:33:40.536 --> 00:33:43.366 A:middle
that don't actually have a user
interface, and a great example

00:33:43.366 --> 00:33:46.156 A:middle
of this is the Bing
Translate action without UI

00:33:46.726 --> 00:33:49.256 A:middle
that we saw in the keynote.

00:33:49.406 --> 00:33:52.866 A:middle
Additionally, you can build
custom file providers.

00:33:52.866 --> 00:33:56.596 A:middle
This is something that will
allow the user to use documents

00:33:56.596 --> 00:33:59.606 A:middle
from your cloud storage
solution as seamlessly

00:33:59.606 --> 00:34:01.976 A:middle
as if those documents
were on iCloud drive,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.606 --> 00:34:01.976 A:middle
as if those documents
were on iCloud drive,

00:34:02.356 --> 00:34:06.116 A:middle
just by your extension providing
them to apps within the system.

00:34:06.726 --> 00:34:08.795 A:middle
Additionally, iOS
8 makes it possible

00:34:08.795 --> 00:34:10.226 A:middle
to write custom keyboards

00:34:10.226 --> 00:34:11.906 A:middle
that will be shared
throughout the system.

00:34:12.516 --> 00:34:14.545 A:middle
[ Applause ]

00:34:15.045 --> 00:34:15.976 A:middle
The front row likes that.

00:34:16.126 --> 00:34:17.866 A:middle
Yeah. To learn more about
building app extensions,

00:34:18.036 --> 00:34:20.806 A:middle
we have two great talks today
and tomorrow that will explain

00:34:20.806 --> 00:34:21.906 A:middle
to you everything
you need to know

00:34:22.146 --> 00:34:26.065 A:middle
about building upon this just
absolutely tremendous technology

00:34:26.065 --> 00:34:28.916 A:middle
that is just going
to-iOS 8 is the sign post.

00:34:28.916 --> 00:34:30.036 A:middle
It's different from here on out.

00:34:31.505 --> 00:34:33.466 A:middle
So some updates to
notifications.

00:34:34.626 --> 00:34:37.846 A:middle
Notifications have changed a
bit in particular in the way

00:34:37.846 --> 00:34:40.815 A:middle
that we model how users approve

00:34:40.815 --> 00:34:42.266 A:middle
of notifications
that appear onscreen.

00:34:43.376 --> 00:34:45.806 A:middle
It's always been
true that users have

00:34:45.886 --> 00:34:52.686 A:middle
to approve push notifications,
and it wasn't true previously

00:34:52.686 --> 00:34:55.176 A:middle
that users would have to
approve local notifications.

00:34:55.176 --> 00:34:56.496 A:middle
You could show a
local notification

00:34:56.806 --> 00:35:00.096 A:middle
without the user
giving approval to that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:56.806 --> 00:35:00.096 A:middle
without the user
giving approval to that.

00:35:00.096 --> 00:35:03.036 A:middle
So in iOS 8, any
notification that shows UI

00:35:03.036 --> 00:35:04.646 A:middle
on the screen is going

00:35:04.646 --> 00:35:07.206 A:middle
to require one-time
approval from the user.

00:35:08.016 --> 00:35:11.416 A:middle
The flip side to that is you
can send push notifications

00:35:11.416 --> 00:35:14.966 A:middle
that don't show UI to the
user, that simply shuttle data

00:35:14.966 --> 00:35:17.796 A:middle
to your app, and those
will not, by default,

00:35:17.986 --> 00:35:20.216 A:middle
require user approval.

00:35:20.466 --> 00:35:22.466 A:middle
So you can just send
notifications to your app,

00:35:22.466 --> 00:35:23.956 A:middle
and the user doesn't have to,
doesn't have to worry about it.

00:35:24.516 --> 00:35:26.966 A:middle
[ Applause ]

00:35:27.466 --> 00:35:30.436 A:middle
Notifications can now also have
actions associated with them.

00:35:30.926 --> 00:35:32.766 A:middle
That is, if you want
to display something

00:35:32.766 --> 00:35:36.476 A:middle
that has a reply button or other
actions, those can be tacked

00:35:36.656 --> 00:35:38.016 A:middle
on to your notifications,

00:35:38.016 --> 00:35:41.276 A:middle
and whatever action the user
selects, that will be shuttled

00:35:41.276 --> 00:35:43.186 A:middle
over to your app for
your custom logic

00:35:43.236 --> 00:35:45.216 A:middle
to be invoked based
on that action.

00:35:46.116 --> 00:35:49.276 A:middle
Notifications can also be
location based in iOS 8,

00:35:49.556 --> 00:35:52.466 A:middle
so you can pop up a notification
when the user enters

00:35:52.466 --> 00:35:54.886 A:middle
or exits a significant
area that you want

00:35:54.976 --> 00:35:55.976 A:middle
to show them a notification
about.

00:35:56.516 --> 00:36:01.616 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:56.516 --> 00:36:01.616 A:middle
[ Applause ]

00:36:02.116 --> 00:36:05.396 A:middle
Finally, we've increased
the payload push size

00:36:05.526 --> 00:36:07.956 A:middle
from 256 bytes to 1K.

00:36:08.516 --> 00:36:11.576 A:middle
[ Applause ]

00:36:12.076 --> 00:36:13.236 A:middle
Four times the love
for everyone.

00:36:13.586 --> 00:36:17.606 A:middle
If you want to learn more about
this, there's a great talk,

00:36:17.606 --> 00:36:20.816 A:middle
What's New in iOS Notifications,
tomorrow afternoon in Nob Hill.

00:36:21.766 --> 00:36:24.196 A:middle
So we're introducing
a doc picker in iOS 8.

00:36:25.226 --> 00:36:27.246 A:middle
And it looks beautiful-looks
like that.

00:36:27.556 --> 00:36:31.296 A:middle
It's, of course, available
on iPad and iPhone,

00:36:31.726 --> 00:36:34.186 A:middle
and what's great about this
is we now have system UI

00:36:34.836 --> 00:36:36.256 A:middle
for selecting documents.

00:36:37.006 --> 00:36:40.726 A:middle
You no longer have to write
completely custom code starting

00:36:40.726 --> 00:36:43.796 A:middle
from scratch to give a user a
document picking experience.

00:36:44.106 --> 00:36:46.216 A:middle
If you want to be able to
interact with documents

00:36:46.486 --> 00:36:48.176 A:middle
in your application,
you can use the

00:36:48.176 --> 00:36:51.456 A:middle
UIDocumentPickerViewController
[inaudible] and, of course,

00:36:51.496 --> 00:36:53.946 A:middle
since it's a view controller
it gets to take advantage

00:36:53.946 --> 00:36:56.746 A:middle
of all the adaptive presentation
and hierarchy machinery

00:36:57.076 --> 00:36:58.246 A:middle
that we talked about earlier.

00:36:59.116 --> 00:37:02.876 A:middle
This document picker has access
to documents in the local scope,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.116 --> 00:37:02.876 A:middle
This document picker has access
to documents in the local scope,

00:37:03.126 --> 00:37:05.516 A:middle
and seamlessly also in
the iCloud drive scope,

00:37:06.076 --> 00:37:07.576 A:middle
and finally anybody

00:37:07.576 --> 00:37:09.836 A:middle
who is supplying a
document provider extension

00:37:09.836 --> 00:37:12.646 A:middle
to the system, those
documents will also appear

00:37:12.646 --> 00:37:13.746 A:middle
in the document picker.

00:37:13.926 --> 00:37:18.136 A:middle
It's all similarly completely
seamless and easy for the user

00:37:18.556 --> 00:37:21.776 A:middle
and your application just gets
a URL back for the document

00:37:21.776 --> 00:37:22.846 A:middle
that it needs to open.

00:37:23.696 --> 00:37:26.006 A:middle
To learn more about
document picker support,

00:37:26.006 --> 00:37:28.136 A:middle
we've got a great talk on
Building a Document-based App

00:37:28.136 --> 00:37:29.316 A:middle
in the Marina on Thursday.

00:37:30.376 --> 00:37:33.556 A:middle
A quick word about
SDK Modernization.

00:37:33.876 --> 00:37:36.876 A:middle
We made a few changes throughout
the headers in the Cocoa

00:37:36.876 --> 00:37:41.206 A:middle
and Cocoa Touch APIs, and I just
want to give you a quick rundown

00:37:41.206 --> 00:37:43.146 A:middle
of what that's all about.

00:37:43.146 --> 00:37:46.216 A:middle
We've annotated all the
designated initializers of class

00:37:46.366 --> 00:37:48.396 A:middle
with an
NS-DESIGNATED-INITIALIZER

00:37:48.396 --> 00:37:49.506 A:middle
annotation so you know

00:37:49.506 --> 00:37:52.546 A:middle
which ones are the designated
initializers, which, of course,

00:37:52.546 --> 00:37:53.566 A:middle
you need to know if you're going

00:37:53.566 --> 00:37:55.466 A:middle
to be a good subclassing
citizen.

00:37:56.476 --> 00:37:59.646 A:middle
Additionally, all
of the return types

00:37:59.646 --> 00:38:02.546 A:middle
for initializers have changed
from id to instancetype.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.646 --> 00:38:02.546 A:middle
for initializers have changed
from id to instancetype.

00:38:04.516 --> 00:38:06.586 A:middle
[ Applause ]

00:38:07.086 --> 00:38:09.556 A:middle
That will make some of
our autocomplete better.

00:38:09.556 --> 00:38:12.256 A:middle
And we've introduced
additional properties in place

00:38:12.256 --> 00:38:14.786 A:middle
of classic Cocoa
methods, in particular

00:38:14.786 --> 00:38:17.956 A:middle
like the NS object protocol
where hash used to be a method.

00:38:17.956 --> 00:38:20.916 A:middle
Hash is now a property
for NS object.

00:38:21.396 --> 00:38:24.936 A:middle
And these changes enhance
the experience for use

00:38:24.936 --> 00:38:28.056 A:middle
with the Cocoa and Cocoa Touch
APIs, both in Objective C and,

00:38:28.056 --> 00:38:30.006 A:middle
in particularly, with Swift.

00:38:31.666 --> 00:38:38.106 A:middle
So, Handoff is an opportunity
for your app to participate

00:38:38.396 --> 00:38:40.106 A:middle
in a feature that we talked

00:38:40.106 --> 00:38:43.876 A:middle
about in the keynote,
which is continuity.

00:38:44.116 --> 00:38:49.256 A:middle
Continuity is the thing that
allows users to do something

00:38:49.256 --> 00:38:54.206 A:middle
like start an email on their
phone, go to their computer,

00:38:55.076 --> 00:38:57.936 A:middle
finish that email, and it's
all seamless experience.

00:38:58.546 --> 00:39:02.106 A:middle
Well, with handoff, we're
giving you the opportunity


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:58.546 --> 00:39:02.106 A:middle
Well, with handoff, we're
giving you the opportunity

00:39:02.286 --> 00:39:05.596 A:middle
to have user activities of
your own so that they can do

00:39:05.596 --> 00:39:09.696 A:middle
that not just with mail or
with other built-in activities,

00:39:10.046 --> 00:39:12.006 A:middle
but with your activities
as well.

00:39:13.106 --> 00:39:17.776 A:middle
So handoff has a built-in
support for activities in AppKit

00:39:17.956 --> 00:39:20.896 A:middle
and UIKit, both natively
support activities

00:39:20.896 --> 00:39:26.816 A:middle
in their document
classes, and you'll be able

00:39:26.816 --> 00:39:28.176 A:middle
to use that out of the box.

00:39:28.406 --> 00:39:31.846 A:middle
To learn more about handoff,
check out the Adopting Handoff

00:39:31.846 --> 00:39:34.036 A:middle
in iOS talk tomorrow
in the Mission.

00:39:35.196 --> 00:39:39.336 A:middle
So, there's a whole lot of
stuff that has changed here.

00:39:40.646 --> 00:39:42.166 A:middle
Lots of new things.

00:39:42.166 --> 00:39:46.966 A:middle
We also have several
brand-new frameworks in iOS 8,

00:39:47.246 --> 00:39:50.376 A:middle
and I don't really have time
to talk in any kind of depth

00:39:50.376 --> 00:39:53.316 A:middle
about these things, but I
want to give you an idea,

00:39:53.316 --> 00:39:57.556 A:middle
a taste of what is out there so
you can see what other sessions

00:39:57.556 --> 00:39:58.696 A:middle
that you'd like to attend

00:39:58.736 --> 00:40:00.866 A:middle
because these frameworks
allow you to build apps


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:58.736 --> 00:40:00.866 A:middle
because these frameworks
allow you to build apps

00:40:00.896 --> 00:40:04.006 A:middle
that you simply could
not build before iOS 8.

00:40:04.336 --> 00:40:05.136 A:middle
And that's fantastic.

00:40:05.826 --> 00:40:08.246 A:middle
So, of course, first is one
that we've already touched on.

00:40:08.526 --> 00:40:12.856 A:middle
Notification Center will
support you building extensions

00:40:12.856 --> 00:40:15.296 A:middle
that add widgets to the
Notification Center on iOS.

00:40:15.346 --> 00:40:17.666 A:middle
So that's
notificationcenter.framework,

00:40:18.006 --> 00:40:20.666 A:middle
and you can learn
about that by checking

00:40:20.666 --> 00:40:23.366 A:middle
out the Building
App Extensions talk.

00:40:24.546 --> 00:40:26.646 A:middle
We also have a brand-new
Photos framework.

00:40:27.186 --> 00:40:30.136 A:middle
This will give you
complete read/write access

00:40:30.526 --> 00:40:32.176 A:middle
to the photos library.

00:40:32.726 --> 00:40:36.166 A:middle
This means you can do whatever
your application needs to do

00:40:36.346 --> 00:40:38.866 A:middle
to provide the best user
experience possible.

00:40:39.256 --> 00:40:40.536 A:middle
It can delete photos.

00:40:40.676 --> 00:40:42.096 A:middle
It can do non-destructive edits.

00:40:42.096 --> 00:40:44.196 A:middle
It can do whatever
it needs to do

00:40:44.416 --> 00:40:46.196 A:middle
so that the user
gets what they need.

00:40:47.416 --> 00:40:50.736 A:middle
While this isn't actually
in the Photos talk

00:40:51.316 --> 00:40:54.356 A:middle
or in the Photos framework, I
do want to take this opportunity

00:40:54.356 --> 00:40:57.516 A:middle
to point out that iOS 8 also
brings custom Core Image

00:40:57.586 --> 00:41:01.026 A:middle
filters, and so you'll be able
to use these on your photos


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:57.586 --> 00:41:01.026 A:middle
filters, and so you'll be able
to use these on your photos

00:41:01.256 --> 00:41:02.976 A:middle
as well as videos in iOS 8.

00:41:03.516 --> 00:41:09.546 A:middle
[ Applause ]

00:41:10.046 --> 00:41:11.596 A:middle
With brand-new framework
called CloudKit,

00:41:12.186 --> 00:41:14.766 A:middle
and this framework is
absolutely spectacular.

00:41:14.766 --> 00:41:17.536 A:middle
I really can't say enough
good things about it.

00:41:17.836 --> 00:41:20.686 A:middle
It gives you more control than
you ever had over the data

00:41:20.686 --> 00:41:22.296 A:middle
that you put in the cloud.

00:41:23.316 --> 00:41:27.306 A:middle
And what really makes this
spectacular is you can use

00:41:27.306 --> 00:41:30.636 A:middle
CloudKit to build a
client server application

00:41:30.866 --> 00:41:32.156 A:middle
without building
the server side.

00:41:32.826 --> 00:41:35.436 A:middle
You can define that
on the client side

00:41:35.436 --> 00:41:37.486 A:middle
and let Apple take
care of it for you.

00:41:38.196 --> 00:41:40.126 A:middle
So, you know, I can't even wait

00:41:40.126 --> 00:41:42.386 A:middle
to see what startups
come out of this.

00:41:42.386 --> 00:41:45.886 A:middle
This will be fantastic, and
we love CloudKit so much

00:41:46.246 --> 00:41:48.466 A:middle
that we built iCloud
Drive and Photos

00:41:48.466 --> 00:41:50.016 A:middle
in the cloud on top of it.

00:41:50.206 --> 00:41:51.726 A:middle
It's a fantastic technology,

00:41:51.726 --> 00:41:54.736 A:middle
and you'll love building
your apps on top of it.

00:41:54.976 --> 00:41:56.866 A:middle
Another new framework
is HealthKit.

00:41:57.226 --> 00:42:00.466 A:middle
HealthKit brings all of
the biometric information


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:57.226 --> 00:42:00.466 A:middle
HealthKit brings all of
the biometric information

00:42:00.466 --> 00:42:01.696 A:middle
from the various devices

00:42:01.696 --> 00:42:04.276 A:middle
that your user has
all into one place.

00:42:04.276 --> 00:42:08.696 A:middle
So this information is shared
across apps rather than siloed

00:42:08.696 --> 00:42:12.436 A:middle
into one app that has one
biometric device information

00:42:12.436 --> 00:42:15.236 A:middle
and another app that has another
biometric device information.

00:42:15.536 --> 00:42:16.346 A:middle
It's all shared.

00:42:16.406 --> 00:42:21.116 A:middle
So you can use that to
create a perfect experience

00:42:21.116 --> 00:42:23.906 A:middle
for your user based on
all of the biometric data

00:42:23.906 --> 00:42:26.386 A:middle
that is available from
all of their accessories.

00:42:27.466 --> 00:42:30.136 A:middle
Similarly, we are
introducing a HomeKit,

00:42:30.576 --> 00:42:33.186 A:middle
which does the same thing
for connected home devices.

00:42:33.456 --> 00:42:36.356 A:middle
It puts all of that
information in one place

00:42:36.696 --> 00:42:39.336 A:middle
so that you can build an
app that does everything

00:42:39.336 --> 00:42:43.316 A:middle
that a user needs for their
connected home, accessing all

00:42:43.316 --> 00:42:44.956 A:middle
of those things in one place.

00:42:44.956 --> 00:42:48.646 A:middle
We also have a new local
authentication framework.

00:42:49.806 --> 00:42:51.626 A:middle
This allows you to
leverage the power

00:42:51.626 --> 00:42:54.976 A:middle
of biometric authentication
in your own app.

00:42:55.156 --> 00:42:57.426 A:middle
And as you probably know from
having watched the keynote,

00:42:57.616 --> 00:42:58.656 A:middle
this means that you get

00:42:58.656 --> 00:43:01.356 A:middle
to use Touch ID right
inside your application.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:58.656 --> 00:43:01.356 A:middle
to use Touch ID right
inside your application.

00:43:01.666 --> 00:43:03.926 A:middle
That's great and we have a
talk that you can go check

00:43:04.446 --> 00:43:06.386 A:middle
out to learn more
about how to do that.

00:43:07.296 --> 00:43:10.226 A:middle
We're also bringing
SceneKit to iOS 8.

00:43:11.086 --> 00:43:14.506 A:middle
SceneKit is a great framework
for building 3D renderings,

00:43:14.916 --> 00:43:17.136 A:middle
and we've had it on
the Mac for a year.

00:43:17.376 --> 00:43:18.826 A:middle
We're now bringing it to iOS.

00:43:18.826 --> 00:43:21.236 A:middle
Now we have a great
cross-platform solution

00:43:21.476 --> 00:43:22.906 A:middle
for doing 3D rendering.

00:43:23.116 --> 00:43:25.406 A:middle
Those of you who have already
used SceneKit, you're going

00:43:25.406 --> 00:43:26.816 A:middle
to love this; those
of you who haven't,

00:43:27.086 --> 00:43:28.686 A:middle
you're also going to love it.

00:43:29.656 --> 00:43:32.426 A:middle
Everybody is going to love it.

00:43:32.426 --> 00:43:33.966 A:middle
So that's all the
brand new frameworks.

00:43:34.036 --> 00:43:35.586 A:middle
That's not all the
changes though.

00:43:35.586 --> 00:43:37.556 A:middle
I'll point out one
other framework

00:43:37.596 --> 00:43:40.486 A:middle
that has made some significant
changes, which is Core Location.

00:43:40.906 --> 00:43:43.516 A:middle
Core location now
makes it possible

00:43:43.756 --> 00:43:46.716 A:middle
to get the user's
location details indoors,

00:43:47.046 --> 00:43:50.496 A:middle
and by that I mean, you can
get what floor the user is on,

00:43:50.736 --> 00:43:51.976 A:middle
not just where they are.

00:43:52.516 --> 00:43:57.646 A:middle
[ Applause ]

00:43:58.146 --> 00:43:59.226 A:middle
Isn't it great to build apps

00:43:59.226 --> 00:44:00.936 A:middle
that you just have
never built before?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:59.226 --> 00:44:00.936 A:middle
that you just have
never built before?

00:44:01.426 --> 00:44:03.376 A:middle
I'm excited.

00:44:03.796 --> 00:44:05.556 A:middle
We also have new APIs
and core location

00:44:05.556 --> 00:44:08.416 A:middle
that will make it
easier to save power

00:44:08.416 --> 00:44:10.746 A:middle
when getting significant
location updates.

00:44:10.746 --> 00:44:12.306 A:middle
So that'll be better
for everyone.

00:44:12.306 --> 00:44:14.326 A:middle
I'm a big power magnet myself,

00:44:14.646 --> 00:44:17.206 A:middle
so using these will enhance
everyone's experience.

00:44:17.666 --> 00:44:20.866 A:middle
We're also changing
the user approval model

00:44:20.866 --> 00:44:24.816 A:middle
around core location so
that users can now choose

00:44:24.816 --> 00:44:28.486 A:middle
to approve your app either
all the time for location use,

00:44:28.656 --> 00:44:30.576 A:middle
or only give it,
you can just request

00:44:30.626 --> 00:44:32.386 A:middle
to be approved only
when you're in use.

00:44:32.386 --> 00:44:34.246 A:middle
So the user can rest assured

00:44:34.486 --> 00:44:37.086 A:middle
that your app is
not using location

00:44:37.236 --> 00:44:40.236 A:middle
and not draining the battery,
not stealing any secrets

00:44:40.376 --> 00:44:42.076 A:middle
when your app is not in use.

00:44:43.186 --> 00:44:44.576 A:middle
So that's a change
to core location.

00:44:45.926 --> 00:44:51.176 A:middle
So, to finish up here I
want to reiterate some ideas

00:44:51.176 --> 00:44:56.226 A:middle
about the design philosophy
because, really, iOS 8 is a mark

00:44:56.226 --> 00:45:00.116 A:middle
in the sand for how we think
about building apps in addition


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:56.226 --> 00:45:00.116 A:middle
in the sand for how we think
about building apps in addition

00:45:00.336 --> 00:45:01.726 A:middle
to all of its new API.

00:45:03.156 --> 00:45:06.836 A:middle
So, we're going to be centered
around building reusable code

00:45:06.836 --> 00:45:11.106 A:middle
that is device agnostic, that is
interface orientation agnostic,

00:45:11.476 --> 00:45:16.046 A:middle
that is adaptive, so we can use
the tools that are presented

00:45:16.126 --> 00:45:19.676 A:middle
in iOS 8 to simplify our
layout by using things

00:45:19.676 --> 00:45:21.856 A:middle
like size classes so
we're not worrying

00:45:21.856 --> 00:45:24.446 A:middle
about what the specific
size of things are.

00:45:24.696 --> 00:45:27.496 A:middle
We use a size class to make
a determination whether it's

00:45:27.496 --> 00:45:30.286 A:middle
compact or regular, and
we can test those things

00:45:30.286 --> 00:45:32.396 A:middle
out using the resizable
simulator.

00:45:33.986 --> 00:45:39.546 A:middle
We can use the iPhone and
iPad code in a unified way

00:45:39.856 --> 00:45:42.916 A:middle
so that we only have one bit of
code that does the right thing

00:45:42.916 --> 00:45:45.696 A:middle
on all devices, and we're
bringing adaptive view

00:45:45.696 --> 00:45:48.666 A:middle
controller technology to you
that will allow you to do that.

00:45:49.476 --> 00:45:52.726 A:middle
You can integrate into the
system now using app extensions

00:45:52.996 --> 00:45:56.196 A:middle
so that the user can do
more things in more places

00:45:56.196 --> 00:45:59.336 A:middle
than ever before, and your
app can be more useful

00:45:59.336 --> 00:46:00.576 A:middle
for them than it's ever done.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:59.336 --> 00:46:00.576 A:middle
for them than it's ever done.

00:46:01.236 --> 00:46:04.056 A:middle
And finally, as we just covered

00:46:04.056 --> 00:46:06.476 A:middle
since we've introduced
several brand new frameworks,

00:46:06.476 --> 00:46:08.386 A:middle
there are things that you
just could never do before

00:46:08.386 --> 00:46:09.476 A:middle
that now you can do.

00:46:09.736 --> 00:46:12.406 A:middle
You can expand your
toolset using all

00:46:12.406 --> 00:46:14.206 A:middle
of these brand-new things.

00:46:14.966 --> 00:46:18.306 A:middle
So, if you want more information
about anything in this talk,

00:46:18.946 --> 00:46:19.926 A:middle
you can always talk

00:46:19.926 --> 00:46:23.376 A:middle
to our inimitable frameworks
evangelist Jake Behrens.

00:46:23.926 --> 00:46:26.596 A:middle
Check out our documentation
on developer.apple.com,

00:46:26.596 --> 00:46:28.226 A:middle
or hit up the dev
forms where people

00:46:28.226 --> 00:46:29.626 A:middle
like me can answer
your questions.

00:46:30.286 --> 00:46:34.136 A:middle
I have a whole bunch of related
sessions that you can check out.

00:46:34.136 --> 00:46:35.276 A:middle
I'll get out of your way.

00:46:35.456 --> 00:46:38.606 A:middle
I don't want to block anyone
from writing this down.

00:46:38.606 --> 00:46:41.966 A:middle
There's actually another screen
after this for anyone who wants

00:46:41.966 --> 00:46:45.106 A:middle
to check out more
related sessions.

00:46:45.106 --> 00:46:47.006 A:middle
I don't see too many
people using pencil.

00:46:47.946 --> 00:46:49.776 A:middle
These are the additional
related sessions.

00:46:50.306 --> 00:46:54.726 A:middle
And we also have a lot of labs.

00:46:54.846 --> 00:46:57.586 A:middle
Of course, WWDC is
packed with labs all week,

00:46:58.736 --> 00:47:02.456 A:middle
more than I could ever
even bother to call out,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:58.736 --> 00:47:02.456 A:middle
more than I could ever
even bother to call out,

00:47:02.456 --> 00:47:05.656 A:middle
but Cocoa Touch Labs are-the
next three days you'll be able

00:47:05.656 --> 00:47:08.206 A:middle
to find me and a couple
dozen of my colleagues

00:47:08.256 --> 00:47:10.246 A:middle
to answer all your
questions related

00:47:10.246 --> 00:47:12.566 A:middle
to building UIKit applications.

00:47:13.046 --> 00:47:17.426 A:middle
And I really hope you're able to
get an idea of all that we have

00:47:17.426 --> 00:47:19.246 A:middle
to offer in this WWDC, and I
hope you have a fantastic week.

00:47:19.376 --> 00:47:19.926 A:middle
Thanks for coming.

00:47:20.516 --> 00:47:24.500 A:middle
[ Applause ]

