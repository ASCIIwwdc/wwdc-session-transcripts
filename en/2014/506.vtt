WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:14.076 --> 00:00:18.476 A:middle
&gt;&gt; Welcome to Session 506, "Your
App, Your Website, and Safari."

00:00:19.106 --> 00:00:21.056 A:middle
My name is Ricky Mondello,
and I'm an engineer

00:00:21.056 --> 00:00:22.586 A:middle
on the Safari and WebKit team.

00:00:23.186 --> 00:00:24.466 A:middle
So before we get started,

00:00:24.546 --> 00:00:26.446 A:middle
I'm going to ask one
obvious question.

00:00:27.106 --> 00:00:28.756 A:middle
Show of hands and then
a second question.

00:00:29.086 --> 00:00:31.846 A:middle
So first off, how many of you
have apps in the App Store?

00:00:33.236 --> 00:00:33.936 A:middle
Nearly all of you.

00:00:34.056 --> 00:00:35.206 A:middle
Great. Welcome to WWDC.

00:00:35.206 --> 00:00:36.016 A:middle
You're in the right place.

00:00:36.476 --> 00:00:40.186 A:middle
How many of those apps
have an associated website?

00:00:40.666 --> 00:00:41.476 A:middle
Another show of hands.

00:00:42.316 --> 00:00:43.386 A:middle
That's excellent.

00:00:43.386 --> 00:00:44.546 A:middle
You are all in the right place.

00:00:45.526 --> 00:00:50.126 A:middle
Awesome. So yesterday you
saw Craig demo a bunch

00:00:50.126 --> 00:00:52.416 A:middle
of cool new features
with the name Continuity.

00:00:53.046 --> 00:00:56.456 A:middle
The ability to pick up writing
an email where you left off

00:00:56.456 --> 00:00:57.576 A:middle
from one device to another.

00:00:57.996 --> 00:01:00.176 A:middle
Picking up a phone call
from one device to another.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:57.996 --> 00:01:00.176 A:middle
Picking up a phone call
from one device to another.

00:01:01.036 --> 00:01:02.516 A:middle
I've been thinking
about Continuity.

00:01:03.226 --> 00:01:05.876 A:middle
Continuity is more than
just a suite of features

00:01:05.876 --> 00:01:08.806 A:middle
that we've included in
OS X Yosemite and iOS 8.

00:01:09.826 --> 00:01:10.836 A:middle
Just a regular old word.

00:01:11.706 --> 00:01:12.716 A:middle
Looked it up in the dictionary.

00:01:12.776 --> 00:01:16.866 A:middle
It's the unbroken and consistent
experience or operation

00:01:16.866 --> 00:01:20.256 A:middle
of something over
a period of time.

00:01:20.456 --> 00:01:24.396 A:middle
I take comfort in this
definition because unbrokenness

00:01:24.826 --> 00:01:27.346 A:middle
and consistency are
exactly what all

00:01:27.346 --> 00:01:28.846 A:middle
of us users are looking
for today.

00:01:29.806 --> 00:01:31.956 A:middle
Many of us own more
than one device.

00:01:32.556 --> 00:01:34.416 A:middle
We move between those
devices throughout our day.

00:01:35.156 --> 00:01:38.336 A:middle
Something that's not uncommon
is starting a task within an app

00:01:38.336 --> 00:01:41.586 A:middle
on your iPhone and finishing it
up later on the app's website

00:01:41.586 --> 00:01:43.046 A:middle
on your Mac, for instance.

00:01:43.356 --> 00:01:46.316 A:middle
And this year, we've
got a cool technologies

00:01:46.316 --> 00:01:48.066 A:middle
that you can participate
in Continuity.

00:01:48.846 --> 00:01:51.506 A:middle
Handoff. That's exactly
what Craig used to move

00:01:51.506 --> 00:01:53.116 A:middle
from sending an email
on one device

00:01:53.706 --> 00:01:54.716 A:middle
to typing it up on the other.

00:01:55.846 --> 00:01:57.816 A:middle
We've got a full session
on Handoff this year.

00:01:58.296 --> 00:02:01.366 A:middle
It's tomorrow at 2 p.m. So
if you're here, you're going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.296 --> 00:02:01.366 A:middle
It's tomorrow at 2 p.m. So
if you're here, you're going

00:02:01.366 --> 00:02:02.536 A:middle
to be interested
in that as well.

00:02:04.096 --> 00:02:07.956 A:middle
But even before Handoff,
users are making these kinds

00:02:07.956 --> 00:02:11.206 A:middle
of transitions between
apps, websites

00:02:11.806 --> 00:02:14.056 A:middle
and various devices
every single day.

00:02:14.106 --> 00:02:17.006 A:middle
And in this session I'm
going to go over some

00:02:17.006 --> 00:02:19.076 A:middle
of the best opportunities
that we've identified

00:02:19.556 --> 00:02:20.356 A:middle
to make these kinds

00:02:20.356 --> 00:02:22.306 A:middle
of transitions smoother
for our users.

00:02:23.296 --> 00:02:25.936 A:middle
Ensuring Continuity for
all of our users is going

00:02:25.936 --> 00:02:28.586 A:middle
to require a holistic approach
to software development.

00:02:29.006 --> 00:02:31.686 A:middle
Bringing together three
different kinds of disciplines.

00:02:32.236 --> 00:02:35.816 A:middle
The first discipline is
that of the App developer,

00:02:36.296 --> 00:02:38.176 A:middle
whoever's writing
Cocoa, Cocoa Touch,

00:02:38.556 --> 00:02:40.526 A:middle
Objective-C and now Swift.

00:02:40.986 --> 00:02:42.446 A:middle
Probably most of you
in this audience.

00:02:43.386 --> 00:02:46.276 A:middle
But it's also going to take the
back-end website administrator.

00:02:48.046 --> 00:02:52.096 A:middle
It's also going to take the
back-end website administrator.

00:02:52.736 --> 00:02:55.646 A:middle
Whoever's running user
accounts, state, databases,

00:02:55.956 --> 00:02:57.906 A:middle
all that sort of stuff.

00:02:58.306 --> 00:03:00.046 A:middle
But finally, it's also going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.306 --> 00:03:00.046 A:middle
But finally, it's also going

00:03:00.046 --> 00:03:02.406 A:middle
to take the front
end web developer.

00:03:02.866 --> 00:03:04.946 A:middle
Whoever is writing
JavaScript, HTML,

00:03:04.946 --> 00:03:08.146 A:middle
CSS or whatever cool new
fancy languages preprocessing

00:03:08.146 --> 00:03:09.056 A:middle
down to those these days.

00:03:10.666 --> 00:03:13.026 A:middle
So if you're here, you
probably specialize

00:03:13.026 --> 00:03:13.996 A:middle
in one of these areas.

00:03:14.566 --> 00:03:15.676 A:middle
You might know about
two of them.

00:03:16.156 --> 00:03:17.226 A:middle
You might just be
getting started.

00:03:18.056 --> 00:03:20.526 A:middle
Or if you work in a one-person
shop, you might be responsible

00:03:20.526 --> 00:03:23.186 A:middle
for all three of these aspects
of your application or service.

00:03:24.016 --> 00:03:26.696 A:middle
Regardless, no matter
which bucket you fall into,

00:03:27.096 --> 00:03:28.356 A:middle
you're going to leave
this session today

00:03:28.356 --> 00:03:30.676 A:middle
with actionable techniques
you can put into place

00:03:31.006 --> 00:03:32.766 A:middle
to make your users'
experiences better.

00:03:34.076 --> 00:03:36.266 A:middle
Specifically what
we're going to go

00:03:36.266 --> 00:03:41.896 A:middle
into today is giving your native
iOS app access to credentials

00:03:41.896 --> 00:03:44.406 A:middle
that Safari has stored
for your website

00:03:44.746 --> 00:03:47.616 A:middle
to make your users' login
experiences easier than ever.

00:03:48.696 --> 00:03:51.066 A:middle
Then we're going to learn about
AutoFill and how that works

00:03:51.066 --> 00:03:53.466 A:middle
on the web and ways to
make that better as well.

00:03:54.026 --> 00:03:56.796 A:middle
Then we're going to look at ways

00:03:56.796 --> 00:03:58.626 A:middle
that Safari promotes
your website

00:03:58.626 --> 00:04:00.076 A:middle
and your website's content.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.626 --> 00:04:00.076 A:middle
and your website's content.

00:04:01.186 --> 00:04:02.686 A:middle
Learn how to make
that even better.

00:04:03.606 --> 00:04:05.556 A:middle
And finally we're going
to look at your website

00:04:05.556 --> 00:04:07.736 A:middle
and how we can make
your website consistent

00:04:07.736 --> 00:04:10.486 A:middle
across devices whether the
user's viewing it on an iPhone

00:04:10.986 --> 00:04:12.966 A:middle
or on a Mac with a
27-inch cinema display.

00:04:14.356 --> 00:04:15.206 A:middle
That sounds good to you?

00:04:15.756 --> 00:04:16.435 A:middle
Let's get started.

00:04:18.476 --> 00:04:21.036 A:middle
First thing I want to talk
to you about is credentials.

00:04:22.286 --> 00:04:23.986 A:middle
If your app or service
has accounts,

00:04:24.966 --> 00:04:27.416 A:middle
you're defining the credentials
these days for your users

00:04:27.416 --> 00:04:29.856 A:middle
to prove that they are
who they say they are.

00:04:30.886 --> 00:04:32.566 A:middle
Today most credentials
are in the form

00:04:32.566 --> 00:04:34.636 A:middle
of user names, passwords.

00:04:35.576 --> 00:04:36.406 A:middle
And as a matter of fact,

00:04:36.836 --> 00:04:38.206 A:middle
my colleague Andrew
has been working

00:04:38.206 --> 00:04:39.806 A:middle
on a cool new application
on the side.

00:04:40.316 --> 00:04:43.156 A:middle
It's called "Shiny," and this
application has accounts.

00:04:43.816 --> 00:04:47.156 A:middle
What it does is, every single
day that you log into "Shiny,"

00:04:47.246 --> 00:04:50.156 A:middle
it's going to show you a
picture of a shiny object,

00:04:50.726 --> 00:04:51.796 A:middle
but only if you're logged in.

00:04:51.796 --> 00:04:52.886 A:middle
That's very important to him.

00:04:53.016 --> 00:04:57.006 A:middle
Don't understand it but
it's going to be okay.

00:04:57.006 --> 00:04:59.656 A:middle
Something that I realized while
I was beta testing Andrew's app


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:00.466 --> 00:05:03.376 A:middle
is that my first run
experience with the app wasn't

00:05:03.376 --> 00:05:04.456 A:middle
as good as I wanted it to be.

00:05:05.266 --> 00:05:08.226 A:middle
I started my relationship with
"Shiny" by creating an account

00:05:08.266 --> 00:05:11.376 A:middle
on the "Shiny" website, and
then later I went to the app

00:05:11.376 --> 00:05:13.716 A:middle
for the first time and
I got this login screen,

00:05:13.866 --> 00:05:15.996 A:middle
and I couldn't do anything until
I got past the login screen.

00:05:17.126 --> 00:05:20.646 A:middle
When I run into a situation like
this, I might go ahead and look

00:05:20.646 --> 00:05:23.986 A:middle
up my password in
settings on iOS, or,

00:05:24.106 --> 00:05:25.626 A:middle
if I'm feeling a little
lazy at the moment,

00:05:26.316 --> 00:05:28.186 A:middle
I just might switch back
to using the website

00:05:28.506 --> 00:05:29.736 A:middle
or leave the app altogether.

00:05:30.736 --> 00:05:32.096 A:middle
We don't want people
to leave your apps.

00:05:32.096 --> 00:05:34.006 A:middle
We want engaged, happy users.

00:05:34.466 --> 00:05:36.956 A:middle
So today I'm very happy
to say that we're going

00:05:36.956 --> 00:05:40.366 A:middle
to solve this problem by giving
your application access to some

00:05:40.366 --> 00:05:43.026 A:middle
of the data that Safari has
stored for your website,

00:05:43.536 --> 00:05:46.096 A:middle
the user names and passwords
that are saved for your website.

00:05:46.926 --> 00:05:48.766 A:middle
Safari's technology
for saving user names

00:05:48.766 --> 00:05:50.466 A:middle
and passwords is
called AutoFill.

00:05:50.466 --> 00:05:52.096 A:middle
And I'd like to give
you a little background

00:05:52.096 --> 00:05:54.086 A:middle
on that right now.

00:05:54.256 --> 00:05:55.626 A:middle
First thing that
AutoFill does is

00:05:55.896 --> 00:05:57.096 A:middle
that it fills out forms for you.

00:05:57.746 --> 00:05:59.336 A:middle
Kind of like the forms
that you see when checking

00:05:59.336 --> 00:06:01.766 A:middle
out of the online shopping
site with information


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.336 --> 00:06:01.766 A:middle
out of the online shopping
site with information

00:06:01.766 --> 00:06:04.376 A:middle
from your contacts card.

00:06:04.546 --> 00:06:07.926 A:middle
AutoFill also saves and fills
user names and passwords

00:06:08.236 --> 00:06:10.576 A:middle
to make logging into
your websites a breeze.

00:06:12.156 --> 00:06:15.276 A:middle
And finally, AutoFill
generates passwords for users.

00:06:16.276 --> 00:06:18.206 A:middle
Given the state of website
security these days,

00:06:18.666 --> 00:06:21.016 A:middle
with major websites being
compromised what seems

00:06:21.016 --> 00:06:23.716 A:middle
like every other week,
it's a really good idea

00:06:23.716 --> 00:06:25.866 A:middle
to use a random password
that doesn't overlap

00:06:25.866 --> 00:06:27.936 A:middle
with passwords you're
using on other websites.

00:06:28.486 --> 00:06:32.306 A:middle
And finally with
iCloud Keychain,

00:06:32.616 --> 00:06:35.356 A:middle
AutoFill syncs your passwords
across all of your devices

00:06:35.356 --> 00:06:37.586 A:middle
so that it's a breeze
to log in no matter

00:06:37.586 --> 00:06:38.406 A:middle
which device you're on.

00:06:40.026 --> 00:06:42.446 A:middle
I really love it when my
credentials are syncing

00:06:42.446 --> 00:06:43.356 A:middle
across my devices.

00:06:44.196 --> 00:06:45.896 A:middle
When those credentials
are randomly generated,

00:06:46.286 --> 00:06:49.736 A:middle
I am in a sweet spot of both
security and convenience.

00:06:50.606 --> 00:06:52.536 A:middle
But I've already
mentioned one place

00:06:52.826 --> 00:06:53.916 A:middle
that the system breaks down.

00:06:54.356 --> 00:06:56.956 A:middle
And that's when your
application enters the picture.

00:06:57.956 --> 00:07:01.206 A:middle
When a user hits an apps login
screen anything can happen.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.956 --> 00:07:01.206 A:middle
When a user hits an apps login
screen anything can happen.

00:07:02.026 --> 00:07:03.396 A:middle
They might look up
their password.

00:07:03.526 --> 00:07:04.346 A:middle
They might already know it.

00:07:05.096 --> 00:07:07.016 A:middle
They might decide
to leave your app.

00:07:07.016 --> 00:07:09.426 A:middle
So what we want to do today
is take this failure point

00:07:10.306 --> 00:07:11.666 A:middle
and turn it into
something awesome,

00:07:12.226 --> 00:07:14.646 A:middle
letting your applications
leverage the security

00:07:14.816 --> 00:07:18.366 A:middle
and convenience of iCloud
Keychain and Safari AutoFill.

00:07:19.746 --> 00:07:21.656 A:middle
For your users, it's
going to mean going

00:07:21.656 --> 00:07:24.336 A:middle
from seeing an application login
screen that looks like this

00:07:25.416 --> 00:07:28.486 A:middle
to seeing a simple picker
where they can securely

00:07:28.556 --> 00:07:31.366 A:middle
and easily hand credentials
back to your application

00:07:31.586 --> 00:07:33.156 A:middle
that you can use to
attempt the login.

00:07:33.736 --> 00:07:34.696 A:middle
No typing required.

00:07:35.356 --> 00:07:37.986 A:middle
To get into the details
of how this works,

00:07:38.276 --> 00:07:40.826 A:middle
I'm excited to invite my
colleague Andrew Whalley

00:07:40.826 --> 00:07:41.426 A:middle
to the stage.

00:07:41.886 --> 00:07:42.226 A:middle
Andrew.

00:07:43.516 --> 00:07:48.546 A:middle
[ Applause ]

00:07:49.046 --> 00:07:49.536 A:middle
&gt;&gt; Andrew: Thank you, Ricky.

00:07:49.536 --> 00:07:54.236 A:middle
Yes. I'm Andrew Whalley from
Core OS Security Engineering,

00:07:54.676 --> 00:07:57.376 A:middle
and maybe predictably
for a security engineer,

00:07:57.406 --> 00:08:00.286 A:middle
I'm going to start off by
talking about password security.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:57.406 --> 00:08:00.286 A:middle
I'm going to start off by
talking about password security.

00:08:01.566 --> 00:08:04.786 A:middle
Passwords are some of the most
sensitive and important data

00:08:04.846 --> 00:08:06.656 A:middle
that we have on any
of our devices.

00:08:07.316 --> 00:08:10.786 A:middle
Passwords to banking websites
have access to all our money,

00:08:10.946 --> 00:08:13.846 A:middle
and passwords to even
something like social media -

00:08:13.846 --> 00:08:17.016 A:middle
well that's really our
entire online reputation.

00:08:17.616 --> 00:08:21.126 A:middle
So we've really got
to protect them.

00:08:21.896 --> 00:08:26.356 A:middle
As we visit websites in Safari
and let Safari save user names

00:08:26.356 --> 00:08:28.826 A:middle
and passwords for us,
it's keeping track

00:08:28.826 --> 00:08:31.546 A:middle
of which websites they
came from to make sure

00:08:31.546 --> 00:08:34.606 A:middle
that they are only ever filled
back to the exact same website.

00:08:35.856 --> 00:08:37.785 A:middle
This security and
actually privacy

00:08:37.785 --> 00:08:41.606 A:middle
as well guarantee is
provided by Safari itself

00:08:42.046 --> 00:08:44.806 A:middle
since it has all the
necessary information

00:08:44.836 --> 00:08:47.906 A:middle
about which credentials
went with which website.

00:08:48.696 --> 00:08:50.356 A:middle
And I'm using credentials here

00:08:50.356 --> 00:08:54.236 A:middle
to mean a user name
and password pair.

00:08:54.806 --> 00:08:57.276 A:middle
I'm sure like me
you have hundreds

00:08:57.496 --> 00:09:00.636 A:middle
of native iOS applications
installed.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:57.496 --> 00:09:00.636 A:middle
of native iOS applications
installed.

00:09:01.956 --> 00:09:05.036 A:middle
And these are all run
and managed by iOS.

00:09:05.866 --> 00:09:10.026 A:middle
So what we need to do is
provide a way to let iOS know

00:09:10.326 --> 00:09:12.866 A:middle
that a particular
app is associated

00:09:13.136 --> 00:09:17.106 A:middle
with a particular website
and to do so in a secure way.

00:09:17.106 --> 00:09:21.666 A:middle
So I'm going to be
talking about a way

00:09:21.666 --> 00:09:24.116 A:middle
to associate your
app and your website.

00:09:24.236 --> 00:09:25.796 A:middle
And it's really quite easy.

00:09:26.626 --> 00:09:29.406 A:middle
It involves adding one
file to your website

00:09:30.086 --> 00:09:33.666 A:middle
and one new entitlement
to your app.

00:09:34.136 --> 00:09:36.556 A:middle
Once you've done that,
then you've got access

00:09:36.556 --> 00:09:40.286 A:middle
to a few simple APIs,
which allows you to see

00:09:40.326 --> 00:09:43.576 A:middle
if your user has anything
saved in Safari, and if so,

00:09:43.576 --> 00:09:45.286 A:middle
gets the user name and password.

00:09:46.596 --> 00:09:50.646 A:middle
And to let Safari know if a
user has created an account

00:09:50.946 --> 00:09:53.296 A:middle
or changed their password
within your application.

00:09:57.246 --> 00:10:00.546 A:middle
So really what we're doing
is trying to make sure


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:57.246 --> 00:10:00.546 A:middle
So really what we're doing
is trying to make sure

00:10:00.626 --> 00:10:04.506 A:middle
that the website
developer and the owner

00:10:04.506 --> 00:10:06.456 A:middle
of the website are really OK

00:10:06.706 --> 00:10:09.496 A:middle
with their two entities
sharing information.

00:10:10.896 --> 00:10:13.186 A:middle
Luckily we can use
cryptography for this subject.

00:10:13.186 --> 00:10:14.796 A:middle
My favorite, favorite subject.

00:10:15.266 --> 00:10:20.486 A:middle
Every iOS developer has a
key and a certificate issued

00:10:20.706 --> 00:10:23.636 A:middle
through the developer portal
or now automatically by Xcode.

00:10:24.276 --> 00:10:28.726 A:middle
Every website has or
really should have a key

00:10:28.726 --> 00:10:32.326 A:middle
and certificate issued
by a CA which they use

00:10:32.326 --> 00:10:35.406 A:middle
to secure HTTPS TLS websites.

00:10:36.166 --> 00:10:42.416 A:middle
First we're going to look
at the app side of things.

00:10:42.856 --> 00:10:47.076 A:middle
So in the same way that Safari
is maintaining internally a

00:10:47.076 --> 00:10:50.506 A:middle
mapping between a credential
and which website it came from,

00:10:51.216 --> 00:10:55.026 A:middle
you can imagine iOS having
a similar table linking apps

00:10:55.186 --> 00:10:57.616 A:middle
and websites and whether
they have been approved

00:10:57.786 --> 00:11:00.126 A:middle
to share information
between them.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:57.786 --> 00:11:00.126 A:middle
to share information
between them.

00:11:00.446 --> 00:11:02.476 A:middle
You can see here that
two have been mapped

00:11:02.476 --> 00:11:04.766 A:middle
as approved, and one is pending.

00:11:05.026 --> 00:11:06.846 A:middle
So let's look and see
what it takes to go

00:11:06.846 --> 00:11:09.046 A:middle
from pending to approved.

00:11:09.976 --> 00:11:14.166 A:middle
Whenever your app is
installed, it gives iOS a list

00:11:14.166 --> 00:11:17.076 A:middle
of all the domains it
wishes to share with.

00:11:17.366 --> 00:11:21.556 A:middle
iOS then appends
apple-app-site-association

00:11:21.556 --> 00:11:26.156 A:middle
to the end to form a URL and
request it from the server.

00:11:27.076 --> 00:11:29.036 A:middle
The server then responds

00:11:29.316 --> 00:11:31.866 A:middle
with a signed file listing
all the applications

00:11:31.866 --> 00:11:33.146 A:middle
that it wants to share with.

00:11:33.946 --> 00:11:36.606 A:middle
iOS then verifies that signature

00:11:36.686 --> 00:11:38.756 A:middle
and check the two
app names match.

00:11:39.166 --> 00:11:43.106 A:middle
Once that's occurred,
we know the app name

00:11:43.626 --> 00:11:47.756 A:middle
and the website name and we
can go complete our table

00:11:47.756 --> 00:11:49.036 A:middle
and marked it as approved.

00:11:49.436 --> 00:11:52.246 A:middle
So that's the flow.

00:11:52.566 --> 00:11:55.156 A:middle
Let's go into a little
more detail.

00:11:55.496 --> 00:11:58.066 A:middle
I mention that apps
include a list of domains.

00:11:58.396 --> 00:12:01.106 A:middle
They're included in
the app's entitlements.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.396 --> 00:12:01.106 A:middle
They're included in
the app's entitlements.

00:12:01.726 --> 00:12:07.886 A:middle
An entitlement is a signed
key value that's included

00:12:07.886 --> 00:12:08.826 A:middle
with every application.

00:12:09.886 --> 00:12:14.956 A:middle
It's signed so iOS knows the
developer really intended

00:12:15.416 --> 00:12:16.796 A:middle
to include that information.

00:12:17.416 --> 00:12:20.606 A:middle
Anything that's added or
removed breaks the signature,

00:12:20.976 --> 00:12:24.356 A:middle
and code signing
won't let it run.

00:12:24.756 --> 00:12:25.956 A:middle
Whether you know it or not,

00:12:26.146 --> 00:12:29.426 A:middle
your application already
includes the entitlement

00:12:29.586 --> 00:12:31.046 A:middle
application-identifier.

00:12:31.446 --> 00:12:33.206 A:middle
It's added automatically
by Xcode.

00:12:33.746 --> 00:12:39.396 A:middle
And its value is in the form
of teamid.bundle-identifier,

00:12:39.396 --> 00:12:41.316 A:middle
and it looks something
like this.

00:12:42.426 --> 00:12:48.746 A:middle
Of the two parts, the team ID
is a unique ten character string

00:12:48.746 --> 00:12:51.406 A:middle
that's issued to every
developer, and you can look it

00:12:51.406 --> 00:12:53.176 A:middle
up on the developer portal.

00:12:53.986 --> 00:12:57.646 A:middle
The bundle-identifier part
you actually specify yourself

00:12:57.646 --> 00:13:02.516 A:middle
from within Xcode in the
general identity section.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:57.646 --> 00:13:02.516 A:middle
from within Xcode in the
general identity section.

00:13:02.936 --> 00:13:04.626 A:middle
Together the team ID

00:13:04.806 --> 00:13:08.876 A:middle
and bundle-identifier create an
application-identifier that's

00:13:08.876 --> 00:13:11.616 A:middle
unique for everything
single iOS app out there,

00:13:12.136 --> 00:13:16.116 A:middle
so we can specify we
really want that one.

00:13:16.426 --> 00:13:19.796 A:middle
Today in iOS 8, we're
announcing the new

00:13:19.796 --> 00:13:21.706 A:middle
associated-domains entitlement.

00:13:22.836 --> 00:13:28.606 A:middle
Its value has the form of
service:fully.qualified.

00:13:28.606 --> 00:13:30.586 A:middle
domain.name and optionally
a port.

00:13:31.116 --> 00:13:33.106 A:middle
It will look something like this

00:13:33.256 --> 00:13:37.116 A:middle
because for this feature we want
the service of web credentials.

00:13:39.856 --> 00:13:43.036 A:middle
It's easy to add values
to this entitlement.

00:13:43.216 --> 00:13:46.406 A:middle
There's a new section
under the Capabilities tab

00:13:46.406 --> 00:13:48.766 A:middle
of Xcode associated domains.

00:13:49.346 --> 00:13:54.086 A:middle
And actually that's all you
need to set up that association

00:13:54.446 --> 00:13:55.666 A:middle
on the app side of things.

00:13:56.116 --> 00:13:58.206 A:middle
Let's look at what's
needed service side.

00:13:58.796 --> 00:14:02.206 A:middle
As I mentioned, iOS is going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.796 --> 00:14:02.206 A:middle
As I mentioned, iOS is going

00:14:02.296 --> 00:14:05.526 A:middle
to be requesting the
apple-app-site-association file.

00:14:06.046 --> 00:14:08.116 A:middle
But if we just get
that far what's in it?

00:14:08.536 --> 00:14:10.426 A:middle
Well, it's just a
big binary blob,

00:14:10.546 --> 00:14:12.746 A:middle
but inside is a very
simple bit of JSON.

00:14:14.116 --> 00:14:17.146 A:middle
There's a dictionary
which contains a list

00:14:17.146 --> 00:14:18.506 A:middle
of application-identifiers.

00:14:20.096 --> 00:14:23.096 A:middle
In the same way you could
list multiple domains

00:14:23.096 --> 00:14:26.306 A:middle
in your entitlement,
you can list multiple

00:14:26.306 --> 00:14:29.336 A:middle
application-identifiers
in this file,

00:14:29.746 --> 00:14:32.426 A:middle
which allows a really flexible
many-to-many relationship.

00:14:34.576 --> 00:14:38.366 A:middle
The content type returned
by the web server needs

00:14:38.366 --> 00:14:42.676 A:middle
to be application/pkcs7-mime,
which means it's been signed.

00:14:43.556 --> 00:14:46.256 A:middle
The signature is
provided by CMS,

00:14:46.686 --> 00:14:48.546 A:middle
that's the Cryptographic
Message Syntax,

00:14:48.846 --> 00:14:50.966 A:middle
which is the same
format used by S/MIME.

00:14:51.486 --> 00:14:55.956 A:middle
Let's do a quick look at what
it takes to sign the file.

00:14:57.296 --> 00:14:59.196 A:middle
So here's the JSON
you saw a moment ago

00:14:59.196 --> 00:15:00.696 A:middle
but with all the
white space removed,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.196 --> 00:15:00.696 A:middle
but with all the
white space removed,

00:15:00.866 --> 00:15:05.386 A:middle
and I'm saving it
off into json.txt.

00:15:05.896 --> 00:15:11.796 A:middle
Next I'm providing it to open
SSL's S/MIME command and feeding

00:15:11.796 --> 00:15:15.836 A:middle
in the certificate and key
provided by the CA for our site.

00:15:17.016 --> 00:15:19.816 A:middle
This is almost certainly going
to be the same that is used

00:15:19.816 --> 00:15:23.886 A:middle
by a web server, but it doesn't
have to be as long as it's valid

00:15:24.326 --> 00:15:29.696 A:middle
for the site being associated,
in this case, example.com.

00:15:29.886 --> 00:15:34.396 A:middle
The output then is the
apple-app-site-association file

00:15:34.456 --> 00:15:36.926 A:middle
you can copy straight to
your web server for hosting.

00:15:37.436 --> 00:15:42.036 A:middle
And when that's there, that's
everything you need to do.

00:15:42.226 --> 00:15:45.456 A:middle
Except iOS is going to be
making requests of the file

00:15:45.456 --> 00:15:50.036 A:middle
from the web server, and web
servers can return different

00:15:50.036 --> 00:15:52.776 A:middle
codes, so let's have a look
at some of the statuses.

00:15:53.286 --> 00:15:59.036 A:middle
If the file exists and we
get 200 okay, iOS is going

00:15:59.036 --> 00:16:02.766 A:middle
to take the file and
check the service name


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.036 --> 00:16:02.766 A:middle
to take the file and
check the service name

00:16:02.766 --> 00:16:06.326 A:middle
and application-identifier match
and the signature is valid.

00:16:06.956 --> 00:16:10.816 A:middle
And if it is, it marks that
app domain pair as approved.

00:16:11.706 --> 00:16:15.406 A:middle
If it gets 200 okay, but
there's a problem with any

00:16:15.406 --> 00:16:19.866 A:middle
of those checks, we go
and mark it as denied.

00:16:19.866 --> 00:16:25.516 A:middle
Likewise in the 300 or 400
range, like 301, 302 Redirect,

00:16:25.816 --> 00:16:29.596 A:middle
or 404 File Not Found, we're
going to go straight ahead

00:16:29.596 --> 00:16:30.776 A:middle
and mark it as denied.

00:16:32.306 --> 00:16:36.926 A:middle
Anything in the 500 range,
like 500 Internal Server Error,

00:16:37.476 --> 00:16:39.716 A:middle
we're going to just assume
there's a temporary glitch

00:16:39.716 --> 00:16:41.516 A:middle
with the web server and retry.

00:16:42.766 --> 00:16:45.866 A:middle
It's worth noting
that this association

00:16:45.866 --> 00:16:49.996 A:middle
and approval state is removed
any time the application is

00:16:49.996 --> 00:16:53.356 A:middle
uninstalled by the user,
which is really useful

00:16:53.356 --> 00:16:55.696 A:middle
if you're developing and
testing and need to go

00:16:55.696 --> 00:17:00.076 A:middle
through this a few
times to get it right.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:55.696 --> 00:17:00.076 A:middle
through this a few
times to get it right.

00:17:00.436 --> 00:17:03.226 A:middle
So now we've set up
that trust relationship

00:17:03.316 --> 00:17:04.996 A:middle
between our app and our website.

00:17:05.695 --> 00:17:08.185 A:middle
Let's see how we can
integrate prompting

00:17:08.326 --> 00:17:12.326 A:middle
for Safari's saved passwords
into our app's application flow.

00:17:15.616 --> 00:17:17.965 A:middle
Here we are on our home screen.

00:17:18.356 --> 00:17:21.276 A:middle
The "Shiny" app just installed
and waiting to be launched.

00:17:22.445 --> 00:17:24.886 A:middle
Once launched, it's going
to go through this flow.

00:17:25.726 --> 00:17:30.776 A:middle
Because we need a user
name and password to log

00:17:30.776 --> 00:17:32.146 A:middle
on to our back-end
server right away,

00:17:33.316 --> 00:17:35.536 A:middle
the first thing it
does is check to see

00:17:35.536 --> 00:17:36.906 A:middle
if we already have any saved.

00:17:37.716 --> 00:17:40.146 A:middle
They could be saved in the
Keychain as a user name

00:17:40.146 --> 00:17:43.446 A:middle
and password, could be
an auth token or a cookie

00:17:43.546 --> 00:17:44.846 A:middle
that we can use to log in.

00:17:45.796 --> 00:17:48.086 A:middle
Because we've just installed
it there's nothing there,

00:17:48.086 --> 00:17:49.526 A:middle
so we're just going to
have to prompt the user.

00:17:50.686 --> 00:17:53.876 A:middle
Once the user has entered their
credentials, then we're going

00:17:53.876 --> 00:17:57.646 A:middle
to save them for accessing them
next time and then we can log in

00:17:57.706 --> 00:18:01.096 A:middle
and see a wonderful "Shiny"
teapot - tea also another one


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:57.706 --> 00:18:01.096 A:middle
and see a wonderful "Shiny"
teapot - tea also another one

00:18:01.096 --> 00:18:02.056 A:middle
of my favorite things.

00:18:02.316 --> 00:18:06.866 A:middle
So next time we come back
and launch the application,

00:18:07.096 --> 00:18:10.316 A:middle
our check for saved credentials
is going to be successful

00:18:10.426 --> 00:18:12.446 A:middle
and we can log straight in.

00:18:13.946 --> 00:18:18.376 A:middle
Now let's go back to see what
the first user experience flow

00:18:18.376 --> 00:18:21.816 A:middle
is like when we can check the
saved credentials in Safari.

00:18:22.776 --> 00:18:24.556 A:middle
We're just inserting
another step.

00:18:25.336 --> 00:18:28.356 A:middle
Again the app is going to check
if it's saved anything itself,

00:18:28.356 --> 00:18:31.956 A:middle
but if there isn't any, we're
going to be prompted to see

00:18:32.246 --> 00:18:34.406 A:middle
if they have saved
anything in Safari.

00:18:34.936 --> 00:18:40.436 A:middle
If they select their credential
or they select an account,

00:18:40.936 --> 00:18:42.986 A:middle
the user name and password
is going to be returned

00:18:42.986 --> 00:18:45.256 A:middle
to your application which
can then exchange it

00:18:45.256 --> 00:18:46.716 A:middle
for an auth token
and also save it

00:18:46.716 --> 00:18:48.526 A:middle
in the Keychain whatever's
required

00:18:48.526 --> 00:18:50.086 A:middle
by your back-end
server to authenticate.

00:18:50.546 --> 00:18:52.316 A:middle
And then you can
log straight in.

00:18:53.196 --> 00:18:57.276 A:middle
It might be worth noting that
you still need the user name

00:18:57.276 --> 00:18:59.196 A:middle
and password view as a fallback

00:18:59.466 --> 00:19:02.376 A:middle
in case the user hasn't
saved anything with Safari


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.466 --> 00:19:02.376 A:middle
in case the user hasn't
saved anything with Safari

00:19:02.436 --> 00:19:03.726 A:middle
or declined to select one.

00:19:03.816 --> 00:19:05.786 A:middle
So that's the flow.

00:19:05.936 --> 00:19:09.506 A:middle
Now let's look at the APIs that
you can use to implement this.

00:19:09.766 --> 00:19:11.346 A:middle
We're introducing three today.

00:19:12.186 --> 00:19:17.236 A:middle
SecRequestSharedWebCredential,
SecAddSharedWebCredential

00:19:17.296 --> 00:19:20.376 A:middle
and SetCreateSharedWeb
CredentialPassword.

00:19:20.596 --> 00:19:25.926 A:middle
The first is what causes the
account picker be displayed.

00:19:26.356 --> 00:19:29.806 A:middle
It has three arguments
and a completion block.

00:19:30.156 --> 00:19:34.126 A:middle
The first allows you
to specify domain name,

00:19:35.016 --> 00:19:37.876 A:middle
the second a user name, if
you already know it somehow,

00:19:37.956 --> 00:19:41.206 A:middle
and then a completion
block, which will be run

00:19:41.206 --> 00:19:45.256 A:middle
after the user has
selected an item,

00:19:45.466 --> 00:19:48.386 A:middle
or it has not been
displayed for some reason.

00:19:49.746 --> 00:19:53.126 A:middle
Now you've already
listed all those domains

00:19:53.126 --> 00:19:56.716 A:middle
in your entitlements and you
have usually no idea what your

00:19:56.716 --> 00:19:58.836 A:middle
user names your users have.

00:19:59.066 --> 00:20:01.686 A:middle
So what you can do
is pass NULL for both


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.066 --> 00:20:01.686 A:middle
So what you can do
is pass NULL for both

00:20:01.686 --> 00:20:03.486 A:middle
of those first two fields.

00:20:04.496 --> 00:20:07.976 A:middle
Passing NULL for the domain just
uses the entitlement values.

00:20:08.516 --> 00:20:11.896 A:middle
And passing NULL for the
user name will get anything

00:20:11.896 --> 00:20:17.106 A:middle
that can be found for any of
the domains in the entitlement.

00:20:17.106 --> 00:20:20.956 A:middle
So whenever that code is
executed, we get the picker,

00:20:21.616 --> 00:20:25.596 A:middle
user selects a credential,
and the completion block runs.

00:20:26.376 --> 00:20:30.796 A:middle
Into it is passed a data
structure credential

00:20:30.856 --> 00:20:34.046 A:middle
which contains the user name
and password and maybe an error

00:20:34.146 --> 00:20:35.366 A:middle
if anything's gone wrong.

00:20:35.856 --> 00:20:38.896 A:middle
So let's look at some of the
code you might want to include

00:20:39.106 --> 00:20:40.246 A:middle
in such a completion block.

00:20:40.616 --> 00:20:42.396 A:middle
And it's again pretty
straightforward.

00:20:42.826 --> 00:20:45.206 A:middle
We're just checking
that there was no error,

00:20:45.206 --> 00:20:47.076 A:middle
and a credential was returned.

00:20:48.536 --> 00:20:51.816 A:middle
We extract the user name and
password from the data structure

00:20:51.816 --> 00:20:56.376 A:middle
and pass it off to the method
that our application already had

00:20:56.686 --> 00:20:57.496 A:middle
to log in to the server.

00:20:57.496 --> 00:21:00.466 A:middle
Because this is running in
the block, I'm going to run


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.496 --> 00:21:00.466 A:middle
Because this is running in
the block, I'm going to run

00:21:00.466 --> 00:21:04.546 A:middle
that on the main queue just in
case it needs to deal with UI.

00:21:04.676 --> 00:21:07.856 A:middle
Our error condition
down here will run

00:21:07.856 --> 00:21:09.486 A:middle
if the user didn't
select the password

00:21:09.486 --> 00:21:10.526 A:middle
or there's just none there.

00:21:11.216 --> 00:21:14.836 A:middle
And we're going to show the
login UI, which is our fallback,

00:21:14.836 --> 00:21:16.836 A:middle
and again dispatch
that to the main queue.

00:21:18.096 --> 00:21:20.216 A:middle
And that's really all there is.

00:21:20.216 --> 00:21:23.066 A:middle
However your application
might allow a user

00:21:23.066 --> 00:21:27.416 A:middle
to create an account from
within the native application,

00:21:27.416 --> 00:21:30.736 A:middle
and in this case, we need
SecAddSharedWebCredential.

00:21:32.176 --> 00:21:35.116 A:middle
This time you must
specify a domain name

00:21:35.116 --> 00:21:37.796 A:middle
and a user name and
the password.

00:21:38.296 --> 00:21:42.386 A:middle
There's a completion
block, but an error

00:21:42.386 --> 00:21:44.776 A:middle
in this case usually means
there's something amiss

00:21:45.026 --> 00:21:47.516 A:middle
with your app site linking
and the approval process,

00:21:47.566 --> 00:21:49.346 A:middle
so it's more useful
during development.

00:21:50.326 --> 00:21:53.196 A:middle
If there are no existing
accounts in Safari

00:21:53.196 --> 00:21:55.946 A:middle
when you call this, this
completes with no UI.

00:21:56.066 --> 00:21:56.986 A:middle
It just goes straight in.

00:21:57.346 --> 00:22:00.376 A:middle
Which makes it really easy
to include in your flow


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.346 --> 00:22:00.376 A:middle
Which makes it really easy
to include in your flow

00:22:00.876 --> 00:22:04.026 A:middle
and make sure those credentials
are just there the next time the

00:22:04.026 --> 00:22:08.166 A:middle
user goes to your website in
Safari and with iCloud Keychain

00:22:08.166 --> 00:22:09.416 A:middle
on any of their devices.

00:22:10.776 --> 00:22:14.456 A:middle
If the user can change their
password within an application,

00:22:14.456 --> 00:22:16.096 A:middle
you make exactly the same call

00:22:16.096 --> 00:22:18.506 A:middle
but just supply the
new password.

00:22:19.006 --> 00:22:22.006 A:middle
In this case with an existing
item, we're going to prompt

00:22:22.166 --> 00:22:23.876 A:middle
to make sure that's
what the user wants.

00:22:25.136 --> 00:22:27.666 A:middle
To delete an account,
you just pass NULL

00:22:27.666 --> 00:22:28.666 A:middle
as the password argument.

00:22:29.696 --> 00:22:32.986 A:middle
Again the user's
going to be prompted.

00:22:32.986 --> 00:22:34.796 A:middle
Note you should only delete this

00:22:34.866 --> 00:22:36.546 A:middle
if they really are
deleting their account.

00:22:36.546 --> 00:22:38.416 A:middle
If they're just logging
out then they're going

00:22:38.416 --> 00:22:40.626 A:middle
to need their credentials next
time they log back in again.

00:22:41.016 --> 00:22:43.206 A:middle
Or maybe you've already
determined

00:22:43.206 --> 00:22:44.986 A:middle
that those credentials are stale

00:22:44.986 --> 00:22:46.276 A:middle
and they would never
work anyway.

00:22:46.866 --> 00:22:52.116 A:middle
So the final API simply returns
a random password each time

00:22:52.116 --> 00:22:52.816 A:middle
it's called.

00:22:53.676 --> 00:22:55.776 A:middle
It's in the same
format used by Safari.

00:22:56.556 --> 00:23:00.506 A:middle
Returning for a moment
to the completion block,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:56.556 --> 00:23:00.506 A:middle
Returning for a moment
to the completion block,

00:23:01.216 --> 00:23:03.166 A:middle
there are a number of errors
that could be returned,

00:23:03.896 --> 00:23:07.486 A:middle
and we'll have a
look at them now.

00:23:07.606 --> 00:23:10.896 A:middle
The first is errSecParam error.

00:23:11.616 --> 00:23:14.146 A:middle
And a description of
"No domain provided."

00:23:14.956 --> 00:23:18.686 A:middle
And what tends to be happening
here is you're passing NULL

00:23:18.686 --> 00:23:21.106 A:middle
as your domain so we're going
to look at the entitlement.

00:23:21.246 --> 00:23:22.586 A:middle
But the entitlement isn't there,

00:23:22.726 --> 00:23:24.326 A:middle
so we get the "no
domain provided" error.

00:23:24.896 --> 00:23:28.586 A:middle
You can also get a
missing entitlement error,

00:23:29.036 --> 00:23:31.996 A:middle
and this means you are
specifying a domain name

00:23:32.336 --> 00:23:33.326 A:middle
but there is no entitlement.

00:23:33.706 --> 00:23:38.086 A:middle
Next you could get a
SecItemNotFound error.

00:23:38.836 --> 00:23:42.466 A:middle
And this means that there
is no proved domain,

00:23:42.966 --> 00:23:46.316 A:middle
which is the saying you get

00:23:46.816 --> 00:23:49.226 A:middle
if there just aren't any,
but you are approved.

00:23:50.676 --> 00:23:53.216 A:middle
We're returning the same error
condition for both of these

00:23:53.336 --> 00:23:54.436 A:middle
as a privacy feature,

00:23:54.886 --> 00:23:57.306 A:middle
which means that rogue
applications are never going

00:23:57.306 --> 00:23:59.756 A:middle
to get any more information
than they really deserve.

00:23:59.756 --> 00:24:04.666 A:middle
So now let's have a
quick demo of putting


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.756 --> 00:24:04.666 A:middle
So now let's have a
quick demo of putting

00:24:04.666 --> 00:24:06.106 A:middle
that all into practice.

00:24:06.616 --> 00:24:10.726 A:middle
So first of all let's go
to the "Shiny" website.

00:24:11.326 --> 00:24:13.776 A:middle
But I haven't actually
gotten an account yet,

00:24:13.776 --> 00:24:18.046 A:middle
so I'm going to sign up.

00:24:18.046 --> 00:24:21.146 A:middle
Safari is suggesting to fill
a password, so I'm going

00:24:21.146 --> 00:24:24.516 A:middle
to accept that, and oh, today
Shiny's thing is macaroons.

00:24:24.516 --> 00:24:26.016 A:middle
That's going to go
very well with the tea.

00:24:26.836 --> 00:24:30.436 A:middle
So let's go over to
iOS and have a look

00:24:30.556 --> 00:24:32.646 A:middle
at iOS native "Shiny" app.

00:24:33.246 --> 00:24:34.436 A:middle
Well, here it is.

00:24:34.606 --> 00:24:35.256 A:middle
Going to launch it.

00:24:36.046 --> 00:24:37.616 A:middle
And here we are.

00:24:37.856 --> 00:24:39.076 A:middle
User name and password.

00:24:39.276 --> 00:24:44.136 A:middle
So it was Andrew, and I actually
have no idea what it was,

00:24:44.136 --> 00:24:45.016 A:middle
it came up too quickly.

00:24:45.496 --> 00:24:46.986 A:middle
So let's go back and see

00:24:46.986 --> 00:24:49.796 A:middle
if we can change the
application to fix that.

00:24:55.046 --> 00:24:57.706 A:middle
Here we are in the Log
On View Controller.

00:24:58.126 --> 00:24:59.616 A:middle
And if you scroll down a bit,

00:24:59.616 --> 00:25:02.576 A:middle
we've got the method
loginWithCached


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.616 --> 00:25:02.576 A:middle
we've got the method
loginWithCached

00:25:02.576 --> 00:25:03.716 A:middle
CredentialsIfPossible.

00:25:05.096 --> 00:25:08.036 A:middle
It in turn is calling
loginWithLocalKeychain

00:25:08.036 --> 00:25:09.606 A:middle
CredentialsifPossible.

00:25:11.036 --> 00:25:12.686 A:middle
That takes two blocks.

00:25:13.236 --> 00:25:16.506 A:middle
The first will be passed
the user name and password

00:25:16.506 --> 00:25:17.646 A:middle
if there's one in the Keychain.

00:25:18.166 --> 00:25:20.976 A:middle
And the second is
what's run on failure.

00:25:21.096 --> 00:25:22.526 A:middle
There's no credentials saved.

00:25:23.756 --> 00:25:26.926 A:middle
So I'm going to create a new
method to parallel this one.

00:25:32.376 --> 00:25:34.466 A:middle
LoginWithSafari
CredentialsifPossible.

00:25:34.806 --> 00:25:37.346 A:middle
Again taking a success
block and a failure block.

00:25:38.066 --> 00:25:40.606 A:middle
So this code is very
similar to the one I walked

00:25:40.606 --> 00:25:41.506 A:middle
through in the slides,

00:25:41.976 --> 00:25:44.996 A:middle
but instead of calling
a method directly,

00:25:45.426 --> 00:25:48.496 A:middle
we're calling the success
block and the failure block

00:25:48.736 --> 00:25:49.536 A:middle
if there was an error

00:25:49.626 --> 00:25:51.316 A:middle
or the user declines
to select anything.

00:25:53.026 --> 00:25:58.126 A:middle
So now I'm back in the error
block, the failure block

00:25:58.346 --> 00:26:00.936 A:middle
of our previous method.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.346 --> 00:26:00.936 A:middle
of our previous method.

00:26:00.936 --> 00:26:06.016 A:middle
And instead of the back,
fallback being show log

00:26:06.016 --> 00:26:08.866 A:middle
on UI entitlements I'm
going to put a call

00:26:08.866 --> 00:26:12.876 A:middle
to our new method there.

00:26:13.226 --> 00:26:18.486 A:middle
And in this way we have
a cascade of blocks,

00:26:18.836 --> 00:26:21.076 A:middle
so if there's nothing
found in the Keychain,

00:26:21.246 --> 00:26:22.406 A:middle
it calls a failure block.

00:26:22.986 --> 00:26:25.276 A:middle
If there's no Safari
saved credentials,

00:26:25.356 --> 00:26:26.386 A:middle
it calls its failure block,

00:26:26.656 --> 00:26:30.416 A:middle
which falls back
to the login UI.

00:26:30.476 --> 00:26:33.536 A:middle
So let's give this a build
and see what happens.

00:26:34.036 --> 00:26:39.696 A:middle
So we launch it, and
yes, we get a picker.

00:26:39.786 --> 00:26:42.946 A:middle
Log in and there are
today's macaroons.

00:26:43.686 --> 00:26:48.236 A:middle
The app did provide a way
for us to change a password,

00:26:48.766 --> 00:26:50.176 A:middle
and it's already prefilled one

00:26:50.176 --> 00:26:53.566 A:middle
out from the SetCreateSharedWeb
CredentialPassword.

00:26:53.566 --> 00:26:55.446 A:middle
So I'm going to accept that.

00:26:55.476 --> 00:26:57.156 A:middle
That looks reasonably secure.

00:26:57.706 --> 00:27:00.116 A:middle
Change password, and because
I already had something


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.706 --> 00:27:00.116 A:middle
Change password, and because
I already had something

00:27:00.116 --> 00:27:01.606 A:middle
in the Keychain,
it's prompted me.

00:27:02.616 --> 00:27:03.956 A:middle
So I'm going to go
ahead and update.

00:27:04.516 --> 00:27:04.956 A:middle
There we are.

00:27:05.096 --> 00:27:06.796 A:middle
Logged straight in.

00:27:06.896 --> 00:27:12.436 A:middle
And now I'll come
back to the Mac.

00:27:13.556 --> 00:27:18.196 A:middle
All being well, yes,
there we go.

00:27:18.196 --> 00:27:21.716 A:middle
iCloud Keychain has done
its magic and the user name

00:27:21.716 --> 00:27:26.126 A:middle
and password - yes iCloud
Keychain has done its magic.

00:27:26.456 --> 00:27:28.266 A:middle
The updated password
is over there.

00:27:29.516 --> 00:27:34.176 A:middle
[ Applause ]

00:27:34.676 --> 00:27:37.986 A:middle
So, though there are
quite a few steps,

00:27:38.216 --> 00:27:41.726 A:middle
none of them are particularly
difficult and it allows - well,

00:27:41.726 --> 00:27:44.266 A:middle
it's maintaining a very,
very high level of security -

00:27:44.996 --> 00:27:48.466 A:middle
this last broken point
in the convenience

00:27:48.466 --> 00:27:50.526 A:middle
and security ecosystem
to be made complete.

00:27:53.126 --> 00:27:54.216 A:middle
Thank you all.

00:27:55.516 --> 00:27:59.556 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.056 --> 00:28:00.606 A:middle
&gt;&gt; Thanks, Andrew.

00:28:02.086 --> 00:28:04.746 A:middle
I am really excited to see
what you guys are going

00:28:04.746 --> 00:28:05.986 A:middle
to do with these APIs.

00:28:06.446 --> 00:28:08.736 A:middle
It's really a personal pet
peeve of mine to get stopped

00:28:08.736 --> 00:28:11.656 A:middle
in my tracks at a login
screen, and I'm really excited

00:28:11.656 --> 00:28:13.996 A:middle
that if I've gone to Safari,
created an account there,

00:28:14.346 --> 00:28:16.966 A:middle
to never see that again.

00:28:17.136 --> 00:28:20.736 A:middle
SecAddSharedWebCredential,
the API that Andrew told you

00:28:20.736 --> 00:28:23.626 A:middle
about that you'll use to add a
password to the user's Keychain,

00:28:24.006 --> 00:28:27.316 A:middle
update a password in the user's
Keychain or delete something?

00:28:27.766 --> 00:28:29.006 A:middle
It's really neat.

00:28:29.736 --> 00:28:32.156 A:middle
It's not neat just because of
what it's going to mean for all

00:28:32.156 --> 00:28:33.706 A:middle
of us in this room as users.

00:28:34.566 --> 00:28:36.796 A:middle
But because it perfectly
captures your

00:28:36.796 --> 00:28:38.056 A:middle
application's intent.

00:28:38.506 --> 00:28:43.356 A:middle
Your app tells iOS exactly
what it wants to happen

00:28:43.356 --> 00:28:45.796 A:middle
to a user's credentials, and
they're automatically synced

00:28:45.796 --> 00:28:48.596 A:middle
across all of the user's
devices with iCloud Keychain.

00:28:49.936 --> 00:28:53.106 A:middle
It's not as clear cut
on the web however.

00:28:54.046 --> 00:28:56.516 A:middle
Your website doesn't have
a way of saying, "Hey,

00:28:56.516 --> 00:29:00.366 A:middle
Safari I just updated Andrew's
password from Foo to Bar."


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:56.516 --> 00:29:00.366 A:middle
Safari I just updated Andrew's
password from Foo to Bar."

00:29:01.296 --> 00:29:05.136 A:middle
Instead, what Safari does is
it uses a series of heuristics

00:29:05.136 --> 00:29:07.086 A:middle
in order to figure out
what your website's doing

00:29:07.366 --> 00:29:09.686 A:middle
and then update your user's
passwords accordingly.

00:29:10.456 --> 00:29:12.546 A:middle
And to make this all
work, Safari needs

00:29:12.546 --> 00:29:15.006 A:middle
to understand your
websites' forms.

00:29:16.326 --> 00:29:17.626 A:middle
So here's a flow diagram

00:29:18.116 --> 00:29:21.156 A:middle
of how conceptually a password
manager could be looking

00:29:21.156 --> 00:29:22.076 A:middle
at your websites.

00:29:22.986 --> 00:29:25.506 A:middle
Users move between states
like not having an account,

00:29:25.996 --> 00:29:28.286 A:middle
registering for an
account, having the account

00:29:28.286 --> 00:29:30.236 A:middle
and logging in and out of it.

00:29:30.656 --> 00:29:32.476 A:middle
Safari does all of
this automatically.

00:29:33.006 --> 00:29:34.356 A:middle
There's nothing that
you have to do.

00:29:34.356 --> 00:29:37.016 A:middle
There's no opt in for Safari
analyzing your website

00:29:37.016 --> 00:29:39.226 A:middle
and offering password
features to its users.

00:29:40.446 --> 00:29:41.956 A:middle
Because this is automatic

00:29:42.096 --> 00:29:45.836 A:middle
and it's using heuristics,
things can go wrong.

00:29:46.166 --> 00:29:47.516 A:middle
Heuristics aren't perfect.

00:29:48.236 --> 00:29:49.506 A:middle
And when things do go wrong,

00:29:49.836 --> 00:29:52.116 A:middle
Continuity breaks
down for your users.

00:29:52.776 --> 00:29:55.496 A:middle
For instance, if Safari
didn't have a password saved

00:29:55.496 --> 00:29:58.846 A:middle
for your website when you call
SecRequestShared WebCredential

00:29:58.846 --> 00:30:00.496 A:middle
from within your iOS
app, you're going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.846 --> 00:30:00.496 A:middle
from within your iOS
app, you're going

00:30:00.496 --> 00:30:01.546 A:middle
to get back an empty array.

00:30:03.046 --> 00:30:03.856 A:middle
And if Safari didn't notice

00:30:03.856 --> 00:30:05.676 A:middle
that a user had changed
their password on your site,

00:30:05.866 --> 00:30:07.536 A:middle
if Safari didn't understand
that that happened,

00:30:08.006 --> 00:30:10.506 A:middle
when you call SecRequestShared
WebCredential you're going

00:30:10.506 --> 00:30:13.166 A:middle
to get back a stale credential,
and your users aren't going

00:30:13.166 --> 00:30:14.406 A:middle
to be logged in effortlessly.

00:30:15.656 --> 00:30:18.616 A:middle
Because of this, it's in
everyone's best interest

00:30:18.936 --> 00:30:21.616 A:middle
to test their websites
with Safari AutoFill.

00:30:22.656 --> 00:30:25.116 A:middle
Fortunately, it's really
straightforward to do this.

00:30:25.446 --> 00:30:27.006 A:middle
All you have to do
is pretend to be one

00:30:27.006 --> 00:30:28.276 A:middle
of your users for a few minutes.

00:30:28.966 --> 00:30:31.346 A:middle
So let's go back to
the state diagram.

00:30:32.266 --> 00:30:33.426 A:middle
The first thing you're
going to want

00:30:33.426 --> 00:30:35.976 A:middle
to do is get yourself a clean
device or a clean user account

00:30:36.316 --> 00:30:37.206 A:middle
because you don't
want to interfere

00:30:37.206 --> 00:30:39.216 A:middle
with whatever credentials
you personally have stored

00:30:39.216 --> 00:30:40.386 A:middle
for the websites
that you're building.

00:30:40.926 --> 00:30:44.186 A:middle
And then the first
thing that you're going

00:30:44.186 --> 00:30:46.866 A:middle
to do is create an account
just like your users would.

00:30:47.226 --> 00:30:50.586 A:middle
Go to your account - website's
account creation forms

00:30:50.806 --> 00:30:51.386 A:middle
and sign up.

00:30:52.256 --> 00:30:53.226 A:middle
The two things that
you're looking

00:30:53.226 --> 00:30:57.026 A:middle
for here are the Safari offer
to generate a random credential

00:30:57.026 --> 00:30:58.366 A:middle
for the user, a random password,

00:30:58.366 --> 00:31:01.196 A:middle
and then after you've
created the account,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.366 --> 00:31:01.196 A:middle
and then after you've
created the account,

00:31:01.476 --> 00:31:03.836 A:middle
Safari's saved the
user name and password.

00:31:04.336 --> 00:31:07.486 A:middle
And the way that you're going to
check this is by on OS X opening

00:31:07.486 --> 00:31:09.966 A:middle
up Safari's preferences and
going to the Passwords pane,

00:31:10.726 --> 00:31:14.276 A:middle
and on iOS, you'll open Settings
and go to the Safari section,

00:31:14.306 --> 00:31:15.806 A:middle
and you'll have to find
a list of passwords

00:31:15.806 --> 00:31:17.446 A:middle
and user names that
have been saved.

00:31:17.816 --> 00:31:18.186 A:middle
All right.

00:31:19.146 --> 00:31:19.926 A:middle
Now you have an account.

00:31:20.036 --> 00:31:22.466 A:middle
So now that you have an
account and you're logged in,

00:31:22.916 --> 00:31:25.076 A:middle
the first thing you're
going to do is log out

00:31:25.456 --> 00:31:26.896 A:middle
and then try to log
back in again.

00:31:27.586 --> 00:31:29.336 A:middle
And when you go to your
website's login page,

00:31:29.556 --> 00:31:31.046 A:middle
the thing that you're
looking for is

00:31:31.046 --> 00:31:33.096 A:middle
that Safari prefilled
the credentials

00:31:33.096 --> 00:31:36.266 A:middle
so that the user doesn't
have to type them in.

00:31:36.266 --> 00:31:36.526 A:middle
All right.

00:31:37.026 --> 00:31:37.526 A:middle
We've done that.

00:31:38.236 --> 00:31:40.676 A:middle
Next up, the user's going
to change their passwords

00:31:40.676 --> 00:31:43.886 A:middle
at some point during their
relationship with your website.

00:31:44.406 --> 00:31:46.116 A:middle
So you're going to want to do
that when you're logged in.

00:31:46.646 --> 00:31:49.246 A:middle
Go to your Change Password
form, and while you're there,

00:31:49.526 --> 00:31:51.486 A:middle
make sure that Safari offered
to generate a credential

00:31:51.486 --> 00:31:54.116 A:middle
for your users and that
it saved the updated

00:31:54.116 --> 00:31:55.116 A:middle
credential appropriately.

00:31:55.166 --> 00:31:56.636 A:middle
Go back to that list
and make sure

00:31:56.636 --> 00:31:57.736 A:middle
that the new credential
is saved.

00:31:58.256 --> 00:32:02.486 A:middle
And then finally if your
website offers a way for users


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.256 --> 00:32:02.486 A:middle
And then finally if your
website offers a way for users

00:32:02.486 --> 00:32:04.486 A:middle
to change their passwords
when they have forgotten them,

00:32:05.106 --> 00:32:06.006 A:middle
go ahead and check that too.

00:32:06.826 --> 00:32:09.236 A:middle
Make sure that Safari
saves a good credential.

00:32:09.786 --> 00:32:14.366 A:middle
And then finally, to simulate
a user having started their

00:32:14.366 --> 00:32:17.186 A:middle
relationship with your website
outside of Safari's watch,

00:32:17.816 --> 00:32:20.306 A:middle
delete the credentials that
you've created for this website.

00:32:20.656 --> 00:32:21.386 A:middle
Go into Settings.

00:32:21.756 --> 00:32:23.736 A:middle
Go into Safari's
Preferences, delete them.

00:32:24.446 --> 00:32:27.956 A:middle
Then go back to your login
page, manually enter them

00:32:28.216 --> 00:32:30.346 A:middle
and make sure that Safari
saved them at that point,

00:32:30.926 --> 00:32:32.676 A:middle
so that your users have
a great experience.

00:32:37.146 --> 00:32:38.446 A:middle
All right.

00:32:39.176 --> 00:32:39.836 A:middle
Testing's over.

00:32:40.886 --> 00:32:43.736 A:middle
Hopefully everything worked
perfectly, but if it didn't,

00:32:44.126 --> 00:32:46.726 A:middle
I'm happy to say that we have
two new strategies to tell you

00:32:46.726 --> 00:32:48.586 A:middle
about today that you
can put into place

00:32:48.586 --> 00:32:51.496 A:middle
on your website's forms to
help Safari understand your

00:32:51.496 --> 00:32:52.186 A:middle
website better.

00:32:53.316 --> 00:32:54.526 A:middle
The first one is the

00:32:54.526 --> 00:32:56.596 A:middle
about declaring your
forms' intentions.

00:32:58.146 --> 00:33:02.416 A:middle
New in Safari 8 on Yosemite
and Safari on iOS 8,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.146 --> 00:33:02.416 A:middle
New in Safari 8 on Yosemite
and Safari on iOS 8,

00:33:02.906 --> 00:33:06.806 A:middle
Safari supports three new values
for the autocomplete attribute.

00:33:07.236 --> 00:33:10.306 A:middle
User name, current-password
and new-password.

00:33:11.186 --> 00:33:12.926 A:middle
These are a relatively
recent addition

00:33:12.926 --> 00:33:16.286 A:middle
to the HTML specification, and
they're really easy to use.

00:33:16.526 --> 00:33:18.586 A:middle
Just label your user
name fields as user name,

00:33:19.246 --> 00:33:21.446 A:middle
any field that's asking for
the user's current password

00:33:21.446 --> 00:33:22.256 A:middle
is current-password.

00:33:23.026 --> 00:33:25.106 A:middle
And you guessed it, a new
password is new-password.

00:33:25.666 --> 00:33:27.506 A:middle
So let's walk through
a few examples of this.

00:33:28.126 --> 00:33:29.506 A:middle
Here's a standard login form.

00:33:29.906 --> 00:33:32.256 A:middle
You're probably asking for the
user's user name and password.

00:33:32.666 --> 00:33:35.466 A:middle
Go ahead, label them,
input type "text."

00:33:35.606 --> 00:33:37.366 A:middle
User name autocomplete
is "user name,"

00:33:37.736 --> 00:33:39.906 A:middle
and label the password
field current-password.

00:33:40.456 --> 00:33:43.376 A:middle
On whatever form
users create accounts.

00:33:43.836 --> 00:33:44.686 A:middle
It's pretty similar.

00:33:45.256 --> 00:33:47.876 A:middle
Just label the fields as
user name and new-password,

00:33:48.146 --> 00:33:50.346 A:middle
and Safari's going to understand
your forms a little bit better

00:33:50.556 --> 00:33:53.476 A:middle
and be sure to offer password
generation for your users.

00:33:54.026 --> 00:33:57.286 A:middle
If you want your users to
confirm their passwords

00:33:57.286 --> 00:33:59.346 A:middle
to make sure they entered
them the right way both times,

00:33:59.816 --> 00:34:00.326 A:middle
that's fine.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.816 --> 00:34:00.326 A:middle
that's fine.

00:34:00.676 --> 00:34:02.936 A:middle
Just go ahead and label
both your password field

00:34:03.086 --> 00:34:05.716 A:middle
and your confirm password
field as new-password

00:34:06.096 --> 00:34:07.906 A:middle
and Safari's going to
understand that better as well.

00:34:08.525 --> 00:34:10.966 A:middle
And then now changing passwords.

00:34:11.606 --> 00:34:12.206 A:middle
That's fine.

00:34:12.646 --> 00:34:14.565 A:middle
You're going to want to know the
user's current password to prove

00:34:14.565 --> 00:34:15.716 A:middle
that they are who
they say they are.

00:34:15.716 --> 00:34:17.516 A:middle
And you're going to
want a new password

00:34:17.516 --> 00:34:18.275 A:middle
because that's the point.

00:34:19.005 --> 00:34:20.985 A:middle
Just use current-password
and new-password.

00:34:21.466 --> 00:34:25.456 A:middle
Something that you might
notice about this slide is

00:34:25.456 --> 00:34:29.156 A:middle
that I'm specifically outputting
the current user's user name

00:34:29.426 --> 00:34:30.246 A:middle
within the form.

00:34:31.376 --> 00:34:32.525 A:middle
This is a really good idea

00:34:32.846 --> 00:34:35.295 A:middle
because what this does
is it tells Safari

00:34:35.626 --> 00:34:37.656 A:middle
which user is having
their password updated.

00:34:38.496 --> 00:34:41.176 A:middle
This is really important if
users have more than one account

00:34:41.176 --> 00:34:43.436 A:middle
on your site, but it's just
a good idea in general.

00:34:44.326 --> 00:34:47.666 A:middle
Now if your design doesn't
accommodate this sort of thing,

00:34:47.926 --> 00:34:50.005 A:middle
putting the user name out
in plain text read only

00:34:50.005 --> 00:34:51.766 A:middle
like this, don't worry about it.

00:34:52.376 --> 00:34:55.045 A:middle
Just change the input from
type "text" to type "hidden."

00:34:55.916 --> 00:34:58.426 A:middle
Your users aren't going
to see it, but Safari is,

00:34:58.786 --> 00:35:00.556 A:middle
and Safari is going to
understand your forms better


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:58.786 --> 00:35:00.556 A:middle
and Safari is going to
understand your forms better

00:35:01.146 --> 00:35:04.106 A:middle
and do a better job insuring
continuity with respect

00:35:04.106 --> 00:35:05.266 A:middle
to your users' credentials.

00:35:05.826 --> 00:35:09.046 A:middle
And then finally, the
forgotten password case.

00:35:09.516 --> 00:35:11.696 A:middle
In this case you might want

00:35:11.696 --> 00:35:13.746 A:middle
to know their user name,
same thing as before.

00:35:13.746 --> 00:35:14.496 A:middle
Same caveat.

00:35:14.496 --> 00:35:17.126 A:middle
You can hide it, and this time
all you want is a new password,

00:35:17.366 --> 00:35:20.566 A:middle
so label it that way.

00:35:20.796 --> 00:35:24.306 A:middle
These three new values add to
an already long list of values

00:35:24.306 --> 00:35:26.486 A:middle
that you can use with the
autocomplete attribute

00:35:26.886 --> 00:35:29.146 A:middle
to help Safari understand
your forms

00:35:29.366 --> 00:35:30.476 A:middle
and your intentions better.

00:35:31.076 --> 00:35:33.316 A:middle
So for instance if you
have an input element

00:35:33.426 --> 00:35:35.406 A:middle
and you label it
autocomplete phone,

00:35:36.946 --> 00:35:40.396 A:middle
when the user uses AutoFill to
fill out the form, you're going

00:35:40.396 --> 00:35:42.986 A:middle
to be saying "hey Safari
when you're AutoFilling this,

00:35:43.186 --> 00:35:44.586 A:middle
please put the phone
number here -

00:35:44.966 --> 00:35:46.196 A:middle
please don't put anything else,"

00:35:46.896 --> 00:35:48.016 A:middle
and Safari's going
to do it right.

00:35:49.486 --> 00:35:49.936 A:middle
Okie doke.

00:35:50.826 --> 00:35:52.416 A:middle
That was the first
technique I want to tell you

00:35:52.416 --> 00:35:54.986 A:middle
about to make Safari
understand your forms better,

00:35:54.986 --> 00:35:56.856 A:middle
and it's pretty universally
applicable.

00:35:56.856 --> 00:35:59.396 A:middle
I mean you can use it on
any website that has forms.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:00.016 --> 00:36:02.296 A:middle
The second technique
I want to tell you

00:36:02.296 --> 00:36:04.496 A:middle
about is a little
more specialized.

00:36:04.956 --> 00:36:07.726 A:middle
Specialized because it has
to do with a certain type

00:36:07.726 --> 00:36:11.226 A:middle
of web application, and that's
the kind of web application

00:36:11.576 --> 00:36:15.426 A:middle
that loads content dynamically
via XHR and using JavaScript.

00:36:15.826 --> 00:36:16.566 A:middle
You know these pages.

00:36:16.976 --> 00:36:18.856 A:middle
They don't do a full page
refresh when you click

00:36:18.856 --> 00:36:20.546 A:middle
on a link; everything
just snaps in instantly.

00:36:21.466 --> 00:36:23.206 A:middle
These pages are great for users.

00:36:23.426 --> 00:36:25.026 A:middle
This dynamism is awesome.

00:36:25.846 --> 00:36:27.446 A:middle
But it's that same
kind of dynamism,

00:36:27.446 --> 00:36:30.136 A:middle
no full page transition, that
makes it a little bit harder

00:36:30.136 --> 00:36:32.966 A:middle
for Safari to understand
that one of these transitions

00:36:32.966 --> 00:36:35.246 A:middle
in the password state
diagram had happened.

00:36:36.476 --> 00:36:39.486 A:middle
Fortunately, using
some of the same APIs

00:36:39.726 --> 00:36:41.266 A:middle
that you're probably
already using

00:36:41.266 --> 00:36:44.136 A:middle
to build these web applications,
those APIs are going

00:36:44.136 --> 00:36:45.986 A:middle
to tell Safari that something
interesting had happened

00:36:45.986 --> 00:36:46.986 A:middle
with the users' credentials.

00:36:47.886 --> 00:36:50.996 A:middle
What we're talking about is
history and history's pushState

00:36:51.246 --> 00:36:52.326 A:middle
and replaceState methods.

00:36:53.216 --> 00:36:55.346 A:middle
What you do with these
is you contribute

00:36:55.346 --> 00:36:58.166 A:middle
to the browser's back-forward
list, so if I'm a user

00:36:58.166 --> 00:36:59.916 A:middle
on your site and I
click three links


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.426 --> 00:37:02.876 A:middle
when I hit the back button,
if you're not using this,

00:37:03.186 --> 00:37:05.476 A:middle
you go back three
pages, not a single page.

00:37:06.126 --> 00:37:08.366 A:middle
If you're using pushState,
you're adding state

00:37:08.366 --> 00:37:10.896 A:middle
to the back-forward list and
you only go back one page.

00:37:12.556 --> 00:37:16.126 A:middle
Specifically, pushState and
replaceState take a data object

00:37:16.676 --> 00:37:18.976 A:middle
which represents the current
state of your web application.

00:37:19.496 --> 00:37:21.606 A:middle
This is what you're going
to get back when you listen

00:37:21.606 --> 00:37:22.876 A:middle
for the PopStateEvent.

00:37:23.506 --> 00:37:25.986 A:middle
When the user hits the Back
button, that event will fire,

00:37:25.986 --> 00:37:27.936 A:middle
and you'll go ahead
and re-set up the state

00:37:28.156 --> 00:37:30.696 A:middle
as if the user had just hit Back
and loaded a whole new page.

00:37:31.236 --> 00:37:35.406 A:middle
As a user it's really
easy to think

00:37:35.406 --> 00:37:37.816 A:middle
about the back-forward
list as a left-to-right

00:37:37.816 --> 00:37:40.036 A:middle
or right-to-left
series of pages.

00:37:40.686 --> 00:37:43.866 A:middle
But I want to encourage you to
change your thinking on this.

00:37:44.316 --> 00:37:47.786 A:middle
Really, what the back-forward
list is, is just a stack

00:37:47.786 --> 00:37:50.676 A:middle
of user state, and with
pushState and replaceState,

00:37:51.176 --> 00:37:55.136 A:middle
your dynamic HTML5
JavaScript-driven XHR never

00:37:55.136 --> 00:37:59.466 A:middle
reload awesome web application
can go ahead and add to it.

00:37:59.696 --> 00:38:03.326 A:middle
So the next time that a user
is on your dynamic website


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.696 --> 00:38:03.326 A:middle
So the next time that a user
is on your dynamic website

00:38:03.326 --> 00:38:05.166 A:middle
and they go to change
their password,

00:38:06.156 --> 00:38:08.896 A:middle
just call pushState once the
password change has succeeded.

00:38:09.936 --> 00:38:11.636 A:middle
This way, Safari
is going to know

00:38:11.636 --> 00:38:13.166 A:middle
that it's a really
good time to prompt

00:38:13.166 --> 00:38:15.416 A:middle
about saving an updated
password, saying:

00:38:15.736 --> 00:38:17.216 A:middle
"It looks like you just
changed your password.

00:38:17.296 --> 00:38:19.396 A:middle
Are you sure you
want to do this?"

00:38:19.856 --> 00:38:21.866 A:middle
And remember, the history API

00:38:21.866 --> 00:38:24.296 A:middle
and everything I just showed
you really only comes into play

00:38:24.296 --> 00:38:25.616 A:middle
if you're building
one of those dynamic

00:38:25.906 --> 00:38:27.326 A:middle
JavaScript-driven applications.

00:38:28.006 --> 00:38:28.946 A:middle
If when you click on a link

00:38:28.946 --> 00:38:30.906 A:middle
or do something else a
full page reload happens,

00:38:31.136 --> 00:38:34.946 A:middle
you don't have to
worry about this.

00:38:35.136 --> 00:38:38.546 A:middle
So, by testing your website
with Safari AutoFill,

00:38:39.656 --> 00:38:41.766 A:middle
finding any problems,
and trying to fix them

00:38:41.766 --> 00:38:44.176 A:middle
with the two new techniques that
I told you about, you're going

00:38:44.176 --> 00:38:46.546 A:middle
to do a better job insuring
continuity with respect

00:38:46.546 --> 00:38:47.486 A:middle
to a user's credentials.

00:38:48.606 --> 00:38:50.176 A:middle
Their passwords will
automatically fill,

00:38:50.176 --> 00:38:52.316 A:middle
and they'll be logged in on
all their devices in Safari.

00:38:52.866 --> 00:38:56.056 A:middle
And your iOS applications will
have access to great passwords

00:38:56.316 --> 00:38:58.356 A:middle
in
SecRequestSharedWebCredential.

00:38:59.456 --> 00:39:01.096 A:middle
But if these two
techniques don't solve all


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.456 --> 00:39:01.096 A:middle
But if these two
techniques don't solve all

00:39:01.096 --> 00:39:02.636 A:middle
of your problems, what I'm going

00:39:02.636 --> 00:39:05.386 A:middle
to do is encourage you
to please file a bug.

00:39:06.596 --> 00:39:08.256 A:middle
If you file a bug,
we might be able

00:39:08.256 --> 00:39:09.906 A:middle
to give you a workaround
for your problem.

00:39:10.746 --> 00:39:13.256 A:middle
And regardless of whether we
can give you a workaround,

00:39:13.876 --> 00:39:18.176 A:middle
your real world test case, your
problem, is exactly what we need

00:39:18.176 --> 00:39:19.676 A:middle
to make Safari's
heuristics better.

00:39:20.316 --> 00:39:22.416 A:middle
Real world test cases
make everything better

00:39:22.416 --> 00:39:24.466 A:middle
for everyone, so
please file bugs.

00:39:24.726 --> 00:39:26.496 A:middle
I promise that we'll use them.

00:39:27.966 --> 00:39:32.196 A:middle
So that was AutoFill and
ensuring continuity with respect

00:39:32.196 --> 00:39:33.226 A:middle
to your users' credentials.

00:39:34.106 --> 00:39:36.206 A:middle
The next thing I want to
tell you about is ways

00:39:36.206 --> 00:39:37.506 A:middle
that Safari promotes
your website.

00:39:38.466 --> 00:39:42.566 A:middle
As of iOS 7, a Safari user's
start page is a nice friendly

00:39:42.596 --> 00:39:45.436 A:middle
easily tappable list of a
user's handpicked favorites.

00:39:46.546 --> 00:39:50.566 A:middle
And on iOS 8, we've augmented
that view to contain a few sites

00:39:50.566 --> 00:39:51.906 A:middle
that the users visited
frequently.

00:39:52.996 --> 00:39:56.266 A:middle
And Safari 8 and
OS X Yosemite share

00:39:56.326 --> 00:39:57.836 A:middle
that same start page design.

00:39:59.136 --> 00:40:01.826 A:middle
The quality of the icon
for your website that shows


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.136 --> 00:40:01.826 A:middle
The quality of the icon
for your website that shows

00:40:01.826 --> 00:40:03.896 A:middle
up here can make
a huge difference.

00:40:04.116 --> 00:40:06.936 A:middle
It's a first impression, and
it can make all the difference

00:40:06.936 --> 00:40:11.286 A:middle
between a user promoting
a frequently visited site

00:40:11.286 --> 00:40:13.476 A:middle
to a favorite or
removing it outright.

00:40:14.476 --> 00:40:18.096 A:middle
And I bet that you
and your teams sweat

00:40:18.096 --> 00:40:20.166 A:middle
over your applications
icons on iOS

00:40:20.166 --> 00:40:21.336 A:middle
for what you submit
to the App Store.

00:40:21.866 --> 00:40:24.376 A:middle
And it's time to do the same
exact thing for your website.

00:40:24.816 --> 00:40:26.066 A:middle
So let's get into
the details of how

00:40:26.066 --> 00:40:27.476 A:middle
to specify these kinds of icons.

00:40:28.396 --> 00:40:29.956 A:middle
First up, Favicon.

00:40:30.586 --> 00:40:32.226 A:middle
Your website probably
has a favicon.

00:40:32.406 --> 00:40:34.086 A:middle
It shows up in the
address bar next

00:40:34.086 --> 00:40:37.026 A:middle
to a website address on OS X.

00:40:37.456 --> 00:40:39.736 A:middle
Websites have been specifying
favicons for a long time.

00:40:39.966 --> 00:40:40.676 A:middle
It's really easy.

00:40:41.046 --> 00:40:42.906 A:middle
A little bit of markup in
your pages head section,

00:40:43.366 --> 00:40:46.456 A:middle
or a standard path on
your file on a server,

00:40:46.736 --> 00:40:48.526 A:middle
and Safari's going
to fetch that.

00:40:49.326 --> 00:40:52.016 A:middle
But for the start
page on iOS and OS X,

00:40:52.796 --> 00:40:53.756 A:middle
what you're really going to want

00:40:53.756 --> 00:40:56.306 A:middle
to specify is what's
called an apple-touch-icon.

00:40:56.536 --> 00:40:58.466 A:middle
You might already
be specifying this

00:40:58.676 --> 00:41:00.396 A:middle
because this is the
icon that's used


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.676 --> 00:41:00.396 A:middle
because this is the
icon that's used

00:41:00.396 --> 00:41:03.806 A:middle
when a user adds your website
to their home screen on iOS.

00:41:04.666 --> 00:41:05.866 A:middle
It's really easy to do this.

00:41:06.226 --> 00:41:08.116 A:middle
A simple link tag inside
of the head section,

00:41:08.116 --> 00:41:10.646 A:middle
and you can even
specify multiple of these

00:41:10.646 --> 00:41:13.406 A:middle
with different sizes
so that an application

00:41:13.506 --> 00:41:16.096 A:middle
like Safari only downloads
the one that it needs.

00:41:16.406 --> 00:41:18.556 A:middle
Downloads the lowest
resolution one possible,

00:41:18.706 --> 00:41:20.276 A:middle
conserving bandwidth
for your users.

00:41:21.206 --> 00:41:23.306 A:middle
For information on the sizing,
I'm going to encourage you

00:41:23.306 --> 00:41:25.246 A:middle
to check out "Configuring
Web Applications"

00:41:25.246 --> 00:41:26.596 A:middle
on the Safari Web Content Guide.

00:41:27.186 --> 00:41:30.876 A:middle
So the reason that we're
using Apple Touch Icons

00:41:30.876 --> 00:41:33.536 A:middle
for the start page is because
there are already a ton of them

00:41:33.536 --> 00:41:36.386 A:middle
out there and they're
already the right resolution

00:41:36.616 --> 00:41:38.926 A:middle
to be shown an a Mac
and an iOS device.

00:41:40.216 --> 00:41:41.686 A:middle
Don't let the part
where there's touch

00:41:41.686 --> 00:41:43.906 A:middle
in Apple Touch Icon
weird you out with OS X.

00:41:44.396 --> 00:41:46.366 A:middle
Just think of this as
your website's icon.

00:41:46.806 --> 00:41:51.976 A:middle
And about the icon itself,
use every single pixel

00:41:51.976 --> 00:41:53.686 A:middle
in a square canvas
available to you.

00:41:54.486 --> 00:41:56.756 A:middle
Safari is going to show
all of those pixels,

00:41:57.516 --> 00:41:59.866 A:middle
and if a user goes ahead
and adds your website

00:41:59.866 --> 00:42:02.056 A:middle
to their home screen
on iOS, where you know


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.866 --> 00:42:02.056 A:middle
to their home screen
on iOS, where you know

00:42:02.056 --> 00:42:05.346 A:middle
that icons are rounded off, iOS
is going to handle that for you

00:42:05.696 --> 00:42:07.506 A:middle
so there's no need for
you to mask the image.

00:42:08.616 --> 00:42:10.436 A:middle
We don't want to have
mismatched corner-radii.

00:42:11.536 --> 00:42:16.106 A:middle
And finally now that Safari on
OS X is using Apple Touch icons,

00:42:16.386 --> 00:42:18.216 A:middle
you're going to want to put
the Apple Touch icon markup

00:42:18.336 --> 00:42:19.706 A:middle
on all of your pages.

00:42:20.386 --> 00:42:23.366 A:middle
Not just the ones that you're
serving to mobile devices.

00:42:23.766 --> 00:42:26.746 A:middle
There's really no cost to doing
this little bit of markup,

00:42:27.236 --> 00:42:29.736 A:middle
and only devices that care
about the icon are going

00:42:29.736 --> 00:42:30.776 A:middle
to go ahead and download them.

00:42:31.106 --> 00:42:32.416 A:middle
All right.

00:42:32.626 --> 00:42:34.216 A:middle
So that's icons.

00:42:34.556 --> 00:42:37.026 A:middle
The first impression of
how your website is seen

00:42:37.026 --> 00:42:38.296 A:middle
by users in Safari.

00:42:38.846 --> 00:42:42.996 A:middle
Let's talk about other ways that
Safari promotes your content.

00:42:44.196 --> 00:42:48.546 A:middle
Safari today is more than just a
way that people browse the web.

00:42:48.746 --> 00:42:51.806 A:middle
Safari users add pages to
read later using Reading List.

00:42:52.896 --> 00:42:55.726 A:middle
They ask Safari to clean up
articles for them to read later

00:42:55.936 --> 00:42:57.876 A:middle
or right now using
Safari Reader.

00:42:59.916 --> 00:43:02.836 A:middle
And on OS X Mavericks and iOS 7,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:59.916 --> 00:43:02.836 A:middle
And on OS X Mavericks and iOS 7,

00:43:03.176 --> 00:43:06.526 A:middle
a feature called Shared Links
lets the user find articles

00:43:06.526 --> 00:43:08.486 A:middle
to read, find other
stuff that's interesting

00:43:08.486 --> 00:43:10.186 A:middle
that were shared
on social networks.

00:43:11.626 --> 00:43:16.666 A:middle
Well, new to Safari 8 on
OS X Yosemite and iOS 8,

00:43:17.336 --> 00:43:19.436 A:middle
your website can
participate in shared links.

00:43:20.466 --> 00:43:24.756 A:middle
This works, as you might expect,
using your website's RSS feed.

00:43:24.966 --> 00:43:28.296 A:middle
So as soon as the user chooses
Subscribe and Shared Links

00:43:28.676 --> 00:43:32.396 A:middle
on iOS or OS X, Safari's going
to periodically fetch your feed

00:43:33.076 --> 00:43:34.786 A:middle
and show that content to users.

00:43:35.406 --> 00:43:36.686 A:middle
The content that's shown

00:43:36.686 --> 00:43:39.746 A:middle
in the sidebar is directly
taken from your RSS feeds.

00:43:42.926 --> 00:43:46.706 A:middle
Something to note here is that
you want to serve your RSS feeds

00:43:46.706 --> 00:43:48.826 A:middle
and the markup inside of
your pages head sections

00:43:49.186 --> 00:43:53.226 A:middle
that let browsers detect them to
all devices, even mobile ones.

00:43:54.346 --> 00:43:57.066 A:middle
Safari on an iPhone is just
as capable of participating

00:43:57.066 --> 00:44:01.596 A:middle
in shared links as
Safari on a Mac.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:57.066 --> 00:44:01.596 A:middle
in shared links as
Safari on a Mac.

00:44:01.766 --> 00:44:03.526 A:middle
Let's turn our attention
back to Reading List.

00:44:03.816 --> 00:44:05.596 A:middle
Even if your site
doesn't have a RSS feed,

00:44:05.896 --> 00:44:08.206 A:middle
users can add your content
to their Reading Lists.

00:44:09.296 --> 00:44:11.306 A:middle
And as you might know, many
of you in the audience,

00:44:11.876 --> 00:44:17.276 A:middle
as of iOS 7 your application can
add to a user's Reading List.

00:44:17.936 --> 00:44:18.606 A:middle
It's a piece of cake.

00:44:19.236 --> 00:44:21.896 A:middle
All you have to do is import
the Safari services framework

00:44:22.206 --> 00:44:25.186 A:middle
and call a single method
that takes a URL, a title

00:44:25.186 --> 00:44:26.566 A:middle
and some preview text.

00:44:27.326 --> 00:44:29.696 A:middle
Because you're specifying the
title in the preview text,

00:44:30.196 --> 00:44:31.126 A:middle
you're in complete control.

00:44:32.536 --> 00:44:33.096 A:middle
But hold up.

00:44:34.046 --> 00:44:36.496 A:middle
This situation should sound
a little bit familiar to you.

00:44:37.076 --> 00:44:41.586 A:middle
Yet again it's not always clear
cut on how to express these sort

00:44:41.586 --> 00:44:43.006 A:middle
of concepts on the web.

00:44:43.526 --> 00:44:45.316 A:middle
A page on your website
doesn't have a way of saying,

00:44:45.776 --> 00:44:48.076 A:middle
"When I'm added to Reading
List, use this as my title

00:44:48.216 --> 00:44:49.256 A:middle
and this as my description."

00:44:50.356 --> 00:44:52.836 A:middle
It can't say exactly
that, but there are things

00:44:52.836 --> 00:44:54.886 A:middle
that your web pages can
say that help them out.

00:44:56.316 --> 00:44:58.216 A:middle
So let's look at
an example of this.

00:44:59.156 --> 00:45:01.116 A:middle
Here's some markup taken
from the WebKit blog,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:59.156 --> 00:45:01.116 A:middle
Here's some markup taken
from the WebKit blog,

00:45:01.566 --> 00:45:03.556 A:middle
a recent blog post
about the fourth tier,

00:45:03.556 --> 00:45:06.926 A:middle
LOVM JIT that makes
JavaScript and Safari superfast.

00:45:06.966 --> 00:45:07.946 A:middle
I encourage you to read it.

00:45:07.946 --> 00:45:08.986 A:middle
It's an awesome blog post.

00:45:09.406 --> 00:45:14.376 A:middle
That title doesn't really work
as the title of a user's page

00:45:14.546 --> 00:45:17.826 A:middle
because it has those bread
crumbs, Surfin' Safari archive.

00:45:18.616 --> 00:45:21.266 A:middle
But here using the open
graph metadata standard,

00:45:21.676 --> 00:45:24.896 A:middle
I've put markup on the page that
clearly expresses a good title

00:45:24.896 --> 00:45:26.066 A:middle
and a good description.

00:45:26.736 --> 00:45:28.176 A:middle
It's really simple to use.

00:45:30.136 --> 00:45:33.146 A:middle
And when your website speaks
with intention this strong,

00:45:33.596 --> 00:45:34.956 A:middle
Safari is going to listen.

00:45:35.496 --> 00:45:37.886 A:middle
Because you've expressed
the exact information

00:45:37.886 --> 00:45:41.356 A:middle
that Safari is looking for,
Safari can rely on you rather

00:45:41.356 --> 00:45:43.856 A:middle
than using heuristics
to get the job done.

00:45:44.696 --> 00:45:45.726 A:middle
There are other ways

00:45:45.726 --> 00:45:47.296 A:middle
of specifying the
same sort of data.

00:45:47.846 --> 00:45:49.336 A:middle
Here's some markup
you might be familiar

00:45:49.336 --> 00:45:52.206 A:middle
with if you're a web developer,
meta name, description.

00:45:53.226 --> 00:45:55.616 A:middle
This is one way that you might
be specifying a description

00:45:55.616 --> 00:45:58.826 A:middle
to let's say, search engines
for your pages on your site.

00:45:59.476 --> 00:46:00.816 A:middle
Safari can listen to this, too,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:59.476 --> 00:46:00.816 A:middle
Safari can listen to this, too,

00:46:00.946 --> 00:46:04.246 A:middle
because the concepts are closely
aligned: your site's description

00:46:04.976 --> 00:46:06.156 A:middle
and a Reading List description.

00:46:08.306 --> 00:46:10.986 A:middle
OpenGraph is just
one metadata standard

00:46:11.106 --> 00:46:13.046 A:middle
that you should be
checking out today.

00:46:13.656 --> 00:46:14.856 A:middle
There are a bunch
of them on the web.

00:46:15.476 --> 00:46:18.446 A:middle
And this example with Reading
List and getting better titles

00:46:18.446 --> 00:46:20.506 A:middle
and descriptions
is just one example

00:46:20.506 --> 00:46:22.106 A:middle
of how metadata can
help you out today.

00:46:22.966 --> 00:46:26.496 A:middle
Browsers, search
engines, other websites.

00:46:26.886 --> 00:46:29.506 A:middle
They're all going to find uses
for this metadata in the future

00:46:29.506 --> 00:46:31.566 A:middle
as they display your
content to try

00:46:31.566 --> 00:46:33.046 A:middle
and make it more
attractive to users.

00:46:33.496 --> 00:46:35.936 A:middle
So I encourage you to check
these formats out and think

00:46:35.936 --> 00:46:37.426 A:middle
about adopting a
metadata strategy.

00:46:37.986 --> 00:46:40.396 A:middle
Okie doke.

00:46:41.166 --> 00:46:41.646 A:middle
Checkpoint.

00:46:42.556 --> 00:46:46.296 A:middle
By now, you've added the
simple file to your web server.

00:46:46.516 --> 00:46:49.046 A:middle
You've adopted entitlements
in your iOS application,

00:46:49.626 --> 00:46:51.206 A:middle
and you're ensuring
continuity with respect

00:46:51.206 --> 00:46:53.216 A:middle
to your user's credentials
by making it easy for them

00:46:53.216 --> 00:46:54.676 A:middle
to log in to your app.

00:46:54.756 --> 00:46:55.996 A:middle
You've tested Safari AutoFill.

00:46:56.406 --> 00:46:57.886 A:middle
You've made it work
great on your website.

00:46:58.776 --> 00:46:59.936 A:middle
Your icons are awesome.

00:46:59.936 --> 00:47:01.246 A:middle
Just as good as your app icons.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:59.936 --> 00:47:01.246 A:middle
Just as good as your app icons.

00:47:01.886 --> 00:47:05.236 A:middle
And you've adopted some metadata
so that websites, browsers

00:47:05.236 --> 00:47:07.996 A:middle
and search engines understand
your web content better.

00:47:09.706 --> 00:47:12.186 A:middle
For the rest of our time
together, I want to go

00:47:12.186 --> 00:47:16.346 A:middle
over a few examples of how we
can make your website have a

00:47:16.726 --> 00:47:19.036 A:middle
great experience when
transitioning between devices.

00:47:19.406 --> 00:47:20.896 A:middle
Users viewing your websites

00:47:21.056 --> 00:47:23.386 A:middle
on mobile devices
and desktop devices.

00:47:25.656 --> 00:47:27.636 A:middle
The first example of
this that I want to talk

00:47:27.636 --> 00:47:30.276 A:middle
about is called The
Sticky Mobile Website.

00:47:31.016 --> 00:47:32.066 A:middle
So let me tell you
about a problem

00:47:32.066 --> 00:47:33.376 A:middle
that I just ran into
the other day.

00:47:33.516 --> 00:47:34.886 A:middle
I have this all the time,

00:47:35.286 --> 00:47:36.676 A:middle
but it actually just
happened last week.

00:47:38.066 --> 00:47:40.346 A:middle
My friend was reading an
article on her iPhone,

00:47:41.286 --> 00:47:43.416 A:middle
looked good to her, and she
thought that I might like it

00:47:43.696 --> 00:47:44.746 A:middle
so she sent me a link to it.

00:47:45.416 --> 00:47:47.676 A:middle
I was sitting at my
Mac and I opened it up

00:47:48.106 --> 00:47:49.186 A:middle
and this is what I saw.

00:47:50.006 --> 00:47:54.256 A:middle
I saw the website's mobile
layout stretch up super wide

00:47:54.386 --> 00:47:56.196 A:middle
with lines of text that
are completely unreadable.

00:47:56.736 --> 00:47:59.906 A:middle
On other websites when
I've run into this problem,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:00.206 --> 00:48:01.886 A:middle
I've seen this version of it,

00:48:02.426 --> 00:48:06.476 A:middle
where the content is
constrained to say, 320 points.

00:48:07.376 --> 00:48:08.466 A:middle
This isn't readable either.

00:48:09.076 --> 00:48:13.396 A:middle
So what I was able to do
with this problem was look

00:48:13.396 --> 00:48:16.706 A:middle
at the website's address,
the page that I was on.

00:48:17.166 --> 00:48:19.846 A:middle
And notice that I was on a
mobile specific subdomain

00:48:19.846 --> 00:48:23.846 A:middle
of the site, and by removing
the m dot from the URL,

00:48:23.846 --> 00:48:27.086 A:middle
I can get a version of the
website that looked great

00:48:27.086 --> 00:48:29.666 A:middle
on a desktop with a
nice constrained width.

00:48:30.656 --> 00:48:33.516 A:middle
So some of our users are going
to be able to figure some

00:48:33.516 --> 00:48:35.836 A:middle
of this stuff out, but
they shouldn't have to,

00:48:36.466 --> 00:48:37.366 A:middle
and most of them won't.

00:48:38.286 --> 00:48:39.826 A:middle
So let's get to the
bottom of this problem

00:48:39.826 --> 00:48:41.646 A:middle
and figure out how to fix it.

00:48:42.556 --> 00:48:44.686 A:middle
So here's what I
think what happened.

00:48:45.136 --> 00:48:46.446 A:middle
This is a concept diagram.

00:48:46.536 --> 00:48:49.026 A:middle
It might not be exactly
the same from site to site,

00:48:49.026 --> 00:48:50.226 A:middle
but it's the big picture.

00:48:50.926 --> 00:48:53.866 A:middle
And what happened here is
that the user, my friend,

00:48:54.876 --> 00:48:58.816 A:middle
went to a link on her iPhone,
and when she went to example.com

00:48:58.816 --> 00:49:01.726 A:middle
in this case, the website
said, "Hey, I can tell you're


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:58.816 --> 00:49:01.726 A:middle
in this case, the website
said, "Hey, I can tell you're

00:49:01.726 --> 00:49:03.486 A:middle
on an iPhone from your
user agent string.

00:49:03.856 --> 00:49:06.026 A:middle
I'm going to send you to a
mobile version of the site

00:49:06.286 --> 00:49:07.586 A:middle
because I think that's
better for you."

00:49:08.906 --> 00:49:11.996 A:middle
And then she sent me a link to
that mobile version of the site,

00:49:13.436 --> 00:49:15.106 A:middle
and I went straight
to that mobile site.

00:49:15.106 --> 00:49:17.966 A:middle
It didn't have the kind of
same courtesy to route me back

00:49:17.966 --> 00:49:20.446 A:middle
up to the desktop
version of the site.

00:49:21.136 --> 00:49:25.516 A:middle
And now with Handoff on
OS X Yosemite and iOS 8,

00:49:26.036 --> 00:49:28.096 A:middle
it only takes one person
to reproduce this problem.

00:49:28.446 --> 00:49:30.196 A:middle
You don't need friends
sending links to each other.

00:49:30.866 --> 00:49:33.046 A:middle
So there's even more
reason than ever before

00:49:33.886 --> 00:49:36.066 A:middle
to get your URL strategy
together.

00:49:38.096 --> 00:49:39.416 A:middle
The solution in this case,

00:49:39.556 --> 00:49:41.556 A:middle
I alluded to it earlier,
is pretty simple.

00:49:42.776 --> 00:49:45.086 A:middle
Let the mobile website
route users back

00:49:45.356 --> 00:49:48.786 A:middle
to the desktop website,
giving me the version

00:49:48.786 --> 00:49:50.256 A:middle
of the website that's
appropriate

00:49:50.486 --> 00:49:52.076 A:middle
on my 27-inch cinema display.

00:49:52.706 --> 00:49:56.006 A:middle
So this would have solved
my immediate problem,

00:49:56.536 --> 00:49:58.716 A:middle
but there is a much
better solution to be had.

00:49:59.386 --> 00:50:02.636 A:middle
And that comes by
admitting that the time


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:59.386 --> 00:50:02.636 A:middle
And that comes by
admitting that the time

00:50:02.636 --> 00:50:04.846 A:middle
of the mobile website is over.

00:50:06.226 --> 00:50:09.096 A:middle
Using technologies like
Responsive Design and Layout,

00:50:09.366 --> 00:50:13.266 A:middle
HTML 5, CSS, you can make
one version of your website

00:50:13.446 --> 00:50:15.966 A:middle
that looks awesome for all
of your users whether they're

00:50:15.966 --> 00:50:18.616 A:middle
on an iPhone, an iPad or a Mac.

00:50:19.956 --> 00:50:22.896 A:middle
I'm happy to say that
we have a full session

00:50:22.896 --> 00:50:25.926 A:middle
on Responsive Design this year,
and you should check it out.

00:50:26.266 --> 00:50:27.166 A:middle
It's Friday morning.

00:50:27.456 --> 00:50:29.786 A:middle
And if you're interested in this
and you have a mobile website,

00:50:30.236 --> 00:50:34.216 A:middle
you're going to want
to go to that.

00:50:34.216 --> 00:50:35.676 A:middle
Okay. One more topic
to talk about.

00:50:36.026 --> 00:50:37.566 A:middle
And that's video.

00:50:38.126 --> 00:50:42.506 A:middle
Since the dawn of iPhone,
users have been grading -

00:50:42.626 --> 00:50:45.456 A:middle
getting amazing video
on their iOS devices.

00:50:46.276 --> 00:50:49.076 A:middle
And that amazing video has been
coming to them without the use

00:50:49.076 --> 00:50:52.346 A:middle
of any browser plug-ins,
using standards based video.

00:50:53.086 --> 00:50:56.426 A:middle
And because of this, users have
been getting excellent battery

00:50:56.426 --> 00:50:59.236 A:middle
life and smooth video
playback even

00:50:59.236 --> 00:51:01.046 A:middle
on relatively low-powered
devices.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:59.236 --> 00:51:01.046 A:middle
on relatively low-powered
devices.

00:51:02.226 --> 00:51:04.946 A:middle
For a consistent
unbroken experience

00:51:04.946 --> 00:51:06.696 A:middle
for how users get
video on your site,

00:51:07.286 --> 00:51:09.696 A:middle
you should use the same
video strategy on OS X.

00:51:10.166 --> 00:51:11.546 A:middle
It works just as well there.

00:51:11.876 --> 00:51:14.476 A:middle
Give users better battery
life and smooth playback.

00:51:15.676 --> 00:51:18.786 A:middle
And if the reason that maybe
you might be avoiding losing the

00:51:18.786 --> 00:51:20.976 A:middle
plug-ins on the desktop is

00:51:20.976 --> 00:51:22.966 A:middle
because of maybe
pre-rolled advertising

00:51:22.966 --> 00:51:26.486 A:middle
of some other interactive
component, you can do that today

00:51:26.486 --> 00:51:28.646 A:middle
with JavaScript HTML and video.

00:51:29.136 --> 00:51:29.866 A:middle
It's really simple.

00:51:31.306 --> 00:51:33.386 A:middle
For more information on
Advanced Media for the Web,

00:51:34.116 --> 00:51:36.186 A:middle
you should check out -
actually you should have checked

00:51:36.186 --> 00:51:38.226 A:middle
out this session this
morning at 11:30.

00:51:38.556 --> 00:51:40.046 A:middle
Go back and watch the
video if you weren't there.

00:51:40.636 --> 00:51:46.736 A:middle
Okay. So in the last 50 minutes,
we've covered quite a bit.

00:51:47.496 --> 00:51:52.426 A:middle
And all of it has been about
ensuring continuity: unbroken,

00:51:52.736 --> 00:51:55.566 A:middle
consistent experiences
for all of our users,

00:51:55.956 --> 00:51:57.706 A:middle
whether they're using
our products and services

00:51:58.136 --> 00:52:00.726 A:middle
with an app, with a
website and no matter


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:58.136 --> 00:52:00.726 A:middle
with an app, with a
website and no matter

00:52:00.726 --> 00:52:01.756 A:middle
which device they're on.

00:52:03.196 --> 00:52:05.076 A:middle
And so to recap, here's
what I want you all

00:52:05.076 --> 00:52:05.926 A:middle
to go out and do today.

00:52:06.786 --> 00:52:07.726 A:middle
First things first.

00:52:08.296 --> 00:52:12.446 A:middle
Put the signed JSON file on your
server, add the entitlements

00:52:12.446 --> 00:52:15.436 A:middle
to your application, and
call the APIs to make sure

00:52:15.436 --> 00:52:18.136 A:middle
that nobody in this room
ever sees a login screen

00:52:18.136 --> 00:52:21.866 A:middle
on an iOS app when they created
their account on the website

00:52:21.866 --> 00:52:23.806 A:middle
in Safari and Safari
has credentials.

00:52:24.916 --> 00:52:27.616 A:middle
The next thing to make
sure that those credentials

00:52:27.616 --> 00:52:28.406 A:middle
that you're getting back

00:52:28.676 --> 00:52:30.406 A:middle
from the
SecRequestSharedWebCredential

00:52:30.686 --> 00:52:34.596 A:middle
are always up to date, test your
website with Safari AutoFill.

00:52:35.246 --> 00:52:37.556 A:middle
Everything might work
great, but you should run

00:52:37.556 --> 00:52:40.196 A:middle
into the problems before your
users do, if there are any.

00:52:41.006 --> 00:52:43.186 A:middle
And if there are, look
at the two techniques

00:52:43.186 --> 00:52:44.116 A:middle
that I told you about today.

00:52:45.136 --> 00:52:46.816 A:middle
No matter what kind
of website you have,

00:52:47.086 --> 00:52:48.926 A:middle
you should adopt the
AutoComplete attribute

00:52:49.226 --> 00:52:52.166 A:middle
and use user name, current
password, and new password

00:52:52.706 --> 00:52:54.066 A:middle
to make it easier for Safari

00:52:54.066 --> 00:52:55.626 A:middle
to do the right thing
with your forms.

00:52:56.296 --> 00:52:57.826 A:middle
It might only take five minutes,

00:52:58.156 --> 00:52:59.926 A:middle
and it will make a huge
difference for your users.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:00.996 --> 00:53:03.956 A:middle
Then sweat the details on
your application's icons.

00:53:04.406 --> 00:53:07.336 A:middle
Make your website's icons look
as great as that of your apps.

00:53:08.216 --> 00:53:09.856 A:middle
And then look at metadata.

00:53:10.166 --> 00:53:12.816 A:middle
Find ways to make web
browsers, search engines

00:53:13.836 --> 00:53:16.196 A:middle
and other websites
understand your content better

00:53:16.196 --> 00:53:17.786 A:middle
for when they're
showing it to users.

00:53:18.676 --> 00:53:21.576 A:middle
And then think about your
desktop and mobile websites.

00:53:21.956 --> 00:53:23.076 A:middle
If you have two different
versions

00:53:23.076 --> 00:53:25.466 A:middle
of your website,
try to have one.

00:53:26.036 --> 00:53:29.806 A:middle
If you want more information
on any of this, I encourage you

00:53:29.806 --> 00:53:34.316 A:middle
to get in touch with Evangelism,
DTS or the Support Forums.

00:53:35.606 --> 00:53:37.916 A:middle
And we've got some really cool
related sessions this year,

00:53:38.166 --> 00:53:39.556 A:middle
some of which I pointed
out earlier.

00:53:40.146 --> 00:53:45.306 A:middle
"Advanced Media for the Web,"
Touch ID and the Keychain,

00:53:45.956 --> 00:53:48.316 A:middle
Adopting Handoff to make
these smooth transitions,

00:53:48.536 --> 00:53:50.096 A:middle
just like you saw
with Craig and Mel,

00:53:50.806 --> 00:53:52.376 A:middle
and Designing Responsive
Websites.

00:53:52.886 --> 00:53:54.046 A:middle
Thank you so much everybody.

00:53:54.046 --> 00:53:55.656 A:middle
I hope you're having
an awesome WWDC.

00:53:56.516 --> 00:54:01.720 A:middle
[ Applause ]

