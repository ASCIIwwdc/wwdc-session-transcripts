WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:13.176 --> 00:00:16.716 A:middle
&gt;&gt; Ladies and gentlemen,
please welcome Vice President,

00:00:16.716 --> 00:00:19.896 A:middle
OS X platform experience,
Andreas Wendker.

00:00:20.516 --> 00:00:27.496 A:middle
[ Applause ]

00:00:27.996 --> 00:00:28.756 A:middle
&gt;&gt; Good afternoon.

00:00:28.956 --> 00:00:31.976 A:middle
Welcome to the 25th WWDC.

00:00:32.516 --> 00:00:38.796 A:middle
[ Cheering ]

00:00:39.296 --> 00:00:41.076 A:middle
So, if you watched the
keynote this morning,

00:00:41.386 --> 00:00:44.006 A:middle
you will have noticed that this
year we have a very strong focus

00:00:44.136 --> 00:00:45.546 A:middle
on our developer technologies.

00:00:46.486 --> 00:00:49.336 A:middle
We're building out our
entire platform ecosystem,

00:00:50.116 --> 00:00:52.166 A:middle
and 2014 is going to see some

00:00:52.166 --> 00:00:54.446 A:middle
of the largest developed
releases in years.

00:00:55.466 --> 00:00:58.006 A:middle
We are adding an incredible
number of new APIs.

00:00:58.806 --> 00:01:01.316 A:middle
We're giving you access to
more low-level technologies,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.806 --> 00:01:01.316 A:middle
We're giving you access to
more low-level technologies,

00:01:01.896 --> 00:01:04.906 A:middle
and as always, we're moving
all parts of the ecosystem,

00:01:05.355 --> 00:01:08.336 A:middle
hardware, software, services,

00:01:08.726 --> 00:01:11.396 A:middle
and developer tools
forward together,

00:01:11.766 --> 00:01:14.036 A:middle
which is something
only Apple can do.

00:01:15.426 --> 00:01:17.966 A:middle
Our focus on developers
is paying off very nicely.

00:01:17.966 --> 00:01:19.696 A:middle
As we saw from some
of the numbers shown

00:01:19.696 --> 00:01:22.096 A:middle
in the keynote this
morning, there are now more

00:01:22.096 --> 00:01:24.606 A:middle
than 1.2 million apps
in the App Store.

00:01:25.276 --> 00:01:28.006 A:middle
They have been downloaded
over 75 billion times.

00:01:29.156 --> 00:01:31.956 A:middle
And this huge success story is,
of course, only made possible

00:01:32.066 --> 00:01:33.566 A:middle
by you, the app developers.

00:01:35.116 --> 00:01:37.916 A:middle
And you're part of a very,
very active community.

00:01:38.266 --> 00:01:39.786 A:middle
Since we shipped the last update

00:01:39.786 --> 00:01:42.326 A:middle
of our Xcode IDE just
a few months ago,

00:01:42.896 --> 00:01:45.786 A:middle
it has been downloaded
more than 14 million times,

00:01:46.386 --> 00:01:49.526 A:middle
and we are adding developers to
our community at an amazing rate

00:01:50.036 --> 00:01:53.856 A:middle
of more than 120,000 brand-new
developers downloading Xcode

00:01:54.046 --> 00:01:54.916 A:middle
every single month.

00:01:56.656 --> 00:01:57.986 A:middle
So, let's take a look
at what we're doing

00:01:57.986 --> 00:02:01.416 A:middle
with our iOS App Store to make
you guys even more successful.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:57.986 --> 00:02:01.416 A:middle
with our iOS App Store to make
you guys even more successful.

00:02:02.616 --> 00:02:05.306 A:middle
This year, we're improving
how users can discover apps

00:02:06.226 --> 00:02:10.356 A:middle
by adding things like related
searches, trending searches,

00:02:11.086 --> 00:02:12.486 A:middle
and editor's choice badges,

00:02:12.676 --> 00:02:15.226 A:middle
which will help promote the most
noteworthy apps in the store.

00:02:17.106 --> 00:02:21.056 A:middle
It will also allow you to
advertise your apps better

00:02:21.246 --> 00:02:23.836 A:middle
by including preview
movies, which will play

00:02:23.836 --> 00:02:25.476 A:middle
for the users browsing
the store.

00:02:26.146 --> 00:02:27.886 A:middle
And if you're a developer
of multiple apps,

00:02:28.186 --> 00:02:30.726 A:middle
you can even bundle them
all together and sell them

00:02:30.726 --> 00:02:32.406 A:middle
at a discounted price,
if you would like.

00:02:34.336 --> 00:02:35.246 A:middle
Now, we're not stopping

00:02:35.246 --> 00:02:37.276 A:middle
at making the App Store
experience itself better.

00:02:37.576 --> 00:02:38.766 A:middle
We're also working very,

00:02:38.766 --> 00:02:41.376 A:middle
very hard on improving
the developer experience.

00:02:42.186 --> 00:02:43.556 A:middle
So later this year, we're going

00:02:43.556 --> 00:02:46.286 A:middle
to give iTunes Connect,
a new, cleaner look.

00:02:47.526 --> 00:02:48.426 A:middle
It will have a new-

00:02:49.516 --> 00:02:53.856 A:middle
[ Applause ]

00:02:54.356 --> 00:02:56.786 A:middle
It will have a new dashboard
that will show information

00:02:56.786 --> 00:02:58.856 A:middle
about your apps, and
most importantly,

00:02:59.326 --> 00:03:01.236 A:middle
we are adding variable
analytics.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.326 --> 00:03:01.236 A:middle
we are adding variable
analytics.

00:03:02.516 --> 00:03:07.746 A:middle
[ Applause ]

00:03:08.246 --> 00:03:11.746 A:middle
These analytics will tell you
how many users visited your app,

00:03:11.746 --> 00:03:15.476 A:middle
your store pages, how many users
went on and purchased your app.

00:03:16.516 --> 00:03:21.256 A:middle
[ Applause ]

00:03:21.756 --> 00:03:23.626 A:middle
How many remained
active over time.

00:03:24.496 --> 00:03:27.896 A:middle
And best of all, collecting all
this information is fed right

00:03:27.896 --> 00:03:30.196 A:middle
into iOS and it's
completely automatic.

00:03:30.316 --> 00:03:32.686 A:middle
There's no need for any kind
of special libraries or code

00:03:32.686 --> 00:03:34.706 A:middle
on your part to turn
on analytics.

00:03:35.516 --> 00:03:40.316 A:middle
[ Applause ]

00:03:40.816 --> 00:03:42.926 A:middle
Now, many developers
have also asked for a way

00:03:42.926 --> 00:03:45.786 A:middle
to distribute beta versions of
their apps before they ship,

00:03:45.886 --> 00:03:48.416 A:middle
and we are pleased to announce
our new TestFlight service,

00:03:49.586 --> 00:03:51.306 A:middle
which will allow you
to do exactly that.

00:03:53.156 --> 00:03:56.016 A:middle
Users become beta testers by
downloading the TestFlight app.

00:03:57.516 --> 00:04:03.196 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.516 --> 00:04:03.196 A:middle
[ Applause ]

00:04:03.696 --> 00:04:05.926 A:middle
The app will give them
access to the beta versions

00:04:05.926 --> 00:04:07.856 A:middle
that are not available in
the full App Store yet,

00:04:07.856 --> 00:04:10.906 A:middle
and they download
these apps simply,

00:04:10.906 --> 00:04:13.366 A:middle
and they download these apps
simply with their Apple ID.

00:04:13.536 --> 00:04:15.676 A:middle
There's no need for any
kind of special profiles.

00:04:16.516 --> 00:04:23.036 A:middle
[ Applause ]

00:04:23.536 --> 00:04:27.496 A:middle
Each app can have to, can
have up to 1000 beta testers,

00:04:27.626 --> 00:04:31.496 A:middle
and notice that this is a limit
of 1000 users, not 1000 devices.

00:04:31.496 --> 00:04:31.576 A:middle
So-

00:04:32.516 --> 00:04:39.676 A:middle
[ Applause ]

00:04:40.176 --> 00:04:41.936 A:middle
So, all these users
can run your apps,

00:04:42.166 --> 00:04:44.616 A:middle
your apps on multiple
devices at the same time.

00:04:45.386 --> 00:04:47.936 A:middle
And we will even allow you
to use the TestFlight service

00:04:47.936 --> 00:04:50.786 A:middle
to distribute apps within
your own development team,

00:04:51.026 --> 00:04:53.036 A:middle
in that case without
app review, and again,

00:04:53.036 --> 00:04:54.566 A:middle
without any kind of
special profiles.

00:04:55.516 --> 00:05:00.466 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:55.516 --> 00:05:00.466 A:middle
[ Applause ]

00:05:00.966 --> 00:05:03.386 A:middle
Also, later this year, we
we'll ship the final version

00:05:03.386 --> 00:05:04.266 A:middle
of Xcode 6.

00:05:04.596 --> 00:05:06.836 A:middle
We will allow you to
include your app's symbols

00:05:06.836 --> 00:05:12.136 A:middle
with your App Store submissions
because later next year,

00:05:12.396 --> 00:05:14.656 A:middle
we will start servicing
fully aggregated

00:05:14.846 --> 00:05:16.816 A:middle
and symbolicated crash
reports for your apps.

00:05:17.516 --> 00:05:24.796 A:middle
[ Applause ]

00:05:25.296 --> 00:05:26.106 A:middle
And you'll be able to work

00:05:26.106 --> 00:05:28.676 A:middle
through these crash reports
within the Xcode IDE.

00:05:29.866 --> 00:05:32.326 A:middle
So, we have a huge update
for the App Store this year.

00:05:32.326 --> 00:05:33.816 A:middle
There are several
end-user features

00:05:33.856 --> 00:05:35.706 A:middle
that will help discoverability
of apps

00:05:36.196 --> 00:05:39.836 A:middle
and a completely revamped
iTunes Connect with analytics,

00:05:39.836 --> 00:05:42.346 A:middle
TestFlight, and later, also
better crash reporting.

00:05:44.556 --> 00:05:46.476 A:middle
Now, let's move on
to the surprise news

00:05:46.476 --> 00:05:48.876 A:middle
of this year's developer
conference-Swift.

00:05:51.436 --> 00:05:53.126 A:middle
Swift is the brand-new
developer,

00:05:53.126 --> 00:05:57.056 A:middle
brand-new program language
designed by Apple specifically

00:05:57.156 --> 00:05:58.586 A:middle
for Cocoa and Cocoa Touch.

00:05:59.286 --> 00:06:03.036 A:middle
It works beautifully with our
system APIs, and it's designed


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.286 --> 00:06:03.036 A:middle
It works beautifully with our
system APIs, and it's designed

00:06:03.036 --> 00:06:04.516 A:middle
with the common programming
patterns

00:06:04.516 --> 00:06:05.876 A:middle
on our platforms in mind.

00:06:07.426 --> 00:06:09.166 A:middle
Now, there are a lot of
program languages out there.

00:06:10.196 --> 00:06:13.466 A:middle
On the iOS and OS X, most of you
use an object-oriented variant

00:06:13.466 --> 00:06:16.026 A:middle
of C, C++, or Objective-C,

00:06:16.026 --> 00:06:18.466 A:middle
which so far has been our system
program language of choice.

00:06:19.706 --> 00:06:21.926 A:middle
The problem we were facing
was that pretty much all

00:06:21.926 --> 00:06:24.936 A:middle
of these languages either fit in
the category of high performance

00:06:25.096 --> 00:06:27.466 A:middle
but low productivity
or in the category

00:06:27.466 --> 00:06:29.526 A:middle
of high productivity
but low performance.

00:06:30.296 --> 00:06:32.036 A:middle
But we want developers
on our platforms

00:06:32.036 --> 00:06:35.016 A:middle
to have a language available to
them that gives them the best

00:06:35.016 --> 00:06:37.406 A:middle
of both worlds, and that's
why we created Swift.

00:06:39.106 --> 00:06:40.436 A:middle
Swift is very modern.

00:06:40.726 --> 00:06:42.266 A:middle
It has all the things
you would expect

00:06:42.366 --> 00:06:43.536 A:middle
from a new program language.

00:06:44.146 --> 00:06:45.646 A:middle
It has a nicely tuned syntax.

00:06:45.996 --> 00:06:48.846 A:middle
It allows you to write very
compact, very expressive code

00:06:49.286 --> 00:06:51.326 A:middle
with features like
clojures and generics.

00:06:53.186 --> 00:06:55.516 A:middle
Here are a few examples
of Swift code next

00:06:55.516 --> 00:06:57.506 A:middle
to some typically Objective-C
code you might write.

00:06:58.286 --> 00:07:00.446 A:middle
You can really see that
Swift is a lot more compact.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.286 --> 00:07:00.446 A:middle
You can really see that
Swift is a lot more compact.

00:07:00.786 --> 00:07:04.306 A:middle
It even has dedicated syntax
for a common operation

00:07:04.306 --> 00:07:05.546 A:middle
like a respondsToSelector test.

00:07:05.546 --> 00:07:10.156 A:middle
And here you can also see that
we are using common dot syntax

00:07:10.276 --> 00:07:11.996 A:middle
for function and
selector implications.

00:07:14.556 --> 00:07:16.636 A:middle
Swift is also designed
to be safe.

00:07:16.636 --> 00:07:21.316 A:middle
It will prevent you from
introducing typical bugs

00:07:21.316 --> 00:07:25.706 A:middle
or stability issues simply
by enforcing best practices

00:07:25.876 --> 00:07:28.796 A:middle
for writing code, so that for
example you don't end up working

00:07:28.796 --> 00:07:30.836 A:middle
with an uninitialized
variable or running

00:07:30.836 --> 00:07:32.306 A:middle
out of bounds with
an array index.

00:07:34.176 --> 00:07:35.496 A:middle
And Swift is fast.

00:07:36.626 --> 00:07:38.096 A:middle
We've really tuned the compiler

00:07:38.316 --> 00:07:39.806 A:middle
and the language
runtime together

00:07:40.336 --> 00:07:43.276 A:middle
to optimize the most common
operations on our platform.

00:07:44.756 --> 00:07:45.976 A:middle
Here's an example benchmark.

00:07:46.046 --> 00:07:47.456 A:middle
This is a Complex Object Sort.

00:07:47.906 --> 00:07:51.116 A:middle
You can really see how Swift
outperforms Objective-C and,

00:07:51.166 --> 00:07:52.306 A:middle
certainly, scripting languages.

00:07:54.056 --> 00:07:56.156 A:middle
Now, the best way to tell you a
little bit more about Swift is

00:07:56.156 --> 00:07:57.196 A:middle
to simply write some code.

00:07:57.636 --> 00:07:59.836 A:middle
So, I'm going to ask Ted
Kremenek to come up on stage


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.136 --> 00:08:01.866 A:middle
and give you a demo
of the basics

00:08:01.866 --> 00:08:03.666 A:middle
of the Swift programming
language.

00:08:04.516 --> 00:08:10.676 A:middle
[ Applause ]

00:08:11.176 --> 00:08:11.826 A:middle
&gt;&gt; Thanks, Andreas.

00:08:11.826 --> 00:08:15.146 A:middle
So, I'm going to take
you on a quick tour

00:08:15.346 --> 00:08:16.406 A:middle
of the Swift language,

00:08:16.986 --> 00:08:19.026 A:middle
and doesn't the terminal
look beautiful in Yosemite?

00:08:19.026 --> 00:08:22.646 A:middle
We're going to fire
up the compiler

00:08:22.646 --> 00:08:24.596 A:middle
in an interactive
coding mode called a

00:08:24.636 --> 00:08:27.116 A:middle
Read-Evaluate-Print-Loop,
or REPL.

00:08:27.116 --> 00:08:29.456 A:middle
I just type code
in, it gets compiled

00:08:29.456 --> 00:08:31.066 A:middle
on the fly, and executes.

00:08:32.196 --> 00:08:34.506 A:middle
We'll start it off with
a simple, "hello world."

00:08:35.426 --> 00:08:38.135 A:middle
This one line of code
is all you would need

00:08:38.336 --> 00:08:41.186 A:middle
to write your first
working Swift program.

00:08:41.885 --> 00:08:44.086 A:middle
Whereas we would naturally
want to move on now

00:08:44.086 --> 00:08:46.416 A:middle
to doing more interesting
things like declaring variables.

00:08:47.026 --> 00:08:51.896 A:middle
Now, you notice, I'm not
actually writing the types

00:08:52.016 --> 00:08:52.756 A:middle
for these variables.

00:08:53.396 --> 00:08:56.066 A:middle
That's because the Swift
compiler has powerful type

00:08:56.246 --> 00:08:59.716 A:middle
inference that infers that
X has the, has the type int


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.086 --> 00:09:02.696 A:middle
because I initialized
it with the value 42.

00:09:03.216 --> 00:09:05.886 A:middle
Similarly, for S we infer
that it has a type string

00:09:06.146 --> 00:09:07.786 A:middle
because I initialized it
with a string constant,

00:09:08.556 --> 00:09:10.996 A:middle
and this means it makes the
code feel very lightweight.

00:09:12.036 --> 00:09:13.216 A:middle
Now, I have a lot to show you,

00:09:13.316 --> 00:09:14.986 A:middle
so instead of me
typing everything,

00:09:14.986 --> 00:09:16.316 A:middle
I'm going to have
some assistance here

00:09:16.316 --> 00:09:18.266 A:middle
with the keystrokes but
everything is still going

00:09:18.266 --> 00:09:19.706 A:middle
to be live in the REPL.

00:09:21.056 --> 00:09:23.606 A:middle
Let's move on to simple
containers, like arrays.

00:09:23.606 --> 00:09:26.976 A:middle
Now, you can see the syntax
is very light and natural.

00:09:27.386 --> 00:09:28.446 A:middle
Here I have an array
of integers,

00:09:29.456 --> 00:09:30.796 A:middle
similarly, an array of strings.

00:09:31.956 --> 00:09:34.946 A:middle
Again, I didn't write the types
because type inference came in

00:09:34.946 --> 00:09:39.106 A:middle
and it inferred the types of
the arrays just by the contents

00:09:39.186 --> 00:09:41.806 A:middle
of the array that I used
to initialize the array.

00:09:43.176 --> 00:09:46.006 A:middle
Now, arrays behave pretty much
as you would expect, you know,

00:09:46.006 --> 00:09:49.046 A:middle
I have subscripting, which
can be used in, you know,

00:09:49.386 --> 00:09:50.836 A:middle
subexpressions and so on.

00:09:51.806 --> 00:09:53.576 A:middle
But an important thing

00:09:53.846 --> 00:09:58.356 A:middle
about arrays is all their
accesses are balance checked.

00:09:59.106 --> 00:10:02.406 A:middle
This is part of Swift's
safe by default design.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.106 --> 00:10:02.406 A:middle
This is part of Swift's
safe by default design.

00:10:03.146 --> 00:10:04.636 A:middle
In a normal-running program,

00:10:05.316 --> 00:10:07.006 A:middle
execution would stop
at this point.

00:10:07.666 --> 00:10:09.286 A:middle
Since we're in the REPL,
we can keep on going,

00:10:09.286 --> 00:10:12.246 A:middle
but this is really kind of a
fundamental keystone of the,

00:10:12.246 --> 00:10:13.316 A:middle
of the Swift language.

00:10:15.226 --> 00:10:18.706 A:middle
Now, arrays are just like
any other type in Swift.

00:10:18.706 --> 00:10:20.026 A:middle
They have certain capabilities,

00:10:20.106 --> 00:10:22.876 A:middle
like computer properties that's
going to tell me the size

00:10:22.876 --> 00:10:26.986 A:middle
of the array, or methods
to remove and add elements.

00:10:28.536 --> 00:10:30.476 A:middle
And because arrays
are containers,

00:10:31.036 --> 00:10:33.696 A:middle
they can also be used
with this very generalized

00:10:33.696 --> 00:10:34.636 A:middle
for...in syntax.

00:10:35.036 --> 00:10:38.776 A:middle
It works for collections,
ranges of numbers, sequences,

00:10:39.286 --> 00:10:41.806 A:middle
and here I'm looping over
the values of the array

00:10:42.136 --> 00:10:42.966 A:middle
and printing them out.

00:10:43.736 --> 00:10:46.586 A:middle
And you'll notice I'm using
a very lightweight string

00:10:46.586 --> 00:10:48.606 A:middle
formatting called
string interpolation.

00:10:49.176 --> 00:10:52.246 A:middle
Essentially, I have a string
constant that I can just splat

00:10:52.246 --> 00:10:54.536 A:middle
in an expression that gets
converted into a string

00:10:54.766 --> 00:10:56.956 A:middle
and spliced into the rest
of the printed out string.

00:10:57.426 --> 00:10:59.846 A:middle
It's very really nice for doing
lightweight string formatting.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:01.836 --> 00:11:04.246 A:middle
Swift also has
batteries-included support

00:11:04.366 --> 00:11:07.376 A:middle
for dictionaries, and these
are also strungly typed.

00:11:08.116 --> 00:11:10.826 A:middle
Here, type for instance inferred
that I have a dictionary

00:11:10.876 --> 00:11:12.976 A:middle
that maps from strings
to doubles.

00:11:14.776 --> 00:11:17.576 A:middle
I can also use the for...in
syntax with them as well,

00:11:17.576 --> 00:11:21.676 A:middle
but in this case, I get a
key value pair all in one go,

00:11:21.766 --> 00:11:23.456 A:middle
if I wanted to print
it out all the values.

00:11:26.156 --> 00:11:27.046 A:middle
Let's move on to functions.

00:11:27.766 --> 00:11:29.786 A:middle
And you still see the
syntax looks very similar

00:11:29.786 --> 00:11:30.746 A:middle
to variable declarations

00:11:30.746 --> 00:11:32.756 A:middle
and you'll see there's
this reoccurring theme

00:11:32.756 --> 00:11:35.636 A:middle
in the language with the, where
the syntax is, it's simple.

00:11:35.636 --> 00:11:36.846 A:middle
It's composable.

00:11:36.846 --> 00:11:37.596 A:middle
It's very regular.

00:11:37.596 --> 00:11:38.596 A:middle
It's very easy to read.

00:11:39.446 --> 00:11:40.716 A:middle
So, we start out
with the fun keyword,

00:11:40.866 --> 00:11:42.906 A:middle
the name of the function,
its arguments,

00:11:43.186 --> 00:11:44.946 A:middle
in this case we're taking
an array of integers,

00:11:45.006 --> 00:11:47.266 A:middle
and then the return
value is at the end.

00:11:47.266 --> 00:11:49.946 A:middle
In this case, we're
returning an int.

00:11:50.886 --> 00:11:52.986 A:middle
This simple function
just loops and, you know,

00:11:52.986 --> 00:11:55.006 A:middle
it loops over the
array and sums up,

00:11:55.806 --> 00:11:57.626 A:middle
sums up the numbers
and returns them.

00:11:59.046 --> 00:12:01.236 A:middle
Call syntax looks just
as you would expect.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.046 --> 00:12:01.236 A:middle
Call syntax looks just
as you would expect.

00:12:02.366 --> 00:12:03.556 A:middle
This is a very simple example.

00:12:03.556 --> 00:12:05.686 A:middle
Let's say we wanted to
extend it, all right?

00:12:05.766 --> 00:12:06.906 A:middle
So, I'm, I'm doing
all this work,

00:12:06.906 --> 00:12:08.126 A:middle
I'm looping over the array.

00:12:08.576 --> 00:12:11.476 A:middle
Let's say I wanted to return
the average at the same time

00:12:11.516 --> 00:12:12.486 A:middle
as I'm computing the sum.

00:12:13.776 --> 00:12:15.396 A:middle
We can do that in
Swift via support

00:12:15.396 --> 00:12:19.816 A:middle
for multiple return values,
and all I have to do-

00:12:20.516 --> 00:12:24.536 A:middle
[ Applause ]

00:12:25.036 --> 00:12:27.356 A:middle
-is change the return
value to a tuple.

00:12:28.286 --> 00:12:30.686 A:middle
The rest of the function
looks pretty much as before,

00:12:31.416 --> 00:12:33.986 A:middle
except you see at the return
site we return a pair.

00:12:33.986 --> 00:12:38.246 A:middle
And so when we call this
function, we get a tuple back.

00:12:39.086 --> 00:12:41.856 A:middle
And if you notice at the
top, I put these labels,

00:12:42.246 --> 00:12:44.896 A:middle
sum and average, on
the tuple pieces.

00:12:45.826 --> 00:12:48.876 A:middle
It means I can access the
pieces of the tuple by name

00:12:49.876 --> 00:12:52.476 A:middle
and because the language has
powerful pattern matching,

00:12:52.976 --> 00:12:55.566 A:middle
I could just declare two new
variables, sum and average,

00:12:56.026 --> 00:12:58.946 A:middle
to decompose the value of the
return value all in one go.

00:12:59.516 --> 00:13:06.886 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.516 --> 00:13:06.886 A:middle
[ Applause ]

00:13:07.386 --> 00:13:10.576 A:middle
And of course, the language has
been crafted to work beautifully

00:13:10.906 --> 00:13:12.546 A:middle
with Cocoa and Cocoa Touch.

00:13:12.996 --> 00:13:15.886 A:middle
With this one line of code,
I can import in all the APIs

00:13:15.886 --> 00:13:18.376 A:middle
from the Cocoa framework
on OS X.

00:13:18.376 --> 00:13:20.666 A:middle
And I can immediately
start playing with it.

00:13:20.666 --> 00:13:22.666 A:middle
So, for example, I saw

00:13:22.666 --> 00:13:24.336 A:middle
in Yosemite we have
this new look and feel.

00:13:24.336 --> 00:13:26.846 A:middle
Let's take a peek at the
new default system font.

00:13:28.526 --> 00:13:31.756 A:middle
Here's what's going on here, is
I am accessing a class method

00:13:32.086 --> 00:13:35.266 A:middle
on NSFont that returns
me an object

00:13:35.266 --> 00:13:36.496 A:middle
for the default system font.

00:13:37.456 --> 00:13:40.276 A:middle
And so this is a real
object from Objective-C.

00:13:41.476 --> 00:13:44.046 A:middle
I can access properties
on it, call methods,

00:13:44.476 --> 00:13:45.676 A:middle
do everything that you expect.

00:13:46.896 --> 00:13:49.466 A:middle
Now, another important piece
of Cocoa are protocols,

00:13:49.536 --> 00:13:51.786 A:middle
and Swift supports
protocols beautifully.

00:13:52.796 --> 00:13:55.136 A:middle
Syntax is also very
regular and simple.

00:13:56.346 --> 00:13:59.036 A:middle
Here, for example, I'm
declaring a protocol scalable

00:13:59.566 --> 00:14:02.636 A:middle
that models the idea that a
graphical entity is scalable.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.566 --> 00:14:02.636 A:middle
that models the idea that a
graphical entity is scalable.

00:14:02.746 --> 00:14:04.566 A:middle
I should be able to, you
know, scale it up in size,

00:14:04.566 --> 00:14:07.496 A:middle
scale it down, and I can,
it defines a single method

00:14:07.706 --> 00:14:10.016 A:middle
that returns a new
value that's scaled.

00:14:11.236 --> 00:14:15.066 A:middle
And just like Objective-C, I can
retroactively add conformants

00:14:15.666 --> 00:14:19.876 A:middle
to a protocol, to a class, using
something called an extension.

00:14:20.386 --> 00:14:22.516 A:middle
They're similar to
categories in Objective-C

00:14:22.886 --> 00:14:23.866 A:middle
but a bit more powerful.

00:14:25.506 --> 00:14:27.936 A:middle
And you see, I've just
defined the method right there,

00:14:27.936 --> 00:14:29.896 A:middle
and now I can call it.

00:14:32.476 --> 00:14:36.526 A:middle
And so I've returned a font
that's twice the point size

00:14:36.876 --> 00:14:39.906 A:middle
as the original, all on
the fly, here in the REPL.

00:14:42.216 --> 00:14:44.926 A:middle
Now, also in Cocoa, we
haves structs, right?

00:14:44.926 --> 00:14:47.386 A:middle
Structs are simple data
types for aggregating data,

00:14:48.616 --> 00:14:49.926 A:middle
but despite being simple,

00:14:49.976 --> 00:14:51.876 A:middle
they're really powerful
in Swift.

00:14:52.756 --> 00:14:55.096 A:middle
Let's take a look at
our old friend, CGRect.

00:14:56.046 --> 00:14:58.166 A:middle
Now, many of you who have used
this API are probably used

00:14:58.166 --> 00:15:01.156 A:middle
to creating instances of
CGRect using CGRectMake.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.166 --> 00:15:01.156 A:middle
to creating instances of
CGRect using CGRectMake.

00:15:02.346 --> 00:15:05.916 A:middle
Well, in Swift, you can also
use just a uniform construction

00:15:05.956 --> 00:15:08.646 A:middle
syntax to construct
values in struct as well.

00:15:09.056 --> 00:15:12.326 A:middle
And here we see the actual
labels being put on the,

00:15:12.326 --> 00:15:14.136 A:middle
on the values that
we're initializing.

00:15:16.136 --> 00:15:21.636 A:middle
Now, looking at CGRect, wouldn't
it be great if it had a property

00:15:21.636 --> 00:15:24.126 A:middle
on an area that could tell
me the area of a rectangle?

00:15:24.736 --> 00:15:26.996 A:middle
You can't define
this in Objective-C.

00:15:26.996 --> 00:15:29.036 A:middle
Objective-C does not have
properties on structs.

00:15:29.906 --> 00:15:30.806 A:middle
But Swift does.

00:15:33.256 --> 00:15:36.996 A:middle
I can retroactively now
add this computer property

00:15:37.216 --> 00:15:39.676 A:middle
to the struct using
it in an extension.

00:15:40.296 --> 00:15:41.736 A:middle
This is what a computer
property look like.

00:15:41.736 --> 00:15:44.106 A:middle
It just looks like a variable
declaration with a bit

00:15:44.106 --> 00:15:47.116 A:middle
of code added on, on the side
for the value being computed.

00:15:48.646 --> 00:15:50.826 A:middle
And I just defined
it, and indeed,

00:15:50.996 --> 00:15:52.836 A:middle
laws of geometry have held up.

00:15:53.016 --> 00:15:56.446 A:middle
A 10 by 10 rectangle
indeed has an area of 100.

00:15:59.006 --> 00:16:01.816 A:middle
Now, once you have properties
and methods on structs,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.006 --> 00:16:01.816 A:middle
Now, once you have properties
and methods on structs,

00:16:01.816 --> 00:16:05.076 A:middle
why not have them conform
to protocols, all right?

00:16:06.056 --> 00:16:08.816 A:middle
And this is really, you know,
a really powerful concept.

00:16:08.816 --> 00:16:10.906 A:middle
So, I can also have
CGRect conform

00:16:10.906 --> 00:16:11.876 A:middle
to the scale of protocol.

00:16:11.876 --> 00:16:13.956 A:middle
It's a, it's kind of a, it's
a graphical entity as well,

00:16:15.736 --> 00:16:18.246 A:middle
and I could also, you know,
I can now call this method

00:16:18.246 --> 00:16:19.856 A:middle
and scale up the
rectangle I created.

00:16:19.856 --> 00:16:21.436 A:middle
Now I have a 20,
20 by 20 rectangle.

00:16:22.486 --> 00:16:25.746 A:middle
So, now we have uniform
capabilities between classes

00:16:25.746 --> 00:16:28.836 A:middle
and structs, methods,
properties, and protocols.

00:16:29.816 --> 00:16:32.726 A:middle
So, now I have the power to
write some really generic code.

00:16:34.136 --> 00:16:35.306 A:middle
Let's say I want to
write a function,

00:16:35.846 --> 00:16:37.236 A:middle
scale by sizing factor.

00:16:37.946 --> 00:16:41.146 A:middle
It takes an arrayable
array of scalable things

00:16:42.266 --> 00:16:44.406 A:middle
and it returns a new
array of the, you know,

00:16:44.406 --> 00:16:46.356 A:middle
those elements scaled
up by some factor.

00:16:47.536 --> 00:16:50.516 A:middle
I can use that, I can
implement this very easily

00:16:50.516 --> 00:16:53.876 A:middle
for both structs and
classes using generics.

00:16:55.196 --> 00:16:57.256 A:middle
A generic function
looks almost identical

00:16:57.256 --> 00:17:00.886 A:middle
to a regular function except
it has this additional bit of,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:57.256 --> 00:17:00.886 A:middle
to a regular function except
it has this additional bit of,

00:17:00.886 --> 00:17:02.806 A:middle
of type information
where I'm supposed

00:17:02.806 --> 00:17:04.955 A:middle
to find a placeholder type T.

00:17:05.715 --> 00:17:07.876 A:middle
And all that matters
is that T conforms

00:17:08.006 --> 00:17:09.955 A:middle
to the scalable protocol,
whatever it happens to be.

00:17:11.526 --> 00:17:13.636 A:middle
The rest of the function looks
pretty much as you expect.

00:17:13.955 --> 00:17:17.175 A:middle
It's going to take an array of
T, which, whatever T happens

00:17:17.175 --> 00:17:20.816 A:middle
to be when I call this function,
it takes the scaling factor

00:17:21.586 --> 00:17:23.935 A:middle
and returns in a
new array of Ts.

00:17:25.695 --> 00:17:27.496 A:middle
Now, all I want to do is I
want to create a new array

00:17:27.496 --> 00:17:28.986 A:middle
in which each element
is scaled up.

00:17:28.986 --> 00:17:33.186 A:middle
I'm going to use the functional
map algorithm on array,

00:17:33.976 --> 00:17:37.176 A:middle
which takes a clojure to do the
transformation on each element

00:17:37.576 --> 00:17:38.776 A:middle
when constructed in a new array.

00:17:38.836 --> 00:17:41.316 A:middle
The clojure syntax
looks like this.

00:17:41.316 --> 00:17:43.476 A:middle
It, it's akin to
blocks in Objective-C.

00:17:44.526 --> 00:17:48.216 A:middle
And we think clojures are so
important that we wanted them

00:17:48.216 --> 00:17:49.326 A:middle
to feel really great,

00:17:49.326 --> 00:17:51.306 A:middle
syntactically optimized
in a language.

00:17:52.086 --> 00:17:54.326 A:middle
So, if the clojure is the
last argument to the function

00:17:54.326 --> 00:17:57.376 A:middle
or method, you can use this
really selective trailing

00:17:57.376 --> 00:17:59.506 A:middle
clojure syntax where
you can omit the,

00:17:59.556 --> 00:18:01.286 A:middle
the parentheses around
the clojure.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.556 --> 00:18:01.286 A:middle
the parentheses around
the clojure.

00:18:02.926 --> 00:18:03.576 A:middle
And that's it.

00:18:03.576 --> 00:18:06.336 A:middle
That's my three-line
generic function.

00:18:08.466 --> 00:18:10.976 A:middle
I can use it now to scale
up an array of NSFonts.

00:18:12.416 --> 00:18:14.206 A:middle
They're twice the size of
the ones I created before.

00:18:15.496 --> 00:18:19.396 A:middle
Similarly, I can call the same
function and scale up an array

00:18:19.576 --> 00:18:21.986 A:middle
of structs, completely
different data types,

00:18:22.306 --> 00:18:24.096 A:middle
but they just conform to
the scalable protocol,

00:18:25.156 --> 00:18:26.366 A:middle
and it works as expected.

00:18:27.546 --> 00:18:30.576 A:middle
This uniform capability is
between structs and classes

00:18:30.576 --> 00:18:32.056 A:middle
with methods, properties,
and protocols.

00:18:32.056 --> 00:18:35.116 A:middle
This thing is going to really
finally change how expressive

00:18:35.446 --> 00:18:36.336 A:middle
your code can be.

00:18:36.336 --> 00:18:38.366 A:middle
And we can't wait to see
what you can build with it.

00:18:39.116 --> 00:18:41.456 A:middle
Now, this ends what I'm going
to show you in the REPL.

00:18:41.526 --> 00:18:43.076 A:middle
I'm going to switch the slides

00:18:43.076 --> 00:18:46.116 A:middle
and tell you a few more exciting
things about the Swift language.

00:18:53.676 --> 00:18:59.756 A:middle
OK. So, as we saw in the
REPL, in, it is really easy

00:18:59.756 --> 00:19:02.626 A:middle
to write natural
and expressive code


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.756 --> 00:19:02.626 A:middle
to write natural
and expressive code

00:19:02.626 --> 00:19:05.646 A:middle
in Swift while readily
tapping into some

00:19:05.646 --> 00:19:08.676 A:middle
of the language's most powerful
features, like generics.

00:19:09.566 --> 00:19:12.256 A:middle
And as you saw, it's really
crafted to work beautifully

00:19:12.676 --> 00:19:14.456 A:middle
with Cocoa and Cocoa touch.

00:19:15.676 --> 00:19:17.336 A:middle
Now, there are many advanced
features in the language

00:19:17.336 --> 00:19:19.326 A:middle
that I didn't talk
about in the REPL.

00:19:20.436 --> 00:19:22.626 A:middle
One of them of particular
importance that I wanted

00:19:22.626 --> 00:19:24.266 A:middle
to mention are modules.

00:19:25.416 --> 00:19:26.056 A:middle
What is a module?

00:19:27.196 --> 00:19:29.256 A:middle
It's a logical collection
of code

00:19:29.256 --> 00:19:31.656 A:middle
that is intended to
be built together.

00:19:31.706 --> 00:19:35.526 A:middle
So, for example, any framework
you build, any target you build

00:19:35.526 --> 00:19:39.176 A:middle
in Xcode, automatically gets
a module associated with it.

00:19:39.786 --> 00:19:44.256 A:middle
And one thing you get from
modules are implicit namespaces.

00:19:45.626 --> 00:19:48.076 A:middle
This means you no longer
have to prefix the name

00:19:48.076 --> 00:19:50.396 A:middle
of your classes anymore for fear

00:19:50.396 --> 00:19:51.976 A:middle
of them conflicting
with somebody else's.

00:19:52.516 --> 00:19:57.826 A:middle
[ Applause ]

00:19:58.326 --> 00:20:02.316 A:middle
Now, a really great
feature we did touch


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.326 --> 00:20:02.316 A:middle
Now, a really great
feature we did touch

00:20:02.316 --> 00:20:05.566 A:middle
on in the REPL demo were
Clojures, or non-S functions.

00:20:05.616 --> 00:20:09.836 A:middle
They're extremely powerful in
Swift, and they work beautifully

00:20:10.206 --> 00:20:12.506 A:middle
with blocks-based APIs in Cocoa.

00:20:13.116 --> 00:20:14.546 A:middle
And we think they're
so important

00:20:14.546 --> 00:20:16.816 A:middle
that we've syntactically
optimized them so that was

00:20:16.816 --> 00:20:19.096 A:middle
like those one-liners that
you want to write, you know,

00:20:19.096 --> 00:20:21.116 A:middle
to do something simple,
can be written

00:20:21.116 --> 00:20:25.036 A:middle
with very little code while
maintaining readability.

00:20:26.816 --> 00:20:29.786 A:middle
And because Cocoa-based,
you know,

00:20:29.786 --> 00:20:34.246 A:middle
blocks APIs in Objective-C will
reflect as Clojure-based APIs

00:20:34.246 --> 00:20:37.686 A:middle
in Swift, APIs

00:20:37.686 --> 00:20:40.686 A:middle
like dispatchasync
will read beautifully

00:20:40.686 --> 00:20:42.106 A:middle
with a trailing Clojure syntax.

00:20:42.396 --> 00:20:45.246 A:middle
In this case, dispatchasync
reads like control flow,

00:20:45.866 --> 00:20:49.046 A:middle
which is more how the API
was intended to be used.

00:20:49.046 --> 00:20:52.286 A:middle
So, we think this really changes
the readability of your code

00:20:52.286 --> 00:20:55.396 A:middle
and how you reason about it.

00:20:55.396 --> 00:20:59.036 A:middle
And perhaps the biggest
feature of Swift is

00:20:59.036 --> 00:21:02.766 A:middle
that it's fundamentally a
thin language under the hood


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.036 --> 00:21:02.766 A:middle
that it's fundamentally a
thin language under the hood

00:21:03.976 --> 00:21:07.146 A:middle
with much the functionality
not baked into the compiler

00:21:07.816 --> 00:21:10.626 A:middle
but defined in a
Core runtime library,

00:21:10.766 --> 00:21:12.576 A:middle
which itself is written
in Swift.

00:21:13.496 --> 00:21:16.246 A:middle
To give you an example of what
I mean, Core things like int

00:21:16.826 --> 00:21:19.906 A:middle
and array are defined
in this runtime library.

00:21:19.906 --> 00:21:21.406 A:middle
They're not baked
into the compiler.

00:21:22.816 --> 00:21:25.336 A:middle
Thus, the language is really
designed from the ground

00:21:25.336 --> 00:21:28.276 A:middle
up to be extensible,
composable, layerable,

00:21:28.276 --> 00:21:30.166 A:middle
to build new things out of it.

00:21:30.166 --> 00:21:35.146 A:middle
And we think this really
embraces the soul and spirit

00:21:35.526 --> 00:21:38.166 A:middle
of Cocoa and Cocoa
Touch, where rich APIs

00:21:38.166 --> 00:21:40.796 A:middle
and rich frameworks can
be combined together

00:21:40.796 --> 00:21:44.346 A:middle
to build really truly awesome
behaviors in technologies.

00:21:47.016 --> 00:21:49.986 A:middle
Now, the Swift language is full
of a ton of great features,

00:21:49.986 --> 00:21:50.616 A:middle
which we think are going

00:21:50.616 --> 00:21:55.186 A:middle
to fundamentally change how you
think about and craft your code.

00:21:56.306 --> 00:21:59.966 A:middle
But beyond that, we designed
the language with the intention

00:21:59.966 --> 00:22:00.836 A:middle
that it would be the basis


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.966 --> 00:22:00.836 A:middle
that it would be the basis

00:22:00.836 --> 00:22:03.706 A:middle
for truly fantastic
interactive tools.

00:22:05.356 --> 00:22:07.366 A:middle
In Xcode 6, we have
a new feature,

00:22:07.776 --> 00:22:09.006 A:middle
Interactive Playgrounds.

00:22:10.396 --> 00:22:12.306 A:middle
They're akin to the
REPL in that it's

00:22:12.366 --> 00:22:13.906 A:middle
like a lightweight
coding environment,

00:22:14.116 --> 00:22:16.816 A:middle
but it brings forth
the full capabilities

00:22:16.816 --> 00:22:20.246 A:middle
and rich experiences that we
can only deliver in Xcode.

00:22:21.346 --> 00:22:24.696 A:middle
And to show you more, I yield
the stage to Max Drukman.

00:22:25.516 --> 00:22:32.606 A:middle
[ Applause ]

00:22:33.106 --> 00:22:35.036 A:middle
&gt;&gt; Let me show you a little
bit of what you can do

00:22:35.276 --> 00:22:37.856 A:middle
with Playgrounds in Xcode 6.

00:22:38.446 --> 00:22:41.966 A:middle
So, I'm going to start
off with a new Playground.

00:22:45.656 --> 00:22:47.546 A:middle
I think I'll make
this a little bigger

00:22:48.086 --> 00:22:49.586 A:middle
so we have a little
room to roam.

00:22:50.456 --> 00:22:53.166 A:middle
Playgrounds start you out
with Cocoa already imported

00:22:53.166 --> 00:22:55.206 A:middle
and a string variable
for you to play with.

00:22:55.206 --> 00:22:58.486 A:middle
I'm going to change mine to
something a little more topical.

00:22:59.786 --> 00:23:02.376 A:middle
How about that?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.786 --> 00:23:02.376 A:middle
How about that?

00:23:02.376 --> 00:23:09.076 A:middle
Now I'm going to add, how
about a date constant?

00:23:09.156 --> 00:23:12.186 A:middle
Pretty simple stuff, but you
can see on the right side

00:23:12.186 --> 00:23:14.306 A:middle
of the editor, I'm
getting results

00:23:14.306 --> 00:23:15.726 A:middle
as I enter lines of code.

00:23:16.436 --> 00:23:18.256 A:middle
That is the results area.

00:23:18.396 --> 00:23:21.986 A:middle
I know it's a brilliant name,
but just like in the REPL,

00:23:22.256 --> 00:23:26.606 A:middle
as you enter code, it gets
evaluated and you get results.

00:23:27.536 --> 00:23:30.116 A:middle
So, if I were to do
something like style

00:23:30.116 --> 00:23:35.076 A:middle
that string, I get the result.

00:23:35.076 --> 00:23:36.186 A:middle
My string is styled.

00:23:36.506 --> 00:23:39.556 A:middle
Now, you don't have to take
my word for it because many

00:23:39.556 --> 00:23:42.846 A:middle
of the results in the
Playground can be Quick Looked.

00:23:43.826 --> 00:23:46.126 A:middle
The Quick Looks in the
playground are just like those

00:23:46.126 --> 00:23:47.146 A:middle
in the Xcode debugger.

00:23:48.466 --> 00:23:51.456 A:middle
You can even implement your
own for custom data types.

00:23:52.616 --> 00:23:55.276 A:middle
They're a great way
to see results

00:23:55.276 --> 00:23:58.736 A:middle
that aren't great candidates
for coming across in plain text,

00:23:58.886 --> 00:24:03.216 A:middle
like this attributed
string or images.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.886 --> 00:24:03.216 A:middle
like this attributed
string or images.

00:24:03.846 --> 00:24:06.896 A:middle
So, just like my
attributed string,

00:24:07.076 --> 00:24:11.256 A:middle
I can Quick Look these images,
but we've added a way for you

00:24:11.306 --> 00:24:14.236 A:middle
to see the results
of your Playground

00:24:14.366 --> 00:24:18.196 A:middle
in a more persistent fashion
by adding your results

00:24:18.666 --> 00:24:19.976 A:middle
to the Timeline Assistant.

00:24:20.526 --> 00:24:24.486 A:middle
Now, the Timeline
Assistant allows you to build

00:24:24.486 --> 00:24:27.256 A:middle
up a persistent representation
of the results

00:24:27.256 --> 00:24:30.246 A:middle
of your Playground so
you can really get a feel

00:24:30.476 --> 00:24:32.106 A:middle
for what your code is doing.

00:24:33.446 --> 00:24:36.956 A:middle
The next thing I'm going to do
is I'm going to mask that image

00:24:37.346 --> 00:24:39.316 A:middle
with a Bezier path
that I'll create.

00:24:43.016 --> 00:24:47.856 A:middle
Now, because Bezier paths are
created in multiple steps,

00:24:49.106 --> 00:24:55.596 A:middle
they're a great candidate for
visualizing in the timeline.

00:24:55.686 --> 00:24:58.676 A:middle
I can simply add each of
the steps to the timeline

00:24:58.996 --> 00:25:03.136 A:middle
and get a great sense of
how my path is constructed.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.996 --> 00:25:03.136 A:middle
and get a great sense of
how my path is constructed.

00:25:03.786 --> 00:25:06.276 A:middle
And it's especially good

00:25:06.576 --> 00:25:10.256 A:middle
for spotting how one
bad value can have

00:25:10.356 --> 00:25:11.896 A:middle
ripple-effect consequences.

00:25:12.396 --> 00:25:15.386 A:middle
I'm going to undo that one.

00:25:15.676 --> 00:25:17.696 A:middle
I think I'll get rid of
most of these, actually.

00:25:18.336 --> 00:25:20.926 A:middle
I'll just leave the
final result.

00:25:22.386 --> 00:25:28.016 A:middle
Now, as I said, I want to
mask my image with this path.

00:25:28.146 --> 00:25:29.176 A:middle
So, I'll do that here.

00:25:29.836 --> 00:25:32.896 A:middle
I'm also adding in my
attributed string to the mask

00:25:34.486 --> 00:25:36.796 A:middle
so that it's punched
out of the center.

00:25:37.426 --> 00:25:43.076 A:middle
So, the timeline is great for
getting a sense of how your code

00:25:43.076 --> 00:25:45.686 A:middle
and how your views are
doing, but it does more

00:25:45.686 --> 00:25:47.216 A:middle
than just present static views.

00:25:47.606 --> 00:25:51.856 A:middle
It can also render them live,
which is great for animation,

00:25:52.366 --> 00:25:53.806 A:middle
which is what I'm
going to do next.

00:25:55.016 --> 00:25:57.896 A:middle
To do that, I'll just import
a little bit more API.

00:25:59.536 --> 00:26:00.456 A:middle
See how simple this is?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.536 --> 00:26:00.456 A:middle
See how simple this is?

00:26:01.376 --> 00:26:02.556 A:middle
Especially when you
don't have to type.

00:26:04.796 --> 00:26:07.756 A:middle
And I add in a little code
that takes my two images,

00:26:08.086 --> 00:26:12.016 A:middle
one that's been masked, applies
it on top of the other one,

00:26:12.506 --> 00:26:14.776 A:middle
and makes it animate
with Core Animation.

00:26:15.446 --> 00:26:21.646 A:middle
Now, as Chris showed you
earlier, you can also move

00:26:21.646 --> 00:26:23.796 A:middle
around in time in the timeline.

00:26:24.666 --> 00:26:27.056 A:middle
So, I can move back
and I can scrub

00:26:27.056 --> 00:26:29.576 A:middle
around to really
get a good sense

00:26:29.576 --> 00:26:31.086 A:middle
of how my animation is working.

00:26:31.766 --> 00:26:37.026 A:middle
Now, the, the next thing I
want to do is I want to add

00:26:38.066 --> 00:26:40.986 A:middle
that date I created
earlier to my mask,

00:26:42.326 --> 00:26:47.846 A:middle
and I'll do that up here, and
we can all cross our fingers

00:26:47.846 --> 00:26:49.586 A:middle
as I type live onstage.

00:26:54.576 --> 00:26:56.256 A:middle
How about that?

00:26:57.586 --> 00:26:58.946 A:middle
So, well, hmm.

00:26:59.226 --> 00:27:00.976 A:middle
I, OK, so I've added my date,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.226 --> 00:27:00.976 A:middle
I, OK, so I've added my date,

00:27:00.976 --> 00:27:02.986 A:middle
but that doesn't
look all that great.

00:27:03.446 --> 00:27:06.346 A:middle
Let's see if I can
make that look better

00:27:06.346 --> 00:27:09.716 A:middle
by reducing the font size.

00:27:10.416 --> 00:27:12.686 A:middle
Well, that's an awfully
big date.

00:27:13.816 --> 00:27:16.356 A:middle
I think what I want to do is I
want to make that date shorter,

00:27:17.166 --> 00:27:20.306 A:middle
and I'm betting NSDate has
some help for me there.

00:27:21.506 --> 00:27:25.656 A:middle
So, as with any class in Xcode,
I can command click on the,

00:27:25.656 --> 00:27:27.476 A:middle
the name of that class
to jump to the header.

00:27:28.276 --> 00:27:30.386 A:middle
In this case, I'll
command double click

00:27:30.536 --> 00:27:31.796 A:middle
to open it in a new window.

00:27:32.446 --> 00:27:37.576 A:middle
Now, notice that this doesn't
look like an Objective-C header.

00:27:38.216 --> 00:27:40.516 A:middle
It isn't. It's Swift.

00:27:41.166 --> 00:27:44.866 A:middle
That's because Xcode
creates Swift versions

00:27:44.986 --> 00:27:47.806 A:middle
of Objective-C headers
for you, so you don't have

00:27:47.836 --> 00:27:48.696 A:middle
to translate [applause].

00:27:49.406 --> 00:27:49.806 A:middle
That's right.

00:27:54.226 --> 00:27:57.246 A:middle
So you don't have to translate
what you see in the header

00:27:57.246 --> 00:27:59.026 A:middle
to what you implement
in your code.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.236 --> 00:28:02.276 A:middle
Now, I have to come clean.

00:28:02.926 --> 00:28:05.556 A:middle
I don't know all that
much about NSDate.

00:28:06.666 --> 00:28:09.216 A:middle
So, looking at the header, well,

00:28:09.216 --> 00:28:10.756 A:middle
that's not really
doing enough for me.

00:28:11.506 --> 00:28:15.026 A:middle
Luckily, in Xcode, we have
lots of great sample code

00:28:15.026 --> 00:28:17.046 A:middle
and documentation
to help me out.

00:28:18.486 --> 00:28:24.006 A:middle
But wouldn't it be great if
you could combine the sort

00:28:24.006 --> 00:28:29.016 A:middle
of hands-on, do-it-yourself
style of sample code and the,

00:28:29.016 --> 00:28:33.036 A:middle
the sort of show-me-how-to-do-it
style of documentation?

00:28:33.646 --> 00:28:36.946 A:middle
Yes. Yes, it would.

00:28:38.586 --> 00:28:43.216 A:middle
That's why we created
Documentation Playgrounds.

00:28:45.516 --> 00:28:54.996 A:middle
[ Applause ]

00:28:55.496 --> 00:28:58.816 A:middle
Documentation Playgrounds
combine the best of both worlds.

00:28:59.176 --> 00:29:02.066 A:middle
Because it's a playground,
I can play.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.176 --> 00:29:02.066 A:middle
Because it's a playground,
I can play.

00:29:02.676 --> 00:29:04.166 A:middle
But because it's documentation,

00:29:04.236 --> 00:29:06.056 A:middle
I get adult supervision
[laughter].

00:29:09.026 --> 00:29:11.726 A:middle
So, here is a Documentation
Playground talking

00:29:11.726 --> 00:29:13.906 A:middle
about converting between
dates and strings,

00:29:15.036 --> 00:29:16.636 A:middle
and here's what I'm looking for.

00:29:16.636 --> 00:29:18.456 A:middle
It's talking about
date formatters.

00:29:18.516 --> 00:29:19.906 A:middle
I'm pretty sure that's
what I want.

00:29:20.716 --> 00:29:23.526 A:middle
And it even very
handily tells me

00:29:23.666 --> 00:29:26.776 A:middle
to try setting different
values for time and date style.

00:29:27.526 --> 00:29:31.776 A:middle
And even more handy, it even
gives me the enums to try.

00:29:33.076 --> 00:29:34.326 A:middle
So, let's see.

00:29:34.326 --> 00:29:37.816 A:middle
I'm betting short style is
what I'm after, so all I have

00:29:37.816 --> 00:29:40.236 A:middle
to do is copy and paste,

00:29:40.876 --> 00:29:43.406 A:middle
and I can see my result
change in the timeline.

00:29:43.756 --> 00:29:44.676 A:middle
That's getting close.

00:29:45.256 --> 00:29:47.456 A:middle
Let's try this one.

00:29:47.656 --> 00:29:50.006 A:middle
Awesome! That's exactly
what I'm looking for.

00:29:51.506 --> 00:29:53.376 A:middle
Don't you want all
documentation to work this way?

00:29:54.866 --> 00:29:59.856 A:middle
So, now I know how to format my
date, and it's a simple matter

00:29:59.856 --> 00:30:01.826 A:middle
of doing that in my Playground.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.856 --> 00:30:01.826 A:middle
of doing that in my Playground.

00:30:02.516 --> 00:30:05.996 A:middle
I'm going to do that by
replacing a bunch of this code

00:30:06.996 --> 00:30:12.186 A:middle
with some code that has
my shortened date in it.

00:30:13.076 --> 00:30:21.036 A:middle
Hello. And my, my
fancy, there you go.

00:30:22.236 --> 00:30:25.336 A:middle
There it is.

00:30:25.606 --> 00:30:28.646 A:middle
Now my view is looking
exactly like what I wanted.

00:30:29.696 --> 00:30:34.146 A:middle
That's a small taste of
Swift Playgrounds in Xcode 6.

00:30:34.556 --> 00:30:36.636 A:middle
We think you're going to
love playing with your code.

00:30:37.536 --> 00:30:38.346 A:middle
Back to you, Andreas.

00:30:39.516 --> 00:30:46.956 A:middle
[ Applause ]

00:30:47.456 --> 00:30:48.056 A:middle
&gt;&gt; Thank you, Max.

00:30:48.816 --> 00:30:50.306 A:middle
So, now that you
know a little bit

00:30:50.306 --> 00:30:52.306 A:middle
about what the Swift
coding language is,

00:30:52.446 --> 00:30:53.526 A:middle
how do you start using it?

00:30:54.136 --> 00:30:55.766 A:middle
Well, I made that
really easy for you.

00:30:56.686 --> 00:30:58.416 A:middle
Swift uses the same object model

00:30:58.576 --> 00:31:01.066 A:middle
and the same memory management
approach as Objective-C.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.576 --> 00:31:01.066 A:middle
and the same memory management
approach as Objective-C.

00:31:01.066 --> 00:31:05.606 A:middle
You can import all our system
APIs directly into Swift.

00:31:07.066 --> 00:31:09.716 A:middle
Foundation collections
are transparently bridged

00:31:10.026 --> 00:31:11.956 A:middle
to Swift language
arrays and dictionaries,

00:31:12.886 --> 00:31:13.736 A:middle
and we even went ahead

00:31:13.736 --> 00:31:16.356 A:middle
and modernized our
existing Objective-C APIs

00:31:16.736 --> 00:31:19.326 A:middle
so that they interact more
naturally for Swift code.

00:31:19.326 --> 00:31:22.766 A:middle
So, you can adopt
Swift at your own pace,

00:31:22.956 --> 00:31:24.556 A:middle
if you would like, file by file.

00:31:24.926 --> 00:31:27.046 A:middle
You can mix and match
Objective-C

00:31:27.046 --> 00:31:28.696 A:middle
and Swift in the same project.

00:31:30.786 --> 00:31:33.176 A:middle
We also wrote some great
documentation for you.

00:31:33.586 --> 00:31:36.436 A:middle
There's an entire new book
about Swift that you will find

00:31:36.436 --> 00:31:37.926 A:middle
in the iBookstore for free.

00:31:38.956 --> 00:31:41.436 A:middle
And we, of course, updated
our reference documentation

00:31:41.616 --> 00:31:44.826 A:middle
to cover all our APIs in
both Swift and Objective-C.

00:31:46.406 --> 00:31:48.056 A:middle
Now I know that all of
you guys really wanted

00:31:48.056 --> 00:31:51.536 A:middle
to be the first ones to submit
a Swift app to the App Store,

00:31:51.936 --> 00:31:53.786 A:middle
and I'm very sorry to
have to disappoint you,

00:31:53.856 --> 00:31:57.476 A:middle
but we've already done that
because, because this afternoon,

00:31:57.596 --> 00:32:00.946 A:middle
we're updating the WWDC app,
the app that you guys are using


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.596 --> 00:32:00.946 A:middle
we're updating the WWDC app,
the app that you guys are using

00:32:00.946 --> 00:32:02.336 A:middle
to get around here
at the conference,

00:32:02.686 --> 00:32:04.226 A:middle
with a version that uses Swift.

00:32:04.376 --> 00:32:06.246 A:middle
So, this language is
ready for you to use.

00:32:06.246 --> 00:32:06.796 A:middle
It's real.

00:32:08.506 --> 00:32:10.886 A:middle
Now, one thing that is really
important to understand is

00:32:10.886 --> 00:32:13.686 A:middle
that we are planning to evolve
this language very rapidly.

00:32:13.886 --> 00:32:15.926 A:middle
Among other things, we really
want to hear what you have

00:32:15.926 --> 00:32:17.916 A:middle
to say about it and
incorporate your feedback

00:32:17.916 --> 00:32:18.846 A:middle
as much as possible.

00:32:19.586 --> 00:32:22.216 A:middle
And so we are not going to
promise source compatibility

00:32:22.376 --> 00:32:23.556 A:middle
between Xcode releases.

00:32:24.546 --> 00:32:27.586 A:middle
Some source conversion might be
necessary, and we'll do our best

00:32:27.586 --> 00:32:30.176 A:middle
to provide converters on the
way if we make major changes.

00:32:30.496 --> 00:32:34.066 A:middle
But the one thing we will
promise is binary compatibility

00:32:34.066 --> 00:32:35.986 A:middle
for your Swift apps because
we want you to be able

00:32:35.986 --> 00:32:37.466 A:middle
to try it without delay.

00:32:38.006 --> 00:32:41.236 A:middle
So, when we ship Xcode 6 later
this year, you will be able

00:32:41.236 --> 00:32:43.096 A:middle
to submit your Swift
apps to the App Store.

00:32:44.406 --> 00:32:47.306 A:middle
And they will run, your apps
will run on iOS 7 and later,

00:32:47.826 --> 00:32:49.316 A:middle
and OS X Mavericks and later.

00:32:49.536 --> 00:32:52.226 A:middle
So, Swift apps are not
limited to iOS 8 and Yosemite.

00:32:53.516 --> 00:33:00.186 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:53.516 --> 00:33:00.186 A:middle
[ Applause ]

00:33:00.686 --> 00:33:02.866 A:middle
So, we are, as you can
probably imagine, really,

00:33:02.866 --> 00:33:04.176 A:middle
really excited about Swift.

00:33:04.336 --> 00:33:06.676 A:middle
We think it's quickly going to
become the programming language

00:33:06.676 --> 00:33:09.376 A:middle
of choice for our own
code as well as your apps.

00:33:09.866 --> 00:33:12.466 A:middle
We're looking very much forward
to hear what you think about.

00:33:14.556 --> 00:33:16.116 A:middle
Next we're going to
talk about gaming.

00:33:16.286 --> 00:33:17.666 A:middle
This is another technology area

00:33:17.666 --> 00:33:19.236 A:middle
that you are pushing
on very strongly.

00:33:19.236 --> 00:33:22.866 A:middle
We have many great techno-,
technology advances to announce

00:33:23.086 --> 00:33:24.316 A:middle
in this area this year.

00:33:24.456 --> 00:33:26.006 A:middle
To tell you more about
it, I'm going to hand

00:33:26.006 --> 00:33:27.866 A:middle
over to Jeff Schtie
[assumed spelling].

00:33:28.516 --> 00:33:32.556 A:middle
[ Applause ]

00:33:33.056 --> 00:33:33.806 A:middle
&gt;&gt; Thank you, Andreas.

00:33:34.486 --> 00:33:38.936 A:middle
We have an amazing games
technology ecosystem with APIs,

00:33:39.826 --> 00:33:41.576 A:middle
tools, and hardware
that allow you

00:33:41.576 --> 00:33:43.876 A:middle
to all build brilliant games.

00:33:44.746 --> 00:33:45.326 A:middle
Let's take a look.

00:33:46.826 --> 00:33:47.476 A:middle
So, Game Center.

00:33:48.026 --> 00:33:50.296 A:middle
It's our social gaming
network providing features

00:33:50.296 --> 00:33:54.776 A:middle
like achievements, leaderboards,
friends, and multiplayer.

00:33:56.156 --> 00:33:58.376 A:middle
Many of you are already taking
advantage of Game Center

00:33:58.376 --> 00:33:59.636 A:middle
to differentiate your game,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:00.046 --> 00:34:02.806 A:middle
and we have great
engagement with Game Center.

00:34:02.806 --> 00:34:05.166 A:middle
In fact, last month we had

00:34:05.166 --> 00:34:08.576 A:middle
over 130 million
monthly active users.

00:34:08.576 --> 00:34:10.856 A:middle
So, that's Game Center.

00:34:11.966 --> 00:34:12.676 A:middle
Game Controllers.

00:34:13.266 --> 00:34:16.966 A:middle
Last year at WWDC, we
introduced Game Controllers,

00:34:16.966 --> 00:34:18.606 A:middle
the Game Controller MFI program

00:34:18.866 --> 00:34:22.476 A:middle
and the corresponding
APIs for iOS and OS X.

00:34:23.746 --> 00:34:25.946 A:middle
One year later, Game Controllers
are doing really well.

00:34:26.946 --> 00:34:30.005 A:middle
Thousands of games taking
advantage of Game Controllers

00:34:30.005 --> 00:34:32.886 A:middle
for both the best of
touch and button inputs.

00:34:34.275 --> 00:34:38.146 A:middle
We have Game Controller demo
stations at Apple Stores

00:34:38.146 --> 00:34:39.946 A:middle
like the one right
here in San Francisco,

00:34:39.946 --> 00:34:43.966 A:middle
and we're introducing
controller forwarding.

00:34:44.485 --> 00:34:46.886 A:middle
So, what is controller
forwarding?

00:34:47.846 --> 00:34:50.666 A:middle
Now you can take an iOS device,
snap it into a Game Controller,

00:34:50.876 --> 00:34:54.636 A:middle
and then use the integrated
inputs of both buttons

00:34:55.306 --> 00:34:57.326 A:middle
and motion to control
iPads and Macs.

00:34:57.486 --> 00:34:58.306 A:middle
It's pretty cool.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:03.106 --> 00:35:03.996 A:middle
So that's Game Controllers.

00:35:04.926 --> 00:35:06.576 A:middle
So now let's talk about
our graphics APIs.

00:35:08.756 --> 00:35:11.936 A:middle
We have SpriteKit, we have add,
we're adding many new features

00:35:11.936 --> 00:35:13.486 A:middle
to both SpriteKit and SceneKit.

00:35:14.256 --> 00:35:17.396 A:middle
We're bringing SceneKit
to iOS, and of course,

00:35:17.396 --> 00:35:20.816 A:middle
we're very excited
about our low-overhead,

00:35:21.426 --> 00:35:23.226 A:middle
highly optimized Metal API.

00:35:26.016 --> 00:35:27.896 A:middle
So, new for this
year is a major push

00:35:27.896 --> 00:35:30.376 A:middle
to making building casual
games easier than ever.

00:35:30.376 --> 00:35:33.416 A:middle
And SpriteKit is
our 2D graphics API.

00:35:34.046 --> 00:35:37.396 A:middle
We're introducing new features
like per pixel collisions

00:35:37.716 --> 00:35:41.846 A:middle
in physics, field
forces, inverse kinematics

00:35:41.846 --> 00:35:44.066 A:middle
with constraints, and,
of course, Shaders.

00:35:46.016 --> 00:35:49.466 A:middle
SceneKit is kind of like
SpriteKit but for 3D,

00:35:49.466 --> 00:35:54.176 A:middle
making it simpler than ever
to produce 3D games, and,

00:35:54.176 --> 00:35:55.606 A:middle
of course, it's now on iOS.

00:35:57.046 --> 00:36:01.026 A:middle
New for this year in
SceneKit, you, sorry.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:57.046 --> 00:36:01.026 A:middle
New for this year in
SceneKit, you, sorry.

00:36:03.396 --> 00:36:05.986 A:middle
SceneKit has everything you
would expect from a 3D graphics,

00:36:05.986 --> 00:36:10.196 A:middle
high-level 3D graphics API, like
the ability to load, manipulate,

00:36:10.196 --> 00:36:12.096 A:middle
and render complex 3D scenes.

00:36:12.096 --> 00:36:14.626 A:middle
It has some of the
same great new features

00:36:14.856 --> 00:36:15.896 A:middle
as we have on SpriteKit.

00:36:16.606 --> 00:36:20.706 A:middle
But what's really cool is
you can integrate SceneKit

00:36:20.706 --> 00:36:21.396 A:middle
and SpriteKit.

00:36:21.776 --> 00:36:24.866 A:middle
You can take a 3D object
from SceneKit and use

00:36:24.866 --> 00:36:27.196 A:middle
that as a sprite in
SpriteKit with no overhead.

00:36:28.156 --> 00:36:31.866 A:middle
You can take the output of
a SpriteKit scene and use it

00:36:31.866 --> 00:36:33.596 A:middle
as a texter in SceneKit.

00:36:34.786 --> 00:36:35.706 A:middle
It's really, really cool.

00:36:35.706 --> 00:36:41.506 A:middle
So, I'd like to invite Jacques
up to help me show you a demo

00:36:41.506 --> 00:36:42.916 A:middle
of both SceneKit and SpriteKit.

00:36:44.516 --> 00:36:52.236 A:middle
[ Applause ]

00:36:52.736 --> 00:36:53.436 A:middle
So, let's say you want

00:36:53.436 --> 00:36:55.386 A:middle
to use the built-in Physics
system for collisions.

00:36:55.956 --> 00:36:57.656 A:middle
Last year, you may have
gotten something like this.

00:36:58.876 --> 00:37:01.466 A:middle
So, that's OK, but
it's not great.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.876 --> 00:37:01.466 A:middle
So, that's OK, but
it's not great.

00:37:02.026 --> 00:37:02.976 A:middle
So, why is this?

00:37:03.206 --> 00:37:05.966 A:middle
Well, if we turn on Physics
Debug Draw, what we'll see is

00:37:06.166 --> 00:37:09.586 A:middle
that the Physics bounding
box, boxes do not correspond

00:37:09.586 --> 00:37:11.116 A:middle
to the exact shape
of the sprites.

00:37:12.796 --> 00:37:15.896 A:middle
So, new for this year, you can
turn on perfect cell collisions,

00:37:16.176 --> 00:37:18.956 A:middle
and now SpriteKit can use
the sprites alpha mask

00:37:20.266 --> 00:37:22.256 A:middle
to create pixel-accurate
collisions.

00:37:22.986 --> 00:37:25.426 A:middle
This allows you to create
complex interactions

00:37:25.696 --> 00:37:28.096 A:middle
and build things like
gears or even machines.

00:37:31.866 --> 00:37:33.106 A:middle
We've also added field forces.

00:37:33.636 --> 00:37:35.506 A:middle
Here you see an, an
attractor interacting

00:37:35.506 --> 00:37:37.166 A:middle
with the sprites in the scene.

00:37:38.566 --> 00:37:40.476 A:middle
We can add a repulser and
see how the tube field forces

00:37:40.476 --> 00:37:41.846 A:middle
interact together
with the sprites,

00:37:41.846 --> 00:37:45.106 A:middle
and we've added many real
and imaginary field forces

00:37:45.106 --> 00:37:48.446 A:middle
like directional gravity,
black holes, magnets,

00:37:48.956 --> 00:37:50.876 A:middle
repulsers, and spring forces.

00:37:54.576 --> 00:37:55.936 A:middle
And, of course, we have
everything you need

00:37:56.136 --> 00:37:57.066 A:middle
for dynamic lighting.

00:37:58.166 --> 00:38:01.286 A:middle
One AB, here's a basic scene kit
scene and one API call can turn


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.166 --> 00:38:01.286 A:middle
One AB, here's a basic scene kit
scene and one API call can turn

00:38:01.286 --> 00:38:04.976 A:middle
on lighting, and of course,
you can select the object

00:38:04.976 --> 00:38:06.486 A:middle
in your scene which you'd
like to cast shadows.

00:38:09.806 --> 00:38:11.576 A:middle
And if you want to take
this to the next level,

00:38:11.576 --> 00:38:12.586 A:middle
you can add normal maps.

00:38:14.916 --> 00:38:17.456 A:middle
So, what we've done here,
with a single API call,

00:38:17.456 --> 00:38:19.616 A:middle
we've turned on normal maps.

00:38:19.616 --> 00:38:21.666 A:middle
SpriteKit uses the
existing artwork

00:38:21.836 --> 00:38:23.976 A:middle
to generate a normal map
automatically, so there's,

00:38:23.976 --> 00:38:25.406 A:middle
no extra art was added here.

00:38:26.006 --> 00:38:27.906 A:middle
This kind of, this
kind of dynamic,

00:38:27.906 --> 00:38:30.056 A:middle
dramatic element can
really add to your games.

00:38:33.346 --> 00:38:34.546 A:middle
So, let's take a look
at the integration

00:38:34.546 --> 00:38:35.736 A:middle
of SpriteKit with SceneKit.

00:38:36.156 --> 00:38:39.106 A:middle
So, here you have a SpriteKit
application you may recall

00:38:39.106 --> 00:38:39.726 A:middle
from last year.

00:38:39.726 --> 00:38:43.136 A:middle
What you can do now is take
a SceneKit node and put it

00:38:43.136 --> 00:38:45.866 A:middle
into the, into the
scene as a 3D object.

00:38:47.036 --> 00:38:49.256 A:middle
That, that allows
with no overhead

00:38:49.316 --> 00:38:50.736 A:middle
to get a, a tremendous result.

00:38:50.836 --> 00:38:52.636 A:middle
Here we've replaced
both the hero

00:38:52.636 --> 00:38:54.446 A:middle
and the alien with 3D objects.

00:38:55.136 --> 00:38:56.526 A:middle
So what does this
allow you to do?

00:38:56.526 --> 00:38:58.096 A:middle
You can design your game in 2D.

00:38:58.266 --> 00:39:00.896 A:middle
You can set up your complex
interactions all in 2D,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:58.266 --> 00:39:00.896 A:middle
You can set up your complex
interactions all in 2D,

00:39:01.006 --> 00:39:02.496 A:middle
then you could add
your 3D assets

00:39:02.496 --> 00:39:04.406 A:middle
in to give your game
that extra pop.

00:39:04.616 --> 00:39:07.496 A:middle
So, that's SceneKit
with a SpriteKit.

00:39:08.796 --> 00:39:10.186 A:middle
Now, let's take a,
take a look at some

00:39:10.186 --> 00:39:11.286 A:middle
of the features of SceneKit.

00:39:11.586 --> 00:39:15.966 A:middle
As I said, SceneKit is kind
of like SpriteKit but for 3D.

00:39:15.966 --> 00:39:18.146 A:middle
It makes it simpler than
ever to build 3D games.

00:39:18.146 --> 00:39:20.376 A:middle
Now, let's take a tour
of some of the features.

00:39:20.876 --> 00:39:25.106 A:middle
Here we have an example of,
the built-in 3D Physics Engine.

00:39:25.106 --> 00:39:27.776 A:middle
You have the blocks and balls
colliding with each other

00:39:27.776 --> 00:39:28.956 A:middle
and also with the room itself.

00:39:29.696 --> 00:39:32.566 A:middle
This is, game is using the
3D, built-in 3D Physics Engine

00:39:32.566 --> 00:39:34.406 A:middle
and it's obviously
fully interactive.

00:39:34.736 --> 00:39:37.286 A:middle
And we have 3D field forces.

00:39:38.076 --> 00:39:40.536 A:middle
Here you have an attracter
in 3D, which is kind

00:39:40.536 --> 00:39:43.866 A:middle
of like a space vacuum creating
this really cool effect.

00:39:44.006 --> 00:39:46.406 A:middle
What's amazing is you can
just add a simple attracter

00:39:46.406 --> 00:39:48.676 A:middle
to your scene to create
this great effect.

00:39:49.276 --> 00:39:50.316 A:middle
No other work was necessary.

00:39:54.336 --> 00:39:56.576 A:middle
And you can combine
SceneKit and SpriteKit.

00:39:57.686 --> 00:39:59.036 A:middle
So, what are you seeing here?

00:39:59.616 --> 00:40:02.116 A:middle
So, the paintballs are
being shot into the scene


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.616 --> 00:40:02.116 A:middle
So, the paintballs are
being shot into the scene

00:40:02.116 --> 00:40:05.016 A:middle
as 3D objects using the 3D
Collision System to collide

00:40:05.046 --> 00:40:06.786 A:middle
with the Taurus,
another 3D object.

00:40:07.216 --> 00:40:10.896 A:middle
We then take a paint splotch
sprite, say that 3 times fast,

00:40:11.436 --> 00:40:14.586 A:middle
and paste it into a SpriteKit
canvas off screen you don't see.

00:40:14.836 --> 00:40:17.796 A:middle
We take the results of that and
texture map it onto the Taurus,

00:40:18.336 --> 00:40:20.586 A:middle
so it creates this really
convincing, cool combination

00:40:20.586 --> 00:40:23.356 A:middle
of SpriteKit and SceneKit,
made possible by the,

00:40:23.356 --> 00:40:24.886 A:middle
the integration of these APIs.

00:40:27.456 --> 00:40:28.886 A:middle
And finally, of course,
you have shaders.

00:40:28.936 --> 00:40:31.996 A:middle
We have vertex, surface,
and fragment shaders.

00:40:31.996 --> 00:40:34.386 A:middle
Here you have a simple
vertex shader,

00:40:34.386 --> 00:40:36.976 A:middle
which is manipulating the
model's geometry in real time.

00:40:38.246 --> 00:40:41.196 A:middle
We have surface shaders where
you can effect the surface

00:40:41.546 --> 00:40:44.146 A:middle
and lighting properties
of our model,

00:40:44.146 --> 00:40:45.766 A:middle
here creating this
cool caustic effect.

00:40:47.296 --> 00:40:49.046 A:middle
And finally, fragment shaders,

00:40:49.046 --> 00:40:51.366 A:middle
which can create amazing
pixel-level effects

00:40:51.636 --> 00:40:53.096 A:middle
like this glass globe
effect here.

00:40:53.096 --> 00:40:56.106 A:middle
So, that's seeing a
couple of shaders.

00:40:57.956 --> 00:40:59.066 A:middle
Now, I'd like to take a minute

00:40:59.066 --> 00:41:02.956 A:middle
to have Jacques show you how
easy it is to enable some


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.066 --> 00:41:02.956 A:middle
to have Jacques show you how
easy it is to enable some

00:41:02.956 --> 00:41:04.636 A:middle
of these features
using our Xcode tools.

00:41:04.946 --> 00:41:06.186 A:middle
&gt;&gt; Thanks, Jeff.

00:41:07.336 --> 00:41:10.116 A:middle
So, new in Xcode 6
are built-in tools

00:41:10.356 --> 00:41:11.516 A:middle
for SpriteKit and SceneKit.

00:41:11.936 --> 00:41:13.386 A:middle
You can edit content
right within Xcode.

00:41:13.386 --> 00:41:15.966 A:middle
I'm going to give you a
quick tour of that right now.

00:41:19.566 --> 00:41:22.356 A:middle
So, here we have the
SpriteKit editor in Xcode 6.

00:41:22.926 --> 00:41:25.536 A:middle
You see the per-pixel scene we
had from the iPad demo earlier.

00:41:25.536 --> 00:41:28.816 A:middle
I'm going to make some quick
edits to it in edit mode,

00:41:28.926 --> 00:41:31.576 A:middle
which I'm currently in, and then
I'm going to switch to simulate

00:41:31.576 --> 00:41:33.426 A:middle
in simulate mode to
see the physics live.

00:41:33.426 --> 00:41:37.206 A:middle
So, I'm going to go over here on
the right to my media library,

00:41:37.596 --> 00:41:39.796 A:middle
which includes all the
images inside my project.

00:41:39.796 --> 00:41:42.626 A:middle
I'm going to drop one of
these squirrels into here,

00:41:42.626 --> 00:41:47.316 A:middle
and I'm going to place it
using the new snap-in feature

00:41:48.236 --> 00:41:51.636 A:middle
and then I'm going
to simulate this.

00:41:52.456 --> 00:41:55.106 A:middle
Well, this behaves
pretty much as expected

00:41:55.106 --> 00:41:58.346 A:middle
because the blue rectangles
are the physics body outlines,

00:41:58.526 --> 00:41:59.716 A:middle
so this is not falling over.

00:41:59.716 --> 00:42:03.796 A:middle
I'm going to correct that by
turning on per-pixel physics,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.716 --> 00:42:03.796 A:middle
I'm going to correct that by
turning on per-pixel physics,

00:42:04.396 --> 00:42:07.316 A:middle
which is as simple as selecting
the objects I want to use,

00:42:07.726 --> 00:42:09.276 A:middle
changing their physics
definition

00:42:09.276 --> 00:42:10.716 A:middle
to use the alpha mask.

00:42:11.946 --> 00:42:16.236 A:middle
Then I'm going to simulate again
and the right thing happens.

00:42:17.936 --> 00:42:19.336 A:middle
OK, well that was easy.

00:42:19.816 --> 00:42:23.026 A:middle
Let's move on to showing you
the new feature of field forces.

00:42:23.966 --> 00:42:27.476 A:middle
So, field forces are super
easy to use inside Xcode,

00:42:27.966 --> 00:42:29.966 A:middle
and I implore you to try them
out and play with them here,

00:42:29.966 --> 00:42:32.206 A:middle
and it's one of the
best places to do that.

00:42:32.206 --> 00:42:34.636 A:middle
So, I'm going to drag a
theoretical field in here,

00:42:35.166 --> 00:42:36.016 A:middle
called a spring field,

00:42:37.086 --> 00:42:39.296 A:middle
which acts as if there
was a spring connected

00:42:39.336 --> 00:42:41.426 A:middle
between the field
and any of the nodes

00:42:41.426 --> 00:42:42.376 A:middle
that I'm going to enable it on.

00:42:43.466 --> 00:42:44.766 A:middle
So, I'm going to pick
some of these balls here.

00:42:44.766 --> 00:42:47.136 A:middle
I'm going to enable the
spring field on them

00:42:47.776 --> 00:42:51.136 A:middle
by setting their physics field
mask to something other than 0.

00:42:51.136 --> 00:42:52.956 A:middle
I've done that.

00:42:52.956 --> 00:42:54.656 A:middle
Now I'm going to simulate this.

00:42:54.656 --> 00:42:57.236 A:middle
Well, you notice they all
drag towards the center

00:42:57.236 --> 00:43:00.326 A:middle
of the spring there, and you
notice also as they collided,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:57.236 --> 00:43:00.326 A:middle
of the spring there, and you
notice also as they collided,

00:43:00.756 --> 00:43:02.796 A:middle
they collided with the
inert pulser not enabled

00:43:02.796 --> 00:43:03.486 A:middle
on the field mask.

00:43:04.196 --> 00:43:06.436 A:middle
So, they actually,
full physics running,

00:43:06.436 --> 00:43:08.896 A:middle
and the field only affecting
the balls I selected.

00:43:10.076 --> 00:43:11.356 A:middle
Super easy and fun to use.

00:43:13.086 --> 00:43:16.246 A:middle
Next up, I want to
take you through how

00:43:16.246 --> 00:43:18.526 A:middle
to put 3D content inside
your SpriteKit scene.

00:43:19.026 --> 00:43:20.886 A:middle
So, just bear with me while
I go through the steps here.

00:43:21.606 --> 00:43:22.166 A:middle
All right.

00:43:22.166 --> 00:43:26.886 A:middle
I'm going to drag
that ship in and dump.

00:43:27.926 --> 00:43:32.256 A:middle
All right, so that was
step 1, 2, and that's it.

00:43:32.256 --> 00:43:33.196 A:middle
You can see it's 3D.

00:43:33.366 --> 00:43:36.346 A:middle
I'm going to try that again
in case you missed it.

00:43:37.626 --> 00:43:39.306 A:middle
So, here we go.

00:43:39.306 --> 00:43:40.706 A:middle
An alien. OK.

00:43:41.156 --> 00:43:42.826 A:middle
So, step 1, that's
everything you need.

00:43:43.516 --> 00:43:45.136 A:middle
So, this is just a
quick preview of some

00:43:45.136 --> 00:43:46.896 A:middle
of the great new features
we've added to SpriteKit

00:43:46.896 --> 00:43:48.206 A:middle
and SceneKit in Xcode 6.

00:43:48.866 --> 00:43:49.396 A:middle
Thank you so much.

00:43:49.396 --> 00:43:50.976 A:middle
Back to Jeff.

00:43:51.516 --> 00:43:56.656 A:middle
[ Applause ]

00:43:57.156 --> 00:43:57.876 A:middle
&gt;&gt; So, thank you, Jacques.

00:43:58.366 --> 00:44:01.186 A:middle
So, that was some of our
high-level, high-performance,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:58.366 --> 00:44:01.186 A:middle
So, that was some of our
high-level, high-performance,

00:44:01.186 --> 00:44:03.516 A:middle
super-efficient 2D
and 3D games API.

00:44:04.416 --> 00:44:06.406 A:middle
Now, let's go from
the high-level right

00:44:06.406 --> 00:44:07.326 A:middle
down to the GPU.

00:44:08.636 --> 00:44:11.386 A:middle
We've been optimizing the
heck out of the graphics stack

00:44:11.856 --> 00:44:14.666 A:middle
with a new, low-overhead
API Metal.

00:44:15.206 --> 00:44:16.086 A:middle
So, why is that?

00:44:16.086 --> 00:44:17.166 A:middle
What, what does that give you?

00:44:18.126 --> 00:44:20.646 A:middle
Well, many games want to
run at 60 frames per second.

00:44:22.216 --> 00:44:24.966 A:middle
So, a little bit of math
shows you that you have a bit

00:44:24.966 --> 00:44:27.406 A:middle
over 16 milliseconds
for every frame.

00:44:28.266 --> 00:44:31.576 A:middle
We put that on a timeline, what
we can see is that you have

00:44:31.626 --> 00:44:33.466 A:middle
to get all your application
work done,

00:44:34.126 --> 00:44:37.196 A:middle
you have to issue your drawing
calls, and the system framer has

00:44:37.196 --> 00:44:39.506 A:middle
to turn those drawing
calls into GPU commands all

00:44:39.506 --> 00:44:42.786 A:middle
within that 16 milliseconds or
you'll start to drop frames.

00:44:43.216 --> 00:44:46.636 A:middle
And of course that's just one of
a number of frames you have to,

00:44:46.636 --> 00:44:49.456 A:middle
you have to produce to make a
truly interactive experience.

00:44:51.356 --> 00:44:52.716 A:middle
So, let's expand
that first frame out.

00:44:53.496 --> 00:44:54.746 A:middle
You see, there's
two distinct parts.

00:44:54.746 --> 00:44:57.066 A:middle
The first part is the
application piece.

00:44:57.446 --> 00:45:00.736 A:middle
The second part is that system
framework, that GPU API.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:57.446 --> 00:45:00.736 A:middle
The second part is that system
framework, that GPU API.

00:45:01.316 --> 00:45:03.126 A:middle
Well, Metal is super-efficient

00:45:03.176 --> 00:45:05.576 A:middle
at reducing the second
part to the bare minimum.

00:45:05.576 --> 00:45:09.326 A:middle
So, what this gives
you is more time.

00:45:09.956 --> 00:45:12.366 A:middle
More time for AI,
more time for physics,

00:45:12.746 --> 00:45:14.116 A:middle
more time for more drawing,

00:45:14.456 --> 00:45:17.096 A:middle
more time to make your
game even more brilliant.

00:45:19.116 --> 00:45:23.396 A:middle
So, Metal allows you to
unlock the power of the GPU.

00:45:23.396 --> 00:45:26.706 A:middle
It gives you easy
access and full control

00:45:26.706 --> 00:45:27.806 A:middle
over the rendering pipeline.

00:45:27.806 --> 00:45:33.256 A:middle
It has features like the direct
control over the creation

00:45:33.466 --> 00:45:35.706 A:middle
and encoding of GPU
command buffers.

00:45:36.316 --> 00:45:38.036 A:middle
It also provides a
unified shading language

00:45:38.036 --> 00:45:40.736 A:middle
for both graphics and compute
with offline compilation.

00:45:41.376 --> 00:45:46.846 A:middle
As you saw this morning,
Unity, Crytek, Epic Games,

00:45:46.846 --> 00:45:49.786 A:middle
and Electronic Arts have all
committed to supporting Metal,

00:45:50.366 --> 00:45:52.666 A:middle
and today we have
Johan Andersson

00:45:53.136 --> 00:45:55.616 A:middle
from Electronic Arts here to
show us what they've been able

00:45:55.616 --> 00:45:58.466 A:middle
to do with their Frostbite
engine on top of Metal.

00:45:58.996 --> 00:45:59.336 A:middle
Johan.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:00.516 --> 00:46:06.506 A:middle
[ Applause ]

00:46:07.006 --> 00:46:07.316 A:middle
Welcome.

00:46:08.556 --> 00:46:09.056 A:middle
&gt;&gt; Thanks, Jeff.

00:46:09.476 --> 00:46:10.206 A:middle
It's really great to be here.

00:46:11.026 --> 00:46:16.146 A:middle
I'm one of those first-time Mac
and iOS developers, so hello.

00:46:17.966 --> 00:46:20.486 A:middle
We've been building for
the last couple of weeks

00:46:20.556 --> 00:46:23.296 A:middle
and you render using Metal
for our game engine Frostbite.

00:46:24.636 --> 00:46:26.686 A:middle
Well, our goal with
using Metal, this new,

00:46:26.686 --> 00:46:30.166 A:middle
low-overhead graphics API, is
to try and enable the wide set

00:46:30.166 --> 00:46:32.576 A:middle
of capabilities of our
Frostbite engine on iOS.

00:46:33.646 --> 00:46:36.426 A:middle
And to showcase this, we
built a new demo in the world

00:46:36.426 --> 00:46:37.756 A:middle
of Plants vs. Zombies
Garden Warfare,

00:46:37.756 --> 00:46:38.516 A:middle
one of our latest console games.

00:46:38.516 --> 00:46:38.976 A:middle
Let's have a look.

00:46:49.116 --> 00:46:50.376 A:middle
Yeah, will load in a little bit.

00:46:55.516 --> 00:47:00.566 A:middle
[ Music ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:55.516 --> 00:47:00.566 A:middle
[ Music ]

00:47:01.066 --> 00:47:02.866 A:middle
So, here we have the
zombies, our enemies,

00:47:03.446 --> 00:47:05.976 A:middle
advancing on the plants who are
defending their garden center.

00:47:09.836 --> 00:47:11.416 A:middle
This is the same
Frostbite engine that we use

00:47:11.486 --> 00:47:14.096 A:middle
to power our triple-A console
games, such as Battlefield 4

00:47:14.186 --> 00:47:16.616 A:middle
and Need for Speed,
here running in iOS.

00:47:17.516 --> 00:47:25.266 A:middle
[ Sound from computer
game demo ]

00:47:25.766 --> 00:47:28.136 A:middle
One of the biggest changes we
saw with using Metal instead

00:47:28.136 --> 00:47:30.586 A:middle
of OpenGL was that our
rendering submission times

00:47:30.586 --> 00:47:32.236 A:middle
on the CPU became
five times faster.

00:47:32.786 --> 00:47:34.576 A:middle
This is really quite
impressive and it's a,

00:47:34.646 --> 00:47:37.216 A:middle
it's a really good benefit
because it frees up 80 percent

00:47:37.216 --> 00:47:39.606 A:middle
of one of our CPU cores which
makes it a lot easier for us

00:47:39.656 --> 00:47:40.786 A:middle
to build full games, games

00:47:40.786 --> 00:47:42.906 A:middle
with even more animations,
physics, and audio.

00:47:43.566 --> 00:47:44.826 A:middle
Uh-oh! It doesn't
look like it's going

00:47:44.826 --> 00:47:45.606 A:middle
that well for the plants here.

00:47:46.026 --> 00:47:47.886 A:middle
Let's see what they do.

00:47:48.516 --> 00:48:09.516 A:middle
[ Sound from computer
game demo ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:48.516 --> 00:48:09.516 A:middle
[ Sound from computer
game demo ]

00:48:10.016 --> 00:48:17.000 A:middle
[ Applause ]

00:48:18.406 --> 00:48:18.936 A:middle
Thanks, everyone.

00:48:18.936 --> 00:48:20.466 A:middle
We're really happy with
the result we're getting,

00:48:20.866 --> 00:48:23.856 A:middle
and let's take a closer look at
some of the action we have here.

00:48:23.856 --> 00:48:26.606 A:middle
So, this is rendered in real
time in Frostbite with Metal

00:48:26.656 --> 00:48:29.636 A:middle
on an iPad Air, and
it's interactive.

00:48:29.736 --> 00:48:31.696 A:middle
Nicholas here is moving
around with the camera.

00:48:31.696 --> 00:48:34.596 A:middle
And one of the key benefits
that we're getting from Metal is

00:48:34.596 --> 00:48:37.746 A:middle
that we get fine-grain control
over the GPU and overall system.

00:48:37.986 --> 00:48:39.936 A:middle
We can build command buffers
efficiently in parallel

00:48:40.006 --> 00:48:41.746 A:middle
and we can control them.

00:48:42.006 --> 00:48:44.156 A:middle
We can explicitly
manage GPU resources,

00:48:44.206 --> 00:48:46.356 A:middle
which significantly
reduces overhead for us

00:48:46.686 --> 00:48:49.386 A:middle
and makes it a lot easier to
give a significantly better

00:48:49.386 --> 00:48:50.436 A:middle
and stable frame rates.

00:48:51.306 --> 00:48:52.626 A:middle
Now, Nicholas has paused
in this scene here.

00:48:53.266 --> 00:48:54.386 A:middle
This is really quite
the interesting scene

00:48:54.386 --> 00:48:55.456 A:middle
with tons of stuff going on.

00:48:55.626 --> 00:48:57.586 A:middle
And there's tons of
V effects, debris,

00:48:57.586 --> 00:48:59.576 A:middle
and this large animated
character is interacting.

00:48:59.856 --> 00:49:02.216 A:middle
And there's a lot of components
coming together to be able


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:59.856 --> 00:49:02.216 A:middle
And there's a lot of components
coming together to be able

00:49:02.216 --> 00:49:03.416 A:middle
to create these type
of environments here.

00:49:04.286 --> 00:49:05.706 A:middle
And here we have
two very detailed

00:49:05.706 --> 00:49:08.196 A:middle
and great-looking characters,
sunflower and cactus.

00:49:08.696 --> 00:49:10.796 A:middle
We're running dynamic shadows
for everything in this scene

00:49:10.946 --> 00:49:12.736 A:middle
and not just the characters,
but everything really.

00:49:13.096 --> 00:49:15.816 A:middle
And this is really quite heavy
but it makes the characters

00:49:15.816 --> 00:49:17.166 A:middle
and everything fit in with the,

00:49:17.166 --> 00:49:18.976 A:middle
regardless of where the lighting
condition is in the environment.

00:49:24.866 --> 00:49:25.796 A:middle
Well, let's look at it again.

00:49:28.056 --> 00:49:32.246 A:middle
We've been working on, on this
for just a couple of weeks

00:49:32.396 --> 00:49:34.176 A:middle
but we're really quite
interested in all

00:49:34.176 --> 00:49:34.876 A:middle
of the results we're getting.

00:49:34.876 --> 00:49:35.686 A:middle
We're really happy about it.

00:49:35.686 --> 00:49:44.446 A:middle
So, yeah. Yeah, so here we have
the big animated robot again.

00:49:44.586 --> 00:49:45.356 A:middle
It's a zombie robot.

00:49:46.396 --> 00:49:48.526 A:middle
I'm not sure how that
works, but he seems

00:49:48.526 --> 00:49:49.516 A:middle
to be very well animated
[laughter].

00:49:51.716 --> 00:49:54.146 A:middle
So, we're rendering up to 1.2
million triangles per frame.

00:49:54.236 --> 00:49:55.746 A:middle
That's really quite a lot,

00:49:55.746 --> 00:49:56.976 A:middle
and we're really happy
that we can do that.

00:49:57.426 --> 00:49:58.626 A:middle
And together with that,

00:49:58.626 --> 00:50:00.356 A:middle
we're doing around 20
different rendering passes


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:58.626 --> 00:50:00.356 A:middle
we're doing around 20
different rendering passes

00:50:00.356 --> 00:50:03.066 A:middle
for our HER rendering, for
shadows, for aimed occlusions,

00:50:03.456 --> 00:50:05.836 A:middle
for particles, and
for distortion.

00:50:05.836 --> 00:50:06.986 A:middle
And as you can see
in the background,

00:50:06.986 --> 00:50:09.016 A:middle
we have this nice [inaudible]
effect going on that sort

00:50:09.016 --> 00:50:10.566 A:middle
of frames the action
a little bit more.

00:50:11.806 --> 00:50:15.116 A:middle
And we're really happy that
we can, I'm really excited

00:50:15.116 --> 00:50:16.876 A:middle
and really impressed by the
amount of geometry and effects

00:50:16.876 --> 00:50:18.056 A:middle
that we can push
through the GPU.

00:50:18.636 --> 00:50:19.776 A:middle
It's really quite extraordinary.

00:50:20.696 --> 00:50:22.446 A:middle
And this enables us to
use the same content

00:50:22.446 --> 00:50:23.456 A:middle
and the same features
that we're using

00:50:23.456 --> 00:50:25.646 A:middle
for building console
games but here on iOS.

00:50:25.646 --> 00:50:28.526 A:middle
It makes it significantly
easier to,

00:50:28.526 --> 00:50:29.876 A:middle
to work with this as a platform.

00:50:29.876 --> 00:50:32.346 A:middle
So, Metal for us is
literally a game changer.

00:50:32.736 --> 00:50:36.816 A:middle
It, it's a key enabler for a
new set of full 3D games on iOS,

00:50:36.816 --> 00:50:39.606 A:middle
and we at Electronic Arts are
super excited to support it

00:50:39.606 --> 00:50:41.276 A:middle
and put this in the
hands of our game teams

00:50:41.276 --> 00:50:42.066 A:middle
and see what they can create.

00:50:42.516 --> 00:50:42.796 A:middle
Thank you.

00:50:43.516 --> 00:50:51.946 A:middle
[ Applause ]

00:50:52.446 --> 00:50:53.746 A:middle
&gt;&gt; Thanks to Johan
and Electronic Arts.

00:50:54.176 --> 00:50:55.406 A:middle
That was simply stunning.

00:50:55.406 --> 00:50:58.076 A:middle
It's amazing the
power of the GPU

00:50:58.356 --> 00:50:59.776 A:middle
that Metal allows you to unlock.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:04.476 --> 00:51:07.286 A:middle
So, it has never been easier
to take an amazing idea

00:51:07.826 --> 00:51:10.756 A:middle
and to brilliant, build a
brilliantly successful game.

00:51:10.926 --> 00:51:13.756 A:middle
We can't wait to see what all
of you are going to build.

00:51:14.046 --> 00:51:15.976 A:middle
Thank you very much, and I'll
hand it back over to Andreas

00:51:16.036 --> 00:51:17.136 A:middle
to talk about extensions.

00:51:18.516 --> 00:51:25.016 A:middle
[ Applause ]

00:51:25.516 --> 00:51:25.796 A:middle
&gt;&gt; All right.

00:51:27.216 --> 00:51:30.196 A:middle
Extensions represent, represent
another very important new

00:51:30.196 --> 00:51:31.936 A:middle
technology direction
that we are opening

00:51:31.936 --> 00:51:34.686 A:middle
up for third-party developers
on both iOS and OS X.

00:51:34.686 --> 00:51:39.066 A:middle
They represent the ability
to hook into various kind

00:51:39.066 --> 00:51:41.556 A:middle
of system behaviors, and
they allow users to expand

00:51:41.556 --> 00:51:44.246 A:middle
and customize our Core
operating system functionality.

00:51:46.206 --> 00:51:48.856 A:middle
Extensions are bundles
that ship inside your apps.

00:51:49.166 --> 00:51:51.046 A:middle
They get downloaded from the
App Store with your apps,

00:51:51.196 --> 00:51:52.666 A:middle
and they get removed
from your system

00:51:52.666 --> 00:51:54.016 A:middle
if you use an uninstall
to your apps.

00:51:55.546 --> 00:51:57.026 A:middle
So that the user
doesn't get flooded

00:51:57.026 --> 00:52:00.236 A:middle
with unexpected new behaviors,
they stay in full control


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:57.026 --> 00:52:00.236 A:middle
with unexpected new behaviors,
they stay in full control

00:52:00.236 --> 00:52:02.356 A:middle
of which extensions
are active in the UI.

00:52:02.406 --> 00:52:05.536 A:middle
They get to expressly activate
each extension they wish to use.

00:52:06.226 --> 00:52:08.116 A:middle
It uses insisted
preferences and settings.

00:52:10.256 --> 00:52:12.906 A:middle
In technical terms,
extensions are short-lived,

00:52:13.186 --> 00:52:16.826 A:middle
out-of-process services that get
launched by our OSs on demand.

00:52:17.836 --> 00:52:20.136 A:middle
If configured to do
so, they can share data

00:52:20.216 --> 00:52:22.346 A:middle
with the apps they are
embedded in, for example,

00:52:22.346 --> 00:52:25.336 A:middle
to access keychain items or
any other kind of preferences.

00:52:26.876 --> 00:52:28.526 A:middle
Extensions are of
course sandboxed,

00:52:28.776 --> 00:52:31.606 A:middle
and we even developed this
cool new remote view technology

00:52:32.076 --> 00:52:35.606 A:middle
that hosts an extensions user
interface inside our system apps

00:52:36.076 --> 00:52:39.126 A:middle
and dispatches user events
back to the extensions process

00:52:39.276 --> 00:52:41.016 A:middle
without the app being
able to see it.

00:52:41.236 --> 00:52:43.336 A:middle
So extensions are
designed to be very secure.

00:52:44.906 --> 00:52:47.136 A:middle
And since extensions
typically share a lot of code

00:52:47.136 --> 00:52:49.136 A:middle
with their apps,
we now allow you

00:52:49.246 --> 00:52:51.046 A:middle
to use bundled frameworks
on iOS.

00:52:52.516 --> 00:52:57.336 A:middle
[ Applause ]

00:52:57.836 --> 00:53:00.166 A:middle
So you're not limited
anymore to static libraries.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:57.836 --> 00:53:00.166 A:middle
So you're not limited
anymore to static libraries.

00:53:00.166 --> 00:53:02.566 A:middle
You can now bundle
resources and binaries

00:53:02.566 --> 00:53:03.976 A:middle
in fully supported frameworks.

00:53:05.426 --> 00:53:07.256 A:middle
Now, here's a list of
the extension points

00:53:07.376 --> 00:53:09.206 A:middle
that we are making
available in this year's iOS

00:53:09.206 --> 00:53:12.666 A:middle
and OS X releases, and more
will follow in the future,

00:53:12.946 --> 00:53:14.856 A:middle
but we think this is a
great starting point.

00:53:15.546 --> 00:53:17.026 A:middle
Let's go over these
one after the other.

00:53:17.026 --> 00:53:21.526 A:middle
There are many online services
out there that allow users

00:53:21.526 --> 00:53:24.576 A:middle
to post comments or share
things like pictures and videos.

00:53:25.636 --> 00:53:27.856 A:middle
And while we support the largest
ones directly in our OSs,

00:53:27.856 --> 00:53:30.486 A:middle
we realize we can't
support them all.

00:53:31.026 --> 00:53:33.136 A:middle
So, if you are running one
of these online services,

00:53:33.476 --> 00:53:36.846 A:middle
sharing extensions are a great
way to let users post comments,

00:53:37.046 --> 00:53:39.636 A:middle
links, and media to your service

00:53:39.636 --> 00:53:41.416 A:middle
from within any app
they might be running.

00:53:43.956 --> 00:53:47.276 A:middle
Actions allow you to take
user data, anything from text

00:53:47.726 --> 00:53:50.886 A:middle
to images, audio, and more,
and transform that data

00:53:50.886 --> 00:53:52.216 A:middle
into a new representation.

00:53:52.906 --> 00:53:55.966 A:middle
For example, you could write an
extension that takes source code

00:53:55.966 --> 00:53:58.426 A:middle
and Xcode and reformats
it to your wishes,

00:53:58.886 --> 00:54:00.766 A:middle
perhaps with the
three-space indentation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:58.886 --> 00:54:00.766 A:middle
perhaps with the
three-space indentation.

00:54:03.596 --> 00:54:06.496 A:middle
And Photo Editing extensions are
actions that manipulate images,

00:54:06.956 --> 00:54:08.856 A:middle
but we make sure that we
keep the original around so

00:54:09.006 --> 00:54:10.436 A:middle
that edits are nondestructive.

00:54:12.506 --> 00:54:14.956 A:middle
Safari actions manipulate
web pages.

00:54:15.236 --> 00:54:16.776 A:middle
Now, they have a
lot of flexibility

00:54:17.116 --> 00:54:20.546 A:middle
because they get accessed to the
full DOM on the way in and out.

00:54:20.546 --> 00:54:23.916 A:middle
So they can completely re-render
an entire web page while the

00:54:23.916 --> 00:54:24.806 A:middle
user is browsing.

00:54:25.346 --> 00:54:27.036 A:middle
For example, to do a
language translation.

00:54:29.216 --> 00:54:30.746 A:middle
Notification Center
widgets allow you

00:54:30.916 --> 00:54:33.516 A:middle
to place click-at-a-glance
views inside the iOS

00:54:33.516 --> 00:54:35.286 A:middle
and OS X Notification Centers.

00:54:35.286 --> 00:54:38.146 A:middle
You can use them for
displaying pretty much any kind

00:54:38.146 --> 00:54:39.296 A:middle
of status information

00:54:39.576 --> 00:54:41.866 A:middle
or for offering helpful
little utilities to the user.

00:54:42.786 --> 00:54:45.516 A:middle
They're mostly designed to
display short, concise data

00:54:46.186 --> 00:54:48.476 A:middle
but they also allow for
simple user interactions,

00:54:48.846 --> 00:54:50.946 A:middle
and among other things,
they're great launch points

00:54:50.996 --> 00:54:52.346 A:middle
to jump out into full app.

00:54:55.606 --> 00:54:58.986 A:middle
Document Providers extend the
newly designed iCloud Document

00:54:58.986 --> 00:55:02.396 A:middle
Picker and allow you to access
additional storage mechanisms.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:58.986 --> 00:55:02.396 A:middle
Picker and allow you to access
additional storage mechanisms.

00:55:02.726 --> 00:55:04.156 A:middle
For example, in an enterprise

00:55:04.156 --> 00:55:06.276 A:middle
that uses a third-party
Cloud service.

00:55:07.326 --> 00:55:09.346 A:middle
And we offer a similar
mechanism on OS X

00:55:09.346 --> 00:55:12.566 A:middle
and remote file-sharing
services can annotate Finder

00:55:12.696 --> 00:55:13.476 A:middle
with their sync status.

00:55:16.096 --> 00:55:18.656 A:middle
Another very important new
mechanism is the ability

00:55:18.656 --> 00:55:20.306 A:middle
to provide third-party
keyboards.

00:55:20.646 --> 00:55:23.796 A:middle
You can use them to support
additional languages or any kind

00:55:23.796 --> 00:55:25.636 A:middle
of input methods that
you might think about.

00:55:27.636 --> 00:55:30.166 A:middle
Creating extensions is as
simple as creating apps.

00:55:30.796 --> 00:55:33.146 A:middle
The extended export with all
the things you might need,

00:55:33.576 --> 00:55:36.756 A:middle
such as new templates,
additional scheme settings

00:55:36.756 --> 00:55:37.816 A:middle
so that you can launch the apps

00:55:37.816 --> 00:55:39.576 A:middle
that actually host
your extensions.

00:55:40.486 --> 00:55:43.156 A:middle
We improved our XPC service
debugging capabilities,

00:55:43.366 --> 00:55:46.526 A:middle
and we even added
additional simulators for some

00:55:46.526 --> 00:55:47.396 A:middle
of the extension points.

00:55:50.096 --> 00:55:52.396 A:middle
So, extensions are a very
powerful new mechanism

00:55:52.716 --> 00:55:54.576 A:middle
to customize our
operating systems,

00:55:54.916 --> 00:55:56.226 A:middle
and we think they're
going to be very,

00:55:56.226 --> 00:55:57.686 A:middle
very popular with our users.

00:55:59.746 --> 00:56:02.566 A:middle
Next, we're going to talk
about new APIs in iOS 8,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:55:59.746 --> 00:56:02.566 A:middle
Next, we're going to talk
about new APIs in iOS 8,

00:56:02.926 --> 00:56:04.796 A:middle
and for that I'm going
to hand over to Toby.

00:56:05.516 --> 00:56:08.806 A:middle
[ Applause ]

00:56:09.306 --> 00:56:09.786 A:middle
&gt;&gt; Thanks, Andreas.

00:56:11.976 --> 00:56:12.586 A:middle
Good morning.

00:56:14.716 --> 00:56:15.816 A:middle
Well, as you heard this morning,

00:56:15.816 --> 00:56:17.826 A:middle
we've got a pretty big
release for you this year.

00:56:18.886 --> 00:56:23.096 A:middle
In fact, this is almost as large
as the original iPhone SDK.

00:56:23.096 --> 00:56:27.086 A:middle
Now, we took a focus, we
took a very focused approach

00:56:27.086 --> 00:56:27.906 A:middle
to this release.

00:56:28.856 --> 00:56:31.286 A:middle
The major theme this
year is integration.

00:56:32.076 --> 00:56:33.536 A:middle
Integration with the OS.

00:56:33.796 --> 00:56:37.256 A:middle
Andreas just told you how your
apps can plug into the system

00:56:37.506 --> 00:56:39.106 A:middle
and even other applications.

00:56:40.176 --> 00:56:43.216 A:middle
We're integrating across our
devices with our new Cloud

00:56:43.216 --> 00:56:47.056 A:middle
of Continuity features and we're
providing deeper integration

00:56:47.056 --> 00:56:49.666 A:middle
with the hardware and even
with the world around.

00:56:51.906 --> 00:56:53.396 A:middle
Let's start by taking
a look at two

00:56:53.396 --> 00:56:55.256 A:middle
of our more popular
applications.

00:56:56.086 --> 00:56:59.306 A:middle
Underlying each of these
is a very rich set of API.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:57:01.066 --> 00:57:03.446 A:middle
We've introduced a new
Photos framework this year

00:57:03.446 --> 00:57:06.126 A:middle
and have greatly
enhanced the media API

00:57:06.406 --> 00:57:08.266 A:middle
with many long-standing
requests.

00:57:09.336 --> 00:57:11.276 A:middle
Combined, they form
the foundation

00:57:11.276 --> 00:57:14.656 A:middle
of a photographic platform
that brings your applications

00:57:14.656 --> 00:57:16.356 A:middle
in right alongside our own.

00:57:18.826 --> 00:57:21.666 A:middle
The new Photos framework
gives you direct access

00:57:21.666 --> 00:57:25.146 A:middle
to the user's photo library
with no need to import a copy

00:57:25.146 --> 00:57:28.996 A:middle
of anything anymore, and you
can even make changes directly

00:57:28.996 --> 00:57:30.366 A:middle
with the appropriate permission.

00:57:31.186 --> 00:57:32.906 A:middle
And with iCloud Photo Library,

00:57:33.236 --> 00:57:36.866 A:middle
you can access the user's entire
collection of photos and movies

00:57:37.166 --> 00:57:39.566 A:middle
without having to worry
about whether they're local

00:57:39.616 --> 00:57:40.766 A:middle
or stored in the Cloud.

00:57:40.896 --> 00:57:42.246 A:middle
We take care of that for you.

00:57:44.366 --> 00:57:47.476 A:middle
The new Camera API gives
you full manual control

00:57:47.476 --> 00:57:50.446 A:middle
over the camera settings, which
I think is something that many

00:57:50.446 --> 00:57:51.856 A:middle
of you have wanted for a while.

00:57:53.406 --> 00:57:56.226 A:middle
You can set the, the
lens position explicitly.

00:57:56.226 --> 00:57:59.046 A:middle
The white balance
or color temperature

00:57:59.486 --> 00:58:03.026 A:middle
and various exposure settings,
like the shutter speed and ISO.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:57:59.486 --> 00:58:03.026 A:middle
and various exposure settings,
like the shutter speed and ISO.

00:58:03.026 --> 00:58:07.136 A:middle
And these are all the same APIs
that our applications are using.

00:58:08.956 --> 00:58:12.446 A:middle
A great new feature lets you
grab a burst of photographs,

00:58:12.476 --> 00:58:14.506 A:middle
each with different
exposure settings,

00:58:15.596 --> 00:58:16.906 A:middle
and with the video tool box,

00:58:16.906 --> 00:58:20.096 A:middle
you can now access the
hardware H264 encoder

00:58:20.096 --> 00:58:21.336 A:middle
and decoder directly.

00:58:23.046 --> 00:58:23.816 A:middle
[Background applause]
Yes, thank you.

00:58:27.146 --> 00:58:28.096 A:middle
Now, we announced a number

00:58:28.096 --> 00:58:30.336 A:middle
of great new initiatives
this morning, and we're going

00:58:30.336 --> 00:58:32.476 A:middle
to cover them all in
great detail this week.

00:58:32.796 --> 00:58:34.836 A:middle
I want to touch on
just a few of them now.

00:58:36.396 --> 00:58:38.366 A:middle
First, Local Authentication.

00:58:39.266 --> 00:58:40.666 A:middle
This lets you ask the user

00:58:40.666 --> 00:58:44.346 A:middle
to authenticate using touch
ID right in your application.

00:58:45.196 --> 00:58:46.416 A:middle
It's a very simple API,

00:58:46.416 --> 00:58:49.826 A:middle
and we tell you whether the
authentication succeeded or not.

00:58:50.396 --> 00:58:52.126 A:middle
At no time, though,
do you get access

00:58:52.126 --> 00:58:54.046 A:middle
to the user's biometric
information.

00:58:54.596 --> 00:58:55.926 A:middle
That's stored away securely

00:58:55.926 --> 00:58:58.606 A:middle
so that not even our own
applications can get access

00:58:59.726 --> 00:59:00.666 A:middle
to that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:58:59.726 --> 00:59:00.666 A:middle
to that.

00:59:01.376 --> 00:59:04.976 A:middle
Handoff lets you start a task
on one device and pick it

00:59:04.976 --> 00:59:08.416 A:middle
up seamlessly on another
Mac, phone or, or iPad.

00:59:09.496 --> 00:59:13.806 A:middle
You create an NSUserActivity
to encapsulate an activity

00:59:13.806 --> 00:59:15.986 A:middle
in your app such as
opening a web page,

00:59:16.446 --> 00:59:19.656 A:middle
and then as the context changes,
you update that activity.

00:59:19.986 --> 00:59:23.246 A:middle
And note that this contains only
the metadata for the activity

00:59:23.306 --> 00:59:25.986 A:middle
such as the document
URL or scroll position.

00:59:26.426 --> 00:59:28.026 A:middle
You need to find
an alternate means

00:59:28.236 --> 00:59:31.066 A:middle
for getting the actual data
across to the other devices.

00:59:32.486 --> 00:59:35.346 A:middle
Now, once you've created this
activity, we'll take care

00:59:35.346 --> 00:59:37.746 A:middle
of advertising it across
all of your devices.

00:59:38.396 --> 00:59:39.796 A:middle
We're going to tell
only the devices

00:59:39.796 --> 00:59:42.136 A:middle
which are actually near you,
so you don't need to worry

00:59:42.136 --> 00:59:43.866 A:middle
about your computer
at home revealing

00:59:43.866 --> 00:59:45.256 A:middle
when you're surfing
the web at work.

00:59:48.456 --> 00:59:51.626 A:middle
Health and wellness has become
extremely popular lately,

00:59:52.116 --> 00:59:54.546 A:middle
with new applications
and devices exploding

00:59:54.546 --> 00:59:55.856 A:middle
on the scene every day.

00:59:56.776 --> 00:59:58.526 A:middle
HealthKit provides a platform

00:59:58.836 --> 01:00:00.746 A:middle
where your applications
can store


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:59:58.836 --> 01:00:00.746 A:middle
where your applications
can store

01:00:00.746 --> 01:00:02.976 A:middle
and share health-related
information.

01:00:03.846 --> 01:00:06.266 A:middle
We can import some kinds
of data automatically

01:00:06.266 --> 01:00:09.256 A:middle
from standard supporting devices
such as your blood pressure

01:00:09.256 --> 01:00:12.446 A:middle
and glucose levels, and
your app can read and write

01:00:12.446 --> 01:00:14.836 A:middle
over 60 different
kinds of information,

01:00:15.266 --> 01:00:17.226 A:middle
ranging from fitness
to nutrition

01:00:17.526 --> 01:00:18.756 A:middle
to medical information.

01:00:19.696 --> 01:00:22.216 A:middle
Now, all of this is extremely
sensitive, of course,

01:00:22.446 --> 01:00:25.376 A:middle
and so we give the user
extremely fine-grained control

01:00:25.376 --> 01:00:26.876 A:middle
over who can access what.

01:00:26.876 --> 01:00:31.846 A:middle
Now, I'd like to talk
about design a little bit.

01:00:33.436 --> 01:00:37.176 A:middle
Last year, of course, well, we
completely revamped the iOS UI

01:00:37.176 --> 01:00:40.806 A:middle
and I told you at the time that
we were only just beginning.

01:00:41.566 --> 01:00:42.796 A:middle
Now, that wasn't a threat.

01:00:43.506 --> 01:00:45.676 A:middle
We've continued to add
refinements, but just not

01:00:45.676 --> 01:00:50.376 A:middle
at quite the same breakneck
pace as we have before.

01:00:51.276 --> 01:00:54.306 A:middle
Interactive notifications
let you provide the user

01:00:54.306 --> 01:00:58.296 A:middle
with custom actions right there
in the notification banner.

01:00:59.046 --> 01:01:00.266 A:middle
And as you heard this morning,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:00:59.046 --> 01:01:00.266 A:middle
And as you heard this morning,

01:01:00.676 --> 01:01:02.986 A:middle
they even work on
the lock screen.

01:01:03.856 --> 01:01:08.526 A:middle
Now, because your users want
to focus on their content

01:01:08.626 --> 01:01:12.146 A:middle
and not the chrome
around it, in landscape,

01:01:12.146 --> 01:01:15.626 A:middle
we're automatically hiding
the status bar and shrinking,

01:01:15.626 --> 01:01:18.486 A:middle
or hiding, the navigation
bar and tool bars.

01:01:20.066 --> 01:01:24.056 A:middle
And we have a new compact style
for action sheets in landscape.

01:01:26.546 --> 01:01:28.016 A:middle
We're continuing to push support

01:01:28.016 --> 01:01:31.176 A:middle
for dynamic type throughout
our own applications,

01:01:31.296 --> 01:01:34.256 A:middle
and we've greatly enhanced
the API in UIKit and WebKit

01:01:34.256 --> 01:01:37.086 A:middle
to make it even easier
for you to adopt.

01:01:38.996 --> 01:01:41.526 A:middle
And finally, we have
a new settings pane,

01:01:41.526 --> 01:01:44.526 A:middle
which combines your applications
preferences with all

01:01:44.526 --> 01:01:46.796 A:middle
of the various system
privacy preferences

01:01:46.796 --> 01:01:48.436 A:middle
such as whether the user wants

01:01:48.436 --> 01:01:50.336 A:middle
to receive notifications
from your app.

01:01:51.376 --> 01:01:53.706 A:middle
We've put them together
in one place here now

01:01:53.946 --> 01:01:55.336 A:middle
and given you a simple API

01:01:55.336 --> 01:01:57.296 A:middle
so that you can take
the user right here

01:01:57.296 --> 01:01:58.876 A:middle
from within your application.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:02:00.516 --> 01:02:07.006 A:middle
[ Applause ]

01:02:07.506 --> 01:02:10.446 A:middle
Now I read this quote on
John August's blog a couple

01:02:10.446 --> 01:02:11.126 A:middle
of months ago.

01:02:12.186 --> 01:02:15.046 A:middle
"Adding landscape to the
iPhone isn't impossible,

01:02:15.666 --> 01:02:17.566 A:middle
but it means not
doing something else,

01:02:18.026 --> 01:02:20.936 A:middle
and right now the many
'something elses' are worth a

01:02:20.936 --> 01:02:21.606 A:middle
lot more."

01:02:22.846 --> 01:02:24.376 A:middle
That really resonated with me

01:02:24.826 --> 01:02:27.236 A:middle
because we've been spending
a lot time thinking about how

01:02:27.236 --> 01:02:30.276 A:middle
to manage the proliferation
of UI layouts.

01:02:32.366 --> 01:02:35.846 A:middle
When we launched iPhone seven
years ago, it was pretty simple.

01:02:36.846 --> 01:02:40.876 A:middle
You had one screen size and
two user-interface orientations

01:02:40.926 --> 01:02:41.506 A:middle
to deal with.

01:02:42.716 --> 01:02:46.116 A:middle
A few years later, we
added iPad and now you have

01:02:46.116 --> 01:02:48.546 A:middle
to use a global user
interface idiom to select

01:02:48.546 --> 01:02:51.466 A:middle
between your iPhone
and your iPad layouts.

01:02:52.566 --> 01:02:55.656 A:middle
Then we added iPhone 5 with
its larger screen size,

01:02:55.656 --> 01:02:57.856 A:middle
and now you've got a
total of six screen bounds

01:02:57.856 --> 01:02:58.916 A:middle
to have to contend with.

01:02:59.356 --> 01:03:01.346 A:middle
And that's getting
to be rather a lot.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:02:59.356 --> 01:03:01.346 A:middle
And that's getting
to be rather a lot.

01:03:01.346 --> 01:03:04.626 A:middle
And so we've been working to try
and rationalize things for you.

01:03:05.366 --> 01:03:10.356 A:middle
Now, in iOS 8, you can
use a single storyboard

01:03:10.896 --> 01:03:16.306 A:middle
across iPhone 4, iPhone
5, portrait and landscape,

01:03:16.766 --> 01:03:20.766 A:middle
and here's where things get
interesting, on the iPad 2.

01:03:21.866 --> 01:03:23.166 A:middle
Now, hang on a second.

01:03:23.816 --> 01:03:26.686 A:middle
We've always encouraged
you to design explicitly

01:03:26.726 --> 01:03:30.286 A:middle
for iPad's larger screen
size and not just blow

01:03:30.286 --> 01:03:33.366 A:middle
up your iPhone UI, and
we're not backpedaling

01:03:33.406 --> 01:03:34.536 A:middle
on this message now.

01:03:36.406 --> 01:03:39.786 A:middle
Different screen sizes demand
a different user experience,

01:03:40.236 --> 01:03:42.186 A:middle
and so we've been
teaching storyboards

01:03:42.236 --> 01:03:44.946 A:middle
and our view controllers
how to adapt themselves

01:03:45.096 --> 01:03:46.516 A:middle
to the environment
that they're in.

01:03:47.826 --> 01:03:49.186 A:middle
In this example here,

01:03:49.546 --> 01:03:52.226 A:middle
it's actually the same
split-view controller class

01:03:52.366 --> 01:03:54.816 A:middle
running on both the
iPhone and the iPad.

01:03:55.616 --> 01:03:57.586 A:middle
On the phone, well
it looks and behaves

01:03:57.586 --> 01:04:01.256 A:middle
like a single-column navigation
browser, and on the iPad,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:03:57.586 --> 01:04:01.256 A:middle
like a single-column navigation
browser, and on the iPad,

01:04:01.636 --> 01:04:03.876 A:middle
you get the split-paned
master detail view

01:04:03.876 --> 01:04:06.446 A:middle
that you're probably
pretty familiar with.

01:04:07.176 --> 01:04:11.756 A:middle
We're introducing a new notion
called size classes to try

01:04:11.756 --> 01:04:14.446 A:middle
and express this idea
of how big something is.

01:04:15.776 --> 01:04:19.096 A:middle
Broadly speaking, you can
think of the iPhone size UI

01:04:19.206 --> 01:04:24.036 A:middle
as a compact size class and the
iPad UI as a regular size class.

01:04:24.686 --> 01:04:26.166 A:middle
But don't make the
mistake of thinking

01:04:26.166 --> 01:04:29.106 A:middle
that size classes are bound
to a particular device.

01:04:29.526 --> 01:04:30.976 A:middle
They're a lot more
general than that.

01:04:32.596 --> 01:04:35.326 A:middle
For example, in this
split-view controller on iPad,

01:04:35.716 --> 01:04:37.586 A:middle
it has two child-view
controllers.

01:04:38.586 --> 01:04:40.766 A:middle
The one on the left here,
well, it kind of looks

01:04:40.766 --> 01:04:42.506 A:middle
like an iPhone UI, and in fact,

01:04:42.506 --> 01:04:45.766 A:middle
it has a compact size
class whereas the one

01:04:45.766 --> 01:04:48.186 A:middle
on the right has a
regular size class.

01:04:50.066 --> 01:04:52.956 A:middle
This idea of things adapting
themselves to the space

01:04:52.956 --> 01:04:56.066 A:middle
that they're contained in
forms the basis for something

01:04:56.066 --> 01:04:57.646 A:middle
that we're calling adaptive UI,

01:04:58.306 --> 01:05:00.176 A:middle
and this is what makes
it possible for you


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:04:58.306 --> 01:05:00.176 A:middle
and this is what makes
it possible for you

01:05:00.176 --> 01:05:02.926 A:middle
to use a single storyboard
on iPhone 4,

01:05:03.346 --> 01:05:05.166 A:middle
iPhone 5, and the iPad.

01:05:06.726 --> 01:05:08.626 A:middle
Now, I'd like to ask
Max Drukman to come up

01:05:08.626 --> 01:05:11.596 A:middle
and give you a quick tour of
how easy this is to do in Xcode.

01:05:12.046 --> 01:05:12.346 A:middle
Max?

01:05:13.516 --> 01:05:18.486 A:middle
[ Applause ]

01:05:18.986 --> 01:05:19.946 A:middle
&gt;&gt; I missed you guys.

01:05:21.176 --> 01:05:22.046 A:middle
Especially you, Craig.

01:05:23.676 --> 01:05:28.886 A:middle
All right, I'm going to show
you how size classes in iOS 8,

01:05:29.306 --> 01:05:30.716 A:middle
if I can get the
right screen up,

01:05:31.416 --> 01:05:34.966 A:middle
allow me to create a single
storyboard that is adaptive

01:05:35.406 --> 01:05:39.176 A:middle
for both iPhone and iPad.

01:05:39.426 --> 01:05:42.006 A:middle
Here's my party finder
app, NO.SLEEP.

01:05:42.006 --> 01:05:45.686 A:middle
@DUBDUB. It's a pretty
simple little thing.

01:05:45.686 --> 01:05:47.896 A:middle
There's a login screen
on the left and a,

01:05:47.896 --> 01:05:49.446 A:middle
a list of parties on the right.

01:05:50.446 --> 01:05:55.516 A:middle
Now, the astute among you may
notice that my layout is square.

01:05:56.296 --> 01:05:56.976 A:middle
Why is that?

01:05:57.706 --> 01:06:05.056 A:middle
Well, because size
classes are, they're, wow!


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:05:57.706 --> 01:06:05.056 A:middle
Well, because size
classes are, they're, wow!

01:06:05.846 --> 01:06:09.186 A:middle
Since size classes
aren't, they're not real,

01:06:10.056 --> 01:06:12.556 A:middle
one size class doesn't
necessarily map

01:06:12.756 --> 01:06:14.746 A:middle
to one device and
one orientation.

01:06:15.546 --> 01:06:18.596 A:middle
The layout canvas in,

01:06:19.526 --> 01:06:23.836 A:middle
in interface builder
is also that way.

01:06:24.946 --> 01:06:26.396 A:middle
Wow. Could've done that better.

01:06:29.156 --> 01:06:33.776 A:middle
Now, just because I'm, so,

01:06:33.976 --> 01:06:35.946 A:middle
I'm laying out my
interface this way.

01:06:35.946 --> 01:06:40.066 A:middle
I still want to see how
it looks on real devices

01:06:40.226 --> 01:06:41.506 A:middle
when it gets in peoples' hands.

01:06:42.346 --> 01:06:46.026 A:middle
For that, I have the
preview assistant.

01:06:47.866 --> 01:06:50.716 A:middle
In Xcode 6, the preview
assistant allows me

01:06:50.716 --> 01:06:53.816 A:middle
to add multiple devices
and orientations

01:06:54.356 --> 01:06:59.366 A:middle
so I can see how my interface is
working in as many devices and,

01:06:59.476 --> 01:07:00.736 A:middle
and layouts as I want.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:06:59.476 --> 01:07:00.736 A:middle
and layouts as I want.

01:07:01.646 --> 01:07:05.906 A:middle
And here you can see that I've
already specialized for one

01:07:05.906 --> 01:07:09.706 A:middle
of the size classes so that
my interface looks different

01:07:10.226 --> 01:07:13.126 A:middle
on an iPhone in landscape
orientation.

01:07:13.706 --> 01:07:18.536 A:middle
Now, if I select my
other view controller,

01:07:19.756 --> 01:07:21.166 A:middle
we can see my party table

01:07:22.256 --> 01:07:24.486 A:middle
and this I haven't
specialized at all.

01:07:25.426 --> 01:07:28.136 A:middle
That's because table
views, like many views,

01:07:28.506 --> 01:07:30.176 A:middle
are themselves adaptive,

01:07:30.576 --> 01:07:33.316 A:middle
and so there's no specialization
that's necessary at all.

01:07:33.316 --> 01:07:38.916 A:middle
Well, let's go back
to my login screen.

01:07:40.516 --> 01:07:44.476 A:middle
Now, Interface Builder starts
you out in the size class

01:07:44.476 --> 01:07:47.236 A:middle
for any width and any height.

01:07:48.386 --> 01:07:52.166 A:middle
So this is where you lay out
what is common about your app

01:07:52.166 --> 01:07:53.906 A:middle
across all size classes.

01:07:54.776 --> 01:07:56.276 A:middle
It's a great place to do edits

01:07:56.276 --> 01:07:57.866 A:middle
that you want reflected
everywhere.

01:07:58.736 --> 01:08:01.606 A:middle
For instance, if I want to
move this shiny little graphic


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:07:58.736 --> 01:08:01.606 A:middle
For instance, if I want to
move this shiny little graphic

01:08:01.606 --> 01:08:05.296 A:middle
up into the corner,
that will get reflected

01:08:05.296 --> 01:08:07.676 A:middle
in both landscape and portrait.

01:08:08.696 --> 01:08:12.126 A:middle
But because one size
class does not fit all,

01:08:12.906 --> 01:08:16.756 A:middle
I can also tell Interface
Builder to edit

01:08:16.935 --> 01:08:18.276 A:middle
in different size classes.

01:08:19.736 --> 01:08:22.466 A:middle
In this case, I'm going
to choose compact height,

01:08:23.666 --> 01:08:26.986 A:middle
which is the size class
that maps to an iPhone

01:08:27.046 --> 01:08:28.296 A:middle
in landscape orientation.

01:08:29.395 --> 01:08:31.696 A:middle
And now, when I make an edit,

01:08:31.696 --> 01:08:34.366 A:middle
for instance moving
all these objects up,

01:08:35.636 --> 01:08:39.265 A:middle
that will only be reflected
in a landscape orientation.

01:08:39.906 --> 01:08:48.725 A:middle
Now, if I add an iPad to the
mix, we can see yet another take

01:08:49.066 --> 01:08:51.576 A:middle
at positioning and sizing
these same elements.

01:08:52.126 --> 01:08:54.966 A:middle
And once again, these
are all the same elements

01:08:55.326 --> 01:08:58.765 A:middle
with the same logic, styles,
connections still attached.

01:08:59.326 --> 01:09:01.636 A:middle
They're just positioned
and sized differently


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:08:59.326 --> 01:09:01.636 A:middle
They're just positioned
and sized differently

01:09:01.926 --> 01:09:03.716 A:middle
because they have
different constraints.

01:09:05.446 --> 01:09:07.946 A:middle
So, if I were to change
the nature of something,

01:09:08.486 --> 01:09:13.026 A:middle
like the background image
here, that will get reflected

01:09:13.826 --> 01:09:16.506 A:middle
in all of the size classes.

01:09:19.076 --> 01:09:22.305 A:middle
That's a quick take at
size classes in iOS 8

01:09:22.645 --> 01:09:25.345 A:middle
and one storyboard
to rule them all.

01:09:26.666 --> 01:09:27.426 A:middle
Back to you, Toby.

01:09:28.515 --> 01:09:34.496 A:middle
[ Applause ]

01:09:34.996 --> 01:09:35.316 A:middle
&gt;&gt; Thanks, Max.

01:09:36.055 --> 01:09:38.356 A:middle
Well, so that's just a taste of
some of the things that we have

01:09:38.475 --> 01:09:41.886 A:middle
for you in iOS 8, and we can't
wait for you to get your hands

01:09:41.886 --> 01:09:43.326 A:middle
on it and start playing with it.

01:09:44.616 --> 01:09:46.256 A:middle
Now, I'd like to
talk about iCloud.

01:09:47.426 --> 01:09:50.116 A:middle
iCloud is an important
and thriving part

01:09:50.116 --> 01:09:51.826 A:middle
of the Apple ecosystem.

01:09:53.036 --> 01:09:56.746 A:middle
We have well over 400 million
users, and we're continuing

01:09:56.746 --> 01:09:59.886 A:middle
to improve and add new
features to it all the time.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:10:01.466 --> 01:10:03.596 A:middle
First, let's talk
about iCloud Drive.

01:10:05.686 --> 01:10:08.276 A:middle
So, we introduced documents
in the cloud a few years ago,

01:10:08.276 --> 01:10:11.976 A:middle
of course, and it provides a
seamless, in-app experience

01:10:11.976 --> 01:10:14.756 A:middle
to getting your files from
device, device, to the Mac.

01:10:15.346 --> 01:10:17.206 A:middle
And that's great, if you happen

01:10:17.206 --> 01:10:20.246 A:middle
to have the same application
running on your phone,

01:10:20.246 --> 01:10:23.716 A:middle
your iPad, and your Mac, but
that's not always the case.

01:10:25.926 --> 01:10:28.966 A:middle
iCloud Drive gives you a
folder right there in Finder,

01:10:29.226 --> 01:10:31.236 A:middle
where you can manage
your files directly.

01:10:31.926 --> 01:10:34.756 A:middle
And we're even making
this available

01:10:34.756 --> 01:10:36.716 A:middle
on Windows too, in the Explorer.

01:10:37.786 --> 01:10:39.966 A:middle
Now, if you're already
a document-based app,

01:10:40.286 --> 01:10:41.926 A:middle
it's actually pretty
easy for you

01:10:41.926 --> 01:10:43.806 A:middle
to add support for iCloud Drive.

01:10:44.646 --> 01:10:47.886 A:middle
On the Mac, well, you get it
basically for free with AppKit.

01:10:48.936 --> 01:10:51.906 A:middle
On iOS, however, you
can't access the files

01:10:51.906 --> 01:10:56.366 A:middle
in iCloud Drive directly without
some form of user intervention.

01:10:58.286 --> 01:11:01.486 A:middle
Well, that's done in this
new UIDocumentPicker class,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:10:58.286 --> 01:11:01.486 A:middle
Well, that's done in this
new UIDocumentPicker class,

01:11:01.576 --> 01:11:04.466 A:middle
which lets the user select
the files that they want

01:11:04.466 --> 01:11:05.956 A:middle
to use in your application.

01:11:06.866 --> 01:11:09.986 A:middle
We then dynamically extend
your application sandbox

01:11:09.986 --> 01:11:12.746 A:middle
around those files
so that you can read

01:11:12.746 --> 01:11:14.186 A:middle
and write them directly,
without having

01:11:14.186 --> 01:11:15.916 A:middle
to make a copy of
anything anymore.

01:11:16.876 --> 01:11:19.876 A:middle
And this even works across
different application containers

01:11:20.256 --> 01:11:23.076 A:middle
so that multiple cooperating
applications can all work

01:11:23.076 --> 01:11:25.016 A:middle
together on the same files.

01:11:26.936 --> 01:11:30.956 A:middle
We told you earlier how document
providers let you extend your

01:11:30.956 --> 01:11:33.486 A:middle
device with alternate
file storage systems,

01:11:33.906 --> 01:11:36.466 A:middle
and these are all managed
by the UIDocumentPicker.

01:11:36.786 --> 01:11:39.356 A:middle
And so once you're adopting
that, there's nothing else

01:11:39.356 --> 01:11:42.486 A:middle
for you to have to do in your
application to take advantage

01:11:42.486 --> 01:11:43.906 A:middle
of these document providers.

01:11:44.626 --> 01:11:45.806 A:middle
And that's iCloud Drive.

01:11:45.866 --> 01:11:46.876 A:middle
We think it's pretty easy.

01:11:48.786 --> 01:11:50.956 A:middle
Now, I'm really excited
to be able

01:11:50.956 --> 01:11:52.566 A:middle
to tell you a bit
about CloudKit.

01:11:53.486 --> 01:11:57.666 A:middle
Simply put, CloudKit lets you
write client server applications

01:11:58.076 --> 01:11:59.856 A:middle
without having to
write the server part.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:12:00.906 --> 01:12:02.386 A:middle
Let's say you've got a hot idea

01:12:02.386 --> 01:12:05.276 A:middle
for a coffee shop review
service or, I don't know,

01:12:05.276 --> 01:12:06.546 A:middle
a photo sharing service.

01:12:07.696 --> 01:12:10.856 A:middle
Well, here's what you don't
have to do with CloudKit.

01:12:13.206 --> 01:12:16.556 A:middle
You don't have to write any
server code, you don't have

01:12:16.556 --> 01:12:20.536 A:middle
to operate a 24-by-7
service, and you don't have

01:12:20.536 --> 01:12:21.726 A:middle
to deploy any servers.

01:12:22.876 --> 01:12:25.296 A:middle
And in fact, once you
become wildly successful,

01:12:26.226 --> 01:12:28.116 A:middle
here's something else
that you don't have to do.

01:12:30.026 --> 01:12:30.306 A:middle
All-

01:12:31.516 --> 01:12:35.576 A:middle
[ Applause ]

01:12:36.076 --> 01:12:39.156 A:middle
All you need to do to build
a client server application

01:12:39.226 --> 01:12:44.286 A:middle
with CloudKit is write your iOS
and Mac app, and we take care

01:12:44.286 --> 01:12:45.726 A:middle
of all of the rest
of it for you.

01:12:47.236 --> 01:12:48.966 A:middle
So, when we were
designing CloudKit,

01:12:49.406 --> 01:12:52.776 A:middle
we asked ourselves the question,
"What do you need in the cloud

01:12:53.016 --> 01:12:54.376 A:middle
to be able to all of this?"

01:12:55.966 --> 01:12:58.306 A:middle
Well, a database seems
like a good place to start.

01:12:58.876 --> 01:13:01.786 A:middle
We've got records and
relationships, queries,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:12:58.876 --> 01:13:01.786 A:middle
We've got records and
relationships, queries,

01:13:01.786 --> 01:13:03.306 A:middle
all the things you
come to expect

01:13:03.306 --> 01:13:04.716 A:middle
from an OS-equal database.

01:13:05.956 --> 01:13:08.406 A:middle
We have an asset API
to efficiently store

01:13:08.406 --> 01:13:10.656 A:middle
and retrieve large
blobs of data.

01:13:10.656 --> 01:13:13.446 A:middle
And we have a subscription
service.

01:13:14.406 --> 01:13:17.336 A:middle
You can think of the
subscription service as kind

01:13:17.336 --> 01:13:20.156 A:middle
of like a long-running
query on the server,

01:13:20.566 --> 01:13:23.946 A:middle
and as new records are matched
by the query, iCloud will send

01:13:23.946 --> 01:13:26.406 A:middle
out push notifications
to all of the devices

01:13:26.406 --> 01:13:28.716 A:middle
that have registered an
interest in that subscription.

01:13:30.196 --> 01:13:33.446 A:middle
We've built a developer
portal so that you can go

01:13:33.446 --> 01:13:35.306 A:middle
and take a look exactly
at what's going

01:13:35.306 --> 01:13:37.116 A:middle
on with your service
in the Cloud.

01:13:38.466 --> 01:13:41.016 A:middle
And of course, you're
going to want users.

01:13:42.216 --> 01:13:45.136 A:middle
Well, it turns out, we've got
rather a lot of them in iCloud,

01:13:45.596 --> 01:13:49.456 A:middle
and every single one of those
iCloud users could be your user

01:13:49.456 --> 01:13:50.056 A:middle
as well.

01:13:50.146 --> 01:13:53.516 A:middle
There's no account to create, no
signup, or any hoops they have

01:13:53.516 --> 01:13:56.296 A:middle
to jump through, and we think
that's pretty huge for you.

01:13:57.516 --> 01:14:03.196 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:13:57.516 --> 01:14:03.196 A:middle
[ Applause ]

01:14:03.696 --> 01:14:06.796 A:middle
As Craig told you this
morning, it's basically free

01:14:07.406 --> 01:14:08.916 A:middle
up to these maximum limits.

01:14:09.726 --> 01:14:12.556 A:middle
Now, that's one petabyte
of asset data.

01:14:13.456 --> 01:14:14.866 A:middle
To put this in perspective,

01:14:15.136 --> 01:14:17.486 A:middle
let's say that you're building
a photo sharing service

01:14:17.486 --> 01:14:19.426 A:middle
and you're using the
same image size as some

01:14:19.426 --> 01:14:20.966 A:middle
of your popular competitors.

01:14:22.396 --> 01:14:25.326 A:middle
That would let you
store 10 billion photos

01:14:25.466 --> 01:14:27.286 A:middle
in iCloud for free.

01:14:27.286 --> 01:14:30.636 A:middle
And we think that's
pretty huge too.

01:14:31.576 --> 01:14:35.126 A:middle
We're doubling down on
this technology ourselves.

01:14:35.596 --> 01:14:39.206 A:middle
iCloud Photo Library and iCloud
Drive are both built on top

01:14:39.206 --> 01:14:42.186 A:middle
of CloudKit and we see
this as the foundation

01:14:42.236 --> 01:14:43.896 A:middle
for our services moving forward.

01:14:45.306 --> 01:14:47.986 A:middle
We think this is really cool,
and we've been working on it

01:14:47.986 --> 01:14:50.396 A:middle
for a while and can't wait
to see what you do with this.

01:14:51.056 --> 01:14:53.076 A:middle
We think this is going to
open up a whole new class

01:14:53.076 --> 01:14:54.236 A:middle
of application for you.

01:14:55.066 --> 01:14:58.256 A:middle
And that's what we
have for iCloud.

01:14:59.186 --> 01:15:01.116 A:middle
Now, I'd like to turn
it over to Andreas


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:14:59.186 --> 01:15:01.116 A:middle
Now, I'd like to turn
it over to Andreas

01:15:01.116 --> 01:15:02.806 A:middle
to tell you about OS X Yosemite.

01:15:03.166 --> 01:15:03.836 A:middle
Thank you.

01:15:04.516 --> 01:15:11.146 A:middle
[ Applause ]

01:15:11.646 --> 01:15:11.976 A:middle
&gt;&gt; All right.

01:15:11.976 --> 01:15:13.276 A:middle
Let's talk about OS X.

01:15:14.996 --> 01:15:18.586 A:middle
Yosemite is a big new
release with an all-new look.

01:15:19.096 --> 01:15:22.426 A:middle
We carefully evolved this look
from our previous releases

01:15:22.426 --> 01:15:25.406 A:middle
to make it truly beautiful
without being disruptive.

01:15:26.906 --> 01:15:29.076 A:middle
The basic ideas behind
the redesign were

01:15:29.076 --> 01:15:32.876 A:middle
to increase consistency, to
reduce visual noise and clutter,

01:15:33.716 --> 01:15:37.106 A:middle
to make animations more subtle,
and increase the vibrancy

01:15:37.106 --> 01:15:38.816 A:middle
of the UI for more liveliness.

01:15:39.976 --> 01:15:41.796 A:middle
Let's go over the
cornerstones of the new look

01:15:41.846 --> 01:15:43.506 A:middle
and what they mean
to app developers.

01:15:45.196 --> 01:15:47.896 A:middle
We started by completely
redesigning our window chrome.

01:15:47.896 --> 01:15:51.526 A:middle
We made our toolbars and
our title bars simpler

01:15:51.636 --> 01:15:52.246 A:middle
and more compact.

01:15:53.946 --> 01:15:56.536 A:middle
But for non-document-based apps,
we went a whole lot further

01:15:56.536 --> 01:15:58.396 A:middle
and defined a new
style of window chrome.

01:15:59.396 --> 01:16:02.046 A:middle
Many of our apps now
use a combined toolbar


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:15:59.396 --> 01:16:02.046 A:middle
Many of our apps now
use a combined toolbar

01:16:02.196 --> 01:16:04.286 A:middle
in which we merge the
title bar and the toolbar

01:16:04.566 --> 01:16:06.036 A:middle
into a single, compact row.

01:16:06.186 --> 01:16:09.086 A:middle
This is a great way to
give users more space

01:16:09.086 --> 01:16:11.506 A:middle
for their content,
but it only works well

01:16:11.506 --> 01:16:14.416 A:middle
if you have few enough toolbar
items to leave enough space

01:16:14.416 --> 01:16:16.826 A:middle
so that the user can grab
the window and drag it

01:16:16.826 --> 01:16:19.706 A:middle
around on the screen, so this
is not recommended for all apps.

01:16:21.646 --> 01:16:24.386 A:middle
Now, for several of our apps,
we also moved the search fields,

01:16:24.496 --> 01:16:26.966 A:middle
which have historically been
located at the far right side

01:16:26.996 --> 01:16:29.686 A:middle
of our toolbars, smack into
the middle of the window

01:16:30.006 --> 01:16:32.916 A:middle
if searching is the primary way
of interacting with that app,

01:16:33.466 --> 01:16:36.166 A:middle
such as is the case
in Maps and Safari.

01:16:37.966 --> 01:16:40.996 A:middle
And for sidebar apps, which have
essentially no toolbar items,

01:16:41.306 --> 01:16:42.636 A:middle
we went yet another step further

01:16:42.636 --> 01:16:44.636 A:middle
and used only partial
title bars.

01:16:45.416 --> 01:16:47.816 A:middle
These windows, they have the
normal window controls on top

01:16:47.816 --> 01:16:50.096 A:middle
of the sidebar, but
otherwise they stretch

01:16:50.096 --> 01:16:52.626 A:middle
out the content all the way
to the edges of the window.

01:16:55.366 --> 01:16:57.916 A:middle
Now, one thing that is
interesting about our new UI is

01:16:57.916 --> 01:17:00.796 A:middle
that it uses a number of
new transparent materials.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:16:57.916 --> 01:17:00.796 A:middle
that it uses a number of
new transparent materials.

01:17:01.476 --> 01:17:03.506 A:middle
For example, if you
scrolled some window content

01:17:03.506 --> 01:17:06.356 A:middle
under the title bars, that
content will still show

01:17:06.406 --> 01:17:08.176 A:middle
through in a heavily
blurred way,

01:17:08.426 --> 01:17:10.946 A:middle
giving the user a better
sense for the entire document.

01:17:11.896 --> 01:17:13.936 A:middle
And the new translucent
sidebars still

01:17:13.936 --> 01:17:15.856 A:middle
at the desktop background
shine through,

01:17:16.256 --> 01:17:19.836 A:middle
so that really gives the user a
way to customize the entire look

01:17:19.836 --> 01:17:21.016 A:middle
and feel of the system.

01:17:23.296 --> 01:17:25.946 A:middle
Now, if you're using our
standard AppKit controls,

01:17:26.076 --> 01:17:27.686 A:middle
such as a layer with
scroll view,

01:17:28.066 --> 01:17:30.936 A:middle
your apps will automatically
inherit the right new look,

01:17:31.926 --> 01:17:34.556 A:middle
and for more custom cases,
you're exposing a number

01:17:34.556 --> 01:17:38.586 A:middle
of new APIs that will get you
the same effect that you see

01:17:38.586 --> 01:17:42.116 A:middle
in our, in our system apps.

01:17:42.596 --> 01:17:43.376 A:middle
One thing you should watch

01:17:43.376 --> 01:17:45.666 A:middle
out for is the readability
of your text.

01:17:45.666 --> 01:17:48.826 A:middle
While the new translucent
effects are very beautiful,

01:17:49.376 --> 01:17:52.006 A:middle
they are not a great fit
for primary user content,

01:17:52.166 --> 01:17:53.696 A:middle
so use these effects
selectively.

01:17:56.226 --> 01:17:58.616 A:middle
Now, we've also changed
the system font in our UI.

01:17:58.616 --> 01:18:01.646 A:middle
We changed it from Lucida
Grande to Helvetica Neue,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:17:58.616 --> 01:18:01.646 A:middle
We changed it from Lucida
Grande to Helvetica Neue,

01:18:02.816 --> 01:18:03.926 A:middle
and that's how you
pronounce that.

01:18:04.516 --> 01:18:12.846 A:middle
[ Laughter ]

01:18:13.346 --> 01:18:16.546 A:middle
So, we hand-tweaked the
metrics of the new system font

01:18:16.546 --> 01:18:19.306 A:middle
so that they are very,
very close to the metrics

01:18:19.306 --> 01:18:22.036 A:middle
of the old Lucida Grande
font, with a result

01:18:22.106 --> 01:18:25.436 A:middle
that strings have almost the
same size and usually fit

01:18:25.436 --> 01:18:28.216 A:middle
in the space that you've
allocated in your UI so far.

01:18:31.016 --> 01:18:33.086 A:middle
Now, to help with
binary compatibility,

01:18:33.676 --> 01:18:36.846 A:middle
AppKit will actually detect,
AppKit controls will detect

01:18:37.286 --> 01:18:38.956 A:middle
if your strings are
being clipped.

01:18:39.546 --> 01:18:40.856 A:middle
And in that case,
they will ever so,

01:18:41.216 --> 01:18:44.086 A:middle
ever so slightly compress
the strings and make them fit

01:18:44.086 --> 01:18:45.236 A:middle
into the available space.

01:18:47.926 --> 01:18:49.216 A:middle
In addition to the system font,

01:18:49.426 --> 01:18:52.566 A:middle
we've also updated
our application icons

01:18:52.616 --> 01:18:54.506 A:middle
and the glyphs used
throughout the system.

01:18:55.406 --> 01:18:57.606 A:middle
We've tried to remove
unnecessary variations,

01:18:57.676 --> 01:19:00.596 A:middle
and we've standardized on three
basic shapes of app icons:


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:18:57.676 --> 01:19:00.596 A:middle
and we've standardized on three
basic shapes of app icons:

01:19:01.196 --> 01:19:03.326 A:middle
circle, square, and
tilted rectangle.

01:19:04.676 --> 01:19:07.286 A:middle
Our application icons are
now, now more uniform,

01:19:07.706 --> 01:19:08.906 A:middle
they use more vibrant colors,

01:19:09.006 --> 01:19:13.126 A:middle
and they also remove unnecessary
variations and adornments.

01:19:16.356 --> 01:19:18.536 A:middle
Our AppKit controls
now use animations

01:19:18.536 --> 01:19:20.386 A:middle
that are more meaningful,
and in general,

01:19:20.706 --> 01:19:22.486 A:middle
they support a lot
more styles for,

01:19:22.626 --> 01:19:24.206 A:middle
to support the new
appearance settings

01:19:24.206 --> 01:19:26.056 A:middle
in addition to vibrancy
settings.

01:19:26.726 --> 01:19:28.116 A:middle
Specifically for vibrancy,

01:19:28.206 --> 01:19:30.326 A:middle
they push out their
colors a lot more strongly,

01:19:30.456 --> 01:19:32.296 A:middle
which can really
help its readability

01:19:32.466 --> 01:19:33.606 A:middle
on translucent surfaces.

01:19:35.946 --> 01:19:38.356 A:middle
And another big change
that Jeff just mentioned is

01:19:38.406 --> 01:19:41.756 A:middle
that Yosemite strongly
de-emphasizes dashboard widgets

01:19:41.906 --> 01:19:44.326 A:middle
in favor of the new
Notification Center widgets.

01:19:45.336 --> 01:19:47.856 A:middle
While we still fully support
dashboard, we are now moving

01:19:47.856 --> 01:19:50.916 A:middle
over to running native widgets
inside Notification Center,

01:19:51.506 --> 01:19:52.926 A:middle
and if you're a dashboard
developer,

01:19:53.236 --> 01:19:55.606 A:middle
we suggest that you quickly
adopt the new technology,

01:19:55.606 --> 01:19:58.006 A:middle
which we believe will be even
more popular with our users.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:20:01.786 --> 01:20:03.186 A:middle
I'd also like to take
a moment and talk

01:20:03.186 --> 01:20:05.146 A:middle
about our accessibility APIs.

01:20:05.606 --> 01:20:08.076 A:middle
Accessibility is a topic
we care about deeply,

01:20:09.056 --> 01:20:11.786 A:middle
and along with the new look,
we made it dramatically simpler

01:20:12.106 --> 01:20:14.476 A:middle
to let your applications
work with voiceover

01:20:14.616 --> 01:20:16.686 A:middle
and our other accessibility
technologies.

01:20:17.306 --> 01:20:18.866 A:middle
We took, we took some
lessons we learned on iOS

01:20:19.066 --> 01:20:23.046 A:middle
and created a new API that
requires much less coding.

01:20:23.796 --> 01:20:24.826 A:middle
So, please take some time

01:20:24.826 --> 01:20:26.786 A:middle
and add this important
capability to your apps.

01:20:27.606 --> 01:20:30.356 A:middle
It has never been easier and
it will change people's lives.

01:20:33.356 --> 01:20:35.686 A:middle
So, that was a quick tour
of the new look in Yosemite.

01:20:36.646 --> 01:20:38.576 A:middle
Once we've shipped this
release later this year,

01:20:38.646 --> 01:20:40.776 A:middle
users will expect
that your apps fit

01:20:40.776 --> 01:20:42.506 A:middle
in with the new look
of Yosemite.

01:20:42.866 --> 01:20:44.776 A:middle
So, please take some time
over the next few months

01:20:45.096 --> 01:20:46.706 A:middle
and change the style to fit

01:20:46.706 --> 01:20:48.826 A:middle
in with what we've done
in our system apps.

01:20:50.586 --> 01:20:52.276 A:middle
Next, we're going
to talk about Xcode,

01:20:52.526 --> 01:20:54.016 A:middle
and for that section
I'm going to hand

01:20:54.016 --> 01:20:54.656 A:middle
over to Matthew [inaudible].

01:20:56.516 --> 01:21:02.746 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:20:56.516 --> 01:21:02.746 A:middle
[ Applause ]

01:21:03.246 --> 01:21:03.786 A:middle
&gt;&gt; Thank you, Andreas.

01:21:05.836 --> 01:21:08.826 A:middle
Now, you've already had a sneak
peek into some of the features

01:21:08.826 --> 01:21:12.626 A:middle
of the new Xcode tools for
iOS 8 and OS X Yosemite.

01:21:14.016 --> 01:21:14.756 A:middle
Playgrounds.

01:21:15.106 --> 01:21:16.846 A:middle
A powerful and interactive way

01:21:16.846 --> 01:21:19.516 A:middle
to work with, and
play with, Swift.

01:21:21.366 --> 01:21:24.746 A:middle
The new integrated SpriteKit
and SceneKit design tools,

01:21:25.006 --> 01:21:29.266 A:middle
enabling you to design truly
amazing 2D and 3D applications.

01:21:30.856 --> 01:21:33.356 A:middle
And universal storyboards
with size classes.

01:21:33.476 --> 01:21:36.866 A:middle
A great way to conceptualize
and design your applications

01:21:36.936 --> 01:21:38.606 A:middle
for both iPhone and iPad.

01:21:39.786 --> 01:21:43.036 A:middle
Three great new features, and
we are just getting started.

01:21:44.796 --> 01:21:49.066 A:middle
Universal storyboards, size
classes, and autolayout combine

01:21:49.066 --> 01:21:52.866 A:middle
to enable you to design for all
devices using a single interface

01:21:52.866 --> 01:21:54.666 A:middle
document, and we're
bringing this

01:21:54.846 --> 01:21:57.786 A:middle
to another area, Launch Images.

01:21:58.876 --> 01:22:01.896 A:middle
With iOS 8, you can now provide
an Interface Builder document


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:21:58.876 --> 01:22:01.896 A:middle
With iOS 8, you can now provide
an Interface Builder document

01:22:02.206 --> 01:22:04.696 A:middle
and, at runtime, have
the OS generate all

01:22:04.696 --> 01:22:06.886 A:middle
of the necessary
Launch Images for you.

01:22:07.516 --> 01:22:14.426 A:middle
[ Applause ]

01:22:14.926 --> 01:22:17.996 A:middle
So now you no longer need to
provide the individual assets

01:22:18.286 --> 01:22:21.816 A:middle
and you can use the same great
design tools for your interfaces

01:22:22.116 --> 01:22:23.416 A:middle
and your launch presentations.

01:22:24.966 --> 01:22:28.366 A:middle
Now, storyboards have been a
great addition to the iOS tools

01:22:28.636 --> 01:22:31.756 A:middle
for development, and we are
extending their use even further

01:22:31.756 --> 01:22:35.646 A:middle
this year by bringing
them to you for OS X.

01:22:36.516 --> 01:22:38.836 A:middle
[ Applause ]

01:22:39.336 --> 01:22:41.896 A:middle
Storyboards work with
the new view controllers

01:22:41.896 --> 01:22:44.416 A:middle
in OS X Yosemite to
make it really easy

01:22:44.416 --> 01:22:46.456 A:middle
to design great Mac
applications.

01:22:47.186 --> 01:22:49.406 A:middle
You can design your
apps using scenes

01:22:49.726 --> 01:22:52.396 A:middle
and then connect those scenes
together very simply using the

01:22:52.396 --> 01:22:54.236 A:middle
familiar Interface
Builder gestures.

01:22:55.936 --> 01:22:59.016 A:middle
Interactive workflows, such
as popovers and sheets,

01:22:59.316 --> 01:23:01.946 A:middle
can now be designed wholly in
the Interface Builder canvas,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:22:59.316 --> 01:23:01.946 A:middle
can now be designed wholly in
the Interface Builder canvas,

01:23:02.506 --> 01:23:04.666 A:middle
and containment relationships
such as tabs

01:23:04.926 --> 01:23:08.966 A:middle
and splits-those use the new
OS X view controller APIs

01:23:09.216 --> 01:23:12.296 A:middle
to make customization and
configuration really easy.

01:23:13.106 --> 01:23:16.186 A:middle
So now you can use storyboards
to design all of your interfaces

01:23:16.396 --> 01:23:19.996 A:middle
for both iOS and OS X.

01:23:20.126 --> 01:23:22.216 A:middle
We have some other great
design tool additions for you.

01:23:23.296 --> 01:23:26.626 A:middle
Asset catalogs now include
support for more asset types,

01:23:26.856 --> 01:23:31.116 A:middle
including vector art like PDF
and also supports marking images

01:23:31.116 --> 01:23:34.086 A:middle
as templates for the OS to
use as stencils at runtime.

01:23:36.086 --> 01:23:38.436 A:middle
Interface Builder
documents are now searchable,

01:23:38.736 --> 01:23:40.946 A:middle
both in the editor
and projectwide.

01:23:41.516 --> 01:23:46.676 A:middle
[ Applause ]

01:23:47.176 --> 01:23:50.036 A:middle
Now, this searching
works on both strings

01:23:50.166 --> 01:23:53.476 A:middle
and on property values like
connections and class names.

01:23:53.816 --> 01:23:56.946 A:middle
So, investigation and making
mass change is really simple.

01:23:58.776 --> 01:24:01.246 A:middle
And for iOS, we are
bringing custom fonts


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:23:58.776 --> 01:24:01.246 A:middle
And for iOS, we are
bringing custom fonts

01:24:01.246 --> 01:24:02.776 A:middle
into the Interface
Builder canvas.

01:24:03.516 --> 01:24:08.946 A:middle
[ Applause ]

01:24:09.446 --> 01:24:11.356 A:middle
So now these are rendered
live, and getting the layout

01:24:11.356 --> 01:24:13.336 A:middle
and precision you
want is really easy.

01:24:14.746 --> 01:24:17.166 A:middle
Now, in addition to
designing applications to work

01:24:17.166 --> 01:24:19.966 A:middle
on multiple devices, you
want your apps to ship

01:24:19.966 --> 01:24:23.026 A:middle
to as many people as
possible, and for this release,

01:24:23.026 --> 01:24:25.756 A:middle
shipping to a worldwide
audience is even easier.

01:24:26.606 --> 01:24:29.556 A:middle
For this release, we're
including support for XLIFF,

01:24:29.696 --> 01:24:31.926 A:middle
the industry-standard
format for managing

01:24:31.926 --> 01:24:33.856 A:middle
and exchanging localized data.

01:24:35.186 --> 01:24:36.896 A:middle
Xcode now includes a workflow

01:24:36.896 --> 01:24:39.716 A:middle
to automatically export
all the necessary content

01:24:39.756 --> 01:24:40.556 A:middle
for localization.

01:24:41.016 --> 01:24:43.376 A:middle
We'll run the necessary
processes on your source

01:24:43.376 --> 01:24:46.206 A:middle
and interface documents,
and in just a few clicks,

01:24:46.366 --> 01:24:48.496 A:middle
you have XLIFF to send
to your localizers,

01:24:49.156 --> 01:24:51.936 A:middle
and integrating the changes
back from them is just as easy.

01:24:53.056 --> 01:24:55.406 A:middle
Now, a benefit of this is
that you no longer need

01:24:55.406 --> 01:24:58.176 A:middle
to use strings files for
your development regions.

01:24:58.446 --> 01:25:01.586 A:middle
You can work solely in your
source and interface documents.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:24:58.446 --> 01:25:01.586 A:middle
You can work solely in your
source and interface documents.

01:25:02.516 --> 01:25:07.986 A:middle
[ Applause ]

01:25:08.486 --> 01:25:09.396 A:middle
And if that wasn't enough,

01:25:09.396 --> 01:25:11.326 A:middle
we're going to bring
the localization content

01:25:11.326 --> 01:25:14.066 A:middle
into the Interface Builder
preview editor as well.

01:25:14.656 --> 01:25:17.266 A:middle
So, now in addition to
size classes and devices,

01:25:17.526 --> 01:25:19.766 A:middle
you can pick from any of
the localization languages

01:25:20.016 --> 01:25:22.066 A:middle
in your project and
view the results.

01:25:22.066 --> 01:25:24.976 A:middle
If you've not yet
localized, fret not.

01:25:25.286 --> 01:25:27.596 A:middle
You can use one of the
built-in pseudo localizations

01:25:27.876 --> 01:25:29.376 A:middle
to see how your interface
will respond.

01:25:30.346 --> 01:25:31.346 A:middle
So, now more than ever,

01:25:31.346 --> 01:25:34.006 A:middle
it is easy to ship
applications for everybody.

01:25:36.516 --> 01:25:40.886 A:middle
[ Applause ]

01:25:41.386 --> 01:25:43.796 A:middle
So we have a lot of great
design tools that work together

01:25:43.796 --> 01:25:46.706 A:middle
to make a really live and
interactive experience.

01:25:46.996 --> 01:25:49.326 A:middle
But there's been one
piece that's been missing,

01:25:50.016 --> 01:25:51.856 A:middle
and that's your custom controls.

01:25:52.816 --> 01:25:55.306 A:middle
Starting today, that
is no longer,

01:25:55.356 --> 01:25:57.836 A:middle
because your custom controls
are now rendered live

01:25:58.086 --> 01:25:59.586 A:middle
on the Interface Builder canvas.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:26:00.516 --> 01:26:08.126 A:middle
[ Applause ]

01:26:08.626 --> 01:26:10.416 A:middle
I was pretty sure you
were going to like that.

01:26:10.496 --> 01:26:12.646 A:middle
So, let's go look at a
demo and see how it works.

01:26:21.076 --> 01:26:23.236 A:middle
So, here we have a photo kind

01:26:23.236 --> 01:26:25.716 A:middle
of scavenger hunt
application called Shutterbugs,

01:26:26.126 --> 01:26:28.406 A:middle
and on the main screen
we have a custom control.

01:26:28.976 --> 01:26:31.636 A:middle
It's showing the image from
one of the scavenger hunts.

01:26:31.746 --> 01:26:34.586 A:middle
It's masked to a circle and
has some adornments around it.

01:26:35.456 --> 01:26:37.856 A:middle
So, let's take a look in
Xcode 6 on how we will work

01:26:38.146 --> 01:26:39.206 A:middle
with this custom control.

01:26:41.376 --> 01:26:42.256 A:middle
Here's my project.

01:26:42.356 --> 01:26:44.906 A:middle
On the left-hand side we have
our universal storyboard,

01:26:45.326 --> 01:26:47.956 A:middle
and on the right-hand side I
have the code for my control.

01:26:48.776 --> 01:26:51.356 A:middle
It's written in Swift, and
I'm also taking advantage

01:26:51.356 --> 01:26:54.246 A:middle
of an iOS framework so
I can reuse this control

01:26:54.246 --> 01:26:55.476 A:middle
across my applications.

01:26:56.606 --> 01:26:58.636 A:middle
Now, in this case, we see our
custom control is currently

01:26:58.636 --> 01:27:00.636 A:middle
rendering as just the big
white box here on the left.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:26:58.636 --> 01:27:00.636 A:middle
rendering as just the big
white box here on the left.

01:27:01.316 --> 01:27:03.966 A:middle
But surfacing it in the editor
as designable is really easy.

01:27:04.626 --> 01:27:07.446 A:middle
All you need to do is add
in the IB designable keyword

01:27:07.446 --> 01:27:10.376 A:middle
to my class, and the tools
will take care of the rest.

01:27:11.006 --> 01:27:13.296 A:middle
Now, my custom control
is just rendered inside

01:27:13.296 --> 01:27:14.586 A:middle
of the Interface Builder canvas.

01:27:15.516 --> 01:27:22.086 A:middle
[ Applause ]

01:27:22.586 --> 01:27:24.156 A:middle
Now, you're looking at it
going, "That doesn't look

01:27:24.156 --> 01:27:25.156 A:middle
like the picture did."

01:27:25.156 --> 01:27:28.026 A:middle
There are some values, like
the photo and the name,

01:27:28.026 --> 01:27:29.826 A:middle
that I typically
specify at runtime

01:27:29.826 --> 01:27:31.326 A:middle
on an individual instance.

01:27:32.026 --> 01:27:32.956 A:middle
We'll get to that in a moment.

01:27:33.906 --> 01:27:36.726 A:middle
There are some other properties
of my control that I would

01:27:36.726 --> 01:27:39.806 A:middle
like to allow people to
customize in Interface Builder,

01:27:39.806 --> 01:27:42.546 A:middle
and the metaphor for that
is using the inspector.

01:27:43.416 --> 01:27:45.066 A:middle
We've made that really
easy, too.

01:27:45.566 --> 01:27:47.776 A:middle
So, for any property
that I want to expose,

01:27:47.986 --> 01:27:51.586 A:middle
I can now add the IB inspectable
keyword, and I will do

01:27:51.586 --> 01:27:53.366 A:middle
that on a handful
of the properties

01:27:53.426 --> 01:27:54.496 A:middle
that I would like to expose.

01:27:55.816 --> 01:27:58.286 A:middle
Once I do that and go
back to Interface Builder

01:27:58.286 --> 01:27:59.516 A:middle
and select my control,

01:27:59.516 --> 01:28:02.196 A:middle
at the top of the
inspector are now controls


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:27:59.516 --> 01:28:02.196 A:middle
at the top of the
inspector are now controls

01:28:02.196 --> 01:28:04.116 A:middle
for my items, for my properties.

01:28:05.516 --> 01:28:11.426 A:middle
[ Applause ]

01:28:11.926 --> 01:28:13.216 A:middle
So, let's adjust
this a little bit.

01:28:13.216 --> 01:28:14.556 A:middle
I can make the border thicker.

01:28:15.036 --> 01:28:18.026 A:middle
I can also pick a different
color font for the bezel.

01:28:19.016 --> 01:28:21.426 A:middle
So, just like that, I've been
able to customize the control

01:28:21.426 --> 01:28:23.756 A:middle
with the limited
capability that I wanted

01:28:23.756 --> 01:28:25.156 A:middle
to expose to my developers.

01:28:26.346 --> 01:28:28.956 A:middle
Now, let's go back to the
image content I was talking

01:28:28.956 --> 01:28:29.566 A:middle
to you before.

01:28:30.556 --> 01:28:34.186 A:middle
In some cases, you really want
the closest representation

01:28:34.256 --> 01:28:36.796 A:middle
to your control as possible,
but you don't necessarily want

01:28:36.796 --> 01:28:39.136 A:middle
to set values that are going to
work for everybody at runtime.

01:28:40.086 --> 01:28:41.356 A:middle
We have a great mechanism
for you.

01:28:41.526 --> 01:28:44.796 A:middle
There's new API on our
controls called Prepare

01:28:44.856 --> 01:28:45.776 A:middle
for Interface Builder.

01:28:46.256 --> 01:28:49.246 A:middle
And this is your ability to
provide all the necessary setup

01:28:49.246 --> 01:28:51.786 A:middle
and configuration of your
control for how you want it

01:28:51.786 --> 01:28:53.046 A:middle
to look while you're designing.

01:28:53.666 --> 01:28:54.946 A:middle
Now, this is just for design.

01:28:54.946 --> 01:28:57.616 A:middle
It won't ship this way, but
it gives you all the ability

01:28:57.616 --> 01:28:59.536 A:middle
to surface your controls
in the way you want.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:29:02.586 --> 01:29:04.766 A:middle
Now, I've been working with
my, thank you [applause].

01:29:08.116 --> 01:29:08.746 A:middle
There's still more.

01:29:10.446 --> 01:29:12.266 A:middle
I've been actually
working with my application

01:29:12.266 --> 01:29:15.436 A:middle
and localizing it, and I'd like
to see how my progress is doing.

01:29:15.956 --> 01:29:17.566 A:middle
So for that, I will
switch the assistant

01:29:17.906 --> 01:29:21.466 A:middle
over to the preview editor, and
here I will zoom in a little bit

01:29:21.466 --> 01:29:22.526 A:middle
so we can see the results.

01:29:23.516 --> 01:29:26.426 A:middle
Now, in the bottom right of the
preview editor is now a list

01:29:26.426 --> 01:29:28.586 A:middle
of all the localizations
for my project.

01:29:29.506 --> 01:29:30.606 A:middle
I can switch into any one

01:29:30.606 --> 01:29:32.986 A:middle
of them-let's pick
Spanish-and we'll see

01:29:32.986 --> 01:29:34.256 A:middle
that the interface updates.

01:29:34.876 --> 01:29:36.526 A:middle
Now, it looks like
I'm doing pretty well.

01:29:36.526 --> 01:29:38.876 A:middle
The controls at the bottom
updated, but we'll see

01:29:38.876 --> 01:29:40.386 A:middle
that the name for
the control did not.

01:29:40.906 --> 01:29:43.096 A:middle
That's an indication to me that
there's still more work for me

01:29:43.156 --> 01:29:45.636 A:middle
to do, but I didn't have to
build and run to find that out.

01:29:46.986 --> 01:29:49.466 A:middle
Let's select a, select
another language and make sure

01:29:49.466 --> 01:29:50.866 A:middle
that everything's
looking correct.

01:29:51.316 --> 01:29:54.036 A:middle
I've selected German
here, and now we'll notice

01:29:54.036 --> 01:29:56.876 A:middle
that our interface is doing
somewhat of the right thing.

01:29:57.236 --> 01:30:00.646 A:middle
I've been using autolayout
to lay out my controls,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:29:57.236 --> 01:30:00.646 A:middle
I've been using autolayout
to lay out my controls,

01:30:01.016 --> 01:30:02.996 A:middle
and it's keeping the
items from overlapping,

01:30:03.276 --> 01:30:04.776 A:middle
but it's causing
one of the controls

01:30:04.776 --> 01:30:06.796 A:middle
to get clipped unnecessarily.

01:30:07.386 --> 01:30:09.046 A:middle
That's not quite
the UI I would like.

01:30:09.926 --> 01:30:11.106 A:middle
So, that's not a problem.

01:30:11.106 --> 01:30:12.376 A:middle
I can just go back over here

01:30:12.376 --> 01:30:13.806 A:middle
into the Interface
Builder canvas

01:30:14.066 --> 01:30:16.596 A:middle
and I can lower the priority
for one of those constraints.

01:30:17.776 --> 01:30:20.166 A:middle
Doing that, we'll now see
that on the right-hand side,

01:30:20.166 --> 01:30:21.176 A:middle
it lays out correctly.

01:30:21.866 --> 01:30:24.346 A:middle
So, just like that, I've been
able to design my interface

01:30:24.446 --> 01:30:26.966 A:middle
with my custom controls
and make sure it looks good

01:30:26.966 --> 01:30:27.996 A:middle
in all languages.

01:30:28.036 --> 01:30:31.976 A:middle
So, that's just a quick overview
of some of the great new tools

01:30:32.056 --> 01:30:32.836 A:middle
for Interface Builder.

01:30:33.516 --> 01:30:40.456 A:middle
[ Applause ]

01:30:40.956 --> 01:30:42.636 A:middle
Now, in addition to
great design tools,

01:30:42.636 --> 01:30:44.616 A:middle
we also have some great
new debugging tools

01:30:44.616 --> 01:30:45.176 A:middle
for you this year.

01:30:45.686 --> 01:30:47.436 A:middle
And it starts with
queue debugging.

01:30:49.146 --> 01:30:51.666 A:middle
Oftentimes when working with
blocks, it can be difficult

01:30:51.666 --> 01:30:53.666 A:middle
to keep track of where
your blocks are coming

01:30:53.666 --> 01:30:55.166 A:middle
from or going to.

01:30:56.296 --> 01:30:58.616 A:middle
Now, when you're debugging
your application and viewing

01:30:58.616 --> 01:31:01.876 A:middle
by queues, you will have not
only the executing blocks


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:30:58.616 --> 01:31:01.876 A:middle
by queues, you will have not
only the executing blocks

01:31:02.106 --> 01:31:04.426 A:middle
but all of the pending
blocks available as well.

01:31:05.306 --> 01:31:08.086 A:middle
And disclosing the pending
blocks will show you the

01:31:08.086 --> 01:31:10.656 A:middle
enqueueing backtrace,
the backtrace

01:31:10.656 --> 01:31:12.806 A:middle
on where this block was
added to this queue.

01:31:13.516 --> 01:31:17.566 A:middle
[ Applause ]

01:31:18.066 --> 01:31:19.406 A:middle
And the pending backtrace is,

01:31:19.506 --> 01:31:21.706 A:middle
the backtrace is not
just for pending blocks.

01:31:22.426 --> 01:31:26.316 A:middle
As you are executing and
evaluating your own blocks,

01:31:26.416 --> 01:31:29.526 A:middle
the pending, the backtrace
is also included there too.

01:31:29.826 --> 01:31:31.706 A:middle
So, now even more of the
history is available to you.

01:31:32.726 --> 01:31:35.556 A:middle
Now, you may be wondering, as my
block moves from queue to queue

01:31:35.556 --> 01:31:37.556 A:middle
to queue, do you
keep track of it?

01:31:37.646 --> 01:31:38.866 A:middle
And the answer is yes.

01:31:38.866 --> 01:31:40.626 A:middle
If you have a very
well-traveled block,

01:31:41.076 --> 01:31:42.426 A:middle
all that information
will be available

01:31:42.426 --> 01:31:43.576 A:middle
to you during debugging.

01:31:44.516 --> 01:31:49.796 A:middle
[ Applause ]

01:31:50.296 --> 01:31:51.756 A:middle
Next up are debug gauges.

01:31:52.346 --> 01:31:55.156 A:middle
The debug gauges are a great
way to get an overview of kind

01:31:55.156 --> 01:31:56.716 A:middle
of the performance
of your application,

01:31:57.286 --> 01:31:59.646 A:middle
and for this release,
we're adding two new gauges

01:31:59.996 --> 01:32:02.366 A:middle
in the form of network
I/O and disk I/O.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:31:59.996 --> 01:32:02.366 A:middle
in the form of network
I/O and disk I/O.

01:32:03.386 --> 01:32:05.156 A:middle
These gauges give
you insight into some

01:32:05.156 --> 01:32:07.436 A:middle
of the more intensive
operations for your application,

01:32:07.826 --> 01:32:11.146 A:middle
showing read and write activity
and also giving you access

01:32:11.196 --> 01:32:13.726 A:middle
to the list of active
resources in use.

01:32:15.646 --> 01:32:18.526 A:middle
We've also updated the
debug gauges for graphics

01:32:19.326 --> 01:32:20.456 A:middle
to work great with Metal.

01:32:20.756 --> 01:32:23.466 A:middle
So, now you have all the same
debugging and profiling tools

01:32:23.716 --> 01:32:25.106 A:middle
to tune your games in Metal.

01:32:27.316 --> 01:32:29.836 A:middle
And we've also updated the
iCloud gauge and utilities

01:32:29.836 --> 01:32:33.046 A:middle
to work great with CloudKit
and with iCloud documents.

01:32:34.236 --> 01:32:36.536 A:middle
A new addition that's
really helpful is

01:32:36.536 --> 01:32:40.346 A:middle
that this iOS simulator now
supports custom configurations.

01:32:40.726 --> 01:32:43.356 A:middle
So, it's separate user
data and applications.

01:32:44.226 --> 01:32:46.686 A:middle
This allows you to simulate
having multiple users

01:32:46.686 --> 01:32:49.766 A:middle
on your machine so now testing
synchronization and sharing

01:32:49.766 --> 01:32:51.306 A:middle
with iCloud is a breeze.

01:32:54.516 --> 01:32:58.676 A:middle
[ Applause ]

01:32:59.176 --> 01:33:01.576 A:middle
Testing is a very
important and key area to us,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:32:59.176 --> 01:33:01.576 A:middle
Testing is a very
important and key area to us,

01:33:01.776 --> 01:33:03.786 A:middle
and we are bringing you
two great new additions

01:33:03.866 --> 01:33:04.936 A:middle
in our testing frameworks.

01:33:05.406 --> 01:33:07.486 A:middle
The first is asynchronous
testing.

01:33:09.126 --> 01:33:12.216 A:middle
XE test now includes a
flexible API to allow you

01:33:12.216 --> 01:33:14.306 A:middle
to test your longer-running
systems.

01:33:15.476 --> 01:33:18.766 A:middle
You can set up your tests
with predefined expectations,

01:33:19.356 --> 01:33:22.586 A:middle
and those expectations can be
evaluated as your test runs.

01:33:23.976 --> 01:33:24.936 A:middle
When you get to the
end of your test,

01:33:25.306 --> 01:33:28.006 A:middle
if your expectations have
been met, your test passes.

01:33:28.376 --> 01:33:29.916 A:middle
If not, your test fails.

01:33:30.986 --> 01:33:32.976 A:middle
This simple approach
makes it really easy

01:33:32.976 --> 01:33:35.726 A:middle
to test your asynchronous
systems right alongside

01:33:35.986 --> 01:33:36.626 A:middle
with your other tests.

01:33:38.406 --> 01:33:39.366 A:middle
But to go a step further,

01:33:39.366 --> 01:33:41.846 A:middle
for this release we're moving
beyond correctness testing,

01:33:42.046 --> 01:33:44.616 A:middle
and we're also adding
in performance testing.

01:33:46.656 --> 01:33:49.816 A:middle
With performance testing, you
have a simple blocks-based API

01:33:50.366 --> 01:33:52.946 A:middle
to identify areas of your
application that you would

01:33:52.946 --> 01:33:54.416 A:middle
like evaluated for performance.

01:33:55.546 --> 01:33:57.056 A:middle
Now, these blocks are
treated specially.

01:33:57.496 --> 01:33:58.776 A:middle
When the test executes,

01:33:58.976 --> 01:34:01.396 A:middle
we evaluate this
block multiple times


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:33:58.976 --> 01:34:01.396 A:middle
we evaluate this
block multiple times

01:34:01.466 --> 01:34:03.396 A:middle
so we can get a sampling
of your performance.

01:34:03.956 --> 01:34:05.096 A:middle
And when the test ends,

01:34:05.386 --> 01:34:07.746 A:middle
we surface the performance
results right inside

01:34:07.746 --> 01:34:08.296 A:middle
of the editor.

01:34:09.486 --> 01:34:12.496 A:middle
Now, as part of this, you
can also establish baselines

01:34:12.866 --> 01:34:14.266 A:middle
as points of comparison
for your test,

01:34:15.086 --> 01:34:17.236 A:middle
which means that as
you improve your tests,

01:34:17.696 --> 01:34:19.306 A:middle
that'll be highlighted
in the editor as a win.

01:34:20.196 --> 01:34:22.846 A:middle
On the off chance though that
your performance regresses,

01:34:23.216 --> 01:34:24.786 A:middle
those will also be
highlighted in the editor

01:34:24.786 --> 01:34:26.176 A:middle
as areas for investigation.

01:34:27.466 --> 01:34:29.906 A:middle
Now, as part of this, you
also have access to all

01:34:29.906 --> 01:34:31.836 A:middle
of the details running
for the test.

01:34:31.836 --> 01:34:34.286 A:middle
So you have each of
the integration values,

01:34:34.466 --> 01:34:36.306 A:middle
you also have access
to the baselines,

01:34:36.546 --> 01:34:38.396 A:middle
and even the standard
deviations for your test.

01:34:38.396 --> 01:34:40.846 A:middle
So you have complete
control of your tests.

01:34:42.666 --> 01:34:45.016 A:middle
Now, as part of performance
testing, thank you.

01:34:47.516 --> 01:34:51.346 A:middle
[ Applause ]

01:34:51.846 --> 01:34:53.416 A:middle
I do agree, performance
testing is very cool.

01:34:54.396 --> 01:34:57.206 A:middle
Now, as part of this, a
part of performance testing,

01:34:57.396 --> 01:34:59.366 A:middle
you also want to
analyze your tests,

01:34:59.726 --> 01:35:02.276 A:middle
and we have by far the
coolest profiling tools


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:34:59.726 --> 01:35:02.276 A:middle
and we have by far the
coolest profiling tools

01:35:02.276 --> 01:35:04.026 A:middle
on the planet, Instruments.

01:35:04.786 --> 01:35:05.906 A:middle
So, for this release, we wanted

01:35:05.906 --> 01:35:08.336 A:middle
to bring together
testing and profiling.

01:35:08.976 --> 01:35:12.786 A:middle
So now, in the context menu
from any test or test bundle,

01:35:13.056 --> 01:35:15.336 A:middle
you can profile them
right into Instruments.

01:35:15.846 --> 01:35:18.546 A:middle
So, you can quickly look
down regressions or even look

01:35:18.546 --> 01:35:20.356 A:middle
for opportunities
for improvement.

01:35:21.536 --> 01:35:22.996 A:middle
Now, to sweeten the
deal even more,

01:35:23.166 --> 01:35:25.676 A:middle
Instruments has a
brand-new design and layout

01:35:25.676 --> 01:35:28.606 A:middle
that has been optimized for
a smoother user experience

01:35:28.936 --> 01:35:31.576 A:middle
and to make investigating
issues even easier.

01:35:32.836 --> 01:35:35.376 A:middle
In addition, in this release
we're also adding in support

01:35:35.376 --> 01:35:37.466 A:middle
for performance counters
for iOS,

01:35:37.826 --> 01:35:39.966 A:middle
which is a great new addition
to our profiling tools.

01:35:43.346 --> 01:35:45.606 A:middle
Inherently, though, when you
are writing performance tests,

01:35:45.996 --> 01:35:48.206 A:middle
you are identifying
areas of your application

01:35:48.286 --> 01:35:51.086 A:middle
where performance is
sensitive or critical.

01:35:51.996 --> 01:35:54.546 A:middle
Xcode and the compiler can
make use of this information

01:35:54.806 --> 01:35:57.826 A:middle
with a new feature called
Profile Guided Optimization,

01:35:58.256 --> 01:35:59.526 A:middle
or PGO for short.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:36:00.726 --> 01:36:03.026 A:middle
With PGO, your performance
tests are used

01:36:03.026 --> 01:36:06.306 A:middle
to profile your application,
and that information is used

01:36:06.306 --> 01:36:09.216 A:middle
in subsequent builds
to optimize your code

01:36:09.216 --> 01:36:10.926 A:middle
for better runtime performance,

01:36:11.556 --> 01:36:13.786 A:middle
so the result is
performance testing

01:36:13.996 --> 01:36:16.406 A:middle
and performance improvement
all in one.

01:36:17.716 --> 01:36:18.466 A:middle
And that's PGO.

01:36:19.516 --> 01:36:24.596 A:middle
[ Applause ]

01:36:25.096 --> 01:36:26.746 A:middle
Now, to take advantage of many

01:36:26.746 --> 01:36:29.246 A:middle
of these new workflows
continuously during development,

01:36:29.586 --> 01:36:31.666 A:middle
we've also updated
the Xcode bots

01:36:31.976 --> 01:36:33.566 A:middle
with a new streamlined
interface,

01:36:33.936 --> 01:36:36.846 A:middle
more configuration
options, and support for all

01:36:36.846 --> 01:36:38.436 A:middle
of the new testing workflows.

01:36:40.156 --> 01:36:43.446 A:middle
The new integration reports for
bots give you even more details

01:36:43.446 --> 01:36:44.416 A:middle
about your integrations.

01:36:45.006 --> 01:36:47.466 A:middle
We separated out new
from pre-existing issues,

01:36:47.666 --> 01:36:50.846 A:middle
and we also tracked down
individual issues to committers

01:36:51.206 --> 01:36:52.526 A:middle
and individual commits.

01:36:53.186 --> 01:36:55.186 A:middle
So, you can quickly
find the guilty

01:36:55.246 --> 01:36:58.096 A:middle
or the more responsible party
for any issue that comes up.

01:36:59.686 --> 01:37:02.456 A:middle
We also have more
scheduling options and support


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:36:59.686 --> 01:37:02.456 A:middle
We also have more
scheduling options and support

01:37:02.456 --> 01:37:06.026 A:middle
for custom triggers, which you
can run your own scripts before

01:37:06.026 --> 01:37:07.986 A:middle
or after any integration.

01:37:09.516 --> 01:37:13.896 A:middle
[ Applause ]

01:37:14.396 --> 01:37:17.236 A:middle
And the new testing reports give
you access to all of the details

01:37:17.236 --> 01:37:21.096 A:middle
about your tests, highlighting
regressions and improvements.

01:37:21.766 --> 01:37:24.256 A:middle
You have access to all the same
data for your performance tests

01:37:24.956 --> 01:37:26.646 A:middle
and including the
baseline workflows

01:37:26.646 --> 01:37:27.956 A:middle
for managing those
on your server.

01:37:29.166 --> 01:37:32.026 A:middle
These reports are also available
for the local testing workflows,

01:37:32.066 --> 01:37:34.866 A:middle
so you can take advantage
of them on your desktop too.

01:37:35.866 --> 01:37:38.896 A:middle
So, now even more great
reasons to use Xcode bots

01:37:39.256 --> 01:37:40.296 A:middle
in your daily integrations.

01:37:43.006 --> 01:37:45.276 A:middle
Now, we have one more
feature for you today.

01:37:45.866 --> 01:37:48.526 A:middle
And this feature really
brings together the liveness

01:37:48.526 --> 01:37:51.726 A:middle
of the design experience and
the debugging experience,

01:37:52.326 --> 01:37:54.926 A:middle
and we're calling this
feature View Debugging.

01:37:56.396 --> 01:38:00.066 A:middle
With View Debugging, you have
a live, interactive way to dive


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:37:56.396 --> 01:38:00.066 A:middle
With View Debugging, you have
a live, interactive way to dive

01:38:00.066 --> 01:38:02.126 A:middle
into the details of
the user interface

01:38:02.406 --> 01:38:06.046 A:middle
of your running application, and
I'd like to give you a demo now

01:38:06.046 --> 01:38:09.546 A:middle
of the now more visual way
to debug your applications.

01:38:17.476 --> 01:38:19.496 A:middle
So, here we are,
back in our project.

01:38:19.756 --> 01:38:21.576 A:middle
Let's just simplify our
view a little bit here.

01:38:22.916 --> 01:38:25.006 A:middle
And remember, we were
running our application

01:38:25.006 --> 01:38:26.056 A:middle
over here in the simulator.

01:38:27.236 --> 01:38:29.386 A:middle
Now, if I wanted to
get more information

01:38:29.386 --> 01:38:31.866 A:middle
about this interface, I
could pause and use some

01:38:31.936 --> 01:38:34.006 A:middle
of the debugger introspection
tools,

01:38:34.006 --> 01:38:35.646 A:middle
but there's an easier way now.

01:38:36.046 --> 01:38:38.156 A:middle
In the debug bar,
there's a button here

01:38:38.196 --> 01:38:40.906 A:middle
to capture my view hierarchy,
and I will click that.

01:38:42.146 --> 01:38:44.016 A:middle
And you'll see that now
the main view is replaced

01:38:44.016 --> 01:38:45.956 A:middle
with a snapshot of
my application.

01:38:46.956 --> 01:38:48.856 A:middle
Now, this snapshot
is not a screenshot.

01:38:49.136 --> 01:38:50.166 A:middle
It's actually an encapture

01:38:50.166 --> 01:38:52.786 A:middle
of the entire view
hierarchy of my interface.

01:38:54.386 --> 01:38:57.066 A:middle
Let's change perspective a
little bit to see if that helps.

01:38:59.516 --> 01:39:06.896 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:38:59.516 --> 01:39:06.896 A:middle
[ Applause ]

01:39:07.396 --> 01:39:10.176 A:middle
We have implemented this for
you using the SceneKit APIs

01:39:10.176 --> 01:39:12.286 A:middle
to give us this gorgeous
3D interaction.

01:39:13.726 --> 01:39:16.606 A:middle
I can adjust the interface
to expand the items a bit

01:39:16.606 --> 01:39:18.126 A:middle
to make it easier
to select things.

01:39:20.176 --> 01:39:22.476 A:middle
You'll see that I can select
items directly on the canvas.

01:39:22.776 --> 01:39:25.456 A:middle
I also have access to the
hierarchy in the debug navigator

01:39:25.646 --> 01:39:28.356 A:middle
and in the jump bar, which
makes selection really easy.

01:39:29.686 --> 01:39:31.696 A:middle
Now, as I select
items on the canvas,

01:39:31.696 --> 01:39:34.686 A:middle
you'll see that the inspector's
update will show attributes

01:39:34.686 --> 01:39:35.876 A:middle
about the items I'm selecting.

01:39:36.886 --> 01:39:38.436 A:middle
Here's some information
about the main title.

01:39:38.436 --> 01:39:40.926 A:middle
I can select one of
the progress items,

01:39:40.926 --> 01:39:42.876 A:middle
and we see that's actually
implemented with an image,

01:39:42.976 --> 01:39:44.486 A:middle
with a regular and
highlighted state.

01:39:45.996 --> 01:39:48.356 A:middle
I can select even one of the
labels and I'll see information

01:39:48.896 --> 01:39:52.636 A:middle
about the texts, the lines, line
breaks, and other properties.

01:39:54.136 --> 01:39:56.216 A:middle
Now, at certain times
it's, it's difficult

01:39:56.216 --> 01:39:57.536 A:middle
to see exactly what you want

01:39:57.536 --> 01:39:59.256 A:middle
because there might be
too many things on screen.

01:39:59.906 --> 01:40:01.966 A:middle
We've given you the
ability to adjust the range


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:39:59.906 --> 01:40:01.966 A:middle
We've given you the
ability to adjust the range

01:40:01.966 --> 01:40:04.986 A:middle
of interesting views by
peeling items off from the front

01:40:05.026 --> 01:40:08.586 A:middle
or the back so you can narrow
down your, your visual focus.

01:40:10.516 --> 01:40:12.216 A:middle
Now, in some cases it
may be easier to work

01:40:12.386 --> 01:40:15.226 A:middle
without the wireframes so you
can look at just your contents,

01:40:16.006 --> 01:40:18.756 A:middle
or if you wanted, you could
look with just wireframes,

01:40:19.076 --> 01:40:20.756 A:middle
which is really helpful
when trying to work

01:40:20.756 --> 01:40:21.576 A:middle
through layout issues.

01:40:23.486 --> 01:40:25.376 A:middle
Now, we also wanted to make
sure that this worked great

01:40:25.436 --> 01:40:27.256 A:middle
for not just property settings

01:40:27.316 --> 01:40:28.676 A:middle
but other things you
might be working with.

01:40:28.676 --> 01:40:31.626 A:middle
So, I'm going to zoom in here
and select one of these labels,

01:40:32.066 --> 01:40:35.506 A:middle
and you'll see that I can now
enable constraint debugging too,

01:40:35.506 --> 01:40:38.426 A:middle
and I can visualize in
3D all the constraints

01:40:38.426 --> 01:40:38.896 A:middle
that are going on.

01:40:39.516 --> 01:40:46.226 A:middle
[ Applause ]

01:40:46.726 --> 01:40:48.736 A:middle
This is an amazing tool, and
you guys are going to have a lot

01:40:48.736 --> 01:40:49.636 A:middle
of fun working with it.

01:40:50.076 --> 01:40:53.246 A:middle
And that's the new View
Debugger for Xcode.

01:40:54.516 --> 01:40:58.686 A:middle
[ Applause ]

01:40:59.186 --> 01:41:01.786 A:middle
So, Xcode 6 is packed
with features


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:40:59.186 --> 01:41:01.786 A:middle
So, Xcode 6 is packed
with features

01:41:02.076 --> 01:41:04.076 A:middle
that I know you all are going
to love and enjoy using.

01:41:04.566 --> 01:41:06.026 A:middle
We look forward to seeing
you guys in the lab,

01:41:06.366 --> 01:41:08.306 A:middle
and have fun this week
with the new Xcode 6.

01:41:09.516 --> 01:41:18.766 A:middle
[ Applause ]

01:41:19.266 --> 01:41:22.146 A:middle
&gt;&gt; So, we announced
a large number

01:41:22.286 --> 01:41:24.566 A:middle
of new technologies today.

01:41:24.566 --> 01:41:27.526 A:middle
iOS 8 and OS X Yosemite
look better than ever before

01:41:28.066 --> 01:41:30.996 A:middle
and expose an incredible
number of APIs

01:41:31.206 --> 01:41:33.826 A:middle
so that you can get even more
out of our operating systems

01:41:34.076 --> 01:41:35.406 A:middle
and the underlying hardware.

01:41:36.666 --> 01:41:39.286 A:middle
We are supporting these
products with a new version

01:41:39.286 --> 01:41:42.296 A:middle
of our Xcode IDE,
version 6, which we run

01:41:42.356 --> 01:41:44.446 A:middle
on OS X Mavericks and Yosemite.

01:41:45.406 --> 01:41:47.486 A:middle
And among other things, it
of course gives you access

01:41:47.586 --> 01:41:50.946 A:middle
to our new Swift programming
language specifically designed

01:41:50.946 --> 01:41:53.146 A:middle
by Apple for Cocoa
and Cocoa Touch.

01:41:55.226 --> 01:41:56.506 A:middle
So that you can get ready

01:41:56.506 --> 01:41:58.256 A:middle
for our product launches
later this year,

01:41:58.256 --> 01:42:01.706 A:middle
we will make developer previews
available for download today


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:41:58.256 --> 01:42:01.706 A:middle
we will make developer previews
available for download today

01:42:01.846 --> 01:42:03.686 A:middle
on the WWDC Attendee Portal.

01:42:03.746 --> 01:42:07.136 A:middle
You will find all these
products, iOS 8, Yosemite,

01:42:07.136 --> 01:42:08.676 A:middle
even things like
OS X server there.

01:42:10.136 --> 01:42:12.866 A:middle
And of course, there are
numerous sessions here

01:42:12.866 --> 01:42:15.086 A:middle
at the conference that you can
learn more about these products.

01:42:15.826 --> 01:42:18.226 A:middle
There are more than 100
sessions and even more labs

01:42:18.296 --> 01:42:20.746 A:middle
where you can meet Apple
engineers one on one

01:42:21.046 --> 01:42:22.956 A:middle
to get your specific
questions answered.

01:42:24.486 --> 01:42:27.476 A:middle
So, I'm looking forward to more
amazing and innovative apps

01:42:27.476 --> 01:42:29.926 A:middle
from you guys, and I hope to
see you around later this week.

01:42:31.516 --> 01:42:34.500 A:middle
[ Applause ]

