WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:11.211 --> 00:00:13.211 A:middle
[ Applause ]

00:00:13.406 --> 00:00:14.346 A:middle
&gt;&gt; Good afternoon, everybody.

00:00:16.946 --> 00:00:18.536 A:middle
So, my name is Dan Kurtz.

00:00:18.736 --> 00:00:21.506 A:middle
Today, my colleague, Rhett
Dickson, and I will be talking

00:00:21.506 --> 00:00:24.616 A:middle
to you about What's New in
iOS Notifications and iOS 8.

00:00:25.576 --> 00:00:28.226 A:middle
So, before we get into all the
great new features of iOS 8,

00:00:28.546 --> 00:00:31.466 A:middle
let's lay down some foundation
about what notifications are

00:00:31.466 --> 00:00:36.176 A:middle
and how you have been
using them in iOS 7 today.

00:00:36.236 --> 00:00:38.826 A:middle
So, when I mention
notifications,

00:00:38.826 --> 00:00:40.546 A:middle
I'm actually talking
about two different types

00:00:40.546 --> 00:00:41.656 A:middle
of notifications, really.

00:00:42.126 --> 00:00:45.436 A:middle
We've got user notifications and
we've got silent notifications.

00:00:46.236 --> 00:00:48.036 A:middle
So let's start off with
user notifications.

00:00:48.236 --> 00:00:49.646 A:middle
What are these?

00:00:50.976 --> 00:00:53.536 A:middle
So, user notifications
are really just things

00:00:53.536 --> 00:00:58.116 A:middle
that the user can interact with,
see or hear on their device.

00:00:58.366 --> 00:01:00.696 A:middle
And they're coming
directly from your app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.366 --> 00:01:00.696 A:middle
And they're coming
directly from your app.

00:01:01.056 --> 00:01:03.466 A:middle
So, for instance, with
the messages icon up here

00:01:03.466 --> 00:01:05.286 A:middle
on the top left-hand
corner of the screen,

00:01:05.756 --> 00:01:07.986 A:middle
let's say that the user happened
to receive a message from one

00:01:07.986 --> 00:01:10.666 A:middle
of their friends when the app is
currently not in the foreground.

00:01:11.266 --> 00:01:14.366 A:middle
Well, we've got three different
options for user notifications

00:01:14.366 --> 00:01:16.066 A:middle
that we could use
to let them know

00:01:16.066 --> 00:01:17.186 A:middle
that there's new information.

00:01:18.256 --> 00:01:21.316 A:middle
First one that we could
do is badge the app icon.

00:01:21.796 --> 00:01:23.816 A:middle
Having that little red
circle with the number 1

00:01:23.816 --> 00:01:26.686 A:middle
in there informs the user that
they've got one new message.

00:01:28.016 --> 00:01:30.706 A:middle
Now, for times that the user
happens to have that device

00:01:30.706 --> 00:01:33.856 A:middle
in their pocket and they might
not be able to see the screen,

00:01:34.336 --> 00:01:38.806 A:middle
we could instead play a sound
[sound plays] informing the user

00:01:38.806 --> 00:01:40.056 A:middle
that they've got a new message.

00:01:41.166 --> 00:01:46.416 A:middle
And lastly, we have alerts,
which tick down as that banner

00:01:46.416 --> 00:01:49.556 A:middle
from the top of the screen with
a little preview message of what

00:01:49.556 --> 00:01:51.086 A:middle
that message actually contains

00:01:51.656 --> 00:01:54.726 A:middle
so that the user doesn't even
have to tap on the messages icon

00:01:54.726 --> 00:01:55.836 A:middle
to check out what's there.

00:01:56.806 --> 00:01:59.606 A:middle
So we have badges, we have
sounds, we have alerts.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.596 --> 00:02:03.426 A:middle
And for alerts, they
can actually appear

00:02:03.526 --> 00:02:06.066 A:middle
in different forms and in
different places as well.

00:02:06.956 --> 00:02:10.066 A:middle
Depending on how the user
happened to set their settings

00:02:10.066 --> 00:02:12.596 A:middle
for your app in the
notification center settings,

00:02:12.796 --> 00:02:15.686 A:middle
these alerts-instead of being
those banners that tick down

00:02:15.686 --> 00:02:18.656 A:middle
and then go away
automatically-they could appear

00:02:18.656 --> 00:02:19.706 A:middle
as modal alerts.

00:02:19.866 --> 00:02:22.136 A:middle
They'll stay up there on the
screen until the user happens

00:02:22.136 --> 00:02:24.316 A:middle
to interact with them.

00:02:24.316 --> 00:02:27.226 A:middle
And then we also have alerts
that they can be displayed

00:02:27.226 --> 00:02:31.246 A:middle
in the notification center drag
down as well as for the time

00:02:31.246 --> 00:02:33.336 A:middle
that the user happened to have
the device in their pocket

00:02:33.336 --> 00:02:36.316 A:middle
and the screen was off when they
happened to receive an alert.

00:02:36.736 --> 00:02:38.996 A:middle
Next time they turn it on,
it's waiting right there

00:02:38.996 --> 00:02:40.336 A:middle
for them in the lock screen.

00:02:42.276 --> 00:02:44.366 A:middle
So, where do these
notifications come from?

00:02:45.606 --> 00:02:47.286 A:middle
Well, for user notifications
they can come

00:02:47.316 --> 00:02:48.586 A:middle
from two different places.

00:02:48.826 --> 00:02:51.576 A:middle
First off, they can be coming
directly from your app.

00:02:51.716 --> 00:02:55.096 A:middle
That is, your app uses
UILocalNotification API

00:02:55.596 --> 00:02:57.916 A:middle
to present a notification
to the user.

00:02:59.486 --> 00:03:02.896 A:middle
Alternatively, you could
also have user notifications


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.486 --> 00:03:02.896 A:middle
Alternatively, you could
also have user notifications

00:03:03.166 --> 00:03:06.206 A:middle
that are triggered in response
to remote push payloads.

00:03:06.736 --> 00:03:09.126 A:middle
You've got an APNs server, the
app out there on the Internet.

00:03:09.466 --> 00:03:11.376 A:middle
In coordination with
the Apple Push Services,

00:03:12.346 --> 00:03:16.736 A:middle
you send a push payload
that defines, in this case,

00:03:16.736 --> 00:03:22.166 A:middle
an alert in it-oh,
sorry,-that results in an alert

00:03:22.166 --> 00:03:24.516 A:middle
that will appear
up on the screen.

00:03:25.096 --> 00:03:26.816 A:middle
Now, I go a little
bit over eager there.

00:03:27.056 --> 00:03:29.346 A:middle
We've also got another
type of notification.

00:03:29.726 --> 00:03:31.446 A:middle
I mentioned we have
user notifications

00:03:31.446 --> 00:03:32.686 A:middle
and silent notifications.

00:03:33.276 --> 00:03:37.216 A:middle
Silent notifications, they are
just push payloads that are sent

00:03:37.216 --> 00:03:39.066 A:middle
from your APNs server that,

00:03:39.066 --> 00:03:43.166 A:middle
instead of presenting a user
notification like an alert

00:03:43.166 --> 00:03:48.186 A:middle
or a sound or a badge on the
screen, iOS, when it receives

00:03:48.186 --> 00:03:50.776 A:middle
that push, will instead wake
up your app in the background

00:03:50.776 --> 00:03:55.846 A:middle
so that your app can do some
background image processing

00:03:55.976 --> 00:03:57.156 A:middle
or information processing.

00:03:57.236 --> 00:04:00.936 A:middle
In this case, your app is
fetching content from a server


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.236 --> 00:04:00.936 A:middle
In this case, your app is
fetching content from a server

00:04:01.476 --> 00:04:04.476 A:middle
so that the next time the user
happens to tap on your app icon

00:04:04.536 --> 00:04:07.496 A:middle
and bring it to the foreground,
that information is there

00:04:07.496 --> 00:04:10.456 A:middle
and ready so nobody has to
wait for a loading spinner

00:04:10.456 --> 00:04:12.066 A:middle
to complete and all
that other stuff.

00:04:12.666 --> 00:04:15.276 A:middle
So that's notifications
in iOS 7.

00:04:15.386 --> 00:04:17.766 A:middle
We've got user types,
we've got silent types.

00:04:18.156 --> 00:04:22.166 A:middle
User notifications can come
from locally on the app.

00:04:22.726 --> 00:04:25.636 A:middle
Remote notifications,
they can only be coming

00:04:25.636 --> 00:04:27.016 A:middle
from push payloads.

00:04:27.996 --> 00:04:32.346 A:middle
So let's talk about the new
features of iOS 8 notifications.

00:04:33.406 --> 00:04:36.746 A:middle
We're going to be talking about
four great new topics today.

00:04:36.746 --> 00:04:39.096 A:middle
First, I'm going to be talking
about user notifications,

00:04:39.406 --> 00:04:41.326 A:middle
what's changed about
them in iOS 8,

00:04:41.326 --> 00:04:42.846 A:middle
specifically with registration.

00:04:44.146 --> 00:04:46.066 A:middle
Then Rhett is going to come
up and he's going to talk

00:04:46.066 --> 00:04:48.416 A:middle
about a great new feature,
notification actions.

00:04:48.756 --> 00:04:50.786 A:middle
These are those interactive
notifications

00:04:51.126 --> 00:04:53.926 A:middle
to make your app interactive
even without it being there,

00:04:54.156 --> 00:04:55.146 A:middle
foreground on the screen.

00:04:56.556 --> 00:04:57.826 A:middle
Then we're going to
pass the baton again.

00:04:57.826 --> 00:05:00.936 A:middle
I'm going to come back to talk
about remote notifications,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:57.826 --> 00:05:00.936 A:middle
I'm going to come back to talk
about remote notifications,

00:05:00.936 --> 00:05:03.646 A:middle
some changes that we have
there for registering.

00:05:03.776 --> 00:05:07.446 A:middle
And then finally, we're going to
talk about one last new feature,

00:05:07.676 --> 00:05:09.406 A:middle
location-based notifications.

00:05:09.866 --> 00:05:12.376 A:middle
User notifications that
are triggered in response

00:05:12.376 --> 00:05:14.706 A:middle
to the user changing
their location.

00:05:15.916 --> 00:05:20.536 A:middle
So let's get on to the very
first topic, user notifications.

00:05:22.356 --> 00:05:26.016 A:middle
So, in iOS 8, regardless of
whether your app is going

00:05:26.016 --> 00:05:28.066 A:middle
to display remote
user notifications

00:05:28.536 --> 00:05:32.906 A:middle
or local user notifications,
your app must first register

00:05:33.376 --> 00:05:35.016 A:middle
to use those notifications.

00:05:35.936 --> 00:05:39.096 A:middle
And this is going to result
in an alert that is going

00:05:39.096 --> 00:05:41.706 A:middle
to be presented to the
user, asking them if it's OK

00:05:41.706 --> 00:05:44.056 A:middle
for your app to present
notifications to them.

00:05:45.226 --> 00:05:46.466 A:middle
So, what does this
code look like?

00:05:46.466 --> 00:05:49.346 A:middle
How do we register your app
in order to take advantage

00:05:49.346 --> 00:05:50.386 A:middle
of user notifications?

00:05:50.886 --> 00:05:53.976 A:middle
Well, the code is actually
pretty straightforward.

00:05:54.746 --> 00:05:57.146 A:middle
The very first thing you need
to do is declare the types

00:05:57.146 --> 00:05:59.046 A:middle
of user notifications
that you wish

00:05:59.046 --> 00:06:00.556 A:middle
to present from within your app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.046 --> 00:06:00.556 A:middle
to present from within your app.

00:06:01.016 --> 00:06:02.966 A:middle
In this case, this
app is actually going

00:06:02.966 --> 00:06:04.036 A:middle
to present all the
different types

00:06:04.036 --> 00:06:05.636 A:middle
of notifications
it possibly can.

00:06:06.126 --> 00:06:08.426 A:middle
It's going to be showing
badges on the icon.

00:06:08.766 --> 00:06:12.426 A:middle
It'll also be playing sounds
as well as displaying alerts.

00:06:13.386 --> 00:06:15.776 A:middle
Now, once we've decided the
types that we're actually going

00:06:15.776 --> 00:06:17.836 A:middle
to be presenting, we're going

00:06:17.896 --> 00:06:20.166 A:middle
to create a
UIUserNotificationSettings

00:06:20.166 --> 00:06:23.896 A:middle
object passing these types to
settingsForTypes categories.

00:06:24.966 --> 00:06:27.256 A:middle
Now, that second parameter,
the categories parameter,

00:06:27.256 --> 00:06:28.436 A:middle
you'll notice that
it's nil here.

00:06:28.556 --> 00:06:29.356 A:middle
Don't worry about it.

00:06:29.766 --> 00:06:31.856 A:middle
That has something to do
with notification actions.

00:06:32.166 --> 00:06:33.606 A:middle
Rhett's going to talk
about those later.

00:06:35.096 --> 00:06:37.016 A:middle
Finally, once we've
created the settings object,

00:06:37.326 --> 00:06:39.946 A:middle
we're just going to pass it to
the shared application instance

00:06:40.366 --> 00:06:42.216 A:middle
in registerUser
NotificationSettings.

00:06:42.736 --> 00:06:47.386 A:middle
And at that point, assuming this
is the very first time your app

00:06:47.386 --> 00:06:50.496 A:middle
has called this method,
the user is going

00:06:50.496 --> 00:06:54.576 A:middle
to be displayed an alert asking
them if it's OK for your app

00:06:54.576 --> 00:06:56.286 A:middle
to present user notifications
to them.

00:06:57.306 --> 00:07:00.456 A:middle
Now, they're either going
to say OK or maybe not now.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.306 --> 00:07:00.456 A:middle
Now, they're either going
to say OK or maybe not now.

00:07:01.166 --> 00:07:04.636 A:middle
But no matter what they do, they
could always, at a later time,

00:07:04.636 --> 00:07:07.126 A:middle
background your app and change
their preferences and settings.

00:07:07.766 --> 00:07:11.146 A:middle
So this isn't the last time
that you have a chance in order

00:07:11.146 --> 00:07:12.796 A:middle
to present notifications
to the user.

00:07:14.676 --> 00:07:17.676 A:middle
So, once they've actually
replied to that alert,

00:07:17.886 --> 00:07:19.956 A:middle
your app delegate is
going to get a callback,

00:07:20.426 --> 00:07:23.636 A:middle
application didregisterUser
NotificationSettings.

00:07:24.106 --> 00:07:26.426 A:middle
That notification settings
object that we pass back

00:07:26.426 --> 00:07:29.246 A:middle
to you represents the
user's up-to-date,

00:07:29.246 --> 00:07:32.896 A:middle
most current preferences for
displaying notifications.

00:07:33.526 --> 00:07:36.976 A:middle
And at that point, all you
need to do is check what types

00:07:36.976 --> 00:07:41.166 A:middle
of notifications you're
allowed to present to the user.

00:07:41.296 --> 00:07:45.366 A:middle
So, again, like I mentioned
before, there is the possibility

00:07:45.366 --> 00:07:47.346 A:middle
that the user could
always background your app,

00:07:47.506 --> 00:07:49.556 A:middle
go into settings and
change their preferences.

00:07:49.656 --> 00:07:51.126 A:middle
And you need to stay
on top of this.

00:07:51.376 --> 00:07:54.646 A:middle
You don't want to be doing any
unnecessary processing for, say,

00:07:54.646 --> 00:07:57.596 A:middle
preparing a alert-type
notification

00:07:57.596 --> 00:07:58.696 A:middle
when you don't really need to.

00:07:59.706 --> 00:08:02.616 A:middle
So, we have API in UI
application as well.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.706 --> 00:08:02.616 A:middle
So, we have API in UI
application as well.

00:08:03.896 --> 00:08:07.146 A:middle
This
currentUserNotificationSettings

00:08:07.146 --> 00:08:08.996 A:middle
method that is available

00:08:08.996 --> 00:08:11.856 A:middle
in the UI application
instance will give you the most

00:08:11.856 --> 00:08:14.606 A:middle
up-to-date user notification
preferences.

00:08:15.006 --> 00:08:16.436 A:middle
And from there you can make sure

00:08:16.706 --> 00:08:20.026 A:middle
that you're not doing any
unnecessary work to prepare

00:08:20.026 --> 00:08:21.546 A:middle
for notifications
that aren't going

00:08:21.546 --> 00:08:22.856 A:middle
to be displayed to
the user anyway.

00:08:26.126 --> 00:08:27.466 A:middle
So, that's user notifications.

00:08:28.036 --> 00:08:30.796 A:middle
Really, it's just a
registration method to state

00:08:30.796 --> 00:08:33.596 A:middle
that your app wishes to
use user notifications.

00:08:34.316 --> 00:08:36.066 A:middle
And to do this, you just need

00:08:36.066 --> 00:08:38.086 A:middle
to call registerUser
NotificationSettings

00:08:38.086 --> 00:08:40.066 A:middle
on the UIApplication
shared instance.

00:08:41.066 --> 00:08:44.006 A:middle
Any time you need to get the
most current user preferences,

00:08:44.145 --> 00:08:46.226 A:middle
you just have to call
currentNotificationSettings

00:08:46.226 --> 00:08:47.226 A:middle
on UIApplication.

00:08:47.686 --> 00:08:50.626 A:middle
And in order to create these
settings objects at the time

00:08:50.626 --> 00:08:54.116 A:middle
of registering, you just call
settingsForTypes: categories.

00:08:55.206 --> 00:08:57.726 A:middle
And recall, I said
the categories was nil

00:08:57.726 --> 00:08:59.126 A:middle
in the previous sample slide.

00:08:59.436 --> 00:09:01.696 A:middle
And that has something to do
with notification actions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.436 --> 00:09:01.696 A:middle
And that has something to do
with notification actions.

00:09:02.496 --> 00:09:04.146 A:middle
So, Rhett's going to
come up on stage and talk

00:09:04.146 --> 00:09:07.056 A:middle
about notification actions,
a great new feature in iOS 8

00:09:07.056 --> 00:09:08.906 A:middle
that I can't wait to see
you guys take advantage of.

00:09:09.506 --> 00:09:09.716 A:middle
Thanks.

00:09:10.516 --> 00:09:13.276 A:middle
[ Applause ]

00:09:13.776 --> 00:09:14.166 A:middle
&gt;&gt; Thanks, Dan.

00:09:14.546 --> 00:09:16.356 A:middle
So, my name is Rhett Dickson.

00:09:16.516 --> 00:09:18.326 A:middle
And I'm going to talk
about notification actions,

00:09:18.376 --> 00:09:22.026 A:middle
a great new feature in iOS 8
that we're really excited about.

00:09:23.226 --> 00:09:26.346 A:middle
First, let's talk about
notification actions in iOS 7.

00:09:26.876 --> 00:09:32.936 A:middle
Whether on the lock screen,
notification center, banners

00:09:33.706 --> 00:09:38.046 A:middle
or modal alerts, you get one
default action when you swipe

00:09:38.046 --> 00:09:39.326 A:middle
or tap on the notification

00:09:39.456 --> 00:09:41.306 A:middle
that launches the
application in the foreground.

00:09:41.976 --> 00:09:47.846 A:middle
In iOS 8, in addition to that
default action, when you swipe

00:09:47.846 --> 00:09:51.056 A:middle
to the left on the lock
screen, you get two new actions.

00:09:51.986 --> 00:09:54.326 A:middle
Likewise, in notification
center, when you swipe

00:09:54.326 --> 00:09:56.326 A:middle
to the left, two new actions.

00:09:57.056 --> 00:10:02.076 A:middle
In banners, when you pull
down, two more actions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:57.056 --> 00:10:02.076 A:middle
In banners, when you pull
down, two more actions.

00:10:02.276 --> 00:10:06.226 A:middle
And in modal alerts, when you
tap on the Options button,

00:10:07.296 --> 00:10:08.776 A:middle
you get up to four more actions.

00:10:10.196 --> 00:10:13.206 A:middle
So, to use notification
actions in your application,

00:10:13.206 --> 00:10:14.586 A:middle
you need to follow three steps.

00:10:15.296 --> 00:10:17.006 A:middle
You need to, first,
register your actions.

00:10:17.726 --> 00:10:19.586 A:middle
You need to, second, send a push

00:10:19.646 --> 00:10:21.236 A:middle
or schedule a local
notification.

00:10:21.916 --> 00:10:24.366 A:middle
And finally, once the user has
seen these actions and tapped

00:10:24.366 --> 00:10:26.136 A:middle
on one, you need to
handle the action.

00:10:27.756 --> 00:10:29.586 A:middle
To illustrate these steps,

00:10:29.586 --> 00:10:31.456 A:middle
I'm going to use the
calendar invite example

00:10:31.716 --> 00:10:34.796 A:middle
with three actions:
Accept, Maybe and Decline.

00:10:39.036 --> 00:10:41.546 A:middle
So let's first look at
registering actions.

00:10:42.176 --> 00:10:45.166 A:middle
You start off by
creating your action.

00:10:45.166 --> 00:10:48.986 A:middle
You then set the
identifier on your action.

00:10:49.456 --> 00:10:51.496 A:middle
The same identifier will
be passed back to you

00:10:51.496 --> 00:10:52.496 A:middle
when you handle the action.

00:10:54.396 --> 00:10:55.596 A:middle
You then set a title.

00:10:55.736 --> 00:10:58.186 A:middle
This is a localized string
that'll be shown to the user.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.346 --> 00:11:01.816 A:middle
You then set the
activation mode.

00:11:02.536 --> 00:11:04.646 A:middle
This will determine if your
application is launched

00:11:04.646 --> 00:11:06.556 A:middle
in the foreground
or the background.

00:11:07.096 --> 00:11:09.326 A:middle
If you need to show UI, you
should choose foreground.

00:11:09.646 --> 00:11:10.956 A:middle
If you don't need to
interrupt the user,

00:11:11.046 --> 00:11:12.476 A:middle
you should instead
choose background.

00:11:13.286 --> 00:11:15.696 A:middle
If you do run in the background,
you'll have on the order

00:11:15.696 --> 00:11:17.466 A:middle
of seconds, not minutes, to run.

00:11:17.996 --> 00:11:21.806 A:middle
You then set whether the
action is destructive.

00:11:22.306 --> 00:11:25.196 A:middle
If this is Yes, the
action will be shown as red

00:11:25.196 --> 00:11:29.136 A:middle
on the lock screen and
in notification center.

00:11:29.296 --> 00:11:31.416 A:middle
Finally, you set whether
authentication is required.

00:11:32.106 --> 00:11:35.756 A:middle
If this is Yes, and the device
is locked, the user will have

00:11:35.756 --> 00:11:38.106 A:middle
to enter in their passcode
when they tap on the action.

00:11:38.906 --> 00:11:42.316 A:middle
If your action is a background
action, it's important to note

00:11:42.316 --> 00:11:44.256 A:middle
that the device does
not actually unlock.

00:11:44.686 --> 00:11:47.226 A:middle
So, if your application
accesses any files on disk,

00:11:47.516 --> 00:11:48.786 A:middle
you need to be sure
that they belong

00:11:48.786 --> 00:11:50.286 A:middle
in the correct data
protection class.

00:11:51.106 --> 00:11:52.776 A:middle
For more information
on data protection,

00:11:53.116 --> 00:11:54.986 A:middle
we'll point you toward
some more resources

00:11:54.986 --> 00:11:55.876 A:middle
at the end of this session.

00:11:56.486 --> 00:12:00.886 A:middle
So here's an example of
the accept invite action.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:56.486 --> 00:12:00.886 A:middle
So here's an example of
the accept invite action.

00:12:01.846 --> 00:12:05.136 A:middle
It doesn't need to show any UI,
so it can run in the background.

00:12:06.106 --> 00:12:08.736 A:middle
It's not destructive,
so it's shown in blue

00:12:08.876 --> 00:12:10.676 A:middle
in notification center
and on the lock screen.

00:12:11.336 --> 00:12:14.066 A:middle
And because accepting an
invite is relatively harmless,

00:12:14.576 --> 00:12:15.926 A:middle
you don't need to
require authentication.

00:12:16.516 --> 00:12:19.816 A:middle
On the other hand, if you
had a Trash Mail action,

00:12:20.596 --> 00:12:23.446 A:middle
it also doesn't need to show UI,
so it can run in the background.

00:12:24.116 --> 00:12:27.696 A:middle
It is destructive, so it will be
shown in red on the lock screen

00:12:27.696 --> 00:12:28.766 A:middle
and notification center.

00:12:29.756 --> 00:12:31.276 A:middle
And because you don't want
someone to be able to pick

00:12:31.276 --> 00:12:32.746 A:middle
up your phone and
delete all your email,

00:12:32.936 --> 00:12:34.096 A:middle
authentication is required.

00:12:36.036 --> 00:12:38.266 A:middle
Finally, we have a Reply action.

00:12:39.126 --> 00:12:41.666 A:middle
This does need to show
UI, so it will need

00:12:41.666 --> 00:12:42.556 A:middle
to run in the foreground.

00:12:43.136 --> 00:12:45.466 A:middle
Again, it's not destructive,
so it'll be shown as blue.

00:12:46.506 --> 00:12:49.626 A:middle
And because it's a foreground
action, if the device is locked,

00:12:49.626 --> 00:12:51.656 A:middle
the user will have to
enter in their passcode.

00:12:52.036 --> 00:12:52.856 A:middle
So, in this case,

00:12:52.896 --> 00:12:55.286 A:middle
the authentication required
property has no effect.

00:12:57.636 --> 00:13:00.016 A:middle
So, now that you've
defined your actions,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:57.636 --> 00:13:00.016 A:middle
So, now that you've
defined your actions,

00:13:00.246 --> 00:13:01.776 A:middle
you need to group
them into a category.

00:13:02.526 --> 00:13:04.606 A:middle
A category is simply
a type of notification

00:13:04.686 --> 00:13:05.976 A:middle
with associated actions.

00:13:06.856 --> 00:13:09.706 A:middle
For example, you can have the
invite category, with Accept,

00:13:09.706 --> 00:13:10.916 A:middle
Maybe and Decline actions.

00:13:11.386 --> 00:13:14.156 A:middle
You could also have a New Mail
category with Mark as Read

00:13:14.156 --> 00:13:18.386 A:middle
and Trash, or a tagged category
of Like, Comment and Untag.

00:13:19.016 --> 00:13:23.406 A:middle
To start using the categories,
you first create one.

00:13:23.946 --> 00:13:27.536 A:middle
You then set the identifier.

00:13:28.086 --> 00:13:30.556 A:middle
You'll include this
identifier in your push payload

00:13:30.556 --> 00:13:31.606 A:middle
and your local notification.

00:13:32.156 --> 00:13:37.106 A:middle
You then set the actions on the
category for an action context.

00:13:37.706 --> 00:13:39.326 A:middle
There are two action contexts.

00:13:39.646 --> 00:13:42.326 A:middle
The first, the default
action context supports

00:13:42.326 --> 00:13:43.446 A:middle
up to four actions.

00:13:44.006 --> 00:13:46.076 A:middle
The second, the minimal
action context,

00:13:46.536 --> 00:13:48.906 A:middle
is used when there's only
room for two actions.

00:13:49.796 --> 00:13:52.916 A:middle
So, for example, if you set
these three actions, Accept,

00:13:52.916 --> 00:13:55.796 A:middle
Maybe and Decline, for the
default action context,

00:13:56.166 --> 00:13:58.066 A:middle
and if this notification
was then presented

00:13:58.066 --> 00:14:02.066 A:middle
on the lock screen, you would
see the first two actions,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.066 --> 00:14:02.066 A:middle
on the lock screen, you would
see the first two actions,

00:14:02.066 --> 00:14:02.896 A:middle
Accept and Maybe.

00:14:03.746 --> 00:14:06.416 A:middle
If you wanted a different set
of actions, such as Accept

00:14:06.416 --> 00:14:11.126 A:middle
and Decline, you could set those
on the minimal action context.

00:14:11.836 --> 00:14:14.436 A:middle
Then when this notification is
presented on the lock screen,

00:14:15.956 --> 00:14:17.646 A:middle
you would see Accept
and Decline.

00:14:18.516 --> 00:14:21.796 A:middle
When this same notification
is presented as a modal alert,

00:14:22.176 --> 00:14:24.386 A:middle
because this is the
default action context,

00:14:24.976 --> 00:14:26.456 A:middle
you would see the
full three actions,

00:14:26.456 --> 00:14:27.746 A:middle
Accept, Maybe and Decline.

00:14:30.096 --> 00:14:32.096 A:middle
So, once you've defined
your categories,

00:14:32.096 --> 00:14:33.226 A:middle
you now need to register them.

00:14:34.226 --> 00:14:38.476 A:middle
You do this by first grouping
them together in a set,

00:14:38.726 --> 00:14:41.546 A:middle
providing them to your user
notification settings-this is

00:14:41.546 --> 00:14:46.276 A:middle
where Dan left us off-and then
registering those settings

00:14:46.366 --> 00:14:47.836 A:middle
with your shared
application instance.

00:14:49.976 --> 00:14:51.896 A:middle
So now we've registered
our actions.

00:14:52.296 --> 00:14:54.636 A:middle
The next thing to do is to
send a push notification

00:14:54.946 --> 00:14:57.376 A:middle
or schedule a local notification
to show those actions.

00:14:58.336 --> 00:15:00.026 A:middle
In the remote notification case,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.336 --> 00:15:00.026 A:middle
In the remote notification case,

00:15:00.476 --> 00:15:03.326 A:middle
you need to include the category
identifier in your push payload.

00:15:04.146 --> 00:15:06.156 A:middle
We'll use this to determine
what actions to show

00:15:06.156 --> 00:15:07.466 A:middle
when we present your
notification.

00:15:08.506 --> 00:15:10.246 A:middle
We're also very excited
to announce

00:15:10.246 --> 00:15:13.116 A:middle
that the previous size
limit of 256 bytes

00:15:13.116 --> 00:15:18.096 A:middle
for a push payload has now
been increased to 2 kilobytes.

00:15:19.516 --> 00:15:25.976 A:middle
[ Applause ]

00:15:26.476 --> 00:15:28.496 A:middle
So, in the local
notification case,

00:15:29.186 --> 00:15:30.596 A:middle
you create your notification
as normal.

00:15:33.866 --> 00:15:36.026 A:middle
You then set the category of
the actions you'd like shown.

00:15:37.916 --> 00:15:39.986 A:middle
Finally, you schedule the
notification as normal.

00:15:42.976 --> 00:15:45.056 A:middle
So, once you've sent
a push notification

00:15:45.056 --> 00:15:46.826 A:middle
or scheduled a local
notification

00:15:46.826 --> 00:15:49.526 A:middle
and the user has seen this
and tapped on an action,

00:15:49.846 --> 00:15:51.096 A:middle
you then need to
handle that action.

00:15:54.076 --> 00:15:57.416 A:middle
To handle the default action
when a user just swipes or taps

00:15:57.416 --> 00:16:01.266 A:middle
on the notification, launch your
application in the foreground


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.416 --> 00:16:01.266 A:middle
on the notification, launch your
application in the foreground

00:16:01.996 --> 00:16:04.476 A:middle
and call application:
didFinishLaunching WithOptions,

00:16:04.696 --> 00:16:06.486 A:middle
where we'll pass in
the local notification

00:16:06.716 --> 00:16:07.876 A:middle
or the remote notification.

00:16:08.806 --> 00:16:12.626 A:middle
In the remote notification case,
we'll also call application:

00:16:12.626 --> 00:16:15.306 A:middle
didReceiveRemote Notification:
fetchCompletionHandler.

00:16:15.876 --> 00:16:20.176 A:middle
If your application is
already in the foreground,

00:16:20.756 --> 00:16:22.466 A:middle
we won't actually
show the notification.

00:16:24.076 --> 00:16:26.356 A:middle
Instead, we'll either
call application:

00:16:26.356 --> 00:16:29.036 A:middle
didReceiveLocal Notification
or application:

00:16:29.036 --> 00:16:32.006 A:middle
didReceiveRemote Notification
with fetchCompletionHandler

00:16:32.356 --> 00:16:33.716 A:middle
if you've implemented that.

00:16:33.796 --> 00:16:35.556 A:middle
Otherwise, we'll
call the version

00:16:35.556 --> 00:16:36.666 A:middle
without the completion handler.

00:16:37.576 --> 00:16:40.896 A:middle
Finally, to handle the new
additional actions in iOS 8,

00:16:41.136 --> 00:16:45.206 A:middle
you need to implement at
least one of two new methods

00:16:45.206 --> 00:16:46.306 A:middle
on your application delegate.

00:16:46.836 --> 00:16:52.336 A:middle
In either case, we'll pass
you the action identifier.

00:16:52.816 --> 00:16:55.196 A:middle
You can use this to determine
what action was tapped on.

00:16:58.296 --> 00:17:00.996 A:middle
We'll also pass you either
the remote notification


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.296 --> 00:17:00.996 A:middle
We'll also pass you either
the remote notification

00:17:01.896 --> 00:17:03.276 A:middle
or the local notification.

00:17:04.476 --> 00:17:07.486 A:middle
And you can use this to retrieve
any information you need

00:17:07.486 --> 00:17:08.455 A:middle
to handle that action.

00:17:11.955 --> 00:17:14.546 A:middle
Finally, we'll pass you
the completion handler,

00:17:15.516 --> 00:17:17.705 A:middle
which you must call when you
finish handling the action.

00:17:18.306 --> 00:17:23.576 A:middle
So, to summarize, to
use notification actions

00:17:23.576 --> 00:17:27.556 A:middle
in your application, you first
need to register your actions.

00:17:27.945 --> 00:17:30.796 A:middle
This involves defining
your actions, grouping them

00:17:30.796 --> 00:17:33.626 A:middle
into a category and then
registering those categories

00:17:33.626 --> 00:17:35.126 A:middle
with your user notification
settings.

00:17:35.486 --> 00:17:39.206 A:middle
You then need to send
a push notification

00:17:39.306 --> 00:17:40.866 A:middle
or schedule a local
notification,

00:17:41.056 --> 00:17:42.666 A:middle
including the category
identifier

00:17:42.666 --> 00:17:43.956 A:middle
of the actions you'd like shown.

00:17:44.516 --> 00:17:48.676 A:middle
You then need to handle the
action once the user has tapped

00:17:48.676 --> 00:17:50.866 A:middle
on it by implementing
one of the new methods

00:17:50.866 --> 00:17:51.956 A:middle
on your application delegate.

00:17:53.276 --> 00:17:55.806 A:middle
Notification actions are a great
new feature and we can't wait

00:17:55.806 --> 00:17:56.806 A:middle
to see what you're
going to do with them.

00:17:57.496 --> 00:17:59.456 A:middle
I'm now going to pass
it back to Dan to talk

00:17:59.456 --> 00:18:00.646 A:middle
about remote notifications.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.456 --> 00:18:00.646 A:middle
about remote notifications.

00:18:01.046 --> 00:18:03.046 A:middle
[ Applause ]

00:18:03.076 --> 00:18:06.486 A:middle
&gt;&gt; Hey. So, let's
talk about what's new

00:18:06.646 --> 00:18:09.526 A:middle
with remote notifications
in iOS 8.

00:18:11.266 --> 00:18:13.326 A:middle
So, recall we've got
two different types

00:18:13.326 --> 00:18:14.606 A:middle
of remote notifications.

00:18:14.986 --> 00:18:17.496 A:middle
We have user type
remote notifications.

00:18:17.856 --> 00:18:21.416 A:middle
That's when your APNs server
sends a push notification

00:18:21.416 --> 00:18:24.186 A:middle
to the device wherein the
payload we've got, in this case,

00:18:24.186 --> 00:18:27.786 A:middle
an alert, that results in a user
notification being presented

00:18:27.786 --> 00:18:31.126 A:middle
to the user as if it was coming
from the app that's running

00:18:31.126 --> 00:18:34.576 A:middle
or installed right
there on the device.

00:18:34.746 --> 00:18:37.876 A:middle
We've also got silent types
of remote notifications.

00:18:38.736 --> 00:18:42.496 A:middle
This is when your APNs server
is sending a push notification

00:18:42.496 --> 00:18:44.806 A:middle
with a content available
flag contained in it.

00:18:45.596 --> 00:18:48.516 A:middle
And then instead of us
presenting a user notification

00:18:48.826 --> 00:18:54.206 A:middle
on the device, instead iOS 8 is
going to come in, wake your app

00:18:54.206 --> 00:18:55.946 A:middle
up in the background,
then it can go

00:18:55.946 --> 00:18:57.766 A:middle
and fetch whatever
content it needs to

00:18:57.766 --> 00:19:01.106 A:middle
or do whatever info
processing is necessary so that


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:57.766 --> 00:19:01.106 A:middle
or do whatever info
processing is necessary so that

00:19:01.106 --> 00:19:02.916 A:middle
when the user next
launches the app,

00:19:03.706 --> 00:19:07.266 A:middle
all that info is right there
ready for them to ingest.

00:19:09.506 --> 00:19:12.496 A:middle
So, for user notifications
that are sourced

00:19:12.496 --> 00:19:17.186 A:middle
from remote payloads, just
like for local notifications,

00:19:17.676 --> 00:19:21.206 A:middle
you must make sure that your app
calls registerUserNotification

00:19:21.206 --> 00:19:24.436 A:middle
Settings before any
alerts or badges

00:19:24.626 --> 00:19:27.486 A:middle
or sounds are actually
going to be presented.

00:19:27.486 --> 00:19:30.216 A:middle
You will need to also
register for remote pushes.

00:19:30.216 --> 00:19:31.806 A:middle
And we'll show how to
get into that later.

00:19:33.316 --> 00:19:37.086 A:middle
Now, for silent notifications,
just like in iOS 7 and before,

00:19:37.536 --> 00:19:40.606 A:middle
you need to define in
your info.plist file a

00:19:40.606 --> 00:19:41.876 A:middle
UIBackgroundModes array.

00:19:41.876 --> 00:19:45.036 A:middle
And that array must
contain an entry

00:19:45.066 --> 00:19:46.876 A:middle
of remote notification in it.

00:19:48.066 --> 00:19:50.696 A:middle
So, user notifications,
silent notifications,

00:19:50.696 --> 00:19:52.186 A:middle
these are not mutually
exclusive.

00:19:52.676 --> 00:19:54.166 A:middle
Your app actually can use both.

00:19:54.766 --> 00:19:57.236 A:middle
Mix and match them to
whatever makes most sense

00:19:57.236 --> 00:20:02.056 A:middle
for your users and for your app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:57.236 --> 00:20:02.056 A:middle
for your users and for your app.

00:20:02.346 --> 00:20:05.216 A:middle
So, for remote notifications,
you must make sure

00:20:05.506 --> 00:20:08.376 A:middle
that you are registering before
you can receive any pushes

00:20:08.376 --> 00:20:09.516 A:middle
from your APNs server.

00:20:10.986 --> 00:20:14.896 A:middle
Now, in iOS 7, when
you would register

00:20:14.896 --> 00:20:16.106 A:middle
for remote notifications,

00:20:16.156 --> 00:20:17.836 A:middle
we would ask the
user for permission.

00:20:18.996 --> 00:20:21.876 A:middle
But now, since we have separated
the concept of registering

00:20:21.876 --> 00:20:24.736 A:middle
for user notifications, which
does require permission,

00:20:25.246 --> 00:20:27.616 A:middle
from remote notifications
that could be user type

00:20:27.706 --> 00:20:32.136 A:middle
or silent type, we actually are
opting your apps into being able

00:20:32.136 --> 00:20:35.586 A:middle
to receive remote notifications
of any payload type by default.

00:20:36.836 --> 00:20:39.416 A:middle
However, keep in
mind-ah, OK, cool.

00:20:40.516 --> 00:20:42.726 A:middle
[ Applause ]

00:20:43.226 --> 00:20:46.266 A:middle
Thanks! Keep in mind,
however, that the user could

00:20:46.266 --> 00:20:48.086 A:middle
at any time go into
the settings app

00:20:48.086 --> 00:20:49.426 A:middle
and change their preferences.

00:20:51.856 --> 00:20:54.786 A:middle
So, how do we actually register
for remote notifications?

00:20:56.126 --> 00:20:58.586 A:middle
In iOS 7 and before,
we asked you

00:20:58.586 --> 00:21:01.406 A:middle
to call this method
here registerForRemote


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.586 --> 00:21:01.406 A:middle
to call this method
here registerForRemote

00:21:01.406 --> 00:21:02.716 A:middle
NotificationTypes.

00:21:03.236 --> 00:21:04.476 A:middle
That's now deprecated.

00:21:04.826 --> 00:21:08.056 A:middle
Because we've change the way
we define user notifications

00:21:08.056 --> 00:21:11.356 A:middle
and remote notifications,
all you need to do is call

00:21:11.356 --> 00:21:14.556 A:middle
on UIApplication, register
for remote notifications.

00:21:15.266 --> 00:21:20.966 A:middle
Now again, this will allow your
app to receive remote payloads

00:21:21.066 --> 00:21:22.796 A:middle
that are coming from
your APNs server.

00:21:23.556 --> 00:21:26.086 A:middle
But if you want user
notifications to be presented

00:21:26.086 --> 00:21:28.496 A:middle
in response to those
payloads, if you've got, say,

00:21:28.496 --> 00:21:30.836 A:middle
an alert defined
in those payloads,

00:21:31.266 --> 00:21:34.976 A:middle
you also must make sure that you
call registerUserNotification

00:21:34.976 --> 00:21:39.146 A:middle
Settings, as I explained
earlier in the talk.

00:21:39.416 --> 00:21:42.126 A:middle
So, once you've called
registerForRemoteNotifications

00:21:42.616 --> 00:21:45.486 A:middle
as well as optionally
registerUserNotification

00:21:45.486 --> 00:21:48.736 A:middle
Settings, your app
delegate needs

00:21:48.856 --> 00:21:51.356 A:middle
to implement
applicationDidRegisterForRemote

00:21:51.356 --> 00:21:53.426 A:middle
NotificationsWithDeviceToken.

00:21:53.936 --> 00:21:55.426 A:middle
This actually isn't new API.

00:21:55.936 --> 00:21:58.746 A:middle
This is something that has
existed in iOS 7 and previously.

00:21:59.116 --> 00:22:01.886 A:middle
Just letting you know that you
still need to implement this


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.116 --> 00:22:01.886 A:middle
Just letting you know that you
still need to implement this

00:22:02.046 --> 00:22:03.646 A:middle
for handling remote
notifications.

00:22:04.186 --> 00:22:07.686 A:middle
And what this callback does
is it provides your app

00:22:07.836 --> 00:22:11.956 A:middle
with a device token, where once
you receive that token you need

00:22:11.956 --> 00:22:14.336 A:middle
to go and pass it off
to your APNs server.

00:22:14.906 --> 00:22:17.696 A:middle
Now recall, you need
to make sure

00:22:17.696 --> 00:22:20.456 A:middle
that you've always got the
most up-to-date device token

00:22:20.666 --> 00:22:22.526 A:middle
registered with your
APNs server.

00:22:22.916 --> 00:22:26.006 A:middle
Otherwise, pushes may not make
their way to the user's device.

00:22:26.506 --> 00:22:29.596 A:middle
So, in the case that the user
happened to disable your app

00:22:29.706 --> 00:22:33.226 A:middle
from using remote notifications,
or for any other failure case,

00:22:34.316 --> 00:22:36.536 A:middle
recall that the app
delegate also needs

00:22:36.536 --> 00:22:39.086 A:middle
to implement
applicationDidFailToRegister

00:22:39.086 --> 00:22:40.576 A:middle
ForvRemote
NotificationsWithError.

00:22:41.966 --> 00:22:45.296 A:middle
And at this point, all you need
to do is take that error object,

00:22:45.336 --> 00:22:49.076 A:middle
process it appropriately and
make sure you disable any logic

00:22:49.076 --> 00:22:50.866 A:middle
within your application
that's hinged off

00:22:50.866 --> 00:22:52.646 A:middle
of receiving remote
notifications.

00:22:53.186 --> 00:22:55.886 A:middle
You don't want to be doing
any unnecessary processing

00:22:55.886 --> 00:22:57.786 A:middle
within your app for
notifications

00:22:57.786 --> 00:22:59.026 A:middle
that aren't going
to be coming in.

00:22:59.546 --> 00:23:01.016 A:middle
Just gracefully degrade.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.546 --> 00:23:01.016 A:middle
Just gracefully degrade.

00:23:01.586 --> 00:23:06.556 A:middle
So, that's what's new with
remote notifications in iOS 8.

00:23:07.156 --> 00:23:10.166 A:middle
Again, just like before,
you do have to register

00:23:10.166 --> 00:23:12.846 A:middle
for remote notifications before
you can actually receive them.

00:23:14.276 --> 00:23:18.756 A:middle
However, now in iOS 8,
the user will be opted

00:23:18.756 --> 00:23:22.046 A:middle
into receiving remote
notifications.

00:23:22.746 --> 00:23:25.456 A:middle
And they could go into
settings later and disable this.

00:23:26.356 --> 00:23:27.746 A:middle
However, it does
still require you

00:23:27.746 --> 00:23:29.336 A:middle
to call this registration API.

00:23:29.336 --> 00:23:32.606 A:middle
As well as this API has changed.

00:23:32.606 --> 00:23:35.036 A:middle
We've simplified it,
and have named it

00:23:35.036 --> 00:23:36.726 A:middle
registerForRemoteNotifications.

00:23:37.056 --> 00:23:39.726 A:middle
You can call that on the
UIApplication shared instance.

00:23:40.256 --> 00:23:43.556 A:middle
Cool. So, let's get into
the last topic of today,

00:23:43.896 --> 00:23:45.516 A:middle
location-based notifications,

00:23:46.336 --> 00:23:47.866 A:middle
something we're very
excited about.

00:23:47.866 --> 00:23:50.276 A:middle
We've been working with the Core
Location Team for this feature.

00:23:50.676 --> 00:23:51.956 A:middle
Very happy to talk
about it today.

00:23:53.446 --> 00:23:56.256 A:middle
So, let's say that
you've got an app.

00:23:57.166 --> 00:24:00.666 A:middle
And you want to notify the
user when they happen to arrive


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.166 --> 00:24:00.666 A:middle
And you want to notify the
user when they happen to arrive

00:24:00.666 --> 00:24:02.626 A:middle
at some certain geographic
location.

00:24:03.686 --> 00:24:06.316 A:middle
So, the user is on their
device and they happen

00:24:06.316 --> 00:24:07.416 A:middle
to wander into that area.

00:24:07.416 --> 00:24:09.266 A:middle
And you want to show,
say, an alert.

00:24:10.816 --> 00:24:13.466 A:middle
Well you could do this
in iOS 7 and before,

00:24:13.466 --> 00:24:15.386 A:middle
but it required a lot
of hoops to jump through

00:24:16.716 --> 00:24:17.726 A:middle
and also could make

00:24:17.726 --> 00:24:20.076 A:middle
for a somewhat confusing
user experience.

00:24:21.306 --> 00:24:24.196 A:middle
In iOS 8, however, we
have streamlined this API.

00:24:25.606 --> 00:24:28.256 A:middle
All it is is simple
additions on top

00:24:28.256 --> 00:24:32.046 A:middle
of the UILocalNotification
API class.

00:24:32.046 --> 00:24:36.696 A:middle
And what you can do is define
core location region objects

00:24:37.826 --> 00:24:39.956 A:middle
and attach them to
this notification

00:24:39.956 --> 00:24:42.576 A:middle
so that the notification will
fire when the user happens

00:24:42.606 --> 00:24:45.166 A:middle
to come near, enter
or exit a region.

00:24:46.246 --> 00:24:49.606 A:middle
Now, you can make it so
that these notifications are

00:24:49.606 --> 00:24:51.416 A:middle
presented only the
very first time

00:24:51.416 --> 00:24:53.186 A:middle
that the user happens
to enter this region.

00:24:53.686 --> 00:24:55.346 A:middle
Or you could have it fire always

00:24:55.346 --> 00:24:57.746 A:middle
if that makes sense
for your app.

00:24:58.566 --> 00:25:01.216 A:middle
And, again, since this feature
is so tightly integrated


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.566 --> 00:25:01.216 A:middle
And, again, since this feature
is so tightly integrated

00:25:01.296 --> 00:25:04.066 A:middle
with core location, it
does require a little bit

00:25:04.066 --> 00:25:06.156 A:middle
of core location
registration on your part.

00:25:06.776 --> 00:25:08.216 A:middle
So, let's take a look at what

00:25:08.216 --> 00:25:10.526 A:middle
that registration
code is before we get

00:25:10.526 --> 00:25:13.326 A:middle
into how we can actually
schedule these notifications.

00:25:13.886 --> 00:25:15.826 A:middle
So, here we are.

00:25:16.306 --> 00:25:21.166 A:middle
What we need to do is create
a CLLocationManager instance.

00:25:23.416 --> 00:25:26.156 A:middle
Then we just need to set the
delegate on this manager.

00:25:26.506 --> 00:25:30.456 A:middle
The delegate is going to receive
callbacks notifying whether your

00:25:30.456 --> 00:25:33.536 A:middle
app is allowed to or not allowed
to track the user's location.

00:25:34.136 --> 00:25:37.886 A:middle
And then finally, in order

00:25:37.886 --> 00:25:40.186 A:middle
to enable these location-based
notifications,

00:25:40.986 --> 00:25:43.236 A:middle
on the location manager
instance you need

00:25:43.236 --> 00:25:45.556 A:middle
to call
requestWhenInUseAuthorization.

00:25:46.806 --> 00:25:47.656 A:middle
So, what does this mean?

00:25:48.756 --> 00:25:51.046 A:middle
WhenInUseAuthorization
-essentially,

00:25:51.076 --> 00:25:53.776 A:middle
if the user says OK,
will allow your app

00:25:53.776 --> 00:25:56.826 A:middle
to track the user's location or
know about the user's location

00:25:57.156 --> 00:25:58.966 A:middle
when your app is running
in the foreground.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:00.676 --> 00:26:03.216 A:middle
However, recall these
notifications are going

00:26:03.216 --> 00:26:06.476 A:middle
to be appearing on the user's
device even if your app is

00:26:06.476 --> 00:26:08.006 A:middle
in the background or suspended.

00:26:08.006 --> 00:26:10.726 A:middle
And they might be able
to see these alerts.

00:26:11.446 --> 00:26:14.306 A:middle
Well, that's OK because even
if your app has been disabled

00:26:14.306 --> 00:26:17.646 A:middle
for core location, and even if
the user is seeing those alerts,

00:26:17.936 --> 00:26:19.986 A:middle
your app won't be
receiving any callbacks

00:26:20.176 --> 00:26:22.146 A:middle
until the user actually
interacts with that alert

00:26:22.386 --> 00:26:25.196 A:middle
and your app is still allowed
to track the user's location.

00:26:25.756 --> 00:26:28.036 A:middle
So we're requesting our
WhenInUseAuthorization

00:26:28.036 --> 00:26:31.666 A:middle
from CLLocationManager, assuming
this is the very first time

00:26:31.666 --> 00:26:34.806 A:middle
that your app has called
this code, the user is going

00:26:34.806 --> 00:26:36.496 A:middle
to be presented with
a permission alert,

00:26:37.616 --> 00:26:39.696 A:middle
just basically saying
is it OK for this app

00:26:39.866 --> 00:26:42.206 A:middle
to track your location when
it's running in the foreground.

00:26:42.506 --> 00:26:45.956 A:middle
Notice, however, in that alert,
we've got that usage text

00:26:45.956 --> 00:26:47.366 A:middle
down below in the smaller font.

00:26:48.316 --> 00:26:51.386 A:middle
This is actually something that
our app has defined on its own.

00:26:52.076 --> 00:26:53.006 A:middle
And you need to make sure

00:26:53.006 --> 00:26:55.556 A:middle
that your app defines
this usage text as well.

00:26:56.996 --> 00:27:01.076 A:middle
So to do that, in
your info.plist file,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:56.996 --> 00:27:01.076 A:middle
So to do that, in
your info.plist file,

00:27:01.996 --> 00:27:03.226 A:middle
hopefully this makes
it easier to read,

00:27:03.226 --> 00:27:07.416 A:middle
we've got NSLocationWhenvI
nUseUsageDescription.

00:27:07.416 --> 00:27:09.146 A:middle
You've just got to
define this key.

00:27:09.526 --> 00:27:10.846 A:middle
The value is going
to be a string.

00:27:11.346 --> 00:27:13.586 A:middle
And this is the actual
usage text that's going

00:27:13.616 --> 00:27:16.946 A:middle
to appear in that alert.

00:27:16.946 --> 00:27:19.066 A:middle
Recall, however, that
if your app is running

00:27:19.066 --> 00:27:21.026 A:middle
in different locales
in different languages,

00:27:21.306 --> 00:27:23.666 A:middle
you need to make sure that
this string is localized

00:27:23.666 --> 00:27:25.746 A:middle
appropriately for all
those other languages.

00:27:26.386 --> 00:27:29.956 A:middle
So, make sure that you
define values for this key

00:27:30.326 --> 00:27:32.236 A:middle
in your info.plist
strings file as well.

00:27:32.606 --> 00:27:35.676 A:middle
So, now we've asked the
user if it's OK for your app

00:27:35.676 --> 00:27:37.966 A:middle
to track their location when
it's running in the foreground.

00:27:38.686 --> 00:27:40.946 A:middle
Now we actually need
to handle the callback

00:27:40.946 --> 00:27:42.336 A:middle
from CLLocationManager.

00:27:43.006 --> 00:27:47.326 A:middle
And to do this, your
manager's delegate is going

00:27:47.326 --> 00:27:51.016 A:middle
to receive this callback
LocationManagerDid

00:27:51.096 --> 00:27:52.736 A:middle
hangeAuthorizationStatus.

00:27:52.736 --> 00:27:53.936 A:middle
At that point, all you need

00:27:53.936 --> 00:27:58.186 A:middle
to do is just make sure the
status is the When in Use status

00:27:58.566 --> 00:27:59.646 A:middle
if you are authorized

00:27:59.646 --> 00:28:02.046 A:middle
for tracking the user's
location when in use.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.646 --> 00:28:02.046 A:middle
for tracking the user's
location when in use.

00:28:02.996 --> 00:28:05.736 A:middle
Then at that point you
can start scheduling these

00:28:05.736 --> 00:28:07.336 A:middle
location-based notifications.

00:28:08.016 --> 00:28:09.986 A:middle
So, how do we actually
schedule these

00:28:10.046 --> 00:28:11.416 A:middle
location-based notifications?

00:28:11.926 --> 00:28:15.186 A:middle
Let's take a look
at some sample code

00:28:15.186 --> 00:28:18.436 A:middle
of how we could schedule a
notification that triggers

00:28:18.436 --> 00:28:20.266 A:middle
in response to the
user entering a region.

00:28:21.756 --> 00:28:23.176 A:middle
Very first thing you need to do,

00:28:23.176 --> 00:28:25.686 A:middle
just like any other
UI local notification

00:28:25.686 --> 00:28:28.616 A:middle
that would otherwise be
triggered by a date or a time,

00:28:29.176 --> 00:28:31.906 A:middle
you've first got to create an
instance of UILocalNotification

00:28:32.436 --> 00:28:33.636 A:middle
and define what type

00:28:33.636 --> 00:28:35.536 A:middle
of notification this
is going to be.

00:28:36.496 --> 00:28:38.986 A:middle
In this case, we're just saying
this is going to be an alert.

00:28:38.986 --> 00:28:41.126 A:middle
When the user happens
to enter that region,

00:28:41.316 --> 00:28:43.546 A:middle
assuming the app isn't running
in the foreground, they're going

00:28:43.546 --> 00:28:45.796 A:middle
to get a little popup
saying: Hey, you have arrived.

00:28:47.916 --> 00:28:51.856 A:middle
Then, specific to region
type, core location type,

00:28:52.126 --> 00:28:56.816 A:middle
user UI local notifications,
we're stating here

00:28:57.136 --> 00:28:59.476 A:middle
that we only want
this notification

00:28:59.476 --> 00:29:02.126 A:middle
to trigger the very first
time the user happens


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.476 --> 00:29:02.126 A:middle
to trigger the very first
time the user happens

00:29:02.126 --> 00:29:03.366 A:middle
to enter or exit this region.

00:29:04.266 --> 00:29:05.886 A:middle
Now this is actually
the default behavior.

00:29:05.886 --> 00:29:08.036 A:middle
So, it's a little
bit superfluous here.

00:29:08.856 --> 00:29:12.156 A:middle
However, you could set this
to No if that makes sense

00:29:12.406 --> 00:29:14.806 A:middle
for your users and for your app.

00:29:17.236 --> 00:29:21.506 A:middle
Next, you just need to create
a CL region instance and set it

00:29:21.506 --> 00:29:23.926 A:middle
on the region property of
the UI local notification.

00:29:24.536 --> 00:29:27.526 A:middle
So, in this case, we're defining
a CLCircularRegion here,

00:29:27.726 --> 00:29:29.916 A:middle
and we're just giving it
some arbitrary coordinate

00:29:29.916 --> 00:29:32.406 A:middle
with some radius so that when
the user enters this circle,

00:29:32.406 --> 00:29:35.696 A:middle
this notification is
going to be triggered.

00:29:36.396 --> 00:29:39.146 A:middle
However, I did say that this
is a CL region property.

00:29:39.306 --> 00:29:42.206 A:middle
So, you could also use CL
beacon regions or any other type

00:29:42.206 --> 00:29:43.716 A:middle
of CL region subclass.

00:29:43.716 --> 00:29:45.876 A:middle
And if you want to find out more

00:29:46.176 --> 00:29:48.396 A:middle
about how you can
use Core Location,

00:29:48.786 --> 00:29:51.906 A:middle
especially in combination
with UILocalNotification,

00:29:52.386 --> 00:29:54.346 A:middle
I've got some resources
to point you towards

00:29:54.346 --> 00:29:59.146 A:middle
at the end of this talk.

00:29:59.326 --> 00:30:02.196 A:middle
Finally, on your UIApplication
shared instance, you just need


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.326 --> 00:30:02.196 A:middle
Finally, on your UIApplication
shared instance, you just need

00:30:02.196 --> 00:30:03.946 A:middle
to call
scheduleLocalNotification,

00:30:04.306 --> 00:30:05.936 A:middle
passing this notification just

00:30:05.936 --> 00:30:09.206 A:middle
like you would any other
user-type local notification.

00:30:11.496 --> 00:30:14.676 A:middle
So, cool. Now we've actually
got this notification scheduled.

00:30:15.096 --> 00:30:17.836 A:middle
Assuming that your app is
running in the background

00:30:17.836 --> 00:30:20.546 A:middle
or suspended, rather, and
the user happens to enter

00:30:20.546 --> 00:30:22.826 A:middle
into that region, they're
going to be presented

00:30:22.826 --> 00:30:24.516 A:middle
with an alert saying: Hey,

00:30:24.516 --> 00:30:25.776 A:middle
you've arrived at
your destination.

00:30:26.516 --> 00:30:28.936 A:middle
And your app can handle
that local notification

00:30:29.276 --> 00:30:31.586 A:middle
in the applicationDidFinish
LaunchingWithOptions.

00:30:32.446 --> 00:30:35.566 A:middle
Alternatively, if your app
is running in the foreground

00:30:35.566 --> 00:30:37.736 A:middle
when the user happens to
enter into that region,

00:30:38.786 --> 00:30:40.746 A:middle
your app delegate is
going to be called back

00:30:40.796 --> 00:30:43.336 A:middle
with applicationDidReceive
LocalNotification.

00:30:44.726 --> 00:30:46.566 A:middle
So, the two different
methods here,

00:30:46.566 --> 00:30:48.046 A:middle
applicationDid FInishLaunching

00:30:48.326 --> 00:30:50.866 A:middle
versus applicationDidReceive
LocalNotification,

00:30:50.866 --> 00:30:52.736 A:middle
the logic is very, very similar.

00:30:53.136 --> 00:30:56.086 A:middle
So let's just take a look at the
latter step, or the latter part.

00:30:57.256 --> 00:31:01.046 A:middle
So, we've been informed that the
user has entered into a region,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:57.256 --> 00:31:01.046 A:middle
So, we've been informed that the
user has entered into a region,

00:31:01.616 --> 00:31:04.796 A:middle
or rather that the user has
received a local notification,

00:31:05.106 --> 00:31:07.486 A:middle
and we want to check
whether this is actually

00:31:07.486 --> 00:31:08.746 A:middle
region-based notification.

00:31:09.596 --> 00:31:13.336 A:middle
Well, UILocalNotification has
a region property now to see

00:31:13.336 --> 00:31:15.976 A:middle
if that region happens
to not be nil.

00:31:16.566 --> 00:31:20.746 A:middle
And if it isn't, we've got a
location-based notification.

00:31:20.746 --> 00:31:22.546 A:middle
And we can do whatever
makes sense.

00:31:22.646 --> 00:31:24.466 A:middle
Tell all the user's friends
where they've arrived.

00:31:26.826 --> 00:31:28.866 A:middle
So, that's location-based
notifications.

00:31:29.306 --> 00:31:31.826 A:middle
It's very, very simple
API that's added

00:31:31.826 --> 00:31:33.366 A:middle
onto UI LocalNotification.

00:31:33.366 --> 00:31:36.616 A:middle
And it's so simple because
we've integrated directly

00:31:36.616 --> 00:31:37.576 A:middle
with core location.

00:31:38.646 --> 00:31:40.566 A:middle
However, because
we've integrated this

00:31:40.566 --> 00:31:41.896 A:middle
with Core Location,

00:31:42.706 --> 00:31:45.766 A:middle
we do require some Core
Location registration logic.

00:31:46.056 --> 00:31:50.046 A:middle
Now, again, this is all as well

00:31:50.046 --> 00:31:53.206 A:middle
about keeping the user's
privacy first place in mind.

00:31:53.826 --> 00:31:56.526 A:middle
So, if the user happens to
have ever disabled your app

00:31:56.526 --> 00:31:59.726 A:middle
from being able to track their
location, even when your app is

00:31:59.726 --> 00:32:02.886 A:middle
in the foreground, you're not
going to be receiving callbacks


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.726 --> 00:32:02.886 A:middle
in the foreground, you're not
going to be receiving callbacks

00:32:02.886 --> 00:32:05.176 A:middle
like applicationDidReceive
LocalNotification

00:32:05.486 --> 00:32:07.476 A:middle
for location-based
notifications.

00:32:07.606 --> 00:32:11.446 A:middle
The user might launch your
app in response to an alert

00:32:11.446 --> 00:32:14.546 A:middle
that was presented as a
location-based notification.

00:32:14.926 --> 00:32:16.966 A:middle
But still, your app
isn't going to know that.

00:32:17.316 --> 00:32:20.936 A:middle
And that was a lot of stuff
that we talked about today.

00:32:21.476 --> 00:32:22.856 A:middle
Biggest thing, we've
been talking

00:32:22.856 --> 00:32:24.566 A:middle
about notification actions.

00:32:24.566 --> 00:32:25.586 A:middle
Rhett came up here, talked

00:32:25.586 --> 00:32:27.676 A:middle
about this great new
feature for iOS 8.

00:32:27.986 --> 00:32:29.756 A:middle
So psyched to see
you guys use it,

00:32:29.756 --> 00:32:33.016 A:middle
making your apps interactive,
even when they're not running

00:32:33.016 --> 00:32:35.886 A:middle
in the foreground, in really
new and powerful ways.

00:32:36.906 --> 00:32:39.736 A:middle
Some simple changes behind user

00:32:39.736 --> 00:32:41.896 A:middle
and remote notification
registration.

00:32:42.496 --> 00:32:45.646 A:middle
Again, we've separated the
concept of having to register

00:32:45.646 --> 00:32:47.796 A:middle
for different remote
notification types

00:32:48.376 --> 00:32:52.026 A:middle
and instead ask you to register
for the user notification types

00:32:52.336 --> 00:32:53.556 A:middle
that your app is going to use.

00:32:54.556 --> 00:32:57.056 A:middle
And then we had location-based
notifications,

00:32:57.376 --> 00:32:59.376 A:middle
integrating tightly
with Core Location

00:32:59.746 --> 00:33:03.486 A:middle
to schedule user
notifications in response


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.746 --> 00:33:03.486 A:middle
to schedule user
notifications in response

00:33:03.486 --> 00:33:05.346 A:middle
to the user entering
or exiting regions.

00:33:06.106 --> 00:33:08.896 A:middle
So, that was a lot of stuff.

00:33:08.896 --> 00:33:11.386 A:middle
And we've got great resources
for you guys to check out.

00:33:11.936 --> 00:33:14.916 A:middle
Paul Danbold, he's our Core
OS Technologies Evangelist.

00:33:15.106 --> 00:33:16.076 A:middle
He is a great guy.

00:33:16.076 --> 00:33:20.496 A:middle
And you can send him
letters at danbold@apple.com.

00:33:20.496 --> 00:33:23.706 A:middle
We've also got documentation
at developer@apple.com

00:33:23.756 --> 00:33:24.926 A:middle
as well the dev forums.

00:33:24.926 --> 00:33:26.306 A:middle
Talk to like-minded developers.

00:33:26.726 --> 00:33:29.746 A:middle
Find out how other people are
using these great new features.

00:33:30.006 --> 00:33:30.836 A:middle
Ask your questions.

00:33:30.836 --> 00:33:31.526 A:middle
Get them answered.

00:33:31.806 --> 00:33:35.356 A:middle
But, but, but-this is WWDC.

00:33:35.896 --> 00:33:37.746 A:middle
And we've also got
other sessions.

00:33:37.746 --> 00:33:39.226 A:middle
Now, these sessions
happened previously.

00:33:39.506 --> 00:33:41.196 A:middle
What's New in Core
Location as well

00:33:41.196 --> 00:33:43.466 A:middle
as Taking Core Location
Indoors happened yesterday,

00:33:43.806 --> 00:33:46.496 A:middle
but these are available
online as well

00:33:46.496 --> 00:33:47.876 A:middle
as Protecting the User's Data.

00:33:48.076 --> 00:33:50.286 A:middle
Rhett hinted at that
data class protection.

00:33:50.776 --> 00:33:53.336 A:middle
Well, in 2012 we had a
session on these as well.

00:33:53.336 --> 00:33:55.956 A:middle
And you can check out
these videos online, too.

00:33:56.866 --> 00:33:57.996 A:middle
So, you guys have been great.

00:33:58.266 --> 00:34:00.146 A:middle
Thank you so much
for coming to WWDC.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.266 --> 00:34:00.146 A:middle
Thank you so much
for coming to WWDC.

00:34:00.146 --> 00:34:01.976 A:middle
Hope you have a great
rest of your week.

00:34:02.516 --> 00:34:13.219 A:middle
[ Applause ]

