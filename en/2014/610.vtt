WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:13.196 --> 00:00:13.986 A:middle
&gt;&gt; Hello.

00:00:15.516 --> 00:00:18.766 A:middle
[ Applause ]

00:00:19.266 --> 00:00:22.636 A:middle
Welcome to Session 610:

"Building a Game with SceneKit."

00:00:24.256 --> 00:00:27.686 A:middle
SceneKit is an amazing

technology that makes it easy

00:00:27.686 --> 00:00:31.196 A:middle
to write casual 3D games.

00:00:31.376 --> 00:00:34.796 A:middle
Because SceneKit is a high

level API that integrates well

00:00:34.916 --> 00:00:37.936 A:middle
with other Cocoa frameworks,

it's really easy to write games.

00:00:38.106 --> 00:00:39.926 A:middle
We built this demo for WWDC,

00:00:39.926 --> 00:00:43.266 A:middle
and I only required

a few lines of code.

00:00:44.176 --> 00:00:47.516 A:middle
We believe that building

a casual 3D game

00:00:47.636 --> 00:00:50.726 A:middle
with SceneKit is really easy,

and anybody can do that.

00:00:50.966 --> 00:00:51.976 A:middle
It's really fantastic.

00:00:53.136 --> 00:00:55.746 A:middle
So, this is a hands-on session,

00:00:55.746 --> 00:00:57.226 A:middle
so hopefully you

are already familiar

00:00:57.226 --> 00:00:58.646 A:middle
with the basics of SceneKit.

00:00:58.806 --> 00:01:01.766 A:middle
You should know what

a scene graph is;


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.806 --> 00:01:01.766 A:middle
You should know what

a scene graph is;

00:01:01.906 --> 00:01:06.006 A:middle
that nodes have attributes such

as geometry, camera and lights;

00:01:06.426 --> 00:01:10.186 A:middle
and if not, we have great

sessions about this,

00:01:10.186 --> 00:01:11.996 A:middle
one just before and

one last year.

00:01:12.606 --> 00:01:15.086 A:middle
I encourage you to check

these presentations

00:01:15.086 --> 00:01:19.796 A:middle
because they have 3D slides

entirely made in SceneKit.

00:01:19.846 --> 00:01:22.086 A:middle
So, in this session, we

will start really quick

00:01:22.296 --> 00:01:26.596 A:middle
by showing you how to start

in Xcode, how to add 3D assets

00:01:26.596 --> 00:01:29.056 A:middle
to your project, and have

your first scene rendered

00:01:29.056 --> 00:01:29.646 A:middle
to the screen.

00:01:30.586 --> 00:01:32.716 A:middle
Then we will show you

our Bananas demos.

00:01:33.096 --> 00:01:35.756 A:middle
It's a great demo because

it shows many features

00:01:35.756 --> 00:01:37.846 A:middle
of the SceneKit framework,

and we will use

00:01:37.846 --> 00:01:39.646 A:middle
that demo throughout

the rest of the session.

00:01:40.046 --> 00:01:42.046 A:middle
We will explain to

you how we made it

00:01:42.046 --> 00:01:43.656 A:middle
so then you can create

your own games.

00:01:43.846 --> 00:01:46.656 A:middle
And finally, Thomas will

join me onstage to talk

00:01:46.656 --> 00:01:49.496 A:middle
about performance and creating

custom tools for SceneKit.

00:01:50.966 --> 00:01:52.536 A:middle
Okay, let's get started.

00:01:52.536 --> 00:01:58.686 A:middle
The first thing you want to have

when building a 3D app is a view

00:01:58.686 --> 00:02:01.786 A:middle
to render your scene, and

that's just easy as you see.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.686 --> 00:02:01.786 A:middle
to render your scene, and

that's just easy as you see.

00:02:02.476 --> 00:02:05.596 A:middle
While integrating between

the interface builder,

00:02:05.906 --> 00:02:09.246 A:middle
so all what you have to

do is drag an SCNView

00:02:09.246 --> 00:02:11.986 A:middle
from the object library and

drop it onto your [inaudible].

00:02:13.996 --> 00:02:17.396 A:middle
Then you open the inspector,

00:02:17.396 --> 00:02:19.286 A:middle
where you can set the

visual properties,

00:02:19.506 --> 00:02:22.456 A:middle
and you simply specify

the name of the 3D scene.

00:02:22.666 --> 00:02:26.716 A:middle
You click Build and Run,

and boom: Without having

00:02:27.266 --> 00:02:28.826 A:middle
to write any single

line of code,

00:02:28.906 --> 00:02:30.606 A:middle
you have your first scene

rendered on the screen.

00:02:30.606 --> 00:02:34.976 A:middle
Now, if you are starting a new

project, you might want to start

00:02:35.186 --> 00:02:36.506 A:middle
with a new game template.

00:02:37.086 --> 00:02:40.246 A:middle
It's really convenient because

it creates a universal app

00:02:40.516 --> 00:02:44.946 A:middle
that runs on iPhone and iPad,

and it has a full-screen 3D view

00:02:45.046 --> 00:02:48.316 A:middle
that displays a scene

you can interact with.

00:02:51.356 --> 00:02:52.946 A:middle
The way you add 3D assets

00:02:53.106 --> 00:02:55.576 A:middle
to your game is just

SceneKit asset catalogs.

00:02:56.906 --> 00:03:00.206 A:middle
SceneKit asset catalogs

are new feature in Xcode 6,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:56.906 --> 00:03:00.206 A:middle
SceneKit asset catalogs

are new feature in Xcode 6,

00:03:00.256 --> 00:03:03.986 A:middle
and they allow you to organize

and optimize your 3D assets.

00:03:05.136 --> 00:03:09.386 A:middle
The structure of SceneKit

asset catalogs is preserved

00:03:09.466 --> 00:03:11.286 A:middle
when they are copied

into your target.

00:03:11.886 --> 00:03:15.686 A:middle
Also, they automatically track

files that are added to them

00:03:15.686 --> 00:03:17.136 A:middle
or removed from them on disc.

00:03:21.056 --> 00:03:23.366 A:middle
They are really convenient

00:03:23.366 --> 00:03:25.646 A:middle
because they can optimize

your 3D assets for you.

00:03:25.936 --> 00:03:30.326 A:middle
For instance, they help

with up axis conversion.

00:03:31.196 --> 00:03:33.246 A:middle
SceneKit follows the

up axis conversion,

00:03:33.396 --> 00:03:36.996 A:middle
which means that the positive y

axis is the one that looks up.

00:03:38.336 --> 00:03:39.896 A:middle
This is a convention

that is followed

00:03:39.896 --> 00:03:42.186 A:middle
by many other applications

and frameworks,

00:03:42.606 --> 00:03:44.696 A:middle
but some exporters

do things differently

00:03:44.746 --> 00:03:47.936 A:middle
and use a z up axis convention.

00:03:48.486 --> 00:03:49.796 A:middle
With SceneKit asset catalogs,

00:03:49.916 --> 00:03:51.216 A:middle
you don't have to

think about that.

00:03:51.716 --> 00:03:52.466 A:middle
We automatically

00:03:52.466 --> 00:03:56.396 A:middle
and transparently convert all

the animations and geometries

00:03:56.396 --> 00:03:59.056 A:middle
in your scene so that they

follow the up axis convention.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:00.396 --> 00:04:01.616 A:middle
We are also able

00:04:01.956 --> 00:04:05.596 A:middle
to automatically interleave

your geometries at build time.

00:04:06.396 --> 00:04:10.496 A:middle
This means that your

vertices' position, normal,

00:04:10.496 --> 00:04:13.546 A:middle
and texture coordinates are

stored in a single buffer

00:04:13.546 --> 00:04:15.156 A:middle
that makes the GPU really happy

00:04:15.156 --> 00:04:18.266 A:middle
and faster rendering

your geometries.

00:04:18.736 --> 00:04:22.346 A:middle
And finally, on iOS we

support PVRTC textures.

00:04:22.606 --> 00:04:24.866 A:middle
If you have two versions

of the same texture,

00:04:25.116 --> 00:04:27.356 A:middle
one with the PVRTC

file extension -

00:04:27.356 --> 00:04:30.406 A:middle
which is a compressed file

format that is optimized

00:04:30.406 --> 00:04:33.776 A:middle
for iOS - and another version

- for instance, a PNG -

00:04:33.776 --> 00:04:38.196 A:middle
this code will automatically

select the PVRTC texture

00:04:38.196 --> 00:04:40.696 A:middle
when you target iOS

and the regular version

00:04:40.746 --> 00:04:41.976 A:middle
when you target OS X.

00:04:45.346 --> 00:04:48.476 A:middle
So, this is how it

works: Your artist works

00:04:48.866 --> 00:04:50.546 A:middle
in their favorite

authoring tool;

00:04:51.196 --> 00:04:54.106 A:middle
they export all the animation

and models you want to use

00:04:54.106 --> 00:04:56.096 A:middle
in your app in a

COLLADA document.

00:04:56.456 --> 00:04:59.736 A:middle
Then you take over and

you import this document


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:00.116 --> 00:05:01.326 A:middle
in SceneKit asset catalogs.

00:05:01.706 --> 00:05:03.706 A:middle
But there is much more

you can do with Xcode.

00:05:05.576 --> 00:05:08.116 A:middle
To help you have a better

understanding of your scene,

00:05:08.216 --> 00:05:10.076 A:middle
we built a scene

[inaudible] into Xcode.

00:05:11.406 --> 00:05:13.626 A:middle
This tool is really great,

not only to allow you

00:05:13.626 --> 00:05:17.446 A:middle
to have a better understanding

of what is inside your scene,

00:05:17.546 --> 00:05:20.496 A:middle
but it's also useful to

tweak and refine the scene.

00:05:21.856 --> 00:05:25.846 A:middle
For instance, with direct

manipulation you can place the

00:05:25.846 --> 00:05:29.106 A:middle
nodes where you want, you can

rotate them and scale them,

00:05:29.446 --> 00:05:33.406 A:middle
and that's much less code

to write in your app.

00:05:33.646 --> 00:05:36.156 A:middle
You can also see how

nodes are arranged.

00:05:36.616 --> 00:05:38.996 A:middle
You can re-bound them.

00:05:39.926 --> 00:05:40.856 A:middle
You can merge them.

00:05:40.976 --> 00:05:46.356 A:middle
You can create and delete nodes

as well as node attributes.

00:05:46.606 --> 00:05:49.836 A:middle
You can immediately see which

node has a camera, light,

00:05:49.836 --> 00:05:54.406 A:middle
or geometry attached to

it, and it also allows you

00:05:54.406 --> 00:05:56.866 A:middle
to have a quick look at all

the entities in your scene.

00:05:57.306 --> 00:06:00.526 A:middle
Remember that in SceneKit

node attributes are shared


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:57.306 --> 00:06:00.526 A:middle
Remember that in SceneKit

node attributes are shared

00:06:00.526 --> 00:06:02.296 A:middle
by default, and this

is a great way

00:06:02.296 --> 00:06:04.986 A:middle
to know how many unique

objects you have in your scene,

00:06:05.326 --> 00:06:09.266 A:middle
and it helps for performance.

00:06:09.266 --> 00:06:11.716 A:middle
Of course, we have

inspectors in this editor.

00:06:12.386 --> 00:06:15.416 A:middle
You can edit node properties,

and as you make changes,

00:06:15.516 --> 00:06:18.146 A:middle
they are automatically

reflected in the viewports.

00:06:19.106 --> 00:06:22.306 A:middle
This works for node

attributes as well.

00:06:22.686 --> 00:06:26.966 A:middle
You can edit all the camera,

lights and geometry properties

00:06:26.966 --> 00:06:28.556 A:middle
that are exposed

in the raw APIs.

00:06:28.556 --> 00:06:31.646 A:middle
And finally, it works

on materials.

00:06:32.216 --> 00:06:33.016 A:middle
This is really cool.

00:06:33.556 --> 00:06:36.946 A:middle
It allows you to finely tweak

the rendering of your objects.

00:06:37.056 --> 00:06:39.986 A:middle
You can control exactly how

they will render in your scene,

00:06:40.516 --> 00:06:43.656 A:middle
because what you see

here in the editor,

00:06:43.816 --> 00:06:46.446 A:middle
that is exactly how SceneKit

will render the scene

00:06:46.446 --> 00:06:47.216 A:middle
in your app.

00:06:47.326 --> 00:06:48.486 A:middle
It's a huge timesaver.

00:06:49.816 --> 00:06:51.666 A:middle
In addition to the scene editor,

00:06:51.666 --> 00:06:53.386 A:middle
we have a particle

system editor.

00:06:53.896 --> 00:06:57.456 A:middle
It's really useful to edit

particle system properties,

00:06:57.716 --> 00:07:01.026 A:middle
and it becomes very convenient

when you have to do things


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.716 --> 00:07:01.026 A:middle
and it becomes very convenient

when you have to do things

00:07:01.026 --> 00:07:03.076 A:middle
that would be very

tiresome in code.

00:07:03.286 --> 00:07:05.906 A:middle
For instance, finding

the right animation curve

00:07:05.906 --> 00:07:10.776 A:middle
to control the size of your

particles can take a very long

00:07:10.836 --> 00:07:11.456 A:middle
time in code.

00:07:11.806 --> 00:07:13.836 A:middle
With the editor and

immediate feedback,

00:07:13.836 --> 00:07:14.886 A:middle
it's really quick and easy.

00:07:18.196 --> 00:07:20.976 A:middle
So, we've already

covered a lot here.

00:07:21.736 --> 00:07:23.606 A:middle
We know how to work

with an artist.

00:07:23.606 --> 00:07:25.546 A:middle
You know how to tweak

scenes in the editor.

00:07:25.976 --> 00:07:29.386 A:middle
You can automatically optimize

them using the asset catalogs,

00:07:29.386 --> 00:07:31.846 A:middle
and you can render them on

the screen without having

00:07:31.846 --> 00:07:32.966 A:middle
to write any line of code.

00:07:33.796 --> 00:07:35.896 A:middle
And now, to show you

how truly simple it is

00:07:35.946 --> 00:07:38.516 A:middle
to write a casual 3D

game, we built a demo.

00:07:39.996 --> 00:07:42.856 A:middle
So, first it's a sample code,

so might you have any questions

00:07:42.856 --> 00:07:45.736 A:middle
about what you are going to see

on the screen, you will be able

00:07:45.736 --> 00:07:48.086 A:middle
to dive into the code

and see how it was done.

00:07:48.566 --> 00:07:50.646 A:middle
And it's a great sample code

00:07:50.646 --> 00:07:54.226 A:middle
because it illustrates many

features of SceneKit: animation,

00:07:54.336 --> 00:07:57.386 A:middle
lighting and shadows,

physics, particles

00:07:57.386 --> 00:07:58.286 A:middle
and advanced rendering.

00:07:59.186 --> 00:08:03.046 A:middle
So, let's have a

look at the demo.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.186 --> 00:08:03.046 A:middle
So, let's have a

look at the demo.

00:08:03.046 --> 00:08:05.246 A:middle
So, this is our game

named "Bananas."

00:08:06.116 --> 00:08:09.566 A:middle
As you can see, we are in the

jungle controlling an explorer.

00:08:09.926 --> 00:08:12.566 A:middle
We use gestures to make the

character walk along the path.

00:08:12.646 --> 00:08:16.476 A:middle
On the track, we can collect

bananas, but there are enemies.

00:08:16.736 --> 00:08:20.436 A:middle
We have some animated monkeys

that throw coconuts at us.

00:08:20.546 --> 00:08:22.606 A:middle
So [inaudible], you

can jump and run.

00:08:23.456 --> 00:08:26.836 A:middle
Look how the scene

looks gorgeous.

00:08:27.166 --> 00:08:29.456 A:middle
We have perfect [inaudible]

real-time lighting

00:08:29.456 --> 00:08:31.136 A:middle
as well as real-time shadows.

00:08:31.436 --> 00:08:36.096 A:middle
Look how the character is lit

when it approaches the torches.

00:08:36.176 --> 00:08:38.905 A:middle
As we advance in the game,

we encounter obstacles.

00:08:39.476 --> 00:08:43.616 A:middle
Here is a lava flow, and falling

into it is not a good idea.

00:08:45.456 --> 00:08:46.926 A:middle
So here we have to start again,

00:08:47.476 --> 00:08:49.836 A:middle
and you will notice how

the explorer produce dust

00:08:50.076 --> 00:08:50.676 A:middle
as she runs.

00:08:50.986 --> 00:08:55.056 A:middle
If you look at the background,

you will notice a volcano.

00:08:55.116 --> 00:08:57.086 A:middle
The volcano is erupting,

00:08:57.086 --> 00:08:59.166 A:middle
and this is where

the lava comes from.

00:08:59.166 --> 00:09:02.576 A:middle
In fact, everything that's

in this scene is animated:


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.166 --> 00:09:02.576 A:middle
In fact, everything that's

in this scene is animated:

00:09:02.976 --> 00:09:05.396 A:middle
the character and the

enemies, the lava,

00:09:05.396 --> 00:09:07.246 A:middle
the torches, the vines as well.

00:09:09.376 --> 00:09:11.826 A:middle
And as you can see,

everything is 3D in this scene.

00:09:12.676 --> 00:09:15.546 A:middle
When the character moves, the

camera follows in 3D space

00:09:15.856 --> 00:09:17.136 A:middle
and offers new points of view.

00:09:21.086 --> 00:09:23.846 A:middle
We also have a soundtrack

and sound effects.

00:09:23.846 --> 00:09:27.766 A:middle
There is also a basic UI that

show you how much time is left

00:09:27.916 --> 00:09:29.216 A:middle
and your current score.

00:09:30.666 --> 00:09:33.416 A:middle
This one's really supposed to

be on an iPad, but it works

00:09:33.416 --> 00:09:38.906 A:middle
on iPhone too at 60

frames per second.

00:09:39.026 --> 00:09:40.356 A:middle
Okay. Thanks, Thomas.

00:09:40.576 --> 00:09:40.926 A:middle
Thank you.

00:09:42.516 --> 00:09:48.716 A:middle
[ Applause ]

00:09:49.216 --> 00:09:50.636 A:middle
So, this was "Bananas."

00:09:51.856 --> 00:09:55.646 A:middle
It's an All Objective-C project,

and it's a small project:

00:09:56.286 --> 00:09:59.446 A:middle
only 2,700 lines of code

00:09:59.646 --> 00:10:03.656 A:middle
for everything you saw

onscreen today for iOS and OS X.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.646 --> 00:10:03.656 A:middle
for everything you saw

onscreen today for iOS and OS X.

00:10:05.476 --> 00:10:10.256 A:middle
And so, you don't have

to have a big team

00:10:10.256 --> 00:10:12.606 A:middle
to write a 3D casual

game with SceneKit.

00:10:12.856 --> 00:10:15.476 A:middle
Bananas was written by

a team of one designer

00:10:15.476 --> 00:10:17.266 A:middle
and only one engineer.

00:10:17.686 --> 00:10:19.876 A:middle
It's really easy

to make such games.

00:10:20.046 --> 00:10:22.306 A:middle
So first, a quick look

behind the scenes.

00:10:23.426 --> 00:10:24.836 A:middle
Here is our world.

00:10:24.836 --> 00:10:27.976 A:middle
It's a simple track on

which the character walks.

00:10:29.546 --> 00:10:33.276 A:middle
Look how palm trees and rocks do

not always stand on the ground.

00:10:33.876 --> 00:10:36.636 A:middle
This is because your scene

should only be made of elements

00:10:36.636 --> 00:10:40.626 A:middle
that will, at some point,

be visible from the camera.

00:10:41.126 --> 00:10:42.076 A:middle
Here is a side view.

00:10:42.396 --> 00:10:45.166 A:middle
As you can see, vines

aren't attached to anything.

00:10:45.166 --> 00:10:48.076 A:middle
They float in the air, and

the world suddenly ends.

00:10:48.796 --> 00:10:52.336 A:middle
There's no need to have extra

geometry pushed to the GPU

00:10:52.336 --> 00:10:54.026 A:middle
if it's never rendered

onto the screen.

00:10:56.336 --> 00:10:57.966 A:middle
We have low [inaudible]

for the mountains

00:10:57.966 --> 00:11:00.676 A:middle
and the volcano as

the background.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:57.966 --> 00:11:00.676 A:middle
and the volcano as

the background.

00:11:01.266 --> 00:11:04.566 A:middle
It's absolutely fine to cheat

when you write 3D games.

00:11:04.836 --> 00:11:08.366 A:middle
Here, the scene is sparse,

and you have to find tricks

00:11:08.366 --> 00:11:11.446 A:middle
to make the scene gorgeous

but really cheap to render.

00:11:11.786 --> 00:11:18.276 A:middle
So to give you some idea

of reasonable numbers,

00:11:18.556 --> 00:11:20.046 A:middle
here are statistics

from the game.

00:11:21.016 --> 00:11:24.796 A:middle
We have 10 lights in the world,

but each object is only affected

00:11:24.796 --> 00:11:25.916 A:middle
by three lights at most.

00:11:26.586 --> 00:11:28.726 A:middle
We have 200k polygons

in the world,

00:11:28.726 --> 00:11:31.546 A:middle
but at each frame,

only 80 are rendered.

00:11:31.546 --> 00:11:36.126 A:middle
And to finish, we have at

most 50 draw calls per frame,

00:11:36.126 --> 00:11:37.306 A:middle
and that will make more sense

00:11:37.306 --> 00:11:39.236 A:middle
when Thomas talks

about performance.

00:11:42.166 --> 00:11:46.026 A:middle
So of course we use SceneKit

assets catalogs in "Bananas."

00:11:46.456 --> 00:11:50.946 A:middle
We have about 25 3D documents

that store animation, models,

00:11:51.036 --> 00:11:52.536 A:middle
textures and particle systems.

00:11:53.506 --> 00:11:57.736 A:middle
And how do you use that many

different documents you want

00:11:57.736 --> 00:11:59.366 A:middle
to consider in your game?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.126 --> 00:12:02.786 A:middle
Well, let's take this example.

00:12:02.936 --> 00:12:06.286 A:middle
Here we have a document

which stores the jungle,

00:12:06.286 --> 00:12:08.006 A:middle
and then those are documents

00:12:08.476 --> 00:12:11.556 A:middle
which stores our animated

monkey, and we want to view

00:12:11.556 --> 00:12:13.046 A:middle
that monkey in our world.

00:12:13.436 --> 00:12:15.516 A:middle
The first step is really easy.

00:12:15.776 --> 00:12:18.096 A:middle
All you have to do is

to load the two scenes.

00:12:18.596 --> 00:12:21.596 A:middle
We have to - where you

have to be careful is

00:12:21.596 --> 00:12:23.866 A:middle
that you cannot directly

add the root node

00:12:23.866 --> 00:12:25.676 A:middle
of one scene to another scene.

00:12:26.436 --> 00:12:29.666 A:middle
This is because root nodes

are not meant to be rebounded.

00:12:30.426 --> 00:12:31.726 A:middle
What you have to do instead is

00:12:32.566 --> 00:12:35.856 A:middle
to retrieve the node you're

interested in by using its name

00:12:36.406 --> 00:12:38.516 A:middle
and then add it to

the original scene.

00:12:38.796 --> 00:12:45.056 A:middle
And of course, you can add

multiple copies of that node.

00:12:45.056 --> 00:12:48.516 A:middle
So SceneKit is a high level

API that [inaudible] well

00:12:48.516 --> 00:12:51.426 A:middle
with other APIs on

the web platform,

00:12:51.816 --> 00:12:54.946 A:middle
so we support game controllers

to control the character.

00:12:54.946 --> 00:12:57.736 A:middle
But we also leverage

gesture recognizers

00:12:57.736 --> 00:13:01.516 A:middle
and implemented our own

"D-pad" gesture recognizer


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:57.736 --> 00:13:01.516 A:middle
and implemented our own

"D-pad" gesture recognizer

00:13:01.516 --> 00:13:04.176 A:middle
to make the character jump

and go left and right.

00:13:04.766 --> 00:13:08.516 A:middle
And then on OS X, we also

support game controllers

00:13:08.636 --> 00:13:10.736 A:middle
and simply listen

to keyboard events.

00:13:12.476 --> 00:13:14.696 A:middle
So how do we move the character?

00:13:14.696 --> 00:13:15.876 A:middle
First, we have to animate it.

00:13:16.456 --> 00:13:19.946 A:middle
Our character is skinned, which

means that it has a skeleton

00:13:19.946 --> 00:13:22.676 A:middle
with bones, and by

animating these bones,

00:13:22.766 --> 00:13:24.136 A:middle
we can define the geometry

00:13:24.136 --> 00:13:26.936 A:middle
and make the character

adopt defined postures.

00:13:27.186 --> 00:13:31.136 A:middle
Our character can

run, jump and be idle.

00:13:31.356 --> 00:13:33.436 A:middle
And you have different

animations

00:13:33.676 --> 00:13:35.346 A:middle
for the bones in these files.

00:13:36.636 --> 00:13:39.636 A:middle
Animating a character

is just as easy

00:13:40.146 --> 00:13:43.276 A:middle
as retrieving a Core

Animation animation

00:13:43.276 --> 00:13:45.566 A:middle
by using the assigned

sceneSource class.

00:13:45.846 --> 00:13:47.806 A:middle
It allows us to retrieve

an animation,

00:13:48.196 --> 00:13:52.816 A:middle
with a unique identifier

of the animation

00:13:52.816 --> 00:13:54.416 A:middle
that you can find in Xcode.

00:13:55.446 --> 00:13:58.046 A:middle
And then, animating the

character is just as easy

00:13:58.516 --> 00:14:02.926 A:middle
as adding this animation

to the character node.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.516 --> 00:14:02.926 A:middle
as adding this animation

to the character node.

00:14:03.136 --> 00:14:05.276 A:middle
Okay, so now we animating

the character,

00:14:05.276 --> 00:14:06.586 A:middle
but we still have to move it.

00:14:06.906 --> 00:14:08.456 A:middle
There are many ways to do that,

00:14:08.456 --> 00:14:10.886 A:middle
and here is the technique

we used in "Bananas."

00:14:14.386 --> 00:14:18.106 A:middle
In our authoring tool,

we placed empty nodes

00:14:18.106 --> 00:14:21.416 A:middle
at different locations

in the scene.

00:14:21.606 --> 00:14:24.296 A:middle
We then use a [inaudible]

of time

00:14:24.896 --> 00:14:26.306 A:middle
to interpolate these values.

00:14:26.736 --> 00:14:29.546 A:middle
It's a smooth parametric

curve that goes

00:14:29.546 --> 00:14:31.026 A:middle
through each of these locations.

00:14:31.156 --> 00:14:33.956 A:middle
And then moving the

character is just as easy

00:14:34.716 --> 00:14:37.016 A:middle
as evaluating this function

00:14:37.016 --> 00:14:42.396 A:middle
at different times,

between zero and one.

00:14:42.396 --> 00:14:45.106 A:middle
And for the camera, when the

character goes to the right,

00:14:45.416 --> 00:14:49.056 A:middle
we simply [inaudible] the

camera, and at each frame,

00:14:49.446 --> 00:14:54.126 A:middle
we move it by 120 feet its

distance to the character.

00:14:55.336 --> 00:14:57.856 A:middle
This gives us these nice

[inaudible] animations that's

00:14:57.856 --> 00:15:01.686 A:middle
really pleasing when

you play the game.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:57.856 --> 00:15:01.686 A:middle
really pleasing when

you play the game.

00:15:01.896 --> 00:15:05.856 A:middle
Note, in iOS 8 and

OS X Yosemite,

00:15:05.856 --> 00:15:09.006 A:middle
SceneKit has an active

support for physics.

00:15:09.216 --> 00:15:12.046 A:middle
And we use collision detection

at many places in the game -

00:15:12.886 --> 00:15:14.776 A:middle
to make the character

stay on the path,

00:15:15.216 --> 00:15:17.386 A:middle
to detect when we

are hit by coconuts

00:15:17.386 --> 00:15:19.266 A:middle
and when we collect

bananas, for instance.

00:15:20.266 --> 00:15:21.156 A:middle
How does it work?

00:15:21.566 --> 00:15:25.166 A:middle
Well, each scene has a physics

world, which has a delegate.

00:15:25.306 --> 00:15:27.976 A:middle
And each time a collision

occurs in the scene,

00:15:28.326 --> 00:15:30.826 A:middle
the delegate is notified

and can react.

00:15:31.656 --> 00:15:35.066 A:middle
We can also explicitly perform

ray tests, and that what we use

00:15:35.066 --> 00:15:39.596 A:middle
to compute is the

altitude of the character.

00:15:39.596 --> 00:15:43.776 A:middle
So we cast a ray and compute the

intersection between that ray

00:15:43.776 --> 00:15:48.346 A:middle
and the ground to calculate

the altitude of the character.

00:15:50.926 --> 00:15:55.636 A:middle
Animating items is different

than animating a character.

00:15:55.926 --> 00:15:59.176 A:middle
For items such as the

bananas, we use actions

00:15:59.176 --> 00:16:01.616 A:middle
that was presented in

the previous session,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.176 --> 00:16:01.616 A:middle
that was presented in

the previous session,

00:16:01.696 --> 00:16:04.966 A:middle
that really easy to

manipulate programmatically.

00:16:09.266 --> 00:16:11.126 A:middle
So here's the lighting

in "Bananas."

00:16:11.716 --> 00:16:14.096 A:middle
As you can see, we have objects

00:16:14.096 --> 00:16:16.006 A:middle
that aren't affected

by any light.

00:16:16.276 --> 00:16:17.866 A:middle
They use a constant

lighting model.

00:16:18.866 --> 00:16:22.166 A:middle
For all the other objects in the

scene, we add an ambient light,

00:16:22.166 --> 00:16:24.326 A:middle
so it's very ambient

when it's all black.

00:16:25.506 --> 00:16:27.586 A:middle
Next, we have the

directional key light.

00:16:27.586 --> 00:16:33.056 A:middle
And under there directional

backlight, to add more contrast.

00:16:34.036 --> 00:16:37.016 A:middle
Finally, for torches

and lava flows,

00:16:37.016 --> 00:16:39.106 A:middle
we have only directional lights.

00:16:39.656 --> 00:16:44.976 A:middle
With this dynamic lighting,

we also want shadows,

00:16:44.976 --> 00:16:47.426 A:middle
and we have multiple

techniques in "Bananas."

00:16:47.606 --> 00:16:49.006 A:middle
First, static shadows.

00:16:50.566 --> 00:16:53.516 A:middle
Static shadows are suitable for

objects that aren't animated

00:16:53.516 --> 00:16:55.426 A:middle
in the scene, such

as the palm trees.

00:16:57.076 --> 00:16:59.096 A:middle
Static shadows are

baked into textures,

00:16:59.566 --> 00:17:02.236 A:middle
which means that they

are rendered offline


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.566 --> 00:17:02.236 A:middle
which means that they

are rendered offline

00:17:02.236 --> 00:17:03.256 A:middle
in an authoring tool.

00:17:03.716 --> 00:17:06.536 A:middle
And that's why they are

generally very complex

00:17:06.536 --> 00:17:07.106 A:middle
and detailed.

00:17:08.886 --> 00:17:12.746 A:middle
Setting a static shadow is

as simple as setting an image

00:17:13.056 --> 00:17:15.046 A:middle
to the multiplied

property of a material.

00:17:16.316 --> 00:17:18.746 A:middle
But we also have

dynamic shadows,

00:17:18.856 --> 00:17:20.915 A:middle
for objects that move,

such as a character.

00:17:22.106 --> 00:17:24.146 A:middle
For dynamic shadows,

we use shadow maps.

00:17:24.586 --> 00:17:27.906 A:middle
These are real-time shadows and

suitable for animated objects.

00:17:28.165 --> 00:17:31.016 A:middle
And making your light

cast shadows is as simple

00:17:31.246 --> 00:17:33.566 A:middle
as setting a property.

00:17:33.566 --> 00:17:35.946 A:middle
Next, of course you

can mix techniques

00:17:35.946 --> 00:17:38.456 A:middle
and use dynamic and

static shadows.

00:17:39.366 --> 00:17:42.006 A:middle
After you make your

light cast shadows,

00:17:42.466 --> 00:17:47.726 A:middle
you can simply exclude nodes

that are using static shadows,

00:17:48.016 --> 00:17:51.106 A:middle
so that they don't

cast dynamic shadows.

00:17:51.846 --> 00:17:55.576 A:middle
This can also be achieved

by using categoryBitMasks.

00:17:56.026 --> 00:18:00.986 A:middle
You use exclusive masks

on the light and nodes


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:56.026 --> 00:18:00.986 A:middle
You use exclusive masks

on the light and nodes

00:18:00.986 --> 00:18:02.136 A:middle
that don't cast shadows.

00:18:04.616 --> 00:18:08.566 A:middle
So this is one example of

dynamic shadows, but we have one

00:18:08.566 --> 00:18:11.806 A:middle
on other, which we

call projected shadows.

00:18:12.446 --> 00:18:15.716 A:middle
Projected shadows are

real-time as well,

00:18:16.316 --> 00:18:17.416 A:middle
but they are simplified,

00:18:17.556 --> 00:18:19.916 A:middle
and they are very suitable

for low-end devices.

00:18:21.276 --> 00:18:23.666 A:middle
Using projected shadows is done

00:18:23.836 --> 00:18:26.306 A:middle
by using the modulated

shadow mode.

00:18:27.696 --> 00:18:30.466 A:middle
You set an image to the

gobo property of a light,

00:18:30.466 --> 00:18:32.806 A:middle
and then every object

that is lit

00:18:33.116 --> 00:18:38.076 A:middle
with this light has this

image projected on it.

00:18:38.326 --> 00:18:44.946 A:middle
So in "Bananas," to make the

floor only receive this image,

00:18:45.006 --> 00:18:47.186 A:middle
we use a categoryBitMask.

00:18:48.806 --> 00:18:50.956 A:middle
Next, particle systems.

00:18:51.636 --> 00:18:54.226 A:middle
We use particle systems

extensively in "Bananas."

00:18:54.376 --> 00:18:57.326 A:middle
We use them for torches and

when the character walks.

00:18:58.696 --> 00:19:00.956 A:middle
Using particle system

is real easy.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.696 --> 00:19:00.956 A:middle
Using particle system

is real easy.

00:19:01.096 --> 00:19:03.366 A:middle
All you have to do is

load a particle system

00:19:03.366 --> 00:19:05.246 A:middle
from a file and add

it to a node.

00:19:06.326 --> 00:19:08.416 A:middle
[Inaudible] particle

system of dynamic,

00:19:08.556 --> 00:19:11.856 A:middle
we can make the character emit

a lot of dirt when she runs

00:19:12.336 --> 00:19:14.436 A:middle
and emit nothing

when she stands idle.

00:19:14.916 --> 00:19:20.466 A:middle
We also have some nice visual

improvements in "Bananas."

00:19:21.266 --> 00:19:23.256 A:middle
We use geometry animation

for the vines,

00:19:23.856 --> 00:19:26.546 A:middle
and we use texture animation

for the lava and the volcano.

00:19:27.036 --> 00:19:30.336 A:middle
You might have seen that smoke

is emitted by the volcano,

00:19:30.746 --> 00:19:33.646 A:middle
and that the lava

flow is animated.

00:19:33.646 --> 00:19:36.576 A:middle
This is done using

shader modifiers.

00:19:36.576 --> 00:19:40.016 A:middle
What we do is we have

a shader modifier

00:19:40.256 --> 00:19:43.556 A:middle
that continuously updates

the texture coordinates

00:19:43.556 --> 00:19:45.006 A:middle
of the lava and the volcano.

00:19:45.756 --> 00:19:46.646 A:middle
This is really simple.

00:19:48.156 --> 00:19:51.406 A:middle
Next, we have some

visual postprocessing.

00:19:51.626 --> 00:19:54.276 A:middle
We use SCNTechnique,

which is new this year

00:19:54.796 --> 00:19:58.526 A:middle
and that lets us achieve color

effects and image deformation.

00:19:59.156 --> 00:20:01.536 A:middle
We use that in "Bananas"

when we launch the game


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.156 --> 00:20:01.536 A:middle
We use that in "Bananas"

when we launch the game

00:20:01.536 --> 00:20:03.826 A:middle
to have this nice

grayscale effect.

00:20:05.536 --> 00:20:07.506 A:middle
We also use SpriteKit overlays.

00:20:07.716 --> 00:20:09.676 A:middle
SpriteKit overlays

are really nice,

00:20:09.676 --> 00:20:11.616 A:middle
because they are cross-platform.

00:20:11.616 --> 00:20:13.676 A:middle
They work on iOS and OS X.

00:20:13.676 --> 00:20:16.446 A:middle
And they let you build

UIs that work everywhere.

00:20:16.836 --> 00:20:22.946 A:middle
In SpriteKit - in "Bananas," we

use that to display a simple UI

00:20:22.946 --> 00:20:26.416 A:middle
that shows you the final

score, and when you're playing,

00:20:26.746 --> 00:20:29.366 A:middle
it shows you the current

time and your score.

00:20:29.876 --> 00:20:36.336 A:middle
And finally, we use an SKAction

to play sound in the game.

00:20:36.546 --> 00:20:38.896 A:middle
So as you saw, we

have a soundtrack

00:20:38.896 --> 00:20:40.176 A:middle
as well as sound effects.

00:20:40.666 --> 00:20:44.166 A:middle
So I hope we showed

you how simple it is

00:20:44.206 --> 00:20:46.406 A:middle
to write casual 3D

games with SceneKit.

00:20:46.726 --> 00:20:50.066 A:middle
We truly believe that

anyone, even a small team,

00:20:50.166 --> 00:20:51.616 A:middle
can write games with SceneKit.

00:20:51.616 --> 00:20:53.626 A:middle
And with that, I hand

it over to Thomas,

00:20:54.026 --> 00:20:55.286 A:middle
to talk about performance.

00:20:55.836 --> 00:20:56.226 A:middle
Thanks.

00:20:57.516 --> 00:21:01.436 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.516 --> 00:21:01.436 A:middle
[ Applause ]

00:21:01.936 --> 00:21:02.356 A:middle
&gt;&gt; Thank you.

00:21:03.606 --> 00:21:05.936 A:middle
Okay. So let's talk

about performance now.

00:21:06.656 --> 00:21:11.296 A:middle
So Xcode has some great

tools to get information

00:21:11.296 --> 00:21:14.146 A:middle
about performance and in

particular with graphics,

00:21:14.146 --> 00:21:18.426 A:middle
performance with graphics report

that you probably already knew.

00:21:19.356 --> 00:21:23.166 A:middle
In this release of Xcode 6,

we are adding a new report,

00:21:24.036 --> 00:21:25.616 A:middle
that we call the

SceneKit report,

00:21:25.946 --> 00:21:30.306 A:middle
that will give you CPU time

information about your game.

00:21:31.266 --> 00:21:33.546 A:middle
So this report is not available

00:21:33.546 --> 00:21:36.046 A:middle
in the first seed

of Xcode 6 yet.

00:21:36.266 --> 00:21:38.806 A:middle
So you will have to wait for the

next seed to have it in hand.

00:21:39.306 --> 00:21:41.666 A:middle
But I would like to

present how it works now,

00:21:41.756 --> 00:21:43.176 A:middle
since we are talking

about performance.

00:21:43.646 --> 00:21:48.426 A:middle
So this report will give

you timing information

00:21:48.426 --> 00:21:50.876 A:middle
about all the different

steps of your game loop.

00:21:51.426 --> 00:21:53.946 A:middle
You'll remember your game

loop looks like this.

00:21:54.066 --> 00:21:56.956 A:middle
It's made of both

callbacks that you implement

00:21:56.956 --> 00:22:01.576 A:middle
to your game logic, and also

of SceneKit internal process,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:56.956 --> 00:22:01.576 A:middle
to your game logic, and also

of SceneKit internal process,

00:22:01.576 --> 00:22:04.626 A:middle
like rendering itself or

the evaluation of physics

00:22:04.716 --> 00:22:06.536 A:middle
and animations and constraints.

00:22:08.056 --> 00:22:14.616 A:middle
So the SceneKit report will give

you many milliseconds aspect

00:22:14.616 --> 00:22:18.026 A:middle
into those different steps.

00:22:18.026 --> 00:22:22.796 A:middle
And this is for iOS only.

00:22:23.386 --> 00:22:28.686 A:middle
But on OS X, we have something

equivalent, directly available

00:22:28.686 --> 00:22:31.766 A:middle
in the SCNView with the

showsStatistics property.

00:22:32.936 --> 00:22:35.996 A:middle
If you set this statistics

- this property to yes,

00:22:35.996 --> 00:22:38.886 A:middle
it will display a little

overlay on top of your view

00:22:39.216 --> 00:22:41.746 A:middle
that you can expand to get

more detailed statistics.

00:22:42.436 --> 00:22:45.166 A:middle
And basically, it contains

the same information

00:22:45.746 --> 00:22:47.316 A:middle
as the iOS report.

00:22:48.376 --> 00:22:52.516 A:middle
Sorry - here it is.

00:22:52.646 --> 00:22:52.896 A:middle
Okay.

00:22:54.186 --> 00:22:57.196 A:middle
And so this is how

to get information.

00:22:57.296 --> 00:22:59.386 A:middle
Now, let's see how to

analyze this information.

00:22:59.796 --> 00:23:03.876 A:middle
If your game is running slow,

the first thing to understand is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.796 --> 00:23:03.876 A:middle
If your game is running slow,

the first thing to understand is

00:23:03.876 --> 00:23:06.666 A:middle
if you are limited by

the CPU or by the GPU.

00:23:07.286 --> 00:23:12.896 A:middle
For this, use a graphic report

and look at the third column.

00:23:13.846 --> 00:23:16.106 A:middle
It will tell you how many

milliseconds are spent

00:23:16.106 --> 00:23:18.046 A:middle
on the CPU side and

the GPU side.

00:23:18.856 --> 00:23:21.766 A:middle
Both should be under 16

milliseconds if you want

00:23:21.766 --> 00:23:25.726 A:middle
to run your game at

60 frames per second.

00:23:25.726 --> 00:23:28.816 A:middle
Now let's say we are alerted

by the GPU, let's say.

00:23:29.596 --> 00:23:33.986 A:middle
You can switch to the

SceneKit report to get details

00:23:33.986 --> 00:23:35.806 A:middle
about the different steps.

00:23:36.016 --> 00:23:39.026 A:middle
And then depending

on the returned -

00:23:39.086 --> 00:23:40.946 A:middle
the numbers that are returned,

00:23:41.906 --> 00:23:43.836 A:middle
there are some obvious

actions we can do.

00:23:43.946 --> 00:23:47.766 A:middle
For example, if it says that

most of the time is spent

00:23:47.766 --> 00:23:50.426 A:middle
in physics, you might

want to reduce the number

00:23:50.426 --> 00:23:51.946 A:middle
of dynamic bodies in your scene

00:23:52.176 --> 00:23:54.326 A:middle
or simplify the shape

of your bodies.

00:23:54.946 --> 00:23:56.966 A:middle
And if it's in particles,

00:23:56.966 --> 00:23:59.626 A:middle
you want to [inaudible]

reduce the number of emitters

00:23:59.626 --> 00:24:01.606 A:middle
or reduce the number

of emitted particles.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.626 --> 00:24:01.606 A:middle
or reduce the number

of emitted particles.

00:24:02.136 --> 00:24:04.496 A:middle
So these are the obvious things.

00:24:04.776 --> 00:24:08.436 A:middle
Now, less obvious is

the time you spent

00:24:08.776 --> 00:24:12.856 A:middle
in the rendering itself or when

pushing the OpenGL commands.

00:24:14.286 --> 00:24:17.746 A:middle
Then it's very likely because

your scene requires too many

00:24:17.746 --> 00:24:18.826 A:middle
draw calls to render.

00:24:20.496 --> 00:24:24.246 A:middle
The number of draw calls

is something very important

00:24:24.246 --> 00:24:25.006 A:middle
for your frame rate.

00:24:25.446 --> 00:24:26.836 A:middle
And if you have too

many draw calls,

00:24:26.836 --> 00:24:30.186 A:middle
it will impact your CPU time.

00:24:30.386 --> 00:24:33.576 A:middle
You can check how many draw

calls your scene is doing

00:24:33.576 --> 00:24:35.436 A:middle
with a SceneKit report

by looking

00:24:35.766 --> 00:24:37.086 A:middle
at the third column here.

00:24:39.016 --> 00:24:40.196 A:middle
This is for iOS.

00:24:40.376 --> 00:24:42.086 A:middle
On OS X, you have

the same information

00:24:42.086 --> 00:24:45.956 A:middle
in the statistics overlay

in the lower right corner.

00:24:46.966 --> 00:24:52.256 A:middle
And if this number is big, and

if you are limited by the CPU,

00:24:52.386 --> 00:24:54.006 A:middle
you want to reduce the

number of draw calls.

00:24:54.176 --> 00:24:56.816 A:middle
And to do that, what

you can try to do is

00:24:56.816 --> 00:25:01.696 A:middle
to flatten your static

objects into one single node.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:56.816 --> 00:25:01.696 A:middle
to flatten your static

objects into one single node.

00:25:01.986 --> 00:25:05.916 A:middle
For example, in "Bananas," we

have many plants and palm trees

00:25:05.916 --> 00:25:10.106 A:middle
that are static, and instead of

adding one node for every plant,

00:25:10.796 --> 00:25:14.006 A:middle
we grouped them and flattened

them into a single node,

00:25:14.496 --> 00:25:17.446 A:middle
so that it ends up

into a single draw call

00:25:17.446 --> 00:25:19.246 A:middle
to render many plants

at the same time.

00:25:20.796 --> 00:25:23.896 A:middle
To flatten objects,

you have two options.

00:25:25.296 --> 00:25:26.386 A:middle
You can ask your artist

00:25:26.576 --> 00:25:29.216 A:middle
to flatten directly

in the 3D software.

00:25:29.856 --> 00:25:31.726 A:middle
3D software, great tools

00:25:31.726 --> 00:25:33.506 A:middle
to flatten everything

into a single object.

00:25:34.066 --> 00:25:35.326 A:middle
This is the recommended way,

00:25:35.326 --> 00:25:38.366 A:middle
because everything

is pre-computed,

00:25:38.366 --> 00:25:39.586 A:middle
so that nothing to

do at runtime.

00:25:39.586 --> 00:25:41.026 A:middle
And this is obviously faster.

00:25:42.276 --> 00:25:45.606 A:middle
Now if needed, you can also

flatten things programmatically

00:25:45.606 --> 00:25:49.376 A:middle
with the flattenedClone

method and SCNNode.

00:25:50.156 --> 00:25:53.526 A:middle
It will flatten the entire node

tree and return the new node

00:25:53.786 --> 00:25:55.966 A:middle
with no time load that

render exactly the same.

00:25:56.556 --> 00:26:02.086 A:middle
So flattening is really going to

improve the number of draw call,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:56.556 --> 00:26:02.086 A:middle
So flattening is really going to

improve the number of draw call,

00:26:02.086 --> 00:26:03.986 A:middle
but don't flatten too much.

00:26:04.946 --> 00:26:08.626 A:middle
Because let's say you

have a very large level.

00:26:08.976 --> 00:26:11.216 A:middle
If you flatten everything

into a single node,

00:26:11.216 --> 00:26:14.996 A:middle
it will end up into a giant

mesh, with millions of polygon.

00:26:15.556 --> 00:26:18.646 A:middle
And so you will lose the

benefit of the culling

00:26:18.876 --> 00:26:20.536 A:middle
of the objects that

are not visible.

00:26:20.916 --> 00:26:22.836 A:middle
Your big mesh will

be always visible,

00:26:23.766 --> 00:26:26.826 A:middle
and so you will push millions

of polygons at every frame,

00:26:27.266 --> 00:26:29.246 A:middle
which is obviously not

good for the performance.

00:26:29.956 --> 00:26:34.116 A:middle
And also, your huge mesh

will be lit by all the lights

00:26:34.386 --> 00:26:37.316 A:middle
in the world, which is not

good for the performance,

00:26:37.316 --> 00:26:38.676 A:middle
and I will explain why after.

00:26:39.706 --> 00:26:42.456 A:middle
So here is how we

did in "Bananas."

00:26:43.016 --> 00:26:47.676 A:middle
We first split the level

into chunks that are

00:26:47.676 --> 00:26:49.916 A:middle
about the width of the viewport.

00:26:50.476 --> 00:26:56.646 A:middle
That way, when the character

progress, we can directly -

00:26:56.806 --> 00:27:00.056 A:middle
SceneKit automatically culls

the chunks that are not visible,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:56.806 --> 00:27:00.056 A:middle
SceneKit automatically culls

the chunks that are not visible,

00:27:00.056 --> 00:27:01.106 A:middle
and so they are not pushed

00:27:01.106 --> 00:27:02.516 A:middle
to the rendering

[inaudible] at all.

00:27:03.576 --> 00:27:07.106 A:middle
And since almost every scene

in one chunk is flattened,

00:27:08.176 --> 00:27:10.346 A:middle
that means that we

are only rendering one

00:27:10.346 --> 00:27:12.246 A:middle
or two chunks at the same time.

00:27:12.246 --> 00:27:14.966 A:middle
And so we are really pushing

a few number of draw calls

00:27:14.966 --> 00:27:16.676 A:middle
to render to chunks

that are visible.

00:27:18.716 --> 00:27:20.716 A:middle
So that's if you

are CPU limited.

00:27:21.506 --> 00:27:24.686 A:middle
Now, if you are GPU

limited, again,

00:27:24.686 --> 00:27:27.846 A:middle
you can use the graphic report

and look at the third column

00:27:27.846 --> 00:27:30.926 A:middle
to check how many milliseconds

you are using on the GPU side.

00:27:31.396 --> 00:27:34.466 A:middle
And if you are GPU limited,

there are two things to look at.

00:27:34.736 --> 00:27:37.086 A:middle
The first one is a

tiler on one side.

00:27:37.086 --> 00:27:40.346 A:middle
The second one is

the renderer/device.

00:27:40.906 --> 00:27:43.696 A:middle
So this is here in

the second column.

00:27:44.586 --> 00:27:47.396 A:middle
So let's consider the

renderer and device for now.

00:27:49.186 --> 00:27:52.776 A:middle
If your renderer and device

usage are at 100 percent,

00:27:53.816 --> 00:27:56.896 A:middle
it is very likely because you

are either fill rate limited,

00:27:57.366 --> 00:27:59.906 A:middle
or you are using too

complex fragment shaders.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:02.526 --> 00:28:04.436 A:middle
So let's consider

first the fill rate.

00:28:04.676 --> 00:28:06.496 A:middle
Fill rate means - if

you're fill rate limited,

00:28:06.496 --> 00:28:10.796 A:middle
it means that you are asking

the GPU to render more pixels -

00:28:10.796 --> 00:28:14.276 A:middle
more fragments per second

than it can actually render.

00:28:14.626 --> 00:28:16.366 A:middle
If that happen, you

can first try to play

00:28:16.366 --> 00:28:18.796 A:middle
with the content scale

factor of your view.

00:28:19.316 --> 00:28:24.196 A:middle
By default, SceneKit is using

a 2x contents scale factor,

00:28:24.286 --> 00:28:25.446 A:middle
which means fully [inaudible].

00:28:25.506 --> 00:28:29.396 A:middle
But you can try, depending on

the device, to switch to 1x

00:28:29.396 --> 00:28:30.946 A:middle
or any intermediate values.

00:28:31.336 --> 00:28:36.326 A:middle
You can also try to reduce the

number of postprocess effects,

00:28:36.796 --> 00:28:38.416 A:middle
since they are usually

full-screen effects.

00:28:38.816 --> 00:28:39.196 A:middle
They are [inaudible].

00:28:39.196 --> 00:28:43.786 A:middle
So typically deferred

shadows, depths of field,

00:28:43.786 --> 00:28:46.966 A:middle
reflective floors and all

your custom postprocessing.

00:28:47.826 --> 00:28:49.646 A:middle
Reduce that if you

are fill rate limited.

00:28:51.426 --> 00:28:54.196 A:middle
Last, you can also try to play

with the anti-aliasing level

00:28:54.736 --> 00:28:57.676 A:middle
by setting the antialiasingMode

property of the view to one

00:28:57.676 --> 00:29:02.466 A:middle
of the available constants

known [inaudible] sampling 4x


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:57.676 --> 00:29:02.466 A:middle
of the available constants

known [inaudible] sampling 4x

00:29:02.836 --> 00:29:04.136 A:middle
for limited sampling.

00:29:04.476 --> 00:29:07.186 A:middle
Note that on iOS, it's

already turned off by default,

00:29:07.186 --> 00:29:09.266 A:middle
and it's 4x by default on OS X.

00:29:09.796 --> 00:29:12.206 A:middle
So that's for the fill rate.

00:29:12.306 --> 00:29:13.966 A:middle
Now, the other reason could be

00:29:13.966 --> 00:29:16.956 A:middle
that you are using too

complex fragment shaders.

00:29:18.476 --> 00:29:22.076 A:middle
And most of the time,

the complexity

00:29:22.076 --> 00:29:24.696 A:middle
of your shaders directly

depends on the complexity

00:29:24.696 --> 00:29:26.196 A:middle
of the lighting in your scene.

00:29:27.636 --> 00:29:31.746 A:middle
So I remind that there

are two type of lightings:

00:29:31.876 --> 00:29:33.496 A:middle
dynamic lighting

and static lighting.

00:29:33.526 --> 00:29:37.256 A:middle
With static lighting, all the

light informations are baked

00:29:37.256 --> 00:29:37.916 A:middle
into textures.

00:29:37.916 --> 00:29:40.416 A:middle
So if they're super-fast,

it can look really great.

00:29:40.766 --> 00:29:43.576 A:middle
But obviously, it only works

with objects that are static.

00:29:45.136 --> 00:29:48.796 A:middle
And so here we focus on dynamic

lightings that we need to use

00:29:48.796 --> 00:29:49.726 A:middle
when objects are moving.

00:29:51.116 --> 00:29:55.826 A:middle
One thing important about lights

is their area of influence.

00:29:57.236 --> 00:30:01.086 A:middle
So you can configure

the attenuation distance


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:57.236 --> 00:30:01.086 A:middle
So you can configure

the attenuation distance

00:30:01.356 --> 00:30:05.146 A:middle
with an attenuationEndDistance,

and beyond that distance,

00:30:05.146 --> 00:30:09.876 A:middle
a light won't influence

the other objects.

00:30:09.876 --> 00:30:11.626 A:middle
And this part is

really important,

00:30:11.626 --> 00:30:13.136 A:middle
because we're getting

into performance.

00:30:13.316 --> 00:30:17.296 A:middle
What matters is not the total

number of lights in your scene.

00:30:17.966 --> 00:30:21.346 A:middle
It's the number of lights

that influence a given object.

00:30:22.126 --> 00:30:26.696 A:middle
So for example, here, I have

three lights in my scene.

00:30:27.166 --> 00:30:30.586 A:middle
But I configured the attenuation

distance so that most

00:30:30.586 --> 00:30:33.346 A:middle
of the objects are only

affected by one light,

00:30:33.676 --> 00:30:35.046 A:middle
or two lights, in

the worst case.

00:30:35.816 --> 00:30:38.456 A:middle
So that means that the light

with the 1, or - sorry.

00:30:38.456 --> 00:30:41.446 A:middle
The object with the 1

will be, the rendering

00:30:41.446 --> 00:30:43.056 A:middle
of them will be relatively

cheap.

00:30:44.496 --> 00:30:45.616 A:middle
The rendering of the objects

00:30:45.616 --> 00:30:48.976 A:middle
with a 2 will be

slightly more expensive.

00:30:48.976 --> 00:30:51.776 A:middle
But at least no objects in

that scene will be affected

00:30:51.776 --> 00:30:53.666 A:middle
by 3 [inaudible]

lights at the same time.

00:30:55.396 --> 00:30:57.636 A:middle
Here's how we did

it in "Bananas."

00:30:58.656 --> 00:31:01.266 A:middle
We placed the torches

and the lava,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.656 --> 00:31:01.266 A:middle
We placed the torches

and the lava,

00:31:01.696 --> 00:31:04.346 A:middle
so that when the character

progress in the game,

00:31:04.776 --> 00:31:07.366 A:middle
it is never affected

by more than one torch

00:31:07.456 --> 00:31:11.186 A:middle
or one lava at a time.

00:31:11.376 --> 00:31:15.886 A:middle
Related to lighting, shadows,

shadows are also expensive.

00:31:15.886 --> 00:31:18.276 A:middle
Again, there are two type of

shadows: dynamic and static.

00:31:18.686 --> 00:31:20.846 A:middle
Static for this particular

scene is baked

00:31:21.076 --> 00:31:22.476 A:middle
into textures with 3D 2s.

00:31:23.536 --> 00:31:25.816 A:middle
And it's fast, so let's focus

00:31:25.816 --> 00:31:28.166 A:middle
on dynamic shadows

for dynamic objects.

00:31:28.706 --> 00:31:32.636 A:middle
The first thing to

consider is what mode

00:31:32.636 --> 00:31:33.876 A:middle
of shadow you want to use.

00:31:34.266 --> 00:31:37.366 A:middle
If you want to use the

real dynamic shadows

00:31:37.366 --> 00:31:39.386 A:middle
with the 4-1 mode,

which is the default.

00:31:40.926 --> 00:31:45.336 A:middle
And you might want to

consider projected shadows

00:31:45.336 --> 00:31:49.766 A:middle
for low-end devices with the

right shadow image it can write

00:31:49.846 --> 00:31:53.006 A:middle
to, and it is really fast.

00:31:53.116 --> 00:31:55.076 A:middle
If you are using

dynamic shadows,

00:31:55.076 --> 00:31:56.286 A:middle
there are still a

few things you can do

00:31:56.286 --> 00:31:57.406 A:middle
to optimize the performance.

00:31:58.326 --> 00:32:01.076 A:middle
The first thing is to play with

the size of the shadow map.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.326 --> 00:32:01.076 A:middle
The first thing is to play with

the size of the shadow map.

00:32:01.966 --> 00:32:04.606 A:middle
When you are using dynamic

shadows, SceneKit computes

00:32:04.666 --> 00:32:06.966 A:middle
such shadow maps at

every frame typically

00:32:06.966 --> 00:32:09.226 A:middle
by rendering your scene from

the light point of view.

00:32:09.566 --> 00:32:14.636 A:middle
So if you're fill rate limited,

by setting the shadow map size

00:32:14.686 --> 00:32:19.536 A:middle
to a smaller size, it will

reduce the fill rate impact

00:32:19.686 --> 00:32:21.786 A:middle
of the shadowMapSize

computation.

00:32:22.346 --> 00:32:27.856 A:middle
You can also play with the

shadowSampleCount property

00:32:27.996 --> 00:32:28.906 A:middle
on SCNLight.

00:32:29.466 --> 00:32:34.796 A:middle
This inputs a lot to the

complexity of the shadow

00:32:34.796 --> 00:32:36.446 A:middle
that is generated to

compute the shadows.

00:32:37.306 --> 00:32:40.496 A:middle
Note that on iOS, it is

already 1x by default,

00:32:40.576 --> 00:32:42.266 A:middle
which corresponds

to hard shadows.

00:32:42.686 --> 00:32:46.966 A:middle
And it is 8x by default on

OS X for smooth shadows.

00:32:49.256 --> 00:32:55.346 A:middle
Still about GPU, one more reason

to be limited by the renderer is

00:32:55.346 --> 00:32:59.526 A:middle
when you are doing too many

texture sample in your game.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.496 --> 00:33:02.506 A:middle
So first thing to

check is to make sure

00:33:02.506 --> 00:33:05.536 A:middle
that you are not using

unnecessary large textures

00:33:05.536 --> 00:33:06.116 A:middle
in your game.

00:33:06.316 --> 00:33:09.536 A:middle
For example, if your texture is

always rendered small on screen,

00:33:09.536 --> 00:33:11.286 A:middle
there's no need to have

a huge texture for that.

00:33:12.466 --> 00:33:15.956 A:middle
One more thing to do is, it's

better - if you're using tons

00:33:15.956 --> 00:33:19.286 A:middle
of textures, it's better to

pack them into a texture atlas.

00:33:20.366 --> 00:33:22.916 A:middle
For that, 3D softwares

have great tools

00:33:22.916 --> 00:33:25.266 A:middle
to bake your textures

into texture atlases,

00:33:25.266 --> 00:33:27.066 A:middle
and you can also use SpriteKit

00:33:27.526 --> 00:33:29.226 A:middle
to generate texture

atlases for you.

00:33:31.236 --> 00:33:34.616 A:middle
If you are using - if you need

to use very large textures,

00:33:34.616 --> 00:33:37.186 A:middle
you can also try to

play with mipmapping.

00:33:38.386 --> 00:33:42.846 A:middle
Mipmapping improves

the performance a lot

00:33:42.846 --> 00:33:45.426 A:middle
when you are rendering a

large texture at a small size,

00:33:45.546 --> 00:33:48.096 A:middle
because it will pick and

choose smaller resolution

00:33:48.586 --> 00:33:49.296 A:middle
of your texture.

00:33:50.146 --> 00:33:51.926 A:middle
It can also improve

the rendering

00:33:52.306 --> 00:33:56.256 A:middle
by reducing some aliasing

effects and some Moire effects.

00:33:57.426 --> 00:33:58.596 A:middle
It has some drawbacks, though.

00:33:58.766 --> 00:34:03.146 A:middle
It takes more time to

load, and it can use also -


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.766 --> 00:34:03.146 A:middle
It takes more time to

load, and it can use also -

00:34:03.146 --> 00:34:04.896 A:middle
it uses also slightly

more memory.

00:34:06.136 --> 00:34:09.485 A:middle
To turn on the mipmapping, just

set the mipFilter property on,

00:34:09.896 --> 00:34:13.886 A:middle
the mipFilter property on

the [inaudible] property.

00:34:13.946 --> 00:34:16.926 A:middle
Set it to linear to turn it

on and none to turn it off.

00:34:19.485 --> 00:34:24.246 A:middle
OK. So that was for the

renderer and device part.

00:34:24.346 --> 00:34:26.976 A:middle
Now, let's say you are

limited by the tiler this time.

00:34:27.886 --> 00:34:29.505 A:middle
If you are limited by the tiler,

00:34:30.096 --> 00:34:33.686 A:middle
that means that you are pushing

too many vertices to the GPU.

00:34:34.076 --> 00:34:35.436 A:middle
And so by extension,

that you are -

00:34:35.436 --> 00:34:36.676 A:middle
you have too many polygons.

00:34:37.275 --> 00:34:42.476 A:middle
You can check how many

polygons your scene is rendering

00:34:42.476 --> 00:34:45.916 A:middle
at every frame, with

SceneKit report here.

00:34:46.616 --> 00:34:47.536 A:middle
This is for iOS.

00:34:48.206 --> 00:34:51.716 A:middle
On OS X, you have the equivalent

in the statistics overlay here.

00:34:52.295 --> 00:34:55.246 A:middle
And so if you have

too many polygons,

00:34:55.686 --> 00:34:58.386 A:middle
obviously the first thing you

can try is to reduce the number

00:34:58.386 --> 00:34:59.546 A:middle
of polygons in your models.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:00.806 --> 00:35:02.656 A:middle
And the second thing

you can try or so is

00:35:02.706 --> 00:35:04.696 A:middle
to play with level of detail.

00:35:06.046 --> 00:35:08.826 A:middle
SceneKit has some support

for level of details.

00:35:09.166 --> 00:35:12.996 A:middle
For example, here I have

three version of the teapot -

00:35:12.996 --> 00:35:15.666 A:middle
of these teapots with

more or less polygons.

00:35:16.236 --> 00:35:18.746 A:middle
And so with the higher

and lower quality.

00:35:19.236 --> 00:35:23.226 A:middle
And I can group them into a

single level of detail array

00:35:24.236 --> 00:35:26.046 A:middle
and assign that to my geometry.

00:35:27.286 --> 00:35:32.506 A:middle
Then SceneKit will automatically

use the right level of detail,

00:35:32.956 --> 00:35:36.786 A:middle
depending on how big your

model is displayed onscreen.

00:35:37.046 --> 00:35:40.776 A:middle
So you can associate to each

resolution either a distance

00:35:40.776 --> 00:35:47.986 A:middle
from the camera or screen reduce

and to tell SceneKit what level

00:35:47.986 --> 00:35:49.936 A:middle
of detail it should use.

00:35:51.396 --> 00:35:54.596 A:middle
And this can help a lot to

reduce the number of polygons

00:35:54.596 --> 00:35:57.396 A:middle
in your game, because with

this example, here for example,

00:35:57.716 --> 00:36:00.746 A:middle
the teapots in the

background are rendered


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:57.716 --> 00:36:00.746 A:middle
the teapots in the

background are rendered

00:36:00.746 --> 00:36:02.336 A:middle
with a low resolution,

00:36:03.206 --> 00:36:06.576 A:middle
and so most of the teapots are

using very low - a small number

00:36:06.576 --> 00:36:09.236 A:middle
of polygons instead of having

the huge resolution all

00:36:09.236 --> 00:36:11.486 A:middle
the time.

00:36:11.486 --> 00:36:15.676 A:middle
So to sum up all of this, when

your game is running slow,

00:36:15.676 --> 00:36:16.626 A:middle
you first need to understand

00:36:16.626 --> 00:36:18.766 A:middle
if you are limited

by the CPU or GPU.

00:36:18.866 --> 00:36:22.526 A:middle
And if it's with the GPU,

you have to check the tiler

00:36:22.526 --> 00:36:24.316 A:middle
or the renderer and device.

00:36:24.546 --> 00:36:27.456 A:middle
If you're limited by the CPU,

you can try to reduce the number

00:36:27.456 --> 00:36:32.326 A:middle
of draw calls by

flattening your scenes,

00:36:32.846 --> 00:36:37.746 A:middle
and also if you are using too

- if your time is spent, sorry,

00:36:37.746 --> 00:36:42.066 A:middle
in physics or animations,

you can try to reduce that.

00:36:42.066 --> 00:36:44.556 A:middle
If you are limited by the tiler,

you can try to play with level

00:36:44.556 --> 00:36:46.266 A:middle
of details to reduce

the number of polygons,

00:36:46.516 --> 00:36:49.476 A:middle
and you can also try to split

your scene in smaller chunks

00:36:49.786 --> 00:36:50.976 A:middle
to alleviate the culling.

00:36:52.296 --> 00:36:54.376 A:middle
If you're limited by

the renderer or device,

00:36:54.726 --> 00:36:58.416 A:middle
you can try to simplify

your materials.

00:36:58.676 --> 00:37:00.966 A:middle
It will end up being

simpler shaders.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.676 --> 00:37:00.966 A:middle
It will end up being

simpler shaders.

00:37:01.676 --> 00:37:05.086 A:middle
You can simplify your

lighting, try to reduce the size

00:37:05.086 --> 00:37:07.446 A:middle
of fill textures and try

to turn on mipmapping

00:37:07.446 --> 00:37:08.836 A:middle
if you are using large textures.

00:37:09.286 --> 00:37:11.496 A:middle
And if you are fill rate

limited, you can also try

00:37:11.496 --> 00:37:13.816 A:middle
to reduce the number of

full-screen postprocess.

00:37:15.276 --> 00:37:18.496 A:middle
Now some more, other

performance notes.

00:37:20.066 --> 00:37:21.546 A:middle
First, about sharing.

00:37:22.816 --> 00:37:25.486 A:middle
When you copy a node

in SceneKit,

00:37:26.116 --> 00:37:29.276 A:middle
by default it shares

the attributes.

00:37:30.196 --> 00:37:32.456 A:middle
So this is ideal

for the performance.

00:37:32.936 --> 00:37:38.416 A:middle
But now, let's say you want to

modify NodeA.GeometryA.Material.

00:37:39.396 --> 00:37:42.466 A:middle
It will also modify

the color of Node B.

00:37:42.796 --> 00:37:44.356 A:middle
And so this is a common pitfall.

00:37:44.356 --> 00:37:46.136 A:middle
If it's what you

want, that's perfect.

00:37:46.416 --> 00:37:49.216 A:middle
Now, if you want a

different material for Node B,

00:37:49.636 --> 00:37:53.676 A:middle
what you have to do first is

to copy the geometry as well.

00:37:54.706 --> 00:37:56.756 A:middle
And see, the geometry

is immutable,

00:37:56.756 --> 00:38:01.016 A:middle
it is relatively cheap,

because no geometry data is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:56.756 --> 00:38:01.016 A:middle
it is relatively cheap,

because no geometry data is

00:38:01.016 --> 00:38:02.096 A:middle
actually copied.

00:38:02.266 --> 00:38:02.986 A:middle
It's just shared.

00:38:03.536 --> 00:38:07.206 A:middle
And then you can just simply

copy the material as well,

00:38:07.386 --> 00:38:10.616 A:middle
and now you can modify Material

A and Material B independently

00:38:10.616 --> 00:38:13.356 A:middle
to have a different material

colors for your objects.

00:38:15.756 --> 00:38:18.736 A:middle
Another note, this

time about preloading.

00:38:20.276 --> 00:38:24.546 A:middle
By default, SceneKit

will load the information

00:38:24.546 --> 00:38:26.406 A:middle
on the GPU when needed.

00:38:26.516 --> 00:38:29.116 A:middle
That means that when your

objects are never rendered,

00:38:29.306 --> 00:38:30.836 A:middle
nothing is pushed to the GPU.

00:38:31.196 --> 00:38:33.586 A:middle
And the first time an

object appears onscreen,

00:38:33.906 --> 00:38:36.756 A:middle
we compute everything the GPU

needs to render that object.

00:38:37.336 --> 00:38:39.876 A:middle
And depending on the

complexity of this object,

00:38:40.466 --> 00:38:43.446 A:middle
it can take some time, and in

some cases, it can make you

00:38:43.446 --> 00:38:46.726 A:middle
to miss some frame and so

suffer from frame drops.

00:38:48.036 --> 00:38:51.786 A:middle
To avoid that, you can preload

your objects, if you want,

00:38:51.856 --> 00:38:54.056 A:middle
with the prepareObjects

withCompletionHandler

00:38:54.416 --> 00:38:55.316 A:middle
on SCNView.

00:38:56.386 --> 00:38:59.956 A:middle
You can pass to this

method the following object.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:01.406 --> 00:39:03.076 A:middle
If you pass a material instance,

00:39:03.406 --> 00:39:05.596 A:middle
SceneKit will pre-compute

all the textures

00:39:06.246 --> 00:39:08.066 A:middle
that are referenced

by this material.

00:39:09.176 --> 00:39:11.016 A:middle
If you pass the geometry,

00:39:11.646 --> 00:39:13.716 A:middle
it will pre-compute all

the geometry buffers -

00:39:13.716 --> 00:39:17.186 A:middle
like the vertices, no more than

texture coordinates - and also,

00:39:17.186 --> 00:39:19.556 A:middle
all the materials that are

referenced by this geometry.

00:39:20.876 --> 00:39:25.066 A:middle
If you pass a node, it will

preload the entire node tree,

00:39:25.476 --> 00:39:27.016 A:middle
including all the geometries

00:39:27.016 --> 00:39:28.186 A:middle
that are attached

to these nodes.

00:39:29.256 --> 00:39:32.616 A:middle
And last, if you pass the entire

scene, it can do even more.

00:39:33.266 --> 00:39:36.056 A:middle
It will preload the node

tree, but also all the shaders

00:39:36.236 --> 00:39:38.326 A:middle
that are needed to

render the objects.

00:39:39.196 --> 00:39:42.966 A:middle
It only works when you pass a

scene, because SceneKit needs

00:39:42.966 --> 00:39:45.586 A:middle
to know how many lights

you have in your scene

00:39:45.776 --> 00:39:47.476 A:middle
to pre-compute the

right shaders.

00:39:47.706 --> 00:39:51.476 A:middle
In "Bananas," for

example, at launch,

00:39:51.636 --> 00:39:53.226 A:middle
we preload the entire scene

00:39:53.226 --> 00:39:56.676 A:middle
to have almost all our

shaders directly ready

00:39:56.776 --> 00:39:59.416 A:middle
when the game starts.

00:39:59.416 --> 00:40:02.886 A:middle
Okay. Some notes about custom

tools and workflow now.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.416 --> 00:40:02.886 A:middle
Okay. Some notes about custom

tools and workflow now.

00:40:03.526 --> 00:40:06.606 A:middle
So I'm already presented how

00:40:06.606 --> 00:40:09.136 A:middle
to manage your assets

in assets catalogs.

00:40:10.116 --> 00:40:11.946 A:middle
But at some point,

you may want to sort

00:40:11.946 --> 00:40:14.586 A:middle
of customize your workflow.

00:40:15.266 --> 00:40:17.226 A:middle
By, for example,

building your own tools

00:40:17.226 --> 00:40:18.656 A:middle
that we process your assets,

00:40:19.066 --> 00:40:21.186 A:middle
or having your own tools

to debug your game.

00:40:22.126 --> 00:40:26.776 A:middle
And for this, SceneKit

provides some APIs to help you.

00:40:26.906 --> 00:40:29.346 A:middle
The first one is archiving.

00:40:30.716 --> 00:40:32.676 A:middle
Now, this is new

in this release.

00:40:33.126 --> 00:40:35.876 A:middle
All the objects of

the scene graph

00:40:36.126 --> 00:40:39.296 A:middle
of the API conforms

to NSSecureCoding.

00:40:39.866 --> 00:40:44.086 A:middle
So that allows you to

archive whatever object,

00:40:44.086 --> 00:40:47.916 A:middle
an archive with a [inaudible]

NSKeyedArchiver, for example.

00:40:49.436 --> 00:40:53.006 A:middle
SceneKit also allows you to

export your scene as COLLADA.

00:40:53.566 --> 00:40:58.476 A:middle
And here, the advantage is

that you can export to COLLADA

00:40:58.476 --> 00:41:00.536 A:middle
and import it back

to a 3D software.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.476 --> 00:41:00.536 A:middle
and import it back

to a 3D software.

00:41:01.766 --> 00:41:04.366 A:middle
However, note that only a subset

00:41:04.426 --> 00:41:06.756 A:middle
of SceneKit can be

exported to COLLADA.

00:41:07.776 --> 00:41:11.026 A:middle
If we compare both, so

the first difference is

00:41:11.026 --> 00:41:14.396 A:middle
that archives can be

directly loaded on iOS,

00:41:14.926 --> 00:41:17.796 A:middle
although COLLADA files need

to go through Xcode first

00:41:17.796 --> 00:41:19.366 A:middle
if you want to load them on iOS.

00:41:21.456 --> 00:41:26.496 A:middle
Then you can import back COLLADA

files to any 3D software,

00:41:26.496 --> 00:41:29.316 A:middle
but obviously, you can't

import SceneKit archives.

00:41:30.856 --> 00:41:33.396 A:middle
Both report the scene

graph basics,

00:41:33.666 --> 00:41:37.736 A:middle
like the node hierarchies, the

node names, the geometries,

00:41:37.736 --> 00:41:39.656 A:middle
all the materials

and the animations.

00:41:39.776 --> 00:41:40.646 A:middle
They work for both.

00:41:41.666 --> 00:41:46.356 A:middle
But advanced features like

actions, physics, particles

00:41:46.356 --> 00:41:50.096 A:middle
and even custom shaders,

everything is archived -

00:41:50.406 --> 00:41:53.976 A:middle
works with archive but not

in - supported by COLLADA.

00:41:57.216 --> 00:41:58.106 A:middle
One more note.

00:41:58.216 --> 00:41:59.776 A:middle
As mentioned in the

previous session,

00:41:59.876 --> 00:42:01.726 A:middle
SceneKit is now fully

[inaudible] with JavaScript.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.876 --> 00:42:01.726 A:middle
SceneKit is now fully

[inaudible] with JavaScript.

00:42:02.406 --> 00:42:04.836 A:middle
This can be really

helpful for your -

00:42:04.836 --> 00:42:06.286 A:middle
if you want to customize

your workflow

00:42:06.646 --> 00:42:12.636 A:middle
or add debug tools

to debug your games.

00:42:12.636 --> 00:42:16.856 A:middle
It's [inaudible]

with JavaScript call.

00:42:17.656 --> 00:42:21.136 A:middle
And so the "Bananas" sample

code we showed in our -

00:42:21.236 --> 00:42:23.726 A:middle
here is available on

the developer website.

00:42:24.136 --> 00:42:26.776 A:middle
We also have three other

sample codes available:

00:42:27.346 --> 00:42:30.606 A:middle
the little car demo we showed

in the previous session,

00:42:31.136 --> 00:42:33.646 A:middle
the demo that was shown

in the state of the union,

00:42:34.586 --> 00:42:37.976 A:middle
and the 3D slide that was

shown in the previous session

00:42:38.226 --> 00:42:39.746 A:middle
that is for OS X only.

00:42:42.056 --> 00:42:45.796 A:middle
For more information, please

contact our evangelists,

00:42:45.986 --> 00:42:47.786 A:middle
Allan Schaffer and

Filip Iliescu.

00:42:48.726 --> 00:42:51.536 A:middle
We have new gorgeous

documentation available

00:42:51.536 --> 00:42:52.886 A:middle
on the developer

website, as well.

00:42:54.026 --> 00:42:57.056 A:middle
And we have a dedicated

forum for SceneKit

00:42:57.356 --> 00:42:59.156 A:middle
on devforums.apple.com.

00:42:59.156 --> 00:43:03.206 A:middle
Don't hesitate to ask

your questions there.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:59.156 --> 00:43:03.206 A:middle
Don't hesitate to ask

your questions there.

00:43:03.386 --> 00:43:04.796 A:middle
Some related sessions.

00:43:05.956 --> 00:43:08.326 A:middle
So, obviously, the

previous sessions about

00:43:08.326 --> 00:43:09.226 A:middle
"What's New in SceneKit.

00:43:09.636 --> 00:43:13.516 A:middle
Also have a look to

the SpriteKit sessions,

00:43:13.516 --> 00:43:16.746 A:middle
since both can work well

together to achieve great stuff.

00:43:16.746 --> 00:43:16.976 A:middle
Thank you.

00:43:17.516 --> 00:43:20.500 A:middle
[ Applause ]

